
Sensor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a18  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20070000  00082a18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000060  200705bc  00082fd4  000205bc  2**2
                  ALLOC
  3 .stack        00002004  2007061c  00083034  000205bc  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000205e5  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000eb7a  00000000  00000000  0002063e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fcd  00000000  00000000  0002f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000043bc  00000000  00000000  00031185  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000798  00000000  00000000  00035541  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000738  00000000  00000000  00035cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00004c12  00000000  00000000  00036411  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a7c9  00000000  00000000  0003b023  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000610f3  00000000  00000000  000457ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000022d8  00000000  00000000  000a68e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	20 26 07 20 e9 12 08 00 e1 12 08 00 e1 12 08 00      &. ............
   80010:	e1 12 08 00 e1 12 08 00 e1 12 08 00 00 00 00 00     ................
	...
   8002c:	e1 12 08 00 e1 12 08 00 00 00 00 00 e1 12 08 00     ................
   8003c:	b5 02 08 00 e1 12 08 00 e1 12 08 00 e1 12 08 00     ................
   8004c:	e1 12 08 00 e1 12 08 00 e1 12 08 00 e1 12 08 00     ................
   8005c:	e1 12 08 00 e1 12 08 00 e1 12 08 00 00 00 00 00     ................
   8006c:	e1 12 08 00 e1 12 08 00 e1 12 08 00 e1 12 08 00     ................
	...
   80084:	e1 12 08 00 e1 12 08 00 e1 12 08 00 e1 12 08 00     ................
   80094:	e1 12 08 00 e1 12 08 00 e1 12 08 00 e1 12 08 00     ................
   800a4:	00 00 00 00 e1 12 08 00 e1 12 08 00 e1 12 08 00     ................
   800b4:	e1 12 08 00 e1 12 08 00 e1 12 08 00 e1 12 08 00     ................
   800c4:	e1 12 08 00 e1 12 08 00 e1 12 08 00 e1 12 08 00     ................
   800d4:	e1 12 08 00 e1 12 08 00 b5 17 08 00 e1 12 08 00     ................
   800e4:	e1 12 08 00 e1 12 08 00 e1 12 08 00 e1 12 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200705bc 	.word	0x200705bc
   80110:	00000000 	.word	0x00000000
   80114:	00082a18 	.word	0x00082a18

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00082a18 	.word	0x00082a18
   80154:	200705c0 	.word	0x200705c0
   80158:	00082a18 	.word	0x00082a18
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80160:	b480      	push	{r7}
   80162:	b087      	sub	sp, #28
   80164:	af00      	add	r7, sp, #0
   80166:	60f8      	str	r0, [r7, #12]
   80168:	60b9      	str	r1, [r7, #8]
   8016a:	607a      	str	r2, [r7, #4]
   8016c:	603b      	str	r3, [r7, #0]
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8016e:	68fb      	ldr	r3, [r7, #12]
   80170:	2201      	movs	r2, #1
   80172:	601a      	str	r2, [r3, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80174:	68fb      	ldr	r3, [r7, #12]
   80176:	2200      	movs	r2, #0
   80178:	605a      	str	r2, [r3, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8017a:	68fb      	ldr	r3, [r7, #12]
   8017c:	f240 2202 	movw	r2, #514	; 0x202
   80180:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80184:	68fb      	ldr	r3, [r7, #12]
   80186:	2200      	movs	r2, #0
   80188:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8018c:	68fb      	ldr	r3, [r7, #12]
   8018e:	2200      	movs	r2, #0
   80190:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80194:	687b      	ldr	r3, [r7, #4]
   80196:	005b      	lsls	r3, r3, #1
   80198:	68ba      	ldr	r2, [r7, #8]
   8019a:	fbb2 f3f3 	udiv	r3, r2, r3
   8019e:	3b01      	subs	r3, #1
   801a0:	617b      	str	r3, [r7, #20]
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   801a2:	68fb      	ldr	r3, [r7, #12]
   801a4:	685a      	ldr	r2, [r3, #4]
   801a6:	697b      	ldr	r3, [r7, #20]
   801a8:	021b      	lsls	r3, r3, #8
   801aa:	b299      	uxth	r1, r3
   801ac:	683b      	ldr	r3, [r7, #0]
   801ae:	430b      	orrs	r3, r1
   801b0:	431a      	orrs	r2, r3
   801b2:	68fb      	ldr	r3, [r7, #12]
   801b4:	605a      	str	r2, [r3, #4]
	return 0;
   801b6:	2300      	movs	r3, #0
}
   801b8:	4618      	mov	r0, r3
   801ba:	371c      	adds	r7, #28
   801bc:	46bd      	mov	sp, r7
   801be:	bc80      	pop	{r7}
   801c0:	4770      	bx	lr

000801c2 <adc_configure_trigger>:
 * ADC_MR_FREERUN_OFF disables freerun mode.
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
   801c2:	b480      	push	{r7}
   801c4:	b083      	sub	sp, #12
   801c6:	af00      	add	r7, sp, #0
   801c8:	6078      	str	r0, [r7, #4]
   801ca:	460b      	mov	r3, r1
   801cc:	70fb      	strb	r3, [r7, #3]
   801ce:	4613      	mov	r3, r2
   801d0:	70bb      	strb	r3, [r7, #2]
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   801d2:	687b      	ldr	r3, [r7, #4]
   801d4:	685a      	ldr	r2, [r3, #4]
   801d6:	78f9      	ldrb	r1, [r7, #3]
   801d8:	78bb      	ldrb	r3, [r7, #2]
   801da:	01db      	lsls	r3, r3, #7
   801dc:	b2db      	uxtb	r3, r3
   801de:	430b      	orrs	r3, r1
   801e0:	431a      	orrs	r2, r3
   801e2:	687b      	ldr	r3, [r7, #4]
   801e4:	605a      	str	r2, [r3, #4]
}
   801e6:	bf00      	nop
   801e8:	370c      	adds	r7, #12
   801ea:	46bd      	mov	sp, r7
   801ec:	bc80      	pop	{r7}
   801ee:	4770      	bx	lr

000801f0 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   801f0:	b480      	push	{r7}
   801f2:	b085      	sub	sp, #20
   801f4:	af00      	add	r7, sp, #0
   801f6:	60f8      	str	r0, [r7, #12]
   801f8:	607a      	str	r2, [r7, #4]
   801fa:	461a      	mov	r2, r3
   801fc:	460b      	mov	r3, r1
   801fe:	72fb      	strb	r3, [r7, #11]
   80200:	4613      	mov	r3, r2
   80202:	72bb      	strb	r3, [r7, #10]
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80204:	68fb      	ldr	r3, [r7, #12]
   80206:	685a      	ldr	r2, [r3, #4]
   80208:	7abb      	ldrb	r3, [r7, #10]
   8020a:	071b      	lsls	r3, r3, #28
   8020c:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80210:	687b      	ldr	r3, [r7, #4]
   80212:	4319      	orrs	r1, r3
   80214:	7afb      	ldrb	r3, [r7, #11]
   80216:	061b      	lsls	r3, r3, #24
   80218:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   8021c:	430b      	orrs	r3, r1
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8021e:	431a      	orrs	r2, r3
   80220:	68fb      	ldr	r3, [r7, #12]
   80222:	605a      	str	r2, [r3, #4]
}
   80224:	bf00      	nop
   80226:	3714      	adds	r7, #20
   80228:	46bd      	mov	sp, r7
   8022a:	bc80      	pop	{r7}
   8022c:	4770      	bx	lr

0008022e <adc_start>:
 *
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
   8022e:	b480      	push	{r7}
   80230:	b083      	sub	sp, #12
   80232:	af00      	add	r7, sp, #0
   80234:	6078      	str	r0, [r7, #4]
	p_adc->ADC_CR = ADC_CR_START;
   80236:	687b      	ldr	r3, [r7, #4]
   80238:	2202      	movs	r2, #2
   8023a:	601a      	str	r2, [r3, #0]
}
   8023c:	bf00      	nop
   8023e:	370c      	adds	r7, #12
   80240:	46bd      	mov	sp, r7
   80242:	bc80      	pop	{r7}
   80244:	4770      	bx	lr

00080246 <adc_enable_channel>:
 *
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
   80246:	b480      	push	{r7}
   80248:	b083      	sub	sp, #12
   8024a:	af00      	add	r7, sp, #0
   8024c:	6078      	str	r0, [r7, #4]
   8024e:	460b      	mov	r3, r1
   80250:	70fb      	strb	r3, [r7, #3]
	p_adc->ADC_CHER = 1 << adc_ch;
   80252:	78fb      	ldrb	r3, [r7, #3]
   80254:	2201      	movs	r2, #1
   80256:	fa02 f303 	lsl.w	r3, r2, r3
   8025a:	461a      	mov	r2, r3
   8025c:	687b      	ldr	r3, [r7, #4]
   8025e:	611a      	str	r2, [r3, #16]
}
   80260:	bf00      	nop
   80262:	370c      	adds	r7, #12
   80264:	46bd      	mov	sp, r7
   80266:	bc80      	pop	{r7}
   80268:	4770      	bx	lr

0008026a <adc_get_channel_value>:
 * \param adc_ch ADC channel number.
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
   8026a:	b480      	push	{r7}
   8026c:	b085      	sub	sp, #20
   8026e:	af00      	add	r7, sp, #0
   80270:	6078      	str	r0, [r7, #4]
   80272:	460b      	mov	r3, r1
   80274:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data = 0;
   80276:	2300      	movs	r3, #0
   80278:	60fb      	str	r3, [r7, #12]

	if (15 >= adc_ch) {
   8027a:	78fb      	ldrb	r3, [r7, #3]
   8027c:	2b0f      	cmp	r3, #15
   8027e:	d807      	bhi.n	80290 <adc_get_channel_value+0x26>
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   80280:	687b      	ldr	r3, [r7, #4]
   80282:	f103 0250 	add.w	r2, r3, #80	; 0x50
   80286:	78fb      	ldrb	r3, [r7, #3]
   80288:	009b      	lsls	r3, r3, #2
   8028a:	4413      	add	r3, r2
   8028c:	681b      	ldr	r3, [r3, #0]
   8028e:	60fb      	str	r3, [r7, #12]
	}

	return ul_data;
   80290:	68fb      	ldr	r3, [r7, #12]
}
   80292:	4618      	mov	r0, r3
   80294:	3714      	adds	r7, #20
   80296:	46bd      	mov	sp, r7
   80298:	bc80      	pop	{r7}
   8029a:	4770      	bx	lr

0008029c <adc_get_status>:
 * \param p_adc Pointer to an ADC instance.
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
   8029c:	b480      	push	{r7}
   8029e:	b083      	sub	sp, #12
   802a0:	af00      	add	r7, sp, #0
   802a2:	6078      	str	r0, [r7, #4]
	return p_adc->ADC_ISR;
   802a4:	687b      	ldr	r3, [r7, #4]
   802a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   802a8:	4618      	mov	r0, r3
   802aa:	370c      	adds	r7, #12
   802ac:	46bd      	mov	sp, r7
   802ae:	bc80      	pop	{r7}
   802b0:	4770      	bx	lr
	...

000802b4 <SysTick_Handler>:
static uint32_t g_ul_ms_ticks = 0;
uint32_t ul_ticks_bat = 0;
float adc_bat_value;

void SysTick_Handler(void)
{
   802b4:	b480      	push	{r7}
   802b6:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   802b8:	4b04      	ldr	r3, [pc, #16]	; (802cc <SysTick_Handler+0x18>)
   802ba:	681b      	ldr	r3, [r3, #0]
   802bc:	3301      	adds	r3, #1
   802be:	4a03      	ldr	r2, [pc, #12]	; (802cc <SysTick_Handler+0x18>)
   802c0:	6013      	str	r3, [r2, #0]
}
   802c2:	bf00      	nop
   802c4:	46bd      	mov	sp, r7
   802c6:	bc80      	pop	{r7}
   802c8:	4770      	bx	lr
   802ca:	bf00      	nop
   802cc:	200705d8 	.word	0x200705d8

000802d0 <getTicks>:

uint32_t getTicks(void)
{
   802d0:	b480      	push	{r7}
   802d2:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   802d4:	4b02      	ldr	r3, [pc, #8]	; (802e0 <getTicks+0x10>)
   802d6:	681b      	ldr	r3, [r3, #0]
}
   802d8:	4618      	mov	r0, r3
   802da:	46bd      	mov	sp, r7
   802dc:	bc80      	pop	{r7}
   802de:	4770      	bx	lr
   802e0:	200705d8 	.word	0x200705d8

000802e4 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   802e4:	b480      	push	{r7}
   802e6:	b085      	sub	sp, #20
   802e8:	af00      	add	r7, sp, #0
   802ea:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   802ec:	4b07      	ldr	r3, [pc, #28]	; (8030c <mdelay+0x28>)
   802ee:	681b      	ldr	r3, [r3, #0]
   802f0:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   802f2:	bf00      	nop
   802f4:	4b05      	ldr	r3, [pc, #20]	; (8030c <mdelay+0x28>)
   802f6:	681a      	ldr	r2, [r3, #0]
   802f8:	68fb      	ldr	r3, [r7, #12]
   802fa:	1ad2      	subs	r2, r2, r3
   802fc:	687b      	ldr	r3, [r7, #4]
   802fe:	429a      	cmp	r2, r3
   80300:	d3f8      	bcc.n	802f4 <mdelay+0x10>
}
   80302:	bf00      	nop
   80304:	3714      	adds	r7, #20
   80306:	46bd      	mov	sp, r7
   80308:	bc80      	pop	{r7}
   8030a:	4770      	bx	lr
   8030c:	200705d8 	.word	0x200705d8

00080310 <update_battery>:

void update_battery(void)
{
   80310:	b590      	push	{r4, r7, lr}
   80312:	b083      	sub	sp, #12
   80314:	af00      	add	r7, sp, #0
    if ((getTicks() - ul_ticks_bat) >= 500)
   80316:	4b48      	ldr	r3, [pc, #288]	; (80438 <update_battery+0x128>)
   80318:	4798      	blx	r3
   8031a:	4602      	mov	r2, r0
   8031c:	4b47      	ldr	r3, [pc, #284]	; (8043c <update_battery+0x12c>)
   8031e:	681b      	ldr	r3, [r3, #0]
   80320:	1ad3      	subs	r3, r2, r3
   80322:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   80326:	d37c      	bcc.n	80422 <update_battery+0x112>
    {
        ul_ticks_bat = getTicks();
   80328:	4b43      	ldr	r3, [pc, #268]	; (80438 <update_battery+0x128>)
   8032a:	4798      	blx	r3
   8032c:	4602      	mov	r2, r0
   8032e:	4b43      	ldr	r3, [pc, #268]	; (8043c <update_battery+0x12c>)
   80330:	601a      	str	r2, [r3, #0]
        
        while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY);
   80332:	bf00      	nop
   80334:	4842      	ldr	r0, [pc, #264]	; (80440 <update_battery+0x130>)
   80336:	4b43      	ldr	r3, [pc, #268]	; (80444 <update_battery+0x134>)
   80338:	4798      	blx	r3
   8033a:	4603      	mov	r3, r0
   8033c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   80344:	d1f6      	bne.n	80334 <update_battery+0x24>
        
        adc_bat_value = (float)(adc_get_channel_value(ADC, BATTERY_VOLTAGE));
   80346:	2101      	movs	r1, #1
   80348:	483d      	ldr	r0, [pc, #244]	; (80440 <update_battery+0x130>)
   8034a:	4b3f      	ldr	r3, [pc, #252]	; (80448 <update_battery+0x138>)
   8034c:	4798      	blx	r3
   8034e:	4602      	mov	r2, r0
   80350:	4b3e      	ldr	r3, [pc, #248]	; (8044c <update_battery+0x13c>)
   80352:	4610      	mov	r0, r2
   80354:	4798      	blx	r3
   80356:	4602      	mov	r2, r0
   80358:	4b3d      	ldr	r3, [pc, #244]	; (80450 <update_battery+0x140>)
   8035a:	601a      	str	r2, [r3, #0]
        //stm.bat_voltage = (uint8_t)(adc_bat_value / 18.0f);
        float y = adc_bat_value * 0.003472222;
   8035c:	4b3c      	ldr	r3, [pc, #240]	; (80450 <update_battery+0x140>)
   8035e:	681a      	ldr	r2, [r3, #0]
   80360:	4b3c      	ldr	r3, [pc, #240]	; (80454 <update_battery+0x144>)
   80362:	4610      	mov	r0, r2
   80364:	4798      	blx	r3
   80366:	4c3c      	ldr	r4, [pc, #240]	; (80458 <update_battery+0x148>)
   80368:	a331      	add	r3, pc, #196	; (adr r3, 80430 <update_battery+0x120>)
   8036a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8036e:	47a0      	blx	r4
   80370:	4603      	mov	r3, r0
   80372:	460c      	mov	r4, r1
   80374:	4619      	mov	r1, r3
   80376:	4622      	mov	r2, r4
   80378:	4b38      	ldr	r3, [pc, #224]	; (8045c <update_battery+0x14c>)
   8037a:	4608      	mov	r0, r1
   8037c:	4611      	mov	r1, r2
   8037e:	4798      	blx	r3
   80380:	4603      	mov	r3, r0
   80382:	607b      	str	r3, [r7, #4]
        stm.bat_percentage = (uint8_t)(-(y * y - 25.2f * y + 158.76f) / 0.04f + 100.0f);
   80384:	4b36      	ldr	r3, [pc, #216]	; (80460 <update_battery+0x150>)
   80386:	6879      	ldr	r1, [r7, #4]
   80388:	6878      	ldr	r0, [r7, #4]
   8038a:	4798      	blx	r3
   8038c:	4603      	mov	r3, r0
   8038e:	461c      	mov	r4, r3
   80390:	4b33      	ldr	r3, [pc, #204]	; (80460 <update_battery+0x150>)
   80392:	4934      	ldr	r1, [pc, #208]	; (80464 <update_battery+0x154>)
   80394:	6878      	ldr	r0, [r7, #4]
   80396:	4798      	blx	r3
   80398:	4603      	mov	r3, r0
   8039a:	461a      	mov	r2, r3
   8039c:	4b32      	ldr	r3, [pc, #200]	; (80468 <update_battery+0x158>)
   8039e:	4611      	mov	r1, r2
   803a0:	4620      	mov	r0, r4
   803a2:	4798      	blx	r3
   803a4:	4603      	mov	r3, r0
   803a6:	461a      	mov	r2, r3
   803a8:	4b30      	ldr	r3, [pc, #192]	; (8046c <update_battery+0x15c>)
   803aa:	4931      	ldr	r1, [pc, #196]	; (80470 <update_battery+0x160>)
   803ac:	4610      	mov	r0, r2
   803ae:	4798      	blx	r3
   803b0:	4603      	mov	r3, r0
   803b2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   803b6:	4b2f      	ldr	r3, [pc, #188]	; (80474 <update_battery+0x164>)
   803b8:	492f      	ldr	r1, [pc, #188]	; (80478 <update_battery+0x168>)
   803ba:	4610      	mov	r0, r2
   803bc:	4798      	blx	r3
   803be:	4603      	mov	r3, r0
   803c0:	461a      	mov	r2, r3
   803c2:	4b2a      	ldr	r3, [pc, #168]	; (8046c <update_battery+0x15c>)
   803c4:	492d      	ldr	r1, [pc, #180]	; (8047c <update_battery+0x16c>)
   803c6:	4610      	mov	r0, r2
   803c8:	4798      	blx	r3
   803ca:	4603      	mov	r3, r0
   803cc:	461a      	mov	r2, r3
   803ce:	4b2c      	ldr	r3, [pc, #176]	; (80480 <update_battery+0x170>)
   803d0:	4610      	mov	r0, r2
   803d2:	4798      	blx	r3
   803d4:	4603      	mov	r3, r0
   803d6:	b2da      	uxtb	r2, r3
   803d8:	4b2a      	ldr	r3, [pc, #168]	; (80484 <update_battery+0x174>)
   803da:	705a      	strb	r2, [r3, #1]
        stm.bat_percentage = (stm.bat_percentage - 20.0) * 1.25;
   803dc:	4b29      	ldr	r3, [pc, #164]	; (80484 <update_battery+0x174>)
   803de:	785b      	ldrb	r3, [r3, #1]
   803e0:	461a      	mov	r2, r3
   803e2:	4b29      	ldr	r3, [pc, #164]	; (80488 <update_battery+0x178>)
   803e4:	4610      	mov	r0, r2
   803e6:	4798      	blx	r3
   803e8:	4c28      	ldr	r4, [pc, #160]	; (8048c <update_battery+0x17c>)
   803ea:	f04f 0200 	mov.w	r2, #0
   803ee:	4b28      	ldr	r3, [pc, #160]	; (80490 <update_battery+0x180>)
   803f0:	47a0      	blx	r4
   803f2:	4603      	mov	r3, r0
   803f4:	460c      	mov	r4, r1
   803f6:	4618      	mov	r0, r3
   803f8:	4621      	mov	r1, r4
   803fa:	4c17      	ldr	r4, [pc, #92]	; (80458 <update_battery+0x148>)
   803fc:	f04f 0200 	mov.w	r2, #0
   80400:	4b24      	ldr	r3, [pc, #144]	; (80494 <update_battery+0x184>)
   80402:	47a0      	blx	r4
   80404:	4603      	mov	r3, r0
   80406:	460c      	mov	r4, r1
   80408:	4619      	mov	r1, r3
   8040a:	4622      	mov	r2, r4
   8040c:	4b22      	ldr	r3, [pc, #136]	; (80498 <update_battery+0x188>)
   8040e:	4608      	mov	r0, r1
   80410:	4611      	mov	r1, r2
   80412:	4798      	blx	r3
   80414:	4603      	mov	r3, r0
   80416:	b2da      	uxtb	r2, r3
   80418:	4b1a      	ldr	r3, [pc, #104]	; (80484 <update_battery+0x174>)
   8041a:	705a      	strb	r2, [r3, #1]
        adc_start(ADC);
   8041c:	4808      	ldr	r0, [pc, #32]	; (80440 <update_battery+0x130>)
   8041e:	4b1f      	ldr	r3, [pc, #124]	; (8049c <update_battery+0x18c>)
   80420:	4798      	blx	r3
    }
}
   80422:	bf00      	nop
   80424:	370c      	adds	r7, #12
   80426:	46bd      	mov	sp, r7
   80428:	bd90      	pop	{r4, r7, pc}
   8042a:	bf00      	nop
   8042c:	f3af 8000 	nop.w
   80430:	fde70747 	.word	0xfde70747
   80434:	3f6c71c6 	.word	0x3f6c71c6
   80438:	000802d1 	.word	0x000802d1
   8043c:	200705dc 	.word	0x200705dc
   80440:	400c0000 	.word	0x400c0000
   80444:	0008029d 	.word	0x0008029d
   80448:	0008026b 	.word	0x0008026b
   8044c:	000824f1 	.word	0x000824f1
   80450:	200705e8 	.word	0x200705e8
   80454:	00081dd9 	.word	0x00081dd9
   80458:	00081e81 	.word	0x00081e81
   8045c:	000822e5 	.word	0x000822e5
   80460:	000825a1 	.word	0x000825a1
   80464:	41c9999a 	.word	0x41c9999a
   80468:	0008238d 	.word	0x0008238d
   8046c:	00082391 	.word	0x00082391
   80470:	431ec28f 	.word	0x431ec28f
   80474:	00082709 	.word	0x00082709
   80478:	3d23d70a 	.word	0x3d23d70a
   8047c:	42c80000 	.word	0x42c80000
   80480:	00082841 	.word	0x00082841
   80484:	200705f4 	.word	0x200705f4
   80488:	00081db5 	.word	0x00081db5
   8048c:	00081b19 	.word	0x00081b19
   80490:	40340000 	.word	0x40340000
   80494:	3ff40000 	.word	0x3ff40000
   80498:	000822a5 	.word	0x000822a5
   8049c:	0008022f 	.word	0x0008022f

000804a0 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   804a0:	b480      	push	{r7}
   804a2:	b083      	sub	sp, #12
   804a4:	af00      	add	r7, sp, #0
   804a6:	6078      	str	r0, [r7, #4]
   804a8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   804aa:	687b      	ldr	r3, [r7, #4]
   804ac:	685b      	ldr	r3, [r3, #4]
   804ae:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   804b2:	687b      	ldr	r3, [r7, #4]
   804b4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   804b6:	687b      	ldr	r3, [r7, #4]
   804b8:	685a      	ldr	r2, [r3, #4]
   804ba:	683b      	ldr	r3, [r7, #0]
   804bc:	041b      	lsls	r3, r3, #16
   804be:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   804c2:	431a      	orrs	r2, r3
   804c4:	687b      	ldr	r3, [r7, #4]
   804c6:	605a      	str	r2, [r3, #4]
}
   804c8:	bf00      	nop
   804ca:	370c      	adds	r7, #12
   804cc:	46bd      	mov	sp, r7
   804ce:	bc80      	pop	{r7}
   804d0:	4770      	bx	lr

000804d2 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   804d2:	b480      	push	{r7}
   804d4:	b085      	sub	sp, #20
   804d6:	af00      	add	r7, sp, #0
   804d8:	60f8      	str	r0, [r7, #12]
   804da:	60b9      	str	r1, [r7, #8]
   804dc:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   804de:	687b      	ldr	r3, [r7, #4]
   804e0:	2b00      	cmp	r3, #0
   804e2:	d00c      	beq.n	804fe <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   804e4:	68fb      	ldr	r3, [r7, #12]
   804e6:	68ba      	ldr	r2, [r7, #8]
   804e8:	320c      	adds	r2, #12
   804ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   804ee:	f043 0101 	orr.w	r1, r3, #1
   804f2:	68fb      	ldr	r3, [r7, #12]
   804f4:	68ba      	ldr	r2, [r7, #8]
   804f6:	320c      	adds	r2, #12
   804f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
   804fc:	e00b      	b.n	80516 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   804fe:	68fb      	ldr	r3, [r7, #12]
   80500:	68ba      	ldr	r2, [r7, #8]
   80502:	320c      	adds	r2, #12
   80504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80508:	f023 0101 	bic.w	r1, r3, #1
   8050c:	68fb      	ldr	r3, [r7, #12]
   8050e:	68ba      	ldr	r2, [r7, #8]
   80510:	320c      	adds	r2, #12
   80512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80516:	bf00      	nop
   80518:	3714      	adds	r7, #20
   8051a:	46bd      	mov	sp, r7
   8051c:	bc80      	pop	{r7}
   8051e:	4770      	bx	lr

00080520 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   80520:	b480      	push	{r7}
   80522:	b085      	sub	sp, #20
   80524:	af00      	add	r7, sp, #0
   80526:	60f8      	str	r0, [r7, #12]
   80528:	60b9      	str	r1, [r7, #8]
   8052a:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   8052c:	687b      	ldr	r3, [r7, #4]
   8052e:	2b00      	cmp	r3, #0
   80530:	d00c      	beq.n	8054c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80532:	68fb      	ldr	r3, [r7, #12]
   80534:	68ba      	ldr	r2, [r7, #8]
   80536:	320c      	adds	r2, #12
   80538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8053c:	f043 0102 	orr.w	r1, r3, #2
   80540:	68fb      	ldr	r3, [r7, #12]
   80542:	68ba      	ldr	r2, [r7, #8]
   80544:	320c      	adds	r2, #12
   80546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
   8054a:	e00b      	b.n	80564 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8054c:	68fb      	ldr	r3, [r7, #12]
   8054e:	68ba      	ldr	r2, [r7, #8]
   80550:	320c      	adds	r2, #12
   80552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80556:	f023 0102 	bic.w	r1, r3, #2
   8055a:	68fb      	ldr	r3, [r7, #12]
   8055c:	68ba      	ldr	r2, [r7, #8]
   8055e:	320c      	adds	r2, #12
   80560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80564:	bf00      	nop
   80566:	3714      	adds	r7, #20
   80568:	46bd      	mov	sp, r7
   8056a:	bc80      	pop	{r7}
   8056c:	4770      	bx	lr

0008056e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   8056e:	b480      	push	{r7}
   80570:	b085      	sub	sp, #20
   80572:	af00      	add	r7, sp, #0
   80574:	60f8      	str	r0, [r7, #12]
   80576:	60b9      	str	r1, [r7, #8]
   80578:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   8057a:	68fb      	ldr	r3, [r7, #12]
   8057c:	68ba      	ldr	r2, [r7, #8]
   8057e:	320c      	adds	r2, #12
   80580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80584:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   80588:	68fb      	ldr	r3, [r7, #12]
   8058a:	68ba      	ldr	r2, [r7, #8]
   8058c:	320c      	adds	r2, #12
   8058e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80592:	68fb      	ldr	r3, [r7, #12]
   80594:	68ba      	ldr	r2, [r7, #8]
   80596:	320c      	adds	r2, #12
   80598:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	ea42 0103 	orr.w	r1, r2, r3
   805a2:	68fb      	ldr	r3, [r7, #12]
   805a4:	68ba      	ldr	r2, [r7, #8]
   805a6:	320c      	adds	r2, #12
   805a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   805ac:	bf00      	nop
   805ae:	3714      	adds	r7, #20
   805b0:	46bd      	mov	sp, r7
   805b2:	bc80      	pop	{r7}
   805b4:	4770      	bx	lr
	...

000805b8 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   805b8:	b580      	push	{r7, lr}
   805ba:	b082      	sub	sp, #8
   805bc:	af00      	add	r7, sp, #0
   805be:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   805c0:	6878      	ldr	r0, [r7, #4]
   805c2:	4b03      	ldr	r3, [pc, #12]	; (805d0 <dmac_init+0x18>)
   805c4:	4798      	blx	r3
}
   805c6:	bf00      	nop
   805c8:	3708      	adds	r7, #8
   805ca:	46bd      	mov	sp, r7
   805cc:	bd80      	pop	{r7, pc}
   805ce:	bf00      	nop
   805d0:	00080613 	.word	0x00080613

000805d4 <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   805d4:	b480      	push	{r7}
   805d6:	b083      	sub	sp, #12
   805d8:	af00      	add	r7, sp, #0
   805da:	6078      	str	r0, [r7, #4]
   805dc:	460b      	mov	r3, r1
   805de:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   805e0:	687b      	ldr	r3, [r7, #4]
   805e2:	681b      	ldr	r3, [r3, #0]
   805e4:	f023 0210 	bic.w	r2, r3, #16
   805e8:	78fb      	ldrb	r3, [r7, #3]
   805ea:	431a      	orrs	r2, r3
   805ec:	687b      	ldr	r3, [r7, #4]
   805ee:	601a      	str	r2, [r3, #0]
}
   805f0:	bf00      	nop
   805f2:	370c      	adds	r7, #12
   805f4:	46bd      	mov	sp, r7
   805f6:	bc80      	pop	{r7}
   805f8:	4770      	bx	lr

000805fa <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   805fa:	b480      	push	{r7}
   805fc:	b083      	sub	sp, #12
   805fe:	af00      	add	r7, sp, #0
   80600:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   80602:	687b      	ldr	r3, [r7, #4]
   80604:	2201      	movs	r2, #1
   80606:	605a      	str	r2, [r3, #4]
}
   80608:	bf00      	nop
   8060a:	370c      	adds	r7, #12
   8060c:	46bd      	mov	sp, r7
   8060e:	bc80      	pop	{r7}
   80610:	4770      	bx	lr

00080612 <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   80612:	b480      	push	{r7}
   80614:	b083      	sub	sp, #12
   80616:	af00      	add	r7, sp, #0
   80618:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   8061a:	687b      	ldr	r3, [r7, #4]
   8061c:	685b      	ldr	r3, [r3, #4]
   8061e:	f023 0201 	bic.w	r2, r3, #1
   80622:	687b      	ldr	r3, [r7, #4]
   80624:	605a      	str	r2, [r3, #4]
}
   80626:	bf00      	nop
   80628:	370c      	adds	r7, #12
   8062a:	46bd      	mov	sp, r7
   8062c:	bc80      	pop	{r7}
   8062e:	4770      	bx	lr

00080630 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   80630:	b480      	push	{r7}
   80632:	b083      	sub	sp, #12
   80634:	af00      	add	r7, sp, #0
   80636:	6078      	str	r0, [r7, #4]
   80638:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   8063a:	687b      	ldr	r3, [r7, #4]
   8063c:	683a      	ldr	r2, [r7, #0]
   8063e:	619a      	str	r2, [r3, #24]
}
   80640:	bf00      	nop
   80642:	370c      	adds	r7, #12
   80644:	46bd      	mov	sp, r7
   80646:	bc80      	pop	{r7}
   80648:	4770      	bx	lr

0008064a <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   8064a:	b480      	push	{r7}
   8064c:	b083      	sub	sp, #12
   8064e:	af00      	add	r7, sp, #0
   80650:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   80652:	687b      	ldr	r3, [r7, #4]
   80654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   80656:	4618      	mov	r0, r3
   80658:	370c      	adds	r7, #12
   8065a:	46bd      	mov	sp, r7
   8065c:	bc80      	pop	{r7}
   8065e:	4770      	bx	lr

00080660 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   80660:	b480      	push	{r7}
   80662:	b083      	sub	sp, #12
   80664:	af00      	add	r7, sp, #0
   80666:	6078      	str	r0, [r7, #4]
   80668:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   8066a:	2201      	movs	r2, #1
   8066c:	683b      	ldr	r3, [r7, #0]
   8066e:	409a      	lsls	r2, r3
   80670:	687b      	ldr	r3, [r7, #4]
   80672:	629a      	str	r2, [r3, #40]	; 0x28
}
   80674:	bf00      	nop
   80676:	370c      	adds	r7, #12
   80678:	46bd      	mov	sp, r7
   8067a:	bc80      	pop	{r7}
   8067c:	4770      	bx	lr

0008067e <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   8067e:	b480      	push	{r7}
   80680:	b083      	sub	sp, #12
   80682:	af00      	add	r7, sp, #0
   80684:	6078      	str	r0, [r7, #4]
   80686:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   80688:	2201      	movs	r2, #1
   8068a:	683b      	ldr	r3, [r7, #0]
   8068c:	409a      	lsls	r2, r3
   8068e:	687b      	ldr	r3, [r7, #4]
   80690:	62da      	str	r2, [r3, #44]	; 0x2c
}
   80692:	bf00      	nop
   80694:	370c      	adds	r7, #12
   80696:	46bd      	mov	sp, r7
   80698:	bc80      	pop	{r7}
   8069a:	4770      	bx	lr

0008069c <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   8069c:	b480      	push	{r7}
   8069e:	b085      	sub	sp, #20
   806a0:	af00      	add	r7, sp, #0
   806a2:	60f8      	str	r0, [r7, #12]
   806a4:	60b9      	str	r1, [r7, #8]
   806a6:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   806a8:	68f9      	ldr	r1, [r7, #12]
   806aa:	68ba      	ldr	r2, [r7, #8]
   806ac:	4613      	mov	r3, r2
   806ae:	009b      	lsls	r3, r3, #2
   806b0:	4413      	add	r3, r2
   806b2:	00db      	lsls	r3, r3, #3
   806b4:	440b      	add	r3, r1
   806b6:	333c      	adds	r3, #60	; 0x3c
   806b8:	687a      	ldr	r2, [r7, #4]
   806ba:	601a      	str	r2, [r3, #0]
}
   806bc:	bf00      	nop
   806be:	3714      	adds	r7, #20
   806c0:	46bd      	mov	sp, r7
   806c2:	bc80      	pop	{r7}
   806c4:	4770      	bx	lr

000806c6 <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   806c6:	b480      	push	{r7}
   806c8:	b085      	sub	sp, #20
   806ca:	af00      	add	r7, sp, #0
   806cc:	60f8      	str	r0, [r7, #12]
   806ce:	60b9      	str	r1, [r7, #8]
   806d0:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   806d2:	68f9      	ldr	r1, [r7, #12]
   806d4:	68ba      	ldr	r2, [r7, #8]
   806d6:	4613      	mov	r3, r2
   806d8:	009b      	lsls	r3, r3, #2
   806da:	4413      	add	r3, r2
   806dc:	00db      	lsls	r3, r3, #3
   806de:	440b      	add	r3, r1
   806e0:	3340      	adds	r3, #64	; 0x40
   806e2:	687a      	ldr	r2, [r7, #4]
   806e4:	601a      	str	r2, [r3, #0]
}
   806e6:	bf00      	nop
   806e8:	3714      	adds	r7, #20
   806ea:	46bd      	mov	sp, r7
   806ec:	bc80      	pop	{r7}
   806ee:	4770      	bx	lr

000806f0 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   806f0:	b480      	push	{r7}
   806f2:	b085      	sub	sp, #20
   806f4:	af00      	add	r7, sp, #0
   806f6:	60f8      	str	r0, [r7, #12]
   806f8:	60b9      	str	r1, [r7, #8]
   806fa:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   806fc:	68f9      	ldr	r1, [r7, #12]
   806fe:	68ba      	ldr	r2, [r7, #8]
   80700:	4613      	mov	r3, r2
   80702:	009b      	lsls	r3, r3, #2
   80704:	4413      	add	r3, r2
   80706:	00db      	lsls	r3, r3, #3
   80708:	440b      	add	r3, r1
   8070a:	3344      	adds	r3, #68	; 0x44
   8070c:	687a      	ldr	r2, [r7, #4]
   8070e:	601a      	str	r2, [r3, #0]
}
   80710:	bf00      	nop
   80712:	3714      	adds	r7, #20
   80714:	46bd      	mov	sp, r7
   80716:	bc80      	pop	{r7}
   80718:	4770      	bx	lr

0008071a <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   8071a:	b480      	push	{r7}
   8071c:	b085      	sub	sp, #20
   8071e:	af00      	add	r7, sp, #0
   80720:	60f8      	str	r0, [r7, #12]
   80722:	60b9      	str	r1, [r7, #8]
   80724:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   80726:	68f9      	ldr	r1, [r7, #12]
   80728:	68ba      	ldr	r2, [r7, #8]
   8072a:	4613      	mov	r3, r2
   8072c:	009b      	lsls	r3, r3, #2
   8072e:	4413      	add	r3, r2
   80730:	00db      	lsls	r3, r3, #3
   80732:	440b      	add	r3, r1
   80734:	3348      	adds	r3, #72	; 0x48
   80736:	687a      	ldr	r2, [r7, #4]
   80738:	601a      	str	r2, [r3, #0]
}
   8073a:	bf00      	nop
   8073c:	3714      	adds	r7, #20
   8073e:	46bd      	mov	sp, r7
   80740:	bc80      	pop	{r7}
   80742:	4770      	bx	lr

00080744 <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   80744:	b480      	push	{r7}
   80746:	b085      	sub	sp, #20
   80748:	af00      	add	r7, sp, #0
   8074a:	60f8      	str	r0, [r7, #12]
   8074c:	60b9      	str	r1, [r7, #8]
   8074e:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   80750:	68f9      	ldr	r1, [r7, #12]
   80752:	68ba      	ldr	r2, [r7, #8]
   80754:	4613      	mov	r3, r2
   80756:	009b      	lsls	r3, r3, #2
   80758:	4413      	add	r3, r2
   8075a:	00db      	lsls	r3, r3, #3
   8075c:	440b      	add	r3, r1
   8075e:	334c      	adds	r3, #76	; 0x4c
   80760:	687a      	ldr	r2, [r7, #4]
   80762:	601a      	str	r2, [r3, #0]
}
   80764:	bf00      	nop
   80766:	3714      	adds	r7, #20
   80768:	46bd      	mov	sp, r7
   8076a:	bc80      	pop	{r7}
   8076c:	4770      	bx	lr

0008076e <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   8076e:	b480      	push	{r7}
   80770:	b085      	sub	sp, #20
   80772:	af00      	add	r7, sp, #0
   80774:	60f8      	str	r0, [r7, #12]
   80776:	60b9      	str	r1, [r7, #8]
   80778:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   8077a:	68f9      	ldr	r1, [r7, #12]
   8077c:	68ba      	ldr	r2, [r7, #8]
   8077e:	4613      	mov	r3, r2
   80780:	009b      	lsls	r3, r3, #2
   80782:	4413      	add	r3, r2
   80784:	00db      	lsls	r3, r3, #3
   80786:	440b      	add	r3, r1
   80788:	3350      	adds	r3, #80	; 0x50
   8078a:	687a      	ldr	r2, [r7, #4]
   8078c:	601a      	str	r2, [r3, #0]
}
   8078e:	bf00      	nop
   80790:	3714      	adds	r7, #20
   80792:	46bd      	mov	sp, r7
   80794:	bc80      	pop	{r7}
   80796:	4770      	bx	lr

00080798 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   80798:	b580      	push	{r7, lr}
   8079a:	b084      	sub	sp, #16
   8079c:	af00      	add	r7, sp, #0
   8079e:	60f8      	str	r0, [r7, #12]
   807a0:	60b9      	str	r1, [r7, #8]
   807a2:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   807a4:	68fb      	ldr	r3, [r7, #12]
   807a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   807a8:	687b      	ldr	r3, [r7, #4]
   807aa:	681b      	ldr	r3, [r3, #0]
   807ac:	461a      	mov	r2, r3
   807ae:	68b9      	ldr	r1, [r7, #8]
   807b0:	68f8      	ldr	r0, [r7, #12]
   807b2:	4b10      	ldr	r3, [pc, #64]	; (807f4 <dmac_channel_single_buf_transfer_init+0x5c>)
   807b4:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   807b6:	687b      	ldr	r3, [r7, #4]
   807b8:	685b      	ldr	r3, [r3, #4]
   807ba:	461a      	mov	r2, r3
   807bc:	68b9      	ldr	r1, [r7, #8]
   807be:	68f8      	ldr	r0, [r7, #12]
   807c0:	4b0d      	ldr	r3, [pc, #52]	; (807f8 <dmac_channel_single_buf_transfer_init+0x60>)
   807c2:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   807c4:	2200      	movs	r2, #0
   807c6:	68b9      	ldr	r1, [r7, #8]
   807c8:	68f8      	ldr	r0, [r7, #12]
   807ca:	4b0c      	ldr	r3, [pc, #48]	; (807fc <dmac_channel_single_buf_transfer_init+0x64>)
   807cc:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   807ce:	687b      	ldr	r3, [r7, #4]
   807d0:	689b      	ldr	r3, [r3, #8]
   807d2:	461a      	mov	r2, r3
   807d4:	68b9      	ldr	r1, [r7, #8]
   807d6:	68f8      	ldr	r0, [r7, #12]
   807d8:	4b09      	ldr	r3, [pc, #36]	; (80800 <dmac_channel_single_buf_transfer_init+0x68>)
   807da:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   807dc:	687b      	ldr	r3, [r7, #4]
   807de:	68db      	ldr	r3, [r3, #12]
   807e0:	461a      	mov	r2, r3
   807e2:	68b9      	ldr	r1, [r7, #8]
   807e4:	68f8      	ldr	r0, [r7, #12]
   807e6:	4b07      	ldr	r3, [pc, #28]	; (80804 <dmac_channel_single_buf_transfer_init+0x6c>)
   807e8:	4798      	blx	r3
}
   807ea:	bf00      	nop
   807ec:	3710      	adds	r7, #16
   807ee:	46bd      	mov	sp, r7
   807f0:	bd80      	pop	{r7, pc}
   807f2:	bf00      	nop
   807f4:	0008069d 	.word	0x0008069d
   807f8:	000806c7 	.word	0x000806c7
   807fc:	000806f1 	.word	0x000806f1
   80800:	0008071b 	.word	0x0008071b
   80804:	00080745 	.word	0x00080745

00080808 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80808:	b580      	push	{r7, lr}
   8080a:	b082      	sub	sp, #8
   8080c:	af00      	add	r7, sp, #0
   8080e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80810:	687b      	ldr	r3, [r7, #4]
   80812:	2b07      	cmp	r3, #7
   80814:	d831      	bhi.n	8087a <osc_enable+0x72>
   80816:	a201      	add	r2, pc, #4	; (adr r2, 8081c <osc_enable+0x14>)
   80818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8081c:	00080879 	.word	0x00080879
   80820:	0008083d 	.word	0x0008083d
   80824:	00080845 	.word	0x00080845
   80828:	0008084d 	.word	0x0008084d
   8082c:	00080855 	.word	0x00080855
   80830:	0008085d 	.word	0x0008085d
   80834:	00080865 	.word	0x00080865
   80838:	0008086f 	.word	0x0008086f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8083c:	2000      	movs	r0, #0
   8083e:	4b11      	ldr	r3, [pc, #68]	; (80884 <osc_enable+0x7c>)
   80840:	4798      	blx	r3
		break;
   80842:	e01a      	b.n	8087a <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80844:	2001      	movs	r0, #1
   80846:	4b0f      	ldr	r3, [pc, #60]	; (80884 <osc_enable+0x7c>)
   80848:	4798      	blx	r3
		break;
   8084a:	e016      	b.n	8087a <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8084c:	2000      	movs	r0, #0
   8084e:	4b0e      	ldr	r3, [pc, #56]	; (80888 <osc_enable+0x80>)
   80850:	4798      	blx	r3
		break;
   80852:	e012      	b.n	8087a <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80854:	2010      	movs	r0, #16
   80856:	4b0c      	ldr	r3, [pc, #48]	; (80888 <osc_enable+0x80>)
   80858:	4798      	blx	r3
		break;
   8085a:	e00e      	b.n	8087a <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8085c:	2020      	movs	r0, #32
   8085e:	4b0a      	ldr	r3, [pc, #40]	; (80888 <osc_enable+0x80>)
   80860:	4798      	blx	r3
		break;
   80862:	e00a      	b.n	8087a <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80864:	213e      	movs	r1, #62	; 0x3e
   80866:	2000      	movs	r0, #0
   80868:	4b08      	ldr	r3, [pc, #32]	; (8088c <osc_enable+0x84>)
   8086a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   8086c:	e005      	b.n	8087a <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   8086e:	213e      	movs	r1, #62	; 0x3e
   80870:	2001      	movs	r0, #1
   80872:	4b06      	ldr	r3, [pc, #24]	; (8088c <osc_enable+0x84>)
   80874:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   80876:	e000      	b.n	8087a <osc_enable+0x72>
		break;
   80878:	bf00      	nop
	}
}
   8087a:	bf00      	nop
   8087c:	3708      	adds	r7, #8
   8087e:	46bd      	mov	sp, r7
   80880:	bd80      	pop	{r7, pc}
   80882:	bf00      	nop
   80884:	00080bf5 	.word	0x00080bf5
   80888:	00080c61 	.word	0x00080c61
   8088c:	00080cd1 	.word	0x00080cd1

00080890 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80890:	b580      	push	{r7, lr}
   80892:	b082      	sub	sp, #8
   80894:	af00      	add	r7, sp, #0
   80896:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80898:	687b      	ldr	r3, [r7, #4]
   8089a:	2b07      	cmp	r3, #7
   8089c:	d826      	bhi.n	808ec <osc_is_ready+0x5c>
   8089e:	a201      	add	r2, pc, #4	; (adr r2, 808a4 <osc_is_ready+0x14>)
   808a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   808a4:	000808c5 	.word	0x000808c5
   808a8:	000808c9 	.word	0x000808c9
   808ac:	000808c9 	.word	0x000808c9
   808b0:	000808db 	.word	0x000808db
   808b4:	000808db 	.word	0x000808db
   808b8:	000808db 	.word	0x000808db
   808bc:	000808db 	.word	0x000808db
   808c0:	000808db 	.word	0x000808db
	case OSC_SLCK_32K_RC:
		return 1;
   808c4:	2301      	movs	r3, #1
   808c6:	e012      	b.n	808ee <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   808c8:	4b0b      	ldr	r3, [pc, #44]	; (808f8 <osc_is_ready+0x68>)
   808ca:	4798      	blx	r3
   808cc:	4603      	mov	r3, r0
   808ce:	2b00      	cmp	r3, #0
   808d0:	bf14      	ite	ne
   808d2:	2301      	movne	r3, #1
   808d4:	2300      	moveq	r3, #0
   808d6:	b2db      	uxtb	r3, r3
   808d8:	e009      	b.n	808ee <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   808da:	4b08      	ldr	r3, [pc, #32]	; (808fc <osc_is_ready+0x6c>)
   808dc:	4798      	blx	r3
   808de:	4603      	mov	r3, r0
   808e0:	2b00      	cmp	r3, #0
   808e2:	bf14      	ite	ne
   808e4:	2301      	movne	r3, #1
   808e6:	2300      	moveq	r3, #0
   808e8:	b2db      	uxtb	r3, r3
   808ea:	e000      	b.n	808ee <osc_is_ready+0x5e>
	}

	return 0;
   808ec:	2300      	movs	r3, #0
}
   808ee:	4618      	mov	r0, r3
   808f0:	3708      	adds	r7, #8
   808f2:	46bd      	mov	sp, r7
   808f4:	bd80      	pop	{r7, pc}
   808f6:	bf00      	nop
   808f8:	00080c2d 	.word	0x00080c2d
   808fc:	00080d49 	.word	0x00080d49

00080900 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80900:	b480      	push	{r7}
   80902:	b083      	sub	sp, #12
   80904:	af00      	add	r7, sp, #0
   80906:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80908:	687b      	ldr	r3, [r7, #4]
   8090a:	2b07      	cmp	r3, #7
   8090c:	d825      	bhi.n	8095a <osc_get_rate+0x5a>
   8090e:	a201      	add	r2, pc, #4	; (adr r2, 80914 <osc_get_rate+0x14>)
   80910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80914:	00080935 	.word	0x00080935
   80918:	0008093b 	.word	0x0008093b
   8091c:	00080941 	.word	0x00080941
   80920:	00080947 	.word	0x00080947
   80924:	0008094b 	.word	0x0008094b
   80928:	0008094f 	.word	0x0008094f
   8092c:	00080953 	.word	0x00080953
   80930:	00080957 	.word	0x00080957
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80934:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80938:	e010      	b.n	8095c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8093a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8093e:	e00d      	b.n	8095c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80944:	e00a      	b.n	8095c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80946:	4b08      	ldr	r3, [pc, #32]	; (80968 <osc_get_rate+0x68>)
   80948:	e008      	b.n	8095c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8094a:	4b08      	ldr	r3, [pc, #32]	; (8096c <osc_get_rate+0x6c>)
   8094c:	e006      	b.n	8095c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8094e:	4b08      	ldr	r3, [pc, #32]	; (80970 <osc_get_rate+0x70>)
   80950:	e004      	b.n	8095c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80952:	4b07      	ldr	r3, [pc, #28]	; (80970 <osc_get_rate+0x70>)
   80954:	e002      	b.n	8095c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80956:	4b06      	ldr	r3, [pc, #24]	; (80970 <osc_get_rate+0x70>)
   80958:	e000      	b.n	8095c <osc_get_rate+0x5c>
	}

	return 0;
   8095a:	2300      	movs	r3, #0
}
   8095c:	4618      	mov	r0, r3
   8095e:	370c      	adds	r7, #12
   80960:	46bd      	mov	sp, r7
   80962:	bc80      	pop	{r7}
   80964:	4770      	bx	lr
   80966:	bf00      	nop
   80968:	003d0900 	.word	0x003d0900
   8096c:	007a1200 	.word	0x007a1200
   80970:	00b71b00 	.word	0x00b71b00

00080974 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80974:	b580      	push	{r7, lr}
   80976:	b082      	sub	sp, #8
   80978:	af00      	add	r7, sp, #0
   8097a:	4603      	mov	r3, r0
   8097c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8097e:	bf00      	nop
   80980:	79fb      	ldrb	r3, [r7, #7]
   80982:	4618      	mov	r0, r3
   80984:	4b05      	ldr	r3, [pc, #20]	; (8099c <osc_wait_ready+0x28>)
   80986:	4798      	blx	r3
   80988:	4603      	mov	r3, r0
   8098a:	f083 0301 	eor.w	r3, r3, #1
   8098e:	b2db      	uxtb	r3, r3
   80990:	2b00      	cmp	r3, #0
   80992:	d1f5      	bne.n	80980 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80994:	bf00      	nop
   80996:	3708      	adds	r7, #8
   80998:	46bd      	mov	sp, r7
   8099a:	bd80      	pop	{r7, pc}
   8099c:	00080891 	.word	0x00080891

000809a0 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   809a0:	b580      	push	{r7, lr}
   809a2:	b086      	sub	sp, #24
   809a4:	af00      	add	r7, sp, #0
   809a6:	60f8      	str	r0, [r7, #12]
   809a8:	607a      	str	r2, [r7, #4]
   809aa:	603b      	str	r3, [r7, #0]
   809ac:	460b      	mov	r3, r1
   809ae:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   809b0:	687b      	ldr	r3, [r7, #4]
   809b2:	2b00      	cmp	r3, #0
   809b4:	d107      	bne.n	809c6 <pll_config_init+0x26>
   809b6:	683b      	ldr	r3, [r7, #0]
   809b8:	2b00      	cmp	r3, #0
   809ba:	d104      	bne.n	809c6 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   809bc:	68fb      	ldr	r3, [r7, #12]
   809be:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   809c2:	601a      	str	r2, [r3, #0]
   809c4:	e019      	b.n	809fa <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   809c6:	7afb      	ldrb	r3, [r7, #11]
   809c8:	4618      	mov	r0, r3
   809ca:	4b0e      	ldr	r3, [pc, #56]	; (80a04 <pll_config_init+0x64>)
   809cc:	4798      	blx	r3
   809ce:	4602      	mov	r2, r0
   809d0:	687b      	ldr	r3, [r7, #4]
   809d2:	fbb2 f3f3 	udiv	r3, r2, r3
   809d6:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   809d8:	697b      	ldr	r3, [r7, #20]
   809da:	683a      	ldr	r2, [r7, #0]
   809dc:	fb02 f303 	mul.w	r3, r2, r3
   809e0:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   809e2:	683b      	ldr	r3, [r7, #0]
   809e4:	3b01      	subs	r3, #1
   809e6:	041a      	lsls	r2, r3, #16
   809e8:	4b07      	ldr	r3, [pc, #28]	; (80a08 <pll_config_init+0x68>)
   809ea:	4013      	ands	r3, r2
   809ec:	687a      	ldr	r2, [r7, #4]
   809ee:	b2d2      	uxtb	r2, r2
   809f0:	4313      	orrs	r3, r2
   809f2:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   809f6:	68fb      	ldr	r3, [r7, #12]
   809f8:	601a      	str	r2, [r3, #0]
	}
}
   809fa:	bf00      	nop
   809fc:	3718      	adds	r7, #24
   809fe:	46bd      	mov	sp, r7
   80a00:	bd80      	pop	{r7, pc}
   80a02:	bf00      	nop
   80a04:	00080901 	.word	0x00080901
   80a08:	07ff0000 	.word	0x07ff0000

00080a0c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80a0c:	b580      	push	{r7, lr}
   80a0e:	b082      	sub	sp, #8
   80a10:	af00      	add	r7, sp, #0
   80a12:	6078      	str	r0, [r7, #4]
   80a14:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80a16:	683b      	ldr	r3, [r7, #0]
   80a18:	2b00      	cmp	r3, #0
   80a1a:	d108      	bne.n	80a2e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80a1c:	4b09      	ldr	r3, [pc, #36]	; (80a44 <pll_enable+0x38>)
   80a1e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80a20:	4a09      	ldr	r2, [pc, #36]	; (80a48 <pll_enable+0x3c>)
   80a22:	687b      	ldr	r3, [r7, #4]
   80a24:	681b      	ldr	r3, [r3, #0]
   80a26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80a2a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80a2c:	e005      	b.n	80a3a <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80a2e:	4a06      	ldr	r2, [pc, #24]	; (80a48 <pll_enable+0x3c>)
   80a30:	687b      	ldr	r3, [r7, #4]
   80a32:	681b      	ldr	r3, [r3, #0]
   80a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80a38:	61d3      	str	r3, [r2, #28]
}
   80a3a:	bf00      	nop
   80a3c:	3708      	adds	r7, #8
   80a3e:	46bd      	mov	sp, r7
   80a40:	bd80      	pop	{r7, pc}
   80a42:	bf00      	nop
   80a44:	00080d61 	.word	0x00080d61
   80a48:	400e0600 	.word	0x400e0600

00080a4c <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80a4c:	b580      	push	{r7, lr}
   80a4e:	b082      	sub	sp, #8
   80a50:	af00      	add	r7, sp, #0
   80a52:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80a54:	687b      	ldr	r3, [r7, #4]
   80a56:	2b00      	cmp	r3, #0
   80a58:	d103      	bne.n	80a62 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   80a5a:	4b05      	ldr	r3, [pc, #20]	; (80a70 <pll_is_locked+0x24>)
   80a5c:	4798      	blx	r3
   80a5e:	4603      	mov	r3, r0
   80a60:	e002      	b.n	80a68 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80a62:	4b04      	ldr	r3, [pc, #16]	; (80a74 <pll_is_locked+0x28>)
   80a64:	4798      	blx	r3
   80a66:	4603      	mov	r3, r0
	}
}
   80a68:	4618      	mov	r0, r3
   80a6a:	3708      	adds	r7, #8
   80a6c:	46bd      	mov	sp, r7
   80a6e:	bd80      	pop	{r7, pc}
   80a70:	00080d79 	.word	0x00080d79
   80a74:	00080d91 	.word	0x00080d91

00080a78 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80a78:	b580      	push	{r7, lr}
   80a7a:	b082      	sub	sp, #8
   80a7c:	af00      	add	r7, sp, #0
   80a7e:	4603      	mov	r3, r0
   80a80:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80a82:	79fb      	ldrb	r3, [r7, #7]
   80a84:	3b03      	subs	r3, #3
   80a86:	2b04      	cmp	r3, #4
   80a88:	d808      	bhi.n	80a9c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   80a8a:	79fb      	ldrb	r3, [r7, #7]
   80a8c:	4618      	mov	r0, r3
   80a8e:	4b06      	ldr	r3, [pc, #24]	; (80aa8 <pll_enable_source+0x30>)
   80a90:	4798      	blx	r3
		osc_wait_ready(e_src);
   80a92:	79fb      	ldrb	r3, [r7, #7]
   80a94:	4618      	mov	r0, r3
   80a96:	4b05      	ldr	r3, [pc, #20]	; (80aac <pll_enable_source+0x34>)
   80a98:	4798      	blx	r3
		break;
   80a9a:	e000      	b.n	80a9e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   80a9c:	bf00      	nop
	}
}
   80a9e:	bf00      	nop
   80aa0:	3708      	adds	r7, #8
   80aa2:	46bd      	mov	sp, r7
   80aa4:	bd80      	pop	{r7, pc}
   80aa6:	bf00      	nop
   80aa8:	00080809 	.word	0x00080809
   80aac:	00080975 	.word	0x00080975

00080ab0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   80ab0:	b580      	push	{r7, lr}
   80ab2:	b082      	sub	sp, #8
   80ab4:	af00      	add	r7, sp, #0
   80ab6:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80ab8:	bf00      	nop
   80aba:	6878      	ldr	r0, [r7, #4]
   80abc:	4b04      	ldr	r3, [pc, #16]	; (80ad0 <pll_wait_for_lock+0x20>)
   80abe:	4798      	blx	r3
   80ac0:	4603      	mov	r3, r0
   80ac2:	2b00      	cmp	r3, #0
   80ac4:	d0f9      	beq.n	80aba <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   80ac6:	2300      	movs	r3, #0
}
   80ac8:	4618      	mov	r0, r3
   80aca:	3708      	adds	r7, #8
   80acc:	46bd      	mov	sp, r7
   80ace:	bd80      	pop	{r7, pc}
   80ad0:	00080a4d 	.word	0x00080a4d

00080ad4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80ad4:	b580      	push	{r7, lr}
   80ad6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80ad8:	2006      	movs	r0, #6
   80ada:	4b04      	ldr	r3, [pc, #16]	; (80aec <sysclk_get_main_hz+0x18>)
   80adc:	4798      	blx	r3
   80ade:	4602      	mov	r2, r0
   80ae0:	4613      	mov	r3, r2
   80ae2:	00db      	lsls	r3, r3, #3
   80ae4:	1a9b      	subs	r3, r3, r2
   80ae6:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80ae8:	4618      	mov	r0, r3
   80aea:	bd80      	pop	{r7, pc}
   80aec:	00080901 	.word	0x00080901

00080af0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80af0:	b580      	push	{r7, lr}
   80af2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80af4:	4b02      	ldr	r3, [pc, #8]	; (80b00 <sysclk_get_cpu_hz+0x10>)
   80af6:	4798      	blx	r3
   80af8:	4603      	mov	r3, r0
   80afa:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80afc:	4618      	mov	r0, r3
   80afe:	bd80      	pop	{r7, pc}
   80b00:	00080ad5 	.word	0x00080ad5

00080b04 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80b04:	b590      	push	{r4, r7, lr}
   80b06:	b083      	sub	sp, #12
   80b08:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80b0a:	4811      	ldr	r0, [pc, #68]	; (80b50 <sysclk_init+0x4c>)
   80b0c:	4b11      	ldr	r3, [pc, #68]	; (80b54 <sysclk_init+0x50>)
   80b0e:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   80b10:	2006      	movs	r0, #6
   80b12:	4b11      	ldr	r3, [pc, #68]	; (80b58 <sysclk_init+0x54>)
   80b14:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80b16:	1d38      	adds	r0, r7, #4
   80b18:	230e      	movs	r3, #14
   80b1a:	2201      	movs	r2, #1
   80b1c:	2106      	movs	r1, #6
   80b1e:	4c0f      	ldr	r4, [pc, #60]	; (80b5c <sysclk_init+0x58>)
   80b20:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80b22:	1d3b      	adds	r3, r7, #4
   80b24:	2100      	movs	r1, #0
   80b26:	4618      	mov	r0, r3
   80b28:	4b0d      	ldr	r3, [pc, #52]	; (80b60 <sysclk_init+0x5c>)
   80b2a:	4798      	blx	r3
		pll_wait_for_lock(0);
   80b2c:	2000      	movs	r0, #0
   80b2e:	4b0d      	ldr	r3, [pc, #52]	; (80b64 <sysclk_init+0x60>)
   80b30:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80b32:	2010      	movs	r0, #16
   80b34:	4b0c      	ldr	r3, [pc, #48]	; (80b68 <sysclk_init+0x64>)
   80b36:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80b38:	4b0c      	ldr	r3, [pc, #48]	; (80b6c <sysclk_init+0x68>)
   80b3a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80b3c:	4b0c      	ldr	r3, [pc, #48]	; (80b70 <sysclk_init+0x6c>)
   80b3e:	4798      	blx	r3
   80b40:	4603      	mov	r3, r0
   80b42:	4618      	mov	r0, r3
   80b44:	4b03      	ldr	r3, [pc, #12]	; (80b54 <sysclk_init+0x50>)
   80b46:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80b48:	bf00      	nop
   80b4a:	370c      	adds	r7, #12
   80b4c:	46bd      	mov	sp, r7
   80b4e:	bd90      	pop	{r4, r7, pc}
   80b50:	0501bd00 	.word	0x0501bd00
   80b54:	200700d1 	.word	0x200700d1
   80b58:	00080a79 	.word	0x00080a79
   80b5c:	000809a1 	.word	0x000809a1
   80b60:	00080a0d 	.word	0x00080a0d
   80b64:	00080ab1 	.word	0x00080ab1
   80b68:	00080b75 	.word	0x00080b75
   80b6c:	00081391 	.word	0x00081391
   80b70:	00080af1 	.word	0x00080af1

00080b74 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   80b74:	b480      	push	{r7}
   80b76:	b085      	sub	sp, #20
   80b78:	af00      	add	r7, sp, #0
   80b7a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80b7c:	491c      	ldr	r1, [pc, #112]	; (80bf0 <pmc_switch_mck_to_pllack+0x7c>)
   80b7e:	4b1c      	ldr	r3, [pc, #112]	; (80bf0 <pmc_switch_mck_to_pllack+0x7c>)
   80b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   80b86:	687b      	ldr	r3, [r7, #4]
   80b88:	4313      	orrs	r3, r2
   80b8a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b90:	60fb      	str	r3, [r7, #12]
   80b92:	e007      	b.n	80ba4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b94:	68fb      	ldr	r3, [r7, #12]
   80b96:	2b00      	cmp	r3, #0
   80b98:	d101      	bne.n	80b9e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   80b9a:	2301      	movs	r3, #1
   80b9c:	e023      	b.n	80be6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   80b9e:	68fb      	ldr	r3, [r7, #12]
   80ba0:	3b01      	subs	r3, #1
   80ba2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ba4:	4b12      	ldr	r3, [pc, #72]	; (80bf0 <pmc_switch_mck_to_pllack+0x7c>)
   80ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80ba8:	f003 0308 	and.w	r3, r3, #8
   80bac:	2b00      	cmp	r3, #0
   80bae:	d0f1      	beq.n	80b94 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80bb0:	4a0f      	ldr	r2, [pc, #60]	; (80bf0 <pmc_switch_mck_to_pllack+0x7c>)
   80bb2:	4b0f      	ldr	r3, [pc, #60]	; (80bf0 <pmc_switch_mck_to_pllack+0x7c>)
   80bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80bb6:	f023 0303 	bic.w	r3, r3, #3
   80bba:	f043 0302 	orr.w	r3, r3, #2
   80bbe:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80bc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80bc4:	60fb      	str	r3, [r7, #12]
   80bc6:	e007      	b.n	80bd8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80bc8:	68fb      	ldr	r3, [r7, #12]
   80bca:	2b00      	cmp	r3, #0
   80bcc:	d101      	bne.n	80bd2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   80bce:	2301      	movs	r3, #1
   80bd0:	e009      	b.n	80be6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   80bd2:	68fb      	ldr	r3, [r7, #12]
   80bd4:	3b01      	subs	r3, #1
   80bd6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80bd8:	4b05      	ldr	r3, [pc, #20]	; (80bf0 <pmc_switch_mck_to_pllack+0x7c>)
   80bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80bdc:	f003 0308 	and.w	r3, r3, #8
   80be0:	2b00      	cmp	r3, #0
   80be2:	d0f1      	beq.n	80bc8 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   80be4:	2300      	movs	r3, #0
}
   80be6:	4618      	mov	r0, r3
   80be8:	3714      	adds	r7, #20
   80bea:	46bd      	mov	sp, r7
   80bec:	bc80      	pop	{r7}
   80bee:	4770      	bx	lr
   80bf0:	400e0600 	.word	0x400e0600

00080bf4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   80bf4:	b480      	push	{r7}
   80bf6:	b083      	sub	sp, #12
   80bf8:	af00      	add	r7, sp, #0
   80bfa:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   80bfc:	687b      	ldr	r3, [r7, #4]
   80bfe:	2b01      	cmp	r3, #1
   80c00:	d107      	bne.n	80c12 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   80c02:	4a08      	ldr	r2, [pc, #32]	; (80c24 <pmc_switch_sclk_to_32kxtal+0x30>)
   80c04:	4b07      	ldr	r3, [pc, #28]	; (80c24 <pmc_switch_sclk_to_32kxtal+0x30>)
   80c06:	689b      	ldr	r3, [r3, #8]
   80c08:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80c10:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   80c12:	4b04      	ldr	r3, [pc, #16]	; (80c24 <pmc_switch_sclk_to_32kxtal+0x30>)
   80c14:	4a04      	ldr	r2, [pc, #16]	; (80c28 <pmc_switch_sclk_to_32kxtal+0x34>)
   80c16:	601a      	str	r2, [r3, #0]
}
   80c18:	bf00      	nop
   80c1a:	370c      	adds	r7, #12
   80c1c:	46bd      	mov	sp, r7
   80c1e:	bc80      	pop	{r7}
   80c20:	4770      	bx	lr
   80c22:	bf00      	nop
   80c24:	400e1a10 	.word	0x400e1a10
   80c28:	a5000008 	.word	0xa5000008

00080c2c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   80c2c:	b480      	push	{r7}
   80c2e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   80c30:	4b09      	ldr	r3, [pc, #36]	; (80c58 <pmc_osc_is_ready_32kxtal+0x2c>)
   80c32:	695b      	ldr	r3, [r3, #20]
   80c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   80c38:	2b00      	cmp	r3, #0
   80c3a:	d007      	beq.n	80c4c <pmc_osc_is_ready_32kxtal+0x20>
   80c3c:	4b07      	ldr	r3, [pc, #28]	; (80c5c <pmc_osc_is_ready_32kxtal+0x30>)
   80c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80c44:	2b00      	cmp	r3, #0
   80c46:	d001      	beq.n	80c4c <pmc_osc_is_ready_32kxtal+0x20>
   80c48:	2301      	movs	r3, #1
   80c4a:	e000      	b.n	80c4e <pmc_osc_is_ready_32kxtal+0x22>
   80c4c:	2300      	movs	r3, #0
}
   80c4e:	4618      	mov	r0, r3
   80c50:	46bd      	mov	sp, r7
   80c52:	bc80      	pop	{r7}
   80c54:	4770      	bx	lr
   80c56:	bf00      	nop
   80c58:	400e1a10 	.word	0x400e1a10
   80c5c:	400e0600 	.word	0x400e0600

00080c60 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   80c60:	b480      	push	{r7}
   80c62:	b083      	sub	sp, #12
   80c64:	af00      	add	r7, sp, #0
   80c66:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   80c68:	4a18      	ldr	r2, [pc, #96]	; (80ccc <pmc_switch_mainck_to_fastrc+0x6c>)
   80c6a:	4b18      	ldr	r3, [pc, #96]	; (80ccc <pmc_switch_mainck_to_fastrc+0x6c>)
   80c6c:	6a1b      	ldr	r3, [r3, #32]
   80c6e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80c72:	f043 0308 	orr.w	r3, r3, #8
   80c76:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80c78:	bf00      	nop
   80c7a:	4b14      	ldr	r3, [pc, #80]	; (80ccc <pmc_switch_mainck_to_fastrc+0x6c>)
   80c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80c82:	2b00      	cmp	r3, #0
   80c84:	d0f9      	beq.n	80c7a <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80c86:	4911      	ldr	r1, [pc, #68]	; (80ccc <pmc_switch_mainck_to_fastrc+0x6c>)
   80c88:	4b10      	ldr	r3, [pc, #64]	; (80ccc <pmc_switch_mainck_to_fastrc+0x6c>)
   80c8a:	6a1b      	ldr	r3, [r3, #32]
   80c8c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   80c94:	687a      	ldr	r2, [r7, #4]
   80c96:	4313      	orrs	r3, r2
   80c98:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80c9c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80c9e:	bf00      	nop
   80ca0:	4b0a      	ldr	r3, [pc, #40]	; (80ccc <pmc_switch_mainck_to_fastrc+0x6c>)
   80ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80ca8:	2b00      	cmp	r3, #0
   80caa:	d0f9      	beq.n	80ca0 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   80cac:	4a07      	ldr	r2, [pc, #28]	; (80ccc <pmc_switch_mainck_to_fastrc+0x6c>)
   80cae:	4b07      	ldr	r3, [pc, #28]	; (80ccc <pmc_switch_mainck_to_fastrc+0x6c>)
   80cb0:	6a1b      	ldr	r3, [r3, #32]
   80cb2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   80cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80cba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80cbe:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   80cc0:	bf00      	nop
   80cc2:	370c      	adds	r7, #12
   80cc4:	46bd      	mov	sp, r7
   80cc6:	bc80      	pop	{r7}
   80cc8:	4770      	bx	lr
   80cca:	bf00      	nop
   80ccc:	400e0600 	.word	0x400e0600

00080cd0 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   80cd0:	b480      	push	{r7}
   80cd2:	b083      	sub	sp, #12
   80cd4:	af00      	add	r7, sp, #0
   80cd6:	6078      	str	r0, [r7, #4]
   80cd8:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80cda:	687b      	ldr	r3, [r7, #4]
   80cdc:	2b00      	cmp	r3, #0
   80cde:	d008      	beq.n	80cf2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80ce0:	4916      	ldr	r1, [pc, #88]	; (80d3c <pmc_switch_mainck_to_xtal+0x6c>)
   80ce2:	4b16      	ldr	r3, [pc, #88]	; (80d3c <pmc_switch_mainck_to_xtal+0x6c>)
   80ce4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80ce6:	4a16      	ldr	r2, [pc, #88]	; (80d40 <pmc_switch_mainck_to_xtal+0x70>)
   80ce8:	401a      	ands	r2, r3
   80cea:	4b16      	ldr	r3, [pc, #88]	; (80d44 <pmc_switch_mainck_to_xtal+0x74>)
   80cec:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80cee:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   80cf0:	e01e      	b.n	80d30 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80cf2:	4912      	ldr	r1, [pc, #72]	; (80d3c <pmc_switch_mainck_to_xtal+0x6c>)
   80cf4:	4b11      	ldr	r3, [pc, #68]	; (80d3c <pmc_switch_mainck_to_xtal+0x6c>)
   80cf6:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80cf8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80cfc:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80d00:	683a      	ldr	r2, [r7, #0]
   80d02:	0212      	lsls	r2, r2, #8
   80d04:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80d06:	4313      	orrs	r3, r2
   80d08:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80d0c:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d10:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80d12:	bf00      	nop
   80d14:	4b09      	ldr	r3, [pc, #36]	; (80d3c <pmc_switch_mainck_to_xtal+0x6c>)
   80d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80d18:	f003 0301 	and.w	r3, r3, #1
   80d1c:	2b00      	cmp	r3, #0
   80d1e:	d0f9      	beq.n	80d14 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80d20:	4a06      	ldr	r2, [pc, #24]	; (80d3c <pmc_switch_mainck_to_xtal+0x6c>)
   80d22:	4b06      	ldr	r3, [pc, #24]	; (80d3c <pmc_switch_mainck_to_xtal+0x6c>)
   80d24:	6a1b      	ldr	r3, [r3, #32]
   80d26:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80d2e:	6213      	str	r3, [r2, #32]
}
   80d30:	bf00      	nop
   80d32:	370c      	adds	r7, #12
   80d34:	46bd      	mov	sp, r7
   80d36:	bc80      	pop	{r7}
   80d38:	4770      	bx	lr
   80d3a:	bf00      	nop
   80d3c:	400e0600 	.word	0x400e0600
   80d40:	fec8fffc 	.word	0xfec8fffc
   80d44:	01370002 	.word	0x01370002

00080d48 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   80d48:	b480      	push	{r7}
   80d4a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80d4c:	4b03      	ldr	r3, [pc, #12]	; (80d5c <pmc_osc_is_ready_mainck+0x14>)
   80d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   80d54:	4618      	mov	r0, r3
   80d56:	46bd      	mov	sp, r7
   80d58:	bc80      	pop	{r7}
   80d5a:	4770      	bx	lr
   80d5c:	400e0600 	.word	0x400e0600

00080d60 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   80d60:	b480      	push	{r7}
   80d62:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80d64:	4b03      	ldr	r3, [pc, #12]	; (80d74 <pmc_disable_pllack+0x14>)
   80d66:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80d6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   80d6c:	bf00      	nop
   80d6e:	46bd      	mov	sp, r7
   80d70:	bc80      	pop	{r7}
   80d72:	4770      	bx	lr
   80d74:	400e0600 	.word	0x400e0600

00080d78 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   80d78:	b480      	push	{r7}
   80d7a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80d7c:	4b03      	ldr	r3, [pc, #12]	; (80d8c <pmc_is_locked_pllack+0x14>)
   80d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80d80:	f003 0302 	and.w	r3, r3, #2
}
   80d84:	4618      	mov	r0, r3
   80d86:	46bd      	mov	sp, r7
   80d88:	bc80      	pop	{r7}
   80d8a:	4770      	bx	lr
   80d8c:	400e0600 	.word	0x400e0600

00080d90 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   80d90:	b480      	push	{r7}
   80d92:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   80d94:	4b03      	ldr	r3, [pc, #12]	; (80da4 <pmc_is_locked_upll+0x14>)
   80d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   80d9c:	4618      	mov	r0, r3
   80d9e:	46bd      	mov	sp, r7
   80da0:	bc80      	pop	{r7}
   80da2:	4770      	bx	lr
   80da4:	400e0600 	.word	0x400e0600

00080da8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   80da8:	b480      	push	{r7}
   80daa:	b083      	sub	sp, #12
   80dac:	af00      	add	r7, sp, #0
   80dae:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   80db0:	687b      	ldr	r3, [r7, #4]
   80db2:	2b2c      	cmp	r3, #44	; 0x2c
   80db4:	d901      	bls.n	80dba <pmc_enable_periph_clk+0x12>
		return 1;
   80db6:	2301      	movs	r3, #1
   80db8:	e02f      	b.n	80e1a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   80dba:	687b      	ldr	r3, [r7, #4]
   80dbc:	2b1f      	cmp	r3, #31
   80dbe:	d813      	bhi.n	80de8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80dc0:	4b18      	ldr	r3, [pc, #96]	; (80e24 <pmc_enable_periph_clk+0x7c>)
   80dc2:	699a      	ldr	r2, [r3, #24]
   80dc4:	2101      	movs	r1, #1
   80dc6:	687b      	ldr	r3, [r7, #4]
   80dc8:	fa01 f303 	lsl.w	r3, r1, r3
   80dcc:	401a      	ands	r2, r3
   80dce:	2101      	movs	r1, #1
   80dd0:	687b      	ldr	r3, [r7, #4]
   80dd2:	fa01 f303 	lsl.w	r3, r1, r3
   80dd6:	429a      	cmp	r2, r3
   80dd8:	d01e      	beq.n	80e18 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   80dda:	4a12      	ldr	r2, [pc, #72]	; (80e24 <pmc_enable_periph_clk+0x7c>)
   80ddc:	2101      	movs	r1, #1
   80dde:	687b      	ldr	r3, [r7, #4]
   80de0:	fa01 f303 	lsl.w	r3, r1, r3
   80de4:	6113      	str	r3, [r2, #16]
   80de6:	e017      	b.n	80e18 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80de8:	687b      	ldr	r3, [r7, #4]
   80dea:	3b20      	subs	r3, #32
   80dec:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80dee:	4b0d      	ldr	r3, [pc, #52]	; (80e24 <pmc_enable_periph_clk+0x7c>)
   80df0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80df4:	2101      	movs	r1, #1
   80df6:	687b      	ldr	r3, [r7, #4]
   80df8:	fa01 f303 	lsl.w	r3, r1, r3
   80dfc:	401a      	ands	r2, r3
   80dfe:	2101      	movs	r1, #1
   80e00:	687b      	ldr	r3, [r7, #4]
   80e02:	fa01 f303 	lsl.w	r3, r1, r3
   80e06:	429a      	cmp	r2, r3
   80e08:	d006      	beq.n	80e18 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   80e0a:	4a06      	ldr	r2, [pc, #24]	; (80e24 <pmc_enable_periph_clk+0x7c>)
   80e0c:	2101      	movs	r1, #1
   80e0e:	687b      	ldr	r3, [r7, #4]
   80e10:	fa01 f303 	lsl.w	r3, r1, r3
   80e14:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80e18:	2300      	movs	r3, #0
}
   80e1a:	4618      	mov	r0, r3
   80e1c:	370c      	adds	r7, #12
   80e1e:	46bd      	mov	sp, r7
   80e20:	bc80      	pop	{r7}
   80e22:	4770      	bx	lr
   80e24:	400e0600 	.word	0x400e0600

00080e28 <osc_get_rate>:
{
   80e28:	b480      	push	{r7}
   80e2a:	b083      	sub	sp, #12
   80e2c:	af00      	add	r7, sp, #0
   80e2e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80e30:	687b      	ldr	r3, [r7, #4]
   80e32:	2b07      	cmp	r3, #7
   80e34:	d825      	bhi.n	80e82 <osc_get_rate+0x5a>
   80e36:	a201      	add	r2, pc, #4	; (adr r2, 80e3c <osc_get_rate+0x14>)
   80e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80e3c:	00080e5d 	.word	0x00080e5d
   80e40:	00080e63 	.word	0x00080e63
   80e44:	00080e69 	.word	0x00080e69
   80e48:	00080e6f 	.word	0x00080e6f
   80e4c:	00080e73 	.word	0x00080e73
   80e50:	00080e77 	.word	0x00080e77
   80e54:	00080e7b 	.word	0x00080e7b
   80e58:	00080e7f 	.word	0x00080e7f
		return OSC_SLCK_32K_RC_HZ;
   80e5c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80e60:	e010      	b.n	80e84 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   80e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80e66:	e00d      	b.n	80e84 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   80e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80e6c:	e00a      	b.n	80e84 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   80e6e:	4b08      	ldr	r3, [pc, #32]	; (80e90 <osc_get_rate+0x68>)
   80e70:	e008      	b.n	80e84 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   80e72:	4b08      	ldr	r3, [pc, #32]	; (80e94 <osc_get_rate+0x6c>)
   80e74:	e006      	b.n	80e84 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   80e76:	4b08      	ldr	r3, [pc, #32]	; (80e98 <osc_get_rate+0x70>)
   80e78:	e004      	b.n	80e84 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   80e7a:	4b07      	ldr	r3, [pc, #28]	; (80e98 <osc_get_rate+0x70>)
   80e7c:	e002      	b.n	80e84 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   80e7e:	4b06      	ldr	r3, [pc, #24]	; (80e98 <osc_get_rate+0x70>)
   80e80:	e000      	b.n	80e84 <osc_get_rate+0x5c>
	return 0;
   80e82:	2300      	movs	r3, #0
}
   80e84:	4618      	mov	r0, r3
   80e86:	370c      	adds	r7, #12
   80e88:	46bd      	mov	sp, r7
   80e8a:	bc80      	pop	{r7}
   80e8c:	4770      	bx	lr
   80e8e:	bf00      	nop
   80e90:	003d0900 	.word	0x003d0900
   80e94:	007a1200 	.word	0x007a1200
   80e98:	00b71b00 	.word	0x00b71b00

00080e9c <sysclk_get_main_hz>:
{
   80e9c:	b580      	push	{r7, lr}
   80e9e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   80ea0:	2006      	movs	r0, #6
   80ea2:	4b04      	ldr	r3, [pc, #16]	; (80eb4 <sysclk_get_main_hz+0x18>)
   80ea4:	4798      	blx	r3
   80ea6:	4602      	mov	r2, r0
   80ea8:	4613      	mov	r3, r2
   80eaa:	00db      	lsls	r3, r3, #3
   80eac:	1a9b      	subs	r3, r3, r2
   80eae:	005b      	lsls	r3, r3, #1
}
   80eb0:	4618      	mov	r0, r3
   80eb2:	bd80      	pop	{r7, pc}
   80eb4:	00080e29 	.word	0x00080e29

00080eb8 <sysclk_get_cpu_hz>:
{
   80eb8:	b580      	push	{r7, lr}
   80eba:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   80ebc:	4b02      	ldr	r3, [pc, #8]	; (80ec8 <sysclk_get_cpu_hz+0x10>)
   80ebe:	4798      	blx	r3
   80ec0:	4603      	mov	r3, r0
   80ec2:	085b      	lsrs	r3, r3, #1
}
   80ec4:	4618      	mov	r0, r3
   80ec6:	bd80      	pop	{r7, pc}
   80ec8:	00080e9d 	.word	0x00080e9d

00080ecc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80ecc:	b580      	push	{r7, lr}
   80ece:	b082      	sub	sp, #8
   80ed0:	af00      	add	r7, sp, #0
   80ed2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80ed4:	6878      	ldr	r0, [r7, #4]
   80ed6:	4b03      	ldr	r3, [pc, #12]	; (80ee4 <sysclk_enable_peripheral_clock+0x18>)
   80ed8:	4798      	blx	r3
}
   80eda:	bf00      	nop
   80edc:	3708      	adds	r7, #8
   80ede:	46bd      	mov	sp, r7
   80ee0:	bd80      	pop	{r7, pc}
   80ee2:	bf00      	nop
   80ee4:	00080da9 	.word	0x00080da9

00080ee8 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   80ee8:	b580      	push	{r7, lr}
   80eea:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   80eec:	200b      	movs	r0, #11
   80eee:	4b06      	ldr	r3, [pc, #24]	; (80f08 <ioport_init+0x20>)
   80ef0:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   80ef2:	200c      	movs	r0, #12
   80ef4:	4b04      	ldr	r3, [pc, #16]	; (80f08 <ioport_init+0x20>)
   80ef6:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   80ef8:	200d      	movs	r0, #13
   80efa:	4b03      	ldr	r3, [pc, #12]	; (80f08 <ioport_init+0x20>)
   80efc:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   80efe:	200e      	movs	r0, #14
   80f00:	4b01      	ldr	r3, [pc, #4]	; (80f08 <ioport_init+0x20>)
   80f02:	4798      	blx	r3
	arch_ioport_init();
}
   80f04:	bf00      	nop
   80f06:	bd80      	pop	{r7, pc}
   80f08:	00080ecd 	.word	0x00080ecd

00080f0c <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
   80f0c:	b480      	push	{r7}
   80f0e:	b089      	sub	sp, #36	; 0x24
   80f10:	af00      	add	r7, sp, #0
   80f12:	6078      	str	r0, [r7, #4]
   80f14:	687b      	ldr	r3, [r7, #4]
   80f16:	61fb      	str	r3, [r7, #28]
   80f18:	69fb      	ldr	r3, [r7, #28]
   80f1a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   80f1c:	69bb      	ldr	r3, [r7, #24]
   80f1e:	095a      	lsrs	r2, r3, #5
   80f20:	69fb      	ldr	r3, [r7, #28]
   80f22:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   80f24:	697b      	ldr	r3, [r7, #20]
   80f26:	f003 031f 	and.w	r3, r3, #31
   80f2a:	2101      	movs	r1, #1
   80f2c:	fa01 f303 	lsl.w	r3, r1, r3
   80f30:	613a      	str	r2, [r7, #16]
   80f32:	60fb      	str	r3, [r7, #12]
   80f34:	693b      	ldr	r3, [r7, #16]
   80f36:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80f38:	68bb      	ldr	r3, [r7, #8]
   80f3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80f3e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80f42:	025b      	lsls	r3, r3, #9
   80f44:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   80f46:	68fb      	ldr	r3, [r7, #12]
   80f48:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
   80f4a:	bf00      	nop
   80f4c:	3724      	adds	r7, #36	; 0x24
   80f4e:	46bd      	mov	sp, r7
   80f50:	bc80      	pop	{r7}
   80f52:	4770      	bx	lr

00080f54 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   80f54:	b480      	push	{r7}
   80f56:	b08d      	sub	sp, #52	; 0x34
   80f58:	af00      	add	r7, sp, #0
   80f5a:	6078      	str	r0, [r7, #4]
   80f5c:	6039      	str	r1, [r7, #0]
   80f5e:	687b      	ldr	r3, [r7, #4]
   80f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   80f62:	683b      	ldr	r3, [r7, #0]
   80f64:	62bb      	str	r3, [r7, #40]	; 0x28
   80f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80f68:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   80f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f6c:	095a      	lsrs	r2, r3, #5
   80f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80f70:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   80f72:	6a3b      	ldr	r3, [r7, #32]
   80f74:	f003 031f 	and.w	r3, r3, #31
   80f78:	2101      	movs	r1, #1
   80f7a:	fa01 f303 	lsl.w	r3, r1, r3
   80f7e:	61fa      	str	r2, [r7, #28]
   80f80:	61bb      	str	r3, [r7, #24]
   80f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80f84:	617b      	str	r3, [r7, #20]
   80f86:	69fb      	ldr	r3, [r7, #28]
   80f88:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80f8a:	693b      	ldr	r3, [r7, #16]
   80f8c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80f90:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80f94:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   80f96:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   80f98:	697b      	ldr	r3, [r7, #20]
   80f9a:	f003 0308 	and.w	r3, r3, #8
   80f9e:	2b00      	cmp	r3, #0
   80fa0:	d003      	beq.n	80faa <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   80fa2:	68fb      	ldr	r3, [r7, #12]
   80fa4:	69ba      	ldr	r2, [r7, #24]
   80fa6:	665a      	str	r2, [r3, #100]	; 0x64
   80fa8:	e002      	b.n	80fb0 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   80faa:	68fb      	ldr	r3, [r7, #12]
   80fac:	69ba      	ldr	r2, [r7, #24]
   80fae:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   80fb0:	697b      	ldr	r3, [r7, #20]
   80fb2:	f003 0320 	and.w	r3, r3, #32
   80fb6:	2b00      	cmp	r3, #0
   80fb8:	d003      	beq.n	80fc2 <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   80fba:	68fb      	ldr	r3, [r7, #12]
   80fbc:	69ba      	ldr	r2, [r7, #24]
   80fbe:	651a      	str	r2, [r3, #80]	; 0x50
   80fc0:	e002      	b.n	80fc8 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   80fc2:	68fb      	ldr	r3, [r7, #12]
   80fc4:	69ba      	ldr	r2, [r7, #24]
   80fc6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   80fc8:	697b      	ldr	r3, [r7, #20]
   80fca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   80fce:	2b00      	cmp	r3, #0
   80fd0:	d003      	beq.n	80fda <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   80fd2:	68fb      	ldr	r3, [r7, #12]
   80fd4:	69ba      	ldr	r2, [r7, #24]
   80fd6:	621a      	str	r2, [r3, #32]
   80fd8:	e002      	b.n	80fe0 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   80fda:	68fb      	ldr	r3, [r7, #12]
   80fdc:	69ba      	ldr	r2, [r7, #24]
   80fde:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   80fe0:	697b      	ldr	r3, [r7, #20]
   80fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80fe6:	2b00      	cmp	r3, #0
   80fe8:	d004      	beq.n	80ff4 <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   80fea:	68fb      	ldr	r3, [r7, #12]
   80fec:	69ba      	ldr	r2, [r7, #24]
   80fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   80ff2:	e003      	b.n	80ffc <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80ff4:	68fb      	ldr	r3, [r7, #12]
   80ff6:	69ba      	ldr	r2, [r7, #24]
   80ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80ffc:	697b      	ldr	r3, [r7, #20]
   80ffe:	f003 0301 	and.w	r3, r3, #1
   81002:	2b00      	cmp	r3, #0
   81004:	d006      	beq.n	81014 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   81006:	68fb      	ldr	r3, [r7, #12]
   81008:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8100a:	69bb      	ldr	r3, [r7, #24]
   8100c:	431a      	orrs	r2, r3
   8100e:	68fb      	ldr	r3, [r7, #12]
   81010:	671a      	str	r2, [r3, #112]	; 0x70
	arch_ioport_set_pin_mode(pin, mode);
}
   81012:	e006      	b.n	81022 <ioport_set_pin_mode+0xce>
	} else {
		base->PIO_ABSR &= ~mask;
   81014:	68fb      	ldr	r3, [r7, #12]
   81016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81018:	69bb      	ldr	r3, [r7, #24]
   8101a:	43db      	mvns	r3, r3
   8101c:	401a      	ands	r2, r3
   8101e:	68fb      	ldr	r3, [r7, #12]
   81020:	671a      	str	r2, [r3, #112]	; 0x70
   81022:	bf00      	nop
   81024:	3734      	adds	r7, #52	; 0x34
   81026:	46bd      	mov	sp, r7
   81028:	bc80      	pop	{r7}
   8102a:	4770      	bx	lr

0008102c <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
   8102c:	b480      	push	{r7}
   8102e:	b08d      	sub	sp, #52	; 0x34
   81030:	af00      	add	r7, sp, #0
   81032:	6078      	str	r0, [r7, #4]
   81034:	460b      	mov	r3, r1
   81036:	70fb      	strb	r3, [r7, #3]
   81038:	687b      	ldr	r3, [r7, #4]
   8103a:	62fb      	str	r3, [r7, #44]	; 0x2c
   8103c:	78fb      	ldrb	r3, [r7, #3]
   8103e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   81042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   81044:	627b      	str	r3, [r7, #36]	; 0x24
   81046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81048:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   8104a:	6a3b      	ldr	r3, [r7, #32]
   8104c:	095b      	lsrs	r3, r3, #5
   8104e:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81050:	69fb      	ldr	r3, [r7, #28]
   81052:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81056:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8105a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   8105c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
   8105e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   81062:	2b01      	cmp	r3, #1
   81064:	d109      	bne.n	8107a <ioport_set_pin_dir+0x4e>
   81066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   81068:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   8106a:	697b      	ldr	r3, [r7, #20]
   8106c:	f003 031f 	and.w	r3, r3, #31
   81070:	2201      	movs	r2, #1
   81072:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81074:	69bb      	ldr	r3, [r7, #24]
   81076:	611a      	str	r2, [r3, #16]
   81078:	e00c      	b.n	81094 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   8107a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   8107e:	2b00      	cmp	r3, #0
   81080:	d108      	bne.n	81094 <ioport_set_pin_dir+0x68>
   81082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   81084:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   81086:	693b      	ldr	r3, [r7, #16]
   81088:	f003 031f 	and.w	r3, r3, #31
   8108c:	2201      	movs	r2, #1
   8108e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81090:	69bb      	ldr	r3, [r7, #24]
   81092:	615a      	str	r2, [r3, #20]
   81094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   81096:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81098:	68fb      	ldr	r3, [r7, #12]
   8109a:	f003 031f 	and.w	r3, r3, #31
   8109e:	2201      	movs	r2, #1
   810a0:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   810a2:	69bb      	ldr	r3, [r7, #24]
   810a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
   810a8:	bf00      	nop
   810aa:	3734      	adds	r7, #52	; 0x34
   810ac:	46bd      	mov	sp, r7
   810ae:	bc80      	pop	{r7}
   810b0:	4770      	bx	lr

000810b2 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   810b2:	b480      	push	{r7}
   810b4:	b08b      	sub	sp, #44	; 0x2c
   810b6:	af00      	add	r7, sp, #0
   810b8:	6078      	str	r0, [r7, #4]
   810ba:	460b      	mov	r3, r1
   810bc:	70fb      	strb	r3, [r7, #3]
   810be:	687b      	ldr	r3, [r7, #4]
   810c0:	627b      	str	r3, [r7, #36]	; 0x24
   810c2:	78fb      	ldrb	r3, [r7, #3]
   810c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   810c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   810ca:	61fb      	str	r3, [r7, #28]
   810cc:	69fb      	ldr	r3, [r7, #28]
   810ce:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   810d0:	69bb      	ldr	r3, [r7, #24]
   810d2:	095b      	lsrs	r3, r3, #5
   810d4:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   810d6:	697b      	ldr	r3, [r7, #20]
   810d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   810dc:	f203 7307 	addw	r3, r3, #1799	; 0x707
   810e0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   810e2:	613b      	str	r3, [r7, #16]

	if (level) {
   810e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   810e8:	2b00      	cmp	r3, #0
   810ea:	d009      	beq.n	81100 <ioport_set_pin_level+0x4e>
   810ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   810ee:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   810f0:	68fb      	ldr	r3, [r7, #12]
   810f2:	f003 031f 	and.w	r3, r3, #31
   810f6:	2201      	movs	r2, #1
   810f8:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   810fa:	693b      	ldr	r3, [r7, #16]
   810fc:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   810fe:	e008      	b.n	81112 <ioport_set_pin_level+0x60>
   81100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81102:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   81104:	68bb      	ldr	r3, [r7, #8]
   81106:	f003 031f 	and.w	r3, r3, #31
   8110a:	2201      	movs	r2, #1
   8110c:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8110e:	693b      	ldr	r3, [r7, #16]
   81110:	635a      	str	r2, [r3, #52]	; 0x34
   81112:	bf00      	nop
   81114:	372c      	adds	r7, #44	; 0x2c
   81116:	46bd      	mov	sp, r7
   81118:	bc80      	pop	{r7}
   8111a:	4770      	bx	lr

0008111c <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   8111c:	b598      	push	{r3, r4, r7, lr}
   8111e:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81120:	4b61      	ldr	r3, [pc, #388]	; (812a8 <board_init+0x18c>)
   81122:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81126:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   81128:	4b60      	ldr	r3, [pc, #384]	; (812ac <board_init+0x190>)
   8112a:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   8112c:	2101      	movs	r1, #1
   8112e:	2063      	movs	r0, #99	; 0x63
   81130:	4b5f      	ldr	r3, [pc, #380]	; (812b0 <board_init+0x194>)
   81132:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   81134:	2100      	movs	r1, #0
   81136:	2063      	movs	r0, #99	; 0x63
   81138:	4b5e      	ldr	r3, [pc, #376]	; (812b4 <board_init+0x198>)
   8113a:	4798      	blx	r3
	ioport_set_pin_dir(LED_S1, IOPORT_DIR_OUTPUT);
   8113c:	2101      	movs	r1, #1
   8113e:	2062      	movs	r0, #98	; 0x62
   81140:	4b5b      	ldr	r3, [pc, #364]	; (812b0 <board_init+0x194>)
   81142:	4798      	blx	r3
	ioport_set_pin_level(LED_S1, 0);
   81144:	2100      	movs	r1, #0
   81146:	2062      	movs	r0, #98	; 0x62
   81148:	4b5a      	ldr	r3, [pc, #360]	; (812b4 <board_init+0x198>)
   8114a:	4798      	blx	r3
	ioport_set_pin_dir(LED_S2, IOPORT_DIR_OUTPUT);
   8114c:	2101      	movs	r1, #1
   8114e:	2061      	movs	r0, #97	; 0x61
   81150:	4b57      	ldr	r3, [pc, #348]	; (812b0 <board_init+0x194>)
   81152:	4798      	blx	r3
	ioport_set_pin_level(LED_S2, 0);
   81154:	2100      	movs	r1, #0
   81156:	2061      	movs	r0, #97	; 0x61
   81158:	4b56      	ldr	r3, [pc, #344]	; (812b4 <board_init+0x198>)
   8115a:	4798      	blx	r3
	ioport_set_pin_dir(LED_S3, IOPORT_DIR_OUTPUT);
   8115c:	2101      	movs	r1, #1
   8115e:	2060      	movs	r0, #96	; 0x60
   81160:	4b53      	ldr	r3, [pc, #332]	; (812b0 <board_init+0x194>)
   81162:	4798      	blx	r3
	ioport_set_pin_level(LED_S3, 0);
   81164:	2100      	movs	r1, #0
   81166:	2060      	movs	r0, #96	; 0x60
   81168:	4b52      	ldr	r3, [pc, #328]	; (812b4 <board_init+0x198>)
   8116a:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI0_MISO, IOPORT_MODE_MUX_A);
   8116c:	2100      	movs	r1, #0
   8116e:	2019      	movs	r0, #25
   81170:	4b51      	ldr	r3, [pc, #324]	; (812b8 <board_init+0x19c>)
   81172:	4798      	blx	r3
	ioport_disable_pin(SPI0_MISO);
   81174:	2019      	movs	r0, #25
   81176:	4b51      	ldr	r3, [pc, #324]	; (812bc <board_init+0x1a0>)
   81178:	4798      	blx	r3
	ioport_set_pin_mode(SPI0_MOSI, IOPORT_MODE_MUX_A);
   8117a:	2100      	movs	r1, #0
   8117c:	201a      	movs	r0, #26
   8117e:	4b4e      	ldr	r3, [pc, #312]	; (812b8 <board_init+0x19c>)
   81180:	4798      	blx	r3
	ioport_disable_pin(SPI0_MOSI);
   81182:	201a      	movs	r0, #26
   81184:	4b4d      	ldr	r3, [pc, #308]	; (812bc <board_init+0x1a0>)
   81186:	4798      	blx	r3
	ioport_set_pin_mode(SPI0_SPCK, IOPORT_MODE_MUX_A);
   81188:	2100      	movs	r1, #0
   8118a:	201b      	movs	r0, #27
   8118c:	4b4a      	ldr	r3, [pc, #296]	; (812b8 <board_init+0x19c>)
   8118e:	4798      	blx	r3
	ioport_disable_pin(SPI0_SPCK);
   81190:	201b      	movs	r0, #27
   81192:	4b4a      	ldr	r3, [pc, #296]	; (812bc <board_init+0x1a0>)
   81194:	4798      	blx	r3
	ioport_set_pin_mode(SPI0_NPCS0, IOPORT_MODE_MUX_A);
   81196:	2100      	movs	r1, #0
   81198:	201c      	movs	r0, #28
   8119a:	4b47      	ldr	r3, [pc, #284]	; (812b8 <board_init+0x19c>)
   8119c:	4798      	blx	r3
	ioport_disable_pin(SPI0_NPCS0);
   8119e:	201c      	movs	r0, #28
   811a0:	4b46      	ldr	r3, [pc, #280]	; (812bc <board_init+0x1a0>)
   811a2:	4798      	blx	r3
    
    
    
    /* Configure Line Sensor pins */
    ioport_set_pin_mode(LINE1_B, LINE_FLAGS);
   811a4:	2108      	movs	r1, #8
   811a6:	2052      	movs	r0, #82	; 0x52
   811a8:	4b43      	ldr	r3, [pc, #268]	; (812b8 <board_init+0x19c>)
   811aa:	4798      	blx	r3
    ioport_set_pin_mode(LINE2_B, LINE_FLAGS);
   811ac:	2108      	movs	r1, #8
   811ae:	205d      	movs	r0, #93	; 0x5d
   811b0:	4b41      	ldr	r3, [pc, #260]	; (812b8 <board_init+0x19c>)
   811b2:	4798      	blx	r3
    ioport_set_pin_mode(LINE3_B, LINE_FLAGS);
   811b4:	2108      	movs	r1, #8
   811b6:	204a      	movs	r0, #74	; 0x4a
   811b8:	4b3f      	ldr	r3, [pc, #252]	; (812b8 <board_init+0x19c>)
   811ba:	4798      	blx	r3
    ioport_set_pin_mode(LINE4_B, LINE_FLAGS);
   811bc:	2108      	movs	r1, #8
   811be:	2055      	movs	r0, #85	; 0x55
   811c0:	4b3d      	ldr	r3, [pc, #244]	; (812b8 <board_init+0x19c>)
   811c2:	4798      	blx	r3
    ioport_set_pin_mode(LINE5_B, LINE_FLAGS);
   811c4:	2108      	movs	r1, #8
   811c6:	2057      	movs	r0, #87	; 0x57
   811c8:	4b3b      	ldr	r3, [pc, #236]	; (812b8 <board_init+0x19c>)
   811ca:	4798      	blx	r3
    ioport_set_pin_mode(LINE6_B, LINE_FLAGS);
   811cc:	2108      	movs	r1, #8
   811ce:	205a      	movs	r0, #90	; 0x5a
   811d0:	4b39      	ldr	r3, [pc, #228]	; (812b8 <board_init+0x19c>)
   811d2:	4798      	blx	r3
    ioport_set_pin_mode(LINE7_B, LINE_FLAGS);
   811d4:	2108      	movs	r1, #8
   811d6:	2041      	movs	r0, #65	; 0x41
   811d8:	4b37      	ldr	r3, [pc, #220]	; (812b8 <board_init+0x19c>)
   811da:	4798      	blx	r3
    ioport_set_pin_mode(LINE8_B, LINE_FLAGS);
   811dc:	2108      	movs	r1, #8
   811de:	2045      	movs	r0, #69	; 0x45
   811e0:	4b35      	ldr	r3, [pc, #212]	; (812b8 <board_init+0x19c>)
   811e2:	4798      	blx	r3
    ioport_set_pin_mode(LINE9_B, LINE_FLAGS);
   811e4:	2108      	movs	r1, #8
   811e6:	2049      	movs	r0, #73	; 0x49
   811e8:	4b33      	ldr	r3, [pc, #204]	; (812b8 <board_init+0x19c>)
   811ea:	4798      	blx	r3
    ioport_set_pin_mode(LINE10_B, LINE_FLAGS);
   811ec:	2108      	movs	r1, #8
   811ee:	204c      	movs	r0, #76	; 0x4c
   811f0:	4b31      	ldr	r3, [pc, #196]	; (812b8 <board_init+0x19c>)
   811f2:	4798      	blx	r3
    ioport_set_pin_mode(LINE11_B, LINE_FLAGS);
   811f4:	2108      	movs	r1, #8
   811f6:	204e      	movs	r0, #78	; 0x4e
   811f8:	4b2f      	ldr	r3, [pc, #188]	; (812b8 <board_init+0x19c>)
   811fa:	4798      	blx	r3
    ioport_set_pin_mode(LINE12_B, LINE_FLAGS);
   811fc:	2108      	movs	r1, #8
   811fe:	2050      	movs	r0, #80	; 0x50
   81200:	4b2d      	ldr	r3, [pc, #180]	; (812b8 <board_init+0x19c>)
   81202:	4798      	blx	r3
    
    ioport_set_pin_mode(LINE1_W, LINE_FLAGS);
   81204:	2108      	movs	r1, #8
   81206:	2051      	movs	r0, #81	; 0x51
   81208:	4b2b      	ldr	r3, [pc, #172]	; (812b8 <board_init+0x19c>)
   8120a:	4798      	blx	r3
    ioport_set_pin_mode(LINE2_W, LINE_FLAGS);
   8120c:	2108      	movs	r1, #8
   8120e:	2053      	movs	r0, #83	; 0x53
   81210:	4b29      	ldr	r3, [pc, #164]	; (812b8 <board_init+0x19c>)
   81212:	4798      	blx	r3
    ioport_set_pin_mode(LINE3_W, LINE_FLAGS);
   81214:	2108      	movs	r1, #8
   81216:	205e      	movs	r0, #94	; 0x5e
   81218:	4b27      	ldr	r3, [pc, #156]	; (812b8 <board_init+0x19c>)
   8121a:	4798      	blx	r3
    ioport_set_pin_mode(LINE4_W, LINE_FLAGS);
   8121c:	2108      	movs	r1, #8
   8121e:	2054      	movs	r0, #84	; 0x54
   81220:	4b25      	ldr	r3, [pc, #148]	; (812b8 <board_init+0x19c>)
   81222:	4798      	blx	r3
    ioport_set_pin_mode(LINE5_W, LINE_FLAGS);
   81224:	2108      	movs	r1, #8
   81226:	2056      	movs	r0, #86	; 0x56
   81228:	4b23      	ldr	r3, [pc, #140]	; (812b8 <board_init+0x19c>)
   8122a:	4798      	blx	r3
    ioport_set_pin_mode(LINE6_W, LINE_FLAGS);
   8122c:	2108      	movs	r1, #8
   8122e:	2058      	movs	r0, #88	; 0x58
   81230:	4b21      	ldr	r3, [pc, #132]	; (812b8 <board_init+0x19c>)
   81232:	4798      	blx	r3
    ioport_set_pin_mode(LINE7_W, LINE_FLAGS);
   81234:	2108      	movs	r1, #8
   81236:	205b      	movs	r0, #91	; 0x5b
   81238:	4b1f      	ldr	r3, [pc, #124]	; (812b8 <board_init+0x19c>)
   8123a:	4798      	blx	r3
    ioport_set_pin_mode(LINE8_W, LINE_FLAGS);
   8123c:	2108      	movs	r1, #8
   8123e:	2043      	movs	r0, #67	; 0x43
   81240:	4b1d      	ldr	r3, [pc, #116]	; (812b8 <board_init+0x19c>)
   81242:	4798      	blx	r3
    ioport_set_pin_mode(LINE9_W, LINE_FLAGS);
   81244:	2108      	movs	r1, #8
   81246:	2047      	movs	r0, #71	; 0x47
   81248:	4b1b      	ldr	r3, [pc, #108]	; (812b8 <board_init+0x19c>)
   8124a:	4798      	blx	r3
    ioport_set_pin_mode(LINE10_W, LINE_FLAGS);
   8124c:	2108      	movs	r1, #8
   8124e:	204b      	movs	r0, #75	; 0x4b
   81250:	4b19      	ldr	r3, [pc, #100]	; (812b8 <board_init+0x19c>)
   81252:	4798      	blx	r3
    ioport_set_pin_mode(LINE11_W, LINE_FLAGS);
   81254:	2108      	movs	r1, #8
   81256:	204d      	movs	r0, #77	; 0x4d
   81258:	4b17      	ldr	r3, [pc, #92]	; (812b8 <board_init+0x19c>)
   8125a:	4798      	blx	r3
    ioport_set_pin_mode(LINE12_W, LINE_FLAGS);
   8125c:	2108      	movs	r1, #8
   8125e:	204f      	movs	r0, #79	; 0x4f
   81260:	4b15      	ldr	r3, [pc, #84]	; (812b8 <board_init+0x19c>)
   81262:	4798      	blx	r3
    
    /* Configure ADC */
    pmc_enable_periph_clk(ID_ADC);
   81264:	2025      	movs	r0, #37	; 0x25
   81266:	4b16      	ldr	r3, [pc, #88]	; (812c0 <board_init+0x1a4>)
   81268:	4798      	blx	r3
    adc_init(ADC, sysclk_get_cpu_hz(), 6400000, ADC_STARTUP_TIME_4);
   8126a:	4b16      	ldr	r3, [pc, #88]	; (812c4 <board_init+0x1a8>)
   8126c:	4798      	blx	r3
   8126e:	4601      	mov	r1, r0
   81270:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   81274:	4a14      	ldr	r2, [pc, #80]	; (812c8 <board_init+0x1ac>)
   81276:	4815      	ldr	r0, [pc, #84]	; (812cc <board_init+0x1b0>)
   81278:	4c15      	ldr	r4, [pc, #84]	; (812d0 <board_init+0x1b4>)
   8127a:	47a0      	blx	r4
    adc_configure_timing(ADC, 1, ADC_SETTLING_TIME_3, 1);
   8127c:	2301      	movs	r3, #1
   8127e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   81282:	2101      	movs	r1, #1
   81284:	4811      	ldr	r0, [pc, #68]	; (812cc <board_init+0x1b0>)
   81286:	4c13      	ldr	r4, [pc, #76]	; (812d4 <board_init+0x1b8>)
   81288:	47a0      	blx	r4
    adc_enable_channel(ADC, BATTERY_VOLTAGE);
   8128a:	2101      	movs	r1, #1
   8128c:	480f      	ldr	r0, [pc, #60]	; (812cc <board_init+0x1b0>)
   8128e:	4b12      	ldr	r3, [pc, #72]	; (812d8 <board_init+0x1bc>)
   81290:	4798      	blx	r3
    adc_enable_channel(ADC, LIGHT_BARRIER_RX);
   81292:	2102      	movs	r1, #2
   81294:	480d      	ldr	r0, [pc, #52]	; (812cc <board_init+0x1b0>)
   81296:	4b10      	ldr	r3, [pc, #64]	; (812d8 <board_init+0x1bc>)
   81298:	4798      	blx	r3
    adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   8129a:	2200      	movs	r2, #0
   8129c:	2100      	movs	r1, #0
   8129e:	480b      	ldr	r0, [pc, #44]	; (812cc <board_init+0x1b0>)
   812a0:	4b0e      	ldr	r3, [pc, #56]	; (812dc <board_init+0x1c0>)
   812a2:	4798      	blx	r3
}
   812a4:	bf00      	nop
   812a6:	bd98      	pop	{r3, r4, r7, pc}
   812a8:	400e1a50 	.word	0x400e1a50
   812ac:	00080ee9 	.word	0x00080ee9
   812b0:	0008102d 	.word	0x0008102d
   812b4:	000810b3 	.word	0x000810b3
   812b8:	00080f55 	.word	0x00080f55
   812bc:	00080f0d 	.word	0x00080f0d
   812c0:	00080da9 	.word	0x00080da9
   812c4:	00080eb9 	.word	0x00080eb9
   812c8:	0061a800 	.word	0x0061a800
   812cc:	400c0000 	.word	0x400c0000
   812d0:	00080161 	.word	0x00080161
   812d4:	000801f1 	.word	0x000801f1
   812d8:	00080247 	.word	0x00080247
   812dc:	000801c3 	.word	0x000801c3

000812e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   812e0:	b480      	push	{r7}
   812e2:	af00      	add	r7, sp, #0
	while (1) {
   812e4:	e7fe      	b.n	812e4 <Dummy_Handler+0x4>
	...

000812e8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   812e8:	b580      	push	{r7, lr}
   812ea:	b082      	sub	sp, #8
   812ec:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   812ee:	4b1e      	ldr	r3, [pc, #120]	; (81368 <Reset_Handler+0x80>)
   812f0:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   812f2:	4b1e      	ldr	r3, [pc, #120]	; (8136c <Reset_Handler+0x84>)
   812f4:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   812f6:	687a      	ldr	r2, [r7, #4]
   812f8:	683b      	ldr	r3, [r7, #0]
   812fa:	429a      	cmp	r2, r3
   812fc:	d00c      	beq.n	81318 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   812fe:	e007      	b.n	81310 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   81300:	683b      	ldr	r3, [r7, #0]
   81302:	1d1a      	adds	r2, r3, #4
   81304:	603a      	str	r2, [r7, #0]
   81306:	687a      	ldr	r2, [r7, #4]
   81308:	1d11      	adds	r1, r2, #4
   8130a:	6079      	str	r1, [r7, #4]
   8130c:	6812      	ldr	r2, [r2, #0]
   8130e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   81310:	683b      	ldr	r3, [r7, #0]
   81312:	4a17      	ldr	r2, [pc, #92]	; (81370 <Reset_Handler+0x88>)
   81314:	4293      	cmp	r3, r2
   81316:	d3f3      	bcc.n	81300 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81318:	4b16      	ldr	r3, [pc, #88]	; (81374 <Reset_Handler+0x8c>)
   8131a:	603b      	str	r3, [r7, #0]
   8131c:	e004      	b.n	81328 <Reset_Handler+0x40>
		*pDest++ = 0;
   8131e:	683b      	ldr	r3, [r7, #0]
   81320:	1d1a      	adds	r2, r3, #4
   81322:	603a      	str	r2, [r7, #0]
   81324:	2200      	movs	r2, #0
   81326:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   81328:	683b      	ldr	r3, [r7, #0]
   8132a:	4a13      	ldr	r2, [pc, #76]	; (81378 <Reset_Handler+0x90>)
   8132c:	4293      	cmp	r3, r2
   8132e:	d3f6      	bcc.n	8131e <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   81330:	4b12      	ldr	r3, [pc, #72]	; (8137c <Reset_Handler+0x94>)
   81332:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81334:	4a12      	ldr	r2, [pc, #72]	; (81380 <Reset_Handler+0x98>)
   81336:	687b      	ldr	r3, [r7, #4]
   81338:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8133c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81340:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81342:	687b      	ldr	r3, [r7, #4]
   81344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   81348:	d309      	bcc.n	8135e <Reset_Handler+0x76>
   8134a:	687b      	ldr	r3, [r7, #4]
   8134c:	4a0d      	ldr	r2, [pc, #52]	; (81384 <Reset_Handler+0x9c>)
   8134e:	4293      	cmp	r3, r2
   81350:	d805      	bhi.n	8135e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81352:	4a0b      	ldr	r2, [pc, #44]	; (81380 <Reset_Handler+0x98>)
   81354:	4b0a      	ldr	r3, [pc, #40]	; (81380 <Reset_Handler+0x98>)
   81356:	689b      	ldr	r3, [r3, #8]
   81358:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8135c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8135e:	4b0a      	ldr	r3, [pc, #40]	; (81388 <Reset_Handler+0xa0>)
   81360:	4798      	blx	r3

	/* Branch to main function */
	main();
   81362:	4b0a      	ldr	r3, [pc, #40]	; (8138c <Reset_Handler+0xa4>)
   81364:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   81366:	e7fe      	b.n	81366 <Reset_Handler+0x7e>
   81368:	00082a18 	.word	0x00082a18
   8136c:	20070000 	.word	0x20070000
   81370:	200705bc 	.word	0x200705bc
   81374:	200705bc 	.word	0x200705bc
   81378:	2007061c 	.word	0x2007061c
   8137c:	00080000 	.word	0x00080000
   81380:	e000ed00 	.word	0xe000ed00
   81384:	200fffff 	.word	0x200fffff
   81388:	00082881 	.word	0x00082881
   8138c:	000819e1 	.word	0x000819e1

00081390 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   81390:	b480      	push	{r7}
   81392:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81394:	4b57      	ldr	r3, [pc, #348]	; (814f4 <SystemCoreClockUpdate+0x164>)
   81396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81398:	f003 0303 	and.w	r3, r3, #3
   8139c:	2b03      	cmp	r3, #3
   8139e:	f200 808a 	bhi.w	814b6 <SystemCoreClockUpdate+0x126>
   813a2:	a201      	add	r2, pc, #4	; (adr r2, 813a8 <SystemCoreClockUpdate+0x18>)
   813a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   813a8:	000813b9 	.word	0x000813b9
   813ac:	000813d9 	.word	0x000813d9
   813b0:	00081429 	.word	0x00081429
   813b4:	00081429 	.word	0x00081429
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   813b8:	4b4f      	ldr	r3, [pc, #316]	; (814f8 <SystemCoreClockUpdate+0x168>)
   813ba:	695b      	ldr	r3, [r3, #20]
   813bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   813c0:	2b00      	cmp	r3, #0
   813c2:	d004      	beq.n	813ce <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   813c4:	4b4d      	ldr	r3, [pc, #308]	; (814fc <SystemCoreClockUpdate+0x16c>)
   813c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   813ca:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   813cc:	e073      	b.n	814b6 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   813ce:	4b4b      	ldr	r3, [pc, #300]	; (814fc <SystemCoreClockUpdate+0x16c>)
   813d0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   813d4:	601a      	str	r2, [r3, #0]
		break;
   813d6:	e06e      	b.n	814b6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   813d8:	4b46      	ldr	r3, [pc, #280]	; (814f4 <SystemCoreClockUpdate+0x164>)
   813da:	6a1b      	ldr	r3, [r3, #32]
   813dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   813e0:	2b00      	cmp	r3, #0
   813e2:	d003      	beq.n	813ec <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   813e4:	4b45      	ldr	r3, [pc, #276]	; (814fc <SystemCoreClockUpdate+0x16c>)
   813e6:	4a46      	ldr	r2, [pc, #280]	; (81500 <SystemCoreClockUpdate+0x170>)
   813e8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   813ea:	e064      	b.n	814b6 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   813ec:	4b43      	ldr	r3, [pc, #268]	; (814fc <SystemCoreClockUpdate+0x16c>)
   813ee:	4a45      	ldr	r2, [pc, #276]	; (81504 <SystemCoreClockUpdate+0x174>)
   813f0:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   813f2:	4b40      	ldr	r3, [pc, #256]	; (814f4 <SystemCoreClockUpdate+0x164>)
   813f4:	6a1b      	ldr	r3, [r3, #32]
   813f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   813fa:	2b10      	cmp	r3, #16
   813fc:	d004      	beq.n	81408 <SystemCoreClockUpdate+0x78>
   813fe:	2b20      	cmp	r3, #32
   81400:	d008      	beq.n	81414 <SystemCoreClockUpdate+0x84>
   81402:	2b00      	cmp	r3, #0
   81404:	d00e      	beq.n	81424 <SystemCoreClockUpdate+0x94>
				break;
   81406:	e00e      	b.n	81426 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   81408:	4b3c      	ldr	r3, [pc, #240]	; (814fc <SystemCoreClockUpdate+0x16c>)
   8140a:	681b      	ldr	r3, [r3, #0]
   8140c:	005b      	lsls	r3, r3, #1
   8140e:	4a3b      	ldr	r2, [pc, #236]	; (814fc <SystemCoreClockUpdate+0x16c>)
   81410:	6013      	str	r3, [r2, #0]
				break;
   81412:	e008      	b.n	81426 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   81414:	4b39      	ldr	r3, [pc, #228]	; (814fc <SystemCoreClockUpdate+0x16c>)
   81416:	681a      	ldr	r2, [r3, #0]
   81418:	4613      	mov	r3, r2
   8141a:	005b      	lsls	r3, r3, #1
   8141c:	4413      	add	r3, r2
   8141e:	4a37      	ldr	r2, [pc, #220]	; (814fc <SystemCoreClockUpdate+0x16c>)
   81420:	6013      	str	r3, [r2, #0]
				break;
   81422:	e000      	b.n	81426 <SystemCoreClockUpdate+0x96>
				break;
   81424:	bf00      	nop
		break;
   81426:	e046      	b.n	814b6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81428:	4b32      	ldr	r3, [pc, #200]	; (814f4 <SystemCoreClockUpdate+0x164>)
   8142a:	6a1b      	ldr	r3, [r3, #32]
   8142c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81430:	2b00      	cmp	r3, #0
   81432:	d003      	beq.n	8143c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81434:	4b31      	ldr	r3, [pc, #196]	; (814fc <SystemCoreClockUpdate+0x16c>)
   81436:	4a32      	ldr	r2, [pc, #200]	; (81500 <SystemCoreClockUpdate+0x170>)
   81438:	601a      	str	r2, [r3, #0]
   8143a:	e01c      	b.n	81476 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8143c:	4b2f      	ldr	r3, [pc, #188]	; (814fc <SystemCoreClockUpdate+0x16c>)
   8143e:	4a31      	ldr	r2, [pc, #196]	; (81504 <SystemCoreClockUpdate+0x174>)
   81440:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81442:	4b2c      	ldr	r3, [pc, #176]	; (814f4 <SystemCoreClockUpdate+0x164>)
   81444:	6a1b      	ldr	r3, [r3, #32]
   81446:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8144a:	2b10      	cmp	r3, #16
   8144c:	d004      	beq.n	81458 <SystemCoreClockUpdate+0xc8>
   8144e:	2b20      	cmp	r3, #32
   81450:	d008      	beq.n	81464 <SystemCoreClockUpdate+0xd4>
   81452:	2b00      	cmp	r3, #0
   81454:	d00e      	beq.n	81474 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   81456:	e00e      	b.n	81476 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   81458:	4b28      	ldr	r3, [pc, #160]	; (814fc <SystemCoreClockUpdate+0x16c>)
   8145a:	681b      	ldr	r3, [r3, #0]
   8145c:	005b      	lsls	r3, r3, #1
   8145e:	4a27      	ldr	r2, [pc, #156]	; (814fc <SystemCoreClockUpdate+0x16c>)
   81460:	6013      	str	r3, [r2, #0]
				break;
   81462:	e008      	b.n	81476 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   81464:	4b25      	ldr	r3, [pc, #148]	; (814fc <SystemCoreClockUpdate+0x16c>)
   81466:	681a      	ldr	r2, [r3, #0]
   81468:	4613      	mov	r3, r2
   8146a:	005b      	lsls	r3, r3, #1
   8146c:	4413      	add	r3, r2
   8146e:	4a23      	ldr	r2, [pc, #140]	; (814fc <SystemCoreClockUpdate+0x16c>)
   81470:	6013      	str	r3, [r2, #0]
				break;
   81472:	e000      	b.n	81476 <SystemCoreClockUpdate+0xe6>
				break;
   81474:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81476:	4b1f      	ldr	r3, [pc, #124]	; (814f4 <SystemCoreClockUpdate+0x164>)
   81478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8147a:	f003 0303 	and.w	r3, r3, #3
   8147e:	2b02      	cmp	r3, #2
   81480:	d115      	bne.n	814ae <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81482:	4b1c      	ldr	r3, [pc, #112]	; (814f4 <SystemCoreClockUpdate+0x164>)
   81484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   81486:	0c1b      	lsrs	r3, r3, #16
   81488:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   8148c:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8148e:	4a1b      	ldr	r2, [pc, #108]	; (814fc <SystemCoreClockUpdate+0x16c>)
   81490:	6812      	ldr	r2, [r2, #0]
   81492:	fb02 f303 	mul.w	r3, r2, r3
   81496:	4a19      	ldr	r2, [pc, #100]	; (814fc <SystemCoreClockUpdate+0x16c>)
   81498:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8149a:	4b16      	ldr	r3, [pc, #88]	; (814f4 <SystemCoreClockUpdate+0x164>)
   8149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8149e:	b2db      	uxtb	r3, r3
   814a0:	4a16      	ldr	r2, [pc, #88]	; (814fc <SystemCoreClockUpdate+0x16c>)
   814a2:	6812      	ldr	r2, [r2, #0]
   814a4:	fbb2 f3f3 	udiv	r3, r2, r3
   814a8:	4a14      	ldr	r2, [pc, #80]	; (814fc <SystemCoreClockUpdate+0x16c>)
   814aa:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   814ac:	e002      	b.n	814b4 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   814ae:	4b13      	ldr	r3, [pc, #76]	; (814fc <SystemCoreClockUpdate+0x16c>)
   814b0:	4a15      	ldr	r2, [pc, #84]	; (81508 <SystemCoreClockUpdate+0x178>)
   814b2:	601a      	str	r2, [r3, #0]
		break;
   814b4:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   814b6:	4b0f      	ldr	r3, [pc, #60]	; (814f4 <SystemCoreClockUpdate+0x164>)
   814b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   814ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
   814be:	2b70      	cmp	r3, #112	; 0x70
   814c0:	d108      	bne.n	814d4 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   814c2:	4b0e      	ldr	r3, [pc, #56]	; (814fc <SystemCoreClockUpdate+0x16c>)
   814c4:	681b      	ldr	r3, [r3, #0]
   814c6:	4a11      	ldr	r2, [pc, #68]	; (8150c <SystemCoreClockUpdate+0x17c>)
   814c8:	fba2 2303 	umull	r2, r3, r2, r3
   814cc:	085b      	lsrs	r3, r3, #1
   814ce:	4a0b      	ldr	r2, [pc, #44]	; (814fc <SystemCoreClockUpdate+0x16c>)
   814d0:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   814d2:	e00a      	b.n	814ea <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   814d4:	4b07      	ldr	r3, [pc, #28]	; (814f4 <SystemCoreClockUpdate+0x164>)
   814d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   814d8:	091b      	lsrs	r3, r3, #4
   814da:	f003 0307 	and.w	r3, r3, #7
   814de:	4a07      	ldr	r2, [pc, #28]	; (814fc <SystemCoreClockUpdate+0x16c>)
   814e0:	6812      	ldr	r2, [r2, #0]
   814e2:	fa22 f303 	lsr.w	r3, r2, r3
   814e6:	4a05      	ldr	r2, [pc, #20]	; (814fc <SystemCoreClockUpdate+0x16c>)
   814e8:	6013      	str	r3, [r2, #0]
}
   814ea:	bf00      	nop
   814ec:	46bd      	mov	sp, r7
   814ee:	bc80      	pop	{r7}
   814f0:	4770      	bx	lr
   814f2:	bf00      	nop
   814f4:	400e0600 	.word	0x400e0600
   814f8:	400e1a10 	.word	0x400e1a10
   814fc:	2007018c 	.word	0x2007018c
   81500:	00b71b00 	.word	0x00b71b00
   81504:	003d0900 	.word	0x003d0900
   81508:	0e4e1c00 	.word	0x0e4e1c00
   8150c:	aaaaaaab 	.word	0xaaaaaaab

00081510 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81510:	b480      	push	{r7}
   81512:	b083      	sub	sp, #12
   81514:	af00      	add	r7, sp, #0
   81516:	4603      	mov	r3, r0
   81518:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8151a:	4908      	ldr	r1, [pc, #32]	; (8153c <NVIC_EnableIRQ+0x2c>)
   8151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81520:	095b      	lsrs	r3, r3, #5
   81522:	79fa      	ldrb	r2, [r7, #7]
   81524:	f002 021f 	and.w	r2, r2, #31
   81528:	2001      	movs	r0, #1
   8152a:	fa00 f202 	lsl.w	r2, r0, r2
   8152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81532:	bf00      	nop
   81534:	370c      	adds	r7, #12
   81536:	46bd      	mov	sp, r7
   81538:	bc80      	pop	{r7}
   8153a:	4770      	bx	lr
   8153c:	e000e100 	.word	0xe000e100

00081540 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   81540:	b480      	push	{r7}
   81542:	b083      	sub	sp, #12
   81544:	af00      	add	r7, sp, #0
   81546:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   81548:	687b      	ldr	r3, [r7, #4]
   8154a:	2280      	movs	r2, #128	; 0x80
   8154c:	601a      	str	r2, [r3, #0]
}
   8154e:	bf00      	nop
   81550:	370c      	adds	r7, #12
   81552:	46bd      	mov	sp, r7
   81554:	bc80      	pop	{r7}
   81556:	4770      	bx	lr

00081558 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   81558:	b480      	push	{r7}
   8155a:	b083      	sub	sp, #12
   8155c:	af00      	add	r7, sp, #0
   8155e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   81560:	687b      	ldr	r3, [r7, #4]
   81562:	2201      	movs	r2, #1
   81564:	601a      	str	r2, [r3, #0]
}
   81566:	bf00      	nop
   81568:	370c      	adds	r7, #12
   8156a:	46bd      	mov	sp, r7
   8156c:	bc80      	pop	{r7}
   8156e:	4770      	bx	lr

00081570 <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
   81570:	b480      	push	{r7}
   81572:	b083      	sub	sp, #12
   81574:	af00      	add	r7, sp, #0
   81576:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   81578:	687b      	ldr	r3, [r7, #4]
   8157a:	2202      	movs	r2, #2
   8157c:	601a      	str	r2, [r3, #0]
}
   8157e:	bf00      	nop
   81580:	370c      	adds	r7, #12
   81582:	46bd      	mov	sp, r7
   81584:	bc80      	pop	{r7}
   81586:	4770      	bx	lr

00081588 <spi_set_slave_mode>:
 * \brief Set SPI to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
   81588:	b480      	push	{r7}
   8158a:	b083      	sub	sp, #12
   8158c:	af00      	add	r7, sp, #0
   8158e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
   81590:	687b      	ldr	r3, [r7, #4]
   81592:	685b      	ldr	r3, [r3, #4]
   81594:	f023 0201 	bic.w	r2, r3, #1
   81598:	687b      	ldr	r3, [r7, #4]
   8159a:	605a      	str	r2, [r3, #4]
}
   8159c:	bf00      	nop
   8159e:	370c      	adds	r7, #12
   815a0:	46bd      	mov	sp, r7
   815a2:	bc80      	pop	{r7}
   815a4:	4770      	bx	lr

000815a6 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   815a6:	b480      	push	{r7}
   815a8:	b083      	sub	sp, #12
   815aa:	af00      	add	r7, sp, #0
   815ac:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   815ae:	687b      	ldr	r3, [r7, #4]
   815b0:	685b      	ldr	r3, [r3, #4]
   815b2:	f043 0210 	orr.w	r2, r3, #16
   815b6:	687b      	ldr	r3, [r7, #4]
   815b8:	605a      	str	r2, [r3, #4]
}
   815ba:	bf00      	nop
   815bc:	370c      	adds	r7, #12
   815be:	46bd      	mov	sp, r7
   815c0:	bc80      	pop	{r7}
   815c2:	4770      	bx	lr

000815c4 <spi_init>:

static Bool received_data = 0;
uint8_t sens_buf[sizeof(mts)];

void spi_init(void)
{
   815c4:	b580      	push	{r7, lr}
   815c6:	af00      	add	r7, sp, #0
    configure_dmac();
   815c8:	4b02      	ldr	r3, [pc, #8]	; (815d4 <spi_init+0x10>)
   815ca:	4798      	blx	r3
    spi_slave_initialize();
   815cc:	4b02      	ldr	r3, [pc, #8]	; (815d8 <spi_init+0x14>)
   815ce:	4798      	blx	r3
}
   815d0:	bf00      	nop
   815d2:	bd80      	pop	{r7, pc}
   815d4:	00081729 	.word	0x00081729
   815d8:	00081675 	.word	0x00081675

000815dc <spi_slave_transfer>:

void spi_slave_transfer(void *p_buf, uint32_t ul_size)
{
   815dc:	b580      	push	{r7, lr}
   815de:	b088      	sub	sp, #32
   815e0:	af00      	add	r7, sp, #0
   815e2:	6078      	str	r0, [r7, #4]
   815e4:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    dmac_channel_disable(DMAC, 1);
   815e6:	2101      	movs	r1, #1
   815e8:	481a      	ldr	r0, [pc, #104]	; (81654 <spi_slave_transfer+0x78>)
   815ea:	4b1b      	ldr	r3, [pc, #108]	; (81658 <spi_slave_transfer+0x7c>)
   815ec:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   815ee:	687b      	ldr	r3, [r7, #4]
   815f0:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & SPI0->SPI_TDR;
   815f2:	4b1a      	ldr	r3, [pc, #104]	; (8165c <spi_slave_transfer+0x80>)
   815f4:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   815f6:	683b      	ldr	r3, [r7, #0]
   815f8:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   815fa:	4b19      	ldr	r3, [pc, #100]	; (81660 <spi_slave_transfer+0x84>)
   815fc:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   815fe:	2300      	movs	r3, #0
   81600:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   81602:	f107 030c 	add.w	r3, r7, #12
   81606:	461a      	mov	r2, r3
   81608:	2101      	movs	r1, #1
   8160a:	4812      	ldr	r0, [pc, #72]	; (81654 <spi_slave_transfer+0x78>)
   8160c:	4b15      	ldr	r3, [pc, #84]	; (81664 <spi_slave_transfer+0x88>)
   8160e:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   81610:	2101      	movs	r1, #1
   81612:	4810      	ldr	r0, [pc, #64]	; (81654 <spi_slave_transfer+0x78>)
   81614:	4b14      	ldr	r3, [pc, #80]	; (81668 <spi_slave_transfer+0x8c>)
   81616:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   81618:	2100      	movs	r1, #0
   8161a:	480e      	ldr	r0, [pc, #56]	; (81654 <spi_slave_transfer+0x78>)
   8161c:	4b0e      	ldr	r3, [pc, #56]	; (81658 <spi_slave_transfer+0x7c>)
   8161e:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & SPI0->SPI_RDR;
   81620:	4b12      	ldr	r3, [pc, #72]	; (8166c <spi_slave_transfer+0x90>)
   81622:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   81624:	687b      	ldr	r3, [r7, #4]
   81626:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   81628:	683b      	ldr	r3, [r7, #0]
   8162a:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   8162c:	4b10      	ldr	r3, [pc, #64]	; (81670 <spi_slave_transfer+0x94>)
   8162e:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   81630:	2300      	movs	r3, #0
   81632:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   81634:	f107 030c 	add.w	r3, r7, #12
   81638:	461a      	mov	r2, r3
   8163a:	2100      	movs	r1, #0
   8163c:	4805      	ldr	r0, [pc, #20]	; (81654 <spi_slave_transfer+0x78>)
   8163e:	4b09      	ldr	r3, [pc, #36]	; (81664 <spi_slave_transfer+0x88>)
   81640:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   81642:	2100      	movs	r1, #0
   81644:	4803      	ldr	r0, [pc, #12]	; (81654 <spi_slave_transfer+0x78>)
   81646:	4b08      	ldr	r3, [pc, #32]	; (81668 <spi_slave_transfer+0x8c>)
   81648:	4798      	blx	r3
}
   8164a:	bf00      	nop
   8164c:	3720      	adds	r7, #32
   8164e:	46bd      	mov	sp, r7
   81650:	bd80      	pop	{r7, pc}
   81652:	bf00      	nop
   81654:	400c4000 	.word	0x400c4000
   81658:	0008067f 	.word	0x0008067f
   8165c:	4000800c 	.word	0x4000800c
   81660:	20310000 	.word	0x20310000
   81664:	00080799 	.word	0x00080799
   81668:	00080661 	.word	0x00080661
   8166c:	40008008 	.word	0x40008008
   81670:	02510000 	.word	0x02510000

00081674 <spi_slave_initialize>:

void spi_slave_initialize(void)
{
   81674:	b580      	push	{r7, lr}
   81676:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   81678:	2101      	movs	r1, #1
   8167a:	481b      	ldr	r0, [pc, #108]	; (816e8 <spi_slave_initialize+0x74>)
   8167c:	4b1b      	ldr	r3, [pc, #108]	; (816ec <spi_slave_initialize+0x78>)
   8167e:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   81680:	2100      	movs	r1, #0
   81682:	4819      	ldr	r0, [pc, #100]	; (816e8 <spi_slave_initialize+0x74>)
   81684:	4b19      	ldr	r3, [pc, #100]	; (816ec <spi_slave_initialize+0x78>)
   81686:	4798      	blx	r3
    pmc_enable_periph_clk(ID_SPI0);
   81688:	2018      	movs	r0, #24
   8168a:	4b19      	ldr	r3, [pc, #100]	; (816f0 <spi_slave_initialize+0x7c>)
   8168c:	4798      	blx	r3
    spi_disable(SPI0);
   8168e:	4819      	ldr	r0, [pc, #100]	; (816f4 <spi_slave_initialize+0x80>)
   81690:	4b19      	ldr	r3, [pc, #100]	; (816f8 <spi_slave_initialize+0x84>)
   81692:	4798      	blx	r3
    spi_reset(SPI0);
   81694:	4817      	ldr	r0, [pc, #92]	; (816f4 <spi_slave_initialize+0x80>)
   81696:	4b19      	ldr	r3, [pc, #100]	; (816fc <spi_slave_initialize+0x88>)
   81698:	4798      	blx	r3
    spi_set_slave_mode(SPI0);
   8169a:	4816      	ldr	r0, [pc, #88]	; (816f4 <spi_slave_initialize+0x80>)
   8169c:	4b18      	ldr	r3, [pc, #96]	; (81700 <spi_slave_initialize+0x8c>)
   8169e:	4798      	blx	r3
    spi_disable_mode_fault_detect(SPI0);
   816a0:	4814      	ldr	r0, [pc, #80]	; (816f4 <spi_slave_initialize+0x80>)
   816a2:	4b18      	ldr	r3, [pc, #96]	; (81704 <spi_slave_initialize+0x90>)
   816a4:	4798      	blx	r3
    spi_set_peripheral_chip_select_value(SPI0, spi_get_pcs(0));
   816a6:	210e      	movs	r1, #14
   816a8:	4812      	ldr	r0, [pc, #72]	; (816f4 <spi_slave_initialize+0x80>)
   816aa:	4b17      	ldr	r3, [pc, #92]	; (81708 <spi_slave_initialize+0x94>)
   816ac:	4798      	blx	r3
    spi_set_clock_polarity(SPI0, 0, 0);
   816ae:	2200      	movs	r2, #0
   816b0:	2100      	movs	r1, #0
   816b2:	4810      	ldr	r0, [pc, #64]	; (816f4 <spi_slave_initialize+0x80>)
   816b4:	4b15      	ldr	r3, [pc, #84]	; (8170c <spi_slave_initialize+0x98>)
   816b6:	4798      	blx	r3
    spi_set_clock_phase(SPI0, 0, 1);
   816b8:	2201      	movs	r2, #1
   816ba:	2100      	movs	r1, #0
   816bc:	480d      	ldr	r0, [pc, #52]	; (816f4 <spi_slave_initialize+0x80>)
   816be:	4b14      	ldr	r3, [pc, #80]	; (81710 <spi_slave_initialize+0x9c>)
   816c0:	4798      	blx	r3
    spi_set_bits_per_transfer(SPI0, 0, SPI_CSR_BITS_8_BIT);
   816c2:	2200      	movs	r2, #0
   816c4:	2100      	movs	r1, #0
   816c6:	480b      	ldr	r0, [pc, #44]	; (816f4 <spi_slave_initialize+0x80>)
   816c8:	4b12      	ldr	r3, [pc, #72]	; (81714 <spi_slave_initialize+0xa0>)
   816ca:	4798      	blx	r3
    spi_enable(SPI0);
   816cc:	4809      	ldr	r0, [pc, #36]	; (816f4 <spi_slave_initialize+0x80>)
   816ce:	4b12      	ldr	r3, [pc, #72]	; (81718 <spi_slave_initialize+0xa4>)
   816d0:	4798      	blx	r3

    /* Start waiting command. */
    memcpy(&sens_buf, &stm, sizeof(stm));
   816d2:	4b12      	ldr	r3, [pc, #72]	; (8171c <spi_slave_initialize+0xa8>)
   816d4:	881b      	ldrh	r3, [r3, #0]
   816d6:	b29b      	uxth	r3, r3
   816d8:	4a11      	ldr	r2, [pc, #68]	; (81720 <spi_slave_initialize+0xac>)
   816da:	8013      	strh	r3, [r2, #0]
    spi_slave_transfer(&sens_buf, sizeof(sens_buf));
   816dc:	2102      	movs	r1, #2
   816de:	4810      	ldr	r0, [pc, #64]	; (81720 <spi_slave_initialize+0xac>)
   816e0:	4b10      	ldr	r3, [pc, #64]	; (81724 <spi_slave_initialize+0xb0>)
   816e2:	4798      	blx	r3
}
   816e4:	bf00      	nop
   816e6:	bd80      	pop	{r7, pc}
   816e8:	400c4000 	.word	0x400c4000
   816ec:	0008067f 	.word	0x0008067f
   816f0:	00080da9 	.word	0x00080da9
   816f4:	40008000 	.word	0x40008000
   816f8:	00081571 	.word	0x00081571
   816fc:	00081541 	.word	0x00081541
   81700:	00081589 	.word	0x00081589
   81704:	000815a7 	.word	0x000815a7
   81708:	000804a1 	.word	0x000804a1
   8170c:	000804d3 	.word	0x000804d3
   81710:	00080521 	.word	0x00080521
   81714:	0008056f 	.word	0x0008056f
   81718:	00081559 	.word	0x00081559
   8171c:	200705f4 	.word	0x200705f4
   81720:	200705ec 	.word	0x200705ec
   81724:	000815dd 	.word	0x000815dd

00081728 <configure_dmac>:

void configure_dmac(void)
{
   81728:	b580      	push	{r7, lr}
   8172a:	b082      	sub	sp, #8
   8172c:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   8172e:	2027      	movs	r0, #39	; 0x27
   81730:	4b18      	ldr	r3, [pc, #96]	; (81794 <configure_dmac+0x6c>)
   81732:	4798      	blx	r3
    dmac_init(DMAC);
   81734:	4818      	ldr	r0, [pc, #96]	; (81798 <configure_dmac+0x70>)
   81736:	4b19      	ldr	r3, [pc, #100]	; (8179c <configure_dmac+0x74>)
   81738:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   8173a:	2110      	movs	r1, #16
   8173c:	4816      	ldr	r0, [pc, #88]	; (81798 <configure_dmac+0x70>)
   8173e:	4b18      	ldr	r3, [pc, #96]	; (817a0 <configure_dmac+0x78>)
   81740:	4798      	blx	r3
    dmac_enable(DMAC);
   81742:	4815      	ldr	r0, [pc, #84]	; (81798 <configure_dmac+0x70>)
   81744:	4b17      	ldr	r3, [pc, #92]	; (817a4 <configure_dmac+0x7c>)
   81746:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   81748:	2300      	movs	r3, #0
   8174a:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(2) |
   8174c:	687b      	ldr	r3, [r7, #4]
   8174e:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   81752:	f043 0302 	orr.w	r3, r3, #2
   81756:	607b      	str	r3, [r7, #4]
    DMAC_CFG_SRC_H2SEL |
    DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   81758:	687a      	ldr	r2, [r7, #4]
   8175a:	2100      	movs	r1, #0
   8175c:	480e      	ldr	r0, [pc, #56]	; (81798 <configure_dmac+0x70>)
   8175e:	4b12      	ldr	r3, [pc, #72]	; (817a8 <configure_dmac+0x80>)
   81760:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   81762:	2300      	movs	r3, #0
   81764:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(1) |
   81766:	687b      	ldr	r3, [r7, #4]
   81768:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   8176c:	f043 0310 	orr.w	r3, r3, #16
   81770:	607b      	str	r3, [r7, #4]
    DMAC_CFG_DST_H2SEL |
    DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   81772:	687a      	ldr	r2, [r7, #4]
   81774:	2101      	movs	r1, #1
   81776:	4808      	ldr	r0, [pc, #32]	; (81798 <configure_dmac+0x70>)
   81778:	4b0b      	ldr	r3, [pc, #44]	; (817a8 <configure_dmac+0x80>)
   8177a:	4798      	blx	r3

    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   8177c:	2027      	movs	r0, #39	; 0x27
   8177e:	4b0b      	ldr	r3, [pc, #44]	; (817ac <configure_dmac+0x84>)
   81780:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   81782:	2101      	movs	r1, #1
   81784:	4804      	ldr	r0, [pc, #16]	; (81798 <configure_dmac+0x70>)
   81786:	4b0a      	ldr	r3, [pc, #40]	; (817b0 <configure_dmac+0x88>)
   81788:	4798      	blx	r3
}
   8178a:	bf00      	nop
   8178c:	3708      	adds	r7, #8
   8178e:	46bd      	mov	sp, r7
   81790:	bd80      	pop	{r7, pc}
   81792:	bf00      	nop
   81794:	00080da9 	.word	0x00080da9
   81798:	400c4000 	.word	0x400c4000
   8179c:	000805b9 	.word	0x000805b9
   817a0:	000805d5 	.word	0x000805d5
   817a4:	000805fb 	.word	0x000805fb
   817a8:	0008076f 	.word	0x0008076f
   817ac:	00081511 	.word	0x00081511
   817b0:	00080631 	.word	0x00080631

000817b4 <DMAC_Handler>:

void DMAC_Handler(void)
{
   817b4:	b580      	push	{r7, lr}
   817b6:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   817b8:	480a      	ldr	r0, [pc, #40]	; (817e4 <DMAC_Handler+0x30>)
   817ba:	4b0b      	ldr	r3, [pc, #44]	; (817e8 <DMAC_Handler+0x34>)
   817bc:	4798      	blx	r3
   817be:	4602      	mov	r2, r0
   817c0:	4b0a      	ldr	r3, [pc, #40]	; (817ec <DMAC_Handler+0x38>)
   817c2:	601a      	str	r2, [r3, #0]
    
    if (ul_status & 1)
   817c4:	4b09      	ldr	r3, [pc, #36]	; (817ec <DMAC_Handler+0x38>)
   817c6:	681b      	ldr	r3, [r3, #0]
   817c8:	f003 0301 	and.w	r3, r3, #1
   817cc:	2b00      	cmp	r3, #0
   817ce:	d007      	beq.n	817e0 <DMAC_Handler+0x2c>
    {
        memcpy(&mts, &sens_buf, sizeof(mts));
   817d0:	4b07      	ldr	r3, [pc, #28]	; (817f0 <DMAC_Handler+0x3c>)
   817d2:	881b      	ldrh	r3, [r3, #0]
   817d4:	b29b      	uxth	r3, r3
   817d6:	4a07      	ldr	r2, [pc, #28]	; (817f4 <DMAC_Handler+0x40>)
   817d8:	8013      	strh	r3, [r2, #0]
        received_data = true;
   817da:	4b07      	ldr	r3, [pc, #28]	; (817f8 <DMAC_Handler+0x44>)
   817dc:	2201      	movs	r2, #1
   817de:	701a      	strb	r2, [r3, #0]
    }
}
   817e0:	bf00      	nop
   817e2:	bd80      	pop	{r7, pc}
   817e4:	400c4000 	.word	0x400c4000
   817e8:	0008064b 	.word	0x0008064b
   817ec:	200705e4 	.word	0x200705e4
   817f0:	200705ec 	.word	0x200705ec
   817f4:	200705f0 	.word	0x200705f0
   817f8:	200705e0 	.word	0x200705e0

000817fc <PrepareValuesToSend>:

void PrepareValuesToSend(void)
{
   817fc:	b580      	push	{r7, lr}
   817fe:	af00      	add	r7, sp, #0
    if (received_data)
   81800:	4b08      	ldr	r3, [pc, #32]	; (81824 <PrepareValuesToSend+0x28>)
   81802:	781b      	ldrb	r3, [r3, #0]
   81804:	2b00      	cmp	r3, #0
   81806:	d00b      	beq.n	81820 <PrepareValuesToSend+0x24>
    {
        received_data = false;
   81808:	4b06      	ldr	r3, [pc, #24]	; (81824 <PrepareValuesToSend+0x28>)
   8180a:	2200      	movs	r2, #0
   8180c:	701a      	strb	r2, [r3, #0]
        memcpy(&sens_buf, &stm, sizeof(stm));
   8180e:	4b06      	ldr	r3, [pc, #24]	; (81828 <PrepareValuesToSend+0x2c>)
   81810:	881b      	ldrh	r3, [r3, #0]
   81812:	b29b      	uxth	r3, r3
   81814:	4a05      	ldr	r2, [pc, #20]	; (8182c <PrepareValuesToSend+0x30>)
   81816:	8013      	strh	r3, [r2, #0]
        spi_slave_transfer(&sens_buf, sizeof(sens_buf));
   81818:	2102      	movs	r1, #2
   8181a:	4804      	ldr	r0, [pc, #16]	; (8182c <PrepareValuesToSend+0x30>)
   8181c:	4b04      	ldr	r3, [pc, #16]	; (81830 <PrepareValuesToSend+0x34>)
   8181e:	4798      	blx	r3
    }
   81820:	bf00      	nop
   81822:	bd80      	pop	{r7, pc}
   81824:	200705e0 	.word	0x200705e0
   81828:	200705f4 	.word	0x200705f4
   8182c:	200705ec 	.word	0x200705ec
   81830:	000815dd 	.word	0x000815dd

00081834 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81834:	b480      	push	{r7}
   81836:	b083      	sub	sp, #12
   81838:	af00      	add	r7, sp, #0
   8183a:	4603      	mov	r3, r0
   8183c:	6039      	str	r1, [r7, #0]
   8183e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81840:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81844:	2b00      	cmp	r3, #0
   81846:	da0b      	bge.n	81860 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81848:	490d      	ldr	r1, [pc, #52]	; (81880 <NVIC_SetPriority+0x4c>)
   8184a:	79fb      	ldrb	r3, [r7, #7]
   8184c:	f003 030f 	and.w	r3, r3, #15
   81850:	3b04      	subs	r3, #4
   81852:	683a      	ldr	r2, [r7, #0]
   81854:	b2d2      	uxtb	r2, r2
   81856:	0112      	lsls	r2, r2, #4
   81858:	b2d2      	uxtb	r2, r2
   8185a:	440b      	add	r3, r1
   8185c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   8185e:	e009      	b.n	81874 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81860:	4908      	ldr	r1, [pc, #32]	; (81884 <NVIC_SetPriority+0x50>)
   81862:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81866:	683a      	ldr	r2, [r7, #0]
   81868:	b2d2      	uxtb	r2, r2
   8186a:	0112      	lsls	r2, r2, #4
   8186c:	b2d2      	uxtb	r2, r2
   8186e:	440b      	add	r3, r1
   81870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81874:	bf00      	nop
   81876:	370c      	adds	r7, #12
   81878:	46bd      	mov	sp, r7
   8187a:	bc80      	pop	{r7}
   8187c:	4770      	bx	lr
   8187e:	bf00      	nop
   81880:	e000ed00 	.word	0xe000ed00
   81884:	e000e100 	.word	0xe000e100

00081888 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   81888:	b580      	push	{r7, lr}
   8188a:	b082      	sub	sp, #8
   8188c:	af00      	add	r7, sp, #0
   8188e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   81890:	687b      	ldr	r3, [r7, #4]
   81892:	3b01      	subs	r3, #1
   81894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   81898:	d301      	bcc.n	8189e <SysTick_Config+0x16>
   8189a:	2301      	movs	r3, #1
   8189c:	e00f      	b.n	818be <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   8189e:	4a0a      	ldr	r2, [pc, #40]	; (818c8 <SysTick_Config+0x40>)
   818a0:	687b      	ldr	r3, [r7, #4]
   818a2:	3b01      	subs	r3, #1
   818a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   818a6:	210f      	movs	r1, #15
   818a8:	f04f 30ff 	mov.w	r0, #4294967295
   818ac:	4b07      	ldr	r3, [pc, #28]	; (818cc <SysTick_Config+0x44>)
   818ae:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   818b0:	4b05      	ldr	r3, [pc, #20]	; (818c8 <SysTick_Config+0x40>)
   818b2:	2200      	movs	r2, #0
   818b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   818b6:	4b04      	ldr	r3, [pc, #16]	; (818c8 <SysTick_Config+0x40>)
   818b8:	2207      	movs	r2, #7
   818ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   818bc:	2300      	movs	r3, #0
}
   818be:	4618      	mov	r0, r3
   818c0:	3708      	adds	r7, #8
   818c2:	46bd      	mov	sp, r7
   818c4:	bd80      	pop	{r7, pc}
   818c6:	bf00      	nop
   818c8:	e000e010 	.word	0xe000e010
   818cc:	00081835 	.word	0x00081835

000818d0 <osc_get_rate>:
{
   818d0:	b480      	push	{r7}
   818d2:	b083      	sub	sp, #12
   818d4:	af00      	add	r7, sp, #0
   818d6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   818d8:	687b      	ldr	r3, [r7, #4]
   818da:	2b07      	cmp	r3, #7
   818dc:	d825      	bhi.n	8192a <osc_get_rate+0x5a>
   818de:	a201      	add	r2, pc, #4	; (adr r2, 818e4 <osc_get_rate+0x14>)
   818e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   818e4:	00081905 	.word	0x00081905
   818e8:	0008190b 	.word	0x0008190b
   818ec:	00081911 	.word	0x00081911
   818f0:	00081917 	.word	0x00081917
   818f4:	0008191b 	.word	0x0008191b
   818f8:	0008191f 	.word	0x0008191f
   818fc:	00081923 	.word	0x00081923
   81900:	00081927 	.word	0x00081927
		return OSC_SLCK_32K_RC_HZ;
   81904:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81908:	e010      	b.n	8192c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8190a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8190e:	e00d      	b.n	8192c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   81910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81914:	e00a      	b.n	8192c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   81916:	4b08      	ldr	r3, [pc, #32]	; (81938 <osc_get_rate+0x68>)
   81918:	e008      	b.n	8192c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8191a:	4b08      	ldr	r3, [pc, #32]	; (8193c <osc_get_rate+0x6c>)
   8191c:	e006      	b.n	8192c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8191e:	4b08      	ldr	r3, [pc, #32]	; (81940 <osc_get_rate+0x70>)
   81920:	e004      	b.n	8192c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   81922:	4b07      	ldr	r3, [pc, #28]	; (81940 <osc_get_rate+0x70>)
   81924:	e002      	b.n	8192c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   81926:	4b06      	ldr	r3, [pc, #24]	; (81940 <osc_get_rate+0x70>)
   81928:	e000      	b.n	8192c <osc_get_rate+0x5c>
	return 0;
   8192a:	2300      	movs	r3, #0
}
   8192c:	4618      	mov	r0, r3
   8192e:	370c      	adds	r7, #12
   81930:	46bd      	mov	sp, r7
   81932:	bc80      	pop	{r7}
   81934:	4770      	bx	lr
   81936:	bf00      	nop
   81938:	003d0900 	.word	0x003d0900
   8193c:	007a1200 	.word	0x007a1200
   81940:	00b71b00 	.word	0x00b71b00

00081944 <sysclk_get_main_hz>:
{
   81944:	b580      	push	{r7, lr}
   81946:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   81948:	2006      	movs	r0, #6
   8194a:	4b04      	ldr	r3, [pc, #16]	; (8195c <sysclk_get_main_hz+0x18>)
   8194c:	4798      	blx	r3
   8194e:	4602      	mov	r2, r0
   81950:	4613      	mov	r3, r2
   81952:	00db      	lsls	r3, r3, #3
   81954:	1a9b      	subs	r3, r3, r2
   81956:	005b      	lsls	r3, r3, #1
}
   81958:	4618      	mov	r0, r3
   8195a:	bd80      	pop	{r7, pc}
   8195c:	000818d1 	.word	0x000818d1

00081960 <sysclk_get_cpu_hz>:
{
   81960:	b580      	push	{r7, lr}
   81962:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   81964:	4b02      	ldr	r3, [pc, #8]	; (81970 <sysclk_get_cpu_hz+0x10>)
   81966:	4798      	blx	r3
   81968:	4603      	mov	r3, r0
   8196a:	085b      	lsrs	r3, r3, #1
}
   8196c:	4618      	mov	r0, r3
   8196e:	bd80      	pop	{r7, pc}
   81970:	00081945 	.word	0x00081945

00081974 <ioport_set_pin_level>:
{
   81974:	b480      	push	{r7}
   81976:	b08b      	sub	sp, #44	; 0x2c
   81978:	af00      	add	r7, sp, #0
   8197a:	6078      	str	r0, [r7, #4]
   8197c:	460b      	mov	r3, r1
   8197e:	70fb      	strb	r3, [r7, #3]
   81980:	687b      	ldr	r3, [r7, #4]
   81982:	627b      	str	r3, [r7, #36]	; 0x24
   81984:	78fb      	ldrb	r3, [r7, #3]
   81986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   8198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8198c:	61fb      	str	r3, [r7, #28]
   8198e:	69fb      	ldr	r3, [r7, #28]
   81990:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   81992:	69bb      	ldr	r3, [r7, #24]
   81994:	095b      	lsrs	r3, r3, #5
   81996:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81998:	697b      	ldr	r3, [r7, #20]
   8199a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8199e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   819a2:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   819a4:	613b      	str	r3, [r7, #16]
	if (level) {
   819a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   819aa:	2b00      	cmp	r3, #0
   819ac:	d009      	beq.n	819c2 <ioport_set_pin_level+0x4e>
   819ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   819b0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   819b2:	68fb      	ldr	r3, [r7, #12]
   819b4:	f003 031f 	and.w	r3, r3, #31
   819b8:	2201      	movs	r2, #1
   819ba:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   819bc:	693b      	ldr	r3, [r7, #16]
   819be:	631a      	str	r2, [r3, #48]	; 0x30
}
   819c0:	e008      	b.n	819d4 <ioport_set_pin_level+0x60>
   819c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   819c4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   819c6:	68bb      	ldr	r3, [r7, #8]
   819c8:	f003 031f 	and.w	r3, r3, #31
   819cc:	2201      	movs	r2, #1
   819ce:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   819d0:	693b      	ldr	r3, [r7, #16]
   819d2:	635a      	str	r2, [r3, #52]	; 0x34
   819d4:	bf00      	nop
   819d6:	372c      	adds	r7, #44	; 0x2c
   819d8:	46bd      	mov	sp, r7
   819da:	bc80      	pop	{r7}
   819dc:	4770      	bx	lr
	...

000819e0 <main>:
#include "asf.h"
#include "comm.h"
#include "timing.h"

int main(void)
{
   819e0:	b580      	push	{r7, lr}
   819e2:	b082      	sub	sp, #8
   819e4:	af00      	add	r7, sp, #0
    sysclk_init();
   819e6:	4b3c      	ldr	r3, [pc, #240]	; (81ad8 <main+0xf8>)
   819e8:	4798      	blx	r3
    board_init();
   819ea:	4b3c      	ldr	r3, [pc, #240]	; (81adc <main+0xfc>)
   819ec:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   819ee:	4b3c      	ldr	r3, [pc, #240]	; (81ae0 <main+0x100>)
   819f0:	4798      	blx	r3
   819f2:	4602      	mov	r2, r0
   819f4:	4b3b      	ldr	r3, [pc, #236]	; (81ae4 <main+0x104>)
   819f6:	fba3 2302 	umull	r2, r3, r3, r2
   819fa:	099b      	lsrs	r3, r3, #6
   819fc:	4618      	mov	r0, r3
   819fe:	4b3a      	ldr	r3, [pc, #232]	; (81ae8 <main+0x108>)
   81a00:	4798      	blx	r3
    
    spi_init();
   81a02:	4b3a      	ldr	r3, [pc, #232]	; (81aec <main+0x10c>)
   81a04:	4798      	blx	r3
    
    adc_start(ADC);
   81a06:	483a      	ldr	r0, [pc, #232]	; (81af0 <main+0x110>)
   81a08:	4b3a      	ldr	r3, [pc, #232]	; (81af4 <main+0x114>)
   81a0a:	4798      	blx	r3
    
    for(int i = 0; i< 3; i++)
   81a0c:	2300      	movs	r3, #0
   81a0e:	607b      	str	r3, [r7, #4]
   81a10:	e028      	b.n	81a64 <main+0x84>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   81a12:	2101      	movs	r1, #1
   81a14:	2063      	movs	r0, #99	; 0x63
   81a16:	4b38      	ldr	r3, [pc, #224]	; (81af8 <main+0x118>)
   81a18:	4798      	blx	r3
        ioport_set_pin_level(LED_S1, 1);
   81a1a:	2101      	movs	r1, #1
   81a1c:	2062      	movs	r0, #98	; 0x62
   81a1e:	4b36      	ldr	r3, [pc, #216]	; (81af8 <main+0x118>)
   81a20:	4798      	blx	r3
        ioport_set_pin_level(LED_S2, 1);
   81a22:	2101      	movs	r1, #1
   81a24:	2061      	movs	r0, #97	; 0x61
   81a26:	4b34      	ldr	r3, [pc, #208]	; (81af8 <main+0x118>)
   81a28:	4798      	blx	r3
        ioport_set_pin_level(LED_S3, 1);
   81a2a:	2101      	movs	r1, #1
   81a2c:	2060      	movs	r0, #96	; 0x60
   81a2e:	4b32      	ldr	r3, [pc, #200]	; (81af8 <main+0x118>)
   81a30:	4798      	blx	r3
        mdelay(100);
   81a32:	2064      	movs	r0, #100	; 0x64
   81a34:	4b31      	ldr	r3, [pc, #196]	; (81afc <main+0x11c>)
   81a36:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   81a38:	2100      	movs	r1, #0
   81a3a:	2063      	movs	r0, #99	; 0x63
   81a3c:	4b2e      	ldr	r3, [pc, #184]	; (81af8 <main+0x118>)
   81a3e:	4798      	blx	r3
        ioport_set_pin_level(LED_S1, 0);
   81a40:	2100      	movs	r1, #0
   81a42:	2062      	movs	r0, #98	; 0x62
   81a44:	4b2c      	ldr	r3, [pc, #176]	; (81af8 <main+0x118>)
   81a46:	4798      	blx	r3
        ioport_set_pin_level(LED_S2, 0);
   81a48:	2100      	movs	r1, #0
   81a4a:	2061      	movs	r0, #97	; 0x61
   81a4c:	4b2a      	ldr	r3, [pc, #168]	; (81af8 <main+0x118>)
   81a4e:	4798      	blx	r3
        ioport_set_pin_level(LED_S3, 0);
   81a50:	2100      	movs	r1, #0
   81a52:	2060      	movs	r0, #96	; 0x60
   81a54:	4b28      	ldr	r3, [pc, #160]	; (81af8 <main+0x118>)
   81a56:	4798      	blx	r3
        mdelay(100);
   81a58:	2064      	movs	r0, #100	; 0x64
   81a5a:	4b28      	ldr	r3, [pc, #160]	; (81afc <main+0x11c>)
   81a5c:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   81a5e:	687b      	ldr	r3, [r7, #4]
   81a60:	3301      	adds	r3, #1
   81a62:	607b      	str	r3, [r7, #4]
   81a64:	687b      	ldr	r3, [r7, #4]
   81a66:	2b02      	cmp	r3, #2
   81a68:	ddd3      	ble.n	81a12 <main+0x32>
    }
    
    while (1)
    {
        update_battery();
   81a6a:	4b25      	ldr	r3, [pc, #148]	; (81b00 <main+0x120>)
   81a6c:	4798      	blx	r3
        
        if (mts.ibit.heartbeat)
   81a6e:	4b25      	ldr	r3, [pc, #148]	; (81b04 <main+0x124>)
   81a70:	781b      	ldrb	r3, [r3, #0]
   81a72:	f003 0301 	and.w	r3, r3, #1
   81a76:	b2db      	uxtb	r3, r3
   81a78:	2b00      	cmp	r3, #0
   81a7a:	d00d      	beq.n	81a98 <main+0xb8>
        {
            ioport_set_pin_level(LED_ONBOARD, 1);
   81a7c:	2101      	movs	r1, #1
   81a7e:	2063      	movs	r0, #99	; 0x63
   81a80:	4b1d      	ldr	r3, [pc, #116]	; (81af8 <main+0x118>)
   81a82:	4798      	blx	r3
            ioport_set_pin_level(LED_S1, 1);
   81a84:	2101      	movs	r1, #1
   81a86:	2062      	movs	r0, #98	; 0x62
   81a88:	4b1b      	ldr	r3, [pc, #108]	; (81af8 <main+0x118>)
   81a8a:	4798      	blx	r3
            stm.ibit.heartbeat = 1;
   81a8c:	4a1e      	ldr	r2, [pc, #120]	; (81b08 <main+0x128>)
   81a8e:	7813      	ldrb	r3, [r2, #0]
   81a90:	f043 0301 	orr.w	r3, r3, #1
   81a94:	7013      	strb	r3, [r2, #0]
   81a96:	e00c      	b.n	81ab2 <main+0xd2>
        }
        else
        {
            ioport_set_pin_level(LED_ONBOARD, 0);
   81a98:	2100      	movs	r1, #0
   81a9a:	2063      	movs	r0, #99	; 0x63
   81a9c:	4b16      	ldr	r3, [pc, #88]	; (81af8 <main+0x118>)
   81a9e:	4798      	blx	r3
            ioport_set_pin_level(LED_S1, 0);
   81aa0:	2100      	movs	r1, #0
   81aa2:	2062      	movs	r0, #98	; 0x62
   81aa4:	4b14      	ldr	r3, [pc, #80]	; (81af8 <main+0x118>)
   81aa6:	4798      	blx	r3
            stm.ibit.heartbeat = 0;
   81aa8:	4a17      	ldr	r2, [pc, #92]	; (81b08 <main+0x128>)
   81aaa:	7813      	ldrb	r3, [r2, #0]
   81aac:	f36f 0300 	bfc	r3, #0, #1
   81ab0:	7013      	strb	r3, [r2, #0]
        }
        
        if (mts.ibit.button)
   81ab2:	4b14      	ldr	r3, [pc, #80]	; (81b04 <main+0x124>)
   81ab4:	781b      	ldrb	r3, [r3, #0]
   81ab6:	f003 0302 	and.w	r3, r3, #2
   81aba:	b2db      	uxtb	r3, r3
   81abc:	2b00      	cmp	r3, #0
   81abe:	d004      	beq.n	81aca <main+0xea>
        {
            ioport_set_pin_level(LED_S2, 1);
   81ac0:	2101      	movs	r1, #1
   81ac2:	2061      	movs	r0, #97	; 0x61
   81ac4:	4b0c      	ldr	r3, [pc, #48]	; (81af8 <main+0x118>)
   81ac6:	4798      	blx	r3
   81ac8:	e003      	b.n	81ad2 <main+0xf2>
        }
        else
        {
            ioport_set_pin_level(LED_S2, 0);
   81aca:	2100      	movs	r1, #0
   81acc:	2061      	movs	r0, #97	; 0x61
   81ace:	4b0a      	ldr	r3, [pc, #40]	; (81af8 <main+0x118>)
   81ad0:	4798      	blx	r3
        }
        
        PrepareValuesToSend();
   81ad2:	4b0e      	ldr	r3, [pc, #56]	; (81b0c <main+0x12c>)
   81ad4:	4798      	blx	r3
        update_battery();
   81ad6:	e7c8      	b.n	81a6a <main+0x8a>
   81ad8:	00080b05 	.word	0x00080b05
   81adc:	0008111d 	.word	0x0008111d
   81ae0:	00081961 	.word	0x00081961
   81ae4:	10624dd3 	.word	0x10624dd3
   81ae8:	00081889 	.word	0x00081889
   81aec:	000815c5 	.word	0x000815c5
   81af0:	400c0000 	.word	0x400c0000
   81af4:	0008022f 	.word	0x0008022f
   81af8:	00081975 	.word	0x00081975
   81afc:	000802e5 	.word	0x000802e5
   81b00:	00080311 	.word	0x00080311
   81b04:	200705f0 	.word	0x200705f0
   81b08:	200705f4 	.word	0x200705f4
   81b0c:	000817fd 	.word	0x000817fd

00081b10 <__aeabi_drsub>:
   81b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81b14:	e002      	b.n	81b1c <__adddf3>
   81b16:	bf00      	nop

00081b18 <__aeabi_dsub>:
   81b18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081b1c <__adddf3>:
   81b1c:	b530      	push	{r4, r5, lr}
   81b1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   81b22:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81b26:	ea94 0f05 	teq	r4, r5
   81b2a:	bf08      	it	eq
   81b2c:	ea90 0f02 	teqeq	r0, r2
   81b30:	bf1f      	itttt	ne
   81b32:	ea54 0c00 	orrsne.w	ip, r4, r0
   81b36:	ea55 0c02 	orrsne.w	ip, r5, r2
   81b3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   81b3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81b42:	f000 80e2 	beq.w	81d0a <__adddf3+0x1ee>
   81b46:	ea4f 5454 	mov.w	r4, r4, lsr #21
   81b4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   81b4e:	bfb8      	it	lt
   81b50:	426d      	neglt	r5, r5
   81b52:	dd0c      	ble.n	81b6e <__adddf3+0x52>
   81b54:	442c      	add	r4, r5
   81b56:	ea80 0202 	eor.w	r2, r0, r2
   81b5a:	ea81 0303 	eor.w	r3, r1, r3
   81b5e:	ea82 0000 	eor.w	r0, r2, r0
   81b62:	ea83 0101 	eor.w	r1, r3, r1
   81b66:	ea80 0202 	eor.w	r2, r0, r2
   81b6a:	ea81 0303 	eor.w	r3, r1, r3
   81b6e:	2d36      	cmp	r5, #54	; 0x36
   81b70:	bf88      	it	hi
   81b72:	bd30      	pophi	{r4, r5, pc}
   81b74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81b78:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81b7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81b80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81b84:	d002      	beq.n	81b8c <__adddf3+0x70>
   81b86:	4240      	negs	r0, r0
   81b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81b8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   81b90:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81b94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   81b98:	d002      	beq.n	81ba0 <__adddf3+0x84>
   81b9a:	4252      	negs	r2, r2
   81b9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81ba0:	ea94 0f05 	teq	r4, r5
   81ba4:	f000 80a7 	beq.w	81cf6 <__adddf3+0x1da>
   81ba8:	f1a4 0401 	sub.w	r4, r4, #1
   81bac:	f1d5 0e20 	rsbs	lr, r5, #32
   81bb0:	db0d      	blt.n	81bce <__adddf3+0xb2>
   81bb2:	fa02 fc0e 	lsl.w	ip, r2, lr
   81bb6:	fa22 f205 	lsr.w	r2, r2, r5
   81bba:	1880      	adds	r0, r0, r2
   81bbc:	f141 0100 	adc.w	r1, r1, #0
   81bc0:	fa03 f20e 	lsl.w	r2, r3, lr
   81bc4:	1880      	adds	r0, r0, r2
   81bc6:	fa43 f305 	asr.w	r3, r3, r5
   81bca:	4159      	adcs	r1, r3
   81bcc:	e00e      	b.n	81bec <__adddf3+0xd0>
   81bce:	f1a5 0520 	sub.w	r5, r5, #32
   81bd2:	f10e 0e20 	add.w	lr, lr, #32
   81bd6:	2a01      	cmp	r2, #1
   81bd8:	fa03 fc0e 	lsl.w	ip, r3, lr
   81bdc:	bf28      	it	cs
   81bde:	f04c 0c02 	orrcs.w	ip, ip, #2
   81be2:	fa43 f305 	asr.w	r3, r3, r5
   81be6:	18c0      	adds	r0, r0, r3
   81be8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81bec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81bf0:	d507      	bpl.n	81c02 <__adddf3+0xe6>
   81bf2:	f04f 0e00 	mov.w	lr, #0
   81bf6:	f1dc 0c00 	rsbs	ip, ip, #0
   81bfa:	eb7e 0000 	sbcs.w	r0, lr, r0
   81bfe:	eb6e 0101 	sbc.w	r1, lr, r1
   81c02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81c06:	d31b      	bcc.n	81c40 <__adddf3+0x124>
   81c08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81c0c:	d30c      	bcc.n	81c28 <__adddf3+0x10c>
   81c0e:	0849      	lsrs	r1, r1, #1
   81c10:	ea5f 0030 	movs.w	r0, r0, rrx
   81c14:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81c18:	f104 0401 	add.w	r4, r4, #1
   81c1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81c20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81c24:	f080 809a 	bcs.w	81d5c <__adddf3+0x240>
   81c28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81c2c:	bf08      	it	eq
   81c2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81c32:	f150 0000 	adcs.w	r0, r0, #0
   81c36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81c3a:	ea41 0105 	orr.w	r1, r1, r5
   81c3e:	bd30      	pop	{r4, r5, pc}
   81c40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81c44:	4140      	adcs	r0, r0
   81c46:	eb41 0101 	adc.w	r1, r1, r1
   81c4a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81c4e:	f1a4 0401 	sub.w	r4, r4, #1
   81c52:	d1e9      	bne.n	81c28 <__adddf3+0x10c>
   81c54:	f091 0f00 	teq	r1, #0
   81c58:	bf04      	itt	eq
   81c5a:	4601      	moveq	r1, r0
   81c5c:	2000      	moveq	r0, #0
   81c5e:	fab1 f381 	clz	r3, r1
   81c62:	bf08      	it	eq
   81c64:	3320      	addeq	r3, #32
   81c66:	f1a3 030b 	sub.w	r3, r3, #11
   81c6a:	f1b3 0220 	subs.w	r2, r3, #32
   81c6e:	da0c      	bge.n	81c8a <__adddf3+0x16e>
   81c70:	320c      	adds	r2, #12
   81c72:	dd08      	ble.n	81c86 <__adddf3+0x16a>
   81c74:	f102 0c14 	add.w	ip, r2, #20
   81c78:	f1c2 020c 	rsb	r2, r2, #12
   81c7c:	fa01 f00c 	lsl.w	r0, r1, ip
   81c80:	fa21 f102 	lsr.w	r1, r1, r2
   81c84:	e00c      	b.n	81ca0 <__adddf3+0x184>
   81c86:	f102 0214 	add.w	r2, r2, #20
   81c8a:	bfd8      	it	le
   81c8c:	f1c2 0c20 	rsble	ip, r2, #32
   81c90:	fa01 f102 	lsl.w	r1, r1, r2
   81c94:	fa20 fc0c 	lsr.w	ip, r0, ip
   81c98:	bfdc      	itt	le
   81c9a:	ea41 010c 	orrle.w	r1, r1, ip
   81c9e:	4090      	lslle	r0, r2
   81ca0:	1ae4      	subs	r4, r4, r3
   81ca2:	bfa2      	ittt	ge
   81ca4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81ca8:	4329      	orrge	r1, r5
   81caa:	bd30      	popge	{r4, r5, pc}
   81cac:	ea6f 0404 	mvn.w	r4, r4
   81cb0:	3c1f      	subs	r4, #31
   81cb2:	da1c      	bge.n	81cee <__adddf3+0x1d2>
   81cb4:	340c      	adds	r4, #12
   81cb6:	dc0e      	bgt.n	81cd6 <__adddf3+0x1ba>
   81cb8:	f104 0414 	add.w	r4, r4, #20
   81cbc:	f1c4 0220 	rsb	r2, r4, #32
   81cc0:	fa20 f004 	lsr.w	r0, r0, r4
   81cc4:	fa01 f302 	lsl.w	r3, r1, r2
   81cc8:	ea40 0003 	orr.w	r0, r0, r3
   81ccc:	fa21 f304 	lsr.w	r3, r1, r4
   81cd0:	ea45 0103 	orr.w	r1, r5, r3
   81cd4:	bd30      	pop	{r4, r5, pc}
   81cd6:	f1c4 040c 	rsb	r4, r4, #12
   81cda:	f1c4 0220 	rsb	r2, r4, #32
   81cde:	fa20 f002 	lsr.w	r0, r0, r2
   81ce2:	fa01 f304 	lsl.w	r3, r1, r4
   81ce6:	ea40 0003 	orr.w	r0, r0, r3
   81cea:	4629      	mov	r1, r5
   81cec:	bd30      	pop	{r4, r5, pc}
   81cee:	fa21 f004 	lsr.w	r0, r1, r4
   81cf2:	4629      	mov	r1, r5
   81cf4:	bd30      	pop	{r4, r5, pc}
   81cf6:	f094 0f00 	teq	r4, #0
   81cfa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81cfe:	bf06      	itte	eq
   81d00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81d04:	3401      	addeq	r4, #1
   81d06:	3d01      	subne	r5, #1
   81d08:	e74e      	b.n	81ba8 <__adddf3+0x8c>
   81d0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81d0e:	bf18      	it	ne
   81d10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81d14:	d029      	beq.n	81d6a <__adddf3+0x24e>
   81d16:	ea94 0f05 	teq	r4, r5
   81d1a:	bf08      	it	eq
   81d1c:	ea90 0f02 	teqeq	r0, r2
   81d20:	d005      	beq.n	81d2e <__adddf3+0x212>
   81d22:	ea54 0c00 	orrs.w	ip, r4, r0
   81d26:	bf04      	itt	eq
   81d28:	4619      	moveq	r1, r3
   81d2a:	4610      	moveq	r0, r2
   81d2c:	bd30      	pop	{r4, r5, pc}
   81d2e:	ea91 0f03 	teq	r1, r3
   81d32:	bf1e      	ittt	ne
   81d34:	2100      	movne	r1, #0
   81d36:	2000      	movne	r0, #0
   81d38:	bd30      	popne	{r4, r5, pc}
   81d3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81d3e:	d105      	bne.n	81d4c <__adddf3+0x230>
   81d40:	0040      	lsls	r0, r0, #1
   81d42:	4149      	adcs	r1, r1
   81d44:	bf28      	it	cs
   81d46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81d4a:	bd30      	pop	{r4, r5, pc}
   81d4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81d50:	bf3c      	itt	cc
   81d52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81d56:	bd30      	popcc	{r4, r5, pc}
   81d58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81d5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81d60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81d64:	f04f 0000 	mov.w	r0, #0
   81d68:	bd30      	pop	{r4, r5, pc}
   81d6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81d6e:	bf1a      	itte	ne
   81d70:	4619      	movne	r1, r3
   81d72:	4610      	movne	r0, r2
   81d74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81d78:	bf1c      	itt	ne
   81d7a:	460b      	movne	r3, r1
   81d7c:	4602      	movne	r2, r0
   81d7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81d82:	bf06      	itte	eq
   81d84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81d88:	ea91 0f03 	teqeq	r1, r3
   81d8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81d90:	bd30      	pop	{r4, r5, pc}
   81d92:	bf00      	nop

00081d94 <__aeabi_ui2d>:
   81d94:	f090 0f00 	teq	r0, #0
   81d98:	bf04      	itt	eq
   81d9a:	2100      	moveq	r1, #0
   81d9c:	4770      	bxeq	lr
   81d9e:	b530      	push	{r4, r5, lr}
   81da0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81da4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81da8:	f04f 0500 	mov.w	r5, #0
   81dac:	f04f 0100 	mov.w	r1, #0
   81db0:	e750      	b.n	81c54 <__adddf3+0x138>
   81db2:	bf00      	nop

00081db4 <__aeabi_i2d>:
   81db4:	f090 0f00 	teq	r0, #0
   81db8:	bf04      	itt	eq
   81dba:	2100      	moveq	r1, #0
   81dbc:	4770      	bxeq	lr
   81dbe:	b530      	push	{r4, r5, lr}
   81dc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81dc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81dc8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81dcc:	bf48      	it	mi
   81dce:	4240      	negmi	r0, r0
   81dd0:	f04f 0100 	mov.w	r1, #0
   81dd4:	e73e      	b.n	81c54 <__adddf3+0x138>
   81dd6:	bf00      	nop

00081dd8 <__aeabi_f2d>:
   81dd8:	0042      	lsls	r2, r0, #1
   81dda:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81dde:	ea4f 0131 	mov.w	r1, r1, rrx
   81de2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81de6:	bf1f      	itttt	ne
   81de8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81dec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81df0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81df4:	4770      	bxne	lr
   81df6:	f092 0f00 	teq	r2, #0
   81dfa:	bf14      	ite	ne
   81dfc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81e00:	4770      	bxeq	lr
   81e02:	b530      	push	{r4, r5, lr}
   81e04:	f44f 7460 	mov.w	r4, #896	; 0x380
   81e08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81e0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81e10:	e720      	b.n	81c54 <__adddf3+0x138>
   81e12:	bf00      	nop

00081e14 <__aeabi_ul2d>:
   81e14:	ea50 0201 	orrs.w	r2, r0, r1
   81e18:	bf08      	it	eq
   81e1a:	4770      	bxeq	lr
   81e1c:	b530      	push	{r4, r5, lr}
   81e1e:	f04f 0500 	mov.w	r5, #0
   81e22:	e00a      	b.n	81e3a <__aeabi_l2d+0x16>

00081e24 <__aeabi_l2d>:
   81e24:	ea50 0201 	orrs.w	r2, r0, r1
   81e28:	bf08      	it	eq
   81e2a:	4770      	bxeq	lr
   81e2c:	b530      	push	{r4, r5, lr}
   81e2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81e32:	d502      	bpl.n	81e3a <__aeabi_l2d+0x16>
   81e34:	4240      	negs	r0, r0
   81e36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81e3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81e3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81e42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81e46:	f43f aedc 	beq.w	81c02 <__adddf3+0xe6>
   81e4a:	f04f 0203 	mov.w	r2, #3
   81e4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81e52:	bf18      	it	ne
   81e54:	3203      	addne	r2, #3
   81e56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81e5a:	bf18      	it	ne
   81e5c:	3203      	addne	r2, #3
   81e5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81e62:	f1c2 0320 	rsb	r3, r2, #32
   81e66:	fa00 fc03 	lsl.w	ip, r0, r3
   81e6a:	fa20 f002 	lsr.w	r0, r0, r2
   81e6e:	fa01 fe03 	lsl.w	lr, r1, r3
   81e72:	ea40 000e 	orr.w	r0, r0, lr
   81e76:	fa21 f102 	lsr.w	r1, r1, r2
   81e7a:	4414      	add	r4, r2
   81e7c:	e6c1      	b.n	81c02 <__adddf3+0xe6>
   81e7e:	bf00      	nop

00081e80 <__aeabi_dmul>:
   81e80:	b570      	push	{r4, r5, r6, lr}
   81e82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81e86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81e8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81e8e:	bf1d      	ittte	ne
   81e90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81e94:	ea94 0f0c 	teqne	r4, ip
   81e98:	ea95 0f0c 	teqne	r5, ip
   81e9c:	f000 f8de 	bleq	8205c <__aeabi_dmul+0x1dc>
   81ea0:	442c      	add	r4, r5
   81ea2:	ea81 0603 	eor.w	r6, r1, r3
   81ea6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81eaa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81eae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81eb2:	bf18      	it	ne
   81eb4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81eb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81ebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81ec0:	d038      	beq.n	81f34 <__aeabi_dmul+0xb4>
   81ec2:	fba0 ce02 	umull	ip, lr, r0, r2
   81ec6:	f04f 0500 	mov.w	r5, #0
   81eca:	fbe1 e502 	umlal	lr, r5, r1, r2
   81ece:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81ed2:	fbe0 e503 	umlal	lr, r5, r0, r3
   81ed6:	f04f 0600 	mov.w	r6, #0
   81eda:	fbe1 5603 	umlal	r5, r6, r1, r3
   81ede:	f09c 0f00 	teq	ip, #0
   81ee2:	bf18      	it	ne
   81ee4:	f04e 0e01 	orrne.w	lr, lr, #1
   81ee8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81eec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81ef0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81ef4:	d204      	bcs.n	81f00 <__aeabi_dmul+0x80>
   81ef6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81efa:	416d      	adcs	r5, r5
   81efc:	eb46 0606 	adc.w	r6, r6, r6
   81f00:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81f04:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81f08:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81f0c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81f10:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81f14:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81f18:	bf88      	it	hi
   81f1a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81f1e:	d81e      	bhi.n	81f5e <__aeabi_dmul+0xde>
   81f20:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81f24:	bf08      	it	eq
   81f26:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81f2a:	f150 0000 	adcs.w	r0, r0, #0
   81f2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81f32:	bd70      	pop	{r4, r5, r6, pc}
   81f34:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81f38:	ea46 0101 	orr.w	r1, r6, r1
   81f3c:	ea40 0002 	orr.w	r0, r0, r2
   81f40:	ea81 0103 	eor.w	r1, r1, r3
   81f44:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81f48:	bfc2      	ittt	gt
   81f4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   81f4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81f52:	bd70      	popgt	{r4, r5, r6, pc}
   81f54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81f58:	f04f 0e00 	mov.w	lr, #0
   81f5c:	3c01      	subs	r4, #1
   81f5e:	f300 80ab 	bgt.w	820b8 <__aeabi_dmul+0x238>
   81f62:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81f66:	bfde      	ittt	le
   81f68:	2000      	movle	r0, #0
   81f6a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81f6e:	bd70      	pople	{r4, r5, r6, pc}
   81f70:	f1c4 0400 	rsb	r4, r4, #0
   81f74:	3c20      	subs	r4, #32
   81f76:	da35      	bge.n	81fe4 <__aeabi_dmul+0x164>
   81f78:	340c      	adds	r4, #12
   81f7a:	dc1b      	bgt.n	81fb4 <__aeabi_dmul+0x134>
   81f7c:	f104 0414 	add.w	r4, r4, #20
   81f80:	f1c4 0520 	rsb	r5, r4, #32
   81f84:	fa00 f305 	lsl.w	r3, r0, r5
   81f88:	fa20 f004 	lsr.w	r0, r0, r4
   81f8c:	fa01 f205 	lsl.w	r2, r1, r5
   81f90:	ea40 0002 	orr.w	r0, r0, r2
   81f94:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81f98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81f9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81fa0:	fa21 f604 	lsr.w	r6, r1, r4
   81fa4:	eb42 0106 	adc.w	r1, r2, r6
   81fa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81fac:	bf08      	it	eq
   81fae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81fb2:	bd70      	pop	{r4, r5, r6, pc}
   81fb4:	f1c4 040c 	rsb	r4, r4, #12
   81fb8:	f1c4 0520 	rsb	r5, r4, #32
   81fbc:	fa00 f304 	lsl.w	r3, r0, r4
   81fc0:	fa20 f005 	lsr.w	r0, r0, r5
   81fc4:	fa01 f204 	lsl.w	r2, r1, r4
   81fc8:	ea40 0002 	orr.w	r0, r0, r2
   81fcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81fd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81fd4:	f141 0100 	adc.w	r1, r1, #0
   81fd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81fdc:	bf08      	it	eq
   81fde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81fe2:	bd70      	pop	{r4, r5, r6, pc}
   81fe4:	f1c4 0520 	rsb	r5, r4, #32
   81fe8:	fa00 f205 	lsl.w	r2, r0, r5
   81fec:	ea4e 0e02 	orr.w	lr, lr, r2
   81ff0:	fa20 f304 	lsr.w	r3, r0, r4
   81ff4:	fa01 f205 	lsl.w	r2, r1, r5
   81ff8:	ea43 0302 	orr.w	r3, r3, r2
   81ffc:	fa21 f004 	lsr.w	r0, r1, r4
   82000:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82004:	fa21 f204 	lsr.w	r2, r1, r4
   82008:	ea20 0002 	bic.w	r0, r0, r2
   8200c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   82010:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82014:	bf08      	it	eq
   82016:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8201a:	bd70      	pop	{r4, r5, r6, pc}
   8201c:	f094 0f00 	teq	r4, #0
   82020:	d10f      	bne.n	82042 <__aeabi_dmul+0x1c2>
   82022:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   82026:	0040      	lsls	r0, r0, #1
   82028:	eb41 0101 	adc.w	r1, r1, r1
   8202c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82030:	bf08      	it	eq
   82032:	3c01      	subeq	r4, #1
   82034:	d0f7      	beq.n	82026 <__aeabi_dmul+0x1a6>
   82036:	ea41 0106 	orr.w	r1, r1, r6
   8203a:	f095 0f00 	teq	r5, #0
   8203e:	bf18      	it	ne
   82040:	4770      	bxne	lr
   82042:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   82046:	0052      	lsls	r2, r2, #1
   82048:	eb43 0303 	adc.w	r3, r3, r3
   8204c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   82050:	bf08      	it	eq
   82052:	3d01      	subeq	r5, #1
   82054:	d0f7      	beq.n	82046 <__aeabi_dmul+0x1c6>
   82056:	ea43 0306 	orr.w	r3, r3, r6
   8205a:	4770      	bx	lr
   8205c:	ea94 0f0c 	teq	r4, ip
   82060:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82064:	bf18      	it	ne
   82066:	ea95 0f0c 	teqne	r5, ip
   8206a:	d00c      	beq.n	82086 <__aeabi_dmul+0x206>
   8206c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82070:	bf18      	it	ne
   82072:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82076:	d1d1      	bne.n	8201c <__aeabi_dmul+0x19c>
   82078:	ea81 0103 	eor.w	r1, r1, r3
   8207c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82080:	f04f 0000 	mov.w	r0, #0
   82084:	bd70      	pop	{r4, r5, r6, pc}
   82086:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8208a:	bf06      	itte	eq
   8208c:	4610      	moveq	r0, r2
   8208e:	4619      	moveq	r1, r3
   82090:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82094:	d019      	beq.n	820ca <__aeabi_dmul+0x24a>
   82096:	ea94 0f0c 	teq	r4, ip
   8209a:	d102      	bne.n	820a2 <__aeabi_dmul+0x222>
   8209c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   820a0:	d113      	bne.n	820ca <__aeabi_dmul+0x24a>
   820a2:	ea95 0f0c 	teq	r5, ip
   820a6:	d105      	bne.n	820b4 <__aeabi_dmul+0x234>
   820a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   820ac:	bf1c      	itt	ne
   820ae:	4610      	movne	r0, r2
   820b0:	4619      	movne	r1, r3
   820b2:	d10a      	bne.n	820ca <__aeabi_dmul+0x24a>
   820b4:	ea81 0103 	eor.w	r1, r1, r3
   820b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   820bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   820c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   820c4:	f04f 0000 	mov.w	r0, #0
   820c8:	bd70      	pop	{r4, r5, r6, pc}
   820ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   820ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   820d2:	bd70      	pop	{r4, r5, r6, pc}

000820d4 <__aeabi_ddiv>:
   820d4:	b570      	push	{r4, r5, r6, lr}
   820d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   820da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   820de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   820e2:	bf1d      	ittte	ne
   820e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   820e8:	ea94 0f0c 	teqne	r4, ip
   820ec:	ea95 0f0c 	teqne	r5, ip
   820f0:	f000 f8a7 	bleq	82242 <__aeabi_ddiv+0x16e>
   820f4:	eba4 0405 	sub.w	r4, r4, r5
   820f8:	ea81 0e03 	eor.w	lr, r1, r3
   820fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82100:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82104:	f000 8088 	beq.w	82218 <__aeabi_ddiv+0x144>
   82108:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8210c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   82110:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   82114:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   82118:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8211c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   82120:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   82124:	ea4f 2600 	mov.w	r6, r0, lsl #8
   82128:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8212c:	429d      	cmp	r5, r3
   8212e:	bf08      	it	eq
   82130:	4296      	cmpeq	r6, r2
   82132:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   82136:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8213a:	d202      	bcs.n	82142 <__aeabi_ddiv+0x6e>
   8213c:	085b      	lsrs	r3, r3, #1
   8213e:	ea4f 0232 	mov.w	r2, r2, rrx
   82142:	1ab6      	subs	r6, r6, r2
   82144:	eb65 0503 	sbc.w	r5, r5, r3
   82148:	085b      	lsrs	r3, r3, #1
   8214a:	ea4f 0232 	mov.w	r2, r2, rrx
   8214e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   82152:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   82156:	ebb6 0e02 	subs.w	lr, r6, r2
   8215a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8215e:	bf22      	ittt	cs
   82160:	1ab6      	subcs	r6, r6, r2
   82162:	4675      	movcs	r5, lr
   82164:	ea40 000c 	orrcs.w	r0, r0, ip
   82168:	085b      	lsrs	r3, r3, #1
   8216a:	ea4f 0232 	mov.w	r2, r2, rrx
   8216e:	ebb6 0e02 	subs.w	lr, r6, r2
   82172:	eb75 0e03 	sbcs.w	lr, r5, r3
   82176:	bf22      	ittt	cs
   82178:	1ab6      	subcs	r6, r6, r2
   8217a:	4675      	movcs	r5, lr
   8217c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82180:	085b      	lsrs	r3, r3, #1
   82182:	ea4f 0232 	mov.w	r2, r2, rrx
   82186:	ebb6 0e02 	subs.w	lr, r6, r2
   8218a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8218e:	bf22      	ittt	cs
   82190:	1ab6      	subcs	r6, r6, r2
   82192:	4675      	movcs	r5, lr
   82194:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82198:	085b      	lsrs	r3, r3, #1
   8219a:	ea4f 0232 	mov.w	r2, r2, rrx
   8219e:	ebb6 0e02 	subs.w	lr, r6, r2
   821a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   821a6:	bf22      	ittt	cs
   821a8:	1ab6      	subcs	r6, r6, r2
   821aa:	4675      	movcs	r5, lr
   821ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   821b0:	ea55 0e06 	orrs.w	lr, r5, r6
   821b4:	d018      	beq.n	821e8 <__aeabi_ddiv+0x114>
   821b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   821ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   821be:	ea4f 1606 	mov.w	r6, r6, lsl #4
   821c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   821c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   821ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   821ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   821d2:	d1c0      	bne.n	82156 <__aeabi_ddiv+0x82>
   821d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   821d8:	d10b      	bne.n	821f2 <__aeabi_ddiv+0x11e>
   821da:	ea41 0100 	orr.w	r1, r1, r0
   821de:	f04f 0000 	mov.w	r0, #0
   821e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   821e6:	e7b6      	b.n	82156 <__aeabi_ddiv+0x82>
   821e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   821ec:	bf04      	itt	eq
   821ee:	4301      	orreq	r1, r0
   821f0:	2000      	moveq	r0, #0
   821f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   821f6:	bf88      	it	hi
   821f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   821fc:	f63f aeaf 	bhi.w	81f5e <__aeabi_dmul+0xde>
   82200:	ebb5 0c03 	subs.w	ip, r5, r3
   82204:	bf04      	itt	eq
   82206:	ebb6 0c02 	subseq.w	ip, r6, r2
   8220a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8220e:	f150 0000 	adcs.w	r0, r0, #0
   82212:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82216:	bd70      	pop	{r4, r5, r6, pc}
   82218:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8221c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   82220:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   82224:	bfc2      	ittt	gt
   82226:	ebd4 050c 	rsbsgt	r5, r4, ip
   8222a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8222e:	bd70      	popgt	{r4, r5, r6, pc}
   82230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82234:	f04f 0e00 	mov.w	lr, #0
   82238:	3c01      	subs	r4, #1
   8223a:	e690      	b.n	81f5e <__aeabi_dmul+0xde>
   8223c:	ea45 0e06 	orr.w	lr, r5, r6
   82240:	e68d      	b.n	81f5e <__aeabi_dmul+0xde>
   82242:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82246:	ea94 0f0c 	teq	r4, ip
   8224a:	bf08      	it	eq
   8224c:	ea95 0f0c 	teqeq	r5, ip
   82250:	f43f af3b 	beq.w	820ca <__aeabi_dmul+0x24a>
   82254:	ea94 0f0c 	teq	r4, ip
   82258:	d10a      	bne.n	82270 <__aeabi_ddiv+0x19c>
   8225a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8225e:	f47f af34 	bne.w	820ca <__aeabi_dmul+0x24a>
   82262:	ea95 0f0c 	teq	r5, ip
   82266:	f47f af25 	bne.w	820b4 <__aeabi_dmul+0x234>
   8226a:	4610      	mov	r0, r2
   8226c:	4619      	mov	r1, r3
   8226e:	e72c      	b.n	820ca <__aeabi_dmul+0x24a>
   82270:	ea95 0f0c 	teq	r5, ip
   82274:	d106      	bne.n	82284 <__aeabi_ddiv+0x1b0>
   82276:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8227a:	f43f aefd 	beq.w	82078 <__aeabi_dmul+0x1f8>
   8227e:	4610      	mov	r0, r2
   82280:	4619      	mov	r1, r3
   82282:	e722      	b.n	820ca <__aeabi_dmul+0x24a>
   82284:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82288:	bf18      	it	ne
   8228a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8228e:	f47f aec5 	bne.w	8201c <__aeabi_dmul+0x19c>
   82292:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   82296:	f47f af0d 	bne.w	820b4 <__aeabi_dmul+0x234>
   8229a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8229e:	f47f aeeb 	bne.w	82078 <__aeabi_dmul+0x1f8>
   822a2:	e712      	b.n	820ca <__aeabi_dmul+0x24a>

000822a4 <__aeabi_d2uiz>:
   822a4:	004a      	lsls	r2, r1, #1
   822a6:	d211      	bcs.n	822cc <__aeabi_d2uiz+0x28>
   822a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   822ac:	d211      	bcs.n	822d2 <__aeabi_d2uiz+0x2e>
   822ae:	d50d      	bpl.n	822cc <__aeabi_d2uiz+0x28>
   822b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   822b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   822b8:	d40e      	bmi.n	822d8 <__aeabi_d2uiz+0x34>
   822ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   822be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   822c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   822c6:	fa23 f002 	lsr.w	r0, r3, r2
   822ca:	4770      	bx	lr
   822cc:	f04f 0000 	mov.w	r0, #0
   822d0:	4770      	bx	lr
   822d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   822d6:	d102      	bne.n	822de <__aeabi_d2uiz+0x3a>
   822d8:	f04f 30ff 	mov.w	r0, #4294967295
   822dc:	4770      	bx	lr
   822de:	f04f 0000 	mov.w	r0, #0
   822e2:	4770      	bx	lr

000822e4 <__aeabi_d2f>:
   822e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   822e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   822ec:	bf24      	itt	cs
   822ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   822f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   822f6:	d90d      	bls.n	82314 <__aeabi_d2f+0x30>
   822f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   822fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   82300:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   82304:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   82308:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   8230c:	bf08      	it	eq
   8230e:	f020 0001 	biceq.w	r0, r0, #1
   82312:	4770      	bx	lr
   82314:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   82318:	d121      	bne.n	8235e <__aeabi_d2f+0x7a>
   8231a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   8231e:	bfbc      	itt	lt
   82320:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   82324:	4770      	bxlt	lr
   82326:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8232a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   8232e:	f1c2 0218 	rsb	r2, r2, #24
   82332:	f1c2 0c20 	rsb	ip, r2, #32
   82336:	fa10 f30c 	lsls.w	r3, r0, ip
   8233a:	fa20 f002 	lsr.w	r0, r0, r2
   8233e:	bf18      	it	ne
   82340:	f040 0001 	orrne.w	r0, r0, #1
   82344:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   82348:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   8234c:	fa03 fc0c 	lsl.w	ip, r3, ip
   82350:	ea40 000c 	orr.w	r0, r0, ip
   82354:	fa23 f302 	lsr.w	r3, r3, r2
   82358:	ea4f 0343 	mov.w	r3, r3, lsl #1
   8235c:	e7cc      	b.n	822f8 <__aeabi_d2f+0x14>
   8235e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   82362:	d107      	bne.n	82374 <__aeabi_d2f+0x90>
   82364:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   82368:	bf1e      	ittt	ne
   8236a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8236e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   82372:	4770      	bxne	lr
   82374:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   82378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8237c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82380:	4770      	bx	lr
   82382:	bf00      	nop

00082384 <__aeabi_frsub>:
   82384:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   82388:	e002      	b.n	82390 <__addsf3>
   8238a:	bf00      	nop

0008238c <__aeabi_fsub>:
   8238c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00082390 <__addsf3>:
   82390:	0042      	lsls	r2, r0, #1
   82392:	bf1f      	itttt	ne
   82394:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   82398:	ea92 0f03 	teqne	r2, r3
   8239c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   823a0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   823a4:	d06a      	beq.n	8247c <__addsf3+0xec>
   823a6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   823aa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   823ae:	bfc1      	itttt	gt
   823b0:	18d2      	addgt	r2, r2, r3
   823b2:	4041      	eorgt	r1, r0
   823b4:	4048      	eorgt	r0, r1
   823b6:	4041      	eorgt	r1, r0
   823b8:	bfb8      	it	lt
   823ba:	425b      	neglt	r3, r3
   823bc:	2b19      	cmp	r3, #25
   823be:	bf88      	it	hi
   823c0:	4770      	bxhi	lr
   823c2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   823c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   823ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   823ce:	bf18      	it	ne
   823d0:	4240      	negne	r0, r0
   823d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   823d6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   823da:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   823de:	bf18      	it	ne
   823e0:	4249      	negne	r1, r1
   823e2:	ea92 0f03 	teq	r2, r3
   823e6:	d03f      	beq.n	82468 <__addsf3+0xd8>
   823e8:	f1a2 0201 	sub.w	r2, r2, #1
   823ec:	fa41 fc03 	asr.w	ip, r1, r3
   823f0:	eb10 000c 	adds.w	r0, r0, ip
   823f4:	f1c3 0320 	rsb	r3, r3, #32
   823f8:	fa01 f103 	lsl.w	r1, r1, r3
   823fc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82400:	d502      	bpl.n	82408 <__addsf3+0x78>
   82402:	4249      	negs	r1, r1
   82404:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   82408:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   8240c:	d313      	bcc.n	82436 <__addsf3+0xa6>
   8240e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   82412:	d306      	bcc.n	82422 <__addsf3+0x92>
   82414:	0840      	lsrs	r0, r0, #1
   82416:	ea4f 0131 	mov.w	r1, r1, rrx
   8241a:	f102 0201 	add.w	r2, r2, #1
   8241e:	2afe      	cmp	r2, #254	; 0xfe
   82420:	d251      	bcs.n	824c6 <__addsf3+0x136>
   82422:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   82426:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8242a:	bf08      	it	eq
   8242c:	f020 0001 	biceq.w	r0, r0, #1
   82430:	ea40 0003 	orr.w	r0, r0, r3
   82434:	4770      	bx	lr
   82436:	0049      	lsls	r1, r1, #1
   82438:	eb40 0000 	adc.w	r0, r0, r0
   8243c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   82440:	f1a2 0201 	sub.w	r2, r2, #1
   82444:	d1ed      	bne.n	82422 <__addsf3+0x92>
   82446:	fab0 fc80 	clz	ip, r0
   8244a:	f1ac 0c08 	sub.w	ip, ip, #8
   8244e:	ebb2 020c 	subs.w	r2, r2, ip
   82452:	fa00 f00c 	lsl.w	r0, r0, ip
   82456:	bfaa      	itet	ge
   82458:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   8245c:	4252      	neglt	r2, r2
   8245e:	4318      	orrge	r0, r3
   82460:	bfbc      	itt	lt
   82462:	40d0      	lsrlt	r0, r2
   82464:	4318      	orrlt	r0, r3
   82466:	4770      	bx	lr
   82468:	f092 0f00 	teq	r2, #0
   8246c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   82470:	bf06      	itte	eq
   82472:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   82476:	3201      	addeq	r2, #1
   82478:	3b01      	subne	r3, #1
   8247a:	e7b5      	b.n	823e8 <__addsf3+0x58>
   8247c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82480:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82484:	bf18      	it	ne
   82486:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8248a:	d021      	beq.n	824d0 <__addsf3+0x140>
   8248c:	ea92 0f03 	teq	r2, r3
   82490:	d004      	beq.n	8249c <__addsf3+0x10c>
   82492:	f092 0f00 	teq	r2, #0
   82496:	bf08      	it	eq
   82498:	4608      	moveq	r0, r1
   8249a:	4770      	bx	lr
   8249c:	ea90 0f01 	teq	r0, r1
   824a0:	bf1c      	itt	ne
   824a2:	2000      	movne	r0, #0
   824a4:	4770      	bxne	lr
   824a6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   824aa:	d104      	bne.n	824b6 <__addsf3+0x126>
   824ac:	0040      	lsls	r0, r0, #1
   824ae:	bf28      	it	cs
   824b0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   824b4:	4770      	bx	lr
   824b6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   824ba:	bf3c      	itt	cc
   824bc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   824c0:	4770      	bxcc	lr
   824c2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   824c6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   824ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   824ce:	4770      	bx	lr
   824d0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   824d4:	bf16      	itet	ne
   824d6:	4608      	movne	r0, r1
   824d8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   824dc:	4601      	movne	r1, r0
   824de:	0242      	lsls	r2, r0, #9
   824e0:	bf06      	itte	eq
   824e2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   824e6:	ea90 0f01 	teqeq	r0, r1
   824ea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   824ee:	4770      	bx	lr

000824f0 <__aeabi_ui2f>:
   824f0:	f04f 0300 	mov.w	r3, #0
   824f4:	e004      	b.n	82500 <__aeabi_i2f+0x8>
   824f6:	bf00      	nop

000824f8 <__aeabi_i2f>:
   824f8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   824fc:	bf48      	it	mi
   824fe:	4240      	negmi	r0, r0
   82500:	ea5f 0c00 	movs.w	ip, r0
   82504:	bf08      	it	eq
   82506:	4770      	bxeq	lr
   82508:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   8250c:	4601      	mov	r1, r0
   8250e:	f04f 0000 	mov.w	r0, #0
   82512:	e01c      	b.n	8254e <__aeabi_l2f+0x2a>

00082514 <__aeabi_ul2f>:
   82514:	ea50 0201 	orrs.w	r2, r0, r1
   82518:	bf08      	it	eq
   8251a:	4770      	bxeq	lr
   8251c:	f04f 0300 	mov.w	r3, #0
   82520:	e00a      	b.n	82538 <__aeabi_l2f+0x14>
   82522:	bf00      	nop

00082524 <__aeabi_l2f>:
   82524:	ea50 0201 	orrs.w	r2, r0, r1
   82528:	bf08      	it	eq
   8252a:	4770      	bxeq	lr
   8252c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   82530:	d502      	bpl.n	82538 <__aeabi_l2f+0x14>
   82532:	4240      	negs	r0, r0
   82534:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82538:	ea5f 0c01 	movs.w	ip, r1
   8253c:	bf02      	ittt	eq
   8253e:	4684      	moveq	ip, r0
   82540:	4601      	moveq	r1, r0
   82542:	2000      	moveq	r0, #0
   82544:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   82548:	bf08      	it	eq
   8254a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8254e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   82552:	fabc f28c 	clz	r2, ip
   82556:	3a08      	subs	r2, #8
   82558:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8255c:	db10      	blt.n	82580 <__aeabi_l2f+0x5c>
   8255e:	fa01 fc02 	lsl.w	ip, r1, r2
   82562:	4463      	add	r3, ip
   82564:	fa00 fc02 	lsl.w	ip, r0, r2
   82568:	f1c2 0220 	rsb	r2, r2, #32
   8256c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82570:	fa20 f202 	lsr.w	r2, r0, r2
   82574:	eb43 0002 	adc.w	r0, r3, r2
   82578:	bf08      	it	eq
   8257a:	f020 0001 	biceq.w	r0, r0, #1
   8257e:	4770      	bx	lr
   82580:	f102 0220 	add.w	r2, r2, #32
   82584:	fa01 fc02 	lsl.w	ip, r1, r2
   82588:	f1c2 0220 	rsb	r2, r2, #32
   8258c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   82590:	fa21 f202 	lsr.w	r2, r1, r2
   82594:	eb43 0002 	adc.w	r0, r3, r2
   82598:	bf08      	it	eq
   8259a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8259e:	4770      	bx	lr

000825a0 <__aeabi_fmul>:
   825a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   825a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   825a8:	bf1e      	ittt	ne
   825aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   825ae:	ea92 0f0c 	teqne	r2, ip
   825b2:	ea93 0f0c 	teqne	r3, ip
   825b6:	d06f      	beq.n	82698 <__aeabi_fmul+0xf8>
   825b8:	441a      	add	r2, r3
   825ba:	ea80 0c01 	eor.w	ip, r0, r1
   825be:	0240      	lsls	r0, r0, #9
   825c0:	bf18      	it	ne
   825c2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   825c6:	d01e      	beq.n	82606 <__aeabi_fmul+0x66>
   825c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   825cc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   825d0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   825d4:	fba0 3101 	umull	r3, r1, r0, r1
   825d8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   825dc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   825e0:	bf3e      	ittt	cc
   825e2:	0049      	lslcc	r1, r1, #1
   825e4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   825e8:	005b      	lslcc	r3, r3, #1
   825ea:	ea40 0001 	orr.w	r0, r0, r1
   825ee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   825f2:	2afd      	cmp	r2, #253	; 0xfd
   825f4:	d81d      	bhi.n	82632 <__aeabi_fmul+0x92>
   825f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   825fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   825fe:	bf08      	it	eq
   82600:	f020 0001 	biceq.w	r0, r0, #1
   82604:	4770      	bx	lr
   82606:	f090 0f00 	teq	r0, #0
   8260a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8260e:	bf08      	it	eq
   82610:	0249      	lsleq	r1, r1, #9
   82612:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   82616:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   8261a:	3a7f      	subs	r2, #127	; 0x7f
   8261c:	bfc2      	ittt	gt
   8261e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   82622:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   82626:	4770      	bxgt	lr
   82628:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8262c:	f04f 0300 	mov.w	r3, #0
   82630:	3a01      	subs	r2, #1
   82632:	dc5d      	bgt.n	826f0 <__aeabi_fmul+0x150>
   82634:	f112 0f19 	cmn.w	r2, #25
   82638:	bfdc      	itt	le
   8263a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8263e:	4770      	bxle	lr
   82640:	f1c2 0200 	rsb	r2, r2, #0
   82644:	0041      	lsls	r1, r0, #1
   82646:	fa21 f102 	lsr.w	r1, r1, r2
   8264a:	f1c2 0220 	rsb	r2, r2, #32
   8264e:	fa00 fc02 	lsl.w	ip, r0, r2
   82652:	ea5f 0031 	movs.w	r0, r1, rrx
   82656:	f140 0000 	adc.w	r0, r0, #0
   8265a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8265e:	bf08      	it	eq
   82660:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   82664:	4770      	bx	lr
   82666:	f092 0f00 	teq	r2, #0
   8266a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8266e:	bf02      	ittt	eq
   82670:	0040      	lsleq	r0, r0, #1
   82672:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   82676:	3a01      	subeq	r2, #1
   82678:	d0f9      	beq.n	8266e <__aeabi_fmul+0xce>
   8267a:	ea40 000c 	orr.w	r0, r0, ip
   8267e:	f093 0f00 	teq	r3, #0
   82682:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82686:	bf02      	ittt	eq
   82688:	0049      	lsleq	r1, r1, #1
   8268a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8268e:	3b01      	subeq	r3, #1
   82690:	d0f9      	beq.n	82686 <__aeabi_fmul+0xe6>
   82692:	ea41 010c 	orr.w	r1, r1, ip
   82696:	e78f      	b.n	825b8 <__aeabi_fmul+0x18>
   82698:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8269c:	ea92 0f0c 	teq	r2, ip
   826a0:	bf18      	it	ne
   826a2:	ea93 0f0c 	teqne	r3, ip
   826a6:	d00a      	beq.n	826be <__aeabi_fmul+0x11e>
   826a8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   826ac:	bf18      	it	ne
   826ae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   826b2:	d1d8      	bne.n	82666 <__aeabi_fmul+0xc6>
   826b4:	ea80 0001 	eor.w	r0, r0, r1
   826b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   826bc:	4770      	bx	lr
   826be:	f090 0f00 	teq	r0, #0
   826c2:	bf17      	itett	ne
   826c4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   826c8:	4608      	moveq	r0, r1
   826ca:	f091 0f00 	teqne	r1, #0
   826ce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   826d2:	d014      	beq.n	826fe <__aeabi_fmul+0x15e>
   826d4:	ea92 0f0c 	teq	r2, ip
   826d8:	d101      	bne.n	826de <__aeabi_fmul+0x13e>
   826da:	0242      	lsls	r2, r0, #9
   826dc:	d10f      	bne.n	826fe <__aeabi_fmul+0x15e>
   826de:	ea93 0f0c 	teq	r3, ip
   826e2:	d103      	bne.n	826ec <__aeabi_fmul+0x14c>
   826e4:	024b      	lsls	r3, r1, #9
   826e6:	bf18      	it	ne
   826e8:	4608      	movne	r0, r1
   826ea:	d108      	bne.n	826fe <__aeabi_fmul+0x15e>
   826ec:	ea80 0001 	eor.w	r0, r0, r1
   826f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   826f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   826f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   826fc:	4770      	bx	lr
   826fe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82702:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   82706:	4770      	bx	lr

00082708 <__aeabi_fdiv>:
   82708:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8270c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   82710:	bf1e      	ittt	ne
   82712:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   82716:	ea92 0f0c 	teqne	r2, ip
   8271a:	ea93 0f0c 	teqne	r3, ip
   8271e:	d069      	beq.n	827f4 <__aeabi_fdiv+0xec>
   82720:	eba2 0203 	sub.w	r2, r2, r3
   82724:	ea80 0c01 	eor.w	ip, r0, r1
   82728:	0249      	lsls	r1, r1, #9
   8272a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8272e:	d037      	beq.n	827a0 <__aeabi_fdiv+0x98>
   82730:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   82734:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   82738:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   8273c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   82740:	428b      	cmp	r3, r1
   82742:	bf38      	it	cc
   82744:	005b      	lslcc	r3, r3, #1
   82746:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8274a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8274e:	428b      	cmp	r3, r1
   82750:	bf24      	itt	cs
   82752:	1a5b      	subcs	r3, r3, r1
   82754:	ea40 000c 	orrcs.w	r0, r0, ip
   82758:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   8275c:	bf24      	itt	cs
   8275e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   82762:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82766:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8276a:	bf24      	itt	cs
   8276c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   82770:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82774:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   82778:	bf24      	itt	cs
   8277a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   8277e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82782:	011b      	lsls	r3, r3, #4
   82784:	bf18      	it	ne
   82786:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8278a:	d1e0      	bne.n	8274e <__aeabi_fdiv+0x46>
   8278c:	2afd      	cmp	r2, #253	; 0xfd
   8278e:	f63f af50 	bhi.w	82632 <__aeabi_fmul+0x92>
   82792:	428b      	cmp	r3, r1
   82794:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82798:	bf08      	it	eq
   8279a:	f020 0001 	biceq.w	r0, r0, #1
   8279e:	4770      	bx	lr
   827a0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   827a4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   827a8:	327f      	adds	r2, #127	; 0x7f
   827aa:	bfc2      	ittt	gt
   827ac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   827b0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   827b4:	4770      	bxgt	lr
   827b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   827ba:	f04f 0300 	mov.w	r3, #0
   827be:	3a01      	subs	r2, #1
   827c0:	e737      	b.n	82632 <__aeabi_fmul+0x92>
   827c2:	f092 0f00 	teq	r2, #0
   827c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   827ca:	bf02      	ittt	eq
   827cc:	0040      	lsleq	r0, r0, #1
   827ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   827d2:	3a01      	subeq	r2, #1
   827d4:	d0f9      	beq.n	827ca <__aeabi_fdiv+0xc2>
   827d6:	ea40 000c 	orr.w	r0, r0, ip
   827da:	f093 0f00 	teq	r3, #0
   827de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   827e2:	bf02      	ittt	eq
   827e4:	0049      	lsleq	r1, r1, #1
   827e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   827ea:	3b01      	subeq	r3, #1
   827ec:	d0f9      	beq.n	827e2 <__aeabi_fdiv+0xda>
   827ee:	ea41 010c 	orr.w	r1, r1, ip
   827f2:	e795      	b.n	82720 <__aeabi_fdiv+0x18>
   827f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   827f8:	ea92 0f0c 	teq	r2, ip
   827fc:	d108      	bne.n	82810 <__aeabi_fdiv+0x108>
   827fe:	0242      	lsls	r2, r0, #9
   82800:	f47f af7d 	bne.w	826fe <__aeabi_fmul+0x15e>
   82804:	ea93 0f0c 	teq	r3, ip
   82808:	f47f af70 	bne.w	826ec <__aeabi_fmul+0x14c>
   8280c:	4608      	mov	r0, r1
   8280e:	e776      	b.n	826fe <__aeabi_fmul+0x15e>
   82810:	ea93 0f0c 	teq	r3, ip
   82814:	d104      	bne.n	82820 <__aeabi_fdiv+0x118>
   82816:	024b      	lsls	r3, r1, #9
   82818:	f43f af4c 	beq.w	826b4 <__aeabi_fmul+0x114>
   8281c:	4608      	mov	r0, r1
   8281e:	e76e      	b.n	826fe <__aeabi_fmul+0x15e>
   82820:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   82824:	bf18      	it	ne
   82826:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8282a:	d1ca      	bne.n	827c2 <__aeabi_fdiv+0xba>
   8282c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   82830:	f47f af5c 	bne.w	826ec <__aeabi_fmul+0x14c>
   82834:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   82838:	f47f af3c 	bne.w	826b4 <__aeabi_fmul+0x114>
   8283c:	e75f      	b.n	826fe <__aeabi_fmul+0x15e>
   8283e:	bf00      	nop

00082840 <__aeabi_f2uiz>:
   82840:	0042      	lsls	r2, r0, #1
   82842:	d20e      	bcs.n	82862 <__aeabi_f2uiz+0x22>
   82844:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   82848:	d30b      	bcc.n	82862 <__aeabi_f2uiz+0x22>
   8284a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   8284e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   82852:	d409      	bmi.n	82868 <__aeabi_f2uiz+0x28>
   82854:	ea4f 2300 	mov.w	r3, r0, lsl #8
   82858:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8285c:	fa23 f002 	lsr.w	r0, r3, r2
   82860:	4770      	bx	lr
   82862:	f04f 0000 	mov.w	r0, #0
   82866:	4770      	bx	lr
   82868:	f112 0f61 	cmn.w	r2, #97	; 0x61
   8286c:	d101      	bne.n	82872 <__aeabi_f2uiz+0x32>
   8286e:	0242      	lsls	r2, r0, #9
   82870:	d102      	bne.n	82878 <__aeabi_f2uiz+0x38>
   82872:	f04f 30ff 	mov.w	r0, #4294967295
   82876:	4770      	bx	lr
   82878:	f04f 0000 	mov.w	r0, #0
   8287c:	4770      	bx	lr
   8287e:	bf00      	nop

00082880 <__libc_init_array>:
   82880:	b570      	push	{r4, r5, r6, lr}
   82882:	4e0f      	ldr	r6, [pc, #60]	; (828c0 <__libc_init_array+0x40>)
   82884:	4d0f      	ldr	r5, [pc, #60]	; (828c4 <__libc_init_array+0x44>)
   82886:	1b76      	subs	r6, r6, r5
   82888:	10b6      	asrs	r6, r6, #2
   8288a:	bf18      	it	ne
   8288c:	2400      	movne	r4, #0
   8288e:	d005      	beq.n	8289c <__libc_init_array+0x1c>
   82890:	3401      	adds	r4, #1
   82892:	f855 3b04 	ldr.w	r3, [r5], #4
   82896:	4798      	blx	r3
   82898:	42a6      	cmp	r6, r4
   8289a:	d1f9      	bne.n	82890 <__libc_init_array+0x10>
   8289c:	4e0a      	ldr	r6, [pc, #40]	; (828c8 <__libc_init_array+0x48>)
   8289e:	4d0b      	ldr	r5, [pc, #44]	; (828cc <__libc_init_array+0x4c>)
   828a0:	f000 f8a8 	bl	829f4 <_init>
   828a4:	1b76      	subs	r6, r6, r5
   828a6:	10b6      	asrs	r6, r6, #2
   828a8:	bf18      	it	ne
   828aa:	2400      	movne	r4, #0
   828ac:	d006      	beq.n	828bc <__libc_init_array+0x3c>
   828ae:	3401      	adds	r4, #1
   828b0:	f855 3b04 	ldr.w	r3, [r5], #4
   828b4:	4798      	blx	r3
   828b6:	42a6      	cmp	r6, r4
   828b8:	d1f9      	bne.n	828ae <__libc_init_array+0x2e>
   828ba:	bd70      	pop	{r4, r5, r6, pc}
   828bc:	bd70      	pop	{r4, r5, r6, pc}
   828be:	bf00      	nop
   828c0:	00082a00 	.word	0x00082a00
   828c4:	00082a00 	.word	0x00082a00
   828c8:	00082a08 	.word	0x00082a08
   828cc:	00082a00 	.word	0x00082a00

000828d0 <register_fini>:
   828d0:	4b02      	ldr	r3, [pc, #8]	; (828dc <register_fini+0xc>)
   828d2:	b113      	cbz	r3, 828da <register_fini+0xa>
   828d4:	4802      	ldr	r0, [pc, #8]	; (828e0 <register_fini+0x10>)
   828d6:	f000 b805 	b.w	828e4 <atexit>
   828da:	4770      	bx	lr
   828dc:	00000000 	.word	0x00000000
   828e0:	000828f1 	.word	0x000828f1

000828e4 <atexit>:
   828e4:	2300      	movs	r3, #0
   828e6:	4601      	mov	r1, r0
   828e8:	461a      	mov	r2, r3
   828ea:	4618      	mov	r0, r3
   828ec:	f000 b81e 	b.w	8292c <__register_exitproc>

000828f0 <__libc_fini_array>:
   828f0:	b538      	push	{r3, r4, r5, lr}
   828f2:	4c0a      	ldr	r4, [pc, #40]	; (8291c <__libc_fini_array+0x2c>)
   828f4:	4d0a      	ldr	r5, [pc, #40]	; (82920 <__libc_fini_array+0x30>)
   828f6:	1b64      	subs	r4, r4, r5
   828f8:	10a4      	asrs	r4, r4, #2
   828fa:	d00a      	beq.n	82912 <__libc_fini_array+0x22>
   828fc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82900:	3b01      	subs	r3, #1
   82902:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82906:	3c01      	subs	r4, #1
   82908:	f855 3904 	ldr.w	r3, [r5], #-4
   8290c:	4798      	blx	r3
   8290e:	2c00      	cmp	r4, #0
   82910:	d1f9      	bne.n	82906 <__libc_fini_array+0x16>
   82912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82916:	f000 b877 	b.w	82a08 <_fini>
   8291a:	bf00      	nop
   8291c:	00082a18 	.word	0x00082a18
   82920:	00082a14 	.word	0x00082a14

00082924 <__retarget_lock_acquire_recursive>:
   82924:	4770      	bx	lr
   82926:	bf00      	nop

00082928 <__retarget_lock_release_recursive>:
   82928:	4770      	bx	lr
   8292a:	bf00      	nop

0008292c <__register_exitproc>:
   8292c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82930:	4d2c      	ldr	r5, [pc, #176]	; (829e4 <__register_exitproc+0xb8>)
   82932:	4606      	mov	r6, r0
   82934:	6828      	ldr	r0, [r5, #0]
   82936:	4698      	mov	r8, r3
   82938:	460f      	mov	r7, r1
   8293a:	4691      	mov	r9, r2
   8293c:	f7ff fff2 	bl	82924 <__retarget_lock_acquire_recursive>
   82940:	4b29      	ldr	r3, [pc, #164]	; (829e8 <__register_exitproc+0xbc>)
   82942:	681c      	ldr	r4, [r3, #0]
   82944:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   82948:	2b00      	cmp	r3, #0
   8294a:	d03e      	beq.n	829ca <__register_exitproc+0x9e>
   8294c:	685a      	ldr	r2, [r3, #4]
   8294e:	2a1f      	cmp	r2, #31
   82950:	dc1c      	bgt.n	8298c <__register_exitproc+0x60>
   82952:	f102 0e01 	add.w	lr, r2, #1
   82956:	b176      	cbz	r6, 82976 <__register_exitproc+0x4a>
   82958:	2101      	movs	r1, #1
   8295a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8295e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   82962:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   82966:	4091      	lsls	r1, r2
   82968:	4308      	orrs	r0, r1
   8296a:	2e02      	cmp	r6, #2
   8296c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   82970:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   82974:	d023      	beq.n	829be <__register_exitproc+0x92>
   82976:	3202      	adds	r2, #2
   82978:	f8c3 e004 	str.w	lr, [r3, #4]
   8297c:	6828      	ldr	r0, [r5, #0]
   8297e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   82982:	f7ff ffd1 	bl	82928 <__retarget_lock_release_recursive>
   82986:	2000      	movs	r0, #0
   82988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8298c:	4b17      	ldr	r3, [pc, #92]	; (829ec <__register_exitproc+0xc0>)
   8298e:	b30b      	cbz	r3, 829d4 <__register_exitproc+0xa8>
   82990:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82994:	f3af 8000 	nop.w
   82998:	4603      	mov	r3, r0
   8299a:	b1d8      	cbz	r0, 829d4 <__register_exitproc+0xa8>
   8299c:	2000      	movs	r0, #0
   8299e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   829a2:	f04f 0e01 	mov.w	lr, #1
   829a6:	6058      	str	r0, [r3, #4]
   829a8:	6019      	str	r1, [r3, #0]
   829aa:	4602      	mov	r2, r0
   829ac:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   829b0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   829b4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   829b8:	2e00      	cmp	r6, #0
   829ba:	d0dc      	beq.n	82976 <__register_exitproc+0x4a>
   829bc:	e7cc      	b.n	82958 <__register_exitproc+0x2c>
   829be:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   829c2:	4301      	orrs	r1, r0
   829c4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   829c8:	e7d5      	b.n	82976 <__register_exitproc+0x4a>
   829ca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   829ce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   829d2:	e7bb      	b.n	8294c <__register_exitproc+0x20>
   829d4:	6828      	ldr	r0, [r5, #0]
   829d6:	f7ff ffa7 	bl	82928 <__retarget_lock_release_recursive>
   829da:	f04f 30ff 	mov.w	r0, #4294967295
   829de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   829e2:	bf00      	nop
   829e4:	200705b8 	.word	0x200705b8
   829e8:	000829f0 	.word	0x000829f0
   829ec:	00000000 	.word	0x00000000

000829f0 <_global_impure_ptr>:
   829f0:	20070190                                ... 

000829f4 <_init>:
   829f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   829f6:	bf00      	nop
   829f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   829fa:	bc08      	pop	{r3}
   829fc:	469e      	mov	lr, r3
   829fe:	4770      	bx	lr

00082a00 <__init_array_start>:
   82a00:	000828d1 	.word	0x000828d1

00082a04 <__frame_dummy_init_array_entry>:
   82a04:	00080119                                ....

00082a08 <_fini>:
   82a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82a0a:	bf00      	nop
   82a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82a0e:	bc08      	pop	{r3}
   82a10:	469e      	mov	lr, r3
   82a12:	4770      	bx	lr

00082a14 <__fini_array_start>:
   82a14:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007018c 	.word	0x2007018c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <SystemCoreClock>:
2007018c:	003d0900                                ..=.

20070190 <impure_data>:
20070190:	00000000 2007047c 200704e4 2007054c     ....|.. ... L.. 
	...
20070238:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070248:	0005deec 0000000b 00000000 00000000     ................
	...

200705b8 <__atexit_recursive_mutex>:
200705b8:	200705f8                                ... 
