
Sensor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a20  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005c4  20070000  00082a20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000060  200705c4  00082fe4  000205c4  2**2
                  ALLOC
  3 .stack        00002004  20070624  00083044  000205c4  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000205c4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000205ed  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000ec56  00000000  00000000  00020646  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002003  00000000  00000000  0002f29c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004438  00000000  00000000  0003129f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007a8  00000000  00000000  000356d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000748  00000000  00000000  00035e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00004c12  00000000  00000000  000365c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a7fd  00000000  00000000  0003b1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00061004  00000000  00000000  000459d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002318  00000000  00000000  000a69dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	28 26 07 20 b9 13 08 00 b1 13 08 00 b1 13 08 00     (&. ............
   80010:	b1 13 08 00 b1 13 08 00 b1 13 08 00 00 00 00 00     ................
	...
   8002c:	b1 13 08 00 b1 13 08 00 00 00 00 00 b1 13 08 00     ................
   8003c:	1d 03 08 00 b1 13 08 00 b1 13 08 00 b1 13 08 00     ................
   8004c:	b1 13 08 00 b1 13 08 00 b1 13 08 00 b1 13 08 00     ................
   8005c:	b1 13 08 00 b1 13 08 00 b1 13 08 00 00 00 00 00     ................
   8006c:	b1 13 08 00 b1 13 08 00 b1 13 08 00 b1 13 08 00     ................
	...
   80084:	b1 13 08 00 b1 13 08 00 b1 13 08 00 b1 13 08 00     ................
   80094:	b1 13 08 00 b1 13 08 00 b1 13 08 00 b1 13 08 00     ................
   800a4:	00 00 00 00 b1 13 08 00 b1 13 08 00 b1 13 08 00     ................
   800b4:	b1 13 08 00 b1 13 08 00 b1 13 08 00 b1 13 08 00     ................
   800c4:	b1 13 08 00 b1 13 08 00 b1 13 08 00 b1 13 08 00     ................
   800d4:	b1 13 08 00 b1 13 08 00 89 18 08 00 b1 13 08 00     ................
   800e4:	b1 13 08 00 b1 13 08 00 b1 13 08 00 b1 13 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200705c4 	.word	0x200705c4
   80110:	00000000 	.word	0x00000000
   80114:	00082a20 	.word	0x00082a20

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00082a20 	.word	0x00082a20
   80154:	200705c8 	.word	0x200705c8
   80158:	00082a20 	.word	0x00082a20
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80160:	b480      	push	{r7}
   80162:	b087      	sub	sp, #28
   80164:	af00      	add	r7, sp, #0
   80166:	60f8      	str	r0, [r7, #12]
   80168:	60b9      	str	r1, [r7, #8]
   8016a:	607a      	str	r2, [r7, #4]
   8016c:	603b      	str	r3, [r7, #0]
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8016e:	68fb      	ldr	r3, [r7, #12]
   80170:	2201      	movs	r2, #1
   80172:	601a      	str	r2, [r3, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80174:	68fb      	ldr	r3, [r7, #12]
   80176:	2200      	movs	r2, #0
   80178:	605a      	str	r2, [r3, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8017a:	68fb      	ldr	r3, [r7, #12]
   8017c:	f240 2202 	movw	r2, #514	; 0x202
   80180:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80184:	68fb      	ldr	r3, [r7, #12]
   80186:	2200      	movs	r2, #0
   80188:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8018c:	68fb      	ldr	r3, [r7, #12]
   8018e:	2200      	movs	r2, #0
   80190:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80194:	687b      	ldr	r3, [r7, #4]
   80196:	005b      	lsls	r3, r3, #1
   80198:	68ba      	ldr	r2, [r7, #8]
   8019a:	fbb2 f3f3 	udiv	r3, r2, r3
   8019e:	3b01      	subs	r3, #1
   801a0:	617b      	str	r3, [r7, #20]
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   801a2:	68fb      	ldr	r3, [r7, #12]
   801a4:	685a      	ldr	r2, [r3, #4]
   801a6:	697b      	ldr	r3, [r7, #20]
   801a8:	021b      	lsls	r3, r3, #8
   801aa:	b299      	uxth	r1, r3
   801ac:	683b      	ldr	r3, [r7, #0]
   801ae:	430b      	orrs	r3, r1
   801b0:	431a      	orrs	r2, r3
   801b2:	68fb      	ldr	r3, [r7, #12]
   801b4:	605a      	str	r2, [r3, #4]
	return 0;
   801b6:	2300      	movs	r3, #0
}
   801b8:	4618      	mov	r0, r3
   801ba:	371c      	adds	r7, #28
   801bc:	46bd      	mov	sp, r7
   801be:	bc80      	pop	{r7}
   801c0:	4770      	bx	lr

000801c2 <adc_configure_trigger>:
 * ADC_MR_FREERUN_OFF disables freerun mode.
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
   801c2:	b480      	push	{r7}
   801c4:	b083      	sub	sp, #12
   801c6:	af00      	add	r7, sp, #0
   801c8:	6078      	str	r0, [r7, #4]
   801ca:	460b      	mov	r3, r1
   801cc:	70fb      	strb	r3, [r7, #3]
   801ce:	4613      	mov	r3, r2
   801d0:	70bb      	strb	r3, [r7, #2]
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   801d2:	687b      	ldr	r3, [r7, #4]
   801d4:	685a      	ldr	r2, [r3, #4]
   801d6:	78f9      	ldrb	r1, [r7, #3]
   801d8:	78bb      	ldrb	r3, [r7, #2]
   801da:	01db      	lsls	r3, r3, #7
   801dc:	b2db      	uxtb	r3, r3
   801de:	430b      	orrs	r3, r1
   801e0:	431a      	orrs	r2, r3
   801e2:	687b      	ldr	r3, [r7, #4]
   801e4:	605a      	str	r2, [r3, #4]
}
   801e6:	bf00      	nop
   801e8:	370c      	adds	r7, #12
   801ea:	46bd      	mov	sp, r7
   801ec:	bc80      	pop	{r7}
   801ee:	4770      	bx	lr

000801f0 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   801f0:	b480      	push	{r7}
   801f2:	b085      	sub	sp, #20
   801f4:	af00      	add	r7, sp, #0
   801f6:	60f8      	str	r0, [r7, #12]
   801f8:	607a      	str	r2, [r7, #4]
   801fa:	461a      	mov	r2, r3
   801fc:	460b      	mov	r3, r1
   801fe:	72fb      	strb	r3, [r7, #11]
   80200:	4613      	mov	r3, r2
   80202:	72bb      	strb	r3, [r7, #10]
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80204:	68fb      	ldr	r3, [r7, #12]
   80206:	685a      	ldr	r2, [r3, #4]
   80208:	7abb      	ldrb	r3, [r7, #10]
   8020a:	071b      	lsls	r3, r3, #28
   8020c:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80210:	687b      	ldr	r3, [r7, #4]
   80212:	4319      	orrs	r1, r3
   80214:	7afb      	ldrb	r3, [r7, #11]
   80216:	061b      	lsls	r3, r3, #24
   80218:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   8021c:	430b      	orrs	r3, r1
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8021e:	431a      	orrs	r2, r3
   80220:	68fb      	ldr	r3, [r7, #12]
   80222:	605a      	str	r2, [r3, #4]
}
   80224:	bf00      	nop
   80226:	3714      	adds	r7, #20
   80228:	46bd      	mov	sp, r7
   8022a:	bc80      	pop	{r7}
   8022c:	4770      	bx	lr

0008022e <adc_start>:
 *
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
   8022e:	b480      	push	{r7}
   80230:	b083      	sub	sp, #12
   80232:	af00      	add	r7, sp, #0
   80234:	6078      	str	r0, [r7, #4]
	p_adc->ADC_CR = ADC_CR_START;
   80236:	687b      	ldr	r3, [r7, #4]
   80238:	2202      	movs	r2, #2
   8023a:	601a      	str	r2, [r3, #0]
}
   8023c:	bf00      	nop
   8023e:	370c      	adds	r7, #12
   80240:	46bd      	mov	sp, r7
   80242:	bc80      	pop	{r7}
   80244:	4770      	bx	lr

00080246 <adc_enable_channel>:
 *
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
   80246:	b480      	push	{r7}
   80248:	b083      	sub	sp, #12
   8024a:	af00      	add	r7, sp, #0
   8024c:	6078      	str	r0, [r7, #4]
   8024e:	460b      	mov	r3, r1
   80250:	70fb      	strb	r3, [r7, #3]
	p_adc->ADC_CHER = 1 << adc_ch;
   80252:	78fb      	ldrb	r3, [r7, #3]
   80254:	2201      	movs	r2, #1
   80256:	fa02 f303 	lsl.w	r3, r2, r3
   8025a:	461a      	mov	r2, r3
   8025c:	687b      	ldr	r3, [r7, #4]
   8025e:	611a      	str	r2, [r3, #16]
}
   80260:	bf00      	nop
   80262:	370c      	adds	r7, #12
   80264:	46bd      	mov	sp, r7
   80266:	bc80      	pop	{r7}
   80268:	4770      	bx	lr

0008026a <adc_get_channel_value>:
 * \param adc_ch ADC channel number.
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
   8026a:	b480      	push	{r7}
   8026c:	b085      	sub	sp, #20
   8026e:	af00      	add	r7, sp, #0
   80270:	6078      	str	r0, [r7, #4]
   80272:	460b      	mov	r3, r1
   80274:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data = 0;
   80276:	2300      	movs	r3, #0
   80278:	60fb      	str	r3, [r7, #12]

	if (15 >= adc_ch) {
   8027a:	78fb      	ldrb	r3, [r7, #3]
   8027c:	2b0f      	cmp	r3, #15
   8027e:	d807      	bhi.n	80290 <adc_get_channel_value+0x26>
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   80280:	687b      	ldr	r3, [r7, #4]
   80282:	f103 0250 	add.w	r2, r3, #80	; 0x50
   80286:	78fb      	ldrb	r3, [r7, #3]
   80288:	009b      	lsls	r3, r3, #2
   8028a:	4413      	add	r3, r2
   8028c:	681b      	ldr	r3, [r3, #0]
   8028e:	60fb      	str	r3, [r7, #12]
	}

	return ul_data;
   80290:	68fb      	ldr	r3, [r7, #12]
}
   80292:	4618      	mov	r0, r3
   80294:	3714      	adds	r7, #20
   80296:	46bd      	mov	sp, r7
   80298:	bc80      	pop	{r7}
   8029a:	4770      	bx	lr

0008029c <adc_get_status>:
 * \param p_adc Pointer to an ADC instance.
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
   8029c:	b480      	push	{r7}
   8029e:	b083      	sub	sp, #12
   802a0:	af00      	add	r7, sp, #0
   802a2:	6078      	str	r0, [r7, #4]
	return p_adc->ADC_ISR;
   802a4:	687b      	ldr	r3, [r7, #4]
   802a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   802a8:	4618      	mov	r0, r3
   802aa:	370c      	adds	r7, #12
   802ac:	46bd      	mov	sp, r7
   802ae:	bc80      	pop	{r7}
   802b0:	4770      	bx	lr

000802b2 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   802b2:	b480      	push	{r7}
   802b4:	b08b      	sub	sp, #44	; 0x2c
   802b6:	af00      	add	r7, sp, #0
   802b8:	6078      	str	r0, [r7, #4]
   802ba:	460b      	mov	r3, r1
   802bc:	70fb      	strb	r3, [r7, #3]
   802be:	687b      	ldr	r3, [r7, #4]
   802c0:	627b      	str	r3, [r7, #36]	; 0x24
   802c2:	78fb      	ldrb	r3, [r7, #3]
   802c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   802c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   802ca:	61fb      	str	r3, [r7, #28]
   802cc:	69fb      	ldr	r3, [r7, #28]
   802ce:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   802d0:	69bb      	ldr	r3, [r7, #24]
   802d2:	095b      	lsrs	r3, r3, #5
   802d4:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   802d6:	697b      	ldr	r3, [r7, #20]
   802d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   802dc:	f203 7307 	addw	r3, r3, #1799	; 0x707
   802e0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   802e2:	613b      	str	r3, [r7, #16]

	if (level) {
   802e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   802e8:	2b00      	cmp	r3, #0
   802ea:	d009      	beq.n	80300 <ioport_set_pin_level+0x4e>
   802ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   802ee:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   802f0:	68fb      	ldr	r3, [r7, #12]
   802f2:	f003 031f 	and.w	r3, r3, #31
   802f6:	2201      	movs	r2, #1
   802f8:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   802fa:	693b      	ldr	r3, [r7, #16]
   802fc:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   802fe:	e008      	b.n	80312 <ioport_set_pin_level+0x60>
   80300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80302:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   80304:	68bb      	ldr	r3, [r7, #8]
   80306:	f003 031f 	and.w	r3, r3, #31
   8030a:	2201      	movs	r2, #1
   8030c:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8030e:	693b      	ldr	r3, [r7, #16]
   80310:	635a      	str	r2, [r3, #52]	; 0x34
   80312:	bf00      	nop
   80314:	372c      	adds	r7, #44	; 0x2c
   80316:	46bd      	mov	sp, r7
   80318:	bc80      	pop	{r7}
   8031a:	4770      	bx	lr

0008031c <SysTick_Handler>:
float adc_bat_value;
uint8_t bat_percentage_prefiltered = 100;
uint8_t bat_percentage_filtered = 100;

void SysTick_Handler(void)
{
   8031c:	b480      	push	{r7}
   8031e:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   80320:	4b04      	ldr	r3, [pc, #16]	; (80334 <SysTick_Handler+0x18>)
   80322:	681b      	ldr	r3, [r3, #0]
   80324:	3301      	adds	r3, #1
   80326:	4a03      	ldr	r2, [pc, #12]	; (80334 <SysTick_Handler+0x18>)
   80328:	6013      	str	r3, [r2, #0]
}
   8032a:	bf00      	nop
   8032c:	46bd      	mov	sp, r7
   8032e:	bc80      	pop	{r7}
   80330:	4770      	bx	lr
   80332:	bf00      	nop
   80334:	200705e0 	.word	0x200705e0

00080338 <getTicks>:

uint32_t getTicks(void)
{
   80338:	b480      	push	{r7}
   8033a:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   8033c:	4b02      	ldr	r3, [pc, #8]	; (80348 <getTicks+0x10>)
   8033e:	681b      	ldr	r3, [r3, #0]
}
   80340:	4618      	mov	r0, r3
   80342:	46bd      	mov	sp, r7
   80344:	bc80      	pop	{r7}
   80346:	4770      	bx	lr
   80348:	200705e0 	.word	0x200705e0

0008034c <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   8034c:	b480      	push	{r7}
   8034e:	b085      	sub	sp, #20
   80350:	af00      	add	r7, sp, #0
   80352:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   80354:	4b07      	ldr	r3, [pc, #28]	; (80374 <mdelay+0x28>)
   80356:	681b      	ldr	r3, [r3, #0]
   80358:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   8035a:	bf00      	nop
   8035c:	4b05      	ldr	r3, [pc, #20]	; (80374 <mdelay+0x28>)
   8035e:	681a      	ldr	r2, [r3, #0]
   80360:	68fb      	ldr	r3, [r7, #12]
   80362:	1ad2      	subs	r2, r2, r3
   80364:	687b      	ldr	r3, [r7, #4]
   80366:	429a      	cmp	r2, r3
   80368:	d3f8      	bcc.n	8035c <mdelay+0x10>
}
   8036a:	bf00      	nop
   8036c:	3714      	adds	r7, #20
   8036e:	46bd      	mov	sp, r7
   80370:	bc80      	pop	{r7}
   80372:	4770      	bx	lr
   80374:	200705e0 	.word	0x200705e0

00080378 <update_battery>:

void update_battery(void)
{
   80378:	b590      	push	{r4, r7, lr}
   8037a:	b083      	sub	sp, #12
   8037c:	af00      	add	r7, sp, #0
    if ((getTicks() - ul_ticks_bat) >= 500)
   8037e:	4b52      	ldr	r3, [pc, #328]	; (804c8 <update_battery+0x150>)
   80380:	4798      	blx	r3
   80382:	4602      	mov	r2, r0
   80384:	4b51      	ldr	r3, [pc, #324]	; (804cc <update_battery+0x154>)
   80386:	681b      	ldr	r3, [r3, #0]
   80388:	1ad3      	subs	r3, r2, r3
   8038a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8038e:	f0c0 8091 	bcc.w	804b4 <update_battery+0x13c>
    {
        ul_ticks_bat = getTicks();
   80392:	4b4d      	ldr	r3, [pc, #308]	; (804c8 <update_battery+0x150>)
   80394:	4798      	blx	r3
   80396:	4602      	mov	r2, r0
   80398:	4b4c      	ldr	r3, [pc, #304]	; (804cc <update_battery+0x154>)
   8039a:	601a      	str	r2, [r3, #0]
        
        while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY);
   8039c:	bf00      	nop
   8039e:	484c      	ldr	r0, [pc, #304]	; (804d0 <update_battery+0x158>)
   803a0:	4b4c      	ldr	r3, [pc, #304]	; (804d4 <update_battery+0x15c>)
   803a2:	4798      	blx	r3
   803a4:	4603      	mov	r3, r0
   803a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   803aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   803ae:	d1f6      	bne.n	8039e <update_battery+0x26>
        
        uint32_t temp = adc_get_channel_value(ADC, BATTERY_VOLTAGE);
   803b0:	2101      	movs	r1, #1
   803b2:	4847      	ldr	r0, [pc, #284]	; (804d0 <update_battery+0x158>)
   803b4:	4b48      	ldr	r3, [pc, #288]	; (804d8 <update_battery+0x160>)
   803b6:	4798      	blx	r3
   803b8:	6078      	str	r0, [r7, #4]
        adc_bat_value = (float)temp;
   803ba:	4b48      	ldr	r3, [pc, #288]	; (804dc <update_battery+0x164>)
   803bc:	6878      	ldr	r0, [r7, #4]
   803be:	4798      	blx	r3
   803c0:	4602      	mov	r2, r0
   803c2:	4b47      	ldr	r3, [pc, #284]	; (804e0 <update_battery+0x168>)
   803c4:	601a      	str	r2, [r3, #0]
        //stm.bat_voltage = (uint8_t)(adc_bat_value / 18.0f);
        float y = adc_bat_value * 0.003472222;
   803c6:	4b46      	ldr	r3, [pc, #280]	; (804e0 <update_battery+0x168>)
   803c8:	681a      	ldr	r2, [r3, #0]
   803ca:	4b46      	ldr	r3, [pc, #280]	; (804e4 <update_battery+0x16c>)
   803cc:	4610      	mov	r0, r2
   803ce:	4798      	blx	r3
   803d0:	4c45      	ldr	r4, [pc, #276]	; (804e8 <update_battery+0x170>)
   803d2:	a33b      	add	r3, pc, #236	; (adr r3, 804c0 <update_battery+0x148>)
   803d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   803d8:	47a0      	blx	r4
   803da:	4603      	mov	r3, r0
   803dc:	460c      	mov	r4, r1
   803de:	4619      	mov	r1, r3
   803e0:	4622      	mov	r2, r4
   803e2:	4b42      	ldr	r3, [pc, #264]	; (804ec <update_battery+0x174>)
   803e4:	4608      	mov	r0, r1
   803e6:	4611      	mov	r1, r2
   803e8:	4798      	blx	r3
   803ea:	4603      	mov	r3, r0
   803ec:	603b      	str	r3, [r7, #0]
        bat_percentage_prefiltered = (uint8_t)(-(y * y - 25.2f * y + 158.76f) / 0.04f + 100.0f);
   803ee:	4b40      	ldr	r3, [pc, #256]	; (804f0 <update_battery+0x178>)
   803f0:	6839      	ldr	r1, [r7, #0]
   803f2:	6838      	ldr	r0, [r7, #0]
   803f4:	4798      	blx	r3
   803f6:	4603      	mov	r3, r0
   803f8:	461c      	mov	r4, r3
   803fa:	4b3d      	ldr	r3, [pc, #244]	; (804f0 <update_battery+0x178>)
   803fc:	493d      	ldr	r1, [pc, #244]	; (804f4 <update_battery+0x17c>)
   803fe:	6838      	ldr	r0, [r7, #0]
   80400:	4798      	blx	r3
   80402:	4603      	mov	r3, r0
   80404:	461a      	mov	r2, r3
   80406:	4b3c      	ldr	r3, [pc, #240]	; (804f8 <update_battery+0x180>)
   80408:	4611      	mov	r1, r2
   8040a:	4620      	mov	r0, r4
   8040c:	4798      	blx	r3
   8040e:	4603      	mov	r3, r0
   80410:	461a      	mov	r2, r3
   80412:	4b3a      	ldr	r3, [pc, #232]	; (804fc <update_battery+0x184>)
   80414:	493a      	ldr	r1, [pc, #232]	; (80500 <update_battery+0x188>)
   80416:	4610      	mov	r0, r2
   80418:	4798      	blx	r3
   8041a:	4603      	mov	r3, r0
   8041c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   80420:	4b38      	ldr	r3, [pc, #224]	; (80504 <update_battery+0x18c>)
   80422:	4939      	ldr	r1, [pc, #228]	; (80508 <update_battery+0x190>)
   80424:	4610      	mov	r0, r2
   80426:	4798      	blx	r3
   80428:	4603      	mov	r3, r0
   8042a:	461a      	mov	r2, r3
   8042c:	4b33      	ldr	r3, [pc, #204]	; (804fc <update_battery+0x184>)
   8042e:	4937      	ldr	r1, [pc, #220]	; (8050c <update_battery+0x194>)
   80430:	4610      	mov	r0, r2
   80432:	4798      	blx	r3
   80434:	4603      	mov	r3, r0
   80436:	461a      	mov	r2, r3
   80438:	4b35      	ldr	r3, [pc, #212]	; (80510 <update_battery+0x198>)
   8043a:	4610      	mov	r0, r2
   8043c:	4798      	blx	r3
   8043e:	4603      	mov	r3, r0
   80440:	b2da      	uxtb	r2, r3
   80442:	4b34      	ldr	r3, [pc, #208]	; (80514 <update_battery+0x19c>)
   80444:	701a      	strb	r2, [r3, #0]
        bat_percentage_prefiltered = (bat_percentage_prefiltered - 20.0) * 1.25;
   80446:	4b33      	ldr	r3, [pc, #204]	; (80514 <update_battery+0x19c>)
   80448:	781b      	ldrb	r3, [r3, #0]
   8044a:	461a      	mov	r2, r3
   8044c:	4b32      	ldr	r3, [pc, #200]	; (80518 <update_battery+0x1a0>)
   8044e:	4610      	mov	r0, r2
   80450:	4798      	blx	r3
   80452:	4c32      	ldr	r4, [pc, #200]	; (8051c <update_battery+0x1a4>)
   80454:	f04f 0200 	mov.w	r2, #0
   80458:	4b31      	ldr	r3, [pc, #196]	; (80520 <update_battery+0x1a8>)
   8045a:	47a0      	blx	r4
   8045c:	4603      	mov	r3, r0
   8045e:	460c      	mov	r4, r1
   80460:	4618      	mov	r0, r3
   80462:	4621      	mov	r1, r4
   80464:	4c20      	ldr	r4, [pc, #128]	; (804e8 <update_battery+0x170>)
   80466:	f04f 0200 	mov.w	r2, #0
   8046a:	4b2e      	ldr	r3, [pc, #184]	; (80524 <update_battery+0x1ac>)
   8046c:	47a0      	blx	r4
   8046e:	4603      	mov	r3, r0
   80470:	460c      	mov	r4, r1
   80472:	4619      	mov	r1, r3
   80474:	4622      	mov	r2, r4
   80476:	4b2c      	ldr	r3, [pc, #176]	; (80528 <update_battery+0x1b0>)
   80478:	4608      	mov	r0, r1
   8047a:	4611      	mov	r1, r2
   8047c:	4798      	blx	r3
   8047e:	4603      	mov	r3, r0
   80480:	b2da      	uxtb	r2, r3
   80482:	4b24      	ldr	r3, [pc, #144]	; (80514 <update_battery+0x19c>)
   80484:	701a      	strb	r2, [r3, #0]
        bat_percentage_filtered = (bat_percentage_filtered * 3 + bat_percentage_prefiltered) / 4;
   80486:	4b29      	ldr	r3, [pc, #164]	; (8052c <update_battery+0x1b4>)
   80488:	781b      	ldrb	r3, [r3, #0]
   8048a:	461a      	mov	r2, r3
   8048c:	4613      	mov	r3, r2
   8048e:	005b      	lsls	r3, r3, #1
   80490:	4413      	add	r3, r2
   80492:	4a20      	ldr	r2, [pc, #128]	; (80514 <update_battery+0x19c>)
   80494:	7812      	ldrb	r2, [r2, #0]
   80496:	4413      	add	r3, r2
   80498:	2b00      	cmp	r3, #0
   8049a:	da00      	bge.n	8049e <update_battery+0x126>
   8049c:	3303      	adds	r3, #3
   8049e:	109b      	asrs	r3, r3, #2
   804a0:	b2da      	uxtb	r2, r3
   804a2:	4b22      	ldr	r3, [pc, #136]	; (8052c <update_battery+0x1b4>)
   804a4:	701a      	strb	r2, [r3, #0]
        stm.bat_percentage = bat_percentage_filtered;
   804a6:	4b21      	ldr	r3, [pc, #132]	; (8052c <update_battery+0x1b4>)
   804a8:	781a      	ldrb	r2, [r3, #0]
   804aa:	4b21      	ldr	r3, [pc, #132]	; (80530 <update_battery+0x1b8>)
   804ac:	709a      	strb	r2, [r3, #2]
        adc_start(ADC);
   804ae:	4808      	ldr	r0, [pc, #32]	; (804d0 <update_battery+0x158>)
   804b0:	4b20      	ldr	r3, [pc, #128]	; (80534 <update_battery+0x1bc>)
   804b2:	4798      	blx	r3
    }
}
   804b4:	bf00      	nop
   804b6:	370c      	adds	r7, #12
   804b8:	46bd      	mov	sp, r7
   804ba:	bd90      	pop	{r4, r7, pc}
   804bc:	f3af 8000 	nop.w
   804c0:	fde70747 	.word	0xfde70747
   804c4:	3f6c71c6 	.word	0x3f6c71c6
   804c8:	00080339 	.word	0x00080339
   804cc:	200705e4 	.word	0x200705e4
   804d0:	400c0000 	.word	0x400c0000
   804d4:	0008029d 	.word	0x0008029d
   804d8:	0008026b 	.word	0x0008026b
   804dc:	000824f9 	.word	0x000824f9
   804e0:	200705f0 	.word	0x200705f0
   804e4:	00081de1 	.word	0x00081de1
   804e8:	00081e89 	.word	0x00081e89
   804ec:	000822ed 	.word	0x000822ed
   804f0:	000825a9 	.word	0x000825a9
   804f4:	41c9999a 	.word	0x41c9999a
   804f8:	00082395 	.word	0x00082395
   804fc:	00082399 	.word	0x00082399
   80500:	431ec28f 	.word	0x431ec28f
   80504:	00082711 	.word	0x00082711
   80508:	3d23d70a 	.word	0x3d23d70a
   8050c:	42c80000 	.word	0x42c80000
   80510:	00082849 	.word	0x00082849
   80514:	2007018c 	.word	0x2007018c
   80518:	00081dbd 	.word	0x00081dbd
   8051c:	00081b21 	.word	0x00081b21
   80520:	40340000 	.word	0x40340000
   80524:	3ff40000 	.word	0x3ff40000
   80528:	000822ad 	.word	0x000822ad
   8052c:	2007018d 	.word	0x2007018d
   80530:	200705fc 	.word	0x200705fc
   80534:	0008022f 	.word	0x0008022f

00080538 <update_heartbeat>:

void update_heartbeat(void)
{
   80538:	b580      	push	{r7, lr}
   8053a:	af00      	add	r7, sp, #0
    if (mts.ibit.heartbeat)
   8053c:	4b11      	ldr	r3, [pc, #68]	; (80584 <update_heartbeat+0x4c>)
   8053e:	781b      	ldrb	r3, [r3, #0]
   80540:	f003 0301 	and.w	r3, r3, #1
   80544:	b2db      	uxtb	r3, r3
   80546:	2b00      	cmp	r3, #0
   80548:	d00d      	beq.n	80566 <update_heartbeat+0x2e>
    {
        set_led(LED_ONBOARD, 1);
   8054a:	2101      	movs	r1, #1
   8054c:	2063      	movs	r0, #99	; 0x63
   8054e:	4b0e      	ldr	r3, [pc, #56]	; (80588 <update_heartbeat+0x50>)
   80550:	4798      	blx	r3
        set_led(LED_S1, 1);
   80552:	2101      	movs	r1, #1
   80554:	2062      	movs	r0, #98	; 0x62
   80556:	4b0c      	ldr	r3, [pc, #48]	; (80588 <update_heartbeat+0x50>)
   80558:	4798      	blx	r3
        stm.ibit.heartbeat = 1;
   8055a:	4a0c      	ldr	r2, [pc, #48]	; (8058c <update_heartbeat+0x54>)
   8055c:	7813      	ldrb	r3, [r2, #0]
   8055e:	f043 0301 	orr.w	r3, r3, #1
   80562:	7013      	strb	r3, [r2, #0]
    {
        set_led(LED_ONBOARD, 0);
        set_led(LED_S1, 0);
        stm.ibit.heartbeat = 0;
    }
}    
   80564:	e00c      	b.n	80580 <update_heartbeat+0x48>
        set_led(LED_ONBOARD, 0);
   80566:	2100      	movs	r1, #0
   80568:	2063      	movs	r0, #99	; 0x63
   8056a:	4b07      	ldr	r3, [pc, #28]	; (80588 <update_heartbeat+0x50>)
   8056c:	4798      	blx	r3
        set_led(LED_S1, 0);
   8056e:	2100      	movs	r1, #0
   80570:	2062      	movs	r0, #98	; 0x62
   80572:	4b05      	ldr	r3, [pc, #20]	; (80588 <update_heartbeat+0x50>)
   80574:	4798      	blx	r3
        stm.ibit.heartbeat = 0;
   80576:	4a05      	ldr	r2, [pc, #20]	; (8058c <update_heartbeat+0x54>)
   80578:	7813      	ldrb	r3, [r2, #0]
   8057a:	f36f 0300 	bfc	r3, #0, #1
   8057e:	7013      	strb	r3, [r2, #0]
}    
   80580:	bf00      	nop
   80582:	bd80      	pop	{r7, pc}
   80584:	200705f8 	.word	0x200705f8
   80588:	00080591 	.word	0x00080591
   8058c:	200705fc 	.word	0x200705fc

00080590 <set_led>:

void set_led(ioport_pin_t pin, Bool level)
{
   80590:	b580      	push	{r7, lr}
   80592:	b082      	sub	sp, #8
   80594:	af00      	add	r7, sp, #0
   80596:	6078      	str	r0, [r7, #4]
   80598:	460b      	mov	r3, r1
   8059a:	70fb      	strb	r3, [r7, #3]
    if (mts.ibit.sleep_mode == 0)
   8059c:	4b0c      	ldr	r3, [pc, #48]	; (805d0 <set_led+0x40>)
   8059e:	781b      	ldrb	r3, [r3, #0]
   805a0:	f003 0304 	and.w	r3, r3, #4
   805a4:	b2db      	uxtb	r3, r3
   805a6:	2b00      	cmp	r3, #0
   805a8:	d10a      	bne.n	805c0 <set_led+0x30>
    {
        ioport_set_pin_level(pin, level);
   805aa:	78fb      	ldrb	r3, [r7, #3]
   805ac:	2b00      	cmp	r3, #0
   805ae:	bf14      	ite	ne
   805b0:	2301      	movne	r3, #1
   805b2:	2300      	moveq	r3, #0
   805b4:	b2db      	uxtb	r3, r3
   805b6:	4619      	mov	r1, r3
   805b8:	6878      	ldr	r0, [r7, #4]
   805ba:	4b06      	ldr	r3, [pc, #24]	; (805d4 <set_led+0x44>)
   805bc:	4798      	blx	r3
    }
    else
    {
        ioport_set_pin_level(pin, 0);
    }
}
   805be:	e003      	b.n	805c8 <set_led+0x38>
        ioport_set_pin_level(pin, 0);
   805c0:	2100      	movs	r1, #0
   805c2:	6878      	ldr	r0, [r7, #4]
   805c4:	4b03      	ldr	r3, [pc, #12]	; (805d4 <set_led+0x44>)
   805c6:	4798      	blx	r3
}
   805c8:	bf00      	nop
   805ca:	3708      	adds	r7, #8
   805cc:	46bd      	mov	sp, r7
   805ce:	bd80      	pop	{r7, pc}
   805d0:	200705f8 	.word	0x200705f8
   805d4:	000802b3 	.word	0x000802b3

000805d8 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   805d8:	b480      	push	{r7}
   805da:	b083      	sub	sp, #12
   805dc:	af00      	add	r7, sp, #0
   805de:	6078      	str	r0, [r7, #4]
   805e0:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   805e2:	687b      	ldr	r3, [r7, #4]
   805e4:	685b      	ldr	r3, [r3, #4]
   805e6:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   805ea:	687b      	ldr	r3, [r7, #4]
   805ec:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   805ee:	687b      	ldr	r3, [r7, #4]
   805f0:	685a      	ldr	r2, [r3, #4]
   805f2:	683b      	ldr	r3, [r7, #0]
   805f4:	041b      	lsls	r3, r3, #16
   805f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   805fa:	431a      	orrs	r2, r3
   805fc:	687b      	ldr	r3, [r7, #4]
   805fe:	605a      	str	r2, [r3, #4]
}
   80600:	bf00      	nop
   80602:	370c      	adds	r7, #12
   80604:	46bd      	mov	sp, r7
   80606:	bc80      	pop	{r7}
   80608:	4770      	bx	lr

0008060a <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   8060a:	b480      	push	{r7}
   8060c:	b085      	sub	sp, #20
   8060e:	af00      	add	r7, sp, #0
   80610:	60f8      	str	r0, [r7, #12]
   80612:	60b9      	str	r1, [r7, #8]
   80614:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   80616:	687b      	ldr	r3, [r7, #4]
   80618:	2b00      	cmp	r3, #0
   8061a:	d00c      	beq.n	80636 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   8061c:	68fb      	ldr	r3, [r7, #12]
   8061e:	68ba      	ldr	r2, [r7, #8]
   80620:	320c      	adds	r2, #12
   80622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80626:	f043 0101 	orr.w	r1, r3, #1
   8062a:	68fb      	ldr	r3, [r7, #12]
   8062c:	68ba      	ldr	r2, [r7, #8]
   8062e:	320c      	adds	r2, #12
   80630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
   80634:	e00b      	b.n	8064e <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   80636:	68fb      	ldr	r3, [r7, #12]
   80638:	68ba      	ldr	r2, [r7, #8]
   8063a:	320c      	adds	r2, #12
   8063c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80640:	f023 0101 	bic.w	r1, r3, #1
   80644:	68fb      	ldr	r3, [r7, #12]
   80646:	68ba      	ldr	r2, [r7, #8]
   80648:	320c      	adds	r2, #12
   8064a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8064e:	bf00      	nop
   80650:	3714      	adds	r7, #20
   80652:	46bd      	mov	sp, r7
   80654:	bc80      	pop	{r7}
   80656:	4770      	bx	lr

00080658 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   80658:	b480      	push	{r7}
   8065a:	b085      	sub	sp, #20
   8065c:	af00      	add	r7, sp, #0
   8065e:	60f8      	str	r0, [r7, #12]
   80660:	60b9      	str	r1, [r7, #8]
   80662:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   80664:	687b      	ldr	r3, [r7, #4]
   80666:	2b00      	cmp	r3, #0
   80668:	d00c      	beq.n	80684 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   8066a:	68fb      	ldr	r3, [r7, #12]
   8066c:	68ba      	ldr	r2, [r7, #8]
   8066e:	320c      	adds	r2, #12
   80670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80674:	f043 0102 	orr.w	r1, r3, #2
   80678:	68fb      	ldr	r3, [r7, #12]
   8067a:	68ba      	ldr	r2, [r7, #8]
   8067c:	320c      	adds	r2, #12
   8067e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
   80682:	e00b      	b.n	8069c <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   80684:	68fb      	ldr	r3, [r7, #12]
   80686:	68ba      	ldr	r2, [r7, #8]
   80688:	320c      	adds	r2, #12
   8068a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8068e:	f023 0102 	bic.w	r1, r3, #2
   80692:	68fb      	ldr	r3, [r7, #12]
   80694:	68ba      	ldr	r2, [r7, #8]
   80696:	320c      	adds	r2, #12
   80698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8069c:	bf00      	nop
   8069e:	3714      	adds	r7, #20
   806a0:	46bd      	mov	sp, r7
   806a2:	bc80      	pop	{r7}
   806a4:	4770      	bx	lr

000806a6 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   806a6:	b480      	push	{r7}
   806a8:	b085      	sub	sp, #20
   806aa:	af00      	add	r7, sp, #0
   806ac:	60f8      	str	r0, [r7, #12]
   806ae:	60b9      	str	r1, [r7, #8]
   806b0:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   806b2:	68fb      	ldr	r3, [r7, #12]
   806b4:	68ba      	ldr	r2, [r7, #8]
   806b6:	320c      	adds	r2, #12
   806b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   806bc:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   806c0:	68fb      	ldr	r3, [r7, #12]
   806c2:	68ba      	ldr	r2, [r7, #8]
   806c4:	320c      	adds	r2, #12
   806c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   806ca:	68fb      	ldr	r3, [r7, #12]
   806cc:	68ba      	ldr	r2, [r7, #8]
   806ce:	320c      	adds	r2, #12
   806d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   806d4:	687b      	ldr	r3, [r7, #4]
   806d6:	ea42 0103 	orr.w	r1, r2, r3
   806da:	68fb      	ldr	r3, [r7, #12]
   806dc:	68ba      	ldr	r2, [r7, #8]
   806de:	320c      	adds	r2, #12
   806e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   806e4:	bf00      	nop
   806e6:	3714      	adds	r7, #20
   806e8:	46bd      	mov	sp, r7
   806ea:	bc80      	pop	{r7}
   806ec:	4770      	bx	lr
	...

000806f0 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   806f0:	b580      	push	{r7, lr}
   806f2:	b082      	sub	sp, #8
   806f4:	af00      	add	r7, sp, #0
   806f6:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   806f8:	6878      	ldr	r0, [r7, #4]
   806fa:	4b03      	ldr	r3, [pc, #12]	; (80708 <dmac_init+0x18>)
   806fc:	4798      	blx	r3
}
   806fe:	bf00      	nop
   80700:	3708      	adds	r7, #8
   80702:	46bd      	mov	sp, r7
   80704:	bd80      	pop	{r7, pc}
   80706:	bf00      	nop
   80708:	0008074b 	.word	0x0008074b

0008070c <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   8070c:	b480      	push	{r7}
   8070e:	b083      	sub	sp, #12
   80710:	af00      	add	r7, sp, #0
   80712:	6078      	str	r0, [r7, #4]
   80714:	460b      	mov	r3, r1
   80716:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   80718:	687b      	ldr	r3, [r7, #4]
   8071a:	681b      	ldr	r3, [r3, #0]
   8071c:	f023 0210 	bic.w	r2, r3, #16
   80720:	78fb      	ldrb	r3, [r7, #3]
   80722:	431a      	orrs	r2, r3
   80724:	687b      	ldr	r3, [r7, #4]
   80726:	601a      	str	r2, [r3, #0]
}
   80728:	bf00      	nop
   8072a:	370c      	adds	r7, #12
   8072c:	46bd      	mov	sp, r7
   8072e:	bc80      	pop	{r7}
   80730:	4770      	bx	lr

00080732 <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   80732:	b480      	push	{r7}
   80734:	b083      	sub	sp, #12
   80736:	af00      	add	r7, sp, #0
   80738:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   8073a:	687b      	ldr	r3, [r7, #4]
   8073c:	2201      	movs	r2, #1
   8073e:	605a      	str	r2, [r3, #4]
}
   80740:	bf00      	nop
   80742:	370c      	adds	r7, #12
   80744:	46bd      	mov	sp, r7
   80746:	bc80      	pop	{r7}
   80748:	4770      	bx	lr

0008074a <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   8074a:	b480      	push	{r7}
   8074c:	b083      	sub	sp, #12
   8074e:	af00      	add	r7, sp, #0
   80750:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   80752:	687b      	ldr	r3, [r7, #4]
   80754:	685b      	ldr	r3, [r3, #4]
   80756:	f023 0201 	bic.w	r2, r3, #1
   8075a:	687b      	ldr	r3, [r7, #4]
   8075c:	605a      	str	r2, [r3, #4]
}
   8075e:	bf00      	nop
   80760:	370c      	adds	r7, #12
   80762:	46bd      	mov	sp, r7
   80764:	bc80      	pop	{r7}
   80766:	4770      	bx	lr

00080768 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   80768:	b480      	push	{r7}
   8076a:	b083      	sub	sp, #12
   8076c:	af00      	add	r7, sp, #0
   8076e:	6078      	str	r0, [r7, #4]
   80770:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   80772:	687b      	ldr	r3, [r7, #4]
   80774:	683a      	ldr	r2, [r7, #0]
   80776:	619a      	str	r2, [r3, #24]
}
   80778:	bf00      	nop
   8077a:	370c      	adds	r7, #12
   8077c:	46bd      	mov	sp, r7
   8077e:	bc80      	pop	{r7}
   80780:	4770      	bx	lr

00080782 <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   80782:	b480      	push	{r7}
   80784:	b083      	sub	sp, #12
   80786:	af00      	add	r7, sp, #0
   80788:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   8078a:	687b      	ldr	r3, [r7, #4]
   8078c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   8078e:	4618      	mov	r0, r3
   80790:	370c      	adds	r7, #12
   80792:	46bd      	mov	sp, r7
   80794:	bc80      	pop	{r7}
   80796:	4770      	bx	lr

00080798 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   80798:	b480      	push	{r7}
   8079a:	b083      	sub	sp, #12
   8079c:	af00      	add	r7, sp, #0
   8079e:	6078      	str	r0, [r7, #4]
   807a0:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   807a2:	2201      	movs	r2, #1
   807a4:	683b      	ldr	r3, [r7, #0]
   807a6:	409a      	lsls	r2, r3
   807a8:	687b      	ldr	r3, [r7, #4]
   807aa:	629a      	str	r2, [r3, #40]	; 0x28
}
   807ac:	bf00      	nop
   807ae:	370c      	adds	r7, #12
   807b0:	46bd      	mov	sp, r7
   807b2:	bc80      	pop	{r7}
   807b4:	4770      	bx	lr

000807b6 <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   807b6:	b480      	push	{r7}
   807b8:	b083      	sub	sp, #12
   807ba:	af00      	add	r7, sp, #0
   807bc:	6078      	str	r0, [r7, #4]
   807be:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   807c0:	2201      	movs	r2, #1
   807c2:	683b      	ldr	r3, [r7, #0]
   807c4:	409a      	lsls	r2, r3
   807c6:	687b      	ldr	r3, [r7, #4]
   807c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
   807ca:	bf00      	nop
   807cc:	370c      	adds	r7, #12
   807ce:	46bd      	mov	sp, r7
   807d0:	bc80      	pop	{r7}
   807d2:	4770      	bx	lr

000807d4 <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   807d4:	b480      	push	{r7}
   807d6:	b085      	sub	sp, #20
   807d8:	af00      	add	r7, sp, #0
   807da:	60f8      	str	r0, [r7, #12]
   807dc:	60b9      	str	r1, [r7, #8]
   807de:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   807e0:	68f9      	ldr	r1, [r7, #12]
   807e2:	68ba      	ldr	r2, [r7, #8]
   807e4:	4613      	mov	r3, r2
   807e6:	009b      	lsls	r3, r3, #2
   807e8:	4413      	add	r3, r2
   807ea:	00db      	lsls	r3, r3, #3
   807ec:	440b      	add	r3, r1
   807ee:	333c      	adds	r3, #60	; 0x3c
   807f0:	687a      	ldr	r2, [r7, #4]
   807f2:	601a      	str	r2, [r3, #0]
}
   807f4:	bf00      	nop
   807f6:	3714      	adds	r7, #20
   807f8:	46bd      	mov	sp, r7
   807fa:	bc80      	pop	{r7}
   807fc:	4770      	bx	lr

000807fe <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   807fe:	b480      	push	{r7}
   80800:	b085      	sub	sp, #20
   80802:	af00      	add	r7, sp, #0
   80804:	60f8      	str	r0, [r7, #12]
   80806:	60b9      	str	r1, [r7, #8]
   80808:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   8080a:	68f9      	ldr	r1, [r7, #12]
   8080c:	68ba      	ldr	r2, [r7, #8]
   8080e:	4613      	mov	r3, r2
   80810:	009b      	lsls	r3, r3, #2
   80812:	4413      	add	r3, r2
   80814:	00db      	lsls	r3, r3, #3
   80816:	440b      	add	r3, r1
   80818:	3340      	adds	r3, #64	; 0x40
   8081a:	687a      	ldr	r2, [r7, #4]
   8081c:	601a      	str	r2, [r3, #0]
}
   8081e:	bf00      	nop
   80820:	3714      	adds	r7, #20
   80822:	46bd      	mov	sp, r7
   80824:	bc80      	pop	{r7}
   80826:	4770      	bx	lr

00080828 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   80828:	b480      	push	{r7}
   8082a:	b085      	sub	sp, #20
   8082c:	af00      	add	r7, sp, #0
   8082e:	60f8      	str	r0, [r7, #12]
   80830:	60b9      	str	r1, [r7, #8]
   80832:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   80834:	68f9      	ldr	r1, [r7, #12]
   80836:	68ba      	ldr	r2, [r7, #8]
   80838:	4613      	mov	r3, r2
   8083a:	009b      	lsls	r3, r3, #2
   8083c:	4413      	add	r3, r2
   8083e:	00db      	lsls	r3, r3, #3
   80840:	440b      	add	r3, r1
   80842:	3344      	adds	r3, #68	; 0x44
   80844:	687a      	ldr	r2, [r7, #4]
   80846:	601a      	str	r2, [r3, #0]
}
   80848:	bf00      	nop
   8084a:	3714      	adds	r7, #20
   8084c:	46bd      	mov	sp, r7
   8084e:	bc80      	pop	{r7}
   80850:	4770      	bx	lr

00080852 <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   80852:	b480      	push	{r7}
   80854:	b085      	sub	sp, #20
   80856:	af00      	add	r7, sp, #0
   80858:	60f8      	str	r0, [r7, #12]
   8085a:	60b9      	str	r1, [r7, #8]
   8085c:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   8085e:	68f9      	ldr	r1, [r7, #12]
   80860:	68ba      	ldr	r2, [r7, #8]
   80862:	4613      	mov	r3, r2
   80864:	009b      	lsls	r3, r3, #2
   80866:	4413      	add	r3, r2
   80868:	00db      	lsls	r3, r3, #3
   8086a:	440b      	add	r3, r1
   8086c:	3348      	adds	r3, #72	; 0x48
   8086e:	687a      	ldr	r2, [r7, #4]
   80870:	601a      	str	r2, [r3, #0]
}
   80872:	bf00      	nop
   80874:	3714      	adds	r7, #20
   80876:	46bd      	mov	sp, r7
   80878:	bc80      	pop	{r7}
   8087a:	4770      	bx	lr

0008087c <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   8087c:	b480      	push	{r7}
   8087e:	b085      	sub	sp, #20
   80880:	af00      	add	r7, sp, #0
   80882:	60f8      	str	r0, [r7, #12]
   80884:	60b9      	str	r1, [r7, #8]
   80886:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   80888:	68f9      	ldr	r1, [r7, #12]
   8088a:	68ba      	ldr	r2, [r7, #8]
   8088c:	4613      	mov	r3, r2
   8088e:	009b      	lsls	r3, r3, #2
   80890:	4413      	add	r3, r2
   80892:	00db      	lsls	r3, r3, #3
   80894:	440b      	add	r3, r1
   80896:	334c      	adds	r3, #76	; 0x4c
   80898:	687a      	ldr	r2, [r7, #4]
   8089a:	601a      	str	r2, [r3, #0]
}
   8089c:	bf00      	nop
   8089e:	3714      	adds	r7, #20
   808a0:	46bd      	mov	sp, r7
   808a2:	bc80      	pop	{r7}
   808a4:	4770      	bx	lr

000808a6 <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   808a6:	b480      	push	{r7}
   808a8:	b085      	sub	sp, #20
   808aa:	af00      	add	r7, sp, #0
   808ac:	60f8      	str	r0, [r7, #12]
   808ae:	60b9      	str	r1, [r7, #8]
   808b0:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   808b2:	68f9      	ldr	r1, [r7, #12]
   808b4:	68ba      	ldr	r2, [r7, #8]
   808b6:	4613      	mov	r3, r2
   808b8:	009b      	lsls	r3, r3, #2
   808ba:	4413      	add	r3, r2
   808bc:	00db      	lsls	r3, r3, #3
   808be:	440b      	add	r3, r1
   808c0:	3350      	adds	r3, #80	; 0x50
   808c2:	687a      	ldr	r2, [r7, #4]
   808c4:	601a      	str	r2, [r3, #0]
}
   808c6:	bf00      	nop
   808c8:	3714      	adds	r7, #20
   808ca:	46bd      	mov	sp, r7
   808cc:	bc80      	pop	{r7}
   808ce:	4770      	bx	lr

000808d0 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   808d0:	b580      	push	{r7, lr}
   808d2:	b084      	sub	sp, #16
   808d4:	af00      	add	r7, sp, #0
   808d6:	60f8      	str	r0, [r7, #12]
   808d8:	60b9      	str	r1, [r7, #8]
   808da:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   808dc:	68fb      	ldr	r3, [r7, #12]
   808de:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   808e0:	687b      	ldr	r3, [r7, #4]
   808e2:	681b      	ldr	r3, [r3, #0]
   808e4:	461a      	mov	r2, r3
   808e6:	68b9      	ldr	r1, [r7, #8]
   808e8:	68f8      	ldr	r0, [r7, #12]
   808ea:	4b10      	ldr	r3, [pc, #64]	; (8092c <dmac_channel_single_buf_transfer_init+0x5c>)
   808ec:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   808ee:	687b      	ldr	r3, [r7, #4]
   808f0:	685b      	ldr	r3, [r3, #4]
   808f2:	461a      	mov	r2, r3
   808f4:	68b9      	ldr	r1, [r7, #8]
   808f6:	68f8      	ldr	r0, [r7, #12]
   808f8:	4b0d      	ldr	r3, [pc, #52]	; (80930 <dmac_channel_single_buf_transfer_init+0x60>)
   808fa:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   808fc:	2200      	movs	r2, #0
   808fe:	68b9      	ldr	r1, [r7, #8]
   80900:	68f8      	ldr	r0, [r7, #12]
   80902:	4b0c      	ldr	r3, [pc, #48]	; (80934 <dmac_channel_single_buf_transfer_init+0x64>)
   80904:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   80906:	687b      	ldr	r3, [r7, #4]
   80908:	689b      	ldr	r3, [r3, #8]
   8090a:	461a      	mov	r2, r3
   8090c:	68b9      	ldr	r1, [r7, #8]
   8090e:	68f8      	ldr	r0, [r7, #12]
   80910:	4b09      	ldr	r3, [pc, #36]	; (80938 <dmac_channel_single_buf_transfer_init+0x68>)
   80912:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   80914:	687b      	ldr	r3, [r7, #4]
   80916:	68db      	ldr	r3, [r3, #12]
   80918:	461a      	mov	r2, r3
   8091a:	68b9      	ldr	r1, [r7, #8]
   8091c:	68f8      	ldr	r0, [r7, #12]
   8091e:	4b07      	ldr	r3, [pc, #28]	; (8093c <dmac_channel_single_buf_transfer_init+0x6c>)
   80920:	4798      	blx	r3
}
   80922:	bf00      	nop
   80924:	3710      	adds	r7, #16
   80926:	46bd      	mov	sp, r7
   80928:	bd80      	pop	{r7, pc}
   8092a:	bf00      	nop
   8092c:	000807d5 	.word	0x000807d5
   80930:	000807ff 	.word	0x000807ff
   80934:	00080829 	.word	0x00080829
   80938:	00080853 	.word	0x00080853
   8093c:	0008087d 	.word	0x0008087d

00080940 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80940:	b580      	push	{r7, lr}
   80942:	b082      	sub	sp, #8
   80944:	af00      	add	r7, sp, #0
   80946:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80948:	687b      	ldr	r3, [r7, #4]
   8094a:	2b07      	cmp	r3, #7
   8094c:	d831      	bhi.n	809b2 <osc_enable+0x72>
   8094e:	a201      	add	r2, pc, #4	; (adr r2, 80954 <osc_enable+0x14>)
   80950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80954:	000809b1 	.word	0x000809b1
   80958:	00080975 	.word	0x00080975
   8095c:	0008097d 	.word	0x0008097d
   80960:	00080985 	.word	0x00080985
   80964:	0008098d 	.word	0x0008098d
   80968:	00080995 	.word	0x00080995
   8096c:	0008099d 	.word	0x0008099d
   80970:	000809a7 	.word	0x000809a7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80974:	2000      	movs	r0, #0
   80976:	4b11      	ldr	r3, [pc, #68]	; (809bc <osc_enable+0x7c>)
   80978:	4798      	blx	r3
		break;
   8097a:	e01a      	b.n	809b2 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8097c:	2001      	movs	r0, #1
   8097e:	4b0f      	ldr	r3, [pc, #60]	; (809bc <osc_enable+0x7c>)
   80980:	4798      	blx	r3
		break;
   80982:	e016      	b.n	809b2 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80984:	2000      	movs	r0, #0
   80986:	4b0e      	ldr	r3, [pc, #56]	; (809c0 <osc_enable+0x80>)
   80988:	4798      	blx	r3
		break;
   8098a:	e012      	b.n	809b2 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8098c:	2010      	movs	r0, #16
   8098e:	4b0c      	ldr	r3, [pc, #48]	; (809c0 <osc_enable+0x80>)
   80990:	4798      	blx	r3
		break;
   80992:	e00e      	b.n	809b2 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80994:	2020      	movs	r0, #32
   80996:	4b0a      	ldr	r3, [pc, #40]	; (809c0 <osc_enable+0x80>)
   80998:	4798      	blx	r3
		break;
   8099a:	e00a      	b.n	809b2 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8099c:	213e      	movs	r1, #62	; 0x3e
   8099e:	2000      	movs	r0, #0
   809a0:	4b08      	ldr	r3, [pc, #32]	; (809c4 <osc_enable+0x84>)
   809a2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   809a4:	e005      	b.n	809b2 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   809a6:	213e      	movs	r1, #62	; 0x3e
   809a8:	2001      	movs	r0, #1
   809aa:	4b06      	ldr	r3, [pc, #24]	; (809c4 <osc_enable+0x84>)
   809ac:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   809ae:	e000      	b.n	809b2 <osc_enable+0x72>
		break;
   809b0:	bf00      	nop
	}
}
   809b2:	bf00      	nop
   809b4:	3708      	adds	r7, #8
   809b6:	46bd      	mov	sp, r7
   809b8:	bd80      	pop	{r7, pc}
   809ba:	bf00      	nop
   809bc:	00080d2d 	.word	0x00080d2d
   809c0:	00080d99 	.word	0x00080d99
   809c4:	00080e09 	.word	0x00080e09

000809c8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   809c8:	b580      	push	{r7, lr}
   809ca:	b082      	sub	sp, #8
   809cc:	af00      	add	r7, sp, #0
   809ce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   809d0:	687b      	ldr	r3, [r7, #4]
   809d2:	2b07      	cmp	r3, #7
   809d4:	d826      	bhi.n	80a24 <osc_is_ready+0x5c>
   809d6:	a201      	add	r2, pc, #4	; (adr r2, 809dc <osc_is_ready+0x14>)
   809d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   809dc:	000809fd 	.word	0x000809fd
   809e0:	00080a01 	.word	0x00080a01
   809e4:	00080a01 	.word	0x00080a01
   809e8:	00080a13 	.word	0x00080a13
   809ec:	00080a13 	.word	0x00080a13
   809f0:	00080a13 	.word	0x00080a13
   809f4:	00080a13 	.word	0x00080a13
   809f8:	00080a13 	.word	0x00080a13
	case OSC_SLCK_32K_RC:
		return 1;
   809fc:	2301      	movs	r3, #1
   809fe:	e012      	b.n	80a26 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80a00:	4b0b      	ldr	r3, [pc, #44]	; (80a30 <osc_is_ready+0x68>)
   80a02:	4798      	blx	r3
   80a04:	4603      	mov	r3, r0
   80a06:	2b00      	cmp	r3, #0
   80a08:	bf14      	ite	ne
   80a0a:	2301      	movne	r3, #1
   80a0c:	2300      	moveq	r3, #0
   80a0e:	b2db      	uxtb	r3, r3
   80a10:	e009      	b.n	80a26 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80a12:	4b08      	ldr	r3, [pc, #32]	; (80a34 <osc_is_ready+0x6c>)
   80a14:	4798      	blx	r3
   80a16:	4603      	mov	r3, r0
   80a18:	2b00      	cmp	r3, #0
   80a1a:	bf14      	ite	ne
   80a1c:	2301      	movne	r3, #1
   80a1e:	2300      	moveq	r3, #0
   80a20:	b2db      	uxtb	r3, r3
   80a22:	e000      	b.n	80a26 <osc_is_ready+0x5e>
	}

	return 0;
   80a24:	2300      	movs	r3, #0
}
   80a26:	4618      	mov	r0, r3
   80a28:	3708      	adds	r7, #8
   80a2a:	46bd      	mov	sp, r7
   80a2c:	bd80      	pop	{r7, pc}
   80a2e:	bf00      	nop
   80a30:	00080d65 	.word	0x00080d65
   80a34:	00080e81 	.word	0x00080e81

00080a38 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80a38:	b480      	push	{r7}
   80a3a:	b083      	sub	sp, #12
   80a3c:	af00      	add	r7, sp, #0
   80a3e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80a40:	687b      	ldr	r3, [r7, #4]
   80a42:	2b07      	cmp	r3, #7
   80a44:	d825      	bhi.n	80a92 <osc_get_rate+0x5a>
   80a46:	a201      	add	r2, pc, #4	; (adr r2, 80a4c <osc_get_rate+0x14>)
   80a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a4c:	00080a6d 	.word	0x00080a6d
   80a50:	00080a73 	.word	0x00080a73
   80a54:	00080a79 	.word	0x00080a79
   80a58:	00080a7f 	.word	0x00080a7f
   80a5c:	00080a83 	.word	0x00080a83
   80a60:	00080a87 	.word	0x00080a87
   80a64:	00080a8b 	.word	0x00080a8b
   80a68:	00080a8f 	.word	0x00080a8f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80a6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80a70:	e010      	b.n	80a94 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80a76:	e00d      	b.n	80a94 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80a78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80a7c:	e00a      	b.n	80a94 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80a7e:	4b08      	ldr	r3, [pc, #32]	; (80aa0 <osc_get_rate+0x68>)
   80a80:	e008      	b.n	80a94 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80a82:	4b08      	ldr	r3, [pc, #32]	; (80aa4 <osc_get_rate+0x6c>)
   80a84:	e006      	b.n	80a94 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80a86:	4b08      	ldr	r3, [pc, #32]	; (80aa8 <osc_get_rate+0x70>)
   80a88:	e004      	b.n	80a94 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80a8a:	4b07      	ldr	r3, [pc, #28]	; (80aa8 <osc_get_rate+0x70>)
   80a8c:	e002      	b.n	80a94 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80a8e:	4b06      	ldr	r3, [pc, #24]	; (80aa8 <osc_get_rate+0x70>)
   80a90:	e000      	b.n	80a94 <osc_get_rate+0x5c>
	}

	return 0;
   80a92:	2300      	movs	r3, #0
}
   80a94:	4618      	mov	r0, r3
   80a96:	370c      	adds	r7, #12
   80a98:	46bd      	mov	sp, r7
   80a9a:	bc80      	pop	{r7}
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop
   80aa0:	003d0900 	.word	0x003d0900
   80aa4:	007a1200 	.word	0x007a1200
   80aa8:	00b71b00 	.word	0x00b71b00

00080aac <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80aac:	b580      	push	{r7, lr}
   80aae:	b082      	sub	sp, #8
   80ab0:	af00      	add	r7, sp, #0
   80ab2:	4603      	mov	r3, r0
   80ab4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80ab6:	bf00      	nop
   80ab8:	79fb      	ldrb	r3, [r7, #7]
   80aba:	4618      	mov	r0, r3
   80abc:	4b05      	ldr	r3, [pc, #20]	; (80ad4 <osc_wait_ready+0x28>)
   80abe:	4798      	blx	r3
   80ac0:	4603      	mov	r3, r0
   80ac2:	f083 0301 	eor.w	r3, r3, #1
   80ac6:	b2db      	uxtb	r3, r3
   80ac8:	2b00      	cmp	r3, #0
   80aca:	d1f5      	bne.n	80ab8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80acc:	bf00      	nop
   80ace:	3708      	adds	r7, #8
   80ad0:	46bd      	mov	sp, r7
   80ad2:	bd80      	pop	{r7, pc}
   80ad4:	000809c9 	.word	0x000809c9

00080ad8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   80ad8:	b580      	push	{r7, lr}
   80ada:	b086      	sub	sp, #24
   80adc:	af00      	add	r7, sp, #0
   80ade:	60f8      	str	r0, [r7, #12]
   80ae0:	607a      	str	r2, [r7, #4]
   80ae2:	603b      	str	r3, [r7, #0]
   80ae4:	460b      	mov	r3, r1
   80ae6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   80ae8:	687b      	ldr	r3, [r7, #4]
   80aea:	2b00      	cmp	r3, #0
   80aec:	d107      	bne.n	80afe <pll_config_init+0x26>
   80aee:	683b      	ldr	r3, [r7, #0]
   80af0:	2b00      	cmp	r3, #0
   80af2:	d104      	bne.n	80afe <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80af4:	68fb      	ldr	r3, [r7, #12]
   80af6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   80afa:	601a      	str	r2, [r3, #0]
   80afc:	e019      	b.n	80b32 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   80afe:	7afb      	ldrb	r3, [r7, #11]
   80b00:	4618      	mov	r0, r3
   80b02:	4b0e      	ldr	r3, [pc, #56]	; (80b3c <pll_config_init+0x64>)
   80b04:	4798      	blx	r3
   80b06:	4602      	mov	r2, r0
   80b08:	687b      	ldr	r3, [r7, #4]
   80b0a:	fbb2 f3f3 	udiv	r3, r2, r3
   80b0e:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   80b10:	697b      	ldr	r3, [r7, #20]
   80b12:	683a      	ldr	r2, [r7, #0]
   80b14:	fb02 f303 	mul.w	r3, r2, r3
   80b18:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   80b1a:	683b      	ldr	r3, [r7, #0]
   80b1c:	3b01      	subs	r3, #1
   80b1e:	041a      	lsls	r2, r3, #16
   80b20:	4b07      	ldr	r3, [pc, #28]	; (80b40 <pll_config_init+0x68>)
   80b22:	4013      	ands	r3, r2
   80b24:	687a      	ldr	r2, [r7, #4]
   80b26:	b2d2      	uxtb	r2, r2
   80b28:	4313      	orrs	r3, r2
   80b2a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   80b2e:	68fb      	ldr	r3, [r7, #12]
   80b30:	601a      	str	r2, [r3, #0]
	}
}
   80b32:	bf00      	nop
   80b34:	3718      	adds	r7, #24
   80b36:	46bd      	mov	sp, r7
   80b38:	bd80      	pop	{r7, pc}
   80b3a:	bf00      	nop
   80b3c:	00080a39 	.word	0x00080a39
   80b40:	07ff0000 	.word	0x07ff0000

00080b44 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80b44:	b580      	push	{r7, lr}
   80b46:	b082      	sub	sp, #8
   80b48:	af00      	add	r7, sp, #0
   80b4a:	6078      	str	r0, [r7, #4]
   80b4c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80b4e:	683b      	ldr	r3, [r7, #0]
   80b50:	2b00      	cmp	r3, #0
   80b52:	d108      	bne.n	80b66 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80b54:	4b09      	ldr	r3, [pc, #36]	; (80b7c <pll_enable+0x38>)
   80b56:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80b58:	4a09      	ldr	r2, [pc, #36]	; (80b80 <pll_enable+0x3c>)
   80b5a:	687b      	ldr	r3, [r7, #4]
   80b5c:	681b      	ldr	r3, [r3, #0]
   80b5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80b62:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80b64:	e005      	b.n	80b72 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80b66:	4a06      	ldr	r2, [pc, #24]	; (80b80 <pll_enable+0x3c>)
   80b68:	687b      	ldr	r3, [r7, #4]
   80b6a:	681b      	ldr	r3, [r3, #0]
   80b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80b70:	61d3      	str	r3, [r2, #28]
}
   80b72:	bf00      	nop
   80b74:	3708      	adds	r7, #8
   80b76:	46bd      	mov	sp, r7
   80b78:	bd80      	pop	{r7, pc}
   80b7a:	bf00      	nop
   80b7c:	00080e99 	.word	0x00080e99
   80b80:	400e0600 	.word	0x400e0600

00080b84 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80b84:	b580      	push	{r7, lr}
   80b86:	b082      	sub	sp, #8
   80b88:	af00      	add	r7, sp, #0
   80b8a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80b8c:	687b      	ldr	r3, [r7, #4]
   80b8e:	2b00      	cmp	r3, #0
   80b90:	d103      	bne.n	80b9a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   80b92:	4b05      	ldr	r3, [pc, #20]	; (80ba8 <pll_is_locked+0x24>)
   80b94:	4798      	blx	r3
   80b96:	4603      	mov	r3, r0
   80b98:	e002      	b.n	80ba0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80b9a:	4b04      	ldr	r3, [pc, #16]	; (80bac <pll_is_locked+0x28>)
   80b9c:	4798      	blx	r3
   80b9e:	4603      	mov	r3, r0
	}
}
   80ba0:	4618      	mov	r0, r3
   80ba2:	3708      	adds	r7, #8
   80ba4:	46bd      	mov	sp, r7
   80ba6:	bd80      	pop	{r7, pc}
   80ba8:	00080eb1 	.word	0x00080eb1
   80bac:	00080ec9 	.word	0x00080ec9

00080bb0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80bb0:	b580      	push	{r7, lr}
   80bb2:	b082      	sub	sp, #8
   80bb4:	af00      	add	r7, sp, #0
   80bb6:	4603      	mov	r3, r0
   80bb8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80bba:	79fb      	ldrb	r3, [r7, #7]
   80bbc:	3b03      	subs	r3, #3
   80bbe:	2b04      	cmp	r3, #4
   80bc0:	d808      	bhi.n	80bd4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   80bc2:	79fb      	ldrb	r3, [r7, #7]
   80bc4:	4618      	mov	r0, r3
   80bc6:	4b06      	ldr	r3, [pc, #24]	; (80be0 <pll_enable_source+0x30>)
   80bc8:	4798      	blx	r3
		osc_wait_ready(e_src);
   80bca:	79fb      	ldrb	r3, [r7, #7]
   80bcc:	4618      	mov	r0, r3
   80bce:	4b05      	ldr	r3, [pc, #20]	; (80be4 <pll_enable_source+0x34>)
   80bd0:	4798      	blx	r3
		break;
   80bd2:	e000      	b.n	80bd6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   80bd4:	bf00      	nop
	}
}
   80bd6:	bf00      	nop
   80bd8:	3708      	adds	r7, #8
   80bda:	46bd      	mov	sp, r7
   80bdc:	bd80      	pop	{r7, pc}
   80bde:	bf00      	nop
   80be0:	00080941 	.word	0x00080941
   80be4:	00080aad 	.word	0x00080aad

00080be8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   80be8:	b580      	push	{r7, lr}
   80bea:	b082      	sub	sp, #8
   80bec:	af00      	add	r7, sp, #0
   80bee:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80bf0:	bf00      	nop
   80bf2:	6878      	ldr	r0, [r7, #4]
   80bf4:	4b04      	ldr	r3, [pc, #16]	; (80c08 <pll_wait_for_lock+0x20>)
   80bf6:	4798      	blx	r3
   80bf8:	4603      	mov	r3, r0
   80bfa:	2b00      	cmp	r3, #0
   80bfc:	d0f9      	beq.n	80bf2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   80bfe:	2300      	movs	r3, #0
}
   80c00:	4618      	mov	r0, r3
   80c02:	3708      	adds	r7, #8
   80c04:	46bd      	mov	sp, r7
   80c06:	bd80      	pop	{r7, pc}
   80c08:	00080b85 	.word	0x00080b85

00080c0c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80c0c:	b580      	push	{r7, lr}
   80c0e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80c10:	2006      	movs	r0, #6
   80c12:	4b04      	ldr	r3, [pc, #16]	; (80c24 <sysclk_get_main_hz+0x18>)
   80c14:	4798      	blx	r3
   80c16:	4602      	mov	r2, r0
   80c18:	4613      	mov	r3, r2
   80c1a:	00db      	lsls	r3, r3, #3
   80c1c:	1a9b      	subs	r3, r3, r2
   80c1e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80c20:	4618      	mov	r0, r3
   80c22:	bd80      	pop	{r7, pc}
   80c24:	00080a39 	.word	0x00080a39

00080c28 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80c28:	b580      	push	{r7, lr}
   80c2a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80c2c:	4b02      	ldr	r3, [pc, #8]	; (80c38 <sysclk_get_cpu_hz+0x10>)
   80c2e:	4798      	blx	r3
   80c30:	4603      	mov	r3, r0
   80c32:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80c34:	4618      	mov	r0, r3
   80c36:	bd80      	pop	{r7, pc}
   80c38:	00080c0d 	.word	0x00080c0d

00080c3c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80c3c:	b590      	push	{r4, r7, lr}
   80c3e:	b083      	sub	sp, #12
   80c40:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80c42:	4811      	ldr	r0, [pc, #68]	; (80c88 <sysclk_init+0x4c>)
   80c44:	4b11      	ldr	r3, [pc, #68]	; (80c8c <sysclk_init+0x50>)
   80c46:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   80c48:	2006      	movs	r0, #6
   80c4a:	4b11      	ldr	r3, [pc, #68]	; (80c90 <sysclk_init+0x54>)
   80c4c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80c4e:	1d38      	adds	r0, r7, #4
   80c50:	230e      	movs	r3, #14
   80c52:	2201      	movs	r2, #1
   80c54:	2106      	movs	r1, #6
   80c56:	4c0f      	ldr	r4, [pc, #60]	; (80c94 <sysclk_init+0x58>)
   80c58:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80c5a:	1d3b      	adds	r3, r7, #4
   80c5c:	2100      	movs	r1, #0
   80c5e:	4618      	mov	r0, r3
   80c60:	4b0d      	ldr	r3, [pc, #52]	; (80c98 <sysclk_init+0x5c>)
   80c62:	4798      	blx	r3
		pll_wait_for_lock(0);
   80c64:	2000      	movs	r0, #0
   80c66:	4b0d      	ldr	r3, [pc, #52]	; (80c9c <sysclk_init+0x60>)
   80c68:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80c6a:	2010      	movs	r0, #16
   80c6c:	4b0c      	ldr	r3, [pc, #48]	; (80ca0 <sysclk_init+0x64>)
   80c6e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80c70:	4b0c      	ldr	r3, [pc, #48]	; (80ca4 <sysclk_init+0x68>)
   80c72:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80c74:	4b0c      	ldr	r3, [pc, #48]	; (80ca8 <sysclk_init+0x6c>)
   80c76:	4798      	blx	r3
   80c78:	4603      	mov	r3, r0
   80c7a:	4618      	mov	r0, r3
   80c7c:	4b03      	ldr	r3, [pc, #12]	; (80c8c <sysclk_init+0x50>)
   80c7e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80c80:	bf00      	nop
   80c82:	370c      	adds	r7, #12
   80c84:	46bd      	mov	sp, r7
   80c86:	bd90      	pop	{r4, r7, pc}
   80c88:	0501bd00 	.word	0x0501bd00
   80c8c:	200700d1 	.word	0x200700d1
   80c90:	00080bb1 	.word	0x00080bb1
   80c94:	00080ad9 	.word	0x00080ad9
   80c98:	00080b45 	.word	0x00080b45
   80c9c:	00080be9 	.word	0x00080be9
   80ca0:	00080cad 	.word	0x00080cad
   80ca4:	00081461 	.word	0x00081461
   80ca8:	00080c29 	.word	0x00080c29

00080cac <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   80cac:	b480      	push	{r7}
   80cae:	b085      	sub	sp, #20
   80cb0:	af00      	add	r7, sp, #0
   80cb2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80cb4:	491c      	ldr	r1, [pc, #112]	; (80d28 <pmc_switch_mck_to_pllack+0x7c>)
   80cb6:	4b1c      	ldr	r3, [pc, #112]	; (80d28 <pmc_switch_mck_to_pllack+0x7c>)
   80cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   80cbe:	687b      	ldr	r3, [r7, #4]
   80cc0:	4313      	orrs	r3, r2
   80cc2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80cc8:	60fb      	str	r3, [r7, #12]
   80cca:	e007      	b.n	80cdc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80ccc:	68fb      	ldr	r3, [r7, #12]
   80cce:	2b00      	cmp	r3, #0
   80cd0:	d101      	bne.n	80cd6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   80cd2:	2301      	movs	r3, #1
   80cd4:	e023      	b.n	80d1e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   80cd6:	68fb      	ldr	r3, [r7, #12]
   80cd8:	3b01      	subs	r3, #1
   80cda:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cdc:	4b12      	ldr	r3, [pc, #72]	; (80d28 <pmc_switch_mck_to_pllack+0x7c>)
   80cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80ce0:	f003 0308 	and.w	r3, r3, #8
   80ce4:	2b00      	cmp	r3, #0
   80ce6:	d0f1      	beq.n	80ccc <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80ce8:	4a0f      	ldr	r2, [pc, #60]	; (80d28 <pmc_switch_mck_to_pllack+0x7c>)
   80cea:	4b0f      	ldr	r3, [pc, #60]	; (80d28 <pmc_switch_mck_to_pllack+0x7c>)
   80cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80cee:	f023 0303 	bic.w	r3, r3, #3
   80cf2:	f043 0302 	orr.w	r3, r3, #2
   80cf6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80cfc:	60fb      	str	r3, [r7, #12]
   80cfe:	e007      	b.n	80d10 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d00:	68fb      	ldr	r3, [r7, #12]
   80d02:	2b00      	cmp	r3, #0
   80d04:	d101      	bne.n	80d0a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   80d06:	2301      	movs	r3, #1
   80d08:	e009      	b.n	80d1e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   80d0a:	68fb      	ldr	r3, [r7, #12]
   80d0c:	3b01      	subs	r3, #1
   80d0e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d10:	4b05      	ldr	r3, [pc, #20]	; (80d28 <pmc_switch_mck_to_pllack+0x7c>)
   80d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80d14:	f003 0308 	and.w	r3, r3, #8
   80d18:	2b00      	cmp	r3, #0
   80d1a:	d0f1      	beq.n	80d00 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   80d1c:	2300      	movs	r3, #0
}
   80d1e:	4618      	mov	r0, r3
   80d20:	3714      	adds	r7, #20
   80d22:	46bd      	mov	sp, r7
   80d24:	bc80      	pop	{r7}
   80d26:	4770      	bx	lr
   80d28:	400e0600 	.word	0x400e0600

00080d2c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   80d2c:	b480      	push	{r7}
   80d2e:	b083      	sub	sp, #12
   80d30:	af00      	add	r7, sp, #0
   80d32:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   80d34:	687b      	ldr	r3, [r7, #4]
   80d36:	2b01      	cmp	r3, #1
   80d38:	d107      	bne.n	80d4a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   80d3a:	4a08      	ldr	r2, [pc, #32]	; (80d5c <pmc_switch_sclk_to_32kxtal+0x30>)
   80d3c:	4b07      	ldr	r3, [pc, #28]	; (80d5c <pmc_switch_sclk_to_32kxtal+0x30>)
   80d3e:	689b      	ldr	r3, [r3, #8]
   80d40:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80d48:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   80d4a:	4b04      	ldr	r3, [pc, #16]	; (80d5c <pmc_switch_sclk_to_32kxtal+0x30>)
   80d4c:	4a04      	ldr	r2, [pc, #16]	; (80d60 <pmc_switch_sclk_to_32kxtal+0x34>)
   80d4e:	601a      	str	r2, [r3, #0]
}
   80d50:	bf00      	nop
   80d52:	370c      	adds	r7, #12
   80d54:	46bd      	mov	sp, r7
   80d56:	bc80      	pop	{r7}
   80d58:	4770      	bx	lr
   80d5a:	bf00      	nop
   80d5c:	400e1a10 	.word	0x400e1a10
   80d60:	a5000008 	.word	0xa5000008

00080d64 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   80d64:	b480      	push	{r7}
   80d66:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   80d68:	4b09      	ldr	r3, [pc, #36]	; (80d90 <pmc_osc_is_ready_32kxtal+0x2c>)
   80d6a:	695b      	ldr	r3, [r3, #20]
   80d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   80d70:	2b00      	cmp	r3, #0
   80d72:	d007      	beq.n	80d84 <pmc_osc_is_ready_32kxtal+0x20>
   80d74:	4b07      	ldr	r3, [pc, #28]	; (80d94 <pmc_osc_is_ready_32kxtal+0x30>)
   80d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80d7c:	2b00      	cmp	r3, #0
   80d7e:	d001      	beq.n	80d84 <pmc_osc_is_ready_32kxtal+0x20>
   80d80:	2301      	movs	r3, #1
   80d82:	e000      	b.n	80d86 <pmc_osc_is_ready_32kxtal+0x22>
   80d84:	2300      	movs	r3, #0
}
   80d86:	4618      	mov	r0, r3
   80d88:	46bd      	mov	sp, r7
   80d8a:	bc80      	pop	{r7}
   80d8c:	4770      	bx	lr
   80d8e:	bf00      	nop
   80d90:	400e1a10 	.word	0x400e1a10
   80d94:	400e0600 	.word	0x400e0600

00080d98 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   80d98:	b480      	push	{r7}
   80d9a:	b083      	sub	sp, #12
   80d9c:	af00      	add	r7, sp, #0
   80d9e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   80da0:	4a18      	ldr	r2, [pc, #96]	; (80e04 <pmc_switch_mainck_to_fastrc+0x6c>)
   80da2:	4b18      	ldr	r3, [pc, #96]	; (80e04 <pmc_switch_mainck_to_fastrc+0x6c>)
   80da4:	6a1b      	ldr	r3, [r3, #32]
   80da6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80daa:	f043 0308 	orr.w	r3, r3, #8
   80dae:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80db0:	bf00      	nop
   80db2:	4b14      	ldr	r3, [pc, #80]	; (80e04 <pmc_switch_mainck_to_fastrc+0x6c>)
   80db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80dba:	2b00      	cmp	r3, #0
   80dbc:	d0f9      	beq.n	80db2 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80dbe:	4911      	ldr	r1, [pc, #68]	; (80e04 <pmc_switch_mainck_to_fastrc+0x6c>)
   80dc0:	4b10      	ldr	r3, [pc, #64]	; (80e04 <pmc_switch_mainck_to_fastrc+0x6c>)
   80dc2:	6a1b      	ldr	r3, [r3, #32]
   80dc4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   80dcc:	687a      	ldr	r2, [r7, #4]
   80dce:	4313      	orrs	r3, r2
   80dd0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80dd4:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80dd6:	bf00      	nop
   80dd8:	4b0a      	ldr	r3, [pc, #40]	; (80e04 <pmc_switch_mainck_to_fastrc+0x6c>)
   80dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80de0:	2b00      	cmp	r3, #0
   80de2:	d0f9      	beq.n	80dd8 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   80de4:	4a07      	ldr	r2, [pc, #28]	; (80e04 <pmc_switch_mainck_to_fastrc+0x6c>)
   80de6:	4b07      	ldr	r3, [pc, #28]	; (80e04 <pmc_switch_mainck_to_fastrc+0x6c>)
   80de8:	6a1b      	ldr	r3, [r3, #32]
   80dea:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   80dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80df2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80df6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   80df8:	bf00      	nop
   80dfa:	370c      	adds	r7, #12
   80dfc:	46bd      	mov	sp, r7
   80dfe:	bc80      	pop	{r7}
   80e00:	4770      	bx	lr
   80e02:	bf00      	nop
   80e04:	400e0600 	.word	0x400e0600

00080e08 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   80e08:	b480      	push	{r7}
   80e0a:	b083      	sub	sp, #12
   80e0c:	af00      	add	r7, sp, #0
   80e0e:	6078      	str	r0, [r7, #4]
   80e10:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80e12:	687b      	ldr	r3, [r7, #4]
   80e14:	2b00      	cmp	r3, #0
   80e16:	d008      	beq.n	80e2a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80e18:	4916      	ldr	r1, [pc, #88]	; (80e74 <pmc_switch_mainck_to_xtal+0x6c>)
   80e1a:	4b16      	ldr	r3, [pc, #88]	; (80e74 <pmc_switch_mainck_to_xtal+0x6c>)
   80e1c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80e1e:	4a16      	ldr	r2, [pc, #88]	; (80e78 <pmc_switch_mainck_to_xtal+0x70>)
   80e20:	401a      	ands	r2, r3
   80e22:	4b16      	ldr	r3, [pc, #88]	; (80e7c <pmc_switch_mainck_to_xtal+0x74>)
   80e24:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80e26:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   80e28:	e01e      	b.n	80e68 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80e2a:	4912      	ldr	r1, [pc, #72]	; (80e74 <pmc_switch_mainck_to_xtal+0x6c>)
   80e2c:	4b11      	ldr	r3, [pc, #68]	; (80e74 <pmc_switch_mainck_to_xtal+0x6c>)
   80e2e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80e30:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80e34:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80e38:	683a      	ldr	r2, [r7, #0]
   80e3a:	0212      	lsls	r2, r2, #8
   80e3c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80e3e:	4313      	orrs	r3, r2
   80e40:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80e44:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80e48:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80e4a:	bf00      	nop
   80e4c:	4b09      	ldr	r3, [pc, #36]	; (80e74 <pmc_switch_mainck_to_xtal+0x6c>)
   80e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80e50:	f003 0301 	and.w	r3, r3, #1
   80e54:	2b00      	cmp	r3, #0
   80e56:	d0f9      	beq.n	80e4c <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80e58:	4a06      	ldr	r2, [pc, #24]	; (80e74 <pmc_switch_mainck_to_xtal+0x6c>)
   80e5a:	4b06      	ldr	r3, [pc, #24]	; (80e74 <pmc_switch_mainck_to_xtal+0x6c>)
   80e5c:	6a1b      	ldr	r3, [r3, #32]
   80e5e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80e66:	6213      	str	r3, [r2, #32]
}
   80e68:	bf00      	nop
   80e6a:	370c      	adds	r7, #12
   80e6c:	46bd      	mov	sp, r7
   80e6e:	bc80      	pop	{r7}
   80e70:	4770      	bx	lr
   80e72:	bf00      	nop
   80e74:	400e0600 	.word	0x400e0600
   80e78:	fec8fffc 	.word	0xfec8fffc
   80e7c:	01370002 	.word	0x01370002

00080e80 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   80e80:	b480      	push	{r7}
   80e82:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80e84:	4b03      	ldr	r3, [pc, #12]	; (80e94 <pmc_osc_is_ready_mainck+0x14>)
   80e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   80e8c:	4618      	mov	r0, r3
   80e8e:	46bd      	mov	sp, r7
   80e90:	bc80      	pop	{r7}
   80e92:	4770      	bx	lr
   80e94:	400e0600 	.word	0x400e0600

00080e98 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   80e98:	b480      	push	{r7}
   80e9a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80e9c:	4b03      	ldr	r3, [pc, #12]	; (80eac <pmc_disable_pllack+0x14>)
   80e9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80ea2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   80ea4:	bf00      	nop
   80ea6:	46bd      	mov	sp, r7
   80ea8:	bc80      	pop	{r7}
   80eaa:	4770      	bx	lr
   80eac:	400e0600 	.word	0x400e0600

00080eb0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   80eb0:	b480      	push	{r7}
   80eb2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80eb4:	4b03      	ldr	r3, [pc, #12]	; (80ec4 <pmc_is_locked_pllack+0x14>)
   80eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80eb8:	f003 0302 	and.w	r3, r3, #2
}
   80ebc:	4618      	mov	r0, r3
   80ebe:	46bd      	mov	sp, r7
   80ec0:	bc80      	pop	{r7}
   80ec2:	4770      	bx	lr
   80ec4:	400e0600 	.word	0x400e0600

00080ec8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   80ec8:	b480      	push	{r7}
   80eca:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   80ecc:	4b03      	ldr	r3, [pc, #12]	; (80edc <pmc_is_locked_upll+0x14>)
   80ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   80ed4:	4618      	mov	r0, r3
   80ed6:	46bd      	mov	sp, r7
   80ed8:	bc80      	pop	{r7}
   80eda:	4770      	bx	lr
   80edc:	400e0600 	.word	0x400e0600

00080ee0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   80ee0:	b480      	push	{r7}
   80ee2:	b083      	sub	sp, #12
   80ee4:	af00      	add	r7, sp, #0
   80ee6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   80ee8:	687b      	ldr	r3, [r7, #4]
   80eea:	2b2c      	cmp	r3, #44	; 0x2c
   80eec:	d901      	bls.n	80ef2 <pmc_enable_periph_clk+0x12>
		return 1;
   80eee:	2301      	movs	r3, #1
   80ef0:	e02f      	b.n	80f52 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   80ef2:	687b      	ldr	r3, [r7, #4]
   80ef4:	2b1f      	cmp	r3, #31
   80ef6:	d813      	bhi.n	80f20 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80ef8:	4b18      	ldr	r3, [pc, #96]	; (80f5c <pmc_enable_periph_clk+0x7c>)
   80efa:	699a      	ldr	r2, [r3, #24]
   80efc:	2101      	movs	r1, #1
   80efe:	687b      	ldr	r3, [r7, #4]
   80f00:	fa01 f303 	lsl.w	r3, r1, r3
   80f04:	401a      	ands	r2, r3
   80f06:	2101      	movs	r1, #1
   80f08:	687b      	ldr	r3, [r7, #4]
   80f0a:	fa01 f303 	lsl.w	r3, r1, r3
   80f0e:	429a      	cmp	r2, r3
   80f10:	d01e      	beq.n	80f50 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   80f12:	4a12      	ldr	r2, [pc, #72]	; (80f5c <pmc_enable_periph_clk+0x7c>)
   80f14:	2101      	movs	r1, #1
   80f16:	687b      	ldr	r3, [r7, #4]
   80f18:	fa01 f303 	lsl.w	r3, r1, r3
   80f1c:	6113      	str	r3, [r2, #16]
   80f1e:	e017      	b.n	80f50 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80f20:	687b      	ldr	r3, [r7, #4]
   80f22:	3b20      	subs	r3, #32
   80f24:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80f26:	4b0d      	ldr	r3, [pc, #52]	; (80f5c <pmc_enable_periph_clk+0x7c>)
   80f28:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80f2c:	2101      	movs	r1, #1
   80f2e:	687b      	ldr	r3, [r7, #4]
   80f30:	fa01 f303 	lsl.w	r3, r1, r3
   80f34:	401a      	ands	r2, r3
   80f36:	2101      	movs	r1, #1
   80f38:	687b      	ldr	r3, [r7, #4]
   80f3a:	fa01 f303 	lsl.w	r3, r1, r3
   80f3e:	429a      	cmp	r2, r3
   80f40:	d006      	beq.n	80f50 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   80f42:	4a06      	ldr	r2, [pc, #24]	; (80f5c <pmc_enable_periph_clk+0x7c>)
   80f44:	2101      	movs	r1, #1
   80f46:	687b      	ldr	r3, [r7, #4]
   80f48:	fa01 f303 	lsl.w	r3, r1, r3
   80f4c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80f50:	2300      	movs	r3, #0
}
   80f52:	4618      	mov	r0, r3
   80f54:	370c      	adds	r7, #12
   80f56:	46bd      	mov	sp, r7
   80f58:	bc80      	pop	{r7}
   80f5a:	4770      	bx	lr
   80f5c:	400e0600 	.word	0x400e0600

00080f60 <osc_get_rate>:
{
   80f60:	b480      	push	{r7}
   80f62:	b083      	sub	sp, #12
   80f64:	af00      	add	r7, sp, #0
   80f66:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80f68:	687b      	ldr	r3, [r7, #4]
   80f6a:	2b07      	cmp	r3, #7
   80f6c:	d825      	bhi.n	80fba <osc_get_rate+0x5a>
   80f6e:	a201      	add	r2, pc, #4	; (adr r2, 80f74 <osc_get_rate+0x14>)
   80f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80f74:	00080f95 	.word	0x00080f95
   80f78:	00080f9b 	.word	0x00080f9b
   80f7c:	00080fa1 	.word	0x00080fa1
   80f80:	00080fa7 	.word	0x00080fa7
   80f84:	00080fab 	.word	0x00080fab
   80f88:	00080faf 	.word	0x00080faf
   80f8c:	00080fb3 	.word	0x00080fb3
   80f90:	00080fb7 	.word	0x00080fb7
		return OSC_SLCK_32K_RC_HZ;
   80f94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80f98:	e010      	b.n	80fbc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   80f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80f9e:	e00d      	b.n	80fbc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   80fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80fa4:	e00a      	b.n	80fbc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   80fa6:	4b08      	ldr	r3, [pc, #32]	; (80fc8 <osc_get_rate+0x68>)
   80fa8:	e008      	b.n	80fbc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   80faa:	4b08      	ldr	r3, [pc, #32]	; (80fcc <osc_get_rate+0x6c>)
   80fac:	e006      	b.n	80fbc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   80fae:	4b08      	ldr	r3, [pc, #32]	; (80fd0 <osc_get_rate+0x70>)
   80fb0:	e004      	b.n	80fbc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   80fb2:	4b07      	ldr	r3, [pc, #28]	; (80fd0 <osc_get_rate+0x70>)
   80fb4:	e002      	b.n	80fbc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   80fb6:	4b06      	ldr	r3, [pc, #24]	; (80fd0 <osc_get_rate+0x70>)
   80fb8:	e000      	b.n	80fbc <osc_get_rate+0x5c>
	return 0;
   80fba:	2300      	movs	r3, #0
}
   80fbc:	4618      	mov	r0, r3
   80fbe:	370c      	adds	r7, #12
   80fc0:	46bd      	mov	sp, r7
   80fc2:	bc80      	pop	{r7}
   80fc4:	4770      	bx	lr
   80fc6:	bf00      	nop
   80fc8:	003d0900 	.word	0x003d0900
   80fcc:	007a1200 	.word	0x007a1200
   80fd0:	00b71b00 	.word	0x00b71b00

00080fd4 <sysclk_get_main_hz>:
{
   80fd4:	b580      	push	{r7, lr}
   80fd6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   80fd8:	2006      	movs	r0, #6
   80fda:	4b04      	ldr	r3, [pc, #16]	; (80fec <sysclk_get_main_hz+0x18>)
   80fdc:	4798      	blx	r3
   80fde:	4602      	mov	r2, r0
   80fe0:	4613      	mov	r3, r2
   80fe2:	00db      	lsls	r3, r3, #3
   80fe4:	1a9b      	subs	r3, r3, r2
   80fe6:	005b      	lsls	r3, r3, #1
}
   80fe8:	4618      	mov	r0, r3
   80fea:	bd80      	pop	{r7, pc}
   80fec:	00080f61 	.word	0x00080f61

00080ff0 <sysclk_get_cpu_hz>:
{
   80ff0:	b580      	push	{r7, lr}
   80ff2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   80ff4:	4b02      	ldr	r3, [pc, #8]	; (81000 <sysclk_get_cpu_hz+0x10>)
   80ff6:	4798      	blx	r3
   80ff8:	4603      	mov	r3, r0
   80ffa:	085b      	lsrs	r3, r3, #1
}
   80ffc:	4618      	mov	r0, r3
   80ffe:	bd80      	pop	{r7, pc}
   81000:	00080fd5 	.word	0x00080fd5

00081004 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81004:	b580      	push	{r7, lr}
   81006:	b082      	sub	sp, #8
   81008:	af00      	add	r7, sp, #0
   8100a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8100c:	6878      	ldr	r0, [r7, #4]
   8100e:	4b03      	ldr	r3, [pc, #12]	; (8101c <sysclk_enable_peripheral_clock+0x18>)
   81010:	4798      	blx	r3
}
   81012:	bf00      	nop
   81014:	3708      	adds	r7, #8
   81016:	46bd      	mov	sp, r7
   81018:	bd80      	pop	{r7, pc}
   8101a:	bf00      	nop
   8101c:	00080ee1 	.word	0x00080ee1

00081020 <ioport_init>:
{
   81020:	b580      	push	{r7, lr}
   81022:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   81024:	200b      	movs	r0, #11
   81026:	4b06      	ldr	r3, [pc, #24]	; (81040 <ioport_init+0x20>)
   81028:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   8102a:	200c      	movs	r0, #12
   8102c:	4b04      	ldr	r3, [pc, #16]	; (81040 <ioport_init+0x20>)
   8102e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   81030:	200d      	movs	r0, #13
   81032:	4b03      	ldr	r3, [pc, #12]	; (81040 <ioport_init+0x20>)
   81034:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   81036:	200e      	movs	r0, #14
   81038:	4b01      	ldr	r3, [pc, #4]	; (81040 <ioport_init+0x20>)
   8103a:	4798      	blx	r3
}
   8103c:	bf00      	nop
   8103e:	bd80      	pop	{r7, pc}
   81040:	00081005 	.word	0x00081005

00081044 <ioport_disable_pin>:
{
   81044:	b480      	push	{r7}
   81046:	b089      	sub	sp, #36	; 0x24
   81048:	af00      	add	r7, sp, #0
   8104a:	6078      	str	r0, [r7, #4]
   8104c:	687b      	ldr	r3, [r7, #4]
   8104e:	61fb      	str	r3, [r7, #28]
   81050:	69fb      	ldr	r3, [r7, #28]
   81052:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   81054:	69bb      	ldr	r3, [r7, #24]
   81056:	095a      	lsrs	r2, r3, #5
   81058:	69fb      	ldr	r3, [r7, #28]
   8105a:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   8105c:	697b      	ldr	r3, [r7, #20]
   8105e:	f003 031f 	and.w	r3, r3, #31
   81062:	2101      	movs	r1, #1
   81064:	fa01 f303 	lsl.w	r3, r1, r3
   81068:	613a      	str	r2, [r7, #16]
   8106a:	60fb      	str	r3, [r7, #12]
   8106c:	693b      	ldr	r3, [r7, #16]
   8106e:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81070:	68bb      	ldr	r3, [r7, #8]
   81072:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81076:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8107a:	025b      	lsls	r3, r3, #9
   8107c:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   8107e:	68fb      	ldr	r3, [r7, #12]
   81080:	6053      	str	r3, [r2, #4]
}
   81082:	bf00      	nop
   81084:	3724      	adds	r7, #36	; 0x24
   81086:	46bd      	mov	sp, r7
   81088:	bc80      	pop	{r7}
   8108a:	4770      	bx	lr

0008108c <ioport_set_pin_mode>:
{
   8108c:	b480      	push	{r7}
   8108e:	b08d      	sub	sp, #52	; 0x34
   81090:	af00      	add	r7, sp, #0
   81092:	6078      	str	r0, [r7, #4]
   81094:	6039      	str	r1, [r7, #0]
   81096:	687b      	ldr	r3, [r7, #4]
   81098:	62fb      	str	r3, [r7, #44]	; 0x2c
   8109a:	683b      	ldr	r3, [r7, #0]
   8109c:	62bb      	str	r3, [r7, #40]	; 0x28
   8109e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   810a0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   810a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   810a4:	095a      	lsrs	r2, r3, #5
   810a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   810a8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   810aa:	6a3b      	ldr	r3, [r7, #32]
   810ac:	f003 031f 	and.w	r3, r3, #31
   810b0:	2101      	movs	r1, #1
   810b2:	fa01 f303 	lsl.w	r3, r1, r3
   810b6:	61fa      	str	r2, [r7, #28]
   810b8:	61bb      	str	r3, [r7, #24]
   810ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   810bc:	617b      	str	r3, [r7, #20]
   810be:	69fb      	ldr	r3, [r7, #28]
   810c0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   810c2:	693b      	ldr	r3, [r7, #16]
   810c4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   810c8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   810cc:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   810ce:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   810d0:	697b      	ldr	r3, [r7, #20]
   810d2:	f003 0308 	and.w	r3, r3, #8
   810d6:	2b00      	cmp	r3, #0
   810d8:	d003      	beq.n	810e2 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   810da:	68fb      	ldr	r3, [r7, #12]
   810dc:	69ba      	ldr	r2, [r7, #24]
   810de:	665a      	str	r2, [r3, #100]	; 0x64
   810e0:	e002      	b.n	810e8 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   810e2:	68fb      	ldr	r3, [r7, #12]
   810e4:	69ba      	ldr	r2, [r7, #24]
   810e6:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   810e8:	697b      	ldr	r3, [r7, #20]
   810ea:	f003 0320 	and.w	r3, r3, #32
   810ee:	2b00      	cmp	r3, #0
   810f0:	d003      	beq.n	810fa <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   810f2:	68fb      	ldr	r3, [r7, #12]
   810f4:	69ba      	ldr	r2, [r7, #24]
   810f6:	651a      	str	r2, [r3, #80]	; 0x50
   810f8:	e002      	b.n	81100 <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   810fa:	68fb      	ldr	r3, [r7, #12]
   810fc:	69ba      	ldr	r2, [r7, #24]
   810fe:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   81100:	697b      	ldr	r3, [r7, #20]
   81102:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   81106:	2b00      	cmp	r3, #0
   81108:	d003      	beq.n	81112 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   8110a:	68fb      	ldr	r3, [r7, #12]
   8110c:	69ba      	ldr	r2, [r7, #24]
   8110e:	621a      	str	r2, [r3, #32]
   81110:	e002      	b.n	81118 <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   81112:	68fb      	ldr	r3, [r7, #12]
   81114:	69ba      	ldr	r2, [r7, #24]
   81116:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   81118:	697b      	ldr	r3, [r7, #20]
   8111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8111e:	2b00      	cmp	r3, #0
   81120:	d004      	beq.n	8112c <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   81122:	68fb      	ldr	r3, [r7, #12]
   81124:	69ba      	ldr	r2, [r7, #24]
   81126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   8112a:	e003      	b.n	81134 <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   8112c:	68fb      	ldr	r3, [r7, #12]
   8112e:	69ba      	ldr	r2, [r7, #24]
   81130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   81134:	697b      	ldr	r3, [r7, #20]
   81136:	f003 0301 	and.w	r3, r3, #1
   8113a:	2b00      	cmp	r3, #0
   8113c:	d006      	beq.n	8114c <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   8113e:	68fb      	ldr	r3, [r7, #12]
   81140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81142:	69bb      	ldr	r3, [r7, #24]
   81144:	431a      	orrs	r2, r3
   81146:	68fb      	ldr	r3, [r7, #12]
   81148:	671a      	str	r2, [r3, #112]	; 0x70
}
   8114a:	e006      	b.n	8115a <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   8114c:	68fb      	ldr	r3, [r7, #12]
   8114e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81150:	69bb      	ldr	r3, [r7, #24]
   81152:	43db      	mvns	r3, r3
   81154:	401a      	ands	r2, r3
   81156:	68fb      	ldr	r3, [r7, #12]
   81158:	671a      	str	r2, [r3, #112]	; 0x70
   8115a:	bf00      	nop
   8115c:	3734      	adds	r7, #52	; 0x34
   8115e:	46bd      	mov	sp, r7
   81160:	bc80      	pop	{r7}
   81162:	4770      	bx	lr

00081164 <ioport_set_pin_dir>:
{
   81164:	b480      	push	{r7}
   81166:	b08d      	sub	sp, #52	; 0x34
   81168:	af00      	add	r7, sp, #0
   8116a:	6078      	str	r0, [r7, #4]
   8116c:	460b      	mov	r3, r1
   8116e:	70fb      	strb	r3, [r7, #3]
   81170:	687b      	ldr	r3, [r7, #4]
   81172:	62fb      	str	r3, [r7, #44]	; 0x2c
   81174:	78fb      	ldrb	r3, [r7, #3]
   81176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   8117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8117c:	627b      	str	r3, [r7, #36]	; 0x24
   8117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81180:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   81182:	6a3b      	ldr	r3, [r7, #32]
   81184:	095b      	lsrs	r3, r3, #5
   81186:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81188:	69fb      	ldr	r3, [r7, #28]
   8118a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8118e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81192:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   81194:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   81196:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   8119a:	2b01      	cmp	r3, #1
   8119c:	d109      	bne.n	811b2 <ioport_set_pin_dir+0x4e>
   8119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   811a0:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   811a2:	697b      	ldr	r3, [r7, #20]
   811a4:	f003 031f 	and.w	r3, r3, #31
   811a8:	2201      	movs	r2, #1
   811aa:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   811ac:	69bb      	ldr	r3, [r7, #24]
   811ae:	611a      	str	r2, [r3, #16]
   811b0:	e00c      	b.n	811cc <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   811b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   811b6:	2b00      	cmp	r3, #0
   811b8:	d108      	bne.n	811cc <ioport_set_pin_dir+0x68>
   811ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   811bc:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   811be:	693b      	ldr	r3, [r7, #16]
   811c0:	f003 031f 	and.w	r3, r3, #31
   811c4:	2201      	movs	r2, #1
   811c6:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   811c8:	69bb      	ldr	r3, [r7, #24]
   811ca:	615a      	str	r2, [r3, #20]
   811cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   811ce:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   811d0:	68fb      	ldr	r3, [r7, #12]
   811d2:	f003 031f 	and.w	r3, r3, #31
   811d6:	2201      	movs	r2, #1
   811d8:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   811da:	69bb      	ldr	r3, [r7, #24]
   811dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   811e0:	bf00      	nop
   811e2:	3734      	adds	r7, #52	; 0x34
   811e4:	46bd      	mov	sp, r7
   811e6:	bc80      	pop	{r7}
   811e8:	4770      	bx	lr

000811ea <ioport_set_pin_level>:
{
   811ea:	b480      	push	{r7}
   811ec:	b08b      	sub	sp, #44	; 0x2c
   811ee:	af00      	add	r7, sp, #0
   811f0:	6078      	str	r0, [r7, #4]
   811f2:	460b      	mov	r3, r1
   811f4:	70fb      	strb	r3, [r7, #3]
   811f6:	687b      	ldr	r3, [r7, #4]
   811f8:	627b      	str	r3, [r7, #36]	; 0x24
   811fa:	78fb      	ldrb	r3, [r7, #3]
   811fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81202:	61fb      	str	r3, [r7, #28]
   81204:	69fb      	ldr	r3, [r7, #28]
   81206:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   81208:	69bb      	ldr	r3, [r7, #24]
   8120a:	095b      	lsrs	r3, r3, #5
   8120c:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8120e:	697b      	ldr	r3, [r7, #20]
   81210:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81214:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81218:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   8121a:	613b      	str	r3, [r7, #16]
	if (level) {
   8121c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81220:	2b00      	cmp	r3, #0
   81222:	d009      	beq.n	81238 <ioport_set_pin_level+0x4e>
   81224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81226:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81228:	68fb      	ldr	r3, [r7, #12]
   8122a:	f003 031f 	and.w	r3, r3, #31
   8122e:	2201      	movs	r2, #1
   81230:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81232:	693b      	ldr	r3, [r7, #16]
   81234:	631a      	str	r2, [r3, #48]	; 0x30
}
   81236:	e008      	b.n	8124a <ioport_set_pin_level+0x60>
   81238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8123a:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   8123c:	68bb      	ldr	r3, [r7, #8]
   8123e:	f003 031f 	and.w	r3, r3, #31
   81242:	2201      	movs	r2, #1
   81244:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81246:	693b      	ldr	r3, [r7, #16]
   81248:	635a      	str	r2, [r3, #52]	; 0x34
   8124a:	bf00      	nop
   8124c:	372c      	adds	r7, #44	; 0x2c
   8124e:	46bd      	mov	sp, r7
   81250:	bc80      	pop	{r7}
   81252:	4770      	bx	lr

00081254 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   81254:	b598      	push	{r3, r4, r7, lr}
   81256:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81258:	4b47      	ldr	r3, [pc, #284]	; (81378 <board_init+0x124>)
   8125a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8125e:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   81260:	4b46      	ldr	r3, [pc, #280]	; (8137c <board_init+0x128>)
   81262:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   81264:	2101      	movs	r1, #1
   81266:	2063      	movs	r0, #99	; 0x63
   81268:	4b45      	ldr	r3, [pc, #276]	; (81380 <board_init+0x12c>)
   8126a:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   8126c:	2100      	movs	r1, #0
   8126e:	2063      	movs	r0, #99	; 0x63
   81270:	4b44      	ldr	r3, [pc, #272]	; (81384 <board_init+0x130>)
   81272:	4798      	blx	r3
	ioport_set_pin_dir(LED_S1, IOPORT_DIR_OUTPUT);
   81274:	2101      	movs	r1, #1
   81276:	2062      	movs	r0, #98	; 0x62
   81278:	4b41      	ldr	r3, [pc, #260]	; (81380 <board_init+0x12c>)
   8127a:	4798      	blx	r3
	ioport_set_pin_level(LED_S1, 0);
   8127c:	2100      	movs	r1, #0
   8127e:	2062      	movs	r0, #98	; 0x62
   81280:	4b40      	ldr	r3, [pc, #256]	; (81384 <board_init+0x130>)
   81282:	4798      	blx	r3
	ioport_set_pin_dir(LED_S2, IOPORT_DIR_OUTPUT);
   81284:	2101      	movs	r1, #1
   81286:	2061      	movs	r0, #97	; 0x61
   81288:	4b3d      	ldr	r3, [pc, #244]	; (81380 <board_init+0x12c>)
   8128a:	4798      	blx	r3
	ioport_set_pin_level(LED_S2, 0);
   8128c:	2100      	movs	r1, #0
   8128e:	2061      	movs	r0, #97	; 0x61
   81290:	4b3c      	ldr	r3, [pc, #240]	; (81384 <board_init+0x130>)
   81292:	4798      	blx	r3
	ioport_set_pin_dir(LED_S3, IOPORT_DIR_OUTPUT);
   81294:	2101      	movs	r1, #1
   81296:	2060      	movs	r0, #96	; 0x60
   81298:	4b39      	ldr	r3, [pc, #228]	; (81380 <board_init+0x12c>)
   8129a:	4798      	blx	r3
	ioport_set_pin_level(LED_S3, 0);
   8129c:	2100      	movs	r1, #0
   8129e:	2060      	movs	r0, #96	; 0x60
   812a0:	4b38      	ldr	r3, [pc, #224]	; (81384 <board_init+0x130>)
   812a2:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI0_MISO, IOPORT_MODE_MUX_A);
   812a4:	2100      	movs	r1, #0
   812a6:	2019      	movs	r0, #25
   812a8:	4b37      	ldr	r3, [pc, #220]	; (81388 <board_init+0x134>)
   812aa:	4798      	blx	r3
	ioport_disable_pin(SPI0_MISO);
   812ac:	2019      	movs	r0, #25
   812ae:	4b37      	ldr	r3, [pc, #220]	; (8138c <board_init+0x138>)
   812b0:	4798      	blx	r3
	ioport_set_pin_mode(SPI0_MOSI, IOPORT_MODE_MUX_A);
   812b2:	2100      	movs	r1, #0
   812b4:	201a      	movs	r0, #26
   812b6:	4b34      	ldr	r3, [pc, #208]	; (81388 <board_init+0x134>)
   812b8:	4798      	blx	r3
	ioport_disable_pin(SPI0_MOSI);
   812ba:	201a      	movs	r0, #26
   812bc:	4b33      	ldr	r3, [pc, #204]	; (8138c <board_init+0x138>)
   812be:	4798      	blx	r3
	ioport_set_pin_mode(SPI0_SPCK, IOPORT_MODE_MUX_A);
   812c0:	2100      	movs	r1, #0
   812c2:	201b      	movs	r0, #27
   812c4:	4b30      	ldr	r3, [pc, #192]	; (81388 <board_init+0x134>)
   812c6:	4798      	blx	r3
	ioport_disable_pin(SPI0_SPCK);
   812c8:	201b      	movs	r0, #27
   812ca:	4b30      	ldr	r3, [pc, #192]	; (8138c <board_init+0x138>)
   812cc:	4798      	blx	r3
	ioport_set_pin_mode(SPI0_NPCS0, IOPORT_MODE_MUX_A);
   812ce:	2100      	movs	r1, #0
   812d0:	201c      	movs	r0, #28
   812d2:	4b2d      	ldr	r3, [pc, #180]	; (81388 <board_init+0x134>)
   812d4:	4798      	blx	r3
	ioport_disable_pin(SPI0_NPCS0);
   812d6:	201c      	movs	r0, #28
   812d8:	4b2c      	ldr	r3, [pc, #176]	; (8138c <board_init+0x138>)
   812da:	4798      	blx	r3
    
    /* Configure ADC */
    pmc_enable_periph_clk(ID_ADC);
   812dc:	2025      	movs	r0, #37	; 0x25
   812de:	4b2c      	ldr	r3, [pc, #176]	; (81390 <board_init+0x13c>)
   812e0:	4798      	blx	r3
    adc_init(ADC, sysclk_get_cpu_hz(), 6400000, ADC_STARTUP_TIME_4);
   812e2:	4b2c      	ldr	r3, [pc, #176]	; (81394 <board_init+0x140>)
   812e4:	4798      	blx	r3
   812e6:	4601      	mov	r1, r0
   812e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   812ec:	4a2a      	ldr	r2, [pc, #168]	; (81398 <board_init+0x144>)
   812ee:	482b      	ldr	r0, [pc, #172]	; (8139c <board_init+0x148>)
   812f0:	4c2b      	ldr	r4, [pc, #172]	; (813a0 <board_init+0x14c>)
   812f2:	47a0      	blx	r4
    adc_configure_timing(ADC, 1, ADC_SETTLING_TIME_3, 1);
   812f4:	2301      	movs	r3, #1
   812f6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   812fa:	2101      	movs	r1, #1
   812fc:	4827      	ldr	r0, [pc, #156]	; (8139c <board_init+0x148>)
   812fe:	4c29      	ldr	r4, [pc, #164]	; (813a4 <board_init+0x150>)
   81300:	47a0      	blx	r4
    adc_enable_channel(ADC, BATTERY_VOLTAGE);
   81302:	2101      	movs	r1, #1
   81304:	4825      	ldr	r0, [pc, #148]	; (8139c <board_init+0x148>)
   81306:	4b28      	ldr	r3, [pc, #160]	; (813a8 <board_init+0x154>)
   81308:	4798      	blx	r3
    adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   8130a:	2200      	movs	r2, #0
   8130c:	2100      	movs	r1, #0
   8130e:	4823      	ldr	r0, [pc, #140]	; (8139c <board_init+0x148>)
   81310:	4b26      	ldr	r3, [pc, #152]	; (813ac <board_init+0x158>)
   81312:	4798      	blx	r3
    
    /* Configure Line Sensor pins */
    ioport_set_pin_mode(LINE1, LINE_FLAGS);
   81314:	2108      	movs	r1, #8
   81316:	2051      	movs	r0, #81	; 0x51
   81318:	4b1b      	ldr	r3, [pc, #108]	; (81388 <board_init+0x134>)
   8131a:	4798      	blx	r3
    ioport_set_pin_mode(LINE2, LINE_FLAGS);
   8131c:	2108      	movs	r1, #8
   8131e:	2053      	movs	r0, #83	; 0x53
   81320:	4b19      	ldr	r3, [pc, #100]	; (81388 <board_init+0x134>)
   81322:	4798      	blx	r3
    ioport_set_pin_mode(LINE3, LINE_FLAGS);
   81324:	2108      	movs	r1, #8
   81326:	205e      	movs	r0, #94	; 0x5e
   81328:	4b17      	ldr	r3, [pc, #92]	; (81388 <board_init+0x134>)
   8132a:	4798      	blx	r3
    ioport_set_pin_mode(LINE4, LINE_FLAGS);
   8132c:	2108      	movs	r1, #8
   8132e:	2054      	movs	r0, #84	; 0x54
   81330:	4b15      	ldr	r3, [pc, #84]	; (81388 <board_init+0x134>)
   81332:	4798      	blx	r3
    ioport_set_pin_mode(LINE5, LINE_FLAGS);
   81334:	2108      	movs	r1, #8
   81336:	2056      	movs	r0, #86	; 0x56
   81338:	4b13      	ldr	r3, [pc, #76]	; (81388 <board_init+0x134>)
   8133a:	4798      	blx	r3
    ioport_set_pin_mode(LINE6, LINE_FLAGS);
   8133c:	2108      	movs	r1, #8
   8133e:	2058      	movs	r0, #88	; 0x58
   81340:	4b11      	ldr	r3, [pc, #68]	; (81388 <board_init+0x134>)
   81342:	4798      	blx	r3
    ioport_set_pin_mode(LINE7, LINE_FLAGS);
   81344:	2108      	movs	r1, #8
   81346:	205b      	movs	r0, #91	; 0x5b
   81348:	4b0f      	ldr	r3, [pc, #60]	; (81388 <board_init+0x134>)
   8134a:	4798      	blx	r3
    ioport_set_pin_mode(LINE8, LINE_FLAGS);
   8134c:	2108      	movs	r1, #8
   8134e:	2043      	movs	r0, #67	; 0x43
   81350:	4b0d      	ldr	r3, [pc, #52]	; (81388 <board_init+0x134>)
   81352:	4798      	blx	r3
    ioport_set_pin_mode(LINE9, LINE_FLAGS);
   81354:	2108      	movs	r1, #8
   81356:	2047      	movs	r0, #71	; 0x47
   81358:	4b0b      	ldr	r3, [pc, #44]	; (81388 <board_init+0x134>)
   8135a:	4798      	blx	r3
    ioport_set_pin_mode(LINE10, LINE_FLAGS);
   8135c:	2108      	movs	r1, #8
   8135e:	204b      	movs	r0, #75	; 0x4b
   81360:	4b09      	ldr	r3, [pc, #36]	; (81388 <board_init+0x134>)
   81362:	4798      	blx	r3
    ioport_set_pin_mode(LINE11, LINE_FLAGS);
   81364:	2108      	movs	r1, #8
   81366:	204d      	movs	r0, #77	; 0x4d
   81368:	4b07      	ldr	r3, [pc, #28]	; (81388 <board_init+0x134>)
   8136a:	4798      	blx	r3
    ioport_set_pin_mode(LINE12, LINE_FLAGS);
   8136c:	2108      	movs	r1, #8
   8136e:	204f      	movs	r0, #79	; 0x4f
   81370:	4b05      	ldr	r3, [pc, #20]	; (81388 <board_init+0x134>)
   81372:	4798      	blx	r3
}
   81374:	bf00      	nop
   81376:	bd98      	pop	{r3, r4, r7, pc}
   81378:	400e1a50 	.word	0x400e1a50
   8137c:	00081021 	.word	0x00081021
   81380:	00081165 	.word	0x00081165
   81384:	000811eb 	.word	0x000811eb
   81388:	0008108d 	.word	0x0008108d
   8138c:	00081045 	.word	0x00081045
   81390:	00080ee1 	.word	0x00080ee1
   81394:	00080ff1 	.word	0x00080ff1
   81398:	0061a800 	.word	0x0061a800
   8139c:	400c0000 	.word	0x400c0000
   813a0:	00080161 	.word	0x00080161
   813a4:	000801f1 	.word	0x000801f1
   813a8:	00080247 	.word	0x00080247
   813ac:	000801c3 	.word	0x000801c3

000813b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   813b0:	b480      	push	{r7}
   813b2:	af00      	add	r7, sp, #0
	while (1) {
   813b4:	e7fe      	b.n	813b4 <Dummy_Handler+0x4>
	...

000813b8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   813b8:	b580      	push	{r7, lr}
   813ba:	b082      	sub	sp, #8
   813bc:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   813be:	4b1e      	ldr	r3, [pc, #120]	; (81438 <Reset_Handler+0x80>)
   813c0:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   813c2:	4b1e      	ldr	r3, [pc, #120]	; (8143c <Reset_Handler+0x84>)
   813c4:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   813c6:	687a      	ldr	r2, [r7, #4]
   813c8:	683b      	ldr	r3, [r7, #0]
   813ca:	429a      	cmp	r2, r3
   813cc:	d00c      	beq.n	813e8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   813ce:	e007      	b.n	813e0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   813d0:	683b      	ldr	r3, [r7, #0]
   813d2:	1d1a      	adds	r2, r3, #4
   813d4:	603a      	str	r2, [r7, #0]
   813d6:	687a      	ldr	r2, [r7, #4]
   813d8:	1d11      	adds	r1, r2, #4
   813da:	6079      	str	r1, [r7, #4]
   813dc:	6812      	ldr	r2, [r2, #0]
   813de:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   813e0:	683b      	ldr	r3, [r7, #0]
   813e2:	4a17      	ldr	r2, [pc, #92]	; (81440 <Reset_Handler+0x88>)
   813e4:	4293      	cmp	r3, r2
   813e6:	d3f3      	bcc.n	813d0 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   813e8:	4b16      	ldr	r3, [pc, #88]	; (81444 <Reset_Handler+0x8c>)
   813ea:	603b      	str	r3, [r7, #0]
   813ec:	e004      	b.n	813f8 <Reset_Handler+0x40>
		*pDest++ = 0;
   813ee:	683b      	ldr	r3, [r7, #0]
   813f0:	1d1a      	adds	r2, r3, #4
   813f2:	603a      	str	r2, [r7, #0]
   813f4:	2200      	movs	r2, #0
   813f6:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   813f8:	683b      	ldr	r3, [r7, #0]
   813fa:	4a13      	ldr	r2, [pc, #76]	; (81448 <Reset_Handler+0x90>)
   813fc:	4293      	cmp	r3, r2
   813fe:	d3f6      	bcc.n	813ee <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   81400:	4b12      	ldr	r3, [pc, #72]	; (8144c <Reset_Handler+0x94>)
   81402:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81404:	4a12      	ldr	r2, [pc, #72]	; (81450 <Reset_Handler+0x98>)
   81406:	687b      	ldr	r3, [r7, #4]
   81408:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8140c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81410:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81412:	687b      	ldr	r3, [r7, #4]
   81414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   81418:	d309      	bcc.n	8142e <Reset_Handler+0x76>
   8141a:	687b      	ldr	r3, [r7, #4]
   8141c:	4a0d      	ldr	r2, [pc, #52]	; (81454 <Reset_Handler+0x9c>)
   8141e:	4293      	cmp	r3, r2
   81420:	d805      	bhi.n	8142e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81422:	4a0b      	ldr	r2, [pc, #44]	; (81450 <Reset_Handler+0x98>)
   81424:	4b0a      	ldr	r3, [pc, #40]	; (81450 <Reset_Handler+0x98>)
   81426:	689b      	ldr	r3, [r3, #8]
   81428:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8142c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8142e:	4b0a      	ldr	r3, [pc, #40]	; (81458 <Reset_Handler+0xa0>)
   81430:	4798      	blx	r3

	/* Branch to main function */
	main();
   81432:	4b0a      	ldr	r3, [pc, #40]	; (8145c <Reset_Handler+0xa4>)
   81434:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   81436:	e7fe      	b.n	81436 <Reset_Handler+0x7e>
   81438:	00082a20 	.word	0x00082a20
   8143c:	20070000 	.word	0x20070000
   81440:	200705c4 	.word	0x200705c4
   81444:	200705c4 	.word	0x200705c4
   81448:	20070624 	.word	0x20070624
   8144c:	00080000 	.word	0x00080000
   81450:	e000ed00 	.word	0xe000ed00
   81454:	200fffff 	.word	0x200fffff
   81458:	00082889 	.word	0x00082889
   8145c:	00081a4d 	.word	0x00081a4d

00081460 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   81460:	b480      	push	{r7}
   81462:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81464:	4b57      	ldr	r3, [pc, #348]	; (815c4 <SystemCoreClockUpdate+0x164>)
   81466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81468:	f003 0303 	and.w	r3, r3, #3
   8146c:	2b03      	cmp	r3, #3
   8146e:	f200 808a 	bhi.w	81586 <SystemCoreClockUpdate+0x126>
   81472:	a201      	add	r2, pc, #4	; (adr r2, 81478 <SystemCoreClockUpdate+0x18>)
   81474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81478:	00081489 	.word	0x00081489
   8147c:	000814a9 	.word	0x000814a9
   81480:	000814f9 	.word	0x000814f9
   81484:	000814f9 	.word	0x000814f9
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81488:	4b4f      	ldr	r3, [pc, #316]	; (815c8 <SystemCoreClockUpdate+0x168>)
   8148a:	695b      	ldr	r3, [r3, #20]
   8148c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   81490:	2b00      	cmp	r3, #0
   81492:	d004      	beq.n	8149e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81494:	4b4d      	ldr	r3, [pc, #308]	; (815cc <SystemCoreClockUpdate+0x16c>)
   81496:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8149a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   8149c:	e073      	b.n	81586 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8149e:	4b4b      	ldr	r3, [pc, #300]	; (815cc <SystemCoreClockUpdate+0x16c>)
   814a0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   814a4:	601a      	str	r2, [r3, #0]
		break;
   814a6:	e06e      	b.n	81586 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   814a8:	4b46      	ldr	r3, [pc, #280]	; (815c4 <SystemCoreClockUpdate+0x164>)
   814aa:	6a1b      	ldr	r3, [r3, #32]
   814ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   814b0:	2b00      	cmp	r3, #0
   814b2:	d003      	beq.n	814bc <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   814b4:	4b45      	ldr	r3, [pc, #276]	; (815cc <SystemCoreClockUpdate+0x16c>)
   814b6:	4a46      	ldr	r2, [pc, #280]	; (815d0 <SystemCoreClockUpdate+0x170>)
   814b8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   814ba:	e064      	b.n	81586 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   814bc:	4b43      	ldr	r3, [pc, #268]	; (815cc <SystemCoreClockUpdate+0x16c>)
   814be:	4a45      	ldr	r2, [pc, #276]	; (815d4 <SystemCoreClockUpdate+0x174>)
   814c0:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   814c2:	4b40      	ldr	r3, [pc, #256]	; (815c4 <SystemCoreClockUpdate+0x164>)
   814c4:	6a1b      	ldr	r3, [r3, #32]
   814c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   814ca:	2b10      	cmp	r3, #16
   814cc:	d004      	beq.n	814d8 <SystemCoreClockUpdate+0x78>
   814ce:	2b20      	cmp	r3, #32
   814d0:	d008      	beq.n	814e4 <SystemCoreClockUpdate+0x84>
   814d2:	2b00      	cmp	r3, #0
   814d4:	d00e      	beq.n	814f4 <SystemCoreClockUpdate+0x94>
				break;
   814d6:	e00e      	b.n	814f6 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   814d8:	4b3c      	ldr	r3, [pc, #240]	; (815cc <SystemCoreClockUpdate+0x16c>)
   814da:	681b      	ldr	r3, [r3, #0]
   814dc:	005b      	lsls	r3, r3, #1
   814de:	4a3b      	ldr	r2, [pc, #236]	; (815cc <SystemCoreClockUpdate+0x16c>)
   814e0:	6013      	str	r3, [r2, #0]
				break;
   814e2:	e008      	b.n	814f6 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   814e4:	4b39      	ldr	r3, [pc, #228]	; (815cc <SystemCoreClockUpdate+0x16c>)
   814e6:	681a      	ldr	r2, [r3, #0]
   814e8:	4613      	mov	r3, r2
   814ea:	005b      	lsls	r3, r3, #1
   814ec:	4413      	add	r3, r2
   814ee:	4a37      	ldr	r2, [pc, #220]	; (815cc <SystemCoreClockUpdate+0x16c>)
   814f0:	6013      	str	r3, [r2, #0]
				break;
   814f2:	e000      	b.n	814f6 <SystemCoreClockUpdate+0x96>
				break;
   814f4:	bf00      	nop
		break;
   814f6:	e046      	b.n	81586 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   814f8:	4b32      	ldr	r3, [pc, #200]	; (815c4 <SystemCoreClockUpdate+0x164>)
   814fa:	6a1b      	ldr	r3, [r3, #32]
   814fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81500:	2b00      	cmp	r3, #0
   81502:	d003      	beq.n	8150c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81504:	4b31      	ldr	r3, [pc, #196]	; (815cc <SystemCoreClockUpdate+0x16c>)
   81506:	4a32      	ldr	r2, [pc, #200]	; (815d0 <SystemCoreClockUpdate+0x170>)
   81508:	601a      	str	r2, [r3, #0]
   8150a:	e01c      	b.n	81546 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8150c:	4b2f      	ldr	r3, [pc, #188]	; (815cc <SystemCoreClockUpdate+0x16c>)
   8150e:	4a31      	ldr	r2, [pc, #196]	; (815d4 <SystemCoreClockUpdate+0x174>)
   81510:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81512:	4b2c      	ldr	r3, [pc, #176]	; (815c4 <SystemCoreClockUpdate+0x164>)
   81514:	6a1b      	ldr	r3, [r3, #32]
   81516:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8151a:	2b10      	cmp	r3, #16
   8151c:	d004      	beq.n	81528 <SystemCoreClockUpdate+0xc8>
   8151e:	2b20      	cmp	r3, #32
   81520:	d008      	beq.n	81534 <SystemCoreClockUpdate+0xd4>
   81522:	2b00      	cmp	r3, #0
   81524:	d00e      	beq.n	81544 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   81526:	e00e      	b.n	81546 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   81528:	4b28      	ldr	r3, [pc, #160]	; (815cc <SystemCoreClockUpdate+0x16c>)
   8152a:	681b      	ldr	r3, [r3, #0]
   8152c:	005b      	lsls	r3, r3, #1
   8152e:	4a27      	ldr	r2, [pc, #156]	; (815cc <SystemCoreClockUpdate+0x16c>)
   81530:	6013      	str	r3, [r2, #0]
				break;
   81532:	e008      	b.n	81546 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   81534:	4b25      	ldr	r3, [pc, #148]	; (815cc <SystemCoreClockUpdate+0x16c>)
   81536:	681a      	ldr	r2, [r3, #0]
   81538:	4613      	mov	r3, r2
   8153a:	005b      	lsls	r3, r3, #1
   8153c:	4413      	add	r3, r2
   8153e:	4a23      	ldr	r2, [pc, #140]	; (815cc <SystemCoreClockUpdate+0x16c>)
   81540:	6013      	str	r3, [r2, #0]
				break;
   81542:	e000      	b.n	81546 <SystemCoreClockUpdate+0xe6>
				break;
   81544:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81546:	4b1f      	ldr	r3, [pc, #124]	; (815c4 <SystemCoreClockUpdate+0x164>)
   81548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8154a:	f003 0303 	and.w	r3, r3, #3
   8154e:	2b02      	cmp	r3, #2
   81550:	d115      	bne.n	8157e <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81552:	4b1c      	ldr	r3, [pc, #112]	; (815c4 <SystemCoreClockUpdate+0x164>)
   81554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   81556:	0c1b      	lsrs	r3, r3, #16
   81558:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   8155c:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8155e:	4a1b      	ldr	r2, [pc, #108]	; (815cc <SystemCoreClockUpdate+0x16c>)
   81560:	6812      	ldr	r2, [r2, #0]
   81562:	fb02 f303 	mul.w	r3, r2, r3
   81566:	4a19      	ldr	r2, [pc, #100]	; (815cc <SystemCoreClockUpdate+0x16c>)
   81568:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8156a:	4b16      	ldr	r3, [pc, #88]	; (815c4 <SystemCoreClockUpdate+0x164>)
   8156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8156e:	b2db      	uxtb	r3, r3
   81570:	4a16      	ldr	r2, [pc, #88]	; (815cc <SystemCoreClockUpdate+0x16c>)
   81572:	6812      	ldr	r2, [r2, #0]
   81574:	fbb2 f3f3 	udiv	r3, r2, r3
   81578:	4a14      	ldr	r2, [pc, #80]	; (815cc <SystemCoreClockUpdate+0x16c>)
   8157a:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   8157c:	e002      	b.n	81584 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8157e:	4b13      	ldr	r3, [pc, #76]	; (815cc <SystemCoreClockUpdate+0x16c>)
   81580:	4a15      	ldr	r2, [pc, #84]	; (815d8 <SystemCoreClockUpdate+0x178>)
   81582:	601a      	str	r2, [r3, #0]
		break;
   81584:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81586:	4b0f      	ldr	r3, [pc, #60]	; (815c4 <SystemCoreClockUpdate+0x164>)
   81588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8158a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8158e:	2b70      	cmp	r3, #112	; 0x70
   81590:	d108      	bne.n	815a4 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   81592:	4b0e      	ldr	r3, [pc, #56]	; (815cc <SystemCoreClockUpdate+0x16c>)
   81594:	681b      	ldr	r3, [r3, #0]
   81596:	4a11      	ldr	r2, [pc, #68]	; (815dc <SystemCoreClockUpdate+0x17c>)
   81598:	fba2 2303 	umull	r2, r3, r2, r3
   8159c:	085b      	lsrs	r3, r3, #1
   8159e:	4a0b      	ldr	r2, [pc, #44]	; (815cc <SystemCoreClockUpdate+0x16c>)
   815a0:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   815a2:	e00a      	b.n	815ba <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   815a4:	4b07      	ldr	r3, [pc, #28]	; (815c4 <SystemCoreClockUpdate+0x164>)
   815a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   815a8:	091b      	lsrs	r3, r3, #4
   815aa:	f003 0307 	and.w	r3, r3, #7
   815ae:	4a07      	ldr	r2, [pc, #28]	; (815cc <SystemCoreClockUpdate+0x16c>)
   815b0:	6812      	ldr	r2, [r2, #0]
   815b2:	fa22 f303 	lsr.w	r3, r2, r3
   815b6:	4a05      	ldr	r2, [pc, #20]	; (815cc <SystemCoreClockUpdate+0x16c>)
   815b8:	6013      	str	r3, [r2, #0]
}
   815ba:	bf00      	nop
   815bc:	46bd      	mov	sp, r7
   815be:	bc80      	pop	{r7}
   815c0:	4770      	bx	lr
   815c2:	bf00      	nop
   815c4:	400e0600 	.word	0x400e0600
   815c8:	400e1a10 	.word	0x400e1a10
   815cc:	20070190 	.word	0x20070190
   815d0:	00b71b00 	.word	0x00b71b00
   815d4:	003d0900 	.word	0x003d0900
   815d8:	0e4e1c00 	.word	0x0e4e1c00
   815dc:	aaaaaaab 	.word	0xaaaaaaab

000815e0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   815e0:	b480      	push	{r7}
   815e2:	b083      	sub	sp, #12
   815e4:	af00      	add	r7, sp, #0
   815e6:	4603      	mov	r3, r0
   815e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   815ea:	4908      	ldr	r1, [pc, #32]	; (8160c <NVIC_EnableIRQ+0x2c>)
   815ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
   815f0:	095b      	lsrs	r3, r3, #5
   815f2:	79fa      	ldrb	r2, [r7, #7]
   815f4:	f002 021f 	and.w	r2, r2, #31
   815f8:	2001      	movs	r0, #1
   815fa:	fa00 f202 	lsl.w	r2, r0, r2
   815fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81602:	bf00      	nop
   81604:	370c      	adds	r7, #12
   81606:	46bd      	mov	sp, r7
   81608:	bc80      	pop	{r7}
   8160a:	4770      	bx	lr
   8160c:	e000e100 	.word	0xe000e100

00081610 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   81610:	b480      	push	{r7}
   81612:	b083      	sub	sp, #12
   81614:	af00      	add	r7, sp, #0
   81616:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   81618:	687b      	ldr	r3, [r7, #4]
   8161a:	2280      	movs	r2, #128	; 0x80
   8161c:	601a      	str	r2, [r3, #0]
}
   8161e:	bf00      	nop
   81620:	370c      	adds	r7, #12
   81622:	46bd      	mov	sp, r7
   81624:	bc80      	pop	{r7}
   81626:	4770      	bx	lr

00081628 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   81628:	b480      	push	{r7}
   8162a:	b083      	sub	sp, #12
   8162c:	af00      	add	r7, sp, #0
   8162e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   81630:	687b      	ldr	r3, [r7, #4]
   81632:	2201      	movs	r2, #1
   81634:	601a      	str	r2, [r3, #0]
}
   81636:	bf00      	nop
   81638:	370c      	adds	r7, #12
   8163a:	46bd      	mov	sp, r7
   8163c:	bc80      	pop	{r7}
   8163e:	4770      	bx	lr

00081640 <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
   81640:	b480      	push	{r7}
   81642:	b083      	sub	sp, #12
   81644:	af00      	add	r7, sp, #0
   81646:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   81648:	687b      	ldr	r3, [r7, #4]
   8164a:	2202      	movs	r2, #2
   8164c:	601a      	str	r2, [r3, #0]
}
   8164e:	bf00      	nop
   81650:	370c      	adds	r7, #12
   81652:	46bd      	mov	sp, r7
   81654:	bc80      	pop	{r7}
   81656:	4770      	bx	lr

00081658 <spi_set_slave_mode>:
 * \brief Set SPI to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
   81658:	b480      	push	{r7}
   8165a:	b083      	sub	sp, #12
   8165c:	af00      	add	r7, sp, #0
   8165e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
   81660:	687b      	ldr	r3, [r7, #4]
   81662:	685b      	ldr	r3, [r3, #4]
   81664:	f023 0201 	bic.w	r2, r3, #1
   81668:	687b      	ldr	r3, [r7, #4]
   8166a:	605a      	str	r2, [r3, #4]
}
   8166c:	bf00      	nop
   8166e:	370c      	adds	r7, #12
   81670:	46bd      	mov	sp, r7
   81672:	bc80      	pop	{r7}
   81674:	4770      	bx	lr

00081676 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   81676:	b480      	push	{r7}
   81678:	b083      	sub	sp, #12
   8167a:	af00      	add	r7, sp, #0
   8167c:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   8167e:	687b      	ldr	r3, [r7, #4]
   81680:	685b      	ldr	r3, [r3, #4]
   81682:	f043 0210 	orr.w	r2, r3, #16
   81686:	687b      	ldr	r3, [r7, #4]
   81688:	605a      	str	r2, [r3, #4]
}
   8168a:	bf00      	nop
   8168c:	370c      	adds	r7, #12
   8168e:	46bd      	mov	sp, r7
   81690:	bc80      	pop	{r7}
   81692:	4770      	bx	lr

00081694 <spi_init>:

static Bool received_data = 0;
uint8_t sens_buf[sizeof(stm)];

void spi_init(void)
{
   81694:	b580      	push	{r7, lr}
   81696:	af00      	add	r7, sp, #0
    configure_dmac();
   81698:	4b02      	ldr	r3, [pc, #8]	; (816a4 <spi_init+0x10>)
   8169a:	4798      	blx	r3
    spi_slave_initialize();
   8169c:	4b02      	ldr	r3, [pc, #8]	; (816a8 <spi_init+0x14>)
   8169e:	4798      	blx	r3
}
   816a0:	bf00      	nop
   816a2:	bd80      	pop	{r7, pc}
   816a4:	000817fd 	.word	0x000817fd
   816a8:	00081745 	.word	0x00081745

000816ac <spi_slave_transfer>:

void spi_slave_transfer(void *p_buf, uint32_t ul_size)
{
   816ac:	b580      	push	{r7, lr}
   816ae:	b088      	sub	sp, #32
   816b0:	af00      	add	r7, sp, #0
   816b2:	6078      	str	r0, [r7, #4]
   816b4:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    dmac_channel_disable(DMAC, 1);
   816b6:	2101      	movs	r1, #1
   816b8:	481a      	ldr	r0, [pc, #104]	; (81724 <spi_slave_transfer+0x78>)
   816ba:	4b1b      	ldr	r3, [pc, #108]	; (81728 <spi_slave_transfer+0x7c>)
   816bc:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   816be:	687b      	ldr	r3, [r7, #4]
   816c0:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & SPI0->SPI_TDR;
   816c2:	4b1a      	ldr	r3, [pc, #104]	; (8172c <spi_slave_transfer+0x80>)
   816c4:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   816c6:	683b      	ldr	r3, [r7, #0]
   816c8:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   816ca:	4b19      	ldr	r3, [pc, #100]	; (81730 <spi_slave_transfer+0x84>)
   816cc:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   816ce:	2300      	movs	r3, #0
   816d0:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   816d2:	f107 030c 	add.w	r3, r7, #12
   816d6:	461a      	mov	r2, r3
   816d8:	2101      	movs	r1, #1
   816da:	4812      	ldr	r0, [pc, #72]	; (81724 <spi_slave_transfer+0x78>)
   816dc:	4b15      	ldr	r3, [pc, #84]	; (81734 <spi_slave_transfer+0x88>)
   816de:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   816e0:	2101      	movs	r1, #1
   816e2:	4810      	ldr	r0, [pc, #64]	; (81724 <spi_slave_transfer+0x78>)
   816e4:	4b14      	ldr	r3, [pc, #80]	; (81738 <spi_slave_transfer+0x8c>)
   816e6:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   816e8:	2100      	movs	r1, #0
   816ea:	480e      	ldr	r0, [pc, #56]	; (81724 <spi_slave_transfer+0x78>)
   816ec:	4b0e      	ldr	r3, [pc, #56]	; (81728 <spi_slave_transfer+0x7c>)
   816ee:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & SPI0->SPI_RDR;
   816f0:	4b12      	ldr	r3, [pc, #72]	; (8173c <spi_slave_transfer+0x90>)
   816f2:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   816f4:	687b      	ldr	r3, [r7, #4]
   816f6:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   816f8:	683b      	ldr	r3, [r7, #0]
   816fa:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   816fc:	4b10      	ldr	r3, [pc, #64]	; (81740 <spi_slave_transfer+0x94>)
   816fe:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   81700:	2300      	movs	r3, #0
   81702:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   81704:	f107 030c 	add.w	r3, r7, #12
   81708:	461a      	mov	r2, r3
   8170a:	2100      	movs	r1, #0
   8170c:	4805      	ldr	r0, [pc, #20]	; (81724 <spi_slave_transfer+0x78>)
   8170e:	4b09      	ldr	r3, [pc, #36]	; (81734 <spi_slave_transfer+0x88>)
   81710:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   81712:	2100      	movs	r1, #0
   81714:	4803      	ldr	r0, [pc, #12]	; (81724 <spi_slave_transfer+0x78>)
   81716:	4b08      	ldr	r3, [pc, #32]	; (81738 <spi_slave_transfer+0x8c>)
   81718:	4798      	blx	r3
}
   8171a:	bf00      	nop
   8171c:	3720      	adds	r7, #32
   8171e:	46bd      	mov	sp, r7
   81720:	bd80      	pop	{r7, pc}
   81722:	bf00      	nop
   81724:	400c4000 	.word	0x400c4000
   81728:	000807b7 	.word	0x000807b7
   8172c:	4000800c 	.word	0x4000800c
   81730:	20310000 	.word	0x20310000
   81734:	000808d1 	.word	0x000808d1
   81738:	00080799 	.word	0x00080799
   8173c:	40008008 	.word	0x40008008
   81740:	02510000 	.word	0x02510000

00081744 <spi_slave_initialize>:

void spi_slave_initialize(void)
{
   81744:	b580      	push	{r7, lr}
   81746:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   81748:	2101      	movs	r1, #1
   8174a:	481c      	ldr	r0, [pc, #112]	; (817bc <spi_slave_initialize+0x78>)
   8174c:	4b1c      	ldr	r3, [pc, #112]	; (817c0 <spi_slave_initialize+0x7c>)
   8174e:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   81750:	2100      	movs	r1, #0
   81752:	481a      	ldr	r0, [pc, #104]	; (817bc <spi_slave_initialize+0x78>)
   81754:	4b1a      	ldr	r3, [pc, #104]	; (817c0 <spi_slave_initialize+0x7c>)
   81756:	4798      	blx	r3
    pmc_enable_periph_clk(ID_SPI0);
   81758:	2018      	movs	r0, #24
   8175a:	4b1a      	ldr	r3, [pc, #104]	; (817c4 <spi_slave_initialize+0x80>)
   8175c:	4798      	blx	r3
    spi_disable(SPI0);
   8175e:	481a      	ldr	r0, [pc, #104]	; (817c8 <spi_slave_initialize+0x84>)
   81760:	4b1a      	ldr	r3, [pc, #104]	; (817cc <spi_slave_initialize+0x88>)
   81762:	4798      	blx	r3
    spi_reset(SPI0);
   81764:	4818      	ldr	r0, [pc, #96]	; (817c8 <spi_slave_initialize+0x84>)
   81766:	4b1a      	ldr	r3, [pc, #104]	; (817d0 <spi_slave_initialize+0x8c>)
   81768:	4798      	blx	r3
    spi_set_slave_mode(SPI0);
   8176a:	4817      	ldr	r0, [pc, #92]	; (817c8 <spi_slave_initialize+0x84>)
   8176c:	4b19      	ldr	r3, [pc, #100]	; (817d4 <spi_slave_initialize+0x90>)
   8176e:	4798      	blx	r3
    spi_disable_mode_fault_detect(SPI0);
   81770:	4815      	ldr	r0, [pc, #84]	; (817c8 <spi_slave_initialize+0x84>)
   81772:	4b19      	ldr	r3, [pc, #100]	; (817d8 <spi_slave_initialize+0x94>)
   81774:	4798      	blx	r3
    spi_set_peripheral_chip_select_value(SPI0, spi_get_pcs(0));
   81776:	210e      	movs	r1, #14
   81778:	4813      	ldr	r0, [pc, #76]	; (817c8 <spi_slave_initialize+0x84>)
   8177a:	4b18      	ldr	r3, [pc, #96]	; (817dc <spi_slave_initialize+0x98>)
   8177c:	4798      	blx	r3
    spi_set_clock_polarity(SPI0, 0, 0);
   8177e:	2200      	movs	r2, #0
   81780:	2100      	movs	r1, #0
   81782:	4811      	ldr	r0, [pc, #68]	; (817c8 <spi_slave_initialize+0x84>)
   81784:	4b16      	ldr	r3, [pc, #88]	; (817e0 <spi_slave_initialize+0x9c>)
   81786:	4798      	blx	r3
    spi_set_clock_phase(SPI0, 0, 1);
   81788:	2201      	movs	r2, #1
   8178a:	2100      	movs	r1, #0
   8178c:	480e      	ldr	r0, [pc, #56]	; (817c8 <spi_slave_initialize+0x84>)
   8178e:	4b15      	ldr	r3, [pc, #84]	; (817e4 <spi_slave_initialize+0xa0>)
   81790:	4798      	blx	r3
    spi_set_bits_per_transfer(SPI0, 0, SPI_CSR_BITS_8_BIT);
   81792:	2200      	movs	r2, #0
   81794:	2100      	movs	r1, #0
   81796:	480c      	ldr	r0, [pc, #48]	; (817c8 <spi_slave_initialize+0x84>)
   81798:	4b13      	ldr	r3, [pc, #76]	; (817e8 <spi_slave_initialize+0xa4>)
   8179a:	4798      	blx	r3
    spi_enable(SPI0);
   8179c:	480a      	ldr	r0, [pc, #40]	; (817c8 <spi_slave_initialize+0x84>)
   8179e:	4b13      	ldr	r3, [pc, #76]	; (817ec <spi_slave_initialize+0xa8>)
   817a0:	4798      	blx	r3

    /* Start waiting command. */
    memcpy(&sens_buf, &stm, sizeof(stm));
   817a2:	4b13      	ldr	r3, [pc, #76]	; (817f0 <spi_slave_initialize+0xac>)
   817a4:	4a13      	ldr	r2, [pc, #76]	; (817f4 <spi_slave_initialize+0xb0>)
   817a6:	8811      	ldrh	r1, [r2, #0]
   817a8:	7892      	ldrb	r2, [r2, #2]
   817aa:	8019      	strh	r1, [r3, #0]
   817ac:	709a      	strb	r2, [r3, #2]
    spi_slave_transfer(&sens_buf, sizeof(sens_buf));
   817ae:	2103      	movs	r1, #3
   817b0:	480f      	ldr	r0, [pc, #60]	; (817f0 <spi_slave_initialize+0xac>)
   817b2:	4b11      	ldr	r3, [pc, #68]	; (817f8 <spi_slave_initialize+0xb4>)
   817b4:	4798      	blx	r3
}
   817b6:	bf00      	nop
   817b8:	bd80      	pop	{r7, pc}
   817ba:	bf00      	nop
   817bc:	400c4000 	.word	0x400c4000
   817c0:	000807b7 	.word	0x000807b7
   817c4:	00080ee1 	.word	0x00080ee1
   817c8:	40008000 	.word	0x40008000
   817cc:	00081641 	.word	0x00081641
   817d0:	00081611 	.word	0x00081611
   817d4:	00081659 	.word	0x00081659
   817d8:	00081677 	.word	0x00081677
   817dc:	000805d9 	.word	0x000805d9
   817e0:	0008060b 	.word	0x0008060b
   817e4:	00080659 	.word	0x00080659
   817e8:	000806a7 	.word	0x000806a7
   817ec:	00081629 	.word	0x00081629
   817f0:	200705f4 	.word	0x200705f4
   817f4:	200705fc 	.word	0x200705fc
   817f8:	000816ad 	.word	0x000816ad

000817fc <configure_dmac>:

void configure_dmac(void)
{
   817fc:	b580      	push	{r7, lr}
   817fe:	b082      	sub	sp, #8
   81800:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   81802:	2027      	movs	r0, #39	; 0x27
   81804:	4b18      	ldr	r3, [pc, #96]	; (81868 <configure_dmac+0x6c>)
   81806:	4798      	blx	r3
    dmac_init(DMAC);
   81808:	4818      	ldr	r0, [pc, #96]	; (8186c <configure_dmac+0x70>)
   8180a:	4b19      	ldr	r3, [pc, #100]	; (81870 <configure_dmac+0x74>)
   8180c:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   8180e:	2110      	movs	r1, #16
   81810:	4816      	ldr	r0, [pc, #88]	; (8186c <configure_dmac+0x70>)
   81812:	4b18      	ldr	r3, [pc, #96]	; (81874 <configure_dmac+0x78>)
   81814:	4798      	blx	r3
    dmac_enable(DMAC);
   81816:	4815      	ldr	r0, [pc, #84]	; (8186c <configure_dmac+0x70>)
   81818:	4b17      	ldr	r3, [pc, #92]	; (81878 <configure_dmac+0x7c>)
   8181a:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   8181c:	2300      	movs	r3, #0
   8181e:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(2) |
   81820:	687b      	ldr	r3, [r7, #4]
   81822:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   81826:	f043 0302 	orr.w	r3, r3, #2
   8182a:	607b      	str	r3, [r7, #4]
    DMAC_CFG_SRC_H2SEL |
    DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   8182c:	687a      	ldr	r2, [r7, #4]
   8182e:	2100      	movs	r1, #0
   81830:	480e      	ldr	r0, [pc, #56]	; (8186c <configure_dmac+0x70>)
   81832:	4b12      	ldr	r3, [pc, #72]	; (8187c <configure_dmac+0x80>)
   81834:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   81836:	2300      	movs	r3, #0
   81838:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(1) |
   8183a:	687b      	ldr	r3, [r7, #4]
   8183c:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   81840:	f043 0310 	orr.w	r3, r3, #16
   81844:	607b      	str	r3, [r7, #4]
    DMAC_CFG_DST_H2SEL |
    DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   81846:	687a      	ldr	r2, [r7, #4]
   81848:	2101      	movs	r1, #1
   8184a:	4808      	ldr	r0, [pc, #32]	; (8186c <configure_dmac+0x70>)
   8184c:	4b0b      	ldr	r3, [pc, #44]	; (8187c <configure_dmac+0x80>)
   8184e:	4798      	blx	r3

    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   81850:	2027      	movs	r0, #39	; 0x27
   81852:	4b0b      	ldr	r3, [pc, #44]	; (81880 <configure_dmac+0x84>)
   81854:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   81856:	2101      	movs	r1, #1
   81858:	4804      	ldr	r0, [pc, #16]	; (8186c <configure_dmac+0x70>)
   8185a:	4b0a      	ldr	r3, [pc, #40]	; (81884 <configure_dmac+0x88>)
   8185c:	4798      	blx	r3
}
   8185e:	bf00      	nop
   81860:	3708      	adds	r7, #8
   81862:	46bd      	mov	sp, r7
   81864:	bd80      	pop	{r7, pc}
   81866:	bf00      	nop
   81868:	00080ee1 	.word	0x00080ee1
   8186c:	400c4000 	.word	0x400c4000
   81870:	000806f1 	.word	0x000806f1
   81874:	0008070d 	.word	0x0008070d
   81878:	00080733 	.word	0x00080733
   8187c:	000808a7 	.word	0x000808a7
   81880:	000815e1 	.word	0x000815e1
   81884:	00080769 	.word	0x00080769

00081888 <DMAC_Handler>:

void DMAC_Handler(void)
{
   81888:	b580      	push	{r7, lr}
   8188a:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   8188c:	480a      	ldr	r0, [pc, #40]	; (818b8 <DMAC_Handler+0x30>)
   8188e:	4b0b      	ldr	r3, [pc, #44]	; (818bc <DMAC_Handler+0x34>)
   81890:	4798      	blx	r3
   81892:	4602      	mov	r2, r0
   81894:	4b0a      	ldr	r3, [pc, #40]	; (818c0 <DMAC_Handler+0x38>)
   81896:	601a      	str	r2, [r3, #0]
    
    if (ul_status & 1)
   81898:	4b09      	ldr	r3, [pc, #36]	; (818c0 <DMAC_Handler+0x38>)
   8189a:	681b      	ldr	r3, [r3, #0]
   8189c:	f003 0301 	and.w	r3, r3, #1
   818a0:	2b00      	cmp	r3, #0
   818a2:	d007      	beq.n	818b4 <DMAC_Handler+0x2c>
    {
        memcpy(&mts, &sens_buf, sizeof(mts));
   818a4:	4b07      	ldr	r3, [pc, #28]	; (818c4 <DMAC_Handler+0x3c>)
   818a6:	681b      	ldr	r3, [r3, #0]
   818a8:	461a      	mov	r2, r3
   818aa:	4b07      	ldr	r3, [pc, #28]	; (818c8 <DMAC_Handler+0x40>)
   818ac:	601a      	str	r2, [r3, #0]
        received_data = true;
   818ae:	4b07      	ldr	r3, [pc, #28]	; (818cc <DMAC_Handler+0x44>)
   818b0:	2201      	movs	r2, #1
   818b2:	701a      	strb	r2, [r3, #0]
    }
}
   818b4:	bf00      	nop
   818b6:	bd80      	pop	{r7, pc}
   818b8:	400c4000 	.word	0x400c4000
   818bc:	00080783 	.word	0x00080783
   818c0:	200705ec 	.word	0x200705ec
   818c4:	200705f4 	.word	0x200705f4
   818c8:	200705f8 	.word	0x200705f8
   818cc:	200705e8 	.word	0x200705e8

000818d0 <PrepareValuesToSend>:

void PrepareValuesToSend(void)
{
   818d0:	b580      	push	{r7, lr}
   818d2:	af00      	add	r7, sp, #0
    if (received_data)
   818d4:	4b09      	ldr	r3, [pc, #36]	; (818fc <PrepareValuesToSend+0x2c>)
   818d6:	781b      	ldrb	r3, [r3, #0]
   818d8:	2b00      	cmp	r3, #0
   818da:	d00c      	beq.n	818f6 <PrepareValuesToSend+0x26>
    {
        received_data = false;
   818dc:	4b07      	ldr	r3, [pc, #28]	; (818fc <PrepareValuesToSend+0x2c>)
   818de:	2200      	movs	r2, #0
   818e0:	701a      	strb	r2, [r3, #0]
        memcpy(&sens_buf, &stm, sizeof(stm));
   818e2:	4b07      	ldr	r3, [pc, #28]	; (81900 <PrepareValuesToSend+0x30>)
   818e4:	4a07      	ldr	r2, [pc, #28]	; (81904 <PrepareValuesToSend+0x34>)
   818e6:	8811      	ldrh	r1, [r2, #0]
   818e8:	7892      	ldrb	r2, [r2, #2]
   818ea:	8019      	strh	r1, [r3, #0]
   818ec:	709a      	strb	r2, [r3, #2]
        spi_slave_transfer(&sens_buf, sizeof(sens_buf));
   818ee:	2103      	movs	r1, #3
   818f0:	4803      	ldr	r0, [pc, #12]	; (81900 <PrepareValuesToSend+0x30>)
   818f2:	4b05      	ldr	r3, [pc, #20]	; (81908 <PrepareValuesToSend+0x38>)
   818f4:	4798      	blx	r3
    }
   818f6:	bf00      	nop
   818f8:	bd80      	pop	{r7, pc}
   818fa:	bf00      	nop
   818fc:	200705e8 	.word	0x200705e8
   81900:	200705f4 	.word	0x200705f4
   81904:	200705fc 	.word	0x200705fc
   81908:	000816ad 	.word	0x000816ad

0008190c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   8190c:	b480      	push	{r7}
   8190e:	b083      	sub	sp, #12
   81910:	af00      	add	r7, sp, #0
   81912:	4603      	mov	r3, r0
   81914:	6039      	str	r1, [r7, #0]
   81916:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81918:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8191c:	2b00      	cmp	r3, #0
   8191e:	da0b      	bge.n	81938 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81920:	490d      	ldr	r1, [pc, #52]	; (81958 <NVIC_SetPriority+0x4c>)
   81922:	79fb      	ldrb	r3, [r7, #7]
   81924:	f003 030f 	and.w	r3, r3, #15
   81928:	3b04      	subs	r3, #4
   8192a:	683a      	ldr	r2, [r7, #0]
   8192c:	b2d2      	uxtb	r2, r2
   8192e:	0112      	lsls	r2, r2, #4
   81930:	b2d2      	uxtb	r2, r2
   81932:	440b      	add	r3, r1
   81934:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   81936:	e009      	b.n	8194c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81938:	4908      	ldr	r1, [pc, #32]	; (8195c <NVIC_SetPriority+0x50>)
   8193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8193e:	683a      	ldr	r2, [r7, #0]
   81940:	b2d2      	uxtb	r2, r2
   81942:	0112      	lsls	r2, r2, #4
   81944:	b2d2      	uxtb	r2, r2
   81946:	440b      	add	r3, r1
   81948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   8194c:	bf00      	nop
   8194e:	370c      	adds	r7, #12
   81950:	46bd      	mov	sp, r7
   81952:	bc80      	pop	{r7}
   81954:	4770      	bx	lr
   81956:	bf00      	nop
   81958:	e000ed00 	.word	0xe000ed00
   8195c:	e000e100 	.word	0xe000e100

00081960 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   81960:	b580      	push	{r7, lr}
   81962:	b082      	sub	sp, #8
   81964:	af00      	add	r7, sp, #0
   81966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   81968:	687b      	ldr	r3, [r7, #4]
   8196a:	3b01      	subs	r3, #1
   8196c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   81970:	d301      	bcc.n	81976 <SysTick_Config+0x16>
   81972:	2301      	movs	r3, #1
   81974:	e00f      	b.n	81996 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   81976:	4a0a      	ldr	r2, [pc, #40]	; (819a0 <SysTick_Config+0x40>)
   81978:	687b      	ldr	r3, [r7, #4]
   8197a:	3b01      	subs	r3, #1
   8197c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   8197e:	210f      	movs	r1, #15
   81980:	f04f 30ff 	mov.w	r0, #4294967295
   81984:	4b07      	ldr	r3, [pc, #28]	; (819a4 <SysTick_Config+0x44>)
   81986:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   81988:	4b05      	ldr	r3, [pc, #20]	; (819a0 <SysTick_Config+0x40>)
   8198a:	2200      	movs	r2, #0
   8198c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   8198e:	4b04      	ldr	r3, [pc, #16]	; (819a0 <SysTick_Config+0x40>)
   81990:	2207      	movs	r2, #7
   81992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   81994:	2300      	movs	r3, #0
}
   81996:	4618      	mov	r0, r3
   81998:	3708      	adds	r7, #8
   8199a:	46bd      	mov	sp, r7
   8199c:	bd80      	pop	{r7, pc}
   8199e:	bf00      	nop
   819a0:	e000e010 	.word	0xe000e010
   819a4:	0008190d 	.word	0x0008190d

000819a8 <osc_get_rate>:
{
   819a8:	b480      	push	{r7}
   819aa:	b083      	sub	sp, #12
   819ac:	af00      	add	r7, sp, #0
   819ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   819b0:	687b      	ldr	r3, [r7, #4]
   819b2:	2b07      	cmp	r3, #7
   819b4:	d825      	bhi.n	81a02 <osc_get_rate+0x5a>
   819b6:	a201      	add	r2, pc, #4	; (adr r2, 819bc <osc_get_rate+0x14>)
   819b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   819bc:	000819dd 	.word	0x000819dd
   819c0:	000819e3 	.word	0x000819e3
   819c4:	000819e9 	.word	0x000819e9
   819c8:	000819ef 	.word	0x000819ef
   819cc:	000819f3 	.word	0x000819f3
   819d0:	000819f7 	.word	0x000819f7
   819d4:	000819fb 	.word	0x000819fb
   819d8:	000819ff 	.word	0x000819ff
		return OSC_SLCK_32K_RC_HZ;
   819dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   819e0:	e010      	b.n	81a04 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   819e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   819e6:	e00d      	b.n	81a04 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   819e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   819ec:	e00a      	b.n	81a04 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   819ee:	4b08      	ldr	r3, [pc, #32]	; (81a10 <osc_get_rate+0x68>)
   819f0:	e008      	b.n	81a04 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   819f2:	4b08      	ldr	r3, [pc, #32]	; (81a14 <osc_get_rate+0x6c>)
   819f4:	e006      	b.n	81a04 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   819f6:	4b08      	ldr	r3, [pc, #32]	; (81a18 <osc_get_rate+0x70>)
   819f8:	e004      	b.n	81a04 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   819fa:	4b07      	ldr	r3, [pc, #28]	; (81a18 <osc_get_rate+0x70>)
   819fc:	e002      	b.n	81a04 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   819fe:	4b06      	ldr	r3, [pc, #24]	; (81a18 <osc_get_rate+0x70>)
   81a00:	e000      	b.n	81a04 <osc_get_rate+0x5c>
	return 0;
   81a02:	2300      	movs	r3, #0
}
   81a04:	4618      	mov	r0, r3
   81a06:	370c      	adds	r7, #12
   81a08:	46bd      	mov	sp, r7
   81a0a:	bc80      	pop	{r7}
   81a0c:	4770      	bx	lr
   81a0e:	bf00      	nop
   81a10:	003d0900 	.word	0x003d0900
   81a14:	007a1200 	.word	0x007a1200
   81a18:	00b71b00 	.word	0x00b71b00

00081a1c <sysclk_get_main_hz>:
{
   81a1c:	b580      	push	{r7, lr}
   81a1e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   81a20:	2006      	movs	r0, #6
   81a22:	4b04      	ldr	r3, [pc, #16]	; (81a34 <sysclk_get_main_hz+0x18>)
   81a24:	4798      	blx	r3
   81a26:	4602      	mov	r2, r0
   81a28:	4613      	mov	r3, r2
   81a2a:	00db      	lsls	r3, r3, #3
   81a2c:	1a9b      	subs	r3, r3, r2
   81a2e:	005b      	lsls	r3, r3, #1
}
   81a30:	4618      	mov	r0, r3
   81a32:	bd80      	pop	{r7, pc}
   81a34:	000819a9 	.word	0x000819a9

00081a38 <sysclk_get_cpu_hz>:
{
   81a38:	b580      	push	{r7, lr}
   81a3a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   81a3c:	4b02      	ldr	r3, [pc, #8]	; (81a48 <sysclk_get_cpu_hz+0x10>)
   81a3e:	4798      	blx	r3
   81a40:	4603      	mov	r3, r0
   81a42:	085b      	lsrs	r3, r3, #1
}
   81a44:	4618      	mov	r0, r3
   81a46:	bd80      	pop	{r7, pc}
   81a48:	00081a1d 	.word	0x00081a1d

00081a4c <main>:
#include "asf.h"
#include "comm.h"
#include "timing.h"

int main(void)
{
   81a4c:	b580      	push	{r7, lr}
   81a4e:	b082      	sub	sp, #8
   81a50:	af00      	add	r7, sp, #0
    sysclk_init();
   81a52:	4b24      	ldr	r3, [pc, #144]	; (81ae4 <main+0x98>)
   81a54:	4798      	blx	r3
    board_init();
   81a56:	4b24      	ldr	r3, [pc, #144]	; (81ae8 <main+0x9c>)
   81a58:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   81a5a:	4b24      	ldr	r3, [pc, #144]	; (81aec <main+0xa0>)
   81a5c:	4798      	blx	r3
   81a5e:	4602      	mov	r2, r0
   81a60:	4b23      	ldr	r3, [pc, #140]	; (81af0 <main+0xa4>)
   81a62:	fba3 2302 	umull	r2, r3, r3, r2
   81a66:	099b      	lsrs	r3, r3, #6
   81a68:	4618      	mov	r0, r3
   81a6a:	4b22      	ldr	r3, [pc, #136]	; (81af4 <main+0xa8>)
   81a6c:	4798      	blx	r3
    
    spi_init();
   81a6e:	4b22      	ldr	r3, [pc, #136]	; (81af8 <main+0xac>)
   81a70:	4798      	blx	r3
    
    adc_start(ADC);
   81a72:	4822      	ldr	r0, [pc, #136]	; (81afc <main+0xb0>)
   81a74:	4b22      	ldr	r3, [pc, #136]	; (81b00 <main+0xb4>)
   81a76:	4798      	blx	r3
    
    for(int i = 0; i< 3; i++)
   81a78:	2300      	movs	r3, #0
   81a7a:	607b      	str	r3, [r7, #4]
   81a7c:	e028      	b.n	81ad0 <main+0x84>
    {
        set_led(LED_ONBOARD, 1);
   81a7e:	2101      	movs	r1, #1
   81a80:	2063      	movs	r0, #99	; 0x63
   81a82:	4b20      	ldr	r3, [pc, #128]	; (81b04 <main+0xb8>)
   81a84:	4798      	blx	r3
        set_led(LED_S1, 1);
   81a86:	2101      	movs	r1, #1
   81a88:	2062      	movs	r0, #98	; 0x62
   81a8a:	4b1e      	ldr	r3, [pc, #120]	; (81b04 <main+0xb8>)
   81a8c:	4798      	blx	r3
        set_led(LED_S2, 1);
   81a8e:	2101      	movs	r1, #1
   81a90:	2061      	movs	r0, #97	; 0x61
   81a92:	4b1c      	ldr	r3, [pc, #112]	; (81b04 <main+0xb8>)
   81a94:	4798      	blx	r3
        set_led(LED_S3, 1);
   81a96:	2101      	movs	r1, #1
   81a98:	2060      	movs	r0, #96	; 0x60
   81a9a:	4b1a      	ldr	r3, [pc, #104]	; (81b04 <main+0xb8>)
   81a9c:	4798      	blx	r3
        mdelay(100);
   81a9e:	2064      	movs	r0, #100	; 0x64
   81aa0:	4b19      	ldr	r3, [pc, #100]	; (81b08 <main+0xbc>)
   81aa2:	4798      	blx	r3
        set_led(LED_ONBOARD, 0);
   81aa4:	2100      	movs	r1, #0
   81aa6:	2063      	movs	r0, #99	; 0x63
   81aa8:	4b16      	ldr	r3, [pc, #88]	; (81b04 <main+0xb8>)
   81aaa:	4798      	blx	r3
        set_led(LED_S1, 0);
   81aac:	2100      	movs	r1, #0
   81aae:	2062      	movs	r0, #98	; 0x62
   81ab0:	4b14      	ldr	r3, [pc, #80]	; (81b04 <main+0xb8>)
   81ab2:	4798      	blx	r3
        set_led(LED_S2, 0);
   81ab4:	2100      	movs	r1, #0
   81ab6:	2061      	movs	r0, #97	; 0x61
   81ab8:	4b12      	ldr	r3, [pc, #72]	; (81b04 <main+0xb8>)
   81aba:	4798      	blx	r3
        set_led(LED_S3, 0);
   81abc:	2100      	movs	r1, #0
   81abe:	2060      	movs	r0, #96	; 0x60
   81ac0:	4b10      	ldr	r3, [pc, #64]	; (81b04 <main+0xb8>)
   81ac2:	4798      	blx	r3
        mdelay(100);
   81ac4:	2064      	movs	r0, #100	; 0x64
   81ac6:	4b10      	ldr	r3, [pc, #64]	; (81b08 <main+0xbc>)
   81ac8:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   81aca:	687b      	ldr	r3, [r7, #4]
   81acc:	3301      	adds	r3, #1
   81ace:	607b      	str	r3, [r7, #4]
   81ad0:	687b      	ldr	r3, [r7, #4]
   81ad2:	2b02      	cmp	r3, #2
   81ad4:	ddd3      	ble.n	81a7e <main+0x32>
    }
    
    while (1)
    {
        update_battery();
   81ad6:	4b0d      	ldr	r3, [pc, #52]	; (81b0c <main+0xc0>)
   81ad8:	4798      	blx	r3
        update_heartbeat();
   81ada:	4b0d      	ldr	r3, [pc, #52]	; (81b10 <main+0xc4>)
   81adc:	4798      	blx	r3
        
        //update_line_values();
        //calculate_line_esc_direction();
        
        PrepareValuesToSend();
   81ade:	4b0d      	ldr	r3, [pc, #52]	; (81b14 <main+0xc8>)
   81ae0:	4798      	blx	r3
        update_battery();
   81ae2:	e7f8      	b.n	81ad6 <main+0x8a>
   81ae4:	00080c3d 	.word	0x00080c3d
   81ae8:	00081255 	.word	0x00081255
   81aec:	00081a39 	.word	0x00081a39
   81af0:	10624dd3 	.word	0x10624dd3
   81af4:	00081961 	.word	0x00081961
   81af8:	00081695 	.word	0x00081695
   81afc:	400c0000 	.word	0x400c0000
   81b00:	0008022f 	.word	0x0008022f
   81b04:	00080591 	.word	0x00080591
   81b08:	0008034d 	.word	0x0008034d
   81b0c:	00080379 	.word	0x00080379
   81b10:	00080539 	.word	0x00080539
   81b14:	000818d1 	.word	0x000818d1

00081b18 <__aeabi_drsub>:
   81b18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81b1c:	e002      	b.n	81b24 <__adddf3>
   81b1e:	bf00      	nop

00081b20 <__aeabi_dsub>:
   81b20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081b24 <__adddf3>:
   81b24:	b530      	push	{r4, r5, lr}
   81b26:	ea4f 0441 	mov.w	r4, r1, lsl #1
   81b2a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81b2e:	ea94 0f05 	teq	r4, r5
   81b32:	bf08      	it	eq
   81b34:	ea90 0f02 	teqeq	r0, r2
   81b38:	bf1f      	itttt	ne
   81b3a:	ea54 0c00 	orrsne.w	ip, r4, r0
   81b3e:	ea55 0c02 	orrsne.w	ip, r5, r2
   81b42:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   81b46:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81b4a:	f000 80e2 	beq.w	81d12 <__adddf3+0x1ee>
   81b4e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   81b52:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   81b56:	bfb8      	it	lt
   81b58:	426d      	neglt	r5, r5
   81b5a:	dd0c      	ble.n	81b76 <__adddf3+0x52>
   81b5c:	442c      	add	r4, r5
   81b5e:	ea80 0202 	eor.w	r2, r0, r2
   81b62:	ea81 0303 	eor.w	r3, r1, r3
   81b66:	ea82 0000 	eor.w	r0, r2, r0
   81b6a:	ea83 0101 	eor.w	r1, r3, r1
   81b6e:	ea80 0202 	eor.w	r2, r0, r2
   81b72:	ea81 0303 	eor.w	r3, r1, r3
   81b76:	2d36      	cmp	r5, #54	; 0x36
   81b78:	bf88      	it	hi
   81b7a:	bd30      	pophi	{r4, r5, pc}
   81b7c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81b80:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81b84:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81b88:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81b8c:	d002      	beq.n	81b94 <__adddf3+0x70>
   81b8e:	4240      	negs	r0, r0
   81b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81b94:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   81b98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81b9c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   81ba0:	d002      	beq.n	81ba8 <__adddf3+0x84>
   81ba2:	4252      	negs	r2, r2
   81ba4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81ba8:	ea94 0f05 	teq	r4, r5
   81bac:	f000 80a7 	beq.w	81cfe <__adddf3+0x1da>
   81bb0:	f1a4 0401 	sub.w	r4, r4, #1
   81bb4:	f1d5 0e20 	rsbs	lr, r5, #32
   81bb8:	db0d      	blt.n	81bd6 <__adddf3+0xb2>
   81bba:	fa02 fc0e 	lsl.w	ip, r2, lr
   81bbe:	fa22 f205 	lsr.w	r2, r2, r5
   81bc2:	1880      	adds	r0, r0, r2
   81bc4:	f141 0100 	adc.w	r1, r1, #0
   81bc8:	fa03 f20e 	lsl.w	r2, r3, lr
   81bcc:	1880      	adds	r0, r0, r2
   81bce:	fa43 f305 	asr.w	r3, r3, r5
   81bd2:	4159      	adcs	r1, r3
   81bd4:	e00e      	b.n	81bf4 <__adddf3+0xd0>
   81bd6:	f1a5 0520 	sub.w	r5, r5, #32
   81bda:	f10e 0e20 	add.w	lr, lr, #32
   81bde:	2a01      	cmp	r2, #1
   81be0:	fa03 fc0e 	lsl.w	ip, r3, lr
   81be4:	bf28      	it	cs
   81be6:	f04c 0c02 	orrcs.w	ip, ip, #2
   81bea:	fa43 f305 	asr.w	r3, r3, r5
   81bee:	18c0      	adds	r0, r0, r3
   81bf0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81bf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81bf8:	d507      	bpl.n	81c0a <__adddf3+0xe6>
   81bfa:	f04f 0e00 	mov.w	lr, #0
   81bfe:	f1dc 0c00 	rsbs	ip, ip, #0
   81c02:	eb7e 0000 	sbcs.w	r0, lr, r0
   81c06:	eb6e 0101 	sbc.w	r1, lr, r1
   81c0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81c0e:	d31b      	bcc.n	81c48 <__adddf3+0x124>
   81c10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81c14:	d30c      	bcc.n	81c30 <__adddf3+0x10c>
   81c16:	0849      	lsrs	r1, r1, #1
   81c18:	ea5f 0030 	movs.w	r0, r0, rrx
   81c1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81c20:	f104 0401 	add.w	r4, r4, #1
   81c24:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81c28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81c2c:	f080 809a 	bcs.w	81d64 <__adddf3+0x240>
   81c30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81c34:	bf08      	it	eq
   81c36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81c3a:	f150 0000 	adcs.w	r0, r0, #0
   81c3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81c42:	ea41 0105 	orr.w	r1, r1, r5
   81c46:	bd30      	pop	{r4, r5, pc}
   81c48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81c4c:	4140      	adcs	r0, r0
   81c4e:	eb41 0101 	adc.w	r1, r1, r1
   81c52:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81c56:	f1a4 0401 	sub.w	r4, r4, #1
   81c5a:	d1e9      	bne.n	81c30 <__adddf3+0x10c>
   81c5c:	f091 0f00 	teq	r1, #0
   81c60:	bf04      	itt	eq
   81c62:	4601      	moveq	r1, r0
   81c64:	2000      	moveq	r0, #0
   81c66:	fab1 f381 	clz	r3, r1
   81c6a:	bf08      	it	eq
   81c6c:	3320      	addeq	r3, #32
   81c6e:	f1a3 030b 	sub.w	r3, r3, #11
   81c72:	f1b3 0220 	subs.w	r2, r3, #32
   81c76:	da0c      	bge.n	81c92 <__adddf3+0x16e>
   81c78:	320c      	adds	r2, #12
   81c7a:	dd08      	ble.n	81c8e <__adddf3+0x16a>
   81c7c:	f102 0c14 	add.w	ip, r2, #20
   81c80:	f1c2 020c 	rsb	r2, r2, #12
   81c84:	fa01 f00c 	lsl.w	r0, r1, ip
   81c88:	fa21 f102 	lsr.w	r1, r1, r2
   81c8c:	e00c      	b.n	81ca8 <__adddf3+0x184>
   81c8e:	f102 0214 	add.w	r2, r2, #20
   81c92:	bfd8      	it	le
   81c94:	f1c2 0c20 	rsble	ip, r2, #32
   81c98:	fa01 f102 	lsl.w	r1, r1, r2
   81c9c:	fa20 fc0c 	lsr.w	ip, r0, ip
   81ca0:	bfdc      	itt	le
   81ca2:	ea41 010c 	orrle.w	r1, r1, ip
   81ca6:	4090      	lslle	r0, r2
   81ca8:	1ae4      	subs	r4, r4, r3
   81caa:	bfa2      	ittt	ge
   81cac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81cb0:	4329      	orrge	r1, r5
   81cb2:	bd30      	popge	{r4, r5, pc}
   81cb4:	ea6f 0404 	mvn.w	r4, r4
   81cb8:	3c1f      	subs	r4, #31
   81cba:	da1c      	bge.n	81cf6 <__adddf3+0x1d2>
   81cbc:	340c      	adds	r4, #12
   81cbe:	dc0e      	bgt.n	81cde <__adddf3+0x1ba>
   81cc0:	f104 0414 	add.w	r4, r4, #20
   81cc4:	f1c4 0220 	rsb	r2, r4, #32
   81cc8:	fa20 f004 	lsr.w	r0, r0, r4
   81ccc:	fa01 f302 	lsl.w	r3, r1, r2
   81cd0:	ea40 0003 	orr.w	r0, r0, r3
   81cd4:	fa21 f304 	lsr.w	r3, r1, r4
   81cd8:	ea45 0103 	orr.w	r1, r5, r3
   81cdc:	bd30      	pop	{r4, r5, pc}
   81cde:	f1c4 040c 	rsb	r4, r4, #12
   81ce2:	f1c4 0220 	rsb	r2, r4, #32
   81ce6:	fa20 f002 	lsr.w	r0, r0, r2
   81cea:	fa01 f304 	lsl.w	r3, r1, r4
   81cee:	ea40 0003 	orr.w	r0, r0, r3
   81cf2:	4629      	mov	r1, r5
   81cf4:	bd30      	pop	{r4, r5, pc}
   81cf6:	fa21 f004 	lsr.w	r0, r1, r4
   81cfa:	4629      	mov	r1, r5
   81cfc:	bd30      	pop	{r4, r5, pc}
   81cfe:	f094 0f00 	teq	r4, #0
   81d02:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81d06:	bf06      	itte	eq
   81d08:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81d0c:	3401      	addeq	r4, #1
   81d0e:	3d01      	subne	r5, #1
   81d10:	e74e      	b.n	81bb0 <__adddf3+0x8c>
   81d12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81d16:	bf18      	it	ne
   81d18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81d1c:	d029      	beq.n	81d72 <__adddf3+0x24e>
   81d1e:	ea94 0f05 	teq	r4, r5
   81d22:	bf08      	it	eq
   81d24:	ea90 0f02 	teqeq	r0, r2
   81d28:	d005      	beq.n	81d36 <__adddf3+0x212>
   81d2a:	ea54 0c00 	orrs.w	ip, r4, r0
   81d2e:	bf04      	itt	eq
   81d30:	4619      	moveq	r1, r3
   81d32:	4610      	moveq	r0, r2
   81d34:	bd30      	pop	{r4, r5, pc}
   81d36:	ea91 0f03 	teq	r1, r3
   81d3a:	bf1e      	ittt	ne
   81d3c:	2100      	movne	r1, #0
   81d3e:	2000      	movne	r0, #0
   81d40:	bd30      	popne	{r4, r5, pc}
   81d42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81d46:	d105      	bne.n	81d54 <__adddf3+0x230>
   81d48:	0040      	lsls	r0, r0, #1
   81d4a:	4149      	adcs	r1, r1
   81d4c:	bf28      	it	cs
   81d4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81d52:	bd30      	pop	{r4, r5, pc}
   81d54:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81d58:	bf3c      	itt	cc
   81d5a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81d5e:	bd30      	popcc	{r4, r5, pc}
   81d60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81d64:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81d68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81d6c:	f04f 0000 	mov.w	r0, #0
   81d70:	bd30      	pop	{r4, r5, pc}
   81d72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81d76:	bf1a      	itte	ne
   81d78:	4619      	movne	r1, r3
   81d7a:	4610      	movne	r0, r2
   81d7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81d80:	bf1c      	itt	ne
   81d82:	460b      	movne	r3, r1
   81d84:	4602      	movne	r2, r0
   81d86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81d8a:	bf06      	itte	eq
   81d8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81d90:	ea91 0f03 	teqeq	r1, r3
   81d94:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81d98:	bd30      	pop	{r4, r5, pc}
   81d9a:	bf00      	nop

00081d9c <__aeabi_ui2d>:
   81d9c:	f090 0f00 	teq	r0, #0
   81da0:	bf04      	itt	eq
   81da2:	2100      	moveq	r1, #0
   81da4:	4770      	bxeq	lr
   81da6:	b530      	push	{r4, r5, lr}
   81da8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81dac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81db0:	f04f 0500 	mov.w	r5, #0
   81db4:	f04f 0100 	mov.w	r1, #0
   81db8:	e750      	b.n	81c5c <__adddf3+0x138>
   81dba:	bf00      	nop

00081dbc <__aeabi_i2d>:
   81dbc:	f090 0f00 	teq	r0, #0
   81dc0:	bf04      	itt	eq
   81dc2:	2100      	moveq	r1, #0
   81dc4:	4770      	bxeq	lr
   81dc6:	b530      	push	{r4, r5, lr}
   81dc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81dcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81dd0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81dd4:	bf48      	it	mi
   81dd6:	4240      	negmi	r0, r0
   81dd8:	f04f 0100 	mov.w	r1, #0
   81ddc:	e73e      	b.n	81c5c <__adddf3+0x138>
   81dde:	bf00      	nop

00081de0 <__aeabi_f2d>:
   81de0:	0042      	lsls	r2, r0, #1
   81de2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81de6:	ea4f 0131 	mov.w	r1, r1, rrx
   81dea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81dee:	bf1f      	itttt	ne
   81df0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81df4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81df8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81dfc:	4770      	bxne	lr
   81dfe:	f092 0f00 	teq	r2, #0
   81e02:	bf14      	ite	ne
   81e04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81e08:	4770      	bxeq	lr
   81e0a:	b530      	push	{r4, r5, lr}
   81e0c:	f44f 7460 	mov.w	r4, #896	; 0x380
   81e10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81e14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81e18:	e720      	b.n	81c5c <__adddf3+0x138>
   81e1a:	bf00      	nop

00081e1c <__aeabi_ul2d>:
   81e1c:	ea50 0201 	orrs.w	r2, r0, r1
   81e20:	bf08      	it	eq
   81e22:	4770      	bxeq	lr
   81e24:	b530      	push	{r4, r5, lr}
   81e26:	f04f 0500 	mov.w	r5, #0
   81e2a:	e00a      	b.n	81e42 <__aeabi_l2d+0x16>

00081e2c <__aeabi_l2d>:
   81e2c:	ea50 0201 	orrs.w	r2, r0, r1
   81e30:	bf08      	it	eq
   81e32:	4770      	bxeq	lr
   81e34:	b530      	push	{r4, r5, lr}
   81e36:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81e3a:	d502      	bpl.n	81e42 <__aeabi_l2d+0x16>
   81e3c:	4240      	negs	r0, r0
   81e3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81e42:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81e46:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81e4a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81e4e:	f43f aedc 	beq.w	81c0a <__adddf3+0xe6>
   81e52:	f04f 0203 	mov.w	r2, #3
   81e56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81e5a:	bf18      	it	ne
   81e5c:	3203      	addne	r2, #3
   81e5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81e62:	bf18      	it	ne
   81e64:	3203      	addne	r2, #3
   81e66:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81e6a:	f1c2 0320 	rsb	r3, r2, #32
   81e6e:	fa00 fc03 	lsl.w	ip, r0, r3
   81e72:	fa20 f002 	lsr.w	r0, r0, r2
   81e76:	fa01 fe03 	lsl.w	lr, r1, r3
   81e7a:	ea40 000e 	orr.w	r0, r0, lr
   81e7e:	fa21 f102 	lsr.w	r1, r1, r2
   81e82:	4414      	add	r4, r2
   81e84:	e6c1      	b.n	81c0a <__adddf3+0xe6>
   81e86:	bf00      	nop

00081e88 <__aeabi_dmul>:
   81e88:	b570      	push	{r4, r5, r6, lr}
   81e8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81e8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81e92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81e96:	bf1d      	ittte	ne
   81e98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81e9c:	ea94 0f0c 	teqne	r4, ip
   81ea0:	ea95 0f0c 	teqne	r5, ip
   81ea4:	f000 f8de 	bleq	82064 <__aeabi_dmul+0x1dc>
   81ea8:	442c      	add	r4, r5
   81eaa:	ea81 0603 	eor.w	r6, r1, r3
   81eae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81eb2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81eb6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81eba:	bf18      	it	ne
   81ebc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81ec0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81ec8:	d038      	beq.n	81f3c <__aeabi_dmul+0xb4>
   81eca:	fba0 ce02 	umull	ip, lr, r0, r2
   81ece:	f04f 0500 	mov.w	r5, #0
   81ed2:	fbe1 e502 	umlal	lr, r5, r1, r2
   81ed6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81eda:	fbe0 e503 	umlal	lr, r5, r0, r3
   81ede:	f04f 0600 	mov.w	r6, #0
   81ee2:	fbe1 5603 	umlal	r5, r6, r1, r3
   81ee6:	f09c 0f00 	teq	ip, #0
   81eea:	bf18      	it	ne
   81eec:	f04e 0e01 	orrne.w	lr, lr, #1
   81ef0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81ef4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81ef8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81efc:	d204      	bcs.n	81f08 <__aeabi_dmul+0x80>
   81efe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81f02:	416d      	adcs	r5, r5
   81f04:	eb46 0606 	adc.w	r6, r6, r6
   81f08:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81f0c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81f10:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81f14:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81f18:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81f1c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81f20:	bf88      	it	hi
   81f22:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81f26:	d81e      	bhi.n	81f66 <__aeabi_dmul+0xde>
   81f28:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81f2c:	bf08      	it	eq
   81f2e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81f32:	f150 0000 	adcs.w	r0, r0, #0
   81f36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81f3a:	bd70      	pop	{r4, r5, r6, pc}
   81f3c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81f40:	ea46 0101 	orr.w	r1, r6, r1
   81f44:	ea40 0002 	orr.w	r0, r0, r2
   81f48:	ea81 0103 	eor.w	r1, r1, r3
   81f4c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81f50:	bfc2      	ittt	gt
   81f52:	ebd4 050c 	rsbsgt	r5, r4, ip
   81f56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81f5a:	bd70      	popgt	{r4, r5, r6, pc}
   81f5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81f60:	f04f 0e00 	mov.w	lr, #0
   81f64:	3c01      	subs	r4, #1
   81f66:	f300 80ab 	bgt.w	820c0 <__aeabi_dmul+0x238>
   81f6a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81f6e:	bfde      	ittt	le
   81f70:	2000      	movle	r0, #0
   81f72:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81f76:	bd70      	pople	{r4, r5, r6, pc}
   81f78:	f1c4 0400 	rsb	r4, r4, #0
   81f7c:	3c20      	subs	r4, #32
   81f7e:	da35      	bge.n	81fec <__aeabi_dmul+0x164>
   81f80:	340c      	adds	r4, #12
   81f82:	dc1b      	bgt.n	81fbc <__aeabi_dmul+0x134>
   81f84:	f104 0414 	add.w	r4, r4, #20
   81f88:	f1c4 0520 	rsb	r5, r4, #32
   81f8c:	fa00 f305 	lsl.w	r3, r0, r5
   81f90:	fa20 f004 	lsr.w	r0, r0, r4
   81f94:	fa01 f205 	lsl.w	r2, r1, r5
   81f98:	ea40 0002 	orr.w	r0, r0, r2
   81f9c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81fa0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81fa4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81fa8:	fa21 f604 	lsr.w	r6, r1, r4
   81fac:	eb42 0106 	adc.w	r1, r2, r6
   81fb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81fb4:	bf08      	it	eq
   81fb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81fba:	bd70      	pop	{r4, r5, r6, pc}
   81fbc:	f1c4 040c 	rsb	r4, r4, #12
   81fc0:	f1c4 0520 	rsb	r5, r4, #32
   81fc4:	fa00 f304 	lsl.w	r3, r0, r4
   81fc8:	fa20 f005 	lsr.w	r0, r0, r5
   81fcc:	fa01 f204 	lsl.w	r2, r1, r4
   81fd0:	ea40 0002 	orr.w	r0, r0, r2
   81fd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81fd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81fdc:	f141 0100 	adc.w	r1, r1, #0
   81fe0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81fe4:	bf08      	it	eq
   81fe6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81fea:	bd70      	pop	{r4, r5, r6, pc}
   81fec:	f1c4 0520 	rsb	r5, r4, #32
   81ff0:	fa00 f205 	lsl.w	r2, r0, r5
   81ff4:	ea4e 0e02 	orr.w	lr, lr, r2
   81ff8:	fa20 f304 	lsr.w	r3, r0, r4
   81ffc:	fa01 f205 	lsl.w	r2, r1, r5
   82000:	ea43 0302 	orr.w	r3, r3, r2
   82004:	fa21 f004 	lsr.w	r0, r1, r4
   82008:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8200c:	fa21 f204 	lsr.w	r2, r1, r4
   82010:	ea20 0002 	bic.w	r0, r0, r2
   82014:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   82018:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8201c:	bf08      	it	eq
   8201e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82022:	bd70      	pop	{r4, r5, r6, pc}
   82024:	f094 0f00 	teq	r4, #0
   82028:	d10f      	bne.n	8204a <__aeabi_dmul+0x1c2>
   8202a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8202e:	0040      	lsls	r0, r0, #1
   82030:	eb41 0101 	adc.w	r1, r1, r1
   82034:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82038:	bf08      	it	eq
   8203a:	3c01      	subeq	r4, #1
   8203c:	d0f7      	beq.n	8202e <__aeabi_dmul+0x1a6>
   8203e:	ea41 0106 	orr.w	r1, r1, r6
   82042:	f095 0f00 	teq	r5, #0
   82046:	bf18      	it	ne
   82048:	4770      	bxne	lr
   8204a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8204e:	0052      	lsls	r2, r2, #1
   82050:	eb43 0303 	adc.w	r3, r3, r3
   82054:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   82058:	bf08      	it	eq
   8205a:	3d01      	subeq	r5, #1
   8205c:	d0f7      	beq.n	8204e <__aeabi_dmul+0x1c6>
   8205e:	ea43 0306 	orr.w	r3, r3, r6
   82062:	4770      	bx	lr
   82064:	ea94 0f0c 	teq	r4, ip
   82068:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8206c:	bf18      	it	ne
   8206e:	ea95 0f0c 	teqne	r5, ip
   82072:	d00c      	beq.n	8208e <__aeabi_dmul+0x206>
   82074:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82078:	bf18      	it	ne
   8207a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8207e:	d1d1      	bne.n	82024 <__aeabi_dmul+0x19c>
   82080:	ea81 0103 	eor.w	r1, r1, r3
   82084:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82088:	f04f 0000 	mov.w	r0, #0
   8208c:	bd70      	pop	{r4, r5, r6, pc}
   8208e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82092:	bf06      	itte	eq
   82094:	4610      	moveq	r0, r2
   82096:	4619      	moveq	r1, r3
   82098:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8209c:	d019      	beq.n	820d2 <__aeabi_dmul+0x24a>
   8209e:	ea94 0f0c 	teq	r4, ip
   820a2:	d102      	bne.n	820aa <__aeabi_dmul+0x222>
   820a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   820a8:	d113      	bne.n	820d2 <__aeabi_dmul+0x24a>
   820aa:	ea95 0f0c 	teq	r5, ip
   820ae:	d105      	bne.n	820bc <__aeabi_dmul+0x234>
   820b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   820b4:	bf1c      	itt	ne
   820b6:	4610      	movne	r0, r2
   820b8:	4619      	movne	r1, r3
   820ba:	d10a      	bne.n	820d2 <__aeabi_dmul+0x24a>
   820bc:	ea81 0103 	eor.w	r1, r1, r3
   820c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   820c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   820c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   820cc:	f04f 0000 	mov.w	r0, #0
   820d0:	bd70      	pop	{r4, r5, r6, pc}
   820d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   820d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   820da:	bd70      	pop	{r4, r5, r6, pc}

000820dc <__aeabi_ddiv>:
   820dc:	b570      	push	{r4, r5, r6, lr}
   820de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   820e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   820e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   820ea:	bf1d      	ittte	ne
   820ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   820f0:	ea94 0f0c 	teqne	r4, ip
   820f4:	ea95 0f0c 	teqne	r5, ip
   820f8:	f000 f8a7 	bleq	8224a <__aeabi_ddiv+0x16e>
   820fc:	eba4 0405 	sub.w	r4, r4, r5
   82100:	ea81 0e03 	eor.w	lr, r1, r3
   82104:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82108:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8210c:	f000 8088 	beq.w	82220 <__aeabi_ddiv+0x144>
   82110:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82114:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   82118:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8211c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   82120:	ea4f 2202 	mov.w	r2, r2, lsl #8
   82124:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   82128:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8212c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   82130:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   82134:	429d      	cmp	r5, r3
   82136:	bf08      	it	eq
   82138:	4296      	cmpeq	r6, r2
   8213a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8213e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   82142:	d202      	bcs.n	8214a <__aeabi_ddiv+0x6e>
   82144:	085b      	lsrs	r3, r3, #1
   82146:	ea4f 0232 	mov.w	r2, r2, rrx
   8214a:	1ab6      	subs	r6, r6, r2
   8214c:	eb65 0503 	sbc.w	r5, r5, r3
   82150:	085b      	lsrs	r3, r3, #1
   82152:	ea4f 0232 	mov.w	r2, r2, rrx
   82156:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8215a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8215e:	ebb6 0e02 	subs.w	lr, r6, r2
   82162:	eb75 0e03 	sbcs.w	lr, r5, r3
   82166:	bf22      	ittt	cs
   82168:	1ab6      	subcs	r6, r6, r2
   8216a:	4675      	movcs	r5, lr
   8216c:	ea40 000c 	orrcs.w	r0, r0, ip
   82170:	085b      	lsrs	r3, r3, #1
   82172:	ea4f 0232 	mov.w	r2, r2, rrx
   82176:	ebb6 0e02 	subs.w	lr, r6, r2
   8217a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8217e:	bf22      	ittt	cs
   82180:	1ab6      	subcs	r6, r6, r2
   82182:	4675      	movcs	r5, lr
   82184:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82188:	085b      	lsrs	r3, r3, #1
   8218a:	ea4f 0232 	mov.w	r2, r2, rrx
   8218e:	ebb6 0e02 	subs.w	lr, r6, r2
   82192:	eb75 0e03 	sbcs.w	lr, r5, r3
   82196:	bf22      	ittt	cs
   82198:	1ab6      	subcs	r6, r6, r2
   8219a:	4675      	movcs	r5, lr
   8219c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   821a0:	085b      	lsrs	r3, r3, #1
   821a2:	ea4f 0232 	mov.w	r2, r2, rrx
   821a6:	ebb6 0e02 	subs.w	lr, r6, r2
   821aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   821ae:	bf22      	ittt	cs
   821b0:	1ab6      	subcs	r6, r6, r2
   821b2:	4675      	movcs	r5, lr
   821b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   821b8:	ea55 0e06 	orrs.w	lr, r5, r6
   821bc:	d018      	beq.n	821f0 <__aeabi_ddiv+0x114>
   821be:	ea4f 1505 	mov.w	r5, r5, lsl #4
   821c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   821c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   821ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   821ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   821d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   821d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   821da:	d1c0      	bne.n	8215e <__aeabi_ddiv+0x82>
   821dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   821e0:	d10b      	bne.n	821fa <__aeabi_ddiv+0x11e>
   821e2:	ea41 0100 	orr.w	r1, r1, r0
   821e6:	f04f 0000 	mov.w	r0, #0
   821ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   821ee:	e7b6      	b.n	8215e <__aeabi_ddiv+0x82>
   821f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   821f4:	bf04      	itt	eq
   821f6:	4301      	orreq	r1, r0
   821f8:	2000      	moveq	r0, #0
   821fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   821fe:	bf88      	it	hi
   82200:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   82204:	f63f aeaf 	bhi.w	81f66 <__aeabi_dmul+0xde>
   82208:	ebb5 0c03 	subs.w	ip, r5, r3
   8220c:	bf04      	itt	eq
   8220e:	ebb6 0c02 	subseq.w	ip, r6, r2
   82212:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82216:	f150 0000 	adcs.w	r0, r0, #0
   8221a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8221e:	bd70      	pop	{r4, r5, r6, pc}
   82220:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   82224:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   82228:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8222c:	bfc2      	ittt	gt
   8222e:	ebd4 050c 	rsbsgt	r5, r4, ip
   82232:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82236:	bd70      	popgt	{r4, r5, r6, pc}
   82238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8223c:	f04f 0e00 	mov.w	lr, #0
   82240:	3c01      	subs	r4, #1
   82242:	e690      	b.n	81f66 <__aeabi_dmul+0xde>
   82244:	ea45 0e06 	orr.w	lr, r5, r6
   82248:	e68d      	b.n	81f66 <__aeabi_dmul+0xde>
   8224a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8224e:	ea94 0f0c 	teq	r4, ip
   82252:	bf08      	it	eq
   82254:	ea95 0f0c 	teqeq	r5, ip
   82258:	f43f af3b 	beq.w	820d2 <__aeabi_dmul+0x24a>
   8225c:	ea94 0f0c 	teq	r4, ip
   82260:	d10a      	bne.n	82278 <__aeabi_ddiv+0x19c>
   82262:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82266:	f47f af34 	bne.w	820d2 <__aeabi_dmul+0x24a>
   8226a:	ea95 0f0c 	teq	r5, ip
   8226e:	f47f af25 	bne.w	820bc <__aeabi_dmul+0x234>
   82272:	4610      	mov	r0, r2
   82274:	4619      	mov	r1, r3
   82276:	e72c      	b.n	820d2 <__aeabi_dmul+0x24a>
   82278:	ea95 0f0c 	teq	r5, ip
   8227c:	d106      	bne.n	8228c <__aeabi_ddiv+0x1b0>
   8227e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82282:	f43f aefd 	beq.w	82080 <__aeabi_dmul+0x1f8>
   82286:	4610      	mov	r0, r2
   82288:	4619      	mov	r1, r3
   8228a:	e722      	b.n	820d2 <__aeabi_dmul+0x24a>
   8228c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82290:	bf18      	it	ne
   82292:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82296:	f47f aec5 	bne.w	82024 <__aeabi_dmul+0x19c>
   8229a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8229e:	f47f af0d 	bne.w	820bc <__aeabi_dmul+0x234>
   822a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   822a6:	f47f aeeb 	bne.w	82080 <__aeabi_dmul+0x1f8>
   822aa:	e712      	b.n	820d2 <__aeabi_dmul+0x24a>

000822ac <__aeabi_d2uiz>:
   822ac:	004a      	lsls	r2, r1, #1
   822ae:	d211      	bcs.n	822d4 <__aeabi_d2uiz+0x28>
   822b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   822b4:	d211      	bcs.n	822da <__aeabi_d2uiz+0x2e>
   822b6:	d50d      	bpl.n	822d4 <__aeabi_d2uiz+0x28>
   822b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   822bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   822c0:	d40e      	bmi.n	822e0 <__aeabi_d2uiz+0x34>
   822c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   822c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   822ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   822ce:	fa23 f002 	lsr.w	r0, r3, r2
   822d2:	4770      	bx	lr
   822d4:	f04f 0000 	mov.w	r0, #0
   822d8:	4770      	bx	lr
   822da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   822de:	d102      	bne.n	822e6 <__aeabi_d2uiz+0x3a>
   822e0:	f04f 30ff 	mov.w	r0, #4294967295
   822e4:	4770      	bx	lr
   822e6:	f04f 0000 	mov.w	r0, #0
   822ea:	4770      	bx	lr

000822ec <__aeabi_d2f>:
   822ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   822f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   822f4:	bf24      	itt	cs
   822f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   822fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   822fe:	d90d      	bls.n	8231c <__aeabi_d2f+0x30>
   82300:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82304:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   82308:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   8230c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   82310:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   82314:	bf08      	it	eq
   82316:	f020 0001 	biceq.w	r0, r0, #1
   8231a:	4770      	bx	lr
   8231c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   82320:	d121      	bne.n	82366 <__aeabi_d2f+0x7a>
   82322:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   82326:	bfbc      	itt	lt
   82328:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   8232c:	4770      	bxlt	lr
   8232e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82332:	ea4f 5252 	mov.w	r2, r2, lsr #21
   82336:	f1c2 0218 	rsb	r2, r2, #24
   8233a:	f1c2 0c20 	rsb	ip, r2, #32
   8233e:	fa10 f30c 	lsls.w	r3, r0, ip
   82342:	fa20 f002 	lsr.w	r0, r0, r2
   82346:	bf18      	it	ne
   82348:	f040 0001 	orrne.w	r0, r0, #1
   8234c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   82350:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   82354:	fa03 fc0c 	lsl.w	ip, r3, ip
   82358:	ea40 000c 	orr.w	r0, r0, ip
   8235c:	fa23 f302 	lsr.w	r3, r3, r2
   82360:	ea4f 0343 	mov.w	r3, r3, lsl #1
   82364:	e7cc      	b.n	82300 <__aeabi_d2f+0x14>
   82366:	ea7f 5362 	mvns.w	r3, r2, asr #21
   8236a:	d107      	bne.n	8237c <__aeabi_d2f+0x90>
   8236c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   82370:	bf1e      	ittt	ne
   82372:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   82376:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   8237a:	4770      	bxne	lr
   8237c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   82380:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82384:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82388:	4770      	bx	lr
   8238a:	bf00      	nop

0008238c <__aeabi_frsub>:
   8238c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   82390:	e002      	b.n	82398 <__addsf3>
   82392:	bf00      	nop

00082394 <__aeabi_fsub>:
   82394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00082398 <__addsf3>:
   82398:	0042      	lsls	r2, r0, #1
   8239a:	bf1f      	itttt	ne
   8239c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   823a0:	ea92 0f03 	teqne	r2, r3
   823a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   823a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   823ac:	d06a      	beq.n	82484 <__addsf3+0xec>
   823ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
   823b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   823b6:	bfc1      	itttt	gt
   823b8:	18d2      	addgt	r2, r2, r3
   823ba:	4041      	eorgt	r1, r0
   823bc:	4048      	eorgt	r0, r1
   823be:	4041      	eorgt	r1, r0
   823c0:	bfb8      	it	lt
   823c2:	425b      	neglt	r3, r3
   823c4:	2b19      	cmp	r3, #25
   823c6:	bf88      	it	hi
   823c8:	4770      	bxhi	lr
   823ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   823ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   823d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   823d6:	bf18      	it	ne
   823d8:	4240      	negne	r0, r0
   823da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   823de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   823e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   823e6:	bf18      	it	ne
   823e8:	4249      	negne	r1, r1
   823ea:	ea92 0f03 	teq	r2, r3
   823ee:	d03f      	beq.n	82470 <__addsf3+0xd8>
   823f0:	f1a2 0201 	sub.w	r2, r2, #1
   823f4:	fa41 fc03 	asr.w	ip, r1, r3
   823f8:	eb10 000c 	adds.w	r0, r0, ip
   823fc:	f1c3 0320 	rsb	r3, r3, #32
   82400:	fa01 f103 	lsl.w	r1, r1, r3
   82404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82408:	d502      	bpl.n	82410 <__addsf3+0x78>
   8240a:	4249      	negs	r1, r1
   8240c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   82410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   82414:	d313      	bcc.n	8243e <__addsf3+0xa6>
   82416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8241a:	d306      	bcc.n	8242a <__addsf3+0x92>
   8241c:	0840      	lsrs	r0, r0, #1
   8241e:	ea4f 0131 	mov.w	r1, r1, rrx
   82422:	f102 0201 	add.w	r2, r2, #1
   82426:	2afe      	cmp	r2, #254	; 0xfe
   82428:	d251      	bcs.n	824ce <__addsf3+0x136>
   8242a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8242e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82432:	bf08      	it	eq
   82434:	f020 0001 	biceq.w	r0, r0, #1
   82438:	ea40 0003 	orr.w	r0, r0, r3
   8243c:	4770      	bx	lr
   8243e:	0049      	lsls	r1, r1, #1
   82440:	eb40 0000 	adc.w	r0, r0, r0
   82444:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   82448:	f1a2 0201 	sub.w	r2, r2, #1
   8244c:	d1ed      	bne.n	8242a <__addsf3+0x92>
   8244e:	fab0 fc80 	clz	ip, r0
   82452:	f1ac 0c08 	sub.w	ip, ip, #8
   82456:	ebb2 020c 	subs.w	r2, r2, ip
   8245a:	fa00 f00c 	lsl.w	r0, r0, ip
   8245e:	bfaa      	itet	ge
   82460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   82464:	4252      	neglt	r2, r2
   82466:	4318      	orrge	r0, r3
   82468:	bfbc      	itt	lt
   8246a:	40d0      	lsrlt	r0, r2
   8246c:	4318      	orrlt	r0, r3
   8246e:	4770      	bx	lr
   82470:	f092 0f00 	teq	r2, #0
   82474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   82478:	bf06      	itte	eq
   8247a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8247e:	3201      	addeq	r2, #1
   82480:	3b01      	subne	r3, #1
   82482:	e7b5      	b.n	823f0 <__addsf3+0x58>
   82484:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   8248c:	bf18      	it	ne
   8248e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82492:	d021      	beq.n	824d8 <__addsf3+0x140>
   82494:	ea92 0f03 	teq	r2, r3
   82498:	d004      	beq.n	824a4 <__addsf3+0x10c>
   8249a:	f092 0f00 	teq	r2, #0
   8249e:	bf08      	it	eq
   824a0:	4608      	moveq	r0, r1
   824a2:	4770      	bx	lr
   824a4:	ea90 0f01 	teq	r0, r1
   824a8:	bf1c      	itt	ne
   824aa:	2000      	movne	r0, #0
   824ac:	4770      	bxne	lr
   824ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   824b2:	d104      	bne.n	824be <__addsf3+0x126>
   824b4:	0040      	lsls	r0, r0, #1
   824b6:	bf28      	it	cs
   824b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   824bc:	4770      	bx	lr
   824be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   824c2:	bf3c      	itt	cc
   824c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   824c8:	4770      	bxcc	lr
   824ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   824ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   824d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   824d6:	4770      	bx	lr
   824d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   824dc:	bf16      	itet	ne
   824de:	4608      	movne	r0, r1
   824e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   824e4:	4601      	movne	r1, r0
   824e6:	0242      	lsls	r2, r0, #9
   824e8:	bf06      	itte	eq
   824ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   824ee:	ea90 0f01 	teqeq	r0, r1
   824f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   824f6:	4770      	bx	lr

000824f8 <__aeabi_ui2f>:
   824f8:	f04f 0300 	mov.w	r3, #0
   824fc:	e004      	b.n	82508 <__aeabi_i2f+0x8>
   824fe:	bf00      	nop

00082500 <__aeabi_i2f>:
   82500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   82504:	bf48      	it	mi
   82506:	4240      	negmi	r0, r0
   82508:	ea5f 0c00 	movs.w	ip, r0
   8250c:	bf08      	it	eq
   8250e:	4770      	bxeq	lr
   82510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   82514:	4601      	mov	r1, r0
   82516:	f04f 0000 	mov.w	r0, #0
   8251a:	e01c      	b.n	82556 <__aeabi_l2f+0x2a>

0008251c <__aeabi_ul2f>:
   8251c:	ea50 0201 	orrs.w	r2, r0, r1
   82520:	bf08      	it	eq
   82522:	4770      	bxeq	lr
   82524:	f04f 0300 	mov.w	r3, #0
   82528:	e00a      	b.n	82540 <__aeabi_l2f+0x14>
   8252a:	bf00      	nop

0008252c <__aeabi_l2f>:
   8252c:	ea50 0201 	orrs.w	r2, r0, r1
   82530:	bf08      	it	eq
   82532:	4770      	bxeq	lr
   82534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   82538:	d502      	bpl.n	82540 <__aeabi_l2f+0x14>
   8253a:	4240      	negs	r0, r0
   8253c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82540:	ea5f 0c01 	movs.w	ip, r1
   82544:	bf02      	ittt	eq
   82546:	4684      	moveq	ip, r0
   82548:	4601      	moveq	r1, r0
   8254a:	2000      	moveq	r0, #0
   8254c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   82550:	bf08      	it	eq
   82552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   82556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8255a:	fabc f28c 	clz	r2, ip
   8255e:	3a08      	subs	r2, #8
   82560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   82564:	db10      	blt.n	82588 <__aeabi_l2f+0x5c>
   82566:	fa01 fc02 	lsl.w	ip, r1, r2
   8256a:	4463      	add	r3, ip
   8256c:	fa00 fc02 	lsl.w	ip, r0, r2
   82570:	f1c2 0220 	rsb	r2, r2, #32
   82574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82578:	fa20 f202 	lsr.w	r2, r0, r2
   8257c:	eb43 0002 	adc.w	r0, r3, r2
   82580:	bf08      	it	eq
   82582:	f020 0001 	biceq.w	r0, r0, #1
   82586:	4770      	bx	lr
   82588:	f102 0220 	add.w	r2, r2, #32
   8258c:	fa01 fc02 	lsl.w	ip, r1, r2
   82590:	f1c2 0220 	rsb	r2, r2, #32
   82594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   82598:	fa21 f202 	lsr.w	r2, r1, r2
   8259c:	eb43 0002 	adc.w	r0, r3, r2
   825a0:	bf08      	it	eq
   825a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   825a6:	4770      	bx	lr

000825a8 <__aeabi_fmul>:
   825a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   825ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   825b0:	bf1e      	ittt	ne
   825b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   825b6:	ea92 0f0c 	teqne	r2, ip
   825ba:	ea93 0f0c 	teqne	r3, ip
   825be:	d06f      	beq.n	826a0 <__aeabi_fmul+0xf8>
   825c0:	441a      	add	r2, r3
   825c2:	ea80 0c01 	eor.w	ip, r0, r1
   825c6:	0240      	lsls	r0, r0, #9
   825c8:	bf18      	it	ne
   825ca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   825ce:	d01e      	beq.n	8260e <__aeabi_fmul+0x66>
   825d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   825d4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   825d8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   825dc:	fba0 3101 	umull	r3, r1, r0, r1
   825e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   825e4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   825e8:	bf3e      	ittt	cc
   825ea:	0049      	lslcc	r1, r1, #1
   825ec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   825f0:	005b      	lslcc	r3, r3, #1
   825f2:	ea40 0001 	orr.w	r0, r0, r1
   825f6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   825fa:	2afd      	cmp	r2, #253	; 0xfd
   825fc:	d81d      	bhi.n	8263a <__aeabi_fmul+0x92>
   825fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   82602:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82606:	bf08      	it	eq
   82608:	f020 0001 	biceq.w	r0, r0, #1
   8260c:	4770      	bx	lr
   8260e:	f090 0f00 	teq	r0, #0
   82612:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   82616:	bf08      	it	eq
   82618:	0249      	lsleq	r1, r1, #9
   8261a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8261e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   82622:	3a7f      	subs	r2, #127	; 0x7f
   82624:	bfc2      	ittt	gt
   82626:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8262a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8262e:	4770      	bxgt	lr
   82630:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82634:	f04f 0300 	mov.w	r3, #0
   82638:	3a01      	subs	r2, #1
   8263a:	dc5d      	bgt.n	826f8 <__aeabi_fmul+0x150>
   8263c:	f112 0f19 	cmn.w	r2, #25
   82640:	bfdc      	itt	le
   82642:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   82646:	4770      	bxle	lr
   82648:	f1c2 0200 	rsb	r2, r2, #0
   8264c:	0041      	lsls	r1, r0, #1
   8264e:	fa21 f102 	lsr.w	r1, r1, r2
   82652:	f1c2 0220 	rsb	r2, r2, #32
   82656:	fa00 fc02 	lsl.w	ip, r0, r2
   8265a:	ea5f 0031 	movs.w	r0, r1, rrx
   8265e:	f140 0000 	adc.w	r0, r0, #0
   82662:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   82666:	bf08      	it	eq
   82668:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8266c:	4770      	bx	lr
   8266e:	f092 0f00 	teq	r2, #0
   82672:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   82676:	bf02      	ittt	eq
   82678:	0040      	lsleq	r0, r0, #1
   8267a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8267e:	3a01      	subeq	r2, #1
   82680:	d0f9      	beq.n	82676 <__aeabi_fmul+0xce>
   82682:	ea40 000c 	orr.w	r0, r0, ip
   82686:	f093 0f00 	teq	r3, #0
   8268a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8268e:	bf02      	ittt	eq
   82690:	0049      	lsleq	r1, r1, #1
   82692:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   82696:	3b01      	subeq	r3, #1
   82698:	d0f9      	beq.n	8268e <__aeabi_fmul+0xe6>
   8269a:	ea41 010c 	orr.w	r1, r1, ip
   8269e:	e78f      	b.n	825c0 <__aeabi_fmul+0x18>
   826a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   826a4:	ea92 0f0c 	teq	r2, ip
   826a8:	bf18      	it	ne
   826aa:	ea93 0f0c 	teqne	r3, ip
   826ae:	d00a      	beq.n	826c6 <__aeabi_fmul+0x11e>
   826b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   826b4:	bf18      	it	ne
   826b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   826ba:	d1d8      	bne.n	8266e <__aeabi_fmul+0xc6>
   826bc:	ea80 0001 	eor.w	r0, r0, r1
   826c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   826c4:	4770      	bx	lr
   826c6:	f090 0f00 	teq	r0, #0
   826ca:	bf17      	itett	ne
   826cc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   826d0:	4608      	moveq	r0, r1
   826d2:	f091 0f00 	teqne	r1, #0
   826d6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   826da:	d014      	beq.n	82706 <__aeabi_fmul+0x15e>
   826dc:	ea92 0f0c 	teq	r2, ip
   826e0:	d101      	bne.n	826e6 <__aeabi_fmul+0x13e>
   826e2:	0242      	lsls	r2, r0, #9
   826e4:	d10f      	bne.n	82706 <__aeabi_fmul+0x15e>
   826e6:	ea93 0f0c 	teq	r3, ip
   826ea:	d103      	bne.n	826f4 <__aeabi_fmul+0x14c>
   826ec:	024b      	lsls	r3, r1, #9
   826ee:	bf18      	it	ne
   826f0:	4608      	movne	r0, r1
   826f2:	d108      	bne.n	82706 <__aeabi_fmul+0x15e>
   826f4:	ea80 0001 	eor.w	r0, r0, r1
   826f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   826fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82700:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82704:	4770      	bx	lr
   82706:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8270a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   8270e:	4770      	bx	lr

00082710 <__aeabi_fdiv>:
   82710:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82714:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   82718:	bf1e      	ittt	ne
   8271a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8271e:	ea92 0f0c 	teqne	r2, ip
   82722:	ea93 0f0c 	teqne	r3, ip
   82726:	d069      	beq.n	827fc <__aeabi_fdiv+0xec>
   82728:	eba2 0203 	sub.w	r2, r2, r3
   8272c:	ea80 0c01 	eor.w	ip, r0, r1
   82730:	0249      	lsls	r1, r1, #9
   82732:	ea4f 2040 	mov.w	r0, r0, lsl #9
   82736:	d037      	beq.n	827a8 <__aeabi_fdiv+0x98>
   82738:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8273c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   82740:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   82744:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   82748:	428b      	cmp	r3, r1
   8274a:	bf38      	it	cc
   8274c:	005b      	lslcc	r3, r3, #1
   8274e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   82752:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   82756:	428b      	cmp	r3, r1
   82758:	bf24      	itt	cs
   8275a:	1a5b      	subcs	r3, r3, r1
   8275c:	ea40 000c 	orrcs.w	r0, r0, ip
   82760:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   82764:	bf24      	itt	cs
   82766:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   8276a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8276e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   82772:	bf24      	itt	cs
   82774:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   82778:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8277c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   82780:	bf24      	itt	cs
   82782:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   82786:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8278a:	011b      	lsls	r3, r3, #4
   8278c:	bf18      	it	ne
   8278e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   82792:	d1e0      	bne.n	82756 <__aeabi_fdiv+0x46>
   82794:	2afd      	cmp	r2, #253	; 0xfd
   82796:	f63f af50 	bhi.w	8263a <__aeabi_fmul+0x92>
   8279a:	428b      	cmp	r3, r1
   8279c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   827a0:	bf08      	it	eq
   827a2:	f020 0001 	biceq.w	r0, r0, #1
   827a6:	4770      	bx	lr
   827a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   827ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   827b0:	327f      	adds	r2, #127	; 0x7f
   827b2:	bfc2      	ittt	gt
   827b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   827b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   827bc:	4770      	bxgt	lr
   827be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   827c2:	f04f 0300 	mov.w	r3, #0
   827c6:	3a01      	subs	r2, #1
   827c8:	e737      	b.n	8263a <__aeabi_fmul+0x92>
   827ca:	f092 0f00 	teq	r2, #0
   827ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   827d2:	bf02      	ittt	eq
   827d4:	0040      	lsleq	r0, r0, #1
   827d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   827da:	3a01      	subeq	r2, #1
   827dc:	d0f9      	beq.n	827d2 <__aeabi_fdiv+0xc2>
   827de:	ea40 000c 	orr.w	r0, r0, ip
   827e2:	f093 0f00 	teq	r3, #0
   827e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   827ea:	bf02      	ittt	eq
   827ec:	0049      	lsleq	r1, r1, #1
   827ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   827f2:	3b01      	subeq	r3, #1
   827f4:	d0f9      	beq.n	827ea <__aeabi_fdiv+0xda>
   827f6:	ea41 010c 	orr.w	r1, r1, ip
   827fa:	e795      	b.n	82728 <__aeabi_fdiv+0x18>
   827fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   82800:	ea92 0f0c 	teq	r2, ip
   82804:	d108      	bne.n	82818 <__aeabi_fdiv+0x108>
   82806:	0242      	lsls	r2, r0, #9
   82808:	f47f af7d 	bne.w	82706 <__aeabi_fmul+0x15e>
   8280c:	ea93 0f0c 	teq	r3, ip
   82810:	f47f af70 	bne.w	826f4 <__aeabi_fmul+0x14c>
   82814:	4608      	mov	r0, r1
   82816:	e776      	b.n	82706 <__aeabi_fmul+0x15e>
   82818:	ea93 0f0c 	teq	r3, ip
   8281c:	d104      	bne.n	82828 <__aeabi_fdiv+0x118>
   8281e:	024b      	lsls	r3, r1, #9
   82820:	f43f af4c 	beq.w	826bc <__aeabi_fmul+0x114>
   82824:	4608      	mov	r0, r1
   82826:	e76e      	b.n	82706 <__aeabi_fmul+0x15e>
   82828:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8282c:	bf18      	it	ne
   8282e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   82832:	d1ca      	bne.n	827ca <__aeabi_fdiv+0xba>
   82834:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   82838:	f47f af5c 	bne.w	826f4 <__aeabi_fmul+0x14c>
   8283c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   82840:	f47f af3c 	bne.w	826bc <__aeabi_fmul+0x114>
   82844:	e75f      	b.n	82706 <__aeabi_fmul+0x15e>
   82846:	bf00      	nop

00082848 <__aeabi_f2uiz>:
   82848:	0042      	lsls	r2, r0, #1
   8284a:	d20e      	bcs.n	8286a <__aeabi_f2uiz+0x22>
   8284c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   82850:	d30b      	bcc.n	8286a <__aeabi_f2uiz+0x22>
   82852:	f04f 039e 	mov.w	r3, #158	; 0x9e
   82856:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   8285a:	d409      	bmi.n	82870 <__aeabi_f2uiz+0x28>
   8285c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   82860:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   82864:	fa23 f002 	lsr.w	r0, r3, r2
   82868:	4770      	bx	lr
   8286a:	f04f 0000 	mov.w	r0, #0
   8286e:	4770      	bx	lr
   82870:	f112 0f61 	cmn.w	r2, #97	; 0x61
   82874:	d101      	bne.n	8287a <__aeabi_f2uiz+0x32>
   82876:	0242      	lsls	r2, r0, #9
   82878:	d102      	bne.n	82880 <__aeabi_f2uiz+0x38>
   8287a:	f04f 30ff 	mov.w	r0, #4294967295
   8287e:	4770      	bx	lr
   82880:	f04f 0000 	mov.w	r0, #0
   82884:	4770      	bx	lr
   82886:	bf00      	nop

00082888 <__libc_init_array>:
   82888:	b570      	push	{r4, r5, r6, lr}
   8288a:	4e0f      	ldr	r6, [pc, #60]	; (828c8 <__libc_init_array+0x40>)
   8288c:	4d0f      	ldr	r5, [pc, #60]	; (828cc <__libc_init_array+0x44>)
   8288e:	1b76      	subs	r6, r6, r5
   82890:	10b6      	asrs	r6, r6, #2
   82892:	bf18      	it	ne
   82894:	2400      	movne	r4, #0
   82896:	d005      	beq.n	828a4 <__libc_init_array+0x1c>
   82898:	3401      	adds	r4, #1
   8289a:	f855 3b04 	ldr.w	r3, [r5], #4
   8289e:	4798      	blx	r3
   828a0:	42a6      	cmp	r6, r4
   828a2:	d1f9      	bne.n	82898 <__libc_init_array+0x10>
   828a4:	4e0a      	ldr	r6, [pc, #40]	; (828d0 <__libc_init_array+0x48>)
   828a6:	4d0b      	ldr	r5, [pc, #44]	; (828d4 <__libc_init_array+0x4c>)
   828a8:	f000 f8a8 	bl	829fc <_init>
   828ac:	1b76      	subs	r6, r6, r5
   828ae:	10b6      	asrs	r6, r6, #2
   828b0:	bf18      	it	ne
   828b2:	2400      	movne	r4, #0
   828b4:	d006      	beq.n	828c4 <__libc_init_array+0x3c>
   828b6:	3401      	adds	r4, #1
   828b8:	f855 3b04 	ldr.w	r3, [r5], #4
   828bc:	4798      	blx	r3
   828be:	42a6      	cmp	r6, r4
   828c0:	d1f9      	bne.n	828b6 <__libc_init_array+0x2e>
   828c2:	bd70      	pop	{r4, r5, r6, pc}
   828c4:	bd70      	pop	{r4, r5, r6, pc}
   828c6:	bf00      	nop
   828c8:	00082a08 	.word	0x00082a08
   828cc:	00082a08 	.word	0x00082a08
   828d0:	00082a10 	.word	0x00082a10
   828d4:	00082a08 	.word	0x00082a08

000828d8 <register_fini>:
   828d8:	4b02      	ldr	r3, [pc, #8]	; (828e4 <register_fini+0xc>)
   828da:	b113      	cbz	r3, 828e2 <register_fini+0xa>
   828dc:	4802      	ldr	r0, [pc, #8]	; (828e8 <register_fini+0x10>)
   828de:	f000 b805 	b.w	828ec <atexit>
   828e2:	4770      	bx	lr
   828e4:	00000000 	.word	0x00000000
   828e8:	000828f9 	.word	0x000828f9

000828ec <atexit>:
   828ec:	2300      	movs	r3, #0
   828ee:	4601      	mov	r1, r0
   828f0:	461a      	mov	r2, r3
   828f2:	4618      	mov	r0, r3
   828f4:	f000 b81e 	b.w	82934 <__register_exitproc>

000828f8 <__libc_fini_array>:
   828f8:	b538      	push	{r3, r4, r5, lr}
   828fa:	4c0a      	ldr	r4, [pc, #40]	; (82924 <__libc_fini_array+0x2c>)
   828fc:	4d0a      	ldr	r5, [pc, #40]	; (82928 <__libc_fini_array+0x30>)
   828fe:	1b64      	subs	r4, r4, r5
   82900:	10a4      	asrs	r4, r4, #2
   82902:	d00a      	beq.n	8291a <__libc_fini_array+0x22>
   82904:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82908:	3b01      	subs	r3, #1
   8290a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8290e:	3c01      	subs	r4, #1
   82910:	f855 3904 	ldr.w	r3, [r5], #-4
   82914:	4798      	blx	r3
   82916:	2c00      	cmp	r4, #0
   82918:	d1f9      	bne.n	8290e <__libc_fini_array+0x16>
   8291a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8291e:	f000 b877 	b.w	82a10 <_fini>
   82922:	bf00      	nop
   82924:	00082a20 	.word	0x00082a20
   82928:	00082a1c 	.word	0x00082a1c

0008292c <__retarget_lock_acquire_recursive>:
   8292c:	4770      	bx	lr
   8292e:	bf00      	nop

00082930 <__retarget_lock_release_recursive>:
   82930:	4770      	bx	lr
   82932:	bf00      	nop

00082934 <__register_exitproc>:
   82934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82938:	4d2c      	ldr	r5, [pc, #176]	; (829ec <__register_exitproc+0xb8>)
   8293a:	4606      	mov	r6, r0
   8293c:	6828      	ldr	r0, [r5, #0]
   8293e:	4698      	mov	r8, r3
   82940:	460f      	mov	r7, r1
   82942:	4691      	mov	r9, r2
   82944:	f7ff fff2 	bl	8292c <__retarget_lock_acquire_recursive>
   82948:	4b29      	ldr	r3, [pc, #164]	; (829f0 <__register_exitproc+0xbc>)
   8294a:	681c      	ldr	r4, [r3, #0]
   8294c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   82950:	2b00      	cmp	r3, #0
   82952:	d03e      	beq.n	829d2 <__register_exitproc+0x9e>
   82954:	685a      	ldr	r2, [r3, #4]
   82956:	2a1f      	cmp	r2, #31
   82958:	dc1c      	bgt.n	82994 <__register_exitproc+0x60>
   8295a:	f102 0e01 	add.w	lr, r2, #1
   8295e:	b176      	cbz	r6, 8297e <__register_exitproc+0x4a>
   82960:	2101      	movs	r1, #1
   82962:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   82966:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8296a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8296e:	4091      	lsls	r1, r2
   82970:	4308      	orrs	r0, r1
   82972:	2e02      	cmp	r6, #2
   82974:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   82978:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8297c:	d023      	beq.n	829c6 <__register_exitproc+0x92>
   8297e:	3202      	adds	r2, #2
   82980:	f8c3 e004 	str.w	lr, [r3, #4]
   82984:	6828      	ldr	r0, [r5, #0]
   82986:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8298a:	f7ff ffd1 	bl	82930 <__retarget_lock_release_recursive>
   8298e:	2000      	movs	r0, #0
   82990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82994:	4b17      	ldr	r3, [pc, #92]	; (829f4 <__register_exitproc+0xc0>)
   82996:	b30b      	cbz	r3, 829dc <__register_exitproc+0xa8>
   82998:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8299c:	f3af 8000 	nop.w
   829a0:	4603      	mov	r3, r0
   829a2:	b1d8      	cbz	r0, 829dc <__register_exitproc+0xa8>
   829a4:	2000      	movs	r0, #0
   829a6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   829aa:	f04f 0e01 	mov.w	lr, #1
   829ae:	6058      	str	r0, [r3, #4]
   829b0:	6019      	str	r1, [r3, #0]
   829b2:	4602      	mov	r2, r0
   829b4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   829b8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   829bc:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   829c0:	2e00      	cmp	r6, #0
   829c2:	d0dc      	beq.n	8297e <__register_exitproc+0x4a>
   829c4:	e7cc      	b.n	82960 <__register_exitproc+0x2c>
   829c6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   829ca:	4301      	orrs	r1, r0
   829cc:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   829d0:	e7d5      	b.n	8297e <__register_exitproc+0x4a>
   829d2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   829d6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   829da:	e7bb      	b.n	82954 <__register_exitproc+0x20>
   829dc:	6828      	ldr	r0, [r5, #0]
   829de:	f7ff ffa7 	bl	82930 <__retarget_lock_release_recursive>
   829e2:	f04f 30ff 	mov.w	r0, #4294967295
   829e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   829ea:	bf00      	nop
   829ec:	200705c0 	.word	0x200705c0
   829f0:	000829f8 	.word	0x000829f8
   829f4:	00000000 	.word	0x00000000

000829f8 <_global_impure_ptr>:
   829f8:	20070198                                ... 

000829fc <_init>:
   829fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   829fe:	bf00      	nop
   82a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82a02:	bc08      	pop	{r3}
   82a04:	469e      	mov	lr, r3
   82a06:	4770      	bx	lr

00082a08 <__init_array_start>:
   82a08:	000828d9 	.word	0x000828d9

00082a0c <__frame_dummy_init_array_entry>:
   82a0c:	00080119                                ....

00082a10 <_fini>:
   82a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82a12:	bf00      	nop
   82a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82a16:	bc08      	pop	{r3}
   82a18:	469e      	mov	lr, r3
   82a1a:	4770      	bx	lr

00082a1c <__fini_array_start>:
   82a1c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	20070190 	.word	0x20070190
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <bat_percentage_prefiltered>:
2007018c:	00006464                                         d

2007018d <bat_percentage_filtered>:
2007018d:	00000064                                         d..

20070190 <SystemCoreClock>:
20070190:	003d0900 00000000                       ..=.....

20070198 <impure_data>:
20070198:	00000000 20070484 200704ec 20070554     ....... ... T.. 
	...
20070240:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070250:	0005deec 0000000b 00000000 00000000     ................
	...

200705c0 <__atexit_recursive_mutex>:
200705c0:	20070600                                ... 
