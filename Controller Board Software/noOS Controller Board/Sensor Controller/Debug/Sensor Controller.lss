
Sensor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017d8  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20070000  000817d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000058  200705bc  00081d94  000205bc  2**2
                  ALLOC
  3 .stack        00002004  20070614  00081dec  000205bc  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000205e5  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000b8ec  00000000  00000000  0002063e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a2b  00000000  00000000  0002bf2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000032b0  00000000  00000000  0002d955  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005e0  00000000  00000000  00030c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005a0  00000000  00000000  000311e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00003d85  00000000  00000000  00031785  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008959  00000000  00000000  0003550a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005facd  00000000  00000000  0003de63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001940  00000000  00000000  0009d930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	18 26 07 20 e5 0d 08 00 dd 0d 08 00 dd 0d 08 00     .&. ............
   80010:	dd 0d 08 00 dd 0d 08 00 dd 0d 08 00 00 00 00 00     ................
	...
   8002c:	dd 0d 08 00 dd 0d 08 00 00 00 00 00 dd 0d 08 00     ................
   8003c:	dd 14 08 00 dd 0d 08 00 dd 0d 08 00 dd 0d 08 00     ................
   8004c:	dd 0d 08 00 dd 0d 08 00 dd 0d 08 00 dd 0d 08 00     ................
   8005c:	dd 0d 08 00 dd 0d 08 00 dd 0d 08 00 00 00 00 00     ................
   8006c:	dd 0d 08 00 dd 0d 08 00 dd 0d 08 00 dd 0d 08 00     ................
	...
   80084:	dd 0d 08 00 dd 0d 08 00 dd 0d 08 00 dd 0d 08 00     ................
   80094:	dd 0d 08 00 dd 0d 08 00 dd 0d 08 00 dd 0d 08 00     ................
   800a4:	00 00 00 00 dd 0d 08 00 dd 0d 08 00 dd 0d 08 00     ................
   800b4:	dd 0d 08 00 dd 0d 08 00 dd 0d 08 00 dd 0d 08 00     ................
   800c4:	dd 0d 08 00 dd 0d 08 00 dd 0d 08 00 dd 0d 08 00     ................
   800d4:	dd 0d 08 00 dd 0d 08 00 b1 12 08 00 dd 0d 08 00     ................
   800e4:	dd 0d 08 00 dd 0d 08 00 dd 0d 08 00 dd 0d 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200705bc 	.word	0x200705bc
   80110:	00000000 	.word	0x00000000
   80114:	000817d8 	.word	0x000817d8

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000817d8 	.word	0x000817d8
   80154:	200705c0 	.word	0x200705c0
   80158:	000817d8 	.word	0x000817d8
   8015c:	00000000 	.word	0x00000000

00080160 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   80160:	b480      	push	{r7}
   80162:	b083      	sub	sp, #12
   80164:	af00      	add	r7, sp, #0
   80166:	6078      	str	r0, [r7, #4]
   80168:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   8016a:	687b      	ldr	r3, [r7, #4]
   8016c:	685b      	ldr	r3, [r3, #4]
   8016e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   80172:	687b      	ldr	r3, [r7, #4]
   80174:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   80176:	687b      	ldr	r3, [r7, #4]
   80178:	685a      	ldr	r2, [r3, #4]
   8017a:	683b      	ldr	r3, [r7, #0]
   8017c:	041b      	lsls	r3, r3, #16
   8017e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80182:	431a      	orrs	r2, r3
   80184:	687b      	ldr	r3, [r7, #4]
   80186:	605a      	str	r2, [r3, #4]
}
   80188:	bf00      	nop
   8018a:	370c      	adds	r7, #12
   8018c:	46bd      	mov	sp, r7
   8018e:	bc80      	pop	{r7}
   80190:	4770      	bx	lr

00080192 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   80192:	b480      	push	{r7}
   80194:	b085      	sub	sp, #20
   80196:	af00      	add	r7, sp, #0
   80198:	60f8      	str	r0, [r7, #12]
   8019a:	60b9      	str	r1, [r7, #8]
   8019c:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   8019e:	687b      	ldr	r3, [r7, #4]
   801a0:	2b00      	cmp	r3, #0
   801a2:	d00c      	beq.n	801be <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   801a4:	68fb      	ldr	r3, [r7, #12]
   801a6:	68ba      	ldr	r2, [r7, #8]
   801a8:	320c      	adds	r2, #12
   801aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   801ae:	f043 0101 	orr.w	r1, r3, #1
   801b2:	68fb      	ldr	r3, [r7, #12]
   801b4:	68ba      	ldr	r2, [r7, #8]
   801b6:	320c      	adds	r2, #12
   801b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
   801bc:	e00b      	b.n	801d6 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   801be:	68fb      	ldr	r3, [r7, #12]
   801c0:	68ba      	ldr	r2, [r7, #8]
   801c2:	320c      	adds	r2, #12
   801c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   801c8:	f023 0101 	bic.w	r1, r3, #1
   801cc:	68fb      	ldr	r3, [r7, #12]
   801ce:	68ba      	ldr	r2, [r7, #8]
   801d0:	320c      	adds	r2, #12
   801d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   801d6:	bf00      	nop
   801d8:	3714      	adds	r7, #20
   801da:	46bd      	mov	sp, r7
   801dc:	bc80      	pop	{r7}
   801de:	4770      	bx	lr

000801e0 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   801e0:	b480      	push	{r7}
   801e2:	b085      	sub	sp, #20
   801e4:	af00      	add	r7, sp, #0
   801e6:	60f8      	str	r0, [r7, #12]
   801e8:	60b9      	str	r1, [r7, #8]
   801ea:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   801ec:	687b      	ldr	r3, [r7, #4]
   801ee:	2b00      	cmp	r3, #0
   801f0:	d00c      	beq.n	8020c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   801f2:	68fb      	ldr	r3, [r7, #12]
   801f4:	68ba      	ldr	r2, [r7, #8]
   801f6:	320c      	adds	r2, #12
   801f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   801fc:	f043 0102 	orr.w	r1, r3, #2
   80200:	68fb      	ldr	r3, [r7, #12]
   80202:	68ba      	ldr	r2, [r7, #8]
   80204:	320c      	adds	r2, #12
   80206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
   8020a:	e00b      	b.n	80224 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8020c:	68fb      	ldr	r3, [r7, #12]
   8020e:	68ba      	ldr	r2, [r7, #8]
   80210:	320c      	adds	r2, #12
   80212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80216:	f023 0102 	bic.w	r1, r3, #2
   8021a:	68fb      	ldr	r3, [r7, #12]
   8021c:	68ba      	ldr	r2, [r7, #8]
   8021e:	320c      	adds	r2, #12
   80220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80224:	bf00      	nop
   80226:	3714      	adds	r7, #20
   80228:	46bd      	mov	sp, r7
   8022a:	bc80      	pop	{r7}
   8022c:	4770      	bx	lr

0008022e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   8022e:	b480      	push	{r7}
   80230:	b085      	sub	sp, #20
   80232:	af00      	add	r7, sp, #0
   80234:	60f8      	str	r0, [r7, #12]
   80236:	60b9      	str	r1, [r7, #8]
   80238:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   8023a:	68fb      	ldr	r3, [r7, #12]
   8023c:	68ba      	ldr	r2, [r7, #8]
   8023e:	320c      	adds	r2, #12
   80240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80244:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   80248:	68fb      	ldr	r3, [r7, #12]
   8024a:	68ba      	ldr	r2, [r7, #8]
   8024c:	320c      	adds	r2, #12
   8024e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80252:	68fb      	ldr	r3, [r7, #12]
   80254:	68ba      	ldr	r2, [r7, #8]
   80256:	320c      	adds	r2, #12
   80258:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8025c:	687b      	ldr	r3, [r7, #4]
   8025e:	ea42 0103 	orr.w	r1, r2, r3
   80262:	68fb      	ldr	r3, [r7, #12]
   80264:	68ba      	ldr	r2, [r7, #8]
   80266:	320c      	adds	r2, #12
   80268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8026c:	bf00      	nop
   8026e:	3714      	adds	r7, #20
   80270:	46bd      	mov	sp, r7
   80272:	bc80      	pop	{r7}
   80274:	4770      	bx	lr
	...

00080278 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   80278:	b580      	push	{r7, lr}
   8027a:	b082      	sub	sp, #8
   8027c:	af00      	add	r7, sp, #0
   8027e:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   80280:	6878      	ldr	r0, [r7, #4]
   80282:	4b03      	ldr	r3, [pc, #12]	; (80290 <dmac_init+0x18>)
   80284:	4798      	blx	r3
}
   80286:	bf00      	nop
   80288:	3708      	adds	r7, #8
   8028a:	46bd      	mov	sp, r7
   8028c:	bd80      	pop	{r7, pc}
   8028e:	bf00      	nop
   80290:	000802d3 	.word	0x000802d3

00080294 <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   80294:	b480      	push	{r7}
   80296:	b083      	sub	sp, #12
   80298:	af00      	add	r7, sp, #0
   8029a:	6078      	str	r0, [r7, #4]
   8029c:	460b      	mov	r3, r1
   8029e:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   802a0:	687b      	ldr	r3, [r7, #4]
   802a2:	681b      	ldr	r3, [r3, #0]
   802a4:	f023 0210 	bic.w	r2, r3, #16
   802a8:	78fb      	ldrb	r3, [r7, #3]
   802aa:	431a      	orrs	r2, r3
   802ac:	687b      	ldr	r3, [r7, #4]
   802ae:	601a      	str	r2, [r3, #0]
}
   802b0:	bf00      	nop
   802b2:	370c      	adds	r7, #12
   802b4:	46bd      	mov	sp, r7
   802b6:	bc80      	pop	{r7}
   802b8:	4770      	bx	lr

000802ba <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   802ba:	b480      	push	{r7}
   802bc:	b083      	sub	sp, #12
   802be:	af00      	add	r7, sp, #0
   802c0:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   802c2:	687b      	ldr	r3, [r7, #4]
   802c4:	2201      	movs	r2, #1
   802c6:	605a      	str	r2, [r3, #4]
}
   802c8:	bf00      	nop
   802ca:	370c      	adds	r7, #12
   802cc:	46bd      	mov	sp, r7
   802ce:	bc80      	pop	{r7}
   802d0:	4770      	bx	lr

000802d2 <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   802d2:	b480      	push	{r7}
   802d4:	b083      	sub	sp, #12
   802d6:	af00      	add	r7, sp, #0
   802d8:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   802da:	687b      	ldr	r3, [r7, #4]
   802dc:	685b      	ldr	r3, [r3, #4]
   802de:	f023 0201 	bic.w	r2, r3, #1
   802e2:	687b      	ldr	r3, [r7, #4]
   802e4:	605a      	str	r2, [r3, #4]
}
   802e6:	bf00      	nop
   802e8:	370c      	adds	r7, #12
   802ea:	46bd      	mov	sp, r7
   802ec:	bc80      	pop	{r7}
   802ee:	4770      	bx	lr

000802f0 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   802f0:	b480      	push	{r7}
   802f2:	b083      	sub	sp, #12
   802f4:	af00      	add	r7, sp, #0
   802f6:	6078      	str	r0, [r7, #4]
   802f8:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   802fa:	687b      	ldr	r3, [r7, #4]
   802fc:	683a      	ldr	r2, [r7, #0]
   802fe:	619a      	str	r2, [r3, #24]
}
   80300:	bf00      	nop
   80302:	370c      	adds	r7, #12
   80304:	46bd      	mov	sp, r7
   80306:	bc80      	pop	{r7}
   80308:	4770      	bx	lr

0008030a <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   8030a:	b480      	push	{r7}
   8030c:	b083      	sub	sp, #12
   8030e:	af00      	add	r7, sp, #0
   80310:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   80312:	687b      	ldr	r3, [r7, #4]
   80314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   80316:	4618      	mov	r0, r3
   80318:	370c      	adds	r7, #12
   8031a:	46bd      	mov	sp, r7
   8031c:	bc80      	pop	{r7}
   8031e:	4770      	bx	lr

00080320 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   80320:	b480      	push	{r7}
   80322:	b083      	sub	sp, #12
   80324:	af00      	add	r7, sp, #0
   80326:	6078      	str	r0, [r7, #4]
   80328:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   8032a:	2201      	movs	r2, #1
   8032c:	683b      	ldr	r3, [r7, #0]
   8032e:	409a      	lsls	r2, r3
   80330:	687b      	ldr	r3, [r7, #4]
   80332:	629a      	str	r2, [r3, #40]	; 0x28
}
   80334:	bf00      	nop
   80336:	370c      	adds	r7, #12
   80338:	46bd      	mov	sp, r7
   8033a:	bc80      	pop	{r7}
   8033c:	4770      	bx	lr

0008033e <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   8033e:	b480      	push	{r7}
   80340:	b083      	sub	sp, #12
   80342:	af00      	add	r7, sp, #0
   80344:	6078      	str	r0, [r7, #4]
   80346:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   80348:	2201      	movs	r2, #1
   8034a:	683b      	ldr	r3, [r7, #0]
   8034c:	409a      	lsls	r2, r3
   8034e:	687b      	ldr	r3, [r7, #4]
   80350:	62da      	str	r2, [r3, #44]	; 0x2c
}
   80352:	bf00      	nop
   80354:	370c      	adds	r7, #12
   80356:	46bd      	mov	sp, r7
   80358:	bc80      	pop	{r7}
   8035a:	4770      	bx	lr

0008035c <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   8035c:	b480      	push	{r7}
   8035e:	b085      	sub	sp, #20
   80360:	af00      	add	r7, sp, #0
   80362:	60f8      	str	r0, [r7, #12]
   80364:	60b9      	str	r1, [r7, #8]
   80366:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   80368:	68f9      	ldr	r1, [r7, #12]
   8036a:	68ba      	ldr	r2, [r7, #8]
   8036c:	4613      	mov	r3, r2
   8036e:	009b      	lsls	r3, r3, #2
   80370:	4413      	add	r3, r2
   80372:	00db      	lsls	r3, r3, #3
   80374:	440b      	add	r3, r1
   80376:	333c      	adds	r3, #60	; 0x3c
   80378:	687a      	ldr	r2, [r7, #4]
   8037a:	601a      	str	r2, [r3, #0]
}
   8037c:	bf00      	nop
   8037e:	3714      	adds	r7, #20
   80380:	46bd      	mov	sp, r7
   80382:	bc80      	pop	{r7}
   80384:	4770      	bx	lr

00080386 <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   80386:	b480      	push	{r7}
   80388:	b085      	sub	sp, #20
   8038a:	af00      	add	r7, sp, #0
   8038c:	60f8      	str	r0, [r7, #12]
   8038e:	60b9      	str	r1, [r7, #8]
   80390:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   80392:	68f9      	ldr	r1, [r7, #12]
   80394:	68ba      	ldr	r2, [r7, #8]
   80396:	4613      	mov	r3, r2
   80398:	009b      	lsls	r3, r3, #2
   8039a:	4413      	add	r3, r2
   8039c:	00db      	lsls	r3, r3, #3
   8039e:	440b      	add	r3, r1
   803a0:	3340      	adds	r3, #64	; 0x40
   803a2:	687a      	ldr	r2, [r7, #4]
   803a4:	601a      	str	r2, [r3, #0]
}
   803a6:	bf00      	nop
   803a8:	3714      	adds	r7, #20
   803aa:	46bd      	mov	sp, r7
   803ac:	bc80      	pop	{r7}
   803ae:	4770      	bx	lr

000803b0 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   803b0:	b480      	push	{r7}
   803b2:	b085      	sub	sp, #20
   803b4:	af00      	add	r7, sp, #0
   803b6:	60f8      	str	r0, [r7, #12]
   803b8:	60b9      	str	r1, [r7, #8]
   803ba:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   803bc:	68f9      	ldr	r1, [r7, #12]
   803be:	68ba      	ldr	r2, [r7, #8]
   803c0:	4613      	mov	r3, r2
   803c2:	009b      	lsls	r3, r3, #2
   803c4:	4413      	add	r3, r2
   803c6:	00db      	lsls	r3, r3, #3
   803c8:	440b      	add	r3, r1
   803ca:	3344      	adds	r3, #68	; 0x44
   803cc:	687a      	ldr	r2, [r7, #4]
   803ce:	601a      	str	r2, [r3, #0]
}
   803d0:	bf00      	nop
   803d2:	3714      	adds	r7, #20
   803d4:	46bd      	mov	sp, r7
   803d6:	bc80      	pop	{r7}
   803d8:	4770      	bx	lr

000803da <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   803da:	b480      	push	{r7}
   803dc:	b085      	sub	sp, #20
   803de:	af00      	add	r7, sp, #0
   803e0:	60f8      	str	r0, [r7, #12]
   803e2:	60b9      	str	r1, [r7, #8]
   803e4:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   803e6:	68f9      	ldr	r1, [r7, #12]
   803e8:	68ba      	ldr	r2, [r7, #8]
   803ea:	4613      	mov	r3, r2
   803ec:	009b      	lsls	r3, r3, #2
   803ee:	4413      	add	r3, r2
   803f0:	00db      	lsls	r3, r3, #3
   803f2:	440b      	add	r3, r1
   803f4:	3348      	adds	r3, #72	; 0x48
   803f6:	687a      	ldr	r2, [r7, #4]
   803f8:	601a      	str	r2, [r3, #0]
}
   803fa:	bf00      	nop
   803fc:	3714      	adds	r7, #20
   803fe:	46bd      	mov	sp, r7
   80400:	bc80      	pop	{r7}
   80402:	4770      	bx	lr

00080404 <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   80404:	b480      	push	{r7}
   80406:	b085      	sub	sp, #20
   80408:	af00      	add	r7, sp, #0
   8040a:	60f8      	str	r0, [r7, #12]
   8040c:	60b9      	str	r1, [r7, #8]
   8040e:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   80410:	68f9      	ldr	r1, [r7, #12]
   80412:	68ba      	ldr	r2, [r7, #8]
   80414:	4613      	mov	r3, r2
   80416:	009b      	lsls	r3, r3, #2
   80418:	4413      	add	r3, r2
   8041a:	00db      	lsls	r3, r3, #3
   8041c:	440b      	add	r3, r1
   8041e:	334c      	adds	r3, #76	; 0x4c
   80420:	687a      	ldr	r2, [r7, #4]
   80422:	601a      	str	r2, [r3, #0]
}
   80424:	bf00      	nop
   80426:	3714      	adds	r7, #20
   80428:	46bd      	mov	sp, r7
   8042a:	bc80      	pop	{r7}
   8042c:	4770      	bx	lr

0008042e <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   8042e:	b480      	push	{r7}
   80430:	b085      	sub	sp, #20
   80432:	af00      	add	r7, sp, #0
   80434:	60f8      	str	r0, [r7, #12]
   80436:	60b9      	str	r1, [r7, #8]
   80438:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   8043a:	68f9      	ldr	r1, [r7, #12]
   8043c:	68ba      	ldr	r2, [r7, #8]
   8043e:	4613      	mov	r3, r2
   80440:	009b      	lsls	r3, r3, #2
   80442:	4413      	add	r3, r2
   80444:	00db      	lsls	r3, r3, #3
   80446:	440b      	add	r3, r1
   80448:	3350      	adds	r3, #80	; 0x50
   8044a:	687a      	ldr	r2, [r7, #4]
   8044c:	601a      	str	r2, [r3, #0]
}
   8044e:	bf00      	nop
   80450:	3714      	adds	r7, #20
   80452:	46bd      	mov	sp, r7
   80454:	bc80      	pop	{r7}
   80456:	4770      	bx	lr

00080458 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   80458:	b580      	push	{r7, lr}
   8045a:	b084      	sub	sp, #16
   8045c:	af00      	add	r7, sp, #0
   8045e:	60f8      	str	r0, [r7, #12]
   80460:	60b9      	str	r1, [r7, #8]
   80462:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   80464:	68fb      	ldr	r3, [r7, #12]
   80466:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   80468:	687b      	ldr	r3, [r7, #4]
   8046a:	681b      	ldr	r3, [r3, #0]
   8046c:	461a      	mov	r2, r3
   8046e:	68b9      	ldr	r1, [r7, #8]
   80470:	68f8      	ldr	r0, [r7, #12]
   80472:	4b10      	ldr	r3, [pc, #64]	; (804b4 <dmac_channel_single_buf_transfer_init+0x5c>)
   80474:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   80476:	687b      	ldr	r3, [r7, #4]
   80478:	685b      	ldr	r3, [r3, #4]
   8047a:	461a      	mov	r2, r3
   8047c:	68b9      	ldr	r1, [r7, #8]
   8047e:	68f8      	ldr	r0, [r7, #12]
   80480:	4b0d      	ldr	r3, [pc, #52]	; (804b8 <dmac_channel_single_buf_transfer_init+0x60>)
   80482:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   80484:	2200      	movs	r2, #0
   80486:	68b9      	ldr	r1, [r7, #8]
   80488:	68f8      	ldr	r0, [r7, #12]
   8048a:	4b0c      	ldr	r3, [pc, #48]	; (804bc <dmac_channel_single_buf_transfer_init+0x64>)
   8048c:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   8048e:	687b      	ldr	r3, [r7, #4]
   80490:	689b      	ldr	r3, [r3, #8]
   80492:	461a      	mov	r2, r3
   80494:	68b9      	ldr	r1, [r7, #8]
   80496:	68f8      	ldr	r0, [r7, #12]
   80498:	4b09      	ldr	r3, [pc, #36]	; (804c0 <dmac_channel_single_buf_transfer_init+0x68>)
   8049a:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   8049c:	687b      	ldr	r3, [r7, #4]
   8049e:	68db      	ldr	r3, [r3, #12]
   804a0:	461a      	mov	r2, r3
   804a2:	68b9      	ldr	r1, [r7, #8]
   804a4:	68f8      	ldr	r0, [r7, #12]
   804a6:	4b07      	ldr	r3, [pc, #28]	; (804c4 <dmac_channel_single_buf_transfer_init+0x6c>)
   804a8:	4798      	blx	r3
}
   804aa:	bf00      	nop
   804ac:	3710      	adds	r7, #16
   804ae:	46bd      	mov	sp, r7
   804b0:	bd80      	pop	{r7, pc}
   804b2:	bf00      	nop
   804b4:	0008035d 	.word	0x0008035d
   804b8:	00080387 	.word	0x00080387
   804bc:	000803b1 	.word	0x000803b1
   804c0:	000803db 	.word	0x000803db
   804c4:	00080405 	.word	0x00080405

000804c8 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   804c8:	b580      	push	{r7, lr}
   804ca:	b082      	sub	sp, #8
   804cc:	af00      	add	r7, sp, #0
   804ce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   804d0:	687b      	ldr	r3, [r7, #4]
   804d2:	2b07      	cmp	r3, #7
   804d4:	d831      	bhi.n	8053a <osc_enable+0x72>
   804d6:	a201      	add	r2, pc, #4	; (adr r2, 804dc <osc_enable+0x14>)
   804d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   804dc:	00080539 	.word	0x00080539
   804e0:	000804fd 	.word	0x000804fd
   804e4:	00080505 	.word	0x00080505
   804e8:	0008050d 	.word	0x0008050d
   804ec:	00080515 	.word	0x00080515
   804f0:	0008051d 	.word	0x0008051d
   804f4:	00080525 	.word	0x00080525
   804f8:	0008052f 	.word	0x0008052f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   804fc:	2000      	movs	r0, #0
   804fe:	4b11      	ldr	r3, [pc, #68]	; (80544 <osc_enable+0x7c>)
   80500:	4798      	blx	r3
		break;
   80502:	e01a      	b.n	8053a <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80504:	2001      	movs	r0, #1
   80506:	4b0f      	ldr	r3, [pc, #60]	; (80544 <osc_enable+0x7c>)
   80508:	4798      	blx	r3
		break;
   8050a:	e016      	b.n	8053a <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8050c:	2000      	movs	r0, #0
   8050e:	4b0e      	ldr	r3, [pc, #56]	; (80548 <osc_enable+0x80>)
   80510:	4798      	blx	r3
		break;
   80512:	e012      	b.n	8053a <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80514:	2010      	movs	r0, #16
   80516:	4b0c      	ldr	r3, [pc, #48]	; (80548 <osc_enable+0x80>)
   80518:	4798      	blx	r3
		break;
   8051a:	e00e      	b.n	8053a <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8051c:	2020      	movs	r0, #32
   8051e:	4b0a      	ldr	r3, [pc, #40]	; (80548 <osc_enable+0x80>)
   80520:	4798      	blx	r3
		break;
   80522:	e00a      	b.n	8053a <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80524:	213e      	movs	r1, #62	; 0x3e
   80526:	2000      	movs	r0, #0
   80528:	4b08      	ldr	r3, [pc, #32]	; (8054c <osc_enable+0x84>)
   8052a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   8052c:	e005      	b.n	8053a <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   8052e:	213e      	movs	r1, #62	; 0x3e
   80530:	2001      	movs	r0, #1
   80532:	4b06      	ldr	r3, [pc, #24]	; (8054c <osc_enable+0x84>)
   80534:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   80536:	e000      	b.n	8053a <osc_enable+0x72>
		break;
   80538:	bf00      	nop
	}
}
   8053a:	bf00      	nop
   8053c:	3708      	adds	r7, #8
   8053e:	46bd      	mov	sp, r7
   80540:	bd80      	pop	{r7, pc}
   80542:	bf00      	nop
   80544:	000808b5 	.word	0x000808b5
   80548:	00080921 	.word	0x00080921
   8054c:	00080991 	.word	0x00080991

00080550 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80550:	b580      	push	{r7, lr}
   80552:	b082      	sub	sp, #8
   80554:	af00      	add	r7, sp, #0
   80556:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80558:	687b      	ldr	r3, [r7, #4]
   8055a:	2b07      	cmp	r3, #7
   8055c:	d826      	bhi.n	805ac <osc_is_ready+0x5c>
   8055e:	a201      	add	r2, pc, #4	; (adr r2, 80564 <osc_is_ready+0x14>)
   80560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80564:	00080585 	.word	0x00080585
   80568:	00080589 	.word	0x00080589
   8056c:	00080589 	.word	0x00080589
   80570:	0008059b 	.word	0x0008059b
   80574:	0008059b 	.word	0x0008059b
   80578:	0008059b 	.word	0x0008059b
   8057c:	0008059b 	.word	0x0008059b
   80580:	0008059b 	.word	0x0008059b
	case OSC_SLCK_32K_RC:
		return 1;
   80584:	2301      	movs	r3, #1
   80586:	e012      	b.n	805ae <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80588:	4b0b      	ldr	r3, [pc, #44]	; (805b8 <osc_is_ready+0x68>)
   8058a:	4798      	blx	r3
   8058c:	4603      	mov	r3, r0
   8058e:	2b00      	cmp	r3, #0
   80590:	bf14      	ite	ne
   80592:	2301      	movne	r3, #1
   80594:	2300      	moveq	r3, #0
   80596:	b2db      	uxtb	r3, r3
   80598:	e009      	b.n	805ae <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8059a:	4b08      	ldr	r3, [pc, #32]	; (805bc <osc_is_ready+0x6c>)
   8059c:	4798      	blx	r3
   8059e:	4603      	mov	r3, r0
   805a0:	2b00      	cmp	r3, #0
   805a2:	bf14      	ite	ne
   805a4:	2301      	movne	r3, #1
   805a6:	2300      	moveq	r3, #0
   805a8:	b2db      	uxtb	r3, r3
   805aa:	e000      	b.n	805ae <osc_is_ready+0x5e>
	}

	return 0;
   805ac:	2300      	movs	r3, #0
}
   805ae:	4618      	mov	r0, r3
   805b0:	3708      	adds	r7, #8
   805b2:	46bd      	mov	sp, r7
   805b4:	bd80      	pop	{r7, pc}
   805b6:	bf00      	nop
   805b8:	000808ed 	.word	0x000808ed
   805bc:	00080a09 	.word	0x00080a09

000805c0 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   805c0:	b480      	push	{r7}
   805c2:	b083      	sub	sp, #12
   805c4:	af00      	add	r7, sp, #0
   805c6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   805c8:	687b      	ldr	r3, [r7, #4]
   805ca:	2b07      	cmp	r3, #7
   805cc:	d825      	bhi.n	8061a <osc_get_rate+0x5a>
   805ce:	a201      	add	r2, pc, #4	; (adr r2, 805d4 <osc_get_rate+0x14>)
   805d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   805d4:	000805f5 	.word	0x000805f5
   805d8:	000805fb 	.word	0x000805fb
   805dc:	00080601 	.word	0x00080601
   805e0:	00080607 	.word	0x00080607
   805e4:	0008060b 	.word	0x0008060b
   805e8:	0008060f 	.word	0x0008060f
   805ec:	00080613 	.word	0x00080613
   805f0:	00080617 	.word	0x00080617
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   805f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   805f8:	e010      	b.n	8061c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   805fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   805fe:	e00d      	b.n	8061c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80604:	e00a      	b.n	8061c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80606:	4b08      	ldr	r3, [pc, #32]	; (80628 <osc_get_rate+0x68>)
   80608:	e008      	b.n	8061c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8060a:	4b08      	ldr	r3, [pc, #32]	; (8062c <osc_get_rate+0x6c>)
   8060c:	e006      	b.n	8061c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8060e:	4b08      	ldr	r3, [pc, #32]	; (80630 <osc_get_rate+0x70>)
   80610:	e004      	b.n	8061c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80612:	4b07      	ldr	r3, [pc, #28]	; (80630 <osc_get_rate+0x70>)
   80614:	e002      	b.n	8061c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80616:	4b06      	ldr	r3, [pc, #24]	; (80630 <osc_get_rate+0x70>)
   80618:	e000      	b.n	8061c <osc_get_rate+0x5c>
	}

	return 0;
   8061a:	2300      	movs	r3, #0
}
   8061c:	4618      	mov	r0, r3
   8061e:	370c      	adds	r7, #12
   80620:	46bd      	mov	sp, r7
   80622:	bc80      	pop	{r7}
   80624:	4770      	bx	lr
   80626:	bf00      	nop
   80628:	003d0900 	.word	0x003d0900
   8062c:	007a1200 	.word	0x007a1200
   80630:	00b71b00 	.word	0x00b71b00

00080634 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80634:	b580      	push	{r7, lr}
   80636:	b082      	sub	sp, #8
   80638:	af00      	add	r7, sp, #0
   8063a:	4603      	mov	r3, r0
   8063c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8063e:	bf00      	nop
   80640:	79fb      	ldrb	r3, [r7, #7]
   80642:	4618      	mov	r0, r3
   80644:	4b05      	ldr	r3, [pc, #20]	; (8065c <osc_wait_ready+0x28>)
   80646:	4798      	blx	r3
   80648:	4603      	mov	r3, r0
   8064a:	f083 0301 	eor.w	r3, r3, #1
   8064e:	b2db      	uxtb	r3, r3
   80650:	2b00      	cmp	r3, #0
   80652:	d1f5      	bne.n	80640 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80654:	bf00      	nop
   80656:	3708      	adds	r7, #8
   80658:	46bd      	mov	sp, r7
   8065a:	bd80      	pop	{r7, pc}
   8065c:	00080551 	.word	0x00080551

00080660 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   80660:	b580      	push	{r7, lr}
   80662:	b086      	sub	sp, #24
   80664:	af00      	add	r7, sp, #0
   80666:	60f8      	str	r0, [r7, #12]
   80668:	607a      	str	r2, [r7, #4]
   8066a:	603b      	str	r3, [r7, #0]
   8066c:	460b      	mov	r3, r1
   8066e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   80670:	687b      	ldr	r3, [r7, #4]
   80672:	2b00      	cmp	r3, #0
   80674:	d107      	bne.n	80686 <pll_config_init+0x26>
   80676:	683b      	ldr	r3, [r7, #0]
   80678:	2b00      	cmp	r3, #0
   8067a:	d104      	bne.n	80686 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   8067c:	68fb      	ldr	r3, [r7, #12]
   8067e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   80682:	601a      	str	r2, [r3, #0]
   80684:	e019      	b.n	806ba <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   80686:	7afb      	ldrb	r3, [r7, #11]
   80688:	4618      	mov	r0, r3
   8068a:	4b0e      	ldr	r3, [pc, #56]	; (806c4 <pll_config_init+0x64>)
   8068c:	4798      	blx	r3
   8068e:	4602      	mov	r2, r0
   80690:	687b      	ldr	r3, [r7, #4]
   80692:	fbb2 f3f3 	udiv	r3, r2, r3
   80696:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   80698:	697b      	ldr	r3, [r7, #20]
   8069a:	683a      	ldr	r2, [r7, #0]
   8069c:	fb02 f303 	mul.w	r3, r2, r3
   806a0:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   806a2:	683b      	ldr	r3, [r7, #0]
   806a4:	3b01      	subs	r3, #1
   806a6:	041a      	lsls	r2, r3, #16
   806a8:	4b07      	ldr	r3, [pc, #28]	; (806c8 <pll_config_init+0x68>)
   806aa:	4013      	ands	r3, r2
   806ac:	687a      	ldr	r2, [r7, #4]
   806ae:	b2d2      	uxtb	r2, r2
   806b0:	4313      	orrs	r3, r2
   806b2:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   806b6:	68fb      	ldr	r3, [r7, #12]
   806b8:	601a      	str	r2, [r3, #0]
	}
}
   806ba:	bf00      	nop
   806bc:	3718      	adds	r7, #24
   806be:	46bd      	mov	sp, r7
   806c0:	bd80      	pop	{r7, pc}
   806c2:	bf00      	nop
   806c4:	000805c1 	.word	0x000805c1
   806c8:	07ff0000 	.word	0x07ff0000

000806cc <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   806cc:	b580      	push	{r7, lr}
   806ce:	b082      	sub	sp, #8
   806d0:	af00      	add	r7, sp, #0
   806d2:	6078      	str	r0, [r7, #4]
   806d4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   806d6:	683b      	ldr	r3, [r7, #0]
   806d8:	2b00      	cmp	r3, #0
   806da:	d108      	bne.n	806ee <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   806dc:	4b09      	ldr	r3, [pc, #36]	; (80704 <pll_enable+0x38>)
   806de:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   806e0:	4a09      	ldr	r2, [pc, #36]	; (80708 <pll_enable+0x3c>)
   806e2:	687b      	ldr	r3, [r7, #4]
   806e4:	681b      	ldr	r3, [r3, #0]
   806e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   806ea:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   806ec:	e005      	b.n	806fa <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   806ee:	4a06      	ldr	r2, [pc, #24]	; (80708 <pll_enable+0x3c>)
   806f0:	687b      	ldr	r3, [r7, #4]
   806f2:	681b      	ldr	r3, [r3, #0]
   806f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   806f8:	61d3      	str	r3, [r2, #28]
}
   806fa:	bf00      	nop
   806fc:	3708      	adds	r7, #8
   806fe:	46bd      	mov	sp, r7
   80700:	bd80      	pop	{r7, pc}
   80702:	bf00      	nop
   80704:	00080a21 	.word	0x00080a21
   80708:	400e0600 	.word	0x400e0600

0008070c <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8070c:	b580      	push	{r7, lr}
   8070e:	b082      	sub	sp, #8
   80710:	af00      	add	r7, sp, #0
   80712:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80714:	687b      	ldr	r3, [r7, #4]
   80716:	2b00      	cmp	r3, #0
   80718:	d103      	bne.n	80722 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8071a:	4b05      	ldr	r3, [pc, #20]	; (80730 <pll_is_locked+0x24>)
   8071c:	4798      	blx	r3
   8071e:	4603      	mov	r3, r0
   80720:	e002      	b.n	80728 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80722:	4b04      	ldr	r3, [pc, #16]	; (80734 <pll_is_locked+0x28>)
   80724:	4798      	blx	r3
   80726:	4603      	mov	r3, r0
	}
}
   80728:	4618      	mov	r0, r3
   8072a:	3708      	adds	r7, #8
   8072c:	46bd      	mov	sp, r7
   8072e:	bd80      	pop	{r7, pc}
   80730:	00080a39 	.word	0x00080a39
   80734:	00080a51 	.word	0x00080a51

00080738 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80738:	b580      	push	{r7, lr}
   8073a:	b082      	sub	sp, #8
   8073c:	af00      	add	r7, sp, #0
   8073e:	4603      	mov	r3, r0
   80740:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80742:	79fb      	ldrb	r3, [r7, #7]
   80744:	3b03      	subs	r3, #3
   80746:	2b04      	cmp	r3, #4
   80748:	d808      	bhi.n	8075c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8074a:	79fb      	ldrb	r3, [r7, #7]
   8074c:	4618      	mov	r0, r3
   8074e:	4b06      	ldr	r3, [pc, #24]	; (80768 <pll_enable_source+0x30>)
   80750:	4798      	blx	r3
		osc_wait_ready(e_src);
   80752:	79fb      	ldrb	r3, [r7, #7]
   80754:	4618      	mov	r0, r3
   80756:	4b05      	ldr	r3, [pc, #20]	; (8076c <pll_enable_source+0x34>)
   80758:	4798      	blx	r3
		break;
   8075a:	e000      	b.n	8075e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   8075c:	bf00      	nop
	}
}
   8075e:	bf00      	nop
   80760:	3708      	adds	r7, #8
   80762:	46bd      	mov	sp, r7
   80764:	bd80      	pop	{r7, pc}
   80766:	bf00      	nop
   80768:	000804c9 	.word	0x000804c9
   8076c:	00080635 	.word	0x00080635

00080770 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   80770:	b580      	push	{r7, lr}
   80772:	b082      	sub	sp, #8
   80774:	af00      	add	r7, sp, #0
   80776:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80778:	bf00      	nop
   8077a:	6878      	ldr	r0, [r7, #4]
   8077c:	4b04      	ldr	r3, [pc, #16]	; (80790 <pll_wait_for_lock+0x20>)
   8077e:	4798      	blx	r3
   80780:	4603      	mov	r3, r0
   80782:	2b00      	cmp	r3, #0
   80784:	d0f9      	beq.n	8077a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   80786:	2300      	movs	r3, #0
}
   80788:	4618      	mov	r0, r3
   8078a:	3708      	adds	r7, #8
   8078c:	46bd      	mov	sp, r7
   8078e:	bd80      	pop	{r7, pc}
   80790:	0008070d 	.word	0x0008070d

00080794 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80794:	b580      	push	{r7, lr}
   80796:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80798:	2006      	movs	r0, #6
   8079a:	4b04      	ldr	r3, [pc, #16]	; (807ac <sysclk_get_main_hz+0x18>)
   8079c:	4798      	blx	r3
   8079e:	4602      	mov	r2, r0
   807a0:	4613      	mov	r3, r2
   807a2:	00db      	lsls	r3, r3, #3
   807a4:	1a9b      	subs	r3, r3, r2
   807a6:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   807a8:	4618      	mov	r0, r3
   807aa:	bd80      	pop	{r7, pc}
   807ac:	000805c1 	.word	0x000805c1

000807b0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   807b0:	b580      	push	{r7, lr}
   807b2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   807b4:	4b02      	ldr	r3, [pc, #8]	; (807c0 <sysclk_get_cpu_hz+0x10>)
   807b6:	4798      	blx	r3
   807b8:	4603      	mov	r3, r0
   807ba:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   807bc:	4618      	mov	r0, r3
   807be:	bd80      	pop	{r7, pc}
   807c0:	00080795 	.word	0x00080795

000807c4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   807c4:	b590      	push	{r4, r7, lr}
   807c6:	b083      	sub	sp, #12
   807c8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   807ca:	4811      	ldr	r0, [pc, #68]	; (80810 <sysclk_init+0x4c>)
   807cc:	4b11      	ldr	r3, [pc, #68]	; (80814 <sysclk_init+0x50>)
   807ce:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   807d0:	2006      	movs	r0, #6
   807d2:	4b11      	ldr	r3, [pc, #68]	; (80818 <sysclk_init+0x54>)
   807d4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   807d6:	1d38      	adds	r0, r7, #4
   807d8:	230e      	movs	r3, #14
   807da:	2201      	movs	r2, #1
   807dc:	2106      	movs	r1, #6
   807de:	4c0f      	ldr	r4, [pc, #60]	; (8081c <sysclk_init+0x58>)
   807e0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   807e2:	1d3b      	adds	r3, r7, #4
   807e4:	2100      	movs	r1, #0
   807e6:	4618      	mov	r0, r3
   807e8:	4b0d      	ldr	r3, [pc, #52]	; (80820 <sysclk_init+0x5c>)
   807ea:	4798      	blx	r3
		pll_wait_for_lock(0);
   807ec:	2000      	movs	r0, #0
   807ee:	4b0d      	ldr	r3, [pc, #52]	; (80824 <sysclk_init+0x60>)
   807f0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   807f2:	2010      	movs	r0, #16
   807f4:	4b0c      	ldr	r3, [pc, #48]	; (80828 <sysclk_init+0x64>)
   807f6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   807f8:	4b0c      	ldr	r3, [pc, #48]	; (8082c <sysclk_init+0x68>)
   807fa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   807fc:	4b0c      	ldr	r3, [pc, #48]	; (80830 <sysclk_init+0x6c>)
   807fe:	4798      	blx	r3
   80800:	4603      	mov	r3, r0
   80802:	4618      	mov	r0, r3
   80804:	4b03      	ldr	r3, [pc, #12]	; (80814 <sysclk_init+0x50>)
   80806:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80808:	bf00      	nop
   8080a:	370c      	adds	r7, #12
   8080c:	46bd      	mov	sp, r7
   8080e:	bd90      	pop	{r4, r7, pc}
   80810:	0501bd00 	.word	0x0501bd00
   80814:	200700d1 	.word	0x200700d1
   80818:	00080739 	.word	0x00080739
   8081c:	00080661 	.word	0x00080661
   80820:	000806cd 	.word	0x000806cd
   80824:	00080771 	.word	0x00080771
   80828:	00080835 	.word	0x00080835
   8082c:	00080e8d 	.word	0x00080e8d
   80830:	000807b1 	.word	0x000807b1

00080834 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   80834:	b480      	push	{r7}
   80836:	b085      	sub	sp, #20
   80838:	af00      	add	r7, sp, #0
   8083a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8083c:	491c      	ldr	r1, [pc, #112]	; (808b0 <pmc_switch_mck_to_pllack+0x7c>)
   8083e:	4b1c      	ldr	r3, [pc, #112]	; (808b0 <pmc_switch_mck_to_pllack+0x7c>)
   80840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80842:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   80846:	687b      	ldr	r3, [r7, #4]
   80848:	4313      	orrs	r3, r2
   8084a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8084c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80850:	60fb      	str	r3, [r7, #12]
   80852:	e007      	b.n	80864 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80854:	68fb      	ldr	r3, [r7, #12]
   80856:	2b00      	cmp	r3, #0
   80858:	d101      	bne.n	8085e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8085a:	2301      	movs	r3, #1
   8085c:	e023      	b.n	808a6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8085e:	68fb      	ldr	r3, [r7, #12]
   80860:	3b01      	subs	r3, #1
   80862:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80864:	4b12      	ldr	r3, [pc, #72]	; (808b0 <pmc_switch_mck_to_pllack+0x7c>)
   80866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80868:	f003 0308 	and.w	r3, r3, #8
   8086c:	2b00      	cmp	r3, #0
   8086e:	d0f1      	beq.n	80854 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80870:	4a0f      	ldr	r2, [pc, #60]	; (808b0 <pmc_switch_mck_to_pllack+0x7c>)
   80872:	4b0f      	ldr	r3, [pc, #60]	; (808b0 <pmc_switch_mck_to_pllack+0x7c>)
   80874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80876:	f023 0303 	bic.w	r3, r3, #3
   8087a:	f043 0302 	orr.w	r3, r3, #2
   8087e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80880:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80884:	60fb      	str	r3, [r7, #12]
   80886:	e007      	b.n	80898 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80888:	68fb      	ldr	r3, [r7, #12]
   8088a:	2b00      	cmp	r3, #0
   8088c:	d101      	bne.n	80892 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   8088e:	2301      	movs	r3, #1
   80890:	e009      	b.n	808a6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   80892:	68fb      	ldr	r3, [r7, #12]
   80894:	3b01      	subs	r3, #1
   80896:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80898:	4b05      	ldr	r3, [pc, #20]	; (808b0 <pmc_switch_mck_to_pllack+0x7c>)
   8089a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8089c:	f003 0308 	and.w	r3, r3, #8
   808a0:	2b00      	cmp	r3, #0
   808a2:	d0f1      	beq.n	80888 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   808a4:	2300      	movs	r3, #0
}
   808a6:	4618      	mov	r0, r3
   808a8:	3714      	adds	r7, #20
   808aa:	46bd      	mov	sp, r7
   808ac:	bc80      	pop	{r7}
   808ae:	4770      	bx	lr
   808b0:	400e0600 	.word	0x400e0600

000808b4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   808b4:	b480      	push	{r7}
   808b6:	b083      	sub	sp, #12
   808b8:	af00      	add	r7, sp, #0
   808ba:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   808bc:	687b      	ldr	r3, [r7, #4]
   808be:	2b01      	cmp	r3, #1
   808c0:	d107      	bne.n	808d2 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   808c2:	4a08      	ldr	r2, [pc, #32]	; (808e4 <pmc_switch_sclk_to_32kxtal+0x30>)
   808c4:	4b07      	ldr	r3, [pc, #28]	; (808e4 <pmc_switch_sclk_to_32kxtal+0x30>)
   808c6:	689b      	ldr	r3, [r3, #8]
   808c8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   808cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   808d0:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   808d2:	4b04      	ldr	r3, [pc, #16]	; (808e4 <pmc_switch_sclk_to_32kxtal+0x30>)
   808d4:	4a04      	ldr	r2, [pc, #16]	; (808e8 <pmc_switch_sclk_to_32kxtal+0x34>)
   808d6:	601a      	str	r2, [r3, #0]
}
   808d8:	bf00      	nop
   808da:	370c      	adds	r7, #12
   808dc:	46bd      	mov	sp, r7
   808de:	bc80      	pop	{r7}
   808e0:	4770      	bx	lr
   808e2:	bf00      	nop
   808e4:	400e1a10 	.word	0x400e1a10
   808e8:	a5000008 	.word	0xa5000008

000808ec <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   808ec:	b480      	push	{r7}
   808ee:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   808f0:	4b09      	ldr	r3, [pc, #36]	; (80918 <pmc_osc_is_ready_32kxtal+0x2c>)
   808f2:	695b      	ldr	r3, [r3, #20]
   808f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   808f8:	2b00      	cmp	r3, #0
   808fa:	d007      	beq.n	8090c <pmc_osc_is_ready_32kxtal+0x20>
   808fc:	4b07      	ldr	r3, [pc, #28]	; (8091c <pmc_osc_is_ready_32kxtal+0x30>)
   808fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80900:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80904:	2b00      	cmp	r3, #0
   80906:	d001      	beq.n	8090c <pmc_osc_is_ready_32kxtal+0x20>
   80908:	2301      	movs	r3, #1
   8090a:	e000      	b.n	8090e <pmc_osc_is_ready_32kxtal+0x22>
   8090c:	2300      	movs	r3, #0
}
   8090e:	4618      	mov	r0, r3
   80910:	46bd      	mov	sp, r7
   80912:	bc80      	pop	{r7}
   80914:	4770      	bx	lr
   80916:	bf00      	nop
   80918:	400e1a10 	.word	0x400e1a10
   8091c:	400e0600 	.word	0x400e0600

00080920 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   80920:	b480      	push	{r7}
   80922:	b083      	sub	sp, #12
   80924:	af00      	add	r7, sp, #0
   80926:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   80928:	4a18      	ldr	r2, [pc, #96]	; (8098c <pmc_switch_mainck_to_fastrc+0x6c>)
   8092a:	4b18      	ldr	r3, [pc, #96]	; (8098c <pmc_switch_mainck_to_fastrc+0x6c>)
   8092c:	6a1b      	ldr	r3, [r3, #32]
   8092e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80932:	f043 0308 	orr.w	r3, r3, #8
   80936:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80938:	bf00      	nop
   8093a:	4b14      	ldr	r3, [pc, #80]	; (8098c <pmc_switch_mainck_to_fastrc+0x6c>)
   8093c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8093e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80942:	2b00      	cmp	r3, #0
   80944:	d0f9      	beq.n	8093a <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80946:	4911      	ldr	r1, [pc, #68]	; (8098c <pmc_switch_mainck_to_fastrc+0x6c>)
   80948:	4b10      	ldr	r3, [pc, #64]	; (8098c <pmc_switch_mainck_to_fastrc+0x6c>)
   8094a:	6a1b      	ldr	r3, [r3, #32]
   8094c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   80954:	687a      	ldr	r2, [r7, #4]
   80956:	4313      	orrs	r3, r2
   80958:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8095c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8095e:	bf00      	nop
   80960:	4b0a      	ldr	r3, [pc, #40]	; (8098c <pmc_switch_mainck_to_fastrc+0x6c>)
   80962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80968:	2b00      	cmp	r3, #0
   8096a:	d0f9      	beq.n	80960 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   8096c:	4a07      	ldr	r2, [pc, #28]	; (8098c <pmc_switch_mainck_to_fastrc+0x6c>)
   8096e:	4b07      	ldr	r3, [pc, #28]	; (8098c <pmc_switch_mainck_to_fastrc+0x6c>)
   80970:	6a1b      	ldr	r3, [r3, #32]
   80972:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   80976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8097a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8097e:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   80980:	bf00      	nop
   80982:	370c      	adds	r7, #12
   80984:	46bd      	mov	sp, r7
   80986:	bc80      	pop	{r7}
   80988:	4770      	bx	lr
   8098a:	bf00      	nop
   8098c:	400e0600 	.word	0x400e0600

00080990 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   80990:	b480      	push	{r7}
   80992:	b083      	sub	sp, #12
   80994:	af00      	add	r7, sp, #0
   80996:	6078      	str	r0, [r7, #4]
   80998:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8099a:	687b      	ldr	r3, [r7, #4]
   8099c:	2b00      	cmp	r3, #0
   8099e:	d008      	beq.n	809b2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   809a0:	4916      	ldr	r1, [pc, #88]	; (809fc <pmc_switch_mainck_to_xtal+0x6c>)
   809a2:	4b16      	ldr	r3, [pc, #88]	; (809fc <pmc_switch_mainck_to_xtal+0x6c>)
   809a4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   809a6:	4a16      	ldr	r2, [pc, #88]	; (80a00 <pmc_switch_mainck_to_xtal+0x70>)
   809a8:	401a      	ands	r2, r3
   809aa:	4b16      	ldr	r3, [pc, #88]	; (80a04 <pmc_switch_mainck_to_xtal+0x74>)
   809ac:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   809ae:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   809b0:	e01e      	b.n	809f0 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   809b2:	4912      	ldr	r1, [pc, #72]	; (809fc <pmc_switch_mainck_to_xtal+0x6c>)
   809b4:	4b11      	ldr	r3, [pc, #68]	; (809fc <pmc_switch_mainck_to_xtal+0x6c>)
   809b6:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   809b8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   809bc:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   809c0:	683a      	ldr	r2, [r7, #0]
   809c2:	0212      	lsls	r2, r2, #8
   809c4:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   809c6:	4313      	orrs	r3, r2
   809c8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   809cc:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   809d0:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   809d2:	bf00      	nop
   809d4:	4b09      	ldr	r3, [pc, #36]	; (809fc <pmc_switch_mainck_to_xtal+0x6c>)
   809d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   809d8:	f003 0301 	and.w	r3, r3, #1
   809dc:	2b00      	cmp	r3, #0
   809de:	d0f9      	beq.n	809d4 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   809e0:	4a06      	ldr	r2, [pc, #24]	; (809fc <pmc_switch_mainck_to_xtal+0x6c>)
   809e2:	4b06      	ldr	r3, [pc, #24]	; (809fc <pmc_switch_mainck_to_xtal+0x6c>)
   809e4:	6a1b      	ldr	r3, [r3, #32]
   809e6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   809ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   809ee:	6213      	str	r3, [r2, #32]
}
   809f0:	bf00      	nop
   809f2:	370c      	adds	r7, #12
   809f4:	46bd      	mov	sp, r7
   809f6:	bc80      	pop	{r7}
   809f8:	4770      	bx	lr
   809fa:	bf00      	nop
   809fc:	400e0600 	.word	0x400e0600
   80a00:	fec8fffc 	.word	0xfec8fffc
   80a04:	01370002 	.word	0x01370002

00080a08 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   80a08:	b480      	push	{r7}
   80a0a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80a0c:	4b03      	ldr	r3, [pc, #12]	; (80a1c <pmc_osc_is_ready_mainck+0x14>)
   80a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   80a14:	4618      	mov	r0, r3
   80a16:	46bd      	mov	sp, r7
   80a18:	bc80      	pop	{r7}
   80a1a:	4770      	bx	lr
   80a1c:	400e0600 	.word	0x400e0600

00080a20 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   80a20:	b480      	push	{r7}
   80a22:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80a24:	4b03      	ldr	r3, [pc, #12]	; (80a34 <pmc_disable_pllack+0x14>)
   80a26:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80a2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   80a2c:	bf00      	nop
   80a2e:	46bd      	mov	sp, r7
   80a30:	bc80      	pop	{r7}
   80a32:	4770      	bx	lr
   80a34:	400e0600 	.word	0x400e0600

00080a38 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   80a38:	b480      	push	{r7}
   80a3a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80a3c:	4b03      	ldr	r3, [pc, #12]	; (80a4c <pmc_is_locked_pllack+0x14>)
   80a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80a40:	f003 0302 	and.w	r3, r3, #2
}
   80a44:	4618      	mov	r0, r3
   80a46:	46bd      	mov	sp, r7
   80a48:	bc80      	pop	{r7}
   80a4a:	4770      	bx	lr
   80a4c:	400e0600 	.word	0x400e0600

00080a50 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   80a50:	b480      	push	{r7}
   80a52:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   80a54:	4b03      	ldr	r3, [pc, #12]	; (80a64 <pmc_is_locked_upll+0x14>)
   80a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   80a5c:	4618      	mov	r0, r3
   80a5e:	46bd      	mov	sp, r7
   80a60:	bc80      	pop	{r7}
   80a62:	4770      	bx	lr
   80a64:	400e0600 	.word	0x400e0600

00080a68 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   80a68:	b480      	push	{r7}
   80a6a:	b083      	sub	sp, #12
   80a6c:	af00      	add	r7, sp, #0
   80a6e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   80a70:	687b      	ldr	r3, [r7, #4]
   80a72:	2b2c      	cmp	r3, #44	; 0x2c
   80a74:	d901      	bls.n	80a7a <pmc_enable_periph_clk+0x12>
		return 1;
   80a76:	2301      	movs	r3, #1
   80a78:	e02f      	b.n	80ada <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   80a7a:	687b      	ldr	r3, [r7, #4]
   80a7c:	2b1f      	cmp	r3, #31
   80a7e:	d813      	bhi.n	80aa8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80a80:	4b18      	ldr	r3, [pc, #96]	; (80ae4 <pmc_enable_periph_clk+0x7c>)
   80a82:	699a      	ldr	r2, [r3, #24]
   80a84:	2101      	movs	r1, #1
   80a86:	687b      	ldr	r3, [r7, #4]
   80a88:	fa01 f303 	lsl.w	r3, r1, r3
   80a8c:	401a      	ands	r2, r3
   80a8e:	2101      	movs	r1, #1
   80a90:	687b      	ldr	r3, [r7, #4]
   80a92:	fa01 f303 	lsl.w	r3, r1, r3
   80a96:	429a      	cmp	r2, r3
   80a98:	d01e      	beq.n	80ad8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   80a9a:	4a12      	ldr	r2, [pc, #72]	; (80ae4 <pmc_enable_periph_clk+0x7c>)
   80a9c:	2101      	movs	r1, #1
   80a9e:	687b      	ldr	r3, [r7, #4]
   80aa0:	fa01 f303 	lsl.w	r3, r1, r3
   80aa4:	6113      	str	r3, [r2, #16]
   80aa6:	e017      	b.n	80ad8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80aa8:	687b      	ldr	r3, [r7, #4]
   80aaa:	3b20      	subs	r3, #32
   80aac:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80aae:	4b0d      	ldr	r3, [pc, #52]	; (80ae4 <pmc_enable_periph_clk+0x7c>)
   80ab0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80ab4:	2101      	movs	r1, #1
   80ab6:	687b      	ldr	r3, [r7, #4]
   80ab8:	fa01 f303 	lsl.w	r3, r1, r3
   80abc:	401a      	ands	r2, r3
   80abe:	2101      	movs	r1, #1
   80ac0:	687b      	ldr	r3, [r7, #4]
   80ac2:	fa01 f303 	lsl.w	r3, r1, r3
   80ac6:	429a      	cmp	r2, r3
   80ac8:	d006      	beq.n	80ad8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   80aca:	4a06      	ldr	r2, [pc, #24]	; (80ae4 <pmc_enable_periph_clk+0x7c>)
   80acc:	2101      	movs	r1, #1
   80ace:	687b      	ldr	r3, [r7, #4]
   80ad0:	fa01 f303 	lsl.w	r3, r1, r3
   80ad4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80ad8:	2300      	movs	r3, #0
}
   80ada:	4618      	mov	r0, r3
   80adc:	370c      	adds	r7, #12
   80ade:	46bd      	mov	sp, r7
   80ae0:	bc80      	pop	{r7}
   80ae2:	4770      	bx	lr
   80ae4:	400e0600 	.word	0x400e0600

00080ae8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80ae8:	b580      	push	{r7, lr}
   80aea:	b082      	sub	sp, #8
   80aec:	af00      	add	r7, sp, #0
   80aee:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80af0:	6878      	ldr	r0, [r7, #4]
   80af2:	4b03      	ldr	r3, [pc, #12]	; (80b00 <sysclk_enable_peripheral_clock+0x18>)
   80af4:	4798      	blx	r3
}
   80af6:	bf00      	nop
   80af8:	3708      	adds	r7, #8
   80afa:	46bd      	mov	sp, r7
   80afc:	bd80      	pop	{r7, pc}
   80afe:	bf00      	nop
   80b00:	00080a69 	.word	0x00080a69

00080b04 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   80b04:	b580      	push	{r7, lr}
   80b06:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   80b08:	200b      	movs	r0, #11
   80b0a:	4b06      	ldr	r3, [pc, #24]	; (80b24 <ioport_init+0x20>)
   80b0c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   80b0e:	200c      	movs	r0, #12
   80b10:	4b04      	ldr	r3, [pc, #16]	; (80b24 <ioport_init+0x20>)
   80b12:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   80b14:	200d      	movs	r0, #13
   80b16:	4b03      	ldr	r3, [pc, #12]	; (80b24 <ioport_init+0x20>)
   80b18:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   80b1a:	200e      	movs	r0, #14
   80b1c:	4b01      	ldr	r3, [pc, #4]	; (80b24 <ioport_init+0x20>)
   80b1e:	4798      	blx	r3
	arch_ioport_init();
}
   80b20:	bf00      	nop
   80b22:	bd80      	pop	{r7, pc}
   80b24:	00080ae9 	.word	0x00080ae9

00080b28 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
   80b28:	b480      	push	{r7}
   80b2a:	b089      	sub	sp, #36	; 0x24
   80b2c:	af00      	add	r7, sp, #0
   80b2e:	6078      	str	r0, [r7, #4]
   80b30:	687b      	ldr	r3, [r7, #4]
   80b32:	61fb      	str	r3, [r7, #28]
   80b34:	69fb      	ldr	r3, [r7, #28]
   80b36:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   80b38:	69bb      	ldr	r3, [r7, #24]
   80b3a:	095a      	lsrs	r2, r3, #5
   80b3c:	69fb      	ldr	r3, [r7, #28]
   80b3e:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   80b40:	697b      	ldr	r3, [r7, #20]
   80b42:	f003 031f 	and.w	r3, r3, #31
   80b46:	2101      	movs	r1, #1
   80b48:	fa01 f303 	lsl.w	r3, r1, r3
   80b4c:	613a      	str	r2, [r7, #16]
   80b4e:	60fb      	str	r3, [r7, #12]
   80b50:	693b      	ldr	r3, [r7, #16]
   80b52:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80b54:	68bb      	ldr	r3, [r7, #8]
   80b56:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80b5a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80b5e:	025b      	lsls	r3, r3, #9
   80b60:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   80b62:	68fb      	ldr	r3, [r7, #12]
   80b64:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
   80b66:	bf00      	nop
   80b68:	3724      	adds	r7, #36	; 0x24
   80b6a:	46bd      	mov	sp, r7
   80b6c:	bc80      	pop	{r7}
   80b6e:	4770      	bx	lr

00080b70 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   80b70:	b480      	push	{r7}
   80b72:	b08d      	sub	sp, #52	; 0x34
   80b74:	af00      	add	r7, sp, #0
   80b76:	6078      	str	r0, [r7, #4]
   80b78:	6039      	str	r1, [r7, #0]
   80b7a:	687b      	ldr	r3, [r7, #4]
   80b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   80b7e:	683b      	ldr	r3, [r7, #0]
   80b80:	62bb      	str	r3, [r7, #40]	; 0x28
   80b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80b84:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   80b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80b88:	095a      	lsrs	r2, r3, #5
   80b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80b8c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   80b8e:	6a3b      	ldr	r3, [r7, #32]
   80b90:	f003 031f 	and.w	r3, r3, #31
   80b94:	2101      	movs	r1, #1
   80b96:	fa01 f303 	lsl.w	r3, r1, r3
   80b9a:	61fa      	str	r2, [r7, #28]
   80b9c:	61bb      	str	r3, [r7, #24]
   80b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80ba0:	617b      	str	r3, [r7, #20]
   80ba2:	69fb      	ldr	r3, [r7, #28]
   80ba4:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80ba6:	693b      	ldr	r3, [r7, #16]
   80ba8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80bac:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80bb0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   80bb2:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   80bb4:	697b      	ldr	r3, [r7, #20]
   80bb6:	f003 0308 	and.w	r3, r3, #8
   80bba:	2b00      	cmp	r3, #0
   80bbc:	d003      	beq.n	80bc6 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   80bbe:	68fb      	ldr	r3, [r7, #12]
   80bc0:	69ba      	ldr	r2, [r7, #24]
   80bc2:	665a      	str	r2, [r3, #100]	; 0x64
   80bc4:	e002      	b.n	80bcc <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   80bc6:	68fb      	ldr	r3, [r7, #12]
   80bc8:	69ba      	ldr	r2, [r7, #24]
   80bca:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   80bcc:	697b      	ldr	r3, [r7, #20]
   80bce:	f003 0320 	and.w	r3, r3, #32
   80bd2:	2b00      	cmp	r3, #0
   80bd4:	d003      	beq.n	80bde <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   80bd6:	68fb      	ldr	r3, [r7, #12]
   80bd8:	69ba      	ldr	r2, [r7, #24]
   80bda:	651a      	str	r2, [r3, #80]	; 0x50
   80bdc:	e002      	b.n	80be4 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   80bde:	68fb      	ldr	r3, [r7, #12]
   80be0:	69ba      	ldr	r2, [r7, #24]
   80be2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   80be4:	697b      	ldr	r3, [r7, #20]
   80be6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   80bea:	2b00      	cmp	r3, #0
   80bec:	d003      	beq.n	80bf6 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   80bee:	68fb      	ldr	r3, [r7, #12]
   80bf0:	69ba      	ldr	r2, [r7, #24]
   80bf2:	621a      	str	r2, [r3, #32]
   80bf4:	e002      	b.n	80bfc <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   80bf6:	68fb      	ldr	r3, [r7, #12]
   80bf8:	69ba      	ldr	r2, [r7, #24]
   80bfa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   80bfc:	697b      	ldr	r3, [r7, #20]
   80bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80c02:	2b00      	cmp	r3, #0
   80c04:	d004      	beq.n	80c10 <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   80c06:	68fb      	ldr	r3, [r7, #12]
   80c08:	69ba      	ldr	r2, [r7, #24]
   80c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   80c0e:	e003      	b.n	80c18 <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80c10:	68fb      	ldr	r3, [r7, #12]
   80c12:	69ba      	ldr	r2, [r7, #24]
   80c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80c18:	697b      	ldr	r3, [r7, #20]
   80c1a:	f003 0301 	and.w	r3, r3, #1
   80c1e:	2b00      	cmp	r3, #0
   80c20:	d006      	beq.n	80c30 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   80c22:	68fb      	ldr	r3, [r7, #12]
   80c24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80c26:	69bb      	ldr	r3, [r7, #24]
   80c28:	431a      	orrs	r2, r3
   80c2a:	68fb      	ldr	r3, [r7, #12]
   80c2c:	671a      	str	r2, [r3, #112]	; 0x70
	arch_ioport_set_pin_mode(pin, mode);
}
   80c2e:	e006      	b.n	80c3e <ioport_set_pin_mode+0xce>
	} else {
		base->PIO_ABSR &= ~mask;
   80c30:	68fb      	ldr	r3, [r7, #12]
   80c32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80c34:	69bb      	ldr	r3, [r7, #24]
   80c36:	43db      	mvns	r3, r3
   80c38:	401a      	ands	r2, r3
   80c3a:	68fb      	ldr	r3, [r7, #12]
   80c3c:	671a      	str	r2, [r3, #112]	; 0x70
   80c3e:	bf00      	nop
   80c40:	3734      	adds	r7, #52	; 0x34
   80c42:	46bd      	mov	sp, r7
   80c44:	bc80      	pop	{r7}
   80c46:	4770      	bx	lr

00080c48 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
   80c48:	b480      	push	{r7}
   80c4a:	b08d      	sub	sp, #52	; 0x34
   80c4c:	af00      	add	r7, sp, #0
   80c4e:	6078      	str	r0, [r7, #4]
   80c50:	460b      	mov	r3, r1
   80c52:	70fb      	strb	r3, [r7, #3]
   80c54:	687b      	ldr	r3, [r7, #4]
   80c56:	62fb      	str	r3, [r7, #44]	; 0x2c
   80c58:	78fb      	ldrb	r3, [r7, #3]
   80c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   80c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80c60:	627b      	str	r3, [r7, #36]	; 0x24
   80c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80c64:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   80c66:	6a3b      	ldr	r3, [r7, #32]
   80c68:	095b      	lsrs	r3, r3, #5
   80c6a:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80c6c:	69fb      	ldr	r3, [r7, #28]
   80c6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80c72:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80c76:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   80c78:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
   80c7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   80c7e:	2b01      	cmp	r3, #1
   80c80:	d109      	bne.n	80c96 <ioport_set_pin_dir+0x4e>
   80c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80c84:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   80c86:	697b      	ldr	r3, [r7, #20]
   80c88:	f003 031f 	and.w	r3, r3, #31
   80c8c:	2201      	movs	r2, #1
   80c8e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80c90:	69bb      	ldr	r3, [r7, #24]
   80c92:	611a      	str	r2, [r3, #16]
   80c94:	e00c      	b.n	80cb0 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   80c96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   80c9a:	2b00      	cmp	r3, #0
   80c9c:	d108      	bne.n	80cb0 <ioport_set_pin_dir+0x68>
   80c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80ca0:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   80ca2:	693b      	ldr	r3, [r7, #16]
   80ca4:	f003 031f 	and.w	r3, r3, #31
   80ca8:	2201      	movs	r2, #1
   80caa:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80cac:	69bb      	ldr	r3, [r7, #24]
   80cae:	615a      	str	r2, [r3, #20]
   80cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80cb2:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   80cb4:	68fb      	ldr	r3, [r7, #12]
   80cb6:	f003 031f 	and.w	r3, r3, #31
   80cba:	2201      	movs	r2, #1
   80cbc:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80cbe:	69bb      	ldr	r3, [r7, #24]
   80cc0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
   80cc4:	bf00      	nop
   80cc6:	3734      	adds	r7, #52	; 0x34
   80cc8:	46bd      	mov	sp, r7
   80cca:	bc80      	pop	{r7}
   80ccc:	4770      	bx	lr

00080cce <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   80cce:	b480      	push	{r7}
   80cd0:	b08b      	sub	sp, #44	; 0x2c
   80cd2:	af00      	add	r7, sp, #0
   80cd4:	6078      	str	r0, [r7, #4]
   80cd6:	460b      	mov	r3, r1
   80cd8:	70fb      	strb	r3, [r7, #3]
   80cda:	687b      	ldr	r3, [r7, #4]
   80cdc:	627b      	str	r3, [r7, #36]	; 0x24
   80cde:	78fb      	ldrb	r3, [r7, #3]
   80ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   80ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80ce6:	61fb      	str	r3, [r7, #28]
   80ce8:	69fb      	ldr	r3, [r7, #28]
   80cea:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   80cec:	69bb      	ldr	r3, [r7, #24]
   80cee:	095b      	lsrs	r3, r3, #5
   80cf0:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80cf2:	697b      	ldr	r3, [r7, #20]
   80cf4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80cf8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80cfc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   80cfe:	613b      	str	r3, [r7, #16]

	if (level) {
   80d00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   80d04:	2b00      	cmp	r3, #0
   80d06:	d009      	beq.n	80d1c <ioport_set_pin_level+0x4e>
   80d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d0a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   80d0c:	68fb      	ldr	r3, [r7, #12]
   80d0e:	f003 031f 	and.w	r3, r3, #31
   80d12:	2201      	movs	r2, #1
   80d14:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80d16:	693b      	ldr	r3, [r7, #16]
   80d18:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   80d1a:	e008      	b.n	80d2e <ioport_set_pin_level+0x60>
   80d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d1e:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   80d20:	68bb      	ldr	r3, [r7, #8]
   80d22:	f003 031f 	and.w	r3, r3, #31
   80d26:	2201      	movs	r2, #1
   80d28:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80d2a:	693b      	ldr	r3, [r7, #16]
   80d2c:	635a      	str	r2, [r3, #52]	; 0x34
   80d2e:	bf00      	nop
   80d30:	372c      	adds	r7, #44	; 0x2c
   80d32:	46bd      	mov	sp, r7
   80d34:	bc80      	pop	{r7}
   80d36:	4770      	bx	lr

00080d38 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   80d38:	b580      	push	{r7, lr}
   80d3a:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80d3c:	4b21      	ldr	r3, [pc, #132]	; (80dc4 <board_init+0x8c>)
   80d3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80d42:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   80d44:	4b20      	ldr	r3, [pc, #128]	; (80dc8 <board_init+0x90>)
   80d46:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   80d48:	2101      	movs	r1, #1
   80d4a:	2063      	movs	r0, #99	; 0x63
   80d4c:	4b1f      	ldr	r3, [pc, #124]	; (80dcc <board_init+0x94>)
   80d4e:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   80d50:	2100      	movs	r1, #0
   80d52:	2063      	movs	r0, #99	; 0x63
   80d54:	4b1e      	ldr	r3, [pc, #120]	; (80dd0 <board_init+0x98>)
   80d56:	4798      	blx	r3
	ioport_set_pin_dir(LED_S1, IOPORT_DIR_OUTPUT);
   80d58:	2101      	movs	r1, #1
   80d5a:	2062      	movs	r0, #98	; 0x62
   80d5c:	4b1b      	ldr	r3, [pc, #108]	; (80dcc <board_init+0x94>)
   80d5e:	4798      	blx	r3
	ioport_set_pin_level(LED_S1, 0);
   80d60:	2100      	movs	r1, #0
   80d62:	2062      	movs	r0, #98	; 0x62
   80d64:	4b1a      	ldr	r3, [pc, #104]	; (80dd0 <board_init+0x98>)
   80d66:	4798      	blx	r3
	ioport_set_pin_dir(LED_S2, IOPORT_DIR_OUTPUT);
   80d68:	2101      	movs	r1, #1
   80d6a:	2061      	movs	r0, #97	; 0x61
   80d6c:	4b17      	ldr	r3, [pc, #92]	; (80dcc <board_init+0x94>)
   80d6e:	4798      	blx	r3
	ioport_set_pin_level(LED_S2, 0);
   80d70:	2100      	movs	r1, #0
   80d72:	2061      	movs	r0, #97	; 0x61
   80d74:	4b16      	ldr	r3, [pc, #88]	; (80dd0 <board_init+0x98>)
   80d76:	4798      	blx	r3
	ioport_set_pin_dir(LED_S3, IOPORT_DIR_OUTPUT);
   80d78:	2101      	movs	r1, #1
   80d7a:	2060      	movs	r0, #96	; 0x60
   80d7c:	4b13      	ldr	r3, [pc, #76]	; (80dcc <board_init+0x94>)
   80d7e:	4798      	blx	r3
	ioport_set_pin_level(LED_S3, 0);
   80d80:	2100      	movs	r1, #0
   80d82:	2060      	movs	r0, #96	; 0x60
   80d84:	4b12      	ldr	r3, [pc, #72]	; (80dd0 <board_init+0x98>)
   80d86:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI0_MISO, IOPORT_MODE_MUX_A);
   80d88:	2100      	movs	r1, #0
   80d8a:	2019      	movs	r0, #25
   80d8c:	4b11      	ldr	r3, [pc, #68]	; (80dd4 <board_init+0x9c>)
   80d8e:	4798      	blx	r3
	ioport_disable_pin(SPI0_MISO);
   80d90:	2019      	movs	r0, #25
   80d92:	4b11      	ldr	r3, [pc, #68]	; (80dd8 <board_init+0xa0>)
   80d94:	4798      	blx	r3
	ioport_set_pin_mode(SPI0_MOSI, IOPORT_MODE_MUX_A);
   80d96:	2100      	movs	r1, #0
   80d98:	201a      	movs	r0, #26
   80d9a:	4b0e      	ldr	r3, [pc, #56]	; (80dd4 <board_init+0x9c>)
   80d9c:	4798      	blx	r3
	ioport_disable_pin(SPI0_MOSI);
   80d9e:	201a      	movs	r0, #26
   80da0:	4b0d      	ldr	r3, [pc, #52]	; (80dd8 <board_init+0xa0>)
   80da2:	4798      	blx	r3
	ioport_set_pin_mode(SPI0_SPCK, IOPORT_MODE_MUX_A);
   80da4:	2100      	movs	r1, #0
   80da6:	201b      	movs	r0, #27
   80da8:	4b0a      	ldr	r3, [pc, #40]	; (80dd4 <board_init+0x9c>)
   80daa:	4798      	blx	r3
	ioport_disable_pin(SPI0_SPCK);
   80dac:	201b      	movs	r0, #27
   80dae:	4b0a      	ldr	r3, [pc, #40]	; (80dd8 <board_init+0xa0>)
   80db0:	4798      	blx	r3
	ioport_set_pin_mode(SPI0_NPCS0, IOPORT_MODE_MUX_A);
   80db2:	2100      	movs	r1, #0
   80db4:	201c      	movs	r0, #28
   80db6:	4b07      	ldr	r3, [pc, #28]	; (80dd4 <board_init+0x9c>)
   80db8:	4798      	blx	r3
	ioport_disable_pin(SPI0_NPCS0);
   80dba:	201c      	movs	r0, #28
   80dbc:	4b06      	ldr	r3, [pc, #24]	; (80dd8 <board_init+0xa0>)
   80dbe:	4798      	blx	r3
}
   80dc0:	bf00      	nop
   80dc2:	bd80      	pop	{r7, pc}
   80dc4:	400e1a50 	.word	0x400e1a50
   80dc8:	00080b05 	.word	0x00080b05
   80dcc:	00080c49 	.word	0x00080c49
   80dd0:	00080ccf 	.word	0x00080ccf
   80dd4:	00080b71 	.word	0x00080b71
   80dd8:	00080b29 	.word	0x00080b29

00080ddc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80ddc:	b480      	push	{r7}
   80dde:	af00      	add	r7, sp, #0
	while (1) {
   80de0:	e7fe      	b.n	80de0 <Dummy_Handler+0x4>
	...

00080de4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80de4:	b580      	push	{r7, lr}
   80de6:	b082      	sub	sp, #8
   80de8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   80dea:	4b1e      	ldr	r3, [pc, #120]	; (80e64 <Reset_Handler+0x80>)
   80dec:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   80dee:	4b1e      	ldr	r3, [pc, #120]	; (80e68 <Reset_Handler+0x84>)
   80df0:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   80df2:	687a      	ldr	r2, [r7, #4]
   80df4:	683b      	ldr	r3, [r7, #0]
   80df6:	429a      	cmp	r2, r3
   80df8:	d00c      	beq.n	80e14 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   80dfa:	e007      	b.n	80e0c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   80dfc:	683b      	ldr	r3, [r7, #0]
   80dfe:	1d1a      	adds	r2, r3, #4
   80e00:	603a      	str	r2, [r7, #0]
   80e02:	687a      	ldr	r2, [r7, #4]
   80e04:	1d11      	adds	r1, r2, #4
   80e06:	6079      	str	r1, [r7, #4]
   80e08:	6812      	ldr	r2, [r2, #0]
   80e0a:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   80e0c:	683b      	ldr	r3, [r7, #0]
   80e0e:	4a17      	ldr	r2, [pc, #92]	; (80e6c <Reset_Handler+0x88>)
   80e10:	4293      	cmp	r3, r2
   80e12:	d3f3      	bcc.n	80dfc <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e14:	4b16      	ldr	r3, [pc, #88]	; (80e70 <Reset_Handler+0x8c>)
   80e16:	603b      	str	r3, [r7, #0]
   80e18:	e004      	b.n	80e24 <Reset_Handler+0x40>
		*pDest++ = 0;
   80e1a:	683b      	ldr	r3, [r7, #0]
   80e1c:	1d1a      	adds	r2, r3, #4
   80e1e:	603a      	str	r2, [r7, #0]
   80e20:	2200      	movs	r2, #0
   80e22:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   80e24:	683b      	ldr	r3, [r7, #0]
   80e26:	4a13      	ldr	r2, [pc, #76]	; (80e74 <Reset_Handler+0x90>)
   80e28:	4293      	cmp	r3, r2
   80e2a:	d3f6      	bcc.n	80e1a <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   80e2c:	4b12      	ldr	r3, [pc, #72]	; (80e78 <Reset_Handler+0x94>)
   80e2e:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80e30:	4a12      	ldr	r2, [pc, #72]	; (80e7c <Reset_Handler+0x98>)
   80e32:	687b      	ldr	r3, [r7, #4]
   80e34:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80e38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80e3c:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80e3e:	687b      	ldr	r3, [r7, #4]
   80e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   80e44:	d309      	bcc.n	80e5a <Reset_Handler+0x76>
   80e46:	687b      	ldr	r3, [r7, #4]
   80e48:	4a0d      	ldr	r2, [pc, #52]	; (80e80 <Reset_Handler+0x9c>)
   80e4a:	4293      	cmp	r3, r2
   80e4c:	d805      	bhi.n	80e5a <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80e4e:	4a0b      	ldr	r2, [pc, #44]	; (80e7c <Reset_Handler+0x98>)
   80e50:	4b0a      	ldr	r3, [pc, #40]	; (80e7c <Reset_Handler+0x98>)
   80e52:	689b      	ldr	r3, [r3, #8]
   80e54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80e58:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80e5a:	4b0a      	ldr	r3, [pc, #40]	; (80e84 <Reset_Handler+0xa0>)
   80e5c:	4798      	blx	r3

	/* Branch to main function */
	main();
   80e5e:	4b0a      	ldr	r3, [pc, #40]	; (80e88 <Reset_Handler+0xa4>)
   80e60:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   80e62:	e7fe      	b.n	80e62 <Reset_Handler+0x7e>
   80e64:	000817d8 	.word	0x000817d8
   80e68:	20070000 	.word	0x20070000
   80e6c:	200705bc 	.word	0x200705bc
   80e70:	200705bc 	.word	0x200705bc
   80e74:	20070614 	.word	0x20070614
   80e78:	00080000 	.word	0x00080000
   80e7c:	e000ed00 	.word	0xe000ed00
   80e80:	200fffff 	.word	0x200fffff
   80e84:	00081641 	.word	0x00081641
   80e88:	000814f9 	.word	0x000814f9

00080e8c <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   80e8c:	b480      	push	{r7}
   80e8e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80e90:	4b57      	ldr	r3, [pc, #348]	; (80ff0 <SystemCoreClockUpdate+0x164>)
   80e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e94:	f003 0303 	and.w	r3, r3, #3
   80e98:	2b03      	cmp	r3, #3
   80e9a:	f200 808a 	bhi.w	80fb2 <SystemCoreClockUpdate+0x126>
   80e9e:	a201      	add	r2, pc, #4	; (adr r2, 80ea4 <SystemCoreClockUpdate+0x18>)
   80ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80ea4:	00080eb5 	.word	0x00080eb5
   80ea8:	00080ed5 	.word	0x00080ed5
   80eac:	00080f25 	.word	0x00080f25
   80eb0:	00080f25 	.word	0x00080f25
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80eb4:	4b4f      	ldr	r3, [pc, #316]	; (80ff4 <SystemCoreClockUpdate+0x168>)
   80eb6:	695b      	ldr	r3, [r3, #20]
   80eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80ebc:	2b00      	cmp	r3, #0
   80ebe:	d004      	beq.n	80eca <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80ec0:	4b4d      	ldr	r3, [pc, #308]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80ec2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80ec6:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   80ec8:	e073      	b.n	80fb2 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80eca:	4b4b      	ldr	r3, [pc, #300]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80ecc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   80ed0:	601a      	str	r2, [r3, #0]
		break;
   80ed2:	e06e      	b.n	80fb2 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80ed4:	4b46      	ldr	r3, [pc, #280]	; (80ff0 <SystemCoreClockUpdate+0x164>)
   80ed6:	6a1b      	ldr	r3, [r3, #32]
   80ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80edc:	2b00      	cmp	r3, #0
   80ede:	d003      	beq.n	80ee8 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ee0:	4b45      	ldr	r3, [pc, #276]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80ee2:	4a46      	ldr	r2, [pc, #280]	; (80ffc <SystemCoreClockUpdate+0x170>)
   80ee4:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   80ee6:	e064      	b.n	80fb2 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80ee8:	4b43      	ldr	r3, [pc, #268]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80eea:	4a45      	ldr	r2, [pc, #276]	; (81000 <SystemCoreClockUpdate+0x174>)
   80eec:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80eee:	4b40      	ldr	r3, [pc, #256]	; (80ff0 <SystemCoreClockUpdate+0x164>)
   80ef0:	6a1b      	ldr	r3, [r3, #32]
   80ef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ef6:	2b10      	cmp	r3, #16
   80ef8:	d004      	beq.n	80f04 <SystemCoreClockUpdate+0x78>
   80efa:	2b20      	cmp	r3, #32
   80efc:	d008      	beq.n	80f10 <SystemCoreClockUpdate+0x84>
   80efe:	2b00      	cmp	r3, #0
   80f00:	d00e      	beq.n	80f20 <SystemCoreClockUpdate+0x94>
				break;
   80f02:	e00e      	b.n	80f22 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   80f04:	4b3c      	ldr	r3, [pc, #240]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f06:	681b      	ldr	r3, [r3, #0]
   80f08:	005b      	lsls	r3, r3, #1
   80f0a:	4a3b      	ldr	r2, [pc, #236]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f0c:	6013      	str	r3, [r2, #0]
				break;
   80f0e:	e008      	b.n	80f22 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   80f10:	4b39      	ldr	r3, [pc, #228]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f12:	681a      	ldr	r2, [r3, #0]
   80f14:	4613      	mov	r3, r2
   80f16:	005b      	lsls	r3, r3, #1
   80f18:	4413      	add	r3, r2
   80f1a:	4a37      	ldr	r2, [pc, #220]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f1c:	6013      	str	r3, [r2, #0]
				break;
   80f1e:	e000      	b.n	80f22 <SystemCoreClockUpdate+0x96>
				break;
   80f20:	bf00      	nop
		break;
   80f22:	e046      	b.n	80fb2 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f24:	4b32      	ldr	r3, [pc, #200]	; (80ff0 <SystemCoreClockUpdate+0x164>)
   80f26:	6a1b      	ldr	r3, [r3, #32]
   80f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80f2c:	2b00      	cmp	r3, #0
   80f2e:	d003      	beq.n	80f38 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f30:	4b31      	ldr	r3, [pc, #196]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f32:	4a32      	ldr	r2, [pc, #200]	; (80ffc <SystemCoreClockUpdate+0x170>)
   80f34:	601a      	str	r2, [r3, #0]
   80f36:	e01c      	b.n	80f72 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f38:	4b2f      	ldr	r3, [pc, #188]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f3a:	4a31      	ldr	r2, [pc, #196]	; (81000 <SystemCoreClockUpdate+0x174>)
   80f3c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f3e:	4b2c      	ldr	r3, [pc, #176]	; (80ff0 <SystemCoreClockUpdate+0x164>)
   80f40:	6a1b      	ldr	r3, [r3, #32]
   80f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f46:	2b10      	cmp	r3, #16
   80f48:	d004      	beq.n	80f54 <SystemCoreClockUpdate+0xc8>
   80f4a:	2b20      	cmp	r3, #32
   80f4c:	d008      	beq.n	80f60 <SystemCoreClockUpdate+0xd4>
   80f4e:	2b00      	cmp	r3, #0
   80f50:	d00e      	beq.n	80f70 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   80f52:	e00e      	b.n	80f72 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   80f54:	4b28      	ldr	r3, [pc, #160]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f56:	681b      	ldr	r3, [r3, #0]
   80f58:	005b      	lsls	r3, r3, #1
   80f5a:	4a27      	ldr	r2, [pc, #156]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f5c:	6013      	str	r3, [r2, #0]
				break;
   80f5e:	e008      	b.n	80f72 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   80f60:	4b25      	ldr	r3, [pc, #148]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f62:	681a      	ldr	r2, [r3, #0]
   80f64:	4613      	mov	r3, r2
   80f66:	005b      	lsls	r3, r3, #1
   80f68:	4413      	add	r3, r2
   80f6a:	4a23      	ldr	r2, [pc, #140]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f6c:	6013      	str	r3, [r2, #0]
				break;
   80f6e:	e000      	b.n	80f72 <SystemCoreClockUpdate+0xe6>
				break;
   80f70:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80f72:	4b1f      	ldr	r3, [pc, #124]	; (80ff0 <SystemCoreClockUpdate+0x164>)
   80f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f76:	f003 0303 	and.w	r3, r3, #3
   80f7a:	2b02      	cmp	r3, #2
   80f7c:	d115      	bne.n	80faa <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f7e:	4b1c      	ldr	r3, [pc, #112]	; (80ff0 <SystemCoreClockUpdate+0x164>)
   80f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   80f82:	0c1b      	lsrs	r3, r3, #16
   80f84:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   80f88:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f8a:	4a1b      	ldr	r2, [pc, #108]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f8c:	6812      	ldr	r2, [r2, #0]
   80f8e:	fb02 f303 	mul.w	r3, r2, r3
   80f92:	4a19      	ldr	r2, [pc, #100]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f94:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f96:	4b16      	ldr	r3, [pc, #88]	; (80ff0 <SystemCoreClockUpdate+0x164>)
   80f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   80f9a:	b2db      	uxtb	r3, r3
   80f9c:	4a16      	ldr	r2, [pc, #88]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80f9e:	6812      	ldr	r2, [r2, #0]
   80fa0:	fbb2 f3f3 	udiv	r3, r2, r3
   80fa4:	4a14      	ldr	r2, [pc, #80]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80fa6:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   80fa8:	e002      	b.n	80fb0 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80faa:	4b13      	ldr	r3, [pc, #76]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80fac:	4a15      	ldr	r2, [pc, #84]	; (81004 <SystemCoreClockUpdate+0x178>)
   80fae:	601a      	str	r2, [r3, #0]
		break;
   80fb0:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80fb2:	4b0f      	ldr	r3, [pc, #60]	; (80ff0 <SystemCoreClockUpdate+0x164>)
   80fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80fba:	2b70      	cmp	r3, #112	; 0x70
   80fbc:	d108      	bne.n	80fd0 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   80fbe:	4b0e      	ldr	r3, [pc, #56]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80fc0:	681b      	ldr	r3, [r3, #0]
   80fc2:	4a11      	ldr	r2, [pc, #68]	; (81008 <SystemCoreClockUpdate+0x17c>)
   80fc4:	fba2 2303 	umull	r2, r3, r2, r3
   80fc8:	085b      	lsrs	r3, r3, #1
   80fca:	4a0b      	ldr	r2, [pc, #44]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80fcc:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   80fce:	e00a      	b.n	80fe6 <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80fd0:	4b07      	ldr	r3, [pc, #28]	; (80ff0 <SystemCoreClockUpdate+0x164>)
   80fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80fd4:	091b      	lsrs	r3, r3, #4
   80fd6:	f003 0307 	and.w	r3, r3, #7
   80fda:	4a07      	ldr	r2, [pc, #28]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80fdc:	6812      	ldr	r2, [r2, #0]
   80fde:	fa22 f303 	lsr.w	r3, r2, r3
   80fe2:	4a05      	ldr	r2, [pc, #20]	; (80ff8 <SystemCoreClockUpdate+0x16c>)
   80fe4:	6013      	str	r3, [r2, #0]
}
   80fe6:	bf00      	nop
   80fe8:	46bd      	mov	sp, r7
   80fea:	bc80      	pop	{r7}
   80fec:	4770      	bx	lr
   80fee:	bf00      	nop
   80ff0:	400e0600 	.word	0x400e0600
   80ff4:	400e1a10 	.word	0x400e1a10
   80ff8:	2007018c 	.word	0x2007018c
   80ffc:	00b71b00 	.word	0x00b71b00
   81000:	003d0900 	.word	0x003d0900
   81004:	0e4e1c00 	.word	0x0e4e1c00
   81008:	aaaaaaab 	.word	0xaaaaaaab

0008100c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   8100c:	b480      	push	{r7}
   8100e:	b083      	sub	sp, #12
   81010:	af00      	add	r7, sp, #0
   81012:	4603      	mov	r3, r0
   81014:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81016:	4908      	ldr	r1, [pc, #32]	; (81038 <NVIC_EnableIRQ+0x2c>)
   81018:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8101c:	095b      	lsrs	r3, r3, #5
   8101e:	79fa      	ldrb	r2, [r7, #7]
   81020:	f002 021f 	and.w	r2, r2, #31
   81024:	2001      	movs	r0, #1
   81026:	fa00 f202 	lsl.w	r2, r0, r2
   8102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8102e:	bf00      	nop
   81030:	370c      	adds	r7, #12
   81032:	46bd      	mov	sp, r7
   81034:	bc80      	pop	{r7}
   81036:	4770      	bx	lr
   81038:	e000e100 	.word	0xe000e100

0008103c <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   8103c:	b480      	push	{r7}
   8103e:	b083      	sub	sp, #12
   81040:	af00      	add	r7, sp, #0
   81042:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   81044:	687b      	ldr	r3, [r7, #4]
   81046:	2280      	movs	r2, #128	; 0x80
   81048:	601a      	str	r2, [r3, #0]
}
   8104a:	bf00      	nop
   8104c:	370c      	adds	r7, #12
   8104e:	46bd      	mov	sp, r7
   81050:	bc80      	pop	{r7}
   81052:	4770      	bx	lr

00081054 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   81054:	b480      	push	{r7}
   81056:	b083      	sub	sp, #12
   81058:	af00      	add	r7, sp, #0
   8105a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8105c:	687b      	ldr	r3, [r7, #4]
   8105e:	2201      	movs	r2, #1
   81060:	601a      	str	r2, [r3, #0]
}
   81062:	bf00      	nop
   81064:	370c      	adds	r7, #12
   81066:	46bd      	mov	sp, r7
   81068:	bc80      	pop	{r7}
   8106a:	4770      	bx	lr

0008106c <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
   8106c:	b480      	push	{r7}
   8106e:	b083      	sub	sp, #12
   81070:	af00      	add	r7, sp, #0
   81072:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   81074:	687b      	ldr	r3, [r7, #4]
   81076:	2202      	movs	r2, #2
   81078:	601a      	str	r2, [r3, #0]
}
   8107a:	bf00      	nop
   8107c:	370c      	adds	r7, #12
   8107e:	46bd      	mov	sp, r7
   81080:	bc80      	pop	{r7}
   81082:	4770      	bx	lr

00081084 <spi_set_slave_mode>:
 * \brief Set SPI to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
   81084:	b480      	push	{r7}
   81086:	b083      	sub	sp, #12
   81088:	af00      	add	r7, sp, #0
   8108a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
   8108c:	687b      	ldr	r3, [r7, #4]
   8108e:	685b      	ldr	r3, [r3, #4]
   81090:	f023 0201 	bic.w	r2, r3, #1
   81094:	687b      	ldr	r3, [r7, #4]
   81096:	605a      	str	r2, [r3, #4]
}
   81098:	bf00      	nop
   8109a:	370c      	adds	r7, #12
   8109c:	46bd      	mov	sp, r7
   8109e:	bc80      	pop	{r7}
   810a0:	4770      	bx	lr

000810a2 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   810a2:	b480      	push	{r7}
   810a4:	b083      	sub	sp, #12
   810a6:	af00      	add	r7, sp, #0
   810a8:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   810aa:	687b      	ldr	r3, [r7, #4]
   810ac:	685b      	ldr	r3, [r3, #4]
   810ae:	f043 0210 	orr.w	r2, r3, #16
   810b2:	687b      	ldr	r3, [r7, #4]
   810b4:	605a      	str	r2, [r3, #4]
}
   810b6:	bf00      	nop
   810b8:	370c      	adds	r7, #12
   810ba:	46bd      	mov	sp, r7
   810bc:	bc80      	pop	{r7}
   810be:	4770      	bx	lr

000810c0 <spi_init>:

static Bool received_data = 0;
uint8_t sens_buf[sizeof(mts)];

void spi_init(void)
{
   810c0:	b580      	push	{r7, lr}
   810c2:	af00      	add	r7, sp, #0
    configure_dmac();
   810c4:	4b02      	ldr	r3, [pc, #8]	; (810d0 <spi_init+0x10>)
   810c6:	4798      	blx	r3
    spi_slave_initialize();
   810c8:	4b02      	ldr	r3, [pc, #8]	; (810d4 <spi_init+0x14>)
   810ca:	4798      	blx	r3
}
   810cc:	bf00      	nop
   810ce:	bd80      	pop	{r7, pc}
   810d0:	00081225 	.word	0x00081225
   810d4:	00081171 	.word	0x00081171

000810d8 <spi_slave_transfer>:

void spi_slave_transfer(void *p_buf, uint32_t ul_size)
{
   810d8:	b580      	push	{r7, lr}
   810da:	b088      	sub	sp, #32
   810dc:	af00      	add	r7, sp, #0
   810de:	6078      	str	r0, [r7, #4]
   810e0:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    dmac_channel_disable(DMAC, 1);
   810e2:	2101      	movs	r1, #1
   810e4:	481a      	ldr	r0, [pc, #104]	; (81150 <spi_slave_transfer+0x78>)
   810e6:	4b1b      	ldr	r3, [pc, #108]	; (81154 <spi_slave_transfer+0x7c>)
   810e8:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   810ea:	687b      	ldr	r3, [r7, #4]
   810ec:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & SPI0->SPI_TDR;
   810ee:	4b1a      	ldr	r3, [pc, #104]	; (81158 <spi_slave_transfer+0x80>)
   810f0:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   810f2:	683b      	ldr	r3, [r7, #0]
   810f4:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   810f6:	4b19      	ldr	r3, [pc, #100]	; (8115c <spi_slave_transfer+0x84>)
   810f8:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   810fa:	2300      	movs	r3, #0
   810fc:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   810fe:	f107 030c 	add.w	r3, r7, #12
   81102:	461a      	mov	r2, r3
   81104:	2101      	movs	r1, #1
   81106:	4812      	ldr	r0, [pc, #72]	; (81150 <spi_slave_transfer+0x78>)
   81108:	4b15      	ldr	r3, [pc, #84]	; (81160 <spi_slave_transfer+0x88>)
   8110a:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   8110c:	2101      	movs	r1, #1
   8110e:	4810      	ldr	r0, [pc, #64]	; (81150 <spi_slave_transfer+0x78>)
   81110:	4b14      	ldr	r3, [pc, #80]	; (81164 <spi_slave_transfer+0x8c>)
   81112:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   81114:	2100      	movs	r1, #0
   81116:	480e      	ldr	r0, [pc, #56]	; (81150 <spi_slave_transfer+0x78>)
   81118:	4b0e      	ldr	r3, [pc, #56]	; (81154 <spi_slave_transfer+0x7c>)
   8111a:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & SPI0->SPI_RDR;
   8111c:	4b12      	ldr	r3, [pc, #72]	; (81168 <spi_slave_transfer+0x90>)
   8111e:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   81120:	687b      	ldr	r3, [r7, #4]
   81122:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   81124:	683b      	ldr	r3, [r7, #0]
   81126:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   81128:	4b10      	ldr	r3, [pc, #64]	; (8116c <spi_slave_transfer+0x94>)
   8112a:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   8112c:	2300      	movs	r3, #0
   8112e:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   81130:	f107 030c 	add.w	r3, r7, #12
   81134:	461a      	mov	r2, r3
   81136:	2100      	movs	r1, #0
   81138:	4805      	ldr	r0, [pc, #20]	; (81150 <spi_slave_transfer+0x78>)
   8113a:	4b09      	ldr	r3, [pc, #36]	; (81160 <spi_slave_transfer+0x88>)
   8113c:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   8113e:	2100      	movs	r1, #0
   81140:	4803      	ldr	r0, [pc, #12]	; (81150 <spi_slave_transfer+0x78>)
   81142:	4b08      	ldr	r3, [pc, #32]	; (81164 <spi_slave_transfer+0x8c>)
   81144:	4798      	blx	r3
}
   81146:	bf00      	nop
   81148:	3720      	adds	r7, #32
   8114a:	46bd      	mov	sp, r7
   8114c:	bd80      	pop	{r7, pc}
   8114e:	bf00      	nop
   81150:	400c4000 	.word	0x400c4000
   81154:	0008033f 	.word	0x0008033f
   81158:	4000800c 	.word	0x4000800c
   8115c:	20310000 	.word	0x20310000
   81160:	00080459 	.word	0x00080459
   81164:	00080321 	.word	0x00080321
   81168:	40008008 	.word	0x40008008
   8116c:	02510000 	.word	0x02510000

00081170 <spi_slave_initialize>:

void spi_slave_initialize(void)
{
   81170:	b580      	push	{r7, lr}
   81172:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   81174:	2101      	movs	r1, #1
   81176:	481b      	ldr	r0, [pc, #108]	; (811e4 <spi_slave_initialize+0x74>)
   81178:	4b1b      	ldr	r3, [pc, #108]	; (811e8 <spi_slave_initialize+0x78>)
   8117a:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   8117c:	2100      	movs	r1, #0
   8117e:	4819      	ldr	r0, [pc, #100]	; (811e4 <spi_slave_initialize+0x74>)
   81180:	4b19      	ldr	r3, [pc, #100]	; (811e8 <spi_slave_initialize+0x78>)
   81182:	4798      	blx	r3
    pmc_enable_periph_clk(ID_SPI0);
   81184:	2018      	movs	r0, #24
   81186:	4b19      	ldr	r3, [pc, #100]	; (811ec <spi_slave_initialize+0x7c>)
   81188:	4798      	blx	r3
    spi_disable(SPI0);
   8118a:	4819      	ldr	r0, [pc, #100]	; (811f0 <spi_slave_initialize+0x80>)
   8118c:	4b19      	ldr	r3, [pc, #100]	; (811f4 <spi_slave_initialize+0x84>)
   8118e:	4798      	blx	r3
    spi_reset(SPI0);
   81190:	4817      	ldr	r0, [pc, #92]	; (811f0 <spi_slave_initialize+0x80>)
   81192:	4b19      	ldr	r3, [pc, #100]	; (811f8 <spi_slave_initialize+0x88>)
   81194:	4798      	blx	r3
    spi_set_slave_mode(SPI0);
   81196:	4816      	ldr	r0, [pc, #88]	; (811f0 <spi_slave_initialize+0x80>)
   81198:	4b18      	ldr	r3, [pc, #96]	; (811fc <spi_slave_initialize+0x8c>)
   8119a:	4798      	blx	r3
    spi_disable_mode_fault_detect(SPI0);
   8119c:	4814      	ldr	r0, [pc, #80]	; (811f0 <spi_slave_initialize+0x80>)
   8119e:	4b18      	ldr	r3, [pc, #96]	; (81200 <spi_slave_initialize+0x90>)
   811a0:	4798      	blx	r3
    spi_set_peripheral_chip_select_value(SPI0, spi_get_pcs(0));
   811a2:	210e      	movs	r1, #14
   811a4:	4812      	ldr	r0, [pc, #72]	; (811f0 <spi_slave_initialize+0x80>)
   811a6:	4b17      	ldr	r3, [pc, #92]	; (81204 <spi_slave_initialize+0x94>)
   811a8:	4798      	blx	r3
    spi_set_clock_polarity(SPI0, 0, 0);
   811aa:	2200      	movs	r2, #0
   811ac:	2100      	movs	r1, #0
   811ae:	4810      	ldr	r0, [pc, #64]	; (811f0 <spi_slave_initialize+0x80>)
   811b0:	4b15      	ldr	r3, [pc, #84]	; (81208 <spi_slave_initialize+0x98>)
   811b2:	4798      	blx	r3
    spi_set_clock_phase(SPI0, 0, 1);
   811b4:	2201      	movs	r2, #1
   811b6:	2100      	movs	r1, #0
   811b8:	480d      	ldr	r0, [pc, #52]	; (811f0 <spi_slave_initialize+0x80>)
   811ba:	4b14      	ldr	r3, [pc, #80]	; (8120c <spi_slave_initialize+0x9c>)
   811bc:	4798      	blx	r3
    spi_set_bits_per_transfer(SPI0, 0, SPI_CSR_BITS_8_BIT);
   811be:	2200      	movs	r2, #0
   811c0:	2100      	movs	r1, #0
   811c2:	480b      	ldr	r0, [pc, #44]	; (811f0 <spi_slave_initialize+0x80>)
   811c4:	4b12      	ldr	r3, [pc, #72]	; (81210 <spi_slave_initialize+0xa0>)
   811c6:	4798      	blx	r3
    spi_enable(SPI0);
   811c8:	4809      	ldr	r0, [pc, #36]	; (811f0 <spi_slave_initialize+0x80>)
   811ca:	4b12      	ldr	r3, [pc, #72]	; (81214 <spi_slave_initialize+0xa4>)
   811cc:	4798      	blx	r3

    /* Start waiting command. */
    memcpy(&sens_buf, &stm, sizeof(stm));
   811ce:	4b12      	ldr	r3, [pc, #72]	; (81218 <spi_slave_initialize+0xa8>)
   811d0:	781a      	ldrb	r2, [r3, #0]
   811d2:	4b12      	ldr	r3, [pc, #72]	; (8121c <spi_slave_initialize+0xac>)
   811d4:	701a      	strb	r2, [r3, #0]
    spi_slave_transfer(&sens_buf, sizeof(sens_buf));
   811d6:	2101      	movs	r1, #1
   811d8:	4810      	ldr	r0, [pc, #64]	; (8121c <spi_slave_initialize+0xac>)
   811da:	4b11      	ldr	r3, [pc, #68]	; (81220 <spi_slave_initialize+0xb0>)
   811dc:	4798      	blx	r3
}
   811de:	bf00      	nop
   811e0:	bd80      	pop	{r7, pc}
   811e2:	bf00      	nop
   811e4:	400c4000 	.word	0x400c4000
   811e8:	0008033f 	.word	0x0008033f
   811ec:	00080a69 	.word	0x00080a69
   811f0:	40008000 	.word	0x40008000
   811f4:	0008106d 	.word	0x0008106d
   811f8:	0008103d 	.word	0x0008103d
   811fc:	00081085 	.word	0x00081085
   81200:	000810a3 	.word	0x000810a3
   81204:	00080161 	.word	0x00080161
   81208:	00080193 	.word	0x00080193
   8120c:	000801e1 	.word	0x000801e1
   81210:	0008022f 	.word	0x0008022f
   81214:	00081055 	.word	0x00081055
   81218:	200705ec 	.word	0x200705ec
   8121c:	200705e4 	.word	0x200705e4
   81220:	000810d9 	.word	0x000810d9

00081224 <configure_dmac>:

void configure_dmac(void)
{
   81224:	b580      	push	{r7, lr}
   81226:	b082      	sub	sp, #8
   81228:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   8122a:	2027      	movs	r0, #39	; 0x27
   8122c:	4b18      	ldr	r3, [pc, #96]	; (81290 <configure_dmac+0x6c>)
   8122e:	4798      	blx	r3
    dmac_init(DMAC);
   81230:	4818      	ldr	r0, [pc, #96]	; (81294 <configure_dmac+0x70>)
   81232:	4b19      	ldr	r3, [pc, #100]	; (81298 <configure_dmac+0x74>)
   81234:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   81236:	2110      	movs	r1, #16
   81238:	4816      	ldr	r0, [pc, #88]	; (81294 <configure_dmac+0x70>)
   8123a:	4b18      	ldr	r3, [pc, #96]	; (8129c <configure_dmac+0x78>)
   8123c:	4798      	blx	r3
    dmac_enable(DMAC);
   8123e:	4815      	ldr	r0, [pc, #84]	; (81294 <configure_dmac+0x70>)
   81240:	4b17      	ldr	r3, [pc, #92]	; (812a0 <configure_dmac+0x7c>)
   81242:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   81244:	2300      	movs	r3, #0
   81246:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(2) |
   81248:	687b      	ldr	r3, [r7, #4]
   8124a:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   8124e:	f043 0302 	orr.w	r3, r3, #2
   81252:	607b      	str	r3, [r7, #4]
    DMAC_CFG_SRC_H2SEL |
    DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   81254:	687a      	ldr	r2, [r7, #4]
   81256:	2100      	movs	r1, #0
   81258:	480e      	ldr	r0, [pc, #56]	; (81294 <configure_dmac+0x70>)
   8125a:	4b12      	ldr	r3, [pc, #72]	; (812a4 <configure_dmac+0x80>)
   8125c:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   8125e:	2300      	movs	r3, #0
   81260:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(1) |
   81262:	687b      	ldr	r3, [r7, #4]
   81264:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   81268:	f043 0310 	orr.w	r3, r3, #16
   8126c:	607b      	str	r3, [r7, #4]
    DMAC_CFG_DST_H2SEL |
    DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   8126e:	687a      	ldr	r2, [r7, #4]
   81270:	2101      	movs	r1, #1
   81272:	4808      	ldr	r0, [pc, #32]	; (81294 <configure_dmac+0x70>)
   81274:	4b0b      	ldr	r3, [pc, #44]	; (812a4 <configure_dmac+0x80>)
   81276:	4798      	blx	r3

    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   81278:	2027      	movs	r0, #39	; 0x27
   8127a:	4b0b      	ldr	r3, [pc, #44]	; (812a8 <configure_dmac+0x84>)
   8127c:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   8127e:	2101      	movs	r1, #1
   81280:	4804      	ldr	r0, [pc, #16]	; (81294 <configure_dmac+0x70>)
   81282:	4b0a      	ldr	r3, [pc, #40]	; (812ac <configure_dmac+0x88>)
   81284:	4798      	blx	r3
}
   81286:	bf00      	nop
   81288:	3708      	adds	r7, #8
   8128a:	46bd      	mov	sp, r7
   8128c:	bd80      	pop	{r7, pc}
   8128e:	bf00      	nop
   81290:	00080a69 	.word	0x00080a69
   81294:	400c4000 	.word	0x400c4000
   81298:	00080279 	.word	0x00080279
   8129c:	00080295 	.word	0x00080295
   812a0:	000802bb 	.word	0x000802bb
   812a4:	0008042f 	.word	0x0008042f
   812a8:	0008100d 	.word	0x0008100d
   812ac:	000802f1 	.word	0x000802f1

000812b0 <DMAC_Handler>:

void DMAC_Handler(void)
{
   812b0:	b580      	push	{r7, lr}
   812b2:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   812b4:	480a      	ldr	r0, [pc, #40]	; (812e0 <DMAC_Handler+0x30>)
   812b6:	4b0b      	ldr	r3, [pc, #44]	; (812e4 <DMAC_Handler+0x34>)
   812b8:	4798      	blx	r3
   812ba:	4602      	mov	r2, r0
   812bc:	4b0a      	ldr	r3, [pc, #40]	; (812e8 <DMAC_Handler+0x38>)
   812be:	601a      	str	r2, [r3, #0]
    
    if (ul_status & 1)
   812c0:	4b09      	ldr	r3, [pc, #36]	; (812e8 <DMAC_Handler+0x38>)
   812c2:	681b      	ldr	r3, [r3, #0]
   812c4:	f003 0301 	and.w	r3, r3, #1
   812c8:	2b00      	cmp	r3, #0
   812ca:	d006      	beq.n	812da <DMAC_Handler+0x2a>
    {
        memcpy(&mts, &sens_buf, sizeof(mts));
   812cc:	4b07      	ldr	r3, [pc, #28]	; (812ec <DMAC_Handler+0x3c>)
   812ce:	781a      	ldrb	r2, [r3, #0]
   812d0:	4b07      	ldr	r3, [pc, #28]	; (812f0 <DMAC_Handler+0x40>)
   812d2:	701a      	strb	r2, [r3, #0]
        received_data = true;
   812d4:	4b07      	ldr	r3, [pc, #28]	; (812f4 <DMAC_Handler+0x44>)
   812d6:	2201      	movs	r2, #1
   812d8:	701a      	strb	r2, [r3, #0]
    }
}
   812da:	bf00      	nop
   812dc:	bd80      	pop	{r7, pc}
   812de:	bf00      	nop
   812e0:	400c4000 	.word	0x400c4000
   812e4:	0008030b 	.word	0x0008030b
   812e8:	200705dc 	.word	0x200705dc
   812ec:	200705e4 	.word	0x200705e4
   812f0:	200705e8 	.word	0x200705e8
   812f4:	200705d8 	.word	0x200705d8

000812f8 <PrepareValuesToSend>:

void PrepareValuesToSend(void)
{
   812f8:	b580      	push	{r7, lr}
   812fa:	af00      	add	r7, sp, #0
    if (received_data)
   812fc:	4b08      	ldr	r3, [pc, #32]	; (81320 <PrepareValuesToSend+0x28>)
   812fe:	781b      	ldrb	r3, [r3, #0]
   81300:	2b00      	cmp	r3, #0
   81302:	d00a      	beq.n	8131a <PrepareValuesToSend+0x22>
    {
        received_data = false;
   81304:	4b06      	ldr	r3, [pc, #24]	; (81320 <PrepareValuesToSend+0x28>)
   81306:	2200      	movs	r2, #0
   81308:	701a      	strb	r2, [r3, #0]
        memcpy(&sens_buf, &stm, sizeof(stm));
   8130a:	4b06      	ldr	r3, [pc, #24]	; (81324 <PrepareValuesToSend+0x2c>)
   8130c:	781a      	ldrb	r2, [r3, #0]
   8130e:	4b06      	ldr	r3, [pc, #24]	; (81328 <PrepareValuesToSend+0x30>)
   81310:	701a      	strb	r2, [r3, #0]
        spi_slave_transfer(&sens_buf, sizeof(sens_buf));
   81312:	2101      	movs	r1, #1
   81314:	4804      	ldr	r0, [pc, #16]	; (81328 <PrepareValuesToSend+0x30>)
   81316:	4b05      	ldr	r3, [pc, #20]	; (8132c <PrepareValuesToSend+0x34>)
   81318:	4798      	blx	r3
    }
   8131a:	bf00      	nop
   8131c:	bd80      	pop	{r7, pc}
   8131e:	bf00      	nop
   81320:	200705d8 	.word	0x200705d8
   81324:	200705ec 	.word	0x200705ec
   81328:	200705e4 	.word	0x200705e4
   8132c:	000810d9 	.word	0x000810d9

00081330 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81330:	b480      	push	{r7}
   81332:	b083      	sub	sp, #12
   81334:	af00      	add	r7, sp, #0
   81336:	4603      	mov	r3, r0
   81338:	6039      	str	r1, [r7, #0]
   8133a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   8133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81340:	2b00      	cmp	r3, #0
   81342:	da0b      	bge.n	8135c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81344:	490d      	ldr	r1, [pc, #52]	; (8137c <NVIC_SetPriority+0x4c>)
   81346:	79fb      	ldrb	r3, [r7, #7]
   81348:	f003 030f 	and.w	r3, r3, #15
   8134c:	3b04      	subs	r3, #4
   8134e:	683a      	ldr	r2, [r7, #0]
   81350:	b2d2      	uxtb	r2, r2
   81352:	0112      	lsls	r2, r2, #4
   81354:	b2d2      	uxtb	r2, r2
   81356:	440b      	add	r3, r1
   81358:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   8135a:	e009      	b.n	81370 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8135c:	4908      	ldr	r1, [pc, #32]	; (81380 <NVIC_SetPriority+0x50>)
   8135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81362:	683a      	ldr	r2, [r7, #0]
   81364:	b2d2      	uxtb	r2, r2
   81366:	0112      	lsls	r2, r2, #4
   81368:	b2d2      	uxtb	r2, r2
   8136a:	440b      	add	r3, r1
   8136c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81370:	bf00      	nop
   81372:	370c      	adds	r7, #12
   81374:	46bd      	mov	sp, r7
   81376:	bc80      	pop	{r7}
   81378:	4770      	bx	lr
   8137a:	bf00      	nop
   8137c:	e000ed00 	.word	0xe000ed00
   81380:	e000e100 	.word	0xe000e100

00081384 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   81384:	b580      	push	{r7, lr}
   81386:	b082      	sub	sp, #8
   81388:	af00      	add	r7, sp, #0
   8138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   8138c:	687b      	ldr	r3, [r7, #4]
   8138e:	3b01      	subs	r3, #1
   81390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   81394:	d301      	bcc.n	8139a <SysTick_Config+0x16>
   81396:	2301      	movs	r3, #1
   81398:	e00f      	b.n	813ba <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   8139a:	4a0a      	ldr	r2, [pc, #40]	; (813c4 <SysTick_Config+0x40>)
   8139c:	687b      	ldr	r3, [r7, #4]
   8139e:	3b01      	subs	r3, #1
   813a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   813a2:	210f      	movs	r1, #15
   813a4:	f04f 30ff 	mov.w	r0, #4294967295
   813a8:	4b07      	ldr	r3, [pc, #28]	; (813c8 <SysTick_Config+0x44>)
   813aa:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   813ac:	4b05      	ldr	r3, [pc, #20]	; (813c4 <SysTick_Config+0x40>)
   813ae:	2200      	movs	r2, #0
   813b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   813b2:	4b04      	ldr	r3, [pc, #16]	; (813c4 <SysTick_Config+0x40>)
   813b4:	2207      	movs	r2, #7
   813b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   813b8:	2300      	movs	r3, #0
}
   813ba:	4618      	mov	r0, r3
   813bc:	3708      	adds	r7, #8
   813be:	46bd      	mov	sp, r7
   813c0:	bd80      	pop	{r7, pc}
   813c2:	bf00      	nop
   813c4:	e000e010 	.word	0xe000e010
   813c8:	00081331 	.word	0x00081331

000813cc <osc_get_rate>:
{
   813cc:	b480      	push	{r7}
   813ce:	b083      	sub	sp, #12
   813d0:	af00      	add	r7, sp, #0
   813d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   813d4:	687b      	ldr	r3, [r7, #4]
   813d6:	2b07      	cmp	r3, #7
   813d8:	d825      	bhi.n	81426 <osc_get_rate+0x5a>
   813da:	a201      	add	r2, pc, #4	; (adr r2, 813e0 <osc_get_rate+0x14>)
   813dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   813e0:	00081401 	.word	0x00081401
   813e4:	00081407 	.word	0x00081407
   813e8:	0008140d 	.word	0x0008140d
   813ec:	00081413 	.word	0x00081413
   813f0:	00081417 	.word	0x00081417
   813f4:	0008141b 	.word	0x0008141b
   813f8:	0008141f 	.word	0x0008141f
   813fc:	00081423 	.word	0x00081423
		return OSC_SLCK_32K_RC_HZ;
   81400:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81404:	e010      	b.n	81428 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   81406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8140a:	e00d      	b.n	81428 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   8140c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81410:	e00a      	b.n	81428 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   81412:	4b08      	ldr	r3, [pc, #32]	; (81434 <osc_get_rate+0x68>)
   81414:	e008      	b.n	81428 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   81416:	4b08      	ldr	r3, [pc, #32]	; (81438 <osc_get_rate+0x6c>)
   81418:	e006      	b.n	81428 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8141a:	4b08      	ldr	r3, [pc, #32]	; (8143c <osc_get_rate+0x70>)
   8141c:	e004      	b.n	81428 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8141e:	4b07      	ldr	r3, [pc, #28]	; (8143c <osc_get_rate+0x70>)
   81420:	e002      	b.n	81428 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   81422:	4b06      	ldr	r3, [pc, #24]	; (8143c <osc_get_rate+0x70>)
   81424:	e000      	b.n	81428 <osc_get_rate+0x5c>
	return 0;
   81426:	2300      	movs	r3, #0
}
   81428:	4618      	mov	r0, r3
   8142a:	370c      	adds	r7, #12
   8142c:	46bd      	mov	sp, r7
   8142e:	bc80      	pop	{r7}
   81430:	4770      	bx	lr
   81432:	bf00      	nop
   81434:	003d0900 	.word	0x003d0900
   81438:	007a1200 	.word	0x007a1200
   8143c:	00b71b00 	.word	0x00b71b00

00081440 <sysclk_get_main_hz>:
{
   81440:	b580      	push	{r7, lr}
   81442:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   81444:	2006      	movs	r0, #6
   81446:	4b04      	ldr	r3, [pc, #16]	; (81458 <sysclk_get_main_hz+0x18>)
   81448:	4798      	blx	r3
   8144a:	4602      	mov	r2, r0
   8144c:	4613      	mov	r3, r2
   8144e:	00db      	lsls	r3, r3, #3
   81450:	1a9b      	subs	r3, r3, r2
   81452:	005b      	lsls	r3, r3, #1
}
   81454:	4618      	mov	r0, r3
   81456:	bd80      	pop	{r7, pc}
   81458:	000813cd 	.word	0x000813cd

0008145c <sysclk_get_cpu_hz>:
{
   8145c:	b580      	push	{r7, lr}
   8145e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   81460:	4b02      	ldr	r3, [pc, #8]	; (8146c <sysclk_get_cpu_hz+0x10>)
   81462:	4798      	blx	r3
   81464:	4603      	mov	r3, r0
   81466:	085b      	lsrs	r3, r3, #1
}
   81468:	4618      	mov	r0, r3
   8146a:	bd80      	pop	{r7, pc}
   8146c:	00081441 	.word	0x00081441

00081470 <ioport_set_pin_level>:
{
   81470:	b480      	push	{r7}
   81472:	b08b      	sub	sp, #44	; 0x2c
   81474:	af00      	add	r7, sp, #0
   81476:	6078      	str	r0, [r7, #4]
   81478:	460b      	mov	r3, r1
   8147a:	70fb      	strb	r3, [r7, #3]
   8147c:	687b      	ldr	r3, [r7, #4]
   8147e:	627b      	str	r3, [r7, #36]	; 0x24
   81480:	78fb      	ldrb	r3, [r7, #3]
   81482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81488:	61fb      	str	r3, [r7, #28]
   8148a:	69fb      	ldr	r3, [r7, #28]
   8148c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   8148e:	69bb      	ldr	r3, [r7, #24]
   81490:	095b      	lsrs	r3, r3, #5
   81492:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81494:	697b      	ldr	r3, [r7, #20]
   81496:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8149a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8149e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   814a0:	613b      	str	r3, [r7, #16]
	if (level) {
   814a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   814a6:	2b00      	cmp	r3, #0
   814a8:	d009      	beq.n	814be <ioport_set_pin_level+0x4e>
   814aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   814ac:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   814ae:	68fb      	ldr	r3, [r7, #12]
   814b0:	f003 031f 	and.w	r3, r3, #31
   814b4:	2201      	movs	r2, #1
   814b6:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   814b8:	693b      	ldr	r3, [r7, #16]
   814ba:	631a      	str	r2, [r3, #48]	; 0x30
}
   814bc:	e008      	b.n	814d0 <ioport_set_pin_level+0x60>
   814be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   814c0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   814c2:	68bb      	ldr	r3, [r7, #8]
   814c4:	f003 031f 	and.w	r3, r3, #31
   814c8:	2201      	movs	r2, #1
   814ca:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   814cc:	693b      	ldr	r3, [r7, #16]
   814ce:	635a      	str	r2, [r3, #52]	; 0x34
   814d0:	bf00      	nop
   814d2:	372c      	adds	r7, #44	; 0x2c
   814d4:	46bd      	mov	sp, r7
   814d6:	bc80      	pop	{r7}
   814d8:	4770      	bx	lr
	...

000814dc <SysTick_Handler>:
static uint32_t g_ul_ms_ticks = 0;

void mdelay(uint32_t ul_dly_ticks);

void SysTick_Handler(void)
{
   814dc:	b480      	push	{r7}
   814de:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   814e0:	4b04      	ldr	r3, [pc, #16]	; (814f4 <SysTick_Handler+0x18>)
   814e2:	681b      	ldr	r3, [r3, #0]
   814e4:	3301      	adds	r3, #1
   814e6:	4a03      	ldr	r2, [pc, #12]	; (814f4 <SysTick_Handler+0x18>)
   814e8:	6013      	str	r3, [r2, #0]
}
   814ea:	bf00      	nop
   814ec:	46bd      	mov	sp, r7
   814ee:	bc80      	pop	{r7}
   814f0:	4770      	bx	lr
   814f2:	bf00      	nop
   814f4:	200705e0 	.word	0x200705e0

000814f8 <main>:

int main(void)
{
   814f8:	b580      	push	{r7, lr}
   814fa:	b082      	sub	sp, #8
   814fc:	af00      	add	r7, sp, #0
    sysclk_init();
   814fe:	4b3a      	ldr	r3, [pc, #232]	; (815e8 <main+0xf0>)
   81500:	4798      	blx	r3
    board_init();
   81502:	4b3a      	ldr	r3, [pc, #232]	; (815ec <main+0xf4>)
   81504:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   81506:	4b3a      	ldr	r3, [pc, #232]	; (815f0 <main+0xf8>)
   81508:	4798      	blx	r3
   8150a:	4602      	mov	r2, r0
   8150c:	4b39      	ldr	r3, [pc, #228]	; (815f4 <main+0xfc>)
   8150e:	fba3 2302 	umull	r2, r3, r3, r2
   81512:	099b      	lsrs	r3, r3, #6
   81514:	4618      	mov	r0, r3
   81516:	4b38      	ldr	r3, [pc, #224]	; (815f8 <main+0x100>)
   81518:	4798      	blx	r3
    
    spi_init();
   8151a:	4b38      	ldr	r3, [pc, #224]	; (815fc <main+0x104>)
   8151c:	4798      	blx	r3
    
    for(int i = 0; i< 3; i++)
   8151e:	2300      	movs	r3, #0
   81520:	607b      	str	r3, [r7, #4]
   81522:	e028      	b.n	81576 <main+0x7e>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   81524:	2101      	movs	r1, #1
   81526:	2063      	movs	r0, #99	; 0x63
   81528:	4b35      	ldr	r3, [pc, #212]	; (81600 <main+0x108>)
   8152a:	4798      	blx	r3
        ioport_set_pin_level(LED_S1, 1);
   8152c:	2101      	movs	r1, #1
   8152e:	2062      	movs	r0, #98	; 0x62
   81530:	4b33      	ldr	r3, [pc, #204]	; (81600 <main+0x108>)
   81532:	4798      	blx	r3
        ioport_set_pin_level(LED_S2, 1);
   81534:	2101      	movs	r1, #1
   81536:	2061      	movs	r0, #97	; 0x61
   81538:	4b31      	ldr	r3, [pc, #196]	; (81600 <main+0x108>)
   8153a:	4798      	blx	r3
        ioport_set_pin_level(LED_S3, 1);
   8153c:	2101      	movs	r1, #1
   8153e:	2060      	movs	r0, #96	; 0x60
   81540:	4b2f      	ldr	r3, [pc, #188]	; (81600 <main+0x108>)
   81542:	4798      	blx	r3
        mdelay(100);
   81544:	2064      	movs	r0, #100	; 0x64
   81546:	4b2f      	ldr	r3, [pc, #188]	; (81604 <main+0x10c>)
   81548:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   8154a:	2100      	movs	r1, #0
   8154c:	2063      	movs	r0, #99	; 0x63
   8154e:	4b2c      	ldr	r3, [pc, #176]	; (81600 <main+0x108>)
   81550:	4798      	blx	r3
        ioport_set_pin_level(LED_S1, 0);
   81552:	2100      	movs	r1, #0
   81554:	2062      	movs	r0, #98	; 0x62
   81556:	4b2a      	ldr	r3, [pc, #168]	; (81600 <main+0x108>)
   81558:	4798      	blx	r3
        ioport_set_pin_level(LED_S2, 0);
   8155a:	2100      	movs	r1, #0
   8155c:	2061      	movs	r0, #97	; 0x61
   8155e:	4b28      	ldr	r3, [pc, #160]	; (81600 <main+0x108>)
   81560:	4798      	blx	r3
        ioport_set_pin_level(LED_S3, 0);
   81562:	2100      	movs	r1, #0
   81564:	2060      	movs	r0, #96	; 0x60
   81566:	4b26      	ldr	r3, [pc, #152]	; (81600 <main+0x108>)
   81568:	4798      	blx	r3
        mdelay(100);
   8156a:	2064      	movs	r0, #100	; 0x64
   8156c:	4b25      	ldr	r3, [pc, #148]	; (81604 <main+0x10c>)
   8156e:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   81570:	687b      	ldr	r3, [r7, #4]
   81572:	3301      	adds	r3, #1
   81574:	607b      	str	r3, [r7, #4]
   81576:	687b      	ldr	r3, [r7, #4]
   81578:	2b02      	cmp	r3, #2
   8157a:	ddd3      	ble.n	81524 <main+0x2c>
    }
    
    while (1)
    {
        if (mts.ibit.heartbeat)
   8157c:	4b22      	ldr	r3, [pc, #136]	; (81608 <main+0x110>)
   8157e:	781b      	ldrb	r3, [r3, #0]
   81580:	f003 0301 	and.w	r3, r3, #1
   81584:	b2db      	uxtb	r3, r3
   81586:	2b00      	cmp	r3, #0
   81588:	d00d      	beq.n	815a6 <main+0xae>
        {
            ioport_set_pin_level(LED_ONBOARD, 1);
   8158a:	2101      	movs	r1, #1
   8158c:	2063      	movs	r0, #99	; 0x63
   8158e:	4b1c      	ldr	r3, [pc, #112]	; (81600 <main+0x108>)
   81590:	4798      	blx	r3
            ioport_set_pin_level(LED_S1, 1);
   81592:	2101      	movs	r1, #1
   81594:	2062      	movs	r0, #98	; 0x62
   81596:	4b1a      	ldr	r3, [pc, #104]	; (81600 <main+0x108>)
   81598:	4798      	blx	r3
            stm.ibit.heartbeat = 1;
   8159a:	4a1c      	ldr	r2, [pc, #112]	; (8160c <main+0x114>)
   8159c:	7813      	ldrb	r3, [r2, #0]
   8159e:	f043 0301 	orr.w	r3, r3, #1
   815a2:	7013      	strb	r3, [r2, #0]
   815a4:	e00c      	b.n	815c0 <main+0xc8>
        }
        else
        {
            ioport_set_pin_level(LED_ONBOARD, 0);
   815a6:	2100      	movs	r1, #0
   815a8:	2063      	movs	r0, #99	; 0x63
   815aa:	4b15      	ldr	r3, [pc, #84]	; (81600 <main+0x108>)
   815ac:	4798      	blx	r3
            ioport_set_pin_level(LED_S1, 0);
   815ae:	2100      	movs	r1, #0
   815b0:	2062      	movs	r0, #98	; 0x62
   815b2:	4b13      	ldr	r3, [pc, #76]	; (81600 <main+0x108>)
   815b4:	4798      	blx	r3
            stm.ibit.heartbeat = 0;
   815b6:	4a15      	ldr	r2, [pc, #84]	; (8160c <main+0x114>)
   815b8:	7813      	ldrb	r3, [r2, #0]
   815ba:	f36f 0300 	bfc	r3, #0, #1
   815be:	7013      	strb	r3, [r2, #0]
        }
        
        if (mts.ibit.button)
   815c0:	4b11      	ldr	r3, [pc, #68]	; (81608 <main+0x110>)
   815c2:	781b      	ldrb	r3, [r3, #0]
   815c4:	f003 0302 	and.w	r3, r3, #2
   815c8:	b2db      	uxtb	r3, r3
   815ca:	2b00      	cmp	r3, #0
   815cc:	d004      	beq.n	815d8 <main+0xe0>
        {
            ioport_set_pin_level(LED_S2, 1);
   815ce:	2101      	movs	r1, #1
   815d0:	2061      	movs	r0, #97	; 0x61
   815d2:	4b0b      	ldr	r3, [pc, #44]	; (81600 <main+0x108>)
   815d4:	4798      	blx	r3
   815d6:	e003      	b.n	815e0 <main+0xe8>
        }
        else
        {
            ioport_set_pin_level(LED_S2, 0);
   815d8:	2100      	movs	r1, #0
   815da:	2061      	movs	r0, #97	; 0x61
   815dc:	4b08      	ldr	r3, [pc, #32]	; (81600 <main+0x108>)
   815de:	4798      	blx	r3
        }
        
        PrepareValuesToSend();
   815e0:	4b0b      	ldr	r3, [pc, #44]	; (81610 <main+0x118>)
   815e2:	4798      	blx	r3
        if (mts.ibit.heartbeat)
   815e4:	e7ca      	b.n	8157c <main+0x84>
   815e6:	bf00      	nop
   815e8:	000807c5 	.word	0x000807c5
   815ec:	00080d39 	.word	0x00080d39
   815f0:	0008145d 	.word	0x0008145d
   815f4:	10624dd3 	.word	0x10624dd3
   815f8:	00081385 	.word	0x00081385
   815fc:	000810c1 	.word	0x000810c1
   81600:	00081471 	.word	0x00081471
   81604:	00081615 	.word	0x00081615
   81608:	200705e8 	.word	0x200705e8
   8160c:	200705ec 	.word	0x200705ec
   81610:	000812f9 	.word	0x000812f9

00081614 <mdelay>:
    }
}

void mdelay(uint32_t ul_dly_ticks)
{
   81614:	b480      	push	{r7}
   81616:	b085      	sub	sp, #20
   81618:	af00      	add	r7, sp, #0
   8161a:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   8161c:	4b07      	ldr	r3, [pc, #28]	; (8163c <mdelay+0x28>)
   8161e:	681b      	ldr	r3, [r3, #0]
   81620:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   81622:	bf00      	nop
   81624:	4b05      	ldr	r3, [pc, #20]	; (8163c <mdelay+0x28>)
   81626:	681a      	ldr	r2, [r3, #0]
   81628:	68fb      	ldr	r3, [r7, #12]
   8162a:	1ad2      	subs	r2, r2, r3
   8162c:	687b      	ldr	r3, [r7, #4]
   8162e:	429a      	cmp	r2, r3
   81630:	d3f8      	bcc.n	81624 <mdelay+0x10>
   81632:	bf00      	nop
   81634:	3714      	adds	r7, #20
   81636:	46bd      	mov	sp, r7
   81638:	bc80      	pop	{r7}
   8163a:	4770      	bx	lr
   8163c:	200705e0 	.word	0x200705e0

00081640 <__libc_init_array>:
   81640:	b570      	push	{r4, r5, r6, lr}
   81642:	4e0f      	ldr	r6, [pc, #60]	; (81680 <__libc_init_array+0x40>)
   81644:	4d0f      	ldr	r5, [pc, #60]	; (81684 <__libc_init_array+0x44>)
   81646:	1b76      	subs	r6, r6, r5
   81648:	10b6      	asrs	r6, r6, #2
   8164a:	bf18      	it	ne
   8164c:	2400      	movne	r4, #0
   8164e:	d005      	beq.n	8165c <__libc_init_array+0x1c>
   81650:	3401      	adds	r4, #1
   81652:	f855 3b04 	ldr.w	r3, [r5], #4
   81656:	4798      	blx	r3
   81658:	42a6      	cmp	r6, r4
   8165a:	d1f9      	bne.n	81650 <__libc_init_array+0x10>
   8165c:	4e0a      	ldr	r6, [pc, #40]	; (81688 <__libc_init_array+0x48>)
   8165e:	4d0b      	ldr	r5, [pc, #44]	; (8168c <__libc_init_array+0x4c>)
   81660:	f000 f8a8 	bl	817b4 <_init>
   81664:	1b76      	subs	r6, r6, r5
   81666:	10b6      	asrs	r6, r6, #2
   81668:	bf18      	it	ne
   8166a:	2400      	movne	r4, #0
   8166c:	d006      	beq.n	8167c <__libc_init_array+0x3c>
   8166e:	3401      	adds	r4, #1
   81670:	f855 3b04 	ldr.w	r3, [r5], #4
   81674:	4798      	blx	r3
   81676:	42a6      	cmp	r6, r4
   81678:	d1f9      	bne.n	8166e <__libc_init_array+0x2e>
   8167a:	bd70      	pop	{r4, r5, r6, pc}
   8167c:	bd70      	pop	{r4, r5, r6, pc}
   8167e:	bf00      	nop
   81680:	000817c0 	.word	0x000817c0
   81684:	000817c0 	.word	0x000817c0
   81688:	000817c8 	.word	0x000817c8
   8168c:	000817c0 	.word	0x000817c0

00081690 <register_fini>:
   81690:	4b02      	ldr	r3, [pc, #8]	; (8169c <register_fini+0xc>)
   81692:	b113      	cbz	r3, 8169a <register_fini+0xa>
   81694:	4802      	ldr	r0, [pc, #8]	; (816a0 <register_fini+0x10>)
   81696:	f000 b805 	b.w	816a4 <atexit>
   8169a:	4770      	bx	lr
   8169c:	00000000 	.word	0x00000000
   816a0:	000816b1 	.word	0x000816b1

000816a4 <atexit>:
   816a4:	2300      	movs	r3, #0
   816a6:	4601      	mov	r1, r0
   816a8:	461a      	mov	r2, r3
   816aa:	4618      	mov	r0, r3
   816ac:	f000 b81e 	b.w	816ec <__register_exitproc>

000816b0 <__libc_fini_array>:
   816b0:	b538      	push	{r3, r4, r5, lr}
   816b2:	4c0a      	ldr	r4, [pc, #40]	; (816dc <__libc_fini_array+0x2c>)
   816b4:	4d0a      	ldr	r5, [pc, #40]	; (816e0 <__libc_fini_array+0x30>)
   816b6:	1b64      	subs	r4, r4, r5
   816b8:	10a4      	asrs	r4, r4, #2
   816ba:	d00a      	beq.n	816d2 <__libc_fini_array+0x22>
   816bc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   816c0:	3b01      	subs	r3, #1
   816c2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   816c6:	3c01      	subs	r4, #1
   816c8:	f855 3904 	ldr.w	r3, [r5], #-4
   816cc:	4798      	blx	r3
   816ce:	2c00      	cmp	r4, #0
   816d0:	d1f9      	bne.n	816c6 <__libc_fini_array+0x16>
   816d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   816d6:	f000 b877 	b.w	817c8 <_fini>
   816da:	bf00      	nop
   816dc:	000817d8 	.word	0x000817d8
   816e0:	000817d4 	.word	0x000817d4

000816e4 <__retarget_lock_acquire_recursive>:
   816e4:	4770      	bx	lr
   816e6:	bf00      	nop

000816e8 <__retarget_lock_release_recursive>:
   816e8:	4770      	bx	lr
   816ea:	bf00      	nop

000816ec <__register_exitproc>:
   816ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   816f0:	4d2c      	ldr	r5, [pc, #176]	; (817a4 <__register_exitproc+0xb8>)
   816f2:	4606      	mov	r6, r0
   816f4:	6828      	ldr	r0, [r5, #0]
   816f6:	4698      	mov	r8, r3
   816f8:	460f      	mov	r7, r1
   816fa:	4691      	mov	r9, r2
   816fc:	f7ff fff2 	bl	816e4 <__retarget_lock_acquire_recursive>
   81700:	4b29      	ldr	r3, [pc, #164]	; (817a8 <__register_exitproc+0xbc>)
   81702:	681c      	ldr	r4, [r3, #0]
   81704:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81708:	2b00      	cmp	r3, #0
   8170a:	d03e      	beq.n	8178a <__register_exitproc+0x9e>
   8170c:	685a      	ldr	r2, [r3, #4]
   8170e:	2a1f      	cmp	r2, #31
   81710:	dc1c      	bgt.n	8174c <__register_exitproc+0x60>
   81712:	f102 0e01 	add.w	lr, r2, #1
   81716:	b176      	cbz	r6, 81736 <__register_exitproc+0x4a>
   81718:	2101      	movs	r1, #1
   8171a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8171e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81722:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81726:	4091      	lsls	r1, r2
   81728:	4308      	orrs	r0, r1
   8172a:	2e02      	cmp	r6, #2
   8172c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81730:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81734:	d023      	beq.n	8177e <__register_exitproc+0x92>
   81736:	3202      	adds	r2, #2
   81738:	f8c3 e004 	str.w	lr, [r3, #4]
   8173c:	6828      	ldr	r0, [r5, #0]
   8173e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81742:	f7ff ffd1 	bl	816e8 <__retarget_lock_release_recursive>
   81746:	2000      	movs	r0, #0
   81748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8174c:	4b17      	ldr	r3, [pc, #92]	; (817ac <__register_exitproc+0xc0>)
   8174e:	b30b      	cbz	r3, 81794 <__register_exitproc+0xa8>
   81750:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81754:	f3af 8000 	nop.w
   81758:	4603      	mov	r3, r0
   8175a:	b1d8      	cbz	r0, 81794 <__register_exitproc+0xa8>
   8175c:	2000      	movs	r0, #0
   8175e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81762:	f04f 0e01 	mov.w	lr, #1
   81766:	6058      	str	r0, [r3, #4]
   81768:	6019      	str	r1, [r3, #0]
   8176a:	4602      	mov	r2, r0
   8176c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81770:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81774:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81778:	2e00      	cmp	r6, #0
   8177a:	d0dc      	beq.n	81736 <__register_exitproc+0x4a>
   8177c:	e7cc      	b.n	81718 <__register_exitproc+0x2c>
   8177e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81782:	4301      	orrs	r1, r0
   81784:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81788:	e7d5      	b.n	81736 <__register_exitproc+0x4a>
   8178a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8178e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81792:	e7bb      	b.n	8170c <__register_exitproc+0x20>
   81794:	6828      	ldr	r0, [r5, #0]
   81796:	f7ff ffa7 	bl	816e8 <__retarget_lock_release_recursive>
   8179a:	f04f 30ff 	mov.w	r0, #4294967295
   8179e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   817a2:	bf00      	nop
   817a4:	200705b8 	.word	0x200705b8
   817a8:	000817b0 	.word	0x000817b0
   817ac:	00000000 	.word	0x00000000

000817b0 <_global_impure_ptr>:
   817b0:	20070190                                ... 

000817b4 <_init>:
   817b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   817b6:	bf00      	nop
   817b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   817ba:	bc08      	pop	{r3}
   817bc:	469e      	mov	lr, r3
   817be:	4770      	bx	lr

000817c0 <__init_array_start>:
   817c0:	00081691 	.word	0x00081691

000817c4 <__frame_dummy_init_array_entry>:
   817c4:	00080119                                ....

000817c8 <_fini>:
   817c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   817ca:	bf00      	nop
   817cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   817ce:	bc08      	pop	{r3}
   817d0:	469e      	mov	lr, r3
   817d2:	4770      	bx	lr

000817d4 <__fini_array_start>:
   817d4:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007018c 	.word	0x2007018c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <SystemCoreClock>:
2007018c:	003d0900                                ..=.

20070190 <impure_data>:
20070190:	00000000 2007047c 200704e4 2007054c     ....|.. ... L.. 
	...
20070238:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070248:	0005deec 0000000b 00000000 00000000     ................
	...

200705b8 <__atexit_recursive_mutex>:
200705b8:	200705f0                                ... 
