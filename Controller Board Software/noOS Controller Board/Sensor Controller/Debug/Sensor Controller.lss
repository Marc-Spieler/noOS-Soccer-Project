
Sensor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b90  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20070000  00081b90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000005c  200705bc  0008214c  000205bc  2**2
                  ALLOC
  3 .stack        00002000  20070618  000821a8  000205bc  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000205e5  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000eb16  00000000  00000000  0002063e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f7f  00000000  00000000  0002f154  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004398  00000000  00000000  000310d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000798  00000000  00000000  0003546b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000738  00000000  00000000  00035c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00004a1d  00000000  00000000  0003633b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a7b8  00000000  00000000  0003ad58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006087b  00000000  00000000  00045510  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000020e0  00000000  00000000  000a5d8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	18 26 07 20 d1 11 08 00 c9 11 08 00 c9 11 08 00     .&. ............
   80010:	c9 11 08 00 c9 11 08 00 c9 11 08 00 00 00 00 00     ................
	...
   8002c:	c9 11 08 00 c9 11 08 00 00 00 00 00 c9 11 08 00     ................
   8003c:	b5 02 08 00 c9 11 08 00 c9 11 08 00 c9 11 08 00     ................
   8004c:	c9 11 08 00 c9 11 08 00 c9 11 08 00 c9 11 08 00     ................
   8005c:	c9 11 08 00 c9 11 08 00 c9 11 08 00 00 00 00 00     ................
   8006c:	c9 11 08 00 c9 11 08 00 c9 11 08 00 c9 11 08 00     ................
	...
   80084:	c9 11 08 00 c9 11 08 00 c9 11 08 00 c9 11 08 00     ................
   80094:	c9 11 08 00 c9 11 08 00 c9 11 08 00 c9 11 08 00     ................
   800a4:	00 00 00 00 c9 11 08 00 c9 11 08 00 c9 11 08 00     ................
   800b4:	c9 11 08 00 c9 11 08 00 c9 11 08 00 c9 11 08 00     ................
   800c4:	c9 11 08 00 c9 11 08 00 c9 11 08 00 c9 11 08 00     ................
   800d4:	c9 11 08 00 c9 11 08 00 9d 16 08 00 c9 11 08 00     ................
   800e4:	c9 11 08 00 c9 11 08 00 c9 11 08 00 c9 11 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200705bc 	.word	0x200705bc
   80110:	00000000 	.word	0x00000000
   80114:	00081b90 	.word	0x00081b90

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081b90 	.word	0x00081b90
   80154:	200705c0 	.word	0x200705c0
   80158:	00081b90 	.word	0x00081b90
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80160:	b480      	push	{r7}
   80162:	b087      	sub	sp, #28
   80164:	af00      	add	r7, sp, #0
   80166:	60f8      	str	r0, [r7, #12]
   80168:	60b9      	str	r1, [r7, #8]
   8016a:	607a      	str	r2, [r7, #4]
   8016c:	603b      	str	r3, [r7, #0]
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8016e:	68fb      	ldr	r3, [r7, #12]
   80170:	2201      	movs	r2, #1
   80172:	601a      	str	r2, [r3, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80174:	68fb      	ldr	r3, [r7, #12]
   80176:	2200      	movs	r2, #0
   80178:	605a      	str	r2, [r3, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8017a:	68fb      	ldr	r3, [r7, #12]
   8017c:	f240 2202 	movw	r2, #514	; 0x202
   80180:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80184:	68fb      	ldr	r3, [r7, #12]
   80186:	2200      	movs	r2, #0
   80188:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8018c:	68fb      	ldr	r3, [r7, #12]
   8018e:	2200      	movs	r2, #0
   80190:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80194:	687b      	ldr	r3, [r7, #4]
   80196:	005b      	lsls	r3, r3, #1
   80198:	68ba      	ldr	r2, [r7, #8]
   8019a:	fbb2 f3f3 	udiv	r3, r2, r3
   8019e:	3b01      	subs	r3, #1
   801a0:	617b      	str	r3, [r7, #20]
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   801a2:	68fb      	ldr	r3, [r7, #12]
   801a4:	685a      	ldr	r2, [r3, #4]
   801a6:	697b      	ldr	r3, [r7, #20]
   801a8:	021b      	lsls	r3, r3, #8
   801aa:	b299      	uxth	r1, r3
   801ac:	683b      	ldr	r3, [r7, #0]
   801ae:	430b      	orrs	r3, r1
   801b0:	431a      	orrs	r2, r3
   801b2:	68fb      	ldr	r3, [r7, #12]
   801b4:	605a      	str	r2, [r3, #4]
	return 0;
   801b6:	2300      	movs	r3, #0
}
   801b8:	4618      	mov	r0, r3
   801ba:	371c      	adds	r7, #28
   801bc:	46bd      	mov	sp, r7
   801be:	bc80      	pop	{r7}
   801c0:	4770      	bx	lr

000801c2 <adc_configure_trigger>:
 * ADC_MR_FREERUN_OFF disables freerun mode.
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
   801c2:	b480      	push	{r7}
   801c4:	b083      	sub	sp, #12
   801c6:	af00      	add	r7, sp, #0
   801c8:	6078      	str	r0, [r7, #4]
   801ca:	460b      	mov	r3, r1
   801cc:	70fb      	strb	r3, [r7, #3]
   801ce:	4613      	mov	r3, r2
   801d0:	70bb      	strb	r3, [r7, #2]
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   801d2:	687b      	ldr	r3, [r7, #4]
   801d4:	685a      	ldr	r2, [r3, #4]
   801d6:	78f9      	ldrb	r1, [r7, #3]
   801d8:	78bb      	ldrb	r3, [r7, #2]
   801da:	01db      	lsls	r3, r3, #7
   801dc:	b2db      	uxtb	r3, r3
   801de:	430b      	orrs	r3, r1
   801e0:	431a      	orrs	r2, r3
   801e2:	687b      	ldr	r3, [r7, #4]
   801e4:	605a      	str	r2, [r3, #4]
}
   801e6:	bf00      	nop
   801e8:	370c      	adds	r7, #12
   801ea:	46bd      	mov	sp, r7
   801ec:	bc80      	pop	{r7}
   801ee:	4770      	bx	lr

000801f0 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   801f0:	b480      	push	{r7}
   801f2:	b085      	sub	sp, #20
   801f4:	af00      	add	r7, sp, #0
   801f6:	60f8      	str	r0, [r7, #12]
   801f8:	607a      	str	r2, [r7, #4]
   801fa:	461a      	mov	r2, r3
   801fc:	460b      	mov	r3, r1
   801fe:	72fb      	strb	r3, [r7, #11]
   80200:	4613      	mov	r3, r2
   80202:	72bb      	strb	r3, [r7, #10]
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80204:	68fb      	ldr	r3, [r7, #12]
   80206:	685a      	ldr	r2, [r3, #4]
   80208:	7abb      	ldrb	r3, [r7, #10]
   8020a:	071b      	lsls	r3, r3, #28
   8020c:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80210:	687b      	ldr	r3, [r7, #4]
   80212:	4319      	orrs	r1, r3
   80214:	7afb      	ldrb	r3, [r7, #11]
   80216:	061b      	lsls	r3, r3, #24
   80218:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   8021c:	430b      	orrs	r3, r1
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8021e:	431a      	orrs	r2, r3
   80220:	68fb      	ldr	r3, [r7, #12]
   80222:	605a      	str	r2, [r3, #4]
}
   80224:	bf00      	nop
   80226:	3714      	adds	r7, #20
   80228:	46bd      	mov	sp, r7
   8022a:	bc80      	pop	{r7}
   8022c:	4770      	bx	lr

0008022e <adc_start>:
 *
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
   8022e:	b480      	push	{r7}
   80230:	b083      	sub	sp, #12
   80232:	af00      	add	r7, sp, #0
   80234:	6078      	str	r0, [r7, #4]
	p_adc->ADC_CR = ADC_CR_START;
   80236:	687b      	ldr	r3, [r7, #4]
   80238:	2202      	movs	r2, #2
   8023a:	601a      	str	r2, [r3, #0]
}
   8023c:	bf00      	nop
   8023e:	370c      	adds	r7, #12
   80240:	46bd      	mov	sp, r7
   80242:	bc80      	pop	{r7}
   80244:	4770      	bx	lr

00080246 <adc_enable_channel>:
 *
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
   80246:	b480      	push	{r7}
   80248:	b083      	sub	sp, #12
   8024a:	af00      	add	r7, sp, #0
   8024c:	6078      	str	r0, [r7, #4]
   8024e:	460b      	mov	r3, r1
   80250:	70fb      	strb	r3, [r7, #3]
	p_adc->ADC_CHER = 1 << adc_ch;
   80252:	78fb      	ldrb	r3, [r7, #3]
   80254:	2201      	movs	r2, #1
   80256:	fa02 f303 	lsl.w	r3, r2, r3
   8025a:	461a      	mov	r2, r3
   8025c:	687b      	ldr	r3, [r7, #4]
   8025e:	611a      	str	r2, [r3, #16]
}
   80260:	bf00      	nop
   80262:	370c      	adds	r7, #12
   80264:	46bd      	mov	sp, r7
   80266:	bc80      	pop	{r7}
   80268:	4770      	bx	lr

0008026a <adc_get_channel_value>:
 * \param adc_ch ADC channel number.
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
   8026a:	b480      	push	{r7}
   8026c:	b085      	sub	sp, #20
   8026e:	af00      	add	r7, sp, #0
   80270:	6078      	str	r0, [r7, #4]
   80272:	460b      	mov	r3, r1
   80274:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data = 0;
   80276:	2300      	movs	r3, #0
   80278:	60fb      	str	r3, [r7, #12]

	if (15 >= adc_ch) {
   8027a:	78fb      	ldrb	r3, [r7, #3]
   8027c:	2b0f      	cmp	r3, #15
   8027e:	d807      	bhi.n	80290 <adc_get_channel_value+0x26>
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   80280:	687b      	ldr	r3, [r7, #4]
   80282:	f103 0250 	add.w	r2, r3, #80	; 0x50
   80286:	78fb      	ldrb	r3, [r7, #3]
   80288:	009b      	lsls	r3, r3, #2
   8028a:	4413      	add	r3, r2
   8028c:	681b      	ldr	r3, [r3, #0]
   8028e:	60fb      	str	r3, [r7, #12]
	}

	return ul_data;
   80290:	68fb      	ldr	r3, [r7, #12]
}
   80292:	4618      	mov	r0, r3
   80294:	3714      	adds	r7, #20
   80296:	46bd      	mov	sp, r7
   80298:	bc80      	pop	{r7}
   8029a:	4770      	bx	lr

0008029c <adc_get_status>:
 * \param p_adc Pointer to an ADC instance.
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
   8029c:	b480      	push	{r7}
   8029e:	b083      	sub	sp, #12
   802a0:	af00      	add	r7, sp, #0
   802a2:	6078      	str	r0, [r7, #4]
	return p_adc->ADC_ISR;
   802a4:	687b      	ldr	r3, [r7, #4]
   802a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   802a8:	4618      	mov	r0, r3
   802aa:	370c      	adds	r7, #12
   802ac:	46bd      	mov	sp, r7
   802ae:	bc80      	pop	{r7}
   802b0:	4770      	bx	lr
	...

000802b4 <SysTick_Handler>:

static uint32_t g_ul_ms_ticks = 0;
uint32_t ul_ticks_bat = 0;

void SysTick_Handler(void)
{
   802b4:	b480      	push	{r7}
   802b6:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   802b8:	4b04      	ldr	r3, [pc, #16]	; (802cc <SysTick_Handler+0x18>)
   802ba:	681b      	ldr	r3, [r3, #0]
   802bc:	3301      	adds	r3, #1
   802be:	4a03      	ldr	r2, [pc, #12]	; (802cc <SysTick_Handler+0x18>)
   802c0:	6013      	str	r3, [r2, #0]
}
   802c2:	bf00      	nop
   802c4:	46bd      	mov	sp, r7
   802c6:	bc80      	pop	{r7}
   802c8:	4770      	bx	lr
   802ca:	bf00      	nop
   802cc:	200705d8 	.word	0x200705d8

000802d0 <getTicks>:

uint32_t getTicks(void)
{
   802d0:	b480      	push	{r7}
   802d2:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   802d4:	4b02      	ldr	r3, [pc, #8]	; (802e0 <getTicks+0x10>)
   802d6:	681b      	ldr	r3, [r3, #0]
}
   802d8:	4618      	mov	r0, r3
   802da:	46bd      	mov	sp, r7
   802dc:	bc80      	pop	{r7}
   802de:	4770      	bx	lr
   802e0:	200705d8 	.word	0x200705d8

000802e4 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   802e4:	b480      	push	{r7}
   802e6:	b085      	sub	sp, #20
   802e8:	af00      	add	r7, sp, #0
   802ea:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   802ec:	4b07      	ldr	r3, [pc, #28]	; (8030c <mdelay+0x28>)
   802ee:	681b      	ldr	r3, [r3, #0]
   802f0:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   802f2:	bf00      	nop
   802f4:	4b05      	ldr	r3, [pc, #20]	; (8030c <mdelay+0x28>)
   802f6:	681a      	ldr	r2, [r3, #0]
   802f8:	68fb      	ldr	r3, [r7, #12]
   802fa:	1ad2      	subs	r2, r2, r3
   802fc:	687b      	ldr	r3, [r7, #4]
   802fe:	429a      	cmp	r2, r3
   80300:	d3f8      	bcc.n	802f4 <mdelay+0x10>
}
   80302:	bf00      	nop
   80304:	3714      	adds	r7, #20
   80306:	46bd      	mov	sp, r7
   80308:	bc80      	pop	{r7}
   8030a:	4770      	bx	lr
   8030c:	200705d8 	.word	0x200705d8

00080310 <update_battery>:

void update_battery(void)
{
   80310:	b580      	push	{r7, lr}
   80312:	af00      	add	r7, sp, #0
    if ((getTicks() - ul_ticks_bat) > 500)
   80314:	4b14      	ldr	r3, [pc, #80]	; (80368 <update_battery+0x58>)
   80316:	4798      	blx	r3
   80318:	4602      	mov	r2, r0
   8031a:	4b14      	ldr	r3, [pc, #80]	; (8036c <update_battery+0x5c>)
   8031c:	681b      	ldr	r3, [r3, #0]
   8031e:	1ad3      	subs	r3, r2, r3
   80320:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   80324:	d91d      	bls.n	80362 <update_battery+0x52>
    {
        ul_ticks_bat = getTicks();
   80326:	4b10      	ldr	r3, [pc, #64]	; (80368 <update_battery+0x58>)
   80328:	4798      	blx	r3
   8032a:	4602      	mov	r2, r0
   8032c:	4b0f      	ldr	r3, [pc, #60]	; (8036c <update_battery+0x5c>)
   8032e:	601a      	str	r2, [r3, #0]
        
        while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY);
   80330:	bf00      	nop
   80332:	480f      	ldr	r0, [pc, #60]	; (80370 <update_battery+0x60>)
   80334:	4b0f      	ldr	r3, [pc, #60]	; (80374 <update_battery+0x64>)
   80336:	4798      	blx	r3
   80338:	4603      	mov	r3, r0
   8033a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8033e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   80342:	d1f6      	bne.n	80332 <update_battery+0x22>
        
        stm.bat_voltage = (uint8_t)(adc_get_channel_value(ADC, BATTERY_VOLTAGE) / 18);
   80344:	2101      	movs	r1, #1
   80346:	480a      	ldr	r0, [pc, #40]	; (80370 <update_battery+0x60>)
   80348:	4b0b      	ldr	r3, [pc, #44]	; (80378 <update_battery+0x68>)
   8034a:	4798      	blx	r3
   8034c:	4602      	mov	r2, r0
   8034e:	4b0b      	ldr	r3, [pc, #44]	; (8037c <update_battery+0x6c>)
   80350:	fba3 2302 	umull	r2, r3, r3, r2
   80354:	089b      	lsrs	r3, r3, #2
   80356:	b2da      	uxtb	r2, r3
   80358:	4b09      	ldr	r3, [pc, #36]	; (80380 <update_battery+0x70>)
   8035a:	705a      	strb	r2, [r3, #1]
        adc_start(ADC);
   8035c:	4804      	ldr	r0, [pc, #16]	; (80370 <update_battery+0x60>)
   8035e:	4b09      	ldr	r3, [pc, #36]	; (80384 <update_battery+0x74>)
   80360:	4798      	blx	r3
    }
}
   80362:	bf00      	nop
   80364:	bd80      	pop	{r7, pc}
   80366:	bf00      	nop
   80368:	000802d1 	.word	0x000802d1
   8036c:	200705dc 	.word	0x200705dc
   80370:	400c0000 	.word	0x400c0000
   80374:	0008029d 	.word	0x0008029d
   80378:	0008026b 	.word	0x0008026b
   8037c:	38e38e39 	.word	0x38e38e39
   80380:	200705f0 	.word	0x200705f0
   80384:	0008022f 	.word	0x0008022f

00080388 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   80388:	b480      	push	{r7}
   8038a:	b083      	sub	sp, #12
   8038c:	af00      	add	r7, sp, #0
   8038e:	6078      	str	r0, [r7, #4]
   80390:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   80392:	687b      	ldr	r3, [r7, #4]
   80394:	685b      	ldr	r3, [r3, #4]
   80396:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   8039a:	687b      	ldr	r3, [r7, #4]
   8039c:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   8039e:	687b      	ldr	r3, [r7, #4]
   803a0:	685a      	ldr	r2, [r3, #4]
   803a2:	683b      	ldr	r3, [r7, #0]
   803a4:	041b      	lsls	r3, r3, #16
   803a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   803aa:	431a      	orrs	r2, r3
   803ac:	687b      	ldr	r3, [r7, #4]
   803ae:	605a      	str	r2, [r3, #4]
}
   803b0:	bf00      	nop
   803b2:	370c      	adds	r7, #12
   803b4:	46bd      	mov	sp, r7
   803b6:	bc80      	pop	{r7}
   803b8:	4770      	bx	lr

000803ba <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   803ba:	b480      	push	{r7}
   803bc:	b085      	sub	sp, #20
   803be:	af00      	add	r7, sp, #0
   803c0:	60f8      	str	r0, [r7, #12]
   803c2:	60b9      	str	r1, [r7, #8]
   803c4:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   803c6:	687b      	ldr	r3, [r7, #4]
   803c8:	2b00      	cmp	r3, #0
   803ca:	d00c      	beq.n	803e6 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   803cc:	68fb      	ldr	r3, [r7, #12]
   803ce:	68ba      	ldr	r2, [r7, #8]
   803d0:	320c      	adds	r2, #12
   803d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803d6:	f043 0101 	orr.w	r1, r3, #1
   803da:	68fb      	ldr	r3, [r7, #12]
   803dc:	68ba      	ldr	r2, [r7, #8]
   803de:	320c      	adds	r2, #12
   803e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
   803e4:	e00b      	b.n	803fe <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   803e6:	68fb      	ldr	r3, [r7, #12]
   803e8:	68ba      	ldr	r2, [r7, #8]
   803ea:	320c      	adds	r2, #12
   803ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803f0:	f023 0101 	bic.w	r1, r3, #1
   803f4:	68fb      	ldr	r3, [r7, #12]
   803f6:	68ba      	ldr	r2, [r7, #8]
   803f8:	320c      	adds	r2, #12
   803fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   803fe:	bf00      	nop
   80400:	3714      	adds	r7, #20
   80402:	46bd      	mov	sp, r7
   80404:	bc80      	pop	{r7}
   80406:	4770      	bx	lr

00080408 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   80408:	b480      	push	{r7}
   8040a:	b085      	sub	sp, #20
   8040c:	af00      	add	r7, sp, #0
   8040e:	60f8      	str	r0, [r7, #12]
   80410:	60b9      	str	r1, [r7, #8]
   80412:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   80414:	687b      	ldr	r3, [r7, #4]
   80416:	2b00      	cmp	r3, #0
   80418:	d00c      	beq.n	80434 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   8041a:	68fb      	ldr	r3, [r7, #12]
   8041c:	68ba      	ldr	r2, [r7, #8]
   8041e:	320c      	adds	r2, #12
   80420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80424:	f043 0102 	orr.w	r1, r3, #2
   80428:	68fb      	ldr	r3, [r7, #12]
   8042a:	68ba      	ldr	r2, [r7, #8]
   8042c:	320c      	adds	r2, #12
   8042e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
   80432:	e00b      	b.n	8044c <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   80434:	68fb      	ldr	r3, [r7, #12]
   80436:	68ba      	ldr	r2, [r7, #8]
   80438:	320c      	adds	r2, #12
   8043a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8043e:	f023 0102 	bic.w	r1, r3, #2
   80442:	68fb      	ldr	r3, [r7, #12]
   80444:	68ba      	ldr	r2, [r7, #8]
   80446:	320c      	adds	r2, #12
   80448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8044c:	bf00      	nop
   8044e:	3714      	adds	r7, #20
   80450:	46bd      	mov	sp, r7
   80452:	bc80      	pop	{r7}
   80454:	4770      	bx	lr

00080456 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80456:	b480      	push	{r7}
   80458:	b085      	sub	sp, #20
   8045a:	af00      	add	r7, sp, #0
   8045c:	60f8      	str	r0, [r7, #12]
   8045e:	60b9      	str	r1, [r7, #8]
   80460:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   80462:	68fb      	ldr	r3, [r7, #12]
   80464:	68ba      	ldr	r2, [r7, #8]
   80466:	320c      	adds	r2, #12
   80468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8046c:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   80470:	68fb      	ldr	r3, [r7, #12]
   80472:	68ba      	ldr	r2, [r7, #8]
   80474:	320c      	adds	r2, #12
   80476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   8047a:	68fb      	ldr	r3, [r7, #12]
   8047c:	68ba      	ldr	r2, [r7, #8]
   8047e:	320c      	adds	r2, #12
   80480:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   80484:	687b      	ldr	r3, [r7, #4]
   80486:	ea42 0103 	orr.w	r1, r2, r3
   8048a:	68fb      	ldr	r3, [r7, #12]
   8048c:	68ba      	ldr	r2, [r7, #8]
   8048e:	320c      	adds	r2, #12
   80490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80494:	bf00      	nop
   80496:	3714      	adds	r7, #20
   80498:	46bd      	mov	sp, r7
   8049a:	bc80      	pop	{r7}
   8049c:	4770      	bx	lr
	...

000804a0 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   804a0:	b580      	push	{r7, lr}
   804a2:	b082      	sub	sp, #8
   804a4:	af00      	add	r7, sp, #0
   804a6:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   804a8:	6878      	ldr	r0, [r7, #4]
   804aa:	4b03      	ldr	r3, [pc, #12]	; (804b8 <dmac_init+0x18>)
   804ac:	4798      	blx	r3
}
   804ae:	bf00      	nop
   804b0:	3708      	adds	r7, #8
   804b2:	46bd      	mov	sp, r7
   804b4:	bd80      	pop	{r7, pc}
   804b6:	bf00      	nop
   804b8:	000804fb 	.word	0x000804fb

000804bc <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   804bc:	b480      	push	{r7}
   804be:	b083      	sub	sp, #12
   804c0:	af00      	add	r7, sp, #0
   804c2:	6078      	str	r0, [r7, #4]
   804c4:	460b      	mov	r3, r1
   804c6:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   804c8:	687b      	ldr	r3, [r7, #4]
   804ca:	681b      	ldr	r3, [r3, #0]
   804cc:	f023 0210 	bic.w	r2, r3, #16
   804d0:	78fb      	ldrb	r3, [r7, #3]
   804d2:	431a      	orrs	r2, r3
   804d4:	687b      	ldr	r3, [r7, #4]
   804d6:	601a      	str	r2, [r3, #0]
}
   804d8:	bf00      	nop
   804da:	370c      	adds	r7, #12
   804dc:	46bd      	mov	sp, r7
   804de:	bc80      	pop	{r7}
   804e0:	4770      	bx	lr

000804e2 <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   804e2:	b480      	push	{r7}
   804e4:	b083      	sub	sp, #12
   804e6:	af00      	add	r7, sp, #0
   804e8:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   804ea:	687b      	ldr	r3, [r7, #4]
   804ec:	2201      	movs	r2, #1
   804ee:	605a      	str	r2, [r3, #4]
}
   804f0:	bf00      	nop
   804f2:	370c      	adds	r7, #12
   804f4:	46bd      	mov	sp, r7
   804f6:	bc80      	pop	{r7}
   804f8:	4770      	bx	lr

000804fa <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   804fa:	b480      	push	{r7}
   804fc:	b083      	sub	sp, #12
   804fe:	af00      	add	r7, sp, #0
   80500:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   80502:	687b      	ldr	r3, [r7, #4]
   80504:	685b      	ldr	r3, [r3, #4]
   80506:	f023 0201 	bic.w	r2, r3, #1
   8050a:	687b      	ldr	r3, [r7, #4]
   8050c:	605a      	str	r2, [r3, #4]
}
   8050e:	bf00      	nop
   80510:	370c      	adds	r7, #12
   80512:	46bd      	mov	sp, r7
   80514:	bc80      	pop	{r7}
   80516:	4770      	bx	lr

00080518 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   80518:	b480      	push	{r7}
   8051a:	b083      	sub	sp, #12
   8051c:	af00      	add	r7, sp, #0
   8051e:	6078      	str	r0, [r7, #4]
   80520:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   80522:	687b      	ldr	r3, [r7, #4]
   80524:	683a      	ldr	r2, [r7, #0]
   80526:	619a      	str	r2, [r3, #24]
}
   80528:	bf00      	nop
   8052a:	370c      	adds	r7, #12
   8052c:	46bd      	mov	sp, r7
   8052e:	bc80      	pop	{r7}
   80530:	4770      	bx	lr

00080532 <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   80532:	b480      	push	{r7}
   80534:	b083      	sub	sp, #12
   80536:	af00      	add	r7, sp, #0
   80538:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   8053a:	687b      	ldr	r3, [r7, #4]
   8053c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   8053e:	4618      	mov	r0, r3
   80540:	370c      	adds	r7, #12
   80542:	46bd      	mov	sp, r7
   80544:	bc80      	pop	{r7}
   80546:	4770      	bx	lr

00080548 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   80548:	b480      	push	{r7}
   8054a:	b083      	sub	sp, #12
   8054c:	af00      	add	r7, sp, #0
   8054e:	6078      	str	r0, [r7, #4]
   80550:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   80552:	2201      	movs	r2, #1
   80554:	683b      	ldr	r3, [r7, #0]
   80556:	409a      	lsls	r2, r3
   80558:	687b      	ldr	r3, [r7, #4]
   8055a:	629a      	str	r2, [r3, #40]	; 0x28
}
   8055c:	bf00      	nop
   8055e:	370c      	adds	r7, #12
   80560:	46bd      	mov	sp, r7
   80562:	bc80      	pop	{r7}
   80564:	4770      	bx	lr

00080566 <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   80566:	b480      	push	{r7}
   80568:	b083      	sub	sp, #12
   8056a:	af00      	add	r7, sp, #0
   8056c:	6078      	str	r0, [r7, #4]
   8056e:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   80570:	2201      	movs	r2, #1
   80572:	683b      	ldr	r3, [r7, #0]
   80574:	409a      	lsls	r2, r3
   80576:	687b      	ldr	r3, [r7, #4]
   80578:	62da      	str	r2, [r3, #44]	; 0x2c
}
   8057a:	bf00      	nop
   8057c:	370c      	adds	r7, #12
   8057e:	46bd      	mov	sp, r7
   80580:	bc80      	pop	{r7}
   80582:	4770      	bx	lr

00080584 <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   80584:	b480      	push	{r7}
   80586:	b085      	sub	sp, #20
   80588:	af00      	add	r7, sp, #0
   8058a:	60f8      	str	r0, [r7, #12]
   8058c:	60b9      	str	r1, [r7, #8]
   8058e:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   80590:	68f9      	ldr	r1, [r7, #12]
   80592:	68ba      	ldr	r2, [r7, #8]
   80594:	4613      	mov	r3, r2
   80596:	009b      	lsls	r3, r3, #2
   80598:	4413      	add	r3, r2
   8059a:	00db      	lsls	r3, r3, #3
   8059c:	440b      	add	r3, r1
   8059e:	333c      	adds	r3, #60	; 0x3c
   805a0:	687a      	ldr	r2, [r7, #4]
   805a2:	601a      	str	r2, [r3, #0]
}
   805a4:	bf00      	nop
   805a6:	3714      	adds	r7, #20
   805a8:	46bd      	mov	sp, r7
   805aa:	bc80      	pop	{r7}
   805ac:	4770      	bx	lr

000805ae <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   805ae:	b480      	push	{r7}
   805b0:	b085      	sub	sp, #20
   805b2:	af00      	add	r7, sp, #0
   805b4:	60f8      	str	r0, [r7, #12]
   805b6:	60b9      	str	r1, [r7, #8]
   805b8:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   805ba:	68f9      	ldr	r1, [r7, #12]
   805bc:	68ba      	ldr	r2, [r7, #8]
   805be:	4613      	mov	r3, r2
   805c0:	009b      	lsls	r3, r3, #2
   805c2:	4413      	add	r3, r2
   805c4:	00db      	lsls	r3, r3, #3
   805c6:	440b      	add	r3, r1
   805c8:	3340      	adds	r3, #64	; 0x40
   805ca:	687a      	ldr	r2, [r7, #4]
   805cc:	601a      	str	r2, [r3, #0]
}
   805ce:	bf00      	nop
   805d0:	3714      	adds	r7, #20
   805d2:	46bd      	mov	sp, r7
   805d4:	bc80      	pop	{r7}
   805d6:	4770      	bx	lr

000805d8 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   805d8:	b480      	push	{r7}
   805da:	b085      	sub	sp, #20
   805dc:	af00      	add	r7, sp, #0
   805de:	60f8      	str	r0, [r7, #12]
   805e0:	60b9      	str	r1, [r7, #8]
   805e2:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   805e4:	68f9      	ldr	r1, [r7, #12]
   805e6:	68ba      	ldr	r2, [r7, #8]
   805e8:	4613      	mov	r3, r2
   805ea:	009b      	lsls	r3, r3, #2
   805ec:	4413      	add	r3, r2
   805ee:	00db      	lsls	r3, r3, #3
   805f0:	440b      	add	r3, r1
   805f2:	3344      	adds	r3, #68	; 0x44
   805f4:	687a      	ldr	r2, [r7, #4]
   805f6:	601a      	str	r2, [r3, #0]
}
   805f8:	bf00      	nop
   805fa:	3714      	adds	r7, #20
   805fc:	46bd      	mov	sp, r7
   805fe:	bc80      	pop	{r7}
   80600:	4770      	bx	lr

00080602 <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   80602:	b480      	push	{r7}
   80604:	b085      	sub	sp, #20
   80606:	af00      	add	r7, sp, #0
   80608:	60f8      	str	r0, [r7, #12]
   8060a:	60b9      	str	r1, [r7, #8]
   8060c:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   8060e:	68f9      	ldr	r1, [r7, #12]
   80610:	68ba      	ldr	r2, [r7, #8]
   80612:	4613      	mov	r3, r2
   80614:	009b      	lsls	r3, r3, #2
   80616:	4413      	add	r3, r2
   80618:	00db      	lsls	r3, r3, #3
   8061a:	440b      	add	r3, r1
   8061c:	3348      	adds	r3, #72	; 0x48
   8061e:	687a      	ldr	r2, [r7, #4]
   80620:	601a      	str	r2, [r3, #0]
}
   80622:	bf00      	nop
   80624:	3714      	adds	r7, #20
   80626:	46bd      	mov	sp, r7
   80628:	bc80      	pop	{r7}
   8062a:	4770      	bx	lr

0008062c <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   8062c:	b480      	push	{r7}
   8062e:	b085      	sub	sp, #20
   80630:	af00      	add	r7, sp, #0
   80632:	60f8      	str	r0, [r7, #12]
   80634:	60b9      	str	r1, [r7, #8]
   80636:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   80638:	68f9      	ldr	r1, [r7, #12]
   8063a:	68ba      	ldr	r2, [r7, #8]
   8063c:	4613      	mov	r3, r2
   8063e:	009b      	lsls	r3, r3, #2
   80640:	4413      	add	r3, r2
   80642:	00db      	lsls	r3, r3, #3
   80644:	440b      	add	r3, r1
   80646:	334c      	adds	r3, #76	; 0x4c
   80648:	687a      	ldr	r2, [r7, #4]
   8064a:	601a      	str	r2, [r3, #0]
}
   8064c:	bf00      	nop
   8064e:	3714      	adds	r7, #20
   80650:	46bd      	mov	sp, r7
   80652:	bc80      	pop	{r7}
   80654:	4770      	bx	lr

00080656 <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   80656:	b480      	push	{r7}
   80658:	b085      	sub	sp, #20
   8065a:	af00      	add	r7, sp, #0
   8065c:	60f8      	str	r0, [r7, #12]
   8065e:	60b9      	str	r1, [r7, #8]
   80660:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   80662:	68f9      	ldr	r1, [r7, #12]
   80664:	68ba      	ldr	r2, [r7, #8]
   80666:	4613      	mov	r3, r2
   80668:	009b      	lsls	r3, r3, #2
   8066a:	4413      	add	r3, r2
   8066c:	00db      	lsls	r3, r3, #3
   8066e:	440b      	add	r3, r1
   80670:	3350      	adds	r3, #80	; 0x50
   80672:	687a      	ldr	r2, [r7, #4]
   80674:	601a      	str	r2, [r3, #0]
}
   80676:	bf00      	nop
   80678:	3714      	adds	r7, #20
   8067a:	46bd      	mov	sp, r7
   8067c:	bc80      	pop	{r7}
   8067e:	4770      	bx	lr

00080680 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   80680:	b580      	push	{r7, lr}
   80682:	b084      	sub	sp, #16
   80684:	af00      	add	r7, sp, #0
   80686:	60f8      	str	r0, [r7, #12]
   80688:	60b9      	str	r1, [r7, #8]
   8068a:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   8068c:	68fb      	ldr	r3, [r7, #12]
   8068e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   80690:	687b      	ldr	r3, [r7, #4]
   80692:	681b      	ldr	r3, [r3, #0]
   80694:	461a      	mov	r2, r3
   80696:	68b9      	ldr	r1, [r7, #8]
   80698:	68f8      	ldr	r0, [r7, #12]
   8069a:	4b10      	ldr	r3, [pc, #64]	; (806dc <dmac_channel_single_buf_transfer_init+0x5c>)
   8069c:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   8069e:	687b      	ldr	r3, [r7, #4]
   806a0:	685b      	ldr	r3, [r3, #4]
   806a2:	461a      	mov	r2, r3
   806a4:	68b9      	ldr	r1, [r7, #8]
   806a6:	68f8      	ldr	r0, [r7, #12]
   806a8:	4b0d      	ldr	r3, [pc, #52]	; (806e0 <dmac_channel_single_buf_transfer_init+0x60>)
   806aa:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   806ac:	2200      	movs	r2, #0
   806ae:	68b9      	ldr	r1, [r7, #8]
   806b0:	68f8      	ldr	r0, [r7, #12]
   806b2:	4b0c      	ldr	r3, [pc, #48]	; (806e4 <dmac_channel_single_buf_transfer_init+0x64>)
   806b4:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   806b6:	687b      	ldr	r3, [r7, #4]
   806b8:	689b      	ldr	r3, [r3, #8]
   806ba:	461a      	mov	r2, r3
   806bc:	68b9      	ldr	r1, [r7, #8]
   806be:	68f8      	ldr	r0, [r7, #12]
   806c0:	4b09      	ldr	r3, [pc, #36]	; (806e8 <dmac_channel_single_buf_transfer_init+0x68>)
   806c2:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   806c4:	687b      	ldr	r3, [r7, #4]
   806c6:	68db      	ldr	r3, [r3, #12]
   806c8:	461a      	mov	r2, r3
   806ca:	68b9      	ldr	r1, [r7, #8]
   806cc:	68f8      	ldr	r0, [r7, #12]
   806ce:	4b07      	ldr	r3, [pc, #28]	; (806ec <dmac_channel_single_buf_transfer_init+0x6c>)
   806d0:	4798      	blx	r3
}
   806d2:	bf00      	nop
   806d4:	3710      	adds	r7, #16
   806d6:	46bd      	mov	sp, r7
   806d8:	bd80      	pop	{r7, pc}
   806da:	bf00      	nop
   806dc:	00080585 	.word	0x00080585
   806e0:	000805af 	.word	0x000805af
   806e4:	000805d9 	.word	0x000805d9
   806e8:	00080603 	.word	0x00080603
   806ec:	0008062d 	.word	0x0008062d

000806f0 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   806f0:	b580      	push	{r7, lr}
   806f2:	b082      	sub	sp, #8
   806f4:	af00      	add	r7, sp, #0
   806f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   806f8:	687b      	ldr	r3, [r7, #4]
   806fa:	2b07      	cmp	r3, #7
   806fc:	d831      	bhi.n	80762 <osc_enable+0x72>
   806fe:	a201      	add	r2, pc, #4	; (adr r2, 80704 <osc_enable+0x14>)
   80700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80704:	00080761 	.word	0x00080761
   80708:	00080725 	.word	0x00080725
   8070c:	0008072d 	.word	0x0008072d
   80710:	00080735 	.word	0x00080735
   80714:	0008073d 	.word	0x0008073d
   80718:	00080745 	.word	0x00080745
   8071c:	0008074d 	.word	0x0008074d
   80720:	00080757 	.word	0x00080757
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80724:	2000      	movs	r0, #0
   80726:	4b11      	ldr	r3, [pc, #68]	; (8076c <osc_enable+0x7c>)
   80728:	4798      	blx	r3
		break;
   8072a:	e01a      	b.n	80762 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8072c:	2001      	movs	r0, #1
   8072e:	4b0f      	ldr	r3, [pc, #60]	; (8076c <osc_enable+0x7c>)
   80730:	4798      	blx	r3
		break;
   80732:	e016      	b.n	80762 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80734:	2000      	movs	r0, #0
   80736:	4b0e      	ldr	r3, [pc, #56]	; (80770 <osc_enable+0x80>)
   80738:	4798      	blx	r3
		break;
   8073a:	e012      	b.n	80762 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8073c:	2010      	movs	r0, #16
   8073e:	4b0c      	ldr	r3, [pc, #48]	; (80770 <osc_enable+0x80>)
   80740:	4798      	blx	r3
		break;
   80742:	e00e      	b.n	80762 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80744:	2020      	movs	r0, #32
   80746:	4b0a      	ldr	r3, [pc, #40]	; (80770 <osc_enable+0x80>)
   80748:	4798      	blx	r3
		break;
   8074a:	e00a      	b.n	80762 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8074c:	213e      	movs	r1, #62	; 0x3e
   8074e:	2000      	movs	r0, #0
   80750:	4b08      	ldr	r3, [pc, #32]	; (80774 <osc_enable+0x84>)
   80752:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   80754:	e005      	b.n	80762 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   80756:	213e      	movs	r1, #62	; 0x3e
   80758:	2001      	movs	r0, #1
   8075a:	4b06      	ldr	r3, [pc, #24]	; (80774 <osc_enable+0x84>)
   8075c:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   8075e:	e000      	b.n	80762 <osc_enable+0x72>
		break;
   80760:	bf00      	nop
	}
}
   80762:	bf00      	nop
   80764:	3708      	adds	r7, #8
   80766:	46bd      	mov	sp, r7
   80768:	bd80      	pop	{r7, pc}
   8076a:	bf00      	nop
   8076c:	00080add 	.word	0x00080add
   80770:	00080b49 	.word	0x00080b49
   80774:	00080bb9 	.word	0x00080bb9

00080778 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80778:	b580      	push	{r7, lr}
   8077a:	b082      	sub	sp, #8
   8077c:	af00      	add	r7, sp, #0
   8077e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80780:	687b      	ldr	r3, [r7, #4]
   80782:	2b07      	cmp	r3, #7
   80784:	d826      	bhi.n	807d4 <osc_is_ready+0x5c>
   80786:	a201      	add	r2, pc, #4	; (adr r2, 8078c <osc_is_ready+0x14>)
   80788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8078c:	000807ad 	.word	0x000807ad
   80790:	000807b1 	.word	0x000807b1
   80794:	000807b1 	.word	0x000807b1
   80798:	000807c3 	.word	0x000807c3
   8079c:	000807c3 	.word	0x000807c3
   807a0:	000807c3 	.word	0x000807c3
   807a4:	000807c3 	.word	0x000807c3
   807a8:	000807c3 	.word	0x000807c3
	case OSC_SLCK_32K_RC:
		return 1;
   807ac:	2301      	movs	r3, #1
   807ae:	e012      	b.n	807d6 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   807b0:	4b0b      	ldr	r3, [pc, #44]	; (807e0 <osc_is_ready+0x68>)
   807b2:	4798      	blx	r3
   807b4:	4603      	mov	r3, r0
   807b6:	2b00      	cmp	r3, #0
   807b8:	bf14      	ite	ne
   807ba:	2301      	movne	r3, #1
   807bc:	2300      	moveq	r3, #0
   807be:	b2db      	uxtb	r3, r3
   807c0:	e009      	b.n	807d6 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   807c2:	4b08      	ldr	r3, [pc, #32]	; (807e4 <osc_is_ready+0x6c>)
   807c4:	4798      	blx	r3
   807c6:	4603      	mov	r3, r0
   807c8:	2b00      	cmp	r3, #0
   807ca:	bf14      	ite	ne
   807cc:	2301      	movne	r3, #1
   807ce:	2300      	moveq	r3, #0
   807d0:	b2db      	uxtb	r3, r3
   807d2:	e000      	b.n	807d6 <osc_is_ready+0x5e>
	}

	return 0;
   807d4:	2300      	movs	r3, #0
}
   807d6:	4618      	mov	r0, r3
   807d8:	3708      	adds	r7, #8
   807da:	46bd      	mov	sp, r7
   807dc:	bd80      	pop	{r7, pc}
   807de:	bf00      	nop
   807e0:	00080b15 	.word	0x00080b15
   807e4:	00080c31 	.word	0x00080c31

000807e8 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   807e8:	b480      	push	{r7}
   807ea:	b083      	sub	sp, #12
   807ec:	af00      	add	r7, sp, #0
   807ee:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   807f0:	687b      	ldr	r3, [r7, #4]
   807f2:	2b07      	cmp	r3, #7
   807f4:	d825      	bhi.n	80842 <osc_get_rate+0x5a>
   807f6:	a201      	add	r2, pc, #4	; (adr r2, 807fc <osc_get_rate+0x14>)
   807f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   807fc:	0008081d 	.word	0x0008081d
   80800:	00080823 	.word	0x00080823
   80804:	00080829 	.word	0x00080829
   80808:	0008082f 	.word	0x0008082f
   8080c:	00080833 	.word	0x00080833
   80810:	00080837 	.word	0x00080837
   80814:	0008083b 	.word	0x0008083b
   80818:	0008083f 	.word	0x0008083f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8081c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80820:	e010      	b.n	80844 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80826:	e00d      	b.n	80844 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8082c:	e00a      	b.n	80844 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8082e:	4b08      	ldr	r3, [pc, #32]	; (80850 <osc_get_rate+0x68>)
   80830:	e008      	b.n	80844 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80832:	4b08      	ldr	r3, [pc, #32]	; (80854 <osc_get_rate+0x6c>)
   80834:	e006      	b.n	80844 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80836:	4b08      	ldr	r3, [pc, #32]	; (80858 <osc_get_rate+0x70>)
   80838:	e004      	b.n	80844 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8083a:	4b07      	ldr	r3, [pc, #28]	; (80858 <osc_get_rate+0x70>)
   8083c:	e002      	b.n	80844 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8083e:	4b06      	ldr	r3, [pc, #24]	; (80858 <osc_get_rate+0x70>)
   80840:	e000      	b.n	80844 <osc_get_rate+0x5c>
	}

	return 0;
   80842:	2300      	movs	r3, #0
}
   80844:	4618      	mov	r0, r3
   80846:	370c      	adds	r7, #12
   80848:	46bd      	mov	sp, r7
   8084a:	bc80      	pop	{r7}
   8084c:	4770      	bx	lr
   8084e:	bf00      	nop
   80850:	003d0900 	.word	0x003d0900
   80854:	007a1200 	.word	0x007a1200
   80858:	00b71b00 	.word	0x00b71b00

0008085c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   8085c:	b580      	push	{r7, lr}
   8085e:	b082      	sub	sp, #8
   80860:	af00      	add	r7, sp, #0
   80862:	4603      	mov	r3, r0
   80864:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80866:	bf00      	nop
   80868:	79fb      	ldrb	r3, [r7, #7]
   8086a:	4618      	mov	r0, r3
   8086c:	4b05      	ldr	r3, [pc, #20]	; (80884 <osc_wait_ready+0x28>)
   8086e:	4798      	blx	r3
   80870:	4603      	mov	r3, r0
   80872:	f083 0301 	eor.w	r3, r3, #1
   80876:	b2db      	uxtb	r3, r3
   80878:	2b00      	cmp	r3, #0
   8087a:	d1f5      	bne.n	80868 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   8087c:	bf00      	nop
   8087e:	3708      	adds	r7, #8
   80880:	46bd      	mov	sp, r7
   80882:	bd80      	pop	{r7, pc}
   80884:	00080779 	.word	0x00080779

00080888 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   80888:	b580      	push	{r7, lr}
   8088a:	b086      	sub	sp, #24
   8088c:	af00      	add	r7, sp, #0
   8088e:	60f8      	str	r0, [r7, #12]
   80890:	607a      	str	r2, [r7, #4]
   80892:	603b      	str	r3, [r7, #0]
   80894:	460b      	mov	r3, r1
   80896:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   80898:	687b      	ldr	r3, [r7, #4]
   8089a:	2b00      	cmp	r3, #0
   8089c:	d107      	bne.n	808ae <pll_config_init+0x26>
   8089e:	683b      	ldr	r3, [r7, #0]
   808a0:	2b00      	cmp	r3, #0
   808a2:	d104      	bne.n	808ae <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   808a4:	68fb      	ldr	r3, [r7, #12]
   808a6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   808aa:	601a      	str	r2, [r3, #0]
   808ac:	e019      	b.n	808e2 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   808ae:	7afb      	ldrb	r3, [r7, #11]
   808b0:	4618      	mov	r0, r3
   808b2:	4b0e      	ldr	r3, [pc, #56]	; (808ec <pll_config_init+0x64>)
   808b4:	4798      	blx	r3
   808b6:	4602      	mov	r2, r0
   808b8:	687b      	ldr	r3, [r7, #4]
   808ba:	fbb2 f3f3 	udiv	r3, r2, r3
   808be:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   808c0:	697b      	ldr	r3, [r7, #20]
   808c2:	683a      	ldr	r2, [r7, #0]
   808c4:	fb02 f303 	mul.w	r3, r2, r3
   808c8:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   808ca:	683b      	ldr	r3, [r7, #0]
   808cc:	3b01      	subs	r3, #1
   808ce:	041a      	lsls	r2, r3, #16
   808d0:	4b07      	ldr	r3, [pc, #28]	; (808f0 <pll_config_init+0x68>)
   808d2:	4013      	ands	r3, r2
   808d4:	687a      	ldr	r2, [r7, #4]
   808d6:	b2d2      	uxtb	r2, r2
   808d8:	4313      	orrs	r3, r2
   808da:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   808de:	68fb      	ldr	r3, [r7, #12]
   808e0:	601a      	str	r2, [r3, #0]
	}
}
   808e2:	bf00      	nop
   808e4:	3718      	adds	r7, #24
   808e6:	46bd      	mov	sp, r7
   808e8:	bd80      	pop	{r7, pc}
   808ea:	bf00      	nop
   808ec:	000807e9 	.word	0x000807e9
   808f0:	07ff0000 	.word	0x07ff0000

000808f4 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   808f4:	b580      	push	{r7, lr}
   808f6:	b082      	sub	sp, #8
   808f8:	af00      	add	r7, sp, #0
   808fa:	6078      	str	r0, [r7, #4]
   808fc:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   808fe:	683b      	ldr	r3, [r7, #0]
   80900:	2b00      	cmp	r3, #0
   80902:	d108      	bne.n	80916 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80904:	4b09      	ldr	r3, [pc, #36]	; (8092c <pll_enable+0x38>)
   80906:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80908:	4a09      	ldr	r2, [pc, #36]	; (80930 <pll_enable+0x3c>)
   8090a:	687b      	ldr	r3, [r7, #4]
   8090c:	681b      	ldr	r3, [r3, #0]
   8090e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80912:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80914:	e005      	b.n	80922 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80916:	4a06      	ldr	r2, [pc, #24]	; (80930 <pll_enable+0x3c>)
   80918:	687b      	ldr	r3, [r7, #4]
   8091a:	681b      	ldr	r3, [r3, #0]
   8091c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80920:	61d3      	str	r3, [r2, #28]
}
   80922:	bf00      	nop
   80924:	3708      	adds	r7, #8
   80926:	46bd      	mov	sp, r7
   80928:	bd80      	pop	{r7, pc}
   8092a:	bf00      	nop
   8092c:	00080c49 	.word	0x00080c49
   80930:	400e0600 	.word	0x400e0600

00080934 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80934:	b580      	push	{r7, lr}
   80936:	b082      	sub	sp, #8
   80938:	af00      	add	r7, sp, #0
   8093a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8093c:	687b      	ldr	r3, [r7, #4]
   8093e:	2b00      	cmp	r3, #0
   80940:	d103      	bne.n	8094a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   80942:	4b05      	ldr	r3, [pc, #20]	; (80958 <pll_is_locked+0x24>)
   80944:	4798      	blx	r3
   80946:	4603      	mov	r3, r0
   80948:	e002      	b.n	80950 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8094a:	4b04      	ldr	r3, [pc, #16]	; (8095c <pll_is_locked+0x28>)
   8094c:	4798      	blx	r3
   8094e:	4603      	mov	r3, r0
	}
}
   80950:	4618      	mov	r0, r3
   80952:	3708      	adds	r7, #8
   80954:	46bd      	mov	sp, r7
   80956:	bd80      	pop	{r7, pc}
   80958:	00080c61 	.word	0x00080c61
   8095c:	00080c79 	.word	0x00080c79

00080960 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80960:	b580      	push	{r7, lr}
   80962:	b082      	sub	sp, #8
   80964:	af00      	add	r7, sp, #0
   80966:	4603      	mov	r3, r0
   80968:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8096a:	79fb      	ldrb	r3, [r7, #7]
   8096c:	3b03      	subs	r3, #3
   8096e:	2b04      	cmp	r3, #4
   80970:	d808      	bhi.n	80984 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   80972:	79fb      	ldrb	r3, [r7, #7]
   80974:	4618      	mov	r0, r3
   80976:	4b06      	ldr	r3, [pc, #24]	; (80990 <pll_enable_source+0x30>)
   80978:	4798      	blx	r3
		osc_wait_ready(e_src);
   8097a:	79fb      	ldrb	r3, [r7, #7]
   8097c:	4618      	mov	r0, r3
   8097e:	4b05      	ldr	r3, [pc, #20]	; (80994 <pll_enable_source+0x34>)
   80980:	4798      	blx	r3
		break;
   80982:	e000      	b.n	80986 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   80984:	bf00      	nop
	}
}
   80986:	bf00      	nop
   80988:	3708      	adds	r7, #8
   8098a:	46bd      	mov	sp, r7
   8098c:	bd80      	pop	{r7, pc}
   8098e:	bf00      	nop
   80990:	000806f1 	.word	0x000806f1
   80994:	0008085d 	.word	0x0008085d

00080998 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   80998:	b580      	push	{r7, lr}
   8099a:	b082      	sub	sp, #8
   8099c:	af00      	add	r7, sp, #0
   8099e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   809a0:	bf00      	nop
   809a2:	6878      	ldr	r0, [r7, #4]
   809a4:	4b04      	ldr	r3, [pc, #16]	; (809b8 <pll_wait_for_lock+0x20>)
   809a6:	4798      	blx	r3
   809a8:	4603      	mov	r3, r0
   809aa:	2b00      	cmp	r3, #0
   809ac:	d0f9      	beq.n	809a2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   809ae:	2300      	movs	r3, #0
}
   809b0:	4618      	mov	r0, r3
   809b2:	3708      	adds	r7, #8
   809b4:	46bd      	mov	sp, r7
   809b6:	bd80      	pop	{r7, pc}
   809b8:	00080935 	.word	0x00080935

000809bc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   809bc:	b580      	push	{r7, lr}
   809be:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   809c0:	2006      	movs	r0, #6
   809c2:	4b04      	ldr	r3, [pc, #16]	; (809d4 <sysclk_get_main_hz+0x18>)
   809c4:	4798      	blx	r3
   809c6:	4602      	mov	r2, r0
   809c8:	4613      	mov	r3, r2
   809ca:	00db      	lsls	r3, r3, #3
   809cc:	1a9b      	subs	r3, r3, r2
   809ce:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   809d0:	4618      	mov	r0, r3
   809d2:	bd80      	pop	{r7, pc}
   809d4:	000807e9 	.word	0x000807e9

000809d8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   809d8:	b580      	push	{r7, lr}
   809da:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   809dc:	4b02      	ldr	r3, [pc, #8]	; (809e8 <sysclk_get_cpu_hz+0x10>)
   809de:	4798      	blx	r3
   809e0:	4603      	mov	r3, r0
   809e2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   809e4:	4618      	mov	r0, r3
   809e6:	bd80      	pop	{r7, pc}
   809e8:	000809bd 	.word	0x000809bd

000809ec <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   809ec:	b590      	push	{r4, r7, lr}
   809ee:	b083      	sub	sp, #12
   809f0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   809f2:	4811      	ldr	r0, [pc, #68]	; (80a38 <sysclk_init+0x4c>)
   809f4:	4b11      	ldr	r3, [pc, #68]	; (80a3c <sysclk_init+0x50>)
   809f6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   809f8:	2006      	movs	r0, #6
   809fa:	4b11      	ldr	r3, [pc, #68]	; (80a40 <sysclk_init+0x54>)
   809fc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   809fe:	1d38      	adds	r0, r7, #4
   80a00:	230e      	movs	r3, #14
   80a02:	2201      	movs	r2, #1
   80a04:	2106      	movs	r1, #6
   80a06:	4c0f      	ldr	r4, [pc, #60]	; (80a44 <sysclk_init+0x58>)
   80a08:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80a0a:	1d3b      	adds	r3, r7, #4
   80a0c:	2100      	movs	r1, #0
   80a0e:	4618      	mov	r0, r3
   80a10:	4b0d      	ldr	r3, [pc, #52]	; (80a48 <sysclk_init+0x5c>)
   80a12:	4798      	blx	r3
		pll_wait_for_lock(0);
   80a14:	2000      	movs	r0, #0
   80a16:	4b0d      	ldr	r3, [pc, #52]	; (80a4c <sysclk_init+0x60>)
   80a18:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80a1a:	2010      	movs	r0, #16
   80a1c:	4b0c      	ldr	r3, [pc, #48]	; (80a50 <sysclk_init+0x64>)
   80a1e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80a20:	4b0c      	ldr	r3, [pc, #48]	; (80a54 <sysclk_init+0x68>)
   80a22:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80a24:	4b0c      	ldr	r3, [pc, #48]	; (80a58 <sysclk_init+0x6c>)
   80a26:	4798      	blx	r3
   80a28:	4603      	mov	r3, r0
   80a2a:	4618      	mov	r0, r3
   80a2c:	4b03      	ldr	r3, [pc, #12]	; (80a3c <sysclk_init+0x50>)
   80a2e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80a30:	bf00      	nop
   80a32:	370c      	adds	r7, #12
   80a34:	46bd      	mov	sp, r7
   80a36:	bd90      	pop	{r4, r7, pc}
   80a38:	0501bd00 	.word	0x0501bd00
   80a3c:	200700d1 	.word	0x200700d1
   80a40:	00080961 	.word	0x00080961
   80a44:	00080889 	.word	0x00080889
   80a48:	000808f5 	.word	0x000808f5
   80a4c:	00080999 	.word	0x00080999
   80a50:	00080a5d 	.word	0x00080a5d
   80a54:	00081279 	.word	0x00081279
   80a58:	000809d9 	.word	0x000809d9

00080a5c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   80a5c:	b480      	push	{r7}
   80a5e:	b085      	sub	sp, #20
   80a60:	af00      	add	r7, sp, #0
   80a62:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80a64:	491c      	ldr	r1, [pc, #112]	; (80ad8 <pmc_switch_mck_to_pllack+0x7c>)
   80a66:	4b1c      	ldr	r3, [pc, #112]	; (80ad8 <pmc_switch_mck_to_pllack+0x7c>)
   80a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   80a6e:	687b      	ldr	r3, [r7, #4]
   80a70:	4313      	orrs	r3, r2
   80a72:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a74:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a78:	60fb      	str	r3, [r7, #12]
   80a7a:	e007      	b.n	80a8c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a7c:	68fb      	ldr	r3, [r7, #12]
   80a7e:	2b00      	cmp	r3, #0
   80a80:	d101      	bne.n	80a86 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   80a82:	2301      	movs	r3, #1
   80a84:	e023      	b.n	80ace <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   80a86:	68fb      	ldr	r3, [r7, #12]
   80a88:	3b01      	subs	r3, #1
   80a8a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a8c:	4b12      	ldr	r3, [pc, #72]	; (80ad8 <pmc_switch_mck_to_pllack+0x7c>)
   80a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80a90:	f003 0308 	and.w	r3, r3, #8
   80a94:	2b00      	cmp	r3, #0
   80a96:	d0f1      	beq.n	80a7c <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80a98:	4a0f      	ldr	r2, [pc, #60]	; (80ad8 <pmc_switch_mck_to_pllack+0x7c>)
   80a9a:	4b0f      	ldr	r3, [pc, #60]	; (80ad8 <pmc_switch_mck_to_pllack+0x7c>)
   80a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a9e:	f023 0303 	bic.w	r3, r3, #3
   80aa2:	f043 0302 	orr.w	r3, r3, #2
   80aa6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80aac:	60fb      	str	r3, [r7, #12]
   80aae:	e007      	b.n	80ac0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80ab0:	68fb      	ldr	r3, [r7, #12]
   80ab2:	2b00      	cmp	r3, #0
   80ab4:	d101      	bne.n	80aba <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   80ab6:	2301      	movs	r3, #1
   80ab8:	e009      	b.n	80ace <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   80aba:	68fb      	ldr	r3, [r7, #12]
   80abc:	3b01      	subs	r3, #1
   80abe:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ac0:	4b05      	ldr	r3, [pc, #20]	; (80ad8 <pmc_switch_mck_to_pllack+0x7c>)
   80ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80ac4:	f003 0308 	and.w	r3, r3, #8
   80ac8:	2b00      	cmp	r3, #0
   80aca:	d0f1      	beq.n	80ab0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   80acc:	2300      	movs	r3, #0
}
   80ace:	4618      	mov	r0, r3
   80ad0:	3714      	adds	r7, #20
   80ad2:	46bd      	mov	sp, r7
   80ad4:	bc80      	pop	{r7}
   80ad6:	4770      	bx	lr
   80ad8:	400e0600 	.word	0x400e0600

00080adc <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   80adc:	b480      	push	{r7}
   80ade:	b083      	sub	sp, #12
   80ae0:	af00      	add	r7, sp, #0
   80ae2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   80ae4:	687b      	ldr	r3, [r7, #4]
   80ae6:	2b01      	cmp	r3, #1
   80ae8:	d107      	bne.n	80afa <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   80aea:	4a08      	ldr	r2, [pc, #32]	; (80b0c <pmc_switch_sclk_to_32kxtal+0x30>)
   80aec:	4b07      	ldr	r3, [pc, #28]	; (80b0c <pmc_switch_sclk_to_32kxtal+0x30>)
   80aee:	689b      	ldr	r3, [r3, #8]
   80af0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80af8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   80afa:	4b04      	ldr	r3, [pc, #16]	; (80b0c <pmc_switch_sclk_to_32kxtal+0x30>)
   80afc:	4a04      	ldr	r2, [pc, #16]	; (80b10 <pmc_switch_sclk_to_32kxtal+0x34>)
   80afe:	601a      	str	r2, [r3, #0]
}
   80b00:	bf00      	nop
   80b02:	370c      	adds	r7, #12
   80b04:	46bd      	mov	sp, r7
   80b06:	bc80      	pop	{r7}
   80b08:	4770      	bx	lr
   80b0a:	bf00      	nop
   80b0c:	400e1a10 	.word	0x400e1a10
   80b10:	a5000008 	.word	0xa5000008

00080b14 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   80b14:	b480      	push	{r7}
   80b16:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   80b18:	4b09      	ldr	r3, [pc, #36]	; (80b40 <pmc_osc_is_ready_32kxtal+0x2c>)
   80b1a:	695b      	ldr	r3, [r3, #20]
   80b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   80b20:	2b00      	cmp	r3, #0
   80b22:	d007      	beq.n	80b34 <pmc_osc_is_ready_32kxtal+0x20>
   80b24:	4b07      	ldr	r3, [pc, #28]	; (80b44 <pmc_osc_is_ready_32kxtal+0x30>)
   80b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80b2c:	2b00      	cmp	r3, #0
   80b2e:	d001      	beq.n	80b34 <pmc_osc_is_ready_32kxtal+0x20>
   80b30:	2301      	movs	r3, #1
   80b32:	e000      	b.n	80b36 <pmc_osc_is_ready_32kxtal+0x22>
   80b34:	2300      	movs	r3, #0
}
   80b36:	4618      	mov	r0, r3
   80b38:	46bd      	mov	sp, r7
   80b3a:	bc80      	pop	{r7}
   80b3c:	4770      	bx	lr
   80b3e:	bf00      	nop
   80b40:	400e1a10 	.word	0x400e1a10
   80b44:	400e0600 	.word	0x400e0600

00080b48 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   80b48:	b480      	push	{r7}
   80b4a:	b083      	sub	sp, #12
   80b4c:	af00      	add	r7, sp, #0
   80b4e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   80b50:	4a18      	ldr	r2, [pc, #96]	; (80bb4 <pmc_switch_mainck_to_fastrc+0x6c>)
   80b52:	4b18      	ldr	r3, [pc, #96]	; (80bb4 <pmc_switch_mainck_to_fastrc+0x6c>)
   80b54:	6a1b      	ldr	r3, [r3, #32]
   80b56:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b5a:	f043 0308 	orr.w	r3, r3, #8
   80b5e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80b60:	bf00      	nop
   80b62:	4b14      	ldr	r3, [pc, #80]	; (80bb4 <pmc_switch_mainck_to_fastrc+0x6c>)
   80b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80b6a:	2b00      	cmp	r3, #0
   80b6c:	d0f9      	beq.n	80b62 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80b6e:	4911      	ldr	r1, [pc, #68]	; (80bb4 <pmc_switch_mainck_to_fastrc+0x6c>)
   80b70:	4b10      	ldr	r3, [pc, #64]	; (80bb4 <pmc_switch_mainck_to_fastrc+0x6c>)
   80b72:	6a1b      	ldr	r3, [r3, #32]
   80b74:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   80b7c:	687a      	ldr	r2, [r7, #4]
   80b7e:	4313      	orrs	r3, r2
   80b80:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80b84:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80b86:	bf00      	nop
   80b88:	4b0a      	ldr	r3, [pc, #40]	; (80bb4 <pmc_switch_mainck_to_fastrc+0x6c>)
   80b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80b90:	2b00      	cmp	r3, #0
   80b92:	d0f9      	beq.n	80b88 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   80b94:	4a07      	ldr	r2, [pc, #28]	; (80bb4 <pmc_switch_mainck_to_fastrc+0x6c>)
   80b96:	4b07      	ldr	r3, [pc, #28]	; (80bb4 <pmc_switch_mainck_to_fastrc+0x6c>)
   80b98:	6a1b      	ldr	r3, [r3, #32]
   80b9a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   80b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80ba2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80ba6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   80ba8:	bf00      	nop
   80baa:	370c      	adds	r7, #12
   80bac:	46bd      	mov	sp, r7
   80bae:	bc80      	pop	{r7}
   80bb0:	4770      	bx	lr
   80bb2:	bf00      	nop
   80bb4:	400e0600 	.word	0x400e0600

00080bb8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   80bb8:	b480      	push	{r7}
   80bba:	b083      	sub	sp, #12
   80bbc:	af00      	add	r7, sp, #0
   80bbe:	6078      	str	r0, [r7, #4]
   80bc0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80bc2:	687b      	ldr	r3, [r7, #4]
   80bc4:	2b00      	cmp	r3, #0
   80bc6:	d008      	beq.n	80bda <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bc8:	4916      	ldr	r1, [pc, #88]	; (80c24 <pmc_switch_mainck_to_xtal+0x6c>)
   80bca:	4b16      	ldr	r3, [pc, #88]	; (80c24 <pmc_switch_mainck_to_xtal+0x6c>)
   80bcc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80bce:	4a16      	ldr	r2, [pc, #88]	; (80c28 <pmc_switch_mainck_to_xtal+0x70>)
   80bd0:	401a      	ands	r2, r3
   80bd2:	4b16      	ldr	r3, [pc, #88]	; (80c2c <pmc_switch_mainck_to_xtal+0x74>)
   80bd4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bd6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   80bd8:	e01e      	b.n	80c18 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bda:	4912      	ldr	r1, [pc, #72]	; (80c24 <pmc_switch_mainck_to_xtal+0x6c>)
   80bdc:	4b11      	ldr	r3, [pc, #68]	; (80c24 <pmc_switch_mainck_to_xtal+0x6c>)
   80bde:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80be0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80be4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80be8:	683a      	ldr	r2, [r7, #0]
   80bea:	0212      	lsls	r2, r2, #8
   80bec:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80bee:	4313      	orrs	r3, r2
   80bf0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80bf4:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bf8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80bfa:	bf00      	nop
   80bfc:	4b09      	ldr	r3, [pc, #36]	; (80c24 <pmc_switch_mainck_to_xtal+0x6c>)
   80bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c00:	f003 0301 	and.w	r3, r3, #1
   80c04:	2b00      	cmp	r3, #0
   80c06:	d0f9      	beq.n	80bfc <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80c08:	4a06      	ldr	r2, [pc, #24]	; (80c24 <pmc_switch_mainck_to_xtal+0x6c>)
   80c0a:	4b06      	ldr	r3, [pc, #24]	; (80c24 <pmc_switch_mainck_to_xtal+0x6c>)
   80c0c:	6a1b      	ldr	r3, [r3, #32]
   80c0e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80c16:	6213      	str	r3, [r2, #32]
}
   80c18:	bf00      	nop
   80c1a:	370c      	adds	r7, #12
   80c1c:	46bd      	mov	sp, r7
   80c1e:	bc80      	pop	{r7}
   80c20:	4770      	bx	lr
   80c22:	bf00      	nop
   80c24:	400e0600 	.word	0x400e0600
   80c28:	fec8fffc 	.word	0xfec8fffc
   80c2c:	01370002 	.word	0x01370002

00080c30 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   80c30:	b480      	push	{r7}
   80c32:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80c34:	4b03      	ldr	r3, [pc, #12]	; (80c44 <pmc_osc_is_ready_mainck+0x14>)
   80c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   80c3c:	4618      	mov	r0, r3
   80c3e:	46bd      	mov	sp, r7
   80c40:	bc80      	pop	{r7}
   80c42:	4770      	bx	lr
   80c44:	400e0600 	.word	0x400e0600

00080c48 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   80c48:	b480      	push	{r7}
   80c4a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c4c:	4b03      	ldr	r3, [pc, #12]	; (80c5c <pmc_disable_pllack+0x14>)
   80c4e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c52:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   80c54:	bf00      	nop
   80c56:	46bd      	mov	sp, r7
   80c58:	bc80      	pop	{r7}
   80c5a:	4770      	bx	lr
   80c5c:	400e0600 	.word	0x400e0600

00080c60 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   80c60:	b480      	push	{r7}
   80c62:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80c64:	4b03      	ldr	r3, [pc, #12]	; (80c74 <pmc_is_locked_pllack+0x14>)
   80c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c68:	f003 0302 	and.w	r3, r3, #2
}
   80c6c:	4618      	mov	r0, r3
   80c6e:	46bd      	mov	sp, r7
   80c70:	bc80      	pop	{r7}
   80c72:	4770      	bx	lr
   80c74:	400e0600 	.word	0x400e0600

00080c78 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   80c78:	b480      	push	{r7}
   80c7a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   80c7c:	4b03      	ldr	r3, [pc, #12]	; (80c8c <pmc_is_locked_upll+0x14>)
   80c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   80c84:	4618      	mov	r0, r3
   80c86:	46bd      	mov	sp, r7
   80c88:	bc80      	pop	{r7}
   80c8a:	4770      	bx	lr
   80c8c:	400e0600 	.word	0x400e0600

00080c90 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   80c90:	b480      	push	{r7}
   80c92:	b083      	sub	sp, #12
   80c94:	af00      	add	r7, sp, #0
   80c96:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   80c98:	687b      	ldr	r3, [r7, #4]
   80c9a:	2b2c      	cmp	r3, #44	; 0x2c
   80c9c:	d901      	bls.n	80ca2 <pmc_enable_periph_clk+0x12>
		return 1;
   80c9e:	2301      	movs	r3, #1
   80ca0:	e02f      	b.n	80d02 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   80ca2:	687b      	ldr	r3, [r7, #4]
   80ca4:	2b1f      	cmp	r3, #31
   80ca6:	d813      	bhi.n	80cd0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80ca8:	4b18      	ldr	r3, [pc, #96]	; (80d0c <pmc_enable_periph_clk+0x7c>)
   80caa:	699a      	ldr	r2, [r3, #24]
   80cac:	2101      	movs	r1, #1
   80cae:	687b      	ldr	r3, [r7, #4]
   80cb0:	fa01 f303 	lsl.w	r3, r1, r3
   80cb4:	401a      	ands	r2, r3
   80cb6:	2101      	movs	r1, #1
   80cb8:	687b      	ldr	r3, [r7, #4]
   80cba:	fa01 f303 	lsl.w	r3, r1, r3
   80cbe:	429a      	cmp	r2, r3
   80cc0:	d01e      	beq.n	80d00 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   80cc2:	4a12      	ldr	r2, [pc, #72]	; (80d0c <pmc_enable_periph_clk+0x7c>)
   80cc4:	2101      	movs	r1, #1
   80cc6:	687b      	ldr	r3, [r7, #4]
   80cc8:	fa01 f303 	lsl.w	r3, r1, r3
   80ccc:	6113      	str	r3, [r2, #16]
   80cce:	e017      	b.n	80d00 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80cd0:	687b      	ldr	r3, [r7, #4]
   80cd2:	3b20      	subs	r3, #32
   80cd4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80cd6:	4b0d      	ldr	r3, [pc, #52]	; (80d0c <pmc_enable_periph_clk+0x7c>)
   80cd8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80cdc:	2101      	movs	r1, #1
   80cde:	687b      	ldr	r3, [r7, #4]
   80ce0:	fa01 f303 	lsl.w	r3, r1, r3
   80ce4:	401a      	ands	r2, r3
   80ce6:	2101      	movs	r1, #1
   80ce8:	687b      	ldr	r3, [r7, #4]
   80cea:	fa01 f303 	lsl.w	r3, r1, r3
   80cee:	429a      	cmp	r2, r3
   80cf0:	d006      	beq.n	80d00 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   80cf2:	4a06      	ldr	r2, [pc, #24]	; (80d0c <pmc_enable_periph_clk+0x7c>)
   80cf4:	2101      	movs	r1, #1
   80cf6:	687b      	ldr	r3, [r7, #4]
   80cf8:	fa01 f303 	lsl.w	r3, r1, r3
   80cfc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80d00:	2300      	movs	r3, #0
}
   80d02:	4618      	mov	r0, r3
   80d04:	370c      	adds	r7, #12
   80d06:	46bd      	mov	sp, r7
   80d08:	bc80      	pop	{r7}
   80d0a:	4770      	bx	lr
   80d0c:	400e0600 	.word	0x400e0600

00080d10 <osc_get_rate>:
{
   80d10:	b480      	push	{r7}
   80d12:	b083      	sub	sp, #12
   80d14:	af00      	add	r7, sp, #0
   80d16:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80d18:	687b      	ldr	r3, [r7, #4]
   80d1a:	2b07      	cmp	r3, #7
   80d1c:	d825      	bhi.n	80d6a <osc_get_rate+0x5a>
   80d1e:	a201      	add	r2, pc, #4	; (adr r2, 80d24 <osc_get_rate+0x14>)
   80d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d24:	00080d45 	.word	0x00080d45
   80d28:	00080d4b 	.word	0x00080d4b
   80d2c:	00080d51 	.word	0x00080d51
   80d30:	00080d57 	.word	0x00080d57
   80d34:	00080d5b 	.word	0x00080d5b
   80d38:	00080d5f 	.word	0x00080d5f
   80d3c:	00080d63 	.word	0x00080d63
   80d40:	00080d67 	.word	0x00080d67
		return OSC_SLCK_32K_RC_HZ;
   80d44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80d48:	e010      	b.n	80d6c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   80d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80d4e:	e00d      	b.n	80d6c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   80d50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80d54:	e00a      	b.n	80d6c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   80d56:	4b08      	ldr	r3, [pc, #32]	; (80d78 <osc_get_rate+0x68>)
   80d58:	e008      	b.n	80d6c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   80d5a:	4b08      	ldr	r3, [pc, #32]	; (80d7c <osc_get_rate+0x6c>)
   80d5c:	e006      	b.n	80d6c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   80d5e:	4b08      	ldr	r3, [pc, #32]	; (80d80 <osc_get_rate+0x70>)
   80d60:	e004      	b.n	80d6c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   80d62:	4b07      	ldr	r3, [pc, #28]	; (80d80 <osc_get_rate+0x70>)
   80d64:	e002      	b.n	80d6c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   80d66:	4b06      	ldr	r3, [pc, #24]	; (80d80 <osc_get_rate+0x70>)
   80d68:	e000      	b.n	80d6c <osc_get_rate+0x5c>
	return 0;
   80d6a:	2300      	movs	r3, #0
}
   80d6c:	4618      	mov	r0, r3
   80d6e:	370c      	adds	r7, #12
   80d70:	46bd      	mov	sp, r7
   80d72:	bc80      	pop	{r7}
   80d74:	4770      	bx	lr
   80d76:	bf00      	nop
   80d78:	003d0900 	.word	0x003d0900
   80d7c:	007a1200 	.word	0x007a1200
   80d80:	00b71b00 	.word	0x00b71b00

00080d84 <sysclk_get_main_hz>:
{
   80d84:	b580      	push	{r7, lr}
   80d86:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   80d88:	2006      	movs	r0, #6
   80d8a:	4b04      	ldr	r3, [pc, #16]	; (80d9c <sysclk_get_main_hz+0x18>)
   80d8c:	4798      	blx	r3
   80d8e:	4602      	mov	r2, r0
   80d90:	4613      	mov	r3, r2
   80d92:	00db      	lsls	r3, r3, #3
   80d94:	1a9b      	subs	r3, r3, r2
   80d96:	005b      	lsls	r3, r3, #1
}
   80d98:	4618      	mov	r0, r3
   80d9a:	bd80      	pop	{r7, pc}
   80d9c:	00080d11 	.word	0x00080d11

00080da0 <sysclk_get_cpu_hz>:
{
   80da0:	b580      	push	{r7, lr}
   80da2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   80da4:	4b02      	ldr	r3, [pc, #8]	; (80db0 <sysclk_get_cpu_hz+0x10>)
   80da6:	4798      	blx	r3
   80da8:	4603      	mov	r3, r0
   80daa:	085b      	lsrs	r3, r3, #1
}
   80dac:	4618      	mov	r0, r3
   80dae:	bd80      	pop	{r7, pc}
   80db0:	00080d85 	.word	0x00080d85

00080db4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80db4:	b580      	push	{r7, lr}
   80db6:	b082      	sub	sp, #8
   80db8:	af00      	add	r7, sp, #0
   80dba:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80dbc:	6878      	ldr	r0, [r7, #4]
   80dbe:	4b03      	ldr	r3, [pc, #12]	; (80dcc <sysclk_enable_peripheral_clock+0x18>)
   80dc0:	4798      	blx	r3
}
   80dc2:	bf00      	nop
   80dc4:	3708      	adds	r7, #8
   80dc6:	46bd      	mov	sp, r7
   80dc8:	bd80      	pop	{r7, pc}
   80dca:	bf00      	nop
   80dcc:	00080c91 	.word	0x00080c91

00080dd0 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   80dd0:	b580      	push	{r7, lr}
   80dd2:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   80dd4:	200b      	movs	r0, #11
   80dd6:	4b06      	ldr	r3, [pc, #24]	; (80df0 <ioport_init+0x20>)
   80dd8:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   80dda:	200c      	movs	r0, #12
   80ddc:	4b04      	ldr	r3, [pc, #16]	; (80df0 <ioport_init+0x20>)
   80dde:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   80de0:	200d      	movs	r0, #13
   80de2:	4b03      	ldr	r3, [pc, #12]	; (80df0 <ioport_init+0x20>)
   80de4:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   80de6:	200e      	movs	r0, #14
   80de8:	4b01      	ldr	r3, [pc, #4]	; (80df0 <ioport_init+0x20>)
   80dea:	4798      	blx	r3
	arch_ioport_init();
}
   80dec:	bf00      	nop
   80dee:	bd80      	pop	{r7, pc}
   80df0:	00080db5 	.word	0x00080db5

00080df4 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
   80df4:	b480      	push	{r7}
   80df6:	b089      	sub	sp, #36	; 0x24
   80df8:	af00      	add	r7, sp, #0
   80dfa:	6078      	str	r0, [r7, #4]
   80dfc:	687b      	ldr	r3, [r7, #4]
   80dfe:	61fb      	str	r3, [r7, #28]
   80e00:	69fb      	ldr	r3, [r7, #28]
   80e02:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   80e04:	69bb      	ldr	r3, [r7, #24]
   80e06:	095a      	lsrs	r2, r3, #5
   80e08:	69fb      	ldr	r3, [r7, #28]
   80e0a:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   80e0c:	697b      	ldr	r3, [r7, #20]
   80e0e:	f003 031f 	and.w	r3, r3, #31
   80e12:	2101      	movs	r1, #1
   80e14:	fa01 f303 	lsl.w	r3, r1, r3
   80e18:	613a      	str	r2, [r7, #16]
   80e1a:	60fb      	str	r3, [r7, #12]
   80e1c:	693b      	ldr	r3, [r7, #16]
   80e1e:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80e20:	68bb      	ldr	r3, [r7, #8]
   80e22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e26:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e2a:	025b      	lsls	r3, r3, #9
   80e2c:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   80e2e:	68fb      	ldr	r3, [r7, #12]
   80e30:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
   80e32:	bf00      	nop
   80e34:	3724      	adds	r7, #36	; 0x24
   80e36:	46bd      	mov	sp, r7
   80e38:	bc80      	pop	{r7}
   80e3a:	4770      	bx	lr

00080e3c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   80e3c:	b480      	push	{r7}
   80e3e:	b08d      	sub	sp, #52	; 0x34
   80e40:	af00      	add	r7, sp, #0
   80e42:	6078      	str	r0, [r7, #4]
   80e44:	6039      	str	r1, [r7, #0]
   80e46:	687b      	ldr	r3, [r7, #4]
   80e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   80e4a:	683b      	ldr	r3, [r7, #0]
   80e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   80e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80e50:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   80e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e54:	095a      	lsrs	r2, r3, #5
   80e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80e58:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   80e5a:	6a3b      	ldr	r3, [r7, #32]
   80e5c:	f003 031f 	and.w	r3, r3, #31
   80e60:	2101      	movs	r1, #1
   80e62:	fa01 f303 	lsl.w	r3, r1, r3
   80e66:	61fa      	str	r2, [r7, #28]
   80e68:	61bb      	str	r3, [r7, #24]
   80e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80e6c:	617b      	str	r3, [r7, #20]
   80e6e:	69fb      	ldr	r3, [r7, #28]
   80e70:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80e72:	693b      	ldr	r3, [r7, #16]
   80e74:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e78:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e7c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   80e7e:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   80e80:	697b      	ldr	r3, [r7, #20]
   80e82:	f003 0308 	and.w	r3, r3, #8
   80e86:	2b00      	cmp	r3, #0
   80e88:	d003      	beq.n	80e92 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   80e8a:	68fb      	ldr	r3, [r7, #12]
   80e8c:	69ba      	ldr	r2, [r7, #24]
   80e8e:	665a      	str	r2, [r3, #100]	; 0x64
   80e90:	e002      	b.n	80e98 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   80e92:	68fb      	ldr	r3, [r7, #12]
   80e94:	69ba      	ldr	r2, [r7, #24]
   80e96:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   80e98:	697b      	ldr	r3, [r7, #20]
   80e9a:	f003 0320 	and.w	r3, r3, #32
   80e9e:	2b00      	cmp	r3, #0
   80ea0:	d003      	beq.n	80eaa <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   80ea2:	68fb      	ldr	r3, [r7, #12]
   80ea4:	69ba      	ldr	r2, [r7, #24]
   80ea6:	651a      	str	r2, [r3, #80]	; 0x50
   80ea8:	e002      	b.n	80eb0 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   80eaa:	68fb      	ldr	r3, [r7, #12]
   80eac:	69ba      	ldr	r2, [r7, #24]
   80eae:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   80eb0:	697b      	ldr	r3, [r7, #20]
   80eb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   80eb6:	2b00      	cmp	r3, #0
   80eb8:	d003      	beq.n	80ec2 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   80eba:	68fb      	ldr	r3, [r7, #12]
   80ebc:	69ba      	ldr	r2, [r7, #24]
   80ebe:	621a      	str	r2, [r3, #32]
   80ec0:	e002      	b.n	80ec8 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   80ec2:	68fb      	ldr	r3, [r7, #12]
   80ec4:	69ba      	ldr	r2, [r7, #24]
   80ec6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   80ec8:	697b      	ldr	r3, [r7, #20]
   80eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80ece:	2b00      	cmp	r3, #0
   80ed0:	d004      	beq.n	80edc <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   80ed2:	68fb      	ldr	r3, [r7, #12]
   80ed4:	69ba      	ldr	r2, [r7, #24]
   80ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   80eda:	e003      	b.n	80ee4 <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80edc:	68fb      	ldr	r3, [r7, #12]
   80ede:	69ba      	ldr	r2, [r7, #24]
   80ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80ee4:	697b      	ldr	r3, [r7, #20]
   80ee6:	f003 0301 	and.w	r3, r3, #1
   80eea:	2b00      	cmp	r3, #0
   80eec:	d006      	beq.n	80efc <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   80eee:	68fb      	ldr	r3, [r7, #12]
   80ef0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80ef2:	69bb      	ldr	r3, [r7, #24]
   80ef4:	431a      	orrs	r2, r3
   80ef6:	68fb      	ldr	r3, [r7, #12]
   80ef8:	671a      	str	r2, [r3, #112]	; 0x70
	arch_ioport_set_pin_mode(pin, mode);
}
   80efa:	e006      	b.n	80f0a <ioport_set_pin_mode+0xce>
	} else {
		base->PIO_ABSR &= ~mask;
   80efc:	68fb      	ldr	r3, [r7, #12]
   80efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80f00:	69bb      	ldr	r3, [r7, #24]
   80f02:	43db      	mvns	r3, r3
   80f04:	401a      	ands	r2, r3
   80f06:	68fb      	ldr	r3, [r7, #12]
   80f08:	671a      	str	r2, [r3, #112]	; 0x70
   80f0a:	bf00      	nop
   80f0c:	3734      	adds	r7, #52	; 0x34
   80f0e:	46bd      	mov	sp, r7
   80f10:	bc80      	pop	{r7}
   80f12:	4770      	bx	lr

00080f14 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
   80f14:	b480      	push	{r7}
   80f16:	b08d      	sub	sp, #52	; 0x34
   80f18:	af00      	add	r7, sp, #0
   80f1a:	6078      	str	r0, [r7, #4]
   80f1c:	460b      	mov	r3, r1
   80f1e:	70fb      	strb	r3, [r7, #3]
   80f20:	687b      	ldr	r3, [r7, #4]
   80f22:	62fb      	str	r3, [r7, #44]	; 0x2c
   80f24:	78fb      	ldrb	r3, [r7, #3]
   80f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   80f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80f2c:	627b      	str	r3, [r7, #36]	; 0x24
   80f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f30:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   80f32:	6a3b      	ldr	r3, [r7, #32]
   80f34:	095b      	lsrs	r3, r3, #5
   80f36:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80f38:	69fb      	ldr	r3, [r7, #28]
   80f3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80f3e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80f42:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   80f44:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
   80f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   80f4a:	2b01      	cmp	r3, #1
   80f4c:	d109      	bne.n	80f62 <ioport_set_pin_dir+0x4e>
   80f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80f50:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   80f52:	697b      	ldr	r3, [r7, #20]
   80f54:	f003 031f 	and.w	r3, r3, #31
   80f58:	2201      	movs	r2, #1
   80f5a:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80f5c:	69bb      	ldr	r3, [r7, #24]
   80f5e:	611a      	str	r2, [r3, #16]
   80f60:	e00c      	b.n	80f7c <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   80f62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   80f66:	2b00      	cmp	r3, #0
   80f68:	d108      	bne.n	80f7c <ioport_set_pin_dir+0x68>
   80f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80f6c:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   80f6e:	693b      	ldr	r3, [r7, #16]
   80f70:	f003 031f 	and.w	r3, r3, #31
   80f74:	2201      	movs	r2, #1
   80f76:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80f78:	69bb      	ldr	r3, [r7, #24]
   80f7a:	615a      	str	r2, [r3, #20]
   80f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80f7e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   80f80:	68fb      	ldr	r3, [r7, #12]
   80f82:	f003 031f 	and.w	r3, r3, #31
   80f86:	2201      	movs	r2, #1
   80f88:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80f8a:	69bb      	ldr	r3, [r7, #24]
   80f8c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
   80f90:	bf00      	nop
   80f92:	3734      	adds	r7, #52	; 0x34
   80f94:	46bd      	mov	sp, r7
   80f96:	bc80      	pop	{r7}
   80f98:	4770      	bx	lr

00080f9a <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   80f9a:	b480      	push	{r7}
   80f9c:	b08b      	sub	sp, #44	; 0x2c
   80f9e:	af00      	add	r7, sp, #0
   80fa0:	6078      	str	r0, [r7, #4]
   80fa2:	460b      	mov	r3, r1
   80fa4:	70fb      	strb	r3, [r7, #3]
   80fa6:	687b      	ldr	r3, [r7, #4]
   80fa8:	627b      	str	r3, [r7, #36]	; 0x24
   80faa:	78fb      	ldrb	r3, [r7, #3]
   80fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   80fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80fb2:	61fb      	str	r3, [r7, #28]
   80fb4:	69fb      	ldr	r3, [r7, #28]
   80fb6:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   80fb8:	69bb      	ldr	r3, [r7, #24]
   80fba:	095b      	lsrs	r3, r3, #5
   80fbc:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80fbe:	697b      	ldr	r3, [r7, #20]
   80fc0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80fc4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80fc8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   80fca:	613b      	str	r3, [r7, #16]

	if (level) {
   80fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   80fd0:	2b00      	cmp	r3, #0
   80fd2:	d009      	beq.n	80fe8 <ioport_set_pin_level+0x4e>
   80fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80fd6:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   80fd8:	68fb      	ldr	r3, [r7, #12]
   80fda:	f003 031f 	and.w	r3, r3, #31
   80fde:	2201      	movs	r2, #1
   80fe0:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80fe2:	693b      	ldr	r3, [r7, #16]
   80fe4:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   80fe6:	e008      	b.n	80ffa <ioport_set_pin_level+0x60>
   80fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80fea:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   80fec:	68bb      	ldr	r3, [r7, #8]
   80fee:	f003 031f 	and.w	r3, r3, #31
   80ff2:	2201      	movs	r2, #1
   80ff4:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80ff6:	693b      	ldr	r3, [r7, #16]
   80ff8:	635a      	str	r2, [r3, #52]	; 0x34
   80ffa:	bf00      	nop
   80ffc:	372c      	adds	r7, #44	; 0x2c
   80ffe:	46bd      	mov	sp, r7
   81000:	bc80      	pop	{r7}
   81002:	4770      	bx	lr

00081004 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   81004:	b598      	push	{r3, r4, r7, lr}
   81006:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81008:	4b61      	ldr	r3, [pc, #388]	; (81190 <board_init+0x18c>)
   8100a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8100e:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   81010:	4b60      	ldr	r3, [pc, #384]	; (81194 <board_init+0x190>)
   81012:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   81014:	2101      	movs	r1, #1
   81016:	2063      	movs	r0, #99	; 0x63
   81018:	4b5f      	ldr	r3, [pc, #380]	; (81198 <board_init+0x194>)
   8101a:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   8101c:	2100      	movs	r1, #0
   8101e:	2063      	movs	r0, #99	; 0x63
   81020:	4b5e      	ldr	r3, [pc, #376]	; (8119c <board_init+0x198>)
   81022:	4798      	blx	r3
	ioport_set_pin_dir(LED_S1, IOPORT_DIR_OUTPUT);
   81024:	2101      	movs	r1, #1
   81026:	2062      	movs	r0, #98	; 0x62
   81028:	4b5b      	ldr	r3, [pc, #364]	; (81198 <board_init+0x194>)
   8102a:	4798      	blx	r3
	ioport_set_pin_level(LED_S1, 0);
   8102c:	2100      	movs	r1, #0
   8102e:	2062      	movs	r0, #98	; 0x62
   81030:	4b5a      	ldr	r3, [pc, #360]	; (8119c <board_init+0x198>)
   81032:	4798      	blx	r3
	ioport_set_pin_dir(LED_S2, IOPORT_DIR_OUTPUT);
   81034:	2101      	movs	r1, #1
   81036:	2061      	movs	r0, #97	; 0x61
   81038:	4b57      	ldr	r3, [pc, #348]	; (81198 <board_init+0x194>)
   8103a:	4798      	blx	r3
	ioport_set_pin_level(LED_S2, 0);
   8103c:	2100      	movs	r1, #0
   8103e:	2061      	movs	r0, #97	; 0x61
   81040:	4b56      	ldr	r3, [pc, #344]	; (8119c <board_init+0x198>)
   81042:	4798      	blx	r3
	ioport_set_pin_dir(LED_S3, IOPORT_DIR_OUTPUT);
   81044:	2101      	movs	r1, #1
   81046:	2060      	movs	r0, #96	; 0x60
   81048:	4b53      	ldr	r3, [pc, #332]	; (81198 <board_init+0x194>)
   8104a:	4798      	blx	r3
	ioport_set_pin_level(LED_S3, 0);
   8104c:	2100      	movs	r1, #0
   8104e:	2060      	movs	r0, #96	; 0x60
   81050:	4b52      	ldr	r3, [pc, #328]	; (8119c <board_init+0x198>)
   81052:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI0_MISO, IOPORT_MODE_MUX_A);
   81054:	2100      	movs	r1, #0
   81056:	2019      	movs	r0, #25
   81058:	4b51      	ldr	r3, [pc, #324]	; (811a0 <board_init+0x19c>)
   8105a:	4798      	blx	r3
	ioport_disable_pin(SPI0_MISO);
   8105c:	2019      	movs	r0, #25
   8105e:	4b51      	ldr	r3, [pc, #324]	; (811a4 <board_init+0x1a0>)
   81060:	4798      	blx	r3
	ioport_set_pin_mode(SPI0_MOSI, IOPORT_MODE_MUX_A);
   81062:	2100      	movs	r1, #0
   81064:	201a      	movs	r0, #26
   81066:	4b4e      	ldr	r3, [pc, #312]	; (811a0 <board_init+0x19c>)
   81068:	4798      	blx	r3
	ioport_disable_pin(SPI0_MOSI);
   8106a:	201a      	movs	r0, #26
   8106c:	4b4d      	ldr	r3, [pc, #308]	; (811a4 <board_init+0x1a0>)
   8106e:	4798      	blx	r3
	ioport_set_pin_mode(SPI0_SPCK, IOPORT_MODE_MUX_A);
   81070:	2100      	movs	r1, #0
   81072:	201b      	movs	r0, #27
   81074:	4b4a      	ldr	r3, [pc, #296]	; (811a0 <board_init+0x19c>)
   81076:	4798      	blx	r3
	ioport_disable_pin(SPI0_SPCK);
   81078:	201b      	movs	r0, #27
   8107a:	4b4a      	ldr	r3, [pc, #296]	; (811a4 <board_init+0x1a0>)
   8107c:	4798      	blx	r3
	ioport_set_pin_mode(SPI0_NPCS0, IOPORT_MODE_MUX_A);
   8107e:	2100      	movs	r1, #0
   81080:	201c      	movs	r0, #28
   81082:	4b47      	ldr	r3, [pc, #284]	; (811a0 <board_init+0x19c>)
   81084:	4798      	blx	r3
	ioport_disable_pin(SPI0_NPCS0);
   81086:	201c      	movs	r0, #28
   81088:	4b46      	ldr	r3, [pc, #280]	; (811a4 <board_init+0x1a0>)
   8108a:	4798      	blx	r3
    
    
    
    /* Configure Line Sensor pins */
    ioport_set_pin_mode(LINE1_B, LINE_FLAGS);
   8108c:	2108      	movs	r1, #8
   8108e:	2052      	movs	r0, #82	; 0x52
   81090:	4b43      	ldr	r3, [pc, #268]	; (811a0 <board_init+0x19c>)
   81092:	4798      	blx	r3
    ioport_set_pin_mode(LINE2_B, LINE_FLAGS);
   81094:	2108      	movs	r1, #8
   81096:	205d      	movs	r0, #93	; 0x5d
   81098:	4b41      	ldr	r3, [pc, #260]	; (811a0 <board_init+0x19c>)
   8109a:	4798      	blx	r3
    ioport_set_pin_mode(LINE3_B, LINE_FLAGS);
   8109c:	2108      	movs	r1, #8
   8109e:	204a      	movs	r0, #74	; 0x4a
   810a0:	4b3f      	ldr	r3, [pc, #252]	; (811a0 <board_init+0x19c>)
   810a2:	4798      	blx	r3
    ioport_set_pin_mode(LINE4_B, LINE_FLAGS);
   810a4:	2108      	movs	r1, #8
   810a6:	2055      	movs	r0, #85	; 0x55
   810a8:	4b3d      	ldr	r3, [pc, #244]	; (811a0 <board_init+0x19c>)
   810aa:	4798      	blx	r3
    ioport_set_pin_mode(LINE5_B, LINE_FLAGS);
   810ac:	2108      	movs	r1, #8
   810ae:	2057      	movs	r0, #87	; 0x57
   810b0:	4b3b      	ldr	r3, [pc, #236]	; (811a0 <board_init+0x19c>)
   810b2:	4798      	blx	r3
    ioport_set_pin_mode(LINE6_B, LINE_FLAGS);
   810b4:	2108      	movs	r1, #8
   810b6:	205a      	movs	r0, #90	; 0x5a
   810b8:	4b39      	ldr	r3, [pc, #228]	; (811a0 <board_init+0x19c>)
   810ba:	4798      	blx	r3
    ioport_set_pin_mode(LINE7_B, LINE_FLAGS);
   810bc:	2108      	movs	r1, #8
   810be:	2041      	movs	r0, #65	; 0x41
   810c0:	4b37      	ldr	r3, [pc, #220]	; (811a0 <board_init+0x19c>)
   810c2:	4798      	blx	r3
    ioport_set_pin_mode(LINE8_B, LINE_FLAGS);
   810c4:	2108      	movs	r1, #8
   810c6:	2045      	movs	r0, #69	; 0x45
   810c8:	4b35      	ldr	r3, [pc, #212]	; (811a0 <board_init+0x19c>)
   810ca:	4798      	blx	r3
    ioport_set_pin_mode(LINE9_B, LINE_FLAGS);
   810cc:	2108      	movs	r1, #8
   810ce:	2049      	movs	r0, #73	; 0x49
   810d0:	4b33      	ldr	r3, [pc, #204]	; (811a0 <board_init+0x19c>)
   810d2:	4798      	blx	r3
    ioport_set_pin_mode(LINE10_B, LINE_FLAGS);
   810d4:	2108      	movs	r1, #8
   810d6:	204c      	movs	r0, #76	; 0x4c
   810d8:	4b31      	ldr	r3, [pc, #196]	; (811a0 <board_init+0x19c>)
   810da:	4798      	blx	r3
    ioport_set_pin_mode(LINE11_B, LINE_FLAGS);
   810dc:	2108      	movs	r1, #8
   810de:	204e      	movs	r0, #78	; 0x4e
   810e0:	4b2f      	ldr	r3, [pc, #188]	; (811a0 <board_init+0x19c>)
   810e2:	4798      	blx	r3
    ioport_set_pin_mode(LINE12_B, LINE_FLAGS);
   810e4:	2108      	movs	r1, #8
   810e6:	2050      	movs	r0, #80	; 0x50
   810e8:	4b2d      	ldr	r3, [pc, #180]	; (811a0 <board_init+0x19c>)
   810ea:	4798      	blx	r3
    
    ioport_set_pin_mode(LINE1_W, LINE_FLAGS);
   810ec:	2108      	movs	r1, #8
   810ee:	2051      	movs	r0, #81	; 0x51
   810f0:	4b2b      	ldr	r3, [pc, #172]	; (811a0 <board_init+0x19c>)
   810f2:	4798      	blx	r3
    ioport_set_pin_mode(LINE2_W, LINE_FLAGS);
   810f4:	2108      	movs	r1, #8
   810f6:	2053      	movs	r0, #83	; 0x53
   810f8:	4b29      	ldr	r3, [pc, #164]	; (811a0 <board_init+0x19c>)
   810fa:	4798      	blx	r3
    ioport_set_pin_mode(LINE3_W, LINE_FLAGS);
   810fc:	2108      	movs	r1, #8
   810fe:	205e      	movs	r0, #94	; 0x5e
   81100:	4b27      	ldr	r3, [pc, #156]	; (811a0 <board_init+0x19c>)
   81102:	4798      	blx	r3
    ioport_set_pin_mode(LINE4_W, LINE_FLAGS);
   81104:	2108      	movs	r1, #8
   81106:	2054      	movs	r0, #84	; 0x54
   81108:	4b25      	ldr	r3, [pc, #148]	; (811a0 <board_init+0x19c>)
   8110a:	4798      	blx	r3
    ioport_set_pin_mode(LINE5_W, LINE_FLAGS);
   8110c:	2108      	movs	r1, #8
   8110e:	2056      	movs	r0, #86	; 0x56
   81110:	4b23      	ldr	r3, [pc, #140]	; (811a0 <board_init+0x19c>)
   81112:	4798      	blx	r3
    ioport_set_pin_mode(LINE6_W, LINE_FLAGS);
   81114:	2108      	movs	r1, #8
   81116:	2058      	movs	r0, #88	; 0x58
   81118:	4b21      	ldr	r3, [pc, #132]	; (811a0 <board_init+0x19c>)
   8111a:	4798      	blx	r3
    ioport_set_pin_mode(LINE7_W, LINE_FLAGS);
   8111c:	2108      	movs	r1, #8
   8111e:	205b      	movs	r0, #91	; 0x5b
   81120:	4b1f      	ldr	r3, [pc, #124]	; (811a0 <board_init+0x19c>)
   81122:	4798      	blx	r3
    ioport_set_pin_mode(LINE8_W, LINE_FLAGS);
   81124:	2108      	movs	r1, #8
   81126:	2043      	movs	r0, #67	; 0x43
   81128:	4b1d      	ldr	r3, [pc, #116]	; (811a0 <board_init+0x19c>)
   8112a:	4798      	blx	r3
    ioport_set_pin_mode(LINE9_W, LINE_FLAGS);
   8112c:	2108      	movs	r1, #8
   8112e:	2047      	movs	r0, #71	; 0x47
   81130:	4b1b      	ldr	r3, [pc, #108]	; (811a0 <board_init+0x19c>)
   81132:	4798      	blx	r3
    ioport_set_pin_mode(LINE10_W, LINE_FLAGS);
   81134:	2108      	movs	r1, #8
   81136:	204b      	movs	r0, #75	; 0x4b
   81138:	4b19      	ldr	r3, [pc, #100]	; (811a0 <board_init+0x19c>)
   8113a:	4798      	blx	r3
    ioport_set_pin_mode(LINE11_W, LINE_FLAGS);
   8113c:	2108      	movs	r1, #8
   8113e:	204d      	movs	r0, #77	; 0x4d
   81140:	4b17      	ldr	r3, [pc, #92]	; (811a0 <board_init+0x19c>)
   81142:	4798      	blx	r3
    ioport_set_pin_mode(LINE12_W, LINE_FLAGS);
   81144:	2108      	movs	r1, #8
   81146:	204f      	movs	r0, #79	; 0x4f
   81148:	4b15      	ldr	r3, [pc, #84]	; (811a0 <board_init+0x19c>)
   8114a:	4798      	blx	r3
    
    /* Configure ADC */
    pmc_enable_periph_clk(ID_ADC);
   8114c:	2025      	movs	r0, #37	; 0x25
   8114e:	4b16      	ldr	r3, [pc, #88]	; (811a8 <board_init+0x1a4>)
   81150:	4798      	blx	r3
    adc_init(ADC, sysclk_get_cpu_hz(), 6400000, ADC_STARTUP_TIME_4);
   81152:	4b16      	ldr	r3, [pc, #88]	; (811ac <board_init+0x1a8>)
   81154:	4798      	blx	r3
   81156:	4601      	mov	r1, r0
   81158:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   8115c:	4a14      	ldr	r2, [pc, #80]	; (811b0 <board_init+0x1ac>)
   8115e:	4815      	ldr	r0, [pc, #84]	; (811b4 <board_init+0x1b0>)
   81160:	4c15      	ldr	r4, [pc, #84]	; (811b8 <board_init+0x1b4>)
   81162:	47a0      	blx	r4
    adc_configure_timing(ADC, 1, ADC_SETTLING_TIME_3, 1);
   81164:	2301      	movs	r3, #1
   81166:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   8116a:	2101      	movs	r1, #1
   8116c:	4811      	ldr	r0, [pc, #68]	; (811b4 <board_init+0x1b0>)
   8116e:	4c13      	ldr	r4, [pc, #76]	; (811bc <board_init+0x1b8>)
   81170:	47a0      	blx	r4
    adc_enable_channel(ADC, BATTERY_VOLTAGE);
   81172:	2101      	movs	r1, #1
   81174:	480f      	ldr	r0, [pc, #60]	; (811b4 <board_init+0x1b0>)
   81176:	4b12      	ldr	r3, [pc, #72]	; (811c0 <board_init+0x1bc>)
   81178:	4798      	blx	r3
    adc_enable_channel(ADC, LIGHT_BARRIER_RX);
   8117a:	2102      	movs	r1, #2
   8117c:	480d      	ldr	r0, [pc, #52]	; (811b4 <board_init+0x1b0>)
   8117e:	4b10      	ldr	r3, [pc, #64]	; (811c0 <board_init+0x1bc>)
   81180:	4798      	blx	r3
    adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   81182:	2200      	movs	r2, #0
   81184:	2100      	movs	r1, #0
   81186:	480b      	ldr	r0, [pc, #44]	; (811b4 <board_init+0x1b0>)
   81188:	4b0e      	ldr	r3, [pc, #56]	; (811c4 <board_init+0x1c0>)
   8118a:	4798      	blx	r3
}
   8118c:	bf00      	nop
   8118e:	bd98      	pop	{r3, r4, r7, pc}
   81190:	400e1a50 	.word	0x400e1a50
   81194:	00080dd1 	.word	0x00080dd1
   81198:	00080f15 	.word	0x00080f15
   8119c:	00080f9b 	.word	0x00080f9b
   811a0:	00080e3d 	.word	0x00080e3d
   811a4:	00080df5 	.word	0x00080df5
   811a8:	00080c91 	.word	0x00080c91
   811ac:	00080da1 	.word	0x00080da1
   811b0:	0061a800 	.word	0x0061a800
   811b4:	400c0000 	.word	0x400c0000
   811b8:	00080161 	.word	0x00080161
   811bc:	000801f1 	.word	0x000801f1
   811c0:	00080247 	.word	0x00080247
   811c4:	000801c3 	.word	0x000801c3

000811c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   811c8:	b480      	push	{r7}
   811ca:	af00      	add	r7, sp, #0
	while (1) {
   811cc:	e7fe      	b.n	811cc <Dummy_Handler+0x4>
	...

000811d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   811d0:	b580      	push	{r7, lr}
   811d2:	b082      	sub	sp, #8
   811d4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   811d6:	4b1e      	ldr	r3, [pc, #120]	; (81250 <Reset_Handler+0x80>)
   811d8:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   811da:	4b1e      	ldr	r3, [pc, #120]	; (81254 <Reset_Handler+0x84>)
   811dc:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   811de:	687a      	ldr	r2, [r7, #4]
   811e0:	683b      	ldr	r3, [r7, #0]
   811e2:	429a      	cmp	r2, r3
   811e4:	d00c      	beq.n	81200 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   811e6:	e007      	b.n	811f8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   811e8:	683b      	ldr	r3, [r7, #0]
   811ea:	1d1a      	adds	r2, r3, #4
   811ec:	603a      	str	r2, [r7, #0]
   811ee:	687a      	ldr	r2, [r7, #4]
   811f0:	1d11      	adds	r1, r2, #4
   811f2:	6079      	str	r1, [r7, #4]
   811f4:	6812      	ldr	r2, [r2, #0]
   811f6:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   811f8:	683b      	ldr	r3, [r7, #0]
   811fa:	4a17      	ldr	r2, [pc, #92]	; (81258 <Reset_Handler+0x88>)
   811fc:	4293      	cmp	r3, r2
   811fe:	d3f3      	bcc.n	811e8 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81200:	4b16      	ldr	r3, [pc, #88]	; (8125c <Reset_Handler+0x8c>)
   81202:	603b      	str	r3, [r7, #0]
   81204:	e004      	b.n	81210 <Reset_Handler+0x40>
		*pDest++ = 0;
   81206:	683b      	ldr	r3, [r7, #0]
   81208:	1d1a      	adds	r2, r3, #4
   8120a:	603a      	str	r2, [r7, #0]
   8120c:	2200      	movs	r2, #0
   8120e:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   81210:	683b      	ldr	r3, [r7, #0]
   81212:	4a13      	ldr	r2, [pc, #76]	; (81260 <Reset_Handler+0x90>)
   81214:	4293      	cmp	r3, r2
   81216:	d3f6      	bcc.n	81206 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   81218:	4b12      	ldr	r3, [pc, #72]	; (81264 <Reset_Handler+0x94>)
   8121a:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8121c:	4a12      	ldr	r2, [pc, #72]	; (81268 <Reset_Handler+0x98>)
   8121e:	687b      	ldr	r3, [r7, #4]
   81220:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   81224:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81228:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8122a:	687b      	ldr	r3, [r7, #4]
   8122c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   81230:	d309      	bcc.n	81246 <Reset_Handler+0x76>
   81232:	687b      	ldr	r3, [r7, #4]
   81234:	4a0d      	ldr	r2, [pc, #52]	; (8126c <Reset_Handler+0x9c>)
   81236:	4293      	cmp	r3, r2
   81238:	d805      	bhi.n	81246 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8123a:	4a0b      	ldr	r2, [pc, #44]	; (81268 <Reset_Handler+0x98>)
   8123c:	4b0a      	ldr	r3, [pc, #40]	; (81268 <Reset_Handler+0x98>)
   8123e:	689b      	ldr	r3, [r3, #8]
   81240:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81244:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81246:	4b0a      	ldr	r3, [pc, #40]	; (81270 <Reset_Handler+0xa0>)
   81248:	4798      	blx	r3

	/* Branch to main function */
	main();
   8124a:	4b0a      	ldr	r3, [pc, #40]	; (81274 <Reset_Handler+0xa4>)
   8124c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8124e:	e7fe      	b.n	8124e <Reset_Handler+0x7e>
   81250:	00081b90 	.word	0x00081b90
   81254:	20070000 	.word	0x20070000
   81258:	200705bc 	.word	0x200705bc
   8125c:	200705bc 	.word	0x200705bc
   81260:	20070618 	.word	0x20070618
   81264:	00080000 	.word	0x00080000
   81268:	e000ed00 	.word	0xe000ed00
   8126c:	200fffff 	.word	0x200fffff
   81270:	000819f9 	.word	0x000819f9
   81274:	000818c9 	.word	0x000818c9

00081278 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   81278:	b480      	push	{r7}
   8127a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8127c:	4b57      	ldr	r3, [pc, #348]	; (813dc <SystemCoreClockUpdate+0x164>)
   8127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81280:	f003 0303 	and.w	r3, r3, #3
   81284:	2b03      	cmp	r3, #3
   81286:	f200 808a 	bhi.w	8139e <SystemCoreClockUpdate+0x126>
   8128a:	a201      	add	r2, pc, #4	; (adr r2, 81290 <SystemCoreClockUpdate+0x18>)
   8128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81290:	000812a1 	.word	0x000812a1
   81294:	000812c1 	.word	0x000812c1
   81298:	00081311 	.word	0x00081311
   8129c:	00081311 	.word	0x00081311
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   812a0:	4b4f      	ldr	r3, [pc, #316]	; (813e0 <SystemCoreClockUpdate+0x168>)
   812a2:	695b      	ldr	r3, [r3, #20]
   812a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   812a8:	2b00      	cmp	r3, #0
   812aa:	d004      	beq.n	812b6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   812ac:	4b4d      	ldr	r3, [pc, #308]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   812ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   812b2:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   812b4:	e073      	b.n	8139e <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   812b6:	4b4b      	ldr	r3, [pc, #300]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   812b8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   812bc:	601a      	str	r2, [r3, #0]
		break;
   812be:	e06e      	b.n	8139e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   812c0:	4b46      	ldr	r3, [pc, #280]	; (813dc <SystemCoreClockUpdate+0x164>)
   812c2:	6a1b      	ldr	r3, [r3, #32]
   812c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   812c8:	2b00      	cmp	r3, #0
   812ca:	d003      	beq.n	812d4 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   812cc:	4b45      	ldr	r3, [pc, #276]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   812ce:	4a46      	ldr	r2, [pc, #280]	; (813e8 <SystemCoreClockUpdate+0x170>)
   812d0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   812d2:	e064      	b.n	8139e <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   812d4:	4b43      	ldr	r3, [pc, #268]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   812d6:	4a45      	ldr	r2, [pc, #276]	; (813ec <SystemCoreClockUpdate+0x174>)
   812d8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   812da:	4b40      	ldr	r3, [pc, #256]	; (813dc <SystemCoreClockUpdate+0x164>)
   812dc:	6a1b      	ldr	r3, [r3, #32]
   812de:	f003 0370 	and.w	r3, r3, #112	; 0x70
   812e2:	2b10      	cmp	r3, #16
   812e4:	d004      	beq.n	812f0 <SystemCoreClockUpdate+0x78>
   812e6:	2b20      	cmp	r3, #32
   812e8:	d008      	beq.n	812fc <SystemCoreClockUpdate+0x84>
   812ea:	2b00      	cmp	r3, #0
   812ec:	d00e      	beq.n	8130c <SystemCoreClockUpdate+0x94>
				break;
   812ee:	e00e      	b.n	8130e <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   812f0:	4b3c      	ldr	r3, [pc, #240]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   812f2:	681b      	ldr	r3, [r3, #0]
   812f4:	005b      	lsls	r3, r3, #1
   812f6:	4a3b      	ldr	r2, [pc, #236]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   812f8:	6013      	str	r3, [r2, #0]
				break;
   812fa:	e008      	b.n	8130e <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   812fc:	4b39      	ldr	r3, [pc, #228]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   812fe:	681a      	ldr	r2, [r3, #0]
   81300:	4613      	mov	r3, r2
   81302:	005b      	lsls	r3, r3, #1
   81304:	4413      	add	r3, r2
   81306:	4a37      	ldr	r2, [pc, #220]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   81308:	6013      	str	r3, [r2, #0]
				break;
   8130a:	e000      	b.n	8130e <SystemCoreClockUpdate+0x96>
				break;
   8130c:	bf00      	nop
		break;
   8130e:	e046      	b.n	8139e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81310:	4b32      	ldr	r3, [pc, #200]	; (813dc <SystemCoreClockUpdate+0x164>)
   81312:	6a1b      	ldr	r3, [r3, #32]
   81314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81318:	2b00      	cmp	r3, #0
   8131a:	d003      	beq.n	81324 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8131c:	4b31      	ldr	r3, [pc, #196]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   8131e:	4a32      	ldr	r2, [pc, #200]	; (813e8 <SystemCoreClockUpdate+0x170>)
   81320:	601a      	str	r2, [r3, #0]
   81322:	e01c      	b.n	8135e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81324:	4b2f      	ldr	r3, [pc, #188]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   81326:	4a31      	ldr	r2, [pc, #196]	; (813ec <SystemCoreClockUpdate+0x174>)
   81328:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8132a:	4b2c      	ldr	r3, [pc, #176]	; (813dc <SystemCoreClockUpdate+0x164>)
   8132c:	6a1b      	ldr	r3, [r3, #32]
   8132e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81332:	2b10      	cmp	r3, #16
   81334:	d004      	beq.n	81340 <SystemCoreClockUpdate+0xc8>
   81336:	2b20      	cmp	r3, #32
   81338:	d008      	beq.n	8134c <SystemCoreClockUpdate+0xd4>
   8133a:	2b00      	cmp	r3, #0
   8133c:	d00e      	beq.n	8135c <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8133e:	e00e      	b.n	8135e <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   81340:	4b28      	ldr	r3, [pc, #160]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   81342:	681b      	ldr	r3, [r3, #0]
   81344:	005b      	lsls	r3, r3, #1
   81346:	4a27      	ldr	r2, [pc, #156]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   81348:	6013      	str	r3, [r2, #0]
				break;
   8134a:	e008      	b.n	8135e <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   8134c:	4b25      	ldr	r3, [pc, #148]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   8134e:	681a      	ldr	r2, [r3, #0]
   81350:	4613      	mov	r3, r2
   81352:	005b      	lsls	r3, r3, #1
   81354:	4413      	add	r3, r2
   81356:	4a23      	ldr	r2, [pc, #140]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   81358:	6013      	str	r3, [r2, #0]
				break;
   8135a:	e000      	b.n	8135e <SystemCoreClockUpdate+0xe6>
				break;
   8135c:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8135e:	4b1f      	ldr	r3, [pc, #124]	; (813dc <SystemCoreClockUpdate+0x164>)
   81360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81362:	f003 0303 	and.w	r3, r3, #3
   81366:	2b02      	cmp	r3, #2
   81368:	d115      	bne.n	81396 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8136a:	4b1c      	ldr	r3, [pc, #112]	; (813dc <SystemCoreClockUpdate+0x164>)
   8136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8136e:	0c1b      	lsrs	r3, r3, #16
   81370:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   81374:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81376:	4a1b      	ldr	r2, [pc, #108]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   81378:	6812      	ldr	r2, [r2, #0]
   8137a:	fb02 f303 	mul.w	r3, r2, r3
   8137e:	4a19      	ldr	r2, [pc, #100]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   81380:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81382:	4b16      	ldr	r3, [pc, #88]	; (813dc <SystemCoreClockUpdate+0x164>)
   81384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   81386:	b2db      	uxtb	r3, r3
   81388:	4a16      	ldr	r2, [pc, #88]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   8138a:	6812      	ldr	r2, [r2, #0]
   8138c:	fbb2 f3f3 	udiv	r3, r2, r3
   81390:	4a14      	ldr	r2, [pc, #80]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   81392:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   81394:	e002      	b.n	8139c <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81396:	4b13      	ldr	r3, [pc, #76]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   81398:	4a15      	ldr	r2, [pc, #84]	; (813f0 <SystemCoreClockUpdate+0x178>)
   8139a:	601a      	str	r2, [r3, #0]
		break;
   8139c:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8139e:	4b0f      	ldr	r3, [pc, #60]	; (813dc <SystemCoreClockUpdate+0x164>)
   813a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   813a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   813a6:	2b70      	cmp	r3, #112	; 0x70
   813a8:	d108      	bne.n	813bc <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   813aa:	4b0e      	ldr	r3, [pc, #56]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   813ac:	681b      	ldr	r3, [r3, #0]
   813ae:	4a11      	ldr	r2, [pc, #68]	; (813f4 <SystemCoreClockUpdate+0x17c>)
   813b0:	fba2 2303 	umull	r2, r3, r2, r3
   813b4:	085b      	lsrs	r3, r3, #1
   813b6:	4a0b      	ldr	r2, [pc, #44]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   813b8:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   813ba:	e00a      	b.n	813d2 <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   813bc:	4b07      	ldr	r3, [pc, #28]	; (813dc <SystemCoreClockUpdate+0x164>)
   813be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   813c0:	091b      	lsrs	r3, r3, #4
   813c2:	f003 0307 	and.w	r3, r3, #7
   813c6:	4a07      	ldr	r2, [pc, #28]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   813c8:	6812      	ldr	r2, [r2, #0]
   813ca:	fa22 f303 	lsr.w	r3, r2, r3
   813ce:	4a05      	ldr	r2, [pc, #20]	; (813e4 <SystemCoreClockUpdate+0x16c>)
   813d0:	6013      	str	r3, [r2, #0]
}
   813d2:	bf00      	nop
   813d4:	46bd      	mov	sp, r7
   813d6:	bc80      	pop	{r7}
   813d8:	4770      	bx	lr
   813da:	bf00      	nop
   813dc:	400e0600 	.word	0x400e0600
   813e0:	400e1a10 	.word	0x400e1a10
   813e4:	2007018c 	.word	0x2007018c
   813e8:	00b71b00 	.word	0x00b71b00
   813ec:	003d0900 	.word	0x003d0900
   813f0:	0e4e1c00 	.word	0x0e4e1c00
   813f4:	aaaaaaab 	.word	0xaaaaaaab

000813f8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   813f8:	b480      	push	{r7}
   813fa:	b083      	sub	sp, #12
   813fc:	af00      	add	r7, sp, #0
   813fe:	4603      	mov	r3, r0
   81400:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81402:	4908      	ldr	r1, [pc, #32]	; (81424 <NVIC_EnableIRQ+0x2c>)
   81404:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81408:	095b      	lsrs	r3, r3, #5
   8140a:	79fa      	ldrb	r2, [r7, #7]
   8140c:	f002 021f 	and.w	r2, r2, #31
   81410:	2001      	movs	r0, #1
   81412:	fa00 f202 	lsl.w	r2, r0, r2
   81416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8141a:	bf00      	nop
   8141c:	370c      	adds	r7, #12
   8141e:	46bd      	mov	sp, r7
   81420:	bc80      	pop	{r7}
   81422:	4770      	bx	lr
   81424:	e000e100 	.word	0xe000e100

00081428 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   81428:	b480      	push	{r7}
   8142a:	b083      	sub	sp, #12
   8142c:	af00      	add	r7, sp, #0
   8142e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   81430:	687b      	ldr	r3, [r7, #4]
   81432:	2280      	movs	r2, #128	; 0x80
   81434:	601a      	str	r2, [r3, #0]
}
   81436:	bf00      	nop
   81438:	370c      	adds	r7, #12
   8143a:	46bd      	mov	sp, r7
   8143c:	bc80      	pop	{r7}
   8143e:	4770      	bx	lr

00081440 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   81440:	b480      	push	{r7}
   81442:	b083      	sub	sp, #12
   81444:	af00      	add	r7, sp, #0
   81446:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   81448:	687b      	ldr	r3, [r7, #4]
   8144a:	2201      	movs	r2, #1
   8144c:	601a      	str	r2, [r3, #0]
}
   8144e:	bf00      	nop
   81450:	370c      	adds	r7, #12
   81452:	46bd      	mov	sp, r7
   81454:	bc80      	pop	{r7}
   81456:	4770      	bx	lr

00081458 <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
   81458:	b480      	push	{r7}
   8145a:	b083      	sub	sp, #12
   8145c:	af00      	add	r7, sp, #0
   8145e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   81460:	687b      	ldr	r3, [r7, #4]
   81462:	2202      	movs	r2, #2
   81464:	601a      	str	r2, [r3, #0]
}
   81466:	bf00      	nop
   81468:	370c      	adds	r7, #12
   8146a:	46bd      	mov	sp, r7
   8146c:	bc80      	pop	{r7}
   8146e:	4770      	bx	lr

00081470 <spi_set_slave_mode>:
 * \brief Set SPI to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
   81470:	b480      	push	{r7}
   81472:	b083      	sub	sp, #12
   81474:	af00      	add	r7, sp, #0
   81476:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
   81478:	687b      	ldr	r3, [r7, #4]
   8147a:	685b      	ldr	r3, [r3, #4]
   8147c:	f023 0201 	bic.w	r2, r3, #1
   81480:	687b      	ldr	r3, [r7, #4]
   81482:	605a      	str	r2, [r3, #4]
}
   81484:	bf00      	nop
   81486:	370c      	adds	r7, #12
   81488:	46bd      	mov	sp, r7
   8148a:	bc80      	pop	{r7}
   8148c:	4770      	bx	lr

0008148e <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   8148e:	b480      	push	{r7}
   81490:	b083      	sub	sp, #12
   81492:	af00      	add	r7, sp, #0
   81494:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   81496:	687b      	ldr	r3, [r7, #4]
   81498:	685b      	ldr	r3, [r3, #4]
   8149a:	f043 0210 	orr.w	r2, r3, #16
   8149e:	687b      	ldr	r3, [r7, #4]
   814a0:	605a      	str	r2, [r3, #4]
}
   814a2:	bf00      	nop
   814a4:	370c      	adds	r7, #12
   814a6:	46bd      	mov	sp, r7
   814a8:	bc80      	pop	{r7}
   814aa:	4770      	bx	lr

000814ac <spi_init>:

static Bool received_data = 0;
uint8_t sens_buf[sizeof(mts)];

void spi_init(void)
{
   814ac:	b580      	push	{r7, lr}
   814ae:	af00      	add	r7, sp, #0
    configure_dmac();
   814b0:	4b02      	ldr	r3, [pc, #8]	; (814bc <spi_init+0x10>)
   814b2:	4798      	blx	r3
    spi_slave_initialize();
   814b4:	4b02      	ldr	r3, [pc, #8]	; (814c0 <spi_init+0x14>)
   814b6:	4798      	blx	r3
}
   814b8:	bf00      	nop
   814ba:	bd80      	pop	{r7, pc}
   814bc:	00081611 	.word	0x00081611
   814c0:	0008155d 	.word	0x0008155d

000814c4 <spi_slave_transfer>:

void spi_slave_transfer(void *p_buf, uint32_t ul_size)
{
   814c4:	b580      	push	{r7, lr}
   814c6:	b088      	sub	sp, #32
   814c8:	af00      	add	r7, sp, #0
   814ca:	6078      	str	r0, [r7, #4]
   814cc:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    dmac_channel_disable(DMAC, 1);
   814ce:	2101      	movs	r1, #1
   814d0:	481a      	ldr	r0, [pc, #104]	; (8153c <spi_slave_transfer+0x78>)
   814d2:	4b1b      	ldr	r3, [pc, #108]	; (81540 <spi_slave_transfer+0x7c>)
   814d4:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   814d6:	687b      	ldr	r3, [r7, #4]
   814d8:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & SPI0->SPI_TDR;
   814da:	4b1a      	ldr	r3, [pc, #104]	; (81544 <spi_slave_transfer+0x80>)
   814dc:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   814de:	683b      	ldr	r3, [r7, #0]
   814e0:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   814e2:	4b19      	ldr	r3, [pc, #100]	; (81548 <spi_slave_transfer+0x84>)
   814e4:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   814e6:	2300      	movs	r3, #0
   814e8:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   814ea:	f107 030c 	add.w	r3, r7, #12
   814ee:	461a      	mov	r2, r3
   814f0:	2101      	movs	r1, #1
   814f2:	4812      	ldr	r0, [pc, #72]	; (8153c <spi_slave_transfer+0x78>)
   814f4:	4b15      	ldr	r3, [pc, #84]	; (8154c <spi_slave_transfer+0x88>)
   814f6:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   814f8:	2101      	movs	r1, #1
   814fa:	4810      	ldr	r0, [pc, #64]	; (8153c <spi_slave_transfer+0x78>)
   814fc:	4b14      	ldr	r3, [pc, #80]	; (81550 <spi_slave_transfer+0x8c>)
   814fe:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   81500:	2100      	movs	r1, #0
   81502:	480e      	ldr	r0, [pc, #56]	; (8153c <spi_slave_transfer+0x78>)
   81504:	4b0e      	ldr	r3, [pc, #56]	; (81540 <spi_slave_transfer+0x7c>)
   81506:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & SPI0->SPI_RDR;
   81508:	4b12      	ldr	r3, [pc, #72]	; (81554 <spi_slave_transfer+0x90>)
   8150a:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   8150c:	687b      	ldr	r3, [r7, #4]
   8150e:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   81510:	683b      	ldr	r3, [r7, #0]
   81512:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   81514:	4b10      	ldr	r3, [pc, #64]	; (81558 <spi_slave_transfer+0x94>)
   81516:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   81518:	2300      	movs	r3, #0
   8151a:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   8151c:	f107 030c 	add.w	r3, r7, #12
   81520:	461a      	mov	r2, r3
   81522:	2100      	movs	r1, #0
   81524:	4805      	ldr	r0, [pc, #20]	; (8153c <spi_slave_transfer+0x78>)
   81526:	4b09      	ldr	r3, [pc, #36]	; (8154c <spi_slave_transfer+0x88>)
   81528:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   8152a:	2100      	movs	r1, #0
   8152c:	4803      	ldr	r0, [pc, #12]	; (8153c <spi_slave_transfer+0x78>)
   8152e:	4b08      	ldr	r3, [pc, #32]	; (81550 <spi_slave_transfer+0x8c>)
   81530:	4798      	blx	r3
}
   81532:	bf00      	nop
   81534:	3720      	adds	r7, #32
   81536:	46bd      	mov	sp, r7
   81538:	bd80      	pop	{r7, pc}
   8153a:	bf00      	nop
   8153c:	400c4000 	.word	0x400c4000
   81540:	00080567 	.word	0x00080567
   81544:	4000800c 	.word	0x4000800c
   81548:	20310000 	.word	0x20310000
   8154c:	00080681 	.word	0x00080681
   81550:	00080549 	.word	0x00080549
   81554:	40008008 	.word	0x40008008
   81558:	02510000 	.word	0x02510000

0008155c <spi_slave_initialize>:

void spi_slave_initialize(void)
{
   8155c:	b580      	push	{r7, lr}
   8155e:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   81560:	2101      	movs	r1, #1
   81562:	481b      	ldr	r0, [pc, #108]	; (815d0 <spi_slave_initialize+0x74>)
   81564:	4b1b      	ldr	r3, [pc, #108]	; (815d4 <spi_slave_initialize+0x78>)
   81566:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   81568:	2100      	movs	r1, #0
   8156a:	4819      	ldr	r0, [pc, #100]	; (815d0 <spi_slave_initialize+0x74>)
   8156c:	4b19      	ldr	r3, [pc, #100]	; (815d4 <spi_slave_initialize+0x78>)
   8156e:	4798      	blx	r3
    pmc_enable_periph_clk(ID_SPI0);
   81570:	2018      	movs	r0, #24
   81572:	4b19      	ldr	r3, [pc, #100]	; (815d8 <spi_slave_initialize+0x7c>)
   81574:	4798      	blx	r3
    spi_disable(SPI0);
   81576:	4819      	ldr	r0, [pc, #100]	; (815dc <spi_slave_initialize+0x80>)
   81578:	4b19      	ldr	r3, [pc, #100]	; (815e0 <spi_slave_initialize+0x84>)
   8157a:	4798      	blx	r3
    spi_reset(SPI0);
   8157c:	4817      	ldr	r0, [pc, #92]	; (815dc <spi_slave_initialize+0x80>)
   8157e:	4b19      	ldr	r3, [pc, #100]	; (815e4 <spi_slave_initialize+0x88>)
   81580:	4798      	blx	r3
    spi_set_slave_mode(SPI0);
   81582:	4816      	ldr	r0, [pc, #88]	; (815dc <spi_slave_initialize+0x80>)
   81584:	4b18      	ldr	r3, [pc, #96]	; (815e8 <spi_slave_initialize+0x8c>)
   81586:	4798      	blx	r3
    spi_disable_mode_fault_detect(SPI0);
   81588:	4814      	ldr	r0, [pc, #80]	; (815dc <spi_slave_initialize+0x80>)
   8158a:	4b18      	ldr	r3, [pc, #96]	; (815ec <spi_slave_initialize+0x90>)
   8158c:	4798      	blx	r3
    spi_set_peripheral_chip_select_value(SPI0, spi_get_pcs(0));
   8158e:	210e      	movs	r1, #14
   81590:	4812      	ldr	r0, [pc, #72]	; (815dc <spi_slave_initialize+0x80>)
   81592:	4b17      	ldr	r3, [pc, #92]	; (815f0 <spi_slave_initialize+0x94>)
   81594:	4798      	blx	r3
    spi_set_clock_polarity(SPI0, 0, 0);
   81596:	2200      	movs	r2, #0
   81598:	2100      	movs	r1, #0
   8159a:	4810      	ldr	r0, [pc, #64]	; (815dc <spi_slave_initialize+0x80>)
   8159c:	4b15      	ldr	r3, [pc, #84]	; (815f4 <spi_slave_initialize+0x98>)
   8159e:	4798      	blx	r3
    spi_set_clock_phase(SPI0, 0, 1);
   815a0:	2201      	movs	r2, #1
   815a2:	2100      	movs	r1, #0
   815a4:	480d      	ldr	r0, [pc, #52]	; (815dc <spi_slave_initialize+0x80>)
   815a6:	4b14      	ldr	r3, [pc, #80]	; (815f8 <spi_slave_initialize+0x9c>)
   815a8:	4798      	blx	r3
    spi_set_bits_per_transfer(SPI0, 0, SPI_CSR_BITS_8_BIT);
   815aa:	2200      	movs	r2, #0
   815ac:	2100      	movs	r1, #0
   815ae:	480b      	ldr	r0, [pc, #44]	; (815dc <spi_slave_initialize+0x80>)
   815b0:	4b12      	ldr	r3, [pc, #72]	; (815fc <spi_slave_initialize+0xa0>)
   815b2:	4798      	blx	r3
    spi_enable(SPI0);
   815b4:	4809      	ldr	r0, [pc, #36]	; (815dc <spi_slave_initialize+0x80>)
   815b6:	4b12      	ldr	r3, [pc, #72]	; (81600 <spi_slave_initialize+0xa4>)
   815b8:	4798      	blx	r3

    /* Start waiting command. */
    memcpy(&sens_buf, &stm, sizeof(stm));
   815ba:	4b12      	ldr	r3, [pc, #72]	; (81604 <spi_slave_initialize+0xa8>)
   815bc:	881b      	ldrh	r3, [r3, #0]
   815be:	b29b      	uxth	r3, r3
   815c0:	4a11      	ldr	r2, [pc, #68]	; (81608 <spi_slave_initialize+0xac>)
   815c2:	8013      	strh	r3, [r2, #0]
    spi_slave_transfer(&sens_buf, sizeof(sens_buf));
   815c4:	2102      	movs	r1, #2
   815c6:	4810      	ldr	r0, [pc, #64]	; (81608 <spi_slave_initialize+0xac>)
   815c8:	4b10      	ldr	r3, [pc, #64]	; (8160c <spi_slave_initialize+0xb0>)
   815ca:	4798      	blx	r3
}
   815cc:	bf00      	nop
   815ce:	bd80      	pop	{r7, pc}
   815d0:	400c4000 	.word	0x400c4000
   815d4:	00080567 	.word	0x00080567
   815d8:	00080c91 	.word	0x00080c91
   815dc:	40008000 	.word	0x40008000
   815e0:	00081459 	.word	0x00081459
   815e4:	00081429 	.word	0x00081429
   815e8:	00081471 	.word	0x00081471
   815ec:	0008148f 	.word	0x0008148f
   815f0:	00080389 	.word	0x00080389
   815f4:	000803bb 	.word	0x000803bb
   815f8:	00080409 	.word	0x00080409
   815fc:	00080457 	.word	0x00080457
   81600:	00081441 	.word	0x00081441
   81604:	200705f0 	.word	0x200705f0
   81608:	200705e8 	.word	0x200705e8
   8160c:	000814c5 	.word	0x000814c5

00081610 <configure_dmac>:

void configure_dmac(void)
{
   81610:	b580      	push	{r7, lr}
   81612:	b082      	sub	sp, #8
   81614:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   81616:	2027      	movs	r0, #39	; 0x27
   81618:	4b18      	ldr	r3, [pc, #96]	; (8167c <configure_dmac+0x6c>)
   8161a:	4798      	blx	r3
    dmac_init(DMAC);
   8161c:	4818      	ldr	r0, [pc, #96]	; (81680 <configure_dmac+0x70>)
   8161e:	4b19      	ldr	r3, [pc, #100]	; (81684 <configure_dmac+0x74>)
   81620:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   81622:	2110      	movs	r1, #16
   81624:	4816      	ldr	r0, [pc, #88]	; (81680 <configure_dmac+0x70>)
   81626:	4b18      	ldr	r3, [pc, #96]	; (81688 <configure_dmac+0x78>)
   81628:	4798      	blx	r3
    dmac_enable(DMAC);
   8162a:	4815      	ldr	r0, [pc, #84]	; (81680 <configure_dmac+0x70>)
   8162c:	4b17      	ldr	r3, [pc, #92]	; (8168c <configure_dmac+0x7c>)
   8162e:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   81630:	2300      	movs	r3, #0
   81632:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(2) |
   81634:	687b      	ldr	r3, [r7, #4]
   81636:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   8163a:	f043 0302 	orr.w	r3, r3, #2
   8163e:	607b      	str	r3, [r7, #4]
    DMAC_CFG_SRC_H2SEL |
    DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   81640:	687a      	ldr	r2, [r7, #4]
   81642:	2100      	movs	r1, #0
   81644:	480e      	ldr	r0, [pc, #56]	; (81680 <configure_dmac+0x70>)
   81646:	4b12      	ldr	r3, [pc, #72]	; (81690 <configure_dmac+0x80>)
   81648:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   8164a:	2300      	movs	r3, #0
   8164c:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(1) |
   8164e:	687b      	ldr	r3, [r7, #4]
   81650:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   81654:	f043 0310 	orr.w	r3, r3, #16
   81658:	607b      	str	r3, [r7, #4]
    DMAC_CFG_DST_H2SEL |
    DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   8165a:	687a      	ldr	r2, [r7, #4]
   8165c:	2101      	movs	r1, #1
   8165e:	4808      	ldr	r0, [pc, #32]	; (81680 <configure_dmac+0x70>)
   81660:	4b0b      	ldr	r3, [pc, #44]	; (81690 <configure_dmac+0x80>)
   81662:	4798      	blx	r3

    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   81664:	2027      	movs	r0, #39	; 0x27
   81666:	4b0b      	ldr	r3, [pc, #44]	; (81694 <configure_dmac+0x84>)
   81668:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   8166a:	2101      	movs	r1, #1
   8166c:	4804      	ldr	r0, [pc, #16]	; (81680 <configure_dmac+0x70>)
   8166e:	4b0a      	ldr	r3, [pc, #40]	; (81698 <configure_dmac+0x88>)
   81670:	4798      	blx	r3
}
   81672:	bf00      	nop
   81674:	3708      	adds	r7, #8
   81676:	46bd      	mov	sp, r7
   81678:	bd80      	pop	{r7, pc}
   8167a:	bf00      	nop
   8167c:	00080c91 	.word	0x00080c91
   81680:	400c4000 	.word	0x400c4000
   81684:	000804a1 	.word	0x000804a1
   81688:	000804bd 	.word	0x000804bd
   8168c:	000804e3 	.word	0x000804e3
   81690:	00080657 	.word	0x00080657
   81694:	000813f9 	.word	0x000813f9
   81698:	00080519 	.word	0x00080519

0008169c <DMAC_Handler>:

void DMAC_Handler(void)
{
   8169c:	b580      	push	{r7, lr}
   8169e:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   816a0:	480a      	ldr	r0, [pc, #40]	; (816cc <DMAC_Handler+0x30>)
   816a2:	4b0b      	ldr	r3, [pc, #44]	; (816d0 <DMAC_Handler+0x34>)
   816a4:	4798      	blx	r3
   816a6:	4602      	mov	r2, r0
   816a8:	4b0a      	ldr	r3, [pc, #40]	; (816d4 <DMAC_Handler+0x38>)
   816aa:	601a      	str	r2, [r3, #0]
    
    if (ul_status & 1)
   816ac:	4b09      	ldr	r3, [pc, #36]	; (816d4 <DMAC_Handler+0x38>)
   816ae:	681b      	ldr	r3, [r3, #0]
   816b0:	f003 0301 	and.w	r3, r3, #1
   816b4:	2b00      	cmp	r3, #0
   816b6:	d007      	beq.n	816c8 <DMAC_Handler+0x2c>
    {
        memcpy(&mts, &sens_buf, sizeof(mts));
   816b8:	4b07      	ldr	r3, [pc, #28]	; (816d8 <DMAC_Handler+0x3c>)
   816ba:	881b      	ldrh	r3, [r3, #0]
   816bc:	b29b      	uxth	r3, r3
   816be:	4a07      	ldr	r2, [pc, #28]	; (816dc <DMAC_Handler+0x40>)
   816c0:	8013      	strh	r3, [r2, #0]
        received_data = true;
   816c2:	4b07      	ldr	r3, [pc, #28]	; (816e0 <DMAC_Handler+0x44>)
   816c4:	2201      	movs	r2, #1
   816c6:	701a      	strb	r2, [r3, #0]
    }
}
   816c8:	bf00      	nop
   816ca:	bd80      	pop	{r7, pc}
   816cc:	400c4000 	.word	0x400c4000
   816d0:	00080533 	.word	0x00080533
   816d4:	200705e4 	.word	0x200705e4
   816d8:	200705e8 	.word	0x200705e8
   816dc:	200705ec 	.word	0x200705ec
   816e0:	200705e0 	.word	0x200705e0

000816e4 <PrepareValuesToSend>:

void PrepareValuesToSend(void)
{
   816e4:	b580      	push	{r7, lr}
   816e6:	af00      	add	r7, sp, #0
    if (received_data)
   816e8:	4b08      	ldr	r3, [pc, #32]	; (8170c <PrepareValuesToSend+0x28>)
   816ea:	781b      	ldrb	r3, [r3, #0]
   816ec:	2b00      	cmp	r3, #0
   816ee:	d00b      	beq.n	81708 <PrepareValuesToSend+0x24>
    {
        received_data = false;
   816f0:	4b06      	ldr	r3, [pc, #24]	; (8170c <PrepareValuesToSend+0x28>)
   816f2:	2200      	movs	r2, #0
   816f4:	701a      	strb	r2, [r3, #0]
        memcpy(&sens_buf, &stm, sizeof(stm));
   816f6:	4b06      	ldr	r3, [pc, #24]	; (81710 <PrepareValuesToSend+0x2c>)
   816f8:	881b      	ldrh	r3, [r3, #0]
   816fa:	b29b      	uxth	r3, r3
   816fc:	4a05      	ldr	r2, [pc, #20]	; (81714 <PrepareValuesToSend+0x30>)
   816fe:	8013      	strh	r3, [r2, #0]
        spi_slave_transfer(&sens_buf, sizeof(sens_buf));
   81700:	2102      	movs	r1, #2
   81702:	4804      	ldr	r0, [pc, #16]	; (81714 <PrepareValuesToSend+0x30>)
   81704:	4b04      	ldr	r3, [pc, #16]	; (81718 <PrepareValuesToSend+0x34>)
   81706:	4798      	blx	r3
    }
   81708:	bf00      	nop
   8170a:	bd80      	pop	{r7, pc}
   8170c:	200705e0 	.word	0x200705e0
   81710:	200705f0 	.word	0x200705f0
   81714:	200705e8 	.word	0x200705e8
   81718:	000814c5 	.word	0x000814c5

0008171c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   8171c:	b480      	push	{r7}
   8171e:	b083      	sub	sp, #12
   81720:	af00      	add	r7, sp, #0
   81722:	4603      	mov	r3, r0
   81724:	6039      	str	r1, [r7, #0]
   81726:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81728:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8172c:	2b00      	cmp	r3, #0
   8172e:	da0b      	bge.n	81748 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81730:	490d      	ldr	r1, [pc, #52]	; (81768 <NVIC_SetPriority+0x4c>)
   81732:	79fb      	ldrb	r3, [r7, #7]
   81734:	f003 030f 	and.w	r3, r3, #15
   81738:	3b04      	subs	r3, #4
   8173a:	683a      	ldr	r2, [r7, #0]
   8173c:	b2d2      	uxtb	r2, r2
   8173e:	0112      	lsls	r2, r2, #4
   81740:	b2d2      	uxtb	r2, r2
   81742:	440b      	add	r3, r1
   81744:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   81746:	e009      	b.n	8175c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81748:	4908      	ldr	r1, [pc, #32]	; (8176c <NVIC_SetPriority+0x50>)
   8174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8174e:	683a      	ldr	r2, [r7, #0]
   81750:	b2d2      	uxtb	r2, r2
   81752:	0112      	lsls	r2, r2, #4
   81754:	b2d2      	uxtb	r2, r2
   81756:	440b      	add	r3, r1
   81758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   8175c:	bf00      	nop
   8175e:	370c      	adds	r7, #12
   81760:	46bd      	mov	sp, r7
   81762:	bc80      	pop	{r7}
   81764:	4770      	bx	lr
   81766:	bf00      	nop
   81768:	e000ed00 	.word	0xe000ed00
   8176c:	e000e100 	.word	0xe000e100

00081770 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   81770:	b580      	push	{r7, lr}
   81772:	b082      	sub	sp, #8
   81774:	af00      	add	r7, sp, #0
   81776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   81778:	687b      	ldr	r3, [r7, #4]
   8177a:	3b01      	subs	r3, #1
   8177c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   81780:	d301      	bcc.n	81786 <SysTick_Config+0x16>
   81782:	2301      	movs	r3, #1
   81784:	e00f      	b.n	817a6 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   81786:	4a0a      	ldr	r2, [pc, #40]	; (817b0 <SysTick_Config+0x40>)
   81788:	687b      	ldr	r3, [r7, #4]
   8178a:	3b01      	subs	r3, #1
   8178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   8178e:	210f      	movs	r1, #15
   81790:	f04f 30ff 	mov.w	r0, #4294967295
   81794:	4b07      	ldr	r3, [pc, #28]	; (817b4 <SysTick_Config+0x44>)
   81796:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   81798:	4b05      	ldr	r3, [pc, #20]	; (817b0 <SysTick_Config+0x40>)
   8179a:	2200      	movs	r2, #0
   8179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   8179e:	4b04      	ldr	r3, [pc, #16]	; (817b0 <SysTick_Config+0x40>)
   817a0:	2207      	movs	r2, #7
   817a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   817a4:	2300      	movs	r3, #0
}
   817a6:	4618      	mov	r0, r3
   817a8:	3708      	adds	r7, #8
   817aa:	46bd      	mov	sp, r7
   817ac:	bd80      	pop	{r7, pc}
   817ae:	bf00      	nop
   817b0:	e000e010 	.word	0xe000e010
   817b4:	0008171d 	.word	0x0008171d

000817b8 <osc_get_rate>:
{
   817b8:	b480      	push	{r7}
   817ba:	b083      	sub	sp, #12
   817bc:	af00      	add	r7, sp, #0
   817be:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   817c0:	687b      	ldr	r3, [r7, #4]
   817c2:	2b07      	cmp	r3, #7
   817c4:	d825      	bhi.n	81812 <osc_get_rate+0x5a>
   817c6:	a201      	add	r2, pc, #4	; (adr r2, 817cc <osc_get_rate+0x14>)
   817c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   817cc:	000817ed 	.word	0x000817ed
   817d0:	000817f3 	.word	0x000817f3
   817d4:	000817f9 	.word	0x000817f9
   817d8:	000817ff 	.word	0x000817ff
   817dc:	00081803 	.word	0x00081803
   817e0:	00081807 	.word	0x00081807
   817e4:	0008180b 	.word	0x0008180b
   817e8:	0008180f 	.word	0x0008180f
		return OSC_SLCK_32K_RC_HZ;
   817ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   817f0:	e010      	b.n	81814 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   817f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   817f6:	e00d      	b.n	81814 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   817f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   817fc:	e00a      	b.n	81814 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   817fe:	4b08      	ldr	r3, [pc, #32]	; (81820 <osc_get_rate+0x68>)
   81800:	e008      	b.n	81814 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   81802:	4b08      	ldr	r3, [pc, #32]	; (81824 <osc_get_rate+0x6c>)
   81804:	e006      	b.n	81814 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   81806:	4b08      	ldr	r3, [pc, #32]	; (81828 <osc_get_rate+0x70>)
   81808:	e004      	b.n	81814 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8180a:	4b07      	ldr	r3, [pc, #28]	; (81828 <osc_get_rate+0x70>)
   8180c:	e002      	b.n	81814 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   8180e:	4b06      	ldr	r3, [pc, #24]	; (81828 <osc_get_rate+0x70>)
   81810:	e000      	b.n	81814 <osc_get_rate+0x5c>
	return 0;
   81812:	2300      	movs	r3, #0
}
   81814:	4618      	mov	r0, r3
   81816:	370c      	adds	r7, #12
   81818:	46bd      	mov	sp, r7
   8181a:	bc80      	pop	{r7}
   8181c:	4770      	bx	lr
   8181e:	bf00      	nop
   81820:	003d0900 	.word	0x003d0900
   81824:	007a1200 	.word	0x007a1200
   81828:	00b71b00 	.word	0x00b71b00

0008182c <sysclk_get_main_hz>:
{
   8182c:	b580      	push	{r7, lr}
   8182e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   81830:	2006      	movs	r0, #6
   81832:	4b04      	ldr	r3, [pc, #16]	; (81844 <sysclk_get_main_hz+0x18>)
   81834:	4798      	blx	r3
   81836:	4602      	mov	r2, r0
   81838:	4613      	mov	r3, r2
   8183a:	00db      	lsls	r3, r3, #3
   8183c:	1a9b      	subs	r3, r3, r2
   8183e:	005b      	lsls	r3, r3, #1
}
   81840:	4618      	mov	r0, r3
   81842:	bd80      	pop	{r7, pc}
   81844:	000817b9 	.word	0x000817b9

00081848 <sysclk_get_cpu_hz>:
{
   81848:	b580      	push	{r7, lr}
   8184a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   8184c:	4b02      	ldr	r3, [pc, #8]	; (81858 <sysclk_get_cpu_hz+0x10>)
   8184e:	4798      	blx	r3
   81850:	4603      	mov	r3, r0
   81852:	085b      	lsrs	r3, r3, #1
}
   81854:	4618      	mov	r0, r3
   81856:	bd80      	pop	{r7, pc}
   81858:	0008182d 	.word	0x0008182d

0008185c <ioport_set_pin_level>:
{
   8185c:	b480      	push	{r7}
   8185e:	b08b      	sub	sp, #44	; 0x2c
   81860:	af00      	add	r7, sp, #0
   81862:	6078      	str	r0, [r7, #4]
   81864:	460b      	mov	r3, r1
   81866:	70fb      	strb	r3, [r7, #3]
   81868:	687b      	ldr	r3, [r7, #4]
   8186a:	627b      	str	r3, [r7, #36]	; 0x24
   8186c:	78fb      	ldrb	r3, [r7, #3]
   8186e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81874:	61fb      	str	r3, [r7, #28]
   81876:	69fb      	ldr	r3, [r7, #28]
   81878:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   8187a:	69bb      	ldr	r3, [r7, #24]
   8187c:	095b      	lsrs	r3, r3, #5
   8187e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81880:	697b      	ldr	r3, [r7, #20]
   81882:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81886:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8188a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   8188c:	613b      	str	r3, [r7, #16]
	if (level) {
   8188e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81892:	2b00      	cmp	r3, #0
   81894:	d009      	beq.n	818aa <ioport_set_pin_level+0x4e>
   81896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81898:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8189a:	68fb      	ldr	r3, [r7, #12]
   8189c:	f003 031f 	and.w	r3, r3, #31
   818a0:	2201      	movs	r2, #1
   818a2:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   818a4:	693b      	ldr	r3, [r7, #16]
   818a6:	631a      	str	r2, [r3, #48]	; 0x30
}
   818a8:	e008      	b.n	818bc <ioport_set_pin_level+0x60>
   818aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   818ac:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   818ae:	68bb      	ldr	r3, [r7, #8]
   818b0:	f003 031f 	and.w	r3, r3, #31
   818b4:	2201      	movs	r2, #1
   818b6:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   818b8:	693b      	ldr	r3, [r7, #16]
   818ba:	635a      	str	r2, [r3, #52]	; 0x34
   818bc:	bf00      	nop
   818be:	372c      	adds	r7, #44	; 0x2c
   818c0:	46bd      	mov	sp, r7
   818c2:	bc80      	pop	{r7}
   818c4:	4770      	bx	lr
	...

000818c8 <main>:
#include "asf.h"
#include "comm.h"
#include "timing.h"

int main(void)
{
   818c8:	b580      	push	{r7, lr}
   818ca:	b082      	sub	sp, #8
   818cc:	af00      	add	r7, sp, #0
    sysclk_init();
   818ce:	4b3c      	ldr	r3, [pc, #240]	; (819c0 <main+0xf8>)
   818d0:	4798      	blx	r3
    board_init();
   818d2:	4b3c      	ldr	r3, [pc, #240]	; (819c4 <main+0xfc>)
   818d4:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   818d6:	4b3c      	ldr	r3, [pc, #240]	; (819c8 <main+0x100>)
   818d8:	4798      	blx	r3
   818da:	4602      	mov	r2, r0
   818dc:	4b3b      	ldr	r3, [pc, #236]	; (819cc <main+0x104>)
   818de:	fba3 2302 	umull	r2, r3, r3, r2
   818e2:	099b      	lsrs	r3, r3, #6
   818e4:	4618      	mov	r0, r3
   818e6:	4b3a      	ldr	r3, [pc, #232]	; (819d0 <main+0x108>)
   818e8:	4798      	blx	r3
    
    spi_init();
   818ea:	4b3a      	ldr	r3, [pc, #232]	; (819d4 <main+0x10c>)
   818ec:	4798      	blx	r3
    
    adc_start(ADC);
   818ee:	483a      	ldr	r0, [pc, #232]	; (819d8 <main+0x110>)
   818f0:	4b3a      	ldr	r3, [pc, #232]	; (819dc <main+0x114>)
   818f2:	4798      	blx	r3
    
    for(int i = 0; i< 3; i++)
   818f4:	2300      	movs	r3, #0
   818f6:	607b      	str	r3, [r7, #4]
   818f8:	e028      	b.n	8194c <main+0x84>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   818fa:	2101      	movs	r1, #1
   818fc:	2063      	movs	r0, #99	; 0x63
   818fe:	4b38      	ldr	r3, [pc, #224]	; (819e0 <main+0x118>)
   81900:	4798      	blx	r3
        ioport_set_pin_level(LED_S1, 1);
   81902:	2101      	movs	r1, #1
   81904:	2062      	movs	r0, #98	; 0x62
   81906:	4b36      	ldr	r3, [pc, #216]	; (819e0 <main+0x118>)
   81908:	4798      	blx	r3
        ioport_set_pin_level(LED_S2, 1);
   8190a:	2101      	movs	r1, #1
   8190c:	2061      	movs	r0, #97	; 0x61
   8190e:	4b34      	ldr	r3, [pc, #208]	; (819e0 <main+0x118>)
   81910:	4798      	blx	r3
        ioport_set_pin_level(LED_S3, 1);
   81912:	2101      	movs	r1, #1
   81914:	2060      	movs	r0, #96	; 0x60
   81916:	4b32      	ldr	r3, [pc, #200]	; (819e0 <main+0x118>)
   81918:	4798      	blx	r3
        mdelay(100);
   8191a:	2064      	movs	r0, #100	; 0x64
   8191c:	4b31      	ldr	r3, [pc, #196]	; (819e4 <main+0x11c>)
   8191e:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   81920:	2100      	movs	r1, #0
   81922:	2063      	movs	r0, #99	; 0x63
   81924:	4b2e      	ldr	r3, [pc, #184]	; (819e0 <main+0x118>)
   81926:	4798      	blx	r3
        ioport_set_pin_level(LED_S1, 0);
   81928:	2100      	movs	r1, #0
   8192a:	2062      	movs	r0, #98	; 0x62
   8192c:	4b2c      	ldr	r3, [pc, #176]	; (819e0 <main+0x118>)
   8192e:	4798      	blx	r3
        ioport_set_pin_level(LED_S2, 0);
   81930:	2100      	movs	r1, #0
   81932:	2061      	movs	r0, #97	; 0x61
   81934:	4b2a      	ldr	r3, [pc, #168]	; (819e0 <main+0x118>)
   81936:	4798      	blx	r3
        ioport_set_pin_level(LED_S3, 0);
   81938:	2100      	movs	r1, #0
   8193a:	2060      	movs	r0, #96	; 0x60
   8193c:	4b28      	ldr	r3, [pc, #160]	; (819e0 <main+0x118>)
   8193e:	4798      	blx	r3
        mdelay(100);
   81940:	2064      	movs	r0, #100	; 0x64
   81942:	4b28      	ldr	r3, [pc, #160]	; (819e4 <main+0x11c>)
   81944:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   81946:	687b      	ldr	r3, [r7, #4]
   81948:	3301      	adds	r3, #1
   8194a:	607b      	str	r3, [r7, #4]
   8194c:	687b      	ldr	r3, [r7, #4]
   8194e:	2b02      	cmp	r3, #2
   81950:	ddd3      	ble.n	818fa <main+0x32>
    }
    
    while (1)
    {
        update_battery();
   81952:	4b25      	ldr	r3, [pc, #148]	; (819e8 <main+0x120>)
   81954:	4798      	blx	r3
        
        if (mts.ibit.heartbeat)
   81956:	4b25      	ldr	r3, [pc, #148]	; (819ec <main+0x124>)
   81958:	781b      	ldrb	r3, [r3, #0]
   8195a:	f003 0301 	and.w	r3, r3, #1
   8195e:	b2db      	uxtb	r3, r3
   81960:	2b00      	cmp	r3, #0
   81962:	d00d      	beq.n	81980 <main+0xb8>
        {
            ioport_set_pin_level(LED_ONBOARD, 1);
   81964:	2101      	movs	r1, #1
   81966:	2063      	movs	r0, #99	; 0x63
   81968:	4b1d      	ldr	r3, [pc, #116]	; (819e0 <main+0x118>)
   8196a:	4798      	blx	r3
            ioport_set_pin_level(LED_S1, 1);
   8196c:	2101      	movs	r1, #1
   8196e:	2062      	movs	r0, #98	; 0x62
   81970:	4b1b      	ldr	r3, [pc, #108]	; (819e0 <main+0x118>)
   81972:	4798      	blx	r3
            stm.ibit.heartbeat = 1;
   81974:	4a1e      	ldr	r2, [pc, #120]	; (819f0 <main+0x128>)
   81976:	7813      	ldrb	r3, [r2, #0]
   81978:	f043 0301 	orr.w	r3, r3, #1
   8197c:	7013      	strb	r3, [r2, #0]
   8197e:	e00c      	b.n	8199a <main+0xd2>
        }
        else
        {
            ioport_set_pin_level(LED_ONBOARD, 0);
   81980:	2100      	movs	r1, #0
   81982:	2063      	movs	r0, #99	; 0x63
   81984:	4b16      	ldr	r3, [pc, #88]	; (819e0 <main+0x118>)
   81986:	4798      	blx	r3
            ioport_set_pin_level(LED_S1, 0);
   81988:	2100      	movs	r1, #0
   8198a:	2062      	movs	r0, #98	; 0x62
   8198c:	4b14      	ldr	r3, [pc, #80]	; (819e0 <main+0x118>)
   8198e:	4798      	blx	r3
            stm.ibit.heartbeat = 0;
   81990:	4a17      	ldr	r2, [pc, #92]	; (819f0 <main+0x128>)
   81992:	7813      	ldrb	r3, [r2, #0]
   81994:	f36f 0300 	bfc	r3, #0, #1
   81998:	7013      	strb	r3, [r2, #0]
        }
        
        if (mts.ibit.button)
   8199a:	4b14      	ldr	r3, [pc, #80]	; (819ec <main+0x124>)
   8199c:	781b      	ldrb	r3, [r3, #0]
   8199e:	f003 0302 	and.w	r3, r3, #2
   819a2:	b2db      	uxtb	r3, r3
   819a4:	2b00      	cmp	r3, #0
   819a6:	d004      	beq.n	819b2 <main+0xea>
        {
            ioport_set_pin_level(LED_S2, 1);
   819a8:	2101      	movs	r1, #1
   819aa:	2061      	movs	r0, #97	; 0x61
   819ac:	4b0c      	ldr	r3, [pc, #48]	; (819e0 <main+0x118>)
   819ae:	4798      	blx	r3
   819b0:	e003      	b.n	819ba <main+0xf2>
        }
        else
        {
            ioport_set_pin_level(LED_S2, 0);
   819b2:	2100      	movs	r1, #0
   819b4:	2061      	movs	r0, #97	; 0x61
   819b6:	4b0a      	ldr	r3, [pc, #40]	; (819e0 <main+0x118>)
   819b8:	4798      	blx	r3
        }
        
        PrepareValuesToSend();
   819ba:	4b0e      	ldr	r3, [pc, #56]	; (819f4 <main+0x12c>)
   819bc:	4798      	blx	r3
        update_battery();
   819be:	e7c8      	b.n	81952 <main+0x8a>
   819c0:	000809ed 	.word	0x000809ed
   819c4:	00081005 	.word	0x00081005
   819c8:	00081849 	.word	0x00081849
   819cc:	10624dd3 	.word	0x10624dd3
   819d0:	00081771 	.word	0x00081771
   819d4:	000814ad 	.word	0x000814ad
   819d8:	400c0000 	.word	0x400c0000
   819dc:	0008022f 	.word	0x0008022f
   819e0:	0008185d 	.word	0x0008185d
   819e4:	000802e5 	.word	0x000802e5
   819e8:	00080311 	.word	0x00080311
   819ec:	200705ec 	.word	0x200705ec
   819f0:	200705f0 	.word	0x200705f0
   819f4:	000816e5 	.word	0x000816e5

000819f8 <__libc_init_array>:
   819f8:	b570      	push	{r4, r5, r6, lr}
   819fa:	4e0f      	ldr	r6, [pc, #60]	; (81a38 <__libc_init_array+0x40>)
   819fc:	4d0f      	ldr	r5, [pc, #60]	; (81a3c <__libc_init_array+0x44>)
   819fe:	1b76      	subs	r6, r6, r5
   81a00:	10b6      	asrs	r6, r6, #2
   81a02:	bf18      	it	ne
   81a04:	2400      	movne	r4, #0
   81a06:	d005      	beq.n	81a14 <__libc_init_array+0x1c>
   81a08:	3401      	adds	r4, #1
   81a0a:	f855 3b04 	ldr.w	r3, [r5], #4
   81a0e:	4798      	blx	r3
   81a10:	42a6      	cmp	r6, r4
   81a12:	d1f9      	bne.n	81a08 <__libc_init_array+0x10>
   81a14:	4e0a      	ldr	r6, [pc, #40]	; (81a40 <__libc_init_array+0x48>)
   81a16:	4d0b      	ldr	r5, [pc, #44]	; (81a44 <__libc_init_array+0x4c>)
   81a18:	f000 f8a8 	bl	81b6c <_init>
   81a1c:	1b76      	subs	r6, r6, r5
   81a1e:	10b6      	asrs	r6, r6, #2
   81a20:	bf18      	it	ne
   81a22:	2400      	movne	r4, #0
   81a24:	d006      	beq.n	81a34 <__libc_init_array+0x3c>
   81a26:	3401      	adds	r4, #1
   81a28:	f855 3b04 	ldr.w	r3, [r5], #4
   81a2c:	4798      	blx	r3
   81a2e:	42a6      	cmp	r6, r4
   81a30:	d1f9      	bne.n	81a26 <__libc_init_array+0x2e>
   81a32:	bd70      	pop	{r4, r5, r6, pc}
   81a34:	bd70      	pop	{r4, r5, r6, pc}
   81a36:	bf00      	nop
   81a38:	00081b78 	.word	0x00081b78
   81a3c:	00081b78 	.word	0x00081b78
   81a40:	00081b80 	.word	0x00081b80
   81a44:	00081b78 	.word	0x00081b78

00081a48 <register_fini>:
   81a48:	4b02      	ldr	r3, [pc, #8]	; (81a54 <register_fini+0xc>)
   81a4a:	b113      	cbz	r3, 81a52 <register_fini+0xa>
   81a4c:	4802      	ldr	r0, [pc, #8]	; (81a58 <register_fini+0x10>)
   81a4e:	f000 b805 	b.w	81a5c <atexit>
   81a52:	4770      	bx	lr
   81a54:	00000000 	.word	0x00000000
   81a58:	00081a69 	.word	0x00081a69

00081a5c <atexit>:
   81a5c:	2300      	movs	r3, #0
   81a5e:	4601      	mov	r1, r0
   81a60:	461a      	mov	r2, r3
   81a62:	4618      	mov	r0, r3
   81a64:	f000 b81e 	b.w	81aa4 <__register_exitproc>

00081a68 <__libc_fini_array>:
   81a68:	b538      	push	{r3, r4, r5, lr}
   81a6a:	4c0a      	ldr	r4, [pc, #40]	; (81a94 <__libc_fini_array+0x2c>)
   81a6c:	4d0a      	ldr	r5, [pc, #40]	; (81a98 <__libc_fini_array+0x30>)
   81a6e:	1b64      	subs	r4, r4, r5
   81a70:	10a4      	asrs	r4, r4, #2
   81a72:	d00a      	beq.n	81a8a <__libc_fini_array+0x22>
   81a74:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81a78:	3b01      	subs	r3, #1
   81a7a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81a7e:	3c01      	subs	r4, #1
   81a80:	f855 3904 	ldr.w	r3, [r5], #-4
   81a84:	4798      	blx	r3
   81a86:	2c00      	cmp	r4, #0
   81a88:	d1f9      	bne.n	81a7e <__libc_fini_array+0x16>
   81a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81a8e:	f000 b877 	b.w	81b80 <_fini>
   81a92:	bf00      	nop
   81a94:	00081b90 	.word	0x00081b90
   81a98:	00081b8c 	.word	0x00081b8c

00081a9c <__retarget_lock_acquire_recursive>:
   81a9c:	4770      	bx	lr
   81a9e:	bf00      	nop

00081aa0 <__retarget_lock_release_recursive>:
   81aa0:	4770      	bx	lr
   81aa2:	bf00      	nop

00081aa4 <__register_exitproc>:
   81aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81aa8:	4d2c      	ldr	r5, [pc, #176]	; (81b5c <__register_exitproc+0xb8>)
   81aaa:	4606      	mov	r6, r0
   81aac:	6828      	ldr	r0, [r5, #0]
   81aae:	4698      	mov	r8, r3
   81ab0:	460f      	mov	r7, r1
   81ab2:	4691      	mov	r9, r2
   81ab4:	f7ff fff2 	bl	81a9c <__retarget_lock_acquire_recursive>
   81ab8:	4b29      	ldr	r3, [pc, #164]	; (81b60 <__register_exitproc+0xbc>)
   81aba:	681c      	ldr	r4, [r3, #0]
   81abc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81ac0:	2b00      	cmp	r3, #0
   81ac2:	d03e      	beq.n	81b42 <__register_exitproc+0x9e>
   81ac4:	685a      	ldr	r2, [r3, #4]
   81ac6:	2a1f      	cmp	r2, #31
   81ac8:	dc1c      	bgt.n	81b04 <__register_exitproc+0x60>
   81aca:	f102 0e01 	add.w	lr, r2, #1
   81ace:	b176      	cbz	r6, 81aee <__register_exitproc+0x4a>
   81ad0:	2101      	movs	r1, #1
   81ad2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81ad6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81ada:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81ade:	4091      	lsls	r1, r2
   81ae0:	4308      	orrs	r0, r1
   81ae2:	2e02      	cmp	r6, #2
   81ae4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81ae8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81aec:	d023      	beq.n	81b36 <__register_exitproc+0x92>
   81aee:	3202      	adds	r2, #2
   81af0:	f8c3 e004 	str.w	lr, [r3, #4]
   81af4:	6828      	ldr	r0, [r5, #0]
   81af6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81afa:	f7ff ffd1 	bl	81aa0 <__retarget_lock_release_recursive>
   81afe:	2000      	movs	r0, #0
   81b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81b04:	4b17      	ldr	r3, [pc, #92]	; (81b64 <__register_exitproc+0xc0>)
   81b06:	b30b      	cbz	r3, 81b4c <__register_exitproc+0xa8>
   81b08:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81b0c:	f3af 8000 	nop.w
   81b10:	4603      	mov	r3, r0
   81b12:	b1d8      	cbz	r0, 81b4c <__register_exitproc+0xa8>
   81b14:	2000      	movs	r0, #0
   81b16:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81b1a:	f04f 0e01 	mov.w	lr, #1
   81b1e:	6058      	str	r0, [r3, #4]
   81b20:	6019      	str	r1, [r3, #0]
   81b22:	4602      	mov	r2, r0
   81b24:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81b28:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81b2c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81b30:	2e00      	cmp	r6, #0
   81b32:	d0dc      	beq.n	81aee <__register_exitproc+0x4a>
   81b34:	e7cc      	b.n	81ad0 <__register_exitproc+0x2c>
   81b36:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81b3a:	4301      	orrs	r1, r0
   81b3c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81b40:	e7d5      	b.n	81aee <__register_exitproc+0x4a>
   81b42:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81b46:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81b4a:	e7bb      	b.n	81ac4 <__register_exitproc+0x20>
   81b4c:	6828      	ldr	r0, [r5, #0]
   81b4e:	f7ff ffa7 	bl	81aa0 <__retarget_lock_release_recursive>
   81b52:	f04f 30ff 	mov.w	r0, #4294967295
   81b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81b5a:	bf00      	nop
   81b5c:	200705b8 	.word	0x200705b8
   81b60:	00081b68 	.word	0x00081b68
   81b64:	00000000 	.word	0x00000000

00081b68 <_global_impure_ptr>:
   81b68:	20070190                                ... 

00081b6c <_init>:
   81b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81b6e:	bf00      	nop
   81b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81b72:	bc08      	pop	{r3}
   81b74:	469e      	mov	lr, r3
   81b76:	4770      	bx	lr

00081b78 <__init_array_start>:
   81b78:	00081a49 	.word	0x00081a49

00081b7c <__frame_dummy_init_array_entry>:
   81b7c:	00080119                                ....

00081b80 <_fini>:
   81b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81b82:	bf00      	nop
   81b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81b86:	bc08      	pop	{r3}
   81b88:	469e      	mov	lr, r3
   81b8a:	4770      	bx	lr

00081b8c <__fini_array_start>:
   81b8c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007018c 	.word	0x2007018c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <SystemCoreClock>:
2007018c:	003d0900                                ..=.

20070190 <impure_data>:
20070190:	00000000 2007047c 200704e4 2007054c     ....|.. ... L.. 
	...
20070238:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070248:	0005deec 0000000b 00000000 00000000     ................
	...

200705b8 <__atexit_recursive_mutex>:
200705b8:	200705f4                                ... 
