
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000087bc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000887bc  000887bc  000187bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b50  20070000  000887c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000514  20070b50  00089314  00020b50  2**2
                  ALLOC
  4 .stack        00002004  20071064  00089828  00020b50  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b79  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015ae4  00000000  00000000  00020bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e70  00000000  00000000  000366b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006ad8  00000000  00000000  00039526  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000bd0  00000000  00000000  0003fffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b38  00000000  00000000  00040bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006c02  00000000  00000000  00041706  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fd98  00000000  00000000  00048308  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00067eb8  00000000  00000000  000580a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003eb4  00000000  00000000  000bff58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	68 30 07 20 d9 2d 08 00 d1 2d 08 00 d1 2d 08 00     h0. .-...-...-..
   80010:	d1 2d 08 00 d1 2d 08 00 d1 2d 08 00 00 00 00 00     .-...-...-......
	...
   8002c:	d1 2d 08 00 d1 2d 08 00 00 00 00 00 d1 2d 08 00     .-...-.......-..
   8003c:	a9 1e 08 00 d1 2d 08 00 d1 2d 08 00 d1 2d 08 00     .....-...-...-..
   8004c:	d1 2d 08 00 d1 2d 08 00 d1 2d 08 00 d1 2d 08 00     .-...-...-...-..
   8005c:	d1 2d 08 00 d1 2d 08 00 d1 2d 08 00 00 00 00 00     .-...-...-......
   8006c:	d1 2d 08 00 d1 2d 08 00 d1 2d 08 00 d1 2d 08 00     .-...-...-...-..
	...
   80084:	d1 2d 08 00 d1 2d 08 00 d1 2d 08 00 d1 2d 08 00     .-...-...-...-..
   80094:	d1 2d 08 00 1d 0b 08 00 d1 2d 08 00 d1 2d 08 00     .-.......-...-..
   800a4:	00 00 00 00 d1 2d 08 00 d1 2d 08 00 d1 2d 08 00     .....-...-...-..
   800b4:	d1 2d 08 00 d1 2d 08 00 d1 2d 08 00 d1 2d 08 00     .-...-...-...-..
   800c4:	d1 2d 08 00 d1 2d 08 00 d1 2d 08 00 d1 2d 08 00     .-...-...-...-..
   800d4:	d1 2d 08 00 d1 2d 08 00 75 07 08 00 d1 2d 08 00     .-...-..u....-..
   800e4:	d1 2d 08 00 d1 2d 08 00 d1 2d 08 00 d1 2d 08 00     .-...-...-...-..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b50 	.word	0x20070b50
   80110:	00000000 	.word	0x00000000
   80114:	000887c4 	.word	0x000887c4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000887c4 	.word	0x000887c4
   80154:	20070b54 	.word	0x20070b54
   80158:	000887c4 	.word	0x000887c4
   8015c:	00000000 	.word	0x00000000

00080160 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   80160:	b580      	push	{r7, lr}
   80162:	b082      	sub	sp, #8
   80164:	af00      	add	r7, sp, #0
   80166:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   80168:	6878      	ldr	r0, [r7, #4]
   8016a:	4b04      	ldr	r3, [pc, #16]	; (8017c <usart_spi_enable+0x1c>)
   8016c:	4798      	blx	r3
	usart_enable_rx(p_usart);
   8016e:	6878      	ldr	r0, [r7, #4]
   80170:	4b03      	ldr	r3, [pc, #12]	; (80180 <usart_spi_enable+0x20>)
   80172:	4798      	blx	r3
}
   80174:	bf00      	nop
   80176:	3708      	adds	r7, #8
   80178:	46bd      	mov	sp, r7
   8017a:	bd80      	pop	{r7, pc}
   8017c:	000803d1 	.word	0x000803d1
   80180:	00080419 	.word	0x00080419

00080184 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   80184:	b580      	push	{r7, lr}
   80186:	b082      	sub	sp, #8
   80188:	af00      	add	r7, sp, #0
   8018a:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   8018c:	6878      	ldr	r0, [r7, #4]
   8018e:	4b04      	ldr	r3, [pc, #16]	; (801a0 <usart_spi_disable+0x1c>)
   80190:	4798      	blx	r3
	usart_disable_rx(p_usart);
   80192:	6878      	ldr	r0, [r7, #4]
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <usart_spi_disable+0x20>)
   80196:	4798      	blx	r3
}
   80198:	bf00      	nop
   8019a:	3708      	adds	r7, #8
   8019c:	46bd      	mov	sp, r7
   8019e:	bd80      	pop	{r7, pc}
   801a0:	000803e9 	.word	0x000803e9
   801a4:	00080431 	.word	0x00080431

000801a8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801a8:	b480      	push	{r7}
   801aa:	b085      	sub	sp, #20
   801ac:	af00      	add	r7, sp, #0
   801ae:	60f8      	str	r0, [r7, #12]
   801b0:	60b9      	str	r1, [r7, #8]
   801b2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801b4:	68bb      	ldr	r3, [r7, #8]
   801b6:	2b00      	cmp	r3, #0
   801b8:	d007      	beq.n	801ca <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   801ba:	68bb      	ldr	r3, [r7, #8]
   801bc:	681a      	ldr	r2, [r3, #0]
   801be:	68fb      	ldr	r3, [r7, #12]
   801c0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   801c2:	68bb      	ldr	r3, [r7, #8]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	68fb      	ldr	r3, [r7, #12]
   801c8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   801ca:	687b      	ldr	r3, [r7, #4]
   801cc:	2b00      	cmp	r3, #0
   801ce:	d007      	beq.n	801e0 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	681a      	ldr	r2, [r3, #0]
   801d4:	68fb      	ldr	r3, [r7, #12]
   801d6:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   801d8:	687b      	ldr	r3, [r7, #4]
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	68fb      	ldr	r3, [r7, #12]
   801de:	61da      	str	r2, [r3, #28]
	}
}
   801e0:	bf00      	nop
   801e2:	3714      	adds	r7, #20
   801e4:	46bd      	mov	sp, r7
   801e6:	bc80      	pop	{r7}
   801e8:	4770      	bx	lr

000801ea <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   801ea:	b480      	push	{r7}
   801ec:	b083      	sub	sp, #12
   801ee:	af00      	add	r7, sp, #0
   801f0:	6078      	str	r0, [r7, #4]
   801f2:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   801f4:	683a      	ldr	r2, [r7, #0]
   801f6:	f240 1301 	movw	r3, #257	; 0x101
   801fa:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   801fc:	687a      	ldr	r2, [r7, #4]
   801fe:	6213      	str	r3, [r2, #32]
}
   80200:	bf00      	nop
   80202:	370c      	adds	r7, #12
   80204:	46bd      	mov	sp, r7
   80206:	bc80      	pop	{r7}
   80208:	4770      	bx	lr

0008020a <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8020a:	b480      	push	{r7}
   8020c:	b083      	sub	sp, #12
   8020e:	af00      	add	r7, sp, #0
   80210:	6078      	str	r0, [r7, #4]
   80212:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   80214:	683a      	ldr	r2, [r7, #0]
   80216:	f240 2302 	movw	r3, #514	; 0x202
   8021a:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8021c:	687a      	ldr	r2, [r7, #4]
   8021e:	6213      	str	r3, [r2, #32]
}
   80220:	bf00      	nop
   80222:	370c      	adds	r7, #12
   80224:	46bd      	mov	sp, r7
   80226:	bc80      	pop	{r7}
   80228:	4770      	bx	lr

0008022a <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8022a:	b480      	push	{r7}
   8022c:	b087      	sub	sp, #28
   8022e:	af00      	add	r7, sp, #0
   80230:	60f8      	str	r0, [r7, #12]
   80232:	60b9      	str	r1, [r7, #8]
   80234:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   80236:	68bb      	ldr	r3, [r7, #8]
   80238:	085a      	lsrs	r2, r3, #1
   8023a:	687b      	ldr	r3, [r7, #4]
   8023c:	441a      	add	r2, r3
   8023e:	68bb      	ldr	r3, [r7, #8]
   80240:	fbb2 f3f3 	udiv	r3, r2, r3
   80244:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   80246:	697b      	ldr	r3, [r7, #20]
   80248:	2b03      	cmp	r3, #3
   8024a:	d903      	bls.n	80254 <usart_set_spi_master_baudrate+0x2a>
   8024c:	697b      	ldr	r3, [r7, #20]
   8024e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   80252:	d301      	bcc.n	80258 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   80254:	2301      	movs	r3, #1
   80256:	e003      	b.n	80260 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   80258:	68fb      	ldr	r3, [r7, #12]
   8025a:	697a      	ldr	r2, [r7, #20]
   8025c:	621a      	str	r2, [r3, #32]

	return 0;
   8025e:	2300      	movs	r3, #0
}
   80260:	4618      	mov	r0, r3
   80262:	371c      	adds	r7, #28
   80264:	46bd      	mov	sp, r7
   80266:	bc80      	pop	{r7}
   80268:	4770      	bx	lr
	...

0008026c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8026c:	b580      	push	{r7, lr}
   8026e:	b082      	sub	sp, #8
   80270:	af00      	add	r7, sp, #0
   80272:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   80274:	6878      	ldr	r0, [r7, #4]
   80276:	4b0d      	ldr	r3, [pc, #52]	; (802ac <usart_reset+0x40>)
   80278:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8027a:	687b      	ldr	r3, [r7, #4]
   8027c:	2200      	movs	r2, #0
   8027e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   80280:	687b      	ldr	r3, [r7, #4]
   80282:	2200      	movs	r2, #0
   80284:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80286:	687b      	ldr	r3, [r7, #4]
   80288:	2200      	movs	r2, #0
   8028a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8028c:	6878      	ldr	r0, [r7, #4]
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <usart_reset+0x44>)
   80290:	4798      	blx	r3
	usart_reset_rx(p_usart);
   80292:	6878      	ldr	r0, [r7, #4]
   80294:	4b07      	ldr	r3, [pc, #28]	; (802b4 <usart_reset+0x48>)
   80296:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   80298:	6878      	ldr	r0, [r7, #4]
   8029a:	4b07      	ldr	r3, [pc, #28]	; (802b8 <usart_reset+0x4c>)
   8029c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8029e:	6878      	ldr	r0, [r7, #4]
   802a0:	4b06      	ldr	r3, [pc, #24]	; (802bc <usart_reset+0x50>)
   802a2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   802a4:	bf00      	nop
   802a6:	3708      	adds	r7, #8
   802a8:	46bd      	mov	sp, r7
   802aa:	bd80      	pop	{r7, pc}
   802ac:	000804c9 	.word	0x000804c9
   802b0:	00080401 	.word	0x00080401
   802b4:	00080449 	.word	0x00080449
   802b8:	00080461 	.word	0x00080461
   802bc:	0008047b 	.word	0x0008047b

000802c0 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   802c0:	b580      	push	{r7, lr}
   802c2:	b084      	sub	sp, #16
   802c4:	af00      	add	r7, sp, #0
   802c6:	60f8      	str	r0, [r7, #12]
   802c8:	60b9      	str	r1, [r7, #8]
   802ca:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   802cc:	68f8      	ldr	r0, [r7, #12]
   802ce:	4b3d      	ldr	r3, [pc, #244]	; (803c4 <usart_init_spi_master+0x104>)
   802d0:	4798      	blx	r3

	ul_reg_val = 0;
   802d2:	4b3d      	ldr	r3, [pc, #244]	; (803c8 <usart_init_spi_master+0x108>)
   802d4:	2200      	movs	r2, #0
   802d6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   802d8:	68bb      	ldr	r3, [r7, #8]
   802da:	2b00      	cmp	r3, #0
   802dc:	d00d      	beq.n	802fa <usart_init_spi_master+0x3a>
   802de:	68bb      	ldr	r3, [r7, #8]
   802e0:	689b      	ldr	r3, [r3, #8]
   802e2:	2b03      	cmp	r3, #3
   802e4:	d809      	bhi.n	802fa <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   802e6:	68bb      	ldr	r3, [r7, #8]
   802e8:	681b      	ldr	r3, [r3, #0]
   802ea:	687a      	ldr	r2, [r7, #4]
   802ec:	4619      	mov	r1, r3
   802ee:	68f8      	ldr	r0, [r7, #12]
   802f0:	4b36      	ldr	r3, [pc, #216]	; (803cc <usart_init_spi_master+0x10c>)
   802f2:	4798      	blx	r3
   802f4:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   802f6:	2b00      	cmp	r3, #0
   802f8:	d001      	beq.n	802fe <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   802fa:	2301      	movs	r3, #1
   802fc:	e05d      	b.n	803ba <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   802fe:	68bb      	ldr	r3, [r7, #8]
   80300:	685a      	ldr	r2, [r3, #4]
   80302:	4b31      	ldr	r3, [pc, #196]	; (803c8 <usart_init_spi_master+0x108>)
   80304:	681b      	ldr	r3, [r3, #0]
   80306:	4313      	orrs	r3, r2
   80308:	4a2f      	ldr	r2, [pc, #188]	; (803c8 <usart_init_spi_master+0x108>)
   8030a:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   8030c:	68bb      	ldr	r3, [r7, #8]
   8030e:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   80310:	4b2d      	ldr	r3, [pc, #180]	; (803c8 <usart_init_spi_master+0x108>)
   80312:	681b      	ldr	r3, [r3, #0]
   80314:	4313      	orrs	r3, r2
   80316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   8031a:	f043 030e 	orr.w	r3, r3, #14
   8031e:	4a2a      	ldr	r2, [pc, #168]	; (803c8 <usart_init_spi_master+0x108>)
   80320:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   80322:	68bb      	ldr	r3, [r7, #8]
   80324:	689b      	ldr	r3, [r3, #8]
   80326:	2b03      	cmp	r3, #3
   80328:	d83e      	bhi.n	803a8 <usart_init_spi_master+0xe8>
   8032a:	a201      	add	r2, pc, #4	; (adr r2, 80330 <usart_init_spi_master+0x70>)
   8032c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80330:	00080341 	.word	0x00080341
   80334:	0008035b 	.word	0x0008035b
   80338:	00080375 	.word	0x00080375
   8033c:	0008038f 	.word	0x0008038f
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   80340:	4b21      	ldr	r3, [pc, #132]	; (803c8 <usart_init_spi_master+0x108>)
   80342:	681b      	ldr	r3, [r3, #0]
   80344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80348:	4a1f      	ldr	r2, [pc, #124]	; (803c8 <usart_init_spi_master+0x108>)
   8034a:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8034c:	4b1e      	ldr	r3, [pc, #120]	; (803c8 <usart_init_spi_master+0x108>)
   8034e:	681b      	ldr	r3, [r3, #0]
   80350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80354:	4a1c      	ldr	r2, [pc, #112]	; (803c8 <usart_init_spi_master+0x108>)
   80356:	6013      	str	r3, [r2, #0]
		break;
   80358:	e027      	b.n	803aa <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8035a:	4b1b      	ldr	r3, [pc, #108]	; (803c8 <usart_init_spi_master+0x108>)
   8035c:	681b      	ldr	r3, [r3, #0]
   8035e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80362:	4a19      	ldr	r2, [pc, #100]	; (803c8 <usart_init_spi_master+0x108>)
   80364:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   80366:	4b18      	ldr	r3, [pc, #96]	; (803c8 <usart_init_spi_master+0x108>)
   80368:	681b      	ldr	r3, [r3, #0]
   8036a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8036e:	4a16      	ldr	r2, [pc, #88]	; (803c8 <usart_init_spi_master+0x108>)
   80370:	6013      	str	r3, [r2, #0]
		break;
   80372:	e01a      	b.n	803aa <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   80374:	4b14      	ldr	r3, [pc, #80]	; (803c8 <usart_init_spi_master+0x108>)
   80376:	681b      	ldr	r3, [r3, #0]
   80378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8037c:	4a12      	ldr	r2, [pc, #72]	; (803c8 <usart_init_spi_master+0x108>)
   8037e:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   80380:	4b11      	ldr	r3, [pc, #68]	; (803c8 <usart_init_spi_master+0x108>)
   80382:	681b      	ldr	r3, [r3, #0]
   80384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80388:	4a0f      	ldr	r2, [pc, #60]	; (803c8 <usart_init_spi_master+0x108>)
   8038a:	6013      	str	r3, [r2, #0]
		break;
   8038c:	e00d      	b.n	803aa <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8038e:	4b0e      	ldr	r3, [pc, #56]	; (803c8 <usart_init_spi_master+0x108>)
   80390:	681b      	ldr	r3, [r3, #0]
   80392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80396:	4a0c      	ldr	r2, [pc, #48]	; (803c8 <usart_init_spi_master+0x108>)
   80398:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8039a:	4b0b      	ldr	r3, [pc, #44]	; (803c8 <usart_init_spi_master+0x108>)
   8039c:	681b      	ldr	r3, [r3, #0]
   8039e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   803a2:	4a09      	ldr	r2, [pc, #36]	; (803c8 <usart_init_spi_master+0x108>)
   803a4:	6013      	str	r3, [r2, #0]
		break;
   803a6:	e000      	b.n	803aa <usart_init_spi_master+0xea>

	default:
		break;
   803a8:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   803aa:	68fb      	ldr	r3, [r7, #12]
   803ac:	685a      	ldr	r2, [r3, #4]
   803ae:	4b06      	ldr	r3, [pc, #24]	; (803c8 <usart_init_spi_master+0x108>)
   803b0:	681b      	ldr	r3, [r3, #0]
   803b2:	431a      	orrs	r2, r3
   803b4:	68fb      	ldr	r3, [r7, #12]
   803b6:	605a      	str	r2, [r3, #4]

	return 0;
   803b8:	2300      	movs	r3, #0
}
   803ba:	4618      	mov	r0, r3
   803bc:	3710      	adds	r7, #16
   803be:	46bd      	mov	sp, r7
   803c0:	bd80      	pop	{r7, pc}
   803c2:	bf00      	nop
   803c4:	0008026d 	.word	0x0008026d
   803c8:	20070b6c 	.word	0x20070b6c
   803cc:	0008022b 	.word	0x0008022b

000803d0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   803d0:	b480      	push	{r7}
   803d2:	b083      	sub	sp, #12
   803d4:	af00      	add	r7, sp, #0
   803d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   803d8:	687b      	ldr	r3, [r7, #4]
   803da:	2240      	movs	r2, #64	; 0x40
   803dc:	601a      	str	r2, [r3, #0]
}
   803de:	bf00      	nop
   803e0:	370c      	adds	r7, #12
   803e2:	46bd      	mov	sp, r7
   803e4:	bc80      	pop	{r7}
   803e6:	4770      	bx	lr

000803e8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   803e8:	b480      	push	{r7}
   803ea:	b083      	sub	sp, #12
   803ec:	af00      	add	r7, sp, #0
   803ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   803f0:	687b      	ldr	r3, [r7, #4]
   803f2:	2280      	movs	r2, #128	; 0x80
   803f4:	601a      	str	r2, [r3, #0]
}
   803f6:	bf00      	nop
   803f8:	370c      	adds	r7, #12
   803fa:	46bd      	mov	sp, r7
   803fc:	bc80      	pop	{r7}
   803fe:	4770      	bx	lr

00080400 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   80400:	b480      	push	{r7}
   80402:	b083      	sub	sp, #12
   80404:	af00      	add	r7, sp, #0
   80406:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80408:	687b      	ldr	r3, [r7, #4]
   8040a:	2288      	movs	r2, #136	; 0x88
   8040c:	601a      	str	r2, [r3, #0]
}
   8040e:	bf00      	nop
   80410:	370c      	adds	r7, #12
   80412:	46bd      	mov	sp, r7
   80414:	bc80      	pop	{r7}
   80416:	4770      	bx	lr

00080418 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   80418:	b480      	push	{r7}
   8041a:	b083      	sub	sp, #12
   8041c:	af00      	add	r7, sp, #0
   8041e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   80420:	687b      	ldr	r3, [r7, #4]
   80422:	2210      	movs	r2, #16
   80424:	601a      	str	r2, [r3, #0]
}
   80426:	bf00      	nop
   80428:	370c      	adds	r7, #12
   8042a:	46bd      	mov	sp, r7
   8042c:	bc80      	pop	{r7}
   8042e:	4770      	bx	lr

00080430 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   80430:	b480      	push	{r7}
   80432:	b083      	sub	sp, #12
   80434:	af00      	add	r7, sp, #0
   80436:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   80438:	687b      	ldr	r3, [r7, #4]
   8043a:	2220      	movs	r2, #32
   8043c:	601a      	str	r2, [r3, #0]
}
   8043e:	bf00      	nop
   80440:	370c      	adds	r7, #12
   80442:	46bd      	mov	sp, r7
   80444:	bc80      	pop	{r7}
   80446:	4770      	bx	lr

00080448 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   80448:	b480      	push	{r7}
   8044a:	b083      	sub	sp, #12
   8044c:	af00      	add	r7, sp, #0
   8044e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80450:	687b      	ldr	r3, [r7, #4]
   80452:	2224      	movs	r2, #36	; 0x24
   80454:	601a      	str	r2, [r3, #0]
}
   80456:	bf00      	nop
   80458:	370c      	adds	r7, #12
   8045a:	46bd      	mov	sp, r7
   8045c:	bc80      	pop	{r7}
   8045e:	4770      	bx	lr

00080460 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   80460:	b480      	push	{r7}
   80462:	b083      	sub	sp, #12
   80464:	af00      	add	r7, sp, #0
   80466:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   80468:	687b      	ldr	r3, [r7, #4]
   8046a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8046e:	601a      	str	r2, [r3, #0]
}
   80470:	bf00      	nop
   80472:	370c      	adds	r7, #12
   80474:	46bd      	mov	sp, r7
   80476:	bc80      	pop	{r7}
   80478:	4770      	bx	lr

0008047a <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   8047a:	b480      	push	{r7}
   8047c:	b083      	sub	sp, #12
   8047e:	af00      	add	r7, sp, #0
   80480:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   80482:	687b      	ldr	r3, [r7, #4]
   80484:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80488:	601a      	str	r2, [r3, #0]
}
   8048a:	bf00      	nop
   8048c:	370c      	adds	r7, #12
   8048e:	46bd      	mov	sp, r7
   80490:	bc80      	pop	{r7}
   80492:	4770      	bx	lr

00080494 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
   80494:	b480      	push	{r7}
   80496:	b083      	sub	sp, #12
   80498:	af00      	add	r7, sp, #0
   8049a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
   8049c:	687b      	ldr	r3, [r7, #4]
   8049e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   804a2:	601a      	str	r2, [r3, #0]
}
   804a4:	bf00      	nop
   804a6:	370c      	adds	r7, #12
   804a8:	46bd      	mov	sp, r7
   804aa:	bc80      	pop	{r7}
   804ac:	4770      	bx	lr

000804ae <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   804ae:	b480      	push	{r7}
   804b0:	b083      	sub	sp, #12
   804b2:	af00      	add	r7, sp, #0
   804b4:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   804b6:	687b      	ldr	r3, [r7, #4]
   804b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   804bc:	601a      	str	r2, [r3, #0]
}
   804be:	bf00      	nop
   804c0:	370c      	adds	r7, #12
   804c2:	46bd      	mov	sp, r7
   804c4:	bc80      	pop	{r7}
   804c6:	4770      	bx	lr

000804c8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   804c8:	b480      	push	{r7}
   804ca:	b083      	sub	sp, #12
   804cc:	af00      	add	r7, sp, #0
   804ce:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   804d0:	687b      	ldr	r3, [r7, #4]
   804d2:	4a04      	ldr	r2, [pc, #16]	; (804e4 <usart_disable_writeprotect+0x1c>)
   804d4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   804d8:	bf00      	nop
   804da:	370c      	adds	r7, #12
   804dc:	46bd      	mov	sp, r7
   804de:	bc80      	pop	{r7}
   804e0:	4770      	bx	lr
   804e2:	bf00      	nop
   804e4:	55534100 	.word	0x55534100

000804e8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   804e8:	b480      	push	{r7}
   804ea:	b083      	sub	sp, #12
   804ec:	af00      	add	r7, sp, #0
   804ee:	4603      	mov	r3, r0
   804f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   804f2:	4908      	ldr	r1, [pc, #32]	; (80514 <NVIC_EnableIRQ+0x2c>)
   804f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   804f8:	095b      	lsrs	r3, r3, #5
   804fa:	79fa      	ldrb	r2, [r7, #7]
   804fc:	f002 021f 	and.w	r2, r2, #31
   80500:	2001      	movs	r0, #1
   80502:	fa00 f202 	lsl.w	r2, r0, r2
   80506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8050a:	bf00      	nop
   8050c:	370c      	adds	r7, #12
   8050e:	46bd      	mov	sp, r7
   80510:	bc80      	pop	{r7}
   80512:	4770      	bx	lr
   80514:	e000e100 	.word	0xe000e100

00080518 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80518:	b480      	push	{r7}
   8051a:	b083      	sub	sp, #12
   8051c:	af00      	add	r7, sp, #0
   8051e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80520:	687b      	ldr	r3, [r7, #4]
   80522:	2b07      	cmp	r3, #7
   80524:	d825      	bhi.n	80572 <osc_get_rate+0x5a>
   80526:	a201      	add	r2, pc, #4	; (adr r2, 8052c <osc_get_rate+0x14>)
   80528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8052c:	0008054d 	.word	0x0008054d
   80530:	00080553 	.word	0x00080553
   80534:	00080559 	.word	0x00080559
   80538:	0008055f 	.word	0x0008055f
   8053c:	00080563 	.word	0x00080563
   80540:	00080567 	.word	0x00080567
   80544:	0008056b 	.word	0x0008056b
   80548:	0008056f 	.word	0x0008056f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8054c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80550:	e010      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80556:	e00d      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8055c:	e00a      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8055e:	4b08      	ldr	r3, [pc, #32]	; (80580 <osc_get_rate+0x68>)
   80560:	e008      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80562:	4b08      	ldr	r3, [pc, #32]	; (80584 <osc_get_rate+0x6c>)
   80564:	e006      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80566:	4b08      	ldr	r3, [pc, #32]	; (80588 <osc_get_rate+0x70>)
   80568:	e004      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8056a:	4b07      	ldr	r3, [pc, #28]	; (80588 <osc_get_rate+0x70>)
   8056c:	e002      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8056e:	4b06      	ldr	r3, [pc, #24]	; (80588 <osc_get_rate+0x70>)
   80570:	e000      	b.n	80574 <osc_get_rate+0x5c>
	}

	return 0;
   80572:	2300      	movs	r3, #0
}
   80574:	4618      	mov	r0, r3
   80576:	370c      	adds	r7, #12
   80578:	46bd      	mov	sp, r7
   8057a:	bc80      	pop	{r7}
   8057c:	4770      	bx	lr
   8057e:	bf00      	nop
   80580:	003d0900 	.word	0x003d0900
   80584:	007a1200 	.word	0x007a1200
   80588:	00b71b00 	.word	0x00b71b00

0008058c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8058c:	b580      	push	{r7, lr}
   8058e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80590:	2006      	movs	r0, #6
   80592:	4b04      	ldr	r3, [pc, #16]	; (805a4 <sysclk_get_main_hz+0x18>)
   80594:	4798      	blx	r3
   80596:	4602      	mov	r2, r0
   80598:	4613      	mov	r3, r2
   8059a:	00db      	lsls	r3, r3, #3
   8059c:	1a9b      	subs	r3, r3, r2
   8059e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   805a0:	4618      	mov	r0, r3
   805a2:	bd80      	pop	{r7, pc}
   805a4:	00080519 	.word	0x00080519

000805a8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   805a8:	b580      	push	{r7, lr}
   805aa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   805ac:	4b02      	ldr	r3, [pc, #8]	; (805b8 <sysclk_get_peripheral_hz+0x10>)
   805ae:	4798      	blx	r3
   805b0:	4603      	mov	r3, r0
   805b2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   805b4:	4618      	mov	r0, r3
   805b6:	bd80      	pop	{r7, pc}
   805b8:	0008058d 	.word	0x0008058d

000805bc <spi_init>:
sensor_to_motor_t stm;

uint8_t sens_buf[sizeof(mts)];

void spi_init(void)
{
   805bc:	b580      	push	{r7, lr}
   805be:	af00      	add	r7, sp, #0
    configure_dmac();
   805c0:	4b02      	ldr	r3, [pc, #8]	; (805cc <spi_init+0x10>)
   805c2:	4798      	blx	r3
    spi_master_initialize();
   805c4:	4b02      	ldr	r3, [pc, #8]	; (805d0 <spi_init+0x14>)
   805c6:	4798      	blx	r3
}
   805c8:	bf00      	nop
   805ca:	bd80      	pop	{r7, pc}
   805cc:	000806e9 	.word	0x000806e9
   805d0:	000805d5 	.word	0x000805d5

000805d4 <spi_master_initialize>:

void spi_master_initialize(void)
{
   805d4:	b590      	push	{r4, r7, lr}
   805d6:	b085      	sub	sp, #20
   805d8:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   805da:	2101      	movs	r1, #1
   805dc:	4810      	ldr	r0, [pc, #64]	; (80620 <spi_master_initialize+0x4c>)
   805de:	4b11      	ldr	r3, [pc, #68]	; (80624 <spi_master_initialize+0x50>)
   805e0:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   805e2:	2100      	movs	r1, #0
   805e4:	480e      	ldr	r0, [pc, #56]	; (80620 <spi_master_initialize+0x4c>)
   805e6:	4b0f      	ldr	r3, [pc, #60]	; (80624 <spi_master_initialize+0x50>)
   805e8:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   805ea:	2012      	movs	r0, #18
   805ec:	4b0e      	ldr	r3, [pc, #56]	; (80628 <spi_master_initialize+0x54>)
   805ee:	4798      	blx	r3
    usart_spi_disable(USART1);
   805f0:	480e      	ldr	r0, [pc, #56]	; (8062c <spi_master_initialize+0x58>)
   805f2:	4b0f      	ldr	r3, [pc, #60]	; (80630 <spi_master_initialize+0x5c>)
   805f4:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   805f6:	4b0f      	ldr	r3, [pc, #60]	; (80634 <spi_master_initialize+0x60>)
   805f8:	463c      	mov	r4, r7
   805fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   805fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   80600:	4b0d      	ldr	r3, [pc, #52]	; (80638 <spi_master_initialize+0x64>)
   80602:	4798      	blx	r3
   80604:	4602      	mov	r2, r0
   80606:	463b      	mov	r3, r7
   80608:	4619      	mov	r1, r3
   8060a:	4808      	ldr	r0, [pc, #32]	; (8062c <spi_master_initialize+0x58>)
   8060c:	4b0b      	ldr	r3, [pc, #44]	; (8063c <spi_master_initialize+0x68>)
   8060e:	4798      	blx	r3
    usart_spi_enable(USART1);
   80610:	4806      	ldr	r0, [pc, #24]	; (8062c <spi_master_initialize+0x58>)
   80612:	4b0b      	ldr	r3, [pc, #44]	; (80640 <spi_master_initialize+0x6c>)
   80614:	4798      	blx	r3
}
   80616:	bf00      	nop
   80618:	3714      	adds	r7, #20
   8061a:	46bd      	mov	sp, r7
   8061c:	bd90      	pop	{r4, r7, pc}
   8061e:	bf00      	nop
   80620:	400c4000 	.word	0x400c4000
   80624:	000825bf 	.word	0x000825bf
   80628:	0008297d 	.word	0x0008297d
   8062c:	4009c000 	.word	0x4009c000
   80630:	00080185 	.word	0x00080185
   80634:	0008836c 	.word	0x0008836c
   80638:	000805a9 	.word	0x000805a9
   8063c:	000802c1 	.word	0x000802c1
   80640:	00080161 	.word	0x00080161

00080644 <spi_master_transfer>:

void spi_master_transfer(void *p_buf, uint32_t ul_size)
{
   80644:	b580      	push	{r7, lr}
   80646:	b088      	sub	sp, #32
   80648:	af00      	add	r7, sp, #0
   8064a:	6078      	str	r0, [r7, #4]
   8064c:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    usart_spi_force_chip_select(USART1);
   8064e:	481c      	ldr	r0, [pc, #112]	; (806c0 <spi_master_transfer+0x7c>)
   80650:	4b1c      	ldr	r3, [pc, #112]	; (806c4 <spi_master_transfer+0x80>)
   80652:	4798      	blx	r3

    dmac_channel_disable(DMAC, 1);
   80654:	2101      	movs	r1, #1
   80656:	481c      	ldr	r0, [pc, #112]	; (806c8 <spi_master_transfer+0x84>)
   80658:	4b1c      	ldr	r3, [pc, #112]	; (806cc <spi_master_transfer+0x88>)
   8065a:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   8065c:	687b      	ldr	r3, [r7, #4]
   8065e:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & USART1->US_THR;
   80660:	4b1b      	ldr	r3, [pc, #108]	; (806d0 <spi_master_transfer+0x8c>)
   80662:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80664:	683b      	ldr	r3, [r7, #0]
   80666:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80668:	4b1a      	ldr	r3, [pc, #104]	; (806d4 <spi_master_transfer+0x90>)
   8066a:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   8066c:	2300      	movs	r3, #0
   8066e:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   80670:	f107 030c 	add.w	r3, r7, #12
   80674:	461a      	mov	r2, r3
   80676:	2101      	movs	r1, #1
   80678:	4813      	ldr	r0, [pc, #76]	; (806c8 <spi_master_transfer+0x84>)
   8067a:	4b17      	ldr	r3, [pc, #92]	; (806d8 <spi_master_transfer+0x94>)
   8067c:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   8067e:	2101      	movs	r1, #1
   80680:	4811      	ldr	r0, [pc, #68]	; (806c8 <spi_master_transfer+0x84>)
   80682:	4b16      	ldr	r3, [pc, #88]	; (806dc <spi_master_transfer+0x98>)
   80684:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   80686:	2100      	movs	r1, #0
   80688:	480f      	ldr	r0, [pc, #60]	; (806c8 <spi_master_transfer+0x84>)
   8068a:	4b10      	ldr	r3, [pc, #64]	; (806cc <spi_master_transfer+0x88>)
   8068c:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & USART1->US_RHR;
   8068e:	4b14      	ldr	r3, [pc, #80]	; (806e0 <spi_master_transfer+0x9c>)
   80690:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80692:	687b      	ldr	r3, [r7, #4]
   80694:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80696:	683b      	ldr	r3, [r7, #0]
   80698:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   8069a:	4b12      	ldr	r3, [pc, #72]	; (806e4 <spi_master_transfer+0xa0>)
   8069c:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   8069e:	2300      	movs	r3, #0
   806a0:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   806a2:	f107 030c 	add.w	r3, r7, #12
   806a6:	461a      	mov	r2, r3
   806a8:	2100      	movs	r1, #0
   806aa:	4807      	ldr	r0, [pc, #28]	; (806c8 <spi_master_transfer+0x84>)
   806ac:	4b0a      	ldr	r3, [pc, #40]	; (806d8 <spi_master_transfer+0x94>)
   806ae:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   806b0:	2100      	movs	r1, #0
   806b2:	4805      	ldr	r0, [pc, #20]	; (806c8 <spi_master_transfer+0x84>)
   806b4:	4b09      	ldr	r3, [pc, #36]	; (806dc <spi_master_transfer+0x98>)
   806b6:	4798      	blx	r3
}
   806b8:	bf00      	nop
   806ba:	3720      	adds	r7, #32
   806bc:	46bd      	mov	sp, r7
   806be:	bd80      	pop	{r7, pc}
   806c0:	4009c000 	.word	0x4009c000
   806c4:	00080495 	.word	0x00080495
   806c8:	400c4000 	.word	0x400c4000
   806cc:	000825bf 	.word	0x000825bf
   806d0:	4009c01c 	.word	0x4009c01c
   806d4:	20310000 	.word	0x20310000
   806d8:	000826d9 	.word	0x000826d9
   806dc:	000825a1 	.word	0x000825a1
   806e0:	4009c018 	.word	0x4009c018
   806e4:	02510000 	.word	0x02510000

000806e8 <configure_dmac>:

void configure_dmac(void)
{
   806e8:	b580      	push	{r7, lr}
   806ea:	b082      	sub	sp, #8
   806ec:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   806ee:	2027      	movs	r0, #39	; 0x27
   806f0:	4b18      	ldr	r3, [pc, #96]	; (80754 <configure_dmac+0x6c>)
   806f2:	4798      	blx	r3
    dmac_init(DMAC);
   806f4:	4818      	ldr	r0, [pc, #96]	; (80758 <configure_dmac+0x70>)
   806f6:	4b19      	ldr	r3, [pc, #100]	; (8075c <configure_dmac+0x74>)
   806f8:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   806fa:	2110      	movs	r1, #16
   806fc:	4816      	ldr	r0, [pc, #88]	; (80758 <configure_dmac+0x70>)
   806fe:	4b18      	ldr	r3, [pc, #96]	; (80760 <configure_dmac+0x78>)
   80700:	4798      	blx	r3
    dmac_enable(DMAC);
   80702:	4815      	ldr	r0, [pc, #84]	; (80758 <configure_dmac+0x70>)
   80704:	4b17      	ldr	r3, [pc, #92]	; (80764 <configure_dmac+0x7c>)
   80706:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80708:	2300      	movs	r3, #0
   8070a:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   8070c:	687b      	ldr	r3, [r7, #4]
   8070e:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80712:	f043 030e 	orr.w	r3, r3, #14
   80716:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   80718:	687a      	ldr	r2, [r7, #4]
   8071a:	2100      	movs	r1, #0
   8071c:	480e      	ldr	r0, [pc, #56]	; (80758 <configure_dmac+0x70>)
   8071e:	4b12      	ldr	r3, [pc, #72]	; (80768 <configure_dmac+0x80>)
   80720:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80722:	2300      	movs	r3, #0
   80724:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80726:	687b      	ldr	r3, [r7, #4]
   80728:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   8072c:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   80730:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   80732:	687a      	ldr	r2, [r7, #4]
   80734:	2101      	movs	r1, #1
   80736:	4808      	ldr	r0, [pc, #32]	; (80758 <configure_dmac+0x70>)
   80738:	4b0b      	ldr	r3, [pc, #44]	; (80768 <configure_dmac+0x80>)
   8073a:	4798      	blx	r3
    ul_cfg = 0;
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
    #endif
    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   8073c:	2027      	movs	r0, #39	; 0x27
   8073e:	4b0b      	ldr	r3, [pc, #44]	; (8076c <configure_dmac+0x84>)
   80740:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   80742:	2101      	movs	r1, #1
   80744:	4804      	ldr	r0, [pc, #16]	; (80758 <configure_dmac+0x70>)
   80746:	4b0a      	ldr	r3, [pc, #40]	; (80770 <configure_dmac+0x88>)
   80748:	4798      	blx	r3
}
   8074a:	bf00      	nop
   8074c:	3708      	adds	r7, #8
   8074e:	46bd      	mov	sp, r7
   80750:	bd80      	pop	{r7, pc}
   80752:	bf00      	nop
   80754:	0008297d 	.word	0x0008297d
   80758:	400c4000 	.word	0x400c4000
   8075c:	000824f9 	.word	0x000824f9
   80760:	00082515 	.word	0x00082515
   80764:	0008253b 	.word	0x0008253b
   80768:	000826af 	.word	0x000826af
   8076c:	000804e9 	.word	0x000804e9
   80770:	00082571 	.word	0x00082571

00080774 <DMAC_Handler>:

void DMAC_Handler(void)
{
   80774:	b580      	push	{r7, lr}
   80776:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   80778:	480a      	ldr	r0, [pc, #40]	; (807a4 <DMAC_Handler+0x30>)
   8077a:	4b0b      	ldr	r3, [pc, #44]	; (807a8 <DMAC_Handler+0x34>)
   8077c:	4798      	blx	r3
   8077e:	4602      	mov	r2, r0
   80780:	4b0a      	ldr	r3, [pc, #40]	; (807ac <DMAC_Handler+0x38>)
   80782:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   80784:	4b09      	ldr	r3, [pc, #36]	; (807ac <DMAC_Handler+0x38>)
   80786:	681b      	ldr	r3, [r3, #0]
   80788:	f003 0301 	and.w	r3, r3, #1
   8078c:	2b00      	cmp	r3, #0
   8078e:	d007      	beq.n	807a0 <DMAC_Handler+0x2c>
    {
        usart_spi_release_chip_select(USART1);
   80790:	4807      	ldr	r0, [pc, #28]	; (807b0 <DMAC_Handler+0x3c>)
   80792:	4b08      	ldr	r3, [pc, #32]	; (807b4 <DMAC_Handler+0x40>)
   80794:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   80796:	4b08      	ldr	r3, [pc, #32]	; (807b8 <DMAC_Handler+0x44>)
   80798:	881b      	ldrh	r3, [r3, #0]
   8079a:	b29b      	uxth	r3, r3
   8079c:	4a07      	ldr	r2, [pc, #28]	; (807bc <DMAC_Handler+0x48>)
   8079e:	8013      	strh	r3, [r2, #0]
    }
}
   807a0:	bf00      	nop
   807a2:	bd80      	pop	{r7, pc}
   807a4:	400c4000 	.word	0x400c4000
   807a8:	0008258b 	.word	0x0008258b
   807ac:	20070b70 	.word	0x20070b70
   807b0:	4009c000 	.word	0x4009c000
   807b4:	000804af 	.word	0x000804af
   807b8:	20070fec 	.word	0x20070fec
   807bc:	20070ff4 	.word	0x20070ff4

000807c0 <NVIC_EnableIRQ>:
{
   807c0:	b480      	push	{r7}
   807c2:	b083      	sub	sp, #12
   807c4:	af00      	add	r7, sp, #0
   807c6:	4603      	mov	r3, r0
   807c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   807ca:	4908      	ldr	r1, [pc, #32]	; (807ec <NVIC_EnableIRQ+0x2c>)
   807cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   807d0:	095b      	lsrs	r3, r3, #5
   807d2:	79fa      	ldrb	r2, [r7, #7]
   807d4:	f002 021f 	and.w	r2, r2, #31
   807d8:	2001      	movs	r0, #1
   807da:	fa00 f202 	lsl.w	r2, r0, r2
   807de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   807e2:	bf00      	nop
   807e4:	370c      	adds	r7, #12
   807e6:	46bd      	mov	sp, r7
   807e8:	bc80      	pop	{r7}
   807ea:	4770      	bx	lr
   807ec:	e000e100 	.word	0xe000e100

000807f0 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   807f0:	b480      	push	{r7}
   807f2:	b083      	sub	sp, #12
   807f4:	af00      	add	r7, sp, #0
   807f6:	4603      	mov	r3, r0
   807f8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   807fa:	4909      	ldr	r1, [pc, #36]	; (80820 <NVIC_ClearPendingIRQ+0x30>)
   807fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80800:	095b      	lsrs	r3, r3, #5
   80802:	79fa      	ldrb	r2, [r7, #7]
   80804:	f002 021f 	and.w	r2, r2, #31
   80808:	2001      	movs	r0, #1
   8080a:	fa00 f202 	lsl.w	r2, r0, r2
   8080e:	3360      	adds	r3, #96	; 0x60
   80810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80814:	bf00      	nop
   80816:	370c      	adds	r7, #12
   80818:	46bd      	mov	sp, r7
   8081a:	bc80      	pop	{r7}
   8081c:	4770      	bx	lr
   8081e:	bf00      	nop
   80820:	e000e100 	.word	0xe000e100

00080824 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80824:	b480      	push	{r7}
   80826:	b083      	sub	sp, #12
   80828:	af00      	add	r7, sp, #0
   8082a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8082c:	687b      	ldr	r3, [r7, #4]
   8082e:	2208      	movs	r2, #8
   80830:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80832:	687b      	ldr	r3, [r7, #4]
   80834:	2220      	movs	r2, #32
   80836:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80838:	687b      	ldr	r3, [r7, #4]
   8083a:	2204      	movs	r2, #4
   8083c:	601a      	str	r2, [r3, #0]
}
   8083e:	bf00      	nop
   80840:	370c      	adds	r7, #12
   80842:	46bd      	mov	sp, r7
   80844:	bc80      	pop	{r7}
   80846:	4770      	bx	lr

00080848 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80848:	b580      	push	{r7, lr}
   8084a:	b084      	sub	sp, #16
   8084c:	af00      	add	r7, sp, #0
   8084e:	6078      	str	r0, [r7, #4]
   80850:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80852:	2300      	movs	r3, #0
   80854:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80856:	687b      	ldr	r3, [r7, #4]
   80858:	f04f 32ff 	mov.w	r2, #4294967295
   8085c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8085e:	687b      	ldr	r3, [r7, #4]
   80860:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80862:	6878      	ldr	r0, [r7, #4]
   80864:	4b12      	ldr	r3, [pc, #72]	; (808b0 <twi_master_init+0x68>)
   80866:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80868:	6878      	ldr	r0, [r7, #4]
   8086a:	4b12      	ldr	r3, [pc, #72]	; (808b4 <twi_master_init+0x6c>)
   8086c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8086e:	683b      	ldr	r3, [r7, #0]
   80870:	6859      	ldr	r1, [r3, #4]
   80872:	683b      	ldr	r3, [r7, #0]
   80874:	681b      	ldr	r3, [r3, #0]
   80876:	461a      	mov	r2, r3
   80878:	6878      	ldr	r0, [r7, #4]
   8087a:	4b0f      	ldr	r3, [pc, #60]	; (808b8 <twi_master_init+0x70>)
   8087c:	4798      	blx	r3
   8087e:	4603      	mov	r3, r0
   80880:	2b01      	cmp	r3, #1
   80882:	d101      	bne.n	80888 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80884:	2301      	movs	r3, #1
   80886:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80888:	683b      	ldr	r3, [r7, #0]
   8088a:	7a5b      	ldrb	r3, [r3, #9]
   8088c:	2b01      	cmp	r3, #1
   8088e:	d102      	bne.n	80896 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80890:	687b      	ldr	r3, [r7, #4]
   80892:	2240      	movs	r2, #64	; 0x40
   80894:	601a      	str	r2, [r3, #0]
	}

    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   80896:	f44f 7150 	mov.w	r1, #832	; 0x340
   8089a:	6878      	ldr	r0, [r7, #4]
   8089c:	4b07      	ldr	r3, [pc, #28]	; (808bc <twi_master_init+0x74>)
   8089e:	4798      	blx	r3

    twiBusy = false;
   808a0:	4b07      	ldr	r3, [pc, #28]	; (808c0 <twi_master_init+0x78>)
   808a2:	2200      	movs	r2, #0
   808a4:	701a      	strb	r2, [r3, #0]

	return status;
   808a6:	68fb      	ldr	r3, [r7, #12]
}
   808a8:	4618      	mov	r0, r3
   808aa:	3710      	adds	r7, #16
   808ac:	46bd      	mov	sp, r7
   808ae:	bd80      	pop	{r7, pc}
   808b0:	00080d21 	.word	0x00080d21
   808b4:	00080825 	.word	0x00080825
   808b8:	000808c5 	.word	0x000808c5
   808bc:	00080cbd 	.word	0x00080cbd
   808c0:	20070f7c 	.word	0x20070f7c

000808c4 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   808c4:	b480      	push	{r7}
   808c6:	b089      	sub	sp, #36	; 0x24
   808c8:	af00      	add	r7, sp, #0
   808ca:	60f8      	str	r0, [r7, #12]
   808cc:	60b9      	str	r1, [r7, #8]
   808ce:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   808d0:	2300      	movs	r3, #0
   808d2:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   808d4:	68bb      	ldr	r3, [r7, #8]
   808d6:	4a34      	ldr	r2, [pc, #208]	; (809a8 <twi_set_speed+0xe4>)
   808d8:	4293      	cmp	r3, r2
   808da:	d901      	bls.n	808e0 <twi_set_speed+0x1c>
		return FAIL;
   808dc:	2301      	movs	r3, #1
   808de:	e05d      	b.n	8099c <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   808e0:	68bb      	ldr	r3, [r7, #8]
   808e2:	4a32      	ldr	r2, [pc, #200]	; (809ac <twi_set_speed+0xe8>)
   808e4:	4293      	cmp	r3, r2
   808e6:	d937      	bls.n	80958 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   808e8:	687b      	ldr	r3, [r7, #4]
   808ea:	4a31      	ldr	r2, [pc, #196]	; (809b0 <twi_set_speed+0xec>)
   808ec:	fba2 2303 	umull	r2, r3, r2, r3
   808f0:	0b9b      	lsrs	r3, r3, #14
   808f2:	3b04      	subs	r3, #4
   808f4:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   808f6:	68ba      	ldr	r2, [r7, #8]
   808f8:	4b2e      	ldr	r3, [pc, #184]	; (809b4 <twi_set_speed+0xf0>)
   808fa:	4413      	add	r3, r2
   808fc:	009b      	lsls	r3, r3, #2
   808fe:	687a      	ldr	r2, [r7, #4]
   80900:	fbb2 f3f3 	udiv	r3, r2, r3
   80904:	3b04      	subs	r3, #4
   80906:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80908:	e005      	b.n	80916 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   8090a:	69fb      	ldr	r3, [r7, #28]
   8090c:	3301      	adds	r3, #1
   8090e:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   80910:	697b      	ldr	r3, [r7, #20]
   80912:	085b      	lsrs	r3, r3, #1
   80914:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80916:	697b      	ldr	r3, [r7, #20]
   80918:	2bff      	cmp	r3, #255	; 0xff
   8091a:	d909      	bls.n	80930 <twi_set_speed+0x6c>
   8091c:	69fb      	ldr	r3, [r7, #28]
   8091e:	2b06      	cmp	r3, #6
   80920:	d9f3      	bls.n	8090a <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80922:	e005      	b.n	80930 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   80924:	69fb      	ldr	r3, [r7, #28]
   80926:	3301      	adds	r3, #1
   80928:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   8092a:	693b      	ldr	r3, [r7, #16]
   8092c:	085b      	lsrs	r3, r3, #1
   8092e:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80930:	693b      	ldr	r3, [r7, #16]
   80932:	2bff      	cmp	r3, #255	; 0xff
   80934:	d902      	bls.n	8093c <twi_set_speed+0x78>
   80936:	69fb      	ldr	r3, [r7, #28]
   80938:	2b06      	cmp	r3, #6
   8093a:	d9f3      	bls.n	80924 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   8093c:	697b      	ldr	r3, [r7, #20]
   8093e:	b2da      	uxtb	r2, r3
   80940:	693b      	ldr	r3, [r7, #16]
   80942:	021b      	lsls	r3, r3, #8
   80944:	b29b      	uxth	r3, r3
   80946:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   80948:	69fb      	ldr	r3, [r7, #28]
   8094a:	041b      	lsls	r3, r3, #16
   8094c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80950:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80952:	68fb      	ldr	r3, [r7, #12]
   80954:	611a      	str	r2, [r3, #16]
   80956:	e020      	b.n	8099a <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80958:	68bb      	ldr	r3, [r7, #8]
   8095a:	005b      	lsls	r3, r3, #1
   8095c:	687a      	ldr	r2, [r7, #4]
   8095e:	fbb2 f3f3 	udiv	r3, r2, r3
   80962:	3b04      	subs	r3, #4
   80964:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80966:	e005      	b.n	80974 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   80968:	69fb      	ldr	r3, [r7, #28]
   8096a:	3301      	adds	r3, #1
   8096c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   8096e:	69bb      	ldr	r3, [r7, #24]
   80970:	085b      	lsrs	r3, r3, #1
   80972:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80974:	69bb      	ldr	r3, [r7, #24]
   80976:	2bff      	cmp	r3, #255	; 0xff
   80978:	d902      	bls.n	80980 <twi_set_speed+0xbc>
   8097a:	69fb      	ldr	r3, [r7, #28]
   8097c:	2b06      	cmp	r3, #6
   8097e:	d9f3      	bls.n	80968 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80980:	69bb      	ldr	r3, [r7, #24]
   80982:	b2da      	uxtb	r2, r3
   80984:	69bb      	ldr	r3, [r7, #24]
   80986:	021b      	lsls	r3, r3, #8
   80988:	b29b      	uxth	r3, r3
   8098a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   8098c:	69fb      	ldr	r3, [r7, #28]
   8098e:	041b      	lsls	r3, r3, #16
   80990:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80994:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80996:	68fb      	ldr	r3, [r7, #12]
   80998:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   8099a:	2300      	movs	r3, #0
}
   8099c:	4618      	mov	r0, r3
   8099e:	3724      	adds	r7, #36	; 0x24
   809a0:	46bd      	mov	sp, r7
   809a2:	bc80      	pop	{r7}
   809a4:	4770      	bx	lr
   809a6:	bf00      	nop
   809a8:	00061a80 	.word	0x00061a80
   809ac:	0005dc00 	.word	0x0005dc00
   809b0:	057619f1 	.word	0x057619f1
   809b4:	3ffd1200 	.word	0x3ffd1200

000809b8 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   809b8:	b480      	push	{r7}
   809ba:	b085      	sub	sp, #20
   809bc:	af00      	add	r7, sp, #0
   809be:	6078      	str	r0, [r7, #4]
   809c0:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   809c2:	683b      	ldr	r3, [r7, #0]
   809c4:	2b00      	cmp	r3, #0
   809c6:	d101      	bne.n	809cc <twi_mk_addr+0x14>
		return 0;
   809c8:	2300      	movs	r3, #0
   809ca:	e01d      	b.n	80a08 <twi_mk_addr+0x50>

	val = addr[0];
   809cc:	687b      	ldr	r3, [r7, #4]
   809ce:	781b      	ldrb	r3, [r3, #0]
   809d0:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   809d2:	683b      	ldr	r3, [r7, #0]
   809d4:	2b01      	cmp	r3, #1
   809d6:	dd09      	ble.n	809ec <twi_mk_addr+0x34>
		val <<= 8;
   809d8:	68fb      	ldr	r3, [r7, #12]
   809da:	021b      	lsls	r3, r3, #8
   809dc:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   809de:	687b      	ldr	r3, [r7, #4]
   809e0:	3301      	adds	r3, #1
   809e2:	781b      	ldrb	r3, [r3, #0]
   809e4:	461a      	mov	r2, r3
   809e6:	68fb      	ldr	r3, [r7, #12]
   809e8:	4313      	orrs	r3, r2
   809ea:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   809ec:	683b      	ldr	r3, [r7, #0]
   809ee:	2b02      	cmp	r3, #2
   809f0:	dd09      	ble.n	80a06 <twi_mk_addr+0x4e>
		val <<= 8;
   809f2:	68fb      	ldr	r3, [r7, #12]
   809f4:	021b      	lsls	r3, r3, #8
   809f6:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   809f8:	687b      	ldr	r3, [r7, #4]
   809fa:	3302      	adds	r3, #2
   809fc:	781b      	ldrb	r3, [r3, #0]
   809fe:	461a      	mov	r2, r3
   80a00:	68fb      	ldr	r3, [r7, #12]
   80a02:	4313      	orrs	r3, r2
   80a04:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80a06:	68fb      	ldr	r3, [r7, #12]
}
   80a08:	4618      	mov	r0, r3
   80a0a:	3714      	adds	r7, #20
   80a0c:	46bd      	mov	sp, r7
   80a0e:	bc80      	pop	{r7}
   80a10:	4770      	bx	lr
	...

00080a14 <twi_is_busy>:

	return TWI_SUCCESS;
}

uint8_t twi_is_busy(void)
{
   80a14:	b480      	push	{r7}
   80a16:	af00      	add	r7, sp, #0
    return twiBusy;
   80a18:	4b02      	ldr	r3, [pc, #8]	; (80a24 <twi_is_busy+0x10>)
   80a1a:	781b      	ldrb	r3, [r3, #0]
}
   80a1c:	4618      	mov	r0, r3
   80a1e:	46bd      	mov	sp, r7
   80a20:	bc80      	pop	{r7}
   80a22:	4770      	bx	lr
   80a24:	20070f7c 	.word	0x20070f7c

00080a28 <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   80a28:	b480      	push	{r7}
   80a2a:	af00      	add	r7, sp, #0
    return &txPacket;
   80a2c:	4b02      	ldr	r3, [pc, #8]	; (80a38 <twi_get_tx_packet+0x10>)
}
   80a2e:	4618      	mov	r0, r3
   80a30:	46bd      	mov	sp, r7
   80a32:	bc80      	pop	{r7}
   80a34:	4770      	bx	lr
   80a36:	bf00      	nop
   80a38:	20070b74 	.word	0x20070b74

00080a3c <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   80a3c:	b580      	push	{r7, lr}
   80a3e:	b084      	sub	sp, #16
   80a40:	af00      	add	r7, sp, #0
   80a42:	6078      	str	r0, [r7, #4]
   80a44:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   80a46:	683b      	ldr	r3, [r7, #0]
   80a48:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80a4c:	2b00      	cmp	r3, #0
   80a4e:	d101      	bne.n	80a54 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   80a50:	2301      	movs	r3, #1
   80a52:	e040      	b.n	80ad6 <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   80a54:	4b22      	ldr	r3, [pc, #136]	; (80ae0 <twi_pdc_master_write+0xa4>)
   80a56:	2201      	movs	r2, #1
   80a58:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   80a5a:	683b      	ldr	r3, [r7, #0]
   80a5c:	3308      	adds	r3, #8
   80a5e:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   80a60:	683b      	ldr	r3, [r7, #0]
   80a62:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80a66:	3b01      	subs	r3, #1
   80a68:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   80a6a:	f107 0308 	add.w	r3, r7, #8
   80a6e:	2200      	movs	r2, #0
   80a70:	4619      	mov	r1, r3
   80a72:	481c      	ldr	r0, [pc, #112]	; (80ae4 <twi_pdc_master_write+0xa8>)
   80a74:	4b1c      	ldr	r3, [pc, #112]	; (80ae8 <twi_pdc_master_write+0xac>)
   80a76:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   80a78:	687b      	ldr	r3, [r7, #4]
   80a7a:	2200      	movs	r2, #0
   80a7c:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   80a7e:	683b      	ldr	r3, [r7, #0]
   80a80:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
   80a84:	041b      	lsls	r3, r3, #16
   80a86:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   80a8a:	683b      	ldr	r3, [r7, #0]
   80a8c:	685b      	ldr	r3, [r3, #4]
   80a8e:	021b      	lsls	r3, r3, #8
   80a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
   80a94:	431a      	orrs	r2, r3
   80a96:	687b      	ldr	r3, [r7, #4]
   80a98:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   80a9a:	687b      	ldr	r3, [r7, #4]
   80a9c:	2200      	movs	r2, #0
   80a9e:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80aa0:	683a      	ldr	r2, [r7, #0]
   80aa2:	683b      	ldr	r3, [r7, #0]
   80aa4:	685b      	ldr	r3, [r3, #4]
   80aa6:	4619      	mov	r1, r3
   80aa8:	4610      	mov	r0, r2
   80aaa:	4b10      	ldr	r3, [pc, #64]	; (80aec <twi_pdc_master_write+0xb0>)
   80aac:	4798      	blx	r3
   80aae:	4602      	mov	r2, r0
   80ab0:	687b      	ldr	r3, [r7, #4]
   80ab2:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   80ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
   80ab8:	480a      	ldr	r0, [pc, #40]	; (80ae4 <twi_pdc_master_write+0xa8>)
   80aba:	4b0d      	ldr	r3, [pc, #52]	; (80af0 <twi_pdc_master_write+0xb4>)
   80abc:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   80abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80ac2:	6878      	ldr	r0, [r7, #4]
   80ac4:	4b0b      	ldr	r3, [pc, #44]	; (80af4 <twi_pdc_master_write+0xb8>)
   80ac6:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   80ac8:	2016      	movs	r0, #22
   80aca:	4b0b      	ldr	r3, [pc, #44]	; (80af8 <twi_pdc_master_write+0xbc>)
   80acc:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   80ace:	2016      	movs	r0, #22
   80ad0:	4b0a      	ldr	r3, [pc, #40]	; (80afc <twi_pdc_master_write+0xc0>)
   80ad2:	4798      	blx	r3

    return TWI_SUCCESS;
   80ad4:	2300      	movs	r3, #0
}
   80ad6:	4618      	mov	r0, r3
   80ad8:	3710      	adds	r7, #16
   80ada:	46bd      	mov	sp, r7
   80adc:	bd80      	pop	{r7, pc}
   80ade:	bf00      	nop
   80ae0:	20070f7c 	.word	0x20070f7c
   80ae4:	4008c100 	.word	0x4008c100
   80ae8:	000801a9 	.word	0x000801a9
   80aec:	000809b9 	.word	0x000809b9
   80af0:	000801eb 	.word	0x000801eb
   80af4:	00080cbd 	.word	0x00080cbd
   80af8:	000807f1 	.word	0x000807f1
   80afc:	000807c1 	.word	0x000807c1

00080b00 <twi_set_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_tx_callback(void (*callback)(void))
{
   80b00:	b480      	push	{r7}
   80b02:	b083      	sub	sp, #12
   80b04:	af00      	add	r7, sp, #0
   80b06:	6078      	str	r0, [r7, #4]
    txCallback = callback;
   80b08:	4a03      	ldr	r2, [pc, #12]	; (80b18 <twi_set_tx_callback+0x18>)
   80b0a:	687b      	ldr	r3, [r7, #4]
   80b0c:	6013      	str	r3, [r2, #0]
}
   80b0e:	bf00      	nop
   80b10:	370c      	adds	r7, #12
   80b12:	46bd      	mov	sp, r7
   80b14:	bc80      	pop	{r7}
   80b16:	4770      	bx	lr
   80b18:	20070f80 	.word	0x20070f80

00080b1c <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   80b1c:	b590      	push	{r4, r7, lr}
   80b1e:	b083      	sub	sp, #12
   80b20:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   80b22:	485a      	ldr	r0, [pc, #360]	; (80c8c <TWI0_Handler+0x170>)
   80b24:	4b5a      	ldr	r3, [pc, #360]	; (80c90 <TWI0_Handler+0x174>)
   80b26:	4798      	blx	r3
   80b28:	4604      	mov	r4, r0
   80b2a:	4858      	ldr	r0, [pc, #352]	; (80c8c <TWI0_Handler+0x170>)
   80b2c:	4b59      	ldr	r3, [pc, #356]	; (80c94 <TWI0_Handler+0x178>)
   80b2e:	4798      	blx	r3
   80b30:	4603      	mov	r3, r0
   80b32:	4023      	ands	r3, r4
   80b34:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   80b36:	687b      	ldr	r3, [r7, #4]
   80b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   80b3c:	2b00      	cmp	r3, #0
   80b3e:	d014      	beq.n	80b6a <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   80b40:	f44f 7100 	mov.w	r1, #512	; 0x200
   80b44:	4854      	ldr	r0, [pc, #336]	; (80c98 <TWI0_Handler+0x17c>)
   80b46:	4b55      	ldr	r3, [pc, #340]	; (80c9c <TWI0_Handler+0x180>)
   80b48:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   80b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80b4e:	484f      	ldr	r0, [pc, #316]	; (80c8c <TWI0_Handler+0x170>)
   80b50:	4b53      	ldr	r3, [pc, #332]	; (80ca0 <TWI0_Handler+0x184>)
   80b52:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   80b54:	2104      	movs	r1, #4
   80b56:	484d      	ldr	r0, [pc, #308]	; (80c8c <TWI0_Handler+0x170>)
   80b58:	4b52      	ldr	r3, [pc, #328]	; (80ca4 <TWI0_Handler+0x188>)
   80b5a:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   80b5c:	484b      	ldr	r0, [pc, #300]	; (80c8c <TWI0_Handler+0x170>)
   80b5e:	4b4c      	ldr	r3, [pc, #304]	; (80c90 <TWI0_Handler+0x174>)
   80b60:	4798      	blx	r3
   80b62:	4602      	mov	r2, r0
   80b64:	687b      	ldr	r3, [r7, #4]
   80b66:	4313      	orrs	r3, r2
   80b68:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   80b6a:	687b      	ldr	r3, [r7, #4]
   80b6c:	f003 0304 	and.w	r3, r3, #4
   80b70:	2b00      	cmp	r3, #0
   80b72:	d01a      	beq.n	80baa <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   80b74:	2104      	movs	r1, #4
   80b76:	4845      	ldr	r0, [pc, #276]	; (80c8c <TWI0_Handler+0x170>)
   80b78:	4b49      	ldr	r3, [pc, #292]	; (80ca0 <TWI0_Handler+0x184>)
   80b7a:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   80b7c:	4b43      	ldr	r3, [pc, #268]	; (80c8c <TWI0_Handler+0x170>)
   80b7e:	2202      	movs	r2, #2
   80b80:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   80b82:	4a42      	ldr	r2, [pc, #264]	; (80c8c <TWI0_Handler+0x170>)
   80b84:	4b48      	ldr	r3, [pc, #288]	; (80ca8 <TWI0_Handler+0x18c>)
   80b86:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80b8a:	3b01      	subs	r3, #1
   80b8c:	4946      	ldr	r1, [pc, #280]	; (80ca8 <TWI0_Handler+0x18c>)
   80b8e:	440b      	add	r3, r1
   80b90:	7a1b      	ldrb	r3, [r3, #8]
   80b92:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   80b94:	2101      	movs	r1, #1
   80b96:	483d      	ldr	r0, [pc, #244]	; (80c8c <TWI0_Handler+0x170>)
   80b98:	4b42      	ldr	r3, [pc, #264]	; (80ca4 <TWI0_Handler+0x188>)
   80b9a:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   80b9c:	483b      	ldr	r0, [pc, #236]	; (80c8c <TWI0_Handler+0x170>)
   80b9e:	4b3c      	ldr	r3, [pc, #240]	; (80c90 <TWI0_Handler+0x174>)
   80ba0:	4798      	blx	r3
   80ba2:	4602      	mov	r2, r0
   80ba4:	687b      	ldr	r3, [r7, #4]
   80ba6:	4313      	orrs	r3, r2
   80ba8:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   80baa:	687b      	ldr	r3, [r7, #4]
   80bac:	f003 0301 	and.w	r3, r3, #1
   80bb0:	2b00      	cmp	r3, #0
   80bb2:	d00d      	beq.n	80bd0 <TWI0_Handler+0xb4>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   80bb4:	2101      	movs	r1, #1
   80bb6:	4835      	ldr	r0, [pc, #212]	; (80c8c <TWI0_Handler+0x170>)
   80bb8:	4b39      	ldr	r3, [pc, #228]	; (80ca0 <TWI0_Handler+0x184>)
   80bba:	4798      	blx	r3

        // If defined, call the connected function.
        if(txCallback != NULL)
   80bbc:	4b3b      	ldr	r3, [pc, #236]	; (80cac <TWI0_Handler+0x190>)
   80bbe:	681b      	ldr	r3, [r3, #0]
   80bc0:	2b00      	cmp	r3, #0
   80bc2:	d002      	beq.n	80bca <TWI0_Handler+0xae>
        {
            txCallback();
   80bc4:	4b39      	ldr	r3, [pc, #228]	; (80cac <TWI0_Handler+0x190>)
   80bc6:	681b      	ldr	r3, [r3, #0]
   80bc8:	4798      	blx	r3
        }

        twiBusy = false;
   80bca:	4b39      	ldr	r3, [pc, #228]	; (80cb0 <TWI0_Handler+0x194>)
   80bcc:	2200      	movs	r2, #0
   80bce:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   80bd0:	687b      	ldr	r3, [r7, #4]
   80bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   80bd6:	2b00      	cmp	r3, #0
   80bd8:	d016      	beq.n	80c08 <TWI0_Handler+0xec>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   80bda:	2102      	movs	r1, #2
   80bdc:	482e      	ldr	r0, [pc, #184]	; (80c98 <TWI0_Handler+0x17c>)
   80bde:	4b2f      	ldr	r3, [pc, #188]	; (80c9c <TWI0_Handler+0x180>)
   80be0:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   80be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80be6:	4829      	ldr	r0, [pc, #164]	; (80c8c <TWI0_Handler+0x170>)
   80be8:	4b2d      	ldr	r3, [pc, #180]	; (80ca0 <TWI0_Handler+0x184>)
   80bea:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   80bec:	2102      	movs	r1, #2
   80bee:	4827      	ldr	r0, [pc, #156]	; (80c8c <TWI0_Handler+0x170>)
   80bf0:	4b2c      	ldr	r3, [pc, #176]	; (80ca4 <TWI0_Handler+0x188>)
   80bf2:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   80bf4:	4b25      	ldr	r3, [pc, #148]	; (80c8c <TWI0_Handler+0x170>)
   80bf6:	2202      	movs	r2, #2
   80bf8:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   80bfa:	4824      	ldr	r0, [pc, #144]	; (80c8c <TWI0_Handler+0x170>)
   80bfc:	4b24      	ldr	r3, [pc, #144]	; (80c90 <TWI0_Handler+0x174>)
   80bfe:	4798      	blx	r3
   80c00:	4602      	mov	r2, r0
   80c02:	687b      	ldr	r3, [r7, #4]
   80c04:	4313      	orrs	r3, r2
   80c06:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   80c08:	687b      	ldr	r3, [r7, #4]
   80c0a:	f003 0302 	and.w	r3, r3, #2
   80c0e:	2b00      	cmp	r3, #0
   80c10:	d018      	beq.n	80c44 <TWI0_Handler+0x128>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   80c12:	2102      	movs	r1, #2
   80c14:	481d      	ldr	r0, [pc, #116]	; (80c8c <TWI0_Handler+0x170>)
   80c16:	4b22      	ldr	r3, [pc, #136]	; (80ca0 <TWI0_Handler+0x184>)
   80c18:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   80c1a:	4b26      	ldr	r3, [pc, #152]	; (80cb4 <TWI0_Handler+0x198>)
   80c1c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80c20:	3b01      	subs	r3, #1
   80c22:	4a1a      	ldr	r2, [pc, #104]	; (80c8c <TWI0_Handler+0x170>)
   80c24:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80c26:	b2d1      	uxtb	r1, r2
   80c28:	4a22      	ldr	r2, [pc, #136]	; (80cb4 <TWI0_Handler+0x198>)
   80c2a:	4413      	add	r3, r2
   80c2c:	460a      	mov	r2, r1
   80c2e:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(rxCallback != NULL)
   80c30:	4b21      	ldr	r3, [pc, #132]	; (80cb8 <TWI0_Handler+0x19c>)
   80c32:	681b      	ldr	r3, [r3, #0]
   80c34:	2b00      	cmp	r3, #0
   80c36:	d002      	beq.n	80c3e <TWI0_Handler+0x122>
        {
            rxCallback();
   80c38:	4b1f      	ldr	r3, [pc, #124]	; (80cb8 <TWI0_Handler+0x19c>)
   80c3a:	681b      	ldr	r3, [r3, #0]
   80c3c:	4798      	blx	r3
        }

        twiBusy = false;
   80c3e:	4b1c      	ldr	r3, [pc, #112]	; (80cb0 <TWI0_Handler+0x194>)
   80c40:	2200      	movs	r2, #0
   80c42:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   80c44:	687b      	ldr	r3, [r7, #4]
   80c46:	f403 7350 	and.w	r3, r3, #832	; 0x340
   80c4a:	2b00      	cmp	r3, #0
   80c4c:	d019      	beq.n	80c82 <TWI0_Handler+0x166>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   80c4e:	f240 2102 	movw	r1, #514	; 0x202
   80c52:	4811      	ldr	r0, [pc, #68]	; (80c98 <TWI0_Handler+0x17c>)
   80c54:	4b11      	ldr	r3, [pc, #68]	; (80c9c <TWI0_Handler+0x180>)
   80c56:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   80c58:	687b      	ldr	r3, [r7, #4]
   80c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
   80c5e:	2b00      	cmp	r3, #0
   80c60:	d102      	bne.n	80c68 <TWI0_Handler+0x14c>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   80c62:	4b0a      	ldr	r3, [pc, #40]	; (80c8c <TWI0_Handler+0x170>)
   80c64:	2202      	movs	r2, #2
   80c66:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   80c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80c6c:	4807      	ldr	r0, [pc, #28]	; (80c8c <TWI0_Handler+0x170>)
   80c6e:	4b0c      	ldr	r3, [pc, #48]	; (80ca0 <TWI0_Handler+0x184>)
   80c70:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   80c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80c76:	4805      	ldr	r0, [pc, #20]	; (80c8c <TWI0_Handler+0x170>)
   80c78:	4b09      	ldr	r3, [pc, #36]	; (80ca0 <TWI0_Handler+0x184>)
   80c7a:	4798      	blx	r3

        twiBusy = false;
   80c7c:	4b0c      	ldr	r3, [pc, #48]	; (80cb0 <TWI0_Handler+0x194>)
   80c7e:	2200      	movs	r2, #0
   80c80:	701a      	strb	r2, [r3, #0]
	}
}
   80c82:	bf00      	nop
   80c84:	370c      	adds	r7, #12
   80c86:	46bd      	mov	sp, r7
   80c88:	bd90      	pop	{r4, r7, pc}
   80c8a:	bf00      	nop
   80c8c:	4008c000 	.word	0x4008c000
   80c90:	00080cf5 	.word	0x00080cf5
   80c94:	00080d0b 	.word	0x00080d0b
   80c98:	4008c100 	.word	0x4008c100
   80c9c:	0008020b 	.word	0x0008020b
   80ca0:	00080cd7 	.word	0x00080cd7
   80ca4:	00080cbd 	.word	0x00080cbd
   80ca8:	20070b74 	.word	0x20070b74
   80cac:	20070f80 	.word	0x20070f80
   80cb0:	20070f7c 	.word	0x20070f7c
   80cb4:	20070d78 	.word	0x20070d78
   80cb8:	20070f84 	.word	0x20070f84

00080cbc <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   80cbc:	b480      	push	{r7}
   80cbe:	b083      	sub	sp, #12
   80cc0:	af00      	add	r7, sp, #0
   80cc2:	6078      	str	r0, [r7, #4]
   80cc4:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   80cc6:	687b      	ldr	r3, [r7, #4]
   80cc8:	683a      	ldr	r2, [r7, #0]
   80cca:	625a      	str	r2, [r3, #36]	; 0x24
}
   80ccc:	bf00      	nop
   80cce:	370c      	adds	r7, #12
   80cd0:	46bd      	mov	sp, r7
   80cd2:	bc80      	pop	{r7}
   80cd4:	4770      	bx	lr

00080cd6 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   80cd6:	b480      	push	{r7}
   80cd8:	b083      	sub	sp, #12
   80cda:	af00      	add	r7, sp, #0
   80cdc:	6078      	str	r0, [r7, #4]
   80cde:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   80ce0:	687b      	ldr	r3, [r7, #4]
   80ce2:	683a      	ldr	r2, [r7, #0]
   80ce4:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   80ce6:	687b      	ldr	r3, [r7, #4]
   80ce8:	6a1b      	ldr	r3, [r3, #32]
}
   80cea:	bf00      	nop
   80cec:	370c      	adds	r7, #12
   80cee:	46bd      	mov	sp, r7
   80cf0:	bc80      	pop	{r7}
   80cf2:	4770      	bx	lr

00080cf4 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   80cf4:	b480      	push	{r7}
   80cf6:	b083      	sub	sp, #12
   80cf8:	af00      	add	r7, sp, #0
   80cfa:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   80cfc:	687b      	ldr	r3, [r7, #4]
   80cfe:	6a1b      	ldr	r3, [r3, #32]
}
   80d00:	4618      	mov	r0, r3
   80d02:	370c      	adds	r7, #12
   80d04:	46bd      	mov	sp, r7
   80d06:	bc80      	pop	{r7}
   80d08:	4770      	bx	lr

00080d0a <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   80d0a:	b480      	push	{r7}
   80d0c:	b083      	sub	sp, #12
   80d0e:	af00      	add	r7, sp, #0
   80d10:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   80d12:	687b      	ldr	r3, [r7, #4]
   80d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   80d16:	4618      	mov	r0, r3
   80d18:	370c      	adds	r7, #12
   80d1a:	46bd      	mov	sp, r7
   80d1c:	bc80      	pop	{r7}
   80d1e:	4770      	bx	lr

00080d20 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   80d20:	b480      	push	{r7}
   80d22:	b083      	sub	sp, #12
   80d24:	af00      	add	r7, sp, #0
   80d26:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80d28:	687b      	ldr	r3, [r7, #4]
   80d2a:	2280      	movs	r2, #128	; 0x80
   80d2c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   80d2e:	687b      	ldr	r3, [r7, #4]
   80d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   80d32:	bf00      	nop
   80d34:	370c      	adds	r7, #12
   80d36:	46bd      	mov	sp, r7
   80d38:	bc80      	pop	{r7}
   80d3a:	4770      	bx	lr

00080d3c <osc_get_rate>:
{
   80d3c:	b480      	push	{r7}
   80d3e:	b083      	sub	sp, #12
   80d40:	af00      	add	r7, sp, #0
   80d42:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80d44:	687b      	ldr	r3, [r7, #4]
   80d46:	2b07      	cmp	r3, #7
   80d48:	d825      	bhi.n	80d96 <osc_get_rate+0x5a>
   80d4a:	a201      	add	r2, pc, #4	; (adr r2, 80d50 <osc_get_rate+0x14>)
   80d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d50:	00080d71 	.word	0x00080d71
   80d54:	00080d77 	.word	0x00080d77
   80d58:	00080d7d 	.word	0x00080d7d
   80d5c:	00080d83 	.word	0x00080d83
   80d60:	00080d87 	.word	0x00080d87
   80d64:	00080d8b 	.word	0x00080d8b
   80d68:	00080d8f 	.word	0x00080d8f
   80d6c:	00080d93 	.word	0x00080d93
		return OSC_SLCK_32K_RC_HZ;
   80d70:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80d74:	e010      	b.n	80d98 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   80d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80d7a:	e00d      	b.n	80d98 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   80d7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80d80:	e00a      	b.n	80d98 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   80d82:	4b08      	ldr	r3, [pc, #32]	; (80da4 <osc_get_rate+0x68>)
   80d84:	e008      	b.n	80d98 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   80d86:	4b08      	ldr	r3, [pc, #32]	; (80da8 <osc_get_rate+0x6c>)
   80d88:	e006      	b.n	80d98 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   80d8a:	4b08      	ldr	r3, [pc, #32]	; (80dac <osc_get_rate+0x70>)
   80d8c:	e004      	b.n	80d98 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   80d8e:	4b07      	ldr	r3, [pc, #28]	; (80dac <osc_get_rate+0x70>)
   80d90:	e002      	b.n	80d98 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   80d92:	4b06      	ldr	r3, [pc, #24]	; (80dac <osc_get_rate+0x70>)
   80d94:	e000      	b.n	80d98 <osc_get_rate+0x5c>
	return 0;
   80d96:	2300      	movs	r3, #0
}
   80d98:	4618      	mov	r0, r3
   80d9a:	370c      	adds	r7, #12
   80d9c:	46bd      	mov	sp, r7
   80d9e:	bc80      	pop	{r7}
   80da0:	4770      	bx	lr
   80da2:	bf00      	nop
   80da4:	003d0900 	.word	0x003d0900
   80da8:	007a1200 	.word	0x007a1200
   80dac:	00b71b00 	.word	0x00b71b00

00080db0 <sysclk_get_main_hz>:
{
   80db0:	b580      	push	{r7, lr}
   80db2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   80db4:	2006      	movs	r0, #6
   80db6:	4b04      	ldr	r3, [pc, #16]	; (80dc8 <sysclk_get_main_hz+0x18>)
   80db8:	4798      	blx	r3
   80dba:	4602      	mov	r2, r0
   80dbc:	4613      	mov	r3, r2
   80dbe:	00db      	lsls	r3, r3, #3
   80dc0:	1a9b      	subs	r3, r3, r2
   80dc2:	005b      	lsls	r3, r3, #1
}
   80dc4:	4618      	mov	r0, r3
   80dc6:	bd80      	pop	{r7, pc}
   80dc8:	00080d3d 	.word	0x00080d3d

00080dcc <sysclk_get_peripheral_hz>:
{
   80dcc:	b580      	push	{r7, lr}
   80dce:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   80dd0:	4b02      	ldr	r3, [pc, #8]	; (80ddc <sysclk_get_peripheral_hz+0x10>)
   80dd2:	4798      	blx	r3
   80dd4:	4603      	mov	r3, r0
   80dd6:	085b      	lsrs	r3, r3, #1
}
   80dd8:	4618      	mov	r0, r3
   80dda:	bd80      	pop	{r7, pc}
   80ddc:	00080db1 	.word	0x00080db1

00080de0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80de0:	b580      	push	{r7, lr}
   80de2:	b082      	sub	sp, #8
   80de4:	af00      	add	r7, sp, #0
   80de6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80de8:	6878      	ldr	r0, [r7, #4]
   80dea:	4b03      	ldr	r3, [pc, #12]	; (80df8 <sysclk_enable_peripheral_clock+0x18>)
   80dec:	4798      	blx	r3
}
   80dee:	bf00      	nop
   80df0:	3708      	adds	r7, #8
   80df2:	46bd      	mov	sp, r7
   80df4:	bd80      	pop	{r7, pc}
   80df6:	bf00      	nop
   80df8:	0008297d 	.word	0x0008297d

00080dfc <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   80dfc:	b580      	push	{r7, lr}
   80dfe:	b082      	sub	sp, #8
   80e00:	af00      	add	r7, sp, #0
   80e02:	6078      	str	r0, [r7, #4]
   80e04:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   80e06:	4b10      	ldr	r3, [pc, #64]	; (80e48 <twi_master_setup+0x4c>)
   80e08:	4798      	blx	r3
   80e0a:	4602      	mov	r2, r0
   80e0c:	683b      	ldr	r3, [r7, #0]
   80e0e:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   80e10:	683b      	ldr	r3, [r7, #0]
   80e12:	2200      	movs	r2, #0
   80e14:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   80e16:	687b      	ldr	r3, [r7, #4]
   80e18:	4a0c      	ldr	r2, [pc, #48]	; (80e4c <twi_master_setup+0x50>)
   80e1a:	4293      	cmp	r3, r2
   80e1c:	d103      	bne.n	80e26 <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   80e1e:	2016      	movs	r0, #22
   80e20:	4b0b      	ldr	r3, [pc, #44]	; (80e50 <twi_master_setup+0x54>)
   80e22:	4798      	blx	r3
   80e24:	e006      	b.n	80e34 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   80e26:	687b      	ldr	r3, [r7, #4]
   80e28:	4a0a      	ldr	r2, [pc, #40]	; (80e54 <twi_master_setup+0x58>)
   80e2a:	4293      	cmp	r3, r2
   80e2c:	d102      	bne.n	80e34 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   80e2e:	2017      	movs	r0, #23
   80e30:	4b07      	ldr	r3, [pc, #28]	; (80e50 <twi_master_setup+0x54>)
   80e32:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80e34:	6839      	ldr	r1, [r7, #0]
   80e36:	6878      	ldr	r0, [r7, #4]
   80e38:	4b07      	ldr	r3, [pc, #28]	; (80e58 <twi_master_setup+0x5c>)
   80e3a:	4798      	blx	r3
   80e3c:	4603      	mov	r3, r0
}
   80e3e:	4618      	mov	r0, r3
   80e40:	3708      	adds	r7, #8
   80e42:	46bd      	mov	sp, r7
   80e44:	bd80      	pop	{r7, pc}
   80e46:	bf00      	nop
   80e48:	00080dcd 	.word	0x00080dcd
   80e4c:	4008c000 	.word	0x4008c000
   80e50:	00080de1 	.word	0x00080de1
   80e54:	40090000 	.word	0x40090000
   80e58:	00080849 	.word	0x00080849

00080e5c <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   80e5c:	b580      	push	{r7, lr}
   80e5e:	b082      	sub	sp, #8
   80e60:	af00      	add	r7, sp, #0
    twi_package_t *tx_packet = twi_get_tx_packet();
   80e62:	4b29      	ldr	r3, [pc, #164]	; (80f08 <lcd_init+0xac>)
   80e64:	4798      	blx	r3
   80e66:	6078      	str	r0, [r7, #4]

    tx_packet->chip = 0x27;
   80e68:	687b      	ldr	r3, [r7, #4]
   80e6a:	2227      	movs	r2, #39	; 0x27
   80e6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
    tx_packet->addr[0] = 0x00;
   80e70:	687b      	ldr	r3, [r7, #4]
   80e72:	2200      	movs	r2, #0
   80e74:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   80e76:	687b      	ldr	r3, [r7, #4]
   80e78:	2200      	movs	r2, #0
   80e7a:	605a      	str	r2, [r3, #4]
    
    twi_set_tx_callback(lcd_callback);
   80e7c:	4823      	ldr	r0, [pc, #140]	; (80f0c <lcd_init+0xb0>)
   80e7e:	4b24      	ldr	r3, [pc, #144]	; (80f10 <lcd_init+0xb4>)
   80e80:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   80e82:	220c      	movs	r2, #12
   80e84:	2100      	movs	r1, #0
   80e86:	4823      	ldr	r0, [pc, #140]	; (80f14 <lcd_init+0xb8>)
   80e88:	4b23      	ldr	r3, [pc, #140]	; (80f18 <lcd_init+0xbc>)
   80e8a:	4798      	blx	r3
    twiConfig.speed = 100000;
   80e8c:	4b21      	ldr	r3, [pc, #132]	; (80f14 <lcd_init+0xb8>)
   80e8e:	4a23      	ldr	r2, [pc, #140]	; (80f1c <lcd_init+0xc0>)
   80e90:	605a      	str	r2, [r3, #4]
    twi_master_setup(TWI0, &twiConfig);
   80e92:	4920      	ldr	r1, [pc, #128]	; (80f14 <lcd_init+0xb8>)
   80e94:	4822      	ldr	r0, [pc, #136]	; (80f20 <lcd_init+0xc4>)
   80e96:	4b23      	ldr	r3, [pc, #140]	; (80f24 <lcd_init+0xc8>)
   80e98:	4798      	blx	r3

    backlight = LCD_LIGHT_OFF;
   80e9a:	4b23      	ldr	r3, [pc, #140]	; (80f28 <lcd_init+0xcc>)
   80e9c:	2200      	movs	r2, #0
   80e9e:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   80ea0:	2103      	movs	r1, #3
   80ea2:	2000      	movs	r0, #0
   80ea4:	4b21      	ldr	r3, [pc, #132]	; (80f2c <lcd_init+0xd0>)
   80ea6:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   80ea8:	2006      	movs	r0, #6
   80eaa:	4b21      	ldr	r3, [pc, #132]	; (80f30 <lcd_init+0xd4>)
   80eac:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   80eae:	2103      	movs	r1, #3
   80eb0:	2000      	movs	r0, #0
   80eb2:	4b1e      	ldr	r3, [pc, #120]	; (80f2c <lcd_init+0xd0>)
   80eb4:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   80eb6:	2006      	movs	r0, #6
   80eb8:	4b1d      	ldr	r3, [pc, #116]	; (80f30 <lcd_init+0xd4>)
   80eba:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   80ebc:	2103      	movs	r1, #3
   80ebe:	2000      	movs	r0, #0
   80ec0:	4b1a      	ldr	r3, [pc, #104]	; (80f2c <lcd_init+0xd0>)
   80ec2:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   80ec4:	2006      	movs	r0, #6
   80ec6:	4b1a      	ldr	r3, [pc, #104]	; (80f30 <lcd_init+0xd4>)
   80ec8:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   80eca:	2102      	movs	r1, #2
   80ecc:	2000      	movs	r0, #0
   80ece:	4b17      	ldr	r3, [pc, #92]	; (80f2c <lcd_init+0xd0>)
   80ed0:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   80ed2:	2128      	movs	r1, #40	; 0x28
   80ed4:	2000      	movs	r0, #0
   80ed6:	4b17      	ldr	r3, [pc, #92]	; (80f34 <lcd_init+0xd8>)
   80ed8:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   80eda:	2108      	movs	r1, #8
   80edc:	2000      	movs	r0, #0
   80ede:	4b15      	ldr	r3, [pc, #84]	; (80f34 <lcd_init+0xd8>)
   80ee0:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   80ee2:	2101      	movs	r1, #1
   80ee4:	2000      	movs	r0, #0
   80ee6:	4b13      	ldr	r3, [pc, #76]	; (80f34 <lcd_init+0xd8>)
   80ee8:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   80eea:	2003      	movs	r0, #3
   80eec:	4b10      	ldr	r3, [pc, #64]	; (80f30 <lcd_init+0xd4>)
   80eee:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   80ef0:	2106      	movs	r1, #6
   80ef2:	2000      	movs	r0, #0
   80ef4:	4b0f      	ldr	r3, [pc, #60]	; (80f34 <lcd_init+0xd8>)
   80ef6:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   80ef8:	210c      	movs	r1, #12
   80efa:	2000      	movs	r0, #0
   80efc:	4b0d      	ldr	r3, [pc, #52]	; (80f34 <lcd_init+0xd8>)
   80efe:	4798      	blx	r3
}
   80f00:	bf00      	nop
   80f02:	3708      	adds	r7, #8
   80f04:	46bd      	mov	sp, r7
   80f06:	bd80      	pop	{r7, pc}
   80f08:	00080a29 	.word	0x00080a29
   80f0c:	00081619 	.word	0x00081619
   80f10:	00080b01 	.word	0x00080b01
   80f14:	20070f94 	.word	0x20070f94
   80f18:	00083f7d 	.word	0x00083f7d
   80f1c:	000186a0 	.word	0x000186a0
   80f20:	4008c000 	.word	0x4008c000
   80f24:	00080dfd 	.word	0x00080dfd
   80f28:	20070f88 	.word	0x20070f88
   80f2c:	000813f1 	.word	0x000813f1
   80f30:	00081ed9 	.word	0x00081ed9
   80f34:	000814ed 	.word	0x000814ed

00080f38 <lcd_set_backlight>:

void lcd_set_backlight(backlight_t state)
{
   80f38:	b580      	push	{r7, lr}
   80f3a:	b082      	sub	sp, #8
   80f3c:	af00      	add	r7, sp, #0
   80f3e:	4603      	mov	r3, r0
   80f40:	71fb      	strb	r3, [r7, #7]
    backlight = state;
   80f42:	4a07      	ldr	r2, [pc, #28]	; (80f60 <lcd_set_backlight+0x28>)
   80f44:	79fb      	ldrb	r3, [r7, #7]
   80f46:	7013      	strb	r3, [r2, #0]
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   80f48:	2101      	movs	r1, #1
   80f4a:	2000      	movs	r0, #0
   80f4c:	4b05      	ldr	r3, [pc, #20]	; (80f64 <lcd_set_backlight+0x2c>)
   80f4e:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   80f50:	2003      	movs	r0, #3
   80f52:	4b05      	ldr	r3, [pc, #20]	; (80f68 <lcd_set_backlight+0x30>)
   80f54:	4798      	blx	r3
}
   80f56:	bf00      	nop
   80f58:	3708      	adds	r7, #8
   80f5a:	46bd      	mov	sp, r7
   80f5c:	bd80      	pop	{r7, pc}
   80f5e:	bf00      	nop
   80f60:	20070f88 	.word	0x20070f88
   80f64:	000814ed 	.word	0x000814ed
   80f68:	00081ed9 	.word	0x00081ed9

00080f6c <lcd_clear>:

void lcd_clear(void)
{
   80f6c:	b580      	push	{r7, lr}
   80f6e:	af00      	add	r7, sp, #0
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   80f70:	2101      	movs	r1, #1
   80f72:	2000      	movs	r0, #0
   80f74:	4b03      	ldr	r3, [pc, #12]	; (80f84 <lcd_clear+0x18>)
   80f76:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   80f78:	2003      	movs	r0, #3
   80f7a:	4b03      	ldr	r3, [pc, #12]	; (80f88 <lcd_clear+0x1c>)
   80f7c:	4798      	blx	r3
}
   80f7e:	bf00      	nop
   80f80:	bd80      	pop	{r7, pc}
   80f82:	bf00      	nop
   80f84:	000814ed 	.word	0x000814ed
   80f88:	00081ed9 	.word	0x00081ed9

00080f8c <lcd_print_s>:
    sprintf(str, "%10lu", data);
    lcd_print_s(line, col, str);
}

void lcd_print_s(int8_t line, uint8_t col, const char* str)
{
   80f8c:	b590      	push	{r4, r7, lr}
   80f8e:	b087      	sub	sp, #28
   80f90:	af00      	add	r7, sp, #0
   80f92:	4603      	mov	r3, r0
   80f94:	603a      	str	r2, [r7, #0]
   80f96:	71fb      	strb	r3, [r7, #7]
   80f98:	460b      	mov	r3, r1
   80f9a:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   80f9c:	4b76      	ldr	r3, [pc, #472]	; (81178 <lcd_print_s+0x1ec>)
   80f9e:	4798      	blx	r3
   80fa0:	6138      	str	r0, [r7, #16]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    
    while(lcdIsBusy | twi_is_busy())
   80fa2:	e019      	b.n	80fd8 <lcd_print_s+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   80fa4:	4b75      	ldr	r3, [pc, #468]	; (8117c <lcd_print_s+0x1f0>)
   80fa6:	4798      	blx	r3
   80fa8:	4602      	mov	r2, r0
   80faa:	4b75      	ldr	r3, [pc, #468]	; (81180 <lcd_print_s+0x1f4>)
   80fac:	681b      	ldr	r3, [r3, #0]
   80fae:	1ad3      	subs	r3, r2, r3
   80fb0:	2b64      	cmp	r3, #100	; 0x64
   80fb2:	d911      	bls.n	80fd8 <lcd_print_s+0x4c>
        {
            lcdIsBusy = false;
   80fb4:	4b73      	ldr	r3, [pc, #460]	; (81184 <lcd_print_s+0x1f8>)
   80fb6:	2200      	movs	r2, #0
   80fb8:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   80fba:	4b73      	ldr	r3, [pc, #460]	; (81188 <lcd_print_s+0x1fc>)
   80fbc:	681b      	ldr	r3, [r3, #0]
   80fbe:	3301      	adds	r3, #1
   80fc0:	4a71      	ldr	r2, [pc, #452]	; (81188 <lcd_print_s+0x1fc>)
   80fc2:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   80fc4:	f240 2102 	movw	r1, #514	; 0x202
   80fc8:	4870      	ldr	r0, [pc, #448]	; (8118c <lcd_print_s+0x200>)
   80fca:	4b71      	ldr	r3, [pc, #452]	; (81190 <lcd_print_s+0x204>)
   80fcc:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   80fce:	4971      	ldr	r1, [pc, #452]	; (81194 <lcd_print_s+0x208>)
   80fd0:	4871      	ldr	r0, [pc, #452]	; (81198 <lcd_print_s+0x20c>)
   80fd2:	4b72      	ldr	r3, [pc, #456]	; (8119c <lcd_print_s+0x210>)
   80fd4:	4798      	blx	r3
            break;
   80fd6:	e009      	b.n	80fec <lcd_print_s+0x60>
    while(lcdIsBusy | twi_is_busy())
   80fd8:	4b71      	ldr	r3, [pc, #452]	; (811a0 <lcd_print_s+0x214>)
   80fda:	4798      	blx	r3
   80fdc:	4603      	mov	r3, r0
   80fde:	461a      	mov	r2, r3
   80fe0:	4b68      	ldr	r3, [pc, #416]	; (81184 <lcd_print_s+0x1f8>)
   80fe2:	781b      	ldrb	r3, [r3, #0]
   80fe4:	4313      	orrs	r3, r2
   80fe6:	b2db      	uxtb	r3, r3
   80fe8:	2b00      	cmp	r3, #0
   80fea:	d1db      	bne.n	80fa4 <lcd_print_s+0x18>
        }
    }
    
    // Calculate display address
    switch(line)
   80fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80ff0:	3b01      	subs	r3, #1
   80ff2:	2b03      	cmp	r3, #3
   80ff4:	f200 80bb 	bhi.w	8116e <lcd_print_s+0x1e2>
   80ff8:	a201      	add	r2, pc, #4	; (adr r2, 81000 <lcd_print_s+0x74>)
   80ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80ffe:	bf00      	nop
   81000:	00081011 	.word	0x00081011
   81004:	00081017 	.word	0x00081017
   81008:	0008101d 	.word	0x0008101d
   8100c:	00081023 	.word	0x00081023
    {
        case 1:
            addr = 0x80;          // set address to start of line 1
   81010:	2380      	movs	r3, #128	; 0x80
   81012:	75fb      	strb	r3, [r7, #23]
            break;
   81014:	e008      	b.n	81028 <lcd_print_s+0x9c>
        case 2:
            addr = 0x80 | 0x40;   // set address to start of line 2
   81016:	23c0      	movs	r3, #192	; 0xc0
   81018:	75fb      	strb	r3, [r7, #23]
            break;
   8101a:	e005      	b.n	81028 <lcd_print_s+0x9c>
        case 3:
            addr = 0x80 | 0x14;   // set address to start of line 3
   8101c:	2394      	movs	r3, #148	; 0x94
   8101e:	75fb      	strb	r3, [r7, #23]
            break;
   81020:	e002      	b.n	81028 <lcd_print_s+0x9c>
        case 4:
            addr = 0x80 | 0x54;   // set address to start of line 4
   81022:	23d4      	movs	r3, #212	; 0xd4
   81024:	75fb      	strb	r3, [r7, #23]
            break;
   81026:	bf00      	nop
        default:
            return;               // return immediately, if value is out of range
            break;
    }
    addr += col;  // set column in the selected line
   81028:	7dfa      	ldrb	r2, [r7, #23]
   8102a:	79bb      	ldrb	r3, [r7, #6]
   8102c:	4413      	add	r3, r2
   8102e:	75fb      	strb	r3, [r7, #23]

    // Set cursor
    cmd = LCD_FUNTION_WRITE | backlight;
   81030:	4b5c      	ldr	r3, [pc, #368]	; (811a4 <lcd_print_s+0x218>)
   81032:	781b      	ldrb	r3, [r3, #0]
   81034:	73fb      	strb	r3, [r7, #15]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   81036:	7dfb      	ldrb	r3, [r7, #23]
   81038:	f023 030f 	bic.w	r3, r3, #15
   8103c:	b2da      	uxtb	r2, r3
   8103e:	7bfb      	ldrb	r3, [r7, #15]
   81040:	4313      	orrs	r3, r2
   81042:	b2db      	uxtb	r3, r3
   81044:	f043 0304 	orr.w	r3, r3, #4
   81048:	b2da      	uxtb	r2, r3
   8104a:	693b      	ldr	r3, [r7, #16]
   8104c:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   8104e:	f997 3017 	ldrsb.w	r3, [r7, #23]
   81052:	f023 030f 	bic.w	r3, r3, #15
   81056:	b25a      	sxtb	r2, r3
   81058:	f997 300f 	ldrsb.w	r3, [r7, #15]
   8105c:	4313      	orrs	r3, r2
   8105e:	b25b      	sxtb	r3, r3
   81060:	b2da      	uxtb	r2, r3
   81062:	693b      	ldr	r3, [r7, #16]
   81064:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   81066:	7dfb      	ldrb	r3, [r7, #23]
   81068:	011b      	lsls	r3, r3, #4
   8106a:	b2da      	uxtb	r2, r3
   8106c:	7bfb      	ldrb	r3, [r7, #15]
   8106e:	4313      	orrs	r3, r2
   81070:	b2db      	uxtb	r3, r3
   81072:	f043 0304 	orr.w	r3, r3, #4
   81076:	b2da      	uxtb	r2, r3
   81078:	693b      	ldr	r3, [r7, #16]
   8107a:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   8107c:	7dfb      	ldrb	r3, [r7, #23]
   8107e:	011b      	lsls	r3, r3, #4
   81080:	b25a      	sxtb	r2, r3
   81082:	f997 300f 	ldrsb.w	r3, [r7, #15]
   81086:	4313      	orrs	r3, r2
   81088:	b25b      	sxtb	r3, r3
   8108a:	b2da      	uxtb	r2, r3
   8108c:	693b      	ldr	r3, [r7, #16]
   8108e:	72da      	strb	r2, [r3, #11]
    
    // write string ...
    cmd = LCD_WRITE_DDR | backlight;
   81090:	4b44      	ldr	r3, [pc, #272]	; (811a4 <lcd_print_s+0x218>)
   81092:	781b      	ldrb	r3, [r3, #0]
   81094:	f043 0301 	orr.w	r3, r3, #1
   81098:	73fb      	strb	r3, [r7, #15]
    for(count = 0; count < strlen(str); count++)
   8109a:	2300      	movs	r3, #0
   8109c:	75bb      	strb	r3, [r7, #22]
   8109e:	e04b      	b.n	81138 <lcd_print_s+0x1ac>
    {
        byte = str[count];
   810a0:	7dbb      	ldrb	r3, [r7, #22]
   810a2:	683a      	ldr	r2, [r7, #0]
   810a4:	4413      	add	r3, r2
   810a6:	781b      	ldrb	r3, [r3, #0]
   810a8:	73bb      	strb	r3, [r7, #14]
        tx_packet->buffer[4 + count * 4 + 0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   810aa:	7dbb      	ldrb	r3, [r7, #22]
   810ac:	3301      	adds	r3, #1
   810ae:	009b      	lsls	r3, r3, #2
   810b0:	7bba      	ldrb	r2, [r7, #14]
   810b2:	f022 020f 	bic.w	r2, r2, #15
   810b6:	b2d1      	uxtb	r1, r2
   810b8:	7bfa      	ldrb	r2, [r7, #15]
   810ba:	430a      	orrs	r2, r1
   810bc:	b2d2      	uxtb	r2, r2
   810be:	f042 0204 	orr.w	r2, r2, #4
   810c2:	b2d1      	uxtb	r1, r2
   810c4:	693a      	ldr	r2, [r7, #16]
   810c6:	4413      	add	r3, r2
   810c8:	460a      	mov	r2, r1
   810ca:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   810cc:	7dbb      	ldrb	r3, [r7, #22]
   810ce:	3301      	adds	r3, #1
   810d0:	009b      	lsls	r3, r3, #2
   810d2:	3301      	adds	r3, #1
   810d4:	f997 200e 	ldrsb.w	r2, [r7, #14]
   810d8:	f022 020f 	bic.w	r2, r2, #15
   810dc:	b251      	sxtb	r1, r2
   810de:	f997 200f 	ldrsb.w	r2, [r7, #15]
   810e2:	430a      	orrs	r2, r1
   810e4:	b252      	sxtb	r2, r2
   810e6:	b2d1      	uxtb	r1, r2
   810e8:	693a      	ldr	r2, [r7, #16]
   810ea:	4413      	add	r3, r2
   810ec:	460a      	mov	r2, r1
   810ee:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   810f0:	7dbb      	ldrb	r3, [r7, #22]
   810f2:	3301      	adds	r3, #1
   810f4:	009b      	lsls	r3, r3, #2
   810f6:	3302      	adds	r3, #2
   810f8:	7bba      	ldrb	r2, [r7, #14]
   810fa:	0112      	lsls	r2, r2, #4
   810fc:	b2d1      	uxtb	r1, r2
   810fe:	7bfa      	ldrb	r2, [r7, #15]
   81100:	430a      	orrs	r2, r1
   81102:	b2d2      	uxtb	r2, r2
   81104:	f042 0204 	orr.w	r2, r2, #4
   81108:	b2d1      	uxtb	r1, r2
   8110a:	693a      	ldr	r2, [r7, #16]
   8110c:	4413      	add	r3, r2
   8110e:	460a      	mov	r2, r1
   81110:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81112:	7dbb      	ldrb	r3, [r7, #22]
   81114:	3301      	adds	r3, #1
   81116:	009b      	lsls	r3, r3, #2
   81118:	3303      	adds	r3, #3
   8111a:	7bba      	ldrb	r2, [r7, #14]
   8111c:	0112      	lsls	r2, r2, #4
   8111e:	b251      	sxtb	r1, r2
   81120:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81124:	430a      	orrs	r2, r1
   81126:	b252      	sxtb	r2, r2
   81128:	b2d1      	uxtb	r1, r2
   8112a:	693a      	ldr	r2, [r7, #16]
   8112c:	4413      	add	r3, r2
   8112e:	460a      	mov	r2, r1
   81130:	721a      	strb	r2, [r3, #8]
    for(count = 0; count < strlen(str); count++)
   81132:	7dbb      	ldrb	r3, [r7, #22]
   81134:	3301      	adds	r3, #1
   81136:	75bb      	strb	r3, [r7, #22]
   81138:	7dbc      	ldrb	r4, [r7, #22]
   8113a:	6838      	ldr	r0, [r7, #0]
   8113c:	4b1a      	ldr	r3, [pc, #104]	; (811a8 <lcd_print_s+0x21c>)
   8113e:	4798      	blx	r3
   81140:	4603      	mov	r3, r0
   81142:	429c      	cmp	r4, r3
   81144:	d3ac      	bcc.n	810a0 <lcd_print_s+0x114>
    }
    tx_packet->length = 4 + count * 4;
   81146:	7dbb      	ldrb	r3, [r7, #22]
   81148:	3301      	adds	r3, #1
   8114a:	009b      	lsls	r3, r3, #2
   8114c:	461a      	mov	r2, r3
   8114e:	693b      	ldr	r3, [r7, #16]
   81150:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

    lcdIsBusy = true;
   81154:	4b0b      	ldr	r3, [pc, #44]	; (81184 <lcd_print_s+0x1f8>)
   81156:	2201      	movs	r2, #1
   81158:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   8115a:	6939      	ldr	r1, [r7, #16]
   8115c:	480e      	ldr	r0, [pc, #56]	; (81198 <lcd_print_s+0x20c>)
   8115e:	4b13      	ldr	r3, [pc, #76]	; (811ac <lcd_print_s+0x220>)
   81160:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81162:	4b06      	ldr	r3, [pc, #24]	; (8117c <lcd_print_s+0x1f0>)
   81164:	4798      	blx	r3
   81166:	4602      	mov	r2, r0
   81168:	4b05      	ldr	r3, [pc, #20]	; (81180 <lcd_print_s+0x1f4>)
   8116a:	601a      	str	r2, [r3, #0]
   8116c:	e000      	b.n	81170 <lcd_print_s+0x1e4>
            return;               // return immediately, if value is out of range
   8116e:	bf00      	nop
}
   81170:	371c      	adds	r7, #28
   81172:	46bd      	mov	sp, r7
   81174:	bd90      	pop	{r4, r7, pc}
   81176:	bf00      	nop
   81178:	00080a29 	.word	0x00080a29
   8117c:	00081ec5 	.word	0x00081ec5
   81180:	20070f8c 	.word	0x20070f8c
   81184:	20070f89 	.word	0x20070f89
   81188:	20070f90 	.word	0x20070f90
   8118c:	4008c100 	.word	0x4008c100
   81190:	0008020b 	.word	0x0008020b
   81194:	20070f94 	.word	0x20070f94
   81198:	4008c000 	.word	0x4008c000
   8119c:	00080dfd 	.word	0x00080dfd
   811a0:	00080a15 	.word	0x00080a15
   811a4:	20070f88 	.word	0x20070f88
   811a8:	00084065 	.word	0x00084065
   811ac:	00080a3d 	.word	0x00080a3d

000811b0 <lcd_print_m>:

void lcd_print_m(char* str[])
{
   811b0:	b590      	push	{r4, r7, lr}
   811b2:	b087      	sub	sp, #28
   811b4:	af00      	add	r7, sp, #0
   811b6:	6078      	str	r0, [r7, #4]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   811b8:	4b7f      	ldr	r3, [pc, #508]	; (813b8 <lcd_print_m+0x208>)
   811ba:	4798      	blx	r3
   811bc:	60f8      	str	r0, [r7, #12]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    uint8_t line;
    uint16_t index = 0;
   811be:	2300      	movs	r3, #0
   811c0:	827b      	strh	r3, [r7, #18]
    
    while(lcdIsBusy | twi_is_busy())
   811c2:	e019      	b.n	811f8 <lcd_print_m+0x48>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   811c4:	4b7d      	ldr	r3, [pc, #500]	; (813bc <lcd_print_m+0x20c>)
   811c6:	4798      	blx	r3
   811c8:	4602      	mov	r2, r0
   811ca:	4b7d      	ldr	r3, [pc, #500]	; (813c0 <lcd_print_m+0x210>)
   811cc:	681b      	ldr	r3, [r3, #0]
   811ce:	1ad3      	subs	r3, r2, r3
   811d0:	2b64      	cmp	r3, #100	; 0x64
   811d2:	d911      	bls.n	811f8 <lcd_print_m+0x48>
        {
            lcdIsBusy = false;
   811d4:	4b7b      	ldr	r3, [pc, #492]	; (813c4 <lcd_print_m+0x214>)
   811d6:	2200      	movs	r2, #0
   811d8:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   811da:	4b7b      	ldr	r3, [pc, #492]	; (813c8 <lcd_print_m+0x218>)
   811dc:	681b      	ldr	r3, [r3, #0]
   811de:	3301      	adds	r3, #1
   811e0:	4a79      	ldr	r2, [pc, #484]	; (813c8 <lcd_print_m+0x218>)
   811e2:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   811e4:	f240 2102 	movw	r1, #514	; 0x202
   811e8:	4878      	ldr	r0, [pc, #480]	; (813cc <lcd_print_m+0x21c>)
   811ea:	4b79      	ldr	r3, [pc, #484]	; (813d0 <lcd_print_m+0x220>)
   811ec:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   811ee:	4979      	ldr	r1, [pc, #484]	; (813d4 <lcd_print_m+0x224>)
   811f0:	4879      	ldr	r0, [pc, #484]	; (813d8 <lcd_print_m+0x228>)
   811f2:	4b7a      	ldr	r3, [pc, #488]	; (813dc <lcd_print_m+0x22c>)
   811f4:	4798      	blx	r3
            break;
   811f6:	e009      	b.n	8120c <lcd_print_m+0x5c>
    while(lcdIsBusy | twi_is_busy())
   811f8:	4b79      	ldr	r3, [pc, #484]	; (813e0 <lcd_print_m+0x230>)
   811fa:	4798      	blx	r3
   811fc:	4603      	mov	r3, r0
   811fe:	461a      	mov	r2, r3
   81200:	4b70      	ldr	r3, [pc, #448]	; (813c4 <lcd_print_m+0x214>)
   81202:	781b      	ldrb	r3, [r3, #0]
   81204:	4313      	orrs	r3, r2
   81206:	b2db      	uxtb	r3, r3
   81208:	2b00      	cmp	r3, #0
   8120a:	d1db      	bne.n	811c4 <lcd_print_m+0x14>
        }
    }

    for(line = 0; line < 4; line++)
   8120c:	2300      	movs	r3, #0
   8120e:	757b      	strb	r3, [r7, #21]
   81210:	e0ba      	b.n	81388 <lcd_print_m+0x1d8>
    {
        // Calculate display address
        switch(line)
   81212:	7d7b      	ldrb	r3, [r7, #21]
   81214:	2b02      	cmp	r3, #2
   81216:	d006      	beq.n	81226 <lcd_print_m+0x76>
   81218:	2b03      	cmp	r3, #3
   8121a:	d007      	beq.n	8122c <lcd_print_m+0x7c>
   8121c:	2b01      	cmp	r3, #1
   8121e:	d108      	bne.n	81232 <lcd_print_m+0x82>
        {
            case 1:
                addr = 0x80 | 0x40;   // set address to start of line 2
   81220:	23c0      	movs	r3, #192	; 0xc0
   81222:	75fb      	strb	r3, [r7, #23]
                break;
   81224:	e008      	b.n	81238 <lcd_print_m+0x88>
            case 2:
                addr = 0x80 | 0x14;   // set address to start of line 3
   81226:	2394      	movs	r3, #148	; 0x94
   81228:	75fb      	strb	r3, [r7, #23]
                break;
   8122a:	e005      	b.n	81238 <lcd_print_m+0x88>
            case 3:
                addr = 0x80 | 0x54;   // set address to start of line 4
   8122c:	23d4      	movs	r3, #212	; 0xd4
   8122e:	75fb      	strb	r3, [r7, #23]
                break;
   81230:	e002      	b.n	81238 <lcd_print_m+0x88>
            case 0:
            default:
                addr = 0x80;          // set address to start of line 1
   81232:	2380      	movs	r3, #128	; 0x80
   81234:	75fb      	strb	r3, [r7, #23]
                break;
   81236:	bf00      	nop
        }

        // Set cursor
        cmd = LCD_FUNTION_WRITE | backlight;
   81238:	4b6a      	ldr	r3, [pc, #424]	; (813e4 <lcd_print_m+0x234>)
   8123a:	781b      	ldrb	r3, [r3, #0]
   8123c:	72fb      	strb	r3, [r7, #11]
        tx_packet->buffer[index++] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   8123e:	8a7b      	ldrh	r3, [r7, #18]
   81240:	1c5a      	adds	r2, r3, #1
   81242:	827a      	strh	r2, [r7, #18]
   81244:	4619      	mov	r1, r3
   81246:	7dfb      	ldrb	r3, [r7, #23]
   81248:	f023 030f 	bic.w	r3, r3, #15
   8124c:	b2da      	uxtb	r2, r3
   8124e:	7afb      	ldrb	r3, [r7, #11]
   81250:	4313      	orrs	r3, r2
   81252:	b2db      	uxtb	r3, r3
   81254:	f043 0304 	orr.w	r3, r3, #4
   81258:	b2da      	uxtb	r2, r3
   8125a:	68fb      	ldr	r3, [r7, #12]
   8125c:	440b      	add	r3, r1
   8125e:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[index++] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   81260:	8a7b      	ldrh	r3, [r7, #18]
   81262:	1c5a      	adds	r2, r3, #1
   81264:	827a      	strh	r2, [r7, #18]
   81266:	4619      	mov	r1, r3
   81268:	f997 3017 	ldrsb.w	r3, [r7, #23]
   8126c:	f023 030f 	bic.w	r3, r3, #15
   81270:	b25a      	sxtb	r2, r3
   81272:	f997 300b 	ldrsb.w	r3, [r7, #11]
   81276:	4313      	orrs	r3, r2
   81278:	b25b      	sxtb	r3, r3
   8127a:	b2da      	uxtb	r2, r3
   8127c:	68fb      	ldr	r3, [r7, #12]
   8127e:	440b      	add	r3, r1
   81280:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[index++] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   81282:	8a7b      	ldrh	r3, [r7, #18]
   81284:	1c5a      	adds	r2, r3, #1
   81286:	827a      	strh	r2, [r7, #18]
   81288:	4619      	mov	r1, r3
   8128a:	7dfb      	ldrb	r3, [r7, #23]
   8128c:	011b      	lsls	r3, r3, #4
   8128e:	b2da      	uxtb	r2, r3
   81290:	7afb      	ldrb	r3, [r7, #11]
   81292:	4313      	orrs	r3, r2
   81294:	b2db      	uxtb	r3, r3
   81296:	f043 0304 	orr.w	r3, r3, #4
   8129a:	b2da      	uxtb	r2, r3
   8129c:	68fb      	ldr	r3, [r7, #12]
   8129e:	440b      	add	r3, r1
   812a0:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[index++] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   812a2:	8a7b      	ldrh	r3, [r7, #18]
   812a4:	1c5a      	adds	r2, r3, #1
   812a6:	827a      	strh	r2, [r7, #18]
   812a8:	4619      	mov	r1, r3
   812aa:	7dfb      	ldrb	r3, [r7, #23]
   812ac:	011b      	lsls	r3, r3, #4
   812ae:	b25a      	sxtb	r2, r3
   812b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
   812b4:	4313      	orrs	r3, r2
   812b6:	b25b      	sxtb	r3, r3
   812b8:	b2da      	uxtb	r2, r3
   812ba:	68fb      	ldr	r3, [r7, #12]
   812bc:	440b      	add	r3, r1
   812be:	721a      	strb	r2, [r3, #8]
    
        // write string ...
        cmd = LCD_WRITE_DDR | backlight;
   812c0:	4b48      	ldr	r3, [pc, #288]	; (813e4 <lcd_print_m+0x234>)
   812c2:	781b      	ldrb	r3, [r3, #0]
   812c4:	f043 0301 	orr.w	r3, r3, #1
   812c8:	72fb      	strb	r3, [r7, #11]
        for(count = 0; count < strlen(str[line]); count++)
   812ca:	2300      	movs	r3, #0
   812cc:	75bb      	strb	r3, [r7, #22]
   812ce:	e04c      	b.n	8136a <lcd_print_m+0x1ba>
        {
            byte = str[line][count];
   812d0:	7d7b      	ldrb	r3, [r7, #21]
   812d2:	009b      	lsls	r3, r3, #2
   812d4:	687a      	ldr	r2, [r7, #4]
   812d6:	4413      	add	r3, r2
   812d8:	681a      	ldr	r2, [r3, #0]
   812da:	7dbb      	ldrb	r3, [r7, #22]
   812dc:	4413      	add	r3, r2
   812de:	781b      	ldrb	r3, [r3, #0]
   812e0:	72bb      	strb	r3, [r7, #10]
            tx_packet->buffer[index++] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   812e2:	8a7b      	ldrh	r3, [r7, #18]
   812e4:	1c5a      	adds	r2, r3, #1
   812e6:	827a      	strh	r2, [r7, #18]
   812e8:	4619      	mov	r1, r3
   812ea:	7abb      	ldrb	r3, [r7, #10]
   812ec:	f023 030f 	bic.w	r3, r3, #15
   812f0:	b2da      	uxtb	r2, r3
   812f2:	7afb      	ldrb	r3, [r7, #11]
   812f4:	4313      	orrs	r3, r2
   812f6:	b2db      	uxtb	r3, r3
   812f8:	f043 0304 	orr.w	r3, r3, #4
   812fc:	b2da      	uxtb	r2, r3
   812fe:	68fb      	ldr	r3, [r7, #12]
   81300:	440b      	add	r3, r1
   81302:	721a      	strb	r2, [r3, #8]
            tx_packet->buffer[index++] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   81304:	8a7b      	ldrh	r3, [r7, #18]
   81306:	1c5a      	adds	r2, r3, #1
   81308:	827a      	strh	r2, [r7, #18]
   8130a:	4619      	mov	r1, r3
   8130c:	f997 300a 	ldrsb.w	r3, [r7, #10]
   81310:	f023 030f 	bic.w	r3, r3, #15
   81314:	b25a      	sxtb	r2, r3
   81316:	f997 300b 	ldrsb.w	r3, [r7, #11]
   8131a:	4313      	orrs	r3, r2
   8131c:	b25b      	sxtb	r3, r3
   8131e:	b2da      	uxtb	r2, r3
   81320:	68fb      	ldr	r3, [r7, #12]
   81322:	440b      	add	r3, r1
   81324:	721a      	strb	r2, [r3, #8]
            tx_packet->buffer[index++] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81326:	8a7b      	ldrh	r3, [r7, #18]
   81328:	1c5a      	adds	r2, r3, #1
   8132a:	827a      	strh	r2, [r7, #18]
   8132c:	4619      	mov	r1, r3
   8132e:	7abb      	ldrb	r3, [r7, #10]
   81330:	011b      	lsls	r3, r3, #4
   81332:	b2da      	uxtb	r2, r3
   81334:	7afb      	ldrb	r3, [r7, #11]
   81336:	4313      	orrs	r3, r2
   81338:	b2db      	uxtb	r3, r3
   8133a:	f043 0304 	orr.w	r3, r3, #4
   8133e:	b2da      	uxtb	r2, r3
   81340:	68fb      	ldr	r3, [r7, #12]
   81342:	440b      	add	r3, r1
   81344:	721a      	strb	r2, [r3, #8]
            tx_packet->buffer[index++] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81346:	8a7b      	ldrh	r3, [r7, #18]
   81348:	1c5a      	adds	r2, r3, #1
   8134a:	827a      	strh	r2, [r7, #18]
   8134c:	4619      	mov	r1, r3
   8134e:	7abb      	ldrb	r3, [r7, #10]
   81350:	011b      	lsls	r3, r3, #4
   81352:	b25a      	sxtb	r2, r3
   81354:	f997 300b 	ldrsb.w	r3, [r7, #11]
   81358:	4313      	orrs	r3, r2
   8135a:	b25b      	sxtb	r3, r3
   8135c:	b2da      	uxtb	r2, r3
   8135e:	68fb      	ldr	r3, [r7, #12]
   81360:	440b      	add	r3, r1
   81362:	721a      	strb	r2, [r3, #8]
        for(count = 0; count < strlen(str[line]); count++)
   81364:	7dbb      	ldrb	r3, [r7, #22]
   81366:	3301      	adds	r3, #1
   81368:	75bb      	strb	r3, [r7, #22]
   8136a:	7dbc      	ldrb	r4, [r7, #22]
   8136c:	7d7b      	ldrb	r3, [r7, #21]
   8136e:	009b      	lsls	r3, r3, #2
   81370:	687a      	ldr	r2, [r7, #4]
   81372:	4413      	add	r3, r2
   81374:	681b      	ldr	r3, [r3, #0]
   81376:	4618      	mov	r0, r3
   81378:	4b1b      	ldr	r3, [pc, #108]	; (813e8 <lcd_print_m+0x238>)
   8137a:	4798      	blx	r3
   8137c:	4603      	mov	r3, r0
   8137e:	429c      	cmp	r4, r3
   81380:	d3a6      	bcc.n	812d0 <lcd_print_m+0x120>
    for(line = 0; line < 4; line++)
   81382:	7d7b      	ldrb	r3, [r7, #21]
   81384:	3301      	adds	r3, #1
   81386:	757b      	strb	r3, [r7, #21]
   81388:	7d7b      	ldrb	r3, [r7, #21]
   8138a:	2b03      	cmp	r3, #3
   8138c:	f67f af41 	bls.w	81212 <lcd_print_m+0x62>
        }
    }
    tx_packet->length = index;
   81390:	8a7a      	ldrh	r2, [r7, #18]
   81392:	68fb      	ldr	r3, [r7, #12]
   81394:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

    lcdIsBusy = true;
   81398:	4b0a      	ldr	r3, [pc, #40]	; (813c4 <lcd_print_m+0x214>)
   8139a:	2201      	movs	r2, #1
   8139c:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   8139e:	68f9      	ldr	r1, [r7, #12]
   813a0:	480d      	ldr	r0, [pc, #52]	; (813d8 <lcd_print_m+0x228>)
   813a2:	4b12      	ldr	r3, [pc, #72]	; (813ec <lcd_print_m+0x23c>)
   813a4:	4798      	blx	r3
    lcdStartTicks = getTicks();
   813a6:	4b05      	ldr	r3, [pc, #20]	; (813bc <lcd_print_m+0x20c>)
   813a8:	4798      	blx	r3
   813aa:	4602      	mov	r2, r0
   813ac:	4b04      	ldr	r3, [pc, #16]	; (813c0 <lcd_print_m+0x210>)
   813ae:	601a      	str	r2, [r3, #0]
}
   813b0:	bf00      	nop
   813b2:	371c      	adds	r7, #28
   813b4:	46bd      	mov	sp, r7
   813b6:	bd90      	pop	{r4, r7, pc}
   813b8:	00080a29 	.word	0x00080a29
   813bc:	00081ec5 	.word	0x00081ec5
   813c0:	20070f8c 	.word	0x20070f8c
   813c4:	20070f89 	.word	0x20070f89
   813c8:	20070f90 	.word	0x20070f90
   813cc:	4008c100 	.word	0x4008c100
   813d0:	0008020b 	.word	0x0008020b
   813d4:	20070f94 	.word	0x20070f94
   813d8:	4008c000 	.word	0x4008c000
   813dc:	00080dfd 	.word	0x00080dfd
   813e0:	00080a15 	.word	0x00080a15
   813e4:	20070f88 	.word	0x20070f88
   813e8:	00084065 	.word	0x00084065
   813ec:	00080a3d 	.word	0x00080a3d

000813f0 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   813f0:	b580      	push	{r7, lr}
   813f2:	b084      	sub	sp, #16
   813f4:	af00      	add	r7, sp, #0
   813f6:	4603      	mov	r3, r0
   813f8:	460a      	mov	r2, r1
   813fa:	71fb      	strb	r3, [r7, #7]
   813fc:	4613      	mov	r3, r2
   813fe:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81400:	4b2d      	ldr	r3, [pc, #180]	; (814b8 <send_nibble+0xc8>)
   81402:	4798      	blx	r3
   81404:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   81406:	e019      	b.n	8143c <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81408:	4b2c      	ldr	r3, [pc, #176]	; (814bc <send_nibble+0xcc>)
   8140a:	4798      	blx	r3
   8140c:	4602      	mov	r2, r0
   8140e:	4b2c      	ldr	r3, [pc, #176]	; (814c0 <send_nibble+0xd0>)
   81410:	681b      	ldr	r3, [r3, #0]
   81412:	1ad3      	subs	r3, r2, r3
   81414:	2b64      	cmp	r3, #100	; 0x64
   81416:	d911      	bls.n	8143c <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   81418:	4b2a      	ldr	r3, [pc, #168]	; (814c4 <send_nibble+0xd4>)
   8141a:	2200      	movs	r2, #0
   8141c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   8141e:	4b2a      	ldr	r3, [pc, #168]	; (814c8 <send_nibble+0xd8>)
   81420:	681b      	ldr	r3, [r3, #0]
   81422:	3301      	adds	r3, #1
   81424:	4a28      	ldr	r2, [pc, #160]	; (814c8 <send_nibble+0xd8>)
   81426:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81428:	f240 2102 	movw	r1, #514	; 0x202
   8142c:	4827      	ldr	r0, [pc, #156]	; (814cc <send_nibble+0xdc>)
   8142e:	4b28      	ldr	r3, [pc, #160]	; (814d0 <send_nibble+0xe0>)
   81430:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81432:	4928      	ldr	r1, [pc, #160]	; (814d4 <send_nibble+0xe4>)
   81434:	4828      	ldr	r0, [pc, #160]	; (814d8 <send_nibble+0xe8>)
   81436:	4b29      	ldr	r3, [pc, #164]	; (814dc <send_nibble+0xec>)
   81438:	4798      	blx	r3
            break;
   8143a:	e009      	b.n	81450 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   8143c:	4b28      	ldr	r3, [pc, #160]	; (814e0 <send_nibble+0xf0>)
   8143e:	4798      	blx	r3
   81440:	4603      	mov	r3, r0
   81442:	461a      	mov	r2, r3
   81444:	4b1f      	ldr	r3, [pc, #124]	; (814c4 <send_nibble+0xd4>)
   81446:	781b      	ldrb	r3, [r3, #0]
   81448:	4313      	orrs	r3, r2
   8144a:	b2db      	uxtb	r3, r3
   8144c:	2b00      	cmp	r3, #0
   8144e:	d1db      	bne.n	81408 <send_nibble+0x18>
        }
    }

    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81450:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81454:	f003 030f 	and.w	r3, r3, #15
   81458:	b25a      	sxtb	r2, r3
   8145a:	4b22      	ldr	r3, [pc, #136]	; (814e4 <send_nibble+0xf4>)
   8145c:	781b      	ldrb	r3, [r3, #0]
   8145e:	b25b      	sxtb	r3, r3
   81460:	4313      	orrs	r3, r2
   81462:	b25b      	sxtb	r3, r3
   81464:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81466:	79bb      	ldrb	r3, [r7, #6]
   81468:	011b      	lsls	r3, r3, #4
   8146a:	b2da      	uxtb	r2, r3
   8146c:	79fb      	ldrb	r3, [r7, #7]
   8146e:	4313      	orrs	r3, r2
   81470:	b2db      	uxtb	r3, r3
   81472:	f043 0304 	orr.w	r3, r3, #4
   81476:	b2da      	uxtb	r2, r3
   81478:	68fb      	ldr	r3, [r7, #12]
   8147a:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   8147c:	79bb      	ldrb	r3, [r7, #6]
   8147e:	011b      	lsls	r3, r3, #4
   81480:	b25a      	sxtb	r2, r3
   81482:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81486:	4313      	orrs	r3, r2
   81488:	b25b      	sxtb	r3, r3
   8148a:	b2da      	uxtb	r2, r3
   8148c:	68fb      	ldr	r3, [r7, #12]
   8148e:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   81490:	68fb      	ldr	r3, [r7, #12]
   81492:	2202      	movs	r2, #2
   81494:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    
    lcdIsBusy = true;
   81498:	4b0a      	ldr	r3, [pc, #40]	; (814c4 <send_nibble+0xd4>)
   8149a:	2201      	movs	r2, #1
   8149c:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   8149e:	68f9      	ldr	r1, [r7, #12]
   814a0:	480d      	ldr	r0, [pc, #52]	; (814d8 <send_nibble+0xe8>)
   814a2:	4b11      	ldr	r3, [pc, #68]	; (814e8 <send_nibble+0xf8>)
   814a4:	4798      	blx	r3
    lcdStartTicks = getTicks();
   814a6:	4b05      	ldr	r3, [pc, #20]	; (814bc <send_nibble+0xcc>)
   814a8:	4798      	blx	r3
   814aa:	4602      	mov	r2, r0
   814ac:	4b04      	ldr	r3, [pc, #16]	; (814c0 <send_nibble+0xd0>)
   814ae:	601a      	str	r2, [r3, #0]
}
   814b0:	bf00      	nop
   814b2:	3710      	adds	r7, #16
   814b4:	46bd      	mov	sp, r7
   814b6:	bd80      	pop	{r7, pc}
   814b8:	00080a29 	.word	0x00080a29
   814bc:	00081ec5 	.word	0x00081ec5
   814c0:	20070f8c 	.word	0x20070f8c
   814c4:	20070f89 	.word	0x20070f89
   814c8:	20070f90 	.word	0x20070f90
   814cc:	4008c100 	.word	0x4008c100
   814d0:	0008020b 	.word	0x0008020b
   814d4:	20070f94 	.word	0x20070f94
   814d8:	4008c000 	.word	0x4008c000
   814dc:	00080dfd 	.word	0x00080dfd
   814e0:	00080a15 	.word	0x00080a15
   814e4:	20070f88 	.word	0x20070f88
   814e8:	00080a3d 	.word	0x00080a3d

000814ec <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   814ec:	b580      	push	{r7, lr}
   814ee:	b084      	sub	sp, #16
   814f0:	af00      	add	r7, sp, #0
   814f2:	4603      	mov	r3, r0
   814f4:	460a      	mov	r2, r1
   814f6:	71fb      	strb	r3, [r7, #7]
   814f8:	4613      	mov	r3, r2
   814fa:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   814fc:	4b39      	ldr	r3, [pc, #228]	; (815e4 <send_byte+0xf8>)
   814fe:	4798      	blx	r3
   81500:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   81502:	e019      	b.n	81538 <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81504:	4b38      	ldr	r3, [pc, #224]	; (815e8 <send_byte+0xfc>)
   81506:	4798      	blx	r3
   81508:	4602      	mov	r2, r0
   8150a:	4b38      	ldr	r3, [pc, #224]	; (815ec <send_byte+0x100>)
   8150c:	681b      	ldr	r3, [r3, #0]
   8150e:	1ad3      	subs	r3, r2, r3
   81510:	2b64      	cmp	r3, #100	; 0x64
   81512:	d911      	bls.n	81538 <send_byte+0x4c>
        {
            lcdIsBusy = false;
   81514:	4b36      	ldr	r3, [pc, #216]	; (815f0 <send_byte+0x104>)
   81516:	2200      	movs	r2, #0
   81518:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   8151a:	4b36      	ldr	r3, [pc, #216]	; (815f4 <send_byte+0x108>)
   8151c:	681b      	ldr	r3, [r3, #0]
   8151e:	3301      	adds	r3, #1
   81520:	4a34      	ldr	r2, [pc, #208]	; (815f4 <send_byte+0x108>)
   81522:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81524:	f240 2102 	movw	r1, #514	; 0x202
   81528:	4833      	ldr	r0, [pc, #204]	; (815f8 <send_byte+0x10c>)
   8152a:	4b34      	ldr	r3, [pc, #208]	; (815fc <send_byte+0x110>)
   8152c:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   8152e:	4934      	ldr	r1, [pc, #208]	; (81600 <send_byte+0x114>)
   81530:	4834      	ldr	r0, [pc, #208]	; (81604 <send_byte+0x118>)
   81532:	4b35      	ldr	r3, [pc, #212]	; (81608 <send_byte+0x11c>)
   81534:	4798      	blx	r3
            break;
   81536:	e009      	b.n	8154c <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   81538:	4b34      	ldr	r3, [pc, #208]	; (8160c <send_byte+0x120>)
   8153a:	4798      	blx	r3
   8153c:	4603      	mov	r3, r0
   8153e:	461a      	mov	r2, r3
   81540:	4b2b      	ldr	r3, [pc, #172]	; (815f0 <send_byte+0x104>)
   81542:	781b      	ldrb	r3, [r3, #0]
   81544:	4313      	orrs	r3, r2
   81546:	b2db      	uxtb	r3, r3
   81548:	2b00      	cmp	r3, #0
   8154a:	d1db      	bne.n	81504 <send_byte+0x18>
        }
    }

    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   8154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81550:	f003 030f 	and.w	r3, r3, #15
   81554:	b25a      	sxtb	r2, r3
   81556:	4b2e      	ldr	r3, [pc, #184]	; (81610 <send_byte+0x124>)
   81558:	781b      	ldrb	r3, [r3, #0]
   8155a:	b25b      	sxtb	r3, r3
   8155c:	4313      	orrs	r3, r2
   8155e:	b25b      	sxtb	r3, r3
   81560:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   81562:	79bb      	ldrb	r3, [r7, #6]
   81564:	f023 030f 	bic.w	r3, r3, #15
   81568:	b2da      	uxtb	r2, r3
   8156a:	79fb      	ldrb	r3, [r7, #7]
   8156c:	4313      	orrs	r3, r2
   8156e:	b2db      	uxtb	r3, r3
   81570:	f043 0304 	orr.w	r3, r3, #4
   81574:	b2da      	uxtb	r2, r3
   81576:	68fb      	ldr	r3, [r7, #12]
   81578:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   8157a:	f997 3006 	ldrsb.w	r3, [r7, #6]
   8157e:	f023 030f 	bic.w	r3, r3, #15
   81582:	b25a      	sxtb	r2, r3
   81584:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81588:	4313      	orrs	r3, r2
   8158a:	b25b      	sxtb	r3, r3
   8158c:	b2da      	uxtb	r2, r3
   8158e:	68fb      	ldr	r3, [r7, #12]
   81590:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81592:	79bb      	ldrb	r3, [r7, #6]
   81594:	011b      	lsls	r3, r3, #4
   81596:	b2da      	uxtb	r2, r3
   81598:	79fb      	ldrb	r3, [r7, #7]
   8159a:	4313      	orrs	r3, r2
   8159c:	b2db      	uxtb	r3, r3
   8159e:	f043 0304 	orr.w	r3, r3, #4
   815a2:	b2da      	uxtb	r2, r3
   815a4:	68fb      	ldr	r3, [r7, #12]
   815a6:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   815a8:	79bb      	ldrb	r3, [r7, #6]
   815aa:	011b      	lsls	r3, r3, #4
   815ac:	b25a      	sxtb	r2, r3
   815ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
   815b2:	4313      	orrs	r3, r2
   815b4:	b25b      	sxtb	r3, r3
   815b6:	b2da      	uxtb	r2, r3
   815b8:	68fb      	ldr	r3, [r7, #12]
   815ba:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   815bc:	68fb      	ldr	r3, [r7, #12]
   815be:	2204      	movs	r2, #4
   815c0:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    
    lcdIsBusy = true;
   815c4:	4b0a      	ldr	r3, [pc, #40]	; (815f0 <send_byte+0x104>)
   815c6:	2201      	movs	r2, #1
   815c8:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   815ca:	68f9      	ldr	r1, [r7, #12]
   815cc:	480d      	ldr	r0, [pc, #52]	; (81604 <send_byte+0x118>)
   815ce:	4b11      	ldr	r3, [pc, #68]	; (81614 <send_byte+0x128>)
   815d0:	4798      	blx	r3
    lcdStartTicks = getTicks();
   815d2:	4b05      	ldr	r3, [pc, #20]	; (815e8 <send_byte+0xfc>)
   815d4:	4798      	blx	r3
   815d6:	4602      	mov	r2, r0
   815d8:	4b04      	ldr	r3, [pc, #16]	; (815ec <send_byte+0x100>)
   815da:	601a      	str	r2, [r3, #0]
}
   815dc:	bf00      	nop
   815de:	3710      	adds	r7, #16
   815e0:	46bd      	mov	sp, r7
   815e2:	bd80      	pop	{r7, pc}
   815e4:	00080a29 	.word	0x00080a29
   815e8:	00081ec5 	.word	0x00081ec5
   815ec:	20070f8c 	.word	0x20070f8c
   815f0:	20070f89 	.word	0x20070f89
   815f4:	20070f90 	.word	0x20070f90
   815f8:	4008c100 	.word	0x4008c100
   815fc:	0008020b 	.word	0x0008020b
   81600:	20070f94 	.word	0x20070f94
   81604:	4008c000 	.word	0x4008c000
   81608:	00080dfd 	.word	0x00080dfd
   8160c:	00080a15 	.word	0x00080a15
   81610:	20070f88 	.word	0x20070f88
   81614:	00080a3d 	.word	0x00080a3d

00081618 <lcd_callback>:

static void lcd_callback(void)
{
   81618:	b480      	push	{r7}
   8161a:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   8161c:	4b03      	ldr	r3, [pc, #12]	; (8162c <lcd_callback+0x14>)
   8161e:	2200      	movs	r2, #0
   81620:	701a      	strb	r2, [r3, #0]
}
   81622:	bf00      	nop
   81624:	46bd      	mov	sp, r7
   81626:	bc80      	pop	{r7}
   81628:	4770      	bx	lr
   8162a:	bf00      	nop
   8162c:	20070f89 	.word	0x20070f89

00081630 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   81630:	b480      	push	{r7}
   81632:	b089      	sub	sp, #36	; 0x24
   81634:	af00      	add	r7, sp, #0
   81636:	6078      	str	r0, [r7, #4]
   81638:	687b      	ldr	r3, [r7, #4]
   8163a:	61fb      	str	r3, [r7, #28]
   8163c:	69fb      	ldr	r3, [r7, #28]
   8163e:	61bb      	str	r3, [r7, #24]
   81640:	69bb      	ldr	r3, [r7, #24]
   81642:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81644:	697b      	ldr	r3, [r7, #20]
   81646:	095b      	lsrs	r3, r3, #5
   81648:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8164a:	693b      	ldr	r3, [r7, #16]
   8164c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81650:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81654:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   81658:	69fb      	ldr	r3, [r7, #28]
   8165a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8165c:	68fb      	ldr	r3, [r7, #12]
   8165e:	f003 031f 	and.w	r3, r3, #31
   81662:	2101      	movs	r1, #1
   81664:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81668:	4013      	ands	r3, r2
   8166a:	2b00      	cmp	r3, #0
   8166c:	bf14      	ite	ne
   8166e:	2301      	movne	r3, #1
   81670:	2300      	moveq	r3, #0
   81672:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   81674:	4618      	mov	r0, r3
   81676:	3724      	adds	r7, #36	; 0x24
   81678:	46bd      	mov	sp, r7
   8167a:	bc80      	pop	{r7}
   8167c:	4770      	bx	lr
	...

00081680 <menu>:

uint32_t cnt = 0;


void menu(event_t event1)
{
   81680:	b580      	push	{r7, lr}
   81682:	b082      	sub	sp, #8
   81684:	af00      	add	r7, sp, #0
   81686:	4603      	mov	r3, r0
   81688:	71fb      	strb	r3, [r7, #7]
    switch (event1)
   8168a:	79fb      	ldrb	r3, [r7, #7]
   8168c:	2b01      	cmp	r3, #1
   8168e:	d002      	beq.n	81696 <menu+0x16>
   81690:	2b0d      	cmp	r3, #13
   81692:	d026      	beq.n	816e2 <menu+0x62>
                    print_cursor();
                }
            }
            break;
        default:
            break;
   81694:	e04e      	b.n	81734 <menu+0xb4>
            if (act_cursor_line > min_cursor_line)
   81696:	4b32      	ldr	r3, [pc, #200]	; (81760 <menu+0xe0>)
   81698:	781a      	ldrb	r2, [r3, #0]
   8169a:	4b32      	ldr	r3, [pc, #200]	; (81764 <menu+0xe4>)
   8169c:	781b      	ldrb	r3, [r3, #0]
   8169e:	429a      	cmp	r2, r3
   816a0:	d945      	bls.n	8172e <menu+0xae>
                act_cursor_line--;
   816a2:	4b2f      	ldr	r3, [pc, #188]	; (81760 <menu+0xe0>)
   816a4:	781b      	ldrb	r3, [r3, #0]
   816a6:	3b01      	subs	r3, #1
   816a8:	b2da      	uxtb	r2, r3
   816aa:	4b2d      	ldr	r3, [pc, #180]	; (81760 <menu+0xe0>)
   816ac:	701a      	strb	r2, [r3, #0]
                if (act_cursor_line_on_lcd == 1)
   816ae:	4b2e      	ldr	r3, [pc, #184]	; (81768 <menu+0xe8>)
   816b0:	781b      	ldrb	r3, [r3, #0]
   816b2:	2b01      	cmp	r3, #1
   816b4:	d10c      	bne.n	816d0 <menu+0x50>
                    if (act_menu == MENU_MAIN)
   816b6:	4b2d      	ldr	r3, [pc, #180]	; (8176c <menu+0xec>)
   816b8:	781b      	ldrb	r3, [r3, #0]
   816ba:	2b00      	cmp	r3, #0
   816bc:	d137      	bne.n	8172e <menu+0xae>
                        menu_main_scroll--;
   816be:	4b2c      	ldr	r3, [pc, #176]	; (81770 <menu+0xf0>)
   816c0:	781b      	ldrb	r3, [r3, #0]
   816c2:	3b01      	subs	r3, #1
   816c4:	b2da      	uxtb	r2, r3
   816c6:	4b2a      	ldr	r3, [pc, #168]	; (81770 <menu+0xf0>)
   816c8:	701a      	strb	r2, [r3, #0]
                        print_menu_main();
   816ca:	4b2a      	ldr	r3, [pc, #168]	; (81774 <menu+0xf4>)
   816cc:	4798      	blx	r3
            break;
   816ce:	e02e      	b.n	8172e <menu+0xae>
                    act_cursor_line_on_lcd--;
   816d0:	4b25      	ldr	r3, [pc, #148]	; (81768 <menu+0xe8>)
   816d2:	781b      	ldrb	r3, [r3, #0]
   816d4:	3b01      	subs	r3, #1
   816d6:	b2da      	uxtb	r2, r3
   816d8:	4b23      	ldr	r3, [pc, #140]	; (81768 <menu+0xe8>)
   816da:	701a      	strb	r2, [r3, #0]
                    print_cursor();
   816dc:	4b26      	ldr	r3, [pc, #152]	; (81778 <menu+0xf8>)
   816de:	4798      	blx	r3
            break;
   816e0:	e025      	b.n	8172e <menu+0xae>
            if (act_cursor_line < max_cursor_line)
   816e2:	4b1f      	ldr	r3, [pc, #124]	; (81760 <menu+0xe0>)
   816e4:	781a      	ldrb	r2, [r3, #0]
   816e6:	4b25      	ldr	r3, [pc, #148]	; (8177c <menu+0xfc>)
   816e8:	781b      	ldrb	r3, [r3, #0]
   816ea:	429a      	cmp	r2, r3
   816ec:	d221      	bcs.n	81732 <menu+0xb2>
                act_cursor_line++;
   816ee:	4b1c      	ldr	r3, [pc, #112]	; (81760 <menu+0xe0>)
   816f0:	781b      	ldrb	r3, [r3, #0]
   816f2:	3301      	adds	r3, #1
   816f4:	b2da      	uxtb	r2, r3
   816f6:	4b1a      	ldr	r3, [pc, #104]	; (81760 <menu+0xe0>)
   816f8:	701a      	strb	r2, [r3, #0]
                if (act_cursor_line_on_lcd == 4)
   816fa:	4b1b      	ldr	r3, [pc, #108]	; (81768 <menu+0xe8>)
   816fc:	781b      	ldrb	r3, [r3, #0]
   816fe:	2b04      	cmp	r3, #4
   81700:	d10c      	bne.n	8171c <menu+0x9c>
                    if (act_menu == MENU_MAIN)
   81702:	4b1a      	ldr	r3, [pc, #104]	; (8176c <menu+0xec>)
   81704:	781b      	ldrb	r3, [r3, #0]
   81706:	2b00      	cmp	r3, #0
   81708:	d113      	bne.n	81732 <menu+0xb2>
                        menu_main_scroll++;
   8170a:	4b19      	ldr	r3, [pc, #100]	; (81770 <menu+0xf0>)
   8170c:	781b      	ldrb	r3, [r3, #0]
   8170e:	3301      	adds	r3, #1
   81710:	b2da      	uxtb	r2, r3
   81712:	4b17      	ldr	r3, [pc, #92]	; (81770 <menu+0xf0>)
   81714:	701a      	strb	r2, [r3, #0]
                        print_menu_main();
   81716:	4b17      	ldr	r3, [pc, #92]	; (81774 <menu+0xf4>)
   81718:	4798      	blx	r3
            break;
   8171a:	e00a      	b.n	81732 <menu+0xb2>
                    act_cursor_line_on_lcd++;
   8171c:	4b12      	ldr	r3, [pc, #72]	; (81768 <menu+0xe8>)
   8171e:	781b      	ldrb	r3, [r3, #0]
   81720:	3301      	adds	r3, #1
   81722:	b2da      	uxtb	r2, r3
   81724:	4b10      	ldr	r3, [pc, #64]	; (81768 <menu+0xe8>)
   81726:	701a      	strb	r2, [r3, #0]
                    print_cursor();
   81728:	4b13      	ldr	r3, [pc, #76]	; (81778 <menu+0xf8>)
   8172a:	4798      	blx	r3
            break;
   8172c:	e001      	b.n	81732 <menu+0xb2>
            break;
   8172e:	bf00      	nop
   81730:	e000      	b.n	81734 <menu+0xb4>
            break;
   81732:	bf00      	nop
    }
	
    switch (act_menu)
   81734:	4b0d      	ldr	r3, [pc, #52]	; (8176c <menu+0xec>)
   81736:	781b      	ldrb	r3, [r3, #0]
   81738:	2b00      	cmp	r3, #0
   8173a:	d002      	beq.n	81742 <menu+0xc2>
   8173c:	2b01      	cmp	r3, #1
   8173e:	d005      	beq.n	8174c <menu+0xcc>
            break;
        case MENU_SETTINGS:
            menu_settings(event1);
            break;
        default:
            break;
   81740:	e009      	b.n	81756 <menu+0xd6>
            menu_main(event1);
   81742:	79fb      	ldrb	r3, [r7, #7]
   81744:	4618      	mov	r0, r3
   81746:	4b0e      	ldr	r3, [pc, #56]	; (81780 <menu+0x100>)
   81748:	4798      	blx	r3
            break;
   8174a:	e004      	b.n	81756 <menu+0xd6>
            menu_settings(event1);
   8174c:	79fb      	ldrb	r3, [r7, #7]
   8174e:	4618      	mov	r0, r3
   81750:	4b0c      	ldr	r3, [pc, #48]	; (81784 <menu+0x104>)
   81752:	4798      	blx	r3
            break;
   81754:	bf00      	nop
    }
}
   81756:	bf00      	nop
   81758:	3708      	adds	r7, #8
   8175a:	46bd      	mov	sp, r7
   8175c:	bd80      	pop	{r7, pc}
   8175e:	bf00      	nop
   81760:	20070190 	.word	0x20070190
   81764:	20070192 	.word	0x20070192
   81768:	2007018e 	.word	0x2007018e
   8176c:	20070fa0 	.word	0x20070fa0
   81770:	20070fa1 	.word	0x20070fa1
   81774:	000818d5 	.word	0x000818d5
   81778:	00081a39 	.word	0x00081a39
   8177c:	20070193 	.word	0x20070193
   81780:	00081789 	.word	0x00081789
   81784:	000818c1 	.word	0x000818c1

00081788 <menu_main>:

void menu_main(event_t event1)
{
   81788:	b580      	push	{r7, lr}
   8178a:	b082      	sub	sp, #8
   8178c:	af00      	add	r7, sp, #0
   8178e:	4603      	mov	r3, r0
   81790:	71fb      	strb	r3, [r7, #7]
    switch (event1)
   81792:	79fb      	ldrb	r3, [r7, #7]
   81794:	2b07      	cmp	r3, #7
   81796:	d004      	beq.n	817a2 <menu_main+0x1a>
   81798:	2b0a      	cmp	r3, #10
   8179a:	d066      	beq.n	8186a <menu_main+0xe2>
   8179c:	2b04      	cmp	r3, #4
   8179e:	d052      	beq.n	81846 <menu_main+0xbe>
                }
                print_menu = 1;
            }
            break;
        default:
            break;
   817a0:	e078      	b.n	81894 <menu_main+0x10c>
            switch (menu_main_column)
   817a2:	4b43      	ldr	r3, [pc, #268]	; (818b0 <menu_main+0x128>)
   817a4:	781b      	ldrb	r3, [r3, #0]
   817a6:	2b01      	cmp	r3, #1
   817a8:	d01c      	beq.n	817e4 <menu_main+0x5c>
   817aa:	2b02      	cmp	r3, #2
   817ac:	d032      	beq.n	81814 <menu_main+0x8c>
   817ae:	2b00      	cmp	r3, #0
   817b0:	d000      	beq.n	817b4 <menu_main+0x2c>
            break;
   817b2:	e06f      	b.n	81894 <menu_main+0x10c>
                    switch (act_cursor_line)
   817b4:	4b3f      	ldr	r3, [pc, #252]	; (818b4 <menu_main+0x12c>)
   817b6:	781b      	ldrb	r3, [r3, #0]
   817b8:	3b02      	subs	r3, #2
   817ba:	2b06      	cmp	r3, #6
   817bc:	d810      	bhi.n	817e0 <menu_main+0x58>
   817be:	a201      	add	r2, pc, #4	; (adr r2, 817c4 <menu_main+0x3c>)
   817c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   817c4:	000817e1 	.word	0x000817e1
   817c8:	000817e1 	.word	0x000817e1
   817cc:	000817e1 	.word	0x000817e1
   817d0:	000817e1 	.word	0x000817e1
   817d4:	000817e1 	.word	0x000817e1
   817d8:	000817e1 	.word	0x000817e1
   817dc:	000817e1 	.word	0x000817e1
                            break;
   817e0:	bf00      	nop
                    break;
   817e2:	e02f      	b.n	81844 <menu_main+0xbc>
                    switch (act_cursor_line)
   817e4:	4b33      	ldr	r3, [pc, #204]	; (818b4 <menu_main+0x12c>)
   817e6:	781b      	ldrb	r3, [r3, #0]
   817e8:	3b02      	subs	r3, #2
   817ea:	2b06      	cmp	r3, #6
   817ec:	d810      	bhi.n	81810 <menu_main+0x88>
   817ee:	a201      	add	r2, pc, #4	; (adr r2, 817f4 <menu_main+0x6c>)
   817f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   817f4:	00081811 	.word	0x00081811
   817f8:	00081811 	.word	0x00081811
   817fc:	00081811 	.word	0x00081811
   81800:	00081811 	.word	0x00081811
   81804:	00081811 	.word	0x00081811
   81808:	00081811 	.word	0x00081811
   8180c:	00081811 	.word	0x00081811
                            break;
   81810:	bf00      	nop
                    break;
   81812:	e017      	b.n	81844 <menu_main+0xbc>
                    switch (act_cursor_line)
   81814:	4b27      	ldr	r3, [pc, #156]	; (818b4 <menu_main+0x12c>)
   81816:	781b      	ldrb	r3, [r3, #0]
   81818:	3b02      	subs	r3, #2
   8181a:	2b06      	cmp	r3, #6
   8181c:	d810      	bhi.n	81840 <menu_main+0xb8>
   8181e:	a201      	add	r2, pc, #4	; (adr r2, 81824 <menu_main+0x9c>)
   81820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81824:	00081841 	.word	0x00081841
   81828:	00081841 	.word	0x00081841
   8182c:	00081841 	.word	0x00081841
   81830:	00081841 	.word	0x00081841
   81834:	00081841 	.word	0x00081841
   81838:	00081841 	.word	0x00081841
   8183c:	00081841 	.word	0x00081841
                            break;
   81840:	bf00      	nop
                    break;
   81842:	bf00      	nop
            break;
   81844:	e026      	b.n	81894 <menu_main+0x10c>
            if (act_cursor_line == 1)
   81846:	4b1b      	ldr	r3, [pc, #108]	; (818b4 <menu_main+0x12c>)
   81848:	781b      	ldrb	r3, [r3, #0]
   8184a:	2b01      	cmp	r3, #1
   8184c:	d11f      	bne.n	8188e <menu_main+0x106>
                if (menu_main_column >= 1)
   8184e:	4b18      	ldr	r3, [pc, #96]	; (818b0 <menu_main+0x128>)
   81850:	781b      	ldrb	r3, [r3, #0]
   81852:	2b00      	cmp	r3, #0
   81854:	d005      	beq.n	81862 <menu_main+0xda>
                    menu_main_column--;
   81856:	4b16      	ldr	r3, [pc, #88]	; (818b0 <menu_main+0x128>)
   81858:	781b      	ldrb	r3, [r3, #0]
   8185a:	3b01      	subs	r3, #1
   8185c:	b2da      	uxtb	r2, r3
   8185e:	4b14      	ldr	r3, [pc, #80]	; (818b0 <menu_main+0x128>)
   81860:	701a      	strb	r2, [r3, #0]
                print_menu = 1;
   81862:	4b15      	ldr	r3, [pc, #84]	; (818b8 <menu_main+0x130>)
   81864:	2201      	movs	r2, #1
   81866:	701a      	strb	r2, [r3, #0]
            break;
   81868:	e011      	b.n	8188e <menu_main+0x106>
            if (act_cursor_line == 1)
   8186a:	4b12      	ldr	r3, [pc, #72]	; (818b4 <menu_main+0x12c>)
   8186c:	781b      	ldrb	r3, [r3, #0]
   8186e:	2b01      	cmp	r3, #1
   81870:	d10f      	bne.n	81892 <menu_main+0x10a>
                if (menu_main_column <= 1)
   81872:	4b0f      	ldr	r3, [pc, #60]	; (818b0 <menu_main+0x128>)
   81874:	781b      	ldrb	r3, [r3, #0]
   81876:	2b01      	cmp	r3, #1
   81878:	d805      	bhi.n	81886 <menu_main+0xfe>
                    menu_main_column++;
   8187a:	4b0d      	ldr	r3, [pc, #52]	; (818b0 <menu_main+0x128>)
   8187c:	781b      	ldrb	r3, [r3, #0]
   8187e:	3301      	adds	r3, #1
   81880:	b2da      	uxtb	r2, r3
   81882:	4b0b      	ldr	r3, [pc, #44]	; (818b0 <menu_main+0x128>)
   81884:	701a      	strb	r2, [r3, #0]
                print_menu = 1;
   81886:	4b0c      	ldr	r3, [pc, #48]	; (818b8 <menu_main+0x130>)
   81888:	2201      	movs	r2, #1
   8188a:	701a      	strb	r2, [r3, #0]
            break;
   8188c:	e001      	b.n	81892 <menu_main+0x10a>
            break;
   8188e:	bf00      	nop
   81890:	e000      	b.n	81894 <menu_main+0x10c>
            break;
   81892:	bf00      	nop
    }
	
    if (print_menu)
   81894:	4b08      	ldr	r3, [pc, #32]	; (818b8 <menu_main+0x130>)
   81896:	781b      	ldrb	r3, [r3, #0]
   81898:	2b00      	cmp	r3, #0
   8189a:	d004      	beq.n	818a6 <menu_main+0x11e>
    {
        print_menu = 0;
   8189c:	4b06      	ldr	r3, [pc, #24]	; (818b8 <menu_main+0x130>)
   8189e:	2200      	movs	r2, #0
   818a0:	701a      	strb	r2, [r3, #0]
        print_menu_main();
   818a2:	4b06      	ldr	r3, [pc, #24]	; (818bc <menu_main+0x134>)
   818a4:	4798      	blx	r3
    }
}
   818a6:	bf00      	nop
   818a8:	3708      	adds	r7, #8
   818aa:	46bd      	mov	sp, r7
   818ac:	bd80      	pop	{r7, pc}
   818ae:	bf00      	nop
   818b0:	20070194 	.word	0x20070194
   818b4:	20070190 	.word	0x20070190
   818b8:	2007018c 	.word	0x2007018c
   818bc:	000818d5 	.word	0x000818d5

000818c0 <menu_settings>:

void menu_settings(event_t event1)
{
   818c0:	b480      	push	{r7}
   818c2:	b083      	sub	sp, #12
   818c4:	af00      	add	r7, sp, #0
   818c6:	4603      	mov	r3, r0
   818c8:	71fb      	strb	r3, [r7, #7]
	
}
   818ca:	bf00      	nop
   818cc:	370c      	adds	r7, #12
   818ce:	46bd      	mov	sp, r7
   818d0:	bc80      	pop	{r7}
   818d2:	4770      	bx	lr

000818d4 <print_menu_main>:

void print_menu_main(void)
{
   818d4:	b580      	push	{r7, lr}
   818d6:	b09c      	sub	sp, #112	; 0x70
   818d8:	af00      	add	r7, sp, #0
    const char *menu_text[3][8] =
   818da:	4a49      	ldr	r2, [pc, #292]	; (81a00 <print_menu_main+0x12c>)
   818dc:	f107 0310 	add.w	r3, r7, #16
   818e0:	4611      	mov	r1, r2
   818e2:	2260      	movs	r2, #96	; 0x60
   818e4:	4618      	mov	r0, r3
   818e6:	4b47      	ldr	r3, [pc, #284]	; (81a04 <print_menu_main+0x130>)
   818e8:	4798      	blx	r3
        {"     Match  ", " Start match", " Sensor values", " Drive angle pid", "", "", "", ""},
        {"     Tests", " Turn to start", " Move to middle", " Move to ball", " RPI", " Stop on line", " Encoder test", ""}
    };
    char *menu_display[4];

    lcd_clear();
   818ea:	4b47      	ldr	r3, [pc, #284]	; (81a08 <print_menu_main+0x134>)
   818ec:	4798      	blx	r3

    menu_display[0] = (char *)menu_text[menu_main_column][menu_main_scroll + 0];
   818ee:	4b47      	ldr	r3, [pc, #284]	; (81a0c <print_menu_main+0x138>)
   818f0:	781b      	ldrb	r3, [r3, #0]
   818f2:	4619      	mov	r1, r3
   818f4:	4b46      	ldr	r3, [pc, #280]	; (81a10 <print_menu_main+0x13c>)
   818f6:	781b      	ldrb	r3, [r3, #0]
   818f8:	461a      	mov	r2, r3
   818fa:	00cb      	lsls	r3, r1, #3
   818fc:	4413      	add	r3, r2
   818fe:	009b      	lsls	r3, r3, #2
   81900:	f107 0270 	add.w	r2, r7, #112	; 0x70
   81904:	4413      	add	r3, r2
   81906:	f853 3c60 	ldr.w	r3, [r3, #-96]
   8190a:	603b      	str	r3, [r7, #0]
    menu_display[1] = (char *)menu_text[menu_main_column][menu_main_scroll + 1];
   8190c:	4b3f      	ldr	r3, [pc, #252]	; (81a0c <print_menu_main+0x138>)
   8190e:	781b      	ldrb	r3, [r3, #0]
   81910:	461a      	mov	r2, r3
   81912:	4b3f      	ldr	r3, [pc, #252]	; (81a10 <print_menu_main+0x13c>)
   81914:	781b      	ldrb	r3, [r3, #0]
   81916:	3301      	adds	r3, #1
   81918:	00d2      	lsls	r2, r2, #3
   8191a:	4413      	add	r3, r2
   8191c:	009b      	lsls	r3, r3, #2
   8191e:	f107 0270 	add.w	r2, r7, #112	; 0x70
   81922:	4413      	add	r3, r2
   81924:	f853 3c60 	ldr.w	r3, [r3, #-96]
   81928:	607b      	str	r3, [r7, #4]
    menu_display[2] = (char *)menu_text[menu_main_column][menu_main_scroll + 2];
   8192a:	4b38      	ldr	r3, [pc, #224]	; (81a0c <print_menu_main+0x138>)
   8192c:	781b      	ldrb	r3, [r3, #0]
   8192e:	461a      	mov	r2, r3
   81930:	4b37      	ldr	r3, [pc, #220]	; (81a10 <print_menu_main+0x13c>)
   81932:	781b      	ldrb	r3, [r3, #0]
   81934:	3302      	adds	r3, #2
   81936:	00d2      	lsls	r2, r2, #3
   81938:	4413      	add	r3, r2
   8193a:	009b      	lsls	r3, r3, #2
   8193c:	f107 0270 	add.w	r2, r7, #112	; 0x70
   81940:	4413      	add	r3, r2
   81942:	f853 3c60 	ldr.w	r3, [r3, #-96]
   81946:	60bb      	str	r3, [r7, #8]
    menu_display[3] = (char *)menu_text[menu_main_column][menu_main_scroll + 3];
   81948:	4b30      	ldr	r3, [pc, #192]	; (81a0c <print_menu_main+0x138>)
   8194a:	781b      	ldrb	r3, [r3, #0]
   8194c:	461a      	mov	r2, r3
   8194e:	4b30      	ldr	r3, [pc, #192]	; (81a10 <print_menu_main+0x13c>)
   81950:	781b      	ldrb	r3, [r3, #0]
   81952:	3303      	adds	r3, #3
   81954:	00d2      	lsls	r2, r2, #3
   81956:	4413      	add	r3, r2
   81958:	009b      	lsls	r3, r3, #2
   8195a:	f107 0270 	add.w	r2, r7, #112	; 0x70
   8195e:	4413      	add	r3, r2
   81960:	f853 3c60 	ldr.w	r3, [r3, #-96]
   81964:	60fb      	str	r3, [r7, #12]
    lcd_print_m(menu_display);
   81966:	463b      	mov	r3, r7
   81968:	4618      	mov	r0, r3
   8196a:	4b2a      	ldr	r3, [pc, #168]	; (81a14 <print_menu_main+0x140>)
   8196c:	4798      	blx	r3

    switch(menu_main_column)
   8196e:	4b27      	ldr	r3, [pc, #156]	; (81a0c <print_menu_main+0x138>)
   81970:	781b      	ldrb	r3, [r3, #0]
   81972:	2b01      	cmp	r3, #1
   81974:	d037      	beq.n	819e6 <print_menu_main+0x112>
   81976:	2b02      	cmp	r3, #2
   81978:	d037      	beq.n	819ea <print_menu_main+0x116>
   8197a:	2b00      	cmp	r3, #0
   8197c:	d136      	bne.n	819ec <print_menu_main+0x118>
    {
        case 0:
            sprintf(sprintf_cache, "%1d", rbt_id);
   8197e:	4b26      	ldr	r3, [pc, #152]	; (81a18 <print_menu_main+0x144>)
   81980:	f993 3000 	ldrsb.w	r3, [r3]
   81984:	461a      	mov	r2, r3
   81986:	4925      	ldr	r1, [pc, #148]	; (81a1c <print_menu_main+0x148>)
   81988:	4825      	ldr	r0, [pc, #148]	; (81a20 <print_menu_main+0x14c>)
   8198a:	4b26      	ldr	r3, [pc, #152]	; (81a24 <print_menu_main+0x150>)
   8198c:	4798      	blx	r3
            lcd_print_s(2 - menu_main_scroll, 11, sprintf_cache);
   8198e:	4b20      	ldr	r3, [pc, #128]	; (81a10 <print_menu_main+0x13c>)
   81990:	781b      	ldrb	r3, [r3, #0]
   81992:	f1c3 0302 	rsb	r3, r3, #2
   81996:	b2db      	uxtb	r3, r3
   81998:	b25b      	sxtb	r3, r3
   8199a:	4a21      	ldr	r2, [pc, #132]	; (81a20 <print_menu_main+0x14c>)
   8199c:	210b      	movs	r1, #11
   8199e:	4618      	mov	r0, r3
   819a0:	4b21      	ldr	r3, [pc, #132]	; (81a28 <print_menu_main+0x154>)
   819a2:	4798      	blx	r3
            sprintf(sprintf_cache, "%2d", 15);	//speed_preset
   819a4:	220f      	movs	r2, #15
   819a6:	4921      	ldr	r1, [pc, #132]	; (81a2c <print_menu_main+0x158>)
   819a8:	481d      	ldr	r0, [pc, #116]	; (81a20 <print_menu_main+0x14c>)
   819aa:	4b1e      	ldr	r3, [pc, #120]	; (81a24 <print_menu_main+0x150>)
   819ac:	4798      	blx	r3
            lcd_print_s(3 - menu_main_scroll, 8, sprintf_cache);
   819ae:	4b18      	ldr	r3, [pc, #96]	; (81a10 <print_menu_main+0x13c>)
   819b0:	781b      	ldrb	r3, [r3, #0]
   819b2:	f1c3 0303 	rsb	r3, r3, #3
   819b6:	b2db      	uxtb	r3, r3
   819b8:	b25b      	sxtb	r3, r3
   819ba:	4a19      	ldr	r2, [pc, #100]	; (81a20 <print_menu_main+0x14c>)
   819bc:	2108      	movs	r1, #8
   819be:	4618      	mov	r0, r3
   819c0:	4b19      	ldr	r3, [pc, #100]	; (81a28 <print_menu_main+0x154>)
   819c2:	4798      	blx	r3
            sprintf(sprintf_cache, "%1d", 1);	//rpi_tx.info.wifi
   819c4:	2201      	movs	r2, #1
   819c6:	4915      	ldr	r1, [pc, #84]	; (81a1c <print_menu_main+0x148>)
   819c8:	4815      	ldr	r0, [pc, #84]	; (81a20 <print_menu_main+0x14c>)
   819ca:	4b16      	ldr	r3, [pc, #88]	; (81a24 <print_menu_main+0x150>)
   819cc:	4798      	blx	r3
            lcd_print_s(4 - menu_main_scroll, 7, sprintf_cache);
   819ce:	4b10      	ldr	r3, [pc, #64]	; (81a10 <print_menu_main+0x13c>)
   819d0:	781b      	ldrb	r3, [r3, #0]
   819d2:	f1c3 0304 	rsb	r3, r3, #4
   819d6:	b2db      	uxtb	r3, r3
   819d8:	b25b      	sxtb	r3, r3
   819da:	4a11      	ldr	r2, [pc, #68]	; (81a20 <print_menu_main+0x14c>)
   819dc:	2107      	movs	r1, #7
   819de:	4618      	mov	r0, r3
   819e0:	4b11      	ldr	r3, [pc, #68]	; (81a28 <print_menu_main+0x154>)
   819e2:	4798      	blx	r3
            break;
   819e4:	e002      	b.n	819ec <print_menu_main+0x118>
        case 1:
            break;
   819e6:	bf00      	nop
   819e8:	e000      	b.n	819ec <print_menu_main+0x118>
        case 2:
            break;
   819ea:	bf00      	nop
    }
    
    print_cursor();
   819ec:	4b10      	ldr	r3, [pc, #64]	; (81a30 <print_menu_main+0x15c>)
   819ee:	4798      	blx	r3
    update_battery(1);
   819f0:	2001      	movs	r0, #1
   819f2:	4b10      	ldr	r3, [pc, #64]	; (81a34 <print_menu_main+0x160>)
   819f4:	4798      	blx	r3
}
   819f6:	bf00      	nop
   819f8:	3770      	adds	r7, #112	; 0x70
   819fa:	46bd      	mov	sp, r7
   819fc:	bd80      	pop	{r7, pc}
   819fe:	bf00      	nop
   81a00:	0008847c 	.word	0x0008847c
   81a04:	00083e91 	.word	0x00083e91
   81a08:	00080f6d 	.word	0x00080f6d
   81a0c:	20070194 	.word	0x20070194
   81a10:	20070fa1 	.word	0x20070fa1
   81a14:	000811b1 	.word	0x000811b1
   81a18:	2007018d 	.word	0x2007018d
   81a1c:	0008837c 	.word	0x0008837c
   81a20:	20071018 	.word	0x20071018
   81a24:	00084019 	.word	0x00084019
   81a28:	00080f8d 	.word	0x00080f8d
   81a2c:	00088380 	.word	0x00088380
   81a30:	00081a39 	.word	0x00081a39
   81a34:	00081f4d 	.word	0x00081f4d

00081a38 <print_cursor>:

void print_cursor(void)
{
   81a38:	b580      	push	{r7, lr}
   81a3a:	af00      	add	r7, sp, #0
    if (act_menu == MENU_MAIN && act_cursor_line == 1)
   81a3c:	4b3a      	ldr	r3, [pc, #232]	; (81b28 <print_cursor+0xf0>)
   81a3e:	781b      	ldrb	r3, [r3, #0]
   81a40:	2b00      	cmp	r3, #0
   81a42:	d133      	bne.n	81aac <print_cursor+0x74>
   81a44:	4b39      	ldr	r3, [pc, #228]	; (81b2c <print_cursor+0xf4>)
   81a46:	781b      	ldrb	r3, [r3, #0]
   81a48:	2b01      	cmp	r3, #1
   81a4a:	d12f      	bne.n	81aac <print_cursor+0x74>
    {
        switch (menu_main_column)
   81a4c:	4b38      	ldr	r3, [pc, #224]	; (81b30 <print_cursor+0xf8>)
   81a4e:	781b      	ldrb	r3, [r3, #0]
   81a50:	2b01      	cmp	r3, #1
   81a52:	d00f      	beq.n	81a74 <print_cursor+0x3c>
   81a54:	2b02      	cmp	r3, #2
   81a56:	d01d      	beq.n	81a94 <print_cursor+0x5c>
   81a58:	2b00      	cmp	r3, #0
   81a5a:	d000      	beq.n	81a5e <print_cursor+0x26>
            case 2:
                lcd_print_s(1, 3, "<");
                lcd_print_s(2, 0, " ");
                break;
            default:
                break;
   81a5c:	e025      	b.n	81aaa <print_cursor+0x72>
                lcd_print_s(1, 12, ">");
   81a5e:	4a35      	ldr	r2, [pc, #212]	; (81b34 <print_cursor+0xfc>)
   81a60:	210c      	movs	r1, #12
   81a62:	2001      	movs	r0, #1
   81a64:	4b34      	ldr	r3, [pc, #208]	; (81b38 <print_cursor+0x100>)
   81a66:	4798      	blx	r3
                lcd_print_s(2, 0, " ");
   81a68:	4a34      	ldr	r2, [pc, #208]	; (81b3c <print_cursor+0x104>)
   81a6a:	2100      	movs	r1, #0
   81a6c:	2002      	movs	r0, #2
   81a6e:	4b32      	ldr	r3, [pc, #200]	; (81b38 <print_cursor+0x100>)
   81a70:	4798      	blx	r3
                break;
   81a72:	e01a      	b.n	81aaa <print_cursor+0x72>
                lcd_print_s(1, 3, "<");
   81a74:	4a32      	ldr	r2, [pc, #200]	; (81b40 <print_cursor+0x108>)
   81a76:	2103      	movs	r1, #3
   81a78:	2001      	movs	r0, #1
   81a7a:	4b2f      	ldr	r3, [pc, #188]	; (81b38 <print_cursor+0x100>)
   81a7c:	4798      	blx	r3
                lcd_print_s(1, 11, ">");
   81a7e:	4a2d      	ldr	r2, [pc, #180]	; (81b34 <print_cursor+0xfc>)
   81a80:	210b      	movs	r1, #11
   81a82:	2001      	movs	r0, #1
   81a84:	4b2c      	ldr	r3, [pc, #176]	; (81b38 <print_cursor+0x100>)
   81a86:	4798      	blx	r3
                lcd_print_s(2, 0, " ");
   81a88:	4a2c      	ldr	r2, [pc, #176]	; (81b3c <print_cursor+0x104>)
   81a8a:	2100      	movs	r1, #0
   81a8c:	2002      	movs	r0, #2
   81a8e:	4b2a      	ldr	r3, [pc, #168]	; (81b38 <print_cursor+0x100>)
   81a90:	4798      	blx	r3
                break;
   81a92:	e00a      	b.n	81aaa <print_cursor+0x72>
                lcd_print_s(1, 3, "<");
   81a94:	4a2a      	ldr	r2, [pc, #168]	; (81b40 <print_cursor+0x108>)
   81a96:	2103      	movs	r1, #3
   81a98:	2001      	movs	r0, #1
   81a9a:	4b27      	ldr	r3, [pc, #156]	; (81b38 <print_cursor+0x100>)
   81a9c:	4798      	blx	r3
                lcd_print_s(2, 0, " ");
   81a9e:	4a27      	ldr	r2, [pc, #156]	; (81b3c <print_cursor+0x104>)
   81aa0:	2100      	movs	r1, #0
   81aa2:	2002      	movs	r0, #2
   81aa4:	4b24      	ldr	r3, [pc, #144]	; (81b38 <print_cursor+0x100>)
   81aa6:	4798      	blx	r3
                break;
   81aa8:	bf00      	nop
        }
    }
   81aaa:	e033      	b.n	81b14 <print_cursor+0xdc>
    else
    {
        if (prev_cursor_line == 1)
   81aac:	4b25      	ldr	r3, [pc, #148]	; (81b44 <print_cursor+0x10c>)
   81aae:	781b      	ldrb	r3, [r3, #0]
   81ab0:	2b01      	cmp	r3, #1
   81ab2:	d11f      	bne.n	81af4 <print_cursor+0xbc>
        {
            switch (menu_main_column)
   81ab4:	4b1e      	ldr	r3, [pc, #120]	; (81b30 <print_cursor+0xf8>)
   81ab6:	781b      	ldrb	r3, [r3, #0]
   81ab8:	2b01      	cmp	r3, #1
   81aba:	d00a      	beq.n	81ad2 <print_cursor+0x9a>
   81abc:	2b02      	cmp	r3, #2
   81abe:	d013      	beq.n	81ae8 <print_cursor+0xb0>
   81ac0:	2b00      	cmp	r3, #0
   81ac2:	d000      	beq.n	81ac6 <print_cursor+0x8e>
                    break;
                case 2:
                    lcd_print_s(1, 3, " ");
                    break;
                default:
                    break;
   81ac4:	e016      	b.n	81af4 <print_cursor+0xbc>
                    lcd_print_s(1, 12, " ");
   81ac6:	4a1d      	ldr	r2, [pc, #116]	; (81b3c <print_cursor+0x104>)
   81ac8:	210c      	movs	r1, #12
   81aca:	2001      	movs	r0, #1
   81acc:	4b1a      	ldr	r3, [pc, #104]	; (81b38 <print_cursor+0x100>)
   81ace:	4798      	blx	r3
                    break;
   81ad0:	e010      	b.n	81af4 <print_cursor+0xbc>
                    lcd_print_s(1, 3, " ");
   81ad2:	4a1a      	ldr	r2, [pc, #104]	; (81b3c <print_cursor+0x104>)
   81ad4:	2103      	movs	r1, #3
   81ad6:	2001      	movs	r0, #1
   81ad8:	4b17      	ldr	r3, [pc, #92]	; (81b38 <print_cursor+0x100>)
   81ada:	4798      	blx	r3
                    lcd_print_s(1, 11, " ");
   81adc:	4a17      	ldr	r2, [pc, #92]	; (81b3c <print_cursor+0x104>)
   81ade:	210b      	movs	r1, #11
   81ae0:	2001      	movs	r0, #1
   81ae2:	4b15      	ldr	r3, [pc, #84]	; (81b38 <print_cursor+0x100>)
   81ae4:	4798      	blx	r3
                    break;
   81ae6:	e005      	b.n	81af4 <print_cursor+0xbc>
                    lcd_print_s(1, 3, " ");
   81ae8:	4a14      	ldr	r2, [pc, #80]	; (81b3c <print_cursor+0x104>)
   81aea:	2103      	movs	r1, #3
   81aec:	2001      	movs	r0, #1
   81aee:	4b12      	ldr	r3, [pc, #72]	; (81b38 <print_cursor+0x100>)
   81af0:	4798      	blx	r3
                    break;
   81af2:	bf00      	nop
            }
        }
        
        lcd_print_s(prev_cursor_line_on_lcd, 0, " ");
   81af4:	4b14      	ldr	r3, [pc, #80]	; (81b48 <print_cursor+0x110>)
   81af6:	781b      	ldrb	r3, [r3, #0]
   81af8:	b25b      	sxtb	r3, r3
   81afa:	4a10      	ldr	r2, [pc, #64]	; (81b3c <print_cursor+0x104>)
   81afc:	2100      	movs	r1, #0
   81afe:	4618      	mov	r0, r3
   81b00:	4b0d      	ldr	r3, [pc, #52]	; (81b38 <print_cursor+0x100>)
   81b02:	4798      	blx	r3
        lcd_print_s(act_cursor_line_on_lcd, 0, ">");
   81b04:	4b11      	ldr	r3, [pc, #68]	; (81b4c <print_cursor+0x114>)
   81b06:	781b      	ldrb	r3, [r3, #0]
   81b08:	b25b      	sxtb	r3, r3
   81b0a:	4a0a      	ldr	r2, [pc, #40]	; (81b34 <print_cursor+0xfc>)
   81b0c:	2100      	movs	r1, #0
   81b0e:	4618      	mov	r0, r3
   81b10:	4b09      	ldr	r3, [pc, #36]	; (81b38 <print_cursor+0x100>)
   81b12:	4798      	blx	r3
    }
    
    prev_cursor_line = act_cursor_line;
   81b14:	4b05      	ldr	r3, [pc, #20]	; (81b2c <print_cursor+0xf4>)
   81b16:	781a      	ldrb	r2, [r3, #0]
   81b18:	4b0a      	ldr	r3, [pc, #40]	; (81b44 <print_cursor+0x10c>)
   81b1a:	701a      	strb	r2, [r3, #0]
    prev_cursor_line_on_lcd = act_cursor_line_on_lcd;
   81b1c:	4b0b      	ldr	r3, [pc, #44]	; (81b4c <print_cursor+0x114>)
   81b1e:	781a      	ldrb	r2, [r3, #0]
   81b20:	4b09      	ldr	r3, [pc, #36]	; (81b48 <print_cursor+0x110>)
   81b22:	701a      	strb	r2, [r3, #0]
}
   81b24:	bf00      	nop
   81b26:	bd80      	pop	{r7, pc}
   81b28:	20070fa0 	.word	0x20070fa0
   81b2c:	20070190 	.word	0x20070190
   81b30:	20070194 	.word	0x20070194
   81b34:	000884dc 	.word	0x000884dc
   81b38:	00080f8d 	.word	0x00080f8d
   81b3c:	000884e0 	.word	0x000884e0
   81b40:	000884e4 	.word	0x000884e4
   81b44:	20070191 	.word	0x20070191
   81b48:	2007018f 	.word	0x2007018f
   81b4c:	2007018e 	.word	0x2007018e

00081b50 <button_events>:

event_t button_events(void)
{
   81b50:	b580      	push	{r7, lr}
   81b52:	b082      	sub	sp, #8
   81b54:	af00      	add	r7, sp, #0
    event_t nextEvent = EVENT_NO_EVENT;
   81b56:	2300      	movs	r3, #0
   81b58:	71fb      	strb	r3, [r7, #7]

    if (getTicks() >= (ticks_button_update + 30))
   81b5a:	4b88      	ldr	r3, [pc, #544]	; (81d7c <button_events+0x22c>)
   81b5c:	4798      	blx	r3
   81b5e:	4602      	mov	r2, r0
   81b60:	4b87      	ldr	r3, [pc, #540]	; (81d80 <button_events+0x230>)
   81b62:	681b      	ldr	r3, [r3, #0]
   81b64:	331e      	adds	r3, #30
   81b66:	429a      	cmp	r2, r3
   81b68:	f0c0 814a 	bcc.w	81e00 <button_events+0x2b0>
    {
        ticks_button_update = getTicks();
   81b6c:	4b83      	ldr	r3, [pc, #524]	; (81d7c <button_events+0x22c>)
   81b6e:	4798      	blx	r3
   81b70:	4602      	mov	r2, r0
   81b72:	4b83      	ldr	r3, [pc, #524]	; (81d80 <button_events+0x230>)
   81b74:	601a      	str	r2, [r3, #0]
        
        pb_up_act = ioport_get_pin_level(PB_UP);
   81b76:	2060      	movs	r0, #96	; 0x60
   81b78:	4b82      	ldr	r3, [pc, #520]	; (81d84 <button_events+0x234>)
   81b7a:	4798      	blx	r3
   81b7c:	4603      	mov	r3, r0
   81b7e:	461a      	mov	r2, r3
   81b80:	4b81      	ldr	r3, [pc, #516]	; (81d88 <button_events+0x238>)
   81b82:	701a      	strb	r2, [r3, #0]
        pb_left_act = ioport_get_pin_level(PB_LEFT);
   81b84:	2061      	movs	r0, #97	; 0x61
   81b86:	4b7f      	ldr	r3, [pc, #508]	; (81d84 <button_events+0x234>)
   81b88:	4798      	blx	r3
   81b8a:	4603      	mov	r3, r0
   81b8c:	461a      	mov	r2, r3
   81b8e:	4b7f      	ldr	r3, [pc, #508]	; (81d8c <button_events+0x23c>)
   81b90:	701a      	strb	r2, [r3, #0]
        pb_mid_act = ioport_get_pin_level(PB_MID);
   81b92:	2062      	movs	r0, #98	; 0x62
   81b94:	4b7b      	ldr	r3, [pc, #492]	; (81d84 <button_events+0x234>)
   81b96:	4798      	blx	r3
   81b98:	4603      	mov	r3, r0
   81b9a:	461a      	mov	r2, r3
   81b9c:	4b7c      	ldr	r3, [pc, #496]	; (81d90 <button_events+0x240>)
   81b9e:	701a      	strb	r2, [r3, #0]
        pb_right_act = ioport_get_pin_level(PB_RIGHT);
   81ba0:	2063      	movs	r0, #99	; 0x63
   81ba2:	4b78      	ldr	r3, [pc, #480]	; (81d84 <button_events+0x234>)
   81ba4:	4798      	blx	r3
   81ba6:	4603      	mov	r3, r0
   81ba8:	461a      	mov	r2, r3
   81baa:	4b7a      	ldr	r3, [pc, #488]	; (81d94 <button_events+0x244>)
   81bac:	701a      	strb	r2, [r3, #0]
        pb_down_act = ioport_get_pin_level(PB_DOWN);
   81bae:	2064      	movs	r0, #100	; 0x64
   81bb0:	4b74      	ldr	r3, [pc, #464]	; (81d84 <button_events+0x234>)
   81bb2:	4798      	blx	r3
   81bb4:	4603      	mov	r3, r0
   81bb6:	461a      	mov	r2, r3
   81bb8:	4b77      	ldr	r3, [pc, #476]	; (81d98 <button_events+0x248>)
   81bba:	701a      	strb	r2, [r3, #0]
        pb_return_act = ioport_get_pin_level(PB_RETURN);
   81bbc:	2065      	movs	r0, #101	; 0x65
   81bbe:	4b71      	ldr	r3, [pc, #452]	; (81d84 <button_events+0x234>)
   81bc0:	4798      	blx	r3
   81bc2:	4603      	mov	r3, r0
   81bc4:	461a      	mov	r2, r3
   81bc6:	4b75      	ldr	r3, [pc, #468]	; (81d9c <button_events+0x24c>)
   81bc8:	701a      	strb	r2, [r3, #0]
        
        if (pb_up_act != pb_up_prev && pb_up_act == 0)
   81bca:	4b6f      	ldr	r3, [pc, #444]	; (81d88 <button_events+0x238>)
   81bcc:	781a      	ldrb	r2, [r3, #0]
   81bce:	4b74      	ldr	r3, [pc, #464]	; (81da0 <button_events+0x250>)
   81bd0:	781b      	ldrb	r3, [r3, #0]
   81bd2:	429a      	cmp	r2, r3
   81bd4:	d006      	beq.n	81be4 <button_events+0x94>
   81bd6:	4b6c      	ldr	r3, [pc, #432]	; (81d88 <button_events+0x238>)
   81bd8:	781b      	ldrb	r3, [r3, #0]
   81bda:	2b00      	cmp	r3, #0
   81bdc:	d102      	bne.n	81be4 <button_events+0x94>
        {
            nextEvent = EVENT_BUTTON_UP_P;
   81bde:	2301      	movs	r3, #1
   81be0:	71fb      	strb	r3, [r7, #7]
   81be2:	e018      	b.n	81c16 <button_events+0xc6>
        }
        else if (pb_up_act != pb_up_prev && pb_up_act == 1)
   81be4:	4b68      	ldr	r3, [pc, #416]	; (81d88 <button_events+0x238>)
   81be6:	781a      	ldrb	r2, [r3, #0]
   81be8:	4b6d      	ldr	r3, [pc, #436]	; (81da0 <button_events+0x250>)
   81bea:	781b      	ldrb	r3, [r3, #0]
   81bec:	429a      	cmp	r2, r3
   81bee:	d006      	beq.n	81bfe <button_events+0xae>
   81bf0:	4b65      	ldr	r3, [pc, #404]	; (81d88 <button_events+0x238>)
   81bf2:	781b      	ldrb	r3, [r3, #0]
   81bf4:	2b01      	cmp	r3, #1
   81bf6:	d102      	bne.n	81bfe <button_events+0xae>
        {
            nextEvent = EVENT_BUTTON_UP_R;
   81bf8:	2303      	movs	r3, #3
   81bfa:	71fb      	strb	r3, [r7, #7]
   81bfc:	e00b      	b.n	81c16 <button_events+0xc6>
        }
        else if (pb_up_act == pb_up_prev && pb_up_act == 0)
   81bfe:	4b62      	ldr	r3, [pc, #392]	; (81d88 <button_events+0x238>)
   81c00:	781a      	ldrb	r2, [r3, #0]
   81c02:	4b67      	ldr	r3, [pc, #412]	; (81da0 <button_events+0x250>)
   81c04:	781b      	ldrb	r3, [r3, #0]
   81c06:	429a      	cmp	r2, r3
   81c08:	d105      	bne.n	81c16 <button_events+0xc6>
   81c0a:	4b5f      	ldr	r3, [pc, #380]	; (81d88 <button_events+0x238>)
   81c0c:	781b      	ldrb	r3, [r3, #0]
   81c0e:	2b00      	cmp	r3, #0
   81c10:	d101      	bne.n	81c16 <button_events+0xc6>
        {
            nextEvent = EVENT_BUTTON_UP_H;
   81c12:	2302      	movs	r3, #2
   81c14:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_left_act != pb_left_prev && pb_left_act == 0)
   81c16:	4b5d      	ldr	r3, [pc, #372]	; (81d8c <button_events+0x23c>)
   81c18:	781a      	ldrb	r2, [r3, #0]
   81c1a:	4b62      	ldr	r3, [pc, #392]	; (81da4 <button_events+0x254>)
   81c1c:	781b      	ldrb	r3, [r3, #0]
   81c1e:	429a      	cmp	r2, r3
   81c20:	d006      	beq.n	81c30 <button_events+0xe0>
   81c22:	4b5a      	ldr	r3, [pc, #360]	; (81d8c <button_events+0x23c>)
   81c24:	781b      	ldrb	r3, [r3, #0]
   81c26:	2b00      	cmp	r3, #0
   81c28:	d102      	bne.n	81c30 <button_events+0xe0>
        {
            nextEvent = EVENT_BUTTON_LEFT_P;
   81c2a:	2304      	movs	r3, #4
   81c2c:	71fb      	strb	r3, [r7, #7]
   81c2e:	e018      	b.n	81c62 <button_events+0x112>
        }
        else if (pb_left_act != pb_left_prev && pb_left_act == 1)
   81c30:	4b56      	ldr	r3, [pc, #344]	; (81d8c <button_events+0x23c>)
   81c32:	781a      	ldrb	r2, [r3, #0]
   81c34:	4b5b      	ldr	r3, [pc, #364]	; (81da4 <button_events+0x254>)
   81c36:	781b      	ldrb	r3, [r3, #0]
   81c38:	429a      	cmp	r2, r3
   81c3a:	d006      	beq.n	81c4a <button_events+0xfa>
   81c3c:	4b53      	ldr	r3, [pc, #332]	; (81d8c <button_events+0x23c>)
   81c3e:	781b      	ldrb	r3, [r3, #0]
   81c40:	2b01      	cmp	r3, #1
   81c42:	d102      	bne.n	81c4a <button_events+0xfa>
        {
            nextEvent = EVENT_BUTTON_LEFT_R;
   81c44:	2306      	movs	r3, #6
   81c46:	71fb      	strb	r3, [r7, #7]
   81c48:	e00b      	b.n	81c62 <button_events+0x112>
        }
        else if (pb_left_act == pb_left_prev && pb_left_act == 0)
   81c4a:	4b50      	ldr	r3, [pc, #320]	; (81d8c <button_events+0x23c>)
   81c4c:	781a      	ldrb	r2, [r3, #0]
   81c4e:	4b55      	ldr	r3, [pc, #340]	; (81da4 <button_events+0x254>)
   81c50:	781b      	ldrb	r3, [r3, #0]
   81c52:	429a      	cmp	r2, r3
   81c54:	d105      	bne.n	81c62 <button_events+0x112>
   81c56:	4b4d      	ldr	r3, [pc, #308]	; (81d8c <button_events+0x23c>)
   81c58:	781b      	ldrb	r3, [r3, #0]
   81c5a:	2b00      	cmp	r3, #0
   81c5c:	d101      	bne.n	81c62 <button_events+0x112>
        {
            nextEvent = EVENT_BUTTON_LEFT_H;
   81c5e:	2305      	movs	r3, #5
   81c60:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_mid_act != pb_mid_prev && pb_mid_act == 0)
   81c62:	4b4b      	ldr	r3, [pc, #300]	; (81d90 <button_events+0x240>)
   81c64:	781a      	ldrb	r2, [r3, #0]
   81c66:	4b50      	ldr	r3, [pc, #320]	; (81da8 <button_events+0x258>)
   81c68:	781b      	ldrb	r3, [r3, #0]
   81c6a:	429a      	cmp	r2, r3
   81c6c:	d006      	beq.n	81c7c <button_events+0x12c>
   81c6e:	4b48      	ldr	r3, [pc, #288]	; (81d90 <button_events+0x240>)
   81c70:	781b      	ldrb	r3, [r3, #0]
   81c72:	2b00      	cmp	r3, #0
   81c74:	d102      	bne.n	81c7c <button_events+0x12c>
        {
            nextEvent = EVENT_BUTTON_MID_P;
   81c76:	2307      	movs	r3, #7
   81c78:	71fb      	strb	r3, [r7, #7]
   81c7a:	e018      	b.n	81cae <button_events+0x15e>
        }
        else if (pb_mid_act != pb_mid_prev && pb_mid_act == 1)
   81c7c:	4b44      	ldr	r3, [pc, #272]	; (81d90 <button_events+0x240>)
   81c7e:	781a      	ldrb	r2, [r3, #0]
   81c80:	4b49      	ldr	r3, [pc, #292]	; (81da8 <button_events+0x258>)
   81c82:	781b      	ldrb	r3, [r3, #0]
   81c84:	429a      	cmp	r2, r3
   81c86:	d006      	beq.n	81c96 <button_events+0x146>
   81c88:	4b41      	ldr	r3, [pc, #260]	; (81d90 <button_events+0x240>)
   81c8a:	781b      	ldrb	r3, [r3, #0]
   81c8c:	2b01      	cmp	r3, #1
   81c8e:	d102      	bne.n	81c96 <button_events+0x146>
        {
            nextEvent = EVENT_BUTTON_MID_R;
   81c90:	2309      	movs	r3, #9
   81c92:	71fb      	strb	r3, [r7, #7]
   81c94:	e00b      	b.n	81cae <button_events+0x15e>
        }
        else if (pb_mid_act == pb_mid_prev && pb_mid_act == 0)
   81c96:	4b3e      	ldr	r3, [pc, #248]	; (81d90 <button_events+0x240>)
   81c98:	781a      	ldrb	r2, [r3, #0]
   81c9a:	4b43      	ldr	r3, [pc, #268]	; (81da8 <button_events+0x258>)
   81c9c:	781b      	ldrb	r3, [r3, #0]
   81c9e:	429a      	cmp	r2, r3
   81ca0:	d105      	bne.n	81cae <button_events+0x15e>
   81ca2:	4b3b      	ldr	r3, [pc, #236]	; (81d90 <button_events+0x240>)
   81ca4:	781b      	ldrb	r3, [r3, #0]
   81ca6:	2b00      	cmp	r3, #0
   81ca8:	d101      	bne.n	81cae <button_events+0x15e>
        {
            nextEvent = EVENT_BUTTON_MID_H;
   81caa:	2308      	movs	r3, #8
   81cac:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_right_act != pb_right_prev && pb_right_act == 0)
   81cae:	4b39      	ldr	r3, [pc, #228]	; (81d94 <button_events+0x244>)
   81cb0:	781a      	ldrb	r2, [r3, #0]
   81cb2:	4b3e      	ldr	r3, [pc, #248]	; (81dac <button_events+0x25c>)
   81cb4:	781b      	ldrb	r3, [r3, #0]
   81cb6:	429a      	cmp	r2, r3
   81cb8:	d006      	beq.n	81cc8 <button_events+0x178>
   81cba:	4b36      	ldr	r3, [pc, #216]	; (81d94 <button_events+0x244>)
   81cbc:	781b      	ldrb	r3, [r3, #0]
   81cbe:	2b00      	cmp	r3, #0
   81cc0:	d102      	bne.n	81cc8 <button_events+0x178>
        {
            nextEvent = EVENT_BUTTON_RIGHT_P;
   81cc2:	230a      	movs	r3, #10
   81cc4:	71fb      	strb	r3, [r7, #7]
   81cc6:	e018      	b.n	81cfa <button_events+0x1aa>
        }
        else if (pb_right_act != pb_right_prev && pb_right_act == 1)
   81cc8:	4b32      	ldr	r3, [pc, #200]	; (81d94 <button_events+0x244>)
   81cca:	781a      	ldrb	r2, [r3, #0]
   81ccc:	4b37      	ldr	r3, [pc, #220]	; (81dac <button_events+0x25c>)
   81cce:	781b      	ldrb	r3, [r3, #0]
   81cd0:	429a      	cmp	r2, r3
   81cd2:	d006      	beq.n	81ce2 <button_events+0x192>
   81cd4:	4b2f      	ldr	r3, [pc, #188]	; (81d94 <button_events+0x244>)
   81cd6:	781b      	ldrb	r3, [r3, #0]
   81cd8:	2b01      	cmp	r3, #1
   81cda:	d102      	bne.n	81ce2 <button_events+0x192>
        {
            nextEvent = EVENT_BUTTON_RIGHT_R;
   81cdc:	230c      	movs	r3, #12
   81cde:	71fb      	strb	r3, [r7, #7]
   81ce0:	e00b      	b.n	81cfa <button_events+0x1aa>
        }
        else if (pb_right_act == pb_right_prev && pb_right_act == 0)
   81ce2:	4b2c      	ldr	r3, [pc, #176]	; (81d94 <button_events+0x244>)
   81ce4:	781a      	ldrb	r2, [r3, #0]
   81ce6:	4b31      	ldr	r3, [pc, #196]	; (81dac <button_events+0x25c>)
   81ce8:	781b      	ldrb	r3, [r3, #0]
   81cea:	429a      	cmp	r2, r3
   81cec:	d105      	bne.n	81cfa <button_events+0x1aa>
   81cee:	4b29      	ldr	r3, [pc, #164]	; (81d94 <button_events+0x244>)
   81cf0:	781b      	ldrb	r3, [r3, #0]
   81cf2:	2b00      	cmp	r3, #0
   81cf4:	d101      	bne.n	81cfa <button_events+0x1aa>
        {
            nextEvent = EVENT_BUTTON_RIGHT_H;
   81cf6:	230b      	movs	r3, #11
   81cf8:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_down_act != pb_down_prev && pb_down_act == 0)
   81cfa:	4b27      	ldr	r3, [pc, #156]	; (81d98 <button_events+0x248>)
   81cfc:	781a      	ldrb	r2, [r3, #0]
   81cfe:	4b2c      	ldr	r3, [pc, #176]	; (81db0 <button_events+0x260>)
   81d00:	781b      	ldrb	r3, [r3, #0]
   81d02:	429a      	cmp	r2, r3
   81d04:	d006      	beq.n	81d14 <button_events+0x1c4>
   81d06:	4b24      	ldr	r3, [pc, #144]	; (81d98 <button_events+0x248>)
   81d08:	781b      	ldrb	r3, [r3, #0]
   81d0a:	2b00      	cmp	r3, #0
   81d0c:	d102      	bne.n	81d14 <button_events+0x1c4>
        {
            nextEvent = EVENT_BUTTON_DOWN_P;
   81d0e:	230d      	movs	r3, #13
   81d10:	71fb      	strb	r3, [r7, #7]
   81d12:	e018      	b.n	81d46 <button_events+0x1f6>
        }
        else if (pb_down_act != pb_down_prev && pb_down_act == 1)
   81d14:	4b20      	ldr	r3, [pc, #128]	; (81d98 <button_events+0x248>)
   81d16:	781a      	ldrb	r2, [r3, #0]
   81d18:	4b25      	ldr	r3, [pc, #148]	; (81db0 <button_events+0x260>)
   81d1a:	781b      	ldrb	r3, [r3, #0]
   81d1c:	429a      	cmp	r2, r3
   81d1e:	d006      	beq.n	81d2e <button_events+0x1de>
   81d20:	4b1d      	ldr	r3, [pc, #116]	; (81d98 <button_events+0x248>)
   81d22:	781b      	ldrb	r3, [r3, #0]
   81d24:	2b01      	cmp	r3, #1
   81d26:	d102      	bne.n	81d2e <button_events+0x1de>
        {
            nextEvent = EVENT_BUTTON_DOWN_R;
   81d28:	230f      	movs	r3, #15
   81d2a:	71fb      	strb	r3, [r7, #7]
   81d2c:	e00b      	b.n	81d46 <button_events+0x1f6>
        }
        else if (pb_down_act == pb_down_prev && pb_down_act == 0)
   81d2e:	4b1a      	ldr	r3, [pc, #104]	; (81d98 <button_events+0x248>)
   81d30:	781a      	ldrb	r2, [r3, #0]
   81d32:	4b1f      	ldr	r3, [pc, #124]	; (81db0 <button_events+0x260>)
   81d34:	781b      	ldrb	r3, [r3, #0]
   81d36:	429a      	cmp	r2, r3
   81d38:	d105      	bne.n	81d46 <button_events+0x1f6>
   81d3a:	4b17      	ldr	r3, [pc, #92]	; (81d98 <button_events+0x248>)
   81d3c:	781b      	ldrb	r3, [r3, #0]
   81d3e:	2b00      	cmp	r3, #0
   81d40:	d101      	bne.n	81d46 <button_events+0x1f6>
        {
            nextEvent = EVENT_BUTTON_DOWN_H;
   81d42:	230e      	movs	r3, #14
   81d44:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_return_act != pb_return_prev && pb_return_act == 0)
   81d46:	4b15      	ldr	r3, [pc, #84]	; (81d9c <button_events+0x24c>)
   81d48:	781a      	ldrb	r2, [r3, #0]
   81d4a:	4b1a      	ldr	r3, [pc, #104]	; (81db4 <button_events+0x264>)
   81d4c:	781b      	ldrb	r3, [r3, #0]
   81d4e:	429a      	cmp	r2, r3
   81d50:	d006      	beq.n	81d60 <button_events+0x210>
   81d52:	4b12      	ldr	r3, [pc, #72]	; (81d9c <button_events+0x24c>)
   81d54:	781b      	ldrb	r3, [r3, #0]
   81d56:	2b00      	cmp	r3, #0
   81d58:	d102      	bne.n	81d60 <button_events+0x210>
        {
            nextEvent = EVENT_BUTTON_RETURN_P;
   81d5a:	2310      	movs	r3, #16
   81d5c:	71fb      	strb	r3, [r7, #7]
   81d5e:	e037      	b.n	81dd0 <button_events+0x280>
        }
        else if (pb_return_act != pb_return_prev && pb_return_act == 1)
   81d60:	4b0e      	ldr	r3, [pc, #56]	; (81d9c <button_events+0x24c>)
   81d62:	781a      	ldrb	r2, [r3, #0]
   81d64:	4b13      	ldr	r3, [pc, #76]	; (81db4 <button_events+0x264>)
   81d66:	781b      	ldrb	r3, [r3, #0]
   81d68:	429a      	cmp	r2, r3
   81d6a:	d025      	beq.n	81db8 <button_events+0x268>
   81d6c:	4b0b      	ldr	r3, [pc, #44]	; (81d9c <button_events+0x24c>)
   81d6e:	781b      	ldrb	r3, [r3, #0]
   81d70:	2b01      	cmp	r3, #1
   81d72:	d121      	bne.n	81db8 <button_events+0x268>
        {
            nextEvent = EVENT_BUTTON_RETURN_R;
   81d74:	2312      	movs	r3, #18
   81d76:	71fb      	strb	r3, [r7, #7]
   81d78:	e02a      	b.n	81dd0 <button_events+0x280>
   81d7a:	bf00      	nop
   81d7c:	00081ec5 	.word	0x00081ec5
   81d80:	20071000 	.word	0x20071000
   81d84:	00081631 	.word	0x00081631
   81d88:	2007102d 	.word	0x2007102d
   81d8c:	20071014 	.word	0x20071014
   81d90:	2007102c 	.word	0x2007102c
   81d94:	2007102e 	.word	0x2007102e
   81d98:	20071010 	.word	0x20071010
   81d9c:	2007100c 	.word	0x2007100c
   81da0:	20071011 	.word	0x20071011
   81da4:	2007100f 	.word	0x2007100f
   81da8:	2007100d 	.word	0x2007100d
   81dac:	20071012 	.word	0x20071012
   81db0:	2007100e 	.word	0x2007100e
   81db4:	20071013 	.word	0x20071013
        }
        else if (pb_return_act == pb_up_prev && pb_return_act == 0)
   81db8:	4b14      	ldr	r3, [pc, #80]	; (81e0c <button_events+0x2bc>)
   81dba:	781a      	ldrb	r2, [r3, #0]
   81dbc:	4b14      	ldr	r3, [pc, #80]	; (81e10 <button_events+0x2c0>)
   81dbe:	781b      	ldrb	r3, [r3, #0]
   81dc0:	429a      	cmp	r2, r3
   81dc2:	d105      	bne.n	81dd0 <button_events+0x280>
   81dc4:	4b11      	ldr	r3, [pc, #68]	; (81e0c <button_events+0x2bc>)
   81dc6:	781b      	ldrb	r3, [r3, #0]
   81dc8:	2b00      	cmp	r3, #0
   81dca:	d101      	bne.n	81dd0 <button_events+0x280>
        {
            nextEvent = EVENT_BUTTON_RETURN_H;
   81dcc:	2311      	movs	r3, #17
   81dce:	71fb      	strb	r3, [r7, #7]
        }
        
        pb_up_prev = pb_up_act;
   81dd0:	4b10      	ldr	r3, [pc, #64]	; (81e14 <button_events+0x2c4>)
   81dd2:	781a      	ldrb	r2, [r3, #0]
   81dd4:	4b0e      	ldr	r3, [pc, #56]	; (81e10 <button_events+0x2c0>)
   81dd6:	701a      	strb	r2, [r3, #0]
        pb_left_prev = pb_left_act;
   81dd8:	4b0f      	ldr	r3, [pc, #60]	; (81e18 <button_events+0x2c8>)
   81dda:	781a      	ldrb	r2, [r3, #0]
   81ddc:	4b0f      	ldr	r3, [pc, #60]	; (81e1c <button_events+0x2cc>)
   81dde:	701a      	strb	r2, [r3, #0]
        pb_mid_prev = pb_mid_act;
   81de0:	4b0f      	ldr	r3, [pc, #60]	; (81e20 <button_events+0x2d0>)
   81de2:	781a      	ldrb	r2, [r3, #0]
   81de4:	4b0f      	ldr	r3, [pc, #60]	; (81e24 <button_events+0x2d4>)
   81de6:	701a      	strb	r2, [r3, #0]
        pb_right_prev = pb_right_act;
   81de8:	4b0f      	ldr	r3, [pc, #60]	; (81e28 <button_events+0x2d8>)
   81dea:	781a      	ldrb	r2, [r3, #0]
   81dec:	4b0f      	ldr	r3, [pc, #60]	; (81e2c <button_events+0x2dc>)
   81dee:	701a      	strb	r2, [r3, #0]
        pb_down_prev = pb_down_act;
   81df0:	4b0f      	ldr	r3, [pc, #60]	; (81e30 <button_events+0x2e0>)
   81df2:	781a      	ldrb	r2, [r3, #0]
   81df4:	4b0f      	ldr	r3, [pc, #60]	; (81e34 <button_events+0x2e4>)
   81df6:	701a      	strb	r2, [r3, #0]
        pb_return_prev = pb_return_act;
   81df8:	4b04      	ldr	r3, [pc, #16]	; (81e0c <button_events+0x2bc>)
   81dfa:	781a      	ldrb	r2, [r3, #0]
   81dfc:	4b0e      	ldr	r3, [pc, #56]	; (81e38 <button_events+0x2e8>)
   81dfe:	701a      	strb	r2, [r3, #0]
    }

    return nextEvent;
   81e00:	79fb      	ldrb	r3, [r7, #7]
}
   81e02:	4618      	mov	r0, r3
   81e04:	3708      	adds	r7, #8
   81e06:	46bd      	mov	sp, r7
   81e08:	bd80      	pop	{r7, pc}
   81e0a:	bf00      	nop
   81e0c:	2007100c 	.word	0x2007100c
   81e10:	20071011 	.word	0x20071011
   81e14:	2007102d 	.word	0x2007102d
   81e18:	20071014 	.word	0x20071014
   81e1c:	2007100f 	.word	0x2007100f
   81e20:	2007102c 	.word	0x2007102c
   81e24:	2007100d 	.word	0x2007100d
   81e28:	2007102e 	.word	0x2007102e
   81e2c:	20071012 	.word	0x20071012
   81e30:	20071010 	.word	0x20071010
   81e34:	2007100e 	.word	0x2007100e
   81e38:	20071013 	.word	0x20071013

00081e3c <ioport_set_pin_level>:
{
   81e3c:	b480      	push	{r7}
   81e3e:	b08b      	sub	sp, #44	; 0x2c
   81e40:	af00      	add	r7, sp, #0
   81e42:	6078      	str	r0, [r7, #4]
   81e44:	460b      	mov	r3, r1
   81e46:	70fb      	strb	r3, [r7, #3]
   81e48:	687b      	ldr	r3, [r7, #4]
   81e4a:	627b      	str	r3, [r7, #36]	; 0x24
   81e4c:	78fb      	ldrb	r3, [r7, #3]
   81e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81e54:	61fb      	str	r3, [r7, #28]
   81e56:	69fb      	ldr	r3, [r7, #28]
   81e58:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   81e5a:	69bb      	ldr	r3, [r7, #24]
   81e5c:	095b      	lsrs	r3, r3, #5
   81e5e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81e60:	697b      	ldr	r3, [r7, #20]
   81e62:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e66:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e6a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   81e6c:	613b      	str	r3, [r7, #16]
	if (level) {
   81e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81e72:	2b00      	cmp	r3, #0
   81e74:	d009      	beq.n	81e8a <ioport_set_pin_level+0x4e>
   81e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81e78:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81e7a:	68fb      	ldr	r3, [r7, #12]
   81e7c:	f003 031f 	and.w	r3, r3, #31
   81e80:	2201      	movs	r2, #1
   81e82:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81e84:	693b      	ldr	r3, [r7, #16]
   81e86:	631a      	str	r2, [r3, #48]	; 0x30
}
   81e88:	e008      	b.n	81e9c <ioport_set_pin_level+0x60>
   81e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81e8c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   81e8e:	68bb      	ldr	r3, [r7, #8]
   81e90:	f003 031f 	and.w	r3, r3, #31
   81e94:	2201      	movs	r2, #1
   81e96:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81e98:	693b      	ldr	r3, [r7, #16]
   81e9a:	635a      	str	r2, [r3, #52]	; 0x34
   81e9c:	bf00      	nop
   81e9e:	372c      	adds	r7, #44	; 0x2c
   81ea0:	46bd      	mov	sp, r7
   81ea2:	bc80      	pop	{r7}
   81ea4:	4770      	bx	lr
	...

00081ea8 <SysTick_Handler>:
static uint32_t g_ul_ms_ticks = 0;
float battery_voltage = 0;
float prev_battery_voltage = 0;

void SysTick_Handler(void)
{
   81ea8:	b480      	push	{r7}
   81eaa:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   81eac:	4b04      	ldr	r3, [pc, #16]	; (81ec0 <SysTick_Handler+0x18>)
   81eae:	681b      	ldr	r3, [r3, #0]
   81eb0:	3301      	adds	r3, #1
   81eb2:	4a03      	ldr	r2, [pc, #12]	; (81ec0 <SysTick_Handler+0x18>)
   81eb4:	6013      	str	r3, [r2, #0]
}
   81eb6:	bf00      	nop
   81eb8:	46bd      	mov	sp, r7
   81eba:	bc80      	pop	{r7}
   81ebc:	4770      	bx	lr
   81ebe:	bf00      	nop
   81ec0:	20070fa4 	.word	0x20070fa4

00081ec4 <getTicks>:

uint32_t getTicks(void)
{
   81ec4:	b480      	push	{r7}
   81ec6:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   81ec8:	4b02      	ldr	r3, [pc, #8]	; (81ed4 <getTicks+0x10>)
   81eca:	681b      	ldr	r3, [r3, #0]
}
   81ecc:	4618      	mov	r0, r3
   81ece:	46bd      	mov	sp, r7
   81ed0:	bc80      	pop	{r7}
   81ed2:	4770      	bx	lr
   81ed4:	20070fa4 	.word	0x20070fa4

00081ed8 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   81ed8:	b480      	push	{r7}
   81eda:	b085      	sub	sp, #20
   81edc:	af00      	add	r7, sp, #0
   81ede:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   81ee0:	4b07      	ldr	r3, [pc, #28]	; (81f00 <mdelay+0x28>)
   81ee2:	681b      	ldr	r3, [r3, #0]
   81ee4:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   81ee6:	bf00      	nop
   81ee8:	4b05      	ldr	r3, [pc, #20]	; (81f00 <mdelay+0x28>)
   81eea:	681a      	ldr	r2, [r3, #0]
   81eec:	68fb      	ldr	r3, [r7, #12]
   81eee:	1ad2      	subs	r2, r2, r3
   81ef0:	687b      	ldr	r3, [r7, #4]
   81ef2:	429a      	cmp	r2, r3
   81ef4:	d3f8      	bcc.n	81ee8 <mdelay+0x10>
}
   81ef6:	bf00      	nop
   81ef8:	3714      	adds	r7, #20
   81efa:	46bd      	mov	sp, r7
   81efc:	bc80      	pop	{r7}
   81efe:	4770      	bx	lr
   81f00:	20070fa4 	.word	0x20070fa4

00081f04 <update_comm>:

void update_comm(void)
{
   81f04:	b580      	push	{r7, lr}
   81f06:	af00      	add	r7, sp, #0
    if ((getTicks() - ticks_comm) > 5)
   81f08:	4b0b      	ldr	r3, [pc, #44]	; (81f38 <update_comm+0x34>)
   81f0a:	4798      	blx	r3
   81f0c:	4602      	mov	r2, r0
   81f0e:	4b0b      	ldr	r3, [pc, #44]	; (81f3c <update_comm+0x38>)
   81f10:	681b      	ldr	r3, [r3, #0]
   81f12:	1ad3      	subs	r3, r2, r3
   81f14:	2b05      	cmp	r3, #5
   81f16:	d90d      	bls.n	81f34 <update_comm+0x30>
    {
        ticks_comm = getTicks();
   81f18:	4b07      	ldr	r3, [pc, #28]	; (81f38 <update_comm+0x34>)
   81f1a:	4798      	blx	r3
   81f1c:	4602      	mov	r2, r0
   81f1e:	4b07      	ldr	r3, [pc, #28]	; (81f3c <update_comm+0x38>)
   81f20:	601a      	str	r2, [r3, #0]
        
        memcpy(&sens_buf, &mts, sizeof(mts));
   81f22:	4b07      	ldr	r3, [pc, #28]	; (81f40 <update_comm+0x3c>)
   81f24:	881b      	ldrh	r3, [r3, #0]
   81f26:	b29b      	uxth	r3, r3
   81f28:	4a06      	ldr	r2, [pc, #24]	; (81f44 <update_comm+0x40>)
   81f2a:	8013      	strh	r3, [r2, #0]
        spi_master_transfer(&sens_buf, sizeof(sens_buf));
   81f2c:	2102      	movs	r1, #2
   81f2e:	4805      	ldr	r0, [pc, #20]	; (81f44 <update_comm+0x40>)
   81f30:	4b05      	ldr	r3, [pc, #20]	; (81f48 <update_comm+0x44>)
   81f32:	4798      	blx	r3
    }
}
   81f34:	bf00      	nop
   81f36:	bd80      	pop	{r7, pc}
   81f38:	00081ec5 	.word	0x00081ec5
   81f3c:	20070ffc 	.word	0x20070ffc
   81f40:	20070ff0 	.word	0x20070ff0
   81f44:	20070fec 	.word	0x20070fec
   81f48:	00080645 	.word	0x00080645

00081f4c <update_battery>:

void update_battery(Bool update_forced)
{
   81f4c:	b590      	push	{r4, r7, lr}
   81f4e:	b085      	sub	sp, #20
   81f50:	af00      	add	r7, sp, #0
   81f52:	4603      	mov	r3, r0
   81f54:	71fb      	strb	r3, [r7, #7]
    char tmp[7];
    
    if (menu_main_scroll == 0)
   81f56:	4b56      	ldr	r3, [pc, #344]	; (820b0 <update_battery+0x164>)
   81f58:	781b      	ldrb	r3, [r3, #0]
   81f5a:	2b00      	cmp	r3, #0
   81f5c:	f040 80a4 	bne.w	820a8 <update_battery+0x15c>
    {
        if ((getTicks() - ticks_battery) > 500)
   81f60:	4b54      	ldr	r3, [pc, #336]	; (820b4 <update_battery+0x168>)
   81f62:	4798      	blx	r3
   81f64:	4602      	mov	r2, r0
   81f66:	4b54      	ldr	r3, [pc, #336]	; (820b8 <update_battery+0x16c>)
   81f68:	681b      	ldr	r3, [r3, #0]
   81f6a:	1ad3      	subs	r3, r2, r3
   81f6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   81f70:	d952      	bls.n	82018 <update_battery+0xcc>
        {
            ticks_battery = getTicks();
   81f72:	4b50      	ldr	r3, [pc, #320]	; (820b4 <update_battery+0x168>)
   81f74:	4798      	blx	r3
   81f76:	4602      	mov	r2, r0
   81f78:	4b4f      	ldr	r3, [pc, #316]	; (820b8 <update_battery+0x16c>)
   81f7a:	601a      	str	r2, [r3, #0]
            
            battery_voltage = (float)stm.bat_voltage / 16.0;
   81f7c:	4b4f      	ldr	r3, [pc, #316]	; (820bc <update_battery+0x170>)
   81f7e:	785a      	ldrb	r2, [r3, #1]
   81f80:	4b4f      	ldr	r3, [pc, #316]	; (820c0 <update_battery+0x174>)
   81f82:	4610      	mov	r0, r2
   81f84:	4798      	blx	r3
   81f86:	4602      	mov	r2, r0
   81f88:	4b4e      	ldr	r3, [pc, #312]	; (820c4 <update_battery+0x178>)
   81f8a:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
   81f8e:	4610      	mov	r0, r2
   81f90:	4798      	blx	r3
   81f92:	4603      	mov	r3, r0
   81f94:	461a      	mov	r2, r3
   81f96:	4b4c      	ldr	r3, [pc, #304]	; (820c8 <update_battery+0x17c>)
   81f98:	601a      	str	r2, [r3, #0]
            
            if ((int)(battery_voltage) != (int)(prev_battery_voltage))
   81f9a:	4b4b      	ldr	r3, [pc, #300]	; (820c8 <update_battery+0x17c>)
   81f9c:	681a      	ldr	r2, [r3, #0]
   81f9e:	4b4b      	ldr	r3, [pc, #300]	; (820cc <update_battery+0x180>)
   81fa0:	4610      	mov	r0, r2
   81fa2:	4798      	blx	r3
   81fa4:	4604      	mov	r4, r0
   81fa6:	4b4a      	ldr	r3, [pc, #296]	; (820d0 <update_battery+0x184>)
   81fa8:	681a      	ldr	r2, [r3, #0]
   81faa:	4b48      	ldr	r3, [pc, #288]	; (820cc <update_battery+0x180>)
   81fac:	4610      	mov	r0, r2
   81fae:	4798      	blx	r3
   81fb0:	4603      	mov	r3, r0
   81fb2:	429c      	cmp	r4, r3
   81fb4:	d030      	beq.n	82018 <update_battery+0xcc>
            {
                if (battery_voltage >= 10)
   81fb6:	4b44      	ldr	r3, [pc, #272]	; (820c8 <update_battery+0x17c>)
   81fb8:	681a      	ldr	r2, [r3, #0]
   81fba:	4b46      	ldr	r3, [pc, #280]	; (820d4 <update_battery+0x188>)
   81fbc:	4946      	ldr	r1, [pc, #280]	; (820d8 <update_battery+0x18c>)
   81fbe:	4610      	mov	r0, r2
   81fc0:	4798      	blx	r3
   81fc2:	4603      	mov	r3, r0
   81fc4:	2b00      	cmp	r3, #0
   81fc6:	d00e      	beq.n	81fe6 <update_battery+0x9a>
                {
                    sprintf(tmp, "%3.1fV", battery_voltage);
   81fc8:	4b3f      	ldr	r3, [pc, #252]	; (820c8 <update_battery+0x17c>)
   81fca:	681a      	ldr	r2, [r3, #0]
   81fcc:	4b43      	ldr	r3, [pc, #268]	; (820dc <update_battery+0x190>)
   81fce:	4610      	mov	r0, r2
   81fd0:	4798      	blx	r3
   81fd2:	4603      	mov	r3, r0
   81fd4:	460c      	mov	r4, r1
   81fd6:	f107 0008 	add.w	r0, r7, #8
   81fda:	461a      	mov	r2, r3
   81fdc:	4623      	mov	r3, r4
   81fde:	4940      	ldr	r1, [pc, #256]	; (820e0 <update_battery+0x194>)
   81fe0:	4c40      	ldr	r4, [pc, #256]	; (820e4 <update_battery+0x198>)
   81fe2:	47a0      	blx	r4
   81fe4:	e00d      	b.n	82002 <update_battery+0xb6>
                }
                else
                {
                    sprintf(tmp, " %3.1fV", battery_voltage);
   81fe6:	4b38      	ldr	r3, [pc, #224]	; (820c8 <update_battery+0x17c>)
   81fe8:	681a      	ldr	r2, [r3, #0]
   81fea:	4b3c      	ldr	r3, [pc, #240]	; (820dc <update_battery+0x190>)
   81fec:	4610      	mov	r0, r2
   81fee:	4798      	blx	r3
   81ff0:	4603      	mov	r3, r0
   81ff2:	460c      	mov	r4, r1
   81ff4:	f107 0008 	add.w	r0, r7, #8
   81ff8:	461a      	mov	r2, r3
   81ffa:	4623      	mov	r3, r4
   81ffc:	493a      	ldr	r1, [pc, #232]	; (820e8 <update_battery+0x19c>)
   81ffe:	4c39      	ldr	r4, [pc, #228]	; (820e4 <update_battery+0x198>)
   82000:	47a0      	blx	r4
                }
                
                lcd_print_s(1, 15, tmp);
   82002:	f107 0308 	add.w	r3, r7, #8
   82006:	461a      	mov	r2, r3
   82008:	210f      	movs	r1, #15
   8200a:	2001      	movs	r0, #1
   8200c:	4b37      	ldr	r3, [pc, #220]	; (820ec <update_battery+0x1a0>)
   8200e:	4798      	blx	r3
                prev_battery_voltage = battery_voltage;
   82010:	4b2d      	ldr	r3, [pc, #180]	; (820c8 <update_battery+0x17c>)
   82012:	681b      	ldr	r3, [r3, #0]
   82014:	4a2e      	ldr	r2, [pc, #184]	; (820d0 <update_battery+0x184>)
   82016:	6013      	str	r3, [r2, #0]
            }
        }
        
        if (update_forced)
   82018:	79fb      	ldrb	r3, [r7, #7]
   8201a:	2b00      	cmp	r3, #0
   8201c:	d044      	beq.n	820a8 <update_battery+0x15c>
        {
            ticks_battery = getTicks();
   8201e:	4b25      	ldr	r3, [pc, #148]	; (820b4 <update_battery+0x168>)
   82020:	4798      	blx	r3
   82022:	4602      	mov	r2, r0
   82024:	4b24      	ldr	r3, [pc, #144]	; (820b8 <update_battery+0x16c>)
   82026:	601a      	str	r2, [r3, #0]
            
            battery_voltage = (float)stm.bat_voltage / 16.0;
   82028:	4b24      	ldr	r3, [pc, #144]	; (820bc <update_battery+0x170>)
   8202a:	785a      	ldrb	r2, [r3, #1]
   8202c:	4b24      	ldr	r3, [pc, #144]	; (820c0 <update_battery+0x174>)
   8202e:	4610      	mov	r0, r2
   82030:	4798      	blx	r3
   82032:	4602      	mov	r2, r0
   82034:	4b23      	ldr	r3, [pc, #140]	; (820c4 <update_battery+0x178>)
   82036:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
   8203a:	4610      	mov	r0, r2
   8203c:	4798      	blx	r3
   8203e:	4603      	mov	r3, r0
   82040:	461a      	mov	r2, r3
   82042:	4b21      	ldr	r3, [pc, #132]	; (820c8 <update_battery+0x17c>)
   82044:	601a      	str	r2, [r3, #0]
            
            if (battery_voltage >= 10)
   82046:	4b20      	ldr	r3, [pc, #128]	; (820c8 <update_battery+0x17c>)
   82048:	681a      	ldr	r2, [r3, #0]
   8204a:	4b22      	ldr	r3, [pc, #136]	; (820d4 <update_battery+0x188>)
   8204c:	4922      	ldr	r1, [pc, #136]	; (820d8 <update_battery+0x18c>)
   8204e:	4610      	mov	r0, r2
   82050:	4798      	blx	r3
   82052:	4603      	mov	r3, r0
   82054:	2b00      	cmp	r3, #0
   82056:	d00e      	beq.n	82076 <update_battery+0x12a>
            {
                sprintf(tmp, "%3.1fV", battery_voltage);
   82058:	4b1b      	ldr	r3, [pc, #108]	; (820c8 <update_battery+0x17c>)
   8205a:	681a      	ldr	r2, [r3, #0]
   8205c:	4b1f      	ldr	r3, [pc, #124]	; (820dc <update_battery+0x190>)
   8205e:	4610      	mov	r0, r2
   82060:	4798      	blx	r3
   82062:	4603      	mov	r3, r0
   82064:	460c      	mov	r4, r1
   82066:	f107 0008 	add.w	r0, r7, #8
   8206a:	461a      	mov	r2, r3
   8206c:	4623      	mov	r3, r4
   8206e:	491c      	ldr	r1, [pc, #112]	; (820e0 <update_battery+0x194>)
   82070:	4c1c      	ldr	r4, [pc, #112]	; (820e4 <update_battery+0x198>)
   82072:	47a0      	blx	r4
   82074:	e00d      	b.n	82092 <update_battery+0x146>
            }
            else
            {
                sprintf(tmp, " %3.1fV", battery_voltage);
   82076:	4b14      	ldr	r3, [pc, #80]	; (820c8 <update_battery+0x17c>)
   82078:	681a      	ldr	r2, [r3, #0]
   8207a:	4b18      	ldr	r3, [pc, #96]	; (820dc <update_battery+0x190>)
   8207c:	4610      	mov	r0, r2
   8207e:	4798      	blx	r3
   82080:	4603      	mov	r3, r0
   82082:	460c      	mov	r4, r1
   82084:	f107 0008 	add.w	r0, r7, #8
   82088:	461a      	mov	r2, r3
   8208a:	4623      	mov	r3, r4
   8208c:	4916      	ldr	r1, [pc, #88]	; (820e8 <update_battery+0x19c>)
   8208e:	4c15      	ldr	r4, [pc, #84]	; (820e4 <update_battery+0x198>)
   82090:	47a0      	blx	r4
            }
            
            lcd_print_s(1, 15, tmp);
   82092:	f107 0308 	add.w	r3, r7, #8
   82096:	461a      	mov	r2, r3
   82098:	210f      	movs	r1, #15
   8209a:	2001      	movs	r0, #1
   8209c:	4b13      	ldr	r3, [pc, #76]	; (820ec <update_battery+0x1a0>)
   8209e:	4798      	blx	r3
            prev_battery_voltage = battery_voltage;
   820a0:	4b09      	ldr	r3, [pc, #36]	; (820c8 <update_battery+0x17c>)
   820a2:	681b      	ldr	r3, [r3, #0]
   820a4:	4a0a      	ldr	r2, [pc, #40]	; (820d0 <update_battery+0x184>)
   820a6:	6013      	str	r3, [r2, #0]
        }
    }
}
   820a8:	bf00      	nop
   820aa:	3714      	adds	r7, #20
   820ac:	46bd      	mov	sp, r7
   820ae:	bd90      	pop	{r4, r7, pc}
   820b0:	20070fa1 	.word	0x20070fa1
   820b4:	00081ec5 	.word	0x00081ec5
   820b8:	20071004 	.word	0x20071004
   820bc:	20070ff4 	.word	0x20070ff4
   820c0:	000839b9 	.word	0x000839b9
   820c4:	00083bd1 	.word	0x00083bd1
   820c8:	20070fa8 	.word	0x20070fa8
   820cc:	00083df5 	.word	0x00083df5
   820d0:	20070fac 	.word	0x20070fac
   820d4:	00083dcd 	.word	0x00083dcd
   820d8:	41200000 	.word	0x41200000
   820dc:	000837a5 	.word	0x000837a5
   820e0:	000884e8 	.word	0x000884e8
   820e4:	00084019 	.word	0x00084019
   820e8:	000884f0 	.word	0x000884f0
   820ec:	00080f8d 	.word	0x00080f8d

000820f0 <update_heartbeat>:

void update_heartbeat(void)
{
   820f0:	b580      	push	{r7, lr}
   820f2:	af00      	add	r7, sp, #0
    if (heart_state)
   820f4:	4b20      	ldr	r3, [pc, #128]	; (82178 <update_heartbeat+0x88>)
   820f6:	781b      	ldrb	r3, [r3, #0]
   820f8:	2b00      	cmp	r3, #0
   820fa:	d01d      	beq.n	82138 <update_heartbeat+0x48>
    {
        if (getTicks() >= (ticks_heartbeat + 100))
   820fc:	4b1f      	ldr	r3, [pc, #124]	; (8217c <update_heartbeat+0x8c>)
   820fe:	4798      	blx	r3
   82100:	4602      	mov	r2, r0
   82102:	4b1f      	ldr	r3, [pc, #124]	; (82180 <update_heartbeat+0x90>)
   82104:	681b      	ldr	r3, [r3, #0]
   82106:	3364      	adds	r3, #100	; 0x64
   82108:	429a      	cmp	r2, r3
   8210a:	d333      	bcc.n	82174 <update_heartbeat+0x84>
        {
            ticks_heartbeat = getTicks();
   8210c:	4b1b      	ldr	r3, [pc, #108]	; (8217c <update_heartbeat+0x8c>)
   8210e:	4798      	blx	r3
   82110:	4602      	mov	r2, r0
   82112:	4b1b      	ldr	r3, [pc, #108]	; (82180 <update_heartbeat+0x90>)
   82114:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 0);
   82116:	2100      	movs	r1, #0
   82118:	206a      	movs	r0, #106	; 0x6a
   8211a:	4b1a      	ldr	r3, [pc, #104]	; (82184 <update_heartbeat+0x94>)
   8211c:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 0);
   8211e:	2100      	movs	r1, #0
   82120:	2067      	movs	r0, #103	; 0x67
   82122:	4b18      	ldr	r3, [pc, #96]	; (82184 <update_heartbeat+0x94>)
   82124:	4798      	blx	r3
            mts.ibit.heartbeat = 0;
   82126:	4a18      	ldr	r2, [pc, #96]	; (82188 <update_heartbeat+0x98>)
   82128:	7813      	ldrb	r3, [r2, #0]
   8212a:	f36f 0300 	bfc	r3, #0, #1
   8212e:	7013      	strb	r3, [r2, #0]
            heart_state = 0;
   82130:	4b11      	ldr	r3, [pc, #68]	; (82178 <update_heartbeat+0x88>)
   82132:	2200      	movs	r2, #0
   82134:	701a      	strb	r2, [r3, #0]
            ioport_set_pin_level(LED_M1, 1);
            mts.ibit.heartbeat = 1;
            heart_state = 1;
        }
    }
}
   82136:	e01d      	b.n	82174 <update_heartbeat+0x84>
        if (getTicks() >= (ticks_heartbeat + 900))
   82138:	4b10      	ldr	r3, [pc, #64]	; (8217c <update_heartbeat+0x8c>)
   8213a:	4798      	blx	r3
   8213c:	4602      	mov	r2, r0
   8213e:	4b10      	ldr	r3, [pc, #64]	; (82180 <update_heartbeat+0x90>)
   82140:	681b      	ldr	r3, [r3, #0]
   82142:	f503 7361 	add.w	r3, r3, #900	; 0x384
   82146:	429a      	cmp	r2, r3
   82148:	d314      	bcc.n	82174 <update_heartbeat+0x84>
            ticks_heartbeat = getTicks();
   8214a:	4b0c      	ldr	r3, [pc, #48]	; (8217c <update_heartbeat+0x8c>)
   8214c:	4798      	blx	r3
   8214e:	4602      	mov	r2, r0
   82150:	4b0b      	ldr	r3, [pc, #44]	; (82180 <update_heartbeat+0x90>)
   82152:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 1);
   82154:	2101      	movs	r1, #1
   82156:	206a      	movs	r0, #106	; 0x6a
   82158:	4b0a      	ldr	r3, [pc, #40]	; (82184 <update_heartbeat+0x94>)
   8215a:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 1);
   8215c:	2101      	movs	r1, #1
   8215e:	2067      	movs	r0, #103	; 0x67
   82160:	4b08      	ldr	r3, [pc, #32]	; (82184 <update_heartbeat+0x94>)
   82162:	4798      	blx	r3
            mts.ibit.heartbeat = 1;
   82164:	4a08      	ldr	r2, [pc, #32]	; (82188 <update_heartbeat+0x98>)
   82166:	7813      	ldrb	r3, [r2, #0]
   82168:	f043 0301 	orr.w	r3, r3, #1
   8216c:	7013      	strb	r3, [r2, #0]
            heart_state = 1;
   8216e:	4b02      	ldr	r3, [pc, #8]	; (82178 <update_heartbeat+0x88>)
   82170:	2201      	movs	r2, #1
   82172:	701a      	strb	r2, [r3, #0]
}
   82174:	bf00      	nop
   82176:	bd80      	pop	{r7, pc}
   82178:	20070ff8 	.word	0x20070ff8
   8217c:	00081ec5 	.word	0x00081ec5
   82180:	20071008 	.word	0x20071008
   82184:	00081e3d 	.word	0x00081e3d
   82188:	20070ff0 	.word	0x20070ff0

0008218c <osc_enable>:
{
   8218c:	b580      	push	{r7, lr}
   8218e:	b082      	sub	sp, #8
   82190:	af00      	add	r7, sp, #0
   82192:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82194:	687b      	ldr	r3, [r7, #4]
   82196:	2b07      	cmp	r3, #7
   82198:	d831      	bhi.n	821fe <osc_enable+0x72>
   8219a:	a201      	add	r2, pc, #4	; (adr r2, 821a0 <osc_enable+0x14>)
   8219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   821a0:	000821fd 	.word	0x000821fd
   821a4:	000821c1 	.word	0x000821c1
   821a8:	000821c9 	.word	0x000821c9
   821ac:	000821d1 	.word	0x000821d1
   821b0:	000821d9 	.word	0x000821d9
   821b4:	000821e1 	.word	0x000821e1
   821b8:	000821e9 	.word	0x000821e9
   821bc:	000821f3 	.word	0x000821f3
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   821c0:	2000      	movs	r0, #0
   821c2:	4b11      	ldr	r3, [pc, #68]	; (82208 <osc_enable+0x7c>)
   821c4:	4798      	blx	r3
		break;
   821c6:	e01a      	b.n	821fe <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   821c8:	2001      	movs	r0, #1
   821ca:	4b0f      	ldr	r3, [pc, #60]	; (82208 <osc_enable+0x7c>)
   821cc:	4798      	blx	r3
		break;
   821ce:	e016      	b.n	821fe <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   821d0:	2000      	movs	r0, #0
   821d2:	4b0e      	ldr	r3, [pc, #56]	; (8220c <osc_enable+0x80>)
   821d4:	4798      	blx	r3
		break;
   821d6:	e012      	b.n	821fe <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   821d8:	2010      	movs	r0, #16
   821da:	4b0c      	ldr	r3, [pc, #48]	; (8220c <osc_enable+0x80>)
   821dc:	4798      	blx	r3
		break;
   821de:	e00e      	b.n	821fe <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   821e0:	2020      	movs	r0, #32
   821e2:	4b0a      	ldr	r3, [pc, #40]	; (8220c <osc_enable+0x80>)
   821e4:	4798      	blx	r3
		break;
   821e6:	e00a      	b.n	821fe <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   821e8:	213e      	movs	r1, #62	; 0x3e
   821ea:	2000      	movs	r0, #0
   821ec:	4b08      	ldr	r3, [pc, #32]	; (82210 <osc_enable+0x84>)
   821ee:	4798      	blx	r3
		break;
   821f0:	e005      	b.n	821fe <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   821f2:	213e      	movs	r1, #62	; 0x3e
   821f4:	2001      	movs	r0, #1
   821f6:	4b06      	ldr	r3, [pc, #24]	; (82210 <osc_enable+0x84>)
   821f8:	4798      	blx	r3
		break;
   821fa:	e000      	b.n	821fe <osc_enable+0x72>
		break;
   821fc:	bf00      	nop
}
   821fe:	bf00      	nop
   82200:	3708      	adds	r7, #8
   82202:	46bd      	mov	sp, r7
   82204:	bd80      	pop	{r7, pc}
   82206:	bf00      	nop
   82208:	000827c9 	.word	0x000827c9
   8220c:	00082835 	.word	0x00082835
   82210:	000828a5 	.word	0x000828a5

00082214 <osc_is_ready>:
{
   82214:	b580      	push	{r7, lr}
   82216:	b082      	sub	sp, #8
   82218:	af00      	add	r7, sp, #0
   8221a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8221c:	687b      	ldr	r3, [r7, #4]
   8221e:	2b07      	cmp	r3, #7
   82220:	d826      	bhi.n	82270 <osc_is_ready+0x5c>
   82222:	a201      	add	r2, pc, #4	; (adr r2, 82228 <osc_is_ready+0x14>)
   82224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82228:	00082249 	.word	0x00082249
   8222c:	0008224d 	.word	0x0008224d
   82230:	0008224d 	.word	0x0008224d
   82234:	0008225f 	.word	0x0008225f
   82238:	0008225f 	.word	0x0008225f
   8223c:	0008225f 	.word	0x0008225f
   82240:	0008225f 	.word	0x0008225f
   82244:	0008225f 	.word	0x0008225f
		return 1;
   82248:	2301      	movs	r3, #1
   8224a:	e012      	b.n	82272 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   8224c:	4b0b      	ldr	r3, [pc, #44]	; (8227c <osc_is_ready+0x68>)
   8224e:	4798      	blx	r3
   82250:	4603      	mov	r3, r0
   82252:	2b00      	cmp	r3, #0
   82254:	bf14      	ite	ne
   82256:	2301      	movne	r3, #1
   82258:	2300      	moveq	r3, #0
   8225a:	b2db      	uxtb	r3, r3
   8225c:	e009      	b.n	82272 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   8225e:	4b08      	ldr	r3, [pc, #32]	; (82280 <osc_is_ready+0x6c>)
   82260:	4798      	blx	r3
   82262:	4603      	mov	r3, r0
   82264:	2b00      	cmp	r3, #0
   82266:	bf14      	ite	ne
   82268:	2301      	movne	r3, #1
   8226a:	2300      	moveq	r3, #0
   8226c:	b2db      	uxtb	r3, r3
   8226e:	e000      	b.n	82272 <osc_is_ready+0x5e>
	return 0;
   82270:	2300      	movs	r3, #0
}
   82272:	4618      	mov	r0, r3
   82274:	3708      	adds	r7, #8
   82276:	46bd      	mov	sp, r7
   82278:	bd80      	pop	{r7, pc}
   8227a:	bf00      	nop
   8227c:	00082801 	.word	0x00082801
   82280:	0008291d 	.word	0x0008291d

00082284 <osc_get_rate>:
{
   82284:	b480      	push	{r7}
   82286:	b083      	sub	sp, #12
   82288:	af00      	add	r7, sp, #0
   8228a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8228c:	687b      	ldr	r3, [r7, #4]
   8228e:	2b07      	cmp	r3, #7
   82290:	d825      	bhi.n	822de <osc_get_rate+0x5a>
   82292:	a201      	add	r2, pc, #4	; (adr r2, 82298 <osc_get_rate+0x14>)
   82294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82298:	000822b9 	.word	0x000822b9
   8229c:	000822bf 	.word	0x000822bf
   822a0:	000822c5 	.word	0x000822c5
   822a4:	000822cb 	.word	0x000822cb
   822a8:	000822cf 	.word	0x000822cf
   822ac:	000822d3 	.word	0x000822d3
   822b0:	000822d7 	.word	0x000822d7
   822b4:	000822db 	.word	0x000822db
		return OSC_SLCK_32K_RC_HZ;
   822b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   822bc:	e010      	b.n	822e0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   822be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   822c2:	e00d      	b.n	822e0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   822c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   822c8:	e00a      	b.n	822e0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   822ca:	4b08      	ldr	r3, [pc, #32]	; (822ec <osc_get_rate+0x68>)
   822cc:	e008      	b.n	822e0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   822ce:	4b08      	ldr	r3, [pc, #32]	; (822f0 <osc_get_rate+0x6c>)
   822d0:	e006      	b.n	822e0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   822d2:	4b08      	ldr	r3, [pc, #32]	; (822f4 <osc_get_rate+0x70>)
   822d4:	e004      	b.n	822e0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   822d6:	4b07      	ldr	r3, [pc, #28]	; (822f4 <osc_get_rate+0x70>)
   822d8:	e002      	b.n	822e0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   822da:	4b06      	ldr	r3, [pc, #24]	; (822f4 <osc_get_rate+0x70>)
   822dc:	e000      	b.n	822e0 <osc_get_rate+0x5c>
	return 0;
   822de:	2300      	movs	r3, #0
}
   822e0:	4618      	mov	r0, r3
   822e2:	370c      	adds	r7, #12
   822e4:	46bd      	mov	sp, r7
   822e6:	bc80      	pop	{r7}
   822e8:	4770      	bx	lr
   822ea:	bf00      	nop
   822ec:	003d0900 	.word	0x003d0900
   822f0:	007a1200 	.word	0x007a1200
   822f4:	00b71b00 	.word	0x00b71b00

000822f8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   822f8:	b580      	push	{r7, lr}
   822fa:	b082      	sub	sp, #8
   822fc:	af00      	add	r7, sp, #0
   822fe:	4603      	mov	r3, r0
   82300:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   82302:	bf00      	nop
   82304:	79fb      	ldrb	r3, [r7, #7]
   82306:	4618      	mov	r0, r3
   82308:	4b05      	ldr	r3, [pc, #20]	; (82320 <osc_wait_ready+0x28>)
   8230a:	4798      	blx	r3
   8230c:	4603      	mov	r3, r0
   8230e:	f083 0301 	eor.w	r3, r3, #1
   82312:	b2db      	uxtb	r3, r3
   82314:	2b00      	cmp	r3, #0
   82316:	d1f5      	bne.n	82304 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   82318:	bf00      	nop
   8231a:	3708      	adds	r7, #8
   8231c:	46bd      	mov	sp, r7
   8231e:	bd80      	pop	{r7, pc}
   82320:	00082215 	.word	0x00082215

00082324 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   82324:	b580      	push	{r7, lr}
   82326:	b086      	sub	sp, #24
   82328:	af00      	add	r7, sp, #0
   8232a:	60f8      	str	r0, [r7, #12]
   8232c:	607a      	str	r2, [r7, #4]
   8232e:	603b      	str	r3, [r7, #0]
   82330:	460b      	mov	r3, r1
   82332:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   82334:	687b      	ldr	r3, [r7, #4]
   82336:	2b00      	cmp	r3, #0
   82338:	d107      	bne.n	8234a <pll_config_init+0x26>
   8233a:	683b      	ldr	r3, [r7, #0]
   8233c:	2b00      	cmp	r3, #0
   8233e:	d104      	bne.n	8234a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   82340:	68fb      	ldr	r3, [r7, #12]
   82342:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   82346:	601a      	str	r2, [r3, #0]
   82348:	e019      	b.n	8237e <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8234a:	7afb      	ldrb	r3, [r7, #11]
   8234c:	4618      	mov	r0, r3
   8234e:	4b0e      	ldr	r3, [pc, #56]	; (82388 <pll_config_init+0x64>)
   82350:	4798      	blx	r3
   82352:	4602      	mov	r2, r0
   82354:	687b      	ldr	r3, [r7, #4]
   82356:	fbb2 f3f3 	udiv	r3, r2, r3
   8235a:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   8235c:	697b      	ldr	r3, [r7, #20]
   8235e:	683a      	ldr	r2, [r7, #0]
   82360:	fb02 f303 	mul.w	r3, r2, r3
   82364:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   82366:	683b      	ldr	r3, [r7, #0]
   82368:	3b01      	subs	r3, #1
   8236a:	041a      	lsls	r2, r3, #16
   8236c:	4b07      	ldr	r3, [pc, #28]	; (8238c <pll_config_init+0x68>)
   8236e:	4013      	ands	r3, r2
   82370:	687a      	ldr	r2, [r7, #4]
   82372:	b2d2      	uxtb	r2, r2
   82374:	4313      	orrs	r3, r2
   82376:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8237a:	68fb      	ldr	r3, [r7, #12]
   8237c:	601a      	str	r2, [r3, #0]
	}
}
   8237e:	bf00      	nop
   82380:	3718      	adds	r7, #24
   82382:	46bd      	mov	sp, r7
   82384:	bd80      	pop	{r7, pc}
   82386:	bf00      	nop
   82388:	00082285 	.word	0x00082285
   8238c:	07ff0000 	.word	0x07ff0000

00082390 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   82390:	b580      	push	{r7, lr}
   82392:	b082      	sub	sp, #8
   82394:	af00      	add	r7, sp, #0
   82396:	6078      	str	r0, [r7, #4]
   82398:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8239a:	683b      	ldr	r3, [r7, #0]
   8239c:	2b00      	cmp	r3, #0
   8239e:	d108      	bne.n	823b2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   823a0:	4b09      	ldr	r3, [pc, #36]	; (823c8 <pll_enable+0x38>)
   823a2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   823a4:	4a09      	ldr	r2, [pc, #36]	; (823cc <pll_enable+0x3c>)
   823a6:	687b      	ldr	r3, [r7, #4]
   823a8:	681b      	ldr	r3, [r3, #0]
   823aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   823ae:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   823b0:	e005      	b.n	823be <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   823b2:	4a06      	ldr	r2, [pc, #24]	; (823cc <pll_enable+0x3c>)
   823b4:	687b      	ldr	r3, [r7, #4]
   823b6:	681b      	ldr	r3, [r3, #0]
   823b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   823bc:	61d3      	str	r3, [r2, #28]
}
   823be:	bf00      	nop
   823c0:	3708      	adds	r7, #8
   823c2:	46bd      	mov	sp, r7
   823c4:	bd80      	pop	{r7, pc}
   823c6:	bf00      	nop
   823c8:	00082935 	.word	0x00082935
   823cc:	400e0600 	.word	0x400e0600

000823d0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   823d0:	b580      	push	{r7, lr}
   823d2:	b082      	sub	sp, #8
   823d4:	af00      	add	r7, sp, #0
   823d6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   823d8:	687b      	ldr	r3, [r7, #4]
   823da:	2b00      	cmp	r3, #0
   823dc:	d103      	bne.n	823e6 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   823de:	4b05      	ldr	r3, [pc, #20]	; (823f4 <pll_is_locked+0x24>)
   823e0:	4798      	blx	r3
   823e2:	4603      	mov	r3, r0
   823e4:	e002      	b.n	823ec <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   823e6:	4b04      	ldr	r3, [pc, #16]	; (823f8 <pll_is_locked+0x28>)
   823e8:	4798      	blx	r3
   823ea:	4603      	mov	r3, r0
	}
}
   823ec:	4618      	mov	r0, r3
   823ee:	3708      	adds	r7, #8
   823f0:	46bd      	mov	sp, r7
   823f2:	bd80      	pop	{r7, pc}
   823f4:	0008294d 	.word	0x0008294d
   823f8:	00082965 	.word	0x00082965

000823fc <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   823fc:	b580      	push	{r7, lr}
   823fe:	b082      	sub	sp, #8
   82400:	af00      	add	r7, sp, #0
   82402:	4603      	mov	r3, r0
   82404:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   82406:	79fb      	ldrb	r3, [r7, #7]
   82408:	3b03      	subs	r3, #3
   8240a:	2b04      	cmp	r3, #4
   8240c:	d808      	bhi.n	82420 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8240e:	79fb      	ldrb	r3, [r7, #7]
   82410:	4618      	mov	r0, r3
   82412:	4b06      	ldr	r3, [pc, #24]	; (8242c <pll_enable_source+0x30>)
   82414:	4798      	blx	r3
		osc_wait_ready(e_src);
   82416:	79fb      	ldrb	r3, [r7, #7]
   82418:	4618      	mov	r0, r3
   8241a:	4b05      	ldr	r3, [pc, #20]	; (82430 <pll_enable_source+0x34>)
   8241c:	4798      	blx	r3
		break;
   8241e:	e000      	b.n	82422 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   82420:	bf00      	nop
	}
}
   82422:	bf00      	nop
   82424:	3708      	adds	r7, #8
   82426:	46bd      	mov	sp, r7
   82428:	bd80      	pop	{r7, pc}
   8242a:	bf00      	nop
   8242c:	0008218d 	.word	0x0008218d
   82430:	000822f9 	.word	0x000822f9

00082434 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   82434:	b580      	push	{r7, lr}
   82436:	b082      	sub	sp, #8
   82438:	af00      	add	r7, sp, #0
   8243a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8243c:	bf00      	nop
   8243e:	6878      	ldr	r0, [r7, #4]
   82440:	4b04      	ldr	r3, [pc, #16]	; (82454 <pll_wait_for_lock+0x20>)
   82442:	4798      	blx	r3
   82444:	4603      	mov	r3, r0
   82446:	2b00      	cmp	r3, #0
   82448:	d0f9      	beq.n	8243e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8244a:	2300      	movs	r3, #0
}
   8244c:	4618      	mov	r0, r3
   8244e:	3708      	adds	r7, #8
   82450:	46bd      	mov	sp, r7
   82452:	bd80      	pop	{r7, pc}
   82454:	000823d1 	.word	0x000823d1

00082458 <sysclk_get_main_hz>:
{
   82458:	b580      	push	{r7, lr}
   8245a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   8245c:	2006      	movs	r0, #6
   8245e:	4b04      	ldr	r3, [pc, #16]	; (82470 <sysclk_get_main_hz+0x18>)
   82460:	4798      	blx	r3
   82462:	4602      	mov	r2, r0
   82464:	4613      	mov	r3, r2
   82466:	00db      	lsls	r3, r3, #3
   82468:	1a9b      	subs	r3, r3, r2
   8246a:	005b      	lsls	r3, r3, #1
}
   8246c:	4618      	mov	r0, r3
   8246e:	bd80      	pop	{r7, pc}
   82470:	00082285 	.word	0x00082285

00082474 <sysclk_get_cpu_hz>:
{
   82474:	b580      	push	{r7, lr}
   82476:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   82478:	4b02      	ldr	r3, [pc, #8]	; (82484 <sysclk_get_cpu_hz+0x10>)
   8247a:	4798      	blx	r3
   8247c:	4603      	mov	r3, r0
   8247e:	085b      	lsrs	r3, r3, #1
}
   82480:	4618      	mov	r0, r3
   82482:	bd80      	pop	{r7, pc}
   82484:	00082459 	.word	0x00082459

00082488 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82488:	b590      	push	{r4, r7, lr}
   8248a:	b083      	sub	sp, #12
   8248c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8248e:	4811      	ldr	r0, [pc, #68]	; (824d4 <sysclk_init+0x4c>)
   82490:	4b11      	ldr	r3, [pc, #68]	; (824d8 <sysclk_init+0x50>)
   82492:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   82494:	2006      	movs	r0, #6
   82496:	4b11      	ldr	r3, [pc, #68]	; (824dc <sysclk_init+0x54>)
   82498:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   8249a:	1d38      	adds	r0, r7, #4
   8249c:	230e      	movs	r3, #14
   8249e:	2201      	movs	r2, #1
   824a0:	2106      	movs	r1, #6
   824a2:	4c0f      	ldr	r4, [pc, #60]	; (824e0 <sysclk_init+0x58>)
   824a4:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   824a6:	1d3b      	adds	r3, r7, #4
   824a8:	2100      	movs	r1, #0
   824aa:	4618      	mov	r0, r3
   824ac:	4b0d      	ldr	r3, [pc, #52]	; (824e4 <sysclk_init+0x5c>)
   824ae:	4798      	blx	r3
		pll_wait_for_lock(0);
   824b0:	2000      	movs	r0, #0
   824b2:	4b0d      	ldr	r3, [pc, #52]	; (824e8 <sysclk_init+0x60>)
   824b4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   824b6:	2010      	movs	r0, #16
   824b8:	4b0c      	ldr	r3, [pc, #48]	; (824ec <sysclk_init+0x64>)
   824ba:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   824bc:	4b0c      	ldr	r3, [pc, #48]	; (824f0 <sysclk_init+0x68>)
   824be:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   824c0:	4b0c      	ldr	r3, [pc, #48]	; (824f4 <sysclk_init+0x6c>)
   824c2:	4798      	blx	r3
   824c4:	4603      	mov	r3, r0
   824c6:	4618      	mov	r0, r3
   824c8:	4b03      	ldr	r3, [pc, #12]	; (824d8 <sysclk_init+0x50>)
   824ca:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   824cc:	bf00      	nop
   824ce:	370c      	adds	r7, #12
   824d0:	46bd      	mov	sp, r7
   824d2:	bd90      	pop	{r4, r7, pc}
   824d4:	0501bd00 	.word	0x0501bd00
   824d8:	200700d1 	.word	0x200700d1
   824dc:	000823fd 	.word	0x000823fd
   824e0:	00082325 	.word	0x00082325
   824e4:	00082391 	.word	0x00082391
   824e8:	00082435 	.word	0x00082435
   824ec:	00082749 	.word	0x00082749
   824f0:	00082e81 	.word	0x00082e81
   824f4:	00082475 	.word	0x00082475

000824f8 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   824f8:	b580      	push	{r7, lr}
   824fa:	b082      	sub	sp, #8
   824fc:	af00      	add	r7, sp, #0
   824fe:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   82500:	6878      	ldr	r0, [r7, #4]
   82502:	4b03      	ldr	r3, [pc, #12]	; (82510 <dmac_init+0x18>)
   82504:	4798      	blx	r3
}
   82506:	bf00      	nop
   82508:	3708      	adds	r7, #8
   8250a:	46bd      	mov	sp, r7
   8250c:	bd80      	pop	{r7, pc}
   8250e:	bf00      	nop
   82510:	00082553 	.word	0x00082553

00082514 <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   82514:	b480      	push	{r7}
   82516:	b083      	sub	sp, #12
   82518:	af00      	add	r7, sp, #0
   8251a:	6078      	str	r0, [r7, #4]
   8251c:	460b      	mov	r3, r1
   8251e:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   82520:	687b      	ldr	r3, [r7, #4]
   82522:	681b      	ldr	r3, [r3, #0]
   82524:	f023 0210 	bic.w	r2, r3, #16
   82528:	78fb      	ldrb	r3, [r7, #3]
   8252a:	431a      	orrs	r2, r3
   8252c:	687b      	ldr	r3, [r7, #4]
   8252e:	601a      	str	r2, [r3, #0]
}
   82530:	bf00      	nop
   82532:	370c      	adds	r7, #12
   82534:	46bd      	mov	sp, r7
   82536:	bc80      	pop	{r7}
   82538:	4770      	bx	lr

0008253a <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   8253a:	b480      	push	{r7}
   8253c:	b083      	sub	sp, #12
   8253e:	af00      	add	r7, sp, #0
   82540:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   82542:	687b      	ldr	r3, [r7, #4]
   82544:	2201      	movs	r2, #1
   82546:	605a      	str	r2, [r3, #4]
}
   82548:	bf00      	nop
   8254a:	370c      	adds	r7, #12
   8254c:	46bd      	mov	sp, r7
   8254e:	bc80      	pop	{r7}
   82550:	4770      	bx	lr

00082552 <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   82552:	b480      	push	{r7}
   82554:	b083      	sub	sp, #12
   82556:	af00      	add	r7, sp, #0
   82558:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   8255a:	687b      	ldr	r3, [r7, #4]
   8255c:	685b      	ldr	r3, [r3, #4]
   8255e:	f023 0201 	bic.w	r2, r3, #1
   82562:	687b      	ldr	r3, [r7, #4]
   82564:	605a      	str	r2, [r3, #4]
}
   82566:	bf00      	nop
   82568:	370c      	adds	r7, #12
   8256a:	46bd      	mov	sp, r7
   8256c:	bc80      	pop	{r7}
   8256e:	4770      	bx	lr

00082570 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   82570:	b480      	push	{r7}
   82572:	b083      	sub	sp, #12
   82574:	af00      	add	r7, sp, #0
   82576:	6078      	str	r0, [r7, #4]
   82578:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   8257a:	687b      	ldr	r3, [r7, #4]
   8257c:	683a      	ldr	r2, [r7, #0]
   8257e:	619a      	str	r2, [r3, #24]
}
   82580:	bf00      	nop
   82582:	370c      	adds	r7, #12
   82584:	46bd      	mov	sp, r7
   82586:	bc80      	pop	{r7}
   82588:	4770      	bx	lr

0008258a <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   8258a:	b480      	push	{r7}
   8258c:	b083      	sub	sp, #12
   8258e:	af00      	add	r7, sp, #0
   82590:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   82592:	687b      	ldr	r3, [r7, #4]
   82594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   82596:	4618      	mov	r0, r3
   82598:	370c      	adds	r7, #12
   8259a:	46bd      	mov	sp, r7
   8259c:	bc80      	pop	{r7}
   8259e:	4770      	bx	lr

000825a0 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   825a0:	b480      	push	{r7}
   825a2:	b083      	sub	sp, #12
   825a4:	af00      	add	r7, sp, #0
   825a6:	6078      	str	r0, [r7, #4]
   825a8:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   825aa:	2201      	movs	r2, #1
   825ac:	683b      	ldr	r3, [r7, #0]
   825ae:	409a      	lsls	r2, r3
   825b0:	687b      	ldr	r3, [r7, #4]
   825b2:	629a      	str	r2, [r3, #40]	; 0x28
}
   825b4:	bf00      	nop
   825b6:	370c      	adds	r7, #12
   825b8:	46bd      	mov	sp, r7
   825ba:	bc80      	pop	{r7}
   825bc:	4770      	bx	lr

000825be <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   825be:	b480      	push	{r7}
   825c0:	b083      	sub	sp, #12
   825c2:	af00      	add	r7, sp, #0
   825c4:	6078      	str	r0, [r7, #4]
   825c6:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   825c8:	2201      	movs	r2, #1
   825ca:	683b      	ldr	r3, [r7, #0]
   825cc:	409a      	lsls	r2, r3
   825ce:	687b      	ldr	r3, [r7, #4]
   825d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
   825d2:	bf00      	nop
   825d4:	370c      	adds	r7, #12
   825d6:	46bd      	mov	sp, r7
   825d8:	bc80      	pop	{r7}
   825da:	4770      	bx	lr

000825dc <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   825dc:	b480      	push	{r7}
   825de:	b085      	sub	sp, #20
   825e0:	af00      	add	r7, sp, #0
   825e2:	60f8      	str	r0, [r7, #12]
   825e4:	60b9      	str	r1, [r7, #8]
   825e6:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   825e8:	68f9      	ldr	r1, [r7, #12]
   825ea:	68ba      	ldr	r2, [r7, #8]
   825ec:	4613      	mov	r3, r2
   825ee:	009b      	lsls	r3, r3, #2
   825f0:	4413      	add	r3, r2
   825f2:	00db      	lsls	r3, r3, #3
   825f4:	440b      	add	r3, r1
   825f6:	333c      	adds	r3, #60	; 0x3c
   825f8:	687a      	ldr	r2, [r7, #4]
   825fa:	601a      	str	r2, [r3, #0]
}
   825fc:	bf00      	nop
   825fe:	3714      	adds	r7, #20
   82600:	46bd      	mov	sp, r7
   82602:	bc80      	pop	{r7}
   82604:	4770      	bx	lr

00082606 <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   82606:	b480      	push	{r7}
   82608:	b085      	sub	sp, #20
   8260a:	af00      	add	r7, sp, #0
   8260c:	60f8      	str	r0, [r7, #12]
   8260e:	60b9      	str	r1, [r7, #8]
   82610:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   82612:	68f9      	ldr	r1, [r7, #12]
   82614:	68ba      	ldr	r2, [r7, #8]
   82616:	4613      	mov	r3, r2
   82618:	009b      	lsls	r3, r3, #2
   8261a:	4413      	add	r3, r2
   8261c:	00db      	lsls	r3, r3, #3
   8261e:	440b      	add	r3, r1
   82620:	3340      	adds	r3, #64	; 0x40
   82622:	687a      	ldr	r2, [r7, #4]
   82624:	601a      	str	r2, [r3, #0]
}
   82626:	bf00      	nop
   82628:	3714      	adds	r7, #20
   8262a:	46bd      	mov	sp, r7
   8262c:	bc80      	pop	{r7}
   8262e:	4770      	bx	lr

00082630 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   82630:	b480      	push	{r7}
   82632:	b085      	sub	sp, #20
   82634:	af00      	add	r7, sp, #0
   82636:	60f8      	str	r0, [r7, #12]
   82638:	60b9      	str	r1, [r7, #8]
   8263a:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   8263c:	68f9      	ldr	r1, [r7, #12]
   8263e:	68ba      	ldr	r2, [r7, #8]
   82640:	4613      	mov	r3, r2
   82642:	009b      	lsls	r3, r3, #2
   82644:	4413      	add	r3, r2
   82646:	00db      	lsls	r3, r3, #3
   82648:	440b      	add	r3, r1
   8264a:	3344      	adds	r3, #68	; 0x44
   8264c:	687a      	ldr	r2, [r7, #4]
   8264e:	601a      	str	r2, [r3, #0]
}
   82650:	bf00      	nop
   82652:	3714      	adds	r7, #20
   82654:	46bd      	mov	sp, r7
   82656:	bc80      	pop	{r7}
   82658:	4770      	bx	lr

0008265a <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   8265a:	b480      	push	{r7}
   8265c:	b085      	sub	sp, #20
   8265e:	af00      	add	r7, sp, #0
   82660:	60f8      	str	r0, [r7, #12]
   82662:	60b9      	str	r1, [r7, #8]
   82664:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   82666:	68f9      	ldr	r1, [r7, #12]
   82668:	68ba      	ldr	r2, [r7, #8]
   8266a:	4613      	mov	r3, r2
   8266c:	009b      	lsls	r3, r3, #2
   8266e:	4413      	add	r3, r2
   82670:	00db      	lsls	r3, r3, #3
   82672:	440b      	add	r3, r1
   82674:	3348      	adds	r3, #72	; 0x48
   82676:	687a      	ldr	r2, [r7, #4]
   82678:	601a      	str	r2, [r3, #0]
}
   8267a:	bf00      	nop
   8267c:	3714      	adds	r7, #20
   8267e:	46bd      	mov	sp, r7
   82680:	bc80      	pop	{r7}
   82682:	4770      	bx	lr

00082684 <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   82684:	b480      	push	{r7}
   82686:	b085      	sub	sp, #20
   82688:	af00      	add	r7, sp, #0
   8268a:	60f8      	str	r0, [r7, #12]
   8268c:	60b9      	str	r1, [r7, #8]
   8268e:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   82690:	68f9      	ldr	r1, [r7, #12]
   82692:	68ba      	ldr	r2, [r7, #8]
   82694:	4613      	mov	r3, r2
   82696:	009b      	lsls	r3, r3, #2
   82698:	4413      	add	r3, r2
   8269a:	00db      	lsls	r3, r3, #3
   8269c:	440b      	add	r3, r1
   8269e:	334c      	adds	r3, #76	; 0x4c
   826a0:	687a      	ldr	r2, [r7, #4]
   826a2:	601a      	str	r2, [r3, #0]
}
   826a4:	bf00      	nop
   826a6:	3714      	adds	r7, #20
   826a8:	46bd      	mov	sp, r7
   826aa:	bc80      	pop	{r7}
   826ac:	4770      	bx	lr

000826ae <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   826ae:	b480      	push	{r7}
   826b0:	b085      	sub	sp, #20
   826b2:	af00      	add	r7, sp, #0
   826b4:	60f8      	str	r0, [r7, #12]
   826b6:	60b9      	str	r1, [r7, #8]
   826b8:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   826ba:	68f9      	ldr	r1, [r7, #12]
   826bc:	68ba      	ldr	r2, [r7, #8]
   826be:	4613      	mov	r3, r2
   826c0:	009b      	lsls	r3, r3, #2
   826c2:	4413      	add	r3, r2
   826c4:	00db      	lsls	r3, r3, #3
   826c6:	440b      	add	r3, r1
   826c8:	3350      	adds	r3, #80	; 0x50
   826ca:	687a      	ldr	r2, [r7, #4]
   826cc:	601a      	str	r2, [r3, #0]
}
   826ce:	bf00      	nop
   826d0:	3714      	adds	r7, #20
   826d2:	46bd      	mov	sp, r7
   826d4:	bc80      	pop	{r7}
   826d6:	4770      	bx	lr

000826d8 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   826d8:	b580      	push	{r7, lr}
   826da:	b084      	sub	sp, #16
   826dc:	af00      	add	r7, sp, #0
   826de:	60f8      	str	r0, [r7, #12]
   826e0:	60b9      	str	r1, [r7, #8]
   826e2:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   826e4:	68fb      	ldr	r3, [r7, #12]
   826e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   826e8:	687b      	ldr	r3, [r7, #4]
   826ea:	681b      	ldr	r3, [r3, #0]
   826ec:	461a      	mov	r2, r3
   826ee:	68b9      	ldr	r1, [r7, #8]
   826f0:	68f8      	ldr	r0, [r7, #12]
   826f2:	4b10      	ldr	r3, [pc, #64]	; (82734 <dmac_channel_single_buf_transfer_init+0x5c>)
   826f4:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   826f6:	687b      	ldr	r3, [r7, #4]
   826f8:	685b      	ldr	r3, [r3, #4]
   826fa:	461a      	mov	r2, r3
   826fc:	68b9      	ldr	r1, [r7, #8]
   826fe:	68f8      	ldr	r0, [r7, #12]
   82700:	4b0d      	ldr	r3, [pc, #52]	; (82738 <dmac_channel_single_buf_transfer_init+0x60>)
   82702:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   82704:	2200      	movs	r2, #0
   82706:	68b9      	ldr	r1, [r7, #8]
   82708:	68f8      	ldr	r0, [r7, #12]
   8270a:	4b0c      	ldr	r3, [pc, #48]	; (8273c <dmac_channel_single_buf_transfer_init+0x64>)
   8270c:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   8270e:	687b      	ldr	r3, [r7, #4]
   82710:	689b      	ldr	r3, [r3, #8]
   82712:	461a      	mov	r2, r3
   82714:	68b9      	ldr	r1, [r7, #8]
   82716:	68f8      	ldr	r0, [r7, #12]
   82718:	4b09      	ldr	r3, [pc, #36]	; (82740 <dmac_channel_single_buf_transfer_init+0x68>)
   8271a:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   8271c:	687b      	ldr	r3, [r7, #4]
   8271e:	68db      	ldr	r3, [r3, #12]
   82720:	461a      	mov	r2, r3
   82722:	68b9      	ldr	r1, [r7, #8]
   82724:	68f8      	ldr	r0, [r7, #12]
   82726:	4b07      	ldr	r3, [pc, #28]	; (82744 <dmac_channel_single_buf_transfer_init+0x6c>)
   82728:	4798      	blx	r3
}
   8272a:	bf00      	nop
   8272c:	3710      	adds	r7, #16
   8272e:	46bd      	mov	sp, r7
   82730:	bd80      	pop	{r7, pc}
   82732:	bf00      	nop
   82734:	000825dd 	.word	0x000825dd
   82738:	00082607 	.word	0x00082607
   8273c:	00082631 	.word	0x00082631
   82740:	0008265b 	.word	0x0008265b
   82744:	00082685 	.word	0x00082685

00082748 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82748:	b480      	push	{r7}
   8274a:	b085      	sub	sp, #20
   8274c:	af00      	add	r7, sp, #0
   8274e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82750:	491c      	ldr	r1, [pc, #112]	; (827c4 <pmc_switch_mck_to_pllack+0x7c>)
   82752:	4b1c      	ldr	r3, [pc, #112]	; (827c4 <pmc_switch_mck_to_pllack+0x7c>)
   82754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8275a:	687b      	ldr	r3, [r7, #4]
   8275c:	4313      	orrs	r3, r2
   8275e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82760:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82764:	60fb      	str	r3, [r7, #12]
   82766:	e007      	b.n	82778 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82768:	68fb      	ldr	r3, [r7, #12]
   8276a:	2b00      	cmp	r3, #0
   8276c:	d101      	bne.n	82772 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8276e:	2301      	movs	r3, #1
   82770:	e023      	b.n	827ba <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   82772:	68fb      	ldr	r3, [r7, #12]
   82774:	3b01      	subs	r3, #1
   82776:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82778:	4b12      	ldr	r3, [pc, #72]	; (827c4 <pmc_switch_mck_to_pllack+0x7c>)
   8277a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8277c:	f003 0308 	and.w	r3, r3, #8
   82780:	2b00      	cmp	r3, #0
   82782:	d0f1      	beq.n	82768 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82784:	4a0f      	ldr	r2, [pc, #60]	; (827c4 <pmc_switch_mck_to_pllack+0x7c>)
   82786:	4b0f      	ldr	r3, [pc, #60]	; (827c4 <pmc_switch_mck_to_pllack+0x7c>)
   82788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8278a:	f023 0303 	bic.w	r3, r3, #3
   8278e:	f043 0302 	orr.w	r3, r3, #2
   82792:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82794:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82798:	60fb      	str	r3, [r7, #12]
   8279a:	e007      	b.n	827ac <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8279c:	68fb      	ldr	r3, [r7, #12]
   8279e:	2b00      	cmp	r3, #0
   827a0:	d101      	bne.n	827a6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   827a2:	2301      	movs	r3, #1
   827a4:	e009      	b.n	827ba <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   827a6:	68fb      	ldr	r3, [r7, #12]
   827a8:	3b01      	subs	r3, #1
   827aa:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827ac:	4b05      	ldr	r3, [pc, #20]	; (827c4 <pmc_switch_mck_to_pllack+0x7c>)
   827ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   827b0:	f003 0308 	and.w	r3, r3, #8
   827b4:	2b00      	cmp	r3, #0
   827b6:	d0f1      	beq.n	8279c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   827b8:	2300      	movs	r3, #0
}
   827ba:	4618      	mov	r0, r3
   827bc:	3714      	adds	r7, #20
   827be:	46bd      	mov	sp, r7
   827c0:	bc80      	pop	{r7}
   827c2:	4770      	bx	lr
   827c4:	400e0600 	.word	0x400e0600

000827c8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   827c8:	b480      	push	{r7}
   827ca:	b083      	sub	sp, #12
   827cc:	af00      	add	r7, sp, #0
   827ce:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   827d0:	687b      	ldr	r3, [r7, #4]
   827d2:	2b01      	cmp	r3, #1
   827d4:	d107      	bne.n	827e6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   827d6:	4a08      	ldr	r2, [pc, #32]	; (827f8 <pmc_switch_sclk_to_32kxtal+0x30>)
   827d8:	4b07      	ldr	r3, [pc, #28]	; (827f8 <pmc_switch_sclk_to_32kxtal+0x30>)
   827da:	689b      	ldr	r3, [r3, #8]
   827dc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   827e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   827e4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   827e6:	4b04      	ldr	r3, [pc, #16]	; (827f8 <pmc_switch_sclk_to_32kxtal+0x30>)
   827e8:	4a04      	ldr	r2, [pc, #16]	; (827fc <pmc_switch_sclk_to_32kxtal+0x34>)
   827ea:	601a      	str	r2, [r3, #0]
}
   827ec:	bf00      	nop
   827ee:	370c      	adds	r7, #12
   827f0:	46bd      	mov	sp, r7
   827f2:	bc80      	pop	{r7}
   827f4:	4770      	bx	lr
   827f6:	bf00      	nop
   827f8:	400e1a10 	.word	0x400e1a10
   827fc:	a5000008 	.word	0xa5000008

00082800 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   82800:	b480      	push	{r7}
   82802:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82804:	4b09      	ldr	r3, [pc, #36]	; (8282c <pmc_osc_is_ready_32kxtal+0x2c>)
   82806:	695b      	ldr	r3, [r3, #20]
   82808:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   8280c:	2b00      	cmp	r3, #0
   8280e:	d007      	beq.n	82820 <pmc_osc_is_ready_32kxtal+0x20>
   82810:	4b07      	ldr	r3, [pc, #28]	; (82830 <pmc_osc_is_ready_32kxtal+0x30>)
   82812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82814:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82818:	2b00      	cmp	r3, #0
   8281a:	d001      	beq.n	82820 <pmc_osc_is_ready_32kxtal+0x20>
   8281c:	2301      	movs	r3, #1
   8281e:	e000      	b.n	82822 <pmc_osc_is_ready_32kxtal+0x22>
   82820:	2300      	movs	r3, #0
}
   82822:	4618      	mov	r0, r3
   82824:	46bd      	mov	sp, r7
   82826:	bc80      	pop	{r7}
   82828:	4770      	bx	lr
   8282a:	bf00      	nop
   8282c:	400e1a10 	.word	0x400e1a10
   82830:	400e0600 	.word	0x400e0600

00082834 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   82834:	b480      	push	{r7}
   82836:	b083      	sub	sp, #12
   82838:	af00      	add	r7, sp, #0
   8283a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   8283c:	4a18      	ldr	r2, [pc, #96]	; (828a0 <pmc_switch_mainck_to_fastrc+0x6c>)
   8283e:	4b18      	ldr	r3, [pc, #96]	; (828a0 <pmc_switch_mainck_to_fastrc+0x6c>)
   82840:	6a1b      	ldr	r3, [r3, #32]
   82842:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82846:	f043 0308 	orr.w	r3, r3, #8
   8284a:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8284c:	bf00      	nop
   8284e:	4b14      	ldr	r3, [pc, #80]	; (828a0 <pmc_switch_mainck_to_fastrc+0x6c>)
   82850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82856:	2b00      	cmp	r3, #0
   82858:	d0f9      	beq.n	8284e <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8285a:	4911      	ldr	r1, [pc, #68]	; (828a0 <pmc_switch_mainck_to_fastrc+0x6c>)
   8285c:	4b10      	ldr	r3, [pc, #64]	; (828a0 <pmc_switch_mainck_to_fastrc+0x6c>)
   8285e:	6a1b      	ldr	r3, [r3, #32]
   82860:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   82868:	687a      	ldr	r2, [r7, #4]
   8286a:	4313      	orrs	r3, r2
   8286c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82870:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82872:	bf00      	nop
   82874:	4b0a      	ldr	r3, [pc, #40]	; (828a0 <pmc_switch_mainck_to_fastrc+0x6c>)
   82876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8287c:	2b00      	cmp	r3, #0
   8287e:	d0f9      	beq.n	82874 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   82880:	4a07      	ldr	r2, [pc, #28]	; (828a0 <pmc_switch_mainck_to_fastrc+0x6c>)
   82882:	4b07      	ldr	r3, [pc, #28]	; (828a0 <pmc_switch_mainck_to_fastrc+0x6c>)
   82884:	6a1b      	ldr	r3, [r3, #32]
   82886:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8288a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8288e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82892:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   82894:	bf00      	nop
   82896:	370c      	adds	r7, #12
   82898:	46bd      	mov	sp, r7
   8289a:	bc80      	pop	{r7}
   8289c:	4770      	bx	lr
   8289e:	bf00      	nop
   828a0:	400e0600 	.word	0x400e0600

000828a4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   828a4:	b480      	push	{r7}
   828a6:	b083      	sub	sp, #12
   828a8:	af00      	add	r7, sp, #0
   828aa:	6078      	str	r0, [r7, #4]
   828ac:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   828ae:	687b      	ldr	r3, [r7, #4]
   828b0:	2b00      	cmp	r3, #0
   828b2:	d008      	beq.n	828c6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   828b4:	4916      	ldr	r1, [pc, #88]	; (82910 <pmc_switch_mainck_to_xtal+0x6c>)
   828b6:	4b16      	ldr	r3, [pc, #88]	; (82910 <pmc_switch_mainck_to_xtal+0x6c>)
   828b8:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   828ba:	4a16      	ldr	r2, [pc, #88]	; (82914 <pmc_switch_mainck_to_xtal+0x70>)
   828bc:	401a      	ands	r2, r3
   828be:	4b16      	ldr	r3, [pc, #88]	; (82918 <pmc_switch_mainck_to_xtal+0x74>)
   828c0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   828c2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   828c4:	e01e      	b.n	82904 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   828c6:	4912      	ldr	r1, [pc, #72]	; (82910 <pmc_switch_mainck_to_xtal+0x6c>)
   828c8:	4b11      	ldr	r3, [pc, #68]	; (82910 <pmc_switch_mainck_to_xtal+0x6c>)
   828ca:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   828cc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   828d0:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   828d4:	683a      	ldr	r2, [r7, #0]
   828d6:	0212      	lsls	r2, r2, #8
   828d8:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   828da:	4313      	orrs	r3, r2
   828dc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   828e0:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   828e4:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   828e6:	bf00      	nop
   828e8:	4b09      	ldr	r3, [pc, #36]	; (82910 <pmc_switch_mainck_to_xtal+0x6c>)
   828ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   828ec:	f003 0301 	and.w	r3, r3, #1
   828f0:	2b00      	cmp	r3, #0
   828f2:	d0f9      	beq.n	828e8 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   828f4:	4a06      	ldr	r2, [pc, #24]	; (82910 <pmc_switch_mainck_to_xtal+0x6c>)
   828f6:	4b06      	ldr	r3, [pc, #24]	; (82910 <pmc_switch_mainck_to_xtal+0x6c>)
   828f8:	6a1b      	ldr	r3, [r3, #32]
   828fa:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   828fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82902:	6213      	str	r3, [r2, #32]
}
   82904:	bf00      	nop
   82906:	370c      	adds	r7, #12
   82908:	46bd      	mov	sp, r7
   8290a:	bc80      	pop	{r7}
   8290c:	4770      	bx	lr
   8290e:	bf00      	nop
   82910:	400e0600 	.word	0x400e0600
   82914:	fec8fffc 	.word	0xfec8fffc
   82918:	01370002 	.word	0x01370002

0008291c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   8291c:	b480      	push	{r7}
   8291e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82920:	4b03      	ldr	r3, [pc, #12]	; (82930 <pmc_osc_is_ready_mainck+0x14>)
   82922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82928:	4618      	mov	r0, r3
   8292a:	46bd      	mov	sp, r7
   8292c:	bc80      	pop	{r7}
   8292e:	4770      	bx	lr
   82930:	400e0600 	.word	0x400e0600

00082934 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82934:	b480      	push	{r7}
   82936:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82938:	4b03      	ldr	r3, [pc, #12]	; (82948 <pmc_disable_pllack+0x14>)
   8293a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8293e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   82940:	bf00      	nop
   82942:	46bd      	mov	sp, r7
   82944:	bc80      	pop	{r7}
   82946:	4770      	bx	lr
   82948:	400e0600 	.word	0x400e0600

0008294c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   8294c:	b480      	push	{r7}
   8294e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82950:	4b03      	ldr	r3, [pc, #12]	; (82960 <pmc_is_locked_pllack+0x14>)
   82952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82954:	f003 0302 	and.w	r3, r3, #2
}
   82958:	4618      	mov	r0, r3
   8295a:	46bd      	mov	sp, r7
   8295c:	bc80      	pop	{r7}
   8295e:	4770      	bx	lr
   82960:	400e0600 	.word	0x400e0600

00082964 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   82964:	b480      	push	{r7}
   82966:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82968:	4b03      	ldr	r3, [pc, #12]	; (82978 <pmc_is_locked_upll+0x14>)
   8296a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82970:	4618      	mov	r0, r3
   82972:	46bd      	mov	sp, r7
   82974:	bc80      	pop	{r7}
   82976:	4770      	bx	lr
   82978:	400e0600 	.word	0x400e0600

0008297c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   8297c:	b480      	push	{r7}
   8297e:	b083      	sub	sp, #12
   82980:	af00      	add	r7, sp, #0
   82982:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82984:	687b      	ldr	r3, [r7, #4]
   82986:	2b2c      	cmp	r3, #44	; 0x2c
   82988:	d901      	bls.n	8298e <pmc_enable_periph_clk+0x12>
		return 1;
   8298a:	2301      	movs	r3, #1
   8298c:	e02f      	b.n	829ee <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   8298e:	687b      	ldr	r3, [r7, #4]
   82990:	2b1f      	cmp	r3, #31
   82992:	d813      	bhi.n	829bc <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82994:	4b18      	ldr	r3, [pc, #96]	; (829f8 <pmc_enable_periph_clk+0x7c>)
   82996:	699a      	ldr	r2, [r3, #24]
   82998:	2101      	movs	r1, #1
   8299a:	687b      	ldr	r3, [r7, #4]
   8299c:	fa01 f303 	lsl.w	r3, r1, r3
   829a0:	401a      	ands	r2, r3
   829a2:	2101      	movs	r1, #1
   829a4:	687b      	ldr	r3, [r7, #4]
   829a6:	fa01 f303 	lsl.w	r3, r1, r3
   829aa:	429a      	cmp	r2, r3
   829ac:	d01e      	beq.n	829ec <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   829ae:	4a12      	ldr	r2, [pc, #72]	; (829f8 <pmc_enable_periph_clk+0x7c>)
   829b0:	2101      	movs	r1, #1
   829b2:	687b      	ldr	r3, [r7, #4]
   829b4:	fa01 f303 	lsl.w	r3, r1, r3
   829b8:	6113      	str	r3, [r2, #16]
   829ba:	e017      	b.n	829ec <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   829bc:	687b      	ldr	r3, [r7, #4]
   829be:	3b20      	subs	r3, #32
   829c0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   829c2:	4b0d      	ldr	r3, [pc, #52]	; (829f8 <pmc_enable_periph_clk+0x7c>)
   829c4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   829c8:	2101      	movs	r1, #1
   829ca:	687b      	ldr	r3, [r7, #4]
   829cc:	fa01 f303 	lsl.w	r3, r1, r3
   829d0:	401a      	ands	r2, r3
   829d2:	2101      	movs	r1, #1
   829d4:	687b      	ldr	r3, [r7, #4]
   829d6:	fa01 f303 	lsl.w	r3, r1, r3
   829da:	429a      	cmp	r2, r3
   829dc:	d006      	beq.n	829ec <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   829de:	4a06      	ldr	r2, [pc, #24]	; (829f8 <pmc_enable_periph_clk+0x7c>)
   829e0:	2101      	movs	r1, #1
   829e2:	687b      	ldr	r3, [r7, #4]
   829e4:	fa01 f303 	lsl.w	r3, r1, r3
   829e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   829ec:	2300      	movs	r3, #0
}
   829ee:	4618      	mov	r0, r3
   829f0:	370c      	adds	r7, #12
   829f2:	46bd      	mov	sp, r7
   829f4:	bc80      	pop	{r7}
   829f6:	4770      	bx	lr
   829f8:	400e0600 	.word	0x400e0600

000829fc <sysclk_enable_peripheral_clock>:
{
   829fc:	b580      	push	{r7, lr}
   829fe:	b082      	sub	sp, #8
   82a00:	af00      	add	r7, sp, #0
   82a02:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82a04:	6878      	ldr	r0, [r7, #4]
   82a06:	4b03      	ldr	r3, [pc, #12]	; (82a14 <sysclk_enable_peripheral_clock+0x18>)
   82a08:	4798      	blx	r3
}
   82a0a:	bf00      	nop
   82a0c:	3708      	adds	r7, #8
   82a0e:	46bd      	mov	sp, r7
   82a10:	bd80      	pop	{r7, pc}
   82a12:	bf00      	nop
   82a14:	0008297d 	.word	0x0008297d

00082a18 <ioport_init>:
{
   82a18:	b580      	push	{r7, lr}
   82a1a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   82a1c:	200b      	movs	r0, #11
   82a1e:	4b06      	ldr	r3, [pc, #24]	; (82a38 <ioport_init+0x20>)
   82a20:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   82a22:	200c      	movs	r0, #12
   82a24:	4b04      	ldr	r3, [pc, #16]	; (82a38 <ioport_init+0x20>)
   82a26:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   82a28:	200d      	movs	r0, #13
   82a2a:	4b03      	ldr	r3, [pc, #12]	; (82a38 <ioport_init+0x20>)
   82a2c:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   82a2e:	200e      	movs	r0, #14
   82a30:	4b01      	ldr	r3, [pc, #4]	; (82a38 <ioport_init+0x20>)
   82a32:	4798      	blx	r3
}
   82a34:	bf00      	nop
   82a36:	bd80      	pop	{r7, pc}
   82a38:	000829fd 	.word	0x000829fd

00082a3c <ioport_disable_pin>:
{
   82a3c:	b480      	push	{r7}
   82a3e:	b089      	sub	sp, #36	; 0x24
   82a40:	af00      	add	r7, sp, #0
   82a42:	6078      	str	r0, [r7, #4]
   82a44:	687b      	ldr	r3, [r7, #4]
   82a46:	61fb      	str	r3, [r7, #28]
   82a48:	69fb      	ldr	r3, [r7, #28]
   82a4a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82a4c:	69bb      	ldr	r3, [r7, #24]
   82a4e:	095a      	lsrs	r2, r3, #5
   82a50:	69fb      	ldr	r3, [r7, #28]
   82a52:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   82a54:	697b      	ldr	r3, [r7, #20]
   82a56:	f003 031f 	and.w	r3, r3, #31
   82a5a:	2101      	movs	r1, #1
   82a5c:	fa01 f303 	lsl.w	r3, r1, r3
   82a60:	613a      	str	r2, [r7, #16]
   82a62:	60fb      	str	r3, [r7, #12]
   82a64:	693b      	ldr	r3, [r7, #16]
   82a66:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82a68:	68bb      	ldr	r3, [r7, #8]
   82a6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82a6e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82a72:	025b      	lsls	r3, r3, #9
   82a74:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   82a76:	68fb      	ldr	r3, [r7, #12]
   82a78:	6053      	str	r3, [r2, #4]
}
   82a7a:	bf00      	nop
   82a7c:	3724      	adds	r7, #36	; 0x24
   82a7e:	46bd      	mov	sp, r7
   82a80:	bc80      	pop	{r7}
   82a82:	4770      	bx	lr

00082a84 <ioport_set_pin_mode>:
{
   82a84:	b480      	push	{r7}
   82a86:	b08d      	sub	sp, #52	; 0x34
   82a88:	af00      	add	r7, sp, #0
   82a8a:	6078      	str	r0, [r7, #4]
   82a8c:	6039      	str	r1, [r7, #0]
   82a8e:	687b      	ldr	r3, [r7, #4]
   82a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   82a92:	683b      	ldr	r3, [r7, #0]
   82a94:	62bb      	str	r3, [r7, #40]	; 0x28
   82a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82a98:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   82a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82a9c:	095a      	lsrs	r2, r3, #5
   82a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82aa0:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   82aa2:	6a3b      	ldr	r3, [r7, #32]
   82aa4:	f003 031f 	and.w	r3, r3, #31
   82aa8:	2101      	movs	r1, #1
   82aaa:	fa01 f303 	lsl.w	r3, r1, r3
   82aae:	61fa      	str	r2, [r7, #28]
   82ab0:	61bb      	str	r3, [r7, #24]
   82ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   82ab4:	617b      	str	r3, [r7, #20]
   82ab6:	69fb      	ldr	r3, [r7, #28]
   82ab8:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82aba:	693b      	ldr	r3, [r7, #16]
   82abc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82ac0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82ac4:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   82ac6:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   82ac8:	697b      	ldr	r3, [r7, #20]
   82aca:	f003 0308 	and.w	r3, r3, #8
   82ace:	2b00      	cmp	r3, #0
   82ad0:	d003      	beq.n	82ada <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   82ad2:	68fb      	ldr	r3, [r7, #12]
   82ad4:	69ba      	ldr	r2, [r7, #24]
   82ad6:	665a      	str	r2, [r3, #100]	; 0x64
   82ad8:	e002      	b.n	82ae0 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   82ada:	68fb      	ldr	r3, [r7, #12]
   82adc:	69ba      	ldr	r2, [r7, #24]
   82ade:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   82ae0:	697b      	ldr	r3, [r7, #20]
   82ae2:	f003 0320 	and.w	r3, r3, #32
   82ae6:	2b00      	cmp	r3, #0
   82ae8:	d003      	beq.n	82af2 <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   82aea:	68fb      	ldr	r3, [r7, #12]
   82aec:	69ba      	ldr	r2, [r7, #24]
   82aee:	651a      	str	r2, [r3, #80]	; 0x50
   82af0:	e002      	b.n	82af8 <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   82af2:	68fb      	ldr	r3, [r7, #12]
   82af4:	69ba      	ldr	r2, [r7, #24]
   82af6:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   82af8:	697b      	ldr	r3, [r7, #20]
   82afa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   82afe:	2b00      	cmp	r3, #0
   82b00:	d003      	beq.n	82b0a <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   82b02:	68fb      	ldr	r3, [r7, #12]
   82b04:	69ba      	ldr	r2, [r7, #24]
   82b06:	621a      	str	r2, [r3, #32]
   82b08:	e002      	b.n	82b10 <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   82b0a:	68fb      	ldr	r3, [r7, #12]
   82b0c:	69ba      	ldr	r2, [r7, #24]
   82b0e:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   82b10:	697b      	ldr	r3, [r7, #20]
   82b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82b16:	2b00      	cmp	r3, #0
   82b18:	d004      	beq.n	82b24 <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   82b1a:	68fb      	ldr	r3, [r7, #12]
   82b1c:	69ba      	ldr	r2, [r7, #24]
   82b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   82b22:	e003      	b.n	82b2c <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   82b24:	68fb      	ldr	r3, [r7, #12]
   82b26:	69ba      	ldr	r2, [r7, #24]
   82b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   82b2c:	697b      	ldr	r3, [r7, #20]
   82b2e:	f003 0301 	and.w	r3, r3, #1
   82b32:	2b00      	cmp	r3, #0
   82b34:	d006      	beq.n	82b44 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   82b36:	68fb      	ldr	r3, [r7, #12]
   82b38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82b3a:	69bb      	ldr	r3, [r7, #24]
   82b3c:	431a      	orrs	r2, r3
   82b3e:	68fb      	ldr	r3, [r7, #12]
   82b40:	671a      	str	r2, [r3, #112]	; 0x70
}
   82b42:	e006      	b.n	82b52 <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   82b44:	68fb      	ldr	r3, [r7, #12]
   82b46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82b48:	69bb      	ldr	r3, [r7, #24]
   82b4a:	43db      	mvns	r3, r3
   82b4c:	401a      	ands	r2, r3
   82b4e:	68fb      	ldr	r3, [r7, #12]
   82b50:	671a      	str	r2, [r3, #112]	; 0x70
   82b52:	bf00      	nop
   82b54:	3734      	adds	r7, #52	; 0x34
   82b56:	46bd      	mov	sp, r7
   82b58:	bc80      	pop	{r7}
   82b5a:	4770      	bx	lr

00082b5c <ioport_set_pin_dir>:
{
   82b5c:	b480      	push	{r7}
   82b5e:	b08d      	sub	sp, #52	; 0x34
   82b60:	af00      	add	r7, sp, #0
   82b62:	6078      	str	r0, [r7, #4]
   82b64:	460b      	mov	r3, r1
   82b66:	70fb      	strb	r3, [r7, #3]
   82b68:	687b      	ldr	r3, [r7, #4]
   82b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   82b6c:	78fb      	ldrb	r3, [r7, #3]
   82b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   82b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82b74:	627b      	str	r3, [r7, #36]	; 0x24
   82b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82b78:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   82b7a:	6a3b      	ldr	r3, [r7, #32]
   82b7c:	095b      	lsrs	r3, r3, #5
   82b7e:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82b80:	69fb      	ldr	r3, [r7, #28]
   82b82:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82b86:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82b8a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82b8c:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   82b8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   82b92:	2b01      	cmp	r3, #1
   82b94:	d109      	bne.n	82baa <ioport_set_pin_dir+0x4e>
   82b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82b98:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   82b9a:	697b      	ldr	r3, [r7, #20]
   82b9c:	f003 031f 	and.w	r3, r3, #31
   82ba0:	2201      	movs	r2, #1
   82ba2:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82ba4:	69bb      	ldr	r3, [r7, #24]
   82ba6:	611a      	str	r2, [r3, #16]
   82ba8:	e00c      	b.n	82bc4 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   82baa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   82bae:	2b00      	cmp	r3, #0
   82bb0:	d108      	bne.n	82bc4 <ioport_set_pin_dir+0x68>
   82bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82bb4:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   82bb6:	693b      	ldr	r3, [r7, #16]
   82bb8:	f003 031f 	and.w	r3, r3, #31
   82bbc:	2201      	movs	r2, #1
   82bbe:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   82bc0:	69bb      	ldr	r3, [r7, #24]
   82bc2:	615a      	str	r2, [r3, #20]
   82bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82bc6:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82bc8:	68fb      	ldr	r3, [r7, #12]
   82bca:	f003 031f 	and.w	r3, r3, #31
   82bce:	2201      	movs	r2, #1
   82bd0:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82bd2:	69bb      	ldr	r3, [r7, #24]
   82bd4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   82bd8:	bf00      	nop
   82bda:	3734      	adds	r7, #52	; 0x34
   82bdc:	46bd      	mov	sp, r7
   82bde:	bc80      	pop	{r7}
   82be0:	4770      	bx	lr

00082be2 <ioport_set_pin_level>:
{
   82be2:	b480      	push	{r7}
   82be4:	b08b      	sub	sp, #44	; 0x2c
   82be6:	af00      	add	r7, sp, #0
   82be8:	6078      	str	r0, [r7, #4]
   82bea:	460b      	mov	r3, r1
   82bec:	70fb      	strb	r3, [r7, #3]
   82bee:	687b      	ldr	r3, [r7, #4]
   82bf0:	627b      	str	r3, [r7, #36]	; 0x24
   82bf2:	78fb      	ldrb	r3, [r7, #3]
   82bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82bfa:	61fb      	str	r3, [r7, #28]
   82bfc:	69fb      	ldr	r3, [r7, #28]
   82bfe:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82c00:	69bb      	ldr	r3, [r7, #24]
   82c02:	095b      	lsrs	r3, r3, #5
   82c04:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82c06:	697b      	ldr	r3, [r7, #20]
   82c08:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82c0c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82c10:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82c12:	613b      	str	r3, [r7, #16]
	if (level) {
   82c14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82c18:	2b00      	cmp	r3, #0
   82c1a:	d009      	beq.n	82c30 <ioport_set_pin_level+0x4e>
   82c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82c1e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82c20:	68fb      	ldr	r3, [r7, #12]
   82c22:	f003 031f 	and.w	r3, r3, #31
   82c26:	2201      	movs	r2, #1
   82c28:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82c2a:	693b      	ldr	r3, [r7, #16]
   82c2c:	631a      	str	r2, [r3, #48]	; 0x30
}
   82c2e:	e008      	b.n	82c42 <ioport_set_pin_level+0x60>
   82c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82c32:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   82c34:	68bb      	ldr	r3, [r7, #8]
   82c36:	f003 031f 	and.w	r3, r3, #31
   82c3a:	2201      	movs	r2, #1
   82c3c:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82c3e:	693b      	ldr	r3, [r7, #16]
   82c40:	635a      	str	r2, [r3, #52]	; 0x34
   82c42:	bf00      	nop
   82c44:	372c      	adds	r7, #44	; 0x2c
   82c46:	46bd      	mov	sp, r7
   82c48:	bc80      	pop	{r7}
   82c4a:	4770      	bx	lr

00082c4c <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   82c4c:	b580      	push	{r7, lr}
   82c4e:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82c50:	4b59      	ldr	r3, [pc, #356]	; (82db8 <board_init+0x16c>)
   82c52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82c56:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   82c58:	4b58      	ldr	r3, [pc, #352]	; (82dbc <board_init+0x170>)
   82c5a:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   82c5c:	2101      	movs	r1, #1
   82c5e:	206a      	movs	r0, #106	; 0x6a
   82c60:	4b57      	ldr	r3, [pc, #348]	; (82dc0 <board_init+0x174>)
   82c62:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   82c64:	2100      	movs	r1, #0
   82c66:	206a      	movs	r0, #106	; 0x6a
   82c68:	4b56      	ldr	r3, [pc, #344]	; (82dc4 <board_init+0x178>)
   82c6a:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   82c6c:	2101      	movs	r1, #1
   82c6e:	2067      	movs	r0, #103	; 0x67
   82c70:	4b53      	ldr	r3, [pc, #332]	; (82dc0 <board_init+0x174>)
   82c72:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   82c74:	2100      	movs	r1, #0
   82c76:	2067      	movs	r0, #103	; 0x67
   82c78:	4b52      	ldr	r3, [pc, #328]	; (82dc4 <board_init+0x178>)
   82c7a:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   82c7c:	2101      	movs	r1, #1
   82c7e:	2068      	movs	r0, #104	; 0x68
   82c80:	4b4f      	ldr	r3, [pc, #316]	; (82dc0 <board_init+0x174>)
   82c82:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   82c84:	2100      	movs	r1, #0
   82c86:	2068      	movs	r0, #104	; 0x68
   82c88:	4b4e      	ldr	r3, [pc, #312]	; (82dc4 <board_init+0x178>)
   82c8a:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   82c8c:	2101      	movs	r1, #1
   82c8e:	2069      	movs	r0, #105	; 0x69
   82c90:	4b4b      	ldr	r3, [pc, #300]	; (82dc0 <board_init+0x174>)
   82c92:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   82c94:	2100      	movs	r1, #0
   82c96:	2069      	movs	r0, #105	; 0x69
   82c98:	4b4a      	ldr	r3, [pc, #296]	; (82dc4 <board_init+0x178>)
   82c9a:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   82c9c:	2101      	movs	r1, #1
   82c9e:	2066      	movs	r0, #102	; 0x66
   82ca0:	4b47      	ldr	r3, [pc, #284]	; (82dc0 <board_init+0x174>)
   82ca2:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   82ca4:	2100      	movs	r1, #0
   82ca6:	2066      	movs	r0, #102	; 0x66
   82ca8:	4b46      	ldr	r3, [pc, #280]	; (82dc4 <board_init+0x178>)
   82caa:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   82cac:	2100      	movs	r1, #0
   82cae:	2060      	movs	r0, #96	; 0x60
   82cb0:	4b43      	ldr	r3, [pc, #268]	; (82dc0 <board_init+0x174>)
   82cb2:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82cb4:	2188      	movs	r1, #136	; 0x88
   82cb6:	2060      	movs	r0, #96	; 0x60
   82cb8:	4b43      	ldr	r3, [pc, #268]	; (82dc8 <board_init+0x17c>)
   82cba:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   82cbc:	2100      	movs	r1, #0
   82cbe:	2061      	movs	r0, #97	; 0x61
   82cc0:	4b3f      	ldr	r3, [pc, #252]	; (82dc0 <board_init+0x174>)
   82cc2:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82cc4:	2188      	movs	r1, #136	; 0x88
   82cc6:	2061      	movs	r0, #97	; 0x61
   82cc8:	4b3f      	ldr	r3, [pc, #252]	; (82dc8 <board_init+0x17c>)
   82cca:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   82ccc:	2100      	movs	r1, #0
   82cce:	2062      	movs	r0, #98	; 0x62
   82cd0:	4b3b      	ldr	r3, [pc, #236]	; (82dc0 <board_init+0x174>)
   82cd2:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82cd4:	2188      	movs	r1, #136	; 0x88
   82cd6:	2062      	movs	r0, #98	; 0x62
   82cd8:	4b3b      	ldr	r3, [pc, #236]	; (82dc8 <board_init+0x17c>)
   82cda:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   82cdc:	2100      	movs	r1, #0
   82cde:	2063      	movs	r0, #99	; 0x63
   82ce0:	4b37      	ldr	r3, [pc, #220]	; (82dc0 <board_init+0x174>)
   82ce2:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82ce4:	2188      	movs	r1, #136	; 0x88
   82ce6:	2063      	movs	r0, #99	; 0x63
   82ce8:	4b37      	ldr	r3, [pc, #220]	; (82dc8 <board_init+0x17c>)
   82cea:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   82cec:	2100      	movs	r1, #0
   82cee:	2064      	movs	r0, #100	; 0x64
   82cf0:	4b33      	ldr	r3, [pc, #204]	; (82dc0 <board_init+0x174>)
   82cf2:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82cf4:	2188      	movs	r1, #136	; 0x88
   82cf6:	2064      	movs	r0, #100	; 0x64
   82cf8:	4b33      	ldr	r3, [pc, #204]	; (82dc8 <board_init+0x17c>)
   82cfa:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   82cfc:	2100      	movs	r1, #0
   82cfe:	2065      	movs	r0, #101	; 0x65
   82d00:	4b2f      	ldr	r3, [pc, #188]	; (82dc0 <board_init+0x174>)
   82d02:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82d04:	2188      	movs	r1, #136	; 0x88
   82d06:	2065      	movs	r0, #101	; 0x65
   82d08:	4b2f      	ldr	r3, [pc, #188]	; (82dc8 <board_init+0x17c>)
   82d0a:	4798      	blx	r3
	
	/* Configure I2C pins */
	ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   82d0c:	2100      	movs	r1, #0
   82d0e:	2011      	movs	r0, #17
   82d10:	4b2d      	ldr	r3, [pc, #180]	; (82dc8 <board_init+0x17c>)
   82d12:	4798      	blx	r3
	ioport_disable_pin(I2C0_DATA);
   82d14:	2011      	movs	r0, #17
   82d16:	4b2d      	ldr	r3, [pc, #180]	; (82dcc <board_init+0x180>)
   82d18:	4798      	blx	r3
	ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   82d1a:	2100      	movs	r1, #0
   82d1c:	2012      	movs	r0, #18
   82d1e:	4b2a      	ldr	r3, [pc, #168]	; (82dc8 <board_init+0x17c>)
   82d20:	4798      	blx	r3
	ioport_disable_pin(I2C0_CLK);
   82d22:	2012      	movs	r0, #18
   82d24:	4b29      	ldr	r3, [pc, #164]	; (82dcc <board_init+0x180>)
   82d26:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   82d28:	2100      	movs	r1, #0
   82d2a:	200c      	movs	r0, #12
   82d2c:	4b26      	ldr	r3, [pc, #152]	; (82dc8 <board_init+0x17c>)
   82d2e:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   82d30:	200c      	movs	r0, #12
   82d32:	4b26      	ldr	r3, [pc, #152]	; (82dcc <board_init+0x180>)
   82d34:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   82d36:	2100      	movs	r1, #0
   82d38:	200d      	movs	r0, #13
   82d3a:	4b23      	ldr	r3, [pc, #140]	; (82dc8 <board_init+0x17c>)
   82d3c:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   82d3e:	200d      	movs	r0, #13
   82d40:	4b22      	ldr	r3, [pc, #136]	; (82dcc <board_init+0x180>)
   82d42:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   82d44:	2100      	movs	r1, #0
   82d46:	2010      	movs	r0, #16
   82d48:	4b1f      	ldr	r3, [pc, #124]	; (82dc8 <board_init+0x17c>)
   82d4a:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   82d4c:	2010      	movs	r0, #16
   82d4e:	4b1f      	ldr	r3, [pc, #124]	; (82dcc <board_init+0x180>)
   82d50:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   82d52:	2100      	movs	r1, #0
   82d54:	200e      	movs	r0, #14
   82d56:	4b1c      	ldr	r3, [pc, #112]	; (82dc8 <board_init+0x17c>)
   82d58:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   82d5a:	200e      	movs	r0, #14
   82d5c:	4b1b      	ldr	r3, [pc, #108]	; (82dcc <board_init+0x180>)
   82d5e:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   82d60:	2100      	movs	r1, #0
   82d62:	2014      	movs	r0, #20
   82d64:	4b18      	ldr	r3, [pc, #96]	; (82dc8 <board_init+0x17c>)
   82d66:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   82d68:	2014      	movs	r0, #20
   82d6a:	4b18      	ldr	r3, [pc, #96]	; (82dcc <board_init+0x180>)
   82d6c:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   82d6e:	2100      	movs	r1, #0
   82d70:	2013      	movs	r0, #19
   82d72:	4b15      	ldr	r3, [pc, #84]	; (82dc8 <board_init+0x17c>)
   82d74:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   82d76:	2013      	movs	r0, #19
   82d78:	4b14      	ldr	r3, [pc, #80]	; (82dcc <board_init+0x180>)
   82d7a:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   82d7c:	2100      	movs	r1, #0
   82d7e:	2015      	movs	r0, #21
   82d80:	4b11      	ldr	r3, [pc, #68]	; (82dc8 <board_init+0x17c>)
   82d82:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   82d84:	2015      	movs	r0, #21
   82d86:	4b11      	ldr	r3, [pc, #68]	; (82dcc <board_init+0x180>)
   82d88:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   82d8a:	2100      	movs	r1, #0
   82d8c:	2016      	movs	r0, #22
   82d8e:	4b0e      	ldr	r3, [pc, #56]	; (82dc8 <board_init+0x17c>)
   82d90:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   82d92:	2016      	movs	r0, #22
   82d94:	4b0d      	ldr	r3, [pc, #52]	; (82dcc <board_init+0x180>)
   82d96:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   82d98:	2100      	movs	r1, #0
   82d9a:	2017      	movs	r0, #23
   82d9c:	4b0a      	ldr	r3, [pc, #40]	; (82dc8 <board_init+0x17c>)
   82d9e:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   82da0:	2017      	movs	r0, #23
   82da2:	4b0a      	ldr	r3, [pc, #40]	; (82dcc <board_init+0x180>)
   82da4:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   82da6:	2100      	movs	r1, #0
   82da8:	2018      	movs	r0, #24
   82daa:	4b07      	ldr	r3, [pc, #28]	; (82dc8 <board_init+0x17c>)
   82dac:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   82dae:	2018      	movs	r0, #24
   82db0:	4b06      	ldr	r3, [pc, #24]	; (82dcc <board_init+0x180>)
   82db2:	4798      	blx	r3
}
   82db4:	bf00      	nop
   82db6:	bd80      	pop	{r7, pc}
   82db8:	400e1a50 	.word	0x400e1a50
   82dbc:	00082a19 	.word	0x00082a19
   82dc0:	00082b5d 	.word	0x00082b5d
   82dc4:	00082be3 	.word	0x00082be3
   82dc8:	00082a85 	.word	0x00082a85
   82dcc:	00082a3d 	.word	0x00082a3d

00082dd0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82dd0:	b480      	push	{r7}
   82dd2:	af00      	add	r7, sp, #0
	while (1) {
   82dd4:	e7fe      	b.n	82dd4 <Dummy_Handler+0x4>
	...

00082dd8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82dd8:	b580      	push	{r7, lr}
   82dda:	b082      	sub	sp, #8
   82ddc:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   82dde:	4b1e      	ldr	r3, [pc, #120]	; (82e58 <Reset_Handler+0x80>)
   82de0:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   82de2:	4b1e      	ldr	r3, [pc, #120]	; (82e5c <Reset_Handler+0x84>)
   82de4:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   82de6:	687a      	ldr	r2, [r7, #4]
   82de8:	683b      	ldr	r3, [r7, #0]
   82dea:	429a      	cmp	r2, r3
   82dec:	d00c      	beq.n	82e08 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   82dee:	e007      	b.n	82e00 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   82df0:	683b      	ldr	r3, [r7, #0]
   82df2:	1d1a      	adds	r2, r3, #4
   82df4:	603a      	str	r2, [r7, #0]
   82df6:	687a      	ldr	r2, [r7, #4]
   82df8:	1d11      	adds	r1, r2, #4
   82dfa:	6079      	str	r1, [r7, #4]
   82dfc:	6812      	ldr	r2, [r2, #0]
   82dfe:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   82e00:	683b      	ldr	r3, [r7, #0]
   82e02:	4a17      	ldr	r2, [pc, #92]	; (82e60 <Reset_Handler+0x88>)
   82e04:	4293      	cmp	r3, r2
   82e06:	d3f3      	bcc.n	82df0 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82e08:	4b16      	ldr	r3, [pc, #88]	; (82e64 <Reset_Handler+0x8c>)
   82e0a:	603b      	str	r3, [r7, #0]
   82e0c:	e004      	b.n	82e18 <Reset_Handler+0x40>
		*pDest++ = 0;
   82e0e:	683b      	ldr	r3, [r7, #0]
   82e10:	1d1a      	adds	r2, r3, #4
   82e12:	603a      	str	r2, [r7, #0]
   82e14:	2200      	movs	r2, #0
   82e16:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   82e18:	683b      	ldr	r3, [r7, #0]
   82e1a:	4a13      	ldr	r2, [pc, #76]	; (82e68 <Reset_Handler+0x90>)
   82e1c:	4293      	cmp	r3, r2
   82e1e:	d3f6      	bcc.n	82e0e <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   82e20:	4b12      	ldr	r3, [pc, #72]	; (82e6c <Reset_Handler+0x94>)
   82e22:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82e24:	4a12      	ldr	r2, [pc, #72]	; (82e70 <Reset_Handler+0x98>)
   82e26:	687b      	ldr	r3, [r7, #4]
   82e28:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82e2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82e30:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82e32:	687b      	ldr	r3, [r7, #4]
   82e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82e38:	d309      	bcc.n	82e4e <Reset_Handler+0x76>
   82e3a:	687b      	ldr	r3, [r7, #4]
   82e3c:	4a0d      	ldr	r2, [pc, #52]	; (82e74 <Reset_Handler+0x9c>)
   82e3e:	4293      	cmp	r3, r2
   82e40:	d805      	bhi.n	82e4e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82e42:	4a0b      	ldr	r2, [pc, #44]	; (82e70 <Reset_Handler+0x98>)
   82e44:	4b0a      	ldr	r3, [pc, #40]	; (82e70 <Reset_Handler+0x98>)
   82e46:	689b      	ldr	r3, [r3, #8]
   82e48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82e4c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82e4e:	4b0a      	ldr	r3, [pc, #40]	; (82e78 <Reset_Handler+0xa0>)
   82e50:	4798      	blx	r3

	/* Branch to main function */
	main();
   82e52:	4b0a      	ldr	r3, [pc, #40]	; (82e7c <Reset_Handler+0xa4>)
   82e54:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82e56:	e7fe      	b.n	82e56 <Reset_Handler+0x7e>
   82e58:	000887c4 	.word	0x000887c4
   82e5c:	20070000 	.word	0x20070000
   82e60:	20070b50 	.word	0x20070b50
   82e64:	20070b50 	.word	0x20070b50
   82e68:	20071064 	.word	0x20071064
   82e6c:	00080000 	.word	0x00080000
   82e70:	e000ed00 	.word	0xe000ed00
   82e74:	200fffff 	.word	0x200fffff
   82e78:	00083e41 	.word	0x00083e41
   82e7c:	00083251 	.word	0x00083251

00082e80 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   82e80:	b480      	push	{r7}
   82e82:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82e84:	4b57      	ldr	r3, [pc, #348]	; (82fe4 <SystemCoreClockUpdate+0x164>)
   82e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e88:	f003 0303 	and.w	r3, r3, #3
   82e8c:	2b03      	cmp	r3, #3
   82e8e:	f200 808a 	bhi.w	82fa6 <SystemCoreClockUpdate+0x126>
   82e92:	a201      	add	r2, pc, #4	; (adr r2, 82e98 <SystemCoreClockUpdate+0x18>)
   82e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82e98:	00082ea9 	.word	0x00082ea9
   82e9c:	00082ec9 	.word	0x00082ec9
   82ea0:	00082f19 	.word	0x00082f19
   82ea4:	00082f19 	.word	0x00082f19
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82ea8:	4b4f      	ldr	r3, [pc, #316]	; (82fe8 <SystemCoreClockUpdate+0x168>)
   82eaa:	695b      	ldr	r3, [r3, #20]
   82eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82eb0:	2b00      	cmp	r3, #0
   82eb2:	d004      	beq.n	82ebe <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82eb4:	4b4d      	ldr	r3, [pc, #308]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82eb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82eba:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   82ebc:	e073      	b.n	82fa6 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82ebe:	4b4b      	ldr	r3, [pc, #300]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82ec0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82ec4:	601a      	str	r2, [r3, #0]
		break;
   82ec6:	e06e      	b.n	82fa6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82ec8:	4b46      	ldr	r3, [pc, #280]	; (82fe4 <SystemCoreClockUpdate+0x164>)
   82eca:	6a1b      	ldr	r3, [r3, #32]
   82ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82ed0:	2b00      	cmp	r3, #0
   82ed2:	d003      	beq.n	82edc <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82ed4:	4b45      	ldr	r3, [pc, #276]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82ed6:	4a46      	ldr	r2, [pc, #280]	; (82ff0 <SystemCoreClockUpdate+0x170>)
   82ed8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   82eda:	e064      	b.n	82fa6 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82edc:	4b43      	ldr	r3, [pc, #268]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82ede:	4a45      	ldr	r2, [pc, #276]	; (82ff4 <SystemCoreClockUpdate+0x174>)
   82ee0:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82ee2:	4b40      	ldr	r3, [pc, #256]	; (82fe4 <SystemCoreClockUpdate+0x164>)
   82ee4:	6a1b      	ldr	r3, [r3, #32]
   82ee6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82eea:	2b10      	cmp	r3, #16
   82eec:	d004      	beq.n	82ef8 <SystemCoreClockUpdate+0x78>
   82eee:	2b20      	cmp	r3, #32
   82ef0:	d008      	beq.n	82f04 <SystemCoreClockUpdate+0x84>
   82ef2:	2b00      	cmp	r3, #0
   82ef4:	d00e      	beq.n	82f14 <SystemCoreClockUpdate+0x94>
				break;
   82ef6:	e00e      	b.n	82f16 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   82ef8:	4b3c      	ldr	r3, [pc, #240]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82efa:	681b      	ldr	r3, [r3, #0]
   82efc:	005b      	lsls	r3, r3, #1
   82efe:	4a3b      	ldr	r2, [pc, #236]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f00:	6013      	str	r3, [r2, #0]
				break;
   82f02:	e008      	b.n	82f16 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   82f04:	4b39      	ldr	r3, [pc, #228]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f06:	681a      	ldr	r2, [r3, #0]
   82f08:	4613      	mov	r3, r2
   82f0a:	005b      	lsls	r3, r3, #1
   82f0c:	4413      	add	r3, r2
   82f0e:	4a37      	ldr	r2, [pc, #220]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f10:	6013      	str	r3, [r2, #0]
				break;
   82f12:	e000      	b.n	82f16 <SystemCoreClockUpdate+0x96>
				break;
   82f14:	bf00      	nop
		break;
   82f16:	e046      	b.n	82fa6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82f18:	4b32      	ldr	r3, [pc, #200]	; (82fe4 <SystemCoreClockUpdate+0x164>)
   82f1a:	6a1b      	ldr	r3, [r3, #32]
   82f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82f20:	2b00      	cmp	r3, #0
   82f22:	d003      	beq.n	82f2c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82f24:	4b31      	ldr	r3, [pc, #196]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f26:	4a32      	ldr	r2, [pc, #200]	; (82ff0 <SystemCoreClockUpdate+0x170>)
   82f28:	601a      	str	r2, [r3, #0]
   82f2a:	e01c      	b.n	82f66 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82f2c:	4b2f      	ldr	r3, [pc, #188]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f2e:	4a31      	ldr	r2, [pc, #196]	; (82ff4 <SystemCoreClockUpdate+0x174>)
   82f30:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82f32:	4b2c      	ldr	r3, [pc, #176]	; (82fe4 <SystemCoreClockUpdate+0x164>)
   82f34:	6a1b      	ldr	r3, [r3, #32]
   82f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82f3a:	2b10      	cmp	r3, #16
   82f3c:	d004      	beq.n	82f48 <SystemCoreClockUpdate+0xc8>
   82f3e:	2b20      	cmp	r3, #32
   82f40:	d008      	beq.n	82f54 <SystemCoreClockUpdate+0xd4>
   82f42:	2b00      	cmp	r3, #0
   82f44:	d00e      	beq.n	82f64 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82f46:	e00e      	b.n	82f66 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   82f48:	4b28      	ldr	r3, [pc, #160]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f4a:	681b      	ldr	r3, [r3, #0]
   82f4c:	005b      	lsls	r3, r3, #1
   82f4e:	4a27      	ldr	r2, [pc, #156]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f50:	6013      	str	r3, [r2, #0]
				break;
   82f52:	e008      	b.n	82f66 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   82f54:	4b25      	ldr	r3, [pc, #148]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f56:	681a      	ldr	r2, [r3, #0]
   82f58:	4613      	mov	r3, r2
   82f5a:	005b      	lsls	r3, r3, #1
   82f5c:	4413      	add	r3, r2
   82f5e:	4a23      	ldr	r2, [pc, #140]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f60:	6013      	str	r3, [r2, #0]
				break;
   82f62:	e000      	b.n	82f66 <SystemCoreClockUpdate+0xe6>
				break;
   82f64:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82f66:	4b1f      	ldr	r3, [pc, #124]	; (82fe4 <SystemCoreClockUpdate+0x164>)
   82f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82f6a:	f003 0303 	and.w	r3, r3, #3
   82f6e:	2b02      	cmp	r3, #2
   82f70:	d115      	bne.n	82f9e <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82f72:	4b1c      	ldr	r3, [pc, #112]	; (82fe4 <SystemCoreClockUpdate+0x164>)
   82f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82f76:	0c1b      	lsrs	r3, r3, #16
   82f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   82f7c:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82f7e:	4a1b      	ldr	r2, [pc, #108]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f80:	6812      	ldr	r2, [r2, #0]
   82f82:	fb02 f303 	mul.w	r3, r2, r3
   82f86:	4a19      	ldr	r2, [pc, #100]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f88:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82f8a:	4b16      	ldr	r3, [pc, #88]	; (82fe4 <SystemCoreClockUpdate+0x164>)
   82f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82f8e:	b2db      	uxtb	r3, r3
   82f90:	4a16      	ldr	r2, [pc, #88]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f92:	6812      	ldr	r2, [r2, #0]
   82f94:	fbb2 f3f3 	udiv	r3, r2, r3
   82f98:	4a14      	ldr	r2, [pc, #80]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82f9a:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82f9c:	e002      	b.n	82fa4 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82f9e:	4b13      	ldr	r3, [pc, #76]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82fa0:	4a15      	ldr	r2, [pc, #84]	; (82ff8 <SystemCoreClockUpdate+0x178>)
   82fa2:	601a      	str	r2, [r3, #0]
		break;
   82fa4:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82fa6:	4b0f      	ldr	r3, [pc, #60]	; (82fe4 <SystemCoreClockUpdate+0x164>)
   82fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82fae:	2b70      	cmp	r3, #112	; 0x70
   82fb0:	d108      	bne.n	82fc4 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82fb2:	4b0e      	ldr	r3, [pc, #56]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82fb4:	681b      	ldr	r3, [r3, #0]
   82fb6:	4a11      	ldr	r2, [pc, #68]	; (82ffc <SystemCoreClockUpdate+0x17c>)
   82fb8:	fba2 2303 	umull	r2, r3, r2, r3
   82fbc:	085b      	lsrs	r3, r3, #1
   82fbe:	4a0b      	ldr	r2, [pc, #44]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82fc0:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   82fc2:	e00a      	b.n	82fda <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82fc4:	4b07      	ldr	r3, [pc, #28]	; (82fe4 <SystemCoreClockUpdate+0x164>)
   82fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82fc8:	091b      	lsrs	r3, r3, #4
   82fca:	f003 0307 	and.w	r3, r3, #7
   82fce:	4a07      	ldr	r2, [pc, #28]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82fd0:	6812      	ldr	r2, [r2, #0]
   82fd2:	fa22 f303 	lsr.w	r3, r2, r3
   82fd6:	4a05      	ldr	r2, [pc, #20]	; (82fec <SystemCoreClockUpdate+0x16c>)
   82fd8:	6013      	str	r3, [r2, #0]
}
   82fda:	bf00      	nop
   82fdc:	46bd      	mov	sp, r7
   82fde:	bc80      	pop	{r7}
   82fe0:	4770      	bx	lr
   82fe2:	bf00      	nop
   82fe4:	400e0600 	.word	0x400e0600
   82fe8:	400e1a10 	.word	0x400e1a10
   82fec:	20070198 	.word	0x20070198
   82ff0:	00b71b00 	.word	0x00b71b00
   82ff4:	003d0900 	.word	0x003d0900
   82ff8:	0e4e1c00 	.word	0x0e4e1c00
   82ffc:	aaaaaaab 	.word	0xaaaaaaab

00083000 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   83000:	b480      	push	{r7}
   83002:	b085      	sub	sp, #20
   83004:	af00      	add	r7, sp, #0
   83006:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   83008:	4b10      	ldr	r3, [pc, #64]	; (8304c <_sbrk+0x4c>)
   8300a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   8300c:	4b10      	ldr	r3, [pc, #64]	; (83050 <_sbrk+0x50>)
   8300e:	681b      	ldr	r3, [r3, #0]
   83010:	2b00      	cmp	r3, #0
   83012:	d102      	bne.n	8301a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   83014:	4b0e      	ldr	r3, [pc, #56]	; (83050 <_sbrk+0x50>)
   83016:	4a0f      	ldr	r2, [pc, #60]	; (83054 <_sbrk+0x54>)
   83018:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8301a:	4b0d      	ldr	r3, [pc, #52]	; (83050 <_sbrk+0x50>)
   8301c:	681b      	ldr	r3, [r3, #0]
   8301e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   83020:	68ba      	ldr	r2, [r7, #8]
   83022:	687b      	ldr	r3, [r7, #4]
   83024:	441a      	add	r2, r3
   83026:	68fb      	ldr	r3, [r7, #12]
   83028:	429a      	cmp	r2, r3
   8302a:	dd02      	ble.n	83032 <_sbrk+0x32>
		return (caddr_t) -1;	
   8302c:	f04f 33ff 	mov.w	r3, #4294967295
   83030:	e006      	b.n	83040 <_sbrk+0x40>
	}

	heap += incr;
   83032:	4b07      	ldr	r3, [pc, #28]	; (83050 <_sbrk+0x50>)
   83034:	681a      	ldr	r2, [r3, #0]
   83036:	687b      	ldr	r3, [r7, #4]
   83038:	4413      	add	r3, r2
   8303a:	4a05      	ldr	r2, [pc, #20]	; (83050 <_sbrk+0x50>)
   8303c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8303e:	68bb      	ldr	r3, [r7, #8]
}
   83040:	4618      	mov	r0, r3
   83042:	3714      	adds	r7, #20
   83044:	46bd      	mov	sp, r7
   83046:	bc80      	pop	{r7}
   83048:	4770      	bx	lr
   8304a:	bf00      	nop
   8304c:	20087ffc 	.word	0x20087ffc
   83050:	20070fb0 	.word	0x20070fb0
   83054:	20073068 	.word	0x20073068

00083058 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   83058:	b480      	push	{r7}
   8305a:	b083      	sub	sp, #12
   8305c:	af00      	add	r7, sp, #0
   8305e:	4603      	mov	r3, r0
   83060:	6039      	str	r1, [r7, #0]
   83062:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   83064:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83068:	2b00      	cmp	r3, #0
   8306a:	da0b      	bge.n	83084 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   8306c:	490d      	ldr	r1, [pc, #52]	; (830a4 <NVIC_SetPriority+0x4c>)
   8306e:	79fb      	ldrb	r3, [r7, #7]
   83070:	f003 030f 	and.w	r3, r3, #15
   83074:	3b04      	subs	r3, #4
   83076:	683a      	ldr	r2, [r7, #0]
   83078:	b2d2      	uxtb	r2, r2
   8307a:	0112      	lsls	r2, r2, #4
   8307c:	b2d2      	uxtb	r2, r2
   8307e:	440b      	add	r3, r1
   83080:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   83082:	e009      	b.n	83098 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83084:	4908      	ldr	r1, [pc, #32]	; (830a8 <NVIC_SetPriority+0x50>)
   83086:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8308a:	683a      	ldr	r2, [r7, #0]
   8308c:	b2d2      	uxtb	r2, r2
   8308e:	0112      	lsls	r2, r2, #4
   83090:	b2d2      	uxtb	r2, r2
   83092:	440b      	add	r3, r1
   83094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   83098:	bf00      	nop
   8309a:	370c      	adds	r7, #12
   8309c:	46bd      	mov	sp, r7
   8309e:	bc80      	pop	{r7}
   830a0:	4770      	bx	lr
   830a2:	bf00      	nop
   830a4:	e000ed00 	.word	0xe000ed00
   830a8:	e000e100 	.word	0xe000e100

000830ac <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   830ac:	b580      	push	{r7, lr}
   830ae:	b082      	sub	sp, #8
   830b0:	af00      	add	r7, sp, #0
   830b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   830b4:	687b      	ldr	r3, [r7, #4]
   830b6:	3b01      	subs	r3, #1
   830b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   830bc:	d301      	bcc.n	830c2 <SysTick_Config+0x16>
   830be:	2301      	movs	r3, #1
   830c0:	e00f      	b.n	830e2 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   830c2:	4a0a      	ldr	r2, [pc, #40]	; (830ec <SysTick_Config+0x40>)
   830c4:	687b      	ldr	r3, [r7, #4]
   830c6:	3b01      	subs	r3, #1
   830c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   830ca:	210f      	movs	r1, #15
   830cc:	f04f 30ff 	mov.w	r0, #4294967295
   830d0:	4b07      	ldr	r3, [pc, #28]	; (830f0 <SysTick_Config+0x44>)
   830d2:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   830d4:	4b05      	ldr	r3, [pc, #20]	; (830ec <SysTick_Config+0x40>)
   830d6:	2200      	movs	r2, #0
   830d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   830da:	4b04      	ldr	r3, [pc, #16]	; (830ec <SysTick_Config+0x40>)
   830dc:	2207      	movs	r2, #7
   830de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   830e0:	2300      	movs	r3, #0
}
   830e2:	4618      	mov	r0, r3
   830e4:	3708      	adds	r7, #8
   830e6:	46bd      	mov	sp, r7
   830e8:	bd80      	pop	{r7, pc}
   830ea:	bf00      	nop
   830ec:	e000e010 	.word	0xe000e010
   830f0:	00083059 	.word	0x00083059

000830f4 <osc_get_rate>:
{
   830f4:	b480      	push	{r7}
   830f6:	b083      	sub	sp, #12
   830f8:	af00      	add	r7, sp, #0
   830fa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   830fc:	687b      	ldr	r3, [r7, #4]
   830fe:	2b07      	cmp	r3, #7
   83100:	d825      	bhi.n	8314e <osc_get_rate+0x5a>
   83102:	a201      	add	r2, pc, #4	; (adr r2, 83108 <osc_get_rate+0x14>)
   83104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83108:	00083129 	.word	0x00083129
   8310c:	0008312f 	.word	0x0008312f
   83110:	00083135 	.word	0x00083135
   83114:	0008313b 	.word	0x0008313b
   83118:	0008313f 	.word	0x0008313f
   8311c:	00083143 	.word	0x00083143
   83120:	00083147 	.word	0x00083147
   83124:	0008314b 	.word	0x0008314b
		return OSC_SLCK_32K_RC_HZ;
   83128:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8312c:	e010      	b.n	83150 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8312e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83132:	e00d      	b.n	83150 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   83134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83138:	e00a      	b.n	83150 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   8313a:	4b08      	ldr	r3, [pc, #32]	; (8315c <osc_get_rate+0x68>)
   8313c:	e008      	b.n	83150 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8313e:	4b08      	ldr	r3, [pc, #32]	; (83160 <osc_get_rate+0x6c>)
   83140:	e006      	b.n	83150 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   83142:	4b08      	ldr	r3, [pc, #32]	; (83164 <osc_get_rate+0x70>)
   83144:	e004      	b.n	83150 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   83146:	4b07      	ldr	r3, [pc, #28]	; (83164 <osc_get_rate+0x70>)
   83148:	e002      	b.n	83150 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   8314a:	4b06      	ldr	r3, [pc, #24]	; (83164 <osc_get_rate+0x70>)
   8314c:	e000      	b.n	83150 <osc_get_rate+0x5c>
	return 0;
   8314e:	2300      	movs	r3, #0
}
   83150:	4618      	mov	r0, r3
   83152:	370c      	adds	r7, #12
   83154:	46bd      	mov	sp, r7
   83156:	bc80      	pop	{r7}
   83158:	4770      	bx	lr
   8315a:	bf00      	nop
   8315c:	003d0900 	.word	0x003d0900
   83160:	007a1200 	.word	0x007a1200
   83164:	00b71b00 	.word	0x00b71b00

00083168 <sysclk_get_main_hz>:
{
   83168:	b580      	push	{r7, lr}
   8316a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   8316c:	2006      	movs	r0, #6
   8316e:	4b04      	ldr	r3, [pc, #16]	; (83180 <sysclk_get_main_hz+0x18>)
   83170:	4798      	blx	r3
   83172:	4602      	mov	r2, r0
   83174:	4613      	mov	r3, r2
   83176:	00db      	lsls	r3, r3, #3
   83178:	1a9b      	subs	r3, r3, r2
   8317a:	005b      	lsls	r3, r3, #1
}
   8317c:	4618      	mov	r0, r3
   8317e:	bd80      	pop	{r7, pc}
   83180:	000830f5 	.word	0x000830f5

00083184 <sysclk_get_cpu_hz>:
{
   83184:	b580      	push	{r7, lr}
   83186:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83188:	4b02      	ldr	r3, [pc, #8]	; (83194 <sysclk_get_cpu_hz+0x10>)
   8318a:	4798      	blx	r3
   8318c:	4603      	mov	r3, r0
   8318e:	085b      	lsrs	r3, r3, #1
}
   83190:	4618      	mov	r0, r3
   83192:	bd80      	pop	{r7, pc}
   83194:	00083169 	.word	0x00083169

00083198 <ioport_set_pin_level>:
{
   83198:	b480      	push	{r7}
   8319a:	b08b      	sub	sp, #44	; 0x2c
   8319c:	af00      	add	r7, sp, #0
   8319e:	6078      	str	r0, [r7, #4]
   831a0:	460b      	mov	r3, r1
   831a2:	70fb      	strb	r3, [r7, #3]
   831a4:	687b      	ldr	r3, [r7, #4]
   831a6:	627b      	str	r3, [r7, #36]	; 0x24
   831a8:	78fb      	ldrb	r3, [r7, #3]
   831aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   831ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   831b0:	61fb      	str	r3, [r7, #28]
   831b2:	69fb      	ldr	r3, [r7, #28]
   831b4:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   831b6:	69bb      	ldr	r3, [r7, #24]
   831b8:	095b      	lsrs	r3, r3, #5
   831ba:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   831bc:	697b      	ldr	r3, [r7, #20]
   831be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   831c2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   831c6:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   831c8:	613b      	str	r3, [r7, #16]
	if (level) {
   831ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   831ce:	2b00      	cmp	r3, #0
   831d0:	d009      	beq.n	831e6 <ioport_set_pin_level+0x4e>
   831d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   831d4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   831d6:	68fb      	ldr	r3, [r7, #12]
   831d8:	f003 031f 	and.w	r3, r3, #31
   831dc:	2201      	movs	r2, #1
   831de:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   831e0:	693b      	ldr	r3, [r7, #16]
   831e2:	631a      	str	r2, [r3, #48]	; 0x30
}
   831e4:	e008      	b.n	831f8 <ioport_set_pin_level+0x60>
   831e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   831e8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   831ea:	68bb      	ldr	r3, [r7, #8]
   831ec:	f003 031f 	and.w	r3, r3, #31
   831f0:	2201      	movs	r2, #1
   831f2:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   831f4:	693b      	ldr	r3, [r7, #16]
   831f6:	635a      	str	r2, [r3, #52]	; 0x34
   831f8:	bf00      	nop
   831fa:	372c      	adds	r7, #44	; 0x2c
   831fc:	46bd      	mov	sp, r7
   831fe:	bc80      	pop	{r7}
   83200:	4770      	bx	lr

00083202 <ioport_get_pin_level>:
{
   83202:	b480      	push	{r7}
   83204:	b089      	sub	sp, #36	; 0x24
   83206:	af00      	add	r7, sp, #0
   83208:	6078      	str	r0, [r7, #4]
   8320a:	687b      	ldr	r3, [r7, #4]
   8320c:	61fb      	str	r3, [r7, #28]
   8320e:	69fb      	ldr	r3, [r7, #28]
   83210:	61bb      	str	r3, [r7, #24]
   83212:	69bb      	ldr	r3, [r7, #24]
   83214:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   83216:	697b      	ldr	r3, [r7, #20]
   83218:	095b      	lsrs	r3, r3, #5
   8321a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8321c:	693b      	ldr	r3, [r7, #16]
   8321e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83222:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83226:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   83228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   8322a:	69fb      	ldr	r3, [r7, #28]
   8322c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8322e:	68fb      	ldr	r3, [r7, #12]
   83230:	f003 031f 	and.w	r3, r3, #31
   83234:	2101      	movs	r1, #1
   83236:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8323a:	4013      	ands	r3, r2
   8323c:	2b00      	cmp	r3, #0
   8323e:	bf14      	ite	ne
   83240:	2301      	movne	r3, #1
   83242:	2300      	moveq	r3, #0
   83244:	b2db      	uxtb	r3, r3
}
   83246:	4618      	mov	r0, r3
   83248:	3724      	adds	r7, #36	; 0x24
   8324a:	46bd      	mov	sp, r7
   8324c:	bc80      	pop	{r7}
   8324e:	4770      	bx	lr

00083250 <main>:
FIL file_object;*/

void noOS_bootup_sequence(void);

int main(void)
{
   83250:	b580      	push	{r7, lr}
   83252:	b082      	sub	sp, #8
   83254:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   83256:	4b26      	ldr	r3, [pc, #152]	; (832f0 <main+0xa0>)
   83258:	4798      	blx	r3
    board_init();
   8325a:	4b26      	ldr	r3, [pc, #152]	; (832f4 <main+0xa4>)
   8325c:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   8325e:	4b26      	ldr	r3, [pc, #152]	; (832f8 <main+0xa8>)
   83260:	4798      	blx	r3
   83262:	4602      	mov	r2, r0
   83264:	4b25      	ldr	r3, [pc, #148]	; (832fc <main+0xac>)
   83266:	fba3 2302 	umull	r2, r3, r3, r2
   8326a:	099b      	lsrs	r3, r3, #6
   8326c:	4618      	mov	r0, r3
   8326e:	4b24      	ldr	r3, [pc, #144]	; (83300 <main+0xb0>)
   83270:	4798      	blx	r3
    
    //sd_mmc_init();
    
    spi_init();
   83272:	4b24      	ldr	r3, [pc, #144]	; (83304 <main+0xb4>)
   83274:	4798      	blx	r3
    
    lcd_init();
   83276:	4b24      	ldr	r3, [pc, #144]	; (83308 <main+0xb8>)
   83278:	4798      	blx	r3
    bl_state = LCD_LIGHT_ON;
   8327a:	4b24      	ldr	r3, [pc, #144]	; (8330c <main+0xbc>)
   8327c:	2208      	movs	r2, #8
   8327e:	701a      	strb	r2, [r3, #0]
    lcd_set_backlight(bl_state);
   83280:	4b22      	ldr	r3, [pc, #136]	; (8330c <main+0xbc>)
   83282:	781b      	ldrb	r3, [r3, #0]
   83284:	4618      	mov	r0, r3
   83286:	4b22      	ldr	r3, [pc, #136]	; (83310 <main+0xc0>)
   83288:	4798      	blx	r3
main_end_of_test:
        //printf("Please unplug the card.\n\r");
        //while (CTRL_NO_PRESENT != sd_mmc_check(0));
//    }*/
    
    noOS_bootup_sequence();
   8328a:	4b22      	ldr	r3, [pc, #136]	; (83314 <main+0xc4>)
   8328c:	4798      	blx	r3
    
    lcd_clear();
   8328e:	4b22      	ldr	r3, [pc, #136]	; (83318 <main+0xc8>)
   83290:	4798      	blx	r3
    
    while (1)
    {
        update_comm();
   83292:	4b22      	ldr	r3, [pc, #136]	; (8331c <main+0xcc>)
   83294:	4798      	blx	r3
        update_heartbeat();
   83296:	4b22      	ldr	r3, [pc, #136]	; (83320 <main+0xd0>)
   83298:	4798      	blx	r3
        update_battery(0);
   8329a:	2000      	movs	r0, #0
   8329c:	4b21      	ldr	r3, [pc, #132]	; (83324 <main+0xd4>)
   8329e:	4798      	blx	r3
        
        if (stm.ibit.heartbeat)
   832a0:	4b21      	ldr	r3, [pc, #132]	; (83328 <main+0xd8>)
   832a2:	781b      	ldrb	r3, [r3, #0]
   832a4:	f003 0301 	and.w	r3, r3, #1
   832a8:	b2db      	uxtb	r3, r3
   832aa:	2b00      	cmp	r3, #0
   832ac:	d004      	beq.n	832b8 <main+0x68>
        {
            ioport_set_pin_level(LED_M2, 1);
   832ae:	2101      	movs	r1, #1
   832b0:	2068      	movs	r0, #104	; 0x68
   832b2:	4b1e      	ldr	r3, [pc, #120]	; (8332c <main+0xdc>)
   832b4:	4798      	blx	r3
   832b6:	e003      	b.n	832c0 <main+0x70>
        }
        else
        {
            ioport_set_pin_level(LED_M2, 0);
   832b8:	2100      	movs	r1, #0
   832ba:	2068      	movs	r0, #104	; 0x68
   832bc:	4b1b      	ldr	r3, [pc, #108]	; (8332c <main+0xdc>)
   832be:	4798      	blx	r3
        }
        
        act_event = button_events();
   832c0:	4b1b      	ldr	r3, [pc, #108]	; (83330 <main+0xe0>)
   832c2:	4798      	blx	r3
   832c4:	4603      	mov	r3, r0
   832c6:	71fb      	strb	r3, [r7, #7]
        
        menu(act_event);
   832c8:	79fb      	ldrb	r3, [r7, #7]
   832ca:	4618      	mov	r0, r3
   832cc:	4b19      	ldr	r3, [pc, #100]	; (83334 <main+0xe4>)
   832ce:	4798      	blx	r3
        
        if (act_event == EVENT_BUTTON_MID_H)
   832d0:	79fb      	ldrb	r3, [r7, #7]
   832d2:	2b08      	cmp	r3, #8
   832d4:	d105      	bne.n	832e2 <main+0x92>
        {
            mts.ibit.button = 1;
   832d6:	4a18      	ldr	r2, [pc, #96]	; (83338 <main+0xe8>)
   832d8:	7813      	ldrb	r3, [r2, #0]
   832da:	f043 0302 	orr.w	r3, r3, #2
   832de:	7013      	strb	r3, [r2, #0]
   832e0:	e7d7      	b.n	83292 <main+0x42>
        }
        else
        {
            mts.ibit.button = 0;
   832e2:	4a15      	ldr	r2, [pc, #84]	; (83338 <main+0xe8>)
   832e4:	7813      	ldrb	r3, [r2, #0]
   832e6:	f36f 0341 	bfc	r3, #1, #1
   832ea:	7013      	strb	r3, [r2, #0]
        update_comm();
   832ec:	e7d1      	b.n	83292 <main+0x42>
   832ee:	bf00      	nop
   832f0:	00082489 	.word	0x00082489
   832f4:	00082c4d 	.word	0x00082c4d
   832f8:	00083185 	.word	0x00083185
   832fc:	10624dd3 	.word	0x10624dd3
   83300:	000830ad 	.word	0x000830ad
   83304:	000805bd 	.word	0x000805bd
   83308:	00080e5d 	.word	0x00080e5d
   8330c:	20070fb4 	.word	0x20070fb4
   83310:	00080f39 	.word	0x00080f39
   83314:	0008333d 	.word	0x0008333d
   83318:	00080f6d 	.word	0x00080f6d
   8331c:	00081f05 	.word	0x00081f05
   83320:	000820f1 	.word	0x000820f1
   83324:	00081f4d 	.word	0x00081f4d
   83328:	20070ff4 	.word	0x20070ff4
   8332c:	00083199 	.word	0x00083199
   83330:	00081b51 	.word	0x00081b51
   83334:	00081681 	.word	0x00081681
   83338:	20070ff0 	.word	0x20070ff0

0008333c <noOS_bootup_sequence>:
        }  
    }
}

void noOS_bootup_sequence(void)
{
   8333c:	b580      	push	{r7, lr}
   8333e:	b082      	sub	sp, #8
   83340:	af00      	add	r7, sp, #0
    while (ioport_get_pin_level(PB_MID))
   83342:	e072      	b.n	8342a <noOS_bootup_sequence+0xee>
    {
        if (getTicks() >= (ticks_blink_update + 800))
   83344:	4b59      	ldr	r3, [pc, #356]	; (834ac <noOS_bootup_sequence+0x170>)
   83346:	4798      	blx	r3
   83348:	4602      	mov	r2, r0
   8334a:	4b59      	ldr	r3, [pc, #356]	; (834b0 <noOS_bootup_sequence+0x174>)
   8334c:	681b      	ldr	r3, [r3, #0]
   8334e:	f503 7348 	add.w	r3, r3, #800	; 0x320
   83352:	429a      	cmp	r2, r3
   83354:	d31a      	bcc.n	8338c <noOS_bootup_sequence+0x50>
        {
            ticks_blink_update = getTicks();
   83356:	4b55      	ldr	r3, [pc, #340]	; (834ac <noOS_bootup_sequence+0x170>)
   83358:	4798      	blx	r3
   8335a:	4602      	mov	r2, r0
   8335c:	4b54      	ldr	r3, [pc, #336]	; (834b0 <noOS_bootup_sequence+0x174>)
   8335e:	601a      	str	r2, [r3, #0]
            
            if (blink_level)
   83360:	4b54      	ldr	r3, [pc, #336]	; (834b4 <noOS_bootup_sequence+0x178>)
   83362:	781b      	ldrb	r3, [r3, #0]
   83364:	2b00      	cmp	r3, #0
   83366:	d003      	beq.n	83370 <noOS_bootup_sequence+0x34>
            {
                blink_level = 0;
   83368:	4b52      	ldr	r3, [pc, #328]	; (834b4 <noOS_bootup_sequence+0x178>)
   8336a:	2200      	movs	r2, #0
   8336c:	701a      	strb	r2, [r3, #0]
   8336e:	e002      	b.n	83376 <noOS_bootup_sequence+0x3a>
            }
            else
            {
                blink_level = 1;
   83370:	4b50      	ldr	r3, [pc, #320]	; (834b4 <noOS_bootup_sequence+0x178>)
   83372:	2201      	movs	r2, #1
   83374:	701a      	strb	r2, [r3, #0]
            }
            
            ioport_set_pin_level(LED_BAT, blink_level);
   83376:	4b4f      	ldr	r3, [pc, #316]	; (834b4 <noOS_bootup_sequence+0x178>)
   83378:	781b      	ldrb	r3, [r3, #0]
   8337a:	2b00      	cmp	r3, #0
   8337c:	bf14      	ite	ne
   8337e:	2301      	movne	r3, #1
   83380:	2300      	moveq	r3, #0
   83382:	b2db      	uxtb	r3, r3
   83384:	4619      	mov	r1, r3
   83386:	2066      	movs	r0, #102	; 0x66
   83388:	4b4b      	ldr	r3, [pc, #300]	; (834b8 <noOS_bootup_sequence+0x17c>)
   8338a:	4798      	blx	r3
        }
        
        if (getTicks() >= (ticks_dot_update + 500))
   8338c:	4b47      	ldr	r3, [pc, #284]	; (834ac <noOS_bootup_sequence+0x170>)
   8338e:	4798      	blx	r3
   83390:	4602      	mov	r2, r0
   83392:	4b4a      	ldr	r3, [pc, #296]	; (834bc <noOS_bootup_sequence+0x180>)
   83394:	681b      	ldr	r3, [r3, #0]
   83396:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   8339a:	429a      	cmp	r2, r3
   8339c:	d315      	bcc.n	833ca <noOS_bootup_sequence+0x8e>
        {
            ticks_dot_update = getTicks();
   8339e:	4b43      	ldr	r3, [pc, #268]	; (834ac <noOS_bootup_sequence+0x170>)
   833a0:	4798      	blx	r3
   833a2:	4602      	mov	r2, r0
   833a4:	4b45      	ldr	r3, [pc, #276]	; (834bc <noOS_bootup_sequence+0x180>)
   833a6:	601a      	str	r2, [r3, #0]
            
            if (dots < 3)
   833a8:	4b45      	ldr	r3, [pc, #276]	; (834c0 <noOS_bootup_sequence+0x184>)
   833aa:	781b      	ldrb	r3, [r3, #0]
   833ac:	2b02      	cmp	r3, #2
   833ae:	d806      	bhi.n	833be <noOS_bootup_sequence+0x82>
            {
                dots++;
   833b0:	4b43      	ldr	r3, [pc, #268]	; (834c0 <noOS_bootup_sequence+0x184>)
   833b2:	781b      	ldrb	r3, [r3, #0]
   833b4:	3301      	adds	r3, #1
   833b6:	b2da      	uxtb	r2, r3
   833b8:	4b41      	ldr	r3, [pc, #260]	; (834c0 <noOS_bootup_sequence+0x184>)
   833ba:	701a      	strb	r2, [r3, #0]
   833bc:	e002      	b.n	833c4 <noOS_bootup_sequence+0x88>
            }
            else
            {
                dots = 0;
   833be:	4b40      	ldr	r3, [pc, #256]	; (834c0 <noOS_bootup_sequence+0x184>)
   833c0:	2200      	movs	r2, #0
   833c2:	701a      	strb	r2, [r3, #0]
            }
            
            update_dots = 1;
   833c4:	4b3f      	ldr	r3, [pc, #252]	; (834c4 <noOS_bootup_sequence+0x188>)
   833c6:	2201      	movs	r2, #1
   833c8:	701a      	strb	r2, [r3, #0]
        }
        
        if (update_dots)
   833ca:	4b3e      	ldr	r3, [pc, #248]	; (834c4 <noOS_bootup_sequence+0x188>)
   833cc:	781b      	ldrb	r3, [r3, #0]
   833ce:	2b00      	cmp	r3, #0
   833d0:	d02b      	beq.n	8342a <noOS_bootup_sequence+0xee>
        {
            update_dots = 0;
   833d2:	4b3c      	ldr	r3, [pc, #240]	; (834c4 <noOS_bootup_sequence+0x188>)
   833d4:	2200      	movs	r2, #0
   833d6:	701a      	strb	r2, [r3, #0]
            
            switch (dots)
   833d8:	4b39      	ldr	r3, [pc, #228]	; (834c0 <noOS_bootup_sequence+0x184>)
   833da:	781b      	ldrb	r3, [r3, #0]
   833dc:	2b03      	cmp	r3, #3
   833de:	d823      	bhi.n	83428 <noOS_bootup_sequence+0xec>
   833e0:	a201      	add	r2, pc, #4	; (adr r2, 833e8 <noOS_bootup_sequence+0xac>)
   833e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   833e6:	bf00      	nop
   833e8:	000833f9 	.word	0x000833f9
   833ec:	00083405 	.word	0x00083405
   833f0:	00083411 	.word	0x00083411
   833f4:	0008341d 	.word	0x0008341d
            {
                case 0:
                lcd_print_s(2, 2, "booting noOS   ");
   833f8:	4a33      	ldr	r2, [pc, #204]	; (834c8 <noOS_bootup_sequence+0x18c>)
   833fa:	2102      	movs	r1, #2
   833fc:	2002      	movs	r0, #2
   833fe:	4b33      	ldr	r3, [pc, #204]	; (834cc <noOS_bootup_sequence+0x190>)
   83400:	4798      	blx	r3
                break;
   83402:	e012      	b.n	8342a <noOS_bootup_sequence+0xee>
                case 1:
                lcd_print_s(2, 14, ".");
   83404:	4a32      	ldr	r2, [pc, #200]	; (834d0 <noOS_bootup_sequence+0x194>)
   83406:	210e      	movs	r1, #14
   83408:	2002      	movs	r0, #2
   8340a:	4b30      	ldr	r3, [pc, #192]	; (834cc <noOS_bootup_sequence+0x190>)
   8340c:	4798      	blx	r3
                break;
   8340e:	e00c      	b.n	8342a <noOS_bootup_sequence+0xee>
                case 2:
                lcd_print_s(2, 15, ".");
   83410:	4a2f      	ldr	r2, [pc, #188]	; (834d0 <noOS_bootup_sequence+0x194>)
   83412:	210f      	movs	r1, #15
   83414:	2002      	movs	r0, #2
   83416:	4b2d      	ldr	r3, [pc, #180]	; (834cc <noOS_bootup_sequence+0x190>)
   83418:	4798      	blx	r3
                break;
   8341a:	e006      	b.n	8342a <noOS_bootup_sequence+0xee>
                case 3:
                lcd_print_s(2, 16, ".");
   8341c:	4a2c      	ldr	r2, [pc, #176]	; (834d0 <noOS_bootup_sequence+0x194>)
   8341e:	2110      	movs	r1, #16
   83420:	2002      	movs	r0, #2
   83422:	4b2a      	ldr	r3, [pc, #168]	; (834cc <noOS_bootup_sequence+0x190>)
   83424:	4798      	blx	r3
                break;
   83426:	e000      	b.n	8342a <noOS_bootup_sequence+0xee>
                default:
                break;
   83428:	bf00      	nop
    while (ioport_get_pin_level(PB_MID))
   8342a:	2062      	movs	r0, #98	; 0x62
   8342c:	4b29      	ldr	r3, [pc, #164]	; (834d4 <noOS_bootup_sequence+0x198>)
   8342e:	4798      	blx	r3
   83430:	4603      	mov	r3, r0
   83432:	2b00      	cmp	r3, #0
   83434:	d186      	bne.n	83344 <noOS_bootup_sequence+0x8>
            }
        }
    }
    
    for(int i = 0; i< 3; i++)
   83436:	2300      	movs	r3, #0
   83438:	607b      	str	r3, [r7, #4]
   8343a:	e030      	b.n	8349e <noOS_bootup_sequence+0x162>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   8343c:	2101      	movs	r1, #1
   8343e:	206a      	movs	r0, #106	; 0x6a
   83440:	4b1d      	ldr	r3, [pc, #116]	; (834b8 <noOS_bootup_sequence+0x17c>)
   83442:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 1);
   83444:	2101      	movs	r1, #1
   83446:	2066      	movs	r0, #102	; 0x66
   83448:	4b1b      	ldr	r3, [pc, #108]	; (834b8 <noOS_bootup_sequence+0x17c>)
   8344a:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 1);
   8344c:	2101      	movs	r1, #1
   8344e:	2067      	movs	r0, #103	; 0x67
   83450:	4b19      	ldr	r3, [pc, #100]	; (834b8 <noOS_bootup_sequence+0x17c>)
   83452:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 1);
   83454:	2101      	movs	r1, #1
   83456:	2068      	movs	r0, #104	; 0x68
   83458:	4b17      	ldr	r3, [pc, #92]	; (834b8 <noOS_bootup_sequence+0x17c>)
   8345a:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 1);
   8345c:	2101      	movs	r1, #1
   8345e:	2069      	movs	r0, #105	; 0x69
   83460:	4b15      	ldr	r3, [pc, #84]	; (834b8 <noOS_bootup_sequence+0x17c>)
   83462:	4798      	blx	r3
        mdelay(100);
   83464:	2064      	movs	r0, #100	; 0x64
   83466:	4b1c      	ldr	r3, [pc, #112]	; (834d8 <noOS_bootup_sequence+0x19c>)
   83468:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   8346a:	2100      	movs	r1, #0
   8346c:	206a      	movs	r0, #106	; 0x6a
   8346e:	4b12      	ldr	r3, [pc, #72]	; (834b8 <noOS_bootup_sequence+0x17c>)
   83470:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   83472:	2100      	movs	r1, #0
   83474:	2066      	movs	r0, #102	; 0x66
   83476:	4b10      	ldr	r3, [pc, #64]	; (834b8 <noOS_bootup_sequence+0x17c>)
   83478:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   8347a:	2100      	movs	r1, #0
   8347c:	2067      	movs	r0, #103	; 0x67
   8347e:	4b0e      	ldr	r3, [pc, #56]	; (834b8 <noOS_bootup_sequence+0x17c>)
   83480:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   83482:	2100      	movs	r1, #0
   83484:	2068      	movs	r0, #104	; 0x68
   83486:	4b0c      	ldr	r3, [pc, #48]	; (834b8 <noOS_bootup_sequence+0x17c>)
   83488:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   8348a:	2100      	movs	r1, #0
   8348c:	2069      	movs	r0, #105	; 0x69
   8348e:	4b0a      	ldr	r3, [pc, #40]	; (834b8 <noOS_bootup_sequence+0x17c>)
   83490:	4798      	blx	r3
        mdelay(100);
   83492:	2064      	movs	r0, #100	; 0x64
   83494:	4b10      	ldr	r3, [pc, #64]	; (834d8 <noOS_bootup_sequence+0x19c>)
   83496:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   83498:	687b      	ldr	r3, [r7, #4]
   8349a:	3301      	adds	r3, #1
   8349c:	607b      	str	r3, [r7, #4]
   8349e:	687b      	ldr	r3, [r7, #4]
   834a0:	2b02      	cmp	r3, #2
   834a2:	ddcb      	ble.n	8343c <noOS_bootup_sequence+0x100>
    }
}
   834a4:	bf00      	nop
   834a6:	3708      	adds	r7, #8
   834a8:	46bd      	mov	sp, r7
   834aa:	bd80      	pop	{r7, pc}
   834ac:	00081ec5 	.word	0x00081ec5
   834b0:	20071034 	.word	0x20071034
   834b4:	20071030 	.word	0x20071030
   834b8:	00083199 	.word	0x00083199
   834bc:	20071038 	.word	0x20071038
   834c0:	20070fb5 	.word	0x20070fb5
   834c4:	2007019c 	.word	0x2007019c
   834c8:	000884f8 	.word	0x000884f8
   834cc:	00080f8d 	.word	0x00080f8d
   834d0:	00088508 	.word	0x00088508
   834d4:	00083203 	.word	0x00083203
   834d8:	00081ed9 	.word	0x00081ed9

000834dc <__aeabi_drsub>:
   834dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   834e0:	e002      	b.n	834e8 <__adddf3>
   834e2:	bf00      	nop

000834e4 <__aeabi_dsub>:
   834e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000834e8 <__adddf3>:
   834e8:	b530      	push	{r4, r5, lr}
   834ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   834ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   834f2:	ea94 0f05 	teq	r4, r5
   834f6:	bf08      	it	eq
   834f8:	ea90 0f02 	teqeq	r0, r2
   834fc:	bf1f      	itttt	ne
   834fe:	ea54 0c00 	orrsne.w	ip, r4, r0
   83502:	ea55 0c02 	orrsne.w	ip, r5, r2
   83506:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8350a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8350e:	f000 80e2 	beq.w	836d6 <__adddf3+0x1ee>
   83512:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83516:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8351a:	bfb8      	it	lt
   8351c:	426d      	neglt	r5, r5
   8351e:	dd0c      	ble.n	8353a <__adddf3+0x52>
   83520:	442c      	add	r4, r5
   83522:	ea80 0202 	eor.w	r2, r0, r2
   83526:	ea81 0303 	eor.w	r3, r1, r3
   8352a:	ea82 0000 	eor.w	r0, r2, r0
   8352e:	ea83 0101 	eor.w	r1, r3, r1
   83532:	ea80 0202 	eor.w	r2, r0, r2
   83536:	ea81 0303 	eor.w	r3, r1, r3
   8353a:	2d36      	cmp	r5, #54	; 0x36
   8353c:	bf88      	it	hi
   8353e:	bd30      	pophi	{r4, r5, pc}
   83540:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83544:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83548:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8354c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83550:	d002      	beq.n	83558 <__adddf3+0x70>
   83552:	4240      	negs	r0, r0
   83554:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83558:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8355c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83560:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83564:	d002      	beq.n	8356c <__adddf3+0x84>
   83566:	4252      	negs	r2, r2
   83568:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8356c:	ea94 0f05 	teq	r4, r5
   83570:	f000 80a7 	beq.w	836c2 <__adddf3+0x1da>
   83574:	f1a4 0401 	sub.w	r4, r4, #1
   83578:	f1d5 0e20 	rsbs	lr, r5, #32
   8357c:	db0d      	blt.n	8359a <__adddf3+0xb2>
   8357e:	fa02 fc0e 	lsl.w	ip, r2, lr
   83582:	fa22 f205 	lsr.w	r2, r2, r5
   83586:	1880      	adds	r0, r0, r2
   83588:	f141 0100 	adc.w	r1, r1, #0
   8358c:	fa03 f20e 	lsl.w	r2, r3, lr
   83590:	1880      	adds	r0, r0, r2
   83592:	fa43 f305 	asr.w	r3, r3, r5
   83596:	4159      	adcs	r1, r3
   83598:	e00e      	b.n	835b8 <__adddf3+0xd0>
   8359a:	f1a5 0520 	sub.w	r5, r5, #32
   8359e:	f10e 0e20 	add.w	lr, lr, #32
   835a2:	2a01      	cmp	r2, #1
   835a4:	fa03 fc0e 	lsl.w	ip, r3, lr
   835a8:	bf28      	it	cs
   835aa:	f04c 0c02 	orrcs.w	ip, ip, #2
   835ae:	fa43 f305 	asr.w	r3, r3, r5
   835b2:	18c0      	adds	r0, r0, r3
   835b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   835b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   835bc:	d507      	bpl.n	835ce <__adddf3+0xe6>
   835be:	f04f 0e00 	mov.w	lr, #0
   835c2:	f1dc 0c00 	rsbs	ip, ip, #0
   835c6:	eb7e 0000 	sbcs.w	r0, lr, r0
   835ca:	eb6e 0101 	sbc.w	r1, lr, r1
   835ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   835d2:	d31b      	bcc.n	8360c <__adddf3+0x124>
   835d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   835d8:	d30c      	bcc.n	835f4 <__adddf3+0x10c>
   835da:	0849      	lsrs	r1, r1, #1
   835dc:	ea5f 0030 	movs.w	r0, r0, rrx
   835e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   835e4:	f104 0401 	add.w	r4, r4, #1
   835e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   835ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   835f0:	f080 809a 	bcs.w	83728 <__adddf3+0x240>
   835f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   835f8:	bf08      	it	eq
   835fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   835fe:	f150 0000 	adcs.w	r0, r0, #0
   83602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83606:	ea41 0105 	orr.w	r1, r1, r5
   8360a:	bd30      	pop	{r4, r5, pc}
   8360c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83610:	4140      	adcs	r0, r0
   83612:	eb41 0101 	adc.w	r1, r1, r1
   83616:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8361a:	f1a4 0401 	sub.w	r4, r4, #1
   8361e:	d1e9      	bne.n	835f4 <__adddf3+0x10c>
   83620:	f091 0f00 	teq	r1, #0
   83624:	bf04      	itt	eq
   83626:	4601      	moveq	r1, r0
   83628:	2000      	moveq	r0, #0
   8362a:	fab1 f381 	clz	r3, r1
   8362e:	bf08      	it	eq
   83630:	3320      	addeq	r3, #32
   83632:	f1a3 030b 	sub.w	r3, r3, #11
   83636:	f1b3 0220 	subs.w	r2, r3, #32
   8363a:	da0c      	bge.n	83656 <__adddf3+0x16e>
   8363c:	320c      	adds	r2, #12
   8363e:	dd08      	ble.n	83652 <__adddf3+0x16a>
   83640:	f102 0c14 	add.w	ip, r2, #20
   83644:	f1c2 020c 	rsb	r2, r2, #12
   83648:	fa01 f00c 	lsl.w	r0, r1, ip
   8364c:	fa21 f102 	lsr.w	r1, r1, r2
   83650:	e00c      	b.n	8366c <__adddf3+0x184>
   83652:	f102 0214 	add.w	r2, r2, #20
   83656:	bfd8      	it	le
   83658:	f1c2 0c20 	rsble	ip, r2, #32
   8365c:	fa01 f102 	lsl.w	r1, r1, r2
   83660:	fa20 fc0c 	lsr.w	ip, r0, ip
   83664:	bfdc      	itt	le
   83666:	ea41 010c 	orrle.w	r1, r1, ip
   8366a:	4090      	lslle	r0, r2
   8366c:	1ae4      	subs	r4, r4, r3
   8366e:	bfa2      	ittt	ge
   83670:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83674:	4329      	orrge	r1, r5
   83676:	bd30      	popge	{r4, r5, pc}
   83678:	ea6f 0404 	mvn.w	r4, r4
   8367c:	3c1f      	subs	r4, #31
   8367e:	da1c      	bge.n	836ba <__adddf3+0x1d2>
   83680:	340c      	adds	r4, #12
   83682:	dc0e      	bgt.n	836a2 <__adddf3+0x1ba>
   83684:	f104 0414 	add.w	r4, r4, #20
   83688:	f1c4 0220 	rsb	r2, r4, #32
   8368c:	fa20 f004 	lsr.w	r0, r0, r4
   83690:	fa01 f302 	lsl.w	r3, r1, r2
   83694:	ea40 0003 	orr.w	r0, r0, r3
   83698:	fa21 f304 	lsr.w	r3, r1, r4
   8369c:	ea45 0103 	orr.w	r1, r5, r3
   836a0:	bd30      	pop	{r4, r5, pc}
   836a2:	f1c4 040c 	rsb	r4, r4, #12
   836a6:	f1c4 0220 	rsb	r2, r4, #32
   836aa:	fa20 f002 	lsr.w	r0, r0, r2
   836ae:	fa01 f304 	lsl.w	r3, r1, r4
   836b2:	ea40 0003 	orr.w	r0, r0, r3
   836b6:	4629      	mov	r1, r5
   836b8:	bd30      	pop	{r4, r5, pc}
   836ba:	fa21 f004 	lsr.w	r0, r1, r4
   836be:	4629      	mov	r1, r5
   836c0:	bd30      	pop	{r4, r5, pc}
   836c2:	f094 0f00 	teq	r4, #0
   836c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   836ca:	bf06      	itte	eq
   836cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   836d0:	3401      	addeq	r4, #1
   836d2:	3d01      	subne	r5, #1
   836d4:	e74e      	b.n	83574 <__adddf3+0x8c>
   836d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   836da:	bf18      	it	ne
   836dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   836e0:	d029      	beq.n	83736 <__adddf3+0x24e>
   836e2:	ea94 0f05 	teq	r4, r5
   836e6:	bf08      	it	eq
   836e8:	ea90 0f02 	teqeq	r0, r2
   836ec:	d005      	beq.n	836fa <__adddf3+0x212>
   836ee:	ea54 0c00 	orrs.w	ip, r4, r0
   836f2:	bf04      	itt	eq
   836f4:	4619      	moveq	r1, r3
   836f6:	4610      	moveq	r0, r2
   836f8:	bd30      	pop	{r4, r5, pc}
   836fa:	ea91 0f03 	teq	r1, r3
   836fe:	bf1e      	ittt	ne
   83700:	2100      	movne	r1, #0
   83702:	2000      	movne	r0, #0
   83704:	bd30      	popne	{r4, r5, pc}
   83706:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8370a:	d105      	bne.n	83718 <__adddf3+0x230>
   8370c:	0040      	lsls	r0, r0, #1
   8370e:	4149      	adcs	r1, r1
   83710:	bf28      	it	cs
   83712:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83716:	bd30      	pop	{r4, r5, pc}
   83718:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8371c:	bf3c      	itt	cc
   8371e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   83722:	bd30      	popcc	{r4, r5, pc}
   83724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83728:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8372c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83730:	f04f 0000 	mov.w	r0, #0
   83734:	bd30      	pop	{r4, r5, pc}
   83736:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8373a:	bf1a      	itte	ne
   8373c:	4619      	movne	r1, r3
   8373e:	4610      	movne	r0, r2
   83740:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83744:	bf1c      	itt	ne
   83746:	460b      	movne	r3, r1
   83748:	4602      	movne	r2, r0
   8374a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8374e:	bf06      	itte	eq
   83750:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83754:	ea91 0f03 	teqeq	r1, r3
   83758:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8375c:	bd30      	pop	{r4, r5, pc}
   8375e:	bf00      	nop

00083760 <__aeabi_ui2d>:
   83760:	f090 0f00 	teq	r0, #0
   83764:	bf04      	itt	eq
   83766:	2100      	moveq	r1, #0
   83768:	4770      	bxeq	lr
   8376a:	b530      	push	{r4, r5, lr}
   8376c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83770:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83774:	f04f 0500 	mov.w	r5, #0
   83778:	f04f 0100 	mov.w	r1, #0
   8377c:	e750      	b.n	83620 <__adddf3+0x138>
   8377e:	bf00      	nop

00083780 <__aeabi_i2d>:
   83780:	f090 0f00 	teq	r0, #0
   83784:	bf04      	itt	eq
   83786:	2100      	moveq	r1, #0
   83788:	4770      	bxeq	lr
   8378a:	b530      	push	{r4, r5, lr}
   8378c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83790:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83794:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83798:	bf48      	it	mi
   8379a:	4240      	negmi	r0, r0
   8379c:	f04f 0100 	mov.w	r1, #0
   837a0:	e73e      	b.n	83620 <__adddf3+0x138>
   837a2:	bf00      	nop

000837a4 <__aeabi_f2d>:
   837a4:	0042      	lsls	r2, r0, #1
   837a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   837aa:	ea4f 0131 	mov.w	r1, r1, rrx
   837ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   837b2:	bf1f      	itttt	ne
   837b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   837b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   837bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   837c0:	4770      	bxne	lr
   837c2:	f092 0f00 	teq	r2, #0
   837c6:	bf14      	ite	ne
   837c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   837cc:	4770      	bxeq	lr
   837ce:	b530      	push	{r4, r5, lr}
   837d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   837d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   837d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   837dc:	e720      	b.n	83620 <__adddf3+0x138>
   837de:	bf00      	nop

000837e0 <__aeabi_ul2d>:
   837e0:	ea50 0201 	orrs.w	r2, r0, r1
   837e4:	bf08      	it	eq
   837e6:	4770      	bxeq	lr
   837e8:	b530      	push	{r4, r5, lr}
   837ea:	f04f 0500 	mov.w	r5, #0
   837ee:	e00a      	b.n	83806 <__aeabi_l2d+0x16>

000837f0 <__aeabi_l2d>:
   837f0:	ea50 0201 	orrs.w	r2, r0, r1
   837f4:	bf08      	it	eq
   837f6:	4770      	bxeq	lr
   837f8:	b530      	push	{r4, r5, lr}
   837fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   837fe:	d502      	bpl.n	83806 <__aeabi_l2d+0x16>
   83800:	4240      	negs	r0, r0
   83802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83806:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8380a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8380e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83812:	f43f aedc 	beq.w	835ce <__adddf3+0xe6>
   83816:	f04f 0203 	mov.w	r2, #3
   8381a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8381e:	bf18      	it	ne
   83820:	3203      	addne	r2, #3
   83822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83826:	bf18      	it	ne
   83828:	3203      	addne	r2, #3
   8382a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8382e:	f1c2 0320 	rsb	r3, r2, #32
   83832:	fa00 fc03 	lsl.w	ip, r0, r3
   83836:	fa20 f002 	lsr.w	r0, r0, r2
   8383a:	fa01 fe03 	lsl.w	lr, r1, r3
   8383e:	ea40 000e 	orr.w	r0, r0, lr
   83842:	fa21 f102 	lsr.w	r1, r1, r2
   83846:	4414      	add	r4, r2
   83848:	e6c1      	b.n	835ce <__adddf3+0xe6>
   8384a:	bf00      	nop

0008384c <__aeabi_frsub>:
   8384c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   83850:	e002      	b.n	83858 <__addsf3>
   83852:	bf00      	nop

00083854 <__aeabi_fsub>:
   83854:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00083858 <__addsf3>:
   83858:	0042      	lsls	r2, r0, #1
   8385a:	bf1f      	itttt	ne
   8385c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   83860:	ea92 0f03 	teqne	r2, r3
   83864:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   83868:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8386c:	d06a      	beq.n	83944 <__addsf3+0xec>
   8386e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   83872:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   83876:	bfc1      	itttt	gt
   83878:	18d2      	addgt	r2, r2, r3
   8387a:	4041      	eorgt	r1, r0
   8387c:	4048      	eorgt	r0, r1
   8387e:	4041      	eorgt	r1, r0
   83880:	bfb8      	it	lt
   83882:	425b      	neglt	r3, r3
   83884:	2b19      	cmp	r3, #25
   83886:	bf88      	it	hi
   83888:	4770      	bxhi	lr
   8388a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8388e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83892:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   83896:	bf18      	it	ne
   83898:	4240      	negne	r0, r0
   8389a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8389e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   838a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   838a6:	bf18      	it	ne
   838a8:	4249      	negne	r1, r1
   838aa:	ea92 0f03 	teq	r2, r3
   838ae:	d03f      	beq.n	83930 <__addsf3+0xd8>
   838b0:	f1a2 0201 	sub.w	r2, r2, #1
   838b4:	fa41 fc03 	asr.w	ip, r1, r3
   838b8:	eb10 000c 	adds.w	r0, r0, ip
   838bc:	f1c3 0320 	rsb	r3, r3, #32
   838c0:	fa01 f103 	lsl.w	r1, r1, r3
   838c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   838c8:	d502      	bpl.n	838d0 <__addsf3+0x78>
   838ca:	4249      	negs	r1, r1
   838cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   838d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   838d4:	d313      	bcc.n	838fe <__addsf3+0xa6>
   838d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   838da:	d306      	bcc.n	838ea <__addsf3+0x92>
   838dc:	0840      	lsrs	r0, r0, #1
   838de:	ea4f 0131 	mov.w	r1, r1, rrx
   838e2:	f102 0201 	add.w	r2, r2, #1
   838e6:	2afe      	cmp	r2, #254	; 0xfe
   838e8:	d251      	bcs.n	8398e <__addsf3+0x136>
   838ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   838ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   838f2:	bf08      	it	eq
   838f4:	f020 0001 	biceq.w	r0, r0, #1
   838f8:	ea40 0003 	orr.w	r0, r0, r3
   838fc:	4770      	bx	lr
   838fe:	0049      	lsls	r1, r1, #1
   83900:	eb40 0000 	adc.w	r0, r0, r0
   83904:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   83908:	f1a2 0201 	sub.w	r2, r2, #1
   8390c:	d1ed      	bne.n	838ea <__addsf3+0x92>
   8390e:	fab0 fc80 	clz	ip, r0
   83912:	f1ac 0c08 	sub.w	ip, ip, #8
   83916:	ebb2 020c 	subs.w	r2, r2, ip
   8391a:	fa00 f00c 	lsl.w	r0, r0, ip
   8391e:	bfaa      	itet	ge
   83920:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   83924:	4252      	neglt	r2, r2
   83926:	4318      	orrge	r0, r3
   83928:	bfbc      	itt	lt
   8392a:	40d0      	lsrlt	r0, r2
   8392c:	4318      	orrlt	r0, r3
   8392e:	4770      	bx	lr
   83930:	f092 0f00 	teq	r2, #0
   83934:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   83938:	bf06      	itte	eq
   8393a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8393e:	3201      	addeq	r2, #1
   83940:	3b01      	subne	r3, #1
   83942:	e7b5      	b.n	838b0 <__addsf3+0x58>
   83944:	ea4f 0341 	mov.w	r3, r1, lsl #1
   83948:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   8394c:	bf18      	it	ne
   8394e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   83952:	d021      	beq.n	83998 <__addsf3+0x140>
   83954:	ea92 0f03 	teq	r2, r3
   83958:	d004      	beq.n	83964 <__addsf3+0x10c>
   8395a:	f092 0f00 	teq	r2, #0
   8395e:	bf08      	it	eq
   83960:	4608      	moveq	r0, r1
   83962:	4770      	bx	lr
   83964:	ea90 0f01 	teq	r0, r1
   83968:	bf1c      	itt	ne
   8396a:	2000      	movne	r0, #0
   8396c:	4770      	bxne	lr
   8396e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   83972:	d104      	bne.n	8397e <__addsf3+0x126>
   83974:	0040      	lsls	r0, r0, #1
   83976:	bf28      	it	cs
   83978:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   8397c:	4770      	bx	lr
   8397e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   83982:	bf3c      	itt	cc
   83984:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   83988:	4770      	bxcc	lr
   8398a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8398e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   83992:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83996:	4770      	bx	lr
   83998:	ea7f 6222 	mvns.w	r2, r2, asr #24
   8399c:	bf16      	itet	ne
   8399e:	4608      	movne	r0, r1
   839a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   839a4:	4601      	movne	r1, r0
   839a6:	0242      	lsls	r2, r0, #9
   839a8:	bf06      	itte	eq
   839aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   839ae:	ea90 0f01 	teqeq	r0, r1
   839b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   839b6:	4770      	bx	lr

000839b8 <__aeabi_ui2f>:
   839b8:	f04f 0300 	mov.w	r3, #0
   839bc:	e004      	b.n	839c8 <__aeabi_i2f+0x8>
   839be:	bf00      	nop

000839c0 <__aeabi_i2f>:
   839c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   839c4:	bf48      	it	mi
   839c6:	4240      	negmi	r0, r0
   839c8:	ea5f 0c00 	movs.w	ip, r0
   839cc:	bf08      	it	eq
   839ce:	4770      	bxeq	lr
   839d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   839d4:	4601      	mov	r1, r0
   839d6:	f04f 0000 	mov.w	r0, #0
   839da:	e01c      	b.n	83a16 <__aeabi_l2f+0x2a>

000839dc <__aeabi_ul2f>:
   839dc:	ea50 0201 	orrs.w	r2, r0, r1
   839e0:	bf08      	it	eq
   839e2:	4770      	bxeq	lr
   839e4:	f04f 0300 	mov.w	r3, #0
   839e8:	e00a      	b.n	83a00 <__aeabi_l2f+0x14>
   839ea:	bf00      	nop

000839ec <__aeabi_l2f>:
   839ec:	ea50 0201 	orrs.w	r2, r0, r1
   839f0:	bf08      	it	eq
   839f2:	4770      	bxeq	lr
   839f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   839f8:	d502      	bpl.n	83a00 <__aeabi_l2f+0x14>
   839fa:	4240      	negs	r0, r0
   839fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83a00:	ea5f 0c01 	movs.w	ip, r1
   83a04:	bf02      	ittt	eq
   83a06:	4684      	moveq	ip, r0
   83a08:	4601      	moveq	r1, r0
   83a0a:	2000      	moveq	r0, #0
   83a0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   83a10:	bf08      	it	eq
   83a12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   83a16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   83a1a:	fabc f28c 	clz	r2, ip
   83a1e:	3a08      	subs	r2, #8
   83a20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   83a24:	db10      	blt.n	83a48 <__aeabi_l2f+0x5c>
   83a26:	fa01 fc02 	lsl.w	ip, r1, r2
   83a2a:	4463      	add	r3, ip
   83a2c:	fa00 fc02 	lsl.w	ip, r0, r2
   83a30:	f1c2 0220 	rsb	r2, r2, #32
   83a34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83a38:	fa20 f202 	lsr.w	r2, r0, r2
   83a3c:	eb43 0002 	adc.w	r0, r3, r2
   83a40:	bf08      	it	eq
   83a42:	f020 0001 	biceq.w	r0, r0, #1
   83a46:	4770      	bx	lr
   83a48:	f102 0220 	add.w	r2, r2, #32
   83a4c:	fa01 fc02 	lsl.w	ip, r1, r2
   83a50:	f1c2 0220 	rsb	r2, r2, #32
   83a54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   83a58:	fa21 f202 	lsr.w	r2, r1, r2
   83a5c:	eb43 0002 	adc.w	r0, r3, r2
   83a60:	bf08      	it	eq
   83a62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   83a66:	4770      	bx	lr

00083a68 <__aeabi_fmul>:
   83a68:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83a6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   83a70:	bf1e      	ittt	ne
   83a72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   83a76:	ea92 0f0c 	teqne	r2, ip
   83a7a:	ea93 0f0c 	teqne	r3, ip
   83a7e:	d06f      	beq.n	83b60 <__aeabi_fmul+0xf8>
   83a80:	441a      	add	r2, r3
   83a82:	ea80 0c01 	eor.w	ip, r0, r1
   83a86:	0240      	lsls	r0, r0, #9
   83a88:	bf18      	it	ne
   83a8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   83a8e:	d01e      	beq.n	83ace <__aeabi_fmul+0x66>
   83a90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   83a94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   83a98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   83a9c:	fba0 3101 	umull	r3, r1, r0, r1
   83aa0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   83aa4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   83aa8:	bf3e      	ittt	cc
   83aaa:	0049      	lslcc	r1, r1, #1
   83aac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   83ab0:	005b      	lslcc	r3, r3, #1
   83ab2:	ea40 0001 	orr.w	r0, r0, r1
   83ab6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   83aba:	2afd      	cmp	r2, #253	; 0xfd
   83abc:	d81d      	bhi.n	83afa <__aeabi_fmul+0x92>
   83abe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   83ac2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   83ac6:	bf08      	it	eq
   83ac8:	f020 0001 	biceq.w	r0, r0, #1
   83acc:	4770      	bx	lr
   83ace:	f090 0f00 	teq	r0, #0
   83ad2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   83ad6:	bf08      	it	eq
   83ad8:	0249      	lsleq	r1, r1, #9
   83ada:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   83ade:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   83ae2:	3a7f      	subs	r2, #127	; 0x7f
   83ae4:	bfc2      	ittt	gt
   83ae6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   83aea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   83aee:	4770      	bxgt	lr
   83af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83af4:	f04f 0300 	mov.w	r3, #0
   83af8:	3a01      	subs	r2, #1
   83afa:	dc5d      	bgt.n	83bb8 <__aeabi_fmul+0x150>
   83afc:	f112 0f19 	cmn.w	r2, #25
   83b00:	bfdc      	itt	le
   83b02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   83b06:	4770      	bxle	lr
   83b08:	f1c2 0200 	rsb	r2, r2, #0
   83b0c:	0041      	lsls	r1, r0, #1
   83b0e:	fa21 f102 	lsr.w	r1, r1, r2
   83b12:	f1c2 0220 	rsb	r2, r2, #32
   83b16:	fa00 fc02 	lsl.w	ip, r0, r2
   83b1a:	ea5f 0031 	movs.w	r0, r1, rrx
   83b1e:	f140 0000 	adc.w	r0, r0, #0
   83b22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   83b26:	bf08      	it	eq
   83b28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   83b2c:	4770      	bx	lr
   83b2e:	f092 0f00 	teq	r2, #0
   83b32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   83b36:	bf02      	ittt	eq
   83b38:	0040      	lsleq	r0, r0, #1
   83b3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   83b3e:	3a01      	subeq	r2, #1
   83b40:	d0f9      	beq.n	83b36 <__aeabi_fmul+0xce>
   83b42:	ea40 000c 	orr.w	r0, r0, ip
   83b46:	f093 0f00 	teq	r3, #0
   83b4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   83b4e:	bf02      	ittt	eq
   83b50:	0049      	lsleq	r1, r1, #1
   83b52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   83b56:	3b01      	subeq	r3, #1
   83b58:	d0f9      	beq.n	83b4e <__aeabi_fmul+0xe6>
   83b5a:	ea41 010c 	orr.w	r1, r1, ip
   83b5e:	e78f      	b.n	83a80 <__aeabi_fmul+0x18>
   83b60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   83b64:	ea92 0f0c 	teq	r2, ip
   83b68:	bf18      	it	ne
   83b6a:	ea93 0f0c 	teqne	r3, ip
   83b6e:	d00a      	beq.n	83b86 <__aeabi_fmul+0x11e>
   83b70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   83b74:	bf18      	it	ne
   83b76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   83b7a:	d1d8      	bne.n	83b2e <__aeabi_fmul+0xc6>
   83b7c:	ea80 0001 	eor.w	r0, r0, r1
   83b80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   83b84:	4770      	bx	lr
   83b86:	f090 0f00 	teq	r0, #0
   83b8a:	bf17      	itett	ne
   83b8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   83b90:	4608      	moveq	r0, r1
   83b92:	f091 0f00 	teqne	r1, #0
   83b96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   83b9a:	d014      	beq.n	83bc6 <__aeabi_fmul+0x15e>
   83b9c:	ea92 0f0c 	teq	r2, ip
   83ba0:	d101      	bne.n	83ba6 <__aeabi_fmul+0x13e>
   83ba2:	0242      	lsls	r2, r0, #9
   83ba4:	d10f      	bne.n	83bc6 <__aeabi_fmul+0x15e>
   83ba6:	ea93 0f0c 	teq	r3, ip
   83baa:	d103      	bne.n	83bb4 <__aeabi_fmul+0x14c>
   83bac:	024b      	lsls	r3, r1, #9
   83bae:	bf18      	it	ne
   83bb0:	4608      	movne	r0, r1
   83bb2:	d108      	bne.n	83bc6 <__aeabi_fmul+0x15e>
   83bb4:	ea80 0001 	eor.w	r0, r0, r1
   83bb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   83bbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   83bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83bc4:	4770      	bx	lr
   83bc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   83bca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   83bce:	4770      	bx	lr

00083bd0 <__aeabi_fdiv>:
   83bd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83bd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   83bd8:	bf1e      	ittt	ne
   83bda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   83bde:	ea92 0f0c 	teqne	r2, ip
   83be2:	ea93 0f0c 	teqne	r3, ip
   83be6:	d069      	beq.n	83cbc <__aeabi_fdiv+0xec>
   83be8:	eba2 0203 	sub.w	r2, r2, r3
   83bec:	ea80 0c01 	eor.w	ip, r0, r1
   83bf0:	0249      	lsls	r1, r1, #9
   83bf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
   83bf6:	d037      	beq.n	83c68 <__aeabi_fdiv+0x98>
   83bf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   83bfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   83c00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   83c04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   83c08:	428b      	cmp	r3, r1
   83c0a:	bf38      	it	cc
   83c0c:	005b      	lslcc	r3, r3, #1
   83c0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   83c12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   83c16:	428b      	cmp	r3, r1
   83c18:	bf24      	itt	cs
   83c1a:	1a5b      	subcs	r3, r3, r1
   83c1c:	ea40 000c 	orrcs.w	r0, r0, ip
   83c20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   83c24:	bf24      	itt	cs
   83c26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   83c2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83c2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   83c32:	bf24      	itt	cs
   83c34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   83c38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83c3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   83c40:	bf24      	itt	cs
   83c42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   83c46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83c4a:	011b      	lsls	r3, r3, #4
   83c4c:	bf18      	it	ne
   83c4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   83c52:	d1e0      	bne.n	83c16 <__aeabi_fdiv+0x46>
   83c54:	2afd      	cmp	r2, #253	; 0xfd
   83c56:	f63f af50 	bhi.w	83afa <__aeabi_fmul+0x92>
   83c5a:	428b      	cmp	r3, r1
   83c5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   83c60:	bf08      	it	eq
   83c62:	f020 0001 	biceq.w	r0, r0, #1
   83c66:	4770      	bx	lr
   83c68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   83c6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   83c70:	327f      	adds	r2, #127	; 0x7f
   83c72:	bfc2      	ittt	gt
   83c74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   83c78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   83c7c:	4770      	bxgt	lr
   83c7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83c82:	f04f 0300 	mov.w	r3, #0
   83c86:	3a01      	subs	r2, #1
   83c88:	e737      	b.n	83afa <__aeabi_fmul+0x92>
   83c8a:	f092 0f00 	teq	r2, #0
   83c8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   83c92:	bf02      	ittt	eq
   83c94:	0040      	lsleq	r0, r0, #1
   83c96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   83c9a:	3a01      	subeq	r2, #1
   83c9c:	d0f9      	beq.n	83c92 <__aeabi_fdiv+0xc2>
   83c9e:	ea40 000c 	orr.w	r0, r0, ip
   83ca2:	f093 0f00 	teq	r3, #0
   83ca6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   83caa:	bf02      	ittt	eq
   83cac:	0049      	lsleq	r1, r1, #1
   83cae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   83cb2:	3b01      	subeq	r3, #1
   83cb4:	d0f9      	beq.n	83caa <__aeabi_fdiv+0xda>
   83cb6:	ea41 010c 	orr.w	r1, r1, ip
   83cba:	e795      	b.n	83be8 <__aeabi_fdiv+0x18>
   83cbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   83cc0:	ea92 0f0c 	teq	r2, ip
   83cc4:	d108      	bne.n	83cd8 <__aeabi_fdiv+0x108>
   83cc6:	0242      	lsls	r2, r0, #9
   83cc8:	f47f af7d 	bne.w	83bc6 <__aeabi_fmul+0x15e>
   83ccc:	ea93 0f0c 	teq	r3, ip
   83cd0:	f47f af70 	bne.w	83bb4 <__aeabi_fmul+0x14c>
   83cd4:	4608      	mov	r0, r1
   83cd6:	e776      	b.n	83bc6 <__aeabi_fmul+0x15e>
   83cd8:	ea93 0f0c 	teq	r3, ip
   83cdc:	d104      	bne.n	83ce8 <__aeabi_fdiv+0x118>
   83cde:	024b      	lsls	r3, r1, #9
   83ce0:	f43f af4c 	beq.w	83b7c <__aeabi_fmul+0x114>
   83ce4:	4608      	mov	r0, r1
   83ce6:	e76e      	b.n	83bc6 <__aeabi_fmul+0x15e>
   83ce8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   83cec:	bf18      	it	ne
   83cee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   83cf2:	d1ca      	bne.n	83c8a <__aeabi_fdiv+0xba>
   83cf4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   83cf8:	f47f af5c 	bne.w	83bb4 <__aeabi_fmul+0x14c>
   83cfc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   83d00:	f47f af3c 	bne.w	83b7c <__aeabi_fmul+0x114>
   83d04:	e75f      	b.n	83bc6 <__aeabi_fmul+0x15e>
   83d06:	bf00      	nop

00083d08 <__gesf2>:
   83d08:	f04f 3cff 	mov.w	ip, #4294967295
   83d0c:	e006      	b.n	83d1c <__cmpsf2+0x4>
   83d0e:	bf00      	nop

00083d10 <__lesf2>:
   83d10:	f04f 0c01 	mov.w	ip, #1
   83d14:	e002      	b.n	83d1c <__cmpsf2+0x4>
   83d16:	bf00      	nop

00083d18 <__cmpsf2>:
   83d18:	f04f 0c01 	mov.w	ip, #1
   83d1c:	f84d cd04 	str.w	ip, [sp, #-4]!
   83d20:	ea4f 0240 	mov.w	r2, r0, lsl #1
   83d24:	ea4f 0341 	mov.w	r3, r1, lsl #1
   83d28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   83d2c:	bf18      	it	ne
   83d2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   83d32:	d011      	beq.n	83d58 <__cmpsf2+0x40>
   83d34:	b001      	add	sp, #4
   83d36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   83d3a:	bf18      	it	ne
   83d3c:	ea90 0f01 	teqne	r0, r1
   83d40:	bf58      	it	pl
   83d42:	ebb2 0003 	subspl.w	r0, r2, r3
   83d46:	bf88      	it	hi
   83d48:	17c8      	asrhi	r0, r1, #31
   83d4a:	bf38      	it	cc
   83d4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   83d50:	bf18      	it	ne
   83d52:	f040 0001 	orrne.w	r0, r0, #1
   83d56:	4770      	bx	lr
   83d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   83d5c:	d102      	bne.n	83d64 <__cmpsf2+0x4c>
   83d5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   83d62:	d105      	bne.n	83d70 <__cmpsf2+0x58>
   83d64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   83d68:	d1e4      	bne.n	83d34 <__cmpsf2+0x1c>
   83d6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   83d6e:	d0e1      	beq.n	83d34 <__cmpsf2+0x1c>
   83d70:	f85d 0b04 	ldr.w	r0, [sp], #4
   83d74:	4770      	bx	lr
   83d76:	bf00      	nop

00083d78 <__aeabi_cfrcmple>:
   83d78:	4684      	mov	ip, r0
   83d7a:	4608      	mov	r0, r1
   83d7c:	4661      	mov	r1, ip
   83d7e:	e7ff      	b.n	83d80 <__aeabi_cfcmpeq>

00083d80 <__aeabi_cfcmpeq>:
   83d80:	b50f      	push	{r0, r1, r2, r3, lr}
   83d82:	f7ff ffc9 	bl	83d18 <__cmpsf2>
   83d86:	2800      	cmp	r0, #0
   83d88:	bf48      	it	mi
   83d8a:	f110 0f00 	cmnmi.w	r0, #0
   83d8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00083d90 <__aeabi_fcmpeq>:
   83d90:	f84d ed08 	str.w	lr, [sp, #-8]!
   83d94:	f7ff fff4 	bl	83d80 <__aeabi_cfcmpeq>
   83d98:	bf0c      	ite	eq
   83d9a:	2001      	moveq	r0, #1
   83d9c:	2000      	movne	r0, #0
   83d9e:	f85d fb08 	ldr.w	pc, [sp], #8
   83da2:	bf00      	nop

00083da4 <__aeabi_fcmplt>:
   83da4:	f84d ed08 	str.w	lr, [sp, #-8]!
   83da8:	f7ff ffea 	bl	83d80 <__aeabi_cfcmpeq>
   83dac:	bf34      	ite	cc
   83dae:	2001      	movcc	r0, #1
   83db0:	2000      	movcs	r0, #0
   83db2:	f85d fb08 	ldr.w	pc, [sp], #8
   83db6:	bf00      	nop

00083db8 <__aeabi_fcmple>:
   83db8:	f84d ed08 	str.w	lr, [sp, #-8]!
   83dbc:	f7ff ffe0 	bl	83d80 <__aeabi_cfcmpeq>
   83dc0:	bf94      	ite	ls
   83dc2:	2001      	movls	r0, #1
   83dc4:	2000      	movhi	r0, #0
   83dc6:	f85d fb08 	ldr.w	pc, [sp], #8
   83dca:	bf00      	nop

00083dcc <__aeabi_fcmpge>:
   83dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   83dd0:	f7ff ffd2 	bl	83d78 <__aeabi_cfrcmple>
   83dd4:	bf94      	ite	ls
   83dd6:	2001      	movls	r0, #1
   83dd8:	2000      	movhi	r0, #0
   83dda:	f85d fb08 	ldr.w	pc, [sp], #8
   83dde:	bf00      	nop

00083de0 <__aeabi_fcmpgt>:
   83de0:	f84d ed08 	str.w	lr, [sp, #-8]!
   83de4:	f7ff ffc8 	bl	83d78 <__aeabi_cfrcmple>
   83de8:	bf34      	ite	cc
   83dea:	2001      	movcc	r0, #1
   83dec:	2000      	movcs	r0, #0
   83dee:	f85d fb08 	ldr.w	pc, [sp], #8
   83df2:	bf00      	nop

00083df4 <__aeabi_f2iz>:
   83df4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   83df8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   83dfc:	d30f      	bcc.n	83e1e <__aeabi_f2iz+0x2a>
   83dfe:	f04f 039e 	mov.w	r3, #158	; 0x9e
   83e02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   83e06:	d90d      	bls.n	83e24 <__aeabi_f2iz+0x30>
   83e08:	ea4f 2300 	mov.w	r3, r0, lsl #8
   83e0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83e10:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   83e14:	fa23 f002 	lsr.w	r0, r3, r2
   83e18:	bf18      	it	ne
   83e1a:	4240      	negne	r0, r0
   83e1c:	4770      	bx	lr
   83e1e:	f04f 0000 	mov.w	r0, #0
   83e22:	4770      	bx	lr
   83e24:	f112 0f61 	cmn.w	r2, #97	; 0x61
   83e28:	d101      	bne.n	83e2e <__aeabi_f2iz+0x3a>
   83e2a:	0242      	lsls	r2, r0, #9
   83e2c:	d105      	bne.n	83e3a <__aeabi_f2iz+0x46>
   83e2e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   83e32:	bf08      	it	eq
   83e34:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   83e38:	4770      	bx	lr
   83e3a:	f04f 0000 	mov.w	r0, #0
   83e3e:	4770      	bx	lr

00083e40 <__libc_init_array>:
   83e40:	b570      	push	{r4, r5, r6, lr}
   83e42:	4e0f      	ldr	r6, [pc, #60]	; (83e80 <__libc_init_array+0x40>)
   83e44:	4d0f      	ldr	r5, [pc, #60]	; (83e84 <__libc_init_array+0x44>)
   83e46:	1b76      	subs	r6, r6, r5
   83e48:	10b6      	asrs	r6, r6, #2
   83e4a:	bf18      	it	ne
   83e4c:	2400      	movne	r4, #0
   83e4e:	d005      	beq.n	83e5c <__libc_init_array+0x1c>
   83e50:	3401      	adds	r4, #1
   83e52:	f855 3b04 	ldr.w	r3, [r5], #4
   83e56:	4798      	blx	r3
   83e58:	42a6      	cmp	r6, r4
   83e5a:	d1f9      	bne.n	83e50 <__libc_init_array+0x10>
   83e5c:	4e0a      	ldr	r6, [pc, #40]	; (83e88 <__libc_init_array+0x48>)
   83e5e:	4d0b      	ldr	r5, [pc, #44]	; (83e8c <__libc_init_array+0x4c>)
   83e60:	f004 fc9a 	bl	88798 <_init>
   83e64:	1b76      	subs	r6, r6, r5
   83e66:	10b6      	asrs	r6, r6, #2
   83e68:	bf18      	it	ne
   83e6a:	2400      	movne	r4, #0
   83e6c:	d006      	beq.n	83e7c <__libc_init_array+0x3c>
   83e6e:	3401      	adds	r4, #1
   83e70:	f855 3b04 	ldr.w	r3, [r5], #4
   83e74:	4798      	blx	r3
   83e76:	42a6      	cmp	r6, r4
   83e78:	d1f9      	bne.n	83e6e <__libc_init_array+0x2e>
   83e7a:	bd70      	pop	{r4, r5, r6, pc}
   83e7c:	bd70      	pop	{r4, r5, r6, pc}
   83e7e:	bf00      	nop
   83e80:	000887a4 	.word	0x000887a4
   83e84:	000887a4 	.word	0x000887a4
   83e88:	000887ac 	.word	0x000887ac
   83e8c:	000887a4 	.word	0x000887a4

00083e90 <memcpy>:
   83e90:	4684      	mov	ip, r0
   83e92:	ea41 0300 	orr.w	r3, r1, r0
   83e96:	f013 0303 	ands.w	r3, r3, #3
   83e9a:	d149      	bne.n	83f30 <memcpy+0xa0>
   83e9c:	3a40      	subs	r2, #64	; 0x40
   83e9e:	d323      	bcc.n	83ee8 <memcpy+0x58>
   83ea0:	680b      	ldr	r3, [r1, #0]
   83ea2:	6003      	str	r3, [r0, #0]
   83ea4:	684b      	ldr	r3, [r1, #4]
   83ea6:	6043      	str	r3, [r0, #4]
   83ea8:	688b      	ldr	r3, [r1, #8]
   83eaa:	6083      	str	r3, [r0, #8]
   83eac:	68cb      	ldr	r3, [r1, #12]
   83eae:	60c3      	str	r3, [r0, #12]
   83eb0:	690b      	ldr	r3, [r1, #16]
   83eb2:	6103      	str	r3, [r0, #16]
   83eb4:	694b      	ldr	r3, [r1, #20]
   83eb6:	6143      	str	r3, [r0, #20]
   83eb8:	698b      	ldr	r3, [r1, #24]
   83eba:	6183      	str	r3, [r0, #24]
   83ebc:	69cb      	ldr	r3, [r1, #28]
   83ebe:	61c3      	str	r3, [r0, #28]
   83ec0:	6a0b      	ldr	r3, [r1, #32]
   83ec2:	6203      	str	r3, [r0, #32]
   83ec4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83ec6:	6243      	str	r3, [r0, #36]	; 0x24
   83ec8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83eca:	6283      	str	r3, [r0, #40]	; 0x28
   83ecc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83ece:	62c3      	str	r3, [r0, #44]	; 0x2c
   83ed0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83ed2:	6303      	str	r3, [r0, #48]	; 0x30
   83ed4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83ed6:	6343      	str	r3, [r0, #52]	; 0x34
   83ed8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83eda:	6383      	str	r3, [r0, #56]	; 0x38
   83edc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83ede:	63c3      	str	r3, [r0, #60]	; 0x3c
   83ee0:	3040      	adds	r0, #64	; 0x40
   83ee2:	3140      	adds	r1, #64	; 0x40
   83ee4:	3a40      	subs	r2, #64	; 0x40
   83ee6:	d2db      	bcs.n	83ea0 <memcpy+0x10>
   83ee8:	3230      	adds	r2, #48	; 0x30
   83eea:	d30b      	bcc.n	83f04 <memcpy+0x74>
   83eec:	680b      	ldr	r3, [r1, #0]
   83eee:	6003      	str	r3, [r0, #0]
   83ef0:	684b      	ldr	r3, [r1, #4]
   83ef2:	6043      	str	r3, [r0, #4]
   83ef4:	688b      	ldr	r3, [r1, #8]
   83ef6:	6083      	str	r3, [r0, #8]
   83ef8:	68cb      	ldr	r3, [r1, #12]
   83efa:	60c3      	str	r3, [r0, #12]
   83efc:	3010      	adds	r0, #16
   83efe:	3110      	adds	r1, #16
   83f00:	3a10      	subs	r2, #16
   83f02:	d2f3      	bcs.n	83eec <memcpy+0x5c>
   83f04:	320c      	adds	r2, #12
   83f06:	d305      	bcc.n	83f14 <memcpy+0x84>
   83f08:	f851 3b04 	ldr.w	r3, [r1], #4
   83f0c:	f840 3b04 	str.w	r3, [r0], #4
   83f10:	3a04      	subs	r2, #4
   83f12:	d2f9      	bcs.n	83f08 <memcpy+0x78>
   83f14:	3204      	adds	r2, #4
   83f16:	d008      	beq.n	83f2a <memcpy+0x9a>
   83f18:	07d2      	lsls	r2, r2, #31
   83f1a:	bf1c      	itt	ne
   83f1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83f20:	f800 3b01 	strbne.w	r3, [r0], #1
   83f24:	d301      	bcc.n	83f2a <memcpy+0x9a>
   83f26:	880b      	ldrh	r3, [r1, #0]
   83f28:	8003      	strh	r3, [r0, #0]
   83f2a:	4660      	mov	r0, ip
   83f2c:	4770      	bx	lr
   83f2e:	bf00      	nop
   83f30:	2a08      	cmp	r2, #8
   83f32:	d313      	bcc.n	83f5c <memcpy+0xcc>
   83f34:	078b      	lsls	r3, r1, #30
   83f36:	d0b1      	beq.n	83e9c <memcpy+0xc>
   83f38:	f010 0303 	ands.w	r3, r0, #3
   83f3c:	d0ae      	beq.n	83e9c <memcpy+0xc>
   83f3e:	f1c3 0304 	rsb	r3, r3, #4
   83f42:	1ad2      	subs	r2, r2, r3
   83f44:	07db      	lsls	r3, r3, #31
   83f46:	bf1c      	itt	ne
   83f48:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83f4c:	f800 3b01 	strbne.w	r3, [r0], #1
   83f50:	d3a4      	bcc.n	83e9c <memcpy+0xc>
   83f52:	f831 3b02 	ldrh.w	r3, [r1], #2
   83f56:	f820 3b02 	strh.w	r3, [r0], #2
   83f5a:	e79f      	b.n	83e9c <memcpy+0xc>
   83f5c:	3a04      	subs	r2, #4
   83f5e:	d3d9      	bcc.n	83f14 <memcpy+0x84>
   83f60:	3a01      	subs	r2, #1
   83f62:	f811 3b01 	ldrb.w	r3, [r1], #1
   83f66:	f800 3b01 	strb.w	r3, [r0], #1
   83f6a:	d2f9      	bcs.n	83f60 <memcpy+0xd0>
   83f6c:	780b      	ldrb	r3, [r1, #0]
   83f6e:	7003      	strb	r3, [r0, #0]
   83f70:	784b      	ldrb	r3, [r1, #1]
   83f72:	7043      	strb	r3, [r0, #1]
   83f74:	788b      	ldrb	r3, [r1, #2]
   83f76:	7083      	strb	r3, [r0, #2]
   83f78:	4660      	mov	r0, ip
   83f7a:	4770      	bx	lr

00083f7c <memset>:
   83f7c:	b470      	push	{r4, r5, r6}
   83f7e:	0786      	lsls	r6, r0, #30
   83f80:	d046      	beq.n	84010 <memset+0x94>
   83f82:	1e54      	subs	r4, r2, #1
   83f84:	2a00      	cmp	r2, #0
   83f86:	d041      	beq.n	8400c <memset+0x90>
   83f88:	b2ca      	uxtb	r2, r1
   83f8a:	4603      	mov	r3, r0
   83f8c:	e002      	b.n	83f94 <memset+0x18>
   83f8e:	f114 34ff 	adds.w	r4, r4, #4294967295
   83f92:	d33b      	bcc.n	8400c <memset+0x90>
   83f94:	f803 2b01 	strb.w	r2, [r3], #1
   83f98:	079d      	lsls	r5, r3, #30
   83f9a:	d1f8      	bne.n	83f8e <memset+0x12>
   83f9c:	2c03      	cmp	r4, #3
   83f9e:	d92e      	bls.n	83ffe <memset+0x82>
   83fa0:	b2cd      	uxtb	r5, r1
   83fa2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83fa6:	2c0f      	cmp	r4, #15
   83fa8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83fac:	d919      	bls.n	83fe2 <memset+0x66>
   83fae:	4626      	mov	r6, r4
   83fb0:	f103 0210 	add.w	r2, r3, #16
   83fb4:	3e10      	subs	r6, #16
   83fb6:	2e0f      	cmp	r6, #15
   83fb8:	f842 5c10 	str.w	r5, [r2, #-16]
   83fbc:	f842 5c0c 	str.w	r5, [r2, #-12]
   83fc0:	f842 5c08 	str.w	r5, [r2, #-8]
   83fc4:	f842 5c04 	str.w	r5, [r2, #-4]
   83fc8:	f102 0210 	add.w	r2, r2, #16
   83fcc:	d8f2      	bhi.n	83fb4 <memset+0x38>
   83fce:	f1a4 0210 	sub.w	r2, r4, #16
   83fd2:	f022 020f 	bic.w	r2, r2, #15
   83fd6:	f004 040f 	and.w	r4, r4, #15
   83fda:	3210      	adds	r2, #16
   83fdc:	2c03      	cmp	r4, #3
   83fde:	4413      	add	r3, r2
   83fe0:	d90d      	bls.n	83ffe <memset+0x82>
   83fe2:	461e      	mov	r6, r3
   83fe4:	4622      	mov	r2, r4
   83fe6:	3a04      	subs	r2, #4
   83fe8:	2a03      	cmp	r2, #3
   83fea:	f846 5b04 	str.w	r5, [r6], #4
   83fee:	d8fa      	bhi.n	83fe6 <memset+0x6a>
   83ff0:	1f22      	subs	r2, r4, #4
   83ff2:	f022 0203 	bic.w	r2, r2, #3
   83ff6:	3204      	adds	r2, #4
   83ff8:	4413      	add	r3, r2
   83ffa:	f004 0403 	and.w	r4, r4, #3
   83ffe:	b12c      	cbz	r4, 8400c <memset+0x90>
   84000:	b2c9      	uxtb	r1, r1
   84002:	441c      	add	r4, r3
   84004:	f803 1b01 	strb.w	r1, [r3], #1
   84008:	429c      	cmp	r4, r3
   8400a:	d1fb      	bne.n	84004 <memset+0x88>
   8400c:	bc70      	pop	{r4, r5, r6}
   8400e:	4770      	bx	lr
   84010:	4614      	mov	r4, r2
   84012:	4603      	mov	r3, r0
   84014:	e7c2      	b.n	83f9c <memset+0x20>
   84016:	bf00      	nop

00084018 <sprintf>:
   84018:	b40e      	push	{r1, r2, r3}
   8401a:	4601      	mov	r1, r0
   8401c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8401e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   84022:	f44f 7702 	mov.w	r7, #520	; 0x208
   84026:	f64f 76ff 	movw	r6, #65535	; 0xffff
   8402a:	b09c      	sub	sp, #112	; 0x70
   8402c:	ac21      	add	r4, sp, #132	; 0x84
   8402e:	f854 2b04 	ldr.w	r2, [r4], #4
   84032:	4b0b      	ldr	r3, [pc, #44]	; (84060 <sprintf+0x48>)
   84034:	9102      	str	r1, [sp, #8]
   84036:	9106      	str	r1, [sp, #24]
   84038:	6818      	ldr	r0, [r3, #0]
   8403a:	a902      	add	r1, sp, #8
   8403c:	4623      	mov	r3, r4
   8403e:	9401      	str	r4, [sp, #4]
   84040:	f8ad 7014 	strh.w	r7, [sp, #20]
   84044:	9504      	str	r5, [sp, #16]
   84046:	9507      	str	r5, [sp, #28]
   84048:	f8ad 6016 	strh.w	r6, [sp, #22]
   8404c:	f000 f838 	bl	840c0 <_svfprintf_r>
   84050:	2200      	movs	r2, #0
   84052:	9b02      	ldr	r3, [sp, #8]
   84054:	701a      	strb	r2, [r3, #0]
   84056:	b01c      	add	sp, #112	; 0x70
   84058:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   8405c:	b003      	add	sp, #12
   8405e:	4770      	bx	lr
   84060:	200701a0 	.word	0x200701a0

00084064 <strlen>:
   84064:	f020 0103 	bic.w	r1, r0, #3
   84068:	f010 0003 	ands.w	r0, r0, #3
   8406c:	f1c0 0000 	rsb	r0, r0, #0
   84070:	f851 3b04 	ldr.w	r3, [r1], #4
   84074:	f100 0c04 	add.w	ip, r0, #4
   84078:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8407c:	f06f 0200 	mvn.w	r2, #0
   84080:	bf1c      	itt	ne
   84082:	fa22 f20c 	lsrne.w	r2, r2, ip
   84086:	4313      	orrne	r3, r2
   84088:	f04f 0c01 	mov.w	ip, #1
   8408c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84090:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84094:	eba3 020c 	sub.w	r2, r3, ip
   84098:	ea22 0203 	bic.w	r2, r2, r3
   8409c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   840a0:	bf04      	itt	eq
   840a2:	f851 3b04 	ldreq.w	r3, [r1], #4
   840a6:	3004      	addeq	r0, #4
   840a8:	d0f4      	beq.n	84094 <strlen+0x30>
   840aa:	f1c2 0100 	rsb	r1, r2, #0
   840ae:	ea02 0201 	and.w	r2, r2, r1
   840b2:	fab2 f282 	clz	r2, r2
   840b6:	f1c2 021f 	rsb	r2, r2, #31
   840ba:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   840be:	4770      	bx	lr

000840c0 <_svfprintf_r>:
   840c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   840c4:	b0c3      	sub	sp, #268	; 0x10c
   840c6:	460c      	mov	r4, r1
   840c8:	910b      	str	r1, [sp, #44]	; 0x2c
   840ca:	4692      	mov	sl, r2
   840cc:	930f      	str	r3, [sp, #60]	; 0x3c
   840ce:	900c      	str	r0, [sp, #48]	; 0x30
   840d0:	f002 fa56 	bl	86580 <_localeconv_r>
   840d4:	6803      	ldr	r3, [r0, #0]
   840d6:	4618      	mov	r0, r3
   840d8:	931a      	str	r3, [sp, #104]	; 0x68
   840da:	f7ff ffc3 	bl	84064 <strlen>
   840de:	89a3      	ldrh	r3, [r4, #12]
   840e0:	9019      	str	r0, [sp, #100]	; 0x64
   840e2:	0619      	lsls	r1, r3, #24
   840e4:	d503      	bpl.n	840ee <_svfprintf_r+0x2e>
   840e6:	6923      	ldr	r3, [r4, #16]
   840e8:	2b00      	cmp	r3, #0
   840ea:	f001 8035 	beq.w	85158 <_svfprintf_r+0x1098>
   840ee:	2300      	movs	r3, #0
   840f0:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   840f4:	46c8      	mov	r8, r9
   840f6:	9315      	str	r3, [sp, #84]	; 0x54
   840f8:	9313      	str	r3, [sp, #76]	; 0x4c
   840fa:	9314      	str	r3, [sp, #80]	; 0x50
   840fc:	9318      	str	r3, [sp, #96]	; 0x60
   840fe:	931b      	str	r3, [sp, #108]	; 0x6c
   84100:	9309      	str	r3, [sp, #36]	; 0x24
   84102:	9316      	str	r3, [sp, #88]	; 0x58
   84104:	9317      	str	r3, [sp, #92]	; 0x5c
   84106:	9327      	str	r3, [sp, #156]	; 0x9c
   84108:	9326      	str	r3, [sp, #152]	; 0x98
   8410a:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   8410e:	f89a 3000 	ldrb.w	r3, [sl]
   84112:	4654      	mov	r4, sl
   84114:	b1eb      	cbz	r3, 84152 <_svfprintf_r+0x92>
   84116:	2b25      	cmp	r3, #37	; 0x25
   84118:	d102      	bne.n	84120 <_svfprintf_r+0x60>
   8411a:	e01a      	b.n	84152 <_svfprintf_r+0x92>
   8411c:	2b25      	cmp	r3, #37	; 0x25
   8411e:	d003      	beq.n	84128 <_svfprintf_r+0x68>
   84120:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   84124:	2b00      	cmp	r3, #0
   84126:	d1f9      	bne.n	8411c <_svfprintf_r+0x5c>
   84128:	eba4 050a 	sub.w	r5, r4, sl
   8412c:	b18d      	cbz	r5, 84152 <_svfprintf_r+0x92>
   8412e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84130:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84132:	3301      	adds	r3, #1
   84134:	442a      	add	r2, r5
   84136:	2b07      	cmp	r3, #7
   84138:	f8c8 a000 	str.w	sl, [r8]
   8413c:	f8c8 5004 	str.w	r5, [r8, #4]
   84140:	9227      	str	r2, [sp, #156]	; 0x9c
   84142:	9326      	str	r3, [sp, #152]	; 0x98
   84144:	f300 808a 	bgt.w	8425c <_svfprintf_r+0x19c>
   84148:	f108 0808 	add.w	r8, r8, #8
   8414c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8414e:	442b      	add	r3, r5
   84150:	9309      	str	r3, [sp, #36]	; 0x24
   84152:	7823      	ldrb	r3, [r4, #0]
   84154:	2b00      	cmp	r3, #0
   84156:	f000 8089 	beq.w	8426c <_svfprintf_r+0x1ac>
   8415a:	2300      	movs	r3, #0
   8415c:	f04f 30ff 	mov.w	r0, #4294967295
   84160:	461a      	mov	r2, r3
   84162:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84166:	4619      	mov	r1, r3
   84168:	930d      	str	r3, [sp, #52]	; 0x34
   8416a:	469b      	mov	fp, r3
   8416c:	7863      	ldrb	r3, [r4, #1]
   8416e:	f104 0a01 	add.w	sl, r4, #1
   84172:	900a      	str	r0, [sp, #40]	; 0x28
   84174:	f10a 0a01 	add.w	sl, sl, #1
   84178:	f1a3 0020 	sub.w	r0, r3, #32
   8417c:	2858      	cmp	r0, #88	; 0x58
   8417e:	f200 83b7 	bhi.w	848f0 <_svfprintf_r+0x830>
   84182:	e8df f010 	tbh	[pc, r0, lsl #1]
   84186:	034c      	.short	0x034c
   84188:	03b503b5 	.word	0x03b503b5
   8418c:	03b50354 	.word	0x03b50354
   84190:	03b503b5 	.word	0x03b503b5
   84194:	03b503b5 	.word	0x03b503b5
   84198:	005903b5 	.word	0x005903b5
   8419c:	03b50359 	.word	0x03b50359
   841a0:	02140066 	.word	0x02140066
   841a4:	022f03b5 	.word	0x022f03b5
   841a8:	03a503a5 	.word	0x03a503a5
   841ac:	03a503a5 	.word	0x03a503a5
   841b0:	03a503a5 	.word	0x03a503a5
   841b4:	03a503a5 	.word	0x03a503a5
   841b8:	03b503a5 	.word	0x03b503a5
   841bc:	03b503b5 	.word	0x03b503b5
   841c0:	03b503b5 	.word	0x03b503b5
   841c4:	03b503b5 	.word	0x03b503b5
   841c8:	03b503b5 	.word	0x03b503b5
   841cc:	028b03b5 	.word	0x028b03b5
   841d0:	03b502d3 	.word	0x03b502d3
   841d4:	03b502d3 	.word	0x03b502d3
   841d8:	03b503b5 	.word	0x03b503b5
   841dc:	031b03b5 	.word	0x031b03b5
   841e0:	03b503b5 	.word	0x03b503b5
   841e4:	03b50320 	.word	0x03b50320
   841e8:	03b503b5 	.word	0x03b503b5
   841ec:	03b503b5 	.word	0x03b503b5
   841f0:	03b50234 	.word	0x03b50234
   841f4:	024b03b5 	.word	0x024b03b5
   841f8:	03b503b5 	.word	0x03b503b5
   841fc:	03b503b5 	.word	0x03b503b5
   84200:	03b503b5 	.word	0x03b503b5
   84204:	03b503b5 	.word	0x03b503b5
   84208:	03b503b5 	.word	0x03b503b5
   8420c:	039e0276 	.word	0x039e0276
   84210:	02d302d3 	.word	0x02d302d3
   84214:	036302d3 	.word	0x036302d3
   84218:	03b5039e 	.word	0x03b5039e
   8421c:	036803b5 	.word	0x036803b5
   84220:	037503b5 	.word	0x037503b5
   84224:	038c01dd 	.word	0x038c01dd
   84228:	03b5035e 	.word	0x03b5035e
   8422c:	03b501f2 	.word	0x03b501f2
   84230:	03b50087 	.word	0x03b50087
   84234:	033203b5 	.word	0x033203b5
   84238:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8423a:	6823      	ldr	r3, [r4, #0]
   8423c:	4618      	mov	r0, r3
   8423e:	930d      	str	r3, [sp, #52]	; 0x34
   84240:	4623      	mov	r3, r4
   84242:	2800      	cmp	r0, #0
   84244:	f103 0304 	add.w	r3, r3, #4
   84248:	930f      	str	r3, [sp, #60]	; 0x3c
   8424a:	da04      	bge.n	84256 <_svfprintf_r+0x196>
   8424c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8424e:	425b      	negs	r3, r3
   84250:	930d      	str	r3, [sp, #52]	; 0x34
   84252:	f04b 0b04 	orr.w	fp, fp, #4
   84256:	f89a 3000 	ldrb.w	r3, [sl]
   8425a:	e78b      	b.n	84174 <_svfprintf_r+0xb4>
   8425c:	aa25      	add	r2, sp, #148	; 0x94
   8425e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84260:	980c      	ldr	r0, [sp, #48]	; 0x30
   84262:	f002 ffa1 	bl	871a8 <__ssprint_r>
   84266:	b940      	cbnz	r0, 8427a <_svfprintf_r+0x1ba>
   84268:	46c8      	mov	r8, r9
   8426a:	e76f      	b.n	8414c <_svfprintf_r+0x8c>
   8426c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8426e:	b123      	cbz	r3, 8427a <_svfprintf_r+0x1ba>
   84270:	980c      	ldr	r0, [sp, #48]	; 0x30
   84272:	aa25      	add	r2, sp, #148	; 0x94
   84274:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84276:	f002 ff97 	bl	871a8 <__ssprint_r>
   8427a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8427c:	899b      	ldrh	r3, [r3, #12]
   8427e:	f013 0f40 	tst.w	r3, #64	; 0x40
   84282:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84284:	bf18      	it	ne
   84286:	f04f 33ff 	movne.w	r3, #4294967295
   8428a:	9309      	str	r3, [sp, #36]	; 0x24
   8428c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8428e:	b043      	add	sp, #268	; 0x10c
   84290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84294:	f01b 0f20 	tst.w	fp, #32
   84298:	9311      	str	r3, [sp, #68]	; 0x44
   8429a:	f040 81af 	bne.w	845fc <_svfprintf_r+0x53c>
   8429e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   842a0:	f01b 0f10 	tst.w	fp, #16
   842a4:	4613      	mov	r3, r2
   842a6:	f040 859a 	bne.w	84dde <_svfprintf_r+0xd1e>
   842aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
   842ae:	f000 8596 	beq.w	84dde <_svfprintf_r+0xd1e>
   842b2:	2500      	movs	r5, #0
   842b4:	2301      	movs	r3, #1
   842b6:	8814      	ldrh	r4, [r2, #0]
   842b8:	3204      	adds	r2, #4
   842ba:	920f      	str	r2, [sp, #60]	; 0x3c
   842bc:	2200      	movs	r2, #0
   842be:	4617      	mov	r7, r2
   842c0:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   842c4:	990a      	ldr	r1, [sp, #40]	; 0x28
   842c6:	1c4a      	adds	r2, r1, #1
   842c8:	f000 8210 	beq.w	846ec <_svfprintf_r+0x62c>
   842cc:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   842d0:	9207      	str	r2, [sp, #28]
   842d2:	ea54 0205 	orrs.w	r2, r4, r5
   842d6:	f040 820f 	bne.w	846f8 <_svfprintf_r+0x638>
   842da:	2900      	cmp	r1, #0
   842dc:	f040 8431 	bne.w	84b42 <_svfprintf_r+0xa82>
   842e0:	2b00      	cmp	r3, #0
   842e2:	f040 8539 	bne.w	84d58 <_svfprintf_r+0xc98>
   842e6:	f01b 0301 	ands.w	r3, fp, #1
   842ea:	930e      	str	r3, [sp, #56]	; 0x38
   842ec:	f000 8662 	beq.w	84fb4 <_svfprintf_r+0xef4>
   842f0:	2330      	movs	r3, #48	; 0x30
   842f2:	ae42      	add	r6, sp, #264	; 0x108
   842f4:	f806 3d41 	strb.w	r3, [r6, #-65]!
   842f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   842fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   842fc:	4293      	cmp	r3, r2
   842fe:	bfb8      	it	lt
   84300:	4613      	movlt	r3, r2
   84302:	9308      	str	r3, [sp, #32]
   84304:	2300      	movs	r3, #0
   84306:	9312      	str	r3, [sp, #72]	; 0x48
   84308:	b117      	cbz	r7, 84310 <_svfprintf_r+0x250>
   8430a:	9b08      	ldr	r3, [sp, #32]
   8430c:	3301      	adds	r3, #1
   8430e:	9308      	str	r3, [sp, #32]
   84310:	9b07      	ldr	r3, [sp, #28]
   84312:	f013 0302 	ands.w	r3, r3, #2
   84316:	9310      	str	r3, [sp, #64]	; 0x40
   84318:	d002      	beq.n	84320 <_svfprintf_r+0x260>
   8431a:	9b08      	ldr	r3, [sp, #32]
   8431c:	3302      	adds	r3, #2
   8431e:	9308      	str	r3, [sp, #32]
   84320:	9b07      	ldr	r3, [sp, #28]
   84322:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   84326:	f040 8310 	bne.w	8494a <_svfprintf_r+0x88a>
   8432a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8432c:	9a08      	ldr	r2, [sp, #32]
   8432e:	eba3 0b02 	sub.w	fp, r3, r2
   84332:	f1bb 0f00 	cmp.w	fp, #0
   84336:	f340 8308 	ble.w	8494a <_svfprintf_r+0x88a>
   8433a:	f1bb 0f10 	cmp.w	fp, #16
   8433e:	f340 87b2 	ble.w	852a6 <_svfprintf_r+0x11e6>
   84342:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84344:	4643      	mov	r3, r8
   84346:	4621      	mov	r1, r4
   84348:	46a8      	mov	r8, r5
   8434a:	2710      	movs	r7, #16
   8434c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8434e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84350:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84352:	e006      	b.n	84362 <_svfprintf_r+0x2a2>
   84354:	f1ab 0b10 	sub.w	fp, fp, #16
   84358:	f1bb 0f10 	cmp.w	fp, #16
   8435c:	f103 0308 	add.w	r3, r3, #8
   84360:	dd18      	ble.n	84394 <_svfprintf_r+0x2d4>
   84362:	3201      	adds	r2, #1
   84364:	48ab      	ldr	r0, [pc, #684]	; (84614 <_svfprintf_r+0x554>)
   84366:	3110      	adds	r1, #16
   84368:	2a07      	cmp	r2, #7
   8436a:	9127      	str	r1, [sp, #156]	; 0x9c
   8436c:	9226      	str	r2, [sp, #152]	; 0x98
   8436e:	e883 0081 	stmia.w	r3, {r0, r7}
   84372:	ddef      	ble.n	84354 <_svfprintf_r+0x294>
   84374:	aa25      	add	r2, sp, #148	; 0x94
   84376:	4629      	mov	r1, r5
   84378:	4620      	mov	r0, r4
   8437a:	f002 ff15 	bl	871a8 <__ssprint_r>
   8437e:	2800      	cmp	r0, #0
   84380:	f47f af7b 	bne.w	8427a <_svfprintf_r+0x1ba>
   84384:	f1ab 0b10 	sub.w	fp, fp, #16
   84388:	f1bb 0f10 	cmp.w	fp, #16
   8438c:	464b      	mov	r3, r9
   8438e:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84390:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84392:	dce6      	bgt.n	84362 <_svfprintf_r+0x2a2>
   84394:	4645      	mov	r5, r8
   84396:	460c      	mov	r4, r1
   84398:	4698      	mov	r8, r3
   8439a:	3201      	adds	r2, #1
   8439c:	4b9d      	ldr	r3, [pc, #628]	; (84614 <_svfprintf_r+0x554>)
   8439e:	445c      	add	r4, fp
   843a0:	2a07      	cmp	r2, #7
   843a2:	9427      	str	r4, [sp, #156]	; 0x9c
   843a4:	9226      	str	r2, [sp, #152]	; 0x98
   843a6:	e888 0808 	stmia.w	r8, {r3, fp}
   843aa:	f300 82c3 	bgt.w	84934 <_svfprintf_r+0x874>
   843ae:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   843b2:	f108 0808 	add.w	r8, r8, #8
   843b6:	b187      	cbz	r7, 843da <_svfprintf_r+0x31a>
   843b8:	2101      	movs	r1, #1
   843ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   843bc:	440c      	add	r4, r1
   843be:	440b      	add	r3, r1
   843c0:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   843c4:	2b07      	cmp	r3, #7
   843c6:	9427      	str	r4, [sp, #156]	; 0x9c
   843c8:	9326      	str	r3, [sp, #152]	; 0x98
   843ca:	f8c8 1004 	str.w	r1, [r8, #4]
   843ce:	f8c8 2000 	str.w	r2, [r8]
   843d2:	f300 83cd 	bgt.w	84b70 <_svfprintf_r+0xab0>
   843d6:	f108 0808 	add.w	r8, r8, #8
   843da:	9b10      	ldr	r3, [sp, #64]	; 0x40
   843dc:	b17b      	cbz	r3, 843fe <_svfprintf_r+0x33e>
   843de:	2102      	movs	r1, #2
   843e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   843e2:	440c      	add	r4, r1
   843e4:	3301      	adds	r3, #1
   843e6:	aa1e      	add	r2, sp, #120	; 0x78
   843e8:	2b07      	cmp	r3, #7
   843ea:	9427      	str	r4, [sp, #156]	; 0x9c
   843ec:	9326      	str	r3, [sp, #152]	; 0x98
   843ee:	f8c8 1004 	str.w	r1, [r8, #4]
   843f2:	f8c8 2000 	str.w	r2, [r8]
   843f6:	f300 8411 	bgt.w	84c1c <_svfprintf_r+0xb5c>
   843fa:	f108 0808 	add.w	r8, r8, #8
   843fe:	2d80      	cmp	r5, #128	; 0x80
   84400:	f000 8304 	beq.w	84a0c <_svfprintf_r+0x94c>
   84404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   84408:	1a9f      	subs	r7, r3, r2
   8440a:	2f00      	cmp	r7, #0
   8440c:	dd37      	ble.n	8447e <_svfprintf_r+0x3be>
   8440e:	2f10      	cmp	r7, #16
   84410:	f340 8679 	ble.w	85106 <_svfprintf_r+0x1046>
   84414:	4d80      	ldr	r5, [pc, #512]	; (84618 <_svfprintf_r+0x558>)
   84416:	4642      	mov	r2, r8
   84418:	4621      	mov	r1, r4
   8441a:	46b0      	mov	r8, r6
   8441c:	f04f 0b10 	mov.w	fp, #16
   84420:	462e      	mov	r6, r5
   84422:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84424:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84426:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84428:	e004      	b.n	84434 <_svfprintf_r+0x374>
   8442a:	3f10      	subs	r7, #16
   8442c:	2f10      	cmp	r7, #16
   8442e:	f102 0208 	add.w	r2, r2, #8
   84432:	dd15      	ble.n	84460 <_svfprintf_r+0x3a0>
   84434:	3301      	adds	r3, #1
   84436:	3110      	adds	r1, #16
   84438:	2b07      	cmp	r3, #7
   8443a:	9127      	str	r1, [sp, #156]	; 0x9c
   8443c:	9326      	str	r3, [sp, #152]	; 0x98
   8443e:	e882 0840 	stmia.w	r2, {r6, fp}
   84442:	ddf2      	ble.n	8442a <_svfprintf_r+0x36a>
   84444:	aa25      	add	r2, sp, #148	; 0x94
   84446:	4629      	mov	r1, r5
   84448:	4620      	mov	r0, r4
   8444a:	f002 fead 	bl	871a8 <__ssprint_r>
   8444e:	2800      	cmp	r0, #0
   84450:	f47f af13 	bne.w	8427a <_svfprintf_r+0x1ba>
   84454:	3f10      	subs	r7, #16
   84456:	2f10      	cmp	r7, #16
   84458:	464a      	mov	r2, r9
   8445a:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8445c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8445e:	dce9      	bgt.n	84434 <_svfprintf_r+0x374>
   84460:	4635      	mov	r5, r6
   84462:	460c      	mov	r4, r1
   84464:	4646      	mov	r6, r8
   84466:	4690      	mov	r8, r2
   84468:	3301      	adds	r3, #1
   8446a:	443c      	add	r4, r7
   8446c:	2b07      	cmp	r3, #7
   8446e:	9427      	str	r4, [sp, #156]	; 0x9c
   84470:	9326      	str	r3, [sp, #152]	; 0x98
   84472:	e888 00a0 	stmia.w	r8, {r5, r7}
   84476:	f300 8370 	bgt.w	84b5a <_svfprintf_r+0xa9a>
   8447a:	f108 0808 	add.w	r8, r8, #8
   8447e:	9b07      	ldr	r3, [sp, #28]
   84480:	05df      	lsls	r7, r3, #23
   84482:	f100 8264 	bmi.w	8494e <_svfprintf_r+0x88e>
   84486:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84488:	990e      	ldr	r1, [sp, #56]	; 0x38
   8448a:	3301      	adds	r3, #1
   8448c:	440c      	add	r4, r1
   8448e:	2b07      	cmp	r3, #7
   84490:	9427      	str	r4, [sp, #156]	; 0x9c
   84492:	f8c8 6000 	str.w	r6, [r8]
   84496:	f8c8 1004 	str.w	r1, [r8, #4]
   8449a:	9326      	str	r3, [sp, #152]	; 0x98
   8449c:	f300 83b3 	bgt.w	84c06 <_svfprintf_r+0xb46>
   844a0:	f108 0808 	add.w	r8, r8, #8
   844a4:	9b07      	ldr	r3, [sp, #28]
   844a6:	075b      	lsls	r3, r3, #29
   844a8:	d53b      	bpl.n	84522 <_svfprintf_r+0x462>
   844aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   844ac:	9a08      	ldr	r2, [sp, #32]
   844ae:	1a9d      	subs	r5, r3, r2
   844b0:	2d00      	cmp	r5, #0
   844b2:	dd36      	ble.n	84522 <_svfprintf_r+0x462>
   844b4:	2d10      	cmp	r5, #16
   844b6:	f340 8721 	ble.w	852fc <_svfprintf_r+0x123c>
   844ba:	2610      	movs	r6, #16
   844bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   844be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   844c0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   844c4:	e004      	b.n	844d0 <_svfprintf_r+0x410>
   844c6:	3d10      	subs	r5, #16
   844c8:	2d10      	cmp	r5, #16
   844ca:	f108 0808 	add.w	r8, r8, #8
   844ce:	dd16      	ble.n	844fe <_svfprintf_r+0x43e>
   844d0:	3301      	adds	r3, #1
   844d2:	4a50      	ldr	r2, [pc, #320]	; (84614 <_svfprintf_r+0x554>)
   844d4:	3410      	adds	r4, #16
   844d6:	2b07      	cmp	r3, #7
   844d8:	9427      	str	r4, [sp, #156]	; 0x9c
   844da:	9326      	str	r3, [sp, #152]	; 0x98
   844dc:	e888 0044 	stmia.w	r8, {r2, r6}
   844e0:	ddf1      	ble.n	844c6 <_svfprintf_r+0x406>
   844e2:	aa25      	add	r2, sp, #148	; 0x94
   844e4:	4659      	mov	r1, fp
   844e6:	4638      	mov	r0, r7
   844e8:	f002 fe5e 	bl	871a8 <__ssprint_r>
   844ec:	2800      	cmp	r0, #0
   844ee:	f47f aec4 	bne.w	8427a <_svfprintf_r+0x1ba>
   844f2:	3d10      	subs	r5, #16
   844f4:	2d10      	cmp	r5, #16
   844f6:	46c8      	mov	r8, r9
   844f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   844fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   844fc:	dce8      	bgt.n	844d0 <_svfprintf_r+0x410>
   844fe:	3301      	adds	r3, #1
   84500:	4a44      	ldr	r2, [pc, #272]	; (84614 <_svfprintf_r+0x554>)
   84502:	442c      	add	r4, r5
   84504:	2b07      	cmp	r3, #7
   84506:	9427      	str	r4, [sp, #156]	; 0x9c
   84508:	9326      	str	r3, [sp, #152]	; 0x98
   8450a:	e888 0024 	stmia.w	r8, {r2, r5}
   8450e:	dd08      	ble.n	84522 <_svfprintf_r+0x462>
   84510:	aa25      	add	r2, sp, #148	; 0x94
   84512:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84514:	980c      	ldr	r0, [sp, #48]	; 0x30
   84516:	f002 fe47 	bl	871a8 <__ssprint_r>
   8451a:	2800      	cmp	r0, #0
   8451c:	f47f aead 	bne.w	8427a <_svfprintf_r+0x1ba>
   84520:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84522:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84524:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84526:	9908      	ldr	r1, [sp, #32]
   84528:	428a      	cmp	r2, r1
   8452a:	bfac      	ite	ge
   8452c:	189b      	addge	r3, r3, r2
   8452e:	185b      	addlt	r3, r3, r1
   84530:	9309      	str	r3, [sp, #36]	; 0x24
   84532:	2c00      	cmp	r4, #0
   84534:	f040 82fb 	bne.w	84b2e <_svfprintf_r+0xa6e>
   84538:	2300      	movs	r3, #0
   8453a:	46c8      	mov	r8, r9
   8453c:	9326      	str	r3, [sp, #152]	; 0x98
   8453e:	e5e6      	b.n	8410e <_svfprintf_r+0x4e>
   84540:	9311      	str	r3, [sp, #68]	; 0x44
   84542:	f01b 0320 	ands.w	r3, fp, #32
   84546:	f040 8145 	bne.w	847d4 <_svfprintf_r+0x714>
   8454a:	f01b 0210 	ands.w	r2, fp, #16
   8454e:	f040 8466 	bne.w	84e1e <_svfprintf_r+0xd5e>
   84552:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   84556:	f000 8462 	beq.w	84e1e <_svfprintf_r+0xd5e>
   8455a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8455c:	4613      	mov	r3, r2
   8455e:	460a      	mov	r2, r1
   84560:	3204      	adds	r2, #4
   84562:	880c      	ldrh	r4, [r1, #0]
   84564:	2500      	movs	r5, #0
   84566:	920f      	str	r2, [sp, #60]	; 0x3c
   84568:	e6a8      	b.n	842bc <_svfprintf_r+0x1fc>
   8456a:	2500      	movs	r5, #0
   8456c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8456e:	9311      	str	r3, [sp, #68]	; 0x44
   84570:	6816      	ldr	r6, [r2, #0]
   84572:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   84576:	1d14      	adds	r4, r2, #4
   84578:	2e00      	cmp	r6, #0
   8457a:	f000 86cd 	beq.w	85318 <_svfprintf_r+0x1258>
   8457e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84580:	1c53      	adds	r3, r2, #1
   84582:	f000 861b 	beq.w	851bc <_svfprintf_r+0x10fc>
   84586:	4629      	mov	r1, r5
   84588:	4630      	mov	r0, r6
   8458a:	f002 faad 	bl	86ae8 <memchr>
   8458e:	2800      	cmp	r0, #0
   84590:	f000 870d 	beq.w	853ae <_svfprintf_r+0x12ee>
   84594:	1b83      	subs	r3, r0, r6
   84596:	950a      	str	r5, [sp, #40]	; 0x28
   84598:	930e      	str	r3, [sp, #56]	; 0x38
   8459a:	940f      	str	r4, [sp, #60]	; 0x3c
   8459c:	f8cd b01c 	str.w	fp, [sp, #28]
   845a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   845a4:	9308      	str	r3, [sp, #32]
   845a6:	9512      	str	r5, [sp, #72]	; 0x48
   845a8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   845ac:	e6ac      	b.n	84308 <_svfprintf_r+0x248>
   845ae:	f89a 3000 	ldrb.w	r3, [sl]
   845b2:	f10a 0401 	add.w	r4, sl, #1
   845b6:	2b2a      	cmp	r3, #42	; 0x2a
   845b8:	f000 87c2 	beq.w	85540 <_svfprintf_r+0x1480>
   845bc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   845c0:	2809      	cmp	r0, #9
   845c2:	46a2      	mov	sl, r4
   845c4:	f200 8718 	bhi.w	853f8 <_svfprintf_r+0x1338>
   845c8:	2300      	movs	r3, #0
   845ca:	461c      	mov	r4, r3
   845cc:	f81a 3b01 	ldrb.w	r3, [sl], #1
   845d0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   845d4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   845d8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   845dc:	2809      	cmp	r0, #9
   845de:	d9f5      	bls.n	845cc <_svfprintf_r+0x50c>
   845e0:	940a      	str	r4, [sp, #40]	; 0x28
   845e2:	e5c9      	b.n	84178 <_svfprintf_r+0xb8>
   845e4:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   845e8:	f89a 3000 	ldrb.w	r3, [sl]
   845ec:	e5c2      	b.n	84174 <_svfprintf_r+0xb4>
   845ee:	f04b 0b10 	orr.w	fp, fp, #16
   845f2:	f01b 0f20 	tst.w	fp, #32
   845f6:	9311      	str	r3, [sp, #68]	; 0x44
   845f8:	f43f ae51 	beq.w	8429e <_svfprintf_r+0x1de>
   845fc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   845fe:	3407      	adds	r4, #7
   84600:	f024 0307 	bic.w	r3, r4, #7
   84604:	f103 0208 	add.w	r2, r3, #8
   84608:	e9d3 4500 	ldrd	r4, r5, [r3]
   8460c:	920f      	str	r2, [sp, #60]	; 0x3c
   8460e:	2301      	movs	r3, #1
   84610:	e654      	b.n	842bc <_svfprintf_r+0x1fc>
   84612:	bf00      	nop
   84614:	00088554 	.word	0x00088554
   84618:	00088564 	.word	0x00088564
   8461c:	9311      	str	r3, [sp, #68]	; 0x44
   8461e:	2a00      	cmp	r2, #0
   84620:	f040 87ad 	bne.w	8557e <_svfprintf_r+0x14be>
   84624:	4bbe      	ldr	r3, [pc, #760]	; (84920 <_svfprintf_r+0x860>)
   84626:	f01b 0f20 	tst.w	fp, #32
   8462a:	9318      	str	r3, [sp, #96]	; 0x60
   8462c:	f040 80e7 	bne.w	847fe <_svfprintf_r+0x73e>
   84630:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84632:	f01b 0f10 	tst.w	fp, #16
   84636:	4613      	mov	r3, r2
   84638:	f040 83d8 	bne.w	84dec <_svfprintf_r+0xd2c>
   8463c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84640:	f000 83d4 	beq.w	84dec <_svfprintf_r+0xd2c>
   84644:	2500      	movs	r5, #0
   84646:	3304      	adds	r3, #4
   84648:	8814      	ldrh	r4, [r2, #0]
   8464a:	930f      	str	r3, [sp, #60]	; 0x3c
   8464c:	f01b 0f01 	tst.w	fp, #1
   84650:	f000 80e3 	beq.w	8481a <_svfprintf_r+0x75a>
   84654:	ea54 0305 	orrs.w	r3, r4, r5
   84658:	f000 80df 	beq.w	8481a <_svfprintf_r+0x75a>
   8465c:	2330      	movs	r3, #48	; 0x30
   8465e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   84662:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   84666:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   8466a:	f04b 0b02 	orr.w	fp, fp, #2
   8466e:	2302      	movs	r3, #2
   84670:	e624      	b.n	842bc <_svfprintf_r+0x1fc>
   84672:	2201      	movs	r2, #1
   84674:	9311      	str	r3, [sp, #68]	; 0x44
   84676:	2300      	movs	r3, #0
   84678:	4611      	mov	r1, r2
   8467a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8467c:	9208      	str	r2, [sp, #32]
   8467e:	6802      	ldr	r2, [r0, #0]
   84680:	461f      	mov	r7, r3
   84682:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84686:	930a      	str	r3, [sp, #40]	; 0x28
   84688:	9312      	str	r3, [sp, #72]	; 0x48
   8468a:	1d03      	adds	r3, r0, #4
   8468c:	f8cd b01c 	str.w	fp, [sp, #28]
   84690:	910e      	str	r1, [sp, #56]	; 0x38
   84692:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   84696:	930f      	str	r3, [sp, #60]	; 0x3c
   84698:	ae28      	add	r6, sp, #160	; 0xa0
   8469a:	e639      	b.n	84310 <_svfprintf_r+0x250>
   8469c:	9311      	str	r3, [sp, #68]	; 0x44
   8469e:	2a00      	cmp	r2, #0
   846a0:	f040 8784 	bne.w	855ac <_svfprintf_r+0x14ec>
   846a4:	f04b 0b10 	orr.w	fp, fp, #16
   846a8:	f01b 0f20 	tst.w	fp, #32
   846ac:	f040 8475 	bne.w	84f9a <_svfprintf_r+0xeda>
   846b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   846b2:	f01b 0f10 	tst.w	fp, #16
   846b6:	4613      	mov	r3, r2
   846b8:	f040 839d 	bne.w	84df6 <_svfprintf_r+0xd36>
   846bc:	f01b 0f40 	tst.w	fp, #64	; 0x40
   846c0:	f000 8399 	beq.w	84df6 <_svfprintf_r+0xd36>
   846c4:	f9b2 4000 	ldrsh.w	r4, [r2]
   846c8:	3304      	adds	r3, #4
   846ca:	17e5      	asrs	r5, r4, #31
   846cc:	930f      	str	r3, [sp, #60]	; 0x3c
   846ce:	4622      	mov	r2, r4
   846d0:	462b      	mov	r3, r5
   846d2:	2a00      	cmp	r2, #0
   846d4:	f173 0300 	sbcs.w	r3, r3, #0
   846d8:	f2c0 8398 	blt.w	84e0c <_svfprintf_r+0xd4c>
   846dc:	990a      	ldr	r1, [sp, #40]	; 0x28
   846de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   846e2:	1c4a      	adds	r2, r1, #1
   846e4:	f04f 0301 	mov.w	r3, #1
   846e8:	f47f adf0 	bne.w	842cc <_svfprintf_r+0x20c>
   846ec:	ea54 0205 	orrs.w	r2, r4, r5
   846f0:	f000 8229 	beq.w	84b46 <_svfprintf_r+0xa86>
   846f4:	f8cd b01c 	str.w	fp, [sp, #28]
   846f8:	2b01      	cmp	r3, #1
   846fa:	f000 830e 	beq.w	84d1a <_svfprintf_r+0xc5a>
   846fe:	2b02      	cmp	r3, #2
   84700:	f040 829c 	bne.w	84c3c <_svfprintf_r+0xb7c>
   84704:	464e      	mov	r6, r9
   84706:	9818      	ldr	r0, [sp, #96]	; 0x60
   84708:	0923      	lsrs	r3, r4, #4
   8470a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8470e:	0929      	lsrs	r1, r5, #4
   84710:	f004 020f 	and.w	r2, r4, #15
   84714:	460d      	mov	r5, r1
   84716:	461c      	mov	r4, r3
   84718:	5c83      	ldrb	r3, [r0, r2]
   8471a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8471e:	ea54 0305 	orrs.w	r3, r4, r5
   84722:	d1f1      	bne.n	84708 <_svfprintf_r+0x648>
   84724:	eba9 0306 	sub.w	r3, r9, r6
   84728:	930e      	str	r3, [sp, #56]	; 0x38
   8472a:	e5e5      	b.n	842f8 <_svfprintf_r+0x238>
   8472c:	9311      	str	r3, [sp, #68]	; 0x44
   8472e:	2a00      	cmp	r2, #0
   84730:	f040 8738 	bne.w	855a4 <_svfprintf_r+0x14e4>
   84734:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84736:	f01b 0f08 	tst.w	fp, #8
   8473a:	f104 0407 	add.w	r4, r4, #7
   8473e:	f000 84cf 	beq.w	850e0 <_svfprintf_r+0x1020>
   84742:	f024 0307 	bic.w	r3, r4, #7
   84746:	f103 0208 	add.w	r2, r3, #8
   8474a:	920f      	str	r2, [sp, #60]	; 0x3c
   8474c:	681a      	ldr	r2, [r3, #0]
   8474e:	685b      	ldr	r3, [r3, #4]
   84750:	9215      	str	r2, [sp, #84]	; 0x54
   84752:	9314      	str	r3, [sp, #80]	; 0x50
   84754:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84756:	9d15      	ldr	r5, [sp, #84]	; 0x54
   84758:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   8475c:	4628      	mov	r0, r5
   8475e:	4621      	mov	r1, r4
   84760:	f04f 32ff 	mov.w	r2, #4294967295
   84764:	4b6f      	ldr	r3, [pc, #444]	; (84924 <_svfprintf_r+0x864>)
   84766:	f003 fc3b 	bl	87fe0 <__aeabi_dcmpun>
   8476a:	2800      	cmp	r0, #0
   8476c:	f040 8434 	bne.w	84fd8 <_svfprintf_r+0xf18>
   84770:	4628      	mov	r0, r5
   84772:	4621      	mov	r1, r4
   84774:	f04f 32ff 	mov.w	r2, #4294967295
   84778:	4b6a      	ldr	r3, [pc, #424]	; (84924 <_svfprintf_r+0x864>)
   8477a:	f003 fc13 	bl	87fa4 <__aeabi_dcmple>
   8477e:	2800      	cmp	r0, #0
   84780:	f040 842a 	bne.w	84fd8 <_svfprintf_r+0xf18>
   84784:	a815      	add	r0, sp, #84	; 0x54
   84786:	c80d      	ldmia	r0, {r0, r2, r3}
   84788:	9914      	ldr	r1, [sp, #80]	; 0x50
   8478a:	f003 fc01 	bl	87f90 <__aeabi_dcmplt>
   8478e:	2800      	cmp	r0, #0
   84790:	f040 85d4 	bne.w	8533c <_svfprintf_r+0x127c>
   84794:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84798:	2303      	movs	r3, #3
   8479a:	461a      	mov	r2, r3
   8479c:	9308      	str	r3, [sp, #32]
   8479e:	2300      	movs	r3, #0
   847a0:	4e61      	ldr	r6, [pc, #388]	; (84928 <_svfprintf_r+0x868>)
   847a2:	4619      	mov	r1, r3
   847a4:	930a      	str	r3, [sp, #40]	; 0x28
   847a6:	4b61      	ldr	r3, [pc, #388]	; (8492c <_svfprintf_r+0x86c>)
   847a8:	920e      	str	r2, [sp, #56]	; 0x38
   847aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
   847ac:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   847b0:	9007      	str	r0, [sp, #28]
   847b2:	9112      	str	r1, [sp, #72]	; 0x48
   847b4:	2a47      	cmp	r2, #71	; 0x47
   847b6:	bfd8      	it	le
   847b8:	461e      	movle	r6, r3
   847ba:	e5a5      	b.n	84308 <_svfprintf_r+0x248>
   847bc:	f04b 0b08 	orr.w	fp, fp, #8
   847c0:	f89a 3000 	ldrb.w	r3, [sl]
   847c4:	e4d6      	b.n	84174 <_svfprintf_r+0xb4>
   847c6:	f04b 0b10 	orr.w	fp, fp, #16
   847ca:	9311      	str	r3, [sp, #68]	; 0x44
   847cc:	f01b 0320 	ands.w	r3, fp, #32
   847d0:	f43f aebb 	beq.w	8454a <_svfprintf_r+0x48a>
   847d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   847d6:	3407      	adds	r4, #7
   847d8:	f024 0307 	bic.w	r3, r4, #7
   847dc:	f103 0208 	add.w	r2, r3, #8
   847e0:	e9d3 4500 	ldrd	r4, r5, [r3]
   847e4:	920f      	str	r2, [sp, #60]	; 0x3c
   847e6:	2300      	movs	r3, #0
   847e8:	e568      	b.n	842bc <_svfprintf_r+0x1fc>
   847ea:	9311      	str	r3, [sp, #68]	; 0x44
   847ec:	2a00      	cmp	r2, #0
   847ee:	f040 86c2 	bne.w	85576 <_svfprintf_r+0x14b6>
   847f2:	4b4f      	ldr	r3, [pc, #316]	; (84930 <_svfprintf_r+0x870>)
   847f4:	f01b 0f20 	tst.w	fp, #32
   847f8:	9318      	str	r3, [sp, #96]	; 0x60
   847fa:	f43f af19 	beq.w	84630 <_svfprintf_r+0x570>
   847fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84800:	f01b 0f01 	tst.w	fp, #1
   84804:	f104 0407 	add.w	r4, r4, #7
   84808:	f024 0307 	bic.w	r3, r4, #7
   8480c:	f103 0208 	add.w	r2, r3, #8
   84810:	920f      	str	r2, [sp, #60]	; 0x3c
   84812:	e9d3 4500 	ldrd	r4, r5, [r3]
   84816:	f47f af1d 	bne.w	84654 <_svfprintf_r+0x594>
   8481a:	2302      	movs	r3, #2
   8481c:	e54e      	b.n	842bc <_svfprintf_r+0x1fc>
   8481e:	f89a 3000 	ldrb.w	r3, [sl]
   84822:	2900      	cmp	r1, #0
   84824:	f47f aca6 	bne.w	84174 <_svfprintf_r+0xb4>
   84828:	2201      	movs	r2, #1
   8482a:	2120      	movs	r1, #32
   8482c:	e4a2      	b.n	84174 <_svfprintf_r+0xb4>
   8482e:	f04b 0b01 	orr.w	fp, fp, #1
   84832:	f89a 3000 	ldrb.w	r3, [sl]
   84836:	e49d      	b.n	84174 <_svfprintf_r+0xb4>
   84838:	f89a 3000 	ldrb.w	r3, [sl]
   8483c:	2201      	movs	r2, #1
   8483e:	212b      	movs	r1, #43	; 0x2b
   84840:	e498      	b.n	84174 <_svfprintf_r+0xb4>
   84842:	f04b 0b20 	orr.w	fp, fp, #32
   84846:	f89a 3000 	ldrb.w	r3, [sl]
   8484a:	e493      	b.n	84174 <_svfprintf_r+0xb4>
   8484c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   84850:	f89a 3000 	ldrb.w	r3, [sl]
   84854:	e48e      	b.n	84174 <_svfprintf_r+0xb4>
   84856:	f89a 3000 	ldrb.w	r3, [sl]
   8485a:	2b6c      	cmp	r3, #108	; 0x6c
   8485c:	bf03      	ittte	eq
   8485e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   84862:	f04b 0b20 	orreq.w	fp, fp, #32
   84866:	f10a 0a01 	addeq.w	sl, sl, #1
   8486a:	f04b 0b10 	orrne.w	fp, fp, #16
   8486e:	e481      	b.n	84174 <_svfprintf_r+0xb4>
   84870:	2a00      	cmp	r2, #0
   84872:	f040 867c 	bne.w	8556e <_svfprintf_r+0x14ae>
   84876:	f01b 0f20 	tst.w	fp, #32
   8487a:	f040 8452 	bne.w	85122 <_svfprintf_r+0x1062>
   8487e:	f01b 0f10 	tst.w	fp, #16
   84882:	f040 8438 	bne.w	850f6 <_svfprintf_r+0x1036>
   84886:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8488a:	f000 8434 	beq.w	850f6 <_svfprintf_r+0x1036>
   8488e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84890:	6813      	ldr	r3, [r2, #0]
   84892:	3204      	adds	r2, #4
   84894:	920f      	str	r2, [sp, #60]	; 0x3c
   84896:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   8489a:	801a      	strh	r2, [r3, #0]
   8489c:	e437      	b.n	8410e <_svfprintf_r+0x4e>
   8489e:	2378      	movs	r3, #120	; 0x78
   848a0:	2230      	movs	r2, #48	; 0x30
   848a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   848a4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   848a8:	9311      	str	r3, [sp, #68]	; 0x44
   848aa:	1d03      	adds	r3, r0, #4
   848ac:	930f      	str	r3, [sp, #60]	; 0x3c
   848ae:	4b20      	ldr	r3, [pc, #128]	; (84930 <_svfprintf_r+0x870>)
   848b0:	6804      	ldr	r4, [r0, #0]
   848b2:	9318      	str	r3, [sp, #96]	; 0x60
   848b4:	f04b 0b02 	orr.w	fp, fp, #2
   848b8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   848bc:	2500      	movs	r5, #0
   848be:	2302      	movs	r3, #2
   848c0:	e4fc      	b.n	842bc <_svfprintf_r+0x1fc>
   848c2:	9311      	str	r3, [sp, #68]	; 0x44
   848c4:	2a00      	cmp	r2, #0
   848c6:	f43f aeef 	beq.w	846a8 <_svfprintf_r+0x5e8>
   848ca:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   848ce:	e6eb      	b.n	846a8 <_svfprintf_r+0x5e8>
   848d0:	2000      	movs	r0, #0
   848d2:	4604      	mov	r4, r0
   848d4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   848d8:	f81a 3b01 	ldrb.w	r3, [sl], #1
   848dc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   848e0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   848e4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   848e8:	2809      	cmp	r0, #9
   848ea:	d9f5      	bls.n	848d8 <_svfprintf_r+0x818>
   848ec:	940d      	str	r4, [sp, #52]	; 0x34
   848ee:	e443      	b.n	84178 <_svfprintf_r+0xb8>
   848f0:	9311      	str	r3, [sp, #68]	; 0x44
   848f2:	2a00      	cmp	r2, #0
   848f4:	f040 864a 	bne.w	8558c <_svfprintf_r+0x14cc>
   848f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   848fa:	2a00      	cmp	r2, #0
   848fc:	f43f acb6 	beq.w	8426c <_svfprintf_r+0x1ac>
   84900:	2300      	movs	r3, #0
   84902:	2101      	movs	r1, #1
   84904:	461f      	mov	r7, r3
   84906:	9108      	str	r1, [sp, #32]
   84908:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   8490c:	f8cd b01c 	str.w	fp, [sp, #28]
   84910:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84914:	930a      	str	r3, [sp, #40]	; 0x28
   84916:	9312      	str	r3, [sp, #72]	; 0x48
   84918:	910e      	str	r1, [sp, #56]	; 0x38
   8491a:	ae28      	add	r6, sp, #160	; 0xa0
   8491c:	e4f8      	b.n	84310 <_svfprintf_r+0x250>
   8491e:	bf00      	nop
   84920:	00088520 	.word	0x00088520
   84924:	7fefffff 	.word	0x7fefffff
   84928:	00088514 	.word	0x00088514
   8492c:	00088510 	.word	0x00088510
   84930:	00088534 	.word	0x00088534
   84934:	aa25      	add	r2, sp, #148	; 0x94
   84936:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84938:	980c      	ldr	r0, [sp, #48]	; 0x30
   8493a:	f002 fc35 	bl	871a8 <__ssprint_r>
   8493e:	2800      	cmp	r0, #0
   84940:	f47f ac9b 	bne.w	8427a <_svfprintf_r+0x1ba>
   84944:	46c8      	mov	r8, r9
   84946:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8494a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8494c:	e533      	b.n	843b6 <_svfprintf_r+0x2f6>
   8494e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84950:	2b65      	cmp	r3, #101	; 0x65
   84952:	f340 809a 	ble.w	84a8a <_svfprintf_r+0x9ca>
   84956:	a815      	add	r0, sp, #84	; 0x54
   84958:	c80d      	ldmia	r0, {r0, r2, r3}
   8495a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8495c:	f003 fb0e 	bl	87f7c <__aeabi_dcmpeq>
   84960:	2800      	cmp	r0, #0
   84962:	f000 8193 	beq.w	84c8c <_svfprintf_r+0xbcc>
   84966:	2101      	movs	r1, #1
   84968:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8496a:	4ab5      	ldr	r2, [pc, #724]	; (84c40 <_svfprintf_r+0xb80>)
   8496c:	440b      	add	r3, r1
   8496e:	440c      	add	r4, r1
   84970:	2b07      	cmp	r3, #7
   84972:	9427      	str	r4, [sp, #156]	; 0x9c
   84974:	9326      	str	r3, [sp, #152]	; 0x98
   84976:	f8c8 1004 	str.w	r1, [r8, #4]
   8497a:	f8c8 2000 	str.w	r2, [r8]
   8497e:	f300 83c6 	bgt.w	8510e <_svfprintf_r+0x104e>
   84982:	f108 0808 	add.w	r8, r8, #8
   84986:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   84988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8498a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8498c:	4293      	cmp	r3, r2
   8498e:	db03      	blt.n	84998 <_svfprintf_r+0x8d8>
   84990:	9b07      	ldr	r3, [sp, #28]
   84992:	07dd      	lsls	r5, r3, #31
   84994:	f57f ad86 	bpl.w	844a4 <_svfprintf_r+0x3e4>
   84998:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8499a:	9919      	ldr	r1, [sp, #100]	; 0x64
   8499c:	3301      	adds	r3, #1
   8499e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   849a0:	440c      	add	r4, r1
   849a2:	2b07      	cmp	r3, #7
   849a4:	f8c8 2000 	str.w	r2, [r8]
   849a8:	f8c8 1004 	str.w	r1, [r8, #4]
   849ac:	9427      	str	r4, [sp, #156]	; 0x9c
   849ae:	9326      	str	r3, [sp, #152]	; 0x98
   849b0:	f300 83c4 	bgt.w	8513c <_svfprintf_r+0x107c>
   849b4:	f108 0808 	add.w	r8, r8, #8
   849b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   849ba:	1e5e      	subs	r6, r3, #1
   849bc:	2e00      	cmp	r6, #0
   849be:	f77f ad71 	ble.w	844a4 <_svfprintf_r+0x3e4>
   849c2:	2e10      	cmp	r6, #16
   849c4:	f340 8575 	ble.w	854b2 <_svfprintf_r+0x13f2>
   849c8:	4622      	mov	r2, r4
   849ca:	2710      	movs	r7, #16
   849cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   849ce:	4d9d      	ldr	r5, [pc, #628]	; (84c44 <_svfprintf_r+0xb84>)
   849d0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   849d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   849d6:	e005      	b.n	849e4 <_svfprintf_r+0x924>
   849d8:	f108 0808 	add.w	r8, r8, #8
   849dc:	3e10      	subs	r6, #16
   849de:	2e10      	cmp	r6, #16
   849e0:	f340 8225 	ble.w	84e2e <_svfprintf_r+0xd6e>
   849e4:	3301      	adds	r3, #1
   849e6:	3210      	adds	r2, #16
   849e8:	2b07      	cmp	r3, #7
   849ea:	9227      	str	r2, [sp, #156]	; 0x9c
   849ec:	9326      	str	r3, [sp, #152]	; 0x98
   849ee:	e888 00a0 	stmia.w	r8, {r5, r7}
   849f2:	ddf1      	ble.n	849d8 <_svfprintf_r+0x918>
   849f4:	aa25      	add	r2, sp, #148	; 0x94
   849f6:	4621      	mov	r1, r4
   849f8:	4658      	mov	r0, fp
   849fa:	f002 fbd5 	bl	871a8 <__ssprint_r>
   849fe:	2800      	cmp	r0, #0
   84a00:	f47f ac3b 	bne.w	8427a <_svfprintf_r+0x1ba>
   84a04:	46c8      	mov	r8, r9
   84a06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84a08:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a0a:	e7e7      	b.n	849dc <_svfprintf_r+0x91c>
   84a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84a0e:	9a08      	ldr	r2, [sp, #32]
   84a10:	1a9f      	subs	r7, r3, r2
   84a12:	2f00      	cmp	r7, #0
   84a14:	f77f acf6 	ble.w	84404 <_svfprintf_r+0x344>
   84a18:	2f10      	cmp	r7, #16
   84a1a:	f340 84a8 	ble.w	8536e <_svfprintf_r+0x12ae>
   84a1e:	4d89      	ldr	r5, [pc, #548]	; (84c44 <_svfprintf_r+0xb84>)
   84a20:	4642      	mov	r2, r8
   84a22:	4621      	mov	r1, r4
   84a24:	46b0      	mov	r8, r6
   84a26:	f04f 0b10 	mov.w	fp, #16
   84a2a:	462e      	mov	r6, r5
   84a2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84a30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84a32:	e004      	b.n	84a3e <_svfprintf_r+0x97e>
   84a34:	3f10      	subs	r7, #16
   84a36:	2f10      	cmp	r7, #16
   84a38:	f102 0208 	add.w	r2, r2, #8
   84a3c:	dd15      	ble.n	84a6a <_svfprintf_r+0x9aa>
   84a3e:	3301      	adds	r3, #1
   84a40:	3110      	adds	r1, #16
   84a42:	2b07      	cmp	r3, #7
   84a44:	9127      	str	r1, [sp, #156]	; 0x9c
   84a46:	9326      	str	r3, [sp, #152]	; 0x98
   84a48:	e882 0840 	stmia.w	r2, {r6, fp}
   84a4c:	ddf2      	ble.n	84a34 <_svfprintf_r+0x974>
   84a4e:	aa25      	add	r2, sp, #148	; 0x94
   84a50:	4629      	mov	r1, r5
   84a52:	4620      	mov	r0, r4
   84a54:	f002 fba8 	bl	871a8 <__ssprint_r>
   84a58:	2800      	cmp	r0, #0
   84a5a:	f47f ac0e 	bne.w	8427a <_svfprintf_r+0x1ba>
   84a5e:	3f10      	subs	r7, #16
   84a60:	2f10      	cmp	r7, #16
   84a62:	464a      	mov	r2, r9
   84a64:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84a66:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a68:	dce9      	bgt.n	84a3e <_svfprintf_r+0x97e>
   84a6a:	4635      	mov	r5, r6
   84a6c:	460c      	mov	r4, r1
   84a6e:	4646      	mov	r6, r8
   84a70:	4690      	mov	r8, r2
   84a72:	3301      	adds	r3, #1
   84a74:	443c      	add	r4, r7
   84a76:	2b07      	cmp	r3, #7
   84a78:	9427      	str	r4, [sp, #156]	; 0x9c
   84a7a:	9326      	str	r3, [sp, #152]	; 0x98
   84a7c:	e888 00a0 	stmia.w	r8, {r5, r7}
   84a80:	f300 829e 	bgt.w	84fc0 <_svfprintf_r+0xf00>
   84a84:	f108 0808 	add.w	r8, r8, #8
   84a88:	e4bc      	b.n	84404 <_svfprintf_r+0x344>
   84a8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84a8c:	2b01      	cmp	r3, #1
   84a8e:	f340 824f 	ble.w	84f30 <_svfprintf_r+0xe70>
   84a92:	2301      	movs	r3, #1
   84a94:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84a96:	441c      	add	r4, r3
   84a98:	441f      	add	r7, r3
   84a9a:	2f07      	cmp	r7, #7
   84a9c:	9427      	str	r4, [sp, #156]	; 0x9c
   84a9e:	f8c8 6000 	str.w	r6, [r8]
   84aa2:	9726      	str	r7, [sp, #152]	; 0x98
   84aa4:	f8c8 3004 	str.w	r3, [r8, #4]
   84aa8:	f300 825f 	bgt.w	84f6a <_svfprintf_r+0xeaa>
   84aac:	f108 0808 	add.w	r8, r8, #8
   84ab0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84ab2:	3701      	adds	r7, #1
   84ab4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   84ab6:	4414      	add	r4, r2
   84ab8:	2f07      	cmp	r7, #7
   84aba:	9427      	str	r4, [sp, #156]	; 0x9c
   84abc:	9726      	str	r7, [sp, #152]	; 0x98
   84abe:	f8c8 3000 	str.w	r3, [r8]
   84ac2:	f8c8 2004 	str.w	r2, [r8, #4]
   84ac6:	f300 825c 	bgt.w	84f82 <_svfprintf_r+0xec2>
   84aca:	f108 0808 	add.w	r8, r8, #8
   84ace:	a815      	add	r0, sp, #84	; 0x54
   84ad0:	c80d      	ldmia	r0, {r0, r2, r3}
   84ad2:	9914      	ldr	r1, [sp, #80]	; 0x50
   84ad4:	f003 fa52 	bl	87f7c <__aeabi_dcmpeq>
   84ad8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84ada:	2800      	cmp	r0, #0
   84adc:	f040 8141 	bne.w	84d62 <_svfprintf_r+0xca2>
   84ae0:	3b01      	subs	r3, #1
   84ae2:	3701      	adds	r7, #1
   84ae4:	3601      	adds	r6, #1
   84ae6:	441c      	add	r4, r3
   84ae8:	2f07      	cmp	r7, #7
   84aea:	f8c8 6000 	str.w	r6, [r8]
   84aee:	9726      	str	r7, [sp, #152]	; 0x98
   84af0:	9427      	str	r4, [sp, #156]	; 0x9c
   84af2:	f8c8 3004 	str.w	r3, [r8, #4]
   84af6:	f300 8166 	bgt.w	84dc6 <_svfprintf_r+0xd06>
   84afa:	f108 0808 	add.w	r8, r8, #8
   84afe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   84b00:	3701      	adds	r7, #1
   84b02:	4414      	add	r4, r2
   84b04:	ab21      	add	r3, sp, #132	; 0x84
   84b06:	2f07      	cmp	r7, #7
   84b08:	9427      	str	r4, [sp, #156]	; 0x9c
   84b0a:	9726      	str	r7, [sp, #152]	; 0x98
   84b0c:	f8c8 2004 	str.w	r2, [r8, #4]
   84b10:	f8c8 3000 	str.w	r3, [r8]
   84b14:	f77f acc4 	ble.w	844a0 <_svfprintf_r+0x3e0>
   84b18:	aa25      	add	r2, sp, #148	; 0x94
   84b1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b1c:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b1e:	f002 fb43 	bl	871a8 <__ssprint_r>
   84b22:	2800      	cmp	r0, #0
   84b24:	f47f aba9 	bne.w	8427a <_svfprintf_r+0x1ba>
   84b28:	46c8      	mov	r8, r9
   84b2a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84b2c:	e4ba      	b.n	844a4 <_svfprintf_r+0x3e4>
   84b2e:	aa25      	add	r2, sp, #148	; 0x94
   84b30:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b32:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b34:	f002 fb38 	bl	871a8 <__ssprint_r>
   84b38:	2800      	cmp	r0, #0
   84b3a:	f43f acfd 	beq.w	84538 <_svfprintf_r+0x478>
   84b3e:	f7ff bb9c 	b.w	8427a <_svfprintf_r+0x1ba>
   84b42:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84b46:	2b01      	cmp	r3, #1
   84b48:	f000 817e 	beq.w	84e48 <_svfprintf_r+0xd88>
   84b4c:	2b02      	cmp	r3, #2
   84b4e:	d171      	bne.n	84c34 <_svfprintf_r+0xb74>
   84b50:	f8cd b01c 	str.w	fp, [sp, #28]
   84b54:	2400      	movs	r4, #0
   84b56:	2500      	movs	r5, #0
   84b58:	e5d4      	b.n	84704 <_svfprintf_r+0x644>
   84b5a:	aa25      	add	r2, sp, #148	; 0x94
   84b5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b5e:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b60:	f002 fb22 	bl	871a8 <__ssprint_r>
   84b64:	2800      	cmp	r0, #0
   84b66:	f47f ab88 	bne.w	8427a <_svfprintf_r+0x1ba>
   84b6a:	46c8      	mov	r8, r9
   84b6c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84b6e:	e486      	b.n	8447e <_svfprintf_r+0x3be>
   84b70:	aa25      	add	r2, sp, #148	; 0x94
   84b72:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b74:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b76:	f002 fb17 	bl	871a8 <__ssprint_r>
   84b7a:	2800      	cmp	r0, #0
   84b7c:	f47f ab7d 	bne.w	8427a <_svfprintf_r+0x1ba>
   84b80:	46c8      	mov	r8, r9
   84b82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84b84:	e429      	b.n	843da <_svfprintf_r+0x31a>
   84b86:	2001      	movs	r0, #1
   84b88:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84b8a:	4a2d      	ldr	r2, [pc, #180]	; (84c40 <_svfprintf_r+0xb80>)
   84b8c:	4403      	add	r3, r0
   84b8e:	4404      	add	r4, r0
   84b90:	2b07      	cmp	r3, #7
   84b92:	9427      	str	r4, [sp, #156]	; 0x9c
   84b94:	9326      	str	r3, [sp, #152]	; 0x98
   84b96:	f8c8 0004 	str.w	r0, [r8, #4]
   84b9a:	f8c8 2000 	str.w	r2, [r8]
   84b9e:	f340 82d8 	ble.w	85152 <_svfprintf_r+0x1092>
   84ba2:	aa25      	add	r2, sp, #148	; 0x94
   84ba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84ba6:	980c      	ldr	r0, [sp, #48]	; 0x30
   84ba8:	f002 fafe 	bl	871a8 <__ssprint_r>
   84bac:	2800      	cmp	r0, #0
   84bae:	f47f ab64 	bne.w	8427a <_svfprintf_r+0x1ba>
   84bb2:	46c8      	mov	r8, r9
   84bb4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   84bb6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84bb8:	b929      	cbnz	r1, 84bc6 <_svfprintf_r+0xb06>
   84bba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84bbc:	b91b      	cbnz	r3, 84bc6 <_svfprintf_r+0xb06>
   84bbe:	9b07      	ldr	r3, [sp, #28]
   84bc0:	07d8      	lsls	r0, r3, #31
   84bc2:	f57f ac6f 	bpl.w	844a4 <_svfprintf_r+0x3e4>
   84bc6:	9819      	ldr	r0, [sp, #100]	; 0x64
   84bc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84bca:	4602      	mov	r2, r0
   84bcc:	3301      	adds	r3, #1
   84bce:	4422      	add	r2, r4
   84bd0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   84bd2:	2b07      	cmp	r3, #7
   84bd4:	9227      	str	r2, [sp, #156]	; 0x9c
   84bd6:	f8c8 4000 	str.w	r4, [r8]
   84bda:	f8c8 0004 	str.w	r0, [r8, #4]
   84bde:	9326      	str	r3, [sp, #152]	; 0x98
   84be0:	f300 8431 	bgt.w	85446 <_svfprintf_r+0x1386>
   84be4:	f108 0808 	add.w	r8, r8, #8
   84be8:	2900      	cmp	r1, #0
   84bea:	f2c0 8409 	blt.w	85400 <_svfprintf_r+0x1340>
   84bee:	9913      	ldr	r1, [sp, #76]	; 0x4c
   84bf0:	3301      	adds	r3, #1
   84bf2:	188c      	adds	r4, r1, r2
   84bf4:	2b07      	cmp	r3, #7
   84bf6:	9427      	str	r4, [sp, #156]	; 0x9c
   84bf8:	9326      	str	r3, [sp, #152]	; 0x98
   84bfa:	f8c8 6000 	str.w	r6, [r8]
   84bfe:	f8c8 1004 	str.w	r1, [r8, #4]
   84c02:	f77f ac4d 	ble.w	844a0 <_svfprintf_r+0x3e0>
   84c06:	aa25      	add	r2, sp, #148	; 0x94
   84c08:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84c0a:	980c      	ldr	r0, [sp, #48]	; 0x30
   84c0c:	f002 facc 	bl	871a8 <__ssprint_r>
   84c10:	2800      	cmp	r0, #0
   84c12:	f47f ab32 	bne.w	8427a <_svfprintf_r+0x1ba>
   84c16:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84c18:	46c8      	mov	r8, r9
   84c1a:	e443      	b.n	844a4 <_svfprintf_r+0x3e4>
   84c1c:	aa25      	add	r2, sp, #148	; 0x94
   84c1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84c20:	980c      	ldr	r0, [sp, #48]	; 0x30
   84c22:	f002 fac1 	bl	871a8 <__ssprint_r>
   84c26:	2800      	cmp	r0, #0
   84c28:	f47f ab27 	bne.w	8427a <_svfprintf_r+0x1ba>
   84c2c:	46c8      	mov	r8, r9
   84c2e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84c30:	f7ff bbe5 	b.w	843fe <_svfprintf_r+0x33e>
   84c34:	2400      	movs	r4, #0
   84c36:	2500      	movs	r5, #0
   84c38:	f8cd b01c 	str.w	fp, [sp, #28]
   84c3c:	4649      	mov	r1, r9
   84c3e:	e004      	b.n	84c4a <_svfprintf_r+0xb8a>
   84c40:	00088550 	.word	0x00088550
   84c44:	00088564 	.word	0x00088564
   84c48:	4631      	mov	r1, r6
   84c4a:	08e2      	lsrs	r2, r4, #3
   84c4c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   84c50:	08e8      	lsrs	r0, r5, #3
   84c52:	f004 0307 	and.w	r3, r4, #7
   84c56:	4605      	mov	r5, r0
   84c58:	4614      	mov	r4, r2
   84c5a:	3330      	adds	r3, #48	; 0x30
   84c5c:	ea54 0205 	orrs.w	r2, r4, r5
   84c60:	f801 3c01 	strb.w	r3, [r1, #-1]
   84c64:	f101 36ff 	add.w	r6, r1, #4294967295
   84c68:	d1ee      	bne.n	84c48 <_svfprintf_r+0xb88>
   84c6a:	9a07      	ldr	r2, [sp, #28]
   84c6c:	07d2      	lsls	r2, r2, #31
   84c6e:	f57f ad59 	bpl.w	84724 <_svfprintf_r+0x664>
   84c72:	2b30      	cmp	r3, #48	; 0x30
   84c74:	f43f ad56 	beq.w	84724 <_svfprintf_r+0x664>
   84c78:	2330      	movs	r3, #48	; 0x30
   84c7a:	3902      	subs	r1, #2
   84c7c:	f806 3c01 	strb.w	r3, [r6, #-1]
   84c80:	eba9 0301 	sub.w	r3, r9, r1
   84c84:	930e      	str	r3, [sp, #56]	; 0x38
   84c86:	460e      	mov	r6, r1
   84c88:	f7ff bb36 	b.w	842f8 <_svfprintf_r+0x238>
   84c8c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   84c8e:	2900      	cmp	r1, #0
   84c90:	f77f af79 	ble.w	84b86 <_svfprintf_r+0xac6>
   84c94:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84c96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   84c98:	4293      	cmp	r3, r2
   84c9a:	bfa8      	it	ge
   84c9c:	4613      	movge	r3, r2
   84c9e:	2b00      	cmp	r3, #0
   84ca0:	461f      	mov	r7, r3
   84ca2:	dd0b      	ble.n	84cbc <_svfprintf_r+0xbfc>
   84ca4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84ca6:	443c      	add	r4, r7
   84ca8:	3301      	adds	r3, #1
   84caa:	2b07      	cmp	r3, #7
   84cac:	9427      	str	r4, [sp, #156]	; 0x9c
   84cae:	e888 00c0 	stmia.w	r8, {r6, r7}
   84cb2:	9326      	str	r3, [sp, #152]	; 0x98
   84cb4:	f300 82fb 	bgt.w	852ae <_svfprintf_r+0x11ee>
   84cb8:	f108 0808 	add.w	r8, r8, #8
   84cbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84cbe:	2f00      	cmp	r7, #0
   84cc0:	bfa8      	it	ge
   84cc2:	1bdb      	subge	r3, r3, r7
   84cc4:	2b00      	cmp	r3, #0
   84cc6:	461f      	mov	r7, r3
   84cc8:	f340 80d7 	ble.w	84e7a <_svfprintf_r+0xdba>
   84ccc:	2b10      	cmp	r3, #16
   84cce:	f340 8434 	ble.w	8553a <_svfprintf_r+0x147a>
   84cd2:	4dba      	ldr	r5, [pc, #744]	; (84fbc <_svfprintf_r+0xefc>)
   84cd4:	4642      	mov	r2, r8
   84cd6:	4621      	mov	r1, r4
   84cd8:	46b0      	mov	r8, r6
   84cda:	f04f 0b10 	mov.w	fp, #16
   84cde:	462e      	mov	r6, r5
   84ce0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84ce2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84ce4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84ce6:	e004      	b.n	84cf2 <_svfprintf_r+0xc32>
   84ce8:	3208      	adds	r2, #8
   84cea:	3f10      	subs	r7, #16
   84cec:	2f10      	cmp	r7, #16
   84cee:	f340 80b5 	ble.w	84e5c <_svfprintf_r+0xd9c>
   84cf2:	3301      	adds	r3, #1
   84cf4:	3110      	adds	r1, #16
   84cf6:	2b07      	cmp	r3, #7
   84cf8:	9127      	str	r1, [sp, #156]	; 0x9c
   84cfa:	9326      	str	r3, [sp, #152]	; 0x98
   84cfc:	e882 0840 	stmia.w	r2, {r6, fp}
   84d00:	ddf2      	ble.n	84ce8 <_svfprintf_r+0xc28>
   84d02:	aa25      	add	r2, sp, #148	; 0x94
   84d04:	4629      	mov	r1, r5
   84d06:	4620      	mov	r0, r4
   84d08:	f002 fa4e 	bl	871a8 <__ssprint_r>
   84d0c:	2800      	cmp	r0, #0
   84d0e:	f47f aab4 	bne.w	8427a <_svfprintf_r+0x1ba>
   84d12:	464a      	mov	r2, r9
   84d14:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84d16:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84d18:	e7e7      	b.n	84cea <_svfprintf_r+0xc2a>
   84d1a:	2d00      	cmp	r5, #0
   84d1c:	bf08      	it	eq
   84d1e:	2c0a      	cmpeq	r4, #10
   84d20:	f0c0 8090 	bcc.w	84e44 <_svfprintf_r+0xd84>
   84d24:	464e      	mov	r6, r9
   84d26:	4620      	mov	r0, r4
   84d28:	4629      	mov	r1, r5
   84d2a:	220a      	movs	r2, #10
   84d2c:	2300      	movs	r3, #0
   84d2e:	f003 f995 	bl	8805c <__aeabi_uldivmod>
   84d32:	3230      	adds	r2, #48	; 0x30
   84d34:	f806 2d01 	strb.w	r2, [r6, #-1]!
   84d38:	4620      	mov	r0, r4
   84d3a:	4629      	mov	r1, r5
   84d3c:	2300      	movs	r3, #0
   84d3e:	220a      	movs	r2, #10
   84d40:	f003 f98c 	bl	8805c <__aeabi_uldivmod>
   84d44:	4604      	mov	r4, r0
   84d46:	460d      	mov	r5, r1
   84d48:	ea54 0305 	orrs.w	r3, r4, r5
   84d4c:	d1eb      	bne.n	84d26 <_svfprintf_r+0xc66>
   84d4e:	eba9 0306 	sub.w	r3, r9, r6
   84d52:	930e      	str	r3, [sp, #56]	; 0x38
   84d54:	f7ff bad0 	b.w	842f8 <_svfprintf_r+0x238>
   84d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84d5a:	464e      	mov	r6, r9
   84d5c:	930e      	str	r3, [sp, #56]	; 0x38
   84d5e:	f7ff bacb 	b.w	842f8 <_svfprintf_r+0x238>
   84d62:	1e5e      	subs	r6, r3, #1
   84d64:	2e00      	cmp	r6, #0
   84d66:	f77f aeca 	ble.w	84afe <_svfprintf_r+0xa3e>
   84d6a:	2e10      	cmp	r6, #16
   84d6c:	f340 83e3 	ble.w	85536 <_svfprintf_r+0x1476>
   84d70:	4622      	mov	r2, r4
   84d72:	f04f 0b10 	mov.w	fp, #16
   84d76:	4d91      	ldr	r5, [pc, #580]	; (84fbc <_svfprintf_r+0xefc>)
   84d78:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84d7a:	e004      	b.n	84d86 <_svfprintf_r+0xcc6>
   84d7c:	3e10      	subs	r6, #16
   84d7e:	2e10      	cmp	r6, #16
   84d80:	f108 0808 	add.w	r8, r8, #8
   84d84:	dd15      	ble.n	84db2 <_svfprintf_r+0xcf2>
   84d86:	3701      	adds	r7, #1
   84d88:	3210      	adds	r2, #16
   84d8a:	2f07      	cmp	r7, #7
   84d8c:	9227      	str	r2, [sp, #156]	; 0x9c
   84d8e:	9726      	str	r7, [sp, #152]	; 0x98
   84d90:	e888 0820 	stmia.w	r8, {r5, fp}
   84d94:	ddf2      	ble.n	84d7c <_svfprintf_r+0xcbc>
   84d96:	aa25      	add	r2, sp, #148	; 0x94
   84d98:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84d9a:	4620      	mov	r0, r4
   84d9c:	f002 fa04 	bl	871a8 <__ssprint_r>
   84da0:	2800      	cmp	r0, #0
   84da2:	f47f aa6a 	bne.w	8427a <_svfprintf_r+0x1ba>
   84da6:	3e10      	subs	r6, #16
   84da8:	2e10      	cmp	r6, #16
   84daa:	46c8      	mov	r8, r9
   84dac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84dae:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84db0:	dce9      	bgt.n	84d86 <_svfprintf_r+0xcc6>
   84db2:	4614      	mov	r4, r2
   84db4:	3701      	adds	r7, #1
   84db6:	4434      	add	r4, r6
   84db8:	2f07      	cmp	r7, #7
   84dba:	9427      	str	r4, [sp, #156]	; 0x9c
   84dbc:	9726      	str	r7, [sp, #152]	; 0x98
   84dbe:	e888 0060 	stmia.w	r8, {r5, r6}
   84dc2:	f77f ae9a 	ble.w	84afa <_svfprintf_r+0xa3a>
   84dc6:	aa25      	add	r2, sp, #148	; 0x94
   84dc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84dca:	980c      	ldr	r0, [sp, #48]	; 0x30
   84dcc:	f002 f9ec 	bl	871a8 <__ssprint_r>
   84dd0:	2800      	cmp	r0, #0
   84dd2:	f47f aa52 	bne.w	8427a <_svfprintf_r+0x1ba>
   84dd6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84dd8:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84dda:	46c8      	mov	r8, r9
   84ddc:	e68f      	b.n	84afe <_svfprintf_r+0xa3e>
   84dde:	3204      	adds	r2, #4
   84de0:	681c      	ldr	r4, [r3, #0]
   84de2:	2500      	movs	r5, #0
   84de4:	2301      	movs	r3, #1
   84de6:	920f      	str	r2, [sp, #60]	; 0x3c
   84de8:	f7ff ba68 	b.w	842bc <_svfprintf_r+0x1fc>
   84dec:	681c      	ldr	r4, [r3, #0]
   84dee:	3304      	adds	r3, #4
   84df0:	930f      	str	r3, [sp, #60]	; 0x3c
   84df2:	2500      	movs	r5, #0
   84df4:	e42a      	b.n	8464c <_svfprintf_r+0x58c>
   84df6:	681c      	ldr	r4, [r3, #0]
   84df8:	3304      	adds	r3, #4
   84dfa:	17e5      	asrs	r5, r4, #31
   84dfc:	4622      	mov	r2, r4
   84dfe:	930f      	str	r3, [sp, #60]	; 0x3c
   84e00:	462b      	mov	r3, r5
   84e02:	2a00      	cmp	r2, #0
   84e04:	f173 0300 	sbcs.w	r3, r3, #0
   84e08:	f6bf ac68 	bge.w	846dc <_svfprintf_r+0x61c>
   84e0c:	272d      	movs	r7, #45	; 0x2d
   84e0e:	4264      	negs	r4, r4
   84e10:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84e14:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   84e18:	2301      	movs	r3, #1
   84e1a:	f7ff ba53 	b.w	842c4 <_svfprintf_r+0x204>
   84e1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   84e20:	2500      	movs	r5, #0
   84e22:	460a      	mov	r2, r1
   84e24:	3204      	adds	r2, #4
   84e26:	680c      	ldr	r4, [r1, #0]
   84e28:	920f      	str	r2, [sp, #60]	; 0x3c
   84e2a:	f7ff ba47 	b.w	842bc <_svfprintf_r+0x1fc>
   84e2e:	4614      	mov	r4, r2
   84e30:	3301      	adds	r3, #1
   84e32:	4434      	add	r4, r6
   84e34:	2b07      	cmp	r3, #7
   84e36:	9427      	str	r4, [sp, #156]	; 0x9c
   84e38:	9326      	str	r3, [sp, #152]	; 0x98
   84e3a:	e888 0060 	stmia.w	r8, {r5, r6}
   84e3e:	f77f ab2f 	ble.w	844a0 <_svfprintf_r+0x3e0>
   84e42:	e6e0      	b.n	84c06 <_svfprintf_r+0xb46>
   84e44:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84e48:	2301      	movs	r3, #1
   84e4a:	ae42      	add	r6, sp, #264	; 0x108
   84e4c:	3430      	adds	r4, #48	; 0x30
   84e4e:	f8cd b01c 	str.w	fp, [sp, #28]
   84e52:	f806 4d41 	strb.w	r4, [r6, #-65]!
   84e56:	930e      	str	r3, [sp, #56]	; 0x38
   84e58:	f7ff ba4e 	b.w	842f8 <_svfprintf_r+0x238>
   84e5c:	4635      	mov	r5, r6
   84e5e:	460c      	mov	r4, r1
   84e60:	4646      	mov	r6, r8
   84e62:	4690      	mov	r8, r2
   84e64:	3301      	adds	r3, #1
   84e66:	443c      	add	r4, r7
   84e68:	2b07      	cmp	r3, #7
   84e6a:	9427      	str	r4, [sp, #156]	; 0x9c
   84e6c:	9326      	str	r3, [sp, #152]	; 0x98
   84e6e:	e888 00a0 	stmia.w	r8, {r5, r7}
   84e72:	f300 8246 	bgt.w	85302 <_svfprintf_r+0x1242>
   84e76:	f108 0808 	add.w	r8, r8, #8
   84e7a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84e7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84e7e:	429a      	cmp	r2, r3
   84e80:	db45      	blt.n	84f0e <_svfprintf_r+0xe4e>
   84e82:	9b07      	ldr	r3, [sp, #28]
   84e84:	07d9      	lsls	r1, r3, #31
   84e86:	d442      	bmi.n	84f0e <_svfprintf_r+0xe4e>
   84e88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84e8a:	9812      	ldr	r0, [sp, #72]	; 0x48
   84e8c:	1a9a      	subs	r2, r3, r2
   84e8e:	1a1d      	subs	r5, r3, r0
   84e90:	4295      	cmp	r5, r2
   84e92:	bfa8      	it	ge
   84e94:	4615      	movge	r5, r2
   84e96:	2d00      	cmp	r5, #0
   84e98:	dd0e      	ble.n	84eb8 <_svfprintf_r+0xdf8>
   84e9a:	9926      	ldr	r1, [sp, #152]	; 0x98
   84e9c:	4406      	add	r6, r0
   84e9e:	3101      	adds	r1, #1
   84ea0:	442c      	add	r4, r5
   84ea2:	2907      	cmp	r1, #7
   84ea4:	f8c8 6000 	str.w	r6, [r8]
   84ea8:	9427      	str	r4, [sp, #156]	; 0x9c
   84eaa:	f8c8 5004 	str.w	r5, [r8, #4]
   84eae:	9126      	str	r1, [sp, #152]	; 0x98
   84eb0:	f300 8216 	bgt.w	852e0 <_svfprintf_r+0x1220>
   84eb4:	f108 0808 	add.w	r8, r8, #8
   84eb8:	2d00      	cmp	r5, #0
   84eba:	bfb4      	ite	lt
   84ebc:	4616      	movlt	r6, r2
   84ebe:	1b56      	subge	r6, r2, r5
   84ec0:	2e00      	cmp	r6, #0
   84ec2:	f77f aaef 	ble.w	844a4 <_svfprintf_r+0x3e4>
   84ec6:	2e10      	cmp	r6, #16
   84ec8:	f340 82f3 	ble.w	854b2 <_svfprintf_r+0x13f2>
   84ecc:	4622      	mov	r2, r4
   84ece:	2710      	movs	r7, #16
   84ed0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84ed2:	4d3a      	ldr	r5, [pc, #232]	; (84fbc <_svfprintf_r+0xefc>)
   84ed4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   84ed8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84eda:	e004      	b.n	84ee6 <_svfprintf_r+0xe26>
   84edc:	f108 0808 	add.w	r8, r8, #8
   84ee0:	3e10      	subs	r6, #16
   84ee2:	2e10      	cmp	r6, #16
   84ee4:	dda3      	ble.n	84e2e <_svfprintf_r+0xd6e>
   84ee6:	3301      	adds	r3, #1
   84ee8:	3210      	adds	r2, #16
   84eea:	2b07      	cmp	r3, #7
   84eec:	9227      	str	r2, [sp, #156]	; 0x9c
   84eee:	9326      	str	r3, [sp, #152]	; 0x98
   84ef0:	e888 00a0 	stmia.w	r8, {r5, r7}
   84ef4:	ddf2      	ble.n	84edc <_svfprintf_r+0xe1c>
   84ef6:	aa25      	add	r2, sp, #148	; 0x94
   84ef8:	4621      	mov	r1, r4
   84efa:	4658      	mov	r0, fp
   84efc:	f002 f954 	bl	871a8 <__ssprint_r>
   84f00:	2800      	cmp	r0, #0
   84f02:	f47f a9ba 	bne.w	8427a <_svfprintf_r+0x1ba>
   84f06:	46c8      	mov	r8, r9
   84f08:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84f0c:	e7e8      	b.n	84ee0 <_svfprintf_r+0xe20>
   84f0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84f10:	9819      	ldr	r0, [sp, #100]	; 0x64
   84f12:	3301      	adds	r3, #1
   84f14:	991a      	ldr	r1, [sp, #104]	; 0x68
   84f16:	4404      	add	r4, r0
   84f18:	2b07      	cmp	r3, #7
   84f1a:	9427      	str	r4, [sp, #156]	; 0x9c
   84f1c:	f8c8 1000 	str.w	r1, [r8]
   84f20:	f8c8 0004 	str.w	r0, [r8, #4]
   84f24:	9326      	str	r3, [sp, #152]	; 0x98
   84f26:	f300 81cf 	bgt.w	852c8 <_svfprintf_r+0x1208>
   84f2a:	f108 0808 	add.w	r8, r8, #8
   84f2e:	e7ab      	b.n	84e88 <_svfprintf_r+0xdc8>
   84f30:	9b07      	ldr	r3, [sp, #28]
   84f32:	07da      	lsls	r2, r3, #31
   84f34:	f53f adad 	bmi.w	84a92 <_svfprintf_r+0x9d2>
   84f38:	2301      	movs	r3, #1
   84f3a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84f3c:	441c      	add	r4, r3
   84f3e:	441f      	add	r7, r3
   84f40:	2f07      	cmp	r7, #7
   84f42:	9427      	str	r4, [sp, #156]	; 0x9c
   84f44:	f8c8 6000 	str.w	r6, [r8]
   84f48:	9726      	str	r7, [sp, #152]	; 0x98
   84f4a:	f8c8 3004 	str.w	r3, [r8, #4]
   84f4e:	f77f add4 	ble.w	84afa <_svfprintf_r+0xa3a>
   84f52:	aa25      	add	r2, sp, #148	; 0x94
   84f54:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f56:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f58:	f002 f926 	bl	871a8 <__ssprint_r>
   84f5c:	2800      	cmp	r0, #0
   84f5e:	f47f a98c 	bne.w	8427a <_svfprintf_r+0x1ba>
   84f62:	46c8      	mov	r8, r9
   84f64:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84f66:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84f68:	e5c9      	b.n	84afe <_svfprintf_r+0xa3e>
   84f6a:	aa25      	add	r2, sp, #148	; 0x94
   84f6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f6e:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f70:	f002 f91a 	bl	871a8 <__ssprint_r>
   84f74:	2800      	cmp	r0, #0
   84f76:	f47f a980 	bne.w	8427a <_svfprintf_r+0x1ba>
   84f7a:	46c8      	mov	r8, r9
   84f7c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84f7e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84f80:	e596      	b.n	84ab0 <_svfprintf_r+0x9f0>
   84f82:	aa25      	add	r2, sp, #148	; 0x94
   84f84:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f86:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f88:	f002 f90e 	bl	871a8 <__ssprint_r>
   84f8c:	2800      	cmp	r0, #0
   84f8e:	f47f a974 	bne.w	8427a <_svfprintf_r+0x1ba>
   84f92:	46c8      	mov	r8, r9
   84f94:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84f96:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84f98:	e599      	b.n	84ace <_svfprintf_r+0xa0e>
   84f9a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84f9c:	3407      	adds	r4, #7
   84f9e:	f024 0407 	bic.w	r4, r4, #7
   84fa2:	f104 0108 	add.w	r1, r4, #8
   84fa6:	e9d4 2300 	ldrd	r2, r3, [r4]
   84faa:	910f      	str	r1, [sp, #60]	; 0x3c
   84fac:	4614      	mov	r4, r2
   84fae:	461d      	mov	r5, r3
   84fb0:	f7ff bb8f 	b.w	846d2 <_svfprintf_r+0x612>
   84fb4:	464e      	mov	r6, r9
   84fb6:	f7ff b99f 	b.w	842f8 <_svfprintf_r+0x238>
   84fba:	bf00      	nop
   84fbc:	00088564 	.word	0x00088564
   84fc0:	aa25      	add	r2, sp, #148	; 0x94
   84fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84fc4:	980c      	ldr	r0, [sp, #48]	; 0x30
   84fc6:	f002 f8ef 	bl	871a8 <__ssprint_r>
   84fca:	2800      	cmp	r0, #0
   84fcc:	f47f a955 	bne.w	8427a <_svfprintf_r+0x1ba>
   84fd0:	46c8      	mov	r8, r9
   84fd2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84fd4:	f7ff ba16 	b.w	84404 <_svfprintf_r+0x344>
   84fd8:	9c15      	ldr	r4, [sp, #84]	; 0x54
   84fda:	4622      	mov	r2, r4
   84fdc:	4620      	mov	r0, r4
   84fde:	9c14      	ldr	r4, [sp, #80]	; 0x50
   84fe0:	4623      	mov	r3, r4
   84fe2:	4621      	mov	r1, r4
   84fe4:	f002 fffc 	bl	87fe0 <__aeabi_dcmpun>
   84fe8:	2800      	cmp	r0, #0
   84fea:	f040 8273 	bne.w	854d4 <_svfprintf_r+0x1414>
   84fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84ff0:	3301      	adds	r3, #1
   84ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84ff4:	f023 0320 	bic.w	r3, r3, #32
   84ff8:	930e      	str	r3, [sp, #56]	; 0x38
   84ffa:	f000 819c 	beq.w	85336 <_svfprintf_r+0x1276>
   84ffe:	2b47      	cmp	r3, #71	; 0x47
   85000:	f000 80d6 	beq.w	851b0 <_svfprintf_r+0x10f0>
   85004:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   85008:	9307      	str	r3, [sp, #28]
   8500a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8500c:	1e1f      	subs	r7, r3, #0
   8500e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85010:	9308      	str	r3, [sp, #32]
   85012:	bfb7      	itett	lt
   85014:	463b      	movlt	r3, r7
   85016:	2300      	movge	r3, #0
   85018:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   8501c:	232d      	movlt	r3, #45	; 0x2d
   8501e:	9310      	str	r3, [sp, #64]	; 0x40
   85020:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85022:	2b66      	cmp	r3, #102	; 0x66
   85024:	f000 8190 	beq.w	85348 <_svfprintf_r+0x1288>
   85028:	2b46      	cmp	r3, #70	; 0x46
   8502a:	f000 80a4 	beq.w	85176 <_svfprintf_r+0x10b6>
   8502e:	2002      	movs	r0, #2
   85030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85032:	a923      	add	r1, sp, #140	; 0x8c
   85034:	2b45      	cmp	r3, #69	; 0x45
   85036:	bf0a      	itet	eq
   85038:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   8503a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   8503c:	1c5d      	addeq	r5, r3, #1
   8503e:	e88d 0021 	stmia.w	sp, {r0, r5}
   85042:	9104      	str	r1, [sp, #16]
   85044:	a820      	add	r0, sp, #128	; 0x80
   85046:	a91f      	add	r1, sp, #124	; 0x7c
   85048:	463b      	mov	r3, r7
   8504a:	9003      	str	r0, [sp, #12]
   8504c:	9a08      	ldr	r2, [sp, #32]
   8504e:	9102      	str	r1, [sp, #8]
   85050:	980c      	ldr	r0, [sp, #48]	; 0x30
   85052:	f000 fb59 	bl	85708 <_dtoa_r>
   85056:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85058:	4606      	mov	r6, r0
   8505a:	2b67      	cmp	r3, #103	; 0x67
   8505c:	f040 81ba 	bne.w	853d4 <_svfprintf_r+0x1314>
   85060:	f01b 0f01 	tst.w	fp, #1
   85064:	f000 8223 	beq.w	854ae <_svfprintf_r+0x13ee>
   85068:	1974      	adds	r4, r6, r5
   8506a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8506c:	9808      	ldr	r0, [sp, #32]
   8506e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   85070:	4639      	mov	r1, r7
   85072:	f002 ff83 	bl	87f7c <__aeabi_dcmpeq>
   85076:	2800      	cmp	r0, #0
   85078:	f040 8124 	bne.w	852c4 <_svfprintf_r+0x1204>
   8507c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8507e:	42a3      	cmp	r3, r4
   85080:	d206      	bcs.n	85090 <_svfprintf_r+0xfd0>
   85082:	2130      	movs	r1, #48	; 0x30
   85084:	1c5a      	adds	r2, r3, #1
   85086:	9223      	str	r2, [sp, #140]	; 0x8c
   85088:	7019      	strb	r1, [r3, #0]
   8508a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8508c:	429c      	cmp	r4, r3
   8508e:	d8f9      	bhi.n	85084 <_svfprintf_r+0xfc4>
   85090:	1b9b      	subs	r3, r3, r6
   85092:	9313      	str	r3, [sp, #76]	; 0x4c
   85094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85096:	2b47      	cmp	r3, #71	; 0x47
   85098:	f000 80a2 	beq.w	851e0 <_svfprintf_r+0x1120>
   8509c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8509e:	2b65      	cmp	r3, #101	; 0x65
   850a0:	f340 81a7 	ble.w	853f2 <_svfprintf_r+0x1332>
   850a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   850a6:	2b66      	cmp	r3, #102	; 0x66
   850a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   850aa:	9312      	str	r3, [sp, #72]	; 0x48
   850ac:	f000 8171 	beq.w	85392 <_svfprintf_r+0x12d2>
   850b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   850b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   850b4:	4619      	mov	r1, r3
   850b6:	4291      	cmp	r1, r2
   850b8:	f300 815d 	bgt.w	85376 <_svfprintf_r+0x12b6>
   850bc:	f01b 0f01 	tst.w	fp, #1
   850c0:	f040 81f0 	bne.w	854a4 <_svfprintf_r+0x13e4>
   850c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   850c8:	9308      	str	r3, [sp, #32]
   850ca:	2367      	movs	r3, #103	; 0x67
   850cc:	920e      	str	r2, [sp, #56]	; 0x38
   850ce:	9311      	str	r3, [sp, #68]	; 0x44
   850d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   850d2:	2b00      	cmp	r3, #0
   850d4:	d17d      	bne.n	851d2 <_svfprintf_r+0x1112>
   850d6:	930a      	str	r3, [sp, #40]	; 0x28
   850d8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   850dc:	f7ff b914 	b.w	84308 <_svfprintf_r+0x248>
   850e0:	f024 0407 	bic.w	r4, r4, #7
   850e4:	6823      	ldr	r3, [r4, #0]
   850e6:	9315      	str	r3, [sp, #84]	; 0x54
   850e8:	6863      	ldr	r3, [r4, #4]
   850ea:	9314      	str	r3, [sp, #80]	; 0x50
   850ec:	f104 0308 	add.w	r3, r4, #8
   850f0:	930f      	str	r3, [sp, #60]	; 0x3c
   850f2:	f7ff bb2f 	b.w	84754 <_svfprintf_r+0x694>
   850f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   850f8:	6813      	ldr	r3, [r2, #0]
   850fa:	3204      	adds	r2, #4
   850fc:	920f      	str	r2, [sp, #60]	; 0x3c
   850fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   85100:	601a      	str	r2, [r3, #0]
   85102:	f7ff b804 	b.w	8410e <_svfprintf_r+0x4e>
   85106:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85108:	4daf      	ldr	r5, [pc, #700]	; (853c8 <_svfprintf_r+0x1308>)
   8510a:	f7ff b9ad 	b.w	84468 <_svfprintf_r+0x3a8>
   8510e:	aa25      	add	r2, sp, #148	; 0x94
   85110:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85112:	980c      	ldr	r0, [sp, #48]	; 0x30
   85114:	f002 f848 	bl	871a8 <__ssprint_r>
   85118:	2800      	cmp	r0, #0
   8511a:	f47f a8ae 	bne.w	8427a <_svfprintf_r+0x1ba>
   8511e:	46c8      	mov	r8, r9
   85120:	e431      	b.n	84986 <_svfprintf_r+0x8c6>
   85122:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85124:	4613      	mov	r3, r2
   85126:	3304      	adds	r3, #4
   85128:	930f      	str	r3, [sp, #60]	; 0x3c
   8512a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8512c:	6811      	ldr	r1, [r2, #0]
   8512e:	17dd      	asrs	r5, r3, #31
   85130:	461a      	mov	r2, r3
   85132:	462b      	mov	r3, r5
   85134:	e9c1 2300 	strd	r2, r3, [r1]
   85138:	f7fe bfe9 	b.w	8410e <_svfprintf_r+0x4e>
   8513c:	aa25      	add	r2, sp, #148	; 0x94
   8513e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85140:	980c      	ldr	r0, [sp, #48]	; 0x30
   85142:	f002 f831 	bl	871a8 <__ssprint_r>
   85146:	2800      	cmp	r0, #0
   85148:	f47f a897 	bne.w	8427a <_svfprintf_r+0x1ba>
   8514c:	46c8      	mov	r8, r9
   8514e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85150:	e432      	b.n	849b8 <_svfprintf_r+0x8f8>
   85152:	f108 0808 	add.w	r8, r8, #8
   85156:	e52f      	b.n	84bb8 <_svfprintf_r+0xaf8>
   85158:	2140      	movs	r1, #64	; 0x40
   8515a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8515c:	f001 fa22 	bl	865a4 <_malloc_r>
   85160:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85162:	6010      	str	r0, [r2, #0]
   85164:	6110      	str	r0, [r2, #16]
   85166:	2800      	cmp	r0, #0
   85168:	f000 8214 	beq.w	85594 <_svfprintf_r+0x14d4>
   8516c:	2340      	movs	r3, #64	; 0x40
   8516e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85170:	6153      	str	r3, [r2, #20]
   85172:	f7fe bfbc 	b.w	840ee <_svfprintf_r+0x2e>
   85176:	2003      	movs	r0, #3
   85178:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8517a:	a923      	add	r1, sp, #140	; 0x8c
   8517c:	e88d 0011 	stmia.w	sp, {r0, r4}
   85180:	9104      	str	r1, [sp, #16]
   85182:	a820      	add	r0, sp, #128	; 0x80
   85184:	a91f      	add	r1, sp, #124	; 0x7c
   85186:	9003      	str	r0, [sp, #12]
   85188:	9a08      	ldr	r2, [sp, #32]
   8518a:	463b      	mov	r3, r7
   8518c:	9102      	str	r1, [sp, #8]
   8518e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85190:	f000 faba 	bl	85708 <_dtoa_r>
   85194:	4625      	mov	r5, r4
   85196:	4606      	mov	r6, r0
   85198:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8519a:	1974      	adds	r4, r6, r5
   8519c:	2b46      	cmp	r3, #70	; 0x46
   8519e:	f47f af64 	bne.w	8506a <_svfprintf_r+0xfaa>
   851a2:	7833      	ldrb	r3, [r6, #0]
   851a4:	2b30      	cmp	r3, #48	; 0x30
   851a6:	f000 8187 	beq.w	854b8 <_svfprintf_r+0x13f8>
   851aa:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   851ac:	442c      	add	r4, r5
   851ae:	e75c      	b.n	8506a <_svfprintf_r+0xfaa>
   851b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   851b2:	2b00      	cmp	r3, #0
   851b4:	bf08      	it	eq
   851b6:	2301      	moveq	r3, #1
   851b8:	930a      	str	r3, [sp, #40]	; 0x28
   851ba:	e723      	b.n	85004 <_svfprintf_r+0xf44>
   851bc:	4630      	mov	r0, r6
   851be:	950a      	str	r5, [sp, #40]	; 0x28
   851c0:	f7fe ff50 	bl	84064 <strlen>
   851c4:	940f      	str	r4, [sp, #60]	; 0x3c
   851c6:	900e      	str	r0, [sp, #56]	; 0x38
   851c8:	f8cd b01c 	str.w	fp, [sp, #28]
   851cc:	4603      	mov	r3, r0
   851ce:	f7ff b9e7 	b.w	845a0 <_svfprintf_r+0x4e0>
   851d2:	272d      	movs	r7, #45	; 0x2d
   851d4:	2300      	movs	r3, #0
   851d6:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   851da:	930a      	str	r3, [sp, #40]	; 0x28
   851dc:	f7ff b895 	b.w	8430a <_svfprintf_r+0x24a>
   851e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   851e2:	461a      	mov	r2, r3
   851e4:	9312      	str	r3, [sp, #72]	; 0x48
   851e6:	3303      	adds	r3, #3
   851e8:	db04      	blt.n	851f4 <_svfprintf_r+0x1134>
   851ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   851ec:	4619      	mov	r1, r3
   851ee:	4291      	cmp	r1, r2
   851f0:	f6bf af5e 	bge.w	850b0 <_svfprintf_r+0xff0>
   851f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   851f6:	3b02      	subs	r3, #2
   851f8:	9311      	str	r3, [sp, #68]	; 0x44
   851fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   851fc:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   85200:	3b01      	subs	r3, #1
   85202:	2b00      	cmp	r3, #0
   85204:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   85208:	bfb4      	ite	lt
   8520a:	222d      	movlt	r2, #45	; 0x2d
   8520c:	222b      	movge	r2, #43	; 0x2b
   8520e:	931f      	str	r3, [sp, #124]	; 0x7c
   85210:	bfb8      	it	lt
   85212:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   85214:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   85218:	bfb8      	it	lt
   8521a:	f1c3 0301 	rsblt	r3, r3, #1
   8521e:	2b09      	cmp	r3, #9
   85220:	f340 811f 	ble.w	85462 <_svfprintf_r+0x13a2>
   85224:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   85228:	4601      	mov	r1, r0
   8522a:	4c68      	ldr	r4, [pc, #416]	; (853cc <_svfprintf_r+0x130c>)
   8522c:	e000      	b.n	85230 <_svfprintf_r+0x1170>
   8522e:	4611      	mov	r1, r2
   85230:	fb84 5203 	smull	r5, r2, r4, r3
   85234:	17dd      	asrs	r5, r3, #31
   85236:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   8523a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   8523e:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   85242:	3230      	adds	r2, #48	; 0x30
   85244:	2d09      	cmp	r5, #9
   85246:	f801 2c01 	strb.w	r2, [r1, #-1]
   8524a:	462b      	mov	r3, r5
   8524c:	f101 32ff 	add.w	r2, r1, #4294967295
   85250:	dced      	bgt.n	8522e <_svfprintf_r+0x116e>
   85252:	3330      	adds	r3, #48	; 0x30
   85254:	3902      	subs	r1, #2
   85256:	b2dc      	uxtb	r4, r3
   85258:	4288      	cmp	r0, r1
   8525a:	f802 4c01 	strb.w	r4, [r2, #-1]
   8525e:	f240 8192 	bls.w	85586 <_svfprintf_r+0x14c6>
   85262:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   85266:	4613      	mov	r3, r2
   85268:	e001      	b.n	8526e <_svfprintf_r+0x11ae>
   8526a:	f813 4b01 	ldrb.w	r4, [r3], #1
   8526e:	4283      	cmp	r3, r0
   85270:	f801 4b01 	strb.w	r4, [r1], #1
   85274:	d1f9      	bne.n	8526a <_svfprintf_r+0x11aa>
   85276:	3301      	adds	r3, #1
   85278:	1a9b      	subs	r3, r3, r2
   8527a:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   8527e:	4413      	add	r3, r2
   85280:	aa21      	add	r2, sp, #132	; 0x84
   85282:	1a9b      	subs	r3, r3, r2
   85284:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85286:	931b      	str	r3, [sp, #108]	; 0x6c
   85288:	2a01      	cmp	r2, #1
   8528a:	4413      	add	r3, r2
   8528c:	930e      	str	r3, [sp, #56]	; 0x38
   8528e:	f340 8148 	ble.w	85522 <_svfprintf_r+0x1462>
   85292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85294:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85296:	4413      	add	r3, r2
   85298:	930e      	str	r3, [sp, #56]	; 0x38
   8529a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8529e:	9308      	str	r3, [sp, #32]
   852a0:	2300      	movs	r3, #0
   852a2:	9312      	str	r3, [sp, #72]	; 0x48
   852a4:	e714      	b.n	850d0 <_svfprintf_r+0x1010>
   852a6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   852a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   852aa:	f7ff b876 	b.w	8439a <_svfprintf_r+0x2da>
   852ae:	aa25      	add	r2, sp, #148	; 0x94
   852b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   852b2:	980c      	ldr	r0, [sp, #48]	; 0x30
   852b4:	f001 ff78 	bl	871a8 <__ssprint_r>
   852b8:	2800      	cmp	r0, #0
   852ba:	f47e afde 	bne.w	8427a <_svfprintf_r+0x1ba>
   852be:	46c8      	mov	r8, r9
   852c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   852c2:	e4fb      	b.n	84cbc <_svfprintf_r+0xbfc>
   852c4:	4623      	mov	r3, r4
   852c6:	e6e3      	b.n	85090 <_svfprintf_r+0xfd0>
   852c8:	aa25      	add	r2, sp, #148	; 0x94
   852ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   852cc:	980c      	ldr	r0, [sp, #48]	; 0x30
   852ce:	f001 ff6b 	bl	871a8 <__ssprint_r>
   852d2:	2800      	cmp	r0, #0
   852d4:	f47e afd1 	bne.w	8427a <_svfprintf_r+0x1ba>
   852d8:	46c8      	mov	r8, r9
   852da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   852dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   852de:	e5d3      	b.n	84e88 <_svfprintf_r+0xdc8>
   852e0:	aa25      	add	r2, sp, #148	; 0x94
   852e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   852e4:	980c      	ldr	r0, [sp, #48]	; 0x30
   852e6:	f001 ff5f 	bl	871a8 <__ssprint_r>
   852ea:	2800      	cmp	r0, #0
   852ec:	f47e afc5 	bne.w	8427a <_svfprintf_r+0x1ba>
   852f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   852f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   852f4:	46c8      	mov	r8, r9
   852f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   852f8:	1a9a      	subs	r2, r3, r2
   852fa:	e5dd      	b.n	84eb8 <_svfprintf_r+0xdf8>
   852fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   852fe:	f7ff b8fe 	b.w	844fe <_svfprintf_r+0x43e>
   85302:	aa25      	add	r2, sp, #148	; 0x94
   85304:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85306:	980c      	ldr	r0, [sp, #48]	; 0x30
   85308:	f001 ff4e 	bl	871a8 <__ssprint_r>
   8530c:	2800      	cmp	r0, #0
   8530e:	f47e afb4 	bne.w	8427a <_svfprintf_r+0x1ba>
   85312:	46c8      	mov	r8, r9
   85314:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85316:	e5b0      	b.n	84e7a <_svfprintf_r+0xdba>
   85318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8531a:	4637      	mov	r7, r6
   8531c:	2b06      	cmp	r3, #6
   8531e:	bf28      	it	cs
   85320:	2306      	movcs	r3, #6
   85322:	960a      	str	r6, [sp, #40]	; 0x28
   85324:	9612      	str	r6, [sp, #72]	; 0x48
   85326:	9308      	str	r3, [sp, #32]
   85328:	940f      	str	r4, [sp, #60]	; 0x3c
   8532a:	f8cd b01c 	str.w	fp, [sp, #28]
   8532e:	930e      	str	r3, [sp, #56]	; 0x38
   85330:	4e27      	ldr	r6, [pc, #156]	; (853d0 <_svfprintf_r+0x1310>)
   85332:	f7fe bfe9 	b.w	84308 <_svfprintf_r+0x248>
   85336:	2306      	movs	r3, #6
   85338:	930a      	str	r3, [sp, #40]	; 0x28
   8533a:	e663      	b.n	85004 <_svfprintf_r+0xf44>
   8533c:	232d      	movs	r3, #45	; 0x2d
   8533e:	461f      	mov	r7, r3
   85340:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85344:	f7ff ba28 	b.w	84798 <_svfprintf_r+0x6d8>
   85348:	2003      	movs	r0, #3
   8534a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8534c:	a923      	add	r1, sp, #140	; 0x8c
   8534e:	e88d 0011 	stmia.w	sp, {r0, r4}
   85352:	9104      	str	r1, [sp, #16]
   85354:	a820      	add	r0, sp, #128	; 0x80
   85356:	a91f      	add	r1, sp, #124	; 0x7c
   85358:	9003      	str	r0, [sp, #12]
   8535a:	9a08      	ldr	r2, [sp, #32]
   8535c:	463b      	mov	r3, r7
   8535e:	9102      	str	r1, [sp, #8]
   85360:	980c      	ldr	r0, [sp, #48]	; 0x30
   85362:	f000 f9d1 	bl	85708 <_dtoa_r>
   85366:	4625      	mov	r5, r4
   85368:	4606      	mov	r6, r0
   8536a:	1904      	adds	r4, r0, r4
   8536c:	e719      	b.n	851a2 <_svfprintf_r+0x10e2>
   8536e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85370:	4d15      	ldr	r5, [pc, #84]	; (853c8 <_svfprintf_r+0x1308>)
   85372:	f7ff bb7e 	b.w	84a72 <_svfprintf_r+0x9b2>
   85376:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8537a:	4413      	add	r3, r2
   8537c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8537e:	930e      	str	r3, [sp, #56]	; 0x38
   85380:	2a00      	cmp	r2, #0
   85382:	f340 80c7 	ble.w	85514 <_svfprintf_r+0x1454>
   85386:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8538a:	9308      	str	r3, [sp, #32]
   8538c:	2367      	movs	r3, #103	; 0x67
   8538e:	9311      	str	r3, [sp, #68]	; 0x44
   85390:	e69e      	b.n	850d0 <_svfprintf_r+0x1010>
   85392:	2b00      	cmp	r3, #0
   85394:	f340 80e1 	ble.w	8555a <_svfprintf_r+0x149a>
   85398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8539a:	2a00      	cmp	r2, #0
   8539c:	f040 80b0 	bne.w	85500 <_svfprintf_r+0x1440>
   853a0:	f01b 0f01 	tst.w	fp, #1
   853a4:	f040 80ac 	bne.w	85500 <_svfprintf_r+0x1440>
   853a8:	9308      	str	r3, [sp, #32]
   853aa:	930e      	str	r3, [sp, #56]	; 0x38
   853ac:	e690      	b.n	850d0 <_svfprintf_r+0x1010>
   853ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   853b0:	940f      	str	r4, [sp, #60]	; 0x3c
   853b2:	9308      	str	r3, [sp, #32]
   853b4:	930e      	str	r3, [sp, #56]	; 0x38
   853b6:	900a      	str	r0, [sp, #40]	; 0x28
   853b8:	f8cd b01c 	str.w	fp, [sp, #28]
   853bc:	9012      	str	r0, [sp, #72]	; 0x48
   853be:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   853c2:	f7fe bfa1 	b.w	84308 <_svfprintf_r+0x248>
   853c6:	bf00      	nop
   853c8:	00088564 	.word	0x00088564
   853cc:	66666667 	.word	0x66666667
   853d0:	00088548 	.word	0x00088548
   853d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   853d6:	2b47      	cmp	r3, #71	; 0x47
   853d8:	f47f ae46 	bne.w	85068 <_svfprintf_r+0xfa8>
   853dc:	f01b 0f01 	tst.w	fp, #1
   853e0:	f47f aeda 	bne.w	85198 <_svfprintf_r+0x10d8>
   853e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   853e6:	1b9b      	subs	r3, r3, r6
   853e8:	9313      	str	r3, [sp, #76]	; 0x4c
   853ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   853ec:	2b47      	cmp	r3, #71	; 0x47
   853ee:	f43f aef7 	beq.w	851e0 <_svfprintf_r+0x1120>
   853f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   853f4:	9312      	str	r3, [sp, #72]	; 0x48
   853f6:	e700      	b.n	851fa <_svfprintf_r+0x113a>
   853f8:	2000      	movs	r0, #0
   853fa:	900a      	str	r0, [sp, #40]	; 0x28
   853fc:	f7fe bebc 	b.w	84178 <_svfprintf_r+0xb8>
   85400:	424f      	negs	r7, r1
   85402:	3110      	adds	r1, #16
   85404:	da35      	bge.n	85472 <_svfprintf_r+0x13b2>
   85406:	2410      	movs	r4, #16
   85408:	4d6a      	ldr	r5, [pc, #424]	; (855b4 <_svfprintf_r+0x14f4>)
   8540a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8540e:	e004      	b.n	8541a <_svfprintf_r+0x135a>
   85410:	f108 0808 	add.w	r8, r8, #8
   85414:	3f10      	subs	r7, #16
   85416:	2f10      	cmp	r7, #16
   85418:	dd2c      	ble.n	85474 <_svfprintf_r+0x13b4>
   8541a:	3301      	adds	r3, #1
   8541c:	3210      	adds	r2, #16
   8541e:	2b07      	cmp	r3, #7
   85420:	9227      	str	r2, [sp, #156]	; 0x9c
   85422:	9326      	str	r3, [sp, #152]	; 0x98
   85424:	f8c8 5000 	str.w	r5, [r8]
   85428:	f8c8 4004 	str.w	r4, [r8, #4]
   8542c:	ddf0      	ble.n	85410 <_svfprintf_r+0x1350>
   8542e:	aa25      	add	r2, sp, #148	; 0x94
   85430:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85432:	4658      	mov	r0, fp
   85434:	f001 feb8 	bl	871a8 <__ssprint_r>
   85438:	2800      	cmp	r0, #0
   8543a:	f47e af1e 	bne.w	8427a <_svfprintf_r+0x1ba>
   8543e:	46c8      	mov	r8, r9
   85440:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85442:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85444:	e7e6      	b.n	85414 <_svfprintf_r+0x1354>
   85446:	aa25      	add	r2, sp, #148	; 0x94
   85448:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8544a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8544c:	f001 feac 	bl	871a8 <__ssprint_r>
   85450:	2800      	cmp	r0, #0
   85452:	f47e af12 	bne.w	8427a <_svfprintf_r+0x1ba>
   85456:	46c8      	mov	r8, r9
   85458:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8545a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8545c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8545e:	f7ff bbc3 	b.w	84be8 <_svfprintf_r+0xb28>
   85462:	2230      	movs	r2, #48	; 0x30
   85464:	4413      	add	r3, r2
   85466:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   8546a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   8546e:	ab22      	add	r3, sp, #136	; 0x88
   85470:	e706      	b.n	85280 <_svfprintf_r+0x11c0>
   85472:	4d50      	ldr	r5, [pc, #320]	; (855b4 <_svfprintf_r+0x14f4>)
   85474:	3301      	adds	r3, #1
   85476:	443a      	add	r2, r7
   85478:	2b07      	cmp	r3, #7
   8547a:	e888 00a0 	stmia.w	r8, {r5, r7}
   8547e:	9227      	str	r2, [sp, #156]	; 0x9c
   85480:	9326      	str	r3, [sp, #152]	; 0x98
   85482:	f108 0808 	add.w	r8, r8, #8
   85486:	f77f abb2 	ble.w	84bee <_svfprintf_r+0xb2e>
   8548a:	aa25      	add	r2, sp, #148	; 0x94
   8548c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8548e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85490:	f001 fe8a 	bl	871a8 <__ssprint_r>
   85494:	2800      	cmp	r0, #0
   85496:	f47e aef0 	bne.w	8427a <_svfprintf_r+0x1ba>
   8549a:	46c8      	mov	r8, r9
   8549c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8549e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   854a0:	f7ff bba5 	b.w	84bee <_svfprintf_r+0xb2e>
   854a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   854a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   854a8:	4413      	add	r3, r2
   854aa:	930e      	str	r3, [sp, #56]	; 0x38
   854ac:	e76b      	b.n	85386 <_svfprintf_r+0x12c6>
   854ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   854b0:	e5ee      	b.n	85090 <_svfprintf_r+0xfd0>
   854b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   854b4:	4d3f      	ldr	r5, [pc, #252]	; (855b4 <_svfprintf_r+0x14f4>)
   854b6:	e4bb      	b.n	84e30 <_svfprintf_r+0xd70>
   854b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   854ba:	9808      	ldr	r0, [sp, #32]
   854bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   854be:	4639      	mov	r1, r7
   854c0:	f002 fd5c 	bl	87f7c <__aeabi_dcmpeq>
   854c4:	2800      	cmp	r0, #0
   854c6:	f47f ae70 	bne.w	851aa <_svfprintf_r+0x10ea>
   854ca:	f1c5 0501 	rsb	r5, r5, #1
   854ce:	951f      	str	r5, [sp, #124]	; 0x7c
   854d0:	442c      	add	r4, r5
   854d2:	e5ca      	b.n	8506a <_svfprintf_r+0xfaa>
   854d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   854d6:	4e38      	ldr	r6, [pc, #224]	; (855b8 <_svfprintf_r+0x14f8>)
   854d8:	2b00      	cmp	r3, #0
   854da:	bfbe      	ittt	lt
   854dc:	232d      	movlt	r3, #45	; 0x2d
   854de:	461f      	movlt	r7, r3
   854e0:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   854e4:	f04f 0303 	mov.w	r3, #3
   854e8:	461a      	mov	r2, r3
   854ea:	9308      	str	r3, [sp, #32]
   854ec:	f04f 0300 	mov.w	r3, #0
   854f0:	bfa8      	it	ge
   854f2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   854f6:	4619      	mov	r1, r3
   854f8:	930a      	str	r3, [sp, #40]	; 0x28
   854fa:	4b30      	ldr	r3, [pc, #192]	; (855bc <_svfprintf_r+0x14fc>)
   854fc:	f7ff b954 	b.w	847a8 <_svfprintf_r+0x6e8>
   85500:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85502:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85504:	4413      	add	r3, r2
   85506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85508:	441a      	add	r2, r3
   8550a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8550e:	920e      	str	r2, [sp, #56]	; 0x38
   85510:	9308      	str	r3, [sp, #32]
   85512:	e5dd      	b.n	850d0 <_svfprintf_r+0x1010>
   85514:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85518:	f1c3 0301 	rsb	r3, r3, #1
   8551c:	441a      	add	r2, r3
   8551e:	4613      	mov	r3, r2
   85520:	e7c3      	b.n	854aa <_svfprintf_r+0x13ea>
   85522:	f01b 0301 	ands.w	r3, fp, #1
   85526:	9312      	str	r3, [sp, #72]	; 0x48
   85528:	f47f aeb3 	bne.w	85292 <_svfprintf_r+0x11d2>
   8552c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8552e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85532:	9308      	str	r3, [sp, #32]
   85534:	e5cc      	b.n	850d0 <_svfprintf_r+0x1010>
   85536:	4d1f      	ldr	r5, [pc, #124]	; (855b4 <_svfprintf_r+0x14f4>)
   85538:	e43c      	b.n	84db4 <_svfprintf_r+0xcf4>
   8553a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8553c:	4d1d      	ldr	r5, [pc, #116]	; (855b4 <_svfprintf_r+0x14f4>)
   8553e:	e491      	b.n	84e64 <_svfprintf_r+0xda4>
   85540:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   85542:	f89a 3001 	ldrb.w	r3, [sl, #1]
   85546:	6828      	ldr	r0, [r5, #0]
   85548:	46a2      	mov	sl, r4
   8554a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8554e:	900a      	str	r0, [sp, #40]	; 0x28
   85550:	4628      	mov	r0, r5
   85552:	3004      	adds	r0, #4
   85554:	900f      	str	r0, [sp, #60]	; 0x3c
   85556:	f7fe be0d 	b.w	84174 <_svfprintf_r+0xb4>
   8555a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8555c:	b913      	cbnz	r3, 85564 <_svfprintf_r+0x14a4>
   8555e:	f01b 0f01 	tst.w	fp, #1
   85562:	d002      	beq.n	8556a <_svfprintf_r+0x14aa>
   85564:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85566:	3301      	adds	r3, #1
   85568:	e7cd      	b.n	85506 <_svfprintf_r+0x1446>
   8556a:	2301      	movs	r3, #1
   8556c:	e71c      	b.n	853a8 <_svfprintf_r+0x12e8>
   8556e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85572:	f7ff b980 	b.w	84876 <_svfprintf_r+0x7b6>
   85576:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8557a:	f7ff b93a 	b.w	847f2 <_svfprintf_r+0x732>
   8557e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85582:	f7ff b84f 	b.w	84624 <_svfprintf_r+0x564>
   85586:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   8558a:	e679      	b.n	85280 <_svfprintf_r+0x11c0>
   8558c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85590:	f7ff b9b2 	b.w	848f8 <_svfprintf_r+0x838>
   85594:	f04f 32ff 	mov.w	r2, #4294967295
   85598:	230c      	movs	r3, #12
   8559a:	9209      	str	r2, [sp, #36]	; 0x24
   8559c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8559e:	6013      	str	r3, [r2, #0]
   855a0:	f7fe be74 	b.w	8428c <_svfprintf_r+0x1cc>
   855a4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   855a8:	f7ff b8c4 	b.w	84734 <_svfprintf_r+0x674>
   855ac:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   855b0:	f7ff b878 	b.w	846a4 <_svfprintf_r+0x5e4>
   855b4:	00088564 	.word	0x00088564
   855b8:	0008851c 	.word	0x0008851c
   855bc:	00088518 	.word	0x00088518

000855c0 <register_fini>:
   855c0:	4b02      	ldr	r3, [pc, #8]	; (855cc <register_fini+0xc>)
   855c2:	b113      	cbz	r3, 855ca <register_fini+0xa>
   855c4:	4802      	ldr	r0, [pc, #8]	; (855d0 <register_fini+0x10>)
   855c6:	f000 b805 	b.w	855d4 <atexit>
   855ca:	4770      	bx	lr
   855cc:	00000000 	.word	0x00000000
   855d0:	0008654d 	.word	0x0008654d

000855d4 <atexit>:
   855d4:	2300      	movs	r3, #0
   855d6:	4601      	mov	r1, r0
   855d8:	461a      	mov	r2, r3
   855da:	4618      	mov	r0, r3
   855dc:	f001 be62 	b.w	872a4 <__register_exitproc>

000855e0 <quorem>:
   855e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   855e4:	6903      	ldr	r3, [r0, #16]
   855e6:	690f      	ldr	r7, [r1, #16]
   855e8:	b083      	sub	sp, #12
   855ea:	429f      	cmp	r7, r3
   855ec:	f300 8088 	bgt.w	85700 <quorem+0x120>
   855f0:	3f01      	subs	r7, #1
   855f2:	f101 0614 	add.w	r6, r1, #20
   855f6:	f100 0a14 	add.w	sl, r0, #20
   855fa:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   855fe:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   85602:	3301      	adds	r3, #1
   85604:	fbb2 f8f3 	udiv	r8, r2, r3
   85608:	00bb      	lsls	r3, r7, #2
   8560a:	9300      	str	r3, [sp, #0]
   8560c:	eb06 0903 	add.w	r9, r6, r3
   85610:	4453      	add	r3, sl
   85612:	9301      	str	r3, [sp, #4]
   85614:	f1b8 0f00 	cmp.w	r8, #0
   85618:	d03b      	beq.n	85692 <quorem+0xb2>
   8561a:	2300      	movs	r3, #0
   8561c:	46b4      	mov	ip, r6
   8561e:	461c      	mov	r4, r3
   85620:	46d6      	mov	lr, sl
   85622:	f85c 2b04 	ldr.w	r2, [ip], #4
   85626:	f8de 5000 	ldr.w	r5, [lr]
   8562a:	fa1f fb82 	uxth.w	fp, r2
   8562e:	fb08 330b 	mla	r3, r8, fp, r3
   85632:	0c12      	lsrs	r2, r2, #16
   85634:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   85638:	fb08 bb02 	mla	fp, r8, r2, fp
   8563c:	b29a      	uxth	r2, r3
   8563e:	1aa2      	subs	r2, r4, r2
   85640:	b2ab      	uxth	r3, r5
   85642:	fa1f f48b 	uxth.w	r4, fp
   85646:	441a      	add	r2, r3
   85648:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   8564c:	eb04 4422 	add.w	r4, r4, r2, asr #16
   85650:	b292      	uxth	r2, r2
   85652:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   85656:	45e1      	cmp	r9, ip
   85658:	f84e 2b04 	str.w	r2, [lr], #4
   8565c:	ea4f 4424 	mov.w	r4, r4, asr #16
   85660:	ea4f 431b 	mov.w	r3, fp, lsr #16
   85664:	d2dd      	bcs.n	85622 <quorem+0x42>
   85666:	9b00      	ldr	r3, [sp, #0]
   85668:	f85a 3003 	ldr.w	r3, [sl, r3]
   8566c:	b98b      	cbnz	r3, 85692 <quorem+0xb2>
   8566e:	9c01      	ldr	r4, [sp, #4]
   85670:	1f23      	subs	r3, r4, #4
   85672:	459a      	cmp	sl, r3
   85674:	d20c      	bcs.n	85690 <quorem+0xb0>
   85676:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8567a:	b94b      	cbnz	r3, 85690 <quorem+0xb0>
   8567c:	f1a4 0308 	sub.w	r3, r4, #8
   85680:	e002      	b.n	85688 <quorem+0xa8>
   85682:	681a      	ldr	r2, [r3, #0]
   85684:	3b04      	subs	r3, #4
   85686:	b91a      	cbnz	r2, 85690 <quorem+0xb0>
   85688:	459a      	cmp	sl, r3
   8568a:	f107 37ff 	add.w	r7, r7, #4294967295
   8568e:	d3f8      	bcc.n	85682 <quorem+0xa2>
   85690:	6107      	str	r7, [r0, #16]
   85692:	4604      	mov	r4, r0
   85694:	f001 fc78 	bl	86f88 <__mcmp>
   85698:	2800      	cmp	r0, #0
   8569a:	db2d      	blt.n	856f8 <quorem+0x118>
   8569c:	4655      	mov	r5, sl
   8569e:	2300      	movs	r3, #0
   856a0:	f108 0801 	add.w	r8, r8, #1
   856a4:	f856 1b04 	ldr.w	r1, [r6], #4
   856a8:	6828      	ldr	r0, [r5, #0]
   856aa:	b28a      	uxth	r2, r1
   856ac:	1a9a      	subs	r2, r3, r2
   856ae:	0c0b      	lsrs	r3, r1, #16
   856b0:	b281      	uxth	r1, r0
   856b2:	440a      	add	r2, r1
   856b4:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   856b8:	eb03 4322 	add.w	r3, r3, r2, asr #16
   856bc:	b292      	uxth	r2, r2
   856be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   856c2:	45b1      	cmp	r9, r6
   856c4:	f845 2b04 	str.w	r2, [r5], #4
   856c8:	ea4f 4323 	mov.w	r3, r3, asr #16
   856cc:	d2ea      	bcs.n	856a4 <quorem+0xc4>
   856ce:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   856d2:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   856d6:	b97a      	cbnz	r2, 856f8 <quorem+0x118>
   856d8:	1f1a      	subs	r2, r3, #4
   856da:	4592      	cmp	sl, r2
   856dc:	d20b      	bcs.n	856f6 <quorem+0x116>
   856de:	f853 2c04 	ldr.w	r2, [r3, #-4]
   856e2:	b942      	cbnz	r2, 856f6 <quorem+0x116>
   856e4:	3b08      	subs	r3, #8
   856e6:	e002      	b.n	856ee <quorem+0x10e>
   856e8:	681a      	ldr	r2, [r3, #0]
   856ea:	3b04      	subs	r3, #4
   856ec:	b91a      	cbnz	r2, 856f6 <quorem+0x116>
   856ee:	459a      	cmp	sl, r3
   856f0:	f107 37ff 	add.w	r7, r7, #4294967295
   856f4:	d3f8      	bcc.n	856e8 <quorem+0x108>
   856f6:	6127      	str	r7, [r4, #16]
   856f8:	4640      	mov	r0, r8
   856fa:	b003      	add	sp, #12
   856fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85700:	2000      	movs	r0, #0
   85702:	b003      	add	sp, #12
   85704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085708 <_dtoa_r>:
   85708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8570c:	6c05      	ldr	r5, [r0, #64]	; 0x40
   8570e:	b09b      	sub	sp, #108	; 0x6c
   85710:	4604      	mov	r4, r0
   85712:	4692      	mov	sl, r2
   85714:	469b      	mov	fp, r3
   85716:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   85718:	b14d      	cbz	r5, 8572e <_dtoa_r+0x26>
   8571a:	2301      	movs	r3, #1
   8571c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8571e:	4629      	mov	r1, r5
   85720:	4093      	lsls	r3, r2
   85722:	60ab      	str	r3, [r5, #8]
   85724:	606a      	str	r2, [r5, #4]
   85726:	f001 fa57 	bl	86bd8 <_Bfree>
   8572a:	2300      	movs	r3, #0
   8572c:	6423      	str	r3, [r4, #64]	; 0x40
   8572e:	f1bb 0f00 	cmp.w	fp, #0
   85732:	465d      	mov	r5, fp
   85734:	db35      	blt.n	857a2 <_dtoa_r+0x9a>
   85736:	2300      	movs	r3, #0
   85738:	6033      	str	r3, [r6, #0]
   8573a:	4b9d      	ldr	r3, [pc, #628]	; (859b0 <_dtoa_r+0x2a8>)
   8573c:	43ab      	bics	r3, r5
   8573e:	d015      	beq.n	8576c <_dtoa_r+0x64>
   85740:	2200      	movs	r2, #0
   85742:	2300      	movs	r3, #0
   85744:	4650      	mov	r0, sl
   85746:	4659      	mov	r1, fp
   85748:	f002 fc18 	bl	87f7c <__aeabi_dcmpeq>
   8574c:	4680      	mov	r8, r0
   8574e:	2800      	cmp	r0, #0
   85750:	d02d      	beq.n	857ae <_dtoa_r+0xa6>
   85752:	2301      	movs	r3, #1
   85754:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85756:	6013      	str	r3, [r2, #0]
   85758:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8575a:	2b00      	cmp	r3, #0
   8575c:	f000 80bd 	beq.w	858da <_dtoa_r+0x1d2>
   85760:	4894      	ldr	r0, [pc, #592]	; (859b4 <_dtoa_r+0x2ac>)
   85762:	6018      	str	r0, [r3, #0]
   85764:	3801      	subs	r0, #1
   85766:	b01b      	add	sp, #108	; 0x6c
   85768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8576c:	f242 730f 	movw	r3, #9999	; 0x270f
   85770:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85772:	6013      	str	r3, [r2, #0]
   85774:	f1ba 0f00 	cmp.w	sl, #0
   85778:	d10d      	bne.n	85796 <_dtoa_r+0x8e>
   8577a:	f3c5 0513 	ubfx	r5, r5, #0, #20
   8577e:	b955      	cbnz	r5, 85796 <_dtoa_r+0x8e>
   85780:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85782:	488d      	ldr	r0, [pc, #564]	; (859b8 <_dtoa_r+0x2b0>)
   85784:	2b00      	cmp	r3, #0
   85786:	d0ee      	beq.n	85766 <_dtoa_r+0x5e>
   85788:	f100 0308 	add.w	r3, r0, #8
   8578c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8578e:	6013      	str	r3, [r2, #0]
   85790:	b01b      	add	sp, #108	; 0x6c
   85792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85796:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85798:	4888      	ldr	r0, [pc, #544]	; (859bc <_dtoa_r+0x2b4>)
   8579a:	2b00      	cmp	r3, #0
   8579c:	d0e3      	beq.n	85766 <_dtoa_r+0x5e>
   8579e:	1cc3      	adds	r3, r0, #3
   857a0:	e7f4      	b.n	8578c <_dtoa_r+0x84>
   857a2:	2301      	movs	r3, #1
   857a4:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   857a8:	6033      	str	r3, [r6, #0]
   857aa:	46ab      	mov	fp, r5
   857ac:	e7c5      	b.n	8573a <_dtoa_r+0x32>
   857ae:	aa18      	add	r2, sp, #96	; 0x60
   857b0:	ab19      	add	r3, sp, #100	; 0x64
   857b2:	9201      	str	r2, [sp, #4]
   857b4:	9300      	str	r3, [sp, #0]
   857b6:	4652      	mov	r2, sl
   857b8:	465b      	mov	r3, fp
   857ba:	4620      	mov	r0, r4
   857bc:	f001 fc8e 	bl	870dc <__d2b>
   857c0:	0d2b      	lsrs	r3, r5, #20
   857c2:	4681      	mov	r9, r0
   857c4:	d071      	beq.n	858aa <_dtoa_r+0x1a2>
   857c6:	4650      	mov	r0, sl
   857c8:	f3cb 0213 	ubfx	r2, fp, #0, #20
   857cc:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   857d0:	9f18      	ldr	r7, [sp, #96]	; 0x60
   857d2:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   857d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   857da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   857de:	2200      	movs	r2, #0
   857e0:	4b77      	ldr	r3, [pc, #476]	; (859c0 <_dtoa_r+0x2b8>)
   857e2:	f7fd fe7f 	bl	834e4 <__aeabi_dsub>
   857e6:	a36c      	add	r3, pc, #432	; (adr r3, 85998 <_dtoa_r+0x290>)
   857e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   857ec:	f002 f95e 	bl	87aac <__aeabi_dmul>
   857f0:	a36b      	add	r3, pc, #428	; (adr r3, 859a0 <_dtoa_r+0x298>)
   857f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   857f6:	f7fd fe77 	bl	834e8 <__adddf3>
   857fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   857fe:	4630      	mov	r0, r6
   85800:	f7fd ffbe 	bl	83780 <__aeabi_i2d>
   85804:	a368      	add	r3, pc, #416	; (adr r3, 859a8 <_dtoa_r+0x2a0>)
   85806:	e9d3 2300 	ldrd	r2, r3, [r3]
   8580a:	f002 f94f 	bl	87aac <__aeabi_dmul>
   8580e:	4602      	mov	r2, r0
   85810:	460b      	mov	r3, r1
   85812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   85816:	f7fd fe67 	bl	834e8 <__adddf3>
   8581a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8581e:	f002 fbf5 	bl	8800c <__aeabi_d2iz>
   85822:	2200      	movs	r2, #0
   85824:	9002      	str	r0, [sp, #8]
   85826:	2300      	movs	r3, #0
   85828:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8582c:	f002 fbb0 	bl	87f90 <__aeabi_dcmplt>
   85830:	2800      	cmp	r0, #0
   85832:	f040 816d 	bne.w	85b10 <_dtoa_r+0x408>
   85836:	9d02      	ldr	r5, [sp, #8]
   85838:	2d16      	cmp	r5, #22
   8583a:	f200 8157 	bhi.w	85aec <_dtoa_r+0x3e4>
   8583e:	4961      	ldr	r1, [pc, #388]	; (859c4 <_dtoa_r+0x2bc>)
   85840:	4652      	mov	r2, sl
   85842:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   85846:	465b      	mov	r3, fp
   85848:	e9d1 0100 	ldrd	r0, r1, [r1]
   8584c:	f002 fbbe 	bl	87fcc <__aeabi_dcmpgt>
   85850:	2800      	cmp	r0, #0
   85852:	f000 81be 	beq.w	85bd2 <_dtoa_r+0x4ca>
   85856:	1e6b      	subs	r3, r5, #1
   85858:	9302      	str	r3, [sp, #8]
   8585a:	2300      	movs	r3, #0
   8585c:	930e      	str	r3, [sp, #56]	; 0x38
   8585e:	1bbf      	subs	r7, r7, r6
   85860:	1e7b      	subs	r3, r7, #1
   85862:	9308      	str	r3, [sp, #32]
   85864:	f100 814e 	bmi.w	85b04 <_dtoa_r+0x3fc>
   85868:	2300      	movs	r3, #0
   8586a:	930a      	str	r3, [sp, #40]	; 0x28
   8586c:	9b02      	ldr	r3, [sp, #8]
   8586e:	2b00      	cmp	r3, #0
   85870:	f2c0 813f 	blt.w	85af2 <_dtoa_r+0x3ea>
   85874:	9a08      	ldr	r2, [sp, #32]
   85876:	930d      	str	r3, [sp, #52]	; 0x34
   85878:	4611      	mov	r1, r2
   8587a:	4419      	add	r1, r3
   8587c:	2300      	movs	r3, #0
   8587e:	9108      	str	r1, [sp, #32]
   85880:	930c      	str	r3, [sp, #48]	; 0x30
   85882:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85884:	2b09      	cmp	r3, #9
   85886:	d82a      	bhi.n	858de <_dtoa_r+0x1d6>
   85888:	2b05      	cmp	r3, #5
   8588a:	f340 8658 	ble.w	8653e <_dtoa_r+0xe36>
   8588e:	2500      	movs	r5, #0
   85890:	3b04      	subs	r3, #4
   85892:	9324      	str	r3, [sp, #144]	; 0x90
   85894:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85896:	3b02      	subs	r3, #2
   85898:	2b03      	cmp	r3, #3
   8589a:	f200 863f 	bhi.w	8651c <_dtoa_r+0xe14>
   8589e:	e8df f013 	tbh	[pc, r3, lsl #1]
   858a2:	03ce      	.short	0x03ce
   858a4:	03d902c3 	.word	0x03d902c3
   858a8:	045b      	.short	0x045b
   858aa:	9f18      	ldr	r7, [sp, #96]	; 0x60
   858ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
   858ae:	443e      	add	r6, r7
   858b0:	f206 4332 	addw	r3, r6, #1074	; 0x432
   858b4:	2b20      	cmp	r3, #32
   858b6:	f340 8187 	ble.w	85bc8 <_dtoa_r+0x4c0>
   858ba:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   858be:	f206 4012 	addw	r0, r6, #1042	; 0x412
   858c2:	409d      	lsls	r5, r3
   858c4:	fa2a f000 	lsr.w	r0, sl, r0
   858c8:	4328      	orrs	r0, r5
   858ca:	f7fd ff49 	bl	83760 <__aeabi_ui2d>
   858ce:	2301      	movs	r3, #1
   858d0:	3e01      	subs	r6, #1
   858d2:	9314      	str	r3, [sp, #80]	; 0x50
   858d4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   858d8:	e781      	b.n	857de <_dtoa_r+0xd6>
   858da:	483b      	ldr	r0, [pc, #236]	; (859c8 <_dtoa_r+0x2c0>)
   858dc:	e743      	b.n	85766 <_dtoa_r+0x5e>
   858de:	2100      	movs	r1, #0
   858e0:	4620      	mov	r0, r4
   858e2:	6461      	str	r1, [r4, #68]	; 0x44
   858e4:	9125      	str	r1, [sp, #148]	; 0x94
   858e6:	f001 f951 	bl	86b8c <_Balloc>
   858ea:	f04f 33ff 	mov.w	r3, #4294967295
   858ee:	9307      	str	r3, [sp, #28]
   858f0:	930f      	str	r3, [sp, #60]	; 0x3c
   858f2:	2301      	movs	r3, #1
   858f4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   858f6:	9004      	str	r0, [sp, #16]
   858f8:	6420      	str	r0, [r4, #64]	; 0x40
   858fa:	9224      	str	r2, [sp, #144]	; 0x90
   858fc:	930b      	str	r3, [sp, #44]	; 0x2c
   858fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85900:	2b00      	cmp	r3, #0
   85902:	f2c0 80d3 	blt.w	85aac <_dtoa_r+0x3a4>
   85906:	9a02      	ldr	r2, [sp, #8]
   85908:	2a0e      	cmp	r2, #14
   8590a:	f300 80cf 	bgt.w	85aac <_dtoa_r+0x3a4>
   8590e:	4b2d      	ldr	r3, [pc, #180]	; (859c4 <_dtoa_r+0x2bc>)
   85910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85914:	e9d3 2300 	ldrd	r2, r3, [r3]
   85918:	e9cd 2308 	strd	r2, r3, [sp, #32]
   8591c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8591e:	2b00      	cmp	r3, #0
   85920:	f2c0 83b4 	blt.w	8608c <_dtoa_r+0x984>
   85924:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   85928:	4650      	mov	r0, sl
   8592a:	462a      	mov	r2, r5
   8592c:	4633      	mov	r3, r6
   8592e:	4659      	mov	r1, fp
   85930:	f002 f9e6 	bl	87d00 <__aeabi_ddiv>
   85934:	f002 fb6a 	bl	8800c <__aeabi_d2iz>
   85938:	4680      	mov	r8, r0
   8593a:	f7fd ff21 	bl	83780 <__aeabi_i2d>
   8593e:	462a      	mov	r2, r5
   85940:	4633      	mov	r3, r6
   85942:	f002 f8b3 	bl	87aac <__aeabi_dmul>
   85946:	4602      	mov	r2, r0
   85948:	460b      	mov	r3, r1
   8594a:	4650      	mov	r0, sl
   8594c:	4659      	mov	r1, fp
   8594e:	f7fd fdc9 	bl	834e4 <__aeabi_dsub>
   85952:	9e07      	ldr	r6, [sp, #28]
   85954:	9f04      	ldr	r7, [sp, #16]
   85956:	f108 0530 	add.w	r5, r8, #48	; 0x30
   8595a:	2e01      	cmp	r6, #1
   8595c:	703d      	strb	r5, [r7, #0]
   8595e:	4602      	mov	r2, r0
   85960:	460b      	mov	r3, r1
   85962:	f107 0501 	add.w	r5, r7, #1
   85966:	d064      	beq.n	85a32 <_dtoa_r+0x32a>
   85968:	2200      	movs	r2, #0
   8596a:	4b18      	ldr	r3, [pc, #96]	; (859cc <_dtoa_r+0x2c4>)
   8596c:	f002 f89e 	bl	87aac <__aeabi_dmul>
   85970:	2200      	movs	r2, #0
   85972:	2300      	movs	r3, #0
   85974:	4606      	mov	r6, r0
   85976:	460f      	mov	r7, r1
   85978:	f002 fb00 	bl	87f7c <__aeabi_dcmpeq>
   8597c:	2800      	cmp	r0, #0
   8597e:	f040 8082 	bne.w	85a86 <_dtoa_r+0x37e>
   85982:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   85986:	f04f 0a00 	mov.w	sl, #0
   8598a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   8598e:	f04f 0b00 	mov.w	fp, #0
   85992:	940b      	str	r4, [sp, #44]	; 0x2c
   85994:	e029      	b.n	859ea <_dtoa_r+0x2e2>
   85996:	bf00      	nop
   85998:	636f4361 	.word	0x636f4361
   8599c:	3fd287a7 	.word	0x3fd287a7
   859a0:	8b60c8b3 	.word	0x8b60c8b3
   859a4:	3fc68a28 	.word	0x3fc68a28
   859a8:	509f79fb 	.word	0x509f79fb
   859ac:	3fd34413 	.word	0x3fd34413
   859b0:	7ff00000 	.word	0x7ff00000
   859b4:	00088551 	.word	0x00088551
   859b8:	00088574 	.word	0x00088574
   859bc:	00088580 	.word	0x00088580
   859c0:	3ff80000 	.word	0x3ff80000
   859c4:	000885b0 	.word	0x000885b0
   859c8:	00088550 	.word	0x00088550
   859cc:	40240000 	.word	0x40240000
   859d0:	2200      	movs	r2, #0
   859d2:	4b81      	ldr	r3, [pc, #516]	; (85bd8 <_dtoa_r+0x4d0>)
   859d4:	f002 f86a 	bl	87aac <__aeabi_dmul>
   859d8:	4652      	mov	r2, sl
   859da:	465b      	mov	r3, fp
   859dc:	4606      	mov	r6, r0
   859de:	460f      	mov	r7, r1
   859e0:	f002 facc 	bl	87f7c <__aeabi_dcmpeq>
   859e4:	2800      	cmp	r0, #0
   859e6:	f040 83ba 	bne.w	8615e <_dtoa_r+0xa56>
   859ea:	4642      	mov	r2, r8
   859ec:	464b      	mov	r3, r9
   859ee:	4630      	mov	r0, r6
   859f0:	4639      	mov	r1, r7
   859f2:	f002 f985 	bl	87d00 <__aeabi_ddiv>
   859f6:	f002 fb09 	bl	8800c <__aeabi_d2iz>
   859fa:	4604      	mov	r4, r0
   859fc:	f7fd fec0 	bl	83780 <__aeabi_i2d>
   85a00:	4642      	mov	r2, r8
   85a02:	464b      	mov	r3, r9
   85a04:	f002 f852 	bl	87aac <__aeabi_dmul>
   85a08:	4602      	mov	r2, r0
   85a0a:	460b      	mov	r3, r1
   85a0c:	4630      	mov	r0, r6
   85a0e:	4639      	mov	r1, r7
   85a10:	f7fd fd68 	bl	834e4 <__aeabi_dsub>
   85a14:	f104 0630 	add.w	r6, r4, #48	; 0x30
   85a18:	f805 6b01 	strb.w	r6, [r5], #1
   85a1c:	9e04      	ldr	r6, [sp, #16]
   85a1e:	9f07      	ldr	r7, [sp, #28]
   85a20:	1bae      	subs	r6, r5, r6
   85a22:	42be      	cmp	r6, r7
   85a24:	4602      	mov	r2, r0
   85a26:	460b      	mov	r3, r1
   85a28:	d1d2      	bne.n	859d0 <_dtoa_r+0x2c8>
   85a2a:	46a0      	mov	r8, r4
   85a2c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85a30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85a32:	4610      	mov	r0, r2
   85a34:	4619      	mov	r1, r3
   85a36:	f7fd fd57 	bl	834e8 <__adddf3>
   85a3a:	4606      	mov	r6, r0
   85a3c:	460f      	mov	r7, r1
   85a3e:	4602      	mov	r2, r0
   85a40:	460b      	mov	r3, r1
   85a42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85a46:	f002 faa3 	bl	87f90 <__aeabi_dcmplt>
   85a4a:	b948      	cbnz	r0, 85a60 <_dtoa_r+0x358>
   85a4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85a50:	4632      	mov	r2, r6
   85a52:	463b      	mov	r3, r7
   85a54:	f002 fa92 	bl	87f7c <__aeabi_dcmpeq>
   85a58:	b1a8      	cbz	r0, 85a86 <_dtoa_r+0x37e>
   85a5a:	f018 0f01 	tst.w	r8, #1
   85a5e:	d012      	beq.n	85a86 <_dtoa_r+0x37e>
   85a60:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   85a64:	1e6b      	subs	r3, r5, #1
   85a66:	9a04      	ldr	r2, [sp, #16]
   85a68:	e004      	b.n	85a74 <_dtoa_r+0x36c>
   85a6a:	429a      	cmp	r2, r3
   85a6c:	f000 8402 	beq.w	86274 <_dtoa_r+0xb6c>
   85a70:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   85a74:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   85a78:	f103 0501 	add.w	r5, r3, #1
   85a7c:	d0f5      	beq.n	85a6a <_dtoa_r+0x362>
   85a7e:	f108 0801 	add.w	r8, r8, #1
   85a82:	f883 8000 	strb.w	r8, [r3]
   85a86:	4649      	mov	r1, r9
   85a88:	4620      	mov	r0, r4
   85a8a:	f001 f8a5 	bl	86bd8 <_Bfree>
   85a8e:	2200      	movs	r2, #0
   85a90:	9b02      	ldr	r3, [sp, #8]
   85a92:	702a      	strb	r2, [r5, #0]
   85a94:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85a96:	3301      	adds	r3, #1
   85a98:	6013      	str	r3, [r2, #0]
   85a9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85a9c:	2b00      	cmp	r3, #0
   85a9e:	f000 839f 	beq.w	861e0 <_dtoa_r+0xad8>
   85aa2:	9804      	ldr	r0, [sp, #16]
   85aa4:	601d      	str	r5, [r3, #0]
   85aa6:	b01b      	add	sp, #108	; 0x6c
   85aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85aac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85aae:	2a00      	cmp	r2, #0
   85ab0:	d03e      	beq.n	85b30 <_dtoa_r+0x428>
   85ab2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85ab4:	2a01      	cmp	r2, #1
   85ab6:	f340 8311 	ble.w	860dc <_dtoa_r+0x9d4>
   85aba:	9b07      	ldr	r3, [sp, #28]
   85abc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85abe:	1e5f      	subs	r7, r3, #1
   85ac0:	42ba      	cmp	r2, r7
   85ac2:	f2c0 8390 	blt.w	861e6 <_dtoa_r+0xade>
   85ac6:	1bd7      	subs	r7, r2, r7
   85ac8:	9b07      	ldr	r3, [sp, #28]
   85aca:	2b00      	cmp	r3, #0
   85acc:	f2c0 848c 	blt.w	863e8 <_dtoa_r+0xce0>
   85ad0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85ad2:	9b07      	ldr	r3, [sp, #28]
   85ad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85ad6:	2101      	movs	r1, #1
   85ad8:	441a      	add	r2, r3
   85ada:	920a      	str	r2, [sp, #40]	; 0x28
   85adc:	9a08      	ldr	r2, [sp, #32]
   85ade:	4620      	mov	r0, r4
   85ae0:	441a      	add	r2, r3
   85ae2:	9208      	str	r2, [sp, #32]
   85ae4:	f001 f914 	bl	86d10 <__i2b>
   85ae8:	4606      	mov	r6, r0
   85aea:	e023      	b.n	85b34 <_dtoa_r+0x42c>
   85aec:	2301      	movs	r3, #1
   85aee:	930e      	str	r3, [sp, #56]	; 0x38
   85af0:	e6b5      	b.n	8585e <_dtoa_r+0x156>
   85af2:	2300      	movs	r3, #0
   85af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85af6:	930d      	str	r3, [sp, #52]	; 0x34
   85af8:	9b02      	ldr	r3, [sp, #8]
   85afa:	1ad2      	subs	r2, r2, r3
   85afc:	425b      	negs	r3, r3
   85afe:	920a      	str	r2, [sp, #40]	; 0x28
   85b00:	930c      	str	r3, [sp, #48]	; 0x30
   85b02:	e6be      	b.n	85882 <_dtoa_r+0x17a>
   85b04:	f1c7 0301 	rsb	r3, r7, #1
   85b08:	930a      	str	r3, [sp, #40]	; 0x28
   85b0a:	2300      	movs	r3, #0
   85b0c:	9308      	str	r3, [sp, #32]
   85b0e:	e6ad      	b.n	8586c <_dtoa_r+0x164>
   85b10:	9d02      	ldr	r5, [sp, #8]
   85b12:	4628      	mov	r0, r5
   85b14:	f7fd fe34 	bl	83780 <__aeabi_i2d>
   85b18:	4602      	mov	r2, r0
   85b1a:	460b      	mov	r3, r1
   85b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   85b20:	f002 fa2c 	bl	87f7c <__aeabi_dcmpeq>
   85b24:	2800      	cmp	r0, #0
   85b26:	f47f ae86 	bne.w	85836 <_dtoa_r+0x12e>
   85b2a:	1e6b      	subs	r3, r5, #1
   85b2c:	9302      	str	r3, [sp, #8]
   85b2e:	e682      	b.n	85836 <_dtoa_r+0x12e>
   85b30:	ad0a      	add	r5, sp, #40	; 0x28
   85b32:	cde0      	ldmia	r5, {r5, r6, r7}
   85b34:	2d00      	cmp	r5, #0
   85b36:	dd0c      	ble.n	85b52 <_dtoa_r+0x44a>
   85b38:	9908      	ldr	r1, [sp, #32]
   85b3a:	2900      	cmp	r1, #0
   85b3c:	460b      	mov	r3, r1
   85b3e:	dd08      	ble.n	85b52 <_dtoa_r+0x44a>
   85b40:	42a9      	cmp	r1, r5
   85b42:	bfa8      	it	ge
   85b44:	462b      	movge	r3, r5
   85b46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85b48:	1aed      	subs	r5, r5, r3
   85b4a:	1ad2      	subs	r2, r2, r3
   85b4c:	1acb      	subs	r3, r1, r3
   85b4e:	920a      	str	r2, [sp, #40]	; 0x28
   85b50:	9308      	str	r3, [sp, #32]
   85b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85b54:	b1d3      	cbz	r3, 85b8c <_dtoa_r+0x484>
   85b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85b58:	2b00      	cmp	r3, #0
   85b5a:	f000 82b8 	beq.w	860ce <_dtoa_r+0x9c6>
   85b5e:	2f00      	cmp	r7, #0
   85b60:	dd10      	ble.n	85b84 <_dtoa_r+0x47c>
   85b62:	4631      	mov	r1, r6
   85b64:	463a      	mov	r2, r7
   85b66:	4620      	mov	r0, r4
   85b68:	f001 f96e 	bl	86e48 <__pow5mult>
   85b6c:	464a      	mov	r2, r9
   85b6e:	4601      	mov	r1, r0
   85b70:	4606      	mov	r6, r0
   85b72:	4620      	mov	r0, r4
   85b74:	f001 f8d6 	bl	86d24 <__multiply>
   85b78:	4603      	mov	r3, r0
   85b7a:	4649      	mov	r1, r9
   85b7c:	4620      	mov	r0, r4
   85b7e:	4699      	mov	r9, r3
   85b80:	f001 f82a 	bl	86bd8 <_Bfree>
   85b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85b86:	1bda      	subs	r2, r3, r7
   85b88:	f040 82a2 	bne.w	860d0 <_dtoa_r+0x9c8>
   85b8c:	2101      	movs	r1, #1
   85b8e:	4620      	mov	r0, r4
   85b90:	f001 f8be 	bl	86d10 <__i2b>
   85b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85b96:	4680      	mov	r8, r0
   85b98:	2b00      	cmp	r3, #0
   85b9a:	dd1f      	ble.n	85bdc <_dtoa_r+0x4d4>
   85b9c:	4601      	mov	r1, r0
   85b9e:	461a      	mov	r2, r3
   85ba0:	4620      	mov	r0, r4
   85ba2:	f001 f951 	bl	86e48 <__pow5mult>
   85ba6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85ba8:	4680      	mov	r8, r0
   85baa:	2b01      	cmp	r3, #1
   85bac:	f340 8255 	ble.w	8605a <_dtoa_r+0x952>
   85bb0:	2300      	movs	r3, #0
   85bb2:	930c      	str	r3, [sp, #48]	; 0x30
   85bb4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   85bb8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   85bbc:	6918      	ldr	r0, [r3, #16]
   85bbe:	f001 f857 	bl	86c70 <__hi0bits>
   85bc2:	f1c0 0020 	rsb	r0, r0, #32
   85bc6:	e013      	b.n	85bf0 <_dtoa_r+0x4e8>
   85bc8:	f1c3 0520 	rsb	r5, r3, #32
   85bcc:	fa0a f005 	lsl.w	r0, sl, r5
   85bd0:	e67b      	b.n	858ca <_dtoa_r+0x1c2>
   85bd2:	900e      	str	r0, [sp, #56]	; 0x38
   85bd4:	e643      	b.n	8585e <_dtoa_r+0x156>
   85bd6:	bf00      	nop
   85bd8:	40240000 	.word	0x40240000
   85bdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85bde:	2b01      	cmp	r3, #1
   85be0:	f340 8285 	ble.w	860ee <_dtoa_r+0x9e6>
   85be4:	2300      	movs	r3, #0
   85be6:	930c      	str	r3, [sp, #48]	; 0x30
   85be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85bea:	2001      	movs	r0, #1
   85bec:	2b00      	cmp	r3, #0
   85bee:	d1e1      	bne.n	85bb4 <_dtoa_r+0x4ac>
   85bf0:	9a08      	ldr	r2, [sp, #32]
   85bf2:	4410      	add	r0, r2
   85bf4:	f010 001f 	ands.w	r0, r0, #31
   85bf8:	f000 80a1 	beq.w	85d3e <_dtoa_r+0x636>
   85bfc:	f1c0 0320 	rsb	r3, r0, #32
   85c00:	2b04      	cmp	r3, #4
   85c02:	f340 8486 	ble.w	86512 <_dtoa_r+0xe0a>
   85c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85c08:	f1c0 001c 	rsb	r0, r0, #28
   85c0c:	4403      	add	r3, r0
   85c0e:	930a      	str	r3, [sp, #40]	; 0x28
   85c10:	4613      	mov	r3, r2
   85c12:	4403      	add	r3, r0
   85c14:	4405      	add	r5, r0
   85c16:	9308      	str	r3, [sp, #32]
   85c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85c1a:	2b00      	cmp	r3, #0
   85c1c:	dd05      	ble.n	85c2a <_dtoa_r+0x522>
   85c1e:	4649      	mov	r1, r9
   85c20:	461a      	mov	r2, r3
   85c22:	4620      	mov	r0, r4
   85c24:	f001 f960 	bl	86ee8 <__lshift>
   85c28:	4681      	mov	r9, r0
   85c2a:	9b08      	ldr	r3, [sp, #32]
   85c2c:	2b00      	cmp	r3, #0
   85c2e:	dd05      	ble.n	85c3c <_dtoa_r+0x534>
   85c30:	4641      	mov	r1, r8
   85c32:	461a      	mov	r2, r3
   85c34:	4620      	mov	r0, r4
   85c36:	f001 f957 	bl	86ee8 <__lshift>
   85c3a:	4680      	mov	r8, r0
   85c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85c3e:	2b00      	cmp	r3, #0
   85c40:	f040 8086 	bne.w	85d50 <_dtoa_r+0x648>
   85c44:	9b07      	ldr	r3, [sp, #28]
   85c46:	2b00      	cmp	r3, #0
   85c48:	f340 8264 	ble.w	86114 <_dtoa_r+0xa0c>
   85c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85c4e:	2b00      	cmp	r3, #0
   85c50:	f000 8098 	beq.w	85d84 <_dtoa_r+0x67c>
   85c54:	2d00      	cmp	r5, #0
   85c56:	dd05      	ble.n	85c64 <_dtoa_r+0x55c>
   85c58:	4631      	mov	r1, r6
   85c5a:	462a      	mov	r2, r5
   85c5c:	4620      	mov	r0, r4
   85c5e:	f001 f943 	bl	86ee8 <__lshift>
   85c62:	4606      	mov	r6, r0
   85c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85c66:	2b00      	cmp	r3, #0
   85c68:	f040 8336 	bne.w	862d8 <_dtoa_r+0xbd0>
   85c6c:	9608      	str	r6, [sp, #32]
   85c6e:	9b07      	ldr	r3, [sp, #28]
   85c70:	9a04      	ldr	r2, [sp, #16]
   85c72:	3b01      	subs	r3, #1
   85c74:	18d3      	adds	r3, r2, r3
   85c76:	930b      	str	r3, [sp, #44]	; 0x2c
   85c78:	4617      	mov	r7, r2
   85c7a:	f00a 0301 	and.w	r3, sl, #1
   85c7e:	46c2      	mov	sl, r8
   85c80:	f8dd b020 	ldr.w	fp, [sp, #32]
   85c84:	930c      	str	r3, [sp, #48]	; 0x30
   85c86:	4651      	mov	r1, sl
   85c88:	4648      	mov	r0, r9
   85c8a:	f7ff fca9 	bl	855e0 <quorem>
   85c8e:	4631      	mov	r1, r6
   85c90:	4605      	mov	r5, r0
   85c92:	4648      	mov	r0, r9
   85c94:	f001 f978 	bl	86f88 <__mcmp>
   85c98:	465a      	mov	r2, fp
   85c9a:	9007      	str	r0, [sp, #28]
   85c9c:	4651      	mov	r1, sl
   85c9e:	4620      	mov	r0, r4
   85ca0:	f001 f98e 	bl	86fc0 <__mdiff>
   85ca4:	68c2      	ldr	r2, [r0, #12]
   85ca6:	4680      	mov	r8, r0
   85ca8:	f105 0330 	add.w	r3, r5, #48	; 0x30
   85cac:	2a00      	cmp	r2, #0
   85cae:	f040 8229 	bne.w	86104 <_dtoa_r+0x9fc>
   85cb2:	4601      	mov	r1, r0
   85cb4:	4648      	mov	r0, r9
   85cb6:	930a      	str	r3, [sp, #40]	; 0x28
   85cb8:	f001 f966 	bl	86f88 <__mcmp>
   85cbc:	4641      	mov	r1, r8
   85cbe:	9008      	str	r0, [sp, #32]
   85cc0:	4620      	mov	r0, r4
   85cc2:	f000 ff89 	bl	86bd8 <_Bfree>
   85cc6:	9a08      	ldr	r2, [sp, #32]
   85cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85cca:	b932      	cbnz	r2, 85cda <_dtoa_r+0x5d2>
   85ccc:	9924      	ldr	r1, [sp, #144]	; 0x90
   85cce:	b921      	cbnz	r1, 85cda <_dtoa_r+0x5d2>
   85cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85cd2:	2a00      	cmp	r2, #0
   85cd4:	f000 83ee 	beq.w	864b4 <_dtoa_r+0xdac>
   85cd8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85cda:	9907      	ldr	r1, [sp, #28]
   85cdc:	2900      	cmp	r1, #0
   85cde:	f2c0 829f 	blt.w	86220 <_dtoa_r+0xb18>
   85ce2:	d105      	bne.n	85cf0 <_dtoa_r+0x5e8>
   85ce4:	9924      	ldr	r1, [sp, #144]	; 0x90
   85ce6:	b919      	cbnz	r1, 85cf0 <_dtoa_r+0x5e8>
   85ce8:	990c      	ldr	r1, [sp, #48]	; 0x30
   85cea:	2900      	cmp	r1, #0
   85cec:	f000 8298 	beq.w	86220 <_dtoa_r+0xb18>
   85cf0:	2a00      	cmp	r2, #0
   85cf2:	f300 8305 	bgt.w	86300 <_dtoa_r+0xbf8>
   85cf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85cf8:	f107 0801 	add.w	r8, r7, #1
   85cfc:	4297      	cmp	r7, r2
   85cfe:	703b      	strb	r3, [r7, #0]
   85d00:	4645      	mov	r5, r8
   85d02:	f000 830b 	beq.w	8631c <_dtoa_r+0xc14>
   85d06:	4649      	mov	r1, r9
   85d08:	2300      	movs	r3, #0
   85d0a:	220a      	movs	r2, #10
   85d0c:	4620      	mov	r0, r4
   85d0e:	f000 ff6d 	bl	86bec <__multadd>
   85d12:	455e      	cmp	r6, fp
   85d14:	4681      	mov	r9, r0
   85d16:	4631      	mov	r1, r6
   85d18:	f04f 0300 	mov.w	r3, #0
   85d1c:	f04f 020a 	mov.w	r2, #10
   85d20:	4620      	mov	r0, r4
   85d22:	f000 81e9 	beq.w	860f8 <_dtoa_r+0x9f0>
   85d26:	f000 ff61 	bl	86bec <__multadd>
   85d2a:	4659      	mov	r1, fp
   85d2c:	4606      	mov	r6, r0
   85d2e:	2300      	movs	r3, #0
   85d30:	220a      	movs	r2, #10
   85d32:	4620      	mov	r0, r4
   85d34:	f000 ff5a 	bl	86bec <__multadd>
   85d38:	4647      	mov	r7, r8
   85d3a:	4683      	mov	fp, r0
   85d3c:	e7a3      	b.n	85c86 <_dtoa_r+0x57e>
   85d3e:	201c      	movs	r0, #28
   85d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85d42:	4405      	add	r5, r0
   85d44:	4403      	add	r3, r0
   85d46:	930a      	str	r3, [sp, #40]	; 0x28
   85d48:	9b08      	ldr	r3, [sp, #32]
   85d4a:	4403      	add	r3, r0
   85d4c:	9308      	str	r3, [sp, #32]
   85d4e:	e763      	b.n	85c18 <_dtoa_r+0x510>
   85d50:	4641      	mov	r1, r8
   85d52:	4648      	mov	r0, r9
   85d54:	f001 f918 	bl	86f88 <__mcmp>
   85d58:	2800      	cmp	r0, #0
   85d5a:	f6bf af73 	bge.w	85c44 <_dtoa_r+0x53c>
   85d5e:	9f02      	ldr	r7, [sp, #8]
   85d60:	4649      	mov	r1, r9
   85d62:	2300      	movs	r3, #0
   85d64:	220a      	movs	r2, #10
   85d66:	4620      	mov	r0, r4
   85d68:	3f01      	subs	r7, #1
   85d6a:	9702      	str	r7, [sp, #8]
   85d6c:	f000 ff3e 	bl	86bec <__multadd>
   85d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85d72:	4681      	mov	r9, r0
   85d74:	2b00      	cmp	r3, #0
   85d76:	f040 83b5 	bne.w	864e4 <_dtoa_r+0xddc>
   85d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85d7c:	2b00      	cmp	r3, #0
   85d7e:	f340 83be 	ble.w	864fe <_dtoa_r+0xdf6>
   85d82:	9307      	str	r3, [sp, #28]
   85d84:	f8dd a010 	ldr.w	sl, [sp, #16]
   85d88:	9f07      	ldr	r7, [sp, #28]
   85d8a:	4655      	mov	r5, sl
   85d8c:	e006      	b.n	85d9c <_dtoa_r+0x694>
   85d8e:	4649      	mov	r1, r9
   85d90:	2300      	movs	r3, #0
   85d92:	220a      	movs	r2, #10
   85d94:	4620      	mov	r0, r4
   85d96:	f000 ff29 	bl	86bec <__multadd>
   85d9a:	4681      	mov	r9, r0
   85d9c:	4641      	mov	r1, r8
   85d9e:	4648      	mov	r0, r9
   85da0:	f7ff fc1e 	bl	855e0 <quorem>
   85da4:	3030      	adds	r0, #48	; 0x30
   85da6:	f805 0b01 	strb.w	r0, [r5], #1
   85daa:	eba5 030a 	sub.w	r3, r5, sl
   85dae:	42bb      	cmp	r3, r7
   85db0:	dbed      	blt.n	85d8e <_dtoa_r+0x686>
   85db2:	9b04      	ldr	r3, [sp, #16]
   85db4:	9a07      	ldr	r2, [sp, #28]
   85db6:	4682      	mov	sl, r0
   85db8:	2a01      	cmp	r2, #1
   85dba:	bfac      	ite	ge
   85dbc:	189b      	addge	r3, r3, r2
   85dbe:	3301      	addlt	r3, #1
   85dc0:	f04f 0b00 	mov.w	fp, #0
   85dc4:	461d      	mov	r5, r3
   85dc6:	4649      	mov	r1, r9
   85dc8:	2201      	movs	r2, #1
   85dca:	4620      	mov	r0, r4
   85dcc:	f001 f88c 	bl	86ee8 <__lshift>
   85dd0:	4641      	mov	r1, r8
   85dd2:	4681      	mov	r9, r0
   85dd4:	f001 f8d8 	bl	86f88 <__mcmp>
   85dd8:	2800      	cmp	r0, #0
   85dda:	f340 823f 	ble.w	8625c <_dtoa_r+0xb54>
   85dde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   85de2:	1e6b      	subs	r3, r5, #1
   85de4:	9904      	ldr	r1, [sp, #16]
   85de6:	e004      	b.n	85df2 <_dtoa_r+0x6ea>
   85de8:	428b      	cmp	r3, r1
   85dea:	f000 81ae 	beq.w	8614a <_dtoa_r+0xa42>
   85dee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   85df2:	2a39      	cmp	r2, #57	; 0x39
   85df4:	f103 0501 	add.w	r5, r3, #1
   85df8:	d0f6      	beq.n	85de8 <_dtoa_r+0x6e0>
   85dfa:	3201      	adds	r2, #1
   85dfc:	701a      	strb	r2, [r3, #0]
   85dfe:	4641      	mov	r1, r8
   85e00:	4620      	mov	r0, r4
   85e02:	f000 fee9 	bl	86bd8 <_Bfree>
   85e06:	2e00      	cmp	r6, #0
   85e08:	f43f ae3d 	beq.w	85a86 <_dtoa_r+0x37e>
   85e0c:	f1bb 0f00 	cmp.w	fp, #0
   85e10:	d005      	beq.n	85e1e <_dtoa_r+0x716>
   85e12:	45b3      	cmp	fp, r6
   85e14:	d003      	beq.n	85e1e <_dtoa_r+0x716>
   85e16:	4659      	mov	r1, fp
   85e18:	4620      	mov	r0, r4
   85e1a:	f000 fedd 	bl	86bd8 <_Bfree>
   85e1e:	4631      	mov	r1, r6
   85e20:	4620      	mov	r0, r4
   85e22:	f000 fed9 	bl	86bd8 <_Bfree>
   85e26:	e62e      	b.n	85a86 <_dtoa_r+0x37e>
   85e28:	2300      	movs	r3, #0
   85e2a:	930b      	str	r3, [sp, #44]	; 0x2c
   85e2c:	9b02      	ldr	r3, [sp, #8]
   85e2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   85e30:	4413      	add	r3, r2
   85e32:	930f      	str	r3, [sp, #60]	; 0x3c
   85e34:	3301      	adds	r3, #1
   85e36:	2b01      	cmp	r3, #1
   85e38:	461f      	mov	r7, r3
   85e3a:	461e      	mov	r6, r3
   85e3c:	bfb8      	it	lt
   85e3e:	2701      	movlt	r7, #1
   85e40:	9307      	str	r3, [sp, #28]
   85e42:	2100      	movs	r1, #0
   85e44:	2f17      	cmp	r7, #23
   85e46:	6461      	str	r1, [r4, #68]	; 0x44
   85e48:	d90a      	bls.n	85e60 <_dtoa_r+0x758>
   85e4a:	2201      	movs	r2, #1
   85e4c:	2304      	movs	r3, #4
   85e4e:	005b      	lsls	r3, r3, #1
   85e50:	f103 0014 	add.w	r0, r3, #20
   85e54:	4287      	cmp	r7, r0
   85e56:	4611      	mov	r1, r2
   85e58:	f102 0201 	add.w	r2, r2, #1
   85e5c:	d2f7      	bcs.n	85e4e <_dtoa_r+0x746>
   85e5e:	6461      	str	r1, [r4, #68]	; 0x44
   85e60:	4620      	mov	r0, r4
   85e62:	f000 fe93 	bl	86b8c <_Balloc>
   85e66:	2e0e      	cmp	r6, #14
   85e68:	9004      	str	r0, [sp, #16]
   85e6a:	6420      	str	r0, [r4, #64]	; 0x40
   85e6c:	f63f ad47 	bhi.w	858fe <_dtoa_r+0x1f6>
   85e70:	2d00      	cmp	r5, #0
   85e72:	f43f ad44 	beq.w	858fe <_dtoa_r+0x1f6>
   85e76:	9902      	ldr	r1, [sp, #8]
   85e78:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   85e7c:	2900      	cmp	r1, #0
   85e7e:	f340 8203 	ble.w	86288 <_dtoa_r+0xb80>
   85e82:	4bb9      	ldr	r3, [pc, #740]	; (86168 <_dtoa_r+0xa60>)
   85e84:	f001 020f 	and.w	r2, r1, #15
   85e88:	110d      	asrs	r5, r1, #4
   85e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85e8e:	06e9      	lsls	r1, r5, #27
   85e90:	e9d3 6700 	ldrd	r6, r7, [r3]
   85e94:	f140 81af 	bpl.w	861f6 <_dtoa_r+0xaee>
   85e98:	4bb4      	ldr	r3, [pc, #720]	; (8616c <_dtoa_r+0xa64>)
   85e9a:	4650      	mov	r0, sl
   85e9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   85ea0:	4659      	mov	r1, fp
   85ea2:	f001 ff2d 	bl	87d00 <__aeabi_ddiv>
   85ea6:	f04f 0a03 	mov.w	sl, #3
   85eaa:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   85eae:	f005 050f 	and.w	r5, r5, #15
   85eb2:	b18d      	cbz	r5, 85ed8 <_dtoa_r+0x7d0>
   85eb4:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8616c <_dtoa_r+0xa64>
   85eb8:	07ea      	lsls	r2, r5, #31
   85eba:	d509      	bpl.n	85ed0 <_dtoa_r+0x7c8>
   85ebc:	e9d8 2300 	ldrd	r2, r3, [r8]
   85ec0:	4630      	mov	r0, r6
   85ec2:	4639      	mov	r1, r7
   85ec4:	f001 fdf2 	bl	87aac <__aeabi_dmul>
   85ec8:	4606      	mov	r6, r0
   85eca:	460f      	mov	r7, r1
   85ecc:	f10a 0a01 	add.w	sl, sl, #1
   85ed0:	106d      	asrs	r5, r5, #1
   85ed2:	f108 0808 	add.w	r8, r8, #8
   85ed6:	d1ef      	bne.n	85eb8 <_dtoa_r+0x7b0>
   85ed8:	463b      	mov	r3, r7
   85eda:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   85ede:	4632      	mov	r2, r6
   85ee0:	f001 ff0e 	bl	87d00 <__aeabi_ddiv>
   85ee4:	4607      	mov	r7, r0
   85ee6:	4688      	mov	r8, r1
   85ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85eea:	b143      	cbz	r3, 85efe <_dtoa_r+0x7f6>
   85eec:	2200      	movs	r2, #0
   85eee:	4ba0      	ldr	r3, [pc, #640]	; (86170 <_dtoa_r+0xa68>)
   85ef0:	4638      	mov	r0, r7
   85ef2:	4641      	mov	r1, r8
   85ef4:	f002 f84c 	bl	87f90 <__aeabi_dcmplt>
   85ef8:	2800      	cmp	r0, #0
   85efa:	f040 8287 	bne.w	8640c <_dtoa_r+0xd04>
   85efe:	4650      	mov	r0, sl
   85f00:	f7fd fc3e 	bl	83780 <__aeabi_i2d>
   85f04:	463a      	mov	r2, r7
   85f06:	4643      	mov	r3, r8
   85f08:	f001 fdd0 	bl	87aac <__aeabi_dmul>
   85f0c:	4b99      	ldr	r3, [pc, #612]	; (86174 <_dtoa_r+0xa6c>)
   85f0e:	2200      	movs	r2, #0
   85f10:	f7fd faea 	bl	834e8 <__adddf3>
   85f14:	9b07      	ldr	r3, [sp, #28]
   85f16:	4605      	mov	r5, r0
   85f18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   85f1c:	2b00      	cmp	r3, #0
   85f1e:	f000 813f 	beq.w	861a0 <_dtoa_r+0xa98>
   85f22:	9b02      	ldr	r3, [sp, #8]
   85f24:	9315      	str	r3, [sp, #84]	; 0x54
   85f26:	9b07      	ldr	r3, [sp, #28]
   85f28:	9312      	str	r3, [sp, #72]	; 0x48
   85f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85f2c:	2b00      	cmp	r3, #0
   85f2e:	f000 81fb 	beq.w	86328 <_dtoa_r+0xc20>
   85f32:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85f34:	4b8c      	ldr	r3, [pc, #560]	; (86168 <_dtoa_r+0xa60>)
   85f36:	2000      	movs	r0, #0
   85f38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85f3c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   85f40:	498d      	ldr	r1, [pc, #564]	; (86178 <_dtoa_r+0xa70>)
   85f42:	f001 fedd 	bl	87d00 <__aeabi_ddiv>
   85f46:	462a      	mov	r2, r5
   85f48:	4633      	mov	r3, r6
   85f4a:	f7fd facb 	bl	834e4 <__aeabi_dsub>
   85f4e:	4682      	mov	sl, r0
   85f50:	468b      	mov	fp, r1
   85f52:	4638      	mov	r0, r7
   85f54:	4641      	mov	r1, r8
   85f56:	f002 f859 	bl	8800c <__aeabi_d2iz>
   85f5a:	4605      	mov	r5, r0
   85f5c:	f7fd fc10 	bl	83780 <__aeabi_i2d>
   85f60:	4602      	mov	r2, r0
   85f62:	460b      	mov	r3, r1
   85f64:	4638      	mov	r0, r7
   85f66:	4641      	mov	r1, r8
   85f68:	f7fd fabc 	bl	834e4 <__aeabi_dsub>
   85f6c:	3530      	adds	r5, #48	; 0x30
   85f6e:	fa5f f885 	uxtb.w	r8, r5
   85f72:	9d04      	ldr	r5, [sp, #16]
   85f74:	4606      	mov	r6, r0
   85f76:	460f      	mov	r7, r1
   85f78:	f885 8000 	strb.w	r8, [r5]
   85f7c:	4602      	mov	r2, r0
   85f7e:	460b      	mov	r3, r1
   85f80:	4650      	mov	r0, sl
   85f82:	4659      	mov	r1, fp
   85f84:	3501      	adds	r5, #1
   85f86:	f002 f821 	bl	87fcc <__aeabi_dcmpgt>
   85f8a:	2800      	cmp	r0, #0
   85f8c:	d154      	bne.n	86038 <_dtoa_r+0x930>
   85f8e:	4632      	mov	r2, r6
   85f90:	463b      	mov	r3, r7
   85f92:	2000      	movs	r0, #0
   85f94:	4976      	ldr	r1, [pc, #472]	; (86170 <_dtoa_r+0xa68>)
   85f96:	f7fd faa5 	bl	834e4 <__aeabi_dsub>
   85f9a:	4602      	mov	r2, r0
   85f9c:	460b      	mov	r3, r1
   85f9e:	4650      	mov	r0, sl
   85fa0:	4659      	mov	r1, fp
   85fa2:	f002 f813 	bl	87fcc <__aeabi_dcmpgt>
   85fa6:	2800      	cmp	r0, #0
   85fa8:	f040 8270 	bne.w	8648c <_dtoa_r+0xd84>
   85fac:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85fae:	2a01      	cmp	r2, #1
   85fb0:	f000 8112 	beq.w	861d8 <_dtoa_r+0xad0>
   85fb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85fb6:	9a04      	ldr	r2, [sp, #16]
   85fb8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   85fbc:	4413      	add	r3, r2
   85fbe:	4699      	mov	r9, r3
   85fc0:	e00f      	b.n	85fe2 <_dtoa_r+0x8da>
   85fc2:	4632      	mov	r2, r6
   85fc4:	463b      	mov	r3, r7
   85fc6:	2000      	movs	r0, #0
   85fc8:	4969      	ldr	r1, [pc, #420]	; (86170 <_dtoa_r+0xa68>)
   85fca:	f7fd fa8b 	bl	834e4 <__aeabi_dsub>
   85fce:	4652      	mov	r2, sl
   85fd0:	465b      	mov	r3, fp
   85fd2:	f001 ffdd 	bl	87f90 <__aeabi_dcmplt>
   85fd6:	2800      	cmp	r0, #0
   85fd8:	f040 8256 	bne.w	86488 <_dtoa_r+0xd80>
   85fdc:	454d      	cmp	r5, r9
   85fde:	f000 80f9 	beq.w	861d4 <_dtoa_r+0xacc>
   85fe2:	4650      	mov	r0, sl
   85fe4:	4659      	mov	r1, fp
   85fe6:	2200      	movs	r2, #0
   85fe8:	4b64      	ldr	r3, [pc, #400]	; (8617c <_dtoa_r+0xa74>)
   85fea:	f001 fd5f 	bl	87aac <__aeabi_dmul>
   85fee:	2200      	movs	r2, #0
   85ff0:	4b62      	ldr	r3, [pc, #392]	; (8617c <_dtoa_r+0xa74>)
   85ff2:	4682      	mov	sl, r0
   85ff4:	468b      	mov	fp, r1
   85ff6:	4630      	mov	r0, r6
   85ff8:	4639      	mov	r1, r7
   85ffa:	f001 fd57 	bl	87aac <__aeabi_dmul>
   85ffe:	460f      	mov	r7, r1
   86000:	4606      	mov	r6, r0
   86002:	f002 f803 	bl	8800c <__aeabi_d2iz>
   86006:	4680      	mov	r8, r0
   86008:	f7fd fbba 	bl	83780 <__aeabi_i2d>
   8600c:	4602      	mov	r2, r0
   8600e:	460b      	mov	r3, r1
   86010:	4630      	mov	r0, r6
   86012:	4639      	mov	r1, r7
   86014:	f7fd fa66 	bl	834e4 <__aeabi_dsub>
   86018:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8601c:	fa5f f888 	uxtb.w	r8, r8
   86020:	f805 8b01 	strb.w	r8, [r5], #1
   86024:	4652      	mov	r2, sl
   86026:	465b      	mov	r3, fp
   86028:	4606      	mov	r6, r0
   8602a:	460f      	mov	r7, r1
   8602c:	f001 ffb0 	bl	87f90 <__aeabi_dcmplt>
   86030:	2800      	cmp	r0, #0
   86032:	d0c6      	beq.n	85fc2 <_dtoa_r+0x8ba>
   86034:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   86038:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8603a:	9302      	str	r3, [sp, #8]
   8603c:	e523      	b.n	85a86 <_dtoa_r+0x37e>
   8603e:	2300      	movs	r3, #0
   86040:	930b      	str	r3, [sp, #44]	; 0x2c
   86042:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86044:	2b00      	cmp	r3, #0
   86046:	f340 80dd 	ble.w	86204 <_dtoa_r+0xafc>
   8604a:	461f      	mov	r7, r3
   8604c:	461e      	mov	r6, r3
   8604e:	930f      	str	r3, [sp, #60]	; 0x3c
   86050:	9307      	str	r3, [sp, #28]
   86052:	e6f6      	b.n	85e42 <_dtoa_r+0x73a>
   86054:	2301      	movs	r3, #1
   86056:	930b      	str	r3, [sp, #44]	; 0x2c
   86058:	e7f3      	b.n	86042 <_dtoa_r+0x93a>
   8605a:	f1ba 0f00 	cmp.w	sl, #0
   8605e:	f47f ada7 	bne.w	85bb0 <_dtoa_r+0x4a8>
   86062:	f3cb 0313 	ubfx	r3, fp, #0, #20
   86066:	2b00      	cmp	r3, #0
   86068:	f47f adbc 	bne.w	85be4 <_dtoa_r+0x4dc>
   8606c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   86070:	0d3f      	lsrs	r7, r7, #20
   86072:	053f      	lsls	r7, r7, #20
   86074:	2f00      	cmp	r7, #0
   86076:	f000 820d 	beq.w	86494 <_dtoa_r+0xd8c>
   8607a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8607c:	3301      	adds	r3, #1
   8607e:	930a      	str	r3, [sp, #40]	; 0x28
   86080:	9b08      	ldr	r3, [sp, #32]
   86082:	3301      	adds	r3, #1
   86084:	9308      	str	r3, [sp, #32]
   86086:	2301      	movs	r3, #1
   86088:	930c      	str	r3, [sp, #48]	; 0x30
   8608a:	e5ad      	b.n	85be8 <_dtoa_r+0x4e0>
   8608c:	9b07      	ldr	r3, [sp, #28]
   8608e:	2b00      	cmp	r3, #0
   86090:	f73f ac48 	bgt.w	85924 <_dtoa_r+0x21c>
   86094:	f040 8222 	bne.w	864dc <_dtoa_r+0xdd4>
   86098:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8609c:	2200      	movs	r2, #0
   8609e:	4b38      	ldr	r3, [pc, #224]	; (86180 <_dtoa_r+0xa78>)
   860a0:	f001 fd04 	bl	87aac <__aeabi_dmul>
   860a4:	4652      	mov	r2, sl
   860a6:	465b      	mov	r3, fp
   860a8:	f001 ff86 	bl	87fb8 <__aeabi_dcmpge>
   860ac:	f8dd 801c 	ldr.w	r8, [sp, #28]
   860b0:	4646      	mov	r6, r8
   860b2:	2800      	cmp	r0, #0
   860b4:	d041      	beq.n	8613a <_dtoa_r+0xa32>
   860b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   860b8:	9d04      	ldr	r5, [sp, #16]
   860ba:	43db      	mvns	r3, r3
   860bc:	9302      	str	r3, [sp, #8]
   860be:	4641      	mov	r1, r8
   860c0:	4620      	mov	r0, r4
   860c2:	f000 fd89 	bl	86bd8 <_Bfree>
   860c6:	2e00      	cmp	r6, #0
   860c8:	f43f acdd 	beq.w	85a86 <_dtoa_r+0x37e>
   860cc:	e6a7      	b.n	85e1e <_dtoa_r+0x716>
   860ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   860d0:	4649      	mov	r1, r9
   860d2:	4620      	mov	r0, r4
   860d4:	f000 feb8 	bl	86e48 <__pow5mult>
   860d8:	4681      	mov	r9, r0
   860da:	e557      	b.n	85b8c <_dtoa_r+0x484>
   860dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   860de:	2a00      	cmp	r2, #0
   860e0:	f000 8188 	beq.w	863f4 <_dtoa_r+0xcec>
   860e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   860e8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   860ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   860ec:	e4f2      	b.n	85ad4 <_dtoa_r+0x3cc>
   860ee:	f1ba 0f00 	cmp.w	sl, #0
   860f2:	f47f ad77 	bne.w	85be4 <_dtoa_r+0x4dc>
   860f6:	e7b4      	b.n	86062 <_dtoa_r+0x95a>
   860f8:	f000 fd78 	bl	86bec <__multadd>
   860fc:	4647      	mov	r7, r8
   860fe:	4606      	mov	r6, r0
   86100:	4683      	mov	fp, r0
   86102:	e5c0      	b.n	85c86 <_dtoa_r+0x57e>
   86104:	4601      	mov	r1, r0
   86106:	4620      	mov	r0, r4
   86108:	9308      	str	r3, [sp, #32]
   8610a:	f000 fd65 	bl	86bd8 <_Bfree>
   8610e:	2201      	movs	r2, #1
   86110:	9b08      	ldr	r3, [sp, #32]
   86112:	e5e2      	b.n	85cda <_dtoa_r+0x5d2>
   86114:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86116:	2b02      	cmp	r3, #2
   86118:	f77f ad98 	ble.w	85c4c <_dtoa_r+0x544>
   8611c:	9b07      	ldr	r3, [sp, #28]
   8611e:	2b00      	cmp	r3, #0
   86120:	d1c9      	bne.n	860b6 <_dtoa_r+0x9ae>
   86122:	4641      	mov	r1, r8
   86124:	2205      	movs	r2, #5
   86126:	4620      	mov	r0, r4
   86128:	f000 fd60 	bl	86bec <__multadd>
   8612c:	4601      	mov	r1, r0
   8612e:	4680      	mov	r8, r0
   86130:	4648      	mov	r0, r9
   86132:	f000 ff29 	bl	86f88 <__mcmp>
   86136:	2800      	cmp	r0, #0
   86138:	ddbd      	ble.n	860b6 <_dtoa_r+0x9ae>
   8613a:	2331      	movs	r3, #49	; 0x31
   8613c:	9a02      	ldr	r2, [sp, #8]
   8613e:	9904      	ldr	r1, [sp, #16]
   86140:	3201      	adds	r2, #1
   86142:	9202      	str	r2, [sp, #8]
   86144:	700b      	strb	r3, [r1, #0]
   86146:	1c4d      	adds	r5, r1, #1
   86148:	e7b9      	b.n	860be <_dtoa_r+0x9b6>
   8614a:	2331      	movs	r3, #49	; 0x31
   8614c:	9a02      	ldr	r2, [sp, #8]
   8614e:	3201      	adds	r2, #1
   86150:	9202      	str	r2, [sp, #8]
   86152:	9a04      	ldr	r2, [sp, #16]
   86154:	7013      	strb	r3, [r2, #0]
   86156:	e652      	b.n	85dfe <_dtoa_r+0x6f6>
   86158:	2301      	movs	r3, #1
   8615a:	930b      	str	r3, [sp, #44]	; 0x2c
   8615c:	e666      	b.n	85e2c <_dtoa_r+0x724>
   8615e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86162:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86164:	e48f      	b.n	85a86 <_dtoa_r+0x37e>
   86166:	bf00      	nop
   86168:	000885b0 	.word	0x000885b0
   8616c:	00088588 	.word	0x00088588
   86170:	3ff00000 	.word	0x3ff00000
   86174:	401c0000 	.word	0x401c0000
   86178:	3fe00000 	.word	0x3fe00000
   8617c:	40240000 	.word	0x40240000
   86180:	40140000 	.word	0x40140000
   86184:	4650      	mov	r0, sl
   86186:	f7fd fafb 	bl	83780 <__aeabi_i2d>
   8618a:	463a      	mov	r2, r7
   8618c:	4643      	mov	r3, r8
   8618e:	f001 fc8d 	bl	87aac <__aeabi_dmul>
   86192:	2200      	movs	r2, #0
   86194:	4bc1      	ldr	r3, [pc, #772]	; (8649c <_dtoa_r+0xd94>)
   86196:	f7fd f9a7 	bl	834e8 <__adddf3>
   8619a:	4605      	mov	r5, r0
   8619c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   861a0:	4641      	mov	r1, r8
   861a2:	2200      	movs	r2, #0
   861a4:	4bbe      	ldr	r3, [pc, #760]	; (864a0 <_dtoa_r+0xd98>)
   861a6:	4638      	mov	r0, r7
   861a8:	f7fd f99c 	bl	834e4 <__aeabi_dsub>
   861ac:	462a      	mov	r2, r5
   861ae:	4633      	mov	r3, r6
   861b0:	4682      	mov	sl, r0
   861b2:	468b      	mov	fp, r1
   861b4:	f001 ff0a 	bl	87fcc <__aeabi_dcmpgt>
   861b8:	4680      	mov	r8, r0
   861ba:	2800      	cmp	r0, #0
   861bc:	f040 8110 	bne.w	863e0 <_dtoa_r+0xcd8>
   861c0:	462a      	mov	r2, r5
   861c2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   861c6:	4650      	mov	r0, sl
   861c8:	4659      	mov	r1, fp
   861ca:	f001 fee1 	bl	87f90 <__aeabi_dcmplt>
   861ce:	b118      	cbz	r0, 861d8 <_dtoa_r+0xad0>
   861d0:	4646      	mov	r6, r8
   861d2:	e770      	b.n	860b6 <_dtoa_r+0x9ae>
   861d4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   861d8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   861dc:	f7ff bb8f 	b.w	858fe <_dtoa_r+0x1f6>
   861e0:	9804      	ldr	r0, [sp, #16]
   861e2:	f7ff bac0 	b.w	85766 <_dtoa_r+0x5e>
   861e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   861e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   861ea:	1afb      	subs	r3, r7, r3
   861ec:	441a      	add	r2, r3
   861ee:	970c      	str	r7, [sp, #48]	; 0x30
   861f0:	920d      	str	r2, [sp, #52]	; 0x34
   861f2:	2700      	movs	r7, #0
   861f4:	e468      	b.n	85ac8 <_dtoa_r+0x3c0>
   861f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   861fa:	f04f 0a02 	mov.w	sl, #2
   861fe:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   86202:	e656      	b.n	85eb2 <_dtoa_r+0x7aa>
   86204:	2100      	movs	r1, #0
   86206:	2301      	movs	r3, #1
   86208:	4620      	mov	r0, r4
   8620a:	6461      	str	r1, [r4, #68]	; 0x44
   8620c:	9325      	str	r3, [sp, #148]	; 0x94
   8620e:	f000 fcbd 	bl	86b8c <_Balloc>
   86212:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86214:	9004      	str	r0, [sp, #16]
   86216:	9307      	str	r3, [sp, #28]
   86218:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8621a:	6420      	str	r0, [r4, #64]	; 0x40
   8621c:	930f      	str	r3, [sp, #60]	; 0x3c
   8621e:	e627      	b.n	85e70 <_dtoa_r+0x768>
   86220:	2a00      	cmp	r2, #0
   86222:	46d0      	mov	r8, sl
   86224:	f8cd b020 	str.w	fp, [sp, #32]
   86228:	469a      	mov	sl, r3
   8622a:	dd11      	ble.n	86250 <_dtoa_r+0xb48>
   8622c:	4649      	mov	r1, r9
   8622e:	2201      	movs	r2, #1
   86230:	4620      	mov	r0, r4
   86232:	f000 fe59 	bl	86ee8 <__lshift>
   86236:	4641      	mov	r1, r8
   86238:	4681      	mov	r9, r0
   8623a:	f000 fea5 	bl	86f88 <__mcmp>
   8623e:	2800      	cmp	r0, #0
   86240:	f340 8145 	ble.w	864ce <_dtoa_r+0xdc6>
   86244:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   86248:	f000 8105 	beq.w	86456 <_dtoa_r+0xd4e>
   8624c:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   86250:	46b3      	mov	fp, r6
   86252:	f887 a000 	strb.w	sl, [r7]
   86256:	1c7d      	adds	r5, r7, #1
   86258:	9e08      	ldr	r6, [sp, #32]
   8625a:	e5d0      	b.n	85dfe <_dtoa_r+0x6f6>
   8625c:	d104      	bne.n	86268 <_dtoa_r+0xb60>
   8625e:	f01a 0f01 	tst.w	sl, #1
   86262:	d001      	beq.n	86268 <_dtoa_r+0xb60>
   86264:	e5bb      	b.n	85dde <_dtoa_r+0x6d6>
   86266:	4615      	mov	r5, r2
   86268:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8626c:	1e6a      	subs	r2, r5, #1
   8626e:	2b30      	cmp	r3, #48	; 0x30
   86270:	d0f9      	beq.n	86266 <_dtoa_r+0xb5e>
   86272:	e5c4      	b.n	85dfe <_dtoa_r+0x6f6>
   86274:	2230      	movs	r2, #48	; 0x30
   86276:	9904      	ldr	r1, [sp, #16]
   86278:	700a      	strb	r2, [r1, #0]
   8627a:	9a02      	ldr	r2, [sp, #8]
   8627c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   86280:	3201      	adds	r2, #1
   86282:	9202      	str	r2, [sp, #8]
   86284:	f7ff bbfb 	b.w	85a7e <_dtoa_r+0x376>
   86288:	f000 80bb 	beq.w	86402 <_dtoa_r+0xcfa>
   8628c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   86290:	9b02      	ldr	r3, [sp, #8]
   86292:	f04f 0a02 	mov.w	sl, #2
   86296:	425d      	negs	r5, r3
   86298:	4b82      	ldr	r3, [pc, #520]	; (864a4 <_dtoa_r+0xd9c>)
   8629a:	f005 020f 	and.w	r2, r5, #15
   8629e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   862a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   862a6:	f001 fc01 	bl	87aac <__aeabi_dmul>
   862aa:	112d      	asrs	r5, r5, #4
   862ac:	4607      	mov	r7, r0
   862ae:	4688      	mov	r8, r1
   862b0:	f43f ae1a 	beq.w	85ee8 <_dtoa_r+0x7e0>
   862b4:	4e7c      	ldr	r6, [pc, #496]	; (864a8 <_dtoa_r+0xda0>)
   862b6:	07eb      	lsls	r3, r5, #31
   862b8:	d509      	bpl.n	862ce <_dtoa_r+0xbc6>
   862ba:	e9d6 2300 	ldrd	r2, r3, [r6]
   862be:	4638      	mov	r0, r7
   862c0:	4641      	mov	r1, r8
   862c2:	f001 fbf3 	bl	87aac <__aeabi_dmul>
   862c6:	4607      	mov	r7, r0
   862c8:	4688      	mov	r8, r1
   862ca:	f10a 0a01 	add.w	sl, sl, #1
   862ce:	106d      	asrs	r5, r5, #1
   862d0:	f106 0608 	add.w	r6, r6, #8
   862d4:	d1ef      	bne.n	862b6 <_dtoa_r+0xbae>
   862d6:	e607      	b.n	85ee8 <_dtoa_r+0x7e0>
   862d8:	6871      	ldr	r1, [r6, #4]
   862da:	4620      	mov	r0, r4
   862dc:	f000 fc56 	bl	86b8c <_Balloc>
   862e0:	4605      	mov	r5, r0
   862e2:	6933      	ldr	r3, [r6, #16]
   862e4:	f106 010c 	add.w	r1, r6, #12
   862e8:	3302      	adds	r3, #2
   862ea:	009a      	lsls	r2, r3, #2
   862ec:	300c      	adds	r0, #12
   862ee:	f7fd fdcf 	bl	83e90 <memcpy>
   862f2:	4629      	mov	r1, r5
   862f4:	2201      	movs	r2, #1
   862f6:	4620      	mov	r0, r4
   862f8:	f000 fdf6 	bl	86ee8 <__lshift>
   862fc:	9008      	str	r0, [sp, #32]
   862fe:	e4b6      	b.n	85c6e <_dtoa_r+0x566>
   86300:	2b39      	cmp	r3, #57	; 0x39
   86302:	f8cd b020 	str.w	fp, [sp, #32]
   86306:	46d0      	mov	r8, sl
   86308:	f000 80a5 	beq.w	86456 <_dtoa_r+0xd4e>
   8630c:	f103 0a01 	add.w	sl, r3, #1
   86310:	46b3      	mov	fp, r6
   86312:	f887 a000 	strb.w	sl, [r7]
   86316:	1c7d      	adds	r5, r7, #1
   86318:	9e08      	ldr	r6, [sp, #32]
   8631a:	e570      	b.n	85dfe <_dtoa_r+0x6f6>
   8631c:	465a      	mov	r2, fp
   8631e:	46d0      	mov	r8, sl
   86320:	46b3      	mov	fp, r6
   86322:	469a      	mov	sl, r3
   86324:	4616      	mov	r6, r2
   86326:	e54e      	b.n	85dc6 <_dtoa_r+0x6be>
   86328:	9812      	ldr	r0, [sp, #72]	; 0x48
   8632a:	495e      	ldr	r1, [pc, #376]	; (864a4 <_dtoa_r+0xd9c>)
   8632c:	462a      	mov	r2, r5
   8632e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   86332:	4633      	mov	r3, r6
   86334:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   86338:	f001 fbb8 	bl	87aac <__aeabi_dmul>
   8633c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   86340:	4638      	mov	r0, r7
   86342:	4641      	mov	r1, r8
   86344:	f001 fe62 	bl	8800c <__aeabi_d2iz>
   86348:	4605      	mov	r5, r0
   8634a:	f7fd fa19 	bl	83780 <__aeabi_i2d>
   8634e:	4602      	mov	r2, r0
   86350:	460b      	mov	r3, r1
   86352:	4638      	mov	r0, r7
   86354:	4641      	mov	r1, r8
   86356:	f7fd f8c5 	bl	834e4 <__aeabi_dsub>
   8635a:	4606      	mov	r6, r0
   8635c:	9812      	ldr	r0, [sp, #72]	; 0x48
   8635e:	9a04      	ldr	r2, [sp, #16]
   86360:	3530      	adds	r5, #48	; 0x30
   86362:	2801      	cmp	r0, #1
   86364:	7015      	strb	r5, [r2, #0]
   86366:	460f      	mov	r7, r1
   86368:	f102 0501 	add.w	r5, r2, #1
   8636c:	d026      	beq.n	863bc <_dtoa_r+0xcb4>
   8636e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86370:	9a04      	ldr	r2, [sp, #16]
   86372:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   86376:	4413      	add	r3, r2
   86378:	f04f 0a00 	mov.w	sl, #0
   8637c:	4699      	mov	r9, r3
   8637e:	f8df b130 	ldr.w	fp, [pc, #304]	; 864b0 <_dtoa_r+0xda8>
   86382:	4652      	mov	r2, sl
   86384:	465b      	mov	r3, fp
   86386:	4630      	mov	r0, r6
   86388:	4639      	mov	r1, r7
   8638a:	f001 fb8f 	bl	87aac <__aeabi_dmul>
   8638e:	460f      	mov	r7, r1
   86390:	4606      	mov	r6, r0
   86392:	f001 fe3b 	bl	8800c <__aeabi_d2iz>
   86396:	4680      	mov	r8, r0
   86398:	f7fd f9f2 	bl	83780 <__aeabi_i2d>
   8639c:	4602      	mov	r2, r0
   8639e:	460b      	mov	r3, r1
   863a0:	4630      	mov	r0, r6
   863a2:	4639      	mov	r1, r7
   863a4:	f7fd f89e 	bl	834e4 <__aeabi_dsub>
   863a8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   863ac:	f805 8b01 	strb.w	r8, [r5], #1
   863b0:	454d      	cmp	r5, r9
   863b2:	4606      	mov	r6, r0
   863b4:	460f      	mov	r7, r1
   863b6:	d1e4      	bne.n	86382 <_dtoa_r+0xc7a>
   863b8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   863bc:	2200      	movs	r2, #0
   863be:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   863c2:	4b3a      	ldr	r3, [pc, #232]	; (864ac <_dtoa_r+0xda4>)
   863c4:	f7fd f890 	bl	834e8 <__adddf3>
   863c8:	4632      	mov	r2, r6
   863ca:	463b      	mov	r3, r7
   863cc:	f001 fde0 	bl	87f90 <__aeabi_dcmplt>
   863d0:	2800      	cmp	r0, #0
   863d2:	d046      	beq.n	86462 <_dtoa_r+0xd5a>
   863d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   863d6:	9302      	str	r3, [sp, #8]
   863d8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   863dc:	f7ff bb42 	b.w	85a64 <_dtoa_r+0x35c>
   863e0:	f04f 0800 	mov.w	r8, #0
   863e4:	4646      	mov	r6, r8
   863e6:	e6a8      	b.n	8613a <_dtoa_r+0xa32>
   863e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   863ea:	9a07      	ldr	r2, [sp, #28]
   863ec:	1a9d      	subs	r5, r3, r2
   863ee:	2300      	movs	r3, #0
   863f0:	f7ff bb70 	b.w	85ad4 <_dtoa_r+0x3cc>
   863f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   863f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   863f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   863fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   863fe:	f7ff bb69 	b.w	85ad4 <_dtoa_r+0x3cc>
   86402:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   86406:	f04f 0a02 	mov.w	sl, #2
   8640a:	e56d      	b.n	85ee8 <_dtoa_r+0x7e0>
   8640c:	9b07      	ldr	r3, [sp, #28]
   8640e:	2b00      	cmp	r3, #0
   86410:	f43f aeb8 	beq.w	86184 <_dtoa_r+0xa7c>
   86414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86416:	2b00      	cmp	r3, #0
   86418:	f77f aede 	ble.w	861d8 <_dtoa_r+0xad0>
   8641c:	2200      	movs	r2, #0
   8641e:	4b24      	ldr	r3, [pc, #144]	; (864b0 <_dtoa_r+0xda8>)
   86420:	4638      	mov	r0, r7
   86422:	4641      	mov	r1, r8
   86424:	f001 fb42 	bl	87aac <__aeabi_dmul>
   86428:	4607      	mov	r7, r0
   8642a:	4688      	mov	r8, r1
   8642c:	f10a 0001 	add.w	r0, sl, #1
   86430:	f7fd f9a6 	bl	83780 <__aeabi_i2d>
   86434:	463a      	mov	r2, r7
   86436:	4643      	mov	r3, r8
   86438:	f001 fb38 	bl	87aac <__aeabi_dmul>
   8643c:	2200      	movs	r2, #0
   8643e:	4b17      	ldr	r3, [pc, #92]	; (8649c <_dtoa_r+0xd94>)
   86440:	f7fd f852 	bl	834e8 <__adddf3>
   86444:	9a02      	ldr	r2, [sp, #8]
   86446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86448:	3a01      	subs	r2, #1
   8644a:	4605      	mov	r5, r0
   8644c:	9215      	str	r2, [sp, #84]	; 0x54
   8644e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   86452:	9312      	str	r3, [sp, #72]	; 0x48
   86454:	e569      	b.n	85f2a <_dtoa_r+0x822>
   86456:	2239      	movs	r2, #57	; 0x39
   86458:	46b3      	mov	fp, r6
   8645a:	703a      	strb	r2, [r7, #0]
   8645c:	9e08      	ldr	r6, [sp, #32]
   8645e:	1c7d      	adds	r5, r7, #1
   86460:	e4bf      	b.n	85de2 <_dtoa_r+0x6da>
   86462:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   86466:	2000      	movs	r0, #0
   86468:	4910      	ldr	r1, [pc, #64]	; (864ac <_dtoa_r+0xda4>)
   8646a:	f7fd f83b 	bl	834e4 <__aeabi_dsub>
   8646e:	4632      	mov	r2, r6
   86470:	463b      	mov	r3, r7
   86472:	f001 fdab 	bl	87fcc <__aeabi_dcmpgt>
   86476:	b908      	cbnz	r0, 8647c <_dtoa_r+0xd74>
   86478:	e6ae      	b.n	861d8 <_dtoa_r+0xad0>
   8647a:	4615      	mov	r5, r2
   8647c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   86480:	1e6a      	subs	r2, r5, #1
   86482:	2b30      	cmp	r3, #48	; 0x30
   86484:	d0f9      	beq.n	8647a <_dtoa_r+0xd72>
   86486:	e5d7      	b.n	86038 <_dtoa_r+0x930>
   86488:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8648c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8648e:	9302      	str	r3, [sp, #8]
   86490:	f7ff bae8 	b.w	85a64 <_dtoa_r+0x35c>
   86494:	970c      	str	r7, [sp, #48]	; 0x30
   86496:	f7ff bba7 	b.w	85be8 <_dtoa_r+0x4e0>
   8649a:	bf00      	nop
   8649c:	401c0000 	.word	0x401c0000
   864a0:	40140000 	.word	0x40140000
   864a4:	000885b0 	.word	0x000885b0
   864a8:	00088588 	.word	0x00088588
   864ac:	3fe00000 	.word	0x3fe00000
   864b0:	40240000 	.word	0x40240000
   864b4:	2b39      	cmp	r3, #57	; 0x39
   864b6:	f8cd b020 	str.w	fp, [sp, #32]
   864ba:	46d0      	mov	r8, sl
   864bc:	f8dd b01c 	ldr.w	fp, [sp, #28]
   864c0:	469a      	mov	sl, r3
   864c2:	d0c8      	beq.n	86456 <_dtoa_r+0xd4e>
   864c4:	f1bb 0f00 	cmp.w	fp, #0
   864c8:	f73f aec0 	bgt.w	8624c <_dtoa_r+0xb44>
   864cc:	e6c0      	b.n	86250 <_dtoa_r+0xb48>
   864ce:	f47f aebf 	bne.w	86250 <_dtoa_r+0xb48>
   864d2:	f01a 0f01 	tst.w	sl, #1
   864d6:	f43f aebb 	beq.w	86250 <_dtoa_r+0xb48>
   864da:	e6b3      	b.n	86244 <_dtoa_r+0xb3c>
   864dc:	f04f 0800 	mov.w	r8, #0
   864e0:	4646      	mov	r6, r8
   864e2:	e5e8      	b.n	860b6 <_dtoa_r+0x9ae>
   864e4:	4631      	mov	r1, r6
   864e6:	2300      	movs	r3, #0
   864e8:	220a      	movs	r2, #10
   864ea:	4620      	mov	r0, r4
   864ec:	f000 fb7e 	bl	86bec <__multadd>
   864f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   864f2:	4606      	mov	r6, r0
   864f4:	2b00      	cmp	r3, #0
   864f6:	dd07      	ble.n	86508 <_dtoa_r+0xe00>
   864f8:	9307      	str	r3, [sp, #28]
   864fa:	f7ff bbab 	b.w	85c54 <_dtoa_r+0x54c>
   864fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86500:	2b02      	cmp	r3, #2
   86502:	dc1f      	bgt.n	86544 <_dtoa_r+0xe3c>
   86504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86506:	e43c      	b.n	85d82 <_dtoa_r+0x67a>
   86508:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8650a:	2b02      	cmp	r3, #2
   8650c:	dc1a      	bgt.n	86544 <_dtoa_r+0xe3c>
   8650e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86510:	e7f2      	b.n	864f8 <_dtoa_r+0xdf0>
   86512:	f43f ab81 	beq.w	85c18 <_dtoa_r+0x510>
   86516:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8651a:	e411      	b.n	85d40 <_dtoa_r+0x638>
   8651c:	2500      	movs	r5, #0
   8651e:	4620      	mov	r0, r4
   86520:	6465      	str	r5, [r4, #68]	; 0x44
   86522:	4629      	mov	r1, r5
   86524:	f000 fb32 	bl	86b8c <_Balloc>
   86528:	f04f 33ff 	mov.w	r3, #4294967295
   8652c:	9307      	str	r3, [sp, #28]
   8652e:	930f      	str	r3, [sp, #60]	; 0x3c
   86530:	2301      	movs	r3, #1
   86532:	9004      	str	r0, [sp, #16]
   86534:	9525      	str	r5, [sp, #148]	; 0x94
   86536:	6420      	str	r0, [r4, #64]	; 0x40
   86538:	930b      	str	r3, [sp, #44]	; 0x2c
   8653a:	f7ff b9e0 	b.w	858fe <_dtoa_r+0x1f6>
   8653e:	2501      	movs	r5, #1
   86540:	f7ff b9a8 	b.w	85894 <_dtoa_r+0x18c>
   86544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86546:	9307      	str	r3, [sp, #28]
   86548:	e5e8      	b.n	8611c <_dtoa_r+0xa14>
   8654a:	bf00      	nop

0008654c <__libc_fini_array>:
   8654c:	b538      	push	{r3, r4, r5, lr}
   8654e:	4c0a      	ldr	r4, [pc, #40]	; (86578 <__libc_fini_array+0x2c>)
   86550:	4d0a      	ldr	r5, [pc, #40]	; (8657c <__libc_fini_array+0x30>)
   86552:	1b64      	subs	r4, r4, r5
   86554:	10a4      	asrs	r4, r4, #2
   86556:	d00a      	beq.n	8656e <__libc_fini_array+0x22>
   86558:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8655c:	3b01      	subs	r3, #1
   8655e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   86562:	3c01      	subs	r4, #1
   86564:	f855 3904 	ldr.w	r3, [r5], #-4
   86568:	4798      	blx	r3
   8656a:	2c00      	cmp	r4, #0
   8656c:	d1f9      	bne.n	86562 <__libc_fini_array+0x16>
   8656e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   86572:	f002 b91b 	b.w	887ac <_fini>
   86576:	bf00      	nop
   86578:	000887bc 	.word	0x000887bc
   8657c:	000887b8 	.word	0x000887b8

00086580 <_localeconv_r>:
   86580:	4a04      	ldr	r2, [pc, #16]	; (86594 <_localeconv_r+0x14>)
   86582:	4b05      	ldr	r3, [pc, #20]	; (86598 <_localeconv_r+0x18>)
   86584:	6812      	ldr	r2, [r2, #0]
   86586:	6b50      	ldr	r0, [r2, #52]	; 0x34
   86588:	2800      	cmp	r0, #0
   8658a:	bf08      	it	eq
   8658c:	4618      	moveq	r0, r3
   8658e:	30f0      	adds	r0, #240	; 0xf0
   86590:	4770      	bx	lr
   86592:	bf00      	nop
   86594:	200701a0 	.word	0x200701a0
   86598:	200709e4 	.word	0x200709e4

0008659c <__retarget_lock_acquire_recursive>:
   8659c:	4770      	bx	lr
   8659e:	bf00      	nop

000865a0 <__retarget_lock_release_recursive>:
   865a0:	4770      	bx	lr
   865a2:	bf00      	nop

000865a4 <_malloc_r>:
   865a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   865a8:	f101 060b 	add.w	r6, r1, #11
   865ac:	2e16      	cmp	r6, #22
   865ae:	b083      	sub	sp, #12
   865b0:	4605      	mov	r5, r0
   865b2:	f240 809e 	bls.w	866f2 <_malloc_r+0x14e>
   865b6:	f036 0607 	bics.w	r6, r6, #7
   865ba:	f100 80bd 	bmi.w	86738 <_malloc_r+0x194>
   865be:	42b1      	cmp	r1, r6
   865c0:	f200 80ba 	bhi.w	86738 <_malloc_r+0x194>
   865c4:	f000 fad6 	bl	86b74 <__malloc_lock>
   865c8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   865cc:	f0c0 8285 	bcc.w	86ada <_malloc_r+0x536>
   865d0:	0a73      	lsrs	r3, r6, #9
   865d2:	f000 80b8 	beq.w	86746 <_malloc_r+0x1a2>
   865d6:	2b04      	cmp	r3, #4
   865d8:	f200 816c 	bhi.w	868b4 <_malloc_r+0x310>
   865dc:	09b3      	lsrs	r3, r6, #6
   865de:	f103 0039 	add.w	r0, r3, #57	; 0x39
   865e2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   865e6:	00c1      	lsls	r1, r0, #3
   865e8:	4fb8      	ldr	r7, [pc, #736]	; (868cc <_malloc_r+0x328>)
   865ea:	4439      	add	r1, r7
   865ec:	684c      	ldr	r4, [r1, #4]
   865ee:	3908      	subs	r1, #8
   865f0:	42a1      	cmp	r1, r4
   865f2:	d106      	bne.n	86602 <_malloc_r+0x5e>
   865f4:	e00c      	b.n	86610 <_malloc_r+0x6c>
   865f6:	2a00      	cmp	r2, #0
   865f8:	f280 80ab 	bge.w	86752 <_malloc_r+0x1ae>
   865fc:	68e4      	ldr	r4, [r4, #12]
   865fe:	42a1      	cmp	r1, r4
   86600:	d006      	beq.n	86610 <_malloc_r+0x6c>
   86602:	6863      	ldr	r3, [r4, #4]
   86604:	f023 0303 	bic.w	r3, r3, #3
   86608:	1b9a      	subs	r2, r3, r6
   8660a:	2a0f      	cmp	r2, #15
   8660c:	ddf3      	ble.n	865f6 <_malloc_r+0x52>
   8660e:	4670      	mov	r0, lr
   86610:	693c      	ldr	r4, [r7, #16]
   86612:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 868e0 <_malloc_r+0x33c>
   86616:	4574      	cmp	r4, lr
   86618:	f000 819e 	beq.w	86958 <_malloc_r+0x3b4>
   8661c:	6863      	ldr	r3, [r4, #4]
   8661e:	f023 0303 	bic.w	r3, r3, #3
   86622:	1b9a      	subs	r2, r3, r6
   86624:	2a0f      	cmp	r2, #15
   86626:	f300 8183 	bgt.w	86930 <_malloc_r+0x38c>
   8662a:	2a00      	cmp	r2, #0
   8662c:	f8c7 e014 	str.w	lr, [r7, #20]
   86630:	f8c7 e010 	str.w	lr, [r7, #16]
   86634:	f280 8091 	bge.w	8675a <_malloc_r+0x1b6>
   86638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8663c:	f080 8154 	bcs.w	868e8 <_malloc_r+0x344>
   86640:	2201      	movs	r2, #1
   86642:	08db      	lsrs	r3, r3, #3
   86644:	6879      	ldr	r1, [r7, #4]
   86646:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8664a:	4413      	add	r3, r2
   8664c:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   86650:	fa02 f20c 	lsl.w	r2, r2, ip
   86654:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   86658:	430a      	orrs	r2, r1
   8665a:	f1ac 0108 	sub.w	r1, ip, #8
   8665e:	60e1      	str	r1, [r4, #12]
   86660:	f8c4 8008 	str.w	r8, [r4, #8]
   86664:	607a      	str	r2, [r7, #4]
   86666:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8666a:	f8c8 400c 	str.w	r4, [r8, #12]
   8666e:	2401      	movs	r4, #1
   86670:	1083      	asrs	r3, r0, #2
   86672:	409c      	lsls	r4, r3
   86674:	4294      	cmp	r4, r2
   86676:	d87d      	bhi.n	86774 <_malloc_r+0x1d0>
   86678:	4214      	tst	r4, r2
   8667a:	d106      	bne.n	8668a <_malloc_r+0xe6>
   8667c:	f020 0003 	bic.w	r0, r0, #3
   86680:	0064      	lsls	r4, r4, #1
   86682:	4214      	tst	r4, r2
   86684:	f100 0004 	add.w	r0, r0, #4
   86688:	d0fa      	beq.n	86680 <_malloc_r+0xdc>
   8668a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8668e:	46cc      	mov	ip, r9
   86690:	4680      	mov	r8, r0
   86692:	f8dc 300c 	ldr.w	r3, [ip, #12]
   86696:	459c      	cmp	ip, r3
   86698:	d107      	bne.n	866aa <_malloc_r+0x106>
   8669a:	e15f      	b.n	8695c <_malloc_r+0x3b8>
   8669c:	2a00      	cmp	r2, #0
   8669e:	f280 816d 	bge.w	8697c <_malloc_r+0x3d8>
   866a2:	68db      	ldr	r3, [r3, #12]
   866a4:	459c      	cmp	ip, r3
   866a6:	f000 8159 	beq.w	8695c <_malloc_r+0x3b8>
   866aa:	6859      	ldr	r1, [r3, #4]
   866ac:	f021 0103 	bic.w	r1, r1, #3
   866b0:	1b8a      	subs	r2, r1, r6
   866b2:	2a0f      	cmp	r2, #15
   866b4:	ddf2      	ble.n	8669c <_malloc_r+0xf8>
   866b6:	68dc      	ldr	r4, [r3, #12]
   866b8:	f8d3 c008 	ldr.w	ip, [r3, #8]
   866bc:	f046 0801 	orr.w	r8, r6, #1
   866c0:	4628      	mov	r0, r5
   866c2:	441e      	add	r6, r3
   866c4:	f042 0501 	orr.w	r5, r2, #1
   866c8:	f8c3 8004 	str.w	r8, [r3, #4]
   866cc:	f8cc 400c 	str.w	r4, [ip, #12]
   866d0:	f8c4 c008 	str.w	ip, [r4, #8]
   866d4:	617e      	str	r6, [r7, #20]
   866d6:	613e      	str	r6, [r7, #16]
   866d8:	f8c6 e00c 	str.w	lr, [r6, #12]
   866dc:	f8c6 e008 	str.w	lr, [r6, #8]
   866e0:	6075      	str	r5, [r6, #4]
   866e2:	505a      	str	r2, [r3, r1]
   866e4:	9300      	str	r3, [sp, #0]
   866e6:	f000 fa4b 	bl	86b80 <__malloc_unlock>
   866ea:	9b00      	ldr	r3, [sp, #0]
   866ec:	f103 0408 	add.w	r4, r3, #8
   866f0:	e01e      	b.n	86730 <_malloc_r+0x18c>
   866f2:	2910      	cmp	r1, #16
   866f4:	d820      	bhi.n	86738 <_malloc_r+0x194>
   866f6:	f000 fa3d 	bl	86b74 <__malloc_lock>
   866fa:	2610      	movs	r6, #16
   866fc:	2318      	movs	r3, #24
   866fe:	2002      	movs	r0, #2
   86700:	4f72      	ldr	r7, [pc, #456]	; (868cc <_malloc_r+0x328>)
   86702:	443b      	add	r3, r7
   86704:	685c      	ldr	r4, [r3, #4]
   86706:	f1a3 0208 	sub.w	r2, r3, #8
   8670a:	4294      	cmp	r4, r2
   8670c:	f000 812f 	beq.w	8696e <_malloc_r+0x3ca>
   86710:	6863      	ldr	r3, [r4, #4]
   86712:	68e1      	ldr	r1, [r4, #12]
   86714:	f023 0303 	bic.w	r3, r3, #3
   86718:	4423      	add	r3, r4
   8671a:	685a      	ldr	r2, [r3, #4]
   8671c:	68a6      	ldr	r6, [r4, #8]
   8671e:	f042 0201 	orr.w	r2, r2, #1
   86722:	60f1      	str	r1, [r6, #12]
   86724:	4628      	mov	r0, r5
   86726:	608e      	str	r6, [r1, #8]
   86728:	605a      	str	r2, [r3, #4]
   8672a:	f000 fa29 	bl	86b80 <__malloc_unlock>
   8672e:	3408      	adds	r4, #8
   86730:	4620      	mov	r0, r4
   86732:	b003      	add	sp, #12
   86734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86738:	2400      	movs	r4, #0
   8673a:	230c      	movs	r3, #12
   8673c:	4620      	mov	r0, r4
   8673e:	602b      	str	r3, [r5, #0]
   86740:	b003      	add	sp, #12
   86742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86746:	2040      	movs	r0, #64	; 0x40
   86748:	f44f 7100 	mov.w	r1, #512	; 0x200
   8674c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   86750:	e74a      	b.n	865e8 <_malloc_r+0x44>
   86752:	4423      	add	r3, r4
   86754:	685a      	ldr	r2, [r3, #4]
   86756:	68e1      	ldr	r1, [r4, #12]
   86758:	e7e0      	b.n	8671c <_malloc_r+0x178>
   8675a:	4423      	add	r3, r4
   8675c:	685a      	ldr	r2, [r3, #4]
   8675e:	4628      	mov	r0, r5
   86760:	f042 0201 	orr.w	r2, r2, #1
   86764:	605a      	str	r2, [r3, #4]
   86766:	3408      	adds	r4, #8
   86768:	f000 fa0a 	bl	86b80 <__malloc_unlock>
   8676c:	4620      	mov	r0, r4
   8676e:	b003      	add	sp, #12
   86770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86774:	68bc      	ldr	r4, [r7, #8]
   86776:	6863      	ldr	r3, [r4, #4]
   86778:	f023 0803 	bic.w	r8, r3, #3
   8677c:	45b0      	cmp	r8, r6
   8677e:	d304      	bcc.n	8678a <_malloc_r+0x1e6>
   86780:	eba8 0306 	sub.w	r3, r8, r6
   86784:	2b0f      	cmp	r3, #15
   86786:	f300 8085 	bgt.w	86894 <_malloc_r+0x2f0>
   8678a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 868e4 <_malloc_r+0x340>
   8678e:	4b50      	ldr	r3, [pc, #320]	; (868d0 <_malloc_r+0x32c>)
   86790:	f8d9 2000 	ldr.w	r2, [r9]
   86794:	681b      	ldr	r3, [r3, #0]
   86796:	3201      	adds	r2, #1
   86798:	4433      	add	r3, r6
   8679a:	eb04 0a08 	add.w	sl, r4, r8
   8679e:	f000 8154 	beq.w	86a4a <_malloc_r+0x4a6>
   867a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   867a6:	330f      	adds	r3, #15
   867a8:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   867ac:	f02b 0b0f 	bic.w	fp, fp, #15
   867b0:	4659      	mov	r1, fp
   867b2:	4628      	mov	r0, r5
   867b4:	f000 fce6 	bl	87184 <_sbrk_r>
   867b8:	1c41      	adds	r1, r0, #1
   867ba:	4602      	mov	r2, r0
   867bc:	f000 80fb 	beq.w	869b6 <_malloc_r+0x412>
   867c0:	4582      	cmp	sl, r0
   867c2:	f200 80f6 	bhi.w	869b2 <_malloc_r+0x40e>
   867c6:	4b43      	ldr	r3, [pc, #268]	; (868d4 <_malloc_r+0x330>)
   867c8:	6819      	ldr	r1, [r3, #0]
   867ca:	4459      	add	r1, fp
   867cc:	6019      	str	r1, [r3, #0]
   867ce:	f000 814c 	beq.w	86a6a <_malloc_r+0x4c6>
   867d2:	f8d9 0000 	ldr.w	r0, [r9]
   867d6:	3001      	adds	r0, #1
   867d8:	bf1b      	ittet	ne
   867da:	eba2 0a0a 	subne.w	sl, r2, sl
   867de:	4451      	addne	r1, sl
   867e0:	f8c9 2000 	streq.w	r2, [r9]
   867e4:	6019      	strne	r1, [r3, #0]
   867e6:	f012 0107 	ands.w	r1, r2, #7
   867ea:	f000 8114 	beq.w	86a16 <_malloc_r+0x472>
   867ee:	f1c1 0008 	rsb	r0, r1, #8
   867f2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   867f6:	4402      	add	r2, r0
   867f8:	3108      	adds	r1, #8
   867fa:	eb02 090b 	add.w	r9, r2, fp
   867fe:	f3c9 090b 	ubfx	r9, r9, #0, #12
   86802:	eba1 0909 	sub.w	r9, r1, r9
   86806:	4649      	mov	r1, r9
   86808:	4628      	mov	r0, r5
   8680a:	9301      	str	r3, [sp, #4]
   8680c:	9200      	str	r2, [sp, #0]
   8680e:	f000 fcb9 	bl	87184 <_sbrk_r>
   86812:	1c43      	adds	r3, r0, #1
   86814:	e89d 000c 	ldmia.w	sp, {r2, r3}
   86818:	f000 8142 	beq.w	86aa0 <_malloc_r+0x4fc>
   8681c:	1a80      	subs	r0, r0, r2
   8681e:	4448      	add	r0, r9
   86820:	f040 0001 	orr.w	r0, r0, #1
   86824:	6819      	ldr	r1, [r3, #0]
   86826:	42bc      	cmp	r4, r7
   86828:	4449      	add	r1, r9
   8682a:	60ba      	str	r2, [r7, #8]
   8682c:	6019      	str	r1, [r3, #0]
   8682e:	6050      	str	r0, [r2, #4]
   86830:	d017      	beq.n	86862 <_malloc_r+0x2be>
   86832:	f1b8 0f0f 	cmp.w	r8, #15
   86836:	f240 80fa 	bls.w	86a2e <_malloc_r+0x48a>
   8683a:	f04f 0c05 	mov.w	ip, #5
   8683e:	6862      	ldr	r2, [r4, #4]
   86840:	f1a8 000c 	sub.w	r0, r8, #12
   86844:	f020 0007 	bic.w	r0, r0, #7
   86848:	f002 0201 	and.w	r2, r2, #1
   8684c:	eb04 0e00 	add.w	lr, r4, r0
   86850:	4302      	orrs	r2, r0
   86852:	280f      	cmp	r0, #15
   86854:	6062      	str	r2, [r4, #4]
   86856:	f8ce c004 	str.w	ip, [lr, #4]
   8685a:	f8ce c008 	str.w	ip, [lr, #8]
   8685e:	f200 8116 	bhi.w	86a8e <_malloc_r+0x4ea>
   86862:	4b1d      	ldr	r3, [pc, #116]	; (868d8 <_malloc_r+0x334>)
   86864:	68bc      	ldr	r4, [r7, #8]
   86866:	681a      	ldr	r2, [r3, #0]
   86868:	4291      	cmp	r1, r2
   8686a:	bf88      	it	hi
   8686c:	6019      	strhi	r1, [r3, #0]
   8686e:	4b1b      	ldr	r3, [pc, #108]	; (868dc <_malloc_r+0x338>)
   86870:	681a      	ldr	r2, [r3, #0]
   86872:	4291      	cmp	r1, r2
   86874:	6862      	ldr	r2, [r4, #4]
   86876:	bf88      	it	hi
   86878:	6019      	strhi	r1, [r3, #0]
   8687a:	f022 0203 	bic.w	r2, r2, #3
   8687e:	4296      	cmp	r6, r2
   86880:	eba2 0306 	sub.w	r3, r2, r6
   86884:	d801      	bhi.n	8688a <_malloc_r+0x2e6>
   86886:	2b0f      	cmp	r3, #15
   86888:	dc04      	bgt.n	86894 <_malloc_r+0x2f0>
   8688a:	4628      	mov	r0, r5
   8688c:	f000 f978 	bl	86b80 <__malloc_unlock>
   86890:	2400      	movs	r4, #0
   86892:	e74d      	b.n	86730 <_malloc_r+0x18c>
   86894:	f046 0201 	orr.w	r2, r6, #1
   86898:	f043 0301 	orr.w	r3, r3, #1
   8689c:	4426      	add	r6, r4
   8689e:	6062      	str	r2, [r4, #4]
   868a0:	4628      	mov	r0, r5
   868a2:	60be      	str	r6, [r7, #8]
   868a4:	3408      	adds	r4, #8
   868a6:	6073      	str	r3, [r6, #4]
   868a8:	f000 f96a 	bl	86b80 <__malloc_unlock>
   868ac:	4620      	mov	r0, r4
   868ae:	b003      	add	sp, #12
   868b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   868b4:	2b14      	cmp	r3, #20
   868b6:	d970      	bls.n	8699a <_malloc_r+0x3f6>
   868b8:	2b54      	cmp	r3, #84	; 0x54
   868ba:	f200 80a2 	bhi.w	86a02 <_malloc_r+0x45e>
   868be:	0b33      	lsrs	r3, r6, #12
   868c0:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   868c4:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   868c8:	00c1      	lsls	r1, r0, #3
   868ca:	e68d      	b.n	865e8 <_malloc_r+0x44>
   868cc:	200705d4 	.word	0x200705d4
   868d0:	20070fe8 	.word	0x20070fe8
   868d4:	20070fb8 	.word	0x20070fb8
   868d8:	20070fe0 	.word	0x20070fe0
   868dc:	20070fe4 	.word	0x20070fe4
   868e0:	200705dc 	.word	0x200705dc
   868e4:	200709dc 	.word	0x200709dc
   868e8:	0a5a      	lsrs	r2, r3, #9
   868ea:	2a04      	cmp	r2, #4
   868ec:	d95b      	bls.n	869a6 <_malloc_r+0x402>
   868ee:	2a14      	cmp	r2, #20
   868f0:	f200 80ae 	bhi.w	86a50 <_malloc_r+0x4ac>
   868f4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   868f8:	00c9      	lsls	r1, r1, #3
   868fa:	325b      	adds	r2, #91	; 0x5b
   868fc:	eb07 0c01 	add.w	ip, r7, r1
   86900:	5879      	ldr	r1, [r7, r1]
   86902:	f1ac 0c08 	sub.w	ip, ip, #8
   86906:	458c      	cmp	ip, r1
   86908:	f000 8088 	beq.w	86a1c <_malloc_r+0x478>
   8690c:	684a      	ldr	r2, [r1, #4]
   8690e:	f022 0203 	bic.w	r2, r2, #3
   86912:	4293      	cmp	r3, r2
   86914:	d273      	bcs.n	869fe <_malloc_r+0x45a>
   86916:	6889      	ldr	r1, [r1, #8]
   86918:	458c      	cmp	ip, r1
   8691a:	d1f7      	bne.n	8690c <_malloc_r+0x368>
   8691c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   86920:	687a      	ldr	r2, [r7, #4]
   86922:	60e3      	str	r3, [r4, #12]
   86924:	f8c4 c008 	str.w	ip, [r4, #8]
   86928:	609c      	str	r4, [r3, #8]
   8692a:	f8cc 400c 	str.w	r4, [ip, #12]
   8692e:	e69e      	b.n	8666e <_malloc_r+0xca>
   86930:	f046 0c01 	orr.w	ip, r6, #1
   86934:	f042 0101 	orr.w	r1, r2, #1
   86938:	4426      	add	r6, r4
   8693a:	f8c4 c004 	str.w	ip, [r4, #4]
   8693e:	4628      	mov	r0, r5
   86940:	617e      	str	r6, [r7, #20]
   86942:	613e      	str	r6, [r7, #16]
   86944:	f8c6 e00c 	str.w	lr, [r6, #12]
   86948:	f8c6 e008 	str.w	lr, [r6, #8]
   8694c:	6071      	str	r1, [r6, #4]
   8694e:	50e2      	str	r2, [r4, r3]
   86950:	f000 f916 	bl	86b80 <__malloc_unlock>
   86954:	3408      	adds	r4, #8
   86956:	e6eb      	b.n	86730 <_malloc_r+0x18c>
   86958:	687a      	ldr	r2, [r7, #4]
   8695a:	e688      	b.n	8666e <_malloc_r+0xca>
   8695c:	f108 0801 	add.w	r8, r8, #1
   86960:	f018 0f03 	tst.w	r8, #3
   86964:	f10c 0c08 	add.w	ip, ip, #8
   86968:	f47f ae93 	bne.w	86692 <_malloc_r+0xee>
   8696c:	e02d      	b.n	869ca <_malloc_r+0x426>
   8696e:	68dc      	ldr	r4, [r3, #12]
   86970:	42a3      	cmp	r3, r4
   86972:	bf08      	it	eq
   86974:	3002      	addeq	r0, #2
   86976:	f43f ae4b 	beq.w	86610 <_malloc_r+0x6c>
   8697a:	e6c9      	b.n	86710 <_malloc_r+0x16c>
   8697c:	461c      	mov	r4, r3
   8697e:	4419      	add	r1, r3
   86980:	684a      	ldr	r2, [r1, #4]
   86982:	68db      	ldr	r3, [r3, #12]
   86984:	f854 6f08 	ldr.w	r6, [r4, #8]!
   86988:	f042 0201 	orr.w	r2, r2, #1
   8698c:	604a      	str	r2, [r1, #4]
   8698e:	4628      	mov	r0, r5
   86990:	60f3      	str	r3, [r6, #12]
   86992:	609e      	str	r6, [r3, #8]
   86994:	f000 f8f4 	bl	86b80 <__malloc_unlock>
   86998:	e6ca      	b.n	86730 <_malloc_r+0x18c>
   8699a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8699e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   869a2:	00c1      	lsls	r1, r0, #3
   869a4:	e620      	b.n	865e8 <_malloc_r+0x44>
   869a6:	099a      	lsrs	r2, r3, #6
   869a8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   869ac:	00c9      	lsls	r1, r1, #3
   869ae:	3238      	adds	r2, #56	; 0x38
   869b0:	e7a4      	b.n	868fc <_malloc_r+0x358>
   869b2:	42bc      	cmp	r4, r7
   869b4:	d054      	beq.n	86a60 <_malloc_r+0x4bc>
   869b6:	68bc      	ldr	r4, [r7, #8]
   869b8:	6862      	ldr	r2, [r4, #4]
   869ba:	f022 0203 	bic.w	r2, r2, #3
   869be:	e75e      	b.n	8687e <_malloc_r+0x2da>
   869c0:	f859 3908 	ldr.w	r3, [r9], #-8
   869c4:	4599      	cmp	r9, r3
   869c6:	f040 8086 	bne.w	86ad6 <_malloc_r+0x532>
   869ca:	f010 0f03 	tst.w	r0, #3
   869ce:	f100 30ff 	add.w	r0, r0, #4294967295
   869d2:	d1f5      	bne.n	869c0 <_malloc_r+0x41c>
   869d4:	687b      	ldr	r3, [r7, #4]
   869d6:	ea23 0304 	bic.w	r3, r3, r4
   869da:	607b      	str	r3, [r7, #4]
   869dc:	0064      	lsls	r4, r4, #1
   869de:	429c      	cmp	r4, r3
   869e0:	f63f aec8 	bhi.w	86774 <_malloc_r+0x1d0>
   869e4:	2c00      	cmp	r4, #0
   869e6:	f43f aec5 	beq.w	86774 <_malloc_r+0x1d0>
   869ea:	421c      	tst	r4, r3
   869ec:	4640      	mov	r0, r8
   869ee:	f47f ae4c 	bne.w	8668a <_malloc_r+0xe6>
   869f2:	0064      	lsls	r4, r4, #1
   869f4:	421c      	tst	r4, r3
   869f6:	f100 0004 	add.w	r0, r0, #4
   869fa:	d0fa      	beq.n	869f2 <_malloc_r+0x44e>
   869fc:	e645      	b.n	8668a <_malloc_r+0xe6>
   869fe:	468c      	mov	ip, r1
   86a00:	e78c      	b.n	8691c <_malloc_r+0x378>
   86a02:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86a06:	d815      	bhi.n	86a34 <_malloc_r+0x490>
   86a08:	0bf3      	lsrs	r3, r6, #15
   86a0a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   86a0e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   86a12:	00c1      	lsls	r1, r0, #3
   86a14:	e5e8      	b.n	865e8 <_malloc_r+0x44>
   86a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   86a1a:	e6ee      	b.n	867fa <_malloc_r+0x256>
   86a1c:	2101      	movs	r1, #1
   86a1e:	687b      	ldr	r3, [r7, #4]
   86a20:	1092      	asrs	r2, r2, #2
   86a22:	fa01 f202 	lsl.w	r2, r1, r2
   86a26:	431a      	orrs	r2, r3
   86a28:	607a      	str	r2, [r7, #4]
   86a2a:	4663      	mov	r3, ip
   86a2c:	e779      	b.n	86922 <_malloc_r+0x37e>
   86a2e:	2301      	movs	r3, #1
   86a30:	6053      	str	r3, [r2, #4]
   86a32:	e72a      	b.n	8688a <_malloc_r+0x2e6>
   86a34:	f240 5254 	movw	r2, #1364	; 0x554
   86a38:	4293      	cmp	r3, r2
   86a3a:	d822      	bhi.n	86a82 <_malloc_r+0x4de>
   86a3c:	0cb3      	lsrs	r3, r6, #18
   86a3e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   86a42:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   86a46:	00c1      	lsls	r1, r0, #3
   86a48:	e5ce      	b.n	865e8 <_malloc_r+0x44>
   86a4a:	f103 0b10 	add.w	fp, r3, #16
   86a4e:	e6af      	b.n	867b0 <_malloc_r+0x20c>
   86a50:	2a54      	cmp	r2, #84	; 0x54
   86a52:	d829      	bhi.n	86aa8 <_malloc_r+0x504>
   86a54:	0b1a      	lsrs	r2, r3, #12
   86a56:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   86a5a:	00c9      	lsls	r1, r1, #3
   86a5c:	326e      	adds	r2, #110	; 0x6e
   86a5e:	e74d      	b.n	868fc <_malloc_r+0x358>
   86a60:	4b20      	ldr	r3, [pc, #128]	; (86ae4 <_malloc_r+0x540>)
   86a62:	6819      	ldr	r1, [r3, #0]
   86a64:	4459      	add	r1, fp
   86a66:	6019      	str	r1, [r3, #0]
   86a68:	e6b3      	b.n	867d2 <_malloc_r+0x22e>
   86a6a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   86a6e:	2800      	cmp	r0, #0
   86a70:	f47f aeaf 	bne.w	867d2 <_malloc_r+0x22e>
   86a74:	eb08 030b 	add.w	r3, r8, fp
   86a78:	68ba      	ldr	r2, [r7, #8]
   86a7a:	f043 0301 	orr.w	r3, r3, #1
   86a7e:	6053      	str	r3, [r2, #4]
   86a80:	e6ef      	b.n	86862 <_malloc_r+0x2be>
   86a82:	207f      	movs	r0, #127	; 0x7f
   86a84:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86a88:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   86a8c:	e5ac      	b.n	865e8 <_malloc_r+0x44>
   86a8e:	f104 0108 	add.w	r1, r4, #8
   86a92:	4628      	mov	r0, r5
   86a94:	9300      	str	r3, [sp, #0]
   86a96:	f000 fce7 	bl	87468 <_free_r>
   86a9a:	9b00      	ldr	r3, [sp, #0]
   86a9c:	6819      	ldr	r1, [r3, #0]
   86a9e:	e6e0      	b.n	86862 <_malloc_r+0x2be>
   86aa0:	2001      	movs	r0, #1
   86aa2:	f04f 0900 	mov.w	r9, #0
   86aa6:	e6bd      	b.n	86824 <_malloc_r+0x280>
   86aa8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86aac:	d805      	bhi.n	86aba <_malloc_r+0x516>
   86aae:	0bda      	lsrs	r2, r3, #15
   86ab0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   86ab4:	00c9      	lsls	r1, r1, #3
   86ab6:	3277      	adds	r2, #119	; 0x77
   86ab8:	e720      	b.n	868fc <_malloc_r+0x358>
   86aba:	f240 5154 	movw	r1, #1364	; 0x554
   86abe:	428a      	cmp	r2, r1
   86ac0:	d805      	bhi.n	86ace <_malloc_r+0x52a>
   86ac2:	0c9a      	lsrs	r2, r3, #18
   86ac4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   86ac8:	00c9      	lsls	r1, r1, #3
   86aca:	327c      	adds	r2, #124	; 0x7c
   86acc:	e716      	b.n	868fc <_malloc_r+0x358>
   86ace:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86ad2:	227e      	movs	r2, #126	; 0x7e
   86ad4:	e712      	b.n	868fc <_malloc_r+0x358>
   86ad6:	687b      	ldr	r3, [r7, #4]
   86ad8:	e780      	b.n	869dc <_malloc_r+0x438>
   86ada:	08f0      	lsrs	r0, r6, #3
   86adc:	f106 0308 	add.w	r3, r6, #8
   86ae0:	e60e      	b.n	86700 <_malloc_r+0x15c>
   86ae2:	bf00      	nop
   86ae4:	20070fb8 	.word	0x20070fb8

00086ae8 <memchr>:
   86ae8:	0783      	lsls	r3, r0, #30
   86aea:	b470      	push	{r4, r5, r6}
   86aec:	b2cd      	uxtb	r5, r1
   86aee:	d03d      	beq.n	86b6c <memchr+0x84>
   86af0:	1e54      	subs	r4, r2, #1
   86af2:	b30a      	cbz	r2, 86b38 <memchr+0x50>
   86af4:	7803      	ldrb	r3, [r0, #0]
   86af6:	42ab      	cmp	r3, r5
   86af8:	d01f      	beq.n	86b3a <memchr+0x52>
   86afa:	1c43      	adds	r3, r0, #1
   86afc:	e005      	b.n	86b0a <memchr+0x22>
   86afe:	f114 34ff 	adds.w	r4, r4, #4294967295
   86b02:	d319      	bcc.n	86b38 <memchr+0x50>
   86b04:	7802      	ldrb	r2, [r0, #0]
   86b06:	42aa      	cmp	r2, r5
   86b08:	d017      	beq.n	86b3a <memchr+0x52>
   86b0a:	f013 0f03 	tst.w	r3, #3
   86b0e:	4618      	mov	r0, r3
   86b10:	f103 0301 	add.w	r3, r3, #1
   86b14:	d1f3      	bne.n	86afe <memchr+0x16>
   86b16:	2c03      	cmp	r4, #3
   86b18:	d811      	bhi.n	86b3e <memchr+0x56>
   86b1a:	b34c      	cbz	r4, 86b70 <memchr+0x88>
   86b1c:	7803      	ldrb	r3, [r0, #0]
   86b1e:	42ab      	cmp	r3, r5
   86b20:	d00b      	beq.n	86b3a <memchr+0x52>
   86b22:	4404      	add	r4, r0
   86b24:	1c43      	adds	r3, r0, #1
   86b26:	e002      	b.n	86b2e <memchr+0x46>
   86b28:	7802      	ldrb	r2, [r0, #0]
   86b2a:	42aa      	cmp	r2, r5
   86b2c:	d005      	beq.n	86b3a <memchr+0x52>
   86b2e:	429c      	cmp	r4, r3
   86b30:	4618      	mov	r0, r3
   86b32:	f103 0301 	add.w	r3, r3, #1
   86b36:	d1f7      	bne.n	86b28 <memchr+0x40>
   86b38:	2000      	movs	r0, #0
   86b3a:	bc70      	pop	{r4, r5, r6}
   86b3c:	4770      	bx	lr
   86b3e:	0209      	lsls	r1, r1, #8
   86b40:	b289      	uxth	r1, r1
   86b42:	4329      	orrs	r1, r5
   86b44:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   86b48:	6803      	ldr	r3, [r0, #0]
   86b4a:	4606      	mov	r6, r0
   86b4c:	404b      	eors	r3, r1
   86b4e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   86b52:	ea22 0303 	bic.w	r3, r2, r3
   86b56:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   86b5a:	f100 0004 	add.w	r0, r0, #4
   86b5e:	d103      	bne.n	86b68 <memchr+0x80>
   86b60:	3c04      	subs	r4, #4
   86b62:	2c03      	cmp	r4, #3
   86b64:	d8f0      	bhi.n	86b48 <memchr+0x60>
   86b66:	e7d8      	b.n	86b1a <memchr+0x32>
   86b68:	4630      	mov	r0, r6
   86b6a:	e7d7      	b.n	86b1c <memchr+0x34>
   86b6c:	4614      	mov	r4, r2
   86b6e:	e7d2      	b.n	86b16 <memchr+0x2e>
   86b70:	4620      	mov	r0, r4
   86b72:	e7e2      	b.n	86b3a <memchr+0x52>

00086b74 <__malloc_lock>:
   86b74:	4801      	ldr	r0, [pc, #4]	; (86b7c <__malloc_lock+0x8>)
   86b76:	f7ff bd11 	b.w	8659c <__retarget_lock_acquire_recursive>
   86b7a:	bf00      	nop
   86b7c:	2007104c 	.word	0x2007104c

00086b80 <__malloc_unlock>:
   86b80:	4801      	ldr	r0, [pc, #4]	; (86b88 <__malloc_unlock+0x8>)
   86b82:	f7ff bd0d 	b.w	865a0 <__retarget_lock_release_recursive>
   86b86:	bf00      	nop
   86b88:	2007104c 	.word	0x2007104c

00086b8c <_Balloc>:
   86b8c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86b8e:	b570      	push	{r4, r5, r6, lr}
   86b90:	4605      	mov	r5, r0
   86b92:	460c      	mov	r4, r1
   86b94:	b14b      	cbz	r3, 86baa <_Balloc+0x1e>
   86b96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   86b9a:	b180      	cbz	r0, 86bbe <_Balloc+0x32>
   86b9c:	6802      	ldr	r2, [r0, #0]
   86b9e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   86ba2:	2300      	movs	r3, #0
   86ba4:	6103      	str	r3, [r0, #16]
   86ba6:	60c3      	str	r3, [r0, #12]
   86ba8:	bd70      	pop	{r4, r5, r6, pc}
   86baa:	2221      	movs	r2, #33	; 0x21
   86bac:	2104      	movs	r1, #4
   86bae:	f000 fbdb 	bl	87368 <_calloc_r>
   86bb2:	64e8      	str	r0, [r5, #76]	; 0x4c
   86bb4:	4603      	mov	r3, r0
   86bb6:	2800      	cmp	r0, #0
   86bb8:	d1ed      	bne.n	86b96 <_Balloc+0xa>
   86bba:	2000      	movs	r0, #0
   86bbc:	bd70      	pop	{r4, r5, r6, pc}
   86bbe:	2101      	movs	r1, #1
   86bc0:	fa01 f604 	lsl.w	r6, r1, r4
   86bc4:	1d72      	adds	r2, r6, #5
   86bc6:	4628      	mov	r0, r5
   86bc8:	0092      	lsls	r2, r2, #2
   86bca:	f000 fbcd 	bl	87368 <_calloc_r>
   86bce:	2800      	cmp	r0, #0
   86bd0:	d0f3      	beq.n	86bba <_Balloc+0x2e>
   86bd2:	6044      	str	r4, [r0, #4]
   86bd4:	6086      	str	r6, [r0, #8]
   86bd6:	e7e4      	b.n	86ba2 <_Balloc+0x16>

00086bd8 <_Bfree>:
   86bd8:	b131      	cbz	r1, 86be8 <_Bfree+0x10>
   86bda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86bdc:	684a      	ldr	r2, [r1, #4]
   86bde:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   86be2:	6008      	str	r0, [r1, #0]
   86be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   86be8:	4770      	bx	lr
   86bea:	bf00      	nop

00086bec <__multadd>:
   86bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   86bee:	460c      	mov	r4, r1
   86bf0:	4605      	mov	r5, r0
   86bf2:	f04f 0e00 	mov.w	lr, #0
   86bf6:	690e      	ldr	r6, [r1, #16]
   86bf8:	b083      	sub	sp, #12
   86bfa:	f101 0714 	add.w	r7, r1, #20
   86bfe:	6838      	ldr	r0, [r7, #0]
   86c00:	f10e 0e01 	add.w	lr, lr, #1
   86c04:	b281      	uxth	r1, r0
   86c06:	fb02 3301 	mla	r3, r2, r1, r3
   86c0a:	0c01      	lsrs	r1, r0, #16
   86c0c:	0c18      	lsrs	r0, r3, #16
   86c0e:	fb02 0101 	mla	r1, r2, r1, r0
   86c12:	b29b      	uxth	r3, r3
   86c14:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   86c18:	4576      	cmp	r6, lr
   86c1a:	f847 3b04 	str.w	r3, [r7], #4
   86c1e:	ea4f 4311 	mov.w	r3, r1, lsr #16
   86c22:	dcec      	bgt.n	86bfe <__multadd+0x12>
   86c24:	b13b      	cbz	r3, 86c36 <__multadd+0x4a>
   86c26:	68a2      	ldr	r2, [r4, #8]
   86c28:	4296      	cmp	r6, r2
   86c2a:	da07      	bge.n	86c3c <__multadd+0x50>
   86c2c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   86c30:	3601      	adds	r6, #1
   86c32:	6153      	str	r3, [r2, #20]
   86c34:	6126      	str	r6, [r4, #16]
   86c36:	4620      	mov	r0, r4
   86c38:	b003      	add	sp, #12
   86c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86c3c:	6861      	ldr	r1, [r4, #4]
   86c3e:	4628      	mov	r0, r5
   86c40:	3101      	adds	r1, #1
   86c42:	9301      	str	r3, [sp, #4]
   86c44:	f7ff ffa2 	bl	86b8c <_Balloc>
   86c48:	4607      	mov	r7, r0
   86c4a:	6922      	ldr	r2, [r4, #16]
   86c4c:	f104 010c 	add.w	r1, r4, #12
   86c50:	3202      	adds	r2, #2
   86c52:	0092      	lsls	r2, r2, #2
   86c54:	300c      	adds	r0, #12
   86c56:	f7fd f91b 	bl	83e90 <memcpy>
   86c5a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   86c5c:	6861      	ldr	r1, [r4, #4]
   86c5e:	9b01      	ldr	r3, [sp, #4]
   86c60:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   86c64:	6020      	str	r0, [r4, #0]
   86c66:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   86c6a:	463c      	mov	r4, r7
   86c6c:	e7de      	b.n	86c2c <__multadd+0x40>
   86c6e:	bf00      	nop

00086c70 <__hi0bits>:
   86c70:	0c02      	lsrs	r2, r0, #16
   86c72:	0412      	lsls	r2, r2, #16
   86c74:	4603      	mov	r3, r0
   86c76:	b9b2      	cbnz	r2, 86ca6 <__hi0bits+0x36>
   86c78:	0403      	lsls	r3, r0, #16
   86c7a:	2010      	movs	r0, #16
   86c7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   86c80:	bf04      	itt	eq
   86c82:	021b      	lsleq	r3, r3, #8
   86c84:	3008      	addeq	r0, #8
   86c86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   86c8a:	bf04      	itt	eq
   86c8c:	011b      	lsleq	r3, r3, #4
   86c8e:	3004      	addeq	r0, #4
   86c90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   86c94:	bf04      	itt	eq
   86c96:	009b      	lsleq	r3, r3, #2
   86c98:	3002      	addeq	r0, #2
   86c9a:	2b00      	cmp	r3, #0
   86c9c:	db02      	blt.n	86ca4 <__hi0bits+0x34>
   86c9e:	005b      	lsls	r3, r3, #1
   86ca0:	d403      	bmi.n	86caa <__hi0bits+0x3a>
   86ca2:	2020      	movs	r0, #32
   86ca4:	4770      	bx	lr
   86ca6:	2000      	movs	r0, #0
   86ca8:	e7e8      	b.n	86c7c <__hi0bits+0xc>
   86caa:	3001      	adds	r0, #1
   86cac:	4770      	bx	lr
   86cae:	bf00      	nop

00086cb0 <__lo0bits>:
   86cb0:	6803      	ldr	r3, [r0, #0]
   86cb2:	4601      	mov	r1, r0
   86cb4:	f013 0207 	ands.w	r2, r3, #7
   86cb8:	d007      	beq.n	86cca <__lo0bits+0x1a>
   86cba:	07da      	lsls	r2, r3, #31
   86cbc:	d421      	bmi.n	86d02 <__lo0bits+0x52>
   86cbe:	0798      	lsls	r0, r3, #30
   86cc0:	d421      	bmi.n	86d06 <__lo0bits+0x56>
   86cc2:	089b      	lsrs	r3, r3, #2
   86cc4:	600b      	str	r3, [r1, #0]
   86cc6:	2002      	movs	r0, #2
   86cc8:	4770      	bx	lr
   86cca:	b298      	uxth	r0, r3
   86ccc:	b198      	cbz	r0, 86cf6 <__lo0bits+0x46>
   86cce:	4610      	mov	r0, r2
   86cd0:	f013 0fff 	tst.w	r3, #255	; 0xff
   86cd4:	bf04      	itt	eq
   86cd6:	0a1b      	lsreq	r3, r3, #8
   86cd8:	3008      	addeq	r0, #8
   86cda:	071a      	lsls	r2, r3, #28
   86cdc:	bf04      	itt	eq
   86cde:	091b      	lsreq	r3, r3, #4
   86ce0:	3004      	addeq	r0, #4
   86ce2:	079a      	lsls	r2, r3, #30
   86ce4:	bf04      	itt	eq
   86ce6:	089b      	lsreq	r3, r3, #2
   86ce8:	3002      	addeq	r0, #2
   86cea:	07da      	lsls	r2, r3, #31
   86cec:	d407      	bmi.n	86cfe <__lo0bits+0x4e>
   86cee:	085b      	lsrs	r3, r3, #1
   86cf0:	d104      	bne.n	86cfc <__lo0bits+0x4c>
   86cf2:	2020      	movs	r0, #32
   86cf4:	4770      	bx	lr
   86cf6:	0c1b      	lsrs	r3, r3, #16
   86cf8:	2010      	movs	r0, #16
   86cfa:	e7e9      	b.n	86cd0 <__lo0bits+0x20>
   86cfc:	3001      	adds	r0, #1
   86cfe:	600b      	str	r3, [r1, #0]
   86d00:	4770      	bx	lr
   86d02:	2000      	movs	r0, #0
   86d04:	4770      	bx	lr
   86d06:	085b      	lsrs	r3, r3, #1
   86d08:	600b      	str	r3, [r1, #0]
   86d0a:	2001      	movs	r0, #1
   86d0c:	4770      	bx	lr
   86d0e:	bf00      	nop

00086d10 <__i2b>:
   86d10:	b510      	push	{r4, lr}
   86d12:	460c      	mov	r4, r1
   86d14:	2101      	movs	r1, #1
   86d16:	f7ff ff39 	bl	86b8c <_Balloc>
   86d1a:	2201      	movs	r2, #1
   86d1c:	6144      	str	r4, [r0, #20]
   86d1e:	6102      	str	r2, [r0, #16]
   86d20:	bd10      	pop	{r4, pc}
   86d22:	bf00      	nop

00086d24 <__multiply>:
   86d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86d28:	690c      	ldr	r4, [r1, #16]
   86d2a:	6915      	ldr	r5, [r2, #16]
   86d2c:	b083      	sub	sp, #12
   86d2e:	42ac      	cmp	r4, r5
   86d30:	468b      	mov	fp, r1
   86d32:	4616      	mov	r6, r2
   86d34:	da04      	bge.n	86d40 <__multiply+0x1c>
   86d36:	4622      	mov	r2, r4
   86d38:	46b3      	mov	fp, r6
   86d3a:	462c      	mov	r4, r5
   86d3c:	460e      	mov	r6, r1
   86d3e:	4615      	mov	r5, r2
   86d40:	f8db 3008 	ldr.w	r3, [fp, #8]
   86d44:	eb04 0805 	add.w	r8, r4, r5
   86d48:	f8db 1004 	ldr.w	r1, [fp, #4]
   86d4c:	4598      	cmp	r8, r3
   86d4e:	bfc8      	it	gt
   86d50:	3101      	addgt	r1, #1
   86d52:	f7ff ff1b 	bl	86b8c <_Balloc>
   86d56:	f100 0914 	add.w	r9, r0, #20
   86d5a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   86d5e:	45d1      	cmp	r9, sl
   86d60:	9000      	str	r0, [sp, #0]
   86d62:	d205      	bcs.n	86d70 <__multiply+0x4c>
   86d64:	464b      	mov	r3, r9
   86d66:	2100      	movs	r1, #0
   86d68:	f843 1b04 	str.w	r1, [r3], #4
   86d6c:	459a      	cmp	sl, r3
   86d6e:	d8fb      	bhi.n	86d68 <__multiply+0x44>
   86d70:	f106 0c14 	add.w	ip, r6, #20
   86d74:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   86d78:	f10b 0b14 	add.w	fp, fp, #20
   86d7c:	459c      	cmp	ip, r3
   86d7e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   86d82:	d24b      	bcs.n	86e1c <__multiply+0xf8>
   86d84:	f8cd a004 	str.w	sl, [sp, #4]
   86d88:	469a      	mov	sl, r3
   86d8a:	f8dc 5000 	ldr.w	r5, [ip]
   86d8e:	b2af      	uxth	r7, r5
   86d90:	b1e7      	cbz	r7, 86dcc <__multiply+0xa8>
   86d92:	464d      	mov	r5, r9
   86d94:	465e      	mov	r6, fp
   86d96:	2100      	movs	r1, #0
   86d98:	f856 2b04 	ldr.w	r2, [r6], #4
   86d9c:	6828      	ldr	r0, [r5, #0]
   86d9e:	b293      	uxth	r3, r2
   86da0:	b284      	uxth	r4, r0
   86da2:	0c12      	lsrs	r2, r2, #16
   86da4:	fb07 4303 	mla	r3, r7, r3, r4
   86da8:	0c00      	lsrs	r0, r0, #16
   86daa:	fb07 0202 	mla	r2, r7, r2, r0
   86dae:	440b      	add	r3, r1
   86db0:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   86db4:	b29b      	uxth	r3, r3
   86db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   86dba:	45b6      	cmp	lr, r6
   86dbc:	f845 3b04 	str.w	r3, [r5], #4
   86dc0:	ea4f 4111 	mov.w	r1, r1, lsr #16
   86dc4:	d8e8      	bhi.n	86d98 <__multiply+0x74>
   86dc6:	6029      	str	r1, [r5, #0]
   86dc8:	f8dc 5000 	ldr.w	r5, [ip]
   86dcc:	0c2d      	lsrs	r5, r5, #16
   86dce:	d01d      	beq.n	86e0c <__multiply+0xe8>
   86dd0:	f8d9 3000 	ldr.w	r3, [r9]
   86dd4:	4648      	mov	r0, r9
   86dd6:	461c      	mov	r4, r3
   86dd8:	4659      	mov	r1, fp
   86dda:	2200      	movs	r2, #0
   86ddc:	880e      	ldrh	r6, [r1, #0]
   86dde:	0c24      	lsrs	r4, r4, #16
   86de0:	fb05 4406 	mla	r4, r5, r6, r4
   86de4:	b29b      	uxth	r3, r3
   86de6:	4422      	add	r2, r4
   86de8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   86dec:	f840 3b04 	str.w	r3, [r0], #4
   86df0:	f851 3b04 	ldr.w	r3, [r1], #4
   86df4:	6804      	ldr	r4, [r0, #0]
   86df6:	0c1b      	lsrs	r3, r3, #16
   86df8:	b2a6      	uxth	r6, r4
   86dfa:	fb05 6303 	mla	r3, r5, r3, r6
   86dfe:	458e      	cmp	lr, r1
   86e00:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   86e04:	ea4f 4213 	mov.w	r2, r3, lsr #16
   86e08:	d8e8      	bhi.n	86ddc <__multiply+0xb8>
   86e0a:	6003      	str	r3, [r0, #0]
   86e0c:	f10c 0c04 	add.w	ip, ip, #4
   86e10:	45e2      	cmp	sl, ip
   86e12:	f109 0904 	add.w	r9, r9, #4
   86e16:	d8b8      	bhi.n	86d8a <__multiply+0x66>
   86e18:	f8dd a004 	ldr.w	sl, [sp, #4]
   86e1c:	f1b8 0f00 	cmp.w	r8, #0
   86e20:	dd0b      	ble.n	86e3a <__multiply+0x116>
   86e22:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   86e26:	f1aa 0a04 	sub.w	sl, sl, #4
   86e2a:	b11b      	cbz	r3, 86e34 <__multiply+0x110>
   86e2c:	e005      	b.n	86e3a <__multiply+0x116>
   86e2e:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   86e32:	b913      	cbnz	r3, 86e3a <__multiply+0x116>
   86e34:	f1b8 0801 	subs.w	r8, r8, #1
   86e38:	d1f9      	bne.n	86e2e <__multiply+0x10a>
   86e3a:	9800      	ldr	r0, [sp, #0]
   86e3c:	f8c0 8010 	str.w	r8, [r0, #16]
   86e40:	b003      	add	sp, #12
   86e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86e46:	bf00      	nop

00086e48 <__pow5mult>:
   86e48:	f012 0303 	ands.w	r3, r2, #3
   86e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86e50:	4614      	mov	r4, r2
   86e52:	4607      	mov	r7, r0
   86e54:	d12e      	bne.n	86eb4 <__pow5mult+0x6c>
   86e56:	460d      	mov	r5, r1
   86e58:	10a4      	asrs	r4, r4, #2
   86e5a:	d01c      	beq.n	86e96 <__pow5mult+0x4e>
   86e5c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   86e5e:	b396      	cbz	r6, 86ec6 <__pow5mult+0x7e>
   86e60:	07e3      	lsls	r3, r4, #31
   86e62:	f04f 0800 	mov.w	r8, #0
   86e66:	d406      	bmi.n	86e76 <__pow5mult+0x2e>
   86e68:	1064      	asrs	r4, r4, #1
   86e6a:	d014      	beq.n	86e96 <__pow5mult+0x4e>
   86e6c:	6830      	ldr	r0, [r6, #0]
   86e6e:	b1a8      	cbz	r0, 86e9c <__pow5mult+0x54>
   86e70:	4606      	mov	r6, r0
   86e72:	07e3      	lsls	r3, r4, #31
   86e74:	d5f8      	bpl.n	86e68 <__pow5mult+0x20>
   86e76:	4632      	mov	r2, r6
   86e78:	4629      	mov	r1, r5
   86e7a:	4638      	mov	r0, r7
   86e7c:	f7ff ff52 	bl	86d24 <__multiply>
   86e80:	b1b5      	cbz	r5, 86eb0 <__pow5mult+0x68>
   86e82:	686a      	ldr	r2, [r5, #4]
   86e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86e86:	1064      	asrs	r4, r4, #1
   86e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86e8c:	6029      	str	r1, [r5, #0]
   86e8e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   86e92:	4605      	mov	r5, r0
   86e94:	d1ea      	bne.n	86e6c <__pow5mult+0x24>
   86e96:	4628      	mov	r0, r5
   86e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86e9c:	4632      	mov	r2, r6
   86e9e:	4631      	mov	r1, r6
   86ea0:	4638      	mov	r0, r7
   86ea2:	f7ff ff3f 	bl	86d24 <__multiply>
   86ea6:	6030      	str	r0, [r6, #0]
   86ea8:	f8c0 8000 	str.w	r8, [r0]
   86eac:	4606      	mov	r6, r0
   86eae:	e7e0      	b.n	86e72 <__pow5mult+0x2a>
   86eb0:	4605      	mov	r5, r0
   86eb2:	e7d9      	b.n	86e68 <__pow5mult+0x20>
   86eb4:	4a0b      	ldr	r2, [pc, #44]	; (86ee4 <__pow5mult+0x9c>)
   86eb6:	3b01      	subs	r3, #1
   86eb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   86ebc:	2300      	movs	r3, #0
   86ebe:	f7ff fe95 	bl	86bec <__multadd>
   86ec2:	4605      	mov	r5, r0
   86ec4:	e7c8      	b.n	86e58 <__pow5mult+0x10>
   86ec6:	2101      	movs	r1, #1
   86ec8:	4638      	mov	r0, r7
   86eca:	f7ff fe5f 	bl	86b8c <_Balloc>
   86ece:	f240 2171 	movw	r1, #625	; 0x271
   86ed2:	2201      	movs	r2, #1
   86ed4:	2300      	movs	r3, #0
   86ed6:	6141      	str	r1, [r0, #20]
   86ed8:	6102      	str	r2, [r0, #16]
   86eda:	4606      	mov	r6, r0
   86edc:	64b8      	str	r0, [r7, #72]	; 0x48
   86ede:	6003      	str	r3, [r0, #0]
   86ee0:	e7be      	b.n	86e60 <__pow5mult+0x18>
   86ee2:	bf00      	nop
   86ee4:	00088678 	.word	0x00088678

00086ee8 <__lshift>:
   86ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86eec:	690b      	ldr	r3, [r1, #16]
   86eee:	1154      	asrs	r4, r2, #5
   86ef0:	eb04 0803 	add.w	r8, r4, r3
   86ef4:	688b      	ldr	r3, [r1, #8]
   86ef6:	f108 0501 	add.w	r5, r8, #1
   86efa:	429d      	cmp	r5, r3
   86efc:	460e      	mov	r6, r1
   86efe:	4691      	mov	r9, r2
   86f00:	4607      	mov	r7, r0
   86f02:	6849      	ldr	r1, [r1, #4]
   86f04:	dd04      	ble.n	86f10 <__lshift+0x28>
   86f06:	005b      	lsls	r3, r3, #1
   86f08:	429d      	cmp	r5, r3
   86f0a:	f101 0101 	add.w	r1, r1, #1
   86f0e:	dcfa      	bgt.n	86f06 <__lshift+0x1e>
   86f10:	4638      	mov	r0, r7
   86f12:	f7ff fe3b 	bl	86b8c <_Balloc>
   86f16:	2c00      	cmp	r4, #0
   86f18:	f100 0314 	add.w	r3, r0, #20
   86f1c:	dd06      	ble.n	86f2c <__lshift+0x44>
   86f1e:	2100      	movs	r1, #0
   86f20:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   86f24:	f843 1b04 	str.w	r1, [r3], #4
   86f28:	429a      	cmp	r2, r3
   86f2a:	d1fb      	bne.n	86f24 <__lshift+0x3c>
   86f2c:	6934      	ldr	r4, [r6, #16]
   86f2e:	f106 0114 	add.w	r1, r6, #20
   86f32:	f019 091f 	ands.w	r9, r9, #31
   86f36:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   86f3a:	d01d      	beq.n	86f78 <__lshift+0x90>
   86f3c:	2200      	movs	r2, #0
   86f3e:	f1c9 0c20 	rsb	ip, r9, #32
   86f42:	680c      	ldr	r4, [r1, #0]
   86f44:	fa04 f409 	lsl.w	r4, r4, r9
   86f48:	4314      	orrs	r4, r2
   86f4a:	f843 4b04 	str.w	r4, [r3], #4
   86f4e:	f851 2b04 	ldr.w	r2, [r1], #4
   86f52:	458e      	cmp	lr, r1
   86f54:	fa22 f20c 	lsr.w	r2, r2, ip
   86f58:	d8f3      	bhi.n	86f42 <__lshift+0x5a>
   86f5a:	601a      	str	r2, [r3, #0]
   86f5c:	b10a      	cbz	r2, 86f62 <__lshift+0x7a>
   86f5e:	f108 0502 	add.w	r5, r8, #2
   86f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86f64:	6872      	ldr	r2, [r6, #4]
   86f66:	3d01      	subs	r5, #1
   86f68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86f6c:	6105      	str	r5, [r0, #16]
   86f6e:	6031      	str	r1, [r6, #0]
   86f70:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   86f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86f78:	3b04      	subs	r3, #4
   86f7a:	f851 2b04 	ldr.w	r2, [r1], #4
   86f7e:	458e      	cmp	lr, r1
   86f80:	f843 2f04 	str.w	r2, [r3, #4]!
   86f84:	d8f9      	bhi.n	86f7a <__lshift+0x92>
   86f86:	e7ec      	b.n	86f62 <__lshift+0x7a>

00086f88 <__mcmp>:
   86f88:	b430      	push	{r4, r5}
   86f8a:	690b      	ldr	r3, [r1, #16]
   86f8c:	4605      	mov	r5, r0
   86f8e:	6900      	ldr	r0, [r0, #16]
   86f90:	1ac0      	subs	r0, r0, r3
   86f92:	d10f      	bne.n	86fb4 <__mcmp+0x2c>
   86f94:	009b      	lsls	r3, r3, #2
   86f96:	3514      	adds	r5, #20
   86f98:	3114      	adds	r1, #20
   86f9a:	4419      	add	r1, r3
   86f9c:	442b      	add	r3, r5
   86f9e:	e001      	b.n	86fa4 <__mcmp+0x1c>
   86fa0:	429d      	cmp	r5, r3
   86fa2:	d207      	bcs.n	86fb4 <__mcmp+0x2c>
   86fa4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   86fa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   86fac:	4294      	cmp	r4, r2
   86fae:	d0f7      	beq.n	86fa0 <__mcmp+0x18>
   86fb0:	d302      	bcc.n	86fb8 <__mcmp+0x30>
   86fb2:	2001      	movs	r0, #1
   86fb4:	bc30      	pop	{r4, r5}
   86fb6:	4770      	bx	lr
   86fb8:	f04f 30ff 	mov.w	r0, #4294967295
   86fbc:	e7fa      	b.n	86fb4 <__mcmp+0x2c>
   86fbe:	bf00      	nop

00086fc0 <__mdiff>:
   86fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86fc4:	690c      	ldr	r4, [r1, #16]
   86fc6:	4689      	mov	r9, r1
   86fc8:	6911      	ldr	r1, [r2, #16]
   86fca:	4692      	mov	sl, r2
   86fcc:	1a64      	subs	r4, r4, r1
   86fce:	2c00      	cmp	r4, #0
   86fd0:	d117      	bne.n	87002 <__mdiff+0x42>
   86fd2:	0089      	lsls	r1, r1, #2
   86fd4:	f109 0714 	add.w	r7, r9, #20
   86fd8:	f102 0614 	add.w	r6, r2, #20
   86fdc:	187b      	adds	r3, r7, r1
   86fde:	4431      	add	r1, r6
   86fe0:	e001      	b.n	86fe6 <__mdiff+0x26>
   86fe2:	429f      	cmp	r7, r3
   86fe4:	d265      	bcs.n	870b2 <__mdiff+0xf2>
   86fe6:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   86fea:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   86fee:	4295      	cmp	r5, r2
   86ff0:	d0f7      	beq.n	86fe2 <__mdiff+0x22>
   86ff2:	d267      	bcs.n	870c4 <__mdiff+0x104>
   86ff4:	464b      	mov	r3, r9
   86ff6:	46bb      	mov	fp, r7
   86ff8:	46d1      	mov	r9, sl
   86ffa:	4637      	mov	r7, r6
   86ffc:	469a      	mov	sl, r3
   86ffe:	2401      	movs	r4, #1
   87000:	e005      	b.n	8700e <__mdiff+0x4e>
   87002:	db61      	blt.n	870c8 <__mdiff+0x108>
   87004:	2400      	movs	r4, #0
   87006:	f109 0714 	add.w	r7, r9, #20
   8700a:	f10a 0b14 	add.w	fp, sl, #20
   8700e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   87012:	f7ff fdbb 	bl	86b8c <_Balloc>
   87016:	465d      	mov	r5, fp
   87018:	f04f 0800 	mov.w	r8, #0
   8701c:	f8d9 e010 	ldr.w	lr, [r9, #16]
   87020:	f8da 3010 	ldr.w	r3, [sl, #16]
   87024:	463e      	mov	r6, r7
   87026:	60c4      	str	r4, [r0, #12]
   87028:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8702c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   87030:	f100 0414 	add.w	r4, r0, #20
   87034:	f856 9b04 	ldr.w	r9, [r6], #4
   87038:	f855 2b04 	ldr.w	r2, [r5], #4
   8703c:	fa1f f389 	uxth.w	r3, r9
   87040:	4443      	add	r3, r8
   87042:	fa1f f882 	uxth.w	r8, r2
   87046:	0c12      	lsrs	r2, r2, #16
   87048:	eba3 0308 	sub.w	r3, r3, r8
   8704c:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   87050:	eb02 4223 	add.w	r2, r2, r3, asr #16
   87054:	b29b      	uxth	r3, r3
   87056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8705a:	45ac      	cmp	ip, r5
   8705c:	f844 3b04 	str.w	r3, [r4], #4
   87060:	ea4f 4822 	mov.w	r8, r2, asr #16
   87064:	d8e6      	bhi.n	87034 <__mdiff+0x74>
   87066:	42b7      	cmp	r7, r6
   87068:	d917      	bls.n	8709a <__mdiff+0xda>
   8706a:	46a4      	mov	ip, r4
   8706c:	4635      	mov	r5, r6
   8706e:	f855 3b04 	ldr.w	r3, [r5], #4
   87072:	b299      	uxth	r1, r3
   87074:	4441      	add	r1, r8
   87076:	140a      	asrs	r2, r1, #16
   87078:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8707c:	b289      	uxth	r1, r1
   8707e:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   87082:	42af      	cmp	r7, r5
   87084:	f84c 3b04 	str.w	r3, [ip], #4
   87088:	ea4f 4822 	mov.w	r8, r2, asr #16
   8708c:	d8ef      	bhi.n	8706e <__mdiff+0xae>
   8708e:	43f6      	mvns	r6, r6
   87090:	4437      	add	r7, r6
   87092:	f027 0703 	bic.w	r7, r7, #3
   87096:	3704      	adds	r7, #4
   87098:	443c      	add	r4, r7
   8709a:	3c04      	subs	r4, #4
   8709c:	b92b      	cbnz	r3, 870aa <__mdiff+0xea>
   8709e:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   870a2:	f10e 3eff 	add.w	lr, lr, #4294967295
   870a6:	2b00      	cmp	r3, #0
   870a8:	d0f9      	beq.n	8709e <__mdiff+0xde>
   870aa:	f8c0 e010 	str.w	lr, [r0, #16]
   870ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   870b2:	2100      	movs	r1, #0
   870b4:	f7ff fd6a 	bl	86b8c <_Balloc>
   870b8:	2201      	movs	r2, #1
   870ba:	2300      	movs	r3, #0
   870bc:	6102      	str	r2, [r0, #16]
   870be:	6143      	str	r3, [r0, #20]
   870c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   870c4:	46b3      	mov	fp, r6
   870c6:	e7a2      	b.n	8700e <__mdiff+0x4e>
   870c8:	464b      	mov	r3, r9
   870ca:	f109 0b14 	add.w	fp, r9, #20
   870ce:	f102 0714 	add.w	r7, r2, #20
   870d2:	4691      	mov	r9, r2
   870d4:	2401      	movs	r4, #1
   870d6:	469a      	mov	sl, r3
   870d8:	e799      	b.n	8700e <__mdiff+0x4e>
   870da:	bf00      	nop

000870dc <__d2b>:
   870dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   870de:	2101      	movs	r1, #1
   870e0:	b083      	sub	sp, #12
   870e2:	461c      	mov	r4, r3
   870e4:	f3c3 550a 	ubfx	r5, r3, #20, #11
   870e8:	4616      	mov	r6, r2
   870ea:	f7ff fd4f 	bl	86b8c <_Balloc>
   870ee:	f3c4 0413 	ubfx	r4, r4, #0, #20
   870f2:	4607      	mov	r7, r0
   870f4:	b10d      	cbz	r5, 870fa <__d2b+0x1e>
   870f6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   870fa:	9401      	str	r4, [sp, #4]
   870fc:	b306      	cbz	r6, 87140 <__d2b+0x64>
   870fe:	a802      	add	r0, sp, #8
   87100:	f840 6d08 	str.w	r6, [r0, #-8]!
   87104:	f7ff fdd4 	bl	86cb0 <__lo0bits>
   87108:	2800      	cmp	r0, #0
   8710a:	d130      	bne.n	8716e <__d2b+0x92>
   8710c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87110:	617a      	str	r2, [r7, #20]
   87112:	2b00      	cmp	r3, #0
   87114:	bf0c      	ite	eq
   87116:	2101      	moveq	r1, #1
   87118:	2102      	movne	r1, #2
   8711a:	61bb      	str	r3, [r7, #24]
   8711c:	6139      	str	r1, [r7, #16]
   8711e:	b9d5      	cbnz	r5, 87156 <__d2b+0x7a>
   87120:	9a08      	ldr	r2, [sp, #32]
   87122:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   87126:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8712a:	6010      	str	r0, [r2, #0]
   8712c:	6918      	ldr	r0, [r3, #16]
   8712e:	f7ff fd9f 	bl	86c70 <__hi0bits>
   87132:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87134:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   87138:	6018      	str	r0, [r3, #0]
   8713a:	4638      	mov	r0, r7
   8713c:	b003      	add	sp, #12
   8713e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87140:	a801      	add	r0, sp, #4
   87142:	f7ff fdb5 	bl	86cb0 <__lo0bits>
   87146:	2201      	movs	r2, #1
   87148:	9b01      	ldr	r3, [sp, #4]
   8714a:	4611      	mov	r1, r2
   8714c:	3020      	adds	r0, #32
   8714e:	613a      	str	r2, [r7, #16]
   87150:	617b      	str	r3, [r7, #20]
   87152:	2d00      	cmp	r5, #0
   87154:	d0e4      	beq.n	87120 <__d2b+0x44>
   87156:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8715a:	9a08      	ldr	r2, [sp, #32]
   8715c:	4403      	add	r3, r0
   8715e:	6013      	str	r3, [r2, #0]
   87160:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87162:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   87166:	6018      	str	r0, [r3, #0]
   87168:	4638      	mov	r0, r7
   8716a:	b003      	add	sp, #12
   8716c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8716e:	9b01      	ldr	r3, [sp, #4]
   87170:	f1c0 0220 	rsb	r2, r0, #32
   87174:	9900      	ldr	r1, [sp, #0]
   87176:	fa03 f202 	lsl.w	r2, r3, r2
   8717a:	430a      	orrs	r2, r1
   8717c:	40c3      	lsrs	r3, r0
   8717e:	9301      	str	r3, [sp, #4]
   87180:	617a      	str	r2, [r7, #20]
   87182:	e7c6      	b.n	87112 <__d2b+0x36>

00087184 <_sbrk_r>:
   87184:	b538      	push	{r3, r4, r5, lr}
   87186:	2300      	movs	r3, #0
   87188:	4c06      	ldr	r4, [pc, #24]	; (871a4 <_sbrk_r+0x20>)
   8718a:	4605      	mov	r5, r0
   8718c:	4608      	mov	r0, r1
   8718e:	6023      	str	r3, [r4, #0]
   87190:	f7fb ff36 	bl	83000 <_sbrk>
   87194:	1c43      	adds	r3, r0, #1
   87196:	d000      	beq.n	8719a <_sbrk_r+0x16>
   87198:	bd38      	pop	{r3, r4, r5, pc}
   8719a:	6823      	ldr	r3, [r4, #0]
   8719c:	2b00      	cmp	r3, #0
   8719e:	d0fb      	beq.n	87198 <_sbrk_r+0x14>
   871a0:	602b      	str	r3, [r5, #0]
   871a2:	bd38      	pop	{r3, r4, r5, pc}
   871a4:	20071060 	.word	0x20071060

000871a8 <__ssprint_r>:
   871a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   871ac:	6893      	ldr	r3, [r2, #8]
   871ae:	b083      	sub	sp, #12
   871b0:	4690      	mov	r8, r2
   871b2:	2b00      	cmp	r3, #0
   871b4:	d070      	beq.n	87298 <__ssprint_r+0xf0>
   871b6:	4682      	mov	sl, r0
   871b8:	460c      	mov	r4, r1
   871ba:	6817      	ldr	r7, [r2, #0]
   871bc:	688d      	ldr	r5, [r1, #8]
   871be:	6808      	ldr	r0, [r1, #0]
   871c0:	e042      	b.n	87248 <__ssprint_r+0xa0>
   871c2:	89a3      	ldrh	r3, [r4, #12]
   871c4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   871c8:	d02e      	beq.n	87228 <__ssprint_r+0x80>
   871ca:	6965      	ldr	r5, [r4, #20]
   871cc:	6921      	ldr	r1, [r4, #16]
   871ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   871d2:	eba0 0b01 	sub.w	fp, r0, r1
   871d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   871da:	f10b 0001 	add.w	r0, fp, #1
   871de:	106d      	asrs	r5, r5, #1
   871e0:	4430      	add	r0, r6
   871e2:	42a8      	cmp	r0, r5
   871e4:	462a      	mov	r2, r5
   871e6:	bf84      	itt	hi
   871e8:	4605      	movhi	r5, r0
   871ea:	462a      	movhi	r2, r5
   871ec:	055b      	lsls	r3, r3, #21
   871ee:	d538      	bpl.n	87262 <__ssprint_r+0xba>
   871f0:	4611      	mov	r1, r2
   871f2:	4650      	mov	r0, sl
   871f4:	f7ff f9d6 	bl	865a4 <_malloc_r>
   871f8:	2800      	cmp	r0, #0
   871fa:	d03c      	beq.n	87276 <__ssprint_r+0xce>
   871fc:	465a      	mov	r2, fp
   871fe:	6921      	ldr	r1, [r4, #16]
   87200:	9001      	str	r0, [sp, #4]
   87202:	f7fc fe45 	bl	83e90 <memcpy>
   87206:	89a2      	ldrh	r2, [r4, #12]
   87208:	9b01      	ldr	r3, [sp, #4]
   8720a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8720e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   87212:	81a2      	strh	r2, [r4, #12]
   87214:	eba5 020b 	sub.w	r2, r5, fp
   87218:	eb03 000b 	add.w	r0, r3, fp
   8721c:	6165      	str	r5, [r4, #20]
   8721e:	46b3      	mov	fp, r6
   87220:	4635      	mov	r5, r6
   87222:	6123      	str	r3, [r4, #16]
   87224:	6020      	str	r0, [r4, #0]
   87226:	60a2      	str	r2, [r4, #8]
   87228:	465a      	mov	r2, fp
   8722a:	4649      	mov	r1, r9
   8722c:	f000 fa18 	bl	87660 <memmove>
   87230:	f8d8 3008 	ldr.w	r3, [r8, #8]
   87234:	68a2      	ldr	r2, [r4, #8]
   87236:	6820      	ldr	r0, [r4, #0]
   87238:	1b55      	subs	r5, r2, r5
   8723a:	4458      	add	r0, fp
   8723c:	1b9e      	subs	r6, r3, r6
   8723e:	60a5      	str	r5, [r4, #8]
   87240:	6020      	str	r0, [r4, #0]
   87242:	f8c8 6008 	str.w	r6, [r8, #8]
   87246:	b33e      	cbz	r6, 87298 <__ssprint_r+0xf0>
   87248:	687e      	ldr	r6, [r7, #4]
   8724a:	463b      	mov	r3, r7
   8724c:	3708      	adds	r7, #8
   8724e:	2e00      	cmp	r6, #0
   87250:	d0fa      	beq.n	87248 <__ssprint_r+0xa0>
   87252:	42ae      	cmp	r6, r5
   87254:	f8d3 9000 	ldr.w	r9, [r3]
   87258:	46ab      	mov	fp, r5
   8725a:	d2b2      	bcs.n	871c2 <__ssprint_r+0x1a>
   8725c:	4635      	mov	r5, r6
   8725e:	46b3      	mov	fp, r6
   87260:	e7e2      	b.n	87228 <__ssprint_r+0x80>
   87262:	4650      	mov	r0, sl
   87264:	f000 fa60 	bl	87728 <_realloc_r>
   87268:	4603      	mov	r3, r0
   8726a:	2800      	cmp	r0, #0
   8726c:	d1d2      	bne.n	87214 <__ssprint_r+0x6c>
   8726e:	6921      	ldr	r1, [r4, #16]
   87270:	4650      	mov	r0, sl
   87272:	f000 f8f9 	bl	87468 <_free_r>
   87276:	230c      	movs	r3, #12
   87278:	2200      	movs	r2, #0
   8727a:	f04f 30ff 	mov.w	r0, #4294967295
   8727e:	f8ca 3000 	str.w	r3, [sl]
   87282:	89a3      	ldrh	r3, [r4, #12]
   87284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87288:	81a3      	strh	r3, [r4, #12]
   8728a:	f8c8 2008 	str.w	r2, [r8, #8]
   8728e:	f8c8 2004 	str.w	r2, [r8, #4]
   87292:	b003      	add	sp, #12
   87294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87298:	2000      	movs	r0, #0
   8729a:	f8c8 0004 	str.w	r0, [r8, #4]
   8729e:	b003      	add	sp, #12
   872a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000872a4 <__register_exitproc>:
   872a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   872a8:	4d2c      	ldr	r5, [pc, #176]	; (8735c <__register_exitproc+0xb8>)
   872aa:	4606      	mov	r6, r0
   872ac:	6828      	ldr	r0, [r5, #0]
   872ae:	4698      	mov	r8, r3
   872b0:	460f      	mov	r7, r1
   872b2:	4691      	mov	r9, r2
   872b4:	f7ff f972 	bl	8659c <__retarget_lock_acquire_recursive>
   872b8:	4b29      	ldr	r3, [pc, #164]	; (87360 <__register_exitproc+0xbc>)
   872ba:	681c      	ldr	r4, [r3, #0]
   872bc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   872c0:	2b00      	cmp	r3, #0
   872c2:	d03e      	beq.n	87342 <__register_exitproc+0x9e>
   872c4:	685a      	ldr	r2, [r3, #4]
   872c6:	2a1f      	cmp	r2, #31
   872c8:	dc1c      	bgt.n	87304 <__register_exitproc+0x60>
   872ca:	f102 0e01 	add.w	lr, r2, #1
   872ce:	b176      	cbz	r6, 872ee <__register_exitproc+0x4a>
   872d0:	2101      	movs	r1, #1
   872d2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   872d6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   872da:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   872de:	4091      	lsls	r1, r2
   872e0:	4308      	orrs	r0, r1
   872e2:	2e02      	cmp	r6, #2
   872e4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   872e8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   872ec:	d023      	beq.n	87336 <__register_exitproc+0x92>
   872ee:	3202      	adds	r2, #2
   872f0:	f8c3 e004 	str.w	lr, [r3, #4]
   872f4:	6828      	ldr	r0, [r5, #0]
   872f6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   872fa:	f7ff f951 	bl	865a0 <__retarget_lock_release_recursive>
   872fe:	2000      	movs	r0, #0
   87300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   87304:	4b17      	ldr	r3, [pc, #92]	; (87364 <__register_exitproc+0xc0>)
   87306:	b30b      	cbz	r3, 8734c <__register_exitproc+0xa8>
   87308:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8730c:	f3af 8000 	nop.w
   87310:	4603      	mov	r3, r0
   87312:	b1d8      	cbz	r0, 8734c <__register_exitproc+0xa8>
   87314:	2000      	movs	r0, #0
   87316:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8731a:	f04f 0e01 	mov.w	lr, #1
   8731e:	6058      	str	r0, [r3, #4]
   87320:	6019      	str	r1, [r3, #0]
   87322:	4602      	mov	r2, r0
   87324:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   87328:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8732c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   87330:	2e00      	cmp	r6, #0
   87332:	d0dc      	beq.n	872ee <__register_exitproc+0x4a>
   87334:	e7cc      	b.n	872d0 <__register_exitproc+0x2c>
   87336:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8733a:	4301      	orrs	r1, r0
   8733c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   87340:	e7d5      	b.n	872ee <__register_exitproc+0x4a>
   87342:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   87346:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8734a:	e7bb      	b.n	872c4 <__register_exitproc+0x20>
   8734c:	6828      	ldr	r0, [r5, #0]
   8734e:	f7ff f927 	bl	865a0 <__retarget_lock_release_recursive>
   87352:	f04f 30ff 	mov.w	r0, #4294967295
   87356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8735a:	bf00      	nop
   8735c:	200705d0 	.word	0x200705d0
   87360:	0008850c 	.word	0x0008850c
   87364:	00000000 	.word	0x00000000

00087368 <_calloc_r>:
   87368:	b510      	push	{r4, lr}
   8736a:	fb02 f101 	mul.w	r1, r2, r1
   8736e:	f7ff f919 	bl	865a4 <_malloc_r>
   87372:	4604      	mov	r4, r0
   87374:	b1d8      	cbz	r0, 873ae <_calloc_r+0x46>
   87376:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8737a:	f022 0203 	bic.w	r2, r2, #3
   8737e:	3a04      	subs	r2, #4
   87380:	2a24      	cmp	r2, #36	; 0x24
   87382:	d818      	bhi.n	873b6 <_calloc_r+0x4e>
   87384:	2a13      	cmp	r2, #19
   87386:	d914      	bls.n	873b2 <_calloc_r+0x4a>
   87388:	2300      	movs	r3, #0
   8738a:	2a1b      	cmp	r2, #27
   8738c:	6003      	str	r3, [r0, #0]
   8738e:	6043      	str	r3, [r0, #4]
   87390:	d916      	bls.n	873c0 <_calloc_r+0x58>
   87392:	2a24      	cmp	r2, #36	; 0x24
   87394:	6083      	str	r3, [r0, #8]
   87396:	60c3      	str	r3, [r0, #12]
   87398:	bf11      	iteee	ne
   8739a:	f100 0210 	addne.w	r2, r0, #16
   8739e:	6103      	streq	r3, [r0, #16]
   873a0:	6143      	streq	r3, [r0, #20]
   873a2:	f100 0218 	addeq.w	r2, r0, #24
   873a6:	2300      	movs	r3, #0
   873a8:	6013      	str	r3, [r2, #0]
   873aa:	6053      	str	r3, [r2, #4]
   873ac:	6093      	str	r3, [r2, #8]
   873ae:	4620      	mov	r0, r4
   873b0:	bd10      	pop	{r4, pc}
   873b2:	4602      	mov	r2, r0
   873b4:	e7f7      	b.n	873a6 <_calloc_r+0x3e>
   873b6:	2100      	movs	r1, #0
   873b8:	f7fc fde0 	bl	83f7c <memset>
   873bc:	4620      	mov	r0, r4
   873be:	bd10      	pop	{r4, pc}
   873c0:	f100 0208 	add.w	r2, r0, #8
   873c4:	e7ef      	b.n	873a6 <_calloc_r+0x3e>
   873c6:	bf00      	nop

000873c8 <_malloc_trim_r>:
   873c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   873ca:	460c      	mov	r4, r1
   873cc:	4f23      	ldr	r7, [pc, #140]	; (8745c <_malloc_trim_r+0x94>)
   873ce:	4606      	mov	r6, r0
   873d0:	f7ff fbd0 	bl	86b74 <__malloc_lock>
   873d4:	68bb      	ldr	r3, [r7, #8]
   873d6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   873da:	685d      	ldr	r5, [r3, #4]
   873dc:	310f      	adds	r1, #15
   873de:	f025 0503 	bic.w	r5, r5, #3
   873e2:	4429      	add	r1, r5
   873e4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   873e8:	f021 010f 	bic.w	r1, r1, #15
   873ec:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   873f0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   873f4:	db07      	blt.n	87406 <_malloc_trim_r+0x3e>
   873f6:	2100      	movs	r1, #0
   873f8:	4630      	mov	r0, r6
   873fa:	f7ff fec3 	bl	87184 <_sbrk_r>
   873fe:	68bb      	ldr	r3, [r7, #8]
   87400:	442b      	add	r3, r5
   87402:	4298      	cmp	r0, r3
   87404:	d004      	beq.n	87410 <_malloc_trim_r+0x48>
   87406:	4630      	mov	r0, r6
   87408:	f7ff fbba 	bl	86b80 <__malloc_unlock>
   8740c:	2000      	movs	r0, #0
   8740e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87410:	4261      	negs	r1, r4
   87412:	4630      	mov	r0, r6
   87414:	f7ff feb6 	bl	87184 <_sbrk_r>
   87418:	3001      	adds	r0, #1
   8741a:	d00d      	beq.n	87438 <_malloc_trim_r+0x70>
   8741c:	4b10      	ldr	r3, [pc, #64]	; (87460 <_malloc_trim_r+0x98>)
   8741e:	68ba      	ldr	r2, [r7, #8]
   87420:	6819      	ldr	r1, [r3, #0]
   87422:	1b2d      	subs	r5, r5, r4
   87424:	f045 0501 	orr.w	r5, r5, #1
   87428:	4630      	mov	r0, r6
   8742a:	1b09      	subs	r1, r1, r4
   8742c:	6055      	str	r5, [r2, #4]
   8742e:	6019      	str	r1, [r3, #0]
   87430:	f7ff fba6 	bl	86b80 <__malloc_unlock>
   87434:	2001      	movs	r0, #1
   87436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87438:	2100      	movs	r1, #0
   8743a:	4630      	mov	r0, r6
   8743c:	f7ff fea2 	bl	87184 <_sbrk_r>
   87440:	68ba      	ldr	r2, [r7, #8]
   87442:	1a83      	subs	r3, r0, r2
   87444:	2b0f      	cmp	r3, #15
   87446:	ddde      	ble.n	87406 <_malloc_trim_r+0x3e>
   87448:	4c06      	ldr	r4, [pc, #24]	; (87464 <_malloc_trim_r+0x9c>)
   8744a:	4905      	ldr	r1, [pc, #20]	; (87460 <_malloc_trim_r+0x98>)
   8744c:	6824      	ldr	r4, [r4, #0]
   8744e:	f043 0301 	orr.w	r3, r3, #1
   87452:	1b00      	subs	r0, r0, r4
   87454:	6053      	str	r3, [r2, #4]
   87456:	6008      	str	r0, [r1, #0]
   87458:	e7d5      	b.n	87406 <_malloc_trim_r+0x3e>
   8745a:	bf00      	nop
   8745c:	200705d4 	.word	0x200705d4
   87460:	20070fb8 	.word	0x20070fb8
   87464:	200709dc 	.word	0x200709dc

00087468 <_free_r>:
   87468:	2900      	cmp	r1, #0
   8746a:	d044      	beq.n	874f6 <_free_r+0x8e>
   8746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87470:	460d      	mov	r5, r1
   87472:	4680      	mov	r8, r0
   87474:	f7ff fb7e 	bl	86b74 <__malloc_lock>
   87478:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8747c:	4969      	ldr	r1, [pc, #420]	; (87624 <_free_r+0x1bc>)
   8747e:	f1a5 0408 	sub.w	r4, r5, #8
   87482:	f027 0301 	bic.w	r3, r7, #1
   87486:	18e2      	adds	r2, r4, r3
   87488:	688e      	ldr	r6, [r1, #8]
   8748a:	6850      	ldr	r0, [r2, #4]
   8748c:	42b2      	cmp	r2, r6
   8748e:	f020 0003 	bic.w	r0, r0, #3
   87492:	d05e      	beq.n	87552 <_free_r+0xea>
   87494:	07fe      	lsls	r6, r7, #31
   87496:	6050      	str	r0, [r2, #4]
   87498:	d40b      	bmi.n	874b2 <_free_r+0x4a>
   8749a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8749e:	f101 0e08 	add.w	lr, r1, #8
   874a2:	1be4      	subs	r4, r4, r7
   874a4:	68a5      	ldr	r5, [r4, #8]
   874a6:	443b      	add	r3, r7
   874a8:	4575      	cmp	r5, lr
   874aa:	d06d      	beq.n	87588 <_free_r+0x120>
   874ac:	68e7      	ldr	r7, [r4, #12]
   874ae:	60ef      	str	r7, [r5, #12]
   874b0:	60bd      	str	r5, [r7, #8]
   874b2:	1815      	adds	r5, r2, r0
   874b4:	686d      	ldr	r5, [r5, #4]
   874b6:	07ed      	lsls	r5, r5, #31
   874b8:	d53e      	bpl.n	87538 <_free_r+0xd0>
   874ba:	f043 0201 	orr.w	r2, r3, #1
   874be:	6062      	str	r2, [r4, #4]
   874c0:	50e3      	str	r3, [r4, r3]
   874c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   874c6:	d217      	bcs.n	874f8 <_free_r+0x90>
   874c8:	2201      	movs	r2, #1
   874ca:	08db      	lsrs	r3, r3, #3
   874cc:	1098      	asrs	r0, r3, #2
   874ce:	684d      	ldr	r5, [r1, #4]
   874d0:	4413      	add	r3, r2
   874d2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   874d6:	4082      	lsls	r2, r0
   874d8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   874dc:	432a      	orrs	r2, r5
   874de:	3808      	subs	r0, #8
   874e0:	60e0      	str	r0, [r4, #12]
   874e2:	60a7      	str	r7, [r4, #8]
   874e4:	604a      	str	r2, [r1, #4]
   874e6:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   874ea:	60fc      	str	r4, [r7, #12]
   874ec:	4640      	mov	r0, r8
   874ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   874f2:	f7ff bb45 	b.w	86b80 <__malloc_unlock>
   874f6:	4770      	bx	lr
   874f8:	0a5a      	lsrs	r2, r3, #9
   874fa:	2a04      	cmp	r2, #4
   874fc:	d852      	bhi.n	875a4 <_free_r+0x13c>
   874fe:	099a      	lsrs	r2, r3, #6
   87500:	f102 0739 	add.w	r7, r2, #57	; 0x39
   87504:	00ff      	lsls	r7, r7, #3
   87506:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8750a:	19c8      	adds	r0, r1, r7
   8750c:	59ca      	ldr	r2, [r1, r7]
   8750e:	3808      	subs	r0, #8
   87510:	4290      	cmp	r0, r2
   87512:	d04f      	beq.n	875b4 <_free_r+0x14c>
   87514:	6851      	ldr	r1, [r2, #4]
   87516:	f021 0103 	bic.w	r1, r1, #3
   8751a:	428b      	cmp	r3, r1
   8751c:	d232      	bcs.n	87584 <_free_r+0x11c>
   8751e:	6892      	ldr	r2, [r2, #8]
   87520:	4290      	cmp	r0, r2
   87522:	d1f7      	bne.n	87514 <_free_r+0xac>
   87524:	68c3      	ldr	r3, [r0, #12]
   87526:	60a0      	str	r0, [r4, #8]
   87528:	60e3      	str	r3, [r4, #12]
   8752a:	609c      	str	r4, [r3, #8]
   8752c:	60c4      	str	r4, [r0, #12]
   8752e:	4640      	mov	r0, r8
   87530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   87534:	f7ff bb24 	b.w	86b80 <__malloc_unlock>
   87538:	6895      	ldr	r5, [r2, #8]
   8753a:	4f3b      	ldr	r7, [pc, #236]	; (87628 <_free_r+0x1c0>)
   8753c:	4403      	add	r3, r0
   8753e:	42bd      	cmp	r5, r7
   87540:	d040      	beq.n	875c4 <_free_r+0x15c>
   87542:	68d0      	ldr	r0, [r2, #12]
   87544:	f043 0201 	orr.w	r2, r3, #1
   87548:	60e8      	str	r0, [r5, #12]
   8754a:	6085      	str	r5, [r0, #8]
   8754c:	6062      	str	r2, [r4, #4]
   8754e:	50e3      	str	r3, [r4, r3]
   87550:	e7b7      	b.n	874c2 <_free_r+0x5a>
   87552:	07ff      	lsls	r7, r7, #31
   87554:	4403      	add	r3, r0
   87556:	d407      	bmi.n	87568 <_free_r+0x100>
   87558:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8755c:	1b64      	subs	r4, r4, r5
   8755e:	68e2      	ldr	r2, [r4, #12]
   87560:	68a0      	ldr	r0, [r4, #8]
   87562:	442b      	add	r3, r5
   87564:	60c2      	str	r2, [r0, #12]
   87566:	6090      	str	r0, [r2, #8]
   87568:	4a30      	ldr	r2, [pc, #192]	; (8762c <_free_r+0x1c4>)
   8756a:	f043 0001 	orr.w	r0, r3, #1
   8756e:	6812      	ldr	r2, [r2, #0]
   87570:	6060      	str	r0, [r4, #4]
   87572:	4293      	cmp	r3, r2
   87574:	608c      	str	r4, [r1, #8]
   87576:	d3b9      	bcc.n	874ec <_free_r+0x84>
   87578:	4b2d      	ldr	r3, [pc, #180]	; (87630 <_free_r+0x1c8>)
   8757a:	4640      	mov	r0, r8
   8757c:	6819      	ldr	r1, [r3, #0]
   8757e:	f7ff ff23 	bl	873c8 <_malloc_trim_r>
   87582:	e7b3      	b.n	874ec <_free_r+0x84>
   87584:	4610      	mov	r0, r2
   87586:	e7cd      	b.n	87524 <_free_r+0xbc>
   87588:	1811      	adds	r1, r2, r0
   8758a:	6849      	ldr	r1, [r1, #4]
   8758c:	07c9      	lsls	r1, r1, #31
   8758e:	d444      	bmi.n	8761a <_free_r+0x1b2>
   87590:	6891      	ldr	r1, [r2, #8]
   87592:	4403      	add	r3, r0
   87594:	68d2      	ldr	r2, [r2, #12]
   87596:	f043 0001 	orr.w	r0, r3, #1
   8759a:	60ca      	str	r2, [r1, #12]
   8759c:	6091      	str	r1, [r2, #8]
   8759e:	6060      	str	r0, [r4, #4]
   875a0:	50e3      	str	r3, [r4, r3]
   875a2:	e7a3      	b.n	874ec <_free_r+0x84>
   875a4:	2a14      	cmp	r2, #20
   875a6:	d816      	bhi.n	875d6 <_free_r+0x16e>
   875a8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   875ac:	00ff      	lsls	r7, r7, #3
   875ae:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   875b2:	e7aa      	b.n	8750a <_free_r+0xa2>
   875b4:	2301      	movs	r3, #1
   875b6:	10aa      	asrs	r2, r5, #2
   875b8:	684d      	ldr	r5, [r1, #4]
   875ba:	4093      	lsls	r3, r2
   875bc:	432b      	orrs	r3, r5
   875be:	604b      	str	r3, [r1, #4]
   875c0:	4603      	mov	r3, r0
   875c2:	e7b0      	b.n	87526 <_free_r+0xbe>
   875c4:	f043 0201 	orr.w	r2, r3, #1
   875c8:	614c      	str	r4, [r1, #20]
   875ca:	610c      	str	r4, [r1, #16]
   875cc:	60e5      	str	r5, [r4, #12]
   875ce:	60a5      	str	r5, [r4, #8]
   875d0:	6062      	str	r2, [r4, #4]
   875d2:	50e3      	str	r3, [r4, r3]
   875d4:	e78a      	b.n	874ec <_free_r+0x84>
   875d6:	2a54      	cmp	r2, #84	; 0x54
   875d8:	d806      	bhi.n	875e8 <_free_r+0x180>
   875da:	0b1a      	lsrs	r2, r3, #12
   875dc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   875e0:	00ff      	lsls	r7, r7, #3
   875e2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   875e6:	e790      	b.n	8750a <_free_r+0xa2>
   875e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   875ec:	d806      	bhi.n	875fc <_free_r+0x194>
   875ee:	0bda      	lsrs	r2, r3, #15
   875f0:	f102 0778 	add.w	r7, r2, #120	; 0x78
   875f4:	00ff      	lsls	r7, r7, #3
   875f6:	f102 0577 	add.w	r5, r2, #119	; 0x77
   875fa:	e786      	b.n	8750a <_free_r+0xa2>
   875fc:	f240 5054 	movw	r0, #1364	; 0x554
   87600:	4282      	cmp	r2, r0
   87602:	d806      	bhi.n	87612 <_free_r+0x1aa>
   87604:	0c9a      	lsrs	r2, r3, #18
   87606:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8760a:	00ff      	lsls	r7, r7, #3
   8760c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   87610:	e77b      	b.n	8750a <_free_r+0xa2>
   87612:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   87616:	257e      	movs	r5, #126	; 0x7e
   87618:	e777      	b.n	8750a <_free_r+0xa2>
   8761a:	f043 0101 	orr.w	r1, r3, #1
   8761e:	6061      	str	r1, [r4, #4]
   87620:	6013      	str	r3, [r2, #0]
   87622:	e763      	b.n	874ec <_free_r+0x84>
   87624:	200705d4 	.word	0x200705d4
   87628:	200705dc 	.word	0x200705dc
   8762c:	200709e0 	.word	0x200709e0
   87630:	20070fe8 	.word	0x20070fe8

00087634 <__ascii_mbtowc>:
   87634:	b082      	sub	sp, #8
   87636:	b149      	cbz	r1, 8764c <__ascii_mbtowc+0x18>
   87638:	b15a      	cbz	r2, 87652 <__ascii_mbtowc+0x1e>
   8763a:	b16b      	cbz	r3, 87658 <__ascii_mbtowc+0x24>
   8763c:	7813      	ldrb	r3, [r2, #0]
   8763e:	600b      	str	r3, [r1, #0]
   87640:	7812      	ldrb	r2, [r2, #0]
   87642:	1c10      	adds	r0, r2, #0
   87644:	bf18      	it	ne
   87646:	2001      	movne	r0, #1
   87648:	b002      	add	sp, #8
   8764a:	4770      	bx	lr
   8764c:	a901      	add	r1, sp, #4
   8764e:	2a00      	cmp	r2, #0
   87650:	d1f3      	bne.n	8763a <__ascii_mbtowc+0x6>
   87652:	4610      	mov	r0, r2
   87654:	b002      	add	sp, #8
   87656:	4770      	bx	lr
   87658:	f06f 0001 	mvn.w	r0, #1
   8765c:	e7f4      	b.n	87648 <__ascii_mbtowc+0x14>
   8765e:	bf00      	nop

00087660 <memmove>:
   87660:	4288      	cmp	r0, r1
   87662:	b5f0      	push	{r4, r5, r6, r7, lr}
   87664:	d90d      	bls.n	87682 <memmove+0x22>
   87666:	188b      	adds	r3, r1, r2
   87668:	4298      	cmp	r0, r3
   8766a:	d20a      	bcs.n	87682 <memmove+0x22>
   8766c:	1884      	adds	r4, r0, r2
   8766e:	2a00      	cmp	r2, #0
   87670:	d051      	beq.n	87716 <memmove+0xb6>
   87672:	4622      	mov	r2, r4
   87674:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   87678:	4299      	cmp	r1, r3
   8767a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8767e:	d1f9      	bne.n	87674 <memmove+0x14>
   87680:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87682:	2a0f      	cmp	r2, #15
   87684:	d948      	bls.n	87718 <memmove+0xb8>
   87686:	ea41 0300 	orr.w	r3, r1, r0
   8768a:	079b      	lsls	r3, r3, #30
   8768c:	d146      	bne.n	8771c <memmove+0xbc>
   8768e:	4615      	mov	r5, r2
   87690:	f100 0410 	add.w	r4, r0, #16
   87694:	f101 0310 	add.w	r3, r1, #16
   87698:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8769c:	3d10      	subs	r5, #16
   8769e:	f844 6c10 	str.w	r6, [r4, #-16]
   876a2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   876a6:	2d0f      	cmp	r5, #15
   876a8:	f844 6c0c 	str.w	r6, [r4, #-12]
   876ac:	f853 6c08 	ldr.w	r6, [r3, #-8]
   876b0:	f104 0410 	add.w	r4, r4, #16
   876b4:	f844 6c18 	str.w	r6, [r4, #-24]
   876b8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   876bc:	f103 0310 	add.w	r3, r3, #16
   876c0:	f844 6c14 	str.w	r6, [r4, #-20]
   876c4:	d8e8      	bhi.n	87698 <memmove+0x38>
   876c6:	f1a2 0310 	sub.w	r3, r2, #16
   876ca:	f023 030f 	bic.w	r3, r3, #15
   876ce:	f002 0e0f 	and.w	lr, r2, #15
   876d2:	3310      	adds	r3, #16
   876d4:	f1be 0f03 	cmp.w	lr, #3
   876d8:	4419      	add	r1, r3
   876da:	4403      	add	r3, r0
   876dc:	d921      	bls.n	87722 <memmove+0xc2>
   876de:	460e      	mov	r6, r1
   876e0:	4674      	mov	r4, lr
   876e2:	1f1d      	subs	r5, r3, #4
   876e4:	f856 7b04 	ldr.w	r7, [r6], #4
   876e8:	3c04      	subs	r4, #4
   876ea:	2c03      	cmp	r4, #3
   876ec:	f845 7f04 	str.w	r7, [r5, #4]!
   876f0:	d8f8      	bhi.n	876e4 <memmove+0x84>
   876f2:	f1ae 0404 	sub.w	r4, lr, #4
   876f6:	f024 0403 	bic.w	r4, r4, #3
   876fa:	3404      	adds	r4, #4
   876fc:	4421      	add	r1, r4
   876fe:	4423      	add	r3, r4
   87700:	f002 0203 	and.w	r2, r2, #3
   87704:	b162      	cbz	r2, 87720 <memmove+0xc0>
   87706:	3b01      	subs	r3, #1
   87708:	440a      	add	r2, r1
   8770a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8770e:	428a      	cmp	r2, r1
   87710:	f803 4f01 	strb.w	r4, [r3, #1]!
   87714:	d1f9      	bne.n	8770a <memmove+0xaa>
   87716:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87718:	4603      	mov	r3, r0
   8771a:	e7f3      	b.n	87704 <memmove+0xa4>
   8771c:	4603      	mov	r3, r0
   8771e:	e7f2      	b.n	87706 <memmove+0xa6>
   87720:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87722:	4672      	mov	r2, lr
   87724:	e7ee      	b.n	87704 <memmove+0xa4>
   87726:	bf00      	nop

00087728 <_realloc_r>:
   87728:	2900      	cmp	r1, #0
   8772a:	f000 8094 	beq.w	87856 <_realloc_r+0x12e>
   8772e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87732:	460c      	mov	r4, r1
   87734:	4615      	mov	r5, r2
   87736:	b083      	sub	sp, #12
   87738:	4680      	mov	r8, r0
   8773a:	f105 060b 	add.w	r6, r5, #11
   8773e:	f7ff fa19 	bl	86b74 <__malloc_lock>
   87742:	f854 ec04 	ldr.w	lr, [r4, #-4]
   87746:	2e16      	cmp	r6, #22
   87748:	f02e 0703 	bic.w	r7, lr, #3
   8774c:	f1a4 0908 	sub.w	r9, r4, #8
   87750:	d83c      	bhi.n	877cc <_realloc_r+0xa4>
   87752:	2210      	movs	r2, #16
   87754:	4616      	mov	r6, r2
   87756:	42b5      	cmp	r5, r6
   87758:	d83d      	bhi.n	877d6 <_realloc_r+0xae>
   8775a:	4297      	cmp	r7, r2
   8775c:	da43      	bge.n	877e6 <_realloc_r+0xbe>
   8775e:	4bc6      	ldr	r3, [pc, #792]	; (87a78 <_realloc_r+0x350>)
   87760:	eb09 0007 	add.w	r0, r9, r7
   87764:	6899      	ldr	r1, [r3, #8]
   87766:	4288      	cmp	r0, r1
   87768:	f000 80c3 	beq.w	878f2 <_realloc_r+0x1ca>
   8776c:	6843      	ldr	r3, [r0, #4]
   8776e:	f023 0101 	bic.w	r1, r3, #1
   87772:	4401      	add	r1, r0
   87774:	6849      	ldr	r1, [r1, #4]
   87776:	07c9      	lsls	r1, r1, #31
   87778:	d54d      	bpl.n	87816 <_realloc_r+0xee>
   8777a:	f01e 0f01 	tst.w	lr, #1
   8777e:	f000 809b 	beq.w	878b8 <_realloc_r+0x190>
   87782:	4629      	mov	r1, r5
   87784:	4640      	mov	r0, r8
   87786:	f7fe ff0d 	bl	865a4 <_malloc_r>
   8778a:	4605      	mov	r5, r0
   8778c:	2800      	cmp	r0, #0
   8778e:	d03b      	beq.n	87808 <_realloc_r+0xe0>
   87790:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87794:	f1a0 0208 	sub.w	r2, r0, #8
   87798:	f023 0301 	bic.w	r3, r3, #1
   8779c:	444b      	add	r3, r9
   8779e:	429a      	cmp	r2, r3
   877a0:	f000 812b 	beq.w	879fa <_realloc_r+0x2d2>
   877a4:	1f3a      	subs	r2, r7, #4
   877a6:	2a24      	cmp	r2, #36	; 0x24
   877a8:	f200 8118 	bhi.w	879dc <_realloc_r+0x2b4>
   877ac:	2a13      	cmp	r2, #19
   877ae:	f200 80eb 	bhi.w	87988 <_realloc_r+0x260>
   877b2:	4603      	mov	r3, r0
   877b4:	4622      	mov	r2, r4
   877b6:	6811      	ldr	r1, [r2, #0]
   877b8:	6019      	str	r1, [r3, #0]
   877ba:	6851      	ldr	r1, [r2, #4]
   877bc:	6059      	str	r1, [r3, #4]
   877be:	6892      	ldr	r2, [r2, #8]
   877c0:	609a      	str	r2, [r3, #8]
   877c2:	4621      	mov	r1, r4
   877c4:	4640      	mov	r0, r8
   877c6:	f7ff fe4f 	bl	87468 <_free_r>
   877ca:	e01d      	b.n	87808 <_realloc_r+0xe0>
   877cc:	f026 0607 	bic.w	r6, r6, #7
   877d0:	2e00      	cmp	r6, #0
   877d2:	4632      	mov	r2, r6
   877d4:	dabf      	bge.n	87756 <_realloc_r+0x2e>
   877d6:	2500      	movs	r5, #0
   877d8:	230c      	movs	r3, #12
   877da:	4628      	mov	r0, r5
   877dc:	f8c8 3000 	str.w	r3, [r8]
   877e0:	b003      	add	sp, #12
   877e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   877e6:	4625      	mov	r5, r4
   877e8:	1bbb      	subs	r3, r7, r6
   877ea:	2b0f      	cmp	r3, #15
   877ec:	f8d9 2004 	ldr.w	r2, [r9, #4]
   877f0:	d81d      	bhi.n	8782e <_realloc_r+0x106>
   877f2:	f002 0201 	and.w	r2, r2, #1
   877f6:	433a      	orrs	r2, r7
   877f8:	eb09 0107 	add.w	r1, r9, r7
   877fc:	f8c9 2004 	str.w	r2, [r9, #4]
   87800:	684b      	ldr	r3, [r1, #4]
   87802:	f043 0301 	orr.w	r3, r3, #1
   87806:	604b      	str	r3, [r1, #4]
   87808:	4640      	mov	r0, r8
   8780a:	f7ff f9b9 	bl	86b80 <__malloc_unlock>
   8780e:	4628      	mov	r0, r5
   87810:	b003      	add	sp, #12
   87812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87816:	f023 0303 	bic.w	r3, r3, #3
   8781a:	18f9      	adds	r1, r7, r3
   8781c:	4291      	cmp	r1, r2
   8781e:	db1d      	blt.n	8785c <_realloc_r+0x134>
   87820:	68c3      	ldr	r3, [r0, #12]
   87822:	6882      	ldr	r2, [r0, #8]
   87824:	4625      	mov	r5, r4
   87826:	60d3      	str	r3, [r2, #12]
   87828:	460f      	mov	r7, r1
   8782a:	609a      	str	r2, [r3, #8]
   8782c:	e7dc      	b.n	877e8 <_realloc_r+0xc0>
   8782e:	f002 0201 	and.w	r2, r2, #1
   87832:	eb09 0106 	add.w	r1, r9, r6
   87836:	f043 0301 	orr.w	r3, r3, #1
   8783a:	4332      	orrs	r2, r6
   8783c:	f8c9 2004 	str.w	r2, [r9, #4]
   87840:	444f      	add	r7, r9
   87842:	604b      	str	r3, [r1, #4]
   87844:	687b      	ldr	r3, [r7, #4]
   87846:	3108      	adds	r1, #8
   87848:	f043 0301 	orr.w	r3, r3, #1
   8784c:	607b      	str	r3, [r7, #4]
   8784e:	4640      	mov	r0, r8
   87850:	f7ff fe0a 	bl	87468 <_free_r>
   87854:	e7d8      	b.n	87808 <_realloc_r+0xe0>
   87856:	4611      	mov	r1, r2
   87858:	f7fe bea4 	b.w	865a4 <_malloc_r>
   8785c:	f01e 0f01 	tst.w	lr, #1
   87860:	d18f      	bne.n	87782 <_realloc_r+0x5a>
   87862:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87866:	eba9 0a01 	sub.w	sl, r9, r1
   8786a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8786e:	f021 0103 	bic.w	r1, r1, #3
   87872:	440b      	add	r3, r1
   87874:	443b      	add	r3, r7
   87876:	4293      	cmp	r3, r2
   87878:	db26      	blt.n	878c8 <_realloc_r+0x1a0>
   8787a:	4655      	mov	r5, sl
   8787c:	68c1      	ldr	r1, [r0, #12]
   8787e:	6880      	ldr	r0, [r0, #8]
   87880:	1f3a      	subs	r2, r7, #4
   87882:	60c1      	str	r1, [r0, #12]
   87884:	6088      	str	r0, [r1, #8]
   87886:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8788a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8788e:	2a24      	cmp	r2, #36	; 0x24
   87890:	60c1      	str	r1, [r0, #12]
   87892:	6088      	str	r0, [r1, #8]
   87894:	d826      	bhi.n	878e4 <_realloc_r+0x1bc>
   87896:	2a13      	cmp	r2, #19
   87898:	f240 8081 	bls.w	8799e <_realloc_r+0x276>
   8789c:	6821      	ldr	r1, [r4, #0]
   8789e:	2a1b      	cmp	r2, #27
   878a0:	f8ca 1008 	str.w	r1, [sl, #8]
   878a4:	6861      	ldr	r1, [r4, #4]
   878a6:	f8ca 100c 	str.w	r1, [sl, #12]
   878aa:	f200 80ad 	bhi.w	87a08 <_realloc_r+0x2e0>
   878ae:	f104 0008 	add.w	r0, r4, #8
   878b2:	f10a 0210 	add.w	r2, sl, #16
   878b6:	e074      	b.n	879a2 <_realloc_r+0x27a>
   878b8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   878bc:	eba9 0a03 	sub.w	sl, r9, r3
   878c0:	f8da 1004 	ldr.w	r1, [sl, #4]
   878c4:	f021 0103 	bic.w	r1, r1, #3
   878c8:	187b      	adds	r3, r7, r1
   878ca:	4293      	cmp	r3, r2
   878cc:	f6ff af59 	blt.w	87782 <_realloc_r+0x5a>
   878d0:	4655      	mov	r5, sl
   878d2:	f8da 100c 	ldr.w	r1, [sl, #12]
   878d6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   878da:	1f3a      	subs	r2, r7, #4
   878dc:	2a24      	cmp	r2, #36	; 0x24
   878de:	60c1      	str	r1, [r0, #12]
   878e0:	6088      	str	r0, [r1, #8]
   878e2:	d9d8      	bls.n	87896 <_realloc_r+0x16e>
   878e4:	4621      	mov	r1, r4
   878e6:	4628      	mov	r0, r5
   878e8:	461f      	mov	r7, r3
   878ea:	46d1      	mov	r9, sl
   878ec:	f7ff feb8 	bl	87660 <memmove>
   878f0:	e77a      	b.n	877e8 <_realloc_r+0xc0>
   878f2:	6841      	ldr	r1, [r0, #4]
   878f4:	f106 0010 	add.w	r0, r6, #16
   878f8:	f021 0b03 	bic.w	fp, r1, #3
   878fc:	44bb      	add	fp, r7
   878fe:	4583      	cmp	fp, r0
   87900:	da58      	bge.n	879b4 <_realloc_r+0x28c>
   87902:	f01e 0f01 	tst.w	lr, #1
   87906:	f47f af3c 	bne.w	87782 <_realloc_r+0x5a>
   8790a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8790e:	eba9 0a01 	sub.w	sl, r9, r1
   87912:	f8da 1004 	ldr.w	r1, [sl, #4]
   87916:	f021 0103 	bic.w	r1, r1, #3
   8791a:	448b      	add	fp, r1
   8791c:	4558      	cmp	r0, fp
   8791e:	dcd3      	bgt.n	878c8 <_realloc_r+0x1a0>
   87920:	4655      	mov	r5, sl
   87922:	f8da 100c 	ldr.w	r1, [sl, #12]
   87926:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8792a:	1f3a      	subs	r2, r7, #4
   8792c:	2a24      	cmp	r2, #36	; 0x24
   8792e:	60c1      	str	r1, [r0, #12]
   87930:	6088      	str	r0, [r1, #8]
   87932:	f200 808d 	bhi.w	87a50 <_realloc_r+0x328>
   87936:	2a13      	cmp	r2, #19
   87938:	f240 8087 	bls.w	87a4a <_realloc_r+0x322>
   8793c:	6821      	ldr	r1, [r4, #0]
   8793e:	2a1b      	cmp	r2, #27
   87940:	f8ca 1008 	str.w	r1, [sl, #8]
   87944:	6861      	ldr	r1, [r4, #4]
   87946:	f8ca 100c 	str.w	r1, [sl, #12]
   8794a:	f200 8088 	bhi.w	87a5e <_realloc_r+0x336>
   8794e:	f104 0108 	add.w	r1, r4, #8
   87952:	f10a 0210 	add.w	r2, sl, #16
   87956:	6808      	ldr	r0, [r1, #0]
   87958:	6010      	str	r0, [r2, #0]
   8795a:	6848      	ldr	r0, [r1, #4]
   8795c:	6050      	str	r0, [r2, #4]
   8795e:	6889      	ldr	r1, [r1, #8]
   87960:	6091      	str	r1, [r2, #8]
   87962:	ebab 0206 	sub.w	r2, fp, r6
   87966:	eb0a 0106 	add.w	r1, sl, r6
   8796a:	f042 0201 	orr.w	r2, r2, #1
   8796e:	6099      	str	r1, [r3, #8]
   87970:	604a      	str	r2, [r1, #4]
   87972:	f8da 3004 	ldr.w	r3, [sl, #4]
   87976:	4640      	mov	r0, r8
   87978:	f003 0301 	and.w	r3, r3, #1
   8797c:	431e      	orrs	r6, r3
   8797e:	f8ca 6004 	str.w	r6, [sl, #4]
   87982:	f7ff f8fd 	bl	86b80 <__malloc_unlock>
   87986:	e742      	b.n	8780e <_realloc_r+0xe6>
   87988:	6823      	ldr	r3, [r4, #0]
   8798a:	2a1b      	cmp	r2, #27
   8798c:	6003      	str	r3, [r0, #0]
   8798e:	6863      	ldr	r3, [r4, #4]
   87990:	6043      	str	r3, [r0, #4]
   87992:	d827      	bhi.n	879e4 <_realloc_r+0x2bc>
   87994:	f100 0308 	add.w	r3, r0, #8
   87998:	f104 0208 	add.w	r2, r4, #8
   8799c:	e70b      	b.n	877b6 <_realloc_r+0x8e>
   8799e:	4620      	mov	r0, r4
   879a0:	462a      	mov	r2, r5
   879a2:	6801      	ldr	r1, [r0, #0]
   879a4:	461f      	mov	r7, r3
   879a6:	6011      	str	r1, [r2, #0]
   879a8:	6841      	ldr	r1, [r0, #4]
   879aa:	46d1      	mov	r9, sl
   879ac:	6051      	str	r1, [r2, #4]
   879ae:	6883      	ldr	r3, [r0, #8]
   879b0:	6093      	str	r3, [r2, #8]
   879b2:	e719      	b.n	877e8 <_realloc_r+0xc0>
   879b4:	ebab 0b06 	sub.w	fp, fp, r6
   879b8:	eb09 0106 	add.w	r1, r9, r6
   879bc:	f04b 0201 	orr.w	r2, fp, #1
   879c0:	6099      	str	r1, [r3, #8]
   879c2:	604a      	str	r2, [r1, #4]
   879c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   879c8:	4640      	mov	r0, r8
   879ca:	f003 0301 	and.w	r3, r3, #1
   879ce:	431e      	orrs	r6, r3
   879d0:	f844 6c04 	str.w	r6, [r4, #-4]
   879d4:	f7ff f8d4 	bl	86b80 <__malloc_unlock>
   879d8:	4625      	mov	r5, r4
   879da:	e718      	b.n	8780e <_realloc_r+0xe6>
   879dc:	4621      	mov	r1, r4
   879de:	f7ff fe3f 	bl	87660 <memmove>
   879e2:	e6ee      	b.n	877c2 <_realloc_r+0x9a>
   879e4:	68a3      	ldr	r3, [r4, #8]
   879e6:	2a24      	cmp	r2, #36	; 0x24
   879e8:	6083      	str	r3, [r0, #8]
   879ea:	68e3      	ldr	r3, [r4, #12]
   879ec:	60c3      	str	r3, [r0, #12]
   879ee:	d018      	beq.n	87a22 <_realloc_r+0x2fa>
   879f0:	f100 0310 	add.w	r3, r0, #16
   879f4:	f104 0210 	add.w	r2, r4, #16
   879f8:	e6dd      	b.n	877b6 <_realloc_r+0x8e>
   879fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
   879fe:	4625      	mov	r5, r4
   87a00:	f023 0303 	bic.w	r3, r3, #3
   87a04:	441f      	add	r7, r3
   87a06:	e6ef      	b.n	877e8 <_realloc_r+0xc0>
   87a08:	68a1      	ldr	r1, [r4, #8]
   87a0a:	2a24      	cmp	r2, #36	; 0x24
   87a0c:	f8ca 1010 	str.w	r1, [sl, #16]
   87a10:	68e1      	ldr	r1, [r4, #12]
   87a12:	f8ca 1014 	str.w	r1, [sl, #20]
   87a16:	d00d      	beq.n	87a34 <_realloc_r+0x30c>
   87a18:	f104 0010 	add.w	r0, r4, #16
   87a1c:	f10a 0218 	add.w	r2, sl, #24
   87a20:	e7bf      	b.n	879a2 <_realloc_r+0x27a>
   87a22:	6922      	ldr	r2, [r4, #16]
   87a24:	f100 0318 	add.w	r3, r0, #24
   87a28:	6102      	str	r2, [r0, #16]
   87a2a:	6961      	ldr	r1, [r4, #20]
   87a2c:	f104 0218 	add.w	r2, r4, #24
   87a30:	6141      	str	r1, [r0, #20]
   87a32:	e6c0      	b.n	877b6 <_realloc_r+0x8e>
   87a34:	6922      	ldr	r2, [r4, #16]
   87a36:	f104 0018 	add.w	r0, r4, #24
   87a3a:	f8ca 2018 	str.w	r2, [sl, #24]
   87a3e:	6961      	ldr	r1, [r4, #20]
   87a40:	f10a 0220 	add.w	r2, sl, #32
   87a44:	f8ca 101c 	str.w	r1, [sl, #28]
   87a48:	e7ab      	b.n	879a2 <_realloc_r+0x27a>
   87a4a:	4621      	mov	r1, r4
   87a4c:	462a      	mov	r2, r5
   87a4e:	e782      	b.n	87956 <_realloc_r+0x22e>
   87a50:	4621      	mov	r1, r4
   87a52:	4628      	mov	r0, r5
   87a54:	9301      	str	r3, [sp, #4]
   87a56:	f7ff fe03 	bl	87660 <memmove>
   87a5a:	9b01      	ldr	r3, [sp, #4]
   87a5c:	e781      	b.n	87962 <_realloc_r+0x23a>
   87a5e:	68a1      	ldr	r1, [r4, #8]
   87a60:	2a24      	cmp	r2, #36	; 0x24
   87a62:	f8ca 1010 	str.w	r1, [sl, #16]
   87a66:	68e1      	ldr	r1, [r4, #12]
   87a68:	f8ca 1014 	str.w	r1, [sl, #20]
   87a6c:	d006      	beq.n	87a7c <_realloc_r+0x354>
   87a6e:	f104 0110 	add.w	r1, r4, #16
   87a72:	f10a 0218 	add.w	r2, sl, #24
   87a76:	e76e      	b.n	87956 <_realloc_r+0x22e>
   87a78:	200705d4 	.word	0x200705d4
   87a7c:	6922      	ldr	r2, [r4, #16]
   87a7e:	f104 0118 	add.w	r1, r4, #24
   87a82:	f8ca 2018 	str.w	r2, [sl, #24]
   87a86:	6960      	ldr	r0, [r4, #20]
   87a88:	f10a 0220 	add.w	r2, sl, #32
   87a8c:	f8ca 001c 	str.w	r0, [sl, #28]
   87a90:	e761      	b.n	87956 <_realloc_r+0x22e>
   87a92:	bf00      	nop

00087a94 <__ascii_wctomb>:
   87a94:	b119      	cbz	r1, 87a9e <__ascii_wctomb+0xa>
   87a96:	2aff      	cmp	r2, #255	; 0xff
   87a98:	d803      	bhi.n	87aa2 <__ascii_wctomb+0xe>
   87a9a:	700a      	strb	r2, [r1, #0]
   87a9c:	2101      	movs	r1, #1
   87a9e:	4608      	mov	r0, r1
   87aa0:	4770      	bx	lr
   87aa2:	238a      	movs	r3, #138	; 0x8a
   87aa4:	f04f 31ff 	mov.w	r1, #4294967295
   87aa8:	6003      	str	r3, [r0, #0]
   87aaa:	e7f8      	b.n	87a9e <__ascii_wctomb+0xa>

00087aac <__aeabi_dmul>:
   87aac:	b570      	push	{r4, r5, r6, lr}
   87aae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87ab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87ab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87aba:	bf1d      	ittte	ne
   87abc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87ac0:	ea94 0f0c 	teqne	r4, ip
   87ac4:	ea95 0f0c 	teqne	r5, ip
   87ac8:	f000 f8de 	bleq	87c88 <__aeabi_dmul+0x1dc>
   87acc:	442c      	add	r4, r5
   87ace:	ea81 0603 	eor.w	r6, r1, r3
   87ad2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   87ad6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   87ada:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   87ade:	bf18      	it	ne
   87ae0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   87ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   87aec:	d038      	beq.n	87b60 <__aeabi_dmul+0xb4>
   87aee:	fba0 ce02 	umull	ip, lr, r0, r2
   87af2:	f04f 0500 	mov.w	r5, #0
   87af6:	fbe1 e502 	umlal	lr, r5, r1, r2
   87afa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   87afe:	fbe0 e503 	umlal	lr, r5, r0, r3
   87b02:	f04f 0600 	mov.w	r6, #0
   87b06:	fbe1 5603 	umlal	r5, r6, r1, r3
   87b0a:	f09c 0f00 	teq	ip, #0
   87b0e:	bf18      	it	ne
   87b10:	f04e 0e01 	orrne.w	lr, lr, #1
   87b14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   87b18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   87b1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   87b20:	d204      	bcs.n	87b2c <__aeabi_dmul+0x80>
   87b22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   87b26:	416d      	adcs	r5, r5
   87b28:	eb46 0606 	adc.w	r6, r6, r6
   87b2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   87b30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   87b34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   87b38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   87b3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   87b40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   87b44:	bf88      	it	hi
   87b46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87b4a:	d81e      	bhi.n	87b8a <__aeabi_dmul+0xde>
   87b4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   87b50:	bf08      	it	eq
   87b52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   87b56:	f150 0000 	adcs.w	r0, r0, #0
   87b5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87b5e:	bd70      	pop	{r4, r5, r6, pc}
   87b60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   87b64:	ea46 0101 	orr.w	r1, r6, r1
   87b68:	ea40 0002 	orr.w	r0, r0, r2
   87b6c:	ea81 0103 	eor.w	r1, r1, r3
   87b70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   87b74:	bfc2      	ittt	gt
   87b76:	ebd4 050c 	rsbsgt	r5, r4, ip
   87b7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87b7e:	bd70      	popgt	{r4, r5, r6, pc}
   87b80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87b84:	f04f 0e00 	mov.w	lr, #0
   87b88:	3c01      	subs	r4, #1
   87b8a:	f300 80ab 	bgt.w	87ce4 <__aeabi_dmul+0x238>
   87b8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   87b92:	bfde      	ittt	le
   87b94:	2000      	movle	r0, #0
   87b96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   87b9a:	bd70      	pople	{r4, r5, r6, pc}
   87b9c:	f1c4 0400 	rsb	r4, r4, #0
   87ba0:	3c20      	subs	r4, #32
   87ba2:	da35      	bge.n	87c10 <__aeabi_dmul+0x164>
   87ba4:	340c      	adds	r4, #12
   87ba6:	dc1b      	bgt.n	87be0 <__aeabi_dmul+0x134>
   87ba8:	f104 0414 	add.w	r4, r4, #20
   87bac:	f1c4 0520 	rsb	r5, r4, #32
   87bb0:	fa00 f305 	lsl.w	r3, r0, r5
   87bb4:	fa20 f004 	lsr.w	r0, r0, r4
   87bb8:	fa01 f205 	lsl.w	r2, r1, r5
   87bbc:	ea40 0002 	orr.w	r0, r0, r2
   87bc0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   87bc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87bc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   87bcc:	fa21 f604 	lsr.w	r6, r1, r4
   87bd0:	eb42 0106 	adc.w	r1, r2, r6
   87bd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87bd8:	bf08      	it	eq
   87bda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87bde:	bd70      	pop	{r4, r5, r6, pc}
   87be0:	f1c4 040c 	rsb	r4, r4, #12
   87be4:	f1c4 0520 	rsb	r5, r4, #32
   87be8:	fa00 f304 	lsl.w	r3, r0, r4
   87bec:	fa20 f005 	lsr.w	r0, r0, r5
   87bf0:	fa01 f204 	lsl.w	r2, r1, r4
   87bf4:	ea40 0002 	orr.w	r0, r0, r2
   87bf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87bfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   87c00:	f141 0100 	adc.w	r1, r1, #0
   87c04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87c08:	bf08      	it	eq
   87c0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87c0e:	bd70      	pop	{r4, r5, r6, pc}
   87c10:	f1c4 0520 	rsb	r5, r4, #32
   87c14:	fa00 f205 	lsl.w	r2, r0, r5
   87c18:	ea4e 0e02 	orr.w	lr, lr, r2
   87c1c:	fa20 f304 	lsr.w	r3, r0, r4
   87c20:	fa01 f205 	lsl.w	r2, r1, r5
   87c24:	ea43 0302 	orr.w	r3, r3, r2
   87c28:	fa21 f004 	lsr.w	r0, r1, r4
   87c2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87c30:	fa21 f204 	lsr.w	r2, r1, r4
   87c34:	ea20 0002 	bic.w	r0, r0, r2
   87c38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   87c3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87c40:	bf08      	it	eq
   87c42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87c46:	bd70      	pop	{r4, r5, r6, pc}
   87c48:	f094 0f00 	teq	r4, #0
   87c4c:	d10f      	bne.n	87c6e <__aeabi_dmul+0x1c2>
   87c4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   87c52:	0040      	lsls	r0, r0, #1
   87c54:	eb41 0101 	adc.w	r1, r1, r1
   87c58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87c5c:	bf08      	it	eq
   87c5e:	3c01      	subeq	r4, #1
   87c60:	d0f7      	beq.n	87c52 <__aeabi_dmul+0x1a6>
   87c62:	ea41 0106 	orr.w	r1, r1, r6
   87c66:	f095 0f00 	teq	r5, #0
   87c6a:	bf18      	it	ne
   87c6c:	4770      	bxne	lr
   87c6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   87c72:	0052      	lsls	r2, r2, #1
   87c74:	eb43 0303 	adc.w	r3, r3, r3
   87c78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   87c7c:	bf08      	it	eq
   87c7e:	3d01      	subeq	r5, #1
   87c80:	d0f7      	beq.n	87c72 <__aeabi_dmul+0x1c6>
   87c82:	ea43 0306 	orr.w	r3, r3, r6
   87c86:	4770      	bx	lr
   87c88:	ea94 0f0c 	teq	r4, ip
   87c8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   87c90:	bf18      	it	ne
   87c92:	ea95 0f0c 	teqne	r5, ip
   87c96:	d00c      	beq.n	87cb2 <__aeabi_dmul+0x206>
   87c98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87c9c:	bf18      	it	ne
   87c9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87ca2:	d1d1      	bne.n	87c48 <__aeabi_dmul+0x19c>
   87ca4:	ea81 0103 	eor.w	r1, r1, r3
   87ca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87cac:	f04f 0000 	mov.w	r0, #0
   87cb0:	bd70      	pop	{r4, r5, r6, pc}
   87cb2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87cb6:	bf06      	itte	eq
   87cb8:	4610      	moveq	r0, r2
   87cba:	4619      	moveq	r1, r3
   87cbc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87cc0:	d019      	beq.n	87cf6 <__aeabi_dmul+0x24a>
   87cc2:	ea94 0f0c 	teq	r4, ip
   87cc6:	d102      	bne.n	87cce <__aeabi_dmul+0x222>
   87cc8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   87ccc:	d113      	bne.n	87cf6 <__aeabi_dmul+0x24a>
   87cce:	ea95 0f0c 	teq	r5, ip
   87cd2:	d105      	bne.n	87ce0 <__aeabi_dmul+0x234>
   87cd4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   87cd8:	bf1c      	itt	ne
   87cda:	4610      	movne	r0, r2
   87cdc:	4619      	movne	r1, r3
   87cde:	d10a      	bne.n	87cf6 <__aeabi_dmul+0x24a>
   87ce0:	ea81 0103 	eor.w	r1, r1, r3
   87ce4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87ce8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   87cec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87cf0:	f04f 0000 	mov.w	r0, #0
   87cf4:	bd70      	pop	{r4, r5, r6, pc}
   87cf6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   87cfa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   87cfe:	bd70      	pop	{r4, r5, r6, pc}

00087d00 <__aeabi_ddiv>:
   87d00:	b570      	push	{r4, r5, r6, lr}
   87d02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87d06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87d0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87d0e:	bf1d      	ittte	ne
   87d10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87d14:	ea94 0f0c 	teqne	r4, ip
   87d18:	ea95 0f0c 	teqne	r5, ip
   87d1c:	f000 f8a7 	bleq	87e6e <__aeabi_ddiv+0x16e>
   87d20:	eba4 0405 	sub.w	r4, r4, r5
   87d24:	ea81 0e03 	eor.w	lr, r1, r3
   87d28:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   87d2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   87d30:	f000 8088 	beq.w	87e44 <__aeabi_ddiv+0x144>
   87d34:	ea4f 3303 	mov.w	r3, r3, lsl #12
   87d38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   87d3c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   87d40:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   87d44:	ea4f 2202 	mov.w	r2, r2, lsl #8
   87d48:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   87d4c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   87d50:	ea4f 2600 	mov.w	r6, r0, lsl #8
   87d54:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   87d58:	429d      	cmp	r5, r3
   87d5a:	bf08      	it	eq
   87d5c:	4296      	cmpeq	r6, r2
   87d5e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   87d62:	f504 7440 	add.w	r4, r4, #768	; 0x300
   87d66:	d202      	bcs.n	87d6e <__aeabi_ddiv+0x6e>
   87d68:	085b      	lsrs	r3, r3, #1
   87d6a:	ea4f 0232 	mov.w	r2, r2, rrx
   87d6e:	1ab6      	subs	r6, r6, r2
   87d70:	eb65 0503 	sbc.w	r5, r5, r3
   87d74:	085b      	lsrs	r3, r3, #1
   87d76:	ea4f 0232 	mov.w	r2, r2, rrx
   87d7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   87d7e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   87d82:	ebb6 0e02 	subs.w	lr, r6, r2
   87d86:	eb75 0e03 	sbcs.w	lr, r5, r3
   87d8a:	bf22      	ittt	cs
   87d8c:	1ab6      	subcs	r6, r6, r2
   87d8e:	4675      	movcs	r5, lr
   87d90:	ea40 000c 	orrcs.w	r0, r0, ip
   87d94:	085b      	lsrs	r3, r3, #1
   87d96:	ea4f 0232 	mov.w	r2, r2, rrx
   87d9a:	ebb6 0e02 	subs.w	lr, r6, r2
   87d9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   87da2:	bf22      	ittt	cs
   87da4:	1ab6      	subcs	r6, r6, r2
   87da6:	4675      	movcs	r5, lr
   87da8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   87dac:	085b      	lsrs	r3, r3, #1
   87dae:	ea4f 0232 	mov.w	r2, r2, rrx
   87db2:	ebb6 0e02 	subs.w	lr, r6, r2
   87db6:	eb75 0e03 	sbcs.w	lr, r5, r3
   87dba:	bf22      	ittt	cs
   87dbc:	1ab6      	subcs	r6, r6, r2
   87dbe:	4675      	movcs	r5, lr
   87dc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   87dc4:	085b      	lsrs	r3, r3, #1
   87dc6:	ea4f 0232 	mov.w	r2, r2, rrx
   87dca:	ebb6 0e02 	subs.w	lr, r6, r2
   87dce:	eb75 0e03 	sbcs.w	lr, r5, r3
   87dd2:	bf22      	ittt	cs
   87dd4:	1ab6      	subcs	r6, r6, r2
   87dd6:	4675      	movcs	r5, lr
   87dd8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   87ddc:	ea55 0e06 	orrs.w	lr, r5, r6
   87de0:	d018      	beq.n	87e14 <__aeabi_ddiv+0x114>
   87de2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   87de6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   87dea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   87dee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   87df2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   87df6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   87dfa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   87dfe:	d1c0      	bne.n	87d82 <__aeabi_ddiv+0x82>
   87e00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87e04:	d10b      	bne.n	87e1e <__aeabi_ddiv+0x11e>
   87e06:	ea41 0100 	orr.w	r1, r1, r0
   87e0a:	f04f 0000 	mov.w	r0, #0
   87e0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   87e12:	e7b6      	b.n	87d82 <__aeabi_ddiv+0x82>
   87e14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87e18:	bf04      	itt	eq
   87e1a:	4301      	orreq	r1, r0
   87e1c:	2000      	moveq	r0, #0
   87e1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   87e22:	bf88      	it	hi
   87e24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87e28:	f63f aeaf 	bhi.w	87b8a <__aeabi_dmul+0xde>
   87e2c:	ebb5 0c03 	subs.w	ip, r5, r3
   87e30:	bf04      	itt	eq
   87e32:	ebb6 0c02 	subseq.w	ip, r6, r2
   87e36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   87e3a:	f150 0000 	adcs.w	r0, r0, #0
   87e3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87e42:	bd70      	pop	{r4, r5, r6, pc}
   87e44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   87e48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   87e4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   87e50:	bfc2      	ittt	gt
   87e52:	ebd4 050c 	rsbsgt	r5, r4, ip
   87e56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87e5a:	bd70      	popgt	{r4, r5, r6, pc}
   87e5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87e60:	f04f 0e00 	mov.w	lr, #0
   87e64:	3c01      	subs	r4, #1
   87e66:	e690      	b.n	87b8a <__aeabi_dmul+0xde>
   87e68:	ea45 0e06 	orr.w	lr, r5, r6
   87e6c:	e68d      	b.n	87b8a <__aeabi_dmul+0xde>
   87e6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   87e72:	ea94 0f0c 	teq	r4, ip
   87e76:	bf08      	it	eq
   87e78:	ea95 0f0c 	teqeq	r5, ip
   87e7c:	f43f af3b 	beq.w	87cf6 <__aeabi_dmul+0x24a>
   87e80:	ea94 0f0c 	teq	r4, ip
   87e84:	d10a      	bne.n	87e9c <__aeabi_ddiv+0x19c>
   87e86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   87e8a:	f47f af34 	bne.w	87cf6 <__aeabi_dmul+0x24a>
   87e8e:	ea95 0f0c 	teq	r5, ip
   87e92:	f47f af25 	bne.w	87ce0 <__aeabi_dmul+0x234>
   87e96:	4610      	mov	r0, r2
   87e98:	4619      	mov	r1, r3
   87e9a:	e72c      	b.n	87cf6 <__aeabi_dmul+0x24a>
   87e9c:	ea95 0f0c 	teq	r5, ip
   87ea0:	d106      	bne.n	87eb0 <__aeabi_ddiv+0x1b0>
   87ea2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   87ea6:	f43f aefd 	beq.w	87ca4 <__aeabi_dmul+0x1f8>
   87eaa:	4610      	mov	r0, r2
   87eac:	4619      	mov	r1, r3
   87eae:	e722      	b.n	87cf6 <__aeabi_dmul+0x24a>
   87eb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87eb4:	bf18      	it	ne
   87eb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87eba:	f47f aec5 	bne.w	87c48 <__aeabi_dmul+0x19c>
   87ebe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   87ec2:	f47f af0d 	bne.w	87ce0 <__aeabi_dmul+0x234>
   87ec6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   87eca:	f47f aeeb 	bne.w	87ca4 <__aeabi_dmul+0x1f8>
   87ece:	e712      	b.n	87cf6 <__aeabi_dmul+0x24a>

00087ed0 <__gedf2>:
   87ed0:	f04f 3cff 	mov.w	ip, #4294967295
   87ed4:	e006      	b.n	87ee4 <__cmpdf2+0x4>
   87ed6:	bf00      	nop

00087ed8 <__ledf2>:
   87ed8:	f04f 0c01 	mov.w	ip, #1
   87edc:	e002      	b.n	87ee4 <__cmpdf2+0x4>
   87ede:	bf00      	nop

00087ee0 <__cmpdf2>:
   87ee0:	f04f 0c01 	mov.w	ip, #1
   87ee4:	f84d cd04 	str.w	ip, [sp, #-4]!
   87ee8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   87eec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87ef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   87ef4:	bf18      	it	ne
   87ef6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   87efa:	d01b      	beq.n	87f34 <__cmpdf2+0x54>
   87efc:	b001      	add	sp, #4
   87efe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   87f02:	bf0c      	ite	eq
   87f04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   87f08:	ea91 0f03 	teqne	r1, r3
   87f0c:	bf02      	ittt	eq
   87f0e:	ea90 0f02 	teqeq	r0, r2
   87f12:	2000      	moveq	r0, #0
   87f14:	4770      	bxeq	lr
   87f16:	f110 0f00 	cmn.w	r0, #0
   87f1a:	ea91 0f03 	teq	r1, r3
   87f1e:	bf58      	it	pl
   87f20:	4299      	cmppl	r1, r3
   87f22:	bf08      	it	eq
   87f24:	4290      	cmpeq	r0, r2
   87f26:	bf2c      	ite	cs
   87f28:	17d8      	asrcs	r0, r3, #31
   87f2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   87f2e:	f040 0001 	orr.w	r0, r0, #1
   87f32:	4770      	bx	lr
   87f34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   87f38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87f3c:	d102      	bne.n	87f44 <__cmpdf2+0x64>
   87f3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   87f42:	d107      	bne.n	87f54 <__cmpdf2+0x74>
   87f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   87f48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87f4c:	d1d6      	bne.n	87efc <__cmpdf2+0x1c>
   87f4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   87f52:	d0d3      	beq.n	87efc <__cmpdf2+0x1c>
   87f54:	f85d 0b04 	ldr.w	r0, [sp], #4
   87f58:	4770      	bx	lr
   87f5a:	bf00      	nop

00087f5c <__aeabi_cdrcmple>:
   87f5c:	4684      	mov	ip, r0
   87f5e:	4610      	mov	r0, r2
   87f60:	4662      	mov	r2, ip
   87f62:	468c      	mov	ip, r1
   87f64:	4619      	mov	r1, r3
   87f66:	4663      	mov	r3, ip
   87f68:	e000      	b.n	87f6c <__aeabi_cdcmpeq>
   87f6a:	bf00      	nop

00087f6c <__aeabi_cdcmpeq>:
   87f6c:	b501      	push	{r0, lr}
   87f6e:	f7ff ffb7 	bl	87ee0 <__cmpdf2>
   87f72:	2800      	cmp	r0, #0
   87f74:	bf48      	it	mi
   87f76:	f110 0f00 	cmnmi.w	r0, #0
   87f7a:	bd01      	pop	{r0, pc}

00087f7c <__aeabi_dcmpeq>:
   87f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   87f80:	f7ff fff4 	bl	87f6c <__aeabi_cdcmpeq>
   87f84:	bf0c      	ite	eq
   87f86:	2001      	moveq	r0, #1
   87f88:	2000      	movne	r0, #0
   87f8a:	f85d fb08 	ldr.w	pc, [sp], #8
   87f8e:	bf00      	nop

00087f90 <__aeabi_dcmplt>:
   87f90:	f84d ed08 	str.w	lr, [sp, #-8]!
   87f94:	f7ff ffea 	bl	87f6c <__aeabi_cdcmpeq>
   87f98:	bf34      	ite	cc
   87f9a:	2001      	movcc	r0, #1
   87f9c:	2000      	movcs	r0, #0
   87f9e:	f85d fb08 	ldr.w	pc, [sp], #8
   87fa2:	bf00      	nop

00087fa4 <__aeabi_dcmple>:
   87fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   87fa8:	f7ff ffe0 	bl	87f6c <__aeabi_cdcmpeq>
   87fac:	bf94      	ite	ls
   87fae:	2001      	movls	r0, #1
   87fb0:	2000      	movhi	r0, #0
   87fb2:	f85d fb08 	ldr.w	pc, [sp], #8
   87fb6:	bf00      	nop

00087fb8 <__aeabi_dcmpge>:
   87fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   87fbc:	f7ff ffce 	bl	87f5c <__aeabi_cdrcmple>
   87fc0:	bf94      	ite	ls
   87fc2:	2001      	movls	r0, #1
   87fc4:	2000      	movhi	r0, #0
   87fc6:	f85d fb08 	ldr.w	pc, [sp], #8
   87fca:	bf00      	nop

00087fcc <__aeabi_dcmpgt>:
   87fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   87fd0:	f7ff ffc4 	bl	87f5c <__aeabi_cdrcmple>
   87fd4:	bf34      	ite	cc
   87fd6:	2001      	movcc	r0, #1
   87fd8:	2000      	movcs	r0, #0
   87fda:	f85d fb08 	ldr.w	pc, [sp], #8
   87fde:	bf00      	nop

00087fe0 <__aeabi_dcmpun>:
   87fe0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   87fe4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87fe8:	d102      	bne.n	87ff0 <__aeabi_dcmpun+0x10>
   87fea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   87fee:	d10a      	bne.n	88006 <__aeabi_dcmpun+0x26>
   87ff0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   87ff4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87ff8:	d102      	bne.n	88000 <__aeabi_dcmpun+0x20>
   87ffa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   87ffe:	d102      	bne.n	88006 <__aeabi_dcmpun+0x26>
   88000:	f04f 0000 	mov.w	r0, #0
   88004:	4770      	bx	lr
   88006:	f04f 0001 	mov.w	r0, #1
   8800a:	4770      	bx	lr

0008800c <__aeabi_d2iz>:
   8800c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   88010:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   88014:	d215      	bcs.n	88042 <__aeabi_d2iz+0x36>
   88016:	d511      	bpl.n	8803c <__aeabi_d2iz+0x30>
   88018:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8801c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   88020:	d912      	bls.n	88048 <__aeabi_d2iz+0x3c>
   88022:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   88026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8802a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8802e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   88032:	fa23 f002 	lsr.w	r0, r3, r2
   88036:	bf18      	it	ne
   88038:	4240      	negne	r0, r0
   8803a:	4770      	bx	lr
   8803c:	f04f 0000 	mov.w	r0, #0
   88040:	4770      	bx	lr
   88042:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   88046:	d105      	bne.n	88054 <__aeabi_d2iz+0x48>
   88048:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8804c:	bf08      	it	eq
   8804e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   88052:	4770      	bx	lr
   88054:	f04f 0000 	mov.w	r0, #0
   88058:	4770      	bx	lr
   8805a:	bf00      	nop

0008805c <__aeabi_uldivmod>:
   8805c:	b953      	cbnz	r3, 88074 <__aeabi_uldivmod+0x18>
   8805e:	b94a      	cbnz	r2, 88074 <__aeabi_uldivmod+0x18>
   88060:	2900      	cmp	r1, #0
   88062:	bf08      	it	eq
   88064:	2800      	cmpeq	r0, #0
   88066:	bf1c      	itt	ne
   88068:	f04f 31ff 	movne.w	r1, #4294967295
   8806c:	f04f 30ff 	movne.w	r0, #4294967295
   88070:	f000 b97a 	b.w	88368 <__aeabi_idiv0>
   88074:	f1ad 0c08 	sub.w	ip, sp, #8
   88078:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8807c:	f000 f806 	bl	8808c <__udivmoddi4>
   88080:	f8dd e004 	ldr.w	lr, [sp, #4]
   88084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   88088:	b004      	add	sp, #16
   8808a:	4770      	bx	lr

0008808c <__udivmoddi4>:
   8808c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   88090:	468c      	mov	ip, r1
   88092:	460e      	mov	r6, r1
   88094:	4604      	mov	r4, r0
   88096:	9d08      	ldr	r5, [sp, #32]
   88098:	2b00      	cmp	r3, #0
   8809a:	d150      	bne.n	8813e <__udivmoddi4+0xb2>
   8809c:	428a      	cmp	r2, r1
   8809e:	4617      	mov	r7, r2
   880a0:	d96c      	bls.n	8817c <__udivmoddi4+0xf0>
   880a2:	fab2 fe82 	clz	lr, r2
   880a6:	f1be 0f00 	cmp.w	lr, #0
   880aa:	d00b      	beq.n	880c4 <__udivmoddi4+0x38>
   880ac:	f1ce 0c20 	rsb	ip, lr, #32
   880b0:	fa01 f60e 	lsl.w	r6, r1, lr
   880b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   880b8:	fa02 f70e 	lsl.w	r7, r2, lr
   880bc:	ea4c 0c06 	orr.w	ip, ip, r6
   880c0:	fa00 f40e 	lsl.w	r4, r0, lr
   880c4:	0c3a      	lsrs	r2, r7, #16
   880c6:	fbbc f9f2 	udiv	r9, ip, r2
   880ca:	b2bb      	uxth	r3, r7
   880cc:	fb02 cc19 	mls	ip, r2, r9, ip
   880d0:	fb09 fa03 	mul.w	sl, r9, r3
   880d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   880d8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   880dc:	45b2      	cmp	sl, r6
   880de:	d90a      	bls.n	880f6 <__udivmoddi4+0x6a>
   880e0:	19f6      	adds	r6, r6, r7
   880e2:	f109 31ff 	add.w	r1, r9, #4294967295
   880e6:	f080 8125 	bcs.w	88334 <__udivmoddi4+0x2a8>
   880ea:	45b2      	cmp	sl, r6
   880ec:	f240 8122 	bls.w	88334 <__udivmoddi4+0x2a8>
   880f0:	f1a9 0902 	sub.w	r9, r9, #2
   880f4:	443e      	add	r6, r7
   880f6:	eba6 060a 	sub.w	r6, r6, sl
   880fa:	fbb6 f0f2 	udiv	r0, r6, r2
   880fe:	fb02 6610 	mls	r6, r2, r0, r6
   88102:	fb00 f303 	mul.w	r3, r0, r3
   88106:	b2a4      	uxth	r4, r4
   88108:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8810c:	42a3      	cmp	r3, r4
   8810e:	d909      	bls.n	88124 <__udivmoddi4+0x98>
   88110:	19e4      	adds	r4, r4, r7
   88112:	f100 32ff 	add.w	r2, r0, #4294967295
   88116:	f080 810b 	bcs.w	88330 <__udivmoddi4+0x2a4>
   8811a:	42a3      	cmp	r3, r4
   8811c:	f240 8108 	bls.w	88330 <__udivmoddi4+0x2a4>
   88120:	3802      	subs	r0, #2
   88122:	443c      	add	r4, r7
   88124:	2100      	movs	r1, #0
   88126:	1ae4      	subs	r4, r4, r3
   88128:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8812c:	2d00      	cmp	r5, #0
   8812e:	d062      	beq.n	881f6 <__udivmoddi4+0x16a>
   88130:	2300      	movs	r3, #0
   88132:	fa24 f40e 	lsr.w	r4, r4, lr
   88136:	602c      	str	r4, [r5, #0]
   88138:	606b      	str	r3, [r5, #4]
   8813a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8813e:	428b      	cmp	r3, r1
   88140:	d907      	bls.n	88152 <__udivmoddi4+0xc6>
   88142:	2d00      	cmp	r5, #0
   88144:	d055      	beq.n	881f2 <__udivmoddi4+0x166>
   88146:	2100      	movs	r1, #0
   88148:	e885 0041 	stmia.w	r5, {r0, r6}
   8814c:	4608      	mov	r0, r1
   8814e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88152:	fab3 f183 	clz	r1, r3
   88156:	2900      	cmp	r1, #0
   88158:	f040 808f 	bne.w	8827a <__udivmoddi4+0x1ee>
   8815c:	42b3      	cmp	r3, r6
   8815e:	d302      	bcc.n	88166 <__udivmoddi4+0xda>
   88160:	4282      	cmp	r2, r0
   88162:	f200 80fc 	bhi.w	8835e <__udivmoddi4+0x2d2>
   88166:	1a84      	subs	r4, r0, r2
   88168:	eb66 0603 	sbc.w	r6, r6, r3
   8816c:	2001      	movs	r0, #1
   8816e:	46b4      	mov	ip, r6
   88170:	2d00      	cmp	r5, #0
   88172:	d040      	beq.n	881f6 <__udivmoddi4+0x16a>
   88174:	e885 1010 	stmia.w	r5, {r4, ip}
   88178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8817c:	b912      	cbnz	r2, 88184 <__udivmoddi4+0xf8>
   8817e:	2701      	movs	r7, #1
   88180:	fbb7 f7f2 	udiv	r7, r7, r2
   88184:	fab7 fe87 	clz	lr, r7
   88188:	f1be 0f00 	cmp.w	lr, #0
   8818c:	d135      	bne.n	881fa <__udivmoddi4+0x16e>
   8818e:	2101      	movs	r1, #1
   88190:	1bf6      	subs	r6, r6, r7
   88192:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   88196:	fa1f f887 	uxth.w	r8, r7
   8819a:	fbb6 f2fc 	udiv	r2, r6, ip
   8819e:	fb0c 6612 	mls	r6, ip, r2, r6
   881a2:	fb08 f002 	mul.w	r0, r8, r2
   881a6:	0c23      	lsrs	r3, r4, #16
   881a8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   881ac:	42b0      	cmp	r0, r6
   881ae:	d907      	bls.n	881c0 <__udivmoddi4+0x134>
   881b0:	19f6      	adds	r6, r6, r7
   881b2:	f102 33ff 	add.w	r3, r2, #4294967295
   881b6:	d202      	bcs.n	881be <__udivmoddi4+0x132>
   881b8:	42b0      	cmp	r0, r6
   881ba:	f200 80d2 	bhi.w	88362 <__udivmoddi4+0x2d6>
   881be:	461a      	mov	r2, r3
   881c0:	1a36      	subs	r6, r6, r0
   881c2:	fbb6 f0fc 	udiv	r0, r6, ip
   881c6:	fb0c 6610 	mls	r6, ip, r0, r6
   881ca:	fb08 f800 	mul.w	r8, r8, r0
   881ce:	b2a3      	uxth	r3, r4
   881d0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   881d4:	45a0      	cmp	r8, r4
   881d6:	d907      	bls.n	881e8 <__udivmoddi4+0x15c>
   881d8:	19e4      	adds	r4, r4, r7
   881da:	f100 33ff 	add.w	r3, r0, #4294967295
   881de:	d202      	bcs.n	881e6 <__udivmoddi4+0x15a>
   881e0:	45a0      	cmp	r8, r4
   881e2:	f200 80b9 	bhi.w	88358 <__udivmoddi4+0x2cc>
   881e6:	4618      	mov	r0, r3
   881e8:	eba4 0408 	sub.w	r4, r4, r8
   881ec:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   881f0:	e79c      	b.n	8812c <__udivmoddi4+0xa0>
   881f2:	4629      	mov	r1, r5
   881f4:	4628      	mov	r0, r5
   881f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   881fa:	fa07 f70e 	lsl.w	r7, r7, lr
   881fe:	f1ce 0320 	rsb	r3, lr, #32
   88202:	fa26 f203 	lsr.w	r2, r6, r3
   88206:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8820a:	fbb2 f1fc 	udiv	r1, r2, ip
   8820e:	fa1f f887 	uxth.w	r8, r7
   88212:	fb0c 2211 	mls	r2, ip, r1, r2
   88216:	fa06 f60e 	lsl.w	r6, r6, lr
   8821a:	fa20 f303 	lsr.w	r3, r0, r3
   8821e:	fb01 f908 	mul.w	r9, r1, r8
   88222:	4333      	orrs	r3, r6
   88224:	0c1e      	lsrs	r6, r3, #16
   88226:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8822a:	45b1      	cmp	r9, r6
   8822c:	fa00 f40e 	lsl.w	r4, r0, lr
   88230:	d909      	bls.n	88246 <__udivmoddi4+0x1ba>
   88232:	19f6      	adds	r6, r6, r7
   88234:	f101 32ff 	add.w	r2, r1, #4294967295
   88238:	f080 808c 	bcs.w	88354 <__udivmoddi4+0x2c8>
   8823c:	45b1      	cmp	r9, r6
   8823e:	f240 8089 	bls.w	88354 <__udivmoddi4+0x2c8>
   88242:	3902      	subs	r1, #2
   88244:	443e      	add	r6, r7
   88246:	eba6 0609 	sub.w	r6, r6, r9
   8824a:	fbb6 f0fc 	udiv	r0, r6, ip
   8824e:	fb0c 6210 	mls	r2, ip, r0, r6
   88252:	fb00 f908 	mul.w	r9, r0, r8
   88256:	b29e      	uxth	r6, r3
   88258:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8825c:	45b1      	cmp	r9, r6
   8825e:	d907      	bls.n	88270 <__udivmoddi4+0x1e4>
   88260:	19f6      	adds	r6, r6, r7
   88262:	f100 33ff 	add.w	r3, r0, #4294967295
   88266:	d271      	bcs.n	8834c <__udivmoddi4+0x2c0>
   88268:	45b1      	cmp	r9, r6
   8826a:	d96f      	bls.n	8834c <__udivmoddi4+0x2c0>
   8826c:	3802      	subs	r0, #2
   8826e:	443e      	add	r6, r7
   88270:	eba6 0609 	sub.w	r6, r6, r9
   88274:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   88278:	e78f      	b.n	8819a <__udivmoddi4+0x10e>
   8827a:	f1c1 0720 	rsb	r7, r1, #32
   8827e:	fa22 f807 	lsr.w	r8, r2, r7
   88282:	408b      	lsls	r3, r1
   88284:	ea48 0303 	orr.w	r3, r8, r3
   88288:	fa26 f407 	lsr.w	r4, r6, r7
   8828c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   88290:	fbb4 f9fe 	udiv	r9, r4, lr
   88294:	fa1f fc83 	uxth.w	ip, r3
   88298:	fb0e 4419 	mls	r4, lr, r9, r4
   8829c:	408e      	lsls	r6, r1
   8829e:	fa20 f807 	lsr.w	r8, r0, r7
   882a2:	fb09 fa0c 	mul.w	sl, r9, ip
   882a6:	ea48 0806 	orr.w	r8, r8, r6
   882aa:	ea4f 4618 	mov.w	r6, r8, lsr #16
   882ae:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   882b2:	45a2      	cmp	sl, r4
   882b4:	fa02 f201 	lsl.w	r2, r2, r1
   882b8:	fa00 f601 	lsl.w	r6, r0, r1
   882bc:	d908      	bls.n	882d0 <__udivmoddi4+0x244>
   882be:	18e4      	adds	r4, r4, r3
   882c0:	f109 30ff 	add.w	r0, r9, #4294967295
   882c4:	d244      	bcs.n	88350 <__udivmoddi4+0x2c4>
   882c6:	45a2      	cmp	sl, r4
   882c8:	d942      	bls.n	88350 <__udivmoddi4+0x2c4>
   882ca:	f1a9 0902 	sub.w	r9, r9, #2
   882ce:	441c      	add	r4, r3
   882d0:	eba4 040a 	sub.w	r4, r4, sl
   882d4:	fbb4 f0fe 	udiv	r0, r4, lr
   882d8:	fb0e 4410 	mls	r4, lr, r0, r4
   882dc:	fb00 fc0c 	mul.w	ip, r0, ip
   882e0:	fa1f f888 	uxth.w	r8, r8
   882e4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   882e8:	45a4      	cmp	ip, r4
   882ea:	d907      	bls.n	882fc <__udivmoddi4+0x270>
   882ec:	18e4      	adds	r4, r4, r3
   882ee:	f100 3eff 	add.w	lr, r0, #4294967295
   882f2:	d229      	bcs.n	88348 <__udivmoddi4+0x2bc>
   882f4:	45a4      	cmp	ip, r4
   882f6:	d927      	bls.n	88348 <__udivmoddi4+0x2bc>
   882f8:	3802      	subs	r0, #2
   882fa:	441c      	add	r4, r3
   882fc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   88300:	fba0 8902 	umull	r8, r9, r0, r2
   88304:	eba4 0c0c 	sub.w	ip, r4, ip
   88308:	45cc      	cmp	ip, r9
   8830a:	46c2      	mov	sl, r8
   8830c:	46ce      	mov	lr, r9
   8830e:	d315      	bcc.n	8833c <__udivmoddi4+0x2b0>
   88310:	d012      	beq.n	88338 <__udivmoddi4+0x2ac>
   88312:	b155      	cbz	r5, 8832a <__udivmoddi4+0x29e>
   88314:	ebb6 030a 	subs.w	r3, r6, sl
   88318:	eb6c 060e 	sbc.w	r6, ip, lr
   8831c:	fa06 f707 	lsl.w	r7, r6, r7
   88320:	40cb      	lsrs	r3, r1
   88322:	431f      	orrs	r7, r3
   88324:	40ce      	lsrs	r6, r1
   88326:	602f      	str	r7, [r5, #0]
   88328:	606e      	str	r6, [r5, #4]
   8832a:	2100      	movs	r1, #0
   8832c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88330:	4610      	mov	r0, r2
   88332:	e6f7      	b.n	88124 <__udivmoddi4+0x98>
   88334:	4689      	mov	r9, r1
   88336:	e6de      	b.n	880f6 <__udivmoddi4+0x6a>
   88338:	4546      	cmp	r6, r8
   8833a:	d2ea      	bcs.n	88312 <__udivmoddi4+0x286>
   8833c:	ebb8 0a02 	subs.w	sl, r8, r2
   88340:	eb69 0e03 	sbc.w	lr, r9, r3
   88344:	3801      	subs	r0, #1
   88346:	e7e4      	b.n	88312 <__udivmoddi4+0x286>
   88348:	4670      	mov	r0, lr
   8834a:	e7d7      	b.n	882fc <__udivmoddi4+0x270>
   8834c:	4618      	mov	r0, r3
   8834e:	e78f      	b.n	88270 <__udivmoddi4+0x1e4>
   88350:	4681      	mov	r9, r0
   88352:	e7bd      	b.n	882d0 <__udivmoddi4+0x244>
   88354:	4611      	mov	r1, r2
   88356:	e776      	b.n	88246 <__udivmoddi4+0x1ba>
   88358:	3802      	subs	r0, #2
   8835a:	443c      	add	r4, r7
   8835c:	e744      	b.n	881e8 <__udivmoddi4+0x15c>
   8835e:	4608      	mov	r0, r1
   88360:	e706      	b.n	88170 <__udivmoddi4+0xe4>
   88362:	3a02      	subs	r2, #2
   88364:	443e      	add	r6, r7
   88366:	e72b      	b.n	881c0 <__udivmoddi4+0x134>

00088368 <__aeabi_idiv0>:
   88368:	4770      	bx	lr
   8836a:	bf00      	nop
   8836c:	000f4240 	.word	0x000f4240
   88370:	000000c0 	.word	0x000000c0
	...
   8837c:	00643125 	.word	0x00643125
   88380:	00643225 	.word	0x00643225
   88384:	53202020 	.word	0x53202020
   88388:	69747465 	.word	0x69747465
   8838c:	2073676e 	.word	0x2073676e
   88390:	00000020 	.word	0x00000020
   88394:	626f5220 	.word	0x626f5220
   88398:	4920746f 	.word	0x4920746f
   8839c:	00003a44 	.word	0x00003a44
   883a0:	65705320 	.word	0x65705320
   883a4:	003a6465 	.word	0x003a6465
   883a8:	46495720 	.word	0x46495720
   883ac:	00003a49 	.word	0x00003a49
   883b0:	6c614320 	.word	0x6c614320
   883b4:	61726269 	.word	0x61726269
   883b8:	00006574 	.word	0x00006574
   883bc:	74655320 	.word	0x74655320
   883c0:	65696620 	.word	0x65696620
   883c4:	7320646c 	.word	0x7320646c
   883c8:	20657a69 	.word	0x20657a69
   883cc:	00666572 	.word	0x00666572
   883d0:	00000000 	.word	0x00000000
   883d4:	20202020 	.word	0x20202020
   883d8:	74614d20 	.word	0x74614d20
   883dc:	20206863 	.word	0x20206863
   883e0:	00000000 	.word	0x00000000
   883e4:	61745320 	.word	0x61745320
   883e8:	6d207472 	.word	0x6d207472
   883ec:	68637461 	.word	0x68637461
   883f0:	00000000 	.word	0x00000000
   883f4:	6e655320 	.word	0x6e655320
   883f8:	20726f73 	.word	0x20726f73
   883fc:	756c6176 	.word	0x756c6176
   88400:	00007365 	.word	0x00007365
   88404:	69724420 	.word	0x69724420
   88408:	61206576 	.word	0x61206576
   8840c:	656c676e 	.word	0x656c676e
   88410:	64697020 	.word	0x64697020
   88414:	00000000 	.word	0x00000000
   88418:	20202020 	.word	0x20202020
   8841c:	73655420 	.word	0x73655420
   88420:	00007374 	.word	0x00007374
   88424:	72755420 	.word	0x72755420
   88428:	6f74206e 	.word	0x6f74206e
   8842c:	61747320 	.word	0x61747320
   88430:	00007472 	.word	0x00007472
   88434:	766f4d20 	.word	0x766f4d20
   88438:	6f742065 	.word	0x6f742065
   8843c:	64696d20 	.word	0x64696d20
   88440:	00656c64 	.word	0x00656c64
   88444:	766f4d20 	.word	0x766f4d20
   88448:	6f742065 	.word	0x6f742065
   8844c:	6c616220 	.word	0x6c616220
   88450:	0000006c 	.word	0x0000006c
   88454:	49505220 	.word	0x49505220
   88458:	00000000 	.word	0x00000000
   8845c:	6f745320 	.word	0x6f745320
   88460:	6e6f2070 	.word	0x6e6f2070
   88464:	6e696c20 	.word	0x6e696c20
   88468:	00000065 	.word	0x00000065
   8846c:	636e4520 	.word	0x636e4520
   88470:	7265646f 	.word	0x7265646f
   88474:	73657420 	.word	0x73657420
   88478:	00000074 	.word	0x00000074
   8847c:	00088384 	.word	0x00088384
   88480:	00088394 	.word	0x00088394
   88484:	000883a0 	.word	0x000883a0
   88488:	000883a8 	.word	0x000883a8
   8848c:	000883b0 	.word	0x000883b0
   88490:	000883bc 	.word	0x000883bc
   88494:	000883d0 	.word	0x000883d0
   88498:	000883d0 	.word	0x000883d0
   8849c:	000883d4 	.word	0x000883d4
   884a0:	000883e4 	.word	0x000883e4
   884a4:	000883f4 	.word	0x000883f4
   884a8:	00088404 	.word	0x00088404
   884ac:	000883d0 	.word	0x000883d0
   884b0:	000883d0 	.word	0x000883d0
   884b4:	000883d0 	.word	0x000883d0
   884b8:	000883d0 	.word	0x000883d0
   884bc:	00088418 	.word	0x00088418
   884c0:	00088424 	.word	0x00088424
   884c4:	00088434 	.word	0x00088434
   884c8:	00088444 	.word	0x00088444
   884cc:	00088454 	.word	0x00088454
   884d0:	0008845c 	.word	0x0008845c
   884d4:	0008846c 	.word	0x0008846c
   884d8:	000883d0 	.word	0x000883d0
   884dc:	0000003e 	.word	0x0000003e
   884e0:	00000020 	.word	0x00000020
   884e4:	0000003c 	.word	0x0000003c
   884e8:	312e3325 	.word	0x312e3325
   884ec:	00005666 	.word	0x00005666
   884f0:	2e332520 	.word	0x2e332520
   884f4:	00566631 	.word	0x00566631
   884f8:	746f6f62 	.word	0x746f6f62
   884fc:	20676e69 	.word	0x20676e69
   88500:	534f6f6e 	.word	0x534f6f6e
   88504:	00202020 	.word	0x00202020
   88508:	0000002e 	.word	0x0000002e

0008850c <_global_impure_ptr>:
   8850c:	200701a8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8851c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   8852c:	46454443 00000000 33323130 37363534     CDEF....01234567
   8853c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8854c:	0000296c 00000030                       l)..0...

00088554 <blanks.7223>:
   88554:	20202020 20202020 20202020 20202020                     

00088564 <zeroes.7224>:
   88564:	30303030 30303030 30303030 30303030     0000000000000000
   88574:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   88584:	00000000                                ....

00088588 <__mprec_bigtens>:
   88588:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   88598:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   885a8:	7f73bf3c 75154fdd                       <.s..O.u

000885b0 <__mprec_tens>:
   885b0:	00000000 3ff00000 00000000 40240000     .......?......$@
   885c0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   885d0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   885e0:	00000000 412e8480 00000000 416312d0     .......A......cA
   885f0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   88600:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   88610:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   88620:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   88630:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   88640:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   88650:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   88660:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   88670:	79d99db4 44ea7843                       ...yCx.D

00088678 <p05.6055>:
   88678:	00000005 00000019 0000007d 00000043     ........}...C...
   88688:	49534f50 00000058 0000002e              POSIX.......

00088694 <_ctype_>:
   88694:	20202000 20202020 28282020 20282828     .         ((((( 
   886a4:	20202020 20202020 20202020 20202020                     
   886b4:	10108820 10101010 10101010 10101010      ...............
   886c4:	04040410 04040404 10040404 10101010     ................
   886d4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   886e4:	01010101 01010101 01010101 10101010     ................
   886f4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   88704:	02020202 02020202 02020202 10101010     ................
   88714:	00000020 00000000 00000000 00000000      ...............
	...

00088798 <_init>:
   88798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8879a:	bf00      	nop
   8879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8879e:	bc08      	pop	{r3}
   887a0:	469e      	mov	lr, r3
   887a2:	4770      	bx	lr

000887a4 <__init_array_start>:
   887a4:	000855c1 	.word	0x000855c1

000887a8 <__frame_dummy_init_array_entry>:
   887a8:	00080119                                ....

000887ac <_fini>:
   887ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   887ae:	bf00      	nop
   887b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   887b2:	bc08      	pop	{r3}
   887b4:	469e      	mov	lr, r3
   887b6:	4770      	bx	lr

000887b8 <__fini_array_start>:
   887b8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	20070198 	.word	0x20070198
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <print_menu>:
2007018c:	01010101                                         .

2007018d <rbt_id>:
2007018d:	01010101                                         .

2007018e <act_cursor_line_on_lcd>:
2007018e:	01010101                                         .

2007018f <prev_cursor_line_on_lcd>:
2007018f:	01010101                                         .

20070190 <act_cursor_line>:
20070190:	08010101                                         .

20070191 <prev_cursor_line>:
20070191:	01080101                                         .

20070192 <min_cursor_line>:
20070192:	00010801                                         .

20070193 <max_cursor_line>:
20070193:	00000108                                         .

20070194 <menu_main_column>:
20070194:	00000001                                ....

20070198 <SystemCoreClock>:
20070198:	003d0900                                ..=.

2007019c <update_dots>:
2007019c:	00000001                                ....

200701a0 <_impure_ptr>:
200701a0:	200701a8 00000000                       ... ....

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	2007103c                                <.. 

200705d4 <__malloc_av_>:
	...
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 

200709dc <__malloc_sbrk_base>:
200709dc:	ffffffff                                ....

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__global_locale>:
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00000043 00000000 00000000 00000000     C...............
	...
20070ac4:	00087a95 00087635 00000000 00088694     .z..5v..........
20070ad4:	00088690 00088530 00088530 00088530     ....0...0...0...
20070ae4:	00088530 00088530 00088530 00088530     0...0...0...0...
20070af4:	00088530 00088530 ffffffff ffffffff     0...0...........
20070b04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
