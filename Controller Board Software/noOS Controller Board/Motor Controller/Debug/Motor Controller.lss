
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007dd0  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005d4  20070000  00087dd0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000748  200705d4  000883a4  000205d4  2**2
                  ALLOC
  3 .stack        00002004  20070d1c  00088aec  000205d4  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000205d4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000205fd  2**0
                  CONTENTS, READONLY
  6 .debug_info   00020c35  00000000  00000000  00020656  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000042d6  00000000  00000000  0004128b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a410  00000000  00000000  00045561  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001268  00000000  00000000  0004f971  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001158  00000000  00000000  00050bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d5d2  00000000  00000000  00051d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018673  00000000  00000000  0006f303  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00069dc1  00000000  00000000  00087976  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004e24  00000000  00000000  000f1738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	20 2d 07 20 7d 6f 08 00 75 6f 08 00 75 6f 08 00      -. }o..uo..uo..
   80010:	75 6f 08 00 75 6f 08 00 75 6f 08 00 00 00 00 00     uo..uo..uo......
	...
   8002c:	75 6f 08 00 75 6f 08 00 00 00 00 00 75 6f 08 00     uo..uo......uo..
   8003c:	9d 62 08 00 75 6f 08 00 75 6f 08 00 75 6f 08 00     .b..uo..uo..uo..
   8004c:	75 6f 08 00 75 6f 08 00 75 6f 08 00 75 6f 08 00     uo..uo..uo..uo..
   8005c:	75 6f 08 00 75 6f 08 00 75 6f 08 00 00 00 00 00     uo..uo..uo......
   8006c:	75 6f 08 00 75 6f 08 00 75 6f 08 00 75 6f 08 00     uo..uo..uo..uo..
	...
   80084:	75 6f 08 00 75 6f 08 00 75 6f 08 00 75 6f 08 00     uo..uo..uo..uo..
   80094:	75 6f 08 00 d1 5b 08 00 75 6f 08 00 75 6f 08 00     uo...[..uo..uo..
   800a4:	00 00 00 00 75 6f 08 00 75 6f 08 00 75 6f 08 00     ....uo..uo..uo..
   800b4:	75 6f 08 00 75 6f 08 00 75 6f 08 00 75 6f 08 00     uo..uo..uo..uo..
   800c4:	75 6f 08 00 75 6f 08 00 75 6f 08 00 75 6f 08 00     uo..uo..uo..uo..
   800d4:	75 6f 08 00 75 6f 08 00 c9 57 08 00 75 6f 08 00     uo..uo...W..uo..
   800e4:	75 6f 08 00 75 6f 08 00 75 6f 08 00 75 6f 08 00     uo..uo..uo..uo..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200705d4 	.word	0x200705d4
   80110:	00000000 	.word	0x00000000
   80114:	00087dd0 	.word	0x00087dd0

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00087dd0 	.word	0x00087dd0
   80154:	200705d8 	.word	0x200705d8
   80158:	00087dd0 	.word	0x00087dd0
   8015c:	00000000 	.word	0x00000000

00080160 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   80160:	b480      	push	{r7}
   80162:	b087      	sub	sp, #28
   80164:	af00      	add	r7, sp, #0
   80166:	60f8      	str	r0, [r7, #12]
   80168:	4608      	mov	r0, r1
   8016a:	4611      	mov	r1, r2
   8016c:	461a      	mov	r2, r3
   8016e:	4603      	mov	r3, r0
   80170:	817b      	strh	r3, [r7, #10]
   80172:	460b      	mov	r3, r1
   80174:	813b      	strh	r3, [r7, #8]
   80176:	4613      	mov	r3, r2
   80178:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   8017a:	897a      	ldrh	r2, [r7, #10]
   8017c:	893b      	ldrh	r3, [r7, #8]
   8017e:	1ad3      	subs	r3, r2, r3
   80180:	3307      	adds	r3, #7
   80182:	2b00      	cmp	r3, #0
   80184:	da00      	bge.n	80188 <SDMMC_UNSTUFF_BITS+0x28>
   80186:	3307      	adds	r3, #7
   80188:	10db      	asrs	r3, r3, #3
   8018a:	3b01      	subs	r3, #1
   8018c:	68fa      	ldr	r2, [r7, #12]
   8018e:	4413      	add	r3, r2
   80190:	781b      	ldrb	r3, [r3, #0]
   80192:	461a      	mov	r2, r3
   80194:	893b      	ldrh	r3, [r7, #8]
   80196:	f003 0307 	and.w	r3, r3, #7
   8019a:	fa42 f303 	asr.w	r3, r2, r3
   8019e:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   801a0:	893b      	ldrh	r3, [r7, #8]
   801a2:	f003 0207 	and.w	r2, r3, #7
   801a6:	79fb      	ldrb	r3, [r7, #7]
   801a8:	4413      	add	r3, r2
   801aa:	2b08      	cmp	r3, #8
   801ac:	dd16      	ble.n	801dc <SDMMC_UNSTUFF_BITS+0x7c>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   801ae:	897a      	ldrh	r2, [r7, #10]
   801b0:	893b      	ldrh	r3, [r7, #8]
   801b2:	1ad3      	subs	r3, r2, r3
   801b4:	3307      	adds	r3, #7
   801b6:	2b00      	cmp	r3, #0
   801b8:	da00      	bge.n	801bc <SDMMC_UNSTUFF_BITS+0x5c>
   801ba:	3307      	adds	r3, #7
   801bc:	10db      	asrs	r3, r3, #3
   801be:	3b02      	subs	r3, #2
   801c0:	68fa      	ldr	r2, [r7, #12]
   801c2:	4413      	add	r3, r2
   801c4:	781b      	ldrb	r3, [r3, #0]
   801c6:	461a      	mov	r2, r3
   801c8:	893b      	ldrh	r3, [r7, #8]
   801ca:	f003 0307 	and.w	r3, r3, #7
   801ce:	f1c3 0308 	rsb	r3, r3, #8
   801d2:	fa02 f303 	lsl.w	r3, r2, r3
   801d6:	697a      	ldr	r2, [r7, #20]
   801d8:	4313      	orrs	r3, r2
   801da:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   801dc:	893b      	ldrh	r3, [r7, #8]
   801de:	f003 0207 	and.w	r2, r3, #7
   801e2:	79fb      	ldrb	r3, [r7, #7]
   801e4:	4413      	add	r3, r2
   801e6:	2b10      	cmp	r3, #16
   801e8:	dd16      	ble.n	80218 <SDMMC_UNSTUFF_BITS+0xb8>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   801ea:	897a      	ldrh	r2, [r7, #10]
   801ec:	893b      	ldrh	r3, [r7, #8]
   801ee:	1ad3      	subs	r3, r2, r3
   801f0:	3307      	adds	r3, #7
   801f2:	2b00      	cmp	r3, #0
   801f4:	da00      	bge.n	801f8 <SDMMC_UNSTUFF_BITS+0x98>
   801f6:	3307      	adds	r3, #7
   801f8:	10db      	asrs	r3, r3, #3
   801fa:	3b03      	subs	r3, #3
   801fc:	68fa      	ldr	r2, [r7, #12]
   801fe:	4413      	add	r3, r2
   80200:	781b      	ldrb	r3, [r3, #0]
   80202:	461a      	mov	r2, r3
   80204:	893b      	ldrh	r3, [r7, #8]
   80206:	f003 0307 	and.w	r3, r3, #7
   8020a:	f1c3 0310 	rsb	r3, r3, #16
   8020e:	fa02 f303 	lsl.w	r3, r2, r3
   80212:	697a      	ldr	r2, [r7, #20]
   80214:	4313      	orrs	r3, r2
   80216:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   80218:	893b      	ldrh	r3, [r7, #8]
   8021a:	f003 0207 	and.w	r2, r3, #7
   8021e:	79fb      	ldrb	r3, [r7, #7]
   80220:	4413      	add	r3, r2
   80222:	2b10      	cmp	r3, #16
   80224:	dd16      	ble.n	80254 <SDMMC_UNSTUFF_BITS+0xf4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80226:	897a      	ldrh	r2, [r7, #10]
   80228:	893b      	ldrh	r3, [r7, #8]
   8022a:	1ad3      	subs	r3, r2, r3
   8022c:	3307      	adds	r3, #7
   8022e:	2b00      	cmp	r3, #0
   80230:	da00      	bge.n	80234 <SDMMC_UNSTUFF_BITS+0xd4>
   80232:	3307      	adds	r3, #7
   80234:	10db      	asrs	r3, r3, #3
   80236:	3b03      	subs	r3, #3
   80238:	68fa      	ldr	r2, [r7, #12]
   8023a:	4413      	add	r3, r2
   8023c:	781b      	ldrb	r3, [r3, #0]
   8023e:	461a      	mov	r2, r3
   80240:	893b      	ldrh	r3, [r7, #8]
   80242:	f003 0307 	and.w	r3, r3, #7
   80246:	f1c3 0310 	rsb	r3, r3, #16
   8024a:	fa02 f303 	lsl.w	r3, r2, r3
   8024e:	697a      	ldr	r2, [r7, #20]
   80250:	4313      	orrs	r3, r2
   80252:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   80254:	79fb      	ldrb	r3, [r7, #7]
   80256:	2201      	movs	r2, #1
   80258:	fa02 f303 	lsl.w	r3, r2, r3
   8025c:	3b01      	subs	r3, #1
   8025e:	697a      	ldr	r2, [r7, #20]
   80260:	4013      	ands	r3, r2
   80262:	617b      	str	r3, [r7, #20]
	return value;
   80264:	697b      	ldr	r3, [r7, #20]
}
   80266:	4618      	mov	r0, r3
   80268:	371c      	adds	r7, #28
   8026a:	46bd      	mov	sp, r7
   8026c:	bc80      	pop	{r7}
   8026e:	4770      	bx	lr

00080270 <mmc_mci_op_cond>:
 * - CMD1 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_mci_op_cond(void)
{
   80270:	b580      	push	{r7, lr}
   80272:	b082      	sub	sp, #8
   80274:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+6)*8) cylces = 4200 retry
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
   80276:	f241 0368 	movw	r3, #4200	; 0x1068
   8027a:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8027c:	4917      	ldr	r1, [pc, #92]	; (802dc <mmc_mci_op_cond+0x6c>)
   8027e:	f244 5001 	movw	r0, #17665	; 0x4501
   80282:	4b17      	ldr	r3, [pc, #92]	; (802e0 <mmc_mci_op_cond+0x70>)
   80284:	4798      	blx	r3
   80286:	4603      	mov	r3, r0
   80288:	f083 0301 	eor.w	r3, r3, #1
   8028c:	b2db      	uxtb	r3, r3
   8028e:	2b00      	cmp	r3, #0
   80290:	d001      	beq.n	80296 <mmc_mci_op_cond+0x26>
				SD_MMC_VOLTAGE_SUPPORT | OCR_ACCESS_MODE_SECTOR)) {
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
   80292:	2300      	movs	r3, #0
   80294:	e01e      	b.n	802d4 <mmc_mci_op_cond+0x64>
		}
		// Check busy flag
		resp = driver_get_response();
   80296:	4b13      	ldr	r3, [pc, #76]	; (802e4 <mmc_mci_op_cond+0x74>)
   80298:	4798      	blx	r3
   8029a:	6038      	str	r0, [r7, #0]
		if (resp & OCR_POWER_UP_BUSY) {
   8029c:	683b      	ldr	r3, [r7, #0]
   8029e:	2b00      	cmp	r3, #0
   802a0:	da0f      	bge.n	802c2 <mmc_mci_op_cond+0x52>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
   802a2:	683b      	ldr	r3, [r7, #0]
   802a4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
   802a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   802ac:	d110      	bne.n	802d0 <mmc_mci_op_cond+0x60>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
   802ae:	4b0e      	ldr	r3, [pc, #56]	; (802e8 <mmc_mci_op_cond+0x78>)
   802b0:	681b      	ldr	r3, [r3, #0]
   802b2:	4a0d      	ldr	r2, [pc, #52]	; (802e8 <mmc_mci_op_cond+0x78>)
   802b4:	6812      	ldr	r2, [r2, #0]
   802b6:	7ad2      	ldrb	r2, [r2, #11]
   802b8:	f042 0208 	orr.w	r2, r2, #8
   802bc:	b2d2      	uxtb	r2, r2
   802be:	72da      	strb	r2, [r3, #11]
			}
			break;
   802c0:	e006      	b.n	802d0 <mmc_mci_op_cond+0x60>
		}
		if (retry-- == 0) {
   802c2:	687b      	ldr	r3, [r7, #4]
   802c4:	1e5a      	subs	r2, r3, #1
   802c6:	607a      	str	r2, [r7, #4]
   802c8:	2b00      	cmp	r3, #0
   802ca:	d1d7      	bne.n	8027c <mmc_mci_op_cond+0xc>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   802cc:	2300      	movs	r3, #0
   802ce:	e001      	b.n	802d4 <mmc_mci_op_cond+0x64>
			break;
   802d0:	bf00      	nop
		}
	} while (1);
	return true;
   802d2:	2301      	movs	r3, #1
}
   802d4:	4618      	mov	r0, r3
   802d6:	3708      	adds	r7, #8
   802d8:	46bd      	mov	sp, r7
   802da:	bd80      	pop	{r7, pc}
   802dc:	401f8000 	.word	0x401f8000
   802e0:	0008218d 	.word	0x0008218d
   802e4:	000821d1 	.word	0x000821d1
   802e8:	20070614 	.word	0x20070614

000802ec <sd_mci_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_mci_op_cond(uint8_t v2)
{
   802ec:	b580      	push	{r7, lr}
   802ee:	b086      	sub	sp, #24
   802f0:	af00      	add	r7, sp, #0
   802f2:	4603      	mov	r3, r0
   802f4:	71fb      	strb	r3, [r7, #7]
	 * 6 = cmd byte size
	 * 6 = response byte size
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 2100;
   802f6:	f640 0334 	movw	r3, #2100	; 0x834
   802fa:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   802fc:	2100      	movs	r1, #0
   802fe:	f241 1037 	movw	r0, #4407	; 0x1137
   80302:	4b21      	ldr	r3, [pc, #132]	; (80388 <sd_mci_op_cond+0x9c>)
   80304:	4798      	blx	r3
   80306:	4603      	mov	r3, r0
   80308:	f083 0301 	eor.w	r3, r3, #1
   8030c:	b2db      	uxtb	r3, r3
   8030e:	2b00      	cmp	r3, #0
   80310:	d001      	beq.n	80316 <sd_mci_op_cond+0x2a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   80312:	2300      	movs	r3, #0
   80314:	e034      	b.n	80380 <sd_mci_op_cond+0x94>
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80316:	f44f 13fc 	mov.w	r3, #2064384	; 0x1f8000
   8031a:	617b      	str	r3, [r7, #20]
		if (v2) {
   8031c:	79fb      	ldrb	r3, [r7, #7]
   8031e:	2b00      	cmp	r3, #0
   80320:	d003      	beq.n	8032a <sd_mci_op_cond+0x3e>
			arg |= SD_ACMD41_HCS;
   80322:	697b      	ldr	r3, [r7, #20]
   80324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   80328:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   8032a:	6979      	ldr	r1, [r7, #20]
   8032c:	f244 5029 	movw	r0, #17705	; 0x4529
   80330:	4b15      	ldr	r3, [pc, #84]	; (80388 <sd_mci_op_cond+0x9c>)
   80332:	4798      	blx	r3
   80334:	4603      	mov	r3, r0
   80336:	f083 0301 	eor.w	r3, r3, #1
   8033a:	b2db      	uxtb	r3, r3
   8033c:	2b00      	cmp	r3, #0
   8033e:	d001      	beq.n	80344 <sd_mci_op_cond+0x58>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   80340:	2300      	movs	r3, #0
   80342:	e01d      	b.n	80380 <sd_mci_op_cond+0x94>
		}
		resp = driver_get_response();
   80344:	4b11      	ldr	r3, [pc, #68]	; (8038c <sd_mci_op_cond+0xa0>)
   80346:	4798      	blx	r3
   80348:	60f8      	str	r0, [r7, #12]
		if (resp & OCR_POWER_UP_BUSY) {
   8034a:	68fb      	ldr	r3, [r7, #12]
   8034c:	2b00      	cmp	r3, #0
   8034e:	da0e      	bge.n	8036e <sd_mci_op_cond+0x82>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
   80350:	68fb      	ldr	r3, [r7, #12]
   80352:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   80356:	2b00      	cmp	r3, #0
   80358:	d010      	beq.n	8037c <sd_mci_op_cond+0x90>
				sd_mmc_card->type |= CARD_TYPE_HC;
   8035a:	4b0d      	ldr	r3, [pc, #52]	; (80390 <sd_mci_op_cond+0xa4>)
   8035c:	681b      	ldr	r3, [r3, #0]
   8035e:	4a0c      	ldr	r2, [pc, #48]	; (80390 <sd_mci_op_cond+0xa4>)
   80360:	6812      	ldr	r2, [r2, #0]
   80362:	7ad2      	ldrb	r2, [r2, #11]
   80364:	f042 0208 	orr.w	r2, r2, #8
   80368:	b2d2      	uxtb	r2, r2
   8036a:	72da      	strb	r2, [r3, #11]
			}
			break;
   8036c:	e006      	b.n	8037c <sd_mci_op_cond+0x90>
		}
		if (retry-- == 0) {
   8036e:	693b      	ldr	r3, [r7, #16]
   80370:	1e5a      	subs	r2, r3, #1
   80372:	613a      	str	r2, [r7, #16]
   80374:	2b00      	cmp	r3, #0
   80376:	d1c1      	bne.n	802fc <sd_mci_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   80378:	2300      	movs	r3, #0
   8037a:	e001      	b.n	80380 <sd_mci_op_cond+0x94>
			break;
   8037c:	bf00      	nop
		}
	} while (1);
	return true;
   8037e:	2301      	movs	r3, #1
}
   80380:	4618      	mov	r0, r3
   80382:	3718      	adds	r7, #24
   80384:	46bd      	mov	sp, r7
   80386:	bd80      	pop	{r7, pc}
   80388:	0008218d 	.word	0x0008218d
   8038c:	000821d1 	.word	0x000821d1
   80390:	20070614 	.word	0x20070614

00080394 <sdio_op_cond>:
 *   sd_mmc_card->type is updated
 *
 * \return true if success, otherwise false
 */
static bool sdio_op_cond(void)
{
   80394:	b580      	push	{r7, lr}
   80396:	b082      	sub	sp, #8
   80398:	af00      	add	r7, sp, #0
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
   8039a:	2100      	movs	r1, #0
   8039c:	f244 5005 	movw	r0, #17669	; 0x4505
   803a0:	4b23      	ldr	r3, [pc, #140]	; (80430 <sdio_op_cond+0x9c>)
   803a2:	4798      	blx	r3
   803a4:	4603      	mov	r3, r0
   803a6:	f083 0301 	eor.w	r3, r3, #1
   803aa:	b2db      	uxtb	r3, r3
   803ac:	2b00      	cmp	r3, #0
   803ae:	d001      	beq.n	803b4 <sdio_op_cond+0x20>
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
   803b0:	2301      	movs	r3, #1
   803b2:	e039      	b.n	80428 <sdio_op_cond+0x94>
	}
	resp = driver_get_response();
   803b4:	4b1f      	ldr	r3, [pc, #124]	; (80434 <sdio_op_cond+0xa0>)
   803b6:	4798      	blx	r3
   803b8:	6078      	str	r0, [r7, #4]
	if ((resp & OCR_SDIO_NF) == 0) {
   803ba:	687b      	ldr	r3, [r7, #4]
   803bc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   803c0:	2b00      	cmp	r3, #0
   803c2:	d101      	bne.n	803c8 <sdio_op_cond+0x34>
		return true; // No error but card type not updated
   803c4:	2301      	movs	r3, #1
   803c6:	e02f      	b.n	80428 <sdio_op_cond+0x94>
	 * Wait card ready
	 * Timeout 1s = 400KHz / ((6+4)*8) cylces = 5000 retry
	 * 6 = cmd byte size
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
   803c8:	f241 3388 	movw	r3, #5000	; 0x1388
   803cc:	603b      	str	r3, [r7, #0]
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   803ce:	687b      	ldr	r3, [r7, #4]
   803d0:	f403 13fc 	and.w	r3, r3, #2064384	; 0x1f8000
   803d4:	4619      	mov	r1, r3
   803d6:	f244 5005 	movw	r0, #17669	; 0x4505
   803da:	4b15      	ldr	r3, [pc, #84]	; (80430 <sdio_op_cond+0x9c>)
   803dc:	4798      	blx	r3
   803de:	4603      	mov	r3, r0
   803e0:	f083 0301 	eor.w	r3, r3, #1
   803e4:	b2db      	uxtb	r3, r3
   803e6:	2b00      	cmp	r3, #0
   803e8:	d001      	beq.n	803ee <sdio_op_cond+0x5a>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
   803ea:	2300      	movs	r3, #0
   803ec:	e01c      	b.n	80428 <sdio_op_cond+0x94>
		}
		resp = driver_get_response();
   803ee:	4b11      	ldr	r3, [pc, #68]	; (80434 <sdio_op_cond+0xa0>)
   803f0:	4798      	blx	r3
   803f2:	6078      	str	r0, [r7, #4]
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   803f4:	687b      	ldr	r3, [r7, #4]
   803f6:	2b00      	cmp	r3, #0
   803f8:	db06      	blt.n	80408 <sdio_op_cond+0x74>
			break;
		}
		if (cmd5_retry-- == 0) {
   803fa:	683b      	ldr	r3, [r7, #0]
   803fc:	1e5a      	subs	r2, r3, #1
   803fe:	603a      	str	r2, [r7, #0]
   80400:	2b00      	cmp	r3, #0
   80402:	d1e4      	bne.n	803ce <sdio_op_cond+0x3a>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
   80404:	2300      	movs	r3, #0
   80406:	e00f      	b.n	80428 <sdio_op_cond+0x94>
			break;
   80408:	bf00      	nop
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
   8040a:	687b      	ldr	r3, [r7, #4]
   8040c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
   80410:	2b00      	cmp	r3, #0
   80412:	d004      	beq.n	8041e <sdio_op_cond+0x8a>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
   80414:	4b08      	ldr	r3, [pc, #32]	; (80438 <sdio_op_cond+0xa4>)
   80416:	681b      	ldr	r3, [r3, #0]
   80418:	2205      	movs	r2, #5
   8041a:	72da      	strb	r2, [r3, #11]
   8041c:	e003      	b.n	80426 <sdio_op_cond+0x92>
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
   8041e:	4b06      	ldr	r3, [pc, #24]	; (80438 <sdio_op_cond+0xa4>)
   80420:	681b      	ldr	r3, [r3, #0]
   80422:	2204      	movs	r2, #4
   80424:	72da      	strb	r2, [r3, #11]
	}
	return true; // No error and card type updated with SDIO type
   80426:	2301      	movs	r3, #1
}
   80428:	4618      	mov	r0, r3
   8042a:	3708      	adds	r7, #8
   8042c:	46bd      	mov	sp, r7
   8042e:	bd80      	pop	{r7, pc}
   80430:	0008218d 	.word	0x0008218d
   80434:	000821d1 	.word	0x000821d1
   80438:	20070614 	.word	0x20070614

0008043c <sdio_get_max_speed>:
 *   and update sd_mmc_card->clock
 *
 * \return true if success, otherwise false
 */
static bool sdio_get_max_speed(void)
{
   8043c:	b590      	push	{r4, r7, lr}
   8043e:	b08b      	sub	sp, #44	; 0x2c
   80440:	af02      	add	r7, sp, #8
	uint32_t mul;
	uint8_t tplfe_max_tran_speed, i;
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
   80442:	2309      	movs	r3, #9
   80444:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < 4; i++) {
   80446:	2300      	movs	r3, #0
   80448:	75bb      	strb	r3, [r7, #22]
   8044a:	e00f      	b.n	8046c <sdio_get_max_speed+0x30>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
   8044c:	7dbb      	ldrb	r3, [r7, #22]
   8044e:	463a      	mov	r2, r7
   80450:	4413      	add	r3, r2
   80452:	9300      	str	r3, [sp, #0]
   80454:	2300      	movs	r3, #0
   80456:	69ba      	ldr	r2, [r7, #24]
   80458:	2100      	movs	r1, #0
   8045a:	2000      	movs	r0, #0
   8045c:	4c46      	ldr	r4, [pc, #280]	; (80578 <sdio_get_max_speed+0x13c>)
   8045e:	47a0      	blx	r4
		addr_old++;
   80460:	69bb      	ldr	r3, [r7, #24]
   80462:	3301      	adds	r3, #1
   80464:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < 4; i++) {
   80466:	7dbb      	ldrb	r3, [r7, #22]
   80468:	3301      	adds	r3, #1
   8046a:	75bb      	strb	r3, [r7, #22]
   8046c:	7dbb      	ldrb	r3, [r7, #22]
   8046e:	2b03      	cmp	r3, #3
   80470:	d9ec      	bls.n	8044c <sdio_get_max_speed+0x10>
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
   80472:	783b      	ldrb	r3, [r7, #0]
   80474:	461a      	mov	r2, r3
   80476:	787b      	ldrb	r3, [r7, #1]
   80478:	021b      	lsls	r3, r3, #8
   8047a:	441a      	add	r2, r3
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
   8047c:	78bb      	ldrb	r3, [r7, #2]
   8047e:	041b      	lsls	r3, r3, #16
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
   80480:	441a      	add	r2, r3
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
   80482:	78fb      	ldrb	r3, [r7, #3]
   80484:	061b      	lsls	r3, r3, #24
   80486:	4413      	add	r3, r2
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
   80488:	61bb      	str	r3, [r7, #24]
	addr_new = addr_old;
   8048a:	69bb      	ldr	r3, [r7, #24]
   8048c:	61fb      	str	r3, [r7, #28]

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
   8048e:	2300      	movs	r3, #0
   80490:	75bb      	strb	r3, [r7, #22]
   80492:	e00f      	b.n	804b4 <sdio_get_max_speed+0x78>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
   80494:	7dbb      	ldrb	r3, [r7, #22]
   80496:	1d3a      	adds	r2, r7, #4
   80498:	4413      	add	r3, r2
   8049a:	9300      	str	r3, [sp, #0]
   8049c:	2300      	movs	r3, #0
   8049e:	69fa      	ldr	r2, [r7, #28]
   804a0:	2100      	movs	r1, #0
   804a2:	2000      	movs	r0, #0
   804a4:	4c34      	ldr	r4, [pc, #208]	; (80578 <sdio_get_max_speed+0x13c>)
   804a6:	47a0      	blx	r4
			addr_new++;
   804a8:	69fb      	ldr	r3, [r7, #28]
   804aa:	3301      	adds	r3, #1
   804ac:	61fb      	str	r3, [r7, #28]
		for(i=0; i<3; i++) {
   804ae:	7dbb      	ldrb	r3, [r7, #22]
   804b0:	3301      	adds	r3, #1
   804b2:	75bb      	strb	r3, [r7, #22]
   804b4:	7dbb      	ldrb	r3, [r7, #22]
   804b6:	2b02      	cmp	r3, #2
   804b8:	d9ec      	bls.n	80494 <sdio_get_max_speed+0x58>
		}
		if (buf[0] == SDIO_CISTPL_END) {
   804ba:	793b      	ldrb	r3, [r7, #4]
   804bc:	2bff      	cmp	r3, #255	; 0xff
   804be:	d101      	bne.n	804c4 <sdio_get_max_speed+0x88>
			return false; /* Tuple error */
   804c0:	2300      	movs	r3, #0
   804c2:	e055      	b.n	80570 <sdio_get_max_speed+0x134>
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
   804c4:	793b      	ldrb	r3, [r7, #4]
   804c6:	2b22      	cmp	r3, #34	; 0x22
   804c8:	d102      	bne.n	804d0 <sdio_get_max_speed+0x94>
   804ca:	79bb      	ldrb	r3, [r7, #6]
   804cc:	2b00      	cmp	r3, #0
   804ce:	d012      	beq.n	804f6 <sdio_get_max_speed+0xba>
			break; /* Fun0 tuple found */
		}
		if (buf[1] == 0) {
   804d0:	797b      	ldrb	r3, [r7, #5]
   804d2:	2b00      	cmp	r3, #0
   804d4:	d101      	bne.n	804da <sdio_get_max_speed+0x9e>
			return false; /* Tuple error */
   804d6:	2300      	movs	r3, #0
   804d8:	e04a      	b.n	80570 <sdio_get_max_speed+0x134>
		}
		/* Next address */
		addr_new += buf[1]-1;
   804da:	797b      	ldrb	r3, [r7, #5]
   804dc:	461a      	mov	r2, r3
   804de:	69fb      	ldr	r3, [r7, #28]
   804e0:	4413      	add	r3, r2
   804e2:	3b01      	subs	r3, #1
   804e4:	61fb      	str	r3, [r7, #28]
		if (addr_new > (addr_old + 256)) {
   804e6:	69bb      	ldr	r3, [r7, #24]
   804e8:	f503 7280 	add.w	r2, r3, #256	; 0x100
   804ec:	69fb      	ldr	r3, [r7, #28]
   804ee:	429a      	cmp	r2, r3
   804f0:	d2cd      	bcs.n	8048e <sdio_get_max_speed+0x52>
			return false; /* Outoff CIS area */
   804f2:	2300      	movs	r3, #0
   804f4:	e03c      	b.n	80570 <sdio_get_max_speed+0x134>
			break; /* Fun0 tuple found */
   804f6:	bf00      	nop
		}
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
   804f8:	69fb      	ldr	r3, [r7, #28]
   804fa:	3b03      	subs	r3, #3
   804fc:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < 6; i++) {
   804fe:	2300      	movs	r3, #0
   80500:	75bb      	strb	r3, [r7, #22]
   80502:	e00f      	b.n	80524 <sdio_get_max_speed+0xe8>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
   80504:	7dbb      	ldrb	r3, [r7, #22]
   80506:	1d3a      	adds	r2, r7, #4
   80508:	4413      	add	r3, r2
   8050a:	9300      	str	r3, [sp, #0]
   8050c:	2300      	movs	r3, #0
   8050e:	69fa      	ldr	r2, [r7, #28]
   80510:	2100      	movs	r1, #0
   80512:	2000      	movs	r0, #0
   80514:	4c18      	ldr	r4, [pc, #96]	; (80578 <sdio_get_max_speed+0x13c>)
   80516:	47a0      	blx	r4
		addr_new++;
   80518:	69fb      	ldr	r3, [r7, #28]
   8051a:	3301      	adds	r3, #1
   8051c:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < 6; i++) {
   8051e:	7dbb      	ldrb	r3, [r7, #22]
   80520:	3301      	adds	r3, #1
   80522:	75bb      	strb	r3, [r7, #22]
   80524:	7dbb      	ldrb	r3, [r7, #22]
   80526:	2b05      	cmp	r3, #5
   80528:	d9ec      	bls.n	80504 <sdio_get_max_speed+0xc8>
	}

	tplfe_max_tran_speed = buf[5];
   8052a:	7a7b      	ldrb	r3, [r7, #9]
   8052c:	75fb      	strb	r3, [r7, #23]
	if (tplfe_max_tran_speed > 0x32) {
   8052e:	7dfb      	ldrb	r3, [r7, #23]
   80530:	2b32      	cmp	r3, #50	; 0x32
   80532:	d901      	bls.n	80538 <sdio_get_max_speed+0xfc>
		/* Error on SDIO register, the high speed is not activated
		 * and the clock can not be more than 25MHz.
		 * This error is present on specific SDIO card
		 * (H&D wireless card - HDG104 WiFi SIP).
		 */
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
   80534:	2332      	movs	r3, #50	; 0x32
   80536:	75fb      	strb	r3, [r7, #23]
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
   80538:	7dfb      	ldrb	r3, [r7, #23]
   8053a:	f003 0307 	and.w	r3, r3, #7
   8053e:	4a0f      	ldr	r2, [pc, #60]	; (8057c <sdio_get_max_speed+0x140>)
   80540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80544:	613b      	str	r3, [r7, #16]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
   80546:	7dfb      	ldrb	r3, [r7, #23]
   80548:	08db      	lsrs	r3, r3, #3
   8054a:	b2db      	uxtb	r3, r3
   8054c:	f003 030f 	and.w	r3, r3, #15
   80550:	4a0b      	ldr	r2, [pc, #44]	; (80580 <sdio_get_max_speed+0x144>)
   80552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80556:	60fb      	str	r3, [r7, #12]
	sd_mmc_card->clock = unit * mul * 1000;
   80558:	4b0a      	ldr	r3, [pc, #40]	; (80584 <sdio_get_max_speed+0x148>)
   8055a:	681b      	ldr	r3, [r3, #0]
   8055c:	693a      	ldr	r2, [r7, #16]
   8055e:	68f9      	ldr	r1, [r7, #12]
   80560:	fb01 f202 	mul.w	r2, r1, r2
   80564:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   80568:	fb01 f202 	mul.w	r2, r1, r2
   8056c:	601a      	str	r2, [r3, #0]
	 * which supports upto 25MHz.
	 * A SDIO card alone can be:
	 * - a Low-Speed SDIO card which supports 400Khz minimum
	 * - a Full-Speed SDIO card which supports upto 25MHz
	 */
	return true;
   8056e:	2301      	movs	r3, #1
}
   80570:	4618      	mov	r0, r3
   80572:	3724      	adds	r7, #36	; 0x24
   80574:	46bd      	mov	sp, r7
   80576:	bd90      	pop	{r4, r7, pc}
   80578:	00080c71 	.word	0x00080c71
   8057c:	00087700 	.word	0x00087700
   80580:	0008771c 	.word	0x0008771c
   80584:	20070614 	.word	0x20070614

00080588 <sdio_cmd52_set_bus_width>:
 * \note sd_mmc_card->bus_width is updated.
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52_set_bus_width(void)
{
   80588:	b590      	push	{r4, r7, lr}
   8058a:	b085      	sub	sp, #20
   8058c:	af02      	add	r7, sp, #8
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
   8058e:	1dfb      	adds	r3, r7, #7
   80590:	9300      	str	r3, [sp, #0]
   80592:	2300      	movs	r3, #0
   80594:	2208      	movs	r2, #8
   80596:	2100      	movs	r1, #0
   80598:	2000      	movs	r0, #0
   8059a:	4c15      	ldr	r4, [pc, #84]	; (805f0 <sdio_cmd52_set_bus_width+0x68>)
   8059c:	47a0      	blx	r4
   8059e:	4603      	mov	r3, r0
   805a0:	f083 0301 	eor.w	r3, r3, #1
   805a4:	b2db      	uxtb	r3, r3
   805a6:	2b00      	cmp	r3, #0
   805a8:	d001      	beq.n	805ae <sdio_cmd52_set_bus_width+0x26>
			0, &u8_value)) {
		return false;
   805aa:	2300      	movs	r3, #0
   805ac:	e01c      	b.n	805e8 <sdio_cmd52_set_bus_width+0x60>
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
   805ae:	79fb      	ldrb	r3, [r7, #7]
   805b0:	b25b      	sxtb	r3, r3
   805b2:	2b00      	cmp	r3, #0
   805b4:	db01      	blt.n	805ba <sdio_cmd52_set_bus_width+0x32>
		// No supported, it is not a protocol error
		return true;
   805b6:	2301      	movs	r3, #1
   805b8:	e016      	b.n	805e8 <sdio_cmd52_set_bus_width+0x60>
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
   805ba:	2302      	movs	r3, #2
   805bc:	71fb      	strb	r3, [r7, #7]
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
   805be:	1dfb      	adds	r3, r7, #7
   805c0:	9300      	str	r3, [sp, #0]
   805c2:	2301      	movs	r3, #1
   805c4:	2207      	movs	r2, #7
   805c6:	2100      	movs	r1, #0
   805c8:	2001      	movs	r0, #1
   805ca:	4c09      	ldr	r4, [pc, #36]	; (805f0 <sdio_cmd52_set_bus_width+0x68>)
   805cc:	47a0      	blx	r4
   805ce:	4603      	mov	r3, r0
   805d0:	f083 0301 	eor.w	r3, r3, #1
   805d4:	b2db      	uxtb	r3, r3
   805d6:	2b00      	cmp	r3, #0
   805d8:	d001      	beq.n	805de <sdio_cmd52_set_bus_width+0x56>
			1, &u8_value)) {
		return false;
   805da:	2300      	movs	r3, #0
   805dc:	e004      	b.n	805e8 <sdio_cmd52_set_bus_width+0x60>
	}
	sd_mmc_card->bus_width = 4;
   805de:	4b05      	ldr	r3, [pc, #20]	; (805f4 <sdio_cmd52_set_bus_width+0x6c>)
   805e0:	681b      	ldr	r3, [r3, #0]
   805e2:	2204      	movs	r2, #4
   805e4:	735a      	strb	r2, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
   805e6:	2301      	movs	r3, #1
}
   805e8:	4618      	mov	r0, r3
   805ea:	370c      	adds	r7, #12
   805ec:	46bd      	mov	sp, r7
   805ee:	bd90      	pop	{r4, r7, pc}
   805f0:	00080c71 	.word	0x00080c71
   805f4:	20070614 	.word	0x20070614

000805f8 <sdio_cmd52_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52_set_high_speed(void)
{
   805f8:	b590      	push	{r4, r7, lr}
   805fa:	b085      	sub	sp, #20
   805fc:	af02      	add	r7, sp, #8
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
   805fe:	1dfb      	adds	r3, r7, #7
   80600:	9300      	str	r3, [sp, #0]
   80602:	2300      	movs	r3, #0
   80604:	2213      	movs	r2, #19
   80606:	2100      	movs	r1, #0
   80608:	2000      	movs	r0, #0
   8060a:	4c19      	ldr	r4, [pc, #100]	; (80670 <sdio_cmd52_set_high_speed+0x78>)
   8060c:	47a0      	blx	r4
   8060e:	4603      	mov	r3, r0
   80610:	f083 0301 	eor.w	r3, r3, #1
   80614:	b2db      	uxtb	r3, r3
   80616:	2b00      	cmp	r3, #0
   80618:	d001      	beq.n	8061e <sdio_cmd52_set_high_speed+0x26>
		return false;
   8061a:	2300      	movs	r3, #0
   8061c:	e024      	b.n	80668 <sdio_cmd52_set_high_speed+0x70>
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
   8061e:	79fb      	ldrb	r3, [r7, #7]
   80620:	f003 0301 	and.w	r3, r3, #1
   80624:	2b00      	cmp	r3, #0
   80626:	d101      	bne.n	8062c <sdio_cmd52_set_high_speed+0x34>
		// No supported, it is not a protocol error
		return true;
   80628:	2301      	movs	r3, #1
   8062a:	e01d      	b.n	80668 <sdio_cmd52_set_high_speed+0x70>
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
   8062c:	2302      	movs	r3, #2
   8062e:	71fb      	strb	r3, [r7, #7]
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
   80630:	1dfb      	adds	r3, r7, #7
   80632:	9300      	str	r3, [sp, #0]
   80634:	2301      	movs	r3, #1
   80636:	2213      	movs	r2, #19
   80638:	2100      	movs	r1, #0
   8063a:	2001      	movs	r0, #1
   8063c:	4c0c      	ldr	r4, [pc, #48]	; (80670 <sdio_cmd52_set_high_speed+0x78>)
   8063e:	47a0      	blx	r4
   80640:	4603      	mov	r3, r0
   80642:	f083 0301 	eor.w	r3, r3, #1
   80646:	b2db      	uxtb	r3, r3
   80648:	2b00      	cmp	r3, #0
   8064a:	d001      	beq.n	80650 <sdio_cmd52_set_high_speed+0x58>
			1, &u8_value)) {
		return false;
   8064c:	2300      	movs	r3, #0
   8064e:	e00b      	b.n	80668 <sdio_cmd52_set_high_speed+0x70>
	}
	sd_mmc_card->high_speed = 1;
   80650:	4b08      	ldr	r3, [pc, #32]	; (80674 <sdio_cmd52_set_high_speed+0x7c>)
   80652:	681b      	ldr	r3, [r3, #0]
   80654:	2201      	movs	r2, #1
   80656:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
   80658:	4b06      	ldr	r3, [pc, #24]	; (80674 <sdio_cmd52_set_high_speed+0x7c>)
   8065a:	681b      	ldr	r3, [r3, #0]
   8065c:	4a05      	ldr	r2, [pc, #20]	; (80674 <sdio_cmd52_set_high_speed+0x7c>)
   8065e:	6812      	ldr	r2, [r2, #0]
   80660:	6812      	ldr	r2, [r2, #0]
   80662:	0052      	lsls	r2, r2, #1
   80664:	601a      	str	r2, [r3, #0]
	return true;
   80666:	2301      	movs	r3, #1
}
   80668:	4618      	mov	r0, r3
   8066a:	370c      	adds	r7, #12
   8066c:	46bd      	mov	sp, r7
   8066e:	bd90      	pop	{r4, r7, pc}
   80670:	00080c71 	.word	0x00080c71
   80674:	20070614 	.word	0x20070614

00080678 <sd_cm6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool sd_cm6_set_high_speed(void)
{
   80678:	b590      	push	{r4, r7, lr}
   8067a:	b093      	sub	sp, #76	; 0x4c
   8067c:	af02      	add	r7, sp, #8
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
   8067e:	463b      	mov	r3, r7
   80680:	2240      	movs	r2, #64	; 0x40
   80682:	2100      	movs	r1, #0
   80684:	4618      	mov	r0, r3
   80686:	4b2f      	ldr	r3, [pc, #188]	; (80744 <sd_cm6_set_high_speed+0xcc>)
   80688:	4798      	blx	r3

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
   8068a:	2301      	movs	r3, #1
   8068c:	9300      	str	r3, [sp, #0]
   8068e:	2301      	movs	r3, #1
   80690:	2240      	movs	r2, #64	; 0x40
   80692:	492d      	ldr	r1, [pc, #180]	; (80748 <sd_cm6_set_high_speed+0xd0>)
   80694:	482d      	ldr	r0, [pc, #180]	; (8074c <sd_cm6_set_high_speed+0xd4>)
   80696:	4c2e      	ldr	r4, [pc, #184]	; (80750 <sd_cm6_set_high_speed+0xd8>)
   80698:	47a0      	blx	r4
   8069a:	4603      	mov	r3, r0
   8069c:	f083 0301 	eor.w	r3, r3, #1
   806a0:	b2db      	uxtb	r3, r3
   806a2:	2b00      	cmp	r3, #0
   806a4:	d001      	beq.n	806aa <sd_cm6_set_high_speed+0x32>
			| SD_CMD6_GRP4_NO_INFLUENCE
			| SD_CMD6_GRP3_NO_INFLUENCE
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
   806a6:	2300      	movs	r3, #0
   806a8:	e047      	b.n	8073a <sd_cm6_set_high_speed+0xc2>
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
   806aa:	463b      	mov	r3, r7
   806ac:	2101      	movs	r1, #1
   806ae:	4618      	mov	r0, r3
   806b0:	4b28      	ldr	r3, [pc, #160]	; (80754 <sd_cm6_set_high_speed+0xdc>)
   806b2:	4798      	blx	r3
   806b4:	4603      	mov	r3, r0
   806b6:	f083 0301 	eor.w	r3, r3, #1
   806ba:	b2db      	uxtb	r3, r3
   806bc:	2b00      	cmp	r3, #0
   806be:	d001      	beq.n	806c4 <sd_cm6_set_high_speed+0x4c>
		return false;
   806c0:	2300      	movs	r3, #0
   806c2:	e03a      	b.n	8073a <sd_cm6_set_high_speed+0xc2>
	}
	if (!driver_wait_end_of_read_blocks()) {
   806c4:	4b24      	ldr	r3, [pc, #144]	; (80758 <sd_cm6_set_high_speed+0xe0>)
   806c6:	4798      	blx	r3
   806c8:	4603      	mov	r3, r0
   806ca:	f083 0301 	eor.w	r3, r3, #1
   806ce:	b2db      	uxtb	r3, r3
   806d0:	2b00      	cmp	r3, #0
   806d2:	d001      	beq.n	806d8 <sd_cm6_set_high_speed+0x60>
		return false;
   806d4:	2300      	movs	r3, #0
   806d6:	e030      	b.n	8073a <sd_cm6_set_high_speed+0xc2>
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   806d8:	4b20      	ldr	r3, [pc, #128]	; (8075c <sd_cm6_set_high_speed+0xe4>)
   806da:	4798      	blx	r3
   806dc:	4603      	mov	r3, r0
   806de:	f003 0380 	and.w	r3, r3, #128	; 0x80
   806e2:	2b00      	cmp	r3, #0
   806e4:	d001      	beq.n	806ea <sd_cm6_set_high_speed+0x72>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
   806e6:	2300      	movs	r3, #0
   806e8:	e027      	b.n	8073a <sd_cm6_set_high_speed+0xc2>
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
   806ea:	4638      	mov	r0, r7
   806ec:	2304      	movs	r3, #4
   806ee:	f44f 72bc 	mov.w	r2, #376	; 0x178
   806f2:	f44f 7100 	mov.w	r1, #512	; 0x200
   806f6:	4c1a      	ldr	r4, [pc, #104]	; (80760 <sd_cm6_set_high_speed+0xe8>)
   806f8:	47a0      	blx	r4
   806fa:	4603      	mov	r3, r0
   806fc:	2b0f      	cmp	r3, #15
   806fe:	d101      	bne.n	80704 <sd_cm6_set_high_speed+0x8c>
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
   80700:	2301      	movs	r3, #1
   80702:	e01a      	b.n	8073a <sd_cm6_set_high_speed+0xc2>
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
   80704:	4638      	mov	r0, r7
   80706:	2310      	movs	r3, #16
   80708:	f44f 7288 	mov.w	r2, #272	; 0x110
   8070c:	f44f 7100 	mov.w	r1, #512	; 0x200
   80710:	4c13      	ldr	r4, [pc, #76]	; (80760 <sd_cm6_set_high_speed+0xe8>)
   80712:	47a0      	blx	r4
   80714:	4603      	mov	r3, r0
   80716:	2b00      	cmp	r3, #0
   80718:	d001      	beq.n	8071e <sd_cm6_set_high_speed+0xa6>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
   8071a:	2300      	movs	r3, #0
   8071c:	e00d      	b.n	8073a <sd_cm6_set_high_speed+0xc2>
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
   8071e:	4b11      	ldr	r3, [pc, #68]	; (80764 <sd_cm6_set_high_speed+0xec>)
   80720:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
   80722:	4b11      	ldr	r3, [pc, #68]	; (80768 <sd_cm6_set_high_speed+0xf0>)
   80724:	681b      	ldr	r3, [r3, #0]
   80726:	2201      	movs	r2, #1
   80728:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
   8072a:	4b0f      	ldr	r3, [pc, #60]	; (80768 <sd_cm6_set_high_speed+0xf0>)
   8072c:	681b      	ldr	r3, [r3, #0]
   8072e:	4a0e      	ldr	r2, [pc, #56]	; (80768 <sd_cm6_set_high_speed+0xf0>)
   80730:	6812      	ldr	r2, [r2, #0]
   80732:	6812      	ldr	r2, [r2, #0]
   80734:	0052      	lsls	r2, r2, #1
   80736:	601a      	str	r2, [r3, #0]
	return true;
   80738:	2301      	movs	r3, #1
}
   8073a:	4618      	mov	r0, r3
   8073c:	3744      	adds	r7, #68	; 0x44
   8073e:	46bd      	mov	sp, r7
   80740:	bd90      	pop	{r4, r7, pc}
   80742:	bf00      	nop
   80744:	00087545 	.word	0x00087545
   80748:	80ffff01 	.word	0x80ffff01
   8074c:	00081106 	.word	0x00081106
   80750:	0008224d 	.word	0x0008224d
   80754:	00082419 	.word	0x00082419
   80758:	00082501 	.word	0x00082501
   8075c:	000821d1 	.word	0x000821d1
   80760:	00080161 	.word	0x00080161
   80764:	0008214d 	.word	0x0008214d
   80768:	20070614 	.word	0x20070614

0008076c <mmc_cmd6_set_bus_width>:
 * \param bus_width   Bus width to set
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
   8076c:	b580      	push	{r7, lr}
   8076e:	b084      	sub	sp, #16
   80770:	af00      	add	r7, sp, #0
   80772:	4603      	mov	r3, r0
   80774:	71fb      	strb	r3, [r7, #7]
	uint32_t arg;

	switch (bus_width) {
   80776:	79fb      	ldrb	r3, [r7, #7]
   80778:	2b04      	cmp	r3, #4
   8077a:	d004      	beq.n	80786 <mmc_cmd6_set_bus_width+0x1a>
   8077c:	2b08      	cmp	r3, #8
   8077e:	d105      	bne.n	8078c <mmc_cmd6_set_bus_width+0x20>
	case 8:
		arg = MMC_CMD6_ACCESS_SET_BITS
   80780:	4b13      	ldr	r3, [pc, #76]	; (807d0 <mmc_cmd6_set_bus_width+0x64>)
   80782:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
   80784:	e005      	b.n	80792 <mmc_cmd6_set_bus_width+0x26>
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
   80786:	4b13      	ldr	r3, [pc, #76]	; (807d4 <mmc_cmd6_set_bus_width+0x68>)
   80788:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
   8078a:	e002      	b.n	80792 <mmc_cmd6_set_bus_width+0x26>
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   8078c:	4b12      	ldr	r3, [pc, #72]	; (807d8 <mmc_cmd6_set_bus_width+0x6c>)
   8078e:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
   80790:	bf00      	nop
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
   80792:	68f9      	ldr	r1, [r7, #12]
   80794:	f243 1006 	movw	r0, #12550	; 0x3106
   80798:	4b10      	ldr	r3, [pc, #64]	; (807dc <mmc_cmd6_set_bus_width+0x70>)
   8079a:	4798      	blx	r3
   8079c:	4603      	mov	r3, r0
   8079e:	f083 0301 	eor.w	r3, r3, #1
   807a2:	b2db      	uxtb	r3, r3
   807a4:	2b00      	cmp	r3, #0
   807a6:	d001      	beq.n	807ac <mmc_cmd6_set_bus_width+0x40>
		return false;
   807a8:	2300      	movs	r3, #0
   807aa:	e00d      	b.n	807c8 <mmc_cmd6_set_bus_width+0x5c>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   807ac:	4b0c      	ldr	r3, [pc, #48]	; (807e0 <mmc_cmd6_set_bus_width+0x74>)
   807ae:	4798      	blx	r3
   807b0:	4603      	mov	r3, r0
   807b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   807b6:	2b00      	cmp	r3, #0
   807b8:	d001      	beq.n	807be <mmc_cmd6_set_bus_width+0x52>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
   807ba:	2300      	movs	r3, #0
   807bc:	e004      	b.n	807c8 <mmc_cmd6_set_bus_width+0x5c>
	}
	sd_mmc_card->bus_width = bus_width;
   807be:	4b09      	ldr	r3, [pc, #36]	; (807e4 <mmc_cmd6_set_bus_width+0x78>)
   807c0:	681b      	ldr	r3, [r3, #0]
   807c2:	79fa      	ldrb	r2, [r7, #7]
   807c4:	735a      	strb	r2, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
   807c6:	2301      	movs	r3, #1
}
   807c8:	4618      	mov	r0, r3
   807ca:	3710      	adds	r7, #16
   807cc:	46bd      	mov	sp, r7
   807ce:	bd80      	pop	{r7, pc}
   807d0:	01b70200 	.word	0x01b70200
   807d4:	01b70100 	.word	0x01b70100
   807d8:	01b70000 	.word	0x01b70000
   807dc:	0008218d 	.word	0x0008218d
   807e0:	000821d1 	.word	0x000821d1
   807e4:	20070614 	.word	0x20070614

000807e8 <mmc_cmd6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
   807e8:	b580      	push	{r7, lr}
   807ea:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
   807ec:	4910      	ldr	r1, [pc, #64]	; (80830 <mmc_cmd6_set_high_speed+0x48>)
   807ee:	f243 1006 	movw	r0, #12550	; 0x3106
   807f2:	4b10      	ldr	r3, [pc, #64]	; (80834 <mmc_cmd6_set_high_speed+0x4c>)
   807f4:	4798      	blx	r3
   807f6:	4603      	mov	r3, r0
   807f8:	f083 0301 	eor.w	r3, r3, #1
   807fc:	b2db      	uxtb	r3, r3
   807fe:	2b00      	cmp	r3, #0
   80800:	d001      	beq.n	80806 <mmc_cmd6_set_high_speed+0x1e>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
   80802:	2300      	movs	r3, #0
   80804:	e011      	b.n	8082a <mmc_cmd6_set_high_speed+0x42>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   80806:	4b0c      	ldr	r3, [pc, #48]	; (80838 <mmc_cmd6_set_high_speed+0x50>)
   80808:	4798      	blx	r3
   8080a:	4603      	mov	r3, r0
   8080c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80810:	2b00      	cmp	r3, #0
   80812:	d001      	beq.n	80818 <mmc_cmd6_set_high_speed+0x30>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
   80814:	2300      	movs	r3, #0
   80816:	e008      	b.n	8082a <mmc_cmd6_set_high_speed+0x42>
	}
	sd_mmc_card->high_speed = 1;
   80818:	4b08      	ldr	r3, [pc, #32]	; (8083c <mmc_cmd6_set_high_speed+0x54>)
   8081a:	681b      	ldr	r3, [r3, #0]
   8081c:	2201      	movs	r2, #1
   8081e:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
   80820:	4b06      	ldr	r3, [pc, #24]	; (8083c <mmc_cmd6_set_high_speed+0x54>)
   80822:	681b      	ldr	r3, [r3, #0]
   80824:	4a06      	ldr	r2, [pc, #24]	; (80840 <mmc_cmd6_set_high_speed+0x58>)
   80826:	601a      	str	r2, [r3, #0]
	return true;
   80828:	2301      	movs	r3, #1
}
   8082a:	4618      	mov	r0, r3
   8082c:	bd80      	pop	{r7, pc}
   8082e:	bf00      	nop
   80830:	03b90100 	.word	0x03b90100
   80834:	0008218d 	.word	0x0008218d
   80838:	000821d1 	.word	0x000821d1
   8083c:	20070614 	.word	0x20070614
   80840:	03197500 	.word	0x03197500

00080844 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   80844:	b580      	push	{r7, lr}
   80846:	b084      	sub	sp, #16
   80848:	af00      	add	r7, sp, #0
   8084a:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   8084c:	687b      	ldr	r3, [r7, #4]
   8084e:	2200      	movs	r2, #0
   80850:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   80852:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   80856:	f245 5008 	movw	r0, #21768	; 0x5508
   8085a:	4b11      	ldr	r3, [pc, #68]	; (808a0 <sd_cmd8+0x5c>)
   8085c:	4798      	blx	r3
   8085e:	4603      	mov	r3, r0
   80860:	f083 0301 	eor.w	r3, r3, #1
   80864:	b2db      	uxtb	r3, r3
   80866:	2b00      	cmp	r3, #0
   80868:	d001      	beq.n	8086e <sd_cmd8+0x2a>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   8086a:	2301      	movs	r3, #1
   8086c:	e014      	b.n	80898 <sd_cmd8+0x54>
	}
	// Check R7 response
	resp = driver_get_response();
   8086e:	4b0d      	ldr	r3, [pc, #52]	; (808a4 <sd_cmd8+0x60>)
   80870:	4798      	blx	r3
   80872:	60f8      	str	r0, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   80874:	68fb      	ldr	r3, [r7, #12]
   80876:	f1b3 3fff 	cmp.w	r3, #4294967295
   8087a:	d101      	bne.n	80880 <sd_cmd8+0x3c>
		// No compliance R7 value
		return true; // It is not a V2
   8087c:	2301      	movs	r3, #1
   8087e:	e00b      	b.n	80898 <sd_cmd8+0x54>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   80880:	68fb      	ldr	r3, [r7, #12]
   80882:	f3c3 030b 	ubfx	r3, r3, #0, #12
   80886:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
   8088a:	d001      	beq.n	80890 <sd_cmd8+0x4c>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   8088c:	2300      	movs	r3, #0
   8088e:	e003      	b.n	80898 <sd_cmd8+0x54>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   80890:	687b      	ldr	r3, [r7, #4]
   80892:	2201      	movs	r2, #1
   80894:	701a      	strb	r2, [r3, #0]
	return true;
   80896:	2301      	movs	r3, #1
}
   80898:	4618      	mov	r0, r3
   8089a:	3710      	adds	r7, #16
   8089c:	46bd      	mov	sp, r7
   8089e:	bd80      	pop	{r7, pc}
   808a0:	0008218d 	.word	0x0008218d
   808a4:	000821d1 	.word	0x000821d1

000808a8 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   808a8:	b590      	push	{r4, r7, lr}
   808aa:	b089      	sub	sp, #36	; 0x24
   808ac:	af02      	add	r7, sp, #8
   808ae:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   808b0:	2300      	movs	r3, #0
   808b2:	9300      	str	r3, [sp, #0]
   808b4:	2301      	movs	r3, #1
   808b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   808ba:	2100      	movs	r1, #0
   808bc:	4833      	ldr	r0, [pc, #204]	; (8098c <mmc_cmd8+0xe4>)
   808be:	4c34      	ldr	r4, [pc, #208]	; (80990 <mmc_cmd8+0xe8>)
   808c0:	47a0      	blx	r4
   808c2:	4603      	mov	r3, r0
   808c4:	f083 0301 	eor.w	r3, r3, #1
   808c8:	b2db      	uxtb	r3, r3
   808ca:	2b00      	cmp	r3, #0
   808cc:	d001      	beq.n	808d2 <mmc_cmd8+0x2a>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   808ce:	2300      	movs	r3, #0
   808d0:	e058      	b.n	80984 <mmc_cmd8+0xdc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   808d2:	2300      	movs	r3, #0
   808d4:	82fb      	strh	r3, [r7, #22]
   808d6:	e00f      	b.n	808f8 <mmc_cmd8+0x50>
		if (!driver_read_word(&ext_csd)) {
   808d8:	f107 0310 	add.w	r3, r7, #16
   808dc:	4618      	mov	r0, r3
   808de:	4b2d      	ldr	r3, [pc, #180]	; (80994 <mmc_cmd8+0xec>)
   808e0:	4798      	blx	r3
   808e2:	4603      	mov	r3, r0
   808e4:	f083 0301 	eor.w	r3, r3, #1
   808e8:	b2db      	uxtb	r3, r3
   808ea:	2b00      	cmp	r3, #0
   808ec:	d001      	beq.n	808f2 <mmc_cmd8+0x4a>
			return false;
   808ee:	2300      	movs	r3, #0
   808f0:	e048      	b.n	80984 <mmc_cmd8+0xdc>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   808f2:	8afb      	ldrh	r3, [r7, #22]
   808f4:	3301      	adds	r3, #1
   808f6:	82fb      	strh	r3, [r7, #22]
   808f8:	8afb      	ldrh	r3, [r7, #22]
   808fa:	2b31      	cmp	r3, #49	; 0x31
   808fc:	d9ec      	bls.n	808d8 <mmc_cmd8+0x30>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   808fe:	693b      	ldr	r3, [r7, #16]
   80900:	b2db      	uxtb	r3, r3
   80902:	f003 0302 	and.w	r3, r3, #2
   80906:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   80908:	687b      	ldr	r3, [r7, #4]
   8090a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   8090c:	4b22      	ldr	r3, [pc, #136]	; (80998 <mmc_cmd8+0xf0>)
   8090e:	681b      	ldr	r3, [r3, #0]
   80910:	f103 000e 	add.w	r0, r3, #14
   80914:	230c      	movs	r3, #12
   80916:	223e      	movs	r2, #62	; 0x3e
   80918:	2180      	movs	r1, #128	; 0x80
   8091a:	4c20      	ldr	r4, [pc, #128]	; (8099c <mmc_cmd8+0xf4>)
   8091c:	47a0      	blx	r4
   8091e:	4602      	mov	r2, r0
   80920:	f640 73ff 	movw	r3, #4095	; 0xfff
   80924:	429a      	cmp	r2, r3
   80926:	d129      	bne.n	8097c <mmc_cmd8+0xd4>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   80928:	e00f      	b.n	8094a <mmc_cmd8+0xa2>
			if (!driver_read_word(&sec_count)) {
   8092a:	f107 030c 	add.w	r3, r7, #12
   8092e:	4618      	mov	r0, r3
   80930:	4b18      	ldr	r3, [pc, #96]	; (80994 <mmc_cmd8+0xec>)
   80932:	4798      	blx	r3
   80934:	4603      	mov	r3, r0
   80936:	f083 0301 	eor.w	r3, r3, #1
   8093a:	b2db      	uxtb	r3, r3
   8093c:	2b00      	cmp	r3, #0
   8093e:	d001      	beq.n	80944 <mmc_cmd8+0x9c>
				return false;
   80940:	2300      	movs	r3, #0
   80942:	e01f      	b.n	80984 <mmc_cmd8+0xdc>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   80944:	8afb      	ldrh	r3, [r7, #22]
   80946:	3301      	adds	r3, #1
   80948:	82fb      	strh	r3, [r7, #22]
   8094a:	8afb      	ldrh	r3, [r7, #22]
   8094c:	2b35      	cmp	r3, #53	; 0x35
   8094e:	d9ec      	bls.n	8092a <mmc_cmd8+0x82>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   80950:	4b11      	ldr	r3, [pc, #68]	; (80998 <mmc_cmd8+0xf0>)
   80952:	681b      	ldr	r3, [r3, #0]
   80954:	68fa      	ldr	r2, [r7, #12]
   80956:	0852      	lsrs	r2, r2, #1
   80958:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   8095a:	e00f      	b.n	8097c <mmc_cmd8+0xd4>
		if (!driver_read_word(&sec_count)) {
   8095c:	f107 030c 	add.w	r3, r7, #12
   80960:	4618      	mov	r0, r3
   80962:	4b0c      	ldr	r3, [pc, #48]	; (80994 <mmc_cmd8+0xec>)
   80964:	4798      	blx	r3
   80966:	4603      	mov	r3, r0
   80968:	f083 0301 	eor.w	r3, r3, #1
   8096c:	b2db      	uxtb	r3, r3
   8096e:	2b00      	cmp	r3, #0
   80970:	d001      	beq.n	80976 <mmc_cmd8+0xce>
			return false;
   80972:	2300      	movs	r3, #0
   80974:	e006      	b.n	80984 <mmc_cmd8+0xdc>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   80976:	8afb      	ldrh	r3, [r7, #22]
   80978:	3301      	adds	r3, #1
   8097a:	82fb      	strh	r3, [r7, #22]
   8097c:	8afb      	ldrh	r3, [r7, #22]
   8097e:	2b7f      	cmp	r3, #127	; 0x7f
   80980:	d9ec      	bls.n	8095c <mmc_cmd8+0xb4>
		}
	}
	return true;
   80982:	2301      	movs	r3, #1
}
   80984:	4618      	mov	r0, r3
   80986:	371c      	adds	r7, #28
   80988:	46bd      	mov	sp, r7
   8098a:	bd90      	pop	{r4, r7, pc}
   8098c:	00081108 	.word	0x00081108
   80990:	0008224d 	.word	0x0008224d
   80994:	0008237d 	.word	0x0008237d
   80998:	20070614 	.word	0x20070614
   8099c:	00080161 	.word	0x00080161

000809a0 <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
   809a0:	b580      	push	{r7, lr}
   809a2:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
   809a4:	4b0c      	ldr	r3, [pc, #48]	; (809d8 <sd_mmc_cmd9_mci+0x38>)
   809a6:	681b      	ldr	r3, [r3, #0]
   809a8:	891b      	ldrh	r3, [r3, #8]
   809aa:	041b      	lsls	r3, r3, #16
   809ac:	4619      	mov	r1, r3
   809ae:	f641 3009 	movw	r0, #6921	; 0x1b09
   809b2:	4b0a      	ldr	r3, [pc, #40]	; (809dc <sd_mmc_cmd9_mci+0x3c>)
   809b4:	4798      	blx	r3
   809b6:	4603      	mov	r3, r0
   809b8:	f083 0301 	eor.w	r3, r3, #1
   809bc:	b2db      	uxtb	r3, r3
   809be:	2b00      	cmp	r3, #0
   809c0:	d001      	beq.n	809c6 <sd_mmc_cmd9_mci+0x26>
		return false;
   809c2:	2300      	movs	r3, #0
   809c4:	e006      	b.n	809d4 <sd_mmc_cmd9_mci+0x34>
	}
	driver_get_response_128(sd_mmc_card->csd);
   809c6:	4b04      	ldr	r3, [pc, #16]	; (809d8 <sd_mmc_cmd9_mci+0x38>)
   809c8:	681b      	ldr	r3, [r3, #0]
   809ca:	330e      	adds	r3, #14
   809cc:	4618      	mov	r0, r3
   809ce:	4b04      	ldr	r3, [pc, #16]	; (809e0 <sd_mmc_cmd9_mci+0x40>)
   809d0:	4798      	blx	r3
	return true;
   809d2:	2301      	movs	r3, #1
}
   809d4:	4618      	mov	r0, r3
   809d6:	bd80      	pop	{r7, pc}
   809d8:	20070614 	.word	0x20070614
   809dc:	0008218d 	.word	0x0008218d
   809e0:	000821e3 	.word	0x000821e3

000809e4 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   809e4:	b5b0      	push	{r4, r5, r7, lr}
   809e6:	b084      	sub	sp, #16
   809e8:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   809ea:	4b48      	ldr	r3, [pc, #288]	; (80b0c <mmc_decode_csd+0x128>)
   809ec:	681b      	ldr	r3, [r3, #0]
   809ee:	f103 000e 	add.w	r0, r3, #14
   809f2:	2304      	movs	r3, #4
   809f4:	227a      	movs	r2, #122	; 0x7a
   809f6:	2180      	movs	r1, #128	; 0x80
   809f8:	4c45      	ldr	r4, [pc, #276]	; (80b10 <mmc_decode_csd+0x12c>)
   809fa:	47a0      	blx	r4
   809fc:	4603      	mov	r3, r0
   809fe:	3b01      	subs	r3, #1
   80a00:	2b03      	cmp	r3, #3
   80a02:	d80b      	bhi.n	80a1c <mmc_decode_csd+0x38>
   80a04:	a201      	add	r2, pc, #4	; (adr r2, 80a0c <mmc_decode_csd+0x28>)
   80a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a0a:	bf00      	nop
   80a0c:	00080a27 	.word	0x00080a27
   80a10:	00080a31 	.word	0x00080a31
   80a14:	00080a3b 	.word	0x00080a3b
   80a18:	00080a45 	.word	0x00080a45
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   80a1c:	4b3b      	ldr	r3, [pc, #236]	; (80b0c <mmc_decode_csd+0x128>)
   80a1e:	681b      	ldr	r3, [r3, #0]
   80a20:	2212      	movs	r2, #18
   80a22:	731a      	strb	r2, [r3, #12]
		break;
   80a24:	e013      	b.n	80a4e <mmc_decode_csd+0x6a>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   80a26:	4b39      	ldr	r3, [pc, #228]	; (80b0c <mmc_decode_csd+0x128>)
   80a28:	681b      	ldr	r3, [r3, #0]
   80a2a:	2214      	movs	r2, #20
   80a2c:	731a      	strb	r2, [r3, #12]
		break;
   80a2e:	e00e      	b.n	80a4e <mmc_decode_csd+0x6a>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   80a30:	4b36      	ldr	r3, [pc, #216]	; (80b0c <mmc_decode_csd+0x128>)
   80a32:	681b      	ldr	r3, [r3, #0]
   80a34:	2222      	movs	r2, #34	; 0x22
   80a36:	731a      	strb	r2, [r3, #12]
		break;
   80a38:	e009      	b.n	80a4e <mmc_decode_csd+0x6a>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   80a3a:	4b34      	ldr	r3, [pc, #208]	; (80b0c <mmc_decode_csd+0x128>)
   80a3c:	681b      	ldr	r3, [r3, #0]
   80a3e:	2230      	movs	r2, #48	; 0x30
   80a40:	731a      	strb	r2, [r3, #12]
		break;
   80a42:	e004      	b.n	80a4e <mmc_decode_csd+0x6a>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   80a44:	4b31      	ldr	r3, [pc, #196]	; (80b0c <mmc_decode_csd+0x128>)
   80a46:	681b      	ldr	r3, [r3, #0]
   80a48:	2240      	movs	r2, #64	; 0x40
   80a4a:	731a      	strb	r2, [r3, #12]
		break;
   80a4c:	bf00      	nop
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   80a4e:	4b2f      	ldr	r3, [pc, #188]	; (80b0c <mmc_decode_csd+0x128>)
   80a50:	681b      	ldr	r3, [r3, #0]
   80a52:	f103 000e 	add.w	r0, r3, #14
   80a56:	2308      	movs	r3, #8
   80a58:	2260      	movs	r2, #96	; 0x60
   80a5a:	2180      	movs	r1, #128	; 0x80
   80a5c:	4c2c      	ldr	r4, [pc, #176]	; (80b10 <mmc_decode_csd+0x12c>)
   80a5e:	47a0      	blx	r4
   80a60:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   80a62:	68fb      	ldr	r3, [r7, #12]
   80a64:	f003 0307 	and.w	r3, r3, #7
   80a68:	4a2a      	ldr	r2, [pc, #168]	; (80b14 <mmc_decode_csd+0x130>)
   80a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80a6e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   80a70:	68fb      	ldr	r3, [r7, #12]
   80a72:	08db      	lsrs	r3, r3, #3
   80a74:	f003 030f 	and.w	r3, r3, #15
   80a78:	4a27      	ldr	r2, [pc, #156]	; (80b18 <mmc_decode_csd+0x134>)
   80a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80a7e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   80a80:	4b22      	ldr	r3, [pc, #136]	; (80b0c <mmc_decode_csd+0x128>)
   80a82:	681b      	ldr	r3, [r3, #0]
   80a84:	68ba      	ldr	r2, [r7, #8]
   80a86:	6879      	ldr	r1, [r7, #4]
   80a88:	fb01 f202 	mul.w	r2, r1, r2
   80a8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   80a90:	fb01 f202 	mul.w	r2, r1, r2
   80a94:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   80a96:	4b1d      	ldr	r3, [pc, #116]	; (80b0c <mmc_decode_csd+0x128>)
   80a98:	681b      	ldr	r3, [r3, #0]
   80a9a:	f103 000e 	add.w	r0, r3, #14
   80a9e:	230c      	movs	r3, #12
   80aa0:	223e      	movs	r2, #62	; 0x3e
   80aa2:	2180      	movs	r1, #128	; 0x80
   80aa4:	4c1a      	ldr	r4, [pc, #104]	; (80b10 <mmc_decode_csd+0x12c>)
   80aa6:	47a0      	blx	r4
   80aa8:	4602      	mov	r2, r0
   80aaa:	f640 73ff 	movw	r3, #4095	; 0xfff
   80aae:	429a      	cmp	r2, r3
   80ab0:	d028      	beq.n	80b04 <mmc_decode_csd+0x120>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   80ab2:	4b16      	ldr	r3, [pc, #88]	; (80b0c <mmc_decode_csd+0x128>)
   80ab4:	681b      	ldr	r3, [r3, #0]
   80ab6:	f103 000e 	add.w	r0, r3, #14
   80aba:	230c      	movs	r3, #12
   80abc:	223e      	movs	r2, #62	; 0x3e
   80abe:	2180      	movs	r1, #128	; 0x80
   80ac0:	4c13      	ldr	r4, [pc, #76]	; (80b10 <mmc_decode_csd+0x12c>)
   80ac2:	47a0      	blx	r4
   80ac4:	4603      	mov	r3, r0
   80ac6:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80ac8:	4b10      	ldr	r3, [pc, #64]	; (80b0c <mmc_decode_csd+0x128>)
   80aca:	681b      	ldr	r3, [r3, #0]
   80acc:	f103 000e 	add.w	r0, r3, #14
   80ad0:	2303      	movs	r3, #3
   80ad2:	222f      	movs	r2, #47	; 0x2f
   80ad4:	2180      	movs	r1, #128	; 0x80
   80ad6:	4d0e      	ldr	r5, [pc, #56]	; (80b10 <mmc_decode_csd+0x12c>)
   80ad8:	47a8      	blx	r5
   80ada:	4603      	mov	r3, r0
   80adc:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   80ade:	fa04 f303 	lsl.w	r3, r4, r3
   80ae2:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   80ae4:	4b09      	ldr	r3, [pc, #36]	; (80b0c <mmc_decode_csd+0x128>)
   80ae6:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   80ae8:	4b08      	ldr	r3, [pc, #32]	; (80b0c <mmc_decode_csd+0x128>)
   80aea:	681b      	ldr	r3, [r3, #0]
   80aec:	f103 000e 	add.w	r0, r3, #14
   80af0:	2304      	movs	r3, #4
   80af2:	2250      	movs	r2, #80	; 0x50
   80af4:	2180      	movs	r1, #128	; 0x80
   80af6:	4d06      	ldr	r5, [pc, #24]	; (80b10 <mmc_decode_csd+0x12c>)
   80af8:	47a8      	blx	r5
   80afa:	4602      	mov	r2, r0
		sd_mmc_card->capacity = blocknr *
   80afc:	683b      	ldr	r3, [r7, #0]
   80afe:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   80b00:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   80b02:	6063      	str	r3, [r4, #4]
	}
}
   80b04:	bf00      	nop
   80b06:	3710      	adds	r7, #16
   80b08:	46bd      	mov	sp, r7
   80b0a:	bdb0      	pop	{r4, r5, r7, pc}
   80b0c:	20070614 	.word	0x20070614
   80b10:	00080161 	.word	0x00080161
   80b14:	00087700 	.word	0x00087700
   80b18:	0008775c 	.word	0x0008775c

00080b1c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   80b1c:	b5b0      	push	{r4, r5, r7, lr}
   80b1e:	b084      	sub	sp, #16
   80b20:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   80b22:	4b36      	ldr	r3, [pc, #216]	; (80bfc <sd_decode_csd+0xe0>)
   80b24:	681b      	ldr	r3, [r3, #0]
   80b26:	f103 000e 	add.w	r0, r3, #14
   80b2a:	2308      	movs	r3, #8
   80b2c:	2260      	movs	r2, #96	; 0x60
   80b2e:	2180      	movs	r1, #128	; 0x80
   80b30:	4c33      	ldr	r4, [pc, #204]	; (80c00 <sd_decode_csd+0xe4>)
   80b32:	47a0      	blx	r4
   80b34:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   80b36:	68fb      	ldr	r3, [r7, #12]
   80b38:	f003 0307 	and.w	r3, r3, #7
   80b3c:	4a31      	ldr	r2, [pc, #196]	; (80c04 <sd_decode_csd+0xe8>)
   80b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80b42:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   80b44:	68fb      	ldr	r3, [r7, #12]
   80b46:	08db      	lsrs	r3, r3, #3
   80b48:	f003 030f 	and.w	r3, r3, #15
   80b4c:	4a2e      	ldr	r2, [pc, #184]	; (80c08 <sd_decode_csd+0xec>)
   80b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80b52:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   80b54:	4b29      	ldr	r3, [pc, #164]	; (80bfc <sd_decode_csd+0xe0>)
   80b56:	681b      	ldr	r3, [r3, #0]
   80b58:	68ba      	ldr	r2, [r7, #8]
   80b5a:	6879      	ldr	r1, [r7, #4]
   80b5c:	fb01 f202 	mul.w	r2, r1, r2
   80b60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   80b64:	fb01 f202 	mul.w	r2, r1, r2
   80b68:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   80b6a:	4b24      	ldr	r3, [pc, #144]	; (80bfc <sd_decode_csd+0xe0>)
   80b6c:	681b      	ldr	r3, [r3, #0]
   80b6e:	f103 000e 	add.w	r0, r3, #14
   80b72:	2302      	movs	r3, #2
   80b74:	227e      	movs	r2, #126	; 0x7e
   80b76:	2180      	movs	r1, #128	; 0x80
   80b78:	4c21      	ldr	r4, [pc, #132]	; (80c00 <sd_decode_csd+0xe4>)
   80b7a:	47a0      	blx	r4
   80b7c:	4603      	mov	r3, r0
   80b7e:	2b00      	cmp	r3, #0
   80b80:	d00f      	beq.n	80ba2 <sd_decode_csd+0x86>
		sd_mmc_card->capacity =
   80b82:	4b1e      	ldr	r3, [pc, #120]	; (80bfc <sd_decode_csd+0xe0>)
   80b84:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   80b86:	4b1d      	ldr	r3, [pc, #116]	; (80bfc <sd_decode_csd+0xe0>)
   80b88:	681b      	ldr	r3, [r3, #0]
   80b8a:	f103 000e 	add.w	r0, r3, #14
   80b8e:	2316      	movs	r3, #22
   80b90:	2230      	movs	r2, #48	; 0x30
   80b92:	2180      	movs	r1, #128	; 0x80
   80b94:	4d1a      	ldr	r5, [pc, #104]	; (80c00 <sd_decode_csd+0xe4>)
   80b96:	47a8      	blx	r5
   80b98:	4603      	mov	r3, r0
				* 512;
   80b9a:	3301      	adds	r3, #1
   80b9c:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   80b9e:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   80ba0:	e028      	b.n	80bf4 <sd_decode_csd+0xd8>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80ba2:	4b16      	ldr	r3, [pc, #88]	; (80bfc <sd_decode_csd+0xe0>)
   80ba4:	681b      	ldr	r3, [r3, #0]
   80ba6:	f103 000e 	add.w	r0, r3, #14
   80baa:	230c      	movs	r3, #12
   80bac:	223e      	movs	r2, #62	; 0x3e
   80bae:	2180      	movs	r1, #128	; 0x80
   80bb0:	4c13      	ldr	r4, [pc, #76]	; (80c00 <sd_decode_csd+0xe4>)
   80bb2:	47a0      	blx	r4
   80bb4:	4603      	mov	r3, r0
   80bb6:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80bb8:	4b10      	ldr	r3, [pc, #64]	; (80bfc <sd_decode_csd+0xe0>)
   80bba:	681b      	ldr	r3, [r3, #0]
   80bbc:	f103 000e 	add.w	r0, r3, #14
   80bc0:	2303      	movs	r3, #3
   80bc2:	222f      	movs	r2, #47	; 0x2f
   80bc4:	2180      	movs	r1, #128	; 0x80
   80bc6:	4d0e      	ldr	r5, [pc, #56]	; (80c00 <sd_decode_csd+0xe4>)
   80bc8:	47a8      	blx	r5
   80bca:	4603      	mov	r3, r0
   80bcc:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80bce:	fa04 f303 	lsl.w	r3, r4, r3
   80bd2:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   80bd4:	4b09      	ldr	r3, [pc, #36]	; (80bfc <sd_decode_csd+0xe0>)
   80bd6:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   80bd8:	4b08      	ldr	r3, [pc, #32]	; (80bfc <sd_decode_csd+0xe0>)
   80bda:	681b      	ldr	r3, [r3, #0]
   80bdc:	f103 000e 	add.w	r0, r3, #14
   80be0:	2304      	movs	r3, #4
   80be2:	2250      	movs	r2, #80	; 0x50
   80be4:	2180      	movs	r1, #128	; 0x80
   80be6:	4d06      	ldr	r5, [pc, #24]	; (80c00 <sd_decode_csd+0xe4>)
   80be8:	47a8      	blx	r5
   80bea:	4602      	mov	r2, r0
		sd_mmc_card->capacity = blocknr *
   80bec:	683b      	ldr	r3, [r7, #0]
   80bee:	4093      	lsls	r3, r2
				/ 1024;
   80bf0:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   80bf2:	6063      	str	r3, [r4, #4]
}
   80bf4:	bf00      	nop
   80bf6:	3710      	adds	r7, #16
   80bf8:	46bd      	mov	sp, r7
   80bfa:	bdb0      	pop	{r4, r5, r7, pc}
   80bfc:	20070614 	.word	0x20070614
   80c00:	00080161 	.word	0x00080161
   80c04:	00087700 	.word	0x00087700
   80c08:	0008771c 	.word	0x0008771c

00080c0c <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   80c0c:	b580      	push	{r7, lr}
   80c0e:	b082      	sub	sp, #8
   80c10:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   80c12:	4b13      	ldr	r3, [pc, #76]	; (80c60 <sd_mmc_cmd13+0x54>)
   80c14:	607b      	str	r3, [r7, #4]
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   80c16:	4b13      	ldr	r3, [pc, #76]	; (80c64 <sd_mmc_cmd13+0x58>)
   80c18:	681b      	ldr	r3, [r3, #0]
   80c1a:	891b      	ldrh	r3, [r3, #8]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   80c1c:	041b      	lsls	r3, r3, #16
   80c1e:	4619      	mov	r1, r3
   80c20:	f241 100d 	movw	r0, #4365	; 0x110d
   80c24:	4b10      	ldr	r3, [pc, #64]	; (80c68 <sd_mmc_cmd13+0x5c>)
   80c26:	4798      	blx	r3
   80c28:	4603      	mov	r3, r0
   80c2a:	f083 0301 	eor.w	r3, r3, #1
   80c2e:	b2db      	uxtb	r3, r3
   80c30:	2b00      	cmp	r3, #0
   80c32:	d001      	beq.n	80c38 <sd_mmc_cmd13+0x2c>
				return false;
   80c34:	2300      	movs	r3, #0
   80c36:	e00f      	b.n	80c58 <sd_mmc_cmd13+0x4c>
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   80c38:	4b0c      	ldr	r3, [pc, #48]	; (80c6c <sd_mmc_cmd13+0x60>)
   80c3a:	4798      	blx	r3
   80c3c:	4603      	mov	r3, r0
   80c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   80c42:	2b00      	cmp	r3, #0
   80c44:	d106      	bne.n	80c54 <sd_mmc_cmd13+0x48>
				break;
			}
		}
		if (nec_timeout-- == 0) {
   80c46:	687b      	ldr	r3, [r7, #4]
   80c48:	1e5a      	subs	r2, r3, #1
   80c4a:	607a      	str	r2, [r7, #4]
   80c4c:	2b00      	cmp	r3, #0
   80c4e:	d1e2      	bne.n	80c16 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   80c50:	2300      	movs	r3, #0
   80c52:	e001      	b.n	80c58 <sd_mmc_cmd13+0x4c>
				break;
   80c54:	bf00      	nop
		}
	} while (1);

	return true;
   80c56:	2301      	movs	r3, #1
}
   80c58:	4618      	mov	r0, r3
   80c5a:	3708      	adds	r7, #8
   80c5c:	46bd      	mov	sp, r7
   80c5e:	bd80      	pop	{r7, pc}
   80c60:	00030d40 	.word	0x00030d40
   80c64:	20070614 	.word	0x20070614
   80c68:	0008218d 	.word	0x0008218d
   80c6c:	000821d1 	.word	0x000821d1

00080c70 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
   80c70:	b580      	push	{r7, lr}
   80c72:	b082      	sub	sp, #8
   80c74:	af00      	add	r7, sp, #0
   80c76:	603a      	str	r2, [r7, #0]
   80c78:	461a      	mov	r2, r3
   80c7a:	4603      	mov	r3, r0
   80c7c:	71fb      	strb	r3, [r7, #7]
   80c7e:	460b      	mov	r3, r1
   80c80:	71bb      	strb	r3, [r7, #6]
   80c82:	4613      	mov	r3, r2
   80c84:	717b      	strb	r3, [r7, #5]
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
   80c86:	693b      	ldr	r3, [r7, #16]
   80c88:	781b      	ldrb	r3, [r3, #0]
   80c8a:	461a      	mov	r2, r3
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
   80c8c:	79fb      	ldrb	r3, [r7, #7]
   80c8e:	07db      	lsls	r3, r3, #31
   80c90:	431a      	orrs	r2, r3
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
   80c92:	79bb      	ldrb	r3, [r7, #6]
   80c94:	071b      	lsls	r3, r3, #28
   80c96:	431a      	orrs	r2, r3
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
   80c98:	797b      	ldrb	r3, [r7, #5]
   80c9a:	06db      	lsls	r3, r3, #27
   80c9c:	431a      	orrs	r2, r3
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
   80c9e:	683b      	ldr	r3, [r7, #0]
   80ca0:	025b      	lsls	r3, r3, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
   80ca2:	4313      	orrs	r3, r2
   80ca4:	4619      	mov	r1, r3
   80ca6:	f241 3034 	movw	r0, #4916	; 0x1334
   80caa:	4b0a      	ldr	r3, [pc, #40]	; (80cd4 <sdio_cmd52+0x64>)
   80cac:	4798      	blx	r3
   80cae:	4603      	mov	r3, r0
   80cb0:	f083 0301 	eor.w	r3, r3, #1
   80cb4:	b2db      	uxtb	r3, r3
   80cb6:	2b00      	cmp	r3, #0
   80cb8:	d001      	beq.n	80cbe <sdio_cmd52+0x4e>
		return false;
   80cba:	2300      	movs	r3, #0
   80cbc:	e006      	b.n	80ccc <sdio_cmd52+0x5c>
	}
	*io_data = driver_get_response() & 0xFF;
   80cbe:	4b06      	ldr	r3, [pc, #24]	; (80cd8 <sdio_cmd52+0x68>)
   80cc0:	4798      	blx	r3
   80cc2:	4603      	mov	r3, r0
   80cc4:	b2da      	uxtb	r2, r3
   80cc6:	693b      	ldr	r3, [r7, #16]
   80cc8:	701a      	strb	r2, [r3, #0]
	return true;
   80cca:	2301      	movs	r3, #1
}
   80ccc:	4618      	mov	r0, r3
   80cce:	3708      	adds	r7, #8
   80cd0:	46bd      	mov	sp, r7
   80cd2:	bd80      	pop	{r7, pc}
   80cd4:	0008218d 	.word	0x0008218d
   80cd8:	000821d1 	.word	0x000821d1

00080cdc <sd_acmd6>:
 * \brief ACMD6 - Define the data bus width to 4 bits bus
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd6(void)
{
   80cdc:	b580      	push	{r7, lr}
   80cde:	af00      	add	r7, sp, #0
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80ce0:	4b12      	ldr	r3, [pc, #72]	; (80d2c <sd_acmd6+0x50>)
   80ce2:	681b      	ldr	r3, [r3, #0]
   80ce4:	891b      	ldrh	r3, [r3, #8]
   80ce6:	041b      	lsls	r3, r3, #16
   80ce8:	4619      	mov	r1, r3
   80cea:	f241 1037 	movw	r0, #4407	; 0x1137
   80cee:	4b10      	ldr	r3, [pc, #64]	; (80d30 <sd_acmd6+0x54>)
   80cf0:	4798      	blx	r3
   80cf2:	4603      	mov	r3, r0
   80cf4:	f083 0301 	eor.w	r3, r3, #1
   80cf8:	b2db      	uxtb	r3, r3
   80cfa:	2b00      	cmp	r3, #0
   80cfc:	d001      	beq.n	80d02 <sd_acmd6+0x26>
		return false;
   80cfe:	2300      	movs	r3, #0
   80d00:	e011      	b.n	80d26 <sd_acmd6+0x4a>
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
   80d02:	2102      	movs	r1, #2
   80d04:	f241 1006 	movw	r0, #4358	; 0x1106
   80d08:	4b09      	ldr	r3, [pc, #36]	; (80d30 <sd_acmd6+0x54>)
   80d0a:	4798      	blx	r3
   80d0c:	4603      	mov	r3, r0
   80d0e:	f083 0301 	eor.w	r3, r3, #1
   80d12:	b2db      	uxtb	r3, r3
   80d14:	2b00      	cmp	r3, #0
   80d16:	d001      	beq.n	80d1c <sd_acmd6+0x40>
		return false;
   80d18:	2300      	movs	r3, #0
   80d1a:	e004      	b.n	80d26 <sd_acmd6+0x4a>
	}
	sd_mmc_card->bus_width = 4;
   80d1c:	4b03      	ldr	r3, [pc, #12]	; (80d2c <sd_acmd6+0x50>)
   80d1e:	681b      	ldr	r3, [r3, #0]
   80d20:	2204      	movs	r2, #4
   80d22:	735a      	strb	r2, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
   80d24:	2301      	movs	r3, #1
}
   80d26:	4618      	mov	r0, r3
   80d28:	bd80      	pop	{r7, pc}
   80d2a:	bf00      	nop
   80d2c:	20070614 	.word	0x20070614
   80d30:	0008218d 	.word	0x0008218d

00080d34 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   80d34:	b590      	push	{r4, r7, lr}
   80d36:	b085      	sub	sp, #20
   80d38:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80d3a:	4b36      	ldr	r3, [pc, #216]	; (80e14 <sd_acmd51+0xe0>)
   80d3c:	681b      	ldr	r3, [r3, #0]
   80d3e:	891b      	ldrh	r3, [r3, #8]
   80d40:	041b      	lsls	r3, r3, #16
   80d42:	4619      	mov	r1, r3
   80d44:	f241 1037 	movw	r0, #4407	; 0x1137
   80d48:	4b33      	ldr	r3, [pc, #204]	; (80e18 <sd_acmd51+0xe4>)
   80d4a:	4798      	blx	r3
   80d4c:	4603      	mov	r3, r0
   80d4e:	f083 0301 	eor.w	r3, r3, #1
   80d52:	b2db      	uxtb	r3, r3
   80d54:	2b00      	cmp	r3, #0
   80d56:	d001      	beq.n	80d5c <sd_acmd51+0x28>
		return false;
   80d58:	2300      	movs	r3, #0
   80d5a:	e057      	b.n	80e0c <sd_acmd51+0xd8>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   80d5c:	2301      	movs	r3, #1
   80d5e:	9300      	str	r3, [sp, #0]
   80d60:	2301      	movs	r3, #1
   80d62:	2208      	movs	r2, #8
   80d64:	2100      	movs	r1, #0
   80d66:	482d      	ldr	r0, [pc, #180]	; (80e1c <sd_acmd51+0xe8>)
   80d68:	4c2d      	ldr	r4, [pc, #180]	; (80e20 <sd_acmd51+0xec>)
   80d6a:	47a0      	blx	r4
   80d6c:	4603      	mov	r3, r0
   80d6e:	f083 0301 	eor.w	r3, r3, #1
   80d72:	b2db      	uxtb	r3, r3
   80d74:	2b00      	cmp	r3, #0
   80d76:	d001      	beq.n	80d7c <sd_acmd51+0x48>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   80d78:	2300      	movs	r3, #0
   80d7a:	e047      	b.n	80e0c <sd_acmd51+0xd8>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   80d7c:	463b      	mov	r3, r7
   80d7e:	2101      	movs	r1, #1
   80d80:	4618      	mov	r0, r3
   80d82:	4b28      	ldr	r3, [pc, #160]	; (80e24 <sd_acmd51+0xf0>)
   80d84:	4798      	blx	r3
   80d86:	4603      	mov	r3, r0
   80d88:	f083 0301 	eor.w	r3, r3, #1
   80d8c:	b2db      	uxtb	r3, r3
   80d8e:	2b00      	cmp	r3, #0
   80d90:	d001      	beq.n	80d96 <sd_acmd51+0x62>
		return false;
   80d92:	2300      	movs	r3, #0
   80d94:	e03a      	b.n	80e0c <sd_acmd51+0xd8>
	}
	if (!driver_wait_end_of_read_blocks()) {
   80d96:	4b24      	ldr	r3, [pc, #144]	; (80e28 <sd_acmd51+0xf4>)
   80d98:	4798      	blx	r3
   80d9a:	4603      	mov	r3, r0
   80d9c:	f083 0301 	eor.w	r3, r3, #1
   80da0:	b2db      	uxtb	r3, r3
   80da2:	2b00      	cmp	r3, #0
   80da4:	d001      	beq.n	80daa <sd_acmd51+0x76>
		return false;
   80da6:	2300      	movs	r3, #0
   80da8:	e030      	b.n	80e0c <sd_acmd51+0xd8>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   80daa:	4638      	mov	r0, r7
   80dac:	2304      	movs	r3, #4
   80dae:	2238      	movs	r2, #56	; 0x38
   80db0:	2140      	movs	r1, #64	; 0x40
   80db2:	4c1e      	ldr	r4, [pc, #120]	; (80e2c <sd_acmd51+0xf8>)
   80db4:	47a0      	blx	r4
   80db6:	4603      	mov	r3, r0
   80db8:	2b01      	cmp	r3, #1
   80dba:	d009      	beq.n	80dd0 <sd_acmd51+0x9c>
   80dbc:	2b01      	cmp	r3, #1
   80dbe:	d302      	bcc.n	80dc6 <sd_acmd51+0x92>
   80dc0:	2b02      	cmp	r3, #2
   80dc2:	d00a      	beq.n	80dda <sd_acmd51+0xa6>
   80dc4:	e01c      	b.n	80e00 <sd_acmd51+0xcc>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80dc6:	4b13      	ldr	r3, [pc, #76]	; (80e14 <sd_acmd51+0xe0>)
   80dc8:	681b      	ldr	r3, [r3, #0]
   80dca:	2210      	movs	r2, #16
   80dcc:	731a      	strb	r2, [r3, #12]
		break;
   80dce:	e01c      	b.n	80e0a <sd_acmd51+0xd6>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   80dd0:	4b10      	ldr	r3, [pc, #64]	; (80e14 <sd_acmd51+0xe0>)
   80dd2:	681b      	ldr	r3, [r3, #0]
   80dd4:	221a      	movs	r2, #26
   80dd6:	731a      	strb	r2, [r3, #12]
		break;
   80dd8:	e017      	b.n	80e0a <sd_acmd51+0xd6>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   80dda:	4638      	mov	r0, r7
   80ddc:	2301      	movs	r3, #1
   80dde:	222f      	movs	r2, #47	; 0x2f
   80de0:	2140      	movs	r1, #64	; 0x40
   80de2:	4c12      	ldr	r4, [pc, #72]	; (80e2c <sd_acmd51+0xf8>)
   80de4:	47a0      	blx	r4
   80de6:	4603      	mov	r3, r0
   80de8:	2b01      	cmp	r3, #1
   80dea:	d104      	bne.n	80df6 <sd_acmd51+0xc2>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   80dec:	4b09      	ldr	r3, [pc, #36]	; (80e14 <sd_acmd51+0xe0>)
   80dee:	681b      	ldr	r3, [r3, #0]
   80df0:	2230      	movs	r2, #48	; 0x30
   80df2:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   80df4:	e009      	b.n	80e0a <sd_acmd51+0xd6>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   80df6:	4b07      	ldr	r3, [pc, #28]	; (80e14 <sd_acmd51+0xe0>)
   80df8:	681b      	ldr	r3, [r3, #0]
   80dfa:	2220      	movs	r2, #32
   80dfc:	731a      	strb	r2, [r3, #12]
		break;
   80dfe:	e004      	b.n	80e0a <sd_acmd51+0xd6>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80e00:	4b04      	ldr	r3, [pc, #16]	; (80e14 <sd_acmd51+0xe0>)
   80e02:	681b      	ldr	r3, [r3, #0]
   80e04:	2210      	movs	r2, #16
   80e06:	731a      	strb	r2, [r3, #12]
		break;
   80e08:	bf00      	nop
	}
	return true;
   80e0a:	2301      	movs	r3, #1
}
   80e0c:	4618      	mov	r0, r3
   80e0e:	370c      	adds	r7, #12
   80e10:	46bd      	mov	sp, r7
   80e12:	bd90      	pop	{r4, r7, pc}
   80e14:	20070614 	.word	0x20070614
   80e18:	0008218d 	.word	0x0008218d
   80e1c:	00081133 	.word	0x00081133
   80e20:	0008224d 	.word	0x0008224d
   80e24:	00082419 	.word	0x00082419
   80e28:	00082501 	.word	0x00082501
   80e2c:	00080161 	.word	0x00080161

00080e30 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   80e30:	b580      	push	{r7, lr}
   80e32:	b082      	sub	sp, #8
   80e34:	af00      	add	r7, sp, #0
   80e36:	4603      	mov	r3, r0
   80e38:	71fb      	strb	r3, [r7, #7]
	if (slot >= SD_MMC_MEM_CNT) {
   80e3a:	79fb      	ldrb	r3, [r7, #7]
   80e3c:	2b00      	cmp	r3, #0
   80e3e:	d001      	beq.n	80e44 <sd_mmc_select_slot+0x14>
		return SD_MMC_ERR_SLOT;
   80e40:	2304      	movs	r3, #4
   80e42:	e040      	b.n	80ec6 <sd_mmc_select_slot+0x96>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   80e44:	79fb      	ldrb	r3, [r7, #7]
   80e46:	4a22      	ldr	r2, [pc, #136]	; (80ed0 <sd_mmc_select_slot+0xa0>)
   80e48:	015b      	lsls	r3, r3, #5
   80e4a:	4413      	add	r3, r2
   80e4c:	330a      	adds	r3, #10
   80e4e:	781b      	ldrb	r3, [r3, #0]
   80e50:	2b04      	cmp	r3, #4
   80e52:	d007      	beq.n	80e64 <sd_mmc_select_slot+0x34>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   80e54:	79fb      	ldrb	r3, [r7, #7]
   80e56:	4a1e      	ldr	r2, [pc, #120]	; (80ed0 <sd_mmc_select_slot+0xa0>)
   80e58:	015b      	lsls	r3, r3, #5
   80e5a:	4413      	add	r3, r2
   80e5c:	330a      	adds	r3, #10
   80e5e:	781b      	ldrb	r3, [r3, #0]
   80e60:	2b03      	cmp	r3, #3
   80e62:	d11a      	bne.n	80e9a <sd_mmc_select_slot+0x6a>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   80e64:	79fb      	ldrb	r3, [r7, #7]
   80e66:	4a1a      	ldr	r2, [pc, #104]	; (80ed0 <sd_mmc_select_slot+0xa0>)
   80e68:	015b      	lsls	r3, r3, #5
   80e6a:	4413      	add	r3, r2
   80e6c:	330a      	adds	r3, #10
   80e6e:	2202      	movs	r2, #2
   80e70:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   80e72:	79fb      	ldrb	r3, [r7, #7]
   80e74:	4a16      	ldr	r2, [pc, #88]	; (80ed0 <sd_mmc_select_slot+0xa0>)
   80e76:	015b      	lsls	r3, r3, #5
   80e78:	4413      	add	r3, r2
   80e7a:	4a16      	ldr	r2, [pc, #88]	; (80ed4 <sd_mmc_select_slot+0xa4>)
   80e7c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
   80e7e:	79fb      	ldrb	r3, [r7, #7]
   80e80:	4a13      	ldr	r2, [pc, #76]	; (80ed0 <sd_mmc_select_slot+0xa0>)
   80e82:	015b      	lsls	r3, r3, #5
   80e84:	4413      	add	r3, r2
   80e86:	330d      	adds	r3, #13
   80e88:	2201      	movs	r2, #1
   80e8a:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   80e8c:	79fb      	ldrb	r3, [r7, #7]
   80e8e:	4a10      	ldr	r2, [pc, #64]	; (80ed0 <sd_mmc_select_slot+0xa0>)
   80e90:	015b      	lsls	r3, r3, #5
   80e92:	4413      	add	r3, r2
   80e94:	331e      	adds	r3, #30
   80e96:	2200      	movs	r2, #0
   80e98:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   80e9a:	4a0f      	ldr	r2, [pc, #60]	; (80ed8 <sd_mmc_select_slot+0xa8>)
   80e9c:	79fb      	ldrb	r3, [r7, #7]
   80e9e:	7013      	strb	r3, [r2, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   80ea0:	79fb      	ldrb	r3, [r7, #7]
   80ea2:	015b      	lsls	r3, r3, #5
   80ea4:	4a0a      	ldr	r2, [pc, #40]	; (80ed0 <sd_mmc_select_slot+0xa0>)
   80ea6:	4413      	add	r3, r2
   80ea8:	4a0c      	ldr	r2, [pc, #48]	; (80edc <sd_mmc_select_slot+0xac>)
   80eaa:	6013      	str	r3, [r2, #0]
	sd_mmc_configure_slot();
   80eac:	4b0c      	ldr	r3, [pc, #48]	; (80ee0 <sd_mmc_select_slot+0xb0>)
   80eae:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   80eb0:	79fb      	ldrb	r3, [r7, #7]
   80eb2:	4a07      	ldr	r2, [pc, #28]	; (80ed0 <sd_mmc_select_slot+0xa0>)
   80eb4:	015b      	lsls	r3, r3, #5
   80eb6:	4413      	add	r3, r2
   80eb8:	330a      	adds	r3, #10
   80eba:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   80ebc:	2b02      	cmp	r3, #2
   80ebe:	bf0c      	ite	eq
   80ec0:	2301      	moveq	r3, #1
   80ec2:	2300      	movne	r3, #0
   80ec4:	b2db      	uxtb	r3, r3
}
   80ec6:	4618      	mov	r0, r3
   80ec8:	3708      	adds	r7, #8
   80eca:	46bd      	mov	sp, r7
   80ecc:	bd80      	pop	{r7, pc}
   80ece:	bf00      	nop
   80ed0:	200705f0 	.word	0x200705f0
   80ed4:	00061a80 	.word	0x00061a80
   80ed8:	20070610 	.word	0x20070610
   80edc:	20070614 	.word	0x20070614
   80ee0:	00080ee5 	.word	0x00080ee5

00080ee4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   80ee4:	b598      	push	{r3, r4, r7, lr}
   80ee6:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   80ee8:	4b09      	ldr	r3, [pc, #36]	; (80f10 <sd_mmc_configure_slot+0x2c>)
   80eea:	7818      	ldrb	r0, [r3, #0]
   80eec:	4b09      	ldr	r3, [pc, #36]	; (80f14 <sd_mmc_configure_slot+0x30>)
   80eee:	681b      	ldr	r3, [r3, #0]
   80ef0:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   80ef2:	4b08      	ldr	r3, [pc, #32]	; (80f14 <sd_mmc_configure_slot+0x30>)
   80ef4:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   80ef6:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   80ef8:	4b06      	ldr	r3, [pc, #24]	; (80f14 <sd_mmc_configure_slot+0x30>)
   80efa:	681b      	ldr	r3, [r3, #0]
   80efc:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   80efe:	2b00      	cmp	r3, #0
   80f00:	bf14      	ite	ne
   80f02:	2301      	movne	r3, #1
   80f04:	2300      	moveq	r3, #0
   80f06:	b2db      	uxtb	r3, r3
   80f08:	4c03      	ldr	r4, [pc, #12]	; (80f18 <sd_mmc_configure_slot+0x34>)
   80f0a:	47a0      	blx	r4
}
   80f0c:	bf00      	nop
   80f0e:	bd98      	pop	{r3, r4, r7, pc}
   80f10:	20070610 	.word	0x20070610
   80f14:	20070614 	.word	0x20070614
   80f18:	00082099 	.word	0x00082099

00080f1c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   80f1c:	b580      	push	{r7, lr}
   80f1e:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   80f20:	4b05      	ldr	r3, [pc, #20]	; (80f38 <sd_mmc_deselect_slot+0x1c>)
   80f22:	781b      	ldrb	r3, [r3, #0]
   80f24:	2b00      	cmp	r3, #0
   80f26:	d104      	bne.n	80f32 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   80f28:	4b03      	ldr	r3, [pc, #12]	; (80f38 <sd_mmc_deselect_slot+0x1c>)
   80f2a:	781b      	ldrb	r3, [r3, #0]
   80f2c:	4618      	mov	r0, r3
   80f2e:	4b03      	ldr	r3, [pc, #12]	; (80f3c <sd_mmc_deselect_slot+0x20>)
   80f30:	4798      	blx	r3
	}
}
   80f32:	bf00      	nop
   80f34:	bd80      	pop	{r7, pc}
   80f36:	bf00      	nop
   80f38:	20070610 	.word	0x20070610
   80f3c:	00082139 	.word	0x00082139

00080f40 <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
   80f40:	b590      	push	{r4, r7, lr}
   80f42:	b085      	sub	sp, #20
   80f44:	af02      	add	r7, sp, #8
	uint8_t v2 = 0;
   80f46:	2300      	movs	r3, #0
   80f48:	71fb      	strb	r3, [r7, #7]
#ifdef SDIO_SUPPORT_ENABLE
	uint8_t data = 0x08;
   80f4a:	2308      	movs	r3, #8
   80f4c:	71bb      	strb	r3, [r7, #6]
#endif

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   80f4e:	4b9a      	ldr	r3, [pc, #616]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   80f50:	681b      	ldr	r3, [r3, #0]
   80f52:	2201      	movs	r2, #1
   80f54:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   80f56:	4b98      	ldr	r3, [pc, #608]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   80f58:	681b      	ldr	r3, [r3, #0]
   80f5a:	2200      	movs	r2, #0
   80f5c:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   80f5e:	4b96      	ldr	r3, [pc, #600]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   80f60:	681b      	ldr	r3, [r3, #0]
   80f62:	2200      	movs	r2, #0
   80f64:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   80f66:	4b95      	ldr	r3, [pc, #596]	; (811bc <sd_mmc_mci_card_init+0x27c>)
   80f68:	4798      	blx	r3

#ifdef SDIO_SUPPORT_ENABLE
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
   80f6a:	1dbb      	adds	r3, r7, #6
   80f6c:	9300      	str	r3, [sp, #0]
   80f6e:	2300      	movs	r3, #0
   80f70:	2206      	movs	r2, #6
   80f72:	2100      	movs	r1, #0
   80f74:	2001      	movs	r0, #1
   80f76:	4c92      	ldr	r4, [pc, #584]	; (811c0 <sd_mmc_mci_card_init+0x280>)
   80f78:	47a0      	blx	r4
#endif

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   80f7a:	2100      	movs	r1, #0
   80f7c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80f80:	4b90      	ldr	r3, [pc, #576]	; (811c4 <sd_mmc_mci_card_init+0x284>)
   80f82:	4798      	blx	r3
   80f84:	4603      	mov	r3, r0
   80f86:	f083 0301 	eor.w	r3, r3, #1
   80f8a:	b2db      	uxtb	r3, r3
   80f8c:	2b00      	cmp	r3, #0
   80f8e:	d001      	beq.n	80f94 <sd_mmc_mci_card_init+0x54>
		return false;
   80f90:	2300      	movs	r3, #0
   80f92:	e10d      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
	}
	if (!sd_cmd8(&v2)) {
   80f94:	1dfb      	adds	r3, r7, #7
   80f96:	4618      	mov	r0, r3
   80f98:	4b8b      	ldr	r3, [pc, #556]	; (811c8 <sd_mmc_mci_card_init+0x288>)
   80f9a:	4798      	blx	r3
   80f9c:	4603      	mov	r3, r0
   80f9e:	f083 0301 	eor.w	r3, r3, #1
   80fa2:	b2db      	uxtb	r3, r3
   80fa4:	2b00      	cmp	r3, #0
   80fa6:	d001      	beq.n	80fac <sd_mmc_mci_card_init+0x6c>
		return false;
   80fa8:	2300      	movs	r3, #0
   80faa:	e101      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   80fac:	4b87      	ldr	r3, [pc, #540]	; (811cc <sd_mmc_mci_card_init+0x28c>)
   80fae:	4798      	blx	r3
   80fb0:	4603      	mov	r3, r0
   80fb2:	f083 0301 	eor.w	r3, r3, #1
   80fb6:	b2db      	uxtb	r3, r3
   80fb8:	2b00      	cmp	r3, #0
   80fba:	d001      	beq.n	80fc0 <sd_mmc_mci_card_init+0x80>
		return false;
   80fbc:	2300      	movs	r3, #0
   80fbe:	e0f7      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80fc0:	4b7d      	ldr	r3, [pc, #500]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   80fc2:	681b      	ldr	r3, [r3, #0]
   80fc4:	7adb      	ldrb	r3, [r3, #11]
   80fc6:	f003 0301 	and.w	r3, r3, #1
   80fca:	2b00      	cmp	r3, #0
   80fcc:	d011      	beq.n	80ff2 <sd_mmc_mci_card_init+0xb2>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
   80fce:	79fb      	ldrb	r3, [r7, #7]
   80fd0:	4618      	mov	r0, r3
   80fd2:	4b7f      	ldr	r3, [pc, #508]	; (811d0 <sd_mmc_mci_card_init+0x290>)
   80fd4:	4798      	blx	r3
   80fd6:	4603      	mov	r3, r0
   80fd8:	f083 0301 	eor.w	r3, r3, #1
   80fdc:	b2db      	uxtb	r3, r3
   80fde:	2b00      	cmp	r3, #0
   80fe0:	d007      	beq.n	80ff2 <sd_mmc_mci_card_init+0xb2>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   80fe2:	4b75      	ldr	r3, [pc, #468]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   80fe4:	681b      	ldr	r3, [r3, #0]
   80fe6:	2202      	movs	r2, #2
   80fe8:	72da      	strb	r2, [r3, #11]
			return sd_mmc_mci_install_mmc();
   80fea:	4b7a      	ldr	r3, [pc, #488]	; (811d4 <sd_mmc_mci_card_init+0x294>)
   80fec:	4798      	blx	r3
   80fee:	4603      	mov	r3, r0
   80ff0:	e0de      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80ff2:	4b71      	ldr	r3, [pc, #452]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   80ff4:	681b      	ldr	r3, [r3, #0]
   80ff6:	7adb      	ldrb	r3, [r3, #11]
   80ff8:	f003 0301 	and.w	r3, r3, #1
   80ffc:	2b00      	cmp	r3, #0
   80ffe:	d00c      	beq.n	8101a <sd_mmc_mci_card_init+0xda>
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   81000:	2100      	movs	r1, #0
   81002:	f645 3002 	movw	r0, #23298	; 0x5b02
   81006:	4b6f      	ldr	r3, [pc, #444]	; (811c4 <sd_mmc_mci_card_init+0x284>)
   81008:	4798      	blx	r3
   8100a:	4603      	mov	r3, r0
   8100c:	f083 0301 	eor.w	r3, r3, #1
   81010:	b2db      	uxtb	r3, r3
   81012:	2b00      	cmp	r3, #0
   81014:	d001      	beq.n	8101a <sd_mmc_mci_card_init+0xda>
			return false;
   81016:	2300      	movs	r3, #0
   81018:	e0ca      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
   8101a:	2100      	movs	r1, #0
   8101c:	f245 1003 	movw	r0, #20739	; 0x5103
   81020:	4b68      	ldr	r3, [pc, #416]	; (811c4 <sd_mmc_mci_card_init+0x284>)
   81022:	4798      	blx	r3
   81024:	4603      	mov	r3, r0
   81026:	f083 0301 	eor.w	r3, r3, #1
   8102a:	b2db      	uxtb	r3, r3
   8102c:	2b00      	cmp	r3, #0
   8102e:	d001      	beq.n	81034 <sd_mmc_mci_card_init+0xf4>
		return false;
   81030:	2300      	movs	r3, #0
   81032:	e0bd      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
   81034:	4b60      	ldr	r3, [pc, #384]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   81036:	681c      	ldr	r4, [r3, #0]
   81038:	4b67      	ldr	r3, [pc, #412]	; (811d8 <sd_mmc_mci_card_init+0x298>)
   8103a:	4798      	blx	r3
   8103c:	4603      	mov	r3, r0
   8103e:	0c1b      	lsrs	r3, r3, #16
   81040:	b29b      	uxth	r3, r3
   81042:	8123      	strh	r3, [r4, #8]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   81044:	4b5c      	ldr	r3, [pc, #368]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   81046:	681b      	ldr	r3, [r3, #0]
   81048:	7adb      	ldrb	r3, [r3, #11]
   8104a:	f003 0301 	and.w	r3, r3, #1
   8104e:	2b00      	cmp	r3, #0
   81050:	d00b      	beq.n	8106a <sd_mmc_mci_card_init+0x12a>
		if (!sd_mmc_cmd9_mci()) {
   81052:	4b62      	ldr	r3, [pc, #392]	; (811dc <sd_mmc_mci_card_init+0x29c>)
   81054:	4798      	blx	r3
   81056:	4603      	mov	r3, r0
   81058:	f083 0301 	eor.w	r3, r3, #1
   8105c:	b2db      	uxtb	r3, r3
   8105e:	2b00      	cmp	r3, #0
   81060:	d001      	beq.n	81066 <sd_mmc_mci_card_init+0x126>
			return false;
   81062:	2300      	movs	r3, #0
   81064:	e0a4      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
		}
		sd_decode_csd();
   81066:	4b5e      	ldr	r3, [pc, #376]	; (811e0 <sd_mmc_mci_card_init+0x2a0>)
   81068:	4798      	blx	r3
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   8106a:	4b53      	ldr	r3, [pc, #332]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   8106c:	681b      	ldr	r3, [r3, #0]
   8106e:	891b      	ldrh	r3, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   81070:	041b      	lsls	r3, r3, #16
   81072:	4619      	mov	r1, r3
   81074:	f243 1007 	movw	r0, #12551	; 0x3107
   81078:	4b52      	ldr	r3, [pc, #328]	; (811c4 <sd_mmc_mci_card_init+0x284>)
   8107a:	4798      	blx	r3
   8107c:	4603      	mov	r3, r0
   8107e:	f083 0301 	eor.w	r3, r3, #1
   81082:	b2db      	uxtb	r3, r3
   81084:	2b00      	cmp	r3, #0
   81086:	d001      	beq.n	8108c <sd_mmc_mci_card_init+0x14c>
		return false;
   81088:	2300      	movs	r3, #0
   8108a:	e091      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   8108c:	4b4a      	ldr	r3, [pc, #296]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   8108e:	681b      	ldr	r3, [r3, #0]
   81090:	7adb      	ldrb	r3, [r3, #11]
   81092:	f003 0301 	and.w	r3, r3, #1
   81096:	2b00      	cmp	r3, #0
   81098:	d009      	beq.n	810ae <sd_mmc_mci_card_init+0x16e>
		if (!sd_acmd51()) {
   8109a:	4b52      	ldr	r3, [pc, #328]	; (811e4 <sd_mmc_mci_card_init+0x2a4>)
   8109c:	4798      	blx	r3
   8109e:	4603      	mov	r3, r0
   810a0:	f083 0301 	eor.w	r3, r3, #1
   810a4:	b2db      	uxtb	r3, r3
   810a6:	2b00      	cmp	r3, #0
   810a8:	d001      	beq.n	810ae <sd_mmc_mci_card_init+0x16e>
			return false;
   810aa:	2300      	movs	r3, #0
   810ac:	e080      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
		}
	}
	if (IS_SDIO()) {
   810ae:	4b42      	ldr	r3, [pc, #264]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   810b0:	681b      	ldr	r3, [r3, #0]
   810b2:	7adb      	ldrb	r3, [r3, #11]
   810b4:	f003 0304 	and.w	r3, r3, #4
   810b8:	2b00      	cmp	r3, #0
   810ba:	d009      	beq.n	810d0 <sd_mmc_mci_card_init+0x190>
		if (!sdio_get_max_speed()) {
   810bc:	4b4a      	ldr	r3, [pc, #296]	; (811e8 <sd_mmc_mci_card_init+0x2a8>)
   810be:	4798      	blx	r3
   810c0:	4603      	mov	r3, r0
   810c2:	f083 0301 	eor.w	r3, r3, #1
   810c6:	b2db      	uxtb	r3, r3
   810c8:	2b00      	cmp	r3, #0
   810ca:	d001      	beq.n	810d0 <sd_mmc_mci_card_init+0x190>
			return false;
   810cc:	2300      	movs	r3, #0
   810ce:	e06f      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
   810d0:	4b46      	ldr	r3, [pc, #280]	; (811ec <sd_mmc_mci_card_init+0x2ac>)
   810d2:	781b      	ldrb	r3, [r3, #0]
   810d4:	4618      	mov	r0, r3
   810d6:	4b46      	ldr	r3, [pc, #280]	; (811f0 <sd_mmc_mci_card_init+0x2b0>)
   810d8:	4798      	blx	r3
   810da:	4603      	mov	r3, r0
   810dc:	2b03      	cmp	r3, #3
   810de:	d923      	bls.n	81128 <sd_mmc_mci_card_init+0x1e8>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
   810e0:	4b35      	ldr	r3, [pc, #212]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   810e2:	681b      	ldr	r3, [r3, #0]
   810e4:	7adb      	ldrb	r3, [r3, #11]
   810e6:	f003 0304 	and.w	r3, r3, #4
   810ea:	2b00      	cmp	r3, #0
   810ec:	d009      	beq.n	81102 <sd_mmc_mci_card_init+0x1c2>
			if (!sdio_cmd52_set_bus_width()) {
   810ee:	4b41      	ldr	r3, [pc, #260]	; (811f4 <sd_mmc_mci_card_init+0x2b4>)
   810f0:	4798      	blx	r3
   810f2:	4603      	mov	r3, r0
   810f4:	f083 0301 	eor.w	r3, r3, #1
   810f8:	b2db      	uxtb	r3, r3
   810fa:	2b00      	cmp	r3, #0
   810fc:	d001      	beq.n	81102 <sd_mmc_mci_card_init+0x1c2>
				return false;
   810fe:	2300      	movs	r3, #0
   81100:	e056      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   81102:	4b2d      	ldr	r3, [pc, #180]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   81104:	681b      	ldr	r3, [r3, #0]
   81106:	7adb      	ldrb	r3, [r3, #11]
   81108:	f003 0301 	and.w	r3, r3, #1
   8110c:	2b00      	cmp	r3, #0
   8110e:	d009      	beq.n	81124 <sd_mmc_mci_card_init+0x1e4>
			if (!sd_acmd6()) {
   81110:	4b39      	ldr	r3, [pc, #228]	; (811f8 <sd_mmc_mci_card_init+0x2b8>)
   81112:	4798      	blx	r3
   81114:	4603      	mov	r3, r0
   81116:	f083 0301 	eor.w	r3, r3, #1
   8111a:	b2db      	uxtb	r3, r3
   8111c:	2b00      	cmp	r3, #0
   8111e:	d001      	beq.n	81124 <sd_mmc_mci_card_init+0x1e4>
				return false;
   81120:	2300      	movs	r3, #0
   81122:	e045      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
   81124:	4b35      	ldr	r3, [pc, #212]	; (811fc <sd_mmc_mci_card_init+0x2bc>)
   81126:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
   81128:	4b35      	ldr	r3, [pc, #212]	; (81200 <sd_mmc_mci_card_init+0x2c0>)
   8112a:	4798      	blx	r3
   8112c:	4603      	mov	r3, r0
   8112e:	2b00      	cmp	r3, #0
   81130:	d028      	beq.n	81184 <sd_mmc_mci_card_init+0x244>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
   81132:	4b21      	ldr	r3, [pc, #132]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   81134:	681b      	ldr	r3, [r3, #0]
   81136:	7adb      	ldrb	r3, [r3, #11]
   81138:	f003 0304 	and.w	r3, r3, #4
   8113c:	2b00      	cmp	r3, #0
   8113e:	d009      	beq.n	81154 <sd_mmc_mci_card_init+0x214>
			if (!sdio_cmd52_set_high_speed()) {
   81140:	4b30      	ldr	r3, [pc, #192]	; (81204 <sd_mmc_mci_card_init+0x2c4>)
   81142:	4798      	blx	r3
   81144:	4603      	mov	r3, r0
   81146:	f083 0301 	eor.w	r3, r3, #1
   8114a:	b2db      	uxtb	r3, r3
   8114c:	2b00      	cmp	r3, #0
   8114e:	d001      	beq.n	81154 <sd_mmc_mci_card_init+0x214>
				return false;
   81150:	2300      	movs	r3, #0
   81152:	e02d      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   81154:	4b18      	ldr	r3, [pc, #96]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   81156:	681b      	ldr	r3, [r3, #0]
   81158:	7adb      	ldrb	r3, [r3, #11]
   8115a:	f003 0301 	and.w	r3, r3, #1
   8115e:	2b00      	cmp	r3, #0
   81160:	d00e      	beq.n	81180 <sd_mmc_mci_card_init+0x240>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
   81162:	4b15      	ldr	r3, [pc, #84]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   81164:	681b      	ldr	r3, [r3, #0]
   81166:	7b1b      	ldrb	r3, [r3, #12]
   81168:	2b10      	cmp	r3, #16
   8116a:	d909      	bls.n	81180 <sd_mmc_mci_card_init+0x240>
				if (!sd_cm6_set_high_speed()) {
   8116c:	4b26      	ldr	r3, [pc, #152]	; (81208 <sd_mmc_mci_card_init+0x2c8>)
   8116e:	4798      	blx	r3
   81170:	4603      	mov	r3, r0
   81172:	f083 0301 	eor.w	r3, r3, #1
   81176:	b2db      	uxtb	r3, r3
   81178:	2b00      	cmp	r3, #0
   8117a:	d001      	beq.n	81180 <sd_mmc_mci_card_init+0x240>
					return false;
   8117c:	2300      	movs	r3, #0
   8117e:	e017      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
   81180:	4b1e      	ldr	r3, [pc, #120]	; (811fc <sd_mmc_mci_card_init+0x2bc>)
   81182:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   81184:	4b0c      	ldr	r3, [pc, #48]	; (811b8 <sd_mmc_mci_card_init+0x278>)
   81186:	681b      	ldr	r3, [r3, #0]
   81188:	7adb      	ldrb	r3, [r3, #11]
   8118a:	f003 0301 	and.w	r3, r3, #1
   8118e:	2b00      	cmp	r3, #0
   81190:	d00d      	beq.n	811ae <sd_mmc_mci_card_init+0x26e>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   81192:	f44f 7100 	mov.w	r1, #512	; 0x200
   81196:	f241 1010 	movw	r0, #4368	; 0x1110
   8119a:	4b0a      	ldr	r3, [pc, #40]	; (811c4 <sd_mmc_mci_card_init+0x284>)
   8119c:	4798      	blx	r3
   8119e:	4603      	mov	r3, r0
   811a0:	f083 0301 	eor.w	r3, r3, #1
   811a4:	b2db      	uxtb	r3, r3
   811a6:	2b00      	cmp	r3, #0
   811a8:	d001      	beq.n	811ae <sd_mmc_mci_card_init+0x26e>
			return false;
   811aa:	2300      	movs	r3, #0
   811ac:	e000      	b.n	811b0 <sd_mmc_mci_card_init+0x270>
		}
	}
	return true;
   811ae:	2301      	movs	r3, #1
}
   811b0:	4618      	mov	r0, r3
   811b2:	370c      	adds	r7, #12
   811b4:	46bd      	mov	sp, r7
   811b6:	bd90      	pop	{r4, r7, pc}
   811b8:	20070614 	.word	0x20070614
   811bc:	0008214d 	.word	0x0008214d
   811c0:	00080c71 	.word	0x00080c71
   811c4:	0008218d 	.word	0x0008218d
   811c8:	00080845 	.word	0x00080845
   811cc:	00080395 	.word	0x00080395
   811d0:	000802ed 	.word	0x000802ed
   811d4:	0008120d 	.word	0x0008120d
   811d8:	000821d1 	.word	0x000821d1
   811dc:	000809a1 	.word	0x000809a1
   811e0:	00080b1d 	.word	0x00080b1d
   811e4:	00080d35 	.word	0x00080d35
   811e8:	0008043d 	.word	0x0008043d
   811ec:	20070610 	.word	0x20070610
   811f0:	00082069 	.word	0x00082069
   811f4:	00080589 	.word	0x00080589
   811f8:	00080cdd 	.word	0x00080cdd
   811fc:	00080ee5 	.word	0x00080ee5
   81200:	00082089 	.word	0x00082089
   81204:	000805f9 	.word	0x000805f9
   81208:	00080679 	.word	0x00080679

0008120c <sd_mmc_mci_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_install_mmc(void)
{
   8120c:	b580      	push	{r7, lr}
   8120e:	b082      	sub	sp, #8
   81210:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   81212:	2100      	movs	r1, #0
   81214:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   81218:	4b56      	ldr	r3, [pc, #344]	; (81374 <sd_mmc_mci_install_mmc+0x168>)
   8121a:	4798      	blx	r3
   8121c:	4603      	mov	r3, r0
   8121e:	f083 0301 	eor.w	r3, r3, #1
   81222:	b2db      	uxtb	r3, r3
   81224:	2b00      	cmp	r3, #0
   81226:	d001      	beq.n	8122c <sd_mmc_mci_install_mmc+0x20>
		return false;
   81228:	2300      	movs	r3, #0
   8122a:	e09f      	b.n	8136c <sd_mmc_mci_install_mmc+0x160>
	}

	if (!mmc_mci_op_cond()) {
   8122c:	4b52      	ldr	r3, [pc, #328]	; (81378 <sd_mmc_mci_install_mmc+0x16c>)
   8122e:	4798      	blx	r3
   81230:	4603      	mov	r3, r0
   81232:	f083 0301 	eor.w	r3, r3, #1
   81236:	b2db      	uxtb	r3, r3
   81238:	2b00      	cmp	r3, #0
   8123a:	d001      	beq.n	81240 <sd_mmc_mci_install_mmc+0x34>
		return false;
   8123c:	2300      	movs	r3, #0
   8123e:	e095      	b.n	8136c <sd_mmc_mci_install_mmc+0x160>
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   81240:	2100      	movs	r1, #0
   81242:	f645 3002 	movw	r0, #23298	; 0x5b02
   81246:	4b4b      	ldr	r3, [pc, #300]	; (81374 <sd_mmc_mci_install_mmc+0x168>)
   81248:	4798      	blx	r3
   8124a:	4603      	mov	r3, r0
   8124c:	f083 0301 	eor.w	r3, r3, #1
   81250:	b2db      	uxtb	r3, r3
   81252:	2b00      	cmp	r3, #0
   81254:	d001      	beq.n	8125a <sd_mmc_mci_install_mmc+0x4e>
		return false;
   81256:	2300      	movs	r3, #0
   81258:	e088      	b.n	8136c <sd_mmc_mci_install_mmc+0x160>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
   8125a:	4b48      	ldr	r3, [pc, #288]	; (8137c <sd_mmc_mci_install_mmc+0x170>)
   8125c:	681b      	ldr	r3, [r3, #0]
   8125e:	2201      	movs	r2, #1
   81260:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
   81262:	4b46      	ldr	r3, [pc, #280]	; (8137c <sd_mmc_mci_install_mmc+0x170>)
   81264:	681b      	ldr	r3, [r3, #0]
   81266:	891b      	ldrh	r3, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
   81268:	041b      	lsls	r3, r3, #16
   8126a:	4619      	mov	r1, r3
   8126c:	f241 1003 	movw	r0, #4355	; 0x1103
   81270:	4b40      	ldr	r3, [pc, #256]	; (81374 <sd_mmc_mci_install_mmc+0x168>)
   81272:	4798      	blx	r3
   81274:	4603      	mov	r3, r0
   81276:	f083 0301 	eor.w	r3, r3, #1
   8127a:	b2db      	uxtb	r3, r3
   8127c:	2b00      	cmp	r3, #0
   8127e:	d001      	beq.n	81284 <sd_mmc_mci_install_mmc+0x78>
		return false;
   81280:	2300      	movs	r3, #0
   81282:	e073      	b.n	8136c <sd_mmc_mci_install_mmc+0x160>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
   81284:	4b3e      	ldr	r3, [pc, #248]	; (81380 <sd_mmc_mci_install_mmc+0x174>)
   81286:	4798      	blx	r3
   81288:	4603      	mov	r3, r0
   8128a:	f083 0301 	eor.w	r3, r3, #1
   8128e:	b2db      	uxtb	r3, r3
   81290:	2b00      	cmp	r3, #0
   81292:	d001      	beq.n	81298 <sd_mmc_mci_install_mmc+0x8c>
		return false;
   81294:	2300      	movs	r3, #0
   81296:	e069      	b.n	8136c <sd_mmc_mci_install_mmc+0x160>
	}
	mmc_decode_csd();
   81298:	4b3a      	ldr	r3, [pc, #232]	; (81384 <sd_mmc_mci_install_mmc+0x178>)
   8129a:	4798      	blx	r3
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   8129c:	4b37      	ldr	r3, [pc, #220]	; (8137c <sd_mmc_mci_install_mmc+0x170>)
   8129e:	681b      	ldr	r3, [r3, #0]
   812a0:	891b      	ldrh	r3, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   812a2:	041b      	lsls	r3, r3, #16
   812a4:	4619      	mov	r1, r3
   812a6:	f243 1007 	movw	r0, #12551	; 0x3107
   812aa:	4b32      	ldr	r3, [pc, #200]	; (81374 <sd_mmc_mci_install_mmc+0x168>)
   812ac:	4798      	blx	r3
   812ae:	4603      	mov	r3, r0
   812b0:	f083 0301 	eor.w	r3, r3, #1
   812b4:	b2db      	uxtb	r3, r3
   812b6:	2b00      	cmp	r3, #0
   812b8:	d001      	beq.n	812be <sd_mmc_mci_install_mmc+0xb2>
		return false;
   812ba:	2300      	movs	r3, #0
   812bc:	e056      	b.n	8136c <sd_mmc_mci_install_mmc+0x160>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   812be:	4b2f      	ldr	r3, [pc, #188]	; (8137c <sd_mmc_mci_install_mmc+0x170>)
   812c0:	681b      	ldr	r3, [r3, #0]
   812c2:	7b1b      	ldrb	r3, [r3, #12]
   812c4:	2b3f      	cmp	r3, #63	; 0x3f
   812c6:	d93b      	bls.n	81340 <sd_mmc_mci_install_mmc+0x134>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   812c8:	1dbb      	adds	r3, r7, #6
   812ca:	4618      	mov	r0, r3
   812cc:	4b2e      	ldr	r3, [pc, #184]	; (81388 <sd_mmc_mci_install_mmc+0x17c>)
   812ce:	4798      	blx	r3
   812d0:	4603      	mov	r3, r0
   812d2:	f083 0301 	eor.w	r3, r3, #1
   812d6:	b2db      	uxtb	r3, r3
   812d8:	2b00      	cmp	r3, #0
   812da:	d001      	beq.n	812e0 <sd_mmc_mci_install_mmc+0xd4>
			return false;
   812dc:	2300      	movs	r3, #0
   812de:	e045      	b.n	8136c <sd_mmc_mci_install_mmc+0x160>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
   812e0:	4b2a      	ldr	r3, [pc, #168]	; (8138c <sd_mmc_mci_install_mmc+0x180>)
   812e2:	781b      	ldrb	r3, [r3, #0]
   812e4:	4618      	mov	r0, r3
   812e6:	4b2a      	ldr	r3, [pc, #168]	; (81390 <sd_mmc_mci_install_mmc+0x184>)
   812e8:	4798      	blx	r3
   812ea:	4603      	mov	r3, r0
   812ec:	2b03      	cmp	r3, #3
   812ee:	d912      	bls.n	81316 <sd_mmc_mci_install_mmc+0x10a>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
   812f0:	4b26      	ldr	r3, [pc, #152]	; (8138c <sd_mmc_mci_install_mmc+0x180>)
   812f2:	781b      	ldrb	r3, [r3, #0]
   812f4:	4618      	mov	r0, r3
   812f6:	4b26      	ldr	r3, [pc, #152]	; (81390 <sd_mmc_mci_install_mmc+0x184>)
   812f8:	4798      	blx	r3
   812fa:	4603      	mov	r3, r0
   812fc:	4618      	mov	r0, r3
   812fe:	4b25      	ldr	r3, [pc, #148]	; (81394 <sd_mmc_mci_install_mmc+0x188>)
   81300:	4798      	blx	r3
   81302:	4603      	mov	r3, r0
   81304:	f083 0301 	eor.w	r3, r3, #1
   81308:	b2db      	uxtb	r3, r3
   8130a:	2b00      	cmp	r3, #0
   8130c:	d001      	beq.n	81312 <sd_mmc_mci_install_mmc+0x106>
				return false;
   8130e:	2300      	movs	r3, #0
   81310:	e02c      	b.n	8136c <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
   81312:	4b21      	ldr	r3, [pc, #132]	; (81398 <sd_mmc_mci_install_mmc+0x18c>)
   81314:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
   81316:	4b21      	ldr	r3, [pc, #132]	; (8139c <sd_mmc_mci_install_mmc+0x190>)
   81318:	4798      	blx	r3
   8131a:	4603      	mov	r3, r0
   8131c:	2b00      	cmp	r3, #0
   8131e:	d011      	beq.n	81344 <sd_mmc_mci_install_mmc+0x138>
   81320:	79bb      	ldrb	r3, [r7, #6]
   81322:	2b00      	cmp	r3, #0
   81324:	d00e      	beq.n	81344 <sd_mmc_mci_install_mmc+0x138>
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
   81326:	4b1e      	ldr	r3, [pc, #120]	; (813a0 <sd_mmc_mci_install_mmc+0x194>)
   81328:	4798      	blx	r3
   8132a:	4603      	mov	r3, r0
   8132c:	f083 0301 	eor.w	r3, r3, #1
   81330:	b2db      	uxtb	r3, r3
   81332:	2b00      	cmp	r3, #0
   81334:	d001      	beq.n	8133a <sd_mmc_mci_install_mmc+0x12e>
				return false;
   81336:	2300      	movs	r3, #0
   81338:	e018      	b.n	8136c <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
   8133a:	4b17      	ldr	r3, [pc, #92]	; (81398 <sd_mmc_mci_install_mmc+0x18c>)
   8133c:	4798      	blx	r3
   8133e:	e001      	b.n	81344 <sd_mmc_mci_install_mmc+0x138>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
   81340:	4b15      	ldr	r3, [pc, #84]	; (81398 <sd_mmc_mci_install_mmc+0x18c>)
   81342:	4798      	blx	r3
	}

	uint8_t retry = 10;
   81344:	230a      	movs	r3, #10
   81346:	71fb      	strb	r3, [r7, #7]
	while (retry--) {
   81348:	e00a      	b.n	81360 <sd_mmc_mci_install_mmc+0x154>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   8134a:	f44f 7100 	mov.w	r1, #512	; 0x200
   8134e:	f241 1010 	movw	r0, #4368	; 0x1110
   81352:	4b08      	ldr	r3, [pc, #32]	; (81374 <sd_mmc_mci_install_mmc+0x168>)
   81354:	4798      	blx	r3
   81356:	4603      	mov	r3, r0
   81358:	2b00      	cmp	r3, #0
   8135a:	d001      	beq.n	81360 <sd_mmc_mci_install_mmc+0x154>
			return true;
   8135c:	2301      	movs	r3, #1
   8135e:	e005      	b.n	8136c <sd_mmc_mci_install_mmc+0x160>
	while (retry--) {
   81360:	79fb      	ldrb	r3, [r7, #7]
   81362:	1e5a      	subs	r2, r3, #1
   81364:	71fa      	strb	r2, [r7, #7]
   81366:	2b00      	cmp	r3, #0
   81368:	d1ef      	bne.n	8134a <sd_mmc_mci_install_mmc+0x13e>
		}
	}
	return false;
   8136a:	2300      	movs	r3, #0
}
   8136c:	4618      	mov	r0, r3
   8136e:	3708      	adds	r7, #8
   81370:	46bd      	mov	sp, r7
   81372:	bd80      	pop	{r7, pc}
   81374:	0008218d 	.word	0x0008218d
   81378:	00080271 	.word	0x00080271
   8137c:	20070614 	.word	0x20070614
   81380:	000809a1 	.word	0x000809a1
   81384:	000809e5 	.word	0x000809e5
   81388:	000808a9 	.word	0x000808a9
   8138c:	20070610 	.word	0x20070610
   81390:	00082069 	.word	0x00082069
   81394:	0008076d 	.word	0x0008076d
   81398:	00080ee5 	.word	0x00080ee5
   8139c:	00082089 	.word	0x00082089
   813a0:	000807e9 	.word	0x000807e9

000813a4 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   813a4:	b580      	push	{r7, lr}
   813a6:	b082      	sub	sp, #8
   813a8:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   813aa:	2300      	movs	r3, #0
   813ac:	71fb      	strb	r3, [r7, #7]
   813ae:	e009      	b.n	813c4 <sd_mmc_init+0x20>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   813b0:	79fb      	ldrb	r3, [r7, #7]
   813b2:	4a0a      	ldr	r2, [pc, #40]	; (813dc <sd_mmc_init+0x38>)
   813b4:	015b      	lsls	r3, r3, #5
   813b6:	4413      	add	r3, r2
   813b8:	330a      	adds	r3, #10
   813ba:	2204      	movs	r2, #4
   813bc:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   813be:	79fb      	ldrb	r3, [r7, #7]
   813c0:	3301      	adds	r3, #1
   813c2:	71fb      	strb	r3, [r7, #7]
   813c4:	79fb      	ldrb	r3, [r7, #7]
   813c6:	2b00      	cmp	r3, #0
   813c8:	d0f2      	beq.n	813b0 <sd_mmc_init+0xc>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   813ca:	4b05      	ldr	r3, [pc, #20]	; (813e0 <sd_mmc_init+0x3c>)
   813cc:	22ff      	movs	r2, #255	; 0xff
   813ce:	701a      	strb	r2, [r3, #0]
	driver_init();
   813d0:	4b04      	ldr	r3, [pc, #16]	; (813e4 <sd_mmc_init+0x40>)
   813d2:	4798      	blx	r3
}
   813d4:	bf00      	nop
   813d6:	3708      	adds	r7, #8
   813d8:	46bd      	mov	sp, r7
   813da:	bd80      	pop	{r7, pc}
   813dc:	200705f0 	.word	0x200705f0
   813e0:	20070610 	.word	0x20070610
   813e4:	00082025 	.word	0x00082025

000813e8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   813e8:	b580      	push	{r7, lr}
   813ea:	b084      	sub	sp, #16
   813ec:	af00      	add	r7, sp, #0
   813ee:	4603      	mov	r3, r0
   813f0:	71fb      	strb	r3, [r7, #7]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   813f2:	79fb      	ldrb	r3, [r7, #7]
   813f4:	4618      	mov	r0, r3
   813f6:	4b11      	ldr	r3, [pc, #68]	; (8143c <sd_mmc_check+0x54>)
   813f8:	4798      	blx	r3
   813fa:	4603      	mov	r3, r0
   813fc:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   813fe:	7bfb      	ldrb	r3, [r7, #15]
   81400:	2b01      	cmp	r3, #1
   81402:	d003      	beq.n	8140c <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
   81404:	4b0e      	ldr	r3, [pc, #56]	; (81440 <sd_mmc_check+0x58>)
   81406:	4798      	blx	r3
		return sd_mmc_err;
   81408:	7bfb      	ldrb	r3, [r7, #15]
   8140a:	e013      	b.n	81434 <sd_mmc_check+0x4c>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
			: sd_mmc_mci_card_init()) {
   8140c:	4b0d      	ldr	r3, [pc, #52]	; (81444 <sd_mmc_check+0x5c>)
   8140e:	4798      	blx	r3
   81410:	4603      	mov	r3, r0
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   81412:	2b00      	cmp	r3, #0
   81414:	d007      	beq.n	81426 <sd_mmc_check+0x3e>
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   81416:	4b0c      	ldr	r3, [pc, #48]	; (81448 <sd_mmc_check+0x60>)
   81418:	681b      	ldr	r3, [r3, #0]
   8141a:	2200      	movs	r2, #0
   8141c:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   8141e:	4b08      	ldr	r3, [pc, #32]	; (81440 <sd_mmc_check+0x58>)
   81420:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   81422:	2301      	movs	r3, #1
   81424:	e006      	b.n	81434 <sd_mmc_check+0x4c>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   81426:	4b08      	ldr	r3, [pc, #32]	; (81448 <sd_mmc_check+0x60>)
   81428:	681b      	ldr	r3, [r3, #0]
   8142a:	2203      	movs	r2, #3
   8142c:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   8142e:	4b04      	ldr	r3, [pc, #16]	; (81440 <sd_mmc_check+0x58>)
   81430:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   81432:	2303      	movs	r3, #3
}
   81434:	4618      	mov	r0, r3
   81436:	3710      	adds	r7, #16
   81438:	46bd      	mov	sp, r7
   8143a:	bd80      	pop	{r7, pc}
   8143c:	00080e31 	.word	0x00080e31
   81440:	00080f1d 	.word	0x00080f1d
   81444:	00080f41 	.word	0x00080f41
   81448:	20070614 	.word	0x20070614

0008144c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   8144c:	b580      	push	{r7, lr}
   8144e:	b082      	sub	sp, #8
   81450:	af00      	add	r7, sp, #0
   81452:	4603      	mov	r3, r0
   81454:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   81456:	79fb      	ldrb	r3, [r7, #7]
   81458:	4618      	mov	r0, r3
   8145a:	4b08      	ldr	r3, [pc, #32]	; (8147c <sd_mmc_get_type+0x30>)
   8145c:	4798      	blx	r3
   8145e:	4603      	mov	r3, r0
   81460:	2b00      	cmp	r3, #0
   81462:	d001      	beq.n	81468 <sd_mmc_get_type+0x1c>
		return CARD_TYPE_UNKNOWN;
   81464:	2300      	movs	r3, #0
   81466:	e004      	b.n	81472 <sd_mmc_get_type+0x26>
	}
	sd_mmc_deselect_slot();
   81468:	4b05      	ldr	r3, [pc, #20]	; (81480 <sd_mmc_get_type+0x34>)
   8146a:	4798      	blx	r3
	return sd_mmc_card->type;
   8146c:	4b05      	ldr	r3, [pc, #20]	; (81484 <sd_mmc_get_type+0x38>)
   8146e:	681b      	ldr	r3, [r3, #0]
   81470:	7adb      	ldrb	r3, [r3, #11]
}
   81472:	4618      	mov	r0, r3
   81474:	3708      	adds	r7, #8
   81476:	46bd      	mov	sp, r7
   81478:	bd80      	pop	{r7, pc}
   8147a:	bf00      	nop
   8147c:	00080e31 	.word	0x00080e31
   81480:	00080f1d 	.word	0x00080f1d
   81484:	20070614 	.word	0x20070614

00081488 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   81488:	b580      	push	{r7, lr}
   8148a:	b082      	sub	sp, #8
   8148c:	af00      	add	r7, sp, #0
   8148e:	4603      	mov	r3, r0
   81490:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   81492:	79fb      	ldrb	r3, [r7, #7]
   81494:	4618      	mov	r0, r3
   81496:	4b08      	ldr	r3, [pc, #32]	; (814b8 <sd_mmc_get_capacity+0x30>)
   81498:	4798      	blx	r3
   8149a:	4603      	mov	r3, r0
   8149c:	2b00      	cmp	r3, #0
   8149e:	d001      	beq.n	814a4 <sd_mmc_get_capacity+0x1c>
		return 0;
   814a0:	2300      	movs	r3, #0
   814a2:	e004      	b.n	814ae <sd_mmc_get_capacity+0x26>
	}
	sd_mmc_deselect_slot();
   814a4:	4b05      	ldr	r3, [pc, #20]	; (814bc <sd_mmc_get_capacity+0x34>)
   814a6:	4798      	blx	r3
	return sd_mmc_card->capacity;
   814a8:	4b05      	ldr	r3, [pc, #20]	; (814c0 <sd_mmc_get_capacity+0x38>)
   814aa:	681b      	ldr	r3, [r3, #0]
   814ac:	685b      	ldr	r3, [r3, #4]
}
   814ae:	4618      	mov	r0, r3
   814b0:	3708      	adds	r7, #8
   814b2:	46bd      	mov	sp, r7
   814b4:	bd80      	pop	{r7, pc}
   814b6:	bf00      	nop
   814b8:	00080e31 	.word	0x00080e31
   814bc:	00080f1d 	.word	0x00080f1d
   814c0:	20070614 	.word	0x20070614

000814c4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   814c4:	b480      	push	{r7}
   814c6:	b083      	sub	sp, #12
   814c8:	af00      	add	r7, sp, #0
   814ca:	4603      	mov	r3, r0
   814cc:	71fb      	strb	r3, [r7, #7]
	if (ioport_get_pin_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   814ce:	2300      	movs	r3, #0
}
   814d0:	4618      	mov	r0, r3
   814d2:	370c      	adds	r7, #12
   814d4:	46bd      	mov	sp, r7
   814d6:	bc80      	pop	{r7}
   814d8:	4770      	bx	lr
	...

000814dc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   814dc:	b590      	push	{r4, r7, lr}
   814de:	b089      	sub	sp, #36	; 0x24
   814e0:	af02      	add	r7, sp, #8
   814e2:	4603      	mov	r3, r0
   814e4:	6039      	str	r1, [r7, #0]
   814e6:	71fb      	strb	r3, [r7, #7]
   814e8:	4613      	mov	r3, r2
   814ea:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   814ec:	79fb      	ldrb	r3, [r7, #7]
   814ee:	4618      	mov	r0, r3
   814f0:	4b2a      	ldr	r3, [pc, #168]	; (8159c <sd_mmc_init_read_blocks+0xc0>)
   814f2:	4798      	blx	r3
   814f4:	4603      	mov	r3, r0
   814f6:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
   814f8:	7bfb      	ldrb	r3, [r7, #15]
   814fa:	2b00      	cmp	r3, #0
   814fc:	d001      	beq.n	81502 <sd_mmc_init_read_blocks+0x26>
		return sd_mmc_err;
   814fe:	7bfb      	ldrb	r3, [r7, #15]
   81500:	e047      	b.n	81592 <sd_mmc_init_read_blocks+0xb6>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   81502:	4b27      	ldr	r3, [pc, #156]	; (815a0 <sd_mmc_init_read_blocks+0xc4>)
   81504:	4798      	blx	r3
   81506:	4603      	mov	r3, r0
   81508:	f083 0301 	eor.w	r3, r3, #1
   8150c:	b2db      	uxtb	r3, r3
   8150e:	2b00      	cmp	r3, #0
   81510:	d003      	beq.n	8151a <sd_mmc_init_read_blocks+0x3e>
		sd_mmc_deselect_slot();
   81512:	4b24      	ldr	r3, [pc, #144]	; (815a4 <sd_mmc_init_read_blocks+0xc8>)
   81514:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   81516:	2305      	movs	r3, #5
   81518:	e03b      	b.n	81592 <sd_mmc_init_read_blocks+0xb6>
	}

	if (nb_block > 1) {
   8151a:	88bb      	ldrh	r3, [r7, #4]
   8151c:	2b01      	cmp	r3, #1
   8151e:	d902      	bls.n	81526 <sd_mmc_init_read_blocks+0x4a>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   81520:	4b21      	ldr	r3, [pc, #132]	; (815a8 <sd_mmc_init_read_blocks+0xcc>)
   81522:	617b      	str	r3, [r7, #20]
   81524:	e001      	b.n	8152a <sd_mmc_init_read_blocks+0x4e>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   81526:	4b21      	ldr	r3, [pc, #132]	; (815ac <sd_mmc_init_read_blocks+0xd0>)
   81528:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   8152a:	4b21      	ldr	r3, [pc, #132]	; (815b0 <sd_mmc_init_read_blocks+0xd4>)
   8152c:	681b      	ldr	r3, [r3, #0]
   8152e:	7adb      	ldrb	r3, [r3, #11]
   81530:	f003 0308 	and.w	r3, r3, #8
   81534:	2b00      	cmp	r3, #0
   81536:	d002      	beq.n	8153e <sd_mmc_init_read_blocks+0x62>
		arg = start;
   81538:	683b      	ldr	r3, [r7, #0]
   8153a:	613b      	str	r3, [r7, #16]
   8153c:	e002      	b.n	81544 <sd_mmc_init_read_blocks+0x68>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   8153e:	683b      	ldr	r3, [r7, #0]
   81540:	025b      	lsls	r3, r3, #9
   81542:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   81544:	88ba      	ldrh	r2, [r7, #4]
   81546:	2301      	movs	r3, #1
   81548:	9300      	str	r3, [sp, #0]
   8154a:	4613      	mov	r3, r2
   8154c:	f44f 7200 	mov.w	r2, #512	; 0x200
   81550:	6939      	ldr	r1, [r7, #16]
   81552:	6978      	ldr	r0, [r7, #20]
   81554:	4c17      	ldr	r4, [pc, #92]	; (815b4 <sd_mmc_init_read_blocks+0xd8>)
   81556:	47a0      	blx	r4
   81558:	4603      	mov	r3, r0
   8155a:	f083 0301 	eor.w	r3, r3, #1
   8155e:	b2db      	uxtb	r3, r3
   81560:	2b00      	cmp	r3, #0
   81562:	d003      	beq.n	8156c <sd_mmc_init_read_blocks+0x90>
		sd_mmc_deselect_slot();
   81564:	4b0f      	ldr	r3, [pc, #60]	; (815a4 <sd_mmc_init_read_blocks+0xc8>)
   81566:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   81568:	2305      	movs	r3, #5
   8156a:	e012      	b.n	81592 <sd_mmc_init_read_blocks+0xb6>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   8156c:	4b12      	ldr	r3, [pc, #72]	; (815b8 <sd_mmc_init_read_blocks+0xdc>)
   8156e:	4798      	blx	r3
   81570:	60b8      	str	r0, [r7, #8]
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81572:	68ba      	ldr	r2, [r7, #8]
   81574:	4b11      	ldr	r3, [pc, #68]	; (815bc <sd_mmc_init_read_blocks+0xe0>)
   81576:	4013      	ands	r3, r2
   81578:	2b00      	cmp	r3, #0
   8157a:	d003      	beq.n	81584 <sd_mmc_init_read_blocks+0xa8>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   8157c:	4b09      	ldr	r3, [pc, #36]	; (815a4 <sd_mmc_init_read_blocks+0xc8>)
   8157e:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
   81580:	2305      	movs	r3, #5
   81582:	e006      	b.n	81592 <sd_mmc_init_read_blocks+0xb6>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   81584:	4a0e      	ldr	r2, [pc, #56]	; (815c0 <sd_mmc_init_read_blocks+0xe4>)
   81586:	88bb      	ldrh	r3, [r7, #4]
   81588:	8013      	strh	r3, [r2, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   8158a:	4a0e      	ldr	r2, [pc, #56]	; (815c4 <sd_mmc_init_read_blocks+0xe8>)
   8158c:	88bb      	ldrh	r3, [r7, #4]
   8158e:	8013      	strh	r3, [r2, #0]
	return SD_MMC_OK;
   81590:	2300      	movs	r3, #0
}
   81592:	4618      	mov	r0, r3
   81594:	371c      	adds	r7, #28
   81596:	46bd      	mov	sp, r7
   81598:	bd90      	pop	{r4, r7, pc}
   8159a:	bf00      	nop
   8159c:	00080e31 	.word	0x00080e31
   815a0:	00080c0d 	.word	0x00080c0d
   815a4:	00080f1d 	.word	0x00080f1d
   815a8:	00101112 	.word	0x00101112
   815ac:	00081111 	.word	0x00081111
   815b0:	20070614 	.word	0x20070614
   815b4:	0008224d 	.word	0x0008224d
   815b8:	000821d1 	.word	0x000821d1
   815bc:	e4580000 	.word	0xe4580000
   815c0:	2007061a 	.word	0x2007061a
   815c4:	20070618 	.word	0x20070618

000815c8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   815c8:	b580      	push	{r7, lr}
   815ca:	b082      	sub	sp, #8
   815cc:	af00      	add	r7, sp, #0
   815ce:	6078      	str	r0, [r7, #4]
   815d0:	460b      	mov	r3, r1
   815d2:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   815d4:	887b      	ldrh	r3, [r7, #2]
   815d6:	4619      	mov	r1, r3
   815d8:	6878      	ldr	r0, [r7, #4]
   815da:	4b0c      	ldr	r3, [pc, #48]	; (8160c <sd_mmc_start_read_blocks+0x44>)
   815dc:	4798      	blx	r3
   815de:	4603      	mov	r3, r0
   815e0:	f083 0301 	eor.w	r3, r3, #1
   815e4:	b2db      	uxtb	r3, r3
   815e6:	2b00      	cmp	r3, #0
   815e8:	d004      	beq.n	815f4 <sd_mmc_start_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
   815ea:	4b09      	ldr	r3, [pc, #36]	; (81610 <sd_mmc_start_read_blocks+0x48>)
   815ec:	2200      	movs	r2, #0
   815ee:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   815f0:	2305      	movs	r3, #5
   815f2:	e007      	b.n	81604 <sd_mmc_start_read_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   815f4:	4b06      	ldr	r3, [pc, #24]	; (81610 <sd_mmc_start_read_blocks+0x48>)
   815f6:	881a      	ldrh	r2, [r3, #0]
   815f8:	887b      	ldrh	r3, [r7, #2]
   815fa:	1ad3      	subs	r3, r2, r3
   815fc:	b29a      	uxth	r2, r3
   815fe:	4b04      	ldr	r3, [pc, #16]	; (81610 <sd_mmc_start_read_blocks+0x48>)
   81600:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   81602:	2300      	movs	r3, #0
}
   81604:	4618      	mov	r0, r3
   81606:	3708      	adds	r7, #8
   81608:	46bd      	mov	sp, r7
   8160a:	bd80      	pop	{r7, pc}
   8160c:	00082419 	.word	0x00082419
   81610:	2007061a 	.word	0x2007061a

00081614 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   81614:	b580      	push	{r7, lr}
   81616:	b082      	sub	sp, #8
   81618:	af00      	add	r7, sp, #0
   8161a:	4603      	mov	r3, r0
   8161c:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_read_blocks()) {
   8161e:	4b1b      	ldr	r3, [pc, #108]	; (8168c <sd_mmc_wait_end_of_read_blocks+0x78>)
   81620:	4798      	blx	r3
   81622:	4603      	mov	r3, r0
   81624:	f083 0301 	eor.w	r3, r3, #1
   81628:	b2db      	uxtb	r3, r3
   8162a:	2b00      	cmp	r3, #0
   8162c:	d001      	beq.n	81632 <sd_mmc_wait_end_of_read_blocks+0x1e>
		return SD_MMC_ERR_COMM;
   8162e:	2305      	movs	r3, #5
   81630:	e027      	b.n	81682 <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	if (abort) {
   81632:	79fb      	ldrb	r3, [r7, #7]
   81634:	2b00      	cmp	r3, #0
   81636:	d003      	beq.n	81640 <sd_mmc_wait_end_of_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
   81638:	4b15      	ldr	r3, [pc, #84]	; (81690 <sd_mmc_wait_end_of_read_blocks+0x7c>)
   8163a:	2200      	movs	r2, #0
   8163c:	801a      	strh	r2, [r3, #0]
   8163e:	e005      	b.n	8164c <sd_mmc_wait_end_of_read_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
   81640:	4b13      	ldr	r3, [pc, #76]	; (81690 <sd_mmc_wait_end_of_read_blocks+0x7c>)
   81642:	881b      	ldrh	r3, [r3, #0]
   81644:	2b00      	cmp	r3, #0
   81646:	d001      	beq.n	8164c <sd_mmc_wait_end_of_read_blocks+0x38>
		return SD_MMC_OK;
   81648:	2300      	movs	r3, #0
   8164a:	e01a      	b.n	81682 <sd_mmc_wait_end_of_read_blocks+0x6e>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   8164c:	4b11      	ldr	r3, [pc, #68]	; (81694 <sd_mmc_wait_end_of_read_blocks+0x80>)
   8164e:	881b      	ldrh	r3, [r3, #0]
   81650:	2b01      	cmp	r3, #1
   81652:	d103      	bne.n	8165c <sd_mmc_wait_end_of_read_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   81654:	4b10      	ldr	r3, [pc, #64]	; (81698 <sd_mmc_wait_end_of_read_blocks+0x84>)
   81656:	4798      	blx	r3
		return SD_MMC_OK;
   81658:	2300      	movs	r3, #0
   8165a:	e012      	b.n	81682 <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   8165c:	2100      	movs	r1, #0
   8165e:	f243 100c 	movw	r0, #12556	; 0x310c
   81662:	4b0e      	ldr	r3, [pc, #56]	; (8169c <sd_mmc_wait_end_of_read_blocks+0x88>)
   81664:	4798      	blx	r3
   81666:	4603      	mov	r3, r0
   81668:	f083 0301 	eor.w	r3, r3, #1
   8166c:	b2db      	uxtb	r3, r3
   8166e:	2b00      	cmp	r3, #0
   81670:	d004      	beq.n	8167c <sd_mmc_wait_end_of_read_blocks+0x68>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   81672:	2100      	movs	r1, #0
   81674:	f243 100c 	movw	r0, #12556	; 0x310c
   81678:	4b08      	ldr	r3, [pc, #32]	; (8169c <sd_mmc_wait_end_of_read_blocks+0x88>)
   8167a:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   8167c:	4b06      	ldr	r3, [pc, #24]	; (81698 <sd_mmc_wait_end_of_read_blocks+0x84>)
   8167e:	4798      	blx	r3
	return SD_MMC_OK;
   81680:	2300      	movs	r3, #0
}
   81682:	4618      	mov	r0, r3
   81684:	3708      	adds	r7, #8
   81686:	46bd      	mov	sp, r7
   81688:	bd80      	pop	{r7, pc}
   8168a:	bf00      	nop
   8168c:	00082501 	.word	0x00082501
   81690:	2007061a 	.word	0x2007061a
   81694:	20070618 	.word	0x20070618
   81698:	00080f1d 	.word	0x00080f1d
   8169c:	0008218d 	.word	0x0008218d

000816a0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   816a0:	b590      	push	{r4, r7, lr}
   816a2:	b089      	sub	sp, #36	; 0x24
   816a4:	af02      	add	r7, sp, #8
   816a6:	4603      	mov	r3, r0
   816a8:	6039      	str	r1, [r7, #0]
   816aa:	71fb      	strb	r3, [r7, #7]
   816ac:	4613      	mov	r3, r2
   816ae:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   816b0:	79fb      	ldrb	r3, [r7, #7]
   816b2:	4618      	mov	r0, r3
   816b4:	4b29      	ldr	r3, [pc, #164]	; (8175c <sd_mmc_init_write_blocks+0xbc>)
   816b6:	4798      	blx	r3
   816b8:	4603      	mov	r3, r0
   816ba:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
   816bc:	7bfb      	ldrb	r3, [r7, #15]
   816be:	2b00      	cmp	r3, #0
   816c0:	d001      	beq.n	816c6 <sd_mmc_init_write_blocks+0x26>
		return sd_mmc_err;
   816c2:	7bfb      	ldrb	r3, [r7, #15]
   816c4:	e046      	b.n	81754 <sd_mmc_init_write_blocks+0xb4>
	}
	if (sd_mmc_is_write_protected(slot)) {
   816c6:	79fb      	ldrb	r3, [r7, #7]
   816c8:	4618      	mov	r0, r3
   816ca:	4b25      	ldr	r3, [pc, #148]	; (81760 <sd_mmc_init_write_blocks+0xc0>)
   816cc:	4798      	blx	r3
   816ce:	4603      	mov	r3, r0
   816d0:	2b00      	cmp	r3, #0
   816d2:	d003      	beq.n	816dc <sd_mmc_init_write_blocks+0x3c>
		sd_mmc_deselect_slot();
   816d4:	4b23      	ldr	r3, [pc, #140]	; (81764 <sd_mmc_init_write_blocks+0xc4>)
   816d6:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   816d8:	2307      	movs	r3, #7
   816da:	e03b      	b.n	81754 <sd_mmc_init_write_blocks+0xb4>
	}

	if (nb_block > 1) {
   816dc:	88bb      	ldrh	r3, [r7, #4]
   816de:	2b01      	cmp	r3, #1
   816e0:	d902      	bls.n	816e8 <sd_mmc_init_write_blocks+0x48>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   816e2:	4b21      	ldr	r3, [pc, #132]	; (81768 <sd_mmc_init_write_blocks+0xc8>)
   816e4:	617b      	str	r3, [r7, #20]
   816e6:	e001      	b.n	816ec <sd_mmc_init_write_blocks+0x4c>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   816e8:	4b20      	ldr	r3, [pc, #128]	; (8176c <sd_mmc_init_write_blocks+0xcc>)
   816ea:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   816ec:	4b20      	ldr	r3, [pc, #128]	; (81770 <sd_mmc_init_write_blocks+0xd0>)
   816ee:	681b      	ldr	r3, [r3, #0]
   816f0:	7adb      	ldrb	r3, [r3, #11]
   816f2:	f003 0308 	and.w	r3, r3, #8
   816f6:	2b00      	cmp	r3, #0
   816f8:	d002      	beq.n	81700 <sd_mmc_init_write_blocks+0x60>
		arg = start;
   816fa:	683b      	ldr	r3, [r7, #0]
   816fc:	613b      	str	r3, [r7, #16]
   816fe:	e002      	b.n	81706 <sd_mmc_init_write_blocks+0x66>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   81700:	683b      	ldr	r3, [r7, #0]
   81702:	025b      	lsls	r3, r3, #9
   81704:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   81706:	88ba      	ldrh	r2, [r7, #4]
   81708:	2301      	movs	r3, #1
   8170a:	9300      	str	r3, [sp, #0]
   8170c:	4613      	mov	r3, r2
   8170e:	f44f 7200 	mov.w	r2, #512	; 0x200
   81712:	6939      	ldr	r1, [r7, #16]
   81714:	6978      	ldr	r0, [r7, #20]
   81716:	4c17      	ldr	r4, [pc, #92]	; (81774 <sd_mmc_init_write_blocks+0xd4>)
   81718:	47a0      	blx	r4
   8171a:	4603      	mov	r3, r0
   8171c:	f083 0301 	eor.w	r3, r3, #1
   81720:	b2db      	uxtb	r3, r3
   81722:	2b00      	cmp	r3, #0
   81724:	d003      	beq.n	8172e <sd_mmc_init_write_blocks+0x8e>
		sd_mmc_deselect_slot();
   81726:	4b0f      	ldr	r3, [pc, #60]	; (81764 <sd_mmc_init_write_blocks+0xc4>)
   81728:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   8172a:	2305      	movs	r3, #5
   8172c:	e012      	b.n	81754 <sd_mmc_init_write_blocks+0xb4>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   8172e:	4b12      	ldr	r3, [pc, #72]	; (81778 <sd_mmc_init_write_blocks+0xd8>)
   81730:	4798      	blx	r3
   81732:	60b8      	str	r0, [r7, #8]
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81734:	68ba      	ldr	r2, [r7, #8]
   81736:	4b11      	ldr	r3, [pc, #68]	; (8177c <sd_mmc_init_write_blocks+0xdc>)
   81738:	4013      	ands	r3, r2
   8173a:	2b00      	cmp	r3, #0
   8173c:	d003      	beq.n	81746 <sd_mmc_init_write_blocks+0xa6>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   8173e:	4b09      	ldr	r3, [pc, #36]	; (81764 <sd_mmc_init_write_blocks+0xc4>)
   81740:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
   81742:	2305      	movs	r3, #5
   81744:	e006      	b.n	81754 <sd_mmc_init_write_blocks+0xb4>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   81746:	4a0e      	ldr	r2, [pc, #56]	; (81780 <sd_mmc_init_write_blocks+0xe0>)
   81748:	88bb      	ldrh	r3, [r7, #4]
   8174a:	8013      	strh	r3, [r2, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   8174c:	4a0d      	ldr	r2, [pc, #52]	; (81784 <sd_mmc_init_write_blocks+0xe4>)
   8174e:	88bb      	ldrh	r3, [r7, #4]
   81750:	8013      	strh	r3, [r2, #0]
	return SD_MMC_OK;
   81752:	2300      	movs	r3, #0
}
   81754:	4618      	mov	r0, r3
   81756:	371c      	adds	r7, #28
   81758:	46bd      	mov	sp, r7
   8175a:	bd90      	pop	{r4, r7, pc}
   8175c:	00080e31 	.word	0x00080e31
   81760:	000814c5 	.word	0x000814c5
   81764:	00080f1d 	.word	0x00080f1d
   81768:	00109119 	.word	0x00109119
   8176c:	00089118 	.word	0x00089118
   81770:	20070614 	.word	0x20070614
   81774:	0008224d 	.word	0x0008224d
   81778:	000821d1 	.word	0x000821d1
   8177c:	e4580000 	.word	0xe4580000
   81780:	2007061a 	.word	0x2007061a
   81784:	20070618 	.word	0x20070618

00081788 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   81788:	b580      	push	{r7, lr}
   8178a:	b082      	sub	sp, #8
   8178c:	af00      	add	r7, sp, #0
   8178e:	6078      	str	r0, [r7, #4]
   81790:	460b      	mov	r3, r1
   81792:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   81794:	887b      	ldrh	r3, [r7, #2]
   81796:	4619      	mov	r1, r3
   81798:	6878      	ldr	r0, [r7, #4]
   8179a:	4b0c      	ldr	r3, [pc, #48]	; (817cc <sd_mmc_start_write_blocks+0x44>)
   8179c:	4798      	blx	r3
   8179e:	4603      	mov	r3, r0
   817a0:	f083 0301 	eor.w	r3, r3, #1
   817a4:	b2db      	uxtb	r3, r3
   817a6:	2b00      	cmp	r3, #0
   817a8:	d004      	beq.n	817b4 <sd_mmc_start_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
   817aa:	4b09      	ldr	r3, [pc, #36]	; (817d0 <sd_mmc_start_write_blocks+0x48>)
   817ac:	2200      	movs	r2, #0
   817ae:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   817b0:	2305      	movs	r3, #5
   817b2:	e007      	b.n	817c4 <sd_mmc_start_write_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   817b4:	4b06      	ldr	r3, [pc, #24]	; (817d0 <sd_mmc_start_write_blocks+0x48>)
   817b6:	881a      	ldrh	r2, [r3, #0]
   817b8:	887b      	ldrh	r3, [r7, #2]
   817ba:	1ad3      	subs	r3, r2, r3
   817bc:	b29a      	uxth	r2, r3
   817be:	4b04      	ldr	r3, [pc, #16]	; (817d0 <sd_mmc_start_write_blocks+0x48>)
   817c0:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   817c2:	2300      	movs	r3, #0
}
   817c4:	4618      	mov	r0, r3
   817c6:	3708      	adds	r7, #8
   817c8:	46bd      	mov	sp, r7
   817ca:	bd80      	pop	{r7, pc}
   817cc:	0008257d 	.word	0x0008257d
   817d0:	2007061a 	.word	0x2007061a

000817d4 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   817d4:	b580      	push	{r7, lr}
   817d6:	b082      	sub	sp, #8
   817d8:	af00      	add	r7, sp, #0
   817da:	4603      	mov	r3, r0
   817dc:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_write_blocks()) {
   817de:	4b1a      	ldr	r3, [pc, #104]	; (81848 <sd_mmc_wait_end_of_write_blocks+0x74>)
   817e0:	4798      	blx	r3
   817e2:	4603      	mov	r3, r0
   817e4:	f083 0301 	eor.w	r3, r3, #1
   817e8:	b2db      	uxtb	r3, r3
   817ea:	2b00      	cmp	r3, #0
   817ec:	d001      	beq.n	817f2 <sd_mmc_wait_end_of_write_blocks+0x1e>
		return SD_MMC_ERR_COMM;
   817ee:	2305      	movs	r3, #5
   817f0:	e026      	b.n	81840 <sd_mmc_wait_end_of_write_blocks+0x6c>
	}
	if (abort) {
   817f2:	79fb      	ldrb	r3, [r7, #7]
   817f4:	2b00      	cmp	r3, #0
   817f6:	d003      	beq.n	81800 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
   817f8:	4b14      	ldr	r3, [pc, #80]	; (8184c <sd_mmc_wait_end_of_write_blocks+0x78>)
   817fa:	2200      	movs	r2, #0
   817fc:	801a      	strh	r2, [r3, #0]
   817fe:	e005      	b.n	8180c <sd_mmc_wait_end_of_write_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
   81800:	4b12      	ldr	r3, [pc, #72]	; (8184c <sd_mmc_wait_end_of_write_blocks+0x78>)
   81802:	881b      	ldrh	r3, [r3, #0]
   81804:	2b00      	cmp	r3, #0
   81806:	d001      	beq.n	8180c <sd_mmc_wait_end_of_write_blocks+0x38>
		return SD_MMC_OK;
   81808:	2300      	movs	r3, #0
   8180a:	e019      	b.n	81840 <sd_mmc_wait_end_of_write_blocks+0x6c>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   8180c:	4b10      	ldr	r3, [pc, #64]	; (81850 <sd_mmc_wait_end_of_write_blocks+0x7c>)
   8180e:	881b      	ldrh	r3, [r3, #0]
   81810:	2b01      	cmp	r3, #1
   81812:	d103      	bne.n	8181c <sd_mmc_wait_end_of_write_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   81814:	4b0f      	ldr	r3, [pc, #60]	; (81854 <sd_mmc_wait_end_of_write_blocks+0x80>)
   81816:	4798      	blx	r3
		return SD_MMC_OK;
   81818:	2300      	movs	r3, #0
   8181a:	e011      	b.n	81840 <sd_mmc_wait_end_of_write_blocks+0x6c>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   8181c:	2100      	movs	r1, #0
   8181e:	f243 100c 	movw	r0, #12556	; 0x310c
   81822:	4b0d      	ldr	r3, [pc, #52]	; (81858 <sd_mmc_wait_end_of_write_blocks+0x84>)
   81824:	4798      	blx	r3
   81826:	4603      	mov	r3, r0
   81828:	f083 0301 	eor.w	r3, r3, #1
   8182c:	b2db      	uxtb	r3, r3
   8182e:	2b00      	cmp	r3, #0
   81830:	d003      	beq.n	8183a <sd_mmc_wait_end_of_write_blocks+0x66>
			sd_mmc_deselect_slot();
   81832:	4b08      	ldr	r3, [pc, #32]	; (81854 <sd_mmc_wait_end_of_write_blocks+0x80>)
   81834:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
   81836:	2305      	movs	r3, #5
   81838:	e002      	b.n	81840 <sd_mmc_wait_end_of_write_blocks+0x6c>
		}
	}
	sd_mmc_deselect_slot();
   8183a:	4b06      	ldr	r3, [pc, #24]	; (81854 <sd_mmc_wait_end_of_write_blocks+0x80>)
   8183c:	4798      	blx	r3
	return SD_MMC_OK;
   8183e:	2300      	movs	r3, #0
}
   81840:	4618      	mov	r0, r3
   81842:	3708      	adds	r7, #8
   81844:	46bd      	mov	sp, r7
   81846:	bd80      	pop	{r7, pc}
   81848:	00082659 	.word	0x00082659
   8184c:	2007061a 	.word	0x2007061a
   81850:	20070618 	.word	0x20070618
   81854:	00080f1d 	.word	0x00080f1d
   81858:	0008218d 	.word	0x0008218d

0008185c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   8185c:	b580      	push	{r7, lr}
   8185e:	b082      	sub	sp, #8
   81860:	af00      	add	r7, sp, #0
   81862:	4603      	mov	r3, r0
   81864:	71fb      	strb	r3, [r7, #7]
	switch (sd_mmc_check(slot))
   81866:	79fb      	ldrb	r3, [r7, #7]
   81868:	4618      	mov	r0, r3
   8186a:	4b15      	ldr	r3, [pc, #84]	; (818c0 <sd_mmc_test_unit_ready+0x64>)
   8186c:	4798      	blx	r3
   8186e:	4603      	mov	r3, r0
   81870:	2b01      	cmp	r3, #1
   81872:	d017      	beq.n	818a4 <sd_mmc_test_unit_ready+0x48>
   81874:	2b02      	cmp	r3, #2
   81876:	d017      	beq.n	818a8 <sd_mmc_test_unit_ready+0x4c>
   81878:	2b00      	cmp	r3, #0
   8187a:	d11b      	bne.n	818b4 <sd_mmc_test_unit_ready+0x58>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   8187c:	79fb      	ldrb	r3, [r7, #7]
   8187e:	4a11      	ldr	r2, [pc, #68]	; (818c4 <sd_mmc_test_unit_ready+0x68>)
   81880:	5cd3      	ldrb	r3, [r2, r3]
   81882:	2b00      	cmp	r3, #0
   81884:	d001      	beq.n	8188a <sd_mmc_test_unit_ready+0x2e>
			return CTRL_NO_PRESENT;
   81886:	2302      	movs	r3, #2
   81888:	e015      	b.n	818b6 <sd_mmc_test_unit_ready+0x5a>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   8188a:	79fb      	ldrb	r3, [r7, #7]
   8188c:	4618      	mov	r0, r3
   8188e:	4b0e      	ldr	r3, [pc, #56]	; (818c8 <sd_mmc_test_unit_ready+0x6c>)
   81890:	4798      	blx	r3
   81892:	4603      	mov	r3, r0
   81894:	f003 0303 	and.w	r3, r3, #3
   81898:	2b00      	cmp	r3, #0
   8189a:	d001      	beq.n	818a0 <sd_mmc_test_unit_ready+0x44>
			return CTRL_GOOD;
   8189c:	2300      	movs	r3, #0
   8189e:	e00a      	b.n	818b6 <sd_mmc_test_unit_ready+0x5a>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   818a0:	2302      	movs	r3, #2
   818a2:	e008      	b.n	818b6 <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   818a4:	2303      	movs	r3, #3
   818a6:	e006      	b.n	818b6 <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   818a8:	79fb      	ldrb	r3, [r7, #7]
   818aa:	4a06      	ldr	r2, [pc, #24]	; (818c4 <sd_mmc_test_unit_ready+0x68>)
   818ac:	2100      	movs	r1, #0
   818ae:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   818b0:	2302      	movs	r3, #2
   818b2:	e000      	b.n	818b6 <sd_mmc_test_unit_ready+0x5a>

	default:
		return CTRL_FAIL;
   818b4:	2301      	movs	r3, #1
	}
}
   818b6:	4618      	mov	r0, r3
   818b8:	3708      	adds	r7, #8
   818ba:	46bd      	mov	sp, r7
   818bc:	bd80      	pop	{r7, pc}
   818be:	bf00      	nop
   818c0:	000813e9 	.word	0x000813e9
   818c4:	2007061c 	.word	0x2007061c
   818c8:	0008144d 	.word	0x0008144d

000818cc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   818cc:	b580      	push	{r7, lr}
   818ce:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   818d0:	2000      	movs	r0, #0
   818d2:	4b02      	ldr	r3, [pc, #8]	; (818dc <sd_mmc_test_unit_ready_0+0x10>)
   818d4:	4798      	blx	r3
   818d6:	4603      	mov	r3, r0
}
   818d8:	4618      	mov	r0, r3
   818da:	bd80      	pop	{r7, pc}
   818dc:	0008185d 	.word	0x0008185d

000818e0 <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
   818e0:	b580      	push	{r7, lr}
   818e2:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(1);
   818e4:	2001      	movs	r0, #1
   818e6:	4b02      	ldr	r3, [pc, #8]	; (818f0 <sd_mmc_test_unit_ready_1+0x10>)
   818e8:	4798      	blx	r3
   818ea:	4603      	mov	r3, r0
}
   818ec:	4618      	mov	r0, r3
   818ee:	bd80      	pop	{r7, pc}
   818f0:	0008185d 	.word	0x0008185d

000818f4 <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   818f4:	b580      	push	{r7, lr}
   818f6:	b082      	sub	sp, #8
   818f8:	af00      	add	r7, sp, #0
   818fa:	4603      	mov	r3, r0
   818fc:	6039      	str	r1, [r7, #0]
   818fe:	71fb      	strb	r3, [r7, #7]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   81900:	79fb      	ldrb	r3, [r7, #7]
   81902:	4618      	mov	r0, r3
   81904:	4b07      	ldr	r3, [pc, #28]	; (81924 <sd_mmc_read_capacity+0x30>)
   81906:	4798      	blx	r3
   81908:	4603      	mov	r3, r0
   8190a:	005b      	lsls	r3, r3, #1
   8190c:	1e5a      	subs	r2, r3, #1
   8190e:	683b      	ldr	r3, [r7, #0]
   81910:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   81912:	79fb      	ldrb	r3, [r7, #7]
   81914:	4618      	mov	r0, r3
   81916:	4b04      	ldr	r3, [pc, #16]	; (81928 <sd_mmc_read_capacity+0x34>)
   81918:	4798      	blx	r3
   8191a:	4603      	mov	r3, r0
}
   8191c:	4618      	mov	r0, r3
   8191e:	3708      	adds	r7, #8
   81920:	46bd      	mov	sp, r7
   81922:	bd80      	pop	{r7, pc}
   81924:	00081489 	.word	0x00081489
   81928:	0008185d 	.word	0x0008185d

0008192c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   8192c:	b580      	push	{r7, lr}
   8192e:	b082      	sub	sp, #8
   81930:	af00      	add	r7, sp, #0
   81932:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   81934:	6879      	ldr	r1, [r7, #4]
   81936:	2000      	movs	r0, #0
   81938:	4b03      	ldr	r3, [pc, #12]	; (81948 <sd_mmc_read_capacity_0+0x1c>)
   8193a:	4798      	blx	r3
   8193c:	4603      	mov	r3, r0
}
   8193e:	4618      	mov	r0, r3
   81940:	3708      	adds	r7, #8
   81942:	46bd      	mov	sp, r7
   81944:	bd80      	pop	{r7, pc}
   81946:	bf00      	nop
   81948:	000818f5 	.word	0x000818f5

0008194c <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
   8194c:	b580      	push	{r7, lr}
   8194e:	b082      	sub	sp, #8
   81950:	af00      	add	r7, sp, #0
   81952:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(1, nb_sector);
   81954:	6879      	ldr	r1, [r7, #4]
   81956:	2001      	movs	r0, #1
   81958:	4b03      	ldr	r3, [pc, #12]	; (81968 <sd_mmc_read_capacity_1+0x1c>)
   8195a:	4798      	blx	r3
   8195c:	4603      	mov	r3, r0
}
   8195e:	4618      	mov	r0, r3
   81960:	3708      	adds	r7, #8
   81962:	46bd      	mov	sp, r7
   81964:	bd80      	pop	{r7, pc}
   81966:	bf00      	nop
   81968:	000818f5 	.word	0x000818f5

0008196c <sd_mmc_unload>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   8196c:	b480      	push	{r7}
   8196e:	b083      	sub	sp, #12
   81970:	af00      	add	r7, sp, #0
   81972:	4603      	mov	r3, r0
   81974:	460a      	mov	r2, r1
   81976:	71fb      	strb	r3, [r7, #7]
   81978:	4613      	mov	r3, r2
   8197a:	71bb      	strb	r3, [r7, #6]
	sd_mmc_ejected[slot] = unload;
   8197c:	79fb      	ldrb	r3, [r7, #7]
   8197e:	4904      	ldr	r1, [pc, #16]	; (81990 <sd_mmc_unload+0x24>)
   81980:	79ba      	ldrb	r2, [r7, #6]
   81982:	54ca      	strb	r2, [r1, r3]
	return true;
   81984:	2301      	movs	r3, #1
}
   81986:	4618      	mov	r0, r3
   81988:	370c      	adds	r7, #12
   8198a:	46bd      	mov	sp, r7
   8198c:	bc80      	pop	{r7}
   8198e:	4770      	bx	lr
   81990:	2007061c 	.word	0x2007061c

00081994 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   81994:	b580      	push	{r7, lr}
   81996:	b082      	sub	sp, #8
   81998:	af00      	add	r7, sp, #0
   8199a:	4603      	mov	r3, r0
   8199c:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_unload(0, unload);
   8199e:	79fb      	ldrb	r3, [r7, #7]
   819a0:	4619      	mov	r1, r3
   819a2:	2000      	movs	r0, #0
   819a4:	4b03      	ldr	r3, [pc, #12]	; (819b4 <sd_mmc_unload_0+0x20>)
   819a6:	4798      	blx	r3
   819a8:	4603      	mov	r3, r0
}
   819aa:	4618      	mov	r0, r3
   819ac:	3708      	adds	r7, #8
   819ae:	46bd      	mov	sp, r7
   819b0:	bd80      	pop	{r7, pc}
   819b2:	bf00      	nop
   819b4:	0008196d 	.word	0x0008196d

000819b8 <sd_mmc_unload_1>:

bool sd_mmc_unload_1(bool unload)
{
   819b8:	b580      	push	{r7, lr}
   819ba:	b082      	sub	sp, #8
   819bc:	af00      	add	r7, sp, #0
   819be:	4603      	mov	r3, r0
   819c0:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_unload(1, unload);
   819c2:	79fb      	ldrb	r3, [r7, #7]
   819c4:	4619      	mov	r1, r3
   819c6:	2001      	movs	r0, #1
   819c8:	4b03      	ldr	r3, [pc, #12]	; (819d8 <sd_mmc_unload_1+0x20>)
   819ca:	4798      	blx	r3
   819cc:	4603      	mov	r3, r0
}
   819ce:	4618      	mov	r0, r3
   819d0:	3708      	adds	r7, #8
   819d2:	46bd      	mov	sp, r7
   819d4:	bd80      	pop	{r7, pc}
   819d6:	bf00      	nop
   819d8:	0008196d 	.word	0x0008196d

000819dc <sd_mmc_wr_protect>:

bool sd_mmc_wr_protect(uint8_t slot)
{
   819dc:	b580      	push	{r7, lr}
   819de:	b082      	sub	sp, #8
   819e0:	af00      	add	r7, sp, #0
   819e2:	4603      	mov	r3, r0
   819e4:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_is_write_protected(slot);
   819e6:	79fb      	ldrb	r3, [r7, #7]
   819e8:	4618      	mov	r0, r3
   819ea:	4b03      	ldr	r3, [pc, #12]	; (819f8 <sd_mmc_wr_protect+0x1c>)
   819ec:	4798      	blx	r3
   819ee:	4603      	mov	r3, r0
}
   819f0:	4618      	mov	r0, r3
   819f2:	3708      	adds	r7, #8
   819f4:	46bd      	mov	sp, r7
   819f6:	bd80      	pop	{r7, pc}
   819f8:	000814c5 	.word	0x000814c5

000819fc <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   819fc:	b580      	push	{r7, lr}
   819fe:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   81a00:	2000      	movs	r0, #0
   81a02:	4b02      	ldr	r3, [pc, #8]	; (81a0c <sd_mmc_wr_protect_0+0x10>)
   81a04:	4798      	blx	r3
   81a06:	4603      	mov	r3, r0
}
   81a08:	4618      	mov	r0, r3
   81a0a:	bd80      	pop	{r7, pc}
   81a0c:	000819dd 	.word	0x000819dd

00081a10 <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
   81a10:	b580      	push	{r7, lr}
   81a12:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(1);
   81a14:	2001      	movs	r0, #1
   81a16:	4b02      	ldr	r3, [pc, #8]	; (81a20 <sd_mmc_wr_protect_1+0x10>)
   81a18:	4798      	blx	r3
   81a1a:	4603      	mov	r3, r0
}
   81a1c:	4618      	mov	r0, r3
   81a1e:	bd80      	pop	{r7, pc}
   81a20:	000819dd 	.word	0x000819dd

00081a24 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
   81a24:	b480      	push	{r7}
   81a26:	b083      	sub	sp, #12
   81a28:	af00      	add	r7, sp, #0
   81a2a:	4603      	mov	r3, r0
   81a2c:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	return true;
   81a2e:	2301      	movs	r3, #1
}
   81a30:	4618      	mov	r0, r3
   81a32:	370c      	adds	r7, #12
   81a34:	46bd      	mov	sp, r7
   81a36:	bc80      	pop	{r7}
   81a38:	4770      	bx	lr
	...

00081a3c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   81a3c:	b580      	push	{r7, lr}
   81a3e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   81a40:	2000      	movs	r0, #0
   81a42:	4b02      	ldr	r3, [pc, #8]	; (81a4c <sd_mmc_removal_0+0x10>)
   81a44:	4798      	blx	r3
   81a46:	4603      	mov	r3, r0
}
   81a48:	4618      	mov	r0, r3
   81a4a:	bd80      	pop	{r7, pc}
   81a4c:	00081a25 	.word	0x00081a25

00081a50 <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
   81a50:	b580      	push	{r7, lr}
   81a52:	af00      	add	r7, sp, #0
	return sd_mmc_removal(1);
   81a54:	2001      	movs	r0, #1
   81a56:	4b02      	ldr	r3, [pc, #8]	; (81a60 <sd_mmc_removal_1+0x10>)
   81a58:	4798      	blx	r3
   81a5a:	4603      	mov	r3, r0
}
   81a5c:	4618      	mov	r0, r3
   81a5e:	bd80      	pop	{r7, pc}
   81a60:	00081a25 	.word	0x00081a25

00081a64 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   81a64:	b580      	push	{r7, lr}
   81a66:	b084      	sub	sp, #16
   81a68:	af00      	add	r7, sp, #0
   81a6a:	4603      	mov	r3, r0
   81a6c:	60b9      	str	r1, [r7, #8]
   81a6e:	607a      	str	r2, [r7, #4]
   81a70:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   81a72:	7bfb      	ldrb	r3, [r7, #15]
   81a74:	2201      	movs	r2, #1
   81a76:	68b9      	ldr	r1, [r7, #8]
   81a78:	4618      	mov	r0, r3
   81a7a:	4b11      	ldr	r3, [pc, #68]	; (81ac0 <sd_mmc_mem_2_ram+0x5c>)
   81a7c:	4798      	blx	r3
   81a7e:	4603      	mov	r3, r0
   81a80:	2b00      	cmp	r3, #0
   81a82:	d005      	beq.n	81a90 <sd_mmc_mem_2_ram+0x2c>
   81a84:	2b02      	cmp	r3, #2
   81a86:	d101      	bne.n	81a8c <sd_mmc_mem_2_ram+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   81a88:	2302      	movs	r3, #2
   81a8a:	e014      	b.n	81ab6 <sd_mmc_mem_2_ram+0x52>
	default:
		return CTRL_FAIL;
   81a8c:	2301      	movs	r3, #1
   81a8e:	e012      	b.n	81ab6 <sd_mmc_mem_2_ram+0x52>
		break;
   81a90:	bf00      	nop
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   81a92:	2101      	movs	r1, #1
   81a94:	6878      	ldr	r0, [r7, #4]
   81a96:	4b0b      	ldr	r3, [pc, #44]	; (81ac4 <sd_mmc_mem_2_ram+0x60>)
   81a98:	4798      	blx	r3
   81a9a:	4603      	mov	r3, r0
   81a9c:	2b00      	cmp	r3, #0
   81a9e:	d001      	beq.n	81aa4 <sd_mmc_mem_2_ram+0x40>
		return CTRL_FAIL;
   81aa0:	2301      	movs	r3, #1
   81aa2:	e008      	b.n	81ab6 <sd_mmc_mem_2_ram+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   81aa4:	2000      	movs	r0, #0
   81aa6:	4b08      	ldr	r3, [pc, #32]	; (81ac8 <sd_mmc_mem_2_ram+0x64>)
   81aa8:	4798      	blx	r3
   81aaa:	4603      	mov	r3, r0
   81aac:	2b00      	cmp	r3, #0
   81aae:	d001      	beq.n	81ab4 <sd_mmc_mem_2_ram+0x50>
		return CTRL_FAIL;
   81ab0:	2301      	movs	r3, #1
   81ab2:	e000      	b.n	81ab6 <sd_mmc_mem_2_ram+0x52>
	}
	return CTRL_GOOD;
   81ab4:	2300      	movs	r3, #0
}
   81ab6:	4618      	mov	r0, r3
   81ab8:	3710      	adds	r7, #16
   81aba:	46bd      	mov	sp, r7
   81abc:	bd80      	pop	{r7, pc}
   81abe:	bf00      	nop
   81ac0:	000814dd 	.word	0x000814dd
   81ac4:	000815c9 	.word	0x000815c9
   81ac8:	00081615 	.word	0x00081615

00081acc <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   81acc:	b580      	push	{r7, lr}
   81ace:	b082      	sub	sp, #8
   81ad0:	af00      	add	r7, sp, #0
   81ad2:	6078      	str	r0, [r7, #4]
   81ad4:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   81ad6:	683a      	ldr	r2, [r7, #0]
   81ad8:	6879      	ldr	r1, [r7, #4]
   81ada:	2000      	movs	r0, #0
   81adc:	4b03      	ldr	r3, [pc, #12]	; (81aec <sd_mmc_mem_2_ram_0+0x20>)
   81ade:	4798      	blx	r3
   81ae0:	4603      	mov	r3, r0
}
   81ae2:	4618      	mov	r0, r3
   81ae4:	3708      	adds	r7, #8
   81ae6:	46bd      	mov	sp, r7
   81ae8:	bd80      	pop	{r7, pc}
   81aea:	bf00      	nop
   81aec:	00081a65 	.word	0x00081a65

00081af0 <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
   81af0:	b580      	push	{r7, lr}
   81af2:	b082      	sub	sp, #8
   81af4:	af00      	add	r7, sp, #0
   81af6:	6078      	str	r0, [r7, #4]
   81af8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(1, addr, ram);
   81afa:	683a      	ldr	r2, [r7, #0]
   81afc:	6879      	ldr	r1, [r7, #4]
   81afe:	2001      	movs	r0, #1
   81b00:	4b03      	ldr	r3, [pc, #12]	; (81b10 <sd_mmc_mem_2_ram_1+0x20>)
   81b02:	4798      	blx	r3
   81b04:	4603      	mov	r3, r0
}
   81b06:	4618      	mov	r0, r3
   81b08:	3708      	adds	r7, #8
   81b0a:	46bd      	mov	sp, r7
   81b0c:	bd80      	pop	{r7, pc}
   81b0e:	bf00      	nop
   81b10:	00081a65 	.word	0x00081a65

00081b14 <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   81b14:	b580      	push	{r7, lr}
   81b16:	b084      	sub	sp, #16
   81b18:	af00      	add	r7, sp, #0
   81b1a:	4603      	mov	r3, r0
   81b1c:	60b9      	str	r1, [r7, #8]
   81b1e:	607a      	str	r2, [r7, #4]
   81b20:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   81b22:	7bfb      	ldrb	r3, [r7, #15]
   81b24:	2201      	movs	r2, #1
   81b26:	68b9      	ldr	r1, [r7, #8]
   81b28:	4618      	mov	r0, r3
   81b2a:	4b11      	ldr	r3, [pc, #68]	; (81b70 <sd_mmc_ram_2_mem+0x5c>)
   81b2c:	4798      	blx	r3
   81b2e:	4603      	mov	r3, r0
   81b30:	2b00      	cmp	r3, #0
   81b32:	d005      	beq.n	81b40 <sd_mmc_ram_2_mem+0x2c>
   81b34:	2b02      	cmp	r3, #2
   81b36:	d101      	bne.n	81b3c <sd_mmc_ram_2_mem+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   81b38:	2302      	movs	r3, #2
   81b3a:	e014      	b.n	81b66 <sd_mmc_ram_2_mem+0x52>
	default:
		return CTRL_FAIL;
   81b3c:	2301      	movs	r3, #1
   81b3e:	e012      	b.n	81b66 <sd_mmc_ram_2_mem+0x52>
		break;
   81b40:	bf00      	nop
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   81b42:	2101      	movs	r1, #1
   81b44:	6878      	ldr	r0, [r7, #4]
   81b46:	4b0b      	ldr	r3, [pc, #44]	; (81b74 <sd_mmc_ram_2_mem+0x60>)
   81b48:	4798      	blx	r3
   81b4a:	4603      	mov	r3, r0
   81b4c:	2b00      	cmp	r3, #0
   81b4e:	d001      	beq.n	81b54 <sd_mmc_ram_2_mem+0x40>
		return CTRL_FAIL;
   81b50:	2301      	movs	r3, #1
   81b52:	e008      	b.n	81b66 <sd_mmc_ram_2_mem+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   81b54:	2000      	movs	r0, #0
   81b56:	4b08      	ldr	r3, [pc, #32]	; (81b78 <sd_mmc_ram_2_mem+0x64>)
   81b58:	4798      	blx	r3
   81b5a:	4603      	mov	r3, r0
   81b5c:	2b00      	cmp	r3, #0
   81b5e:	d001      	beq.n	81b64 <sd_mmc_ram_2_mem+0x50>
		return CTRL_FAIL;
   81b60:	2301      	movs	r3, #1
   81b62:	e000      	b.n	81b66 <sd_mmc_ram_2_mem+0x52>
	}
	return CTRL_GOOD;
   81b64:	2300      	movs	r3, #0
}
   81b66:	4618      	mov	r0, r3
   81b68:	3710      	adds	r7, #16
   81b6a:	46bd      	mov	sp, r7
   81b6c:	bd80      	pop	{r7, pc}
   81b6e:	bf00      	nop
   81b70:	000816a1 	.word	0x000816a1
   81b74:	00081789 	.word	0x00081789
   81b78:	000817d5 	.word	0x000817d5

00081b7c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   81b7c:	b580      	push	{r7, lr}
   81b7e:	b082      	sub	sp, #8
   81b80:	af00      	add	r7, sp, #0
   81b82:	6078      	str	r0, [r7, #4]
   81b84:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   81b86:	683a      	ldr	r2, [r7, #0]
   81b88:	6879      	ldr	r1, [r7, #4]
   81b8a:	2000      	movs	r0, #0
   81b8c:	4b03      	ldr	r3, [pc, #12]	; (81b9c <sd_mmc_ram_2_mem_0+0x20>)
   81b8e:	4798      	blx	r3
   81b90:	4603      	mov	r3, r0
}
   81b92:	4618      	mov	r0, r3
   81b94:	3708      	adds	r7, #8
   81b96:	46bd      	mov	sp, r7
   81b98:	bd80      	pop	{r7, pc}
   81b9a:	bf00      	nop
   81b9c:	00081b15 	.word	0x00081b15

00081ba0 <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
   81ba0:	b580      	push	{r7, lr}
   81ba2:	b082      	sub	sp, #8
   81ba4:	af00      	add	r7, sp, #0
   81ba6:	6078      	str	r0, [r7, #4]
   81ba8:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(1, addr, ram);
   81baa:	683a      	ldr	r2, [r7, #0]
   81bac:	6879      	ldr	r1, [r7, #4]
   81bae:	2001      	movs	r0, #1
   81bb0:	4b03      	ldr	r3, [pc, #12]	; (81bc0 <sd_mmc_ram_2_mem_1+0x20>)
   81bb2:	4798      	blx	r3
   81bb4:	4603      	mov	r3, r0
}
   81bb6:	4618      	mov	r0, r3
   81bb8:	3708      	adds	r7, #8
   81bba:	46bd      	mov	sp, r7
   81bbc:	bd80      	pop	{r7, pc}
   81bbe:	bf00      	nop
   81bc0:	00081b15 	.word	0x00081b15

00081bc4 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   81bc4:	b580      	push	{r7, lr}
   81bc6:	b082      	sub	sp, #8
   81bc8:	af00      	add	r7, sp, #0
   81bca:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   81bcc:	6878      	ldr	r0, [r7, #4]
   81bce:	4b04      	ldr	r3, [pc, #16]	; (81be0 <usart_spi_enable+0x1c>)
   81bd0:	4798      	blx	r3
	usart_enable_rx(p_usart);
   81bd2:	6878      	ldr	r0, [r7, #4]
   81bd4:	4b03      	ldr	r3, [pc, #12]	; (81be4 <usart_spi_enable+0x20>)
   81bd6:	4798      	blx	r3
}
   81bd8:	bf00      	nop
   81bda:	3708      	adds	r7, #8
   81bdc:	46bd      	mov	sp, r7
   81bde:	bd80      	pop	{r7, pc}
   81be0:	00082ad9 	.word	0x00082ad9
   81be4:	00082b21 	.word	0x00082b21

00081be8 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   81be8:	b580      	push	{r7, lr}
   81bea:	b082      	sub	sp, #8
   81bec:	af00      	add	r7, sp, #0
   81bee:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   81bf0:	6878      	ldr	r0, [r7, #4]
   81bf2:	4b04      	ldr	r3, [pc, #16]	; (81c04 <usart_spi_disable+0x1c>)
   81bf4:	4798      	blx	r3
	usart_disable_rx(p_usart);
   81bf6:	6878      	ldr	r0, [r7, #4]
   81bf8:	4b03      	ldr	r3, [pc, #12]	; (81c08 <usart_spi_disable+0x20>)
   81bfa:	4798      	blx	r3
}
   81bfc:	bf00      	nop
   81bfe:	3708      	adds	r7, #8
   81c00:	46bd      	mov	sp, r7
   81c02:	bd80      	pop	{r7, pc}
   81c04:	00082af1 	.word	0x00082af1
   81c08:	00082b39 	.word	0x00082b39

00081c0c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   81c0c:	b580      	push	{r7, lr}
   81c0e:	b084      	sub	sp, #16
   81c10:	af00      	add	r7, sp, #0
   81c12:	4603      	mov	r3, r0
   81c14:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   81c16:	79fb      	ldrb	r3, [r7, #7]
   81c18:	2b01      	cmp	r3, #1
   81c1a:	d807      	bhi.n	81c2c <mem_test_unit_ready+0x20>
   81c1c:	79fb      	ldrb	r3, [r7, #7]
   81c1e:	4a07      	ldr	r2, [pc, #28]	; (81c3c <mem_test_unit_ready+0x30>)
   81c20:	015b      	lsls	r3, r3, #5
   81c22:	4413      	add	r3, r2
   81c24:	681b      	ldr	r3, [r3, #0]
   81c26:	4798      	blx	r3
   81c28:	4603      	mov	r3, r0
   81c2a:	e000      	b.n	81c2e <mem_test_unit_ready+0x22>
   81c2c:	2301      	movs	r3, #1
  status =
   81c2e:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   81c30:	7bfb      	ldrb	r3, [r7, #15]
}
   81c32:	4618      	mov	r0, r3
   81c34:	3710      	adds	r7, #16
   81c36:	46bd      	mov	sp, r7
   81c38:	bd80      	pop	{r7, pc}
   81c3a:	bf00      	nop
   81c3c:	000877cc 	.word	0x000877cc

00081c40 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   81c40:	b580      	push	{r7, lr}
   81c42:	b084      	sub	sp, #16
   81c44:	af00      	add	r7, sp, #0
   81c46:	4603      	mov	r3, r0
   81c48:	6039      	str	r1, [r7, #0]
   81c4a:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   81c4c:	79fb      	ldrb	r3, [r7, #7]
   81c4e:	2b01      	cmp	r3, #1
   81c50:	d809      	bhi.n	81c66 <mem_read_capacity+0x26>
   81c52:	79fb      	ldrb	r3, [r7, #7]
   81c54:	4a07      	ldr	r2, [pc, #28]	; (81c74 <mem_read_capacity+0x34>)
   81c56:	015b      	lsls	r3, r3, #5
   81c58:	4413      	add	r3, r2
   81c5a:	3304      	adds	r3, #4
   81c5c:	681b      	ldr	r3, [r3, #0]
   81c5e:	6838      	ldr	r0, [r7, #0]
   81c60:	4798      	blx	r3
   81c62:	4603      	mov	r3, r0
   81c64:	e000      	b.n	81c68 <mem_read_capacity+0x28>
   81c66:	2301      	movs	r3, #1
  status =
   81c68:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   81c6a:	7bfb      	ldrb	r3, [r7, #15]
}
   81c6c:	4618      	mov	r0, r3
   81c6e:	3710      	adds	r7, #16
   81c70:	46bd      	mov	sp, r7
   81c72:	bd80      	pop	{r7, pc}
   81c74:	000877cc 	.word	0x000877cc

00081c78 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   81c78:	b480      	push	{r7}
   81c7a:	b085      	sub	sp, #20
   81c7c:	af00      	add	r7, sp, #0
   81c7e:	4603      	mov	r3, r0
   81c80:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   81c82:	79fb      	ldrb	r3, [r7, #7]
   81c84:	2b01      	cmp	r3, #1
   81c86:	bf94      	ite	ls
   81c88:	2301      	movls	r3, #1
   81c8a:	2300      	movhi	r3, #0
   81c8c:	b2db      	uxtb	r3, r3
  sector_size =
   81c8e:	73fb      	strb	r3, [r7, #15]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   81c90:	7bfb      	ldrb	r3, [r7, #15]
}
   81c92:	4618      	mov	r0, r3
   81c94:	3714      	adds	r7, #20
   81c96:	46bd      	mov	sp, r7
   81c98:	bc80      	pop	{r7}
   81c9a:	4770      	bx	lr

00081c9c <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   81c9c:	b580      	push	{r7, lr}
   81c9e:	b084      	sub	sp, #16
   81ca0:	af00      	add	r7, sp, #0
   81ca2:	4603      	mov	r3, r0
   81ca4:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   81ca6:	79fb      	ldrb	r3, [r7, #7]
   81ca8:	2b01      	cmp	r3, #1
   81caa:	d809      	bhi.n	81cc0 <mem_wr_protect+0x24>
   81cac:	79fb      	ldrb	r3, [r7, #7]
   81cae:	4a09      	ldr	r2, [pc, #36]	; (81cd4 <mem_wr_protect+0x38>)
   81cb0:	015b      	lsls	r3, r3, #5
   81cb2:	4413      	add	r3, r2
   81cb4:	330c      	adds	r3, #12
   81cb6:	681b      	ldr	r3, [r3, #0]
   81cb8:	4798      	blx	r3
   81cba:	4603      	mov	r3, r0
   81cbc:	2b00      	cmp	r3, #0
   81cbe:	d001      	beq.n	81cc4 <mem_wr_protect+0x28>
   81cc0:	2301      	movs	r3, #1
   81cc2:	e000      	b.n	81cc6 <mem_wr_protect+0x2a>
   81cc4:	2300      	movs	r3, #0
  wr_protect =
   81cc6:	73fb      	strb	r3, [r7, #15]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   81cc8:	7bfb      	ldrb	r3, [r7, #15]
}
   81cca:	4618      	mov	r0, r3
   81ccc:	3710      	adds	r7, #16
   81cce:	46bd      	mov	sp, r7
   81cd0:	bd80      	pop	{r7, pc}
   81cd2:	bf00      	nop
   81cd4:	000877cc 	.word	0x000877cc

00081cd8 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   81cd8:	b580      	push	{r7, lr}
   81cda:	b086      	sub	sp, #24
   81cdc:	af00      	add	r7, sp, #0
   81cde:	4603      	mov	r3, r0
   81ce0:	60b9      	str	r1, [r7, #8]
   81ce2:	607a      	str	r2, [r7, #4]
   81ce4:	73fb      	strb	r3, [r7, #15]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   81ce6:	7bfb      	ldrb	r3, [r7, #15]
   81ce8:	2b01      	cmp	r3, #1
   81cea:	d80a      	bhi.n	81d02 <memory_2_ram+0x2a>
   81cec:	7bfb      	ldrb	r3, [r7, #15]
   81cee:	4a08      	ldr	r2, [pc, #32]	; (81d10 <memory_2_ram+0x38>)
   81cf0:	015b      	lsls	r3, r3, #5
   81cf2:	4413      	add	r3, r2
   81cf4:	3314      	adds	r3, #20
   81cf6:	681b      	ldr	r3, [r3, #0]
   81cf8:	6879      	ldr	r1, [r7, #4]
   81cfa:	68b8      	ldr	r0, [r7, #8]
   81cfc:	4798      	blx	r3
   81cfe:	4603      	mov	r3, r0
   81d00:	e000      	b.n	81d04 <memory_2_ram+0x2c>
   81d02:	2301      	movs	r3, #1
  status =
   81d04:	75fb      	strb	r3, [r7, #23]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   81d06:	7dfb      	ldrb	r3, [r7, #23]
}
   81d08:	4618      	mov	r0, r3
   81d0a:	3718      	adds	r7, #24
   81d0c:	46bd      	mov	sp, r7
   81d0e:	bd80      	pop	{r7, pc}
   81d10:	000877cc 	.word	0x000877cc

00081d14 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   81d14:	b580      	push	{r7, lr}
   81d16:	b086      	sub	sp, #24
   81d18:	af00      	add	r7, sp, #0
   81d1a:	4603      	mov	r3, r0
   81d1c:	60b9      	str	r1, [r7, #8]
   81d1e:	607a      	str	r2, [r7, #4]
   81d20:	73fb      	strb	r3, [r7, #15]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   81d22:	7bfb      	ldrb	r3, [r7, #15]
   81d24:	2b01      	cmp	r3, #1
   81d26:	d80a      	bhi.n	81d3e <ram_2_memory+0x2a>
   81d28:	7bfb      	ldrb	r3, [r7, #15]
   81d2a:	4a08      	ldr	r2, [pc, #32]	; (81d4c <ram_2_memory+0x38>)
   81d2c:	015b      	lsls	r3, r3, #5
   81d2e:	4413      	add	r3, r2
   81d30:	3318      	adds	r3, #24
   81d32:	681b      	ldr	r3, [r3, #0]
   81d34:	6879      	ldr	r1, [r7, #4]
   81d36:	68b8      	ldr	r0, [r7, #8]
   81d38:	4798      	blx	r3
   81d3a:	4603      	mov	r3, r0
   81d3c:	e000      	b.n	81d40 <ram_2_memory+0x2c>
   81d3e:	2301      	movs	r3, #1
  status =
   81d40:	75fb      	strb	r3, [r7, #23]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   81d42:	7dfb      	ldrb	r3, [r7, #23]
}
   81d44:	4618      	mov	r0, r3
   81d46:	3718      	adds	r7, #24
   81d48:	46bd      	mov	sp, r7
   81d4a:	bd80      	pop	{r7, pc}
   81d4c:	000877cc 	.word	0x000877cc

00081d50 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81d50:	b480      	push	{r7}
   81d52:	b083      	sub	sp, #12
   81d54:	af00      	add	r7, sp, #0
   81d56:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81d58:	687b      	ldr	r3, [r7, #4]
   81d5a:	2b07      	cmp	r3, #7
   81d5c:	d825      	bhi.n	81daa <osc_get_rate+0x5a>
   81d5e:	a201      	add	r2, pc, #4	; (adr r2, 81d64 <osc_get_rate+0x14>)
   81d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81d64:	00081d85 	.word	0x00081d85
   81d68:	00081d8b 	.word	0x00081d8b
   81d6c:	00081d91 	.word	0x00081d91
   81d70:	00081d97 	.word	0x00081d97
   81d74:	00081d9b 	.word	0x00081d9b
   81d78:	00081d9f 	.word	0x00081d9f
   81d7c:	00081da3 	.word	0x00081da3
   81d80:	00081da7 	.word	0x00081da7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81d84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81d88:	e010      	b.n	81dac <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   81d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81d8e:	e00d      	b.n	81dac <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   81d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81d94:	e00a      	b.n	81dac <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   81d96:	4b08      	ldr	r3, [pc, #32]	; (81db8 <osc_get_rate+0x68>)
   81d98:	e008      	b.n	81dac <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   81d9a:	4b08      	ldr	r3, [pc, #32]	; (81dbc <osc_get_rate+0x6c>)
   81d9c:	e006      	b.n	81dac <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   81d9e:	4b08      	ldr	r3, [pc, #32]	; (81dc0 <osc_get_rate+0x70>)
   81da0:	e004      	b.n	81dac <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   81da2:	4b07      	ldr	r3, [pc, #28]	; (81dc0 <osc_get_rate+0x70>)
   81da4:	e002      	b.n	81dac <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   81da6:	4b06      	ldr	r3, [pc, #24]	; (81dc0 <osc_get_rate+0x70>)
   81da8:	e000      	b.n	81dac <osc_get_rate+0x5c>
	}

	return 0;
   81daa:	2300      	movs	r3, #0
}
   81dac:	4618      	mov	r0, r3
   81dae:	370c      	adds	r7, #12
   81db0:	46bd      	mov	sp, r7
   81db2:	bc80      	pop	{r7}
   81db4:	4770      	bx	lr
   81db6:	bf00      	nop
   81db8:	003d0900 	.word	0x003d0900
   81dbc:	007a1200 	.word	0x007a1200
   81dc0:	00b71b00 	.word	0x00b71b00

00081dc4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81dc4:	b580      	push	{r7, lr}
   81dc6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   81dc8:	2006      	movs	r0, #6
   81dca:	4b04      	ldr	r3, [pc, #16]	; (81ddc <sysclk_get_main_hz+0x18>)
   81dcc:	4798      	blx	r3
   81dce:	4602      	mov	r2, r0
   81dd0:	4613      	mov	r3, r2
   81dd2:	00db      	lsls	r3, r3, #3
   81dd4:	1a9b      	subs	r3, r3, r2
   81dd6:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81dd8:	4618      	mov	r0, r3
   81dda:	bd80      	pop	{r7, pc}
   81ddc:	00081d51 	.word	0x00081d51

00081de0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   81de0:	b580      	push	{r7, lr}
   81de2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   81de4:	4b02      	ldr	r3, [pc, #8]	; (81df0 <sysclk_get_peripheral_hz+0x10>)
   81de6:	4798      	blx	r3
   81de8:	4603      	mov	r3, r0
   81dea:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81dec:	4618      	mov	r0, r3
   81dee:	bd80      	pop	{r7, pc}
   81df0:	00081dc5 	.word	0x00081dc5

00081df4 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
   81df4:	b480      	push	{r7}
   81df6:	b087      	sub	sp, #28
   81df8:	af00      	add	r7, sp, #0
	uint32_t mr = HSMCI->HSMCI_MR;
   81dfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81dfe:	685b      	ldr	r3, [r3, #4]
   81e00:	617b      	str	r3, [r7, #20]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
   81e02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81e06:	689b      	ldr	r3, [r3, #8]
   81e08:	613b      	str	r3, [r7, #16]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
   81e0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81e0e:	68db      	ldr	r3, [r3, #12]
   81e10:	60fb      	str	r3, [r7, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
   81e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81e16:	69db      	ldr	r3, [r3, #28]
   81e18:	60bb      	str	r3, [r7, #8]
	uint32_t cfg = HSMCI->HSMCI_CFG;
   81e1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   81e20:	607b      	str	r3, [r7, #4]
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
   81e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81e26:	2280      	movs	r2, #128	; 0x80
   81e28:	601a      	str	r2, [r3, #0]
	HSMCI->HSMCI_MR = mr;
   81e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   81e2e:	697b      	ldr	r3, [r7, #20]
   81e30:	6053      	str	r3, [r2, #4]
	HSMCI->HSMCI_DTOR = dtor;
   81e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   81e36:	693b      	ldr	r3, [r7, #16]
   81e38:	6093      	str	r3, [r2, #8]
	HSMCI->HSMCI_SDCR = sdcr;
   81e3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   81e3e:	68fb      	ldr	r3, [r7, #12]
   81e40:	60d3      	str	r3, [r2, #12]
	HSMCI->HSMCI_CSTOR = cstor;
   81e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   81e46:	68bb      	ldr	r3, [r7, #8]
   81e48:	61d3      	str	r3, [r2, #28]
	HSMCI->HSMCI_CFG = cfg;
   81e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   81e4e:	687b      	ldr	r3, [r7, #4]
   81e50:	6553      	str	r3, [r2, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
   81e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81e56:	2200      	movs	r2, #0
   81e58:	651a      	str	r2, [r3, #80]	; 0x50
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
   81e5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81e5e:	2205      	movs	r2, #5
   81e60:	601a      	str	r2, [r3, #0]
}
   81e62:	bf00      	nop
   81e64:	371c      	adds	r7, #28
   81e66:	46bd      	mov	sp, r7
   81e68:	bc80      	pop	{r7}
   81e6a:	4770      	bx	lr

00081e6c <hsmci_set_speed>:
 *
 * \param speed    HSMCI clock speed in Hz.
 * \param mck      MCK clock speed in Hz.
 */
static void hsmci_set_speed(uint32_t speed, uint32_t mck)
{
   81e6c:	b480      	push	{r7}
   81e6e:	b085      	sub	sp, #20
   81e70:	af00      	add	r7, sp, #0
   81e72:	6078      	str	r0, [r7, #4]
   81e74:	6039      	str	r1, [r7, #0]
	}
	else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
	}
#else
	uint32_t clkdiv = 0;
   81e76:	2300      	movs	r3, #0
   81e78:	60fb      	str	r3, [r7, #12]
	uint32_t rest = 0;
   81e7a:	2300      	movs	r3, #0
   81e7c:	60bb      	str	r3, [r7, #8]

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if ((speed * 2) < mck) {
   81e7e:	687b      	ldr	r3, [r7, #4]
   81e80:	005a      	lsls	r2, r3, #1
   81e82:	683b      	ldr	r3, [r7, #0]
   81e84:	429a      	cmp	r2, r3
   81e86:	d21b      	bcs.n	81ec0 <hsmci_set_speed+0x54>
		clkdiv = mck / (2 * speed);
   81e88:	687b      	ldr	r3, [r7, #4]
   81e8a:	005b      	lsls	r3, r3, #1
   81e8c:	683a      	ldr	r2, [r7, #0]
   81e8e:	fbb2 f3f3 	udiv	r3, r2, r3
   81e92:	60fb      	str	r3, [r7, #12]
		rest = mck % (2 * speed);
   81e94:	687b      	ldr	r3, [r7, #4]
   81e96:	005a      	lsls	r2, r3, #1
   81e98:	683b      	ldr	r3, [r7, #0]
   81e9a:	fbb3 f1f2 	udiv	r1, r3, r2
   81e9e:	fb02 f201 	mul.w	r2, r2, r1
   81ea2:	1a9b      	subs	r3, r3, r2
   81ea4:	60bb      	str	r3, [r7, #8]
		if (rest > 0) {
   81ea6:	68bb      	ldr	r3, [r7, #8]
   81ea8:	2b00      	cmp	r3, #0
   81eaa:	d002      	beq.n	81eb2 <hsmci_set_speed+0x46>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
   81eac:	68fb      	ldr	r3, [r7, #12]
   81eae:	3301      	adds	r3, #1
   81eb0:	60fb      	str	r3, [r7, #12]
		}
		if (clkdiv > 0) {
   81eb2:	68fb      	ldr	r3, [r7, #12]
   81eb4:	2b00      	cmp	r3, #0
   81eb6:	d005      	beq.n	81ec4 <hsmci_set_speed+0x58>
			clkdiv -= 1;
   81eb8:	68fb      	ldr	r3, [r7, #12]
   81eba:	3b01      	subs	r3, #1
   81ebc:	60fb      	str	r3, [r7, #12]
   81ebe:	e001      	b.n	81ec4 <hsmci_set_speed+0x58>
		}
	} else {
		clkdiv = 0;
   81ec0:	2300      	movs	r3, #0
   81ec2:	60fb      	str	r3, [r7, #12]
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
   81ec4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   81ec8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81ecc:	685b      	ldr	r3, [r3, #4]
   81ece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   81ed2:	6053      	str	r3, [r2, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
   81ed4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   81ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81edc:	685a      	ldr	r2, [r3, #4]
   81ede:	68fb      	ldr	r3, [r7, #12]
   81ee0:	b2db      	uxtb	r3, r3
   81ee2:	4313      	orrs	r3, r2
   81ee4:	604b      	str	r3, [r1, #4]
#endif

}
   81ee6:	bf00      	nop
   81ee8:	3714      	adds	r7, #20
   81eea:	46bd      	mov	sp, r7
   81eec:	bc80      	pop	{r7}
   81eee:	4770      	bx	lr

00081ef0 <hsmci_wait_busy>:
/** \brief Wait the end of busy signal on data line
 *
 * \return true if success, otherwise false
 */
static bool hsmci_wait_busy(void)
{
   81ef0:	b580      	push	{r7, lr}
   81ef2:	b082      	sub	sp, #8
   81ef4:	af00      	add	r7, sp, #0
	uint32_t busy_wait = 0xFFFFFFFF;
   81ef6:	f04f 33ff 	mov.w	r3, #4294967295
   81efa:	607b      	str	r3, [r7, #4]
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   81efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81f02:	603b      	str	r3, [r7, #0]
		if (busy_wait-- == 0) {
   81f04:	687b      	ldr	r3, [r7, #4]
   81f06:	1e5a      	subs	r2, r3, #1
   81f08:	607a      	str	r2, [r7, #4]
   81f0a:	2b00      	cmp	r3, #0
   81f0c:	d103      	bne.n	81f16 <hsmci_wait_busy+0x26>
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
   81f0e:	4b09      	ldr	r3, [pc, #36]	; (81f34 <hsmci_wait_busy+0x44>)
   81f10:	4798      	blx	r3
			return false;
   81f12:	2300      	movs	r3, #0
   81f14:	e00a      	b.n	81f2c <hsmci_wait_busy+0x3c>
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   81f16:	683b      	ldr	r3, [r7, #0]
   81f18:	f003 0320 	and.w	r3, r3, #32
   81f1c:	2b00      	cmp	r3, #0
   81f1e:	d0ed      	beq.n	81efc <hsmci_wait_busy+0xc>
   81f20:	683b      	ldr	r3, [r7, #0]
   81f22:	f003 0310 	and.w	r3, r3, #16
   81f26:	2b00      	cmp	r3, #0
   81f28:	d1e8      	bne.n	81efc <hsmci_wait_busy+0xc>
	return true;
   81f2a:	2301      	movs	r3, #1
}
   81f2c:	4618      	mov	r0, r3
   81f2e:	3708      	adds	r7, #8
   81f30:	46bd      	mov	sp, r7
   81f32:	bd80      	pop	{r7, pc}
   81f34:	00081df5 	.word	0x00081df5

00081f38 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
   81f38:	b580      	push	{r7, lr}
   81f3a:	b086      	sub	sp, #24
   81f3c:	af00      	add	r7, sp, #0
   81f3e:	60f8      	str	r0, [r7, #12]
   81f40:	60b9      	str	r1, [r7, #8]
   81f42:	607a      	str	r2, [r7, #4]
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
   81f44:	68bb      	ldr	r3, [r7, #8]
   81f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   81f4a:	68fa      	ldr	r2, [r7, #12]
   81f4c:	4313      	orrs	r3, r2
   81f4e:	60fb      	str	r3, [r7, #12]
	if (cmd & SDMMC_RESP_PRESENT) {
   81f50:	68bb      	ldr	r3, [r7, #8]
   81f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
   81f56:	2b00      	cmp	r3, #0
   81f58:	d01b      	beq.n	81f92 <hsmci_send_cmd_execute+0x5a>
		cmdr |= HSMCI_CMDR_MAXLAT;
   81f5a:	68fb      	ldr	r3, [r7, #12]
   81f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   81f60:	60fb      	str	r3, [r7, #12]
		if (cmd & SDMMC_RESP_136) {
   81f62:	68bb      	ldr	r3, [r7, #8]
   81f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   81f68:	2b00      	cmp	r3, #0
   81f6a:	d004      	beq.n	81f76 <hsmci_send_cmd_execute+0x3e>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
   81f6c:	68fb      	ldr	r3, [r7, #12]
   81f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81f72:	60fb      	str	r3, [r7, #12]
   81f74:	e00d      	b.n	81f92 <hsmci_send_cmd_execute+0x5a>
		} else if (cmd & SDMMC_RESP_BUSY) {
   81f76:	68bb      	ldr	r3, [r7, #8]
   81f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   81f7c:	2b00      	cmp	r3, #0
   81f7e:	d004      	beq.n	81f8a <hsmci_send_cmd_execute+0x52>
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
   81f80:	68fb      	ldr	r3, [r7, #12]
   81f82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   81f86:	60fb      	str	r3, [r7, #12]
   81f88:	e003      	b.n	81f92 <hsmci_send_cmd_execute+0x5a>
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
   81f8a:	68fb      	ldr	r3, [r7, #12]
   81f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f90:	60fb      	str	r3, [r7, #12]
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
   81f92:	68bb      	ldr	r3, [r7, #8]
   81f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   81f98:	2b00      	cmp	r3, #0
   81f9a:	d003      	beq.n	81fa4 <hsmci_send_cmd_execute+0x6c>
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
   81f9c:	68fb      	ldr	r3, [r7, #12]
   81f9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81fa2:	60fb      	str	r3, [r7, #12]
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
   81fa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   81fa8:	687b      	ldr	r3, [r7, #4]
   81faa:	6113      	str	r3, [r2, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
   81fac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   81fb0:	68fb      	ldr	r3, [r7, #12]
   81fb2:	6153      	str	r3, [r2, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   81fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81fba:	617b      	str	r3, [r7, #20]
		if (cmd & SDMMC_RESP_CRC) {
   81fbc:	68bb      	ldr	r3, [r7, #8]
   81fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   81fc2:	2b00      	cmp	r3, #0
   81fc4:	d008      	beq.n	81fd8 <hsmci_send_cmd_execute+0xa0>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   81fc6:	697b      	ldr	r3, [r7, #20]
   81fc8:	f403 031f 	and.w	r3, r3, #10420224	; 0x9f0000
   81fcc:	2b00      	cmp	r3, #0
   81fce:	d00c      	beq.n	81fea <hsmci_send_cmd_execute+0xb2>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   81fd0:	4b12      	ldr	r3, [pc, #72]	; (8201c <hsmci_send_cmd_execute+0xe4>)
   81fd2:	4798      	blx	r3
				return false;
   81fd4:	2300      	movs	r3, #0
   81fd6:	e01d      	b.n	82014 <hsmci_send_cmd_execute+0xdc>
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   81fd8:	697b      	ldr	r3, [r7, #20]
   81fda:	f403 031b 	and.w	r3, r3, #10158080	; 0x9b0000
   81fde:	2b00      	cmp	r3, #0
   81fe0:	d003      	beq.n	81fea <hsmci_send_cmd_execute+0xb2>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   81fe2:	4b0e      	ldr	r3, [pc, #56]	; (8201c <hsmci_send_cmd_execute+0xe4>)
   81fe4:	4798      	blx	r3
				return false;
   81fe6:	2300      	movs	r3, #0
   81fe8:	e014      	b.n	82014 <hsmci_send_cmd_execute+0xdc>
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
   81fea:	697b      	ldr	r3, [r7, #20]
   81fec:	f003 0301 	and.w	r3, r3, #1
   81ff0:	2b00      	cmp	r3, #0
   81ff2:	d0df      	beq.n	81fb4 <hsmci_send_cmd_execute+0x7c>

	if (cmd & SDMMC_RESP_BUSY) {
   81ff4:	68bb      	ldr	r3, [r7, #8]
   81ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   81ffa:	2b00      	cmp	r3, #0
   81ffc:	d009      	beq.n	82012 <hsmci_send_cmd_execute+0xda>
		if (!hsmci_wait_busy()) {
   81ffe:	4b08      	ldr	r3, [pc, #32]	; (82020 <hsmci_send_cmd_execute+0xe8>)
   82000:	4798      	blx	r3
   82002:	4603      	mov	r3, r0
   82004:	f083 0301 	eor.w	r3, r3, #1
   82008:	b2db      	uxtb	r3, r3
   8200a:	2b00      	cmp	r3, #0
   8200c:	d001      	beq.n	82012 <hsmci_send_cmd_execute+0xda>
			return false;
   8200e:	2300      	movs	r3, #0
   82010:	e000      	b.n	82014 <hsmci_send_cmd_execute+0xdc>
		}
	}
	return true;
   82012:	2301      	movs	r3, #1
}
   82014:	4618      	mov	r0, r3
   82016:	3718      	adds	r7, #24
   82018:	46bd      	mov	sp, r7
   8201a:	bd80      	pop	{r7, pc}
   8201c:	00081df5 	.word	0x00081df5
   82020:	00081ef1 	.word	0x00081ef1

00082024 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
   82024:	b580      	push	{r7, lr}
   82026:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_HSMCI);
   82028:	2015      	movs	r0, #21
   8202a:	4b0e      	ldr	r3, [pc, #56]	; (82064 <hsmci_init+0x40>)
   8202c:	4798      	blx	r3
#ifdef HSMCI_SR_DMADONE
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
   8202e:	2027      	movs	r0, #39	; 0x27
   82030:	4b0c      	ldr	r3, [pc, #48]	; (82064 <hsmci_init+0x40>)
   82032:	4798      	blx	r3
	pmc_enable_periph_clk(ID_XDMAC);
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
   82034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82038:	2272      	movs	r2, #114	; 0x72
   8203a:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
   8203c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82040:	2272      	movs	r2, #114	; 0x72
   82042:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
   82044:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82048:	2211      	movs	r2, #17
   8204a:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
   8204c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82050:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   82054:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
   82056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8205a:	2205      	movs	r2, #5
   8205c:	601a      	str	r2, [r3, #0]
}
   8205e:	bf00      	nop
   82060:	bd80      	pop	{r7, pc}
   82062:	bf00      	nop
   82064:	00086ae9 	.word	0x00086ae9

00082068 <hsmci_get_bus_width>:

uint8_t hsmci_get_bus_width(uint8_t slot)
{
   82068:	b480      	push	{r7}
   8206a:	b083      	sub	sp, #12
   8206c:	af00      	add	r7, sp, #0
   8206e:	4603      	mov	r3, r0
   82070:	71fb      	strb	r3, [r7, #7]
	switch (slot) {
   82072:	79fb      	ldrb	r3, [r7, #7]
   82074:	2b00      	cmp	r3, #0
   82076:	d101      	bne.n	8207c <hsmci_get_bus_width+0x14>
	case 0:
		return SD_MMC_HSMCI_SLOT_0_SIZE;
   82078:	2304      	movs	r3, #4
   8207a:	e000      	b.n	8207e <hsmci_get_bus_width+0x16>
#if (SD_MMC_HSMCI_MEM_CNT == 2)
	case 1:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
   8207c:	2300      	movs	r3, #0
	}
}
   8207e:	4618      	mov	r0, r3
   82080:	370c      	adds	r7, #12
   82082:	46bd      	mov	sp, r7
   82084:	bc80      	pop	{r7}
   82086:	4770      	bx	lr

00082088 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
   82088:	b480      	push	{r7}
   8208a:	af00      	add	r7, sp, #0
	return true;
   8208c:	2301      	movs	r3, #1
}
   8208e:	4618      	mov	r0, r3
   82090:	46bd      	mov	sp, r7
   82092:	bc80      	pop	{r7}
   82094:	4770      	bx	lr
	...

00082098 <hsmci_select_device>:

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
   82098:	b580      	push	{r7, lr}
   8209a:	b084      	sub	sp, #16
   8209c:	af00      	add	r7, sp, #0
   8209e:	6039      	str	r1, [r7, #0]
   820a0:	4611      	mov	r1, r2
   820a2:	461a      	mov	r2, r3
   820a4:	4603      	mov	r3, r0
   820a6:	71fb      	strb	r3, [r7, #7]
   820a8:	460b      	mov	r3, r1
   820aa:	71bb      	strb	r3, [r7, #6]
   820ac:	4613      	mov	r3, r2
   820ae:	717b      	strb	r3, [r7, #5]
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
   820b0:	2300      	movs	r3, #0
   820b2:	60fb      	str	r3, [r7, #12]
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
   820b4:	2300      	movs	r3, #0
   820b6:	60bb      	str	r3, [r7, #8]

	if (high_speed) {
   820b8:	797b      	ldrb	r3, [r7, #5]
   820ba:	2b00      	cmp	r3, #0
   820bc:	d008      	beq.n	820d0 <hsmci_select_device+0x38>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
   820be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   820c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   820c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   820c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   820cc:	6553      	str	r3, [r2, #84]	; 0x54
   820ce:	e007      	b.n	820e0 <hsmci_select_device+0x48>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
   820d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   820d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   820d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   820da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   820de:	6553      	str	r3, [r2, #84]	; 0x54
	}

	hsmci_set_speed(clock, sysclk_get_peripheral_hz());
   820e0:	4b13      	ldr	r3, [pc, #76]	; (82130 <hsmci_select_device+0x98>)
   820e2:	4798      	blx	r3
   820e4:	4603      	mov	r3, r0
   820e6:	4619      	mov	r1, r3
   820e8:	6838      	ldr	r0, [r7, #0]
   820ea:	4b12      	ldr	r3, [pc, #72]	; (82134 <hsmci_select_device+0x9c>)
   820ec:	4798      	blx	r3

	switch (slot) {
   820ee:	79fb      	ldrb	r3, [r7, #7]
   820f0:	2b00      	cmp	r3, #0
   820f2:	d102      	bne.n	820fa <hsmci_select_device+0x62>
	case 0:
		hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
   820f4:	2300      	movs	r3, #0
   820f6:	60fb      	str	r3, [r7, #12]
		break;
   820f8:	bf00      	nop
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
   820fa:	79bb      	ldrb	r3, [r7, #6]
   820fc:	2b04      	cmp	r3, #4
   820fe:	d006      	beq.n	8210e <hsmci_select_device+0x76>
   82100:	2b08      	cmp	r3, #8
   82102:	d007      	beq.n	82114 <hsmci_select_device+0x7c>
   82104:	2b01      	cmp	r3, #1
   82106:	d108      	bne.n	8211a <hsmci_select_device+0x82>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
   82108:	2300      	movs	r3, #0
   8210a:	60bb      	str	r3, [r7, #8]
		break;
   8210c:	e005      	b.n	8211a <hsmci_select_device+0x82>

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
   8210e:	2380      	movs	r3, #128	; 0x80
   82110:	60bb      	str	r3, [r7, #8]
		break;
   82112:	e002      	b.n	8211a <hsmci_select_device+0x82>

	case 8:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_8;
   82114:	23c0      	movs	r3, #192	; 0xc0
   82116:	60bb      	str	r3, [r7, #8]
		break;
   82118:	bf00      	nop

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
   8211a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8211e:	68fa      	ldr	r2, [r7, #12]
   82120:	68bb      	ldr	r3, [r7, #8]
   82122:	4313      	orrs	r3, r2
   82124:	60cb      	str	r3, [r1, #12]
}
   82126:	bf00      	nop
   82128:	3710      	adds	r7, #16
   8212a:	46bd      	mov	sp, r7
   8212c:	bd80      	pop	{r7, pc}
   8212e:	bf00      	nop
   82130:	00081de1 	.word	0x00081de1
   82134:	00081e6d 	.word	0x00081e6d

00082138 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
   82138:	b480      	push	{r7}
   8213a:	b083      	sub	sp, #12
   8213c:	af00      	add	r7, sp, #0
   8213e:	4603      	mov	r3, r0
   82140:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	// Nothing to do
}
   82142:	bf00      	nop
   82144:	370c      	adds	r7, #12
   82146:	46bd      	mov	sp, r7
   82148:	bc80      	pop	{r7}
   8214a:	4770      	bx	lr

0008214c <hsmci_send_clock>:

void hsmci_send_clock(void)
{
   8214c:	b480      	push	{r7}
   8214e:	af00      	add	r7, sp, #0
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   82150:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   82154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82158:	685b      	ldr	r3, [r3, #4]
   8215a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
   8215e:	6053      	str	r3, [r2, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
   82160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82164:	2200      	movs	r2, #0
   82166:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
   82168:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8216c:	f44f 6210 	mov.w	r2, #2304	; 0x900
   82170:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
   82172:	bf00      	nop
   82174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8217a:	f003 0301 	and.w	r3, r3, #1
   8217e:	2b00      	cmp	r3, #0
   82180:	d0f8      	beq.n	82174 <hsmci_send_clock+0x28>
}
   82182:	bf00      	nop
   82184:	46bd      	mov	sp, r7
   82186:	bc80      	pop	{r7}
   82188:	4770      	bx	lr
	...

0008218c <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   8218c:	b580      	push	{r7, lr}
   8218e:	b082      	sub	sp, #8
   82190:	af00      	add	r7, sp, #0
   82192:	6078      	str	r0, [r7, #4]
   82194:	6039      	str	r1, [r7, #0]
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   82196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   8219a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8219e:	685b      	ldr	r3, [r3, #4]
   821a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
   821a4:	6053      	str	r3, [r2, #4]
#ifdef HSMCI_SR_DMADONE
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
   821a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   821aa:	2200      	movs	r2, #0
   821ac:	651a      	str	r2, [r3, #80]	; 0x50
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
   821ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   821b2:	2200      	movs	r2, #0
   821b4:	619a      	str	r2, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
   821b6:	683a      	ldr	r2, [r7, #0]
   821b8:	6879      	ldr	r1, [r7, #4]
   821ba:	2000      	movs	r0, #0
   821bc:	4b03      	ldr	r3, [pc, #12]	; (821cc <hsmci_send_cmd+0x40>)
   821be:	4798      	blx	r3
   821c0:	4603      	mov	r3, r0
}
   821c2:	4618      	mov	r0, r3
   821c4:	3708      	adds	r7, #8
   821c6:	46bd      	mov	sp, r7
   821c8:	bd80      	pop	{r7, pc}
   821ca:	bf00      	nop
   821cc:	00081f39 	.word	0x00081f39

000821d0 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
   821d0:	b480      	push	{r7}
   821d2:	af00      	add	r7, sp, #0
	return HSMCI->HSMCI_RSPR[0];
   821d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   821d8:	6a1b      	ldr	r3, [r3, #32]
}
   821da:	4618      	mov	r0, r3
   821dc:	46bd      	mov	sp, r7
   821de:	bc80      	pop	{r7}
   821e0:	4770      	bx	lr

000821e2 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
   821e2:	b480      	push	{r7}
   821e4:	b085      	sub	sp, #20
   821e6:	af00      	add	r7, sp, #0
   821e8:	6078      	str	r0, [r7, #4]
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
   821ea:	2300      	movs	r3, #0
   821ec:	73fb      	strb	r3, [r7, #15]
   821ee:	e025      	b.n	8223c <hsmci_get_response_128+0x5a>
		response_32 = HSMCI->HSMCI_RSPR[0];
   821f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   821f4:	6a1b      	ldr	r3, [r3, #32]
   821f6:	60bb      	str	r3, [r7, #8]
		*response = (response_32 >> 24) & 0xFF;
   821f8:	68bb      	ldr	r3, [r7, #8]
   821fa:	0e1b      	lsrs	r3, r3, #24
   821fc:	b2da      	uxtb	r2, r3
   821fe:	687b      	ldr	r3, [r7, #4]
   82200:	701a      	strb	r2, [r3, #0]
		response++;
   82202:	687b      	ldr	r3, [r7, #4]
   82204:	3301      	adds	r3, #1
   82206:	607b      	str	r3, [r7, #4]
		*response = (response_32 >> 16) & 0xFF;
   82208:	68bb      	ldr	r3, [r7, #8]
   8220a:	0c1b      	lsrs	r3, r3, #16
   8220c:	b2da      	uxtb	r2, r3
   8220e:	687b      	ldr	r3, [r7, #4]
   82210:	701a      	strb	r2, [r3, #0]
		response++;
   82212:	687b      	ldr	r3, [r7, #4]
   82214:	3301      	adds	r3, #1
   82216:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  8) & 0xFF;
   82218:	68bb      	ldr	r3, [r7, #8]
   8221a:	0a1b      	lsrs	r3, r3, #8
   8221c:	b2da      	uxtb	r2, r3
   8221e:	687b      	ldr	r3, [r7, #4]
   82220:	701a      	strb	r2, [r3, #0]
		response++;
   82222:	687b      	ldr	r3, [r7, #4]
   82224:	3301      	adds	r3, #1
   82226:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  0) & 0xFF;
   82228:	68bb      	ldr	r3, [r7, #8]
   8222a:	b2da      	uxtb	r2, r3
   8222c:	687b      	ldr	r3, [r7, #4]
   8222e:	701a      	strb	r2, [r3, #0]
		response++;
   82230:	687b      	ldr	r3, [r7, #4]
   82232:	3301      	adds	r3, #1
   82234:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < 4; i++) {
   82236:	7bfb      	ldrb	r3, [r7, #15]
   82238:	3301      	adds	r3, #1
   8223a:	73fb      	strb	r3, [r7, #15]
   8223c:	7bfb      	ldrb	r3, [r7, #15]
   8223e:	2b03      	cmp	r3, #3
   82240:	d9d6      	bls.n	821f0 <hsmci_get_response_128+0xe>
	}
}
   82242:	bf00      	nop
   82244:	3714      	adds	r7, #20
   82246:	46bd      	mov	sp, r7
   82248:	bc80      	pop	{r7}
   8224a:	4770      	bx	lr

0008224c <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
   8224c:	b580      	push	{r7, lr}
   8224e:	b086      	sub	sp, #24
   82250:	af00      	add	r7, sp, #0
   82252:	60f8      	str	r0, [r7, #12]
   82254:	60b9      	str	r1, [r7, #8]
   82256:	4611      	mov	r1, r2
   82258:	461a      	mov	r2, r3
   8225a:	460b      	mov	r3, r1
   8225c:	80fb      	strh	r3, [r7, #6]
   8225e:	4613      	mov	r3, r2
   82260:	80bb      	strh	r3, [r7, #4]
	uint32_t cmdr;

#ifdef HSMCI_SR_DMADONE
	if (access_block) {
   82262:	f897 3020 	ldrb.w	r3, [r7, #32]
   82266:	2b00      	cmp	r3, #0
   82268:	d005      	beq.n	82276 <hsmci_adtc_start+0x2a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
   8226a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8226e:	f44f 7280 	mov.w	r2, #256	; 0x100
   82272:	651a      	str	r2, [r3, #80]	; 0x50
   82274:	e003      	b.n	8227e <hsmci_adtc_start+0x32>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
   82276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8227a:	2200      	movs	r2, #0
   8227c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
   8227e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   82282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82286:	685b      	ldr	r3, [r3, #4]
   82288:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
   8228c:	6053      	str	r3, [r2, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
   8228e:	88fb      	ldrh	r3, [r7, #6]
   82290:	f003 0303 	and.w	r3, r3, #3
   82294:	2b00      	cmp	r3, #0
   82296:	d008      	beq.n	822aa <hsmci_adtc_start+0x5e>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
   82298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   8229c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   822a0:	685b      	ldr	r3, [r3, #4]
   822a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   822a6:	6053      	str	r3, [r2, #4]
   822a8:	e007      	b.n	822ba <hsmci_adtc_start+0x6e>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
   822aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   822ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   822b2:	685b      	ldr	r3, [r3, #4]
   822b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   822b8:	6053      	str	r3, [r2, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
   822ba:	68fb      	ldr	r3, [r7, #12]
   822bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   822c0:	2b00      	cmp	r3, #0
   822c2:	d003      	beq.n	822cc <hsmci_adtc_start+0x80>
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
   822c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   822c8:	617b      	str	r3, [r7, #20]
   822ca:	e002      	b.n	822d2 <hsmci_adtc_start+0x86>
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
   822cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
   822d0:	617b      	str	r3, [r7, #20]
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
   822d2:	68fb      	ldr	r3, [r7, #12]
   822d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   822d8:	2b00      	cmp	r3, #0
   822da:	d00a      	beq.n	822f2 <hsmci_adtc_start+0xa6>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
   822dc:	697b      	ldr	r3, [r7, #20]
   822de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   822e2:	617b      	str	r3, [r7, #20]
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
   822e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   822e8:	88fb      	ldrh	r3, [r7, #6]
   822ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
   822ee:	6193      	str	r3, [r2, #24]
   822f0:	e028      	b.n	82344 <hsmci_adtc_start+0xf8>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
   822f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   822f6:	88fb      	ldrh	r3, [r7, #6]
   822f8:	041a      	lsls	r2, r3, #16
				(nb_block << HSMCI_BLKR_BCNT_Pos);
   822fa:	88bb      	ldrh	r3, [r7, #4]
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
   822fc:	4313      	orrs	r3, r2
   822fe:	618b      	str	r3, [r1, #24]
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
   82300:	68fb      	ldr	r3, [r7, #12]
   82302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82306:	2b00      	cmp	r3, #0
   82308:	d004      	beq.n	82314 <hsmci_adtc_start+0xc8>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
   8230a:	697b      	ldr	r3, [r7, #20]
   8230c:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
   82310:	617b      	str	r3, [r7, #20]
   82312:	e017      	b.n	82344 <hsmci_adtc_start+0xf8>
		} else if (cmd & SDMMC_CMD_STREAM) {
   82314:	68fb      	ldr	r3, [r7, #12]
   82316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   8231a:	2b00      	cmp	r3, #0
   8231c:	d004      	beq.n	82328 <hsmci_adtc_start+0xdc>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
   8231e:	697b      	ldr	r3, [r7, #20]
   82320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82324:	617b      	str	r3, [r7, #20]
   82326:	e00d      	b.n	82344 <hsmci_adtc_start+0xf8>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
   82328:	68fb      	ldr	r3, [r7, #12]
   8232a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   8232e:	2b00      	cmp	r3, #0
   82330:	d108      	bne.n	82344 <hsmci_adtc_start+0xf8>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
   82332:	68fb      	ldr	r3, [r7, #12]
   82334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
   82338:	2b00      	cmp	r3, #0
   8233a:	d003      	beq.n	82344 <hsmci_adtc_start+0xf8>
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
   8233c:	697b      	ldr	r3, [r7, #20]
   8233e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   82342:	617b      	str	r3, [r7, #20]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
   82344:	4b09      	ldr	r3, [pc, #36]	; (8236c <hsmci_adtc_start+0x120>)
   82346:	2200      	movs	r2, #0
   82348:	601a      	str	r2, [r3, #0]
	hsmci_block_size = block_size;
   8234a:	4a09      	ldr	r2, [pc, #36]	; (82370 <hsmci_adtc_start+0x124>)
   8234c:	88fb      	ldrh	r3, [r7, #6]
   8234e:	8013      	strh	r3, [r2, #0]
	hsmci_nb_block = nb_block;
   82350:	4a08      	ldr	r2, [pc, #32]	; (82374 <hsmci_adtc_start+0x128>)
   82352:	88bb      	ldrh	r3, [r7, #4]
   82354:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
   82356:	68ba      	ldr	r2, [r7, #8]
   82358:	68f9      	ldr	r1, [r7, #12]
   8235a:	6978      	ldr	r0, [r7, #20]
   8235c:	4b06      	ldr	r3, [pc, #24]	; (82378 <hsmci_adtc_start+0x12c>)
   8235e:	4798      	blx	r3
   82360:	4603      	mov	r3, r0
}
   82362:	4618      	mov	r0, r3
   82364:	3718      	adds	r7, #24
   82366:	46bd      	mov	sp, r7
   82368:	bd80      	pop	{r7, pc}
   8236a:	bf00      	nop
   8236c:	20070620 	.word	0x20070620
   82370:	20070624 	.word	0x20070624
   82374:	20070626 	.word	0x20070626
   82378:	00081f39 	.word	0x00081f39

0008237c <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
   8237c:	b580      	push	{r7, lr}
   8237e:	b084      	sub	sp, #16
   82380:	af00      	add	r7, sp, #0
   82382:	6078      	str	r0, [r7, #4]

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   82384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8238a:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   8238c:	68fa      	ldr	r2, [r7, #12]
   8238e:	4b1d      	ldr	r3, [pc, #116]	; (82404 <hsmci_read_word+0x88>)
   82390:	4013      	ands	r3, r2
   82392:	2b00      	cmp	r3, #0
   82394:	d003      	beq.n	8239e <hsmci_read_word+0x22>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   82396:	4b1c      	ldr	r3, [pc, #112]	; (82408 <hsmci_read_word+0x8c>)
   82398:	4798      	blx	r3
			return false;
   8239a:	2300      	movs	r3, #0
   8239c:	e02e      	b.n	823fc <hsmci_read_word+0x80>
		}
	} while (!(sr & HSMCI_SR_RXRDY));
   8239e:	68fb      	ldr	r3, [r7, #12]
   823a0:	f003 0302 	and.w	r3, r3, #2
   823a4:	2b00      	cmp	r3, #0
   823a6:	d0ed      	beq.n	82384 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
   823a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   823ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   823ae:	687b      	ldr	r3, [r7, #4]
   823b0:	601a      	str	r2, [r3, #0]
	hsmci_transfert_pos += 4;
   823b2:	4b16      	ldr	r3, [pc, #88]	; (8240c <hsmci_read_word+0x90>)
   823b4:	681b      	ldr	r3, [r3, #0]
   823b6:	3304      	adds	r3, #4
   823b8:	4a14      	ldr	r2, [pc, #80]	; (8240c <hsmci_read_word+0x90>)
   823ba:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   823bc:	4b14      	ldr	r3, [pc, #80]	; (82410 <hsmci_read_word+0x94>)
   823be:	881b      	ldrh	r3, [r3, #0]
   823c0:	461a      	mov	r2, r3
   823c2:	4b14      	ldr	r3, [pc, #80]	; (82414 <hsmci_read_word+0x98>)
   823c4:	881b      	ldrh	r3, [r3, #0]
   823c6:	fb03 f202 	mul.w	r2, r3, r2
   823ca:	4b10      	ldr	r3, [pc, #64]	; (8240c <hsmci_read_word+0x90>)
   823cc:	681b      	ldr	r3, [r3, #0]
   823ce:	429a      	cmp	r2, r3
   823d0:	d901      	bls.n	823d6 <hsmci_read_word+0x5a>
		return true;
   823d2:	2301      	movs	r3, #1
   823d4:	e012      	b.n	823fc <hsmci_read_word+0x80>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   823d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   823da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   823dc:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   823de:	68fa      	ldr	r2, [r7, #12]
   823e0:	4b08      	ldr	r3, [pc, #32]	; (82404 <hsmci_read_word+0x88>)
   823e2:	4013      	ands	r3, r2
   823e4:	2b00      	cmp	r3, #0
   823e6:	d003      	beq.n	823f0 <hsmci_read_word+0x74>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   823e8:	4b07      	ldr	r3, [pc, #28]	; (82408 <hsmci_read_word+0x8c>)
   823ea:	4798      	blx	r3
			return false;
   823ec:	2300      	movs	r3, #0
   823ee:	e005      	b.n	823fc <hsmci_read_word+0x80>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   823f0:	68fb      	ldr	r3, [r7, #12]
   823f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
   823f6:	2b00      	cmp	r3, #0
   823f8:	d0ed      	beq.n	823d6 <hsmci_read_word+0x5a>
	return true;
   823fa:	2301      	movs	r3, #1
}
   823fc:	4618      	mov	r0, r3
   823fe:	3710      	adds	r7, #16
   82400:	46bd      	mov	sp, r7
   82402:	bd80      	pop	{r7, pc}
   82404:	c0600000 	.word	0xc0600000
   82408:	00081df5 	.word	0x00081df5
   8240c:	20070620 	.word	0x20070620
   82410:	20070624 	.word	0x20070624
   82414:	20070626 	.word	0x20070626

00082418 <hsmci_start_read_blocks>:
	return true;
}

#ifdef HSMCI_SR_DMADONE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
   82418:	b580      	push	{r7, lr}
   8241a:	b08a      	sub	sp, #40	; 0x28
   8241c:	af00      	add	r7, sp, #0
   8241e:	6078      	str	r0, [r7, #4]
   82420:	460b      	mov	r3, r1
   82422:	807b      	strh	r3, [r7, #2]
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;
	bool transfert_byte;

	nb_data = nb_block * hsmci_block_size;
   82424:	887b      	ldrh	r3, [r7, #2]
   82426:	4a2b      	ldr	r2, [pc, #172]	; (824d4 <hsmci_start_read_blocks+0xbc>)
   82428:	8812      	ldrh	r2, [r2, #0]
   8242a:	fb02 f303 	mul.w	r3, r2, r3
   8242e:	627b      	str	r3, [r7, #36]	; 0x24
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)dest & 0x3) > 0)) ? 1 : 0;
   82430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82434:	685b      	ldr	r3, [r3, #4]
   82436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   8243a:	2b00      	cmp	r3, #0
   8243c:	d104      	bne.n	82448 <hsmci_start_read_blocks+0x30>
   8243e:	687b      	ldr	r3, [r7, #4]
   82440:	f003 0303 	and.w	r3, r3, #3
   82444:	2b00      	cmp	r3, #0
   82446:	d001      	beq.n	8244c <hsmci_start_read_blocks+0x34>
   82448:	2301      	movs	r3, #1
   8244a:	e000      	b.n	8244e <hsmci_start_read_blocks+0x36>
   8244c:	2300      	movs	r3, #0
   8244e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82452:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82456:	f003 0301 	and.w	r3, r3, #1
   8245a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   8245e:	481e      	ldr	r0, [pc, #120]	; (824d8 <hsmci_start_read_blocks+0xc0>)
   82460:	4b1e      	ldr	r3, [pc, #120]	; (824dc <hsmci_start_read_blocks+0xc4>)
   82462:	4798      	blx	r3
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   82464:	2100      	movs	r1, #0
   82466:	481c      	ldr	r0, [pc, #112]	; (824d8 <hsmci_start_read_blocks+0xc0>)
   82468:	4b1d      	ldr	r3, [pc, #116]	; (824e0 <hsmci_start_read_blocks+0xc8>)
   8246a:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
   8246c:	4b1d      	ldr	r3, [pc, #116]	; (824e4 <hsmci_start_read_blocks+0xcc>)
   8246e:	61fb      	str	r3, [r7, #28]
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   82470:	69fa      	ldr	r2, [r7, #28]
   82472:	2100      	movs	r1, #0
   82474:	4818      	ldr	r0, [pc, #96]	; (824d8 <hsmci_start_read_blocks+0xc0>)
   82476:	4b1c      	ldr	r3, [pc, #112]	; (824e8 <hsmci_start_read_blocks+0xd0>)
   82478:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   8247a:	4b1c      	ldr	r3, [pc, #112]	; (824ec <hsmci_start_read_blocks+0xd4>)
   8247c:	60bb      	str	r3, [r7, #8]
	desc.ul_destination_addr = (uint32_t)dest;
   8247e:	687b      	ldr	r3, [r7, #4]
   82480:	60fb      	str	r3, [r7, #12]
	if (transfert_byte) {
   82482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82486:	2b00      	cmp	r3, #0
   82488:	d003      	beq.n	82492 <hsmci_start_read_blocks+0x7a>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   8248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8248c:	b29b      	uxth	r3, r3
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   8248e:	613b      	str	r3, [r7, #16]
   82490:	e005      	b.n	8249e <hsmci_start_read_blocks+0x86>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   82492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82494:	089b      	lsrs	r3, r3, #2
   82496:	b29b      	uxth	r3, r3
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   82498:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   8249c:	613b      	str	r3, [r7, #16]
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   8249e:	4b14      	ldr	r3, [pc, #80]	; (824f0 <hsmci_start_read_blocks+0xd8>)
   824a0:	617b      	str	r3, [r7, #20]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_PER2MEM_DMA_FC
			| DMAC_CTRLB_SRC_INCR_FIXED
			| DMAC_CTRLB_DST_INCR_INCREMENTING
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   824a2:	2300      	movs	r3, #0
   824a4:	61bb      	str	r3, [r7, #24]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   824a6:	f107 0308 	add.w	r3, r7, #8
   824aa:	461a      	mov	r2, r3
   824ac:	2100      	movs	r1, #0
   824ae:	480a      	ldr	r0, [pc, #40]	; (824d8 <hsmci_start_read_blocks+0xc0>)
   824b0:	4b10      	ldr	r3, [pc, #64]	; (824f4 <hsmci_start_read_blocks+0xdc>)
   824b2:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   824b4:	2100      	movs	r1, #0
   824b6:	4808      	ldr	r0, [pc, #32]	; (824d8 <hsmci_start_read_blocks+0xc0>)
   824b8:	4b0f      	ldr	r3, [pc, #60]	; (824f8 <hsmci_start_read_blocks+0xe0>)
   824ba:	4798      	blx	r3
	hsmci_transfert_pos += nb_data;
   824bc:	4b0f      	ldr	r3, [pc, #60]	; (824fc <hsmci_start_read_blocks+0xe4>)
   824be:	681a      	ldr	r2, [r3, #0]
   824c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   824c2:	4413      	add	r3, r2
   824c4:	4a0d      	ldr	r2, [pc, #52]	; (824fc <hsmci_start_read_blocks+0xe4>)
   824c6:	6013      	str	r3, [r2, #0]
	return true;
   824c8:	2301      	movs	r3, #1
}
   824ca:	4618      	mov	r0, r3
   824cc:	3728      	adds	r7, #40	; 0x28
   824ce:	46bd      	mov	sp, r7
   824d0:	bd80      	pop	{r7, pc}
   824d2:	bf00      	nop
   824d4:	20070624 	.word	0x20070624
   824d8:	400c4000 	.word	0x400c4000
   824dc:	000866a7 	.word	0x000866a7
   824e0:	0008672b 	.word	0x0008672b
   824e4:	01010200 	.word	0x01010200
   824e8:	0008681b 	.word	0x0008681b
   824ec:	40000030 	.word	0x40000030
   824f0:	42510000 	.word	0x42510000
   824f4:	00086845 	.word	0x00086845
   824f8:	0008670d 	.word	0x0008670d
   824fc:	20070620 	.word	0x20070620

00082500 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
   82500:	b580      	push	{r7, lr}
   82502:	b082      	sub	sp, #8
   82504:	af00      	add	r7, sp, #0
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   82506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8250c:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   8250e:	687a      	ldr	r2, [r7, #4]
   82510:	4b13      	ldr	r3, [pc, #76]	; (82560 <hsmci_wait_end_of_read_blocks+0x60>)
   82512:	4013      	ands	r3, r2
   82514:	2b00      	cmp	r3, #0
   82516:	d007      	beq.n	82528 <hsmci_wait_end_of_read_blocks+0x28>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   82518:	4b12      	ldr	r3, [pc, #72]	; (82564 <hsmci_wait_end_of_read_blocks+0x64>)
   8251a:	4798      	blx	r3
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   8251c:	2100      	movs	r1, #0
   8251e:	4812      	ldr	r0, [pc, #72]	; (82568 <hsmci_wait_end_of_read_blocks+0x68>)
   82520:	4b12      	ldr	r3, [pc, #72]	; (8256c <hsmci_wait_end_of_read_blocks+0x6c>)
   82522:	4798      	blx	r3
			return false;
   82524:	2300      	movs	r3, #0
   82526:	e017      	b.n	82558 <hsmci_wait_end_of_read_blocks+0x58>
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   82528:	4b11      	ldr	r3, [pc, #68]	; (82570 <hsmci_wait_end_of_read_blocks+0x70>)
   8252a:	881b      	ldrh	r3, [r3, #0]
   8252c:	461a      	mov	r2, r3
   8252e:	4b11      	ldr	r3, [pc, #68]	; (82574 <hsmci_wait_end_of_read_blocks+0x74>)
   82530:	881b      	ldrh	r3, [r3, #0]
   82532:	fb03 f202 	mul.w	r2, r3, r2
   82536:	4b10      	ldr	r3, [pc, #64]	; (82578 <hsmci_wait_end_of_read_blocks+0x78>)
   82538:	681b      	ldr	r3, [r3, #0]
   8253a:	429a      	cmp	r2, r3
   8253c:	d906      	bls.n	8254c <hsmci_wait_end_of_read_blocks+0x4c>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   8253e:	687b      	ldr	r3, [r7, #4]
   82540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   82544:	2b00      	cmp	r3, #0
   82546:	d001      	beq.n	8254c <hsmci_wait_end_of_read_blocks+0x4c>
				return true;
   82548:	2301      	movs	r3, #1
   8254a:	e005      	b.n	82558 <hsmci_wait_end_of_read_blocks+0x58>
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   8254c:	687b      	ldr	r3, [r7, #4]
   8254e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
   82552:	2b00      	cmp	r3, #0
   82554:	d0d7      	beq.n	82506 <hsmci_wait_end_of_read_blocks+0x6>
	return true;
   82556:	2301      	movs	r3, #1
}
   82558:	4618      	mov	r0, r3
   8255a:	3708      	adds	r7, #8
   8255c:	46bd      	mov	sp, r7
   8255e:	bd80      	pop	{r7, pc}
   82560:	c0600000 	.word	0xc0600000
   82564:	00081df5 	.word	0x00081df5
   82568:	400c4000 	.word	0x400c4000
   8256c:	0008672b 	.word	0x0008672b
   82570:	20070624 	.word	0x20070624
   82574:	20070626 	.word	0x20070626
   82578:	20070620 	.word	0x20070620

0008257c <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
   8257c:	b580      	push	{r7, lr}
   8257e:	b08a      	sub	sp, #40	; 0x28
   82580:	af00      	add	r7, sp, #0
   82582:	6078      	str	r0, [r7, #4]
   82584:	460b      	mov	r3, r1
   82586:	807b      	strh	r3, [r7, #2]
	bool transfert_byte;
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;

	nb_data = nb_block * hsmci_block_size;
   82588:	887b      	ldrh	r3, [r7, #2]
   8258a:	4a29      	ldr	r2, [pc, #164]	; (82630 <hsmci_start_write_blocks+0xb4>)
   8258c:	8812      	ldrh	r2, [r2, #0]
   8258e:	fb02 f303 	mul.w	r3, r2, r3
   82592:	627b      	str	r3, [r7, #36]	; 0x24
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)src & 0x3) > 0)) ? 1 : 0;
   82594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82598:	685b      	ldr	r3, [r3, #4]
   8259a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   8259e:	2b00      	cmp	r3, #0
   825a0:	d104      	bne.n	825ac <hsmci_start_write_blocks+0x30>
   825a2:	687b      	ldr	r3, [r7, #4]
   825a4:	f003 0303 	and.w	r3, r3, #3
   825a8:	2b00      	cmp	r3, #0
   825aa:	d001      	beq.n	825b0 <hsmci_start_write_blocks+0x34>
   825ac:	2301      	movs	r3, #1
   825ae:	e000      	b.n	825b2 <hsmci_start_write_blocks+0x36>
   825b0:	2300      	movs	r3, #0
   825b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   825b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   825ba:	f003 0301 	and.w	r3, r3, #1
   825be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   825c2:	481c      	ldr	r0, [pc, #112]	; (82634 <hsmci_start_write_blocks+0xb8>)
   825c4:	4b1c      	ldr	r3, [pc, #112]	; (82638 <hsmci_start_write_blocks+0xbc>)
   825c6:	4798      	blx	r3
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
   825c8:	4b1c      	ldr	r3, [pc, #112]	; (8263c <hsmci_start_write_blocks+0xc0>)
   825ca:	61fb      	str	r3, [r7, #28]
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   825cc:	69fa      	ldr	r2, [r7, #28]
   825ce:	2100      	movs	r1, #0
   825d0:	4818      	ldr	r0, [pc, #96]	; (82634 <hsmci_start_write_blocks+0xb8>)
   825d2:	4b1b      	ldr	r3, [pc, #108]	; (82640 <hsmci_start_write_blocks+0xc4>)
   825d4:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   825d6:	687b      	ldr	r3, [r7, #4]
   825d8:	60bb      	str	r3, [r7, #8]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   825da:	4b1a      	ldr	r3, [pc, #104]	; (82644 <hsmci_start_write_blocks+0xc8>)
   825dc:	60fb      	str	r3, [r7, #12]
	if (transfert_byte) {
   825de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   825e2:	2b00      	cmp	r3, #0
   825e4:	d003      	beq.n	825ee <hsmci_start_write_blocks+0x72>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   825e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   825e8:	b29b      	uxth	r3, r3
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   825ea:	613b      	str	r3, [r7, #16]
   825ec:	e005      	b.n	825fa <hsmci_start_write_blocks+0x7e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   825ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   825f0:	089b      	lsrs	r3, r3, #2
   825f2:	b29b      	uxth	r3, r3
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   825f4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   825f8:	613b      	str	r3, [r7, #16]
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   825fa:	4b13      	ldr	r3, [pc, #76]	; (82648 <hsmci_start_write_blocks+0xcc>)
   825fc:	617b      	str	r3, [r7, #20]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_MEM2PER_DMA_FC
			| DMAC_CTRLB_SRC_INCR_INCREMENTING
			| DMAC_CTRLB_DST_INCR_FIXED
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   825fe:	2300      	movs	r3, #0
   82600:	61bb      	str	r3, [r7, #24]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   82602:	f107 0308 	add.w	r3, r7, #8
   82606:	461a      	mov	r2, r3
   82608:	2100      	movs	r1, #0
   8260a:	480a      	ldr	r0, [pc, #40]	; (82634 <hsmci_start_write_blocks+0xb8>)
   8260c:	4b0f      	ldr	r3, [pc, #60]	; (8264c <hsmci_start_write_blocks+0xd0>)
   8260e:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   82610:	2100      	movs	r1, #0
   82612:	4808      	ldr	r0, [pc, #32]	; (82634 <hsmci_start_write_blocks+0xb8>)
   82614:	4b0e      	ldr	r3, [pc, #56]	; (82650 <hsmci_start_write_blocks+0xd4>)
   82616:	4798      	blx	r3
	hsmci_transfert_pos += nb_data;
   82618:	4b0e      	ldr	r3, [pc, #56]	; (82654 <hsmci_start_write_blocks+0xd8>)
   8261a:	681a      	ldr	r2, [r3, #0]
   8261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8261e:	4413      	add	r3, r2
   82620:	4a0c      	ldr	r2, [pc, #48]	; (82654 <hsmci_start_write_blocks+0xd8>)
   82622:	6013      	str	r3, [r2, #0]
	return true;
   82624:	2301      	movs	r3, #1
}
   82626:	4618      	mov	r0, r3
   82628:	3728      	adds	r7, #40	; 0x28
   8262a:	46bd      	mov	sp, r7
   8262c:	bd80      	pop	{r7, pc}
   8262e:	bf00      	nop
   82630:	20070624 	.word	0x20070624
   82634:	400c4000 	.word	0x400c4000
   82638:	000866a7 	.word	0x000866a7
   8263c:	01012000 	.word	0x01012000
   82640:	0008681b 	.word	0x0008681b
   82644:	40000034 	.word	0x40000034
   82648:	60310000 	.word	0x60310000
   8264c:	00086845 	.word	0x00086845
   82650:	0008670d 	.word	0x0008670d
   82654:	20070620 	.word	0x20070620

00082658 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
   82658:	b580      	push	{r7, lr}
   8265a:	b082      	sub	sp, #8
   8265c:	af00      	add	r7, sp, #0
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   8265e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82664:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   82666:	687a      	ldr	r2, [r7, #4]
   82668:	4b13      	ldr	r3, [pc, #76]	; (826b8 <hsmci_wait_end_of_write_blocks+0x60>)
   8266a:	4013      	ands	r3, r2
   8266c:	2b00      	cmp	r3, #0
   8266e:	d007      	beq.n	82680 <hsmci_wait_end_of_write_blocks+0x28>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   82670:	4b12      	ldr	r3, [pc, #72]	; (826bc <hsmci_wait_end_of_write_blocks+0x64>)
   82672:	4798      	blx	r3
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   82674:	2100      	movs	r1, #0
   82676:	4812      	ldr	r0, [pc, #72]	; (826c0 <hsmci_wait_end_of_write_blocks+0x68>)
   82678:	4b12      	ldr	r3, [pc, #72]	; (826c4 <hsmci_wait_end_of_write_blocks+0x6c>)
   8267a:	4798      	blx	r3
			return false;
   8267c:	2300      	movs	r3, #0
   8267e:	e017      	b.n	826b0 <hsmci_wait_end_of_write_blocks+0x58>
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   82680:	4b11      	ldr	r3, [pc, #68]	; (826c8 <hsmci_wait_end_of_write_blocks+0x70>)
   82682:	881b      	ldrh	r3, [r3, #0]
   82684:	461a      	mov	r2, r3
   82686:	4b11      	ldr	r3, [pc, #68]	; (826cc <hsmci_wait_end_of_write_blocks+0x74>)
   82688:	881b      	ldrh	r3, [r3, #0]
   8268a:	fb03 f202 	mul.w	r2, r3, r2
   8268e:	4b10      	ldr	r3, [pc, #64]	; (826d0 <hsmci_wait_end_of_write_blocks+0x78>)
   82690:	681b      	ldr	r3, [r3, #0]
   82692:	429a      	cmp	r2, r3
   82694:	d906      	bls.n	826a4 <hsmci_wait_end_of_write_blocks+0x4c>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   82696:	687b      	ldr	r3, [r7, #4]
   82698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   8269c:	2b00      	cmp	r3, #0
   8269e:	d001      	beq.n	826a4 <hsmci_wait_end_of_write_blocks+0x4c>
				return true;
   826a0:	2301      	movs	r3, #1
   826a2:	e005      	b.n	826b0 <hsmci_wait_end_of_write_blocks+0x58>
			}
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
   826a4:	687b      	ldr	r3, [r7, #4]
   826a6:	f003 0320 	and.w	r3, r3, #32
   826aa:	2b00      	cmp	r3, #0
   826ac:	d0d7      	beq.n	8265e <hsmci_wait_end_of_write_blocks+0x6>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;
   826ae:	2301      	movs	r3, #1

}
   826b0:	4618      	mov	r0, r3
   826b2:	3708      	adds	r7, #8
   826b4:	46bd      	mov	sp, r7
   826b6:	bd80      	pop	{r7, pc}
   826b8:	c0600000 	.word	0xc0600000
   826bc:	00081df5 	.word	0x00081df5
   826c0:	400c4000 	.word	0x400c4000
   826c4:	0008672b 	.word	0x0008672b
   826c8:	20070624 	.word	0x20070624
   826cc:	20070626 	.word	0x20070626
   826d0:	20070620 	.word	0x20070620

000826d4 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   826d4:	b480      	push	{r7}
   826d6:	b085      	sub	sp, #20
   826d8:	af00      	add	r7, sp, #0
   826da:	60f8      	str	r0, [r7, #12]
   826dc:	60b9      	str	r1, [r7, #8]
   826de:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   826e0:	68bb      	ldr	r3, [r7, #8]
   826e2:	2b00      	cmp	r3, #0
   826e4:	d007      	beq.n	826f6 <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   826e6:	68bb      	ldr	r3, [r7, #8]
   826e8:	681a      	ldr	r2, [r3, #0]
   826ea:	68fb      	ldr	r3, [r7, #12]
   826ec:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   826ee:	68bb      	ldr	r3, [r7, #8]
   826f0:	685a      	ldr	r2, [r3, #4]
   826f2:	68fb      	ldr	r3, [r7, #12]
   826f4:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   826f6:	687b      	ldr	r3, [r7, #4]
   826f8:	2b00      	cmp	r3, #0
   826fa:	d007      	beq.n	8270c <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   826fc:	687b      	ldr	r3, [r7, #4]
   826fe:	681a      	ldr	r2, [r3, #0]
   82700:	68fb      	ldr	r3, [r7, #12]
   82702:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   82704:	687b      	ldr	r3, [r7, #4]
   82706:	685a      	ldr	r2, [r3, #4]
   82708:	68fb      	ldr	r3, [r7, #12]
   8270a:	61da      	str	r2, [r3, #28]
	}
}
   8270c:	bf00      	nop
   8270e:	3714      	adds	r7, #20
   82710:	46bd      	mov	sp, r7
   82712:	bc80      	pop	{r7}
   82714:	4770      	bx	lr

00082716 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   82716:	b480      	push	{r7}
   82718:	b083      	sub	sp, #12
   8271a:	af00      	add	r7, sp, #0
   8271c:	6078      	str	r0, [r7, #4]
   8271e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   82720:	683a      	ldr	r2, [r7, #0]
   82722:	f240 1301 	movw	r3, #257	; 0x101
   82726:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   82728:	687a      	ldr	r2, [r7, #4]
   8272a:	6213      	str	r3, [r2, #32]
}
   8272c:	bf00      	nop
   8272e:	370c      	adds	r7, #12
   82730:	46bd      	mov	sp, r7
   82732:	bc80      	pop	{r7}
   82734:	4770      	bx	lr

00082736 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   82736:	b480      	push	{r7}
   82738:	b083      	sub	sp, #12
   8273a:	af00      	add	r7, sp, #0
   8273c:	6078      	str	r0, [r7, #4]
   8273e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   82740:	683a      	ldr	r2, [r7, #0]
   82742:	f240 2302 	movw	r3, #514	; 0x202
   82746:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   82748:	687a      	ldr	r2, [r7, #4]
   8274a:	6213      	str	r3, [r2, #32]
}
   8274c:	bf00      	nop
   8274e:	370c      	adds	r7, #12
   82750:	46bd      	mov	sp, r7
   82752:	bc80      	pop	{r7}
   82754:	4770      	bx	lr

00082756 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
   82756:	b480      	push	{r7}
   82758:	b083      	sub	sp, #12
   8275a:	af00      	add	r7, sp, #0
   8275c:	6078      	str	r0, [r7, #4]
   8275e:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
   82760:	683b      	ldr	r3, [r7, #0]
   82762:	2b00      	cmp	r3, #0
   82764:	d006      	beq.n	82774 <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
   82766:	687b      	ldr	r3, [r7, #4]
   82768:	685b      	ldr	r3, [r3, #4]
   8276a:	f043 0201 	orr.w	r2, r3, #1
   8276e:	687b      	ldr	r3, [r7, #4]
   82770:	605a      	str	r2, [r3, #4]
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
	}
}
   82772:	e005      	b.n	82780 <rtc_set_hour_mode+0x2a>
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
   82774:	687b      	ldr	r3, [r7, #4]
   82776:	685b      	ldr	r3, [r3, #4]
   82778:	f023 0201 	bic.w	r2, r3, #1
   8277c:	687b      	ldr	r3, [r7, #4]
   8277e:	605a      	str	r2, [r3, #4]
}
   82780:	bf00      	nop
   82782:	370c      	adds	r7, #12
   82784:	46bd      	mov	sp, r7
   82786:	bc80      	pop	{r7}
   82788:	4770      	bx	lr

0008278a <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
   8278a:	b480      	push	{r7}
   8278c:	b087      	sub	sp, #28
   8278e:	af00      	add	r7, sp, #0
   82790:	60f8      	str	r0, [r7, #12]
   82792:	60b9      	str	r1, [r7, #8]
   82794:	607a      	str	r2, [r7, #4]
   82796:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
   82798:	68fb      	ldr	r3, [r7, #12]
   8279a:	689b      	ldr	r3, [r3, #8]
   8279c:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
   8279e:	e002      	b.n	827a6 <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
   827a0:	68fb      	ldr	r3, [r7, #12]
   827a2:	689b      	ldr	r3, [r3, #8]
   827a4:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
   827a6:	68fb      	ldr	r3, [r7, #12]
   827a8:	689a      	ldr	r2, [r3, #8]
   827aa:	697b      	ldr	r3, [r7, #20]
   827ac:	429a      	cmp	r2, r3
   827ae:	d1f7      	bne.n	827a0 <rtc_get_time+0x16>
	}

	/* Hour */
	if (pul_hour) {
   827b0:	68bb      	ldr	r3, [r7, #8]
   827b2:	2b00      	cmp	r3, #0
   827b4:	d01c      	beq.n	827f0 <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
   827b6:	697b      	ldr	r3, [r7, #20]
   827b8:	0c1b      	lsrs	r3, r3, #16
   827ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   827be:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   827c0:	693b      	ldr	r3, [r7, #16]
   827c2:	091a      	lsrs	r2, r3, #4
   827c4:	4613      	mov	r3, r2
   827c6:	009b      	lsls	r3, r3, #2
   827c8:	4413      	add	r3, r2
   827ca:	005b      	lsls	r3, r3, #1
   827cc:	461a      	mov	r2, r3
   827ce:	693b      	ldr	r3, [r7, #16]
   827d0:	f003 030f 	and.w	r3, r3, #15
   827d4:	441a      	add	r2, r3
   827d6:	68bb      	ldr	r3, [r7, #8]
   827d8:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
   827da:	697b      	ldr	r3, [r7, #20]
   827dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
   827e0:	2b00      	cmp	r3, #0
   827e2:	d005      	beq.n	827f0 <rtc_get_time+0x66>
			*pul_hour += 12;
   827e4:	68bb      	ldr	r3, [r7, #8]
   827e6:	681b      	ldr	r3, [r3, #0]
   827e8:	f103 020c 	add.w	r2, r3, #12
   827ec:	68bb      	ldr	r3, [r7, #8]
   827ee:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
   827f0:	687b      	ldr	r3, [r7, #4]
   827f2:	2b00      	cmp	r3, #0
   827f4:	d011      	beq.n	8281a <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
   827f6:	697b      	ldr	r3, [r7, #20]
   827f8:	0a1b      	lsrs	r3, r3, #8
   827fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   827fe:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
   82800:	693b      	ldr	r3, [r7, #16]
   82802:	091a      	lsrs	r2, r3, #4
   82804:	4613      	mov	r3, r2
   82806:	009b      	lsls	r3, r3, #2
   82808:	4413      	add	r3, r2
   8280a:	005b      	lsls	r3, r3, #1
   8280c:	461a      	mov	r2, r3
   8280e:	693b      	ldr	r3, [r7, #16]
   82810:	f003 030f 	and.w	r3, r3, #15
   82814:	441a      	add	r2, r3
   82816:	687b      	ldr	r3, [r7, #4]
   82818:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
   8281a:	683b      	ldr	r3, [r7, #0]
   8281c:	2b00      	cmp	r3, #0
   8281e:	d010      	beq.n	82842 <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
   82820:	697b      	ldr	r3, [r7, #20]
   82822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   82826:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   82828:	693b      	ldr	r3, [r7, #16]
   8282a:	091a      	lsrs	r2, r3, #4
   8282c:	4613      	mov	r3, r2
   8282e:	009b      	lsls	r3, r3, #2
   82830:	4413      	add	r3, r2
   82832:	005b      	lsls	r3, r3, #1
   82834:	461a      	mov	r2, r3
   82836:	693b      	ldr	r3, [r7, #16]
   82838:	f003 030f 	and.w	r3, r3, #15
   8283c:	441a      	add	r2, r3
   8283e:	683b      	ldr	r3, [r7, #0]
   82840:	601a      	str	r2, [r3, #0]
	}
}
   82842:	bf00      	nop
   82844:	371c      	adds	r7, #28
   82846:	46bd      	mov	sp, r7
   82848:	bc80      	pop	{r7}
   8284a:	4770      	bx	lr

0008284c <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
   8284c:	b480      	push	{r7}
   8284e:	b089      	sub	sp, #36	; 0x24
   82850:	af00      	add	r7, sp, #0
   82852:	60f8      	str	r0, [r7, #12]
   82854:	60b9      	str	r1, [r7, #8]
   82856:	607a      	str	r2, [r7, #4]
   82858:	603b      	str	r3, [r7, #0]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
   8285a:	68fb      	ldr	r3, [r7, #12]
   8285c:	68db      	ldr	r3, [r3, #12]
   8285e:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
   82860:	e002      	b.n	82868 <rtc_get_date+0x1c>
		ul_date = p_rtc->RTC_CALR;
   82862:	68fb      	ldr	r3, [r7, #12]
   82864:	68db      	ldr	r3, [r3, #12]
   82866:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
   82868:	68fb      	ldr	r3, [r7, #12]
   8286a:	68da      	ldr	r2, [r3, #12]
   8286c:	69fb      	ldr	r3, [r7, #28]
   8286e:	429a      	cmp	r2, r3
   82870:	d1f7      	bne.n	82862 <rtc_get_date+0x16>
	}

	/* Retrieve year */
	if (pul_year) {
   82872:	68bb      	ldr	r3, [r7, #8]
   82874:	2b00      	cmp	r3, #0
   82876:	d024      	beq.n	828c2 <rtc_get_date+0x76>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
   82878:	69fb      	ldr	r3, [r7, #28]
   8287a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8287e:	61bb      	str	r3, [r7, #24]
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   82880:	69bb      	ldr	r3, [r7, #24]
   82882:	091a      	lsrs	r2, r3, #4
   82884:	4613      	mov	r3, r2
   82886:	009b      	lsls	r3, r3, #2
   82888:	4413      	add	r3, r2
   8288a:	005b      	lsls	r3, r3, #1
   8288c:	461a      	mov	r2, r3
   8288e:	69bb      	ldr	r3, [r7, #24]
   82890:	f003 030f 	and.w	r3, r3, #15
   82894:	4413      	add	r3, r2
   82896:	617b      	str	r3, [r7, #20]
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
   82898:	69fb      	ldr	r3, [r7, #28]
   8289a:	0a1b      	lsrs	r3, r3, #8
   8289c:	b2db      	uxtb	r3, r3
   8289e:	61bb      	str	r3, [r7, #24]
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
   828a0:	697b      	ldr	r3, [r7, #20]
   828a2:	2264      	movs	r2, #100	; 0x64
   828a4:	fb02 f103 	mul.w	r1, r2, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   828a8:	69bb      	ldr	r3, [r7, #24]
   828aa:	091a      	lsrs	r2, r3, #4
   828ac:	4613      	mov	r3, r2
   828ae:	009b      	lsls	r3, r3, #2
   828b0:	4413      	add	r3, r2
   828b2:	005b      	lsls	r3, r3, #1
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
   828b4:	18ca      	adds	r2, r1, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   828b6:	69bb      	ldr	r3, [r7, #24]
   828b8:	f003 030f 	and.w	r3, r3, #15
   828bc:	441a      	add	r2, r3
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
   828be:	68bb      	ldr	r3, [r7, #8]
   828c0:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve month */
	if (pul_month) {
   828c2:	687b      	ldr	r3, [r7, #4]
   828c4:	2b00      	cmp	r3, #0
   828c6:	d011      	beq.n	828ec <rtc_get_date+0xa0>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
   828c8:	69fb      	ldr	r3, [r7, #28]
   828ca:	0c1b      	lsrs	r3, r3, #16
   828cc:	f003 031f 	and.w	r3, r3, #31
   828d0:	61bb      	str	r3, [r7, #24]
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   828d2:	69bb      	ldr	r3, [r7, #24]
   828d4:	091a      	lsrs	r2, r3, #4
   828d6:	4613      	mov	r3, r2
   828d8:	009b      	lsls	r3, r3, #2
   828da:	4413      	add	r3, r2
   828dc:	005b      	lsls	r3, r3, #1
   828de:	461a      	mov	r2, r3
   828e0:	69bb      	ldr	r3, [r7, #24]
   828e2:	f003 030f 	and.w	r3, r3, #15
   828e6:	441a      	add	r2, r3
   828e8:	687b      	ldr	r3, [r7, #4]
   828ea:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve day */
	if (pul_day) {
   828ec:	683b      	ldr	r3, [r7, #0]
   828ee:	2b00      	cmp	r3, #0
   828f0:	d011      	beq.n	82916 <rtc_get_date+0xca>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
   828f2:	69fb      	ldr	r3, [r7, #28]
   828f4:	0e1b      	lsrs	r3, r3, #24
   828f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   828fa:	61bb      	str	r3, [r7, #24]
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   828fc:	69bb      	ldr	r3, [r7, #24]
   828fe:	091a      	lsrs	r2, r3, #4
   82900:	4613      	mov	r3, r2
   82902:	009b      	lsls	r3, r3, #2
   82904:	4413      	add	r3, r2
   82906:	005b      	lsls	r3, r3, #1
   82908:	461a      	mov	r2, r3
   8290a:	69bb      	ldr	r3, [r7, #24]
   8290c:	f003 030f 	and.w	r3, r3, #15
   82910:	441a      	add	r2, r3
   82912:	683b      	ldr	r3, [r7, #0]
   82914:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
   82916:	6abb      	ldr	r3, [r7, #40]	; 0x28
   82918:	2b00      	cmp	r3, #0
   8291a:	d005      	beq.n	82928 <rtc_get_date+0xdc>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
   8291c:	69fb      	ldr	r3, [r7, #28]
   8291e:	0d5b      	lsrs	r3, r3, #21
   82920:	f003 0207 	and.w	r2, r3, #7
   82924:	6abb      	ldr	r3, [r7, #40]	; 0x28
   82926:	601a      	str	r2, [r3, #0]
	}
}
   82928:	bf00      	nop
   8292a:	3724      	adds	r7, #36	; 0x24
   8292c:	46bd      	mov	sp, r7
   8292e:	bc80      	pop	{r7}
   82930:	4770      	bx	lr

00082932 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   82932:	b480      	push	{r7}
   82934:	b087      	sub	sp, #28
   82936:	af00      	add	r7, sp, #0
   82938:	60f8      	str	r0, [r7, #12]
   8293a:	60b9      	str	r1, [r7, #8]
   8293c:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   8293e:	68bb      	ldr	r3, [r7, #8]
   82940:	085a      	lsrs	r2, r3, #1
   82942:	687b      	ldr	r3, [r7, #4]
   82944:	441a      	add	r2, r3
   82946:	68bb      	ldr	r3, [r7, #8]
   82948:	fbb2 f3f3 	udiv	r3, r2, r3
   8294c:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   8294e:	697b      	ldr	r3, [r7, #20]
   82950:	2b03      	cmp	r3, #3
   82952:	d903      	bls.n	8295c <usart_set_spi_master_baudrate+0x2a>
   82954:	697b      	ldr	r3, [r7, #20]
   82956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8295a:	d301      	bcc.n	82960 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   8295c:	2301      	movs	r3, #1
   8295e:	e003      	b.n	82968 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   82960:	68fb      	ldr	r3, [r7, #12]
   82962:	697a      	ldr	r2, [r7, #20]
   82964:	621a      	str	r2, [r3, #32]

	return 0;
   82966:	2300      	movs	r3, #0
}
   82968:	4618      	mov	r0, r3
   8296a:	371c      	adds	r7, #28
   8296c:	46bd      	mov	sp, r7
   8296e:	bc80      	pop	{r7}
   82970:	4770      	bx	lr
	...

00082974 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   82974:	b580      	push	{r7, lr}
   82976:	b082      	sub	sp, #8
   82978:	af00      	add	r7, sp, #0
   8297a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   8297c:	6878      	ldr	r0, [r7, #4]
   8297e:	4b0d      	ldr	r3, [pc, #52]	; (829b4 <usart_reset+0x40>)
   82980:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   82982:	687b      	ldr	r3, [r7, #4]
   82984:	2200      	movs	r2, #0
   82986:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   82988:	687b      	ldr	r3, [r7, #4]
   8298a:	2200      	movs	r2, #0
   8298c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8298e:	687b      	ldr	r3, [r7, #4]
   82990:	2200      	movs	r2, #0
   82992:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   82994:	6878      	ldr	r0, [r7, #4]
   82996:	4b08      	ldr	r3, [pc, #32]	; (829b8 <usart_reset+0x44>)
   82998:	4798      	blx	r3
	usart_reset_rx(p_usart);
   8299a:	6878      	ldr	r0, [r7, #4]
   8299c:	4b07      	ldr	r3, [pc, #28]	; (829bc <usart_reset+0x48>)
   8299e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   829a0:	6878      	ldr	r0, [r7, #4]
   829a2:	4b07      	ldr	r3, [pc, #28]	; (829c0 <usart_reset+0x4c>)
   829a4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   829a6:	6878      	ldr	r0, [r7, #4]
   829a8:	4b06      	ldr	r3, [pc, #24]	; (829c4 <usart_reset+0x50>)
   829aa:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   829ac:	bf00      	nop
   829ae:	3708      	adds	r7, #8
   829b0:	46bd      	mov	sp, r7
   829b2:	bd80      	pop	{r7, pc}
   829b4:	00082bb9 	.word	0x00082bb9
   829b8:	00082b09 	.word	0x00082b09
   829bc:	00082b51 	.word	0x00082b51
   829c0:	00082b69 	.word	0x00082b69
   829c4:	00082b83 	.word	0x00082b83

000829c8 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   829c8:	b580      	push	{r7, lr}
   829ca:	b084      	sub	sp, #16
   829cc:	af00      	add	r7, sp, #0
   829ce:	60f8      	str	r0, [r7, #12]
   829d0:	60b9      	str	r1, [r7, #8]
   829d2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   829d4:	68f8      	ldr	r0, [r7, #12]
   829d6:	4b3d      	ldr	r3, [pc, #244]	; (82acc <usart_init_spi_master+0x104>)
   829d8:	4798      	blx	r3

	ul_reg_val = 0;
   829da:	4b3d      	ldr	r3, [pc, #244]	; (82ad0 <usart_init_spi_master+0x108>)
   829dc:	2200      	movs	r2, #0
   829de:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   829e0:	68bb      	ldr	r3, [r7, #8]
   829e2:	2b00      	cmp	r3, #0
   829e4:	d00d      	beq.n	82a02 <usart_init_spi_master+0x3a>
   829e6:	68bb      	ldr	r3, [r7, #8]
   829e8:	689b      	ldr	r3, [r3, #8]
   829ea:	2b03      	cmp	r3, #3
   829ec:	d809      	bhi.n	82a02 <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   829ee:	68bb      	ldr	r3, [r7, #8]
   829f0:	681b      	ldr	r3, [r3, #0]
   829f2:	687a      	ldr	r2, [r7, #4]
   829f4:	4619      	mov	r1, r3
   829f6:	68f8      	ldr	r0, [r7, #12]
   829f8:	4b36      	ldr	r3, [pc, #216]	; (82ad4 <usart_init_spi_master+0x10c>)
   829fa:	4798      	blx	r3
   829fc:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   829fe:	2b00      	cmp	r3, #0
   82a00:	d001      	beq.n	82a06 <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   82a02:	2301      	movs	r3, #1
   82a04:	e05d      	b.n	82ac2 <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   82a06:	68bb      	ldr	r3, [r7, #8]
   82a08:	685a      	ldr	r2, [r3, #4]
   82a0a:	4b31      	ldr	r3, [pc, #196]	; (82ad0 <usart_init_spi_master+0x108>)
   82a0c:	681b      	ldr	r3, [r3, #0]
   82a0e:	4313      	orrs	r3, r2
   82a10:	4a2f      	ldr	r2, [pc, #188]	; (82ad0 <usart_init_spi_master+0x108>)
   82a12:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   82a14:	68bb      	ldr	r3, [r7, #8]
   82a16:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   82a18:	4b2d      	ldr	r3, [pc, #180]	; (82ad0 <usart_init_spi_master+0x108>)
   82a1a:	681b      	ldr	r3, [r3, #0]
   82a1c:	4313      	orrs	r3, r2
   82a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   82a22:	f043 030e 	orr.w	r3, r3, #14
   82a26:	4a2a      	ldr	r2, [pc, #168]	; (82ad0 <usart_init_spi_master+0x108>)
   82a28:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   82a2a:	68bb      	ldr	r3, [r7, #8]
   82a2c:	689b      	ldr	r3, [r3, #8]
   82a2e:	2b03      	cmp	r3, #3
   82a30:	d83e      	bhi.n	82ab0 <usart_init_spi_master+0xe8>
   82a32:	a201      	add	r2, pc, #4	; (adr r2, 82a38 <usart_init_spi_master+0x70>)
   82a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82a38:	00082a49 	.word	0x00082a49
   82a3c:	00082a63 	.word	0x00082a63
   82a40:	00082a7d 	.word	0x00082a7d
   82a44:	00082a97 	.word	0x00082a97
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   82a48:	4b21      	ldr	r3, [pc, #132]	; (82ad0 <usart_init_spi_master+0x108>)
   82a4a:	681b      	ldr	r3, [r3, #0]
   82a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   82a50:	4a1f      	ldr	r2, [pc, #124]	; (82ad0 <usart_init_spi_master+0x108>)
   82a52:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   82a54:	4b1e      	ldr	r3, [pc, #120]	; (82ad0 <usart_init_spi_master+0x108>)
   82a56:	681b      	ldr	r3, [r3, #0]
   82a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82a5c:	4a1c      	ldr	r2, [pc, #112]	; (82ad0 <usart_init_spi_master+0x108>)
   82a5e:	6013      	str	r3, [r2, #0]
		break;
   82a60:	e027      	b.n	82ab2 <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   82a62:	4b1b      	ldr	r3, [pc, #108]	; (82ad0 <usart_init_spi_master+0x108>)
   82a64:	681b      	ldr	r3, [r3, #0]
   82a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   82a6a:	4a19      	ldr	r2, [pc, #100]	; (82ad0 <usart_init_spi_master+0x108>)
   82a6c:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   82a6e:	4b18      	ldr	r3, [pc, #96]	; (82ad0 <usart_init_spi_master+0x108>)
   82a70:	681b      	ldr	r3, [r3, #0]
   82a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82a76:	4a16      	ldr	r2, [pc, #88]	; (82ad0 <usart_init_spi_master+0x108>)
   82a78:	6013      	str	r3, [r2, #0]
		break;
   82a7a:	e01a      	b.n	82ab2 <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   82a7c:	4b14      	ldr	r3, [pc, #80]	; (82ad0 <usart_init_spi_master+0x108>)
   82a7e:	681b      	ldr	r3, [r3, #0]
   82a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   82a84:	4a12      	ldr	r2, [pc, #72]	; (82ad0 <usart_init_spi_master+0x108>)
   82a86:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   82a88:	4b11      	ldr	r3, [pc, #68]	; (82ad0 <usart_init_spi_master+0x108>)
   82a8a:	681b      	ldr	r3, [r3, #0]
   82a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82a90:	4a0f      	ldr	r2, [pc, #60]	; (82ad0 <usart_init_spi_master+0x108>)
   82a92:	6013      	str	r3, [r2, #0]
		break;
   82a94:	e00d      	b.n	82ab2 <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   82a96:	4b0e      	ldr	r3, [pc, #56]	; (82ad0 <usart_init_spi_master+0x108>)
   82a98:	681b      	ldr	r3, [r3, #0]
   82a9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   82a9e:	4a0c      	ldr	r2, [pc, #48]	; (82ad0 <usart_init_spi_master+0x108>)
   82aa0:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   82aa2:	4b0b      	ldr	r3, [pc, #44]	; (82ad0 <usart_init_spi_master+0x108>)
   82aa4:	681b      	ldr	r3, [r3, #0]
   82aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82aaa:	4a09      	ldr	r2, [pc, #36]	; (82ad0 <usart_init_spi_master+0x108>)
   82aac:	6013      	str	r3, [r2, #0]
		break;
   82aae:	e000      	b.n	82ab2 <usart_init_spi_master+0xea>

	default:
		break;
   82ab0:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   82ab2:	68fb      	ldr	r3, [r7, #12]
   82ab4:	685a      	ldr	r2, [r3, #4]
   82ab6:	4b06      	ldr	r3, [pc, #24]	; (82ad0 <usart_init_spi_master+0x108>)
   82ab8:	681b      	ldr	r3, [r3, #0]
   82aba:	431a      	orrs	r2, r3
   82abc:	68fb      	ldr	r3, [r7, #12]
   82abe:	605a      	str	r2, [r3, #4]

	return 0;
   82ac0:	2300      	movs	r3, #0
}
   82ac2:	4618      	mov	r0, r3
   82ac4:	3710      	adds	r7, #16
   82ac6:	46bd      	mov	sp, r7
   82ac8:	bd80      	pop	{r7, pc}
   82aca:	bf00      	nop
   82acc:	00082975 	.word	0x00082975
   82ad0:	20070628 	.word	0x20070628
   82ad4:	00082933 	.word	0x00082933

00082ad8 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   82ad8:	b480      	push	{r7}
   82ada:	b083      	sub	sp, #12
   82adc:	af00      	add	r7, sp, #0
   82ade:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   82ae0:	687b      	ldr	r3, [r7, #4]
   82ae2:	2240      	movs	r2, #64	; 0x40
   82ae4:	601a      	str	r2, [r3, #0]
}
   82ae6:	bf00      	nop
   82ae8:	370c      	adds	r7, #12
   82aea:	46bd      	mov	sp, r7
   82aec:	bc80      	pop	{r7}
   82aee:	4770      	bx	lr

00082af0 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   82af0:	b480      	push	{r7}
   82af2:	b083      	sub	sp, #12
   82af4:	af00      	add	r7, sp, #0
   82af6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   82af8:	687b      	ldr	r3, [r7, #4]
   82afa:	2280      	movs	r2, #128	; 0x80
   82afc:	601a      	str	r2, [r3, #0]
}
   82afe:	bf00      	nop
   82b00:	370c      	adds	r7, #12
   82b02:	46bd      	mov	sp, r7
   82b04:	bc80      	pop	{r7}
   82b06:	4770      	bx	lr

00082b08 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   82b08:	b480      	push	{r7}
   82b0a:	b083      	sub	sp, #12
   82b0c:	af00      	add	r7, sp, #0
   82b0e:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82b10:	687b      	ldr	r3, [r7, #4]
   82b12:	2288      	movs	r2, #136	; 0x88
   82b14:	601a      	str	r2, [r3, #0]
}
   82b16:	bf00      	nop
   82b18:	370c      	adds	r7, #12
   82b1a:	46bd      	mov	sp, r7
   82b1c:	bc80      	pop	{r7}
   82b1e:	4770      	bx	lr

00082b20 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   82b20:	b480      	push	{r7}
   82b22:	b083      	sub	sp, #12
   82b24:	af00      	add	r7, sp, #0
   82b26:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   82b28:	687b      	ldr	r3, [r7, #4]
   82b2a:	2210      	movs	r2, #16
   82b2c:	601a      	str	r2, [r3, #0]
}
   82b2e:	bf00      	nop
   82b30:	370c      	adds	r7, #12
   82b32:	46bd      	mov	sp, r7
   82b34:	bc80      	pop	{r7}
   82b36:	4770      	bx	lr

00082b38 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   82b38:	b480      	push	{r7}
   82b3a:	b083      	sub	sp, #12
   82b3c:	af00      	add	r7, sp, #0
   82b3e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   82b40:	687b      	ldr	r3, [r7, #4]
   82b42:	2220      	movs	r2, #32
   82b44:	601a      	str	r2, [r3, #0]
}
   82b46:	bf00      	nop
   82b48:	370c      	adds	r7, #12
   82b4a:	46bd      	mov	sp, r7
   82b4c:	bc80      	pop	{r7}
   82b4e:	4770      	bx	lr

00082b50 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   82b50:	b480      	push	{r7}
   82b52:	b083      	sub	sp, #12
   82b54:	af00      	add	r7, sp, #0
   82b56:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82b58:	687b      	ldr	r3, [r7, #4]
   82b5a:	2224      	movs	r2, #36	; 0x24
   82b5c:	601a      	str	r2, [r3, #0]
}
   82b5e:	bf00      	nop
   82b60:	370c      	adds	r7, #12
   82b62:	46bd      	mov	sp, r7
   82b64:	bc80      	pop	{r7}
   82b66:	4770      	bx	lr

00082b68 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   82b68:	b480      	push	{r7}
   82b6a:	b083      	sub	sp, #12
   82b6c:	af00      	add	r7, sp, #0
   82b6e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   82b70:	687b      	ldr	r3, [r7, #4]
   82b72:	f44f 7280 	mov.w	r2, #256	; 0x100
   82b76:	601a      	str	r2, [r3, #0]
}
   82b78:	bf00      	nop
   82b7a:	370c      	adds	r7, #12
   82b7c:	46bd      	mov	sp, r7
   82b7e:	bc80      	pop	{r7}
   82b80:	4770      	bx	lr

00082b82 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   82b82:	b480      	push	{r7}
   82b84:	b083      	sub	sp, #12
   82b86:	af00      	add	r7, sp, #0
   82b88:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82b8a:	687b      	ldr	r3, [r7, #4]
   82b8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82b90:	601a      	str	r2, [r3, #0]
}
   82b92:	bf00      	nop
   82b94:	370c      	adds	r7, #12
   82b96:	46bd      	mov	sp, r7
   82b98:	bc80      	pop	{r7}
   82b9a:	4770      	bx	lr

00082b9c <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   82b9c:	b480      	push	{r7}
   82b9e:	b083      	sub	sp, #12
   82ba0:	af00      	add	r7, sp, #0
   82ba2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   82ba4:	687b      	ldr	r3, [r7, #4]
   82ba6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82baa:	601a      	str	r2, [r3, #0]
}
   82bac:	bf00      	nop
   82bae:	370c      	adds	r7, #12
   82bb0:	46bd      	mov	sp, r7
   82bb2:	bc80      	pop	{r7}
   82bb4:	4770      	bx	lr
	...

00082bb8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   82bb8:	b480      	push	{r7}
   82bba:	b083      	sub	sp, #12
   82bbc:	af00      	add	r7, sp, #0
   82bbe:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   82bc0:	687b      	ldr	r3, [r7, #4]
   82bc2:	4a04      	ldr	r2, [pc, #16]	; (82bd4 <usart_disable_writeprotect+0x1c>)
   82bc4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   82bc8:	bf00      	nop
   82bca:	370c      	adds	r7, #12
   82bcc:	46bd      	mov	sp, r7
   82bce:	bc80      	pop	{r7}
   82bd0:	4770      	bx	lr
   82bd2:	bf00      	nop
   82bd4:	55534100 	.word	0x55534100

00082bd8 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   82bd8:	b580      	push	{r7, lr}
   82bda:	b084      	sub	sp, #16
   82bdc:	af00      	add	r7, sp, #0
   82bde:	4603      	mov	r3, r0
   82be0:	71fb      	strb	r3, [r7, #7]
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
   82be2:	2100      	movs	r1, #0
   82be4:	4817      	ldr	r0, [pc, #92]	; (82c44 <disk_initialize+0x6c>)
   82be6:	4b18      	ldr	r3, [pc, #96]	; (82c48 <disk_initialize+0x70>)
   82be8:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   82bea:	79fb      	ldrb	r3, [r7, #7]
   82bec:	2b02      	cmp	r3, #2
   82bee:	d901      	bls.n	82bf4 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   82bf0:	2301      	movs	r3, #1
   82bf2:	e022      	b.n	82c3a <disk_initialize+0x62>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   82bf4:	2300      	movs	r3, #0
   82bf6:	60fb      	str	r3, [r7, #12]
   82bf8:	e00b      	b.n	82c12 <disk_initialize+0x3a>
		mem_status = mem_test_unit_ready(drv);
   82bfa:	79fb      	ldrb	r3, [r7, #7]
   82bfc:	4618      	mov	r0, r3
   82bfe:	4b13      	ldr	r3, [pc, #76]	; (82c4c <disk_initialize+0x74>)
   82c00:	4798      	blx	r3
   82c02:	4603      	mov	r3, r0
   82c04:	72fb      	strb	r3, [r7, #11]
		if (CTRL_BUSY != mem_status) {
   82c06:	7afb      	ldrb	r3, [r7, #11]
   82c08:	2b03      	cmp	r3, #3
   82c0a:	d106      	bne.n	82c1a <disk_initialize+0x42>
	for (i = 0; i < 2; i ++) {
   82c0c:	68fb      	ldr	r3, [r7, #12]
   82c0e:	3301      	adds	r3, #1
   82c10:	60fb      	str	r3, [r7, #12]
   82c12:	68fb      	ldr	r3, [r7, #12]
   82c14:	2b01      	cmp	r3, #1
   82c16:	ddf0      	ble.n	82bfa <disk_initialize+0x22>
   82c18:	e000      	b.n	82c1c <disk_initialize+0x44>
			break;
   82c1a:	bf00      	nop
		}
	}
	if (mem_status != CTRL_GOOD) {
   82c1c:	7afb      	ldrb	r3, [r7, #11]
   82c1e:	2b00      	cmp	r3, #0
   82c20:	d001      	beq.n	82c26 <disk_initialize+0x4e>
		return STA_NOINIT;
   82c22:	2301      	movs	r3, #1
   82c24:	e009      	b.n	82c3a <disk_initialize+0x62>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   82c26:	79fb      	ldrb	r3, [r7, #7]
   82c28:	4618      	mov	r0, r3
   82c2a:	4b09      	ldr	r3, [pc, #36]	; (82c50 <disk_initialize+0x78>)
   82c2c:	4798      	blx	r3
   82c2e:	4603      	mov	r3, r0
   82c30:	2b00      	cmp	r3, #0
   82c32:	d001      	beq.n	82c38 <disk_initialize+0x60>
		return STA_PROTECT;
   82c34:	2304      	movs	r3, #4
   82c36:	e000      	b.n	82c3a <disk_initialize+0x62>
	}

	/* The memory should already be initialized */
	return 0;
   82c38:	2300      	movs	r3, #0
}
   82c3a:	4618      	mov	r0, r3
   82c3c:	3710      	adds	r7, #16
   82c3e:	46bd      	mov	sp, r7
   82c40:	bd80      	pop	{r7, pc}
   82c42:	bf00      	nop
   82c44:	400e1a60 	.word	0x400e1a60
   82c48:	00082757 	.word	0x00082757
   82c4c:	00081c0d 	.word	0x00081c0d
   82c50:	00081c9d 	.word	0x00081c9d

00082c54 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   82c54:	b580      	push	{r7, lr}
   82c56:	b082      	sub	sp, #8
   82c58:	af00      	add	r7, sp, #0
   82c5a:	4603      	mov	r3, r0
   82c5c:	71fb      	strb	r3, [r7, #7]
	switch (mem_test_unit_ready(drv)) {
   82c5e:	79fb      	ldrb	r3, [r7, #7]
   82c60:	4618      	mov	r0, r3
   82c62:	4b08      	ldr	r3, [pc, #32]	; (82c84 <disk_status+0x30>)
   82c64:	4798      	blx	r3
   82c66:	4603      	mov	r3, r0
   82c68:	2b00      	cmp	r3, #0
   82c6a:	d002      	beq.n	82c72 <disk_status+0x1e>
   82c6c:	2b02      	cmp	r3, #2
   82c6e:	d002      	beq.n	82c76 <disk_status+0x22>
   82c70:	e003      	b.n	82c7a <disk_status+0x26>
	case CTRL_GOOD:
		return 0;
   82c72:	2300      	movs	r3, #0
   82c74:	e002      	b.n	82c7c <disk_status+0x28>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   82c76:	2303      	movs	r3, #3
   82c78:	e000      	b.n	82c7c <disk_status+0x28>
	default:
		return STA_NOINIT;
   82c7a:	2301      	movs	r3, #1
	}
}
   82c7c:	4618      	mov	r0, r3
   82c7e:	3708      	adds	r7, #8
   82c80:	46bd      	mov	sp, r7
   82c82:	bd80      	pop	{r7, pc}
   82c84:	00081c0d 	.word	0x00081c0d

00082c88 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   82c88:	b580      	push	{r7, lr}
   82c8a:	b088      	sub	sp, #32
   82c8c:	af00      	add	r7, sp, #0
   82c8e:	60b9      	str	r1, [r7, #8]
   82c90:	607a      	str	r2, [r7, #4]
   82c92:	461a      	mov	r2, r3
   82c94:	4603      	mov	r3, r0
   82c96:	73fb      	strb	r3, [r7, #15]
   82c98:	4613      	mov	r3, r2
   82c9a:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   82c9c:	7bfb      	ldrb	r3, [r7, #15]
   82c9e:	4618      	mov	r0, r3
   82ca0:	4b22      	ldr	r3, [pc, #136]	; (82d2c <disk_read+0xa4>)
   82ca2:	4798      	blx	r3
   82ca4:	4603      	mov	r3, r0
   82ca6:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   82ca8:	7efb      	ldrb	r3, [r7, #27]
   82caa:	2b00      	cmp	r3, #0
   82cac:	d101      	bne.n	82cb2 <disk_read+0x2a>
		return RES_ERROR;
   82cae:	2301      	movs	r3, #1
   82cb0:	e037      	b.n	82d22 <disk_read+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   82cb2:	f107 0214 	add.w	r2, r7, #20
   82cb6:	7bfb      	ldrb	r3, [r7, #15]
   82cb8:	4611      	mov	r1, r2
   82cba:	4618      	mov	r0, r3
   82cbc:	4b1c      	ldr	r3, [pc, #112]	; (82d30 <disk_read+0xa8>)
   82cbe:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   82cc0:	7bbb      	ldrb	r3, [r7, #14]
   82cc2:	7efa      	ldrb	r2, [r7, #27]
   82cc4:	fb02 f303 	mul.w	r3, r2, r3
   82cc8:	461a      	mov	r2, r3
   82cca:	687b      	ldr	r3, [r7, #4]
   82ccc:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   82cce:	697b      	ldr	r3, [r7, #20]
   82cd0:	3301      	adds	r3, #1
   82cd2:	7ef9      	ldrb	r1, [r7, #27]
   82cd4:	fb01 f303 	mul.w	r3, r1, r3
	if ((sector + count * uc_sector_size) >
   82cd8:	429a      	cmp	r2, r3
   82cda:	d901      	bls.n	82ce0 <disk_read+0x58>
		return RES_PARERR;
   82cdc:	2304      	movs	r3, #4
   82cde:	e020      	b.n	82d22 <disk_read+0x9a>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   82ce0:	2300      	movs	r3, #0
   82ce2:	61fb      	str	r3, [r7, #28]
   82ce4:	e018      	b.n	82d18 <disk_read+0x90>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   82ce6:	7efb      	ldrb	r3, [r7, #27]
   82ce8:	69fa      	ldr	r2, [r7, #28]
   82cea:	fb02 f203 	mul.w	r2, r2, r3
   82cee:	687b      	ldr	r3, [r7, #4]
   82cf0:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   82cf2:	7efb      	ldrb	r3, [r7, #27]
   82cf4:	69fa      	ldr	r2, [r7, #28]
   82cf6:	fb02 f303 	mul.w	r3, r2, r3
   82cfa:	025b      	lsls	r3, r3, #9
   82cfc:	68ba      	ldr	r2, [r7, #8]
   82cfe:	441a      	add	r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   82d00:	7bfb      	ldrb	r3, [r7, #15]
   82d02:	4618      	mov	r0, r3
   82d04:	4b0b      	ldr	r3, [pc, #44]	; (82d34 <disk_read+0xac>)
   82d06:	4798      	blx	r3
   82d08:	4603      	mov	r3, r0
   82d0a:	2b00      	cmp	r3, #0
   82d0c:	d001      	beq.n	82d12 <disk_read+0x8a>
				CTRL_GOOD) {
			return RES_ERROR;
   82d0e:	2301      	movs	r3, #1
   82d10:	e007      	b.n	82d22 <disk_read+0x9a>
	for (i = 0; i < count; i++) {
   82d12:	69fb      	ldr	r3, [r7, #28]
   82d14:	3301      	adds	r3, #1
   82d16:	61fb      	str	r3, [r7, #28]
   82d18:	7bba      	ldrb	r2, [r7, #14]
   82d1a:	69fb      	ldr	r3, [r7, #28]
   82d1c:	429a      	cmp	r2, r3
   82d1e:	d8e2      	bhi.n	82ce6 <disk_read+0x5e>
		}
	}

	return RES_OK;
   82d20:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   82d22:	4618      	mov	r0, r3
   82d24:	3720      	adds	r7, #32
   82d26:	46bd      	mov	sp, r7
   82d28:	bd80      	pop	{r7, pc}
   82d2a:	bf00      	nop
   82d2c:	00081c79 	.word	0x00081c79
   82d30:	00081c41 	.word	0x00081c41
   82d34:	00081cd9 	.word	0x00081cd9

00082d38 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   82d38:	b580      	push	{r7, lr}
   82d3a:	b088      	sub	sp, #32
   82d3c:	af00      	add	r7, sp, #0
   82d3e:	60b9      	str	r1, [r7, #8]
   82d40:	607a      	str	r2, [r7, #4]
   82d42:	461a      	mov	r2, r3
   82d44:	4603      	mov	r3, r0
   82d46:	73fb      	strb	r3, [r7, #15]
   82d48:	4613      	mov	r3, r2
   82d4a:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   82d4c:	7bfb      	ldrb	r3, [r7, #15]
   82d4e:	4618      	mov	r0, r3
   82d50:	4b22      	ldr	r3, [pc, #136]	; (82ddc <disk_write+0xa4>)
   82d52:	4798      	blx	r3
   82d54:	4603      	mov	r3, r0
   82d56:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   82d58:	7efb      	ldrb	r3, [r7, #27]
   82d5a:	2b00      	cmp	r3, #0
   82d5c:	d101      	bne.n	82d62 <disk_write+0x2a>
		return RES_ERROR;
   82d5e:	2301      	movs	r3, #1
   82d60:	e037      	b.n	82dd2 <disk_write+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   82d62:	f107 0214 	add.w	r2, r7, #20
   82d66:	7bfb      	ldrb	r3, [r7, #15]
   82d68:	4611      	mov	r1, r2
   82d6a:	4618      	mov	r0, r3
   82d6c:	4b1c      	ldr	r3, [pc, #112]	; (82de0 <disk_write+0xa8>)
   82d6e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   82d70:	7bbb      	ldrb	r3, [r7, #14]
   82d72:	7efa      	ldrb	r2, [r7, #27]
   82d74:	fb02 f303 	mul.w	r3, r2, r3
   82d78:	461a      	mov	r2, r3
   82d7a:	687b      	ldr	r3, [r7, #4]
   82d7c:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   82d7e:	697b      	ldr	r3, [r7, #20]
   82d80:	3301      	adds	r3, #1
   82d82:	7ef9      	ldrb	r1, [r7, #27]
   82d84:	fb01 f303 	mul.w	r3, r1, r3
	if ((sector + count * uc_sector_size) >
   82d88:	429a      	cmp	r2, r3
   82d8a:	d901      	bls.n	82d90 <disk_write+0x58>
		return RES_PARERR;
   82d8c:	2304      	movs	r3, #4
   82d8e:	e020      	b.n	82dd2 <disk_write+0x9a>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   82d90:	2300      	movs	r3, #0
   82d92:	61fb      	str	r3, [r7, #28]
   82d94:	e018      	b.n	82dc8 <disk_write+0x90>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   82d96:	7efb      	ldrb	r3, [r7, #27]
   82d98:	69fa      	ldr	r2, [r7, #28]
   82d9a:	fb02 f203 	mul.w	r2, r2, r3
   82d9e:	687b      	ldr	r3, [r7, #4]
   82da0:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   82da2:	7efb      	ldrb	r3, [r7, #27]
   82da4:	69fa      	ldr	r2, [r7, #28]
   82da6:	fb02 f303 	mul.w	r3, r2, r3
   82daa:	025b      	lsls	r3, r3, #9
   82dac:	68ba      	ldr	r2, [r7, #8]
   82dae:	441a      	add	r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   82db0:	7bfb      	ldrb	r3, [r7, #15]
   82db2:	4618      	mov	r0, r3
   82db4:	4b0b      	ldr	r3, [pc, #44]	; (82de4 <disk_write+0xac>)
   82db6:	4798      	blx	r3
   82db8:	4603      	mov	r3, r0
   82dba:	2b00      	cmp	r3, #0
   82dbc:	d001      	beq.n	82dc2 <disk_write+0x8a>
				CTRL_GOOD) {
			return RES_ERROR;
   82dbe:	2301      	movs	r3, #1
   82dc0:	e007      	b.n	82dd2 <disk_write+0x9a>
	for (i = 0; i < count; i++) {
   82dc2:	69fb      	ldr	r3, [r7, #28]
   82dc4:	3301      	adds	r3, #1
   82dc6:	61fb      	str	r3, [r7, #28]
   82dc8:	7bba      	ldrb	r2, [r7, #14]
   82dca:	69fb      	ldr	r3, [r7, #28]
   82dcc:	429a      	cmp	r2, r3
   82dce:	d8e2      	bhi.n	82d96 <disk_write+0x5e>
		}
	}

	return RES_OK;
   82dd0:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   82dd2:	4618      	mov	r0, r3
   82dd4:	3720      	adds	r7, #32
   82dd6:	46bd      	mov	sp, r7
   82dd8:	bd80      	pop	{r7, pc}
   82dda:	bf00      	nop
   82ddc:	00081c79 	.word	0x00081c79
   82de0:	00081c41 	.word	0x00081c41
   82de4:	00081d15 	.word	0x00081d15

00082de8 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   82de8:	b580      	push	{r7, lr}
   82dea:	b084      	sub	sp, #16
   82dec:	af00      	add	r7, sp, #0
   82dee:	4603      	mov	r3, r0
   82df0:	603a      	str	r2, [r7, #0]
   82df2:	71fb      	strb	r3, [r7, #7]
   82df4:	460b      	mov	r3, r1
   82df6:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
   82df8:	2304      	movs	r3, #4
   82dfa:	73fb      	strb	r3, [r7, #15]

	switch (ctrl) {
   82dfc:	79bb      	ldrb	r3, [r7, #6]
   82dfe:	2b03      	cmp	r3, #3
   82e00:	d845      	bhi.n	82e8e <disk_ioctl+0xa6>
   82e02:	a201      	add	r2, pc, #4	; (adr r2, 82e08 <disk_ioctl+0x20>)
   82e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82e08:	00082e75 	.word	0x00082e75
   82e0c:	00082e25 	.word	0x00082e25
   82e10:	00082e41 	.word	0x00082e41
   82e14:	00082e19 	.word	0x00082e19
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   82e18:	683b      	ldr	r3, [r7, #0]
   82e1a:	2201      	movs	r2, #1
   82e1c:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   82e1e:	2300      	movs	r3, #0
   82e20:	73fb      	strb	r3, [r7, #15]
		break;
   82e22:	e036      	b.n	82e92 <disk_ioctl+0xaa>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   82e24:	f107 0208 	add.w	r2, r7, #8
   82e28:	79fb      	ldrb	r3, [r7, #7]
   82e2a:	4611      	mov	r1, r2
   82e2c:	4618      	mov	r0, r3
   82e2e:	4b1b      	ldr	r3, [pc, #108]	; (82e9c <disk_ioctl+0xb4>)
   82e30:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   82e32:	68bb      	ldr	r3, [r7, #8]
   82e34:	1c5a      	adds	r2, r3, #1
   82e36:	683b      	ldr	r3, [r7, #0]
   82e38:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   82e3a:	2300      	movs	r3, #0
   82e3c:	73fb      	strb	r3, [r7, #15]
	}
	break;
   82e3e:	e028      	b.n	82e92 <disk_ioctl+0xaa>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   82e40:	79fb      	ldrb	r3, [r7, #7]
   82e42:	4618      	mov	r0, r3
   82e44:	4b16      	ldr	r3, [pc, #88]	; (82ea0 <disk_ioctl+0xb8>)
   82e46:	4798      	blx	r3
   82e48:	4603      	mov	r3, r0
   82e4a:	73bb      	strb	r3, [r7, #14]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   82e4c:	7bbb      	ldrb	r3, [r7, #14]
   82e4e:	2b01      	cmp	r3, #1
   82e50:	d00a      	beq.n	82e68 <disk_ioctl+0x80>
   82e52:	7bbb      	ldrb	r3, [r7, #14]
   82e54:	2b02      	cmp	r3, #2
   82e56:	d007      	beq.n	82e68 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   82e58:	7bbb      	ldrb	r3, [r7, #14]
   82e5a:	2b04      	cmp	r3, #4
   82e5c:	d004      	beq.n	82e68 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   82e5e:	7bbb      	ldrb	r3, [r7, #14]
   82e60:	2b08      	cmp	r3, #8
   82e62:	d001      	beq.n	82e68 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   82e64:	2301      	movs	r3, #1
   82e66:	e015      	b.n	82e94 <disk_ioctl+0xac>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   82e68:	683b      	ldr	r3, [r7, #0]
   82e6a:	2200      	movs	r2, #0
   82e6c:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   82e6e:	2300      	movs	r3, #0
   82e70:	73fb      	strb	r3, [r7, #15]
	}
	break;
   82e72:	e00e      	b.n	82e92 <disk_ioctl+0xaa>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   82e74:	79fb      	ldrb	r3, [r7, #7]
   82e76:	4618      	mov	r0, r3
   82e78:	4b0a      	ldr	r3, [pc, #40]	; (82ea4 <disk_ioctl+0xbc>)
   82e7a:	4798      	blx	r3
   82e7c:	4603      	mov	r3, r0
   82e7e:	2b00      	cmp	r3, #0
   82e80:	d102      	bne.n	82e88 <disk_ioctl+0xa0>
			res = RES_OK;
   82e82:	2300      	movs	r3, #0
   82e84:	73fb      	strb	r3, [r7, #15]
		} else {
			res = RES_NOTRDY;
		}
		break;
   82e86:	e004      	b.n	82e92 <disk_ioctl+0xaa>
			res = RES_NOTRDY;
   82e88:	2303      	movs	r3, #3
   82e8a:	73fb      	strb	r3, [r7, #15]
		break;
   82e8c:	e001      	b.n	82e92 <disk_ioctl+0xaa>

	default:
		res = RES_PARERR;
   82e8e:	2304      	movs	r3, #4
   82e90:	73fb      	strb	r3, [r7, #15]
	}

	return res;
   82e92:	7bfb      	ldrb	r3, [r7, #15]
}
   82e94:	4618      	mov	r0, r3
   82e96:	3710      	adds	r7, #16
   82e98:	46bd      	mov	sp, r7
   82e9a:	bd80      	pop	{r7, pc}
   82e9c:	00081c41 	.word	0x00081c41
   82ea0:	00081c79 	.word	0x00081c79
   82ea4:	00081c0d 	.word	0x00081c0d

00082ea8 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   82ea8:	b590      	push	{r4, r7, lr}
   82eaa:	b08b      	sub	sp, #44	; 0x2c
   82eac:	af02      	add	r7, sp, #8
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
   82eae:	f107 0310 	add.w	r3, r7, #16
   82eb2:	f107 0214 	add.w	r2, r7, #20
   82eb6:	f107 0118 	add.w	r1, r7, #24
   82eba:	4813      	ldr	r0, [pc, #76]	; (82f08 <get_fattime+0x60>)
   82ebc:	4c13      	ldr	r4, [pc, #76]	; (82f0c <get_fattime+0x64>)
   82ebe:	47a0      	blx	r4
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
   82ec0:	1d38      	adds	r0, r7, #4
   82ec2:	f107 0208 	add.w	r2, r7, #8
   82ec6:	f107 010c 	add.w	r1, r7, #12
   82eca:	463b      	mov	r3, r7
   82ecc:	9300      	str	r3, [sp, #0]
   82ece:	4603      	mov	r3, r0
   82ed0:	480d      	ldr	r0, [pc, #52]	; (82f08 <get_fattime+0x60>)
   82ed2:	4c0f      	ldr	r4, [pc, #60]	; (82f10 <get_fattime+0x68>)
   82ed4:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
   82ed6:	68fb      	ldr	r3, [r7, #12]
   82ed8:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
   82edc:	065a      	lsls	r2, r3, #25
			| (ul_month << 21)
   82ede:	68bb      	ldr	r3, [r7, #8]
   82ee0:	055b      	lsls	r3, r3, #21
   82ee2:	431a      	orrs	r2, r3
			| (ul_day << 16)
   82ee4:	687b      	ldr	r3, [r7, #4]
   82ee6:	041b      	lsls	r3, r3, #16
   82ee8:	431a      	orrs	r2, r3
			| (ul_hour << 11)
   82eea:	69bb      	ldr	r3, [r7, #24]
   82eec:	02db      	lsls	r3, r3, #11
   82eee:	431a      	orrs	r2, r3
			| (ul_minute << 5)
   82ef0:	697b      	ldr	r3, [r7, #20]
   82ef2:	015b      	lsls	r3, r3, #5
   82ef4:	431a      	orrs	r2, r3
			| ((ul_second >> 1) << 0);
   82ef6:	693b      	ldr	r3, [r7, #16]
   82ef8:	085b      	lsrs	r3, r3, #1
	ul_time = ((ul_year - 1980) << 25)
   82efa:	4313      	orrs	r3, r2
   82efc:	61fb      	str	r3, [r7, #28]

	return ul_time;
   82efe:	69fb      	ldr	r3, [r7, #28]
}
   82f00:	4618      	mov	r0, r3
   82f02:	3724      	adds	r7, #36	; 0x24
   82f04:	46bd      	mov	sp, r7
   82f06:	bd90      	pop	{r4, r7, pc}
   82f08:	400e1a60 	.word	0x400e1a60
   82f0c:	0008278b 	.word	0x0008278b
   82f10:	0008284d 	.word	0x0008284d

00082f14 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   82f14:	b480      	push	{r7}
   82f16:	b087      	sub	sp, #28
   82f18:	af00      	add	r7, sp, #0
   82f1a:	60f8      	str	r0, [r7, #12]
   82f1c:	60b9      	str	r1, [r7, #8]
   82f1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   82f20:	68fb      	ldr	r3, [r7, #12]
   82f22:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   82f24:	68bb      	ldr	r3, [r7, #8]
   82f26:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   82f28:	e007      	b.n	82f3a <mem_cpy+0x26>
		*d++ = *s++;
   82f2a:	697b      	ldr	r3, [r7, #20]
   82f2c:	1c5a      	adds	r2, r3, #1
   82f2e:	617a      	str	r2, [r7, #20]
   82f30:	693a      	ldr	r2, [r7, #16]
   82f32:	1c51      	adds	r1, r2, #1
   82f34:	6139      	str	r1, [r7, #16]
   82f36:	7812      	ldrb	r2, [r2, #0]
   82f38:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   82f3a:	687b      	ldr	r3, [r7, #4]
   82f3c:	1e5a      	subs	r2, r3, #1
   82f3e:	607a      	str	r2, [r7, #4]
   82f40:	2b00      	cmp	r3, #0
   82f42:	d1f2      	bne.n	82f2a <mem_cpy+0x16>
}
   82f44:	bf00      	nop
   82f46:	371c      	adds	r7, #28
   82f48:	46bd      	mov	sp, r7
   82f4a:	bc80      	pop	{r7}
   82f4c:	4770      	bx	lr

00082f4e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   82f4e:	b480      	push	{r7}
   82f50:	b087      	sub	sp, #28
   82f52:	af00      	add	r7, sp, #0
   82f54:	60f8      	str	r0, [r7, #12]
   82f56:	60b9      	str	r1, [r7, #8]
   82f58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   82f5a:	68fb      	ldr	r3, [r7, #12]
   82f5c:	617b      	str	r3, [r7, #20]

	while (cnt--)
   82f5e:	e005      	b.n	82f6c <mem_set+0x1e>
		*d++ = (BYTE)val;
   82f60:	697b      	ldr	r3, [r7, #20]
   82f62:	1c5a      	adds	r2, r3, #1
   82f64:	617a      	str	r2, [r7, #20]
   82f66:	68ba      	ldr	r2, [r7, #8]
   82f68:	b2d2      	uxtb	r2, r2
   82f6a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   82f6c:	687b      	ldr	r3, [r7, #4]
   82f6e:	1e5a      	subs	r2, r3, #1
   82f70:	607a      	str	r2, [r7, #4]
   82f72:	2b00      	cmp	r3, #0
   82f74:	d1f4      	bne.n	82f60 <mem_set+0x12>
}
   82f76:	bf00      	nop
   82f78:	371c      	adds	r7, #28
   82f7a:	46bd      	mov	sp, r7
   82f7c:	bc80      	pop	{r7}
   82f7e:	4770      	bx	lr

00082f80 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   82f80:	b480      	push	{r7}
   82f82:	b089      	sub	sp, #36	; 0x24
   82f84:	af00      	add	r7, sp, #0
   82f86:	60f8      	str	r0, [r7, #12]
   82f88:	60b9      	str	r1, [r7, #8]
   82f8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   82f8c:	68fb      	ldr	r3, [r7, #12]
   82f8e:	61fb      	str	r3, [r7, #28]
   82f90:	68bb      	ldr	r3, [r7, #8]
   82f92:	61bb      	str	r3, [r7, #24]
	int r = 0;
   82f94:	2300      	movs	r3, #0
   82f96:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   82f98:	bf00      	nop
   82f9a:	687b      	ldr	r3, [r7, #4]
   82f9c:	1e5a      	subs	r2, r3, #1
   82f9e:	607a      	str	r2, [r7, #4]
   82fa0:	2b00      	cmp	r3, #0
   82fa2:	d00d      	beq.n	82fc0 <mem_cmp+0x40>
   82fa4:	69fb      	ldr	r3, [r7, #28]
   82fa6:	1c5a      	adds	r2, r3, #1
   82fa8:	61fa      	str	r2, [r7, #28]
   82faa:	781b      	ldrb	r3, [r3, #0]
   82fac:	4619      	mov	r1, r3
   82fae:	69bb      	ldr	r3, [r7, #24]
   82fb0:	1c5a      	adds	r2, r3, #1
   82fb2:	61ba      	str	r2, [r7, #24]
   82fb4:	781b      	ldrb	r3, [r3, #0]
   82fb6:	1acb      	subs	r3, r1, r3
   82fb8:	617b      	str	r3, [r7, #20]
   82fba:	697b      	ldr	r3, [r7, #20]
   82fbc:	2b00      	cmp	r3, #0
   82fbe:	d0ec      	beq.n	82f9a <mem_cmp+0x1a>
	return r;
   82fc0:	697b      	ldr	r3, [r7, #20]
}
   82fc2:	4618      	mov	r0, r3
   82fc4:	3724      	adds	r7, #36	; 0x24
   82fc6:	46bd      	mov	sp, r7
   82fc8:	bc80      	pop	{r7}
   82fca:	4770      	bx	lr

00082fcc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   82fcc:	b480      	push	{r7}
   82fce:	b083      	sub	sp, #12
   82fd0:	af00      	add	r7, sp, #0
   82fd2:	6078      	str	r0, [r7, #4]
   82fd4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   82fd6:	e002      	b.n	82fde <chk_chr+0x12>
   82fd8:	687b      	ldr	r3, [r7, #4]
   82fda:	3301      	adds	r3, #1
   82fdc:	607b      	str	r3, [r7, #4]
   82fde:	687b      	ldr	r3, [r7, #4]
   82fe0:	781b      	ldrb	r3, [r3, #0]
   82fe2:	2b00      	cmp	r3, #0
   82fe4:	d005      	beq.n	82ff2 <chk_chr+0x26>
   82fe6:	687b      	ldr	r3, [r7, #4]
   82fe8:	781b      	ldrb	r3, [r3, #0]
   82fea:	461a      	mov	r2, r3
   82fec:	683b      	ldr	r3, [r7, #0]
   82fee:	429a      	cmp	r2, r3
   82ff0:	d1f2      	bne.n	82fd8 <chk_chr+0xc>
	return *str;
   82ff2:	687b      	ldr	r3, [r7, #4]
   82ff4:	781b      	ldrb	r3, [r3, #0]
}
   82ff6:	4618      	mov	r0, r3
   82ff8:	370c      	adds	r7, #12
   82ffa:	46bd      	mov	sp, r7
   82ffc:	bc80      	pop	{r7}
   82ffe:	4770      	bx	lr

00083000 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   83000:	b590      	push	{r4, r7, lr}
   83002:	b085      	sub	sp, #20
   83004:	af00      	add	r7, sp, #0
   83006:	6078      	str	r0, [r7, #4]
   83008:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   8300a:	687b      	ldr	r3, [r7, #4]
   8300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8300e:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   83010:	68fa      	ldr	r2, [r7, #12]
   83012:	683b      	ldr	r3, [r7, #0]
   83014:	429a      	cmp	r2, r3
   83016:	d048      	beq.n	830aa <move_window+0xaa>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   83018:	687b      	ldr	r3, [r7, #4]
   8301a:	791b      	ldrb	r3, [r3, #4]
   8301c:	2b00      	cmp	r3, #0
   8301e:	d030      	beq.n	83082 <move_window+0x82>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   83020:	687b      	ldr	r3, [r7, #4]
   83022:	7858      	ldrb	r0, [r3, #1]
   83024:	687b      	ldr	r3, [r7, #4]
   83026:	f103 0130 	add.w	r1, r3, #48	; 0x30
   8302a:	2301      	movs	r3, #1
   8302c:	68fa      	ldr	r2, [r7, #12]
   8302e:	4c21      	ldr	r4, [pc, #132]	; (830b4 <move_window+0xb4>)
   83030:	47a0      	blx	r4
   83032:	4603      	mov	r3, r0
   83034:	2b00      	cmp	r3, #0
   83036:	d001      	beq.n	8303c <move_window+0x3c>
				return FR_DISK_ERR;
   83038:	2301      	movs	r3, #1
   8303a:	e037      	b.n	830ac <move_window+0xac>
			fs->wflag = 0;
   8303c:	687b      	ldr	r3, [r7, #4]
   8303e:	2200      	movs	r2, #0
   83040:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   83042:	687b      	ldr	r3, [r7, #4]
   83044:	6a1a      	ldr	r2, [r3, #32]
   83046:	687b      	ldr	r3, [r7, #4]
   83048:	69db      	ldr	r3, [r3, #28]
   8304a:	441a      	add	r2, r3
   8304c:	68fb      	ldr	r3, [r7, #12]
   8304e:	429a      	cmp	r2, r3
   83050:	d917      	bls.n	83082 <move_window+0x82>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   83052:	687b      	ldr	r3, [r7, #4]
   83054:	78db      	ldrb	r3, [r3, #3]
   83056:	72fb      	strb	r3, [r7, #11]
   83058:	e010      	b.n	8307c <move_window+0x7c>
					wsect += fs->fsize;
   8305a:	687b      	ldr	r3, [r7, #4]
   8305c:	69db      	ldr	r3, [r3, #28]
   8305e:	68fa      	ldr	r2, [r7, #12]
   83060:	4413      	add	r3, r2
   83062:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   83064:	687b      	ldr	r3, [r7, #4]
   83066:	7858      	ldrb	r0, [r3, #1]
   83068:	687b      	ldr	r3, [r7, #4]
   8306a:	f103 0130 	add.w	r1, r3, #48	; 0x30
   8306e:	2301      	movs	r3, #1
   83070:	68fa      	ldr	r2, [r7, #12]
   83072:	4c10      	ldr	r4, [pc, #64]	; (830b4 <move_window+0xb4>)
   83074:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   83076:	7afb      	ldrb	r3, [r7, #11]
   83078:	3b01      	subs	r3, #1
   8307a:	72fb      	strb	r3, [r7, #11]
   8307c:	7afb      	ldrb	r3, [r7, #11]
   8307e:	2b01      	cmp	r3, #1
   83080:	d8eb      	bhi.n	8305a <move_window+0x5a>
				}
			}
		}
#endif
		if (sector) {
   83082:	683b      	ldr	r3, [r7, #0]
   83084:	2b00      	cmp	r3, #0
   83086:	d010      	beq.n	830aa <move_window+0xaa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   83088:	687b      	ldr	r3, [r7, #4]
   8308a:	7858      	ldrb	r0, [r3, #1]
   8308c:	687b      	ldr	r3, [r7, #4]
   8308e:	f103 0130 	add.w	r1, r3, #48	; 0x30
   83092:	2301      	movs	r3, #1
   83094:	683a      	ldr	r2, [r7, #0]
   83096:	4c08      	ldr	r4, [pc, #32]	; (830b8 <move_window+0xb8>)
   83098:	47a0      	blx	r4
   8309a:	4603      	mov	r3, r0
   8309c:	2b00      	cmp	r3, #0
   8309e:	d001      	beq.n	830a4 <move_window+0xa4>
				return FR_DISK_ERR;
   830a0:	2301      	movs	r3, #1
   830a2:	e003      	b.n	830ac <move_window+0xac>
			fs->winsect = sector;
   830a4:	687b      	ldr	r3, [r7, #4]
   830a6:	683a      	ldr	r2, [r7, #0]
   830a8:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   830aa:	2300      	movs	r3, #0
}
   830ac:	4618      	mov	r0, r3
   830ae:	3714      	adds	r7, #20
   830b0:	46bd      	mov	sp, r7
   830b2:	bd90      	pop	{r4, r7, pc}
   830b4:	00082d39 	.word	0x00082d39
   830b8:	00082c89 	.word	0x00082c89

000830bc <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   830bc:	b590      	push	{r4, r7, lr}
   830be:	b085      	sub	sp, #20
   830c0:	af00      	add	r7, sp, #0
   830c2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   830c4:	2100      	movs	r1, #0
   830c6:	6878      	ldr	r0, [r7, #4]
   830c8:	4b4d      	ldr	r3, [pc, #308]	; (83200 <sync+0x144>)
   830ca:	4798      	blx	r3
   830cc:	4603      	mov	r3, r0
   830ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
   830d0:	7bfb      	ldrb	r3, [r7, #15]
   830d2:	2b00      	cmp	r3, #0
   830d4:	f040 808e 	bne.w	831f4 <sync+0x138>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   830d8:	687b      	ldr	r3, [r7, #4]
   830da:	781b      	ldrb	r3, [r3, #0]
   830dc:	2b03      	cmp	r3, #3
   830de:	d17d      	bne.n	831dc <sync+0x120>
   830e0:	687b      	ldr	r3, [r7, #4]
   830e2:	795b      	ldrb	r3, [r3, #5]
   830e4:	2b00      	cmp	r3, #0
   830e6:	d079      	beq.n	831dc <sync+0x120>
			fs->winsect = 0;
   830e8:	687b      	ldr	r3, [r7, #4]
   830ea:	2200      	movs	r2, #0
   830ec:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   830ee:	687b      	ldr	r3, [r7, #4]
   830f0:	3330      	adds	r3, #48	; 0x30
   830f2:	f44f 7200 	mov.w	r2, #512	; 0x200
   830f6:	2100      	movs	r1, #0
   830f8:	4618      	mov	r0, r3
   830fa:	4b42      	ldr	r3, [pc, #264]	; (83204 <sync+0x148>)
   830fc:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   830fe:	687b      	ldr	r3, [r7, #4]
   83100:	2255      	movs	r2, #85	; 0x55
   83102:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
   83106:	687b      	ldr	r3, [r7, #4]
   83108:	22aa      	movs	r2, #170	; 0xaa
   8310a:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   8310e:	687b      	ldr	r3, [r7, #4]
   83110:	2252      	movs	r2, #82	; 0x52
   83112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   83116:	687b      	ldr	r3, [r7, #4]
   83118:	2252      	movs	r2, #82	; 0x52
   8311a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   8311e:	687b      	ldr	r3, [r7, #4]
   83120:	2261      	movs	r2, #97	; 0x61
   83122:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   83126:	687b      	ldr	r3, [r7, #4]
   83128:	2241      	movs	r2, #65	; 0x41
   8312a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   8312e:	687b      	ldr	r3, [r7, #4]
   83130:	2272      	movs	r2, #114	; 0x72
   83132:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
   83136:	687b      	ldr	r3, [r7, #4]
   83138:	2272      	movs	r2, #114	; 0x72
   8313a:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
   8313e:	687b      	ldr	r3, [r7, #4]
   83140:	2241      	movs	r2, #65	; 0x41
   83142:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
   83146:	687b      	ldr	r3, [r7, #4]
   83148:	2261      	movs	r2, #97	; 0x61
   8314a:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   8314e:	687b      	ldr	r3, [r7, #4]
   83150:	691b      	ldr	r3, [r3, #16]
   83152:	b2da      	uxtb	r2, r3
   83154:	687b      	ldr	r3, [r7, #4]
   83156:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
   8315a:	687b      	ldr	r3, [r7, #4]
   8315c:	691b      	ldr	r3, [r3, #16]
   8315e:	b29b      	uxth	r3, r3
   83160:	0a1b      	lsrs	r3, r3, #8
   83162:	b29b      	uxth	r3, r3
   83164:	b2da      	uxtb	r2, r3
   83166:	687b      	ldr	r3, [r7, #4]
   83168:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
   8316c:	687b      	ldr	r3, [r7, #4]
   8316e:	691b      	ldr	r3, [r3, #16]
   83170:	0c1b      	lsrs	r3, r3, #16
   83172:	b2da      	uxtb	r2, r3
   83174:	687b      	ldr	r3, [r7, #4]
   83176:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
   8317a:	687b      	ldr	r3, [r7, #4]
   8317c:	691b      	ldr	r3, [r3, #16]
   8317e:	0e1b      	lsrs	r3, r3, #24
   83180:	b2da      	uxtb	r2, r3
   83182:	687b      	ldr	r3, [r7, #4]
   83184:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   83188:	687b      	ldr	r3, [r7, #4]
   8318a:	68db      	ldr	r3, [r3, #12]
   8318c:	b2da      	uxtb	r2, r3
   8318e:	687b      	ldr	r3, [r7, #4]
   83190:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
   83194:	687b      	ldr	r3, [r7, #4]
   83196:	68db      	ldr	r3, [r3, #12]
   83198:	b29b      	uxth	r3, r3
   8319a:	0a1b      	lsrs	r3, r3, #8
   8319c:	b29b      	uxth	r3, r3
   8319e:	b2da      	uxtb	r2, r3
   831a0:	687b      	ldr	r3, [r7, #4]
   831a2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
   831a6:	687b      	ldr	r3, [r7, #4]
   831a8:	68db      	ldr	r3, [r3, #12]
   831aa:	0c1b      	lsrs	r3, r3, #16
   831ac:	b2da      	uxtb	r2, r3
   831ae:	687b      	ldr	r3, [r7, #4]
   831b0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
   831b4:	687b      	ldr	r3, [r7, #4]
   831b6:	68db      	ldr	r3, [r3, #12]
   831b8:	0e1b      	lsrs	r3, r3, #24
   831ba:	b2da      	uxtb	r2, r3
   831bc:	687b      	ldr	r3, [r7, #4]
   831be:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   831c2:	687b      	ldr	r3, [r7, #4]
   831c4:	7858      	ldrb	r0, [r3, #1]
   831c6:	687b      	ldr	r3, [r7, #4]
   831c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   831cc:	687b      	ldr	r3, [r7, #4]
   831ce:	695a      	ldr	r2, [r3, #20]
   831d0:	2301      	movs	r3, #1
   831d2:	4c0d      	ldr	r4, [pc, #52]	; (83208 <sync+0x14c>)
   831d4:	47a0      	blx	r4
			fs->fsi_flag = 0;
   831d6:	687b      	ldr	r3, [r7, #4]
   831d8:	2200      	movs	r2, #0
   831da:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   831dc:	687b      	ldr	r3, [r7, #4]
   831de:	785b      	ldrb	r3, [r3, #1]
   831e0:	2200      	movs	r2, #0
   831e2:	2100      	movs	r1, #0
   831e4:	4618      	mov	r0, r3
   831e6:	4b09      	ldr	r3, [pc, #36]	; (8320c <sync+0x150>)
   831e8:	4798      	blx	r3
   831ea:	4603      	mov	r3, r0
   831ec:	2b00      	cmp	r3, #0
   831ee:	d001      	beq.n	831f4 <sync+0x138>
			res = FR_DISK_ERR;
   831f0:	2301      	movs	r3, #1
   831f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
   831f4:	7bfb      	ldrb	r3, [r7, #15]
}
   831f6:	4618      	mov	r0, r3
   831f8:	3714      	adds	r7, #20
   831fa:	46bd      	mov	sp, r7
   831fc:	bd90      	pop	{r4, r7, pc}
   831fe:	bf00      	nop
   83200:	00083001 	.word	0x00083001
   83204:	00082f4f 	.word	0x00082f4f
   83208:	00082d39 	.word	0x00082d39
   8320c:	00082de9 	.word	0x00082de9

00083210 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   83210:	b480      	push	{r7}
   83212:	b083      	sub	sp, #12
   83214:	af00      	add	r7, sp, #0
   83216:	6078      	str	r0, [r7, #4]
   83218:	6039      	str	r1, [r7, #0]
	clst -= 2;
   8321a:	683b      	ldr	r3, [r7, #0]
   8321c:	3b02      	subs	r3, #2
   8321e:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   83220:	687b      	ldr	r3, [r7, #4]
   83222:	699b      	ldr	r3, [r3, #24]
   83224:	1e9a      	subs	r2, r3, #2
   83226:	683b      	ldr	r3, [r7, #0]
   83228:	429a      	cmp	r2, r3
   8322a:	d801      	bhi.n	83230 <clust2sect+0x20>
   8322c:	2300      	movs	r3, #0
   8322e:	e008      	b.n	83242 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
   83230:	687b      	ldr	r3, [r7, #4]
   83232:	789b      	ldrb	r3, [r3, #2]
   83234:	461a      	mov	r2, r3
   83236:	683b      	ldr	r3, [r7, #0]
   83238:	fb03 f202 	mul.w	r2, r3, r2
   8323c:	687b      	ldr	r3, [r7, #4]
   8323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83240:	4413      	add	r3, r2
}
   83242:	4618      	mov	r0, r3
   83244:	370c      	adds	r7, #12
   83246:	46bd      	mov	sp, r7
   83248:	bc80      	pop	{r7}
   8324a:	4770      	bx	lr

0008324c <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   8324c:	b580      	push	{r7, lr}
   8324e:	b086      	sub	sp, #24
   83250:	af00      	add	r7, sp, #0
   83252:	6078      	str	r0, [r7, #4]
   83254:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   83256:	683b      	ldr	r3, [r7, #0]
   83258:	2b01      	cmp	r3, #1
   8325a:	d904      	bls.n	83266 <get_fat+0x1a>
   8325c:	687b      	ldr	r3, [r7, #4]
   8325e:	699a      	ldr	r2, [r3, #24]
   83260:	683b      	ldr	r3, [r7, #0]
   83262:	429a      	cmp	r2, r3
   83264:	d801      	bhi.n	8326a <get_fat+0x1e>
		return 1;
   83266:	2301      	movs	r3, #1
   83268:	e09b      	b.n	833a2 <get_fat+0x156>

	switch (fs->fs_type) {
   8326a:	687b      	ldr	r3, [r7, #4]
   8326c:	781b      	ldrb	r3, [r3, #0]
   8326e:	2b02      	cmp	r3, #2
   83270:	d046      	beq.n	83300 <get_fat+0xb4>
   83272:	2b03      	cmp	r3, #3
   83274:	d064      	beq.n	83340 <get_fat+0xf4>
   83276:	2b01      	cmp	r3, #1
   83278:	f040 8091 	bne.w	8339e <get_fat+0x152>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   8327c:	683b      	ldr	r3, [r7, #0]
   8327e:	617b      	str	r3, [r7, #20]
   83280:	697b      	ldr	r3, [r7, #20]
   83282:	085b      	lsrs	r3, r3, #1
   83284:	697a      	ldr	r2, [r7, #20]
   83286:	4413      	add	r3, r2
   83288:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   8328a:	687b      	ldr	r3, [r7, #4]
   8328c:	6a1a      	ldr	r2, [r3, #32]
   8328e:	697b      	ldr	r3, [r7, #20]
   83290:	0a5b      	lsrs	r3, r3, #9
   83292:	4413      	add	r3, r2
   83294:	4619      	mov	r1, r3
   83296:	6878      	ldr	r0, [r7, #4]
   83298:	4b44      	ldr	r3, [pc, #272]	; (833ac <get_fat+0x160>)
   8329a:	4798      	blx	r3
   8329c:	4603      	mov	r3, r0
   8329e:	2b00      	cmp	r3, #0
   832a0:	d176      	bne.n	83390 <get_fat+0x144>
		wc = fs->win[bc % SS(fs)]; bc++;
   832a2:	697b      	ldr	r3, [r7, #20]
   832a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   832a8:	687a      	ldr	r2, [r7, #4]
   832aa:	4413      	add	r3, r2
   832ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   832b0:	613b      	str	r3, [r7, #16]
   832b2:	697b      	ldr	r3, [r7, #20]
   832b4:	3301      	adds	r3, #1
   832b6:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   832b8:	687b      	ldr	r3, [r7, #4]
   832ba:	6a1a      	ldr	r2, [r3, #32]
   832bc:	697b      	ldr	r3, [r7, #20]
   832be:	0a5b      	lsrs	r3, r3, #9
   832c0:	4413      	add	r3, r2
   832c2:	4619      	mov	r1, r3
   832c4:	6878      	ldr	r0, [r7, #4]
   832c6:	4b39      	ldr	r3, [pc, #228]	; (833ac <get_fat+0x160>)
   832c8:	4798      	blx	r3
   832ca:	4603      	mov	r3, r0
   832cc:	2b00      	cmp	r3, #0
   832ce:	d161      	bne.n	83394 <get_fat+0x148>
		wc |= fs->win[bc % SS(fs)] << 8;
   832d0:	697b      	ldr	r3, [r7, #20]
   832d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   832d6:	687a      	ldr	r2, [r7, #4]
   832d8:	4413      	add	r3, r2
   832da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   832de:	021b      	lsls	r3, r3, #8
   832e0:	461a      	mov	r2, r3
   832e2:	693b      	ldr	r3, [r7, #16]
   832e4:	4313      	orrs	r3, r2
   832e6:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   832e8:	683b      	ldr	r3, [r7, #0]
   832ea:	f003 0301 	and.w	r3, r3, #1
   832ee:	2b00      	cmp	r3, #0
   832f0:	d002      	beq.n	832f8 <get_fat+0xac>
   832f2:	693b      	ldr	r3, [r7, #16]
   832f4:	091b      	lsrs	r3, r3, #4
   832f6:	e054      	b.n	833a2 <get_fat+0x156>
   832f8:	693b      	ldr	r3, [r7, #16]
   832fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
   832fe:	e050      	b.n	833a2 <get_fat+0x156>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   83300:	687b      	ldr	r3, [r7, #4]
   83302:	6a1a      	ldr	r2, [r3, #32]
   83304:	683b      	ldr	r3, [r7, #0]
   83306:	0a1b      	lsrs	r3, r3, #8
   83308:	4413      	add	r3, r2
   8330a:	4619      	mov	r1, r3
   8330c:	6878      	ldr	r0, [r7, #4]
   8330e:	4b27      	ldr	r3, [pc, #156]	; (833ac <get_fat+0x160>)
   83310:	4798      	blx	r3
   83312:	4603      	mov	r3, r0
   83314:	2b00      	cmp	r3, #0
   83316:	d13f      	bne.n	83398 <get_fat+0x14c>
		p = &fs->win[clst * 2 % SS(fs)];
   83318:	683b      	ldr	r3, [r7, #0]
   8331a:	005b      	lsls	r3, r3, #1
   8331c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   83320:	3330      	adds	r3, #48	; 0x30
   83322:	687a      	ldr	r2, [r7, #4]
   83324:	4413      	add	r3, r2
   83326:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   83328:	68fb      	ldr	r3, [r7, #12]
   8332a:	3301      	adds	r3, #1
   8332c:	781b      	ldrb	r3, [r3, #0]
   8332e:	021b      	lsls	r3, r3, #8
   83330:	b21a      	sxth	r2, r3
   83332:	68fb      	ldr	r3, [r7, #12]
   83334:	781b      	ldrb	r3, [r3, #0]
   83336:	b21b      	sxth	r3, r3
   83338:	4313      	orrs	r3, r2
   8333a:	b21b      	sxth	r3, r3
   8333c:	b29b      	uxth	r3, r3
   8333e:	e030      	b.n	833a2 <get_fat+0x156>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   83340:	687b      	ldr	r3, [r7, #4]
   83342:	6a1a      	ldr	r2, [r3, #32]
   83344:	683b      	ldr	r3, [r7, #0]
   83346:	09db      	lsrs	r3, r3, #7
   83348:	4413      	add	r3, r2
   8334a:	4619      	mov	r1, r3
   8334c:	6878      	ldr	r0, [r7, #4]
   8334e:	4b17      	ldr	r3, [pc, #92]	; (833ac <get_fat+0x160>)
   83350:	4798      	blx	r3
   83352:	4603      	mov	r3, r0
   83354:	2b00      	cmp	r3, #0
   83356:	d121      	bne.n	8339c <get_fat+0x150>
		p = &fs->win[clst * 4 % SS(fs)];
   83358:	683b      	ldr	r3, [r7, #0]
   8335a:	009b      	lsls	r3, r3, #2
   8335c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
   83360:	3330      	adds	r3, #48	; 0x30
   83362:	687a      	ldr	r2, [r7, #4]
   83364:	4413      	add	r3, r2
   83366:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   83368:	68fb      	ldr	r3, [r7, #12]
   8336a:	3303      	adds	r3, #3
   8336c:	781b      	ldrb	r3, [r3, #0]
   8336e:	061a      	lsls	r2, r3, #24
   83370:	68fb      	ldr	r3, [r7, #12]
   83372:	3302      	adds	r3, #2
   83374:	781b      	ldrb	r3, [r3, #0]
   83376:	041b      	lsls	r3, r3, #16
   83378:	4313      	orrs	r3, r2
   8337a:	68fa      	ldr	r2, [r7, #12]
   8337c:	3201      	adds	r2, #1
   8337e:	7812      	ldrb	r2, [r2, #0]
   83380:	0212      	lsls	r2, r2, #8
   83382:	4313      	orrs	r3, r2
   83384:	68fa      	ldr	r2, [r7, #12]
   83386:	7812      	ldrb	r2, [r2, #0]
   83388:	4313      	orrs	r3, r2
   8338a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   8338e:	e008      	b.n	833a2 <get_fat+0x156>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   83390:	bf00      	nop
   83392:	e004      	b.n	8339e <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   83394:	bf00      	nop
   83396:	e002      	b.n	8339e <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   83398:	bf00      	nop
   8339a:	e000      	b.n	8339e <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   8339c:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   8339e:	f04f 33ff 	mov.w	r3, #4294967295
}
   833a2:	4618      	mov	r0, r3
   833a4:	3718      	adds	r7, #24
   833a6:	46bd      	mov	sp, r7
   833a8:	bd80      	pop	{r7, pc}
   833aa:	bf00      	nop
   833ac:	00083001 	.word	0x00083001

000833b0 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   833b0:	b580      	push	{r7, lr}
   833b2:	b088      	sub	sp, #32
   833b4:	af00      	add	r7, sp, #0
   833b6:	60f8      	str	r0, [r7, #12]
   833b8:	60b9      	str	r1, [r7, #8]
   833ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   833bc:	68bb      	ldr	r3, [r7, #8]
   833be:	2b01      	cmp	r3, #1
   833c0:	d904      	bls.n	833cc <put_fat+0x1c>
   833c2:	68fb      	ldr	r3, [r7, #12]
   833c4:	699a      	ldr	r2, [r3, #24]
   833c6:	68bb      	ldr	r3, [r7, #8]
   833c8:	429a      	cmp	r2, r3
   833ca:	d802      	bhi.n	833d2 <put_fat+0x22>
		res = FR_INT_ERR;
   833cc:	2302      	movs	r3, #2
   833ce:	77fb      	strb	r3, [r7, #31]
   833d0:	e0e9      	b.n	835a6 <put_fat+0x1f6>

	} else {
		switch (fs->fs_type) {
   833d2:	68fb      	ldr	r3, [r7, #12]
   833d4:	781b      	ldrb	r3, [r3, #0]
   833d6:	2b02      	cmp	r3, #2
   833d8:	d070      	beq.n	834bc <put_fat+0x10c>
   833da:	2b03      	cmp	r3, #3
   833dc:	f000 8091 	beq.w	83502 <put_fat+0x152>
   833e0:	2b01      	cmp	r3, #1
   833e2:	f040 80d3 	bne.w	8358c <put_fat+0x1dc>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   833e6:	68bb      	ldr	r3, [r7, #8]
   833e8:	61bb      	str	r3, [r7, #24]
   833ea:	69bb      	ldr	r3, [r7, #24]
   833ec:	085b      	lsrs	r3, r3, #1
   833ee:	69ba      	ldr	r2, [r7, #24]
   833f0:	4413      	add	r3, r2
   833f2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   833f4:	68fb      	ldr	r3, [r7, #12]
   833f6:	6a1a      	ldr	r2, [r3, #32]
   833f8:	69bb      	ldr	r3, [r7, #24]
   833fa:	0a5b      	lsrs	r3, r3, #9
   833fc:	4413      	add	r3, r2
   833fe:	4619      	mov	r1, r3
   83400:	68f8      	ldr	r0, [r7, #12]
   83402:	4b6b      	ldr	r3, [pc, #428]	; (835b0 <put_fat+0x200>)
   83404:	4798      	blx	r3
   83406:	4603      	mov	r3, r0
   83408:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
   8340a:	7ffb      	ldrb	r3, [r7, #31]
   8340c:	2b00      	cmp	r3, #0
   8340e:	f040 80c0 	bne.w	83592 <put_fat+0x1e2>
			p = &fs->win[bc % SS(fs)];
   83412:	69bb      	ldr	r3, [r7, #24]
   83414:	f3c3 0308 	ubfx	r3, r3, #0, #9
   83418:	3330      	adds	r3, #48	; 0x30
   8341a:	68fa      	ldr	r2, [r7, #12]
   8341c:	4413      	add	r3, r2
   8341e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   83420:	68bb      	ldr	r3, [r7, #8]
   83422:	f003 0301 	and.w	r3, r3, #1
   83426:	2b00      	cmp	r3, #0
   83428:	d00d      	beq.n	83446 <put_fat+0x96>
   8342a:	697b      	ldr	r3, [r7, #20]
   8342c:	781b      	ldrb	r3, [r3, #0]
   8342e:	b25b      	sxtb	r3, r3
   83430:	f003 030f 	and.w	r3, r3, #15
   83434:	b25a      	sxtb	r2, r3
   83436:	687b      	ldr	r3, [r7, #4]
   83438:	b2db      	uxtb	r3, r3
   8343a:	011b      	lsls	r3, r3, #4
   8343c:	b25b      	sxtb	r3, r3
   8343e:	4313      	orrs	r3, r2
   83440:	b25b      	sxtb	r3, r3
   83442:	b2db      	uxtb	r3, r3
   83444:	e001      	b.n	8344a <put_fat+0x9a>
   83446:	687b      	ldr	r3, [r7, #4]
   83448:	b2db      	uxtb	r3, r3
   8344a:	697a      	ldr	r2, [r7, #20]
   8344c:	7013      	strb	r3, [r2, #0]
			bc++;
   8344e:	69bb      	ldr	r3, [r7, #24]
   83450:	3301      	adds	r3, #1
   83452:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   83454:	68fb      	ldr	r3, [r7, #12]
   83456:	2201      	movs	r2, #1
   83458:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   8345a:	68fb      	ldr	r3, [r7, #12]
   8345c:	6a1a      	ldr	r2, [r3, #32]
   8345e:	69bb      	ldr	r3, [r7, #24]
   83460:	0a5b      	lsrs	r3, r3, #9
   83462:	4413      	add	r3, r2
   83464:	4619      	mov	r1, r3
   83466:	68f8      	ldr	r0, [r7, #12]
   83468:	4b51      	ldr	r3, [pc, #324]	; (835b0 <put_fat+0x200>)
   8346a:	4798      	blx	r3
   8346c:	4603      	mov	r3, r0
   8346e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
   83470:	7ffb      	ldrb	r3, [r7, #31]
   83472:	2b00      	cmp	r3, #0
   83474:	f040 808f 	bne.w	83596 <put_fat+0x1e6>
			p = &fs->win[bc % SS(fs)];
   83478:	69bb      	ldr	r3, [r7, #24]
   8347a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8347e:	3330      	adds	r3, #48	; 0x30
   83480:	68fa      	ldr	r2, [r7, #12]
   83482:	4413      	add	r3, r2
   83484:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   83486:	68bb      	ldr	r3, [r7, #8]
   83488:	f003 0301 	and.w	r3, r3, #1
   8348c:	2b00      	cmp	r3, #0
   8348e:	d003      	beq.n	83498 <put_fat+0xe8>
   83490:	687b      	ldr	r3, [r7, #4]
   83492:	091b      	lsrs	r3, r3, #4
   83494:	b2db      	uxtb	r3, r3
   83496:	e00e      	b.n	834b6 <put_fat+0x106>
   83498:	697b      	ldr	r3, [r7, #20]
   8349a:	781b      	ldrb	r3, [r3, #0]
   8349c:	b25b      	sxtb	r3, r3
   8349e:	f023 030f 	bic.w	r3, r3, #15
   834a2:	b25a      	sxtb	r2, r3
   834a4:	687b      	ldr	r3, [r7, #4]
   834a6:	0a1b      	lsrs	r3, r3, #8
   834a8:	b25b      	sxtb	r3, r3
   834aa:	f003 030f 	and.w	r3, r3, #15
   834ae:	b25b      	sxtb	r3, r3
   834b0:	4313      	orrs	r3, r2
   834b2:	b25b      	sxtb	r3, r3
   834b4:	b2db      	uxtb	r3, r3
   834b6:	697a      	ldr	r2, [r7, #20]
   834b8:	7013      	strb	r3, [r2, #0]
			break;
   834ba:	e071      	b.n	835a0 <put_fat+0x1f0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   834bc:	68fb      	ldr	r3, [r7, #12]
   834be:	6a1a      	ldr	r2, [r3, #32]
   834c0:	68bb      	ldr	r3, [r7, #8]
   834c2:	0a1b      	lsrs	r3, r3, #8
   834c4:	4413      	add	r3, r2
   834c6:	4619      	mov	r1, r3
   834c8:	68f8      	ldr	r0, [r7, #12]
   834ca:	4b39      	ldr	r3, [pc, #228]	; (835b0 <put_fat+0x200>)
   834cc:	4798      	blx	r3
   834ce:	4603      	mov	r3, r0
   834d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
   834d2:	7ffb      	ldrb	r3, [r7, #31]
   834d4:	2b00      	cmp	r3, #0
   834d6:	d160      	bne.n	8359a <put_fat+0x1ea>
			p = &fs->win[clst * 2 % SS(fs)];
   834d8:	68bb      	ldr	r3, [r7, #8]
   834da:	005b      	lsls	r3, r3, #1
   834dc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   834e0:	3330      	adds	r3, #48	; 0x30
   834e2:	68fa      	ldr	r2, [r7, #12]
   834e4:	4413      	add	r3, r2
   834e6:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   834e8:	687b      	ldr	r3, [r7, #4]
   834ea:	b2da      	uxtb	r2, r3
   834ec:	697b      	ldr	r3, [r7, #20]
   834ee:	701a      	strb	r2, [r3, #0]
   834f0:	697b      	ldr	r3, [r7, #20]
   834f2:	3301      	adds	r3, #1
   834f4:	687a      	ldr	r2, [r7, #4]
   834f6:	b292      	uxth	r2, r2
   834f8:	0a12      	lsrs	r2, r2, #8
   834fa:	b292      	uxth	r2, r2
   834fc:	b2d2      	uxtb	r2, r2
   834fe:	701a      	strb	r2, [r3, #0]
			break;
   83500:	e04e      	b.n	835a0 <put_fat+0x1f0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   83502:	68fb      	ldr	r3, [r7, #12]
   83504:	6a1a      	ldr	r2, [r3, #32]
   83506:	68bb      	ldr	r3, [r7, #8]
   83508:	09db      	lsrs	r3, r3, #7
   8350a:	4413      	add	r3, r2
   8350c:	4619      	mov	r1, r3
   8350e:	68f8      	ldr	r0, [r7, #12]
   83510:	4b27      	ldr	r3, [pc, #156]	; (835b0 <put_fat+0x200>)
   83512:	4798      	blx	r3
   83514:	4603      	mov	r3, r0
   83516:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
   83518:	7ffb      	ldrb	r3, [r7, #31]
   8351a:	2b00      	cmp	r3, #0
   8351c:	d13f      	bne.n	8359e <put_fat+0x1ee>
			p = &fs->win[clst * 4 % SS(fs)];
   8351e:	68bb      	ldr	r3, [r7, #8]
   83520:	009b      	lsls	r3, r3, #2
   83522:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
   83526:	3330      	adds	r3, #48	; 0x30
   83528:	68fa      	ldr	r2, [r7, #12]
   8352a:	4413      	add	r3, r2
   8352c:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   8352e:	697b      	ldr	r3, [r7, #20]
   83530:	3303      	adds	r3, #3
   83532:	781b      	ldrb	r3, [r3, #0]
   83534:	061a      	lsls	r2, r3, #24
   83536:	697b      	ldr	r3, [r7, #20]
   83538:	3302      	adds	r3, #2
   8353a:	781b      	ldrb	r3, [r3, #0]
   8353c:	041b      	lsls	r3, r3, #16
   8353e:	4313      	orrs	r3, r2
   83540:	697a      	ldr	r2, [r7, #20]
   83542:	3201      	adds	r2, #1
   83544:	7812      	ldrb	r2, [r2, #0]
   83546:	0212      	lsls	r2, r2, #8
   83548:	4313      	orrs	r3, r2
   8354a:	697a      	ldr	r2, [r7, #20]
   8354c:	7812      	ldrb	r2, [r2, #0]
   8354e:	4313      	orrs	r3, r2
   83550:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
   83554:	687a      	ldr	r2, [r7, #4]
   83556:	4313      	orrs	r3, r2
   83558:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   8355a:	687b      	ldr	r3, [r7, #4]
   8355c:	b2da      	uxtb	r2, r3
   8355e:	697b      	ldr	r3, [r7, #20]
   83560:	701a      	strb	r2, [r3, #0]
   83562:	697b      	ldr	r3, [r7, #20]
   83564:	3301      	adds	r3, #1
   83566:	687a      	ldr	r2, [r7, #4]
   83568:	b292      	uxth	r2, r2
   8356a:	0a12      	lsrs	r2, r2, #8
   8356c:	b292      	uxth	r2, r2
   8356e:	b2d2      	uxtb	r2, r2
   83570:	701a      	strb	r2, [r3, #0]
   83572:	697b      	ldr	r3, [r7, #20]
   83574:	3302      	adds	r3, #2
   83576:	687a      	ldr	r2, [r7, #4]
   83578:	0c12      	lsrs	r2, r2, #16
   8357a:	b2d2      	uxtb	r2, r2
   8357c:	701a      	strb	r2, [r3, #0]
   8357e:	697b      	ldr	r3, [r7, #20]
   83580:	3303      	adds	r3, #3
   83582:	687a      	ldr	r2, [r7, #4]
   83584:	0e12      	lsrs	r2, r2, #24
   83586:	b2d2      	uxtb	r2, r2
   83588:	701a      	strb	r2, [r3, #0]
			break;
   8358a:	e009      	b.n	835a0 <put_fat+0x1f0>

		default :
			res = FR_INT_ERR;
   8358c:	2302      	movs	r3, #2
   8358e:	77fb      	strb	r3, [r7, #31]
   83590:	e006      	b.n	835a0 <put_fat+0x1f0>
			if (res != FR_OK) break;
   83592:	bf00      	nop
   83594:	e004      	b.n	835a0 <put_fat+0x1f0>
			if (res != FR_OK) break;
   83596:	bf00      	nop
   83598:	e002      	b.n	835a0 <put_fat+0x1f0>
			if (res != FR_OK) break;
   8359a:	bf00      	nop
   8359c:	e000      	b.n	835a0 <put_fat+0x1f0>
			if (res != FR_OK) break;
   8359e:	bf00      	nop
		}
		fs->wflag = 1;
   835a0:	68fb      	ldr	r3, [r7, #12]
   835a2:	2201      	movs	r2, #1
   835a4:	711a      	strb	r2, [r3, #4]
	}

	return res;
   835a6:	7ffb      	ldrb	r3, [r7, #31]
}
   835a8:	4618      	mov	r0, r3
   835aa:	3720      	adds	r7, #32
   835ac:	46bd      	mov	sp, r7
   835ae:	bd80      	pop	{r7, pc}
   835b0:	00083001 	.word	0x00083001

000835b4 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   835b4:	b580      	push	{r7, lr}
   835b6:	b084      	sub	sp, #16
   835b8:	af00      	add	r7, sp, #0
   835ba:	6078      	str	r0, [r7, #4]
   835bc:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   835be:	683b      	ldr	r3, [r7, #0]
   835c0:	2b01      	cmp	r3, #1
   835c2:	d904      	bls.n	835ce <remove_chain+0x1a>
   835c4:	687b      	ldr	r3, [r7, #4]
   835c6:	699a      	ldr	r2, [r3, #24]
   835c8:	683b      	ldr	r3, [r7, #0]
   835ca:	429a      	cmp	r2, r3
   835cc:	d802      	bhi.n	835d4 <remove_chain+0x20>
		res = FR_INT_ERR;
   835ce:	2302      	movs	r3, #2
   835d0:	73fb      	strb	r3, [r7, #15]
   835d2:	e039      	b.n	83648 <remove_chain+0x94>

	} else {
		res = FR_OK;
   835d4:	2300      	movs	r3, #0
   835d6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   835d8:	e02d      	b.n	83636 <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   835da:	6839      	ldr	r1, [r7, #0]
   835dc:	6878      	ldr	r0, [r7, #4]
   835de:	4b1d      	ldr	r3, [pc, #116]	; (83654 <remove_chain+0xa0>)
   835e0:	4798      	blx	r3
   835e2:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   835e4:	68bb      	ldr	r3, [r7, #8]
   835e6:	2b00      	cmp	r3, #0
   835e8:	d02b      	beq.n	83642 <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   835ea:	68bb      	ldr	r3, [r7, #8]
   835ec:	2b01      	cmp	r3, #1
   835ee:	d102      	bne.n	835f6 <remove_chain+0x42>
   835f0:	2302      	movs	r3, #2
   835f2:	73fb      	strb	r3, [r7, #15]
   835f4:	e028      	b.n	83648 <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   835f6:	68bb      	ldr	r3, [r7, #8]
   835f8:	f1b3 3fff 	cmp.w	r3, #4294967295
   835fc:	d102      	bne.n	83604 <remove_chain+0x50>
   835fe:	2301      	movs	r3, #1
   83600:	73fb      	strb	r3, [r7, #15]
   83602:	e021      	b.n	83648 <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   83604:	2200      	movs	r2, #0
   83606:	6839      	ldr	r1, [r7, #0]
   83608:	6878      	ldr	r0, [r7, #4]
   8360a:	4b13      	ldr	r3, [pc, #76]	; (83658 <remove_chain+0xa4>)
   8360c:	4798      	blx	r3
   8360e:	4603      	mov	r3, r0
   83610:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
   83612:	7bfb      	ldrb	r3, [r7, #15]
   83614:	2b00      	cmp	r3, #0
   83616:	d116      	bne.n	83646 <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   83618:	687b      	ldr	r3, [r7, #4]
   8361a:	691b      	ldr	r3, [r3, #16]
   8361c:	f1b3 3fff 	cmp.w	r3, #4294967295
   83620:	d007      	beq.n	83632 <remove_chain+0x7e>
				fs->free_clust++;
   83622:	687b      	ldr	r3, [r7, #4]
   83624:	691b      	ldr	r3, [r3, #16]
   83626:	1c5a      	adds	r2, r3, #1
   83628:	687b      	ldr	r3, [r7, #4]
   8362a:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   8362c:	687b      	ldr	r3, [r7, #4]
   8362e:	2201      	movs	r2, #1
   83630:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   83632:	68bb      	ldr	r3, [r7, #8]
   83634:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   83636:	687b      	ldr	r3, [r7, #4]
   83638:	699a      	ldr	r2, [r3, #24]
   8363a:	683b      	ldr	r3, [r7, #0]
   8363c:	429a      	cmp	r2, r3
   8363e:	d8cc      	bhi.n	835da <remove_chain+0x26>
   83640:	e002      	b.n	83648 <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
   83642:	bf00      	nop
   83644:	e000      	b.n	83648 <remove_chain+0x94>
			if (res != FR_OK) break;
   83646:	bf00      	nop
		}
	}

	return res;
   83648:	7bfb      	ldrb	r3, [r7, #15]
}
   8364a:	4618      	mov	r0, r3
   8364c:	3710      	adds	r7, #16
   8364e:	46bd      	mov	sp, r7
   83650:	bd80      	pop	{r7, pc}
   83652:	bf00      	nop
   83654:	0008324d 	.word	0x0008324d
   83658:	000833b1 	.word	0x000833b1

0008365c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   8365c:	b580      	push	{r7, lr}
   8365e:	b086      	sub	sp, #24
   83660:	af00      	add	r7, sp, #0
   83662:	6078      	str	r0, [r7, #4]
   83664:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   83666:	683b      	ldr	r3, [r7, #0]
   83668:	2b00      	cmp	r3, #0
   8366a:	d10d      	bne.n	83688 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   8366c:	687b      	ldr	r3, [r7, #4]
   8366e:	68db      	ldr	r3, [r3, #12]
   83670:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   83672:	693b      	ldr	r3, [r7, #16]
   83674:	2b00      	cmp	r3, #0
   83676:	d004      	beq.n	83682 <create_chain+0x26>
   83678:	687b      	ldr	r3, [r7, #4]
   8367a:	699a      	ldr	r2, [r3, #24]
   8367c:	693b      	ldr	r3, [r7, #16]
   8367e:	429a      	cmp	r2, r3
   83680:	d815      	bhi.n	836ae <create_chain+0x52>
   83682:	2301      	movs	r3, #1
   83684:	613b      	str	r3, [r7, #16]
   83686:	e012      	b.n	836ae <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   83688:	6839      	ldr	r1, [r7, #0]
   8368a:	6878      	ldr	r0, [r7, #4]
   8368c:	4b38      	ldr	r3, [pc, #224]	; (83770 <create_chain+0x114>)
   8368e:	4798      	blx	r3
   83690:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   83692:	68bb      	ldr	r3, [r7, #8]
   83694:	2b01      	cmp	r3, #1
   83696:	d801      	bhi.n	8369c <create_chain+0x40>
   83698:	2301      	movs	r3, #1
   8369a:	e064      	b.n	83766 <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   8369c:	687b      	ldr	r3, [r7, #4]
   8369e:	699a      	ldr	r2, [r3, #24]
   836a0:	68bb      	ldr	r3, [r7, #8]
   836a2:	429a      	cmp	r2, r3
   836a4:	d901      	bls.n	836aa <create_chain+0x4e>
   836a6:	68bb      	ldr	r3, [r7, #8]
   836a8:	e05d      	b.n	83766 <create_chain+0x10a>
		scl = clst;
   836aa:	683b      	ldr	r3, [r7, #0]
   836ac:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   836ae:	693b      	ldr	r3, [r7, #16]
   836b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   836b2:	697b      	ldr	r3, [r7, #20]
   836b4:	3301      	adds	r3, #1
   836b6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   836b8:	687b      	ldr	r3, [r7, #4]
   836ba:	699a      	ldr	r2, [r3, #24]
   836bc:	697b      	ldr	r3, [r7, #20]
   836be:	429a      	cmp	r2, r3
   836c0:	d807      	bhi.n	836d2 <create_chain+0x76>
			ncl = 2;
   836c2:	2302      	movs	r3, #2
   836c4:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   836c6:	697a      	ldr	r2, [r7, #20]
   836c8:	693b      	ldr	r3, [r7, #16]
   836ca:	429a      	cmp	r2, r3
   836cc:	d901      	bls.n	836d2 <create_chain+0x76>
   836ce:	2300      	movs	r3, #0
   836d0:	e049      	b.n	83766 <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   836d2:	6979      	ldr	r1, [r7, #20]
   836d4:	6878      	ldr	r0, [r7, #4]
   836d6:	4b26      	ldr	r3, [pc, #152]	; (83770 <create_chain+0x114>)
   836d8:	4798      	blx	r3
   836da:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   836dc:	68bb      	ldr	r3, [r7, #8]
   836de:	2b00      	cmp	r3, #0
   836e0:	d00e      	beq.n	83700 <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   836e2:	68bb      	ldr	r3, [r7, #8]
   836e4:	f1b3 3fff 	cmp.w	r3, #4294967295
   836e8:	d002      	beq.n	836f0 <create_chain+0x94>
   836ea:	68bb      	ldr	r3, [r7, #8]
   836ec:	2b01      	cmp	r3, #1
   836ee:	d101      	bne.n	836f4 <create_chain+0x98>
			return cs;
   836f0:	68bb      	ldr	r3, [r7, #8]
   836f2:	e038      	b.n	83766 <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
   836f4:	697a      	ldr	r2, [r7, #20]
   836f6:	693b      	ldr	r3, [r7, #16]
   836f8:	429a      	cmp	r2, r3
   836fa:	d1da      	bne.n	836b2 <create_chain+0x56>
   836fc:	2300      	movs	r3, #0
   836fe:	e032      	b.n	83766 <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
   83700:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   83702:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   83706:	6979      	ldr	r1, [r7, #20]
   83708:	6878      	ldr	r0, [r7, #4]
   8370a:	4b1a      	ldr	r3, [pc, #104]	; (83774 <create_chain+0x118>)
   8370c:	4798      	blx	r3
   8370e:	4603      	mov	r3, r0
   83710:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
   83712:	7bfb      	ldrb	r3, [r7, #15]
   83714:	2b00      	cmp	r3, #0
   83716:	d109      	bne.n	8372c <create_chain+0xd0>
   83718:	683b      	ldr	r3, [r7, #0]
   8371a:	2b00      	cmp	r3, #0
   8371c:	d006      	beq.n	8372c <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   8371e:	697a      	ldr	r2, [r7, #20]
   83720:	6839      	ldr	r1, [r7, #0]
   83722:	6878      	ldr	r0, [r7, #4]
   83724:	4b13      	ldr	r3, [pc, #76]	; (83774 <create_chain+0x118>)
   83726:	4798      	blx	r3
   83728:	4603      	mov	r3, r0
   8372a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
   8372c:	7bfb      	ldrb	r3, [r7, #15]
   8372e:	2b00      	cmp	r3, #0
   83730:	d110      	bne.n	83754 <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
   83732:	687b      	ldr	r3, [r7, #4]
   83734:	697a      	ldr	r2, [r7, #20]
   83736:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   83738:	687b      	ldr	r3, [r7, #4]
   8373a:	691b      	ldr	r3, [r3, #16]
   8373c:	f1b3 3fff 	cmp.w	r3, #4294967295
   83740:	d010      	beq.n	83764 <create_chain+0x108>
			fs->free_clust--;
   83742:	687b      	ldr	r3, [r7, #4]
   83744:	691b      	ldr	r3, [r3, #16]
   83746:	1e5a      	subs	r2, r3, #1
   83748:	687b      	ldr	r3, [r7, #4]
   8374a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   8374c:	687b      	ldr	r3, [r7, #4]
   8374e:	2201      	movs	r2, #1
   83750:	715a      	strb	r2, [r3, #5]
   83752:	e007      	b.n	83764 <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   83754:	7bfb      	ldrb	r3, [r7, #15]
   83756:	2b01      	cmp	r3, #1
   83758:	d102      	bne.n	83760 <create_chain+0x104>
   8375a:	f04f 33ff 	mov.w	r3, #4294967295
   8375e:	e000      	b.n	83762 <create_chain+0x106>
   83760:	2301      	movs	r3, #1
   83762:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   83764:	697b      	ldr	r3, [r7, #20]
}
   83766:	4618      	mov	r0, r3
   83768:	3718      	adds	r7, #24
   8376a:	46bd      	mov	sp, r7
   8376c:	bd80      	pop	{r7, pc}
   8376e:	bf00      	nop
   83770:	0008324d 	.word	0x0008324d
   83774:	000833b1 	.word	0x000833b1

00083778 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   83778:	b580      	push	{r7, lr}
   8377a:	b084      	sub	sp, #16
   8377c:	af00      	add	r7, sp, #0
   8377e:	6078      	str	r0, [r7, #4]
   83780:	460b      	mov	r3, r1
   83782:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   83784:	687b      	ldr	r3, [r7, #4]
   83786:	887a      	ldrh	r2, [r7, #2]
   83788:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   8378a:	687b      	ldr	r3, [r7, #4]
   8378c:	689b      	ldr	r3, [r3, #8]
   8378e:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   83790:	68fb      	ldr	r3, [r7, #12]
   83792:	2b01      	cmp	r3, #1
   83794:	d005      	beq.n	837a2 <dir_sdi+0x2a>
   83796:	687b      	ldr	r3, [r7, #4]
   83798:	681b      	ldr	r3, [r3, #0]
   8379a:	699a      	ldr	r2, [r3, #24]
   8379c:	68fb      	ldr	r3, [r7, #12]
   8379e:	429a      	cmp	r2, r3
   837a0:	d801      	bhi.n	837a6 <dir_sdi+0x2e>
		return FR_INT_ERR;
   837a2:	2302      	movs	r3, #2
   837a4:	e066      	b.n	83874 <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   837a6:	68fb      	ldr	r3, [r7, #12]
   837a8:	2b00      	cmp	r3, #0
   837aa:	d108      	bne.n	837be <dir_sdi+0x46>
   837ac:	687b      	ldr	r3, [r7, #4]
   837ae:	681b      	ldr	r3, [r3, #0]
   837b0:	781b      	ldrb	r3, [r3, #0]
   837b2:	2b03      	cmp	r3, #3
   837b4:	d103      	bne.n	837be <dir_sdi+0x46>
		clst = dj->fs->dirbase;
   837b6:	687b      	ldr	r3, [r7, #4]
   837b8:	681b      	ldr	r3, [r3, #0]
   837ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   837bc:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   837be:	68fb      	ldr	r3, [r7, #12]
   837c0:	2b00      	cmp	r3, #0
   837c2:	d114      	bne.n	837ee <dir_sdi+0x76>
		dj->clust = clst;
   837c4:	687b      	ldr	r3, [r7, #4]
   837c6:	68fa      	ldr	r2, [r7, #12]
   837c8:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   837ca:	687b      	ldr	r3, [r7, #4]
   837cc:	681b      	ldr	r3, [r3, #0]
   837ce:	891b      	ldrh	r3, [r3, #8]
   837d0:	887a      	ldrh	r2, [r7, #2]
   837d2:	429a      	cmp	r2, r3
   837d4:	d301      	bcc.n	837da <dir_sdi+0x62>
			return FR_INT_ERR;
   837d6:	2302      	movs	r3, #2
   837d8:	e04c      	b.n	83874 <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   837da:	687b      	ldr	r3, [r7, #4]
   837dc:	681b      	ldr	r3, [r3, #0]
   837de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   837e0:	887a      	ldrh	r2, [r7, #2]
   837e2:	0912      	lsrs	r2, r2, #4
   837e4:	b292      	uxth	r2, r2
   837e6:	441a      	add	r2, r3
   837e8:	687b      	ldr	r3, [r7, #4]
   837ea:	611a      	str	r2, [r3, #16]
   837ec:	e036      	b.n	8385c <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   837ee:	687b      	ldr	r3, [r7, #4]
   837f0:	681b      	ldr	r3, [r3, #0]
   837f2:	789b      	ldrb	r3, [r3, #2]
   837f4:	b29b      	uxth	r3, r3
   837f6:	011b      	lsls	r3, r3, #4
   837f8:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
   837fa:	e01b      	b.n	83834 <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   837fc:	687b      	ldr	r3, [r7, #4]
   837fe:	681b      	ldr	r3, [r3, #0]
   83800:	68f9      	ldr	r1, [r7, #12]
   83802:	4618      	mov	r0, r3
   83804:	4b1d      	ldr	r3, [pc, #116]	; (8387c <dir_sdi+0x104>)
   83806:	4798      	blx	r3
   83808:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   8380a:	68fb      	ldr	r3, [r7, #12]
   8380c:	f1b3 3fff 	cmp.w	r3, #4294967295
   83810:	d101      	bne.n	83816 <dir_sdi+0x9e>
   83812:	2301      	movs	r3, #1
   83814:	e02e      	b.n	83874 <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   83816:	68fb      	ldr	r3, [r7, #12]
   83818:	2b01      	cmp	r3, #1
   8381a:	d905      	bls.n	83828 <dir_sdi+0xb0>
   8381c:	687b      	ldr	r3, [r7, #4]
   8381e:	681b      	ldr	r3, [r3, #0]
   83820:	699a      	ldr	r2, [r3, #24]
   83822:	68fb      	ldr	r3, [r7, #12]
   83824:	429a      	cmp	r2, r3
   83826:	d801      	bhi.n	8382c <dir_sdi+0xb4>
				return FR_INT_ERR;
   83828:	2302      	movs	r3, #2
   8382a:	e023      	b.n	83874 <dir_sdi+0xfc>
			idx -= ic;
   8382c:	887a      	ldrh	r2, [r7, #2]
   8382e:	897b      	ldrh	r3, [r7, #10]
   83830:	1ad3      	subs	r3, r2, r3
   83832:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
   83834:	887a      	ldrh	r2, [r7, #2]
   83836:	897b      	ldrh	r3, [r7, #10]
   83838:	429a      	cmp	r2, r3
   8383a:	d2df      	bcs.n	837fc <dir_sdi+0x84>
		}
		dj->clust = clst;
   8383c:	687b      	ldr	r3, [r7, #4]
   8383e:	68fa      	ldr	r2, [r7, #12]
   83840:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   83842:	687b      	ldr	r3, [r7, #4]
   83844:	681b      	ldr	r3, [r3, #0]
   83846:	68f9      	ldr	r1, [r7, #12]
   83848:	4618      	mov	r0, r3
   8384a:	4b0d      	ldr	r3, [pc, #52]	; (83880 <dir_sdi+0x108>)
   8384c:	4798      	blx	r3
   8384e:	4602      	mov	r2, r0
   83850:	887b      	ldrh	r3, [r7, #2]
   83852:	091b      	lsrs	r3, r3, #4
   83854:	b29b      	uxth	r3, r3
   83856:	441a      	add	r2, r3
   83858:	687b      	ldr	r3, [r7, #4]
   8385a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   8385c:	687b      	ldr	r3, [r7, #4]
   8385e:	681b      	ldr	r3, [r3, #0]
   83860:	f103 0230 	add.w	r2, r3, #48	; 0x30
   83864:	887b      	ldrh	r3, [r7, #2]
   83866:	f003 030f 	and.w	r3, r3, #15
   8386a:	015b      	lsls	r3, r3, #5
   8386c:	441a      	add	r2, r3
   8386e:	687b      	ldr	r3, [r7, #4]
   83870:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   83872:	2300      	movs	r3, #0
}
   83874:	4618      	mov	r0, r3
   83876:	3710      	adds	r7, #16
   83878:	46bd      	mov	sp, r7
   8387a:	bd80      	pop	{r7, pc}
   8387c:	0008324d 	.word	0x0008324d
   83880:	00083211 	.word	0x00083211

00083884 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   83884:	b590      	push	{r4, r7, lr}
   83886:	b085      	sub	sp, #20
   83888:	af00      	add	r7, sp, #0
   8388a:	6078      	str	r0, [r7, #4]
   8388c:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   8388e:	687b      	ldr	r3, [r7, #4]
   83890:	88db      	ldrh	r3, [r3, #6]
   83892:	3301      	adds	r3, #1
   83894:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   83896:	893b      	ldrh	r3, [r7, #8]
   83898:	2b00      	cmp	r3, #0
   8389a:	d003      	beq.n	838a4 <dir_next+0x20>
   8389c:	687b      	ldr	r3, [r7, #4]
   8389e:	691b      	ldr	r3, [r3, #16]
   838a0:	2b00      	cmp	r3, #0
   838a2:	d101      	bne.n	838a8 <dir_next+0x24>
		return FR_NO_FILE;
   838a4:	2304      	movs	r3, #4
   838a6:	e0bd      	b.n	83a24 <dir_next+0x1a0>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   838a8:	893b      	ldrh	r3, [r7, #8]
   838aa:	f003 030f 	and.w	r3, r3, #15
   838ae:	b29b      	uxth	r3, r3
   838b0:	2b00      	cmp	r3, #0
   838b2:	f040 80a8 	bne.w	83a06 <dir_next+0x182>
		dj->sect++;					/* Next sector */
   838b6:	687b      	ldr	r3, [r7, #4]
   838b8:	691b      	ldr	r3, [r3, #16]
   838ba:	1c5a      	adds	r2, r3, #1
   838bc:	687b      	ldr	r3, [r7, #4]
   838be:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   838c0:	687b      	ldr	r3, [r7, #4]
   838c2:	68db      	ldr	r3, [r3, #12]
   838c4:	2b00      	cmp	r3, #0
   838c6:	d108      	bne.n	838da <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   838c8:	687b      	ldr	r3, [r7, #4]
   838ca:	681b      	ldr	r3, [r3, #0]
   838cc:	891b      	ldrh	r3, [r3, #8]
   838ce:	893a      	ldrh	r2, [r7, #8]
   838d0:	429a      	cmp	r2, r3
   838d2:	f0c0 8098 	bcc.w	83a06 <dir_next+0x182>
				return FR_NO_FILE;
   838d6:	2304      	movs	r3, #4
   838d8:	e0a4      	b.n	83a24 <dir_next+0x1a0>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   838da:	893b      	ldrh	r3, [r7, #8]
   838dc:	091b      	lsrs	r3, r3, #4
   838de:	b29b      	uxth	r3, r3
   838e0:	461a      	mov	r2, r3
   838e2:	687b      	ldr	r3, [r7, #4]
   838e4:	681b      	ldr	r3, [r3, #0]
   838e6:	789b      	ldrb	r3, [r3, #2]
   838e8:	3b01      	subs	r3, #1
   838ea:	4013      	ands	r3, r2
   838ec:	2b00      	cmp	r3, #0
   838ee:	f040 808a 	bne.w	83a06 <dir_next+0x182>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   838f2:	687b      	ldr	r3, [r7, #4]
   838f4:	681a      	ldr	r2, [r3, #0]
   838f6:	687b      	ldr	r3, [r7, #4]
   838f8:	68db      	ldr	r3, [r3, #12]
   838fa:	4619      	mov	r1, r3
   838fc:	4610      	mov	r0, r2
   838fe:	4b4b      	ldr	r3, [pc, #300]	; (83a2c <dir_next+0x1a8>)
   83900:	4798      	blx	r3
   83902:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   83904:	68fb      	ldr	r3, [r7, #12]
   83906:	2b01      	cmp	r3, #1
   83908:	d801      	bhi.n	8390e <dir_next+0x8a>
   8390a:	2302      	movs	r3, #2
   8390c:	e08a      	b.n	83a24 <dir_next+0x1a0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   8390e:	68fb      	ldr	r3, [r7, #12]
   83910:	f1b3 3fff 	cmp.w	r3, #4294967295
   83914:	d101      	bne.n	8391a <dir_next+0x96>
   83916:	2301      	movs	r3, #1
   83918:	e084      	b.n	83a24 <dir_next+0x1a0>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   8391a:	687b      	ldr	r3, [r7, #4]
   8391c:	681b      	ldr	r3, [r3, #0]
   8391e:	699a      	ldr	r2, [r3, #24]
   83920:	68fb      	ldr	r3, [r7, #12]
   83922:	429a      	cmp	r2, r3
   83924:	d863      	bhi.n	839ee <dir_next+0x16a>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   83926:	683b      	ldr	r3, [r7, #0]
   83928:	2b00      	cmp	r3, #0
   8392a:	d101      	bne.n	83930 <dir_next+0xac>
   8392c:	2304      	movs	r3, #4
   8392e:	e079      	b.n	83a24 <dir_next+0x1a0>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   83930:	687b      	ldr	r3, [r7, #4]
   83932:	681a      	ldr	r2, [r3, #0]
   83934:	687b      	ldr	r3, [r7, #4]
   83936:	68db      	ldr	r3, [r3, #12]
   83938:	4619      	mov	r1, r3
   8393a:	4610      	mov	r0, r2
   8393c:	4b3c      	ldr	r3, [pc, #240]	; (83a30 <dir_next+0x1ac>)
   8393e:	4798      	blx	r3
   83940:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   83942:	68fb      	ldr	r3, [r7, #12]
   83944:	2b00      	cmp	r3, #0
   83946:	d101      	bne.n	8394c <dir_next+0xc8>
   83948:	2307      	movs	r3, #7
   8394a:	e06b      	b.n	83a24 <dir_next+0x1a0>
					if (clst == 1) return FR_INT_ERR;
   8394c:	68fb      	ldr	r3, [r7, #12]
   8394e:	2b01      	cmp	r3, #1
   83950:	d101      	bne.n	83956 <dir_next+0xd2>
   83952:	2302      	movs	r3, #2
   83954:	e066      	b.n	83a24 <dir_next+0x1a0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   83956:	68fb      	ldr	r3, [r7, #12]
   83958:	f1b3 3fff 	cmp.w	r3, #4294967295
   8395c:	d101      	bne.n	83962 <dir_next+0xde>
   8395e:	2301      	movs	r3, #1
   83960:	e060      	b.n	83a24 <dir_next+0x1a0>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   83962:	687b      	ldr	r3, [r7, #4]
   83964:	681b      	ldr	r3, [r3, #0]
   83966:	2100      	movs	r1, #0
   83968:	4618      	mov	r0, r3
   8396a:	4b32      	ldr	r3, [pc, #200]	; (83a34 <dir_next+0x1b0>)
   8396c:	4798      	blx	r3
   8396e:	4603      	mov	r3, r0
   83970:	2b00      	cmp	r3, #0
   83972:	d001      	beq.n	83978 <dir_next+0xf4>
   83974:	2301      	movs	r3, #1
   83976:	e055      	b.n	83a24 <dir_next+0x1a0>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   83978:	687b      	ldr	r3, [r7, #4]
   8397a:	681b      	ldr	r3, [r3, #0]
   8397c:	3330      	adds	r3, #48	; 0x30
   8397e:	f44f 7200 	mov.w	r2, #512	; 0x200
   83982:	2100      	movs	r1, #0
   83984:	4618      	mov	r0, r3
   83986:	4b2c      	ldr	r3, [pc, #176]	; (83a38 <dir_next+0x1b4>)
   83988:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   8398a:	687b      	ldr	r3, [r7, #4]
   8398c:	681c      	ldr	r4, [r3, #0]
   8398e:	687b      	ldr	r3, [r7, #4]
   83990:	681b      	ldr	r3, [r3, #0]
   83992:	68f9      	ldr	r1, [r7, #12]
   83994:	4618      	mov	r0, r3
   83996:	4b29      	ldr	r3, [pc, #164]	; (83a3c <dir_next+0x1b8>)
   83998:	4798      	blx	r3
   8399a:	4603      	mov	r3, r0
   8399c:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   8399e:	2300      	movs	r3, #0
   839a0:	72fb      	strb	r3, [r7, #11]
   839a2:	e016      	b.n	839d2 <dir_next+0x14e>
						dj->fs->wflag = 1;
   839a4:	687b      	ldr	r3, [r7, #4]
   839a6:	681b      	ldr	r3, [r3, #0]
   839a8:	2201      	movs	r2, #1
   839aa:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   839ac:	687b      	ldr	r3, [r7, #4]
   839ae:	681b      	ldr	r3, [r3, #0]
   839b0:	2100      	movs	r1, #0
   839b2:	4618      	mov	r0, r3
   839b4:	4b1f      	ldr	r3, [pc, #124]	; (83a34 <dir_next+0x1b0>)
   839b6:	4798      	blx	r3
   839b8:	4603      	mov	r3, r0
   839ba:	2b00      	cmp	r3, #0
   839bc:	d001      	beq.n	839c2 <dir_next+0x13e>
   839be:	2301      	movs	r3, #1
   839c0:	e030      	b.n	83a24 <dir_next+0x1a0>
						dj->fs->winsect++;
   839c2:	687b      	ldr	r3, [r7, #4]
   839c4:	681b      	ldr	r3, [r3, #0]
   839c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   839c8:	3201      	adds	r2, #1
   839ca:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   839cc:	7afb      	ldrb	r3, [r7, #11]
   839ce:	3301      	adds	r3, #1
   839d0:	72fb      	strb	r3, [r7, #11]
   839d2:	687b      	ldr	r3, [r7, #4]
   839d4:	681b      	ldr	r3, [r3, #0]
   839d6:	789b      	ldrb	r3, [r3, #2]
   839d8:	7afa      	ldrb	r2, [r7, #11]
   839da:	429a      	cmp	r2, r3
   839dc:	d3e2      	bcc.n	839a4 <dir_next+0x120>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   839de:	687b      	ldr	r3, [r7, #4]
   839e0:	681b      	ldr	r3, [r3, #0]
   839e2:	687a      	ldr	r2, [r7, #4]
   839e4:	6812      	ldr	r2, [r2, #0]
   839e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   839e8:	7afa      	ldrb	r2, [r7, #11]
   839ea:	1a8a      	subs	r2, r1, r2
   839ec:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   839ee:	687b      	ldr	r3, [r7, #4]
   839f0:	68fa      	ldr	r2, [r7, #12]
   839f2:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   839f4:	687b      	ldr	r3, [r7, #4]
   839f6:	681b      	ldr	r3, [r3, #0]
   839f8:	68f9      	ldr	r1, [r7, #12]
   839fa:	4618      	mov	r0, r3
   839fc:	4b0f      	ldr	r3, [pc, #60]	; (83a3c <dir_next+0x1b8>)
   839fe:	4798      	blx	r3
   83a00:	4602      	mov	r2, r0
   83a02:	687b      	ldr	r3, [r7, #4]
   83a04:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   83a06:	687b      	ldr	r3, [r7, #4]
   83a08:	893a      	ldrh	r2, [r7, #8]
   83a0a:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   83a0c:	687b      	ldr	r3, [r7, #4]
   83a0e:	681b      	ldr	r3, [r3, #0]
   83a10:	f103 0230 	add.w	r2, r3, #48	; 0x30
   83a14:	893b      	ldrh	r3, [r7, #8]
   83a16:	f003 030f 	and.w	r3, r3, #15
   83a1a:	015b      	lsls	r3, r3, #5
   83a1c:	441a      	add	r2, r3
   83a1e:	687b      	ldr	r3, [r7, #4]
   83a20:	615a      	str	r2, [r3, #20]

	return FR_OK;
   83a22:	2300      	movs	r3, #0
}
   83a24:	4618      	mov	r0, r3
   83a26:	3714      	adds	r7, #20
   83a28:	46bd      	mov	sp, r7
   83a2a:	bd90      	pop	{r4, r7, pc}
   83a2c:	0008324d 	.word	0x0008324d
   83a30:	0008365d 	.word	0x0008365d
   83a34:	00083001 	.word	0x00083001
   83a38:	00082f4f 	.word	0x00082f4f
   83a3c:	00083211 	.word	0x00083211

00083a40 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   83a40:	b580      	push	{r7, lr}
   83a42:	b086      	sub	sp, #24
   83a44:	af00      	add	r7, sp, #0
   83a46:	6078      	str	r0, [r7, #4]
   83a48:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   83a4a:	683b      	ldr	r3, [r7, #0]
   83a4c:	781b      	ldrb	r3, [r3, #0]
   83a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   83a52:	1e5a      	subs	r2, r3, #1
   83a54:	4613      	mov	r3, r2
   83a56:	005b      	lsls	r3, r3, #1
   83a58:	4413      	add	r3, r2
   83a5a:	009b      	lsls	r3, r3, #2
   83a5c:	4413      	add	r3, r2
   83a5e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   83a60:	2300      	movs	r3, #0
   83a62:	613b      	str	r3, [r7, #16]
   83a64:	2301      	movs	r3, #1
   83a66:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   83a68:	4a2b      	ldr	r2, [pc, #172]	; (83b18 <cmp_lfn+0xd8>)
   83a6a:	693b      	ldr	r3, [r7, #16]
   83a6c:	4413      	add	r3, r2
   83a6e:	781b      	ldrb	r3, [r3, #0]
   83a70:	3301      	adds	r3, #1
   83a72:	683a      	ldr	r2, [r7, #0]
   83a74:	4413      	add	r3, r2
   83a76:	781b      	ldrb	r3, [r3, #0]
   83a78:	021b      	lsls	r3, r3, #8
   83a7a:	b21a      	sxth	r2, r3
   83a7c:	4926      	ldr	r1, [pc, #152]	; (83b18 <cmp_lfn+0xd8>)
   83a7e:	693b      	ldr	r3, [r7, #16]
   83a80:	440b      	add	r3, r1
   83a82:	781b      	ldrb	r3, [r3, #0]
   83a84:	4619      	mov	r1, r3
   83a86:	683b      	ldr	r3, [r7, #0]
   83a88:	440b      	add	r3, r1
   83a8a:	781b      	ldrb	r3, [r3, #0]
   83a8c:	b21b      	sxth	r3, r3
   83a8e:	4313      	orrs	r3, r2
   83a90:	b21b      	sxth	r3, r3
   83a92:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
   83a94:	89fb      	ldrh	r3, [r7, #14]
   83a96:	2b00      	cmp	r3, #0
   83a98:	d019      	beq.n	83ace <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   83a9a:	89bb      	ldrh	r3, [r7, #12]
   83a9c:	4618      	mov	r0, r3
   83a9e:	4b1f      	ldr	r3, [pc, #124]	; (83b1c <cmp_lfn+0xdc>)
   83aa0:	4798      	blx	r3
   83aa2:	4603      	mov	r3, r0
   83aa4:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   83aa6:	697b      	ldr	r3, [r7, #20]
   83aa8:	2bfe      	cmp	r3, #254	; 0xfe
   83aaa:	d80e      	bhi.n	83aca <cmp_lfn+0x8a>
   83aac:	697b      	ldr	r3, [r7, #20]
   83aae:	1c5a      	adds	r2, r3, #1
   83ab0:	617a      	str	r2, [r7, #20]
   83ab2:	005b      	lsls	r3, r3, #1
   83ab4:	687a      	ldr	r2, [r7, #4]
   83ab6:	4413      	add	r3, r2
   83ab8:	881b      	ldrh	r3, [r3, #0]
   83aba:	4618      	mov	r0, r3
   83abc:	4b17      	ldr	r3, [pc, #92]	; (83b1c <cmp_lfn+0xdc>)
   83abe:	4798      	blx	r3
   83ac0:	4603      	mov	r3, r0
   83ac2:	461a      	mov	r2, r3
   83ac4:	89fb      	ldrh	r3, [r7, #14]
   83ac6:	4293      	cmp	r3, r2
   83ac8:	d008      	beq.n	83adc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
   83aca:	2300      	movs	r3, #0
   83acc:	e01f      	b.n	83b0e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   83ace:	89bb      	ldrh	r3, [r7, #12]
   83ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   83ad4:	4293      	cmp	r3, r2
   83ad6:	d001      	beq.n	83adc <cmp_lfn+0x9c>
   83ad8:	2300      	movs	r3, #0
   83ada:	e018      	b.n	83b0e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   83adc:	693b      	ldr	r3, [r7, #16]
   83ade:	3301      	adds	r3, #1
   83ae0:	613b      	str	r3, [r7, #16]
   83ae2:	693b      	ldr	r3, [r7, #16]
   83ae4:	2b0c      	cmp	r3, #12
   83ae6:	d9bf      	bls.n	83a68 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   83ae8:	683b      	ldr	r3, [r7, #0]
   83aea:	781b      	ldrb	r3, [r3, #0]
   83aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
   83af0:	2b00      	cmp	r3, #0
   83af2:	d00b      	beq.n	83b0c <cmp_lfn+0xcc>
   83af4:	89fb      	ldrh	r3, [r7, #14]
   83af6:	2b00      	cmp	r3, #0
   83af8:	d008      	beq.n	83b0c <cmp_lfn+0xcc>
   83afa:	697b      	ldr	r3, [r7, #20]
   83afc:	005b      	lsls	r3, r3, #1
   83afe:	687a      	ldr	r2, [r7, #4]
   83b00:	4413      	add	r3, r2
   83b02:	881b      	ldrh	r3, [r3, #0]
   83b04:	2b00      	cmp	r3, #0
   83b06:	d001      	beq.n	83b0c <cmp_lfn+0xcc>
		return 0;
   83b08:	2300      	movs	r3, #0
   83b0a:	e000      	b.n	83b0e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
   83b0c:	2301      	movs	r3, #1
}
   83b0e:	4618      	mov	r0, r3
   83b10:	3718      	adds	r7, #24
   83b12:	46bd      	mov	sp, r7
   83b14:	bd80      	pop	{r7, pc}
   83b16:	bf00      	nop
   83b18:	0008780c 	.word	0x0008780c
   83b1c:	00085585 	.word	0x00085585

00083b20 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   83b20:	b480      	push	{r7}
   83b22:	b089      	sub	sp, #36	; 0x24
   83b24:	af00      	add	r7, sp, #0
   83b26:	60f8      	str	r0, [r7, #12]
   83b28:	60b9      	str	r1, [r7, #8]
   83b2a:	4611      	mov	r1, r2
   83b2c:	461a      	mov	r2, r3
   83b2e:	460b      	mov	r3, r1
   83b30:	71fb      	strb	r3, [r7, #7]
   83b32:	4613      	mov	r3, r2
   83b34:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   83b36:	68bb      	ldr	r3, [r7, #8]
   83b38:	330d      	adds	r3, #13
   83b3a:	79ba      	ldrb	r2, [r7, #6]
   83b3c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   83b3e:	68bb      	ldr	r3, [r7, #8]
   83b40:	330b      	adds	r3, #11
   83b42:	220f      	movs	r2, #15
   83b44:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   83b46:	68bb      	ldr	r3, [r7, #8]
   83b48:	330c      	adds	r3, #12
   83b4a:	2200      	movs	r2, #0
   83b4c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   83b4e:	68bb      	ldr	r3, [r7, #8]
   83b50:	331a      	adds	r3, #26
   83b52:	2200      	movs	r2, #0
   83b54:	701a      	strb	r2, [r3, #0]
   83b56:	68bb      	ldr	r3, [r7, #8]
   83b58:	331b      	adds	r3, #27
   83b5a:	2200      	movs	r2, #0
   83b5c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   83b5e:	79fb      	ldrb	r3, [r7, #7]
   83b60:	1e5a      	subs	r2, r3, #1
   83b62:	4613      	mov	r3, r2
   83b64:	005b      	lsls	r3, r3, #1
   83b66:	4413      	add	r3, r2
   83b68:	009b      	lsls	r3, r3, #2
   83b6a:	4413      	add	r3, r2
   83b6c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   83b6e:	2300      	movs	r3, #0
   83b70:	82fb      	strh	r3, [r7, #22]
   83b72:	2300      	movs	r3, #0
   83b74:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   83b76:	8afb      	ldrh	r3, [r7, #22]
   83b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
   83b7c:	4293      	cmp	r3, r2
   83b7e:	d007      	beq.n	83b90 <fit_lfn+0x70>
   83b80:	69fb      	ldr	r3, [r7, #28]
   83b82:	1c5a      	adds	r2, r3, #1
   83b84:	61fa      	str	r2, [r7, #28]
   83b86:	005b      	lsls	r3, r3, #1
   83b88:	68fa      	ldr	r2, [r7, #12]
   83b8a:	4413      	add	r3, r2
   83b8c:	881b      	ldrh	r3, [r3, #0]
   83b8e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   83b90:	4a1c      	ldr	r2, [pc, #112]	; (83c04 <fit_lfn+0xe4>)
   83b92:	69bb      	ldr	r3, [r7, #24]
   83b94:	4413      	add	r3, r2
   83b96:	781b      	ldrb	r3, [r3, #0]
   83b98:	461a      	mov	r2, r3
   83b9a:	68bb      	ldr	r3, [r7, #8]
   83b9c:	4413      	add	r3, r2
   83b9e:	8afa      	ldrh	r2, [r7, #22]
   83ba0:	b2d2      	uxtb	r2, r2
   83ba2:	701a      	strb	r2, [r3, #0]
   83ba4:	4a17      	ldr	r2, [pc, #92]	; (83c04 <fit_lfn+0xe4>)
   83ba6:	69bb      	ldr	r3, [r7, #24]
   83ba8:	4413      	add	r3, r2
   83baa:	781b      	ldrb	r3, [r3, #0]
   83bac:	3301      	adds	r3, #1
   83bae:	68ba      	ldr	r2, [r7, #8]
   83bb0:	4413      	add	r3, r2
   83bb2:	8afa      	ldrh	r2, [r7, #22]
   83bb4:	0a12      	lsrs	r2, r2, #8
   83bb6:	b292      	uxth	r2, r2
   83bb8:	b2d2      	uxtb	r2, r2
   83bba:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   83bbc:	8afb      	ldrh	r3, [r7, #22]
   83bbe:	2b00      	cmp	r3, #0
   83bc0:	d102      	bne.n	83bc8 <fit_lfn+0xa8>
   83bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   83bc6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
   83bc8:	69bb      	ldr	r3, [r7, #24]
   83bca:	3301      	adds	r3, #1
   83bcc:	61bb      	str	r3, [r7, #24]
   83bce:	69bb      	ldr	r3, [r7, #24]
   83bd0:	2b0c      	cmp	r3, #12
   83bd2:	d9d0      	bls.n	83b76 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   83bd4:	8afb      	ldrh	r3, [r7, #22]
   83bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   83bda:	4293      	cmp	r3, r2
   83bdc:	d006      	beq.n	83bec <fit_lfn+0xcc>
   83bde:	69fb      	ldr	r3, [r7, #28]
   83be0:	005b      	lsls	r3, r3, #1
   83be2:	68fa      	ldr	r2, [r7, #12]
   83be4:	4413      	add	r3, r2
   83be6:	881b      	ldrh	r3, [r3, #0]
   83be8:	2b00      	cmp	r3, #0
   83bea:	d103      	bne.n	83bf4 <fit_lfn+0xd4>
   83bec:	79fb      	ldrb	r3, [r7, #7]
   83bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83bf2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   83bf4:	68bb      	ldr	r3, [r7, #8]
   83bf6:	79fa      	ldrb	r2, [r7, #7]
   83bf8:	701a      	strb	r2, [r3, #0]
}
   83bfa:	bf00      	nop
   83bfc:	3724      	adds	r7, #36	; 0x24
   83bfe:	46bd      	mov	sp, r7
   83c00:	bc80      	pop	{r7}
   83c02:	4770      	bx	lr
   83c04:	0008780c 	.word	0x0008780c

00083c08 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   83c08:	b580      	push	{r7, lr}
   83c0a:	b08a      	sub	sp, #40	; 0x28
   83c0c:	af00      	add	r7, sp, #0
   83c0e:	60f8      	str	r0, [r7, #12]
   83c10:	60b9      	str	r1, [r7, #8]
   83c12:	607a      	str	r2, [r7, #4]
   83c14:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   83c16:	220b      	movs	r2, #11
   83c18:	68b9      	ldr	r1, [r7, #8]
   83c1a:	68f8      	ldr	r0, [r7, #12]
   83c1c:	4b33      	ldr	r3, [pc, #204]	; (83cec <gen_numname+0xe4>)
   83c1e:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   83c20:	887b      	ldrh	r3, [r7, #2]
   83c22:	2b05      	cmp	r3, #5
   83c24:	d90f      	bls.n	83c46 <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   83c26:	887b      	ldrh	r3, [r7, #2]
   83c28:	b29a      	uxth	r2, r3
   83c2a:	0852      	lsrs	r2, r2, #1
   83c2c:	03db      	lsls	r3, r3, #15
   83c2e:	4313      	orrs	r3, r2
   83c30:	b29a      	uxth	r2, r3
   83c32:	687b      	ldr	r3, [r7, #4]
   83c34:	1c99      	adds	r1, r3, #2
   83c36:	6079      	str	r1, [r7, #4]
   83c38:	881b      	ldrh	r3, [r3, #0]
   83c3a:	4413      	add	r3, r2
   83c3c:	807b      	strh	r3, [r7, #2]
   83c3e:	687b      	ldr	r3, [r7, #4]
   83c40:	881b      	ldrh	r3, [r3, #0]
   83c42:	2b00      	cmp	r3, #0
   83c44:	d1ef      	bne.n	83c26 <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
   83c46:	2307      	movs	r3, #7
   83c48:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   83c4a:	887b      	ldrh	r3, [r7, #2]
   83c4c:	b2db      	uxtb	r3, r3
   83c4e:	f003 030f 	and.w	r3, r3, #15
   83c52:	b2db      	uxtb	r3, r3
   83c54:	3330      	adds	r3, #48	; 0x30
   83c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
   83c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   83c5e:	2b39      	cmp	r3, #57	; 0x39
   83c60:	d904      	bls.n	83c6c <gen_numname+0x64>
   83c62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   83c66:	3307      	adds	r3, #7
   83c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
   83c6c:	6a3b      	ldr	r3, [r7, #32]
   83c6e:	1e5a      	subs	r2, r3, #1
   83c70:	623a      	str	r2, [r7, #32]
   83c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
   83c76:	4413      	add	r3, r2
   83c78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   83c7c:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
   83c80:	887b      	ldrh	r3, [r7, #2]
   83c82:	091b      	lsrs	r3, r3, #4
   83c84:	807b      	strh	r3, [r7, #2]
	} while (seq);
   83c86:	887b      	ldrh	r3, [r7, #2]
   83c88:	2b00      	cmp	r3, #0
   83c8a:	d1de      	bne.n	83c4a <gen_numname+0x42>
	ns[i] = '~';
   83c8c:	f107 0214 	add.w	r2, r7, #20
   83c90:	6a3b      	ldr	r3, [r7, #32]
   83c92:	4413      	add	r3, r2
   83c94:	227e      	movs	r2, #126	; 0x7e
   83c96:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   83c98:	2300      	movs	r3, #0
   83c9a:	61fb      	str	r3, [r7, #28]
   83c9c:	e002      	b.n	83ca4 <gen_numname+0x9c>
   83c9e:	69fb      	ldr	r3, [r7, #28]
   83ca0:	3301      	adds	r3, #1
   83ca2:	61fb      	str	r3, [r7, #28]
   83ca4:	69fa      	ldr	r2, [r7, #28]
   83ca6:	6a3b      	ldr	r3, [r7, #32]
   83ca8:	429a      	cmp	r2, r3
   83caa:	d205      	bcs.n	83cb8 <gen_numname+0xb0>
   83cac:	68fa      	ldr	r2, [r7, #12]
   83cae:	69fb      	ldr	r3, [r7, #28]
   83cb0:	4413      	add	r3, r2
   83cb2:	781b      	ldrb	r3, [r3, #0]
   83cb4:	2b20      	cmp	r3, #32
   83cb6:	d1f2      	bne.n	83c9e <gen_numname+0x96>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   83cb8:	69fb      	ldr	r3, [r7, #28]
   83cba:	1c5a      	adds	r2, r3, #1
   83cbc:	61fa      	str	r2, [r7, #28]
   83cbe:	68fa      	ldr	r2, [r7, #12]
   83cc0:	441a      	add	r2, r3
   83cc2:	6a3b      	ldr	r3, [r7, #32]
   83cc4:	2b07      	cmp	r3, #7
   83cc6:	d808      	bhi.n	83cda <gen_numname+0xd2>
   83cc8:	6a3b      	ldr	r3, [r7, #32]
   83cca:	1c59      	adds	r1, r3, #1
   83ccc:	6239      	str	r1, [r7, #32]
   83cce:	f107 0128 	add.w	r1, r7, #40	; 0x28
   83cd2:	440b      	add	r3, r1
   83cd4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   83cd8:	e000      	b.n	83cdc <gen_numname+0xd4>
   83cda:	2320      	movs	r3, #32
   83cdc:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   83cde:	69fb      	ldr	r3, [r7, #28]
   83ce0:	2b07      	cmp	r3, #7
   83ce2:	d9e9      	bls.n	83cb8 <gen_numname+0xb0>
}
   83ce4:	bf00      	nop
   83ce6:	3728      	adds	r7, #40	; 0x28
   83ce8:	46bd      	mov	sp, r7
   83cea:	bd80      	pop	{r7, pc}
   83cec:	00082f15 	.word	0x00082f15

00083cf0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   83cf0:	b480      	push	{r7}
   83cf2:	b085      	sub	sp, #20
   83cf4:	af00      	add	r7, sp, #0
   83cf6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   83cf8:	2300      	movs	r3, #0
   83cfa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
   83cfc:	230b      	movs	r3, #11
   83cfe:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   83d00:	7bfb      	ldrb	r3, [r7, #15]
   83d02:	b2da      	uxtb	r2, r3
   83d04:	0852      	lsrs	r2, r2, #1
   83d06:	01db      	lsls	r3, r3, #7
   83d08:	4313      	orrs	r3, r2
   83d0a:	b2da      	uxtb	r2, r3
   83d0c:	687b      	ldr	r3, [r7, #4]
   83d0e:	1c59      	adds	r1, r3, #1
   83d10:	6079      	str	r1, [r7, #4]
   83d12:	781b      	ldrb	r3, [r3, #0]
   83d14:	4413      	add	r3, r2
   83d16:	73fb      	strb	r3, [r7, #15]
   83d18:	68bb      	ldr	r3, [r7, #8]
   83d1a:	3b01      	subs	r3, #1
   83d1c:	60bb      	str	r3, [r7, #8]
   83d1e:	68bb      	ldr	r3, [r7, #8]
   83d20:	2b00      	cmp	r3, #0
   83d22:	d1ed      	bne.n	83d00 <sum_sfn+0x10>
	return sum;
   83d24:	7bfb      	ldrb	r3, [r7, #15]
}
   83d26:	4618      	mov	r0, r3
   83d28:	3714      	adds	r7, #20
   83d2a:	46bd      	mov	sp, r7
   83d2c:	bc80      	pop	{r7}
   83d2e:	4770      	bx	lr

00083d30 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   83d30:	b580      	push	{r7, lr}
   83d32:	b086      	sub	sp, #24
   83d34:	af00      	add	r7, sp, #0
   83d36:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   83d38:	2100      	movs	r1, #0
   83d3a:	6878      	ldr	r0, [r7, #4]
   83d3c:	4b52      	ldr	r3, [pc, #328]	; (83e88 <dir_find+0x158>)
   83d3e:	4798      	blx	r3
   83d40:	4603      	mov	r3, r0
   83d42:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
   83d44:	7dfb      	ldrb	r3, [r7, #23]
   83d46:	2b00      	cmp	r3, #0
   83d48:	d001      	beq.n	83d4e <dir_find+0x1e>
   83d4a:	7dfb      	ldrb	r3, [r7, #23]
   83d4c:	e098      	b.n	83e80 <dir_find+0x150>

#if _USE_LFN
	ord = sum = 0xFF;
   83d4e:	23ff      	movs	r3, #255	; 0xff
   83d50:	753b      	strb	r3, [r7, #20]
   83d52:	7d3b      	ldrb	r3, [r7, #20]
   83d54:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   83d56:	687b      	ldr	r3, [r7, #4]
   83d58:	681a      	ldr	r2, [r3, #0]
   83d5a:	687b      	ldr	r3, [r7, #4]
   83d5c:	691b      	ldr	r3, [r3, #16]
   83d5e:	4619      	mov	r1, r3
   83d60:	4610      	mov	r0, r2
   83d62:	4b4a      	ldr	r3, [pc, #296]	; (83e8c <dir_find+0x15c>)
   83d64:	4798      	blx	r3
   83d66:	4603      	mov	r3, r0
   83d68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
   83d6a:	7dfb      	ldrb	r3, [r7, #23]
   83d6c:	2b00      	cmp	r3, #0
   83d6e:	f040 8081 	bne.w	83e74 <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   83d72:	687b      	ldr	r3, [r7, #4]
   83d74:	695b      	ldr	r3, [r3, #20]
   83d76:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   83d78:	693b      	ldr	r3, [r7, #16]
   83d7a:	781b      	ldrb	r3, [r3, #0]
   83d7c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   83d7e:	7dbb      	ldrb	r3, [r7, #22]
   83d80:	2b00      	cmp	r3, #0
   83d82:	d102      	bne.n	83d8a <dir_find+0x5a>
   83d84:	2304      	movs	r3, #4
   83d86:	75fb      	strb	r3, [r7, #23]
   83d88:	e079      	b.n	83e7e <dir_find+0x14e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   83d8a:	693b      	ldr	r3, [r7, #16]
   83d8c:	330b      	adds	r3, #11
   83d8e:	781b      	ldrb	r3, [r3, #0]
   83d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   83d94:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   83d96:	7dbb      	ldrb	r3, [r7, #22]
   83d98:	2be5      	cmp	r3, #229	; 0xe5
   83d9a:	d007      	beq.n	83dac <dir_find+0x7c>
   83d9c:	7bfb      	ldrb	r3, [r7, #15]
   83d9e:	f003 0308 	and.w	r3, r3, #8
   83da2:	2b00      	cmp	r3, #0
   83da4:	d005      	beq.n	83db2 <dir_find+0x82>
   83da6:	7bfb      	ldrb	r3, [r7, #15]
   83da8:	2b0f      	cmp	r3, #15
   83daa:	d002      	beq.n	83db2 <dir_find+0x82>
			ord = 0xFF;
   83dac:	23ff      	movs	r3, #255	; 0xff
   83dae:	757b      	strb	r3, [r7, #21]
   83db0:	e055      	b.n	83e5e <dir_find+0x12e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   83db2:	7bfb      	ldrb	r3, [r7, #15]
   83db4:	2b0f      	cmp	r3, #15
   83db6:	d12f      	bne.n	83e18 <dir_find+0xe8>
				if (dj->lfn) {
   83db8:	687b      	ldr	r3, [r7, #4]
   83dba:	69db      	ldr	r3, [r3, #28]
   83dbc:	2b00      	cmp	r3, #0
   83dbe:	d04e      	beq.n	83e5e <dir_find+0x12e>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   83dc0:	7dbb      	ldrb	r3, [r7, #22]
   83dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   83dc6:	2b00      	cmp	r3, #0
   83dc8:	d00c      	beq.n	83de4 <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
   83dca:	693b      	ldr	r3, [r7, #16]
   83dcc:	7b5b      	ldrb	r3, [r3, #13]
   83dce:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
   83dd0:	7dbb      	ldrb	r3, [r7, #22]
   83dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   83dd6:	75bb      	strb	r3, [r7, #22]
   83dd8:	7dbb      	ldrb	r3, [r7, #22]
   83dda:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
   83ddc:	687b      	ldr	r3, [r7, #4]
   83dde:	88da      	ldrh	r2, [r3, #6]
   83de0:	687b      	ldr	r3, [r7, #4]
   83de2:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   83de4:	7dba      	ldrb	r2, [r7, #22]
   83de6:	7d7b      	ldrb	r3, [r7, #21]
   83de8:	429a      	cmp	r2, r3
   83dea:	d112      	bne.n	83e12 <dir_find+0xe2>
   83dec:	693b      	ldr	r3, [r7, #16]
   83dee:	330d      	adds	r3, #13
   83df0:	781b      	ldrb	r3, [r3, #0]
   83df2:	7d3a      	ldrb	r2, [r7, #20]
   83df4:	429a      	cmp	r2, r3
   83df6:	d10c      	bne.n	83e12 <dir_find+0xe2>
   83df8:	687b      	ldr	r3, [r7, #4]
   83dfa:	69db      	ldr	r3, [r3, #28]
   83dfc:	6939      	ldr	r1, [r7, #16]
   83dfe:	4618      	mov	r0, r3
   83e00:	4b23      	ldr	r3, [pc, #140]	; (83e90 <dir_find+0x160>)
   83e02:	4798      	blx	r3
   83e04:	4603      	mov	r3, r0
   83e06:	2b00      	cmp	r3, #0
   83e08:	d003      	beq.n	83e12 <dir_find+0xe2>
   83e0a:	7d7b      	ldrb	r3, [r7, #21]
   83e0c:	3b01      	subs	r3, #1
   83e0e:	b2db      	uxtb	r3, r3
   83e10:	e000      	b.n	83e14 <dir_find+0xe4>
   83e12:	23ff      	movs	r3, #255	; 0xff
   83e14:	757b      	strb	r3, [r7, #21]
   83e16:	e022      	b.n	83e5e <dir_find+0x12e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   83e18:	7d7b      	ldrb	r3, [r7, #21]
   83e1a:	2b00      	cmp	r3, #0
   83e1c:	d107      	bne.n	83e2e <dir_find+0xfe>
   83e1e:	6938      	ldr	r0, [r7, #16]
   83e20:	4b1c      	ldr	r3, [pc, #112]	; (83e94 <dir_find+0x164>)
   83e22:	4798      	blx	r3
   83e24:	4603      	mov	r3, r0
   83e26:	461a      	mov	r2, r3
   83e28:	7d3b      	ldrb	r3, [r7, #20]
   83e2a:	4293      	cmp	r3, r2
   83e2c:	d024      	beq.n	83e78 <dir_find+0x148>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   83e2e:	23ff      	movs	r3, #255	; 0xff
   83e30:	757b      	strb	r3, [r7, #21]
   83e32:	687b      	ldr	r3, [r7, #4]
   83e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
   83e38:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   83e3a:	687b      	ldr	r3, [r7, #4]
   83e3c:	699b      	ldr	r3, [r3, #24]
   83e3e:	330b      	adds	r3, #11
   83e40:	781b      	ldrb	r3, [r3, #0]
   83e42:	f003 0301 	and.w	r3, r3, #1
   83e46:	2b00      	cmp	r3, #0
   83e48:	d109      	bne.n	83e5e <dir_find+0x12e>
   83e4a:	687b      	ldr	r3, [r7, #4]
   83e4c:	699b      	ldr	r3, [r3, #24]
   83e4e:	220b      	movs	r2, #11
   83e50:	4619      	mov	r1, r3
   83e52:	6938      	ldr	r0, [r7, #16]
   83e54:	4b10      	ldr	r3, [pc, #64]	; (83e98 <dir_find+0x168>)
   83e56:	4798      	blx	r3
   83e58:	4603      	mov	r3, r0
   83e5a:	2b00      	cmp	r3, #0
   83e5c:	d00e      	beq.n	83e7c <dir_find+0x14c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   83e5e:	2100      	movs	r1, #0
   83e60:	6878      	ldr	r0, [r7, #4]
   83e62:	4b0e      	ldr	r3, [pc, #56]	; (83e9c <dir_find+0x16c>)
   83e64:	4798      	blx	r3
   83e66:	4603      	mov	r3, r0
   83e68:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
   83e6a:	7dfb      	ldrb	r3, [r7, #23]
   83e6c:	2b00      	cmp	r3, #0
   83e6e:	f43f af72 	beq.w	83d56 <dir_find+0x26>
   83e72:	e004      	b.n	83e7e <dir_find+0x14e>
		if (res != FR_OK) break;
   83e74:	bf00      	nop
   83e76:	e002      	b.n	83e7e <dir_find+0x14e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   83e78:	bf00      	nop
   83e7a:	e000      	b.n	83e7e <dir_find+0x14e>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   83e7c:	bf00      	nop

	return res;
   83e7e:	7dfb      	ldrb	r3, [r7, #23]
}
   83e80:	4618      	mov	r0, r3
   83e82:	3718      	adds	r7, #24
   83e84:	46bd      	mov	sp, r7
   83e86:	bd80      	pop	{r7, pc}
   83e88:	00083779 	.word	0x00083779
   83e8c:	00083001 	.word	0x00083001
   83e90:	00083a41 	.word	0x00083a41
   83e94:	00083cf1 	.word	0x00083cf1
   83e98:	00082f81 	.word	0x00082f81
   83e9c:	00083885 	.word	0x00083885

00083ea0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   83ea0:	b590      	push	{r4, r7, lr}
   83ea2:	b08d      	sub	sp, #52	; 0x34
   83ea4:	af00      	add	r7, sp, #0
   83ea6:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   83ea8:	687b      	ldr	r3, [r7, #4]
   83eaa:	699b      	ldr	r3, [r3, #24]
   83eac:	627b      	str	r3, [r7, #36]	; 0x24
   83eae:	687b      	ldr	r3, [r7, #4]
   83eb0:	69db      	ldr	r3, [r3, #28]
   83eb2:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   83eb4:	f107 030c 	add.w	r3, r7, #12
   83eb8:	220c      	movs	r2, #12
   83eba:	6a79      	ldr	r1, [r7, #36]	; 0x24
   83ebc:	4618      	mov	r0, r3
   83ebe:	4b92      	ldr	r3, [pc, #584]	; (84108 <dir_register+0x268>)
   83ec0:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   83ec2:	7dfb      	ldrb	r3, [r7, #23]
   83ec4:	f003 0301 	and.w	r3, r3, #1
   83ec8:	2b00      	cmp	r3, #0
   83eca:	d035      	beq.n	83f38 <dir_register+0x98>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   83ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83ece:	330b      	adds	r3, #11
   83ed0:	2200      	movs	r2, #0
   83ed2:	701a      	strb	r2, [r3, #0]
   83ed4:	687b      	ldr	r3, [r7, #4]
   83ed6:	2200      	movs	r2, #0
   83ed8:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   83eda:	2301      	movs	r3, #1
   83edc:	85bb      	strh	r3, [r7, #44]	; 0x2c
   83ede:	e013      	b.n	83f08 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   83ee0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   83ee2:	f107 010c 	add.w	r1, r7, #12
   83ee6:	6a3a      	ldr	r2, [r7, #32]
   83ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   83eea:	4c88      	ldr	r4, [pc, #544]	; (8410c <dir_register+0x26c>)
   83eec:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   83eee:	6878      	ldr	r0, [r7, #4]
   83ef0:	4b87      	ldr	r3, [pc, #540]	; (84110 <dir_register+0x270>)
   83ef2:	4798      	blx	r3
   83ef4:	4603      	mov	r3, r0
   83ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
   83efa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   83efe:	2b00      	cmp	r3, #0
   83f00:	d106      	bne.n	83f10 <dir_register+0x70>
		for (n = 1; n < 100; n++) {
   83f02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   83f04:	3301      	adds	r3, #1
   83f06:	85bb      	strh	r3, [r7, #44]	; 0x2c
   83f08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   83f0a:	2b63      	cmp	r3, #99	; 0x63
   83f0c:	d9e8      	bls.n	83ee0 <dir_register+0x40>
   83f0e:	e000      	b.n	83f12 <dir_register+0x72>
			if (res != FR_OK) break;
   83f10:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   83f12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   83f14:	2b64      	cmp	r3, #100	; 0x64
   83f16:	d101      	bne.n	83f1c <dir_register+0x7c>
   83f18:	2307      	movs	r3, #7
   83f1a:	e0f1      	b.n	84100 <dir_register+0x260>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   83f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   83f20:	2b04      	cmp	r3, #4
   83f22:	d002      	beq.n	83f2a <dir_register+0x8a>
   83f24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   83f28:	e0ea      	b.n	84100 <dir_register+0x260>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   83f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83f2c:	330b      	adds	r3, #11
   83f2e:	7dfa      	ldrb	r2, [r7, #23]
   83f30:	701a      	strb	r2, [r3, #0]
   83f32:	687b      	ldr	r3, [r7, #4]
   83f34:	6a3a      	ldr	r2, [r7, #32]
   83f36:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   83f38:	7dfb      	ldrb	r3, [r7, #23]
   83f3a:	f003 0302 	and.w	r3, r3, #2
   83f3e:	2b00      	cmp	r3, #0
   83f40:	d016      	beq.n	83f70 <dir_register+0xd0>
		for (ne = 0; lfn[ne]; ne++) ;
   83f42:	2300      	movs	r3, #0
   83f44:	857b      	strh	r3, [r7, #42]	; 0x2a
   83f46:	e002      	b.n	83f4e <dir_register+0xae>
   83f48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   83f4a:	3301      	adds	r3, #1
   83f4c:	857b      	strh	r3, [r7, #42]	; 0x2a
   83f4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   83f50:	005b      	lsls	r3, r3, #1
   83f52:	6a3a      	ldr	r2, [r7, #32]
   83f54:	4413      	add	r3, r2
   83f56:	881b      	ldrh	r3, [r3, #0]
   83f58:	2b00      	cmp	r3, #0
   83f5a:	d1f5      	bne.n	83f48 <dir_register+0xa8>
		ne = (ne + 25) / 13;
   83f5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   83f5e:	3319      	adds	r3, #25
   83f60:	4a6c      	ldr	r2, [pc, #432]	; (84114 <dir_register+0x274>)
   83f62:	fb82 1203 	smull	r1, r2, r2, r3
   83f66:	1092      	asrs	r2, r2, #2
   83f68:	17db      	asrs	r3, r3, #31
   83f6a:	1ad3      	subs	r3, r2, r3
   83f6c:	857b      	strh	r3, [r7, #42]	; 0x2a
   83f6e:	e001      	b.n	83f74 <dir_register+0xd4>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   83f70:	2301      	movs	r3, #1
   83f72:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   83f74:	2100      	movs	r1, #0
   83f76:	6878      	ldr	r0, [r7, #4]
   83f78:	4b67      	ldr	r3, [pc, #412]	; (84118 <dir_register+0x278>)
   83f7a:	4798      	blx	r3
   83f7c:	4603      	mov	r3, r0
   83f7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK) return res;
   83f82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   83f86:	2b00      	cmp	r3, #0
   83f88:	d002      	beq.n	83f90 <dir_register+0xf0>
   83f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   83f8e:	e0b7      	b.n	84100 <dir_register+0x260>
	n = is = 0;
   83f90:	2300      	movs	r3, #0
   83f92:	853b      	strh	r3, [r7, #40]	; 0x28
   83f94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   83f96:	85bb      	strh	r3, [r7, #44]	; 0x2c
	do {
		res = move_window(dj->fs, dj->sect);
   83f98:	687b      	ldr	r3, [r7, #4]
   83f9a:	681a      	ldr	r2, [r3, #0]
   83f9c:	687b      	ldr	r3, [r7, #4]
   83f9e:	691b      	ldr	r3, [r3, #16]
   83fa0:	4619      	mov	r1, r3
   83fa2:	4610      	mov	r0, r2
   83fa4:	4b5d      	ldr	r3, [pc, #372]	; (8411c <dir_register+0x27c>)
   83fa6:	4798      	blx	r3
   83fa8:	4603      	mov	r3, r0
   83faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res != FR_OK) break;
   83fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   83fb2:	2b00      	cmp	r3, #0
   83fb4:	d125      	bne.n	84002 <dir_register+0x162>
		c = *dj->dir;				/* Check the entry status */
   83fb6:	687b      	ldr	r3, [r7, #4]
   83fb8:	695b      	ldr	r3, [r3, #20]
   83fba:	781b      	ldrb	r3, [r3, #0]
   83fbc:	77fb      	strb	r3, [r7, #31]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   83fbe:	7ffb      	ldrb	r3, [r7, #31]
   83fc0:	2be5      	cmp	r3, #229	; 0xe5
   83fc2:	d002      	beq.n	83fca <dir_register+0x12a>
   83fc4:	7ffb      	ldrb	r3, [r7, #31]
   83fc6:	2b00      	cmp	r3, #0
   83fc8:	d10d      	bne.n	83fe6 <dir_register+0x146>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   83fca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   83fcc:	2b00      	cmp	r3, #0
   83fce:	d102      	bne.n	83fd6 <dir_register+0x136>
   83fd0:	687b      	ldr	r3, [r7, #4]
   83fd2:	88db      	ldrh	r3, [r3, #6]
   83fd4:	853b      	strh	r3, [r7, #40]	; 0x28
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   83fd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   83fd8:	3301      	adds	r3, #1
   83fda:	85bb      	strh	r3, [r7, #44]	; 0x2c
   83fdc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   83fde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   83fe0:	429a      	cmp	r2, r3
   83fe2:	d102      	bne.n	83fea <dir_register+0x14a>
   83fe4:	e00e      	b.n	84004 <dir_register+0x164>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   83fe6:	2300      	movs	r3, #0
   83fe8:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   83fea:	2101      	movs	r1, #1
   83fec:	6878      	ldr	r0, [r7, #4]
   83fee:	4b4c      	ldr	r3, [pc, #304]	; (84120 <dir_register+0x280>)
   83ff0:	4798      	blx	r3
   83ff2:	4603      	mov	r3, r0
   83ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	} while (res == FR_OK);
   83ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   83ffc:	2b00      	cmp	r3, #0
   83ffe:	d0cb      	beq.n	83f98 <dir_register+0xf8>
   84000:	e000      	b.n	84004 <dir_register+0x164>
		if (res != FR_OK) break;
   84002:	bf00      	nop

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   84004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   84008:	2b00      	cmp	r3, #0
   8400a:	d147      	bne.n	8409c <dir_register+0x1fc>
   8400c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   8400e:	2b01      	cmp	r3, #1
   84010:	d944      	bls.n	8409c <dir_register+0x1fc>
		res = dir_sdi(dj, is);
   84012:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   84014:	4619      	mov	r1, r3
   84016:	6878      	ldr	r0, [r7, #4]
   84018:	4b3f      	ldr	r3, [pc, #252]	; (84118 <dir_register+0x278>)
   8401a:	4798      	blx	r3
   8401c:	4603      	mov	r3, r0
   8401e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
   84022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   84026:	2b00      	cmp	r3, #0
   84028:	d138      	bne.n	8409c <dir_register+0x1fc>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   8402a:	687b      	ldr	r3, [r7, #4]
   8402c:	699b      	ldr	r3, [r3, #24]
   8402e:	4618      	mov	r0, r3
   84030:	4b3c      	ldr	r3, [pc, #240]	; (84124 <dir_register+0x284>)
   84032:	4798      	blx	r3
   84034:	4603      	mov	r3, r0
   84036:	77bb      	strb	r3, [r7, #30]
			ne--;
   84038:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   8403a:	3b01      	subs	r3, #1
   8403c:	857b      	strh	r3, [r7, #42]	; 0x2a
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   8403e:	687b      	ldr	r3, [r7, #4]
   84040:	681a      	ldr	r2, [r3, #0]
   84042:	687b      	ldr	r3, [r7, #4]
   84044:	691b      	ldr	r3, [r3, #16]
   84046:	4619      	mov	r1, r3
   84048:	4610      	mov	r0, r2
   8404a:	4b34      	ldr	r3, [pc, #208]	; (8411c <dir_register+0x27c>)
   8404c:	4798      	blx	r3
   8404e:	4603      	mov	r3, r0
   84050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
   84054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   84058:	2b00      	cmp	r3, #0
   8405a:	d11e      	bne.n	8409a <dir_register+0x1fa>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   8405c:	687b      	ldr	r3, [r7, #4]
   8405e:	69d8      	ldr	r0, [r3, #28]
   84060:	687b      	ldr	r3, [r7, #4]
   84062:	6959      	ldr	r1, [r3, #20]
   84064:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   84066:	b2da      	uxtb	r2, r3
   84068:	7fbb      	ldrb	r3, [r7, #30]
   8406a:	4c2f      	ldr	r4, [pc, #188]	; (84128 <dir_register+0x288>)
   8406c:	47a0      	blx	r4
				dj->fs->wflag = 1;
   8406e:	687b      	ldr	r3, [r7, #4]
   84070:	681b      	ldr	r3, [r3, #0]
   84072:	2201      	movs	r2, #1
   84074:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   84076:	2100      	movs	r1, #0
   84078:	6878      	ldr	r0, [r7, #4]
   8407a:	4b29      	ldr	r3, [pc, #164]	; (84120 <dir_register+0x280>)
   8407c:	4798      	blx	r3
   8407e:	4603      	mov	r3, r0
   84080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --ne);
   84084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   84088:	2b00      	cmp	r3, #0
   8408a:	d107      	bne.n	8409c <dir_register+0x1fc>
   8408c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   8408e:	3b01      	subs	r3, #1
   84090:	857b      	strh	r3, [r7, #42]	; 0x2a
   84092:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   84094:	2b00      	cmp	r3, #0
   84096:	d1d2      	bne.n	8403e <dir_register+0x19e>
   84098:	e000      	b.n	8409c <dir_register+0x1fc>
				if (res != FR_OK) break;
   8409a:	bf00      	nop
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   8409c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   840a0:	2b00      	cmp	r3, #0
   840a2:	d12b      	bne.n	840fc <dir_register+0x25c>
		res = move_window(dj->fs, dj->sect);
   840a4:	687b      	ldr	r3, [r7, #4]
   840a6:	681a      	ldr	r2, [r3, #0]
   840a8:	687b      	ldr	r3, [r7, #4]
   840aa:	691b      	ldr	r3, [r3, #16]
   840ac:	4619      	mov	r1, r3
   840ae:	4610      	mov	r0, r2
   840b0:	4b1a      	ldr	r3, [pc, #104]	; (8411c <dir_register+0x27c>)
   840b2:	4798      	blx	r3
   840b4:	4603      	mov	r3, r0
   840b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
   840ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   840be:	2b00      	cmp	r3, #0
   840c0:	d11c      	bne.n	840fc <dir_register+0x25c>
			dir = dj->dir;
   840c2:	687b      	ldr	r3, [r7, #4]
   840c4:	695b      	ldr	r3, [r3, #20]
   840c6:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   840c8:	2220      	movs	r2, #32
   840ca:	2100      	movs	r1, #0
   840cc:	69b8      	ldr	r0, [r7, #24]
   840ce:	4b17      	ldr	r3, [pc, #92]	; (8412c <dir_register+0x28c>)
   840d0:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   840d2:	687b      	ldr	r3, [r7, #4]
   840d4:	699b      	ldr	r3, [r3, #24]
   840d6:	220b      	movs	r2, #11
   840d8:	4619      	mov	r1, r3
   840da:	69b8      	ldr	r0, [r7, #24]
   840dc:	4b0a      	ldr	r3, [pc, #40]	; (84108 <dir_register+0x268>)
   840de:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   840e0:	69bb      	ldr	r3, [r7, #24]
   840e2:	330c      	adds	r3, #12
   840e4:	687a      	ldr	r2, [r7, #4]
   840e6:	6992      	ldr	r2, [r2, #24]
   840e8:	320b      	adds	r2, #11
   840ea:	7812      	ldrb	r2, [r2, #0]
   840ec:	f002 0218 	and.w	r2, r2, #24
   840f0:	b2d2      	uxtb	r2, r2
   840f2:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
   840f4:	687b      	ldr	r3, [r7, #4]
   840f6:	681b      	ldr	r3, [r3, #0]
   840f8:	2201      	movs	r2, #1
   840fa:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   840fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
   84100:	4618      	mov	r0, r3
   84102:	3734      	adds	r7, #52	; 0x34
   84104:	46bd      	mov	sp, r7
   84106:	bd90      	pop	{r4, r7, pc}
   84108:	00082f15 	.word	0x00082f15
   8410c:	00083c09 	.word	0x00083c09
   84110:	00083d31 	.word	0x00083d31
   84114:	4ec4ec4f 	.word	0x4ec4ec4f
   84118:	00083779 	.word	0x00083779
   8411c:	00083001 	.word	0x00083001
   84120:	00083885 	.word	0x00083885
   84124:	00083cf1 	.word	0x00083cf1
   84128:	00083b21 	.word	0x00083b21
   8412c:	00082f4f 	.word	0x00082f4f

00084130 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   84130:	b580      	push	{r7, lr}
   84132:	b08a      	sub	sp, #40	; 0x28
   84134:	af00      	add	r7, sp, #0
   84136:	6078      	str	r0, [r7, #4]
   84138:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   8413a:	683b      	ldr	r3, [r7, #0]
   8413c:	681b      	ldr	r3, [r3, #0]
   8413e:	613b      	str	r3, [r7, #16]
   84140:	e002      	b.n	84148 <create_name+0x18>
   84142:	693b      	ldr	r3, [r7, #16]
   84144:	3301      	adds	r3, #1
   84146:	613b      	str	r3, [r7, #16]
   84148:	693b      	ldr	r3, [r7, #16]
   8414a:	781b      	ldrb	r3, [r3, #0]
   8414c:	2b2f      	cmp	r3, #47	; 0x2f
   8414e:	d0f8      	beq.n	84142 <create_name+0x12>
   84150:	693b      	ldr	r3, [r7, #16]
   84152:	781b      	ldrb	r3, [r3, #0]
   84154:	2b5c      	cmp	r3, #92	; 0x5c
   84156:	d0f4      	beq.n	84142 <create_name+0x12>
	lfn = dj->lfn;
   84158:	687b      	ldr	r3, [r7, #4]
   8415a:	69db      	ldr	r3, [r3, #28]
   8415c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   8415e:	2300      	movs	r3, #0
   84160:	617b      	str	r3, [r7, #20]
   84162:	697b      	ldr	r3, [r7, #20]
   84164:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   84166:	69bb      	ldr	r3, [r7, #24]
   84168:	1c5a      	adds	r2, r3, #1
   8416a:	61ba      	str	r2, [r7, #24]
   8416c:	693a      	ldr	r2, [r7, #16]
   8416e:	4413      	add	r3, r2
   84170:	781b      	ldrb	r3, [r3, #0]
   84172:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   84174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   84176:	2b1f      	cmp	r3, #31
   84178:	d92f      	bls.n	841da <create_name+0xaa>
   8417a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8417c:	2b2f      	cmp	r3, #47	; 0x2f
   8417e:	d02c      	beq.n	841da <create_name+0xaa>
   84180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   84182:	2b5c      	cmp	r3, #92	; 0x5c
   84184:	d029      	beq.n	841da <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
   84186:	697b      	ldr	r3, [r7, #20]
   84188:	2bfe      	cmp	r3, #254	; 0xfe
   8418a:	d901      	bls.n	84190 <create_name+0x60>
			return FR_INVALID_NAME;
   8418c:	2306      	movs	r3, #6
   8418e:	e182      	b.n	84496 <create_name+0x366>
#if !_LFN_UNICODE
		w &= 0xFF;
   84190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   84192:	b2db      	uxtb	r3, r3
   84194:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   84196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   84198:	2101      	movs	r1, #1
   8419a:	4618      	mov	r0, r3
   8419c:	4b93      	ldr	r3, [pc, #588]	; (843ec <create_name+0x2bc>)
   8419e:	4798      	blx	r3
   841a0:	4603      	mov	r3, r0
   841a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   841a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   841a6:	2b00      	cmp	r3, #0
   841a8:	d101      	bne.n	841ae <create_name+0x7e>
   841aa:	2306      	movs	r3, #6
   841ac:	e173      	b.n	84496 <create_name+0x366>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   841ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   841b0:	2b7f      	cmp	r3, #127	; 0x7f
   841b2:	d809      	bhi.n	841c8 <create_name+0x98>
   841b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   841b6:	4619      	mov	r1, r3
   841b8:	488d      	ldr	r0, [pc, #564]	; (843f0 <create_name+0x2c0>)
   841ba:	4b8e      	ldr	r3, [pc, #568]	; (843f4 <create_name+0x2c4>)
   841bc:	4798      	blx	r3
   841be:	4603      	mov	r3, r0
   841c0:	2b00      	cmp	r3, #0
   841c2:	d001      	beq.n	841c8 <create_name+0x98>
			return FR_INVALID_NAME;
   841c4:	2306      	movs	r3, #6
   841c6:	e166      	b.n	84496 <create_name+0x366>
		lfn[di++] = w;					/* Store the Unicode char */
   841c8:	697b      	ldr	r3, [r7, #20]
   841ca:	1c5a      	adds	r2, r3, #1
   841cc:	617a      	str	r2, [r7, #20]
   841ce:	005b      	lsls	r3, r3, #1
   841d0:	68fa      	ldr	r2, [r7, #12]
   841d2:	4413      	add	r3, r2
   841d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   841d6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   841d8:	e7c5      	b.n	84166 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   841da:	693a      	ldr	r2, [r7, #16]
   841dc:	69bb      	ldr	r3, [r7, #24]
   841de:	441a      	add	r2, r3
   841e0:	683b      	ldr	r3, [r7, #0]
   841e2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   841e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   841e6:	2b1f      	cmp	r3, #31
   841e8:	d801      	bhi.n	841ee <create_name+0xbe>
   841ea:	2304      	movs	r3, #4
   841ec:	e000      	b.n	841f0 <create_name+0xc0>
   841ee:	2300      	movs	r3, #0
   841f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   841f4:	e011      	b.n	8421a <create_name+0xea>
		w = lfn[di-1];
   841f6:	697b      	ldr	r3, [r7, #20]
   841f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   841fc:	3b01      	subs	r3, #1
   841fe:	005b      	lsls	r3, r3, #1
   84200:	68fa      	ldr	r2, [r7, #12]
   84202:	4413      	add	r3, r2
   84204:	881b      	ldrh	r3, [r3, #0]
   84206:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
   84208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8420a:	2b20      	cmp	r3, #32
   8420c:	d002      	beq.n	84214 <create_name+0xe4>
   8420e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   84210:	2b2e      	cmp	r3, #46	; 0x2e
   84212:	d106      	bne.n	84222 <create_name+0xf2>
		di--;
   84214:	697b      	ldr	r3, [r7, #20]
   84216:	3b01      	subs	r3, #1
   84218:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   8421a:	697b      	ldr	r3, [r7, #20]
   8421c:	2b00      	cmp	r3, #0
   8421e:	d1ea      	bne.n	841f6 <create_name+0xc6>
   84220:	e000      	b.n	84224 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
   84222:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   84224:	697b      	ldr	r3, [r7, #20]
   84226:	2b00      	cmp	r3, #0
   84228:	d101      	bne.n	8422e <create_name+0xfe>
   8422a:	2306      	movs	r3, #6
   8422c:	e133      	b.n	84496 <create_name+0x366>

	lfn[di] = 0;						/* LFN is created */
   8422e:	697b      	ldr	r3, [r7, #20]
   84230:	005b      	lsls	r3, r3, #1
   84232:	68fa      	ldr	r2, [r7, #12]
   84234:	4413      	add	r3, r2
   84236:	2200      	movs	r2, #0
   84238:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   8423a:	687b      	ldr	r3, [r7, #4]
   8423c:	699b      	ldr	r3, [r3, #24]
   8423e:	220b      	movs	r2, #11
   84240:	2120      	movs	r1, #32
   84242:	4618      	mov	r0, r3
   84244:	4b6c      	ldr	r3, [pc, #432]	; (843f8 <create_name+0x2c8>)
   84246:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   84248:	2300      	movs	r3, #0
   8424a:	61bb      	str	r3, [r7, #24]
   8424c:	e002      	b.n	84254 <create_name+0x124>
   8424e:	69bb      	ldr	r3, [r7, #24]
   84250:	3301      	adds	r3, #1
   84252:	61bb      	str	r3, [r7, #24]
   84254:	69bb      	ldr	r3, [r7, #24]
   84256:	005b      	lsls	r3, r3, #1
   84258:	68fa      	ldr	r2, [r7, #12]
   8425a:	4413      	add	r3, r2
   8425c:	881b      	ldrh	r3, [r3, #0]
   8425e:	2b20      	cmp	r3, #32
   84260:	d0f5      	beq.n	8424e <create_name+0x11e>
   84262:	69bb      	ldr	r3, [r7, #24]
   84264:	005b      	lsls	r3, r3, #1
   84266:	68fa      	ldr	r2, [r7, #12]
   84268:	4413      	add	r3, r2
   8426a:	881b      	ldrh	r3, [r3, #0]
   8426c:	2b2e      	cmp	r3, #46	; 0x2e
   8426e:	d0ee      	beq.n	8424e <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
   84270:	69bb      	ldr	r3, [r7, #24]
   84272:	2b00      	cmp	r3, #0
   84274:	d009      	beq.n	8428a <create_name+0x15a>
   84276:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8427a:	f043 0303 	orr.w	r3, r3, #3
   8427e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   84282:	e002      	b.n	8428a <create_name+0x15a>
   84284:	697b      	ldr	r3, [r7, #20]
   84286:	3b01      	subs	r3, #1
   84288:	617b      	str	r3, [r7, #20]
   8428a:	697b      	ldr	r3, [r7, #20]
   8428c:	2b00      	cmp	r3, #0
   8428e:	d009      	beq.n	842a4 <create_name+0x174>
   84290:	697b      	ldr	r3, [r7, #20]
   84292:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   84296:	3b01      	subs	r3, #1
   84298:	005b      	lsls	r3, r3, #1
   8429a:	68fa      	ldr	r2, [r7, #12]
   8429c:	4413      	add	r3, r2
   8429e:	881b      	ldrh	r3, [r3, #0]
   842a0:	2b2e      	cmp	r3, #46	; 0x2e
   842a2:	d1ef      	bne.n	84284 <create_name+0x154>

	b = i = 0; ni = 8;
   842a4:	2300      	movs	r3, #0
   842a6:	623b      	str	r3, [r7, #32]
   842a8:	2300      	movs	r3, #0
   842aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   842ae:	2308      	movs	r3, #8
   842b0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   842b2:	69bb      	ldr	r3, [r7, #24]
   842b4:	1c5a      	adds	r2, r3, #1
   842b6:	61ba      	str	r2, [r7, #24]
   842b8:	005b      	lsls	r3, r3, #1
   842ba:	68fa      	ldr	r2, [r7, #12]
   842bc:	4413      	add	r3, r2
   842be:	881b      	ldrh	r3, [r3, #0]
   842c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
   842c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   842c4:	2b00      	cmp	r3, #0
   842c6:	f000 808f 	beq.w	843e8 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   842ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   842cc:	2b20      	cmp	r3, #32
   842ce:	d006      	beq.n	842de <create_name+0x1ae>
   842d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   842d2:	2b2e      	cmp	r3, #46	; 0x2e
   842d4:	d10a      	bne.n	842ec <create_name+0x1bc>
   842d6:	69ba      	ldr	r2, [r7, #24]
   842d8:	697b      	ldr	r3, [r7, #20]
   842da:	429a      	cmp	r2, r3
   842dc:	d006      	beq.n	842ec <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
   842de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   842e2:	f043 0303 	orr.w	r3, r3, #3
   842e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   842ea:	e07c      	b.n	843e6 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   842ec:	6a3a      	ldr	r2, [r7, #32]
   842ee:	69fb      	ldr	r3, [r7, #28]
   842f0:	429a      	cmp	r2, r3
   842f2:	d203      	bcs.n	842fc <create_name+0x1cc>
   842f4:	69ba      	ldr	r2, [r7, #24]
   842f6:	697b      	ldr	r3, [r7, #20]
   842f8:	429a      	cmp	r2, r3
   842fa:	d123      	bne.n	84344 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
   842fc:	69fb      	ldr	r3, [r7, #28]
   842fe:	2b0b      	cmp	r3, #11
   84300:	d106      	bne.n	84310 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
   84302:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   84306:	f043 0303 	orr.w	r3, r3, #3
   8430a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   8430e:	e07a      	b.n	84406 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   84310:	69ba      	ldr	r2, [r7, #24]
   84312:	697b      	ldr	r3, [r7, #20]
   84314:	429a      	cmp	r2, r3
   84316:	d005      	beq.n	84324 <create_name+0x1f4>
   84318:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8431c:	f043 0303 	orr.w	r3, r3, #3
   84320:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
   84324:	69ba      	ldr	r2, [r7, #24]
   84326:	697b      	ldr	r3, [r7, #20]
   84328:	429a      	cmp	r2, r3
   8432a:	d86b      	bhi.n	84404 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   8432c:	697b      	ldr	r3, [r7, #20]
   8432e:	61bb      	str	r3, [r7, #24]
   84330:	2308      	movs	r3, #8
   84332:	623b      	str	r3, [r7, #32]
   84334:	230b      	movs	r3, #11
   84336:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   84338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   8433c:	009b      	lsls	r3, r3, #2
   8433e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   84342:	e050      	b.n	843e6 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   84344:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   84346:	2b7f      	cmp	r3, #127	; 0x7f
   84348:	d914      	bls.n	84374 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   8434a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8434c:	2100      	movs	r1, #0
   8434e:	4618      	mov	r0, r3
   84350:	4b26      	ldr	r3, [pc, #152]	; (843ec <create_name+0x2bc>)
   84352:	4798      	blx	r3
   84354:	4603      	mov	r3, r0
   84356:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   84358:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8435a:	2b00      	cmp	r3, #0
   8435c:	d004      	beq.n	84368 <create_name+0x238>
   8435e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   84360:	3b80      	subs	r3, #128	; 0x80
   84362:	4a26      	ldr	r2, [pc, #152]	; (843fc <create_name+0x2cc>)
   84364:	5cd3      	ldrb	r3, [r2, r3]
   84366:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   84368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8436c:	f043 0302 	orr.w	r3, r3, #2
   84370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   84374:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   84376:	2b00      	cmp	r3, #0
   84378:	d007      	beq.n	8438a <create_name+0x25a>
   8437a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8437c:	4619      	mov	r1, r3
   8437e:	4820      	ldr	r0, [pc, #128]	; (84400 <create_name+0x2d0>)
   84380:	4b1c      	ldr	r3, [pc, #112]	; (843f4 <create_name+0x2c4>)
   84382:	4798      	blx	r3
   84384:	4603      	mov	r3, r0
   84386:	2b00      	cmp	r3, #0
   84388:	d008      	beq.n	8439c <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   8438a:	235f      	movs	r3, #95	; 0x5f
   8438c:	84bb      	strh	r3, [r7, #36]	; 0x24
   8438e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   84392:	f043 0303 	orr.w	r3, r3, #3
   84396:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   8439a:	e01b      	b.n	843d4 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   8439c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8439e:	2b40      	cmp	r3, #64	; 0x40
   843a0:	d909      	bls.n	843b6 <create_name+0x286>
   843a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   843a4:	2b5a      	cmp	r3, #90	; 0x5a
   843a6:	d806      	bhi.n	843b6 <create_name+0x286>
					b |= 2;
   843a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   843ac:	f043 0302 	orr.w	r3, r3, #2
   843b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   843b4:	e00e      	b.n	843d4 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   843b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   843b8:	2b60      	cmp	r3, #96	; 0x60
   843ba:	d90b      	bls.n	843d4 <create_name+0x2a4>
   843bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   843be:	2b7a      	cmp	r3, #122	; 0x7a
   843c0:	d808      	bhi.n	843d4 <create_name+0x2a4>
						b |= 1; w -= 0x20;
   843c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   843c6:	f043 0301 	orr.w	r3, r3, #1
   843ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   843ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   843d0:	3b20      	subs	r3, #32
   843d2:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   843d4:	687b      	ldr	r3, [r7, #4]
   843d6:	699a      	ldr	r2, [r3, #24]
   843d8:	6a3b      	ldr	r3, [r7, #32]
   843da:	1c59      	adds	r1, r3, #1
   843dc:	6239      	str	r1, [r7, #32]
   843de:	4413      	add	r3, r2
   843e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   843e2:	b2d2      	uxtb	r2, r2
   843e4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   843e6:	e764      	b.n	842b2 <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
   843e8:	bf00      	nop
   843ea:	e00c      	b.n	84406 <create_name+0x2d6>
   843ec:	00085511 	.word	0x00085511
   843f0:	0008781c 	.word	0x0008781c
   843f4:	00082fcd 	.word	0x00082fcd
   843f8:	00082f4f 	.word	0x00082f4f
   843fc:	00087830 	.word	0x00087830
   84400:	00087828 	.word	0x00087828
			if (si > di) break;			/* No extension */
   84404:	bf00      	nop
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   84406:	687b      	ldr	r3, [r7, #4]
   84408:	699b      	ldr	r3, [r3, #24]
   8440a:	781b      	ldrb	r3, [r3, #0]
   8440c:	2be5      	cmp	r3, #229	; 0xe5
   8440e:	d103      	bne.n	84418 <create_name+0x2e8>
   84410:	687b      	ldr	r3, [r7, #4]
   84412:	699b      	ldr	r3, [r3, #24]
   84414:	2205      	movs	r2, #5
   84416:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   84418:	69fb      	ldr	r3, [r7, #28]
   8441a:	2b08      	cmp	r3, #8
   8441c:	d104      	bne.n	84428 <create_name+0x2f8>
   8441e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   84422:	009b      	lsls	r3, r3, #2
   84424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   84428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   8442c:	f003 030c 	and.w	r3, r3, #12
   84430:	2b0c      	cmp	r3, #12
   84432:	d005      	beq.n	84440 <create_name+0x310>
   84434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   84438:	f003 0303 	and.w	r3, r3, #3
   8443c:	2b03      	cmp	r3, #3
   8443e:	d105      	bne.n	8444c <create_name+0x31c>
		cf |= NS_LFN;
   84440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   84444:	f043 0302 	orr.w	r3, r3, #2
   84448:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   8444c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   84450:	f003 0302 	and.w	r3, r3, #2
   84454:	2b00      	cmp	r3, #0
   84456:	d117      	bne.n	84488 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   84458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   8445c:	f003 0303 	and.w	r3, r3, #3
   84460:	2b01      	cmp	r3, #1
   84462:	d105      	bne.n	84470 <create_name+0x340>
   84464:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   84468:	f043 0310 	orr.w	r3, r3, #16
   8446c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   84470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   84474:	f003 030c 	and.w	r3, r3, #12
   84478:	2b04      	cmp	r3, #4
   8447a:	d105      	bne.n	84488 <create_name+0x358>
   8447c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   84480:	f043 0308 	orr.w	r3, r3, #8
   84484:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dj->fn[NS] = cf;	/* SFN is created */
   84488:	687b      	ldr	r3, [r7, #4]
   8448a:	699b      	ldr	r3, [r3, #24]
   8448c:	330b      	adds	r3, #11
   8448e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   84492:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   84494:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   84496:	4618      	mov	r0, r3
   84498:	3728      	adds	r7, #40	; 0x28
   8449a:	46bd      	mov	sp, r7
   8449c:	bd80      	pop	{r7, pc}
   8449e:	bf00      	nop

000844a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   844a0:	b580      	push	{r7, lr}
   844a2:	b084      	sub	sp, #16
   844a4:	af00      	add	r7, sp, #0
   844a6:	6078      	str	r0, [r7, #4]
   844a8:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   844aa:	683b      	ldr	r3, [r7, #0]
   844ac:	781b      	ldrb	r3, [r3, #0]
   844ae:	2b2f      	cmp	r3, #47	; 0x2f
   844b0:	d003      	beq.n	844ba <follow_path+0x1a>
   844b2:	683b      	ldr	r3, [r7, #0]
   844b4:	781b      	ldrb	r3, [r3, #0]
   844b6:	2b5c      	cmp	r3, #92	; 0x5c
   844b8:	d102      	bne.n	844c0 <follow_path+0x20>
		path++;
   844ba:	683b      	ldr	r3, [r7, #0]
   844bc:	3301      	adds	r3, #1
   844be:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   844c0:	687b      	ldr	r3, [r7, #4]
   844c2:	2200      	movs	r2, #0
   844c4:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   844c6:	683b      	ldr	r3, [r7, #0]
   844c8:	781b      	ldrb	r3, [r3, #0]
   844ca:	2b1f      	cmp	r3, #31
   844cc:	d809      	bhi.n	844e2 <follow_path+0x42>
		res = dir_sdi(dj, 0);
   844ce:	2100      	movs	r1, #0
   844d0:	6878      	ldr	r0, [r7, #4]
   844d2:	4b32      	ldr	r3, [pc, #200]	; (8459c <follow_path+0xfc>)
   844d4:	4798      	blx	r3
   844d6:	4603      	mov	r3, r0
   844d8:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
   844da:	687b      	ldr	r3, [r7, #4]
   844dc:	2200      	movs	r2, #0
   844de:	615a      	str	r2, [r3, #20]
   844e0:	e056      	b.n	84590 <follow_path+0xf0>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   844e2:	463b      	mov	r3, r7
   844e4:	4619      	mov	r1, r3
   844e6:	6878      	ldr	r0, [r7, #4]
   844e8:	4b2d      	ldr	r3, [pc, #180]	; (845a0 <follow_path+0x100>)
   844ea:	4798      	blx	r3
   844ec:	4603      	mov	r3, r0
   844ee:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
   844f0:	7bfb      	ldrb	r3, [r7, #15]
   844f2:	2b00      	cmp	r3, #0
   844f4:	d145      	bne.n	84582 <follow_path+0xe2>
			res = dir_find(dj);				/* Find it */
   844f6:	6878      	ldr	r0, [r7, #4]
   844f8:	4b2a      	ldr	r3, [pc, #168]	; (845a4 <follow_path+0x104>)
   844fa:	4798      	blx	r3
   844fc:	4603      	mov	r3, r0
   844fe:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
   84500:	687b      	ldr	r3, [r7, #4]
   84502:	699b      	ldr	r3, [r3, #24]
   84504:	7adb      	ldrb	r3, [r3, #11]
   84506:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
   84508:	7bfb      	ldrb	r3, [r7, #15]
   8450a:	2b00      	cmp	r3, #0
   8450c:	d00a      	beq.n	84524 <follow_path+0x84>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   8450e:	7bfb      	ldrb	r3, [r7, #15]
   84510:	2b04      	cmp	r3, #4
   84512:	d138      	bne.n	84586 <follow_path+0xe6>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   84514:	7bbb      	ldrb	r3, [r7, #14]
   84516:	f003 0304 	and.w	r3, r3, #4
   8451a:	2b00      	cmp	r3, #0
   8451c:	d135      	bne.n	8458a <follow_path+0xea>
   8451e:	2305      	movs	r3, #5
   84520:	73fb      	strb	r3, [r7, #15]
				}
				break;
   84522:	e032      	b.n	8458a <follow_path+0xea>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   84524:	7bbb      	ldrb	r3, [r7, #14]
   84526:	f003 0304 	and.w	r3, r3, #4
   8452a:	2b00      	cmp	r3, #0
   8452c:	d12f      	bne.n	8458e <follow_path+0xee>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   8452e:	687b      	ldr	r3, [r7, #4]
   84530:	695b      	ldr	r3, [r3, #20]
   84532:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   84534:	68bb      	ldr	r3, [r7, #8]
   84536:	330b      	adds	r3, #11
   84538:	781b      	ldrb	r3, [r3, #0]
   8453a:	f003 0310 	and.w	r3, r3, #16
   8453e:	2b00      	cmp	r3, #0
   84540:	d102      	bne.n	84548 <follow_path+0xa8>
				res = FR_NO_PATH; break;
   84542:	2305      	movs	r3, #5
   84544:	73fb      	strb	r3, [r7, #15]
   84546:	e023      	b.n	84590 <follow_path+0xf0>
			}
			dj->sclust = LD_CLUST(dir);
   84548:	68bb      	ldr	r3, [r7, #8]
   8454a:	3315      	adds	r3, #21
   8454c:	781b      	ldrb	r3, [r3, #0]
   8454e:	021b      	lsls	r3, r3, #8
   84550:	b21a      	sxth	r2, r3
   84552:	68bb      	ldr	r3, [r7, #8]
   84554:	3314      	adds	r3, #20
   84556:	781b      	ldrb	r3, [r3, #0]
   84558:	b21b      	sxth	r3, r3
   8455a:	4313      	orrs	r3, r2
   8455c:	b21b      	sxth	r3, r3
   8455e:	b29b      	uxth	r3, r3
   84560:	041b      	lsls	r3, r3, #16
   84562:	68ba      	ldr	r2, [r7, #8]
   84564:	321b      	adds	r2, #27
   84566:	7812      	ldrb	r2, [r2, #0]
   84568:	0212      	lsls	r2, r2, #8
   8456a:	b211      	sxth	r1, r2
   8456c:	68ba      	ldr	r2, [r7, #8]
   8456e:	321a      	adds	r2, #26
   84570:	7812      	ldrb	r2, [r2, #0]
   84572:	b212      	sxth	r2, r2
   84574:	430a      	orrs	r2, r1
   84576:	b212      	sxth	r2, r2
   84578:	b292      	uxth	r2, r2
   8457a:	431a      	orrs	r2, r3
   8457c:	687b      	ldr	r3, [r7, #4]
   8457e:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   84580:	e7af      	b.n	844e2 <follow_path+0x42>
			if (res != FR_OK) break;
   84582:	bf00      	nop
   84584:	e004      	b.n	84590 <follow_path+0xf0>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   84586:	bf00      	nop
   84588:	e002      	b.n	84590 <follow_path+0xf0>
				break;
   8458a:	bf00      	nop
   8458c:	e000      	b.n	84590 <follow_path+0xf0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   8458e:	bf00      	nop
		}
	}

	return res;
   84590:	7bfb      	ldrb	r3, [r7, #15]
}
   84592:	4618      	mov	r0, r3
   84594:	3710      	adds	r7, #16
   84596:	46bd      	mov	sp, r7
   84598:	bd80      	pop	{r7, pc}
   8459a:	bf00      	nop
   8459c:	00083779 	.word	0x00083779
   845a0:	00084131 	.word	0x00084131
   845a4:	00083d31 	.word	0x00083d31

000845a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   845a8:	b590      	push	{r4, r7, lr}
   845aa:	b083      	sub	sp, #12
   845ac:	af00      	add	r7, sp, #0
   845ae:	6078      	str	r0, [r7, #4]
   845b0:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   845b2:	687b      	ldr	r3, [r7, #4]
   845b4:	7858      	ldrb	r0, [r3, #1]
   845b6:	687b      	ldr	r3, [r7, #4]
   845b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   845bc:	2301      	movs	r3, #1
   845be:	683a      	ldr	r2, [r7, #0]
   845c0:	4c2a      	ldr	r4, [pc, #168]	; (8466c <check_fs+0xc4>)
   845c2:	47a0      	blx	r4
   845c4:	4603      	mov	r3, r0
   845c6:	2b00      	cmp	r3, #0
   845c8:	d001      	beq.n	845ce <check_fs+0x26>
		return 3;
   845ca:	2303      	movs	r3, #3
   845cc:	e04a      	b.n	84664 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   845ce:	687b      	ldr	r3, [r7, #4]
   845d0:	f203 232e 	addw	r3, r3, #558	; 0x22e
   845d4:	3301      	adds	r3, #1
   845d6:	781b      	ldrb	r3, [r3, #0]
   845d8:	021b      	lsls	r3, r3, #8
   845da:	b21a      	sxth	r2, r3
   845dc:	687b      	ldr	r3, [r7, #4]
   845de:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
   845e2:	b21b      	sxth	r3, r3
   845e4:	4313      	orrs	r3, r2
   845e6:	b21b      	sxth	r3, r3
   845e8:	4a21      	ldr	r2, [pc, #132]	; (84670 <check_fs+0xc8>)
   845ea:	4293      	cmp	r3, r2
   845ec:	d001      	beq.n	845f2 <check_fs+0x4a>
		return 2;
   845ee:	2302      	movs	r3, #2
   845f0:	e038      	b.n	84664 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   845f2:	687b      	ldr	r3, [r7, #4]
   845f4:	3366      	adds	r3, #102	; 0x66
   845f6:	3303      	adds	r3, #3
   845f8:	781b      	ldrb	r3, [r3, #0]
   845fa:	061a      	lsls	r2, r3, #24
   845fc:	687b      	ldr	r3, [r7, #4]
   845fe:	3366      	adds	r3, #102	; 0x66
   84600:	3302      	adds	r3, #2
   84602:	781b      	ldrb	r3, [r3, #0]
   84604:	041b      	lsls	r3, r3, #16
   84606:	4313      	orrs	r3, r2
   84608:	687a      	ldr	r2, [r7, #4]
   8460a:	3266      	adds	r2, #102	; 0x66
   8460c:	3201      	adds	r2, #1
   8460e:	7812      	ldrb	r2, [r2, #0]
   84610:	0212      	lsls	r2, r2, #8
   84612:	4313      	orrs	r3, r2
   84614:	687a      	ldr	r2, [r7, #4]
   84616:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
   8461a:	4313      	orrs	r3, r2
   8461c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   84620:	4a14      	ldr	r2, [pc, #80]	; (84674 <check_fs+0xcc>)
   84622:	4293      	cmp	r3, r2
   84624:	d101      	bne.n	8462a <check_fs+0x82>
		return 0;
   84626:	2300      	movs	r3, #0
   84628:	e01c      	b.n	84664 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   8462a:	687b      	ldr	r3, [r7, #4]
   8462c:	3382      	adds	r3, #130	; 0x82
   8462e:	3303      	adds	r3, #3
   84630:	781b      	ldrb	r3, [r3, #0]
   84632:	061a      	lsls	r2, r3, #24
   84634:	687b      	ldr	r3, [r7, #4]
   84636:	3382      	adds	r3, #130	; 0x82
   84638:	3302      	adds	r3, #2
   8463a:	781b      	ldrb	r3, [r3, #0]
   8463c:	041b      	lsls	r3, r3, #16
   8463e:	4313      	orrs	r3, r2
   84640:	687a      	ldr	r2, [r7, #4]
   84642:	3282      	adds	r2, #130	; 0x82
   84644:	3201      	adds	r2, #1
   84646:	7812      	ldrb	r2, [r2, #0]
   84648:	0212      	lsls	r2, r2, #8
   8464a:	4313      	orrs	r3, r2
   8464c:	687a      	ldr	r2, [r7, #4]
   8464e:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
   84652:	4313      	orrs	r3, r2
   84654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   84658:	4a06      	ldr	r2, [pc, #24]	; (84674 <check_fs+0xcc>)
   8465a:	4293      	cmp	r3, r2
   8465c:	d101      	bne.n	84662 <check_fs+0xba>
		return 0;
   8465e:	2300      	movs	r3, #0
   84660:	e000      	b.n	84664 <check_fs+0xbc>

	return 1;
   84662:	2301      	movs	r3, #1
}
   84664:	4618      	mov	r0, r3
   84666:	370c      	adds	r7, #12
   84668:	46bd      	mov	sp, r7
   8466a:	bd90      	pop	{r4, r7, pc}
   8466c:	00082c89 	.word	0x00082c89
   84670:	ffffaa55 	.word	0xffffaa55
   84674:	00544146 	.word	0x00544146

00084678 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   84678:	b590      	push	{r4, r7, lr}
   8467a:	b093      	sub	sp, #76	; 0x4c
   8467c:	af00      	add	r7, sp, #0
   8467e:	60f8      	str	r0, [r7, #12]
   84680:	60b9      	str	r1, [r7, #8]
   84682:	4613      	mov	r3, r2
   84684:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   84686:	68fb      	ldr	r3, [r7, #12]
   84688:	681b      	ldr	r3, [r3, #0]
   8468a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   8468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8468e:	781b      	ldrb	r3, [r3, #0]
   84690:	3b30      	subs	r3, #48	; 0x30
   84692:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   84694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84696:	2b09      	cmp	r3, #9
   84698:	d80b      	bhi.n	846b2 <chk_mounted+0x3a>
   8469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8469c:	3301      	adds	r3, #1
   8469e:	781b      	ldrb	r3, [r3, #0]
   846a0:	2b3a      	cmp	r3, #58	; 0x3a
   846a2:	d106      	bne.n	846b2 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   846a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   846a6:	3302      	adds	r3, #2
   846a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   846aa:	68fb      	ldr	r3, [r7, #12]
   846ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   846ae:	601a      	str	r2, [r3, #0]
   846b0:	e001      	b.n	846b6 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   846b2:	2300      	movs	r3, #0
   846b4:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   846b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   846b8:	2b00      	cmp	r3, #0
   846ba:	d001      	beq.n	846c0 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   846bc:	230b      	movs	r3, #11
   846be:	e276      	b.n	84bae <chk_mounted+0x536>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   846c0:	4aa8      	ldr	r2, [pc, #672]	; (84964 <chk_mounted+0x2ec>)
   846c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   846c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   846c8:	62bb      	str	r3, [r7, #40]	; 0x28
   846ca:	68bb      	ldr	r3, [r7, #8]
   846cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   846ce:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   846d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   846d2:	2b00      	cmp	r3, #0
   846d4:	d101      	bne.n	846da <chk_mounted+0x62>
   846d6:	230c      	movs	r3, #12
   846d8:	e269      	b.n	84bae <chk_mounted+0x536>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   846da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   846dc:	781b      	ldrb	r3, [r3, #0]
   846de:	2b00      	cmp	r3, #0
   846e0:	d01a      	beq.n	84718 <chk_mounted+0xa0>
		stat = disk_status(fs->drv);
   846e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   846e4:	785b      	ldrb	r3, [r3, #1]
   846e6:	4618      	mov	r0, r3
   846e8:	4b9f      	ldr	r3, [pc, #636]	; (84968 <chk_mounted+0x2f0>)
   846ea:	4798      	blx	r3
   846ec:	4603      	mov	r3, r0
   846ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   846f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   846f6:	f003 0301 	and.w	r3, r3, #1
   846fa:	2b00      	cmp	r3, #0
   846fc:	d10c      	bne.n	84718 <chk_mounted+0xa0>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   846fe:	79fb      	ldrb	r3, [r7, #7]
   84700:	2b00      	cmp	r3, #0
   84702:	d007      	beq.n	84714 <chk_mounted+0x9c>
   84704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   84708:	f003 0304 	and.w	r3, r3, #4
   8470c:	2b00      	cmp	r3, #0
   8470e:	d001      	beq.n	84714 <chk_mounted+0x9c>
				return FR_WRITE_PROTECTED;
   84710:	230a      	movs	r3, #10
   84712:	e24c      	b.n	84bae <chk_mounted+0x536>
			return FR_OK;				/* The file system object is valid */
   84714:	2300      	movs	r3, #0
   84716:	e24a      	b.n	84bae <chk_mounted+0x536>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   84718:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8471a:	2200      	movs	r2, #0
   8471c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   8471e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84720:	b2da      	uxtb	r2, r3
   84722:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84724:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   84726:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84728:	785b      	ldrb	r3, [r3, #1]
   8472a:	4618      	mov	r0, r3
   8472c:	4b8f      	ldr	r3, [pc, #572]	; (8496c <chk_mounted+0x2f4>)
   8472e:	4798      	blx	r3
   84730:	4603      	mov	r3, r0
   84732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   84736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   8473a:	f003 0301 	and.w	r3, r3, #1
   8473e:	2b00      	cmp	r3, #0
   84740:	d001      	beq.n	84746 <chk_mounted+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   84742:	2303      	movs	r3, #3
   84744:	e233      	b.n	84bae <chk_mounted+0x536>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   84746:	79fb      	ldrb	r3, [r7, #7]
   84748:	2b00      	cmp	r3, #0
   8474a:	d007      	beq.n	8475c <chk_mounted+0xe4>
   8474c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   84750:	f003 0304 	and.w	r3, r3, #4
   84754:	2b00      	cmp	r3, #0
   84756:	d001      	beq.n	8475c <chk_mounted+0xe4>
		return FR_WRITE_PROTECTED;
   84758:	230a      	movs	r3, #10
   8475a:	e228      	b.n	84bae <chk_mounted+0x536>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   8475c:	2300      	movs	r3, #0
   8475e:	63fb      	str	r3, [r7, #60]	; 0x3c
   84760:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   84762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   84764:	4b82      	ldr	r3, [pc, #520]	; (84970 <chk_mounted+0x2f8>)
   84766:	4798      	blx	r3
   84768:	4603      	mov	r3, r0
   8476a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   8476e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   84772:	2b01      	cmp	r3, #1
   84774:	d133      	bne.n	847de <chk_mounted+0x166>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   84776:	2300      	movs	r3, #0
   84778:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
   8477c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84780:	2b00      	cmp	r3, #0
   84782:	d004      	beq.n	8478e <chk_mounted+0x116>
   84784:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84788:	3b01      	subs	r3, #1
   8478a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   8478e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84792:	011b      	lsls	r3, r3, #4
   84794:	f503 73df 	add.w	r3, r3, #446	; 0x1be
   84798:	3330      	adds	r3, #48	; 0x30
   8479a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   8479c:	4413      	add	r3, r2
   8479e:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   847a0:	6a3b      	ldr	r3, [r7, #32]
   847a2:	3304      	adds	r3, #4
   847a4:	781b      	ldrb	r3, [r3, #0]
   847a6:	2b00      	cmp	r3, #0
   847a8:	d019      	beq.n	847de <chk_mounted+0x166>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   847aa:	6a3b      	ldr	r3, [r7, #32]
   847ac:	330b      	adds	r3, #11
   847ae:	781b      	ldrb	r3, [r3, #0]
   847b0:	061a      	lsls	r2, r3, #24
   847b2:	6a3b      	ldr	r3, [r7, #32]
   847b4:	330a      	adds	r3, #10
   847b6:	781b      	ldrb	r3, [r3, #0]
   847b8:	041b      	lsls	r3, r3, #16
   847ba:	4313      	orrs	r3, r2
   847bc:	6a3a      	ldr	r2, [r7, #32]
   847be:	3209      	adds	r2, #9
   847c0:	7812      	ldrb	r2, [r2, #0]
   847c2:	0212      	lsls	r2, r2, #8
   847c4:	4313      	orrs	r3, r2
   847c6:	6a3a      	ldr	r2, [r7, #32]
   847c8:	3208      	adds	r2, #8
   847ca:	7812      	ldrb	r2, [r2, #0]
   847cc:	4313      	orrs	r3, r2
   847ce:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   847d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   847d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   847d4:	4b66      	ldr	r3, [pc, #408]	; (84970 <chk_mounted+0x2f8>)
   847d6:	4798      	blx	r3
   847d8:	4603      	mov	r3, r0
   847da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   847de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   847e2:	2b03      	cmp	r3, #3
   847e4:	d101      	bne.n	847ea <chk_mounted+0x172>
   847e6:	2301      	movs	r3, #1
   847e8:	e1e1      	b.n	84bae <chk_mounted+0x536>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   847ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   847ee:	2b00      	cmp	r3, #0
   847f0:	d001      	beq.n	847f6 <chk_mounted+0x17e>
   847f2:	230d      	movs	r3, #13
   847f4:	e1db      	b.n	84bae <chk_mounted+0x536>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   847f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   847f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   847fc:	021b      	lsls	r3, r3, #8
   847fe:	b21a      	sxth	r2, r3
   84800:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84802:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   84806:	b21b      	sxth	r3, r3
   84808:	4313      	orrs	r3, r2
   8480a:	b21b      	sxth	r3, r3
   8480c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84810:	d001      	beq.n	84816 <chk_mounted+0x19e>
		return FR_NO_FILESYSTEM;
   84812:	230d      	movs	r3, #13
   84814:	e1cb      	b.n	84bae <chk_mounted+0x536>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   84816:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84818:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   8481c:	021b      	lsls	r3, r3, #8
   8481e:	b21a      	sxth	r2, r3
   84820:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84822:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   84826:	b21b      	sxth	r3, r3
   84828:	4313      	orrs	r3, r2
   8482a:	b21b      	sxth	r3, r3
   8482c:	b29b      	uxth	r3, r3
   8482e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   84830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   84832:	2b00      	cmp	r3, #0
   84834:	d112      	bne.n	8485c <chk_mounted+0x1e4>
   84836:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84838:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
   8483c:	061a      	lsls	r2, r3, #24
   8483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84840:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
   84844:	041b      	lsls	r3, r3, #16
   84846:	4313      	orrs	r3, r2
   84848:	6aba      	ldr	r2, [r7, #40]	; 0x28
   8484a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
   8484e:	0212      	lsls	r2, r2, #8
   84850:	4313      	orrs	r3, r2
   84852:	6aba      	ldr	r2, [r7, #40]	; 0x28
   84854:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
   84858:	4313      	orrs	r3, r2
   8485a:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   8485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8485e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   84860:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   84862:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   84868:	77fb      	strb	r3, [r7, #31]
   8486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8486c:	7ffa      	ldrb	r2, [r7, #31]
   8486e:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   84870:	7ffb      	ldrb	r3, [r7, #31]
   84872:	2b01      	cmp	r3, #1
   84874:	d004      	beq.n	84880 <chk_mounted+0x208>
   84876:	7ffb      	ldrb	r3, [r7, #31]
   84878:	2b02      	cmp	r3, #2
   8487a:	d001      	beq.n	84880 <chk_mounted+0x208>
   8487c:	230d      	movs	r3, #13
   8487e:	e196      	b.n	84bae <chk_mounted+0x536>
	fasize *= b;										/* Number of sectors for FAT area */
   84880:	7ffa      	ldrb	r2, [r7, #31]
   84882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   84884:	fb02 f303 	mul.w	r3, r2, r3
   84888:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   8488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   84890:	77fb      	strb	r3, [r7, #31]
   84892:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84894:	7ffa      	ldrb	r2, [r7, #31]
   84896:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   84898:	7ffb      	ldrb	r3, [r7, #31]
   8489a:	2b00      	cmp	r3, #0
   8489c:	d005      	beq.n	848aa <chk_mounted+0x232>
   8489e:	7ffa      	ldrb	r2, [r7, #31]
   848a0:	7ffb      	ldrb	r3, [r7, #31]
   848a2:	3b01      	subs	r3, #1
   848a4:	4013      	ands	r3, r2
   848a6:	2b00      	cmp	r3, #0
   848a8:	d001      	beq.n	848ae <chk_mounted+0x236>
   848aa:	230d      	movs	r3, #13
   848ac:	e17f      	b.n	84bae <chk_mounted+0x536>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   848ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   848b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   848b4:	021b      	lsls	r3, r3, #8
   848b6:	b21a      	sxth	r2, r3
   848b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   848ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   848be:	b21b      	sxth	r3, r3
   848c0:	4313      	orrs	r3, r2
   848c2:	b21b      	sxth	r3, r3
   848c4:	b29a      	uxth	r2, r3
   848c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   848c8:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   848ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   848cc:	891b      	ldrh	r3, [r3, #8]
   848ce:	f003 030f 	and.w	r3, r3, #15
   848d2:	b29b      	uxth	r3, r3
   848d4:	2b00      	cmp	r3, #0
   848d6:	d001      	beq.n	848dc <chk_mounted+0x264>
   848d8:	230d      	movs	r3, #13
   848da:	e168      	b.n	84bae <chk_mounted+0x536>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   848dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   848de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   848e2:	021b      	lsls	r3, r3, #8
   848e4:	b21a      	sxth	r2, r3
   848e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   848e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   848ec:	b21b      	sxth	r3, r3
   848ee:	4313      	orrs	r3, r2
   848f0:	b21b      	sxth	r3, r3
   848f2:	b29b      	uxth	r3, r3
   848f4:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   848f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   848f8:	2b00      	cmp	r3, #0
   848fa:	d112      	bne.n	84922 <chk_mounted+0x2aa>
   848fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   848fe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
   84902:	061a      	lsls	r2, r3, #24
   84904:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84906:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   8490a:	041b      	lsls	r3, r3, #16
   8490c:	4313      	orrs	r3, r2
   8490e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   84910:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
   84914:	0212      	lsls	r2, r2, #8
   84916:	4313      	orrs	r3, r2
   84918:	6aba      	ldr	r2, [r7, #40]	; 0x28
   8491a:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
   8491e:	4313      	orrs	r3, r2
   84920:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   84922:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   84928:	021b      	lsls	r3, r3, #8
   8492a:	b21a      	sxth	r2, r3
   8492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8492e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   84932:	b21b      	sxth	r3, r3
   84934:	4313      	orrs	r3, r2
   84936:	b21b      	sxth	r3, r3
   84938:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   8493a:	8bbb      	ldrh	r3, [r7, #28]
   8493c:	2b00      	cmp	r3, #0
   8493e:	d101      	bne.n	84944 <chk_mounted+0x2cc>
   84940:	230d      	movs	r3, #13
   84942:	e134      	b.n	84bae <chk_mounted+0x536>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   84944:	8bba      	ldrh	r2, [r7, #28]
   84946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   84948:	4413      	add	r3, r2
   8494a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   8494c:	8912      	ldrh	r2, [r2, #8]
   8494e:	0912      	lsrs	r2, r2, #4
   84950:	b292      	uxth	r2, r2
   84952:	4413      	add	r3, r2
   84954:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   84956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   84958:	69bb      	ldr	r3, [r7, #24]
   8495a:	429a      	cmp	r2, r3
   8495c:	d20a      	bcs.n	84974 <chk_mounted+0x2fc>
   8495e:	230d      	movs	r3, #13
   84960:	e125      	b.n	84bae <chk_mounted+0x536>
   84962:	bf00      	nop
   84964:	2007062c 	.word	0x2007062c
   84968:	00082c55 	.word	0x00082c55
   8496c:	00082bd9 	.word	0x00082bd9
   84970:	000845a9 	.word	0x000845a9
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   84974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   84976:	69bb      	ldr	r3, [r7, #24]
   84978:	1ad3      	subs	r3, r2, r3
   8497a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   8497c:	7892      	ldrb	r2, [r2, #2]
   8497e:	fbb3 f3f2 	udiv	r3, r3, r2
   84982:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   84984:	697b      	ldr	r3, [r7, #20]
   84986:	2b00      	cmp	r3, #0
   84988:	d101      	bne.n	8498e <chk_mounted+0x316>
   8498a:	230d      	movs	r3, #13
   8498c:	e10f      	b.n	84bae <chk_mounted+0x536>
	fmt = FS_FAT12;
   8498e:	2301      	movs	r3, #1
   84990:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   84994:	697b      	ldr	r3, [r7, #20]
   84996:	f640 72f5 	movw	r2, #4085	; 0xff5
   8499a:	4293      	cmp	r3, r2
   8499c:	d902      	bls.n	849a4 <chk_mounted+0x32c>
   8499e:	2302      	movs	r3, #2
   849a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   849a4:	697b      	ldr	r3, [r7, #20]
   849a6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
   849aa:	4293      	cmp	r3, r2
   849ac:	d902      	bls.n	849b4 <chk_mounted+0x33c>
   849ae:	2303      	movs	r3, #3
   849b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   849b4:	697b      	ldr	r3, [r7, #20]
   849b6:	1c9a      	adds	r2, r3, #2
   849b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   849ba:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   849bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   849be:	69bb      	ldr	r3, [r7, #24]
   849c0:	441a      	add	r2, r3
   849c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   849c4:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   849c6:	8bba      	ldrh	r2, [r7, #28]
   849c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   849ca:	441a      	add	r2, r3
   849cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   849ce:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   849d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   849d4:	2b03      	cmp	r3, #3
   849d6:	d11e      	bne.n	84a16 <chk_mounted+0x39e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   849d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   849da:	891b      	ldrh	r3, [r3, #8]
   849dc:	2b00      	cmp	r3, #0
   849de:	d001      	beq.n	849e4 <chk_mounted+0x36c>
   849e0:	230d      	movs	r3, #13
   849e2:	e0e4      	b.n	84bae <chk_mounted+0x536>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   849e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   849e6:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   849ea:	061a      	lsls	r2, r3, #24
   849ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   849ee:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   849f2:	041b      	lsls	r3, r3, #16
   849f4:	4313      	orrs	r3, r2
   849f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   849f8:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
   849fc:	0212      	lsls	r2, r2, #8
   849fe:	4313      	orrs	r3, r2
   84a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
   84a02:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
   84a06:	431a      	orrs	r2, r3
   84a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a0a:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   84a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a0e:	699b      	ldr	r3, [r3, #24]
   84a10:	009b      	lsls	r3, r3, #2
   84a12:	633b      	str	r3, [r7, #48]	; 0x30
   84a14:	e01f      	b.n	84a56 <chk_mounted+0x3de>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   84a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a18:	891b      	ldrh	r3, [r3, #8]
   84a1a:	2b00      	cmp	r3, #0
   84a1c:	d101      	bne.n	84a22 <chk_mounted+0x3aa>
   84a1e:	230d      	movs	r3, #13
   84a20:	e0c5      	b.n	84bae <chk_mounted+0x536>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   84a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a24:	6a1a      	ldr	r2, [r3, #32]
   84a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   84a28:	441a      	add	r2, r3
   84a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a2c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   84a2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   84a32:	2b02      	cmp	r3, #2
   84a34:	d103      	bne.n	84a3e <chk_mounted+0x3c6>
   84a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a38:	699b      	ldr	r3, [r3, #24]
   84a3a:	005b      	lsls	r3, r3, #1
   84a3c:	e00a      	b.n	84a54 <chk_mounted+0x3dc>
   84a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a40:	699a      	ldr	r2, [r3, #24]
   84a42:	4613      	mov	r3, r2
   84a44:	005b      	lsls	r3, r3, #1
   84a46:	4413      	add	r3, r2
   84a48:	085a      	lsrs	r2, r3, #1
   84a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a4c:	699b      	ldr	r3, [r3, #24]
   84a4e:	f003 0301 	and.w	r3, r3, #1
   84a52:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   84a54:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   84a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a58:	69da      	ldr	r2, [r3, #28]
   84a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   84a5c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
   84a60:	0a5b      	lsrs	r3, r3, #9
   84a62:	429a      	cmp	r2, r3
   84a64:	d201      	bcs.n	84a6a <chk_mounted+0x3f2>
		return FR_NO_FILESYSTEM;
   84a66:	230d      	movs	r3, #13
   84a68:	e0a1      	b.n	84bae <chk_mounted+0x536>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   84a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a6c:	f04f 32ff 	mov.w	r2, #4294967295
   84a70:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   84a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a74:	2200      	movs	r2, #0
   84a76:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   84a78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   84a7c:	2b03      	cmp	r3, #3
   84a7e:	f040 8081 	bne.w	84b84 <chk_mounted+0x50c>
	 	fs->fsi_flag = 0;
   84a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a84:	2200      	movs	r2, #0
   84a86:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   84a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a8a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   84a8e:	021b      	lsls	r3, r3, #8
   84a90:	b21a      	sxth	r2, r3
   84a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84a94:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
   84a98:	b21b      	sxth	r3, r3
   84a9a:	4313      	orrs	r3, r2
   84a9c:	b21b      	sxth	r3, r3
   84a9e:	b29b      	uxth	r3, r3
   84aa0:	461a      	mov	r2, r3
   84aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   84aa4:	441a      	add	r2, r3
   84aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84aa8:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   84aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84aac:	7858      	ldrb	r0, [r3, #1]
   84aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84ab0:	f103 0130 	add.w	r1, r3, #48	; 0x30
   84ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84ab6:	695a      	ldr	r2, [r3, #20]
   84ab8:	2301      	movs	r3, #1
   84aba:	4c3f      	ldr	r4, [pc, #252]	; (84bb8 <chk_mounted+0x540>)
   84abc:	47a0      	blx	r4
   84abe:	4603      	mov	r3, r0
   84ac0:	2b00      	cmp	r3, #0
   84ac2:	d15f      	bne.n	84b84 <chk_mounted+0x50c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   84ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84ac6:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
   84aca:	021b      	lsls	r3, r3, #8
   84acc:	b21a      	sxth	r2, r3
   84ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84ad0:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
   84ad4:	b21b      	sxth	r3, r3
   84ad6:	4313      	orrs	r3, r2
   84ad8:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   84ada:	4a38      	ldr	r2, [pc, #224]	; (84bbc <chk_mounted+0x544>)
   84adc:	4293      	cmp	r3, r2
   84ade:	d151      	bne.n	84b84 <chk_mounted+0x50c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   84ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84ae2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
   84ae6:	061a      	lsls	r2, r3, #24
   84ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84aea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   84aee:	041b      	lsls	r3, r3, #16
   84af0:	4313      	orrs	r3, r2
   84af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   84af4:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
   84af8:	0212      	lsls	r2, r2, #8
   84afa:	4313      	orrs	r3, r2
   84afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   84afe:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   84b02:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   84b04:	4a2e      	ldr	r2, [pc, #184]	; (84bc0 <chk_mounted+0x548>)
   84b06:	4293      	cmp	r3, r2
   84b08:	d13c      	bne.n	84b84 <chk_mounted+0x50c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   84b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84b0c:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
   84b10:	061a      	lsls	r2, r3, #24
   84b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84b14:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
   84b18:	041b      	lsls	r3, r3, #16
   84b1a:	4313      	orrs	r3, r2
   84b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   84b1e:	f892 2215 	ldrb.w	r2, [r2, #533]	; 0x215
   84b22:	0212      	lsls	r2, r2, #8
   84b24:	4313      	orrs	r3, r2
   84b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
   84b28:	f892 2214 	ldrb.w	r2, [r2, #532]	; 0x214
   84b2c:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   84b2e:	4a25      	ldr	r2, [pc, #148]	; (84bc4 <chk_mounted+0x54c>)
   84b30:	4293      	cmp	r3, r2
   84b32:	d127      	bne.n	84b84 <chk_mounted+0x50c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   84b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84b36:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
   84b3a:	061a      	lsls	r2, r3, #24
   84b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84b3e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
   84b42:	041b      	lsls	r3, r3, #16
   84b44:	4313      	orrs	r3, r2
   84b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
   84b48:	f892 221d 	ldrb.w	r2, [r2, #541]	; 0x21d
   84b4c:	0212      	lsls	r2, r2, #8
   84b4e:	4313      	orrs	r3, r2
   84b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
   84b52:	f892 221c 	ldrb.w	r2, [r2, #540]	; 0x21c
   84b56:	431a      	orrs	r2, r3
   84b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84b5a:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   84b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84b5e:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
   84b62:	061a      	lsls	r2, r3, #24
   84b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84b66:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
   84b6a:	041b      	lsls	r3, r3, #16
   84b6c:	4313      	orrs	r3, r2
   84b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   84b70:	f892 2219 	ldrb.w	r2, [r2, #537]	; 0x219
   84b74:	0212      	lsls	r2, r2, #8
   84b76:	4313      	orrs	r3, r2
   84b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
   84b7a:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
   84b7e:	431a      	orrs	r2, r3
   84b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84b82:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   84b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84b86:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
   84b8a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   84b8c:	4b0e      	ldr	r3, [pc, #56]	; (84bc8 <chk_mounted+0x550>)
   84b8e:	881b      	ldrh	r3, [r3, #0]
   84b90:	3301      	adds	r3, #1
   84b92:	b29a      	uxth	r2, r3
   84b94:	4b0c      	ldr	r3, [pc, #48]	; (84bc8 <chk_mounted+0x550>)
   84b96:	801a      	strh	r2, [r3, #0]
   84b98:	4b0b      	ldr	r3, [pc, #44]	; (84bc8 <chk_mounted+0x550>)
   84b9a:	881a      	ldrh	r2, [r3, #0]
   84b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84b9e:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   84ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84ba2:	2200      	movs	r2, #0
   84ba4:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   84ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   84ba8:	2200      	movs	r2, #0
   84baa:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   84bac:	2300      	movs	r3, #0
}
   84bae:	4618      	mov	r0, r3
   84bb0:	374c      	adds	r7, #76	; 0x4c
   84bb2:	46bd      	mov	sp, r7
   84bb4:	bd90      	pop	{r4, r7, pc}
   84bb6:	bf00      	nop
   84bb8:	00082c89 	.word	0x00082c89
   84bbc:	ffffaa55 	.word	0xffffaa55
   84bc0:	41615252 	.word	0x41615252
   84bc4:	61417272 	.word	0x61417272
   84bc8:	20070630 	.word	0x20070630

00084bcc <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   84bcc:	b580      	push	{r7, lr}
   84bce:	b082      	sub	sp, #8
   84bd0:	af00      	add	r7, sp, #0
   84bd2:	6078      	str	r0, [r7, #4]
   84bd4:	460b      	mov	r3, r1
   84bd6:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
   84bd8:	687b      	ldr	r3, [r7, #4]
   84bda:	2b00      	cmp	r3, #0
   84bdc:	d008      	beq.n	84bf0 <validate+0x24>
   84bde:	687b      	ldr	r3, [r7, #4]
   84be0:	781b      	ldrb	r3, [r3, #0]
   84be2:	2b00      	cmp	r3, #0
   84be4:	d004      	beq.n	84bf0 <validate+0x24>
   84be6:	687b      	ldr	r3, [r7, #4]
   84be8:	88db      	ldrh	r3, [r3, #6]
   84bea:	887a      	ldrh	r2, [r7, #2]
   84bec:	429a      	cmp	r2, r3
   84bee:	d001      	beq.n	84bf4 <validate+0x28>
		return FR_INVALID_OBJECT;
   84bf0:	2309      	movs	r3, #9
   84bf2:	e00c      	b.n	84c0e <validate+0x42>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   84bf4:	687b      	ldr	r3, [r7, #4]
   84bf6:	785b      	ldrb	r3, [r3, #1]
   84bf8:	4618      	mov	r0, r3
   84bfa:	4b07      	ldr	r3, [pc, #28]	; (84c18 <validate+0x4c>)
   84bfc:	4798      	blx	r3
   84bfe:	4603      	mov	r3, r0
   84c00:	f003 0301 	and.w	r3, r3, #1
   84c04:	2b00      	cmp	r3, #0
   84c06:	d001      	beq.n	84c0c <validate+0x40>
		return FR_NOT_READY;
   84c08:	2303      	movs	r3, #3
   84c0a:	e000      	b.n	84c0e <validate+0x42>

	return FR_OK;
   84c0c:	2300      	movs	r3, #0
}
   84c0e:	4618      	mov	r0, r3
   84c10:	3708      	adds	r7, #8
   84c12:	46bd      	mov	sp, r7
   84c14:	bd80      	pop	{r7, pc}
   84c16:	bf00      	nop
   84c18:	00082c55 	.word	0x00082c55

00084c1c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   84c1c:	b480      	push	{r7}
   84c1e:	b085      	sub	sp, #20
   84c20:	af00      	add	r7, sp, #0
   84c22:	4603      	mov	r3, r0
   84c24:	6039      	str	r1, [r7, #0]
   84c26:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   84c28:	79fb      	ldrb	r3, [r7, #7]
   84c2a:	2b00      	cmp	r3, #0
   84c2c:	d001      	beq.n	84c32 <f_mount+0x16>
		return FR_INVALID_DRIVE;
   84c2e:	230b      	movs	r3, #11
   84c30:	e016      	b.n	84c60 <f_mount+0x44>
	rfs = FatFs[vol];			/* Get current fs object */
   84c32:	79fb      	ldrb	r3, [r7, #7]
   84c34:	4a0d      	ldr	r2, [pc, #52]	; (84c6c <f_mount+0x50>)
   84c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   84c3a:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   84c3c:	68fb      	ldr	r3, [r7, #12]
   84c3e:	2b00      	cmp	r3, #0
   84c40:	d002      	beq.n	84c48 <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   84c42:	68fb      	ldr	r3, [r7, #12]
   84c44:	2200      	movs	r2, #0
   84c46:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   84c48:	683b      	ldr	r3, [r7, #0]
   84c4a:	2b00      	cmp	r3, #0
   84c4c:	d002      	beq.n	84c54 <f_mount+0x38>
		fs->fs_type = 0;		/* Clear new fs object */
   84c4e:	683b      	ldr	r3, [r7, #0]
   84c50:	2200      	movs	r2, #0
   84c52:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   84c54:	79fb      	ldrb	r3, [r7, #7]
   84c56:	4905      	ldr	r1, [pc, #20]	; (84c6c <f_mount+0x50>)
   84c58:	683a      	ldr	r2, [r7, #0]
   84c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
   84c5e:	2300      	movs	r3, #0
}
   84c60:	4618      	mov	r0, r3
   84c62:	3714      	adds	r7, #20
   84c64:	46bd      	mov	sp, r7
   84c66:	bc80      	pop	{r7}
   84c68:	4770      	bx	lr
   84c6a:	bf00      	nop
   84c6c:	2007062c 	.word	0x2007062c

00084c70 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   84c70:	b580      	push	{r7, lr}
   84c72:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
   84c76:	af00      	add	r7, sp, #0
   84c78:	f107 030c 	add.w	r3, r7, #12
   84c7c:	6018      	str	r0, [r3, #0]
   84c7e:	f107 0308 	add.w	r3, r7, #8
   84c82:	6019      	str	r1, [r3, #0]
   84c84:	1dfb      	adds	r3, r7, #7
   84c86:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   84c88:	f107 030c 	add.w	r3, r7, #12
   84c8c:	681b      	ldr	r3, [r3, #0]
   84c8e:	2200      	movs	r2, #0
   84c90:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   84c92:	1dfb      	adds	r3, r7, #7
   84c94:	1dfa      	adds	r2, r7, #7
   84c96:	7812      	ldrb	r2, [r2, #0]
   84c98:	f002 021f 	and.w	r2, r2, #31
   84c9c:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   84c9e:	1dfb      	adds	r3, r7, #7
   84ca0:	781b      	ldrb	r3, [r3, #0]
   84ca2:	f023 0301 	bic.w	r3, r3, #1
   84ca6:	b2da      	uxtb	r2, r3
   84ca8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
   84cac:	f107 0308 	add.w	r3, r7, #8
   84cb0:	4618      	mov	r0, r3
   84cb2:	4b8e      	ldr	r3, [pc, #568]	; (84eec <f_open+0x27c>)
   84cb4:	4798      	blx	r3
   84cb6:	4603      	mov	r3, r0
   84cb8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   84cbc:	f507 7304 	add.w	r3, r7, #528	; 0x210
   84cc0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
   84cc4:	f107 0310 	add.w	r3, r7, #16
   84cc8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	if (res == FR_OK)
   84ccc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
   84cd0:	2b00      	cmp	r3, #0
   84cd2:	d10b      	bne.n	84cec <f_open+0x7c>
		res = follow_path(&dj, path);	/* Follow the file path */
   84cd4:	f107 0308 	add.w	r3, r7, #8
   84cd8:	681a      	ldr	r2, [r3, #0]
   84cda:	f507 7307 	add.w	r3, r7, #540	; 0x21c
   84cde:	4611      	mov	r1, r2
   84ce0:	4618      	mov	r0, r3
   84ce2:	4b83      	ldr	r3, [pc, #524]	; (84ef0 <f_open+0x280>)
   84ce4:	4798      	blx	r3
   84ce6:	4603      	mov	r3, r0
   84ce8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	dir = dj.dir;
   84cec:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
   84cf0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   84cf4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
   84cf8:	2b00      	cmp	r3, #0
   84cfa:	d106      	bne.n	84d0a <f_open+0x9a>
		if (!dir)	/* Current dir itself */
   84cfc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84d00:	2b00      	cmp	r3, #0
   84d02:	d102      	bne.n	84d0a <f_open+0x9a>
			res = FR_INVALID_NAME;
   84d04:	2306      	movs	r3, #6
   84d06:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   84d0a:	1dfb      	adds	r3, r7, #7
   84d0c:	781b      	ldrb	r3, [r3, #0]
   84d0e:	f003 031c 	and.w	r3, r3, #28
   84d12:	2b00      	cmp	r3, #0
   84d14:	f000 80da 	beq.w	84ecc <f_open+0x25c>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   84d18:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
   84d1c:	2b00      	cmp	r3, #0
   84d1e:	d016      	beq.n	84d4e <f_open+0xde>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   84d20:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
   84d24:	2b04      	cmp	r3, #4
   84d26:	d107      	bne.n	84d38 <f_open+0xc8>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   84d28:	f507 7307 	add.w	r3, r7, #540	; 0x21c
   84d2c:	4618      	mov	r0, r3
   84d2e:	4b71      	ldr	r3, [pc, #452]	; (84ef4 <f_open+0x284>)
   84d30:	4798      	blx	r3
   84d32:	4603      	mov	r3, r0
   84d34:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   84d38:	1dfb      	adds	r3, r7, #7
   84d3a:	1dfa      	adds	r2, r7, #7
   84d3c:	7812      	ldrb	r2, [r2, #0]
   84d3e:	f042 0208 	orr.w	r2, r2, #8
   84d42:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   84d44:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
   84d48:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
   84d4c:	e014      	b.n	84d78 <f_open+0x108>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   84d4e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84d52:	330b      	adds	r3, #11
   84d54:	781b      	ldrb	r3, [r3, #0]
   84d56:	f003 0311 	and.w	r3, r3, #17
   84d5a:	2b00      	cmp	r3, #0
   84d5c:	d003      	beq.n	84d66 <f_open+0xf6>
				res = FR_DENIED;
   84d5e:	2307      	movs	r3, #7
   84d60:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
   84d64:	e008      	b.n	84d78 <f_open+0x108>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   84d66:	1dfb      	adds	r3, r7, #7
   84d68:	781b      	ldrb	r3, [r3, #0]
   84d6a:	f003 0304 	and.w	r3, r3, #4
   84d6e:	2b00      	cmp	r3, #0
   84d70:	d002      	beq.n	84d78 <f_open+0x108>
					res = FR_EXIST;
   84d72:	2308      	movs	r3, #8
   84d74:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   84d78:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
   84d7c:	2b00      	cmp	r3, #0
   84d7e:	f040 80d2 	bne.w	84f26 <f_open+0x2b6>
   84d82:	1dfb      	adds	r3, r7, #7
   84d84:	781b      	ldrb	r3, [r3, #0]
   84d86:	f003 0308 	and.w	r3, r3, #8
   84d8a:	2b00      	cmp	r3, #0
   84d8c:	f000 80cb 	beq.w	84f26 <f_open+0x2b6>
			dw = get_fattime();					/* Created time */
   84d90:	4b59      	ldr	r3, [pc, #356]	; (84ef8 <f_open+0x288>)
   84d92:	4798      	blx	r3
   84d94:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
			ST_DWORD(dir+DIR_CrtTime, dw);
   84d98:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84d9c:	330e      	adds	r3, #14
   84d9e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
   84da2:	b2d2      	uxtb	r2, r2
   84da4:	701a      	strb	r2, [r3, #0]
   84da6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84daa:	330f      	adds	r3, #15
   84dac:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
   84db0:	b292      	uxth	r2, r2
   84db2:	0a12      	lsrs	r2, r2, #8
   84db4:	b292      	uxth	r2, r2
   84db6:	b2d2      	uxtb	r2, r2
   84db8:	701a      	strb	r2, [r3, #0]
   84dba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84dbe:	3310      	adds	r3, #16
   84dc0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
   84dc4:	0c12      	lsrs	r2, r2, #16
   84dc6:	b2d2      	uxtb	r2, r2
   84dc8:	701a      	strb	r2, [r3, #0]
   84dca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84dce:	3311      	adds	r3, #17
   84dd0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
   84dd4:	0e12      	lsrs	r2, r2, #24
   84dd6:	b2d2      	uxtb	r2, r2
   84dd8:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   84dda:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84dde:	330b      	adds	r3, #11
   84de0:	2200      	movs	r2, #0
   84de2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   84de4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84de8:	331c      	adds	r3, #28
   84dea:	2200      	movs	r2, #0
   84dec:	701a      	strb	r2, [r3, #0]
   84dee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84df2:	331d      	adds	r3, #29
   84df4:	2200      	movs	r2, #0
   84df6:	701a      	strb	r2, [r3, #0]
   84df8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84dfc:	331e      	adds	r3, #30
   84dfe:	2200      	movs	r2, #0
   84e00:	701a      	strb	r2, [r3, #0]
   84e02:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84e06:	331f      	adds	r3, #31
   84e08:	2200      	movs	r2, #0
   84e0a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   84e0c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84e10:	3315      	adds	r3, #21
   84e12:	781b      	ldrb	r3, [r3, #0]
   84e14:	021b      	lsls	r3, r3, #8
   84e16:	b21a      	sxth	r2, r3
   84e18:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84e1c:	3314      	adds	r3, #20
   84e1e:	781b      	ldrb	r3, [r3, #0]
   84e20:	b21b      	sxth	r3, r3
   84e22:	4313      	orrs	r3, r2
   84e24:	b21b      	sxth	r3, r3
   84e26:	b29b      	uxth	r3, r3
   84e28:	041b      	lsls	r3, r3, #16
   84e2a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
   84e2e:	321b      	adds	r2, #27
   84e30:	7812      	ldrb	r2, [r2, #0]
   84e32:	0212      	lsls	r2, r2, #8
   84e34:	b211      	sxth	r1, r2
   84e36:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
   84e3a:	321a      	adds	r2, #26
   84e3c:	7812      	ldrb	r2, [r2, #0]
   84e3e:	b212      	sxth	r2, r2
   84e40:	430a      	orrs	r2, r1
   84e42:	b212      	sxth	r2, r2
   84e44:	b292      	uxth	r2, r2
   84e46:	4313      	orrs	r3, r2
   84e48:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
			ST_CLUST(dir, 0);					/* cluster = 0 */
   84e4c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84e50:	331a      	adds	r3, #26
   84e52:	2200      	movs	r2, #0
   84e54:	701a      	strb	r2, [r3, #0]
   84e56:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84e5a:	331b      	adds	r3, #27
   84e5c:	2200      	movs	r2, #0
   84e5e:	701a      	strb	r2, [r3, #0]
   84e60:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84e64:	3314      	adds	r3, #20
   84e66:	2200      	movs	r2, #0
   84e68:	701a      	strb	r2, [r3, #0]
   84e6a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84e6e:	3315      	adds	r3, #21
   84e70:	2200      	movs	r2, #0
   84e72:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   84e74:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
   84e78:	2201      	movs	r2, #1
   84e7a:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   84e7c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
   84e80:	2b00      	cmp	r3, #0
   84e82:	d050      	beq.n	84f26 <f_open+0x2b6>
				dw = dj.fs->winsect;
   84e84:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
   84e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84e8a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				res = remove_chain(dj.fs, cl);
   84e8e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
   84e92:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
   84e96:	4618      	mov	r0, r3
   84e98:	4b18      	ldr	r3, [pc, #96]	; (84efc <f_open+0x28c>)
   84e9a:	4798      	blx	r3
   84e9c:	4603      	mov	r3, r0
   84e9e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				if (res == FR_OK) {
   84ea2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
   84ea6:	2b00      	cmp	r3, #0
   84ea8:	d13d      	bne.n	84f26 <f_open+0x2b6>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   84eaa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
   84eae:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
   84eb2:	3a01      	subs	r2, #1
   84eb4:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   84eb6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
   84eba:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
   84ebe:	4618      	mov	r0, r3
   84ec0:	4b0f      	ldr	r3, [pc, #60]	; (84f00 <f_open+0x290>)
   84ec2:	4798      	blx	r3
   84ec4:	4603      	mov	r3, r0
   84ec6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
   84eca:	e02c      	b.n	84f26 <f_open+0x2b6>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   84ecc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
   84ed0:	2b00      	cmp	r3, #0
   84ed2:	d128      	bne.n	84f26 <f_open+0x2b6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   84ed4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84ed8:	330b      	adds	r3, #11
   84eda:	781b      	ldrb	r3, [r3, #0]
   84edc:	f003 0310 	and.w	r3, r3, #16
   84ee0:	2b00      	cmp	r3, #0
   84ee2:	d00f      	beq.n	84f04 <f_open+0x294>
				res = FR_NO_FILE;
   84ee4:	2304      	movs	r3, #4
   84ee6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
   84eea:	e01c      	b.n	84f26 <f_open+0x2b6>
   84eec:	00084679 	.word	0x00084679
   84ef0:	000844a1 	.word	0x000844a1
   84ef4:	00083ea1 	.word	0x00083ea1
   84ef8:	00082ea9 	.word	0x00082ea9
   84efc:	000835b5 	.word	0x000835b5
   84f00:	00083001 	.word	0x00083001
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   84f04:	1dfb      	adds	r3, r7, #7
   84f06:	781b      	ldrb	r3, [r3, #0]
   84f08:	f003 0302 	and.w	r3, r3, #2
   84f0c:	2b00      	cmp	r3, #0
   84f0e:	d00a      	beq.n	84f26 <f_open+0x2b6>
   84f10:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84f14:	330b      	adds	r3, #11
   84f16:	781b      	ldrb	r3, [r3, #0]
   84f18:	f003 0301 	and.w	r3, r3, #1
   84f1c:	2b00      	cmp	r3, #0
   84f1e:	d002      	beq.n	84f26 <f_open+0x2b6>
					res = FR_DENIED;
   84f20:	2307      	movs	r3, #7
   84f22:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
	}
	if (res == FR_OK) {
   84f26:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
   84f2a:	2b00      	cmp	r3, #0
   84f2c:	d118      	bne.n	84f60 <f_open+0x2f0>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   84f2e:	1dfb      	adds	r3, r7, #7
   84f30:	781b      	ldrb	r3, [r3, #0]
   84f32:	f003 0308 	and.w	r3, r3, #8
   84f36:	2b00      	cmp	r3, #0
   84f38:	d005      	beq.n	84f46 <f_open+0x2d6>
			mode |= FA__WRITTEN;
   84f3a:	1dfb      	adds	r3, r7, #7
   84f3c:	1dfa      	adds	r2, r7, #7
   84f3e:	7812      	ldrb	r2, [r2, #0]
   84f40:	f042 0220 	orr.w	r2, r2, #32
   84f44:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   84f46:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
   84f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84f4c:	f107 030c 	add.w	r3, r7, #12
   84f50:	681b      	ldr	r3, [r3, #0]
   84f52:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   84f54:	f107 030c 	add.w	r3, r7, #12
   84f58:	681b      	ldr	r3, [r3, #0]
   84f5a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
   84f5e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   84f60:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
   84f64:	2b00      	cmp	r3, #0
   84f66:	d158      	bne.n	8501a <f_open+0x3aa>
		fp->flag = mode;					/* File access mode */
   84f68:	f107 030c 	add.w	r3, r7, #12
   84f6c:	681b      	ldr	r3, [r3, #0]
   84f6e:	1dfa      	adds	r2, r7, #7
   84f70:	7812      	ldrb	r2, [r2, #0]
   84f72:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   84f74:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84f78:	3315      	adds	r3, #21
   84f7a:	781b      	ldrb	r3, [r3, #0]
   84f7c:	021b      	lsls	r3, r3, #8
   84f7e:	b21a      	sxth	r2, r3
   84f80:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84f84:	3314      	adds	r3, #20
   84f86:	781b      	ldrb	r3, [r3, #0]
   84f88:	b21b      	sxth	r3, r3
   84f8a:	4313      	orrs	r3, r2
   84f8c:	b21b      	sxth	r3, r3
   84f8e:	b29b      	uxth	r3, r3
   84f90:	041b      	lsls	r3, r3, #16
   84f92:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
   84f96:	321b      	adds	r2, #27
   84f98:	7812      	ldrb	r2, [r2, #0]
   84f9a:	0212      	lsls	r2, r2, #8
   84f9c:	b211      	sxth	r1, r2
   84f9e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
   84fa2:	321a      	adds	r2, #26
   84fa4:	7812      	ldrb	r2, [r2, #0]
   84fa6:	b212      	sxth	r2, r2
   84fa8:	430a      	orrs	r2, r1
   84faa:	b212      	sxth	r2, r2
   84fac:	b292      	uxth	r2, r2
   84fae:	431a      	orrs	r2, r3
   84fb0:	f107 030c 	add.w	r3, r7, #12
   84fb4:	681b      	ldr	r3, [r3, #0]
   84fb6:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   84fb8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84fbc:	331f      	adds	r3, #31
   84fbe:	781b      	ldrb	r3, [r3, #0]
   84fc0:	061a      	lsls	r2, r3, #24
   84fc2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
   84fc6:	331e      	adds	r3, #30
   84fc8:	781b      	ldrb	r3, [r3, #0]
   84fca:	041b      	lsls	r3, r3, #16
   84fcc:	4313      	orrs	r3, r2
   84fce:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
   84fd2:	321d      	adds	r2, #29
   84fd4:	7812      	ldrb	r2, [r2, #0]
   84fd6:	0212      	lsls	r2, r2, #8
   84fd8:	4313      	orrs	r3, r2
   84fda:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
   84fde:	321c      	adds	r2, #28
   84fe0:	7812      	ldrb	r2, [r2, #0]
   84fe2:	431a      	orrs	r2, r3
   84fe4:	f107 030c 	add.w	r3, r7, #12
   84fe8:	681b      	ldr	r3, [r3, #0]
   84fea:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   84fec:	f107 030c 	add.w	r3, r7, #12
   84ff0:	681b      	ldr	r3, [r3, #0]
   84ff2:	2200      	movs	r2, #0
   84ff4:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   84ff6:	f107 030c 	add.w	r3, r7, #12
   84ffa:	681b      	ldr	r3, [r3, #0]
   84ffc:	2200      	movs	r2, #0
   84ffe:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   85000:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
   85004:	f107 030c 	add.w	r3, r7, #12
   85008:	681b      	ldr	r3, [r3, #0]
   8500a:	601a      	str	r2, [r3, #0]
   8500c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
   85010:	88da      	ldrh	r2, [r3, #6]
   85012:	f107 030c 	add.w	r3, r7, #12
   85016:	681b      	ldr	r3, [r3, #0]
   85018:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   8501a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
   8501e:	4618      	mov	r0, r3
   85020:	f507 7714 	add.w	r7, r7, #592	; 0x250
   85024:	46bd      	mov	sp, r7
   85026:	bd80      	pop	{r7, pc}

00085028 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   85028:	b590      	push	{r4, r7, lr}
   8502a:	b08b      	sub	sp, #44	; 0x2c
   8502c:	af00      	add	r7, sp, #0
   8502e:	60f8      	str	r0, [r7, #12]
   85030:	60b9      	str	r1, [r7, #8]
   85032:	607a      	str	r2, [r7, #4]
   85034:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   85036:	68bb      	ldr	r3, [r7, #8]
   85038:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   8503a:	683b      	ldr	r3, [r7, #0]
   8503c:	2200      	movs	r2, #0
   8503e:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   85040:	68fb      	ldr	r3, [r7, #12]
   85042:	681a      	ldr	r2, [r3, #0]
   85044:	68fb      	ldr	r3, [r7, #12]
   85046:	889b      	ldrh	r3, [r3, #4]
   85048:	4619      	mov	r1, r3
   8504a:	4610      	mov	r0, r2
   8504c:	4b8f      	ldr	r3, [pc, #572]	; (8528c <f_write+0x264>)
   8504e:	4798      	blx	r3
   85050:	4603      	mov	r3, r0
   85052:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   85054:	7dfb      	ldrb	r3, [r7, #23]
   85056:	2b00      	cmp	r3, #0
   85058:	d001      	beq.n	8505e <f_write+0x36>
   8505a:	7dfb      	ldrb	r3, [r7, #23]
   8505c:	e172      	b.n	85344 <f_write+0x31c>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   8505e:	68fb      	ldr	r3, [r7, #12]
   85060:	799b      	ldrb	r3, [r3, #6]
   85062:	b25b      	sxtb	r3, r3
   85064:	2b00      	cmp	r3, #0
   85066:	da01      	bge.n	8506c <f_write+0x44>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   85068:	2302      	movs	r3, #2
   8506a:	e16b      	b.n	85344 <f_write+0x31c>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   8506c:	68fb      	ldr	r3, [r7, #12]
   8506e:	799b      	ldrb	r3, [r3, #6]
   85070:	f003 0302 	and.w	r3, r3, #2
   85074:	2b00      	cmp	r3, #0
   85076:	d101      	bne.n	8507c <f_write+0x54>
		LEAVE_FF(fp->fs, FR_DENIED);
   85078:	2307      	movs	r3, #7
   8507a:	e163      	b.n	85344 <f_write+0x31c>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   8507c:	68fb      	ldr	r3, [r7, #12]
   8507e:	68da      	ldr	r2, [r3, #12]
   85080:	687b      	ldr	r3, [r7, #4]
   85082:	441a      	add	r2, r3
   85084:	68fb      	ldr	r3, [r7, #12]
   85086:	68db      	ldr	r3, [r3, #12]
   85088:	429a      	cmp	r2, r3
   8508a:	f080 8143 	bcs.w	85314 <f_write+0x2ec>
   8508e:	2300      	movs	r3, #0
   85090:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   85092:	e13f      	b.n	85314 <f_write+0x2ec>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   85094:	68fb      	ldr	r3, [r7, #12]
   85096:	689b      	ldr	r3, [r3, #8]
   85098:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8509c:	2b00      	cmp	r3, #0
   8509e:	f040 8104 	bne.w	852aa <f_write+0x282>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   850a2:	68fb      	ldr	r3, [r7, #12]
   850a4:	689b      	ldr	r3, [r3, #8]
   850a6:	0a5b      	lsrs	r3, r3, #9
   850a8:	b2da      	uxtb	r2, r3
   850aa:	68fb      	ldr	r3, [r7, #12]
   850ac:	681b      	ldr	r3, [r3, #0]
   850ae:	789b      	ldrb	r3, [r3, #2]
   850b0:	3b01      	subs	r3, #1
   850b2:	b2db      	uxtb	r3, r3
   850b4:	4013      	ands	r3, r2
   850b6:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
   850b8:	7dbb      	ldrb	r3, [r7, #22]
   850ba:	2b00      	cmp	r3, #0
   850bc:	d13d      	bne.n	8513a <f_write+0x112>
				if (fp->fptr == 0) {		/* On the top of the file? */
   850be:	68fb      	ldr	r3, [r7, #12]
   850c0:	689b      	ldr	r3, [r3, #8]
   850c2:	2b00      	cmp	r3, #0
   850c4:	d110      	bne.n	850e8 <f_write+0xc0>
					clst = fp->sclust;		/* Follow from the origin */
   850c6:	68fb      	ldr	r3, [r7, #12]
   850c8:	691b      	ldr	r3, [r3, #16]
   850ca:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   850cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   850ce:	2b00      	cmp	r3, #0
   850d0:	d113      	bne.n	850fa <f_write+0xd2>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   850d2:	68fb      	ldr	r3, [r7, #12]
   850d4:	681b      	ldr	r3, [r3, #0]
   850d6:	2100      	movs	r1, #0
   850d8:	4618      	mov	r0, r3
   850da:	4b6d      	ldr	r3, [pc, #436]	; (85290 <f_write+0x268>)
   850dc:	4798      	blx	r3
   850de:	6278      	str	r0, [r7, #36]	; 0x24
   850e0:	68fb      	ldr	r3, [r7, #12]
   850e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   850e4:	611a      	str	r2, [r3, #16]
   850e6:	e008      	b.n	850fa <f_write+0xd2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   850e8:	68fb      	ldr	r3, [r7, #12]
   850ea:	681a      	ldr	r2, [r3, #0]
   850ec:	68fb      	ldr	r3, [r7, #12]
   850ee:	695b      	ldr	r3, [r3, #20]
   850f0:	4619      	mov	r1, r3
   850f2:	4610      	mov	r0, r2
   850f4:	4b66      	ldr	r3, [pc, #408]	; (85290 <f_write+0x268>)
   850f6:	4798      	blx	r3
   850f8:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   850fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   850fc:	2b00      	cmp	r3, #0
   850fe:	f000 810e 	beq.w	8531e <f_write+0x2f6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   85102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   85104:	2b01      	cmp	r3, #1
   85106:	d108      	bne.n	8511a <f_write+0xf2>
   85108:	68fb      	ldr	r3, [r7, #12]
   8510a:	799b      	ldrb	r3, [r3, #6]
   8510c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   85110:	b2da      	uxtb	r2, r3
   85112:	68fb      	ldr	r3, [r7, #12]
   85114:	719a      	strb	r2, [r3, #6]
   85116:	2302      	movs	r3, #2
   85118:	e114      	b.n	85344 <f_write+0x31c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   8511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8511c:	f1b3 3fff 	cmp.w	r3, #4294967295
   85120:	d108      	bne.n	85134 <f_write+0x10c>
   85122:	68fb      	ldr	r3, [r7, #12]
   85124:	799b      	ldrb	r3, [r3, #6]
   85126:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8512a:	b2da      	uxtb	r2, r3
   8512c:	68fb      	ldr	r3, [r7, #12]
   8512e:	719a      	strb	r2, [r3, #6]
   85130:	2301      	movs	r3, #1
   85132:	e107      	b.n	85344 <f_write+0x31c>
				fp->clust = clst;			/* Update current cluster */
   85134:	68fb      	ldr	r3, [r7, #12]
   85136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   85138:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
   8513a:	68fb      	ldr	r3, [r7, #12]
   8513c:	799b      	ldrb	r3, [r3, #6]
   8513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   85142:	2b00      	cmp	r3, #0
   85144:	d01d      	beq.n	85182 <f_write+0x15a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   85146:	68fb      	ldr	r3, [r7, #12]
   85148:	681b      	ldr	r3, [r3, #0]
   8514a:	7858      	ldrb	r0, [r3, #1]
   8514c:	68fb      	ldr	r3, [r7, #12]
   8514e:	f103 0124 	add.w	r1, r3, #36	; 0x24
   85152:	68fb      	ldr	r3, [r7, #12]
   85154:	699a      	ldr	r2, [r3, #24]
   85156:	2301      	movs	r3, #1
   85158:	4c4e      	ldr	r4, [pc, #312]	; (85294 <f_write+0x26c>)
   8515a:	47a0      	blx	r4
   8515c:	4603      	mov	r3, r0
   8515e:	2b00      	cmp	r3, #0
   85160:	d008      	beq.n	85174 <f_write+0x14c>
					ABORT(fp->fs, FR_DISK_ERR);
   85162:	68fb      	ldr	r3, [r7, #12]
   85164:	799b      	ldrb	r3, [r3, #6]
   85166:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8516a:	b2da      	uxtb	r2, r3
   8516c:	68fb      	ldr	r3, [r7, #12]
   8516e:	719a      	strb	r2, [r3, #6]
   85170:	2301      	movs	r3, #1
   85172:	e0e7      	b.n	85344 <f_write+0x31c>
				fp->flag &= ~FA__DIRTY;
   85174:	68fb      	ldr	r3, [r7, #12]
   85176:	799b      	ldrb	r3, [r3, #6]
   85178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   8517c:	b2da      	uxtb	r2, r3
   8517e:	68fb      	ldr	r3, [r7, #12]
   85180:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   85182:	68fb      	ldr	r3, [r7, #12]
   85184:	681a      	ldr	r2, [r3, #0]
   85186:	68fb      	ldr	r3, [r7, #12]
   85188:	695b      	ldr	r3, [r3, #20]
   8518a:	4619      	mov	r1, r3
   8518c:	4610      	mov	r0, r2
   8518e:	4b42      	ldr	r3, [pc, #264]	; (85298 <f_write+0x270>)
   85190:	4798      	blx	r3
   85192:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   85194:	693b      	ldr	r3, [r7, #16]
   85196:	2b00      	cmp	r3, #0
   85198:	d108      	bne.n	851ac <f_write+0x184>
   8519a:	68fb      	ldr	r3, [r7, #12]
   8519c:	799b      	ldrb	r3, [r3, #6]
   8519e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   851a2:	b2da      	uxtb	r2, r3
   851a4:	68fb      	ldr	r3, [r7, #12]
   851a6:	719a      	strb	r2, [r3, #6]
   851a8:	2302      	movs	r3, #2
   851aa:	e0cb      	b.n	85344 <f_write+0x31c>
			sect += csect;
   851ac:	7dbb      	ldrb	r3, [r7, #22]
   851ae:	693a      	ldr	r2, [r7, #16]
   851b0:	4413      	add	r3, r2
   851b2:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   851b4:	687b      	ldr	r3, [r7, #4]
   851b6:	0a5b      	lsrs	r3, r3, #9
   851b8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   851ba:	69fb      	ldr	r3, [r7, #28]
   851bc:	2b00      	cmp	r3, #0
   851be:	d044      	beq.n	8524a <f_write+0x222>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   851c0:	7dba      	ldrb	r2, [r7, #22]
   851c2:	69fb      	ldr	r3, [r7, #28]
   851c4:	4413      	add	r3, r2
   851c6:	68fa      	ldr	r2, [r7, #12]
   851c8:	6812      	ldr	r2, [r2, #0]
   851ca:	7892      	ldrb	r2, [r2, #2]
   851cc:	4293      	cmp	r3, r2
   851ce:	d906      	bls.n	851de <f_write+0x1b6>
					cc = fp->fs->csize - csect;
   851d0:	68fb      	ldr	r3, [r7, #12]
   851d2:	681b      	ldr	r3, [r3, #0]
   851d4:	789b      	ldrb	r3, [r3, #2]
   851d6:	461a      	mov	r2, r3
   851d8:	7dbb      	ldrb	r3, [r7, #22]
   851da:	1ad3      	subs	r3, r2, r3
   851dc:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   851de:	68fb      	ldr	r3, [r7, #12]
   851e0:	681b      	ldr	r3, [r3, #0]
   851e2:	7858      	ldrb	r0, [r3, #1]
   851e4:	69fb      	ldr	r3, [r7, #28]
   851e6:	b2db      	uxtb	r3, r3
   851e8:	693a      	ldr	r2, [r7, #16]
   851ea:	69b9      	ldr	r1, [r7, #24]
   851ec:	4c29      	ldr	r4, [pc, #164]	; (85294 <f_write+0x26c>)
   851ee:	47a0      	blx	r4
   851f0:	4603      	mov	r3, r0
   851f2:	2b00      	cmp	r3, #0
   851f4:	d008      	beq.n	85208 <f_write+0x1e0>
					ABORT(fp->fs, FR_DISK_ERR);
   851f6:	68fb      	ldr	r3, [r7, #12]
   851f8:	799b      	ldrb	r3, [r3, #6]
   851fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   851fe:	b2da      	uxtb	r2, r3
   85200:	68fb      	ldr	r3, [r7, #12]
   85202:	719a      	strb	r2, [r3, #6]
   85204:	2301      	movs	r3, #1
   85206:	e09d      	b.n	85344 <f_write+0x31c>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
   85208:	68fb      	ldr	r3, [r7, #12]
   8520a:	699a      	ldr	r2, [r3, #24]
   8520c:	693b      	ldr	r3, [r7, #16]
   8520e:	1ad2      	subs	r2, r2, r3
   85210:	69fb      	ldr	r3, [r7, #28]
   85212:	429a      	cmp	r2, r3
   85214:	d215      	bcs.n	85242 <f_write+0x21a>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
   85216:	68fb      	ldr	r3, [r7, #12]
   85218:	f103 0024 	add.w	r0, r3, #36	; 0x24
   8521c:	68fb      	ldr	r3, [r7, #12]
   8521e:	699a      	ldr	r2, [r3, #24]
   85220:	693b      	ldr	r3, [r7, #16]
   85222:	1ad3      	subs	r3, r2, r3
   85224:	025b      	lsls	r3, r3, #9
   85226:	69ba      	ldr	r2, [r7, #24]
   85228:	4413      	add	r3, r2
   8522a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8522e:	4619      	mov	r1, r3
   85230:	4b1a      	ldr	r3, [pc, #104]	; (8529c <f_write+0x274>)
   85232:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
   85234:	68fb      	ldr	r3, [r7, #12]
   85236:	799b      	ldrb	r3, [r3, #6]
   85238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   8523c:	b2da      	uxtb	r2, r3
   8523e:	68fb      	ldr	r3, [r7, #12]
   85240:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   85242:	69fb      	ldr	r3, [r7, #28]
   85244:	025b      	lsls	r3, r3, #9
   85246:	623b      	str	r3, [r7, #32]
				continue;
   85248:	e050      	b.n	852ec <f_write+0x2c4>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
   8524a:	68fb      	ldr	r3, [r7, #12]
   8524c:	699a      	ldr	r2, [r3, #24]
   8524e:	693b      	ldr	r3, [r7, #16]
   85250:	429a      	cmp	r2, r3
   85252:	d027      	beq.n	852a4 <f_write+0x27c>
				if (fp->fptr < fp->fsize &&
   85254:	68fb      	ldr	r3, [r7, #12]
   85256:	689a      	ldr	r2, [r3, #8]
   85258:	68fb      	ldr	r3, [r7, #12]
   8525a:	68db      	ldr	r3, [r3, #12]
   8525c:	429a      	cmp	r2, r3
   8525e:	d221      	bcs.n	852a4 <f_write+0x27c>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
   85260:	68fb      	ldr	r3, [r7, #12]
   85262:	681b      	ldr	r3, [r3, #0]
   85264:	7858      	ldrb	r0, [r3, #1]
   85266:	68fb      	ldr	r3, [r7, #12]
   85268:	f103 0124 	add.w	r1, r3, #36	; 0x24
   8526c:	2301      	movs	r3, #1
   8526e:	693a      	ldr	r2, [r7, #16]
   85270:	4c0b      	ldr	r4, [pc, #44]	; (852a0 <f_write+0x278>)
   85272:	47a0      	blx	r4
   85274:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
   85276:	2b00      	cmp	r3, #0
   85278:	d014      	beq.n	852a4 <f_write+0x27c>
						ABORT(fp->fs, FR_DISK_ERR);
   8527a:	68fb      	ldr	r3, [r7, #12]
   8527c:	799b      	ldrb	r3, [r3, #6]
   8527e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   85282:	b2da      	uxtb	r2, r3
   85284:	68fb      	ldr	r3, [r7, #12]
   85286:	719a      	strb	r2, [r3, #6]
   85288:	2301      	movs	r3, #1
   8528a:	e05b      	b.n	85344 <f_write+0x31c>
   8528c:	00084bcd 	.word	0x00084bcd
   85290:	0008365d 	.word	0x0008365d
   85294:	00082d39 	.word	0x00082d39
   85298:	00083211 	.word	0x00083211
   8529c:	00082f15 	.word	0x00082f15
   852a0:	00082c89 	.word	0x00082c89
			}
#endif
			fp->dsect = sect;
   852a4:	68fb      	ldr	r3, [r7, #12]
   852a6:	693a      	ldr	r2, [r7, #16]
   852a8:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   852aa:	68fb      	ldr	r3, [r7, #12]
   852ac:	689b      	ldr	r3, [r3, #8]
   852ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
   852b2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
   852b6:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   852b8:	6a3a      	ldr	r2, [r7, #32]
   852ba:	687b      	ldr	r3, [r7, #4]
   852bc:	429a      	cmp	r2, r3
   852be:	d901      	bls.n	852c4 <f_write+0x29c>
   852c0:	687b      	ldr	r3, [r7, #4]
   852c2:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   852c4:	68fb      	ldr	r3, [r7, #12]
   852c6:	689b      	ldr	r3, [r3, #8]
   852c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   852cc:	3320      	adds	r3, #32
   852ce:	68fa      	ldr	r2, [r7, #12]
   852d0:	4413      	add	r3, r2
   852d2:	3304      	adds	r3, #4
   852d4:	6a3a      	ldr	r2, [r7, #32]
   852d6:	69b9      	ldr	r1, [r7, #24]
   852d8:	4618      	mov	r0, r3
   852da:	4b1c      	ldr	r3, [pc, #112]	; (8534c <f_write+0x324>)
   852dc:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
   852de:	68fb      	ldr	r3, [r7, #12]
   852e0:	799b      	ldrb	r3, [r3, #6]
   852e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   852e6:	b2da      	uxtb	r2, r3
   852e8:	68fb      	ldr	r3, [r7, #12]
   852ea:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   852ec:	69ba      	ldr	r2, [r7, #24]
   852ee:	6a3b      	ldr	r3, [r7, #32]
   852f0:	4413      	add	r3, r2
   852f2:	61bb      	str	r3, [r7, #24]
   852f4:	68fb      	ldr	r3, [r7, #12]
   852f6:	689a      	ldr	r2, [r3, #8]
   852f8:	6a3b      	ldr	r3, [r7, #32]
   852fa:	441a      	add	r2, r3
   852fc:	68fb      	ldr	r3, [r7, #12]
   852fe:	609a      	str	r2, [r3, #8]
   85300:	683b      	ldr	r3, [r7, #0]
   85302:	681a      	ldr	r2, [r3, #0]
   85304:	6a3b      	ldr	r3, [r7, #32]
   85306:	441a      	add	r2, r3
   85308:	683b      	ldr	r3, [r7, #0]
   8530a:	601a      	str	r2, [r3, #0]
   8530c:	687a      	ldr	r2, [r7, #4]
   8530e:	6a3b      	ldr	r3, [r7, #32]
   85310:	1ad3      	subs	r3, r2, r3
   85312:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   85314:	687b      	ldr	r3, [r7, #4]
   85316:	2b00      	cmp	r3, #0
   85318:	f47f aebc 	bne.w	85094 <f_write+0x6c>
   8531c:	e000      	b.n	85320 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   8531e:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   85320:	68fb      	ldr	r3, [r7, #12]
   85322:	689a      	ldr	r2, [r3, #8]
   85324:	68fb      	ldr	r3, [r7, #12]
   85326:	68db      	ldr	r3, [r3, #12]
   85328:	429a      	cmp	r2, r3
   8532a:	d903      	bls.n	85334 <f_write+0x30c>
   8532c:	68fb      	ldr	r3, [r7, #12]
   8532e:	689a      	ldr	r2, [r3, #8]
   85330:	68fb      	ldr	r3, [r7, #12]
   85332:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   85334:	68fb      	ldr	r3, [r7, #12]
   85336:	799b      	ldrb	r3, [r3, #6]
   85338:	f043 0320 	orr.w	r3, r3, #32
   8533c:	b2da      	uxtb	r2, r3
   8533e:	68fb      	ldr	r3, [r7, #12]
   85340:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   85342:	2300      	movs	r3, #0
}
   85344:	4618      	mov	r0, r3
   85346:	372c      	adds	r7, #44	; 0x2c
   85348:	46bd      	mov	sp, r7
   8534a:	bd90      	pop	{r4, r7, pc}
   8534c:	00082f15 	.word	0x00082f15

00085350 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   85350:	b590      	push	{r4, r7, lr}
   85352:	b087      	sub	sp, #28
   85354:	af00      	add	r7, sp, #0
   85356:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   85358:	687b      	ldr	r3, [r7, #4]
   8535a:	681a      	ldr	r2, [r3, #0]
   8535c:	687b      	ldr	r3, [r7, #4]
   8535e:	889b      	ldrh	r3, [r3, #4]
   85360:	4619      	mov	r1, r3
   85362:	4610      	mov	r0, r2
   85364:	4b5a      	ldr	r3, [pc, #360]	; (854d0 <f_sync+0x180>)
   85366:	4798      	blx	r3
   85368:	4603      	mov	r3, r0
   8536a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
   8536c:	7dfb      	ldrb	r3, [r7, #23]
   8536e:	2b00      	cmp	r3, #0
   85370:	f040 80a8 	bne.w	854c4 <f_sync+0x174>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   85374:	687b      	ldr	r3, [r7, #4]
   85376:	799b      	ldrb	r3, [r3, #6]
   85378:	f003 0320 	and.w	r3, r3, #32
   8537c:	2b00      	cmp	r3, #0
   8537e:	f000 80a1 	beq.w	854c4 <f_sync+0x174>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
   85382:	687b      	ldr	r3, [r7, #4]
   85384:	799b      	ldrb	r3, [r3, #6]
   85386:	f003 0340 	and.w	r3, r3, #64	; 0x40
   8538a:	2b00      	cmp	r3, #0
   8538c:	d016      	beq.n	853bc <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   8538e:	687b      	ldr	r3, [r7, #4]
   85390:	681b      	ldr	r3, [r3, #0]
   85392:	7858      	ldrb	r0, [r3, #1]
   85394:	687b      	ldr	r3, [r7, #4]
   85396:	f103 0124 	add.w	r1, r3, #36	; 0x24
   8539a:	687b      	ldr	r3, [r7, #4]
   8539c:	699a      	ldr	r2, [r3, #24]
   8539e:	2301      	movs	r3, #1
   853a0:	4c4c      	ldr	r4, [pc, #304]	; (854d4 <f_sync+0x184>)
   853a2:	47a0      	blx	r4
   853a4:	4603      	mov	r3, r0
   853a6:	2b00      	cmp	r3, #0
   853a8:	d001      	beq.n	853ae <f_sync+0x5e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
   853aa:	2301      	movs	r3, #1
   853ac:	e08b      	b.n	854c6 <f_sync+0x176>
				fp->flag &= ~FA__DIRTY;
   853ae:	687b      	ldr	r3, [r7, #4]
   853b0:	799b      	ldrb	r3, [r3, #6]
   853b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   853b6:	b2da      	uxtb	r2, r3
   853b8:	687b      	ldr	r3, [r7, #4]
   853ba:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   853bc:	687b      	ldr	r3, [r7, #4]
   853be:	681a      	ldr	r2, [r3, #0]
   853c0:	687b      	ldr	r3, [r7, #4]
   853c2:	69db      	ldr	r3, [r3, #28]
   853c4:	4619      	mov	r1, r3
   853c6:	4610      	mov	r0, r2
   853c8:	4b43      	ldr	r3, [pc, #268]	; (854d8 <f_sync+0x188>)
   853ca:	4798      	blx	r3
   853cc:	4603      	mov	r3, r0
   853ce:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
   853d0:	7dfb      	ldrb	r3, [r7, #23]
   853d2:	2b00      	cmp	r3, #0
   853d4:	d176      	bne.n	854c4 <f_sync+0x174>
				dir = fp->dir_ptr;
   853d6:	687b      	ldr	r3, [r7, #4]
   853d8:	6a1b      	ldr	r3, [r3, #32]
   853da:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   853dc:	693b      	ldr	r3, [r7, #16]
   853de:	330b      	adds	r3, #11
   853e0:	693a      	ldr	r2, [r7, #16]
   853e2:	320b      	adds	r2, #11
   853e4:	7812      	ldrb	r2, [r2, #0]
   853e6:	f042 0220 	orr.w	r2, r2, #32
   853ea:	b2d2      	uxtb	r2, r2
   853ec:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   853ee:	693b      	ldr	r3, [r7, #16]
   853f0:	331c      	adds	r3, #28
   853f2:	687a      	ldr	r2, [r7, #4]
   853f4:	68d2      	ldr	r2, [r2, #12]
   853f6:	b2d2      	uxtb	r2, r2
   853f8:	701a      	strb	r2, [r3, #0]
   853fa:	693b      	ldr	r3, [r7, #16]
   853fc:	331d      	adds	r3, #29
   853fe:	687a      	ldr	r2, [r7, #4]
   85400:	68d2      	ldr	r2, [r2, #12]
   85402:	b292      	uxth	r2, r2
   85404:	0a12      	lsrs	r2, r2, #8
   85406:	b292      	uxth	r2, r2
   85408:	b2d2      	uxtb	r2, r2
   8540a:	701a      	strb	r2, [r3, #0]
   8540c:	693b      	ldr	r3, [r7, #16]
   8540e:	331e      	adds	r3, #30
   85410:	687a      	ldr	r2, [r7, #4]
   85412:	68d2      	ldr	r2, [r2, #12]
   85414:	0c12      	lsrs	r2, r2, #16
   85416:	b2d2      	uxtb	r2, r2
   85418:	701a      	strb	r2, [r3, #0]
   8541a:	693b      	ldr	r3, [r7, #16]
   8541c:	331f      	adds	r3, #31
   8541e:	687a      	ldr	r2, [r7, #4]
   85420:	68d2      	ldr	r2, [r2, #12]
   85422:	0e12      	lsrs	r2, r2, #24
   85424:	b2d2      	uxtb	r2, r2
   85426:	701a      	strb	r2, [r3, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   85428:	693b      	ldr	r3, [r7, #16]
   8542a:	331a      	adds	r3, #26
   8542c:	687a      	ldr	r2, [r7, #4]
   8542e:	6912      	ldr	r2, [r2, #16]
   85430:	b2d2      	uxtb	r2, r2
   85432:	701a      	strb	r2, [r3, #0]
   85434:	693b      	ldr	r3, [r7, #16]
   85436:	331b      	adds	r3, #27
   85438:	687a      	ldr	r2, [r7, #4]
   8543a:	6912      	ldr	r2, [r2, #16]
   8543c:	b292      	uxth	r2, r2
   8543e:	0a12      	lsrs	r2, r2, #8
   85440:	b292      	uxth	r2, r2
   85442:	b2d2      	uxtb	r2, r2
   85444:	701a      	strb	r2, [r3, #0]
   85446:	693b      	ldr	r3, [r7, #16]
   85448:	3314      	adds	r3, #20
   8544a:	687a      	ldr	r2, [r7, #4]
   8544c:	6912      	ldr	r2, [r2, #16]
   8544e:	0c12      	lsrs	r2, r2, #16
   85450:	b2d2      	uxtb	r2, r2
   85452:	701a      	strb	r2, [r3, #0]
   85454:	693b      	ldr	r3, [r7, #16]
   85456:	3315      	adds	r3, #21
   85458:	687a      	ldr	r2, [r7, #4]
   8545a:	6912      	ldr	r2, [r2, #16]
   8545c:	0c12      	lsrs	r2, r2, #16
   8545e:	b292      	uxth	r2, r2
   85460:	0a12      	lsrs	r2, r2, #8
   85462:	b292      	uxth	r2, r2
   85464:	b2d2      	uxtb	r2, r2
   85466:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();						/* Update updated time */
   85468:	4b1c      	ldr	r3, [pc, #112]	; (854dc <f_sync+0x18c>)
   8546a:	4798      	blx	r3
   8546c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   8546e:	693b      	ldr	r3, [r7, #16]
   85470:	3316      	adds	r3, #22
   85472:	68fa      	ldr	r2, [r7, #12]
   85474:	b2d2      	uxtb	r2, r2
   85476:	701a      	strb	r2, [r3, #0]
   85478:	693b      	ldr	r3, [r7, #16]
   8547a:	3317      	adds	r3, #23
   8547c:	68fa      	ldr	r2, [r7, #12]
   8547e:	b292      	uxth	r2, r2
   85480:	0a12      	lsrs	r2, r2, #8
   85482:	b292      	uxth	r2, r2
   85484:	b2d2      	uxtb	r2, r2
   85486:	701a      	strb	r2, [r3, #0]
   85488:	693b      	ldr	r3, [r7, #16]
   8548a:	3318      	adds	r3, #24
   8548c:	68fa      	ldr	r2, [r7, #12]
   8548e:	0c12      	lsrs	r2, r2, #16
   85490:	b2d2      	uxtb	r2, r2
   85492:	701a      	strb	r2, [r3, #0]
   85494:	693b      	ldr	r3, [r7, #16]
   85496:	3319      	adds	r3, #25
   85498:	68fa      	ldr	r2, [r7, #12]
   8549a:	0e12      	lsrs	r2, r2, #24
   8549c:	b2d2      	uxtb	r2, r2
   8549e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   854a0:	687b      	ldr	r3, [r7, #4]
   854a2:	799b      	ldrb	r3, [r3, #6]
   854a4:	f023 0320 	bic.w	r3, r3, #32
   854a8:	b2da      	uxtb	r2, r3
   854aa:	687b      	ldr	r3, [r7, #4]
   854ac:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   854ae:	687b      	ldr	r3, [r7, #4]
   854b0:	681b      	ldr	r3, [r3, #0]
   854b2:	2201      	movs	r2, #1
   854b4:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   854b6:	687b      	ldr	r3, [r7, #4]
   854b8:	681b      	ldr	r3, [r3, #0]
   854ba:	4618      	mov	r0, r3
   854bc:	4b08      	ldr	r3, [pc, #32]	; (854e0 <f_sync+0x190>)
   854be:	4798      	blx	r3
   854c0:	4603      	mov	r3, r0
   854c2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   854c4:	7dfb      	ldrb	r3, [r7, #23]
}
   854c6:	4618      	mov	r0, r3
   854c8:	371c      	adds	r7, #28
   854ca:	46bd      	mov	sp, r7
   854cc:	bd90      	pop	{r4, r7, pc}
   854ce:	bf00      	nop
   854d0:	00084bcd 	.word	0x00084bcd
   854d4:	00082d39 	.word	0x00082d39
   854d8:	00083001 	.word	0x00083001
   854dc:	00082ea9 	.word	0x00082ea9
   854e0:	000830bd 	.word	0x000830bd

000854e4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   854e4:	b580      	push	{r7, lr}
   854e6:	b084      	sub	sp, #16
   854e8:	af00      	add	r7, sp, #0
   854ea:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   854ec:	6878      	ldr	r0, [r7, #4]
   854ee:	4b07      	ldr	r3, [pc, #28]	; (8550c <f_close+0x28>)
   854f0:	4798      	blx	r3
   854f2:	4603      	mov	r3, r0
   854f4:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   854f6:	7bfb      	ldrb	r3, [r7, #15]
   854f8:	2b00      	cmp	r3, #0
   854fa:	d102      	bne.n	85502 <f_close+0x1e>
   854fc:	687b      	ldr	r3, [r7, #4]
   854fe:	2200      	movs	r2, #0
   85500:	601a      	str	r2, [r3, #0]
	return res;
   85502:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
   85504:	4618      	mov	r0, r3
   85506:	3710      	adds	r7, #16
   85508:	46bd      	mov	sp, r7
   8550a:	bd80      	pop	{r7, pc}
   8550c:	00085351 	.word	0x00085351

00085510 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   85510:	b480      	push	{r7}
   85512:	b085      	sub	sp, #20
   85514:	af00      	add	r7, sp, #0
   85516:	4603      	mov	r3, r0
   85518:	6039      	str	r1, [r7, #0]
   8551a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   8551c:	88fb      	ldrh	r3, [r7, #6]
   8551e:	2b7f      	cmp	r3, #127	; 0x7f
   85520:	d802      	bhi.n	85528 <ff_convert+0x18>
		c = src;
   85522:	88fb      	ldrh	r3, [r7, #6]
   85524:	81fb      	strh	r3, [r7, #14]
   85526:	e025      	b.n	85574 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   85528:	683b      	ldr	r3, [r7, #0]
   8552a:	2b00      	cmp	r3, #0
   8552c:	d00b      	beq.n	85546 <ff_convert+0x36>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   8552e:	88fb      	ldrh	r3, [r7, #6]
   85530:	2bff      	cmp	r3, #255	; 0xff
   85532:	d805      	bhi.n	85540 <ff_convert+0x30>
   85534:	88fb      	ldrh	r3, [r7, #6]
   85536:	3b80      	subs	r3, #128	; 0x80
   85538:	4a11      	ldr	r2, [pc, #68]	; (85580 <ff_convert+0x70>)
   8553a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   8553e:	e000      	b.n	85542 <ff_convert+0x32>
   85540:	2300      	movs	r3, #0
   85542:	81fb      	strh	r3, [r7, #14]
   85544:	e016      	b.n	85574 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   85546:	2300      	movs	r3, #0
   85548:	81fb      	strh	r3, [r7, #14]
   8554a:	e009      	b.n	85560 <ff_convert+0x50>
				if (src == Tbl[c]) break;
   8554c:	89fb      	ldrh	r3, [r7, #14]
   8554e:	4a0c      	ldr	r2, [pc, #48]	; (85580 <ff_convert+0x70>)
   85550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   85554:	88fa      	ldrh	r2, [r7, #6]
   85556:	429a      	cmp	r2, r3
   85558:	d006      	beq.n	85568 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
   8555a:	89fb      	ldrh	r3, [r7, #14]
   8555c:	3301      	adds	r3, #1
   8555e:	81fb      	strh	r3, [r7, #14]
   85560:	89fb      	ldrh	r3, [r7, #14]
   85562:	2b7f      	cmp	r3, #127	; 0x7f
   85564:	d9f2      	bls.n	8554c <ff_convert+0x3c>
   85566:	e000      	b.n	8556a <ff_convert+0x5a>
				if (src == Tbl[c]) break;
   85568:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
   8556a:	89fb      	ldrh	r3, [r7, #14]
   8556c:	3380      	adds	r3, #128	; 0x80
   8556e:	b29b      	uxth	r3, r3
   85570:	b2db      	uxtb	r3, r3
   85572:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
   85574:	89fb      	ldrh	r3, [r7, #14]
}
   85576:	4618      	mov	r0, r3
   85578:	3714      	adds	r7, #20
   8557a:	46bd      	mov	sp, r7
   8557c:	bc80      	pop	{r7}
   8557e:	4770      	bx	lr
   85580:	000878b0 	.word	0x000878b0

00085584 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   85584:	b480      	push	{r7}
   85586:	b085      	sub	sp, #20
   85588:	af00      	add	r7, sp, #0
   8558a:	4603      	mov	r3, r0
   8558c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   8558e:	2300      	movs	r3, #0
   85590:	60fb      	str	r3, [r7, #12]
   85592:	e002      	b.n	8559a <ff_wtoupper+0x16>
   85594:	68fb      	ldr	r3, [r7, #12]
   85596:	3301      	adds	r3, #1
   85598:	60fb      	str	r3, [r7, #12]
   8559a:	4a0f      	ldr	r2, [pc, #60]	; (855d8 <ff_wtoupper+0x54>)
   8559c:	68fb      	ldr	r3, [r7, #12]
   8559e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   855a2:	2b00      	cmp	r3, #0
   855a4:	d006      	beq.n	855b4 <ff_wtoupper+0x30>
   855a6:	4a0c      	ldr	r2, [pc, #48]	; (855d8 <ff_wtoupper+0x54>)
   855a8:	68fb      	ldr	r3, [r7, #12]
   855aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   855ae:	88fa      	ldrh	r2, [r7, #6]
   855b0:	429a      	cmp	r2, r3
   855b2:	d1ef      	bne.n	85594 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   855b4:	4a08      	ldr	r2, [pc, #32]	; (855d8 <ff_wtoupper+0x54>)
   855b6:	68fb      	ldr	r3, [r7, #12]
   855b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   855bc:	2b00      	cmp	r3, #0
   855be:	d004      	beq.n	855ca <ff_wtoupper+0x46>
   855c0:	4a06      	ldr	r2, [pc, #24]	; (855dc <ff_wtoupper+0x58>)
   855c2:	68fb      	ldr	r3, [r7, #12]
   855c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   855c8:	e000      	b.n	855cc <ff_wtoupper+0x48>
   855ca:	88fb      	ldrh	r3, [r7, #6]
}
   855cc:	4618      	mov	r0, r3
   855ce:	3714      	adds	r7, #20
   855d0:	46bd      	mov	sp, r7
   855d2:	bc80      	pop	{r7}
   855d4:	4770      	bx	lr
   855d6:	bf00      	nop
   855d8:	000879b0 	.word	0x000879b0
   855dc:	00087b90 	.word	0x00087b90

000855e0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   855e0:	b480      	push	{r7}
   855e2:	b083      	sub	sp, #12
   855e4:	af00      	add	r7, sp, #0
   855e6:	4603      	mov	r3, r0
   855e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   855ea:	4908      	ldr	r1, [pc, #32]	; (8560c <NVIC_EnableIRQ+0x2c>)
   855ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
   855f0:	095b      	lsrs	r3, r3, #5
   855f2:	79fa      	ldrb	r2, [r7, #7]
   855f4:	f002 021f 	and.w	r2, r2, #31
   855f8:	2001      	movs	r0, #1
   855fa:	fa00 f202 	lsl.w	r2, r0, r2
   855fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   85602:	bf00      	nop
   85604:	370c      	adds	r7, #12
   85606:	46bd      	mov	sp, r7
   85608:	bc80      	pop	{r7}
   8560a:	4770      	bx	lr
   8560c:	e000e100 	.word	0xe000e100

00085610 <osc_get_rate>:
{
   85610:	b480      	push	{r7}
   85612:	b083      	sub	sp, #12
   85614:	af00      	add	r7, sp, #0
   85616:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   85618:	687b      	ldr	r3, [r7, #4]
   8561a:	2b07      	cmp	r3, #7
   8561c:	d825      	bhi.n	8566a <osc_get_rate+0x5a>
   8561e:	a201      	add	r2, pc, #4	; (adr r2, 85624 <osc_get_rate+0x14>)
   85620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85624:	00085645 	.word	0x00085645
   85628:	0008564b 	.word	0x0008564b
   8562c:	00085651 	.word	0x00085651
   85630:	00085657 	.word	0x00085657
   85634:	0008565b 	.word	0x0008565b
   85638:	0008565f 	.word	0x0008565f
   8563c:	00085663 	.word	0x00085663
   85640:	00085667 	.word	0x00085667
		return OSC_SLCK_32K_RC_HZ;
   85644:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   85648:	e010      	b.n	8566c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8564a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8564e:	e00d      	b.n	8566c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   85650:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   85654:	e00a      	b.n	8566c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   85656:	4b08      	ldr	r3, [pc, #32]	; (85678 <osc_get_rate+0x68>)
   85658:	e008      	b.n	8566c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8565a:	4b08      	ldr	r3, [pc, #32]	; (8567c <osc_get_rate+0x6c>)
   8565c:	e006      	b.n	8566c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8565e:	4b08      	ldr	r3, [pc, #32]	; (85680 <osc_get_rate+0x70>)
   85660:	e004      	b.n	8566c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   85662:	4b07      	ldr	r3, [pc, #28]	; (85680 <osc_get_rate+0x70>)
   85664:	e002      	b.n	8566c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   85666:	4b06      	ldr	r3, [pc, #24]	; (85680 <osc_get_rate+0x70>)
   85668:	e000      	b.n	8566c <osc_get_rate+0x5c>
	return 0;
   8566a:	2300      	movs	r3, #0
}
   8566c:	4618      	mov	r0, r3
   8566e:	370c      	adds	r7, #12
   85670:	46bd      	mov	sp, r7
   85672:	bc80      	pop	{r7}
   85674:	4770      	bx	lr
   85676:	bf00      	nop
   85678:	003d0900 	.word	0x003d0900
   8567c:	007a1200 	.word	0x007a1200
   85680:	00b71b00 	.word	0x00b71b00

00085684 <sysclk_get_main_hz>:
{
   85684:	b580      	push	{r7, lr}
   85686:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   85688:	2006      	movs	r0, #6
   8568a:	4b04      	ldr	r3, [pc, #16]	; (8569c <sysclk_get_main_hz+0x18>)
   8568c:	4798      	blx	r3
   8568e:	4602      	mov	r2, r0
   85690:	4613      	mov	r3, r2
   85692:	00db      	lsls	r3, r3, #3
   85694:	1a9b      	subs	r3, r3, r2
   85696:	005b      	lsls	r3, r3, #1
}
   85698:	4618      	mov	r0, r3
   8569a:	bd80      	pop	{r7, pc}
   8569c:	00085611 	.word	0x00085611

000856a0 <sysclk_get_peripheral_hz>:
{
   856a0:	b580      	push	{r7, lr}
   856a2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   856a4:	4b02      	ldr	r3, [pc, #8]	; (856b0 <sysclk_get_peripheral_hz+0x10>)
   856a6:	4798      	blx	r3
   856a8:	4603      	mov	r3, r0
   856aa:	085b      	lsrs	r3, r3, #1
}
   856ac:	4618      	mov	r0, r3
   856ae:	bd80      	pop	{r7, pc}
   856b0:	00085685 	.word	0x00085685

000856b4 <spi_init>:
sensor_to_motor_t stm;

uint8_t sens_buf[sizeof(stm)];

void spi_init(void)
{
   856b4:	b580      	push	{r7, lr}
   856b6:	af00      	add	r7, sp, #0
    configure_dmac();
   856b8:	4b02      	ldr	r3, [pc, #8]	; (856c4 <spi_init+0x10>)
   856ba:	4798      	blx	r3
    spi_master_initialize();
   856bc:	4b02      	ldr	r3, [pc, #8]	; (856c8 <spi_init+0x14>)
   856be:	4798      	blx	r3
}
   856c0:	bf00      	nop
   856c2:	bd80      	pop	{r7, pc}
   856c4:	0008573d 	.word	0x0008573d
   856c8:	000856cd 	.word	0x000856cd

000856cc <spi_master_initialize>:

void spi_master_initialize(void)
{
   856cc:	b590      	push	{r4, r7, lr}
   856ce:	b085      	sub	sp, #20
   856d0:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   856d2:	2101      	movs	r1, #1
   856d4:	4810      	ldr	r0, [pc, #64]	; (85718 <spi_master_initialize+0x4c>)
   856d6:	4b11      	ldr	r3, [pc, #68]	; (8571c <spi_master_initialize+0x50>)
   856d8:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   856da:	2100      	movs	r1, #0
   856dc:	480e      	ldr	r0, [pc, #56]	; (85718 <spi_master_initialize+0x4c>)
   856de:	4b0f      	ldr	r3, [pc, #60]	; (8571c <spi_master_initialize+0x50>)
   856e0:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   856e2:	2012      	movs	r0, #18
   856e4:	4b0e      	ldr	r3, [pc, #56]	; (85720 <spi_master_initialize+0x54>)
   856e6:	4798      	blx	r3
    usart_spi_disable(USART1);
   856e8:	480e      	ldr	r0, [pc, #56]	; (85724 <spi_master_initialize+0x58>)
   856ea:	4b0f      	ldr	r3, [pc, #60]	; (85728 <spi_master_initialize+0x5c>)
   856ec:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   856ee:	4b0f      	ldr	r3, [pc, #60]	; (8572c <spi_master_initialize+0x60>)
   856f0:	463c      	mov	r4, r7
   856f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   856f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   856f8:	4b0d      	ldr	r3, [pc, #52]	; (85730 <spi_master_initialize+0x64>)
   856fa:	4798      	blx	r3
   856fc:	4602      	mov	r2, r0
   856fe:	463b      	mov	r3, r7
   85700:	4619      	mov	r1, r3
   85702:	4808      	ldr	r0, [pc, #32]	; (85724 <spi_master_initialize+0x58>)
   85704:	4b0b      	ldr	r3, [pc, #44]	; (85734 <spi_master_initialize+0x68>)
   85706:	4798      	blx	r3
    usart_spi_enable(USART1);
   85708:	4806      	ldr	r0, [pc, #24]	; (85724 <spi_master_initialize+0x58>)
   8570a:	4b0b      	ldr	r3, [pc, #44]	; (85738 <spi_master_initialize+0x6c>)
   8570c:	4798      	blx	r3
}
   8570e:	bf00      	nop
   85710:	3714      	adds	r7, #20
   85712:	46bd      	mov	sp, r7
   85714:	bd90      	pop	{r4, r7, pc}
   85716:	bf00      	nop
   85718:	400c4000 	.word	0x400c4000
   8571c:	0008672b 	.word	0x0008672b
   85720:	00086ae9 	.word	0x00086ae9
   85724:	4009c000 	.word	0x4009c000
   85728:	00081be9 	.word	0x00081be9
   8572c:	00087d70 	.word	0x00087d70
   85730:	000856a1 	.word	0x000856a1
   85734:	000829c9 	.word	0x000829c9
   85738:	00081bc5 	.word	0x00081bc5

0008573c <configure_dmac>:
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
    dmac_channel_enable(DMAC, 0);
}

void configure_dmac(void)
{
   8573c:	b580      	push	{r7, lr}
   8573e:	b082      	sub	sp, #8
   85740:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   85742:	2027      	movs	r0, #39	; 0x27
   85744:	4b18      	ldr	r3, [pc, #96]	; (857a8 <configure_dmac+0x6c>)
   85746:	4798      	blx	r3
    dmac_init(DMAC);
   85748:	4818      	ldr	r0, [pc, #96]	; (857ac <configure_dmac+0x70>)
   8574a:	4b19      	ldr	r3, [pc, #100]	; (857b0 <configure_dmac+0x74>)
   8574c:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   8574e:	2110      	movs	r1, #16
   85750:	4816      	ldr	r0, [pc, #88]	; (857ac <configure_dmac+0x70>)
   85752:	4b18      	ldr	r3, [pc, #96]	; (857b4 <configure_dmac+0x78>)
   85754:	4798      	blx	r3
    dmac_enable(DMAC);
   85756:	4815      	ldr	r0, [pc, #84]	; (857ac <configure_dmac+0x70>)
   85758:	4b17      	ldr	r3, [pc, #92]	; (857b8 <configure_dmac+0x7c>)
   8575a:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   8575c:	2300      	movs	r3, #0
   8575e:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   85760:	687b      	ldr	r3, [r7, #4]
   85762:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   85766:	f043 030e 	orr.w	r3, r3, #14
   8576a:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   8576c:	687a      	ldr	r2, [r7, #4]
   8576e:	2100      	movs	r1, #0
   85770:	480e      	ldr	r0, [pc, #56]	; (857ac <configure_dmac+0x70>)
   85772:	4b12      	ldr	r3, [pc, #72]	; (857bc <configure_dmac+0x80>)
   85774:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   85776:	2300      	movs	r3, #0
   85778:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   8577a:	687b      	ldr	r3, [r7, #4]
   8577c:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   85780:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   85784:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   85786:	687a      	ldr	r2, [r7, #4]
   85788:	2101      	movs	r1, #1
   8578a:	4808      	ldr	r0, [pc, #32]	; (857ac <configure_dmac+0x70>)
   8578c:	4b0b      	ldr	r3, [pc, #44]	; (857bc <configure_dmac+0x80>)
   8578e:	4798      	blx	r3
    ul_cfg = 0;
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
    #endif
    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   85790:	2027      	movs	r0, #39	; 0x27
   85792:	4b0b      	ldr	r3, [pc, #44]	; (857c0 <configure_dmac+0x84>)
   85794:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   85796:	2101      	movs	r1, #1
   85798:	4804      	ldr	r0, [pc, #16]	; (857ac <configure_dmac+0x70>)
   8579a:	4b0a      	ldr	r3, [pc, #40]	; (857c4 <configure_dmac+0x88>)
   8579c:	4798      	blx	r3
}
   8579e:	bf00      	nop
   857a0:	3708      	adds	r7, #8
   857a2:	46bd      	mov	sp, r7
   857a4:	bd80      	pop	{r7, pc}
   857a6:	bf00      	nop
   857a8:	00086ae9 	.word	0x00086ae9
   857ac:	400c4000 	.word	0x400c4000
   857b0:	00086665 	.word	0x00086665
   857b4:	00086681 	.word	0x00086681
   857b8:	000866a7 	.word	0x000866a7
   857bc:	0008681b 	.word	0x0008681b
   857c0:	000855e1 	.word	0x000855e1
   857c4:	000866dd 	.word	0x000866dd

000857c8 <DMAC_Handler>:

void DMAC_Handler(void)
{
   857c8:	b580      	push	{r7, lr}
   857ca:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   857cc:	480b      	ldr	r0, [pc, #44]	; (857fc <DMAC_Handler+0x34>)
   857ce:	4b0c      	ldr	r3, [pc, #48]	; (85800 <DMAC_Handler+0x38>)
   857d0:	4798      	blx	r3
   857d2:	4602      	mov	r2, r0
   857d4:	4b0b      	ldr	r3, [pc, #44]	; (85804 <DMAC_Handler+0x3c>)
   857d6:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   857d8:	4b0a      	ldr	r3, [pc, #40]	; (85804 <DMAC_Handler+0x3c>)
   857da:	681b      	ldr	r3, [r3, #0]
   857dc:	f003 0301 	and.w	r3, r3, #1
   857e0:	2b00      	cmp	r3, #0
   857e2:	d008      	beq.n	857f6 <DMAC_Handler+0x2e>
    {
        usart_spi_release_chip_select(USART1);
   857e4:	4808      	ldr	r0, [pc, #32]	; (85808 <DMAC_Handler+0x40>)
   857e6:	4b09      	ldr	r3, [pc, #36]	; (8580c <DMAC_Handler+0x44>)
   857e8:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   857ea:	4b09      	ldr	r3, [pc, #36]	; (85810 <DMAC_Handler+0x48>)
   857ec:	4a09      	ldr	r2, [pc, #36]	; (85814 <DMAC_Handler+0x4c>)
   857ee:	8811      	ldrh	r1, [r2, #0]
   857f0:	7892      	ldrb	r2, [r2, #2]
   857f2:	8019      	strh	r1, [r3, #0]
   857f4:	709a      	strb	r2, [r3, #2]
    }
}
   857f6:	bf00      	nop
   857f8:	bd80      	pop	{r7, pc}
   857fa:	bf00      	nop
   857fc:	400c4000 	.word	0x400c4000
   85800:	000866f7 	.word	0x000866f7
   85804:	20070634 	.word	0x20070634
   85808:	4009c000 	.word	0x4009c000
   8580c:	00082b9d 	.word	0x00082b9d
   85810:	2007088c 	.word	0x2007088c
   85814:	20070884 	.word	0x20070884

00085818 <NVIC_EnableIRQ>:
{
   85818:	b480      	push	{r7}
   8581a:	b083      	sub	sp, #12
   8581c:	af00      	add	r7, sp, #0
   8581e:	4603      	mov	r3, r0
   85820:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   85822:	4908      	ldr	r1, [pc, #32]	; (85844 <NVIC_EnableIRQ+0x2c>)
   85824:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85828:	095b      	lsrs	r3, r3, #5
   8582a:	79fa      	ldrb	r2, [r7, #7]
   8582c:	f002 021f 	and.w	r2, r2, #31
   85830:	2001      	movs	r0, #1
   85832:	fa00 f202 	lsl.w	r2, r0, r2
   85836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8583a:	bf00      	nop
   8583c:	370c      	adds	r7, #12
   8583e:	46bd      	mov	sp, r7
   85840:	bc80      	pop	{r7}
   85842:	4770      	bx	lr
   85844:	e000e100 	.word	0xe000e100

00085848 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   85848:	b480      	push	{r7}
   8584a:	b083      	sub	sp, #12
   8584c:	af00      	add	r7, sp, #0
   8584e:	4603      	mov	r3, r0
   85850:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   85852:	4909      	ldr	r1, [pc, #36]	; (85878 <NVIC_ClearPendingIRQ+0x30>)
   85854:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85858:	095b      	lsrs	r3, r3, #5
   8585a:	79fa      	ldrb	r2, [r7, #7]
   8585c:	f002 021f 	and.w	r2, r2, #31
   85860:	2001      	movs	r0, #1
   85862:	fa00 f202 	lsl.w	r2, r0, r2
   85866:	3360      	adds	r3, #96	; 0x60
   85868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8586c:	bf00      	nop
   8586e:	370c      	adds	r7, #12
   85870:	46bd      	mov	sp, r7
   85872:	bc80      	pop	{r7}
   85874:	4770      	bx	lr
   85876:	bf00      	nop
   85878:	e000e100 	.word	0xe000e100

0008587c <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   8587c:	b480      	push	{r7}
   8587e:	b083      	sub	sp, #12
   85880:	af00      	add	r7, sp, #0
   85882:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   85884:	687b      	ldr	r3, [r7, #4]
   85886:	2208      	movs	r2, #8
   85888:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   8588a:	687b      	ldr	r3, [r7, #4]
   8588c:	2220      	movs	r2, #32
   8588e:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   85890:	687b      	ldr	r3, [r7, #4]
   85892:	2204      	movs	r2, #4
   85894:	601a      	str	r2, [r3, #0]
}
   85896:	bf00      	nop
   85898:	370c      	adds	r7, #12
   8589a:	46bd      	mov	sp, r7
   8589c:	bc80      	pop	{r7}
   8589e:	4770      	bx	lr

000858a0 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   858a0:	b580      	push	{r7, lr}
   858a2:	b084      	sub	sp, #16
   858a4:	af00      	add	r7, sp, #0
   858a6:	6078      	str	r0, [r7, #4]
   858a8:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   858aa:	2300      	movs	r3, #0
   858ac:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   858ae:	687b      	ldr	r3, [r7, #4]
   858b0:	f04f 32ff 	mov.w	r2, #4294967295
   858b4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   858b6:	687b      	ldr	r3, [r7, #4]
   858b8:	6a1b      	ldr	r3, [r3, #32]

	twi_disable_interrupt(p_twi, MASK_ALL_INTERRUPTS);
   858ba:	f04f 31ff 	mov.w	r1, #4294967295
   858be:	6878      	ldr	r0, [r7, #4]
   858c0:	4b14      	ldr	r3, [pc, #80]	; (85914 <twi_master_init+0x74>)
   858c2:	4798      	blx	r3

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   858c4:	6878      	ldr	r0, [r7, #4]
   858c6:	4b14      	ldr	r3, [pc, #80]	; (85918 <twi_master_init+0x78>)
   858c8:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   858ca:	6878      	ldr	r0, [r7, #4]
   858cc:	4b13      	ldr	r3, [pc, #76]	; (8591c <twi_master_init+0x7c>)
   858ce:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   858d0:	683b      	ldr	r3, [r7, #0]
   858d2:	6859      	ldr	r1, [r3, #4]
   858d4:	683b      	ldr	r3, [r7, #0]
   858d6:	681b      	ldr	r3, [r3, #0]
   858d8:	461a      	mov	r2, r3
   858da:	6878      	ldr	r0, [r7, #4]
   858dc:	4b10      	ldr	r3, [pc, #64]	; (85920 <twi_master_init+0x80>)
   858de:	4798      	blx	r3
   858e0:	4603      	mov	r3, r0
   858e2:	2b01      	cmp	r3, #1
   858e4:	d101      	bne.n	858ea <twi_master_init+0x4a>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   858e6:	2301      	movs	r3, #1
   858e8:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   858ea:	683b      	ldr	r3, [r7, #0]
   858ec:	7a5b      	ldrb	r3, [r3, #9]
   858ee:	2b01      	cmp	r3, #1
   858f0:	d102      	bne.n	858f8 <twi_master_init+0x58>
		p_twi->TWI_CR = TWI_CR_QUICK;
   858f2:	687b      	ldr	r3, [r7, #4]
   858f4:	2240      	movs	r2, #64	; 0x40
   858f6:	601a      	str	r2, [r3, #0]
	}
    
    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   858f8:	f44f 7150 	mov.w	r1, #832	; 0x340
   858fc:	6878      	ldr	r0, [r7, #4]
   858fe:	4b09      	ldr	r3, [pc, #36]	; (85924 <twi_master_init+0x84>)
   85900:	4798      	blx	r3

    twiBusy = false;
   85902:	4b09      	ldr	r3, [pc, #36]	; (85928 <twi_master_init+0x88>)
   85904:	2200      	movs	r2, #0
   85906:	701a      	strb	r2, [r3, #0]
    
	return status;
   85908:	68fb      	ldr	r3, [r7, #12]
}
   8590a:	4618      	mov	r0, r3
   8590c:	3710      	adds	r7, #16
   8590e:	46bd      	mov	sp, r7
   85910:	bd80      	pop	{r7, pc}
   85912:	bf00      	nop
   85914:	00085d9b 	.word	0x00085d9b
   85918:	00085de5 	.word	0x00085de5
   8591c:	0008587d 	.word	0x0008587d
   85920:	0008592d 	.word	0x0008592d
   85924:	00085d81 	.word	0x00085d81
   85928:	20070858 	.word	0x20070858

0008592c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   8592c:	b480      	push	{r7}
   8592e:	b089      	sub	sp, #36	; 0x24
   85930:	af00      	add	r7, sp, #0
   85932:	60f8      	str	r0, [r7, #12]
   85934:	60b9      	str	r1, [r7, #8]
   85936:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   85938:	2300      	movs	r3, #0
   8593a:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8593c:	68bb      	ldr	r3, [r7, #8]
   8593e:	4a34      	ldr	r2, [pc, #208]	; (85a10 <twi_set_speed+0xe4>)
   85940:	4293      	cmp	r3, r2
   85942:	d901      	bls.n	85948 <twi_set_speed+0x1c>
		return FAIL;
   85944:	2301      	movs	r3, #1
   85946:	e05d      	b.n	85a04 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   85948:	68bb      	ldr	r3, [r7, #8]
   8594a:	4a32      	ldr	r2, [pc, #200]	; (85a14 <twi_set_speed+0xe8>)
   8594c:	4293      	cmp	r3, r2
   8594e:	d937      	bls.n	859c0 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   85950:	687b      	ldr	r3, [r7, #4]
   85952:	4a31      	ldr	r2, [pc, #196]	; (85a18 <twi_set_speed+0xec>)
   85954:	fba2 2303 	umull	r2, r3, r2, r3
   85958:	0b9b      	lsrs	r3, r3, #14
   8595a:	3b04      	subs	r3, #4
   8595c:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8595e:	68ba      	ldr	r2, [r7, #8]
   85960:	4b2e      	ldr	r3, [pc, #184]	; (85a1c <twi_set_speed+0xf0>)
   85962:	4413      	add	r3, r2
   85964:	009b      	lsls	r3, r3, #2
   85966:	687a      	ldr	r2, [r7, #4]
   85968:	fbb2 f3f3 	udiv	r3, r2, r3
   8596c:	3b04      	subs	r3, #4
   8596e:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   85970:	e005      	b.n	8597e <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   85972:	69fb      	ldr	r3, [r7, #28]
   85974:	3301      	adds	r3, #1
   85976:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   85978:	697b      	ldr	r3, [r7, #20]
   8597a:	085b      	lsrs	r3, r3, #1
   8597c:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8597e:	697b      	ldr	r3, [r7, #20]
   85980:	2bff      	cmp	r3, #255	; 0xff
   85982:	d909      	bls.n	85998 <twi_set_speed+0x6c>
   85984:	69fb      	ldr	r3, [r7, #28]
   85986:	2b06      	cmp	r3, #6
   85988:	d9f3      	bls.n	85972 <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8598a:	e005      	b.n	85998 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   8598c:	69fb      	ldr	r3, [r7, #28]
   8598e:	3301      	adds	r3, #1
   85990:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   85992:	693b      	ldr	r3, [r7, #16]
   85994:	085b      	lsrs	r3, r3, #1
   85996:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   85998:	693b      	ldr	r3, [r7, #16]
   8599a:	2bff      	cmp	r3, #255	; 0xff
   8599c:	d902      	bls.n	859a4 <twi_set_speed+0x78>
   8599e:	69fb      	ldr	r3, [r7, #28]
   859a0:	2b06      	cmp	r3, #6
   859a2:	d9f3      	bls.n	8598c <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   859a4:	697b      	ldr	r3, [r7, #20]
   859a6:	b2da      	uxtb	r2, r3
   859a8:	693b      	ldr	r3, [r7, #16]
   859aa:	021b      	lsls	r3, r3, #8
   859ac:	b29b      	uxth	r3, r3
   859ae:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   859b0:	69fb      	ldr	r3, [r7, #28]
   859b2:	041b      	lsls	r3, r3, #16
   859b4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   859b8:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   859ba:	68fb      	ldr	r3, [r7, #12]
   859bc:	611a      	str	r2, [r3, #16]
   859be:	e020      	b.n	85a02 <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   859c0:	68bb      	ldr	r3, [r7, #8]
   859c2:	005b      	lsls	r3, r3, #1
   859c4:	687a      	ldr	r2, [r7, #4]
   859c6:	fbb2 f3f3 	udiv	r3, r2, r3
   859ca:	3b04      	subs	r3, #4
   859cc:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   859ce:	e005      	b.n	859dc <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   859d0:	69fb      	ldr	r3, [r7, #28]
   859d2:	3301      	adds	r3, #1
   859d4:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   859d6:	69bb      	ldr	r3, [r7, #24]
   859d8:	085b      	lsrs	r3, r3, #1
   859da:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   859dc:	69bb      	ldr	r3, [r7, #24]
   859de:	2bff      	cmp	r3, #255	; 0xff
   859e0:	d902      	bls.n	859e8 <twi_set_speed+0xbc>
   859e2:	69fb      	ldr	r3, [r7, #28]
   859e4:	2b06      	cmp	r3, #6
   859e6:	d9f3      	bls.n	859d0 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   859e8:	69bb      	ldr	r3, [r7, #24]
   859ea:	b2da      	uxtb	r2, r3
   859ec:	69bb      	ldr	r3, [r7, #24]
   859ee:	021b      	lsls	r3, r3, #8
   859f0:	b29b      	uxth	r3, r3
   859f2:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   859f4:	69fb      	ldr	r3, [r7, #28]
   859f6:	041b      	lsls	r3, r3, #16
   859f8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   859fc:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   859fe:	68fb      	ldr	r3, [r7, #12]
   85a00:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   85a02:	2300      	movs	r3, #0
}
   85a04:	4618      	mov	r0, r3
   85a06:	3724      	adds	r7, #36	; 0x24
   85a08:	46bd      	mov	sp, r7
   85a0a:	bc80      	pop	{r7}
   85a0c:	4770      	bx	lr
   85a0e:	bf00      	nop
   85a10:	00061a80 	.word	0x00061a80
   85a14:	0005dc00 	.word	0x0005dc00
   85a18:	057619f1 	.word	0x057619f1
   85a1c:	3ffd1200 	.word	0x3ffd1200

00085a20 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   85a20:	b480      	push	{r7}
   85a22:	b085      	sub	sp, #20
   85a24:	af00      	add	r7, sp, #0
   85a26:	6078      	str	r0, [r7, #4]
   85a28:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   85a2a:	683b      	ldr	r3, [r7, #0]
   85a2c:	2b00      	cmp	r3, #0
   85a2e:	d101      	bne.n	85a34 <twi_mk_addr+0x14>
		return 0;
   85a30:	2300      	movs	r3, #0
   85a32:	e01d      	b.n	85a70 <twi_mk_addr+0x50>

	val = addr[0];
   85a34:	687b      	ldr	r3, [r7, #4]
   85a36:	781b      	ldrb	r3, [r3, #0]
   85a38:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   85a3a:	683b      	ldr	r3, [r7, #0]
   85a3c:	2b01      	cmp	r3, #1
   85a3e:	dd09      	ble.n	85a54 <twi_mk_addr+0x34>
		val <<= 8;
   85a40:	68fb      	ldr	r3, [r7, #12]
   85a42:	021b      	lsls	r3, r3, #8
   85a44:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   85a46:	687b      	ldr	r3, [r7, #4]
   85a48:	3301      	adds	r3, #1
   85a4a:	781b      	ldrb	r3, [r3, #0]
   85a4c:	461a      	mov	r2, r3
   85a4e:	68fb      	ldr	r3, [r7, #12]
   85a50:	4313      	orrs	r3, r2
   85a52:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   85a54:	683b      	ldr	r3, [r7, #0]
   85a56:	2b02      	cmp	r3, #2
   85a58:	dd09      	ble.n	85a6e <twi_mk_addr+0x4e>
		val <<= 8;
   85a5a:	68fb      	ldr	r3, [r7, #12]
   85a5c:	021b      	lsls	r3, r3, #8
   85a5e:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   85a60:	687b      	ldr	r3, [r7, #4]
   85a62:	3302      	adds	r3, #2
   85a64:	781b      	ldrb	r3, [r3, #0]
   85a66:	461a      	mov	r2, r3
   85a68:	68fb      	ldr	r3, [r7, #12]
   85a6a:	4313      	orrs	r3, r2
   85a6c:	60fb      	str	r3, [r7, #12]
	}
	return val;
   85a6e:	68fb      	ldr	r3, [r7, #12]
}
   85a70:	4618      	mov	r0, r3
   85a72:	3714      	adds	r7, #20
   85a74:	46bd      	mov	sp, r7
   85a76:	bc80      	pop	{r7}
   85a78:	4770      	bx	lr
	...

00085a7c <twi_is_busy>:
	}
}
#endif
#if 1
uint8_t twi_is_busy(void)
{
   85a7c:	b480      	push	{r7}
   85a7e:	af00      	add	r7, sp, #0
    return twiBusy;
   85a80:	4b02      	ldr	r3, [pc, #8]	; (85a8c <twi_is_busy+0x10>)
   85a82:	781b      	ldrb	r3, [r3, #0]
}
   85a84:	4618      	mov	r0, r3
   85a86:	46bd      	mov	sp, r7
   85a88:	bc80      	pop	{r7}
   85a8a:	4770      	bx	lr
   85a8c:	20070858 	.word	0x20070858

00085a90 <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   85a90:	b480      	push	{r7}
   85a92:	af00      	add	r7, sp, #0
    return &txPacket;
   85a94:	4b02      	ldr	r3, [pc, #8]	; (85aa0 <twi_get_tx_packet+0x10>)
}
   85a96:	4618      	mov	r0, r3
   85a98:	46bd      	mov	sp, r7
   85a9a:	bc80      	pop	{r7}
   85a9c:	4770      	bx	lr
   85a9e:	bf00      	nop
   85aa0:	20070638 	.word	0x20070638

00085aa4 <twi_get_rx_packet>:

twi_packet_t *twi_get_rx_packet(void)
{
   85aa4:	b480      	push	{r7}
   85aa6:	af00      	add	r7, sp, #0
    return &rxPacket;
   85aa8:	4b02      	ldr	r3, [pc, #8]	; (85ab4 <twi_get_rx_packet+0x10>)
}
   85aaa:	4618      	mov	r0, r3
   85aac:	46bd      	mov	sp, r7
   85aae:	bc80      	pop	{r7}
   85ab0:	4770      	bx	lr
   85ab2:	bf00      	nop
   85ab4:	20070748 	.word	0x20070748

00085ab8 <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   85ab8:	b580      	push	{r7, lr}
   85aba:	b084      	sub	sp, #16
   85abc:	af00      	add	r7, sp, #0
   85abe:	6078      	str	r0, [r7, #4]
   85ac0:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   85ac2:	683b      	ldr	r3, [r7, #0]
   85ac4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   85ac8:	2b00      	cmp	r3, #0
   85aca:	d101      	bne.n	85ad0 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   85acc:	2301      	movs	r3, #1
   85ace:	e040      	b.n	85b52 <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   85ad0:	4b22      	ldr	r3, [pc, #136]	; (85b5c <twi_pdc_master_write+0xa4>)
   85ad2:	2201      	movs	r2, #1
   85ad4:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   85ad6:	683b      	ldr	r3, [r7, #0]
   85ad8:	3308      	adds	r3, #8
   85ada:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   85adc:	683b      	ldr	r3, [r7, #0]
   85ade:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   85ae2:	3b01      	subs	r3, #1
   85ae4:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   85ae6:	f107 0308 	add.w	r3, r7, #8
   85aea:	2200      	movs	r2, #0
   85aec:	4619      	mov	r1, r3
   85aee:	481c      	ldr	r0, [pc, #112]	; (85b60 <twi_pdc_master_write+0xa8>)
   85af0:	4b1c      	ldr	r3, [pc, #112]	; (85b64 <twi_pdc_master_write+0xac>)
   85af2:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   85af4:	687b      	ldr	r3, [r7, #4]
   85af6:	2200      	movs	r2, #0
   85af8:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   85afa:	683b      	ldr	r3, [r7, #0]
   85afc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   85b00:	041b      	lsls	r3, r3, #16
   85b02:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   85b06:	683b      	ldr	r3, [r7, #0]
   85b08:	685b      	ldr	r3, [r3, #4]
   85b0a:	021b      	lsls	r3, r3, #8
   85b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
   85b10:	431a      	orrs	r2, r3
   85b12:	687b      	ldr	r3, [r7, #4]
   85b14:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   85b16:	687b      	ldr	r3, [r7, #4]
   85b18:	2200      	movs	r2, #0
   85b1a:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   85b1c:	683a      	ldr	r2, [r7, #0]
   85b1e:	683b      	ldr	r3, [r7, #0]
   85b20:	685b      	ldr	r3, [r3, #4]
   85b22:	4619      	mov	r1, r3
   85b24:	4610      	mov	r0, r2
   85b26:	4b10      	ldr	r3, [pc, #64]	; (85b68 <twi_pdc_master_write+0xb0>)
   85b28:	4798      	blx	r3
   85b2a:	4602      	mov	r2, r0
   85b2c:	687b      	ldr	r3, [r7, #4]
   85b2e:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   85b30:	f44f 7180 	mov.w	r1, #256	; 0x100
   85b34:	480a      	ldr	r0, [pc, #40]	; (85b60 <twi_pdc_master_write+0xa8>)
   85b36:	4b0d      	ldr	r3, [pc, #52]	; (85b6c <twi_pdc_master_write+0xb4>)
   85b38:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   85b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85b3e:	6878      	ldr	r0, [r7, #4]
   85b40:	4b0b      	ldr	r3, [pc, #44]	; (85b70 <twi_pdc_master_write+0xb8>)
   85b42:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   85b44:	2016      	movs	r0, #22
   85b46:	4b0b      	ldr	r3, [pc, #44]	; (85b74 <twi_pdc_master_write+0xbc>)
   85b48:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   85b4a:	2016      	movs	r0, #22
   85b4c:	4b0a      	ldr	r3, [pc, #40]	; (85b78 <twi_pdc_master_write+0xc0>)
   85b4e:	4798      	blx	r3

    return TWI_SUCCESS;
   85b50:	2300      	movs	r3, #0
}
   85b52:	4618      	mov	r0, r3
   85b54:	3710      	adds	r7, #16
   85b56:	46bd      	mov	sp, r7
   85b58:	bd80      	pop	{r7, pc}
   85b5a:	bf00      	nop
   85b5c:	20070858 	.word	0x20070858
   85b60:	4008c100 	.word	0x4008c100
   85b64:	000826d5 	.word	0x000826d5
   85b68:	00085a21 	.word	0x00085a21
   85b6c:	00082717 	.word	0x00082717
   85b70:	00085d81 	.word	0x00085d81
   85b74:	00085849 	.word	0x00085849
   85b78:	00085819 	.word	0x00085819

00085b7c <twi_set_compass_rx_callback>:
 * \brief Callback function for TWI receive.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_rx_callback(void (*callback)(void))
{
   85b7c:	b480      	push	{r7}
   85b7e:	b083      	sub	sp, #12
   85b80:	af00      	add	r7, sp, #0
   85b82:	6078      	str	r0, [r7, #4]
    compassRxCallback = callback;
   85b84:	4a03      	ldr	r2, [pc, #12]	; (85b94 <twi_set_compass_rx_callback+0x18>)
   85b86:	687b      	ldr	r3, [r7, #4]
   85b88:	6013      	str	r3, [r2, #0]
}
   85b8a:	bf00      	nop
   85b8c:	370c      	adds	r7, #12
   85b8e:	46bd      	mov	sp, r7
   85b90:	bc80      	pop	{r7}
   85b92:	4770      	bx	lr
   85b94:	20070864 	.word	0x20070864

00085b98 <twi_set_compass_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_tx_callback(void (*callback)(void))
{
   85b98:	b480      	push	{r7}
   85b9a:	b083      	sub	sp, #12
   85b9c:	af00      	add	r7, sp, #0
   85b9e:	6078      	str	r0, [r7, #4]
    compassTxCallback = callback;
   85ba0:	4a03      	ldr	r2, [pc, #12]	; (85bb0 <twi_set_compass_tx_callback+0x18>)
   85ba2:	687b      	ldr	r3, [r7, #4]
   85ba4:	6013      	str	r3, [r2, #0]
}
   85ba6:	bf00      	nop
   85ba8:	370c      	adds	r7, #12
   85baa:	46bd      	mov	sp, r7
   85bac:	bc80      	pop	{r7}
   85bae:	4770      	bx	lr
   85bb0:	20070860 	.word	0x20070860

00085bb4 <twi_set_lcd_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_lcd_tx_callback(void (*callback)(void))
{
   85bb4:	b480      	push	{r7}
   85bb6:	b083      	sub	sp, #12
   85bb8:	af00      	add	r7, sp, #0
   85bba:	6078      	str	r0, [r7, #4]
    lcdTxCallback = callback;
   85bbc:	4a03      	ldr	r2, [pc, #12]	; (85bcc <twi_set_lcd_tx_callback+0x18>)
   85bbe:	687b      	ldr	r3, [r7, #4]
   85bc0:	6013      	str	r3, [r2, #0]
}
   85bc2:	bf00      	nop
   85bc4:	370c      	adds	r7, #12
   85bc6:	46bd      	mov	sp, r7
   85bc8:	bc80      	pop	{r7}
   85bca:	4770      	bx	lr
   85bcc:	2007085c 	.word	0x2007085c

00085bd0 <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   85bd0:	b590      	push	{r4, r7, lr}
   85bd2:	b083      	sub	sp, #12
   85bd4:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   85bd6:	485d      	ldr	r0, [pc, #372]	; (85d4c <TWI0_Handler+0x17c>)
   85bd8:	4b5d      	ldr	r3, [pc, #372]	; (85d50 <TWI0_Handler+0x180>)
   85bda:	4798      	blx	r3
   85bdc:	4604      	mov	r4, r0
   85bde:	485b      	ldr	r0, [pc, #364]	; (85d4c <TWI0_Handler+0x17c>)
   85be0:	4b5c      	ldr	r3, [pc, #368]	; (85d54 <TWI0_Handler+0x184>)
   85be2:	4798      	blx	r3
   85be4:	4603      	mov	r3, r0
   85be6:	4023      	ands	r3, r4
   85be8:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   85bea:	687b      	ldr	r3, [r7, #4]
   85bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   85bf0:	2b00      	cmp	r3, #0
   85bf2:	d014      	beq.n	85c1e <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   85bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
   85bf8:	4857      	ldr	r0, [pc, #348]	; (85d58 <TWI0_Handler+0x188>)
   85bfa:	4b58      	ldr	r3, [pc, #352]	; (85d5c <TWI0_Handler+0x18c>)
   85bfc:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   85bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85c02:	4852      	ldr	r0, [pc, #328]	; (85d4c <TWI0_Handler+0x17c>)
   85c04:	4b56      	ldr	r3, [pc, #344]	; (85d60 <TWI0_Handler+0x190>)
   85c06:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   85c08:	2104      	movs	r1, #4
   85c0a:	4850      	ldr	r0, [pc, #320]	; (85d4c <TWI0_Handler+0x17c>)
   85c0c:	4b55      	ldr	r3, [pc, #340]	; (85d64 <TWI0_Handler+0x194>)
   85c0e:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   85c10:	484e      	ldr	r0, [pc, #312]	; (85d4c <TWI0_Handler+0x17c>)
   85c12:	4b4f      	ldr	r3, [pc, #316]	; (85d50 <TWI0_Handler+0x180>)
   85c14:	4798      	blx	r3
   85c16:	4602      	mov	r2, r0
   85c18:	687b      	ldr	r3, [r7, #4]
   85c1a:	4313      	orrs	r3, r2
   85c1c:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   85c1e:	687b      	ldr	r3, [r7, #4]
   85c20:	f003 0304 	and.w	r3, r3, #4
   85c24:	2b00      	cmp	r3, #0
   85c26:	d01a      	beq.n	85c5e <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   85c28:	2104      	movs	r1, #4
   85c2a:	4848      	ldr	r0, [pc, #288]	; (85d4c <TWI0_Handler+0x17c>)
   85c2c:	4b4c      	ldr	r3, [pc, #304]	; (85d60 <TWI0_Handler+0x190>)
   85c2e:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   85c30:	4b46      	ldr	r3, [pc, #280]	; (85d4c <TWI0_Handler+0x17c>)
   85c32:	2202      	movs	r2, #2
   85c34:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   85c36:	4a45      	ldr	r2, [pc, #276]	; (85d4c <TWI0_Handler+0x17c>)
   85c38:	4b4b      	ldr	r3, [pc, #300]	; (85d68 <TWI0_Handler+0x198>)
   85c3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   85c3e:	3b01      	subs	r3, #1
   85c40:	4949      	ldr	r1, [pc, #292]	; (85d68 <TWI0_Handler+0x198>)
   85c42:	440b      	add	r3, r1
   85c44:	7a1b      	ldrb	r3, [r3, #8]
   85c46:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   85c48:	2101      	movs	r1, #1
   85c4a:	4840      	ldr	r0, [pc, #256]	; (85d4c <TWI0_Handler+0x17c>)
   85c4c:	4b45      	ldr	r3, [pc, #276]	; (85d64 <TWI0_Handler+0x194>)
   85c4e:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   85c50:	483e      	ldr	r0, [pc, #248]	; (85d4c <TWI0_Handler+0x17c>)
   85c52:	4b3f      	ldr	r3, [pc, #252]	; (85d50 <TWI0_Handler+0x180>)
   85c54:	4798      	blx	r3
   85c56:	4602      	mov	r2, r0
   85c58:	687b      	ldr	r3, [r7, #4]
   85c5a:	4313      	orrs	r3, r2
   85c5c:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   85c5e:	687b      	ldr	r3, [r7, #4]
   85c60:	f003 0301 	and.w	r3, r3, #1
   85c64:	2b00      	cmp	r3, #0
   85c66:	d014      	beq.n	85c92 <TWI0_Handler+0xc2>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   85c68:	2101      	movs	r1, #1
   85c6a:	4838      	ldr	r0, [pc, #224]	; (85d4c <TWI0_Handler+0x17c>)
   85c6c:	4b3c      	ldr	r3, [pc, #240]	; (85d60 <TWI0_Handler+0x190>)
   85c6e:	4798      	blx	r3

        // If defined, call the connected function.
        if(compassTxCallback != NULL)
   85c70:	4b3e      	ldr	r3, [pc, #248]	; (85d6c <TWI0_Handler+0x19c>)
   85c72:	681b      	ldr	r3, [r3, #0]
   85c74:	2b00      	cmp	r3, #0
   85c76:	d002      	beq.n	85c7e <TWI0_Handler+0xae>
        {
            compassTxCallback();
   85c78:	4b3c      	ldr	r3, [pc, #240]	; (85d6c <TWI0_Handler+0x19c>)
   85c7a:	681b      	ldr	r3, [r3, #0]
   85c7c:	4798      	blx	r3
        }

        // If defined, call the connected function.
        if(lcdTxCallback != NULL)
   85c7e:	4b3c      	ldr	r3, [pc, #240]	; (85d70 <TWI0_Handler+0x1a0>)
   85c80:	681b      	ldr	r3, [r3, #0]
   85c82:	2b00      	cmp	r3, #0
   85c84:	d002      	beq.n	85c8c <TWI0_Handler+0xbc>
        {
          lcdTxCallback();
   85c86:	4b3a      	ldr	r3, [pc, #232]	; (85d70 <TWI0_Handler+0x1a0>)
   85c88:	681b      	ldr	r3, [r3, #0]
   85c8a:	4798      	blx	r3
        }

        twiBusy = false;
   85c8c:	4b39      	ldr	r3, [pc, #228]	; (85d74 <TWI0_Handler+0x1a4>)
   85c8e:	2200      	movs	r2, #0
   85c90:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   85c92:	687b      	ldr	r3, [r7, #4]
   85c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   85c98:	2b00      	cmp	r3, #0
   85c9a:	d016      	beq.n	85cca <TWI0_Handler+0xfa>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   85c9c:	2102      	movs	r1, #2
   85c9e:	482e      	ldr	r0, [pc, #184]	; (85d58 <TWI0_Handler+0x188>)
   85ca0:	4b2e      	ldr	r3, [pc, #184]	; (85d5c <TWI0_Handler+0x18c>)
   85ca2:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   85ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85ca8:	4828      	ldr	r0, [pc, #160]	; (85d4c <TWI0_Handler+0x17c>)
   85caa:	4b2d      	ldr	r3, [pc, #180]	; (85d60 <TWI0_Handler+0x190>)
   85cac:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   85cae:	2102      	movs	r1, #2
   85cb0:	4826      	ldr	r0, [pc, #152]	; (85d4c <TWI0_Handler+0x17c>)
   85cb2:	4b2c      	ldr	r3, [pc, #176]	; (85d64 <TWI0_Handler+0x194>)
   85cb4:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   85cb6:	4b25      	ldr	r3, [pc, #148]	; (85d4c <TWI0_Handler+0x17c>)
   85cb8:	2202      	movs	r2, #2
   85cba:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   85cbc:	4823      	ldr	r0, [pc, #140]	; (85d4c <TWI0_Handler+0x17c>)
   85cbe:	4b24      	ldr	r3, [pc, #144]	; (85d50 <TWI0_Handler+0x180>)
   85cc0:	4798      	blx	r3
   85cc2:	4602      	mov	r2, r0
   85cc4:	687b      	ldr	r3, [r7, #4]
   85cc6:	4313      	orrs	r3, r2
   85cc8:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   85cca:	687b      	ldr	r3, [r7, #4]
   85ccc:	f003 0302 	and.w	r3, r3, #2
   85cd0:	2b00      	cmp	r3, #0
   85cd2:	d018      	beq.n	85d06 <TWI0_Handler+0x136>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   85cd4:	2102      	movs	r1, #2
   85cd6:	481d      	ldr	r0, [pc, #116]	; (85d4c <TWI0_Handler+0x17c>)
   85cd8:	4b21      	ldr	r3, [pc, #132]	; (85d60 <TWI0_Handler+0x190>)
   85cda:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   85cdc:	4b26      	ldr	r3, [pc, #152]	; (85d78 <TWI0_Handler+0x1a8>)
   85cde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   85ce2:	3b01      	subs	r3, #1
   85ce4:	4a19      	ldr	r2, [pc, #100]	; (85d4c <TWI0_Handler+0x17c>)
   85ce6:	6b12      	ldr	r2, [r2, #48]	; 0x30
   85ce8:	b2d1      	uxtb	r1, r2
   85cea:	4a23      	ldr	r2, [pc, #140]	; (85d78 <TWI0_Handler+0x1a8>)
   85cec:	4413      	add	r3, r2
   85cee:	460a      	mov	r2, r1
   85cf0:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(compassRxCallback != NULL)
   85cf2:	4b22      	ldr	r3, [pc, #136]	; (85d7c <TWI0_Handler+0x1ac>)
   85cf4:	681b      	ldr	r3, [r3, #0]
   85cf6:	2b00      	cmp	r3, #0
   85cf8:	d002      	beq.n	85d00 <TWI0_Handler+0x130>
        {
            compassRxCallback();
   85cfa:	4b20      	ldr	r3, [pc, #128]	; (85d7c <TWI0_Handler+0x1ac>)
   85cfc:	681b      	ldr	r3, [r3, #0]
   85cfe:	4798      	blx	r3
        }

        twiBusy = false;
   85d00:	4b1c      	ldr	r3, [pc, #112]	; (85d74 <TWI0_Handler+0x1a4>)
   85d02:	2200      	movs	r2, #0
   85d04:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   85d06:	687b      	ldr	r3, [r7, #4]
   85d08:	f403 7350 	and.w	r3, r3, #832	; 0x340
   85d0c:	2b00      	cmp	r3, #0
   85d0e:	d019      	beq.n	85d44 <TWI0_Handler+0x174>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   85d10:	f240 2102 	movw	r1, #514	; 0x202
   85d14:	4810      	ldr	r0, [pc, #64]	; (85d58 <TWI0_Handler+0x188>)
   85d16:	4b11      	ldr	r3, [pc, #68]	; (85d5c <TWI0_Handler+0x18c>)
   85d18:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   85d1a:	687b      	ldr	r3, [r7, #4]
   85d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
   85d20:	2b00      	cmp	r3, #0
   85d22:	d102      	bne.n	85d2a <TWI0_Handler+0x15a>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   85d24:	4b09      	ldr	r3, [pc, #36]	; (85d4c <TWI0_Handler+0x17c>)
   85d26:	2202      	movs	r2, #2
   85d28:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   85d2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85d2e:	4807      	ldr	r0, [pc, #28]	; (85d4c <TWI0_Handler+0x17c>)
   85d30:	4b0b      	ldr	r3, [pc, #44]	; (85d60 <TWI0_Handler+0x190>)
   85d32:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   85d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85d38:	4804      	ldr	r0, [pc, #16]	; (85d4c <TWI0_Handler+0x17c>)
   85d3a:	4b09      	ldr	r3, [pc, #36]	; (85d60 <TWI0_Handler+0x190>)
   85d3c:	4798      	blx	r3

        twiBusy = false;
   85d3e:	4b0d      	ldr	r3, [pc, #52]	; (85d74 <TWI0_Handler+0x1a4>)
   85d40:	2200      	movs	r2, #0
   85d42:	701a      	strb	r2, [r3, #0]
	}
}
   85d44:	bf00      	nop
   85d46:	370c      	adds	r7, #12
   85d48:	46bd      	mov	sp, r7
   85d4a:	bd90      	pop	{r4, r7, pc}
   85d4c:	4008c000 	.word	0x4008c000
   85d50:	00085db9 	.word	0x00085db9
   85d54:	00085dcf 	.word	0x00085dcf
   85d58:	4008c100 	.word	0x4008c100
   85d5c:	00082737 	.word	0x00082737
   85d60:	00085d9b 	.word	0x00085d9b
   85d64:	00085d81 	.word	0x00085d81
   85d68:	20070638 	.word	0x20070638
   85d6c:	20070860 	.word	0x20070860
   85d70:	2007085c 	.word	0x2007085c
   85d74:	20070858 	.word	0x20070858
   85d78:	20070748 	.word	0x20070748
   85d7c:	20070864 	.word	0x20070864

00085d80 <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   85d80:	b480      	push	{r7}
   85d82:	b083      	sub	sp, #12
   85d84:	af00      	add	r7, sp, #0
   85d86:	6078      	str	r0, [r7, #4]
   85d88:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   85d8a:	687b      	ldr	r3, [r7, #4]
   85d8c:	683a      	ldr	r2, [r7, #0]
   85d8e:	625a      	str	r2, [r3, #36]	; 0x24
}
   85d90:	bf00      	nop
   85d92:	370c      	adds	r7, #12
   85d94:	46bd      	mov	sp, r7
   85d96:	bc80      	pop	{r7}
   85d98:	4770      	bx	lr

00085d9a <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   85d9a:	b480      	push	{r7}
   85d9c:	b083      	sub	sp, #12
   85d9e:	af00      	add	r7, sp, #0
   85da0:	6078      	str	r0, [r7, #4]
   85da2:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   85da4:	687b      	ldr	r3, [r7, #4]
   85da6:	683a      	ldr	r2, [r7, #0]
   85da8:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   85daa:	687b      	ldr	r3, [r7, #4]
   85dac:	6a1b      	ldr	r3, [r3, #32]
}
   85dae:	bf00      	nop
   85db0:	370c      	adds	r7, #12
   85db2:	46bd      	mov	sp, r7
   85db4:	bc80      	pop	{r7}
   85db6:	4770      	bx	lr

00085db8 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   85db8:	b480      	push	{r7}
   85dba:	b083      	sub	sp, #12
   85dbc:	af00      	add	r7, sp, #0
   85dbe:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   85dc0:	687b      	ldr	r3, [r7, #4]
   85dc2:	6a1b      	ldr	r3, [r3, #32]
}
   85dc4:	4618      	mov	r0, r3
   85dc6:	370c      	adds	r7, #12
   85dc8:	46bd      	mov	sp, r7
   85dca:	bc80      	pop	{r7}
   85dcc:	4770      	bx	lr

00085dce <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   85dce:	b480      	push	{r7}
   85dd0:	b083      	sub	sp, #12
   85dd2:	af00      	add	r7, sp, #0
   85dd4:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   85dd6:	687b      	ldr	r3, [r7, #4]
   85dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   85dda:	4618      	mov	r0, r3
   85ddc:	370c      	adds	r7, #12
   85dde:	46bd      	mov	sp, r7
   85de0:	bc80      	pop	{r7}
   85de2:	4770      	bx	lr

00085de4 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   85de4:	b480      	push	{r7}
   85de6:	b083      	sub	sp, #12
   85de8:	af00      	add	r7, sp, #0
   85dea:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   85dec:	687b      	ldr	r3, [r7, #4]
   85dee:	2280      	movs	r2, #128	; 0x80
   85df0:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   85df2:	687b      	ldr	r3, [r7, #4]
   85df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   85df6:	bf00      	nop
   85df8:	370c      	adds	r7, #12
   85dfa:	46bd      	mov	sp, r7
   85dfc:	bc80      	pop	{r7}
   85dfe:	4770      	bx	lr

00085e00 <compass_init>:

//local function
static void compass_callback(void);

void compass_init(void)
{
   85e00:	b580      	push	{r7, lr}
   85e02:	b082      	sub	sp, #8
   85e04:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   85e06:	4b0d      	ldr	r3, [pc, #52]	; (85e3c <compass_init+0x3c>)
   85e08:	4798      	blx	r3
   85e0a:	6078      	str	r0, [r7, #4]

    rx_packet->chip = 0x60;
   85e0c:	687b      	ldr	r3, [r7, #4]
   85e0e:	2260      	movs	r2, #96	; 0x60
   85e10:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    rx_packet->addr[0] = 0x02;
   85e14:	687b      	ldr	r3, [r7, #4]
   85e16:	2202      	movs	r2, #2
   85e18:	701a      	strb	r2, [r3, #0]
    rx_packet->addr_length = 1;
   85e1a:	687b      	ldr	r3, [r7, #4]
   85e1c:	2201      	movs	r2, #1
   85e1e:	605a      	str	r2, [r3, #4]
    rx_packet->length = sizeof(direction);
   85e20:	687b      	ldr	r3, [r7, #4]
   85e22:	2202      	movs	r2, #2
   85e24:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    twi_set_compass_tx_callback(compass_callback);
   85e28:	4805      	ldr	r0, [pc, #20]	; (85e40 <compass_init+0x40>)
   85e2a:	4b06      	ldr	r3, [pc, #24]	; (85e44 <compass_init+0x44>)
   85e2c:	4798      	blx	r3
    twi_set_compass_rx_callback(compass_callback);
   85e2e:	4804      	ldr	r0, [pc, #16]	; (85e40 <compass_init+0x40>)
   85e30:	4b05      	ldr	r3, [pc, #20]	; (85e48 <compass_init+0x48>)
   85e32:	4798      	blx	r3
}
   85e34:	bf00      	nop
   85e36:	3708      	adds	r7, #8
   85e38:	46bd      	mov	sp, r7
   85e3a:	bd80      	pop	{r7, pc}
   85e3c:	00085aa5 	.word	0x00085aa5
   85e40:	00085e4d 	.word	0x00085e4d
   85e44:	00085b99 	.word	0x00085b99
   85e48:	00085b7d 	.word	0x00085b7d

00085e4c <compass_callback>:
    return tmp_corr;
}*/

//local function
static void compass_callback(void)
{
   85e4c:	b480      	push	{r7}
   85e4e:	af00      	add	r7, sp, #0
    compassIsBusy = false;
   85e50:	4b03      	ldr	r3, [pc, #12]	; (85e60 <compass_callback+0x14>)
   85e52:	2200      	movs	r2, #0
   85e54:	701a      	strb	r2, [r3, #0]
}
   85e56:	bf00      	nop
   85e58:	46bd      	mov	sp, r7
   85e5a:	bc80      	pop	{r7}
   85e5c:	4770      	bx	lr
   85e5e:	bf00      	nop
   85e60:	20070868 	.word	0x20070868

00085e64 <osc_get_rate>:
{
   85e64:	b480      	push	{r7}
   85e66:	b083      	sub	sp, #12
   85e68:	af00      	add	r7, sp, #0
   85e6a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   85e6c:	687b      	ldr	r3, [r7, #4]
   85e6e:	2b07      	cmp	r3, #7
   85e70:	d825      	bhi.n	85ebe <osc_get_rate+0x5a>
   85e72:	a201      	add	r2, pc, #4	; (adr r2, 85e78 <osc_get_rate+0x14>)
   85e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85e78:	00085e99 	.word	0x00085e99
   85e7c:	00085e9f 	.word	0x00085e9f
   85e80:	00085ea5 	.word	0x00085ea5
   85e84:	00085eab 	.word	0x00085eab
   85e88:	00085eaf 	.word	0x00085eaf
   85e8c:	00085eb3 	.word	0x00085eb3
   85e90:	00085eb7 	.word	0x00085eb7
   85e94:	00085ebb 	.word	0x00085ebb
		return OSC_SLCK_32K_RC_HZ;
   85e98:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   85e9c:	e010      	b.n	85ec0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   85e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   85ea2:	e00d      	b.n	85ec0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   85ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   85ea8:	e00a      	b.n	85ec0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   85eaa:	4b08      	ldr	r3, [pc, #32]	; (85ecc <osc_get_rate+0x68>)
   85eac:	e008      	b.n	85ec0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   85eae:	4b08      	ldr	r3, [pc, #32]	; (85ed0 <osc_get_rate+0x6c>)
   85eb0:	e006      	b.n	85ec0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   85eb2:	4b08      	ldr	r3, [pc, #32]	; (85ed4 <osc_get_rate+0x70>)
   85eb4:	e004      	b.n	85ec0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   85eb6:	4b07      	ldr	r3, [pc, #28]	; (85ed4 <osc_get_rate+0x70>)
   85eb8:	e002      	b.n	85ec0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   85eba:	4b06      	ldr	r3, [pc, #24]	; (85ed4 <osc_get_rate+0x70>)
   85ebc:	e000      	b.n	85ec0 <osc_get_rate+0x5c>
	return 0;
   85ebe:	2300      	movs	r3, #0
}
   85ec0:	4618      	mov	r0, r3
   85ec2:	370c      	adds	r7, #12
   85ec4:	46bd      	mov	sp, r7
   85ec6:	bc80      	pop	{r7}
   85ec8:	4770      	bx	lr
   85eca:	bf00      	nop
   85ecc:	003d0900 	.word	0x003d0900
   85ed0:	007a1200 	.word	0x007a1200
   85ed4:	00b71b00 	.word	0x00b71b00

00085ed8 <sysclk_get_main_hz>:
{
   85ed8:	b580      	push	{r7, lr}
   85eda:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   85edc:	2006      	movs	r0, #6
   85ede:	4b04      	ldr	r3, [pc, #16]	; (85ef0 <sysclk_get_main_hz+0x18>)
   85ee0:	4798      	blx	r3
   85ee2:	4602      	mov	r2, r0
   85ee4:	4613      	mov	r3, r2
   85ee6:	00db      	lsls	r3, r3, #3
   85ee8:	1a9b      	subs	r3, r3, r2
   85eea:	005b      	lsls	r3, r3, #1
}
   85eec:	4618      	mov	r0, r3
   85eee:	bd80      	pop	{r7, pc}
   85ef0:	00085e65 	.word	0x00085e65

00085ef4 <sysclk_get_peripheral_hz>:
{
   85ef4:	b580      	push	{r7, lr}
   85ef6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   85ef8:	4b02      	ldr	r3, [pc, #8]	; (85f04 <sysclk_get_peripheral_hz+0x10>)
   85efa:	4798      	blx	r3
   85efc:	4603      	mov	r3, r0
   85efe:	085b      	lsrs	r3, r3, #1
}
   85f00:	4618      	mov	r0, r3
   85f02:	bd80      	pop	{r7, pc}
   85f04:	00085ed9 	.word	0x00085ed9

00085f08 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   85f08:	b580      	push	{r7, lr}
   85f0a:	b082      	sub	sp, #8
   85f0c:	af00      	add	r7, sp, #0
   85f0e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   85f10:	6878      	ldr	r0, [r7, #4]
   85f12:	4b03      	ldr	r3, [pc, #12]	; (85f20 <sysclk_enable_peripheral_clock+0x18>)
   85f14:	4798      	blx	r3
}
   85f16:	bf00      	nop
   85f18:	3708      	adds	r7, #8
   85f1a:	46bd      	mov	sp, r7
   85f1c:	bd80      	pop	{r7, pc}
   85f1e:	bf00      	nop
   85f20:	00086ae9 	.word	0x00086ae9

00085f24 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   85f24:	b580      	push	{r7, lr}
   85f26:	b082      	sub	sp, #8
   85f28:	af00      	add	r7, sp, #0
   85f2a:	6078      	str	r0, [r7, #4]
   85f2c:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   85f2e:	4b10      	ldr	r3, [pc, #64]	; (85f70 <twi_master_setup+0x4c>)
   85f30:	4798      	blx	r3
   85f32:	4602      	mov	r2, r0
   85f34:	683b      	ldr	r3, [r7, #0]
   85f36:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   85f38:	683b      	ldr	r3, [r7, #0]
   85f3a:	2200      	movs	r2, #0
   85f3c:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   85f3e:	687b      	ldr	r3, [r7, #4]
   85f40:	4a0c      	ldr	r2, [pc, #48]	; (85f74 <twi_master_setup+0x50>)
   85f42:	4293      	cmp	r3, r2
   85f44:	d103      	bne.n	85f4e <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   85f46:	2016      	movs	r0, #22
   85f48:	4b0b      	ldr	r3, [pc, #44]	; (85f78 <twi_master_setup+0x54>)
   85f4a:	4798      	blx	r3
   85f4c:	e006      	b.n	85f5c <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   85f4e:	687b      	ldr	r3, [r7, #4]
   85f50:	4a0a      	ldr	r2, [pc, #40]	; (85f7c <twi_master_setup+0x58>)
   85f52:	4293      	cmp	r3, r2
   85f54:	d102      	bne.n	85f5c <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   85f56:	2017      	movs	r0, #23
   85f58:	4b07      	ldr	r3, [pc, #28]	; (85f78 <twi_master_setup+0x54>)
   85f5a:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   85f5c:	6839      	ldr	r1, [r7, #0]
   85f5e:	6878      	ldr	r0, [r7, #4]
   85f60:	4b07      	ldr	r3, [pc, #28]	; (85f80 <twi_master_setup+0x5c>)
   85f62:	4798      	blx	r3
   85f64:	4603      	mov	r3, r0
}
   85f66:	4618      	mov	r0, r3
   85f68:	3708      	adds	r7, #8
   85f6a:	46bd      	mov	sp, r7
   85f6c:	bd80      	pop	{r7, pc}
   85f6e:	bf00      	nop
   85f70:	00085ef5 	.word	0x00085ef5
   85f74:	4008c000 	.word	0x4008c000
   85f78:	00085f09 	.word	0x00085f09
   85f7c:	40090000 	.word	0x40090000
   85f80:	000858a1 	.word	0x000858a1

00085f84 <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   85f84:	b580      	push	{r7, lr}
   85f86:	af00      	add	r7, sp, #0
    twi_set_lcd_tx_callback(lcd_callback);
   85f88:	4821      	ldr	r0, [pc, #132]	; (86010 <lcd_init+0x8c>)
   85f8a:	4b22      	ldr	r3, [pc, #136]	; (86014 <lcd_init+0x90>)
   85f8c:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   85f8e:	220c      	movs	r2, #12
   85f90:	2100      	movs	r1, #0
   85f92:	4821      	ldr	r0, [pc, #132]	; (86018 <lcd_init+0x94>)
   85f94:	4b21      	ldr	r3, [pc, #132]	; (8601c <lcd_init+0x98>)
   85f96:	4798      	blx	r3
    twiConfig.speed = 100000;
   85f98:	4b1f      	ldr	r3, [pc, #124]	; (86018 <lcd_init+0x94>)
   85f9a:	4a21      	ldr	r2, [pc, #132]	; (86020 <lcd_init+0x9c>)
   85f9c:	605a      	str	r2, [r3, #4]

    backlight = LCD_LIGHT_OFF;
   85f9e:	4b21      	ldr	r3, [pc, #132]	; (86024 <lcd_init+0xa0>)
   85fa0:	2200      	movs	r2, #0
   85fa2:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   85fa4:	2103      	movs	r1, #3
   85fa6:	2000      	movs	r0, #0
   85fa8:	4b1f      	ldr	r3, [pc, #124]	; (86028 <lcd_init+0xa4>)
   85faa:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   85fac:	2006      	movs	r0, #6
   85fae:	4b1f      	ldr	r3, [pc, #124]	; (8602c <lcd_init+0xa8>)
   85fb0:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   85fb2:	2103      	movs	r1, #3
   85fb4:	2000      	movs	r0, #0
   85fb6:	4b1c      	ldr	r3, [pc, #112]	; (86028 <lcd_init+0xa4>)
   85fb8:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   85fba:	2006      	movs	r0, #6
   85fbc:	4b1b      	ldr	r3, [pc, #108]	; (8602c <lcd_init+0xa8>)
   85fbe:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   85fc0:	2103      	movs	r1, #3
   85fc2:	2000      	movs	r0, #0
   85fc4:	4b18      	ldr	r3, [pc, #96]	; (86028 <lcd_init+0xa4>)
   85fc6:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   85fc8:	2006      	movs	r0, #6
   85fca:	4b18      	ldr	r3, [pc, #96]	; (8602c <lcd_init+0xa8>)
   85fcc:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   85fce:	2102      	movs	r1, #2
   85fd0:	2000      	movs	r0, #0
   85fd2:	4b15      	ldr	r3, [pc, #84]	; (86028 <lcd_init+0xa4>)
   85fd4:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   85fd6:	2128      	movs	r1, #40	; 0x28
   85fd8:	2000      	movs	r0, #0
   85fda:	4b15      	ldr	r3, [pc, #84]	; (86030 <lcd_init+0xac>)
   85fdc:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   85fde:	2108      	movs	r1, #8
   85fe0:	2000      	movs	r0, #0
   85fe2:	4b13      	ldr	r3, [pc, #76]	; (86030 <lcd_init+0xac>)
   85fe4:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   85fe6:	2101      	movs	r1, #1
   85fe8:	2000      	movs	r0, #0
   85fea:	4b11      	ldr	r3, [pc, #68]	; (86030 <lcd_init+0xac>)
   85fec:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   85fee:	2003      	movs	r0, #3
   85ff0:	4b0e      	ldr	r3, [pc, #56]	; (8602c <lcd_init+0xa8>)
   85ff2:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   85ff4:	2106      	movs	r1, #6
   85ff6:	2000      	movs	r0, #0
   85ff8:	4b0d      	ldr	r3, [pc, #52]	; (86030 <lcd_init+0xac>)
   85ffa:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   85ffc:	210c      	movs	r1, #12
   85ffe:	2000      	movs	r0, #0
   86000:	4b0b      	ldr	r3, [pc, #44]	; (86030 <lcd_init+0xac>)
   86002:	4798      	blx	r3

    backlight = LCD_LIGHT_ON;
   86004:	4b07      	ldr	r3, [pc, #28]	; (86024 <lcd_init+0xa0>)
   86006:	2208      	movs	r2, #8
   86008:	701a      	strb	r2, [r3, #0]
}
   8600a:	bf00      	nop
   8600c:	bd80      	pop	{r7, pc}
   8600e:	bf00      	nop
   86010:	00086285 	.word	0x00086285
   86014:	00085bb5 	.word	0x00085bb5
   86018:	20070874 	.word	0x20070874
   8601c:	00087545 	.word	0x00087545
   86020:	000186a0 	.word	0x000186a0
   86024:	20070869 	.word	0x20070869
   86028:	00086035 	.word	0x00086035
   8602c:	000862cd 	.word	0x000862cd
   86030:	00086145 	.word	0x00086145

00086034 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   86034:	b580      	push	{r7, lr}
   86036:	b084      	sub	sp, #16
   86038:	af00      	add	r7, sp, #0
   8603a:	4603      	mov	r3, r0
   8603c:	460a      	mov	r2, r1
   8603e:	71fb      	strb	r3, [r7, #7]
   86040:	4613      	mov	r3, r2
   86042:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   86044:	4b32      	ldr	r3, [pc, #200]	; (86110 <send_nibble+0xdc>)
   86046:	4798      	blx	r3
   86048:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   8604a:	e019      	b.n	86080 <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   8604c:	4b31      	ldr	r3, [pc, #196]	; (86114 <send_nibble+0xe0>)
   8604e:	4798      	blx	r3
   86050:	4602      	mov	r2, r0
   86052:	4b31      	ldr	r3, [pc, #196]	; (86118 <send_nibble+0xe4>)
   86054:	681b      	ldr	r3, [r3, #0]
   86056:	1ad3      	subs	r3, r2, r3
   86058:	2b0a      	cmp	r3, #10
   8605a:	d911      	bls.n	86080 <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   8605c:	4b2f      	ldr	r3, [pc, #188]	; (8611c <send_nibble+0xe8>)
   8605e:	2200      	movs	r2, #0
   86060:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   86062:	4b2f      	ldr	r3, [pc, #188]	; (86120 <send_nibble+0xec>)
   86064:	681b      	ldr	r3, [r3, #0]
   86066:	3301      	adds	r3, #1
   86068:	4a2d      	ldr	r2, [pc, #180]	; (86120 <send_nibble+0xec>)
   8606a:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   8606c:	f240 2102 	movw	r1, #514	; 0x202
   86070:	482c      	ldr	r0, [pc, #176]	; (86124 <send_nibble+0xf0>)
   86072:	4b2d      	ldr	r3, [pc, #180]	; (86128 <send_nibble+0xf4>)
   86074:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   86076:	492d      	ldr	r1, [pc, #180]	; (8612c <send_nibble+0xf8>)
   86078:	482d      	ldr	r0, [pc, #180]	; (86130 <send_nibble+0xfc>)
   8607a:	4b2e      	ldr	r3, [pc, #184]	; (86134 <send_nibble+0x100>)
   8607c:	4798      	blx	r3
            break;
   8607e:	e009      	b.n	86094 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   86080:	4b2d      	ldr	r3, [pc, #180]	; (86138 <send_nibble+0x104>)
   86082:	4798      	blx	r3
   86084:	4603      	mov	r3, r0
   86086:	461a      	mov	r2, r3
   86088:	4b24      	ldr	r3, [pc, #144]	; (8611c <send_nibble+0xe8>)
   8608a:	781b      	ldrb	r3, [r3, #0]
   8608c:	4313      	orrs	r3, r2
   8608e:	b2db      	uxtb	r3, r3
   86090:	2b00      	cmp	r3, #0
   86092:	d1db      	bne.n	8604c <send_nibble+0x18>
        }
    }

    tx_packet->chip = 0x27;
   86094:	68fb      	ldr	r3, [r7, #12]
   86096:	2227      	movs	r2, #39	; 0x27
   86098:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   8609c:	68fb      	ldr	r3, [r7, #12]
   8609e:	2200      	movs	r2, #0
   860a0:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   860a2:	68fb      	ldr	r3, [r7, #12]
   860a4:	2200      	movs	r2, #0
   860a6:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   860a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   860ac:	f003 030f 	and.w	r3, r3, #15
   860b0:	b25a      	sxtb	r2, r3
   860b2:	4b22      	ldr	r3, [pc, #136]	; (8613c <send_nibble+0x108>)
   860b4:	781b      	ldrb	r3, [r3, #0]
   860b6:	b25b      	sxtb	r3, r3
   860b8:	4313      	orrs	r3, r2
   860ba:	b25b      	sxtb	r3, r3
   860bc:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   860be:	79bb      	ldrb	r3, [r7, #6]
   860c0:	011b      	lsls	r3, r3, #4
   860c2:	b2da      	uxtb	r2, r3
   860c4:	79fb      	ldrb	r3, [r7, #7]
   860c6:	4313      	orrs	r3, r2
   860c8:	b2db      	uxtb	r3, r3
   860ca:	f043 0304 	orr.w	r3, r3, #4
   860ce:	b2da      	uxtb	r2, r3
   860d0:	68fb      	ldr	r3, [r7, #12]
   860d2:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   860d4:	79bb      	ldrb	r3, [r7, #6]
   860d6:	011b      	lsls	r3, r3, #4
   860d8:	b25a      	sxtb	r2, r3
   860da:	f997 3007 	ldrsb.w	r3, [r7, #7]
   860de:	4313      	orrs	r3, r2
   860e0:	b25b      	sxtb	r3, r3
   860e2:	b2da      	uxtb	r2, r3
   860e4:	68fb      	ldr	r3, [r7, #12]
   860e6:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   860e8:	68fb      	ldr	r3, [r7, #12]
   860ea:	2202      	movs	r2, #2
   860ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   860f0:	4b0a      	ldr	r3, [pc, #40]	; (8611c <send_nibble+0xe8>)
   860f2:	2201      	movs	r2, #1
   860f4:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   860f6:	68f9      	ldr	r1, [r7, #12]
   860f8:	480d      	ldr	r0, [pc, #52]	; (86130 <send_nibble+0xfc>)
   860fa:	4b11      	ldr	r3, [pc, #68]	; (86140 <send_nibble+0x10c>)
   860fc:	4798      	blx	r3
    lcdStartTicks = getTicks();
   860fe:	4b05      	ldr	r3, [pc, #20]	; (86114 <send_nibble+0xe0>)
   86100:	4798      	blx	r3
   86102:	4602      	mov	r2, r0
   86104:	4b04      	ldr	r3, [pc, #16]	; (86118 <send_nibble+0xe4>)
   86106:	601a      	str	r2, [r3, #0]
}
   86108:	bf00      	nop
   8610a:	3710      	adds	r7, #16
   8610c:	46bd      	mov	sp, r7
   8610e:	bd80      	pop	{r7, pc}
   86110:	00085a91 	.word	0x00085a91
   86114:	000862b9 	.word	0x000862b9
   86118:	2007086c 	.word	0x2007086c
   8611c:	2007086a 	.word	0x2007086a
   86120:	20070870 	.word	0x20070870
   86124:	4008c100 	.word	0x4008c100
   86128:	00082737 	.word	0x00082737
   8612c:	20070874 	.word	0x20070874
   86130:	4008c000 	.word	0x4008c000
   86134:	00085f25 	.word	0x00085f25
   86138:	00085a7d 	.word	0x00085a7d
   8613c:	20070869 	.word	0x20070869
   86140:	00085ab9 	.word	0x00085ab9

00086144 <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   86144:	b580      	push	{r7, lr}
   86146:	b084      	sub	sp, #16
   86148:	af00      	add	r7, sp, #0
   8614a:	4603      	mov	r3, r0
   8614c:	460a      	mov	r2, r1
   8614e:	71fb      	strb	r3, [r7, #7]
   86150:	4613      	mov	r3, r2
   86152:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   86154:	4b3e      	ldr	r3, [pc, #248]	; (86250 <send_byte+0x10c>)
   86156:	4798      	blx	r3
   86158:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   8615a:	e019      	b.n	86190 <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   8615c:	4b3d      	ldr	r3, [pc, #244]	; (86254 <send_byte+0x110>)
   8615e:	4798      	blx	r3
   86160:	4602      	mov	r2, r0
   86162:	4b3d      	ldr	r3, [pc, #244]	; (86258 <send_byte+0x114>)
   86164:	681b      	ldr	r3, [r3, #0]
   86166:	1ad3      	subs	r3, r2, r3
   86168:	2b0a      	cmp	r3, #10
   8616a:	d911      	bls.n	86190 <send_byte+0x4c>
        {
            lcdIsBusy = false;
   8616c:	4b3b      	ldr	r3, [pc, #236]	; (8625c <send_byte+0x118>)
   8616e:	2200      	movs	r2, #0
   86170:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   86172:	4b3b      	ldr	r3, [pc, #236]	; (86260 <send_byte+0x11c>)
   86174:	681b      	ldr	r3, [r3, #0]
   86176:	3301      	adds	r3, #1
   86178:	4a39      	ldr	r2, [pc, #228]	; (86260 <send_byte+0x11c>)
   8617a:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   8617c:	f240 2102 	movw	r1, #514	; 0x202
   86180:	4838      	ldr	r0, [pc, #224]	; (86264 <send_byte+0x120>)
   86182:	4b39      	ldr	r3, [pc, #228]	; (86268 <send_byte+0x124>)
   86184:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   86186:	4939      	ldr	r1, [pc, #228]	; (8626c <send_byte+0x128>)
   86188:	4839      	ldr	r0, [pc, #228]	; (86270 <send_byte+0x12c>)
   8618a:	4b3a      	ldr	r3, [pc, #232]	; (86274 <send_byte+0x130>)
   8618c:	4798      	blx	r3
            break;
   8618e:	e009      	b.n	861a4 <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   86190:	4b39      	ldr	r3, [pc, #228]	; (86278 <send_byte+0x134>)
   86192:	4798      	blx	r3
   86194:	4603      	mov	r3, r0
   86196:	461a      	mov	r2, r3
   86198:	4b30      	ldr	r3, [pc, #192]	; (8625c <send_byte+0x118>)
   8619a:	781b      	ldrb	r3, [r3, #0]
   8619c:	4313      	orrs	r3, r2
   8619e:	b2db      	uxtb	r3, r3
   861a0:	2b00      	cmp	r3, #0
   861a2:	d1db      	bne.n	8615c <send_byte+0x18>
        }
    }

    tx_packet->chip = 0x27;
   861a4:	68fb      	ldr	r3, [r7, #12]
   861a6:	2227      	movs	r2, #39	; 0x27
   861a8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   861ac:	68fb      	ldr	r3, [r7, #12]
   861ae:	2200      	movs	r2, #0
   861b0:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   861b2:	68fb      	ldr	r3, [r7, #12]
   861b4:	2200      	movs	r2, #0
   861b6:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   861b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   861bc:	f003 030f 	and.w	r3, r3, #15
   861c0:	b25a      	sxtb	r2, r3
   861c2:	4b2e      	ldr	r3, [pc, #184]	; (8627c <send_byte+0x138>)
   861c4:	781b      	ldrb	r3, [r3, #0]
   861c6:	b25b      	sxtb	r3, r3
   861c8:	4313      	orrs	r3, r2
   861ca:	b25b      	sxtb	r3, r3
   861cc:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   861ce:	79bb      	ldrb	r3, [r7, #6]
   861d0:	f023 030f 	bic.w	r3, r3, #15
   861d4:	b2da      	uxtb	r2, r3
   861d6:	79fb      	ldrb	r3, [r7, #7]
   861d8:	4313      	orrs	r3, r2
   861da:	b2db      	uxtb	r3, r3
   861dc:	f043 0304 	orr.w	r3, r3, #4
   861e0:	b2da      	uxtb	r2, r3
   861e2:	68fb      	ldr	r3, [r7, #12]
   861e4:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   861e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
   861ea:	f023 030f 	bic.w	r3, r3, #15
   861ee:	b25a      	sxtb	r2, r3
   861f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   861f4:	4313      	orrs	r3, r2
   861f6:	b25b      	sxtb	r3, r3
   861f8:	b2da      	uxtb	r2, r3
   861fa:	68fb      	ldr	r3, [r7, #12]
   861fc:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   861fe:	79bb      	ldrb	r3, [r7, #6]
   86200:	011b      	lsls	r3, r3, #4
   86202:	b2da      	uxtb	r2, r3
   86204:	79fb      	ldrb	r3, [r7, #7]
   86206:	4313      	orrs	r3, r2
   86208:	b2db      	uxtb	r3, r3
   8620a:	f043 0304 	orr.w	r3, r3, #4
   8620e:	b2da      	uxtb	r2, r3
   86210:	68fb      	ldr	r3, [r7, #12]
   86212:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   86214:	79bb      	ldrb	r3, [r7, #6]
   86216:	011b      	lsls	r3, r3, #4
   86218:	b25a      	sxtb	r2, r3
   8621a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8621e:	4313      	orrs	r3, r2
   86220:	b25b      	sxtb	r3, r3
   86222:	b2da      	uxtb	r2, r3
   86224:	68fb      	ldr	r3, [r7, #12]
   86226:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   86228:	68fb      	ldr	r3, [r7, #12]
   8622a:	2204      	movs	r2, #4
   8622c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   86230:	4b0a      	ldr	r3, [pc, #40]	; (8625c <send_byte+0x118>)
   86232:	2201      	movs	r2, #1
   86234:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   86236:	68f9      	ldr	r1, [r7, #12]
   86238:	480d      	ldr	r0, [pc, #52]	; (86270 <send_byte+0x12c>)
   8623a:	4b11      	ldr	r3, [pc, #68]	; (86280 <send_byte+0x13c>)
   8623c:	4798      	blx	r3
    lcdStartTicks = getTicks();
   8623e:	4b05      	ldr	r3, [pc, #20]	; (86254 <send_byte+0x110>)
   86240:	4798      	blx	r3
   86242:	4602      	mov	r2, r0
   86244:	4b04      	ldr	r3, [pc, #16]	; (86258 <send_byte+0x114>)
   86246:	601a      	str	r2, [r3, #0]
}
   86248:	bf00      	nop
   8624a:	3710      	adds	r7, #16
   8624c:	46bd      	mov	sp, r7
   8624e:	bd80      	pop	{r7, pc}
   86250:	00085a91 	.word	0x00085a91
   86254:	000862b9 	.word	0x000862b9
   86258:	2007086c 	.word	0x2007086c
   8625c:	2007086a 	.word	0x2007086a
   86260:	20070870 	.word	0x20070870
   86264:	4008c100 	.word	0x4008c100
   86268:	00082737 	.word	0x00082737
   8626c:	20070874 	.word	0x20070874
   86270:	4008c000 	.word	0x4008c000
   86274:	00085f25 	.word	0x00085f25
   86278:	00085a7d 	.word	0x00085a7d
   8627c:	20070869 	.word	0x20070869
   86280:	00085ab9 	.word	0x00085ab9

00086284 <lcd_callback>:

static void lcd_callback(void)
{
   86284:	b480      	push	{r7}
   86286:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   86288:	4b03      	ldr	r3, [pc, #12]	; (86298 <lcd_callback+0x14>)
   8628a:	2200      	movs	r2, #0
   8628c:	701a      	strb	r2, [r3, #0]
}
   8628e:	bf00      	nop
   86290:	46bd      	mov	sp, r7
   86292:	bc80      	pop	{r7}
   86294:	4770      	bx	lr
   86296:	bf00      	nop
   86298:	2007086a 	.word	0x2007086a

0008629c <SysTick_Handler>:
//float battery_voltage = 0;
uint8_t battery_percentage;
uint8_t prev_battery_percentage = 0;

void SysTick_Handler(void)
{
   8629c:	b480      	push	{r7}
   8629e:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   862a0:	4b04      	ldr	r3, [pc, #16]	; (862b4 <SysTick_Handler+0x18>)
   862a2:	681b      	ldr	r3, [r3, #0]
   862a4:	3301      	adds	r3, #1
   862a6:	4a03      	ldr	r2, [pc, #12]	; (862b4 <SysTick_Handler+0x18>)
   862a8:	6013      	str	r3, [r2, #0]
}
   862aa:	bf00      	nop
   862ac:	46bd      	mov	sp, r7
   862ae:	bc80      	pop	{r7}
   862b0:	4770      	bx	lr
   862b2:	bf00      	nop
   862b4:	20070880 	.word	0x20070880

000862b8 <getTicks>:

uint32_t getTicks(void)
{
   862b8:	b480      	push	{r7}
   862ba:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   862bc:	4b02      	ldr	r3, [pc, #8]	; (862c8 <getTicks+0x10>)
   862be:	681b      	ldr	r3, [r3, #0]
}
   862c0:	4618      	mov	r0, r3
   862c2:	46bd      	mov	sp, r7
   862c4:	bc80      	pop	{r7}
   862c6:	4770      	bx	lr
   862c8:	20070880 	.word	0x20070880

000862cc <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   862cc:	b480      	push	{r7}
   862ce:	b085      	sub	sp, #20
   862d0:	af00      	add	r7, sp, #0
   862d2:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   862d4:	4b07      	ldr	r3, [pc, #28]	; (862f4 <mdelay+0x28>)
   862d6:	681b      	ldr	r3, [r3, #0]
   862d8:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   862da:	bf00      	nop
   862dc:	4b05      	ldr	r3, [pc, #20]	; (862f4 <mdelay+0x28>)
   862de:	681a      	ldr	r2, [r3, #0]
   862e0:	68fb      	ldr	r3, [r7, #12]
   862e2:	1ad2      	subs	r2, r2, r3
   862e4:	687b      	ldr	r3, [r7, #4]
   862e6:	429a      	cmp	r2, r3
   862e8:	d3f8      	bcc.n	862dc <mdelay+0x10>
}
   862ea:	bf00      	nop
   862ec:	3714      	adds	r7, #20
   862ee:	46bd      	mov	sp, r7
   862f0:	bc80      	pop	{r7}
   862f2:	4770      	bx	lr
   862f4:	20070880 	.word	0x20070880

000862f8 <osc_enable>:
{
   862f8:	b580      	push	{r7, lr}
   862fa:	b082      	sub	sp, #8
   862fc:	af00      	add	r7, sp, #0
   862fe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   86300:	687b      	ldr	r3, [r7, #4]
   86302:	2b07      	cmp	r3, #7
   86304:	d831      	bhi.n	8636a <osc_enable+0x72>
   86306:	a201      	add	r2, pc, #4	; (adr r2, 8630c <osc_enable+0x14>)
   86308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8630c:	00086369 	.word	0x00086369
   86310:	0008632d 	.word	0x0008632d
   86314:	00086335 	.word	0x00086335
   86318:	0008633d 	.word	0x0008633d
   8631c:	00086345 	.word	0x00086345
   86320:	0008634d 	.word	0x0008634d
   86324:	00086355 	.word	0x00086355
   86328:	0008635f 	.word	0x0008635f
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8632c:	2000      	movs	r0, #0
   8632e:	4b11      	ldr	r3, [pc, #68]	; (86374 <osc_enable+0x7c>)
   86330:	4798      	blx	r3
		break;
   86332:	e01a      	b.n	8636a <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   86334:	2001      	movs	r0, #1
   86336:	4b0f      	ldr	r3, [pc, #60]	; (86374 <osc_enable+0x7c>)
   86338:	4798      	blx	r3
		break;
   8633a:	e016      	b.n	8636a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8633c:	2000      	movs	r0, #0
   8633e:	4b0e      	ldr	r3, [pc, #56]	; (86378 <osc_enable+0x80>)
   86340:	4798      	blx	r3
		break;
   86342:	e012      	b.n	8636a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   86344:	2010      	movs	r0, #16
   86346:	4b0c      	ldr	r3, [pc, #48]	; (86378 <osc_enable+0x80>)
   86348:	4798      	blx	r3
		break;
   8634a:	e00e      	b.n	8636a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8634c:	2020      	movs	r0, #32
   8634e:	4b0a      	ldr	r3, [pc, #40]	; (86378 <osc_enable+0x80>)
   86350:	4798      	blx	r3
		break;
   86352:	e00a      	b.n	8636a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   86354:	213e      	movs	r1, #62	; 0x3e
   86356:	2000      	movs	r0, #0
   86358:	4b08      	ldr	r3, [pc, #32]	; (8637c <osc_enable+0x84>)
   8635a:	4798      	blx	r3
		break;
   8635c:	e005      	b.n	8636a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   8635e:	213e      	movs	r1, #62	; 0x3e
   86360:	2001      	movs	r0, #1
   86362:	4b06      	ldr	r3, [pc, #24]	; (8637c <osc_enable+0x84>)
   86364:	4798      	blx	r3
		break;
   86366:	e000      	b.n	8636a <osc_enable+0x72>
		break;
   86368:	bf00      	nop
}
   8636a:	bf00      	nop
   8636c:	3708      	adds	r7, #8
   8636e:	46bd      	mov	sp, r7
   86370:	bd80      	pop	{r7, pc}
   86372:	bf00      	nop
   86374:	00086935 	.word	0x00086935
   86378:	000869a1 	.word	0x000869a1
   8637c:	00086a11 	.word	0x00086a11

00086380 <osc_is_ready>:
{
   86380:	b580      	push	{r7, lr}
   86382:	b082      	sub	sp, #8
   86384:	af00      	add	r7, sp, #0
   86386:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   86388:	687b      	ldr	r3, [r7, #4]
   8638a:	2b07      	cmp	r3, #7
   8638c:	d826      	bhi.n	863dc <osc_is_ready+0x5c>
   8638e:	a201      	add	r2, pc, #4	; (adr r2, 86394 <osc_is_ready+0x14>)
   86390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86394:	000863b5 	.word	0x000863b5
   86398:	000863b9 	.word	0x000863b9
   8639c:	000863b9 	.word	0x000863b9
   863a0:	000863cb 	.word	0x000863cb
   863a4:	000863cb 	.word	0x000863cb
   863a8:	000863cb 	.word	0x000863cb
   863ac:	000863cb 	.word	0x000863cb
   863b0:	000863cb 	.word	0x000863cb
		return 1;
   863b4:	2301      	movs	r3, #1
   863b6:	e012      	b.n	863de <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   863b8:	4b0b      	ldr	r3, [pc, #44]	; (863e8 <osc_is_ready+0x68>)
   863ba:	4798      	blx	r3
   863bc:	4603      	mov	r3, r0
   863be:	2b00      	cmp	r3, #0
   863c0:	bf14      	ite	ne
   863c2:	2301      	movne	r3, #1
   863c4:	2300      	moveq	r3, #0
   863c6:	b2db      	uxtb	r3, r3
   863c8:	e009      	b.n	863de <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   863ca:	4b08      	ldr	r3, [pc, #32]	; (863ec <osc_is_ready+0x6c>)
   863cc:	4798      	blx	r3
   863ce:	4603      	mov	r3, r0
   863d0:	2b00      	cmp	r3, #0
   863d2:	bf14      	ite	ne
   863d4:	2301      	movne	r3, #1
   863d6:	2300      	moveq	r3, #0
   863d8:	b2db      	uxtb	r3, r3
   863da:	e000      	b.n	863de <osc_is_ready+0x5e>
	return 0;
   863dc:	2300      	movs	r3, #0
}
   863de:	4618      	mov	r0, r3
   863e0:	3708      	adds	r7, #8
   863e2:	46bd      	mov	sp, r7
   863e4:	bd80      	pop	{r7, pc}
   863e6:	bf00      	nop
   863e8:	0008696d 	.word	0x0008696d
   863ec:	00086a89 	.word	0x00086a89

000863f0 <osc_get_rate>:
{
   863f0:	b480      	push	{r7}
   863f2:	b083      	sub	sp, #12
   863f4:	af00      	add	r7, sp, #0
   863f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   863f8:	687b      	ldr	r3, [r7, #4]
   863fa:	2b07      	cmp	r3, #7
   863fc:	d825      	bhi.n	8644a <osc_get_rate+0x5a>
   863fe:	a201      	add	r2, pc, #4	; (adr r2, 86404 <osc_get_rate+0x14>)
   86400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86404:	00086425 	.word	0x00086425
   86408:	0008642b 	.word	0x0008642b
   8640c:	00086431 	.word	0x00086431
   86410:	00086437 	.word	0x00086437
   86414:	0008643b 	.word	0x0008643b
   86418:	0008643f 	.word	0x0008643f
   8641c:	00086443 	.word	0x00086443
   86420:	00086447 	.word	0x00086447
		return OSC_SLCK_32K_RC_HZ;
   86424:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   86428:	e010      	b.n	8644c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8642a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8642e:	e00d      	b.n	8644c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   86430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   86434:	e00a      	b.n	8644c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   86436:	4b08      	ldr	r3, [pc, #32]	; (86458 <osc_get_rate+0x68>)
   86438:	e008      	b.n	8644c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8643a:	4b08      	ldr	r3, [pc, #32]	; (8645c <osc_get_rate+0x6c>)
   8643c:	e006      	b.n	8644c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8643e:	4b08      	ldr	r3, [pc, #32]	; (86460 <osc_get_rate+0x70>)
   86440:	e004      	b.n	8644c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   86442:	4b07      	ldr	r3, [pc, #28]	; (86460 <osc_get_rate+0x70>)
   86444:	e002      	b.n	8644c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   86446:	4b06      	ldr	r3, [pc, #24]	; (86460 <osc_get_rate+0x70>)
   86448:	e000      	b.n	8644c <osc_get_rate+0x5c>
	return 0;
   8644a:	2300      	movs	r3, #0
}
   8644c:	4618      	mov	r0, r3
   8644e:	370c      	adds	r7, #12
   86450:	46bd      	mov	sp, r7
   86452:	bc80      	pop	{r7}
   86454:	4770      	bx	lr
   86456:	bf00      	nop
   86458:	003d0900 	.word	0x003d0900
   8645c:	007a1200 	.word	0x007a1200
   86460:	00b71b00 	.word	0x00b71b00

00086464 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   86464:	b580      	push	{r7, lr}
   86466:	b082      	sub	sp, #8
   86468:	af00      	add	r7, sp, #0
   8646a:	4603      	mov	r3, r0
   8646c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8646e:	bf00      	nop
   86470:	79fb      	ldrb	r3, [r7, #7]
   86472:	4618      	mov	r0, r3
   86474:	4b05      	ldr	r3, [pc, #20]	; (8648c <osc_wait_ready+0x28>)
   86476:	4798      	blx	r3
   86478:	4603      	mov	r3, r0
   8647a:	f083 0301 	eor.w	r3, r3, #1
   8647e:	b2db      	uxtb	r3, r3
   86480:	2b00      	cmp	r3, #0
   86482:	d1f5      	bne.n	86470 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   86484:	bf00      	nop
   86486:	3708      	adds	r7, #8
   86488:	46bd      	mov	sp, r7
   8648a:	bd80      	pop	{r7, pc}
   8648c:	00086381 	.word	0x00086381

00086490 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   86490:	b580      	push	{r7, lr}
   86492:	b086      	sub	sp, #24
   86494:	af00      	add	r7, sp, #0
   86496:	60f8      	str	r0, [r7, #12]
   86498:	607a      	str	r2, [r7, #4]
   8649a:	603b      	str	r3, [r7, #0]
   8649c:	460b      	mov	r3, r1
   8649e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   864a0:	687b      	ldr	r3, [r7, #4]
   864a2:	2b00      	cmp	r3, #0
   864a4:	d107      	bne.n	864b6 <pll_config_init+0x26>
   864a6:	683b      	ldr	r3, [r7, #0]
   864a8:	2b00      	cmp	r3, #0
   864aa:	d104      	bne.n	864b6 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   864ac:	68fb      	ldr	r3, [r7, #12]
   864ae:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   864b2:	601a      	str	r2, [r3, #0]
   864b4:	e019      	b.n	864ea <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   864b6:	7afb      	ldrb	r3, [r7, #11]
   864b8:	4618      	mov	r0, r3
   864ba:	4b0e      	ldr	r3, [pc, #56]	; (864f4 <pll_config_init+0x64>)
   864bc:	4798      	blx	r3
   864be:	4602      	mov	r2, r0
   864c0:	687b      	ldr	r3, [r7, #4]
   864c2:	fbb2 f3f3 	udiv	r3, r2, r3
   864c6:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   864c8:	697b      	ldr	r3, [r7, #20]
   864ca:	683a      	ldr	r2, [r7, #0]
   864cc:	fb02 f303 	mul.w	r3, r2, r3
   864d0:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   864d2:	683b      	ldr	r3, [r7, #0]
   864d4:	3b01      	subs	r3, #1
   864d6:	041a      	lsls	r2, r3, #16
   864d8:	4b07      	ldr	r3, [pc, #28]	; (864f8 <pll_config_init+0x68>)
   864da:	4013      	ands	r3, r2
   864dc:	687a      	ldr	r2, [r7, #4]
   864de:	b2d2      	uxtb	r2, r2
   864e0:	4313      	orrs	r3, r2
   864e2:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   864e6:	68fb      	ldr	r3, [r7, #12]
   864e8:	601a      	str	r2, [r3, #0]
	}
}
   864ea:	bf00      	nop
   864ec:	3718      	adds	r7, #24
   864ee:	46bd      	mov	sp, r7
   864f0:	bd80      	pop	{r7, pc}
   864f2:	bf00      	nop
   864f4:	000863f1 	.word	0x000863f1
   864f8:	07ff0000 	.word	0x07ff0000

000864fc <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   864fc:	b580      	push	{r7, lr}
   864fe:	b082      	sub	sp, #8
   86500:	af00      	add	r7, sp, #0
   86502:	6078      	str	r0, [r7, #4]
   86504:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   86506:	683b      	ldr	r3, [r7, #0]
   86508:	2b00      	cmp	r3, #0
   8650a:	d108      	bne.n	8651e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8650c:	4b09      	ldr	r3, [pc, #36]	; (86534 <pll_enable+0x38>)
   8650e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   86510:	4a09      	ldr	r2, [pc, #36]	; (86538 <pll_enable+0x3c>)
   86512:	687b      	ldr	r3, [r7, #4]
   86514:	681b      	ldr	r3, [r3, #0]
   86516:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8651a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   8651c:	e005      	b.n	8652a <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8651e:	4a06      	ldr	r2, [pc, #24]	; (86538 <pll_enable+0x3c>)
   86520:	687b      	ldr	r3, [r7, #4]
   86522:	681b      	ldr	r3, [r3, #0]
   86524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86528:	61d3      	str	r3, [r2, #28]
}
   8652a:	bf00      	nop
   8652c:	3708      	adds	r7, #8
   8652e:	46bd      	mov	sp, r7
   86530:	bd80      	pop	{r7, pc}
   86532:	bf00      	nop
   86534:	00086aa1 	.word	0x00086aa1
   86538:	400e0600 	.word	0x400e0600

0008653c <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8653c:	b580      	push	{r7, lr}
   8653e:	b082      	sub	sp, #8
   86540:	af00      	add	r7, sp, #0
   86542:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   86544:	687b      	ldr	r3, [r7, #4]
   86546:	2b00      	cmp	r3, #0
   86548:	d103      	bne.n	86552 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8654a:	4b05      	ldr	r3, [pc, #20]	; (86560 <pll_is_locked+0x24>)
   8654c:	4798      	blx	r3
   8654e:	4603      	mov	r3, r0
   86550:	e002      	b.n	86558 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   86552:	4b04      	ldr	r3, [pc, #16]	; (86564 <pll_is_locked+0x28>)
   86554:	4798      	blx	r3
   86556:	4603      	mov	r3, r0
	}
}
   86558:	4618      	mov	r0, r3
   8655a:	3708      	adds	r7, #8
   8655c:	46bd      	mov	sp, r7
   8655e:	bd80      	pop	{r7, pc}
   86560:	00086ab9 	.word	0x00086ab9
   86564:	00086ad1 	.word	0x00086ad1

00086568 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   86568:	b580      	push	{r7, lr}
   8656a:	b082      	sub	sp, #8
   8656c:	af00      	add	r7, sp, #0
   8656e:	4603      	mov	r3, r0
   86570:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   86572:	79fb      	ldrb	r3, [r7, #7]
   86574:	3b03      	subs	r3, #3
   86576:	2b04      	cmp	r3, #4
   86578:	d808      	bhi.n	8658c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8657a:	79fb      	ldrb	r3, [r7, #7]
   8657c:	4618      	mov	r0, r3
   8657e:	4b06      	ldr	r3, [pc, #24]	; (86598 <pll_enable_source+0x30>)
   86580:	4798      	blx	r3
		osc_wait_ready(e_src);
   86582:	79fb      	ldrb	r3, [r7, #7]
   86584:	4618      	mov	r0, r3
   86586:	4b05      	ldr	r3, [pc, #20]	; (8659c <pll_enable_source+0x34>)
   86588:	4798      	blx	r3
		break;
   8658a:	e000      	b.n	8658e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   8658c:	bf00      	nop
	}
}
   8658e:	bf00      	nop
   86590:	3708      	adds	r7, #8
   86592:	46bd      	mov	sp, r7
   86594:	bd80      	pop	{r7, pc}
   86596:	bf00      	nop
   86598:	000862f9 	.word	0x000862f9
   8659c:	00086465 	.word	0x00086465

000865a0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   865a0:	b580      	push	{r7, lr}
   865a2:	b082      	sub	sp, #8
   865a4:	af00      	add	r7, sp, #0
   865a6:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   865a8:	bf00      	nop
   865aa:	6878      	ldr	r0, [r7, #4]
   865ac:	4b04      	ldr	r3, [pc, #16]	; (865c0 <pll_wait_for_lock+0x20>)
   865ae:	4798      	blx	r3
   865b0:	4603      	mov	r3, r0
   865b2:	2b00      	cmp	r3, #0
   865b4:	d0f9      	beq.n	865aa <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   865b6:	2300      	movs	r3, #0
}
   865b8:	4618      	mov	r0, r3
   865ba:	3708      	adds	r7, #8
   865bc:	46bd      	mov	sp, r7
   865be:	bd80      	pop	{r7, pc}
   865c0:	0008653d 	.word	0x0008653d

000865c4 <sysclk_get_main_hz>:
{
   865c4:	b580      	push	{r7, lr}
   865c6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   865c8:	2006      	movs	r0, #6
   865ca:	4b04      	ldr	r3, [pc, #16]	; (865dc <sysclk_get_main_hz+0x18>)
   865cc:	4798      	blx	r3
   865ce:	4602      	mov	r2, r0
   865d0:	4613      	mov	r3, r2
   865d2:	00db      	lsls	r3, r3, #3
   865d4:	1a9b      	subs	r3, r3, r2
   865d6:	005b      	lsls	r3, r3, #1
}
   865d8:	4618      	mov	r0, r3
   865da:	bd80      	pop	{r7, pc}
   865dc:	000863f1 	.word	0x000863f1

000865e0 <sysclk_get_cpu_hz>:
{
   865e0:	b580      	push	{r7, lr}
   865e2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   865e4:	4b02      	ldr	r3, [pc, #8]	; (865f0 <sysclk_get_cpu_hz+0x10>)
   865e6:	4798      	blx	r3
   865e8:	4603      	mov	r3, r0
   865ea:	085b      	lsrs	r3, r3, #1
}
   865ec:	4618      	mov	r0, r3
   865ee:	bd80      	pop	{r7, pc}
   865f0:	000865c5 	.word	0x000865c5

000865f4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   865f4:	b590      	push	{r4, r7, lr}
   865f6:	b083      	sub	sp, #12
   865f8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   865fa:	4811      	ldr	r0, [pc, #68]	; (86640 <sysclk_init+0x4c>)
   865fc:	4b11      	ldr	r3, [pc, #68]	; (86644 <sysclk_init+0x50>)
   865fe:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   86600:	2006      	movs	r0, #6
   86602:	4b11      	ldr	r3, [pc, #68]	; (86648 <sysclk_init+0x54>)
   86604:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   86606:	1d38      	adds	r0, r7, #4
   86608:	230e      	movs	r3, #14
   8660a:	2201      	movs	r2, #1
   8660c:	2106      	movs	r1, #6
   8660e:	4c0f      	ldr	r4, [pc, #60]	; (8664c <sysclk_init+0x58>)
   86610:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   86612:	1d3b      	adds	r3, r7, #4
   86614:	2100      	movs	r1, #0
   86616:	4618      	mov	r0, r3
   86618:	4b0d      	ldr	r3, [pc, #52]	; (86650 <sysclk_init+0x5c>)
   8661a:	4798      	blx	r3
		pll_wait_for_lock(0);
   8661c:	2000      	movs	r0, #0
   8661e:	4b0d      	ldr	r3, [pc, #52]	; (86654 <sysclk_init+0x60>)
   86620:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   86622:	2010      	movs	r0, #16
   86624:	4b0c      	ldr	r3, [pc, #48]	; (86658 <sysclk_init+0x64>)
   86626:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   86628:	4b0c      	ldr	r3, [pc, #48]	; (8665c <sysclk_init+0x68>)
   8662a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8662c:	4b0c      	ldr	r3, [pc, #48]	; (86660 <sysclk_init+0x6c>)
   8662e:	4798      	blx	r3
   86630:	4603      	mov	r3, r0
   86632:	4618      	mov	r0, r3
   86634:	4b03      	ldr	r3, [pc, #12]	; (86644 <sysclk_init+0x50>)
   86636:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   86638:	bf00      	nop
   8663a:	370c      	adds	r7, #12
   8663c:	46bd      	mov	sp, r7
   8663e:	bd90      	pop	{r4, r7, pc}
   86640:	0501bd00 	.word	0x0501bd00
   86644:	200700d1 	.word	0x200700d1
   86648:	00086569 	.word	0x00086569
   8664c:	00086491 	.word	0x00086491
   86650:	000864fd 	.word	0x000864fd
   86654:	000865a1 	.word	0x000865a1
   86658:	000868b5 	.word	0x000868b5
   8665c:	00087025 	.word	0x00087025
   86660:	000865e1 	.word	0x000865e1

00086664 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   86664:	b580      	push	{r7, lr}
   86666:	b082      	sub	sp, #8
   86668:	af00      	add	r7, sp, #0
   8666a:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   8666c:	6878      	ldr	r0, [r7, #4]
   8666e:	4b03      	ldr	r3, [pc, #12]	; (8667c <dmac_init+0x18>)
   86670:	4798      	blx	r3
}
   86672:	bf00      	nop
   86674:	3708      	adds	r7, #8
   86676:	46bd      	mov	sp, r7
   86678:	bd80      	pop	{r7, pc}
   8667a:	bf00      	nop
   8667c:	000866bf 	.word	0x000866bf

00086680 <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   86680:	b480      	push	{r7}
   86682:	b083      	sub	sp, #12
   86684:	af00      	add	r7, sp, #0
   86686:	6078      	str	r0, [r7, #4]
   86688:	460b      	mov	r3, r1
   8668a:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   8668c:	687b      	ldr	r3, [r7, #4]
   8668e:	681b      	ldr	r3, [r3, #0]
   86690:	f023 0210 	bic.w	r2, r3, #16
   86694:	78fb      	ldrb	r3, [r7, #3]
   86696:	431a      	orrs	r2, r3
   86698:	687b      	ldr	r3, [r7, #4]
   8669a:	601a      	str	r2, [r3, #0]
}
   8669c:	bf00      	nop
   8669e:	370c      	adds	r7, #12
   866a0:	46bd      	mov	sp, r7
   866a2:	bc80      	pop	{r7}
   866a4:	4770      	bx	lr

000866a6 <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   866a6:	b480      	push	{r7}
   866a8:	b083      	sub	sp, #12
   866aa:	af00      	add	r7, sp, #0
   866ac:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   866ae:	687b      	ldr	r3, [r7, #4]
   866b0:	2201      	movs	r2, #1
   866b2:	605a      	str	r2, [r3, #4]
}
   866b4:	bf00      	nop
   866b6:	370c      	adds	r7, #12
   866b8:	46bd      	mov	sp, r7
   866ba:	bc80      	pop	{r7}
   866bc:	4770      	bx	lr

000866be <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   866be:	b480      	push	{r7}
   866c0:	b083      	sub	sp, #12
   866c2:	af00      	add	r7, sp, #0
   866c4:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   866c6:	687b      	ldr	r3, [r7, #4]
   866c8:	685b      	ldr	r3, [r3, #4]
   866ca:	f023 0201 	bic.w	r2, r3, #1
   866ce:	687b      	ldr	r3, [r7, #4]
   866d0:	605a      	str	r2, [r3, #4]
}
   866d2:	bf00      	nop
   866d4:	370c      	adds	r7, #12
   866d6:	46bd      	mov	sp, r7
   866d8:	bc80      	pop	{r7}
   866da:	4770      	bx	lr

000866dc <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   866dc:	b480      	push	{r7}
   866de:	b083      	sub	sp, #12
   866e0:	af00      	add	r7, sp, #0
   866e2:	6078      	str	r0, [r7, #4]
   866e4:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   866e6:	687b      	ldr	r3, [r7, #4]
   866e8:	683a      	ldr	r2, [r7, #0]
   866ea:	619a      	str	r2, [r3, #24]
}
   866ec:	bf00      	nop
   866ee:	370c      	adds	r7, #12
   866f0:	46bd      	mov	sp, r7
   866f2:	bc80      	pop	{r7}
   866f4:	4770      	bx	lr

000866f6 <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   866f6:	b480      	push	{r7}
   866f8:	b083      	sub	sp, #12
   866fa:	af00      	add	r7, sp, #0
   866fc:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   866fe:	687b      	ldr	r3, [r7, #4]
   86700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   86702:	4618      	mov	r0, r3
   86704:	370c      	adds	r7, #12
   86706:	46bd      	mov	sp, r7
   86708:	bc80      	pop	{r7}
   8670a:	4770      	bx	lr

0008670c <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   8670c:	b480      	push	{r7}
   8670e:	b083      	sub	sp, #12
   86710:	af00      	add	r7, sp, #0
   86712:	6078      	str	r0, [r7, #4]
   86714:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   86716:	2201      	movs	r2, #1
   86718:	683b      	ldr	r3, [r7, #0]
   8671a:	409a      	lsls	r2, r3
   8671c:	687b      	ldr	r3, [r7, #4]
   8671e:	629a      	str	r2, [r3, #40]	; 0x28
}
   86720:	bf00      	nop
   86722:	370c      	adds	r7, #12
   86724:	46bd      	mov	sp, r7
   86726:	bc80      	pop	{r7}
   86728:	4770      	bx	lr

0008672a <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   8672a:	b480      	push	{r7}
   8672c:	b083      	sub	sp, #12
   8672e:	af00      	add	r7, sp, #0
   86730:	6078      	str	r0, [r7, #4]
   86732:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   86734:	2201      	movs	r2, #1
   86736:	683b      	ldr	r3, [r7, #0]
   86738:	409a      	lsls	r2, r3
   8673a:	687b      	ldr	r3, [r7, #4]
   8673c:	62da      	str	r2, [r3, #44]	; 0x2c
}
   8673e:	bf00      	nop
   86740:	370c      	adds	r7, #12
   86742:	46bd      	mov	sp, r7
   86744:	bc80      	pop	{r7}
   86746:	4770      	bx	lr

00086748 <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   86748:	b480      	push	{r7}
   8674a:	b085      	sub	sp, #20
   8674c:	af00      	add	r7, sp, #0
   8674e:	60f8      	str	r0, [r7, #12]
   86750:	60b9      	str	r1, [r7, #8]
   86752:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   86754:	68f9      	ldr	r1, [r7, #12]
   86756:	68ba      	ldr	r2, [r7, #8]
   86758:	4613      	mov	r3, r2
   8675a:	009b      	lsls	r3, r3, #2
   8675c:	4413      	add	r3, r2
   8675e:	00db      	lsls	r3, r3, #3
   86760:	440b      	add	r3, r1
   86762:	333c      	adds	r3, #60	; 0x3c
   86764:	687a      	ldr	r2, [r7, #4]
   86766:	601a      	str	r2, [r3, #0]
}
   86768:	bf00      	nop
   8676a:	3714      	adds	r7, #20
   8676c:	46bd      	mov	sp, r7
   8676e:	bc80      	pop	{r7}
   86770:	4770      	bx	lr

00086772 <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   86772:	b480      	push	{r7}
   86774:	b085      	sub	sp, #20
   86776:	af00      	add	r7, sp, #0
   86778:	60f8      	str	r0, [r7, #12]
   8677a:	60b9      	str	r1, [r7, #8]
   8677c:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   8677e:	68f9      	ldr	r1, [r7, #12]
   86780:	68ba      	ldr	r2, [r7, #8]
   86782:	4613      	mov	r3, r2
   86784:	009b      	lsls	r3, r3, #2
   86786:	4413      	add	r3, r2
   86788:	00db      	lsls	r3, r3, #3
   8678a:	440b      	add	r3, r1
   8678c:	3340      	adds	r3, #64	; 0x40
   8678e:	687a      	ldr	r2, [r7, #4]
   86790:	601a      	str	r2, [r3, #0]
}
   86792:	bf00      	nop
   86794:	3714      	adds	r7, #20
   86796:	46bd      	mov	sp, r7
   86798:	bc80      	pop	{r7}
   8679a:	4770      	bx	lr

0008679c <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   8679c:	b480      	push	{r7}
   8679e:	b085      	sub	sp, #20
   867a0:	af00      	add	r7, sp, #0
   867a2:	60f8      	str	r0, [r7, #12]
   867a4:	60b9      	str	r1, [r7, #8]
   867a6:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   867a8:	68f9      	ldr	r1, [r7, #12]
   867aa:	68ba      	ldr	r2, [r7, #8]
   867ac:	4613      	mov	r3, r2
   867ae:	009b      	lsls	r3, r3, #2
   867b0:	4413      	add	r3, r2
   867b2:	00db      	lsls	r3, r3, #3
   867b4:	440b      	add	r3, r1
   867b6:	3344      	adds	r3, #68	; 0x44
   867b8:	687a      	ldr	r2, [r7, #4]
   867ba:	601a      	str	r2, [r3, #0]
}
   867bc:	bf00      	nop
   867be:	3714      	adds	r7, #20
   867c0:	46bd      	mov	sp, r7
   867c2:	bc80      	pop	{r7}
   867c4:	4770      	bx	lr

000867c6 <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   867c6:	b480      	push	{r7}
   867c8:	b085      	sub	sp, #20
   867ca:	af00      	add	r7, sp, #0
   867cc:	60f8      	str	r0, [r7, #12]
   867ce:	60b9      	str	r1, [r7, #8]
   867d0:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   867d2:	68f9      	ldr	r1, [r7, #12]
   867d4:	68ba      	ldr	r2, [r7, #8]
   867d6:	4613      	mov	r3, r2
   867d8:	009b      	lsls	r3, r3, #2
   867da:	4413      	add	r3, r2
   867dc:	00db      	lsls	r3, r3, #3
   867de:	440b      	add	r3, r1
   867e0:	3348      	adds	r3, #72	; 0x48
   867e2:	687a      	ldr	r2, [r7, #4]
   867e4:	601a      	str	r2, [r3, #0]
}
   867e6:	bf00      	nop
   867e8:	3714      	adds	r7, #20
   867ea:	46bd      	mov	sp, r7
   867ec:	bc80      	pop	{r7}
   867ee:	4770      	bx	lr

000867f0 <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   867f0:	b480      	push	{r7}
   867f2:	b085      	sub	sp, #20
   867f4:	af00      	add	r7, sp, #0
   867f6:	60f8      	str	r0, [r7, #12]
   867f8:	60b9      	str	r1, [r7, #8]
   867fa:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   867fc:	68f9      	ldr	r1, [r7, #12]
   867fe:	68ba      	ldr	r2, [r7, #8]
   86800:	4613      	mov	r3, r2
   86802:	009b      	lsls	r3, r3, #2
   86804:	4413      	add	r3, r2
   86806:	00db      	lsls	r3, r3, #3
   86808:	440b      	add	r3, r1
   8680a:	334c      	adds	r3, #76	; 0x4c
   8680c:	687a      	ldr	r2, [r7, #4]
   8680e:	601a      	str	r2, [r3, #0]
}
   86810:	bf00      	nop
   86812:	3714      	adds	r7, #20
   86814:	46bd      	mov	sp, r7
   86816:	bc80      	pop	{r7}
   86818:	4770      	bx	lr

0008681a <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   8681a:	b480      	push	{r7}
   8681c:	b085      	sub	sp, #20
   8681e:	af00      	add	r7, sp, #0
   86820:	60f8      	str	r0, [r7, #12]
   86822:	60b9      	str	r1, [r7, #8]
   86824:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   86826:	68f9      	ldr	r1, [r7, #12]
   86828:	68ba      	ldr	r2, [r7, #8]
   8682a:	4613      	mov	r3, r2
   8682c:	009b      	lsls	r3, r3, #2
   8682e:	4413      	add	r3, r2
   86830:	00db      	lsls	r3, r3, #3
   86832:	440b      	add	r3, r1
   86834:	3350      	adds	r3, #80	; 0x50
   86836:	687a      	ldr	r2, [r7, #4]
   86838:	601a      	str	r2, [r3, #0]
}
   8683a:	bf00      	nop
   8683c:	3714      	adds	r7, #20
   8683e:	46bd      	mov	sp, r7
   86840:	bc80      	pop	{r7}
   86842:	4770      	bx	lr

00086844 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   86844:	b580      	push	{r7, lr}
   86846:	b084      	sub	sp, #16
   86848:	af00      	add	r7, sp, #0
   8684a:	60f8      	str	r0, [r7, #12]
   8684c:	60b9      	str	r1, [r7, #8]
   8684e:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   86850:	68fb      	ldr	r3, [r7, #12]
   86852:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   86854:	687b      	ldr	r3, [r7, #4]
   86856:	681b      	ldr	r3, [r3, #0]
   86858:	461a      	mov	r2, r3
   8685a:	68b9      	ldr	r1, [r7, #8]
   8685c:	68f8      	ldr	r0, [r7, #12]
   8685e:	4b10      	ldr	r3, [pc, #64]	; (868a0 <dmac_channel_single_buf_transfer_init+0x5c>)
   86860:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   86862:	687b      	ldr	r3, [r7, #4]
   86864:	685b      	ldr	r3, [r3, #4]
   86866:	461a      	mov	r2, r3
   86868:	68b9      	ldr	r1, [r7, #8]
   8686a:	68f8      	ldr	r0, [r7, #12]
   8686c:	4b0d      	ldr	r3, [pc, #52]	; (868a4 <dmac_channel_single_buf_transfer_init+0x60>)
   8686e:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   86870:	2200      	movs	r2, #0
   86872:	68b9      	ldr	r1, [r7, #8]
   86874:	68f8      	ldr	r0, [r7, #12]
   86876:	4b0c      	ldr	r3, [pc, #48]	; (868a8 <dmac_channel_single_buf_transfer_init+0x64>)
   86878:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   8687a:	687b      	ldr	r3, [r7, #4]
   8687c:	689b      	ldr	r3, [r3, #8]
   8687e:	461a      	mov	r2, r3
   86880:	68b9      	ldr	r1, [r7, #8]
   86882:	68f8      	ldr	r0, [r7, #12]
   86884:	4b09      	ldr	r3, [pc, #36]	; (868ac <dmac_channel_single_buf_transfer_init+0x68>)
   86886:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   86888:	687b      	ldr	r3, [r7, #4]
   8688a:	68db      	ldr	r3, [r3, #12]
   8688c:	461a      	mov	r2, r3
   8688e:	68b9      	ldr	r1, [r7, #8]
   86890:	68f8      	ldr	r0, [r7, #12]
   86892:	4b07      	ldr	r3, [pc, #28]	; (868b0 <dmac_channel_single_buf_transfer_init+0x6c>)
   86894:	4798      	blx	r3
}
   86896:	bf00      	nop
   86898:	3710      	adds	r7, #16
   8689a:	46bd      	mov	sp, r7
   8689c:	bd80      	pop	{r7, pc}
   8689e:	bf00      	nop
   868a0:	00086749 	.word	0x00086749
   868a4:	00086773 	.word	0x00086773
   868a8:	0008679d 	.word	0x0008679d
   868ac:	000867c7 	.word	0x000867c7
   868b0:	000867f1 	.word	0x000867f1

000868b4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   868b4:	b480      	push	{r7}
   868b6:	b085      	sub	sp, #20
   868b8:	af00      	add	r7, sp, #0
   868ba:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   868bc:	491c      	ldr	r1, [pc, #112]	; (86930 <pmc_switch_mck_to_pllack+0x7c>)
   868be:	4b1c      	ldr	r3, [pc, #112]	; (86930 <pmc_switch_mck_to_pllack+0x7c>)
   868c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   868c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   868c6:	687b      	ldr	r3, [r7, #4]
   868c8:	4313      	orrs	r3, r2
   868ca:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   868cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   868d0:	60fb      	str	r3, [r7, #12]
   868d2:	e007      	b.n	868e4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   868d4:	68fb      	ldr	r3, [r7, #12]
   868d6:	2b00      	cmp	r3, #0
   868d8:	d101      	bne.n	868de <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   868da:	2301      	movs	r3, #1
   868dc:	e023      	b.n	86926 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   868de:	68fb      	ldr	r3, [r7, #12]
   868e0:	3b01      	subs	r3, #1
   868e2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   868e4:	4b12      	ldr	r3, [pc, #72]	; (86930 <pmc_switch_mck_to_pllack+0x7c>)
   868e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   868e8:	f003 0308 	and.w	r3, r3, #8
   868ec:	2b00      	cmp	r3, #0
   868ee:	d0f1      	beq.n	868d4 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   868f0:	4a0f      	ldr	r2, [pc, #60]	; (86930 <pmc_switch_mck_to_pllack+0x7c>)
   868f2:	4b0f      	ldr	r3, [pc, #60]	; (86930 <pmc_switch_mck_to_pllack+0x7c>)
   868f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   868f6:	f023 0303 	bic.w	r3, r3, #3
   868fa:	f043 0302 	orr.w	r3, r3, #2
   868fe:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   86900:	f44f 6300 	mov.w	r3, #2048	; 0x800
   86904:	60fb      	str	r3, [r7, #12]
   86906:	e007      	b.n	86918 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   86908:	68fb      	ldr	r3, [r7, #12]
   8690a:	2b00      	cmp	r3, #0
   8690c:	d101      	bne.n	86912 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   8690e:	2301      	movs	r3, #1
   86910:	e009      	b.n	86926 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   86912:	68fb      	ldr	r3, [r7, #12]
   86914:	3b01      	subs	r3, #1
   86916:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   86918:	4b05      	ldr	r3, [pc, #20]	; (86930 <pmc_switch_mck_to_pllack+0x7c>)
   8691a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8691c:	f003 0308 	and.w	r3, r3, #8
   86920:	2b00      	cmp	r3, #0
   86922:	d0f1      	beq.n	86908 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   86924:	2300      	movs	r3, #0
}
   86926:	4618      	mov	r0, r3
   86928:	3714      	adds	r7, #20
   8692a:	46bd      	mov	sp, r7
   8692c:	bc80      	pop	{r7}
   8692e:	4770      	bx	lr
   86930:	400e0600 	.word	0x400e0600

00086934 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   86934:	b480      	push	{r7}
   86936:	b083      	sub	sp, #12
   86938:	af00      	add	r7, sp, #0
   8693a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   8693c:	687b      	ldr	r3, [r7, #4]
   8693e:	2b01      	cmp	r3, #1
   86940:	d107      	bne.n	86952 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   86942:	4a08      	ldr	r2, [pc, #32]	; (86964 <pmc_switch_sclk_to_32kxtal+0x30>)
   86944:	4b07      	ldr	r3, [pc, #28]	; (86964 <pmc_switch_sclk_to_32kxtal+0x30>)
   86946:	689b      	ldr	r3, [r3, #8]
   86948:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8694c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   86950:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   86952:	4b04      	ldr	r3, [pc, #16]	; (86964 <pmc_switch_sclk_to_32kxtal+0x30>)
   86954:	4a04      	ldr	r2, [pc, #16]	; (86968 <pmc_switch_sclk_to_32kxtal+0x34>)
   86956:	601a      	str	r2, [r3, #0]
}
   86958:	bf00      	nop
   8695a:	370c      	adds	r7, #12
   8695c:	46bd      	mov	sp, r7
   8695e:	bc80      	pop	{r7}
   86960:	4770      	bx	lr
   86962:	bf00      	nop
   86964:	400e1a10 	.word	0x400e1a10
   86968:	a5000008 	.word	0xa5000008

0008696c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   8696c:	b480      	push	{r7}
   8696e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   86970:	4b09      	ldr	r3, [pc, #36]	; (86998 <pmc_osc_is_ready_32kxtal+0x2c>)
   86972:	695b      	ldr	r3, [r3, #20]
   86974:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   86978:	2b00      	cmp	r3, #0
   8697a:	d007      	beq.n	8698c <pmc_osc_is_ready_32kxtal+0x20>
   8697c:	4b07      	ldr	r3, [pc, #28]	; (8699c <pmc_osc_is_ready_32kxtal+0x30>)
   8697e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86980:	f003 0380 	and.w	r3, r3, #128	; 0x80
   86984:	2b00      	cmp	r3, #0
   86986:	d001      	beq.n	8698c <pmc_osc_is_ready_32kxtal+0x20>
   86988:	2301      	movs	r3, #1
   8698a:	e000      	b.n	8698e <pmc_osc_is_ready_32kxtal+0x22>
   8698c:	2300      	movs	r3, #0
}
   8698e:	4618      	mov	r0, r3
   86990:	46bd      	mov	sp, r7
   86992:	bc80      	pop	{r7}
   86994:	4770      	bx	lr
   86996:	bf00      	nop
   86998:	400e1a10 	.word	0x400e1a10
   8699c:	400e0600 	.word	0x400e0600

000869a0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   869a0:	b480      	push	{r7}
   869a2:	b083      	sub	sp, #12
   869a4:	af00      	add	r7, sp, #0
   869a6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   869a8:	4a18      	ldr	r2, [pc, #96]	; (86a0c <pmc_switch_mainck_to_fastrc+0x6c>)
   869aa:	4b18      	ldr	r3, [pc, #96]	; (86a0c <pmc_switch_mainck_to_fastrc+0x6c>)
   869ac:	6a1b      	ldr	r3, [r3, #32]
   869ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   869b2:	f043 0308 	orr.w	r3, r3, #8
   869b6:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   869b8:	bf00      	nop
   869ba:	4b14      	ldr	r3, [pc, #80]	; (86a0c <pmc_switch_mainck_to_fastrc+0x6c>)
   869bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   869be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   869c2:	2b00      	cmp	r3, #0
   869c4:	d0f9      	beq.n	869ba <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   869c6:	4911      	ldr	r1, [pc, #68]	; (86a0c <pmc_switch_mainck_to_fastrc+0x6c>)
   869c8:	4b10      	ldr	r3, [pc, #64]	; (86a0c <pmc_switch_mainck_to_fastrc+0x6c>)
   869ca:	6a1b      	ldr	r3, [r3, #32]
   869cc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   869d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   869d4:	687a      	ldr	r2, [r7, #4]
   869d6:	4313      	orrs	r3, r2
   869d8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   869dc:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   869de:	bf00      	nop
   869e0:	4b0a      	ldr	r3, [pc, #40]	; (86a0c <pmc_switch_mainck_to_fastrc+0x6c>)
   869e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   869e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   869e8:	2b00      	cmp	r3, #0
   869ea:	d0f9      	beq.n	869e0 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   869ec:	4a07      	ldr	r2, [pc, #28]	; (86a0c <pmc_switch_mainck_to_fastrc+0x6c>)
   869ee:	4b07      	ldr	r3, [pc, #28]	; (86a0c <pmc_switch_mainck_to_fastrc+0x6c>)
   869f0:	6a1b      	ldr	r3, [r3, #32]
   869f2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   869f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   869fa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   869fe:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   86a00:	bf00      	nop
   86a02:	370c      	adds	r7, #12
   86a04:	46bd      	mov	sp, r7
   86a06:	bc80      	pop	{r7}
   86a08:	4770      	bx	lr
   86a0a:	bf00      	nop
   86a0c:	400e0600 	.word	0x400e0600

00086a10 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   86a10:	b480      	push	{r7}
   86a12:	b083      	sub	sp, #12
   86a14:	af00      	add	r7, sp, #0
   86a16:	6078      	str	r0, [r7, #4]
   86a18:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   86a1a:	687b      	ldr	r3, [r7, #4]
   86a1c:	2b00      	cmp	r3, #0
   86a1e:	d008      	beq.n	86a32 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   86a20:	4916      	ldr	r1, [pc, #88]	; (86a7c <pmc_switch_mainck_to_xtal+0x6c>)
   86a22:	4b16      	ldr	r3, [pc, #88]	; (86a7c <pmc_switch_mainck_to_xtal+0x6c>)
   86a24:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   86a26:	4a16      	ldr	r2, [pc, #88]	; (86a80 <pmc_switch_mainck_to_xtal+0x70>)
   86a28:	401a      	ands	r2, r3
   86a2a:	4b16      	ldr	r3, [pc, #88]	; (86a84 <pmc_switch_mainck_to_xtal+0x74>)
   86a2c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   86a2e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   86a30:	e01e      	b.n	86a70 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   86a32:	4912      	ldr	r1, [pc, #72]	; (86a7c <pmc_switch_mainck_to_xtal+0x6c>)
   86a34:	4b11      	ldr	r3, [pc, #68]	; (86a7c <pmc_switch_mainck_to_xtal+0x6c>)
   86a36:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   86a38:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   86a3c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   86a40:	683a      	ldr	r2, [r7, #0]
   86a42:	0212      	lsls	r2, r2, #8
   86a44:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   86a46:	4313      	orrs	r3, r2
   86a48:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   86a4c:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   86a50:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   86a52:	bf00      	nop
   86a54:	4b09      	ldr	r3, [pc, #36]	; (86a7c <pmc_switch_mainck_to_xtal+0x6c>)
   86a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86a58:	f003 0301 	and.w	r3, r3, #1
   86a5c:	2b00      	cmp	r3, #0
   86a5e:	d0f9      	beq.n	86a54 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   86a60:	4a06      	ldr	r2, [pc, #24]	; (86a7c <pmc_switch_mainck_to_xtal+0x6c>)
   86a62:	4b06      	ldr	r3, [pc, #24]	; (86a7c <pmc_switch_mainck_to_xtal+0x6c>)
   86a64:	6a1b      	ldr	r3, [r3, #32]
   86a66:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   86a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86a6e:	6213      	str	r3, [r2, #32]
}
   86a70:	bf00      	nop
   86a72:	370c      	adds	r7, #12
   86a74:	46bd      	mov	sp, r7
   86a76:	bc80      	pop	{r7}
   86a78:	4770      	bx	lr
   86a7a:	bf00      	nop
   86a7c:	400e0600 	.word	0x400e0600
   86a80:	fec8fffc 	.word	0xfec8fffc
   86a84:	01370002 	.word	0x01370002

00086a88 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   86a88:	b480      	push	{r7}
   86a8a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   86a8c:	4b03      	ldr	r3, [pc, #12]	; (86a9c <pmc_osc_is_ready_mainck+0x14>)
   86a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   86a94:	4618      	mov	r0, r3
   86a96:	46bd      	mov	sp, r7
   86a98:	bc80      	pop	{r7}
   86a9a:	4770      	bx	lr
   86a9c:	400e0600 	.word	0x400e0600

00086aa0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   86aa0:	b480      	push	{r7}
   86aa2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   86aa4:	4b03      	ldr	r3, [pc, #12]	; (86ab4 <pmc_disable_pllack+0x14>)
   86aa6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   86aaa:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   86aac:	bf00      	nop
   86aae:	46bd      	mov	sp, r7
   86ab0:	bc80      	pop	{r7}
   86ab2:	4770      	bx	lr
   86ab4:	400e0600 	.word	0x400e0600

00086ab8 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   86ab8:	b480      	push	{r7}
   86aba:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   86abc:	4b03      	ldr	r3, [pc, #12]	; (86acc <pmc_is_locked_pllack+0x14>)
   86abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86ac0:	f003 0302 	and.w	r3, r3, #2
}
   86ac4:	4618      	mov	r0, r3
   86ac6:	46bd      	mov	sp, r7
   86ac8:	bc80      	pop	{r7}
   86aca:	4770      	bx	lr
   86acc:	400e0600 	.word	0x400e0600

00086ad0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   86ad0:	b480      	push	{r7}
   86ad2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   86ad4:	4b03      	ldr	r3, [pc, #12]	; (86ae4 <pmc_is_locked_upll+0x14>)
   86ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   86adc:	4618      	mov	r0, r3
   86ade:	46bd      	mov	sp, r7
   86ae0:	bc80      	pop	{r7}
   86ae2:	4770      	bx	lr
   86ae4:	400e0600 	.word	0x400e0600

00086ae8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   86ae8:	b480      	push	{r7}
   86aea:	b083      	sub	sp, #12
   86aec:	af00      	add	r7, sp, #0
   86aee:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   86af0:	687b      	ldr	r3, [r7, #4]
   86af2:	2b2c      	cmp	r3, #44	; 0x2c
   86af4:	d901      	bls.n	86afa <pmc_enable_periph_clk+0x12>
		return 1;
   86af6:	2301      	movs	r3, #1
   86af8:	e02f      	b.n	86b5a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   86afa:	687b      	ldr	r3, [r7, #4]
   86afc:	2b1f      	cmp	r3, #31
   86afe:	d813      	bhi.n	86b28 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   86b00:	4b18      	ldr	r3, [pc, #96]	; (86b64 <pmc_enable_periph_clk+0x7c>)
   86b02:	699a      	ldr	r2, [r3, #24]
   86b04:	2101      	movs	r1, #1
   86b06:	687b      	ldr	r3, [r7, #4]
   86b08:	fa01 f303 	lsl.w	r3, r1, r3
   86b0c:	401a      	ands	r2, r3
   86b0e:	2101      	movs	r1, #1
   86b10:	687b      	ldr	r3, [r7, #4]
   86b12:	fa01 f303 	lsl.w	r3, r1, r3
   86b16:	429a      	cmp	r2, r3
   86b18:	d01e      	beq.n	86b58 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   86b1a:	4a12      	ldr	r2, [pc, #72]	; (86b64 <pmc_enable_periph_clk+0x7c>)
   86b1c:	2101      	movs	r1, #1
   86b1e:	687b      	ldr	r3, [r7, #4]
   86b20:	fa01 f303 	lsl.w	r3, r1, r3
   86b24:	6113      	str	r3, [r2, #16]
   86b26:	e017      	b.n	86b58 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   86b28:	687b      	ldr	r3, [r7, #4]
   86b2a:	3b20      	subs	r3, #32
   86b2c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   86b2e:	4b0d      	ldr	r3, [pc, #52]	; (86b64 <pmc_enable_periph_clk+0x7c>)
   86b30:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   86b34:	2101      	movs	r1, #1
   86b36:	687b      	ldr	r3, [r7, #4]
   86b38:	fa01 f303 	lsl.w	r3, r1, r3
   86b3c:	401a      	ands	r2, r3
   86b3e:	2101      	movs	r1, #1
   86b40:	687b      	ldr	r3, [r7, #4]
   86b42:	fa01 f303 	lsl.w	r3, r1, r3
   86b46:	429a      	cmp	r2, r3
   86b48:	d006      	beq.n	86b58 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   86b4a:	4a06      	ldr	r2, [pc, #24]	; (86b64 <pmc_enable_periph_clk+0x7c>)
   86b4c:	2101      	movs	r1, #1
   86b4e:	687b      	ldr	r3, [r7, #4]
   86b50:	fa01 f303 	lsl.w	r3, r1, r3
   86b54:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   86b58:	2300      	movs	r3, #0
}
   86b5a:	4618      	mov	r0, r3
   86b5c:	370c      	adds	r7, #12
   86b5e:	46bd      	mov	sp, r7
   86b60:	bc80      	pop	{r7}
   86b62:	4770      	bx	lr
   86b64:	400e0600 	.word	0x400e0600

00086b68 <sysclk_enable_peripheral_clock>:
{
   86b68:	b580      	push	{r7, lr}
   86b6a:	b082      	sub	sp, #8
   86b6c:	af00      	add	r7, sp, #0
   86b6e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   86b70:	6878      	ldr	r0, [r7, #4]
   86b72:	4b03      	ldr	r3, [pc, #12]	; (86b80 <sysclk_enable_peripheral_clock+0x18>)
   86b74:	4798      	blx	r3
}
   86b76:	bf00      	nop
   86b78:	3708      	adds	r7, #8
   86b7a:	46bd      	mov	sp, r7
   86b7c:	bd80      	pop	{r7, pc}
   86b7e:	bf00      	nop
   86b80:	00086ae9 	.word	0x00086ae9

00086b84 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   86b84:	b580      	push	{r7, lr}
   86b86:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   86b88:	200b      	movs	r0, #11
   86b8a:	4b06      	ldr	r3, [pc, #24]	; (86ba4 <ioport_init+0x20>)
   86b8c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   86b8e:	200c      	movs	r0, #12
   86b90:	4b04      	ldr	r3, [pc, #16]	; (86ba4 <ioport_init+0x20>)
   86b92:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   86b94:	200d      	movs	r0, #13
   86b96:	4b03      	ldr	r3, [pc, #12]	; (86ba4 <ioport_init+0x20>)
   86b98:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   86b9a:	200e      	movs	r0, #14
   86b9c:	4b01      	ldr	r3, [pc, #4]	; (86ba4 <ioport_init+0x20>)
   86b9e:	4798      	blx	r3
	arch_ioport_init();
}
   86ba0:	bf00      	nop
   86ba2:	bd80      	pop	{r7, pc}
   86ba4:	00086b69 	.word	0x00086b69

00086ba8 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
   86ba8:	b480      	push	{r7}
   86baa:	b089      	sub	sp, #36	; 0x24
   86bac:	af00      	add	r7, sp, #0
   86bae:	6078      	str	r0, [r7, #4]
   86bb0:	687b      	ldr	r3, [r7, #4]
   86bb2:	61fb      	str	r3, [r7, #28]
   86bb4:	69fb      	ldr	r3, [r7, #28]
   86bb6:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   86bb8:	69bb      	ldr	r3, [r7, #24]
   86bba:	095a      	lsrs	r2, r3, #5
   86bbc:	69fb      	ldr	r3, [r7, #28]
   86bbe:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   86bc0:	697b      	ldr	r3, [r7, #20]
   86bc2:	f003 031f 	and.w	r3, r3, #31
   86bc6:	2101      	movs	r1, #1
   86bc8:	fa01 f303 	lsl.w	r3, r1, r3
   86bcc:	613a      	str	r2, [r7, #16]
   86bce:	60fb      	str	r3, [r7, #12]
   86bd0:	693b      	ldr	r3, [r7, #16]
   86bd2:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   86bd4:	68bb      	ldr	r3, [r7, #8]
   86bd6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   86bda:	f203 7307 	addw	r3, r3, #1799	; 0x707
   86bde:	025b      	lsls	r3, r3, #9
   86be0:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   86be2:	68fb      	ldr	r3, [r7, #12]
   86be4:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
   86be6:	bf00      	nop
   86be8:	3724      	adds	r7, #36	; 0x24
   86bea:	46bd      	mov	sp, r7
   86bec:	bc80      	pop	{r7}
   86bee:	4770      	bx	lr

00086bf0 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   86bf0:	b480      	push	{r7}
   86bf2:	b08d      	sub	sp, #52	; 0x34
   86bf4:	af00      	add	r7, sp, #0
   86bf6:	6078      	str	r0, [r7, #4]
   86bf8:	6039      	str	r1, [r7, #0]
   86bfa:	687b      	ldr	r3, [r7, #4]
   86bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   86bfe:	683b      	ldr	r3, [r7, #0]
   86c00:	62bb      	str	r3, [r7, #40]	; 0x28
   86c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   86c04:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   86c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   86c08:	095a      	lsrs	r2, r3, #5
   86c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   86c0c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   86c0e:	6a3b      	ldr	r3, [r7, #32]
   86c10:	f003 031f 	and.w	r3, r3, #31
   86c14:	2101      	movs	r1, #1
   86c16:	fa01 f303 	lsl.w	r3, r1, r3
   86c1a:	61fa      	str	r2, [r7, #28]
   86c1c:	61bb      	str	r3, [r7, #24]
   86c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   86c20:	617b      	str	r3, [r7, #20]
   86c22:	69fb      	ldr	r3, [r7, #28]
   86c24:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   86c26:	693b      	ldr	r3, [r7, #16]
   86c28:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   86c2c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   86c30:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   86c32:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   86c34:	697b      	ldr	r3, [r7, #20]
   86c36:	f003 0308 	and.w	r3, r3, #8
   86c3a:	2b00      	cmp	r3, #0
   86c3c:	d003      	beq.n	86c46 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   86c3e:	68fb      	ldr	r3, [r7, #12]
   86c40:	69ba      	ldr	r2, [r7, #24]
   86c42:	665a      	str	r2, [r3, #100]	; 0x64
   86c44:	e002      	b.n	86c4c <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   86c46:	68fb      	ldr	r3, [r7, #12]
   86c48:	69ba      	ldr	r2, [r7, #24]
   86c4a:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   86c4c:	697b      	ldr	r3, [r7, #20]
   86c4e:	f003 0320 	and.w	r3, r3, #32
   86c52:	2b00      	cmp	r3, #0
   86c54:	d003      	beq.n	86c5e <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   86c56:	68fb      	ldr	r3, [r7, #12]
   86c58:	69ba      	ldr	r2, [r7, #24]
   86c5a:	651a      	str	r2, [r3, #80]	; 0x50
   86c5c:	e002      	b.n	86c64 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   86c5e:	68fb      	ldr	r3, [r7, #12]
   86c60:	69ba      	ldr	r2, [r7, #24]
   86c62:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   86c64:	697b      	ldr	r3, [r7, #20]
   86c66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   86c6a:	2b00      	cmp	r3, #0
   86c6c:	d003      	beq.n	86c76 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   86c6e:	68fb      	ldr	r3, [r7, #12]
   86c70:	69ba      	ldr	r2, [r7, #24]
   86c72:	621a      	str	r2, [r3, #32]
   86c74:	e002      	b.n	86c7c <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   86c76:	68fb      	ldr	r3, [r7, #12]
   86c78:	69ba      	ldr	r2, [r7, #24]
   86c7a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   86c7c:	697b      	ldr	r3, [r7, #20]
   86c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   86c82:	2b00      	cmp	r3, #0
   86c84:	d004      	beq.n	86c90 <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   86c86:	68fb      	ldr	r3, [r7, #12]
   86c88:	69ba      	ldr	r2, [r7, #24]
   86c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   86c8e:	e003      	b.n	86c98 <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   86c90:	68fb      	ldr	r3, [r7, #12]
   86c92:	69ba      	ldr	r2, [r7, #24]
   86c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   86c98:	697b      	ldr	r3, [r7, #20]
   86c9a:	f003 0301 	and.w	r3, r3, #1
   86c9e:	2b00      	cmp	r3, #0
   86ca0:	d006      	beq.n	86cb0 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   86ca2:	68fb      	ldr	r3, [r7, #12]
   86ca4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   86ca6:	69bb      	ldr	r3, [r7, #24]
   86ca8:	431a      	orrs	r2, r3
   86caa:	68fb      	ldr	r3, [r7, #12]
   86cac:	671a      	str	r2, [r3, #112]	; 0x70
	arch_ioport_set_pin_mode(pin, mode);
}
   86cae:	e006      	b.n	86cbe <ioport_set_pin_mode+0xce>
	} else {
		base->PIO_ABSR &= ~mask;
   86cb0:	68fb      	ldr	r3, [r7, #12]
   86cb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   86cb4:	69bb      	ldr	r3, [r7, #24]
   86cb6:	43db      	mvns	r3, r3
   86cb8:	401a      	ands	r2, r3
   86cba:	68fb      	ldr	r3, [r7, #12]
   86cbc:	671a      	str	r2, [r3, #112]	; 0x70
   86cbe:	bf00      	nop
   86cc0:	3734      	adds	r7, #52	; 0x34
   86cc2:	46bd      	mov	sp, r7
   86cc4:	bc80      	pop	{r7}
   86cc6:	4770      	bx	lr

00086cc8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
   86cc8:	b480      	push	{r7}
   86cca:	b08d      	sub	sp, #52	; 0x34
   86ccc:	af00      	add	r7, sp, #0
   86cce:	6078      	str	r0, [r7, #4]
   86cd0:	460b      	mov	r3, r1
   86cd2:	70fb      	strb	r3, [r7, #3]
   86cd4:	687b      	ldr	r3, [r7, #4]
   86cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   86cd8:	78fb      	ldrb	r3, [r7, #3]
   86cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   86cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   86ce0:	627b      	str	r3, [r7, #36]	; 0x24
   86ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   86ce4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   86ce6:	6a3b      	ldr	r3, [r7, #32]
   86ce8:	095b      	lsrs	r3, r3, #5
   86cea:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   86cec:	69fb      	ldr	r3, [r7, #28]
   86cee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   86cf2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   86cf6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   86cf8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
   86cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   86cfe:	2b01      	cmp	r3, #1
   86d00:	d109      	bne.n	86d16 <ioport_set_pin_dir+0x4e>
   86d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   86d04:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   86d06:	697b      	ldr	r3, [r7, #20]
   86d08:	f003 031f 	and.w	r3, r3, #31
   86d0c:	2201      	movs	r2, #1
   86d0e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   86d10:	69bb      	ldr	r3, [r7, #24]
   86d12:	611a      	str	r2, [r3, #16]
   86d14:	e00c      	b.n	86d30 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   86d16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   86d1a:	2b00      	cmp	r3, #0
   86d1c:	d108      	bne.n	86d30 <ioport_set_pin_dir+0x68>
   86d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   86d20:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   86d22:	693b      	ldr	r3, [r7, #16]
   86d24:	f003 031f 	and.w	r3, r3, #31
   86d28:	2201      	movs	r2, #1
   86d2a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   86d2c:	69bb      	ldr	r3, [r7, #24]
   86d2e:	615a      	str	r2, [r3, #20]
   86d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   86d32:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   86d34:	68fb      	ldr	r3, [r7, #12]
   86d36:	f003 031f 	and.w	r3, r3, #31
   86d3a:	2201      	movs	r2, #1
   86d3c:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   86d3e:	69bb      	ldr	r3, [r7, #24]
   86d40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
   86d44:	bf00      	nop
   86d46:	3734      	adds	r7, #52	; 0x34
   86d48:	46bd      	mov	sp, r7
   86d4a:	bc80      	pop	{r7}
   86d4c:	4770      	bx	lr

00086d4e <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   86d4e:	b480      	push	{r7}
   86d50:	b08b      	sub	sp, #44	; 0x2c
   86d52:	af00      	add	r7, sp, #0
   86d54:	6078      	str	r0, [r7, #4]
   86d56:	460b      	mov	r3, r1
   86d58:	70fb      	strb	r3, [r7, #3]
   86d5a:	687b      	ldr	r3, [r7, #4]
   86d5c:	627b      	str	r3, [r7, #36]	; 0x24
   86d5e:	78fb      	ldrb	r3, [r7, #3]
   86d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   86d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   86d66:	61fb      	str	r3, [r7, #28]
   86d68:	69fb      	ldr	r3, [r7, #28]
   86d6a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   86d6c:	69bb      	ldr	r3, [r7, #24]
   86d6e:	095b      	lsrs	r3, r3, #5
   86d70:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   86d72:	697b      	ldr	r3, [r7, #20]
   86d74:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   86d78:	f203 7307 	addw	r3, r3, #1799	; 0x707
   86d7c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   86d7e:	613b      	str	r3, [r7, #16]

	if (level) {
   86d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   86d84:	2b00      	cmp	r3, #0
   86d86:	d009      	beq.n	86d9c <ioport_set_pin_level+0x4e>
   86d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   86d8a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   86d8c:	68fb      	ldr	r3, [r7, #12]
   86d8e:	f003 031f 	and.w	r3, r3, #31
   86d92:	2201      	movs	r2, #1
   86d94:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   86d96:	693b      	ldr	r3, [r7, #16]
   86d98:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   86d9a:	e008      	b.n	86dae <ioport_set_pin_level+0x60>
   86d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   86d9e:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   86da0:	68bb      	ldr	r3, [r7, #8]
   86da2:	f003 031f 	and.w	r3, r3, #31
   86da6:	2201      	movs	r2, #1
   86da8:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   86daa:	693b      	ldr	r3, [r7, #16]
   86dac:	635a      	str	r2, [r3, #52]	; 0x34
   86dae:	bf00      	nop
   86db0:	372c      	adds	r7, #44	; 0x2c
   86db2:	46bd      	mov	sp, r7
   86db4:	bc80      	pop	{r7}
   86db6:	4770      	bx	lr

00086db8 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   86db8:	b580      	push	{r7, lr}
   86dba:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   86dbc:	4b67      	ldr	r3, [pc, #412]	; (86f5c <board_init+0x1a4>)
   86dbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   86dc2:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   86dc4:	4b66      	ldr	r3, [pc, #408]	; (86f60 <board_init+0x1a8>)
   86dc6:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   86dc8:	2101      	movs	r1, #1
   86dca:	206a      	movs	r0, #106	; 0x6a
   86dcc:	4b65      	ldr	r3, [pc, #404]	; (86f64 <board_init+0x1ac>)
   86dce:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   86dd0:	2100      	movs	r1, #0
   86dd2:	206a      	movs	r0, #106	; 0x6a
   86dd4:	4b64      	ldr	r3, [pc, #400]	; (86f68 <board_init+0x1b0>)
   86dd6:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   86dd8:	2101      	movs	r1, #1
   86dda:	2067      	movs	r0, #103	; 0x67
   86ddc:	4b61      	ldr	r3, [pc, #388]	; (86f64 <board_init+0x1ac>)
   86dde:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   86de0:	2100      	movs	r1, #0
   86de2:	2067      	movs	r0, #103	; 0x67
   86de4:	4b60      	ldr	r3, [pc, #384]	; (86f68 <board_init+0x1b0>)
   86de6:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   86de8:	2101      	movs	r1, #1
   86dea:	2068      	movs	r0, #104	; 0x68
   86dec:	4b5d      	ldr	r3, [pc, #372]	; (86f64 <board_init+0x1ac>)
   86dee:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   86df0:	2100      	movs	r1, #0
   86df2:	2068      	movs	r0, #104	; 0x68
   86df4:	4b5c      	ldr	r3, [pc, #368]	; (86f68 <board_init+0x1b0>)
   86df6:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   86df8:	2101      	movs	r1, #1
   86dfa:	2069      	movs	r0, #105	; 0x69
   86dfc:	4b59      	ldr	r3, [pc, #356]	; (86f64 <board_init+0x1ac>)
   86dfe:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   86e00:	2100      	movs	r1, #0
   86e02:	2069      	movs	r0, #105	; 0x69
   86e04:	4b58      	ldr	r3, [pc, #352]	; (86f68 <board_init+0x1b0>)
   86e06:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   86e08:	2101      	movs	r1, #1
   86e0a:	2066      	movs	r0, #102	; 0x66
   86e0c:	4b55      	ldr	r3, [pc, #340]	; (86f64 <board_init+0x1ac>)
   86e0e:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   86e10:	2100      	movs	r1, #0
   86e12:	2066      	movs	r0, #102	; 0x66
   86e14:	4b54      	ldr	r3, [pc, #336]	; (86f68 <board_init+0x1b0>)
   86e16:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   86e18:	2100      	movs	r1, #0
   86e1a:	2060      	movs	r0, #96	; 0x60
   86e1c:	4b51      	ldr	r3, [pc, #324]	; (86f64 <board_init+0x1ac>)
   86e1e:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   86e20:	2188      	movs	r1, #136	; 0x88
   86e22:	2060      	movs	r0, #96	; 0x60
   86e24:	4b51      	ldr	r3, [pc, #324]	; (86f6c <board_init+0x1b4>)
   86e26:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   86e28:	2100      	movs	r1, #0
   86e2a:	2061      	movs	r0, #97	; 0x61
   86e2c:	4b4d      	ldr	r3, [pc, #308]	; (86f64 <board_init+0x1ac>)
   86e2e:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   86e30:	2188      	movs	r1, #136	; 0x88
   86e32:	2061      	movs	r0, #97	; 0x61
   86e34:	4b4d      	ldr	r3, [pc, #308]	; (86f6c <board_init+0x1b4>)
   86e36:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   86e38:	2100      	movs	r1, #0
   86e3a:	2062      	movs	r0, #98	; 0x62
   86e3c:	4b49      	ldr	r3, [pc, #292]	; (86f64 <board_init+0x1ac>)
   86e3e:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   86e40:	2188      	movs	r1, #136	; 0x88
   86e42:	2062      	movs	r0, #98	; 0x62
   86e44:	4b49      	ldr	r3, [pc, #292]	; (86f6c <board_init+0x1b4>)
   86e46:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   86e48:	2100      	movs	r1, #0
   86e4a:	2063      	movs	r0, #99	; 0x63
   86e4c:	4b45      	ldr	r3, [pc, #276]	; (86f64 <board_init+0x1ac>)
   86e4e:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   86e50:	2188      	movs	r1, #136	; 0x88
   86e52:	2063      	movs	r0, #99	; 0x63
   86e54:	4b45      	ldr	r3, [pc, #276]	; (86f6c <board_init+0x1b4>)
   86e56:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   86e58:	2100      	movs	r1, #0
   86e5a:	2064      	movs	r0, #100	; 0x64
   86e5c:	4b41      	ldr	r3, [pc, #260]	; (86f64 <board_init+0x1ac>)
   86e5e:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   86e60:	2188      	movs	r1, #136	; 0x88
   86e62:	2064      	movs	r0, #100	; 0x64
   86e64:	4b41      	ldr	r3, [pc, #260]	; (86f6c <board_init+0x1b4>)
   86e66:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   86e68:	2100      	movs	r1, #0
   86e6a:	2065      	movs	r0, #101	; 0x65
   86e6c:	4b3d      	ldr	r3, [pc, #244]	; (86f64 <board_init+0x1ac>)
   86e6e:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   86e70:	2188      	movs	r1, #136	; 0x88
   86e72:	2065      	movs	r0, #101	; 0x65
   86e74:	4b3d      	ldr	r3, [pc, #244]	; (86f6c <board_init+0x1b4>)
   86e76:	4798      	blx	r3
    
    /* Configure Raspberry Pi GPIO pins */
    ioport_set_pin_dir(RPI1, IOPORT_DIR_OUTPUT);
   86e78:	2101      	movs	r1, #1
   86e7a:	2001      	movs	r0, #1
   86e7c:	4b39      	ldr	r3, [pc, #228]	; (86f64 <board_init+0x1ac>)
   86e7e:	4798      	blx	r3
    ioport_set_pin_level(RPI1, 1);
   86e80:	2101      	movs	r1, #1
   86e82:	2001      	movs	r0, #1
   86e84:	4b38      	ldr	r3, [pc, #224]	; (86f68 <board_init+0x1b0>)
   86e86:	4798      	blx	r3
    ioport_set_pin_dir(RPI2, IOPORT_DIR_INPUT);
   86e88:	2100      	movs	r1, #0
   86e8a:	2008      	movs	r0, #8
   86e8c:	4b35      	ldr	r3, [pc, #212]	; (86f64 <board_init+0x1ac>)
   86e8e:	4798      	blx	r3
    ioport_set_pin_dir(RPI3, IOPORT_DIR_INPUT);
   86e90:	2100      	movs	r1, #0
   86e92:	2009      	movs	r0, #9
   86e94:	4b33      	ldr	r3, [pc, #204]	; (86f64 <board_init+0x1ac>)
   86e96:	4798      	blx	r3
    ioport_set_pin_dir(RPI4, IOPORT_DIR_INPUT);
   86e98:	2100      	movs	r1, #0
   86e9a:	2007      	movs	r0, #7
   86e9c:	4b31      	ldr	r3, [pc, #196]	; (86f64 <board_init+0x1ac>)
   86e9e:	4798      	blx	r3
    ioport_set_pin_dir(RPI5, IOPORT_DIR_INPUT);
   86ea0:	2100      	movs	r1, #0
   86ea2:	2005      	movs	r0, #5
   86ea4:	4b2f      	ldr	r3, [pc, #188]	; (86f64 <board_init+0x1ac>)
   86ea6:	4798      	blx	r3
	ioport_set_pin_dir(RPI6, IOPORT_DIR_INPUT);
   86ea8:	2100      	movs	r1, #0
   86eaa:	2000      	movs	r0, #0
   86eac:	4b2d      	ldr	r3, [pc, #180]	; (86f64 <board_init+0x1ac>)
   86eae:	4798      	blx	r3
    
	/* Configure I2C pins */
	ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   86eb0:	2100      	movs	r1, #0
   86eb2:	2011      	movs	r0, #17
   86eb4:	4b2d      	ldr	r3, [pc, #180]	; (86f6c <board_init+0x1b4>)
   86eb6:	4798      	blx	r3
	ioport_disable_pin(I2C0_DATA);
   86eb8:	2011      	movs	r0, #17
   86eba:	4b2d      	ldr	r3, [pc, #180]	; (86f70 <board_init+0x1b8>)
   86ebc:	4798      	blx	r3
	ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   86ebe:	2100      	movs	r1, #0
   86ec0:	2012      	movs	r0, #18
   86ec2:	4b2a      	ldr	r3, [pc, #168]	; (86f6c <board_init+0x1b4>)
   86ec4:	4798      	blx	r3
	ioport_disable_pin(I2C0_CLK);
   86ec6:	2012      	movs	r0, #18
   86ec8:	4b29      	ldr	r3, [pc, #164]	; (86f70 <board_init+0x1b8>)
   86eca:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   86ecc:	2100      	movs	r1, #0
   86ece:	200c      	movs	r0, #12
   86ed0:	4b26      	ldr	r3, [pc, #152]	; (86f6c <board_init+0x1b4>)
   86ed2:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   86ed4:	200c      	movs	r0, #12
   86ed6:	4b26      	ldr	r3, [pc, #152]	; (86f70 <board_init+0x1b8>)
   86ed8:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   86eda:	2100      	movs	r1, #0
   86edc:	200d      	movs	r0, #13
   86ede:	4b23      	ldr	r3, [pc, #140]	; (86f6c <board_init+0x1b4>)
   86ee0:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   86ee2:	200d      	movs	r0, #13
   86ee4:	4b22      	ldr	r3, [pc, #136]	; (86f70 <board_init+0x1b8>)
   86ee6:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   86ee8:	2100      	movs	r1, #0
   86eea:	2010      	movs	r0, #16
   86eec:	4b1f      	ldr	r3, [pc, #124]	; (86f6c <board_init+0x1b4>)
   86eee:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   86ef0:	2010      	movs	r0, #16
   86ef2:	4b1f      	ldr	r3, [pc, #124]	; (86f70 <board_init+0x1b8>)
   86ef4:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   86ef6:	2100      	movs	r1, #0
   86ef8:	200e      	movs	r0, #14
   86efa:	4b1c      	ldr	r3, [pc, #112]	; (86f6c <board_init+0x1b4>)
   86efc:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   86efe:	200e      	movs	r0, #14
   86f00:	4b1b      	ldr	r3, [pc, #108]	; (86f70 <board_init+0x1b8>)
   86f02:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   86f04:	2100      	movs	r1, #0
   86f06:	2014      	movs	r0, #20
   86f08:	4b18      	ldr	r3, [pc, #96]	; (86f6c <board_init+0x1b4>)
   86f0a:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   86f0c:	2014      	movs	r0, #20
   86f0e:	4b18      	ldr	r3, [pc, #96]	; (86f70 <board_init+0x1b8>)
   86f10:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   86f12:	2100      	movs	r1, #0
   86f14:	2013      	movs	r0, #19
   86f16:	4b15      	ldr	r3, [pc, #84]	; (86f6c <board_init+0x1b4>)
   86f18:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   86f1a:	2013      	movs	r0, #19
   86f1c:	4b14      	ldr	r3, [pc, #80]	; (86f70 <board_init+0x1b8>)
   86f1e:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   86f20:	2100      	movs	r1, #0
   86f22:	2015      	movs	r0, #21
   86f24:	4b11      	ldr	r3, [pc, #68]	; (86f6c <board_init+0x1b4>)
   86f26:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   86f28:	2015      	movs	r0, #21
   86f2a:	4b11      	ldr	r3, [pc, #68]	; (86f70 <board_init+0x1b8>)
   86f2c:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   86f2e:	2100      	movs	r1, #0
   86f30:	2016      	movs	r0, #22
   86f32:	4b0e      	ldr	r3, [pc, #56]	; (86f6c <board_init+0x1b4>)
   86f34:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   86f36:	2016      	movs	r0, #22
   86f38:	4b0d      	ldr	r3, [pc, #52]	; (86f70 <board_init+0x1b8>)
   86f3a:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   86f3c:	2100      	movs	r1, #0
   86f3e:	2017      	movs	r0, #23
   86f40:	4b0a      	ldr	r3, [pc, #40]	; (86f6c <board_init+0x1b4>)
   86f42:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   86f44:	2017      	movs	r0, #23
   86f46:	4b0a      	ldr	r3, [pc, #40]	; (86f70 <board_init+0x1b8>)
   86f48:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   86f4a:	2100      	movs	r1, #0
   86f4c:	2018      	movs	r0, #24
   86f4e:	4b07      	ldr	r3, [pc, #28]	; (86f6c <board_init+0x1b4>)
   86f50:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   86f52:	2018      	movs	r0, #24
   86f54:	4b06      	ldr	r3, [pc, #24]	; (86f70 <board_init+0x1b8>)
   86f56:	4798      	blx	r3
}
   86f58:	bf00      	nop
   86f5a:	bd80      	pop	{r7, pc}
   86f5c:	400e1a50 	.word	0x400e1a50
   86f60:	00086b85 	.word	0x00086b85
   86f64:	00086cc9 	.word	0x00086cc9
   86f68:	00086d4f 	.word	0x00086d4f
   86f6c:	00086bf1 	.word	0x00086bf1
   86f70:	00086ba9 	.word	0x00086ba9

00086f74 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   86f74:	b480      	push	{r7}
   86f76:	af00      	add	r7, sp, #0
	while (1) {
   86f78:	e7fe      	b.n	86f78 <Dummy_Handler+0x4>
	...

00086f7c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   86f7c:	b580      	push	{r7, lr}
   86f7e:	b082      	sub	sp, #8
   86f80:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   86f82:	4b1e      	ldr	r3, [pc, #120]	; (86ffc <Reset_Handler+0x80>)
   86f84:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   86f86:	4b1e      	ldr	r3, [pc, #120]	; (87000 <Reset_Handler+0x84>)
   86f88:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   86f8a:	687a      	ldr	r2, [r7, #4]
   86f8c:	683b      	ldr	r3, [r7, #0]
   86f8e:	429a      	cmp	r2, r3
   86f90:	d00c      	beq.n	86fac <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   86f92:	e007      	b.n	86fa4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   86f94:	683b      	ldr	r3, [r7, #0]
   86f96:	1d1a      	adds	r2, r3, #4
   86f98:	603a      	str	r2, [r7, #0]
   86f9a:	687a      	ldr	r2, [r7, #4]
   86f9c:	1d11      	adds	r1, r2, #4
   86f9e:	6079      	str	r1, [r7, #4]
   86fa0:	6812      	ldr	r2, [r2, #0]
   86fa2:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   86fa4:	683b      	ldr	r3, [r7, #0]
   86fa6:	4a17      	ldr	r2, [pc, #92]	; (87004 <Reset_Handler+0x88>)
   86fa8:	4293      	cmp	r3, r2
   86faa:	d3f3      	bcc.n	86f94 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   86fac:	4b16      	ldr	r3, [pc, #88]	; (87008 <Reset_Handler+0x8c>)
   86fae:	603b      	str	r3, [r7, #0]
   86fb0:	e004      	b.n	86fbc <Reset_Handler+0x40>
		*pDest++ = 0;
   86fb2:	683b      	ldr	r3, [r7, #0]
   86fb4:	1d1a      	adds	r2, r3, #4
   86fb6:	603a      	str	r2, [r7, #0]
   86fb8:	2200      	movs	r2, #0
   86fba:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   86fbc:	683b      	ldr	r3, [r7, #0]
   86fbe:	4a13      	ldr	r2, [pc, #76]	; (8700c <Reset_Handler+0x90>)
   86fc0:	4293      	cmp	r3, r2
   86fc2:	d3f6      	bcc.n	86fb2 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   86fc4:	4b12      	ldr	r3, [pc, #72]	; (87010 <Reset_Handler+0x94>)
   86fc6:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   86fc8:	4a12      	ldr	r2, [pc, #72]	; (87014 <Reset_Handler+0x98>)
   86fca:	687b      	ldr	r3, [r7, #4]
   86fcc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   86fd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   86fd4:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   86fd6:	687b      	ldr	r3, [r7, #4]
   86fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   86fdc:	d309      	bcc.n	86ff2 <Reset_Handler+0x76>
   86fde:	687b      	ldr	r3, [r7, #4]
   86fe0:	4a0d      	ldr	r2, [pc, #52]	; (87018 <Reset_Handler+0x9c>)
   86fe2:	4293      	cmp	r3, r2
   86fe4:	d805      	bhi.n	86ff2 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   86fe6:	4a0b      	ldr	r2, [pc, #44]	; (87014 <Reset_Handler+0x98>)
   86fe8:	4b0a      	ldr	r3, [pc, #40]	; (87014 <Reset_Handler+0x98>)
   86fea:	689b      	ldr	r3, [r3, #8]
   86fec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   86ff0:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   86ff2:	4b0a      	ldr	r3, [pc, #40]	; (8701c <Reset_Handler+0xa0>)
   86ff4:	4798      	blx	r3

	/* Branch to main function */
	main();
   86ff6:	4b0a      	ldr	r3, [pc, #40]	; (87020 <Reset_Handler+0xa4>)
   86ff8:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   86ffa:	e7fe      	b.n	86ffa <Reset_Handler+0x7e>
   86ffc:	00087dd0 	.word	0x00087dd0
   87000:	20070000 	.word	0x20070000
   87004:	200705d4 	.word	0x200705d4
   87008:	200705d4 	.word	0x200705d4
   8700c:	20070d1c 	.word	0x20070d1c
   87010:	00080000 	.word	0x00080000
   87014:	e000ed00 	.word	0xe000ed00
   87018:	200fffff 	.word	0x200fffff
   8701c:	000874f5 	.word	0x000874f5
   87020:	00087351 	.word	0x00087351

00087024 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   87024:	b480      	push	{r7}
   87026:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   87028:	4b57      	ldr	r3, [pc, #348]	; (87188 <SystemCoreClockUpdate+0x164>)
   8702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8702c:	f003 0303 	and.w	r3, r3, #3
   87030:	2b03      	cmp	r3, #3
   87032:	f200 808a 	bhi.w	8714a <SystemCoreClockUpdate+0x126>
   87036:	a201      	add	r2, pc, #4	; (adr r2, 8703c <SystemCoreClockUpdate+0x18>)
   87038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8703c:	0008704d 	.word	0x0008704d
   87040:	0008706d 	.word	0x0008706d
   87044:	000870bd 	.word	0x000870bd
   87048:	000870bd 	.word	0x000870bd
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8704c:	4b4f      	ldr	r3, [pc, #316]	; (8718c <SystemCoreClockUpdate+0x168>)
   8704e:	695b      	ldr	r3, [r3, #20]
   87050:	f003 0380 	and.w	r3, r3, #128	; 0x80
   87054:	2b00      	cmp	r3, #0
   87056:	d004      	beq.n	87062 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   87058:	4b4d      	ldr	r3, [pc, #308]	; (87190 <SystemCoreClockUpdate+0x16c>)
   8705a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8705e:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   87060:	e073      	b.n	8714a <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   87062:	4b4b      	ldr	r3, [pc, #300]	; (87190 <SystemCoreClockUpdate+0x16c>)
   87064:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   87068:	601a      	str	r2, [r3, #0]
		break;
   8706a:	e06e      	b.n	8714a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8706c:	4b46      	ldr	r3, [pc, #280]	; (87188 <SystemCoreClockUpdate+0x164>)
   8706e:	6a1b      	ldr	r3, [r3, #32]
   87070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   87074:	2b00      	cmp	r3, #0
   87076:	d003      	beq.n	87080 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   87078:	4b45      	ldr	r3, [pc, #276]	; (87190 <SystemCoreClockUpdate+0x16c>)
   8707a:	4a46      	ldr	r2, [pc, #280]	; (87194 <SystemCoreClockUpdate+0x170>)
   8707c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   8707e:	e064      	b.n	8714a <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   87080:	4b43      	ldr	r3, [pc, #268]	; (87190 <SystemCoreClockUpdate+0x16c>)
   87082:	4a45      	ldr	r2, [pc, #276]	; (87198 <SystemCoreClockUpdate+0x174>)
   87084:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   87086:	4b40      	ldr	r3, [pc, #256]	; (87188 <SystemCoreClockUpdate+0x164>)
   87088:	6a1b      	ldr	r3, [r3, #32]
   8708a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8708e:	2b10      	cmp	r3, #16
   87090:	d004      	beq.n	8709c <SystemCoreClockUpdate+0x78>
   87092:	2b20      	cmp	r3, #32
   87094:	d008      	beq.n	870a8 <SystemCoreClockUpdate+0x84>
   87096:	2b00      	cmp	r3, #0
   87098:	d00e      	beq.n	870b8 <SystemCoreClockUpdate+0x94>
				break;
   8709a:	e00e      	b.n	870ba <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   8709c:	4b3c      	ldr	r3, [pc, #240]	; (87190 <SystemCoreClockUpdate+0x16c>)
   8709e:	681b      	ldr	r3, [r3, #0]
   870a0:	005b      	lsls	r3, r3, #1
   870a2:	4a3b      	ldr	r2, [pc, #236]	; (87190 <SystemCoreClockUpdate+0x16c>)
   870a4:	6013      	str	r3, [r2, #0]
				break;
   870a6:	e008      	b.n	870ba <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   870a8:	4b39      	ldr	r3, [pc, #228]	; (87190 <SystemCoreClockUpdate+0x16c>)
   870aa:	681a      	ldr	r2, [r3, #0]
   870ac:	4613      	mov	r3, r2
   870ae:	005b      	lsls	r3, r3, #1
   870b0:	4413      	add	r3, r2
   870b2:	4a37      	ldr	r2, [pc, #220]	; (87190 <SystemCoreClockUpdate+0x16c>)
   870b4:	6013      	str	r3, [r2, #0]
				break;
   870b6:	e000      	b.n	870ba <SystemCoreClockUpdate+0x96>
				break;
   870b8:	bf00      	nop
		break;
   870ba:	e046      	b.n	8714a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   870bc:	4b32      	ldr	r3, [pc, #200]	; (87188 <SystemCoreClockUpdate+0x164>)
   870be:	6a1b      	ldr	r3, [r3, #32]
   870c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   870c4:	2b00      	cmp	r3, #0
   870c6:	d003      	beq.n	870d0 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   870c8:	4b31      	ldr	r3, [pc, #196]	; (87190 <SystemCoreClockUpdate+0x16c>)
   870ca:	4a32      	ldr	r2, [pc, #200]	; (87194 <SystemCoreClockUpdate+0x170>)
   870cc:	601a      	str	r2, [r3, #0]
   870ce:	e01c      	b.n	8710a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   870d0:	4b2f      	ldr	r3, [pc, #188]	; (87190 <SystemCoreClockUpdate+0x16c>)
   870d2:	4a31      	ldr	r2, [pc, #196]	; (87198 <SystemCoreClockUpdate+0x174>)
   870d4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   870d6:	4b2c      	ldr	r3, [pc, #176]	; (87188 <SystemCoreClockUpdate+0x164>)
   870d8:	6a1b      	ldr	r3, [r3, #32]
   870da:	f003 0370 	and.w	r3, r3, #112	; 0x70
   870de:	2b10      	cmp	r3, #16
   870e0:	d004      	beq.n	870ec <SystemCoreClockUpdate+0xc8>
   870e2:	2b20      	cmp	r3, #32
   870e4:	d008      	beq.n	870f8 <SystemCoreClockUpdate+0xd4>
   870e6:	2b00      	cmp	r3, #0
   870e8:	d00e      	beq.n	87108 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   870ea:	e00e      	b.n	8710a <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   870ec:	4b28      	ldr	r3, [pc, #160]	; (87190 <SystemCoreClockUpdate+0x16c>)
   870ee:	681b      	ldr	r3, [r3, #0]
   870f0:	005b      	lsls	r3, r3, #1
   870f2:	4a27      	ldr	r2, [pc, #156]	; (87190 <SystemCoreClockUpdate+0x16c>)
   870f4:	6013      	str	r3, [r2, #0]
				break;
   870f6:	e008      	b.n	8710a <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   870f8:	4b25      	ldr	r3, [pc, #148]	; (87190 <SystemCoreClockUpdate+0x16c>)
   870fa:	681a      	ldr	r2, [r3, #0]
   870fc:	4613      	mov	r3, r2
   870fe:	005b      	lsls	r3, r3, #1
   87100:	4413      	add	r3, r2
   87102:	4a23      	ldr	r2, [pc, #140]	; (87190 <SystemCoreClockUpdate+0x16c>)
   87104:	6013      	str	r3, [r2, #0]
				break;
   87106:	e000      	b.n	8710a <SystemCoreClockUpdate+0xe6>
				break;
   87108:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8710a:	4b1f      	ldr	r3, [pc, #124]	; (87188 <SystemCoreClockUpdate+0x164>)
   8710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8710e:	f003 0303 	and.w	r3, r3, #3
   87112:	2b02      	cmp	r3, #2
   87114:	d115      	bne.n	87142 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   87116:	4b1c      	ldr	r3, [pc, #112]	; (87188 <SystemCoreClockUpdate+0x164>)
   87118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8711a:	0c1b      	lsrs	r3, r3, #16
   8711c:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   87120:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   87122:	4a1b      	ldr	r2, [pc, #108]	; (87190 <SystemCoreClockUpdate+0x16c>)
   87124:	6812      	ldr	r2, [r2, #0]
   87126:	fb02 f303 	mul.w	r3, r2, r3
   8712a:	4a19      	ldr	r2, [pc, #100]	; (87190 <SystemCoreClockUpdate+0x16c>)
   8712c:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8712e:	4b16      	ldr	r3, [pc, #88]	; (87188 <SystemCoreClockUpdate+0x164>)
   87130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   87132:	b2db      	uxtb	r3, r3
   87134:	4a16      	ldr	r2, [pc, #88]	; (87190 <SystemCoreClockUpdate+0x16c>)
   87136:	6812      	ldr	r2, [r2, #0]
   87138:	fbb2 f3f3 	udiv	r3, r2, r3
   8713c:	4a14      	ldr	r2, [pc, #80]	; (87190 <SystemCoreClockUpdate+0x16c>)
   8713e:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   87140:	e002      	b.n	87148 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   87142:	4b13      	ldr	r3, [pc, #76]	; (87190 <SystemCoreClockUpdate+0x16c>)
   87144:	4a15      	ldr	r2, [pc, #84]	; (8719c <SystemCoreClockUpdate+0x178>)
   87146:	601a      	str	r2, [r3, #0]
		break;
   87148:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8714a:	4b0f      	ldr	r3, [pc, #60]	; (87188 <SystemCoreClockUpdate+0x164>)
   8714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8714e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   87152:	2b70      	cmp	r3, #112	; 0x70
   87154:	d108      	bne.n	87168 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   87156:	4b0e      	ldr	r3, [pc, #56]	; (87190 <SystemCoreClockUpdate+0x16c>)
   87158:	681b      	ldr	r3, [r3, #0]
   8715a:	4a11      	ldr	r2, [pc, #68]	; (871a0 <SystemCoreClockUpdate+0x17c>)
   8715c:	fba2 2303 	umull	r2, r3, r2, r3
   87160:	085b      	lsrs	r3, r3, #1
   87162:	4a0b      	ldr	r2, [pc, #44]	; (87190 <SystemCoreClockUpdate+0x16c>)
   87164:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   87166:	e00a      	b.n	8717e <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   87168:	4b07      	ldr	r3, [pc, #28]	; (87188 <SystemCoreClockUpdate+0x164>)
   8716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8716c:	091b      	lsrs	r3, r3, #4
   8716e:	f003 0307 	and.w	r3, r3, #7
   87172:	4a07      	ldr	r2, [pc, #28]	; (87190 <SystemCoreClockUpdate+0x16c>)
   87174:	6812      	ldr	r2, [r2, #0]
   87176:	fa22 f303 	lsr.w	r3, r2, r3
   8717a:	4a05      	ldr	r2, [pc, #20]	; (87190 <SystemCoreClockUpdate+0x16c>)
   8717c:	6013      	str	r3, [r2, #0]
}
   8717e:	bf00      	nop
   87180:	46bd      	mov	sp, r7
   87182:	bc80      	pop	{r7}
   87184:	4770      	bx	lr
   87186:	bf00      	nop
   87188:	400e0600 	.word	0x400e0600
   8718c:	400e1a10 	.word	0x400e1a10
   87190:	20070190 	.word	0x20070190
   87194:	00b71b00 	.word	0x00b71b00
   87198:	003d0900 	.word	0x003d0900
   8719c:	0e4e1c00 	.word	0x0e4e1c00
   871a0:	aaaaaaab 	.word	0xaaaaaaab

000871a4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   871a4:	b480      	push	{r7}
   871a6:	b083      	sub	sp, #12
   871a8:	af00      	add	r7, sp, #0
   871aa:	4603      	mov	r3, r0
   871ac:	6039      	str	r1, [r7, #0]
   871ae:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   871b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   871b4:	2b00      	cmp	r3, #0
   871b6:	da0b      	bge.n	871d0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   871b8:	490d      	ldr	r1, [pc, #52]	; (871f0 <NVIC_SetPriority+0x4c>)
   871ba:	79fb      	ldrb	r3, [r7, #7]
   871bc:	f003 030f 	and.w	r3, r3, #15
   871c0:	3b04      	subs	r3, #4
   871c2:	683a      	ldr	r2, [r7, #0]
   871c4:	b2d2      	uxtb	r2, r2
   871c6:	0112      	lsls	r2, r2, #4
   871c8:	b2d2      	uxtb	r2, r2
   871ca:	440b      	add	r3, r1
   871cc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   871ce:	e009      	b.n	871e4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   871d0:	4908      	ldr	r1, [pc, #32]	; (871f4 <NVIC_SetPriority+0x50>)
   871d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   871d6:	683a      	ldr	r2, [r7, #0]
   871d8:	b2d2      	uxtb	r2, r2
   871da:	0112      	lsls	r2, r2, #4
   871dc:	b2d2      	uxtb	r2, r2
   871de:	440b      	add	r3, r1
   871e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   871e4:	bf00      	nop
   871e6:	370c      	adds	r7, #12
   871e8:	46bd      	mov	sp, r7
   871ea:	bc80      	pop	{r7}
   871ec:	4770      	bx	lr
   871ee:	bf00      	nop
   871f0:	e000ed00 	.word	0xe000ed00
   871f4:	e000e100 	.word	0xe000e100

000871f8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   871f8:	b580      	push	{r7, lr}
   871fa:	b082      	sub	sp, #8
   871fc:	af00      	add	r7, sp, #0
   871fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   87200:	687b      	ldr	r3, [r7, #4]
   87202:	3b01      	subs	r3, #1
   87204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   87208:	d301      	bcc.n	8720e <SysTick_Config+0x16>
   8720a:	2301      	movs	r3, #1
   8720c:	e00f      	b.n	8722e <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   8720e:	4a0a      	ldr	r2, [pc, #40]	; (87238 <SysTick_Config+0x40>)
   87210:	687b      	ldr	r3, [r7, #4]
   87212:	3b01      	subs	r3, #1
   87214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   87216:	210f      	movs	r1, #15
   87218:	f04f 30ff 	mov.w	r0, #4294967295
   8721c:	4b07      	ldr	r3, [pc, #28]	; (8723c <SysTick_Config+0x44>)
   8721e:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   87220:	4b05      	ldr	r3, [pc, #20]	; (87238 <SysTick_Config+0x40>)
   87222:	2200      	movs	r2, #0
   87224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   87226:	4b04      	ldr	r3, [pc, #16]	; (87238 <SysTick_Config+0x40>)
   87228:	2207      	movs	r2, #7
   8722a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   8722c:	2300      	movs	r3, #0
}
   8722e:	4618      	mov	r0, r3
   87230:	3708      	adds	r7, #8
   87232:	46bd      	mov	sp, r7
   87234:	bd80      	pop	{r7, pc}
   87236:	bf00      	nop
   87238:	e000e010 	.word	0xe000e010
   8723c:	000871a5 	.word	0x000871a5

00087240 <osc_get_rate>:
{
   87240:	b480      	push	{r7}
   87242:	b083      	sub	sp, #12
   87244:	af00      	add	r7, sp, #0
   87246:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   87248:	687b      	ldr	r3, [r7, #4]
   8724a:	2b07      	cmp	r3, #7
   8724c:	d825      	bhi.n	8729a <osc_get_rate+0x5a>
   8724e:	a201      	add	r2, pc, #4	; (adr r2, 87254 <osc_get_rate+0x14>)
   87250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87254:	00087275 	.word	0x00087275
   87258:	0008727b 	.word	0x0008727b
   8725c:	00087281 	.word	0x00087281
   87260:	00087287 	.word	0x00087287
   87264:	0008728b 	.word	0x0008728b
   87268:	0008728f 	.word	0x0008728f
   8726c:	00087293 	.word	0x00087293
   87270:	00087297 	.word	0x00087297
		return OSC_SLCK_32K_RC_HZ;
   87274:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   87278:	e010      	b.n	8729c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8727a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8727e:	e00d      	b.n	8729c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   87280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   87284:	e00a      	b.n	8729c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   87286:	4b08      	ldr	r3, [pc, #32]	; (872a8 <osc_get_rate+0x68>)
   87288:	e008      	b.n	8729c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8728a:	4b08      	ldr	r3, [pc, #32]	; (872ac <osc_get_rate+0x6c>)
   8728c:	e006      	b.n	8729c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8728e:	4b08      	ldr	r3, [pc, #32]	; (872b0 <osc_get_rate+0x70>)
   87290:	e004      	b.n	8729c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   87292:	4b07      	ldr	r3, [pc, #28]	; (872b0 <osc_get_rate+0x70>)
   87294:	e002      	b.n	8729c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   87296:	4b06      	ldr	r3, [pc, #24]	; (872b0 <osc_get_rate+0x70>)
   87298:	e000      	b.n	8729c <osc_get_rate+0x5c>
	return 0;
   8729a:	2300      	movs	r3, #0
}
   8729c:	4618      	mov	r0, r3
   8729e:	370c      	adds	r7, #12
   872a0:	46bd      	mov	sp, r7
   872a2:	bc80      	pop	{r7}
   872a4:	4770      	bx	lr
   872a6:	bf00      	nop
   872a8:	003d0900 	.word	0x003d0900
   872ac:	007a1200 	.word	0x007a1200
   872b0:	00b71b00 	.word	0x00b71b00

000872b4 <sysclk_get_main_hz>:
{
   872b4:	b580      	push	{r7, lr}
   872b6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   872b8:	2006      	movs	r0, #6
   872ba:	4b04      	ldr	r3, [pc, #16]	; (872cc <sysclk_get_main_hz+0x18>)
   872bc:	4798      	blx	r3
   872be:	4602      	mov	r2, r0
   872c0:	4613      	mov	r3, r2
   872c2:	00db      	lsls	r3, r3, #3
   872c4:	1a9b      	subs	r3, r3, r2
   872c6:	005b      	lsls	r3, r3, #1
}
   872c8:	4618      	mov	r0, r3
   872ca:	bd80      	pop	{r7, pc}
   872cc:	00087241 	.word	0x00087241

000872d0 <sysclk_get_cpu_hz>:
{
   872d0:	b580      	push	{r7, lr}
   872d2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   872d4:	4b02      	ldr	r3, [pc, #8]	; (872e0 <sysclk_get_cpu_hz+0x10>)
   872d6:	4798      	blx	r3
   872d8:	4603      	mov	r3, r0
   872da:	085b      	lsrs	r3, r3, #1
}
   872dc:	4618      	mov	r0, r3
   872de:	bd80      	pop	{r7, pc}
   872e0:	000872b5 	.word	0x000872b5

000872e4 <ioport_set_pin_level>:
{
   872e4:	b480      	push	{r7}
   872e6:	b08b      	sub	sp, #44	; 0x2c
   872e8:	af00      	add	r7, sp, #0
   872ea:	6078      	str	r0, [r7, #4]
   872ec:	460b      	mov	r3, r1
   872ee:	70fb      	strb	r3, [r7, #3]
   872f0:	687b      	ldr	r3, [r7, #4]
   872f2:	627b      	str	r3, [r7, #36]	; 0x24
   872f4:	78fb      	ldrb	r3, [r7, #3]
   872f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   872fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   872fc:	61fb      	str	r3, [r7, #28]
   872fe:	69fb      	ldr	r3, [r7, #28]
   87300:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   87302:	69bb      	ldr	r3, [r7, #24]
   87304:	095b      	lsrs	r3, r3, #5
   87306:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   87308:	697b      	ldr	r3, [r7, #20]
   8730a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8730e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   87312:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   87314:	613b      	str	r3, [r7, #16]
	if (level) {
   87316:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8731a:	2b00      	cmp	r3, #0
   8731c:	d009      	beq.n	87332 <ioport_set_pin_level+0x4e>
   8731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   87320:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   87322:	68fb      	ldr	r3, [r7, #12]
   87324:	f003 031f 	and.w	r3, r3, #31
   87328:	2201      	movs	r2, #1
   8732a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8732c:	693b      	ldr	r3, [r7, #16]
   8732e:	631a      	str	r2, [r3, #48]	; 0x30
}
   87330:	e008      	b.n	87344 <ioport_set_pin_level+0x60>
   87332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   87334:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   87336:	68bb      	ldr	r3, [r7, #8]
   87338:	f003 031f 	and.w	r3, r3, #31
   8733c:	2201      	movs	r2, #1
   8733e:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   87340:	693b      	ldr	r3, [r7, #16]
   87342:	635a      	str	r2, [r3, #52]	; 0x34
   87344:	bf00      	nop
   87346:	372c      	adds	r7, #44	; 0x2c
   87348:	46bd      	mov	sp, r7
   8734a:	bc80      	pop	{r7}
   8734c:	4770      	bx	lr
	...

00087350 <main>:

void noOS_bootup_sequence(void);
void set_led(ioport_pin_t pin, Bool level);

int main(void)
{
   87350:	b590      	push	{r4, r7, lr}
   87352:	b085      	sub	sp, #20
   87354:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   87356:	4b3e      	ldr	r3, [pc, #248]	; (87450 <main+0x100>)
   87358:	4798      	blx	r3
    board_init();
   8735a:	4b3e      	ldr	r3, [pc, #248]	; (87454 <main+0x104>)
   8735c:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   8735e:	4b3e      	ldr	r3, [pc, #248]	; (87458 <main+0x108>)
   87360:	4798      	blx	r3
   87362:	4602      	mov	r2, r0
   87364:	4b3d      	ldr	r3, [pc, #244]	; (8745c <main+0x10c>)
   87366:	fba3 2302 	umull	r2, r3, r3, r2
   8736a:	099b      	lsrs	r3, r3, #6
   8736c:	4618      	mov	r0, r3
   8736e:	4b3c      	ldr	r3, [pc, #240]	; (87460 <main+0x110>)
   87370:	4798      	blx	r3
    
    sd_mmc_init();
   87372:	4b3c      	ldr	r3, [pc, #240]	; (87464 <main+0x114>)
   87374:	4798      	blx	r3
    
    spi_init();
   87376:	4b3c      	ldr	r3, [pc, #240]	; (87468 <main+0x118>)
   87378:	4798      	blx	r3
    
    compass_init();
   8737a:	4b3c      	ldr	r3, [pc, #240]	; (8746c <main+0x11c>)
   8737c:	4798      	blx	r3
    lcd_init();
   8737e:	4b3c      	ldr	r3, [pc, #240]	; (87470 <main+0x120>)
   87380:	4798      	blx	r3
	sd_mmc_err_t err;
	while (1)
	{
    	do
    	{
        	status = sd_mmc_test_unit_ready(0);
   87382:	2000      	movs	r0, #0
   87384:	4b3b      	ldr	r3, [pc, #236]	; (87474 <main+0x124>)
   87386:	4798      	blx	r3
   87388:	4603      	mov	r3, r0
   8738a:	461a      	mov	r2, r3
   8738c:	4b3a      	ldr	r3, [pc, #232]	; (87478 <main+0x128>)
   8738e:	701a      	strb	r2, [r3, #0]
        	
        	if (CTRL_FAIL == status)
   87390:	4b39      	ldr	r3, [pc, #228]	; (87478 <main+0x128>)
   87392:	781b      	ldrb	r3, [r3, #0]
   87394:	2b01      	cmp	r3, #1
   87396:	d106      	bne.n	873a6 <main+0x56>
        	{
            	while (CTRL_NO_PRESENT != sd_mmc_check(0));
   87398:	bf00      	nop
   8739a:	2000      	movs	r0, #0
   8739c:	4b37      	ldr	r3, [pc, #220]	; (8747c <main+0x12c>)
   8739e:	4798      	blx	r3
   873a0:	4603      	mov	r3, r0
   873a2:	2b02      	cmp	r3, #2
   873a4:	d1f9      	bne.n	8739a <main+0x4a>
        	}
    	}
    	while (CTRL_GOOD != status);
   873a6:	4b34      	ldr	r3, [pc, #208]	; (87478 <main+0x128>)
   873a8:	781b      	ldrb	r3, [r3, #0]
   873aa:	2b00      	cmp	r3, #0
   873ac:	d1e9      	bne.n	87382 <main+0x32>

    	memset(&fs, 0, sizeof(FATFS));
   873ae:	f44f 720c 	mov.w	r2, #560	; 0x230
   873b2:	2100      	movs	r1, #0
   873b4:	4832      	ldr	r0, [pc, #200]	; (87480 <main+0x130>)
   873b6:	4b33      	ldr	r3, [pc, #204]	; (87484 <main+0x134>)
   873b8:	4798      	blx	r3
    	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
   873ba:	4931      	ldr	r1, [pc, #196]	; (87480 <main+0x130>)
   873bc:	2000      	movs	r0, #0
   873be:	4b32      	ldr	r3, [pc, #200]	; (87488 <main+0x138>)
   873c0:	4798      	blx	r3
   873c2:	4603      	mov	r3, r0
   873c4:	461a      	mov	r2, r3
   873c6:	4b31      	ldr	r3, [pc, #196]	; (8748c <main+0x13c>)
   873c8:	701a      	strb	r2, [r3, #0]
    	
    	if (FR_INVALID_DRIVE == res)
   873ca:	4b30      	ldr	r3, [pc, #192]	; (8748c <main+0x13c>)
   873cc:	781b      	ldrb	r3, [r3, #0]
   873ce:	2b0b      	cmp	r3, #11
   873d0:	d100      	bne.n	873d4 <main+0x84>
    	{
        	while(1);
   873d2:	e7fe      	b.n	873d2 <main+0x82>
    	}

    	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   873d4:	4b2e      	ldr	r3, [pc, #184]	; (87490 <main+0x140>)
   873d6:	2230      	movs	r2, #48	; 0x30
   873d8:	701a      	strb	r2, [r3, #0]
    	res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   873da:	220a      	movs	r2, #10
   873dc:	492c      	ldr	r1, [pc, #176]	; (87490 <main+0x140>)
   873de:	482d      	ldr	r0, [pc, #180]	; (87494 <main+0x144>)
   873e0:	4b2d      	ldr	r3, [pc, #180]	; (87498 <main+0x148>)
   873e2:	4798      	blx	r3
   873e4:	4603      	mov	r3, r0
   873e6:	461a      	mov	r2, r3
   873e8:	4b28      	ldr	r3, [pc, #160]	; (8748c <main+0x13c>)
   873ea:	701a      	strb	r2, [r3, #0]
    	
    	if (res != FR_OK)
   873ec:	4b27      	ldr	r3, [pc, #156]	; (8748c <main+0x13c>)
   873ee:	781b      	ldrb	r3, [r3, #0]
   873f0:	2b00      	cmp	r3, #0
   873f2:	d000      	beq.n	873f6 <main+0xa6>
    	{
        	while(1);
   873f4:	e7fe      	b.n	873f4 <main+0xa4>
    	}

#if 1
        uint32_t bw;
        uint32_t sta = getTicks();
   873f6:	4b29      	ldr	r3, [pc, #164]	; (8749c <main+0x14c>)
   873f8:	4798      	blx	r3
   873fa:	60b8      	str	r0, [r7, #8]
        set_led(LED_ONBOARD, 0);
   873fc:	2100      	movs	r1, #0
   873fe:	206a      	movs	r0, #106	; 0x6a
   87400:	4b27      	ldr	r3, [pc, #156]	; (874a0 <main+0x150>)
   87402:	4798      	blx	r3
    	for(int i = 0; i < 10000; i++)
   87404:	2300      	movs	r3, #0
   87406:	60fb      	str	r3, [r7, #12]
   87408:	e008      	b.n	8741c <main+0xcc>
        {
        	f_write(&file_object, "Test SD/MMC stack\n", 18, &bw);
   8740a:	463b      	mov	r3, r7
   8740c:	2212      	movs	r2, #18
   8740e:	4925      	ldr	r1, [pc, #148]	; (874a4 <main+0x154>)
   87410:	4820      	ldr	r0, [pc, #128]	; (87494 <main+0x144>)
   87412:	4c25      	ldr	r4, [pc, #148]	; (874a8 <main+0x158>)
   87414:	47a0      	blx	r4
    	for(int i = 0; i < 10000; i++)
   87416:	68fb      	ldr	r3, [r7, #12]
   87418:	3301      	adds	r3, #1
   8741a:	60fb      	str	r3, [r7, #12]
   8741c:	68fb      	ldr	r3, [r7, #12]
   8741e:	f242 720f 	movw	r2, #9999	; 0x270f
   87422:	4293      	cmp	r3, r2
   87424:	ddf1      	ble.n	8740a <main+0xba>

        }
        uint32_t diff = getTicks() - sta;
   87426:	4b1d      	ldr	r3, [pc, #116]	; (8749c <main+0x14c>)
   87428:	4798      	blx	r3
   8742a:	4602      	mov	r2, r0
   8742c:	68bb      	ldr	r3, [r7, #8]
   8742e:	1ad3      	subs	r3, r2, r3
   87430:	607b      	str	r3, [r7, #4]
  	    f_close(&file_object);
   87432:	4818      	ldr	r0, [pc, #96]	; (87494 <main+0x144>)
   87434:	4b1d      	ldr	r3, [pc, #116]	; (874ac <main+0x15c>)
   87436:	4798      	blx	r3
        set_led(LED_ONBOARD, 1);
   87438:	2101      	movs	r1, #1
   8743a:	206a      	movs	r0, #106	; 0x6a
   8743c:	4b18      	ldr	r3, [pc, #96]	; (874a0 <main+0x150>)
   8743e:	4798      	blx	r3
        else
        {
        	f_close(&file_object);
        }
#endif
    	while (CTRL_NO_PRESENT != sd_mmc_check(0));
   87440:	bf00      	nop
   87442:	2000      	movs	r0, #0
   87444:	4b0d      	ldr	r3, [pc, #52]	; (8747c <main+0x12c>)
   87446:	4798      	blx	r3
   87448:	4603      	mov	r3, r0
   8744a:	2b02      	cmp	r3, #2
   8744c:	d1f9      	bne.n	87442 <main+0xf2>
	{
   8744e:	e798      	b.n	87382 <main+0x32>
   87450:	000865f5 	.word	0x000865f5
   87454:	00086db9 	.word	0x00086db9
   87458:	000872d1 	.word	0x000872d1
   8745c:	10624dd3 	.word	0x10624dd3
   87460:	000871f9 	.word	0x000871f9
   87464:	000813a5 	.word	0x000813a5
   87468:	000856b5 	.word	0x000856b5
   8746c:	00085e01 	.word	0x00085e01
   87470:	00085f85 	.word	0x00085f85
   87474:	0008185d 	.word	0x0008185d
   87478:	20070cf4 	.word	0x20070cf4
   8747c:	000813e9 	.word	0x000813e9
   87480:	20070890 	.word	0x20070890
   87484:	00087545 	.word	0x00087545
   87488:	00084c1d 	.word	0x00084c1d
   8748c:	20070cec 	.word	0x20070cec
   87490:	20070194 	.word	0x20070194
   87494:	20070ac0 	.word	0x20070ac0
   87498:	00084c71 	.word	0x00084c71
   8749c:	000862b9 	.word	0x000862b9
   874a0:	000874b1 	.word	0x000874b1
   874a4:	00087d80 	.word	0x00087d80
   874a8:	00085029 	.word	0x00085029
   874ac:	000854e5 	.word	0x000854e5

000874b0 <set_led>:
        mdelay(100);
    }
}

void set_led(ioport_pin_t pin, Bool level)
{
   874b0:	b580      	push	{r7, lr}
   874b2:	b082      	sub	sp, #8
   874b4:	af00      	add	r7, sp, #0
   874b6:	6078      	str	r0, [r7, #4]
   874b8:	460b      	mov	r3, r1
   874ba:	70fb      	strb	r3, [r7, #3]
    if (allow_leds)
   874bc:	4b0b      	ldr	r3, [pc, #44]	; (874ec <set_led+0x3c>)
   874be:	781b      	ldrb	r3, [r3, #0]
   874c0:	2b00      	cmp	r3, #0
   874c2:	d00a      	beq.n	874da <set_led+0x2a>
    {
        ioport_set_pin_level(pin, level);
   874c4:	78fb      	ldrb	r3, [r7, #3]
   874c6:	2b00      	cmp	r3, #0
   874c8:	bf14      	ite	ne
   874ca:	2301      	movne	r3, #1
   874cc:	2300      	moveq	r3, #0
   874ce:	b2db      	uxtb	r3, r3
   874d0:	4619      	mov	r1, r3
   874d2:	6878      	ldr	r0, [r7, #4]
   874d4:	4b06      	ldr	r3, [pc, #24]	; (874f0 <set_led+0x40>)
   874d6:	4798      	blx	r3
    }
    else
    {
        ioport_set_pin_level(pin, 0);
    }
}
   874d8:	e003      	b.n	874e2 <set_led+0x32>
        ioport_set_pin_level(pin, 0);
   874da:	2100      	movs	r1, #0
   874dc:	6878      	ldr	r0, [r7, #4]
   874de:	4b04      	ldr	r3, [pc, #16]	; (874f0 <set_led+0x40>)
   874e0:	4798      	blx	r3
}
   874e2:	bf00      	nop
   874e4:	3708      	adds	r7, #8
   874e6:	46bd      	mov	sp, r7
   874e8:	bd80      	pop	{r7, pc}
   874ea:	bf00      	nop
   874ec:	2007018c 	.word	0x2007018c
   874f0:	000872e5 	.word	0x000872e5

000874f4 <__libc_init_array>:
   874f4:	b570      	push	{r4, r5, r6, lr}
   874f6:	4e0f      	ldr	r6, [pc, #60]	; (87534 <__libc_init_array+0x40>)
   874f8:	4d0f      	ldr	r5, [pc, #60]	; (87538 <__libc_init_array+0x44>)
   874fa:	1b76      	subs	r6, r6, r5
   874fc:	10b6      	asrs	r6, r6, #2
   874fe:	bf18      	it	ne
   87500:	2400      	movne	r4, #0
   87502:	d005      	beq.n	87510 <__libc_init_array+0x1c>
   87504:	3401      	adds	r4, #1
   87506:	f855 3b04 	ldr.w	r3, [r5], #4
   8750a:	4798      	blx	r3
   8750c:	42a6      	cmp	r6, r4
   8750e:	d1f9      	bne.n	87504 <__libc_init_array+0x10>
   87510:	4e0a      	ldr	r6, [pc, #40]	; (8753c <__libc_init_array+0x48>)
   87512:	4d0b      	ldr	r5, [pc, #44]	; (87540 <__libc_init_array+0x4c>)
   87514:	f000 fc4a 	bl	87dac <_init>
   87518:	1b76      	subs	r6, r6, r5
   8751a:	10b6      	asrs	r6, r6, #2
   8751c:	bf18      	it	ne
   8751e:	2400      	movne	r4, #0
   87520:	d006      	beq.n	87530 <__libc_init_array+0x3c>
   87522:	3401      	adds	r4, #1
   87524:	f855 3b04 	ldr.w	r3, [r5], #4
   87528:	4798      	blx	r3
   8752a:	42a6      	cmp	r6, r4
   8752c:	d1f9      	bne.n	87522 <__libc_init_array+0x2e>
   8752e:	bd70      	pop	{r4, r5, r6, pc}
   87530:	bd70      	pop	{r4, r5, r6, pc}
   87532:	bf00      	nop
   87534:	00087db8 	.word	0x00087db8
   87538:	00087db8 	.word	0x00087db8
   8753c:	00087dc0 	.word	0x00087dc0
   87540:	00087db8 	.word	0x00087db8

00087544 <memset>:
   87544:	b470      	push	{r4, r5, r6}
   87546:	0786      	lsls	r6, r0, #30
   87548:	d046      	beq.n	875d8 <memset+0x94>
   8754a:	1e54      	subs	r4, r2, #1
   8754c:	2a00      	cmp	r2, #0
   8754e:	d041      	beq.n	875d4 <memset+0x90>
   87550:	b2ca      	uxtb	r2, r1
   87552:	4603      	mov	r3, r0
   87554:	e002      	b.n	8755c <memset+0x18>
   87556:	f114 34ff 	adds.w	r4, r4, #4294967295
   8755a:	d33b      	bcc.n	875d4 <memset+0x90>
   8755c:	f803 2b01 	strb.w	r2, [r3], #1
   87560:	079d      	lsls	r5, r3, #30
   87562:	d1f8      	bne.n	87556 <memset+0x12>
   87564:	2c03      	cmp	r4, #3
   87566:	d92e      	bls.n	875c6 <memset+0x82>
   87568:	b2cd      	uxtb	r5, r1
   8756a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8756e:	2c0f      	cmp	r4, #15
   87570:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   87574:	d919      	bls.n	875aa <memset+0x66>
   87576:	4626      	mov	r6, r4
   87578:	f103 0210 	add.w	r2, r3, #16
   8757c:	3e10      	subs	r6, #16
   8757e:	2e0f      	cmp	r6, #15
   87580:	f842 5c10 	str.w	r5, [r2, #-16]
   87584:	f842 5c0c 	str.w	r5, [r2, #-12]
   87588:	f842 5c08 	str.w	r5, [r2, #-8]
   8758c:	f842 5c04 	str.w	r5, [r2, #-4]
   87590:	f102 0210 	add.w	r2, r2, #16
   87594:	d8f2      	bhi.n	8757c <memset+0x38>
   87596:	f1a4 0210 	sub.w	r2, r4, #16
   8759a:	f022 020f 	bic.w	r2, r2, #15
   8759e:	f004 040f 	and.w	r4, r4, #15
   875a2:	3210      	adds	r2, #16
   875a4:	2c03      	cmp	r4, #3
   875a6:	4413      	add	r3, r2
   875a8:	d90d      	bls.n	875c6 <memset+0x82>
   875aa:	461e      	mov	r6, r3
   875ac:	4622      	mov	r2, r4
   875ae:	3a04      	subs	r2, #4
   875b0:	2a03      	cmp	r2, #3
   875b2:	f846 5b04 	str.w	r5, [r6], #4
   875b6:	d8fa      	bhi.n	875ae <memset+0x6a>
   875b8:	1f22      	subs	r2, r4, #4
   875ba:	f022 0203 	bic.w	r2, r2, #3
   875be:	3204      	adds	r2, #4
   875c0:	4413      	add	r3, r2
   875c2:	f004 0403 	and.w	r4, r4, #3
   875c6:	b12c      	cbz	r4, 875d4 <memset+0x90>
   875c8:	b2c9      	uxtb	r1, r1
   875ca:	441c      	add	r4, r3
   875cc:	f803 1b01 	strb.w	r1, [r3], #1
   875d0:	429c      	cmp	r4, r3
   875d2:	d1fb      	bne.n	875cc <memset+0x88>
   875d4:	bc70      	pop	{r4, r5, r6}
   875d6:	4770      	bx	lr
   875d8:	4614      	mov	r4, r2
   875da:	4603      	mov	r3, r0
   875dc:	e7c2      	b.n	87564 <memset+0x20>
   875de:	bf00      	nop

000875e0 <register_fini>:
   875e0:	4b02      	ldr	r3, [pc, #8]	; (875ec <register_fini+0xc>)
   875e2:	b113      	cbz	r3, 875ea <register_fini+0xa>
   875e4:	4802      	ldr	r0, [pc, #8]	; (875f0 <register_fini+0x10>)
   875e6:	f000 b805 	b.w	875f4 <atexit>
   875ea:	4770      	bx	lr
   875ec:	00000000 	.word	0x00000000
   875f0:	00087601 	.word	0x00087601

000875f4 <atexit>:
   875f4:	2300      	movs	r3, #0
   875f6:	4601      	mov	r1, r0
   875f8:	461a      	mov	r2, r3
   875fa:	4618      	mov	r0, r3
   875fc:	f000 b81e 	b.w	8763c <__register_exitproc>

00087600 <__libc_fini_array>:
   87600:	b538      	push	{r3, r4, r5, lr}
   87602:	4c0a      	ldr	r4, [pc, #40]	; (8762c <__libc_fini_array+0x2c>)
   87604:	4d0a      	ldr	r5, [pc, #40]	; (87630 <__libc_fini_array+0x30>)
   87606:	1b64      	subs	r4, r4, r5
   87608:	10a4      	asrs	r4, r4, #2
   8760a:	d00a      	beq.n	87622 <__libc_fini_array+0x22>
   8760c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   87610:	3b01      	subs	r3, #1
   87612:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   87616:	3c01      	subs	r4, #1
   87618:	f855 3904 	ldr.w	r3, [r5], #-4
   8761c:	4798      	blx	r3
   8761e:	2c00      	cmp	r4, #0
   87620:	d1f9      	bne.n	87616 <__libc_fini_array+0x16>
   87622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   87626:	f000 bbcb 	b.w	87dc0 <_fini>
   8762a:	bf00      	nop
   8762c:	00087dd0 	.word	0x00087dd0
   87630:	00087dcc 	.word	0x00087dcc

00087634 <__retarget_lock_acquire_recursive>:
   87634:	4770      	bx	lr
   87636:	bf00      	nop

00087638 <__retarget_lock_release_recursive>:
   87638:	4770      	bx	lr
   8763a:	bf00      	nop

0008763c <__register_exitproc>:
   8763c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   87640:	4d2c      	ldr	r5, [pc, #176]	; (876f4 <__register_exitproc+0xb8>)
   87642:	4606      	mov	r6, r0
   87644:	6828      	ldr	r0, [r5, #0]
   87646:	4698      	mov	r8, r3
   87648:	460f      	mov	r7, r1
   8764a:	4691      	mov	r9, r2
   8764c:	f7ff fff2 	bl	87634 <__retarget_lock_acquire_recursive>
   87650:	4b29      	ldr	r3, [pc, #164]	; (876f8 <__register_exitproc+0xbc>)
   87652:	681c      	ldr	r4, [r3, #0]
   87654:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   87658:	2b00      	cmp	r3, #0
   8765a:	d03e      	beq.n	876da <__register_exitproc+0x9e>
   8765c:	685a      	ldr	r2, [r3, #4]
   8765e:	2a1f      	cmp	r2, #31
   87660:	dc1c      	bgt.n	8769c <__register_exitproc+0x60>
   87662:	f102 0e01 	add.w	lr, r2, #1
   87666:	b176      	cbz	r6, 87686 <__register_exitproc+0x4a>
   87668:	2101      	movs	r1, #1
   8766a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8766e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   87672:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   87676:	4091      	lsls	r1, r2
   87678:	4308      	orrs	r0, r1
   8767a:	2e02      	cmp	r6, #2
   8767c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   87680:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   87684:	d023      	beq.n	876ce <__register_exitproc+0x92>
   87686:	3202      	adds	r2, #2
   87688:	f8c3 e004 	str.w	lr, [r3, #4]
   8768c:	6828      	ldr	r0, [r5, #0]
   8768e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   87692:	f7ff ffd1 	bl	87638 <__retarget_lock_release_recursive>
   87696:	2000      	movs	r0, #0
   87698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8769c:	4b17      	ldr	r3, [pc, #92]	; (876fc <__register_exitproc+0xc0>)
   8769e:	b30b      	cbz	r3, 876e4 <__register_exitproc+0xa8>
   876a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   876a4:	f3af 8000 	nop.w
   876a8:	4603      	mov	r3, r0
   876aa:	b1d8      	cbz	r0, 876e4 <__register_exitproc+0xa8>
   876ac:	2000      	movs	r0, #0
   876ae:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   876b2:	f04f 0e01 	mov.w	lr, #1
   876b6:	6058      	str	r0, [r3, #4]
   876b8:	6019      	str	r1, [r3, #0]
   876ba:	4602      	mov	r2, r0
   876bc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   876c0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   876c4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   876c8:	2e00      	cmp	r6, #0
   876ca:	d0dc      	beq.n	87686 <__register_exitproc+0x4a>
   876cc:	e7cc      	b.n	87668 <__register_exitproc+0x2c>
   876ce:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   876d2:	4301      	orrs	r1, r0
   876d4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   876d8:	e7d5      	b.n	87686 <__register_exitproc+0x4a>
   876da:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   876de:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   876e2:	e7bb      	b.n	8765c <__register_exitproc+0x20>
   876e4:	6828      	ldr	r0, [r5, #0]
   876e6:	f7ff ffa7 	bl	87638 <__retarget_lock_release_recursive>
   876ea:	f04f 30ff 	mov.w	r0, #4294967295
   876ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   876f2:	bf00      	nop
   876f4:	200705d0 	.word	0x200705d0
   876f8:	00087da8 	.word	0x00087da8
   876fc:	00000000 	.word	0x00000000

00087700 <sd_mmc_trans_units>:
   87700:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0008771c <sd_trans_multipliers>:
   8771c:	00000000 0000000a 0000000c 0000000d     ................
   8772c:	0000000f 00000014 00000019 0000001e     ................
   8773c:	00000023 00000028 0000002d 00000032     #...(...-...2...
   8774c:	00000037 0000003c 00000046 00000050     7...<...F...P...

0008775c <mmc_trans_multipliers>:
   8775c:	00000000 0000000a 0000000c 0000000d     ................
   8776c:	0000000f 00000014 0000001a 0000001e     ................
   8777c:	00000023 00000028 0000002d 00000034     #...(...-...4...
   8778c:	00000037 0000003c 00000046 00000050     7...<...F...P...
   8779c:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   877ac:	22302074 00000000 2f445322 20434d4d     t 0"...."SD/MMC 
   877bc:	64726143 6f6c5320 22312074 00000000     Card Slot 1"....

000877cc <lun_desc>:
   877cc:	000818cd 0008192d 00081995 000819fd     ....-...........
   877dc:	00081a3d 00081acd 00081b7d 0008779c     =.......}....w..
   877ec:	000818e1 0008194d 000819b9 00081a11     ....M...........
   877fc:	00081a51 00081af1 00081ba1 000877b4     Q............w..

0008780c <LfnOfs>:
   8780c:	07050301 12100e09 1c181614 0000001e     ................
   8781c:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   8782c:	00005d5b                                []..

00087830 <excvt.4559>:
   87830:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   87840:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   87850:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   87860:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   87870:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   87880:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   87890:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   878a0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

000878b0 <Tbl>:
   878b0:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   878c0:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   878d0:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   878e0:	00d600ff 00f800dc 00d800a3 019200d7     ................
   878f0:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   87900:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   87910:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   87920:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   87930:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   87940:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   87950:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   87960:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   87970:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   87980:	00da00de 00d900db 00dd00fd 00b400af     ................
   87990:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   879a0:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

000879b0 <tbl_lower.4309>:
   879b0:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   879c0:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   879d0:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   879e0:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   879f0:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   87a00:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   87a10:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   87a20:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   87a30:	01050103 01090107 010d010b 0111010f     ................
   87a40:	01150113 01190117 011d011b 0121011f     ..............!.
   87a50:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   87a60:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   87a70:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   87a80:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   87a90:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   87aa0:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   87ab0:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   87ac0:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   87ad0:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   87ae0:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   87af0:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   87b00:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   87b10:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   87b20:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   87b30:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   87b40:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   87b50:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   87b60:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   87b70:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   87b80:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00087b90 <tbl_upper.4310>:
   87b90:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   87ba0:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   87bb0:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   87bc0:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   87bd0:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   87be0:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   87bf0:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   87c00:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   87c10:	01040102 01080106 010c010a 0110010e     ................
   87c20:	01140112 01180116 011c011a 0120011e     .............. .
   87c30:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   87c40:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   87c50:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   87c60:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   87c70:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   87c80:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   87c90:	03940393 03960395 03980397 039a0399     ................
   87ca0:	039c039b 039e039d 03a0039f 03a303a1     ................
   87cb0:	03a503a4 03a703a6 03a903a8 041003aa     ................
   87cc0:	04120411 04140413 04160415 04180417     ................
   87cd0:	041a0419 041c041b 041e041d 0420041f     .............. .
   87ce0:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   87cf0:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   87d00:	04030402 04050404 04070406 04090408     ................
   87d10:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   87d20:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   87d30:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   87d40:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   87d50:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   87d60:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   87d70:	000f4240 000000c0 00000000 00000000     @B..............
   87d80:	74736554 2f445320 20434d4d 63617473     Test SD/MMC stac
   87d90:	00000a6b 746f6f62 20676e69 534f6f6e     k...booting noOS
   87da0:	00202020 0000002e                          .....

00087da8 <_global_impure_ptr>:
   87da8:	200701a8                                ... 

00087dac <_init>:
   87dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87dae:	bf00      	nop
   87db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87db2:	bc08      	pop	{r3}
   87db4:	469e      	mov	lr, r3
   87db6:	4770      	bx	lr

00087db8 <__init_array_start>:
   87db8:	000875e1 	.word	0x000875e1

00087dbc <__frame_dummy_init_array_entry>:
   87dbc:	00080119                                ....

00087dc0 <_fini>:
   87dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87dc2:	bf00      	nop
   87dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87dc6:	bc08      	pop	{r3}
   87dc8:	469e      	mov	lr, r3
   87dca:	4770      	bx	lr

00087dcc <__fini_array_start>:
   87dcc:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	20070190 	.word	0x20070190
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <allow_leds>:
2007018c:	00000001                                ....

20070190 <SystemCoreClock>:
20070190:	003d0900                                ..=.

20070194 <test_file_name>:
20070194:	64733a30 636d6d5f 7365745f 78742e74     0:sd_mmc_test.tx
200701a4:	00000074                                t...

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	20070cf8                                ... 
