
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009bf4  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00089bf4  00089bf4  00019bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b50  20070000  00089bfc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004c0  20070b50  0008a74c  00020b50  2**2
                  ALLOC
  4 .stack        00002000  20071010  0008ac0c  00020b50  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b79  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001d75f  00000000  00000000  00020bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003c26  00000000  00000000  0003e331  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008c25  00000000  00000000  00041f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f58  00000000  00000000  0004ab7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ea0  00000000  00000000  0004bad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000867f  00000000  00000000  0004c974  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001335c  00000000  00000000  00054ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00063625  00000000  00000000  0006834f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004de4  00000000  00000000  000cb974  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	10 30 07 20 c5 41 08 00 bd 41 08 00 bd 41 08 00     .0. .A...A...A..
   80010:	bd 41 08 00 bd 41 08 00 bd 41 08 00 00 00 00 00     .A...A...A......
	...
   8002c:	bd 41 08 00 bd 41 08 00 00 00 00 00 bd 41 08 00     .A...A.......A..
   8003c:	31 31 08 00 bd 41 08 00 bd 41 08 00 bd 41 08 00     11...A...A...A..
   8004c:	bd 41 08 00 bd 41 08 00 bd 41 08 00 bd 41 08 00     .A...A...A...A..
   8005c:	bd 41 08 00 bd 41 08 00 bd 41 08 00 00 00 00 00     .A...A...A......
   8006c:	bd 41 08 00 bd 41 08 00 bd 41 08 00 bd 41 08 00     .A...A...A...A..
	...
   80084:	bd 41 08 00 bd 41 08 00 bd 41 08 00 bd 41 08 00     .A...A...A...A..
   80094:	bd 41 08 00 25 11 08 00 bd 41 08 00 bd 41 08 00     .A..%....A...A..
   800a4:	00 00 00 00 bd 41 08 00 bd 41 08 00 21 2e 08 00     .....A...A..!...
   800b4:	bd 41 08 00 bd 41 08 00 bd 41 08 00 bd 41 08 00     .A...A...A...A..
   800c4:	bd 41 08 00 bd 41 08 00 bd 41 08 00 bd 41 08 00     .A...A...A...A..
   800d4:	bd 41 08 00 bd 41 08 00 45 0c 08 00 bd 41 08 00     .A...A..E....A..
   800e4:	bd 41 08 00 bd 41 08 00 bd 41 08 00 bd 41 08 00     .A...A...A...A..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b50 	.word	0x20070b50
   80110:	00000000 	.word	0x00000000
   80114:	00089bfc 	.word	0x00089bfc

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00089bfc 	.word	0x00089bfc
   80154:	20070b54 	.word	0x20070b54
   80158:	00089bfc 	.word	0x00089bfc
   8015c:	00000000 	.word	0x00000000

00080160 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   80160:	b580      	push	{r7, lr}
   80162:	b082      	sub	sp, #8
   80164:	af00      	add	r7, sp, #0
   80166:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   80168:	6878      	ldr	r0, [r7, #4]
   8016a:	4b04      	ldr	r3, [pc, #16]	; (8017c <usart_spi_enable+0x1c>)
   8016c:	4798      	blx	r3
	usart_enable_rx(p_usart);
   8016e:	6878      	ldr	r0, [r7, #4]
   80170:	4b03      	ldr	r3, [pc, #12]	; (80180 <usart_spi_enable+0x20>)
   80172:	4798      	blx	r3
}
   80174:	bf00      	nop
   80176:	3708      	adds	r7, #8
   80178:	46bd      	mov	sp, r7
   8017a:	bd80      	pop	{r7, pc}
   8017c:	000808a1 	.word	0x000808a1
   80180:	000808e9 	.word	0x000808e9

00080184 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   80184:	b580      	push	{r7, lr}
   80186:	b082      	sub	sp, #8
   80188:	af00      	add	r7, sp, #0
   8018a:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   8018c:	6878      	ldr	r0, [r7, #4]
   8018e:	4b04      	ldr	r3, [pc, #16]	; (801a0 <usart_spi_disable+0x1c>)
   80190:	4798      	blx	r3
	usart_disable_rx(p_usart);
   80192:	6878      	ldr	r0, [r7, #4]
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <usart_spi_disable+0x20>)
   80196:	4798      	blx	r3
}
   80198:	bf00      	nop
   8019a:	3708      	adds	r7, #8
   8019c:	46bd      	mov	sp, r7
   8019e:	bd80      	pop	{r7, pc}
   801a0:	000808b9 	.word	0x000808b9
   801a4:	00080901 	.word	0x00080901

000801a8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801a8:	b480      	push	{r7}
   801aa:	b085      	sub	sp, #20
   801ac:	af00      	add	r7, sp, #0
   801ae:	60f8      	str	r0, [r7, #12]
   801b0:	60b9      	str	r1, [r7, #8]
   801b2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801b4:	68bb      	ldr	r3, [r7, #8]
   801b6:	2b00      	cmp	r3, #0
   801b8:	d007      	beq.n	801ca <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   801ba:	68bb      	ldr	r3, [r7, #8]
   801bc:	681a      	ldr	r2, [r3, #0]
   801be:	68fb      	ldr	r3, [r7, #12]
   801c0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   801c2:	68bb      	ldr	r3, [r7, #8]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	68fb      	ldr	r3, [r7, #12]
   801c8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   801ca:	687b      	ldr	r3, [r7, #4]
   801cc:	2b00      	cmp	r3, #0
   801ce:	d007      	beq.n	801e0 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	681a      	ldr	r2, [r3, #0]
   801d4:	68fb      	ldr	r3, [r7, #12]
   801d6:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   801d8:	687b      	ldr	r3, [r7, #4]
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	68fb      	ldr	r3, [r7, #12]
   801de:	61da      	str	r2, [r3, #28]
	}
}
   801e0:	bf00      	nop
   801e2:	3714      	adds	r7, #20
   801e4:	46bd      	mov	sp, r7
   801e6:	bc80      	pop	{r7}
   801e8:	4770      	bx	lr

000801ea <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801ea:	b480      	push	{r7}
   801ec:	b085      	sub	sp, #20
   801ee:	af00      	add	r7, sp, #0
   801f0:	60f8      	str	r0, [r7, #12]
   801f2:	60b9      	str	r1, [r7, #8]
   801f4:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801f6:	68bb      	ldr	r3, [r7, #8]
   801f8:	2b00      	cmp	r3, #0
   801fa:	d007      	beq.n	8020c <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   801fc:	68bb      	ldr	r3, [r7, #8]
   801fe:	681a      	ldr	r2, [r3, #0]
   80200:	68fb      	ldr	r3, [r7, #12]
   80202:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   80204:	68bb      	ldr	r3, [r7, #8]
   80206:	685a      	ldr	r2, [r3, #4]
   80208:	68fb      	ldr	r3, [r7, #12]
   8020a:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b00      	cmp	r3, #0
   80210:	d007      	beq.n	80222 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   80212:	687b      	ldr	r3, [r7, #4]
   80214:	681a      	ldr	r2, [r3, #0]
   80216:	68fb      	ldr	r3, [r7, #12]
   80218:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   8021a:	687b      	ldr	r3, [r7, #4]
   8021c:	685a      	ldr	r2, [r3, #4]
   8021e:	68fb      	ldr	r3, [r7, #12]
   80220:	615a      	str	r2, [r3, #20]
	}
}
   80222:	bf00      	nop
   80224:	3714      	adds	r7, #20
   80226:	46bd      	mov	sp, r7
   80228:	bc80      	pop	{r7}
   8022a:	4770      	bx	lr

0008022c <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8022c:	b480      	push	{r7}
   8022e:	b083      	sub	sp, #12
   80230:	af00      	add	r7, sp, #0
   80232:	6078      	str	r0, [r7, #4]
   80234:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   80236:	683a      	ldr	r2, [r7, #0]
   80238:	f240 1301 	movw	r3, #257	; 0x101
   8023c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8023e:	687a      	ldr	r2, [r7, #4]
   80240:	6213      	str	r3, [r2, #32]
}
   80242:	bf00      	nop
   80244:	370c      	adds	r7, #12
   80246:	46bd      	mov	sp, r7
   80248:	bc80      	pop	{r7}
   8024a:	4770      	bx	lr

0008024c <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8024c:	b480      	push	{r7}
   8024e:	b083      	sub	sp, #12
   80250:	af00      	add	r7, sp, #0
   80252:	6078      	str	r0, [r7, #4]
   80254:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   80256:	683a      	ldr	r2, [r7, #0]
   80258:	f240 2302 	movw	r3, #514	; 0x202
   8025c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8025e:	687a      	ldr	r2, [r7, #4]
   80260:	6213      	str	r3, [r2, #32]
}
   80262:	bf00      	nop
   80264:	370c      	adds	r7, #12
   80266:	46bd      	mov	sp, r7
   80268:	bc80      	pop	{r7}
   8026a:	4770      	bx	lr

0008026c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8026c:	b4b0      	push	{r4, r5, r7}
   8026e:	b091      	sub	sp, #68	; 0x44
   80270:	af00      	add	r7, sp, #0
   80272:	6078      	str	r0, [r7, #4]
   80274:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80276:	4b1b      	ldr	r3, [pc, #108]	; (802e4 <pwm_clocks_generate+0x78>)
   80278:	f107 040c 	add.w	r4, r7, #12
   8027c:	461d      	mov	r5, r3
   8027e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8028a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8028e:	2300      	movs	r3, #0
   80290:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   80294:	009b      	lsls	r3, r3, #2
   80296:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8029a:	4413      	add	r3, r2
   8029c:	f853 3c34 	ldr.w	r3, [r3, #-52]
   802a0:	683a      	ldr	r2, [r7, #0]
   802a2:	fbb2 f2f3 	udiv	r2, r2, r3
   802a6:	687b      	ldr	r3, [r7, #4]
   802a8:	fbb2 f3f3 	udiv	r3, r2, r3
   802ac:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   802b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   802b4:	d906      	bls.n	802c4 <pwm_clocks_generate+0x58>
			break;
		}
		ul_pre++;
   802b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802b8:	3301      	adds	r3, #1
   802ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   802bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802be:	2b0a      	cmp	r3, #10
   802c0:	d9e7      	bls.n	80292 <pwm_clocks_generate+0x26>
   802c2:	e000      	b.n	802c6 <pwm_clocks_generate+0x5a>
			break;
   802c4:	bf00      	nop

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   802c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802c8:	2b0a      	cmp	r3, #10
   802ca:	d804      	bhi.n	802d6 <pwm_clocks_generate+0x6a>
		return ul_div | (ul_pre << 8);
   802cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802ce:	021a      	lsls	r2, r3, #8
   802d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   802d2:	4313      	orrs	r3, r2
   802d4:	e001      	b.n	802da <pwm_clocks_generate+0x6e>
	} else {
		return PWM_INVALID_ARGUMENT;
   802d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
   802da:	4618      	mov	r0, r3
   802dc:	3744      	adds	r7, #68	; 0x44
   802de:	46bd      	mov	sp, r7
   802e0:	bcb0      	pop	{r4, r5, r7}
   802e2:	4770      	bx	lr
   802e4:	00089788 	.word	0x00089788

000802e8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   802e8:	b580      	push	{r7, lr}
   802ea:	b084      	sub	sp, #16
   802ec:	af00      	add	r7, sp, #0
   802ee:	6078      	str	r0, [r7, #4]
   802f0:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
   802f2:	2300      	movs	r3, #0
   802f4:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   802f6:	683b      	ldr	r3, [r7, #0]
   802f8:	681b      	ldr	r3, [r3, #0]
   802fa:	2b00      	cmp	r3, #0
   802fc:	d011      	beq.n	80322 <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   802fe:	683b      	ldr	r3, [r7, #0]
   80300:	681a      	ldr	r2, [r3, #0]
   80302:	683b      	ldr	r3, [r7, #0]
   80304:	689b      	ldr	r3, [r3, #8]
   80306:	4619      	mov	r1, r3
   80308:	4610      	mov	r0, r2
   8030a:	4b16      	ldr	r3, [pc, #88]	; (80364 <pwm_init+0x7c>)
   8030c:	4798      	blx	r3
   8030e:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
   80310:	68bb      	ldr	r3, [r7, #8]
   80312:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80316:	4293      	cmp	r3, r2
   80318:	d101      	bne.n	8031e <pwm_init+0x36>
			return result;
   8031a:	68bb      	ldr	r3, [r7, #8]
   8031c:	e01e      	b.n	8035c <pwm_init+0x74>
		}

		clock = result;
   8031e:	68bb      	ldr	r3, [r7, #8]
   80320:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80322:	683b      	ldr	r3, [r7, #0]
   80324:	685b      	ldr	r3, [r3, #4]
   80326:	2b00      	cmp	r3, #0
   80328:	d014      	beq.n	80354 <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8032a:	683b      	ldr	r3, [r7, #0]
   8032c:	685a      	ldr	r2, [r3, #4]
   8032e:	683b      	ldr	r3, [r7, #0]
   80330:	689b      	ldr	r3, [r3, #8]
   80332:	4619      	mov	r1, r3
   80334:	4610      	mov	r0, r2
   80336:	4b0b      	ldr	r3, [pc, #44]	; (80364 <pwm_init+0x7c>)
   80338:	4798      	blx	r3
   8033a:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
   8033c:	68bb      	ldr	r3, [r7, #8]
   8033e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80342:	4293      	cmp	r3, r2
   80344:	d101      	bne.n	8034a <pwm_init+0x62>
			return result;
   80346:	68bb      	ldr	r3, [r7, #8]
   80348:	e008      	b.n	8035c <pwm_init+0x74>
		}

		clock |= (result << 16);
   8034a:	68bb      	ldr	r3, [r7, #8]
   8034c:	041b      	lsls	r3, r3, #16
   8034e:	68fa      	ldr	r2, [r7, #12]
   80350:	4313      	orrs	r3, r2
   80352:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80354:	687b      	ldr	r3, [r7, #4]
   80356:	68fa      	ldr	r2, [r7, #12]
   80358:	601a      	str	r2, [r3, #0]
#endif
	return 0;
   8035a:	2300      	movs	r3, #0
}
   8035c:	4618      	mov	r0, r3
   8035e:	3710      	adds	r7, #16
   80360:	46bd      	mov	sp, r7
   80362:	bd80      	pop	{r7, pc}
   80364:	0008026d 	.word	0x0008026d

00080368 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80368:	b480      	push	{r7}
   8036a:	b087      	sub	sp, #28
   8036c:	af00      	add	r7, sp, #0
   8036e:	6078      	str	r0, [r7, #4]
   80370:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
   80372:	2300      	movs	r3, #0
   80374:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
   80376:	683b      	ldr	r3, [r7, #0]
   80378:	681b      	ldr	r3, [r3, #0]
   8037a:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8037c:	683b      	ldr	r3, [r7, #0]
   8037e:	685b      	ldr	r3, [r3, #4]
   80380:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
   80384:	683a      	ldr	r2, [r7, #0]
   80386:	7a92      	ldrb	r2, [r2, #10]
   80388:	0252      	lsls	r2, r2, #9
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8038a:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   8038c:	683a      	ldr	r2, [r7, #0]
   8038e:	8a92      	ldrh	r2, [r2, #20]
			(p_channel->polarity << 9) |
   80390:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
   80392:	683a      	ldr	r2, [r7, #0]
   80394:	7d92      	ldrb	r2, [r2, #22]
   80396:	0412      	lsls	r2, r2, #16
			(p_channel->counter_event) |
   80398:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
   8039a:	683a      	ldr	r2, [r7, #0]
   8039c:	7dd2      	ldrb	r2, [r2, #23]
   8039e:	0452      	lsls	r2, r2, #17
			(p_channel->b_deadtime_generator << 16) |
   803a0:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
   803a2:	683a      	ldr	r2, [r7, #0]
   803a4:	7e12      	ldrb	r2, [r2, #24]
   803a6:	0492      	lsls	r2, r2, #18
			(p_channel->b_pwmh_output_inverted << 17) |
   803a8:	4313      	orrs	r3, r2
#endif
			(p_channel->alignment);
   803aa:	683a      	ldr	r2, [r7, #0]
   803ac:	8912      	ldrh	r2, [r2, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803ae:	4313      	orrs	r3, r2
   803b0:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   803b2:	687a      	ldr	r2, [r7, #4]
   803b4:	693b      	ldr	r3, [r7, #16]
   803b6:	3310      	adds	r3, #16
   803b8:	015b      	lsls	r3, r3, #5
   803ba:	4413      	add	r3, r2
   803bc:	697a      	ldr	r2, [r7, #20]
   803be:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   803c0:	683b      	ldr	r3, [r7, #0]
   803c2:	68da      	ldr	r2, [r3, #12]
   803c4:	6879      	ldr	r1, [r7, #4]
   803c6:	693b      	ldr	r3, [r7, #16]
   803c8:	3310      	adds	r3, #16
   803ca:	015b      	lsls	r3, r3, #5
   803cc:	440b      	add	r3, r1
   803ce:	3304      	adds	r3, #4
   803d0:	601a      	str	r2, [r3, #0]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   803d2:	683b      	ldr	r3, [r7, #0]
   803d4:	691a      	ldr	r2, [r3, #16]
   803d6:	6879      	ldr	r1, [r7, #4]
   803d8:	693b      	ldr	r3, [r7, #16]
   803da:	015b      	lsls	r3, r3, #5
   803dc:	440b      	add	r3, r1
   803de:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   803e2:	601a      	str	r2, [r3, #0]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   803e4:	683b      	ldr	r3, [r7, #0]
   803e6:	7d9b      	ldrb	r3, [r3, #22]
   803e8:	2b00      	cmp	r3, #0
   803ea:	d00d      	beq.n	80408 <pwm_channel_init+0xa0>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   803ec:	683b      	ldr	r3, [r7, #0]
   803ee:	8b9b      	ldrh	r3, [r3, #28]
   803f0:	041b      	lsls	r3, r3, #16
   803f2:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   803f4:	683b      	ldr	r3, [r7, #0]
   803f6:	8b5b      	ldrh	r3, [r3, #26]
   803f8:	431a      	orrs	r2, r3
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   803fa:	6879      	ldr	r1, [r7, #4]
   803fc:	693b      	ldr	r3, [r7, #16]
   803fe:	015b      	lsls	r3, r3, #5
   80400:	440b      	add	r3, r1
   80402:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80406:	601a      	str	r2, [r3, #0]
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80408:	687b      	ldr	r3, [r7, #4]
   8040a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   8040c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   80410:	693b      	ldr	r3, [r7, #16]
   80412:	fa01 f303 	lsl.w	r3, r1, r3
   80416:	43db      	mvns	r3, r3
   80418:	4013      	ands	r3, r2
   8041a:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   8041c:	683b      	ldr	r3, [r7, #0]
   8041e:	7f9b      	ldrb	r3, [r3, #30]
   80420:	461a      	mov	r2, r3
   80422:	693b      	ldr	r3, [r7, #16]
   80424:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80426:	683b      	ldr	r3, [r7, #0]
   80428:	7fdb      	ldrb	r3, [r3, #31]
   8042a:	4619      	mov	r1, r3
   8042c:	693b      	ldr	r3, [r7, #16]
   8042e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   80432:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80434:	4313      	orrs	r3, r2
   80436:	461a      	mov	r2, r3
   80438:	697b      	ldr	r3, [r7, #20]
   8043a:	4313      	orrs	r3, r2
   8043c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OS = tmp_reg;
   8043e:	687b      	ldr	r3, [r7, #4]
   80440:	697a      	ldr	r2, [r7, #20]
   80442:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80444:	687b      	ldr	r3, [r7, #4]
   80446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   8044c:	693b      	ldr	r3, [r7, #16]
   8044e:	fa01 f303 	lsl.w	r3, r1, r3
   80452:	43db      	mvns	r3, r3
   80454:	4013      	ands	r3, r2
   80456:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80458:	683b      	ldr	r3, [r7, #0]
   8045a:	f893 3020 	ldrb.w	r3, [r3, #32]
   8045e:	461a      	mov	r2, r3
   80460:	693b      	ldr	r3, [r7, #16]
   80462:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80464:	683b      	ldr	r3, [r7, #0]
   80466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   8046a:	4619      	mov	r1, r3
   8046c:	693b      	ldr	r3, [r7, #16]
   8046e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   80472:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80474:	4313      	orrs	r3, r2
   80476:	461a      	mov	r2, r3
   80478:	697b      	ldr	r3, [r7, #20]
   8047a:	4313      	orrs	r3, r2
   8047c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OOV = tmp_reg;
   8047e:	687b      	ldr	r3, [r7, #4]
   80480:	697a      	ldr	r2, [r7, #20]
   80482:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80484:	2201      	movs	r2, #1
   80486:	693b      	ldr	r3, [r7, #16]
   80488:	fa02 f303 	lsl.w	r3, r2, r3
   8048c:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
   8048e:	683b      	ldr	r3, [r7, #0]
   80490:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   80494:	2b00      	cmp	r3, #0
   80496:	d006      	beq.n	804a6 <pwm_channel_init+0x13e>
		p_pwm->PWM_SCM |= channel;
   80498:	687b      	ldr	r3, [r7, #4]
   8049a:	6a1a      	ldr	r2, [r3, #32]
   8049c:	68fb      	ldr	r3, [r7, #12]
   8049e:	431a      	orrs	r2, r3
   804a0:	687b      	ldr	r3, [r7, #4]
   804a2:	621a      	str	r2, [r3, #32]
   804a4:	e006      	b.n	804b4 <pwm_channel_init+0x14c>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   804a6:	687b      	ldr	r3, [r7, #4]
   804a8:	6a1a      	ldr	r2, [r3, #32]
   804aa:	68fb      	ldr	r3, [r7, #12]
   804ac:	43db      	mvns	r3, r3
   804ae:	401a      	ands	r2, r3
   804b0:	687b      	ldr	r3, [r7, #4]
   804b2:	621a      	str	r2, [r3, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   804b4:	683b      	ldr	r3, [r7, #0]
   804b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   804ba:	2b01      	cmp	r3, #1
   804bc:	d109      	bne.n	804d2 <pwm_channel_init+0x16a>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   804be:	687b      	ldr	r3, [r7, #4]
   804c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804c2:	2101      	movs	r1, #1
   804c4:	693a      	ldr	r2, [r7, #16]
   804c6:	fa01 f202 	lsl.w	r2, r1, r2
   804ca:	431a      	orrs	r2, r3
   804cc:	687b      	ldr	r3, [r7, #4]
   804ce:	669a      	str	r2, [r3, #104]	; 0x68
   804d0:	e009      	b.n	804e6 <pwm_channel_init+0x17e>
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   804d2:	687b      	ldr	r3, [r7, #4]
   804d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804d6:	2101      	movs	r1, #1
   804d8:	693a      	ldr	r2, [r7, #16]
   804da:	fa01 f202 	lsl.w	r2, r1, r2
   804de:	43d2      	mvns	r2, r2
   804e0:	401a      	ands	r2, r3
   804e2:	687b      	ldr	r3, [r7, #4]
   804e4:	669a      	str	r2, [r3, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   804e6:	683b      	ldr	r3, [r7, #0]
   804e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   804ec:	2b01      	cmp	r3, #1
   804ee:	d10a      	bne.n	80506 <pwm_channel_init+0x19e>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   804f0:	687b      	ldr	r3, [r7, #4]
   804f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804f4:	2101      	movs	r1, #1
   804f6:	693a      	ldr	r2, [r7, #16]
   804f8:	fa01 f202 	lsl.w	r2, r1, r2
   804fc:	0412      	lsls	r2, r2, #16
   804fe:	431a      	orrs	r2, r3
   80500:	687b      	ldr	r3, [r7, #4]
   80502:	669a      	str	r2, [r3, #104]	; 0x68
   80504:	e00a      	b.n	8051c <pwm_channel_init+0x1b4>
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80506:	687b      	ldr	r3, [r7, #4]
   80508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8050a:	2101      	movs	r1, #1
   8050c:	693a      	ldr	r2, [r7, #16]
   8050e:	fa01 f202 	lsl.w	r2, r1, r2
   80512:	0412      	lsls	r2, r2, #16
   80514:	43d2      	mvns	r2, r2
   80516:	401a      	ands	r2, r3
   80518:	687b      	ldr	r3, [r7, #4]
   8051a:	669a      	str	r2, [r3, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
   8051c:	2300      	movs	r3, #0
   8051e:	60bb      	str	r3, [r7, #8]
#if (SAM3XA)
	if (ch_num < 4) {
   80520:	693b      	ldr	r3, [r7, #16]
   80522:	2b03      	cmp	r3, #3
   80524:	d81d      	bhi.n	80562 <pwm_channel_init+0x1fa>
		ch_num *= 8;
   80526:	693b      	ldr	r3, [r7, #16]
   80528:	00db      	lsls	r3, r3, #3
   8052a:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE1;
   8052c:	687b      	ldr	r3, [r7, #4]
   8052e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   80530:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80532:	22ff      	movs	r2, #255	; 0xff
   80534:	693b      	ldr	r3, [r7, #16]
   80536:	fa02 f303 	lsl.w	r3, r2, r3
   8053a:	43db      	mvns	r3, r3
   8053c:	461a      	mov	r2, r3
   8053e:	68bb      	ldr	r3, [r7, #8]
   80540:	4013      	ands	r3, r2
   80542:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80544:	683b      	ldr	r3, [r7, #0]
   80546:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   8054a:	461a      	mov	r2, r3
   8054c:	693b      	ldr	r3, [r7, #16]
   8054e:	fa02 f303 	lsl.w	r3, r2, r3
   80552:	461a      	mov	r2, r3
   80554:	68bb      	ldr	r3, [r7, #8]
   80556:	4313      	orrs	r3, r2
   80558:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8055a:	687b      	ldr	r3, [r7, #4]
   8055c:	68ba      	ldr	r2, [r7, #8]
   8055e:	66da      	str	r2, [r3, #108]	; 0x6c
   80560:	e01f      	b.n	805a2 <pwm_channel_init+0x23a>
	} else {
		ch_num -= 4;
   80562:	693b      	ldr	r3, [r7, #16]
   80564:	3b04      	subs	r3, #4
   80566:	613b      	str	r3, [r7, #16]
		ch_num *= 8;
   80568:	693b      	ldr	r3, [r7, #16]
   8056a:	00db      	lsls	r3, r3, #3
   8056c:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE2;
   8056e:	687b      	ldr	r3, [r7, #4]
   80570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80572:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80574:	22ff      	movs	r2, #255	; 0xff
   80576:	693b      	ldr	r3, [r7, #16]
   80578:	fa02 f303 	lsl.w	r3, r2, r3
   8057c:	43db      	mvns	r3, r3
   8057e:	461a      	mov	r2, r3
   80580:	68bb      	ldr	r3, [r7, #8]
   80582:	4013      	ands	r3, r2
   80584:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80586:	683b      	ldr	r3, [r7, #0]
   80588:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   8058c:	461a      	mov	r2, r3
   8058e:	693b      	ldr	r3, [r7, #16]
   80590:	fa02 f303 	lsl.w	r3, r2, r3
   80594:	461a      	mov	r2, r3
   80596:	68bb      	ldr	r3, [r7, #8]
   80598:	4313      	orrs	r3, r2
   8059a:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	68ba      	ldr	r2, [r7, #8]
   805a0:	671a      	str	r2, [r3, #112]	; 0x70
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
   805a2:	2300      	movs	r3, #0
}
   805a4:	4618      	mov	r0, r3
   805a6:	371c      	adds	r7, #28
   805a8:	46bd      	mov	sp, r7
   805aa:	bc80      	pop	{r7}
   805ac:	4770      	bx	lr

000805ae <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   805ae:	b480      	push	{r7}
   805b0:	b087      	sub	sp, #28
   805b2:	af00      	add	r7, sp, #0
   805b4:	60f8      	str	r0, [r7, #12]
   805b6:	60b9      	str	r1, [r7, #8]
   805b8:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
   805ba:	68bb      	ldr	r3, [r7, #8]
   805bc:	681b      	ldr	r3, [r3, #0]
   805be:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   805c0:	68bb      	ldr	r3, [r7, #8]
   805c2:	691a      	ldr	r2, [r3, #16]
   805c4:	687b      	ldr	r3, [r7, #4]
   805c6:	429a      	cmp	r2, r3
   805c8:	d202      	bcs.n	805d0 <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
   805ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   805ce:	e00b      	b.n	805e8 <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   805d0:	68bb      	ldr	r3, [r7, #8]
   805d2:	687a      	ldr	r2, [r7, #4]
   805d4:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   805d6:	68fa      	ldr	r2, [r7, #12]
   805d8:	697b      	ldr	r3, [r7, #20]
   805da:	015b      	lsls	r3, r3, #5
   805dc:	4413      	add	r3, r2
   805de:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805e2:	687a      	ldr	r2, [r7, #4]
   805e4:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
   805e6:	2300      	movs	r3, #0
}
   805e8:	4618      	mov	r0, r3
   805ea:	371c      	adds	r7, #28
   805ec:	46bd      	mov	sp, r7
   805ee:	bc80      	pop	{r7}
   805f0:	4770      	bx	lr

000805f2 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
   805f2:	b480      	push	{r7}
   805f4:	b083      	sub	sp, #12
   805f6:	af00      	add	r7, sp, #0
   805f8:	6078      	str	r0, [r7, #4]
   805fa:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
   805fc:	2201      	movs	r2, #1
   805fe:	683b      	ldr	r3, [r7, #0]
   80600:	fa02 f303 	lsl.w	r3, r2, r3
   80604:	461a      	mov	r2, r3
   80606:	687b      	ldr	r3, [r7, #4]
   80608:	605a      	str	r2, [r3, #4]
}
   8060a:	bf00      	nop
   8060c:	370c      	adds	r7, #12
   8060e:	46bd      	mov	sp, r7
   80610:	bc80      	pop	{r7}
   80612:	4770      	bx	lr

00080614 <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
   80614:	b480      	push	{r7}
   80616:	b083      	sub	sp, #12
   80618:	af00      	add	r7, sp, #0
   8061a:	6078      	str	r0, [r7, #4]
   8061c:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
   8061e:	2201      	movs	r2, #1
   80620:	683b      	ldr	r3, [r7, #0]
   80622:	fa02 f303 	lsl.w	r3, r2, r3
   80626:	461a      	mov	r2, r3
   80628:	687b      	ldr	r3, [r7, #4]
   8062a:	609a      	str	r2, [r3, #8]
}
   8062c:	bf00      	nop
   8062e:	370c      	adds	r7, #12
   80630:	46bd      	mov	sp, r7
   80632:	bc80      	pop	{r7}
   80634:	4770      	bx	lr

00080636 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80636:	b480      	push	{r7}
   80638:	b087      	sub	sp, #28
   8063a:	af00      	add	r7, sp, #0
   8063c:	60f8      	str	r0, [r7, #12]
   8063e:	60b9      	str	r1, [r7, #8]
   80640:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80642:	68fa      	ldr	r2, [r7, #12]
   80644:	68bb      	ldr	r3, [r7, #8]
   80646:	019b      	lsls	r3, r3, #6
   80648:	4413      	add	r3, r2
   8064a:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8064c:	697b      	ldr	r3, [r7, #20]
   8064e:	2202      	movs	r2, #2
   80650:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80652:	697b      	ldr	r3, [r7, #20]
   80654:	f04f 32ff 	mov.w	r2, #4294967295
   80658:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   8065a:	697b      	ldr	r3, [r7, #20]
   8065c:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8065e:	697b      	ldr	r3, [r7, #20]
   80660:	687a      	ldr	r2, [r7, #4]
   80662:	605a      	str	r2, [r3, #4]
}
   80664:	bf00      	nop
   80666:	371c      	adds	r7, #28
   80668:	46bd      	mov	sp, r7
   8066a:	bc80      	pop	{r7}
   8066c:	4770      	bx	lr

0008066e <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
   8066e:	b480      	push	{r7}
   80670:	b083      	sub	sp, #12
   80672:	af00      	add	r7, sp, #0
   80674:	6078      	str	r0, [r7, #4]
   80676:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80678:	687a      	ldr	r2, [r7, #4]
   8067a:	683b      	ldr	r3, [r7, #0]
   8067c:	019b      	lsls	r3, r3, #6
   8067e:	4413      	add	r3, r2
   80680:	2205      	movs	r2, #5
   80682:	601a      	str	r2, [r3, #0]
}
   80684:	bf00      	nop
   80686:	370c      	adds	r7, #12
   80688:	46bd      	mov	sp, r7
   8068a:	bc80      	pop	{r7}
   8068c:	4770      	bx	lr

0008068e <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
   8068e:	b480      	push	{r7}
   80690:	b085      	sub	sp, #20
   80692:	af00      	add	r7, sp, #0
   80694:	60f8      	str	r0, [r7, #12]
   80696:	60b9      	str	r1, [r7, #8]
   80698:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   8069a:	68fa      	ldr	r2, [r7, #12]
   8069c:	68bb      	ldr	r3, [r7, #8]
   8069e:	019b      	lsls	r3, r3, #6
   806a0:	4413      	add	r3, r2
   806a2:	331c      	adds	r3, #28
   806a4:	687a      	ldr	r2, [r7, #4]
   806a6:	601a      	str	r2, [r3, #0]
}
   806a8:	bf00      	nop
   806aa:	3714      	adds	r7, #20
   806ac:	46bd      	mov	sp, r7
   806ae:	bc80      	pop	{r7}
   806b0:	4770      	bx	lr

000806b2 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
   806b2:	b480      	push	{r7}
   806b4:	b087      	sub	sp, #28
   806b6:	af00      	add	r7, sp, #0
   806b8:	60f8      	str	r0, [r7, #12]
   806ba:	60b9      	str	r1, [r7, #8]
   806bc:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806be:	68fa      	ldr	r2, [r7, #12]
   806c0:	68bb      	ldr	r3, [r7, #8]
   806c2:	019b      	lsls	r3, r3, #6
   806c4:	4413      	add	r3, r2
   806c6:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   806c8:	697b      	ldr	r3, [r7, #20]
   806ca:	687a      	ldr	r2, [r7, #4]
   806cc:	625a      	str	r2, [r3, #36]	; 0x24
}
   806ce:	bf00      	nop
   806d0:	371c      	adds	r7, #28
   806d2:	46bd      	mov	sp, r7
   806d4:	bc80      	pop	{r7}
   806d6:	4770      	bx	lr

000806d8 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
   806d8:	b480      	push	{r7}
   806da:	b085      	sub	sp, #20
   806dc:	af00      	add	r7, sp, #0
   806de:	6078      	str	r0, [r7, #4]
   806e0:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806e2:	687a      	ldr	r2, [r7, #4]
   806e4:	683b      	ldr	r3, [r7, #0]
   806e6:	019b      	lsls	r3, r3, #6
   806e8:	4413      	add	r3, r2
   806ea:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   806ec:	68fb      	ldr	r3, [r7, #12]
   806ee:	6a1b      	ldr	r3, [r3, #32]
}
   806f0:	4618      	mov	r0, r3
   806f2:	3714      	adds	r7, #20
   806f4:	46bd      	mov	sp, r7
   806f6:	bc80      	pop	{r7}
   806f8:	4770      	bx	lr

000806fa <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   806fa:	b480      	push	{r7}
   806fc:	b087      	sub	sp, #28
   806fe:	af00      	add	r7, sp, #0
   80700:	60f8      	str	r0, [r7, #12]
   80702:	60b9      	str	r1, [r7, #8]
   80704:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   80706:	68bb      	ldr	r3, [r7, #8]
   80708:	085a      	lsrs	r2, r3, #1
   8070a:	687b      	ldr	r3, [r7, #4]
   8070c:	441a      	add	r2, r3
   8070e:	68bb      	ldr	r3, [r7, #8]
   80710:	fbb2 f3f3 	udiv	r3, r2, r3
   80714:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   80716:	697b      	ldr	r3, [r7, #20]
   80718:	2b03      	cmp	r3, #3
   8071a:	d903      	bls.n	80724 <usart_set_spi_master_baudrate+0x2a>
   8071c:	697b      	ldr	r3, [r7, #20]
   8071e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   80722:	d301      	bcc.n	80728 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   80724:	2301      	movs	r3, #1
   80726:	e003      	b.n	80730 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   80728:	68fb      	ldr	r3, [r7, #12]
   8072a:	697a      	ldr	r2, [r7, #20]
   8072c:	621a      	str	r2, [r3, #32]

	return 0;
   8072e:	2300      	movs	r3, #0
}
   80730:	4618      	mov	r0, r3
   80732:	371c      	adds	r7, #28
   80734:	46bd      	mov	sp, r7
   80736:	bc80      	pop	{r7}
   80738:	4770      	bx	lr
	...

0008073c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8073c:	b580      	push	{r7, lr}
   8073e:	b082      	sub	sp, #8
   80740:	af00      	add	r7, sp, #0
   80742:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   80744:	6878      	ldr	r0, [r7, #4]
   80746:	4b0d      	ldr	r3, [pc, #52]	; (8077c <usart_reset+0x40>)
   80748:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8074a:	687b      	ldr	r3, [r7, #4]
   8074c:	2200      	movs	r2, #0
   8074e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   80750:	687b      	ldr	r3, [r7, #4]
   80752:	2200      	movs	r2, #0
   80754:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80756:	687b      	ldr	r3, [r7, #4]
   80758:	2200      	movs	r2, #0
   8075a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8075c:	6878      	ldr	r0, [r7, #4]
   8075e:	4b08      	ldr	r3, [pc, #32]	; (80780 <usart_reset+0x44>)
   80760:	4798      	blx	r3
	usart_reset_rx(p_usart);
   80762:	6878      	ldr	r0, [r7, #4]
   80764:	4b07      	ldr	r3, [pc, #28]	; (80784 <usart_reset+0x48>)
   80766:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   80768:	6878      	ldr	r0, [r7, #4]
   8076a:	4b07      	ldr	r3, [pc, #28]	; (80788 <usart_reset+0x4c>)
   8076c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8076e:	6878      	ldr	r0, [r7, #4]
   80770:	4b06      	ldr	r3, [pc, #24]	; (8078c <usart_reset+0x50>)
   80772:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   80774:	bf00      	nop
   80776:	3708      	adds	r7, #8
   80778:	46bd      	mov	sp, r7
   8077a:	bd80      	pop	{r7, pc}
   8077c:	00080999 	.word	0x00080999
   80780:	000808d1 	.word	0x000808d1
   80784:	00080919 	.word	0x00080919
   80788:	00080931 	.word	0x00080931
   8078c:	0008094b 	.word	0x0008094b

00080790 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   80790:	b580      	push	{r7, lr}
   80792:	b084      	sub	sp, #16
   80794:	af00      	add	r7, sp, #0
   80796:	60f8      	str	r0, [r7, #12]
   80798:	60b9      	str	r1, [r7, #8]
   8079a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   8079c:	68f8      	ldr	r0, [r7, #12]
   8079e:	4b3d      	ldr	r3, [pc, #244]	; (80894 <usart_init_spi_master+0x104>)
   807a0:	4798      	blx	r3

	ul_reg_val = 0;
   807a2:	4b3d      	ldr	r3, [pc, #244]	; (80898 <usart_init_spi_master+0x108>)
   807a4:	2200      	movs	r2, #0
   807a6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   807a8:	68bb      	ldr	r3, [r7, #8]
   807aa:	2b00      	cmp	r3, #0
   807ac:	d00d      	beq.n	807ca <usart_init_spi_master+0x3a>
   807ae:	68bb      	ldr	r3, [r7, #8]
   807b0:	689b      	ldr	r3, [r3, #8]
   807b2:	2b03      	cmp	r3, #3
   807b4:	d809      	bhi.n	807ca <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   807b6:	68bb      	ldr	r3, [r7, #8]
   807b8:	681b      	ldr	r3, [r3, #0]
   807ba:	687a      	ldr	r2, [r7, #4]
   807bc:	4619      	mov	r1, r3
   807be:	68f8      	ldr	r0, [r7, #12]
   807c0:	4b36      	ldr	r3, [pc, #216]	; (8089c <usart_init_spi_master+0x10c>)
   807c2:	4798      	blx	r3
   807c4:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   807c6:	2b00      	cmp	r3, #0
   807c8:	d001      	beq.n	807ce <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   807ca:	2301      	movs	r3, #1
   807cc:	e05d      	b.n	8088a <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   807ce:	68bb      	ldr	r3, [r7, #8]
   807d0:	685a      	ldr	r2, [r3, #4]
   807d2:	4b31      	ldr	r3, [pc, #196]	; (80898 <usart_init_spi_master+0x108>)
   807d4:	681b      	ldr	r3, [r3, #0]
   807d6:	4313      	orrs	r3, r2
   807d8:	4a2f      	ldr	r2, [pc, #188]	; (80898 <usart_init_spi_master+0x108>)
   807da:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   807dc:	68bb      	ldr	r3, [r7, #8]
   807de:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   807e0:	4b2d      	ldr	r3, [pc, #180]	; (80898 <usart_init_spi_master+0x108>)
   807e2:	681b      	ldr	r3, [r3, #0]
   807e4:	4313      	orrs	r3, r2
   807e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   807ea:	f043 030e 	orr.w	r3, r3, #14
   807ee:	4a2a      	ldr	r2, [pc, #168]	; (80898 <usart_init_spi_master+0x108>)
   807f0:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   807f2:	68bb      	ldr	r3, [r7, #8]
   807f4:	689b      	ldr	r3, [r3, #8]
   807f6:	2b03      	cmp	r3, #3
   807f8:	d83e      	bhi.n	80878 <usart_init_spi_master+0xe8>
   807fa:	a201      	add	r2, pc, #4	; (adr r2, 80800 <usart_init_spi_master+0x70>)
   807fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80800:	00080811 	.word	0x00080811
   80804:	0008082b 	.word	0x0008082b
   80808:	00080845 	.word	0x00080845
   8080c:	0008085f 	.word	0x0008085f
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   80810:	4b21      	ldr	r3, [pc, #132]	; (80898 <usart_init_spi_master+0x108>)
   80812:	681b      	ldr	r3, [r3, #0]
   80814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80818:	4a1f      	ldr	r2, [pc, #124]	; (80898 <usart_init_spi_master+0x108>)
   8081a:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8081c:	4b1e      	ldr	r3, [pc, #120]	; (80898 <usart_init_spi_master+0x108>)
   8081e:	681b      	ldr	r3, [r3, #0]
   80820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80824:	4a1c      	ldr	r2, [pc, #112]	; (80898 <usart_init_spi_master+0x108>)
   80826:	6013      	str	r3, [r2, #0]
		break;
   80828:	e027      	b.n	8087a <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8082a:	4b1b      	ldr	r3, [pc, #108]	; (80898 <usart_init_spi_master+0x108>)
   8082c:	681b      	ldr	r3, [r3, #0]
   8082e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80832:	4a19      	ldr	r2, [pc, #100]	; (80898 <usart_init_spi_master+0x108>)
   80834:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   80836:	4b18      	ldr	r3, [pc, #96]	; (80898 <usart_init_spi_master+0x108>)
   80838:	681b      	ldr	r3, [r3, #0]
   8083a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8083e:	4a16      	ldr	r2, [pc, #88]	; (80898 <usart_init_spi_master+0x108>)
   80840:	6013      	str	r3, [r2, #0]
		break;
   80842:	e01a      	b.n	8087a <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   80844:	4b14      	ldr	r3, [pc, #80]	; (80898 <usart_init_spi_master+0x108>)
   80846:	681b      	ldr	r3, [r3, #0]
   80848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8084c:	4a12      	ldr	r2, [pc, #72]	; (80898 <usart_init_spi_master+0x108>)
   8084e:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   80850:	4b11      	ldr	r3, [pc, #68]	; (80898 <usart_init_spi_master+0x108>)
   80852:	681b      	ldr	r3, [r3, #0]
   80854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80858:	4a0f      	ldr	r2, [pc, #60]	; (80898 <usart_init_spi_master+0x108>)
   8085a:	6013      	str	r3, [r2, #0]
		break;
   8085c:	e00d      	b.n	8087a <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8085e:	4b0e      	ldr	r3, [pc, #56]	; (80898 <usart_init_spi_master+0x108>)
   80860:	681b      	ldr	r3, [r3, #0]
   80862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80866:	4a0c      	ldr	r2, [pc, #48]	; (80898 <usart_init_spi_master+0x108>)
   80868:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8086a:	4b0b      	ldr	r3, [pc, #44]	; (80898 <usart_init_spi_master+0x108>)
   8086c:	681b      	ldr	r3, [r3, #0]
   8086e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80872:	4a09      	ldr	r2, [pc, #36]	; (80898 <usart_init_spi_master+0x108>)
   80874:	6013      	str	r3, [r2, #0]
		break;
   80876:	e000      	b.n	8087a <usart_init_spi_master+0xea>

	default:
		break;
   80878:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   8087a:	68fb      	ldr	r3, [r7, #12]
   8087c:	685a      	ldr	r2, [r3, #4]
   8087e:	4b06      	ldr	r3, [pc, #24]	; (80898 <usart_init_spi_master+0x108>)
   80880:	681b      	ldr	r3, [r3, #0]
   80882:	431a      	orrs	r2, r3
   80884:	68fb      	ldr	r3, [r7, #12]
   80886:	605a      	str	r2, [r3, #4]

	return 0;
   80888:	2300      	movs	r3, #0
}
   8088a:	4618      	mov	r0, r3
   8088c:	3710      	adds	r7, #16
   8088e:	46bd      	mov	sp, r7
   80890:	bd80      	pop	{r7, pc}
   80892:	bf00      	nop
   80894:	0008073d 	.word	0x0008073d
   80898:	20070b6c 	.word	0x20070b6c
   8089c:	000806fb 	.word	0x000806fb

000808a0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   808a0:	b480      	push	{r7}
   808a2:	b083      	sub	sp, #12
   808a4:	af00      	add	r7, sp, #0
   808a6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   808a8:	687b      	ldr	r3, [r7, #4]
   808aa:	2240      	movs	r2, #64	; 0x40
   808ac:	601a      	str	r2, [r3, #0]
}
   808ae:	bf00      	nop
   808b0:	370c      	adds	r7, #12
   808b2:	46bd      	mov	sp, r7
   808b4:	bc80      	pop	{r7}
   808b6:	4770      	bx	lr

000808b8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   808b8:	b480      	push	{r7}
   808ba:	b083      	sub	sp, #12
   808bc:	af00      	add	r7, sp, #0
   808be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   808c0:	687b      	ldr	r3, [r7, #4]
   808c2:	2280      	movs	r2, #128	; 0x80
   808c4:	601a      	str	r2, [r3, #0]
}
   808c6:	bf00      	nop
   808c8:	370c      	adds	r7, #12
   808ca:	46bd      	mov	sp, r7
   808cc:	bc80      	pop	{r7}
   808ce:	4770      	bx	lr

000808d0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   808d0:	b480      	push	{r7}
   808d2:	b083      	sub	sp, #12
   808d4:	af00      	add	r7, sp, #0
   808d6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   808d8:	687b      	ldr	r3, [r7, #4]
   808da:	2288      	movs	r2, #136	; 0x88
   808dc:	601a      	str	r2, [r3, #0]
}
   808de:	bf00      	nop
   808e0:	370c      	adds	r7, #12
   808e2:	46bd      	mov	sp, r7
   808e4:	bc80      	pop	{r7}
   808e6:	4770      	bx	lr

000808e8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   808e8:	b480      	push	{r7}
   808ea:	b083      	sub	sp, #12
   808ec:	af00      	add	r7, sp, #0
   808ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   808f0:	687b      	ldr	r3, [r7, #4]
   808f2:	2210      	movs	r2, #16
   808f4:	601a      	str	r2, [r3, #0]
}
   808f6:	bf00      	nop
   808f8:	370c      	adds	r7, #12
   808fa:	46bd      	mov	sp, r7
   808fc:	bc80      	pop	{r7}
   808fe:	4770      	bx	lr

00080900 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   80900:	b480      	push	{r7}
   80902:	b083      	sub	sp, #12
   80904:	af00      	add	r7, sp, #0
   80906:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   80908:	687b      	ldr	r3, [r7, #4]
   8090a:	2220      	movs	r2, #32
   8090c:	601a      	str	r2, [r3, #0]
}
   8090e:	bf00      	nop
   80910:	370c      	adds	r7, #12
   80912:	46bd      	mov	sp, r7
   80914:	bc80      	pop	{r7}
   80916:	4770      	bx	lr

00080918 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   80918:	b480      	push	{r7}
   8091a:	b083      	sub	sp, #12
   8091c:	af00      	add	r7, sp, #0
   8091e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80920:	687b      	ldr	r3, [r7, #4]
   80922:	2224      	movs	r2, #36	; 0x24
   80924:	601a      	str	r2, [r3, #0]
}
   80926:	bf00      	nop
   80928:	370c      	adds	r7, #12
   8092a:	46bd      	mov	sp, r7
   8092c:	bc80      	pop	{r7}
   8092e:	4770      	bx	lr

00080930 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   80930:	b480      	push	{r7}
   80932:	b083      	sub	sp, #12
   80934:	af00      	add	r7, sp, #0
   80936:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   80938:	687b      	ldr	r3, [r7, #4]
   8093a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8093e:	601a      	str	r2, [r3, #0]
}
   80940:	bf00      	nop
   80942:	370c      	adds	r7, #12
   80944:	46bd      	mov	sp, r7
   80946:	bc80      	pop	{r7}
   80948:	4770      	bx	lr

0008094a <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   8094a:	b480      	push	{r7}
   8094c:	b083      	sub	sp, #12
   8094e:	af00      	add	r7, sp, #0
   80950:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   80952:	687b      	ldr	r3, [r7, #4]
   80954:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80958:	601a      	str	r2, [r3, #0]
}
   8095a:	bf00      	nop
   8095c:	370c      	adds	r7, #12
   8095e:	46bd      	mov	sp, r7
   80960:	bc80      	pop	{r7}
   80962:	4770      	bx	lr

00080964 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
   80964:	b480      	push	{r7}
   80966:	b083      	sub	sp, #12
   80968:	af00      	add	r7, sp, #0
   8096a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
   8096c:	687b      	ldr	r3, [r7, #4]
   8096e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   80972:	601a      	str	r2, [r3, #0]
}
   80974:	bf00      	nop
   80976:	370c      	adds	r7, #12
   80978:	46bd      	mov	sp, r7
   8097a:	bc80      	pop	{r7}
   8097c:	4770      	bx	lr

0008097e <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   8097e:	b480      	push	{r7}
   80980:	b083      	sub	sp, #12
   80982:	af00      	add	r7, sp, #0
   80984:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   80986:	687b      	ldr	r3, [r7, #4]
   80988:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8098c:	601a      	str	r2, [r3, #0]
}
   8098e:	bf00      	nop
   80990:	370c      	adds	r7, #12
   80992:	46bd      	mov	sp, r7
   80994:	bc80      	pop	{r7}
   80996:	4770      	bx	lr

00080998 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   80998:	b480      	push	{r7}
   8099a:	b083      	sub	sp, #12
   8099c:	af00      	add	r7, sp, #0
   8099e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   809a0:	687b      	ldr	r3, [r7, #4]
   809a2:	4a04      	ldr	r2, [pc, #16]	; (809b4 <usart_disable_writeprotect+0x1c>)
   809a4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   809a8:	bf00      	nop
   809aa:	370c      	adds	r7, #12
   809ac:	46bd      	mov	sp, r7
   809ae:	bc80      	pop	{r7}
   809b0:	4770      	bx	lr
   809b2:	bf00      	nop
   809b4:	55534100 	.word	0x55534100

000809b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   809b8:	b480      	push	{r7}
   809ba:	b083      	sub	sp, #12
   809bc:	af00      	add	r7, sp, #0
   809be:	4603      	mov	r3, r0
   809c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   809c2:	4908      	ldr	r1, [pc, #32]	; (809e4 <NVIC_EnableIRQ+0x2c>)
   809c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   809c8:	095b      	lsrs	r3, r3, #5
   809ca:	79fa      	ldrb	r2, [r7, #7]
   809cc:	f002 021f 	and.w	r2, r2, #31
   809d0:	2001      	movs	r0, #1
   809d2:	fa00 f202 	lsl.w	r2, r0, r2
   809d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   809da:	bf00      	nop
   809dc:	370c      	adds	r7, #12
   809de:	46bd      	mov	sp, r7
   809e0:	bc80      	pop	{r7}
   809e2:	4770      	bx	lr
   809e4:	e000e100 	.word	0xe000e100

000809e8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   809e8:	b480      	push	{r7}
   809ea:	b083      	sub	sp, #12
   809ec:	af00      	add	r7, sp, #0
   809ee:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   809f0:	687b      	ldr	r3, [r7, #4]
   809f2:	2b07      	cmp	r3, #7
   809f4:	d825      	bhi.n	80a42 <osc_get_rate+0x5a>
   809f6:	a201      	add	r2, pc, #4	; (adr r2, 809fc <osc_get_rate+0x14>)
   809f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   809fc:	00080a1d 	.word	0x00080a1d
   80a00:	00080a23 	.word	0x00080a23
   80a04:	00080a29 	.word	0x00080a29
   80a08:	00080a2f 	.word	0x00080a2f
   80a0c:	00080a33 	.word	0x00080a33
   80a10:	00080a37 	.word	0x00080a37
   80a14:	00080a3b 	.word	0x00080a3b
   80a18:	00080a3f 	.word	0x00080a3f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80a1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80a20:	e010      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80a26:	e00d      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80a2c:	e00a      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80a2e:	4b08      	ldr	r3, [pc, #32]	; (80a50 <osc_get_rate+0x68>)
   80a30:	e008      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80a32:	4b08      	ldr	r3, [pc, #32]	; (80a54 <osc_get_rate+0x6c>)
   80a34:	e006      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80a36:	4b08      	ldr	r3, [pc, #32]	; (80a58 <osc_get_rate+0x70>)
   80a38:	e004      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80a3a:	4b07      	ldr	r3, [pc, #28]	; (80a58 <osc_get_rate+0x70>)
   80a3c:	e002      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80a3e:	4b06      	ldr	r3, [pc, #24]	; (80a58 <osc_get_rate+0x70>)
   80a40:	e000      	b.n	80a44 <osc_get_rate+0x5c>
	}

	return 0;
   80a42:	2300      	movs	r3, #0
}
   80a44:	4618      	mov	r0, r3
   80a46:	370c      	adds	r7, #12
   80a48:	46bd      	mov	sp, r7
   80a4a:	bc80      	pop	{r7}
   80a4c:	4770      	bx	lr
   80a4e:	bf00      	nop
   80a50:	003d0900 	.word	0x003d0900
   80a54:	007a1200 	.word	0x007a1200
   80a58:	00b71b00 	.word	0x00b71b00

00080a5c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80a5c:	b580      	push	{r7, lr}
   80a5e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80a60:	2006      	movs	r0, #6
   80a62:	4b04      	ldr	r3, [pc, #16]	; (80a74 <sysclk_get_main_hz+0x18>)
   80a64:	4798      	blx	r3
   80a66:	4602      	mov	r2, r0
   80a68:	4613      	mov	r3, r2
   80a6a:	00db      	lsls	r3, r3, #3
   80a6c:	1a9b      	subs	r3, r3, r2
   80a6e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80a70:	4618      	mov	r0, r3
   80a72:	bd80      	pop	{r7, pc}
   80a74:	000809e9 	.word	0x000809e9

00080a78 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   80a78:	b580      	push	{r7, lr}
   80a7a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80a7c:	4b02      	ldr	r3, [pc, #8]	; (80a88 <sysclk_get_peripheral_hz+0x10>)
   80a7e:	4798      	blx	r3
   80a80:	4603      	mov	r3, r0
   80a82:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80a84:	4618      	mov	r0, r3
   80a86:	bd80      	pop	{r7, pc}
   80a88:	00080a5d 	.word	0x00080a5d

00080a8c <spi_init>:
sensor_to_motor_t stm;

uint8_t sens_buf[sizeof(stm)];

void spi_init(void)
{
   80a8c:	b580      	push	{r7, lr}
   80a8e:	af00      	add	r7, sp, #0
    configure_dmac();
   80a90:	4b02      	ldr	r3, [pc, #8]	; (80a9c <spi_init+0x10>)
   80a92:	4798      	blx	r3
    spi_master_initialize();
   80a94:	4b02      	ldr	r3, [pc, #8]	; (80aa0 <spi_init+0x14>)
   80a96:	4798      	blx	r3
}
   80a98:	bf00      	nop
   80a9a:	bd80      	pop	{r7, pc}
   80a9c:	00080bb9 	.word	0x00080bb9
   80aa0:	00080aa5 	.word	0x00080aa5

00080aa4 <spi_master_initialize>:

void spi_master_initialize(void)
{
   80aa4:	b590      	push	{r4, r7, lr}
   80aa6:	b085      	sub	sp, #20
   80aa8:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   80aaa:	2101      	movs	r1, #1
   80aac:	4810      	ldr	r0, [pc, #64]	; (80af0 <spi_master_initialize+0x4c>)
   80aae:	4b11      	ldr	r3, [pc, #68]	; (80af4 <spi_master_initialize+0x50>)
   80ab0:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   80ab2:	2100      	movs	r1, #0
   80ab4:	480e      	ldr	r0, [pc, #56]	; (80af0 <spi_master_initialize+0x4c>)
   80ab6:	4b0f      	ldr	r3, [pc, #60]	; (80af4 <spi_master_initialize+0x50>)
   80ab8:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   80aba:	2012      	movs	r0, #18
   80abc:	4b0e      	ldr	r3, [pc, #56]	; (80af8 <spi_master_initialize+0x54>)
   80abe:	4798      	blx	r3
    usart_spi_disable(USART1);
   80ac0:	480e      	ldr	r0, [pc, #56]	; (80afc <spi_master_initialize+0x58>)
   80ac2:	4b0f      	ldr	r3, [pc, #60]	; (80b00 <spi_master_initialize+0x5c>)
   80ac4:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   80ac6:	4b0f      	ldr	r3, [pc, #60]	; (80b04 <spi_master_initialize+0x60>)
   80ac8:	463c      	mov	r4, r7
   80aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   80acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   80ad0:	4b0d      	ldr	r3, [pc, #52]	; (80b08 <spi_master_initialize+0x64>)
   80ad2:	4798      	blx	r3
   80ad4:	4602      	mov	r2, r0
   80ad6:	463b      	mov	r3, r7
   80ad8:	4619      	mov	r1, r3
   80ada:	4808      	ldr	r0, [pc, #32]	; (80afc <spi_master_initialize+0x58>)
   80adc:	4b0b      	ldr	r3, [pc, #44]	; (80b0c <spi_master_initialize+0x68>)
   80ade:	4798      	blx	r3
    usart_spi_enable(USART1);
   80ae0:	4806      	ldr	r0, [pc, #24]	; (80afc <spi_master_initialize+0x58>)
   80ae2:	4b0b      	ldr	r3, [pc, #44]	; (80b10 <spi_master_initialize+0x6c>)
   80ae4:	4798      	blx	r3
}
   80ae6:	bf00      	nop
   80ae8:	3714      	adds	r7, #20
   80aea:	46bd      	mov	sp, r7
   80aec:	bd90      	pop	{r4, r7, pc}
   80aee:	bf00      	nop
   80af0:	400c4000 	.word	0x400c4000
   80af4:	00083753 	.word	0x00083753
   80af8:	00083b11 	.word	0x00083b11
   80afc:	4009c000 	.word	0x4009c000
   80b00:	00080185 	.word	0x00080185
   80b04:	000897b4 	.word	0x000897b4
   80b08:	00080a79 	.word	0x00080a79
   80b0c:	00080791 	.word	0x00080791
   80b10:	00080161 	.word	0x00080161

00080b14 <spi_master_transfer>:

void spi_master_transfer(void *p_buf, uint32_t ul_size)
{
   80b14:	b580      	push	{r7, lr}
   80b16:	b088      	sub	sp, #32
   80b18:	af00      	add	r7, sp, #0
   80b1a:	6078      	str	r0, [r7, #4]
   80b1c:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    usart_spi_force_chip_select(USART1);
   80b1e:	481c      	ldr	r0, [pc, #112]	; (80b90 <spi_master_transfer+0x7c>)
   80b20:	4b1c      	ldr	r3, [pc, #112]	; (80b94 <spi_master_transfer+0x80>)
   80b22:	4798      	blx	r3

    dmac_channel_disable(DMAC, 1);
   80b24:	2101      	movs	r1, #1
   80b26:	481c      	ldr	r0, [pc, #112]	; (80b98 <spi_master_transfer+0x84>)
   80b28:	4b1c      	ldr	r3, [pc, #112]	; (80b9c <spi_master_transfer+0x88>)
   80b2a:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   80b2c:	687b      	ldr	r3, [r7, #4]
   80b2e:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & USART1->US_THR;
   80b30:	4b1b      	ldr	r3, [pc, #108]	; (80ba0 <spi_master_transfer+0x8c>)
   80b32:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80b34:	683b      	ldr	r3, [r7, #0]
   80b36:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80b38:	4b1a      	ldr	r3, [pc, #104]	; (80ba4 <spi_master_transfer+0x90>)
   80b3a:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80b3c:	2300      	movs	r3, #0
   80b3e:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   80b40:	f107 030c 	add.w	r3, r7, #12
   80b44:	461a      	mov	r2, r3
   80b46:	2101      	movs	r1, #1
   80b48:	4813      	ldr	r0, [pc, #76]	; (80b98 <spi_master_transfer+0x84>)
   80b4a:	4b17      	ldr	r3, [pc, #92]	; (80ba8 <spi_master_transfer+0x94>)
   80b4c:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   80b4e:	2101      	movs	r1, #1
   80b50:	4811      	ldr	r0, [pc, #68]	; (80b98 <spi_master_transfer+0x84>)
   80b52:	4b16      	ldr	r3, [pc, #88]	; (80bac <spi_master_transfer+0x98>)
   80b54:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   80b56:	2100      	movs	r1, #0
   80b58:	480f      	ldr	r0, [pc, #60]	; (80b98 <spi_master_transfer+0x84>)
   80b5a:	4b10      	ldr	r3, [pc, #64]	; (80b9c <spi_master_transfer+0x88>)
   80b5c:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & USART1->US_RHR;
   80b5e:	4b14      	ldr	r3, [pc, #80]	; (80bb0 <spi_master_transfer+0x9c>)
   80b60:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80b62:	687b      	ldr	r3, [r7, #4]
   80b64:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80b66:	683b      	ldr	r3, [r7, #0]
   80b68:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   80b6a:	4b12      	ldr	r3, [pc, #72]	; (80bb4 <spi_master_transfer+0xa0>)
   80b6c:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80b6e:	2300      	movs	r3, #0
   80b70:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   80b72:	f107 030c 	add.w	r3, r7, #12
   80b76:	461a      	mov	r2, r3
   80b78:	2100      	movs	r1, #0
   80b7a:	4807      	ldr	r0, [pc, #28]	; (80b98 <spi_master_transfer+0x84>)
   80b7c:	4b0a      	ldr	r3, [pc, #40]	; (80ba8 <spi_master_transfer+0x94>)
   80b7e:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   80b80:	2100      	movs	r1, #0
   80b82:	4805      	ldr	r0, [pc, #20]	; (80b98 <spi_master_transfer+0x84>)
   80b84:	4b09      	ldr	r3, [pc, #36]	; (80bac <spi_master_transfer+0x98>)
   80b86:	4798      	blx	r3
}
   80b88:	bf00      	nop
   80b8a:	3720      	adds	r7, #32
   80b8c:	46bd      	mov	sp, r7
   80b8e:	bd80      	pop	{r7, pc}
   80b90:	4009c000 	.word	0x4009c000
   80b94:	00080965 	.word	0x00080965
   80b98:	400c4000 	.word	0x400c4000
   80b9c:	00083753 	.word	0x00083753
   80ba0:	4009c01c 	.word	0x4009c01c
   80ba4:	20310000 	.word	0x20310000
   80ba8:	0008386d 	.word	0x0008386d
   80bac:	00083735 	.word	0x00083735
   80bb0:	4009c018 	.word	0x4009c018
   80bb4:	02510000 	.word	0x02510000

00080bb8 <configure_dmac>:

void configure_dmac(void)
{
   80bb8:	b580      	push	{r7, lr}
   80bba:	b082      	sub	sp, #8
   80bbc:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   80bbe:	2027      	movs	r0, #39	; 0x27
   80bc0:	4b18      	ldr	r3, [pc, #96]	; (80c24 <configure_dmac+0x6c>)
   80bc2:	4798      	blx	r3
    dmac_init(DMAC);
   80bc4:	4818      	ldr	r0, [pc, #96]	; (80c28 <configure_dmac+0x70>)
   80bc6:	4b19      	ldr	r3, [pc, #100]	; (80c2c <configure_dmac+0x74>)
   80bc8:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   80bca:	2110      	movs	r1, #16
   80bcc:	4816      	ldr	r0, [pc, #88]	; (80c28 <configure_dmac+0x70>)
   80bce:	4b18      	ldr	r3, [pc, #96]	; (80c30 <configure_dmac+0x78>)
   80bd0:	4798      	blx	r3
    dmac_enable(DMAC);
   80bd2:	4815      	ldr	r0, [pc, #84]	; (80c28 <configure_dmac+0x70>)
   80bd4:	4b17      	ldr	r3, [pc, #92]	; (80c34 <configure_dmac+0x7c>)
   80bd6:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80bd8:	2300      	movs	r3, #0
   80bda:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80bdc:	687b      	ldr	r3, [r7, #4]
   80bde:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80be2:	f043 030e 	orr.w	r3, r3, #14
   80be6:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   80be8:	687a      	ldr	r2, [r7, #4]
   80bea:	2100      	movs	r1, #0
   80bec:	480e      	ldr	r0, [pc, #56]	; (80c28 <configure_dmac+0x70>)
   80bee:	4b12      	ldr	r3, [pc, #72]	; (80c38 <configure_dmac+0x80>)
   80bf0:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80bf2:	2300      	movs	r3, #0
   80bf4:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80bf6:	687b      	ldr	r3, [r7, #4]
   80bf8:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   80bfc:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   80c00:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   80c02:	687a      	ldr	r2, [r7, #4]
   80c04:	2101      	movs	r1, #1
   80c06:	4808      	ldr	r0, [pc, #32]	; (80c28 <configure_dmac+0x70>)
   80c08:	4b0b      	ldr	r3, [pc, #44]	; (80c38 <configure_dmac+0x80>)
   80c0a:	4798      	blx	r3
    ul_cfg = 0;
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
    #endif
    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   80c0c:	2027      	movs	r0, #39	; 0x27
   80c0e:	4b0b      	ldr	r3, [pc, #44]	; (80c3c <configure_dmac+0x84>)
   80c10:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   80c12:	2101      	movs	r1, #1
   80c14:	4804      	ldr	r0, [pc, #16]	; (80c28 <configure_dmac+0x70>)
   80c16:	4b0a      	ldr	r3, [pc, #40]	; (80c40 <configure_dmac+0x88>)
   80c18:	4798      	blx	r3
}
   80c1a:	bf00      	nop
   80c1c:	3708      	adds	r7, #8
   80c1e:	46bd      	mov	sp, r7
   80c20:	bd80      	pop	{r7, pc}
   80c22:	bf00      	nop
   80c24:	00083b11 	.word	0x00083b11
   80c28:	400c4000 	.word	0x400c4000
   80c2c:	0008368d 	.word	0x0008368d
   80c30:	000836a9 	.word	0x000836a9
   80c34:	000836cf 	.word	0x000836cf
   80c38:	00083843 	.word	0x00083843
   80c3c:	000809b9 	.word	0x000809b9
   80c40:	00083705 	.word	0x00083705

00080c44 <DMAC_Handler>:

void DMAC_Handler(void)
{
   80c44:	b580      	push	{r7, lr}
   80c46:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   80c48:	480a      	ldr	r0, [pc, #40]	; (80c74 <DMAC_Handler+0x30>)
   80c4a:	4b0b      	ldr	r3, [pc, #44]	; (80c78 <DMAC_Handler+0x34>)
   80c4c:	4798      	blx	r3
   80c4e:	4602      	mov	r2, r0
   80c50:	4b0a      	ldr	r3, [pc, #40]	; (80c7c <DMAC_Handler+0x38>)
   80c52:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   80c54:	4b09      	ldr	r3, [pc, #36]	; (80c7c <DMAC_Handler+0x38>)
   80c56:	681b      	ldr	r3, [r3, #0]
   80c58:	f003 0301 	and.w	r3, r3, #1
   80c5c:	2b00      	cmp	r3, #0
   80c5e:	d007      	beq.n	80c70 <DMAC_Handler+0x2c>
    {
        usart_spi_release_chip_select(USART1);
   80c60:	4807      	ldr	r0, [pc, #28]	; (80c80 <DMAC_Handler+0x3c>)
   80c62:	4b08      	ldr	r3, [pc, #32]	; (80c84 <DMAC_Handler+0x40>)
   80c64:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   80c66:	2210      	movs	r2, #16
   80c68:	4907      	ldr	r1, [pc, #28]	; (80c88 <DMAC_Handler+0x44>)
   80c6a:	4808      	ldr	r0, [pc, #32]	; (80c8c <DMAC_Handler+0x48>)
   80c6c:	4b08      	ldr	r3, [pc, #32]	; (80c90 <DMAC_Handler+0x4c>)
   80c6e:	4798      	blx	r3
    }
}
   80c70:	bf00      	nop
   80c72:	bd80      	pop	{r7, pc}
   80c74:	400c4000 	.word	0x400c4000
   80c78:	0008371f 	.word	0x0008371f
   80c7c:	20070b70 	.word	0x20070b70
   80c80:	4009c000 	.word	0x4009c000
   80c84:	0008097f 	.word	0x0008097f
   80c88:	20070e08 	.word	0x20070e08
   80c8c:	20070e20 	.word	0x20070e20
   80c90:	000856d1 	.word	0x000856d1

00080c94 <NVIC_EnableIRQ>:
{
   80c94:	b480      	push	{r7}
   80c96:	b083      	sub	sp, #12
   80c98:	af00      	add	r7, sp, #0
   80c9a:	4603      	mov	r3, r0
   80c9c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80c9e:	4908      	ldr	r1, [pc, #32]	; (80cc0 <NVIC_EnableIRQ+0x2c>)
   80ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80ca4:	095b      	lsrs	r3, r3, #5
   80ca6:	79fa      	ldrb	r2, [r7, #7]
   80ca8:	f002 021f 	and.w	r2, r2, #31
   80cac:	2001      	movs	r0, #1
   80cae:	fa00 f202 	lsl.w	r2, r0, r2
   80cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80cb6:	bf00      	nop
   80cb8:	370c      	adds	r7, #12
   80cba:	46bd      	mov	sp, r7
   80cbc:	bc80      	pop	{r7}
   80cbe:	4770      	bx	lr
   80cc0:	e000e100 	.word	0xe000e100

00080cc4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80cc4:	b480      	push	{r7}
   80cc6:	b083      	sub	sp, #12
   80cc8:	af00      	add	r7, sp, #0
   80cca:	4603      	mov	r3, r0
   80ccc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80cce:	4909      	ldr	r1, [pc, #36]	; (80cf4 <NVIC_ClearPendingIRQ+0x30>)
   80cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80cd4:	095b      	lsrs	r3, r3, #5
   80cd6:	79fa      	ldrb	r2, [r7, #7]
   80cd8:	f002 021f 	and.w	r2, r2, #31
   80cdc:	2001      	movs	r0, #1
   80cde:	fa00 f202 	lsl.w	r2, r0, r2
   80ce2:	3360      	adds	r3, #96	; 0x60
   80ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80ce8:	bf00      	nop
   80cea:	370c      	adds	r7, #12
   80cec:	46bd      	mov	sp, r7
   80cee:	bc80      	pop	{r7}
   80cf0:	4770      	bx	lr
   80cf2:	bf00      	nop
   80cf4:	e000e100 	.word	0xe000e100

00080cf8 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80cf8:	b480      	push	{r7}
   80cfa:	b083      	sub	sp, #12
   80cfc:	af00      	add	r7, sp, #0
   80cfe:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80d00:	687b      	ldr	r3, [r7, #4]
   80d02:	2208      	movs	r2, #8
   80d04:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80d06:	687b      	ldr	r3, [r7, #4]
   80d08:	2220      	movs	r2, #32
   80d0a:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80d0c:	687b      	ldr	r3, [r7, #4]
   80d0e:	2204      	movs	r2, #4
   80d10:	601a      	str	r2, [r3, #0]
}
   80d12:	bf00      	nop
   80d14:	370c      	adds	r7, #12
   80d16:	46bd      	mov	sp, r7
   80d18:	bc80      	pop	{r7}
   80d1a:	4770      	bx	lr

00080d1c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80d1c:	b580      	push	{r7, lr}
   80d1e:	b084      	sub	sp, #16
   80d20:	af00      	add	r7, sp, #0
   80d22:	6078      	str	r0, [r7, #4]
   80d24:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80d26:	2300      	movs	r3, #0
   80d28:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80d2a:	687b      	ldr	r3, [r7, #4]
   80d2c:	f04f 32ff 	mov.w	r2, #4294967295
   80d30:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   80d32:	687b      	ldr	r3, [r7, #4]
   80d34:	6a1b      	ldr	r3, [r3, #32]

	twi_disable_interrupt(p_twi, MASK_ALL_INTERRUPTS);
   80d36:	f04f 31ff 	mov.w	r1, #4294967295
   80d3a:	6878      	ldr	r0, [r7, #4]
   80d3c:	4b14      	ldr	r3, [pc, #80]	; (80d90 <twi_master_init+0x74>)
   80d3e:	4798      	blx	r3

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80d40:	6878      	ldr	r0, [r7, #4]
   80d42:	4b14      	ldr	r3, [pc, #80]	; (80d94 <twi_master_init+0x78>)
   80d44:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80d46:	6878      	ldr	r0, [r7, #4]
   80d48:	4b13      	ldr	r3, [pc, #76]	; (80d98 <twi_master_init+0x7c>)
   80d4a:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80d4c:	683b      	ldr	r3, [r7, #0]
   80d4e:	6859      	ldr	r1, [r3, #4]
   80d50:	683b      	ldr	r3, [r7, #0]
   80d52:	681b      	ldr	r3, [r3, #0]
   80d54:	461a      	mov	r2, r3
   80d56:	6878      	ldr	r0, [r7, #4]
   80d58:	4b10      	ldr	r3, [pc, #64]	; (80d9c <twi_master_init+0x80>)
   80d5a:	4798      	blx	r3
   80d5c:	4603      	mov	r3, r0
   80d5e:	2b01      	cmp	r3, #1
   80d60:	d101      	bne.n	80d66 <twi_master_init+0x4a>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80d62:	2301      	movs	r3, #1
   80d64:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80d66:	683b      	ldr	r3, [r7, #0]
   80d68:	7a5b      	ldrb	r3, [r3, #9]
   80d6a:	2b01      	cmp	r3, #1
   80d6c:	d102      	bne.n	80d74 <twi_master_init+0x58>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80d6e:	687b      	ldr	r3, [r7, #4]
   80d70:	2240      	movs	r2, #64	; 0x40
   80d72:	601a      	str	r2, [r3, #0]
	}
    
    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   80d74:	f44f 7150 	mov.w	r1, #832	; 0x340
   80d78:	6878      	ldr	r0, [r7, #4]
   80d7a:	4b09      	ldr	r3, [pc, #36]	; (80da0 <twi_master_init+0x84>)
   80d7c:	4798      	blx	r3

    twiBusy = false;
   80d7e:	4b09      	ldr	r3, [pc, #36]	; (80da4 <twi_master_init+0x88>)
   80d80:	2200      	movs	r2, #0
   80d82:	701a      	strb	r2, [r3, #0]
    
	return status;
   80d84:	68fb      	ldr	r3, [r7, #12]
}
   80d86:	4618      	mov	r0, r3
   80d88:	3710      	adds	r7, #16
   80d8a:	46bd      	mov	sp, r7
   80d8c:	bd80      	pop	{r7, pc}
   80d8e:	bf00      	nop
   80d90:	000812ef 	.word	0x000812ef
   80d94:	00081351 	.word	0x00081351
   80d98:	00080cf9 	.word	0x00080cf9
   80d9c:	00080da9 	.word	0x00080da9
   80da0:	000812d5 	.word	0x000812d5
   80da4:	20070d94 	.word	0x20070d94

00080da8 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   80da8:	b480      	push	{r7}
   80daa:	b089      	sub	sp, #36	; 0x24
   80dac:	af00      	add	r7, sp, #0
   80dae:	60f8      	str	r0, [r7, #12]
   80db0:	60b9      	str	r1, [r7, #8]
   80db2:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80db4:	2300      	movs	r3, #0
   80db6:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80db8:	68bb      	ldr	r3, [r7, #8]
   80dba:	4a34      	ldr	r2, [pc, #208]	; (80e8c <twi_set_speed+0xe4>)
   80dbc:	4293      	cmp	r3, r2
   80dbe:	d901      	bls.n	80dc4 <twi_set_speed+0x1c>
		return FAIL;
   80dc0:	2301      	movs	r3, #1
   80dc2:	e05d      	b.n	80e80 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   80dc4:	68bb      	ldr	r3, [r7, #8]
   80dc6:	4a32      	ldr	r2, [pc, #200]	; (80e90 <twi_set_speed+0xe8>)
   80dc8:	4293      	cmp	r3, r2
   80dca:	d937      	bls.n	80e3c <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80dcc:	687b      	ldr	r3, [r7, #4]
   80dce:	4a31      	ldr	r2, [pc, #196]	; (80e94 <twi_set_speed+0xec>)
   80dd0:	fba2 2303 	umull	r2, r3, r2, r3
   80dd4:	0b9b      	lsrs	r3, r3, #14
   80dd6:	3b04      	subs	r3, #4
   80dd8:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80dda:	68ba      	ldr	r2, [r7, #8]
   80ddc:	4b2e      	ldr	r3, [pc, #184]	; (80e98 <twi_set_speed+0xf0>)
   80dde:	4413      	add	r3, r2
   80de0:	009b      	lsls	r3, r3, #2
   80de2:	687a      	ldr	r2, [r7, #4]
   80de4:	fbb2 f3f3 	udiv	r3, r2, r3
   80de8:	3b04      	subs	r3, #4
   80dea:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80dec:	e005      	b.n	80dfa <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   80dee:	69fb      	ldr	r3, [r7, #28]
   80df0:	3301      	adds	r3, #1
   80df2:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   80df4:	697b      	ldr	r3, [r7, #20]
   80df6:	085b      	lsrs	r3, r3, #1
   80df8:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80dfa:	697b      	ldr	r3, [r7, #20]
   80dfc:	2bff      	cmp	r3, #255	; 0xff
   80dfe:	d909      	bls.n	80e14 <twi_set_speed+0x6c>
   80e00:	69fb      	ldr	r3, [r7, #28]
   80e02:	2b06      	cmp	r3, #6
   80e04:	d9f3      	bls.n	80dee <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e06:	e005      	b.n	80e14 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   80e08:	69fb      	ldr	r3, [r7, #28]
   80e0a:	3301      	adds	r3, #1
   80e0c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   80e0e:	693b      	ldr	r3, [r7, #16]
   80e10:	085b      	lsrs	r3, r3, #1
   80e12:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e14:	693b      	ldr	r3, [r7, #16]
   80e16:	2bff      	cmp	r3, #255	; 0xff
   80e18:	d902      	bls.n	80e20 <twi_set_speed+0x78>
   80e1a:	69fb      	ldr	r3, [r7, #28]
   80e1c:	2b06      	cmp	r3, #6
   80e1e:	d9f3      	bls.n	80e08 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80e20:	697b      	ldr	r3, [r7, #20]
   80e22:	b2da      	uxtb	r2, r3
   80e24:	693b      	ldr	r3, [r7, #16]
   80e26:	021b      	lsls	r3, r3, #8
   80e28:	b29b      	uxth	r3, r3
   80e2a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   80e2c:	69fb      	ldr	r3, [r7, #28]
   80e2e:	041b      	lsls	r3, r3, #16
   80e30:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80e34:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80e36:	68fb      	ldr	r3, [r7, #12]
   80e38:	611a      	str	r2, [r3, #16]
   80e3a:	e020      	b.n	80e7e <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80e3c:	68bb      	ldr	r3, [r7, #8]
   80e3e:	005b      	lsls	r3, r3, #1
   80e40:	687a      	ldr	r2, [r7, #4]
   80e42:	fbb2 f3f3 	udiv	r3, r2, r3
   80e46:	3b04      	subs	r3, #4
   80e48:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e4a:	e005      	b.n	80e58 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   80e4c:	69fb      	ldr	r3, [r7, #28]
   80e4e:	3301      	adds	r3, #1
   80e50:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   80e52:	69bb      	ldr	r3, [r7, #24]
   80e54:	085b      	lsrs	r3, r3, #1
   80e56:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e58:	69bb      	ldr	r3, [r7, #24]
   80e5a:	2bff      	cmp	r3, #255	; 0xff
   80e5c:	d902      	bls.n	80e64 <twi_set_speed+0xbc>
   80e5e:	69fb      	ldr	r3, [r7, #28]
   80e60:	2b06      	cmp	r3, #6
   80e62:	d9f3      	bls.n	80e4c <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80e64:	69bb      	ldr	r3, [r7, #24]
   80e66:	b2da      	uxtb	r2, r3
   80e68:	69bb      	ldr	r3, [r7, #24]
   80e6a:	021b      	lsls	r3, r3, #8
   80e6c:	b29b      	uxth	r3, r3
   80e6e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   80e70:	69fb      	ldr	r3, [r7, #28]
   80e72:	041b      	lsls	r3, r3, #16
   80e74:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80e78:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80e7a:	68fb      	ldr	r3, [r7, #12]
   80e7c:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   80e7e:	2300      	movs	r3, #0
}
   80e80:	4618      	mov	r0, r3
   80e82:	3724      	adds	r7, #36	; 0x24
   80e84:	46bd      	mov	sp, r7
   80e86:	bc80      	pop	{r7}
   80e88:	4770      	bx	lr
   80e8a:	bf00      	nop
   80e8c:	00061a80 	.word	0x00061a80
   80e90:	0005dc00 	.word	0x0005dc00
   80e94:	057619f1 	.word	0x057619f1
   80e98:	3ffd1200 	.word	0x3ffd1200

00080e9c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   80e9c:	b480      	push	{r7}
   80e9e:	b085      	sub	sp, #20
   80ea0:	af00      	add	r7, sp, #0
   80ea2:	6078      	str	r0, [r7, #4]
   80ea4:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   80ea6:	683b      	ldr	r3, [r7, #0]
   80ea8:	2b00      	cmp	r3, #0
   80eaa:	d101      	bne.n	80eb0 <twi_mk_addr+0x14>
		return 0;
   80eac:	2300      	movs	r3, #0
   80eae:	e01d      	b.n	80eec <twi_mk_addr+0x50>

	val = addr[0];
   80eb0:	687b      	ldr	r3, [r7, #4]
   80eb2:	781b      	ldrb	r3, [r3, #0]
   80eb4:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   80eb6:	683b      	ldr	r3, [r7, #0]
   80eb8:	2b01      	cmp	r3, #1
   80eba:	dd09      	ble.n	80ed0 <twi_mk_addr+0x34>
		val <<= 8;
   80ebc:	68fb      	ldr	r3, [r7, #12]
   80ebe:	021b      	lsls	r3, r3, #8
   80ec0:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   80ec2:	687b      	ldr	r3, [r7, #4]
   80ec4:	3301      	adds	r3, #1
   80ec6:	781b      	ldrb	r3, [r3, #0]
   80ec8:	461a      	mov	r2, r3
   80eca:	68fb      	ldr	r3, [r7, #12]
   80ecc:	4313      	orrs	r3, r2
   80ece:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   80ed0:	683b      	ldr	r3, [r7, #0]
   80ed2:	2b02      	cmp	r3, #2
   80ed4:	dd09      	ble.n	80eea <twi_mk_addr+0x4e>
		val <<= 8;
   80ed6:	68fb      	ldr	r3, [r7, #12]
   80ed8:	021b      	lsls	r3, r3, #8
   80eda:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   80edc:	687b      	ldr	r3, [r7, #4]
   80ede:	3302      	adds	r3, #2
   80ee0:	781b      	ldrb	r3, [r3, #0]
   80ee2:	461a      	mov	r2, r3
   80ee4:	68fb      	ldr	r3, [r7, #12]
   80ee6:	4313      	orrs	r3, r2
   80ee8:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80eea:	68fb      	ldr	r3, [r7, #12]
}
   80eec:	4618      	mov	r0, r3
   80eee:	3714      	adds	r7, #20
   80ef0:	46bd      	mov	sp, r7
   80ef2:	bc80      	pop	{r7}
   80ef4:	4770      	bx	lr
	...

00080ef8 <twi_is_busy>:
	}
}
#endif
#if 1
uint8_t twi_is_busy(void)
{
   80ef8:	b480      	push	{r7}
   80efa:	af00      	add	r7, sp, #0
    return twiBusy;
   80efc:	4b02      	ldr	r3, [pc, #8]	; (80f08 <twi_is_busy+0x10>)
   80efe:	781b      	ldrb	r3, [r3, #0]
}
   80f00:	4618      	mov	r0, r3
   80f02:	46bd      	mov	sp, r7
   80f04:	bc80      	pop	{r7}
   80f06:	4770      	bx	lr
   80f08:	20070d94 	.word	0x20070d94

00080f0c <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   80f0c:	b480      	push	{r7}
   80f0e:	af00      	add	r7, sp, #0
    return &txPacket;
   80f10:	4b02      	ldr	r3, [pc, #8]	; (80f1c <twi_get_tx_packet+0x10>)
}
   80f12:	4618      	mov	r0, r3
   80f14:	46bd      	mov	sp, r7
   80f16:	bc80      	pop	{r7}
   80f18:	4770      	bx	lr
   80f1a:	bf00      	nop
   80f1c:	20070b74 	.word	0x20070b74

00080f20 <twi_get_rx_packet>:

twi_packet_t *twi_get_rx_packet(void)
{
   80f20:	b480      	push	{r7}
   80f22:	af00      	add	r7, sp, #0
    return &rxPacket;
   80f24:	4b02      	ldr	r3, [pc, #8]	; (80f30 <twi_get_rx_packet+0x10>)
}
   80f26:	4618      	mov	r0, r3
   80f28:	46bd      	mov	sp, r7
   80f2a:	bc80      	pop	{r7}
   80f2c:	4770      	bx	lr
   80f2e:	bf00      	nop
   80f30:	20070c84 	.word	0x20070c84

00080f34 <twi_pdc_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_pdc_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80f34:	b580      	push	{r7, lr}
   80f36:	b084      	sub	sp, #16
   80f38:	af00      	add	r7, sp, #0
   80f3a:	6078      	str	r0, [r7, #4]
   80f3c:	6039      	str	r1, [r7, #0]
    pdc_packet_t rxPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   80f3e:	683b      	ldr	r3, [r7, #0]
   80f40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80f44:	2b00      	cmp	r3, #0
   80f46:	d101      	bne.n	80f4c <twi_pdc_master_read+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   80f48:	2301      	movs	r3, #1
   80f4a:	e047      	b.n	80fdc <twi_pdc_master_read+0xa8>
    }
    
    twiBusy = true;
   80f4c:	4b25      	ldr	r3, [pc, #148]	; (80fe4 <twi_pdc_master_read+0xb0>)
   80f4e:	2201      	movs	r2, #1
   80f50:	701a      	strb	r2, [r3, #0]

    // Ensure Rx is already empty
    twi_read_byte(TWI0);
   80f52:	4825      	ldr	r0, [pc, #148]	; (80fe8 <twi_pdc_master_read+0xb4>)
   80f54:	4b25      	ldr	r3, [pc, #148]	; (80fec <twi_pdc_master_read+0xb8>)
   80f56:	4798      	blx	r3

    // Set read mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   80f58:	687b      	ldr	r3, [r7, #4]
   80f5a:	2200      	movs	r2, #0
   80f5c:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   80f5e:	683b      	ldr	r3, [r7, #0]
   80f60:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   80f64:	041b      	lsls	r3, r3, #16
   80f66:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   80f6a:	683b      	ldr	r3, [r7, #0]
   80f6c:	685b      	ldr	r3, [r3, #4]
   80f6e:	021b      	lsls	r3, r3, #8
   80f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
   80f74:	4313      	orrs	r3, r2
   80f76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   80f7a:	687b      	ldr	r3, [r7, #4]
   80f7c:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   80f7e:	687b      	ldr	r3, [r7, #4]
   80f80:	2200      	movs	r2, #0
   80f82:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80f84:	683a      	ldr	r2, [r7, #0]
   80f86:	683b      	ldr	r3, [r7, #0]
   80f88:	685b      	ldr	r3, [r3, #4]
   80f8a:	4619      	mov	r1, r3
   80f8c:	4610      	mov	r0, r2
   80f8e:	4b18      	ldr	r3, [pc, #96]	; (80ff0 <twi_pdc_master_read+0xbc>)
   80f90:	4798      	blx	r3
   80f92:	4602      	mov	r2, r0
   80f94:	687b      	ldr	r3, [r7, #4]
   80f96:	60da      	str	r2, [r3, #12]
        twi_enable_interrupt(TWI0, IER_ERROR_INTERRUPTS);
    }
    else
    {
#endif
        rxPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   80f98:	683b      	ldr	r3, [r7, #0]
   80f9a:	3308      	adds	r3, #8
   80f9c:	60bb      	str	r3, [r7, #8]
        rxPdcPacket.ul_size = p_packet->length - 1;
   80f9e:	683b      	ldr	r3, [r7, #0]
   80fa0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80fa4:	3b01      	subs	r3, #1
   80fa6:	60fb      	str	r3, [r7, #12]
        pdc_rx_init(PDC_TWI0, &rxPdcPacket, NULL);
   80fa8:	f107 0308 	add.w	r3, r7, #8
   80fac:	2200      	movs	r2, #0
   80fae:	4619      	mov	r1, r3
   80fb0:	4810      	ldr	r0, [pc, #64]	; (80ff4 <twi_pdc_master_read+0xc0>)
   80fb2:	4b11      	ldr	r3, [pc, #68]	; (80ff8 <twi_pdc_master_read+0xc4>)
   80fb4:	4798      	blx	r3

        pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_RXTEN);
   80fb6:	2101      	movs	r1, #1
   80fb8:	480e      	ldr	r0, [pc, #56]	; (80ff4 <twi_pdc_master_read+0xc0>)
   80fba:	4b10      	ldr	r3, [pc, #64]	; (80ffc <twi_pdc_master_read+0xc8>)
   80fbc:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_START;
   80fbe:	4b0a      	ldr	r3, [pc, #40]	; (80fe8 <twi_pdc_master_read+0xb4>)
   80fc0:	2201      	movs	r2, #1
   80fc2:	601a      	str	r2, [r3, #0]

        twi_enable_interrupt(p_twi, TWI_IER_ENDRX);
   80fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80fc8:	6878      	ldr	r0, [r7, #4]
   80fca:	4b0d      	ldr	r3, [pc, #52]	; (81000 <twi_pdc_master_read+0xcc>)
   80fcc:	4798      	blx	r3
        NVIC_ClearPendingIRQ(TWI0_IRQn);
   80fce:	2016      	movs	r0, #22
   80fd0:	4b0c      	ldr	r3, [pc, #48]	; (81004 <twi_pdc_master_read+0xd0>)
   80fd2:	4798      	blx	r3
        NVIC_EnableIRQ(TWI0_IRQn);
   80fd4:	2016      	movs	r0, #22
   80fd6:	4b0c      	ldr	r3, [pc, #48]	; (81008 <twi_pdc_master_read+0xd4>)
   80fd8:	4798      	blx	r3
//    }

    return TWI_SUCCESS;
   80fda:	2300      	movs	r3, #0
}
   80fdc:	4618      	mov	r0, r3
   80fde:	3710      	adds	r7, #16
   80fe0:	46bd      	mov	sp, r7
   80fe2:	bd80      	pop	{r7, pc}
   80fe4:	20070d94 	.word	0x20070d94
   80fe8:	4008c000 	.word	0x4008c000
   80fec:	00081339 	.word	0x00081339
   80ff0:	00080e9d 	.word	0x00080e9d
   80ff4:	4008c100 	.word	0x4008c100
   80ff8:	000801eb 	.word	0x000801eb
   80ffc:	0008022d 	.word	0x0008022d
   81000:	000812d5 	.word	0x000812d5
   81004:	00080cc5 	.word	0x00080cc5
   81008:	00080c95 	.word	0x00080c95

0008100c <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   8100c:	b580      	push	{r7, lr}
   8100e:	b084      	sub	sp, #16
   81010:	af00      	add	r7, sp, #0
   81012:	6078      	str	r0, [r7, #4]
   81014:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   81016:	683b      	ldr	r3, [r7, #0]
   81018:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   8101c:	2b00      	cmp	r3, #0
   8101e:	d101      	bne.n	81024 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   81020:	2301      	movs	r3, #1
   81022:	e040      	b.n	810a6 <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   81024:	4b22      	ldr	r3, [pc, #136]	; (810b0 <twi_pdc_master_write+0xa4>)
   81026:	2201      	movs	r2, #1
   81028:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   8102a:	683b      	ldr	r3, [r7, #0]
   8102c:	3308      	adds	r3, #8
   8102e:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   81030:	683b      	ldr	r3, [r7, #0]
   81032:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81036:	3b01      	subs	r3, #1
   81038:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   8103a:	f107 0308 	add.w	r3, r7, #8
   8103e:	2200      	movs	r2, #0
   81040:	4619      	mov	r1, r3
   81042:	481c      	ldr	r0, [pc, #112]	; (810b4 <twi_pdc_master_write+0xa8>)
   81044:	4b1c      	ldr	r3, [pc, #112]	; (810b8 <twi_pdc_master_write+0xac>)
   81046:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   81048:	687b      	ldr	r3, [r7, #4]
   8104a:	2200      	movs	r2, #0
   8104c:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   8104e:	683b      	ldr	r3, [r7, #0]
   81050:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   81054:	041b      	lsls	r3, r3, #16
   81056:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   8105a:	683b      	ldr	r3, [r7, #0]
   8105c:	685b      	ldr	r3, [r3, #4]
   8105e:	021b      	lsls	r3, r3, #8
   81060:	f403 7340 	and.w	r3, r3, #768	; 0x300
   81064:	431a      	orrs	r2, r3
   81066:	687b      	ldr	r3, [r7, #4]
   81068:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   8106a:	687b      	ldr	r3, [r7, #4]
   8106c:	2200      	movs	r2, #0
   8106e:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   81070:	683a      	ldr	r2, [r7, #0]
   81072:	683b      	ldr	r3, [r7, #0]
   81074:	685b      	ldr	r3, [r3, #4]
   81076:	4619      	mov	r1, r3
   81078:	4610      	mov	r0, r2
   8107a:	4b10      	ldr	r3, [pc, #64]	; (810bc <twi_pdc_master_write+0xb0>)
   8107c:	4798      	blx	r3
   8107e:	4602      	mov	r2, r0
   81080:	687b      	ldr	r3, [r7, #4]
   81082:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   81084:	f44f 7180 	mov.w	r1, #256	; 0x100
   81088:	480a      	ldr	r0, [pc, #40]	; (810b4 <twi_pdc_master_write+0xa8>)
   8108a:	4b0d      	ldr	r3, [pc, #52]	; (810c0 <twi_pdc_master_write+0xb4>)
   8108c:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   8108e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81092:	6878      	ldr	r0, [r7, #4]
   81094:	4b0b      	ldr	r3, [pc, #44]	; (810c4 <twi_pdc_master_write+0xb8>)
   81096:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   81098:	2016      	movs	r0, #22
   8109a:	4b0b      	ldr	r3, [pc, #44]	; (810c8 <twi_pdc_master_write+0xbc>)
   8109c:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   8109e:	2016      	movs	r0, #22
   810a0:	4b0a      	ldr	r3, [pc, #40]	; (810cc <twi_pdc_master_write+0xc0>)
   810a2:	4798      	blx	r3

    return TWI_SUCCESS;
   810a4:	2300      	movs	r3, #0
}
   810a6:	4618      	mov	r0, r3
   810a8:	3710      	adds	r7, #16
   810aa:	46bd      	mov	sp, r7
   810ac:	bd80      	pop	{r7, pc}
   810ae:	bf00      	nop
   810b0:	20070d94 	.word	0x20070d94
   810b4:	4008c100 	.word	0x4008c100
   810b8:	000801a9 	.word	0x000801a9
   810bc:	00080e9d 	.word	0x00080e9d
   810c0:	0008022d 	.word	0x0008022d
   810c4:	000812d5 	.word	0x000812d5
   810c8:	00080cc5 	.word	0x00080cc5
   810cc:	00080c95 	.word	0x00080c95

000810d0 <twi_set_compass_rx_callback>:
 * \brief Callback function for TWI receive.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_rx_callback(void (*callback)(void))
{
   810d0:	b480      	push	{r7}
   810d2:	b083      	sub	sp, #12
   810d4:	af00      	add	r7, sp, #0
   810d6:	6078      	str	r0, [r7, #4]
    compassRxCallback = callback;
   810d8:	4a03      	ldr	r2, [pc, #12]	; (810e8 <twi_set_compass_rx_callback+0x18>)
   810da:	687b      	ldr	r3, [r7, #4]
   810dc:	6013      	str	r3, [r2, #0]
}
   810de:	bf00      	nop
   810e0:	370c      	adds	r7, #12
   810e2:	46bd      	mov	sp, r7
   810e4:	bc80      	pop	{r7}
   810e6:	4770      	bx	lr
   810e8:	20070da0 	.word	0x20070da0

000810ec <twi_set_compass_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_tx_callback(void (*callback)(void))
{
   810ec:	b480      	push	{r7}
   810ee:	b083      	sub	sp, #12
   810f0:	af00      	add	r7, sp, #0
   810f2:	6078      	str	r0, [r7, #4]
    compassTxCallback = callback;
   810f4:	4a03      	ldr	r2, [pc, #12]	; (81104 <twi_set_compass_tx_callback+0x18>)
   810f6:	687b      	ldr	r3, [r7, #4]
   810f8:	6013      	str	r3, [r2, #0]
}
   810fa:	bf00      	nop
   810fc:	370c      	adds	r7, #12
   810fe:	46bd      	mov	sp, r7
   81100:	bc80      	pop	{r7}
   81102:	4770      	bx	lr
   81104:	20070d9c 	.word	0x20070d9c

00081108 <twi_set_lcd_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_lcd_tx_callback(void (*callback)(void))
{
   81108:	b480      	push	{r7}
   8110a:	b083      	sub	sp, #12
   8110c:	af00      	add	r7, sp, #0
   8110e:	6078      	str	r0, [r7, #4]
    lcdTxCallback = callback;
   81110:	4a03      	ldr	r2, [pc, #12]	; (81120 <twi_set_lcd_tx_callback+0x18>)
   81112:	687b      	ldr	r3, [r7, #4]
   81114:	6013      	str	r3, [r2, #0]
}
   81116:	bf00      	nop
   81118:	370c      	adds	r7, #12
   8111a:	46bd      	mov	sp, r7
   8111c:	bc80      	pop	{r7}
   8111e:	4770      	bx	lr
   81120:	20070d98 	.word	0x20070d98

00081124 <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   81124:	b590      	push	{r4, r7, lr}
   81126:	b083      	sub	sp, #12
   81128:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   8112a:	485d      	ldr	r0, [pc, #372]	; (812a0 <TWI0_Handler+0x17c>)
   8112c:	4b5d      	ldr	r3, [pc, #372]	; (812a4 <TWI0_Handler+0x180>)
   8112e:	4798      	blx	r3
   81130:	4604      	mov	r4, r0
   81132:	485b      	ldr	r0, [pc, #364]	; (812a0 <TWI0_Handler+0x17c>)
   81134:	4b5c      	ldr	r3, [pc, #368]	; (812a8 <TWI0_Handler+0x184>)
   81136:	4798      	blx	r3
   81138:	4603      	mov	r3, r0
   8113a:	4023      	ands	r3, r4
   8113c:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   8113e:	687b      	ldr	r3, [r7, #4]
   81140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   81144:	2b00      	cmp	r3, #0
   81146:	d014      	beq.n	81172 <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   81148:	f44f 7100 	mov.w	r1, #512	; 0x200
   8114c:	4857      	ldr	r0, [pc, #348]	; (812ac <TWI0_Handler+0x188>)
   8114e:	4b58      	ldr	r3, [pc, #352]	; (812b0 <TWI0_Handler+0x18c>)
   81150:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   81152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81156:	4852      	ldr	r0, [pc, #328]	; (812a0 <TWI0_Handler+0x17c>)
   81158:	4b56      	ldr	r3, [pc, #344]	; (812b4 <TWI0_Handler+0x190>)
   8115a:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   8115c:	2104      	movs	r1, #4
   8115e:	4850      	ldr	r0, [pc, #320]	; (812a0 <TWI0_Handler+0x17c>)
   81160:	4b55      	ldr	r3, [pc, #340]	; (812b8 <TWI0_Handler+0x194>)
   81162:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   81164:	484e      	ldr	r0, [pc, #312]	; (812a0 <TWI0_Handler+0x17c>)
   81166:	4b4f      	ldr	r3, [pc, #316]	; (812a4 <TWI0_Handler+0x180>)
   81168:	4798      	blx	r3
   8116a:	4602      	mov	r2, r0
   8116c:	687b      	ldr	r3, [r7, #4]
   8116e:	4313      	orrs	r3, r2
   81170:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   81172:	687b      	ldr	r3, [r7, #4]
   81174:	f003 0304 	and.w	r3, r3, #4
   81178:	2b00      	cmp	r3, #0
   8117a:	d01a      	beq.n	811b2 <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   8117c:	2104      	movs	r1, #4
   8117e:	4848      	ldr	r0, [pc, #288]	; (812a0 <TWI0_Handler+0x17c>)
   81180:	4b4c      	ldr	r3, [pc, #304]	; (812b4 <TWI0_Handler+0x190>)
   81182:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   81184:	4b46      	ldr	r3, [pc, #280]	; (812a0 <TWI0_Handler+0x17c>)
   81186:	2202      	movs	r2, #2
   81188:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   8118a:	4a45      	ldr	r2, [pc, #276]	; (812a0 <TWI0_Handler+0x17c>)
   8118c:	4b4b      	ldr	r3, [pc, #300]	; (812bc <TWI0_Handler+0x198>)
   8118e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81192:	3b01      	subs	r3, #1
   81194:	4949      	ldr	r1, [pc, #292]	; (812bc <TWI0_Handler+0x198>)
   81196:	440b      	add	r3, r1
   81198:	7a1b      	ldrb	r3, [r3, #8]
   8119a:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   8119c:	2101      	movs	r1, #1
   8119e:	4840      	ldr	r0, [pc, #256]	; (812a0 <TWI0_Handler+0x17c>)
   811a0:	4b45      	ldr	r3, [pc, #276]	; (812b8 <TWI0_Handler+0x194>)
   811a2:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   811a4:	483e      	ldr	r0, [pc, #248]	; (812a0 <TWI0_Handler+0x17c>)
   811a6:	4b3f      	ldr	r3, [pc, #252]	; (812a4 <TWI0_Handler+0x180>)
   811a8:	4798      	blx	r3
   811aa:	4602      	mov	r2, r0
   811ac:	687b      	ldr	r3, [r7, #4]
   811ae:	4313      	orrs	r3, r2
   811b0:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   811b2:	687b      	ldr	r3, [r7, #4]
   811b4:	f003 0301 	and.w	r3, r3, #1
   811b8:	2b00      	cmp	r3, #0
   811ba:	d014      	beq.n	811e6 <TWI0_Handler+0xc2>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   811bc:	2101      	movs	r1, #1
   811be:	4838      	ldr	r0, [pc, #224]	; (812a0 <TWI0_Handler+0x17c>)
   811c0:	4b3c      	ldr	r3, [pc, #240]	; (812b4 <TWI0_Handler+0x190>)
   811c2:	4798      	blx	r3

        // If defined, call the connected function.
        if(compassTxCallback != NULL)
   811c4:	4b3e      	ldr	r3, [pc, #248]	; (812c0 <TWI0_Handler+0x19c>)
   811c6:	681b      	ldr	r3, [r3, #0]
   811c8:	2b00      	cmp	r3, #0
   811ca:	d002      	beq.n	811d2 <TWI0_Handler+0xae>
        {
            compassTxCallback();
   811cc:	4b3c      	ldr	r3, [pc, #240]	; (812c0 <TWI0_Handler+0x19c>)
   811ce:	681b      	ldr	r3, [r3, #0]
   811d0:	4798      	blx	r3
        }

        // If defined, call the connected function.
        if(lcdTxCallback != NULL)
   811d2:	4b3c      	ldr	r3, [pc, #240]	; (812c4 <TWI0_Handler+0x1a0>)
   811d4:	681b      	ldr	r3, [r3, #0]
   811d6:	2b00      	cmp	r3, #0
   811d8:	d002      	beq.n	811e0 <TWI0_Handler+0xbc>
        {
          lcdTxCallback();
   811da:	4b3a      	ldr	r3, [pc, #232]	; (812c4 <TWI0_Handler+0x1a0>)
   811dc:	681b      	ldr	r3, [r3, #0]
   811de:	4798      	blx	r3
        }

        twiBusy = false;
   811e0:	4b39      	ldr	r3, [pc, #228]	; (812c8 <TWI0_Handler+0x1a4>)
   811e2:	2200      	movs	r2, #0
   811e4:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   811e6:	687b      	ldr	r3, [r7, #4]
   811e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   811ec:	2b00      	cmp	r3, #0
   811ee:	d016      	beq.n	8121e <TWI0_Handler+0xfa>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   811f0:	2102      	movs	r1, #2
   811f2:	482e      	ldr	r0, [pc, #184]	; (812ac <TWI0_Handler+0x188>)
   811f4:	4b2e      	ldr	r3, [pc, #184]	; (812b0 <TWI0_Handler+0x18c>)
   811f6:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   811f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   811fc:	4828      	ldr	r0, [pc, #160]	; (812a0 <TWI0_Handler+0x17c>)
   811fe:	4b2d      	ldr	r3, [pc, #180]	; (812b4 <TWI0_Handler+0x190>)
   81200:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   81202:	2102      	movs	r1, #2
   81204:	4826      	ldr	r0, [pc, #152]	; (812a0 <TWI0_Handler+0x17c>)
   81206:	4b2c      	ldr	r3, [pc, #176]	; (812b8 <TWI0_Handler+0x194>)
   81208:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   8120a:	4b25      	ldr	r3, [pc, #148]	; (812a0 <TWI0_Handler+0x17c>)
   8120c:	2202      	movs	r2, #2
   8120e:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   81210:	4823      	ldr	r0, [pc, #140]	; (812a0 <TWI0_Handler+0x17c>)
   81212:	4b24      	ldr	r3, [pc, #144]	; (812a4 <TWI0_Handler+0x180>)
   81214:	4798      	blx	r3
   81216:	4602      	mov	r2, r0
   81218:	687b      	ldr	r3, [r7, #4]
   8121a:	4313      	orrs	r3, r2
   8121c:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   8121e:	687b      	ldr	r3, [r7, #4]
   81220:	f003 0302 	and.w	r3, r3, #2
   81224:	2b00      	cmp	r3, #0
   81226:	d018      	beq.n	8125a <TWI0_Handler+0x136>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   81228:	2102      	movs	r1, #2
   8122a:	481d      	ldr	r0, [pc, #116]	; (812a0 <TWI0_Handler+0x17c>)
   8122c:	4b21      	ldr	r3, [pc, #132]	; (812b4 <TWI0_Handler+0x190>)
   8122e:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   81230:	4b26      	ldr	r3, [pc, #152]	; (812cc <TWI0_Handler+0x1a8>)
   81232:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81236:	3b01      	subs	r3, #1
   81238:	4a19      	ldr	r2, [pc, #100]	; (812a0 <TWI0_Handler+0x17c>)
   8123a:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8123c:	b2d1      	uxtb	r1, r2
   8123e:	4a23      	ldr	r2, [pc, #140]	; (812cc <TWI0_Handler+0x1a8>)
   81240:	4413      	add	r3, r2
   81242:	460a      	mov	r2, r1
   81244:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(compassRxCallback != NULL)
   81246:	4b22      	ldr	r3, [pc, #136]	; (812d0 <TWI0_Handler+0x1ac>)
   81248:	681b      	ldr	r3, [r3, #0]
   8124a:	2b00      	cmp	r3, #0
   8124c:	d002      	beq.n	81254 <TWI0_Handler+0x130>
        {
            compassRxCallback();
   8124e:	4b20      	ldr	r3, [pc, #128]	; (812d0 <TWI0_Handler+0x1ac>)
   81250:	681b      	ldr	r3, [r3, #0]
   81252:	4798      	blx	r3
        }

        twiBusy = false;
   81254:	4b1c      	ldr	r3, [pc, #112]	; (812c8 <TWI0_Handler+0x1a4>)
   81256:	2200      	movs	r2, #0
   81258:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   8125a:	687b      	ldr	r3, [r7, #4]
   8125c:	f403 7350 	and.w	r3, r3, #832	; 0x340
   81260:	2b00      	cmp	r3, #0
   81262:	d019      	beq.n	81298 <TWI0_Handler+0x174>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81264:	f240 2102 	movw	r1, #514	; 0x202
   81268:	4810      	ldr	r0, [pc, #64]	; (812ac <TWI0_Handler+0x188>)
   8126a:	4b11      	ldr	r3, [pc, #68]	; (812b0 <TWI0_Handler+0x18c>)
   8126c:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   8126e:	687b      	ldr	r3, [r7, #4]
   81270:	f403 7380 	and.w	r3, r3, #256	; 0x100
   81274:	2b00      	cmp	r3, #0
   81276:	d102      	bne.n	8127e <TWI0_Handler+0x15a>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   81278:	4b09      	ldr	r3, [pc, #36]	; (812a0 <TWI0_Handler+0x17c>)
   8127a:	2202      	movs	r2, #2
   8127c:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   8127e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81282:	4807      	ldr	r0, [pc, #28]	; (812a0 <TWI0_Handler+0x17c>)
   81284:	4b0b      	ldr	r3, [pc, #44]	; (812b4 <TWI0_Handler+0x190>)
   81286:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   81288:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8128c:	4804      	ldr	r0, [pc, #16]	; (812a0 <TWI0_Handler+0x17c>)
   8128e:	4b09      	ldr	r3, [pc, #36]	; (812b4 <TWI0_Handler+0x190>)
   81290:	4798      	blx	r3

        twiBusy = false;
   81292:	4b0d      	ldr	r3, [pc, #52]	; (812c8 <TWI0_Handler+0x1a4>)
   81294:	2200      	movs	r2, #0
   81296:	701a      	strb	r2, [r3, #0]
	}
}
   81298:	bf00      	nop
   8129a:	370c      	adds	r7, #12
   8129c:	46bd      	mov	sp, r7
   8129e:	bd90      	pop	{r4, r7, pc}
   812a0:	4008c000 	.word	0x4008c000
   812a4:	0008130d 	.word	0x0008130d
   812a8:	00081323 	.word	0x00081323
   812ac:	4008c100 	.word	0x4008c100
   812b0:	0008024d 	.word	0x0008024d
   812b4:	000812ef 	.word	0x000812ef
   812b8:	000812d5 	.word	0x000812d5
   812bc:	20070b74 	.word	0x20070b74
   812c0:	20070d9c 	.word	0x20070d9c
   812c4:	20070d98 	.word	0x20070d98
   812c8:	20070d94 	.word	0x20070d94
   812cc:	20070c84 	.word	0x20070c84
   812d0:	20070da0 	.word	0x20070da0

000812d4 <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   812d4:	b480      	push	{r7}
   812d6:	b083      	sub	sp, #12
   812d8:	af00      	add	r7, sp, #0
   812da:	6078      	str	r0, [r7, #4]
   812dc:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   812de:	687b      	ldr	r3, [r7, #4]
   812e0:	683a      	ldr	r2, [r7, #0]
   812e2:	625a      	str	r2, [r3, #36]	; 0x24
}
   812e4:	bf00      	nop
   812e6:	370c      	adds	r7, #12
   812e8:	46bd      	mov	sp, r7
   812ea:	bc80      	pop	{r7}
   812ec:	4770      	bx	lr

000812ee <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   812ee:	b480      	push	{r7}
   812f0:	b083      	sub	sp, #12
   812f2:	af00      	add	r7, sp, #0
   812f4:	6078      	str	r0, [r7, #4]
   812f6:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   812f8:	687b      	ldr	r3, [r7, #4]
   812fa:	683a      	ldr	r2, [r7, #0]
   812fc:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   812fe:	687b      	ldr	r3, [r7, #4]
   81300:	6a1b      	ldr	r3, [r3, #32]
}
   81302:	bf00      	nop
   81304:	370c      	adds	r7, #12
   81306:	46bd      	mov	sp, r7
   81308:	bc80      	pop	{r7}
   8130a:	4770      	bx	lr

0008130c <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   8130c:	b480      	push	{r7}
   8130e:	b083      	sub	sp, #12
   81310:	af00      	add	r7, sp, #0
   81312:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   81314:	687b      	ldr	r3, [r7, #4]
   81316:	6a1b      	ldr	r3, [r3, #32]
}
   81318:	4618      	mov	r0, r3
   8131a:	370c      	adds	r7, #12
   8131c:	46bd      	mov	sp, r7
   8131e:	bc80      	pop	{r7}
   81320:	4770      	bx	lr

00081322 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   81322:	b480      	push	{r7}
   81324:	b083      	sub	sp, #12
   81326:	af00      	add	r7, sp, #0
   81328:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   8132a:	687b      	ldr	r3, [r7, #4]
   8132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   8132e:	4618      	mov	r0, r3
   81330:	370c      	adds	r7, #12
   81332:	46bd      	mov	sp, r7
   81334:	bc80      	pop	{r7}
   81336:	4770      	bx	lr

00081338 <twi_read_byte>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The byte read.
 */
uint8_t twi_read_byte(Twi *p_twi)
{
   81338:	b480      	push	{r7}
   8133a:	b083      	sub	sp, #12
   8133c:	af00      	add	r7, sp, #0
   8133e:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_RHR;
   81340:	687b      	ldr	r3, [r7, #4]
   81342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81344:	b2db      	uxtb	r3, r3
}
   81346:	4618      	mov	r0, r3
   81348:	370c      	adds	r7, #12
   8134a:	46bd      	mov	sp, r7
   8134c:	bc80      	pop	{r7}
   8134e:	4770      	bx	lr

00081350 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   81350:	b480      	push	{r7}
   81352:	b083      	sub	sp, #12
   81354:	af00      	add	r7, sp, #0
   81356:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   81358:	687b      	ldr	r3, [r7, #4]
   8135a:	2280      	movs	r2, #128	; 0x80
   8135c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   8135e:	687b      	ldr	r3, [r7, #4]
   81360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   81362:	bf00      	nop
   81364:	370c      	adds	r7, #12
   81366:	46bd      	mov	sp, r7
   81368:	bc80      	pop	{r7}
   8136a:	4770      	bx	lr

0008136c <compass_init>:

//local function
static void compass_callback(void);

void compass_init(void)
{
   8136c:	b580      	push	{r7, lr}
   8136e:	b082      	sub	sp, #8
   81370:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   81372:	4b0d      	ldr	r3, [pc, #52]	; (813a8 <compass_init+0x3c>)
   81374:	4798      	blx	r3
   81376:	6078      	str	r0, [r7, #4]

    rx_packet->chip = 0x60;
   81378:	687b      	ldr	r3, [r7, #4]
   8137a:	2260      	movs	r2, #96	; 0x60
   8137c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    rx_packet->addr[0] = 0x02;
   81380:	687b      	ldr	r3, [r7, #4]
   81382:	2202      	movs	r2, #2
   81384:	701a      	strb	r2, [r3, #0]
    rx_packet->addr_length = 1;
   81386:	687b      	ldr	r3, [r7, #4]
   81388:	2201      	movs	r2, #1
   8138a:	605a      	str	r2, [r3, #4]
    rx_packet->length = sizeof(direction);
   8138c:	687b      	ldr	r3, [r7, #4]
   8138e:	2202      	movs	r2, #2
   81390:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    twi_set_compass_tx_callback(compass_callback);
   81394:	4805      	ldr	r0, [pc, #20]	; (813ac <compass_init+0x40>)
   81396:	4b06      	ldr	r3, [pc, #24]	; (813b0 <compass_init+0x44>)
   81398:	4798      	blx	r3
    twi_set_compass_rx_callback(compass_callback);
   8139a:	4804      	ldr	r0, [pc, #16]	; (813ac <compass_init+0x40>)
   8139c:	4b05      	ldr	r3, [pc, #20]	; (813b4 <compass_init+0x48>)
   8139e:	4798      	blx	r3
}
   813a0:	bf00      	nop
   813a2:	3708      	adds	r7, #8
   813a4:	46bd      	mov	sp, r7
   813a6:	bd80      	pop	{r7, pc}
   813a8:	00080f21 	.word	0x00080f21
   813ac:	00081475 	.word	0x00081475
   813b0:	000810ed 	.word	0x000810ed
   813b4:	000810d1 	.word	0x000810d1

000813b8 <update_compass>:

void update_compass(void)
{
   813b8:	b580      	push	{r7, lr}
   813ba:	b082      	sub	sp, #8
   813bc:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   813be:	4b1a      	ldr	r3, [pc, #104]	; (81428 <update_compass+0x70>)
   813c0:	4798      	blx	r3
   813c2:	6078      	str	r0, [r7, #4]

    if ((getTicks() - ul_ticks_compass) > 100)
   813c4:	4b19      	ldr	r3, [pc, #100]	; (8142c <update_compass+0x74>)
   813c6:	4798      	blx	r3
   813c8:	4602      	mov	r2, r0
   813ca:	4b19      	ldr	r3, [pc, #100]	; (81430 <update_compass+0x78>)
   813cc:	681b      	ldr	r3, [r3, #0]
   813ce:	1ad3      	subs	r3, r2, r3
   813d0:	2b64      	cmp	r3, #100	; 0x64
   813d2:	d926      	bls.n	81422 <update_compass+0x6a>
    {
        if(lcd_is_busy())
   813d4:	4b17      	ldr	r3, [pc, #92]	; (81434 <update_compass+0x7c>)
   813d6:	4798      	blx	r3
   813d8:	4603      	mov	r3, r0
   813da:	2b00      	cmp	r3, #0
   813dc:	d120      	bne.n	81420 <update_compass+0x68>
        {
            return;
        }

        ul_ticks_compass = getTicks();
   813de:	4b13      	ldr	r3, [pc, #76]	; (8142c <update_compass+0x74>)
   813e0:	4798      	blx	r3
   813e2:	4602      	mov	r2, r0
   813e4:	4b12      	ldr	r3, [pc, #72]	; (81430 <update_compass+0x78>)
   813e6:	601a      	str	r2, [r3, #0]
        
        compassIsBusy = true;
   813e8:	4b13      	ldr	r3, [pc, #76]	; (81438 <update_compass+0x80>)
   813ea:	2201      	movs	r2, #1
   813ec:	701a      	strb	r2, [r3, #0]
        if(twi_pdc_master_read(TWI0, rx_packet) == TWI_SUCCESS)
   813ee:	6879      	ldr	r1, [r7, #4]
   813f0:	4812      	ldr	r0, [pc, #72]	; (8143c <update_compass+0x84>)
   813f2:	4b13      	ldr	r3, [pc, #76]	; (81440 <update_compass+0x88>)
   813f4:	4798      	blx	r3
   813f6:	4603      	mov	r3, r0
   813f8:	2b00      	cmp	r3, #0
   813fa:	d104      	bne.n	81406 <update_compass+0x4e>
        {
            while(compassIsBusy);
   813fc:	bf00      	nop
   813fe:	4b0e      	ldr	r3, [pc, #56]	; (81438 <update_compass+0x80>)
   81400:	781b      	ldrb	r3, [r3, #0]
   81402:	2b00      	cmp	r3, #0
   81404:	d1fb      	bne.n	813fe <update_compass+0x46>
        }
        direction = (rx_packet->buffer[0] << 8) | rx_packet->buffer[1];
   81406:	687b      	ldr	r3, [r7, #4]
   81408:	7a1b      	ldrb	r3, [r3, #8]
   8140a:	021b      	lsls	r3, r3, #8
   8140c:	b21a      	sxth	r2, r3
   8140e:	687b      	ldr	r3, [r7, #4]
   81410:	7a5b      	ldrb	r3, [r3, #9]
   81412:	b21b      	sxth	r3, r3
   81414:	4313      	orrs	r3, r2
   81416:	b21b      	sxth	r3, r3
   81418:	b29a      	uxth	r2, r3
   8141a:	4b0a      	ldr	r3, [pc, #40]	; (81444 <update_compass+0x8c>)
   8141c:	801a      	strh	r2, [r3, #0]
   8141e:	e000      	b.n	81422 <update_compass+0x6a>
            return;
   81420:	bf00      	nop
    }
}
   81422:	3708      	adds	r7, #8
   81424:	46bd      	mov	sp, r7
   81426:	bd80      	pop	{r7, pc}
   81428:	00080f21 	.word	0x00080f21
   8142c:	0008314d 	.word	0x0008314d
   81430:	20070fd8 	.word	0x20070fd8
   81434:	000818bd 	.word	0x000818bd
   81438:	20070da4 	.word	0x20070da4
   8143c:	4008c000 	.word	0x4008c000
   81440:	00080f35 	.word	0x00080f35
   81444:	20070e38 	.word	0x20070e38

00081448 <set_compass_is_busy>:

void set_compass_is_busy(void)
{
   81448:	b480      	push	{r7}
   8144a:	af00      	add	r7, sp, #0
    compassIsBusy = true;
   8144c:	4b03      	ldr	r3, [pc, #12]	; (8145c <set_compass_is_busy+0x14>)
   8144e:	2201      	movs	r2, #1
   81450:	701a      	strb	r2, [r3, #0]
}
   81452:	bf00      	nop
   81454:	46bd      	mov	sp, r7
   81456:	bc80      	pop	{r7}
   81458:	4770      	bx	lr
   8145a:	bf00      	nop
   8145c:	20070da4 	.word	0x20070da4

00081460 <compass_is_busy>:

uint8_t compass_is_busy(void)
{
   81460:	b480      	push	{r7}
   81462:	af00      	add	r7, sp, #0
    return compassIsBusy;
   81464:	4b02      	ldr	r3, [pc, #8]	; (81470 <compass_is_busy+0x10>)
   81466:	781b      	ldrb	r3, [r3, #0]
}
   81468:	4618      	mov	r0, r3
   8146a:	46bd      	mov	sp, r7
   8146c:	bc80      	pop	{r7}
   8146e:	4770      	bx	lr
   81470:	20070da4 	.word	0x20070da4

00081474 <compass_callback>:
    return tmp_corr;
}*/

//local function
static void compass_callback(void)
{
   81474:	b480      	push	{r7}
   81476:	af00      	add	r7, sp, #0
    compassIsBusy = false;
   81478:	4b03      	ldr	r3, [pc, #12]	; (81488 <compass_callback+0x14>)
   8147a:	2200      	movs	r2, #0
   8147c:	701a      	strb	r2, [r3, #0]
}
   8147e:	bf00      	nop
   81480:	46bd      	mov	sp, r7
   81482:	bc80      	pop	{r7}
   81484:	4770      	bx	lr
   81486:	bf00      	nop
   81488:	20070da4 	.word	0x20070da4

0008148c <osc_get_rate>:
{
   8148c:	b480      	push	{r7}
   8148e:	b083      	sub	sp, #12
   81490:	af00      	add	r7, sp, #0
   81492:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81494:	687b      	ldr	r3, [r7, #4]
   81496:	2b07      	cmp	r3, #7
   81498:	d825      	bhi.n	814e6 <osc_get_rate+0x5a>
   8149a:	a201      	add	r2, pc, #4	; (adr r2, 814a0 <osc_get_rate+0x14>)
   8149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   814a0:	000814c1 	.word	0x000814c1
   814a4:	000814c7 	.word	0x000814c7
   814a8:	000814cd 	.word	0x000814cd
   814ac:	000814d3 	.word	0x000814d3
   814b0:	000814d7 	.word	0x000814d7
   814b4:	000814db 	.word	0x000814db
   814b8:	000814df 	.word	0x000814df
   814bc:	000814e3 	.word	0x000814e3
		return OSC_SLCK_32K_RC_HZ;
   814c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   814c4:	e010      	b.n	814e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   814c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   814ca:	e00d      	b.n	814e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   814cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   814d0:	e00a      	b.n	814e8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   814d2:	4b08      	ldr	r3, [pc, #32]	; (814f4 <osc_get_rate+0x68>)
   814d4:	e008      	b.n	814e8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   814d6:	4b08      	ldr	r3, [pc, #32]	; (814f8 <osc_get_rate+0x6c>)
   814d8:	e006      	b.n	814e8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   814da:	4b08      	ldr	r3, [pc, #32]	; (814fc <osc_get_rate+0x70>)
   814dc:	e004      	b.n	814e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   814de:	4b07      	ldr	r3, [pc, #28]	; (814fc <osc_get_rate+0x70>)
   814e0:	e002      	b.n	814e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   814e2:	4b06      	ldr	r3, [pc, #24]	; (814fc <osc_get_rate+0x70>)
   814e4:	e000      	b.n	814e8 <osc_get_rate+0x5c>
	return 0;
   814e6:	2300      	movs	r3, #0
}
   814e8:	4618      	mov	r0, r3
   814ea:	370c      	adds	r7, #12
   814ec:	46bd      	mov	sp, r7
   814ee:	bc80      	pop	{r7}
   814f0:	4770      	bx	lr
   814f2:	bf00      	nop
   814f4:	003d0900 	.word	0x003d0900
   814f8:	007a1200 	.word	0x007a1200
   814fc:	00b71b00 	.word	0x00b71b00

00081500 <sysclk_get_main_hz>:
{
   81500:	b580      	push	{r7, lr}
   81502:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   81504:	2006      	movs	r0, #6
   81506:	4b04      	ldr	r3, [pc, #16]	; (81518 <sysclk_get_main_hz+0x18>)
   81508:	4798      	blx	r3
   8150a:	4602      	mov	r2, r0
   8150c:	4613      	mov	r3, r2
   8150e:	00db      	lsls	r3, r3, #3
   81510:	1a9b      	subs	r3, r3, r2
   81512:	005b      	lsls	r3, r3, #1
}
   81514:	4618      	mov	r0, r3
   81516:	bd80      	pop	{r7, pc}
   81518:	0008148d 	.word	0x0008148d

0008151c <sysclk_get_peripheral_hz>:
{
   8151c:	b580      	push	{r7, lr}
   8151e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   81520:	4b02      	ldr	r3, [pc, #8]	; (8152c <sysclk_get_peripheral_hz+0x10>)
   81522:	4798      	blx	r3
   81524:	4603      	mov	r3, r0
   81526:	085b      	lsrs	r3, r3, #1
}
   81528:	4618      	mov	r0, r3
   8152a:	bd80      	pop	{r7, pc}
   8152c:	00081501 	.word	0x00081501

00081530 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81530:	b580      	push	{r7, lr}
   81532:	b082      	sub	sp, #8
   81534:	af00      	add	r7, sp, #0
   81536:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81538:	6878      	ldr	r0, [r7, #4]
   8153a:	4b03      	ldr	r3, [pc, #12]	; (81548 <sysclk_enable_peripheral_clock+0x18>)
   8153c:	4798      	blx	r3
}
   8153e:	bf00      	nop
   81540:	3708      	adds	r7, #8
   81542:	46bd      	mov	sp, r7
   81544:	bd80      	pop	{r7, pc}
   81546:	bf00      	nop
   81548:	00083b11 	.word	0x00083b11

0008154c <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   8154c:	b580      	push	{r7, lr}
   8154e:	b082      	sub	sp, #8
   81550:	af00      	add	r7, sp, #0
   81552:	6078      	str	r0, [r7, #4]
   81554:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   81556:	4b10      	ldr	r3, [pc, #64]	; (81598 <twi_master_setup+0x4c>)
   81558:	4798      	blx	r3
   8155a:	4602      	mov	r2, r0
   8155c:	683b      	ldr	r3, [r7, #0]
   8155e:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   81560:	683b      	ldr	r3, [r7, #0]
   81562:	2200      	movs	r2, #0
   81564:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   81566:	687b      	ldr	r3, [r7, #4]
   81568:	4a0c      	ldr	r2, [pc, #48]	; (8159c <twi_master_setup+0x50>)
   8156a:	4293      	cmp	r3, r2
   8156c:	d103      	bne.n	81576 <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   8156e:	2016      	movs	r0, #22
   81570:	4b0b      	ldr	r3, [pc, #44]	; (815a0 <twi_master_setup+0x54>)
   81572:	4798      	blx	r3
   81574:	e006      	b.n	81584 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   81576:	687b      	ldr	r3, [r7, #4]
   81578:	4a0a      	ldr	r2, [pc, #40]	; (815a4 <twi_master_setup+0x58>)
   8157a:	4293      	cmp	r3, r2
   8157c:	d102      	bne.n	81584 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   8157e:	2017      	movs	r0, #23
   81580:	4b07      	ldr	r3, [pc, #28]	; (815a0 <twi_master_setup+0x54>)
   81582:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   81584:	6839      	ldr	r1, [r7, #0]
   81586:	6878      	ldr	r0, [r7, #4]
   81588:	4b07      	ldr	r3, [pc, #28]	; (815a8 <twi_master_setup+0x5c>)
   8158a:	4798      	blx	r3
   8158c:	4603      	mov	r3, r0
}
   8158e:	4618      	mov	r0, r3
   81590:	3708      	adds	r7, #8
   81592:	46bd      	mov	sp, r7
   81594:	bd80      	pop	{r7, pc}
   81596:	bf00      	nop
   81598:	0008151d 	.word	0x0008151d
   8159c:	4008c000 	.word	0x4008c000
   815a0:	00081531 	.word	0x00081531
   815a4:	40090000 	.word	0x40090000
   815a8:	00080d1d 	.word	0x00080d1d

000815ac <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   815ac:	b580      	push	{r7, lr}
   815ae:	af00      	add	r7, sp, #0
    twi_set_lcd_tx_callback(lcd_callback);
   815b0:	4821      	ldr	r0, [pc, #132]	; (81638 <lcd_init+0x8c>)
   815b2:	4b22      	ldr	r3, [pc, #136]	; (8163c <lcd_init+0x90>)
   815b4:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   815b6:	220c      	movs	r2, #12
   815b8:	2100      	movs	r1, #0
   815ba:	4821      	ldr	r0, [pc, #132]	; (81640 <lcd_init+0x94>)
   815bc:	4b21      	ldr	r3, [pc, #132]	; (81644 <lcd_init+0x98>)
   815be:	4798      	blx	r3
    twiConfig.speed = 100000;
   815c0:	4b1f      	ldr	r3, [pc, #124]	; (81640 <lcd_init+0x94>)
   815c2:	4a21      	ldr	r2, [pc, #132]	; (81648 <lcd_init+0x9c>)
   815c4:	605a      	str	r2, [r3, #4]

    backlight = LCD_LIGHT_OFF;
   815c6:	4b21      	ldr	r3, [pc, #132]	; (8164c <lcd_init+0xa0>)
   815c8:	2200      	movs	r2, #0
   815ca:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   815cc:	2103      	movs	r1, #3
   815ce:	2000      	movs	r0, #0
   815d0:	4b1f      	ldr	r3, [pc, #124]	; (81650 <lcd_init+0xa4>)
   815d2:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   815d4:	2006      	movs	r0, #6
   815d6:	4b1f      	ldr	r3, [pc, #124]	; (81654 <lcd_init+0xa8>)
   815d8:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   815da:	2103      	movs	r1, #3
   815dc:	2000      	movs	r0, #0
   815de:	4b1c      	ldr	r3, [pc, #112]	; (81650 <lcd_init+0xa4>)
   815e0:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   815e2:	2006      	movs	r0, #6
   815e4:	4b1b      	ldr	r3, [pc, #108]	; (81654 <lcd_init+0xa8>)
   815e6:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   815e8:	2103      	movs	r1, #3
   815ea:	2000      	movs	r0, #0
   815ec:	4b18      	ldr	r3, [pc, #96]	; (81650 <lcd_init+0xa4>)
   815ee:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   815f0:	2006      	movs	r0, #6
   815f2:	4b18      	ldr	r3, [pc, #96]	; (81654 <lcd_init+0xa8>)
   815f4:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   815f6:	2102      	movs	r1, #2
   815f8:	2000      	movs	r0, #0
   815fa:	4b15      	ldr	r3, [pc, #84]	; (81650 <lcd_init+0xa4>)
   815fc:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   815fe:	2128      	movs	r1, #40	; 0x28
   81600:	2000      	movs	r0, #0
   81602:	4b15      	ldr	r3, [pc, #84]	; (81658 <lcd_init+0xac>)
   81604:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   81606:	2108      	movs	r1, #8
   81608:	2000      	movs	r0, #0
   8160a:	4b13      	ldr	r3, [pc, #76]	; (81658 <lcd_init+0xac>)
   8160c:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   8160e:	2101      	movs	r1, #1
   81610:	2000      	movs	r0, #0
   81612:	4b11      	ldr	r3, [pc, #68]	; (81658 <lcd_init+0xac>)
   81614:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   81616:	2003      	movs	r0, #3
   81618:	4b0e      	ldr	r3, [pc, #56]	; (81654 <lcd_init+0xa8>)
   8161a:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   8161c:	2106      	movs	r1, #6
   8161e:	2000      	movs	r0, #0
   81620:	4b0d      	ldr	r3, [pc, #52]	; (81658 <lcd_init+0xac>)
   81622:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   81624:	210c      	movs	r1, #12
   81626:	2000      	movs	r0, #0
   81628:	4b0b      	ldr	r3, [pc, #44]	; (81658 <lcd_init+0xac>)
   8162a:	4798      	blx	r3

    backlight = LCD_LIGHT_ON;
   8162c:	4b07      	ldr	r3, [pc, #28]	; (8164c <lcd_init+0xa0>)
   8162e:	2208      	movs	r2, #8
   81630:	701a      	strb	r2, [r3, #0]
}
   81632:	bf00      	nop
   81634:	bd80      	pop	{r7, pc}
   81636:	bf00      	nop
   81638:	00081b21 	.word	0x00081b21
   8163c:	00081109 	.word	0x00081109
   81640:	20070db0 	.word	0x20070db0
   81644:	000857bd 	.word	0x000857bd
   81648:	000186a0 	.word	0x000186a0
   8164c:	20070da5 	.word	0x20070da5
   81650:	000818d1 	.word	0x000818d1
   81654:	00083161 	.word	0x00083161
   81658:	000819e1 	.word	0x000819e1

0008165c <lcd_set_backlight>:

void lcd_set_backlight(backlight_t state)
{
   8165c:	b480      	push	{r7}
   8165e:	b083      	sub	sp, #12
   81660:	af00      	add	r7, sp, #0
   81662:	4603      	mov	r3, r0
   81664:	71fb      	strb	r3, [r7, #7]
    backlight = state;
   81666:	4a04      	ldr	r2, [pc, #16]	; (81678 <lcd_set_backlight+0x1c>)
   81668:	79fb      	ldrb	r3, [r7, #7]
   8166a:	7013      	strb	r3, [r2, #0]
//    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
//    mdelay(LCD_CLEAR_WAIT_TIME);
}
   8166c:	bf00      	nop
   8166e:	370c      	adds	r7, #12
   81670:	46bd      	mov	sp, r7
   81672:	bc80      	pop	{r7}
   81674:	4770      	bx	lr
   81676:	bf00      	nop
   81678:	20070da5 	.word	0x20070da5

0008167c <lcd_clear>:

void lcd_clear(void)
{
   8167c:	b580      	push	{r7, lr}
   8167e:	af00      	add	r7, sp, #0
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   81680:	2101      	movs	r1, #1
   81682:	2000      	movs	r0, #0
   81684:	4b03      	ldr	r3, [pc, #12]	; (81694 <lcd_clear+0x18>)
   81686:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   81688:	2003      	movs	r0, #3
   8168a:	4b03      	ldr	r3, [pc, #12]	; (81698 <lcd_clear+0x1c>)
   8168c:	4798      	blx	r3
}
   8168e:	bf00      	nop
   81690:	bd80      	pop	{r7, pc}
   81692:	bf00      	nop
   81694:	000819e1 	.word	0x000819e1
   81698:	00083161 	.word	0x00083161

0008169c <lcd_print_s>:
    sprintf(str, "%10lu", data);
    lcd_print_s(line, col, str);
}

void lcd_print_s(uint8_t line, uint8_t col, const char* str)
{
   8169c:	b590      	push	{r4, r7, lr}
   8169e:	b087      	sub	sp, #28
   816a0:	af00      	add	r7, sp, #0
   816a2:	4603      	mov	r3, r0
   816a4:	603a      	str	r2, [r7, #0]
   816a6:	71fb      	strb	r3, [r7, #7]
   816a8:	460b      	mov	r3, r1
   816aa:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   816ac:	4b75      	ldr	r3, [pc, #468]	; (81884 <lcd_print_s+0x1e8>)
   816ae:	4798      	blx	r3
   816b0:	6138      	str	r0, [r7, #16]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    
    while(lcdIsBusy | twi_is_busy())
   816b2:	e019      	b.n	816e8 <lcd_print_s+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   816b4:	4b74      	ldr	r3, [pc, #464]	; (81888 <lcd_print_s+0x1ec>)
   816b6:	4798      	blx	r3
   816b8:	4602      	mov	r2, r0
   816ba:	4b74      	ldr	r3, [pc, #464]	; (8188c <lcd_print_s+0x1f0>)
   816bc:	681b      	ldr	r3, [r3, #0]
   816be:	1ad3      	subs	r3, r2, r3
   816c0:	2b0a      	cmp	r3, #10
   816c2:	d911      	bls.n	816e8 <lcd_print_s+0x4c>
        {
            lcdIsBusy = false;
   816c4:	4b72      	ldr	r3, [pc, #456]	; (81890 <lcd_print_s+0x1f4>)
   816c6:	2200      	movs	r2, #0
   816c8:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   816ca:	4b72      	ldr	r3, [pc, #456]	; (81894 <lcd_print_s+0x1f8>)
   816cc:	681b      	ldr	r3, [r3, #0]
   816ce:	3301      	adds	r3, #1
   816d0:	4a70      	ldr	r2, [pc, #448]	; (81894 <lcd_print_s+0x1f8>)
   816d2:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   816d4:	f240 2102 	movw	r1, #514	; 0x202
   816d8:	486f      	ldr	r0, [pc, #444]	; (81898 <lcd_print_s+0x1fc>)
   816da:	4b70      	ldr	r3, [pc, #448]	; (8189c <lcd_print_s+0x200>)
   816dc:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   816de:	4970      	ldr	r1, [pc, #448]	; (818a0 <lcd_print_s+0x204>)
   816e0:	4870      	ldr	r0, [pc, #448]	; (818a4 <lcd_print_s+0x208>)
   816e2:	4b71      	ldr	r3, [pc, #452]	; (818a8 <lcd_print_s+0x20c>)
   816e4:	4798      	blx	r3
            break;
   816e6:	e009      	b.n	816fc <lcd_print_s+0x60>
    while(lcdIsBusy | twi_is_busy())
   816e8:	4b70      	ldr	r3, [pc, #448]	; (818ac <lcd_print_s+0x210>)
   816ea:	4798      	blx	r3
   816ec:	4603      	mov	r3, r0
   816ee:	461a      	mov	r2, r3
   816f0:	4b67      	ldr	r3, [pc, #412]	; (81890 <lcd_print_s+0x1f4>)
   816f2:	781b      	ldrb	r3, [r3, #0]
   816f4:	4313      	orrs	r3, r2
   816f6:	b2db      	uxtb	r3, r3
   816f8:	2b00      	cmp	r3, #0
   816fa:	d1db      	bne.n	816b4 <lcd_print_s+0x18>
        }
    }

    tx_packet->chip = 0x27;
   816fc:	693b      	ldr	r3, [r7, #16]
   816fe:	2227      	movs	r2, #39	; 0x27
   81700:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81704:	693b      	ldr	r3, [r7, #16]
   81706:	2200      	movs	r2, #0
   81708:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   8170a:	693b      	ldr	r3, [r7, #16]
   8170c:	2200      	movs	r2, #0
   8170e:	605a      	str	r2, [r3, #4]
    
    // Calculate display address
    switch(line)
   81710:	79fb      	ldrb	r3, [r7, #7]
   81712:	2b03      	cmp	r3, #3
   81714:	d006      	beq.n	81724 <lcd_print_s+0x88>
   81716:	2b04      	cmp	r3, #4
   81718:	d007      	beq.n	8172a <lcd_print_s+0x8e>
   8171a:	2b02      	cmp	r3, #2
   8171c:	d108      	bne.n	81730 <lcd_print_s+0x94>
    {
        case 2:
        addr = 0x80 | 0x40;   // set address to start of line 2
   8171e:	23c0      	movs	r3, #192	; 0xc0
   81720:	75fb      	strb	r3, [r7, #23]
        break;
   81722:	e008      	b.n	81736 <lcd_print_s+0x9a>
        case 3:
        addr = 0x80 | 0x14;   // set address to start of line 3
   81724:	2394      	movs	r3, #148	; 0x94
   81726:	75fb      	strb	r3, [r7, #23]
        break;
   81728:	e005      	b.n	81736 <lcd_print_s+0x9a>
        case 4:
        addr = 0x80 | 0x54;   // set address to start of line 4
   8172a:	23d4      	movs	r3, #212	; 0xd4
   8172c:	75fb      	strb	r3, [r7, #23]
        break;
   8172e:	e002      	b.n	81736 <lcd_print_s+0x9a>
        case 1:
        default:
        addr = 0x80;          // set address to start of line 1
   81730:	2380      	movs	r3, #128	; 0x80
   81732:	75fb      	strb	r3, [r7, #23]
        break;
   81734:	bf00      	nop
    }
    addr += col;  // set column in the selected line
   81736:	7dfa      	ldrb	r2, [r7, #23]
   81738:	79bb      	ldrb	r3, [r7, #6]
   8173a:	4413      	add	r3, r2
   8173c:	75fb      	strb	r3, [r7, #23]

    // Set cursor
    cmd = LCD_FUNTION_WRITE | backlight;
   8173e:	4b5c      	ldr	r3, [pc, #368]	; (818b0 <lcd_print_s+0x214>)
   81740:	781b      	ldrb	r3, [r3, #0]
   81742:	73fb      	strb	r3, [r7, #15]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   81744:	7dfb      	ldrb	r3, [r7, #23]
   81746:	f023 030f 	bic.w	r3, r3, #15
   8174a:	b2da      	uxtb	r2, r3
   8174c:	7bfb      	ldrb	r3, [r7, #15]
   8174e:	4313      	orrs	r3, r2
   81750:	b2db      	uxtb	r3, r3
   81752:	f043 0304 	orr.w	r3, r3, #4
   81756:	b2da      	uxtb	r2, r3
   81758:	693b      	ldr	r3, [r7, #16]
   8175a:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   8175c:	f997 3017 	ldrsb.w	r3, [r7, #23]
   81760:	f023 030f 	bic.w	r3, r3, #15
   81764:	b25a      	sxtb	r2, r3
   81766:	f997 300f 	ldrsb.w	r3, [r7, #15]
   8176a:	4313      	orrs	r3, r2
   8176c:	b25b      	sxtb	r3, r3
   8176e:	b2da      	uxtb	r2, r3
   81770:	693b      	ldr	r3, [r7, #16]
   81772:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   81774:	7dfb      	ldrb	r3, [r7, #23]
   81776:	011b      	lsls	r3, r3, #4
   81778:	b2da      	uxtb	r2, r3
   8177a:	7bfb      	ldrb	r3, [r7, #15]
   8177c:	4313      	orrs	r3, r2
   8177e:	b2db      	uxtb	r3, r3
   81780:	f043 0304 	orr.w	r3, r3, #4
   81784:	b2da      	uxtb	r2, r3
   81786:	693b      	ldr	r3, [r7, #16]
   81788:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   8178a:	7dfb      	ldrb	r3, [r7, #23]
   8178c:	011b      	lsls	r3, r3, #4
   8178e:	b25a      	sxtb	r2, r3
   81790:	f997 300f 	ldrsb.w	r3, [r7, #15]
   81794:	4313      	orrs	r3, r2
   81796:	b25b      	sxtb	r3, r3
   81798:	b2da      	uxtb	r2, r3
   8179a:	693b      	ldr	r3, [r7, #16]
   8179c:	72da      	strb	r2, [r3, #11]
    
    // write string ...
    cmd = LCD_WRITE_DDR | backlight;
   8179e:	4b44      	ldr	r3, [pc, #272]	; (818b0 <lcd_print_s+0x214>)
   817a0:	781b      	ldrb	r3, [r3, #0]
   817a2:	f043 0301 	orr.w	r3, r3, #1
   817a6:	73fb      	strb	r3, [r7, #15]
    for(count = 0; count < strlen(str); count++)
   817a8:	2300      	movs	r3, #0
   817aa:	75bb      	strb	r3, [r7, #22]
   817ac:	e04b      	b.n	81846 <lcd_print_s+0x1aa>
    {
        byte = str[count];
   817ae:	7dbb      	ldrb	r3, [r7, #22]
   817b0:	683a      	ldr	r2, [r7, #0]
   817b2:	4413      	add	r3, r2
   817b4:	781b      	ldrb	r3, [r3, #0]
   817b6:	73bb      	strb	r3, [r7, #14]
        tx_packet->buffer[4 + count * 4 + 0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   817b8:	7dbb      	ldrb	r3, [r7, #22]
   817ba:	3301      	adds	r3, #1
   817bc:	009b      	lsls	r3, r3, #2
   817be:	7bba      	ldrb	r2, [r7, #14]
   817c0:	f022 020f 	bic.w	r2, r2, #15
   817c4:	b2d1      	uxtb	r1, r2
   817c6:	7bfa      	ldrb	r2, [r7, #15]
   817c8:	430a      	orrs	r2, r1
   817ca:	b2d2      	uxtb	r2, r2
   817cc:	f042 0204 	orr.w	r2, r2, #4
   817d0:	b2d1      	uxtb	r1, r2
   817d2:	693a      	ldr	r2, [r7, #16]
   817d4:	4413      	add	r3, r2
   817d6:	460a      	mov	r2, r1
   817d8:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   817da:	7dbb      	ldrb	r3, [r7, #22]
   817dc:	3301      	adds	r3, #1
   817de:	009b      	lsls	r3, r3, #2
   817e0:	3301      	adds	r3, #1
   817e2:	f997 200e 	ldrsb.w	r2, [r7, #14]
   817e6:	f022 020f 	bic.w	r2, r2, #15
   817ea:	b251      	sxtb	r1, r2
   817ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
   817f0:	430a      	orrs	r2, r1
   817f2:	b252      	sxtb	r2, r2
   817f4:	b2d1      	uxtb	r1, r2
   817f6:	693a      	ldr	r2, [r7, #16]
   817f8:	4413      	add	r3, r2
   817fa:	460a      	mov	r2, r1
   817fc:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   817fe:	7dbb      	ldrb	r3, [r7, #22]
   81800:	3301      	adds	r3, #1
   81802:	009b      	lsls	r3, r3, #2
   81804:	3302      	adds	r3, #2
   81806:	7bba      	ldrb	r2, [r7, #14]
   81808:	0112      	lsls	r2, r2, #4
   8180a:	b2d1      	uxtb	r1, r2
   8180c:	7bfa      	ldrb	r2, [r7, #15]
   8180e:	430a      	orrs	r2, r1
   81810:	b2d2      	uxtb	r2, r2
   81812:	f042 0204 	orr.w	r2, r2, #4
   81816:	b2d1      	uxtb	r1, r2
   81818:	693a      	ldr	r2, [r7, #16]
   8181a:	4413      	add	r3, r2
   8181c:	460a      	mov	r2, r1
   8181e:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81820:	7dbb      	ldrb	r3, [r7, #22]
   81822:	3301      	adds	r3, #1
   81824:	009b      	lsls	r3, r3, #2
   81826:	3303      	adds	r3, #3
   81828:	7bba      	ldrb	r2, [r7, #14]
   8182a:	0112      	lsls	r2, r2, #4
   8182c:	b251      	sxtb	r1, r2
   8182e:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81832:	430a      	orrs	r2, r1
   81834:	b252      	sxtb	r2, r2
   81836:	b2d1      	uxtb	r1, r2
   81838:	693a      	ldr	r2, [r7, #16]
   8183a:	4413      	add	r3, r2
   8183c:	460a      	mov	r2, r1
   8183e:	721a      	strb	r2, [r3, #8]
    for(count = 0; count < strlen(str); count++)
   81840:	7dbb      	ldrb	r3, [r7, #22]
   81842:	3301      	adds	r3, #1
   81844:	75bb      	strb	r3, [r7, #22]
   81846:	7dbc      	ldrb	r4, [r7, #22]
   81848:	6838      	ldr	r0, [r7, #0]
   8184a:	4b1a      	ldr	r3, [pc, #104]	; (818b4 <lcd_print_s+0x218>)
   8184c:	4798      	blx	r3
   8184e:	4603      	mov	r3, r0
   81850:	429c      	cmp	r4, r3
   81852:	d3ac      	bcc.n	817ae <lcd_print_s+0x112>
    }
    tx_packet->length = 4 + count * 4;
   81854:	7dbb      	ldrb	r3, [r7, #22]
   81856:	3301      	adds	r3, #1
   81858:	009b      	lsls	r3, r3, #2
   8185a:	461a      	mov	r2, r3
   8185c:	693b      	ldr	r3, [r7, #16]
   8185e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    lcdIsBusy = true;
   81862:	4b0b      	ldr	r3, [pc, #44]	; (81890 <lcd_print_s+0x1f4>)
   81864:	2201      	movs	r2, #1
   81866:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81868:	6939      	ldr	r1, [r7, #16]
   8186a:	480e      	ldr	r0, [pc, #56]	; (818a4 <lcd_print_s+0x208>)
   8186c:	4b12      	ldr	r3, [pc, #72]	; (818b8 <lcd_print_s+0x21c>)
   8186e:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81870:	4b05      	ldr	r3, [pc, #20]	; (81888 <lcd_print_s+0x1ec>)
   81872:	4798      	blx	r3
   81874:	4602      	mov	r2, r0
   81876:	4b05      	ldr	r3, [pc, #20]	; (8188c <lcd_print_s+0x1f0>)
   81878:	601a      	str	r2, [r3, #0]
}
   8187a:	bf00      	nop
   8187c:	371c      	adds	r7, #28
   8187e:	46bd      	mov	sp, r7
   81880:	bd90      	pop	{r4, r7, pc}
   81882:	bf00      	nop
   81884:	00080f0d 	.word	0x00080f0d
   81888:	0008314d 	.word	0x0008314d
   8188c:	20070da8 	.word	0x20070da8
   81890:	20070da6 	.word	0x20070da6
   81894:	20070dac 	.word	0x20070dac
   81898:	4008c100 	.word	0x4008c100
   8189c:	0008024d 	.word	0x0008024d
   818a0:	20070db0 	.word	0x20070db0
   818a4:	4008c000 	.word	0x4008c000
   818a8:	0008154d 	.word	0x0008154d
   818ac:	00080ef9 	.word	0x00080ef9
   818b0:	20070da5 	.word	0x20070da5
   818b4:	000858a5 	.word	0x000858a5
   818b8:	0008100d 	.word	0x0008100d

000818bc <lcd_is_busy>:
    twi_pdc_master_write(TWI0, tx_packet);
    lcdStartTicks = getTicks();
}

uint8_t lcd_is_busy(void)
{
   818bc:	b480      	push	{r7}
   818be:	af00      	add	r7, sp, #0
    return lcdIsBusy;
   818c0:	4b02      	ldr	r3, [pc, #8]	; (818cc <lcd_is_busy+0x10>)
   818c2:	781b      	ldrb	r3, [r3, #0]
}
   818c4:	4618      	mov	r0, r3
   818c6:	46bd      	mov	sp, r7
   818c8:	bc80      	pop	{r7}
   818ca:	4770      	bx	lr
   818cc:	20070da6 	.word	0x20070da6

000818d0 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   818d0:	b580      	push	{r7, lr}
   818d2:	b084      	sub	sp, #16
   818d4:	af00      	add	r7, sp, #0
   818d6:	4603      	mov	r3, r0
   818d8:	460a      	mov	r2, r1
   818da:	71fb      	strb	r3, [r7, #7]
   818dc:	4613      	mov	r3, r2
   818de:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   818e0:	4b32      	ldr	r3, [pc, #200]	; (819ac <send_nibble+0xdc>)
   818e2:	4798      	blx	r3
   818e4:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   818e6:	e019      	b.n	8191c <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   818e8:	4b31      	ldr	r3, [pc, #196]	; (819b0 <send_nibble+0xe0>)
   818ea:	4798      	blx	r3
   818ec:	4602      	mov	r2, r0
   818ee:	4b31      	ldr	r3, [pc, #196]	; (819b4 <send_nibble+0xe4>)
   818f0:	681b      	ldr	r3, [r3, #0]
   818f2:	1ad3      	subs	r3, r2, r3
   818f4:	2b0a      	cmp	r3, #10
   818f6:	d911      	bls.n	8191c <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   818f8:	4b2f      	ldr	r3, [pc, #188]	; (819b8 <send_nibble+0xe8>)
   818fa:	2200      	movs	r2, #0
   818fc:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   818fe:	4b2f      	ldr	r3, [pc, #188]	; (819bc <send_nibble+0xec>)
   81900:	681b      	ldr	r3, [r3, #0]
   81902:	3301      	adds	r3, #1
   81904:	4a2d      	ldr	r2, [pc, #180]	; (819bc <send_nibble+0xec>)
   81906:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81908:	f240 2102 	movw	r1, #514	; 0x202
   8190c:	482c      	ldr	r0, [pc, #176]	; (819c0 <send_nibble+0xf0>)
   8190e:	4b2d      	ldr	r3, [pc, #180]	; (819c4 <send_nibble+0xf4>)
   81910:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81912:	492d      	ldr	r1, [pc, #180]	; (819c8 <send_nibble+0xf8>)
   81914:	482d      	ldr	r0, [pc, #180]	; (819cc <send_nibble+0xfc>)
   81916:	4b2e      	ldr	r3, [pc, #184]	; (819d0 <send_nibble+0x100>)
   81918:	4798      	blx	r3
            break;
   8191a:	e009      	b.n	81930 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   8191c:	4b2d      	ldr	r3, [pc, #180]	; (819d4 <send_nibble+0x104>)
   8191e:	4798      	blx	r3
   81920:	4603      	mov	r3, r0
   81922:	461a      	mov	r2, r3
   81924:	4b24      	ldr	r3, [pc, #144]	; (819b8 <send_nibble+0xe8>)
   81926:	781b      	ldrb	r3, [r3, #0]
   81928:	4313      	orrs	r3, r2
   8192a:	b2db      	uxtb	r3, r3
   8192c:	2b00      	cmp	r3, #0
   8192e:	d1db      	bne.n	818e8 <send_nibble+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81930:	68fb      	ldr	r3, [r7, #12]
   81932:	2227      	movs	r2, #39	; 0x27
   81934:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81938:	68fb      	ldr	r3, [r7, #12]
   8193a:	2200      	movs	r2, #0
   8193c:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   8193e:	68fb      	ldr	r3, [r7, #12]
   81940:	2200      	movs	r2, #0
   81942:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81944:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81948:	f003 030f 	and.w	r3, r3, #15
   8194c:	b25a      	sxtb	r2, r3
   8194e:	4b22      	ldr	r3, [pc, #136]	; (819d8 <send_nibble+0x108>)
   81950:	781b      	ldrb	r3, [r3, #0]
   81952:	b25b      	sxtb	r3, r3
   81954:	4313      	orrs	r3, r2
   81956:	b25b      	sxtb	r3, r3
   81958:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   8195a:	79bb      	ldrb	r3, [r7, #6]
   8195c:	011b      	lsls	r3, r3, #4
   8195e:	b2da      	uxtb	r2, r3
   81960:	79fb      	ldrb	r3, [r7, #7]
   81962:	4313      	orrs	r3, r2
   81964:	b2db      	uxtb	r3, r3
   81966:	f043 0304 	orr.w	r3, r3, #4
   8196a:	b2da      	uxtb	r2, r3
   8196c:	68fb      	ldr	r3, [r7, #12]
   8196e:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81970:	79bb      	ldrb	r3, [r7, #6]
   81972:	011b      	lsls	r3, r3, #4
   81974:	b25a      	sxtb	r2, r3
   81976:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8197a:	4313      	orrs	r3, r2
   8197c:	b25b      	sxtb	r3, r3
   8197e:	b2da      	uxtb	r2, r3
   81980:	68fb      	ldr	r3, [r7, #12]
   81982:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   81984:	68fb      	ldr	r3, [r7, #12]
   81986:	2202      	movs	r2, #2
   81988:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   8198c:	4b0a      	ldr	r3, [pc, #40]	; (819b8 <send_nibble+0xe8>)
   8198e:	2201      	movs	r2, #1
   81990:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81992:	68f9      	ldr	r1, [r7, #12]
   81994:	480d      	ldr	r0, [pc, #52]	; (819cc <send_nibble+0xfc>)
   81996:	4b11      	ldr	r3, [pc, #68]	; (819dc <send_nibble+0x10c>)
   81998:	4798      	blx	r3
    lcdStartTicks = getTicks();
   8199a:	4b05      	ldr	r3, [pc, #20]	; (819b0 <send_nibble+0xe0>)
   8199c:	4798      	blx	r3
   8199e:	4602      	mov	r2, r0
   819a0:	4b04      	ldr	r3, [pc, #16]	; (819b4 <send_nibble+0xe4>)
   819a2:	601a      	str	r2, [r3, #0]
}
   819a4:	bf00      	nop
   819a6:	3710      	adds	r7, #16
   819a8:	46bd      	mov	sp, r7
   819aa:	bd80      	pop	{r7, pc}
   819ac:	00080f0d 	.word	0x00080f0d
   819b0:	0008314d 	.word	0x0008314d
   819b4:	20070da8 	.word	0x20070da8
   819b8:	20070da6 	.word	0x20070da6
   819bc:	20070dac 	.word	0x20070dac
   819c0:	4008c100 	.word	0x4008c100
   819c4:	0008024d 	.word	0x0008024d
   819c8:	20070db0 	.word	0x20070db0
   819cc:	4008c000 	.word	0x4008c000
   819d0:	0008154d 	.word	0x0008154d
   819d4:	00080ef9 	.word	0x00080ef9
   819d8:	20070da5 	.word	0x20070da5
   819dc:	0008100d 	.word	0x0008100d

000819e0 <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   819e0:	b580      	push	{r7, lr}
   819e2:	b084      	sub	sp, #16
   819e4:	af00      	add	r7, sp, #0
   819e6:	4603      	mov	r3, r0
   819e8:	460a      	mov	r2, r1
   819ea:	71fb      	strb	r3, [r7, #7]
   819ec:	4613      	mov	r3, r2
   819ee:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   819f0:	4b3e      	ldr	r3, [pc, #248]	; (81aec <send_byte+0x10c>)
   819f2:	4798      	blx	r3
   819f4:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   819f6:	e019      	b.n	81a2c <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   819f8:	4b3d      	ldr	r3, [pc, #244]	; (81af0 <send_byte+0x110>)
   819fa:	4798      	blx	r3
   819fc:	4602      	mov	r2, r0
   819fe:	4b3d      	ldr	r3, [pc, #244]	; (81af4 <send_byte+0x114>)
   81a00:	681b      	ldr	r3, [r3, #0]
   81a02:	1ad3      	subs	r3, r2, r3
   81a04:	2b0a      	cmp	r3, #10
   81a06:	d911      	bls.n	81a2c <send_byte+0x4c>
        {
            lcdIsBusy = false;
   81a08:	4b3b      	ldr	r3, [pc, #236]	; (81af8 <send_byte+0x118>)
   81a0a:	2200      	movs	r2, #0
   81a0c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81a0e:	4b3b      	ldr	r3, [pc, #236]	; (81afc <send_byte+0x11c>)
   81a10:	681b      	ldr	r3, [r3, #0]
   81a12:	3301      	adds	r3, #1
   81a14:	4a39      	ldr	r2, [pc, #228]	; (81afc <send_byte+0x11c>)
   81a16:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81a18:	f240 2102 	movw	r1, #514	; 0x202
   81a1c:	4838      	ldr	r0, [pc, #224]	; (81b00 <send_byte+0x120>)
   81a1e:	4b39      	ldr	r3, [pc, #228]	; (81b04 <send_byte+0x124>)
   81a20:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81a22:	4939      	ldr	r1, [pc, #228]	; (81b08 <send_byte+0x128>)
   81a24:	4839      	ldr	r0, [pc, #228]	; (81b0c <send_byte+0x12c>)
   81a26:	4b3a      	ldr	r3, [pc, #232]	; (81b10 <send_byte+0x130>)
   81a28:	4798      	blx	r3
            break;
   81a2a:	e009      	b.n	81a40 <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   81a2c:	4b39      	ldr	r3, [pc, #228]	; (81b14 <send_byte+0x134>)
   81a2e:	4798      	blx	r3
   81a30:	4603      	mov	r3, r0
   81a32:	461a      	mov	r2, r3
   81a34:	4b30      	ldr	r3, [pc, #192]	; (81af8 <send_byte+0x118>)
   81a36:	781b      	ldrb	r3, [r3, #0]
   81a38:	4313      	orrs	r3, r2
   81a3a:	b2db      	uxtb	r3, r3
   81a3c:	2b00      	cmp	r3, #0
   81a3e:	d1db      	bne.n	819f8 <send_byte+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81a40:	68fb      	ldr	r3, [r7, #12]
   81a42:	2227      	movs	r2, #39	; 0x27
   81a44:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81a48:	68fb      	ldr	r3, [r7, #12]
   81a4a:	2200      	movs	r2, #0
   81a4c:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   81a4e:	68fb      	ldr	r3, [r7, #12]
   81a50:	2200      	movs	r2, #0
   81a52:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a58:	f003 030f 	and.w	r3, r3, #15
   81a5c:	b25a      	sxtb	r2, r3
   81a5e:	4b2e      	ldr	r3, [pc, #184]	; (81b18 <send_byte+0x138>)
   81a60:	781b      	ldrb	r3, [r3, #0]
   81a62:	b25b      	sxtb	r3, r3
   81a64:	4313      	orrs	r3, r2
   81a66:	b25b      	sxtb	r3, r3
   81a68:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   81a6a:	79bb      	ldrb	r3, [r7, #6]
   81a6c:	f023 030f 	bic.w	r3, r3, #15
   81a70:	b2da      	uxtb	r2, r3
   81a72:	79fb      	ldrb	r3, [r7, #7]
   81a74:	4313      	orrs	r3, r2
   81a76:	b2db      	uxtb	r3, r3
   81a78:	f043 0304 	orr.w	r3, r3, #4
   81a7c:	b2da      	uxtb	r2, r3
   81a7e:	68fb      	ldr	r3, [r7, #12]
   81a80:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   81a82:	f997 3006 	ldrsb.w	r3, [r7, #6]
   81a86:	f023 030f 	bic.w	r3, r3, #15
   81a8a:	b25a      	sxtb	r2, r3
   81a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a90:	4313      	orrs	r3, r2
   81a92:	b25b      	sxtb	r3, r3
   81a94:	b2da      	uxtb	r2, r3
   81a96:	68fb      	ldr	r3, [r7, #12]
   81a98:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81a9a:	79bb      	ldrb	r3, [r7, #6]
   81a9c:	011b      	lsls	r3, r3, #4
   81a9e:	b2da      	uxtb	r2, r3
   81aa0:	79fb      	ldrb	r3, [r7, #7]
   81aa2:	4313      	orrs	r3, r2
   81aa4:	b2db      	uxtb	r3, r3
   81aa6:	f043 0304 	orr.w	r3, r3, #4
   81aaa:	b2da      	uxtb	r2, r3
   81aac:	68fb      	ldr	r3, [r7, #12]
   81aae:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81ab0:	79bb      	ldrb	r3, [r7, #6]
   81ab2:	011b      	lsls	r3, r3, #4
   81ab4:	b25a      	sxtb	r2, r3
   81ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81aba:	4313      	orrs	r3, r2
   81abc:	b25b      	sxtb	r3, r3
   81abe:	b2da      	uxtb	r2, r3
   81ac0:	68fb      	ldr	r3, [r7, #12]
   81ac2:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   81ac4:	68fb      	ldr	r3, [r7, #12]
   81ac6:	2204      	movs	r2, #4
   81ac8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   81acc:	4b0a      	ldr	r3, [pc, #40]	; (81af8 <send_byte+0x118>)
   81ace:	2201      	movs	r2, #1
   81ad0:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81ad2:	68f9      	ldr	r1, [r7, #12]
   81ad4:	480d      	ldr	r0, [pc, #52]	; (81b0c <send_byte+0x12c>)
   81ad6:	4b11      	ldr	r3, [pc, #68]	; (81b1c <send_byte+0x13c>)
   81ad8:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81ada:	4b05      	ldr	r3, [pc, #20]	; (81af0 <send_byte+0x110>)
   81adc:	4798      	blx	r3
   81ade:	4602      	mov	r2, r0
   81ae0:	4b04      	ldr	r3, [pc, #16]	; (81af4 <send_byte+0x114>)
   81ae2:	601a      	str	r2, [r3, #0]
}
   81ae4:	bf00      	nop
   81ae6:	3710      	adds	r7, #16
   81ae8:	46bd      	mov	sp, r7
   81aea:	bd80      	pop	{r7, pc}
   81aec:	00080f0d 	.word	0x00080f0d
   81af0:	0008314d 	.word	0x0008314d
   81af4:	20070da8 	.word	0x20070da8
   81af8:	20070da6 	.word	0x20070da6
   81afc:	20070dac 	.word	0x20070dac
   81b00:	4008c100 	.word	0x4008c100
   81b04:	0008024d 	.word	0x0008024d
   81b08:	20070db0 	.word	0x20070db0
   81b0c:	4008c000 	.word	0x4008c000
   81b10:	0008154d 	.word	0x0008154d
   81b14:	00080ef9 	.word	0x00080ef9
   81b18:	20070da5 	.word	0x20070da5
   81b1c:	0008100d 	.word	0x0008100d

00081b20 <lcd_callback>:

static void lcd_callback(void)
{
   81b20:	b480      	push	{r7}
   81b22:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   81b24:	4b03      	ldr	r3, [pc, #12]	; (81b34 <lcd_callback+0x14>)
   81b26:	2200      	movs	r2, #0
   81b28:	701a      	strb	r2, [r3, #0]
}
   81b2a:	bf00      	nop
   81b2c:	46bd      	mov	sp, r7
   81b2e:	bc80      	pop	{r7}
   81b30:	4770      	bx	lr
   81b32:	bf00      	nop
   81b34:	20070da6 	.word	0x20070da6

00081b38 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   81b38:	b480      	push	{r7}
   81b3a:	b08b      	sub	sp, #44	; 0x2c
   81b3c:	af00      	add	r7, sp, #0
   81b3e:	6078      	str	r0, [r7, #4]
   81b40:	460b      	mov	r3, r1
   81b42:	70fb      	strb	r3, [r7, #3]
   81b44:	687b      	ldr	r3, [r7, #4]
   81b46:	627b      	str	r3, [r7, #36]	; 0x24
   81b48:	78fb      	ldrb	r3, [r7, #3]
   81b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81b50:	61fb      	str	r3, [r7, #28]
   81b52:	69fb      	ldr	r3, [r7, #28]
   81b54:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81b56:	69bb      	ldr	r3, [r7, #24]
   81b58:	095b      	lsrs	r3, r3, #5
   81b5a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81b5c:	697b      	ldr	r3, [r7, #20]
   81b5e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81b62:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81b66:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   81b68:	613b      	str	r3, [r7, #16]

	if (level) {
   81b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81b6e:	2b00      	cmp	r3, #0
   81b70:	d009      	beq.n	81b86 <ioport_set_pin_level+0x4e>
   81b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81b74:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81b76:	68fb      	ldr	r3, [r7, #12]
   81b78:	f003 031f 	and.w	r3, r3, #31
   81b7c:	2201      	movs	r2, #1
   81b7e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81b80:	693b      	ldr	r3, [r7, #16]
   81b82:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   81b84:	e008      	b.n	81b98 <ioport_set_pin_level+0x60>
   81b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81b88:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   81b8a:	68bb      	ldr	r3, [r7, #8]
   81b8c:	f003 031f 	and.w	r3, r3, #31
   81b90:	2201      	movs	r2, #1
   81b92:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81b94:	693b      	ldr	r3, [r7, #16]
   81b96:	635a      	str	r2, [r3, #52]	; 0x34
   81b98:	bf00      	nop
   81b9a:	372c      	adds	r7, #44	; 0x2c
   81b9c:	46bd      	mov	sp, r7
   81b9e:	bc80      	pop	{r7}
   81ba0:	4770      	bx	lr

00081ba2 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   81ba2:	b480      	push	{r7}
   81ba4:	b089      	sub	sp, #36	; 0x24
   81ba6:	af00      	add	r7, sp, #0
   81ba8:	6078      	str	r0, [r7, #4]
   81baa:	687b      	ldr	r3, [r7, #4]
   81bac:	61fb      	str	r3, [r7, #28]
   81bae:	69fb      	ldr	r3, [r7, #28]
   81bb0:	61bb      	str	r3, [r7, #24]
   81bb2:	69bb      	ldr	r3, [r7, #24]
   81bb4:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   81bb6:	697b      	ldr	r3, [r7, #20]
   81bb8:	095b      	lsrs	r3, r3, #5
   81bba:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81bbc:	693b      	ldr	r3, [r7, #16]
   81bbe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81bc2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81bc6:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   81bca:	69fb      	ldr	r3, [r7, #28]
   81bcc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81bce:	68fb      	ldr	r3, [r7, #12]
   81bd0:	f003 031f 	and.w	r3, r3, #31
   81bd4:	2101      	movs	r1, #1
   81bd6:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81bda:	4013      	ands	r3, r2
   81bdc:	2b00      	cmp	r3, #0
   81bde:	bf14      	ite	ne
   81be0:	2301      	movne	r3, #1
   81be2:	2300      	moveq	r3, #0
   81be4:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   81be6:	4618      	mov	r0, r3
   81be8:	3724      	adds	r7, #36	; 0x24
   81bea:	46bd      	mov	sp, r7
   81bec:	bc80      	pop	{r7}
   81bee:	4770      	bx	lr

00081bf0 <menu>:
static void print_menu_sensors(void);
static void print_menu_settings(void);
static void print_cursor(menu_info_t *info);

void menu(event_t event1)
{
   81bf0:	b580      	push	{r7, lr}
   81bf2:	b082      	sub	sp, #8
   81bf4:	af00      	add	r7, sp, #0
   81bf6:	4603      	mov	r3, r0
   81bf8:	71fb      	strb	r3, [r7, #7]
    switch (act_menu)
   81bfa:	4b28      	ldr	r3, [pc, #160]	; (81c9c <menu+0xac>)
   81bfc:	781b      	ldrb	r3, [r3, #0]
   81bfe:	2b09      	cmp	r3, #9
   81c00:	d847      	bhi.n	81c92 <menu+0xa2>
   81c02:	a201      	add	r2, pc, #4	; (adr r2, 81c08 <menu+0x18>)
   81c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81c08:	00081c31 	.word	0x00081c31
   81c0c:	00081c3b 	.word	0x00081c3b
   81c10:	00081c45 	.word	0x00081c45
   81c14:	00081c4f 	.word	0x00081c4f
   81c18:	00081c59 	.word	0x00081c59
   81c1c:	00081c77 	.word	0x00081c77
   81c20:	00081c81 	.word	0x00081c81
   81c24:	00081c63 	.word	0x00081c63
   81c28:	00081c6d 	.word	0x00081c6d
   81c2c:	00081c8b 	.word	0x00081c8b
    {
        case MENU_MAIN:
            menu_main(event1);
   81c30:	79fb      	ldrb	r3, [r7, #7]
   81c32:	4618      	mov	r0, r3
   81c34:	4b1a      	ldr	r3, [pc, #104]	; (81ca0 <menu+0xb0>)
   81c36:	4798      	blx	r3
            break;
   81c38:	e02c      	b.n	81c94 <menu+0xa4>
        case MENU_MATCH:
            menu_match(event1);
   81c3a:	79fb      	ldrb	r3, [r7, #7]
   81c3c:	4618      	mov	r0, r3
   81c3e:	4b19      	ldr	r3, [pc, #100]	; (81ca4 <menu+0xb4>)
   81c40:	4798      	blx	r3
            break;
   81c42:	e027      	b.n	81c94 <menu+0xa4>
        case MENU_SENSORS:
            menu_sensors(event1);
   81c44:	79fb      	ldrb	r3, [r7, #7]
   81c46:	4618      	mov	r0, r3
   81c48:	4b17      	ldr	r3, [pc, #92]	; (81ca8 <menu+0xb8>)
   81c4a:	4798      	blx	r3
            break;
   81c4c:	e022      	b.n	81c94 <menu+0xa4>
        case MENU_SETTINGS:
            menu_settings(event1);
   81c4e:	79fb      	ldrb	r3, [r7, #7]
   81c50:	4618      	mov	r0, r3
   81c52:	4b16      	ldr	r3, [pc, #88]	; (81cac <menu+0xbc>)
   81c54:	4798      	blx	r3
            break;
   81c56:	e01d      	b.n	81c94 <menu+0xa4>
        case MENU_BALL:
            menu_ball(event1);
   81c58:	79fb      	ldrb	r3, [r7, #7]
   81c5a:	4618      	mov	r0, r3
   81c5c:	4b14      	ldr	r3, [pc, #80]	; (81cb0 <menu+0xc0>)
   81c5e:	4798      	blx	r3
            break;
   81c60:	e018      	b.n	81c94 <menu+0xa4>
        case MENU_COMPASS:
            menu_compass(event1);
   81c62:	79fb      	ldrb	r3, [r7, #7]
   81c64:	4618      	mov	r0, r3
   81c66:	4b13      	ldr	r3, [pc, #76]	; (81cb4 <menu+0xc4>)
   81c68:	4798      	blx	r3
            break;
   81c6a:	e013      	b.n	81c94 <menu+0xa4>
        case MENU_COMPASS_CALIBRATION:
            menu_compass_calibration(event1);
   81c6c:	79fb      	ldrb	r3, [r7, #7]
   81c6e:	4618      	mov	r0, r3
   81c70:	4b11      	ldr	r3, [pc, #68]	; (81cb8 <menu+0xc8>)
   81c72:	4798      	blx	r3
            break;
   81c74:	e00e      	b.n	81c94 <menu+0xa4>
        case MENU_LINE:
            menu_line(event1);
   81c76:	79fb      	ldrb	r3, [r7, #7]
   81c78:	4618      	mov	r0, r3
   81c7a:	4b10      	ldr	r3, [pc, #64]	; (81cbc <menu+0xcc>)
   81c7c:	4798      	blx	r3
            break;
   81c7e:	e009      	b.n	81c94 <menu+0xa4>
        case MENU_LINE_CALIBRATION:
            menu_line_calibration(event1);
   81c80:	79fb      	ldrb	r3, [r7, #7]
   81c82:	4618      	mov	r0, r3
   81c84:	4b0e      	ldr	r3, [pc, #56]	; (81cc0 <menu+0xd0>)
   81c86:	4798      	blx	r3
            break;
   81c88:	e004      	b.n	81c94 <menu+0xa4>
        case MENU_SHUTDOWN:
            menu_shutdown(event1);
   81c8a:	79fb      	ldrb	r3, [r7, #7]
   81c8c:	4618      	mov	r0, r3
   81c8e:	4b0d      	ldr	r3, [pc, #52]	; (81cc4 <menu+0xd4>)
   81c90:	4798      	blx	r3
        default:
            break;
   81c92:	bf00      	nop
    }
}
   81c94:	bf00      	nop
   81c96:	3708      	adds	r7, #8
   81c98:	46bd      	mov	sp, r7
   81c9a:	bd80      	pop	{r7, pc}
   81c9c:	20070dbc 	.word	0x20070dbc
   81ca0:	00081cc9 	.word	0x00081cc9
   81ca4:	00081df1 	.word	0x00081df1
   81ca8:	00081e21 	.word	0x00081e21
   81cac:	000823c9 	.word	0x000823c9
   81cb0:	00081f45 	.word	0x00081f45
   81cb4:	00081f99 	.word	0x00081f99
   81cb8:	00082079 	.word	0x00082079
   81cbc:	00082179 	.word	0x00082179
   81cc0:	00082319 	.word	0x00082319
   81cc4:	000824ed 	.word	0x000824ed

00081cc8 <menu_main>:

static void menu_main(event_t event1)
{
   81cc8:	b580      	push	{r7, lr}
   81cca:	b082      	sub	sp, #8
   81ccc:	af00      	add	r7, sp, #0
   81cce:	4603      	mov	r3, r0
   81cd0:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   81cd2:	4b41      	ldr	r3, [pc, #260]	; (81dd8 <menu_main+0x110>)
   81cd4:	781b      	ldrb	r3, [r3, #0]
   81cd6:	2b00      	cmp	r3, #0
   81cd8:	d004      	beq.n	81ce4 <menu_main+0x1c>
    {
        print_menu = 0;
   81cda:	4b3f      	ldr	r3, [pc, #252]	; (81dd8 <menu_main+0x110>)
   81cdc:	2200      	movs	r2, #0
   81cde:	701a      	strb	r2, [r3, #0]
        print_menu_main();
   81ce0:	4b3e      	ldr	r3, [pc, #248]	; (81ddc <menu_main+0x114>)
   81ce2:	4798      	blx	r3
    }
    
    update_battery(0);
   81ce4:	2000      	movs	r0, #0
   81ce6:	4b3e      	ldr	r3, [pc, #248]	; (81de0 <menu_main+0x118>)
   81ce8:	4798      	blx	r3
    
    switch (event1)
   81cea:	79fb      	ldrb	r3, [r7, #7]
   81cec:	3b01      	subs	r3, #1
   81cee:	2b0f      	cmp	r3, #15
   81cf0:	d868      	bhi.n	81dc4 <menu_main+0xfc>
   81cf2:	a201      	add	r2, pc, #4	; (adr r2, 81cf8 <menu_main+0x30>)
   81cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81cf8:	00081d39 	.word	0x00081d39
   81cfc:	00081dc5 	.word	0x00081dc5
   81d00:	00081dc5 	.word	0x00081dc5
   81d04:	00081dc5 	.word	0x00081dc5
   81d08:	00081dc5 	.word	0x00081dc5
   81d0c:	00081dc5 	.word	0x00081dc5
   81d10:	00081d79 	.word	0x00081d79
   81d14:	00081dc5 	.word	0x00081dc5
   81d18:	00081dc5 	.word	0x00081dc5
   81d1c:	00081dc5 	.word	0x00081dc5
   81d20:	00081dc5 	.word	0x00081dc5
   81d24:	00081dc5 	.word	0x00081dc5
   81d28:	00081d59 	.word	0x00081d59
   81d2c:	00081dc5 	.word	0x00081dc5
   81d30:	00081dc5 	.word	0x00081dc5
   81d34:	00081db7 	.word	0x00081db7
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.main.act_cursor_line > menu_info.main.min_cursor_line)
   81d38:	4b2a      	ldr	r3, [pc, #168]	; (81de4 <menu_main+0x11c>)
   81d3a:	781a      	ldrb	r2, [r3, #0]
   81d3c:	4b29      	ldr	r3, [pc, #164]	; (81de4 <menu_main+0x11c>)
   81d3e:	789b      	ldrb	r3, [r3, #2]
   81d40:	429a      	cmp	r2, r3
   81d42:	d941      	bls.n	81dc8 <menu_main+0x100>
            {
                menu_info.main.act_cursor_line--;
   81d44:	4b27      	ldr	r3, [pc, #156]	; (81de4 <menu_main+0x11c>)
   81d46:	781b      	ldrb	r3, [r3, #0]
   81d48:	3b01      	subs	r3, #1
   81d4a:	b2da      	uxtb	r2, r3
   81d4c:	4b25      	ldr	r3, [pc, #148]	; (81de4 <menu_main+0x11c>)
   81d4e:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   81d50:	4824      	ldr	r0, [pc, #144]	; (81de4 <menu_main+0x11c>)
   81d52:	4b25      	ldr	r3, [pc, #148]	; (81de8 <menu_main+0x120>)
   81d54:	4798      	blx	r3
            }
            break;
   81d56:	e037      	b.n	81dc8 <menu_main+0x100>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.main.act_cursor_line < menu_info.main.max_cursor_line)
   81d58:	4b22      	ldr	r3, [pc, #136]	; (81de4 <menu_main+0x11c>)
   81d5a:	781a      	ldrb	r2, [r3, #0]
   81d5c:	4b21      	ldr	r3, [pc, #132]	; (81de4 <menu_main+0x11c>)
   81d5e:	78db      	ldrb	r3, [r3, #3]
   81d60:	429a      	cmp	r2, r3
   81d62:	d233      	bcs.n	81dcc <menu_main+0x104>
            {
                menu_info.main.act_cursor_line++;
   81d64:	4b1f      	ldr	r3, [pc, #124]	; (81de4 <menu_main+0x11c>)
   81d66:	781b      	ldrb	r3, [r3, #0]
   81d68:	3301      	adds	r3, #1
   81d6a:	b2da      	uxtb	r2, r3
   81d6c:	4b1d      	ldr	r3, [pc, #116]	; (81de4 <menu_main+0x11c>)
   81d6e:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   81d70:	481c      	ldr	r0, [pc, #112]	; (81de4 <menu_main+0x11c>)
   81d72:	4b1d      	ldr	r3, [pc, #116]	; (81de8 <menu_main+0x120>)
   81d74:	4798      	blx	r3
            }
            break;
   81d76:	e029      	b.n	81dcc <menu_main+0x104>
        case EVENT_BUTTON_MID_P:
            {
                switch (menu_info.main.act_cursor_line)
   81d78:	4b1a      	ldr	r3, [pc, #104]	; (81de4 <menu_main+0x11c>)
   81d7a:	781b      	ldrb	r3, [r3, #0]
   81d7c:	2b03      	cmp	r3, #3
   81d7e:	d00b      	beq.n	81d98 <menu_main+0xd0>
   81d80:	2b04      	cmp	r3, #4
   81d82:	d010      	beq.n	81da6 <menu_main+0xde>
   81d84:	2b02      	cmp	r3, #2
   81d86:	d000      	beq.n	81d8a <menu_main+0xc2>
                    case 4:
                        act_menu = MENU_SETTINGS;
                        print_menu = 1;
                        break;
                    default:
                        break;
   81d88:	e014      	b.n	81db4 <menu_main+0xec>
                        act_menu = MENU_MATCH;
   81d8a:	4b18      	ldr	r3, [pc, #96]	; (81dec <menu_main+0x124>)
   81d8c:	2201      	movs	r2, #1
   81d8e:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81d90:	4b11      	ldr	r3, [pc, #68]	; (81dd8 <menu_main+0x110>)
   81d92:	2201      	movs	r2, #1
   81d94:	701a      	strb	r2, [r3, #0]
                        break;
   81d96:	e00d      	b.n	81db4 <menu_main+0xec>
                        act_menu = MENU_SENSORS;
   81d98:	4b14      	ldr	r3, [pc, #80]	; (81dec <menu_main+0x124>)
   81d9a:	2202      	movs	r2, #2
   81d9c:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81d9e:	4b0e      	ldr	r3, [pc, #56]	; (81dd8 <menu_main+0x110>)
   81da0:	2201      	movs	r2, #1
   81da2:	701a      	strb	r2, [r3, #0]
                        break;
   81da4:	e006      	b.n	81db4 <menu_main+0xec>
                        act_menu = MENU_SETTINGS;
   81da6:	4b11      	ldr	r3, [pc, #68]	; (81dec <menu_main+0x124>)
   81da8:	2203      	movs	r2, #3
   81daa:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81dac:	4b0a      	ldr	r3, [pc, #40]	; (81dd8 <menu_main+0x110>)
   81dae:	2201      	movs	r2, #1
   81db0:	701a      	strb	r2, [r3, #0]
                        break;
   81db2:	bf00      	nop
                }
            }
            break;
   81db4:	e00b      	b.n	81dce <menu_main+0x106>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SHUTDOWN;
   81db6:	4b0d      	ldr	r3, [pc, #52]	; (81dec <menu_main+0x124>)
   81db8:	2209      	movs	r2, #9
   81dba:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81dbc:	4b06      	ldr	r3, [pc, #24]	; (81dd8 <menu_main+0x110>)
   81dbe:	2201      	movs	r2, #1
   81dc0:	701a      	strb	r2, [r3, #0]
            break;
   81dc2:	e004      	b.n	81dce <menu_main+0x106>
        default:
            break;
   81dc4:	bf00      	nop
   81dc6:	e002      	b.n	81dce <menu_main+0x106>
            break;
   81dc8:	bf00      	nop
   81dca:	e000      	b.n	81dce <menu_main+0x106>
            break;
   81dcc:	bf00      	nop
    }
}
   81dce:	bf00      	nop
   81dd0:	3708      	adds	r7, #8
   81dd2:	46bd      	mov	sp, r7
   81dd4:	bd80      	pop	{r7, pc}
   81dd6:	bf00      	nop
   81dd8:	2007018c 	.word	0x2007018c
   81ddc:	000825fd 	.word	0x000825fd
   81de0:	000831d9 	.word	0x000831d9
   81de4:	20070190 	.word	0x20070190
   81de8:	0008273d 	.word	0x0008273d
   81dec:	20070dbc 	.word	0x20070dbc

00081df0 <menu_match>:

static void menu_match(event_t event1)
{
   81df0:	b480      	push	{r7}
   81df2:	b083      	sub	sp, #12
   81df4:	af00      	add	r7, sp, #0
   81df6:	4603      	mov	r3, r0
   81df8:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81dfa:	79fb      	ldrb	r3, [r7, #7]
   81dfc:	2b10      	cmp	r3, #16
   81dfe:	d105      	bne.n	81e0c <menu_match+0x1c>
    {
        act_menu = MENU_MAIN;
   81e00:	4b05      	ldr	r3, [pc, #20]	; (81e18 <menu_match+0x28>)
   81e02:	2200      	movs	r2, #0
   81e04:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81e06:	4b05      	ldr	r3, [pc, #20]	; (81e1c <menu_match+0x2c>)
   81e08:	2201      	movs	r2, #1
   81e0a:	701a      	strb	r2, [r3, #0]
    }
}
   81e0c:	bf00      	nop
   81e0e:	370c      	adds	r7, #12
   81e10:	46bd      	mov	sp, r7
   81e12:	bc80      	pop	{r7}
   81e14:	4770      	bx	lr
   81e16:	bf00      	nop
   81e18:	20070dbc 	.word	0x20070dbc
   81e1c:	2007018c 	.word	0x2007018c

00081e20 <menu_sensors>:

static void menu_sensors(event_t event1)
{
   81e20:	b580      	push	{r7, lr}
   81e22:	b082      	sub	sp, #8
   81e24:	af00      	add	r7, sp, #0
   81e26:	4603      	mov	r3, r0
   81e28:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   81e2a:	4b40      	ldr	r3, [pc, #256]	; (81f2c <menu_sensors+0x10c>)
   81e2c:	781b      	ldrb	r3, [r3, #0]
   81e2e:	2b00      	cmp	r3, #0
   81e30:	d004      	beq.n	81e3c <menu_sensors+0x1c>
    {
        print_menu = 0;
   81e32:	4b3e      	ldr	r3, [pc, #248]	; (81f2c <menu_sensors+0x10c>)
   81e34:	2200      	movs	r2, #0
   81e36:	701a      	strb	r2, [r3, #0]
        print_menu_sensors();
   81e38:	4b3d      	ldr	r3, [pc, #244]	; (81f30 <menu_sensors+0x110>)
   81e3a:	4798      	blx	r3
    }
    
    switch(event1)
   81e3c:	79fb      	ldrb	r3, [r7, #7]
   81e3e:	3b01      	subs	r3, #1
   81e40:	2b0f      	cmp	r3, #15
   81e42:	d869      	bhi.n	81f18 <menu_sensors+0xf8>
   81e44:	a201      	add	r2, pc, #4	; (adr r2, 81e4c <menu_sensors+0x2c>)
   81e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81e4a:	bf00      	nop
   81e4c:	00081e8d 	.word	0x00081e8d
   81e50:	00081f19 	.word	0x00081f19
   81e54:	00081f19 	.word	0x00081f19
   81e58:	00081f19 	.word	0x00081f19
   81e5c:	00081f19 	.word	0x00081f19
   81e60:	00081f19 	.word	0x00081f19
   81e64:	00081ecd 	.word	0x00081ecd
   81e68:	00081f19 	.word	0x00081f19
   81e6c:	00081f19 	.word	0x00081f19
   81e70:	00081f19 	.word	0x00081f19
   81e74:	00081f19 	.word	0x00081f19
   81e78:	00081f19 	.word	0x00081f19
   81e7c:	00081ead 	.word	0x00081ead
   81e80:	00081f19 	.word	0x00081f19
   81e84:	00081f19 	.word	0x00081f19
   81e88:	00081f0b 	.word	0x00081f0b
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.sensors.act_cursor_line > menu_info.sensors.min_cursor_line)
   81e8c:	4b29      	ldr	r3, [pc, #164]	; (81f34 <menu_sensors+0x114>)
   81e8e:	791a      	ldrb	r2, [r3, #4]
   81e90:	4b28      	ldr	r3, [pc, #160]	; (81f34 <menu_sensors+0x114>)
   81e92:	799b      	ldrb	r3, [r3, #6]
   81e94:	429a      	cmp	r2, r3
   81e96:	d941      	bls.n	81f1c <menu_sensors+0xfc>
            {
                menu_info.sensors.act_cursor_line--;
   81e98:	4b26      	ldr	r3, [pc, #152]	; (81f34 <menu_sensors+0x114>)
   81e9a:	791b      	ldrb	r3, [r3, #4]
   81e9c:	3b01      	subs	r3, #1
   81e9e:	b2da      	uxtb	r2, r3
   81ea0:	4b24      	ldr	r3, [pc, #144]	; (81f34 <menu_sensors+0x114>)
   81ea2:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   81ea4:	4824      	ldr	r0, [pc, #144]	; (81f38 <menu_sensors+0x118>)
   81ea6:	4b25      	ldr	r3, [pc, #148]	; (81f3c <menu_sensors+0x11c>)
   81ea8:	4798      	blx	r3
            }
            break;
   81eaa:	e037      	b.n	81f1c <menu_sensors+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.sensors.act_cursor_line < menu_info.sensors.max_cursor_line)
   81eac:	4b21      	ldr	r3, [pc, #132]	; (81f34 <menu_sensors+0x114>)
   81eae:	791a      	ldrb	r2, [r3, #4]
   81eb0:	4b20      	ldr	r3, [pc, #128]	; (81f34 <menu_sensors+0x114>)
   81eb2:	79db      	ldrb	r3, [r3, #7]
   81eb4:	429a      	cmp	r2, r3
   81eb6:	d233      	bcs.n	81f20 <menu_sensors+0x100>
            {
                menu_info.sensors.act_cursor_line++;
   81eb8:	4b1e      	ldr	r3, [pc, #120]	; (81f34 <menu_sensors+0x114>)
   81eba:	791b      	ldrb	r3, [r3, #4]
   81ebc:	3301      	adds	r3, #1
   81ebe:	b2da      	uxtb	r2, r3
   81ec0:	4b1c      	ldr	r3, [pc, #112]	; (81f34 <menu_sensors+0x114>)
   81ec2:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   81ec4:	481c      	ldr	r0, [pc, #112]	; (81f38 <menu_sensors+0x118>)
   81ec6:	4b1d      	ldr	r3, [pc, #116]	; (81f3c <menu_sensors+0x11c>)
   81ec8:	4798      	blx	r3
            }
            break;
   81eca:	e029      	b.n	81f20 <menu_sensors+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.sensors.act_cursor_line)
   81ecc:	4b19      	ldr	r3, [pc, #100]	; (81f34 <menu_sensors+0x114>)
   81ece:	791b      	ldrb	r3, [r3, #4]
   81ed0:	2b02      	cmp	r3, #2
   81ed2:	d00b      	beq.n	81eec <menu_sensors+0xcc>
   81ed4:	2b03      	cmp	r3, #3
   81ed6:	d010      	beq.n	81efa <menu_sensors+0xda>
   81ed8:	2b01      	cmp	r3, #1
   81eda:	d000      	beq.n	81ede <menu_sensors+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   81edc:	e014      	b.n	81f08 <menu_sensors+0xe8>
                    act_menu = MENU_BALL;
   81ede:	4b18      	ldr	r3, [pc, #96]	; (81f40 <menu_sensors+0x120>)
   81ee0:	2204      	movs	r2, #4
   81ee2:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81ee4:	4b11      	ldr	r3, [pc, #68]	; (81f2c <menu_sensors+0x10c>)
   81ee6:	2201      	movs	r2, #1
   81ee8:	701a      	strb	r2, [r3, #0]
                    break;
   81eea:	e00d      	b.n	81f08 <menu_sensors+0xe8>
                    act_menu = MENU_COMPASS;
   81eec:	4b14      	ldr	r3, [pc, #80]	; (81f40 <menu_sensors+0x120>)
   81eee:	2207      	movs	r2, #7
   81ef0:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81ef2:	4b0e      	ldr	r3, [pc, #56]	; (81f2c <menu_sensors+0x10c>)
   81ef4:	2201      	movs	r2, #1
   81ef6:	701a      	strb	r2, [r3, #0]
                    break;
   81ef8:	e006      	b.n	81f08 <menu_sensors+0xe8>
                    act_menu = MENU_LINE;
   81efa:	4b11      	ldr	r3, [pc, #68]	; (81f40 <menu_sensors+0x120>)
   81efc:	2205      	movs	r2, #5
   81efe:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81f00:	4b0a      	ldr	r3, [pc, #40]	; (81f2c <menu_sensors+0x10c>)
   81f02:	2201      	movs	r2, #1
   81f04:	701a      	strb	r2, [r3, #0]
                    break;
   81f06:	bf00      	nop
            }
            break;
   81f08:	e00b      	b.n	81f22 <menu_sensors+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   81f0a:	4b0d      	ldr	r3, [pc, #52]	; (81f40 <menu_sensors+0x120>)
   81f0c:	2200      	movs	r2, #0
   81f0e:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81f10:	4b06      	ldr	r3, [pc, #24]	; (81f2c <menu_sensors+0x10c>)
   81f12:	2201      	movs	r2, #1
   81f14:	701a      	strb	r2, [r3, #0]
            break;
   81f16:	e004      	b.n	81f22 <menu_sensors+0x102>
        default:
            break;
   81f18:	bf00      	nop
   81f1a:	e002      	b.n	81f22 <menu_sensors+0x102>
            break;
   81f1c:	bf00      	nop
   81f1e:	e000      	b.n	81f22 <menu_sensors+0x102>
            break;
   81f20:	bf00      	nop
    }
}
   81f22:	bf00      	nop
   81f24:	3708      	adds	r7, #8
   81f26:	46bd      	mov	sp, r7
   81f28:	bd80      	pop	{r7, pc}
   81f2a:	bf00      	nop
   81f2c:	2007018c 	.word	0x2007018c
   81f30:	0008266d 	.word	0x0008266d
   81f34:	20070190 	.word	0x20070190
   81f38:	20070194 	.word	0x20070194
   81f3c:	0008273d 	.word	0x0008273d
   81f40:	20070dbc 	.word	0x20070dbc

00081f44 <menu_ball>:

static void menu_ball(event_t event1)
{
   81f44:	b580      	push	{r7, lr}
   81f46:	b082      	sub	sp, #8
   81f48:	af00      	add	r7, sp, #0
   81f4a:	4603      	mov	r3, r0
   81f4c:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   81f4e:	4b0d      	ldr	r3, [pc, #52]	; (81f84 <menu_ball+0x40>)
   81f50:	781b      	ldrb	r3, [r3, #0]
   81f52:	2b00      	cmp	r3, #0
   81f54:	d004      	beq.n	81f60 <menu_ball+0x1c>
    {
        print_menu = 0;
   81f56:	4b0b      	ldr	r3, [pc, #44]	; (81f84 <menu_ball+0x40>)
   81f58:	2200      	movs	r2, #0
   81f5a:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81f5c:	4b0a      	ldr	r3, [pc, #40]	; (81f88 <menu_ball+0x44>)
   81f5e:	4798      	blx	r3
    {
        lcd_print_s(2, 0, "Direction: no ball");
    }
    
    sprintf(sprintf_buf, "Having ball: %1d", rpi_rx.ibit.have_ball);*/
    lcd_print_s(3, 0, sprintf_buf);
   81f60:	4a0a      	ldr	r2, [pc, #40]	; (81f8c <menu_ball+0x48>)
   81f62:	2100      	movs	r1, #0
   81f64:	2003      	movs	r0, #3
   81f66:	4b0a      	ldr	r3, [pc, #40]	; (81f90 <menu_ball+0x4c>)
   81f68:	4798      	blx	r3
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81f6a:	79fb      	ldrb	r3, [r7, #7]
   81f6c:	2b10      	cmp	r3, #16
   81f6e:	d105      	bne.n	81f7c <menu_ball+0x38>
    {
        act_menu = MENU_SENSORS;
   81f70:	4b08      	ldr	r3, [pc, #32]	; (81f94 <menu_ball+0x50>)
   81f72:	2202      	movs	r2, #2
   81f74:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81f76:	4b03      	ldr	r3, [pc, #12]	; (81f84 <menu_ball+0x40>)
   81f78:	2201      	movs	r2, #1
   81f7a:	701a      	strb	r2, [r3, #0]
    }
}
   81f7c:	bf00      	nop
   81f7e:	3708      	adds	r7, #8
   81f80:	46bd      	mov	sp, r7
   81f82:	bd80      	pop	{r7, pc}
   81f84:	2007018c 	.word	0x2007018c
   81f88:	0008167d 	.word	0x0008167d
   81f8c:	20070e68 	.word	0x20070e68
   81f90:	0008169d 	.word	0x0008169d
   81f94:	20070dbc 	.word	0x20070dbc

00081f98 <menu_compass>:

static void menu_compass(event_t event1)
{
   81f98:	b590      	push	{r4, r7, lr}
   81f9a:	b083      	sub	sp, #12
   81f9c:	af00      	add	r7, sp, #0
   81f9e:	4603      	mov	r3, r0
   81fa0:	71fb      	strb	r3, [r7, #7]
    static uint16_t prev_direction = 0;
    
    if(print_menu)
   81fa2:	4b26      	ldr	r3, [pc, #152]	; (8203c <menu_compass+0xa4>)
   81fa4:	781b      	ldrb	r3, [r3, #0]
   81fa6:	2b00      	cmp	r3, #0
   81fa8:	d009      	beq.n	81fbe <menu_compass+0x26>
    {
        print_menu = 0;
   81faa:	4b24      	ldr	r3, [pc, #144]	; (8203c <menu_compass+0xa4>)
   81fac:	2200      	movs	r2, #0
   81fae:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81fb0:	4b23      	ldr	r3, [pc, #140]	; (82040 <menu_compass+0xa8>)
   81fb2:	4798      	blx	r3
        lcd_print_s(4, 2, "press mid to cal");
   81fb4:	4a23      	ldr	r2, [pc, #140]	; (82044 <menu_compass+0xac>)
   81fb6:	2102      	movs	r1, #2
   81fb8:	2004      	movs	r0, #4
   81fba:	4b23      	ldr	r3, [pc, #140]	; (82048 <menu_compass+0xb0>)
   81fbc:	4798      	blx	r3
    }
    
    update_compass();
   81fbe:	4b23      	ldr	r3, [pc, #140]	; (8204c <menu_compass+0xb4>)
   81fc0:	4798      	blx	r3
    if(direction != prev_direction)
   81fc2:	4b23      	ldr	r3, [pc, #140]	; (82050 <menu_compass+0xb8>)
   81fc4:	881a      	ldrh	r2, [r3, #0]
   81fc6:	4b23      	ldr	r3, [pc, #140]	; (82054 <menu_compass+0xbc>)
   81fc8:	881b      	ldrh	r3, [r3, #0]
   81fca:	429a      	cmp	r2, r3
   81fcc:	d01e      	beq.n	8200c <menu_compass+0x74>
    {
        prev_direction = direction;
   81fce:	4b20      	ldr	r3, [pc, #128]	; (82050 <menu_compass+0xb8>)
   81fd0:	881a      	ldrh	r2, [r3, #0]
   81fd2:	4b20      	ldr	r3, [pc, #128]	; (82054 <menu_compass+0xbc>)
   81fd4:	801a      	strh	r2, [r3, #0]
        sprintf(sprintf_buf, "  Direction: %3.1f  ", (float)direction / 10.0);
   81fd6:	4b1e      	ldr	r3, [pc, #120]	; (82050 <menu_compass+0xb8>)
   81fd8:	881a      	ldrh	r2, [r3, #0]
   81fda:	4b1f      	ldr	r3, [pc, #124]	; (82058 <menu_compass+0xc0>)
   81fdc:	4610      	mov	r0, r2
   81fde:	4798      	blx	r3
   81fe0:	4602      	mov	r2, r0
   81fe2:	4b1e      	ldr	r3, [pc, #120]	; (8205c <menu_compass+0xc4>)
   81fe4:	4610      	mov	r0, r2
   81fe6:	4798      	blx	r3
   81fe8:	4c1d      	ldr	r4, [pc, #116]	; (82060 <menu_compass+0xc8>)
   81fea:	f04f 0200 	mov.w	r2, #0
   81fee:	4b1d      	ldr	r3, [pc, #116]	; (82064 <menu_compass+0xcc>)
   81ff0:	47a0      	blx	r4
   81ff2:	4603      	mov	r3, r0
   81ff4:	460c      	mov	r4, r1
   81ff6:	461a      	mov	r2, r3
   81ff8:	4623      	mov	r3, r4
   81ffa:	491b      	ldr	r1, [pc, #108]	; (82068 <menu_compass+0xd0>)
   81ffc:	481b      	ldr	r0, [pc, #108]	; (8206c <menu_compass+0xd4>)
   81ffe:	4c1c      	ldr	r4, [pc, #112]	; (82070 <menu_compass+0xd8>)
   82000:	47a0      	blx	r4
        lcd_print_s(2, 0, sprintf_buf);
   82002:	4a1a      	ldr	r2, [pc, #104]	; (8206c <menu_compass+0xd4>)
   82004:	2100      	movs	r1, #0
   82006:	2002      	movs	r0, #2
   82008:	4b0f      	ldr	r3, [pc, #60]	; (82048 <menu_compass+0xb0>)
   8200a:	4798      	blx	r3
    }
    
    switch(event1)
   8200c:	79fb      	ldrb	r3, [r7, #7]
   8200e:	2b07      	cmp	r3, #7
   82010:	d002      	beq.n	82018 <menu_compass+0x80>
   82012:	2b10      	cmp	r3, #16
   82014:	d007      	beq.n	82026 <menu_compass+0x8e>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SENSORS;
            print_menu = 1;
            break;
        default:
            break;
   82016:	e00d      	b.n	82034 <menu_compass+0x9c>
            act_menu = MENU_COMPASS_CALIBRATION;
   82018:	4b16      	ldr	r3, [pc, #88]	; (82074 <menu_compass+0xdc>)
   8201a:	2208      	movs	r2, #8
   8201c:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   8201e:	4b07      	ldr	r3, [pc, #28]	; (8203c <menu_compass+0xa4>)
   82020:	2201      	movs	r2, #1
   82022:	701a      	strb	r2, [r3, #0]
            break;
   82024:	e006      	b.n	82034 <menu_compass+0x9c>
            act_menu = MENU_SENSORS;
   82026:	4b13      	ldr	r3, [pc, #76]	; (82074 <menu_compass+0xdc>)
   82028:	2202      	movs	r2, #2
   8202a:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   8202c:	4b03      	ldr	r3, [pc, #12]	; (8203c <menu_compass+0xa4>)
   8202e:	2201      	movs	r2, #1
   82030:	701a      	strb	r2, [r3, #0]
            break;
   82032:	bf00      	nop
    }
}
   82034:	bf00      	nop
   82036:	370c      	adds	r7, #12
   82038:	46bd      	mov	sp, r7
   8203a:	bd90      	pop	{r4, r7, pc}
   8203c:	2007018c 	.word	0x2007018c
   82040:	0008167d 	.word	0x0008167d
   82044:	000897c4 	.word	0x000897c4
   82048:	0008169d 	.word	0x0008169d
   8204c:	000813b9 	.word	0x000813b9
   82050:	20070e38 	.word	0x20070e38
   82054:	20070dc0 	.word	0x20070dc0
   82058:	000851f9 	.word	0x000851f9
   8205c:	00084bc1 	.word	0x00084bc1
   82060:	00084ebd 	.word	0x00084ebd
   82064:	40240000 	.word	0x40240000
   82068:	000897d8 	.word	0x000897d8
   8206c:	20070e68 	.word	0x20070e68
   82070:	00085859 	.word	0x00085859
   82074:	20070dbc 	.word	0x20070dbc

00082078 <menu_compass_calibration>:

static void menu_compass_calibration(event_t event1)
{
   82078:	b580      	push	{r7, lr}
   8207a:	b084      	sub	sp, #16
   8207c:	af00      	add	r7, sp, #0
   8207e:	4603      	mov	r3, r0
   82080:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   82082:	4b2e      	ldr	r3, [pc, #184]	; (8213c <menu_compass_calibration+0xc4>)
   82084:	781b      	ldrb	r3, [r3, #0]
   82086:	2b00      	cmp	r3, #0
   82088:	d016      	beq.n	820b8 <menu_compass_calibration+0x40>
    {
        print_menu = 0;
   8208a:	4b2c      	ldr	r3, [pc, #176]	; (8213c <menu_compass_calibration+0xc4>)
   8208c:	2200      	movs	r2, #0
   8208e:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   82090:	4b2b      	ldr	r3, [pc, #172]	; (82140 <menu_compass_calibration+0xc8>)
   82092:	4798      	blx	r3
        lcd_print_s(2, 1, "calibrate compass");
   82094:	4a2b      	ldr	r2, [pc, #172]	; (82144 <menu_compass_calibration+0xcc>)
   82096:	2101      	movs	r1, #1
   82098:	2002      	movs	r0, #2
   8209a:	4b2b      	ldr	r3, [pc, #172]	; (82148 <menu_compass_calibration+0xd0>)
   8209c:	4798      	blx	r3
        sprintf(sprintf_buf, "  Direction: %1d  ", compass_cal_step + 1);
   8209e:	4b2b      	ldr	r3, [pc, #172]	; (8214c <menu_compass_calibration+0xd4>)
   820a0:	781b      	ldrb	r3, [r3, #0]
   820a2:	3301      	adds	r3, #1
   820a4:	461a      	mov	r2, r3
   820a6:	492a      	ldr	r1, [pc, #168]	; (82150 <menu_compass_calibration+0xd8>)
   820a8:	482a      	ldr	r0, [pc, #168]	; (82154 <menu_compass_calibration+0xdc>)
   820aa:	4b2b      	ldr	r3, [pc, #172]	; (82158 <menu_compass_calibration+0xe0>)
   820ac:	4798      	blx	r3
        lcd_print_s(3, 1, sprintf_buf);
   820ae:	4a29      	ldr	r2, [pc, #164]	; (82154 <menu_compass_calibration+0xdc>)
   820b0:	2101      	movs	r1, #1
   820b2:	2003      	movs	r0, #3
   820b4:	4b24      	ldr	r3, [pc, #144]	; (82148 <menu_compass_calibration+0xd0>)
   820b6:	4798      	blx	r3
    }
    
    if(event1 == EVENT_BUTTON_MID_P)
   820b8:	79fb      	ldrb	r3, [r7, #7]
   820ba:	2b07      	cmp	r3, #7
   820bc:	d139      	bne.n	82132 <menu_compass_calibration+0xba>
    {
        twi_packet_t *tx_packet = twi_get_tx_packet();
   820be:	4b27      	ldr	r3, [pc, #156]	; (8215c <menu_compass_calibration+0xe4>)
   820c0:	4798      	blx	r3
   820c2:	60f8      	str	r0, [r7, #12]
        
        tx_packet->chip = 0x60;
   820c4:	68fb      	ldr	r3, [r7, #12]
   820c6:	2260      	movs	r2, #96	; 0x60
   820c8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        tx_packet->addr[0] = 0x0f;
   820cc:	68fb      	ldr	r3, [r7, #12]
   820ce:	220f      	movs	r2, #15
   820d0:	701a      	strb	r2, [r3, #0]
        tx_packet->addr_length = 1;
   820d2:	68fb      	ldr	r3, [r7, #12]
   820d4:	2201      	movs	r2, #1
   820d6:	605a      	str	r2, [r3, #4]
        
        tx_packet->buffer[0] = 0xff;
   820d8:	68fb      	ldr	r3, [r7, #12]
   820da:	22ff      	movs	r2, #255	; 0xff
   820dc:	721a      	strb	r2, [r3, #8]
        tx_packet->length = 1;
   820de:	68fb      	ldr	r3, [r7, #12]
   820e0:	2201      	movs	r2, #1
   820e2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        
        set_compass_is_busy();
   820e6:	4b1e      	ldr	r3, [pc, #120]	; (82160 <menu_compass_calibration+0xe8>)
   820e8:	4798      	blx	r3
        twi_pdc_master_write(TWI0, tx_packet);
   820ea:	68f9      	ldr	r1, [r7, #12]
   820ec:	481d      	ldr	r0, [pc, #116]	; (82164 <menu_compass_calibration+0xec>)
   820ee:	4b1e      	ldr	r3, [pc, #120]	; (82168 <menu_compass_calibration+0xf0>)
   820f0:	4798      	blx	r3
        while(compass_is_busy());
   820f2:	bf00      	nop
   820f4:	4b1d      	ldr	r3, [pc, #116]	; (8216c <menu_compass_calibration+0xf4>)
   820f6:	4798      	blx	r3
   820f8:	4603      	mov	r3, r0
   820fa:	2b00      	cmp	r3, #0
   820fc:	d1fa      	bne.n	820f4 <menu_compass_calibration+0x7c>
        mdelay(500);
   820fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   82102:	4b1b      	ldr	r3, [pc, #108]	; (82170 <menu_compass_calibration+0xf8>)
   82104:	4798      	blx	r3
        
        compass_cal_step++;
   82106:	4b11      	ldr	r3, [pc, #68]	; (8214c <menu_compass_calibration+0xd4>)
   82108:	781b      	ldrb	r3, [r3, #0]
   8210a:	3301      	adds	r3, #1
   8210c:	b2da      	uxtb	r2, r3
   8210e:	4b0f      	ldr	r3, [pc, #60]	; (8214c <menu_compass_calibration+0xd4>)
   82110:	701a      	strb	r2, [r3, #0]
        
        if(compass_cal_step == 4)
   82112:	4b0e      	ldr	r3, [pc, #56]	; (8214c <menu_compass_calibration+0xd4>)
   82114:	781b      	ldrb	r3, [r3, #0]
   82116:	2b04      	cmp	r3, #4
   82118:	d108      	bne.n	8212c <menu_compass_calibration+0xb4>
        {
            compass_cal_step = 0;
   8211a:	4b0c      	ldr	r3, [pc, #48]	; (8214c <menu_compass_calibration+0xd4>)
   8211c:	2200      	movs	r2, #0
   8211e:	701a      	strb	r2, [r3, #0]
            act_menu = MENU_COMPASS;
   82120:	4b14      	ldr	r3, [pc, #80]	; (82174 <menu_compass_calibration+0xfc>)
   82122:	2207      	movs	r2, #7
   82124:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82126:	4b05      	ldr	r3, [pc, #20]	; (8213c <menu_compass_calibration+0xc4>)
   82128:	2201      	movs	r2, #1
   8212a:	701a      	strb	r2, [r3, #0]
        }
        print_menu = 1;
   8212c:	4b03      	ldr	r3, [pc, #12]	; (8213c <menu_compass_calibration+0xc4>)
   8212e:	2201      	movs	r2, #1
   82130:	701a      	strb	r2, [r3, #0]
    }
}
   82132:	bf00      	nop
   82134:	3710      	adds	r7, #16
   82136:	46bd      	mov	sp, r7
   82138:	bd80      	pop	{r7, pc}
   8213a:	bf00      	nop
   8213c:	2007018c 	.word	0x2007018c
   82140:	0008167d 	.word	0x0008167d
   82144:	000897f0 	.word	0x000897f0
   82148:	0008169d 	.word	0x0008169d
   8214c:	20070dbd 	.word	0x20070dbd
   82150:	00089804 	.word	0x00089804
   82154:	20070e68 	.word	0x20070e68
   82158:	00085859 	.word	0x00085859
   8215c:	00080f0d 	.word	0x00080f0d
   82160:	00081449 	.word	0x00081449
   82164:	4008c000 	.word	0x4008c000
   82168:	0008100d 	.word	0x0008100d
   8216c:	00081461 	.word	0x00081461
   82170:	00083161 	.word	0x00083161
   82174:	20070dbc 	.word	0x20070dbc

00082178 <menu_line>:

static void menu_line(event_t event1)
{
   82178:	b5f0      	push	{r4, r5, r6, r7, lr}
   8217a:	b08f      	sub	sp, #60	; 0x3c
   8217c:	af0a      	add	r7, sp, #40	; 0x28
   8217e:	4603      	mov	r3, r0
   82180:	73fb      	strb	r3, [r7, #15]
    static uint16_t prev_line_values;

    if(print_menu)
   82182:	4b59      	ldr	r3, [pc, #356]	; (822e8 <menu_line+0x170>)
   82184:	781b      	ldrb	r3, [r3, #0]
   82186:	2b00      	cmp	r3, #0
   82188:	d001      	beq.n	8218e <menu_line+0x16>
    {
        lcd_clear();
   8218a:	4b58      	ldr	r3, [pc, #352]	; (822ec <menu_line+0x174>)
   8218c:	4798      	blx	r3
    }

    if(stm.line.all != prev_line_values || print_menu)
   8218e:	4b58      	ldr	r3, [pc, #352]	; (822f0 <menu_line+0x178>)
   82190:	889a      	ldrh	r2, [r3, #4]
   82192:	4b58      	ldr	r3, [pc, #352]	; (822f4 <menu_line+0x17c>)
   82194:	881b      	ldrh	r3, [r3, #0]
   82196:	429a      	cmp	r2, r3
   82198:	d104      	bne.n	821a4 <menu_line+0x2c>
   8219a:	4b53      	ldr	r3, [pc, #332]	; (822e8 <menu_line+0x170>)
   8219c:	781b      	ldrb	r3, [r3, #0]
   8219e:	2b00      	cmp	r3, #0
   821a0:	f000 8087 	beq.w	822b2 <menu_line+0x13a>
    {
        sprintf(sprintf_buf, "See: %1d", stm.line.see);
   821a4:	4b52      	ldr	r3, [pc, #328]	; (822f0 <menu_line+0x178>)
   821a6:	799b      	ldrb	r3, [r3, #6]
   821a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
   821ac:	b2db      	uxtb	r3, r3
   821ae:	461a      	mov	r2, r3
   821b0:	4951      	ldr	r1, [pc, #324]	; (822f8 <menu_line+0x180>)
   821b2:	4852      	ldr	r0, [pc, #328]	; (822fc <menu_line+0x184>)
   821b4:	4b52      	ldr	r3, [pc, #328]	; (82300 <menu_line+0x188>)
   821b6:	4798      	blx	r3
        lcd_print_s(1, 0, sprintf_buf);
   821b8:	4a50      	ldr	r2, [pc, #320]	; (822fc <menu_line+0x184>)
   821ba:	2100      	movs	r1, #0
   821bc:	2001      	movs	r0, #1
   821be:	4b51      	ldr	r3, [pc, #324]	; (82304 <menu_line+0x18c>)
   821c0:	4798      	blx	r3
        sprintf(sprintf_buf, "Esc: %4d", stm.line.esc - 180);
   821c2:	4b4b      	ldr	r3, [pc, #300]	; (822f0 <menu_line+0x178>)
   821c4:	88db      	ldrh	r3, [r3, #6]
   821c6:	f3c3 0348 	ubfx	r3, r3, #1, #9
   821ca:	b29b      	uxth	r3, r3
   821cc:	3bb4      	subs	r3, #180	; 0xb4
   821ce:	461a      	mov	r2, r3
   821d0:	494d      	ldr	r1, [pc, #308]	; (82308 <menu_line+0x190>)
   821d2:	484a      	ldr	r0, [pc, #296]	; (822fc <menu_line+0x184>)
   821d4:	4b4a      	ldr	r3, [pc, #296]	; (82300 <menu_line+0x188>)
   821d6:	4798      	blx	r3
        lcd_print_s(2, 0, sprintf_buf);
   821d8:	4a48      	ldr	r2, [pc, #288]	; (822fc <menu_line+0x184>)
   821da:	2100      	movs	r1, #0
   821dc:	2002      	movs	r0, #2
   821de:	4b49      	ldr	r3, [pc, #292]	; (82304 <menu_line+0x18c>)
   821e0:	4798      	blx	r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   821e2:	4b43      	ldr	r3, [pc, #268]	; (822f0 <menu_line+0x178>)
   821e4:	791b      	ldrb	r3, [r3, #4]
   821e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
   821ea:	b2db      	uxtb	r3, r3
   821ec:	469e      	mov	lr, r3
   821ee:	4b40      	ldr	r3, [pc, #256]	; (822f0 <menu_line+0x178>)
   821f0:	791b      	ldrb	r3, [r3, #4]
   821f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   821f6:	b2db      	uxtb	r3, r3
   821f8:	469c      	mov	ip, r3
        stm.line.single.segment_3, stm.line.single.segment_4, stm.line.single.segment_5, stm.line.single.segment_6, stm.line.single.segment_7,
   821fa:	4b3d      	ldr	r3, [pc, #244]	; (822f0 <menu_line+0x178>)
   821fc:	791b      	ldrb	r3, [r3, #4]
   821fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
   82202:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82204:	461a      	mov	r2, r3
        stm.line.single.segment_3, stm.line.single.segment_4, stm.line.single.segment_5, stm.line.single.segment_6, stm.line.single.segment_7,
   82206:	4b3a      	ldr	r3, [pc, #232]	; (822f0 <menu_line+0x178>)
   82208:	791b      	ldrb	r3, [r3, #4]
   8220a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   8220e:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82210:	4619      	mov	r1, r3
        stm.line.single.segment_3, stm.line.single.segment_4, stm.line.single.segment_5, stm.line.single.segment_6, stm.line.single.segment_7,
   82212:	4b37      	ldr	r3, [pc, #220]	; (822f0 <menu_line+0x178>)
   82214:	791b      	ldrb	r3, [r3, #4]
   82216:	f3c3 1300 	ubfx	r3, r3, #4, #1
   8221a:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   8221c:	4618      	mov	r0, r3
        stm.line.single.segment_3, stm.line.single.segment_4, stm.line.single.segment_5, stm.line.single.segment_6, stm.line.single.segment_7,
   8221e:	4b34      	ldr	r3, [pc, #208]	; (822f0 <menu_line+0x178>)
   82220:	791b      	ldrb	r3, [r3, #4]
   82222:	f3c3 1340 	ubfx	r3, r3, #5, #1
   82226:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82228:	461c      	mov	r4, r3
        stm.line.single.segment_3, stm.line.single.segment_4, stm.line.single.segment_5, stm.line.single.segment_6, stm.line.single.segment_7,
   8222a:	4b31      	ldr	r3, [pc, #196]	; (822f0 <menu_line+0x178>)
   8222c:	791b      	ldrb	r3, [r3, #4]
   8222e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   82232:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82234:	461d      	mov	r5, r3
        stm.line.single.segment_8, stm.line.single.segment_9, stm.line.single.segment_10, stm.line.single.segment_11, stm.line.single.segment_12);
   82236:	4b2e      	ldr	r3, [pc, #184]	; (822f0 <menu_line+0x178>)
   82238:	791b      	ldrb	r3, [r3, #4]
   8223a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   8223e:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82240:	461e      	mov	r6, r3
        stm.line.single.segment_8, stm.line.single.segment_9, stm.line.single.segment_10, stm.line.single.segment_11, stm.line.single.segment_12);
   82242:	4b2b      	ldr	r3, [pc, #172]	; (822f0 <menu_line+0x178>)
   82244:	795b      	ldrb	r3, [r3, #5]
   82246:	f3c3 0300 	ubfx	r3, r3, #0, #1
   8224a:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   8224c:	60bb      	str	r3, [r7, #8]
        stm.line.single.segment_8, stm.line.single.segment_9, stm.line.single.segment_10, stm.line.single.segment_11, stm.line.single.segment_12);
   8224e:	4b28      	ldr	r3, [pc, #160]	; (822f0 <menu_line+0x178>)
   82250:	795b      	ldrb	r3, [r3, #5]
   82252:	f3c3 0340 	ubfx	r3, r3, #1, #1
   82256:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82258:	607b      	str	r3, [r7, #4]
        stm.line.single.segment_8, stm.line.single.segment_9, stm.line.single.segment_10, stm.line.single.segment_11, stm.line.single.segment_12);
   8225a:	4b25      	ldr	r3, [pc, #148]	; (822f0 <menu_line+0x178>)
   8225c:	795b      	ldrb	r3, [r3, #5]
   8225e:	f3c3 0380 	ubfx	r3, r3, #2, #1
   82262:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82264:	603b      	str	r3, [r7, #0]
        stm.line.single.segment_8, stm.line.single.segment_9, stm.line.single.segment_10, stm.line.single.segment_11, stm.line.single.segment_12);
   82266:	4b22      	ldr	r3, [pc, #136]	; (822f0 <menu_line+0x178>)
   82268:	795b      	ldrb	r3, [r3, #5]
   8226a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   8226e:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82270:	9309      	str	r3, [sp, #36]	; 0x24
   82272:	683b      	ldr	r3, [r7, #0]
   82274:	9308      	str	r3, [sp, #32]
   82276:	687b      	ldr	r3, [r7, #4]
   82278:	9307      	str	r3, [sp, #28]
   8227a:	68bb      	ldr	r3, [r7, #8]
   8227c:	9306      	str	r3, [sp, #24]
   8227e:	9605      	str	r6, [sp, #20]
   82280:	9504      	str	r5, [sp, #16]
   82282:	9403      	str	r4, [sp, #12]
   82284:	9002      	str	r0, [sp, #8]
   82286:	9101      	str	r1, [sp, #4]
   82288:	9200      	str	r2, [sp, #0]
   8228a:	4663      	mov	r3, ip
   8228c:	4672      	mov	r2, lr
   8228e:	491f      	ldr	r1, [pc, #124]	; (8230c <menu_line+0x194>)
   82290:	481a      	ldr	r0, [pc, #104]	; (822fc <menu_line+0x184>)
   82292:	4c1b      	ldr	r4, [pc, #108]	; (82300 <menu_line+0x188>)
   82294:	47a0      	blx	r4
        lcd_print_s(3, 0, sprintf_buf);
   82296:	4a19      	ldr	r2, [pc, #100]	; (822fc <menu_line+0x184>)
   82298:	2100      	movs	r1, #0
   8229a:	2003      	movs	r0, #3
   8229c:	4b19      	ldr	r3, [pc, #100]	; (82304 <menu_line+0x18c>)
   8229e:	4798      	blx	r3
        prev_line_values = stm.line.all;
   822a0:	4b13      	ldr	r3, [pc, #76]	; (822f0 <menu_line+0x178>)
   822a2:	889a      	ldrh	r2, [r3, #4]
   822a4:	4b13      	ldr	r3, [pc, #76]	; (822f4 <menu_line+0x17c>)
   822a6:	801a      	strh	r2, [r3, #0]
        lcd_print_s(4, 1, "press mid to cal");
   822a8:	4a19      	ldr	r2, [pc, #100]	; (82310 <menu_line+0x198>)
   822aa:	2101      	movs	r1, #1
   822ac:	2004      	movs	r0, #4
   822ae:	4b15      	ldr	r3, [pc, #84]	; (82304 <menu_line+0x18c>)
   822b0:	4798      	blx	r3
    }
    
    print_menu = false;
   822b2:	4b0d      	ldr	r3, [pc, #52]	; (822e8 <menu_line+0x170>)
   822b4:	2200      	movs	r2, #0
   822b6:	701a      	strb	r2, [r3, #0]

    switch(event1)
   822b8:	7bfb      	ldrb	r3, [r7, #15]
   822ba:	2b07      	cmp	r3, #7
   822bc:	d002      	beq.n	822c4 <menu_line+0x14c>
   822be:	2b10      	cmp	r3, #16
   822c0:	d007      	beq.n	822d2 <menu_line+0x15a>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SENSORS;
            print_menu = true;
            break;
        default:
            break;
   822c2:	e00d      	b.n	822e0 <menu_line+0x168>
            act_menu = MENU_LINE_CALIBRATION;
   822c4:	4b13      	ldr	r3, [pc, #76]	; (82314 <menu_line+0x19c>)
   822c6:	2206      	movs	r2, #6
   822c8:	701a      	strb	r2, [r3, #0]
            print_menu = true;
   822ca:	4b07      	ldr	r3, [pc, #28]	; (822e8 <menu_line+0x170>)
   822cc:	2201      	movs	r2, #1
   822ce:	701a      	strb	r2, [r3, #0]
            break;
   822d0:	e006      	b.n	822e0 <menu_line+0x168>
            act_menu = MENU_SENSORS;
   822d2:	4b10      	ldr	r3, [pc, #64]	; (82314 <menu_line+0x19c>)
   822d4:	2202      	movs	r2, #2
   822d6:	701a      	strb	r2, [r3, #0]
            print_menu = true;
   822d8:	4b03      	ldr	r3, [pc, #12]	; (822e8 <menu_line+0x170>)
   822da:	2201      	movs	r2, #1
   822dc:	701a      	strb	r2, [r3, #0]
            break;
   822de:	bf00      	nop
    }
}
   822e0:	bf00      	nop
   822e2:	3714      	adds	r7, #20
   822e4:	46bd      	mov	sp, r7
   822e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   822e8:	2007018c 	.word	0x2007018c
   822ec:	0008167d 	.word	0x0008167d
   822f0:	20070e20 	.word	0x20070e20
   822f4:	20070dc2 	.word	0x20070dc2
   822f8:	00089818 	.word	0x00089818
   822fc:	20070e68 	.word	0x20070e68
   82300:	00085859 	.word	0x00085859
   82304:	0008169d 	.word	0x0008169d
   82308:	00089824 	.word	0x00089824
   8230c:	00089830 	.word	0x00089830
   82310:	000897c4 	.word	0x000897c4
   82314:	20070dbc 	.word	0x20070dbc

00082318 <menu_line_calibration>:

static void menu_line_calibration(event_t event1)
{
   82318:	b580      	push	{r7, lr}
   8231a:	b082      	sub	sp, #8
   8231c:	af00      	add	r7, sp, #0
   8231e:	4603      	mov	r3, r0
   82320:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   82322:	4b21      	ldr	r3, [pc, #132]	; (823a8 <menu_line_calibration+0x90>)
   82324:	781b      	ldrb	r3, [r3, #0]
   82326:	2b00      	cmp	r3, #0
   82328:	d010      	beq.n	8234c <menu_line_calibration+0x34>
    {
        lcd_clear();
   8232a:	4b20      	ldr	r3, [pc, #128]	; (823ac <menu_line_calibration+0x94>)
   8232c:	4798      	blx	r3
        sprintf(sprintf_buf, "Cal value: %2d", mts.line_cal_value);
   8232e:	4b20      	ldr	r3, [pc, #128]	; (823b0 <menu_line_calibration+0x98>)
   82330:	785b      	ldrb	r3, [r3, #1]
   82332:	461a      	mov	r2, r3
   82334:	491f      	ldr	r1, [pc, #124]	; (823b4 <menu_line_calibration+0x9c>)
   82336:	4820      	ldr	r0, [pc, #128]	; (823b8 <menu_line_calibration+0xa0>)
   82338:	4b20      	ldr	r3, [pc, #128]	; (823bc <menu_line_calibration+0xa4>)
   8233a:	4798      	blx	r3
        lcd_print_s(2, 0, sprintf_buf);
   8233c:	4a1e      	ldr	r2, [pc, #120]	; (823b8 <menu_line_calibration+0xa0>)
   8233e:	2100      	movs	r1, #0
   82340:	2002      	movs	r0, #2
   82342:	4b1f      	ldr	r3, [pc, #124]	; (823c0 <menu_line_calibration+0xa8>)
   82344:	4798      	blx	r3
        print_menu = false;
   82346:	4b18      	ldr	r3, [pc, #96]	; (823a8 <menu_line_calibration+0x90>)
   82348:	2200      	movs	r2, #0
   8234a:	701a      	strb	r2, [r3, #0]
    }

    if(event1 == EVENT_BUTTON_LEFT_P)
   8234c:	79fb      	ldrb	r3, [r7, #7]
   8234e:	2b04      	cmp	r3, #4
   82350:	d10c      	bne.n	8236c <menu_line_calibration+0x54>
    {
        if(mts.line_cal_value > 0)
   82352:	4b17      	ldr	r3, [pc, #92]	; (823b0 <menu_line_calibration+0x98>)
   82354:	785b      	ldrb	r3, [r3, #1]
   82356:	2b00      	cmp	r3, #0
   82358:	d008      	beq.n	8236c <menu_line_calibration+0x54>
        {
            mts.line_cal_value -= 1;
   8235a:	4b15      	ldr	r3, [pc, #84]	; (823b0 <menu_line_calibration+0x98>)
   8235c:	785b      	ldrb	r3, [r3, #1]
   8235e:	3b01      	subs	r3, #1
   82360:	b2da      	uxtb	r2, r3
   82362:	4b13      	ldr	r3, [pc, #76]	; (823b0 <menu_line_calibration+0x98>)
   82364:	705a      	strb	r2, [r3, #1]
            print_menu = true;
   82366:	4b10      	ldr	r3, [pc, #64]	; (823a8 <menu_line_calibration+0x90>)
   82368:	2201      	movs	r2, #1
   8236a:	701a      	strb	r2, [r3, #0]
        }
    }

    if(event1 == EVENT_BUTTON_RIGHT_P)
   8236c:	79fb      	ldrb	r3, [r7, #7]
   8236e:	2b0a      	cmp	r3, #10
   82370:	d10c      	bne.n	8238c <menu_line_calibration+0x74>
    {
        if(mts.line_cal_value < 16)
   82372:	4b0f      	ldr	r3, [pc, #60]	; (823b0 <menu_line_calibration+0x98>)
   82374:	785b      	ldrb	r3, [r3, #1]
   82376:	2b0f      	cmp	r3, #15
   82378:	d808      	bhi.n	8238c <menu_line_calibration+0x74>
        {
            mts.line_cal_value += 1;
   8237a:	4b0d      	ldr	r3, [pc, #52]	; (823b0 <menu_line_calibration+0x98>)
   8237c:	785b      	ldrb	r3, [r3, #1]
   8237e:	3301      	adds	r3, #1
   82380:	b2da      	uxtb	r2, r3
   82382:	4b0b      	ldr	r3, [pc, #44]	; (823b0 <menu_line_calibration+0x98>)
   82384:	705a      	strb	r2, [r3, #1]
            print_menu = true;
   82386:	4b08      	ldr	r3, [pc, #32]	; (823a8 <menu_line_calibration+0x90>)
   82388:	2201      	movs	r2, #1
   8238a:	701a      	strb	r2, [r3, #0]
        }
    }
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   8238c:	79fb      	ldrb	r3, [r7, #7]
   8238e:	2b10      	cmp	r3, #16
   82390:	d105      	bne.n	8239e <menu_line_calibration+0x86>
    {
        act_menu = MENU_LINE;
   82392:	4b0c      	ldr	r3, [pc, #48]	; (823c4 <menu_line_calibration+0xac>)
   82394:	2205      	movs	r2, #5
   82396:	701a      	strb	r2, [r3, #0]
        print_menu = true;
   82398:	4b03      	ldr	r3, [pc, #12]	; (823a8 <menu_line_calibration+0x90>)
   8239a:	2201      	movs	r2, #1
   8239c:	701a      	strb	r2, [r3, #0]
    }
}
   8239e:	bf00      	nop
   823a0:	3708      	adds	r7, #8
   823a2:	46bd      	mov	sp, r7
   823a4:	bd80      	pop	{r7, pc}
   823a6:	bf00      	nop
   823a8:	2007018c 	.word	0x2007018c
   823ac:	0008167d 	.word	0x0008167d
   823b0:	20070e18 	.word	0x20070e18
   823b4:	0008985c 	.word	0x0008985c
   823b8:	20070e68 	.word	0x20070e68
   823bc:	00085859 	.word	0x00085859
   823c0:	0008169d 	.word	0x0008169d
   823c4:	20070dbc 	.word	0x20070dbc

000823c8 <menu_settings>:

static void menu_settings(event_t event1)
{
   823c8:	b580      	push	{r7, lr}
   823ca:	b082      	sub	sp, #8
   823cc:	af00      	add	r7, sp, #0
   823ce:	4603      	mov	r3, r0
   823d0:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   823d2:	4b40      	ldr	r3, [pc, #256]	; (824d4 <menu_settings+0x10c>)
   823d4:	781b      	ldrb	r3, [r3, #0]
   823d6:	2b00      	cmp	r3, #0
   823d8:	d004      	beq.n	823e4 <menu_settings+0x1c>
    {
        print_menu = 0;
   823da:	4b3e      	ldr	r3, [pc, #248]	; (824d4 <menu_settings+0x10c>)
   823dc:	2200      	movs	r2, #0
   823de:	701a      	strb	r2, [r3, #0]
        print_menu_settings();
   823e0:	4b3d      	ldr	r3, [pc, #244]	; (824d8 <menu_settings+0x110>)
   823e2:	4798      	blx	r3
    }
    
    switch(event1)
   823e4:	79fb      	ldrb	r3, [r7, #7]
   823e6:	3b01      	subs	r3, #1
   823e8:	2b0f      	cmp	r3, #15
   823ea:	d869      	bhi.n	824c0 <menu_settings+0xf8>
   823ec:	a201      	add	r2, pc, #4	; (adr r2, 823f4 <menu_settings+0x2c>)
   823ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   823f2:	bf00      	nop
   823f4:	00082435 	.word	0x00082435
   823f8:	000824c1 	.word	0x000824c1
   823fc:	000824c1 	.word	0x000824c1
   82400:	000824c1 	.word	0x000824c1
   82404:	000824c1 	.word	0x000824c1
   82408:	000824c1 	.word	0x000824c1
   8240c:	00082475 	.word	0x00082475
   82410:	000824c1 	.word	0x000824c1
   82414:	000824c1 	.word	0x000824c1
   82418:	000824c1 	.word	0x000824c1
   8241c:	000824c1 	.word	0x000824c1
   82420:	000824c1 	.word	0x000824c1
   82424:	00082455 	.word	0x00082455
   82428:	000824c1 	.word	0x000824c1
   8242c:	000824c1 	.word	0x000824c1
   82430:	000824b3 	.word	0x000824b3
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.settings.act_cursor_line > menu_info.settings.min_cursor_line)
   82434:	4b29      	ldr	r3, [pc, #164]	; (824dc <menu_settings+0x114>)
   82436:	7a1a      	ldrb	r2, [r3, #8]
   82438:	4b28      	ldr	r3, [pc, #160]	; (824dc <menu_settings+0x114>)
   8243a:	7a9b      	ldrb	r3, [r3, #10]
   8243c:	429a      	cmp	r2, r3
   8243e:	d941      	bls.n	824c4 <menu_settings+0xfc>
            {
                menu_info.settings.act_cursor_line--;
   82440:	4b26      	ldr	r3, [pc, #152]	; (824dc <menu_settings+0x114>)
   82442:	7a1b      	ldrb	r3, [r3, #8]
   82444:	3b01      	subs	r3, #1
   82446:	b2da      	uxtb	r2, r3
   82448:	4b24      	ldr	r3, [pc, #144]	; (824dc <menu_settings+0x114>)
   8244a:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   8244c:	4824      	ldr	r0, [pc, #144]	; (824e0 <menu_settings+0x118>)
   8244e:	4b25      	ldr	r3, [pc, #148]	; (824e4 <menu_settings+0x11c>)
   82450:	4798      	blx	r3
            }
            break;
   82452:	e037      	b.n	824c4 <menu_settings+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.settings.act_cursor_line < menu_info.settings.max_cursor_line)
   82454:	4b21      	ldr	r3, [pc, #132]	; (824dc <menu_settings+0x114>)
   82456:	7a1a      	ldrb	r2, [r3, #8]
   82458:	4b20      	ldr	r3, [pc, #128]	; (824dc <menu_settings+0x114>)
   8245a:	7adb      	ldrb	r3, [r3, #11]
   8245c:	429a      	cmp	r2, r3
   8245e:	d233      	bcs.n	824c8 <menu_settings+0x100>
            {
                menu_info.settings.act_cursor_line++;
   82460:	4b1e      	ldr	r3, [pc, #120]	; (824dc <menu_settings+0x114>)
   82462:	7a1b      	ldrb	r3, [r3, #8]
   82464:	3301      	adds	r3, #1
   82466:	b2da      	uxtb	r2, r3
   82468:	4b1c      	ldr	r3, [pc, #112]	; (824dc <menu_settings+0x114>)
   8246a:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   8246c:	481c      	ldr	r0, [pc, #112]	; (824e0 <menu_settings+0x118>)
   8246e:	4b1d      	ldr	r3, [pc, #116]	; (824e4 <menu_settings+0x11c>)
   82470:	4798      	blx	r3
            }
            break;
   82472:	e029      	b.n	824c8 <menu_settings+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.settings.act_cursor_line)
   82474:	4b19      	ldr	r3, [pc, #100]	; (824dc <menu_settings+0x114>)
   82476:	7a1b      	ldrb	r3, [r3, #8]
   82478:	2b02      	cmp	r3, #2
   8247a:	d00b      	beq.n	82494 <menu_settings+0xcc>
   8247c:	2b03      	cmp	r3, #3
   8247e:	d010      	beq.n	824a2 <menu_settings+0xda>
   82480:	2b01      	cmp	r3, #1
   82482:	d000      	beq.n	82486 <menu_settings+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   82484:	e014      	b.n	824b0 <menu_settings+0xe8>
                    act_menu = MENU_BALL;
   82486:	4b18      	ldr	r3, [pc, #96]	; (824e8 <menu_settings+0x120>)
   82488:	2204      	movs	r2, #4
   8248a:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   8248c:	4b11      	ldr	r3, [pc, #68]	; (824d4 <menu_settings+0x10c>)
   8248e:	2201      	movs	r2, #1
   82490:	701a      	strb	r2, [r3, #0]
                    break;
   82492:	e00d      	b.n	824b0 <menu_settings+0xe8>
                    act_menu = MENU_COMPASS;
   82494:	4b14      	ldr	r3, [pc, #80]	; (824e8 <menu_settings+0x120>)
   82496:	2207      	movs	r2, #7
   82498:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   8249a:	4b0e      	ldr	r3, [pc, #56]	; (824d4 <menu_settings+0x10c>)
   8249c:	2201      	movs	r2, #1
   8249e:	701a      	strb	r2, [r3, #0]
                    break;
   824a0:	e006      	b.n	824b0 <menu_settings+0xe8>
                    act_menu = MENU_LINE;
   824a2:	4b11      	ldr	r3, [pc, #68]	; (824e8 <menu_settings+0x120>)
   824a4:	2205      	movs	r2, #5
   824a6:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   824a8:	4b0a      	ldr	r3, [pc, #40]	; (824d4 <menu_settings+0x10c>)
   824aa:	2201      	movs	r2, #1
   824ac:	701a      	strb	r2, [r3, #0]
                    break;
   824ae:	bf00      	nop
            }
            break;
   824b0:	e00b      	b.n	824ca <menu_settings+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   824b2:	4b0d      	ldr	r3, [pc, #52]	; (824e8 <menu_settings+0x120>)
   824b4:	2200      	movs	r2, #0
   824b6:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   824b8:	4b06      	ldr	r3, [pc, #24]	; (824d4 <menu_settings+0x10c>)
   824ba:	2201      	movs	r2, #1
   824bc:	701a      	strb	r2, [r3, #0]
            break;
   824be:	e004      	b.n	824ca <menu_settings+0x102>
        default:
            break;
   824c0:	bf00      	nop
   824c2:	e002      	b.n	824ca <menu_settings+0x102>
            break;
   824c4:	bf00      	nop
   824c6:	e000      	b.n	824ca <menu_settings+0x102>
            break;
   824c8:	bf00      	nop
    }
}
   824ca:	bf00      	nop
   824cc:	3708      	adds	r7, #8
   824ce:	46bd      	mov	sp, r7
   824d0:	bd80      	pop	{r7, pc}
   824d2:	bf00      	nop
   824d4:	2007018c 	.word	0x2007018c
   824d8:	000826d5 	.word	0x000826d5
   824dc:	20070190 	.word	0x20070190
   824e0:	20070198 	.word	0x20070198
   824e4:	0008273d 	.word	0x0008273d
   824e8:	20070dbc 	.word	0x20070dbc

000824ec <menu_shutdown>:

static void menu_shutdown(event_t event1)
{
   824ec:	b580      	push	{r7, lr}
   824ee:	b082      	sub	sp, #8
   824f0:	af00      	add	r7, sp, #0
   824f2:	4603      	mov	r3, r0
   824f4:	71fb      	strb	r3, [r7, #7]
    if(shutdown_confirmed)
   824f6:	4b35      	ldr	r3, [pc, #212]	; (825cc <menu_shutdown+0xe0>)
   824f8:	781b      	ldrb	r3, [r3, #0]
   824fa:	2b00      	cmp	r3, #0
   824fc:	d043      	beq.n	82586 <menu_shutdown+0x9a>
    {
        lcd_clear();
   824fe:	4b34      	ldr	r3, [pc, #208]	; (825d0 <menu_shutdown+0xe4>)
   82500:	4798      	blx	r3
        lcd_print_s(2, 2, "shutting down...");
   82502:	4a34      	ldr	r2, [pc, #208]	; (825d4 <menu_shutdown+0xe8>)
   82504:	2102      	movs	r1, #2
   82506:	2002      	movs	r0, #2
   82508:	4b33      	ldr	r3, [pc, #204]	; (825d8 <menu_shutdown+0xec>)
   8250a:	4798      	blx	r3
        
        ioport_set_pin_level(LED_ONBOARD, 0);
   8250c:	2100      	movs	r1, #0
   8250e:	206a      	movs	r0, #106	; 0x6a
   82510:	4b32      	ldr	r3, [pc, #200]	; (825dc <menu_shutdown+0xf0>)
   82512:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   82514:	2100      	movs	r1, #0
   82516:	2066      	movs	r0, #102	; 0x66
   82518:	4b30      	ldr	r3, [pc, #192]	; (825dc <menu_shutdown+0xf0>)
   8251a:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   8251c:	2100      	movs	r1, #0
   8251e:	2067      	movs	r0, #103	; 0x67
   82520:	4b2e      	ldr	r3, [pc, #184]	; (825dc <menu_shutdown+0xf0>)
   82522:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   82524:	2100      	movs	r1, #0
   82526:	2068      	movs	r0, #104	; 0x68
   82528:	4b2c      	ldr	r3, [pc, #176]	; (825dc <menu_shutdown+0xf0>)
   8252a:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   8252c:	2100      	movs	r1, #0
   8252e:	2069      	movs	r0, #105	; 0x69
   82530:	4b2a      	ldr	r3, [pc, #168]	; (825dc <menu_shutdown+0xf0>)
   82532:	4798      	blx	r3
        pwm_channel_disable(PWM, MREAR);
        
        pwm_channel_disable(PWM, ENC_CLK);
        
        sensor_parameters.ibit.sleep_mode = 1;*/
        update_comm();
   82534:	4b2a      	ldr	r3, [pc, #168]	; (825e0 <menu_shutdown+0xf4>)
   82536:	4798      	blx	r3
        
        ioport_set_pin_level(RPI1, 0);
   82538:	2100      	movs	r1, #0
   8253a:	2001      	movs	r0, #1
   8253c:	4b27      	ldr	r3, [pc, #156]	; (825dc <menu_shutdown+0xf0>)
   8253e:	4798      	blx	r3
        while (ioport_get_pin_level(RPI2) == 1);
   82540:	bf00      	nop
   82542:	2008      	movs	r0, #8
   82544:	4b27      	ldr	r3, [pc, #156]	; (825e4 <menu_shutdown+0xf8>)
   82546:	4798      	blx	r3
   82548:	4603      	mov	r3, r0
   8254a:	2b00      	cmp	r3, #0
   8254c:	d1f9      	bne.n	82542 <menu_shutdown+0x56>
        mdelay(7500);
   8254e:	f641 504c 	movw	r0, #7500	; 0x1d4c
   82552:	4b25      	ldr	r3, [pc, #148]	; (825e8 <menu_shutdown+0xfc>)
   82554:	4798      	blx	r3
        
        lcd_set_backlight(LCD_LIGHT_OFF);
   82556:	2000      	movs	r0, #0
   82558:	4b24      	ldr	r3, [pc, #144]	; (825ec <menu_shutdown+0x100>)
   8255a:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   8255c:	4b1c      	ldr	r3, [pc, #112]	; (825d0 <menu_shutdown+0xe4>)
   8255e:	4798      	blx	r3
        mdelay(100);
   82560:	2064      	movs	r0, #100	; 0x64
   82562:	4b21      	ldr	r3, [pc, #132]	; (825e8 <menu_shutdown+0xfc>)
   82564:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_ON);
   82566:	2008      	movs	r0, #8
   82568:	4b20      	ldr	r3, [pc, #128]	; (825ec <menu_shutdown+0x100>)
   8256a:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   8256c:	4b18      	ldr	r3, [pc, #96]	; (825d0 <menu_shutdown+0xe4>)
   8256e:	4798      	blx	r3
        mdelay(100);
   82570:	2064      	movs	r0, #100	; 0x64
   82572:	4b1d      	ldr	r3, [pc, #116]	; (825e8 <menu_shutdown+0xfc>)
   82574:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_OFF);
   82576:	2000      	movs	r0, #0
   82578:	4b1c      	ldr	r3, [pc, #112]	; (825ec <menu_shutdown+0x100>)
   8257a:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   8257c:	4b14      	ldr	r3, [pc, #80]	; (825d0 <menu_shutdown+0xe4>)
   8257e:	4798      	blx	r3
        
        while(1)
        {
            update_comm();
   82580:	4b17      	ldr	r3, [pc, #92]	; (825e0 <menu_shutdown+0xf4>)
   82582:	4798      	blx	r3
   82584:	e7fc      	b.n	82580 <menu_shutdown+0x94>
            //check_bat();
        }
    }
    else
    {
        if(print_menu)
   82586:	4b1a      	ldr	r3, [pc, #104]	; (825f0 <menu_shutdown+0x104>)
   82588:	781b      	ldrb	r3, [r3, #0]
   8258a:	2b00      	cmp	r3, #0
   8258c:	d009      	beq.n	825a2 <menu_shutdown+0xb6>
        {
            print_menu = 0;
   8258e:	4b18      	ldr	r3, [pc, #96]	; (825f0 <menu_shutdown+0x104>)
   82590:	2200      	movs	r2, #0
   82592:	701a      	strb	r2, [r3, #0]
            lcd_clear();
   82594:	4b0e      	ldr	r3, [pc, #56]	; (825d0 <menu_shutdown+0xe4>)
   82596:	4798      	blx	r3
            lcd_print_s(2, 1, "confirm shutdown?");
   82598:	4a16      	ldr	r2, [pc, #88]	; (825f4 <menu_shutdown+0x108>)
   8259a:	2101      	movs	r1, #1
   8259c:	2002      	movs	r0, #2
   8259e:	4b0e      	ldr	r3, [pc, #56]	; (825d8 <menu_shutdown+0xec>)
   825a0:	4798      	blx	r3
        }
    }
    
    switch (event1)
   825a2:	79fb      	ldrb	r3, [r7, #7]
   825a4:	2b07      	cmp	r3, #7
   825a6:	d002      	beq.n	825ae <menu_shutdown+0xc2>
   825a8:	2b10      	cmp	r3, #16
   825aa:	d004      	beq.n	825b6 <menu_shutdown+0xca>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
            print_menu = 1;
            break;
        default:
            break;
   825ac:	e00a      	b.n	825c4 <menu_shutdown+0xd8>
            shutdown_confirmed = 1;
   825ae:	4b07      	ldr	r3, [pc, #28]	; (825cc <menu_shutdown+0xe0>)
   825b0:	2201      	movs	r2, #1
   825b2:	701a      	strb	r2, [r3, #0]
            break;
   825b4:	e006      	b.n	825c4 <menu_shutdown+0xd8>
            act_menu = MENU_MAIN;
   825b6:	4b10      	ldr	r3, [pc, #64]	; (825f8 <menu_shutdown+0x10c>)
   825b8:	2200      	movs	r2, #0
   825ba:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   825bc:	4b0c      	ldr	r3, [pc, #48]	; (825f0 <menu_shutdown+0x104>)
   825be:	2201      	movs	r2, #1
   825c0:	701a      	strb	r2, [r3, #0]
            break;
   825c2:	bf00      	nop
    }
}
   825c4:	bf00      	nop
   825c6:	3708      	adds	r7, #8
   825c8:	46bd      	mov	sp, r7
   825ca:	bd80      	pop	{r7, pc}
   825cc:	20070dbe 	.word	0x20070dbe
   825d0:	0008167d 	.word	0x0008167d
   825d4:	0008986c 	.word	0x0008986c
   825d8:	0008169d 	.word	0x0008169d
   825dc:	00081b39 	.word	0x00081b39
   825e0:	0008318d 	.word	0x0008318d
   825e4:	00081ba3 	.word	0x00081ba3
   825e8:	00083161 	.word	0x00083161
   825ec:	0008165d 	.word	0x0008165d
   825f0:	2007018c 	.word	0x2007018c
   825f4:	00089880 	.word	0x00089880
   825f8:	20070dbc 	.word	0x20070dbc

000825fc <print_menu_main>:

static void print_menu_main(void)
{
   825fc:	b590      	push	{r4, r7, lr}
   825fe:	b085      	sub	sp, #20
   82600:	af00      	add	r7, sp, #0
    const char *text[4] = {"    noOS ONE", " Match", " Sensors", " Settings"};
   82602:	4b14      	ldr	r3, [pc, #80]	; (82654 <print_menu_main+0x58>)
   82604:	463c      	mov	r4, r7
   82606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   82608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   8260c:	4b12      	ldr	r3, [pc, #72]	; (82658 <print_menu_main+0x5c>)
   8260e:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   82610:	683b      	ldr	r3, [r7, #0]
   82612:	461a      	mov	r2, r3
   82614:	2100      	movs	r1, #0
   82616:	2001      	movs	r0, #1
   82618:	4b10      	ldr	r3, [pc, #64]	; (8265c <print_menu_main+0x60>)
   8261a:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   8261c:	687b      	ldr	r3, [r7, #4]
   8261e:	461a      	mov	r2, r3
   82620:	2100      	movs	r1, #0
   82622:	2002      	movs	r0, #2
   82624:	4b0d      	ldr	r3, [pc, #52]	; (8265c <print_menu_main+0x60>)
   82626:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82628:	68bb      	ldr	r3, [r7, #8]
   8262a:	461a      	mov	r2, r3
   8262c:	2100      	movs	r1, #0
   8262e:	2003      	movs	r0, #3
   82630:	4b0a      	ldr	r3, [pc, #40]	; (8265c <print_menu_main+0x60>)
   82632:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   82634:	68fb      	ldr	r3, [r7, #12]
   82636:	461a      	mov	r2, r3
   82638:	2100      	movs	r1, #0
   8263a:	2004      	movs	r0, #4
   8263c:	4b07      	ldr	r3, [pc, #28]	; (8265c <print_menu_main+0x60>)
   8263e:	4798      	blx	r3
    print_cursor(&menu_info.main);
   82640:	4807      	ldr	r0, [pc, #28]	; (82660 <print_menu_main+0x64>)
   82642:	4b08      	ldr	r3, [pc, #32]	; (82664 <print_menu_main+0x68>)
   82644:	4798      	blx	r3
    update_battery(1);
   82646:	2001      	movs	r0, #1
   82648:	4b07      	ldr	r3, [pc, #28]	; (82668 <print_menu_main+0x6c>)
   8264a:	4798      	blx	r3
}
   8264c:	bf00      	nop
   8264e:	3714      	adds	r7, #20
   82650:	46bd      	mov	sp, r7
   82652:	bd90      	pop	{r4, r7, pc}
   82654:	000898c4 	.word	0x000898c4
   82658:	0008167d 	.word	0x0008167d
   8265c:	0008169d 	.word	0x0008169d
   82660:	20070190 	.word	0x20070190
   82664:	0008273d 	.word	0x0008273d
   82668:	000831d9 	.word	0x000831d9

0008266c <print_menu_sensors>:

static void print_menu_sensors(void)
{
   8266c:	b590      	push	{r4, r7, lr}
   8266e:	b085      	sub	sp, #20
   82670:	af00      	add	r7, sp, #0
    const char *text[4] = {" Ball", " Compass", " Line", " "};
   82672:	4b13      	ldr	r3, [pc, #76]	; (826c0 <print_menu_sensors+0x54>)
   82674:	463c      	mov	r4, r7
   82676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   82678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   8267c:	4b11      	ldr	r3, [pc, #68]	; (826c4 <print_menu_sensors+0x58>)
   8267e:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   82680:	683b      	ldr	r3, [r7, #0]
   82682:	461a      	mov	r2, r3
   82684:	2100      	movs	r1, #0
   82686:	2001      	movs	r0, #1
   82688:	4b0f      	ldr	r3, [pc, #60]	; (826c8 <print_menu_sensors+0x5c>)
   8268a:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   8268c:	687b      	ldr	r3, [r7, #4]
   8268e:	461a      	mov	r2, r3
   82690:	2100      	movs	r1, #0
   82692:	2002      	movs	r0, #2
   82694:	4b0c      	ldr	r3, [pc, #48]	; (826c8 <print_menu_sensors+0x5c>)
   82696:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82698:	68bb      	ldr	r3, [r7, #8]
   8269a:	461a      	mov	r2, r3
   8269c:	2100      	movs	r1, #0
   8269e:	2003      	movs	r0, #3
   826a0:	4b09      	ldr	r3, [pc, #36]	; (826c8 <print_menu_sensors+0x5c>)
   826a2:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   826a4:	68fb      	ldr	r3, [r7, #12]
   826a6:	461a      	mov	r2, r3
   826a8:	2100      	movs	r1, #0
   826aa:	2004      	movs	r0, #4
   826ac:	4b06      	ldr	r3, [pc, #24]	; (826c8 <print_menu_sensors+0x5c>)
   826ae:	4798      	blx	r3
    print_cursor(&menu_info.sensors);
   826b0:	4806      	ldr	r0, [pc, #24]	; (826cc <print_menu_sensors+0x60>)
   826b2:	4b07      	ldr	r3, [pc, #28]	; (826d0 <print_menu_sensors+0x64>)
   826b4:	4798      	blx	r3
}
   826b6:	bf00      	nop
   826b8:	3714      	adds	r7, #20
   826ba:	46bd      	mov	sp, r7
   826bc:	bd90      	pop	{r4, r7, pc}
   826be:	bf00      	nop
   826c0:	000898f4 	.word	0x000898f4
   826c4:	0008167d 	.word	0x0008167d
   826c8:	0008169d 	.word	0x0008169d
   826cc:	20070194 	.word	0x20070194
   826d0:	0008273d 	.word	0x0008273d

000826d4 <print_menu_settings>:

static void print_menu_settings(void)
{
   826d4:	b590      	push	{r4, r7, lr}
   826d6:	b085      	sub	sp, #20
   826d8:	af00      	add	r7, sp, #0
    const char *text[4] = {" ", " ", " ", " "};
   826da:	4b13      	ldr	r3, [pc, #76]	; (82728 <print_menu_settings+0x54>)
   826dc:	463c      	mov	r4, r7
   826de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   826e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   826e4:	4b11      	ldr	r3, [pc, #68]	; (8272c <print_menu_settings+0x58>)
   826e6:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   826e8:	683b      	ldr	r3, [r7, #0]
   826ea:	461a      	mov	r2, r3
   826ec:	2100      	movs	r1, #0
   826ee:	2001      	movs	r0, #1
   826f0:	4b0f      	ldr	r3, [pc, #60]	; (82730 <print_menu_settings+0x5c>)
   826f2:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   826f4:	687b      	ldr	r3, [r7, #4]
   826f6:	461a      	mov	r2, r3
   826f8:	2100      	movs	r1, #0
   826fa:	2002      	movs	r0, #2
   826fc:	4b0c      	ldr	r3, [pc, #48]	; (82730 <print_menu_settings+0x5c>)
   826fe:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82700:	68bb      	ldr	r3, [r7, #8]
   82702:	461a      	mov	r2, r3
   82704:	2100      	movs	r1, #0
   82706:	2003      	movs	r0, #3
   82708:	4b09      	ldr	r3, [pc, #36]	; (82730 <print_menu_settings+0x5c>)
   8270a:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   8270c:	68fb      	ldr	r3, [r7, #12]
   8270e:	461a      	mov	r2, r3
   82710:	2100      	movs	r1, #0
   82712:	2004      	movs	r0, #4
   82714:	4b06      	ldr	r3, [pc, #24]	; (82730 <print_menu_settings+0x5c>)
   82716:	4798      	blx	r3
    print_cursor(&menu_info.settings);
   82718:	4806      	ldr	r0, [pc, #24]	; (82734 <print_menu_settings+0x60>)
   8271a:	4b07      	ldr	r3, [pc, #28]	; (82738 <print_menu_settings+0x64>)
   8271c:	4798      	blx	r3
}
   8271e:	bf00      	nop
   82720:	3714      	adds	r7, #20
   82722:	46bd      	mov	sp, r7
   82724:	bd90      	pop	{r4, r7, pc}
   82726:	bf00      	nop
   82728:	00089904 	.word	0x00089904
   8272c:	0008167d 	.word	0x0008167d
   82730:	0008169d 	.word	0x0008169d
   82734:	20070198 	.word	0x20070198
   82738:	0008273d 	.word	0x0008273d

0008273c <print_cursor>:

static void print_cursor(menu_info_t *info)
{
   8273c:	b580      	push	{r7, lr}
   8273e:	b082      	sub	sp, #8
   82740:	af00      	add	r7, sp, #0
   82742:	6078      	str	r0, [r7, #4]
    lcd_print_s(info->prev_cursor_line, 0, " ");
   82744:	687b      	ldr	r3, [r7, #4]
   82746:	785b      	ldrb	r3, [r3, #1]
   82748:	4a09      	ldr	r2, [pc, #36]	; (82770 <print_cursor+0x34>)
   8274a:	2100      	movs	r1, #0
   8274c:	4618      	mov	r0, r3
   8274e:	4b09      	ldr	r3, [pc, #36]	; (82774 <print_cursor+0x38>)
   82750:	4798      	blx	r3
    lcd_print_s(info->act_cursor_line, 0, ">");
   82752:	687b      	ldr	r3, [r7, #4]
   82754:	781b      	ldrb	r3, [r3, #0]
   82756:	4a08      	ldr	r2, [pc, #32]	; (82778 <print_cursor+0x3c>)
   82758:	2100      	movs	r1, #0
   8275a:	4618      	mov	r0, r3
   8275c:	4b05      	ldr	r3, [pc, #20]	; (82774 <print_cursor+0x38>)
   8275e:	4798      	blx	r3
    
    info->prev_cursor_line = info->act_cursor_line;
   82760:	687b      	ldr	r3, [r7, #4]
   82762:	781a      	ldrb	r2, [r3, #0]
   82764:	687b      	ldr	r3, [r7, #4]
   82766:	705a      	strb	r2, [r3, #1]
}
   82768:	bf00      	nop
   8276a:	3708      	adds	r7, #8
   8276c:	46bd      	mov	sp, r7
   8276e:	bd80      	pop	{r7, pc}
   82770:	000898f0 	.word	0x000898f0
   82774:	0008169d 	.word	0x0008169d
   82778:	00089914 	.word	0x00089914

0008277c <button_events>:

event_t button_events(void)
{
   8277c:	b580      	push	{r7, lr}
   8277e:	b082      	sub	sp, #8
   82780:	af00      	add	r7, sp, #0
    event_t nextEvent = EVENT_NO_EVENT;
   82782:	2300      	movs	r3, #0
   82784:	71fb      	strb	r3, [r7, #7]

    if (getTicks() >= (ticks_button_update + 30))
   82786:	4b75      	ldr	r3, [pc, #468]	; (8295c <button_events+0x1e0>)
   82788:	4798      	blx	r3
   8278a:	4602      	mov	r2, r0
   8278c:	4b74      	ldr	r3, [pc, #464]	; (82960 <button_events+0x1e4>)
   8278e:	681b      	ldr	r3, [r3, #0]
   82790:	331e      	adds	r3, #30
   82792:	429a      	cmp	r2, r3
   82794:	f0c0 80dd 	bcc.w	82952 <button_events+0x1d6>
    {
        ticks_button_update = getTicks();
   82798:	4b70      	ldr	r3, [pc, #448]	; (8295c <button_events+0x1e0>)
   8279a:	4798      	blx	r3
   8279c:	4602      	mov	r2, r0
   8279e:	4b70      	ldr	r3, [pc, #448]	; (82960 <button_events+0x1e4>)
   827a0:	601a      	str	r2, [r3, #0]
        
        pb_up_act = ioport_get_pin_level(PB_UP);
   827a2:	2060      	movs	r0, #96	; 0x60
   827a4:	4b6f      	ldr	r3, [pc, #444]	; (82964 <button_events+0x1e8>)
   827a6:	4798      	blx	r3
   827a8:	4603      	mov	r3, r0
   827aa:	461a      	mov	r2, r3
   827ac:	4b6e      	ldr	r3, [pc, #440]	; (82968 <button_events+0x1ec>)
   827ae:	701a      	strb	r2, [r3, #0]
        pb_left_act = ioport_get_pin_level(PB_LEFT);
   827b0:	2061      	movs	r0, #97	; 0x61
   827b2:	4b6c      	ldr	r3, [pc, #432]	; (82964 <button_events+0x1e8>)
   827b4:	4798      	blx	r3
   827b6:	4603      	mov	r3, r0
   827b8:	461a      	mov	r2, r3
   827ba:	4b6c      	ldr	r3, [pc, #432]	; (8296c <button_events+0x1f0>)
   827bc:	701a      	strb	r2, [r3, #0]
        pb_mid_act = ioport_get_pin_level(PB_MID);
   827be:	2062      	movs	r0, #98	; 0x62
   827c0:	4b68      	ldr	r3, [pc, #416]	; (82964 <button_events+0x1e8>)
   827c2:	4798      	blx	r3
   827c4:	4603      	mov	r3, r0
   827c6:	461a      	mov	r2, r3
   827c8:	4b69      	ldr	r3, [pc, #420]	; (82970 <button_events+0x1f4>)
   827ca:	701a      	strb	r2, [r3, #0]
        pb_right_act = ioport_get_pin_level(PB_RIGHT);
   827cc:	2063      	movs	r0, #99	; 0x63
   827ce:	4b65      	ldr	r3, [pc, #404]	; (82964 <button_events+0x1e8>)
   827d0:	4798      	blx	r3
   827d2:	4603      	mov	r3, r0
   827d4:	461a      	mov	r2, r3
   827d6:	4b67      	ldr	r3, [pc, #412]	; (82974 <button_events+0x1f8>)
   827d8:	701a      	strb	r2, [r3, #0]
        pb_down_act = ioport_get_pin_level(PB_DOWN);
   827da:	2064      	movs	r0, #100	; 0x64
   827dc:	4b61      	ldr	r3, [pc, #388]	; (82964 <button_events+0x1e8>)
   827de:	4798      	blx	r3
   827e0:	4603      	mov	r3, r0
   827e2:	461a      	mov	r2, r3
   827e4:	4b64      	ldr	r3, [pc, #400]	; (82978 <button_events+0x1fc>)
   827e6:	701a      	strb	r2, [r3, #0]
        pb_return_act = ioport_get_pin_level(PB_RETURN);
   827e8:	2065      	movs	r0, #101	; 0x65
   827ea:	4b5e      	ldr	r3, [pc, #376]	; (82964 <button_events+0x1e8>)
   827ec:	4798      	blx	r3
   827ee:	4603      	mov	r3, r0
   827f0:	461a      	mov	r2, r3
   827f2:	4b62      	ldr	r3, [pc, #392]	; (8297c <button_events+0x200>)
   827f4:	701a      	strb	r2, [r3, #0]
        
        if (pb_up_act != pb_up_prev && pb_up_act == 0)
   827f6:	4b5c      	ldr	r3, [pc, #368]	; (82968 <button_events+0x1ec>)
   827f8:	781a      	ldrb	r2, [r3, #0]
   827fa:	4b61      	ldr	r3, [pc, #388]	; (82980 <button_events+0x204>)
   827fc:	781b      	ldrb	r3, [r3, #0]
   827fe:	429a      	cmp	r2, r3
   82800:	d006      	beq.n	82810 <button_events+0x94>
   82802:	4b59      	ldr	r3, [pc, #356]	; (82968 <button_events+0x1ec>)
   82804:	781b      	ldrb	r3, [r3, #0]
   82806:	2b00      	cmp	r3, #0
   82808:	d102      	bne.n	82810 <button_events+0x94>
        {
            nextEvent = EVENT_BUTTON_UP_P;
   8280a:	2301      	movs	r3, #1
   8280c:	71fb      	strb	r3, [r7, #7]
   8280e:	e00b      	b.n	82828 <button_events+0xac>
        }
        else if (pb_up_act != pb_up_prev && pb_up_act == 1)
   82810:	4b55      	ldr	r3, [pc, #340]	; (82968 <button_events+0x1ec>)
   82812:	781a      	ldrb	r2, [r3, #0]
   82814:	4b5a      	ldr	r3, [pc, #360]	; (82980 <button_events+0x204>)
   82816:	781b      	ldrb	r3, [r3, #0]
   82818:	429a      	cmp	r2, r3
   8281a:	d005      	beq.n	82828 <button_events+0xac>
   8281c:	4b52      	ldr	r3, [pc, #328]	; (82968 <button_events+0x1ec>)
   8281e:	781b      	ldrb	r3, [r3, #0]
   82820:	2b01      	cmp	r3, #1
   82822:	d101      	bne.n	82828 <button_events+0xac>
        {
            nextEvent = EVENT_BUTTON_UP_R;
   82824:	2303      	movs	r3, #3
   82826:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_up_act == pb_up_prev && pb_up_act == 0)
        {
            nextEvent = EVENT_BUTTON_UP_H;
        }*/
        
        if (pb_left_act != pb_left_prev && pb_left_act == 0)
   82828:	4b50      	ldr	r3, [pc, #320]	; (8296c <button_events+0x1f0>)
   8282a:	781a      	ldrb	r2, [r3, #0]
   8282c:	4b55      	ldr	r3, [pc, #340]	; (82984 <button_events+0x208>)
   8282e:	781b      	ldrb	r3, [r3, #0]
   82830:	429a      	cmp	r2, r3
   82832:	d006      	beq.n	82842 <button_events+0xc6>
   82834:	4b4d      	ldr	r3, [pc, #308]	; (8296c <button_events+0x1f0>)
   82836:	781b      	ldrb	r3, [r3, #0]
   82838:	2b00      	cmp	r3, #0
   8283a:	d102      	bne.n	82842 <button_events+0xc6>
        {
            nextEvent = EVENT_BUTTON_LEFT_P;
   8283c:	2304      	movs	r3, #4
   8283e:	71fb      	strb	r3, [r7, #7]
   82840:	e00b      	b.n	8285a <button_events+0xde>
        }
        else if (pb_left_act != pb_left_prev && pb_left_act == 1)
   82842:	4b4a      	ldr	r3, [pc, #296]	; (8296c <button_events+0x1f0>)
   82844:	781a      	ldrb	r2, [r3, #0]
   82846:	4b4f      	ldr	r3, [pc, #316]	; (82984 <button_events+0x208>)
   82848:	781b      	ldrb	r3, [r3, #0]
   8284a:	429a      	cmp	r2, r3
   8284c:	d005      	beq.n	8285a <button_events+0xde>
   8284e:	4b47      	ldr	r3, [pc, #284]	; (8296c <button_events+0x1f0>)
   82850:	781b      	ldrb	r3, [r3, #0]
   82852:	2b01      	cmp	r3, #1
   82854:	d101      	bne.n	8285a <button_events+0xde>
        {
            nextEvent = EVENT_BUTTON_LEFT_R;
   82856:	2306      	movs	r3, #6
   82858:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_left_act == pb_left_prev && pb_left_act == 0)
        {
            nextEvent = EVENT_BUTTON_LEFT_H;
        }*/
        
        if (pb_mid_act != pb_mid_prev && pb_mid_act == 0)
   8285a:	4b45      	ldr	r3, [pc, #276]	; (82970 <button_events+0x1f4>)
   8285c:	781a      	ldrb	r2, [r3, #0]
   8285e:	4b4a      	ldr	r3, [pc, #296]	; (82988 <button_events+0x20c>)
   82860:	781b      	ldrb	r3, [r3, #0]
   82862:	429a      	cmp	r2, r3
   82864:	d006      	beq.n	82874 <button_events+0xf8>
   82866:	4b42      	ldr	r3, [pc, #264]	; (82970 <button_events+0x1f4>)
   82868:	781b      	ldrb	r3, [r3, #0]
   8286a:	2b00      	cmp	r3, #0
   8286c:	d102      	bne.n	82874 <button_events+0xf8>
        {
            nextEvent = EVENT_BUTTON_MID_P;
   8286e:	2307      	movs	r3, #7
   82870:	71fb      	strb	r3, [r7, #7]
   82872:	e00b      	b.n	8288c <button_events+0x110>
        }
        else if (pb_mid_act != pb_mid_prev && pb_mid_act == 1)
   82874:	4b3e      	ldr	r3, [pc, #248]	; (82970 <button_events+0x1f4>)
   82876:	781a      	ldrb	r2, [r3, #0]
   82878:	4b43      	ldr	r3, [pc, #268]	; (82988 <button_events+0x20c>)
   8287a:	781b      	ldrb	r3, [r3, #0]
   8287c:	429a      	cmp	r2, r3
   8287e:	d005      	beq.n	8288c <button_events+0x110>
   82880:	4b3b      	ldr	r3, [pc, #236]	; (82970 <button_events+0x1f4>)
   82882:	781b      	ldrb	r3, [r3, #0]
   82884:	2b01      	cmp	r3, #1
   82886:	d101      	bne.n	8288c <button_events+0x110>
        {
            nextEvent = EVENT_BUTTON_MID_R;
   82888:	2309      	movs	r3, #9
   8288a:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_mid_act == pb_mid_prev && pb_mid_act == 0)
        {
            nextEvent = EVENT_BUTTON_MID_H;
        }*/
        
        if (pb_right_act != pb_right_prev && pb_right_act == 0)
   8288c:	4b39      	ldr	r3, [pc, #228]	; (82974 <button_events+0x1f8>)
   8288e:	781a      	ldrb	r2, [r3, #0]
   82890:	4b3e      	ldr	r3, [pc, #248]	; (8298c <button_events+0x210>)
   82892:	781b      	ldrb	r3, [r3, #0]
   82894:	429a      	cmp	r2, r3
   82896:	d006      	beq.n	828a6 <button_events+0x12a>
   82898:	4b36      	ldr	r3, [pc, #216]	; (82974 <button_events+0x1f8>)
   8289a:	781b      	ldrb	r3, [r3, #0]
   8289c:	2b00      	cmp	r3, #0
   8289e:	d102      	bne.n	828a6 <button_events+0x12a>
        {
            nextEvent = EVENT_BUTTON_RIGHT_P;
   828a0:	230a      	movs	r3, #10
   828a2:	71fb      	strb	r3, [r7, #7]
   828a4:	e00b      	b.n	828be <button_events+0x142>
        }
        else if (pb_right_act != pb_right_prev && pb_right_act == 1)
   828a6:	4b33      	ldr	r3, [pc, #204]	; (82974 <button_events+0x1f8>)
   828a8:	781a      	ldrb	r2, [r3, #0]
   828aa:	4b38      	ldr	r3, [pc, #224]	; (8298c <button_events+0x210>)
   828ac:	781b      	ldrb	r3, [r3, #0]
   828ae:	429a      	cmp	r2, r3
   828b0:	d005      	beq.n	828be <button_events+0x142>
   828b2:	4b30      	ldr	r3, [pc, #192]	; (82974 <button_events+0x1f8>)
   828b4:	781b      	ldrb	r3, [r3, #0]
   828b6:	2b01      	cmp	r3, #1
   828b8:	d101      	bne.n	828be <button_events+0x142>
        {
            nextEvent = EVENT_BUTTON_RIGHT_R;
   828ba:	230c      	movs	r3, #12
   828bc:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_right_act == pb_right_prev && pb_right_act == 0)
        {
            nextEvent = EVENT_BUTTON_RIGHT_H;
        }*/
        
        if (pb_down_act != pb_down_prev && pb_down_act == 0)
   828be:	4b2e      	ldr	r3, [pc, #184]	; (82978 <button_events+0x1fc>)
   828c0:	781a      	ldrb	r2, [r3, #0]
   828c2:	4b33      	ldr	r3, [pc, #204]	; (82990 <button_events+0x214>)
   828c4:	781b      	ldrb	r3, [r3, #0]
   828c6:	429a      	cmp	r2, r3
   828c8:	d006      	beq.n	828d8 <button_events+0x15c>
   828ca:	4b2b      	ldr	r3, [pc, #172]	; (82978 <button_events+0x1fc>)
   828cc:	781b      	ldrb	r3, [r3, #0]
   828ce:	2b00      	cmp	r3, #0
   828d0:	d102      	bne.n	828d8 <button_events+0x15c>
        {
            nextEvent = EVENT_BUTTON_DOWN_P;
   828d2:	230d      	movs	r3, #13
   828d4:	71fb      	strb	r3, [r7, #7]
   828d6:	e00b      	b.n	828f0 <button_events+0x174>
        }
        else if (pb_down_act != pb_down_prev && pb_down_act == 1)
   828d8:	4b27      	ldr	r3, [pc, #156]	; (82978 <button_events+0x1fc>)
   828da:	781a      	ldrb	r2, [r3, #0]
   828dc:	4b2c      	ldr	r3, [pc, #176]	; (82990 <button_events+0x214>)
   828de:	781b      	ldrb	r3, [r3, #0]
   828e0:	429a      	cmp	r2, r3
   828e2:	d005      	beq.n	828f0 <button_events+0x174>
   828e4:	4b24      	ldr	r3, [pc, #144]	; (82978 <button_events+0x1fc>)
   828e6:	781b      	ldrb	r3, [r3, #0]
   828e8:	2b01      	cmp	r3, #1
   828ea:	d101      	bne.n	828f0 <button_events+0x174>
        {
            nextEvent = EVENT_BUTTON_DOWN_R;
   828ec:	230f      	movs	r3, #15
   828ee:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_down_act == pb_down_prev && pb_down_act == 0)
        {
            nextEvent = EVENT_BUTTON_DOWN_H;
        }*/
        
        if (pb_return_act != pb_return_prev && pb_return_act == 0)
   828f0:	4b22      	ldr	r3, [pc, #136]	; (8297c <button_events+0x200>)
   828f2:	781a      	ldrb	r2, [r3, #0]
   828f4:	4b27      	ldr	r3, [pc, #156]	; (82994 <button_events+0x218>)
   828f6:	781b      	ldrb	r3, [r3, #0]
   828f8:	429a      	cmp	r2, r3
   828fa:	d006      	beq.n	8290a <button_events+0x18e>
   828fc:	4b1f      	ldr	r3, [pc, #124]	; (8297c <button_events+0x200>)
   828fe:	781b      	ldrb	r3, [r3, #0]
   82900:	2b00      	cmp	r3, #0
   82902:	d102      	bne.n	8290a <button_events+0x18e>
        {
            nextEvent = EVENT_BUTTON_RETURN_P;
   82904:	2310      	movs	r3, #16
   82906:	71fb      	strb	r3, [r7, #7]
   82908:	e00b      	b.n	82922 <button_events+0x1a6>
        }
        else if (pb_return_act != pb_return_prev && pb_return_act == 1)
   8290a:	4b1c      	ldr	r3, [pc, #112]	; (8297c <button_events+0x200>)
   8290c:	781a      	ldrb	r2, [r3, #0]
   8290e:	4b21      	ldr	r3, [pc, #132]	; (82994 <button_events+0x218>)
   82910:	781b      	ldrb	r3, [r3, #0]
   82912:	429a      	cmp	r2, r3
   82914:	d005      	beq.n	82922 <button_events+0x1a6>
   82916:	4b19      	ldr	r3, [pc, #100]	; (8297c <button_events+0x200>)
   82918:	781b      	ldrb	r3, [r3, #0]
   8291a:	2b01      	cmp	r3, #1
   8291c:	d101      	bne.n	82922 <button_events+0x1a6>
        {
            nextEvent = EVENT_BUTTON_RETURN_R;
   8291e:	2312      	movs	r3, #18
   82920:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_return_act == pb_up_prev && pb_return_act == 0)
        {
            nextEvent = EVENT_BUTTON_RETURN_H;
        }*/
        
        pb_up_prev = pb_up_act;
   82922:	4b11      	ldr	r3, [pc, #68]	; (82968 <button_events+0x1ec>)
   82924:	781a      	ldrb	r2, [r3, #0]
   82926:	4b16      	ldr	r3, [pc, #88]	; (82980 <button_events+0x204>)
   82928:	701a      	strb	r2, [r3, #0]
        pb_left_prev = pb_left_act;
   8292a:	4b10      	ldr	r3, [pc, #64]	; (8296c <button_events+0x1f0>)
   8292c:	781a      	ldrb	r2, [r3, #0]
   8292e:	4b15      	ldr	r3, [pc, #84]	; (82984 <button_events+0x208>)
   82930:	701a      	strb	r2, [r3, #0]
        pb_mid_prev = pb_mid_act;
   82932:	4b0f      	ldr	r3, [pc, #60]	; (82970 <button_events+0x1f4>)
   82934:	781a      	ldrb	r2, [r3, #0]
   82936:	4b14      	ldr	r3, [pc, #80]	; (82988 <button_events+0x20c>)
   82938:	701a      	strb	r2, [r3, #0]
        pb_right_prev = pb_right_act;
   8293a:	4b0e      	ldr	r3, [pc, #56]	; (82974 <button_events+0x1f8>)
   8293c:	781a      	ldrb	r2, [r3, #0]
   8293e:	4b13      	ldr	r3, [pc, #76]	; (8298c <button_events+0x210>)
   82940:	701a      	strb	r2, [r3, #0]
        pb_down_prev = pb_down_act;
   82942:	4b0d      	ldr	r3, [pc, #52]	; (82978 <button_events+0x1fc>)
   82944:	781a      	ldrb	r2, [r3, #0]
   82946:	4b12      	ldr	r3, [pc, #72]	; (82990 <button_events+0x214>)
   82948:	701a      	strb	r2, [r3, #0]
        pb_return_prev = pb_return_act;
   8294a:	4b0c      	ldr	r3, [pc, #48]	; (8297c <button_events+0x200>)
   8294c:	781a      	ldrb	r2, [r3, #0]
   8294e:	4b11      	ldr	r3, [pc, #68]	; (82994 <button_events+0x218>)
   82950:	701a      	strb	r2, [r3, #0]
    }

    return nextEvent;
   82952:	79fb      	ldrb	r3, [r7, #7]
}
   82954:	4618      	mov	r0, r3
   82956:	3708      	adds	r7, #8
   82958:	46bd      	mov	sp, r7
   8295a:	bd80      	pop	{r7, pc}
   8295c:	0008314d 	.word	0x0008314d
   82960:	20070e3c 	.word	0x20070e3c
   82964:	00081ba3 	.word	0x00081ba3
   82968:	20070e65 	.word	0x20070e65
   8296c:	20070e4c 	.word	0x20070e4c
   82970:	20070e64 	.word	0x20070e64
   82974:	20070e66 	.word	0x20070e66
   82978:	20070e48 	.word	0x20070e48
   8297c:	20070e44 	.word	0x20070e44
   82980:	20070e49 	.word	0x20070e49
   82984:	20070e47 	.word	0x20070e47
   82988:	20070e45 	.word	0x20070e45
   8298c:	20070e4a 	.word	0x20070e4a
   82990:	20070e46 	.word	0x20070e46
   82994:	20070e4b 	.word	0x20070e4b

00082998 <NVIC_EnableIRQ>:
{
   82998:	b480      	push	{r7}
   8299a:	b083      	sub	sp, #12
   8299c:	af00      	add	r7, sp, #0
   8299e:	4603      	mov	r3, r0
   829a0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   829a2:	4908      	ldr	r1, [pc, #32]	; (829c4 <NVIC_EnableIRQ+0x2c>)
   829a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   829a8:	095b      	lsrs	r3, r3, #5
   829aa:	79fa      	ldrb	r2, [r7, #7]
   829ac:	f002 021f 	and.w	r2, r2, #31
   829b0:	2001      	movs	r0, #1
   829b2:	fa00 f202 	lsl.w	r2, r0, r2
   829b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   829ba:	bf00      	nop
   829bc:	370c      	adds	r7, #12
   829be:	46bd      	mov	sp, r7
   829c0:	bc80      	pop	{r7}
   829c2:	4770      	bx	lr
   829c4:	e000e100 	.word	0xe000e100

000829c8 <NVIC_DisableIRQ>:
{
   829c8:	b480      	push	{r7}
   829ca:	b083      	sub	sp, #12
   829cc:	af00      	add	r7, sp, #0
   829ce:	4603      	mov	r3, r0
   829d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   829d2:	4909      	ldr	r1, [pc, #36]	; (829f8 <NVIC_DisableIRQ+0x30>)
   829d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   829d8:	095b      	lsrs	r3, r3, #5
   829da:	79fa      	ldrb	r2, [r7, #7]
   829dc:	f002 021f 	and.w	r2, r2, #31
   829e0:	2001      	movs	r0, #1
   829e2:	fa00 f202 	lsl.w	r2, r0, r2
   829e6:	3320      	adds	r3, #32
   829e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   829ec:	bf00      	nop
   829ee:	370c      	adds	r7, #12
   829f0:	46bd      	mov	sp, r7
   829f2:	bc80      	pop	{r7}
   829f4:	4770      	bx	lr
   829f6:	bf00      	nop
   829f8:	e000e100 	.word	0xe000e100

000829fc <NVIC_ClearPendingIRQ>:
{
   829fc:	b480      	push	{r7}
   829fe:	b083      	sub	sp, #12
   82a00:	af00      	add	r7, sp, #0
   82a02:	4603      	mov	r3, r0
   82a04:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82a06:	4909      	ldr	r1, [pc, #36]	; (82a2c <NVIC_ClearPendingIRQ+0x30>)
   82a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82a0c:	095b      	lsrs	r3, r3, #5
   82a0e:	79fa      	ldrb	r2, [r7, #7]
   82a10:	f002 021f 	and.w	r2, r2, #31
   82a14:	2001      	movs	r0, #1
   82a16:	fa00 f202 	lsl.w	r2, r0, r2
   82a1a:	3360      	adds	r3, #96	; 0x60
   82a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82a20:	bf00      	nop
   82a22:	370c      	adds	r7, #12
   82a24:	46bd      	mov	sp, r7
   82a26:	bc80      	pop	{r7}
   82a28:	4770      	bx	lr
   82a2a:	bf00      	nop
   82a2c:	e000e100 	.word	0xe000e100

00082a30 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   82a30:	b480      	push	{r7}
   82a32:	b083      	sub	sp, #12
   82a34:	af00      	add	r7, sp, #0
   82a36:	4603      	mov	r3, r0
   82a38:	6039      	str	r1, [r7, #0]
   82a3a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   82a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82a40:	2b00      	cmp	r3, #0
   82a42:	da0b      	bge.n	82a5c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   82a44:	490d      	ldr	r1, [pc, #52]	; (82a7c <NVIC_SetPriority+0x4c>)
   82a46:	79fb      	ldrb	r3, [r7, #7]
   82a48:	f003 030f 	and.w	r3, r3, #15
   82a4c:	3b04      	subs	r3, #4
   82a4e:	683a      	ldr	r2, [r7, #0]
   82a50:	b2d2      	uxtb	r2, r2
   82a52:	0112      	lsls	r2, r2, #4
   82a54:	b2d2      	uxtb	r2, r2
   82a56:	440b      	add	r3, r1
   82a58:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   82a5a:	e009      	b.n	82a70 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82a5c:	4908      	ldr	r1, [pc, #32]	; (82a80 <NVIC_SetPriority+0x50>)
   82a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82a62:	683a      	ldr	r2, [r7, #0]
   82a64:	b2d2      	uxtb	r2, r2
   82a66:	0112      	lsls	r2, r2, #4
   82a68:	b2d2      	uxtb	r2, r2
   82a6a:	440b      	add	r3, r1
   82a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   82a70:	bf00      	nop
   82a72:	370c      	adds	r7, #12
   82a74:	46bd      	mov	sp, r7
   82a76:	bc80      	pop	{r7}
   82a78:	4770      	bx	lr
   82a7a:	bf00      	nop
   82a7c:	e000ed00 	.word	0xe000ed00
   82a80:	e000e100 	.word	0xe000e100

00082a84 <sysclk_enable_peripheral_clock>:
{
   82a84:	b580      	push	{r7, lr}
   82a86:	b082      	sub	sp, #8
   82a88:	af00      	add	r7, sp, #0
   82a8a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82a8c:	6878      	ldr	r0, [r7, #4]
   82a8e:	4b03      	ldr	r3, [pc, #12]	; (82a9c <sysclk_enable_peripheral_clock+0x18>)
   82a90:	4798      	blx	r3
}
   82a92:	bf00      	nop
   82a94:	3708      	adds	r7, #8
   82a96:	46bd      	mov	sp, r7
   82a98:	bd80      	pop	{r7, pc}
   82a9a:	bf00      	nop
   82a9c:	00083b11 	.word	0x00083b11

00082aa0 <ioport_set_pin_level>:
{
   82aa0:	b480      	push	{r7}
   82aa2:	b08b      	sub	sp, #44	; 0x2c
   82aa4:	af00      	add	r7, sp, #0
   82aa6:	6078      	str	r0, [r7, #4]
   82aa8:	460b      	mov	r3, r1
   82aaa:	70fb      	strb	r3, [r7, #3]
   82aac:	687b      	ldr	r3, [r7, #4]
   82aae:	627b      	str	r3, [r7, #36]	; 0x24
   82ab0:	78fb      	ldrb	r3, [r7, #3]
   82ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82ab8:	61fb      	str	r3, [r7, #28]
   82aba:	69fb      	ldr	r3, [r7, #28]
   82abc:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82abe:	69bb      	ldr	r3, [r7, #24]
   82ac0:	095b      	lsrs	r3, r3, #5
   82ac2:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82ac4:	697b      	ldr	r3, [r7, #20]
   82ac6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82aca:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82ace:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82ad0:	613b      	str	r3, [r7, #16]
	if (level) {
   82ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82ad6:	2b00      	cmp	r3, #0
   82ad8:	d009      	beq.n	82aee <ioport_set_pin_level+0x4e>
   82ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82adc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82ade:	68fb      	ldr	r3, [r7, #12]
   82ae0:	f003 031f 	and.w	r3, r3, #31
   82ae4:	2201      	movs	r2, #1
   82ae6:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82ae8:	693b      	ldr	r3, [r7, #16]
   82aea:	631a      	str	r2, [r3, #48]	; 0x30
}
   82aec:	e008      	b.n	82b00 <ioport_set_pin_level+0x60>
   82aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82af0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   82af2:	68bb      	ldr	r3, [r7, #8]
   82af4:	f003 031f 	and.w	r3, r3, #31
   82af8:	2201      	movs	r2, #1
   82afa:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82afc:	693b      	ldr	r3, [r7, #16]
   82afe:	635a      	str	r2, [r3, #52]	; 0x34
   82b00:	bf00      	nop
   82b02:	372c      	adds	r7, #44	; 0x2c
   82b04:	46bd      	mov	sp, r7
   82b06:	bc80      	pop	{r7}
   82b08:	4770      	bx	lr

00082b0a <ioport_get_port_level>:
 * \return Logical levels of the specified pins from the read port, returned as
 * a mask.
 */
static inline ioport_port_mask_t ioport_get_port_level(ioport_pin_t port,
		ioport_port_mask_t mask)
{
   82b0a:	b480      	push	{r7}
   82b0c:	b087      	sub	sp, #28
   82b0e:	af00      	add	r7, sp, #0
   82b10:	6078      	str	r0, [r7, #4]
   82b12:	6039      	str	r1, [r7, #0]
   82b14:	687b      	ldr	r3, [r7, #4]
   82b16:	617b      	str	r3, [r7, #20]
   82b18:	683b      	ldr	r3, [r7, #0]
   82b1a:	613b      	str	r3, [r7, #16]
   82b1c:	697b      	ldr	r3, [r7, #20]
   82b1e:	60fb      	str	r3, [r7, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82b20:	68fb      	ldr	r3, [r7, #12]
   82b22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82b26:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82b2a:	025b      	lsls	r3, r3, #9
}

__always_inline static ioport_port_mask_t arch_ioport_get_port_level(
		ioport_port_t port, ioport_port_mask_t mask)
{
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
   82b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   82b2e:	693b      	ldr	r3, [r7, #16]
   82b30:	4013      	ands	r3, r2
	return arch_ioport_get_port_level(port, mask);
   82b32:	bf00      	nop
}
   82b34:	4618      	mov	r0, r3
   82b36:	371c      	adds	r7, #28
   82b38:	46bd      	mov	sp, r7
   82b3a:	bc80      	pop	{r7}
   82b3c:	4770      	bx	lr
	...

00082b40 <motor_init>:
float CosinMA1 = -0.866025404f;
float CosinMA2 = 0.866025404f;
float CosinMA3 = 0.0f;

void motor_init(void)
{
   82b40:	b5b0      	push	{r4, r5, r7, lr}
   82b42:	af00      	add	r7, sp, #0
    /* Initialize PWM channel for MLeft */
    /* Period is left-aligned */
    g_pwm_channel_MLeft.alignment = PWM_ALIGN_LEFT;
   82b44:	4b5e      	ldr	r3, [pc, #376]	; (82cc0 <motor_init+0x180>)
   82b46:	2200      	movs	r2, #0
   82b48:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MLeft.polarity = PWM_LOW;
   82b4a:	4b5d      	ldr	r3, [pc, #372]	; (82cc0 <motor_init+0x180>)
   82b4c:	2200      	movs	r2, #0
   82b4e:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MLeft.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82b50:	4b5b      	ldr	r3, [pc, #364]	; (82cc0 <motor_init+0x180>)
   82b52:	220b      	movs	r2, #11
   82b54:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MLeft.ul_period = PERIOD_VALUE;
   82b56:	4b5a      	ldr	r3, [pc, #360]	; (82cc0 <motor_init+0x180>)
   82b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82b5c:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MLeft.ul_duty = INIT_DUTY_VALUE;
   82b5e:	4b58      	ldr	r3, [pc, #352]	; (82cc0 <motor_init+0x180>)
   82b60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82b64:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MLeft.channel = MOTOR_LEFT;
   82b66:	4b56      	ldr	r3, [pc, #344]	; (82cc0 <motor_init+0x180>)
   82b68:	2200      	movs	r2, #0
   82b6a:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MLeft);
   82b6c:	4954      	ldr	r1, [pc, #336]	; (82cc0 <motor_init+0x180>)
   82b6e:	4855      	ldr	r0, [pc, #340]	; (82cc4 <motor_init+0x184>)
   82b70:	4b55      	ldr	r3, [pc, #340]	; (82cc8 <motor_init+0x188>)
   82b72:	4798      	blx	r3


    /* Initialize PWM channel for MRight */
    /* Period is left-aligned */
    g_pwm_channel_MRight.alignment = PWM_ALIGN_LEFT;
   82b74:	4b55      	ldr	r3, [pc, #340]	; (82ccc <motor_init+0x18c>)
   82b76:	2200      	movs	r2, #0
   82b78:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MRight.polarity = PWM_LOW;
   82b7a:	4b54      	ldr	r3, [pc, #336]	; (82ccc <motor_init+0x18c>)
   82b7c:	2200      	movs	r2, #0
   82b7e:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MRight.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82b80:	4b52      	ldr	r3, [pc, #328]	; (82ccc <motor_init+0x18c>)
   82b82:	220b      	movs	r2, #11
   82b84:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MRight.ul_period = PERIOD_VALUE;
   82b86:	4b51      	ldr	r3, [pc, #324]	; (82ccc <motor_init+0x18c>)
   82b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82b8c:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MRight.ul_duty = INIT_DUTY_VALUE;
   82b8e:	4b4f      	ldr	r3, [pc, #316]	; (82ccc <motor_init+0x18c>)
   82b90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82b94:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MRight.channel = MOTOR_RIGHT;
   82b96:	4b4d      	ldr	r3, [pc, #308]	; (82ccc <motor_init+0x18c>)
   82b98:	2201      	movs	r2, #1
   82b9a:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MRight);
   82b9c:	494b      	ldr	r1, [pc, #300]	; (82ccc <motor_init+0x18c>)
   82b9e:	4849      	ldr	r0, [pc, #292]	; (82cc4 <motor_init+0x184>)
   82ba0:	4b49      	ldr	r3, [pc, #292]	; (82cc8 <motor_init+0x188>)
   82ba2:	4798      	blx	r3


    /* Initialize PWM channel for MBack */
    /* Period is left-aligned */
    g_pwm_channel_MRear.alignment = PWM_ALIGN_LEFT;
   82ba4:	4b4a      	ldr	r3, [pc, #296]	; (82cd0 <motor_init+0x190>)
   82ba6:	2200      	movs	r2, #0
   82ba8:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MRear.polarity = PWM_LOW;
   82baa:	4b49      	ldr	r3, [pc, #292]	; (82cd0 <motor_init+0x190>)
   82bac:	2200      	movs	r2, #0
   82bae:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MRear.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82bb0:	4b47      	ldr	r3, [pc, #284]	; (82cd0 <motor_init+0x190>)
   82bb2:	220b      	movs	r2, #11
   82bb4:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MRear.ul_period = PERIOD_VALUE;
   82bb6:	4b46      	ldr	r3, [pc, #280]	; (82cd0 <motor_init+0x190>)
   82bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82bbc:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MRear.ul_duty = INIT_DUTY_VALUE;
   82bbe:	4b44      	ldr	r3, [pc, #272]	; (82cd0 <motor_init+0x190>)
   82bc0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82bc4:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MRear.channel = MOTOR_REAR;
   82bc6:	4b42      	ldr	r3, [pc, #264]	; (82cd0 <motor_init+0x190>)
   82bc8:	2202      	movs	r2, #2
   82bca:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MRear);
   82bcc:	4940      	ldr	r1, [pc, #256]	; (82cd0 <motor_init+0x190>)
   82bce:	483d      	ldr	r0, [pc, #244]	; (82cc4 <motor_init+0x184>)
   82bd0:	4b3d      	ldr	r3, [pc, #244]	; (82cc8 <motor_init+0x188>)
   82bd2:	4798      	blx	r3

    pwm_channel_disable(PWM, MOTOR_LEFT);
   82bd4:	2100      	movs	r1, #0
   82bd6:	483b      	ldr	r0, [pc, #236]	; (82cc4 <motor_init+0x184>)
   82bd8:	4b3e      	ldr	r3, [pc, #248]	; (82cd4 <motor_init+0x194>)
   82bda:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_RIGHT);
   82bdc:	2101      	movs	r1, #1
   82bde:	4839      	ldr	r0, [pc, #228]	; (82cc4 <motor_init+0x184>)
   82be0:	4b3c      	ldr	r3, [pc, #240]	; (82cd4 <motor_init+0x194>)
   82be2:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_REAR);
   82be4:	2102      	movs	r1, #2
   82be6:	4837      	ldr	r0, [pc, #220]	; (82cc4 <motor_init+0x184>)
   82be8:	4b3a      	ldr	r3, [pc, #232]	; (82cd4 <motor_init+0x194>)
   82bea:	4798      	blx	r3

    g_pwm_channel_ENC.alignment = PWM_ALIGN_LEFT;
   82bec:	4b3a      	ldr	r3, [pc, #232]	; (82cd8 <motor_init+0x198>)
   82bee:	2200      	movs	r2, #0
   82bf0:	811a      	strh	r2, [r3, #8]
    g_pwm_channel_ENC.polarity = PWM_LOW;
   82bf2:	4b39      	ldr	r3, [pc, #228]	; (82cd8 <motor_init+0x198>)
   82bf4:	2200      	movs	r2, #0
   82bf6:	729a      	strb	r2, [r3, #10]
    g_pwm_channel_ENC.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82bf8:	4b37      	ldr	r3, [pc, #220]	; (82cd8 <motor_init+0x198>)
   82bfa:	220b      	movs	r2, #11
   82bfc:	605a      	str	r2, [r3, #4]
    g_pwm_channel_ENC.ul_period = 330;
   82bfe:	4b36      	ldr	r3, [pc, #216]	; (82cd8 <motor_init+0x198>)
   82c00:	f44f 72a5 	mov.w	r2, #330	; 0x14a
   82c04:	611a      	str	r2, [r3, #16]
    g_pwm_channel_ENC.ul_duty = 165;
   82c06:	4b34      	ldr	r3, [pc, #208]	; (82cd8 <motor_init+0x198>)
   82c08:	22a5      	movs	r2, #165	; 0xa5
   82c0a:	60da      	str	r2, [r3, #12]
    g_pwm_channel_ENC.channel = ENC_CLK;
   82c0c:	4b32      	ldr	r3, [pc, #200]	; (82cd8 <motor_init+0x198>)
   82c0e:	2204      	movs	r2, #4
   82c10:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_ENC);
   82c12:	4931      	ldr	r1, [pc, #196]	; (82cd8 <motor_init+0x198>)
   82c14:	482b      	ldr	r0, [pc, #172]	; (82cc4 <motor_init+0x184>)
   82c16:	4b2c      	ldr	r3, [pc, #176]	; (82cc8 <motor_init+0x188>)
   82c18:	4798      	blx	r3
    pwm_channel_enable(PWM, ENC_CLK);
   82c1a:	2104      	movs	r1, #4
   82c1c:	4829      	ldr	r0, [pc, #164]	; (82cc4 <motor_init+0x184>)
   82c1e:	4b2f      	ldr	r3, [pc, #188]	; (82cdc <motor_init+0x19c>)
   82c20:	4798      	blx	r3

    sysclk_enable_peripheral_clock(ID_TC1);
   82c22:	201c      	movs	r0, #28
   82c24:	4b2e      	ldr	r3, [pc, #184]	; (82ce0 <motor_init+0x1a0>)
   82c26:	4798      	blx	r3
    tc_init(TC0, 1, TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_CPCTRG);
   82c28:	f244 0203 	movw	r2, #16387	; 0x4003
   82c2c:	2101      	movs	r1, #1
   82c2e:	482d      	ldr	r0, [pc, #180]	; (82ce4 <motor_init+0x1a4>)
   82c30:	4b2d      	ldr	r3, [pc, #180]	; (82ce8 <motor_init+0x1a8>)
   82c32:	4798      	blx	r3
    tc_write_rc(TC0, 1, 5249);  //MCLK / 128 * 0,008
   82c34:	f241 4281 	movw	r2, #5249	; 0x1481
   82c38:	2101      	movs	r1, #1
   82c3a:	482a      	ldr	r0, [pc, #168]	; (82ce4 <motor_init+0x1a4>)
   82c3c:	4b2b      	ldr	r3, [pc, #172]	; (82cec <motor_init+0x1ac>)
   82c3e:	4798      	blx	r3
    NVIC_DisableIRQ(TC1_IRQn);
   82c40:	201c      	movs	r0, #28
   82c42:	4b2b      	ldr	r3, [pc, #172]	; (82cf0 <motor_init+0x1b0>)
   82c44:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TC1_IRQn);
   82c46:	201c      	movs	r0, #28
   82c48:	4b2a      	ldr	r3, [pc, #168]	; (82cf4 <motor_init+0x1b4>)
   82c4a:	4798      	blx	r3
    NVIC_SetPriority(TC1_IRQn, 0);
   82c4c:	2100      	movs	r1, #0
   82c4e:	201c      	movs	r0, #28
   82c50:	4b29      	ldr	r3, [pc, #164]	; (82cf8 <motor_init+0x1b8>)
   82c52:	4798      	blx	r3
    NVIC_EnableIRQ(TC1_IRQn);
   82c54:	201c      	movs	r0, #28
   82c56:	4b29      	ldr	r3, [pc, #164]	; (82cfc <motor_init+0x1bc>)
   82c58:	4798      	blx	r3
    tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82c5a:	2210      	movs	r2, #16
   82c5c:	2101      	movs	r1, #1
   82c5e:	4821      	ldr	r0, [pc, #132]	; (82ce4 <motor_init+0x1a4>)
   82c60:	4b27      	ldr	r3, [pc, #156]	; (82d00 <motor_init+0x1c0>)
   82c62:	4798      	blx	r3
    tc_start(TC0, 1);
   82c64:	2101      	movs	r1, #1
   82c66:	481f      	ldr	r0, [pc, #124]	; (82ce4 <motor_init+0x1a4>)
   82c68:	4b26      	ldr	r3, [pc, #152]	; (82d04 <motor_init+0x1c4>)
   82c6a:	4798      	blx	r3

    mleft_pid_reg.kp = 15.0f;
   82c6c:	4b26      	ldr	r3, [pc, #152]	; (82d08 <motor_init+0x1c8>)
   82c6e:	4a27      	ldr	r2, [pc, #156]	; (82d0c <motor_init+0x1cc>)
   82c70:	601a      	str	r2, [r3, #0]
    mleft_pid_reg.ki = 10.0f;
   82c72:	4b25      	ldr	r3, [pc, #148]	; (82d08 <motor_init+0x1c8>)
   82c74:	4a26      	ldr	r2, [pc, #152]	; (82d10 <motor_init+0x1d0>)
   82c76:	605a      	str	r2, [r3, #4]
    mleft_pid_reg.kc = 1.0f;
   82c78:	4b23      	ldr	r3, [pc, #140]	; (82d08 <motor_init+0x1c8>)
   82c7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   82c7e:	609a      	str	r2, [r3, #8]
    mleft_pid_reg.kd = 5.0f;
   82c80:	4b21      	ldr	r3, [pc, #132]	; (82d08 <motor_init+0x1c8>)
   82c82:	4a24      	ldr	r2, [pc, #144]	; (82d14 <motor_init+0x1d4>)
   82c84:	60da      	str	r2, [r3, #12]
    mleft_pid_reg.outMin = -500.0f;
   82c86:	4b20      	ldr	r3, [pc, #128]	; (82d08 <motor_init+0x1c8>)
   82c88:	4a23      	ldr	r2, [pc, #140]	; (82d18 <motor_init+0x1d8>)
   82c8a:	619a      	str	r2, [r3, #24]
    mleft_pid_reg.outMax = 500.0f;
   82c8c:	4b1e      	ldr	r3, [pc, #120]	; (82d08 <motor_init+0x1c8>)
   82c8e:	4a23      	ldr	r2, [pc, #140]	; (82d1c <motor_init+0x1dc>)
   82c90:	615a      	str	r2, [r3, #20]

    mright_pid_reg = mleft_pid_reg;
   82c92:	4a23      	ldr	r2, [pc, #140]	; (82d20 <motor_init+0x1e0>)
   82c94:	4b1c      	ldr	r3, [pc, #112]	; (82d08 <motor_init+0x1c8>)
   82c96:	4614      	mov	r4, r2
   82c98:	461d      	mov	r5, r3
   82c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82ca2:	682b      	ldr	r3, [r5, #0]
   82ca4:	6023      	str	r3, [r4, #0]
    mrear_pid_reg = mleft_pid_reg;
   82ca6:	4a1f      	ldr	r2, [pc, #124]	; (82d24 <motor_init+0x1e4>)
   82ca8:	4b17      	ldr	r3, [pc, #92]	; (82d08 <motor_init+0x1c8>)
   82caa:	4614      	mov	r4, r2
   82cac:	461d      	mov	r5, r3
   82cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82cb6:	682b      	ldr	r3, [r5, #0]
   82cb8:	6023      	str	r3, [r4, #0]
}
   82cba:	bf00      	nop
   82cbc:	bdb0      	pop	{r4, r5, r7, pc}
   82cbe:	bf00      	nop
   82cc0:	20070e80 	.word	0x20070e80
   82cc4:	40094000 	.word	0x40094000
   82cc8:	00080369 	.word	0x00080369
   82ccc:	20070f50 	.word	0x20070f50
   82cd0:	20070ef8 	.word	0x20070ef8
   82cd4:	00080615 	.word	0x00080615
   82cd8:	20070ea8 	.word	0x20070ea8
   82cdc:	000805f3 	.word	0x000805f3
   82ce0:	00082a85 	.word	0x00082a85
   82ce4:	40080000 	.word	0x40080000
   82ce8:	00080637 	.word	0x00080637
   82cec:	0008068f 	.word	0x0008068f
   82cf0:	000829c9 	.word	0x000829c9
   82cf4:	000829fd 	.word	0x000829fd
   82cf8:	00082a31 	.word	0x00082a31
   82cfc:	00082999 	.word	0x00082999
   82d00:	000806b3 	.word	0x000806b3
   82d04:	0008066f 	.word	0x0008066f
   82d08:	20070f78 	.word	0x20070f78
   82d0c:	41700000 	.word	0x41700000
   82d10:	41200000 	.word	0x41200000
   82d14:	40a00000 	.word	0x40a00000
   82d18:	c3fa0000 	.word	0xc3fa0000
   82d1c:	43fa0000 	.word	0x43fa0000
   82d20:	20070ed0 	.word	0x20070ed0
   82d24:	20070f20 	.word	0x20070f20

00082d28 <enable_motor>:

void enable_motor(void)
{
   82d28:	b580      	push	{r7, lr}
   82d2a:	af00      	add	r7, sp, #0
    pwm_channel_enable(PWM, MOTOR_LEFT);
   82d2c:	2100      	movs	r1, #0
   82d2e:	480d      	ldr	r0, [pc, #52]	; (82d64 <enable_motor+0x3c>)
   82d30:	4b0d      	ldr	r3, [pc, #52]	; (82d68 <enable_motor+0x40>)
   82d32:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_RIGHT);
   82d34:	2101      	movs	r1, #1
   82d36:	480b      	ldr	r0, [pc, #44]	; (82d64 <enable_motor+0x3c>)
   82d38:	4b0b      	ldr	r3, [pc, #44]	; (82d68 <enable_motor+0x40>)
   82d3a:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_REAR);
   82d3c:	2102      	movs	r1, #2
   82d3e:	4809      	ldr	r0, [pc, #36]	; (82d64 <enable_motor+0x3c>)
   82d40:	4b09      	ldr	r3, [pc, #36]	; (82d68 <enable_motor+0x40>)
   82d42:	4798      	blx	r3

    ioport_set_pin_level(ENC_LOAD, 0);
   82d44:	2100      	movs	r1, #0
   82d46:	2020      	movs	r0, #32
   82d48:	4b08      	ldr	r3, [pc, #32]	; (82d6c <enable_motor+0x44>)
   82d4a:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   82d4c:	2101      	movs	r1, #1
   82d4e:	2020      	movs	r0, #32
   82d50:	4b06      	ldr	r3, [pc, #24]	; (82d6c <enable_motor+0x44>)
   82d52:	4798      	blx	r3

    tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82d54:	2210      	movs	r2, #16
   82d56:	2101      	movs	r1, #1
   82d58:	4805      	ldr	r0, [pc, #20]	; (82d70 <enable_motor+0x48>)
   82d5a:	4b06      	ldr	r3, [pc, #24]	; (82d74 <enable_motor+0x4c>)
   82d5c:	4798      	blx	r3
}
   82d5e:	bf00      	nop
   82d60:	bd80      	pop	{r7, pc}
   82d62:	bf00      	nop
   82d64:	40094000 	.word	0x40094000
   82d68:	000805f3 	.word	0x000805f3
   82d6c:	00082aa1 	.word	0x00082aa1
   82d70:	40080000 	.word	0x40080000
   82d74:	000806b3 	.word	0x000806b3

00082d78 <motor_speed>:
        pwm_channel_enable(PWM, ENC_CLK);
    }*/ 
}

void motor_speed(uint8_t motor, int16_t ispeed)
{
   82d78:	b580      	push	{r7, lr}
   82d7a:	b084      	sub	sp, #16
   82d7c:	af00      	add	r7, sp, #0
   82d7e:	4603      	mov	r3, r0
   82d80:	460a      	mov	r2, r1
   82d82:	71fb      	strb	r3, [r7, #7]
   82d84:	4613      	mov	r3, r2
   82d86:	80bb      	strh	r3, [r7, #4]
    if (ispeed > 500)
   82d88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82d8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82d90:	dd02      	ble.n	82d98 <motor_speed+0x20>
    {
        ispeed = 500;
   82d92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82d96:	80bb      	strh	r3, [r7, #4]
    }

    if (ispeed < -500)
   82d98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82d9c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
   82da0:	da02      	bge.n	82da8 <motor_speed+0x30>
    {
        ispeed = -500;
   82da2:	f64f 630c 	movw	r3, #65036	; 0xfe0c
   82da6:	80bb      	strh	r3, [r7, #4]
    }

    uint16_t duty_cycle = (uint16_t)(ispeed + (int16_t)INIT_DUTY_VALUE);
   82da8:	88bb      	ldrh	r3, [r7, #4]
   82daa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   82dae:	81fb      	strh	r3, [r7, #14]

    if (duty_cycle < 10)
   82db0:	89fb      	ldrh	r3, [r7, #14]
   82db2:	2b09      	cmp	r3, #9
   82db4:	d801      	bhi.n	82dba <motor_speed+0x42>
    {
        duty_cycle = 10;
   82db6:	230a      	movs	r3, #10
   82db8:	81fb      	strh	r3, [r7, #14]
    }

    if (duty_cycle > 990)
   82dba:	89fb      	ldrh	r3, [r7, #14]
   82dbc:	f240 32de 	movw	r2, #990	; 0x3de
   82dc0:	4293      	cmp	r3, r2
   82dc2:	d902      	bls.n	82dca <motor_speed+0x52>
    {
        duty_cycle = 990;
   82dc4:	f240 33de 	movw	r3, #990	; 0x3de
   82dc8:	81fb      	strh	r3, [r7, #14]
    }

    switch(motor)
   82dca:	79fb      	ldrb	r3, [r7, #7]
   82dcc:	2b01      	cmp	r3, #1
   82dce:	d00b      	beq.n	82de8 <motor_speed+0x70>
   82dd0:	2b02      	cmp	r3, #2
   82dd2:	d010      	beq.n	82df6 <motor_speed+0x7e>
   82dd4:	2b00      	cmp	r3, #0
   82dd6:	d000      	beq.n	82dda <motor_speed+0x62>
            break;
        case MOTOR_REAR:
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
            break;
        default:
            break;
   82dd8:	e014      	b.n	82e04 <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MLeft, duty_cycle);
   82dda:	89fb      	ldrh	r3, [r7, #14]
   82ddc:	461a      	mov	r2, r3
   82dde:	490b      	ldr	r1, [pc, #44]	; (82e0c <motor_speed+0x94>)
   82de0:	480b      	ldr	r0, [pc, #44]	; (82e10 <motor_speed+0x98>)
   82de2:	4b0c      	ldr	r3, [pc, #48]	; (82e14 <motor_speed+0x9c>)
   82de4:	4798      	blx	r3
            break;
   82de6:	e00d      	b.n	82e04 <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRight, duty_cycle);
   82de8:	89fb      	ldrh	r3, [r7, #14]
   82dea:	461a      	mov	r2, r3
   82dec:	490a      	ldr	r1, [pc, #40]	; (82e18 <motor_speed+0xa0>)
   82dee:	4808      	ldr	r0, [pc, #32]	; (82e10 <motor_speed+0x98>)
   82df0:	4b08      	ldr	r3, [pc, #32]	; (82e14 <motor_speed+0x9c>)
   82df2:	4798      	blx	r3
            break;
   82df4:	e006      	b.n	82e04 <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
   82df6:	89fb      	ldrh	r3, [r7, #14]
   82df8:	461a      	mov	r2, r3
   82dfa:	4908      	ldr	r1, [pc, #32]	; (82e1c <motor_speed+0xa4>)
   82dfc:	4804      	ldr	r0, [pc, #16]	; (82e10 <motor_speed+0x98>)
   82dfe:	4b05      	ldr	r3, [pc, #20]	; (82e14 <motor_speed+0x9c>)
   82e00:	4798      	blx	r3
            break;
   82e02:	bf00      	nop
    }
}
   82e04:	bf00      	nop
   82e06:	3710      	adds	r7, #16
   82e08:	46bd      	mov	sp, r7
   82e0a:	bd80      	pop	{r7, pc}
   82e0c:	20070e80 	.word	0x20070e80
   82e10:	40094000 	.word	0x40094000
   82e14:	000805af 	.word	0x000805af
   82e18:	20070f50 	.word	0x20070f50
   82e1c:	20070ef8 	.word	0x20070ef8

00082e20 <TC1_Handler>:

void TC1_Handler(void)
{
   82e20:	b590      	push	{r4, r7, lr}
   82e22:	b085      	sub	sp, #20
   82e24:	af00      	add	r7, sp, #0
    uint32_t PIOC_value;
    int32_t eleft_counts;
    int32_t eright_counts;
    int32_t erear_counts;

    ioport_set_pin_level(LED_M3, 1);
   82e26:	2101      	movs	r1, #1
   82e28:	2069      	movs	r0, #105	; 0x69
   82e2a:	4b50      	ldr	r3, [pc, #320]	; (82f6c <TC1_Handler+0x14c>)
   82e2c:	4798      	blx	r3

    if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   82e2e:	2101      	movs	r1, #1
   82e30:	484f      	ldr	r0, [pc, #316]	; (82f70 <TC1_Handler+0x150>)
   82e32:	4b50      	ldr	r3, [pc, #320]	; (82f74 <TC1_Handler+0x154>)
   82e34:	4798      	blx	r3
   82e36:	4603      	mov	r3, r0
   82e38:	f003 0310 	and.w	r3, r3, #16
   82e3c:	2b10      	cmp	r3, #16
   82e3e:	f040 808c 	bne.w	82f5a <TC1_Handler+0x13a>
    {
        pwm_channel_disable(PWM, ENC_CLK);
   82e42:	2104      	movs	r1, #4
   82e44:	484c      	ldr	r0, [pc, #304]	; (82f78 <TC1_Handler+0x158>)
   82e46:	4b4d      	ldr	r3, [pc, #308]	; (82f7c <TC1_Handler+0x15c>)
   82e48:	4798      	blx	r3
        PIOC_value = ioport_get_port_level(IOPORT_PIOC, 0xFFFFFFFF);
   82e4a:	f04f 31ff 	mov.w	r1, #4294967295
   82e4e:	2002      	movs	r0, #2
   82e50:	4b4b      	ldr	r3, [pc, #300]	; (82f80 <TC1_Handler+0x160>)
   82e52:	4798      	blx	r3
   82e54:	60f8      	str	r0, [r7, #12]
        ioport_set_pin_level(ENC_LOAD, 0);
   82e56:	2100      	movs	r1, #0
   82e58:	2020      	movs	r0, #32
   82e5a:	4b44      	ldr	r3, [pc, #272]	; (82f6c <TC1_Handler+0x14c>)
   82e5c:	4798      	blx	r3
        ioport_set_pin_level(ENC_LOAD, 1);
   82e5e:	2101      	movs	r1, #1
   82e60:	2020      	movs	r0, #32
   82e62:	4b42      	ldr	r3, [pc, #264]	; (82f6c <TC1_Handler+0x14c>)
   82e64:	4798      	blx	r3
        pwm_channel_enable(PWM, ENC_CLK);
   82e66:	2104      	movs	r1, #4
   82e68:	4843      	ldr	r0, [pc, #268]	; (82f78 <TC1_Handler+0x158>)
   82e6a:	4b46      	ldr	r3, [pc, #280]	; (82f84 <TC1_Handler+0x164>)
   82e6c:	4798      	blx	r3

        eleft_counts = (PIOC_value & 0x7F000000) >> 24;
   82e6e:	68fb      	ldr	r3, [r7, #12]
   82e70:	0e1b      	lsrs	r3, r3, #24
   82e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   82e76:	60bb      	str	r3, [r7, #8]
        eleft_counts = (eleft_counts & 0x00000040) ? eleft_counts - 128 : eleft_counts;
   82e78:	68bb      	ldr	r3, [r7, #8]
   82e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82e7e:	2b00      	cmp	r3, #0
   82e80:	d002      	beq.n	82e88 <TC1_Handler+0x68>
   82e82:	68bb      	ldr	r3, [r7, #8]
   82e84:	3b80      	subs	r3, #128	; 0x80
   82e86:	e000      	b.n	82e8a <TC1_Handler+0x6a>
   82e88:	68bb      	ldr	r3, [r7, #8]
   82e8a:	60bb      	str	r3, [r7, #8]
        eright_counts = ((PIOC_value & 0x00C00000) >> 17) | ((PIOC_value & 0x001F0000) >> 16);
   82e8c:	68fb      	ldr	r3, [r7, #12]
   82e8e:	0c5b      	lsrs	r3, r3, #17
   82e90:	f003 0260 	and.w	r2, r3, #96	; 0x60
   82e94:	68fb      	ldr	r3, [r7, #12]
   82e96:	0c1b      	lsrs	r3, r3, #16
   82e98:	f003 031f 	and.w	r3, r3, #31
   82e9c:	4313      	orrs	r3, r2
   82e9e:	607b      	str	r3, [r7, #4]
        eright_counts = (eright_counts & 0x00000040) ? eright_counts - 128 : eright_counts;
   82ea0:	687b      	ldr	r3, [r7, #4]
   82ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82ea6:	2b00      	cmp	r3, #0
   82ea8:	d002      	beq.n	82eb0 <TC1_Handler+0x90>
   82eaa:	687b      	ldr	r3, [r7, #4]
   82eac:	3b80      	subs	r3, #128	; 0x80
   82eae:	e000      	b.n	82eb2 <TC1_Handler+0x92>
   82eb0:	687b      	ldr	r3, [r7, #4]
   82eb2:	607b      	str	r3, [r7, #4]
        erear_counts = ((PIOC_value & 0x0000FC00) >> 9) | ((PIOC_value & 0x00000002) >> 1);
   82eb4:	68fb      	ldr	r3, [r7, #12]
   82eb6:	0a5b      	lsrs	r3, r3, #9
   82eb8:	f003 027e 	and.w	r2, r3, #126	; 0x7e
   82ebc:	68fb      	ldr	r3, [r7, #12]
   82ebe:	085b      	lsrs	r3, r3, #1
   82ec0:	f003 0301 	and.w	r3, r3, #1
   82ec4:	4313      	orrs	r3, r2
   82ec6:	603b      	str	r3, [r7, #0]
        erear_counts = (erear_counts & 0x00000040) ? erear_counts - 128 : erear_counts;
   82ec8:	683b      	ldr	r3, [r7, #0]
   82eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82ece:	2b00      	cmp	r3, #0
   82ed0:	d002      	beq.n	82ed8 <TC1_Handler+0xb8>
   82ed2:	683b      	ldr	r3, [r7, #0]
   82ed4:	3b80      	subs	r3, #128	; 0x80
   82ed6:	e000      	b.n	82eda <TC1_Handler+0xba>
   82ed8:	683b      	ldr	r3, [r7, #0]
   82eda:	603b      	str	r3, [r7, #0]

        motor_speed(MOTOR_LEFT, pidReg(&mleft_pid_reg, speed_mleft, (float)eleft_counts));
   82edc:	4b2a      	ldr	r3, [pc, #168]	; (82f88 <TC1_Handler+0x168>)
   82ede:	681c      	ldr	r4, [r3, #0]
   82ee0:	4b2a      	ldr	r3, [pc, #168]	; (82f8c <TC1_Handler+0x16c>)
   82ee2:	68b8      	ldr	r0, [r7, #8]
   82ee4:	4798      	blx	r3
   82ee6:	4603      	mov	r3, r0
   82ee8:	461a      	mov	r2, r3
   82eea:	4621      	mov	r1, r4
   82eec:	4828      	ldr	r0, [pc, #160]	; (82f90 <TC1_Handler+0x170>)
   82eee:	4b29      	ldr	r3, [pc, #164]	; (82f94 <TC1_Handler+0x174>)
   82ef0:	4798      	blx	r3
   82ef2:	4602      	mov	r2, r0
   82ef4:	4b28      	ldr	r3, [pc, #160]	; (82f98 <TC1_Handler+0x178>)
   82ef6:	4610      	mov	r0, r2
   82ef8:	4798      	blx	r3
   82efa:	4603      	mov	r3, r0
   82efc:	b21b      	sxth	r3, r3
   82efe:	4619      	mov	r1, r3
   82f00:	2000      	movs	r0, #0
   82f02:	4b26      	ldr	r3, [pc, #152]	; (82f9c <TC1_Handler+0x17c>)
   82f04:	4798      	blx	r3
        motor_speed(MOTOR_RIGHT, pidReg(&mright_pid_reg, speed_mright, (float)eright_counts));
   82f06:	4b26      	ldr	r3, [pc, #152]	; (82fa0 <TC1_Handler+0x180>)
   82f08:	681c      	ldr	r4, [r3, #0]
   82f0a:	4b20      	ldr	r3, [pc, #128]	; (82f8c <TC1_Handler+0x16c>)
   82f0c:	6878      	ldr	r0, [r7, #4]
   82f0e:	4798      	blx	r3
   82f10:	4603      	mov	r3, r0
   82f12:	461a      	mov	r2, r3
   82f14:	4621      	mov	r1, r4
   82f16:	4823      	ldr	r0, [pc, #140]	; (82fa4 <TC1_Handler+0x184>)
   82f18:	4b1e      	ldr	r3, [pc, #120]	; (82f94 <TC1_Handler+0x174>)
   82f1a:	4798      	blx	r3
   82f1c:	4602      	mov	r2, r0
   82f1e:	4b1e      	ldr	r3, [pc, #120]	; (82f98 <TC1_Handler+0x178>)
   82f20:	4610      	mov	r0, r2
   82f22:	4798      	blx	r3
   82f24:	4603      	mov	r3, r0
   82f26:	b21b      	sxth	r3, r3
   82f28:	4619      	mov	r1, r3
   82f2a:	2001      	movs	r0, #1
   82f2c:	4b1b      	ldr	r3, [pc, #108]	; (82f9c <TC1_Handler+0x17c>)
   82f2e:	4798      	blx	r3
        motor_speed(MOTOR_REAR, pidReg(&mrear_pid_reg, speed_mrear, (float)erear_counts));
   82f30:	4b1d      	ldr	r3, [pc, #116]	; (82fa8 <TC1_Handler+0x188>)
   82f32:	681c      	ldr	r4, [r3, #0]
   82f34:	4b15      	ldr	r3, [pc, #84]	; (82f8c <TC1_Handler+0x16c>)
   82f36:	6838      	ldr	r0, [r7, #0]
   82f38:	4798      	blx	r3
   82f3a:	4603      	mov	r3, r0
   82f3c:	461a      	mov	r2, r3
   82f3e:	4621      	mov	r1, r4
   82f40:	481a      	ldr	r0, [pc, #104]	; (82fac <TC1_Handler+0x18c>)
   82f42:	4b14      	ldr	r3, [pc, #80]	; (82f94 <TC1_Handler+0x174>)
   82f44:	4798      	blx	r3
   82f46:	4602      	mov	r2, r0
   82f48:	4b13      	ldr	r3, [pc, #76]	; (82f98 <TC1_Handler+0x178>)
   82f4a:	4610      	mov	r0, r2
   82f4c:	4798      	blx	r3
   82f4e:	4603      	mov	r3, r0
   82f50:	b21b      	sxth	r3, r3
   82f52:	4619      	mov	r1, r3
   82f54:	2002      	movs	r0, #2
   82f56:	4b11      	ldr	r3, [pc, #68]	; (82f9c <TC1_Handler+0x17c>)
   82f58:	4798      	blx	r3

        //pwm_channel_enable(PWM, ENC_CLK);
    }

    ioport_set_pin_level(LED_M3, 0);
   82f5a:	2100      	movs	r1, #0
   82f5c:	2069      	movs	r0, #105	; 0x69
   82f5e:	4b03      	ldr	r3, [pc, #12]	; (82f6c <TC1_Handler+0x14c>)
   82f60:	4798      	blx	r3
}
   82f62:	bf00      	nop
   82f64:	3714      	adds	r7, #20
   82f66:	46bd      	mov	sp, r7
   82f68:	bd90      	pop	{r4, r7, pc}
   82f6a:	bf00      	nop
   82f6c:	00082aa1 	.word	0x00082aa1
   82f70:	40080000 	.word	0x40080000
   82f74:	000806d9 	.word	0x000806d9
   82f78:	40094000 	.word	0x40094000
   82f7c:	00080615 	.word	0x00080615
   82f80:	00082b0b 	.word	0x00082b0b
   82f84:	000805f3 	.word	0x000805f3
   82f88:	20070f48 	.word	0x20070f48
   82f8c:	00085201 	.word	0x00085201
   82f90:	20070f78 	.word	0x20070f78
   82f94:	00082fb1 	.word	0x00082fb1
   82f98:	00085635 	.word	0x00085635
   82f9c:	00082d79 	.word	0x00082d79
   82fa0:	20070ef4 	.word	0x20070ef4
   82fa4:	20070ed0 	.word	0x20070ed0
   82fa8:	20070fd0 	.word	0x20070fd0
   82fac:	20070f20 	.word	0x20070f20

00082fb0 <pidReg>:
/************************************************************************/

#include "pid.h"

float pidReg(pidReg_t* reg, float refer, float act)
{
   82fb0:	b590      	push	{r4, r7, lr}
   82fb2:	b08b      	sub	sp, #44	; 0x2c
   82fb4:	af00      	add	r7, sp, #0
   82fb6:	60f8      	str	r0, [r7, #12]
   82fb8:	60b9      	str	r1, [r7, #8]
   82fba:	607a      	str	r2, [r7, #4]
    float diff;
    float outPreSat;
    float out;

    // Compute the error
    err = refer - act;
   82fbc:	4b3c      	ldr	r3, [pc, #240]	; (830b0 <pidReg+0x100>)
   82fbe:	6879      	ldr	r1, [r7, #4]
   82fc0:	68b8      	ldr	r0, [r7, #8]
   82fc2:	4798      	blx	r3
   82fc4:	4603      	mov	r3, r0
   82fc6:	623b      	str	r3, [r7, #32]

    // Compute the proportional output
    prop = reg->kp * err;
   82fc8:	68fb      	ldr	r3, [r7, #12]
   82fca:	681a      	ldr	r2, [r3, #0]
   82fcc:	4b39      	ldr	r3, [pc, #228]	; (830b4 <pidReg+0x104>)
   82fce:	6a39      	ldr	r1, [r7, #32]
   82fd0:	4610      	mov	r0, r2
   82fd2:	4798      	blx	r3
   82fd4:	4603      	mov	r3, r0
   82fd6:	61fb      	str	r3, [r7, #28]

    // Compute the integral output
    reg->intg = reg->intg + reg->ki * err + reg->kc * reg->satErr;
   82fd8:	68fb      	ldr	r3, [r7, #12]
   82fda:	691c      	ldr	r4, [r3, #16]
   82fdc:	68fb      	ldr	r3, [r7, #12]
   82fde:	685a      	ldr	r2, [r3, #4]
   82fe0:	4b34      	ldr	r3, [pc, #208]	; (830b4 <pidReg+0x104>)
   82fe2:	6a39      	ldr	r1, [r7, #32]
   82fe4:	4610      	mov	r0, r2
   82fe6:	4798      	blx	r3
   82fe8:	4603      	mov	r3, r0
   82fea:	461a      	mov	r2, r3
   82fec:	4b32      	ldr	r3, [pc, #200]	; (830b8 <pidReg+0x108>)
   82fee:	4611      	mov	r1, r2
   82ff0:	4620      	mov	r0, r4
   82ff2:	4798      	blx	r3
   82ff4:	4603      	mov	r3, r0
   82ff6:	461c      	mov	r4, r3
   82ff8:	68fb      	ldr	r3, [r7, #12]
   82ffa:	689a      	ldr	r2, [r3, #8]
   82ffc:	68fb      	ldr	r3, [r7, #12]
   82ffe:	69d9      	ldr	r1, [r3, #28]
   83000:	4b2c      	ldr	r3, [pc, #176]	; (830b4 <pidReg+0x104>)
   83002:	4610      	mov	r0, r2
   83004:	4798      	blx	r3
   83006:	4603      	mov	r3, r0
   83008:	461a      	mov	r2, r3
   8300a:	4b2b      	ldr	r3, [pc, #172]	; (830b8 <pidReg+0x108>)
   8300c:	4611      	mov	r1, r2
   8300e:	4620      	mov	r0, r4
   83010:	4798      	blx	r3
   83012:	4603      	mov	r3, r0
   83014:	461a      	mov	r2, r3
   83016:	68fb      	ldr	r3, [r7, #12]
   83018:	611a      	str	r2, [r3, #16]

    // Compute the derivative output
    diff = reg->kd * (err - reg->prevErr);
   8301a:	68fb      	ldr	r3, [r7, #12]
   8301c:	68dc      	ldr	r4, [r3, #12]
   8301e:	68fb      	ldr	r3, [r7, #12]
   83020:	6a1a      	ldr	r2, [r3, #32]
   83022:	4b23      	ldr	r3, [pc, #140]	; (830b0 <pidReg+0x100>)
   83024:	4611      	mov	r1, r2
   83026:	6a38      	ldr	r0, [r7, #32]
   83028:	4798      	blx	r3
   8302a:	4603      	mov	r3, r0
   8302c:	461a      	mov	r2, r3
   8302e:	4b21      	ldr	r3, [pc, #132]	; (830b4 <pidReg+0x104>)
   83030:	4611      	mov	r1, r2
   83032:	4620      	mov	r0, r4
   83034:	4798      	blx	r3
   83036:	4603      	mov	r3, r0
   83038:	61bb      	str	r3, [r7, #24]

    // Compute the pre-saturated output
    outPreSat = prop + reg->intg + diff;
   8303a:	68fb      	ldr	r3, [r7, #12]
   8303c:	691a      	ldr	r2, [r3, #16]
   8303e:	4b1e      	ldr	r3, [pc, #120]	; (830b8 <pidReg+0x108>)
   83040:	69f9      	ldr	r1, [r7, #28]
   83042:	4610      	mov	r0, r2
   83044:	4798      	blx	r3
   83046:	4603      	mov	r3, r0
   83048:	461a      	mov	r2, r3
   8304a:	4b1b      	ldr	r3, [pc, #108]	; (830b8 <pidReg+0x108>)
   8304c:	69b9      	ldr	r1, [r7, #24]
   8304e:	4610      	mov	r0, r2
   83050:	4798      	blx	r3
   83052:	4603      	mov	r3, r0
   83054:	617b      	str	r3, [r7, #20]

    // Saturate the output
    if (outPreSat > reg->outMax)
   83056:	68fb      	ldr	r3, [r7, #12]
   83058:	695a      	ldr	r2, [r3, #20]
   8305a:	4b18      	ldr	r3, [pc, #96]	; (830bc <pidReg+0x10c>)
   8305c:	6979      	ldr	r1, [r7, #20]
   8305e:	4610      	mov	r0, r2
   83060:	4798      	blx	r3
   83062:	4603      	mov	r3, r0
   83064:	2b00      	cmp	r3, #0
   83066:	d003      	beq.n	83070 <pidReg+0xc0>
    {
        out = reg->outMax;
   83068:	68fb      	ldr	r3, [r7, #12]
   8306a:	695b      	ldr	r3, [r3, #20]
   8306c:	627b      	str	r3, [r7, #36]	; 0x24
   8306e:	e00e      	b.n	8308e <pidReg+0xde>
    }
    else if (outPreSat < reg->outMin)
   83070:	68fb      	ldr	r3, [r7, #12]
   83072:	699a      	ldr	r2, [r3, #24]
   83074:	4b12      	ldr	r3, [pc, #72]	; (830c0 <pidReg+0x110>)
   83076:	6979      	ldr	r1, [r7, #20]
   83078:	4610      	mov	r0, r2
   8307a:	4798      	blx	r3
   8307c:	4603      	mov	r3, r0
   8307e:	2b00      	cmp	r3, #0
   83080:	d003      	beq.n	8308a <pidReg+0xda>
    {
        out = reg->outMin;
   83082:	68fb      	ldr	r3, [r7, #12]
   83084:	699b      	ldr	r3, [r3, #24]
   83086:	627b      	str	r3, [r7, #36]	; 0x24
   83088:	e001      	b.n	8308e <pidReg+0xde>
    }
    else
    {
        out = outPreSat;
   8308a:	697b      	ldr	r3, [r7, #20]
   8308c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Compute the saturate difference
    reg->satErr = out - outPreSat;
   8308e:	4b08      	ldr	r3, [pc, #32]	; (830b0 <pidReg+0x100>)
   83090:	6979      	ldr	r1, [r7, #20]
   83092:	6a78      	ldr	r0, [r7, #36]	; 0x24
   83094:	4798      	blx	r3
   83096:	4603      	mov	r3, r0
   83098:	461a      	mov	r2, r3
   8309a:	68fb      	ldr	r3, [r7, #12]
   8309c:	61da      	str	r2, [r3, #28]

    // Keep error for next iteration
    reg->prevErr = err;
   8309e:	68fb      	ldr	r3, [r7, #12]
   830a0:	6a3a      	ldr	r2, [r7, #32]
   830a2:	621a      	str	r2, [r3, #32]

    return out;
   830a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   830a6:	4618      	mov	r0, r3
   830a8:	372c      	adds	r7, #44	; 0x2c
   830aa:	46bd      	mov	sp, r7
   830ac:	bd90      	pop	{r4, r7, pc}
   830ae:	bf00      	nop
   830b0:	00085095 	.word	0x00085095
   830b4:	000852a9 	.word	0x000852a9
   830b8:	00085099 	.word	0x00085099
   830bc:	000855e5 	.word	0x000855e5
   830c0:	00085621 	.word	0x00085621

000830c4 <ioport_set_pin_level>:
{
   830c4:	b480      	push	{r7}
   830c6:	b08b      	sub	sp, #44	; 0x2c
   830c8:	af00      	add	r7, sp, #0
   830ca:	6078      	str	r0, [r7, #4]
   830cc:	460b      	mov	r3, r1
   830ce:	70fb      	strb	r3, [r7, #3]
   830d0:	687b      	ldr	r3, [r7, #4]
   830d2:	627b      	str	r3, [r7, #36]	; 0x24
   830d4:	78fb      	ldrb	r3, [r7, #3]
   830d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   830da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   830dc:	61fb      	str	r3, [r7, #28]
   830de:	69fb      	ldr	r3, [r7, #28]
   830e0:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   830e2:	69bb      	ldr	r3, [r7, #24]
   830e4:	095b      	lsrs	r3, r3, #5
   830e6:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   830e8:	697b      	ldr	r3, [r7, #20]
   830ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   830ee:	f203 7307 	addw	r3, r3, #1799	; 0x707
   830f2:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   830f4:	613b      	str	r3, [r7, #16]
	if (level) {
   830f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   830fa:	2b00      	cmp	r3, #0
   830fc:	d009      	beq.n	83112 <ioport_set_pin_level+0x4e>
   830fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83100:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83102:	68fb      	ldr	r3, [r7, #12]
   83104:	f003 031f 	and.w	r3, r3, #31
   83108:	2201      	movs	r2, #1
   8310a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8310c:	693b      	ldr	r3, [r7, #16]
   8310e:	631a      	str	r2, [r3, #48]	; 0x30
}
   83110:	e008      	b.n	83124 <ioport_set_pin_level+0x60>
   83112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83114:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   83116:	68bb      	ldr	r3, [r7, #8]
   83118:	f003 031f 	and.w	r3, r3, #31
   8311c:	2201      	movs	r2, #1
   8311e:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83120:	693b      	ldr	r3, [r7, #16]
   83122:	635a      	str	r2, [r3, #52]	; 0x34
   83124:	bf00      	nop
   83126:	372c      	adds	r7, #44	; 0x2c
   83128:	46bd      	mov	sp, r7
   8312a:	bc80      	pop	{r7}
   8312c:	4770      	bx	lr
	...

00083130 <SysTick_Handler>:
//float battery_voltage = 0;
uint8_t battery_percentage;
uint8_t prev_battery_percentage = 0;

void SysTick_Handler(void)
{
   83130:	b480      	push	{r7}
   83132:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   83134:	4b04      	ldr	r3, [pc, #16]	; (83148 <SysTick_Handler+0x18>)
   83136:	681b      	ldr	r3, [r3, #0]
   83138:	3301      	adds	r3, #1
   8313a:	4a03      	ldr	r2, [pc, #12]	; (83148 <SysTick_Handler+0x18>)
   8313c:	6013      	str	r3, [r2, #0]
}
   8313e:	bf00      	nop
   83140:	46bd      	mov	sp, r7
   83142:	bc80      	pop	{r7}
   83144:	4770      	bx	lr
   83146:	bf00      	nop
   83148:	20070dc4 	.word	0x20070dc4

0008314c <getTicks>:

uint32_t getTicks(void)
{
   8314c:	b480      	push	{r7}
   8314e:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   83150:	4b02      	ldr	r3, [pc, #8]	; (8315c <getTicks+0x10>)
   83152:	681b      	ldr	r3, [r3, #0]
}
   83154:	4618      	mov	r0, r3
   83156:	46bd      	mov	sp, r7
   83158:	bc80      	pop	{r7}
   8315a:	4770      	bx	lr
   8315c:	20070dc4 	.word	0x20070dc4

00083160 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   83160:	b480      	push	{r7}
   83162:	b085      	sub	sp, #20
   83164:	af00      	add	r7, sp, #0
   83166:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   83168:	4b07      	ldr	r3, [pc, #28]	; (83188 <mdelay+0x28>)
   8316a:	681b      	ldr	r3, [r3, #0]
   8316c:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   8316e:	bf00      	nop
   83170:	4b05      	ldr	r3, [pc, #20]	; (83188 <mdelay+0x28>)
   83172:	681a      	ldr	r2, [r3, #0]
   83174:	68fb      	ldr	r3, [r7, #12]
   83176:	1ad2      	subs	r2, r2, r3
   83178:	687b      	ldr	r3, [r7, #4]
   8317a:	429a      	cmp	r2, r3
   8317c:	d3f8      	bcc.n	83170 <mdelay+0x10>
}
   8317e:	bf00      	nop
   83180:	3714      	adds	r7, #20
   83182:	46bd      	mov	sp, r7
   83184:	bc80      	pop	{r7}
   83186:	4770      	bx	lr
   83188:	20070dc4 	.word	0x20070dc4

0008318c <update_comm>:

void update_comm(void)
{
   8318c:	b580      	push	{r7, lr}
   8318e:	af00      	add	r7, sp, #0
    if ((getTicks() - ticks_comm) > 5)
   83190:	4b0b      	ldr	r3, [pc, #44]	; (831c0 <update_comm+0x34>)
   83192:	4798      	blx	r3
   83194:	4602      	mov	r2, r0
   83196:	4b0b      	ldr	r3, [pc, #44]	; (831c4 <update_comm+0x38>)
   83198:	681b      	ldr	r3, [r3, #0]
   8319a:	1ad3      	subs	r3, r2, r3
   8319c:	2b05      	cmp	r3, #5
   8319e:	d90d      	bls.n	831bc <update_comm+0x30>
    {
        ticks_comm = getTicks();
   831a0:	4b07      	ldr	r3, [pc, #28]	; (831c0 <update_comm+0x34>)
   831a2:	4798      	blx	r3
   831a4:	4602      	mov	r2, r0
   831a6:	4b07      	ldr	r3, [pc, #28]	; (831c4 <update_comm+0x38>)
   831a8:	601a      	str	r2, [r3, #0]
        
        memcpy(&sens_buf, &mts, sizeof(mts));
   831aa:	2208      	movs	r2, #8
   831ac:	4906      	ldr	r1, [pc, #24]	; (831c8 <update_comm+0x3c>)
   831ae:	4807      	ldr	r0, [pc, #28]	; (831cc <update_comm+0x40>)
   831b0:	4b07      	ldr	r3, [pc, #28]	; (831d0 <update_comm+0x44>)
   831b2:	4798      	blx	r3
        spi_master_transfer(&sens_buf, sizeof(sens_buf));
   831b4:	2110      	movs	r1, #16
   831b6:	4805      	ldr	r0, [pc, #20]	; (831cc <update_comm+0x40>)
   831b8:	4b06      	ldr	r3, [pc, #24]	; (831d4 <update_comm+0x48>)
   831ba:	4798      	blx	r3
    }
}
   831bc:	bf00      	nop
   831be:	bd80      	pop	{r7, pc}
   831c0:	0008314d 	.word	0x0008314d
   831c4:	20070e34 	.word	0x20070e34
   831c8:	20070e18 	.word	0x20070e18
   831cc:	20070e08 	.word	0x20070e08
   831d0:	000856d1 	.word	0x000856d1
   831d4:	00080b15 	.word	0x00080b15

000831d8 <update_battery>:

void update_battery(Bool update_forced)
{
   831d8:	b580      	push	{r7, lr}
   831da:	b084      	sub	sp, #16
   831dc:	af00      	add	r7, sp, #0
   831de:	4603      	mov	r3, r0
   831e0:	71fb      	strb	r3, [r7, #7]
    char tmp[6];
    battery_percentage = stm.battery.percentage;
   831e2:	4b20      	ldr	r3, [pc, #128]	; (83264 <update_battery+0x8c>)
   831e4:	7b5a      	ldrb	r2, [r3, #13]
   831e6:	4b20      	ldr	r3, [pc, #128]	; (83268 <update_battery+0x90>)
   831e8:	701a      	strb	r2, [r3, #0]
    
    if (update_forced || prev_battery_percentage != battery_percentage)
   831ea:	79fb      	ldrb	r3, [r7, #7]
   831ec:	2b00      	cmp	r3, #0
   831ee:	d105      	bne.n	831fc <update_battery+0x24>
   831f0:	4b1e      	ldr	r3, [pc, #120]	; (8326c <update_battery+0x94>)
   831f2:	781a      	ldrb	r2, [r3, #0]
   831f4:	4b1c      	ldr	r3, [pc, #112]	; (83268 <update_battery+0x90>)
   831f6:	781b      	ldrb	r3, [r3, #0]
   831f8:	429a      	cmp	r2, r3
   831fa:	d02f      	beq.n	8325c <update_battery+0x84>
    {
        if (battery_percentage >= 100)
   831fc:	4b1a      	ldr	r3, [pc, #104]	; (83268 <update_battery+0x90>)
   831fe:	781b      	ldrb	r3, [r3, #0]
   83200:	2b63      	cmp	r3, #99	; 0x63
   83202:	d909      	bls.n	83218 <update_battery+0x40>
        {
            sprintf(tmp, "%3u%%", battery_percentage);
   83204:	4b18      	ldr	r3, [pc, #96]	; (83268 <update_battery+0x90>)
   83206:	781b      	ldrb	r3, [r3, #0]
   83208:	461a      	mov	r2, r3
   8320a:	f107 0308 	add.w	r3, r7, #8
   8320e:	4918      	ldr	r1, [pc, #96]	; (83270 <update_battery+0x98>)
   83210:	4618      	mov	r0, r3
   83212:	4b18      	ldr	r3, [pc, #96]	; (83274 <update_battery+0x9c>)
   83214:	4798      	blx	r3
   83216:	e016      	b.n	83246 <update_battery+0x6e>
        }
        else if (battery_percentage >= 10)
   83218:	4b13      	ldr	r3, [pc, #76]	; (83268 <update_battery+0x90>)
   8321a:	781b      	ldrb	r3, [r3, #0]
   8321c:	2b09      	cmp	r3, #9
   8321e:	d909      	bls.n	83234 <update_battery+0x5c>
        {
            sprintf(tmp, " %2u%%", battery_percentage);
   83220:	4b11      	ldr	r3, [pc, #68]	; (83268 <update_battery+0x90>)
   83222:	781b      	ldrb	r3, [r3, #0]
   83224:	461a      	mov	r2, r3
   83226:	f107 0308 	add.w	r3, r7, #8
   8322a:	4913      	ldr	r1, [pc, #76]	; (83278 <update_battery+0xa0>)
   8322c:	4618      	mov	r0, r3
   8322e:	4b11      	ldr	r3, [pc, #68]	; (83274 <update_battery+0x9c>)
   83230:	4798      	blx	r3
   83232:	e008      	b.n	83246 <update_battery+0x6e>
        }
        else
        {
            sprintf(tmp, "  %1u%%", battery_percentage);
   83234:	4b0c      	ldr	r3, [pc, #48]	; (83268 <update_battery+0x90>)
   83236:	781b      	ldrb	r3, [r3, #0]
   83238:	461a      	mov	r2, r3
   8323a:	f107 0308 	add.w	r3, r7, #8
   8323e:	490f      	ldr	r1, [pc, #60]	; (8327c <update_battery+0xa4>)
   83240:	4618      	mov	r0, r3
   83242:	4b0c      	ldr	r3, [pc, #48]	; (83274 <update_battery+0x9c>)
   83244:	4798      	blx	r3
        }
            
        lcd_print_s(1, 16, tmp);
   83246:	f107 0308 	add.w	r3, r7, #8
   8324a:	461a      	mov	r2, r3
   8324c:	2110      	movs	r1, #16
   8324e:	2001      	movs	r0, #1
   83250:	4b0b      	ldr	r3, [pc, #44]	; (83280 <update_battery+0xa8>)
   83252:	4798      	blx	r3
        prev_battery_percentage = battery_percentage;
   83254:	4b04      	ldr	r3, [pc, #16]	; (83268 <update_battery+0x90>)
   83256:	781a      	ldrb	r2, [r3, #0]
   83258:	4b04      	ldr	r3, [pc, #16]	; (8326c <update_battery+0x94>)
   8325a:	701a      	strb	r2, [r3, #0]
    }
}
   8325c:	bf00      	nop
   8325e:	3710      	adds	r7, #16
   83260:	46bd      	mov	sp, r7
   83262:	bd80      	pop	{r7, pc}
   83264:	20070e20 	.word	0x20070e20
   83268:	20070fd4 	.word	0x20070fd4
   8326c:	20070dc8 	.word	0x20070dc8
   83270:	00089918 	.word	0x00089918
   83274:	00085859 	.word	0x00085859
   83278:	00089920 	.word	0x00089920
   8327c:	00089928 	.word	0x00089928
   83280:	0008169d 	.word	0x0008169d

00083284 <update_heartbeat>:

void update_heartbeat(void)
{
   83284:	b580      	push	{r7, lr}
   83286:	af00      	add	r7, sp, #0
    if (heart_state)
   83288:	4b20      	ldr	r3, [pc, #128]	; (8330c <update_heartbeat+0x88>)
   8328a:	781b      	ldrb	r3, [r3, #0]
   8328c:	2b00      	cmp	r3, #0
   8328e:	d01d      	beq.n	832cc <update_heartbeat+0x48>
    {
        if (getTicks() >= (ticks_heartbeat + 100))
   83290:	4b1f      	ldr	r3, [pc, #124]	; (83310 <update_heartbeat+0x8c>)
   83292:	4798      	blx	r3
   83294:	4602      	mov	r2, r0
   83296:	4b1f      	ldr	r3, [pc, #124]	; (83314 <update_heartbeat+0x90>)
   83298:	681b      	ldr	r3, [r3, #0]
   8329a:	3364      	adds	r3, #100	; 0x64
   8329c:	429a      	cmp	r2, r3
   8329e:	d333      	bcc.n	83308 <update_heartbeat+0x84>
        {
            ticks_heartbeat = getTicks();
   832a0:	4b1b      	ldr	r3, [pc, #108]	; (83310 <update_heartbeat+0x8c>)
   832a2:	4798      	blx	r3
   832a4:	4602      	mov	r2, r0
   832a6:	4b1b      	ldr	r3, [pc, #108]	; (83314 <update_heartbeat+0x90>)
   832a8:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 0);
   832aa:	2100      	movs	r1, #0
   832ac:	206a      	movs	r0, #106	; 0x6a
   832ae:	4b1a      	ldr	r3, [pc, #104]	; (83318 <update_heartbeat+0x94>)
   832b0:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 0);
   832b2:	2100      	movs	r1, #0
   832b4:	2067      	movs	r0, #103	; 0x67
   832b6:	4b18      	ldr	r3, [pc, #96]	; (83318 <update_heartbeat+0x94>)
   832b8:	4798      	blx	r3
            mts.ibit.heartbeat = 0;
   832ba:	4a18      	ldr	r2, [pc, #96]	; (8331c <update_heartbeat+0x98>)
   832bc:	7813      	ldrb	r3, [r2, #0]
   832be:	f36f 0300 	bfc	r3, #0, #1
   832c2:	7013      	strb	r3, [r2, #0]
            heart_state = 0;
   832c4:	4b11      	ldr	r3, [pc, #68]	; (8330c <update_heartbeat+0x88>)
   832c6:	2200      	movs	r2, #0
   832c8:	701a      	strb	r2, [r3, #0]
            ioport_set_pin_level(LED_M1, 1);
            mts.ibit.heartbeat = 1;
            heart_state = 1;
        }
    }
}
   832ca:	e01d      	b.n	83308 <update_heartbeat+0x84>
        if (getTicks() >= (ticks_heartbeat + 900))
   832cc:	4b10      	ldr	r3, [pc, #64]	; (83310 <update_heartbeat+0x8c>)
   832ce:	4798      	blx	r3
   832d0:	4602      	mov	r2, r0
   832d2:	4b10      	ldr	r3, [pc, #64]	; (83314 <update_heartbeat+0x90>)
   832d4:	681b      	ldr	r3, [r3, #0]
   832d6:	f503 7361 	add.w	r3, r3, #900	; 0x384
   832da:	429a      	cmp	r2, r3
   832dc:	d314      	bcc.n	83308 <update_heartbeat+0x84>
            ticks_heartbeat = getTicks();
   832de:	4b0c      	ldr	r3, [pc, #48]	; (83310 <update_heartbeat+0x8c>)
   832e0:	4798      	blx	r3
   832e2:	4602      	mov	r2, r0
   832e4:	4b0b      	ldr	r3, [pc, #44]	; (83314 <update_heartbeat+0x90>)
   832e6:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 1);
   832e8:	2101      	movs	r1, #1
   832ea:	206a      	movs	r0, #106	; 0x6a
   832ec:	4b0a      	ldr	r3, [pc, #40]	; (83318 <update_heartbeat+0x94>)
   832ee:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 1);
   832f0:	2101      	movs	r1, #1
   832f2:	2067      	movs	r0, #103	; 0x67
   832f4:	4b08      	ldr	r3, [pc, #32]	; (83318 <update_heartbeat+0x94>)
   832f6:	4798      	blx	r3
            mts.ibit.heartbeat = 1;
   832f8:	4a08      	ldr	r2, [pc, #32]	; (8331c <update_heartbeat+0x98>)
   832fa:	7813      	ldrb	r3, [r2, #0]
   832fc:	f043 0301 	orr.w	r3, r3, #1
   83300:	7013      	strb	r3, [r2, #0]
            heart_state = 1;
   83302:	4b02      	ldr	r3, [pc, #8]	; (8330c <update_heartbeat+0x88>)
   83304:	2201      	movs	r2, #1
   83306:	701a      	strb	r2, [r3, #0]
}
   83308:	bf00      	nop
   8330a:	bd80      	pop	{r7, pc}
   8330c:	20070e30 	.word	0x20070e30
   83310:	0008314d 	.word	0x0008314d
   83314:	20070e40 	.word	0x20070e40
   83318:	000830c5 	.word	0x000830c5
   8331c:	20070e18 	.word	0x20070e18

00083320 <osc_enable>:
{
   83320:	b580      	push	{r7, lr}
   83322:	b082      	sub	sp, #8
   83324:	af00      	add	r7, sp, #0
   83326:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83328:	687b      	ldr	r3, [r7, #4]
   8332a:	2b07      	cmp	r3, #7
   8332c:	d831      	bhi.n	83392 <osc_enable+0x72>
   8332e:	a201      	add	r2, pc, #4	; (adr r2, 83334 <osc_enable+0x14>)
   83330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83334:	00083391 	.word	0x00083391
   83338:	00083355 	.word	0x00083355
   8333c:	0008335d 	.word	0x0008335d
   83340:	00083365 	.word	0x00083365
   83344:	0008336d 	.word	0x0008336d
   83348:	00083375 	.word	0x00083375
   8334c:	0008337d 	.word	0x0008337d
   83350:	00083387 	.word	0x00083387
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83354:	2000      	movs	r0, #0
   83356:	4b11      	ldr	r3, [pc, #68]	; (8339c <osc_enable+0x7c>)
   83358:	4798      	blx	r3
		break;
   8335a:	e01a      	b.n	83392 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8335c:	2001      	movs	r0, #1
   8335e:	4b0f      	ldr	r3, [pc, #60]	; (8339c <osc_enable+0x7c>)
   83360:	4798      	blx	r3
		break;
   83362:	e016      	b.n	83392 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83364:	2000      	movs	r0, #0
   83366:	4b0e      	ldr	r3, [pc, #56]	; (833a0 <osc_enable+0x80>)
   83368:	4798      	blx	r3
		break;
   8336a:	e012      	b.n	83392 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8336c:	2010      	movs	r0, #16
   8336e:	4b0c      	ldr	r3, [pc, #48]	; (833a0 <osc_enable+0x80>)
   83370:	4798      	blx	r3
		break;
   83372:	e00e      	b.n	83392 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83374:	2020      	movs	r0, #32
   83376:	4b0a      	ldr	r3, [pc, #40]	; (833a0 <osc_enable+0x80>)
   83378:	4798      	blx	r3
		break;
   8337a:	e00a      	b.n	83392 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8337c:	213e      	movs	r1, #62	; 0x3e
   8337e:	2000      	movs	r0, #0
   83380:	4b08      	ldr	r3, [pc, #32]	; (833a4 <osc_enable+0x84>)
   83382:	4798      	blx	r3
		break;
   83384:	e005      	b.n	83392 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   83386:	213e      	movs	r1, #62	; 0x3e
   83388:	2001      	movs	r0, #1
   8338a:	4b06      	ldr	r3, [pc, #24]	; (833a4 <osc_enable+0x84>)
   8338c:	4798      	blx	r3
		break;
   8338e:	e000      	b.n	83392 <osc_enable+0x72>
		break;
   83390:	bf00      	nop
}
   83392:	bf00      	nop
   83394:	3708      	adds	r7, #8
   83396:	46bd      	mov	sp, r7
   83398:	bd80      	pop	{r7, pc}
   8339a:	bf00      	nop
   8339c:	0008395d 	.word	0x0008395d
   833a0:	000839c9 	.word	0x000839c9
   833a4:	00083a39 	.word	0x00083a39

000833a8 <osc_is_ready>:
{
   833a8:	b580      	push	{r7, lr}
   833aa:	b082      	sub	sp, #8
   833ac:	af00      	add	r7, sp, #0
   833ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   833b0:	687b      	ldr	r3, [r7, #4]
   833b2:	2b07      	cmp	r3, #7
   833b4:	d826      	bhi.n	83404 <osc_is_ready+0x5c>
   833b6:	a201      	add	r2, pc, #4	; (adr r2, 833bc <osc_is_ready+0x14>)
   833b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   833bc:	000833dd 	.word	0x000833dd
   833c0:	000833e1 	.word	0x000833e1
   833c4:	000833e1 	.word	0x000833e1
   833c8:	000833f3 	.word	0x000833f3
   833cc:	000833f3 	.word	0x000833f3
   833d0:	000833f3 	.word	0x000833f3
   833d4:	000833f3 	.word	0x000833f3
   833d8:	000833f3 	.word	0x000833f3
		return 1;
   833dc:	2301      	movs	r3, #1
   833de:	e012      	b.n	83406 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   833e0:	4b0b      	ldr	r3, [pc, #44]	; (83410 <osc_is_ready+0x68>)
   833e2:	4798      	blx	r3
   833e4:	4603      	mov	r3, r0
   833e6:	2b00      	cmp	r3, #0
   833e8:	bf14      	ite	ne
   833ea:	2301      	movne	r3, #1
   833ec:	2300      	moveq	r3, #0
   833ee:	b2db      	uxtb	r3, r3
   833f0:	e009      	b.n	83406 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   833f2:	4b08      	ldr	r3, [pc, #32]	; (83414 <osc_is_ready+0x6c>)
   833f4:	4798      	blx	r3
   833f6:	4603      	mov	r3, r0
   833f8:	2b00      	cmp	r3, #0
   833fa:	bf14      	ite	ne
   833fc:	2301      	movne	r3, #1
   833fe:	2300      	moveq	r3, #0
   83400:	b2db      	uxtb	r3, r3
   83402:	e000      	b.n	83406 <osc_is_ready+0x5e>
	return 0;
   83404:	2300      	movs	r3, #0
}
   83406:	4618      	mov	r0, r3
   83408:	3708      	adds	r7, #8
   8340a:	46bd      	mov	sp, r7
   8340c:	bd80      	pop	{r7, pc}
   8340e:	bf00      	nop
   83410:	00083995 	.word	0x00083995
   83414:	00083ab1 	.word	0x00083ab1

00083418 <osc_get_rate>:
{
   83418:	b480      	push	{r7}
   8341a:	b083      	sub	sp, #12
   8341c:	af00      	add	r7, sp, #0
   8341e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83420:	687b      	ldr	r3, [r7, #4]
   83422:	2b07      	cmp	r3, #7
   83424:	d825      	bhi.n	83472 <osc_get_rate+0x5a>
   83426:	a201      	add	r2, pc, #4	; (adr r2, 8342c <osc_get_rate+0x14>)
   83428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8342c:	0008344d 	.word	0x0008344d
   83430:	00083453 	.word	0x00083453
   83434:	00083459 	.word	0x00083459
   83438:	0008345f 	.word	0x0008345f
   8343c:	00083463 	.word	0x00083463
   83440:	00083467 	.word	0x00083467
   83444:	0008346b 	.word	0x0008346b
   83448:	0008346f 	.word	0x0008346f
		return OSC_SLCK_32K_RC_HZ;
   8344c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83450:	e010      	b.n	83474 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   83452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83456:	e00d      	b.n	83474 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   83458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8345c:	e00a      	b.n	83474 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   8345e:	4b08      	ldr	r3, [pc, #32]	; (83480 <osc_get_rate+0x68>)
   83460:	e008      	b.n	83474 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   83462:	4b08      	ldr	r3, [pc, #32]	; (83484 <osc_get_rate+0x6c>)
   83464:	e006      	b.n	83474 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   83466:	4b08      	ldr	r3, [pc, #32]	; (83488 <osc_get_rate+0x70>)
   83468:	e004      	b.n	83474 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8346a:	4b07      	ldr	r3, [pc, #28]	; (83488 <osc_get_rate+0x70>)
   8346c:	e002      	b.n	83474 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   8346e:	4b06      	ldr	r3, [pc, #24]	; (83488 <osc_get_rate+0x70>)
   83470:	e000      	b.n	83474 <osc_get_rate+0x5c>
	return 0;
   83472:	2300      	movs	r3, #0
}
   83474:	4618      	mov	r0, r3
   83476:	370c      	adds	r7, #12
   83478:	46bd      	mov	sp, r7
   8347a:	bc80      	pop	{r7}
   8347c:	4770      	bx	lr
   8347e:	bf00      	nop
   83480:	003d0900 	.word	0x003d0900
   83484:	007a1200 	.word	0x007a1200
   83488:	00b71b00 	.word	0x00b71b00

0008348c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   8348c:	b580      	push	{r7, lr}
   8348e:	b082      	sub	sp, #8
   83490:	af00      	add	r7, sp, #0
   83492:	4603      	mov	r3, r0
   83494:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   83496:	bf00      	nop
   83498:	79fb      	ldrb	r3, [r7, #7]
   8349a:	4618      	mov	r0, r3
   8349c:	4b05      	ldr	r3, [pc, #20]	; (834b4 <osc_wait_ready+0x28>)
   8349e:	4798      	blx	r3
   834a0:	4603      	mov	r3, r0
   834a2:	f083 0301 	eor.w	r3, r3, #1
   834a6:	b2db      	uxtb	r3, r3
   834a8:	2b00      	cmp	r3, #0
   834aa:	d1f5      	bne.n	83498 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   834ac:	bf00      	nop
   834ae:	3708      	adds	r7, #8
   834b0:	46bd      	mov	sp, r7
   834b2:	bd80      	pop	{r7, pc}
   834b4:	000833a9 	.word	0x000833a9

000834b8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   834b8:	b580      	push	{r7, lr}
   834ba:	b086      	sub	sp, #24
   834bc:	af00      	add	r7, sp, #0
   834be:	60f8      	str	r0, [r7, #12]
   834c0:	607a      	str	r2, [r7, #4]
   834c2:	603b      	str	r3, [r7, #0]
   834c4:	460b      	mov	r3, r1
   834c6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   834c8:	687b      	ldr	r3, [r7, #4]
   834ca:	2b00      	cmp	r3, #0
   834cc:	d107      	bne.n	834de <pll_config_init+0x26>
   834ce:	683b      	ldr	r3, [r7, #0]
   834d0:	2b00      	cmp	r3, #0
   834d2:	d104      	bne.n	834de <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   834d4:	68fb      	ldr	r3, [r7, #12]
   834d6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   834da:	601a      	str	r2, [r3, #0]
   834dc:	e019      	b.n	83512 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   834de:	7afb      	ldrb	r3, [r7, #11]
   834e0:	4618      	mov	r0, r3
   834e2:	4b0e      	ldr	r3, [pc, #56]	; (8351c <pll_config_init+0x64>)
   834e4:	4798      	blx	r3
   834e6:	4602      	mov	r2, r0
   834e8:	687b      	ldr	r3, [r7, #4]
   834ea:	fbb2 f3f3 	udiv	r3, r2, r3
   834ee:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   834f0:	697b      	ldr	r3, [r7, #20]
   834f2:	683a      	ldr	r2, [r7, #0]
   834f4:	fb02 f303 	mul.w	r3, r2, r3
   834f8:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   834fa:	683b      	ldr	r3, [r7, #0]
   834fc:	3b01      	subs	r3, #1
   834fe:	041a      	lsls	r2, r3, #16
   83500:	4b07      	ldr	r3, [pc, #28]	; (83520 <pll_config_init+0x68>)
   83502:	4013      	ands	r3, r2
   83504:	687a      	ldr	r2, [r7, #4]
   83506:	b2d2      	uxtb	r2, r2
   83508:	4313      	orrs	r3, r2
   8350a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8350e:	68fb      	ldr	r3, [r7, #12]
   83510:	601a      	str	r2, [r3, #0]
	}
}
   83512:	bf00      	nop
   83514:	3718      	adds	r7, #24
   83516:	46bd      	mov	sp, r7
   83518:	bd80      	pop	{r7, pc}
   8351a:	bf00      	nop
   8351c:	00083419 	.word	0x00083419
   83520:	07ff0000 	.word	0x07ff0000

00083524 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   83524:	b580      	push	{r7, lr}
   83526:	b082      	sub	sp, #8
   83528:	af00      	add	r7, sp, #0
   8352a:	6078      	str	r0, [r7, #4]
   8352c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8352e:	683b      	ldr	r3, [r7, #0]
   83530:	2b00      	cmp	r3, #0
   83532:	d108      	bne.n	83546 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83534:	4b09      	ldr	r3, [pc, #36]	; (8355c <pll_enable+0x38>)
   83536:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83538:	4a09      	ldr	r2, [pc, #36]	; (83560 <pll_enable+0x3c>)
   8353a:	687b      	ldr	r3, [r7, #4]
   8353c:	681b      	ldr	r3, [r3, #0]
   8353e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83542:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   83544:	e005      	b.n	83552 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   83546:	4a06      	ldr	r2, [pc, #24]	; (83560 <pll_enable+0x3c>)
   83548:	687b      	ldr	r3, [r7, #4]
   8354a:	681b      	ldr	r3, [r3, #0]
   8354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83550:	61d3      	str	r3, [r2, #28]
}
   83552:	bf00      	nop
   83554:	3708      	adds	r7, #8
   83556:	46bd      	mov	sp, r7
   83558:	bd80      	pop	{r7, pc}
   8355a:	bf00      	nop
   8355c:	00083ac9 	.word	0x00083ac9
   83560:	400e0600 	.word	0x400e0600

00083564 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   83564:	b580      	push	{r7, lr}
   83566:	b082      	sub	sp, #8
   83568:	af00      	add	r7, sp, #0
   8356a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8356c:	687b      	ldr	r3, [r7, #4]
   8356e:	2b00      	cmp	r3, #0
   83570:	d103      	bne.n	8357a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   83572:	4b05      	ldr	r3, [pc, #20]	; (83588 <pll_is_locked+0x24>)
   83574:	4798      	blx	r3
   83576:	4603      	mov	r3, r0
   83578:	e002      	b.n	83580 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8357a:	4b04      	ldr	r3, [pc, #16]	; (8358c <pll_is_locked+0x28>)
   8357c:	4798      	blx	r3
   8357e:	4603      	mov	r3, r0
	}
}
   83580:	4618      	mov	r0, r3
   83582:	3708      	adds	r7, #8
   83584:	46bd      	mov	sp, r7
   83586:	bd80      	pop	{r7, pc}
   83588:	00083ae1 	.word	0x00083ae1
   8358c:	00083af9 	.word	0x00083af9

00083590 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   83590:	b580      	push	{r7, lr}
   83592:	b082      	sub	sp, #8
   83594:	af00      	add	r7, sp, #0
   83596:	4603      	mov	r3, r0
   83598:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8359a:	79fb      	ldrb	r3, [r7, #7]
   8359c:	3b03      	subs	r3, #3
   8359e:	2b04      	cmp	r3, #4
   835a0:	d808      	bhi.n	835b4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   835a2:	79fb      	ldrb	r3, [r7, #7]
   835a4:	4618      	mov	r0, r3
   835a6:	4b06      	ldr	r3, [pc, #24]	; (835c0 <pll_enable_source+0x30>)
   835a8:	4798      	blx	r3
		osc_wait_ready(e_src);
   835aa:	79fb      	ldrb	r3, [r7, #7]
   835ac:	4618      	mov	r0, r3
   835ae:	4b05      	ldr	r3, [pc, #20]	; (835c4 <pll_enable_source+0x34>)
   835b0:	4798      	blx	r3
		break;
   835b2:	e000      	b.n	835b6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   835b4:	bf00      	nop
	}
}
   835b6:	bf00      	nop
   835b8:	3708      	adds	r7, #8
   835ba:	46bd      	mov	sp, r7
   835bc:	bd80      	pop	{r7, pc}
   835be:	bf00      	nop
   835c0:	00083321 	.word	0x00083321
   835c4:	0008348d 	.word	0x0008348d

000835c8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   835c8:	b580      	push	{r7, lr}
   835ca:	b082      	sub	sp, #8
   835cc:	af00      	add	r7, sp, #0
   835ce:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   835d0:	bf00      	nop
   835d2:	6878      	ldr	r0, [r7, #4]
   835d4:	4b04      	ldr	r3, [pc, #16]	; (835e8 <pll_wait_for_lock+0x20>)
   835d6:	4798      	blx	r3
   835d8:	4603      	mov	r3, r0
   835da:	2b00      	cmp	r3, #0
   835dc:	d0f9      	beq.n	835d2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   835de:	2300      	movs	r3, #0
}
   835e0:	4618      	mov	r0, r3
   835e2:	3708      	adds	r7, #8
   835e4:	46bd      	mov	sp, r7
   835e6:	bd80      	pop	{r7, pc}
   835e8:	00083565 	.word	0x00083565

000835ec <sysclk_get_main_hz>:
{
   835ec:	b580      	push	{r7, lr}
   835ee:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   835f0:	2006      	movs	r0, #6
   835f2:	4b04      	ldr	r3, [pc, #16]	; (83604 <sysclk_get_main_hz+0x18>)
   835f4:	4798      	blx	r3
   835f6:	4602      	mov	r2, r0
   835f8:	4613      	mov	r3, r2
   835fa:	00db      	lsls	r3, r3, #3
   835fc:	1a9b      	subs	r3, r3, r2
   835fe:	005b      	lsls	r3, r3, #1
}
   83600:	4618      	mov	r0, r3
   83602:	bd80      	pop	{r7, pc}
   83604:	00083419 	.word	0x00083419

00083608 <sysclk_get_cpu_hz>:
{
   83608:	b580      	push	{r7, lr}
   8360a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   8360c:	4b02      	ldr	r3, [pc, #8]	; (83618 <sysclk_get_cpu_hz+0x10>)
   8360e:	4798      	blx	r3
   83610:	4603      	mov	r3, r0
   83612:	085b      	lsrs	r3, r3, #1
}
   83614:	4618      	mov	r0, r3
   83616:	bd80      	pop	{r7, pc}
   83618:	000835ed 	.word	0x000835ed

0008361c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8361c:	b590      	push	{r4, r7, lr}
   8361e:	b083      	sub	sp, #12
   83620:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83622:	4811      	ldr	r0, [pc, #68]	; (83668 <sysclk_init+0x4c>)
   83624:	4b11      	ldr	r3, [pc, #68]	; (8366c <sysclk_init+0x50>)
   83626:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83628:	2006      	movs	r0, #6
   8362a:	4b11      	ldr	r3, [pc, #68]	; (83670 <sysclk_init+0x54>)
   8362c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   8362e:	1d38      	adds	r0, r7, #4
   83630:	230e      	movs	r3, #14
   83632:	2201      	movs	r2, #1
   83634:	2106      	movs	r1, #6
   83636:	4c0f      	ldr	r4, [pc, #60]	; (83674 <sysclk_init+0x58>)
   83638:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8363a:	1d3b      	adds	r3, r7, #4
   8363c:	2100      	movs	r1, #0
   8363e:	4618      	mov	r0, r3
   83640:	4b0d      	ldr	r3, [pc, #52]	; (83678 <sysclk_init+0x5c>)
   83642:	4798      	blx	r3
		pll_wait_for_lock(0);
   83644:	2000      	movs	r0, #0
   83646:	4b0d      	ldr	r3, [pc, #52]	; (8367c <sysclk_init+0x60>)
   83648:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8364a:	2010      	movs	r0, #16
   8364c:	4b0c      	ldr	r3, [pc, #48]	; (83680 <sysclk_init+0x64>)
   8364e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83650:	4b0c      	ldr	r3, [pc, #48]	; (83684 <sysclk_init+0x68>)
   83652:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83654:	4b0c      	ldr	r3, [pc, #48]	; (83688 <sysclk_init+0x6c>)
   83656:	4798      	blx	r3
   83658:	4603      	mov	r3, r0
   8365a:	4618      	mov	r0, r3
   8365c:	4b03      	ldr	r3, [pc, #12]	; (8366c <sysclk_init+0x50>)
   8365e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83660:	bf00      	nop
   83662:	370c      	adds	r7, #12
   83664:	46bd      	mov	sp, r7
   83666:	bd90      	pop	{r4, r7, pc}
   83668:	0501bd00 	.word	0x0501bd00
   8366c:	200700d1 	.word	0x200700d1
   83670:	00083591 	.word	0x00083591
   83674:	000834b9 	.word	0x000834b9
   83678:	00083525 	.word	0x00083525
   8367c:	000835c9 	.word	0x000835c9
   83680:	000838dd 	.word	0x000838dd
   83684:	0008426d 	.word	0x0008426d
   83688:	00083609 	.word	0x00083609

0008368c <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   8368c:	b580      	push	{r7, lr}
   8368e:	b082      	sub	sp, #8
   83690:	af00      	add	r7, sp, #0
   83692:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   83694:	6878      	ldr	r0, [r7, #4]
   83696:	4b03      	ldr	r3, [pc, #12]	; (836a4 <dmac_init+0x18>)
   83698:	4798      	blx	r3
}
   8369a:	bf00      	nop
   8369c:	3708      	adds	r7, #8
   8369e:	46bd      	mov	sp, r7
   836a0:	bd80      	pop	{r7, pc}
   836a2:	bf00      	nop
   836a4:	000836e7 	.word	0x000836e7

000836a8 <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   836a8:	b480      	push	{r7}
   836aa:	b083      	sub	sp, #12
   836ac:	af00      	add	r7, sp, #0
   836ae:	6078      	str	r0, [r7, #4]
   836b0:	460b      	mov	r3, r1
   836b2:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   836b4:	687b      	ldr	r3, [r7, #4]
   836b6:	681b      	ldr	r3, [r3, #0]
   836b8:	f023 0210 	bic.w	r2, r3, #16
   836bc:	78fb      	ldrb	r3, [r7, #3]
   836be:	431a      	orrs	r2, r3
   836c0:	687b      	ldr	r3, [r7, #4]
   836c2:	601a      	str	r2, [r3, #0]
}
   836c4:	bf00      	nop
   836c6:	370c      	adds	r7, #12
   836c8:	46bd      	mov	sp, r7
   836ca:	bc80      	pop	{r7}
   836cc:	4770      	bx	lr

000836ce <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   836ce:	b480      	push	{r7}
   836d0:	b083      	sub	sp, #12
   836d2:	af00      	add	r7, sp, #0
   836d4:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   836d6:	687b      	ldr	r3, [r7, #4]
   836d8:	2201      	movs	r2, #1
   836da:	605a      	str	r2, [r3, #4]
}
   836dc:	bf00      	nop
   836de:	370c      	adds	r7, #12
   836e0:	46bd      	mov	sp, r7
   836e2:	bc80      	pop	{r7}
   836e4:	4770      	bx	lr

000836e6 <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   836e6:	b480      	push	{r7}
   836e8:	b083      	sub	sp, #12
   836ea:	af00      	add	r7, sp, #0
   836ec:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   836ee:	687b      	ldr	r3, [r7, #4]
   836f0:	685b      	ldr	r3, [r3, #4]
   836f2:	f023 0201 	bic.w	r2, r3, #1
   836f6:	687b      	ldr	r3, [r7, #4]
   836f8:	605a      	str	r2, [r3, #4]
}
   836fa:	bf00      	nop
   836fc:	370c      	adds	r7, #12
   836fe:	46bd      	mov	sp, r7
   83700:	bc80      	pop	{r7}
   83702:	4770      	bx	lr

00083704 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   83704:	b480      	push	{r7}
   83706:	b083      	sub	sp, #12
   83708:	af00      	add	r7, sp, #0
   8370a:	6078      	str	r0, [r7, #4]
   8370c:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   8370e:	687b      	ldr	r3, [r7, #4]
   83710:	683a      	ldr	r2, [r7, #0]
   83712:	619a      	str	r2, [r3, #24]
}
   83714:	bf00      	nop
   83716:	370c      	adds	r7, #12
   83718:	46bd      	mov	sp, r7
   8371a:	bc80      	pop	{r7}
   8371c:	4770      	bx	lr

0008371e <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   8371e:	b480      	push	{r7}
   83720:	b083      	sub	sp, #12
   83722:	af00      	add	r7, sp, #0
   83724:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   83726:	687b      	ldr	r3, [r7, #4]
   83728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   8372a:	4618      	mov	r0, r3
   8372c:	370c      	adds	r7, #12
   8372e:	46bd      	mov	sp, r7
   83730:	bc80      	pop	{r7}
   83732:	4770      	bx	lr

00083734 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   83734:	b480      	push	{r7}
   83736:	b083      	sub	sp, #12
   83738:	af00      	add	r7, sp, #0
   8373a:	6078      	str	r0, [r7, #4]
   8373c:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   8373e:	2201      	movs	r2, #1
   83740:	683b      	ldr	r3, [r7, #0]
   83742:	409a      	lsls	r2, r3
   83744:	687b      	ldr	r3, [r7, #4]
   83746:	629a      	str	r2, [r3, #40]	; 0x28
}
   83748:	bf00      	nop
   8374a:	370c      	adds	r7, #12
   8374c:	46bd      	mov	sp, r7
   8374e:	bc80      	pop	{r7}
   83750:	4770      	bx	lr

00083752 <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   83752:	b480      	push	{r7}
   83754:	b083      	sub	sp, #12
   83756:	af00      	add	r7, sp, #0
   83758:	6078      	str	r0, [r7, #4]
   8375a:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   8375c:	2201      	movs	r2, #1
   8375e:	683b      	ldr	r3, [r7, #0]
   83760:	409a      	lsls	r2, r3
   83762:	687b      	ldr	r3, [r7, #4]
   83764:	62da      	str	r2, [r3, #44]	; 0x2c
}
   83766:	bf00      	nop
   83768:	370c      	adds	r7, #12
   8376a:	46bd      	mov	sp, r7
   8376c:	bc80      	pop	{r7}
   8376e:	4770      	bx	lr

00083770 <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   83770:	b480      	push	{r7}
   83772:	b085      	sub	sp, #20
   83774:	af00      	add	r7, sp, #0
   83776:	60f8      	str	r0, [r7, #12]
   83778:	60b9      	str	r1, [r7, #8]
   8377a:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   8377c:	68f9      	ldr	r1, [r7, #12]
   8377e:	68ba      	ldr	r2, [r7, #8]
   83780:	4613      	mov	r3, r2
   83782:	009b      	lsls	r3, r3, #2
   83784:	4413      	add	r3, r2
   83786:	00db      	lsls	r3, r3, #3
   83788:	440b      	add	r3, r1
   8378a:	333c      	adds	r3, #60	; 0x3c
   8378c:	687a      	ldr	r2, [r7, #4]
   8378e:	601a      	str	r2, [r3, #0]
}
   83790:	bf00      	nop
   83792:	3714      	adds	r7, #20
   83794:	46bd      	mov	sp, r7
   83796:	bc80      	pop	{r7}
   83798:	4770      	bx	lr

0008379a <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   8379a:	b480      	push	{r7}
   8379c:	b085      	sub	sp, #20
   8379e:	af00      	add	r7, sp, #0
   837a0:	60f8      	str	r0, [r7, #12]
   837a2:	60b9      	str	r1, [r7, #8]
   837a4:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   837a6:	68f9      	ldr	r1, [r7, #12]
   837a8:	68ba      	ldr	r2, [r7, #8]
   837aa:	4613      	mov	r3, r2
   837ac:	009b      	lsls	r3, r3, #2
   837ae:	4413      	add	r3, r2
   837b0:	00db      	lsls	r3, r3, #3
   837b2:	440b      	add	r3, r1
   837b4:	3340      	adds	r3, #64	; 0x40
   837b6:	687a      	ldr	r2, [r7, #4]
   837b8:	601a      	str	r2, [r3, #0]
}
   837ba:	bf00      	nop
   837bc:	3714      	adds	r7, #20
   837be:	46bd      	mov	sp, r7
   837c0:	bc80      	pop	{r7}
   837c2:	4770      	bx	lr

000837c4 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   837c4:	b480      	push	{r7}
   837c6:	b085      	sub	sp, #20
   837c8:	af00      	add	r7, sp, #0
   837ca:	60f8      	str	r0, [r7, #12]
   837cc:	60b9      	str	r1, [r7, #8]
   837ce:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   837d0:	68f9      	ldr	r1, [r7, #12]
   837d2:	68ba      	ldr	r2, [r7, #8]
   837d4:	4613      	mov	r3, r2
   837d6:	009b      	lsls	r3, r3, #2
   837d8:	4413      	add	r3, r2
   837da:	00db      	lsls	r3, r3, #3
   837dc:	440b      	add	r3, r1
   837de:	3344      	adds	r3, #68	; 0x44
   837e0:	687a      	ldr	r2, [r7, #4]
   837e2:	601a      	str	r2, [r3, #0]
}
   837e4:	bf00      	nop
   837e6:	3714      	adds	r7, #20
   837e8:	46bd      	mov	sp, r7
   837ea:	bc80      	pop	{r7}
   837ec:	4770      	bx	lr

000837ee <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   837ee:	b480      	push	{r7}
   837f0:	b085      	sub	sp, #20
   837f2:	af00      	add	r7, sp, #0
   837f4:	60f8      	str	r0, [r7, #12]
   837f6:	60b9      	str	r1, [r7, #8]
   837f8:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   837fa:	68f9      	ldr	r1, [r7, #12]
   837fc:	68ba      	ldr	r2, [r7, #8]
   837fe:	4613      	mov	r3, r2
   83800:	009b      	lsls	r3, r3, #2
   83802:	4413      	add	r3, r2
   83804:	00db      	lsls	r3, r3, #3
   83806:	440b      	add	r3, r1
   83808:	3348      	adds	r3, #72	; 0x48
   8380a:	687a      	ldr	r2, [r7, #4]
   8380c:	601a      	str	r2, [r3, #0]
}
   8380e:	bf00      	nop
   83810:	3714      	adds	r7, #20
   83812:	46bd      	mov	sp, r7
   83814:	bc80      	pop	{r7}
   83816:	4770      	bx	lr

00083818 <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   83818:	b480      	push	{r7}
   8381a:	b085      	sub	sp, #20
   8381c:	af00      	add	r7, sp, #0
   8381e:	60f8      	str	r0, [r7, #12]
   83820:	60b9      	str	r1, [r7, #8]
   83822:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   83824:	68f9      	ldr	r1, [r7, #12]
   83826:	68ba      	ldr	r2, [r7, #8]
   83828:	4613      	mov	r3, r2
   8382a:	009b      	lsls	r3, r3, #2
   8382c:	4413      	add	r3, r2
   8382e:	00db      	lsls	r3, r3, #3
   83830:	440b      	add	r3, r1
   83832:	334c      	adds	r3, #76	; 0x4c
   83834:	687a      	ldr	r2, [r7, #4]
   83836:	601a      	str	r2, [r3, #0]
}
   83838:	bf00      	nop
   8383a:	3714      	adds	r7, #20
   8383c:	46bd      	mov	sp, r7
   8383e:	bc80      	pop	{r7}
   83840:	4770      	bx	lr

00083842 <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   83842:	b480      	push	{r7}
   83844:	b085      	sub	sp, #20
   83846:	af00      	add	r7, sp, #0
   83848:	60f8      	str	r0, [r7, #12]
   8384a:	60b9      	str	r1, [r7, #8]
   8384c:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   8384e:	68f9      	ldr	r1, [r7, #12]
   83850:	68ba      	ldr	r2, [r7, #8]
   83852:	4613      	mov	r3, r2
   83854:	009b      	lsls	r3, r3, #2
   83856:	4413      	add	r3, r2
   83858:	00db      	lsls	r3, r3, #3
   8385a:	440b      	add	r3, r1
   8385c:	3350      	adds	r3, #80	; 0x50
   8385e:	687a      	ldr	r2, [r7, #4]
   83860:	601a      	str	r2, [r3, #0]
}
   83862:	bf00      	nop
   83864:	3714      	adds	r7, #20
   83866:	46bd      	mov	sp, r7
   83868:	bc80      	pop	{r7}
   8386a:	4770      	bx	lr

0008386c <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   8386c:	b580      	push	{r7, lr}
   8386e:	b084      	sub	sp, #16
   83870:	af00      	add	r7, sp, #0
   83872:	60f8      	str	r0, [r7, #12]
   83874:	60b9      	str	r1, [r7, #8]
   83876:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   83878:	68fb      	ldr	r3, [r7, #12]
   8387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   8387c:	687b      	ldr	r3, [r7, #4]
   8387e:	681b      	ldr	r3, [r3, #0]
   83880:	461a      	mov	r2, r3
   83882:	68b9      	ldr	r1, [r7, #8]
   83884:	68f8      	ldr	r0, [r7, #12]
   83886:	4b10      	ldr	r3, [pc, #64]	; (838c8 <dmac_channel_single_buf_transfer_init+0x5c>)
   83888:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   8388a:	687b      	ldr	r3, [r7, #4]
   8388c:	685b      	ldr	r3, [r3, #4]
   8388e:	461a      	mov	r2, r3
   83890:	68b9      	ldr	r1, [r7, #8]
   83892:	68f8      	ldr	r0, [r7, #12]
   83894:	4b0d      	ldr	r3, [pc, #52]	; (838cc <dmac_channel_single_buf_transfer_init+0x60>)
   83896:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   83898:	2200      	movs	r2, #0
   8389a:	68b9      	ldr	r1, [r7, #8]
   8389c:	68f8      	ldr	r0, [r7, #12]
   8389e:	4b0c      	ldr	r3, [pc, #48]	; (838d0 <dmac_channel_single_buf_transfer_init+0x64>)
   838a0:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   838a2:	687b      	ldr	r3, [r7, #4]
   838a4:	689b      	ldr	r3, [r3, #8]
   838a6:	461a      	mov	r2, r3
   838a8:	68b9      	ldr	r1, [r7, #8]
   838aa:	68f8      	ldr	r0, [r7, #12]
   838ac:	4b09      	ldr	r3, [pc, #36]	; (838d4 <dmac_channel_single_buf_transfer_init+0x68>)
   838ae:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   838b0:	687b      	ldr	r3, [r7, #4]
   838b2:	68db      	ldr	r3, [r3, #12]
   838b4:	461a      	mov	r2, r3
   838b6:	68b9      	ldr	r1, [r7, #8]
   838b8:	68f8      	ldr	r0, [r7, #12]
   838ba:	4b07      	ldr	r3, [pc, #28]	; (838d8 <dmac_channel_single_buf_transfer_init+0x6c>)
   838bc:	4798      	blx	r3
}
   838be:	bf00      	nop
   838c0:	3710      	adds	r7, #16
   838c2:	46bd      	mov	sp, r7
   838c4:	bd80      	pop	{r7, pc}
   838c6:	bf00      	nop
   838c8:	00083771 	.word	0x00083771
   838cc:	0008379b 	.word	0x0008379b
   838d0:	000837c5 	.word	0x000837c5
   838d4:	000837ef 	.word	0x000837ef
   838d8:	00083819 	.word	0x00083819

000838dc <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   838dc:	b480      	push	{r7}
   838de:	b085      	sub	sp, #20
   838e0:	af00      	add	r7, sp, #0
   838e2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   838e4:	491c      	ldr	r1, [pc, #112]	; (83958 <pmc_switch_mck_to_pllack+0x7c>)
   838e6:	4b1c      	ldr	r3, [pc, #112]	; (83958 <pmc_switch_mck_to_pllack+0x7c>)
   838e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   838ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   838ee:	687b      	ldr	r3, [r7, #4]
   838f0:	4313      	orrs	r3, r2
   838f2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   838f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   838f8:	60fb      	str	r3, [r7, #12]
   838fa:	e007      	b.n	8390c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   838fc:	68fb      	ldr	r3, [r7, #12]
   838fe:	2b00      	cmp	r3, #0
   83900:	d101      	bne.n	83906 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83902:	2301      	movs	r3, #1
   83904:	e023      	b.n	8394e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83906:	68fb      	ldr	r3, [r7, #12]
   83908:	3b01      	subs	r3, #1
   8390a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8390c:	4b12      	ldr	r3, [pc, #72]	; (83958 <pmc_switch_mck_to_pllack+0x7c>)
   8390e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83910:	f003 0308 	and.w	r3, r3, #8
   83914:	2b00      	cmp	r3, #0
   83916:	d0f1      	beq.n	838fc <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83918:	4a0f      	ldr	r2, [pc, #60]	; (83958 <pmc_switch_mck_to_pllack+0x7c>)
   8391a:	4b0f      	ldr	r3, [pc, #60]	; (83958 <pmc_switch_mck_to_pllack+0x7c>)
   8391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8391e:	f023 0303 	bic.w	r3, r3, #3
   83922:	f043 0302 	orr.w	r3, r3, #2
   83926:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83928:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8392c:	60fb      	str	r3, [r7, #12]
   8392e:	e007      	b.n	83940 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83930:	68fb      	ldr	r3, [r7, #12]
   83932:	2b00      	cmp	r3, #0
   83934:	d101      	bne.n	8393a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   83936:	2301      	movs	r3, #1
   83938:	e009      	b.n	8394e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8393a:	68fb      	ldr	r3, [r7, #12]
   8393c:	3b01      	subs	r3, #1
   8393e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83940:	4b05      	ldr	r3, [pc, #20]	; (83958 <pmc_switch_mck_to_pllack+0x7c>)
   83942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83944:	f003 0308 	and.w	r3, r3, #8
   83948:	2b00      	cmp	r3, #0
   8394a:	d0f1      	beq.n	83930 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   8394c:	2300      	movs	r3, #0
}
   8394e:	4618      	mov	r0, r3
   83950:	3714      	adds	r7, #20
   83952:	46bd      	mov	sp, r7
   83954:	bc80      	pop	{r7}
   83956:	4770      	bx	lr
   83958:	400e0600 	.word	0x400e0600

0008395c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   8395c:	b480      	push	{r7}
   8395e:	b083      	sub	sp, #12
   83960:	af00      	add	r7, sp, #0
   83962:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83964:	687b      	ldr	r3, [r7, #4]
   83966:	2b01      	cmp	r3, #1
   83968:	d107      	bne.n	8397a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   8396a:	4a08      	ldr	r2, [pc, #32]	; (8398c <pmc_switch_sclk_to_32kxtal+0x30>)
   8396c:	4b07      	ldr	r3, [pc, #28]	; (8398c <pmc_switch_sclk_to_32kxtal+0x30>)
   8396e:	689b      	ldr	r3, [r3, #8]
   83970:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83978:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   8397a:	4b04      	ldr	r3, [pc, #16]	; (8398c <pmc_switch_sclk_to_32kxtal+0x30>)
   8397c:	4a04      	ldr	r2, [pc, #16]	; (83990 <pmc_switch_sclk_to_32kxtal+0x34>)
   8397e:	601a      	str	r2, [r3, #0]
}
   83980:	bf00      	nop
   83982:	370c      	adds	r7, #12
   83984:	46bd      	mov	sp, r7
   83986:	bc80      	pop	{r7}
   83988:	4770      	bx	lr
   8398a:	bf00      	nop
   8398c:	400e1a10 	.word	0x400e1a10
   83990:	a5000008 	.word	0xa5000008

00083994 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83994:	b480      	push	{r7}
   83996:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83998:	4b09      	ldr	r3, [pc, #36]	; (839c0 <pmc_osc_is_ready_32kxtal+0x2c>)
   8399a:	695b      	ldr	r3, [r3, #20]
   8399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   839a0:	2b00      	cmp	r3, #0
   839a2:	d007      	beq.n	839b4 <pmc_osc_is_ready_32kxtal+0x20>
   839a4:	4b07      	ldr	r3, [pc, #28]	; (839c4 <pmc_osc_is_ready_32kxtal+0x30>)
   839a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   839a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   839ac:	2b00      	cmp	r3, #0
   839ae:	d001      	beq.n	839b4 <pmc_osc_is_ready_32kxtal+0x20>
   839b0:	2301      	movs	r3, #1
   839b2:	e000      	b.n	839b6 <pmc_osc_is_ready_32kxtal+0x22>
   839b4:	2300      	movs	r3, #0
}
   839b6:	4618      	mov	r0, r3
   839b8:	46bd      	mov	sp, r7
   839ba:	bc80      	pop	{r7}
   839bc:	4770      	bx	lr
   839be:	bf00      	nop
   839c0:	400e1a10 	.word	0x400e1a10
   839c4:	400e0600 	.word	0x400e0600

000839c8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   839c8:	b480      	push	{r7}
   839ca:	b083      	sub	sp, #12
   839cc:	af00      	add	r7, sp, #0
   839ce:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   839d0:	4a18      	ldr	r2, [pc, #96]	; (83a34 <pmc_switch_mainck_to_fastrc+0x6c>)
   839d2:	4b18      	ldr	r3, [pc, #96]	; (83a34 <pmc_switch_mainck_to_fastrc+0x6c>)
   839d4:	6a1b      	ldr	r3, [r3, #32]
   839d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   839da:	f043 0308 	orr.w	r3, r3, #8
   839de:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   839e0:	bf00      	nop
   839e2:	4b14      	ldr	r3, [pc, #80]	; (83a34 <pmc_switch_mainck_to_fastrc+0x6c>)
   839e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   839e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   839ea:	2b00      	cmp	r3, #0
   839ec:	d0f9      	beq.n	839e2 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   839ee:	4911      	ldr	r1, [pc, #68]	; (83a34 <pmc_switch_mainck_to_fastrc+0x6c>)
   839f0:	4b10      	ldr	r3, [pc, #64]	; (83a34 <pmc_switch_mainck_to_fastrc+0x6c>)
   839f2:	6a1b      	ldr	r3, [r3, #32]
   839f4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   839f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   839fc:	687a      	ldr	r2, [r7, #4]
   839fe:	4313      	orrs	r3, r2
   83a00:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83a04:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83a06:	bf00      	nop
   83a08:	4b0a      	ldr	r3, [pc, #40]	; (83a34 <pmc_switch_mainck_to_fastrc+0x6c>)
   83a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83a10:	2b00      	cmp	r3, #0
   83a12:	d0f9      	beq.n	83a08 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   83a14:	4a07      	ldr	r2, [pc, #28]	; (83a34 <pmc_switch_mainck_to_fastrc+0x6c>)
   83a16:	4b07      	ldr	r3, [pc, #28]	; (83a34 <pmc_switch_mainck_to_fastrc+0x6c>)
   83a18:	6a1b      	ldr	r3, [r3, #32]
   83a1a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   83a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83a22:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83a26:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   83a28:	bf00      	nop
   83a2a:	370c      	adds	r7, #12
   83a2c:	46bd      	mov	sp, r7
   83a2e:	bc80      	pop	{r7}
   83a30:	4770      	bx	lr
   83a32:	bf00      	nop
   83a34:	400e0600 	.word	0x400e0600

00083a38 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   83a38:	b480      	push	{r7}
   83a3a:	b083      	sub	sp, #12
   83a3c:	af00      	add	r7, sp, #0
   83a3e:	6078      	str	r0, [r7, #4]
   83a40:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83a42:	687b      	ldr	r3, [r7, #4]
   83a44:	2b00      	cmp	r3, #0
   83a46:	d008      	beq.n	83a5a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83a48:	4916      	ldr	r1, [pc, #88]	; (83aa4 <pmc_switch_mainck_to_xtal+0x6c>)
   83a4a:	4b16      	ldr	r3, [pc, #88]	; (83aa4 <pmc_switch_mainck_to_xtal+0x6c>)
   83a4c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83a4e:	4a16      	ldr	r2, [pc, #88]	; (83aa8 <pmc_switch_mainck_to_xtal+0x70>)
   83a50:	401a      	ands	r2, r3
   83a52:	4b16      	ldr	r3, [pc, #88]	; (83aac <pmc_switch_mainck_to_xtal+0x74>)
   83a54:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83a56:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   83a58:	e01e      	b.n	83a98 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83a5a:	4912      	ldr	r1, [pc, #72]	; (83aa4 <pmc_switch_mainck_to_xtal+0x6c>)
   83a5c:	4b11      	ldr	r3, [pc, #68]	; (83aa4 <pmc_switch_mainck_to_xtal+0x6c>)
   83a5e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83a60:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83a64:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83a68:	683a      	ldr	r2, [r7, #0]
   83a6a:	0212      	lsls	r2, r2, #8
   83a6c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83a6e:	4313      	orrs	r3, r2
   83a70:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83a74:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83a78:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83a7a:	bf00      	nop
   83a7c:	4b09      	ldr	r3, [pc, #36]	; (83aa4 <pmc_switch_mainck_to_xtal+0x6c>)
   83a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83a80:	f003 0301 	and.w	r3, r3, #1
   83a84:	2b00      	cmp	r3, #0
   83a86:	d0f9      	beq.n	83a7c <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83a88:	4a06      	ldr	r2, [pc, #24]	; (83aa4 <pmc_switch_mainck_to_xtal+0x6c>)
   83a8a:	4b06      	ldr	r3, [pc, #24]	; (83aa4 <pmc_switch_mainck_to_xtal+0x6c>)
   83a8c:	6a1b      	ldr	r3, [r3, #32]
   83a8e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83a96:	6213      	str	r3, [r2, #32]
}
   83a98:	bf00      	nop
   83a9a:	370c      	adds	r7, #12
   83a9c:	46bd      	mov	sp, r7
   83a9e:	bc80      	pop	{r7}
   83aa0:	4770      	bx	lr
   83aa2:	bf00      	nop
   83aa4:	400e0600 	.word	0x400e0600
   83aa8:	fec8fffc 	.word	0xfec8fffc
   83aac:	01370002 	.word	0x01370002

00083ab0 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83ab0:	b480      	push	{r7}
   83ab2:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83ab4:	4b03      	ldr	r3, [pc, #12]	; (83ac4 <pmc_osc_is_ready_mainck+0x14>)
   83ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83abc:	4618      	mov	r0, r3
   83abe:	46bd      	mov	sp, r7
   83ac0:	bc80      	pop	{r7}
   83ac2:	4770      	bx	lr
   83ac4:	400e0600 	.word	0x400e0600

00083ac8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83ac8:	b480      	push	{r7}
   83aca:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83acc:	4b03      	ldr	r3, [pc, #12]	; (83adc <pmc_disable_pllack+0x14>)
   83ace:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83ad2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83ad4:	bf00      	nop
   83ad6:	46bd      	mov	sp, r7
   83ad8:	bc80      	pop	{r7}
   83ada:	4770      	bx	lr
   83adc:	400e0600 	.word	0x400e0600

00083ae0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83ae0:	b480      	push	{r7}
   83ae2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83ae4:	4b03      	ldr	r3, [pc, #12]	; (83af4 <pmc_is_locked_pllack+0x14>)
   83ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83ae8:	f003 0302 	and.w	r3, r3, #2
}
   83aec:	4618      	mov	r0, r3
   83aee:	46bd      	mov	sp, r7
   83af0:	bc80      	pop	{r7}
   83af2:	4770      	bx	lr
   83af4:	400e0600 	.word	0x400e0600

00083af8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83af8:	b480      	push	{r7}
   83afa:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83afc:	4b03      	ldr	r3, [pc, #12]	; (83b0c <pmc_is_locked_upll+0x14>)
   83afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83b04:	4618      	mov	r0, r3
   83b06:	46bd      	mov	sp, r7
   83b08:	bc80      	pop	{r7}
   83b0a:	4770      	bx	lr
   83b0c:	400e0600 	.word	0x400e0600

00083b10 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83b10:	b480      	push	{r7}
   83b12:	b083      	sub	sp, #12
   83b14:	af00      	add	r7, sp, #0
   83b16:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83b18:	687b      	ldr	r3, [r7, #4]
   83b1a:	2b2c      	cmp	r3, #44	; 0x2c
   83b1c:	d901      	bls.n	83b22 <pmc_enable_periph_clk+0x12>
		return 1;
   83b1e:	2301      	movs	r3, #1
   83b20:	e02f      	b.n	83b82 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   83b22:	687b      	ldr	r3, [r7, #4]
   83b24:	2b1f      	cmp	r3, #31
   83b26:	d813      	bhi.n	83b50 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83b28:	4b18      	ldr	r3, [pc, #96]	; (83b8c <pmc_enable_periph_clk+0x7c>)
   83b2a:	699a      	ldr	r2, [r3, #24]
   83b2c:	2101      	movs	r1, #1
   83b2e:	687b      	ldr	r3, [r7, #4]
   83b30:	fa01 f303 	lsl.w	r3, r1, r3
   83b34:	401a      	ands	r2, r3
   83b36:	2101      	movs	r1, #1
   83b38:	687b      	ldr	r3, [r7, #4]
   83b3a:	fa01 f303 	lsl.w	r3, r1, r3
   83b3e:	429a      	cmp	r2, r3
   83b40:	d01e      	beq.n	83b80 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   83b42:	4a12      	ldr	r2, [pc, #72]	; (83b8c <pmc_enable_periph_clk+0x7c>)
   83b44:	2101      	movs	r1, #1
   83b46:	687b      	ldr	r3, [r7, #4]
   83b48:	fa01 f303 	lsl.w	r3, r1, r3
   83b4c:	6113      	str	r3, [r2, #16]
   83b4e:	e017      	b.n	83b80 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   83b50:	687b      	ldr	r3, [r7, #4]
   83b52:	3b20      	subs	r3, #32
   83b54:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83b56:	4b0d      	ldr	r3, [pc, #52]	; (83b8c <pmc_enable_periph_clk+0x7c>)
   83b58:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83b5c:	2101      	movs	r1, #1
   83b5e:	687b      	ldr	r3, [r7, #4]
   83b60:	fa01 f303 	lsl.w	r3, r1, r3
   83b64:	401a      	ands	r2, r3
   83b66:	2101      	movs	r1, #1
   83b68:	687b      	ldr	r3, [r7, #4]
   83b6a:	fa01 f303 	lsl.w	r3, r1, r3
   83b6e:	429a      	cmp	r2, r3
   83b70:	d006      	beq.n	83b80 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   83b72:	4a06      	ldr	r2, [pc, #24]	; (83b8c <pmc_enable_periph_clk+0x7c>)
   83b74:	2101      	movs	r1, #1
   83b76:	687b      	ldr	r3, [r7, #4]
   83b78:	fa01 f303 	lsl.w	r3, r1, r3
   83b7c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   83b80:	2300      	movs	r3, #0
}
   83b82:	4618      	mov	r0, r3
   83b84:	370c      	adds	r7, #12
   83b86:	46bd      	mov	sp, r7
   83b88:	bc80      	pop	{r7}
   83b8a:	4770      	bx	lr
   83b8c:	400e0600 	.word	0x400e0600

00083b90 <osc_get_rate>:
{
   83b90:	b480      	push	{r7}
   83b92:	b083      	sub	sp, #12
   83b94:	af00      	add	r7, sp, #0
   83b96:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83b98:	687b      	ldr	r3, [r7, #4]
   83b9a:	2b07      	cmp	r3, #7
   83b9c:	d825      	bhi.n	83bea <osc_get_rate+0x5a>
   83b9e:	a201      	add	r2, pc, #4	; (adr r2, 83ba4 <osc_get_rate+0x14>)
   83ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83ba4:	00083bc5 	.word	0x00083bc5
   83ba8:	00083bcb 	.word	0x00083bcb
   83bac:	00083bd1 	.word	0x00083bd1
   83bb0:	00083bd7 	.word	0x00083bd7
   83bb4:	00083bdb 	.word	0x00083bdb
   83bb8:	00083bdf 	.word	0x00083bdf
   83bbc:	00083be3 	.word	0x00083be3
   83bc0:	00083be7 	.word	0x00083be7
		return OSC_SLCK_32K_RC_HZ;
   83bc4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83bc8:	e010      	b.n	83bec <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   83bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83bce:	e00d      	b.n	83bec <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   83bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83bd4:	e00a      	b.n	83bec <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   83bd6:	4b08      	ldr	r3, [pc, #32]	; (83bf8 <osc_get_rate+0x68>)
   83bd8:	e008      	b.n	83bec <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   83bda:	4b08      	ldr	r3, [pc, #32]	; (83bfc <osc_get_rate+0x6c>)
   83bdc:	e006      	b.n	83bec <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   83bde:	4b08      	ldr	r3, [pc, #32]	; (83c00 <osc_get_rate+0x70>)
   83be0:	e004      	b.n	83bec <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   83be2:	4b07      	ldr	r3, [pc, #28]	; (83c00 <osc_get_rate+0x70>)
   83be4:	e002      	b.n	83bec <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   83be6:	4b06      	ldr	r3, [pc, #24]	; (83c00 <osc_get_rate+0x70>)
   83be8:	e000      	b.n	83bec <osc_get_rate+0x5c>
	return 0;
   83bea:	2300      	movs	r3, #0
}
   83bec:	4618      	mov	r0, r3
   83bee:	370c      	adds	r7, #12
   83bf0:	46bd      	mov	sp, r7
   83bf2:	bc80      	pop	{r7}
   83bf4:	4770      	bx	lr
   83bf6:	bf00      	nop
   83bf8:	003d0900 	.word	0x003d0900
   83bfc:	007a1200 	.word	0x007a1200
   83c00:	00b71b00 	.word	0x00b71b00

00083c04 <sysclk_get_main_hz>:
{
   83c04:	b580      	push	{r7, lr}
   83c06:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83c08:	2006      	movs	r0, #6
   83c0a:	4b04      	ldr	r3, [pc, #16]	; (83c1c <sysclk_get_main_hz+0x18>)
   83c0c:	4798      	blx	r3
   83c0e:	4602      	mov	r2, r0
   83c10:	4613      	mov	r3, r2
   83c12:	00db      	lsls	r3, r3, #3
   83c14:	1a9b      	subs	r3, r3, r2
   83c16:	005b      	lsls	r3, r3, #1
}
   83c18:	4618      	mov	r0, r3
   83c1a:	bd80      	pop	{r7, pc}
   83c1c:	00083b91 	.word	0x00083b91

00083c20 <sysclk_get_cpu_hz>:
{
   83c20:	b580      	push	{r7, lr}
   83c22:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83c24:	4b02      	ldr	r3, [pc, #8]	; (83c30 <sysclk_get_cpu_hz+0x10>)
   83c26:	4798      	blx	r3
   83c28:	4603      	mov	r3, r0
   83c2a:	085b      	lsrs	r3, r3, #1
}
   83c2c:	4618      	mov	r0, r3
   83c2e:	bd80      	pop	{r7, pc}
   83c30:	00083c05 	.word	0x00083c05

00083c34 <sysclk_enable_peripheral_clock>:
{
   83c34:	b580      	push	{r7, lr}
   83c36:	b082      	sub	sp, #8
   83c38:	af00      	add	r7, sp, #0
   83c3a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   83c3c:	6878      	ldr	r0, [r7, #4]
   83c3e:	4b03      	ldr	r3, [pc, #12]	; (83c4c <sysclk_enable_peripheral_clock+0x18>)
   83c40:	4798      	blx	r3
}
   83c42:	bf00      	nop
   83c44:	3708      	adds	r7, #8
   83c46:	46bd      	mov	sp, r7
   83c48:	bd80      	pop	{r7, pc}
   83c4a:	bf00      	nop
   83c4c:	00083b11 	.word	0x00083b11

00083c50 <ioport_init>:
{
   83c50:	b580      	push	{r7, lr}
   83c52:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   83c54:	200b      	movs	r0, #11
   83c56:	4b06      	ldr	r3, [pc, #24]	; (83c70 <ioport_init+0x20>)
   83c58:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   83c5a:	200c      	movs	r0, #12
   83c5c:	4b04      	ldr	r3, [pc, #16]	; (83c70 <ioport_init+0x20>)
   83c5e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   83c60:	200d      	movs	r0, #13
   83c62:	4b03      	ldr	r3, [pc, #12]	; (83c70 <ioport_init+0x20>)
   83c64:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   83c66:	200e      	movs	r0, #14
   83c68:	4b01      	ldr	r3, [pc, #4]	; (83c70 <ioport_init+0x20>)
   83c6a:	4798      	blx	r3
}
   83c6c:	bf00      	nop
   83c6e:	bd80      	pop	{r7, pc}
   83c70:	00083c35 	.word	0x00083c35

00083c74 <ioport_disable_pin>:
{
   83c74:	b480      	push	{r7}
   83c76:	b089      	sub	sp, #36	; 0x24
   83c78:	af00      	add	r7, sp, #0
   83c7a:	6078      	str	r0, [r7, #4]
   83c7c:	687b      	ldr	r3, [r7, #4]
   83c7e:	61fb      	str	r3, [r7, #28]
   83c80:	69fb      	ldr	r3, [r7, #28]
   83c82:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83c84:	69bb      	ldr	r3, [r7, #24]
   83c86:	095a      	lsrs	r2, r3, #5
   83c88:	69fb      	ldr	r3, [r7, #28]
   83c8a:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   83c8c:	697b      	ldr	r3, [r7, #20]
   83c8e:	f003 031f 	and.w	r3, r3, #31
   83c92:	2101      	movs	r1, #1
   83c94:	fa01 f303 	lsl.w	r3, r1, r3
   83c98:	613a      	str	r2, [r7, #16]
   83c9a:	60fb      	str	r3, [r7, #12]
   83c9c:	693b      	ldr	r3, [r7, #16]
   83c9e:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83ca0:	68bb      	ldr	r3, [r7, #8]
   83ca2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83ca6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83caa:	025b      	lsls	r3, r3, #9
   83cac:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   83cae:	68fb      	ldr	r3, [r7, #12]
   83cb0:	6053      	str	r3, [r2, #4]
}
   83cb2:	bf00      	nop
   83cb4:	3724      	adds	r7, #36	; 0x24
   83cb6:	46bd      	mov	sp, r7
   83cb8:	bc80      	pop	{r7}
   83cba:	4770      	bx	lr

00083cbc <ioport_set_pin_mode>:
{
   83cbc:	b480      	push	{r7}
   83cbe:	b08d      	sub	sp, #52	; 0x34
   83cc0:	af00      	add	r7, sp, #0
   83cc2:	6078      	str	r0, [r7, #4]
   83cc4:	6039      	str	r1, [r7, #0]
   83cc6:	687b      	ldr	r3, [r7, #4]
   83cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   83cca:	683b      	ldr	r3, [r7, #0]
   83ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   83cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83cd0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   83cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83cd4:	095a      	lsrs	r2, r3, #5
   83cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83cd8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   83cda:	6a3b      	ldr	r3, [r7, #32]
   83cdc:	f003 031f 	and.w	r3, r3, #31
   83ce0:	2101      	movs	r1, #1
   83ce2:	fa01 f303 	lsl.w	r3, r1, r3
   83ce6:	61fa      	str	r2, [r7, #28]
   83ce8:	61bb      	str	r3, [r7, #24]
   83cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   83cec:	617b      	str	r3, [r7, #20]
   83cee:	69fb      	ldr	r3, [r7, #28]
   83cf0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83cf2:	693b      	ldr	r3, [r7, #16]
   83cf4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83cf8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83cfc:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   83cfe:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   83d00:	697b      	ldr	r3, [r7, #20]
   83d02:	f003 0308 	and.w	r3, r3, #8
   83d06:	2b00      	cmp	r3, #0
   83d08:	d003      	beq.n	83d12 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   83d0a:	68fb      	ldr	r3, [r7, #12]
   83d0c:	69ba      	ldr	r2, [r7, #24]
   83d0e:	665a      	str	r2, [r3, #100]	; 0x64
   83d10:	e002      	b.n	83d18 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   83d12:	68fb      	ldr	r3, [r7, #12]
   83d14:	69ba      	ldr	r2, [r7, #24]
   83d16:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   83d18:	697b      	ldr	r3, [r7, #20]
   83d1a:	f003 0320 	and.w	r3, r3, #32
   83d1e:	2b00      	cmp	r3, #0
   83d20:	d003      	beq.n	83d2a <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   83d22:	68fb      	ldr	r3, [r7, #12]
   83d24:	69ba      	ldr	r2, [r7, #24]
   83d26:	651a      	str	r2, [r3, #80]	; 0x50
   83d28:	e002      	b.n	83d30 <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   83d2a:	68fb      	ldr	r3, [r7, #12]
   83d2c:	69ba      	ldr	r2, [r7, #24]
   83d2e:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   83d30:	697b      	ldr	r3, [r7, #20]
   83d32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   83d36:	2b00      	cmp	r3, #0
   83d38:	d003      	beq.n	83d42 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   83d3a:	68fb      	ldr	r3, [r7, #12]
   83d3c:	69ba      	ldr	r2, [r7, #24]
   83d3e:	621a      	str	r2, [r3, #32]
   83d40:	e002      	b.n	83d48 <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   83d42:	68fb      	ldr	r3, [r7, #12]
   83d44:	69ba      	ldr	r2, [r7, #24]
   83d46:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   83d48:	697b      	ldr	r3, [r7, #20]
   83d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83d4e:	2b00      	cmp	r3, #0
   83d50:	d004      	beq.n	83d5c <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   83d52:	68fb      	ldr	r3, [r7, #12]
   83d54:	69ba      	ldr	r2, [r7, #24]
   83d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   83d5a:	e003      	b.n	83d64 <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   83d5c:	68fb      	ldr	r3, [r7, #12]
   83d5e:	69ba      	ldr	r2, [r7, #24]
   83d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   83d64:	697b      	ldr	r3, [r7, #20]
   83d66:	f003 0301 	and.w	r3, r3, #1
   83d6a:	2b00      	cmp	r3, #0
   83d6c:	d006      	beq.n	83d7c <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   83d6e:	68fb      	ldr	r3, [r7, #12]
   83d70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83d72:	69bb      	ldr	r3, [r7, #24]
   83d74:	431a      	orrs	r2, r3
   83d76:	68fb      	ldr	r3, [r7, #12]
   83d78:	671a      	str	r2, [r3, #112]	; 0x70
}
   83d7a:	e006      	b.n	83d8a <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   83d7c:	68fb      	ldr	r3, [r7, #12]
   83d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83d80:	69bb      	ldr	r3, [r7, #24]
   83d82:	43db      	mvns	r3, r3
   83d84:	401a      	ands	r2, r3
   83d86:	68fb      	ldr	r3, [r7, #12]
   83d88:	671a      	str	r2, [r3, #112]	; 0x70
   83d8a:	bf00      	nop
   83d8c:	3734      	adds	r7, #52	; 0x34
   83d8e:	46bd      	mov	sp, r7
   83d90:	bc80      	pop	{r7}
   83d92:	4770      	bx	lr

00083d94 <ioport_set_pin_dir>:
{
   83d94:	b480      	push	{r7}
   83d96:	b08d      	sub	sp, #52	; 0x34
   83d98:	af00      	add	r7, sp, #0
   83d9a:	6078      	str	r0, [r7, #4]
   83d9c:	460b      	mov	r3, r1
   83d9e:	70fb      	strb	r3, [r7, #3]
   83da0:	687b      	ldr	r3, [r7, #4]
   83da2:	62fb      	str	r3, [r7, #44]	; 0x2c
   83da4:	78fb      	ldrb	r3, [r7, #3]
   83da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   83daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83dac:	627b      	str	r3, [r7, #36]	; 0x24
   83dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83db0:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   83db2:	6a3b      	ldr	r3, [r7, #32]
   83db4:	095b      	lsrs	r3, r3, #5
   83db6:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83db8:	69fb      	ldr	r3, [r7, #28]
   83dba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83dbe:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83dc2:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83dc4:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   83dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83dca:	2b01      	cmp	r3, #1
   83dcc:	d109      	bne.n	83de2 <ioport_set_pin_dir+0x4e>
   83dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83dd0:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   83dd2:	697b      	ldr	r3, [r7, #20]
   83dd4:	f003 031f 	and.w	r3, r3, #31
   83dd8:	2201      	movs	r2, #1
   83dda:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83ddc:	69bb      	ldr	r3, [r7, #24]
   83dde:	611a      	str	r2, [r3, #16]
   83de0:	e00c      	b.n	83dfc <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   83de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83de6:	2b00      	cmp	r3, #0
   83de8:	d108      	bne.n	83dfc <ioport_set_pin_dir+0x68>
   83dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83dec:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   83dee:	693b      	ldr	r3, [r7, #16]
   83df0:	f003 031f 	and.w	r3, r3, #31
   83df4:	2201      	movs	r2, #1
   83df6:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   83df8:	69bb      	ldr	r3, [r7, #24]
   83dfa:	615a      	str	r2, [r3, #20]
   83dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83dfe:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83e00:	68fb      	ldr	r3, [r7, #12]
   83e02:	f003 031f 	and.w	r3, r3, #31
   83e06:	2201      	movs	r2, #1
   83e08:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83e0a:	69bb      	ldr	r3, [r7, #24]
   83e0c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   83e10:	bf00      	nop
   83e12:	3734      	adds	r7, #52	; 0x34
   83e14:	46bd      	mov	sp, r7
   83e16:	bc80      	pop	{r7}
   83e18:	4770      	bx	lr

00083e1a <ioport_set_pin_level>:
{
   83e1a:	b480      	push	{r7}
   83e1c:	b08b      	sub	sp, #44	; 0x2c
   83e1e:	af00      	add	r7, sp, #0
   83e20:	6078      	str	r0, [r7, #4]
   83e22:	460b      	mov	r3, r1
   83e24:	70fb      	strb	r3, [r7, #3]
   83e26:	687b      	ldr	r3, [r7, #4]
   83e28:	627b      	str	r3, [r7, #36]	; 0x24
   83e2a:	78fb      	ldrb	r3, [r7, #3]
   83e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   83e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83e32:	61fb      	str	r3, [r7, #28]
   83e34:	69fb      	ldr	r3, [r7, #28]
   83e36:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83e38:	69bb      	ldr	r3, [r7, #24]
   83e3a:	095b      	lsrs	r3, r3, #5
   83e3c:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83e3e:	697b      	ldr	r3, [r7, #20]
   83e40:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83e44:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83e48:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83e4a:	613b      	str	r3, [r7, #16]
	if (level) {
   83e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83e50:	2b00      	cmp	r3, #0
   83e52:	d009      	beq.n	83e68 <ioport_set_pin_level+0x4e>
   83e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83e56:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83e58:	68fb      	ldr	r3, [r7, #12]
   83e5a:	f003 031f 	and.w	r3, r3, #31
   83e5e:	2201      	movs	r2, #1
   83e60:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   83e62:	693b      	ldr	r3, [r7, #16]
   83e64:	631a      	str	r2, [r3, #48]	; 0x30
}
   83e66:	e008      	b.n	83e7a <ioport_set_pin_level+0x60>
   83e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83e6a:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   83e6c:	68bb      	ldr	r3, [r7, #8]
   83e6e:	f003 031f 	and.w	r3, r3, #31
   83e72:	2201      	movs	r2, #1
   83e74:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83e76:	693b      	ldr	r3, [r7, #16]
   83e78:	635a      	str	r2, [r3, #52]	; 0x34
   83e7a:	bf00      	nop
   83e7c:	372c      	adds	r7, #44	; 0x2c
   83e7e:	46bd      	mov	sp, r7
   83e80:	bc80      	pop	{r7}
   83e82:	4770      	bx	lr

00083e84 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   83e84:	b580      	push	{r7, lr}
   83e86:	b084      	sub	sp, #16
   83e88:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83e8a:	4ba6      	ldr	r3, [pc, #664]	; (84124 <board_init+0x2a0>)
   83e8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83e90:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   83e92:	4ba5      	ldr	r3, [pc, #660]	; (84128 <board_init+0x2a4>)
   83e94:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   83e96:	2101      	movs	r1, #1
   83e98:	206a      	movs	r0, #106	; 0x6a
   83e9a:	4ba4      	ldr	r3, [pc, #656]	; (8412c <board_init+0x2a8>)
   83e9c:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   83e9e:	2100      	movs	r1, #0
   83ea0:	206a      	movs	r0, #106	; 0x6a
   83ea2:	4ba3      	ldr	r3, [pc, #652]	; (84130 <board_init+0x2ac>)
   83ea4:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   83ea6:	2101      	movs	r1, #1
   83ea8:	2067      	movs	r0, #103	; 0x67
   83eaa:	4ba0      	ldr	r3, [pc, #640]	; (8412c <board_init+0x2a8>)
   83eac:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   83eae:	2100      	movs	r1, #0
   83eb0:	2067      	movs	r0, #103	; 0x67
   83eb2:	4b9f      	ldr	r3, [pc, #636]	; (84130 <board_init+0x2ac>)
   83eb4:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   83eb6:	2101      	movs	r1, #1
   83eb8:	2068      	movs	r0, #104	; 0x68
   83eba:	4b9c      	ldr	r3, [pc, #624]	; (8412c <board_init+0x2a8>)
   83ebc:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   83ebe:	2100      	movs	r1, #0
   83ec0:	2068      	movs	r0, #104	; 0x68
   83ec2:	4b9b      	ldr	r3, [pc, #620]	; (84130 <board_init+0x2ac>)
   83ec4:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   83ec6:	2101      	movs	r1, #1
   83ec8:	2069      	movs	r0, #105	; 0x69
   83eca:	4b98      	ldr	r3, [pc, #608]	; (8412c <board_init+0x2a8>)
   83ecc:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   83ece:	2100      	movs	r1, #0
   83ed0:	2069      	movs	r0, #105	; 0x69
   83ed2:	4b97      	ldr	r3, [pc, #604]	; (84130 <board_init+0x2ac>)
   83ed4:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   83ed6:	2101      	movs	r1, #1
   83ed8:	2066      	movs	r0, #102	; 0x66
   83eda:	4b94      	ldr	r3, [pc, #592]	; (8412c <board_init+0x2a8>)
   83edc:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   83ede:	2100      	movs	r1, #0
   83ee0:	2066      	movs	r0, #102	; 0x66
   83ee2:	4b93      	ldr	r3, [pc, #588]	; (84130 <board_init+0x2ac>)
   83ee4:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   83ee6:	2100      	movs	r1, #0
   83ee8:	2060      	movs	r0, #96	; 0x60
   83eea:	4b90      	ldr	r3, [pc, #576]	; (8412c <board_init+0x2a8>)
   83eec:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83eee:	2188      	movs	r1, #136	; 0x88
   83ef0:	2060      	movs	r0, #96	; 0x60
   83ef2:	4b90      	ldr	r3, [pc, #576]	; (84134 <board_init+0x2b0>)
   83ef4:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   83ef6:	2100      	movs	r1, #0
   83ef8:	2061      	movs	r0, #97	; 0x61
   83efa:	4b8c      	ldr	r3, [pc, #560]	; (8412c <board_init+0x2a8>)
   83efc:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83efe:	2188      	movs	r1, #136	; 0x88
   83f00:	2061      	movs	r0, #97	; 0x61
   83f02:	4b8c      	ldr	r3, [pc, #560]	; (84134 <board_init+0x2b0>)
   83f04:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   83f06:	2100      	movs	r1, #0
   83f08:	2062      	movs	r0, #98	; 0x62
   83f0a:	4b88      	ldr	r3, [pc, #544]	; (8412c <board_init+0x2a8>)
   83f0c:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83f0e:	2188      	movs	r1, #136	; 0x88
   83f10:	2062      	movs	r0, #98	; 0x62
   83f12:	4b88      	ldr	r3, [pc, #544]	; (84134 <board_init+0x2b0>)
   83f14:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   83f16:	2100      	movs	r1, #0
   83f18:	2063      	movs	r0, #99	; 0x63
   83f1a:	4b84      	ldr	r3, [pc, #528]	; (8412c <board_init+0x2a8>)
   83f1c:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83f1e:	2188      	movs	r1, #136	; 0x88
   83f20:	2063      	movs	r0, #99	; 0x63
   83f22:	4b84      	ldr	r3, [pc, #528]	; (84134 <board_init+0x2b0>)
   83f24:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   83f26:	2100      	movs	r1, #0
   83f28:	2064      	movs	r0, #100	; 0x64
   83f2a:	4b80      	ldr	r3, [pc, #512]	; (8412c <board_init+0x2a8>)
   83f2c:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83f2e:	2188      	movs	r1, #136	; 0x88
   83f30:	2064      	movs	r0, #100	; 0x64
   83f32:	4b80      	ldr	r3, [pc, #512]	; (84134 <board_init+0x2b0>)
   83f34:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   83f36:	2100      	movs	r1, #0
   83f38:	2065      	movs	r0, #101	; 0x65
   83f3a:	4b7c      	ldr	r3, [pc, #496]	; (8412c <board_init+0x2a8>)
   83f3c:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83f3e:	2188      	movs	r1, #136	; 0x88
   83f40:	2065      	movs	r0, #101	; 0x65
   83f42:	4b7c      	ldr	r3, [pc, #496]	; (84134 <board_init+0x2b0>)
   83f44:	4798      	blx	r3
  
    /* Configure Motor pins */
    ioport_set_pin_mode(MOTOR_LEFT_L, IOPORT_MODE_MUX_B);
   83f46:	2101      	movs	r1, #1
   83f48:	2042      	movs	r0, #66	; 0x42
   83f4a:	4b7a      	ldr	r3, [pc, #488]	; (84134 <board_init+0x2b0>)
   83f4c:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_L);
   83f4e:	2042      	movs	r0, #66	; 0x42
   83f50:	4b79      	ldr	r3, [pc, #484]	; (84138 <board_init+0x2b4>)
   83f52:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_LEFT_H, IOPORT_MODE_MUX_B);
   83f54:	2101      	movs	r1, #1
   83f56:	2043      	movs	r0, #67	; 0x43
   83f58:	4b76      	ldr	r3, [pc, #472]	; (84134 <board_init+0x2b0>)
   83f5a:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_H);
   83f5c:	2043      	movs	r0, #67	; 0x43
   83f5e:	4b76      	ldr	r3, [pc, #472]	; (84138 <board_init+0x2b4>)
   83f60:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_L, IOPORT_MODE_MUX_B);
   83f62:	2101      	movs	r1, #1
   83f64:	2044      	movs	r0, #68	; 0x44
   83f66:	4b73      	ldr	r3, [pc, #460]	; (84134 <board_init+0x2b0>)
   83f68:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_L);
   83f6a:	2044      	movs	r0, #68	; 0x44
   83f6c:	4b72      	ldr	r3, [pc, #456]	; (84138 <board_init+0x2b4>)
   83f6e:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_H, IOPORT_MODE_MUX_B);
   83f70:	2101      	movs	r1, #1
   83f72:	2045      	movs	r0, #69	; 0x45
   83f74:	4b6f      	ldr	r3, [pc, #444]	; (84134 <board_init+0x2b0>)
   83f76:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_H);
   83f78:	2045      	movs	r0, #69	; 0x45
   83f7a:	4b6f      	ldr	r3, [pc, #444]	; (84138 <board_init+0x2b4>)
   83f7c:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_L, IOPORT_MODE_MUX_B);
   83f7e:	2101      	movs	r1, #1
   83f80:	2046      	movs	r0, #70	; 0x46
   83f82:	4b6c      	ldr	r3, [pc, #432]	; (84134 <board_init+0x2b0>)
   83f84:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_L);
   83f86:	2046      	movs	r0, #70	; 0x46
   83f88:	4b6b      	ldr	r3, [pc, #428]	; (84138 <board_init+0x2b4>)
   83f8a:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_H, IOPORT_MODE_MUX_B);
   83f8c:	2101      	movs	r1, #1
   83f8e:	2047      	movs	r0, #71	; 0x47
   83f90:	4b68      	ldr	r3, [pc, #416]	; (84134 <board_init+0x2b0>)
   83f92:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_H);
   83f94:	2047      	movs	r0, #71	; 0x47
   83f96:	4b68      	ldr	r3, [pc, #416]	; (84138 <board_init+0x2b4>)
   83f98:	4798      	blx	r3

    /* Configure Encoder pins */
    ioport_set_pin_mode(ENC_CLK_PIN, IOPORT_MODE_MUX_B);
   83f9a:	2101      	movs	r1, #1
   83f9c:	2055      	movs	r0, #85	; 0x55
   83f9e:	4b65      	ldr	r3, [pc, #404]	; (84134 <board_init+0x2b0>)
   83fa0:	4798      	blx	r3
    ioport_disable_pin(ENC_CLK_PIN);
   83fa2:	2055      	movs	r0, #85	; 0x55
   83fa4:	4b64      	ldr	r3, [pc, #400]	; (84138 <board_init+0x2b4>)
   83fa6:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LOAD, IOPORT_DIR_OUTPUT);
   83fa8:	2101      	movs	r1, #1
   83faa:	2020      	movs	r0, #32
   83fac:	4b5f      	ldr	r3, [pc, #380]	; (8412c <board_init+0x2a8>)
   83fae:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   83fb0:	2101      	movs	r1, #1
   83fb2:	2020      	movs	r0, #32
   83fb4:	4b5e      	ldr	r3, [pc, #376]	; (84130 <board_init+0x2ac>)
   83fb6:	4798      	blx	r3

    ioport_set_pin_dir(ENC_LEFT_A, IOPORT_DIR_INPUT);
   83fb8:	2100      	movs	r1, #0
   83fba:	2058      	movs	r0, #88	; 0x58
   83fbc:	4b5b      	ldr	r3, [pc, #364]	; (8412c <board_init+0x2a8>)
   83fbe:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_B, IOPORT_DIR_INPUT);
   83fc0:	2100      	movs	r1, #0
   83fc2:	2059      	movs	r0, #89	; 0x59
   83fc4:	4b59      	ldr	r3, [pc, #356]	; (8412c <board_init+0x2a8>)
   83fc6:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_C, IOPORT_DIR_INPUT);
   83fc8:	2100      	movs	r1, #0
   83fca:	205a      	movs	r0, #90	; 0x5a
   83fcc:	4b57      	ldr	r3, [pc, #348]	; (8412c <board_init+0x2a8>)
   83fce:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_D, IOPORT_DIR_INPUT);
   83fd0:	2100      	movs	r1, #0
   83fd2:	205b      	movs	r0, #91	; 0x5b
   83fd4:	4b55      	ldr	r3, [pc, #340]	; (8412c <board_init+0x2a8>)
   83fd6:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_E, IOPORT_DIR_INPUT);
   83fd8:	2100      	movs	r1, #0
   83fda:	205c      	movs	r0, #92	; 0x5c
   83fdc:	4b53      	ldr	r3, [pc, #332]	; (8412c <board_init+0x2a8>)
   83fde:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_F, IOPORT_DIR_INPUT);
   83fe0:	2100      	movs	r1, #0
   83fe2:	205d      	movs	r0, #93	; 0x5d
   83fe4:	4b51      	ldr	r3, [pc, #324]	; (8412c <board_init+0x2a8>)
   83fe6:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_G, IOPORT_DIR_INPUT);
   83fe8:	2100      	movs	r1, #0
   83fea:	205e      	movs	r0, #94	; 0x5e
   83fec:	4b4f      	ldr	r3, [pc, #316]	; (8412c <board_init+0x2a8>)
   83fee:	4798      	blx	r3
    
    ioport_set_pin_dir(ENC_RIGHT_A, IOPORT_DIR_INPUT);
   83ff0:	2100      	movs	r1, #0
   83ff2:	2050      	movs	r0, #80	; 0x50
   83ff4:	4b4d      	ldr	r3, [pc, #308]	; (8412c <board_init+0x2a8>)
   83ff6:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_B, IOPORT_DIR_INPUT);
   83ff8:	2100      	movs	r1, #0
   83ffa:	2051      	movs	r0, #81	; 0x51
   83ffc:	4b4b      	ldr	r3, [pc, #300]	; (8412c <board_init+0x2a8>)
   83ffe:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_C, IOPORT_DIR_INPUT);
   84000:	2100      	movs	r1, #0
   84002:	2052      	movs	r0, #82	; 0x52
   84004:	4b49      	ldr	r3, [pc, #292]	; (8412c <board_init+0x2a8>)
   84006:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_D, IOPORT_DIR_INPUT);
   84008:	2100      	movs	r1, #0
   8400a:	2053      	movs	r0, #83	; 0x53
   8400c:	4b47      	ldr	r3, [pc, #284]	; (8412c <board_init+0x2a8>)
   8400e:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_E, IOPORT_DIR_INPUT);
   84010:	2100      	movs	r1, #0
   84012:	2054      	movs	r0, #84	; 0x54
   84014:	4b45      	ldr	r3, [pc, #276]	; (8412c <board_init+0x2a8>)
   84016:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_F, IOPORT_DIR_INPUT);
   84018:	2100      	movs	r1, #0
   8401a:	2056      	movs	r0, #86	; 0x56
   8401c:	4b43      	ldr	r3, [pc, #268]	; (8412c <board_init+0x2a8>)
   8401e:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_G, IOPORT_DIR_INPUT);
   84020:	2100      	movs	r1, #0
   84022:	2057      	movs	r0, #87	; 0x57
   84024:	4b41      	ldr	r3, [pc, #260]	; (8412c <board_init+0x2a8>)
   84026:	4798      	blx	r3
    
    ioport_set_pin_dir(ENC_REAR_A, IOPORT_DIR_INPUT);
   84028:	2100      	movs	r1, #0
   8402a:	2041      	movs	r0, #65	; 0x41
   8402c:	4b3f      	ldr	r3, [pc, #252]	; (8412c <board_init+0x2a8>)
   8402e:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_B, IOPORT_DIR_INPUT);
   84030:	2100      	movs	r1, #0
   84032:	204a      	movs	r0, #74	; 0x4a
   84034:	4b3d      	ldr	r3, [pc, #244]	; (8412c <board_init+0x2a8>)
   84036:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_C, IOPORT_DIR_INPUT);
   84038:	2100      	movs	r1, #0
   8403a:	204b      	movs	r0, #75	; 0x4b
   8403c:	4b3b      	ldr	r3, [pc, #236]	; (8412c <board_init+0x2a8>)
   8403e:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_D, IOPORT_DIR_INPUT);
   84040:	2100      	movs	r1, #0
   84042:	204c      	movs	r0, #76	; 0x4c
   84044:	4b39      	ldr	r3, [pc, #228]	; (8412c <board_init+0x2a8>)
   84046:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_E, IOPORT_DIR_INPUT);
   84048:	2100      	movs	r1, #0
   8404a:	204d      	movs	r0, #77	; 0x4d
   8404c:	4b37      	ldr	r3, [pc, #220]	; (8412c <board_init+0x2a8>)
   8404e:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_F, IOPORT_DIR_INPUT);
   84050:	2100      	movs	r1, #0
   84052:	204e      	movs	r0, #78	; 0x4e
   84054:	4b35      	ldr	r3, [pc, #212]	; (8412c <board_init+0x2a8>)
   84056:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_G, IOPORT_DIR_INPUT);
   84058:	2100      	movs	r1, #0
   8405a:	204f      	movs	r0, #79	; 0x4f
   8405c:	4b33      	ldr	r3, [pc, #204]	; (8412c <board_init+0x2a8>)
   8405e:	4798      	blx	r3
  
    /* Configure Raspberry Pi GPIO pins */
    ioport_set_pin_dir(RPI1, IOPORT_DIR_OUTPUT);
   84060:	2101      	movs	r1, #1
   84062:	2001      	movs	r0, #1
   84064:	4b31      	ldr	r3, [pc, #196]	; (8412c <board_init+0x2a8>)
   84066:	4798      	blx	r3
    ioport_set_pin_level(RPI1, 1);
   84068:	2101      	movs	r1, #1
   8406a:	2001      	movs	r0, #1
   8406c:	4b30      	ldr	r3, [pc, #192]	; (84130 <board_init+0x2ac>)
   8406e:	4798      	blx	r3
    ioport_set_pin_dir(RPI2, IOPORT_DIR_INPUT);
   84070:	2100      	movs	r1, #0
   84072:	2008      	movs	r0, #8
   84074:	4b2d      	ldr	r3, [pc, #180]	; (8412c <board_init+0x2a8>)
   84076:	4798      	blx	r3
    ioport_set_pin_dir(RPI3, IOPORT_DIR_INPUT);
   84078:	2100      	movs	r1, #0
   8407a:	2009      	movs	r0, #9
   8407c:	4b2b      	ldr	r3, [pc, #172]	; (8412c <board_init+0x2a8>)
   8407e:	4798      	blx	r3
    ioport_set_pin_dir(RPI4, IOPORT_DIR_INPUT);
   84080:	2100      	movs	r1, #0
   84082:	2007      	movs	r0, #7
   84084:	4b29      	ldr	r3, [pc, #164]	; (8412c <board_init+0x2a8>)
   84086:	4798      	blx	r3
    ioport_set_pin_dir(RPI5, IOPORT_DIR_INPUT);
   84088:	2100      	movs	r1, #0
   8408a:	2005      	movs	r0, #5
   8408c:	4b27      	ldr	r3, [pc, #156]	; (8412c <board_init+0x2a8>)
   8408e:	4798      	blx	r3
    ioport_set_pin_dir(RPI6, IOPORT_DIR_INPUT);
   84090:	2100      	movs	r1, #0
   84092:	2000      	movs	r0, #0
   84094:	4b25      	ldr	r3, [pc, #148]	; (8412c <board_init+0x2a8>)
   84096:	4798      	blx	r3
  
    /* Configure I2C pins */
    ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   84098:	2100      	movs	r1, #0
   8409a:	2011      	movs	r0, #17
   8409c:	4b25      	ldr	r3, [pc, #148]	; (84134 <board_init+0x2b0>)
   8409e:	4798      	blx	r3
    ioport_disable_pin(I2C0_DATA);
   840a0:	2011      	movs	r0, #17
   840a2:	4b25      	ldr	r3, [pc, #148]	; (84138 <board_init+0x2b4>)
   840a4:	4798      	blx	r3
    ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   840a6:	2100      	movs	r1, #0
   840a8:	2012      	movs	r0, #18
   840aa:	4b22      	ldr	r3, [pc, #136]	; (84134 <board_init+0x2b0>)
   840ac:	4798      	blx	r3
    ioport_disable_pin(I2C0_CLK);
   840ae:	2012      	movs	r0, #18
   840b0:	4b21      	ldr	r3, [pc, #132]	; (84138 <board_init+0x2b4>)
   840b2:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   840b4:	2100      	movs	r1, #0
   840b6:	200c      	movs	r0, #12
   840b8:	4b1e      	ldr	r3, [pc, #120]	; (84134 <board_init+0x2b0>)
   840ba:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   840bc:	200c      	movs	r0, #12
   840be:	4b1e      	ldr	r3, [pc, #120]	; (84138 <board_init+0x2b4>)
   840c0:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   840c2:	2100      	movs	r1, #0
   840c4:	200d      	movs	r0, #13
   840c6:	4b1b      	ldr	r3, [pc, #108]	; (84134 <board_init+0x2b0>)
   840c8:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   840ca:	200d      	movs	r0, #13
   840cc:	4b1a      	ldr	r3, [pc, #104]	; (84138 <board_init+0x2b4>)
   840ce:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   840d0:	2100      	movs	r1, #0
   840d2:	2010      	movs	r0, #16
   840d4:	4b17      	ldr	r3, [pc, #92]	; (84134 <board_init+0x2b0>)
   840d6:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   840d8:	2010      	movs	r0, #16
   840da:	4b17      	ldr	r3, [pc, #92]	; (84138 <board_init+0x2b4>)
   840dc:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   840de:	2100      	movs	r1, #0
   840e0:	200e      	movs	r0, #14
   840e2:	4b14      	ldr	r3, [pc, #80]	; (84134 <board_init+0x2b0>)
   840e4:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   840e6:	200e      	movs	r0, #14
   840e8:	4b13      	ldr	r3, [pc, #76]	; (84138 <board_init+0x2b4>)
   840ea:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   840ec:	2100      	movs	r1, #0
   840ee:	2014      	movs	r0, #20
   840f0:	4b10      	ldr	r3, [pc, #64]	; (84134 <board_init+0x2b0>)
   840f2:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   840f4:	2014      	movs	r0, #20
   840f6:	4b10      	ldr	r3, [pc, #64]	; (84138 <board_init+0x2b4>)
   840f8:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   840fa:	2100      	movs	r1, #0
   840fc:	2013      	movs	r0, #19
   840fe:	4b0d      	ldr	r3, [pc, #52]	; (84134 <board_init+0x2b0>)
   84100:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   84102:	2013      	movs	r0, #19
   84104:	4b0c      	ldr	r3, [pc, #48]	; (84138 <board_init+0x2b4>)
   84106:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   84108:	2100      	movs	r1, #0
   8410a:	2015      	movs	r0, #21
   8410c:	4b09      	ldr	r3, [pc, #36]	; (84134 <board_init+0x2b0>)
   8410e:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   84110:	2015      	movs	r0, #21
   84112:	4b09      	ldr	r3, [pc, #36]	; (84138 <board_init+0x2b4>)
   84114:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   84116:	2100      	movs	r1, #0
   84118:	2016      	movs	r0, #22
   8411a:	4b06      	ldr	r3, [pc, #24]	; (84134 <board_init+0x2b0>)
   8411c:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   8411e:	2016      	movs	r0, #22
   84120:	e00c      	b.n	8413c <board_init+0x2b8>
   84122:	bf00      	nop
   84124:	400e1a50 	.word	0x400e1a50
   84128:	00083c51 	.word	0x00083c51
   8412c:	00083d95 	.word	0x00083d95
   84130:	00083e1b 	.word	0x00083e1b
   84134:	00083cbd 	.word	0x00083cbd
   84138:	00083c75 	.word	0x00083c75
   8413c:	4b17      	ldr	r3, [pc, #92]	; (8419c <board_init+0x318>)
   8413e:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   84140:	2100      	movs	r1, #0
   84142:	2017      	movs	r0, #23
   84144:	4b16      	ldr	r3, [pc, #88]	; (841a0 <board_init+0x31c>)
   84146:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   84148:	2017      	movs	r0, #23
   8414a:	4b14      	ldr	r3, [pc, #80]	; (8419c <board_init+0x318>)
   8414c:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   8414e:	2100      	movs	r1, #0
   84150:	2018      	movs	r0, #24
   84152:	4b13      	ldr	r3, [pc, #76]	; (841a0 <board_init+0x31c>)
   84154:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   84156:	2018      	movs	r0, #24
   84158:	4b10      	ldr	r3, [pc, #64]	; (8419c <board_init+0x318>)
   8415a:	4798      	blx	r3


    /* Init PWM */
    pmc_enable_periph_clk(ID_PWM);
   8415c:	2024      	movs	r0, #36	; 0x24
   8415e:	4b11      	ldr	r3, [pc, #68]	; (841a4 <board_init+0x320>)
   84160:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_LEFT);
   84162:	2100      	movs	r1, #0
   84164:	4810      	ldr	r0, [pc, #64]	; (841a8 <board_init+0x324>)
   84166:	4b11      	ldr	r3, [pc, #68]	; (841ac <board_init+0x328>)
   84168:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_RIGHT);
   8416a:	2101      	movs	r1, #1
   8416c:	480e      	ldr	r0, [pc, #56]	; (841a8 <board_init+0x324>)
   8416e:	4b0f      	ldr	r3, [pc, #60]	; (841ac <board_init+0x328>)
   84170:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_REAR);
   84172:	2102      	movs	r1, #2
   84174:	480c      	ldr	r0, [pc, #48]	; (841a8 <board_init+0x324>)
   84176:	4b0d      	ldr	r3, [pc, #52]	; (841ac <board_init+0x328>)
   84178:	4798      	blx	r3
    pwm_clock_t clock_setting =
   8417a:	4b0d      	ldr	r3, [pc, #52]	; (841b0 <board_init+0x32c>)
   8417c:	607b      	str	r3, [r7, #4]
   8417e:	2300      	movs	r3, #0
   84180:	60bb      	str	r3, [r7, #8]
    {
        .ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
        .ul_clkb = 0,
        .ul_mck = sysclk_get_cpu_hz()
   84182:	4b0c      	ldr	r3, [pc, #48]	; (841b4 <board_init+0x330>)
   84184:	4798      	blx	r3
   84186:	4603      	mov	r3, r0
    pwm_clock_t clock_setting =
   84188:	60fb      	str	r3, [r7, #12]
    };
    pwm_init(PWM, &clock_setting);
   8418a:	1d3b      	adds	r3, r7, #4
   8418c:	4619      	mov	r1, r3
   8418e:	4806      	ldr	r0, [pc, #24]	; (841a8 <board_init+0x324>)
   84190:	4b09      	ldr	r3, [pc, #36]	; (841b8 <board_init+0x334>)
   84192:	4798      	blx	r3
}
   84194:	bf00      	nop
   84196:	3710      	adds	r7, #16
   84198:	46bd      	mov	sp, r7
   8419a:	bd80      	pop	{r7, pc}
   8419c:	00083c75 	.word	0x00083c75
   841a0:	00083cbd 	.word	0x00083cbd
   841a4:	00083b11 	.word	0x00083b11
   841a8:	40094000 	.word	0x40094000
   841ac:	00080615 	.word	0x00080615
   841b0:	01312d00 	.word	0x01312d00
   841b4:	00083c21 	.word	0x00083c21
   841b8:	000802e9 	.word	0x000802e9

000841bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   841bc:	b480      	push	{r7}
   841be:	af00      	add	r7, sp, #0
	while (1) {
   841c0:	e7fe      	b.n	841c0 <Dummy_Handler+0x4>
	...

000841c4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   841c4:	b580      	push	{r7, lr}
   841c6:	b082      	sub	sp, #8
   841c8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   841ca:	4b1e      	ldr	r3, [pc, #120]	; (84244 <Reset_Handler+0x80>)
   841cc:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   841ce:	4b1e      	ldr	r3, [pc, #120]	; (84248 <Reset_Handler+0x84>)
   841d0:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   841d2:	687a      	ldr	r2, [r7, #4]
   841d4:	683b      	ldr	r3, [r7, #0]
   841d6:	429a      	cmp	r2, r3
   841d8:	d00c      	beq.n	841f4 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   841da:	e007      	b.n	841ec <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   841dc:	683b      	ldr	r3, [r7, #0]
   841de:	1d1a      	adds	r2, r3, #4
   841e0:	603a      	str	r2, [r7, #0]
   841e2:	687a      	ldr	r2, [r7, #4]
   841e4:	1d11      	adds	r1, r2, #4
   841e6:	6079      	str	r1, [r7, #4]
   841e8:	6812      	ldr	r2, [r2, #0]
   841ea:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   841ec:	683b      	ldr	r3, [r7, #0]
   841ee:	4a17      	ldr	r2, [pc, #92]	; (8424c <Reset_Handler+0x88>)
   841f0:	4293      	cmp	r3, r2
   841f2:	d3f3      	bcc.n	841dc <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   841f4:	4b16      	ldr	r3, [pc, #88]	; (84250 <Reset_Handler+0x8c>)
   841f6:	603b      	str	r3, [r7, #0]
   841f8:	e004      	b.n	84204 <Reset_Handler+0x40>
		*pDest++ = 0;
   841fa:	683b      	ldr	r3, [r7, #0]
   841fc:	1d1a      	adds	r2, r3, #4
   841fe:	603a      	str	r2, [r7, #0]
   84200:	2200      	movs	r2, #0
   84202:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   84204:	683b      	ldr	r3, [r7, #0]
   84206:	4a13      	ldr	r2, [pc, #76]	; (84254 <Reset_Handler+0x90>)
   84208:	4293      	cmp	r3, r2
   8420a:	d3f6      	bcc.n	841fa <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   8420c:	4b12      	ldr	r3, [pc, #72]	; (84258 <Reset_Handler+0x94>)
   8420e:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   84210:	4a12      	ldr	r2, [pc, #72]	; (8425c <Reset_Handler+0x98>)
   84212:	687b      	ldr	r3, [r7, #4]
   84214:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   84218:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8421c:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8421e:	687b      	ldr	r3, [r7, #4]
   84220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   84224:	d309      	bcc.n	8423a <Reset_Handler+0x76>
   84226:	687b      	ldr	r3, [r7, #4]
   84228:	4a0d      	ldr	r2, [pc, #52]	; (84260 <Reset_Handler+0x9c>)
   8422a:	4293      	cmp	r3, r2
   8422c:	d805      	bhi.n	8423a <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8422e:	4a0b      	ldr	r2, [pc, #44]	; (8425c <Reset_Handler+0x98>)
   84230:	4b0a      	ldr	r3, [pc, #40]	; (8425c <Reset_Handler+0x98>)
   84232:	689b      	ldr	r3, [r3, #8]
   84234:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   84238:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8423a:	4b0a      	ldr	r3, [pc, #40]	; (84264 <Reset_Handler+0xa0>)
   8423c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8423e:	4b0a      	ldr	r3, [pc, #40]	; (84268 <Reset_Handler+0xa4>)
   84240:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   84242:	e7fe      	b.n	84242 <Reset_Handler+0x7e>
   84244:	00089bfc 	.word	0x00089bfc
   84248:	20070000 	.word	0x20070000
   8424c:	20070b50 	.word	0x20070b50
   84250:	20070b50 	.word	0x20070b50
   84254:	20071010 	.word	0x20071010
   84258:	00080000 	.word	0x00080000
   8425c:	e000ed00 	.word	0xe000ed00
   84260:	200fffff 	.word	0x200fffff
   84264:	00085681 	.word	0x00085681
   84268:	0008463d 	.word	0x0008463d

0008426c <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   8426c:	b480      	push	{r7}
   8426e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   84270:	4b57      	ldr	r3, [pc, #348]	; (843d0 <SystemCoreClockUpdate+0x164>)
   84272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84274:	f003 0303 	and.w	r3, r3, #3
   84278:	2b03      	cmp	r3, #3
   8427a:	f200 808a 	bhi.w	84392 <SystemCoreClockUpdate+0x126>
   8427e:	a201      	add	r2, pc, #4	; (adr r2, 84284 <SystemCoreClockUpdate+0x18>)
   84280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84284:	00084295 	.word	0x00084295
   84288:	000842b5 	.word	0x000842b5
   8428c:	00084305 	.word	0x00084305
   84290:	00084305 	.word	0x00084305
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   84294:	4b4f      	ldr	r3, [pc, #316]	; (843d4 <SystemCoreClockUpdate+0x168>)
   84296:	695b      	ldr	r3, [r3, #20]
   84298:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8429c:	2b00      	cmp	r3, #0
   8429e:	d004      	beq.n	842aa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   842a0:	4b4d      	ldr	r3, [pc, #308]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   842a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   842a6:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   842a8:	e073      	b.n	84392 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   842aa:	4b4b      	ldr	r3, [pc, #300]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   842ac:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   842b0:	601a      	str	r2, [r3, #0]
		break;
   842b2:	e06e      	b.n	84392 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   842b4:	4b46      	ldr	r3, [pc, #280]	; (843d0 <SystemCoreClockUpdate+0x164>)
   842b6:	6a1b      	ldr	r3, [r3, #32]
   842b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   842bc:	2b00      	cmp	r3, #0
   842be:	d003      	beq.n	842c8 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   842c0:	4b45      	ldr	r3, [pc, #276]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   842c2:	4a46      	ldr	r2, [pc, #280]	; (843dc <SystemCoreClockUpdate+0x170>)
   842c4:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   842c6:	e064      	b.n	84392 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   842c8:	4b43      	ldr	r3, [pc, #268]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   842ca:	4a45      	ldr	r2, [pc, #276]	; (843e0 <SystemCoreClockUpdate+0x174>)
   842cc:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   842ce:	4b40      	ldr	r3, [pc, #256]	; (843d0 <SystemCoreClockUpdate+0x164>)
   842d0:	6a1b      	ldr	r3, [r3, #32]
   842d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   842d6:	2b10      	cmp	r3, #16
   842d8:	d004      	beq.n	842e4 <SystemCoreClockUpdate+0x78>
   842da:	2b20      	cmp	r3, #32
   842dc:	d008      	beq.n	842f0 <SystemCoreClockUpdate+0x84>
   842de:	2b00      	cmp	r3, #0
   842e0:	d00e      	beq.n	84300 <SystemCoreClockUpdate+0x94>
				break;
   842e2:	e00e      	b.n	84302 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   842e4:	4b3c      	ldr	r3, [pc, #240]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   842e6:	681b      	ldr	r3, [r3, #0]
   842e8:	005b      	lsls	r3, r3, #1
   842ea:	4a3b      	ldr	r2, [pc, #236]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   842ec:	6013      	str	r3, [r2, #0]
				break;
   842ee:	e008      	b.n	84302 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   842f0:	4b39      	ldr	r3, [pc, #228]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   842f2:	681a      	ldr	r2, [r3, #0]
   842f4:	4613      	mov	r3, r2
   842f6:	005b      	lsls	r3, r3, #1
   842f8:	4413      	add	r3, r2
   842fa:	4a37      	ldr	r2, [pc, #220]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   842fc:	6013      	str	r3, [r2, #0]
				break;
   842fe:	e000      	b.n	84302 <SystemCoreClockUpdate+0x96>
				break;
   84300:	bf00      	nop
		break;
   84302:	e046      	b.n	84392 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84304:	4b32      	ldr	r3, [pc, #200]	; (843d0 <SystemCoreClockUpdate+0x164>)
   84306:	6a1b      	ldr	r3, [r3, #32]
   84308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8430c:	2b00      	cmp	r3, #0
   8430e:	d003      	beq.n	84318 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84310:	4b31      	ldr	r3, [pc, #196]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   84312:	4a32      	ldr	r2, [pc, #200]	; (843dc <SystemCoreClockUpdate+0x170>)
   84314:	601a      	str	r2, [r3, #0]
   84316:	e01c      	b.n	84352 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84318:	4b2f      	ldr	r3, [pc, #188]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   8431a:	4a31      	ldr	r2, [pc, #196]	; (843e0 <SystemCoreClockUpdate+0x174>)
   8431c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8431e:	4b2c      	ldr	r3, [pc, #176]	; (843d0 <SystemCoreClockUpdate+0x164>)
   84320:	6a1b      	ldr	r3, [r3, #32]
   84322:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84326:	2b10      	cmp	r3, #16
   84328:	d004      	beq.n	84334 <SystemCoreClockUpdate+0xc8>
   8432a:	2b20      	cmp	r3, #32
   8432c:	d008      	beq.n	84340 <SystemCoreClockUpdate+0xd4>
   8432e:	2b00      	cmp	r3, #0
   84330:	d00e      	beq.n	84350 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   84332:	e00e      	b.n	84352 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   84334:	4b28      	ldr	r3, [pc, #160]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   84336:	681b      	ldr	r3, [r3, #0]
   84338:	005b      	lsls	r3, r3, #1
   8433a:	4a27      	ldr	r2, [pc, #156]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   8433c:	6013      	str	r3, [r2, #0]
				break;
   8433e:	e008      	b.n	84352 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   84340:	4b25      	ldr	r3, [pc, #148]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   84342:	681a      	ldr	r2, [r3, #0]
   84344:	4613      	mov	r3, r2
   84346:	005b      	lsls	r3, r3, #1
   84348:	4413      	add	r3, r2
   8434a:	4a23      	ldr	r2, [pc, #140]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   8434c:	6013      	str	r3, [r2, #0]
				break;
   8434e:	e000      	b.n	84352 <SystemCoreClockUpdate+0xe6>
				break;
   84350:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   84352:	4b1f      	ldr	r3, [pc, #124]	; (843d0 <SystemCoreClockUpdate+0x164>)
   84354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84356:	f003 0303 	and.w	r3, r3, #3
   8435a:	2b02      	cmp	r3, #2
   8435c:	d115      	bne.n	8438a <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8435e:	4b1c      	ldr	r3, [pc, #112]	; (843d0 <SystemCoreClockUpdate+0x164>)
   84360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   84362:	0c1b      	lsrs	r3, r3, #16
   84364:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   84368:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8436a:	4a1b      	ldr	r2, [pc, #108]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   8436c:	6812      	ldr	r2, [r2, #0]
   8436e:	fb02 f303 	mul.w	r3, r2, r3
   84372:	4a19      	ldr	r2, [pc, #100]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   84374:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   84376:	4b16      	ldr	r3, [pc, #88]	; (843d0 <SystemCoreClockUpdate+0x164>)
   84378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8437a:	b2db      	uxtb	r3, r3
   8437c:	4a16      	ldr	r2, [pc, #88]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   8437e:	6812      	ldr	r2, [r2, #0]
   84380:	fbb2 f3f3 	udiv	r3, r2, r3
   84384:	4a14      	ldr	r2, [pc, #80]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   84386:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   84388:	e002      	b.n	84390 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8438a:	4b13      	ldr	r3, [pc, #76]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   8438c:	4a15      	ldr	r2, [pc, #84]	; (843e4 <SystemCoreClockUpdate+0x178>)
   8438e:	601a      	str	r2, [r3, #0]
		break;
   84390:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   84392:	4b0f      	ldr	r3, [pc, #60]	; (843d0 <SystemCoreClockUpdate+0x164>)
   84394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84396:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8439a:	2b70      	cmp	r3, #112	; 0x70
   8439c:	d108      	bne.n	843b0 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   8439e:	4b0e      	ldr	r3, [pc, #56]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   843a0:	681b      	ldr	r3, [r3, #0]
   843a2:	4a11      	ldr	r2, [pc, #68]	; (843e8 <SystemCoreClockUpdate+0x17c>)
   843a4:	fba2 2303 	umull	r2, r3, r2, r3
   843a8:	085b      	lsrs	r3, r3, #1
   843aa:	4a0b      	ldr	r2, [pc, #44]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   843ac:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   843ae:	e00a      	b.n	843c6 <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   843b0:	4b07      	ldr	r3, [pc, #28]	; (843d0 <SystemCoreClockUpdate+0x164>)
   843b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   843b4:	091b      	lsrs	r3, r3, #4
   843b6:	f003 0307 	and.w	r3, r3, #7
   843ba:	4a07      	ldr	r2, [pc, #28]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   843bc:	6812      	ldr	r2, [r2, #0]
   843be:	fa22 f303 	lsr.w	r3, r2, r3
   843c2:	4a05      	ldr	r2, [pc, #20]	; (843d8 <SystemCoreClockUpdate+0x16c>)
   843c4:	6013      	str	r3, [r2, #0]
}
   843c6:	bf00      	nop
   843c8:	46bd      	mov	sp, r7
   843ca:	bc80      	pop	{r7}
   843cc:	4770      	bx	lr
   843ce:	bf00      	nop
   843d0:	400e0600 	.word	0x400e0600
   843d4:	400e1a10 	.word	0x400e1a10
   843d8:	2007019c 	.word	0x2007019c
   843dc:	00b71b00 	.word	0x00b71b00
   843e0:	003d0900 	.word	0x003d0900
   843e4:	0e4e1c00 	.word	0x0e4e1c00
   843e8:	aaaaaaab 	.word	0xaaaaaaab

000843ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   843ec:	b480      	push	{r7}
   843ee:	b085      	sub	sp, #20
   843f0:	af00      	add	r7, sp, #0
   843f2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   843f4:	4b10      	ldr	r3, [pc, #64]	; (84438 <_sbrk+0x4c>)
   843f6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   843f8:	4b10      	ldr	r3, [pc, #64]	; (8443c <_sbrk+0x50>)
   843fa:	681b      	ldr	r3, [r3, #0]
   843fc:	2b00      	cmp	r3, #0
   843fe:	d102      	bne.n	84406 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   84400:	4b0e      	ldr	r3, [pc, #56]	; (8443c <_sbrk+0x50>)
   84402:	4a0f      	ldr	r2, [pc, #60]	; (84440 <_sbrk+0x54>)
   84404:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   84406:	4b0d      	ldr	r3, [pc, #52]	; (8443c <_sbrk+0x50>)
   84408:	681b      	ldr	r3, [r3, #0]
   8440a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   8440c:	68ba      	ldr	r2, [r7, #8]
   8440e:	687b      	ldr	r3, [r7, #4]
   84410:	441a      	add	r2, r3
   84412:	68fb      	ldr	r3, [r7, #12]
   84414:	429a      	cmp	r2, r3
   84416:	dd02      	ble.n	8441e <_sbrk+0x32>
		return (caddr_t) -1;	
   84418:	f04f 33ff 	mov.w	r3, #4294967295
   8441c:	e006      	b.n	8442c <_sbrk+0x40>
	}

	heap += incr;
   8441e:	4b07      	ldr	r3, [pc, #28]	; (8443c <_sbrk+0x50>)
   84420:	681a      	ldr	r2, [r3, #0]
   84422:	687b      	ldr	r3, [r7, #4]
   84424:	4413      	add	r3, r2
   84426:	4a05      	ldr	r2, [pc, #20]	; (8443c <_sbrk+0x50>)
   84428:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8442a:	68bb      	ldr	r3, [r7, #8]
}
   8442c:	4618      	mov	r0, r3
   8442e:	3714      	adds	r7, #20
   84430:	46bd      	mov	sp, r7
   84432:	bc80      	pop	{r7}
   84434:	4770      	bx	lr
   84436:	bf00      	nop
   84438:	20087ffc 	.word	0x20087ffc
   8443c:	20070dcc 	.word	0x20070dcc
   84440:	20073010 	.word	0x20073010

00084444 <NVIC_SetPriority>:
{
   84444:	b480      	push	{r7}
   84446:	b083      	sub	sp, #12
   84448:	af00      	add	r7, sp, #0
   8444a:	4603      	mov	r3, r0
   8444c:	6039      	str	r1, [r7, #0]
   8444e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   84450:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84454:	2b00      	cmp	r3, #0
   84456:	da0b      	bge.n	84470 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   84458:	490d      	ldr	r1, [pc, #52]	; (84490 <NVIC_SetPriority+0x4c>)
   8445a:	79fb      	ldrb	r3, [r7, #7]
   8445c:	f003 030f 	and.w	r3, r3, #15
   84460:	3b04      	subs	r3, #4
   84462:	683a      	ldr	r2, [r7, #0]
   84464:	b2d2      	uxtb	r2, r2
   84466:	0112      	lsls	r2, r2, #4
   84468:	b2d2      	uxtb	r2, r2
   8446a:	440b      	add	r3, r1
   8446c:	761a      	strb	r2, [r3, #24]
}
   8446e:	e009      	b.n	84484 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84470:	4908      	ldr	r1, [pc, #32]	; (84494 <NVIC_SetPriority+0x50>)
   84472:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84476:	683a      	ldr	r2, [r7, #0]
   84478:	b2d2      	uxtb	r2, r2
   8447a:	0112      	lsls	r2, r2, #4
   8447c:	b2d2      	uxtb	r2, r2
   8447e:	440b      	add	r3, r1
   84480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   84484:	bf00      	nop
   84486:	370c      	adds	r7, #12
   84488:	46bd      	mov	sp, r7
   8448a:	bc80      	pop	{r7}
   8448c:	4770      	bx	lr
   8448e:	bf00      	nop
   84490:	e000ed00 	.word	0xe000ed00
   84494:	e000e100 	.word	0xe000e100

00084498 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   84498:	b580      	push	{r7, lr}
   8449a:	b082      	sub	sp, #8
   8449c:	af00      	add	r7, sp, #0
   8449e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   844a0:	687b      	ldr	r3, [r7, #4]
   844a2:	3b01      	subs	r3, #1
   844a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   844a8:	d301      	bcc.n	844ae <SysTick_Config+0x16>
   844aa:	2301      	movs	r3, #1
   844ac:	e00f      	b.n	844ce <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   844ae:	4a0a      	ldr	r2, [pc, #40]	; (844d8 <SysTick_Config+0x40>)
   844b0:	687b      	ldr	r3, [r7, #4]
   844b2:	3b01      	subs	r3, #1
   844b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   844b6:	210f      	movs	r1, #15
   844b8:	f04f 30ff 	mov.w	r0, #4294967295
   844bc:	4b07      	ldr	r3, [pc, #28]	; (844dc <SysTick_Config+0x44>)
   844be:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   844c0:	4b05      	ldr	r3, [pc, #20]	; (844d8 <SysTick_Config+0x40>)
   844c2:	2200      	movs	r2, #0
   844c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   844c6:	4b04      	ldr	r3, [pc, #16]	; (844d8 <SysTick_Config+0x40>)
   844c8:	2207      	movs	r2, #7
   844ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   844cc:	2300      	movs	r3, #0
}
   844ce:	4618      	mov	r0, r3
   844d0:	3708      	adds	r7, #8
   844d2:	46bd      	mov	sp, r7
   844d4:	bd80      	pop	{r7, pc}
   844d6:	bf00      	nop
   844d8:	e000e010 	.word	0xe000e010
   844dc:	00084445 	.word	0x00084445

000844e0 <osc_get_rate>:
{
   844e0:	b480      	push	{r7}
   844e2:	b083      	sub	sp, #12
   844e4:	af00      	add	r7, sp, #0
   844e6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   844e8:	687b      	ldr	r3, [r7, #4]
   844ea:	2b07      	cmp	r3, #7
   844ec:	d825      	bhi.n	8453a <osc_get_rate+0x5a>
   844ee:	a201      	add	r2, pc, #4	; (adr r2, 844f4 <osc_get_rate+0x14>)
   844f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   844f4:	00084515 	.word	0x00084515
   844f8:	0008451b 	.word	0x0008451b
   844fc:	00084521 	.word	0x00084521
   84500:	00084527 	.word	0x00084527
   84504:	0008452b 	.word	0x0008452b
   84508:	0008452f 	.word	0x0008452f
   8450c:	00084533 	.word	0x00084533
   84510:	00084537 	.word	0x00084537
		return OSC_SLCK_32K_RC_HZ;
   84514:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   84518:	e010      	b.n	8453c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8451a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8451e:	e00d      	b.n	8453c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   84520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84524:	e00a      	b.n	8453c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   84526:	4b08      	ldr	r3, [pc, #32]	; (84548 <osc_get_rate+0x68>)
   84528:	e008      	b.n	8453c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8452a:	4b08      	ldr	r3, [pc, #32]	; (8454c <osc_get_rate+0x6c>)
   8452c:	e006      	b.n	8453c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8452e:	4b08      	ldr	r3, [pc, #32]	; (84550 <osc_get_rate+0x70>)
   84530:	e004      	b.n	8453c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   84532:	4b07      	ldr	r3, [pc, #28]	; (84550 <osc_get_rate+0x70>)
   84534:	e002      	b.n	8453c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   84536:	4b06      	ldr	r3, [pc, #24]	; (84550 <osc_get_rate+0x70>)
   84538:	e000      	b.n	8453c <osc_get_rate+0x5c>
	return 0;
   8453a:	2300      	movs	r3, #0
}
   8453c:	4618      	mov	r0, r3
   8453e:	370c      	adds	r7, #12
   84540:	46bd      	mov	sp, r7
   84542:	bc80      	pop	{r7}
   84544:	4770      	bx	lr
   84546:	bf00      	nop
   84548:	003d0900 	.word	0x003d0900
   8454c:	007a1200 	.word	0x007a1200
   84550:	00b71b00 	.word	0x00b71b00

00084554 <sysclk_get_main_hz>:
{
   84554:	b580      	push	{r7, lr}
   84556:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   84558:	2006      	movs	r0, #6
   8455a:	4b04      	ldr	r3, [pc, #16]	; (8456c <sysclk_get_main_hz+0x18>)
   8455c:	4798      	blx	r3
   8455e:	4602      	mov	r2, r0
   84560:	4613      	mov	r3, r2
   84562:	00db      	lsls	r3, r3, #3
   84564:	1a9b      	subs	r3, r3, r2
   84566:	005b      	lsls	r3, r3, #1
}
   84568:	4618      	mov	r0, r3
   8456a:	bd80      	pop	{r7, pc}
   8456c:	000844e1 	.word	0x000844e1

00084570 <sysclk_get_cpu_hz>:
{
   84570:	b580      	push	{r7, lr}
   84572:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   84574:	4b02      	ldr	r3, [pc, #8]	; (84580 <sysclk_get_cpu_hz+0x10>)
   84576:	4798      	blx	r3
   84578:	4603      	mov	r3, r0
   8457a:	085b      	lsrs	r3, r3, #1
}
   8457c:	4618      	mov	r0, r3
   8457e:	bd80      	pop	{r7, pc}
   84580:	00084555 	.word	0x00084555

00084584 <ioport_set_pin_level>:
{
   84584:	b480      	push	{r7}
   84586:	b08b      	sub	sp, #44	; 0x2c
   84588:	af00      	add	r7, sp, #0
   8458a:	6078      	str	r0, [r7, #4]
   8458c:	460b      	mov	r3, r1
   8458e:	70fb      	strb	r3, [r7, #3]
   84590:	687b      	ldr	r3, [r7, #4]
   84592:	627b      	str	r3, [r7, #36]	; 0x24
   84594:	78fb      	ldrb	r3, [r7, #3]
   84596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   8459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8459c:	61fb      	str	r3, [r7, #28]
   8459e:	69fb      	ldr	r3, [r7, #28]
   845a0:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   845a2:	69bb      	ldr	r3, [r7, #24]
   845a4:	095b      	lsrs	r3, r3, #5
   845a6:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   845a8:	697b      	ldr	r3, [r7, #20]
   845aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   845ae:	f203 7307 	addw	r3, r3, #1799	; 0x707
   845b2:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   845b4:	613b      	str	r3, [r7, #16]
	if (level) {
   845b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   845ba:	2b00      	cmp	r3, #0
   845bc:	d009      	beq.n	845d2 <ioport_set_pin_level+0x4e>
   845be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   845c0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   845c2:	68fb      	ldr	r3, [r7, #12]
   845c4:	f003 031f 	and.w	r3, r3, #31
   845c8:	2201      	movs	r2, #1
   845ca:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   845cc:	693b      	ldr	r3, [r7, #16]
   845ce:	631a      	str	r2, [r3, #48]	; 0x30
}
   845d0:	e008      	b.n	845e4 <ioport_set_pin_level+0x60>
   845d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   845d4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   845d6:	68bb      	ldr	r3, [r7, #8]
   845d8:	f003 031f 	and.w	r3, r3, #31
   845dc:	2201      	movs	r2, #1
   845de:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   845e0:	693b      	ldr	r3, [r7, #16]
   845e2:	635a      	str	r2, [r3, #52]	; 0x34
   845e4:	bf00      	nop
   845e6:	372c      	adds	r7, #44	; 0x2c
   845e8:	46bd      	mov	sp, r7
   845ea:	bc80      	pop	{r7}
   845ec:	4770      	bx	lr

000845ee <ioport_get_pin_level>:
{
   845ee:	b480      	push	{r7}
   845f0:	b089      	sub	sp, #36	; 0x24
   845f2:	af00      	add	r7, sp, #0
   845f4:	6078      	str	r0, [r7, #4]
   845f6:	687b      	ldr	r3, [r7, #4]
   845f8:	61fb      	str	r3, [r7, #28]
   845fa:	69fb      	ldr	r3, [r7, #28]
   845fc:	61bb      	str	r3, [r7, #24]
   845fe:	69bb      	ldr	r3, [r7, #24]
   84600:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   84602:	697b      	ldr	r3, [r7, #20]
   84604:	095b      	lsrs	r3, r3, #5
   84606:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   84608:	693b      	ldr	r3, [r7, #16]
   8460a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8460e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   84612:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   84614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   84616:	69fb      	ldr	r3, [r7, #28]
   84618:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8461a:	68fb      	ldr	r3, [r7, #12]
   8461c:	f003 031f 	and.w	r3, r3, #31
   84620:	2101      	movs	r1, #1
   84622:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   84626:	4013      	ands	r3, r2
   84628:	2b00      	cmp	r3, #0
   8462a:	bf14      	ite	ne
   8462c:	2301      	movne	r3, #1
   8462e:	2300      	moveq	r3, #0
   84630:	b2db      	uxtb	r3, r3
}
   84632:	4618      	mov	r0, r3
   84634:	3724      	adds	r7, #36	; 0x24
   84636:	46bd      	mov	sp, r7
   84638:	bc80      	pop	{r7}
   8463a:	4770      	bx	lr

0008463c <main>:

void noOS_bootup_sequence(void);
void set_led(ioport_pin_t pin, Bool level);

int main(void)
{
   8463c:	b580      	push	{r7, lr}
   8463e:	b082      	sub	sp, #8
   84640:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   84642:	4b1d      	ldr	r3, [pc, #116]	; (846b8 <main+0x7c>)
   84644:	4798      	blx	r3
    board_init();
   84646:	4b1d      	ldr	r3, [pc, #116]	; (846bc <main+0x80>)
   84648:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   8464a:	4b1d      	ldr	r3, [pc, #116]	; (846c0 <main+0x84>)
   8464c:	4798      	blx	r3
   8464e:	4602      	mov	r2, r0
   84650:	4b1c      	ldr	r3, [pc, #112]	; (846c4 <main+0x88>)
   84652:	fba3 2302 	umull	r2, r3, r3, r2
   84656:	099b      	lsrs	r3, r3, #6
   84658:	4618      	mov	r0, r3
   8465a:	4b1b      	ldr	r3, [pc, #108]	; (846c8 <main+0x8c>)
   8465c:	4798      	blx	r3
    
    motor_init();
   8465e:	4b1b      	ldr	r3, [pc, #108]	; (846cc <main+0x90>)
   84660:	4798      	blx	r3

    spi_init();
   84662:	4b1b      	ldr	r3, [pc, #108]	; (846d0 <main+0x94>)
   84664:	4798      	blx	r3
    
    compass_init();
   84666:	4b1b      	ldr	r3, [pc, #108]	; (846d4 <main+0x98>)
   84668:	4798      	blx	r3
    lcd_init();
   8466a:	4b1b      	ldr	r3, [pc, #108]	; (846d8 <main+0x9c>)
   8466c:	4798      	blx	r3
    
    noOS_bootup_sequence();
   8466e:	4b1b      	ldr	r3, [pc, #108]	; (846dc <main+0xa0>)
   84670:	4798      	blx	r3

    enable_motor();
   84672:	4b1b      	ldr	r3, [pc, #108]	; (846e0 <main+0xa4>)
   84674:	4798      	blx	r3

    mts.line_cal_value = 7;
   84676:	4b1b      	ldr	r3, [pc, #108]	; (846e4 <main+0xa8>)
   84678:	2207      	movs	r2, #7
   8467a:	705a      	strb	r2, [r3, #1]

    while (1)
    {
        update_comm();
   8467c:	4b1a      	ldr	r3, [pc, #104]	; (846e8 <main+0xac>)
   8467e:	4798      	blx	r3
        update_heartbeat();
   84680:	4b1a      	ldr	r3, [pc, #104]	; (846ec <main+0xb0>)
   84682:	4798      	blx	r3
        //check_battery();
        
        if (stm.ibit.heartbeat)
   84684:	4b1a      	ldr	r3, [pc, #104]	; (846f0 <main+0xb4>)
   84686:	781b      	ldrb	r3, [r3, #0]
   84688:	f003 0301 	and.w	r3, r3, #1
   8468c:	b2db      	uxtb	r3, r3
   8468e:	2b00      	cmp	r3, #0
   84690:	d004      	beq.n	8469c <main+0x60>
        {
            set_led(LED_M2, 1);
   84692:	2101      	movs	r1, #1
   84694:	2068      	movs	r0, #104	; 0x68
   84696:	4b17      	ldr	r3, [pc, #92]	; (846f4 <main+0xb8>)
   84698:	4798      	blx	r3
   8469a:	e003      	b.n	846a4 <main+0x68>
        }
        else
        {
            set_led(LED_M2, 0);
   8469c:	2100      	movs	r1, #0
   8469e:	2068      	movs	r0, #104	; 0x68
   846a0:	4b14      	ldr	r3, [pc, #80]	; (846f4 <main+0xb8>)
   846a2:	4798      	blx	r3
        }

        //update_motor(1, 1, 0);

        act_event = button_events();
   846a4:	4b14      	ldr	r3, [pc, #80]	; (846f8 <main+0xbc>)
   846a6:	4798      	blx	r3
   846a8:	4603      	mov	r3, r0
   846aa:	71fb      	strb	r3, [r7, #7]
        menu(act_event);
   846ac:	79fb      	ldrb	r3, [r7, #7]
   846ae:	4618      	mov	r0, r3
   846b0:	4b12      	ldr	r3, [pc, #72]	; (846fc <main+0xc0>)
   846b2:	4798      	blx	r3
        update_comm();
   846b4:	e7e2      	b.n	8467c <main+0x40>
   846b6:	bf00      	nop
   846b8:	0008361d 	.word	0x0008361d
   846bc:	00083e85 	.word	0x00083e85
   846c0:	00084571 	.word	0x00084571
   846c4:	10624dd3 	.word	0x10624dd3
   846c8:	00084499 	.word	0x00084499
   846cc:	00082b41 	.word	0x00082b41
   846d0:	00080a8d 	.word	0x00080a8d
   846d4:	0008136d 	.word	0x0008136d
   846d8:	000815ad 	.word	0x000815ad
   846dc:	00084701 	.word	0x00084701
   846e0:	00082d29 	.word	0x00082d29
   846e4:	20070e18 	.word	0x20070e18
   846e8:	0008318d 	.word	0x0008318d
   846ec:	00083285 	.word	0x00083285
   846f0:	20070e20 	.word	0x20070e20
   846f4:	000848b5 	.word	0x000848b5
   846f8:	0008277d 	.word	0x0008277d
   846fc:	00081bf1 	.word	0x00081bf1

00084700 <noOS_bootup_sequence>:
    }
}

void noOS_bootup_sequence(void)
{
   84700:	b580      	push	{r7, lr}
   84702:	b082      	sub	sp, #8
   84704:	af00      	add	r7, sp, #0
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   84706:	e072      	b.n	847ee <noOS_bootup_sequence+0xee>
    {
        if (getTicks() >= (ticks_blink_update + 800))
   84708:	4b5e      	ldr	r3, [pc, #376]	; (84884 <noOS_bootup_sequence+0x184>)
   8470a:	4798      	blx	r3
   8470c:	4602      	mov	r2, r0
   8470e:	4b5e      	ldr	r3, [pc, #376]	; (84888 <noOS_bootup_sequence+0x188>)
   84710:	681b      	ldr	r3, [r3, #0]
   84712:	f503 7348 	add.w	r3, r3, #800	; 0x320
   84716:	429a      	cmp	r2, r3
   84718:	d31a      	bcc.n	84750 <noOS_bootup_sequence+0x50>
        {
            ticks_blink_update = getTicks();
   8471a:	4b5a      	ldr	r3, [pc, #360]	; (84884 <noOS_bootup_sequence+0x184>)
   8471c:	4798      	blx	r3
   8471e:	4602      	mov	r2, r0
   84720:	4b59      	ldr	r3, [pc, #356]	; (84888 <noOS_bootup_sequence+0x188>)
   84722:	601a      	str	r2, [r3, #0]
            
            if (blink_level)
   84724:	4b59      	ldr	r3, [pc, #356]	; (8488c <noOS_bootup_sequence+0x18c>)
   84726:	781b      	ldrb	r3, [r3, #0]
   84728:	2b00      	cmp	r3, #0
   8472a:	d003      	beq.n	84734 <noOS_bootup_sequence+0x34>
            {
                blink_level = 0;
   8472c:	4b57      	ldr	r3, [pc, #348]	; (8488c <noOS_bootup_sequence+0x18c>)
   8472e:	2200      	movs	r2, #0
   84730:	701a      	strb	r2, [r3, #0]
   84732:	e002      	b.n	8473a <noOS_bootup_sequence+0x3a>
            }
            else
            {
                blink_level = 1;
   84734:	4b55      	ldr	r3, [pc, #340]	; (8488c <noOS_bootup_sequence+0x18c>)
   84736:	2201      	movs	r2, #1
   84738:	701a      	strb	r2, [r3, #0]
            }
            
            ioport_set_pin_level(LED_BAT, blink_level);
   8473a:	4b54      	ldr	r3, [pc, #336]	; (8488c <noOS_bootup_sequence+0x18c>)
   8473c:	781b      	ldrb	r3, [r3, #0]
   8473e:	2b00      	cmp	r3, #0
   84740:	bf14      	ite	ne
   84742:	2301      	movne	r3, #1
   84744:	2300      	moveq	r3, #0
   84746:	b2db      	uxtb	r3, r3
   84748:	4619      	mov	r1, r3
   8474a:	2066      	movs	r0, #102	; 0x66
   8474c:	4b50      	ldr	r3, [pc, #320]	; (84890 <noOS_bootup_sequence+0x190>)
   8474e:	4798      	blx	r3
        }
        
        if (getTicks() >= (ticks_dot_update + 500))
   84750:	4b4c      	ldr	r3, [pc, #304]	; (84884 <noOS_bootup_sequence+0x184>)
   84752:	4798      	blx	r3
   84754:	4602      	mov	r2, r0
   84756:	4b4f      	ldr	r3, [pc, #316]	; (84894 <noOS_bootup_sequence+0x194>)
   84758:	681b      	ldr	r3, [r3, #0]
   8475a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   8475e:	429a      	cmp	r2, r3
   84760:	d315      	bcc.n	8478e <noOS_bootup_sequence+0x8e>
        {
            ticks_dot_update = getTicks();
   84762:	4b48      	ldr	r3, [pc, #288]	; (84884 <noOS_bootup_sequence+0x184>)
   84764:	4798      	blx	r3
   84766:	4602      	mov	r2, r0
   84768:	4b4a      	ldr	r3, [pc, #296]	; (84894 <noOS_bootup_sequence+0x194>)
   8476a:	601a      	str	r2, [r3, #0]
            
            if (dots < 3)
   8476c:	4b4a      	ldr	r3, [pc, #296]	; (84898 <noOS_bootup_sequence+0x198>)
   8476e:	781b      	ldrb	r3, [r3, #0]
   84770:	2b02      	cmp	r3, #2
   84772:	d806      	bhi.n	84782 <noOS_bootup_sequence+0x82>
            {
                dots++;
   84774:	4b48      	ldr	r3, [pc, #288]	; (84898 <noOS_bootup_sequence+0x198>)
   84776:	781b      	ldrb	r3, [r3, #0]
   84778:	3301      	adds	r3, #1
   8477a:	b2da      	uxtb	r2, r3
   8477c:	4b46      	ldr	r3, [pc, #280]	; (84898 <noOS_bootup_sequence+0x198>)
   8477e:	701a      	strb	r2, [r3, #0]
   84780:	e002      	b.n	84788 <noOS_bootup_sequence+0x88>
            }
            else
            {
                dots = 0;
   84782:	4b45      	ldr	r3, [pc, #276]	; (84898 <noOS_bootup_sequence+0x198>)
   84784:	2200      	movs	r2, #0
   84786:	701a      	strb	r2, [r3, #0]
            }
            
            update_dots = 1;
   84788:	4b44      	ldr	r3, [pc, #272]	; (8489c <noOS_bootup_sequence+0x19c>)
   8478a:	2201      	movs	r2, #1
   8478c:	701a      	strb	r2, [r3, #0]
        }
        
        if (update_dots)
   8478e:	4b43      	ldr	r3, [pc, #268]	; (8489c <noOS_bootup_sequence+0x19c>)
   84790:	781b      	ldrb	r3, [r3, #0]
   84792:	2b00      	cmp	r3, #0
   84794:	d02b      	beq.n	847ee <noOS_bootup_sequence+0xee>
        {
            update_dots = 0;
   84796:	4b41      	ldr	r3, [pc, #260]	; (8489c <noOS_bootup_sequence+0x19c>)
   84798:	2200      	movs	r2, #0
   8479a:	701a      	strb	r2, [r3, #0]
            
            switch (dots)
   8479c:	4b3e      	ldr	r3, [pc, #248]	; (84898 <noOS_bootup_sequence+0x198>)
   8479e:	781b      	ldrb	r3, [r3, #0]
   847a0:	2b03      	cmp	r3, #3
   847a2:	d823      	bhi.n	847ec <noOS_bootup_sequence+0xec>
   847a4:	a201      	add	r2, pc, #4	; (adr r2, 847ac <noOS_bootup_sequence+0xac>)
   847a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   847aa:	bf00      	nop
   847ac:	000847bd 	.word	0x000847bd
   847b0:	000847c9 	.word	0x000847c9
   847b4:	000847d5 	.word	0x000847d5
   847b8:	000847e1 	.word	0x000847e1
            {
                case 0:
                lcd_print_s(2, 2, "booting noOS   ");
   847bc:	4a38      	ldr	r2, [pc, #224]	; (848a0 <noOS_bootup_sequence+0x1a0>)
   847be:	2102      	movs	r1, #2
   847c0:	2002      	movs	r0, #2
   847c2:	4b38      	ldr	r3, [pc, #224]	; (848a4 <noOS_bootup_sequence+0x1a4>)
   847c4:	4798      	blx	r3
                break;
   847c6:	e012      	b.n	847ee <noOS_bootup_sequence+0xee>
                case 1:
                lcd_print_s(2, 14, ".");
   847c8:	4a37      	ldr	r2, [pc, #220]	; (848a8 <noOS_bootup_sequence+0x1a8>)
   847ca:	210e      	movs	r1, #14
   847cc:	2002      	movs	r0, #2
   847ce:	4b35      	ldr	r3, [pc, #212]	; (848a4 <noOS_bootup_sequence+0x1a4>)
   847d0:	4798      	blx	r3
                break;
   847d2:	e00c      	b.n	847ee <noOS_bootup_sequence+0xee>
                case 2:
                lcd_print_s(2, 15, ".");
   847d4:	4a34      	ldr	r2, [pc, #208]	; (848a8 <noOS_bootup_sequence+0x1a8>)
   847d6:	210f      	movs	r1, #15
   847d8:	2002      	movs	r0, #2
   847da:	4b32      	ldr	r3, [pc, #200]	; (848a4 <noOS_bootup_sequence+0x1a4>)
   847dc:	4798      	blx	r3
                break;
   847de:	e006      	b.n	847ee <noOS_bootup_sequence+0xee>
                case 3:
                lcd_print_s(2, 16, ".");
   847e0:	4a31      	ldr	r2, [pc, #196]	; (848a8 <noOS_bootup_sequence+0x1a8>)
   847e2:	2110      	movs	r1, #16
   847e4:	2002      	movs	r0, #2
   847e6:	4b2f      	ldr	r3, [pc, #188]	; (848a4 <noOS_bootup_sequence+0x1a4>)
   847e8:	4798      	blx	r3
                break;
   847ea:	e000      	b.n	847ee <noOS_bootup_sequence+0xee>
                default:
                break;
   847ec:	bf00      	nop
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   847ee:	2008      	movs	r0, #8
   847f0:	4b2e      	ldr	r3, [pc, #184]	; (848ac <noOS_bootup_sequence+0x1ac>)
   847f2:	4798      	blx	r3
   847f4:	4603      	mov	r3, r0
   847f6:	f083 0301 	eor.w	r3, r3, #1
   847fa:	b2db      	uxtb	r3, r3
   847fc:	2b00      	cmp	r3, #0
   847fe:	d006      	beq.n	8480e <noOS_bootup_sequence+0x10e>
   84800:	2062      	movs	r0, #98	; 0x62
   84802:	4b2a      	ldr	r3, [pc, #168]	; (848ac <noOS_bootup_sequence+0x1ac>)
   84804:	4798      	blx	r3
   84806:	4603      	mov	r3, r0
   84808:	2b00      	cmp	r3, #0
   8480a:	f47f af7d 	bne.w	84708 <noOS_bootup_sequence+0x8>
            }
        }
    }
    
    for(int i = 0; i< 3; i++)
   8480e:	2300      	movs	r3, #0
   84810:	607b      	str	r3, [r7, #4]
   84812:	e030      	b.n	84876 <noOS_bootup_sequence+0x176>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   84814:	2101      	movs	r1, #1
   84816:	206a      	movs	r0, #106	; 0x6a
   84818:	4b1d      	ldr	r3, [pc, #116]	; (84890 <noOS_bootup_sequence+0x190>)
   8481a:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 1);
   8481c:	2101      	movs	r1, #1
   8481e:	2066      	movs	r0, #102	; 0x66
   84820:	4b1b      	ldr	r3, [pc, #108]	; (84890 <noOS_bootup_sequence+0x190>)
   84822:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 1);
   84824:	2101      	movs	r1, #1
   84826:	2067      	movs	r0, #103	; 0x67
   84828:	4b19      	ldr	r3, [pc, #100]	; (84890 <noOS_bootup_sequence+0x190>)
   8482a:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 1);
   8482c:	2101      	movs	r1, #1
   8482e:	2068      	movs	r0, #104	; 0x68
   84830:	4b17      	ldr	r3, [pc, #92]	; (84890 <noOS_bootup_sequence+0x190>)
   84832:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 1);
   84834:	2101      	movs	r1, #1
   84836:	2069      	movs	r0, #105	; 0x69
   84838:	4b15      	ldr	r3, [pc, #84]	; (84890 <noOS_bootup_sequence+0x190>)
   8483a:	4798      	blx	r3
        mdelay(100);
   8483c:	2064      	movs	r0, #100	; 0x64
   8483e:	4b1c      	ldr	r3, [pc, #112]	; (848b0 <noOS_bootup_sequence+0x1b0>)
   84840:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   84842:	2100      	movs	r1, #0
   84844:	206a      	movs	r0, #106	; 0x6a
   84846:	4b12      	ldr	r3, [pc, #72]	; (84890 <noOS_bootup_sequence+0x190>)
   84848:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   8484a:	2100      	movs	r1, #0
   8484c:	2066      	movs	r0, #102	; 0x66
   8484e:	4b10      	ldr	r3, [pc, #64]	; (84890 <noOS_bootup_sequence+0x190>)
   84850:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   84852:	2100      	movs	r1, #0
   84854:	2067      	movs	r0, #103	; 0x67
   84856:	4b0e      	ldr	r3, [pc, #56]	; (84890 <noOS_bootup_sequence+0x190>)
   84858:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   8485a:	2100      	movs	r1, #0
   8485c:	2068      	movs	r0, #104	; 0x68
   8485e:	4b0c      	ldr	r3, [pc, #48]	; (84890 <noOS_bootup_sequence+0x190>)
   84860:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   84862:	2100      	movs	r1, #0
   84864:	2069      	movs	r0, #105	; 0x69
   84866:	4b0a      	ldr	r3, [pc, #40]	; (84890 <noOS_bootup_sequence+0x190>)
   84868:	4798      	blx	r3
        mdelay(100);
   8486a:	2064      	movs	r0, #100	; 0x64
   8486c:	4b10      	ldr	r3, [pc, #64]	; (848b0 <noOS_bootup_sequence+0x1b0>)
   8486e:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   84870:	687b      	ldr	r3, [r7, #4]
   84872:	3301      	adds	r3, #1
   84874:	607b      	str	r3, [r7, #4]
   84876:	687b      	ldr	r3, [r7, #4]
   84878:	2b02      	cmp	r3, #2
   8487a:	ddcb      	ble.n	84814 <noOS_bootup_sequence+0x114>
    }
}
   8487c:	bf00      	nop
   8487e:	3708      	adds	r7, #8
   84880:	46bd      	mov	sp, r7
   84882:	bd80      	pop	{r7, pc}
   84884:	0008314d 	.word	0x0008314d
   84888:	20070fe0 	.word	0x20070fe0
   8488c:	20070fdc 	.word	0x20070fdc
   84890:	00084585 	.word	0x00084585
   84894:	20070fe4 	.word	0x20070fe4
   84898:	20070dd0 	.word	0x20070dd0
   8489c:	200701a0 	.word	0x200701a0
   848a0:	00089930 	.word	0x00089930
   848a4:	0008169d 	.word	0x0008169d
   848a8:	00089940 	.word	0x00089940
   848ac:	000845ef 	.word	0x000845ef
   848b0:	00083161 	.word	0x00083161

000848b4 <set_led>:

void set_led(ioport_pin_t pin, Bool level)
{
   848b4:	b580      	push	{r7, lr}
   848b6:	b082      	sub	sp, #8
   848b8:	af00      	add	r7, sp, #0
   848ba:	6078      	str	r0, [r7, #4]
   848bc:	460b      	mov	r3, r1
   848be:	70fb      	strb	r3, [r7, #3]
    if (allow_leds)
   848c0:	4b0b      	ldr	r3, [pc, #44]	; (848f0 <set_led+0x3c>)
   848c2:	781b      	ldrb	r3, [r3, #0]
   848c4:	2b00      	cmp	r3, #0
   848c6:	d00a      	beq.n	848de <set_led+0x2a>
    {
        ioport_set_pin_level(pin, level);
   848c8:	78fb      	ldrb	r3, [r7, #3]
   848ca:	2b00      	cmp	r3, #0
   848cc:	bf14      	ite	ne
   848ce:	2301      	movne	r3, #1
   848d0:	2300      	moveq	r3, #0
   848d2:	b2db      	uxtb	r3, r3
   848d4:	4619      	mov	r1, r3
   848d6:	6878      	ldr	r0, [r7, #4]
   848d8:	4b06      	ldr	r3, [pc, #24]	; (848f4 <set_led+0x40>)
   848da:	4798      	blx	r3
    }
    else
    {
        ioport_set_pin_level(pin, 0);
    }
}
   848dc:	e003      	b.n	848e6 <set_led+0x32>
        ioport_set_pin_level(pin, 0);
   848de:	2100      	movs	r1, #0
   848e0:	6878      	ldr	r0, [r7, #4]
   848e2:	4b04      	ldr	r3, [pc, #16]	; (848f4 <set_led+0x40>)
   848e4:	4798      	blx	r3
}
   848e6:	bf00      	nop
   848e8:	3708      	adds	r7, #8
   848ea:	46bd      	mov	sp, r7
   848ec:	bd80      	pop	{r7, pc}
   848ee:	bf00      	nop
   848f0:	2007018d 	.word	0x2007018d
   848f4:	00084585 	.word	0x00084585

000848f8 <__aeabi_drsub>:
   848f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   848fc:	e002      	b.n	84904 <__adddf3>
   848fe:	bf00      	nop

00084900 <__aeabi_dsub>:
   84900:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00084904 <__adddf3>:
   84904:	b530      	push	{r4, r5, lr}
   84906:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8490a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8490e:	ea94 0f05 	teq	r4, r5
   84912:	bf08      	it	eq
   84914:	ea90 0f02 	teqeq	r0, r2
   84918:	bf1f      	itttt	ne
   8491a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8491e:	ea55 0c02 	orrsne.w	ip, r5, r2
   84922:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   84926:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8492a:	f000 80e2 	beq.w	84af2 <__adddf3+0x1ee>
   8492e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   84932:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   84936:	bfb8      	it	lt
   84938:	426d      	neglt	r5, r5
   8493a:	dd0c      	ble.n	84956 <__adddf3+0x52>
   8493c:	442c      	add	r4, r5
   8493e:	ea80 0202 	eor.w	r2, r0, r2
   84942:	ea81 0303 	eor.w	r3, r1, r3
   84946:	ea82 0000 	eor.w	r0, r2, r0
   8494a:	ea83 0101 	eor.w	r1, r3, r1
   8494e:	ea80 0202 	eor.w	r2, r0, r2
   84952:	ea81 0303 	eor.w	r3, r1, r3
   84956:	2d36      	cmp	r5, #54	; 0x36
   84958:	bf88      	it	hi
   8495a:	bd30      	pophi	{r4, r5, pc}
   8495c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   84960:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84964:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   84968:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8496c:	d002      	beq.n	84974 <__adddf3+0x70>
   8496e:	4240      	negs	r0, r0
   84970:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84974:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   84978:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8497c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   84980:	d002      	beq.n	84988 <__adddf3+0x84>
   84982:	4252      	negs	r2, r2
   84984:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84988:	ea94 0f05 	teq	r4, r5
   8498c:	f000 80a7 	beq.w	84ade <__adddf3+0x1da>
   84990:	f1a4 0401 	sub.w	r4, r4, #1
   84994:	f1d5 0e20 	rsbs	lr, r5, #32
   84998:	db0d      	blt.n	849b6 <__adddf3+0xb2>
   8499a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8499e:	fa22 f205 	lsr.w	r2, r2, r5
   849a2:	1880      	adds	r0, r0, r2
   849a4:	f141 0100 	adc.w	r1, r1, #0
   849a8:	fa03 f20e 	lsl.w	r2, r3, lr
   849ac:	1880      	adds	r0, r0, r2
   849ae:	fa43 f305 	asr.w	r3, r3, r5
   849b2:	4159      	adcs	r1, r3
   849b4:	e00e      	b.n	849d4 <__adddf3+0xd0>
   849b6:	f1a5 0520 	sub.w	r5, r5, #32
   849ba:	f10e 0e20 	add.w	lr, lr, #32
   849be:	2a01      	cmp	r2, #1
   849c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   849c4:	bf28      	it	cs
   849c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   849ca:	fa43 f305 	asr.w	r3, r3, r5
   849ce:	18c0      	adds	r0, r0, r3
   849d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   849d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   849d8:	d507      	bpl.n	849ea <__adddf3+0xe6>
   849da:	f04f 0e00 	mov.w	lr, #0
   849de:	f1dc 0c00 	rsbs	ip, ip, #0
   849e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   849e6:	eb6e 0101 	sbc.w	r1, lr, r1
   849ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   849ee:	d31b      	bcc.n	84a28 <__adddf3+0x124>
   849f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   849f4:	d30c      	bcc.n	84a10 <__adddf3+0x10c>
   849f6:	0849      	lsrs	r1, r1, #1
   849f8:	ea5f 0030 	movs.w	r0, r0, rrx
   849fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   84a00:	f104 0401 	add.w	r4, r4, #1
   84a04:	ea4f 5244 	mov.w	r2, r4, lsl #21
   84a08:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   84a0c:	f080 809a 	bcs.w	84b44 <__adddf3+0x240>
   84a10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84a14:	bf08      	it	eq
   84a16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   84a1a:	f150 0000 	adcs.w	r0, r0, #0
   84a1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84a22:	ea41 0105 	orr.w	r1, r1, r5
   84a26:	bd30      	pop	{r4, r5, pc}
   84a28:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   84a2c:	4140      	adcs	r0, r0
   84a2e:	eb41 0101 	adc.w	r1, r1, r1
   84a32:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84a36:	f1a4 0401 	sub.w	r4, r4, #1
   84a3a:	d1e9      	bne.n	84a10 <__adddf3+0x10c>
   84a3c:	f091 0f00 	teq	r1, #0
   84a40:	bf04      	itt	eq
   84a42:	4601      	moveq	r1, r0
   84a44:	2000      	moveq	r0, #0
   84a46:	fab1 f381 	clz	r3, r1
   84a4a:	bf08      	it	eq
   84a4c:	3320      	addeq	r3, #32
   84a4e:	f1a3 030b 	sub.w	r3, r3, #11
   84a52:	f1b3 0220 	subs.w	r2, r3, #32
   84a56:	da0c      	bge.n	84a72 <__adddf3+0x16e>
   84a58:	320c      	adds	r2, #12
   84a5a:	dd08      	ble.n	84a6e <__adddf3+0x16a>
   84a5c:	f102 0c14 	add.w	ip, r2, #20
   84a60:	f1c2 020c 	rsb	r2, r2, #12
   84a64:	fa01 f00c 	lsl.w	r0, r1, ip
   84a68:	fa21 f102 	lsr.w	r1, r1, r2
   84a6c:	e00c      	b.n	84a88 <__adddf3+0x184>
   84a6e:	f102 0214 	add.w	r2, r2, #20
   84a72:	bfd8      	it	le
   84a74:	f1c2 0c20 	rsble	ip, r2, #32
   84a78:	fa01 f102 	lsl.w	r1, r1, r2
   84a7c:	fa20 fc0c 	lsr.w	ip, r0, ip
   84a80:	bfdc      	itt	le
   84a82:	ea41 010c 	orrle.w	r1, r1, ip
   84a86:	4090      	lslle	r0, r2
   84a88:	1ae4      	subs	r4, r4, r3
   84a8a:	bfa2      	ittt	ge
   84a8c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   84a90:	4329      	orrge	r1, r5
   84a92:	bd30      	popge	{r4, r5, pc}
   84a94:	ea6f 0404 	mvn.w	r4, r4
   84a98:	3c1f      	subs	r4, #31
   84a9a:	da1c      	bge.n	84ad6 <__adddf3+0x1d2>
   84a9c:	340c      	adds	r4, #12
   84a9e:	dc0e      	bgt.n	84abe <__adddf3+0x1ba>
   84aa0:	f104 0414 	add.w	r4, r4, #20
   84aa4:	f1c4 0220 	rsb	r2, r4, #32
   84aa8:	fa20 f004 	lsr.w	r0, r0, r4
   84aac:	fa01 f302 	lsl.w	r3, r1, r2
   84ab0:	ea40 0003 	orr.w	r0, r0, r3
   84ab4:	fa21 f304 	lsr.w	r3, r1, r4
   84ab8:	ea45 0103 	orr.w	r1, r5, r3
   84abc:	bd30      	pop	{r4, r5, pc}
   84abe:	f1c4 040c 	rsb	r4, r4, #12
   84ac2:	f1c4 0220 	rsb	r2, r4, #32
   84ac6:	fa20 f002 	lsr.w	r0, r0, r2
   84aca:	fa01 f304 	lsl.w	r3, r1, r4
   84ace:	ea40 0003 	orr.w	r0, r0, r3
   84ad2:	4629      	mov	r1, r5
   84ad4:	bd30      	pop	{r4, r5, pc}
   84ad6:	fa21 f004 	lsr.w	r0, r1, r4
   84ada:	4629      	mov	r1, r5
   84adc:	bd30      	pop	{r4, r5, pc}
   84ade:	f094 0f00 	teq	r4, #0
   84ae2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   84ae6:	bf06      	itte	eq
   84ae8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   84aec:	3401      	addeq	r4, #1
   84aee:	3d01      	subne	r5, #1
   84af0:	e74e      	b.n	84990 <__adddf3+0x8c>
   84af2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84af6:	bf18      	it	ne
   84af8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   84afc:	d029      	beq.n	84b52 <__adddf3+0x24e>
   84afe:	ea94 0f05 	teq	r4, r5
   84b02:	bf08      	it	eq
   84b04:	ea90 0f02 	teqeq	r0, r2
   84b08:	d005      	beq.n	84b16 <__adddf3+0x212>
   84b0a:	ea54 0c00 	orrs.w	ip, r4, r0
   84b0e:	bf04      	itt	eq
   84b10:	4619      	moveq	r1, r3
   84b12:	4610      	moveq	r0, r2
   84b14:	bd30      	pop	{r4, r5, pc}
   84b16:	ea91 0f03 	teq	r1, r3
   84b1a:	bf1e      	ittt	ne
   84b1c:	2100      	movne	r1, #0
   84b1e:	2000      	movne	r0, #0
   84b20:	bd30      	popne	{r4, r5, pc}
   84b22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   84b26:	d105      	bne.n	84b34 <__adddf3+0x230>
   84b28:	0040      	lsls	r0, r0, #1
   84b2a:	4149      	adcs	r1, r1
   84b2c:	bf28      	it	cs
   84b2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   84b32:	bd30      	pop	{r4, r5, pc}
   84b34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   84b38:	bf3c      	itt	cc
   84b3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   84b3e:	bd30      	popcc	{r4, r5, pc}
   84b40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84b44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   84b48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84b4c:	f04f 0000 	mov.w	r0, #0
   84b50:	bd30      	pop	{r4, r5, pc}
   84b52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84b56:	bf1a      	itte	ne
   84b58:	4619      	movne	r1, r3
   84b5a:	4610      	movne	r0, r2
   84b5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   84b60:	bf1c      	itt	ne
   84b62:	460b      	movne	r3, r1
   84b64:	4602      	movne	r2, r0
   84b66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   84b6a:	bf06      	itte	eq
   84b6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   84b70:	ea91 0f03 	teqeq	r1, r3
   84b74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   84b78:	bd30      	pop	{r4, r5, pc}
   84b7a:	bf00      	nop

00084b7c <__aeabi_ui2d>:
   84b7c:	f090 0f00 	teq	r0, #0
   84b80:	bf04      	itt	eq
   84b82:	2100      	moveq	r1, #0
   84b84:	4770      	bxeq	lr
   84b86:	b530      	push	{r4, r5, lr}
   84b88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84b8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84b90:	f04f 0500 	mov.w	r5, #0
   84b94:	f04f 0100 	mov.w	r1, #0
   84b98:	e750      	b.n	84a3c <__adddf3+0x138>
   84b9a:	bf00      	nop

00084b9c <__aeabi_i2d>:
   84b9c:	f090 0f00 	teq	r0, #0
   84ba0:	bf04      	itt	eq
   84ba2:	2100      	moveq	r1, #0
   84ba4:	4770      	bxeq	lr
   84ba6:	b530      	push	{r4, r5, lr}
   84ba8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84bac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84bb0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   84bb4:	bf48      	it	mi
   84bb6:	4240      	negmi	r0, r0
   84bb8:	f04f 0100 	mov.w	r1, #0
   84bbc:	e73e      	b.n	84a3c <__adddf3+0x138>
   84bbe:	bf00      	nop

00084bc0 <__aeabi_f2d>:
   84bc0:	0042      	lsls	r2, r0, #1
   84bc2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   84bc6:	ea4f 0131 	mov.w	r1, r1, rrx
   84bca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   84bce:	bf1f      	itttt	ne
   84bd0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   84bd4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84bd8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   84bdc:	4770      	bxne	lr
   84bde:	f092 0f00 	teq	r2, #0
   84be2:	bf14      	ite	ne
   84be4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84be8:	4770      	bxeq	lr
   84bea:	b530      	push	{r4, r5, lr}
   84bec:	f44f 7460 	mov.w	r4, #896	; 0x380
   84bf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84bf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84bf8:	e720      	b.n	84a3c <__adddf3+0x138>
   84bfa:	bf00      	nop

00084bfc <__aeabi_ul2d>:
   84bfc:	ea50 0201 	orrs.w	r2, r0, r1
   84c00:	bf08      	it	eq
   84c02:	4770      	bxeq	lr
   84c04:	b530      	push	{r4, r5, lr}
   84c06:	f04f 0500 	mov.w	r5, #0
   84c0a:	e00a      	b.n	84c22 <__aeabi_l2d+0x16>

00084c0c <__aeabi_l2d>:
   84c0c:	ea50 0201 	orrs.w	r2, r0, r1
   84c10:	bf08      	it	eq
   84c12:	4770      	bxeq	lr
   84c14:	b530      	push	{r4, r5, lr}
   84c16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   84c1a:	d502      	bpl.n	84c22 <__aeabi_l2d+0x16>
   84c1c:	4240      	negs	r0, r0
   84c1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84c22:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84c26:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84c2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   84c2e:	f43f aedc 	beq.w	849ea <__adddf3+0xe6>
   84c32:	f04f 0203 	mov.w	r2, #3
   84c36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84c3a:	bf18      	it	ne
   84c3c:	3203      	addne	r2, #3
   84c3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84c42:	bf18      	it	ne
   84c44:	3203      	addne	r2, #3
   84c46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   84c4a:	f1c2 0320 	rsb	r3, r2, #32
   84c4e:	fa00 fc03 	lsl.w	ip, r0, r3
   84c52:	fa20 f002 	lsr.w	r0, r0, r2
   84c56:	fa01 fe03 	lsl.w	lr, r1, r3
   84c5a:	ea40 000e 	orr.w	r0, r0, lr
   84c5e:	fa21 f102 	lsr.w	r1, r1, r2
   84c62:	4414      	add	r4, r2
   84c64:	e6c1      	b.n	849ea <__adddf3+0xe6>
   84c66:	bf00      	nop

00084c68 <__aeabi_dmul>:
   84c68:	b570      	push	{r4, r5, r6, lr}
   84c6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84c6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   84c72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   84c76:	bf1d      	ittte	ne
   84c78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84c7c:	ea94 0f0c 	teqne	r4, ip
   84c80:	ea95 0f0c 	teqne	r5, ip
   84c84:	f000 f8de 	bleq	84e44 <__aeabi_dmul+0x1dc>
   84c88:	442c      	add	r4, r5
   84c8a:	ea81 0603 	eor.w	r6, r1, r3
   84c8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   84c92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   84c96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   84c9a:	bf18      	it	ne
   84c9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   84ca0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   84ca8:	d038      	beq.n	84d1c <__aeabi_dmul+0xb4>
   84caa:	fba0 ce02 	umull	ip, lr, r0, r2
   84cae:	f04f 0500 	mov.w	r5, #0
   84cb2:	fbe1 e502 	umlal	lr, r5, r1, r2
   84cb6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   84cba:	fbe0 e503 	umlal	lr, r5, r0, r3
   84cbe:	f04f 0600 	mov.w	r6, #0
   84cc2:	fbe1 5603 	umlal	r5, r6, r1, r3
   84cc6:	f09c 0f00 	teq	ip, #0
   84cca:	bf18      	it	ne
   84ccc:	f04e 0e01 	orrne.w	lr, lr, #1
   84cd0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   84cd4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   84cd8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   84cdc:	d204      	bcs.n	84ce8 <__aeabi_dmul+0x80>
   84cde:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   84ce2:	416d      	adcs	r5, r5
   84ce4:	eb46 0606 	adc.w	r6, r6, r6
   84ce8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   84cec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   84cf0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   84cf4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   84cf8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   84cfc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84d00:	bf88      	it	hi
   84d02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   84d06:	d81e      	bhi.n	84d46 <__aeabi_dmul+0xde>
   84d08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   84d0c:	bf08      	it	eq
   84d0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   84d12:	f150 0000 	adcs.w	r0, r0, #0
   84d16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84d1a:	bd70      	pop	{r4, r5, r6, pc}
   84d1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   84d20:	ea46 0101 	orr.w	r1, r6, r1
   84d24:	ea40 0002 	orr.w	r0, r0, r2
   84d28:	ea81 0103 	eor.w	r1, r1, r3
   84d2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   84d30:	bfc2      	ittt	gt
   84d32:	ebd4 050c 	rsbsgt	r5, r4, ip
   84d36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84d3a:	bd70      	popgt	{r4, r5, r6, pc}
   84d3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84d40:	f04f 0e00 	mov.w	lr, #0
   84d44:	3c01      	subs	r4, #1
   84d46:	f300 80ab 	bgt.w	84ea0 <__aeabi_dmul+0x238>
   84d4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   84d4e:	bfde      	ittt	le
   84d50:	2000      	movle	r0, #0
   84d52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   84d56:	bd70      	pople	{r4, r5, r6, pc}
   84d58:	f1c4 0400 	rsb	r4, r4, #0
   84d5c:	3c20      	subs	r4, #32
   84d5e:	da35      	bge.n	84dcc <__aeabi_dmul+0x164>
   84d60:	340c      	adds	r4, #12
   84d62:	dc1b      	bgt.n	84d9c <__aeabi_dmul+0x134>
   84d64:	f104 0414 	add.w	r4, r4, #20
   84d68:	f1c4 0520 	rsb	r5, r4, #32
   84d6c:	fa00 f305 	lsl.w	r3, r0, r5
   84d70:	fa20 f004 	lsr.w	r0, r0, r4
   84d74:	fa01 f205 	lsl.w	r2, r1, r5
   84d78:	ea40 0002 	orr.w	r0, r0, r2
   84d7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   84d80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84d84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84d88:	fa21 f604 	lsr.w	r6, r1, r4
   84d8c:	eb42 0106 	adc.w	r1, r2, r6
   84d90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84d94:	bf08      	it	eq
   84d96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84d9a:	bd70      	pop	{r4, r5, r6, pc}
   84d9c:	f1c4 040c 	rsb	r4, r4, #12
   84da0:	f1c4 0520 	rsb	r5, r4, #32
   84da4:	fa00 f304 	lsl.w	r3, r0, r4
   84da8:	fa20 f005 	lsr.w	r0, r0, r5
   84dac:	fa01 f204 	lsl.w	r2, r1, r4
   84db0:	ea40 0002 	orr.w	r0, r0, r2
   84db4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84db8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84dbc:	f141 0100 	adc.w	r1, r1, #0
   84dc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84dc4:	bf08      	it	eq
   84dc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84dca:	bd70      	pop	{r4, r5, r6, pc}
   84dcc:	f1c4 0520 	rsb	r5, r4, #32
   84dd0:	fa00 f205 	lsl.w	r2, r0, r5
   84dd4:	ea4e 0e02 	orr.w	lr, lr, r2
   84dd8:	fa20 f304 	lsr.w	r3, r0, r4
   84ddc:	fa01 f205 	lsl.w	r2, r1, r5
   84de0:	ea43 0302 	orr.w	r3, r3, r2
   84de4:	fa21 f004 	lsr.w	r0, r1, r4
   84de8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84dec:	fa21 f204 	lsr.w	r2, r1, r4
   84df0:	ea20 0002 	bic.w	r0, r0, r2
   84df4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   84df8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84dfc:	bf08      	it	eq
   84dfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84e02:	bd70      	pop	{r4, r5, r6, pc}
   84e04:	f094 0f00 	teq	r4, #0
   84e08:	d10f      	bne.n	84e2a <__aeabi_dmul+0x1c2>
   84e0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   84e0e:	0040      	lsls	r0, r0, #1
   84e10:	eb41 0101 	adc.w	r1, r1, r1
   84e14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84e18:	bf08      	it	eq
   84e1a:	3c01      	subeq	r4, #1
   84e1c:	d0f7      	beq.n	84e0e <__aeabi_dmul+0x1a6>
   84e1e:	ea41 0106 	orr.w	r1, r1, r6
   84e22:	f095 0f00 	teq	r5, #0
   84e26:	bf18      	it	ne
   84e28:	4770      	bxne	lr
   84e2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   84e2e:	0052      	lsls	r2, r2, #1
   84e30:	eb43 0303 	adc.w	r3, r3, r3
   84e34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   84e38:	bf08      	it	eq
   84e3a:	3d01      	subeq	r5, #1
   84e3c:	d0f7      	beq.n	84e2e <__aeabi_dmul+0x1c6>
   84e3e:	ea43 0306 	orr.w	r3, r3, r6
   84e42:	4770      	bx	lr
   84e44:	ea94 0f0c 	teq	r4, ip
   84e48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84e4c:	bf18      	it	ne
   84e4e:	ea95 0f0c 	teqne	r5, ip
   84e52:	d00c      	beq.n	84e6e <__aeabi_dmul+0x206>
   84e54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84e58:	bf18      	it	ne
   84e5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84e5e:	d1d1      	bne.n	84e04 <__aeabi_dmul+0x19c>
   84e60:	ea81 0103 	eor.w	r1, r1, r3
   84e64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84e68:	f04f 0000 	mov.w	r0, #0
   84e6c:	bd70      	pop	{r4, r5, r6, pc}
   84e6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84e72:	bf06      	itte	eq
   84e74:	4610      	moveq	r0, r2
   84e76:	4619      	moveq	r1, r3
   84e78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84e7c:	d019      	beq.n	84eb2 <__aeabi_dmul+0x24a>
   84e7e:	ea94 0f0c 	teq	r4, ip
   84e82:	d102      	bne.n	84e8a <__aeabi_dmul+0x222>
   84e84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   84e88:	d113      	bne.n	84eb2 <__aeabi_dmul+0x24a>
   84e8a:	ea95 0f0c 	teq	r5, ip
   84e8e:	d105      	bne.n	84e9c <__aeabi_dmul+0x234>
   84e90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   84e94:	bf1c      	itt	ne
   84e96:	4610      	movne	r0, r2
   84e98:	4619      	movne	r1, r3
   84e9a:	d10a      	bne.n	84eb2 <__aeabi_dmul+0x24a>
   84e9c:	ea81 0103 	eor.w	r1, r1, r3
   84ea0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84ea4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   84ea8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84eac:	f04f 0000 	mov.w	r0, #0
   84eb0:	bd70      	pop	{r4, r5, r6, pc}
   84eb2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   84eb6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   84eba:	bd70      	pop	{r4, r5, r6, pc}

00084ebc <__aeabi_ddiv>:
   84ebc:	b570      	push	{r4, r5, r6, lr}
   84ebe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84ec2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   84ec6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   84eca:	bf1d      	ittte	ne
   84ecc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84ed0:	ea94 0f0c 	teqne	r4, ip
   84ed4:	ea95 0f0c 	teqne	r5, ip
   84ed8:	f000 f8a7 	bleq	8502a <__aeabi_ddiv+0x16e>
   84edc:	eba4 0405 	sub.w	r4, r4, r5
   84ee0:	ea81 0e03 	eor.w	lr, r1, r3
   84ee4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84ee8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84eec:	f000 8088 	beq.w	85000 <__aeabi_ddiv+0x144>
   84ef0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   84ef4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   84ef8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   84efc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   84f00:	ea4f 2202 	mov.w	r2, r2, lsl #8
   84f04:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   84f08:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   84f0c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   84f10:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   84f14:	429d      	cmp	r5, r3
   84f16:	bf08      	it	eq
   84f18:	4296      	cmpeq	r6, r2
   84f1a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   84f1e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   84f22:	d202      	bcs.n	84f2a <__aeabi_ddiv+0x6e>
   84f24:	085b      	lsrs	r3, r3, #1
   84f26:	ea4f 0232 	mov.w	r2, r2, rrx
   84f2a:	1ab6      	subs	r6, r6, r2
   84f2c:	eb65 0503 	sbc.w	r5, r5, r3
   84f30:	085b      	lsrs	r3, r3, #1
   84f32:	ea4f 0232 	mov.w	r2, r2, rrx
   84f36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   84f3a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   84f3e:	ebb6 0e02 	subs.w	lr, r6, r2
   84f42:	eb75 0e03 	sbcs.w	lr, r5, r3
   84f46:	bf22      	ittt	cs
   84f48:	1ab6      	subcs	r6, r6, r2
   84f4a:	4675      	movcs	r5, lr
   84f4c:	ea40 000c 	orrcs.w	r0, r0, ip
   84f50:	085b      	lsrs	r3, r3, #1
   84f52:	ea4f 0232 	mov.w	r2, r2, rrx
   84f56:	ebb6 0e02 	subs.w	lr, r6, r2
   84f5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   84f5e:	bf22      	ittt	cs
   84f60:	1ab6      	subcs	r6, r6, r2
   84f62:	4675      	movcs	r5, lr
   84f64:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   84f68:	085b      	lsrs	r3, r3, #1
   84f6a:	ea4f 0232 	mov.w	r2, r2, rrx
   84f6e:	ebb6 0e02 	subs.w	lr, r6, r2
   84f72:	eb75 0e03 	sbcs.w	lr, r5, r3
   84f76:	bf22      	ittt	cs
   84f78:	1ab6      	subcs	r6, r6, r2
   84f7a:	4675      	movcs	r5, lr
   84f7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   84f80:	085b      	lsrs	r3, r3, #1
   84f82:	ea4f 0232 	mov.w	r2, r2, rrx
   84f86:	ebb6 0e02 	subs.w	lr, r6, r2
   84f8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   84f8e:	bf22      	ittt	cs
   84f90:	1ab6      	subcs	r6, r6, r2
   84f92:	4675      	movcs	r5, lr
   84f94:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   84f98:	ea55 0e06 	orrs.w	lr, r5, r6
   84f9c:	d018      	beq.n	84fd0 <__aeabi_ddiv+0x114>
   84f9e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   84fa2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   84fa6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   84faa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   84fae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   84fb2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   84fb6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   84fba:	d1c0      	bne.n	84f3e <__aeabi_ddiv+0x82>
   84fbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84fc0:	d10b      	bne.n	84fda <__aeabi_ddiv+0x11e>
   84fc2:	ea41 0100 	orr.w	r1, r1, r0
   84fc6:	f04f 0000 	mov.w	r0, #0
   84fca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   84fce:	e7b6      	b.n	84f3e <__aeabi_ddiv+0x82>
   84fd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84fd4:	bf04      	itt	eq
   84fd6:	4301      	orreq	r1, r0
   84fd8:	2000      	moveq	r0, #0
   84fda:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84fde:	bf88      	it	hi
   84fe0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   84fe4:	f63f aeaf 	bhi.w	84d46 <__aeabi_dmul+0xde>
   84fe8:	ebb5 0c03 	subs.w	ip, r5, r3
   84fec:	bf04      	itt	eq
   84fee:	ebb6 0c02 	subseq.w	ip, r6, r2
   84ff2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   84ff6:	f150 0000 	adcs.w	r0, r0, #0
   84ffa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84ffe:	bd70      	pop	{r4, r5, r6, pc}
   85000:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   85004:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   85008:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8500c:	bfc2      	ittt	gt
   8500e:	ebd4 050c 	rsbsgt	r5, r4, ip
   85012:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   85016:	bd70      	popgt	{r4, r5, r6, pc}
   85018:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8501c:	f04f 0e00 	mov.w	lr, #0
   85020:	3c01      	subs	r4, #1
   85022:	e690      	b.n	84d46 <__aeabi_dmul+0xde>
   85024:	ea45 0e06 	orr.w	lr, r5, r6
   85028:	e68d      	b.n	84d46 <__aeabi_dmul+0xde>
   8502a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8502e:	ea94 0f0c 	teq	r4, ip
   85032:	bf08      	it	eq
   85034:	ea95 0f0c 	teqeq	r5, ip
   85038:	f43f af3b 	beq.w	84eb2 <__aeabi_dmul+0x24a>
   8503c:	ea94 0f0c 	teq	r4, ip
   85040:	d10a      	bne.n	85058 <__aeabi_ddiv+0x19c>
   85042:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   85046:	f47f af34 	bne.w	84eb2 <__aeabi_dmul+0x24a>
   8504a:	ea95 0f0c 	teq	r5, ip
   8504e:	f47f af25 	bne.w	84e9c <__aeabi_dmul+0x234>
   85052:	4610      	mov	r0, r2
   85054:	4619      	mov	r1, r3
   85056:	e72c      	b.n	84eb2 <__aeabi_dmul+0x24a>
   85058:	ea95 0f0c 	teq	r5, ip
   8505c:	d106      	bne.n	8506c <__aeabi_ddiv+0x1b0>
   8505e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   85062:	f43f aefd 	beq.w	84e60 <__aeabi_dmul+0x1f8>
   85066:	4610      	mov	r0, r2
   85068:	4619      	mov	r1, r3
   8506a:	e722      	b.n	84eb2 <__aeabi_dmul+0x24a>
   8506c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   85070:	bf18      	it	ne
   85072:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   85076:	f47f aec5 	bne.w	84e04 <__aeabi_dmul+0x19c>
   8507a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8507e:	f47f af0d 	bne.w	84e9c <__aeabi_dmul+0x234>
   85082:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   85086:	f47f aeeb 	bne.w	84e60 <__aeabi_dmul+0x1f8>
   8508a:	e712      	b.n	84eb2 <__aeabi_dmul+0x24a>

0008508c <__aeabi_frsub>:
   8508c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   85090:	e002      	b.n	85098 <__addsf3>
   85092:	bf00      	nop

00085094 <__aeabi_fsub>:
   85094:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00085098 <__addsf3>:
   85098:	0042      	lsls	r2, r0, #1
   8509a:	bf1f      	itttt	ne
   8509c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   850a0:	ea92 0f03 	teqne	r2, r3
   850a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   850a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   850ac:	d06a      	beq.n	85184 <__addsf3+0xec>
   850ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
   850b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   850b6:	bfc1      	itttt	gt
   850b8:	18d2      	addgt	r2, r2, r3
   850ba:	4041      	eorgt	r1, r0
   850bc:	4048      	eorgt	r0, r1
   850be:	4041      	eorgt	r1, r0
   850c0:	bfb8      	it	lt
   850c2:	425b      	neglt	r3, r3
   850c4:	2b19      	cmp	r3, #25
   850c6:	bf88      	it	hi
   850c8:	4770      	bxhi	lr
   850ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   850ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   850d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   850d6:	bf18      	it	ne
   850d8:	4240      	negne	r0, r0
   850da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   850de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   850e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   850e6:	bf18      	it	ne
   850e8:	4249      	negne	r1, r1
   850ea:	ea92 0f03 	teq	r2, r3
   850ee:	d03f      	beq.n	85170 <__addsf3+0xd8>
   850f0:	f1a2 0201 	sub.w	r2, r2, #1
   850f4:	fa41 fc03 	asr.w	ip, r1, r3
   850f8:	eb10 000c 	adds.w	r0, r0, ip
   850fc:	f1c3 0320 	rsb	r3, r3, #32
   85100:	fa01 f103 	lsl.w	r1, r1, r3
   85104:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   85108:	d502      	bpl.n	85110 <__addsf3+0x78>
   8510a:	4249      	negs	r1, r1
   8510c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   85110:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   85114:	d313      	bcc.n	8513e <__addsf3+0xa6>
   85116:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8511a:	d306      	bcc.n	8512a <__addsf3+0x92>
   8511c:	0840      	lsrs	r0, r0, #1
   8511e:	ea4f 0131 	mov.w	r1, r1, rrx
   85122:	f102 0201 	add.w	r2, r2, #1
   85126:	2afe      	cmp	r2, #254	; 0xfe
   85128:	d251      	bcs.n	851ce <__addsf3+0x136>
   8512a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8512e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85132:	bf08      	it	eq
   85134:	f020 0001 	biceq.w	r0, r0, #1
   85138:	ea40 0003 	orr.w	r0, r0, r3
   8513c:	4770      	bx	lr
   8513e:	0049      	lsls	r1, r1, #1
   85140:	eb40 0000 	adc.w	r0, r0, r0
   85144:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   85148:	f1a2 0201 	sub.w	r2, r2, #1
   8514c:	d1ed      	bne.n	8512a <__addsf3+0x92>
   8514e:	fab0 fc80 	clz	ip, r0
   85152:	f1ac 0c08 	sub.w	ip, ip, #8
   85156:	ebb2 020c 	subs.w	r2, r2, ip
   8515a:	fa00 f00c 	lsl.w	r0, r0, ip
   8515e:	bfaa      	itet	ge
   85160:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   85164:	4252      	neglt	r2, r2
   85166:	4318      	orrge	r0, r3
   85168:	bfbc      	itt	lt
   8516a:	40d0      	lsrlt	r0, r2
   8516c:	4318      	orrlt	r0, r3
   8516e:	4770      	bx	lr
   85170:	f092 0f00 	teq	r2, #0
   85174:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   85178:	bf06      	itte	eq
   8517a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8517e:	3201      	addeq	r2, #1
   85180:	3b01      	subne	r3, #1
   85182:	e7b5      	b.n	850f0 <__addsf3+0x58>
   85184:	ea4f 0341 	mov.w	r3, r1, lsl #1
   85188:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   8518c:	bf18      	it	ne
   8518e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   85192:	d021      	beq.n	851d8 <__addsf3+0x140>
   85194:	ea92 0f03 	teq	r2, r3
   85198:	d004      	beq.n	851a4 <__addsf3+0x10c>
   8519a:	f092 0f00 	teq	r2, #0
   8519e:	bf08      	it	eq
   851a0:	4608      	moveq	r0, r1
   851a2:	4770      	bx	lr
   851a4:	ea90 0f01 	teq	r0, r1
   851a8:	bf1c      	itt	ne
   851aa:	2000      	movne	r0, #0
   851ac:	4770      	bxne	lr
   851ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   851b2:	d104      	bne.n	851be <__addsf3+0x126>
   851b4:	0040      	lsls	r0, r0, #1
   851b6:	bf28      	it	cs
   851b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   851bc:	4770      	bx	lr
   851be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   851c2:	bf3c      	itt	cc
   851c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   851c8:	4770      	bxcc	lr
   851ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   851ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   851d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   851d6:	4770      	bx	lr
   851d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   851dc:	bf16      	itet	ne
   851de:	4608      	movne	r0, r1
   851e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   851e4:	4601      	movne	r1, r0
   851e6:	0242      	lsls	r2, r0, #9
   851e8:	bf06      	itte	eq
   851ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   851ee:	ea90 0f01 	teqeq	r0, r1
   851f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   851f6:	4770      	bx	lr

000851f8 <__aeabi_ui2f>:
   851f8:	f04f 0300 	mov.w	r3, #0
   851fc:	e004      	b.n	85208 <__aeabi_i2f+0x8>
   851fe:	bf00      	nop

00085200 <__aeabi_i2f>:
   85200:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   85204:	bf48      	it	mi
   85206:	4240      	negmi	r0, r0
   85208:	ea5f 0c00 	movs.w	ip, r0
   8520c:	bf08      	it	eq
   8520e:	4770      	bxeq	lr
   85210:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   85214:	4601      	mov	r1, r0
   85216:	f04f 0000 	mov.w	r0, #0
   8521a:	e01c      	b.n	85256 <__aeabi_l2f+0x2a>

0008521c <__aeabi_ul2f>:
   8521c:	ea50 0201 	orrs.w	r2, r0, r1
   85220:	bf08      	it	eq
   85222:	4770      	bxeq	lr
   85224:	f04f 0300 	mov.w	r3, #0
   85228:	e00a      	b.n	85240 <__aeabi_l2f+0x14>
   8522a:	bf00      	nop

0008522c <__aeabi_l2f>:
   8522c:	ea50 0201 	orrs.w	r2, r0, r1
   85230:	bf08      	it	eq
   85232:	4770      	bxeq	lr
   85234:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   85238:	d502      	bpl.n	85240 <__aeabi_l2f+0x14>
   8523a:	4240      	negs	r0, r0
   8523c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85240:	ea5f 0c01 	movs.w	ip, r1
   85244:	bf02      	ittt	eq
   85246:	4684      	moveq	ip, r0
   85248:	4601      	moveq	r1, r0
   8524a:	2000      	moveq	r0, #0
   8524c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   85250:	bf08      	it	eq
   85252:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   85256:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8525a:	fabc f28c 	clz	r2, ip
   8525e:	3a08      	subs	r2, #8
   85260:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   85264:	db10      	blt.n	85288 <__aeabi_l2f+0x5c>
   85266:	fa01 fc02 	lsl.w	ip, r1, r2
   8526a:	4463      	add	r3, ip
   8526c:	fa00 fc02 	lsl.w	ip, r0, r2
   85270:	f1c2 0220 	rsb	r2, r2, #32
   85274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   85278:	fa20 f202 	lsr.w	r2, r0, r2
   8527c:	eb43 0002 	adc.w	r0, r3, r2
   85280:	bf08      	it	eq
   85282:	f020 0001 	biceq.w	r0, r0, #1
   85286:	4770      	bx	lr
   85288:	f102 0220 	add.w	r2, r2, #32
   8528c:	fa01 fc02 	lsl.w	ip, r1, r2
   85290:	f1c2 0220 	rsb	r2, r2, #32
   85294:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   85298:	fa21 f202 	lsr.w	r2, r1, r2
   8529c:	eb43 0002 	adc.w	r0, r3, r2
   852a0:	bf08      	it	eq
   852a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   852a6:	4770      	bx	lr

000852a8 <__aeabi_fmul>:
   852a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   852ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   852b0:	bf1e      	ittt	ne
   852b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   852b6:	ea92 0f0c 	teqne	r2, ip
   852ba:	ea93 0f0c 	teqne	r3, ip
   852be:	d06f      	beq.n	853a0 <__aeabi_fmul+0xf8>
   852c0:	441a      	add	r2, r3
   852c2:	ea80 0c01 	eor.w	ip, r0, r1
   852c6:	0240      	lsls	r0, r0, #9
   852c8:	bf18      	it	ne
   852ca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   852ce:	d01e      	beq.n	8530e <__aeabi_fmul+0x66>
   852d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   852d4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   852d8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   852dc:	fba0 3101 	umull	r3, r1, r0, r1
   852e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   852e4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   852e8:	bf3e      	ittt	cc
   852ea:	0049      	lslcc	r1, r1, #1
   852ec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   852f0:	005b      	lslcc	r3, r3, #1
   852f2:	ea40 0001 	orr.w	r0, r0, r1
   852f6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   852fa:	2afd      	cmp	r2, #253	; 0xfd
   852fc:	d81d      	bhi.n	8533a <__aeabi_fmul+0x92>
   852fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   85302:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85306:	bf08      	it	eq
   85308:	f020 0001 	biceq.w	r0, r0, #1
   8530c:	4770      	bx	lr
   8530e:	f090 0f00 	teq	r0, #0
   85312:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   85316:	bf08      	it	eq
   85318:	0249      	lsleq	r1, r1, #9
   8531a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8531e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   85322:	3a7f      	subs	r2, #127	; 0x7f
   85324:	bfc2      	ittt	gt
   85326:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8532a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8532e:	4770      	bxgt	lr
   85330:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85334:	f04f 0300 	mov.w	r3, #0
   85338:	3a01      	subs	r2, #1
   8533a:	dc5d      	bgt.n	853f8 <__aeabi_fmul+0x150>
   8533c:	f112 0f19 	cmn.w	r2, #25
   85340:	bfdc      	itt	le
   85342:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   85346:	4770      	bxle	lr
   85348:	f1c2 0200 	rsb	r2, r2, #0
   8534c:	0041      	lsls	r1, r0, #1
   8534e:	fa21 f102 	lsr.w	r1, r1, r2
   85352:	f1c2 0220 	rsb	r2, r2, #32
   85356:	fa00 fc02 	lsl.w	ip, r0, r2
   8535a:	ea5f 0031 	movs.w	r0, r1, rrx
   8535e:	f140 0000 	adc.w	r0, r0, #0
   85362:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   85366:	bf08      	it	eq
   85368:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8536c:	4770      	bx	lr
   8536e:	f092 0f00 	teq	r2, #0
   85372:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   85376:	bf02      	ittt	eq
   85378:	0040      	lsleq	r0, r0, #1
   8537a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8537e:	3a01      	subeq	r2, #1
   85380:	d0f9      	beq.n	85376 <__aeabi_fmul+0xce>
   85382:	ea40 000c 	orr.w	r0, r0, ip
   85386:	f093 0f00 	teq	r3, #0
   8538a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8538e:	bf02      	ittt	eq
   85390:	0049      	lsleq	r1, r1, #1
   85392:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   85396:	3b01      	subeq	r3, #1
   85398:	d0f9      	beq.n	8538e <__aeabi_fmul+0xe6>
   8539a:	ea41 010c 	orr.w	r1, r1, ip
   8539e:	e78f      	b.n	852c0 <__aeabi_fmul+0x18>
   853a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   853a4:	ea92 0f0c 	teq	r2, ip
   853a8:	bf18      	it	ne
   853aa:	ea93 0f0c 	teqne	r3, ip
   853ae:	d00a      	beq.n	853c6 <__aeabi_fmul+0x11e>
   853b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   853b4:	bf18      	it	ne
   853b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   853ba:	d1d8      	bne.n	8536e <__aeabi_fmul+0xc6>
   853bc:	ea80 0001 	eor.w	r0, r0, r1
   853c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   853c4:	4770      	bx	lr
   853c6:	f090 0f00 	teq	r0, #0
   853ca:	bf17      	itett	ne
   853cc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   853d0:	4608      	moveq	r0, r1
   853d2:	f091 0f00 	teqne	r1, #0
   853d6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   853da:	d014      	beq.n	85406 <__aeabi_fmul+0x15e>
   853dc:	ea92 0f0c 	teq	r2, ip
   853e0:	d101      	bne.n	853e6 <__aeabi_fmul+0x13e>
   853e2:	0242      	lsls	r2, r0, #9
   853e4:	d10f      	bne.n	85406 <__aeabi_fmul+0x15e>
   853e6:	ea93 0f0c 	teq	r3, ip
   853ea:	d103      	bne.n	853f4 <__aeabi_fmul+0x14c>
   853ec:	024b      	lsls	r3, r1, #9
   853ee:	bf18      	it	ne
   853f0:	4608      	movne	r0, r1
   853f2:	d108      	bne.n	85406 <__aeabi_fmul+0x15e>
   853f4:	ea80 0001 	eor.w	r0, r0, r1
   853f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   853fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   85400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85404:	4770      	bx	lr
   85406:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8540a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   8540e:	4770      	bx	lr

00085410 <__aeabi_fdiv>:
   85410:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85414:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   85418:	bf1e      	ittt	ne
   8541a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8541e:	ea92 0f0c 	teqne	r2, ip
   85422:	ea93 0f0c 	teqne	r3, ip
   85426:	d069      	beq.n	854fc <__aeabi_fdiv+0xec>
   85428:	eba2 0203 	sub.w	r2, r2, r3
   8542c:	ea80 0c01 	eor.w	ip, r0, r1
   85430:	0249      	lsls	r1, r1, #9
   85432:	ea4f 2040 	mov.w	r0, r0, lsl #9
   85436:	d037      	beq.n	854a8 <__aeabi_fdiv+0x98>
   85438:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8543c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   85440:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   85444:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   85448:	428b      	cmp	r3, r1
   8544a:	bf38      	it	cc
   8544c:	005b      	lslcc	r3, r3, #1
   8544e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   85452:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   85456:	428b      	cmp	r3, r1
   85458:	bf24      	itt	cs
   8545a:	1a5b      	subcs	r3, r3, r1
   8545c:	ea40 000c 	orrcs.w	r0, r0, ip
   85460:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   85464:	bf24      	itt	cs
   85466:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   8546a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8546e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   85472:	bf24      	itt	cs
   85474:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   85478:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8547c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   85480:	bf24      	itt	cs
   85482:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   85486:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8548a:	011b      	lsls	r3, r3, #4
   8548c:	bf18      	it	ne
   8548e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   85492:	d1e0      	bne.n	85456 <__aeabi_fdiv+0x46>
   85494:	2afd      	cmp	r2, #253	; 0xfd
   85496:	f63f af50 	bhi.w	8533a <__aeabi_fmul+0x92>
   8549a:	428b      	cmp	r3, r1
   8549c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   854a0:	bf08      	it	eq
   854a2:	f020 0001 	biceq.w	r0, r0, #1
   854a6:	4770      	bx	lr
   854a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   854ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   854b0:	327f      	adds	r2, #127	; 0x7f
   854b2:	bfc2      	ittt	gt
   854b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   854b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   854bc:	4770      	bxgt	lr
   854be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   854c2:	f04f 0300 	mov.w	r3, #0
   854c6:	3a01      	subs	r2, #1
   854c8:	e737      	b.n	8533a <__aeabi_fmul+0x92>
   854ca:	f092 0f00 	teq	r2, #0
   854ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   854d2:	bf02      	ittt	eq
   854d4:	0040      	lsleq	r0, r0, #1
   854d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   854da:	3a01      	subeq	r2, #1
   854dc:	d0f9      	beq.n	854d2 <__aeabi_fdiv+0xc2>
   854de:	ea40 000c 	orr.w	r0, r0, ip
   854e2:	f093 0f00 	teq	r3, #0
   854e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   854ea:	bf02      	ittt	eq
   854ec:	0049      	lsleq	r1, r1, #1
   854ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   854f2:	3b01      	subeq	r3, #1
   854f4:	d0f9      	beq.n	854ea <__aeabi_fdiv+0xda>
   854f6:	ea41 010c 	orr.w	r1, r1, ip
   854fa:	e795      	b.n	85428 <__aeabi_fdiv+0x18>
   854fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   85500:	ea92 0f0c 	teq	r2, ip
   85504:	d108      	bne.n	85518 <__aeabi_fdiv+0x108>
   85506:	0242      	lsls	r2, r0, #9
   85508:	f47f af7d 	bne.w	85406 <__aeabi_fmul+0x15e>
   8550c:	ea93 0f0c 	teq	r3, ip
   85510:	f47f af70 	bne.w	853f4 <__aeabi_fmul+0x14c>
   85514:	4608      	mov	r0, r1
   85516:	e776      	b.n	85406 <__aeabi_fmul+0x15e>
   85518:	ea93 0f0c 	teq	r3, ip
   8551c:	d104      	bne.n	85528 <__aeabi_fdiv+0x118>
   8551e:	024b      	lsls	r3, r1, #9
   85520:	f43f af4c 	beq.w	853bc <__aeabi_fmul+0x114>
   85524:	4608      	mov	r0, r1
   85526:	e76e      	b.n	85406 <__aeabi_fmul+0x15e>
   85528:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8552c:	bf18      	it	ne
   8552e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   85532:	d1ca      	bne.n	854ca <__aeabi_fdiv+0xba>
   85534:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   85538:	f47f af5c 	bne.w	853f4 <__aeabi_fmul+0x14c>
   8553c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   85540:	f47f af3c 	bne.w	853bc <__aeabi_fmul+0x114>
   85544:	e75f      	b.n	85406 <__aeabi_fmul+0x15e>
   85546:	bf00      	nop

00085548 <__gesf2>:
   85548:	f04f 3cff 	mov.w	ip, #4294967295
   8554c:	e006      	b.n	8555c <__cmpsf2+0x4>
   8554e:	bf00      	nop

00085550 <__lesf2>:
   85550:	f04f 0c01 	mov.w	ip, #1
   85554:	e002      	b.n	8555c <__cmpsf2+0x4>
   85556:	bf00      	nop

00085558 <__cmpsf2>:
   85558:	f04f 0c01 	mov.w	ip, #1
   8555c:	f84d cd04 	str.w	ip, [sp, #-4]!
   85560:	ea4f 0240 	mov.w	r2, r0, lsl #1
   85564:	ea4f 0341 	mov.w	r3, r1, lsl #1
   85568:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   8556c:	bf18      	it	ne
   8556e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   85572:	d011      	beq.n	85598 <__cmpsf2+0x40>
   85574:	b001      	add	sp, #4
   85576:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   8557a:	bf18      	it	ne
   8557c:	ea90 0f01 	teqne	r0, r1
   85580:	bf58      	it	pl
   85582:	ebb2 0003 	subspl.w	r0, r2, r3
   85586:	bf88      	it	hi
   85588:	17c8      	asrhi	r0, r1, #31
   8558a:	bf38      	it	cc
   8558c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   85590:	bf18      	it	ne
   85592:	f040 0001 	orrne.w	r0, r0, #1
   85596:	4770      	bx	lr
   85598:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   8559c:	d102      	bne.n	855a4 <__cmpsf2+0x4c>
   8559e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   855a2:	d105      	bne.n	855b0 <__cmpsf2+0x58>
   855a4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   855a8:	d1e4      	bne.n	85574 <__cmpsf2+0x1c>
   855aa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   855ae:	d0e1      	beq.n	85574 <__cmpsf2+0x1c>
   855b0:	f85d 0b04 	ldr.w	r0, [sp], #4
   855b4:	4770      	bx	lr
   855b6:	bf00      	nop

000855b8 <__aeabi_cfrcmple>:
   855b8:	4684      	mov	ip, r0
   855ba:	4608      	mov	r0, r1
   855bc:	4661      	mov	r1, ip
   855be:	e7ff      	b.n	855c0 <__aeabi_cfcmpeq>

000855c0 <__aeabi_cfcmpeq>:
   855c0:	b50f      	push	{r0, r1, r2, r3, lr}
   855c2:	f7ff ffc9 	bl	85558 <__cmpsf2>
   855c6:	2800      	cmp	r0, #0
   855c8:	bf48      	it	mi
   855ca:	f110 0f00 	cmnmi.w	r0, #0
   855ce:	bd0f      	pop	{r0, r1, r2, r3, pc}

000855d0 <__aeabi_fcmpeq>:
   855d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   855d4:	f7ff fff4 	bl	855c0 <__aeabi_cfcmpeq>
   855d8:	bf0c      	ite	eq
   855da:	2001      	moveq	r0, #1
   855dc:	2000      	movne	r0, #0
   855de:	f85d fb08 	ldr.w	pc, [sp], #8
   855e2:	bf00      	nop

000855e4 <__aeabi_fcmplt>:
   855e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   855e8:	f7ff ffea 	bl	855c0 <__aeabi_cfcmpeq>
   855ec:	bf34      	ite	cc
   855ee:	2001      	movcc	r0, #1
   855f0:	2000      	movcs	r0, #0
   855f2:	f85d fb08 	ldr.w	pc, [sp], #8
   855f6:	bf00      	nop

000855f8 <__aeabi_fcmple>:
   855f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   855fc:	f7ff ffe0 	bl	855c0 <__aeabi_cfcmpeq>
   85600:	bf94      	ite	ls
   85602:	2001      	movls	r0, #1
   85604:	2000      	movhi	r0, #0
   85606:	f85d fb08 	ldr.w	pc, [sp], #8
   8560a:	bf00      	nop

0008560c <__aeabi_fcmpge>:
   8560c:	f84d ed08 	str.w	lr, [sp, #-8]!
   85610:	f7ff ffd2 	bl	855b8 <__aeabi_cfrcmple>
   85614:	bf94      	ite	ls
   85616:	2001      	movls	r0, #1
   85618:	2000      	movhi	r0, #0
   8561a:	f85d fb08 	ldr.w	pc, [sp], #8
   8561e:	bf00      	nop

00085620 <__aeabi_fcmpgt>:
   85620:	f84d ed08 	str.w	lr, [sp, #-8]!
   85624:	f7ff ffc8 	bl	855b8 <__aeabi_cfrcmple>
   85628:	bf34      	ite	cc
   8562a:	2001      	movcc	r0, #1
   8562c:	2000      	movcs	r0, #0
   8562e:	f85d fb08 	ldr.w	pc, [sp], #8
   85632:	bf00      	nop

00085634 <__aeabi_f2iz>:
   85634:	ea4f 0240 	mov.w	r2, r0, lsl #1
   85638:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   8563c:	d30f      	bcc.n	8565e <__aeabi_f2iz+0x2a>
   8563e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   85642:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   85646:	d90d      	bls.n	85664 <__aeabi_f2iz+0x30>
   85648:	ea4f 2300 	mov.w	r3, r0, lsl #8
   8564c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   85650:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   85654:	fa23 f002 	lsr.w	r0, r3, r2
   85658:	bf18      	it	ne
   8565a:	4240      	negne	r0, r0
   8565c:	4770      	bx	lr
   8565e:	f04f 0000 	mov.w	r0, #0
   85662:	4770      	bx	lr
   85664:	f112 0f61 	cmn.w	r2, #97	; 0x61
   85668:	d101      	bne.n	8566e <__aeabi_f2iz+0x3a>
   8566a:	0242      	lsls	r2, r0, #9
   8566c:	d105      	bne.n	8567a <__aeabi_f2iz+0x46>
   8566e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   85672:	bf08      	it	eq
   85674:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   85678:	4770      	bx	lr
   8567a:	f04f 0000 	mov.w	r0, #0
   8567e:	4770      	bx	lr

00085680 <__libc_init_array>:
   85680:	b570      	push	{r4, r5, r6, lr}
   85682:	4e0f      	ldr	r6, [pc, #60]	; (856c0 <__libc_init_array+0x40>)
   85684:	4d0f      	ldr	r5, [pc, #60]	; (856c4 <__libc_init_array+0x44>)
   85686:	1b76      	subs	r6, r6, r5
   85688:	10b6      	asrs	r6, r6, #2
   8568a:	bf18      	it	ne
   8568c:	2400      	movne	r4, #0
   8568e:	d005      	beq.n	8569c <__libc_init_array+0x1c>
   85690:	3401      	adds	r4, #1
   85692:	f855 3b04 	ldr.w	r3, [r5], #4
   85696:	4798      	blx	r3
   85698:	42a6      	cmp	r6, r4
   8569a:	d1f9      	bne.n	85690 <__libc_init_array+0x10>
   8569c:	4e0a      	ldr	r6, [pc, #40]	; (856c8 <__libc_init_array+0x48>)
   8569e:	4d0b      	ldr	r5, [pc, #44]	; (856cc <__libc_init_array+0x4c>)
   856a0:	f004 fa96 	bl	89bd0 <_init>
   856a4:	1b76      	subs	r6, r6, r5
   856a6:	10b6      	asrs	r6, r6, #2
   856a8:	bf18      	it	ne
   856aa:	2400      	movne	r4, #0
   856ac:	d006      	beq.n	856bc <__libc_init_array+0x3c>
   856ae:	3401      	adds	r4, #1
   856b0:	f855 3b04 	ldr.w	r3, [r5], #4
   856b4:	4798      	blx	r3
   856b6:	42a6      	cmp	r6, r4
   856b8:	d1f9      	bne.n	856ae <__libc_init_array+0x2e>
   856ba:	bd70      	pop	{r4, r5, r6, pc}
   856bc:	bd70      	pop	{r4, r5, r6, pc}
   856be:	bf00      	nop
   856c0:	00089bdc 	.word	0x00089bdc
   856c4:	00089bdc 	.word	0x00089bdc
   856c8:	00089be4 	.word	0x00089be4
   856cc:	00089bdc 	.word	0x00089bdc

000856d0 <memcpy>:
   856d0:	4684      	mov	ip, r0
   856d2:	ea41 0300 	orr.w	r3, r1, r0
   856d6:	f013 0303 	ands.w	r3, r3, #3
   856da:	d149      	bne.n	85770 <memcpy+0xa0>
   856dc:	3a40      	subs	r2, #64	; 0x40
   856de:	d323      	bcc.n	85728 <memcpy+0x58>
   856e0:	680b      	ldr	r3, [r1, #0]
   856e2:	6003      	str	r3, [r0, #0]
   856e4:	684b      	ldr	r3, [r1, #4]
   856e6:	6043      	str	r3, [r0, #4]
   856e8:	688b      	ldr	r3, [r1, #8]
   856ea:	6083      	str	r3, [r0, #8]
   856ec:	68cb      	ldr	r3, [r1, #12]
   856ee:	60c3      	str	r3, [r0, #12]
   856f0:	690b      	ldr	r3, [r1, #16]
   856f2:	6103      	str	r3, [r0, #16]
   856f4:	694b      	ldr	r3, [r1, #20]
   856f6:	6143      	str	r3, [r0, #20]
   856f8:	698b      	ldr	r3, [r1, #24]
   856fa:	6183      	str	r3, [r0, #24]
   856fc:	69cb      	ldr	r3, [r1, #28]
   856fe:	61c3      	str	r3, [r0, #28]
   85700:	6a0b      	ldr	r3, [r1, #32]
   85702:	6203      	str	r3, [r0, #32]
   85704:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85706:	6243      	str	r3, [r0, #36]	; 0x24
   85708:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8570a:	6283      	str	r3, [r0, #40]	; 0x28
   8570c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8570e:	62c3      	str	r3, [r0, #44]	; 0x2c
   85710:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85712:	6303      	str	r3, [r0, #48]	; 0x30
   85714:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85716:	6343      	str	r3, [r0, #52]	; 0x34
   85718:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8571a:	6383      	str	r3, [r0, #56]	; 0x38
   8571c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8571e:	63c3      	str	r3, [r0, #60]	; 0x3c
   85720:	3040      	adds	r0, #64	; 0x40
   85722:	3140      	adds	r1, #64	; 0x40
   85724:	3a40      	subs	r2, #64	; 0x40
   85726:	d2db      	bcs.n	856e0 <memcpy+0x10>
   85728:	3230      	adds	r2, #48	; 0x30
   8572a:	d30b      	bcc.n	85744 <memcpy+0x74>
   8572c:	680b      	ldr	r3, [r1, #0]
   8572e:	6003      	str	r3, [r0, #0]
   85730:	684b      	ldr	r3, [r1, #4]
   85732:	6043      	str	r3, [r0, #4]
   85734:	688b      	ldr	r3, [r1, #8]
   85736:	6083      	str	r3, [r0, #8]
   85738:	68cb      	ldr	r3, [r1, #12]
   8573a:	60c3      	str	r3, [r0, #12]
   8573c:	3010      	adds	r0, #16
   8573e:	3110      	adds	r1, #16
   85740:	3a10      	subs	r2, #16
   85742:	d2f3      	bcs.n	8572c <memcpy+0x5c>
   85744:	320c      	adds	r2, #12
   85746:	d305      	bcc.n	85754 <memcpy+0x84>
   85748:	f851 3b04 	ldr.w	r3, [r1], #4
   8574c:	f840 3b04 	str.w	r3, [r0], #4
   85750:	3a04      	subs	r2, #4
   85752:	d2f9      	bcs.n	85748 <memcpy+0x78>
   85754:	3204      	adds	r2, #4
   85756:	d008      	beq.n	8576a <memcpy+0x9a>
   85758:	07d2      	lsls	r2, r2, #31
   8575a:	bf1c      	itt	ne
   8575c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85760:	f800 3b01 	strbne.w	r3, [r0], #1
   85764:	d301      	bcc.n	8576a <memcpy+0x9a>
   85766:	880b      	ldrh	r3, [r1, #0]
   85768:	8003      	strh	r3, [r0, #0]
   8576a:	4660      	mov	r0, ip
   8576c:	4770      	bx	lr
   8576e:	bf00      	nop
   85770:	2a08      	cmp	r2, #8
   85772:	d313      	bcc.n	8579c <memcpy+0xcc>
   85774:	078b      	lsls	r3, r1, #30
   85776:	d0b1      	beq.n	856dc <memcpy+0xc>
   85778:	f010 0303 	ands.w	r3, r0, #3
   8577c:	d0ae      	beq.n	856dc <memcpy+0xc>
   8577e:	f1c3 0304 	rsb	r3, r3, #4
   85782:	1ad2      	subs	r2, r2, r3
   85784:	07db      	lsls	r3, r3, #31
   85786:	bf1c      	itt	ne
   85788:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8578c:	f800 3b01 	strbne.w	r3, [r0], #1
   85790:	d3a4      	bcc.n	856dc <memcpy+0xc>
   85792:	f831 3b02 	ldrh.w	r3, [r1], #2
   85796:	f820 3b02 	strh.w	r3, [r0], #2
   8579a:	e79f      	b.n	856dc <memcpy+0xc>
   8579c:	3a04      	subs	r2, #4
   8579e:	d3d9      	bcc.n	85754 <memcpy+0x84>
   857a0:	3a01      	subs	r2, #1
   857a2:	f811 3b01 	ldrb.w	r3, [r1], #1
   857a6:	f800 3b01 	strb.w	r3, [r0], #1
   857aa:	d2f9      	bcs.n	857a0 <memcpy+0xd0>
   857ac:	780b      	ldrb	r3, [r1, #0]
   857ae:	7003      	strb	r3, [r0, #0]
   857b0:	784b      	ldrb	r3, [r1, #1]
   857b2:	7043      	strb	r3, [r0, #1]
   857b4:	788b      	ldrb	r3, [r1, #2]
   857b6:	7083      	strb	r3, [r0, #2]
   857b8:	4660      	mov	r0, ip
   857ba:	4770      	bx	lr

000857bc <memset>:
   857bc:	b470      	push	{r4, r5, r6}
   857be:	0786      	lsls	r6, r0, #30
   857c0:	d046      	beq.n	85850 <memset+0x94>
   857c2:	1e54      	subs	r4, r2, #1
   857c4:	2a00      	cmp	r2, #0
   857c6:	d041      	beq.n	8584c <memset+0x90>
   857c8:	b2ca      	uxtb	r2, r1
   857ca:	4603      	mov	r3, r0
   857cc:	e002      	b.n	857d4 <memset+0x18>
   857ce:	f114 34ff 	adds.w	r4, r4, #4294967295
   857d2:	d33b      	bcc.n	8584c <memset+0x90>
   857d4:	f803 2b01 	strb.w	r2, [r3], #1
   857d8:	079d      	lsls	r5, r3, #30
   857da:	d1f8      	bne.n	857ce <memset+0x12>
   857dc:	2c03      	cmp	r4, #3
   857de:	d92e      	bls.n	8583e <memset+0x82>
   857e0:	b2cd      	uxtb	r5, r1
   857e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   857e6:	2c0f      	cmp	r4, #15
   857e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   857ec:	d919      	bls.n	85822 <memset+0x66>
   857ee:	4626      	mov	r6, r4
   857f0:	f103 0210 	add.w	r2, r3, #16
   857f4:	3e10      	subs	r6, #16
   857f6:	2e0f      	cmp	r6, #15
   857f8:	f842 5c10 	str.w	r5, [r2, #-16]
   857fc:	f842 5c0c 	str.w	r5, [r2, #-12]
   85800:	f842 5c08 	str.w	r5, [r2, #-8]
   85804:	f842 5c04 	str.w	r5, [r2, #-4]
   85808:	f102 0210 	add.w	r2, r2, #16
   8580c:	d8f2      	bhi.n	857f4 <memset+0x38>
   8580e:	f1a4 0210 	sub.w	r2, r4, #16
   85812:	f022 020f 	bic.w	r2, r2, #15
   85816:	f004 040f 	and.w	r4, r4, #15
   8581a:	3210      	adds	r2, #16
   8581c:	2c03      	cmp	r4, #3
   8581e:	4413      	add	r3, r2
   85820:	d90d      	bls.n	8583e <memset+0x82>
   85822:	461e      	mov	r6, r3
   85824:	4622      	mov	r2, r4
   85826:	3a04      	subs	r2, #4
   85828:	2a03      	cmp	r2, #3
   8582a:	f846 5b04 	str.w	r5, [r6], #4
   8582e:	d8fa      	bhi.n	85826 <memset+0x6a>
   85830:	1f22      	subs	r2, r4, #4
   85832:	f022 0203 	bic.w	r2, r2, #3
   85836:	3204      	adds	r2, #4
   85838:	4413      	add	r3, r2
   8583a:	f004 0403 	and.w	r4, r4, #3
   8583e:	b12c      	cbz	r4, 8584c <memset+0x90>
   85840:	b2c9      	uxtb	r1, r1
   85842:	441c      	add	r4, r3
   85844:	f803 1b01 	strb.w	r1, [r3], #1
   85848:	429c      	cmp	r4, r3
   8584a:	d1fb      	bne.n	85844 <memset+0x88>
   8584c:	bc70      	pop	{r4, r5, r6}
   8584e:	4770      	bx	lr
   85850:	4614      	mov	r4, r2
   85852:	4603      	mov	r3, r0
   85854:	e7c2      	b.n	857dc <memset+0x20>
   85856:	bf00      	nop

00085858 <sprintf>:
   85858:	b40e      	push	{r1, r2, r3}
   8585a:	4601      	mov	r1, r0
   8585c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8585e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   85862:	f44f 7702 	mov.w	r7, #520	; 0x208
   85866:	f64f 76ff 	movw	r6, #65535	; 0xffff
   8586a:	b09c      	sub	sp, #112	; 0x70
   8586c:	ac21      	add	r4, sp, #132	; 0x84
   8586e:	f854 2b04 	ldr.w	r2, [r4], #4
   85872:	4b0b      	ldr	r3, [pc, #44]	; (858a0 <sprintf+0x48>)
   85874:	9102      	str	r1, [sp, #8]
   85876:	9106      	str	r1, [sp, #24]
   85878:	6818      	ldr	r0, [r3, #0]
   8587a:	a902      	add	r1, sp, #8
   8587c:	4623      	mov	r3, r4
   8587e:	9401      	str	r4, [sp, #4]
   85880:	f8ad 7014 	strh.w	r7, [sp, #20]
   85884:	9504      	str	r5, [sp, #16]
   85886:	9507      	str	r5, [sp, #28]
   85888:	f8ad 6016 	strh.w	r6, [sp, #22]
   8588c:	f000 f838 	bl	85900 <_svfprintf_r>
   85890:	2200      	movs	r2, #0
   85892:	9b02      	ldr	r3, [sp, #8]
   85894:	701a      	strb	r2, [r3, #0]
   85896:	b01c      	add	sp, #112	; 0x70
   85898:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   8589c:	b003      	add	sp, #12
   8589e:	4770      	bx	lr
   858a0:	200701a4 	.word	0x200701a4

000858a4 <strlen>:
   858a4:	f020 0103 	bic.w	r1, r0, #3
   858a8:	f010 0003 	ands.w	r0, r0, #3
   858ac:	f1c0 0000 	rsb	r0, r0, #0
   858b0:	f851 3b04 	ldr.w	r3, [r1], #4
   858b4:	f100 0c04 	add.w	ip, r0, #4
   858b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   858bc:	f06f 0200 	mvn.w	r2, #0
   858c0:	bf1c      	itt	ne
   858c2:	fa22 f20c 	lsrne.w	r2, r2, ip
   858c6:	4313      	orrne	r3, r2
   858c8:	f04f 0c01 	mov.w	ip, #1
   858cc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   858d0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   858d4:	eba3 020c 	sub.w	r2, r3, ip
   858d8:	ea22 0203 	bic.w	r2, r2, r3
   858dc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   858e0:	bf04      	itt	eq
   858e2:	f851 3b04 	ldreq.w	r3, [r1], #4
   858e6:	3004      	addeq	r0, #4
   858e8:	d0f4      	beq.n	858d4 <strlen+0x30>
   858ea:	f1c2 0100 	rsb	r1, r2, #0
   858ee:	ea02 0201 	and.w	r2, r2, r1
   858f2:	fab2 f282 	clz	r2, r2
   858f6:	f1c2 021f 	rsb	r2, r2, #31
   858fa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   858fe:	4770      	bx	lr

00085900 <_svfprintf_r>:
   85900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85904:	b0c3      	sub	sp, #268	; 0x10c
   85906:	460c      	mov	r4, r1
   85908:	910b      	str	r1, [sp, #44]	; 0x2c
   8590a:	4692      	mov	sl, r2
   8590c:	930f      	str	r3, [sp, #60]	; 0x3c
   8590e:	900c      	str	r0, [sp, #48]	; 0x30
   85910:	f002 fa56 	bl	87dc0 <_localeconv_r>
   85914:	6803      	ldr	r3, [r0, #0]
   85916:	4618      	mov	r0, r3
   85918:	931a      	str	r3, [sp, #104]	; 0x68
   8591a:	f7ff ffc3 	bl	858a4 <strlen>
   8591e:	89a3      	ldrh	r3, [r4, #12]
   85920:	9019      	str	r0, [sp, #100]	; 0x64
   85922:	0619      	lsls	r1, r3, #24
   85924:	d503      	bpl.n	8592e <_svfprintf_r+0x2e>
   85926:	6923      	ldr	r3, [r4, #16]
   85928:	2b00      	cmp	r3, #0
   8592a:	f001 8035 	beq.w	86998 <_svfprintf_r+0x1098>
   8592e:	2300      	movs	r3, #0
   85930:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   85934:	46c8      	mov	r8, r9
   85936:	9315      	str	r3, [sp, #84]	; 0x54
   85938:	9313      	str	r3, [sp, #76]	; 0x4c
   8593a:	9314      	str	r3, [sp, #80]	; 0x50
   8593c:	9318      	str	r3, [sp, #96]	; 0x60
   8593e:	931b      	str	r3, [sp, #108]	; 0x6c
   85940:	9309      	str	r3, [sp, #36]	; 0x24
   85942:	9316      	str	r3, [sp, #88]	; 0x58
   85944:	9317      	str	r3, [sp, #92]	; 0x5c
   85946:	9327      	str	r3, [sp, #156]	; 0x9c
   85948:	9326      	str	r3, [sp, #152]	; 0x98
   8594a:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   8594e:	f89a 3000 	ldrb.w	r3, [sl]
   85952:	4654      	mov	r4, sl
   85954:	b1eb      	cbz	r3, 85992 <_svfprintf_r+0x92>
   85956:	2b25      	cmp	r3, #37	; 0x25
   85958:	d102      	bne.n	85960 <_svfprintf_r+0x60>
   8595a:	e01a      	b.n	85992 <_svfprintf_r+0x92>
   8595c:	2b25      	cmp	r3, #37	; 0x25
   8595e:	d003      	beq.n	85968 <_svfprintf_r+0x68>
   85960:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   85964:	2b00      	cmp	r3, #0
   85966:	d1f9      	bne.n	8595c <_svfprintf_r+0x5c>
   85968:	eba4 050a 	sub.w	r5, r4, sl
   8596c:	b18d      	cbz	r5, 85992 <_svfprintf_r+0x92>
   8596e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85970:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85972:	3301      	adds	r3, #1
   85974:	442a      	add	r2, r5
   85976:	2b07      	cmp	r3, #7
   85978:	f8c8 a000 	str.w	sl, [r8]
   8597c:	f8c8 5004 	str.w	r5, [r8, #4]
   85980:	9227      	str	r2, [sp, #156]	; 0x9c
   85982:	9326      	str	r3, [sp, #152]	; 0x98
   85984:	f300 808a 	bgt.w	85a9c <_svfprintf_r+0x19c>
   85988:	f108 0808 	add.w	r8, r8, #8
   8598c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8598e:	442b      	add	r3, r5
   85990:	9309      	str	r3, [sp, #36]	; 0x24
   85992:	7823      	ldrb	r3, [r4, #0]
   85994:	2b00      	cmp	r3, #0
   85996:	f000 8089 	beq.w	85aac <_svfprintf_r+0x1ac>
   8599a:	2300      	movs	r3, #0
   8599c:	f04f 30ff 	mov.w	r0, #4294967295
   859a0:	461a      	mov	r2, r3
   859a2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   859a6:	4619      	mov	r1, r3
   859a8:	930d      	str	r3, [sp, #52]	; 0x34
   859aa:	469b      	mov	fp, r3
   859ac:	7863      	ldrb	r3, [r4, #1]
   859ae:	f104 0a01 	add.w	sl, r4, #1
   859b2:	900a      	str	r0, [sp, #40]	; 0x28
   859b4:	f10a 0a01 	add.w	sl, sl, #1
   859b8:	f1a3 0020 	sub.w	r0, r3, #32
   859bc:	2858      	cmp	r0, #88	; 0x58
   859be:	f200 83b7 	bhi.w	86130 <_svfprintf_r+0x830>
   859c2:	e8df f010 	tbh	[pc, r0, lsl #1]
   859c6:	034c      	.short	0x034c
   859c8:	03b503b5 	.word	0x03b503b5
   859cc:	03b50354 	.word	0x03b50354
   859d0:	03b503b5 	.word	0x03b503b5
   859d4:	03b503b5 	.word	0x03b503b5
   859d8:	005903b5 	.word	0x005903b5
   859dc:	03b50359 	.word	0x03b50359
   859e0:	02140066 	.word	0x02140066
   859e4:	022f03b5 	.word	0x022f03b5
   859e8:	03a503a5 	.word	0x03a503a5
   859ec:	03a503a5 	.word	0x03a503a5
   859f0:	03a503a5 	.word	0x03a503a5
   859f4:	03a503a5 	.word	0x03a503a5
   859f8:	03b503a5 	.word	0x03b503a5
   859fc:	03b503b5 	.word	0x03b503b5
   85a00:	03b503b5 	.word	0x03b503b5
   85a04:	03b503b5 	.word	0x03b503b5
   85a08:	03b503b5 	.word	0x03b503b5
   85a0c:	028b03b5 	.word	0x028b03b5
   85a10:	03b502d3 	.word	0x03b502d3
   85a14:	03b502d3 	.word	0x03b502d3
   85a18:	03b503b5 	.word	0x03b503b5
   85a1c:	031b03b5 	.word	0x031b03b5
   85a20:	03b503b5 	.word	0x03b503b5
   85a24:	03b50320 	.word	0x03b50320
   85a28:	03b503b5 	.word	0x03b503b5
   85a2c:	03b503b5 	.word	0x03b503b5
   85a30:	03b50234 	.word	0x03b50234
   85a34:	024b03b5 	.word	0x024b03b5
   85a38:	03b503b5 	.word	0x03b503b5
   85a3c:	03b503b5 	.word	0x03b503b5
   85a40:	03b503b5 	.word	0x03b503b5
   85a44:	03b503b5 	.word	0x03b503b5
   85a48:	03b503b5 	.word	0x03b503b5
   85a4c:	039e0276 	.word	0x039e0276
   85a50:	02d302d3 	.word	0x02d302d3
   85a54:	036302d3 	.word	0x036302d3
   85a58:	03b5039e 	.word	0x03b5039e
   85a5c:	036803b5 	.word	0x036803b5
   85a60:	037503b5 	.word	0x037503b5
   85a64:	038c01dd 	.word	0x038c01dd
   85a68:	03b5035e 	.word	0x03b5035e
   85a6c:	03b501f2 	.word	0x03b501f2
   85a70:	03b50087 	.word	0x03b50087
   85a74:	033203b5 	.word	0x033203b5
   85a78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85a7a:	6823      	ldr	r3, [r4, #0]
   85a7c:	4618      	mov	r0, r3
   85a7e:	930d      	str	r3, [sp, #52]	; 0x34
   85a80:	4623      	mov	r3, r4
   85a82:	2800      	cmp	r0, #0
   85a84:	f103 0304 	add.w	r3, r3, #4
   85a88:	930f      	str	r3, [sp, #60]	; 0x3c
   85a8a:	da04      	bge.n	85a96 <_svfprintf_r+0x196>
   85a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85a8e:	425b      	negs	r3, r3
   85a90:	930d      	str	r3, [sp, #52]	; 0x34
   85a92:	f04b 0b04 	orr.w	fp, fp, #4
   85a96:	f89a 3000 	ldrb.w	r3, [sl]
   85a9a:	e78b      	b.n	859b4 <_svfprintf_r+0xb4>
   85a9c:	aa25      	add	r2, sp, #148	; 0x94
   85a9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85aa0:	980c      	ldr	r0, [sp, #48]	; 0x30
   85aa2:	f002 ffa1 	bl	889e8 <__ssprint_r>
   85aa6:	b940      	cbnz	r0, 85aba <_svfprintf_r+0x1ba>
   85aa8:	46c8      	mov	r8, r9
   85aaa:	e76f      	b.n	8598c <_svfprintf_r+0x8c>
   85aac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   85aae:	b123      	cbz	r3, 85aba <_svfprintf_r+0x1ba>
   85ab0:	980c      	ldr	r0, [sp, #48]	; 0x30
   85ab2:	aa25      	add	r2, sp, #148	; 0x94
   85ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85ab6:	f002 ff97 	bl	889e8 <__ssprint_r>
   85aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85abc:	899b      	ldrh	r3, [r3, #12]
   85abe:	f013 0f40 	tst.w	r3, #64	; 0x40
   85ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85ac4:	bf18      	it	ne
   85ac6:	f04f 33ff 	movne.w	r3, #4294967295
   85aca:	9309      	str	r3, [sp, #36]	; 0x24
   85acc:	9809      	ldr	r0, [sp, #36]	; 0x24
   85ace:	b043      	add	sp, #268	; 0x10c
   85ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ad4:	f01b 0f20 	tst.w	fp, #32
   85ad8:	9311      	str	r3, [sp, #68]	; 0x44
   85ada:	f040 81af 	bne.w	85e3c <_svfprintf_r+0x53c>
   85ade:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85ae0:	f01b 0f10 	tst.w	fp, #16
   85ae4:	4613      	mov	r3, r2
   85ae6:	f040 859a 	bne.w	8661e <_svfprintf_r+0xd1e>
   85aea:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85aee:	f000 8596 	beq.w	8661e <_svfprintf_r+0xd1e>
   85af2:	2500      	movs	r5, #0
   85af4:	2301      	movs	r3, #1
   85af6:	8814      	ldrh	r4, [r2, #0]
   85af8:	3204      	adds	r2, #4
   85afa:	920f      	str	r2, [sp, #60]	; 0x3c
   85afc:	2200      	movs	r2, #0
   85afe:	4617      	mov	r7, r2
   85b00:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   85b04:	990a      	ldr	r1, [sp, #40]	; 0x28
   85b06:	1c4a      	adds	r2, r1, #1
   85b08:	f000 8210 	beq.w	85f2c <_svfprintf_r+0x62c>
   85b0c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   85b10:	9207      	str	r2, [sp, #28]
   85b12:	ea54 0205 	orrs.w	r2, r4, r5
   85b16:	f040 820f 	bne.w	85f38 <_svfprintf_r+0x638>
   85b1a:	2900      	cmp	r1, #0
   85b1c:	f040 8431 	bne.w	86382 <_svfprintf_r+0xa82>
   85b20:	2b00      	cmp	r3, #0
   85b22:	f040 8539 	bne.w	86598 <_svfprintf_r+0xc98>
   85b26:	f01b 0301 	ands.w	r3, fp, #1
   85b2a:	930e      	str	r3, [sp, #56]	; 0x38
   85b2c:	f000 8662 	beq.w	867f4 <_svfprintf_r+0xef4>
   85b30:	2330      	movs	r3, #48	; 0x30
   85b32:	ae42      	add	r6, sp, #264	; 0x108
   85b34:	f806 3d41 	strb.w	r3, [r6, #-65]!
   85b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85b3c:	4293      	cmp	r3, r2
   85b3e:	bfb8      	it	lt
   85b40:	4613      	movlt	r3, r2
   85b42:	9308      	str	r3, [sp, #32]
   85b44:	2300      	movs	r3, #0
   85b46:	9312      	str	r3, [sp, #72]	; 0x48
   85b48:	b117      	cbz	r7, 85b50 <_svfprintf_r+0x250>
   85b4a:	9b08      	ldr	r3, [sp, #32]
   85b4c:	3301      	adds	r3, #1
   85b4e:	9308      	str	r3, [sp, #32]
   85b50:	9b07      	ldr	r3, [sp, #28]
   85b52:	f013 0302 	ands.w	r3, r3, #2
   85b56:	9310      	str	r3, [sp, #64]	; 0x40
   85b58:	d002      	beq.n	85b60 <_svfprintf_r+0x260>
   85b5a:	9b08      	ldr	r3, [sp, #32]
   85b5c:	3302      	adds	r3, #2
   85b5e:	9308      	str	r3, [sp, #32]
   85b60:	9b07      	ldr	r3, [sp, #28]
   85b62:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   85b66:	f040 8310 	bne.w	8618a <_svfprintf_r+0x88a>
   85b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85b6c:	9a08      	ldr	r2, [sp, #32]
   85b6e:	eba3 0b02 	sub.w	fp, r3, r2
   85b72:	f1bb 0f00 	cmp.w	fp, #0
   85b76:	f340 8308 	ble.w	8618a <_svfprintf_r+0x88a>
   85b7a:	f1bb 0f10 	cmp.w	fp, #16
   85b7e:	f340 87b2 	ble.w	86ae6 <_svfprintf_r+0x11e6>
   85b82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85b84:	4643      	mov	r3, r8
   85b86:	4621      	mov	r1, r4
   85b88:	46a8      	mov	r8, r5
   85b8a:	2710      	movs	r7, #16
   85b8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85b8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85b90:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85b92:	e006      	b.n	85ba2 <_svfprintf_r+0x2a2>
   85b94:	f1ab 0b10 	sub.w	fp, fp, #16
   85b98:	f1bb 0f10 	cmp.w	fp, #16
   85b9c:	f103 0308 	add.w	r3, r3, #8
   85ba0:	dd18      	ble.n	85bd4 <_svfprintf_r+0x2d4>
   85ba2:	3201      	adds	r2, #1
   85ba4:	48ab      	ldr	r0, [pc, #684]	; (85e54 <_svfprintf_r+0x554>)
   85ba6:	3110      	adds	r1, #16
   85ba8:	2a07      	cmp	r2, #7
   85baa:	9127      	str	r1, [sp, #156]	; 0x9c
   85bac:	9226      	str	r2, [sp, #152]	; 0x98
   85bae:	e883 0081 	stmia.w	r3, {r0, r7}
   85bb2:	ddef      	ble.n	85b94 <_svfprintf_r+0x294>
   85bb4:	aa25      	add	r2, sp, #148	; 0x94
   85bb6:	4629      	mov	r1, r5
   85bb8:	4620      	mov	r0, r4
   85bba:	f002 ff15 	bl	889e8 <__ssprint_r>
   85bbe:	2800      	cmp	r0, #0
   85bc0:	f47f af7b 	bne.w	85aba <_svfprintf_r+0x1ba>
   85bc4:	f1ab 0b10 	sub.w	fp, fp, #16
   85bc8:	f1bb 0f10 	cmp.w	fp, #16
   85bcc:	464b      	mov	r3, r9
   85bce:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85bd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85bd2:	dce6      	bgt.n	85ba2 <_svfprintf_r+0x2a2>
   85bd4:	4645      	mov	r5, r8
   85bd6:	460c      	mov	r4, r1
   85bd8:	4698      	mov	r8, r3
   85bda:	3201      	adds	r2, #1
   85bdc:	4b9d      	ldr	r3, [pc, #628]	; (85e54 <_svfprintf_r+0x554>)
   85bde:	445c      	add	r4, fp
   85be0:	2a07      	cmp	r2, #7
   85be2:	9427      	str	r4, [sp, #156]	; 0x9c
   85be4:	9226      	str	r2, [sp, #152]	; 0x98
   85be6:	e888 0808 	stmia.w	r8, {r3, fp}
   85bea:	f300 82c3 	bgt.w	86174 <_svfprintf_r+0x874>
   85bee:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85bf2:	f108 0808 	add.w	r8, r8, #8
   85bf6:	b187      	cbz	r7, 85c1a <_svfprintf_r+0x31a>
   85bf8:	2101      	movs	r1, #1
   85bfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85bfc:	440c      	add	r4, r1
   85bfe:	440b      	add	r3, r1
   85c00:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   85c04:	2b07      	cmp	r3, #7
   85c06:	9427      	str	r4, [sp, #156]	; 0x9c
   85c08:	9326      	str	r3, [sp, #152]	; 0x98
   85c0a:	f8c8 1004 	str.w	r1, [r8, #4]
   85c0e:	f8c8 2000 	str.w	r2, [r8]
   85c12:	f300 83cd 	bgt.w	863b0 <_svfprintf_r+0xab0>
   85c16:	f108 0808 	add.w	r8, r8, #8
   85c1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85c1c:	b17b      	cbz	r3, 85c3e <_svfprintf_r+0x33e>
   85c1e:	2102      	movs	r1, #2
   85c20:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85c22:	440c      	add	r4, r1
   85c24:	3301      	adds	r3, #1
   85c26:	aa1e      	add	r2, sp, #120	; 0x78
   85c28:	2b07      	cmp	r3, #7
   85c2a:	9427      	str	r4, [sp, #156]	; 0x9c
   85c2c:	9326      	str	r3, [sp, #152]	; 0x98
   85c2e:	f8c8 1004 	str.w	r1, [r8, #4]
   85c32:	f8c8 2000 	str.w	r2, [r8]
   85c36:	f300 8411 	bgt.w	8645c <_svfprintf_r+0xb5c>
   85c3a:	f108 0808 	add.w	r8, r8, #8
   85c3e:	2d80      	cmp	r5, #128	; 0x80
   85c40:	f000 8304 	beq.w	8624c <_svfprintf_r+0x94c>
   85c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85c46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85c48:	1a9f      	subs	r7, r3, r2
   85c4a:	2f00      	cmp	r7, #0
   85c4c:	dd37      	ble.n	85cbe <_svfprintf_r+0x3be>
   85c4e:	2f10      	cmp	r7, #16
   85c50:	f340 8679 	ble.w	86946 <_svfprintf_r+0x1046>
   85c54:	4d80      	ldr	r5, [pc, #512]	; (85e58 <_svfprintf_r+0x558>)
   85c56:	4642      	mov	r2, r8
   85c58:	4621      	mov	r1, r4
   85c5a:	46b0      	mov	r8, r6
   85c5c:	f04f 0b10 	mov.w	fp, #16
   85c60:	462e      	mov	r6, r5
   85c62:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85c64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85c66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85c68:	e004      	b.n	85c74 <_svfprintf_r+0x374>
   85c6a:	3f10      	subs	r7, #16
   85c6c:	2f10      	cmp	r7, #16
   85c6e:	f102 0208 	add.w	r2, r2, #8
   85c72:	dd15      	ble.n	85ca0 <_svfprintf_r+0x3a0>
   85c74:	3301      	adds	r3, #1
   85c76:	3110      	adds	r1, #16
   85c78:	2b07      	cmp	r3, #7
   85c7a:	9127      	str	r1, [sp, #156]	; 0x9c
   85c7c:	9326      	str	r3, [sp, #152]	; 0x98
   85c7e:	e882 0840 	stmia.w	r2, {r6, fp}
   85c82:	ddf2      	ble.n	85c6a <_svfprintf_r+0x36a>
   85c84:	aa25      	add	r2, sp, #148	; 0x94
   85c86:	4629      	mov	r1, r5
   85c88:	4620      	mov	r0, r4
   85c8a:	f002 fead 	bl	889e8 <__ssprint_r>
   85c8e:	2800      	cmp	r0, #0
   85c90:	f47f af13 	bne.w	85aba <_svfprintf_r+0x1ba>
   85c94:	3f10      	subs	r7, #16
   85c96:	2f10      	cmp	r7, #16
   85c98:	464a      	mov	r2, r9
   85c9a:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85c9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85c9e:	dce9      	bgt.n	85c74 <_svfprintf_r+0x374>
   85ca0:	4635      	mov	r5, r6
   85ca2:	460c      	mov	r4, r1
   85ca4:	4646      	mov	r6, r8
   85ca6:	4690      	mov	r8, r2
   85ca8:	3301      	adds	r3, #1
   85caa:	443c      	add	r4, r7
   85cac:	2b07      	cmp	r3, #7
   85cae:	9427      	str	r4, [sp, #156]	; 0x9c
   85cb0:	9326      	str	r3, [sp, #152]	; 0x98
   85cb2:	e888 00a0 	stmia.w	r8, {r5, r7}
   85cb6:	f300 8370 	bgt.w	8639a <_svfprintf_r+0xa9a>
   85cba:	f108 0808 	add.w	r8, r8, #8
   85cbe:	9b07      	ldr	r3, [sp, #28]
   85cc0:	05df      	lsls	r7, r3, #23
   85cc2:	f100 8264 	bmi.w	8618e <_svfprintf_r+0x88e>
   85cc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85cc8:	990e      	ldr	r1, [sp, #56]	; 0x38
   85cca:	3301      	adds	r3, #1
   85ccc:	440c      	add	r4, r1
   85cce:	2b07      	cmp	r3, #7
   85cd0:	9427      	str	r4, [sp, #156]	; 0x9c
   85cd2:	f8c8 6000 	str.w	r6, [r8]
   85cd6:	f8c8 1004 	str.w	r1, [r8, #4]
   85cda:	9326      	str	r3, [sp, #152]	; 0x98
   85cdc:	f300 83b3 	bgt.w	86446 <_svfprintf_r+0xb46>
   85ce0:	f108 0808 	add.w	r8, r8, #8
   85ce4:	9b07      	ldr	r3, [sp, #28]
   85ce6:	075b      	lsls	r3, r3, #29
   85ce8:	d53b      	bpl.n	85d62 <_svfprintf_r+0x462>
   85cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85cec:	9a08      	ldr	r2, [sp, #32]
   85cee:	1a9d      	subs	r5, r3, r2
   85cf0:	2d00      	cmp	r5, #0
   85cf2:	dd36      	ble.n	85d62 <_svfprintf_r+0x462>
   85cf4:	2d10      	cmp	r5, #16
   85cf6:	f340 8721 	ble.w	86b3c <_svfprintf_r+0x123c>
   85cfa:	2610      	movs	r6, #16
   85cfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85cfe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85d00:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   85d04:	e004      	b.n	85d10 <_svfprintf_r+0x410>
   85d06:	3d10      	subs	r5, #16
   85d08:	2d10      	cmp	r5, #16
   85d0a:	f108 0808 	add.w	r8, r8, #8
   85d0e:	dd16      	ble.n	85d3e <_svfprintf_r+0x43e>
   85d10:	3301      	adds	r3, #1
   85d12:	4a50      	ldr	r2, [pc, #320]	; (85e54 <_svfprintf_r+0x554>)
   85d14:	3410      	adds	r4, #16
   85d16:	2b07      	cmp	r3, #7
   85d18:	9427      	str	r4, [sp, #156]	; 0x9c
   85d1a:	9326      	str	r3, [sp, #152]	; 0x98
   85d1c:	e888 0044 	stmia.w	r8, {r2, r6}
   85d20:	ddf1      	ble.n	85d06 <_svfprintf_r+0x406>
   85d22:	aa25      	add	r2, sp, #148	; 0x94
   85d24:	4659      	mov	r1, fp
   85d26:	4638      	mov	r0, r7
   85d28:	f002 fe5e 	bl	889e8 <__ssprint_r>
   85d2c:	2800      	cmp	r0, #0
   85d2e:	f47f aec4 	bne.w	85aba <_svfprintf_r+0x1ba>
   85d32:	3d10      	subs	r5, #16
   85d34:	2d10      	cmp	r5, #16
   85d36:	46c8      	mov	r8, r9
   85d38:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85d3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85d3c:	dce8      	bgt.n	85d10 <_svfprintf_r+0x410>
   85d3e:	3301      	adds	r3, #1
   85d40:	4a44      	ldr	r2, [pc, #272]	; (85e54 <_svfprintf_r+0x554>)
   85d42:	442c      	add	r4, r5
   85d44:	2b07      	cmp	r3, #7
   85d46:	9427      	str	r4, [sp, #156]	; 0x9c
   85d48:	9326      	str	r3, [sp, #152]	; 0x98
   85d4a:	e888 0024 	stmia.w	r8, {r2, r5}
   85d4e:	dd08      	ble.n	85d62 <_svfprintf_r+0x462>
   85d50:	aa25      	add	r2, sp, #148	; 0x94
   85d52:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85d54:	980c      	ldr	r0, [sp, #48]	; 0x30
   85d56:	f002 fe47 	bl	889e8 <__ssprint_r>
   85d5a:	2800      	cmp	r0, #0
   85d5c:	f47f aead 	bne.w	85aba <_svfprintf_r+0x1ba>
   85d60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85d64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85d66:	9908      	ldr	r1, [sp, #32]
   85d68:	428a      	cmp	r2, r1
   85d6a:	bfac      	ite	ge
   85d6c:	189b      	addge	r3, r3, r2
   85d6e:	185b      	addlt	r3, r3, r1
   85d70:	9309      	str	r3, [sp, #36]	; 0x24
   85d72:	2c00      	cmp	r4, #0
   85d74:	f040 82fb 	bne.w	8636e <_svfprintf_r+0xa6e>
   85d78:	2300      	movs	r3, #0
   85d7a:	46c8      	mov	r8, r9
   85d7c:	9326      	str	r3, [sp, #152]	; 0x98
   85d7e:	e5e6      	b.n	8594e <_svfprintf_r+0x4e>
   85d80:	9311      	str	r3, [sp, #68]	; 0x44
   85d82:	f01b 0320 	ands.w	r3, fp, #32
   85d86:	f040 8145 	bne.w	86014 <_svfprintf_r+0x714>
   85d8a:	f01b 0210 	ands.w	r2, fp, #16
   85d8e:	f040 8466 	bne.w	8665e <_svfprintf_r+0xd5e>
   85d92:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   85d96:	f000 8462 	beq.w	8665e <_svfprintf_r+0xd5e>
   85d9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   85d9c:	4613      	mov	r3, r2
   85d9e:	460a      	mov	r2, r1
   85da0:	3204      	adds	r2, #4
   85da2:	880c      	ldrh	r4, [r1, #0]
   85da4:	2500      	movs	r5, #0
   85da6:	920f      	str	r2, [sp, #60]	; 0x3c
   85da8:	e6a8      	b.n	85afc <_svfprintf_r+0x1fc>
   85daa:	2500      	movs	r5, #0
   85dac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85dae:	9311      	str	r3, [sp, #68]	; 0x44
   85db0:	6816      	ldr	r6, [r2, #0]
   85db2:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   85db6:	1d14      	adds	r4, r2, #4
   85db8:	2e00      	cmp	r6, #0
   85dba:	f000 86cd 	beq.w	86b58 <_svfprintf_r+0x1258>
   85dbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85dc0:	1c53      	adds	r3, r2, #1
   85dc2:	f000 861b 	beq.w	869fc <_svfprintf_r+0x10fc>
   85dc6:	4629      	mov	r1, r5
   85dc8:	4630      	mov	r0, r6
   85dca:	f002 faad 	bl	88328 <memchr>
   85dce:	2800      	cmp	r0, #0
   85dd0:	f000 870d 	beq.w	86bee <_svfprintf_r+0x12ee>
   85dd4:	1b83      	subs	r3, r0, r6
   85dd6:	950a      	str	r5, [sp, #40]	; 0x28
   85dd8:	930e      	str	r3, [sp, #56]	; 0x38
   85dda:	940f      	str	r4, [sp, #60]	; 0x3c
   85ddc:	f8cd b01c 	str.w	fp, [sp, #28]
   85de0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85de4:	9308      	str	r3, [sp, #32]
   85de6:	9512      	str	r5, [sp, #72]	; 0x48
   85de8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85dec:	e6ac      	b.n	85b48 <_svfprintf_r+0x248>
   85dee:	f89a 3000 	ldrb.w	r3, [sl]
   85df2:	f10a 0401 	add.w	r4, sl, #1
   85df6:	2b2a      	cmp	r3, #42	; 0x2a
   85df8:	f000 87c2 	beq.w	86d80 <_svfprintf_r+0x1480>
   85dfc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85e00:	2809      	cmp	r0, #9
   85e02:	46a2      	mov	sl, r4
   85e04:	f200 8718 	bhi.w	86c38 <_svfprintf_r+0x1338>
   85e08:	2300      	movs	r3, #0
   85e0a:	461c      	mov	r4, r3
   85e0c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85e10:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   85e14:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   85e18:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85e1c:	2809      	cmp	r0, #9
   85e1e:	d9f5      	bls.n	85e0c <_svfprintf_r+0x50c>
   85e20:	940a      	str	r4, [sp, #40]	; 0x28
   85e22:	e5c9      	b.n	859b8 <_svfprintf_r+0xb8>
   85e24:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   85e28:	f89a 3000 	ldrb.w	r3, [sl]
   85e2c:	e5c2      	b.n	859b4 <_svfprintf_r+0xb4>
   85e2e:	f04b 0b10 	orr.w	fp, fp, #16
   85e32:	f01b 0f20 	tst.w	fp, #32
   85e36:	9311      	str	r3, [sp, #68]	; 0x44
   85e38:	f43f ae51 	beq.w	85ade <_svfprintf_r+0x1de>
   85e3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85e3e:	3407      	adds	r4, #7
   85e40:	f024 0307 	bic.w	r3, r4, #7
   85e44:	f103 0208 	add.w	r2, r3, #8
   85e48:	e9d3 4500 	ldrd	r4, r5, [r3]
   85e4c:	920f      	str	r2, [sp, #60]	; 0x3c
   85e4e:	2301      	movs	r3, #1
   85e50:	e654      	b.n	85afc <_svfprintf_r+0x1fc>
   85e52:	bf00      	nop
   85e54:	0008998c 	.word	0x0008998c
   85e58:	0008999c 	.word	0x0008999c
   85e5c:	9311      	str	r3, [sp, #68]	; 0x44
   85e5e:	2a00      	cmp	r2, #0
   85e60:	f040 87ad 	bne.w	86dbe <_svfprintf_r+0x14be>
   85e64:	4bbe      	ldr	r3, [pc, #760]	; (86160 <_svfprintf_r+0x860>)
   85e66:	f01b 0f20 	tst.w	fp, #32
   85e6a:	9318      	str	r3, [sp, #96]	; 0x60
   85e6c:	f040 80e7 	bne.w	8603e <_svfprintf_r+0x73e>
   85e70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85e72:	f01b 0f10 	tst.w	fp, #16
   85e76:	4613      	mov	r3, r2
   85e78:	f040 83d8 	bne.w	8662c <_svfprintf_r+0xd2c>
   85e7c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85e80:	f000 83d4 	beq.w	8662c <_svfprintf_r+0xd2c>
   85e84:	2500      	movs	r5, #0
   85e86:	3304      	adds	r3, #4
   85e88:	8814      	ldrh	r4, [r2, #0]
   85e8a:	930f      	str	r3, [sp, #60]	; 0x3c
   85e8c:	f01b 0f01 	tst.w	fp, #1
   85e90:	f000 80e3 	beq.w	8605a <_svfprintf_r+0x75a>
   85e94:	ea54 0305 	orrs.w	r3, r4, r5
   85e98:	f000 80df 	beq.w	8605a <_svfprintf_r+0x75a>
   85e9c:	2330      	movs	r3, #48	; 0x30
   85e9e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   85ea2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   85ea6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   85eaa:	f04b 0b02 	orr.w	fp, fp, #2
   85eae:	2302      	movs	r3, #2
   85eb0:	e624      	b.n	85afc <_svfprintf_r+0x1fc>
   85eb2:	2201      	movs	r2, #1
   85eb4:	9311      	str	r3, [sp, #68]	; 0x44
   85eb6:	2300      	movs	r3, #0
   85eb8:	4611      	mov	r1, r2
   85eba:	980f      	ldr	r0, [sp, #60]	; 0x3c
   85ebc:	9208      	str	r2, [sp, #32]
   85ebe:	6802      	ldr	r2, [r0, #0]
   85ec0:	461f      	mov	r7, r3
   85ec2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85ec6:	930a      	str	r3, [sp, #40]	; 0x28
   85ec8:	9312      	str	r3, [sp, #72]	; 0x48
   85eca:	1d03      	adds	r3, r0, #4
   85ecc:	f8cd b01c 	str.w	fp, [sp, #28]
   85ed0:	910e      	str	r1, [sp, #56]	; 0x38
   85ed2:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   85ed6:	930f      	str	r3, [sp, #60]	; 0x3c
   85ed8:	ae28      	add	r6, sp, #160	; 0xa0
   85eda:	e639      	b.n	85b50 <_svfprintf_r+0x250>
   85edc:	9311      	str	r3, [sp, #68]	; 0x44
   85ede:	2a00      	cmp	r2, #0
   85ee0:	f040 8784 	bne.w	86dec <_svfprintf_r+0x14ec>
   85ee4:	f04b 0b10 	orr.w	fp, fp, #16
   85ee8:	f01b 0f20 	tst.w	fp, #32
   85eec:	f040 8475 	bne.w	867da <_svfprintf_r+0xeda>
   85ef0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85ef2:	f01b 0f10 	tst.w	fp, #16
   85ef6:	4613      	mov	r3, r2
   85ef8:	f040 839d 	bne.w	86636 <_svfprintf_r+0xd36>
   85efc:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85f00:	f000 8399 	beq.w	86636 <_svfprintf_r+0xd36>
   85f04:	f9b2 4000 	ldrsh.w	r4, [r2]
   85f08:	3304      	adds	r3, #4
   85f0a:	17e5      	asrs	r5, r4, #31
   85f0c:	930f      	str	r3, [sp, #60]	; 0x3c
   85f0e:	4622      	mov	r2, r4
   85f10:	462b      	mov	r3, r5
   85f12:	2a00      	cmp	r2, #0
   85f14:	f173 0300 	sbcs.w	r3, r3, #0
   85f18:	f2c0 8398 	blt.w	8664c <_svfprintf_r+0xd4c>
   85f1c:	990a      	ldr	r1, [sp, #40]	; 0x28
   85f1e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85f22:	1c4a      	adds	r2, r1, #1
   85f24:	f04f 0301 	mov.w	r3, #1
   85f28:	f47f adf0 	bne.w	85b0c <_svfprintf_r+0x20c>
   85f2c:	ea54 0205 	orrs.w	r2, r4, r5
   85f30:	f000 8229 	beq.w	86386 <_svfprintf_r+0xa86>
   85f34:	f8cd b01c 	str.w	fp, [sp, #28]
   85f38:	2b01      	cmp	r3, #1
   85f3a:	f000 830e 	beq.w	8655a <_svfprintf_r+0xc5a>
   85f3e:	2b02      	cmp	r3, #2
   85f40:	f040 829c 	bne.w	8647c <_svfprintf_r+0xb7c>
   85f44:	464e      	mov	r6, r9
   85f46:	9818      	ldr	r0, [sp, #96]	; 0x60
   85f48:	0923      	lsrs	r3, r4, #4
   85f4a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   85f4e:	0929      	lsrs	r1, r5, #4
   85f50:	f004 020f 	and.w	r2, r4, #15
   85f54:	460d      	mov	r5, r1
   85f56:	461c      	mov	r4, r3
   85f58:	5c83      	ldrb	r3, [r0, r2]
   85f5a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   85f5e:	ea54 0305 	orrs.w	r3, r4, r5
   85f62:	d1f1      	bne.n	85f48 <_svfprintf_r+0x648>
   85f64:	eba9 0306 	sub.w	r3, r9, r6
   85f68:	930e      	str	r3, [sp, #56]	; 0x38
   85f6a:	e5e5      	b.n	85b38 <_svfprintf_r+0x238>
   85f6c:	9311      	str	r3, [sp, #68]	; 0x44
   85f6e:	2a00      	cmp	r2, #0
   85f70:	f040 8738 	bne.w	86de4 <_svfprintf_r+0x14e4>
   85f74:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85f76:	f01b 0f08 	tst.w	fp, #8
   85f7a:	f104 0407 	add.w	r4, r4, #7
   85f7e:	f000 84cf 	beq.w	86920 <_svfprintf_r+0x1020>
   85f82:	f024 0307 	bic.w	r3, r4, #7
   85f86:	f103 0208 	add.w	r2, r3, #8
   85f8a:	920f      	str	r2, [sp, #60]	; 0x3c
   85f8c:	681a      	ldr	r2, [r3, #0]
   85f8e:	685b      	ldr	r3, [r3, #4]
   85f90:	9215      	str	r2, [sp, #84]	; 0x54
   85f92:	9314      	str	r3, [sp, #80]	; 0x50
   85f94:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85f96:	9d15      	ldr	r5, [sp, #84]	; 0x54
   85f98:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   85f9c:	4628      	mov	r0, r5
   85f9e:	4621      	mov	r1, r4
   85fa0:	f04f 32ff 	mov.w	r2, #4294967295
   85fa4:	4b6f      	ldr	r3, [pc, #444]	; (86164 <_svfprintf_r+0x864>)
   85fa6:	f003 fa29 	bl	893fc <__aeabi_dcmpun>
   85faa:	2800      	cmp	r0, #0
   85fac:	f040 8434 	bne.w	86818 <_svfprintf_r+0xf18>
   85fb0:	4628      	mov	r0, r5
   85fb2:	4621      	mov	r1, r4
   85fb4:	f04f 32ff 	mov.w	r2, #4294967295
   85fb8:	4b6a      	ldr	r3, [pc, #424]	; (86164 <_svfprintf_r+0x864>)
   85fba:	f003 fa01 	bl	893c0 <__aeabi_dcmple>
   85fbe:	2800      	cmp	r0, #0
   85fc0:	f040 842a 	bne.w	86818 <_svfprintf_r+0xf18>
   85fc4:	a815      	add	r0, sp, #84	; 0x54
   85fc6:	c80d      	ldmia	r0, {r0, r2, r3}
   85fc8:	9914      	ldr	r1, [sp, #80]	; 0x50
   85fca:	f003 f9ef 	bl	893ac <__aeabi_dcmplt>
   85fce:	2800      	cmp	r0, #0
   85fd0:	f040 85d4 	bne.w	86b7c <_svfprintf_r+0x127c>
   85fd4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85fd8:	2303      	movs	r3, #3
   85fda:	461a      	mov	r2, r3
   85fdc:	9308      	str	r3, [sp, #32]
   85fde:	2300      	movs	r3, #0
   85fe0:	4e61      	ldr	r6, [pc, #388]	; (86168 <_svfprintf_r+0x868>)
   85fe2:	4619      	mov	r1, r3
   85fe4:	930a      	str	r3, [sp, #40]	; 0x28
   85fe6:	4b61      	ldr	r3, [pc, #388]	; (8616c <_svfprintf_r+0x86c>)
   85fe8:	920e      	str	r2, [sp, #56]	; 0x38
   85fea:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85fec:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   85ff0:	9007      	str	r0, [sp, #28]
   85ff2:	9112      	str	r1, [sp, #72]	; 0x48
   85ff4:	2a47      	cmp	r2, #71	; 0x47
   85ff6:	bfd8      	it	le
   85ff8:	461e      	movle	r6, r3
   85ffa:	e5a5      	b.n	85b48 <_svfprintf_r+0x248>
   85ffc:	f04b 0b08 	orr.w	fp, fp, #8
   86000:	f89a 3000 	ldrb.w	r3, [sl]
   86004:	e4d6      	b.n	859b4 <_svfprintf_r+0xb4>
   86006:	f04b 0b10 	orr.w	fp, fp, #16
   8600a:	9311      	str	r3, [sp, #68]	; 0x44
   8600c:	f01b 0320 	ands.w	r3, fp, #32
   86010:	f43f aebb 	beq.w	85d8a <_svfprintf_r+0x48a>
   86014:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86016:	3407      	adds	r4, #7
   86018:	f024 0307 	bic.w	r3, r4, #7
   8601c:	f103 0208 	add.w	r2, r3, #8
   86020:	e9d3 4500 	ldrd	r4, r5, [r3]
   86024:	920f      	str	r2, [sp, #60]	; 0x3c
   86026:	2300      	movs	r3, #0
   86028:	e568      	b.n	85afc <_svfprintf_r+0x1fc>
   8602a:	9311      	str	r3, [sp, #68]	; 0x44
   8602c:	2a00      	cmp	r2, #0
   8602e:	f040 86c2 	bne.w	86db6 <_svfprintf_r+0x14b6>
   86032:	4b4f      	ldr	r3, [pc, #316]	; (86170 <_svfprintf_r+0x870>)
   86034:	f01b 0f20 	tst.w	fp, #32
   86038:	9318      	str	r3, [sp, #96]	; 0x60
   8603a:	f43f af19 	beq.w	85e70 <_svfprintf_r+0x570>
   8603e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86040:	f01b 0f01 	tst.w	fp, #1
   86044:	f104 0407 	add.w	r4, r4, #7
   86048:	f024 0307 	bic.w	r3, r4, #7
   8604c:	f103 0208 	add.w	r2, r3, #8
   86050:	920f      	str	r2, [sp, #60]	; 0x3c
   86052:	e9d3 4500 	ldrd	r4, r5, [r3]
   86056:	f47f af1d 	bne.w	85e94 <_svfprintf_r+0x594>
   8605a:	2302      	movs	r3, #2
   8605c:	e54e      	b.n	85afc <_svfprintf_r+0x1fc>
   8605e:	f89a 3000 	ldrb.w	r3, [sl]
   86062:	2900      	cmp	r1, #0
   86064:	f47f aca6 	bne.w	859b4 <_svfprintf_r+0xb4>
   86068:	2201      	movs	r2, #1
   8606a:	2120      	movs	r1, #32
   8606c:	e4a2      	b.n	859b4 <_svfprintf_r+0xb4>
   8606e:	f04b 0b01 	orr.w	fp, fp, #1
   86072:	f89a 3000 	ldrb.w	r3, [sl]
   86076:	e49d      	b.n	859b4 <_svfprintf_r+0xb4>
   86078:	f89a 3000 	ldrb.w	r3, [sl]
   8607c:	2201      	movs	r2, #1
   8607e:	212b      	movs	r1, #43	; 0x2b
   86080:	e498      	b.n	859b4 <_svfprintf_r+0xb4>
   86082:	f04b 0b20 	orr.w	fp, fp, #32
   86086:	f89a 3000 	ldrb.w	r3, [sl]
   8608a:	e493      	b.n	859b4 <_svfprintf_r+0xb4>
   8608c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   86090:	f89a 3000 	ldrb.w	r3, [sl]
   86094:	e48e      	b.n	859b4 <_svfprintf_r+0xb4>
   86096:	f89a 3000 	ldrb.w	r3, [sl]
   8609a:	2b6c      	cmp	r3, #108	; 0x6c
   8609c:	bf03      	ittte	eq
   8609e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   860a2:	f04b 0b20 	orreq.w	fp, fp, #32
   860a6:	f10a 0a01 	addeq.w	sl, sl, #1
   860aa:	f04b 0b10 	orrne.w	fp, fp, #16
   860ae:	e481      	b.n	859b4 <_svfprintf_r+0xb4>
   860b0:	2a00      	cmp	r2, #0
   860b2:	f040 867c 	bne.w	86dae <_svfprintf_r+0x14ae>
   860b6:	f01b 0f20 	tst.w	fp, #32
   860ba:	f040 8452 	bne.w	86962 <_svfprintf_r+0x1062>
   860be:	f01b 0f10 	tst.w	fp, #16
   860c2:	f040 8438 	bne.w	86936 <_svfprintf_r+0x1036>
   860c6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   860ca:	f000 8434 	beq.w	86936 <_svfprintf_r+0x1036>
   860ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   860d0:	6813      	ldr	r3, [r2, #0]
   860d2:	3204      	adds	r2, #4
   860d4:	920f      	str	r2, [sp, #60]	; 0x3c
   860d6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   860da:	801a      	strh	r2, [r3, #0]
   860dc:	e437      	b.n	8594e <_svfprintf_r+0x4e>
   860de:	2378      	movs	r3, #120	; 0x78
   860e0:	2230      	movs	r2, #48	; 0x30
   860e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   860e4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   860e8:	9311      	str	r3, [sp, #68]	; 0x44
   860ea:	1d03      	adds	r3, r0, #4
   860ec:	930f      	str	r3, [sp, #60]	; 0x3c
   860ee:	4b20      	ldr	r3, [pc, #128]	; (86170 <_svfprintf_r+0x870>)
   860f0:	6804      	ldr	r4, [r0, #0]
   860f2:	9318      	str	r3, [sp, #96]	; 0x60
   860f4:	f04b 0b02 	orr.w	fp, fp, #2
   860f8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   860fc:	2500      	movs	r5, #0
   860fe:	2302      	movs	r3, #2
   86100:	e4fc      	b.n	85afc <_svfprintf_r+0x1fc>
   86102:	9311      	str	r3, [sp, #68]	; 0x44
   86104:	2a00      	cmp	r2, #0
   86106:	f43f aeef 	beq.w	85ee8 <_svfprintf_r+0x5e8>
   8610a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8610e:	e6eb      	b.n	85ee8 <_svfprintf_r+0x5e8>
   86110:	2000      	movs	r0, #0
   86112:	4604      	mov	r4, r0
   86114:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86118:	f81a 3b01 	ldrb.w	r3, [sl], #1
   8611c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   86120:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   86124:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86128:	2809      	cmp	r0, #9
   8612a:	d9f5      	bls.n	86118 <_svfprintf_r+0x818>
   8612c:	940d      	str	r4, [sp, #52]	; 0x34
   8612e:	e443      	b.n	859b8 <_svfprintf_r+0xb8>
   86130:	9311      	str	r3, [sp, #68]	; 0x44
   86132:	2a00      	cmp	r2, #0
   86134:	f040 864a 	bne.w	86dcc <_svfprintf_r+0x14cc>
   86138:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8613a:	2a00      	cmp	r2, #0
   8613c:	f43f acb6 	beq.w	85aac <_svfprintf_r+0x1ac>
   86140:	2300      	movs	r3, #0
   86142:	2101      	movs	r1, #1
   86144:	461f      	mov	r7, r3
   86146:	9108      	str	r1, [sp, #32]
   86148:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   8614c:	f8cd b01c 	str.w	fp, [sp, #28]
   86150:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   86154:	930a      	str	r3, [sp, #40]	; 0x28
   86156:	9312      	str	r3, [sp, #72]	; 0x48
   86158:	910e      	str	r1, [sp, #56]	; 0x38
   8615a:	ae28      	add	r6, sp, #160	; 0xa0
   8615c:	e4f8      	b.n	85b50 <_svfprintf_r+0x250>
   8615e:	bf00      	nop
   86160:	00089958 	.word	0x00089958
   86164:	7fefffff 	.word	0x7fefffff
   86168:	0008994c 	.word	0x0008994c
   8616c:	00089948 	.word	0x00089948
   86170:	0008996c 	.word	0x0008996c
   86174:	aa25      	add	r2, sp, #148	; 0x94
   86176:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86178:	980c      	ldr	r0, [sp, #48]	; 0x30
   8617a:	f002 fc35 	bl	889e8 <__ssprint_r>
   8617e:	2800      	cmp	r0, #0
   86180:	f47f ac9b 	bne.w	85aba <_svfprintf_r+0x1ba>
   86184:	46c8      	mov	r8, r9
   86186:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8618a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8618c:	e533      	b.n	85bf6 <_svfprintf_r+0x2f6>
   8618e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86190:	2b65      	cmp	r3, #101	; 0x65
   86192:	f340 809a 	ble.w	862ca <_svfprintf_r+0x9ca>
   86196:	a815      	add	r0, sp, #84	; 0x54
   86198:	c80d      	ldmia	r0, {r0, r2, r3}
   8619a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8619c:	f003 f8fc 	bl	89398 <__aeabi_dcmpeq>
   861a0:	2800      	cmp	r0, #0
   861a2:	f000 8193 	beq.w	864cc <_svfprintf_r+0xbcc>
   861a6:	2101      	movs	r1, #1
   861a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   861aa:	4ab5      	ldr	r2, [pc, #724]	; (86480 <_svfprintf_r+0xb80>)
   861ac:	440b      	add	r3, r1
   861ae:	440c      	add	r4, r1
   861b0:	2b07      	cmp	r3, #7
   861b2:	9427      	str	r4, [sp, #156]	; 0x9c
   861b4:	9326      	str	r3, [sp, #152]	; 0x98
   861b6:	f8c8 1004 	str.w	r1, [r8, #4]
   861ba:	f8c8 2000 	str.w	r2, [r8]
   861be:	f300 83c6 	bgt.w	8694e <_svfprintf_r+0x104e>
   861c2:	f108 0808 	add.w	r8, r8, #8
   861c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   861c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   861ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   861cc:	4293      	cmp	r3, r2
   861ce:	db03      	blt.n	861d8 <_svfprintf_r+0x8d8>
   861d0:	9b07      	ldr	r3, [sp, #28]
   861d2:	07dd      	lsls	r5, r3, #31
   861d4:	f57f ad86 	bpl.w	85ce4 <_svfprintf_r+0x3e4>
   861d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   861da:	9919      	ldr	r1, [sp, #100]	; 0x64
   861dc:	3301      	adds	r3, #1
   861de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   861e0:	440c      	add	r4, r1
   861e2:	2b07      	cmp	r3, #7
   861e4:	f8c8 2000 	str.w	r2, [r8]
   861e8:	f8c8 1004 	str.w	r1, [r8, #4]
   861ec:	9427      	str	r4, [sp, #156]	; 0x9c
   861ee:	9326      	str	r3, [sp, #152]	; 0x98
   861f0:	f300 83c4 	bgt.w	8697c <_svfprintf_r+0x107c>
   861f4:	f108 0808 	add.w	r8, r8, #8
   861f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   861fa:	1e5e      	subs	r6, r3, #1
   861fc:	2e00      	cmp	r6, #0
   861fe:	f77f ad71 	ble.w	85ce4 <_svfprintf_r+0x3e4>
   86202:	2e10      	cmp	r6, #16
   86204:	f340 8575 	ble.w	86cf2 <_svfprintf_r+0x13f2>
   86208:	4622      	mov	r2, r4
   8620a:	2710      	movs	r7, #16
   8620c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8620e:	4d9d      	ldr	r5, [pc, #628]	; (86484 <_svfprintf_r+0xb84>)
   86210:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86214:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86216:	e005      	b.n	86224 <_svfprintf_r+0x924>
   86218:	f108 0808 	add.w	r8, r8, #8
   8621c:	3e10      	subs	r6, #16
   8621e:	2e10      	cmp	r6, #16
   86220:	f340 8225 	ble.w	8666e <_svfprintf_r+0xd6e>
   86224:	3301      	adds	r3, #1
   86226:	3210      	adds	r2, #16
   86228:	2b07      	cmp	r3, #7
   8622a:	9227      	str	r2, [sp, #156]	; 0x9c
   8622c:	9326      	str	r3, [sp, #152]	; 0x98
   8622e:	e888 00a0 	stmia.w	r8, {r5, r7}
   86232:	ddf1      	ble.n	86218 <_svfprintf_r+0x918>
   86234:	aa25      	add	r2, sp, #148	; 0x94
   86236:	4621      	mov	r1, r4
   86238:	4658      	mov	r0, fp
   8623a:	f002 fbd5 	bl	889e8 <__ssprint_r>
   8623e:	2800      	cmp	r0, #0
   86240:	f47f ac3b 	bne.w	85aba <_svfprintf_r+0x1ba>
   86244:	46c8      	mov	r8, r9
   86246:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86248:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8624a:	e7e7      	b.n	8621c <_svfprintf_r+0x91c>
   8624c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8624e:	9a08      	ldr	r2, [sp, #32]
   86250:	1a9f      	subs	r7, r3, r2
   86252:	2f00      	cmp	r7, #0
   86254:	f77f acf6 	ble.w	85c44 <_svfprintf_r+0x344>
   86258:	2f10      	cmp	r7, #16
   8625a:	f340 84a8 	ble.w	86bae <_svfprintf_r+0x12ae>
   8625e:	4d89      	ldr	r5, [pc, #548]	; (86484 <_svfprintf_r+0xb84>)
   86260:	4642      	mov	r2, r8
   86262:	4621      	mov	r1, r4
   86264:	46b0      	mov	r8, r6
   86266:	f04f 0b10 	mov.w	fp, #16
   8626a:	462e      	mov	r6, r5
   8626c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8626e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86270:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   86272:	e004      	b.n	8627e <_svfprintf_r+0x97e>
   86274:	3f10      	subs	r7, #16
   86276:	2f10      	cmp	r7, #16
   86278:	f102 0208 	add.w	r2, r2, #8
   8627c:	dd15      	ble.n	862aa <_svfprintf_r+0x9aa>
   8627e:	3301      	adds	r3, #1
   86280:	3110      	adds	r1, #16
   86282:	2b07      	cmp	r3, #7
   86284:	9127      	str	r1, [sp, #156]	; 0x9c
   86286:	9326      	str	r3, [sp, #152]	; 0x98
   86288:	e882 0840 	stmia.w	r2, {r6, fp}
   8628c:	ddf2      	ble.n	86274 <_svfprintf_r+0x974>
   8628e:	aa25      	add	r2, sp, #148	; 0x94
   86290:	4629      	mov	r1, r5
   86292:	4620      	mov	r0, r4
   86294:	f002 fba8 	bl	889e8 <__ssprint_r>
   86298:	2800      	cmp	r0, #0
   8629a:	f47f ac0e 	bne.w	85aba <_svfprintf_r+0x1ba>
   8629e:	3f10      	subs	r7, #16
   862a0:	2f10      	cmp	r7, #16
   862a2:	464a      	mov	r2, r9
   862a4:	9927      	ldr	r1, [sp, #156]	; 0x9c
   862a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   862a8:	dce9      	bgt.n	8627e <_svfprintf_r+0x97e>
   862aa:	4635      	mov	r5, r6
   862ac:	460c      	mov	r4, r1
   862ae:	4646      	mov	r6, r8
   862b0:	4690      	mov	r8, r2
   862b2:	3301      	adds	r3, #1
   862b4:	443c      	add	r4, r7
   862b6:	2b07      	cmp	r3, #7
   862b8:	9427      	str	r4, [sp, #156]	; 0x9c
   862ba:	9326      	str	r3, [sp, #152]	; 0x98
   862bc:	e888 00a0 	stmia.w	r8, {r5, r7}
   862c0:	f300 829e 	bgt.w	86800 <_svfprintf_r+0xf00>
   862c4:	f108 0808 	add.w	r8, r8, #8
   862c8:	e4bc      	b.n	85c44 <_svfprintf_r+0x344>
   862ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   862cc:	2b01      	cmp	r3, #1
   862ce:	f340 824f 	ble.w	86770 <_svfprintf_r+0xe70>
   862d2:	2301      	movs	r3, #1
   862d4:	9f26      	ldr	r7, [sp, #152]	; 0x98
   862d6:	441c      	add	r4, r3
   862d8:	441f      	add	r7, r3
   862da:	2f07      	cmp	r7, #7
   862dc:	9427      	str	r4, [sp, #156]	; 0x9c
   862de:	f8c8 6000 	str.w	r6, [r8]
   862e2:	9726      	str	r7, [sp, #152]	; 0x98
   862e4:	f8c8 3004 	str.w	r3, [r8, #4]
   862e8:	f300 825f 	bgt.w	867aa <_svfprintf_r+0xeaa>
   862ec:	f108 0808 	add.w	r8, r8, #8
   862f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   862f2:	3701      	adds	r7, #1
   862f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   862f6:	4414      	add	r4, r2
   862f8:	2f07      	cmp	r7, #7
   862fa:	9427      	str	r4, [sp, #156]	; 0x9c
   862fc:	9726      	str	r7, [sp, #152]	; 0x98
   862fe:	f8c8 3000 	str.w	r3, [r8]
   86302:	f8c8 2004 	str.w	r2, [r8, #4]
   86306:	f300 825c 	bgt.w	867c2 <_svfprintf_r+0xec2>
   8630a:	f108 0808 	add.w	r8, r8, #8
   8630e:	a815      	add	r0, sp, #84	; 0x54
   86310:	c80d      	ldmia	r0, {r0, r2, r3}
   86312:	9914      	ldr	r1, [sp, #80]	; 0x50
   86314:	f003 f840 	bl	89398 <__aeabi_dcmpeq>
   86318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8631a:	2800      	cmp	r0, #0
   8631c:	f040 8141 	bne.w	865a2 <_svfprintf_r+0xca2>
   86320:	3b01      	subs	r3, #1
   86322:	3701      	adds	r7, #1
   86324:	3601      	adds	r6, #1
   86326:	441c      	add	r4, r3
   86328:	2f07      	cmp	r7, #7
   8632a:	f8c8 6000 	str.w	r6, [r8]
   8632e:	9726      	str	r7, [sp, #152]	; 0x98
   86330:	9427      	str	r4, [sp, #156]	; 0x9c
   86332:	f8c8 3004 	str.w	r3, [r8, #4]
   86336:	f300 8166 	bgt.w	86606 <_svfprintf_r+0xd06>
   8633a:	f108 0808 	add.w	r8, r8, #8
   8633e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   86340:	3701      	adds	r7, #1
   86342:	4414      	add	r4, r2
   86344:	ab21      	add	r3, sp, #132	; 0x84
   86346:	2f07      	cmp	r7, #7
   86348:	9427      	str	r4, [sp, #156]	; 0x9c
   8634a:	9726      	str	r7, [sp, #152]	; 0x98
   8634c:	f8c8 2004 	str.w	r2, [r8, #4]
   86350:	f8c8 3000 	str.w	r3, [r8]
   86354:	f77f acc4 	ble.w	85ce0 <_svfprintf_r+0x3e0>
   86358:	aa25      	add	r2, sp, #148	; 0x94
   8635a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8635c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8635e:	f002 fb43 	bl	889e8 <__ssprint_r>
   86362:	2800      	cmp	r0, #0
   86364:	f47f aba9 	bne.w	85aba <_svfprintf_r+0x1ba>
   86368:	46c8      	mov	r8, r9
   8636a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8636c:	e4ba      	b.n	85ce4 <_svfprintf_r+0x3e4>
   8636e:	aa25      	add	r2, sp, #148	; 0x94
   86370:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86372:	980c      	ldr	r0, [sp, #48]	; 0x30
   86374:	f002 fb38 	bl	889e8 <__ssprint_r>
   86378:	2800      	cmp	r0, #0
   8637a:	f43f acfd 	beq.w	85d78 <_svfprintf_r+0x478>
   8637e:	f7ff bb9c 	b.w	85aba <_svfprintf_r+0x1ba>
   86382:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86386:	2b01      	cmp	r3, #1
   86388:	f000 817e 	beq.w	86688 <_svfprintf_r+0xd88>
   8638c:	2b02      	cmp	r3, #2
   8638e:	d171      	bne.n	86474 <_svfprintf_r+0xb74>
   86390:	f8cd b01c 	str.w	fp, [sp, #28]
   86394:	2400      	movs	r4, #0
   86396:	2500      	movs	r5, #0
   86398:	e5d4      	b.n	85f44 <_svfprintf_r+0x644>
   8639a:	aa25      	add	r2, sp, #148	; 0x94
   8639c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8639e:	980c      	ldr	r0, [sp, #48]	; 0x30
   863a0:	f002 fb22 	bl	889e8 <__ssprint_r>
   863a4:	2800      	cmp	r0, #0
   863a6:	f47f ab88 	bne.w	85aba <_svfprintf_r+0x1ba>
   863aa:	46c8      	mov	r8, r9
   863ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   863ae:	e486      	b.n	85cbe <_svfprintf_r+0x3be>
   863b0:	aa25      	add	r2, sp, #148	; 0x94
   863b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   863b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   863b6:	f002 fb17 	bl	889e8 <__ssprint_r>
   863ba:	2800      	cmp	r0, #0
   863bc:	f47f ab7d 	bne.w	85aba <_svfprintf_r+0x1ba>
   863c0:	46c8      	mov	r8, r9
   863c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   863c4:	e429      	b.n	85c1a <_svfprintf_r+0x31a>
   863c6:	2001      	movs	r0, #1
   863c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   863ca:	4a2d      	ldr	r2, [pc, #180]	; (86480 <_svfprintf_r+0xb80>)
   863cc:	4403      	add	r3, r0
   863ce:	4404      	add	r4, r0
   863d0:	2b07      	cmp	r3, #7
   863d2:	9427      	str	r4, [sp, #156]	; 0x9c
   863d4:	9326      	str	r3, [sp, #152]	; 0x98
   863d6:	f8c8 0004 	str.w	r0, [r8, #4]
   863da:	f8c8 2000 	str.w	r2, [r8]
   863de:	f340 82d8 	ble.w	86992 <_svfprintf_r+0x1092>
   863e2:	aa25      	add	r2, sp, #148	; 0x94
   863e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   863e6:	980c      	ldr	r0, [sp, #48]	; 0x30
   863e8:	f002 fafe 	bl	889e8 <__ssprint_r>
   863ec:	2800      	cmp	r0, #0
   863ee:	f47f ab64 	bne.w	85aba <_svfprintf_r+0x1ba>
   863f2:	46c8      	mov	r8, r9
   863f4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   863f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   863f8:	b929      	cbnz	r1, 86406 <_svfprintf_r+0xb06>
   863fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   863fc:	b91b      	cbnz	r3, 86406 <_svfprintf_r+0xb06>
   863fe:	9b07      	ldr	r3, [sp, #28]
   86400:	07d8      	lsls	r0, r3, #31
   86402:	f57f ac6f 	bpl.w	85ce4 <_svfprintf_r+0x3e4>
   86406:	9819      	ldr	r0, [sp, #100]	; 0x64
   86408:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8640a:	4602      	mov	r2, r0
   8640c:	3301      	adds	r3, #1
   8640e:	4422      	add	r2, r4
   86410:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   86412:	2b07      	cmp	r3, #7
   86414:	9227      	str	r2, [sp, #156]	; 0x9c
   86416:	f8c8 4000 	str.w	r4, [r8]
   8641a:	f8c8 0004 	str.w	r0, [r8, #4]
   8641e:	9326      	str	r3, [sp, #152]	; 0x98
   86420:	f300 8431 	bgt.w	86c86 <_svfprintf_r+0x1386>
   86424:	f108 0808 	add.w	r8, r8, #8
   86428:	2900      	cmp	r1, #0
   8642a:	f2c0 8409 	blt.w	86c40 <_svfprintf_r+0x1340>
   8642e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   86430:	3301      	adds	r3, #1
   86432:	188c      	adds	r4, r1, r2
   86434:	2b07      	cmp	r3, #7
   86436:	9427      	str	r4, [sp, #156]	; 0x9c
   86438:	9326      	str	r3, [sp, #152]	; 0x98
   8643a:	f8c8 6000 	str.w	r6, [r8]
   8643e:	f8c8 1004 	str.w	r1, [r8, #4]
   86442:	f77f ac4d 	ble.w	85ce0 <_svfprintf_r+0x3e0>
   86446:	aa25      	add	r2, sp, #148	; 0x94
   86448:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8644a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8644c:	f002 facc 	bl	889e8 <__ssprint_r>
   86450:	2800      	cmp	r0, #0
   86452:	f47f ab32 	bne.w	85aba <_svfprintf_r+0x1ba>
   86456:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86458:	46c8      	mov	r8, r9
   8645a:	e443      	b.n	85ce4 <_svfprintf_r+0x3e4>
   8645c:	aa25      	add	r2, sp, #148	; 0x94
   8645e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86460:	980c      	ldr	r0, [sp, #48]	; 0x30
   86462:	f002 fac1 	bl	889e8 <__ssprint_r>
   86466:	2800      	cmp	r0, #0
   86468:	f47f ab27 	bne.w	85aba <_svfprintf_r+0x1ba>
   8646c:	46c8      	mov	r8, r9
   8646e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86470:	f7ff bbe5 	b.w	85c3e <_svfprintf_r+0x33e>
   86474:	2400      	movs	r4, #0
   86476:	2500      	movs	r5, #0
   86478:	f8cd b01c 	str.w	fp, [sp, #28]
   8647c:	4649      	mov	r1, r9
   8647e:	e004      	b.n	8648a <_svfprintf_r+0xb8a>
   86480:	00089988 	.word	0x00089988
   86484:	0008999c 	.word	0x0008999c
   86488:	4631      	mov	r1, r6
   8648a:	08e2      	lsrs	r2, r4, #3
   8648c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   86490:	08e8      	lsrs	r0, r5, #3
   86492:	f004 0307 	and.w	r3, r4, #7
   86496:	4605      	mov	r5, r0
   86498:	4614      	mov	r4, r2
   8649a:	3330      	adds	r3, #48	; 0x30
   8649c:	ea54 0205 	orrs.w	r2, r4, r5
   864a0:	f801 3c01 	strb.w	r3, [r1, #-1]
   864a4:	f101 36ff 	add.w	r6, r1, #4294967295
   864a8:	d1ee      	bne.n	86488 <_svfprintf_r+0xb88>
   864aa:	9a07      	ldr	r2, [sp, #28]
   864ac:	07d2      	lsls	r2, r2, #31
   864ae:	f57f ad59 	bpl.w	85f64 <_svfprintf_r+0x664>
   864b2:	2b30      	cmp	r3, #48	; 0x30
   864b4:	f43f ad56 	beq.w	85f64 <_svfprintf_r+0x664>
   864b8:	2330      	movs	r3, #48	; 0x30
   864ba:	3902      	subs	r1, #2
   864bc:	f806 3c01 	strb.w	r3, [r6, #-1]
   864c0:	eba9 0301 	sub.w	r3, r9, r1
   864c4:	930e      	str	r3, [sp, #56]	; 0x38
   864c6:	460e      	mov	r6, r1
   864c8:	f7ff bb36 	b.w	85b38 <_svfprintf_r+0x238>
   864cc:	991f      	ldr	r1, [sp, #124]	; 0x7c
   864ce:	2900      	cmp	r1, #0
   864d0:	f77f af79 	ble.w	863c6 <_svfprintf_r+0xac6>
   864d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   864d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   864d8:	4293      	cmp	r3, r2
   864da:	bfa8      	it	ge
   864dc:	4613      	movge	r3, r2
   864de:	2b00      	cmp	r3, #0
   864e0:	461f      	mov	r7, r3
   864e2:	dd0b      	ble.n	864fc <_svfprintf_r+0xbfc>
   864e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   864e6:	443c      	add	r4, r7
   864e8:	3301      	adds	r3, #1
   864ea:	2b07      	cmp	r3, #7
   864ec:	9427      	str	r4, [sp, #156]	; 0x9c
   864ee:	e888 00c0 	stmia.w	r8, {r6, r7}
   864f2:	9326      	str	r3, [sp, #152]	; 0x98
   864f4:	f300 82fb 	bgt.w	86aee <_svfprintf_r+0x11ee>
   864f8:	f108 0808 	add.w	r8, r8, #8
   864fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   864fe:	2f00      	cmp	r7, #0
   86500:	bfa8      	it	ge
   86502:	1bdb      	subge	r3, r3, r7
   86504:	2b00      	cmp	r3, #0
   86506:	461f      	mov	r7, r3
   86508:	f340 80d7 	ble.w	866ba <_svfprintf_r+0xdba>
   8650c:	2b10      	cmp	r3, #16
   8650e:	f340 8434 	ble.w	86d7a <_svfprintf_r+0x147a>
   86512:	4dba      	ldr	r5, [pc, #744]	; (867fc <_svfprintf_r+0xefc>)
   86514:	4642      	mov	r2, r8
   86516:	4621      	mov	r1, r4
   86518:	46b0      	mov	r8, r6
   8651a:	f04f 0b10 	mov.w	fp, #16
   8651e:	462e      	mov	r6, r5
   86520:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86522:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86524:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   86526:	e004      	b.n	86532 <_svfprintf_r+0xc32>
   86528:	3208      	adds	r2, #8
   8652a:	3f10      	subs	r7, #16
   8652c:	2f10      	cmp	r7, #16
   8652e:	f340 80b5 	ble.w	8669c <_svfprintf_r+0xd9c>
   86532:	3301      	adds	r3, #1
   86534:	3110      	adds	r1, #16
   86536:	2b07      	cmp	r3, #7
   86538:	9127      	str	r1, [sp, #156]	; 0x9c
   8653a:	9326      	str	r3, [sp, #152]	; 0x98
   8653c:	e882 0840 	stmia.w	r2, {r6, fp}
   86540:	ddf2      	ble.n	86528 <_svfprintf_r+0xc28>
   86542:	aa25      	add	r2, sp, #148	; 0x94
   86544:	4629      	mov	r1, r5
   86546:	4620      	mov	r0, r4
   86548:	f002 fa4e 	bl	889e8 <__ssprint_r>
   8654c:	2800      	cmp	r0, #0
   8654e:	f47f aab4 	bne.w	85aba <_svfprintf_r+0x1ba>
   86552:	464a      	mov	r2, r9
   86554:	9927      	ldr	r1, [sp, #156]	; 0x9c
   86556:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86558:	e7e7      	b.n	8652a <_svfprintf_r+0xc2a>
   8655a:	2d00      	cmp	r5, #0
   8655c:	bf08      	it	eq
   8655e:	2c0a      	cmpeq	r4, #10
   86560:	f0c0 8090 	bcc.w	86684 <_svfprintf_r+0xd84>
   86564:	464e      	mov	r6, r9
   86566:	4620      	mov	r0, r4
   86568:	4629      	mov	r1, r5
   8656a:	220a      	movs	r2, #10
   8656c:	2300      	movs	r3, #0
   8656e:	f002 ff83 	bl	89478 <__aeabi_uldivmod>
   86572:	3230      	adds	r2, #48	; 0x30
   86574:	f806 2d01 	strb.w	r2, [r6, #-1]!
   86578:	4620      	mov	r0, r4
   8657a:	4629      	mov	r1, r5
   8657c:	2300      	movs	r3, #0
   8657e:	220a      	movs	r2, #10
   86580:	f002 ff7a 	bl	89478 <__aeabi_uldivmod>
   86584:	4604      	mov	r4, r0
   86586:	460d      	mov	r5, r1
   86588:	ea54 0305 	orrs.w	r3, r4, r5
   8658c:	d1eb      	bne.n	86566 <_svfprintf_r+0xc66>
   8658e:	eba9 0306 	sub.w	r3, r9, r6
   86592:	930e      	str	r3, [sp, #56]	; 0x38
   86594:	f7ff bad0 	b.w	85b38 <_svfprintf_r+0x238>
   86598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8659a:	464e      	mov	r6, r9
   8659c:	930e      	str	r3, [sp, #56]	; 0x38
   8659e:	f7ff bacb 	b.w	85b38 <_svfprintf_r+0x238>
   865a2:	1e5e      	subs	r6, r3, #1
   865a4:	2e00      	cmp	r6, #0
   865a6:	f77f aeca 	ble.w	8633e <_svfprintf_r+0xa3e>
   865aa:	2e10      	cmp	r6, #16
   865ac:	f340 83e3 	ble.w	86d76 <_svfprintf_r+0x1476>
   865b0:	4622      	mov	r2, r4
   865b2:	f04f 0b10 	mov.w	fp, #16
   865b6:	4d91      	ldr	r5, [pc, #580]	; (867fc <_svfprintf_r+0xefc>)
   865b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   865ba:	e004      	b.n	865c6 <_svfprintf_r+0xcc6>
   865bc:	3e10      	subs	r6, #16
   865be:	2e10      	cmp	r6, #16
   865c0:	f108 0808 	add.w	r8, r8, #8
   865c4:	dd15      	ble.n	865f2 <_svfprintf_r+0xcf2>
   865c6:	3701      	adds	r7, #1
   865c8:	3210      	adds	r2, #16
   865ca:	2f07      	cmp	r7, #7
   865cc:	9227      	str	r2, [sp, #156]	; 0x9c
   865ce:	9726      	str	r7, [sp, #152]	; 0x98
   865d0:	e888 0820 	stmia.w	r8, {r5, fp}
   865d4:	ddf2      	ble.n	865bc <_svfprintf_r+0xcbc>
   865d6:	aa25      	add	r2, sp, #148	; 0x94
   865d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   865da:	4620      	mov	r0, r4
   865dc:	f002 fa04 	bl	889e8 <__ssprint_r>
   865e0:	2800      	cmp	r0, #0
   865e2:	f47f aa6a 	bne.w	85aba <_svfprintf_r+0x1ba>
   865e6:	3e10      	subs	r6, #16
   865e8:	2e10      	cmp	r6, #16
   865ea:	46c8      	mov	r8, r9
   865ec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   865ee:	9f26      	ldr	r7, [sp, #152]	; 0x98
   865f0:	dce9      	bgt.n	865c6 <_svfprintf_r+0xcc6>
   865f2:	4614      	mov	r4, r2
   865f4:	3701      	adds	r7, #1
   865f6:	4434      	add	r4, r6
   865f8:	2f07      	cmp	r7, #7
   865fa:	9427      	str	r4, [sp, #156]	; 0x9c
   865fc:	9726      	str	r7, [sp, #152]	; 0x98
   865fe:	e888 0060 	stmia.w	r8, {r5, r6}
   86602:	f77f ae9a 	ble.w	8633a <_svfprintf_r+0xa3a>
   86606:	aa25      	add	r2, sp, #148	; 0x94
   86608:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8660a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8660c:	f002 f9ec 	bl	889e8 <__ssprint_r>
   86610:	2800      	cmp	r0, #0
   86612:	f47f aa52 	bne.w	85aba <_svfprintf_r+0x1ba>
   86616:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86618:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8661a:	46c8      	mov	r8, r9
   8661c:	e68f      	b.n	8633e <_svfprintf_r+0xa3e>
   8661e:	3204      	adds	r2, #4
   86620:	681c      	ldr	r4, [r3, #0]
   86622:	2500      	movs	r5, #0
   86624:	2301      	movs	r3, #1
   86626:	920f      	str	r2, [sp, #60]	; 0x3c
   86628:	f7ff ba68 	b.w	85afc <_svfprintf_r+0x1fc>
   8662c:	681c      	ldr	r4, [r3, #0]
   8662e:	3304      	adds	r3, #4
   86630:	930f      	str	r3, [sp, #60]	; 0x3c
   86632:	2500      	movs	r5, #0
   86634:	e42a      	b.n	85e8c <_svfprintf_r+0x58c>
   86636:	681c      	ldr	r4, [r3, #0]
   86638:	3304      	adds	r3, #4
   8663a:	17e5      	asrs	r5, r4, #31
   8663c:	4622      	mov	r2, r4
   8663e:	930f      	str	r3, [sp, #60]	; 0x3c
   86640:	462b      	mov	r3, r5
   86642:	2a00      	cmp	r2, #0
   86644:	f173 0300 	sbcs.w	r3, r3, #0
   86648:	f6bf ac68 	bge.w	85f1c <_svfprintf_r+0x61c>
   8664c:	272d      	movs	r7, #45	; 0x2d
   8664e:	4264      	negs	r4, r4
   86650:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   86654:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   86658:	2301      	movs	r3, #1
   8665a:	f7ff ba53 	b.w	85b04 <_svfprintf_r+0x204>
   8665e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86660:	2500      	movs	r5, #0
   86662:	460a      	mov	r2, r1
   86664:	3204      	adds	r2, #4
   86666:	680c      	ldr	r4, [r1, #0]
   86668:	920f      	str	r2, [sp, #60]	; 0x3c
   8666a:	f7ff ba47 	b.w	85afc <_svfprintf_r+0x1fc>
   8666e:	4614      	mov	r4, r2
   86670:	3301      	adds	r3, #1
   86672:	4434      	add	r4, r6
   86674:	2b07      	cmp	r3, #7
   86676:	9427      	str	r4, [sp, #156]	; 0x9c
   86678:	9326      	str	r3, [sp, #152]	; 0x98
   8667a:	e888 0060 	stmia.w	r8, {r5, r6}
   8667e:	f77f ab2f 	ble.w	85ce0 <_svfprintf_r+0x3e0>
   86682:	e6e0      	b.n	86446 <_svfprintf_r+0xb46>
   86684:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86688:	2301      	movs	r3, #1
   8668a:	ae42      	add	r6, sp, #264	; 0x108
   8668c:	3430      	adds	r4, #48	; 0x30
   8668e:	f8cd b01c 	str.w	fp, [sp, #28]
   86692:	f806 4d41 	strb.w	r4, [r6, #-65]!
   86696:	930e      	str	r3, [sp, #56]	; 0x38
   86698:	f7ff ba4e 	b.w	85b38 <_svfprintf_r+0x238>
   8669c:	4635      	mov	r5, r6
   8669e:	460c      	mov	r4, r1
   866a0:	4646      	mov	r6, r8
   866a2:	4690      	mov	r8, r2
   866a4:	3301      	adds	r3, #1
   866a6:	443c      	add	r4, r7
   866a8:	2b07      	cmp	r3, #7
   866aa:	9427      	str	r4, [sp, #156]	; 0x9c
   866ac:	9326      	str	r3, [sp, #152]	; 0x98
   866ae:	e888 00a0 	stmia.w	r8, {r5, r7}
   866b2:	f300 8246 	bgt.w	86b42 <_svfprintf_r+0x1242>
   866b6:	f108 0808 	add.w	r8, r8, #8
   866ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   866bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   866be:	429a      	cmp	r2, r3
   866c0:	db45      	blt.n	8674e <_svfprintf_r+0xe4e>
   866c2:	9b07      	ldr	r3, [sp, #28]
   866c4:	07d9      	lsls	r1, r3, #31
   866c6:	d442      	bmi.n	8674e <_svfprintf_r+0xe4e>
   866c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   866ca:	9812      	ldr	r0, [sp, #72]	; 0x48
   866cc:	1a9a      	subs	r2, r3, r2
   866ce:	1a1d      	subs	r5, r3, r0
   866d0:	4295      	cmp	r5, r2
   866d2:	bfa8      	it	ge
   866d4:	4615      	movge	r5, r2
   866d6:	2d00      	cmp	r5, #0
   866d8:	dd0e      	ble.n	866f8 <_svfprintf_r+0xdf8>
   866da:	9926      	ldr	r1, [sp, #152]	; 0x98
   866dc:	4406      	add	r6, r0
   866de:	3101      	adds	r1, #1
   866e0:	442c      	add	r4, r5
   866e2:	2907      	cmp	r1, #7
   866e4:	f8c8 6000 	str.w	r6, [r8]
   866e8:	9427      	str	r4, [sp, #156]	; 0x9c
   866ea:	f8c8 5004 	str.w	r5, [r8, #4]
   866ee:	9126      	str	r1, [sp, #152]	; 0x98
   866f0:	f300 8216 	bgt.w	86b20 <_svfprintf_r+0x1220>
   866f4:	f108 0808 	add.w	r8, r8, #8
   866f8:	2d00      	cmp	r5, #0
   866fa:	bfb4      	ite	lt
   866fc:	4616      	movlt	r6, r2
   866fe:	1b56      	subge	r6, r2, r5
   86700:	2e00      	cmp	r6, #0
   86702:	f77f aaef 	ble.w	85ce4 <_svfprintf_r+0x3e4>
   86706:	2e10      	cmp	r6, #16
   86708:	f340 82f3 	ble.w	86cf2 <_svfprintf_r+0x13f2>
   8670c:	4622      	mov	r2, r4
   8670e:	2710      	movs	r7, #16
   86710:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86712:	4d3a      	ldr	r5, [pc, #232]	; (867fc <_svfprintf_r+0xefc>)
   86714:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86718:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8671a:	e004      	b.n	86726 <_svfprintf_r+0xe26>
   8671c:	f108 0808 	add.w	r8, r8, #8
   86720:	3e10      	subs	r6, #16
   86722:	2e10      	cmp	r6, #16
   86724:	dda3      	ble.n	8666e <_svfprintf_r+0xd6e>
   86726:	3301      	adds	r3, #1
   86728:	3210      	adds	r2, #16
   8672a:	2b07      	cmp	r3, #7
   8672c:	9227      	str	r2, [sp, #156]	; 0x9c
   8672e:	9326      	str	r3, [sp, #152]	; 0x98
   86730:	e888 00a0 	stmia.w	r8, {r5, r7}
   86734:	ddf2      	ble.n	8671c <_svfprintf_r+0xe1c>
   86736:	aa25      	add	r2, sp, #148	; 0x94
   86738:	4621      	mov	r1, r4
   8673a:	4658      	mov	r0, fp
   8673c:	f002 f954 	bl	889e8 <__ssprint_r>
   86740:	2800      	cmp	r0, #0
   86742:	f47f a9ba 	bne.w	85aba <_svfprintf_r+0x1ba>
   86746:	46c8      	mov	r8, r9
   86748:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8674a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8674c:	e7e8      	b.n	86720 <_svfprintf_r+0xe20>
   8674e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86750:	9819      	ldr	r0, [sp, #100]	; 0x64
   86752:	3301      	adds	r3, #1
   86754:	991a      	ldr	r1, [sp, #104]	; 0x68
   86756:	4404      	add	r4, r0
   86758:	2b07      	cmp	r3, #7
   8675a:	9427      	str	r4, [sp, #156]	; 0x9c
   8675c:	f8c8 1000 	str.w	r1, [r8]
   86760:	f8c8 0004 	str.w	r0, [r8, #4]
   86764:	9326      	str	r3, [sp, #152]	; 0x98
   86766:	f300 81cf 	bgt.w	86b08 <_svfprintf_r+0x1208>
   8676a:	f108 0808 	add.w	r8, r8, #8
   8676e:	e7ab      	b.n	866c8 <_svfprintf_r+0xdc8>
   86770:	9b07      	ldr	r3, [sp, #28]
   86772:	07da      	lsls	r2, r3, #31
   86774:	f53f adad 	bmi.w	862d2 <_svfprintf_r+0x9d2>
   86778:	2301      	movs	r3, #1
   8677a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8677c:	441c      	add	r4, r3
   8677e:	441f      	add	r7, r3
   86780:	2f07      	cmp	r7, #7
   86782:	9427      	str	r4, [sp, #156]	; 0x9c
   86784:	f8c8 6000 	str.w	r6, [r8]
   86788:	9726      	str	r7, [sp, #152]	; 0x98
   8678a:	f8c8 3004 	str.w	r3, [r8, #4]
   8678e:	f77f add4 	ble.w	8633a <_svfprintf_r+0xa3a>
   86792:	aa25      	add	r2, sp, #148	; 0x94
   86794:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86796:	980c      	ldr	r0, [sp, #48]	; 0x30
   86798:	f002 f926 	bl	889e8 <__ssprint_r>
   8679c:	2800      	cmp	r0, #0
   8679e:	f47f a98c 	bne.w	85aba <_svfprintf_r+0x1ba>
   867a2:	46c8      	mov	r8, r9
   867a4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   867a6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   867a8:	e5c9      	b.n	8633e <_svfprintf_r+0xa3e>
   867aa:	aa25      	add	r2, sp, #148	; 0x94
   867ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   867ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   867b0:	f002 f91a 	bl	889e8 <__ssprint_r>
   867b4:	2800      	cmp	r0, #0
   867b6:	f47f a980 	bne.w	85aba <_svfprintf_r+0x1ba>
   867ba:	46c8      	mov	r8, r9
   867bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   867be:	9f26      	ldr	r7, [sp, #152]	; 0x98
   867c0:	e596      	b.n	862f0 <_svfprintf_r+0x9f0>
   867c2:	aa25      	add	r2, sp, #148	; 0x94
   867c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   867c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   867c8:	f002 f90e 	bl	889e8 <__ssprint_r>
   867cc:	2800      	cmp	r0, #0
   867ce:	f47f a974 	bne.w	85aba <_svfprintf_r+0x1ba>
   867d2:	46c8      	mov	r8, r9
   867d4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   867d6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   867d8:	e599      	b.n	8630e <_svfprintf_r+0xa0e>
   867da:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   867dc:	3407      	adds	r4, #7
   867de:	f024 0407 	bic.w	r4, r4, #7
   867e2:	f104 0108 	add.w	r1, r4, #8
   867e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   867ea:	910f      	str	r1, [sp, #60]	; 0x3c
   867ec:	4614      	mov	r4, r2
   867ee:	461d      	mov	r5, r3
   867f0:	f7ff bb8f 	b.w	85f12 <_svfprintf_r+0x612>
   867f4:	464e      	mov	r6, r9
   867f6:	f7ff b99f 	b.w	85b38 <_svfprintf_r+0x238>
   867fa:	bf00      	nop
   867fc:	0008999c 	.word	0x0008999c
   86800:	aa25      	add	r2, sp, #148	; 0x94
   86802:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86804:	980c      	ldr	r0, [sp, #48]	; 0x30
   86806:	f002 f8ef 	bl	889e8 <__ssprint_r>
   8680a:	2800      	cmp	r0, #0
   8680c:	f47f a955 	bne.w	85aba <_svfprintf_r+0x1ba>
   86810:	46c8      	mov	r8, r9
   86812:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86814:	f7ff ba16 	b.w	85c44 <_svfprintf_r+0x344>
   86818:	9c15      	ldr	r4, [sp, #84]	; 0x54
   8681a:	4622      	mov	r2, r4
   8681c:	4620      	mov	r0, r4
   8681e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   86820:	4623      	mov	r3, r4
   86822:	4621      	mov	r1, r4
   86824:	f002 fdea 	bl	893fc <__aeabi_dcmpun>
   86828:	2800      	cmp	r0, #0
   8682a:	f040 8273 	bne.w	86d14 <_svfprintf_r+0x1414>
   8682e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86830:	3301      	adds	r3, #1
   86832:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86834:	f023 0320 	bic.w	r3, r3, #32
   86838:	930e      	str	r3, [sp, #56]	; 0x38
   8683a:	f000 819c 	beq.w	86b76 <_svfprintf_r+0x1276>
   8683e:	2b47      	cmp	r3, #71	; 0x47
   86840:	f000 80d6 	beq.w	869f0 <_svfprintf_r+0x10f0>
   86844:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   86848:	9307      	str	r3, [sp, #28]
   8684a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8684c:	1e1f      	subs	r7, r3, #0
   8684e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86850:	9308      	str	r3, [sp, #32]
   86852:	bfb7      	itett	lt
   86854:	463b      	movlt	r3, r7
   86856:	2300      	movge	r3, #0
   86858:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   8685c:	232d      	movlt	r3, #45	; 0x2d
   8685e:	9310      	str	r3, [sp, #64]	; 0x40
   86860:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86862:	2b66      	cmp	r3, #102	; 0x66
   86864:	f000 8190 	beq.w	86b88 <_svfprintf_r+0x1288>
   86868:	2b46      	cmp	r3, #70	; 0x46
   8686a:	f000 80a4 	beq.w	869b6 <_svfprintf_r+0x10b6>
   8686e:	2002      	movs	r0, #2
   86870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86872:	a923      	add	r1, sp, #140	; 0x8c
   86874:	2b45      	cmp	r3, #69	; 0x45
   86876:	bf0a      	itet	eq
   86878:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   8687a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   8687c:	1c5d      	addeq	r5, r3, #1
   8687e:	e88d 0021 	stmia.w	sp, {r0, r5}
   86882:	9104      	str	r1, [sp, #16]
   86884:	a820      	add	r0, sp, #128	; 0x80
   86886:	a91f      	add	r1, sp, #124	; 0x7c
   86888:	463b      	mov	r3, r7
   8688a:	9003      	str	r0, [sp, #12]
   8688c:	9a08      	ldr	r2, [sp, #32]
   8688e:	9102      	str	r1, [sp, #8]
   86890:	980c      	ldr	r0, [sp, #48]	; 0x30
   86892:	f000 fb59 	bl	86f48 <_dtoa_r>
   86896:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86898:	4606      	mov	r6, r0
   8689a:	2b67      	cmp	r3, #103	; 0x67
   8689c:	f040 81ba 	bne.w	86c14 <_svfprintf_r+0x1314>
   868a0:	f01b 0f01 	tst.w	fp, #1
   868a4:	f000 8223 	beq.w	86cee <_svfprintf_r+0x13ee>
   868a8:	1974      	adds	r4, r6, r5
   868aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
   868ac:	9808      	ldr	r0, [sp, #32]
   868ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   868b0:	4639      	mov	r1, r7
   868b2:	f002 fd71 	bl	89398 <__aeabi_dcmpeq>
   868b6:	2800      	cmp	r0, #0
   868b8:	f040 8124 	bne.w	86b04 <_svfprintf_r+0x1204>
   868bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   868be:	42a3      	cmp	r3, r4
   868c0:	d206      	bcs.n	868d0 <_svfprintf_r+0xfd0>
   868c2:	2130      	movs	r1, #48	; 0x30
   868c4:	1c5a      	adds	r2, r3, #1
   868c6:	9223      	str	r2, [sp, #140]	; 0x8c
   868c8:	7019      	strb	r1, [r3, #0]
   868ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   868cc:	429c      	cmp	r4, r3
   868ce:	d8f9      	bhi.n	868c4 <_svfprintf_r+0xfc4>
   868d0:	1b9b      	subs	r3, r3, r6
   868d2:	9313      	str	r3, [sp, #76]	; 0x4c
   868d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   868d6:	2b47      	cmp	r3, #71	; 0x47
   868d8:	f000 80a2 	beq.w	86a20 <_svfprintf_r+0x1120>
   868dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   868de:	2b65      	cmp	r3, #101	; 0x65
   868e0:	f340 81a7 	ble.w	86c32 <_svfprintf_r+0x1332>
   868e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   868e6:	2b66      	cmp	r3, #102	; 0x66
   868e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   868ea:	9312      	str	r3, [sp, #72]	; 0x48
   868ec:	f000 8171 	beq.w	86bd2 <_svfprintf_r+0x12d2>
   868f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   868f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   868f4:	4619      	mov	r1, r3
   868f6:	4291      	cmp	r1, r2
   868f8:	f300 815d 	bgt.w	86bb6 <_svfprintf_r+0x12b6>
   868fc:	f01b 0f01 	tst.w	fp, #1
   86900:	f040 81f0 	bne.w	86ce4 <_svfprintf_r+0x13e4>
   86904:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86908:	9308      	str	r3, [sp, #32]
   8690a:	2367      	movs	r3, #103	; 0x67
   8690c:	920e      	str	r2, [sp, #56]	; 0x38
   8690e:	9311      	str	r3, [sp, #68]	; 0x44
   86910:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86912:	2b00      	cmp	r3, #0
   86914:	d17d      	bne.n	86a12 <_svfprintf_r+0x1112>
   86916:	930a      	str	r3, [sp, #40]	; 0x28
   86918:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8691c:	f7ff b914 	b.w	85b48 <_svfprintf_r+0x248>
   86920:	f024 0407 	bic.w	r4, r4, #7
   86924:	6823      	ldr	r3, [r4, #0]
   86926:	9315      	str	r3, [sp, #84]	; 0x54
   86928:	6863      	ldr	r3, [r4, #4]
   8692a:	9314      	str	r3, [sp, #80]	; 0x50
   8692c:	f104 0308 	add.w	r3, r4, #8
   86930:	930f      	str	r3, [sp, #60]	; 0x3c
   86932:	f7ff bb2f 	b.w	85f94 <_svfprintf_r+0x694>
   86936:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86938:	6813      	ldr	r3, [r2, #0]
   8693a:	3204      	adds	r2, #4
   8693c:	920f      	str	r2, [sp, #60]	; 0x3c
   8693e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86940:	601a      	str	r2, [r3, #0]
   86942:	f7ff b804 	b.w	8594e <_svfprintf_r+0x4e>
   86946:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86948:	4daf      	ldr	r5, [pc, #700]	; (86c08 <_svfprintf_r+0x1308>)
   8694a:	f7ff b9ad 	b.w	85ca8 <_svfprintf_r+0x3a8>
   8694e:	aa25      	add	r2, sp, #148	; 0x94
   86950:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86952:	980c      	ldr	r0, [sp, #48]	; 0x30
   86954:	f002 f848 	bl	889e8 <__ssprint_r>
   86958:	2800      	cmp	r0, #0
   8695a:	f47f a8ae 	bne.w	85aba <_svfprintf_r+0x1ba>
   8695e:	46c8      	mov	r8, r9
   86960:	e431      	b.n	861c6 <_svfprintf_r+0x8c6>
   86962:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86964:	4613      	mov	r3, r2
   86966:	3304      	adds	r3, #4
   86968:	930f      	str	r3, [sp, #60]	; 0x3c
   8696a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8696c:	6811      	ldr	r1, [r2, #0]
   8696e:	17dd      	asrs	r5, r3, #31
   86970:	461a      	mov	r2, r3
   86972:	462b      	mov	r3, r5
   86974:	e9c1 2300 	strd	r2, r3, [r1]
   86978:	f7fe bfe9 	b.w	8594e <_svfprintf_r+0x4e>
   8697c:	aa25      	add	r2, sp, #148	; 0x94
   8697e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86980:	980c      	ldr	r0, [sp, #48]	; 0x30
   86982:	f002 f831 	bl	889e8 <__ssprint_r>
   86986:	2800      	cmp	r0, #0
   86988:	f47f a897 	bne.w	85aba <_svfprintf_r+0x1ba>
   8698c:	46c8      	mov	r8, r9
   8698e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86990:	e432      	b.n	861f8 <_svfprintf_r+0x8f8>
   86992:	f108 0808 	add.w	r8, r8, #8
   86996:	e52f      	b.n	863f8 <_svfprintf_r+0xaf8>
   86998:	2140      	movs	r1, #64	; 0x40
   8699a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8699c:	f001 fa22 	bl	87de4 <_malloc_r>
   869a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   869a2:	6010      	str	r0, [r2, #0]
   869a4:	6110      	str	r0, [r2, #16]
   869a6:	2800      	cmp	r0, #0
   869a8:	f000 8214 	beq.w	86dd4 <_svfprintf_r+0x14d4>
   869ac:	2340      	movs	r3, #64	; 0x40
   869ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   869b0:	6153      	str	r3, [r2, #20]
   869b2:	f7fe bfbc 	b.w	8592e <_svfprintf_r+0x2e>
   869b6:	2003      	movs	r0, #3
   869b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   869ba:	a923      	add	r1, sp, #140	; 0x8c
   869bc:	e88d 0011 	stmia.w	sp, {r0, r4}
   869c0:	9104      	str	r1, [sp, #16]
   869c2:	a820      	add	r0, sp, #128	; 0x80
   869c4:	a91f      	add	r1, sp, #124	; 0x7c
   869c6:	9003      	str	r0, [sp, #12]
   869c8:	9a08      	ldr	r2, [sp, #32]
   869ca:	463b      	mov	r3, r7
   869cc:	9102      	str	r1, [sp, #8]
   869ce:	980c      	ldr	r0, [sp, #48]	; 0x30
   869d0:	f000 faba 	bl	86f48 <_dtoa_r>
   869d4:	4625      	mov	r5, r4
   869d6:	4606      	mov	r6, r0
   869d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   869da:	1974      	adds	r4, r6, r5
   869dc:	2b46      	cmp	r3, #70	; 0x46
   869de:	f47f af64 	bne.w	868aa <_svfprintf_r+0xfaa>
   869e2:	7833      	ldrb	r3, [r6, #0]
   869e4:	2b30      	cmp	r3, #48	; 0x30
   869e6:	f000 8187 	beq.w	86cf8 <_svfprintf_r+0x13f8>
   869ea:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   869ec:	442c      	add	r4, r5
   869ee:	e75c      	b.n	868aa <_svfprintf_r+0xfaa>
   869f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   869f2:	2b00      	cmp	r3, #0
   869f4:	bf08      	it	eq
   869f6:	2301      	moveq	r3, #1
   869f8:	930a      	str	r3, [sp, #40]	; 0x28
   869fa:	e723      	b.n	86844 <_svfprintf_r+0xf44>
   869fc:	4630      	mov	r0, r6
   869fe:	950a      	str	r5, [sp, #40]	; 0x28
   86a00:	f7fe ff50 	bl	858a4 <strlen>
   86a04:	940f      	str	r4, [sp, #60]	; 0x3c
   86a06:	900e      	str	r0, [sp, #56]	; 0x38
   86a08:	f8cd b01c 	str.w	fp, [sp, #28]
   86a0c:	4603      	mov	r3, r0
   86a0e:	f7ff b9e7 	b.w	85de0 <_svfprintf_r+0x4e0>
   86a12:	272d      	movs	r7, #45	; 0x2d
   86a14:	2300      	movs	r3, #0
   86a16:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   86a1a:	930a      	str	r3, [sp, #40]	; 0x28
   86a1c:	f7ff b895 	b.w	85b4a <_svfprintf_r+0x24a>
   86a20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86a22:	461a      	mov	r2, r3
   86a24:	9312      	str	r3, [sp, #72]	; 0x48
   86a26:	3303      	adds	r3, #3
   86a28:	db04      	blt.n	86a34 <_svfprintf_r+0x1134>
   86a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86a2c:	4619      	mov	r1, r3
   86a2e:	4291      	cmp	r1, r2
   86a30:	f6bf af5e 	bge.w	868f0 <_svfprintf_r+0xff0>
   86a34:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86a36:	3b02      	subs	r3, #2
   86a38:	9311      	str	r3, [sp, #68]	; 0x44
   86a3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86a3c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   86a40:	3b01      	subs	r3, #1
   86a42:	2b00      	cmp	r3, #0
   86a44:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   86a48:	bfb4      	ite	lt
   86a4a:	222d      	movlt	r2, #45	; 0x2d
   86a4c:	222b      	movge	r2, #43	; 0x2b
   86a4e:	931f      	str	r3, [sp, #124]	; 0x7c
   86a50:	bfb8      	it	lt
   86a52:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   86a54:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   86a58:	bfb8      	it	lt
   86a5a:	f1c3 0301 	rsblt	r3, r3, #1
   86a5e:	2b09      	cmp	r3, #9
   86a60:	f340 811f 	ble.w	86ca2 <_svfprintf_r+0x13a2>
   86a64:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   86a68:	4601      	mov	r1, r0
   86a6a:	4c68      	ldr	r4, [pc, #416]	; (86c0c <_svfprintf_r+0x130c>)
   86a6c:	e000      	b.n	86a70 <_svfprintf_r+0x1170>
   86a6e:	4611      	mov	r1, r2
   86a70:	fb84 5203 	smull	r5, r2, r4, r3
   86a74:	17dd      	asrs	r5, r3, #31
   86a76:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   86a7a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   86a7e:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   86a82:	3230      	adds	r2, #48	; 0x30
   86a84:	2d09      	cmp	r5, #9
   86a86:	f801 2c01 	strb.w	r2, [r1, #-1]
   86a8a:	462b      	mov	r3, r5
   86a8c:	f101 32ff 	add.w	r2, r1, #4294967295
   86a90:	dced      	bgt.n	86a6e <_svfprintf_r+0x116e>
   86a92:	3330      	adds	r3, #48	; 0x30
   86a94:	3902      	subs	r1, #2
   86a96:	b2dc      	uxtb	r4, r3
   86a98:	4288      	cmp	r0, r1
   86a9a:	f802 4c01 	strb.w	r4, [r2, #-1]
   86a9e:	f240 8192 	bls.w	86dc6 <_svfprintf_r+0x14c6>
   86aa2:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   86aa6:	4613      	mov	r3, r2
   86aa8:	e001      	b.n	86aae <_svfprintf_r+0x11ae>
   86aaa:	f813 4b01 	ldrb.w	r4, [r3], #1
   86aae:	4283      	cmp	r3, r0
   86ab0:	f801 4b01 	strb.w	r4, [r1], #1
   86ab4:	d1f9      	bne.n	86aaa <_svfprintf_r+0x11aa>
   86ab6:	3301      	adds	r3, #1
   86ab8:	1a9b      	subs	r3, r3, r2
   86aba:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   86abe:	4413      	add	r3, r2
   86ac0:	aa21      	add	r2, sp, #132	; 0x84
   86ac2:	1a9b      	subs	r3, r3, r2
   86ac4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86ac6:	931b      	str	r3, [sp, #108]	; 0x6c
   86ac8:	2a01      	cmp	r2, #1
   86aca:	4413      	add	r3, r2
   86acc:	930e      	str	r3, [sp, #56]	; 0x38
   86ace:	f340 8148 	ble.w	86d62 <_svfprintf_r+0x1462>
   86ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86ad4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86ad6:	4413      	add	r3, r2
   86ad8:	930e      	str	r3, [sp, #56]	; 0x38
   86ada:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86ade:	9308      	str	r3, [sp, #32]
   86ae0:	2300      	movs	r3, #0
   86ae2:	9312      	str	r3, [sp, #72]	; 0x48
   86ae4:	e714      	b.n	86910 <_svfprintf_r+0x1010>
   86ae6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86ae8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86aea:	f7ff b876 	b.w	85bda <_svfprintf_r+0x2da>
   86aee:	aa25      	add	r2, sp, #148	; 0x94
   86af0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86af2:	980c      	ldr	r0, [sp, #48]	; 0x30
   86af4:	f001 ff78 	bl	889e8 <__ssprint_r>
   86af8:	2800      	cmp	r0, #0
   86afa:	f47e afde 	bne.w	85aba <_svfprintf_r+0x1ba>
   86afe:	46c8      	mov	r8, r9
   86b00:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86b02:	e4fb      	b.n	864fc <_svfprintf_r+0xbfc>
   86b04:	4623      	mov	r3, r4
   86b06:	e6e3      	b.n	868d0 <_svfprintf_r+0xfd0>
   86b08:	aa25      	add	r2, sp, #148	; 0x94
   86b0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86b0c:	980c      	ldr	r0, [sp, #48]	; 0x30
   86b0e:	f001 ff6b 	bl	889e8 <__ssprint_r>
   86b12:	2800      	cmp	r0, #0
   86b14:	f47e afd1 	bne.w	85aba <_svfprintf_r+0x1ba>
   86b18:	46c8      	mov	r8, r9
   86b1a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86b1c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86b1e:	e5d3      	b.n	866c8 <_svfprintf_r+0xdc8>
   86b20:	aa25      	add	r2, sp, #148	; 0x94
   86b22:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86b24:	980c      	ldr	r0, [sp, #48]	; 0x30
   86b26:	f001 ff5f 	bl	889e8 <__ssprint_r>
   86b2a:	2800      	cmp	r0, #0
   86b2c:	f47e afc5 	bne.w	85aba <_svfprintf_r+0x1ba>
   86b30:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86b32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86b34:	46c8      	mov	r8, r9
   86b36:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86b38:	1a9a      	subs	r2, r3, r2
   86b3a:	e5dd      	b.n	866f8 <_svfprintf_r+0xdf8>
   86b3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86b3e:	f7ff b8fe 	b.w	85d3e <_svfprintf_r+0x43e>
   86b42:	aa25      	add	r2, sp, #148	; 0x94
   86b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86b46:	980c      	ldr	r0, [sp, #48]	; 0x30
   86b48:	f001 ff4e 	bl	889e8 <__ssprint_r>
   86b4c:	2800      	cmp	r0, #0
   86b4e:	f47e afb4 	bne.w	85aba <_svfprintf_r+0x1ba>
   86b52:	46c8      	mov	r8, r9
   86b54:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86b56:	e5b0      	b.n	866ba <_svfprintf_r+0xdba>
   86b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86b5a:	4637      	mov	r7, r6
   86b5c:	2b06      	cmp	r3, #6
   86b5e:	bf28      	it	cs
   86b60:	2306      	movcs	r3, #6
   86b62:	960a      	str	r6, [sp, #40]	; 0x28
   86b64:	9612      	str	r6, [sp, #72]	; 0x48
   86b66:	9308      	str	r3, [sp, #32]
   86b68:	940f      	str	r4, [sp, #60]	; 0x3c
   86b6a:	f8cd b01c 	str.w	fp, [sp, #28]
   86b6e:	930e      	str	r3, [sp, #56]	; 0x38
   86b70:	4e27      	ldr	r6, [pc, #156]	; (86c10 <_svfprintf_r+0x1310>)
   86b72:	f7fe bfe9 	b.w	85b48 <_svfprintf_r+0x248>
   86b76:	2306      	movs	r3, #6
   86b78:	930a      	str	r3, [sp, #40]	; 0x28
   86b7a:	e663      	b.n	86844 <_svfprintf_r+0xf44>
   86b7c:	232d      	movs	r3, #45	; 0x2d
   86b7e:	461f      	mov	r7, r3
   86b80:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   86b84:	f7ff ba28 	b.w	85fd8 <_svfprintf_r+0x6d8>
   86b88:	2003      	movs	r0, #3
   86b8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86b8c:	a923      	add	r1, sp, #140	; 0x8c
   86b8e:	e88d 0011 	stmia.w	sp, {r0, r4}
   86b92:	9104      	str	r1, [sp, #16]
   86b94:	a820      	add	r0, sp, #128	; 0x80
   86b96:	a91f      	add	r1, sp, #124	; 0x7c
   86b98:	9003      	str	r0, [sp, #12]
   86b9a:	9a08      	ldr	r2, [sp, #32]
   86b9c:	463b      	mov	r3, r7
   86b9e:	9102      	str	r1, [sp, #8]
   86ba0:	980c      	ldr	r0, [sp, #48]	; 0x30
   86ba2:	f000 f9d1 	bl	86f48 <_dtoa_r>
   86ba6:	4625      	mov	r5, r4
   86ba8:	4606      	mov	r6, r0
   86baa:	1904      	adds	r4, r0, r4
   86bac:	e719      	b.n	869e2 <_svfprintf_r+0x10e2>
   86bae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86bb0:	4d15      	ldr	r5, [pc, #84]	; (86c08 <_svfprintf_r+0x1308>)
   86bb2:	f7ff bb7e 	b.w	862b2 <_svfprintf_r+0x9b2>
   86bb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86bb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86bba:	4413      	add	r3, r2
   86bbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86bbe:	930e      	str	r3, [sp, #56]	; 0x38
   86bc0:	2a00      	cmp	r2, #0
   86bc2:	f340 80c7 	ble.w	86d54 <_svfprintf_r+0x1454>
   86bc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86bca:	9308      	str	r3, [sp, #32]
   86bcc:	2367      	movs	r3, #103	; 0x67
   86bce:	9311      	str	r3, [sp, #68]	; 0x44
   86bd0:	e69e      	b.n	86910 <_svfprintf_r+0x1010>
   86bd2:	2b00      	cmp	r3, #0
   86bd4:	f340 80e1 	ble.w	86d9a <_svfprintf_r+0x149a>
   86bd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86bda:	2a00      	cmp	r2, #0
   86bdc:	f040 80b0 	bne.w	86d40 <_svfprintf_r+0x1440>
   86be0:	f01b 0f01 	tst.w	fp, #1
   86be4:	f040 80ac 	bne.w	86d40 <_svfprintf_r+0x1440>
   86be8:	9308      	str	r3, [sp, #32]
   86bea:	930e      	str	r3, [sp, #56]	; 0x38
   86bec:	e690      	b.n	86910 <_svfprintf_r+0x1010>
   86bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86bf0:	940f      	str	r4, [sp, #60]	; 0x3c
   86bf2:	9308      	str	r3, [sp, #32]
   86bf4:	930e      	str	r3, [sp, #56]	; 0x38
   86bf6:	900a      	str	r0, [sp, #40]	; 0x28
   86bf8:	f8cd b01c 	str.w	fp, [sp, #28]
   86bfc:	9012      	str	r0, [sp, #72]	; 0x48
   86bfe:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86c02:	f7fe bfa1 	b.w	85b48 <_svfprintf_r+0x248>
   86c06:	bf00      	nop
   86c08:	0008999c 	.word	0x0008999c
   86c0c:	66666667 	.word	0x66666667
   86c10:	00089980 	.word	0x00089980
   86c14:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86c16:	2b47      	cmp	r3, #71	; 0x47
   86c18:	f47f ae46 	bne.w	868a8 <_svfprintf_r+0xfa8>
   86c1c:	f01b 0f01 	tst.w	fp, #1
   86c20:	f47f aeda 	bne.w	869d8 <_svfprintf_r+0x10d8>
   86c24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86c26:	1b9b      	subs	r3, r3, r6
   86c28:	9313      	str	r3, [sp, #76]	; 0x4c
   86c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86c2c:	2b47      	cmp	r3, #71	; 0x47
   86c2e:	f43f aef7 	beq.w	86a20 <_svfprintf_r+0x1120>
   86c32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86c34:	9312      	str	r3, [sp, #72]	; 0x48
   86c36:	e700      	b.n	86a3a <_svfprintf_r+0x113a>
   86c38:	2000      	movs	r0, #0
   86c3a:	900a      	str	r0, [sp, #40]	; 0x28
   86c3c:	f7fe bebc 	b.w	859b8 <_svfprintf_r+0xb8>
   86c40:	424f      	negs	r7, r1
   86c42:	3110      	adds	r1, #16
   86c44:	da35      	bge.n	86cb2 <_svfprintf_r+0x13b2>
   86c46:	2410      	movs	r4, #16
   86c48:	4d6a      	ldr	r5, [pc, #424]	; (86df4 <_svfprintf_r+0x14f4>)
   86c4a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86c4e:	e004      	b.n	86c5a <_svfprintf_r+0x135a>
   86c50:	f108 0808 	add.w	r8, r8, #8
   86c54:	3f10      	subs	r7, #16
   86c56:	2f10      	cmp	r7, #16
   86c58:	dd2c      	ble.n	86cb4 <_svfprintf_r+0x13b4>
   86c5a:	3301      	adds	r3, #1
   86c5c:	3210      	adds	r2, #16
   86c5e:	2b07      	cmp	r3, #7
   86c60:	9227      	str	r2, [sp, #156]	; 0x9c
   86c62:	9326      	str	r3, [sp, #152]	; 0x98
   86c64:	f8c8 5000 	str.w	r5, [r8]
   86c68:	f8c8 4004 	str.w	r4, [r8, #4]
   86c6c:	ddf0      	ble.n	86c50 <_svfprintf_r+0x1350>
   86c6e:	aa25      	add	r2, sp, #148	; 0x94
   86c70:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c72:	4658      	mov	r0, fp
   86c74:	f001 feb8 	bl	889e8 <__ssprint_r>
   86c78:	2800      	cmp	r0, #0
   86c7a:	f47e af1e 	bne.w	85aba <_svfprintf_r+0x1ba>
   86c7e:	46c8      	mov	r8, r9
   86c80:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86c82:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86c84:	e7e6      	b.n	86c54 <_svfprintf_r+0x1354>
   86c86:	aa25      	add	r2, sp, #148	; 0x94
   86c88:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c8a:	980c      	ldr	r0, [sp, #48]	; 0x30
   86c8c:	f001 feac 	bl	889e8 <__ssprint_r>
   86c90:	2800      	cmp	r0, #0
   86c92:	f47e af12 	bne.w	85aba <_svfprintf_r+0x1ba>
   86c96:	46c8      	mov	r8, r9
   86c98:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86c9a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86c9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86c9e:	f7ff bbc3 	b.w	86428 <_svfprintf_r+0xb28>
   86ca2:	2230      	movs	r2, #48	; 0x30
   86ca4:	4413      	add	r3, r2
   86ca6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   86caa:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   86cae:	ab22      	add	r3, sp, #136	; 0x88
   86cb0:	e706      	b.n	86ac0 <_svfprintf_r+0x11c0>
   86cb2:	4d50      	ldr	r5, [pc, #320]	; (86df4 <_svfprintf_r+0x14f4>)
   86cb4:	3301      	adds	r3, #1
   86cb6:	443a      	add	r2, r7
   86cb8:	2b07      	cmp	r3, #7
   86cba:	e888 00a0 	stmia.w	r8, {r5, r7}
   86cbe:	9227      	str	r2, [sp, #156]	; 0x9c
   86cc0:	9326      	str	r3, [sp, #152]	; 0x98
   86cc2:	f108 0808 	add.w	r8, r8, #8
   86cc6:	f77f abb2 	ble.w	8642e <_svfprintf_r+0xb2e>
   86cca:	aa25      	add	r2, sp, #148	; 0x94
   86ccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86cce:	980c      	ldr	r0, [sp, #48]	; 0x30
   86cd0:	f001 fe8a 	bl	889e8 <__ssprint_r>
   86cd4:	2800      	cmp	r0, #0
   86cd6:	f47e aef0 	bne.w	85aba <_svfprintf_r+0x1ba>
   86cda:	46c8      	mov	r8, r9
   86cdc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86cde:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86ce0:	f7ff bba5 	b.w	8642e <_svfprintf_r+0xb2e>
   86ce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86ce6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86ce8:	4413      	add	r3, r2
   86cea:	930e      	str	r3, [sp, #56]	; 0x38
   86cec:	e76b      	b.n	86bc6 <_svfprintf_r+0x12c6>
   86cee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86cf0:	e5ee      	b.n	868d0 <_svfprintf_r+0xfd0>
   86cf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86cf4:	4d3f      	ldr	r5, [pc, #252]	; (86df4 <_svfprintf_r+0x14f4>)
   86cf6:	e4bb      	b.n	86670 <_svfprintf_r+0xd70>
   86cf8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86cfa:	9808      	ldr	r0, [sp, #32]
   86cfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86cfe:	4639      	mov	r1, r7
   86d00:	f002 fb4a 	bl	89398 <__aeabi_dcmpeq>
   86d04:	2800      	cmp	r0, #0
   86d06:	f47f ae70 	bne.w	869ea <_svfprintf_r+0x10ea>
   86d0a:	f1c5 0501 	rsb	r5, r5, #1
   86d0e:	951f      	str	r5, [sp, #124]	; 0x7c
   86d10:	442c      	add	r4, r5
   86d12:	e5ca      	b.n	868aa <_svfprintf_r+0xfaa>
   86d14:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86d16:	4e38      	ldr	r6, [pc, #224]	; (86df8 <_svfprintf_r+0x14f8>)
   86d18:	2b00      	cmp	r3, #0
   86d1a:	bfbe      	ittt	lt
   86d1c:	232d      	movlt	r3, #45	; 0x2d
   86d1e:	461f      	movlt	r7, r3
   86d20:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   86d24:	f04f 0303 	mov.w	r3, #3
   86d28:	461a      	mov	r2, r3
   86d2a:	9308      	str	r3, [sp, #32]
   86d2c:	f04f 0300 	mov.w	r3, #0
   86d30:	bfa8      	it	ge
   86d32:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   86d36:	4619      	mov	r1, r3
   86d38:	930a      	str	r3, [sp, #40]	; 0x28
   86d3a:	4b30      	ldr	r3, [pc, #192]	; (86dfc <_svfprintf_r+0x14fc>)
   86d3c:	f7ff b954 	b.w	85fe8 <_svfprintf_r+0x6e8>
   86d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86d42:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86d44:	4413      	add	r3, r2
   86d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86d48:	441a      	add	r2, r3
   86d4a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86d4e:	920e      	str	r2, [sp, #56]	; 0x38
   86d50:	9308      	str	r3, [sp, #32]
   86d52:	e5dd      	b.n	86910 <_svfprintf_r+0x1010>
   86d54:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86d58:	f1c3 0301 	rsb	r3, r3, #1
   86d5c:	441a      	add	r2, r3
   86d5e:	4613      	mov	r3, r2
   86d60:	e7c3      	b.n	86cea <_svfprintf_r+0x13ea>
   86d62:	f01b 0301 	ands.w	r3, fp, #1
   86d66:	9312      	str	r3, [sp, #72]	; 0x48
   86d68:	f47f aeb3 	bne.w	86ad2 <_svfprintf_r+0x11d2>
   86d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86d6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86d72:	9308      	str	r3, [sp, #32]
   86d74:	e5cc      	b.n	86910 <_svfprintf_r+0x1010>
   86d76:	4d1f      	ldr	r5, [pc, #124]	; (86df4 <_svfprintf_r+0x14f4>)
   86d78:	e43c      	b.n	865f4 <_svfprintf_r+0xcf4>
   86d7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d7c:	4d1d      	ldr	r5, [pc, #116]	; (86df4 <_svfprintf_r+0x14f4>)
   86d7e:	e491      	b.n	866a4 <_svfprintf_r+0xda4>
   86d80:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   86d82:	f89a 3001 	ldrb.w	r3, [sl, #1]
   86d86:	6828      	ldr	r0, [r5, #0]
   86d88:	46a2      	mov	sl, r4
   86d8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   86d8e:	900a      	str	r0, [sp, #40]	; 0x28
   86d90:	4628      	mov	r0, r5
   86d92:	3004      	adds	r0, #4
   86d94:	900f      	str	r0, [sp, #60]	; 0x3c
   86d96:	f7fe be0d 	b.w	859b4 <_svfprintf_r+0xb4>
   86d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86d9c:	b913      	cbnz	r3, 86da4 <_svfprintf_r+0x14a4>
   86d9e:	f01b 0f01 	tst.w	fp, #1
   86da2:	d002      	beq.n	86daa <_svfprintf_r+0x14aa>
   86da4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86da6:	3301      	adds	r3, #1
   86da8:	e7cd      	b.n	86d46 <_svfprintf_r+0x1446>
   86daa:	2301      	movs	r3, #1
   86dac:	e71c      	b.n	86be8 <_svfprintf_r+0x12e8>
   86dae:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86db2:	f7ff b980 	b.w	860b6 <_svfprintf_r+0x7b6>
   86db6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86dba:	f7ff b93a 	b.w	86032 <_svfprintf_r+0x732>
   86dbe:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86dc2:	f7ff b84f 	b.w	85e64 <_svfprintf_r+0x564>
   86dc6:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   86dca:	e679      	b.n	86ac0 <_svfprintf_r+0x11c0>
   86dcc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86dd0:	f7ff b9b2 	b.w	86138 <_svfprintf_r+0x838>
   86dd4:	f04f 32ff 	mov.w	r2, #4294967295
   86dd8:	230c      	movs	r3, #12
   86dda:	9209      	str	r2, [sp, #36]	; 0x24
   86ddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86dde:	6013      	str	r3, [r2, #0]
   86de0:	f7fe be74 	b.w	85acc <_svfprintf_r+0x1cc>
   86de4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86de8:	f7ff b8c4 	b.w	85f74 <_svfprintf_r+0x674>
   86dec:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86df0:	f7ff b878 	b.w	85ee4 <_svfprintf_r+0x5e4>
   86df4:	0008999c 	.word	0x0008999c
   86df8:	00089954 	.word	0x00089954
   86dfc:	00089950 	.word	0x00089950

00086e00 <register_fini>:
   86e00:	4b02      	ldr	r3, [pc, #8]	; (86e0c <register_fini+0xc>)
   86e02:	b113      	cbz	r3, 86e0a <register_fini+0xa>
   86e04:	4802      	ldr	r0, [pc, #8]	; (86e10 <register_fini+0x10>)
   86e06:	f000 b805 	b.w	86e14 <atexit>
   86e0a:	4770      	bx	lr
   86e0c:	00000000 	.word	0x00000000
   86e10:	00087d8d 	.word	0x00087d8d

00086e14 <atexit>:
   86e14:	2300      	movs	r3, #0
   86e16:	4601      	mov	r1, r0
   86e18:	461a      	mov	r2, r3
   86e1a:	4618      	mov	r0, r3
   86e1c:	f001 be62 	b.w	88ae4 <__register_exitproc>

00086e20 <quorem>:
   86e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86e24:	6903      	ldr	r3, [r0, #16]
   86e26:	690f      	ldr	r7, [r1, #16]
   86e28:	b083      	sub	sp, #12
   86e2a:	429f      	cmp	r7, r3
   86e2c:	f300 8088 	bgt.w	86f40 <quorem+0x120>
   86e30:	3f01      	subs	r7, #1
   86e32:	f101 0614 	add.w	r6, r1, #20
   86e36:	f100 0a14 	add.w	sl, r0, #20
   86e3a:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   86e3e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   86e42:	3301      	adds	r3, #1
   86e44:	fbb2 f8f3 	udiv	r8, r2, r3
   86e48:	00bb      	lsls	r3, r7, #2
   86e4a:	9300      	str	r3, [sp, #0]
   86e4c:	eb06 0903 	add.w	r9, r6, r3
   86e50:	4453      	add	r3, sl
   86e52:	9301      	str	r3, [sp, #4]
   86e54:	f1b8 0f00 	cmp.w	r8, #0
   86e58:	d03b      	beq.n	86ed2 <quorem+0xb2>
   86e5a:	2300      	movs	r3, #0
   86e5c:	46b4      	mov	ip, r6
   86e5e:	461c      	mov	r4, r3
   86e60:	46d6      	mov	lr, sl
   86e62:	f85c 2b04 	ldr.w	r2, [ip], #4
   86e66:	f8de 5000 	ldr.w	r5, [lr]
   86e6a:	fa1f fb82 	uxth.w	fp, r2
   86e6e:	fb08 330b 	mla	r3, r8, fp, r3
   86e72:	0c12      	lsrs	r2, r2, #16
   86e74:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   86e78:	fb08 bb02 	mla	fp, r8, r2, fp
   86e7c:	b29a      	uxth	r2, r3
   86e7e:	1aa2      	subs	r2, r4, r2
   86e80:	b2ab      	uxth	r3, r5
   86e82:	fa1f f48b 	uxth.w	r4, fp
   86e86:	441a      	add	r2, r3
   86e88:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   86e8c:	eb04 4422 	add.w	r4, r4, r2, asr #16
   86e90:	b292      	uxth	r2, r2
   86e92:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   86e96:	45e1      	cmp	r9, ip
   86e98:	f84e 2b04 	str.w	r2, [lr], #4
   86e9c:	ea4f 4424 	mov.w	r4, r4, asr #16
   86ea0:	ea4f 431b 	mov.w	r3, fp, lsr #16
   86ea4:	d2dd      	bcs.n	86e62 <quorem+0x42>
   86ea6:	9b00      	ldr	r3, [sp, #0]
   86ea8:	f85a 3003 	ldr.w	r3, [sl, r3]
   86eac:	b98b      	cbnz	r3, 86ed2 <quorem+0xb2>
   86eae:	9c01      	ldr	r4, [sp, #4]
   86eb0:	1f23      	subs	r3, r4, #4
   86eb2:	459a      	cmp	sl, r3
   86eb4:	d20c      	bcs.n	86ed0 <quorem+0xb0>
   86eb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86eba:	b94b      	cbnz	r3, 86ed0 <quorem+0xb0>
   86ebc:	f1a4 0308 	sub.w	r3, r4, #8
   86ec0:	e002      	b.n	86ec8 <quorem+0xa8>
   86ec2:	681a      	ldr	r2, [r3, #0]
   86ec4:	3b04      	subs	r3, #4
   86ec6:	b91a      	cbnz	r2, 86ed0 <quorem+0xb0>
   86ec8:	459a      	cmp	sl, r3
   86eca:	f107 37ff 	add.w	r7, r7, #4294967295
   86ece:	d3f8      	bcc.n	86ec2 <quorem+0xa2>
   86ed0:	6107      	str	r7, [r0, #16]
   86ed2:	4604      	mov	r4, r0
   86ed4:	f001 fc78 	bl	887c8 <__mcmp>
   86ed8:	2800      	cmp	r0, #0
   86eda:	db2d      	blt.n	86f38 <quorem+0x118>
   86edc:	4655      	mov	r5, sl
   86ede:	2300      	movs	r3, #0
   86ee0:	f108 0801 	add.w	r8, r8, #1
   86ee4:	f856 1b04 	ldr.w	r1, [r6], #4
   86ee8:	6828      	ldr	r0, [r5, #0]
   86eea:	b28a      	uxth	r2, r1
   86eec:	1a9a      	subs	r2, r3, r2
   86eee:	0c0b      	lsrs	r3, r1, #16
   86ef0:	b281      	uxth	r1, r0
   86ef2:	440a      	add	r2, r1
   86ef4:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   86ef8:	eb03 4322 	add.w	r3, r3, r2, asr #16
   86efc:	b292      	uxth	r2, r2
   86efe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   86f02:	45b1      	cmp	r9, r6
   86f04:	f845 2b04 	str.w	r2, [r5], #4
   86f08:	ea4f 4323 	mov.w	r3, r3, asr #16
   86f0c:	d2ea      	bcs.n	86ee4 <quorem+0xc4>
   86f0e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   86f12:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   86f16:	b97a      	cbnz	r2, 86f38 <quorem+0x118>
   86f18:	1f1a      	subs	r2, r3, #4
   86f1a:	4592      	cmp	sl, r2
   86f1c:	d20b      	bcs.n	86f36 <quorem+0x116>
   86f1e:	f853 2c04 	ldr.w	r2, [r3, #-4]
   86f22:	b942      	cbnz	r2, 86f36 <quorem+0x116>
   86f24:	3b08      	subs	r3, #8
   86f26:	e002      	b.n	86f2e <quorem+0x10e>
   86f28:	681a      	ldr	r2, [r3, #0]
   86f2a:	3b04      	subs	r3, #4
   86f2c:	b91a      	cbnz	r2, 86f36 <quorem+0x116>
   86f2e:	459a      	cmp	sl, r3
   86f30:	f107 37ff 	add.w	r7, r7, #4294967295
   86f34:	d3f8      	bcc.n	86f28 <quorem+0x108>
   86f36:	6127      	str	r7, [r4, #16]
   86f38:	4640      	mov	r0, r8
   86f3a:	b003      	add	sp, #12
   86f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86f40:	2000      	movs	r0, #0
   86f42:	b003      	add	sp, #12
   86f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00086f48 <_dtoa_r>:
   86f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86f4c:	6c05      	ldr	r5, [r0, #64]	; 0x40
   86f4e:	b09b      	sub	sp, #108	; 0x6c
   86f50:	4604      	mov	r4, r0
   86f52:	4692      	mov	sl, r2
   86f54:	469b      	mov	fp, r3
   86f56:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   86f58:	b14d      	cbz	r5, 86f6e <_dtoa_r+0x26>
   86f5a:	2301      	movs	r3, #1
   86f5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   86f5e:	4629      	mov	r1, r5
   86f60:	4093      	lsls	r3, r2
   86f62:	60ab      	str	r3, [r5, #8]
   86f64:	606a      	str	r2, [r5, #4]
   86f66:	f001 fa57 	bl	88418 <_Bfree>
   86f6a:	2300      	movs	r3, #0
   86f6c:	6423      	str	r3, [r4, #64]	; 0x40
   86f6e:	f1bb 0f00 	cmp.w	fp, #0
   86f72:	465d      	mov	r5, fp
   86f74:	db35      	blt.n	86fe2 <_dtoa_r+0x9a>
   86f76:	2300      	movs	r3, #0
   86f78:	6033      	str	r3, [r6, #0]
   86f7a:	4b9d      	ldr	r3, [pc, #628]	; (871f0 <_dtoa_r+0x2a8>)
   86f7c:	43ab      	bics	r3, r5
   86f7e:	d015      	beq.n	86fac <_dtoa_r+0x64>
   86f80:	2200      	movs	r2, #0
   86f82:	2300      	movs	r3, #0
   86f84:	4650      	mov	r0, sl
   86f86:	4659      	mov	r1, fp
   86f88:	f002 fa06 	bl	89398 <__aeabi_dcmpeq>
   86f8c:	4680      	mov	r8, r0
   86f8e:	2800      	cmp	r0, #0
   86f90:	d02d      	beq.n	86fee <_dtoa_r+0xa6>
   86f92:	2301      	movs	r3, #1
   86f94:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86f96:	6013      	str	r3, [r2, #0]
   86f98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86f9a:	2b00      	cmp	r3, #0
   86f9c:	f000 80bd 	beq.w	8711a <_dtoa_r+0x1d2>
   86fa0:	4894      	ldr	r0, [pc, #592]	; (871f4 <_dtoa_r+0x2ac>)
   86fa2:	6018      	str	r0, [r3, #0]
   86fa4:	3801      	subs	r0, #1
   86fa6:	b01b      	add	sp, #108	; 0x6c
   86fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86fac:	f242 730f 	movw	r3, #9999	; 0x270f
   86fb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86fb2:	6013      	str	r3, [r2, #0]
   86fb4:	f1ba 0f00 	cmp.w	sl, #0
   86fb8:	d10d      	bne.n	86fd6 <_dtoa_r+0x8e>
   86fba:	f3c5 0513 	ubfx	r5, r5, #0, #20
   86fbe:	b955      	cbnz	r5, 86fd6 <_dtoa_r+0x8e>
   86fc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86fc2:	488d      	ldr	r0, [pc, #564]	; (871f8 <_dtoa_r+0x2b0>)
   86fc4:	2b00      	cmp	r3, #0
   86fc6:	d0ee      	beq.n	86fa6 <_dtoa_r+0x5e>
   86fc8:	f100 0308 	add.w	r3, r0, #8
   86fcc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   86fce:	6013      	str	r3, [r2, #0]
   86fd0:	b01b      	add	sp, #108	; 0x6c
   86fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86fd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86fd8:	4888      	ldr	r0, [pc, #544]	; (871fc <_dtoa_r+0x2b4>)
   86fda:	2b00      	cmp	r3, #0
   86fdc:	d0e3      	beq.n	86fa6 <_dtoa_r+0x5e>
   86fde:	1cc3      	adds	r3, r0, #3
   86fe0:	e7f4      	b.n	86fcc <_dtoa_r+0x84>
   86fe2:	2301      	movs	r3, #1
   86fe4:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   86fe8:	6033      	str	r3, [r6, #0]
   86fea:	46ab      	mov	fp, r5
   86fec:	e7c5      	b.n	86f7a <_dtoa_r+0x32>
   86fee:	aa18      	add	r2, sp, #96	; 0x60
   86ff0:	ab19      	add	r3, sp, #100	; 0x64
   86ff2:	9201      	str	r2, [sp, #4]
   86ff4:	9300      	str	r3, [sp, #0]
   86ff6:	4652      	mov	r2, sl
   86ff8:	465b      	mov	r3, fp
   86ffa:	4620      	mov	r0, r4
   86ffc:	f001 fc8e 	bl	8891c <__d2b>
   87000:	0d2b      	lsrs	r3, r5, #20
   87002:	4681      	mov	r9, r0
   87004:	d071      	beq.n	870ea <_dtoa_r+0x1a2>
   87006:	4650      	mov	r0, sl
   87008:	f3cb 0213 	ubfx	r2, fp, #0, #20
   8700c:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   87010:	9f18      	ldr	r7, [sp, #96]	; 0x60
   87012:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   87016:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   8701a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8701e:	2200      	movs	r2, #0
   87020:	4b77      	ldr	r3, [pc, #476]	; (87200 <_dtoa_r+0x2b8>)
   87022:	f7fd fc6d 	bl	84900 <__aeabi_dsub>
   87026:	a36c      	add	r3, pc, #432	; (adr r3, 871d8 <_dtoa_r+0x290>)
   87028:	e9d3 2300 	ldrd	r2, r3, [r3]
   8702c:	f7fd fe1c 	bl	84c68 <__aeabi_dmul>
   87030:	a36b      	add	r3, pc, #428	; (adr r3, 871e0 <_dtoa_r+0x298>)
   87032:	e9d3 2300 	ldrd	r2, r3, [r3]
   87036:	f7fd fc65 	bl	84904 <__adddf3>
   8703a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8703e:	4630      	mov	r0, r6
   87040:	f7fd fdac 	bl	84b9c <__aeabi_i2d>
   87044:	a368      	add	r3, pc, #416	; (adr r3, 871e8 <_dtoa_r+0x2a0>)
   87046:	e9d3 2300 	ldrd	r2, r3, [r3]
   8704a:	f7fd fe0d 	bl	84c68 <__aeabi_dmul>
   8704e:	4602      	mov	r2, r0
   87050:	460b      	mov	r3, r1
   87052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   87056:	f7fd fc55 	bl	84904 <__adddf3>
   8705a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8705e:	f002 f9e3 	bl	89428 <__aeabi_d2iz>
   87062:	2200      	movs	r2, #0
   87064:	9002      	str	r0, [sp, #8]
   87066:	2300      	movs	r3, #0
   87068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8706c:	f002 f99e 	bl	893ac <__aeabi_dcmplt>
   87070:	2800      	cmp	r0, #0
   87072:	f040 816d 	bne.w	87350 <_dtoa_r+0x408>
   87076:	9d02      	ldr	r5, [sp, #8]
   87078:	2d16      	cmp	r5, #22
   8707a:	f200 8157 	bhi.w	8732c <_dtoa_r+0x3e4>
   8707e:	4961      	ldr	r1, [pc, #388]	; (87204 <_dtoa_r+0x2bc>)
   87080:	4652      	mov	r2, sl
   87082:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   87086:	465b      	mov	r3, fp
   87088:	e9d1 0100 	ldrd	r0, r1, [r1]
   8708c:	f002 f9ac 	bl	893e8 <__aeabi_dcmpgt>
   87090:	2800      	cmp	r0, #0
   87092:	f000 81be 	beq.w	87412 <_dtoa_r+0x4ca>
   87096:	1e6b      	subs	r3, r5, #1
   87098:	9302      	str	r3, [sp, #8]
   8709a:	2300      	movs	r3, #0
   8709c:	930e      	str	r3, [sp, #56]	; 0x38
   8709e:	1bbf      	subs	r7, r7, r6
   870a0:	1e7b      	subs	r3, r7, #1
   870a2:	9308      	str	r3, [sp, #32]
   870a4:	f100 814e 	bmi.w	87344 <_dtoa_r+0x3fc>
   870a8:	2300      	movs	r3, #0
   870aa:	930a      	str	r3, [sp, #40]	; 0x28
   870ac:	9b02      	ldr	r3, [sp, #8]
   870ae:	2b00      	cmp	r3, #0
   870b0:	f2c0 813f 	blt.w	87332 <_dtoa_r+0x3ea>
   870b4:	9a08      	ldr	r2, [sp, #32]
   870b6:	930d      	str	r3, [sp, #52]	; 0x34
   870b8:	4611      	mov	r1, r2
   870ba:	4419      	add	r1, r3
   870bc:	2300      	movs	r3, #0
   870be:	9108      	str	r1, [sp, #32]
   870c0:	930c      	str	r3, [sp, #48]	; 0x30
   870c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   870c4:	2b09      	cmp	r3, #9
   870c6:	d82a      	bhi.n	8711e <_dtoa_r+0x1d6>
   870c8:	2b05      	cmp	r3, #5
   870ca:	f340 8658 	ble.w	87d7e <_dtoa_r+0xe36>
   870ce:	2500      	movs	r5, #0
   870d0:	3b04      	subs	r3, #4
   870d2:	9324      	str	r3, [sp, #144]	; 0x90
   870d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   870d6:	3b02      	subs	r3, #2
   870d8:	2b03      	cmp	r3, #3
   870da:	f200 863f 	bhi.w	87d5c <_dtoa_r+0xe14>
   870de:	e8df f013 	tbh	[pc, r3, lsl #1]
   870e2:	03ce      	.short	0x03ce
   870e4:	03d902c3 	.word	0x03d902c3
   870e8:	045b      	.short	0x045b
   870ea:	9f18      	ldr	r7, [sp, #96]	; 0x60
   870ec:	9e19      	ldr	r6, [sp, #100]	; 0x64
   870ee:	443e      	add	r6, r7
   870f0:	f206 4332 	addw	r3, r6, #1074	; 0x432
   870f4:	2b20      	cmp	r3, #32
   870f6:	f340 8187 	ble.w	87408 <_dtoa_r+0x4c0>
   870fa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   870fe:	f206 4012 	addw	r0, r6, #1042	; 0x412
   87102:	409d      	lsls	r5, r3
   87104:	fa2a f000 	lsr.w	r0, sl, r0
   87108:	4328      	orrs	r0, r5
   8710a:	f7fd fd37 	bl	84b7c <__aeabi_ui2d>
   8710e:	2301      	movs	r3, #1
   87110:	3e01      	subs	r6, #1
   87112:	9314      	str	r3, [sp, #80]	; 0x50
   87114:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   87118:	e781      	b.n	8701e <_dtoa_r+0xd6>
   8711a:	483b      	ldr	r0, [pc, #236]	; (87208 <_dtoa_r+0x2c0>)
   8711c:	e743      	b.n	86fa6 <_dtoa_r+0x5e>
   8711e:	2100      	movs	r1, #0
   87120:	4620      	mov	r0, r4
   87122:	6461      	str	r1, [r4, #68]	; 0x44
   87124:	9125      	str	r1, [sp, #148]	; 0x94
   87126:	f001 f951 	bl	883cc <_Balloc>
   8712a:	f04f 33ff 	mov.w	r3, #4294967295
   8712e:	9307      	str	r3, [sp, #28]
   87130:	930f      	str	r3, [sp, #60]	; 0x3c
   87132:	2301      	movs	r3, #1
   87134:	9a25      	ldr	r2, [sp, #148]	; 0x94
   87136:	9004      	str	r0, [sp, #16]
   87138:	6420      	str	r0, [r4, #64]	; 0x40
   8713a:	9224      	str	r2, [sp, #144]	; 0x90
   8713c:	930b      	str	r3, [sp, #44]	; 0x2c
   8713e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   87140:	2b00      	cmp	r3, #0
   87142:	f2c0 80d3 	blt.w	872ec <_dtoa_r+0x3a4>
   87146:	9a02      	ldr	r2, [sp, #8]
   87148:	2a0e      	cmp	r2, #14
   8714a:	f300 80cf 	bgt.w	872ec <_dtoa_r+0x3a4>
   8714e:	4b2d      	ldr	r3, [pc, #180]	; (87204 <_dtoa_r+0x2bc>)
   87150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87154:	e9d3 2300 	ldrd	r2, r3, [r3]
   87158:	e9cd 2308 	strd	r2, r3, [sp, #32]
   8715c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8715e:	2b00      	cmp	r3, #0
   87160:	f2c0 83b4 	blt.w	878cc <_dtoa_r+0x984>
   87164:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   87168:	4650      	mov	r0, sl
   8716a:	462a      	mov	r2, r5
   8716c:	4633      	mov	r3, r6
   8716e:	4659      	mov	r1, fp
   87170:	f7fd fea4 	bl	84ebc <__aeabi_ddiv>
   87174:	f002 f958 	bl	89428 <__aeabi_d2iz>
   87178:	4680      	mov	r8, r0
   8717a:	f7fd fd0f 	bl	84b9c <__aeabi_i2d>
   8717e:	462a      	mov	r2, r5
   87180:	4633      	mov	r3, r6
   87182:	f7fd fd71 	bl	84c68 <__aeabi_dmul>
   87186:	4602      	mov	r2, r0
   87188:	460b      	mov	r3, r1
   8718a:	4650      	mov	r0, sl
   8718c:	4659      	mov	r1, fp
   8718e:	f7fd fbb7 	bl	84900 <__aeabi_dsub>
   87192:	9e07      	ldr	r6, [sp, #28]
   87194:	9f04      	ldr	r7, [sp, #16]
   87196:	f108 0530 	add.w	r5, r8, #48	; 0x30
   8719a:	2e01      	cmp	r6, #1
   8719c:	703d      	strb	r5, [r7, #0]
   8719e:	4602      	mov	r2, r0
   871a0:	460b      	mov	r3, r1
   871a2:	f107 0501 	add.w	r5, r7, #1
   871a6:	d064      	beq.n	87272 <_dtoa_r+0x32a>
   871a8:	2200      	movs	r2, #0
   871aa:	4b18      	ldr	r3, [pc, #96]	; (8720c <_dtoa_r+0x2c4>)
   871ac:	f7fd fd5c 	bl	84c68 <__aeabi_dmul>
   871b0:	2200      	movs	r2, #0
   871b2:	2300      	movs	r3, #0
   871b4:	4606      	mov	r6, r0
   871b6:	460f      	mov	r7, r1
   871b8:	f002 f8ee 	bl	89398 <__aeabi_dcmpeq>
   871bc:	2800      	cmp	r0, #0
   871be:	f040 8082 	bne.w	872c6 <_dtoa_r+0x37e>
   871c2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   871c6:	f04f 0a00 	mov.w	sl, #0
   871ca:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   871ce:	f04f 0b00 	mov.w	fp, #0
   871d2:	940b      	str	r4, [sp, #44]	; 0x2c
   871d4:	e029      	b.n	8722a <_dtoa_r+0x2e2>
   871d6:	bf00      	nop
   871d8:	636f4361 	.word	0x636f4361
   871dc:	3fd287a7 	.word	0x3fd287a7
   871e0:	8b60c8b3 	.word	0x8b60c8b3
   871e4:	3fc68a28 	.word	0x3fc68a28
   871e8:	509f79fb 	.word	0x509f79fb
   871ec:	3fd34413 	.word	0x3fd34413
   871f0:	7ff00000 	.word	0x7ff00000
   871f4:	00089989 	.word	0x00089989
   871f8:	000899ac 	.word	0x000899ac
   871fc:	000899b8 	.word	0x000899b8
   87200:	3ff80000 	.word	0x3ff80000
   87204:	000899e8 	.word	0x000899e8
   87208:	00089988 	.word	0x00089988
   8720c:	40240000 	.word	0x40240000
   87210:	2200      	movs	r2, #0
   87212:	4b81      	ldr	r3, [pc, #516]	; (87418 <_dtoa_r+0x4d0>)
   87214:	f7fd fd28 	bl	84c68 <__aeabi_dmul>
   87218:	4652      	mov	r2, sl
   8721a:	465b      	mov	r3, fp
   8721c:	4606      	mov	r6, r0
   8721e:	460f      	mov	r7, r1
   87220:	f002 f8ba 	bl	89398 <__aeabi_dcmpeq>
   87224:	2800      	cmp	r0, #0
   87226:	f040 83ba 	bne.w	8799e <_dtoa_r+0xa56>
   8722a:	4642      	mov	r2, r8
   8722c:	464b      	mov	r3, r9
   8722e:	4630      	mov	r0, r6
   87230:	4639      	mov	r1, r7
   87232:	f7fd fe43 	bl	84ebc <__aeabi_ddiv>
   87236:	f002 f8f7 	bl	89428 <__aeabi_d2iz>
   8723a:	4604      	mov	r4, r0
   8723c:	f7fd fcae 	bl	84b9c <__aeabi_i2d>
   87240:	4642      	mov	r2, r8
   87242:	464b      	mov	r3, r9
   87244:	f7fd fd10 	bl	84c68 <__aeabi_dmul>
   87248:	4602      	mov	r2, r0
   8724a:	460b      	mov	r3, r1
   8724c:	4630      	mov	r0, r6
   8724e:	4639      	mov	r1, r7
   87250:	f7fd fb56 	bl	84900 <__aeabi_dsub>
   87254:	f104 0630 	add.w	r6, r4, #48	; 0x30
   87258:	f805 6b01 	strb.w	r6, [r5], #1
   8725c:	9e04      	ldr	r6, [sp, #16]
   8725e:	9f07      	ldr	r7, [sp, #28]
   87260:	1bae      	subs	r6, r5, r6
   87262:	42be      	cmp	r6, r7
   87264:	4602      	mov	r2, r0
   87266:	460b      	mov	r3, r1
   87268:	d1d2      	bne.n	87210 <_dtoa_r+0x2c8>
   8726a:	46a0      	mov	r8, r4
   8726c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   87270:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   87272:	4610      	mov	r0, r2
   87274:	4619      	mov	r1, r3
   87276:	f7fd fb45 	bl	84904 <__adddf3>
   8727a:	4606      	mov	r6, r0
   8727c:	460f      	mov	r7, r1
   8727e:	4602      	mov	r2, r0
   87280:	460b      	mov	r3, r1
   87282:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87286:	f002 f891 	bl	893ac <__aeabi_dcmplt>
   8728a:	b948      	cbnz	r0, 872a0 <_dtoa_r+0x358>
   8728c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87290:	4632      	mov	r2, r6
   87292:	463b      	mov	r3, r7
   87294:	f002 f880 	bl	89398 <__aeabi_dcmpeq>
   87298:	b1a8      	cbz	r0, 872c6 <_dtoa_r+0x37e>
   8729a:	f018 0f01 	tst.w	r8, #1
   8729e:	d012      	beq.n	872c6 <_dtoa_r+0x37e>
   872a0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   872a4:	1e6b      	subs	r3, r5, #1
   872a6:	9a04      	ldr	r2, [sp, #16]
   872a8:	e004      	b.n	872b4 <_dtoa_r+0x36c>
   872aa:	429a      	cmp	r2, r3
   872ac:	f000 8402 	beq.w	87ab4 <_dtoa_r+0xb6c>
   872b0:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   872b4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   872b8:	f103 0501 	add.w	r5, r3, #1
   872bc:	d0f5      	beq.n	872aa <_dtoa_r+0x362>
   872be:	f108 0801 	add.w	r8, r8, #1
   872c2:	f883 8000 	strb.w	r8, [r3]
   872c6:	4649      	mov	r1, r9
   872c8:	4620      	mov	r0, r4
   872ca:	f001 f8a5 	bl	88418 <_Bfree>
   872ce:	2200      	movs	r2, #0
   872d0:	9b02      	ldr	r3, [sp, #8]
   872d2:	702a      	strb	r2, [r5, #0]
   872d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   872d6:	3301      	adds	r3, #1
   872d8:	6013      	str	r3, [r2, #0]
   872da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   872dc:	2b00      	cmp	r3, #0
   872de:	f000 839f 	beq.w	87a20 <_dtoa_r+0xad8>
   872e2:	9804      	ldr	r0, [sp, #16]
   872e4:	601d      	str	r5, [r3, #0]
   872e6:	b01b      	add	sp, #108	; 0x6c
   872e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   872ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   872ee:	2a00      	cmp	r2, #0
   872f0:	d03e      	beq.n	87370 <_dtoa_r+0x428>
   872f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   872f4:	2a01      	cmp	r2, #1
   872f6:	f340 8311 	ble.w	8791c <_dtoa_r+0x9d4>
   872fa:	9b07      	ldr	r3, [sp, #28]
   872fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   872fe:	1e5f      	subs	r7, r3, #1
   87300:	42ba      	cmp	r2, r7
   87302:	f2c0 8390 	blt.w	87a26 <_dtoa_r+0xade>
   87306:	1bd7      	subs	r7, r2, r7
   87308:	9b07      	ldr	r3, [sp, #28]
   8730a:	2b00      	cmp	r3, #0
   8730c:	f2c0 848c 	blt.w	87c28 <_dtoa_r+0xce0>
   87310:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87312:	9b07      	ldr	r3, [sp, #28]
   87314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87316:	2101      	movs	r1, #1
   87318:	441a      	add	r2, r3
   8731a:	920a      	str	r2, [sp, #40]	; 0x28
   8731c:	9a08      	ldr	r2, [sp, #32]
   8731e:	4620      	mov	r0, r4
   87320:	441a      	add	r2, r3
   87322:	9208      	str	r2, [sp, #32]
   87324:	f001 f914 	bl	88550 <__i2b>
   87328:	4606      	mov	r6, r0
   8732a:	e023      	b.n	87374 <_dtoa_r+0x42c>
   8732c:	2301      	movs	r3, #1
   8732e:	930e      	str	r3, [sp, #56]	; 0x38
   87330:	e6b5      	b.n	8709e <_dtoa_r+0x156>
   87332:	2300      	movs	r3, #0
   87334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87336:	930d      	str	r3, [sp, #52]	; 0x34
   87338:	9b02      	ldr	r3, [sp, #8]
   8733a:	1ad2      	subs	r2, r2, r3
   8733c:	425b      	negs	r3, r3
   8733e:	920a      	str	r2, [sp, #40]	; 0x28
   87340:	930c      	str	r3, [sp, #48]	; 0x30
   87342:	e6be      	b.n	870c2 <_dtoa_r+0x17a>
   87344:	f1c7 0301 	rsb	r3, r7, #1
   87348:	930a      	str	r3, [sp, #40]	; 0x28
   8734a:	2300      	movs	r3, #0
   8734c:	9308      	str	r3, [sp, #32]
   8734e:	e6ad      	b.n	870ac <_dtoa_r+0x164>
   87350:	9d02      	ldr	r5, [sp, #8]
   87352:	4628      	mov	r0, r5
   87354:	f7fd fc22 	bl	84b9c <__aeabi_i2d>
   87358:	4602      	mov	r2, r0
   8735a:	460b      	mov	r3, r1
   8735c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   87360:	f002 f81a 	bl	89398 <__aeabi_dcmpeq>
   87364:	2800      	cmp	r0, #0
   87366:	f47f ae86 	bne.w	87076 <_dtoa_r+0x12e>
   8736a:	1e6b      	subs	r3, r5, #1
   8736c:	9302      	str	r3, [sp, #8]
   8736e:	e682      	b.n	87076 <_dtoa_r+0x12e>
   87370:	ad0a      	add	r5, sp, #40	; 0x28
   87372:	cde0      	ldmia	r5, {r5, r6, r7}
   87374:	2d00      	cmp	r5, #0
   87376:	dd0c      	ble.n	87392 <_dtoa_r+0x44a>
   87378:	9908      	ldr	r1, [sp, #32]
   8737a:	2900      	cmp	r1, #0
   8737c:	460b      	mov	r3, r1
   8737e:	dd08      	ble.n	87392 <_dtoa_r+0x44a>
   87380:	42a9      	cmp	r1, r5
   87382:	bfa8      	it	ge
   87384:	462b      	movge	r3, r5
   87386:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87388:	1aed      	subs	r5, r5, r3
   8738a:	1ad2      	subs	r2, r2, r3
   8738c:	1acb      	subs	r3, r1, r3
   8738e:	920a      	str	r2, [sp, #40]	; 0x28
   87390:	9308      	str	r3, [sp, #32]
   87392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87394:	b1d3      	cbz	r3, 873cc <_dtoa_r+0x484>
   87396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87398:	2b00      	cmp	r3, #0
   8739a:	f000 82b8 	beq.w	8790e <_dtoa_r+0x9c6>
   8739e:	2f00      	cmp	r7, #0
   873a0:	dd10      	ble.n	873c4 <_dtoa_r+0x47c>
   873a2:	4631      	mov	r1, r6
   873a4:	463a      	mov	r2, r7
   873a6:	4620      	mov	r0, r4
   873a8:	f001 f96e 	bl	88688 <__pow5mult>
   873ac:	464a      	mov	r2, r9
   873ae:	4601      	mov	r1, r0
   873b0:	4606      	mov	r6, r0
   873b2:	4620      	mov	r0, r4
   873b4:	f001 f8d6 	bl	88564 <__multiply>
   873b8:	4603      	mov	r3, r0
   873ba:	4649      	mov	r1, r9
   873bc:	4620      	mov	r0, r4
   873be:	4699      	mov	r9, r3
   873c0:	f001 f82a 	bl	88418 <_Bfree>
   873c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   873c6:	1bda      	subs	r2, r3, r7
   873c8:	f040 82a2 	bne.w	87910 <_dtoa_r+0x9c8>
   873cc:	2101      	movs	r1, #1
   873ce:	4620      	mov	r0, r4
   873d0:	f001 f8be 	bl	88550 <__i2b>
   873d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   873d6:	4680      	mov	r8, r0
   873d8:	2b00      	cmp	r3, #0
   873da:	dd1f      	ble.n	8741c <_dtoa_r+0x4d4>
   873dc:	4601      	mov	r1, r0
   873de:	461a      	mov	r2, r3
   873e0:	4620      	mov	r0, r4
   873e2:	f001 f951 	bl	88688 <__pow5mult>
   873e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   873e8:	4680      	mov	r8, r0
   873ea:	2b01      	cmp	r3, #1
   873ec:	f340 8255 	ble.w	8789a <_dtoa_r+0x952>
   873f0:	2300      	movs	r3, #0
   873f2:	930c      	str	r3, [sp, #48]	; 0x30
   873f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   873f8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   873fc:	6918      	ldr	r0, [r3, #16]
   873fe:	f001 f857 	bl	884b0 <__hi0bits>
   87402:	f1c0 0020 	rsb	r0, r0, #32
   87406:	e013      	b.n	87430 <_dtoa_r+0x4e8>
   87408:	f1c3 0520 	rsb	r5, r3, #32
   8740c:	fa0a f005 	lsl.w	r0, sl, r5
   87410:	e67b      	b.n	8710a <_dtoa_r+0x1c2>
   87412:	900e      	str	r0, [sp, #56]	; 0x38
   87414:	e643      	b.n	8709e <_dtoa_r+0x156>
   87416:	bf00      	nop
   87418:	40240000 	.word	0x40240000
   8741c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8741e:	2b01      	cmp	r3, #1
   87420:	f340 8285 	ble.w	8792e <_dtoa_r+0x9e6>
   87424:	2300      	movs	r3, #0
   87426:	930c      	str	r3, [sp, #48]	; 0x30
   87428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8742a:	2001      	movs	r0, #1
   8742c:	2b00      	cmp	r3, #0
   8742e:	d1e1      	bne.n	873f4 <_dtoa_r+0x4ac>
   87430:	9a08      	ldr	r2, [sp, #32]
   87432:	4410      	add	r0, r2
   87434:	f010 001f 	ands.w	r0, r0, #31
   87438:	f000 80a1 	beq.w	8757e <_dtoa_r+0x636>
   8743c:	f1c0 0320 	rsb	r3, r0, #32
   87440:	2b04      	cmp	r3, #4
   87442:	f340 8486 	ble.w	87d52 <_dtoa_r+0xe0a>
   87446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87448:	f1c0 001c 	rsb	r0, r0, #28
   8744c:	4403      	add	r3, r0
   8744e:	930a      	str	r3, [sp, #40]	; 0x28
   87450:	4613      	mov	r3, r2
   87452:	4403      	add	r3, r0
   87454:	4405      	add	r5, r0
   87456:	9308      	str	r3, [sp, #32]
   87458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8745a:	2b00      	cmp	r3, #0
   8745c:	dd05      	ble.n	8746a <_dtoa_r+0x522>
   8745e:	4649      	mov	r1, r9
   87460:	461a      	mov	r2, r3
   87462:	4620      	mov	r0, r4
   87464:	f001 f960 	bl	88728 <__lshift>
   87468:	4681      	mov	r9, r0
   8746a:	9b08      	ldr	r3, [sp, #32]
   8746c:	2b00      	cmp	r3, #0
   8746e:	dd05      	ble.n	8747c <_dtoa_r+0x534>
   87470:	4641      	mov	r1, r8
   87472:	461a      	mov	r2, r3
   87474:	4620      	mov	r0, r4
   87476:	f001 f957 	bl	88728 <__lshift>
   8747a:	4680      	mov	r8, r0
   8747c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8747e:	2b00      	cmp	r3, #0
   87480:	f040 8086 	bne.w	87590 <_dtoa_r+0x648>
   87484:	9b07      	ldr	r3, [sp, #28]
   87486:	2b00      	cmp	r3, #0
   87488:	f340 8264 	ble.w	87954 <_dtoa_r+0xa0c>
   8748c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8748e:	2b00      	cmp	r3, #0
   87490:	f000 8098 	beq.w	875c4 <_dtoa_r+0x67c>
   87494:	2d00      	cmp	r5, #0
   87496:	dd05      	ble.n	874a4 <_dtoa_r+0x55c>
   87498:	4631      	mov	r1, r6
   8749a:	462a      	mov	r2, r5
   8749c:	4620      	mov	r0, r4
   8749e:	f001 f943 	bl	88728 <__lshift>
   874a2:	4606      	mov	r6, r0
   874a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   874a6:	2b00      	cmp	r3, #0
   874a8:	f040 8336 	bne.w	87b18 <_dtoa_r+0xbd0>
   874ac:	9608      	str	r6, [sp, #32]
   874ae:	9b07      	ldr	r3, [sp, #28]
   874b0:	9a04      	ldr	r2, [sp, #16]
   874b2:	3b01      	subs	r3, #1
   874b4:	18d3      	adds	r3, r2, r3
   874b6:	930b      	str	r3, [sp, #44]	; 0x2c
   874b8:	4617      	mov	r7, r2
   874ba:	f00a 0301 	and.w	r3, sl, #1
   874be:	46c2      	mov	sl, r8
   874c0:	f8dd b020 	ldr.w	fp, [sp, #32]
   874c4:	930c      	str	r3, [sp, #48]	; 0x30
   874c6:	4651      	mov	r1, sl
   874c8:	4648      	mov	r0, r9
   874ca:	f7ff fca9 	bl	86e20 <quorem>
   874ce:	4631      	mov	r1, r6
   874d0:	4605      	mov	r5, r0
   874d2:	4648      	mov	r0, r9
   874d4:	f001 f978 	bl	887c8 <__mcmp>
   874d8:	465a      	mov	r2, fp
   874da:	9007      	str	r0, [sp, #28]
   874dc:	4651      	mov	r1, sl
   874de:	4620      	mov	r0, r4
   874e0:	f001 f98e 	bl	88800 <__mdiff>
   874e4:	68c2      	ldr	r2, [r0, #12]
   874e6:	4680      	mov	r8, r0
   874e8:	f105 0330 	add.w	r3, r5, #48	; 0x30
   874ec:	2a00      	cmp	r2, #0
   874ee:	f040 8229 	bne.w	87944 <_dtoa_r+0x9fc>
   874f2:	4601      	mov	r1, r0
   874f4:	4648      	mov	r0, r9
   874f6:	930a      	str	r3, [sp, #40]	; 0x28
   874f8:	f001 f966 	bl	887c8 <__mcmp>
   874fc:	4641      	mov	r1, r8
   874fe:	9008      	str	r0, [sp, #32]
   87500:	4620      	mov	r0, r4
   87502:	f000 ff89 	bl	88418 <_Bfree>
   87506:	9a08      	ldr	r2, [sp, #32]
   87508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8750a:	b932      	cbnz	r2, 8751a <_dtoa_r+0x5d2>
   8750c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8750e:	b921      	cbnz	r1, 8751a <_dtoa_r+0x5d2>
   87510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87512:	2a00      	cmp	r2, #0
   87514:	f000 83ee 	beq.w	87cf4 <_dtoa_r+0xdac>
   87518:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8751a:	9907      	ldr	r1, [sp, #28]
   8751c:	2900      	cmp	r1, #0
   8751e:	f2c0 829f 	blt.w	87a60 <_dtoa_r+0xb18>
   87522:	d105      	bne.n	87530 <_dtoa_r+0x5e8>
   87524:	9924      	ldr	r1, [sp, #144]	; 0x90
   87526:	b919      	cbnz	r1, 87530 <_dtoa_r+0x5e8>
   87528:	990c      	ldr	r1, [sp, #48]	; 0x30
   8752a:	2900      	cmp	r1, #0
   8752c:	f000 8298 	beq.w	87a60 <_dtoa_r+0xb18>
   87530:	2a00      	cmp	r2, #0
   87532:	f300 8305 	bgt.w	87b40 <_dtoa_r+0xbf8>
   87536:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87538:	f107 0801 	add.w	r8, r7, #1
   8753c:	4297      	cmp	r7, r2
   8753e:	703b      	strb	r3, [r7, #0]
   87540:	4645      	mov	r5, r8
   87542:	f000 830b 	beq.w	87b5c <_dtoa_r+0xc14>
   87546:	4649      	mov	r1, r9
   87548:	2300      	movs	r3, #0
   8754a:	220a      	movs	r2, #10
   8754c:	4620      	mov	r0, r4
   8754e:	f000 ff6d 	bl	8842c <__multadd>
   87552:	455e      	cmp	r6, fp
   87554:	4681      	mov	r9, r0
   87556:	4631      	mov	r1, r6
   87558:	f04f 0300 	mov.w	r3, #0
   8755c:	f04f 020a 	mov.w	r2, #10
   87560:	4620      	mov	r0, r4
   87562:	f000 81e9 	beq.w	87938 <_dtoa_r+0x9f0>
   87566:	f000 ff61 	bl	8842c <__multadd>
   8756a:	4659      	mov	r1, fp
   8756c:	4606      	mov	r6, r0
   8756e:	2300      	movs	r3, #0
   87570:	220a      	movs	r2, #10
   87572:	4620      	mov	r0, r4
   87574:	f000 ff5a 	bl	8842c <__multadd>
   87578:	4647      	mov	r7, r8
   8757a:	4683      	mov	fp, r0
   8757c:	e7a3      	b.n	874c6 <_dtoa_r+0x57e>
   8757e:	201c      	movs	r0, #28
   87580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87582:	4405      	add	r5, r0
   87584:	4403      	add	r3, r0
   87586:	930a      	str	r3, [sp, #40]	; 0x28
   87588:	9b08      	ldr	r3, [sp, #32]
   8758a:	4403      	add	r3, r0
   8758c:	9308      	str	r3, [sp, #32]
   8758e:	e763      	b.n	87458 <_dtoa_r+0x510>
   87590:	4641      	mov	r1, r8
   87592:	4648      	mov	r0, r9
   87594:	f001 f918 	bl	887c8 <__mcmp>
   87598:	2800      	cmp	r0, #0
   8759a:	f6bf af73 	bge.w	87484 <_dtoa_r+0x53c>
   8759e:	9f02      	ldr	r7, [sp, #8]
   875a0:	4649      	mov	r1, r9
   875a2:	2300      	movs	r3, #0
   875a4:	220a      	movs	r2, #10
   875a6:	4620      	mov	r0, r4
   875a8:	3f01      	subs	r7, #1
   875aa:	9702      	str	r7, [sp, #8]
   875ac:	f000 ff3e 	bl	8842c <__multadd>
   875b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   875b2:	4681      	mov	r9, r0
   875b4:	2b00      	cmp	r3, #0
   875b6:	f040 83b5 	bne.w	87d24 <_dtoa_r+0xddc>
   875ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   875bc:	2b00      	cmp	r3, #0
   875be:	f340 83be 	ble.w	87d3e <_dtoa_r+0xdf6>
   875c2:	9307      	str	r3, [sp, #28]
   875c4:	f8dd a010 	ldr.w	sl, [sp, #16]
   875c8:	9f07      	ldr	r7, [sp, #28]
   875ca:	4655      	mov	r5, sl
   875cc:	e006      	b.n	875dc <_dtoa_r+0x694>
   875ce:	4649      	mov	r1, r9
   875d0:	2300      	movs	r3, #0
   875d2:	220a      	movs	r2, #10
   875d4:	4620      	mov	r0, r4
   875d6:	f000 ff29 	bl	8842c <__multadd>
   875da:	4681      	mov	r9, r0
   875dc:	4641      	mov	r1, r8
   875de:	4648      	mov	r0, r9
   875e0:	f7ff fc1e 	bl	86e20 <quorem>
   875e4:	3030      	adds	r0, #48	; 0x30
   875e6:	f805 0b01 	strb.w	r0, [r5], #1
   875ea:	eba5 030a 	sub.w	r3, r5, sl
   875ee:	42bb      	cmp	r3, r7
   875f0:	dbed      	blt.n	875ce <_dtoa_r+0x686>
   875f2:	9b04      	ldr	r3, [sp, #16]
   875f4:	9a07      	ldr	r2, [sp, #28]
   875f6:	4682      	mov	sl, r0
   875f8:	2a01      	cmp	r2, #1
   875fa:	bfac      	ite	ge
   875fc:	189b      	addge	r3, r3, r2
   875fe:	3301      	addlt	r3, #1
   87600:	f04f 0b00 	mov.w	fp, #0
   87604:	461d      	mov	r5, r3
   87606:	4649      	mov	r1, r9
   87608:	2201      	movs	r2, #1
   8760a:	4620      	mov	r0, r4
   8760c:	f001 f88c 	bl	88728 <__lshift>
   87610:	4641      	mov	r1, r8
   87612:	4681      	mov	r9, r0
   87614:	f001 f8d8 	bl	887c8 <__mcmp>
   87618:	2800      	cmp	r0, #0
   8761a:	f340 823f 	ble.w	87a9c <_dtoa_r+0xb54>
   8761e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   87622:	1e6b      	subs	r3, r5, #1
   87624:	9904      	ldr	r1, [sp, #16]
   87626:	e004      	b.n	87632 <_dtoa_r+0x6ea>
   87628:	428b      	cmp	r3, r1
   8762a:	f000 81ae 	beq.w	8798a <_dtoa_r+0xa42>
   8762e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   87632:	2a39      	cmp	r2, #57	; 0x39
   87634:	f103 0501 	add.w	r5, r3, #1
   87638:	d0f6      	beq.n	87628 <_dtoa_r+0x6e0>
   8763a:	3201      	adds	r2, #1
   8763c:	701a      	strb	r2, [r3, #0]
   8763e:	4641      	mov	r1, r8
   87640:	4620      	mov	r0, r4
   87642:	f000 fee9 	bl	88418 <_Bfree>
   87646:	2e00      	cmp	r6, #0
   87648:	f43f ae3d 	beq.w	872c6 <_dtoa_r+0x37e>
   8764c:	f1bb 0f00 	cmp.w	fp, #0
   87650:	d005      	beq.n	8765e <_dtoa_r+0x716>
   87652:	45b3      	cmp	fp, r6
   87654:	d003      	beq.n	8765e <_dtoa_r+0x716>
   87656:	4659      	mov	r1, fp
   87658:	4620      	mov	r0, r4
   8765a:	f000 fedd 	bl	88418 <_Bfree>
   8765e:	4631      	mov	r1, r6
   87660:	4620      	mov	r0, r4
   87662:	f000 fed9 	bl	88418 <_Bfree>
   87666:	e62e      	b.n	872c6 <_dtoa_r+0x37e>
   87668:	2300      	movs	r3, #0
   8766a:	930b      	str	r3, [sp, #44]	; 0x2c
   8766c:	9b02      	ldr	r3, [sp, #8]
   8766e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   87670:	4413      	add	r3, r2
   87672:	930f      	str	r3, [sp, #60]	; 0x3c
   87674:	3301      	adds	r3, #1
   87676:	2b01      	cmp	r3, #1
   87678:	461f      	mov	r7, r3
   8767a:	461e      	mov	r6, r3
   8767c:	bfb8      	it	lt
   8767e:	2701      	movlt	r7, #1
   87680:	9307      	str	r3, [sp, #28]
   87682:	2100      	movs	r1, #0
   87684:	2f17      	cmp	r7, #23
   87686:	6461      	str	r1, [r4, #68]	; 0x44
   87688:	d90a      	bls.n	876a0 <_dtoa_r+0x758>
   8768a:	2201      	movs	r2, #1
   8768c:	2304      	movs	r3, #4
   8768e:	005b      	lsls	r3, r3, #1
   87690:	f103 0014 	add.w	r0, r3, #20
   87694:	4287      	cmp	r7, r0
   87696:	4611      	mov	r1, r2
   87698:	f102 0201 	add.w	r2, r2, #1
   8769c:	d2f7      	bcs.n	8768e <_dtoa_r+0x746>
   8769e:	6461      	str	r1, [r4, #68]	; 0x44
   876a0:	4620      	mov	r0, r4
   876a2:	f000 fe93 	bl	883cc <_Balloc>
   876a6:	2e0e      	cmp	r6, #14
   876a8:	9004      	str	r0, [sp, #16]
   876aa:	6420      	str	r0, [r4, #64]	; 0x40
   876ac:	f63f ad47 	bhi.w	8713e <_dtoa_r+0x1f6>
   876b0:	2d00      	cmp	r5, #0
   876b2:	f43f ad44 	beq.w	8713e <_dtoa_r+0x1f6>
   876b6:	9902      	ldr	r1, [sp, #8]
   876b8:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   876bc:	2900      	cmp	r1, #0
   876be:	f340 8203 	ble.w	87ac8 <_dtoa_r+0xb80>
   876c2:	4bb9      	ldr	r3, [pc, #740]	; (879a8 <_dtoa_r+0xa60>)
   876c4:	f001 020f 	and.w	r2, r1, #15
   876c8:	110d      	asrs	r5, r1, #4
   876ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   876ce:	06e9      	lsls	r1, r5, #27
   876d0:	e9d3 6700 	ldrd	r6, r7, [r3]
   876d4:	f140 81af 	bpl.w	87a36 <_dtoa_r+0xaee>
   876d8:	4bb4      	ldr	r3, [pc, #720]	; (879ac <_dtoa_r+0xa64>)
   876da:	4650      	mov	r0, sl
   876dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   876e0:	4659      	mov	r1, fp
   876e2:	f7fd fbeb 	bl	84ebc <__aeabi_ddiv>
   876e6:	f04f 0a03 	mov.w	sl, #3
   876ea:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   876ee:	f005 050f 	and.w	r5, r5, #15
   876f2:	b18d      	cbz	r5, 87718 <_dtoa_r+0x7d0>
   876f4:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 879ac <_dtoa_r+0xa64>
   876f8:	07ea      	lsls	r2, r5, #31
   876fa:	d509      	bpl.n	87710 <_dtoa_r+0x7c8>
   876fc:	e9d8 2300 	ldrd	r2, r3, [r8]
   87700:	4630      	mov	r0, r6
   87702:	4639      	mov	r1, r7
   87704:	f7fd fab0 	bl	84c68 <__aeabi_dmul>
   87708:	4606      	mov	r6, r0
   8770a:	460f      	mov	r7, r1
   8770c:	f10a 0a01 	add.w	sl, sl, #1
   87710:	106d      	asrs	r5, r5, #1
   87712:	f108 0808 	add.w	r8, r8, #8
   87716:	d1ef      	bne.n	876f8 <_dtoa_r+0x7b0>
   87718:	463b      	mov	r3, r7
   8771a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8771e:	4632      	mov	r2, r6
   87720:	f7fd fbcc 	bl	84ebc <__aeabi_ddiv>
   87724:	4607      	mov	r7, r0
   87726:	4688      	mov	r8, r1
   87728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8772a:	b143      	cbz	r3, 8773e <_dtoa_r+0x7f6>
   8772c:	2200      	movs	r2, #0
   8772e:	4ba0      	ldr	r3, [pc, #640]	; (879b0 <_dtoa_r+0xa68>)
   87730:	4638      	mov	r0, r7
   87732:	4641      	mov	r1, r8
   87734:	f001 fe3a 	bl	893ac <__aeabi_dcmplt>
   87738:	2800      	cmp	r0, #0
   8773a:	f040 8287 	bne.w	87c4c <_dtoa_r+0xd04>
   8773e:	4650      	mov	r0, sl
   87740:	f7fd fa2c 	bl	84b9c <__aeabi_i2d>
   87744:	463a      	mov	r2, r7
   87746:	4643      	mov	r3, r8
   87748:	f7fd fa8e 	bl	84c68 <__aeabi_dmul>
   8774c:	4b99      	ldr	r3, [pc, #612]	; (879b4 <_dtoa_r+0xa6c>)
   8774e:	2200      	movs	r2, #0
   87750:	f7fd f8d8 	bl	84904 <__adddf3>
   87754:	9b07      	ldr	r3, [sp, #28]
   87756:	4605      	mov	r5, r0
   87758:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8775c:	2b00      	cmp	r3, #0
   8775e:	f000 813f 	beq.w	879e0 <_dtoa_r+0xa98>
   87762:	9b02      	ldr	r3, [sp, #8]
   87764:	9315      	str	r3, [sp, #84]	; 0x54
   87766:	9b07      	ldr	r3, [sp, #28]
   87768:	9312      	str	r3, [sp, #72]	; 0x48
   8776a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8776c:	2b00      	cmp	r3, #0
   8776e:	f000 81fb 	beq.w	87b68 <_dtoa_r+0xc20>
   87772:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87774:	4b8c      	ldr	r3, [pc, #560]	; (879a8 <_dtoa_r+0xa60>)
   87776:	2000      	movs	r0, #0
   87778:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8777c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   87780:	498d      	ldr	r1, [pc, #564]	; (879b8 <_dtoa_r+0xa70>)
   87782:	f7fd fb9b 	bl	84ebc <__aeabi_ddiv>
   87786:	462a      	mov	r2, r5
   87788:	4633      	mov	r3, r6
   8778a:	f7fd f8b9 	bl	84900 <__aeabi_dsub>
   8778e:	4682      	mov	sl, r0
   87790:	468b      	mov	fp, r1
   87792:	4638      	mov	r0, r7
   87794:	4641      	mov	r1, r8
   87796:	f001 fe47 	bl	89428 <__aeabi_d2iz>
   8779a:	4605      	mov	r5, r0
   8779c:	f7fd f9fe 	bl	84b9c <__aeabi_i2d>
   877a0:	4602      	mov	r2, r0
   877a2:	460b      	mov	r3, r1
   877a4:	4638      	mov	r0, r7
   877a6:	4641      	mov	r1, r8
   877a8:	f7fd f8aa 	bl	84900 <__aeabi_dsub>
   877ac:	3530      	adds	r5, #48	; 0x30
   877ae:	fa5f f885 	uxtb.w	r8, r5
   877b2:	9d04      	ldr	r5, [sp, #16]
   877b4:	4606      	mov	r6, r0
   877b6:	460f      	mov	r7, r1
   877b8:	f885 8000 	strb.w	r8, [r5]
   877bc:	4602      	mov	r2, r0
   877be:	460b      	mov	r3, r1
   877c0:	4650      	mov	r0, sl
   877c2:	4659      	mov	r1, fp
   877c4:	3501      	adds	r5, #1
   877c6:	f001 fe0f 	bl	893e8 <__aeabi_dcmpgt>
   877ca:	2800      	cmp	r0, #0
   877cc:	d154      	bne.n	87878 <_dtoa_r+0x930>
   877ce:	4632      	mov	r2, r6
   877d0:	463b      	mov	r3, r7
   877d2:	2000      	movs	r0, #0
   877d4:	4976      	ldr	r1, [pc, #472]	; (879b0 <_dtoa_r+0xa68>)
   877d6:	f7fd f893 	bl	84900 <__aeabi_dsub>
   877da:	4602      	mov	r2, r0
   877dc:	460b      	mov	r3, r1
   877de:	4650      	mov	r0, sl
   877e0:	4659      	mov	r1, fp
   877e2:	f001 fe01 	bl	893e8 <__aeabi_dcmpgt>
   877e6:	2800      	cmp	r0, #0
   877e8:	f040 8270 	bne.w	87ccc <_dtoa_r+0xd84>
   877ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   877ee:	2a01      	cmp	r2, #1
   877f0:	f000 8112 	beq.w	87a18 <_dtoa_r+0xad0>
   877f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   877f6:	9a04      	ldr	r2, [sp, #16]
   877f8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   877fc:	4413      	add	r3, r2
   877fe:	4699      	mov	r9, r3
   87800:	e00f      	b.n	87822 <_dtoa_r+0x8da>
   87802:	4632      	mov	r2, r6
   87804:	463b      	mov	r3, r7
   87806:	2000      	movs	r0, #0
   87808:	4969      	ldr	r1, [pc, #420]	; (879b0 <_dtoa_r+0xa68>)
   8780a:	f7fd f879 	bl	84900 <__aeabi_dsub>
   8780e:	4652      	mov	r2, sl
   87810:	465b      	mov	r3, fp
   87812:	f001 fdcb 	bl	893ac <__aeabi_dcmplt>
   87816:	2800      	cmp	r0, #0
   87818:	f040 8256 	bne.w	87cc8 <_dtoa_r+0xd80>
   8781c:	454d      	cmp	r5, r9
   8781e:	f000 80f9 	beq.w	87a14 <_dtoa_r+0xacc>
   87822:	4650      	mov	r0, sl
   87824:	4659      	mov	r1, fp
   87826:	2200      	movs	r2, #0
   87828:	4b64      	ldr	r3, [pc, #400]	; (879bc <_dtoa_r+0xa74>)
   8782a:	f7fd fa1d 	bl	84c68 <__aeabi_dmul>
   8782e:	2200      	movs	r2, #0
   87830:	4b62      	ldr	r3, [pc, #392]	; (879bc <_dtoa_r+0xa74>)
   87832:	4682      	mov	sl, r0
   87834:	468b      	mov	fp, r1
   87836:	4630      	mov	r0, r6
   87838:	4639      	mov	r1, r7
   8783a:	f7fd fa15 	bl	84c68 <__aeabi_dmul>
   8783e:	460f      	mov	r7, r1
   87840:	4606      	mov	r6, r0
   87842:	f001 fdf1 	bl	89428 <__aeabi_d2iz>
   87846:	4680      	mov	r8, r0
   87848:	f7fd f9a8 	bl	84b9c <__aeabi_i2d>
   8784c:	4602      	mov	r2, r0
   8784e:	460b      	mov	r3, r1
   87850:	4630      	mov	r0, r6
   87852:	4639      	mov	r1, r7
   87854:	f7fd f854 	bl	84900 <__aeabi_dsub>
   87858:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8785c:	fa5f f888 	uxtb.w	r8, r8
   87860:	f805 8b01 	strb.w	r8, [r5], #1
   87864:	4652      	mov	r2, sl
   87866:	465b      	mov	r3, fp
   87868:	4606      	mov	r6, r0
   8786a:	460f      	mov	r7, r1
   8786c:	f001 fd9e 	bl	893ac <__aeabi_dcmplt>
   87870:	2800      	cmp	r0, #0
   87872:	d0c6      	beq.n	87802 <_dtoa_r+0x8ba>
   87874:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87878:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8787a:	9302      	str	r3, [sp, #8]
   8787c:	e523      	b.n	872c6 <_dtoa_r+0x37e>
   8787e:	2300      	movs	r3, #0
   87880:	930b      	str	r3, [sp, #44]	; 0x2c
   87882:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87884:	2b00      	cmp	r3, #0
   87886:	f340 80dd 	ble.w	87a44 <_dtoa_r+0xafc>
   8788a:	461f      	mov	r7, r3
   8788c:	461e      	mov	r6, r3
   8788e:	930f      	str	r3, [sp, #60]	; 0x3c
   87890:	9307      	str	r3, [sp, #28]
   87892:	e6f6      	b.n	87682 <_dtoa_r+0x73a>
   87894:	2301      	movs	r3, #1
   87896:	930b      	str	r3, [sp, #44]	; 0x2c
   87898:	e7f3      	b.n	87882 <_dtoa_r+0x93a>
   8789a:	f1ba 0f00 	cmp.w	sl, #0
   8789e:	f47f ada7 	bne.w	873f0 <_dtoa_r+0x4a8>
   878a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   878a6:	2b00      	cmp	r3, #0
   878a8:	f47f adbc 	bne.w	87424 <_dtoa_r+0x4dc>
   878ac:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   878b0:	0d3f      	lsrs	r7, r7, #20
   878b2:	053f      	lsls	r7, r7, #20
   878b4:	2f00      	cmp	r7, #0
   878b6:	f000 820d 	beq.w	87cd4 <_dtoa_r+0xd8c>
   878ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   878bc:	3301      	adds	r3, #1
   878be:	930a      	str	r3, [sp, #40]	; 0x28
   878c0:	9b08      	ldr	r3, [sp, #32]
   878c2:	3301      	adds	r3, #1
   878c4:	9308      	str	r3, [sp, #32]
   878c6:	2301      	movs	r3, #1
   878c8:	930c      	str	r3, [sp, #48]	; 0x30
   878ca:	e5ad      	b.n	87428 <_dtoa_r+0x4e0>
   878cc:	9b07      	ldr	r3, [sp, #28]
   878ce:	2b00      	cmp	r3, #0
   878d0:	f73f ac48 	bgt.w	87164 <_dtoa_r+0x21c>
   878d4:	f040 8222 	bne.w	87d1c <_dtoa_r+0xdd4>
   878d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   878dc:	2200      	movs	r2, #0
   878de:	4b38      	ldr	r3, [pc, #224]	; (879c0 <_dtoa_r+0xa78>)
   878e0:	f7fd f9c2 	bl	84c68 <__aeabi_dmul>
   878e4:	4652      	mov	r2, sl
   878e6:	465b      	mov	r3, fp
   878e8:	f001 fd74 	bl	893d4 <__aeabi_dcmpge>
   878ec:	f8dd 801c 	ldr.w	r8, [sp, #28]
   878f0:	4646      	mov	r6, r8
   878f2:	2800      	cmp	r0, #0
   878f4:	d041      	beq.n	8797a <_dtoa_r+0xa32>
   878f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   878f8:	9d04      	ldr	r5, [sp, #16]
   878fa:	43db      	mvns	r3, r3
   878fc:	9302      	str	r3, [sp, #8]
   878fe:	4641      	mov	r1, r8
   87900:	4620      	mov	r0, r4
   87902:	f000 fd89 	bl	88418 <_Bfree>
   87906:	2e00      	cmp	r6, #0
   87908:	f43f acdd 	beq.w	872c6 <_dtoa_r+0x37e>
   8790c:	e6a7      	b.n	8765e <_dtoa_r+0x716>
   8790e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87910:	4649      	mov	r1, r9
   87912:	4620      	mov	r0, r4
   87914:	f000 feb8 	bl	88688 <__pow5mult>
   87918:	4681      	mov	r9, r0
   8791a:	e557      	b.n	873cc <_dtoa_r+0x484>
   8791c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   8791e:	2a00      	cmp	r2, #0
   87920:	f000 8188 	beq.w	87c34 <_dtoa_r+0xcec>
   87924:	f203 4333 	addw	r3, r3, #1075	; 0x433
   87928:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8792a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8792c:	e4f2      	b.n	87314 <_dtoa_r+0x3cc>
   8792e:	f1ba 0f00 	cmp.w	sl, #0
   87932:	f47f ad77 	bne.w	87424 <_dtoa_r+0x4dc>
   87936:	e7b4      	b.n	878a2 <_dtoa_r+0x95a>
   87938:	f000 fd78 	bl	8842c <__multadd>
   8793c:	4647      	mov	r7, r8
   8793e:	4606      	mov	r6, r0
   87940:	4683      	mov	fp, r0
   87942:	e5c0      	b.n	874c6 <_dtoa_r+0x57e>
   87944:	4601      	mov	r1, r0
   87946:	4620      	mov	r0, r4
   87948:	9308      	str	r3, [sp, #32]
   8794a:	f000 fd65 	bl	88418 <_Bfree>
   8794e:	2201      	movs	r2, #1
   87950:	9b08      	ldr	r3, [sp, #32]
   87952:	e5e2      	b.n	8751a <_dtoa_r+0x5d2>
   87954:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87956:	2b02      	cmp	r3, #2
   87958:	f77f ad98 	ble.w	8748c <_dtoa_r+0x544>
   8795c:	9b07      	ldr	r3, [sp, #28]
   8795e:	2b00      	cmp	r3, #0
   87960:	d1c9      	bne.n	878f6 <_dtoa_r+0x9ae>
   87962:	4641      	mov	r1, r8
   87964:	2205      	movs	r2, #5
   87966:	4620      	mov	r0, r4
   87968:	f000 fd60 	bl	8842c <__multadd>
   8796c:	4601      	mov	r1, r0
   8796e:	4680      	mov	r8, r0
   87970:	4648      	mov	r0, r9
   87972:	f000 ff29 	bl	887c8 <__mcmp>
   87976:	2800      	cmp	r0, #0
   87978:	ddbd      	ble.n	878f6 <_dtoa_r+0x9ae>
   8797a:	2331      	movs	r3, #49	; 0x31
   8797c:	9a02      	ldr	r2, [sp, #8]
   8797e:	9904      	ldr	r1, [sp, #16]
   87980:	3201      	adds	r2, #1
   87982:	9202      	str	r2, [sp, #8]
   87984:	700b      	strb	r3, [r1, #0]
   87986:	1c4d      	adds	r5, r1, #1
   87988:	e7b9      	b.n	878fe <_dtoa_r+0x9b6>
   8798a:	2331      	movs	r3, #49	; 0x31
   8798c:	9a02      	ldr	r2, [sp, #8]
   8798e:	3201      	adds	r2, #1
   87990:	9202      	str	r2, [sp, #8]
   87992:	9a04      	ldr	r2, [sp, #16]
   87994:	7013      	strb	r3, [r2, #0]
   87996:	e652      	b.n	8763e <_dtoa_r+0x6f6>
   87998:	2301      	movs	r3, #1
   8799a:	930b      	str	r3, [sp, #44]	; 0x2c
   8799c:	e666      	b.n	8766c <_dtoa_r+0x724>
   8799e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   879a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   879a4:	e48f      	b.n	872c6 <_dtoa_r+0x37e>
   879a6:	bf00      	nop
   879a8:	000899e8 	.word	0x000899e8
   879ac:	000899c0 	.word	0x000899c0
   879b0:	3ff00000 	.word	0x3ff00000
   879b4:	401c0000 	.word	0x401c0000
   879b8:	3fe00000 	.word	0x3fe00000
   879bc:	40240000 	.word	0x40240000
   879c0:	40140000 	.word	0x40140000
   879c4:	4650      	mov	r0, sl
   879c6:	f7fd f8e9 	bl	84b9c <__aeabi_i2d>
   879ca:	463a      	mov	r2, r7
   879cc:	4643      	mov	r3, r8
   879ce:	f7fd f94b 	bl	84c68 <__aeabi_dmul>
   879d2:	2200      	movs	r2, #0
   879d4:	4bc1      	ldr	r3, [pc, #772]	; (87cdc <_dtoa_r+0xd94>)
   879d6:	f7fc ff95 	bl	84904 <__adddf3>
   879da:	4605      	mov	r5, r0
   879dc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   879e0:	4641      	mov	r1, r8
   879e2:	2200      	movs	r2, #0
   879e4:	4bbe      	ldr	r3, [pc, #760]	; (87ce0 <_dtoa_r+0xd98>)
   879e6:	4638      	mov	r0, r7
   879e8:	f7fc ff8a 	bl	84900 <__aeabi_dsub>
   879ec:	462a      	mov	r2, r5
   879ee:	4633      	mov	r3, r6
   879f0:	4682      	mov	sl, r0
   879f2:	468b      	mov	fp, r1
   879f4:	f001 fcf8 	bl	893e8 <__aeabi_dcmpgt>
   879f8:	4680      	mov	r8, r0
   879fa:	2800      	cmp	r0, #0
   879fc:	f040 8110 	bne.w	87c20 <_dtoa_r+0xcd8>
   87a00:	462a      	mov	r2, r5
   87a02:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   87a06:	4650      	mov	r0, sl
   87a08:	4659      	mov	r1, fp
   87a0a:	f001 fccf 	bl	893ac <__aeabi_dcmplt>
   87a0e:	b118      	cbz	r0, 87a18 <_dtoa_r+0xad0>
   87a10:	4646      	mov	r6, r8
   87a12:	e770      	b.n	878f6 <_dtoa_r+0x9ae>
   87a14:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87a18:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   87a1c:	f7ff bb8f 	b.w	8713e <_dtoa_r+0x1f6>
   87a20:	9804      	ldr	r0, [sp, #16]
   87a22:	f7ff bac0 	b.w	86fa6 <_dtoa_r+0x5e>
   87a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87a28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87a2a:	1afb      	subs	r3, r7, r3
   87a2c:	441a      	add	r2, r3
   87a2e:	970c      	str	r7, [sp, #48]	; 0x30
   87a30:	920d      	str	r2, [sp, #52]	; 0x34
   87a32:	2700      	movs	r7, #0
   87a34:	e468      	b.n	87308 <_dtoa_r+0x3c0>
   87a36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   87a3a:	f04f 0a02 	mov.w	sl, #2
   87a3e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   87a42:	e656      	b.n	876f2 <_dtoa_r+0x7aa>
   87a44:	2100      	movs	r1, #0
   87a46:	2301      	movs	r3, #1
   87a48:	4620      	mov	r0, r4
   87a4a:	6461      	str	r1, [r4, #68]	; 0x44
   87a4c:	9325      	str	r3, [sp, #148]	; 0x94
   87a4e:	f000 fcbd 	bl	883cc <_Balloc>
   87a52:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87a54:	9004      	str	r0, [sp, #16]
   87a56:	9307      	str	r3, [sp, #28]
   87a58:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87a5a:	6420      	str	r0, [r4, #64]	; 0x40
   87a5c:	930f      	str	r3, [sp, #60]	; 0x3c
   87a5e:	e627      	b.n	876b0 <_dtoa_r+0x768>
   87a60:	2a00      	cmp	r2, #0
   87a62:	46d0      	mov	r8, sl
   87a64:	f8cd b020 	str.w	fp, [sp, #32]
   87a68:	469a      	mov	sl, r3
   87a6a:	dd11      	ble.n	87a90 <_dtoa_r+0xb48>
   87a6c:	4649      	mov	r1, r9
   87a6e:	2201      	movs	r2, #1
   87a70:	4620      	mov	r0, r4
   87a72:	f000 fe59 	bl	88728 <__lshift>
   87a76:	4641      	mov	r1, r8
   87a78:	4681      	mov	r9, r0
   87a7a:	f000 fea5 	bl	887c8 <__mcmp>
   87a7e:	2800      	cmp	r0, #0
   87a80:	f340 8145 	ble.w	87d0e <_dtoa_r+0xdc6>
   87a84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   87a88:	f000 8105 	beq.w	87c96 <_dtoa_r+0xd4e>
   87a8c:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   87a90:	46b3      	mov	fp, r6
   87a92:	f887 a000 	strb.w	sl, [r7]
   87a96:	1c7d      	adds	r5, r7, #1
   87a98:	9e08      	ldr	r6, [sp, #32]
   87a9a:	e5d0      	b.n	8763e <_dtoa_r+0x6f6>
   87a9c:	d104      	bne.n	87aa8 <_dtoa_r+0xb60>
   87a9e:	f01a 0f01 	tst.w	sl, #1
   87aa2:	d001      	beq.n	87aa8 <_dtoa_r+0xb60>
   87aa4:	e5bb      	b.n	8761e <_dtoa_r+0x6d6>
   87aa6:	4615      	mov	r5, r2
   87aa8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87aac:	1e6a      	subs	r2, r5, #1
   87aae:	2b30      	cmp	r3, #48	; 0x30
   87ab0:	d0f9      	beq.n	87aa6 <_dtoa_r+0xb5e>
   87ab2:	e5c4      	b.n	8763e <_dtoa_r+0x6f6>
   87ab4:	2230      	movs	r2, #48	; 0x30
   87ab6:	9904      	ldr	r1, [sp, #16]
   87ab8:	700a      	strb	r2, [r1, #0]
   87aba:	9a02      	ldr	r2, [sp, #8]
   87abc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87ac0:	3201      	adds	r2, #1
   87ac2:	9202      	str	r2, [sp, #8]
   87ac4:	f7ff bbfb 	b.w	872be <_dtoa_r+0x376>
   87ac8:	f000 80bb 	beq.w	87c42 <_dtoa_r+0xcfa>
   87acc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87ad0:	9b02      	ldr	r3, [sp, #8]
   87ad2:	f04f 0a02 	mov.w	sl, #2
   87ad6:	425d      	negs	r5, r3
   87ad8:	4b82      	ldr	r3, [pc, #520]	; (87ce4 <_dtoa_r+0xd9c>)
   87ada:	f005 020f 	and.w	r2, r5, #15
   87ade:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
   87ae6:	f7fd f8bf 	bl	84c68 <__aeabi_dmul>
   87aea:	112d      	asrs	r5, r5, #4
   87aec:	4607      	mov	r7, r0
   87aee:	4688      	mov	r8, r1
   87af0:	f43f ae1a 	beq.w	87728 <_dtoa_r+0x7e0>
   87af4:	4e7c      	ldr	r6, [pc, #496]	; (87ce8 <_dtoa_r+0xda0>)
   87af6:	07eb      	lsls	r3, r5, #31
   87af8:	d509      	bpl.n	87b0e <_dtoa_r+0xbc6>
   87afa:	e9d6 2300 	ldrd	r2, r3, [r6]
   87afe:	4638      	mov	r0, r7
   87b00:	4641      	mov	r1, r8
   87b02:	f7fd f8b1 	bl	84c68 <__aeabi_dmul>
   87b06:	4607      	mov	r7, r0
   87b08:	4688      	mov	r8, r1
   87b0a:	f10a 0a01 	add.w	sl, sl, #1
   87b0e:	106d      	asrs	r5, r5, #1
   87b10:	f106 0608 	add.w	r6, r6, #8
   87b14:	d1ef      	bne.n	87af6 <_dtoa_r+0xbae>
   87b16:	e607      	b.n	87728 <_dtoa_r+0x7e0>
   87b18:	6871      	ldr	r1, [r6, #4]
   87b1a:	4620      	mov	r0, r4
   87b1c:	f000 fc56 	bl	883cc <_Balloc>
   87b20:	4605      	mov	r5, r0
   87b22:	6933      	ldr	r3, [r6, #16]
   87b24:	f106 010c 	add.w	r1, r6, #12
   87b28:	3302      	adds	r3, #2
   87b2a:	009a      	lsls	r2, r3, #2
   87b2c:	300c      	adds	r0, #12
   87b2e:	f7fd fdcf 	bl	856d0 <memcpy>
   87b32:	4629      	mov	r1, r5
   87b34:	2201      	movs	r2, #1
   87b36:	4620      	mov	r0, r4
   87b38:	f000 fdf6 	bl	88728 <__lshift>
   87b3c:	9008      	str	r0, [sp, #32]
   87b3e:	e4b6      	b.n	874ae <_dtoa_r+0x566>
   87b40:	2b39      	cmp	r3, #57	; 0x39
   87b42:	f8cd b020 	str.w	fp, [sp, #32]
   87b46:	46d0      	mov	r8, sl
   87b48:	f000 80a5 	beq.w	87c96 <_dtoa_r+0xd4e>
   87b4c:	f103 0a01 	add.w	sl, r3, #1
   87b50:	46b3      	mov	fp, r6
   87b52:	f887 a000 	strb.w	sl, [r7]
   87b56:	1c7d      	adds	r5, r7, #1
   87b58:	9e08      	ldr	r6, [sp, #32]
   87b5a:	e570      	b.n	8763e <_dtoa_r+0x6f6>
   87b5c:	465a      	mov	r2, fp
   87b5e:	46d0      	mov	r8, sl
   87b60:	46b3      	mov	fp, r6
   87b62:	469a      	mov	sl, r3
   87b64:	4616      	mov	r6, r2
   87b66:	e54e      	b.n	87606 <_dtoa_r+0x6be>
   87b68:	9812      	ldr	r0, [sp, #72]	; 0x48
   87b6a:	495e      	ldr	r1, [pc, #376]	; (87ce4 <_dtoa_r+0xd9c>)
   87b6c:	462a      	mov	r2, r5
   87b6e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   87b72:	4633      	mov	r3, r6
   87b74:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   87b78:	f7fd f876 	bl	84c68 <__aeabi_dmul>
   87b7c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   87b80:	4638      	mov	r0, r7
   87b82:	4641      	mov	r1, r8
   87b84:	f001 fc50 	bl	89428 <__aeabi_d2iz>
   87b88:	4605      	mov	r5, r0
   87b8a:	f7fd f807 	bl	84b9c <__aeabi_i2d>
   87b8e:	4602      	mov	r2, r0
   87b90:	460b      	mov	r3, r1
   87b92:	4638      	mov	r0, r7
   87b94:	4641      	mov	r1, r8
   87b96:	f7fc feb3 	bl	84900 <__aeabi_dsub>
   87b9a:	4606      	mov	r6, r0
   87b9c:	9812      	ldr	r0, [sp, #72]	; 0x48
   87b9e:	9a04      	ldr	r2, [sp, #16]
   87ba0:	3530      	adds	r5, #48	; 0x30
   87ba2:	2801      	cmp	r0, #1
   87ba4:	7015      	strb	r5, [r2, #0]
   87ba6:	460f      	mov	r7, r1
   87ba8:	f102 0501 	add.w	r5, r2, #1
   87bac:	d026      	beq.n	87bfc <_dtoa_r+0xcb4>
   87bae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87bb0:	9a04      	ldr	r2, [sp, #16]
   87bb2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   87bb6:	4413      	add	r3, r2
   87bb8:	f04f 0a00 	mov.w	sl, #0
   87bbc:	4699      	mov	r9, r3
   87bbe:	f8df b130 	ldr.w	fp, [pc, #304]	; 87cf0 <_dtoa_r+0xda8>
   87bc2:	4652      	mov	r2, sl
   87bc4:	465b      	mov	r3, fp
   87bc6:	4630      	mov	r0, r6
   87bc8:	4639      	mov	r1, r7
   87bca:	f7fd f84d 	bl	84c68 <__aeabi_dmul>
   87bce:	460f      	mov	r7, r1
   87bd0:	4606      	mov	r6, r0
   87bd2:	f001 fc29 	bl	89428 <__aeabi_d2iz>
   87bd6:	4680      	mov	r8, r0
   87bd8:	f7fc ffe0 	bl	84b9c <__aeabi_i2d>
   87bdc:	4602      	mov	r2, r0
   87bde:	460b      	mov	r3, r1
   87be0:	4630      	mov	r0, r6
   87be2:	4639      	mov	r1, r7
   87be4:	f7fc fe8c 	bl	84900 <__aeabi_dsub>
   87be8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   87bec:	f805 8b01 	strb.w	r8, [r5], #1
   87bf0:	454d      	cmp	r5, r9
   87bf2:	4606      	mov	r6, r0
   87bf4:	460f      	mov	r7, r1
   87bf6:	d1e4      	bne.n	87bc2 <_dtoa_r+0xc7a>
   87bf8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87bfc:	2200      	movs	r2, #0
   87bfe:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   87c02:	4b3a      	ldr	r3, [pc, #232]	; (87cec <_dtoa_r+0xda4>)
   87c04:	f7fc fe7e 	bl	84904 <__adddf3>
   87c08:	4632      	mov	r2, r6
   87c0a:	463b      	mov	r3, r7
   87c0c:	f001 fbce 	bl	893ac <__aeabi_dcmplt>
   87c10:	2800      	cmp	r0, #0
   87c12:	d046      	beq.n	87ca2 <_dtoa_r+0xd5a>
   87c14:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87c16:	9302      	str	r3, [sp, #8]
   87c18:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87c1c:	f7ff bb42 	b.w	872a4 <_dtoa_r+0x35c>
   87c20:	f04f 0800 	mov.w	r8, #0
   87c24:	4646      	mov	r6, r8
   87c26:	e6a8      	b.n	8797a <_dtoa_r+0xa32>
   87c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87c2a:	9a07      	ldr	r2, [sp, #28]
   87c2c:	1a9d      	subs	r5, r3, r2
   87c2e:	2300      	movs	r3, #0
   87c30:	f7ff bb70 	b.w	87314 <_dtoa_r+0x3cc>
   87c34:	9b18      	ldr	r3, [sp, #96]	; 0x60
   87c36:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87c38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   87c3c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87c3e:	f7ff bb69 	b.w	87314 <_dtoa_r+0x3cc>
   87c42:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   87c46:	f04f 0a02 	mov.w	sl, #2
   87c4a:	e56d      	b.n	87728 <_dtoa_r+0x7e0>
   87c4c:	9b07      	ldr	r3, [sp, #28]
   87c4e:	2b00      	cmp	r3, #0
   87c50:	f43f aeb8 	beq.w	879c4 <_dtoa_r+0xa7c>
   87c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87c56:	2b00      	cmp	r3, #0
   87c58:	f77f aede 	ble.w	87a18 <_dtoa_r+0xad0>
   87c5c:	2200      	movs	r2, #0
   87c5e:	4b24      	ldr	r3, [pc, #144]	; (87cf0 <_dtoa_r+0xda8>)
   87c60:	4638      	mov	r0, r7
   87c62:	4641      	mov	r1, r8
   87c64:	f7fd f800 	bl	84c68 <__aeabi_dmul>
   87c68:	4607      	mov	r7, r0
   87c6a:	4688      	mov	r8, r1
   87c6c:	f10a 0001 	add.w	r0, sl, #1
   87c70:	f7fc ff94 	bl	84b9c <__aeabi_i2d>
   87c74:	463a      	mov	r2, r7
   87c76:	4643      	mov	r3, r8
   87c78:	f7fc fff6 	bl	84c68 <__aeabi_dmul>
   87c7c:	2200      	movs	r2, #0
   87c7e:	4b17      	ldr	r3, [pc, #92]	; (87cdc <_dtoa_r+0xd94>)
   87c80:	f7fc fe40 	bl	84904 <__adddf3>
   87c84:	9a02      	ldr	r2, [sp, #8]
   87c86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87c88:	3a01      	subs	r2, #1
   87c8a:	4605      	mov	r5, r0
   87c8c:	9215      	str	r2, [sp, #84]	; 0x54
   87c8e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87c92:	9312      	str	r3, [sp, #72]	; 0x48
   87c94:	e569      	b.n	8776a <_dtoa_r+0x822>
   87c96:	2239      	movs	r2, #57	; 0x39
   87c98:	46b3      	mov	fp, r6
   87c9a:	703a      	strb	r2, [r7, #0]
   87c9c:	9e08      	ldr	r6, [sp, #32]
   87c9e:	1c7d      	adds	r5, r7, #1
   87ca0:	e4bf      	b.n	87622 <_dtoa_r+0x6da>
   87ca2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   87ca6:	2000      	movs	r0, #0
   87ca8:	4910      	ldr	r1, [pc, #64]	; (87cec <_dtoa_r+0xda4>)
   87caa:	f7fc fe29 	bl	84900 <__aeabi_dsub>
   87cae:	4632      	mov	r2, r6
   87cb0:	463b      	mov	r3, r7
   87cb2:	f001 fb99 	bl	893e8 <__aeabi_dcmpgt>
   87cb6:	b908      	cbnz	r0, 87cbc <_dtoa_r+0xd74>
   87cb8:	e6ae      	b.n	87a18 <_dtoa_r+0xad0>
   87cba:	4615      	mov	r5, r2
   87cbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87cc0:	1e6a      	subs	r2, r5, #1
   87cc2:	2b30      	cmp	r3, #48	; 0x30
   87cc4:	d0f9      	beq.n	87cba <_dtoa_r+0xd72>
   87cc6:	e5d7      	b.n	87878 <_dtoa_r+0x930>
   87cc8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87ccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87cce:	9302      	str	r3, [sp, #8]
   87cd0:	f7ff bae8 	b.w	872a4 <_dtoa_r+0x35c>
   87cd4:	970c      	str	r7, [sp, #48]	; 0x30
   87cd6:	f7ff bba7 	b.w	87428 <_dtoa_r+0x4e0>
   87cda:	bf00      	nop
   87cdc:	401c0000 	.word	0x401c0000
   87ce0:	40140000 	.word	0x40140000
   87ce4:	000899e8 	.word	0x000899e8
   87ce8:	000899c0 	.word	0x000899c0
   87cec:	3fe00000 	.word	0x3fe00000
   87cf0:	40240000 	.word	0x40240000
   87cf4:	2b39      	cmp	r3, #57	; 0x39
   87cf6:	f8cd b020 	str.w	fp, [sp, #32]
   87cfa:	46d0      	mov	r8, sl
   87cfc:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87d00:	469a      	mov	sl, r3
   87d02:	d0c8      	beq.n	87c96 <_dtoa_r+0xd4e>
   87d04:	f1bb 0f00 	cmp.w	fp, #0
   87d08:	f73f aec0 	bgt.w	87a8c <_dtoa_r+0xb44>
   87d0c:	e6c0      	b.n	87a90 <_dtoa_r+0xb48>
   87d0e:	f47f aebf 	bne.w	87a90 <_dtoa_r+0xb48>
   87d12:	f01a 0f01 	tst.w	sl, #1
   87d16:	f43f aebb 	beq.w	87a90 <_dtoa_r+0xb48>
   87d1a:	e6b3      	b.n	87a84 <_dtoa_r+0xb3c>
   87d1c:	f04f 0800 	mov.w	r8, #0
   87d20:	4646      	mov	r6, r8
   87d22:	e5e8      	b.n	878f6 <_dtoa_r+0x9ae>
   87d24:	4631      	mov	r1, r6
   87d26:	2300      	movs	r3, #0
   87d28:	220a      	movs	r2, #10
   87d2a:	4620      	mov	r0, r4
   87d2c:	f000 fb7e 	bl	8842c <__multadd>
   87d30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87d32:	4606      	mov	r6, r0
   87d34:	2b00      	cmp	r3, #0
   87d36:	dd07      	ble.n	87d48 <_dtoa_r+0xe00>
   87d38:	9307      	str	r3, [sp, #28]
   87d3a:	f7ff bbab 	b.w	87494 <_dtoa_r+0x54c>
   87d3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87d40:	2b02      	cmp	r3, #2
   87d42:	dc1f      	bgt.n	87d84 <_dtoa_r+0xe3c>
   87d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87d46:	e43c      	b.n	875c2 <_dtoa_r+0x67a>
   87d48:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87d4a:	2b02      	cmp	r3, #2
   87d4c:	dc1a      	bgt.n	87d84 <_dtoa_r+0xe3c>
   87d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87d50:	e7f2      	b.n	87d38 <_dtoa_r+0xdf0>
   87d52:	f43f ab81 	beq.w	87458 <_dtoa_r+0x510>
   87d56:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   87d5a:	e411      	b.n	87580 <_dtoa_r+0x638>
   87d5c:	2500      	movs	r5, #0
   87d5e:	4620      	mov	r0, r4
   87d60:	6465      	str	r5, [r4, #68]	; 0x44
   87d62:	4629      	mov	r1, r5
   87d64:	f000 fb32 	bl	883cc <_Balloc>
   87d68:	f04f 33ff 	mov.w	r3, #4294967295
   87d6c:	9307      	str	r3, [sp, #28]
   87d6e:	930f      	str	r3, [sp, #60]	; 0x3c
   87d70:	2301      	movs	r3, #1
   87d72:	9004      	str	r0, [sp, #16]
   87d74:	9525      	str	r5, [sp, #148]	; 0x94
   87d76:	6420      	str	r0, [r4, #64]	; 0x40
   87d78:	930b      	str	r3, [sp, #44]	; 0x2c
   87d7a:	f7ff b9e0 	b.w	8713e <_dtoa_r+0x1f6>
   87d7e:	2501      	movs	r5, #1
   87d80:	f7ff b9a8 	b.w	870d4 <_dtoa_r+0x18c>
   87d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87d86:	9307      	str	r3, [sp, #28]
   87d88:	e5e8      	b.n	8795c <_dtoa_r+0xa14>
   87d8a:	bf00      	nop

00087d8c <__libc_fini_array>:
   87d8c:	b538      	push	{r3, r4, r5, lr}
   87d8e:	4c0a      	ldr	r4, [pc, #40]	; (87db8 <__libc_fini_array+0x2c>)
   87d90:	4d0a      	ldr	r5, [pc, #40]	; (87dbc <__libc_fini_array+0x30>)
   87d92:	1b64      	subs	r4, r4, r5
   87d94:	10a4      	asrs	r4, r4, #2
   87d96:	d00a      	beq.n	87dae <__libc_fini_array+0x22>
   87d98:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   87d9c:	3b01      	subs	r3, #1
   87d9e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   87da2:	3c01      	subs	r4, #1
   87da4:	f855 3904 	ldr.w	r3, [r5], #-4
   87da8:	4798      	blx	r3
   87daa:	2c00      	cmp	r4, #0
   87dac:	d1f9      	bne.n	87da2 <__libc_fini_array+0x16>
   87dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   87db2:	f001 bf17 	b.w	89be4 <_fini>
   87db6:	bf00      	nop
   87db8:	00089bf4 	.word	0x00089bf4
   87dbc:	00089bf0 	.word	0x00089bf0

00087dc0 <_localeconv_r>:
   87dc0:	4a04      	ldr	r2, [pc, #16]	; (87dd4 <_localeconv_r+0x14>)
   87dc2:	4b05      	ldr	r3, [pc, #20]	; (87dd8 <_localeconv_r+0x18>)
   87dc4:	6812      	ldr	r2, [r2, #0]
   87dc6:	6b50      	ldr	r0, [r2, #52]	; 0x34
   87dc8:	2800      	cmp	r0, #0
   87dca:	bf08      	it	eq
   87dcc:	4618      	moveq	r0, r3
   87dce:	30f0      	adds	r0, #240	; 0xf0
   87dd0:	4770      	bx	lr
   87dd2:	bf00      	nop
   87dd4:	200701a4 	.word	0x200701a4
   87dd8:	200709e4 	.word	0x200709e4

00087ddc <__retarget_lock_acquire_recursive>:
   87ddc:	4770      	bx	lr
   87dde:	bf00      	nop

00087de0 <__retarget_lock_release_recursive>:
   87de0:	4770      	bx	lr
   87de2:	bf00      	nop

00087de4 <_malloc_r>:
   87de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87de8:	f101 060b 	add.w	r6, r1, #11
   87dec:	2e16      	cmp	r6, #22
   87dee:	b083      	sub	sp, #12
   87df0:	4605      	mov	r5, r0
   87df2:	f240 809e 	bls.w	87f32 <_malloc_r+0x14e>
   87df6:	f036 0607 	bics.w	r6, r6, #7
   87dfa:	f100 80bd 	bmi.w	87f78 <_malloc_r+0x194>
   87dfe:	42b1      	cmp	r1, r6
   87e00:	f200 80ba 	bhi.w	87f78 <_malloc_r+0x194>
   87e04:	f000 fad6 	bl	883b4 <__malloc_lock>
   87e08:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   87e0c:	f0c0 8285 	bcc.w	8831a <_malloc_r+0x536>
   87e10:	0a73      	lsrs	r3, r6, #9
   87e12:	f000 80b8 	beq.w	87f86 <_malloc_r+0x1a2>
   87e16:	2b04      	cmp	r3, #4
   87e18:	f200 816c 	bhi.w	880f4 <_malloc_r+0x310>
   87e1c:	09b3      	lsrs	r3, r6, #6
   87e1e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   87e22:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   87e26:	00c1      	lsls	r1, r0, #3
   87e28:	4fb8      	ldr	r7, [pc, #736]	; (8810c <_malloc_r+0x328>)
   87e2a:	4439      	add	r1, r7
   87e2c:	684c      	ldr	r4, [r1, #4]
   87e2e:	3908      	subs	r1, #8
   87e30:	42a1      	cmp	r1, r4
   87e32:	d106      	bne.n	87e42 <_malloc_r+0x5e>
   87e34:	e00c      	b.n	87e50 <_malloc_r+0x6c>
   87e36:	2a00      	cmp	r2, #0
   87e38:	f280 80ab 	bge.w	87f92 <_malloc_r+0x1ae>
   87e3c:	68e4      	ldr	r4, [r4, #12]
   87e3e:	42a1      	cmp	r1, r4
   87e40:	d006      	beq.n	87e50 <_malloc_r+0x6c>
   87e42:	6863      	ldr	r3, [r4, #4]
   87e44:	f023 0303 	bic.w	r3, r3, #3
   87e48:	1b9a      	subs	r2, r3, r6
   87e4a:	2a0f      	cmp	r2, #15
   87e4c:	ddf3      	ble.n	87e36 <_malloc_r+0x52>
   87e4e:	4670      	mov	r0, lr
   87e50:	693c      	ldr	r4, [r7, #16]
   87e52:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 88120 <_malloc_r+0x33c>
   87e56:	4574      	cmp	r4, lr
   87e58:	f000 819e 	beq.w	88198 <_malloc_r+0x3b4>
   87e5c:	6863      	ldr	r3, [r4, #4]
   87e5e:	f023 0303 	bic.w	r3, r3, #3
   87e62:	1b9a      	subs	r2, r3, r6
   87e64:	2a0f      	cmp	r2, #15
   87e66:	f300 8183 	bgt.w	88170 <_malloc_r+0x38c>
   87e6a:	2a00      	cmp	r2, #0
   87e6c:	f8c7 e014 	str.w	lr, [r7, #20]
   87e70:	f8c7 e010 	str.w	lr, [r7, #16]
   87e74:	f280 8091 	bge.w	87f9a <_malloc_r+0x1b6>
   87e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   87e7c:	f080 8154 	bcs.w	88128 <_malloc_r+0x344>
   87e80:	2201      	movs	r2, #1
   87e82:	08db      	lsrs	r3, r3, #3
   87e84:	6879      	ldr	r1, [r7, #4]
   87e86:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   87e8a:	4413      	add	r3, r2
   87e8c:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   87e90:	fa02 f20c 	lsl.w	r2, r2, ip
   87e94:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   87e98:	430a      	orrs	r2, r1
   87e9a:	f1ac 0108 	sub.w	r1, ip, #8
   87e9e:	60e1      	str	r1, [r4, #12]
   87ea0:	f8c4 8008 	str.w	r8, [r4, #8]
   87ea4:	607a      	str	r2, [r7, #4]
   87ea6:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   87eaa:	f8c8 400c 	str.w	r4, [r8, #12]
   87eae:	2401      	movs	r4, #1
   87eb0:	1083      	asrs	r3, r0, #2
   87eb2:	409c      	lsls	r4, r3
   87eb4:	4294      	cmp	r4, r2
   87eb6:	d87d      	bhi.n	87fb4 <_malloc_r+0x1d0>
   87eb8:	4214      	tst	r4, r2
   87eba:	d106      	bne.n	87eca <_malloc_r+0xe6>
   87ebc:	f020 0003 	bic.w	r0, r0, #3
   87ec0:	0064      	lsls	r4, r4, #1
   87ec2:	4214      	tst	r4, r2
   87ec4:	f100 0004 	add.w	r0, r0, #4
   87ec8:	d0fa      	beq.n	87ec0 <_malloc_r+0xdc>
   87eca:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   87ece:	46cc      	mov	ip, r9
   87ed0:	4680      	mov	r8, r0
   87ed2:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87ed6:	459c      	cmp	ip, r3
   87ed8:	d107      	bne.n	87eea <_malloc_r+0x106>
   87eda:	e15f      	b.n	8819c <_malloc_r+0x3b8>
   87edc:	2a00      	cmp	r2, #0
   87ede:	f280 816d 	bge.w	881bc <_malloc_r+0x3d8>
   87ee2:	68db      	ldr	r3, [r3, #12]
   87ee4:	459c      	cmp	ip, r3
   87ee6:	f000 8159 	beq.w	8819c <_malloc_r+0x3b8>
   87eea:	6859      	ldr	r1, [r3, #4]
   87eec:	f021 0103 	bic.w	r1, r1, #3
   87ef0:	1b8a      	subs	r2, r1, r6
   87ef2:	2a0f      	cmp	r2, #15
   87ef4:	ddf2      	ble.n	87edc <_malloc_r+0xf8>
   87ef6:	68dc      	ldr	r4, [r3, #12]
   87ef8:	f8d3 c008 	ldr.w	ip, [r3, #8]
   87efc:	f046 0801 	orr.w	r8, r6, #1
   87f00:	4628      	mov	r0, r5
   87f02:	441e      	add	r6, r3
   87f04:	f042 0501 	orr.w	r5, r2, #1
   87f08:	f8c3 8004 	str.w	r8, [r3, #4]
   87f0c:	f8cc 400c 	str.w	r4, [ip, #12]
   87f10:	f8c4 c008 	str.w	ip, [r4, #8]
   87f14:	617e      	str	r6, [r7, #20]
   87f16:	613e      	str	r6, [r7, #16]
   87f18:	f8c6 e00c 	str.w	lr, [r6, #12]
   87f1c:	f8c6 e008 	str.w	lr, [r6, #8]
   87f20:	6075      	str	r5, [r6, #4]
   87f22:	505a      	str	r2, [r3, r1]
   87f24:	9300      	str	r3, [sp, #0]
   87f26:	f000 fa4b 	bl	883c0 <__malloc_unlock>
   87f2a:	9b00      	ldr	r3, [sp, #0]
   87f2c:	f103 0408 	add.w	r4, r3, #8
   87f30:	e01e      	b.n	87f70 <_malloc_r+0x18c>
   87f32:	2910      	cmp	r1, #16
   87f34:	d820      	bhi.n	87f78 <_malloc_r+0x194>
   87f36:	f000 fa3d 	bl	883b4 <__malloc_lock>
   87f3a:	2610      	movs	r6, #16
   87f3c:	2318      	movs	r3, #24
   87f3e:	2002      	movs	r0, #2
   87f40:	4f72      	ldr	r7, [pc, #456]	; (8810c <_malloc_r+0x328>)
   87f42:	443b      	add	r3, r7
   87f44:	685c      	ldr	r4, [r3, #4]
   87f46:	f1a3 0208 	sub.w	r2, r3, #8
   87f4a:	4294      	cmp	r4, r2
   87f4c:	f000 812f 	beq.w	881ae <_malloc_r+0x3ca>
   87f50:	6863      	ldr	r3, [r4, #4]
   87f52:	68e1      	ldr	r1, [r4, #12]
   87f54:	f023 0303 	bic.w	r3, r3, #3
   87f58:	4423      	add	r3, r4
   87f5a:	685a      	ldr	r2, [r3, #4]
   87f5c:	68a6      	ldr	r6, [r4, #8]
   87f5e:	f042 0201 	orr.w	r2, r2, #1
   87f62:	60f1      	str	r1, [r6, #12]
   87f64:	4628      	mov	r0, r5
   87f66:	608e      	str	r6, [r1, #8]
   87f68:	605a      	str	r2, [r3, #4]
   87f6a:	f000 fa29 	bl	883c0 <__malloc_unlock>
   87f6e:	3408      	adds	r4, #8
   87f70:	4620      	mov	r0, r4
   87f72:	b003      	add	sp, #12
   87f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87f78:	2400      	movs	r4, #0
   87f7a:	230c      	movs	r3, #12
   87f7c:	4620      	mov	r0, r4
   87f7e:	602b      	str	r3, [r5, #0]
   87f80:	b003      	add	sp, #12
   87f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87f86:	2040      	movs	r0, #64	; 0x40
   87f88:	f44f 7100 	mov.w	r1, #512	; 0x200
   87f8c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   87f90:	e74a      	b.n	87e28 <_malloc_r+0x44>
   87f92:	4423      	add	r3, r4
   87f94:	685a      	ldr	r2, [r3, #4]
   87f96:	68e1      	ldr	r1, [r4, #12]
   87f98:	e7e0      	b.n	87f5c <_malloc_r+0x178>
   87f9a:	4423      	add	r3, r4
   87f9c:	685a      	ldr	r2, [r3, #4]
   87f9e:	4628      	mov	r0, r5
   87fa0:	f042 0201 	orr.w	r2, r2, #1
   87fa4:	605a      	str	r2, [r3, #4]
   87fa6:	3408      	adds	r4, #8
   87fa8:	f000 fa0a 	bl	883c0 <__malloc_unlock>
   87fac:	4620      	mov	r0, r4
   87fae:	b003      	add	sp, #12
   87fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87fb4:	68bc      	ldr	r4, [r7, #8]
   87fb6:	6863      	ldr	r3, [r4, #4]
   87fb8:	f023 0803 	bic.w	r8, r3, #3
   87fbc:	45b0      	cmp	r8, r6
   87fbe:	d304      	bcc.n	87fca <_malloc_r+0x1e6>
   87fc0:	eba8 0306 	sub.w	r3, r8, r6
   87fc4:	2b0f      	cmp	r3, #15
   87fc6:	f300 8085 	bgt.w	880d4 <_malloc_r+0x2f0>
   87fca:	f8df 9158 	ldr.w	r9, [pc, #344]	; 88124 <_malloc_r+0x340>
   87fce:	4b50      	ldr	r3, [pc, #320]	; (88110 <_malloc_r+0x32c>)
   87fd0:	f8d9 2000 	ldr.w	r2, [r9]
   87fd4:	681b      	ldr	r3, [r3, #0]
   87fd6:	3201      	adds	r2, #1
   87fd8:	4433      	add	r3, r6
   87fda:	eb04 0a08 	add.w	sl, r4, r8
   87fde:	f000 8154 	beq.w	8828a <_malloc_r+0x4a6>
   87fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   87fe6:	330f      	adds	r3, #15
   87fe8:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   87fec:	f02b 0b0f 	bic.w	fp, fp, #15
   87ff0:	4659      	mov	r1, fp
   87ff2:	4628      	mov	r0, r5
   87ff4:	f000 fce6 	bl	889c4 <_sbrk_r>
   87ff8:	1c41      	adds	r1, r0, #1
   87ffa:	4602      	mov	r2, r0
   87ffc:	f000 80fb 	beq.w	881f6 <_malloc_r+0x412>
   88000:	4582      	cmp	sl, r0
   88002:	f200 80f6 	bhi.w	881f2 <_malloc_r+0x40e>
   88006:	4b43      	ldr	r3, [pc, #268]	; (88114 <_malloc_r+0x330>)
   88008:	6819      	ldr	r1, [r3, #0]
   8800a:	4459      	add	r1, fp
   8800c:	6019      	str	r1, [r3, #0]
   8800e:	f000 814c 	beq.w	882aa <_malloc_r+0x4c6>
   88012:	f8d9 0000 	ldr.w	r0, [r9]
   88016:	3001      	adds	r0, #1
   88018:	bf1b      	ittet	ne
   8801a:	eba2 0a0a 	subne.w	sl, r2, sl
   8801e:	4451      	addne	r1, sl
   88020:	f8c9 2000 	streq.w	r2, [r9]
   88024:	6019      	strne	r1, [r3, #0]
   88026:	f012 0107 	ands.w	r1, r2, #7
   8802a:	f000 8114 	beq.w	88256 <_malloc_r+0x472>
   8802e:	f1c1 0008 	rsb	r0, r1, #8
   88032:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   88036:	4402      	add	r2, r0
   88038:	3108      	adds	r1, #8
   8803a:	eb02 090b 	add.w	r9, r2, fp
   8803e:	f3c9 090b 	ubfx	r9, r9, #0, #12
   88042:	eba1 0909 	sub.w	r9, r1, r9
   88046:	4649      	mov	r1, r9
   88048:	4628      	mov	r0, r5
   8804a:	9301      	str	r3, [sp, #4]
   8804c:	9200      	str	r2, [sp, #0]
   8804e:	f000 fcb9 	bl	889c4 <_sbrk_r>
   88052:	1c43      	adds	r3, r0, #1
   88054:	e89d 000c 	ldmia.w	sp, {r2, r3}
   88058:	f000 8142 	beq.w	882e0 <_malloc_r+0x4fc>
   8805c:	1a80      	subs	r0, r0, r2
   8805e:	4448      	add	r0, r9
   88060:	f040 0001 	orr.w	r0, r0, #1
   88064:	6819      	ldr	r1, [r3, #0]
   88066:	42bc      	cmp	r4, r7
   88068:	4449      	add	r1, r9
   8806a:	60ba      	str	r2, [r7, #8]
   8806c:	6019      	str	r1, [r3, #0]
   8806e:	6050      	str	r0, [r2, #4]
   88070:	d017      	beq.n	880a2 <_malloc_r+0x2be>
   88072:	f1b8 0f0f 	cmp.w	r8, #15
   88076:	f240 80fa 	bls.w	8826e <_malloc_r+0x48a>
   8807a:	f04f 0c05 	mov.w	ip, #5
   8807e:	6862      	ldr	r2, [r4, #4]
   88080:	f1a8 000c 	sub.w	r0, r8, #12
   88084:	f020 0007 	bic.w	r0, r0, #7
   88088:	f002 0201 	and.w	r2, r2, #1
   8808c:	eb04 0e00 	add.w	lr, r4, r0
   88090:	4302      	orrs	r2, r0
   88092:	280f      	cmp	r0, #15
   88094:	6062      	str	r2, [r4, #4]
   88096:	f8ce c004 	str.w	ip, [lr, #4]
   8809a:	f8ce c008 	str.w	ip, [lr, #8]
   8809e:	f200 8116 	bhi.w	882ce <_malloc_r+0x4ea>
   880a2:	4b1d      	ldr	r3, [pc, #116]	; (88118 <_malloc_r+0x334>)
   880a4:	68bc      	ldr	r4, [r7, #8]
   880a6:	681a      	ldr	r2, [r3, #0]
   880a8:	4291      	cmp	r1, r2
   880aa:	bf88      	it	hi
   880ac:	6019      	strhi	r1, [r3, #0]
   880ae:	4b1b      	ldr	r3, [pc, #108]	; (8811c <_malloc_r+0x338>)
   880b0:	681a      	ldr	r2, [r3, #0]
   880b2:	4291      	cmp	r1, r2
   880b4:	6862      	ldr	r2, [r4, #4]
   880b6:	bf88      	it	hi
   880b8:	6019      	strhi	r1, [r3, #0]
   880ba:	f022 0203 	bic.w	r2, r2, #3
   880be:	4296      	cmp	r6, r2
   880c0:	eba2 0306 	sub.w	r3, r2, r6
   880c4:	d801      	bhi.n	880ca <_malloc_r+0x2e6>
   880c6:	2b0f      	cmp	r3, #15
   880c8:	dc04      	bgt.n	880d4 <_malloc_r+0x2f0>
   880ca:	4628      	mov	r0, r5
   880cc:	f000 f978 	bl	883c0 <__malloc_unlock>
   880d0:	2400      	movs	r4, #0
   880d2:	e74d      	b.n	87f70 <_malloc_r+0x18c>
   880d4:	f046 0201 	orr.w	r2, r6, #1
   880d8:	f043 0301 	orr.w	r3, r3, #1
   880dc:	4426      	add	r6, r4
   880de:	6062      	str	r2, [r4, #4]
   880e0:	4628      	mov	r0, r5
   880e2:	60be      	str	r6, [r7, #8]
   880e4:	3408      	adds	r4, #8
   880e6:	6073      	str	r3, [r6, #4]
   880e8:	f000 f96a 	bl	883c0 <__malloc_unlock>
   880ec:	4620      	mov	r0, r4
   880ee:	b003      	add	sp, #12
   880f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   880f4:	2b14      	cmp	r3, #20
   880f6:	d970      	bls.n	881da <_malloc_r+0x3f6>
   880f8:	2b54      	cmp	r3, #84	; 0x54
   880fa:	f200 80a2 	bhi.w	88242 <_malloc_r+0x45e>
   880fe:	0b33      	lsrs	r3, r6, #12
   88100:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   88104:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   88108:	00c1      	lsls	r1, r0, #3
   8810a:	e68d      	b.n	87e28 <_malloc_r+0x44>
   8810c:	200705d4 	.word	0x200705d4
   88110:	20070e04 	.word	0x20070e04
   88114:	20070dd4 	.word	0x20070dd4
   88118:	20070dfc 	.word	0x20070dfc
   8811c:	20070e00 	.word	0x20070e00
   88120:	200705dc 	.word	0x200705dc
   88124:	200709dc 	.word	0x200709dc
   88128:	0a5a      	lsrs	r2, r3, #9
   8812a:	2a04      	cmp	r2, #4
   8812c:	d95b      	bls.n	881e6 <_malloc_r+0x402>
   8812e:	2a14      	cmp	r2, #20
   88130:	f200 80ae 	bhi.w	88290 <_malloc_r+0x4ac>
   88134:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   88138:	00c9      	lsls	r1, r1, #3
   8813a:	325b      	adds	r2, #91	; 0x5b
   8813c:	eb07 0c01 	add.w	ip, r7, r1
   88140:	5879      	ldr	r1, [r7, r1]
   88142:	f1ac 0c08 	sub.w	ip, ip, #8
   88146:	458c      	cmp	ip, r1
   88148:	f000 8088 	beq.w	8825c <_malloc_r+0x478>
   8814c:	684a      	ldr	r2, [r1, #4]
   8814e:	f022 0203 	bic.w	r2, r2, #3
   88152:	4293      	cmp	r3, r2
   88154:	d273      	bcs.n	8823e <_malloc_r+0x45a>
   88156:	6889      	ldr	r1, [r1, #8]
   88158:	458c      	cmp	ip, r1
   8815a:	d1f7      	bne.n	8814c <_malloc_r+0x368>
   8815c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   88160:	687a      	ldr	r2, [r7, #4]
   88162:	60e3      	str	r3, [r4, #12]
   88164:	f8c4 c008 	str.w	ip, [r4, #8]
   88168:	609c      	str	r4, [r3, #8]
   8816a:	f8cc 400c 	str.w	r4, [ip, #12]
   8816e:	e69e      	b.n	87eae <_malloc_r+0xca>
   88170:	f046 0c01 	orr.w	ip, r6, #1
   88174:	f042 0101 	orr.w	r1, r2, #1
   88178:	4426      	add	r6, r4
   8817a:	f8c4 c004 	str.w	ip, [r4, #4]
   8817e:	4628      	mov	r0, r5
   88180:	617e      	str	r6, [r7, #20]
   88182:	613e      	str	r6, [r7, #16]
   88184:	f8c6 e00c 	str.w	lr, [r6, #12]
   88188:	f8c6 e008 	str.w	lr, [r6, #8]
   8818c:	6071      	str	r1, [r6, #4]
   8818e:	50e2      	str	r2, [r4, r3]
   88190:	f000 f916 	bl	883c0 <__malloc_unlock>
   88194:	3408      	adds	r4, #8
   88196:	e6eb      	b.n	87f70 <_malloc_r+0x18c>
   88198:	687a      	ldr	r2, [r7, #4]
   8819a:	e688      	b.n	87eae <_malloc_r+0xca>
   8819c:	f108 0801 	add.w	r8, r8, #1
   881a0:	f018 0f03 	tst.w	r8, #3
   881a4:	f10c 0c08 	add.w	ip, ip, #8
   881a8:	f47f ae93 	bne.w	87ed2 <_malloc_r+0xee>
   881ac:	e02d      	b.n	8820a <_malloc_r+0x426>
   881ae:	68dc      	ldr	r4, [r3, #12]
   881b0:	42a3      	cmp	r3, r4
   881b2:	bf08      	it	eq
   881b4:	3002      	addeq	r0, #2
   881b6:	f43f ae4b 	beq.w	87e50 <_malloc_r+0x6c>
   881ba:	e6c9      	b.n	87f50 <_malloc_r+0x16c>
   881bc:	461c      	mov	r4, r3
   881be:	4419      	add	r1, r3
   881c0:	684a      	ldr	r2, [r1, #4]
   881c2:	68db      	ldr	r3, [r3, #12]
   881c4:	f854 6f08 	ldr.w	r6, [r4, #8]!
   881c8:	f042 0201 	orr.w	r2, r2, #1
   881cc:	604a      	str	r2, [r1, #4]
   881ce:	4628      	mov	r0, r5
   881d0:	60f3      	str	r3, [r6, #12]
   881d2:	609e      	str	r6, [r3, #8]
   881d4:	f000 f8f4 	bl	883c0 <__malloc_unlock>
   881d8:	e6ca      	b.n	87f70 <_malloc_r+0x18c>
   881da:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   881de:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   881e2:	00c1      	lsls	r1, r0, #3
   881e4:	e620      	b.n	87e28 <_malloc_r+0x44>
   881e6:	099a      	lsrs	r2, r3, #6
   881e8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   881ec:	00c9      	lsls	r1, r1, #3
   881ee:	3238      	adds	r2, #56	; 0x38
   881f0:	e7a4      	b.n	8813c <_malloc_r+0x358>
   881f2:	42bc      	cmp	r4, r7
   881f4:	d054      	beq.n	882a0 <_malloc_r+0x4bc>
   881f6:	68bc      	ldr	r4, [r7, #8]
   881f8:	6862      	ldr	r2, [r4, #4]
   881fa:	f022 0203 	bic.w	r2, r2, #3
   881fe:	e75e      	b.n	880be <_malloc_r+0x2da>
   88200:	f859 3908 	ldr.w	r3, [r9], #-8
   88204:	4599      	cmp	r9, r3
   88206:	f040 8086 	bne.w	88316 <_malloc_r+0x532>
   8820a:	f010 0f03 	tst.w	r0, #3
   8820e:	f100 30ff 	add.w	r0, r0, #4294967295
   88212:	d1f5      	bne.n	88200 <_malloc_r+0x41c>
   88214:	687b      	ldr	r3, [r7, #4]
   88216:	ea23 0304 	bic.w	r3, r3, r4
   8821a:	607b      	str	r3, [r7, #4]
   8821c:	0064      	lsls	r4, r4, #1
   8821e:	429c      	cmp	r4, r3
   88220:	f63f aec8 	bhi.w	87fb4 <_malloc_r+0x1d0>
   88224:	2c00      	cmp	r4, #0
   88226:	f43f aec5 	beq.w	87fb4 <_malloc_r+0x1d0>
   8822a:	421c      	tst	r4, r3
   8822c:	4640      	mov	r0, r8
   8822e:	f47f ae4c 	bne.w	87eca <_malloc_r+0xe6>
   88232:	0064      	lsls	r4, r4, #1
   88234:	421c      	tst	r4, r3
   88236:	f100 0004 	add.w	r0, r0, #4
   8823a:	d0fa      	beq.n	88232 <_malloc_r+0x44e>
   8823c:	e645      	b.n	87eca <_malloc_r+0xe6>
   8823e:	468c      	mov	ip, r1
   88240:	e78c      	b.n	8815c <_malloc_r+0x378>
   88242:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   88246:	d815      	bhi.n	88274 <_malloc_r+0x490>
   88248:	0bf3      	lsrs	r3, r6, #15
   8824a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8824e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   88252:	00c1      	lsls	r1, r0, #3
   88254:	e5e8      	b.n	87e28 <_malloc_r+0x44>
   88256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8825a:	e6ee      	b.n	8803a <_malloc_r+0x256>
   8825c:	2101      	movs	r1, #1
   8825e:	687b      	ldr	r3, [r7, #4]
   88260:	1092      	asrs	r2, r2, #2
   88262:	fa01 f202 	lsl.w	r2, r1, r2
   88266:	431a      	orrs	r2, r3
   88268:	607a      	str	r2, [r7, #4]
   8826a:	4663      	mov	r3, ip
   8826c:	e779      	b.n	88162 <_malloc_r+0x37e>
   8826e:	2301      	movs	r3, #1
   88270:	6053      	str	r3, [r2, #4]
   88272:	e72a      	b.n	880ca <_malloc_r+0x2e6>
   88274:	f240 5254 	movw	r2, #1364	; 0x554
   88278:	4293      	cmp	r3, r2
   8827a:	d822      	bhi.n	882c2 <_malloc_r+0x4de>
   8827c:	0cb3      	lsrs	r3, r6, #18
   8827e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   88282:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   88286:	00c1      	lsls	r1, r0, #3
   88288:	e5ce      	b.n	87e28 <_malloc_r+0x44>
   8828a:	f103 0b10 	add.w	fp, r3, #16
   8828e:	e6af      	b.n	87ff0 <_malloc_r+0x20c>
   88290:	2a54      	cmp	r2, #84	; 0x54
   88292:	d829      	bhi.n	882e8 <_malloc_r+0x504>
   88294:	0b1a      	lsrs	r2, r3, #12
   88296:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8829a:	00c9      	lsls	r1, r1, #3
   8829c:	326e      	adds	r2, #110	; 0x6e
   8829e:	e74d      	b.n	8813c <_malloc_r+0x358>
   882a0:	4b20      	ldr	r3, [pc, #128]	; (88324 <_malloc_r+0x540>)
   882a2:	6819      	ldr	r1, [r3, #0]
   882a4:	4459      	add	r1, fp
   882a6:	6019      	str	r1, [r3, #0]
   882a8:	e6b3      	b.n	88012 <_malloc_r+0x22e>
   882aa:	f3ca 000b 	ubfx	r0, sl, #0, #12
   882ae:	2800      	cmp	r0, #0
   882b0:	f47f aeaf 	bne.w	88012 <_malloc_r+0x22e>
   882b4:	eb08 030b 	add.w	r3, r8, fp
   882b8:	68ba      	ldr	r2, [r7, #8]
   882ba:	f043 0301 	orr.w	r3, r3, #1
   882be:	6053      	str	r3, [r2, #4]
   882c0:	e6ef      	b.n	880a2 <_malloc_r+0x2be>
   882c2:	207f      	movs	r0, #127	; 0x7f
   882c4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   882c8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   882cc:	e5ac      	b.n	87e28 <_malloc_r+0x44>
   882ce:	f104 0108 	add.w	r1, r4, #8
   882d2:	4628      	mov	r0, r5
   882d4:	9300      	str	r3, [sp, #0]
   882d6:	f000 fce7 	bl	88ca8 <_free_r>
   882da:	9b00      	ldr	r3, [sp, #0]
   882dc:	6819      	ldr	r1, [r3, #0]
   882de:	e6e0      	b.n	880a2 <_malloc_r+0x2be>
   882e0:	2001      	movs	r0, #1
   882e2:	f04f 0900 	mov.w	r9, #0
   882e6:	e6bd      	b.n	88064 <_malloc_r+0x280>
   882e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   882ec:	d805      	bhi.n	882fa <_malloc_r+0x516>
   882ee:	0bda      	lsrs	r2, r3, #15
   882f0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   882f4:	00c9      	lsls	r1, r1, #3
   882f6:	3277      	adds	r2, #119	; 0x77
   882f8:	e720      	b.n	8813c <_malloc_r+0x358>
   882fa:	f240 5154 	movw	r1, #1364	; 0x554
   882fe:	428a      	cmp	r2, r1
   88300:	d805      	bhi.n	8830e <_malloc_r+0x52a>
   88302:	0c9a      	lsrs	r2, r3, #18
   88304:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   88308:	00c9      	lsls	r1, r1, #3
   8830a:	327c      	adds	r2, #124	; 0x7c
   8830c:	e716      	b.n	8813c <_malloc_r+0x358>
   8830e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   88312:	227e      	movs	r2, #126	; 0x7e
   88314:	e712      	b.n	8813c <_malloc_r+0x358>
   88316:	687b      	ldr	r3, [r7, #4]
   88318:	e780      	b.n	8821c <_malloc_r+0x438>
   8831a:	08f0      	lsrs	r0, r6, #3
   8831c:	f106 0308 	add.w	r3, r6, #8
   88320:	e60e      	b.n	87f40 <_malloc_r+0x15c>
   88322:	bf00      	nop
   88324:	20070dd4 	.word	0x20070dd4

00088328 <memchr>:
   88328:	0783      	lsls	r3, r0, #30
   8832a:	b470      	push	{r4, r5, r6}
   8832c:	b2cd      	uxtb	r5, r1
   8832e:	d03d      	beq.n	883ac <memchr+0x84>
   88330:	1e54      	subs	r4, r2, #1
   88332:	b30a      	cbz	r2, 88378 <memchr+0x50>
   88334:	7803      	ldrb	r3, [r0, #0]
   88336:	42ab      	cmp	r3, r5
   88338:	d01f      	beq.n	8837a <memchr+0x52>
   8833a:	1c43      	adds	r3, r0, #1
   8833c:	e005      	b.n	8834a <memchr+0x22>
   8833e:	f114 34ff 	adds.w	r4, r4, #4294967295
   88342:	d319      	bcc.n	88378 <memchr+0x50>
   88344:	7802      	ldrb	r2, [r0, #0]
   88346:	42aa      	cmp	r2, r5
   88348:	d017      	beq.n	8837a <memchr+0x52>
   8834a:	f013 0f03 	tst.w	r3, #3
   8834e:	4618      	mov	r0, r3
   88350:	f103 0301 	add.w	r3, r3, #1
   88354:	d1f3      	bne.n	8833e <memchr+0x16>
   88356:	2c03      	cmp	r4, #3
   88358:	d811      	bhi.n	8837e <memchr+0x56>
   8835a:	b34c      	cbz	r4, 883b0 <memchr+0x88>
   8835c:	7803      	ldrb	r3, [r0, #0]
   8835e:	42ab      	cmp	r3, r5
   88360:	d00b      	beq.n	8837a <memchr+0x52>
   88362:	4404      	add	r4, r0
   88364:	1c43      	adds	r3, r0, #1
   88366:	e002      	b.n	8836e <memchr+0x46>
   88368:	7802      	ldrb	r2, [r0, #0]
   8836a:	42aa      	cmp	r2, r5
   8836c:	d005      	beq.n	8837a <memchr+0x52>
   8836e:	429c      	cmp	r4, r3
   88370:	4618      	mov	r0, r3
   88372:	f103 0301 	add.w	r3, r3, #1
   88376:	d1f7      	bne.n	88368 <memchr+0x40>
   88378:	2000      	movs	r0, #0
   8837a:	bc70      	pop	{r4, r5, r6}
   8837c:	4770      	bx	lr
   8837e:	0209      	lsls	r1, r1, #8
   88380:	b289      	uxth	r1, r1
   88382:	4329      	orrs	r1, r5
   88384:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   88388:	6803      	ldr	r3, [r0, #0]
   8838a:	4606      	mov	r6, r0
   8838c:	404b      	eors	r3, r1
   8838e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   88392:	ea22 0303 	bic.w	r3, r2, r3
   88396:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8839a:	f100 0004 	add.w	r0, r0, #4
   8839e:	d103      	bne.n	883a8 <memchr+0x80>
   883a0:	3c04      	subs	r4, #4
   883a2:	2c03      	cmp	r4, #3
   883a4:	d8f0      	bhi.n	88388 <memchr+0x60>
   883a6:	e7d8      	b.n	8835a <memchr+0x32>
   883a8:	4630      	mov	r0, r6
   883aa:	e7d7      	b.n	8835c <memchr+0x34>
   883ac:	4614      	mov	r4, r2
   883ae:	e7d2      	b.n	88356 <memchr+0x2e>
   883b0:	4620      	mov	r0, r4
   883b2:	e7e2      	b.n	8837a <memchr+0x52>

000883b4 <__malloc_lock>:
   883b4:	4801      	ldr	r0, [pc, #4]	; (883bc <__malloc_lock+0x8>)
   883b6:	f7ff bd11 	b.w	87ddc <__retarget_lock_acquire_recursive>
   883ba:	bf00      	nop
   883bc:	20070ff8 	.word	0x20070ff8

000883c0 <__malloc_unlock>:
   883c0:	4801      	ldr	r0, [pc, #4]	; (883c8 <__malloc_unlock+0x8>)
   883c2:	f7ff bd0d 	b.w	87de0 <__retarget_lock_release_recursive>
   883c6:	bf00      	nop
   883c8:	20070ff8 	.word	0x20070ff8

000883cc <_Balloc>:
   883cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   883ce:	b570      	push	{r4, r5, r6, lr}
   883d0:	4605      	mov	r5, r0
   883d2:	460c      	mov	r4, r1
   883d4:	b14b      	cbz	r3, 883ea <_Balloc+0x1e>
   883d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   883da:	b180      	cbz	r0, 883fe <_Balloc+0x32>
   883dc:	6802      	ldr	r2, [r0, #0]
   883de:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   883e2:	2300      	movs	r3, #0
   883e4:	6103      	str	r3, [r0, #16]
   883e6:	60c3      	str	r3, [r0, #12]
   883e8:	bd70      	pop	{r4, r5, r6, pc}
   883ea:	2221      	movs	r2, #33	; 0x21
   883ec:	2104      	movs	r1, #4
   883ee:	f000 fbdb 	bl	88ba8 <_calloc_r>
   883f2:	64e8      	str	r0, [r5, #76]	; 0x4c
   883f4:	4603      	mov	r3, r0
   883f6:	2800      	cmp	r0, #0
   883f8:	d1ed      	bne.n	883d6 <_Balloc+0xa>
   883fa:	2000      	movs	r0, #0
   883fc:	bd70      	pop	{r4, r5, r6, pc}
   883fe:	2101      	movs	r1, #1
   88400:	fa01 f604 	lsl.w	r6, r1, r4
   88404:	1d72      	adds	r2, r6, #5
   88406:	4628      	mov	r0, r5
   88408:	0092      	lsls	r2, r2, #2
   8840a:	f000 fbcd 	bl	88ba8 <_calloc_r>
   8840e:	2800      	cmp	r0, #0
   88410:	d0f3      	beq.n	883fa <_Balloc+0x2e>
   88412:	6044      	str	r4, [r0, #4]
   88414:	6086      	str	r6, [r0, #8]
   88416:	e7e4      	b.n	883e2 <_Balloc+0x16>

00088418 <_Bfree>:
   88418:	b131      	cbz	r1, 88428 <_Bfree+0x10>
   8841a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8841c:	684a      	ldr	r2, [r1, #4]
   8841e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   88422:	6008      	str	r0, [r1, #0]
   88424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   88428:	4770      	bx	lr
   8842a:	bf00      	nop

0008842c <__multadd>:
   8842c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8842e:	460c      	mov	r4, r1
   88430:	4605      	mov	r5, r0
   88432:	f04f 0e00 	mov.w	lr, #0
   88436:	690e      	ldr	r6, [r1, #16]
   88438:	b083      	sub	sp, #12
   8843a:	f101 0714 	add.w	r7, r1, #20
   8843e:	6838      	ldr	r0, [r7, #0]
   88440:	f10e 0e01 	add.w	lr, lr, #1
   88444:	b281      	uxth	r1, r0
   88446:	fb02 3301 	mla	r3, r2, r1, r3
   8844a:	0c01      	lsrs	r1, r0, #16
   8844c:	0c18      	lsrs	r0, r3, #16
   8844e:	fb02 0101 	mla	r1, r2, r1, r0
   88452:	b29b      	uxth	r3, r3
   88454:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   88458:	4576      	cmp	r6, lr
   8845a:	f847 3b04 	str.w	r3, [r7], #4
   8845e:	ea4f 4311 	mov.w	r3, r1, lsr #16
   88462:	dcec      	bgt.n	8843e <__multadd+0x12>
   88464:	b13b      	cbz	r3, 88476 <__multadd+0x4a>
   88466:	68a2      	ldr	r2, [r4, #8]
   88468:	4296      	cmp	r6, r2
   8846a:	da07      	bge.n	8847c <__multadd+0x50>
   8846c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   88470:	3601      	adds	r6, #1
   88472:	6153      	str	r3, [r2, #20]
   88474:	6126      	str	r6, [r4, #16]
   88476:	4620      	mov	r0, r4
   88478:	b003      	add	sp, #12
   8847a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8847c:	6861      	ldr	r1, [r4, #4]
   8847e:	4628      	mov	r0, r5
   88480:	3101      	adds	r1, #1
   88482:	9301      	str	r3, [sp, #4]
   88484:	f7ff ffa2 	bl	883cc <_Balloc>
   88488:	4607      	mov	r7, r0
   8848a:	6922      	ldr	r2, [r4, #16]
   8848c:	f104 010c 	add.w	r1, r4, #12
   88490:	3202      	adds	r2, #2
   88492:	0092      	lsls	r2, r2, #2
   88494:	300c      	adds	r0, #12
   88496:	f7fd f91b 	bl	856d0 <memcpy>
   8849a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   8849c:	6861      	ldr	r1, [r4, #4]
   8849e:	9b01      	ldr	r3, [sp, #4]
   884a0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   884a4:	6020      	str	r0, [r4, #0]
   884a6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   884aa:	463c      	mov	r4, r7
   884ac:	e7de      	b.n	8846c <__multadd+0x40>
   884ae:	bf00      	nop

000884b0 <__hi0bits>:
   884b0:	0c02      	lsrs	r2, r0, #16
   884b2:	0412      	lsls	r2, r2, #16
   884b4:	4603      	mov	r3, r0
   884b6:	b9b2      	cbnz	r2, 884e6 <__hi0bits+0x36>
   884b8:	0403      	lsls	r3, r0, #16
   884ba:	2010      	movs	r0, #16
   884bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   884c0:	bf04      	itt	eq
   884c2:	021b      	lsleq	r3, r3, #8
   884c4:	3008      	addeq	r0, #8
   884c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   884ca:	bf04      	itt	eq
   884cc:	011b      	lsleq	r3, r3, #4
   884ce:	3004      	addeq	r0, #4
   884d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   884d4:	bf04      	itt	eq
   884d6:	009b      	lsleq	r3, r3, #2
   884d8:	3002      	addeq	r0, #2
   884da:	2b00      	cmp	r3, #0
   884dc:	db02      	blt.n	884e4 <__hi0bits+0x34>
   884de:	005b      	lsls	r3, r3, #1
   884e0:	d403      	bmi.n	884ea <__hi0bits+0x3a>
   884e2:	2020      	movs	r0, #32
   884e4:	4770      	bx	lr
   884e6:	2000      	movs	r0, #0
   884e8:	e7e8      	b.n	884bc <__hi0bits+0xc>
   884ea:	3001      	adds	r0, #1
   884ec:	4770      	bx	lr
   884ee:	bf00      	nop

000884f0 <__lo0bits>:
   884f0:	6803      	ldr	r3, [r0, #0]
   884f2:	4601      	mov	r1, r0
   884f4:	f013 0207 	ands.w	r2, r3, #7
   884f8:	d007      	beq.n	8850a <__lo0bits+0x1a>
   884fa:	07da      	lsls	r2, r3, #31
   884fc:	d421      	bmi.n	88542 <__lo0bits+0x52>
   884fe:	0798      	lsls	r0, r3, #30
   88500:	d421      	bmi.n	88546 <__lo0bits+0x56>
   88502:	089b      	lsrs	r3, r3, #2
   88504:	600b      	str	r3, [r1, #0]
   88506:	2002      	movs	r0, #2
   88508:	4770      	bx	lr
   8850a:	b298      	uxth	r0, r3
   8850c:	b198      	cbz	r0, 88536 <__lo0bits+0x46>
   8850e:	4610      	mov	r0, r2
   88510:	f013 0fff 	tst.w	r3, #255	; 0xff
   88514:	bf04      	itt	eq
   88516:	0a1b      	lsreq	r3, r3, #8
   88518:	3008      	addeq	r0, #8
   8851a:	071a      	lsls	r2, r3, #28
   8851c:	bf04      	itt	eq
   8851e:	091b      	lsreq	r3, r3, #4
   88520:	3004      	addeq	r0, #4
   88522:	079a      	lsls	r2, r3, #30
   88524:	bf04      	itt	eq
   88526:	089b      	lsreq	r3, r3, #2
   88528:	3002      	addeq	r0, #2
   8852a:	07da      	lsls	r2, r3, #31
   8852c:	d407      	bmi.n	8853e <__lo0bits+0x4e>
   8852e:	085b      	lsrs	r3, r3, #1
   88530:	d104      	bne.n	8853c <__lo0bits+0x4c>
   88532:	2020      	movs	r0, #32
   88534:	4770      	bx	lr
   88536:	0c1b      	lsrs	r3, r3, #16
   88538:	2010      	movs	r0, #16
   8853a:	e7e9      	b.n	88510 <__lo0bits+0x20>
   8853c:	3001      	adds	r0, #1
   8853e:	600b      	str	r3, [r1, #0]
   88540:	4770      	bx	lr
   88542:	2000      	movs	r0, #0
   88544:	4770      	bx	lr
   88546:	085b      	lsrs	r3, r3, #1
   88548:	600b      	str	r3, [r1, #0]
   8854a:	2001      	movs	r0, #1
   8854c:	4770      	bx	lr
   8854e:	bf00      	nop

00088550 <__i2b>:
   88550:	b510      	push	{r4, lr}
   88552:	460c      	mov	r4, r1
   88554:	2101      	movs	r1, #1
   88556:	f7ff ff39 	bl	883cc <_Balloc>
   8855a:	2201      	movs	r2, #1
   8855c:	6144      	str	r4, [r0, #20]
   8855e:	6102      	str	r2, [r0, #16]
   88560:	bd10      	pop	{r4, pc}
   88562:	bf00      	nop

00088564 <__multiply>:
   88564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88568:	690c      	ldr	r4, [r1, #16]
   8856a:	6915      	ldr	r5, [r2, #16]
   8856c:	b083      	sub	sp, #12
   8856e:	42ac      	cmp	r4, r5
   88570:	468b      	mov	fp, r1
   88572:	4616      	mov	r6, r2
   88574:	da04      	bge.n	88580 <__multiply+0x1c>
   88576:	4622      	mov	r2, r4
   88578:	46b3      	mov	fp, r6
   8857a:	462c      	mov	r4, r5
   8857c:	460e      	mov	r6, r1
   8857e:	4615      	mov	r5, r2
   88580:	f8db 3008 	ldr.w	r3, [fp, #8]
   88584:	eb04 0805 	add.w	r8, r4, r5
   88588:	f8db 1004 	ldr.w	r1, [fp, #4]
   8858c:	4598      	cmp	r8, r3
   8858e:	bfc8      	it	gt
   88590:	3101      	addgt	r1, #1
   88592:	f7ff ff1b 	bl	883cc <_Balloc>
   88596:	f100 0914 	add.w	r9, r0, #20
   8859a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8859e:	45d1      	cmp	r9, sl
   885a0:	9000      	str	r0, [sp, #0]
   885a2:	d205      	bcs.n	885b0 <__multiply+0x4c>
   885a4:	464b      	mov	r3, r9
   885a6:	2100      	movs	r1, #0
   885a8:	f843 1b04 	str.w	r1, [r3], #4
   885ac:	459a      	cmp	sl, r3
   885ae:	d8fb      	bhi.n	885a8 <__multiply+0x44>
   885b0:	f106 0c14 	add.w	ip, r6, #20
   885b4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   885b8:	f10b 0b14 	add.w	fp, fp, #20
   885bc:	459c      	cmp	ip, r3
   885be:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   885c2:	d24b      	bcs.n	8865c <__multiply+0xf8>
   885c4:	f8cd a004 	str.w	sl, [sp, #4]
   885c8:	469a      	mov	sl, r3
   885ca:	f8dc 5000 	ldr.w	r5, [ip]
   885ce:	b2af      	uxth	r7, r5
   885d0:	b1e7      	cbz	r7, 8860c <__multiply+0xa8>
   885d2:	464d      	mov	r5, r9
   885d4:	465e      	mov	r6, fp
   885d6:	2100      	movs	r1, #0
   885d8:	f856 2b04 	ldr.w	r2, [r6], #4
   885dc:	6828      	ldr	r0, [r5, #0]
   885de:	b293      	uxth	r3, r2
   885e0:	b284      	uxth	r4, r0
   885e2:	0c12      	lsrs	r2, r2, #16
   885e4:	fb07 4303 	mla	r3, r7, r3, r4
   885e8:	0c00      	lsrs	r0, r0, #16
   885ea:	fb07 0202 	mla	r2, r7, r2, r0
   885ee:	440b      	add	r3, r1
   885f0:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   885f4:	b29b      	uxth	r3, r3
   885f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   885fa:	45b6      	cmp	lr, r6
   885fc:	f845 3b04 	str.w	r3, [r5], #4
   88600:	ea4f 4111 	mov.w	r1, r1, lsr #16
   88604:	d8e8      	bhi.n	885d8 <__multiply+0x74>
   88606:	6029      	str	r1, [r5, #0]
   88608:	f8dc 5000 	ldr.w	r5, [ip]
   8860c:	0c2d      	lsrs	r5, r5, #16
   8860e:	d01d      	beq.n	8864c <__multiply+0xe8>
   88610:	f8d9 3000 	ldr.w	r3, [r9]
   88614:	4648      	mov	r0, r9
   88616:	461c      	mov	r4, r3
   88618:	4659      	mov	r1, fp
   8861a:	2200      	movs	r2, #0
   8861c:	880e      	ldrh	r6, [r1, #0]
   8861e:	0c24      	lsrs	r4, r4, #16
   88620:	fb05 4406 	mla	r4, r5, r6, r4
   88624:	b29b      	uxth	r3, r3
   88626:	4422      	add	r2, r4
   88628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8862c:	f840 3b04 	str.w	r3, [r0], #4
   88630:	f851 3b04 	ldr.w	r3, [r1], #4
   88634:	6804      	ldr	r4, [r0, #0]
   88636:	0c1b      	lsrs	r3, r3, #16
   88638:	b2a6      	uxth	r6, r4
   8863a:	fb05 6303 	mla	r3, r5, r3, r6
   8863e:	458e      	cmp	lr, r1
   88640:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   88644:	ea4f 4213 	mov.w	r2, r3, lsr #16
   88648:	d8e8      	bhi.n	8861c <__multiply+0xb8>
   8864a:	6003      	str	r3, [r0, #0]
   8864c:	f10c 0c04 	add.w	ip, ip, #4
   88650:	45e2      	cmp	sl, ip
   88652:	f109 0904 	add.w	r9, r9, #4
   88656:	d8b8      	bhi.n	885ca <__multiply+0x66>
   88658:	f8dd a004 	ldr.w	sl, [sp, #4]
   8865c:	f1b8 0f00 	cmp.w	r8, #0
   88660:	dd0b      	ble.n	8867a <__multiply+0x116>
   88662:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   88666:	f1aa 0a04 	sub.w	sl, sl, #4
   8866a:	b11b      	cbz	r3, 88674 <__multiply+0x110>
   8866c:	e005      	b.n	8867a <__multiply+0x116>
   8866e:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   88672:	b913      	cbnz	r3, 8867a <__multiply+0x116>
   88674:	f1b8 0801 	subs.w	r8, r8, #1
   88678:	d1f9      	bne.n	8866e <__multiply+0x10a>
   8867a:	9800      	ldr	r0, [sp, #0]
   8867c:	f8c0 8010 	str.w	r8, [r0, #16]
   88680:	b003      	add	sp, #12
   88682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88686:	bf00      	nop

00088688 <__pow5mult>:
   88688:	f012 0303 	ands.w	r3, r2, #3
   8868c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88690:	4614      	mov	r4, r2
   88692:	4607      	mov	r7, r0
   88694:	d12e      	bne.n	886f4 <__pow5mult+0x6c>
   88696:	460d      	mov	r5, r1
   88698:	10a4      	asrs	r4, r4, #2
   8869a:	d01c      	beq.n	886d6 <__pow5mult+0x4e>
   8869c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   8869e:	b396      	cbz	r6, 88706 <__pow5mult+0x7e>
   886a0:	07e3      	lsls	r3, r4, #31
   886a2:	f04f 0800 	mov.w	r8, #0
   886a6:	d406      	bmi.n	886b6 <__pow5mult+0x2e>
   886a8:	1064      	asrs	r4, r4, #1
   886aa:	d014      	beq.n	886d6 <__pow5mult+0x4e>
   886ac:	6830      	ldr	r0, [r6, #0]
   886ae:	b1a8      	cbz	r0, 886dc <__pow5mult+0x54>
   886b0:	4606      	mov	r6, r0
   886b2:	07e3      	lsls	r3, r4, #31
   886b4:	d5f8      	bpl.n	886a8 <__pow5mult+0x20>
   886b6:	4632      	mov	r2, r6
   886b8:	4629      	mov	r1, r5
   886ba:	4638      	mov	r0, r7
   886bc:	f7ff ff52 	bl	88564 <__multiply>
   886c0:	b1b5      	cbz	r5, 886f0 <__pow5mult+0x68>
   886c2:	686a      	ldr	r2, [r5, #4]
   886c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   886c6:	1064      	asrs	r4, r4, #1
   886c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   886cc:	6029      	str	r1, [r5, #0]
   886ce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   886d2:	4605      	mov	r5, r0
   886d4:	d1ea      	bne.n	886ac <__pow5mult+0x24>
   886d6:	4628      	mov	r0, r5
   886d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   886dc:	4632      	mov	r2, r6
   886de:	4631      	mov	r1, r6
   886e0:	4638      	mov	r0, r7
   886e2:	f7ff ff3f 	bl	88564 <__multiply>
   886e6:	6030      	str	r0, [r6, #0]
   886e8:	f8c0 8000 	str.w	r8, [r0]
   886ec:	4606      	mov	r6, r0
   886ee:	e7e0      	b.n	886b2 <__pow5mult+0x2a>
   886f0:	4605      	mov	r5, r0
   886f2:	e7d9      	b.n	886a8 <__pow5mult+0x20>
   886f4:	4a0b      	ldr	r2, [pc, #44]	; (88724 <__pow5mult+0x9c>)
   886f6:	3b01      	subs	r3, #1
   886f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   886fc:	2300      	movs	r3, #0
   886fe:	f7ff fe95 	bl	8842c <__multadd>
   88702:	4605      	mov	r5, r0
   88704:	e7c8      	b.n	88698 <__pow5mult+0x10>
   88706:	2101      	movs	r1, #1
   88708:	4638      	mov	r0, r7
   8870a:	f7ff fe5f 	bl	883cc <_Balloc>
   8870e:	f240 2171 	movw	r1, #625	; 0x271
   88712:	2201      	movs	r2, #1
   88714:	2300      	movs	r3, #0
   88716:	6141      	str	r1, [r0, #20]
   88718:	6102      	str	r2, [r0, #16]
   8871a:	4606      	mov	r6, r0
   8871c:	64b8      	str	r0, [r7, #72]	; 0x48
   8871e:	6003      	str	r3, [r0, #0]
   88720:	e7be      	b.n	886a0 <__pow5mult+0x18>
   88722:	bf00      	nop
   88724:	00089ab0 	.word	0x00089ab0

00088728 <__lshift>:
   88728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8872c:	690b      	ldr	r3, [r1, #16]
   8872e:	1154      	asrs	r4, r2, #5
   88730:	eb04 0803 	add.w	r8, r4, r3
   88734:	688b      	ldr	r3, [r1, #8]
   88736:	f108 0501 	add.w	r5, r8, #1
   8873a:	429d      	cmp	r5, r3
   8873c:	460e      	mov	r6, r1
   8873e:	4691      	mov	r9, r2
   88740:	4607      	mov	r7, r0
   88742:	6849      	ldr	r1, [r1, #4]
   88744:	dd04      	ble.n	88750 <__lshift+0x28>
   88746:	005b      	lsls	r3, r3, #1
   88748:	429d      	cmp	r5, r3
   8874a:	f101 0101 	add.w	r1, r1, #1
   8874e:	dcfa      	bgt.n	88746 <__lshift+0x1e>
   88750:	4638      	mov	r0, r7
   88752:	f7ff fe3b 	bl	883cc <_Balloc>
   88756:	2c00      	cmp	r4, #0
   88758:	f100 0314 	add.w	r3, r0, #20
   8875c:	dd06      	ble.n	8876c <__lshift+0x44>
   8875e:	2100      	movs	r1, #0
   88760:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   88764:	f843 1b04 	str.w	r1, [r3], #4
   88768:	429a      	cmp	r2, r3
   8876a:	d1fb      	bne.n	88764 <__lshift+0x3c>
   8876c:	6934      	ldr	r4, [r6, #16]
   8876e:	f106 0114 	add.w	r1, r6, #20
   88772:	f019 091f 	ands.w	r9, r9, #31
   88776:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8877a:	d01d      	beq.n	887b8 <__lshift+0x90>
   8877c:	2200      	movs	r2, #0
   8877e:	f1c9 0c20 	rsb	ip, r9, #32
   88782:	680c      	ldr	r4, [r1, #0]
   88784:	fa04 f409 	lsl.w	r4, r4, r9
   88788:	4314      	orrs	r4, r2
   8878a:	f843 4b04 	str.w	r4, [r3], #4
   8878e:	f851 2b04 	ldr.w	r2, [r1], #4
   88792:	458e      	cmp	lr, r1
   88794:	fa22 f20c 	lsr.w	r2, r2, ip
   88798:	d8f3      	bhi.n	88782 <__lshift+0x5a>
   8879a:	601a      	str	r2, [r3, #0]
   8879c:	b10a      	cbz	r2, 887a2 <__lshift+0x7a>
   8879e:	f108 0502 	add.w	r5, r8, #2
   887a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   887a4:	6872      	ldr	r2, [r6, #4]
   887a6:	3d01      	subs	r5, #1
   887a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   887ac:	6105      	str	r5, [r0, #16]
   887ae:	6031      	str	r1, [r6, #0]
   887b0:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   887b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   887b8:	3b04      	subs	r3, #4
   887ba:	f851 2b04 	ldr.w	r2, [r1], #4
   887be:	458e      	cmp	lr, r1
   887c0:	f843 2f04 	str.w	r2, [r3, #4]!
   887c4:	d8f9      	bhi.n	887ba <__lshift+0x92>
   887c6:	e7ec      	b.n	887a2 <__lshift+0x7a>

000887c8 <__mcmp>:
   887c8:	b430      	push	{r4, r5}
   887ca:	690b      	ldr	r3, [r1, #16]
   887cc:	4605      	mov	r5, r0
   887ce:	6900      	ldr	r0, [r0, #16]
   887d0:	1ac0      	subs	r0, r0, r3
   887d2:	d10f      	bne.n	887f4 <__mcmp+0x2c>
   887d4:	009b      	lsls	r3, r3, #2
   887d6:	3514      	adds	r5, #20
   887d8:	3114      	adds	r1, #20
   887da:	4419      	add	r1, r3
   887dc:	442b      	add	r3, r5
   887de:	e001      	b.n	887e4 <__mcmp+0x1c>
   887e0:	429d      	cmp	r5, r3
   887e2:	d207      	bcs.n	887f4 <__mcmp+0x2c>
   887e4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   887e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   887ec:	4294      	cmp	r4, r2
   887ee:	d0f7      	beq.n	887e0 <__mcmp+0x18>
   887f0:	d302      	bcc.n	887f8 <__mcmp+0x30>
   887f2:	2001      	movs	r0, #1
   887f4:	bc30      	pop	{r4, r5}
   887f6:	4770      	bx	lr
   887f8:	f04f 30ff 	mov.w	r0, #4294967295
   887fc:	e7fa      	b.n	887f4 <__mcmp+0x2c>
   887fe:	bf00      	nop

00088800 <__mdiff>:
   88800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88804:	690c      	ldr	r4, [r1, #16]
   88806:	4689      	mov	r9, r1
   88808:	6911      	ldr	r1, [r2, #16]
   8880a:	4692      	mov	sl, r2
   8880c:	1a64      	subs	r4, r4, r1
   8880e:	2c00      	cmp	r4, #0
   88810:	d117      	bne.n	88842 <__mdiff+0x42>
   88812:	0089      	lsls	r1, r1, #2
   88814:	f109 0714 	add.w	r7, r9, #20
   88818:	f102 0614 	add.w	r6, r2, #20
   8881c:	187b      	adds	r3, r7, r1
   8881e:	4431      	add	r1, r6
   88820:	e001      	b.n	88826 <__mdiff+0x26>
   88822:	429f      	cmp	r7, r3
   88824:	d265      	bcs.n	888f2 <__mdiff+0xf2>
   88826:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8882a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8882e:	4295      	cmp	r5, r2
   88830:	d0f7      	beq.n	88822 <__mdiff+0x22>
   88832:	d267      	bcs.n	88904 <__mdiff+0x104>
   88834:	464b      	mov	r3, r9
   88836:	46bb      	mov	fp, r7
   88838:	46d1      	mov	r9, sl
   8883a:	4637      	mov	r7, r6
   8883c:	469a      	mov	sl, r3
   8883e:	2401      	movs	r4, #1
   88840:	e005      	b.n	8884e <__mdiff+0x4e>
   88842:	db61      	blt.n	88908 <__mdiff+0x108>
   88844:	2400      	movs	r4, #0
   88846:	f109 0714 	add.w	r7, r9, #20
   8884a:	f10a 0b14 	add.w	fp, sl, #20
   8884e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   88852:	f7ff fdbb 	bl	883cc <_Balloc>
   88856:	465d      	mov	r5, fp
   88858:	f04f 0800 	mov.w	r8, #0
   8885c:	f8d9 e010 	ldr.w	lr, [r9, #16]
   88860:	f8da 3010 	ldr.w	r3, [sl, #16]
   88864:	463e      	mov	r6, r7
   88866:	60c4      	str	r4, [r0, #12]
   88868:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8886c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   88870:	f100 0414 	add.w	r4, r0, #20
   88874:	f856 9b04 	ldr.w	r9, [r6], #4
   88878:	f855 2b04 	ldr.w	r2, [r5], #4
   8887c:	fa1f f389 	uxth.w	r3, r9
   88880:	4443      	add	r3, r8
   88882:	fa1f f882 	uxth.w	r8, r2
   88886:	0c12      	lsrs	r2, r2, #16
   88888:	eba3 0308 	sub.w	r3, r3, r8
   8888c:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   88890:	eb02 4223 	add.w	r2, r2, r3, asr #16
   88894:	b29b      	uxth	r3, r3
   88896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8889a:	45ac      	cmp	ip, r5
   8889c:	f844 3b04 	str.w	r3, [r4], #4
   888a0:	ea4f 4822 	mov.w	r8, r2, asr #16
   888a4:	d8e6      	bhi.n	88874 <__mdiff+0x74>
   888a6:	42b7      	cmp	r7, r6
   888a8:	d917      	bls.n	888da <__mdiff+0xda>
   888aa:	46a4      	mov	ip, r4
   888ac:	4635      	mov	r5, r6
   888ae:	f855 3b04 	ldr.w	r3, [r5], #4
   888b2:	b299      	uxth	r1, r3
   888b4:	4441      	add	r1, r8
   888b6:	140a      	asrs	r2, r1, #16
   888b8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   888bc:	b289      	uxth	r1, r1
   888be:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   888c2:	42af      	cmp	r7, r5
   888c4:	f84c 3b04 	str.w	r3, [ip], #4
   888c8:	ea4f 4822 	mov.w	r8, r2, asr #16
   888cc:	d8ef      	bhi.n	888ae <__mdiff+0xae>
   888ce:	43f6      	mvns	r6, r6
   888d0:	4437      	add	r7, r6
   888d2:	f027 0703 	bic.w	r7, r7, #3
   888d6:	3704      	adds	r7, #4
   888d8:	443c      	add	r4, r7
   888da:	3c04      	subs	r4, #4
   888dc:	b92b      	cbnz	r3, 888ea <__mdiff+0xea>
   888de:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   888e2:	f10e 3eff 	add.w	lr, lr, #4294967295
   888e6:	2b00      	cmp	r3, #0
   888e8:	d0f9      	beq.n	888de <__mdiff+0xde>
   888ea:	f8c0 e010 	str.w	lr, [r0, #16]
   888ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   888f2:	2100      	movs	r1, #0
   888f4:	f7ff fd6a 	bl	883cc <_Balloc>
   888f8:	2201      	movs	r2, #1
   888fa:	2300      	movs	r3, #0
   888fc:	6102      	str	r2, [r0, #16]
   888fe:	6143      	str	r3, [r0, #20]
   88900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88904:	46b3      	mov	fp, r6
   88906:	e7a2      	b.n	8884e <__mdiff+0x4e>
   88908:	464b      	mov	r3, r9
   8890a:	f109 0b14 	add.w	fp, r9, #20
   8890e:	f102 0714 	add.w	r7, r2, #20
   88912:	4691      	mov	r9, r2
   88914:	2401      	movs	r4, #1
   88916:	469a      	mov	sl, r3
   88918:	e799      	b.n	8884e <__mdiff+0x4e>
   8891a:	bf00      	nop

0008891c <__d2b>:
   8891c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8891e:	2101      	movs	r1, #1
   88920:	b083      	sub	sp, #12
   88922:	461c      	mov	r4, r3
   88924:	f3c3 550a 	ubfx	r5, r3, #20, #11
   88928:	4616      	mov	r6, r2
   8892a:	f7ff fd4f 	bl	883cc <_Balloc>
   8892e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   88932:	4607      	mov	r7, r0
   88934:	b10d      	cbz	r5, 8893a <__d2b+0x1e>
   88936:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8893a:	9401      	str	r4, [sp, #4]
   8893c:	b306      	cbz	r6, 88980 <__d2b+0x64>
   8893e:	a802      	add	r0, sp, #8
   88940:	f840 6d08 	str.w	r6, [r0, #-8]!
   88944:	f7ff fdd4 	bl	884f0 <__lo0bits>
   88948:	2800      	cmp	r0, #0
   8894a:	d130      	bne.n	889ae <__d2b+0x92>
   8894c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   88950:	617a      	str	r2, [r7, #20]
   88952:	2b00      	cmp	r3, #0
   88954:	bf0c      	ite	eq
   88956:	2101      	moveq	r1, #1
   88958:	2102      	movne	r1, #2
   8895a:	61bb      	str	r3, [r7, #24]
   8895c:	6139      	str	r1, [r7, #16]
   8895e:	b9d5      	cbnz	r5, 88996 <__d2b+0x7a>
   88960:	9a08      	ldr	r2, [sp, #32]
   88962:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   88966:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8896a:	6010      	str	r0, [r2, #0]
   8896c:	6918      	ldr	r0, [r3, #16]
   8896e:	f7ff fd9f 	bl	884b0 <__hi0bits>
   88972:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88974:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   88978:	6018      	str	r0, [r3, #0]
   8897a:	4638      	mov	r0, r7
   8897c:	b003      	add	sp, #12
   8897e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88980:	a801      	add	r0, sp, #4
   88982:	f7ff fdb5 	bl	884f0 <__lo0bits>
   88986:	2201      	movs	r2, #1
   88988:	9b01      	ldr	r3, [sp, #4]
   8898a:	4611      	mov	r1, r2
   8898c:	3020      	adds	r0, #32
   8898e:	613a      	str	r2, [r7, #16]
   88990:	617b      	str	r3, [r7, #20]
   88992:	2d00      	cmp	r5, #0
   88994:	d0e4      	beq.n	88960 <__d2b+0x44>
   88996:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8899a:	9a08      	ldr	r2, [sp, #32]
   8899c:	4403      	add	r3, r0
   8899e:	6013      	str	r3, [r2, #0]
   889a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   889a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   889a6:	6018      	str	r0, [r3, #0]
   889a8:	4638      	mov	r0, r7
   889aa:	b003      	add	sp, #12
   889ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   889ae:	9b01      	ldr	r3, [sp, #4]
   889b0:	f1c0 0220 	rsb	r2, r0, #32
   889b4:	9900      	ldr	r1, [sp, #0]
   889b6:	fa03 f202 	lsl.w	r2, r3, r2
   889ba:	430a      	orrs	r2, r1
   889bc:	40c3      	lsrs	r3, r0
   889be:	9301      	str	r3, [sp, #4]
   889c0:	617a      	str	r2, [r7, #20]
   889c2:	e7c6      	b.n	88952 <__d2b+0x36>

000889c4 <_sbrk_r>:
   889c4:	b538      	push	{r3, r4, r5, lr}
   889c6:	2300      	movs	r3, #0
   889c8:	4c06      	ldr	r4, [pc, #24]	; (889e4 <_sbrk_r+0x20>)
   889ca:	4605      	mov	r5, r0
   889cc:	4608      	mov	r0, r1
   889ce:	6023      	str	r3, [r4, #0]
   889d0:	f7fb fd0c 	bl	843ec <_sbrk>
   889d4:	1c43      	adds	r3, r0, #1
   889d6:	d000      	beq.n	889da <_sbrk_r+0x16>
   889d8:	bd38      	pop	{r3, r4, r5, pc}
   889da:	6823      	ldr	r3, [r4, #0]
   889dc:	2b00      	cmp	r3, #0
   889de:	d0fb      	beq.n	889d8 <_sbrk_r+0x14>
   889e0:	602b      	str	r3, [r5, #0]
   889e2:	bd38      	pop	{r3, r4, r5, pc}
   889e4:	2007100c 	.word	0x2007100c

000889e8 <__ssprint_r>:
   889e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   889ec:	6893      	ldr	r3, [r2, #8]
   889ee:	b083      	sub	sp, #12
   889f0:	4690      	mov	r8, r2
   889f2:	2b00      	cmp	r3, #0
   889f4:	d070      	beq.n	88ad8 <__ssprint_r+0xf0>
   889f6:	4682      	mov	sl, r0
   889f8:	460c      	mov	r4, r1
   889fa:	6817      	ldr	r7, [r2, #0]
   889fc:	688d      	ldr	r5, [r1, #8]
   889fe:	6808      	ldr	r0, [r1, #0]
   88a00:	e042      	b.n	88a88 <__ssprint_r+0xa0>
   88a02:	89a3      	ldrh	r3, [r4, #12]
   88a04:	f413 6f90 	tst.w	r3, #1152	; 0x480
   88a08:	d02e      	beq.n	88a68 <__ssprint_r+0x80>
   88a0a:	6965      	ldr	r5, [r4, #20]
   88a0c:	6921      	ldr	r1, [r4, #16]
   88a0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   88a12:	eba0 0b01 	sub.w	fp, r0, r1
   88a16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   88a1a:	f10b 0001 	add.w	r0, fp, #1
   88a1e:	106d      	asrs	r5, r5, #1
   88a20:	4430      	add	r0, r6
   88a22:	42a8      	cmp	r0, r5
   88a24:	462a      	mov	r2, r5
   88a26:	bf84      	itt	hi
   88a28:	4605      	movhi	r5, r0
   88a2a:	462a      	movhi	r2, r5
   88a2c:	055b      	lsls	r3, r3, #21
   88a2e:	d538      	bpl.n	88aa2 <__ssprint_r+0xba>
   88a30:	4611      	mov	r1, r2
   88a32:	4650      	mov	r0, sl
   88a34:	f7ff f9d6 	bl	87de4 <_malloc_r>
   88a38:	2800      	cmp	r0, #0
   88a3a:	d03c      	beq.n	88ab6 <__ssprint_r+0xce>
   88a3c:	465a      	mov	r2, fp
   88a3e:	6921      	ldr	r1, [r4, #16]
   88a40:	9001      	str	r0, [sp, #4]
   88a42:	f7fc fe45 	bl	856d0 <memcpy>
   88a46:	89a2      	ldrh	r2, [r4, #12]
   88a48:	9b01      	ldr	r3, [sp, #4]
   88a4a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   88a4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   88a52:	81a2      	strh	r2, [r4, #12]
   88a54:	eba5 020b 	sub.w	r2, r5, fp
   88a58:	eb03 000b 	add.w	r0, r3, fp
   88a5c:	6165      	str	r5, [r4, #20]
   88a5e:	46b3      	mov	fp, r6
   88a60:	4635      	mov	r5, r6
   88a62:	6123      	str	r3, [r4, #16]
   88a64:	6020      	str	r0, [r4, #0]
   88a66:	60a2      	str	r2, [r4, #8]
   88a68:	465a      	mov	r2, fp
   88a6a:	4649      	mov	r1, r9
   88a6c:	f000 fa18 	bl	88ea0 <memmove>
   88a70:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88a74:	68a2      	ldr	r2, [r4, #8]
   88a76:	6820      	ldr	r0, [r4, #0]
   88a78:	1b55      	subs	r5, r2, r5
   88a7a:	4458      	add	r0, fp
   88a7c:	1b9e      	subs	r6, r3, r6
   88a7e:	60a5      	str	r5, [r4, #8]
   88a80:	6020      	str	r0, [r4, #0]
   88a82:	f8c8 6008 	str.w	r6, [r8, #8]
   88a86:	b33e      	cbz	r6, 88ad8 <__ssprint_r+0xf0>
   88a88:	687e      	ldr	r6, [r7, #4]
   88a8a:	463b      	mov	r3, r7
   88a8c:	3708      	adds	r7, #8
   88a8e:	2e00      	cmp	r6, #0
   88a90:	d0fa      	beq.n	88a88 <__ssprint_r+0xa0>
   88a92:	42ae      	cmp	r6, r5
   88a94:	f8d3 9000 	ldr.w	r9, [r3]
   88a98:	46ab      	mov	fp, r5
   88a9a:	d2b2      	bcs.n	88a02 <__ssprint_r+0x1a>
   88a9c:	4635      	mov	r5, r6
   88a9e:	46b3      	mov	fp, r6
   88aa0:	e7e2      	b.n	88a68 <__ssprint_r+0x80>
   88aa2:	4650      	mov	r0, sl
   88aa4:	f000 fa60 	bl	88f68 <_realloc_r>
   88aa8:	4603      	mov	r3, r0
   88aaa:	2800      	cmp	r0, #0
   88aac:	d1d2      	bne.n	88a54 <__ssprint_r+0x6c>
   88aae:	6921      	ldr	r1, [r4, #16]
   88ab0:	4650      	mov	r0, sl
   88ab2:	f000 f8f9 	bl	88ca8 <_free_r>
   88ab6:	230c      	movs	r3, #12
   88ab8:	2200      	movs	r2, #0
   88aba:	f04f 30ff 	mov.w	r0, #4294967295
   88abe:	f8ca 3000 	str.w	r3, [sl]
   88ac2:	89a3      	ldrh	r3, [r4, #12]
   88ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88ac8:	81a3      	strh	r3, [r4, #12]
   88aca:	f8c8 2008 	str.w	r2, [r8, #8]
   88ace:	f8c8 2004 	str.w	r2, [r8, #4]
   88ad2:	b003      	add	sp, #12
   88ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88ad8:	2000      	movs	r0, #0
   88ada:	f8c8 0004 	str.w	r0, [r8, #4]
   88ade:	b003      	add	sp, #12
   88ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00088ae4 <__register_exitproc>:
   88ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88ae8:	4d2c      	ldr	r5, [pc, #176]	; (88b9c <__register_exitproc+0xb8>)
   88aea:	4606      	mov	r6, r0
   88aec:	6828      	ldr	r0, [r5, #0]
   88aee:	4698      	mov	r8, r3
   88af0:	460f      	mov	r7, r1
   88af2:	4691      	mov	r9, r2
   88af4:	f7ff f972 	bl	87ddc <__retarget_lock_acquire_recursive>
   88af8:	4b29      	ldr	r3, [pc, #164]	; (88ba0 <__register_exitproc+0xbc>)
   88afa:	681c      	ldr	r4, [r3, #0]
   88afc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   88b00:	2b00      	cmp	r3, #0
   88b02:	d03e      	beq.n	88b82 <__register_exitproc+0x9e>
   88b04:	685a      	ldr	r2, [r3, #4]
   88b06:	2a1f      	cmp	r2, #31
   88b08:	dc1c      	bgt.n	88b44 <__register_exitproc+0x60>
   88b0a:	f102 0e01 	add.w	lr, r2, #1
   88b0e:	b176      	cbz	r6, 88b2e <__register_exitproc+0x4a>
   88b10:	2101      	movs	r1, #1
   88b12:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   88b16:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   88b1a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   88b1e:	4091      	lsls	r1, r2
   88b20:	4308      	orrs	r0, r1
   88b22:	2e02      	cmp	r6, #2
   88b24:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   88b28:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   88b2c:	d023      	beq.n	88b76 <__register_exitproc+0x92>
   88b2e:	3202      	adds	r2, #2
   88b30:	f8c3 e004 	str.w	lr, [r3, #4]
   88b34:	6828      	ldr	r0, [r5, #0]
   88b36:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   88b3a:	f7ff f951 	bl	87de0 <__retarget_lock_release_recursive>
   88b3e:	2000      	movs	r0, #0
   88b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88b44:	4b17      	ldr	r3, [pc, #92]	; (88ba4 <__register_exitproc+0xc0>)
   88b46:	b30b      	cbz	r3, 88b8c <__register_exitproc+0xa8>
   88b48:	f44f 70c8 	mov.w	r0, #400	; 0x190
   88b4c:	f3af 8000 	nop.w
   88b50:	4603      	mov	r3, r0
   88b52:	b1d8      	cbz	r0, 88b8c <__register_exitproc+0xa8>
   88b54:	2000      	movs	r0, #0
   88b56:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   88b5a:	f04f 0e01 	mov.w	lr, #1
   88b5e:	6058      	str	r0, [r3, #4]
   88b60:	6019      	str	r1, [r3, #0]
   88b62:	4602      	mov	r2, r0
   88b64:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   88b68:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   88b6c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   88b70:	2e00      	cmp	r6, #0
   88b72:	d0dc      	beq.n	88b2e <__register_exitproc+0x4a>
   88b74:	e7cc      	b.n	88b10 <__register_exitproc+0x2c>
   88b76:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   88b7a:	4301      	orrs	r1, r0
   88b7c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   88b80:	e7d5      	b.n	88b2e <__register_exitproc+0x4a>
   88b82:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   88b86:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   88b8a:	e7bb      	b.n	88b04 <__register_exitproc+0x20>
   88b8c:	6828      	ldr	r0, [r5, #0]
   88b8e:	f7ff f927 	bl	87de0 <__retarget_lock_release_recursive>
   88b92:	f04f 30ff 	mov.w	r0, #4294967295
   88b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88b9a:	bf00      	nop
   88b9c:	200705d0 	.word	0x200705d0
   88ba0:	00089944 	.word	0x00089944
   88ba4:	00000000 	.word	0x00000000

00088ba8 <_calloc_r>:
   88ba8:	b510      	push	{r4, lr}
   88baa:	fb02 f101 	mul.w	r1, r2, r1
   88bae:	f7ff f919 	bl	87de4 <_malloc_r>
   88bb2:	4604      	mov	r4, r0
   88bb4:	b1d8      	cbz	r0, 88bee <_calloc_r+0x46>
   88bb6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   88bba:	f022 0203 	bic.w	r2, r2, #3
   88bbe:	3a04      	subs	r2, #4
   88bc0:	2a24      	cmp	r2, #36	; 0x24
   88bc2:	d818      	bhi.n	88bf6 <_calloc_r+0x4e>
   88bc4:	2a13      	cmp	r2, #19
   88bc6:	d914      	bls.n	88bf2 <_calloc_r+0x4a>
   88bc8:	2300      	movs	r3, #0
   88bca:	2a1b      	cmp	r2, #27
   88bcc:	6003      	str	r3, [r0, #0]
   88bce:	6043      	str	r3, [r0, #4]
   88bd0:	d916      	bls.n	88c00 <_calloc_r+0x58>
   88bd2:	2a24      	cmp	r2, #36	; 0x24
   88bd4:	6083      	str	r3, [r0, #8]
   88bd6:	60c3      	str	r3, [r0, #12]
   88bd8:	bf11      	iteee	ne
   88bda:	f100 0210 	addne.w	r2, r0, #16
   88bde:	6103      	streq	r3, [r0, #16]
   88be0:	6143      	streq	r3, [r0, #20]
   88be2:	f100 0218 	addeq.w	r2, r0, #24
   88be6:	2300      	movs	r3, #0
   88be8:	6013      	str	r3, [r2, #0]
   88bea:	6053      	str	r3, [r2, #4]
   88bec:	6093      	str	r3, [r2, #8]
   88bee:	4620      	mov	r0, r4
   88bf0:	bd10      	pop	{r4, pc}
   88bf2:	4602      	mov	r2, r0
   88bf4:	e7f7      	b.n	88be6 <_calloc_r+0x3e>
   88bf6:	2100      	movs	r1, #0
   88bf8:	f7fc fde0 	bl	857bc <memset>
   88bfc:	4620      	mov	r0, r4
   88bfe:	bd10      	pop	{r4, pc}
   88c00:	f100 0208 	add.w	r2, r0, #8
   88c04:	e7ef      	b.n	88be6 <_calloc_r+0x3e>
   88c06:	bf00      	nop

00088c08 <_malloc_trim_r>:
   88c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88c0a:	460c      	mov	r4, r1
   88c0c:	4f23      	ldr	r7, [pc, #140]	; (88c9c <_malloc_trim_r+0x94>)
   88c0e:	4606      	mov	r6, r0
   88c10:	f7ff fbd0 	bl	883b4 <__malloc_lock>
   88c14:	68bb      	ldr	r3, [r7, #8]
   88c16:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   88c1a:	685d      	ldr	r5, [r3, #4]
   88c1c:	310f      	adds	r1, #15
   88c1e:	f025 0503 	bic.w	r5, r5, #3
   88c22:	4429      	add	r1, r5
   88c24:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   88c28:	f021 010f 	bic.w	r1, r1, #15
   88c2c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   88c30:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   88c34:	db07      	blt.n	88c46 <_malloc_trim_r+0x3e>
   88c36:	2100      	movs	r1, #0
   88c38:	4630      	mov	r0, r6
   88c3a:	f7ff fec3 	bl	889c4 <_sbrk_r>
   88c3e:	68bb      	ldr	r3, [r7, #8]
   88c40:	442b      	add	r3, r5
   88c42:	4298      	cmp	r0, r3
   88c44:	d004      	beq.n	88c50 <_malloc_trim_r+0x48>
   88c46:	4630      	mov	r0, r6
   88c48:	f7ff fbba 	bl	883c0 <__malloc_unlock>
   88c4c:	2000      	movs	r0, #0
   88c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88c50:	4261      	negs	r1, r4
   88c52:	4630      	mov	r0, r6
   88c54:	f7ff feb6 	bl	889c4 <_sbrk_r>
   88c58:	3001      	adds	r0, #1
   88c5a:	d00d      	beq.n	88c78 <_malloc_trim_r+0x70>
   88c5c:	4b10      	ldr	r3, [pc, #64]	; (88ca0 <_malloc_trim_r+0x98>)
   88c5e:	68ba      	ldr	r2, [r7, #8]
   88c60:	6819      	ldr	r1, [r3, #0]
   88c62:	1b2d      	subs	r5, r5, r4
   88c64:	f045 0501 	orr.w	r5, r5, #1
   88c68:	4630      	mov	r0, r6
   88c6a:	1b09      	subs	r1, r1, r4
   88c6c:	6055      	str	r5, [r2, #4]
   88c6e:	6019      	str	r1, [r3, #0]
   88c70:	f7ff fba6 	bl	883c0 <__malloc_unlock>
   88c74:	2001      	movs	r0, #1
   88c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88c78:	2100      	movs	r1, #0
   88c7a:	4630      	mov	r0, r6
   88c7c:	f7ff fea2 	bl	889c4 <_sbrk_r>
   88c80:	68ba      	ldr	r2, [r7, #8]
   88c82:	1a83      	subs	r3, r0, r2
   88c84:	2b0f      	cmp	r3, #15
   88c86:	ddde      	ble.n	88c46 <_malloc_trim_r+0x3e>
   88c88:	4c06      	ldr	r4, [pc, #24]	; (88ca4 <_malloc_trim_r+0x9c>)
   88c8a:	4905      	ldr	r1, [pc, #20]	; (88ca0 <_malloc_trim_r+0x98>)
   88c8c:	6824      	ldr	r4, [r4, #0]
   88c8e:	f043 0301 	orr.w	r3, r3, #1
   88c92:	1b00      	subs	r0, r0, r4
   88c94:	6053      	str	r3, [r2, #4]
   88c96:	6008      	str	r0, [r1, #0]
   88c98:	e7d5      	b.n	88c46 <_malloc_trim_r+0x3e>
   88c9a:	bf00      	nop
   88c9c:	200705d4 	.word	0x200705d4
   88ca0:	20070dd4 	.word	0x20070dd4
   88ca4:	200709dc 	.word	0x200709dc

00088ca8 <_free_r>:
   88ca8:	2900      	cmp	r1, #0
   88caa:	d044      	beq.n	88d36 <_free_r+0x8e>
   88cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88cb0:	460d      	mov	r5, r1
   88cb2:	4680      	mov	r8, r0
   88cb4:	f7ff fb7e 	bl	883b4 <__malloc_lock>
   88cb8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   88cbc:	4969      	ldr	r1, [pc, #420]	; (88e64 <_free_r+0x1bc>)
   88cbe:	f1a5 0408 	sub.w	r4, r5, #8
   88cc2:	f027 0301 	bic.w	r3, r7, #1
   88cc6:	18e2      	adds	r2, r4, r3
   88cc8:	688e      	ldr	r6, [r1, #8]
   88cca:	6850      	ldr	r0, [r2, #4]
   88ccc:	42b2      	cmp	r2, r6
   88cce:	f020 0003 	bic.w	r0, r0, #3
   88cd2:	d05e      	beq.n	88d92 <_free_r+0xea>
   88cd4:	07fe      	lsls	r6, r7, #31
   88cd6:	6050      	str	r0, [r2, #4]
   88cd8:	d40b      	bmi.n	88cf2 <_free_r+0x4a>
   88cda:	f855 7c08 	ldr.w	r7, [r5, #-8]
   88cde:	f101 0e08 	add.w	lr, r1, #8
   88ce2:	1be4      	subs	r4, r4, r7
   88ce4:	68a5      	ldr	r5, [r4, #8]
   88ce6:	443b      	add	r3, r7
   88ce8:	4575      	cmp	r5, lr
   88cea:	d06d      	beq.n	88dc8 <_free_r+0x120>
   88cec:	68e7      	ldr	r7, [r4, #12]
   88cee:	60ef      	str	r7, [r5, #12]
   88cf0:	60bd      	str	r5, [r7, #8]
   88cf2:	1815      	adds	r5, r2, r0
   88cf4:	686d      	ldr	r5, [r5, #4]
   88cf6:	07ed      	lsls	r5, r5, #31
   88cf8:	d53e      	bpl.n	88d78 <_free_r+0xd0>
   88cfa:	f043 0201 	orr.w	r2, r3, #1
   88cfe:	6062      	str	r2, [r4, #4]
   88d00:	50e3      	str	r3, [r4, r3]
   88d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   88d06:	d217      	bcs.n	88d38 <_free_r+0x90>
   88d08:	2201      	movs	r2, #1
   88d0a:	08db      	lsrs	r3, r3, #3
   88d0c:	1098      	asrs	r0, r3, #2
   88d0e:	684d      	ldr	r5, [r1, #4]
   88d10:	4413      	add	r3, r2
   88d12:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   88d16:	4082      	lsls	r2, r0
   88d18:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   88d1c:	432a      	orrs	r2, r5
   88d1e:	3808      	subs	r0, #8
   88d20:	60e0      	str	r0, [r4, #12]
   88d22:	60a7      	str	r7, [r4, #8]
   88d24:	604a      	str	r2, [r1, #4]
   88d26:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   88d2a:	60fc      	str	r4, [r7, #12]
   88d2c:	4640      	mov	r0, r8
   88d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88d32:	f7ff bb45 	b.w	883c0 <__malloc_unlock>
   88d36:	4770      	bx	lr
   88d38:	0a5a      	lsrs	r2, r3, #9
   88d3a:	2a04      	cmp	r2, #4
   88d3c:	d852      	bhi.n	88de4 <_free_r+0x13c>
   88d3e:	099a      	lsrs	r2, r3, #6
   88d40:	f102 0739 	add.w	r7, r2, #57	; 0x39
   88d44:	00ff      	lsls	r7, r7, #3
   88d46:	f102 0538 	add.w	r5, r2, #56	; 0x38
   88d4a:	19c8      	adds	r0, r1, r7
   88d4c:	59ca      	ldr	r2, [r1, r7]
   88d4e:	3808      	subs	r0, #8
   88d50:	4290      	cmp	r0, r2
   88d52:	d04f      	beq.n	88df4 <_free_r+0x14c>
   88d54:	6851      	ldr	r1, [r2, #4]
   88d56:	f021 0103 	bic.w	r1, r1, #3
   88d5a:	428b      	cmp	r3, r1
   88d5c:	d232      	bcs.n	88dc4 <_free_r+0x11c>
   88d5e:	6892      	ldr	r2, [r2, #8]
   88d60:	4290      	cmp	r0, r2
   88d62:	d1f7      	bne.n	88d54 <_free_r+0xac>
   88d64:	68c3      	ldr	r3, [r0, #12]
   88d66:	60a0      	str	r0, [r4, #8]
   88d68:	60e3      	str	r3, [r4, #12]
   88d6a:	609c      	str	r4, [r3, #8]
   88d6c:	60c4      	str	r4, [r0, #12]
   88d6e:	4640      	mov	r0, r8
   88d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88d74:	f7ff bb24 	b.w	883c0 <__malloc_unlock>
   88d78:	6895      	ldr	r5, [r2, #8]
   88d7a:	4f3b      	ldr	r7, [pc, #236]	; (88e68 <_free_r+0x1c0>)
   88d7c:	4403      	add	r3, r0
   88d7e:	42bd      	cmp	r5, r7
   88d80:	d040      	beq.n	88e04 <_free_r+0x15c>
   88d82:	68d0      	ldr	r0, [r2, #12]
   88d84:	f043 0201 	orr.w	r2, r3, #1
   88d88:	60e8      	str	r0, [r5, #12]
   88d8a:	6085      	str	r5, [r0, #8]
   88d8c:	6062      	str	r2, [r4, #4]
   88d8e:	50e3      	str	r3, [r4, r3]
   88d90:	e7b7      	b.n	88d02 <_free_r+0x5a>
   88d92:	07ff      	lsls	r7, r7, #31
   88d94:	4403      	add	r3, r0
   88d96:	d407      	bmi.n	88da8 <_free_r+0x100>
   88d98:	f855 5c08 	ldr.w	r5, [r5, #-8]
   88d9c:	1b64      	subs	r4, r4, r5
   88d9e:	68e2      	ldr	r2, [r4, #12]
   88da0:	68a0      	ldr	r0, [r4, #8]
   88da2:	442b      	add	r3, r5
   88da4:	60c2      	str	r2, [r0, #12]
   88da6:	6090      	str	r0, [r2, #8]
   88da8:	4a30      	ldr	r2, [pc, #192]	; (88e6c <_free_r+0x1c4>)
   88daa:	f043 0001 	orr.w	r0, r3, #1
   88dae:	6812      	ldr	r2, [r2, #0]
   88db0:	6060      	str	r0, [r4, #4]
   88db2:	4293      	cmp	r3, r2
   88db4:	608c      	str	r4, [r1, #8]
   88db6:	d3b9      	bcc.n	88d2c <_free_r+0x84>
   88db8:	4b2d      	ldr	r3, [pc, #180]	; (88e70 <_free_r+0x1c8>)
   88dba:	4640      	mov	r0, r8
   88dbc:	6819      	ldr	r1, [r3, #0]
   88dbe:	f7ff ff23 	bl	88c08 <_malloc_trim_r>
   88dc2:	e7b3      	b.n	88d2c <_free_r+0x84>
   88dc4:	4610      	mov	r0, r2
   88dc6:	e7cd      	b.n	88d64 <_free_r+0xbc>
   88dc8:	1811      	adds	r1, r2, r0
   88dca:	6849      	ldr	r1, [r1, #4]
   88dcc:	07c9      	lsls	r1, r1, #31
   88dce:	d444      	bmi.n	88e5a <_free_r+0x1b2>
   88dd0:	6891      	ldr	r1, [r2, #8]
   88dd2:	4403      	add	r3, r0
   88dd4:	68d2      	ldr	r2, [r2, #12]
   88dd6:	f043 0001 	orr.w	r0, r3, #1
   88dda:	60ca      	str	r2, [r1, #12]
   88ddc:	6091      	str	r1, [r2, #8]
   88dde:	6060      	str	r0, [r4, #4]
   88de0:	50e3      	str	r3, [r4, r3]
   88de2:	e7a3      	b.n	88d2c <_free_r+0x84>
   88de4:	2a14      	cmp	r2, #20
   88de6:	d816      	bhi.n	88e16 <_free_r+0x16e>
   88de8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   88dec:	00ff      	lsls	r7, r7, #3
   88dee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   88df2:	e7aa      	b.n	88d4a <_free_r+0xa2>
   88df4:	2301      	movs	r3, #1
   88df6:	10aa      	asrs	r2, r5, #2
   88df8:	684d      	ldr	r5, [r1, #4]
   88dfa:	4093      	lsls	r3, r2
   88dfc:	432b      	orrs	r3, r5
   88dfe:	604b      	str	r3, [r1, #4]
   88e00:	4603      	mov	r3, r0
   88e02:	e7b0      	b.n	88d66 <_free_r+0xbe>
   88e04:	f043 0201 	orr.w	r2, r3, #1
   88e08:	614c      	str	r4, [r1, #20]
   88e0a:	610c      	str	r4, [r1, #16]
   88e0c:	60e5      	str	r5, [r4, #12]
   88e0e:	60a5      	str	r5, [r4, #8]
   88e10:	6062      	str	r2, [r4, #4]
   88e12:	50e3      	str	r3, [r4, r3]
   88e14:	e78a      	b.n	88d2c <_free_r+0x84>
   88e16:	2a54      	cmp	r2, #84	; 0x54
   88e18:	d806      	bhi.n	88e28 <_free_r+0x180>
   88e1a:	0b1a      	lsrs	r2, r3, #12
   88e1c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   88e20:	00ff      	lsls	r7, r7, #3
   88e22:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   88e26:	e790      	b.n	88d4a <_free_r+0xa2>
   88e28:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   88e2c:	d806      	bhi.n	88e3c <_free_r+0x194>
   88e2e:	0bda      	lsrs	r2, r3, #15
   88e30:	f102 0778 	add.w	r7, r2, #120	; 0x78
   88e34:	00ff      	lsls	r7, r7, #3
   88e36:	f102 0577 	add.w	r5, r2, #119	; 0x77
   88e3a:	e786      	b.n	88d4a <_free_r+0xa2>
   88e3c:	f240 5054 	movw	r0, #1364	; 0x554
   88e40:	4282      	cmp	r2, r0
   88e42:	d806      	bhi.n	88e52 <_free_r+0x1aa>
   88e44:	0c9a      	lsrs	r2, r3, #18
   88e46:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   88e4a:	00ff      	lsls	r7, r7, #3
   88e4c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   88e50:	e77b      	b.n	88d4a <_free_r+0xa2>
   88e52:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   88e56:	257e      	movs	r5, #126	; 0x7e
   88e58:	e777      	b.n	88d4a <_free_r+0xa2>
   88e5a:	f043 0101 	orr.w	r1, r3, #1
   88e5e:	6061      	str	r1, [r4, #4]
   88e60:	6013      	str	r3, [r2, #0]
   88e62:	e763      	b.n	88d2c <_free_r+0x84>
   88e64:	200705d4 	.word	0x200705d4
   88e68:	200705dc 	.word	0x200705dc
   88e6c:	200709e0 	.word	0x200709e0
   88e70:	20070e04 	.word	0x20070e04

00088e74 <__ascii_mbtowc>:
   88e74:	b082      	sub	sp, #8
   88e76:	b149      	cbz	r1, 88e8c <__ascii_mbtowc+0x18>
   88e78:	b15a      	cbz	r2, 88e92 <__ascii_mbtowc+0x1e>
   88e7a:	b16b      	cbz	r3, 88e98 <__ascii_mbtowc+0x24>
   88e7c:	7813      	ldrb	r3, [r2, #0]
   88e7e:	600b      	str	r3, [r1, #0]
   88e80:	7812      	ldrb	r2, [r2, #0]
   88e82:	1c10      	adds	r0, r2, #0
   88e84:	bf18      	it	ne
   88e86:	2001      	movne	r0, #1
   88e88:	b002      	add	sp, #8
   88e8a:	4770      	bx	lr
   88e8c:	a901      	add	r1, sp, #4
   88e8e:	2a00      	cmp	r2, #0
   88e90:	d1f3      	bne.n	88e7a <__ascii_mbtowc+0x6>
   88e92:	4610      	mov	r0, r2
   88e94:	b002      	add	sp, #8
   88e96:	4770      	bx	lr
   88e98:	f06f 0001 	mvn.w	r0, #1
   88e9c:	e7f4      	b.n	88e88 <__ascii_mbtowc+0x14>
   88e9e:	bf00      	nop

00088ea0 <memmove>:
   88ea0:	4288      	cmp	r0, r1
   88ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
   88ea4:	d90d      	bls.n	88ec2 <memmove+0x22>
   88ea6:	188b      	adds	r3, r1, r2
   88ea8:	4298      	cmp	r0, r3
   88eaa:	d20a      	bcs.n	88ec2 <memmove+0x22>
   88eac:	1884      	adds	r4, r0, r2
   88eae:	2a00      	cmp	r2, #0
   88eb0:	d051      	beq.n	88f56 <memmove+0xb6>
   88eb2:	4622      	mov	r2, r4
   88eb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   88eb8:	4299      	cmp	r1, r3
   88eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
   88ebe:	d1f9      	bne.n	88eb4 <memmove+0x14>
   88ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88ec2:	2a0f      	cmp	r2, #15
   88ec4:	d948      	bls.n	88f58 <memmove+0xb8>
   88ec6:	ea41 0300 	orr.w	r3, r1, r0
   88eca:	079b      	lsls	r3, r3, #30
   88ecc:	d146      	bne.n	88f5c <memmove+0xbc>
   88ece:	4615      	mov	r5, r2
   88ed0:	f100 0410 	add.w	r4, r0, #16
   88ed4:	f101 0310 	add.w	r3, r1, #16
   88ed8:	f853 6c10 	ldr.w	r6, [r3, #-16]
   88edc:	3d10      	subs	r5, #16
   88ede:	f844 6c10 	str.w	r6, [r4, #-16]
   88ee2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   88ee6:	2d0f      	cmp	r5, #15
   88ee8:	f844 6c0c 	str.w	r6, [r4, #-12]
   88eec:	f853 6c08 	ldr.w	r6, [r3, #-8]
   88ef0:	f104 0410 	add.w	r4, r4, #16
   88ef4:	f844 6c18 	str.w	r6, [r4, #-24]
   88ef8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   88efc:	f103 0310 	add.w	r3, r3, #16
   88f00:	f844 6c14 	str.w	r6, [r4, #-20]
   88f04:	d8e8      	bhi.n	88ed8 <memmove+0x38>
   88f06:	f1a2 0310 	sub.w	r3, r2, #16
   88f0a:	f023 030f 	bic.w	r3, r3, #15
   88f0e:	f002 0e0f 	and.w	lr, r2, #15
   88f12:	3310      	adds	r3, #16
   88f14:	f1be 0f03 	cmp.w	lr, #3
   88f18:	4419      	add	r1, r3
   88f1a:	4403      	add	r3, r0
   88f1c:	d921      	bls.n	88f62 <memmove+0xc2>
   88f1e:	460e      	mov	r6, r1
   88f20:	4674      	mov	r4, lr
   88f22:	1f1d      	subs	r5, r3, #4
   88f24:	f856 7b04 	ldr.w	r7, [r6], #4
   88f28:	3c04      	subs	r4, #4
   88f2a:	2c03      	cmp	r4, #3
   88f2c:	f845 7f04 	str.w	r7, [r5, #4]!
   88f30:	d8f8      	bhi.n	88f24 <memmove+0x84>
   88f32:	f1ae 0404 	sub.w	r4, lr, #4
   88f36:	f024 0403 	bic.w	r4, r4, #3
   88f3a:	3404      	adds	r4, #4
   88f3c:	4421      	add	r1, r4
   88f3e:	4423      	add	r3, r4
   88f40:	f002 0203 	and.w	r2, r2, #3
   88f44:	b162      	cbz	r2, 88f60 <memmove+0xc0>
   88f46:	3b01      	subs	r3, #1
   88f48:	440a      	add	r2, r1
   88f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
   88f4e:	428a      	cmp	r2, r1
   88f50:	f803 4f01 	strb.w	r4, [r3, #1]!
   88f54:	d1f9      	bne.n	88f4a <memmove+0xaa>
   88f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88f58:	4603      	mov	r3, r0
   88f5a:	e7f3      	b.n	88f44 <memmove+0xa4>
   88f5c:	4603      	mov	r3, r0
   88f5e:	e7f2      	b.n	88f46 <memmove+0xa6>
   88f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88f62:	4672      	mov	r2, lr
   88f64:	e7ee      	b.n	88f44 <memmove+0xa4>
   88f66:	bf00      	nop

00088f68 <_realloc_r>:
   88f68:	2900      	cmp	r1, #0
   88f6a:	f000 8094 	beq.w	89096 <_realloc_r+0x12e>
   88f6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88f72:	460c      	mov	r4, r1
   88f74:	4615      	mov	r5, r2
   88f76:	b083      	sub	sp, #12
   88f78:	4680      	mov	r8, r0
   88f7a:	f105 060b 	add.w	r6, r5, #11
   88f7e:	f7ff fa19 	bl	883b4 <__malloc_lock>
   88f82:	f854 ec04 	ldr.w	lr, [r4, #-4]
   88f86:	2e16      	cmp	r6, #22
   88f88:	f02e 0703 	bic.w	r7, lr, #3
   88f8c:	f1a4 0908 	sub.w	r9, r4, #8
   88f90:	d83c      	bhi.n	8900c <_realloc_r+0xa4>
   88f92:	2210      	movs	r2, #16
   88f94:	4616      	mov	r6, r2
   88f96:	42b5      	cmp	r5, r6
   88f98:	d83d      	bhi.n	89016 <_realloc_r+0xae>
   88f9a:	4297      	cmp	r7, r2
   88f9c:	da43      	bge.n	89026 <_realloc_r+0xbe>
   88f9e:	4bc6      	ldr	r3, [pc, #792]	; (892b8 <_realloc_r+0x350>)
   88fa0:	eb09 0007 	add.w	r0, r9, r7
   88fa4:	6899      	ldr	r1, [r3, #8]
   88fa6:	4288      	cmp	r0, r1
   88fa8:	f000 80c3 	beq.w	89132 <_realloc_r+0x1ca>
   88fac:	6843      	ldr	r3, [r0, #4]
   88fae:	f023 0101 	bic.w	r1, r3, #1
   88fb2:	4401      	add	r1, r0
   88fb4:	6849      	ldr	r1, [r1, #4]
   88fb6:	07c9      	lsls	r1, r1, #31
   88fb8:	d54d      	bpl.n	89056 <_realloc_r+0xee>
   88fba:	f01e 0f01 	tst.w	lr, #1
   88fbe:	f000 809b 	beq.w	890f8 <_realloc_r+0x190>
   88fc2:	4629      	mov	r1, r5
   88fc4:	4640      	mov	r0, r8
   88fc6:	f7fe ff0d 	bl	87de4 <_malloc_r>
   88fca:	4605      	mov	r5, r0
   88fcc:	2800      	cmp	r0, #0
   88fce:	d03b      	beq.n	89048 <_realloc_r+0xe0>
   88fd0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88fd4:	f1a0 0208 	sub.w	r2, r0, #8
   88fd8:	f023 0301 	bic.w	r3, r3, #1
   88fdc:	444b      	add	r3, r9
   88fde:	429a      	cmp	r2, r3
   88fe0:	f000 812b 	beq.w	8923a <_realloc_r+0x2d2>
   88fe4:	1f3a      	subs	r2, r7, #4
   88fe6:	2a24      	cmp	r2, #36	; 0x24
   88fe8:	f200 8118 	bhi.w	8921c <_realloc_r+0x2b4>
   88fec:	2a13      	cmp	r2, #19
   88fee:	f200 80eb 	bhi.w	891c8 <_realloc_r+0x260>
   88ff2:	4603      	mov	r3, r0
   88ff4:	4622      	mov	r2, r4
   88ff6:	6811      	ldr	r1, [r2, #0]
   88ff8:	6019      	str	r1, [r3, #0]
   88ffa:	6851      	ldr	r1, [r2, #4]
   88ffc:	6059      	str	r1, [r3, #4]
   88ffe:	6892      	ldr	r2, [r2, #8]
   89000:	609a      	str	r2, [r3, #8]
   89002:	4621      	mov	r1, r4
   89004:	4640      	mov	r0, r8
   89006:	f7ff fe4f 	bl	88ca8 <_free_r>
   8900a:	e01d      	b.n	89048 <_realloc_r+0xe0>
   8900c:	f026 0607 	bic.w	r6, r6, #7
   89010:	2e00      	cmp	r6, #0
   89012:	4632      	mov	r2, r6
   89014:	dabf      	bge.n	88f96 <_realloc_r+0x2e>
   89016:	2500      	movs	r5, #0
   89018:	230c      	movs	r3, #12
   8901a:	4628      	mov	r0, r5
   8901c:	f8c8 3000 	str.w	r3, [r8]
   89020:	b003      	add	sp, #12
   89022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89026:	4625      	mov	r5, r4
   89028:	1bbb      	subs	r3, r7, r6
   8902a:	2b0f      	cmp	r3, #15
   8902c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   89030:	d81d      	bhi.n	8906e <_realloc_r+0x106>
   89032:	f002 0201 	and.w	r2, r2, #1
   89036:	433a      	orrs	r2, r7
   89038:	eb09 0107 	add.w	r1, r9, r7
   8903c:	f8c9 2004 	str.w	r2, [r9, #4]
   89040:	684b      	ldr	r3, [r1, #4]
   89042:	f043 0301 	orr.w	r3, r3, #1
   89046:	604b      	str	r3, [r1, #4]
   89048:	4640      	mov	r0, r8
   8904a:	f7ff f9b9 	bl	883c0 <__malloc_unlock>
   8904e:	4628      	mov	r0, r5
   89050:	b003      	add	sp, #12
   89052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89056:	f023 0303 	bic.w	r3, r3, #3
   8905a:	18f9      	adds	r1, r7, r3
   8905c:	4291      	cmp	r1, r2
   8905e:	db1d      	blt.n	8909c <_realloc_r+0x134>
   89060:	68c3      	ldr	r3, [r0, #12]
   89062:	6882      	ldr	r2, [r0, #8]
   89064:	4625      	mov	r5, r4
   89066:	60d3      	str	r3, [r2, #12]
   89068:	460f      	mov	r7, r1
   8906a:	609a      	str	r2, [r3, #8]
   8906c:	e7dc      	b.n	89028 <_realloc_r+0xc0>
   8906e:	f002 0201 	and.w	r2, r2, #1
   89072:	eb09 0106 	add.w	r1, r9, r6
   89076:	f043 0301 	orr.w	r3, r3, #1
   8907a:	4332      	orrs	r2, r6
   8907c:	f8c9 2004 	str.w	r2, [r9, #4]
   89080:	444f      	add	r7, r9
   89082:	604b      	str	r3, [r1, #4]
   89084:	687b      	ldr	r3, [r7, #4]
   89086:	3108      	adds	r1, #8
   89088:	f043 0301 	orr.w	r3, r3, #1
   8908c:	607b      	str	r3, [r7, #4]
   8908e:	4640      	mov	r0, r8
   89090:	f7ff fe0a 	bl	88ca8 <_free_r>
   89094:	e7d8      	b.n	89048 <_realloc_r+0xe0>
   89096:	4611      	mov	r1, r2
   89098:	f7fe bea4 	b.w	87de4 <_malloc_r>
   8909c:	f01e 0f01 	tst.w	lr, #1
   890a0:	d18f      	bne.n	88fc2 <_realloc_r+0x5a>
   890a2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   890a6:	eba9 0a01 	sub.w	sl, r9, r1
   890aa:	f8da 1004 	ldr.w	r1, [sl, #4]
   890ae:	f021 0103 	bic.w	r1, r1, #3
   890b2:	440b      	add	r3, r1
   890b4:	443b      	add	r3, r7
   890b6:	4293      	cmp	r3, r2
   890b8:	db26      	blt.n	89108 <_realloc_r+0x1a0>
   890ba:	4655      	mov	r5, sl
   890bc:	68c1      	ldr	r1, [r0, #12]
   890be:	6880      	ldr	r0, [r0, #8]
   890c0:	1f3a      	subs	r2, r7, #4
   890c2:	60c1      	str	r1, [r0, #12]
   890c4:	6088      	str	r0, [r1, #8]
   890c6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   890ca:	f8da 100c 	ldr.w	r1, [sl, #12]
   890ce:	2a24      	cmp	r2, #36	; 0x24
   890d0:	60c1      	str	r1, [r0, #12]
   890d2:	6088      	str	r0, [r1, #8]
   890d4:	d826      	bhi.n	89124 <_realloc_r+0x1bc>
   890d6:	2a13      	cmp	r2, #19
   890d8:	f240 8081 	bls.w	891de <_realloc_r+0x276>
   890dc:	6821      	ldr	r1, [r4, #0]
   890de:	2a1b      	cmp	r2, #27
   890e0:	f8ca 1008 	str.w	r1, [sl, #8]
   890e4:	6861      	ldr	r1, [r4, #4]
   890e6:	f8ca 100c 	str.w	r1, [sl, #12]
   890ea:	f200 80ad 	bhi.w	89248 <_realloc_r+0x2e0>
   890ee:	f104 0008 	add.w	r0, r4, #8
   890f2:	f10a 0210 	add.w	r2, sl, #16
   890f6:	e074      	b.n	891e2 <_realloc_r+0x27a>
   890f8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   890fc:	eba9 0a03 	sub.w	sl, r9, r3
   89100:	f8da 1004 	ldr.w	r1, [sl, #4]
   89104:	f021 0103 	bic.w	r1, r1, #3
   89108:	187b      	adds	r3, r7, r1
   8910a:	4293      	cmp	r3, r2
   8910c:	f6ff af59 	blt.w	88fc2 <_realloc_r+0x5a>
   89110:	4655      	mov	r5, sl
   89112:	f8da 100c 	ldr.w	r1, [sl, #12]
   89116:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8911a:	1f3a      	subs	r2, r7, #4
   8911c:	2a24      	cmp	r2, #36	; 0x24
   8911e:	60c1      	str	r1, [r0, #12]
   89120:	6088      	str	r0, [r1, #8]
   89122:	d9d8      	bls.n	890d6 <_realloc_r+0x16e>
   89124:	4621      	mov	r1, r4
   89126:	4628      	mov	r0, r5
   89128:	461f      	mov	r7, r3
   8912a:	46d1      	mov	r9, sl
   8912c:	f7ff feb8 	bl	88ea0 <memmove>
   89130:	e77a      	b.n	89028 <_realloc_r+0xc0>
   89132:	6841      	ldr	r1, [r0, #4]
   89134:	f106 0010 	add.w	r0, r6, #16
   89138:	f021 0b03 	bic.w	fp, r1, #3
   8913c:	44bb      	add	fp, r7
   8913e:	4583      	cmp	fp, r0
   89140:	da58      	bge.n	891f4 <_realloc_r+0x28c>
   89142:	f01e 0f01 	tst.w	lr, #1
   89146:	f47f af3c 	bne.w	88fc2 <_realloc_r+0x5a>
   8914a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8914e:	eba9 0a01 	sub.w	sl, r9, r1
   89152:	f8da 1004 	ldr.w	r1, [sl, #4]
   89156:	f021 0103 	bic.w	r1, r1, #3
   8915a:	448b      	add	fp, r1
   8915c:	4558      	cmp	r0, fp
   8915e:	dcd3      	bgt.n	89108 <_realloc_r+0x1a0>
   89160:	4655      	mov	r5, sl
   89162:	f8da 100c 	ldr.w	r1, [sl, #12]
   89166:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8916a:	1f3a      	subs	r2, r7, #4
   8916c:	2a24      	cmp	r2, #36	; 0x24
   8916e:	60c1      	str	r1, [r0, #12]
   89170:	6088      	str	r0, [r1, #8]
   89172:	f200 808d 	bhi.w	89290 <_realloc_r+0x328>
   89176:	2a13      	cmp	r2, #19
   89178:	f240 8087 	bls.w	8928a <_realloc_r+0x322>
   8917c:	6821      	ldr	r1, [r4, #0]
   8917e:	2a1b      	cmp	r2, #27
   89180:	f8ca 1008 	str.w	r1, [sl, #8]
   89184:	6861      	ldr	r1, [r4, #4]
   89186:	f8ca 100c 	str.w	r1, [sl, #12]
   8918a:	f200 8088 	bhi.w	8929e <_realloc_r+0x336>
   8918e:	f104 0108 	add.w	r1, r4, #8
   89192:	f10a 0210 	add.w	r2, sl, #16
   89196:	6808      	ldr	r0, [r1, #0]
   89198:	6010      	str	r0, [r2, #0]
   8919a:	6848      	ldr	r0, [r1, #4]
   8919c:	6050      	str	r0, [r2, #4]
   8919e:	6889      	ldr	r1, [r1, #8]
   891a0:	6091      	str	r1, [r2, #8]
   891a2:	ebab 0206 	sub.w	r2, fp, r6
   891a6:	eb0a 0106 	add.w	r1, sl, r6
   891aa:	f042 0201 	orr.w	r2, r2, #1
   891ae:	6099      	str	r1, [r3, #8]
   891b0:	604a      	str	r2, [r1, #4]
   891b2:	f8da 3004 	ldr.w	r3, [sl, #4]
   891b6:	4640      	mov	r0, r8
   891b8:	f003 0301 	and.w	r3, r3, #1
   891bc:	431e      	orrs	r6, r3
   891be:	f8ca 6004 	str.w	r6, [sl, #4]
   891c2:	f7ff f8fd 	bl	883c0 <__malloc_unlock>
   891c6:	e742      	b.n	8904e <_realloc_r+0xe6>
   891c8:	6823      	ldr	r3, [r4, #0]
   891ca:	2a1b      	cmp	r2, #27
   891cc:	6003      	str	r3, [r0, #0]
   891ce:	6863      	ldr	r3, [r4, #4]
   891d0:	6043      	str	r3, [r0, #4]
   891d2:	d827      	bhi.n	89224 <_realloc_r+0x2bc>
   891d4:	f100 0308 	add.w	r3, r0, #8
   891d8:	f104 0208 	add.w	r2, r4, #8
   891dc:	e70b      	b.n	88ff6 <_realloc_r+0x8e>
   891de:	4620      	mov	r0, r4
   891e0:	462a      	mov	r2, r5
   891e2:	6801      	ldr	r1, [r0, #0]
   891e4:	461f      	mov	r7, r3
   891e6:	6011      	str	r1, [r2, #0]
   891e8:	6841      	ldr	r1, [r0, #4]
   891ea:	46d1      	mov	r9, sl
   891ec:	6051      	str	r1, [r2, #4]
   891ee:	6883      	ldr	r3, [r0, #8]
   891f0:	6093      	str	r3, [r2, #8]
   891f2:	e719      	b.n	89028 <_realloc_r+0xc0>
   891f4:	ebab 0b06 	sub.w	fp, fp, r6
   891f8:	eb09 0106 	add.w	r1, r9, r6
   891fc:	f04b 0201 	orr.w	r2, fp, #1
   89200:	6099      	str	r1, [r3, #8]
   89202:	604a      	str	r2, [r1, #4]
   89204:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89208:	4640      	mov	r0, r8
   8920a:	f003 0301 	and.w	r3, r3, #1
   8920e:	431e      	orrs	r6, r3
   89210:	f844 6c04 	str.w	r6, [r4, #-4]
   89214:	f7ff f8d4 	bl	883c0 <__malloc_unlock>
   89218:	4625      	mov	r5, r4
   8921a:	e718      	b.n	8904e <_realloc_r+0xe6>
   8921c:	4621      	mov	r1, r4
   8921e:	f7ff fe3f 	bl	88ea0 <memmove>
   89222:	e6ee      	b.n	89002 <_realloc_r+0x9a>
   89224:	68a3      	ldr	r3, [r4, #8]
   89226:	2a24      	cmp	r2, #36	; 0x24
   89228:	6083      	str	r3, [r0, #8]
   8922a:	68e3      	ldr	r3, [r4, #12]
   8922c:	60c3      	str	r3, [r0, #12]
   8922e:	d018      	beq.n	89262 <_realloc_r+0x2fa>
   89230:	f100 0310 	add.w	r3, r0, #16
   89234:	f104 0210 	add.w	r2, r4, #16
   89238:	e6dd      	b.n	88ff6 <_realloc_r+0x8e>
   8923a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8923e:	4625      	mov	r5, r4
   89240:	f023 0303 	bic.w	r3, r3, #3
   89244:	441f      	add	r7, r3
   89246:	e6ef      	b.n	89028 <_realloc_r+0xc0>
   89248:	68a1      	ldr	r1, [r4, #8]
   8924a:	2a24      	cmp	r2, #36	; 0x24
   8924c:	f8ca 1010 	str.w	r1, [sl, #16]
   89250:	68e1      	ldr	r1, [r4, #12]
   89252:	f8ca 1014 	str.w	r1, [sl, #20]
   89256:	d00d      	beq.n	89274 <_realloc_r+0x30c>
   89258:	f104 0010 	add.w	r0, r4, #16
   8925c:	f10a 0218 	add.w	r2, sl, #24
   89260:	e7bf      	b.n	891e2 <_realloc_r+0x27a>
   89262:	6922      	ldr	r2, [r4, #16]
   89264:	f100 0318 	add.w	r3, r0, #24
   89268:	6102      	str	r2, [r0, #16]
   8926a:	6961      	ldr	r1, [r4, #20]
   8926c:	f104 0218 	add.w	r2, r4, #24
   89270:	6141      	str	r1, [r0, #20]
   89272:	e6c0      	b.n	88ff6 <_realloc_r+0x8e>
   89274:	6922      	ldr	r2, [r4, #16]
   89276:	f104 0018 	add.w	r0, r4, #24
   8927a:	f8ca 2018 	str.w	r2, [sl, #24]
   8927e:	6961      	ldr	r1, [r4, #20]
   89280:	f10a 0220 	add.w	r2, sl, #32
   89284:	f8ca 101c 	str.w	r1, [sl, #28]
   89288:	e7ab      	b.n	891e2 <_realloc_r+0x27a>
   8928a:	4621      	mov	r1, r4
   8928c:	462a      	mov	r2, r5
   8928e:	e782      	b.n	89196 <_realloc_r+0x22e>
   89290:	4621      	mov	r1, r4
   89292:	4628      	mov	r0, r5
   89294:	9301      	str	r3, [sp, #4]
   89296:	f7ff fe03 	bl	88ea0 <memmove>
   8929a:	9b01      	ldr	r3, [sp, #4]
   8929c:	e781      	b.n	891a2 <_realloc_r+0x23a>
   8929e:	68a1      	ldr	r1, [r4, #8]
   892a0:	2a24      	cmp	r2, #36	; 0x24
   892a2:	f8ca 1010 	str.w	r1, [sl, #16]
   892a6:	68e1      	ldr	r1, [r4, #12]
   892a8:	f8ca 1014 	str.w	r1, [sl, #20]
   892ac:	d006      	beq.n	892bc <_realloc_r+0x354>
   892ae:	f104 0110 	add.w	r1, r4, #16
   892b2:	f10a 0218 	add.w	r2, sl, #24
   892b6:	e76e      	b.n	89196 <_realloc_r+0x22e>
   892b8:	200705d4 	.word	0x200705d4
   892bc:	6922      	ldr	r2, [r4, #16]
   892be:	f104 0118 	add.w	r1, r4, #24
   892c2:	f8ca 2018 	str.w	r2, [sl, #24]
   892c6:	6960      	ldr	r0, [r4, #20]
   892c8:	f10a 0220 	add.w	r2, sl, #32
   892cc:	f8ca 001c 	str.w	r0, [sl, #28]
   892d0:	e761      	b.n	89196 <_realloc_r+0x22e>
   892d2:	bf00      	nop

000892d4 <__ascii_wctomb>:
   892d4:	b119      	cbz	r1, 892de <__ascii_wctomb+0xa>
   892d6:	2aff      	cmp	r2, #255	; 0xff
   892d8:	d803      	bhi.n	892e2 <__ascii_wctomb+0xe>
   892da:	700a      	strb	r2, [r1, #0]
   892dc:	2101      	movs	r1, #1
   892de:	4608      	mov	r0, r1
   892e0:	4770      	bx	lr
   892e2:	238a      	movs	r3, #138	; 0x8a
   892e4:	f04f 31ff 	mov.w	r1, #4294967295
   892e8:	6003      	str	r3, [r0, #0]
   892ea:	e7f8      	b.n	892de <__ascii_wctomb+0xa>

000892ec <__gedf2>:
   892ec:	f04f 3cff 	mov.w	ip, #4294967295
   892f0:	e006      	b.n	89300 <__cmpdf2+0x4>
   892f2:	bf00      	nop

000892f4 <__ledf2>:
   892f4:	f04f 0c01 	mov.w	ip, #1
   892f8:	e002      	b.n	89300 <__cmpdf2+0x4>
   892fa:	bf00      	nop

000892fc <__cmpdf2>:
   892fc:	f04f 0c01 	mov.w	ip, #1
   89300:	f84d cd04 	str.w	ip, [sp, #-4]!
   89304:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89308:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8930c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89310:	bf18      	it	ne
   89312:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   89316:	d01b      	beq.n	89350 <__cmpdf2+0x54>
   89318:	b001      	add	sp, #4
   8931a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8931e:	bf0c      	ite	eq
   89320:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   89324:	ea91 0f03 	teqne	r1, r3
   89328:	bf02      	ittt	eq
   8932a:	ea90 0f02 	teqeq	r0, r2
   8932e:	2000      	moveq	r0, #0
   89330:	4770      	bxeq	lr
   89332:	f110 0f00 	cmn.w	r0, #0
   89336:	ea91 0f03 	teq	r1, r3
   8933a:	bf58      	it	pl
   8933c:	4299      	cmppl	r1, r3
   8933e:	bf08      	it	eq
   89340:	4290      	cmpeq	r0, r2
   89342:	bf2c      	ite	cs
   89344:	17d8      	asrcs	r0, r3, #31
   89346:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8934a:	f040 0001 	orr.w	r0, r0, #1
   8934e:	4770      	bx	lr
   89350:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89354:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89358:	d102      	bne.n	89360 <__cmpdf2+0x64>
   8935a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8935e:	d107      	bne.n	89370 <__cmpdf2+0x74>
   89360:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89364:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89368:	d1d6      	bne.n	89318 <__cmpdf2+0x1c>
   8936a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8936e:	d0d3      	beq.n	89318 <__cmpdf2+0x1c>
   89370:	f85d 0b04 	ldr.w	r0, [sp], #4
   89374:	4770      	bx	lr
   89376:	bf00      	nop

00089378 <__aeabi_cdrcmple>:
   89378:	4684      	mov	ip, r0
   8937a:	4610      	mov	r0, r2
   8937c:	4662      	mov	r2, ip
   8937e:	468c      	mov	ip, r1
   89380:	4619      	mov	r1, r3
   89382:	4663      	mov	r3, ip
   89384:	e000      	b.n	89388 <__aeabi_cdcmpeq>
   89386:	bf00      	nop

00089388 <__aeabi_cdcmpeq>:
   89388:	b501      	push	{r0, lr}
   8938a:	f7ff ffb7 	bl	892fc <__cmpdf2>
   8938e:	2800      	cmp	r0, #0
   89390:	bf48      	it	mi
   89392:	f110 0f00 	cmnmi.w	r0, #0
   89396:	bd01      	pop	{r0, pc}

00089398 <__aeabi_dcmpeq>:
   89398:	f84d ed08 	str.w	lr, [sp, #-8]!
   8939c:	f7ff fff4 	bl	89388 <__aeabi_cdcmpeq>
   893a0:	bf0c      	ite	eq
   893a2:	2001      	moveq	r0, #1
   893a4:	2000      	movne	r0, #0
   893a6:	f85d fb08 	ldr.w	pc, [sp], #8
   893aa:	bf00      	nop

000893ac <__aeabi_dcmplt>:
   893ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   893b0:	f7ff ffea 	bl	89388 <__aeabi_cdcmpeq>
   893b4:	bf34      	ite	cc
   893b6:	2001      	movcc	r0, #1
   893b8:	2000      	movcs	r0, #0
   893ba:	f85d fb08 	ldr.w	pc, [sp], #8
   893be:	bf00      	nop

000893c0 <__aeabi_dcmple>:
   893c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   893c4:	f7ff ffe0 	bl	89388 <__aeabi_cdcmpeq>
   893c8:	bf94      	ite	ls
   893ca:	2001      	movls	r0, #1
   893cc:	2000      	movhi	r0, #0
   893ce:	f85d fb08 	ldr.w	pc, [sp], #8
   893d2:	bf00      	nop

000893d4 <__aeabi_dcmpge>:
   893d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   893d8:	f7ff ffce 	bl	89378 <__aeabi_cdrcmple>
   893dc:	bf94      	ite	ls
   893de:	2001      	movls	r0, #1
   893e0:	2000      	movhi	r0, #0
   893e2:	f85d fb08 	ldr.w	pc, [sp], #8
   893e6:	bf00      	nop

000893e8 <__aeabi_dcmpgt>:
   893e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   893ec:	f7ff ffc4 	bl	89378 <__aeabi_cdrcmple>
   893f0:	bf34      	ite	cc
   893f2:	2001      	movcc	r0, #1
   893f4:	2000      	movcs	r0, #0
   893f6:	f85d fb08 	ldr.w	pc, [sp], #8
   893fa:	bf00      	nop

000893fc <__aeabi_dcmpun>:
   893fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89400:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89404:	d102      	bne.n	8940c <__aeabi_dcmpun+0x10>
   89406:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8940a:	d10a      	bne.n	89422 <__aeabi_dcmpun+0x26>
   8940c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89410:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89414:	d102      	bne.n	8941c <__aeabi_dcmpun+0x20>
   89416:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8941a:	d102      	bne.n	89422 <__aeabi_dcmpun+0x26>
   8941c:	f04f 0000 	mov.w	r0, #0
   89420:	4770      	bx	lr
   89422:	f04f 0001 	mov.w	r0, #1
   89426:	4770      	bx	lr

00089428 <__aeabi_d2iz>:
   89428:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8942c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   89430:	d215      	bcs.n	8945e <__aeabi_d2iz+0x36>
   89432:	d511      	bpl.n	89458 <__aeabi_d2iz+0x30>
   89434:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   89438:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8943c:	d912      	bls.n	89464 <__aeabi_d2iz+0x3c>
   8943e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   89442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   89446:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8944a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8944e:	fa23 f002 	lsr.w	r0, r3, r2
   89452:	bf18      	it	ne
   89454:	4240      	negne	r0, r0
   89456:	4770      	bx	lr
   89458:	f04f 0000 	mov.w	r0, #0
   8945c:	4770      	bx	lr
   8945e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   89462:	d105      	bne.n	89470 <__aeabi_d2iz+0x48>
   89464:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   89468:	bf08      	it	eq
   8946a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8946e:	4770      	bx	lr
   89470:	f04f 0000 	mov.w	r0, #0
   89474:	4770      	bx	lr
   89476:	bf00      	nop

00089478 <__aeabi_uldivmod>:
   89478:	b953      	cbnz	r3, 89490 <__aeabi_uldivmod+0x18>
   8947a:	b94a      	cbnz	r2, 89490 <__aeabi_uldivmod+0x18>
   8947c:	2900      	cmp	r1, #0
   8947e:	bf08      	it	eq
   89480:	2800      	cmpeq	r0, #0
   89482:	bf1c      	itt	ne
   89484:	f04f 31ff 	movne.w	r1, #4294967295
   89488:	f04f 30ff 	movne.w	r0, #4294967295
   8948c:	f000 b97a 	b.w	89784 <__aeabi_idiv0>
   89490:	f1ad 0c08 	sub.w	ip, sp, #8
   89494:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   89498:	f000 f806 	bl	894a8 <__udivmoddi4>
   8949c:	f8dd e004 	ldr.w	lr, [sp, #4]
   894a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   894a4:	b004      	add	sp, #16
   894a6:	4770      	bx	lr

000894a8 <__udivmoddi4>:
   894a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   894ac:	468c      	mov	ip, r1
   894ae:	460e      	mov	r6, r1
   894b0:	4604      	mov	r4, r0
   894b2:	9d08      	ldr	r5, [sp, #32]
   894b4:	2b00      	cmp	r3, #0
   894b6:	d150      	bne.n	8955a <__udivmoddi4+0xb2>
   894b8:	428a      	cmp	r2, r1
   894ba:	4617      	mov	r7, r2
   894bc:	d96c      	bls.n	89598 <__udivmoddi4+0xf0>
   894be:	fab2 fe82 	clz	lr, r2
   894c2:	f1be 0f00 	cmp.w	lr, #0
   894c6:	d00b      	beq.n	894e0 <__udivmoddi4+0x38>
   894c8:	f1ce 0c20 	rsb	ip, lr, #32
   894cc:	fa01 f60e 	lsl.w	r6, r1, lr
   894d0:	fa20 fc0c 	lsr.w	ip, r0, ip
   894d4:	fa02 f70e 	lsl.w	r7, r2, lr
   894d8:	ea4c 0c06 	orr.w	ip, ip, r6
   894dc:	fa00 f40e 	lsl.w	r4, r0, lr
   894e0:	0c3a      	lsrs	r2, r7, #16
   894e2:	fbbc f9f2 	udiv	r9, ip, r2
   894e6:	b2bb      	uxth	r3, r7
   894e8:	fb02 cc19 	mls	ip, r2, r9, ip
   894ec:	fb09 fa03 	mul.w	sl, r9, r3
   894f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
   894f4:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   894f8:	45b2      	cmp	sl, r6
   894fa:	d90a      	bls.n	89512 <__udivmoddi4+0x6a>
   894fc:	19f6      	adds	r6, r6, r7
   894fe:	f109 31ff 	add.w	r1, r9, #4294967295
   89502:	f080 8125 	bcs.w	89750 <__udivmoddi4+0x2a8>
   89506:	45b2      	cmp	sl, r6
   89508:	f240 8122 	bls.w	89750 <__udivmoddi4+0x2a8>
   8950c:	f1a9 0902 	sub.w	r9, r9, #2
   89510:	443e      	add	r6, r7
   89512:	eba6 060a 	sub.w	r6, r6, sl
   89516:	fbb6 f0f2 	udiv	r0, r6, r2
   8951a:	fb02 6610 	mls	r6, r2, r0, r6
   8951e:	fb00 f303 	mul.w	r3, r0, r3
   89522:	b2a4      	uxth	r4, r4
   89524:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   89528:	42a3      	cmp	r3, r4
   8952a:	d909      	bls.n	89540 <__udivmoddi4+0x98>
   8952c:	19e4      	adds	r4, r4, r7
   8952e:	f100 32ff 	add.w	r2, r0, #4294967295
   89532:	f080 810b 	bcs.w	8974c <__udivmoddi4+0x2a4>
   89536:	42a3      	cmp	r3, r4
   89538:	f240 8108 	bls.w	8974c <__udivmoddi4+0x2a4>
   8953c:	3802      	subs	r0, #2
   8953e:	443c      	add	r4, r7
   89540:	2100      	movs	r1, #0
   89542:	1ae4      	subs	r4, r4, r3
   89544:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89548:	2d00      	cmp	r5, #0
   8954a:	d062      	beq.n	89612 <__udivmoddi4+0x16a>
   8954c:	2300      	movs	r3, #0
   8954e:	fa24 f40e 	lsr.w	r4, r4, lr
   89552:	602c      	str	r4, [r5, #0]
   89554:	606b      	str	r3, [r5, #4]
   89556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8955a:	428b      	cmp	r3, r1
   8955c:	d907      	bls.n	8956e <__udivmoddi4+0xc6>
   8955e:	2d00      	cmp	r5, #0
   89560:	d055      	beq.n	8960e <__udivmoddi4+0x166>
   89562:	2100      	movs	r1, #0
   89564:	e885 0041 	stmia.w	r5, {r0, r6}
   89568:	4608      	mov	r0, r1
   8956a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8956e:	fab3 f183 	clz	r1, r3
   89572:	2900      	cmp	r1, #0
   89574:	f040 808f 	bne.w	89696 <__udivmoddi4+0x1ee>
   89578:	42b3      	cmp	r3, r6
   8957a:	d302      	bcc.n	89582 <__udivmoddi4+0xda>
   8957c:	4282      	cmp	r2, r0
   8957e:	f200 80fc 	bhi.w	8977a <__udivmoddi4+0x2d2>
   89582:	1a84      	subs	r4, r0, r2
   89584:	eb66 0603 	sbc.w	r6, r6, r3
   89588:	2001      	movs	r0, #1
   8958a:	46b4      	mov	ip, r6
   8958c:	2d00      	cmp	r5, #0
   8958e:	d040      	beq.n	89612 <__udivmoddi4+0x16a>
   89590:	e885 1010 	stmia.w	r5, {r4, ip}
   89594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89598:	b912      	cbnz	r2, 895a0 <__udivmoddi4+0xf8>
   8959a:	2701      	movs	r7, #1
   8959c:	fbb7 f7f2 	udiv	r7, r7, r2
   895a0:	fab7 fe87 	clz	lr, r7
   895a4:	f1be 0f00 	cmp.w	lr, #0
   895a8:	d135      	bne.n	89616 <__udivmoddi4+0x16e>
   895aa:	2101      	movs	r1, #1
   895ac:	1bf6      	subs	r6, r6, r7
   895ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   895b2:	fa1f f887 	uxth.w	r8, r7
   895b6:	fbb6 f2fc 	udiv	r2, r6, ip
   895ba:	fb0c 6612 	mls	r6, ip, r2, r6
   895be:	fb08 f002 	mul.w	r0, r8, r2
   895c2:	0c23      	lsrs	r3, r4, #16
   895c4:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   895c8:	42b0      	cmp	r0, r6
   895ca:	d907      	bls.n	895dc <__udivmoddi4+0x134>
   895cc:	19f6      	adds	r6, r6, r7
   895ce:	f102 33ff 	add.w	r3, r2, #4294967295
   895d2:	d202      	bcs.n	895da <__udivmoddi4+0x132>
   895d4:	42b0      	cmp	r0, r6
   895d6:	f200 80d2 	bhi.w	8977e <__udivmoddi4+0x2d6>
   895da:	461a      	mov	r2, r3
   895dc:	1a36      	subs	r6, r6, r0
   895de:	fbb6 f0fc 	udiv	r0, r6, ip
   895e2:	fb0c 6610 	mls	r6, ip, r0, r6
   895e6:	fb08 f800 	mul.w	r8, r8, r0
   895ea:	b2a3      	uxth	r3, r4
   895ec:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   895f0:	45a0      	cmp	r8, r4
   895f2:	d907      	bls.n	89604 <__udivmoddi4+0x15c>
   895f4:	19e4      	adds	r4, r4, r7
   895f6:	f100 33ff 	add.w	r3, r0, #4294967295
   895fa:	d202      	bcs.n	89602 <__udivmoddi4+0x15a>
   895fc:	45a0      	cmp	r8, r4
   895fe:	f200 80b9 	bhi.w	89774 <__udivmoddi4+0x2cc>
   89602:	4618      	mov	r0, r3
   89604:	eba4 0408 	sub.w	r4, r4, r8
   89608:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   8960c:	e79c      	b.n	89548 <__udivmoddi4+0xa0>
   8960e:	4629      	mov	r1, r5
   89610:	4628      	mov	r0, r5
   89612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89616:	fa07 f70e 	lsl.w	r7, r7, lr
   8961a:	f1ce 0320 	rsb	r3, lr, #32
   8961e:	fa26 f203 	lsr.w	r2, r6, r3
   89622:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   89626:	fbb2 f1fc 	udiv	r1, r2, ip
   8962a:	fa1f f887 	uxth.w	r8, r7
   8962e:	fb0c 2211 	mls	r2, ip, r1, r2
   89632:	fa06 f60e 	lsl.w	r6, r6, lr
   89636:	fa20 f303 	lsr.w	r3, r0, r3
   8963a:	fb01 f908 	mul.w	r9, r1, r8
   8963e:	4333      	orrs	r3, r6
   89640:	0c1e      	lsrs	r6, r3, #16
   89642:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   89646:	45b1      	cmp	r9, r6
   89648:	fa00 f40e 	lsl.w	r4, r0, lr
   8964c:	d909      	bls.n	89662 <__udivmoddi4+0x1ba>
   8964e:	19f6      	adds	r6, r6, r7
   89650:	f101 32ff 	add.w	r2, r1, #4294967295
   89654:	f080 808c 	bcs.w	89770 <__udivmoddi4+0x2c8>
   89658:	45b1      	cmp	r9, r6
   8965a:	f240 8089 	bls.w	89770 <__udivmoddi4+0x2c8>
   8965e:	3902      	subs	r1, #2
   89660:	443e      	add	r6, r7
   89662:	eba6 0609 	sub.w	r6, r6, r9
   89666:	fbb6 f0fc 	udiv	r0, r6, ip
   8966a:	fb0c 6210 	mls	r2, ip, r0, r6
   8966e:	fb00 f908 	mul.w	r9, r0, r8
   89672:	b29e      	uxth	r6, r3
   89674:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   89678:	45b1      	cmp	r9, r6
   8967a:	d907      	bls.n	8968c <__udivmoddi4+0x1e4>
   8967c:	19f6      	adds	r6, r6, r7
   8967e:	f100 33ff 	add.w	r3, r0, #4294967295
   89682:	d271      	bcs.n	89768 <__udivmoddi4+0x2c0>
   89684:	45b1      	cmp	r9, r6
   89686:	d96f      	bls.n	89768 <__udivmoddi4+0x2c0>
   89688:	3802      	subs	r0, #2
   8968a:	443e      	add	r6, r7
   8968c:	eba6 0609 	sub.w	r6, r6, r9
   89690:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   89694:	e78f      	b.n	895b6 <__udivmoddi4+0x10e>
   89696:	f1c1 0720 	rsb	r7, r1, #32
   8969a:	fa22 f807 	lsr.w	r8, r2, r7
   8969e:	408b      	lsls	r3, r1
   896a0:	ea48 0303 	orr.w	r3, r8, r3
   896a4:	fa26 f407 	lsr.w	r4, r6, r7
   896a8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   896ac:	fbb4 f9fe 	udiv	r9, r4, lr
   896b0:	fa1f fc83 	uxth.w	ip, r3
   896b4:	fb0e 4419 	mls	r4, lr, r9, r4
   896b8:	408e      	lsls	r6, r1
   896ba:	fa20 f807 	lsr.w	r8, r0, r7
   896be:	fb09 fa0c 	mul.w	sl, r9, ip
   896c2:	ea48 0806 	orr.w	r8, r8, r6
   896c6:	ea4f 4618 	mov.w	r6, r8, lsr #16
   896ca:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   896ce:	45a2      	cmp	sl, r4
   896d0:	fa02 f201 	lsl.w	r2, r2, r1
   896d4:	fa00 f601 	lsl.w	r6, r0, r1
   896d8:	d908      	bls.n	896ec <__udivmoddi4+0x244>
   896da:	18e4      	adds	r4, r4, r3
   896dc:	f109 30ff 	add.w	r0, r9, #4294967295
   896e0:	d244      	bcs.n	8976c <__udivmoddi4+0x2c4>
   896e2:	45a2      	cmp	sl, r4
   896e4:	d942      	bls.n	8976c <__udivmoddi4+0x2c4>
   896e6:	f1a9 0902 	sub.w	r9, r9, #2
   896ea:	441c      	add	r4, r3
   896ec:	eba4 040a 	sub.w	r4, r4, sl
   896f0:	fbb4 f0fe 	udiv	r0, r4, lr
   896f4:	fb0e 4410 	mls	r4, lr, r0, r4
   896f8:	fb00 fc0c 	mul.w	ip, r0, ip
   896fc:	fa1f f888 	uxth.w	r8, r8
   89700:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   89704:	45a4      	cmp	ip, r4
   89706:	d907      	bls.n	89718 <__udivmoddi4+0x270>
   89708:	18e4      	adds	r4, r4, r3
   8970a:	f100 3eff 	add.w	lr, r0, #4294967295
   8970e:	d229      	bcs.n	89764 <__udivmoddi4+0x2bc>
   89710:	45a4      	cmp	ip, r4
   89712:	d927      	bls.n	89764 <__udivmoddi4+0x2bc>
   89714:	3802      	subs	r0, #2
   89716:	441c      	add	r4, r3
   89718:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8971c:	fba0 8902 	umull	r8, r9, r0, r2
   89720:	eba4 0c0c 	sub.w	ip, r4, ip
   89724:	45cc      	cmp	ip, r9
   89726:	46c2      	mov	sl, r8
   89728:	46ce      	mov	lr, r9
   8972a:	d315      	bcc.n	89758 <__udivmoddi4+0x2b0>
   8972c:	d012      	beq.n	89754 <__udivmoddi4+0x2ac>
   8972e:	b155      	cbz	r5, 89746 <__udivmoddi4+0x29e>
   89730:	ebb6 030a 	subs.w	r3, r6, sl
   89734:	eb6c 060e 	sbc.w	r6, ip, lr
   89738:	fa06 f707 	lsl.w	r7, r6, r7
   8973c:	40cb      	lsrs	r3, r1
   8973e:	431f      	orrs	r7, r3
   89740:	40ce      	lsrs	r6, r1
   89742:	602f      	str	r7, [r5, #0]
   89744:	606e      	str	r6, [r5, #4]
   89746:	2100      	movs	r1, #0
   89748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8974c:	4610      	mov	r0, r2
   8974e:	e6f7      	b.n	89540 <__udivmoddi4+0x98>
   89750:	4689      	mov	r9, r1
   89752:	e6de      	b.n	89512 <__udivmoddi4+0x6a>
   89754:	4546      	cmp	r6, r8
   89756:	d2ea      	bcs.n	8972e <__udivmoddi4+0x286>
   89758:	ebb8 0a02 	subs.w	sl, r8, r2
   8975c:	eb69 0e03 	sbc.w	lr, r9, r3
   89760:	3801      	subs	r0, #1
   89762:	e7e4      	b.n	8972e <__udivmoddi4+0x286>
   89764:	4670      	mov	r0, lr
   89766:	e7d7      	b.n	89718 <__udivmoddi4+0x270>
   89768:	4618      	mov	r0, r3
   8976a:	e78f      	b.n	8968c <__udivmoddi4+0x1e4>
   8976c:	4681      	mov	r9, r0
   8976e:	e7bd      	b.n	896ec <__udivmoddi4+0x244>
   89770:	4611      	mov	r1, r2
   89772:	e776      	b.n	89662 <__udivmoddi4+0x1ba>
   89774:	3802      	subs	r0, #2
   89776:	443c      	add	r4, r7
   89778:	e744      	b.n	89604 <__udivmoddi4+0x15c>
   8977a:	4608      	mov	r0, r1
   8977c:	e706      	b.n	8958c <__udivmoddi4+0xe4>
   8977e:	3a02      	subs	r2, #2
   89780:	443e      	add	r6, r7
   89782:	e72b      	b.n	895dc <__udivmoddi4+0x134>

00089784 <__aeabi_idiv0>:
   89784:	4770      	bx	lr
   89786:	bf00      	nop
   89788:	00000001 	.word	0x00000001
   8978c:	00000002 	.word	0x00000002
   89790:	00000004 	.word	0x00000004
   89794:	00000008 	.word	0x00000008
   89798:	00000010 	.word	0x00000010
   8979c:	00000020 	.word	0x00000020
   897a0:	00000040 	.word	0x00000040
   897a4:	00000080 	.word	0x00000080
   897a8:	00000100 	.word	0x00000100
   897ac:	00000200 	.word	0x00000200
   897b0:	00000400 	.word	0x00000400
   897b4:	000f4240 	.word	0x000f4240
   897b8:	000000c0 	.word	0x000000c0
	...
   897c4:	73657270 	.word	0x73657270
   897c8:	696d2073 	.word	0x696d2073
   897cc:	6f742064 	.word	0x6f742064
   897d0:	6c616320 	.word	0x6c616320
   897d4:	00000000 	.word	0x00000000
   897d8:	69442020 	.word	0x69442020
   897dc:	74636572 	.word	0x74636572
   897e0:	3a6e6f69 	.word	0x3a6e6f69
   897e4:	2e332520 	.word	0x2e332520
   897e8:	20206631 	.word	0x20206631
   897ec:	00000000 	.word	0x00000000
   897f0:	696c6163 	.word	0x696c6163
   897f4:	74617262 	.word	0x74617262
   897f8:	6f632065 	.word	0x6f632065
   897fc:	7361706d 	.word	0x7361706d
   89800:	00000073 	.word	0x00000073
   89804:	69442020 	.word	0x69442020
   89808:	74636572 	.word	0x74636572
   8980c:	3a6e6f69 	.word	0x3a6e6f69
   89810:	64312520 	.word	0x64312520
   89814:	00002020 	.word	0x00002020
   89818:	3a656553 	.word	0x3a656553
   8981c:	64312520 	.word	0x64312520
   89820:	00000000 	.word	0x00000000
   89824:	3a637345 	.word	0x3a637345
   89828:	64342520 	.word	0x64342520
   8982c:	00000000 	.word	0x00000000
   89830:	656e694c 	.word	0x656e694c
   89834:	3125203a 	.word	0x3125203a
   89838:	64312564 	.word	0x64312564
   8983c:	25643125 	.word	0x25643125
   89840:	31256431 	.word	0x31256431
   89844:	64312564 	.word	0x64312564
   89848:	25643125 	.word	0x25643125
   8984c:	31256431 	.word	0x31256431
   89850:	64312564 	.word	0x64312564
   89854:	25643125 	.word	0x25643125
   89858:	00006431 	.word	0x00006431
   8985c:	206c6143 	.word	0x206c6143
   89860:	756c6176 	.word	0x756c6176
   89864:	25203a65 	.word	0x25203a65
   89868:	00006432 	.word	0x00006432
   8986c:	74756873 	.word	0x74756873
   89870:	676e6974 	.word	0x676e6974
   89874:	776f6420 	.word	0x776f6420
   89878:	2e2e2e6e 	.word	0x2e2e2e6e
   8987c:	00000000 	.word	0x00000000
   89880:	666e6f63 	.word	0x666e6f63
   89884:	206d7269 	.word	0x206d7269
   89888:	74756873 	.word	0x74756873
   8988c:	6e776f64 	.word	0x6e776f64
   89890:	0000003f 	.word	0x0000003f
   89894:	20202020 	.word	0x20202020
   89898:	534f6f6e 	.word	0x534f6f6e
   8989c:	454e4f20 	.word	0x454e4f20
   898a0:	00000000 	.word	0x00000000
   898a4:	74614d20 	.word	0x74614d20
   898a8:	00006863 	.word	0x00006863
   898ac:	6e655320 	.word	0x6e655320
   898b0:	73726f73 	.word	0x73726f73
   898b4:	00000000 	.word	0x00000000
   898b8:	74655320 	.word	0x74655320
   898bc:	676e6974 	.word	0x676e6974
   898c0:	00000073 	.word	0x00000073
   898c4:	00089894 	.word	0x00089894
   898c8:	000898a4 	.word	0x000898a4
   898cc:	000898ac 	.word	0x000898ac
   898d0:	000898b8 	.word	0x000898b8
   898d4:	6c614220 	.word	0x6c614220
   898d8:	0000006c 	.word	0x0000006c
   898dc:	6d6f4320 	.word	0x6d6f4320
   898e0:	73736170 	.word	0x73736170
   898e4:	00000000 	.word	0x00000000
   898e8:	6e694c20 	.word	0x6e694c20
   898ec:	00000065 	.word	0x00000065
   898f0:	00000020 	.word	0x00000020
   898f4:	000898d4 	.word	0x000898d4
   898f8:	000898dc 	.word	0x000898dc
   898fc:	000898e8 	.word	0x000898e8
   89900:	000898f0 	.word	0x000898f0
   89904:	000898f0 	.word	0x000898f0
   89908:	000898f0 	.word	0x000898f0
   8990c:	000898f0 	.word	0x000898f0
   89910:	000898f0 	.word	0x000898f0
   89914:	0000003e 	.word	0x0000003e
   89918:	25753325 	.word	0x25753325
   8991c:	00000025 	.word	0x00000025
   89920:	75322520 	.word	0x75322520
   89924:	00002525 	.word	0x00002525
   89928:	31252020 	.word	0x31252020
   8992c:	00252575 	.word	0x00252575
   89930:	746f6f62 	.word	0x746f6f62
   89934:	20676e69 	.word	0x20676e69
   89938:	534f6f6e 	.word	0x534f6f6e
   8993c:	00202020 	.word	0x00202020
   89940:	0000002e 	.word	0x0000002e

00089944 <_global_impure_ptr>:
   89944:	200701a8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   89954:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   89964:	46454443 00000000 33323130 37363534     CDEF....01234567
   89974:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   89984:	0000296c 00000030                       l)..0...

0008998c <blanks.7223>:
   8998c:	20202020 20202020 20202020 20202020                     

0008999c <zeroes.7224>:
   8999c:	30303030 30303030 30303030 30303030     0000000000000000
   899ac:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   899bc:	00000000                                ....

000899c0 <__mprec_bigtens>:
   899c0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   899d0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   899e0:	7f73bf3c 75154fdd                       <.s..O.u

000899e8 <__mprec_tens>:
   899e8:	00000000 3ff00000 00000000 40240000     .......?......$@
   899f8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   89a08:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   89a18:	00000000 412e8480 00000000 416312d0     .......A......cA
   89a28:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   89a38:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   89a48:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   89a58:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   89a68:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   89a78:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   89a88:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   89a98:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   89aa8:	79d99db4 44ea7843                       ...yCx.D

00089ab0 <p05.6055>:
   89ab0:	00000005 00000019 0000007d 00000043     ........}...C...
   89ac0:	49534f50 00000058 0000002e              POSIX.......

00089acc <_ctype_>:
   89acc:	20202000 20202020 28282020 20282828     .         ((((( 
   89adc:	20202020 20202020 20202020 20202020                     
   89aec:	10108820 10101010 10101010 10101010      ...............
   89afc:	04040410 04040404 10040404 10101010     ................
   89b0c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   89b1c:	01010101 01010101 01010101 10101010     ................
   89b2c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   89b3c:	02020202 02020202 02020202 10101010     ................
   89b4c:	00000020 00000000 00000000 00000000      ...............
	...

00089bd0 <_init>:
   89bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89bd2:	bf00      	nop
   89bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89bd6:	bc08      	pop	{r3}
   89bd8:	469e      	mov	lr, r3
   89bda:	4770      	bx	lr

00089bdc <__init_array_start>:
   89bdc:	00086e01 	.word	0x00086e01

00089be0 <__frame_dummy_init_array_entry>:
   89be0:	00080119                                ....

00089be4 <_fini>:
   89be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89be6:	bf00      	nop
   89be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89bea:	bc08      	pop	{r3}
   89bec:	469e      	mov	lr, r3
   89bee:	4770      	bx	lr

00089bf0 <__fini_array_start>:
   89bf0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007019c 	.word	0x2007019c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <print_menu>:
2007018c:	00000101                                         .

2007018d <allow_leds>:
2007018d:	02000001                                         ...

20070190 <menu_info>:
20070190:	04020202 03010101 01010101              ............

2007019c <SystemCoreClock>:
2007019c:	003d0900                                ..=.

200701a0 <update_dots>:
200701a0:	00000001                                ....

200701a4 <_impure_ptr>:
200701a4:	200701a8                                ... 

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	20070fe8                                ... 

200705d4 <__malloc_av_>:
	...
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 

200709dc <__malloc_sbrk_base>:
200709dc:	ffffffff                                ....

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__global_locale>:
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00000043 00000000 00000000 00000000     C...............
	...
20070ac4:	000892d5 00088e75 00000000 00089acc     ....u...........
20070ad4:	00089ac8 00089968 00089968 00089968     ....h...h...h...
20070ae4:	00089968 00089968 00089968 00089968     h...h...h...h...
20070af4:	00089968 00089968 ffffffff ffffffff     h...h...........
20070b04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
