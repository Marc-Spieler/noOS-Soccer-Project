
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009b24  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00089b24  00089b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b50  20070000  00089b2c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004c0  20070b50  0008a67c  00020b50  2**2
                  ALLOC
  4 .stack        00002000  20071010  0008ab3c  00020b50  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b79  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001d732  00000000  00000000  00020bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003c26  00000000  00000000  0003e304  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008c31  00000000  00000000  00041f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f58  00000000  00000000  0004ab5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ea0  00000000  00000000  0004bab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000867f  00000000  00000000  0004c953  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013345  00000000  00000000  00054fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00063625  00000000  00000000  00068317  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004de8  00000000  00000000  000cb93c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	10 30 07 20 19 41 08 00 11 41 08 00 11 41 08 00     .0. .A...A...A..
   80010:	11 41 08 00 11 41 08 00 11 41 08 00 00 00 00 00     .A...A...A......
	...
   8002c:	11 41 08 00 11 41 08 00 00 00 00 00 11 41 08 00     .A...A.......A..
   8003c:	85 30 08 00 11 41 08 00 11 41 08 00 11 41 08 00     .0...A...A...A..
   8004c:	11 41 08 00 11 41 08 00 11 41 08 00 11 41 08 00     .A...A...A...A..
   8005c:	11 41 08 00 11 41 08 00 11 41 08 00 00 00 00 00     .A...A...A......
   8006c:	11 41 08 00 11 41 08 00 11 41 08 00 11 41 08 00     .A...A...A...A..
	...
   80084:	11 41 08 00 11 41 08 00 11 41 08 00 11 41 08 00     .A...A...A...A..
   80094:	11 41 08 00 25 11 08 00 11 41 08 00 11 41 08 00     .A..%....A...A..
   800a4:	00 00 00 00 11 41 08 00 11 41 08 00 75 2d 08 00     .....A...A..u-..
   800b4:	11 41 08 00 11 41 08 00 11 41 08 00 11 41 08 00     .A...A...A...A..
   800c4:	11 41 08 00 11 41 08 00 11 41 08 00 11 41 08 00     .A...A...A...A..
   800d4:	11 41 08 00 11 41 08 00 45 0c 08 00 11 41 08 00     .A...A..E....A..
   800e4:	11 41 08 00 11 41 08 00 11 41 08 00 11 41 08 00     .A...A...A...A..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b50 	.word	0x20070b50
   80110:	00000000 	.word	0x00000000
   80114:	00089b2c 	.word	0x00089b2c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00089b2c 	.word	0x00089b2c
   80154:	20070b54 	.word	0x20070b54
   80158:	00089b2c 	.word	0x00089b2c
   8015c:	00000000 	.word	0x00000000

00080160 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   80160:	b580      	push	{r7, lr}
   80162:	b082      	sub	sp, #8
   80164:	af00      	add	r7, sp, #0
   80166:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   80168:	6878      	ldr	r0, [r7, #4]
   8016a:	4b04      	ldr	r3, [pc, #16]	; (8017c <usart_spi_enable+0x1c>)
   8016c:	4798      	blx	r3
	usart_enable_rx(p_usart);
   8016e:	6878      	ldr	r0, [r7, #4]
   80170:	4b03      	ldr	r3, [pc, #12]	; (80180 <usart_spi_enable+0x20>)
   80172:	4798      	blx	r3
}
   80174:	bf00      	nop
   80176:	3708      	adds	r7, #8
   80178:	46bd      	mov	sp, r7
   8017a:	bd80      	pop	{r7, pc}
   8017c:	000808a1 	.word	0x000808a1
   80180:	000808e9 	.word	0x000808e9

00080184 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   80184:	b580      	push	{r7, lr}
   80186:	b082      	sub	sp, #8
   80188:	af00      	add	r7, sp, #0
   8018a:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   8018c:	6878      	ldr	r0, [r7, #4]
   8018e:	4b04      	ldr	r3, [pc, #16]	; (801a0 <usart_spi_disable+0x1c>)
   80190:	4798      	blx	r3
	usart_disable_rx(p_usart);
   80192:	6878      	ldr	r0, [r7, #4]
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <usart_spi_disable+0x20>)
   80196:	4798      	blx	r3
}
   80198:	bf00      	nop
   8019a:	3708      	adds	r7, #8
   8019c:	46bd      	mov	sp, r7
   8019e:	bd80      	pop	{r7, pc}
   801a0:	000808b9 	.word	0x000808b9
   801a4:	00080901 	.word	0x00080901

000801a8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801a8:	b480      	push	{r7}
   801aa:	b085      	sub	sp, #20
   801ac:	af00      	add	r7, sp, #0
   801ae:	60f8      	str	r0, [r7, #12]
   801b0:	60b9      	str	r1, [r7, #8]
   801b2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801b4:	68bb      	ldr	r3, [r7, #8]
   801b6:	2b00      	cmp	r3, #0
   801b8:	d007      	beq.n	801ca <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   801ba:	68bb      	ldr	r3, [r7, #8]
   801bc:	681a      	ldr	r2, [r3, #0]
   801be:	68fb      	ldr	r3, [r7, #12]
   801c0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   801c2:	68bb      	ldr	r3, [r7, #8]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	68fb      	ldr	r3, [r7, #12]
   801c8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   801ca:	687b      	ldr	r3, [r7, #4]
   801cc:	2b00      	cmp	r3, #0
   801ce:	d007      	beq.n	801e0 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	681a      	ldr	r2, [r3, #0]
   801d4:	68fb      	ldr	r3, [r7, #12]
   801d6:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   801d8:	687b      	ldr	r3, [r7, #4]
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	68fb      	ldr	r3, [r7, #12]
   801de:	61da      	str	r2, [r3, #28]
	}
}
   801e0:	bf00      	nop
   801e2:	3714      	adds	r7, #20
   801e4:	46bd      	mov	sp, r7
   801e6:	bc80      	pop	{r7}
   801e8:	4770      	bx	lr

000801ea <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801ea:	b480      	push	{r7}
   801ec:	b085      	sub	sp, #20
   801ee:	af00      	add	r7, sp, #0
   801f0:	60f8      	str	r0, [r7, #12]
   801f2:	60b9      	str	r1, [r7, #8]
   801f4:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801f6:	68bb      	ldr	r3, [r7, #8]
   801f8:	2b00      	cmp	r3, #0
   801fa:	d007      	beq.n	8020c <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   801fc:	68bb      	ldr	r3, [r7, #8]
   801fe:	681a      	ldr	r2, [r3, #0]
   80200:	68fb      	ldr	r3, [r7, #12]
   80202:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   80204:	68bb      	ldr	r3, [r7, #8]
   80206:	685a      	ldr	r2, [r3, #4]
   80208:	68fb      	ldr	r3, [r7, #12]
   8020a:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b00      	cmp	r3, #0
   80210:	d007      	beq.n	80222 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   80212:	687b      	ldr	r3, [r7, #4]
   80214:	681a      	ldr	r2, [r3, #0]
   80216:	68fb      	ldr	r3, [r7, #12]
   80218:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   8021a:	687b      	ldr	r3, [r7, #4]
   8021c:	685a      	ldr	r2, [r3, #4]
   8021e:	68fb      	ldr	r3, [r7, #12]
   80220:	615a      	str	r2, [r3, #20]
	}
}
   80222:	bf00      	nop
   80224:	3714      	adds	r7, #20
   80226:	46bd      	mov	sp, r7
   80228:	bc80      	pop	{r7}
   8022a:	4770      	bx	lr

0008022c <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8022c:	b480      	push	{r7}
   8022e:	b083      	sub	sp, #12
   80230:	af00      	add	r7, sp, #0
   80232:	6078      	str	r0, [r7, #4]
   80234:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   80236:	683a      	ldr	r2, [r7, #0]
   80238:	f240 1301 	movw	r3, #257	; 0x101
   8023c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8023e:	687a      	ldr	r2, [r7, #4]
   80240:	6213      	str	r3, [r2, #32]
}
   80242:	bf00      	nop
   80244:	370c      	adds	r7, #12
   80246:	46bd      	mov	sp, r7
   80248:	bc80      	pop	{r7}
   8024a:	4770      	bx	lr

0008024c <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8024c:	b480      	push	{r7}
   8024e:	b083      	sub	sp, #12
   80250:	af00      	add	r7, sp, #0
   80252:	6078      	str	r0, [r7, #4]
   80254:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   80256:	683a      	ldr	r2, [r7, #0]
   80258:	f240 2302 	movw	r3, #514	; 0x202
   8025c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8025e:	687a      	ldr	r2, [r7, #4]
   80260:	6213      	str	r3, [r2, #32]
}
   80262:	bf00      	nop
   80264:	370c      	adds	r7, #12
   80266:	46bd      	mov	sp, r7
   80268:	bc80      	pop	{r7}
   8026a:	4770      	bx	lr

0008026c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8026c:	b4b0      	push	{r4, r5, r7}
   8026e:	b091      	sub	sp, #68	; 0x44
   80270:	af00      	add	r7, sp, #0
   80272:	6078      	str	r0, [r7, #4]
   80274:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80276:	4b1b      	ldr	r3, [pc, #108]	; (802e4 <pwm_clocks_generate+0x78>)
   80278:	f107 040c 	add.w	r4, r7, #12
   8027c:	461d      	mov	r5, r3
   8027e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8028a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8028e:	2300      	movs	r3, #0
   80290:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   80294:	009b      	lsls	r3, r3, #2
   80296:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8029a:	4413      	add	r3, r2
   8029c:	f853 3c34 	ldr.w	r3, [r3, #-52]
   802a0:	683a      	ldr	r2, [r7, #0]
   802a2:	fbb2 f2f3 	udiv	r2, r2, r3
   802a6:	687b      	ldr	r3, [r7, #4]
   802a8:	fbb2 f3f3 	udiv	r3, r2, r3
   802ac:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   802b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   802b4:	d906      	bls.n	802c4 <pwm_clocks_generate+0x58>
			break;
		}
		ul_pre++;
   802b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802b8:	3301      	adds	r3, #1
   802ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   802bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802be:	2b0a      	cmp	r3, #10
   802c0:	d9e7      	bls.n	80292 <pwm_clocks_generate+0x26>
   802c2:	e000      	b.n	802c6 <pwm_clocks_generate+0x5a>
			break;
   802c4:	bf00      	nop

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   802c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802c8:	2b0a      	cmp	r3, #10
   802ca:	d804      	bhi.n	802d6 <pwm_clocks_generate+0x6a>
		return ul_div | (ul_pre << 8);
   802cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802ce:	021a      	lsls	r2, r3, #8
   802d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   802d2:	4313      	orrs	r3, r2
   802d4:	e001      	b.n	802da <pwm_clocks_generate+0x6e>
	} else {
		return PWM_INVALID_ARGUMENT;
   802d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
   802da:	4618      	mov	r0, r3
   802dc:	3744      	adds	r7, #68	; 0x44
   802de:	46bd      	mov	sp, r7
   802e0:	bcb0      	pop	{r4, r5, r7}
   802e2:	4770      	bx	lr
   802e4:	000896e0 	.word	0x000896e0

000802e8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   802e8:	b580      	push	{r7, lr}
   802ea:	b084      	sub	sp, #16
   802ec:	af00      	add	r7, sp, #0
   802ee:	6078      	str	r0, [r7, #4]
   802f0:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
   802f2:	2300      	movs	r3, #0
   802f4:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   802f6:	683b      	ldr	r3, [r7, #0]
   802f8:	681b      	ldr	r3, [r3, #0]
   802fa:	2b00      	cmp	r3, #0
   802fc:	d011      	beq.n	80322 <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   802fe:	683b      	ldr	r3, [r7, #0]
   80300:	681a      	ldr	r2, [r3, #0]
   80302:	683b      	ldr	r3, [r7, #0]
   80304:	689b      	ldr	r3, [r3, #8]
   80306:	4619      	mov	r1, r3
   80308:	4610      	mov	r0, r2
   8030a:	4b16      	ldr	r3, [pc, #88]	; (80364 <pwm_init+0x7c>)
   8030c:	4798      	blx	r3
   8030e:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
   80310:	68bb      	ldr	r3, [r7, #8]
   80312:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80316:	4293      	cmp	r3, r2
   80318:	d101      	bne.n	8031e <pwm_init+0x36>
			return result;
   8031a:	68bb      	ldr	r3, [r7, #8]
   8031c:	e01e      	b.n	8035c <pwm_init+0x74>
		}

		clock = result;
   8031e:	68bb      	ldr	r3, [r7, #8]
   80320:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80322:	683b      	ldr	r3, [r7, #0]
   80324:	685b      	ldr	r3, [r3, #4]
   80326:	2b00      	cmp	r3, #0
   80328:	d014      	beq.n	80354 <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8032a:	683b      	ldr	r3, [r7, #0]
   8032c:	685a      	ldr	r2, [r3, #4]
   8032e:	683b      	ldr	r3, [r7, #0]
   80330:	689b      	ldr	r3, [r3, #8]
   80332:	4619      	mov	r1, r3
   80334:	4610      	mov	r0, r2
   80336:	4b0b      	ldr	r3, [pc, #44]	; (80364 <pwm_init+0x7c>)
   80338:	4798      	blx	r3
   8033a:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
   8033c:	68bb      	ldr	r3, [r7, #8]
   8033e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80342:	4293      	cmp	r3, r2
   80344:	d101      	bne.n	8034a <pwm_init+0x62>
			return result;
   80346:	68bb      	ldr	r3, [r7, #8]
   80348:	e008      	b.n	8035c <pwm_init+0x74>
		}

		clock |= (result << 16);
   8034a:	68bb      	ldr	r3, [r7, #8]
   8034c:	041b      	lsls	r3, r3, #16
   8034e:	68fa      	ldr	r2, [r7, #12]
   80350:	4313      	orrs	r3, r2
   80352:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80354:	687b      	ldr	r3, [r7, #4]
   80356:	68fa      	ldr	r2, [r7, #12]
   80358:	601a      	str	r2, [r3, #0]
#endif
	return 0;
   8035a:	2300      	movs	r3, #0
}
   8035c:	4618      	mov	r0, r3
   8035e:	3710      	adds	r7, #16
   80360:	46bd      	mov	sp, r7
   80362:	bd80      	pop	{r7, pc}
   80364:	0008026d 	.word	0x0008026d

00080368 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80368:	b480      	push	{r7}
   8036a:	b087      	sub	sp, #28
   8036c:	af00      	add	r7, sp, #0
   8036e:	6078      	str	r0, [r7, #4]
   80370:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
   80372:	2300      	movs	r3, #0
   80374:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
   80376:	683b      	ldr	r3, [r7, #0]
   80378:	681b      	ldr	r3, [r3, #0]
   8037a:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8037c:	683b      	ldr	r3, [r7, #0]
   8037e:	685b      	ldr	r3, [r3, #4]
   80380:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
   80384:	683a      	ldr	r2, [r7, #0]
   80386:	7a92      	ldrb	r2, [r2, #10]
   80388:	0252      	lsls	r2, r2, #9
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8038a:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   8038c:	683a      	ldr	r2, [r7, #0]
   8038e:	8a92      	ldrh	r2, [r2, #20]
			(p_channel->polarity << 9) |
   80390:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
   80392:	683a      	ldr	r2, [r7, #0]
   80394:	7d92      	ldrb	r2, [r2, #22]
   80396:	0412      	lsls	r2, r2, #16
			(p_channel->counter_event) |
   80398:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
   8039a:	683a      	ldr	r2, [r7, #0]
   8039c:	7dd2      	ldrb	r2, [r2, #23]
   8039e:	0452      	lsls	r2, r2, #17
			(p_channel->b_deadtime_generator << 16) |
   803a0:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
   803a2:	683a      	ldr	r2, [r7, #0]
   803a4:	7e12      	ldrb	r2, [r2, #24]
   803a6:	0492      	lsls	r2, r2, #18
			(p_channel->b_pwmh_output_inverted << 17) |
   803a8:	4313      	orrs	r3, r2
#endif
			(p_channel->alignment);
   803aa:	683a      	ldr	r2, [r7, #0]
   803ac:	8912      	ldrh	r2, [r2, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803ae:	4313      	orrs	r3, r2
   803b0:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   803b2:	687a      	ldr	r2, [r7, #4]
   803b4:	693b      	ldr	r3, [r7, #16]
   803b6:	3310      	adds	r3, #16
   803b8:	015b      	lsls	r3, r3, #5
   803ba:	4413      	add	r3, r2
   803bc:	697a      	ldr	r2, [r7, #20]
   803be:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   803c0:	683b      	ldr	r3, [r7, #0]
   803c2:	68da      	ldr	r2, [r3, #12]
   803c4:	6879      	ldr	r1, [r7, #4]
   803c6:	693b      	ldr	r3, [r7, #16]
   803c8:	3310      	adds	r3, #16
   803ca:	015b      	lsls	r3, r3, #5
   803cc:	440b      	add	r3, r1
   803ce:	3304      	adds	r3, #4
   803d0:	601a      	str	r2, [r3, #0]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   803d2:	683b      	ldr	r3, [r7, #0]
   803d4:	691a      	ldr	r2, [r3, #16]
   803d6:	6879      	ldr	r1, [r7, #4]
   803d8:	693b      	ldr	r3, [r7, #16]
   803da:	015b      	lsls	r3, r3, #5
   803dc:	440b      	add	r3, r1
   803de:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   803e2:	601a      	str	r2, [r3, #0]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   803e4:	683b      	ldr	r3, [r7, #0]
   803e6:	7d9b      	ldrb	r3, [r3, #22]
   803e8:	2b00      	cmp	r3, #0
   803ea:	d00d      	beq.n	80408 <pwm_channel_init+0xa0>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   803ec:	683b      	ldr	r3, [r7, #0]
   803ee:	8b9b      	ldrh	r3, [r3, #28]
   803f0:	041b      	lsls	r3, r3, #16
   803f2:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   803f4:	683b      	ldr	r3, [r7, #0]
   803f6:	8b5b      	ldrh	r3, [r3, #26]
   803f8:	431a      	orrs	r2, r3
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   803fa:	6879      	ldr	r1, [r7, #4]
   803fc:	693b      	ldr	r3, [r7, #16]
   803fe:	015b      	lsls	r3, r3, #5
   80400:	440b      	add	r3, r1
   80402:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80406:	601a      	str	r2, [r3, #0]
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80408:	687b      	ldr	r3, [r7, #4]
   8040a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   8040c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   80410:	693b      	ldr	r3, [r7, #16]
   80412:	fa01 f303 	lsl.w	r3, r1, r3
   80416:	43db      	mvns	r3, r3
   80418:	4013      	ands	r3, r2
   8041a:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   8041c:	683b      	ldr	r3, [r7, #0]
   8041e:	7f9b      	ldrb	r3, [r3, #30]
   80420:	461a      	mov	r2, r3
   80422:	693b      	ldr	r3, [r7, #16]
   80424:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80426:	683b      	ldr	r3, [r7, #0]
   80428:	7fdb      	ldrb	r3, [r3, #31]
   8042a:	4619      	mov	r1, r3
   8042c:	693b      	ldr	r3, [r7, #16]
   8042e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   80432:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80434:	4313      	orrs	r3, r2
   80436:	461a      	mov	r2, r3
   80438:	697b      	ldr	r3, [r7, #20]
   8043a:	4313      	orrs	r3, r2
   8043c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OS = tmp_reg;
   8043e:	687b      	ldr	r3, [r7, #4]
   80440:	697a      	ldr	r2, [r7, #20]
   80442:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80444:	687b      	ldr	r3, [r7, #4]
   80446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   8044c:	693b      	ldr	r3, [r7, #16]
   8044e:	fa01 f303 	lsl.w	r3, r1, r3
   80452:	43db      	mvns	r3, r3
   80454:	4013      	ands	r3, r2
   80456:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80458:	683b      	ldr	r3, [r7, #0]
   8045a:	f893 3020 	ldrb.w	r3, [r3, #32]
   8045e:	461a      	mov	r2, r3
   80460:	693b      	ldr	r3, [r7, #16]
   80462:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80464:	683b      	ldr	r3, [r7, #0]
   80466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   8046a:	4619      	mov	r1, r3
   8046c:	693b      	ldr	r3, [r7, #16]
   8046e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   80472:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80474:	4313      	orrs	r3, r2
   80476:	461a      	mov	r2, r3
   80478:	697b      	ldr	r3, [r7, #20]
   8047a:	4313      	orrs	r3, r2
   8047c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OOV = tmp_reg;
   8047e:	687b      	ldr	r3, [r7, #4]
   80480:	697a      	ldr	r2, [r7, #20]
   80482:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80484:	2201      	movs	r2, #1
   80486:	693b      	ldr	r3, [r7, #16]
   80488:	fa02 f303 	lsl.w	r3, r2, r3
   8048c:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
   8048e:	683b      	ldr	r3, [r7, #0]
   80490:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   80494:	2b00      	cmp	r3, #0
   80496:	d006      	beq.n	804a6 <pwm_channel_init+0x13e>
		p_pwm->PWM_SCM |= channel;
   80498:	687b      	ldr	r3, [r7, #4]
   8049a:	6a1a      	ldr	r2, [r3, #32]
   8049c:	68fb      	ldr	r3, [r7, #12]
   8049e:	431a      	orrs	r2, r3
   804a0:	687b      	ldr	r3, [r7, #4]
   804a2:	621a      	str	r2, [r3, #32]
   804a4:	e006      	b.n	804b4 <pwm_channel_init+0x14c>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   804a6:	687b      	ldr	r3, [r7, #4]
   804a8:	6a1a      	ldr	r2, [r3, #32]
   804aa:	68fb      	ldr	r3, [r7, #12]
   804ac:	43db      	mvns	r3, r3
   804ae:	401a      	ands	r2, r3
   804b0:	687b      	ldr	r3, [r7, #4]
   804b2:	621a      	str	r2, [r3, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   804b4:	683b      	ldr	r3, [r7, #0]
   804b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   804ba:	2b01      	cmp	r3, #1
   804bc:	d109      	bne.n	804d2 <pwm_channel_init+0x16a>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   804be:	687b      	ldr	r3, [r7, #4]
   804c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804c2:	2101      	movs	r1, #1
   804c4:	693a      	ldr	r2, [r7, #16]
   804c6:	fa01 f202 	lsl.w	r2, r1, r2
   804ca:	431a      	orrs	r2, r3
   804cc:	687b      	ldr	r3, [r7, #4]
   804ce:	669a      	str	r2, [r3, #104]	; 0x68
   804d0:	e009      	b.n	804e6 <pwm_channel_init+0x17e>
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   804d2:	687b      	ldr	r3, [r7, #4]
   804d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804d6:	2101      	movs	r1, #1
   804d8:	693a      	ldr	r2, [r7, #16]
   804da:	fa01 f202 	lsl.w	r2, r1, r2
   804de:	43d2      	mvns	r2, r2
   804e0:	401a      	ands	r2, r3
   804e2:	687b      	ldr	r3, [r7, #4]
   804e4:	669a      	str	r2, [r3, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   804e6:	683b      	ldr	r3, [r7, #0]
   804e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   804ec:	2b01      	cmp	r3, #1
   804ee:	d10a      	bne.n	80506 <pwm_channel_init+0x19e>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   804f0:	687b      	ldr	r3, [r7, #4]
   804f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804f4:	2101      	movs	r1, #1
   804f6:	693a      	ldr	r2, [r7, #16]
   804f8:	fa01 f202 	lsl.w	r2, r1, r2
   804fc:	0412      	lsls	r2, r2, #16
   804fe:	431a      	orrs	r2, r3
   80500:	687b      	ldr	r3, [r7, #4]
   80502:	669a      	str	r2, [r3, #104]	; 0x68
   80504:	e00a      	b.n	8051c <pwm_channel_init+0x1b4>
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80506:	687b      	ldr	r3, [r7, #4]
   80508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8050a:	2101      	movs	r1, #1
   8050c:	693a      	ldr	r2, [r7, #16]
   8050e:	fa01 f202 	lsl.w	r2, r1, r2
   80512:	0412      	lsls	r2, r2, #16
   80514:	43d2      	mvns	r2, r2
   80516:	401a      	ands	r2, r3
   80518:	687b      	ldr	r3, [r7, #4]
   8051a:	669a      	str	r2, [r3, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
   8051c:	2300      	movs	r3, #0
   8051e:	60bb      	str	r3, [r7, #8]
#if (SAM3XA)
	if (ch_num < 4) {
   80520:	693b      	ldr	r3, [r7, #16]
   80522:	2b03      	cmp	r3, #3
   80524:	d81d      	bhi.n	80562 <pwm_channel_init+0x1fa>
		ch_num *= 8;
   80526:	693b      	ldr	r3, [r7, #16]
   80528:	00db      	lsls	r3, r3, #3
   8052a:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE1;
   8052c:	687b      	ldr	r3, [r7, #4]
   8052e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   80530:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80532:	22ff      	movs	r2, #255	; 0xff
   80534:	693b      	ldr	r3, [r7, #16]
   80536:	fa02 f303 	lsl.w	r3, r2, r3
   8053a:	43db      	mvns	r3, r3
   8053c:	461a      	mov	r2, r3
   8053e:	68bb      	ldr	r3, [r7, #8]
   80540:	4013      	ands	r3, r2
   80542:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80544:	683b      	ldr	r3, [r7, #0]
   80546:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   8054a:	461a      	mov	r2, r3
   8054c:	693b      	ldr	r3, [r7, #16]
   8054e:	fa02 f303 	lsl.w	r3, r2, r3
   80552:	461a      	mov	r2, r3
   80554:	68bb      	ldr	r3, [r7, #8]
   80556:	4313      	orrs	r3, r2
   80558:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8055a:	687b      	ldr	r3, [r7, #4]
   8055c:	68ba      	ldr	r2, [r7, #8]
   8055e:	66da      	str	r2, [r3, #108]	; 0x6c
   80560:	e01f      	b.n	805a2 <pwm_channel_init+0x23a>
	} else {
		ch_num -= 4;
   80562:	693b      	ldr	r3, [r7, #16]
   80564:	3b04      	subs	r3, #4
   80566:	613b      	str	r3, [r7, #16]
		ch_num *= 8;
   80568:	693b      	ldr	r3, [r7, #16]
   8056a:	00db      	lsls	r3, r3, #3
   8056c:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE2;
   8056e:	687b      	ldr	r3, [r7, #4]
   80570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80572:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80574:	22ff      	movs	r2, #255	; 0xff
   80576:	693b      	ldr	r3, [r7, #16]
   80578:	fa02 f303 	lsl.w	r3, r2, r3
   8057c:	43db      	mvns	r3, r3
   8057e:	461a      	mov	r2, r3
   80580:	68bb      	ldr	r3, [r7, #8]
   80582:	4013      	ands	r3, r2
   80584:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80586:	683b      	ldr	r3, [r7, #0]
   80588:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   8058c:	461a      	mov	r2, r3
   8058e:	693b      	ldr	r3, [r7, #16]
   80590:	fa02 f303 	lsl.w	r3, r2, r3
   80594:	461a      	mov	r2, r3
   80596:	68bb      	ldr	r3, [r7, #8]
   80598:	4313      	orrs	r3, r2
   8059a:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	68ba      	ldr	r2, [r7, #8]
   805a0:	671a      	str	r2, [r3, #112]	; 0x70
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
   805a2:	2300      	movs	r3, #0
}
   805a4:	4618      	mov	r0, r3
   805a6:	371c      	adds	r7, #28
   805a8:	46bd      	mov	sp, r7
   805aa:	bc80      	pop	{r7}
   805ac:	4770      	bx	lr

000805ae <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   805ae:	b480      	push	{r7}
   805b0:	b087      	sub	sp, #28
   805b2:	af00      	add	r7, sp, #0
   805b4:	60f8      	str	r0, [r7, #12]
   805b6:	60b9      	str	r1, [r7, #8]
   805b8:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
   805ba:	68bb      	ldr	r3, [r7, #8]
   805bc:	681b      	ldr	r3, [r3, #0]
   805be:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   805c0:	68bb      	ldr	r3, [r7, #8]
   805c2:	691a      	ldr	r2, [r3, #16]
   805c4:	687b      	ldr	r3, [r7, #4]
   805c6:	429a      	cmp	r2, r3
   805c8:	d202      	bcs.n	805d0 <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
   805ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   805ce:	e00b      	b.n	805e8 <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   805d0:	68bb      	ldr	r3, [r7, #8]
   805d2:	687a      	ldr	r2, [r7, #4]
   805d4:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   805d6:	68fa      	ldr	r2, [r7, #12]
   805d8:	697b      	ldr	r3, [r7, #20]
   805da:	015b      	lsls	r3, r3, #5
   805dc:	4413      	add	r3, r2
   805de:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805e2:	687a      	ldr	r2, [r7, #4]
   805e4:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
   805e6:	2300      	movs	r3, #0
}
   805e8:	4618      	mov	r0, r3
   805ea:	371c      	adds	r7, #28
   805ec:	46bd      	mov	sp, r7
   805ee:	bc80      	pop	{r7}
   805f0:	4770      	bx	lr

000805f2 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
   805f2:	b480      	push	{r7}
   805f4:	b083      	sub	sp, #12
   805f6:	af00      	add	r7, sp, #0
   805f8:	6078      	str	r0, [r7, #4]
   805fa:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
   805fc:	2201      	movs	r2, #1
   805fe:	683b      	ldr	r3, [r7, #0]
   80600:	fa02 f303 	lsl.w	r3, r2, r3
   80604:	461a      	mov	r2, r3
   80606:	687b      	ldr	r3, [r7, #4]
   80608:	605a      	str	r2, [r3, #4]
}
   8060a:	bf00      	nop
   8060c:	370c      	adds	r7, #12
   8060e:	46bd      	mov	sp, r7
   80610:	bc80      	pop	{r7}
   80612:	4770      	bx	lr

00080614 <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
   80614:	b480      	push	{r7}
   80616:	b083      	sub	sp, #12
   80618:	af00      	add	r7, sp, #0
   8061a:	6078      	str	r0, [r7, #4]
   8061c:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
   8061e:	2201      	movs	r2, #1
   80620:	683b      	ldr	r3, [r7, #0]
   80622:	fa02 f303 	lsl.w	r3, r2, r3
   80626:	461a      	mov	r2, r3
   80628:	687b      	ldr	r3, [r7, #4]
   8062a:	609a      	str	r2, [r3, #8]
}
   8062c:	bf00      	nop
   8062e:	370c      	adds	r7, #12
   80630:	46bd      	mov	sp, r7
   80632:	bc80      	pop	{r7}
   80634:	4770      	bx	lr

00080636 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80636:	b480      	push	{r7}
   80638:	b087      	sub	sp, #28
   8063a:	af00      	add	r7, sp, #0
   8063c:	60f8      	str	r0, [r7, #12]
   8063e:	60b9      	str	r1, [r7, #8]
   80640:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80642:	68fa      	ldr	r2, [r7, #12]
   80644:	68bb      	ldr	r3, [r7, #8]
   80646:	019b      	lsls	r3, r3, #6
   80648:	4413      	add	r3, r2
   8064a:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8064c:	697b      	ldr	r3, [r7, #20]
   8064e:	2202      	movs	r2, #2
   80650:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80652:	697b      	ldr	r3, [r7, #20]
   80654:	f04f 32ff 	mov.w	r2, #4294967295
   80658:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   8065a:	697b      	ldr	r3, [r7, #20]
   8065c:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8065e:	697b      	ldr	r3, [r7, #20]
   80660:	687a      	ldr	r2, [r7, #4]
   80662:	605a      	str	r2, [r3, #4]
}
   80664:	bf00      	nop
   80666:	371c      	adds	r7, #28
   80668:	46bd      	mov	sp, r7
   8066a:	bc80      	pop	{r7}
   8066c:	4770      	bx	lr

0008066e <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
   8066e:	b480      	push	{r7}
   80670:	b083      	sub	sp, #12
   80672:	af00      	add	r7, sp, #0
   80674:	6078      	str	r0, [r7, #4]
   80676:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80678:	687a      	ldr	r2, [r7, #4]
   8067a:	683b      	ldr	r3, [r7, #0]
   8067c:	019b      	lsls	r3, r3, #6
   8067e:	4413      	add	r3, r2
   80680:	2205      	movs	r2, #5
   80682:	601a      	str	r2, [r3, #0]
}
   80684:	bf00      	nop
   80686:	370c      	adds	r7, #12
   80688:	46bd      	mov	sp, r7
   8068a:	bc80      	pop	{r7}
   8068c:	4770      	bx	lr

0008068e <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
   8068e:	b480      	push	{r7}
   80690:	b085      	sub	sp, #20
   80692:	af00      	add	r7, sp, #0
   80694:	60f8      	str	r0, [r7, #12]
   80696:	60b9      	str	r1, [r7, #8]
   80698:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   8069a:	68fa      	ldr	r2, [r7, #12]
   8069c:	68bb      	ldr	r3, [r7, #8]
   8069e:	019b      	lsls	r3, r3, #6
   806a0:	4413      	add	r3, r2
   806a2:	331c      	adds	r3, #28
   806a4:	687a      	ldr	r2, [r7, #4]
   806a6:	601a      	str	r2, [r3, #0]
}
   806a8:	bf00      	nop
   806aa:	3714      	adds	r7, #20
   806ac:	46bd      	mov	sp, r7
   806ae:	bc80      	pop	{r7}
   806b0:	4770      	bx	lr

000806b2 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
   806b2:	b480      	push	{r7}
   806b4:	b087      	sub	sp, #28
   806b6:	af00      	add	r7, sp, #0
   806b8:	60f8      	str	r0, [r7, #12]
   806ba:	60b9      	str	r1, [r7, #8]
   806bc:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806be:	68fa      	ldr	r2, [r7, #12]
   806c0:	68bb      	ldr	r3, [r7, #8]
   806c2:	019b      	lsls	r3, r3, #6
   806c4:	4413      	add	r3, r2
   806c6:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   806c8:	697b      	ldr	r3, [r7, #20]
   806ca:	687a      	ldr	r2, [r7, #4]
   806cc:	625a      	str	r2, [r3, #36]	; 0x24
}
   806ce:	bf00      	nop
   806d0:	371c      	adds	r7, #28
   806d2:	46bd      	mov	sp, r7
   806d4:	bc80      	pop	{r7}
   806d6:	4770      	bx	lr

000806d8 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
   806d8:	b480      	push	{r7}
   806da:	b085      	sub	sp, #20
   806dc:	af00      	add	r7, sp, #0
   806de:	6078      	str	r0, [r7, #4]
   806e0:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806e2:	687a      	ldr	r2, [r7, #4]
   806e4:	683b      	ldr	r3, [r7, #0]
   806e6:	019b      	lsls	r3, r3, #6
   806e8:	4413      	add	r3, r2
   806ea:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   806ec:	68fb      	ldr	r3, [r7, #12]
   806ee:	6a1b      	ldr	r3, [r3, #32]
}
   806f0:	4618      	mov	r0, r3
   806f2:	3714      	adds	r7, #20
   806f4:	46bd      	mov	sp, r7
   806f6:	bc80      	pop	{r7}
   806f8:	4770      	bx	lr

000806fa <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   806fa:	b480      	push	{r7}
   806fc:	b087      	sub	sp, #28
   806fe:	af00      	add	r7, sp, #0
   80700:	60f8      	str	r0, [r7, #12]
   80702:	60b9      	str	r1, [r7, #8]
   80704:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   80706:	68bb      	ldr	r3, [r7, #8]
   80708:	085a      	lsrs	r2, r3, #1
   8070a:	687b      	ldr	r3, [r7, #4]
   8070c:	441a      	add	r2, r3
   8070e:	68bb      	ldr	r3, [r7, #8]
   80710:	fbb2 f3f3 	udiv	r3, r2, r3
   80714:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   80716:	697b      	ldr	r3, [r7, #20]
   80718:	2b03      	cmp	r3, #3
   8071a:	d903      	bls.n	80724 <usart_set_spi_master_baudrate+0x2a>
   8071c:	697b      	ldr	r3, [r7, #20]
   8071e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   80722:	d301      	bcc.n	80728 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   80724:	2301      	movs	r3, #1
   80726:	e003      	b.n	80730 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   80728:	68fb      	ldr	r3, [r7, #12]
   8072a:	697a      	ldr	r2, [r7, #20]
   8072c:	621a      	str	r2, [r3, #32]

	return 0;
   8072e:	2300      	movs	r3, #0
}
   80730:	4618      	mov	r0, r3
   80732:	371c      	adds	r7, #28
   80734:	46bd      	mov	sp, r7
   80736:	bc80      	pop	{r7}
   80738:	4770      	bx	lr
	...

0008073c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8073c:	b580      	push	{r7, lr}
   8073e:	b082      	sub	sp, #8
   80740:	af00      	add	r7, sp, #0
   80742:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   80744:	6878      	ldr	r0, [r7, #4]
   80746:	4b0d      	ldr	r3, [pc, #52]	; (8077c <usart_reset+0x40>)
   80748:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8074a:	687b      	ldr	r3, [r7, #4]
   8074c:	2200      	movs	r2, #0
   8074e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   80750:	687b      	ldr	r3, [r7, #4]
   80752:	2200      	movs	r2, #0
   80754:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80756:	687b      	ldr	r3, [r7, #4]
   80758:	2200      	movs	r2, #0
   8075a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8075c:	6878      	ldr	r0, [r7, #4]
   8075e:	4b08      	ldr	r3, [pc, #32]	; (80780 <usart_reset+0x44>)
   80760:	4798      	blx	r3
	usart_reset_rx(p_usart);
   80762:	6878      	ldr	r0, [r7, #4]
   80764:	4b07      	ldr	r3, [pc, #28]	; (80784 <usart_reset+0x48>)
   80766:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   80768:	6878      	ldr	r0, [r7, #4]
   8076a:	4b07      	ldr	r3, [pc, #28]	; (80788 <usart_reset+0x4c>)
   8076c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8076e:	6878      	ldr	r0, [r7, #4]
   80770:	4b06      	ldr	r3, [pc, #24]	; (8078c <usart_reset+0x50>)
   80772:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   80774:	bf00      	nop
   80776:	3708      	adds	r7, #8
   80778:	46bd      	mov	sp, r7
   8077a:	bd80      	pop	{r7, pc}
   8077c:	00080999 	.word	0x00080999
   80780:	000808d1 	.word	0x000808d1
   80784:	00080919 	.word	0x00080919
   80788:	00080931 	.word	0x00080931
   8078c:	0008094b 	.word	0x0008094b

00080790 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   80790:	b580      	push	{r7, lr}
   80792:	b084      	sub	sp, #16
   80794:	af00      	add	r7, sp, #0
   80796:	60f8      	str	r0, [r7, #12]
   80798:	60b9      	str	r1, [r7, #8]
   8079a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   8079c:	68f8      	ldr	r0, [r7, #12]
   8079e:	4b3d      	ldr	r3, [pc, #244]	; (80894 <usart_init_spi_master+0x104>)
   807a0:	4798      	blx	r3

	ul_reg_val = 0;
   807a2:	4b3d      	ldr	r3, [pc, #244]	; (80898 <usart_init_spi_master+0x108>)
   807a4:	2200      	movs	r2, #0
   807a6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   807a8:	68bb      	ldr	r3, [r7, #8]
   807aa:	2b00      	cmp	r3, #0
   807ac:	d00d      	beq.n	807ca <usart_init_spi_master+0x3a>
   807ae:	68bb      	ldr	r3, [r7, #8]
   807b0:	689b      	ldr	r3, [r3, #8]
   807b2:	2b03      	cmp	r3, #3
   807b4:	d809      	bhi.n	807ca <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   807b6:	68bb      	ldr	r3, [r7, #8]
   807b8:	681b      	ldr	r3, [r3, #0]
   807ba:	687a      	ldr	r2, [r7, #4]
   807bc:	4619      	mov	r1, r3
   807be:	68f8      	ldr	r0, [r7, #12]
   807c0:	4b36      	ldr	r3, [pc, #216]	; (8089c <usart_init_spi_master+0x10c>)
   807c2:	4798      	blx	r3
   807c4:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   807c6:	2b00      	cmp	r3, #0
   807c8:	d001      	beq.n	807ce <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   807ca:	2301      	movs	r3, #1
   807cc:	e05d      	b.n	8088a <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   807ce:	68bb      	ldr	r3, [r7, #8]
   807d0:	685a      	ldr	r2, [r3, #4]
   807d2:	4b31      	ldr	r3, [pc, #196]	; (80898 <usart_init_spi_master+0x108>)
   807d4:	681b      	ldr	r3, [r3, #0]
   807d6:	4313      	orrs	r3, r2
   807d8:	4a2f      	ldr	r2, [pc, #188]	; (80898 <usart_init_spi_master+0x108>)
   807da:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   807dc:	68bb      	ldr	r3, [r7, #8]
   807de:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   807e0:	4b2d      	ldr	r3, [pc, #180]	; (80898 <usart_init_spi_master+0x108>)
   807e2:	681b      	ldr	r3, [r3, #0]
   807e4:	4313      	orrs	r3, r2
   807e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   807ea:	f043 030e 	orr.w	r3, r3, #14
   807ee:	4a2a      	ldr	r2, [pc, #168]	; (80898 <usart_init_spi_master+0x108>)
   807f0:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   807f2:	68bb      	ldr	r3, [r7, #8]
   807f4:	689b      	ldr	r3, [r3, #8]
   807f6:	2b03      	cmp	r3, #3
   807f8:	d83e      	bhi.n	80878 <usart_init_spi_master+0xe8>
   807fa:	a201      	add	r2, pc, #4	; (adr r2, 80800 <usart_init_spi_master+0x70>)
   807fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80800:	00080811 	.word	0x00080811
   80804:	0008082b 	.word	0x0008082b
   80808:	00080845 	.word	0x00080845
   8080c:	0008085f 	.word	0x0008085f
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   80810:	4b21      	ldr	r3, [pc, #132]	; (80898 <usart_init_spi_master+0x108>)
   80812:	681b      	ldr	r3, [r3, #0]
   80814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80818:	4a1f      	ldr	r2, [pc, #124]	; (80898 <usart_init_spi_master+0x108>)
   8081a:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8081c:	4b1e      	ldr	r3, [pc, #120]	; (80898 <usart_init_spi_master+0x108>)
   8081e:	681b      	ldr	r3, [r3, #0]
   80820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80824:	4a1c      	ldr	r2, [pc, #112]	; (80898 <usart_init_spi_master+0x108>)
   80826:	6013      	str	r3, [r2, #0]
		break;
   80828:	e027      	b.n	8087a <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8082a:	4b1b      	ldr	r3, [pc, #108]	; (80898 <usart_init_spi_master+0x108>)
   8082c:	681b      	ldr	r3, [r3, #0]
   8082e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80832:	4a19      	ldr	r2, [pc, #100]	; (80898 <usart_init_spi_master+0x108>)
   80834:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   80836:	4b18      	ldr	r3, [pc, #96]	; (80898 <usart_init_spi_master+0x108>)
   80838:	681b      	ldr	r3, [r3, #0]
   8083a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8083e:	4a16      	ldr	r2, [pc, #88]	; (80898 <usart_init_spi_master+0x108>)
   80840:	6013      	str	r3, [r2, #0]
		break;
   80842:	e01a      	b.n	8087a <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   80844:	4b14      	ldr	r3, [pc, #80]	; (80898 <usart_init_spi_master+0x108>)
   80846:	681b      	ldr	r3, [r3, #0]
   80848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8084c:	4a12      	ldr	r2, [pc, #72]	; (80898 <usart_init_spi_master+0x108>)
   8084e:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   80850:	4b11      	ldr	r3, [pc, #68]	; (80898 <usart_init_spi_master+0x108>)
   80852:	681b      	ldr	r3, [r3, #0]
   80854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80858:	4a0f      	ldr	r2, [pc, #60]	; (80898 <usart_init_spi_master+0x108>)
   8085a:	6013      	str	r3, [r2, #0]
		break;
   8085c:	e00d      	b.n	8087a <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8085e:	4b0e      	ldr	r3, [pc, #56]	; (80898 <usart_init_spi_master+0x108>)
   80860:	681b      	ldr	r3, [r3, #0]
   80862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80866:	4a0c      	ldr	r2, [pc, #48]	; (80898 <usart_init_spi_master+0x108>)
   80868:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8086a:	4b0b      	ldr	r3, [pc, #44]	; (80898 <usart_init_spi_master+0x108>)
   8086c:	681b      	ldr	r3, [r3, #0]
   8086e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80872:	4a09      	ldr	r2, [pc, #36]	; (80898 <usart_init_spi_master+0x108>)
   80874:	6013      	str	r3, [r2, #0]
		break;
   80876:	e000      	b.n	8087a <usart_init_spi_master+0xea>

	default:
		break;
   80878:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   8087a:	68fb      	ldr	r3, [r7, #12]
   8087c:	685a      	ldr	r2, [r3, #4]
   8087e:	4b06      	ldr	r3, [pc, #24]	; (80898 <usart_init_spi_master+0x108>)
   80880:	681b      	ldr	r3, [r3, #0]
   80882:	431a      	orrs	r2, r3
   80884:	68fb      	ldr	r3, [r7, #12]
   80886:	605a      	str	r2, [r3, #4]

	return 0;
   80888:	2300      	movs	r3, #0
}
   8088a:	4618      	mov	r0, r3
   8088c:	3710      	adds	r7, #16
   8088e:	46bd      	mov	sp, r7
   80890:	bd80      	pop	{r7, pc}
   80892:	bf00      	nop
   80894:	0008073d 	.word	0x0008073d
   80898:	20070b6c 	.word	0x20070b6c
   8089c:	000806fb 	.word	0x000806fb

000808a0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   808a0:	b480      	push	{r7}
   808a2:	b083      	sub	sp, #12
   808a4:	af00      	add	r7, sp, #0
   808a6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   808a8:	687b      	ldr	r3, [r7, #4]
   808aa:	2240      	movs	r2, #64	; 0x40
   808ac:	601a      	str	r2, [r3, #0]
}
   808ae:	bf00      	nop
   808b0:	370c      	adds	r7, #12
   808b2:	46bd      	mov	sp, r7
   808b4:	bc80      	pop	{r7}
   808b6:	4770      	bx	lr

000808b8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   808b8:	b480      	push	{r7}
   808ba:	b083      	sub	sp, #12
   808bc:	af00      	add	r7, sp, #0
   808be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   808c0:	687b      	ldr	r3, [r7, #4]
   808c2:	2280      	movs	r2, #128	; 0x80
   808c4:	601a      	str	r2, [r3, #0]
}
   808c6:	bf00      	nop
   808c8:	370c      	adds	r7, #12
   808ca:	46bd      	mov	sp, r7
   808cc:	bc80      	pop	{r7}
   808ce:	4770      	bx	lr

000808d0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   808d0:	b480      	push	{r7}
   808d2:	b083      	sub	sp, #12
   808d4:	af00      	add	r7, sp, #0
   808d6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   808d8:	687b      	ldr	r3, [r7, #4]
   808da:	2288      	movs	r2, #136	; 0x88
   808dc:	601a      	str	r2, [r3, #0]
}
   808de:	bf00      	nop
   808e0:	370c      	adds	r7, #12
   808e2:	46bd      	mov	sp, r7
   808e4:	bc80      	pop	{r7}
   808e6:	4770      	bx	lr

000808e8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   808e8:	b480      	push	{r7}
   808ea:	b083      	sub	sp, #12
   808ec:	af00      	add	r7, sp, #0
   808ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   808f0:	687b      	ldr	r3, [r7, #4]
   808f2:	2210      	movs	r2, #16
   808f4:	601a      	str	r2, [r3, #0]
}
   808f6:	bf00      	nop
   808f8:	370c      	adds	r7, #12
   808fa:	46bd      	mov	sp, r7
   808fc:	bc80      	pop	{r7}
   808fe:	4770      	bx	lr

00080900 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   80900:	b480      	push	{r7}
   80902:	b083      	sub	sp, #12
   80904:	af00      	add	r7, sp, #0
   80906:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   80908:	687b      	ldr	r3, [r7, #4]
   8090a:	2220      	movs	r2, #32
   8090c:	601a      	str	r2, [r3, #0]
}
   8090e:	bf00      	nop
   80910:	370c      	adds	r7, #12
   80912:	46bd      	mov	sp, r7
   80914:	bc80      	pop	{r7}
   80916:	4770      	bx	lr

00080918 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   80918:	b480      	push	{r7}
   8091a:	b083      	sub	sp, #12
   8091c:	af00      	add	r7, sp, #0
   8091e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80920:	687b      	ldr	r3, [r7, #4]
   80922:	2224      	movs	r2, #36	; 0x24
   80924:	601a      	str	r2, [r3, #0]
}
   80926:	bf00      	nop
   80928:	370c      	adds	r7, #12
   8092a:	46bd      	mov	sp, r7
   8092c:	bc80      	pop	{r7}
   8092e:	4770      	bx	lr

00080930 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   80930:	b480      	push	{r7}
   80932:	b083      	sub	sp, #12
   80934:	af00      	add	r7, sp, #0
   80936:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   80938:	687b      	ldr	r3, [r7, #4]
   8093a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8093e:	601a      	str	r2, [r3, #0]
}
   80940:	bf00      	nop
   80942:	370c      	adds	r7, #12
   80944:	46bd      	mov	sp, r7
   80946:	bc80      	pop	{r7}
   80948:	4770      	bx	lr

0008094a <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   8094a:	b480      	push	{r7}
   8094c:	b083      	sub	sp, #12
   8094e:	af00      	add	r7, sp, #0
   80950:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   80952:	687b      	ldr	r3, [r7, #4]
   80954:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80958:	601a      	str	r2, [r3, #0]
}
   8095a:	bf00      	nop
   8095c:	370c      	adds	r7, #12
   8095e:	46bd      	mov	sp, r7
   80960:	bc80      	pop	{r7}
   80962:	4770      	bx	lr

00080964 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
   80964:	b480      	push	{r7}
   80966:	b083      	sub	sp, #12
   80968:	af00      	add	r7, sp, #0
   8096a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
   8096c:	687b      	ldr	r3, [r7, #4]
   8096e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   80972:	601a      	str	r2, [r3, #0]
}
   80974:	bf00      	nop
   80976:	370c      	adds	r7, #12
   80978:	46bd      	mov	sp, r7
   8097a:	bc80      	pop	{r7}
   8097c:	4770      	bx	lr

0008097e <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   8097e:	b480      	push	{r7}
   80980:	b083      	sub	sp, #12
   80982:	af00      	add	r7, sp, #0
   80984:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   80986:	687b      	ldr	r3, [r7, #4]
   80988:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8098c:	601a      	str	r2, [r3, #0]
}
   8098e:	bf00      	nop
   80990:	370c      	adds	r7, #12
   80992:	46bd      	mov	sp, r7
   80994:	bc80      	pop	{r7}
   80996:	4770      	bx	lr

00080998 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   80998:	b480      	push	{r7}
   8099a:	b083      	sub	sp, #12
   8099c:	af00      	add	r7, sp, #0
   8099e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   809a0:	687b      	ldr	r3, [r7, #4]
   809a2:	4a04      	ldr	r2, [pc, #16]	; (809b4 <usart_disable_writeprotect+0x1c>)
   809a4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   809a8:	bf00      	nop
   809aa:	370c      	adds	r7, #12
   809ac:	46bd      	mov	sp, r7
   809ae:	bc80      	pop	{r7}
   809b0:	4770      	bx	lr
   809b2:	bf00      	nop
   809b4:	55534100 	.word	0x55534100

000809b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   809b8:	b480      	push	{r7}
   809ba:	b083      	sub	sp, #12
   809bc:	af00      	add	r7, sp, #0
   809be:	4603      	mov	r3, r0
   809c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   809c2:	4908      	ldr	r1, [pc, #32]	; (809e4 <NVIC_EnableIRQ+0x2c>)
   809c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   809c8:	095b      	lsrs	r3, r3, #5
   809ca:	79fa      	ldrb	r2, [r7, #7]
   809cc:	f002 021f 	and.w	r2, r2, #31
   809d0:	2001      	movs	r0, #1
   809d2:	fa00 f202 	lsl.w	r2, r0, r2
   809d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   809da:	bf00      	nop
   809dc:	370c      	adds	r7, #12
   809de:	46bd      	mov	sp, r7
   809e0:	bc80      	pop	{r7}
   809e2:	4770      	bx	lr
   809e4:	e000e100 	.word	0xe000e100

000809e8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   809e8:	b480      	push	{r7}
   809ea:	b083      	sub	sp, #12
   809ec:	af00      	add	r7, sp, #0
   809ee:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   809f0:	687b      	ldr	r3, [r7, #4]
   809f2:	2b07      	cmp	r3, #7
   809f4:	d825      	bhi.n	80a42 <osc_get_rate+0x5a>
   809f6:	a201      	add	r2, pc, #4	; (adr r2, 809fc <osc_get_rate+0x14>)
   809f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   809fc:	00080a1d 	.word	0x00080a1d
   80a00:	00080a23 	.word	0x00080a23
   80a04:	00080a29 	.word	0x00080a29
   80a08:	00080a2f 	.word	0x00080a2f
   80a0c:	00080a33 	.word	0x00080a33
   80a10:	00080a37 	.word	0x00080a37
   80a14:	00080a3b 	.word	0x00080a3b
   80a18:	00080a3f 	.word	0x00080a3f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80a1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80a20:	e010      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80a26:	e00d      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80a2c:	e00a      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80a2e:	4b08      	ldr	r3, [pc, #32]	; (80a50 <osc_get_rate+0x68>)
   80a30:	e008      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80a32:	4b08      	ldr	r3, [pc, #32]	; (80a54 <osc_get_rate+0x6c>)
   80a34:	e006      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80a36:	4b08      	ldr	r3, [pc, #32]	; (80a58 <osc_get_rate+0x70>)
   80a38:	e004      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80a3a:	4b07      	ldr	r3, [pc, #28]	; (80a58 <osc_get_rate+0x70>)
   80a3c:	e002      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80a3e:	4b06      	ldr	r3, [pc, #24]	; (80a58 <osc_get_rate+0x70>)
   80a40:	e000      	b.n	80a44 <osc_get_rate+0x5c>
	}

	return 0;
   80a42:	2300      	movs	r3, #0
}
   80a44:	4618      	mov	r0, r3
   80a46:	370c      	adds	r7, #12
   80a48:	46bd      	mov	sp, r7
   80a4a:	bc80      	pop	{r7}
   80a4c:	4770      	bx	lr
   80a4e:	bf00      	nop
   80a50:	003d0900 	.word	0x003d0900
   80a54:	007a1200 	.word	0x007a1200
   80a58:	00b71b00 	.word	0x00b71b00

00080a5c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80a5c:	b580      	push	{r7, lr}
   80a5e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80a60:	2006      	movs	r0, #6
   80a62:	4b04      	ldr	r3, [pc, #16]	; (80a74 <sysclk_get_main_hz+0x18>)
   80a64:	4798      	blx	r3
   80a66:	4602      	mov	r2, r0
   80a68:	4613      	mov	r3, r2
   80a6a:	00db      	lsls	r3, r3, #3
   80a6c:	1a9b      	subs	r3, r3, r2
   80a6e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80a70:	4618      	mov	r0, r3
   80a72:	bd80      	pop	{r7, pc}
   80a74:	000809e9 	.word	0x000809e9

00080a78 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   80a78:	b580      	push	{r7, lr}
   80a7a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80a7c:	4b02      	ldr	r3, [pc, #8]	; (80a88 <sysclk_get_peripheral_hz+0x10>)
   80a7e:	4798      	blx	r3
   80a80:	4603      	mov	r3, r0
   80a82:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80a84:	4618      	mov	r0, r3
   80a86:	bd80      	pop	{r7, pc}
   80a88:	00080a5d 	.word	0x00080a5d

00080a8c <spi_init>:
sensor_to_motor_t stm;

uint8_t sens_buf[sizeof(stm)];

void spi_init(void)
{
   80a8c:	b580      	push	{r7, lr}
   80a8e:	af00      	add	r7, sp, #0
    configure_dmac();
   80a90:	4b02      	ldr	r3, [pc, #8]	; (80a9c <spi_init+0x10>)
   80a92:	4798      	blx	r3
    spi_master_initialize();
   80a94:	4b02      	ldr	r3, [pc, #8]	; (80aa0 <spi_init+0x14>)
   80a96:	4798      	blx	r3
}
   80a98:	bf00      	nop
   80a9a:	bd80      	pop	{r7, pc}
   80a9c:	00080bb9 	.word	0x00080bb9
   80aa0:	00080aa5 	.word	0x00080aa5

00080aa4 <spi_master_initialize>:

void spi_master_initialize(void)
{
   80aa4:	b590      	push	{r4, r7, lr}
   80aa6:	b085      	sub	sp, #20
   80aa8:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   80aaa:	2101      	movs	r1, #1
   80aac:	4810      	ldr	r0, [pc, #64]	; (80af0 <spi_master_initialize+0x4c>)
   80aae:	4b11      	ldr	r3, [pc, #68]	; (80af4 <spi_master_initialize+0x50>)
   80ab0:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   80ab2:	2100      	movs	r1, #0
   80ab4:	480e      	ldr	r0, [pc, #56]	; (80af0 <spi_master_initialize+0x4c>)
   80ab6:	4b0f      	ldr	r3, [pc, #60]	; (80af4 <spi_master_initialize+0x50>)
   80ab8:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   80aba:	2012      	movs	r0, #18
   80abc:	4b0e      	ldr	r3, [pc, #56]	; (80af8 <spi_master_initialize+0x54>)
   80abe:	4798      	blx	r3
    usart_spi_disable(USART1);
   80ac0:	480e      	ldr	r0, [pc, #56]	; (80afc <spi_master_initialize+0x58>)
   80ac2:	4b0f      	ldr	r3, [pc, #60]	; (80b00 <spi_master_initialize+0x5c>)
   80ac4:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   80ac6:	4b0f      	ldr	r3, [pc, #60]	; (80b04 <spi_master_initialize+0x60>)
   80ac8:	463c      	mov	r4, r7
   80aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   80acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   80ad0:	4b0d      	ldr	r3, [pc, #52]	; (80b08 <spi_master_initialize+0x64>)
   80ad2:	4798      	blx	r3
   80ad4:	4602      	mov	r2, r0
   80ad6:	463b      	mov	r3, r7
   80ad8:	4619      	mov	r1, r3
   80ada:	4808      	ldr	r0, [pc, #32]	; (80afc <spi_master_initialize+0x58>)
   80adc:	4b0b      	ldr	r3, [pc, #44]	; (80b0c <spi_master_initialize+0x68>)
   80ade:	4798      	blx	r3
    usart_spi_enable(USART1);
   80ae0:	4806      	ldr	r0, [pc, #24]	; (80afc <spi_master_initialize+0x58>)
   80ae2:	4b0b      	ldr	r3, [pc, #44]	; (80b10 <spi_master_initialize+0x6c>)
   80ae4:	4798      	blx	r3
}
   80ae6:	bf00      	nop
   80ae8:	3714      	adds	r7, #20
   80aea:	46bd      	mov	sp, r7
   80aec:	bd90      	pop	{r4, r7, pc}
   80aee:	bf00      	nop
   80af0:	400c4000 	.word	0x400c4000
   80af4:	000836a7 	.word	0x000836a7
   80af8:	00083a65 	.word	0x00083a65
   80afc:	4009c000 	.word	0x4009c000
   80b00:	00080185 	.word	0x00080185
   80b04:	0008970c 	.word	0x0008970c
   80b08:	00080a79 	.word	0x00080a79
   80b0c:	00080791 	.word	0x00080791
   80b10:	00080161 	.word	0x00080161

00080b14 <spi_master_transfer>:

void spi_master_transfer(void *p_buf, uint32_t ul_size)
{
   80b14:	b580      	push	{r7, lr}
   80b16:	b088      	sub	sp, #32
   80b18:	af00      	add	r7, sp, #0
   80b1a:	6078      	str	r0, [r7, #4]
   80b1c:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    usart_spi_force_chip_select(USART1);
   80b1e:	481c      	ldr	r0, [pc, #112]	; (80b90 <spi_master_transfer+0x7c>)
   80b20:	4b1c      	ldr	r3, [pc, #112]	; (80b94 <spi_master_transfer+0x80>)
   80b22:	4798      	blx	r3

    dmac_channel_disable(DMAC, 1);
   80b24:	2101      	movs	r1, #1
   80b26:	481c      	ldr	r0, [pc, #112]	; (80b98 <spi_master_transfer+0x84>)
   80b28:	4b1c      	ldr	r3, [pc, #112]	; (80b9c <spi_master_transfer+0x88>)
   80b2a:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   80b2c:	687b      	ldr	r3, [r7, #4]
   80b2e:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & USART1->US_THR;
   80b30:	4b1b      	ldr	r3, [pc, #108]	; (80ba0 <spi_master_transfer+0x8c>)
   80b32:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80b34:	683b      	ldr	r3, [r7, #0]
   80b36:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80b38:	4b1a      	ldr	r3, [pc, #104]	; (80ba4 <spi_master_transfer+0x90>)
   80b3a:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80b3c:	2300      	movs	r3, #0
   80b3e:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   80b40:	f107 030c 	add.w	r3, r7, #12
   80b44:	461a      	mov	r2, r3
   80b46:	2101      	movs	r1, #1
   80b48:	4813      	ldr	r0, [pc, #76]	; (80b98 <spi_master_transfer+0x84>)
   80b4a:	4b17      	ldr	r3, [pc, #92]	; (80ba8 <spi_master_transfer+0x94>)
   80b4c:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   80b4e:	2101      	movs	r1, #1
   80b50:	4811      	ldr	r0, [pc, #68]	; (80b98 <spi_master_transfer+0x84>)
   80b52:	4b16      	ldr	r3, [pc, #88]	; (80bac <spi_master_transfer+0x98>)
   80b54:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   80b56:	2100      	movs	r1, #0
   80b58:	480f      	ldr	r0, [pc, #60]	; (80b98 <spi_master_transfer+0x84>)
   80b5a:	4b10      	ldr	r3, [pc, #64]	; (80b9c <spi_master_transfer+0x88>)
   80b5c:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & USART1->US_RHR;
   80b5e:	4b14      	ldr	r3, [pc, #80]	; (80bb0 <spi_master_transfer+0x9c>)
   80b60:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80b62:	687b      	ldr	r3, [r7, #4]
   80b64:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80b66:	683b      	ldr	r3, [r7, #0]
   80b68:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   80b6a:	4b12      	ldr	r3, [pc, #72]	; (80bb4 <spi_master_transfer+0xa0>)
   80b6c:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80b6e:	2300      	movs	r3, #0
   80b70:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   80b72:	f107 030c 	add.w	r3, r7, #12
   80b76:	461a      	mov	r2, r3
   80b78:	2100      	movs	r1, #0
   80b7a:	4807      	ldr	r0, [pc, #28]	; (80b98 <spi_master_transfer+0x84>)
   80b7c:	4b0a      	ldr	r3, [pc, #40]	; (80ba8 <spi_master_transfer+0x94>)
   80b7e:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   80b80:	2100      	movs	r1, #0
   80b82:	4805      	ldr	r0, [pc, #20]	; (80b98 <spi_master_transfer+0x84>)
   80b84:	4b09      	ldr	r3, [pc, #36]	; (80bac <spi_master_transfer+0x98>)
   80b86:	4798      	blx	r3
}
   80b88:	bf00      	nop
   80b8a:	3720      	adds	r7, #32
   80b8c:	46bd      	mov	sp, r7
   80b8e:	bd80      	pop	{r7, pc}
   80b90:	4009c000 	.word	0x4009c000
   80b94:	00080965 	.word	0x00080965
   80b98:	400c4000 	.word	0x400c4000
   80b9c:	000836a7 	.word	0x000836a7
   80ba0:	4009c01c 	.word	0x4009c01c
   80ba4:	20310000 	.word	0x20310000
   80ba8:	000837c1 	.word	0x000837c1
   80bac:	00083689 	.word	0x00083689
   80bb0:	4009c018 	.word	0x4009c018
   80bb4:	02510000 	.word	0x02510000

00080bb8 <configure_dmac>:

void configure_dmac(void)
{
   80bb8:	b580      	push	{r7, lr}
   80bba:	b082      	sub	sp, #8
   80bbc:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   80bbe:	2027      	movs	r0, #39	; 0x27
   80bc0:	4b18      	ldr	r3, [pc, #96]	; (80c24 <configure_dmac+0x6c>)
   80bc2:	4798      	blx	r3
    dmac_init(DMAC);
   80bc4:	4818      	ldr	r0, [pc, #96]	; (80c28 <configure_dmac+0x70>)
   80bc6:	4b19      	ldr	r3, [pc, #100]	; (80c2c <configure_dmac+0x74>)
   80bc8:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   80bca:	2110      	movs	r1, #16
   80bcc:	4816      	ldr	r0, [pc, #88]	; (80c28 <configure_dmac+0x70>)
   80bce:	4b18      	ldr	r3, [pc, #96]	; (80c30 <configure_dmac+0x78>)
   80bd0:	4798      	blx	r3
    dmac_enable(DMAC);
   80bd2:	4815      	ldr	r0, [pc, #84]	; (80c28 <configure_dmac+0x70>)
   80bd4:	4b17      	ldr	r3, [pc, #92]	; (80c34 <configure_dmac+0x7c>)
   80bd6:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80bd8:	2300      	movs	r3, #0
   80bda:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80bdc:	687b      	ldr	r3, [r7, #4]
   80bde:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80be2:	f043 030e 	orr.w	r3, r3, #14
   80be6:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   80be8:	687a      	ldr	r2, [r7, #4]
   80bea:	2100      	movs	r1, #0
   80bec:	480e      	ldr	r0, [pc, #56]	; (80c28 <configure_dmac+0x70>)
   80bee:	4b12      	ldr	r3, [pc, #72]	; (80c38 <configure_dmac+0x80>)
   80bf0:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80bf2:	2300      	movs	r3, #0
   80bf4:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80bf6:	687b      	ldr	r3, [r7, #4]
   80bf8:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   80bfc:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   80c00:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   80c02:	687a      	ldr	r2, [r7, #4]
   80c04:	2101      	movs	r1, #1
   80c06:	4808      	ldr	r0, [pc, #32]	; (80c28 <configure_dmac+0x70>)
   80c08:	4b0b      	ldr	r3, [pc, #44]	; (80c38 <configure_dmac+0x80>)
   80c0a:	4798      	blx	r3
    ul_cfg = 0;
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
    #endif
    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   80c0c:	2027      	movs	r0, #39	; 0x27
   80c0e:	4b0b      	ldr	r3, [pc, #44]	; (80c3c <configure_dmac+0x84>)
   80c10:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   80c12:	2101      	movs	r1, #1
   80c14:	4804      	ldr	r0, [pc, #16]	; (80c28 <configure_dmac+0x70>)
   80c16:	4b0a      	ldr	r3, [pc, #40]	; (80c40 <configure_dmac+0x88>)
   80c18:	4798      	blx	r3
}
   80c1a:	bf00      	nop
   80c1c:	3708      	adds	r7, #8
   80c1e:	46bd      	mov	sp, r7
   80c20:	bd80      	pop	{r7, pc}
   80c22:	bf00      	nop
   80c24:	00083a65 	.word	0x00083a65
   80c28:	400c4000 	.word	0x400c4000
   80c2c:	000835e1 	.word	0x000835e1
   80c30:	000835fd 	.word	0x000835fd
   80c34:	00083623 	.word	0x00083623
   80c38:	00083797 	.word	0x00083797
   80c3c:	000809b9 	.word	0x000809b9
   80c40:	00083659 	.word	0x00083659

00080c44 <DMAC_Handler>:

void DMAC_Handler(void)
{
   80c44:	b580      	push	{r7, lr}
   80c46:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   80c48:	480a      	ldr	r0, [pc, #40]	; (80c74 <DMAC_Handler+0x30>)
   80c4a:	4b0b      	ldr	r3, [pc, #44]	; (80c78 <DMAC_Handler+0x34>)
   80c4c:	4798      	blx	r3
   80c4e:	4602      	mov	r2, r0
   80c50:	4b0a      	ldr	r3, [pc, #40]	; (80c7c <DMAC_Handler+0x38>)
   80c52:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   80c54:	4b09      	ldr	r3, [pc, #36]	; (80c7c <DMAC_Handler+0x38>)
   80c56:	681b      	ldr	r3, [r3, #0]
   80c58:	f003 0301 	and.w	r3, r3, #1
   80c5c:	2b00      	cmp	r3, #0
   80c5e:	d007      	beq.n	80c70 <DMAC_Handler+0x2c>
    {
        usart_spi_release_chip_select(USART1);
   80c60:	4807      	ldr	r0, [pc, #28]	; (80c80 <DMAC_Handler+0x3c>)
   80c62:	4b08      	ldr	r3, [pc, #32]	; (80c84 <DMAC_Handler+0x40>)
   80c64:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   80c66:	2210      	movs	r2, #16
   80c68:	4907      	ldr	r1, [pc, #28]	; (80c88 <DMAC_Handler+0x44>)
   80c6a:	4808      	ldr	r0, [pc, #32]	; (80c8c <DMAC_Handler+0x48>)
   80c6c:	4b08      	ldr	r3, [pc, #32]	; (80c90 <DMAC_Handler+0x4c>)
   80c6e:	4798      	blx	r3
    }
}
   80c70:	bf00      	nop
   80c72:	bd80      	pop	{r7, pc}
   80c74:	400c4000 	.word	0x400c4000
   80c78:	00083673 	.word	0x00083673
   80c7c:	20070b70 	.word	0x20070b70
   80c80:	4009c000 	.word	0x4009c000
   80c84:	0008097f 	.word	0x0008097f
   80c88:	20070e08 	.word	0x20070e08
   80c8c:	20070e20 	.word	0x20070e20
   80c90:	00085625 	.word	0x00085625

00080c94 <NVIC_EnableIRQ>:
{
   80c94:	b480      	push	{r7}
   80c96:	b083      	sub	sp, #12
   80c98:	af00      	add	r7, sp, #0
   80c9a:	4603      	mov	r3, r0
   80c9c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80c9e:	4908      	ldr	r1, [pc, #32]	; (80cc0 <NVIC_EnableIRQ+0x2c>)
   80ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80ca4:	095b      	lsrs	r3, r3, #5
   80ca6:	79fa      	ldrb	r2, [r7, #7]
   80ca8:	f002 021f 	and.w	r2, r2, #31
   80cac:	2001      	movs	r0, #1
   80cae:	fa00 f202 	lsl.w	r2, r0, r2
   80cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80cb6:	bf00      	nop
   80cb8:	370c      	adds	r7, #12
   80cba:	46bd      	mov	sp, r7
   80cbc:	bc80      	pop	{r7}
   80cbe:	4770      	bx	lr
   80cc0:	e000e100 	.word	0xe000e100

00080cc4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80cc4:	b480      	push	{r7}
   80cc6:	b083      	sub	sp, #12
   80cc8:	af00      	add	r7, sp, #0
   80cca:	4603      	mov	r3, r0
   80ccc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80cce:	4909      	ldr	r1, [pc, #36]	; (80cf4 <NVIC_ClearPendingIRQ+0x30>)
   80cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80cd4:	095b      	lsrs	r3, r3, #5
   80cd6:	79fa      	ldrb	r2, [r7, #7]
   80cd8:	f002 021f 	and.w	r2, r2, #31
   80cdc:	2001      	movs	r0, #1
   80cde:	fa00 f202 	lsl.w	r2, r0, r2
   80ce2:	3360      	adds	r3, #96	; 0x60
   80ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80ce8:	bf00      	nop
   80cea:	370c      	adds	r7, #12
   80cec:	46bd      	mov	sp, r7
   80cee:	bc80      	pop	{r7}
   80cf0:	4770      	bx	lr
   80cf2:	bf00      	nop
   80cf4:	e000e100 	.word	0xe000e100

00080cf8 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80cf8:	b480      	push	{r7}
   80cfa:	b083      	sub	sp, #12
   80cfc:	af00      	add	r7, sp, #0
   80cfe:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80d00:	687b      	ldr	r3, [r7, #4]
   80d02:	2208      	movs	r2, #8
   80d04:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80d06:	687b      	ldr	r3, [r7, #4]
   80d08:	2220      	movs	r2, #32
   80d0a:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80d0c:	687b      	ldr	r3, [r7, #4]
   80d0e:	2204      	movs	r2, #4
   80d10:	601a      	str	r2, [r3, #0]
}
   80d12:	bf00      	nop
   80d14:	370c      	adds	r7, #12
   80d16:	46bd      	mov	sp, r7
   80d18:	bc80      	pop	{r7}
   80d1a:	4770      	bx	lr

00080d1c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80d1c:	b580      	push	{r7, lr}
   80d1e:	b084      	sub	sp, #16
   80d20:	af00      	add	r7, sp, #0
   80d22:	6078      	str	r0, [r7, #4]
   80d24:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80d26:	2300      	movs	r3, #0
   80d28:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80d2a:	687b      	ldr	r3, [r7, #4]
   80d2c:	f04f 32ff 	mov.w	r2, #4294967295
   80d30:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   80d32:	687b      	ldr	r3, [r7, #4]
   80d34:	6a1b      	ldr	r3, [r3, #32]

	twi_disable_interrupt(p_twi, MASK_ALL_INTERRUPTS);
   80d36:	f04f 31ff 	mov.w	r1, #4294967295
   80d3a:	6878      	ldr	r0, [r7, #4]
   80d3c:	4b14      	ldr	r3, [pc, #80]	; (80d90 <twi_master_init+0x74>)
   80d3e:	4798      	blx	r3

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80d40:	6878      	ldr	r0, [r7, #4]
   80d42:	4b14      	ldr	r3, [pc, #80]	; (80d94 <twi_master_init+0x78>)
   80d44:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80d46:	6878      	ldr	r0, [r7, #4]
   80d48:	4b13      	ldr	r3, [pc, #76]	; (80d98 <twi_master_init+0x7c>)
   80d4a:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80d4c:	683b      	ldr	r3, [r7, #0]
   80d4e:	6859      	ldr	r1, [r3, #4]
   80d50:	683b      	ldr	r3, [r7, #0]
   80d52:	681b      	ldr	r3, [r3, #0]
   80d54:	461a      	mov	r2, r3
   80d56:	6878      	ldr	r0, [r7, #4]
   80d58:	4b10      	ldr	r3, [pc, #64]	; (80d9c <twi_master_init+0x80>)
   80d5a:	4798      	blx	r3
   80d5c:	4603      	mov	r3, r0
   80d5e:	2b01      	cmp	r3, #1
   80d60:	d101      	bne.n	80d66 <twi_master_init+0x4a>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80d62:	2301      	movs	r3, #1
   80d64:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80d66:	683b      	ldr	r3, [r7, #0]
   80d68:	7a5b      	ldrb	r3, [r3, #9]
   80d6a:	2b01      	cmp	r3, #1
   80d6c:	d102      	bne.n	80d74 <twi_master_init+0x58>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80d6e:	687b      	ldr	r3, [r7, #4]
   80d70:	2240      	movs	r2, #64	; 0x40
   80d72:	601a      	str	r2, [r3, #0]
	}
    
    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   80d74:	f44f 7150 	mov.w	r1, #832	; 0x340
   80d78:	6878      	ldr	r0, [r7, #4]
   80d7a:	4b09      	ldr	r3, [pc, #36]	; (80da0 <twi_master_init+0x84>)
   80d7c:	4798      	blx	r3

    twiBusy = false;
   80d7e:	4b09      	ldr	r3, [pc, #36]	; (80da4 <twi_master_init+0x88>)
   80d80:	2200      	movs	r2, #0
   80d82:	701a      	strb	r2, [r3, #0]
    
	return status;
   80d84:	68fb      	ldr	r3, [r7, #12]
}
   80d86:	4618      	mov	r0, r3
   80d88:	3710      	adds	r7, #16
   80d8a:	46bd      	mov	sp, r7
   80d8c:	bd80      	pop	{r7, pc}
   80d8e:	bf00      	nop
   80d90:	000812ef 	.word	0x000812ef
   80d94:	00081351 	.word	0x00081351
   80d98:	00080cf9 	.word	0x00080cf9
   80d9c:	00080da9 	.word	0x00080da9
   80da0:	000812d5 	.word	0x000812d5
   80da4:	20070d94 	.word	0x20070d94

00080da8 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   80da8:	b480      	push	{r7}
   80daa:	b089      	sub	sp, #36	; 0x24
   80dac:	af00      	add	r7, sp, #0
   80dae:	60f8      	str	r0, [r7, #12]
   80db0:	60b9      	str	r1, [r7, #8]
   80db2:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80db4:	2300      	movs	r3, #0
   80db6:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80db8:	68bb      	ldr	r3, [r7, #8]
   80dba:	4a34      	ldr	r2, [pc, #208]	; (80e8c <twi_set_speed+0xe4>)
   80dbc:	4293      	cmp	r3, r2
   80dbe:	d901      	bls.n	80dc4 <twi_set_speed+0x1c>
		return FAIL;
   80dc0:	2301      	movs	r3, #1
   80dc2:	e05d      	b.n	80e80 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   80dc4:	68bb      	ldr	r3, [r7, #8]
   80dc6:	4a32      	ldr	r2, [pc, #200]	; (80e90 <twi_set_speed+0xe8>)
   80dc8:	4293      	cmp	r3, r2
   80dca:	d937      	bls.n	80e3c <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80dcc:	687b      	ldr	r3, [r7, #4]
   80dce:	4a31      	ldr	r2, [pc, #196]	; (80e94 <twi_set_speed+0xec>)
   80dd0:	fba2 2303 	umull	r2, r3, r2, r3
   80dd4:	0b9b      	lsrs	r3, r3, #14
   80dd6:	3b04      	subs	r3, #4
   80dd8:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80dda:	68ba      	ldr	r2, [r7, #8]
   80ddc:	4b2e      	ldr	r3, [pc, #184]	; (80e98 <twi_set_speed+0xf0>)
   80dde:	4413      	add	r3, r2
   80de0:	009b      	lsls	r3, r3, #2
   80de2:	687a      	ldr	r2, [r7, #4]
   80de4:	fbb2 f3f3 	udiv	r3, r2, r3
   80de8:	3b04      	subs	r3, #4
   80dea:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80dec:	e005      	b.n	80dfa <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   80dee:	69fb      	ldr	r3, [r7, #28]
   80df0:	3301      	adds	r3, #1
   80df2:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   80df4:	697b      	ldr	r3, [r7, #20]
   80df6:	085b      	lsrs	r3, r3, #1
   80df8:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80dfa:	697b      	ldr	r3, [r7, #20]
   80dfc:	2bff      	cmp	r3, #255	; 0xff
   80dfe:	d909      	bls.n	80e14 <twi_set_speed+0x6c>
   80e00:	69fb      	ldr	r3, [r7, #28]
   80e02:	2b06      	cmp	r3, #6
   80e04:	d9f3      	bls.n	80dee <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e06:	e005      	b.n	80e14 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   80e08:	69fb      	ldr	r3, [r7, #28]
   80e0a:	3301      	adds	r3, #1
   80e0c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   80e0e:	693b      	ldr	r3, [r7, #16]
   80e10:	085b      	lsrs	r3, r3, #1
   80e12:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e14:	693b      	ldr	r3, [r7, #16]
   80e16:	2bff      	cmp	r3, #255	; 0xff
   80e18:	d902      	bls.n	80e20 <twi_set_speed+0x78>
   80e1a:	69fb      	ldr	r3, [r7, #28]
   80e1c:	2b06      	cmp	r3, #6
   80e1e:	d9f3      	bls.n	80e08 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80e20:	697b      	ldr	r3, [r7, #20]
   80e22:	b2da      	uxtb	r2, r3
   80e24:	693b      	ldr	r3, [r7, #16]
   80e26:	021b      	lsls	r3, r3, #8
   80e28:	b29b      	uxth	r3, r3
   80e2a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   80e2c:	69fb      	ldr	r3, [r7, #28]
   80e2e:	041b      	lsls	r3, r3, #16
   80e30:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80e34:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80e36:	68fb      	ldr	r3, [r7, #12]
   80e38:	611a      	str	r2, [r3, #16]
   80e3a:	e020      	b.n	80e7e <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80e3c:	68bb      	ldr	r3, [r7, #8]
   80e3e:	005b      	lsls	r3, r3, #1
   80e40:	687a      	ldr	r2, [r7, #4]
   80e42:	fbb2 f3f3 	udiv	r3, r2, r3
   80e46:	3b04      	subs	r3, #4
   80e48:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e4a:	e005      	b.n	80e58 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   80e4c:	69fb      	ldr	r3, [r7, #28]
   80e4e:	3301      	adds	r3, #1
   80e50:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   80e52:	69bb      	ldr	r3, [r7, #24]
   80e54:	085b      	lsrs	r3, r3, #1
   80e56:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e58:	69bb      	ldr	r3, [r7, #24]
   80e5a:	2bff      	cmp	r3, #255	; 0xff
   80e5c:	d902      	bls.n	80e64 <twi_set_speed+0xbc>
   80e5e:	69fb      	ldr	r3, [r7, #28]
   80e60:	2b06      	cmp	r3, #6
   80e62:	d9f3      	bls.n	80e4c <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80e64:	69bb      	ldr	r3, [r7, #24]
   80e66:	b2da      	uxtb	r2, r3
   80e68:	69bb      	ldr	r3, [r7, #24]
   80e6a:	021b      	lsls	r3, r3, #8
   80e6c:	b29b      	uxth	r3, r3
   80e6e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   80e70:	69fb      	ldr	r3, [r7, #28]
   80e72:	041b      	lsls	r3, r3, #16
   80e74:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80e78:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80e7a:	68fb      	ldr	r3, [r7, #12]
   80e7c:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   80e7e:	2300      	movs	r3, #0
}
   80e80:	4618      	mov	r0, r3
   80e82:	3724      	adds	r7, #36	; 0x24
   80e84:	46bd      	mov	sp, r7
   80e86:	bc80      	pop	{r7}
   80e88:	4770      	bx	lr
   80e8a:	bf00      	nop
   80e8c:	00061a80 	.word	0x00061a80
   80e90:	0005dc00 	.word	0x0005dc00
   80e94:	057619f1 	.word	0x057619f1
   80e98:	3ffd1200 	.word	0x3ffd1200

00080e9c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   80e9c:	b480      	push	{r7}
   80e9e:	b085      	sub	sp, #20
   80ea0:	af00      	add	r7, sp, #0
   80ea2:	6078      	str	r0, [r7, #4]
   80ea4:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   80ea6:	683b      	ldr	r3, [r7, #0]
   80ea8:	2b00      	cmp	r3, #0
   80eaa:	d101      	bne.n	80eb0 <twi_mk_addr+0x14>
		return 0;
   80eac:	2300      	movs	r3, #0
   80eae:	e01d      	b.n	80eec <twi_mk_addr+0x50>

	val = addr[0];
   80eb0:	687b      	ldr	r3, [r7, #4]
   80eb2:	781b      	ldrb	r3, [r3, #0]
   80eb4:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   80eb6:	683b      	ldr	r3, [r7, #0]
   80eb8:	2b01      	cmp	r3, #1
   80eba:	dd09      	ble.n	80ed0 <twi_mk_addr+0x34>
		val <<= 8;
   80ebc:	68fb      	ldr	r3, [r7, #12]
   80ebe:	021b      	lsls	r3, r3, #8
   80ec0:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   80ec2:	687b      	ldr	r3, [r7, #4]
   80ec4:	3301      	adds	r3, #1
   80ec6:	781b      	ldrb	r3, [r3, #0]
   80ec8:	461a      	mov	r2, r3
   80eca:	68fb      	ldr	r3, [r7, #12]
   80ecc:	4313      	orrs	r3, r2
   80ece:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   80ed0:	683b      	ldr	r3, [r7, #0]
   80ed2:	2b02      	cmp	r3, #2
   80ed4:	dd09      	ble.n	80eea <twi_mk_addr+0x4e>
		val <<= 8;
   80ed6:	68fb      	ldr	r3, [r7, #12]
   80ed8:	021b      	lsls	r3, r3, #8
   80eda:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   80edc:	687b      	ldr	r3, [r7, #4]
   80ede:	3302      	adds	r3, #2
   80ee0:	781b      	ldrb	r3, [r3, #0]
   80ee2:	461a      	mov	r2, r3
   80ee4:	68fb      	ldr	r3, [r7, #12]
   80ee6:	4313      	orrs	r3, r2
   80ee8:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80eea:	68fb      	ldr	r3, [r7, #12]
}
   80eec:	4618      	mov	r0, r3
   80eee:	3714      	adds	r7, #20
   80ef0:	46bd      	mov	sp, r7
   80ef2:	bc80      	pop	{r7}
   80ef4:	4770      	bx	lr
	...

00080ef8 <twi_is_busy>:
	}
}
#endif
#if 1
uint8_t twi_is_busy(void)
{
   80ef8:	b480      	push	{r7}
   80efa:	af00      	add	r7, sp, #0
    return twiBusy;
   80efc:	4b02      	ldr	r3, [pc, #8]	; (80f08 <twi_is_busy+0x10>)
   80efe:	781b      	ldrb	r3, [r3, #0]
}
   80f00:	4618      	mov	r0, r3
   80f02:	46bd      	mov	sp, r7
   80f04:	bc80      	pop	{r7}
   80f06:	4770      	bx	lr
   80f08:	20070d94 	.word	0x20070d94

00080f0c <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   80f0c:	b480      	push	{r7}
   80f0e:	af00      	add	r7, sp, #0
    return &txPacket;
   80f10:	4b02      	ldr	r3, [pc, #8]	; (80f1c <twi_get_tx_packet+0x10>)
}
   80f12:	4618      	mov	r0, r3
   80f14:	46bd      	mov	sp, r7
   80f16:	bc80      	pop	{r7}
   80f18:	4770      	bx	lr
   80f1a:	bf00      	nop
   80f1c:	20070b74 	.word	0x20070b74

00080f20 <twi_get_rx_packet>:

twi_packet_t *twi_get_rx_packet(void)
{
   80f20:	b480      	push	{r7}
   80f22:	af00      	add	r7, sp, #0
    return &rxPacket;
   80f24:	4b02      	ldr	r3, [pc, #8]	; (80f30 <twi_get_rx_packet+0x10>)
}
   80f26:	4618      	mov	r0, r3
   80f28:	46bd      	mov	sp, r7
   80f2a:	bc80      	pop	{r7}
   80f2c:	4770      	bx	lr
   80f2e:	bf00      	nop
   80f30:	20070c84 	.word	0x20070c84

00080f34 <twi_pdc_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_pdc_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80f34:	b580      	push	{r7, lr}
   80f36:	b084      	sub	sp, #16
   80f38:	af00      	add	r7, sp, #0
   80f3a:	6078      	str	r0, [r7, #4]
   80f3c:	6039      	str	r1, [r7, #0]
    pdc_packet_t rxPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   80f3e:	683b      	ldr	r3, [r7, #0]
   80f40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80f44:	2b00      	cmp	r3, #0
   80f46:	d101      	bne.n	80f4c <twi_pdc_master_read+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   80f48:	2301      	movs	r3, #1
   80f4a:	e047      	b.n	80fdc <twi_pdc_master_read+0xa8>
    }
    
    twiBusy = true;
   80f4c:	4b25      	ldr	r3, [pc, #148]	; (80fe4 <twi_pdc_master_read+0xb0>)
   80f4e:	2201      	movs	r2, #1
   80f50:	701a      	strb	r2, [r3, #0]

    // Ensure Rx is already empty
    twi_read_byte(TWI0);
   80f52:	4825      	ldr	r0, [pc, #148]	; (80fe8 <twi_pdc_master_read+0xb4>)
   80f54:	4b25      	ldr	r3, [pc, #148]	; (80fec <twi_pdc_master_read+0xb8>)
   80f56:	4798      	blx	r3

    // Set read mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   80f58:	687b      	ldr	r3, [r7, #4]
   80f5a:	2200      	movs	r2, #0
   80f5c:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   80f5e:	683b      	ldr	r3, [r7, #0]
   80f60:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   80f64:	041b      	lsls	r3, r3, #16
   80f66:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   80f6a:	683b      	ldr	r3, [r7, #0]
   80f6c:	685b      	ldr	r3, [r3, #4]
   80f6e:	021b      	lsls	r3, r3, #8
   80f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
   80f74:	4313      	orrs	r3, r2
   80f76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   80f7a:	687b      	ldr	r3, [r7, #4]
   80f7c:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   80f7e:	687b      	ldr	r3, [r7, #4]
   80f80:	2200      	movs	r2, #0
   80f82:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80f84:	683a      	ldr	r2, [r7, #0]
   80f86:	683b      	ldr	r3, [r7, #0]
   80f88:	685b      	ldr	r3, [r3, #4]
   80f8a:	4619      	mov	r1, r3
   80f8c:	4610      	mov	r0, r2
   80f8e:	4b18      	ldr	r3, [pc, #96]	; (80ff0 <twi_pdc_master_read+0xbc>)
   80f90:	4798      	blx	r3
   80f92:	4602      	mov	r2, r0
   80f94:	687b      	ldr	r3, [r7, #4]
   80f96:	60da      	str	r2, [r3, #12]
        twi_enable_interrupt(TWI0, IER_ERROR_INTERRUPTS);
    }
    else
    {
#endif
        rxPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   80f98:	683b      	ldr	r3, [r7, #0]
   80f9a:	3308      	adds	r3, #8
   80f9c:	60bb      	str	r3, [r7, #8]
        rxPdcPacket.ul_size = p_packet->length - 1;
   80f9e:	683b      	ldr	r3, [r7, #0]
   80fa0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80fa4:	3b01      	subs	r3, #1
   80fa6:	60fb      	str	r3, [r7, #12]
        pdc_rx_init(PDC_TWI0, &rxPdcPacket, NULL);
   80fa8:	f107 0308 	add.w	r3, r7, #8
   80fac:	2200      	movs	r2, #0
   80fae:	4619      	mov	r1, r3
   80fb0:	4810      	ldr	r0, [pc, #64]	; (80ff4 <twi_pdc_master_read+0xc0>)
   80fb2:	4b11      	ldr	r3, [pc, #68]	; (80ff8 <twi_pdc_master_read+0xc4>)
   80fb4:	4798      	blx	r3

        pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_RXTEN);
   80fb6:	2101      	movs	r1, #1
   80fb8:	480e      	ldr	r0, [pc, #56]	; (80ff4 <twi_pdc_master_read+0xc0>)
   80fba:	4b10      	ldr	r3, [pc, #64]	; (80ffc <twi_pdc_master_read+0xc8>)
   80fbc:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_START;
   80fbe:	4b0a      	ldr	r3, [pc, #40]	; (80fe8 <twi_pdc_master_read+0xb4>)
   80fc0:	2201      	movs	r2, #1
   80fc2:	601a      	str	r2, [r3, #0]

        twi_enable_interrupt(p_twi, TWI_IER_ENDRX);
   80fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80fc8:	6878      	ldr	r0, [r7, #4]
   80fca:	4b0d      	ldr	r3, [pc, #52]	; (81000 <twi_pdc_master_read+0xcc>)
   80fcc:	4798      	blx	r3
        NVIC_ClearPendingIRQ(TWI0_IRQn);
   80fce:	2016      	movs	r0, #22
   80fd0:	4b0c      	ldr	r3, [pc, #48]	; (81004 <twi_pdc_master_read+0xd0>)
   80fd2:	4798      	blx	r3
        NVIC_EnableIRQ(TWI0_IRQn);
   80fd4:	2016      	movs	r0, #22
   80fd6:	4b0c      	ldr	r3, [pc, #48]	; (81008 <twi_pdc_master_read+0xd4>)
   80fd8:	4798      	blx	r3
//    }

    return TWI_SUCCESS;
   80fda:	2300      	movs	r3, #0
}
   80fdc:	4618      	mov	r0, r3
   80fde:	3710      	adds	r7, #16
   80fe0:	46bd      	mov	sp, r7
   80fe2:	bd80      	pop	{r7, pc}
   80fe4:	20070d94 	.word	0x20070d94
   80fe8:	4008c000 	.word	0x4008c000
   80fec:	00081339 	.word	0x00081339
   80ff0:	00080e9d 	.word	0x00080e9d
   80ff4:	4008c100 	.word	0x4008c100
   80ff8:	000801eb 	.word	0x000801eb
   80ffc:	0008022d 	.word	0x0008022d
   81000:	000812d5 	.word	0x000812d5
   81004:	00080cc5 	.word	0x00080cc5
   81008:	00080c95 	.word	0x00080c95

0008100c <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   8100c:	b580      	push	{r7, lr}
   8100e:	b084      	sub	sp, #16
   81010:	af00      	add	r7, sp, #0
   81012:	6078      	str	r0, [r7, #4]
   81014:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   81016:	683b      	ldr	r3, [r7, #0]
   81018:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   8101c:	2b00      	cmp	r3, #0
   8101e:	d101      	bne.n	81024 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   81020:	2301      	movs	r3, #1
   81022:	e040      	b.n	810a6 <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   81024:	4b22      	ldr	r3, [pc, #136]	; (810b0 <twi_pdc_master_write+0xa4>)
   81026:	2201      	movs	r2, #1
   81028:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   8102a:	683b      	ldr	r3, [r7, #0]
   8102c:	3308      	adds	r3, #8
   8102e:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   81030:	683b      	ldr	r3, [r7, #0]
   81032:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81036:	3b01      	subs	r3, #1
   81038:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   8103a:	f107 0308 	add.w	r3, r7, #8
   8103e:	2200      	movs	r2, #0
   81040:	4619      	mov	r1, r3
   81042:	481c      	ldr	r0, [pc, #112]	; (810b4 <twi_pdc_master_write+0xa8>)
   81044:	4b1c      	ldr	r3, [pc, #112]	; (810b8 <twi_pdc_master_write+0xac>)
   81046:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   81048:	687b      	ldr	r3, [r7, #4]
   8104a:	2200      	movs	r2, #0
   8104c:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   8104e:	683b      	ldr	r3, [r7, #0]
   81050:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   81054:	041b      	lsls	r3, r3, #16
   81056:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   8105a:	683b      	ldr	r3, [r7, #0]
   8105c:	685b      	ldr	r3, [r3, #4]
   8105e:	021b      	lsls	r3, r3, #8
   81060:	f403 7340 	and.w	r3, r3, #768	; 0x300
   81064:	431a      	orrs	r2, r3
   81066:	687b      	ldr	r3, [r7, #4]
   81068:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   8106a:	687b      	ldr	r3, [r7, #4]
   8106c:	2200      	movs	r2, #0
   8106e:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   81070:	683a      	ldr	r2, [r7, #0]
   81072:	683b      	ldr	r3, [r7, #0]
   81074:	685b      	ldr	r3, [r3, #4]
   81076:	4619      	mov	r1, r3
   81078:	4610      	mov	r0, r2
   8107a:	4b10      	ldr	r3, [pc, #64]	; (810bc <twi_pdc_master_write+0xb0>)
   8107c:	4798      	blx	r3
   8107e:	4602      	mov	r2, r0
   81080:	687b      	ldr	r3, [r7, #4]
   81082:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   81084:	f44f 7180 	mov.w	r1, #256	; 0x100
   81088:	480a      	ldr	r0, [pc, #40]	; (810b4 <twi_pdc_master_write+0xa8>)
   8108a:	4b0d      	ldr	r3, [pc, #52]	; (810c0 <twi_pdc_master_write+0xb4>)
   8108c:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   8108e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81092:	6878      	ldr	r0, [r7, #4]
   81094:	4b0b      	ldr	r3, [pc, #44]	; (810c4 <twi_pdc_master_write+0xb8>)
   81096:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   81098:	2016      	movs	r0, #22
   8109a:	4b0b      	ldr	r3, [pc, #44]	; (810c8 <twi_pdc_master_write+0xbc>)
   8109c:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   8109e:	2016      	movs	r0, #22
   810a0:	4b0a      	ldr	r3, [pc, #40]	; (810cc <twi_pdc_master_write+0xc0>)
   810a2:	4798      	blx	r3

    return TWI_SUCCESS;
   810a4:	2300      	movs	r3, #0
}
   810a6:	4618      	mov	r0, r3
   810a8:	3710      	adds	r7, #16
   810aa:	46bd      	mov	sp, r7
   810ac:	bd80      	pop	{r7, pc}
   810ae:	bf00      	nop
   810b0:	20070d94 	.word	0x20070d94
   810b4:	4008c100 	.word	0x4008c100
   810b8:	000801a9 	.word	0x000801a9
   810bc:	00080e9d 	.word	0x00080e9d
   810c0:	0008022d 	.word	0x0008022d
   810c4:	000812d5 	.word	0x000812d5
   810c8:	00080cc5 	.word	0x00080cc5
   810cc:	00080c95 	.word	0x00080c95

000810d0 <twi_set_compass_rx_callback>:
 * \brief Callback function for TWI receive.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_rx_callback(void (*callback)(void))
{
   810d0:	b480      	push	{r7}
   810d2:	b083      	sub	sp, #12
   810d4:	af00      	add	r7, sp, #0
   810d6:	6078      	str	r0, [r7, #4]
    compassRxCallback = callback;
   810d8:	4a03      	ldr	r2, [pc, #12]	; (810e8 <twi_set_compass_rx_callback+0x18>)
   810da:	687b      	ldr	r3, [r7, #4]
   810dc:	6013      	str	r3, [r2, #0]
}
   810de:	bf00      	nop
   810e0:	370c      	adds	r7, #12
   810e2:	46bd      	mov	sp, r7
   810e4:	bc80      	pop	{r7}
   810e6:	4770      	bx	lr
   810e8:	20070da0 	.word	0x20070da0

000810ec <twi_set_compass_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_tx_callback(void (*callback)(void))
{
   810ec:	b480      	push	{r7}
   810ee:	b083      	sub	sp, #12
   810f0:	af00      	add	r7, sp, #0
   810f2:	6078      	str	r0, [r7, #4]
    compassTxCallback = callback;
   810f4:	4a03      	ldr	r2, [pc, #12]	; (81104 <twi_set_compass_tx_callback+0x18>)
   810f6:	687b      	ldr	r3, [r7, #4]
   810f8:	6013      	str	r3, [r2, #0]
}
   810fa:	bf00      	nop
   810fc:	370c      	adds	r7, #12
   810fe:	46bd      	mov	sp, r7
   81100:	bc80      	pop	{r7}
   81102:	4770      	bx	lr
   81104:	20070d9c 	.word	0x20070d9c

00081108 <twi_set_lcd_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_lcd_tx_callback(void (*callback)(void))
{
   81108:	b480      	push	{r7}
   8110a:	b083      	sub	sp, #12
   8110c:	af00      	add	r7, sp, #0
   8110e:	6078      	str	r0, [r7, #4]
    lcdTxCallback = callback;
   81110:	4a03      	ldr	r2, [pc, #12]	; (81120 <twi_set_lcd_tx_callback+0x18>)
   81112:	687b      	ldr	r3, [r7, #4]
   81114:	6013      	str	r3, [r2, #0]
}
   81116:	bf00      	nop
   81118:	370c      	adds	r7, #12
   8111a:	46bd      	mov	sp, r7
   8111c:	bc80      	pop	{r7}
   8111e:	4770      	bx	lr
   81120:	20070d98 	.word	0x20070d98

00081124 <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   81124:	b590      	push	{r4, r7, lr}
   81126:	b083      	sub	sp, #12
   81128:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   8112a:	485d      	ldr	r0, [pc, #372]	; (812a0 <TWI0_Handler+0x17c>)
   8112c:	4b5d      	ldr	r3, [pc, #372]	; (812a4 <TWI0_Handler+0x180>)
   8112e:	4798      	blx	r3
   81130:	4604      	mov	r4, r0
   81132:	485b      	ldr	r0, [pc, #364]	; (812a0 <TWI0_Handler+0x17c>)
   81134:	4b5c      	ldr	r3, [pc, #368]	; (812a8 <TWI0_Handler+0x184>)
   81136:	4798      	blx	r3
   81138:	4603      	mov	r3, r0
   8113a:	4023      	ands	r3, r4
   8113c:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   8113e:	687b      	ldr	r3, [r7, #4]
   81140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   81144:	2b00      	cmp	r3, #0
   81146:	d014      	beq.n	81172 <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   81148:	f44f 7100 	mov.w	r1, #512	; 0x200
   8114c:	4857      	ldr	r0, [pc, #348]	; (812ac <TWI0_Handler+0x188>)
   8114e:	4b58      	ldr	r3, [pc, #352]	; (812b0 <TWI0_Handler+0x18c>)
   81150:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   81152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81156:	4852      	ldr	r0, [pc, #328]	; (812a0 <TWI0_Handler+0x17c>)
   81158:	4b56      	ldr	r3, [pc, #344]	; (812b4 <TWI0_Handler+0x190>)
   8115a:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   8115c:	2104      	movs	r1, #4
   8115e:	4850      	ldr	r0, [pc, #320]	; (812a0 <TWI0_Handler+0x17c>)
   81160:	4b55      	ldr	r3, [pc, #340]	; (812b8 <TWI0_Handler+0x194>)
   81162:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   81164:	484e      	ldr	r0, [pc, #312]	; (812a0 <TWI0_Handler+0x17c>)
   81166:	4b4f      	ldr	r3, [pc, #316]	; (812a4 <TWI0_Handler+0x180>)
   81168:	4798      	blx	r3
   8116a:	4602      	mov	r2, r0
   8116c:	687b      	ldr	r3, [r7, #4]
   8116e:	4313      	orrs	r3, r2
   81170:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   81172:	687b      	ldr	r3, [r7, #4]
   81174:	f003 0304 	and.w	r3, r3, #4
   81178:	2b00      	cmp	r3, #0
   8117a:	d01a      	beq.n	811b2 <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   8117c:	2104      	movs	r1, #4
   8117e:	4848      	ldr	r0, [pc, #288]	; (812a0 <TWI0_Handler+0x17c>)
   81180:	4b4c      	ldr	r3, [pc, #304]	; (812b4 <TWI0_Handler+0x190>)
   81182:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   81184:	4b46      	ldr	r3, [pc, #280]	; (812a0 <TWI0_Handler+0x17c>)
   81186:	2202      	movs	r2, #2
   81188:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   8118a:	4a45      	ldr	r2, [pc, #276]	; (812a0 <TWI0_Handler+0x17c>)
   8118c:	4b4b      	ldr	r3, [pc, #300]	; (812bc <TWI0_Handler+0x198>)
   8118e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81192:	3b01      	subs	r3, #1
   81194:	4949      	ldr	r1, [pc, #292]	; (812bc <TWI0_Handler+0x198>)
   81196:	440b      	add	r3, r1
   81198:	7a1b      	ldrb	r3, [r3, #8]
   8119a:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   8119c:	2101      	movs	r1, #1
   8119e:	4840      	ldr	r0, [pc, #256]	; (812a0 <TWI0_Handler+0x17c>)
   811a0:	4b45      	ldr	r3, [pc, #276]	; (812b8 <TWI0_Handler+0x194>)
   811a2:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   811a4:	483e      	ldr	r0, [pc, #248]	; (812a0 <TWI0_Handler+0x17c>)
   811a6:	4b3f      	ldr	r3, [pc, #252]	; (812a4 <TWI0_Handler+0x180>)
   811a8:	4798      	blx	r3
   811aa:	4602      	mov	r2, r0
   811ac:	687b      	ldr	r3, [r7, #4]
   811ae:	4313      	orrs	r3, r2
   811b0:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   811b2:	687b      	ldr	r3, [r7, #4]
   811b4:	f003 0301 	and.w	r3, r3, #1
   811b8:	2b00      	cmp	r3, #0
   811ba:	d014      	beq.n	811e6 <TWI0_Handler+0xc2>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   811bc:	2101      	movs	r1, #1
   811be:	4838      	ldr	r0, [pc, #224]	; (812a0 <TWI0_Handler+0x17c>)
   811c0:	4b3c      	ldr	r3, [pc, #240]	; (812b4 <TWI0_Handler+0x190>)
   811c2:	4798      	blx	r3

        // If defined, call the connected function.
        if(compassTxCallback != NULL)
   811c4:	4b3e      	ldr	r3, [pc, #248]	; (812c0 <TWI0_Handler+0x19c>)
   811c6:	681b      	ldr	r3, [r3, #0]
   811c8:	2b00      	cmp	r3, #0
   811ca:	d002      	beq.n	811d2 <TWI0_Handler+0xae>
        {
            compassTxCallback();
   811cc:	4b3c      	ldr	r3, [pc, #240]	; (812c0 <TWI0_Handler+0x19c>)
   811ce:	681b      	ldr	r3, [r3, #0]
   811d0:	4798      	blx	r3
        }

        // If defined, call the connected function.
        if(lcdTxCallback != NULL)
   811d2:	4b3c      	ldr	r3, [pc, #240]	; (812c4 <TWI0_Handler+0x1a0>)
   811d4:	681b      	ldr	r3, [r3, #0]
   811d6:	2b00      	cmp	r3, #0
   811d8:	d002      	beq.n	811e0 <TWI0_Handler+0xbc>
        {
          lcdTxCallback();
   811da:	4b3a      	ldr	r3, [pc, #232]	; (812c4 <TWI0_Handler+0x1a0>)
   811dc:	681b      	ldr	r3, [r3, #0]
   811de:	4798      	blx	r3
        }

        twiBusy = false;
   811e0:	4b39      	ldr	r3, [pc, #228]	; (812c8 <TWI0_Handler+0x1a4>)
   811e2:	2200      	movs	r2, #0
   811e4:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   811e6:	687b      	ldr	r3, [r7, #4]
   811e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   811ec:	2b00      	cmp	r3, #0
   811ee:	d016      	beq.n	8121e <TWI0_Handler+0xfa>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   811f0:	2102      	movs	r1, #2
   811f2:	482e      	ldr	r0, [pc, #184]	; (812ac <TWI0_Handler+0x188>)
   811f4:	4b2e      	ldr	r3, [pc, #184]	; (812b0 <TWI0_Handler+0x18c>)
   811f6:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   811f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   811fc:	4828      	ldr	r0, [pc, #160]	; (812a0 <TWI0_Handler+0x17c>)
   811fe:	4b2d      	ldr	r3, [pc, #180]	; (812b4 <TWI0_Handler+0x190>)
   81200:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   81202:	2102      	movs	r1, #2
   81204:	4826      	ldr	r0, [pc, #152]	; (812a0 <TWI0_Handler+0x17c>)
   81206:	4b2c      	ldr	r3, [pc, #176]	; (812b8 <TWI0_Handler+0x194>)
   81208:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   8120a:	4b25      	ldr	r3, [pc, #148]	; (812a0 <TWI0_Handler+0x17c>)
   8120c:	2202      	movs	r2, #2
   8120e:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   81210:	4823      	ldr	r0, [pc, #140]	; (812a0 <TWI0_Handler+0x17c>)
   81212:	4b24      	ldr	r3, [pc, #144]	; (812a4 <TWI0_Handler+0x180>)
   81214:	4798      	blx	r3
   81216:	4602      	mov	r2, r0
   81218:	687b      	ldr	r3, [r7, #4]
   8121a:	4313      	orrs	r3, r2
   8121c:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   8121e:	687b      	ldr	r3, [r7, #4]
   81220:	f003 0302 	and.w	r3, r3, #2
   81224:	2b00      	cmp	r3, #0
   81226:	d018      	beq.n	8125a <TWI0_Handler+0x136>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   81228:	2102      	movs	r1, #2
   8122a:	481d      	ldr	r0, [pc, #116]	; (812a0 <TWI0_Handler+0x17c>)
   8122c:	4b21      	ldr	r3, [pc, #132]	; (812b4 <TWI0_Handler+0x190>)
   8122e:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   81230:	4b26      	ldr	r3, [pc, #152]	; (812cc <TWI0_Handler+0x1a8>)
   81232:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81236:	3b01      	subs	r3, #1
   81238:	4a19      	ldr	r2, [pc, #100]	; (812a0 <TWI0_Handler+0x17c>)
   8123a:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8123c:	b2d1      	uxtb	r1, r2
   8123e:	4a23      	ldr	r2, [pc, #140]	; (812cc <TWI0_Handler+0x1a8>)
   81240:	4413      	add	r3, r2
   81242:	460a      	mov	r2, r1
   81244:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(compassRxCallback != NULL)
   81246:	4b22      	ldr	r3, [pc, #136]	; (812d0 <TWI0_Handler+0x1ac>)
   81248:	681b      	ldr	r3, [r3, #0]
   8124a:	2b00      	cmp	r3, #0
   8124c:	d002      	beq.n	81254 <TWI0_Handler+0x130>
        {
            compassRxCallback();
   8124e:	4b20      	ldr	r3, [pc, #128]	; (812d0 <TWI0_Handler+0x1ac>)
   81250:	681b      	ldr	r3, [r3, #0]
   81252:	4798      	blx	r3
        }

        twiBusy = false;
   81254:	4b1c      	ldr	r3, [pc, #112]	; (812c8 <TWI0_Handler+0x1a4>)
   81256:	2200      	movs	r2, #0
   81258:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   8125a:	687b      	ldr	r3, [r7, #4]
   8125c:	f403 7350 	and.w	r3, r3, #832	; 0x340
   81260:	2b00      	cmp	r3, #0
   81262:	d019      	beq.n	81298 <TWI0_Handler+0x174>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81264:	f240 2102 	movw	r1, #514	; 0x202
   81268:	4810      	ldr	r0, [pc, #64]	; (812ac <TWI0_Handler+0x188>)
   8126a:	4b11      	ldr	r3, [pc, #68]	; (812b0 <TWI0_Handler+0x18c>)
   8126c:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   8126e:	687b      	ldr	r3, [r7, #4]
   81270:	f403 7380 	and.w	r3, r3, #256	; 0x100
   81274:	2b00      	cmp	r3, #0
   81276:	d102      	bne.n	8127e <TWI0_Handler+0x15a>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   81278:	4b09      	ldr	r3, [pc, #36]	; (812a0 <TWI0_Handler+0x17c>)
   8127a:	2202      	movs	r2, #2
   8127c:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   8127e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81282:	4807      	ldr	r0, [pc, #28]	; (812a0 <TWI0_Handler+0x17c>)
   81284:	4b0b      	ldr	r3, [pc, #44]	; (812b4 <TWI0_Handler+0x190>)
   81286:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   81288:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8128c:	4804      	ldr	r0, [pc, #16]	; (812a0 <TWI0_Handler+0x17c>)
   8128e:	4b09      	ldr	r3, [pc, #36]	; (812b4 <TWI0_Handler+0x190>)
   81290:	4798      	blx	r3

        twiBusy = false;
   81292:	4b0d      	ldr	r3, [pc, #52]	; (812c8 <TWI0_Handler+0x1a4>)
   81294:	2200      	movs	r2, #0
   81296:	701a      	strb	r2, [r3, #0]
	}
}
   81298:	bf00      	nop
   8129a:	370c      	adds	r7, #12
   8129c:	46bd      	mov	sp, r7
   8129e:	bd90      	pop	{r4, r7, pc}
   812a0:	4008c000 	.word	0x4008c000
   812a4:	0008130d 	.word	0x0008130d
   812a8:	00081323 	.word	0x00081323
   812ac:	4008c100 	.word	0x4008c100
   812b0:	0008024d 	.word	0x0008024d
   812b4:	000812ef 	.word	0x000812ef
   812b8:	000812d5 	.word	0x000812d5
   812bc:	20070b74 	.word	0x20070b74
   812c0:	20070d9c 	.word	0x20070d9c
   812c4:	20070d98 	.word	0x20070d98
   812c8:	20070d94 	.word	0x20070d94
   812cc:	20070c84 	.word	0x20070c84
   812d0:	20070da0 	.word	0x20070da0

000812d4 <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   812d4:	b480      	push	{r7}
   812d6:	b083      	sub	sp, #12
   812d8:	af00      	add	r7, sp, #0
   812da:	6078      	str	r0, [r7, #4]
   812dc:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   812de:	687b      	ldr	r3, [r7, #4]
   812e0:	683a      	ldr	r2, [r7, #0]
   812e2:	625a      	str	r2, [r3, #36]	; 0x24
}
   812e4:	bf00      	nop
   812e6:	370c      	adds	r7, #12
   812e8:	46bd      	mov	sp, r7
   812ea:	bc80      	pop	{r7}
   812ec:	4770      	bx	lr

000812ee <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   812ee:	b480      	push	{r7}
   812f0:	b083      	sub	sp, #12
   812f2:	af00      	add	r7, sp, #0
   812f4:	6078      	str	r0, [r7, #4]
   812f6:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   812f8:	687b      	ldr	r3, [r7, #4]
   812fa:	683a      	ldr	r2, [r7, #0]
   812fc:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   812fe:	687b      	ldr	r3, [r7, #4]
   81300:	6a1b      	ldr	r3, [r3, #32]
}
   81302:	bf00      	nop
   81304:	370c      	adds	r7, #12
   81306:	46bd      	mov	sp, r7
   81308:	bc80      	pop	{r7}
   8130a:	4770      	bx	lr

0008130c <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   8130c:	b480      	push	{r7}
   8130e:	b083      	sub	sp, #12
   81310:	af00      	add	r7, sp, #0
   81312:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   81314:	687b      	ldr	r3, [r7, #4]
   81316:	6a1b      	ldr	r3, [r3, #32]
}
   81318:	4618      	mov	r0, r3
   8131a:	370c      	adds	r7, #12
   8131c:	46bd      	mov	sp, r7
   8131e:	bc80      	pop	{r7}
   81320:	4770      	bx	lr

00081322 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   81322:	b480      	push	{r7}
   81324:	b083      	sub	sp, #12
   81326:	af00      	add	r7, sp, #0
   81328:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   8132a:	687b      	ldr	r3, [r7, #4]
   8132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   8132e:	4618      	mov	r0, r3
   81330:	370c      	adds	r7, #12
   81332:	46bd      	mov	sp, r7
   81334:	bc80      	pop	{r7}
   81336:	4770      	bx	lr

00081338 <twi_read_byte>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The byte read.
 */
uint8_t twi_read_byte(Twi *p_twi)
{
   81338:	b480      	push	{r7}
   8133a:	b083      	sub	sp, #12
   8133c:	af00      	add	r7, sp, #0
   8133e:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_RHR;
   81340:	687b      	ldr	r3, [r7, #4]
   81342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81344:	b2db      	uxtb	r3, r3
}
   81346:	4618      	mov	r0, r3
   81348:	370c      	adds	r7, #12
   8134a:	46bd      	mov	sp, r7
   8134c:	bc80      	pop	{r7}
   8134e:	4770      	bx	lr

00081350 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   81350:	b480      	push	{r7}
   81352:	b083      	sub	sp, #12
   81354:	af00      	add	r7, sp, #0
   81356:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   81358:	687b      	ldr	r3, [r7, #4]
   8135a:	2280      	movs	r2, #128	; 0x80
   8135c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   8135e:	687b      	ldr	r3, [r7, #4]
   81360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   81362:	bf00      	nop
   81364:	370c      	adds	r7, #12
   81366:	46bd      	mov	sp, r7
   81368:	bc80      	pop	{r7}
   8136a:	4770      	bx	lr

0008136c <compass_init>:

//local function
static void compass_callback(void);

void compass_init(void)
{
   8136c:	b580      	push	{r7, lr}
   8136e:	b082      	sub	sp, #8
   81370:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   81372:	4b0d      	ldr	r3, [pc, #52]	; (813a8 <compass_init+0x3c>)
   81374:	4798      	blx	r3
   81376:	6078      	str	r0, [r7, #4]

    rx_packet->chip = 0x60;
   81378:	687b      	ldr	r3, [r7, #4]
   8137a:	2260      	movs	r2, #96	; 0x60
   8137c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    rx_packet->addr[0] = 0x02;
   81380:	687b      	ldr	r3, [r7, #4]
   81382:	2202      	movs	r2, #2
   81384:	701a      	strb	r2, [r3, #0]
    rx_packet->addr_length = 1;
   81386:	687b      	ldr	r3, [r7, #4]
   81388:	2201      	movs	r2, #1
   8138a:	605a      	str	r2, [r3, #4]
    rx_packet->length = sizeof(direction);
   8138c:	687b      	ldr	r3, [r7, #4]
   8138e:	2202      	movs	r2, #2
   81390:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    twi_set_compass_tx_callback(compass_callback);
   81394:	4805      	ldr	r0, [pc, #20]	; (813ac <compass_init+0x40>)
   81396:	4b06      	ldr	r3, [pc, #24]	; (813b0 <compass_init+0x44>)
   81398:	4798      	blx	r3
    twi_set_compass_rx_callback(compass_callback);
   8139a:	4804      	ldr	r0, [pc, #16]	; (813ac <compass_init+0x40>)
   8139c:	4b05      	ldr	r3, [pc, #20]	; (813b4 <compass_init+0x48>)
   8139e:	4798      	blx	r3
}
   813a0:	bf00      	nop
   813a2:	3708      	adds	r7, #8
   813a4:	46bd      	mov	sp, r7
   813a6:	bd80      	pop	{r7, pc}
   813a8:	00080f21 	.word	0x00080f21
   813ac:	00081475 	.word	0x00081475
   813b0:	000810ed 	.word	0x000810ed
   813b4:	000810d1 	.word	0x000810d1

000813b8 <update_compass>:

void update_compass(void)
{
   813b8:	b580      	push	{r7, lr}
   813ba:	b082      	sub	sp, #8
   813bc:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   813be:	4b1a      	ldr	r3, [pc, #104]	; (81428 <update_compass+0x70>)
   813c0:	4798      	blx	r3
   813c2:	6078      	str	r0, [r7, #4]

    if ((getTicks() - ul_ticks_compass) > 100)
   813c4:	4b19      	ldr	r3, [pc, #100]	; (8142c <update_compass+0x74>)
   813c6:	4798      	blx	r3
   813c8:	4602      	mov	r2, r0
   813ca:	4b19      	ldr	r3, [pc, #100]	; (81430 <update_compass+0x78>)
   813cc:	681b      	ldr	r3, [r3, #0]
   813ce:	1ad3      	subs	r3, r2, r3
   813d0:	2b64      	cmp	r3, #100	; 0x64
   813d2:	d926      	bls.n	81422 <update_compass+0x6a>
    {
        if(lcd_is_busy())
   813d4:	4b17      	ldr	r3, [pc, #92]	; (81434 <update_compass+0x7c>)
   813d6:	4798      	blx	r3
   813d8:	4603      	mov	r3, r0
   813da:	2b00      	cmp	r3, #0
   813dc:	d120      	bne.n	81420 <update_compass+0x68>
        {
            return;
        }

        ul_ticks_compass = getTicks();
   813de:	4b13      	ldr	r3, [pc, #76]	; (8142c <update_compass+0x74>)
   813e0:	4798      	blx	r3
   813e2:	4602      	mov	r2, r0
   813e4:	4b12      	ldr	r3, [pc, #72]	; (81430 <update_compass+0x78>)
   813e6:	601a      	str	r2, [r3, #0]
        
        compassIsBusy = true;
   813e8:	4b13      	ldr	r3, [pc, #76]	; (81438 <update_compass+0x80>)
   813ea:	2201      	movs	r2, #1
   813ec:	701a      	strb	r2, [r3, #0]
        if(twi_pdc_master_read(TWI0, rx_packet) == TWI_SUCCESS)
   813ee:	6879      	ldr	r1, [r7, #4]
   813f0:	4812      	ldr	r0, [pc, #72]	; (8143c <update_compass+0x84>)
   813f2:	4b13      	ldr	r3, [pc, #76]	; (81440 <update_compass+0x88>)
   813f4:	4798      	blx	r3
   813f6:	4603      	mov	r3, r0
   813f8:	2b00      	cmp	r3, #0
   813fa:	d104      	bne.n	81406 <update_compass+0x4e>
        {
            while(compassIsBusy);
   813fc:	bf00      	nop
   813fe:	4b0e      	ldr	r3, [pc, #56]	; (81438 <update_compass+0x80>)
   81400:	781b      	ldrb	r3, [r3, #0]
   81402:	2b00      	cmp	r3, #0
   81404:	d1fb      	bne.n	813fe <update_compass+0x46>
        }
        direction = (rx_packet->buffer[0] << 8) | rx_packet->buffer[1];
   81406:	687b      	ldr	r3, [r7, #4]
   81408:	7a1b      	ldrb	r3, [r3, #8]
   8140a:	021b      	lsls	r3, r3, #8
   8140c:	b21a      	sxth	r2, r3
   8140e:	687b      	ldr	r3, [r7, #4]
   81410:	7a5b      	ldrb	r3, [r3, #9]
   81412:	b21b      	sxth	r3, r3
   81414:	4313      	orrs	r3, r2
   81416:	b21b      	sxth	r3, r3
   81418:	b29a      	uxth	r2, r3
   8141a:	4b0a      	ldr	r3, [pc, #40]	; (81444 <update_compass+0x8c>)
   8141c:	801a      	strh	r2, [r3, #0]
   8141e:	e000      	b.n	81422 <update_compass+0x6a>
            return;
   81420:	bf00      	nop
    }
}
   81422:	3708      	adds	r7, #8
   81424:	46bd      	mov	sp, r7
   81426:	bd80      	pop	{r7, pc}
   81428:	00080f21 	.word	0x00080f21
   8142c:	000830a1 	.word	0x000830a1
   81430:	20070fd8 	.word	0x20070fd8
   81434:	000818bd 	.word	0x000818bd
   81438:	20070da4 	.word	0x20070da4
   8143c:	4008c000 	.word	0x4008c000
   81440:	00080f35 	.word	0x00080f35
   81444:	20070e38 	.word	0x20070e38

00081448 <set_compass_is_busy>:

void set_compass_is_busy(void)
{
   81448:	b480      	push	{r7}
   8144a:	af00      	add	r7, sp, #0
    compassIsBusy = true;
   8144c:	4b03      	ldr	r3, [pc, #12]	; (8145c <set_compass_is_busy+0x14>)
   8144e:	2201      	movs	r2, #1
   81450:	701a      	strb	r2, [r3, #0]
}
   81452:	bf00      	nop
   81454:	46bd      	mov	sp, r7
   81456:	bc80      	pop	{r7}
   81458:	4770      	bx	lr
   8145a:	bf00      	nop
   8145c:	20070da4 	.word	0x20070da4

00081460 <compass_is_busy>:

uint8_t compass_is_busy(void)
{
   81460:	b480      	push	{r7}
   81462:	af00      	add	r7, sp, #0
    return compassIsBusy;
   81464:	4b02      	ldr	r3, [pc, #8]	; (81470 <compass_is_busy+0x10>)
   81466:	781b      	ldrb	r3, [r3, #0]
}
   81468:	4618      	mov	r0, r3
   8146a:	46bd      	mov	sp, r7
   8146c:	bc80      	pop	{r7}
   8146e:	4770      	bx	lr
   81470:	20070da4 	.word	0x20070da4

00081474 <compass_callback>:
    return tmp_corr;
}*/

//local function
static void compass_callback(void)
{
   81474:	b480      	push	{r7}
   81476:	af00      	add	r7, sp, #0
    compassIsBusy = false;
   81478:	4b03      	ldr	r3, [pc, #12]	; (81488 <compass_callback+0x14>)
   8147a:	2200      	movs	r2, #0
   8147c:	701a      	strb	r2, [r3, #0]
}
   8147e:	bf00      	nop
   81480:	46bd      	mov	sp, r7
   81482:	bc80      	pop	{r7}
   81484:	4770      	bx	lr
   81486:	bf00      	nop
   81488:	20070da4 	.word	0x20070da4

0008148c <osc_get_rate>:
{
   8148c:	b480      	push	{r7}
   8148e:	b083      	sub	sp, #12
   81490:	af00      	add	r7, sp, #0
   81492:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81494:	687b      	ldr	r3, [r7, #4]
   81496:	2b07      	cmp	r3, #7
   81498:	d825      	bhi.n	814e6 <osc_get_rate+0x5a>
   8149a:	a201      	add	r2, pc, #4	; (adr r2, 814a0 <osc_get_rate+0x14>)
   8149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   814a0:	000814c1 	.word	0x000814c1
   814a4:	000814c7 	.word	0x000814c7
   814a8:	000814cd 	.word	0x000814cd
   814ac:	000814d3 	.word	0x000814d3
   814b0:	000814d7 	.word	0x000814d7
   814b4:	000814db 	.word	0x000814db
   814b8:	000814df 	.word	0x000814df
   814bc:	000814e3 	.word	0x000814e3
		return OSC_SLCK_32K_RC_HZ;
   814c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   814c4:	e010      	b.n	814e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   814c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   814ca:	e00d      	b.n	814e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   814cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   814d0:	e00a      	b.n	814e8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   814d2:	4b08      	ldr	r3, [pc, #32]	; (814f4 <osc_get_rate+0x68>)
   814d4:	e008      	b.n	814e8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   814d6:	4b08      	ldr	r3, [pc, #32]	; (814f8 <osc_get_rate+0x6c>)
   814d8:	e006      	b.n	814e8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   814da:	4b08      	ldr	r3, [pc, #32]	; (814fc <osc_get_rate+0x70>)
   814dc:	e004      	b.n	814e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   814de:	4b07      	ldr	r3, [pc, #28]	; (814fc <osc_get_rate+0x70>)
   814e0:	e002      	b.n	814e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   814e2:	4b06      	ldr	r3, [pc, #24]	; (814fc <osc_get_rate+0x70>)
   814e4:	e000      	b.n	814e8 <osc_get_rate+0x5c>
	return 0;
   814e6:	2300      	movs	r3, #0
}
   814e8:	4618      	mov	r0, r3
   814ea:	370c      	adds	r7, #12
   814ec:	46bd      	mov	sp, r7
   814ee:	bc80      	pop	{r7}
   814f0:	4770      	bx	lr
   814f2:	bf00      	nop
   814f4:	003d0900 	.word	0x003d0900
   814f8:	007a1200 	.word	0x007a1200
   814fc:	00b71b00 	.word	0x00b71b00

00081500 <sysclk_get_main_hz>:
{
   81500:	b580      	push	{r7, lr}
   81502:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   81504:	2006      	movs	r0, #6
   81506:	4b04      	ldr	r3, [pc, #16]	; (81518 <sysclk_get_main_hz+0x18>)
   81508:	4798      	blx	r3
   8150a:	4602      	mov	r2, r0
   8150c:	4613      	mov	r3, r2
   8150e:	00db      	lsls	r3, r3, #3
   81510:	1a9b      	subs	r3, r3, r2
   81512:	005b      	lsls	r3, r3, #1
}
   81514:	4618      	mov	r0, r3
   81516:	bd80      	pop	{r7, pc}
   81518:	0008148d 	.word	0x0008148d

0008151c <sysclk_get_peripheral_hz>:
{
   8151c:	b580      	push	{r7, lr}
   8151e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   81520:	4b02      	ldr	r3, [pc, #8]	; (8152c <sysclk_get_peripheral_hz+0x10>)
   81522:	4798      	blx	r3
   81524:	4603      	mov	r3, r0
   81526:	085b      	lsrs	r3, r3, #1
}
   81528:	4618      	mov	r0, r3
   8152a:	bd80      	pop	{r7, pc}
   8152c:	00081501 	.word	0x00081501

00081530 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81530:	b580      	push	{r7, lr}
   81532:	b082      	sub	sp, #8
   81534:	af00      	add	r7, sp, #0
   81536:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81538:	6878      	ldr	r0, [r7, #4]
   8153a:	4b03      	ldr	r3, [pc, #12]	; (81548 <sysclk_enable_peripheral_clock+0x18>)
   8153c:	4798      	blx	r3
}
   8153e:	bf00      	nop
   81540:	3708      	adds	r7, #8
   81542:	46bd      	mov	sp, r7
   81544:	bd80      	pop	{r7, pc}
   81546:	bf00      	nop
   81548:	00083a65 	.word	0x00083a65

0008154c <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   8154c:	b580      	push	{r7, lr}
   8154e:	b082      	sub	sp, #8
   81550:	af00      	add	r7, sp, #0
   81552:	6078      	str	r0, [r7, #4]
   81554:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   81556:	4b10      	ldr	r3, [pc, #64]	; (81598 <twi_master_setup+0x4c>)
   81558:	4798      	blx	r3
   8155a:	4602      	mov	r2, r0
   8155c:	683b      	ldr	r3, [r7, #0]
   8155e:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   81560:	683b      	ldr	r3, [r7, #0]
   81562:	2200      	movs	r2, #0
   81564:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   81566:	687b      	ldr	r3, [r7, #4]
   81568:	4a0c      	ldr	r2, [pc, #48]	; (8159c <twi_master_setup+0x50>)
   8156a:	4293      	cmp	r3, r2
   8156c:	d103      	bne.n	81576 <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   8156e:	2016      	movs	r0, #22
   81570:	4b0b      	ldr	r3, [pc, #44]	; (815a0 <twi_master_setup+0x54>)
   81572:	4798      	blx	r3
   81574:	e006      	b.n	81584 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   81576:	687b      	ldr	r3, [r7, #4]
   81578:	4a0a      	ldr	r2, [pc, #40]	; (815a4 <twi_master_setup+0x58>)
   8157a:	4293      	cmp	r3, r2
   8157c:	d102      	bne.n	81584 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   8157e:	2017      	movs	r0, #23
   81580:	4b07      	ldr	r3, [pc, #28]	; (815a0 <twi_master_setup+0x54>)
   81582:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   81584:	6839      	ldr	r1, [r7, #0]
   81586:	6878      	ldr	r0, [r7, #4]
   81588:	4b07      	ldr	r3, [pc, #28]	; (815a8 <twi_master_setup+0x5c>)
   8158a:	4798      	blx	r3
   8158c:	4603      	mov	r3, r0
}
   8158e:	4618      	mov	r0, r3
   81590:	3708      	adds	r7, #8
   81592:	46bd      	mov	sp, r7
   81594:	bd80      	pop	{r7, pc}
   81596:	bf00      	nop
   81598:	0008151d 	.word	0x0008151d
   8159c:	4008c000 	.word	0x4008c000
   815a0:	00081531 	.word	0x00081531
   815a4:	40090000 	.word	0x40090000
   815a8:	00080d1d 	.word	0x00080d1d

000815ac <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   815ac:	b580      	push	{r7, lr}
   815ae:	af00      	add	r7, sp, #0
    twi_set_lcd_tx_callback(lcd_callback);
   815b0:	4821      	ldr	r0, [pc, #132]	; (81638 <lcd_init+0x8c>)
   815b2:	4b22      	ldr	r3, [pc, #136]	; (8163c <lcd_init+0x90>)
   815b4:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   815b6:	220c      	movs	r2, #12
   815b8:	2100      	movs	r1, #0
   815ba:	4821      	ldr	r0, [pc, #132]	; (81640 <lcd_init+0x94>)
   815bc:	4b21      	ldr	r3, [pc, #132]	; (81644 <lcd_init+0x98>)
   815be:	4798      	blx	r3
    twiConfig.speed = 100000;
   815c0:	4b1f      	ldr	r3, [pc, #124]	; (81640 <lcd_init+0x94>)
   815c2:	4a21      	ldr	r2, [pc, #132]	; (81648 <lcd_init+0x9c>)
   815c4:	605a      	str	r2, [r3, #4]

    backlight = LCD_LIGHT_OFF;
   815c6:	4b21      	ldr	r3, [pc, #132]	; (8164c <lcd_init+0xa0>)
   815c8:	2200      	movs	r2, #0
   815ca:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   815cc:	2103      	movs	r1, #3
   815ce:	2000      	movs	r0, #0
   815d0:	4b1f      	ldr	r3, [pc, #124]	; (81650 <lcd_init+0xa4>)
   815d2:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   815d4:	2006      	movs	r0, #6
   815d6:	4b1f      	ldr	r3, [pc, #124]	; (81654 <lcd_init+0xa8>)
   815d8:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   815da:	2103      	movs	r1, #3
   815dc:	2000      	movs	r0, #0
   815de:	4b1c      	ldr	r3, [pc, #112]	; (81650 <lcd_init+0xa4>)
   815e0:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   815e2:	2006      	movs	r0, #6
   815e4:	4b1b      	ldr	r3, [pc, #108]	; (81654 <lcd_init+0xa8>)
   815e6:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   815e8:	2103      	movs	r1, #3
   815ea:	2000      	movs	r0, #0
   815ec:	4b18      	ldr	r3, [pc, #96]	; (81650 <lcd_init+0xa4>)
   815ee:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   815f0:	2006      	movs	r0, #6
   815f2:	4b18      	ldr	r3, [pc, #96]	; (81654 <lcd_init+0xa8>)
   815f4:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   815f6:	2102      	movs	r1, #2
   815f8:	2000      	movs	r0, #0
   815fa:	4b15      	ldr	r3, [pc, #84]	; (81650 <lcd_init+0xa4>)
   815fc:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   815fe:	2128      	movs	r1, #40	; 0x28
   81600:	2000      	movs	r0, #0
   81602:	4b15      	ldr	r3, [pc, #84]	; (81658 <lcd_init+0xac>)
   81604:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   81606:	2108      	movs	r1, #8
   81608:	2000      	movs	r0, #0
   8160a:	4b13      	ldr	r3, [pc, #76]	; (81658 <lcd_init+0xac>)
   8160c:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   8160e:	2101      	movs	r1, #1
   81610:	2000      	movs	r0, #0
   81612:	4b11      	ldr	r3, [pc, #68]	; (81658 <lcd_init+0xac>)
   81614:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   81616:	2003      	movs	r0, #3
   81618:	4b0e      	ldr	r3, [pc, #56]	; (81654 <lcd_init+0xa8>)
   8161a:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   8161c:	2106      	movs	r1, #6
   8161e:	2000      	movs	r0, #0
   81620:	4b0d      	ldr	r3, [pc, #52]	; (81658 <lcd_init+0xac>)
   81622:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   81624:	210c      	movs	r1, #12
   81626:	2000      	movs	r0, #0
   81628:	4b0b      	ldr	r3, [pc, #44]	; (81658 <lcd_init+0xac>)
   8162a:	4798      	blx	r3

    backlight = LCD_LIGHT_ON;
   8162c:	4b07      	ldr	r3, [pc, #28]	; (8164c <lcd_init+0xa0>)
   8162e:	2208      	movs	r2, #8
   81630:	701a      	strb	r2, [r3, #0]
}
   81632:	bf00      	nop
   81634:	bd80      	pop	{r7, pc}
   81636:	bf00      	nop
   81638:	00081b21 	.word	0x00081b21
   8163c:	00081109 	.word	0x00081109
   81640:	20070db0 	.word	0x20070db0
   81644:	00085711 	.word	0x00085711
   81648:	000186a0 	.word	0x000186a0
   8164c:	20070da5 	.word	0x20070da5
   81650:	000818d1 	.word	0x000818d1
   81654:	000830b5 	.word	0x000830b5
   81658:	000819e1 	.word	0x000819e1

0008165c <lcd_set_backlight>:

void lcd_set_backlight(backlight_t state)
{
   8165c:	b480      	push	{r7}
   8165e:	b083      	sub	sp, #12
   81660:	af00      	add	r7, sp, #0
   81662:	4603      	mov	r3, r0
   81664:	71fb      	strb	r3, [r7, #7]
    backlight = state;
   81666:	4a04      	ldr	r2, [pc, #16]	; (81678 <lcd_set_backlight+0x1c>)
   81668:	79fb      	ldrb	r3, [r7, #7]
   8166a:	7013      	strb	r3, [r2, #0]
//    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
//    mdelay(LCD_CLEAR_WAIT_TIME);
}
   8166c:	bf00      	nop
   8166e:	370c      	adds	r7, #12
   81670:	46bd      	mov	sp, r7
   81672:	bc80      	pop	{r7}
   81674:	4770      	bx	lr
   81676:	bf00      	nop
   81678:	20070da5 	.word	0x20070da5

0008167c <lcd_clear>:

void lcd_clear(void)
{
   8167c:	b580      	push	{r7, lr}
   8167e:	af00      	add	r7, sp, #0
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   81680:	2101      	movs	r1, #1
   81682:	2000      	movs	r0, #0
   81684:	4b03      	ldr	r3, [pc, #12]	; (81694 <lcd_clear+0x18>)
   81686:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   81688:	2003      	movs	r0, #3
   8168a:	4b03      	ldr	r3, [pc, #12]	; (81698 <lcd_clear+0x1c>)
   8168c:	4798      	blx	r3
}
   8168e:	bf00      	nop
   81690:	bd80      	pop	{r7, pc}
   81692:	bf00      	nop
   81694:	000819e1 	.word	0x000819e1
   81698:	000830b5 	.word	0x000830b5

0008169c <lcd_print_s>:
    sprintf(str, "%10lu", data);
    lcd_print_s(line, col, str);
}

void lcd_print_s(uint8_t line, uint8_t col, const char* str)
{
   8169c:	b590      	push	{r4, r7, lr}
   8169e:	b087      	sub	sp, #28
   816a0:	af00      	add	r7, sp, #0
   816a2:	4603      	mov	r3, r0
   816a4:	603a      	str	r2, [r7, #0]
   816a6:	71fb      	strb	r3, [r7, #7]
   816a8:	460b      	mov	r3, r1
   816aa:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   816ac:	4b75      	ldr	r3, [pc, #468]	; (81884 <lcd_print_s+0x1e8>)
   816ae:	4798      	blx	r3
   816b0:	6138      	str	r0, [r7, #16]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    
    while(lcdIsBusy | twi_is_busy())
   816b2:	e019      	b.n	816e8 <lcd_print_s+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   816b4:	4b74      	ldr	r3, [pc, #464]	; (81888 <lcd_print_s+0x1ec>)
   816b6:	4798      	blx	r3
   816b8:	4602      	mov	r2, r0
   816ba:	4b74      	ldr	r3, [pc, #464]	; (8188c <lcd_print_s+0x1f0>)
   816bc:	681b      	ldr	r3, [r3, #0]
   816be:	1ad3      	subs	r3, r2, r3
   816c0:	2b0a      	cmp	r3, #10
   816c2:	d911      	bls.n	816e8 <lcd_print_s+0x4c>
        {
            lcdIsBusy = false;
   816c4:	4b72      	ldr	r3, [pc, #456]	; (81890 <lcd_print_s+0x1f4>)
   816c6:	2200      	movs	r2, #0
   816c8:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   816ca:	4b72      	ldr	r3, [pc, #456]	; (81894 <lcd_print_s+0x1f8>)
   816cc:	681b      	ldr	r3, [r3, #0]
   816ce:	3301      	adds	r3, #1
   816d0:	4a70      	ldr	r2, [pc, #448]	; (81894 <lcd_print_s+0x1f8>)
   816d2:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   816d4:	f240 2102 	movw	r1, #514	; 0x202
   816d8:	486f      	ldr	r0, [pc, #444]	; (81898 <lcd_print_s+0x1fc>)
   816da:	4b70      	ldr	r3, [pc, #448]	; (8189c <lcd_print_s+0x200>)
   816dc:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   816de:	4970      	ldr	r1, [pc, #448]	; (818a0 <lcd_print_s+0x204>)
   816e0:	4870      	ldr	r0, [pc, #448]	; (818a4 <lcd_print_s+0x208>)
   816e2:	4b71      	ldr	r3, [pc, #452]	; (818a8 <lcd_print_s+0x20c>)
   816e4:	4798      	blx	r3
            break;
   816e6:	e009      	b.n	816fc <lcd_print_s+0x60>
    while(lcdIsBusy | twi_is_busy())
   816e8:	4b70      	ldr	r3, [pc, #448]	; (818ac <lcd_print_s+0x210>)
   816ea:	4798      	blx	r3
   816ec:	4603      	mov	r3, r0
   816ee:	461a      	mov	r2, r3
   816f0:	4b67      	ldr	r3, [pc, #412]	; (81890 <lcd_print_s+0x1f4>)
   816f2:	781b      	ldrb	r3, [r3, #0]
   816f4:	4313      	orrs	r3, r2
   816f6:	b2db      	uxtb	r3, r3
   816f8:	2b00      	cmp	r3, #0
   816fa:	d1db      	bne.n	816b4 <lcd_print_s+0x18>
        }
    }

    tx_packet->chip = 0x27;
   816fc:	693b      	ldr	r3, [r7, #16]
   816fe:	2227      	movs	r2, #39	; 0x27
   81700:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81704:	693b      	ldr	r3, [r7, #16]
   81706:	2200      	movs	r2, #0
   81708:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   8170a:	693b      	ldr	r3, [r7, #16]
   8170c:	2200      	movs	r2, #0
   8170e:	605a      	str	r2, [r3, #4]
    
    // Calculate display address
    switch(line)
   81710:	79fb      	ldrb	r3, [r7, #7]
   81712:	2b03      	cmp	r3, #3
   81714:	d006      	beq.n	81724 <lcd_print_s+0x88>
   81716:	2b04      	cmp	r3, #4
   81718:	d007      	beq.n	8172a <lcd_print_s+0x8e>
   8171a:	2b02      	cmp	r3, #2
   8171c:	d108      	bne.n	81730 <lcd_print_s+0x94>
    {
        case 2:
        addr = 0x80 | 0x40;   // set address to start of line 2
   8171e:	23c0      	movs	r3, #192	; 0xc0
   81720:	75fb      	strb	r3, [r7, #23]
        break;
   81722:	e008      	b.n	81736 <lcd_print_s+0x9a>
        case 3:
        addr = 0x80 | 0x14;   // set address to start of line 3
   81724:	2394      	movs	r3, #148	; 0x94
   81726:	75fb      	strb	r3, [r7, #23]
        break;
   81728:	e005      	b.n	81736 <lcd_print_s+0x9a>
        case 4:
        addr = 0x80 | 0x54;   // set address to start of line 4
   8172a:	23d4      	movs	r3, #212	; 0xd4
   8172c:	75fb      	strb	r3, [r7, #23]
        break;
   8172e:	e002      	b.n	81736 <lcd_print_s+0x9a>
        case 1:
        default:
        addr = 0x80;          // set address to start of line 1
   81730:	2380      	movs	r3, #128	; 0x80
   81732:	75fb      	strb	r3, [r7, #23]
        break;
   81734:	bf00      	nop
    }
    addr += col;  // set column in the selected line
   81736:	7dfa      	ldrb	r2, [r7, #23]
   81738:	79bb      	ldrb	r3, [r7, #6]
   8173a:	4413      	add	r3, r2
   8173c:	75fb      	strb	r3, [r7, #23]

    // Set cursor
    cmd = LCD_FUNTION_WRITE | backlight;
   8173e:	4b5c      	ldr	r3, [pc, #368]	; (818b0 <lcd_print_s+0x214>)
   81740:	781b      	ldrb	r3, [r3, #0]
   81742:	73fb      	strb	r3, [r7, #15]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   81744:	7dfb      	ldrb	r3, [r7, #23]
   81746:	f023 030f 	bic.w	r3, r3, #15
   8174a:	b2da      	uxtb	r2, r3
   8174c:	7bfb      	ldrb	r3, [r7, #15]
   8174e:	4313      	orrs	r3, r2
   81750:	b2db      	uxtb	r3, r3
   81752:	f043 0304 	orr.w	r3, r3, #4
   81756:	b2da      	uxtb	r2, r3
   81758:	693b      	ldr	r3, [r7, #16]
   8175a:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   8175c:	f997 3017 	ldrsb.w	r3, [r7, #23]
   81760:	f023 030f 	bic.w	r3, r3, #15
   81764:	b25a      	sxtb	r2, r3
   81766:	f997 300f 	ldrsb.w	r3, [r7, #15]
   8176a:	4313      	orrs	r3, r2
   8176c:	b25b      	sxtb	r3, r3
   8176e:	b2da      	uxtb	r2, r3
   81770:	693b      	ldr	r3, [r7, #16]
   81772:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   81774:	7dfb      	ldrb	r3, [r7, #23]
   81776:	011b      	lsls	r3, r3, #4
   81778:	b2da      	uxtb	r2, r3
   8177a:	7bfb      	ldrb	r3, [r7, #15]
   8177c:	4313      	orrs	r3, r2
   8177e:	b2db      	uxtb	r3, r3
   81780:	f043 0304 	orr.w	r3, r3, #4
   81784:	b2da      	uxtb	r2, r3
   81786:	693b      	ldr	r3, [r7, #16]
   81788:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   8178a:	7dfb      	ldrb	r3, [r7, #23]
   8178c:	011b      	lsls	r3, r3, #4
   8178e:	b25a      	sxtb	r2, r3
   81790:	f997 300f 	ldrsb.w	r3, [r7, #15]
   81794:	4313      	orrs	r3, r2
   81796:	b25b      	sxtb	r3, r3
   81798:	b2da      	uxtb	r2, r3
   8179a:	693b      	ldr	r3, [r7, #16]
   8179c:	72da      	strb	r2, [r3, #11]
    
    // write string ...
    cmd = LCD_WRITE_DDR | backlight;
   8179e:	4b44      	ldr	r3, [pc, #272]	; (818b0 <lcd_print_s+0x214>)
   817a0:	781b      	ldrb	r3, [r3, #0]
   817a2:	f043 0301 	orr.w	r3, r3, #1
   817a6:	73fb      	strb	r3, [r7, #15]
    for(count = 0; count < strlen(str); count++)
   817a8:	2300      	movs	r3, #0
   817aa:	75bb      	strb	r3, [r7, #22]
   817ac:	e04b      	b.n	81846 <lcd_print_s+0x1aa>
    {
        byte = str[count];
   817ae:	7dbb      	ldrb	r3, [r7, #22]
   817b0:	683a      	ldr	r2, [r7, #0]
   817b2:	4413      	add	r3, r2
   817b4:	781b      	ldrb	r3, [r3, #0]
   817b6:	73bb      	strb	r3, [r7, #14]
        tx_packet->buffer[4 + count * 4 + 0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   817b8:	7dbb      	ldrb	r3, [r7, #22]
   817ba:	3301      	adds	r3, #1
   817bc:	009b      	lsls	r3, r3, #2
   817be:	7bba      	ldrb	r2, [r7, #14]
   817c0:	f022 020f 	bic.w	r2, r2, #15
   817c4:	b2d1      	uxtb	r1, r2
   817c6:	7bfa      	ldrb	r2, [r7, #15]
   817c8:	430a      	orrs	r2, r1
   817ca:	b2d2      	uxtb	r2, r2
   817cc:	f042 0204 	orr.w	r2, r2, #4
   817d0:	b2d1      	uxtb	r1, r2
   817d2:	693a      	ldr	r2, [r7, #16]
   817d4:	4413      	add	r3, r2
   817d6:	460a      	mov	r2, r1
   817d8:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   817da:	7dbb      	ldrb	r3, [r7, #22]
   817dc:	3301      	adds	r3, #1
   817de:	009b      	lsls	r3, r3, #2
   817e0:	3301      	adds	r3, #1
   817e2:	f997 200e 	ldrsb.w	r2, [r7, #14]
   817e6:	f022 020f 	bic.w	r2, r2, #15
   817ea:	b251      	sxtb	r1, r2
   817ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
   817f0:	430a      	orrs	r2, r1
   817f2:	b252      	sxtb	r2, r2
   817f4:	b2d1      	uxtb	r1, r2
   817f6:	693a      	ldr	r2, [r7, #16]
   817f8:	4413      	add	r3, r2
   817fa:	460a      	mov	r2, r1
   817fc:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   817fe:	7dbb      	ldrb	r3, [r7, #22]
   81800:	3301      	adds	r3, #1
   81802:	009b      	lsls	r3, r3, #2
   81804:	3302      	adds	r3, #2
   81806:	7bba      	ldrb	r2, [r7, #14]
   81808:	0112      	lsls	r2, r2, #4
   8180a:	b2d1      	uxtb	r1, r2
   8180c:	7bfa      	ldrb	r2, [r7, #15]
   8180e:	430a      	orrs	r2, r1
   81810:	b2d2      	uxtb	r2, r2
   81812:	f042 0204 	orr.w	r2, r2, #4
   81816:	b2d1      	uxtb	r1, r2
   81818:	693a      	ldr	r2, [r7, #16]
   8181a:	4413      	add	r3, r2
   8181c:	460a      	mov	r2, r1
   8181e:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81820:	7dbb      	ldrb	r3, [r7, #22]
   81822:	3301      	adds	r3, #1
   81824:	009b      	lsls	r3, r3, #2
   81826:	3303      	adds	r3, #3
   81828:	7bba      	ldrb	r2, [r7, #14]
   8182a:	0112      	lsls	r2, r2, #4
   8182c:	b251      	sxtb	r1, r2
   8182e:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81832:	430a      	orrs	r2, r1
   81834:	b252      	sxtb	r2, r2
   81836:	b2d1      	uxtb	r1, r2
   81838:	693a      	ldr	r2, [r7, #16]
   8183a:	4413      	add	r3, r2
   8183c:	460a      	mov	r2, r1
   8183e:	721a      	strb	r2, [r3, #8]
    for(count = 0; count < strlen(str); count++)
   81840:	7dbb      	ldrb	r3, [r7, #22]
   81842:	3301      	adds	r3, #1
   81844:	75bb      	strb	r3, [r7, #22]
   81846:	7dbc      	ldrb	r4, [r7, #22]
   81848:	6838      	ldr	r0, [r7, #0]
   8184a:	4b1a      	ldr	r3, [pc, #104]	; (818b4 <lcd_print_s+0x218>)
   8184c:	4798      	blx	r3
   8184e:	4603      	mov	r3, r0
   81850:	429c      	cmp	r4, r3
   81852:	d3ac      	bcc.n	817ae <lcd_print_s+0x112>
    }
    tx_packet->length = 4 + count * 4;
   81854:	7dbb      	ldrb	r3, [r7, #22]
   81856:	3301      	adds	r3, #1
   81858:	009b      	lsls	r3, r3, #2
   8185a:	461a      	mov	r2, r3
   8185c:	693b      	ldr	r3, [r7, #16]
   8185e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    lcdIsBusy = true;
   81862:	4b0b      	ldr	r3, [pc, #44]	; (81890 <lcd_print_s+0x1f4>)
   81864:	2201      	movs	r2, #1
   81866:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81868:	6939      	ldr	r1, [r7, #16]
   8186a:	480e      	ldr	r0, [pc, #56]	; (818a4 <lcd_print_s+0x208>)
   8186c:	4b12      	ldr	r3, [pc, #72]	; (818b8 <lcd_print_s+0x21c>)
   8186e:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81870:	4b05      	ldr	r3, [pc, #20]	; (81888 <lcd_print_s+0x1ec>)
   81872:	4798      	blx	r3
   81874:	4602      	mov	r2, r0
   81876:	4b05      	ldr	r3, [pc, #20]	; (8188c <lcd_print_s+0x1f0>)
   81878:	601a      	str	r2, [r3, #0]
}
   8187a:	bf00      	nop
   8187c:	371c      	adds	r7, #28
   8187e:	46bd      	mov	sp, r7
   81880:	bd90      	pop	{r4, r7, pc}
   81882:	bf00      	nop
   81884:	00080f0d 	.word	0x00080f0d
   81888:	000830a1 	.word	0x000830a1
   8188c:	20070da8 	.word	0x20070da8
   81890:	20070da6 	.word	0x20070da6
   81894:	20070dac 	.word	0x20070dac
   81898:	4008c100 	.word	0x4008c100
   8189c:	0008024d 	.word	0x0008024d
   818a0:	20070db0 	.word	0x20070db0
   818a4:	4008c000 	.word	0x4008c000
   818a8:	0008154d 	.word	0x0008154d
   818ac:	00080ef9 	.word	0x00080ef9
   818b0:	20070da5 	.word	0x20070da5
   818b4:	000857f9 	.word	0x000857f9
   818b8:	0008100d 	.word	0x0008100d

000818bc <lcd_is_busy>:
    twi_pdc_master_write(TWI0, tx_packet);
    lcdStartTicks = getTicks();
}

uint8_t lcd_is_busy(void)
{
   818bc:	b480      	push	{r7}
   818be:	af00      	add	r7, sp, #0
    return lcdIsBusy;
   818c0:	4b02      	ldr	r3, [pc, #8]	; (818cc <lcd_is_busy+0x10>)
   818c2:	781b      	ldrb	r3, [r3, #0]
}
   818c4:	4618      	mov	r0, r3
   818c6:	46bd      	mov	sp, r7
   818c8:	bc80      	pop	{r7}
   818ca:	4770      	bx	lr
   818cc:	20070da6 	.word	0x20070da6

000818d0 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   818d0:	b580      	push	{r7, lr}
   818d2:	b084      	sub	sp, #16
   818d4:	af00      	add	r7, sp, #0
   818d6:	4603      	mov	r3, r0
   818d8:	460a      	mov	r2, r1
   818da:	71fb      	strb	r3, [r7, #7]
   818dc:	4613      	mov	r3, r2
   818de:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   818e0:	4b32      	ldr	r3, [pc, #200]	; (819ac <send_nibble+0xdc>)
   818e2:	4798      	blx	r3
   818e4:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   818e6:	e019      	b.n	8191c <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   818e8:	4b31      	ldr	r3, [pc, #196]	; (819b0 <send_nibble+0xe0>)
   818ea:	4798      	blx	r3
   818ec:	4602      	mov	r2, r0
   818ee:	4b31      	ldr	r3, [pc, #196]	; (819b4 <send_nibble+0xe4>)
   818f0:	681b      	ldr	r3, [r3, #0]
   818f2:	1ad3      	subs	r3, r2, r3
   818f4:	2b0a      	cmp	r3, #10
   818f6:	d911      	bls.n	8191c <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   818f8:	4b2f      	ldr	r3, [pc, #188]	; (819b8 <send_nibble+0xe8>)
   818fa:	2200      	movs	r2, #0
   818fc:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   818fe:	4b2f      	ldr	r3, [pc, #188]	; (819bc <send_nibble+0xec>)
   81900:	681b      	ldr	r3, [r3, #0]
   81902:	3301      	adds	r3, #1
   81904:	4a2d      	ldr	r2, [pc, #180]	; (819bc <send_nibble+0xec>)
   81906:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81908:	f240 2102 	movw	r1, #514	; 0x202
   8190c:	482c      	ldr	r0, [pc, #176]	; (819c0 <send_nibble+0xf0>)
   8190e:	4b2d      	ldr	r3, [pc, #180]	; (819c4 <send_nibble+0xf4>)
   81910:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81912:	492d      	ldr	r1, [pc, #180]	; (819c8 <send_nibble+0xf8>)
   81914:	482d      	ldr	r0, [pc, #180]	; (819cc <send_nibble+0xfc>)
   81916:	4b2e      	ldr	r3, [pc, #184]	; (819d0 <send_nibble+0x100>)
   81918:	4798      	blx	r3
            break;
   8191a:	e009      	b.n	81930 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   8191c:	4b2d      	ldr	r3, [pc, #180]	; (819d4 <send_nibble+0x104>)
   8191e:	4798      	blx	r3
   81920:	4603      	mov	r3, r0
   81922:	461a      	mov	r2, r3
   81924:	4b24      	ldr	r3, [pc, #144]	; (819b8 <send_nibble+0xe8>)
   81926:	781b      	ldrb	r3, [r3, #0]
   81928:	4313      	orrs	r3, r2
   8192a:	b2db      	uxtb	r3, r3
   8192c:	2b00      	cmp	r3, #0
   8192e:	d1db      	bne.n	818e8 <send_nibble+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81930:	68fb      	ldr	r3, [r7, #12]
   81932:	2227      	movs	r2, #39	; 0x27
   81934:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81938:	68fb      	ldr	r3, [r7, #12]
   8193a:	2200      	movs	r2, #0
   8193c:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   8193e:	68fb      	ldr	r3, [r7, #12]
   81940:	2200      	movs	r2, #0
   81942:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81944:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81948:	f003 030f 	and.w	r3, r3, #15
   8194c:	b25a      	sxtb	r2, r3
   8194e:	4b22      	ldr	r3, [pc, #136]	; (819d8 <send_nibble+0x108>)
   81950:	781b      	ldrb	r3, [r3, #0]
   81952:	b25b      	sxtb	r3, r3
   81954:	4313      	orrs	r3, r2
   81956:	b25b      	sxtb	r3, r3
   81958:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   8195a:	79bb      	ldrb	r3, [r7, #6]
   8195c:	011b      	lsls	r3, r3, #4
   8195e:	b2da      	uxtb	r2, r3
   81960:	79fb      	ldrb	r3, [r7, #7]
   81962:	4313      	orrs	r3, r2
   81964:	b2db      	uxtb	r3, r3
   81966:	f043 0304 	orr.w	r3, r3, #4
   8196a:	b2da      	uxtb	r2, r3
   8196c:	68fb      	ldr	r3, [r7, #12]
   8196e:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81970:	79bb      	ldrb	r3, [r7, #6]
   81972:	011b      	lsls	r3, r3, #4
   81974:	b25a      	sxtb	r2, r3
   81976:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8197a:	4313      	orrs	r3, r2
   8197c:	b25b      	sxtb	r3, r3
   8197e:	b2da      	uxtb	r2, r3
   81980:	68fb      	ldr	r3, [r7, #12]
   81982:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   81984:	68fb      	ldr	r3, [r7, #12]
   81986:	2202      	movs	r2, #2
   81988:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   8198c:	4b0a      	ldr	r3, [pc, #40]	; (819b8 <send_nibble+0xe8>)
   8198e:	2201      	movs	r2, #1
   81990:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81992:	68f9      	ldr	r1, [r7, #12]
   81994:	480d      	ldr	r0, [pc, #52]	; (819cc <send_nibble+0xfc>)
   81996:	4b11      	ldr	r3, [pc, #68]	; (819dc <send_nibble+0x10c>)
   81998:	4798      	blx	r3
    lcdStartTicks = getTicks();
   8199a:	4b05      	ldr	r3, [pc, #20]	; (819b0 <send_nibble+0xe0>)
   8199c:	4798      	blx	r3
   8199e:	4602      	mov	r2, r0
   819a0:	4b04      	ldr	r3, [pc, #16]	; (819b4 <send_nibble+0xe4>)
   819a2:	601a      	str	r2, [r3, #0]
}
   819a4:	bf00      	nop
   819a6:	3710      	adds	r7, #16
   819a8:	46bd      	mov	sp, r7
   819aa:	bd80      	pop	{r7, pc}
   819ac:	00080f0d 	.word	0x00080f0d
   819b0:	000830a1 	.word	0x000830a1
   819b4:	20070da8 	.word	0x20070da8
   819b8:	20070da6 	.word	0x20070da6
   819bc:	20070dac 	.word	0x20070dac
   819c0:	4008c100 	.word	0x4008c100
   819c4:	0008024d 	.word	0x0008024d
   819c8:	20070db0 	.word	0x20070db0
   819cc:	4008c000 	.word	0x4008c000
   819d0:	0008154d 	.word	0x0008154d
   819d4:	00080ef9 	.word	0x00080ef9
   819d8:	20070da5 	.word	0x20070da5
   819dc:	0008100d 	.word	0x0008100d

000819e0 <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   819e0:	b580      	push	{r7, lr}
   819e2:	b084      	sub	sp, #16
   819e4:	af00      	add	r7, sp, #0
   819e6:	4603      	mov	r3, r0
   819e8:	460a      	mov	r2, r1
   819ea:	71fb      	strb	r3, [r7, #7]
   819ec:	4613      	mov	r3, r2
   819ee:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   819f0:	4b3e      	ldr	r3, [pc, #248]	; (81aec <send_byte+0x10c>)
   819f2:	4798      	blx	r3
   819f4:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   819f6:	e019      	b.n	81a2c <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   819f8:	4b3d      	ldr	r3, [pc, #244]	; (81af0 <send_byte+0x110>)
   819fa:	4798      	blx	r3
   819fc:	4602      	mov	r2, r0
   819fe:	4b3d      	ldr	r3, [pc, #244]	; (81af4 <send_byte+0x114>)
   81a00:	681b      	ldr	r3, [r3, #0]
   81a02:	1ad3      	subs	r3, r2, r3
   81a04:	2b0a      	cmp	r3, #10
   81a06:	d911      	bls.n	81a2c <send_byte+0x4c>
        {
            lcdIsBusy = false;
   81a08:	4b3b      	ldr	r3, [pc, #236]	; (81af8 <send_byte+0x118>)
   81a0a:	2200      	movs	r2, #0
   81a0c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81a0e:	4b3b      	ldr	r3, [pc, #236]	; (81afc <send_byte+0x11c>)
   81a10:	681b      	ldr	r3, [r3, #0]
   81a12:	3301      	adds	r3, #1
   81a14:	4a39      	ldr	r2, [pc, #228]	; (81afc <send_byte+0x11c>)
   81a16:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81a18:	f240 2102 	movw	r1, #514	; 0x202
   81a1c:	4838      	ldr	r0, [pc, #224]	; (81b00 <send_byte+0x120>)
   81a1e:	4b39      	ldr	r3, [pc, #228]	; (81b04 <send_byte+0x124>)
   81a20:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81a22:	4939      	ldr	r1, [pc, #228]	; (81b08 <send_byte+0x128>)
   81a24:	4839      	ldr	r0, [pc, #228]	; (81b0c <send_byte+0x12c>)
   81a26:	4b3a      	ldr	r3, [pc, #232]	; (81b10 <send_byte+0x130>)
   81a28:	4798      	blx	r3
            break;
   81a2a:	e009      	b.n	81a40 <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   81a2c:	4b39      	ldr	r3, [pc, #228]	; (81b14 <send_byte+0x134>)
   81a2e:	4798      	blx	r3
   81a30:	4603      	mov	r3, r0
   81a32:	461a      	mov	r2, r3
   81a34:	4b30      	ldr	r3, [pc, #192]	; (81af8 <send_byte+0x118>)
   81a36:	781b      	ldrb	r3, [r3, #0]
   81a38:	4313      	orrs	r3, r2
   81a3a:	b2db      	uxtb	r3, r3
   81a3c:	2b00      	cmp	r3, #0
   81a3e:	d1db      	bne.n	819f8 <send_byte+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81a40:	68fb      	ldr	r3, [r7, #12]
   81a42:	2227      	movs	r2, #39	; 0x27
   81a44:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81a48:	68fb      	ldr	r3, [r7, #12]
   81a4a:	2200      	movs	r2, #0
   81a4c:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   81a4e:	68fb      	ldr	r3, [r7, #12]
   81a50:	2200      	movs	r2, #0
   81a52:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a58:	f003 030f 	and.w	r3, r3, #15
   81a5c:	b25a      	sxtb	r2, r3
   81a5e:	4b2e      	ldr	r3, [pc, #184]	; (81b18 <send_byte+0x138>)
   81a60:	781b      	ldrb	r3, [r3, #0]
   81a62:	b25b      	sxtb	r3, r3
   81a64:	4313      	orrs	r3, r2
   81a66:	b25b      	sxtb	r3, r3
   81a68:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   81a6a:	79bb      	ldrb	r3, [r7, #6]
   81a6c:	f023 030f 	bic.w	r3, r3, #15
   81a70:	b2da      	uxtb	r2, r3
   81a72:	79fb      	ldrb	r3, [r7, #7]
   81a74:	4313      	orrs	r3, r2
   81a76:	b2db      	uxtb	r3, r3
   81a78:	f043 0304 	orr.w	r3, r3, #4
   81a7c:	b2da      	uxtb	r2, r3
   81a7e:	68fb      	ldr	r3, [r7, #12]
   81a80:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   81a82:	f997 3006 	ldrsb.w	r3, [r7, #6]
   81a86:	f023 030f 	bic.w	r3, r3, #15
   81a8a:	b25a      	sxtb	r2, r3
   81a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a90:	4313      	orrs	r3, r2
   81a92:	b25b      	sxtb	r3, r3
   81a94:	b2da      	uxtb	r2, r3
   81a96:	68fb      	ldr	r3, [r7, #12]
   81a98:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81a9a:	79bb      	ldrb	r3, [r7, #6]
   81a9c:	011b      	lsls	r3, r3, #4
   81a9e:	b2da      	uxtb	r2, r3
   81aa0:	79fb      	ldrb	r3, [r7, #7]
   81aa2:	4313      	orrs	r3, r2
   81aa4:	b2db      	uxtb	r3, r3
   81aa6:	f043 0304 	orr.w	r3, r3, #4
   81aaa:	b2da      	uxtb	r2, r3
   81aac:	68fb      	ldr	r3, [r7, #12]
   81aae:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81ab0:	79bb      	ldrb	r3, [r7, #6]
   81ab2:	011b      	lsls	r3, r3, #4
   81ab4:	b25a      	sxtb	r2, r3
   81ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81aba:	4313      	orrs	r3, r2
   81abc:	b25b      	sxtb	r3, r3
   81abe:	b2da      	uxtb	r2, r3
   81ac0:	68fb      	ldr	r3, [r7, #12]
   81ac2:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   81ac4:	68fb      	ldr	r3, [r7, #12]
   81ac6:	2204      	movs	r2, #4
   81ac8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   81acc:	4b0a      	ldr	r3, [pc, #40]	; (81af8 <send_byte+0x118>)
   81ace:	2201      	movs	r2, #1
   81ad0:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81ad2:	68f9      	ldr	r1, [r7, #12]
   81ad4:	480d      	ldr	r0, [pc, #52]	; (81b0c <send_byte+0x12c>)
   81ad6:	4b11      	ldr	r3, [pc, #68]	; (81b1c <send_byte+0x13c>)
   81ad8:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81ada:	4b05      	ldr	r3, [pc, #20]	; (81af0 <send_byte+0x110>)
   81adc:	4798      	blx	r3
   81ade:	4602      	mov	r2, r0
   81ae0:	4b04      	ldr	r3, [pc, #16]	; (81af4 <send_byte+0x114>)
   81ae2:	601a      	str	r2, [r3, #0]
}
   81ae4:	bf00      	nop
   81ae6:	3710      	adds	r7, #16
   81ae8:	46bd      	mov	sp, r7
   81aea:	bd80      	pop	{r7, pc}
   81aec:	00080f0d 	.word	0x00080f0d
   81af0:	000830a1 	.word	0x000830a1
   81af4:	20070da8 	.word	0x20070da8
   81af8:	20070da6 	.word	0x20070da6
   81afc:	20070dac 	.word	0x20070dac
   81b00:	4008c100 	.word	0x4008c100
   81b04:	0008024d 	.word	0x0008024d
   81b08:	20070db0 	.word	0x20070db0
   81b0c:	4008c000 	.word	0x4008c000
   81b10:	0008154d 	.word	0x0008154d
   81b14:	00080ef9 	.word	0x00080ef9
   81b18:	20070da5 	.word	0x20070da5
   81b1c:	0008100d 	.word	0x0008100d

00081b20 <lcd_callback>:

static void lcd_callback(void)
{
   81b20:	b480      	push	{r7}
   81b22:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   81b24:	4b03      	ldr	r3, [pc, #12]	; (81b34 <lcd_callback+0x14>)
   81b26:	2200      	movs	r2, #0
   81b28:	701a      	strb	r2, [r3, #0]
}
   81b2a:	bf00      	nop
   81b2c:	46bd      	mov	sp, r7
   81b2e:	bc80      	pop	{r7}
   81b30:	4770      	bx	lr
   81b32:	bf00      	nop
   81b34:	20070da6 	.word	0x20070da6

00081b38 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   81b38:	b480      	push	{r7}
   81b3a:	b08b      	sub	sp, #44	; 0x2c
   81b3c:	af00      	add	r7, sp, #0
   81b3e:	6078      	str	r0, [r7, #4]
   81b40:	460b      	mov	r3, r1
   81b42:	70fb      	strb	r3, [r7, #3]
   81b44:	687b      	ldr	r3, [r7, #4]
   81b46:	627b      	str	r3, [r7, #36]	; 0x24
   81b48:	78fb      	ldrb	r3, [r7, #3]
   81b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81b50:	61fb      	str	r3, [r7, #28]
   81b52:	69fb      	ldr	r3, [r7, #28]
   81b54:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81b56:	69bb      	ldr	r3, [r7, #24]
   81b58:	095b      	lsrs	r3, r3, #5
   81b5a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81b5c:	697b      	ldr	r3, [r7, #20]
   81b5e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81b62:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81b66:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   81b68:	613b      	str	r3, [r7, #16]

	if (level) {
   81b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81b6e:	2b00      	cmp	r3, #0
   81b70:	d009      	beq.n	81b86 <ioport_set_pin_level+0x4e>
   81b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81b74:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81b76:	68fb      	ldr	r3, [r7, #12]
   81b78:	f003 031f 	and.w	r3, r3, #31
   81b7c:	2201      	movs	r2, #1
   81b7e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81b80:	693b      	ldr	r3, [r7, #16]
   81b82:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   81b84:	e008      	b.n	81b98 <ioport_set_pin_level+0x60>
   81b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81b88:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   81b8a:	68bb      	ldr	r3, [r7, #8]
   81b8c:	f003 031f 	and.w	r3, r3, #31
   81b90:	2201      	movs	r2, #1
   81b92:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81b94:	693b      	ldr	r3, [r7, #16]
   81b96:	635a      	str	r2, [r3, #52]	; 0x34
   81b98:	bf00      	nop
   81b9a:	372c      	adds	r7, #44	; 0x2c
   81b9c:	46bd      	mov	sp, r7
   81b9e:	bc80      	pop	{r7}
   81ba0:	4770      	bx	lr

00081ba2 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   81ba2:	b480      	push	{r7}
   81ba4:	b089      	sub	sp, #36	; 0x24
   81ba6:	af00      	add	r7, sp, #0
   81ba8:	6078      	str	r0, [r7, #4]
   81baa:	687b      	ldr	r3, [r7, #4]
   81bac:	61fb      	str	r3, [r7, #28]
   81bae:	69fb      	ldr	r3, [r7, #28]
   81bb0:	61bb      	str	r3, [r7, #24]
   81bb2:	69bb      	ldr	r3, [r7, #24]
   81bb4:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   81bb6:	697b      	ldr	r3, [r7, #20]
   81bb8:	095b      	lsrs	r3, r3, #5
   81bba:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81bbc:	693b      	ldr	r3, [r7, #16]
   81bbe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81bc2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81bc6:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   81bca:	69fb      	ldr	r3, [r7, #28]
   81bcc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81bce:	68fb      	ldr	r3, [r7, #12]
   81bd0:	f003 031f 	and.w	r3, r3, #31
   81bd4:	2101      	movs	r1, #1
   81bd6:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81bda:	4013      	ands	r3, r2
   81bdc:	2b00      	cmp	r3, #0
   81bde:	bf14      	ite	ne
   81be0:	2301      	movne	r3, #1
   81be2:	2300      	moveq	r3, #0
   81be4:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   81be6:	4618      	mov	r0, r3
   81be8:	3724      	adds	r7, #36	; 0x24
   81bea:	46bd      	mov	sp, r7
   81bec:	bc80      	pop	{r7}
   81bee:	4770      	bx	lr

00081bf0 <menu>:
static void print_menu_sensors(void);
static void print_menu_settings(void);
static void print_cursor(menu_info_t *info);

void menu(event_t event1)
{
   81bf0:	b580      	push	{r7, lr}
   81bf2:	b082      	sub	sp, #8
   81bf4:	af00      	add	r7, sp, #0
   81bf6:	4603      	mov	r3, r0
   81bf8:	71fb      	strb	r3, [r7, #7]
    switch (act_menu)
   81bfa:	4b28      	ldr	r3, [pc, #160]	; (81c9c <menu+0xac>)
   81bfc:	781b      	ldrb	r3, [r3, #0]
   81bfe:	2b09      	cmp	r3, #9
   81c00:	d847      	bhi.n	81c92 <menu+0xa2>
   81c02:	a201      	add	r2, pc, #4	; (adr r2, 81c08 <menu+0x18>)
   81c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81c08:	00081c31 	.word	0x00081c31
   81c0c:	00081c3b 	.word	0x00081c3b
   81c10:	00081c45 	.word	0x00081c45
   81c14:	00081c4f 	.word	0x00081c4f
   81c18:	00081c59 	.word	0x00081c59
   81c1c:	00081c77 	.word	0x00081c77
   81c20:	00081c81 	.word	0x00081c81
   81c24:	00081c63 	.word	0x00081c63
   81c28:	00081c6d 	.word	0x00081c6d
   81c2c:	00081c8b 	.word	0x00081c8b
    {
        case MENU_MAIN:
            menu_main(event1);
   81c30:	79fb      	ldrb	r3, [r7, #7]
   81c32:	4618      	mov	r0, r3
   81c34:	4b1a      	ldr	r3, [pc, #104]	; (81ca0 <menu+0xb0>)
   81c36:	4798      	blx	r3
            break;
   81c38:	e02c      	b.n	81c94 <menu+0xa4>
        case MENU_MATCH:
            menu_match(event1);
   81c3a:	79fb      	ldrb	r3, [r7, #7]
   81c3c:	4618      	mov	r0, r3
   81c3e:	4b19      	ldr	r3, [pc, #100]	; (81ca4 <menu+0xb4>)
   81c40:	4798      	blx	r3
            break;
   81c42:	e027      	b.n	81c94 <menu+0xa4>
        case MENU_SENSORS:
            menu_sensors(event1);
   81c44:	79fb      	ldrb	r3, [r7, #7]
   81c46:	4618      	mov	r0, r3
   81c48:	4b17      	ldr	r3, [pc, #92]	; (81ca8 <menu+0xb8>)
   81c4a:	4798      	blx	r3
            break;
   81c4c:	e022      	b.n	81c94 <menu+0xa4>
        case MENU_SETTINGS:
            menu_settings(event1);
   81c4e:	79fb      	ldrb	r3, [r7, #7]
   81c50:	4618      	mov	r0, r3
   81c52:	4b16      	ldr	r3, [pc, #88]	; (81cac <menu+0xbc>)
   81c54:	4798      	blx	r3
            break;
   81c56:	e01d      	b.n	81c94 <menu+0xa4>
        case MENU_BALL:
            menu_ball(event1);
   81c58:	79fb      	ldrb	r3, [r7, #7]
   81c5a:	4618      	mov	r0, r3
   81c5c:	4b14      	ldr	r3, [pc, #80]	; (81cb0 <menu+0xc0>)
   81c5e:	4798      	blx	r3
            break;
   81c60:	e018      	b.n	81c94 <menu+0xa4>
        case MENU_COMPASS:
            menu_compass(event1);
   81c62:	79fb      	ldrb	r3, [r7, #7]
   81c64:	4618      	mov	r0, r3
   81c66:	4b13      	ldr	r3, [pc, #76]	; (81cb4 <menu+0xc4>)
   81c68:	4798      	blx	r3
            break;
   81c6a:	e013      	b.n	81c94 <menu+0xa4>
        case MENU_COMPASS_CALIBRATION:
            menu_compass_calibration(event1);
   81c6c:	79fb      	ldrb	r3, [r7, #7]
   81c6e:	4618      	mov	r0, r3
   81c70:	4b11      	ldr	r3, [pc, #68]	; (81cb8 <menu+0xc8>)
   81c72:	4798      	blx	r3
            break;
   81c74:	e00e      	b.n	81c94 <menu+0xa4>
        case MENU_LINE:
            menu_line(event1);
   81c76:	79fb      	ldrb	r3, [r7, #7]
   81c78:	4618      	mov	r0, r3
   81c7a:	4b10      	ldr	r3, [pc, #64]	; (81cbc <menu+0xcc>)
   81c7c:	4798      	blx	r3
            break;
   81c7e:	e009      	b.n	81c94 <menu+0xa4>
        case MENU_LINE_CALIBRATION:
            menu_line_calibration(event1);
   81c80:	79fb      	ldrb	r3, [r7, #7]
   81c82:	4618      	mov	r0, r3
   81c84:	4b0e      	ldr	r3, [pc, #56]	; (81cc0 <menu+0xd0>)
   81c86:	4798      	blx	r3
            break;
   81c88:	e004      	b.n	81c94 <menu+0xa4>
        case MENU_SHUTDOWN:
            menu_shutdown(event1);
   81c8a:	79fb      	ldrb	r3, [r7, #7]
   81c8c:	4618      	mov	r0, r3
   81c8e:	4b0d      	ldr	r3, [pc, #52]	; (81cc4 <menu+0xd4>)
   81c90:	4798      	blx	r3
        default:
            break;
   81c92:	bf00      	nop
    }
}
   81c94:	bf00      	nop
   81c96:	3708      	adds	r7, #8
   81c98:	46bd      	mov	sp, r7
   81c9a:	bd80      	pop	{r7, pc}
   81c9c:	20070dbc 	.word	0x20070dbc
   81ca0:	00081cc9 	.word	0x00081cc9
   81ca4:	00081df1 	.word	0x00081df1
   81ca8:	00081e21 	.word	0x00081e21
   81cac:	0008231d 	.word	0x0008231d
   81cb0:	00081f45 	.word	0x00081f45
   81cb4:	00081f99 	.word	0x00081f99
   81cb8:	0008206d 	.word	0x0008206d
   81cbc:	0008216d 	.word	0x0008216d
   81cc0:	000822ed 	.word	0x000822ed
   81cc4:	00082441 	.word	0x00082441

00081cc8 <menu_main>:

static void menu_main(event_t event1)
{
   81cc8:	b580      	push	{r7, lr}
   81cca:	b082      	sub	sp, #8
   81ccc:	af00      	add	r7, sp, #0
   81cce:	4603      	mov	r3, r0
   81cd0:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   81cd2:	4b41      	ldr	r3, [pc, #260]	; (81dd8 <menu_main+0x110>)
   81cd4:	781b      	ldrb	r3, [r3, #0]
   81cd6:	2b00      	cmp	r3, #0
   81cd8:	d004      	beq.n	81ce4 <menu_main+0x1c>
    {
        print_menu = 0;
   81cda:	4b3f      	ldr	r3, [pc, #252]	; (81dd8 <menu_main+0x110>)
   81cdc:	2200      	movs	r2, #0
   81cde:	701a      	strb	r2, [r3, #0]
        print_menu_main();
   81ce0:	4b3e      	ldr	r3, [pc, #248]	; (81ddc <menu_main+0x114>)
   81ce2:	4798      	blx	r3
    }
    
    update_battery(0);
   81ce4:	2000      	movs	r0, #0
   81ce6:	4b3e      	ldr	r3, [pc, #248]	; (81de0 <menu_main+0x118>)
   81ce8:	4798      	blx	r3
    
    switch (event1)
   81cea:	79fb      	ldrb	r3, [r7, #7]
   81cec:	3b01      	subs	r3, #1
   81cee:	2b0f      	cmp	r3, #15
   81cf0:	d868      	bhi.n	81dc4 <menu_main+0xfc>
   81cf2:	a201      	add	r2, pc, #4	; (adr r2, 81cf8 <menu_main+0x30>)
   81cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81cf8:	00081d39 	.word	0x00081d39
   81cfc:	00081dc5 	.word	0x00081dc5
   81d00:	00081dc5 	.word	0x00081dc5
   81d04:	00081dc5 	.word	0x00081dc5
   81d08:	00081dc5 	.word	0x00081dc5
   81d0c:	00081dc5 	.word	0x00081dc5
   81d10:	00081d79 	.word	0x00081d79
   81d14:	00081dc5 	.word	0x00081dc5
   81d18:	00081dc5 	.word	0x00081dc5
   81d1c:	00081dc5 	.word	0x00081dc5
   81d20:	00081dc5 	.word	0x00081dc5
   81d24:	00081dc5 	.word	0x00081dc5
   81d28:	00081d59 	.word	0x00081d59
   81d2c:	00081dc5 	.word	0x00081dc5
   81d30:	00081dc5 	.word	0x00081dc5
   81d34:	00081db7 	.word	0x00081db7
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.main.act_cursor_line > menu_info.main.min_cursor_line)
   81d38:	4b2a      	ldr	r3, [pc, #168]	; (81de4 <menu_main+0x11c>)
   81d3a:	781a      	ldrb	r2, [r3, #0]
   81d3c:	4b29      	ldr	r3, [pc, #164]	; (81de4 <menu_main+0x11c>)
   81d3e:	789b      	ldrb	r3, [r3, #2]
   81d40:	429a      	cmp	r2, r3
   81d42:	d941      	bls.n	81dc8 <menu_main+0x100>
            {
                menu_info.main.act_cursor_line--;
   81d44:	4b27      	ldr	r3, [pc, #156]	; (81de4 <menu_main+0x11c>)
   81d46:	781b      	ldrb	r3, [r3, #0]
   81d48:	3b01      	subs	r3, #1
   81d4a:	b2da      	uxtb	r2, r3
   81d4c:	4b25      	ldr	r3, [pc, #148]	; (81de4 <menu_main+0x11c>)
   81d4e:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   81d50:	4824      	ldr	r0, [pc, #144]	; (81de4 <menu_main+0x11c>)
   81d52:	4b25      	ldr	r3, [pc, #148]	; (81de8 <menu_main+0x120>)
   81d54:	4798      	blx	r3
            }
            break;
   81d56:	e037      	b.n	81dc8 <menu_main+0x100>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.main.act_cursor_line < menu_info.main.max_cursor_line)
   81d58:	4b22      	ldr	r3, [pc, #136]	; (81de4 <menu_main+0x11c>)
   81d5a:	781a      	ldrb	r2, [r3, #0]
   81d5c:	4b21      	ldr	r3, [pc, #132]	; (81de4 <menu_main+0x11c>)
   81d5e:	78db      	ldrb	r3, [r3, #3]
   81d60:	429a      	cmp	r2, r3
   81d62:	d233      	bcs.n	81dcc <menu_main+0x104>
            {
                menu_info.main.act_cursor_line++;
   81d64:	4b1f      	ldr	r3, [pc, #124]	; (81de4 <menu_main+0x11c>)
   81d66:	781b      	ldrb	r3, [r3, #0]
   81d68:	3301      	adds	r3, #1
   81d6a:	b2da      	uxtb	r2, r3
   81d6c:	4b1d      	ldr	r3, [pc, #116]	; (81de4 <menu_main+0x11c>)
   81d6e:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   81d70:	481c      	ldr	r0, [pc, #112]	; (81de4 <menu_main+0x11c>)
   81d72:	4b1d      	ldr	r3, [pc, #116]	; (81de8 <menu_main+0x120>)
   81d74:	4798      	blx	r3
            }
            break;
   81d76:	e029      	b.n	81dcc <menu_main+0x104>
        case EVENT_BUTTON_MID_P:
            {
                switch (menu_info.main.act_cursor_line)
   81d78:	4b1a      	ldr	r3, [pc, #104]	; (81de4 <menu_main+0x11c>)
   81d7a:	781b      	ldrb	r3, [r3, #0]
   81d7c:	2b03      	cmp	r3, #3
   81d7e:	d00b      	beq.n	81d98 <menu_main+0xd0>
   81d80:	2b04      	cmp	r3, #4
   81d82:	d010      	beq.n	81da6 <menu_main+0xde>
   81d84:	2b02      	cmp	r3, #2
   81d86:	d000      	beq.n	81d8a <menu_main+0xc2>
                    case 4:
                        act_menu = MENU_SETTINGS;
                        print_menu = 1;
                        break;
                    default:
                        break;
   81d88:	e014      	b.n	81db4 <menu_main+0xec>
                        act_menu = MENU_MATCH;
   81d8a:	4b18      	ldr	r3, [pc, #96]	; (81dec <menu_main+0x124>)
   81d8c:	2201      	movs	r2, #1
   81d8e:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81d90:	4b11      	ldr	r3, [pc, #68]	; (81dd8 <menu_main+0x110>)
   81d92:	2201      	movs	r2, #1
   81d94:	701a      	strb	r2, [r3, #0]
                        break;
   81d96:	e00d      	b.n	81db4 <menu_main+0xec>
                        act_menu = MENU_SENSORS;
   81d98:	4b14      	ldr	r3, [pc, #80]	; (81dec <menu_main+0x124>)
   81d9a:	2202      	movs	r2, #2
   81d9c:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81d9e:	4b0e      	ldr	r3, [pc, #56]	; (81dd8 <menu_main+0x110>)
   81da0:	2201      	movs	r2, #1
   81da2:	701a      	strb	r2, [r3, #0]
                        break;
   81da4:	e006      	b.n	81db4 <menu_main+0xec>
                        act_menu = MENU_SETTINGS;
   81da6:	4b11      	ldr	r3, [pc, #68]	; (81dec <menu_main+0x124>)
   81da8:	2203      	movs	r2, #3
   81daa:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81dac:	4b0a      	ldr	r3, [pc, #40]	; (81dd8 <menu_main+0x110>)
   81dae:	2201      	movs	r2, #1
   81db0:	701a      	strb	r2, [r3, #0]
                        break;
   81db2:	bf00      	nop
                }
            }
            break;
   81db4:	e00b      	b.n	81dce <menu_main+0x106>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SHUTDOWN;
   81db6:	4b0d      	ldr	r3, [pc, #52]	; (81dec <menu_main+0x124>)
   81db8:	2209      	movs	r2, #9
   81dba:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81dbc:	4b06      	ldr	r3, [pc, #24]	; (81dd8 <menu_main+0x110>)
   81dbe:	2201      	movs	r2, #1
   81dc0:	701a      	strb	r2, [r3, #0]
            break;
   81dc2:	e004      	b.n	81dce <menu_main+0x106>
        default:
            break;
   81dc4:	bf00      	nop
   81dc6:	e002      	b.n	81dce <menu_main+0x106>
            break;
   81dc8:	bf00      	nop
   81dca:	e000      	b.n	81dce <menu_main+0x106>
            break;
   81dcc:	bf00      	nop
    }
}
   81dce:	bf00      	nop
   81dd0:	3708      	adds	r7, #8
   81dd2:	46bd      	mov	sp, r7
   81dd4:	bd80      	pop	{r7, pc}
   81dd6:	bf00      	nop
   81dd8:	2007018c 	.word	0x2007018c
   81ddc:	00082551 	.word	0x00082551
   81de0:	0008312d 	.word	0x0008312d
   81de4:	20070190 	.word	0x20070190
   81de8:	00082691 	.word	0x00082691
   81dec:	20070dbc 	.word	0x20070dbc

00081df0 <menu_match>:

static void menu_match(event_t event1)
{
   81df0:	b480      	push	{r7}
   81df2:	b083      	sub	sp, #12
   81df4:	af00      	add	r7, sp, #0
   81df6:	4603      	mov	r3, r0
   81df8:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81dfa:	79fb      	ldrb	r3, [r7, #7]
   81dfc:	2b10      	cmp	r3, #16
   81dfe:	d105      	bne.n	81e0c <menu_match+0x1c>
    {
        act_menu = MENU_MAIN;
   81e00:	4b05      	ldr	r3, [pc, #20]	; (81e18 <menu_match+0x28>)
   81e02:	2200      	movs	r2, #0
   81e04:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81e06:	4b05      	ldr	r3, [pc, #20]	; (81e1c <menu_match+0x2c>)
   81e08:	2201      	movs	r2, #1
   81e0a:	701a      	strb	r2, [r3, #0]
    }
}
   81e0c:	bf00      	nop
   81e0e:	370c      	adds	r7, #12
   81e10:	46bd      	mov	sp, r7
   81e12:	bc80      	pop	{r7}
   81e14:	4770      	bx	lr
   81e16:	bf00      	nop
   81e18:	20070dbc 	.word	0x20070dbc
   81e1c:	2007018c 	.word	0x2007018c

00081e20 <menu_sensors>:

static void menu_sensors(event_t event1)
{
   81e20:	b580      	push	{r7, lr}
   81e22:	b082      	sub	sp, #8
   81e24:	af00      	add	r7, sp, #0
   81e26:	4603      	mov	r3, r0
   81e28:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   81e2a:	4b40      	ldr	r3, [pc, #256]	; (81f2c <menu_sensors+0x10c>)
   81e2c:	781b      	ldrb	r3, [r3, #0]
   81e2e:	2b00      	cmp	r3, #0
   81e30:	d004      	beq.n	81e3c <menu_sensors+0x1c>
    {
        print_menu = 0;
   81e32:	4b3e      	ldr	r3, [pc, #248]	; (81f2c <menu_sensors+0x10c>)
   81e34:	2200      	movs	r2, #0
   81e36:	701a      	strb	r2, [r3, #0]
        print_menu_sensors();
   81e38:	4b3d      	ldr	r3, [pc, #244]	; (81f30 <menu_sensors+0x110>)
   81e3a:	4798      	blx	r3
    }
    
    switch(event1)
   81e3c:	79fb      	ldrb	r3, [r7, #7]
   81e3e:	3b01      	subs	r3, #1
   81e40:	2b0f      	cmp	r3, #15
   81e42:	d869      	bhi.n	81f18 <menu_sensors+0xf8>
   81e44:	a201      	add	r2, pc, #4	; (adr r2, 81e4c <menu_sensors+0x2c>)
   81e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81e4a:	bf00      	nop
   81e4c:	00081e8d 	.word	0x00081e8d
   81e50:	00081f19 	.word	0x00081f19
   81e54:	00081f19 	.word	0x00081f19
   81e58:	00081f19 	.word	0x00081f19
   81e5c:	00081f19 	.word	0x00081f19
   81e60:	00081f19 	.word	0x00081f19
   81e64:	00081ecd 	.word	0x00081ecd
   81e68:	00081f19 	.word	0x00081f19
   81e6c:	00081f19 	.word	0x00081f19
   81e70:	00081f19 	.word	0x00081f19
   81e74:	00081f19 	.word	0x00081f19
   81e78:	00081f19 	.word	0x00081f19
   81e7c:	00081ead 	.word	0x00081ead
   81e80:	00081f19 	.word	0x00081f19
   81e84:	00081f19 	.word	0x00081f19
   81e88:	00081f0b 	.word	0x00081f0b
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.sensors.act_cursor_line > menu_info.sensors.min_cursor_line)
   81e8c:	4b29      	ldr	r3, [pc, #164]	; (81f34 <menu_sensors+0x114>)
   81e8e:	791a      	ldrb	r2, [r3, #4]
   81e90:	4b28      	ldr	r3, [pc, #160]	; (81f34 <menu_sensors+0x114>)
   81e92:	799b      	ldrb	r3, [r3, #6]
   81e94:	429a      	cmp	r2, r3
   81e96:	d941      	bls.n	81f1c <menu_sensors+0xfc>
            {
                menu_info.sensors.act_cursor_line--;
   81e98:	4b26      	ldr	r3, [pc, #152]	; (81f34 <menu_sensors+0x114>)
   81e9a:	791b      	ldrb	r3, [r3, #4]
   81e9c:	3b01      	subs	r3, #1
   81e9e:	b2da      	uxtb	r2, r3
   81ea0:	4b24      	ldr	r3, [pc, #144]	; (81f34 <menu_sensors+0x114>)
   81ea2:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   81ea4:	4824      	ldr	r0, [pc, #144]	; (81f38 <menu_sensors+0x118>)
   81ea6:	4b25      	ldr	r3, [pc, #148]	; (81f3c <menu_sensors+0x11c>)
   81ea8:	4798      	blx	r3
            }
            break;
   81eaa:	e037      	b.n	81f1c <menu_sensors+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.sensors.act_cursor_line < menu_info.sensors.max_cursor_line)
   81eac:	4b21      	ldr	r3, [pc, #132]	; (81f34 <menu_sensors+0x114>)
   81eae:	791a      	ldrb	r2, [r3, #4]
   81eb0:	4b20      	ldr	r3, [pc, #128]	; (81f34 <menu_sensors+0x114>)
   81eb2:	79db      	ldrb	r3, [r3, #7]
   81eb4:	429a      	cmp	r2, r3
   81eb6:	d233      	bcs.n	81f20 <menu_sensors+0x100>
            {
                menu_info.sensors.act_cursor_line++;
   81eb8:	4b1e      	ldr	r3, [pc, #120]	; (81f34 <menu_sensors+0x114>)
   81eba:	791b      	ldrb	r3, [r3, #4]
   81ebc:	3301      	adds	r3, #1
   81ebe:	b2da      	uxtb	r2, r3
   81ec0:	4b1c      	ldr	r3, [pc, #112]	; (81f34 <menu_sensors+0x114>)
   81ec2:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   81ec4:	481c      	ldr	r0, [pc, #112]	; (81f38 <menu_sensors+0x118>)
   81ec6:	4b1d      	ldr	r3, [pc, #116]	; (81f3c <menu_sensors+0x11c>)
   81ec8:	4798      	blx	r3
            }
            break;
   81eca:	e029      	b.n	81f20 <menu_sensors+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.sensors.act_cursor_line)
   81ecc:	4b19      	ldr	r3, [pc, #100]	; (81f34 <menu_sensors+0x114>)
   81ece:	791b      	ldrb	r3, [r3, #4]
   81ed0:	2b02      	cmp	r3, #2
   81ed2:	d00b      	beq.n	81eec <menu_sensors+0xcc>
   81ed4:	2b03      	cmp	r3, #3
   81ed6:	d010      	beq.n	81efa <menu_sensors+0xda>
   81ed8:	2b01      	cmp	r3, #1
   81eda:	d000      	beq.n	81ede <menu_sensors+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   81edc:	e014      	b.n	81f08 <menu_sensors+0xe8>
                    act_menu = MENU_BALL;
   81ede:	4b18      	ldr	r3, [pc, #96]	; (81f40 <menu_sensors+0x120>)
   81ee0:	2204      	movs	r2, #4
   81ee2:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81ee4:	4b11      	ldr	r3, [pc, #68]	; (81f2c <menu_sensors+0x10c>)
   81ee6:	2201      	movs	r2, #1
   81ee8:	701a      	strb	r2, [r3, #0]
                    break;
   81eea:	e00d      	b.n	81f08 <menu_sensors+0xe8>
                    act_menu = MENU_COMPASS;
   81eec:	4b14      	ldr	r3, [pc, #80]	; (81f40 <menu_sensors+0x120>)
   81eee:	2207      	movs	r2, #7
   81ef0:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81ef2:	4b0e      	ldr	r3, [pc, #56]	; (81f2c <menu_sensors+0x10c>)
   81ef4:	2201      	movs	r2, #1
   81ef6:	701a      	strb	r2, [r3, #0]
                    break;
   81ef8:	e006      	b.n	81f08 <menu_sensors+0xe8>
                    act_menu = MENU_LINE;
   81efa:	4b11      	ldr	r3, [pc, #68]	; (81f40 <menu_sensors+0x120>)
   81efc:	2205      	movs	r2, #5
   81efe:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81f00:	4b0a      	ldr	r3, [pc, #40]	; (81f2c <menu_sensors+0x10c>)
   81f02:	2201      	movs	r2, #1
   81f04:	701a      	strb	r2, [r3, #0]
                    break;
   81f06:	bf00      	nop
            }
            break;
   81f08:	e00b      	b.n	81f22 <menu_sensors+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   81f0a:	4b0d      	ldr	r3, [pc, #52]	; (81f40 <menu_sensors+0x120>)
   81f0c:	2200      	movs	r2, #0
   81f0e:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81f10:	4b06      	ldr	r3, [pc, #24]	; (81f2c <menu_sensors+0x10c>)
   81f12:	2201      	movs	r2, #1
   81f14:	701a      	strb	r2, [r3, #0]
            break;
   81f16:	e004      	b.n	81f22 <menu_sensors+0x102>
        default:
            break;
   81f18:	bf00      	nop
   81f1a:	e002      	b.n	81f22 <menu_sensors+0x102>
            break;
   81f1c:	bf00      	nop
   81f1e:	e000      	b.n	81f22 <menu_sensors+0x102>
            break;
   81f20:	bf00      	nop
    }
}
   81f22:	bf00      	nop
   81f24:	3708      	adds	r7, #8
   81f26:	46bd      	mov	sp, r7
   81f28:	bd80      	pop	{r7, pc}
   81f2a:	bf00      	nop
   81f2c:	2007018c 	.word	0x2007018c
   81f30:	000825c1 	.word	0x000825c1
   81f34:	20070190 	.word	0x20070190
   81f38:	20070194 	.word	0x20070194
   81f3c:	00082691 	.word	0x00082691
   81f40:	20070dbc 	.word	0x20070dbc

00081f44 <menu_ball>:

static void menu_ball(event_t event1)
{
   81f44:	b580      	push	{r7, lr}
   81f46:	b082      	sub	sp, #8
   81f48:	af00      	add	r7, sp, #0
   81f4a:	4603      	mov	r3, r0
   81f4c:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   81f4e:	4b0d      	ldr	r3, [pc, #52]	; (81f84 <menu_ball+0x40>)
   81f50:	781b      	ldrb	r3, [r3, #0]
   81f52:	2b00      	cmp	r3, #0
   81f54:	d004      	beq.n	81f60 <menu_ball+0x1c>
    {
        print_menu = 0;
   81f56:	4b0b      	ldr	r3, [pc, #44]	; (81f84 <menu_ball+0x40>)
   81f58:	2200      	movs	r2, #0
   81f5a:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81f5c:	4b0a      	ldr	r3, [pc, #40]	; (81f88 <menu_ball+0x44>)
   81f5e:	4798      	blx	r3
    {
        lcd_print_s(2, 0, "Direction: no ball");
    }
    
    sprintf(sprintf_buf, "Having ball: %1d", rpi_rx.ibit.have_ball);*/
    lcd_print_s(3, 0, sprintf_buf);
   81f60:	4a0a      	ldr	r2, [pc, #40]	; (81f8c <menu_ball+0x48>)
   81f62:	2100      	movs	r1, #0
   81f64:	2003      	movs	r0, #3
   81f66:	4b0a      	ldr	r3, [pc, #40]	; (81f90 <menu_ball+0x4c>)
   81f68:	4798      	blx	r3
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81f6a:	79fb      	ldrb	r3, [r7, #7]
   81f6c:	2b10      	cmp	r3, #16
   81f6e:	d105      	bne.n	81f7c <menu_ball+0x38>
    {
        act_menu = MENU_SENSORS;
   81f70:	4b08      	ldr	r3, [pc, #32]	; (81f94 <menu_ball+0x50>)
   81f72:	2202      	movs	r2, #2
   81f74:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81f76:	4b03      	ldr	r3, [pc, #12]	; (81f84 <menu_ball+0x40>)
   81f78:	2201      	movs	r2, #1
   81f7a:	701a      	strb	r2, [r3, #0]
    }
}
   81f7c:	bf00      	nop
   81f7e:	3708      	adds	r7, #8
   81f80:	46bd      	mov	sp, r7
   81f82:	bd80      	pop	{r7, pc}
   81f84:	2007018c 	.word	0x2007018c
   81f88:	0008167d 	.word	0x0008167d
   81f8c:	20070e68 	.word	0x20070e68
   81f90:	0008169d 	.word	0x0008169d
   81f94:	20070dbc 	.word	0x20070dbc

00081f98 <menu_compass>:

static void menu_compass(event_t event1)
{
   81f98:	b590      	push	{r4, r7, lr}
   81f9a:	b083      	sub	sp, #12
   81f9c:	af00      	add	r7, sp, #0
   81f9e:	4603      	mov	r3, r0
   81fa0:	71fb      	strb	r3, [r7, #7]
    static uint16_t prev_direction = 0;
    
    if(print_menu)
   81fa2:	4b24      	ldr	r3, [pc, #144]	; (82034 <menu_compass+0x9c>)
   81fa4:	781b      	ldrb	r3, [r3, #0]
   81fa6:	2b00      	cmp	r3, #0
   81fa8:	d004      	beq.n	81fb4 <menu_compass+0x1c>
    {
        print_menu = 0;
   81faa:	4b22      	ldr	r3, [pc, #136]	; (82034 <menu_compass+0x9c>)
   81fac:	2200      	movs	r2, #0
   81fae:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81fb0:	4b21      	ldr	r3, [pc, #132]	; (82038 <menu_compass+0xa0>)
   81fb2:	4798      	blx	r3
    }
    
    update_compass();
   81fb4:	4b21      	ldr	r3, [pc, #132]	; (8203c <menu_compass+0xa4>)
   81fb6:	4798      	blx	r3
    if(direction != prev_direction)
   81fb8:	4b21      	ldr	r3, [pc, #132]	; (82040 <menu_compass+0xa8>)
   81fba:	881a      	ldrh	r2, [r3, #0]
   81fbc:	4b21      	ldr	r3, [pc, #132]	; (82044 <menu_compass+0xac>)
   81fbe:	881b      	ldrh	r3, [r3, #0]
   81fc0:	429a      	cmp	r2, r3
   81fc2:	d01e      	beq.n	82002 <menu_compass+0x6a>
    {
        prev_direction = direction;
   81fc4:	4b1e      	ldr	r3, [pc, #120]	; (82040 <menu_compass+0xa8>)
   81fc6:	881a      	ldrh	r2, [r3, #0]
   81fc8:	4b1e      	ldr	r3, [pc, #120]	; (82044 <menu_compass+0xac>)
   81fca:	801a      	strh	r2, [r3, #0]
        sprintf(sprintf_buf, "  Direction: %3.1f  ", (float)direction / 10.0);
   81fcc:	4b1c      	ldr	r3, [pc, #112]	; (82040 <menu_compass+0xa8>)
   81fce:	881a      	ldrh	r2, [r3, #0]
   81fd0:	4b1d      	ldr	r3, [pc, #116]	; (82048 <menu_compass+0xb0>)
   81fd2:	4610      	mov	r0, r2
   81fd4:	4798      	blx	r3
   81fd6:	4602      	mov	r2, r0
   81fd8:	4b1c      	ldr	r3, [pc, #112]	; (8204c <menu_compass+0xb4>)
   81fda:	4610      	mov	r0, r2
   81fdc:	4798      	blx	r3
   81fde:	4c1c      	ldr	r4, [pc, #112]	; (82050 <menu_compass+0xb8>)
   81fe0:	f04f 0200 	mov.w	r2, #0
   81fe4:	4b1b      	ldr	r3, [pc, #108]	; (82054 <menu_compass+0xbc>)
   81fe6:	47a0      	blx	r4
   81fe8:	4603      	mov	r3, r0
   81fea:	460c      	mov	r4, r1
   81fec:	461a      	mov	r2, r3
   81fee:	4623      	mov	r3, r4
   81ff0:	4919      	ldr	r1, [pc, #100]	; (82058 <menu_compass+0xc0>)
   81ff2:	481a      	ldr	r0, [pc, #104]	; (8205c <menu_compass+0xc4>)
   81ff4:	4c1a      	ldr	r4, [pc, #104]	; (82060 <menu_compass+0xc8>)
   81ff6:	47a0      	blx	r4
        lcd_print_s(2, 0, sprintf_buf);
   81ff8:	4a18      	ldr	r2, [pc, #96]	; (8205c <menu_compass+0xc4>)
   81ffa:	2100      	movs	r1, #0
   81ffc:	2002      	movs	r0, #2
   81ffe:	4b19      	ldr	r3, [pc, #100]	; (82064 <menu_compass+0xcc>)
   82000:	4798      	blx	r3
    }
    
    switch(event1)
   82002:	79fb      	ldrb	r3, [r7, #7]
   82004:	2b07      	cmp	r3, #7
   82006:	d002      	beq.n	8200e <menu_compass+0x76>
   82008:	2b10      	cmp	r3, #16
   8200a:	d007      	beq.n	8201c <menu_compass+0x84>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SENSORS;
            print_menu = 1;
            break;
        default:
            break;
   8200c:	e00d      	b.n	8202a <menu_compass+0x92>
            act_menu = MENU_COMPASS_CALIBRATION;
   8200e:	4b16      	ldr	r3, [pc, #88]	; (82068 <menu_compass+0xd0>)
   82010:	2208      	movs	r2, #8
   82012:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82014:	4b07      	ldr	r3, [pc, #28]	; (82034 <menu_compass+0x9c>)
   82016:	2201      	movs	r2, #1
   82018:	701a      	strb	r2, [r3, #0]
            break;
   8201a:	e006      	b.n	8202a <menu_compass+0x92>
            act_menu = MENU_SENSORS;
   8201c:	4b12      	ldr	r3, [pc, #72]	; (82068 <menu_compass+0xd0>)
   8201e:	2202      	movs	r2, #2
   82020:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82022:	4b04      	ldr	r3, [pc, #16]	; (82034 <menu_compass+0x9c>)
   82024:	2201      	movs	r2, #1
   82026:	701a      	strb	r2, [r3, #0]
            break;
   82028:	bf00      	nop
    }
}
   8202a:	bf00      	nop
   8202c:	370c      	adds	r7, #12
   8202e:	46bd      	mov	sp, r7
   82030:	bd90      	pop	{r4, r7, pc}
   82032:	bf00      	nop
   82034:	2007018c 	.word	0x2007018c
   82038:	0008167d 	.word	0x0008167d
   8203c:	000813b9 	.word	0x000813b9
   82040:	20070e38 	.word	0x20070e38
   82044:	20070dc0 	.word	0x20070dc0
   82048:	0008514d 	.word	0x0008514d
   8204c:	00084b15 	.word	0x00084b15
   82050:	00084e11 	.word	0x00084e11
   82054:	40240000 	.word	0x40240000
   82058:	0008971c 	.word	0x0008971c
   8205c:	20070e68 	.word	0x20070e68
   82060:	000857ad 	.word	0x000857ad
   82064:	0008169d 	.word	0x0008169d
   82068:	20070dbc 	.word	0x20070dbc

0008206c <menu_compass_calibration>:

static void menu_compass_calibration(event_t event1)
{
   8206c:	b580      	push	{r7, lr}
   8206e:	b084      	sub	sp, #16
   82070:	af00      	add	r7, sp, #0
   82072:	4603      	mov	r3, r0
   82074:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   82076:	4b2e      	ldr	r3, [pc, #184]	; (82130 <menu_compass_calibration+0xc4>)
   82078:	781b      	ldrb	r3, [r3, #0]
   8207a:	2b00      	cmp	r3, #0
   8207c:	d016      	beq.n	820ac <menu_compass_calibration+0x40>
    {
        print_menu = 0;
   8207e:	4b2c      	ldr	r3, [pc, #176]	; (82130 <menu_compass_calibration+0xc4>)
   82080:	2200      	movs	r2, #0
   82082:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   82084:	4b2b      	ldr	r3, [pc, #172]	; (82134 <menu_compass_calibration+0xc8>)
   82086:	4798      	blx	r3
        lcd_print_s(2, 1, "calibrate compass");
   82088:	4a2b      	ldr	r2, [pc, #172]	; (82138 <menu_compass_calibration+0xcc>)
   8208a:	2101      	movs	r1, #1
   8208c:	2002      	movs	r0, #2
   8208e:	4b2b      	ldr	r3, [pc, #172]	; (8213c <menu_compass_calibration+0xd0>)
   82090:	4798      	blx	r3
        sprintf(sprintf_buf, "  Direction: %1d  ", compass_cal_step + 1);
   82092:	4b2b      	ldr	r3, [pc, #172]	; (82140 <menu_compass_calibration+0xd4>)
   82094:	781b      	ldrb	r3, [r3, #0]
   82096:	3301      	adds	r3, #1
   82098:	461a      	mov	r2, r3
   8209a:	492a      	ldr	r1, [pc, #168]	; (82144 <menu_compass_calibration+0xd8>)
   8209c:	482a      	ldr	r0, [pc, #168]	; (82148 <menu_compass_calibration+0xdc>)
   8209e:	4b2b      	ldr	r3, [pc, #172]	; (8214c <menu_compass_calibration+0xe0>)
   820a0:	4798      	blx	r3
        lcd_print_s(3, 1, sprintf_buf);
   820a2:	4a29      	ldr	r2, [pc, #164]	; (82148 <menu_compass_calibration+0xdc>)
   820a4:	2101      	movs	r1, #1
   820a6:	2003      	movs	r0, #3
   820a8:	4b24      	ldr	r3, [pc, #144]	; (8213c <menu_compass_calibration+0xd0>)
   820aa:	4798      	blx	r3
    }
    
    if(event1 == EVENT_BUTTON_MID_P)
   820ac:	79fb      	ldrb	r3, [r7, #7]
   820ae:	2b07      	cmp	r3, #7
   820b0:	d139      	bne.n	82126 <menu_compass_calibration+0xba>
    {
        twi_packet_t *tx_packet = twi_get_tx_packet();
   820b2:	4b27      	ldr	r3, [pc, #156]	; (82150 <menu_compass_calibration+0xe4>)
   820b4:	4798      	blx	r3
   820b6:	60f8      	str	r0, [r7, #12]
        
        tx_packet->chip = 0x60;
   820b8:	68fb      	ldr	r3, [r7, #12]
   820ba:	2260      	movs	r2, #96	; 0x60
   820bc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        tx_packet->addr[0] = 0x0f;
   820c0:	68fb      	ldr	r3, [r7, #12]
   820c2:	220f      	movs	r2, #15
   820c4:	701a      	strb	r2, [r3, #0]
        tx_packet->addr_length = 1;
   820c6:	68fb      	ldr	r3, [r7, #12]
   820c8:	2201      	movs	r2, #1
   820ca:	605a      	str	r2, [r3, #4]
        
        tx_packet->buffer[0] = 0xff;
   820cc:	68fb      	ldr	r3, [r7, #12]
   820ce:	22ff      	movs	r2, #255	; 0xff
   820d0:	721a      	strb	r2, [r3, #8]
        tx_packet->length = 1;
   820d2:	68fb      	ldr	r3, [r7, #12]
   820d4:	2201      	movs	r2, #1
   820d6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        
        set_compass_is_busy();
   820da:	4b1e      	ldr	r3, [pc, #120]	; (82154 <menu_compass_calibration+0xe8>)
   820dc:	4798      	blx	r3
        twi_pdc_master_write(TWI0, tx_packet);
   820de:	68f9      	ldr	r1, [r7, #12]
   820e0:	481d      	ldr	r0, [pc, #116]	; (82158 <menu_compass_calibration+0xec>)
   820e2:	4b1e      	ldr	r3, [pc, #120]	; (8215c <menu_compass_calibration+0xf0>)
   820e4:	4798      	blx	r3
        while(compass_is_busy());
   820e6:	bf00      	nop
   820e8:	4b1d      	ldr	r3, [pc, #116]	; (82160 <menu_compass_calibration+0xf4>)
   820ea:	4798      	blx	r3
   820ec:	4603      	mov	r3, r0
   820ee:	2b00      	cmp	r3, #0
   820f0:	d1fa      	bne.n	820e8 <menu_compass_calibration+0x7c>
        mdelay(500);
   820f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   820f6:	4b1b      	ldr	r3, [pc, #108]	; (82164 <menu_compass_calibration+0xf8>)
   820f8:	4798      	blx	r3
        
        compass_cal_step++;
   820fa:	4b11      	ldr	r3, [pc, #68]	; (82140 <menu_compass_calibration+0xd4>)
   820fc:	781b      	ldrb	r3, [r3, #0]
   820fe:	3301      	adds	r3, #1
   82100:	b2da      	uxtb	r2, r3
   82102:	4b0f      	ldr	r3, [pc, #60]	; (82140 <menu_compass_calibration+0xd4>)
   82104:	701a      	strb	r2, [r3, #0]
        
        if(compass_cal_step == 4)
   82106:	4b0e      	ldr	r3, [pc, #56]	; (82140 <menu_compass_calibration+0xd4>)
   82108:	781b      	ldrb	r3, [r3, #0]
   8210a:	2b04      	cmp	r3, #4
   8210c:	d108      	bne.n	82120 <menu_compass_calibration+0xb4>
        {
            compass_cal_step = 0;
   8210e:	4b0c      	ldr	r3, [pc, #48]	; (82140 <menu_compass_calibration+0xd4>)
   82110:	2200      	movs	r2, #0
   82112:	701a      	strb	r2, [r3, #0]
            act_menu = MENU_COMPASS;
   82114:	4b14      	ldr	r3, [pc, #80]	; (82168 <menu_compass_calibration+0xfc>)
   82116:	2207      	movs	r2, #7
   82118:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   8211a:	4b05      	ldr	r3, [pc, #20]	; (82130 <menu_compass_calibration+0xc4>)
   8211c:	2201      	movs	r2, #1
   8211e:	701a      	strb	r2, [r3, #0]
        }
        print_menu = 1;
   82120:	4b03      	ldr	r3, [pc, #12]	; (82130 <menu_compass_calibration+0xc4>)
   82122:	2201      	movs	r2, #1
   82124:	701a      	strb	r2, [r3, #0]
    }
}
   82126:	bf00      	nop
   82128:	3710      	adds	r7, #16
   8212a:	46bd      	mov	sp, r7
   8212c:	bd80      	pop	{r7, pc}
   8212e:	bf00      	nop
   82130:	2007018c 	.word	0x2007018c
   82134:	0008167d 	.word	0x0008167d
   82138:	00089734 	.word	0x00089734
   8213c:	0008169d 	.word	0x0008169d
   82140:	20070dbd 	.word	0x20070dbd
   82144:	00089748 	.word	0x00089748
   82148:	20070e68 	.word	0x20070e68
   8214c:	000857ad 	.word	0x000857ad
   82150:	00080f0d 	.word	0x00080f0d
   82154:	00081449 	.word	0x00081449
   82158:	4008c000 	.word	0x4008c000
   8215c:	0008100d 	.word	0x0008100d
   82160:	00081461 	.word	0x00081461
   82164:	000830b5 	.word	0x000830b5
   82168:	20070dbc 	.word	0x20070dbc

0008216c <menu_line>:

static void menu_line(event_t event1)
{
   8216c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8216e:	b08f      	sub	sp, #60	; 0x3c
   82170:	af0a      	add	r7, sp, #40	; 0x28
   82172:	4603      	mov	r3, r0
   82174:	73fb      	strb	r3, [r7, #15]
    static uint16_t prev_line_values;

    if(print_menu)
   82176:	4b52      	ldr	r3, [pc, #328]	; (822c0 <menu_line+0x154>)
   82178:	781b      	ldrb	r3, [r3, #0]
   8217a:	2b00      	cmp	r3, #0
   8217c:	d001      	beq.n	82182 <menu_line+0x16>
    {
        lcd_clear();
   8217e:	4b51      	ldr	r3, [pc, #324]	; (822c4 <menu_line+0x158>)
   82180:	4798      	blx	r3
    }

    if(stm.line.all != prev_line_values || print_menu)
   82182:	4b51      	ldr	r3, [pc, #324]	; (822c8 <menu_line+0x15c>)
   82184:	889a      	ldrh	r2, [r3, #4]
   82186:	4b51      	ldr	r3, [pc, #324]	; (822cc <menu_line+0x160>)
   82188:	881b      	ldrh	r3, [r3, #0]
   8218a:	429a      	cmp	r2, r3
   8218c:	d104      	bne.n	82198 <menu_line+0x2c>
   8218e:	4b4c      	ldr	r3, [pc, #304]	; (822c0 <menu_line+0x154>)
   82190:	781b      	ldrb	r3, [r3, #0]
   82192:	2b00      	cmp	r3, #0
   82194:	f000 8082 	beq.w	8229c <menu_line+0x130>
    {
        sprintf(sprintf_buf, "See: %1d", stm.line.see);
   82198:	4b4b      	ldr	r3, [pc, #300]	; (822c8 <menu_line+0x15c>)
   8219a:	799b      	ldrb	r3, [r3, #6]
   8219c:	f3c3 0300 	ubfx	r3, r3, #0, #1
   821a0:	b2db      	uxtb	r3, r3
   821a2:	461a      	mov	r2, r3
   821a4:	494a      	ldr	r1, [pc, #296]	; (822d0 <menu_line+0x164>)
   821a6:	484b      	ldr	r0, [pc, #300]	; (822d4 <menu_line+0x168>)
   821a8:	4b4b      	ldr	r3, [pc, #300]	; (822d8 <menu_line+0x16c>)
   821aa:	4798      	blx	r3
        lcd_print_s(1, 0, sprintf_buf);
   821ac:	4a49      	ldr	r2, [pc, #292]	; (822d4 <menu_line+0x168>)
   821ae:	2100      	movs	r1, #0
   821b0:	2001      	movs	r0, #1
   821b2:	4b4a      	ldr	r3, [pc, #296]	; (822dc <menu_line+0x170>)
   821b4:	4798      	blx	r3
        sprintf(sprintf_buf, "Esc: %4d", stm.line.esc - 180);
   821b6:	4b44      	ldr	r3, [pc, #272]	; (822c8 <menu_line+0x15c>)
   821b8:	88db      	ldrh	r3, [r3, #6]
   821ba:	f3c3 0348 	ubfx	r3, r3, #1, #9
   821be:	b29b      	uxth	r3, r3
   821c0:	3bb4      	subs	r3, #180	; 0xb4
   821c2:	461a      	mov	r2, r3
   821c4:	4946      	ldr	r1, [pc, #280]	; (822e0 <menu_line+0x174>)
   821c6:	4843      	ldr	r0, [pc, #268]	; (822d4 <menu_line+0x168>)
   821c8:	4b43      	ldr	r3, [pc, #268]	; (822d8 <menu_line+0x16c>)
   821ca:	4798      	blx	r3
        lcd_print_s(2, 0, sprintf_buf);
   821cc:	4a41      	ldr	r2, [pc, #260]	; (822d4 <menu_line+0x168>)
   821ce:	2100      	movs	r1, #0
   821d0:	2002      	movs	r0, #2
   821d2:	4b42      	ldr	r3, [pc, #264]	; (822dc <menu_line+0x170>)
   821d4:	4798      	blx	r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   821d6:	4b3c      	ldr	r3, [pc, #240]	; (822c8 <menu_line+0x15c>)
   821d8:	791b      	ldrb	r3, [r3, #4]
   821da:	f3c3 0300 	ubfx	r3, r3, #0, #1
   821de:	b2db      	uxtb	r3, r3
   821e0:	469e      	mov	lr, r3
   821e2:	4b39      	ldr	r3, [pc, #228]	; (822c8 <menu_line+0x15c>)
   821e4:	791b      	ldrb	r3, [r3, #4]
   821e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   821ea:	b2db      	uxtb	r3, r3
   821ec:	469c      	mov	ip, r3
        stm.line.single.segment_3, stm.line.single.segment_4, stm.line.single.segment_5, stm.line.single.segment_6, stm.line.single.segment_7,
   821ee:	4b36      	ldr	r3, [pc, #216]	; (822c8 <menu_line+0x15c>)
   821f0:	791b      	ldrb	r3, [r3, #4]
   821f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
   821f6:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   821f8:	461a      	mov	r2, r3
        stm.line.single.segment_3, stm.line.single.segment_4, stm.line.single.segment_5, stm.line.single.segment_6, stm.line.single.segment_7,
   821fa:	4b33      	ldr	r3, [pc, #204]	; (822c8 <menu_line+0x15c>)
   821fc:	791b      	ldrb	r3, [r3, #4]
   821fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   82202:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82204:	4619      	mov	r1, r3
        stm.line.single.segment_3, stm.line.single.segment_4, stm.line.single.segment_5, stm.line.single.segment_6, stm.line.single.segment_7,
   82206:	4b30      	ldr	r3, [pc, #192]	; (822c8 <menu_line+0x15c>)
   82208:	791b      	ldrb	r3, [r3, #4]
   8220a:	f3c3 1300 	ubfx	r3, r3, #4, #1
   8220e:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82210:	4618      	mov	r0, r3
        stm.line.single.segment_3, stm.line.single.segment_4, stm.line.single.segment_5, stm.line.single.segment_6, stm.line.single.segment_7,
   82212:	4b2d      	ldr	r3, [pc, #180]	; (822c8 <menu_line+0x15c>)
   82214:	791b      	ldrb	r3, [r3, #4]
   82216:	f3c3 1340 	ubfx	r3, r3, #5, #1
   8221a:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   8221c:	461c      	mov	r4, r3
        stm.line.single.segment_3, stm.line.single.segment_4, stm.line.single.segment_5, stm.line.single.segment_6, stm.line.single.segment_7,
   8221e:	4b2a      	ldr	r3, [pc, #168]	; (822c8 <menu_line+0x15c>)
   82220:	791b      	ldrb	r3, [r3, #4]
   82222:	f3c3 1380 	ubfx	r3, r3, #6, #1
   82226:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82228:	461d      	mov	r5, r3
        stm.line.single.segment_8, stm.line.single.segment_9, stm.line.single.segment_10, stm.line.single.segment_11, stm.line.single.segment_12);
   8222a:	4b27      	ldr	r3, [pc, #156]	; (822c8 <menu_line+0x15c>)
   8222c:	791b      	ldrb	r3, [r3, #4]
   8222e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   82232:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82234:	461e      	mov	r6, r3
        stm.line.single.segment_8, stm.line.single.segment_9, stm.line.single.segment_10, stm.line.single.segment_11, stm.line.single.segment_12);
   82236:	4b24      	ldr	r3, [pc, #144]	; (822c8 <menu_line+0x15c>)
   82238:	795b      	ldrb	r3, [r3, #5]
   8223a:	f3c3 0300 	ubfx	r3, r3, #0, #1
   8223e:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82240:	60bb      	str	r3, [r7, #8]
        stm.line.single.segment_8, stm.line.single.segment_9, stm.line.single.segment_10, stm.line.single.segment_11, stm.line.single.segment_12);
   82242:	4b21      	ldr	r3, [pc, #132]	; (822c8 <menu_line+0x15c>)
   82244:	795b      	ldrb	r3, [r3, #5]
   82246:	f3c3 0340 	ubfx	r3, r3, #1, #1
   8224a:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   8224c:	607b      	str	r3, [r7, #4]
        stm.line.single.segment_8, stm.line.single.segment_9, stm.line.single.segment_10, stm.line.single.segment_11, stm.line.single.segment_12);
   8224e:	4b1e      	ldr	r3, [pc, #120]	; (822c8 <menu_line+0x15c>)
   82250:	795b      	ldrb	r3, [r3, #5]
   82252:	f3c3 0380 	ubfx	r3, r3, #2, #1
   82256:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82258:	603b      	str	r3, [r7, #0]
        stm.line.single.segment_8, stm.line.single.segment_9, stm.line.single.segment_10, stm.line.single.segment_11, stm.line.single.segment_12);
   8225a:	4b1b      	ldr	r3, [pc, #108]	; (822c8 <menu_line+0x15c>)
   8225c:	795b      	ldrb	r3, [r3, #5]
   8225e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   82262:	b2db      	uxtb	r3, r3
        sprintf(sprintf_buf, "Line: %1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d", stm.line.single.segment_1, stm.line.single.segment_2,
   82264:	9309      	str	r3, [sp, #36]	; 0x24
   82266:	683b      	ldr	r3, [r7, #0]
   82268:	9308      	str	r3, [sp, #32]
   8226a:	687b      	ldr	r3, [r7, #4]
   8226c:	9307      	str	r3, [sp, #28]
   8226e:	68bb      	ldr	r3, [r7, #8]
   82270:	9306      	str	r3, [sp, #24]
   82272:	9605      	str	r6, [sp, #20]
   82274:	9504      	str	r5, [sp, #16]
   82276:	9403      	str	r4, [sp, #12]
   82278:	9002      	str	r0, [sp, #8]
   8227a:	9101      	str	r1, [sp, #4]
   8227c:	9200      	str	r2, [sp, #0]
   8227e:	4663      	mov	r3, ip
   82280:	4672      	mov	r2, lr
   82282:	4918      	ldr	r1, [pc, #96]	; (822e4 <menu_line+0x178>)
   82284:	4813      	ldr	r0, [pc, #76]	; (822d4 <menu_line+0x168>)
   82286:	4c14      	ldr	r4, [pc, #80]	; (822d8 <menu_line+0x16c>)
   82288:	47a0      	blx	r4
        lcd_print_s(3, 0, sprintf_buf);
   8228a:	4a12      	ldr	r2, [pc, #72]	; (822d4 <menu_line+0x168>)
   8228c:	2100      	movs	r1, #0
   8228e:	2003      	movs	r0, #3
   82290:	4b12      	ldr	r3, [pc, #72]	; (822dc <menu_line+0x170>)
   82292:	4798      	blx	r3
        prev_line_values = stm.line.all;
   82294:	4b0c      	ldr	r3, [pc, #48]	; (822c8 <menu_line+0x15c>)
   82296:	889a      	ldrh	r2, [r3, #4]
   82298:	4b0c      	ldr	r3, [pc, #48]	; (822cc <menu_line+0x160>)
   8229a:	801a      	strh	r2, [r3, #0]
    }
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   8229c:	7bfb      	ldrb	r3, [r7, #15]
   8229e:	2b10      	cmp	r3, #16
   822a0:	d106      	bne.n	822b0 <menu_line+0x144>
    {
        act_menu = MENU_SENSORS;
   822a2:	4b11      	ldr	r3, [pc, #68]	; (822e8 <menu_line+0x17c>)
   822a4:	2202      	movs	r2, #2
   822a6:	701a      	strb	r2, [r3, #0]
        print_menu = true;
   822a8:	4b05      	ldr	r3, [pc, #20]	; (822c0 <menu_line+0x154>)
   822aa:	2201      	movs	r2, #1
   822ac:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        print_menu = false;
    }
}
   822ae:	e002      	b.n	822b6 <menu_line+0x14a>
        print_menu = false;
   822b0:	4b03      	ldr	r3, [pc, #12]	; (822c0 <menu_line+0x154>)
   822b2:	2200      	movs	r2, #0
   822b4:	701a      	strb	r2, [r3, #0]
}
   822b6:	bf00      	nop
   822b8:	3714      	adds	r7, #20
   822ba:	46bd      	mov	sp, r7
   822bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   822be:	bf00      	nop
   822c0:	2007018c 	.word	0x2007018c
   822c4:	0008167d 	.word	0x0008167d
   822c8:	20070e20 	.word	0x20070e20
   822cc:	20070dc2 	.word	0x20070dc2
   822d0:	0008975c 	.word	0x0008975c
   822d4:	20070e68 	.word	0x20070e68
   822d8:	000857ad 	.word	0x000857ad
   822dc:	0008169d 	.word	0x0008169d
   822e0:	00089768 	.word	0x00089768
   822e4:	00089774 	.word	0x00089774
   822e8:	20070dbc 	.word	0x20070dbc

000822ec <menu_line_calibration>:

static void menu_line_calibration(event_t event1)
{
   822ec:	b480      	push	{r7}
   822ee:	b083      	sub	sp, #12
   822f0:	af00      	add	r7, sp, #0
   822f2:	4603      	mov	r3, r0
   822f4:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   822f6:	79fb      	ldrb	r3, [r7, #7]
   822f8:	2b10      	cmp	r3, #16
   822fa:	d105      	bne.n	82308 <menu_line_calibration+0x1c>
    {
        act_menu = MENU_LINE;
   822fc:	4b05      	ldr	r3, [pc, #20]	; (82314 <menu_line_calibration+0x28>)
   822fe:	2205      	movs	r2, #5
   82300:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   82302:	4b05      	ldr	r3, [pc, #20]	; (82318 <menu_line_calibration+0x2c>)
   82304:	2201      	movs	r2, #1
   82306:	701a      	strb	r2, [r3, #0]
    }
}
   82308:	bf00      	nop
   8230a:	370c      	adds	r7, #12
   8230c:	46bd      	mov	sp, r7
   8230e:	bc80      	pop	{r7}
   82310:	4770      	bx	lr
   82312:	bf00      	nop
   82314:	20070dbc 	.word	0x20070dbc
   82318:	2007018c 	.word	0x2007018c

0008231c <menu_settings>:

static void menu_settings(event_t event1)
{
   8231c:	b580      	push	{r7, lr}
   8231e:	b082      	sub	sp, #8
   82320:	af00      	add	r7, sp, #0
   82322:	4603      	mov	r3, r0
   82324:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   82326:	4b40      	ldr	r3, [pc, #256]	; (82428 <menu_settings+0x10c>)
   82328:	781b      	ldrb	r3, [r3, #0]
   8232a:	2b00      	cmp	r3, #0
   8232c:	d004      	beq.n	82338 <menu_settings+0x1c>
    {
        print_menu = 0;
   8232e:	4b3e      	ldr	r3, [pc, #248]	; (82428 <menu_settings+0x10c>)
   82330:	2200      	movs	r2, #0
   82332:	701a      	strb	r2, [r3, #0]
        print_menu_settings();
   82334:	4b3d      	ldr	r3, [pc, #244]	; (8242c <menu_settings+0x110>)
   82336:	4798      	blx	r3
    }
    
    switch(event1)
   82338:	79fb      	ldrb	r3, [r7, #7]
   8233a:	3b01      	subs	r3, #1
   8233c:	2b0f      	cmp	r3, #15
   8233e:	d869      	bhi.n	82414 <menu_settings+0xf8>
   82340:	a201      	add	r2, pc, #4	; (adr r2, 82348 <menu_settings+0x2c>)
   82342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82346:	bf00      	nop
   82348:	00082389 	.word	0x00082389
   8234c:	00082415 	.word	0x00082415
   82350:	00082415 	.word	0x00082415
   82354:	00082415 	.word	0x00082415
   82358:	00082415 	.word	0x00082415
   8235c:	00082415 	.word	0x00082415
   82360:	000823c9 	.word	0x000823c9
   82364:	00082415 	.word	0x00082415
   82368:	00082415 	.word	0x00082415
   8236c:	00082415 	.word	0x00082415
   82370:	00082415 	.word	0x00082415
   82374:	00082415 	.word	0x00082415
   82378:	000823a9 	.word	0x000823a9
   8237c:	00082415 	.word	0x00082415
   82380:	00082415 	.word	0x00082415
   82384:	00082407 	.word	0x00082407
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.settings.act_cursor_line > menu_info.settings.min_cursor_line)
   82388:	4b29      	ldr	r3, [pc, #164]	; (82430 <menu_settings+0x114>)
   8238a:	7a1a      	ldrb	r2, [r3, #8]
   8238c:	4b28      	ldr	r3, [pc, #160]	; (82430 <menu_settings+0x114>)
   8238e:	7a9b      	ldrb	r3, [r3, #10]
   82390:	429a      	cmp	r2, r3
   82392:	d941      	bls.n	82418 <menu_settings+0xfc>
            {
                menu_info.settings.act_cursor_line--;
   82394:	4b26      	ldr	r3, [pc, #152]	; (82430 <menu_settings+0x114>)
   82396:	7a1b      	ldrb	r3, [r3, #8]
   82398:	3b01      	subs	r3, #1
   8239a:	b2da      	uxtb	r2, r3
   8239c:	4b24      	ldr	r3, [pc, #144]	; (82430 <menu_settings+0x114>)
   8239e:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   823a0:	4824      	ldr	r0, [pc, #144]	; (82434 <menu_settings+0x118>)
   823a2:	4b25      	ldr	r3, [pc, #148]	; (82438 <menu_settings+0x11c>)
   823a4:	4798      	blx	r3
            }
            break;
   823a6:	e037      	b.n	82418 <menu_settings+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.settings.act_cursor_line < menu_info.settings.max_cursor_line)
   823a8:	4b21      	ldr	r3, [pc, #132]	; (82430 <menu_settings+0x114>)
   823aa:	7a1a      	ldrb	r2, [r3, #8]
   823ac:	4b20      	ldr	r3, [pc, #128]	; (82430 <menu_settings+0x114>)
   823ae:	7adb      	ldrb	r3, [r3, #11]
   823b0:	429a      	cmp	r2, r3
   823b2:	d233      	bcs.n	8241c <menu_settings+0x100>
            {
                menu_info.settings.act_cursor_line++;
   823b4:	4b1e      	ldr	r3, [pc, #120]	; (82430 <menu_settings+0x114>)
   823b6:	7a1b      	ldrb	r3, [r3, #8]
   823b8:	3301      	adds	r3, #1
   823ba:	b2da      	uxtb	r2, r3
   823bc:	4b1c      	ldr	r3, [pc, #112]	; (82430 <menu_settings+0x114>)
   823be:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   823c0:	481c      	ldr	r0, [pc, #112]	; (82434 <menu_settings+0x118>)
   823c2:	4b1d      	ldr	r3, [pc, #116]	; (82438 <menu_settings+0x11c>)
   823c4:	4798      	blx	r3
            }
            break;
   823c6:	e029      	b.n	8241c <menu_settings+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.settings.act_cursor_line)
   823c8:	4b19      	ldr	r3, [pc, #100]	; (82430 <menu_settings+0x114>)
   823ca:	7a1b      	ldrb	r3, [r3, #8]
   823cc:	2b02      	cmp	r3, #2
   823ce:	d00b      	beq.n	823e8 <menu_settings+0xcc>
   823d0:	2b03      	cmp	r3, #3
   823d2:	d010      	beq.n	823f6 <menu_settings+0xda>
   823d4:	2b01      	cmp	r3, #1
   823d6:	d000      	beq.n	823da <menu_settings+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   823d8:	e014      	b.n	82404 <menu_settings+0xe8>
                    act_menu = MENU_BALL;
   823da:	4b18      	ldr	r3, [pc, #96]	; (8243c <menu_settings+0x120>)
   823dc:	2204      	movs	r2, #4
   823de:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   823e0:	4b11      	ldr	r3, [pc, #68]	; (82428 <menu_settings+0x10c>)
   823e2:	2201      	movs	r2, #1
   823e4:	701a      	strb	r2, [r3, #0]
                    break;
   823e6:	e00d      	b.n	82404 <menu_settings+0xe8>
                    act_menu = MENU_COMPASS;
   823e8:	4b14      	ldr	r3, [pc, #80]	; (8243c <menu_settings+0x120>)
   823ea:	2207      	movs	r2, #7
   823ec:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   823ee:	4b0e      	ldr	r3, [pc, #56]	; (82428 <menu_settings+0x10c>)
   823f0:	2201      	movs	r2, #1
   823f2:	701a      	strb	r2, [r3, #0]
                    break;
   823f4:	e006      	b.n	82404 <menu_settings+0xe8>
                    act_menu = MENU_LINE;
   823f6:	4b11      	ldr	r3, [pc, #68]	; (8243c <menu_settings+0x120>)
   823f8:	2205      	movs	r2, #5
   823fa:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   823fc:	4b0a      	ldr	r3, [pc, #40]	; (82428 <menu_settings+0x10c>)
   823fe:	2201      	movs	r2, #1
   82400:	701a      	strb	r2, [r3, #0]
                    break;
   82402:	bf00      	nop
            }
            break;
   82404:	e00b      	b.n	8241e <menu_settings+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   82406:	4b0d      	ldr	r3, [pc, #52]	; (8243c <menu_settings+0x120>)
   82408:	2200      	movs	r2, #0
   8240a:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   8240c:	4b06      	ldr	r3, [pc, #24]	; (82428 <menu_settings+0x10c>)
   8240e:	2201      	movs	r2, #1
   82410:	701a      	strb	r2, [r3, #0]
            break;
   82412:	e004      	b.n	8241e <menu_settings+0x102>
        default:
            break;
   82414:	bf00      	nop
   82416:	e002      	b.n	8241e <menu_settings+0x102>
            break;
   82418:	bf00      	nop
   8241a:	e000      	b.n	8241e <menu_settings+0x102>
            break;
   8241c:	bf00      	nop
    }
}
   8241e:	bf00      	nop
   82420:	3708      	adds	r7, #8
   82422:	46bd      	mov	sp, r7
   82424:	bd80      	pop	{r7, pc}
   82426:	bf00      	nop
   82428:	2007018c 	.word	0x2007018c
   8242c:	00082629 	.word	0x00082629
   82430:	20070190 	.word	0x20070190
   82434:	20070198 	.word	0x20070198
   82438:	00082691 	.word	0x00082691
   8243c:	20070dbc 	.word	0x20070dbc

00082440 <menu_shutdown>:

static void menu_shutdown(event_t event1)
{
   82440:	b580      	push	{r7, lr}
   82442:	b082      	sub	sp, #8
   82444:	af00      	add	r7, sp, #0
   82446:	4603      	mov	r3, r0
   82448:	71fb      	strb	r3, [r7, #7]
    if(shutdown_confirmed)
   8244a:	4b35      	ldr	r3, [pc, #212]	; (82520 <menu_shutdown+0xe0>)
   8244c:	781b      	ldrb	r3, [r3, #0]
   8244e:	2b00      	cmp	r3, #0
   82450:	d043      	beq.n	824da <menu_shutdown+0x9a>
    {
        lcd_clear();
   82452:	4b34      	ldr	r3, [pc, #208]	; (82524 <menu_shutdown+0xe4>)
   82454:	4798      	blx	r3
        lcd_print_s(2, 2, "shutting down...");
   82456:	4a34      	ldr	r2, [pc, #208]	; (82528 <menu_shutdown+0xe8>)
   82458:	2102      	movs	r1, #2
   8245a:	2002      	movs	r0, #2
   8245c:	4b33      	ldr	r3, [pc, #204]	; (8252c <menu_shutdown+0xec>)
   8245e:	4798      	blx	r3
        
        ioport_set_pin_level(LED_ONBOARD, 0);
   82460:	2100      	movs	r1, #0
   82462:	206a      	movs	r0, #106	; 0x6a
   82464:	4b32      	ldr	r3, [pc, #200]	; (82530 <menu_shutdown+0xf0>)
   82466:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   82468:	2100      	movs	r1, #0
   8246a:	2066      	movs	r0, #102	; 0x66
   8246c:	4b30      	ldr	r3, [pc, #192]	; (82530 <menu_shutdown+0xf0>)
   8246e:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   82470:	2100      	movs	r1, #0
   82472:	2067      	movs	r0, #103	; 0x67
   82474:	4b2e      	ldr	r3, [pc, #184]	; (82530 <menu_shutdown+0xf0>)
   82476:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   82478:	2100      	movs	r1, #0
   8247a:	2068      	movs	r0, #104	; 0x68
   8247c:	4b2c      	ldr	r3, [pc, #176]	; (82530 <menu_shutdown+0xf0>)
   8247e:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   82480:	2100      	movs	r1, #0
   82482:	2069      	movs	r0, #105	; 0x69
   82484:	4b2a      	ldr	r3, [pc, #168]	; (82530 <menu_shutdown+0xf0>)
   82486:	4798      	blx	r3
        pwm_channel_disable(PWM, MREAR);
        
        pwm_channel_disable(PWM, ENC_CLK);
        
        sensor_parameters.ibit.sleep_mode = 1;*/
        update_comm();
   82488:	4b2a      	ldr	r3, [pc, #168]	; (82534 <menu_shutdown+0xf4>)
   8248a:	4798      	blx	r3
        
        ioport_set_pin_level(RPI1, 0);
   8248c:	2100      	movs	r1, #0
   8248e:	2001      	movs	r0, #1
   82490:	4b27      	ldr	r3, [pc, #156]	; (82530 <menu_shutdown+0xf0>)
   82492:	4798      	blx	r3
        while (ioport_get_pin_level(RPI2) == 1);
   82494:	bf00      	nop
   82496:	2008      	movs	r0, #8
   82498:	4b27      	ldr	r3, [pc, #156]	; (82538 <menu_shutdown+0xf8>)
   8249a:	4798      	blx	r3
   8249c:	4603      	mov	r3, r0
   8249e:	2b00      	cmp	r3, #0
   824a0:	d1f9      	bne.n	82496 <menu_shutdown+0x56>
        mdelay(7500);
   824a2:	f641 504c 	movw	r0, #7500	; 0x1d4c
   824a6:	4b25      	ldr	r3, [pc, #148]	; (8253c <menu_shutdown+0xfc>)
   824a8:	4798      	blx	r3
        
        lcd_set_backlight(LCD_LIGHT_OFF);
   824aa:	2000      	movs	r0, #0
   824ac:	4b24      	ldr	r3, [pc, #144]	; (82540 <menu_shutdown+0x100>)
   824ae:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   824b0:	4b1c      	ldr	r3, [pc, #112]	; (82524 <menu_shutdown+0xe4>)
   824b2:	4798      	blx	r3
        mdelay(100);
   824b4:	2064      	movs	r0, #100	; 0x64
   824b6:	4b21      	ldr	r3, [pc, #132]	; (8253c <menu_shutdown+0xfc>)
   824b8:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_ON);
   824ba:	2008      	movs	r0, #8
   824bc:	4b20      	ldr	r3, [pc, #128]	; (82540 <menu_shutdown+0x100>)
   824be:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   824c0:	4b18      	ldr	r3, [pc, #96]	; (82524 <menu_shutdown+0xe4>)
   824c2:	4798      	blx	r3
        mdelay(100);
   824c4:	2064      	movs	r0, #100	; 0x64
   824c6:	4b1d      	ldr	r3, [pc, #116]	; (8253c <menu_shutdown+0xfc>)
   824c8:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_OFF);
   824ca:	2000      	movs	r0, #0
   824cc:	4b1c      	ldr	r3, [pc, #112]	; (82540 <menu_shutdown+0x100>)
   824ce:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   824d0:	4b14      	ldr	r3, [pc, #80]	; (82524 <menu_shutdown+0xe4>)
   824d2:	4798      	blx	r3
        
        while(1)
        {
            update_comm();
   824d4:	4b17      	ldr	r3, [pc, #92]	; (82534 <menu_shutdown+0xf4>)
   824d6:	4798      	blx	r3
   824d8:	e7fc      	b.n	824d4 <menu_shutdown+0x94>
            //check_bat();
        }
    }
    else
    {
        if(print_menu)
   824da:	4b1a      	ldr	r3, [pc, #104]	; (82544 <menu_shutdown+0x104>)
   824dc:	781b      	ldrb	r3, [r3, #0]
   824de:	2b00      	cmp	r3, #0
   824e0:	d009      	beq.n	824f6 <menu_shutdown+0xb6>
        {
            print_menu = 0;
   824e2:	4b18      	ldr	r3, [pc, #96]	; (82544 <menu_shutdown+0x104>)
   824e4:	2200      	movs	r2, #0
   824e6:	701a      	strb	r2, [r3, #0]
            lcd_clear();
   824e8:	4b0e      	ldr	r3, [pc, #56]	; (82524 <menu_shutdown+0xe4>)
   824ea:	4798      	blx	r3
            lcd_print_s(2, 1, "confirm shutdown?");
   824ec:	4a16      	ldr	r2, [pc, #88]	; (82548 <menu_shutdown+0x108>)
   824ee:	2101      	movs	r1, #1
   824f0:	2002      	movs	r0, #2
   824f2:	4b0e      	ldr	r3, [pc, #56]	; (8252c <menu_shutdown+0xec>)
   824f4:	4798      	blx	r3
        }
    }
    
    switch (event1)
   824f6:	79fb      	ldrb	r3, [r7, #7]
   824f8:	2b07      	cmp	r3, #7
   824fa:	d002      	beq.n	82502 <menu_shutdown+0xc2>
   824fc:	2b10      	cmp	r3, #16
   824fe:	d004      	beq.n	8250a <menu_shutdown+0xca>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
            print_menu = 1;
            break;
        default:
            break;
   82500:	e00a      	b.n	82518 <menu_shutdown+0xd8>
            shutdown_confirmed = 1;
   82502:	4b07      	ldr	r3, [pc, #28]	; (82520 <menu_shutdown+0xe0>)
   82504:	2201      	movs	r2, #1
   82506:	701a      	strb	r2, [r3, #0]
            break;
   82508:	e006      	b.n	82518 <menu_shutdown+0xd8>
            act_menu = MENU_MAIN;
   8250a:	4b10      	ldr	r3, [pc, #64]	; (8254c <menu_shutdown+0x10c>)
   8250c:	2200      	movs	r2, #0
   8250e:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82510:	4b0c      	ldr	r3, [pc, #48]	; (82544 <menu_shutdown+0x104>)
   82512:	2201      	movs	r2, #1
   82514:	701a      	strb	r2, [r3, #0]
            break;
   82516:	bf00      	nop
    }
}
   82518:	bf00      	nop
   8251a:	3708      	adds	r7, #8
   8251c:	46bd      	mov	sp, r7
   8251e:	bd80      	pop	{r7, pc}
   82520:	20070dbe 	.word	0x20070dbe
   82524:	0008167d 	.word	0x0008167d
   82528:	000897a0 	.word	0x000897a0
   8252c:	0008169d 	.word	0x0008169d
   82530:	00081b39 	.word	0x00081b39
   82534:	000830e1 	.word	0x000830e1
   82538:	00081ba3 	.word	0x00081ba3
   8253c:	000830b5 	.word	0x000830b5
   82540:	0008165d 	.word	0x0008165d
   82544:	2007018c 	.word	0x2007018c
   82548:	000897b4 	.word	0x000897b4
   8254c:	20070dbc 	.word	0x20070dbc

00082550 <print_menu_main>:

static void print_menu_main(void)
{
   82550:	b590      	push	{r4, r7, lr}
   82552:	b085      	sub	sp, #20
   82554:	af00      	add	r7, sp, #0
    const char *text[4] = {"    noOS ONE", " Match", " Sensors", " Settings"};
   82556:	4b14      	ldr	r3, [pc, #80]	; (825a8 <print_menu_main+0x58>)
   82558:	463c      	mov	r4, r7
   8255a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   8255c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   82560:	4b12      	ldr	r3, [pc, #72]	; (825ac <print_menu_main+0x5c>)
   82562:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   82564:	683b      	ldr	r3, [r7, #0]
   82566:	461a      	mov	r2, r3
   82568:	2100      	movs	r1, #0
   8256a:	2001      	movs	r0, #1
   8256c:	4b10      	ldr	r3, [pc, #64]	; (825b0 <print_menu_main+0x60>)
   8256e:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   82570:	687b      	ldr	r3, [r7, #4]
   82572:	461a      	mov	r2, r3
   82574:	2100      	movs	r1, #0
   82576:	2002      	movs	r0, #2
   82578:	4b0d      	ldr	r3, [pc, #52]	; (825b0 <print_menu_main+0x60>)
   8257a:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   8257c:	68bb      	ldr	r3, [r7, #8]
   8257e:	461a      	mov	r2, r3
   82580:	2100      	movs	r1, #0
   82582:	2003      	movs	r0, #3
   82584:	4b0a      	ldr	r3, [pc, #40]	; (825b0 <print_menu_main+0x60>)
   82586:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   82588:	68fb      	ldr	r3, [r7, #12]
   8258a:	461a      	mov	r2, r3
   8258c:	2100      	movs	r1, #0
   8258e:	2004      	movs	r0, #4
   82590:	4b07      	ldr	r3, [pc, #28]	; (825b0 <print_menu_main+0x60>)
   82592:	4798      	blx	r3
    print_cursor(&menu_info.main);
   82594:	4807      	ldr	r0, [pc, #28]	; (825b4 <print_menu_main+0x64>)
   82596:	4b08      	ldr	r3, [pc, #32]	; (825b8 <print_menu_main+0x68>)
   82598:	4798      	blx	r3
    update_battery(1);
   8259a:	2001      	movs	r0, #1
   8259c:	4b07      	ldr	r3, [pc, #28]	; (825bc <print_menu_main+0x6c>)
   8259e:	4798      	blx	r3
}
   825a0:	bf00      	nop
   825a2:	3714      	adds	r7, #20
   825a4:	46bd      	mov	sp, r7
   825a6:	bd90      	pop	{r4, r7, pc}
   825a8:	000897f8 	.word	0x000897f8
   825ac:	0008167d 	.word	0x0008167d
   825b0:	0008169d 	.word	0x0008169d
   825b4:	20070190 	.word	0x20070190
   825b8:	00082691 	.word	0x00082691
   825bc:	0008312d 	.word	0x0008312d

000825c0 <print_menu_sensors>:

static void print_menu_sensors(void)
{
   825c0:	b590      	push	{r4, r7, lr}
   825c2:	b085      	sub	sp, #20
   825c4:	af00      	add	r7, sp, #0
    const char *text[4] = {" Ball", " Compass", " Line", " "};
   825c6:	4b13      	ldr	r3, [pc, #76]	; (82614 <print_menu_sensors+0x54>)
   825c8:	463c      	mov	r4, r7
   825ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   825cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   825d0:	4b11      	ldr	r3, [pc, #68]	; (82618 <print_menu_sensors+0x58>)
   825d2:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   825d4:	683b      	ldr	r3, [r7, #0]
   825d6:	461a      	mov	r2, r3
   825d8:	2100      	movs	r1, #0
   825da:	2001      	movs	r0, #1
   825dc:	4b0f      	ldr	r3, [pc, #60]	; (8261c <print_menu_sensors+0x5c>)
   825de:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   825e0:	687b      	ldr	r3, [r7, #4]
   825e2:	461a      	mov	r2, r3
   825e4:	2100      	movs	r1, #0
   825e6:	2002      	movs	r0, #2
   825e8:	4b0c      	ldr	r3, [pc, #48]	; (8261c <print_menu_sensors+0x5c>)
   825ea:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   825ec:	68bb      	ldr	r3, [r7, #8]
   825ee:	461a      	mov	r2, r3
   825f0:	2100      	movs	r1, #0
   825f2:	2003      	movs	r0, #3
   825f4:	4b09      	ldr	r3, [pc, #36]	; (8261c <print_menu_sensors+0x5c>)
   825f6:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   825f8:	68fb      	ldr	r3, [r7, #12]
   825fa:	461a      	mov	r2, r3
   825fc:	2100      	movs	r1, #0
   825fe:	2004      	movs	r0, #4
   82600:	4b06      	ldr	r3, [pc, #24]	; (8261c <print_menu_sensors+0x5c>)
   82602:	4798      	blx	r3
    print_cursor(&menu_info.sensors);
   82604:	4806      	ldr	r0, [pc, #24]	; (82620 <print_menu_sensors+0x60>)
   82606:	4b07      	ldr	r3, [pc, #28]	; (82624 <print_menu_sensors+0x64>)
   82608:	4798      	blx	r3
}
   8260a:	bf00      	nop
   8260c:	3714      	adds	r7, #20
   8260e:	46bd      	mov	sp, r7
   82610:	bd90      	pop	{r4, r7, pc}
   82612:	bf00      	nop
   82614:	00089828 	.word	0x00089828
   82618:	0008167d 	.word	0x0008167d
   8261c:	0008169d 	.word	0x0008169d
   82620:	20070194 	.word	0x20070194
   82624:	00082691 	.word	0x00082691

00082628 <print_menu_settings>:

static void print_menu_settings(void)
{
   82628:	b590      	push	{r4, r7, lr}
   8262a:	b085      	sub	sp, #20
   8262c:	af00      	add	r7, sp, #0
    const char *text[4] = {" ", " ", " ", " "};
   8262e:	4b13      	ldr	r3, [pc, #76]	; (8267c <print_menu_settings+0x54>)
   82630:	463c      	mov	r4, r7
   82632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   82634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   82638:	4b11      	ldr	r3, [pc, #68]	; (82680 <print_menu_settings+0x58>)
   8263a:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   8263c:	683b      	ldr	r3, [r7, #0]
   8263e:	461a      	mov	r2, r3
   82640:	2100      	movs	r1, #0
   82642:	2001      	movs	r0, #1
   82644:	4b0f      	ldr	r3, [pc, #60]	; (82684 <print_menu_settings+0x5c>)
   82646:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   82648:	687b      	ldr	r3, [r7, #4]
   8264a:	461a      	mov	r2, r3
   8264c:	2100      	movs	r1, #0
   8264e:	2002      	movs	r0, #2
   82650:	4b0c      	ldr	r3, [pc, #48]	; (82684 <print_menu_settings+0x5c>)
   82652:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82654:	68bb      	ldr	r3, [r7, #8]
   82656:	461a      	mov	r2, r3
   82658:	2100      	movs	r1, #0
   8265a:	2003      	movs	r0, #3
   8265c:	4b09      	ldr	r3, [pc, #36]	; (82684 <print_menu_settings+0x5c>)
   8265e:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   82660:	68fb      	ldr	r3, [r7, #12]
   82662:	461a      	mov	r2, r3
   82664:	2100      	movs	r1, #0
   82666:	2004      	movs	r0, #4
   82668:	4b06      	ldr	r3, [pc, #24]	; (82684 <print_menu_settings+0x5c>)
   8266a:	4798      	blx	r3
    print_cursor(&menu_info.settings);
   8266c:	4806      	ldr	r0, [pc, #24]	; (82688 <print_menu_settings+0x60>)
   8266e:	4b07      	ldr	r3, [pc, #28]	; (8268c <print_menu_settings+0x64>)
   82670:	4798      	blx	r3
}
   82672:	bf00      	nop
   82674:	3714      	adds	r7, #20
   82676:	46bd      	mov	sp, r7
   82678:	bd90      	pop	{r4, r7, pc}
   8267a:	bf00      	nop
   8267c:	00089838 	.word	0x00089838
   82680:	0008167d 	.word	0x0008167d
   82684:	0008169d 	.word	0x0008169d
   82688:	20070198 	.word	0x20070198
   8268c:	00082691 	.word	0x00082691

00082690 <print_cursor>:

static void print_cursor(menu_info_t *info)
{
   82690:	b580      	push	{r7, lr}
   82692:	b082      	sub	sp, #8
   82694:	af00      	add	r7, sp, #0
   82696:	6078      	str	r0, [r7, #4]
    lcd_print_s(info->prev_cursor_line, 0, " ");
   82698:	687b      	ldr	r3, [r7, #4]
   8269a:	785b      	ldrb	r3, [r3, #1]
   8269c:	4a09      	ldr	r2, [pc, #36]	; (826c4 <print_cursor+0x34>)
   8269e:	2100      	movs	r1, #0
   826a0:	4618      	mov	r0, r3
   826a2:	4b09      	ldr	r3, [pc, #36]	; (826c8 <print_cursor+0x38>)
   826a4:	4798      	blx	r3
    lcd_print_s(info->act_cursor_line, 0, ">");
   826a6:	687b      	ldr	r3, [r7, #4]
   826a8:	781b      	ldrb	r3, [r3, #0]
   826aa:	4a08      	ldr	r2, [pc, #32]	; (826cc <print_cursor+0x3c>)
   826ac:	2100      	movs	r1, #0
   826ae:	4618      	mov	r0, r3
   826b0:	4b05      	ldr	r3, [pc, #20]	; (826c8 <print_cursor+0x38>)
   826b2:	4798      	blx	r3
    
    info->prev_cursor_line = info->act_cursor_line;
   826b4:	687b      	ldr	r3, [r7, #4]
   826b6:	781a      	ldrb	r2, [r3, #0]
   826b8:	687b      	ldr	r3, [r7, #4]
   826ba:	705a      	strb	r2, [r3, #1]
}
   826bc:	bf00      	nop
   826be:	3708      	adds	r7, #8
   826c0:	46bd      	mov	sp, r7
   826c2:	bd80      	pop	{r7, pc}
   826c4:	00089824 	.word	0x00089824
   826c8:	0008169d 	.word	0x0008169d
   826cc:	00089848 	.word	0x00089848

000826d0 <button_events>:

event_t button_events(void)
{
   826d0:	b580      	push	{r7, lr}
   826d2:	b082      	sub	sp, #8
   826d4:	af00      	add	r7, sp, #0
    event_t nextEvent = EVENT_NO_EVENT;
   826d6:	2300      	movs	r3, #0
   826d8:	71fb      	strb	r3, [r7, #7]

    if (getTicks() >= (ticks_button_update + 30))
   826da:	4b75      	ldr	r3, [pc, #468]	; (828b0 <button_events+0x1e0>)
   826dc:	4798      	blx	r3
   826de:	4602      	mov	r2, r0
   826e0:	4b74      	ldr	r3, [pc, #464]	; (828b4 <button_events+0x1e4>)
   826e2:	681b      	ldr	r3, [r3, #0]
   826e4:	331e      	adds	r3, #30
   826e6:	429a      	cmp	r2, r3
   826e8:	f0c0 80dd 	bcc.w	828a6 <button_events+0x1d6>
    {
        ticks_button_update = getTicks();
   826ec:	4b70      	ldr	r3, [pc, #448]	; (828b0 <button_events+0x1e0>)
   826ee:	4798      	blx	r3
   826f0:	4602      	mov	r2, r0
   826f2:	4b70      	ldr	r3, [pc, #448]	; (828b4 <button_events+0x1e4>)
   826f4:	601a      	str	r2, [r3, #0]
        
        pb_up_act = ioport_get_pin_level(PB_UP);
   826f6:	2060      	movs	r0, #96	; 0x60
   826f8:	4b6f      	ldr	r3, [pc, #444]	; (828b8 <button_events+0x1e8>)
   826fa:	4798      	blx	r3
   826fc:	4603      	mov	r3, r0
   826fe:	461a      	mov	r2, r3
   82700:	4b6e      	ldr	r3, [pc, #440]	; (828bc <button_events+0x1ec>)
   82702:	701a      	strb	r2, [r3, #0]
        pb_left_act = ioport_get_pin_level(PB_LEFT);
   82704:	2061      	movs	r0, #97	; 0x61
   82706:	4b6c      	ldr	r3, [pc, #432]	; (828b8 <button_events+0x1e8>)
   82708:	4798      	blx	r3
   8270a:	4603      	mov	r3, r0
   8270c:	461a      	mov	r2, r3
   8270e:	4b6c      	ldr	r3, [pc, #432]	; (828c0 <button_events+0x1f0>)
   82710:	701a      	strb	r2, [r3, #0]
        pb_mid_act = ioport_get_pin_level(PB_MID);
   82712:	2062      	movs	r0, #98	; 0x62
   82714:	4b68      	ldr	r3, [pc, #416]	; (828b8 <button_events+0x1e8>)
   82716:	4798      	blx	r3
   82718:	4603      	mov	r3, r0
   8271a:	461a      	mov	r2, r3
   8271c:	4b69      	ldr	r3, [pc, #420]	; (828c4 <button_events+0x1f4>)
   8271e:	701a      	strb	r2, [r3, #0]
        pb_right_act = ioport_get_pin_level(PB_RIGHT);
   82720:	2063      	movs	r0, #99	; 0x63
   82722:	4b65      	ldr	r3, [pc, #404]	; (828b8 <button_events+0x1e8>)
   82724:	4798      	blx	r3
   82726:	4603      	mov	r3, r0
   82728:	461a      	mov	r2, r3
   8272a:	4b67      	ldr	r3, [pc, #412]	; (828c8 <button_events+0x1f8>)
   8272c:	701a      	strb	r2, [r3, #0]
        pb_down_act = ioport_get_pin_level(PB_DOWN);
   8272e:	2064      	movs	r0, #100	; 0x64
   82730:	4b61      	ldr	r3, [pc, #388]	; (828b8 <button_events+0x1e8>)
   82732:	4798      	blx	r3
   82734:	4603      	mov	r3, r0
   82736:	461a      	mov	r2, r3
   82738:	4b64      	ldr	r3, [pc, #400]	; (828cc <button_events+0x1fc>)
   8273a:	701a      	strb	r2, [r3, #0]
        pb_return_act = ioport_get_pin_level(PB_RETURN);
   8273c:	2065      	movs	r0, #101	; 0x65
   8273e:	4b5e      	ldr	r3, [pc, #376]	; (828b8 <button_events+0x1e8>)
   82740:	4798      	blx	r3
   82742:	4603      	mov	r3, r0
   82744:	461a      	mov	r2, r3
   82746:	4b62      	ldr	r3, [pc, #392]	; (828d0 <button_events+0x200>)
   82748:	701a      	strb	r2, [r3, #0]
        
        if (pb_up_act != pb_up_prev && pb_up_act == 0)
   8274a:	4b5c      	ldr	r3, [pc, #368]	; (828bc <button_events+0x1ec>)
   8274c:	781a      	ldrb	r2, [r3, #0]
   8274e:	4b61      	ldr	r3, [pc, #388]	; (828d4 <button_events+0x204>)
   82750:	781b      	ldrb	r3, [r3, #0]
   82752:	429a      	cmp	r2, r3
   82754:	d006      	beq.n	82764 <button_events+0x94>
   82756:	4b59      	ldr	r3, [pc, #356]	; (828bc <button_events+0x1ec>)
   82758:	781b      	ldrb	r3, [r3, #0]
   8275a:	2b00      	cmp	r3, #0
   8275c:	d102      	bne.n	82764 <button_events+0x94>
        {
            nextEvent = EVENT_BUTTON_UP_P;
   8275e:	2301      	movs	r3, #1
   82760:	71fb      	strb	r3, [r7, #7]
   82762:	e00b      	b.n	8277c <button_events+0xac>
        }
        else if (pb_up_act != pb_up_prev && pb_up_act == 1)
   82764:	4b55      	ldr	r3, [pc, #340]	; (828bc <button_events+0x1ec>)
   82766:	781a      	ldrb	r2, [r3, #0]
   82768:	4b5a      	ldr	r3, [pc, #360]	; (828d4 <button_events+0x204>)
   8276a:	781b      	ldrb	r3, [r3, #0]
   8276c:	429a      	cmp	r2, r3
   8276e:	d005      	beq.n	8277c <button_events+0xac>
   82770:	4b52      	ldr	r3, [pc, #328]	; (828bc <button_events+0x1ec>)
   82772:	781b      	ldrb	r3, [r3, #0]
   82774:	2b01      	cmp	r3, #1
   82776:	d101      	bne.n	8277c <button_events+0xac>
        {
            nextEvent = EVENT_BUTTON_UP_R;
   82778:	2303      	movs	r3, #3
   8277a:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_up_act == pb_up_prev && pb_up_act == 0)
        {
            nextEvent = EVENT_BUTTON_UP_H;
        }*/
        
        if (pb_left_act != pb_left_prev && pb_left_act == 0)
   8277c:	4b50      	ldr	r3, [pc, #320]	; (828c0 <button_events+0x1f0>)
   8277e:	781a      	ldrb	r2, [r3, #0]
   82780:	4b55      	ldr	r3, [pc, #340]	; (828d8 <button_events+0x208>)
   82782:	781b      	ldrb	r3, [r3, #0]
   82784:	429a      	cmp	r2, r3
   82786:	d006      	beq.n	82796 <button_events+0xc6>
   82788:	4b4d      	ldr	r3, [pc, #308]	; (828c0 <button_events+0x1f0>)
   8278a:	781b      	ldrb	r3, [r3, #0]
   8278c:	2b00      	cmp	r3, #0
   8278e:	d102      	bne.n	82796 <button_events+0xc6>
        {
            nextEvent = EVENT_BUTTON_LEFT_P;
   82790:	2304      	movs	r3, #4
   82792:	71fb      	strb	r3, [r7, #7]
   82794:	e00b      	b.n	827ae <button_events+0xde>
        }
        else if (pb_left_act != pb_left_prev && pb_left_act == 1)
   82796:	4b4a      	ldr	r3, [pc, #296]	; (828c0 <button_events+0x1f0>)
   82798:	781a      	ldrb	r2, [r3, #0]
   8279a:	4b4f      	ldr	r3, [pc, #316]	; (828d8 <button_events+0x208>)
   8279c:	781b      	ldrb	r3, [r3, #0]
   8279e:	429a      	cmp	r2, r3
   827a0:	d005      	beq.n	827ae <button_events+0xde>
   827a2:	4b47      	ldr	r3, [pc, #284]	; (828c0 <button_events+0x1f0>)
   827a4:	781b      	ldrb	r3, [r3, #0]
   827a6:	2b01      	cmp	r3, #1
   827a8:	d101      	bne.n	827ae <button_events+0xde>
        {
            nextEvent = EVENT_BUTTON_LEFT_R;
   827aa:	2306      	movs	r3, #6
   827ac:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_left_act == pb_left_prev && pb_left_act == 0)
        {
            nextEvent = EVENT_BUTTON_LEFT_H;
        }*/
        
        if (pb_mid_act != pb_mid_prev && pb_mid_act == 0)
   827ae:	4b45      	ldr	r3, [pc, #276]	; (828c4 <button_events+0x1f4>)
   827b0:	781a      	ldrb	r2, [r3, #0]
   827b2:	4b4a      	ldr	r3, [pc, #296]	; (828dc <button_events+0x20c>)
   827b4:	781b      	ldrb	r3, [r3, #0]
   827b6:	429a      	cmp	r2, r3
   827b8:	d006      	beq.n	827c8 <button_events+0xf8>
   827ba:	4b42      	ldr	r3, [pc, #264]	; (828c4 <button_events+0x1f4>)
   827bc:	781b      	ldrb	r3, [r3, #0]
   827be:	2b00      	cmp	r3, #0
   827c0:	d102      	bne.n	827c8 <button_events+0xf8>
        {
            nextEvent = EVENT_BUTTON_MID_P;
   827c2:	2307      	movs	r3, #7
   827c4:	71fb      	strb	r3, [r7, #7]
   827c6:	e00b      	b.n	827e0 <button_events+0x110>
        }
        else if (pb_mid_act != pb_mid_prev && pb_mid_act == 1)
   827c8:	4b3e      	ldr	r3, [pc, #248]	; (828c4 <button_events+0x1f4>)
   827ca:	781a      	ldrb	r2, [r3, #0]
   827cc:	4b43      	ldr	r3, [pc, #268]	; (828dc <button_events+0x20c>)
   827ce:	781b      	ldrb	r3, [r3, #0]
   827d0:	429a      	cmp	r2, r3
   827d2:	d005      	beq.n	827e0 <button_events+0x110>
   827d4:	4b3b      	ldr	r3, [pc, #236]	; (828c4 <button_events+0x1f4>)
   827d6:	781b      	ldrb	r3, [r3, #0]
   827d8:	2b01      	cmp	r3, #1
   827da:	d101      	bne.n	827e0 <button_events+0x110>
        {
            nextEvent = EVENT_BUTTON_MID_R;
   827dc:	2309      	movs	r3, #9
   827de:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_mid_act == pb_mid_prev && pb_mid_act == 0)
        {
            nextEvent = EVENT_BUTTON_MID_H;
        }*/
        
        if (pb_right_act != pb_right_prev && pb_right_act == 0)
   827e0:	4b39      	ldr	r3, [pc, #228]	; (828c8 <button_events+0x1f8>)
   827e2:	781a      	ldrb	r2, [r3, #0]
   827e4:	4b3e      	ldr	r3, [pc, #248]	; (828e0 <button_events+0x210>)
   827e6:	781b      	ldrb	r3, [r3, #0]
   827e8:	429a      	cmp	r2, r3
   827ea:	d006      	beq.n	827fa <button_events+0x12a>
   827ec:	4b36      	ldr	r3, [pc, #216]	; (828c8 <button_events+0x1f8>)
   827ee:	781b      	ldrb	r3, [r3, #0]
   827f0:	2b00      	cmp	r3, #0
   827f2:	d102      	bne.n	827fa <button_events+0x12a>
        {
            nextEvent = EVENT_BUTTON_RIGHT_P;
   827f4:	230a      	movs	r3, #10
   827f6:	71fb      	strb	r3, [r7, #7]
   827f8:	e00b      	b.n	82812 <button_events+0x142>
        }
        else if (pb_right_act != pb_right_prev && pb_right_act == 1)
   827fa:	4b33      	ldr	r3, [pc, #204]	; (828c8 <button_events+0x1f8>)
   827fc:	781a      	ldrb	r2, [r3, #0]
   827fe:	4b38      	ldr	r3, [pc, #224]	; (828e0 <button_events+0x210>)
   82800:	781b      	ldrb	r3, [r3, #0]
   82802:	429a      	cmp	r2, r3
   82804:	d005      	beq.n	82812 <button_events+0x142>
   82806:	4b30      	ldr	r3, [pc, #192]	; (828c8 <button_events+0x1f8>)
   82808:	781b      	ldrb	r3, [r3, #0]
   8280a:	2b01      	cmp	r3, #1
   8280c:	d101      	bne.n	82812 <button_events+0x142>
        {
            nextEvent = EVENT_BUTTON_RIGHT_R;
   8280e:	230c      	movs	r3, #12
   82810:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_right_act == pb_right_prev && pb_right_act == 0)
        {
            nextEvent = EVENT_BUTTON_RIGHT_H;
        }*/
        
        if (pb_down_act != pb_down_prev && pb_down_act == 0)
   82812:	4b2e      	ldr	r3, [pc, #184]	; (828cc <button_events+0x1fc>)
   82814:	781a      	ldrb	r2, [r3, #0]
   82816:	4b33      	ldr	r3, [pc, #204]	; (828e4 <button_events+0x214>)
   82818:	781b      	ldrb	r3, [r3, #0]
   8281a:	429a      	cmp	r2, r3
   8281c:	d006      	beq.n	8282c <button_events+0x15c>
   8281e:	4b2b      	ldr	r3, [pc, #172]	; (828cc <button_events+0x1fc>)
   82820:	781b      	ldrb	r3, [r3, #0]
   82822:	2b00      	cmp	r3, #0
   82824:	d102      	bne.n	8282c <button_events+0x15c>
        {
            nextEvent = EVENT_BUTTON_DOWN_P;
   82826:	230d      	movs	r3, #13
   82828:	71fb      	strb	r3, [r7, #7]
   8282a:	e00b      	b.n	82844 <button_events+0x174>
        }
        else if (pb_down_act != pb_down_prev && pb_down_act == 1)
   8282c:	4b27      	ldr	r3, [pc, #156]	; (828cc <button_events+0x1fc>)
   8282e:	781a      	ldrb	r2, [r3, #0]
   82830:	4b2c      	ldr	r3, [pc, #176]	; (828e4 <button_events+0x214>)
   82832:	781b      	ldrb	r3, [r3, #0]
   82834:	429a      	cmp	r2, r3
   82836:	d005      	beq.n	82844 <button_events+0x174>
   82838:	4b24      	ldr	r3, [pc, #144]	; (828cc <button_events+0x1fc>)
   8283a:	781b      	ldrb	r3, [r3, #0]
   8283c:	2b01      	cmp	r3, #1
   8283e:	d101      	bne.n	82844 <button_events+0x174>
        {
            nextEvent = EVENT_BUTTON_DOWN_R;
   82840:	230f      	movs	r3, #15
   82842:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_down_act == pb_down_prev && pb_down_act == 0)
        {
            nextEvent = EVENT_BUTTON_DOWN_H;
        }*/
        
        if (pb_return_act != pb_return_prev && pb_return_act == 0)
   82844:	4b22      	ldr	r3, [pc, #136]	; (828d0 <button_events+0x200>)
   82846:	781a      	ldrb	r2, [r3, #0]
   82848:	4b27      	ldr	r3, [pc, #156]	; (828e8 <button_events+0x218>)
   8284a:	781b      	ldrb	r3, [r3, #0]
   8284c:	429a      	cmp	r2, r3
   8284e:	d006      	beq.n	8285e <button_events+0x18e>
   82850:	4b1f      	ldr	r3, [pc, #124]	; (828d0 <button_events+0x200>)
   82852:	781b      	ldrb	r3, [r3, #0]
   82854:	2b00      	cmp	r3, #0
   82856:	d102      	bne.n	8285e <button_events+0x18e>
        {
            nextEvent = EVENT_BUTTON_RETURN_P;
   82858:	2310      	movs	r3, #16
   8285a:	71fb      	strb	r3, [r7, #7]
   8285c:	e00b      	b.n	82876 <button_events+0x1a6>
        }
        else if (pb_return_act != pb_return_prev && pb_return_act == 1)
   8285e:	4b1c      	ldr	r3, [pc, #112]	; (828d0 <button_events+0x200>)
   82860:	781a      	ldrb	r2, [r3, #0]
   82862:	4b21      	ldr	r3, [pc, #132]	; (828e8 <button_events+0x218>)
   82864:	781b      	ldrb	r3, [r3, #0]
   82866:	429a      	cmp	r2, r3
   82868:	d005      	beq.n	82876 <button_events+0x1a6>
   8286a:	4b19      	ldr	r3, [pc, #100]	; (828d0 <button_events+0x200>)
   8286c:	781b      	ldrb	r3, [r3, #0]
   8286e:	2b01      	cmp	r3, #1
   82870:	d101      	bne.n	82876 <button_events+0x1a6>
        {
            nextEvent = EVENT_BUTTON_RETURN_R;
   82872:	2312      	movs	r3, #18
   82874:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_return_act == pb_up_prev && pb_return_act == 0)
        {
            nextEvent = EVENT_BUTTON_RETURN_H;
        }*/
        
        pb_up_prev = pb_up_act;
   82876:	4b11      	ldr	r3, [pc, #68]	; (828bc <button_events+0x1ec>)
   82878:	781a      	ldrb	r2, [r3, #0]
   8287a:	4b16      	ldr	r3, [pc, #88]	; (828d4 <button_events+0x204>)
   8287c:	701a      	strb	r2, [r3, #0]
        pb_left_prev = pb_left_act;
   8287e:	4b10      	ldr	r3, [pc, #64]	; (828c0 <button_events+0x1f0>)
   82880:	781a      	ldrb	r2, [r3, #0]
   82882:	4b15      	ldr	r3, [pc, #84]	; (828d8 <button_events+0x208>)
   82884:	701a      	strb	r2, [r3, #0]
        pb_mid_prev = pb_mid_act;
   82886:	4b0f      	ldr	r3, [pc, #60]	; (828c4 <button_events+0x1f4>)
   82888:	781a      	ldrb	r2, [r3, #0]
   8288a:	4b14      	ldr	r3, [pc, #80]	; (828dc <button_events+0x20c>)
   8288c:	701a      	strb	r2, [r3, #0]
        pb_right_prev = pb_right_act;
   8288e:	4b0e      	ldr	r3, [pc, #56]	; (828c8 <button_events+0x1f8>)
   82890:	781a      	ldrb	r2, [r3, #0]
   82892:	4b13      	ldr	r3, [pc, #76]	; (828e0 <button_events+0x210>)
   82894:	701a      	strb	r2, [r3, #0]
        pb_down_prev = pb_down_act;
   82896:	4b0d      	ldr	r3, [pc, #52]	; (828cc <button_events+0x1fc>)
   82898:	781a      	ldrb	r2, [r3, #0]
   8289a:	4b12      	ldr	r3, [pc, #72]	; (828e4 <button_events+0x214>)
   8289c:	701a      	strb	r2, [r3, #0]
        pb_return_prev = pb_return_act;
   8289e:	4b0c      	ldr	r3, [pc, #48]	; (828d0 <button_events+0x200>)
   828a0:	781a      	ldrb	r2, [r3, #0]
   828a2:	4b11      	ldr	r3, [pc, #68]	; (828e8 <button_events+0x218>)
   828a4:	701a      	strb	r2, [r3, #0]
    }

    return nextEvent;
   828a6:	79fb      	ldrb	r3, [r7, #7]
}
   828a8:	4618      	mov	r0, r3
   828aa:	3708      	adds	r7, #8
   828ac:	46bd      	mov	sp, r7
   828ae:	bd80      	pop	{r7, pc}
   828b0:	000830a1 	.word	0x000830a1
   828b4:	20070e3c 	.word	0x20070e3c
   828b8:	00081ba3 	.word	0x00081ba3
   828bc:	20070e65 	.word	0x20070e65
   828c0:	20070e4c 	.word	0x20070e4c
   828c4:	20070e64 	.word	0x20070e64
   828c8:	20070e66 	.word	0x20070e66
   828cc:	20070e48 	.word	0x20070e48
   828d0:	20070e44 	.word	0x20070e44
   828d4:	20070e49 	.word	0x20070e49
   828d8:	20070e47 	.word	0x20070e47
   828dc:	20070e45 	.word	0x20070e45
   828e0:	20070e4a 	.word	0x20070e4a
   828e4:	20070e46 	.word	0x20070e46
   828e8:	20070e4b 	.word	0x20070e4b

000828ec <NVIC_EnableIRQ>:
{
   828ec:	b480      	push	{r7}
   828ee:	b083      	sub	sp, #12
   828f0:	af00      	add	r7, sp, #0
   828f2:	4603      	mov	r3, r0
   828f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   828f6:	4908      	ldr	r1, [pc, #32]	; (82918 <NVIC_EnableIRQ+0x2c>)
   828f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   828fc:	095b      	lsrs	r3, r3, #5
   828fe:	79fa      	ldrb	r2, [r7, #7]
   82900:	f002 021f 	and.w	r2, r2, #31
   82904:	2001      	movs	r0, #1
   82906:	fa00 f202 	lsl.w	r2, r0, r2
   8290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8290e:	bf00      	nop
   82910:	370c      	adds	r7, #12
   82912:	46bd      	mov	sp, r7
   82914:	bc80      	pop	{r7}
   82916:	4770      	bx	lr
   82918:	e000e100 	.word	0xe000e100

0008291c <NVIC_DisableIRQ>:
{
   8291c:	b480      	push	{r7}
   8291e:	b083      	sub	sp, #12
   82920:	af00      	add	r7, sp, #0
   82922:	4603      	mov	r3, r0
   82924:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82926:	4909      	ldr	r1, [pc, #36]	; (8294c <NVIC_DisableIRQ+0x30>)
   82928:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8292c:	095b      	lsrs	r3, r3, #5
   8292e:	79fa      	ldrb	r2, [r7, #7]
   82930:	f002 021f 	and.w	r2, r2, #31
   82934:	2001      	movs	r0, #1
   82936:	fa00 f202 	lsl.w	r2, r0, r2
   8293a:	3320      	adds	r3, #32
   8293c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82940:	bf00      	nop
   82942:	370c      	adds	r7, #12
   82944:	46bd      	mov	sp, r7
   82946:	bc80      	pop	{r7}
   82948:	4770      	bx	lr
   8294a:	bf00      	nop
   8294c:	e000e100 	.word	0xe000e100

00082950 <NVIC_ClearPendingIRQ>:
{
   82950:	b480      	push	{r7}
   82952:	b083      	sub	sp, #12
   82954:	af00      	add	r7, sp, #0
   82956:	4603      	mov	r3, r0
   82958:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8295a:	4909      	ldr	r1, [pc, #36]	; (82980 <NVIC_ClearPendingIRQ+0x30>)
   8295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82960:	095b      	lsrs	r3, r3, #5
   82962:	79fa      	ldrb	r2, [r7, #7]
   82964:	f002 021f 	and.w	r2, r2, #31
   82968:	2001      	movs	r0, #1
   8296a:	fa00 f202 	lsl.w	r2, r0, r2
   8296e:	3360      	adds	r3, #96	; 0x60
   82970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82974:	bf00      	nop
   82976:	370c      	adds	r7, #12
   82978:	46bd      	mov	sp, r7
   8297a:	bc80      	pop	{r7}
   8297c:	4770      	bx	lr
   8297e:	bf00      	nop
   82980:	e000e100 	.word	0xe000e100

00082984 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   82984:	b480      	push	{r7}
   82986:	b083      	sub	sp, #12
   82988:	af00      	add	r7, sp, #0
   8298a:	4603      	mov	r3, r0
   8298c:	6039      	str	r1, [r7, #0]
   8298e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   82990:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82994:	2b00      	cmp	r3, #0
   82996:	da0b      	bge.n	829b0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   82998:	490d      	ldr	r1, [pc, #52]	; (829d0 <NVIC_SetPriority+0x4c>)
   8299a:	79fb      	ldrb	r3, [r7, #7]
   8299c:	f003 030f 	and.w	r3, r3, #15
   829a0:	3b04      	subs	r3, #4
   829a2:	683a      	ldr	r2, [r7, #0]
   829a4:	b2d2      	uxtb	r2, r2
   829a6:	0112      	lsls	r2, r2, #4
   829a8:	b2d2      	uxtb	r2, r2
   829aa:	440b      	add	r3, r1
   829ac:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   829ae:	e009      	b.n	829c4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   829b0:	4908      	ldr	r1, [pc, #32]	; (829d4 <NVIC_SetPriority+0x50>)
   829b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   829b6:	683a      	ldr	r2, [r7, #0]
   829b8:	b2d2      	uxtb	r2, r2
   829ba:	0112      	lsls	r2, r2, #4
   829bc:	b2d2      	uxtb	r2, r2
   829be:	440b      	add	r3, r1
   829c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   829c4:	bf00      	nop
   829c6:	370c      	adds	r7, #12
   829c8:	46bd      	mov	sp, r7
   829ca:	bc80      	pop	{r7}
   829cc:	4770      	bx	lr
   829ce:	bf00      	nop
   829d0:	e000ed00 	.word	0xe000ed00
   829d4:	e000e100 	.word	0xe000e100

000829d8 <sysclk_enable_peripheral_clock>:
{
   829d8:	b580      	push	{r7, lr}
   829da:	b082      	sub	sp, #8
   829dc:	af00      	add	r7, sp, #0
   829de:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   829e0:	6878      	ldr	r0, [r7, #4]
   829e2:	4b03      	ldr	r3, [pc, #12]	; (829f0 <sysclk_enable_peripheral_clock+0x18>)
   829e4:	4798      	blx	r3
}
   829e6:	bf00      	nop
   829e8:	3708      	adds	r7, #8
   829ea:	46bd      	mov	sp, r7
   829ec:	bd80      	pop	{r7, pc}
   829ee:	bf00      	nop
   829f0:	00083a65 	.word	0x00083a65

000829f4 <ioport_set_pin_level>:
{
   829f4:	b480      	push	{r7}
   829f6:	b08b      	sub	sp, #44	; 0x2c
   829f8:	af00      	add	r7, sp, #0
   829fa:	6078      	str	r0, [r7, #4]
   829fc:	460b      	mov	r3, r1
   829fe:	70fb      	strb	r3, [r7, #3]
   82a00:	687b      	ldr	r3, [r7, #4]
   82a02:	627b      	str	r3, [r7, #36]	; 0x24
   82a04:	78fb      	ldrb	r3, [r7, #3]
   82a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82a0c:	61fb      	str	r3, [r7, #28]
   82a0e:	69fb      	ldr	r3, [r7, #28]
   82a10:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82a12:	69bb      	ldr	r3, [r7, #24]
   82a14:	095b      	lsrs	r3, r3, #5
   82a16:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82a18:	697b      	ldr	r3, [r7, #20]
   82a1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82a1e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82a22:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82a24:	613b      	str	r3, [r7, #16]
	if (level) {
   82a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82a2a:	2b00      	cmp	r3, #0
   82a2c:	d009      	beq.n	82a42 <ioport_set_pin_level+0x4e>
   82a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82a30:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82a32:	68fb      	ldr	r3, [r7, #12]
   82a34:	f003 031f 	and.w	r3, r3, #31
   82a38:	2201      	movs	r2, #1
   82a3a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82a3c:	693b      	ldr	r3, [r7, #16]
   82a3e:	631a      	str	r2, [r3, #48]	; 0x30
}
   82a40:	e008      	b.n	82a54 <ioport_set_pin_level+0x60>
   82a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82a44:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   82a46:	68bb      	ldr	r3, [r7, #8]
   82a48:	f003 031f 	and.w	r3, r3, #31
   82a4c:	2201      	movs	r2, #1
   82a4e:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82a50:	693b      	ldr	r3, [r7, #16]
   82a52:	635a      	str	r2, [r3, #52]	; 0x34
   82a54:	bf00      	nop
   82a56:	372c      	adds	r7, #44	; 0x2c
   82a58:	46bd      	mov	sp, r7
   82a5a:	bc80      	pop	{r7}
   82a5c:	4770      	bx	lr

00082a5e <ioport_get_port_level>:
 * \return Logical levels of the specified pins from the read port, returned as
 * a mask.
 */
static inline ioport_port_mask_t ioport_get_port_level(ioport_pin_t port,
		ioport_port_mask_t mask)
{
   82a5e:	b480      	push	{r7}
   82a60:	b087      	sub	sp, #28
   82a62:	af00      	add	r7, sp, #0
   82a64:	6078      	str	r0, [r7, #4]
   82a66:	6039      	str	r1, [r7, #0]
   82a68:	687b      	ldr	r3, [r7, #4]
   82a6a:	617b      	str	r3, [r7, #20]
   82a6c:	683b      	ldr	r3, [r7, #0]
   82a6e:	613b      	str	r3, [r7, #16]
   82a70:	697b      	ldr	r3, [r7, #20]
   82a72:	60fb      	str	r3, [r7, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82a74:	68fb      	ldr	r3, [r7, #12]
   82a76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82a7a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82a7e:	025b      	lsls	r3, r3, #9
}

__always_inline static ioport_port_mask_t arch_ioport_get_port_level(
		ioport_port_t port, ioport_port_mask_t mask)
{
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
   82a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   82a82:	693b      	ldr	r3, [r7, #16]
   82a84:	4013      	ands	r3, r2
	return arch_ioport_get_port_level(port, mask);
   82a86:	bf00      	nop
}
   82a88:	4618      	mov	r0, r3
   82a8a:	371c      	adds	r7, #28
   82a8c:	46bd      	mov	sp, r7
   82a8e:	bc80      	pop	{r7}
   82a90:	4770      	bx	lr
	...

00082a94 <motor_init>:
float CosinMA1 = -0.866025404f;
float CosinMA2 = 0.866025404f;
float CosinMA3 = 0.0f;

void motor_init(void)
{
   82a94:	b5b0      	push	{r4, r5, r7, lr}
   82a96:	af00      	add	r7, sp, #0
    /* Initialize PWM channel for MLeft */
    /* Period is left-aligned */
    g_pwm_channel_MLeft.alignment = PWM_ALIGN_LEFT;
   82a98:	4b5e      	ldr	r3, [pc, #376]	; (82c14 <motor_init+0x180>)
   82a9a:	2200      	movs	r2, #0
   82a9c:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MLeft.polarity = PWM_LOW;
   82a9e:	4b5d      	ldr	r3, [pc, #372]	; (82c14 <motor_init+0x180>)
   82aa0:	2200      	movs	r2, #0
   82aa2:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MLeft.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82aa4:	4b5b      	ldr	r3, [pc, #364]	; (82c14 <motor_init+0x180>)
   82aa6:	220b      	movs	r2, #11
   82aa8:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MLeft.ul_period = PERIOD_VALUE;
   82aaa:	4b5a      	ldr	r3, [pc, #360]	; (82c14 <motor_init+0x180>)
   82aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82ab0:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MLeft.ul_duty = INIT_DUTY_VALUE;
   82ab2:	4b58      	ldr	r3, [pc, #352]	; (82c14 <motor_init+0x180>)
   82ab4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82ab8:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MLeft.channel = MOTOR_LEFT;
   82aba:	4b56      	ldr	r3, [pc, #344]	; (82c14 <motor_init+0x180>)
   82abc:	2200      	movs	r2, #0
   82abe:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MLeft);
   82ac0:	4954      	ldr	r1, [pc, #336]	; (82c14 <motor_init+0x180>)
   82ac2:	4855      	ldr	r0, [pc, #340]	; (82c18 <motor_init+0x184>)
   82ac4:	4b55      	ldr	r3, [pc, #340]	; (82c1c <motor_init+0x188>)
   82ac6:	4798      	blx	r3


    /* Initialize PWM channel for MRight */
    /* Period is left-aligned */
    g_pwm_channel_MRight.alignment = PWM_ALIGN_LEFT;
   82ac8:	4b55      	ldr	r3, [pc, #340]	; (82c20 <motor_init+0x18c>)
   82aca:	2200      	movs	r2, #0
   82acc:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MRight.polarity = PWM_LOW;
   82ace:	4b54      	ldr	r3, [pc, #336]	; (82c20 <motor_init+0x18c>)
   82ad0:	2200      	movs	r2, #0
   82ad2:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MRight.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82ad4:	4b52      	ldr	r3, [pc, #328]	; (82c20 <motor_init+0x18c>)
   82ad6:	220b      	movs	r2, #11
   82ad8:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MRight.ul_period = PERIOD_VALUE;
   82ada:	4b51      	ldr	r3, [pc, #324]	; (82c20 <motor_init+0x18c>)
   82adc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82ae0:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MRight.ul_duty = INIT_DUTY_VALUE;
   82ae2:	4b4f      	ldr	r3, [pc, #316]	; (82c20 <motor_init+0x18c>)
   82ae4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82ae8:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MRight.channel = MOTOR_RIGHT;
   82aea:	4b4d      	ldr	r3, [pc, #308]	; (82c20 <motor_init+0x18c>)
   82aec:	2201      	movs	r2, #1
   82aee:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MRight);
   82af0:	494b      	ldr	r1, [pc, #300]	; (82c20 <motor_init+0x18c>)
   82af2:	4849      	ldr	r0, [pc, #292]	; (82c18 <motor_init+0x184>)
   82af4:	4b49      	ldr	r3, [pc, #292]	; (82c1c <motor_init+0x188>)
   82af6:	4798      	blx	r3


    /* Initialize PWM channel for MBack */
    /* Period is left-aligned */
    g_pwm_channel_MRear.alignment = PWM_ALIGN_LEFT;
   82af8:	4b4a      	ldr	r3, [pc, #296]	; (82c24 <motor_init+0x190>)
   82afa:	2200      	movs	r2, #0
   82afc:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MRear.polarity = PWM_LOW;
   82afe:	4b49      	ldr	r3, [pc, #292]	; (82c24 <motor_init+0x190>)
   82b00:	2200      	movs	r2, #0
   82b02:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MRear.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82b04:	4b47      	ldr	r3, [pc, #284]	; (82c24 <motor_init+0x190>)
   82b06:	220b      	movs	r2, #11
   82b08:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MRear.ul_period = PERIOD_VALUE;
   82b0a:	4b46      	ldr	r3, [pc, #280]	; (82c24 <motor_init+0x190>)
   82b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82b10:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MRear.ul_duty = INIT_DUTY_VALUE;
   82b12:	4b44      	ldr	r3, [pc, #272]	; (82c24 <motor_init+0x190>)
   82b14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82b18:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MRear.channel = MOTOR_REAR;
   82b1a:	4b42      	ldr	r3, [pc, #264]	; (82c24 <motor_init+0x190>)
   82b1c:	2202      	movs	r2, #2
   82b1e:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MRear);
   82b20:	4940      	ldr	r1, [pc, #256]	; (82c24 <motor_init+0x190>)
   82b22:	483d      	ldr	r0, [pc, #244]	; (82c18 <motor_init+0x184>)
   82b24:	4b3d      	ldr	r3, [pc, #244]	; (82c1c <motor_init+0x188>)
   82b26:	4798      	blx	r3

    pwm_channel_disable(PWM, MOTOR_LEFT);
   82b28:	2100      	movs	r1, #0
   82b2a:	483b      	ldr	r0, [pc, #236]	; (82c18 <motor_init+0x184>)
   82b2c:	4b3e      	ldr	r3, [pc, #248]	; (82c28 <motor_init+0x194>)
   82b2e:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_RIGHT);
   82b30:	2101      	movs	r1, #1
   82b32:	4839      	ldr	r0, [pc, #228]	; (82c18 <motor_init+0x184>)
   82b34:	4b3c      	ldr	r3, [pc, #240]	; (82c28 <motor_init+0x194>)
   82b36:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_REAR);
   82b38:	2102      	movs	r1, #2
   82b3a:	4837      	ldr	r0, [pc, #220]	; (82c18 <motor_init+0x184>)
   82b3c:	4b3a      	ldr	r3, [pc, #232]	; (82c28 <motor_init+0x194>)
   82b3e:	4798      	blx	r3

    g_pwm_channel_ENC.alignment = PWM_ALIGN_LEFT;
   82b40:	4b3a      	ldr	r3, [pc, #232]	; (82c2c <motor_init+0x198>)
   82b42:	2200      	movs	r2, #0
   82b44:	811a      	strh	r2, [r3, #8]
    g_pwm_channel_ENC.polarity = PWM_LOW;
   82b46:	4b39      	ldr	r3, [pc, #228]	; (82c2c <motor_init+0x198>)
   82b48:	2200      	movs	r2, #0
   82b4a:	729a      	strb	r2, [r3, #10]
    g_pwm_channel_ENC.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82b4c:	4b37      	ldr	r3, [pc, #220]	; (82c2c <motor_init+0x198>)
   82b4e:	220b      	movs	r2, #11
   82b50:	605a      	str	r2, [r3, #4]
    g_pwm_channel_ENC.ul_period = 330;
   82b52:	4b36      	ldr	r3, [pc, #216]	; (82c2c <motor_init+0x198>)
   82b54:	f44f 72a5 	mov.w	r2, #330	; 0x14a
   82b58:	611a      	str	r2, [r3, #16]
    g_pwm_channel_ENC.ul_duty = 165;
   82b5a:	4b34      	ldr	r3, [pc, #208]	; (82c2c <motor_init+0x198>)
   82b5c:	22a5      	movs	r2, #165	; 0xa5
   82b5e:	60da      	str	r2, [r3, #12]
    g_pwm_channel_ENC.channel = ENC_CLK;
   82b60:	4b32      	ldr	r3, [pc, #200]	; (82c2c <motor_init+0x198>)
   82b62:	2204      	movs	r2, #4
   82b64:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_ENC);
   82b66:	4931      	ldr	r1, [pc, #196]	; (82c2c <motor_init+0x198>)
   82b68:	482b      	ldr	r0, [pc, #172]	; (82c18 <motor_init+0x184>)
   82b6a:	4b2c      	ldr	r3, [pc, #176]	; (82c1c <motor_init+0x188>)
   82b6c:	4798      	blx	r3
    pwm_channel_enable(PWM, ENC_CLK);
   82b6e:	2104      	movs	r1, #4
   82b70:	4829      	ldr	r0, [pc, #164]	; (82c18 <motor_init+0x184>)
   82b72:	4b2f      	ldr	r3, [pc, #188]	; (82c30 <motor_init+0x19c>)
   82b74:	4798      	blx	r3

    sysclk_enable_peripheral_clock(ID_TC1);
   82b76:	201c      	movs	r0, #28
   82b78:	4b2e      	ldr	r3, [pc, #184]	; (82c34 <motor_init+0x1a0>)
   82b7a:	4798      	blx	r3
    tc_init(TC0, 1, TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_CPCTRG);
   82b7c:	f244 0203 	movw	r2, #16387	; 0x4003
   82b80:	2101      	movs	r1, #1
   82b82:	482d      	ldr	r0, [pc, #180]	; (82c38 <motor_init+0x1a4>)
   82b84:	4b2d      	ldr	r3, [pc, #180]	; (82c3c <motor_init+0x1a8>)
   82b86:	4798      	blx	r3
    tc_write_rc(TC0, 1, 5249);  //MCLK / 128 * 0,008
   82b88:	f241 4281 	movw	r2, #5249	; 0x1481
   82b8c:	2101      	movs	r1, #1
   82b8e:	482a      	ldr	r0, [pc, #168]	; (82c38 <motor_init+0x1a4>)
   82b90:	4b2b      	ldr	r3, [pc, #172]	; (82c40 <motor_init+0x1ac>)
   82b92:	4798      	blx	r3
    NVIC_DisableIRQ(TC1_IRQn);
   82b94:	201c      	movs	r0, #28
   82b96:	4b2b      	ldr	r3, [pc, #172]	; (82c44 <motor_init+0x1b0>)
   82b98:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TC1_IRQn);
   82b9a:	201c      	movs	r0, #28
   82b9c:	4b2a      	ldr	r3, [pc, #168]	; (82c48 <motor_init+0x1b4>)
   82b9e:	4798      	blx	r3
    NVIC_SetPriority(TC1_IRQn, 0);
   82ba0:	2100      	movs	r1, #0
   82ba2:	201c      	movs	r0, #28
   82ba4:	4b29      	ldr	r3, [pc, #164]	; (82c4c <motor_init+0x1b8>)
   82ba6:	4798      	blx	r3
    NVIC_EnableIRQ(TC1_IRQn);
   82ba8:	201c      	movs	r0, #28
   82baa:	4b29      	ldr	r3, [pc, #164]	; (82c50 <motor_init+0x1bc>)
   82bac:	4798      	blx	r3
    tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82bae:	2210      	movs	r2, #16
   82bb0:	2101      	movs	r1, #1
   82bb2:	4821      	ldr	r0, [pc, #132]	; (82c38 <motor_init+0x1a4>)
   82bb4:	4b27      	ldr	r3, [pc, #156]	; (82c54 <motor_init+0x1c0>)
   82bb6:	4798      	blx	r3
    tc_start(TC0, 1);
   82bb8:	2101      	movs	r1, #1
   82bba:	481f      	ldr	r0, [pc, #124]	; (82c38 <motor_init+0x1a4>)
   82bbc:	4b26      	ldr	r3, [pc, #152]	; (82c58 <motor_init+0x1c4>)
   82bbe:	4798      	blx	r3

    mleft_pid_reg.kp = 15.0f;
   82bc0:	4b26      	ldr	r3, [pc, #152]	; (82c5c <motor_init+0x1c8>)
   82bc2:	4a27      	ldr	r2, [pc, #156]	; (82c60 <motor_init+0x1cc>)
   82bc4:	601a      	str	r2, [r3, #0]
    mleft_pid_reg.ki = 10.0f;
   82bc6:	4b25      	ldr	r3, [pc, #148]	; (82c5c <motor_init+0x1c8>)
   82bc8:	4a26      	ldr	r2, [pc, #152]	; (82c64 <motor_init+0x1d0>)
   82bca:	605a      	str	r2, [r3, #4]
    mleft_pid_reg.kc = 1.0f;
   82bcc:	4b23      	ldr	r3, [pc, #140]	; (82c5c <motor_init+0x1c8>)
   82bce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   82bd2:	609a      	str	r2, [r3, #8]
    mleft_pid_reg.kd = 5.0f;
   82bd4:	4b21      	ldr	r3, [pc, #132]	; (82c5c <motor_init+0x1c8>)
   82bd6:	4a24      	ldr	r2, [pc, #144]	; (82c68 <motor_init+0x1d4>)
   82bd8:	60da      	str	r2, [r3, #12]
    mleft_pid_reg.outMin = -500.0f;
   82bda:	4b20      	ldr	r3, [pc, #128]	; (82c5c <motor_init+0x1c8>)
   82bdc:	4a23      	ldr	r2, [pc, #140]	; (82c6c <motor_init+0x1d8>)
   82bde:	619a      	str	r2, [r3, #24]
    mleft_pid_reg.outMax = 500.0f;
   82be0:	4b1e      	ldr	r3, [pc, #120]	; (82c5c <motor_init+0x1c8>)
   82be2:	4a23      	ldr	r2, [pc, #140]	; (82c70 <motor_init+0x1dc>)
   82be4:	615a      	str	r2, [r3, #20]

    mright_pid_reg = mleft_pid_reg;
   82be6:	4a23      	ldr	r2, [pc, #140]	; (82c74 <motor_init+0x1e0>)
   82be8:	4b1c      	ldr	r3, [pc, #112]	; (82c5c <motor_init+0x1c8>)
   82bea:	4614      	mov	r4, r2
   82bec:	461d      	mov	r5, r3
   82bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82bf6:	682b      	ldr	r3, [r5, #0]
   82bf8:	6023      	str	r3, [r4, #0]
    mrear_pid_reg = mleft_pid_reg;
   82bfa:	4a1f      	ldr	r2, [pc, #124]	; (82c78 <motor_init+0x1e4>)
   82bfc:	4b17      	ldr	r3, [pc, #92]	; (82c5c <motor_init+0x1c8>)
   82bfe:	4614      	mov	r4, r2
   82c00:	461d      	mov	r5, r3
   82c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82c0a:	682b      	ldr	r3, [r5, #0]
   82c0c:	6023      	str	r3, [r4, #0]
}
   82c0e:	bf00      	nop
   82c10:	bdb0      	pop	{r4, r5, r7, pc}
   82c12:	bf00      	nop
   82c14:	20070e80 	.word	0x20070e80
   82c18:	40094000 	.word	0x40094000
   82c1c:	00080369 	.word	0x00080369
   82c20:	20070f50 	.word	0x20070f50
   82c24:	20070ef8 	.word	0x20070ef8
   82c28:	00080615 	.word	0x00080615
   82c2c:	20070ea8 	.word	0x20070ea8
   82c30:	000805f3 	.word	0x000805f3
   82c34:	000829d9 	.word	0x000829d9
   82c38:	40080000 	.word	0x40080000
   82c3c:	00080637 	.word	0x00080637
   82c40:	0008068f 	.word	0x0008068f
   82c44:	0008291d 	.word	0x0008291d
   82c48:	00082951 	.word	0x00082951
   82c4c:	00082985 	.word	0x00082985
   82c50:	000828ed 	.word	0x000828ed
   82c54:	000806b3 	.word	0x000806b3
   82c58:	0008066f 	.word	0x0008066f
   82c5c:	20070f78 	.word	0x20070f78
   82c60:	41700000 	.word	0x41700000
   82c64:	41200000 	.word	0x41200000
   82c68:	40a00000 	.word	0x40a00000
   82c6c:	c3fa0000 	.word	0xc3fa0000
   82c70:	43fa0000 	.word	0x43fa0000
   82c74:	20070ed0 	.word	0x20070ed0
   82c78:	20070f20 	.word	0x20070f20

00082c7c <enable_motor>:

void enable_motor(void)
{
   82c7c:	b580      	push	{r7, lr}
   82c7e:	af00      	add	r7, sp, #0
    pwm_channel_enable(PWM, MOTOR_LEFT);
   82c80:	2100      	movs	r1, #0
   82c82:	480d      	ldr	r0, [pc, #52]	; (82cb8 <enable_motor+0x3c>)
   82c84:	4b0d      	ldr	r3, [pc, #52]	; (82cbc <enable_motor+0x40>)
   82c86:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_RIGHT);
   82c88:	2101      	movs	r1, #1
   82c8a:	480b      	ldr	r0, [pc, #44]	; (82cb8 <enable_motor+0x3c>)
   82c8c:	4b0b      	ldr	r3, [pc, #44]	; (82cbc <enable_motor+0x40>)
   82c8e:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_REAR);
   82c90:	2102      	movs	r1, #2
   82c92:	4809      	ldr	r0, [pc, #36]	; (82cb8 <enable_motor+0x3c>)
   82c94:	4b09      	ldr	r3, [pc, #36]	; (82cbc <enable_motor+0x40>)
   82c96:	4798      	blx	r3

    ioport_set_pin_level(ENC_LOAD, 0);
   82c98:	2100      	movs	r1, #0
   82c9a:	2020      	movs	r0, #32
   82c9c:	4b08      	ldr	r3, [pc, #32]	; (82cc0 <enable_motor+0x44>)
   82c9e:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   82ca0:	2101      	movs	r1, #1
   82ca2:	2020      	movs	r0, #32
   82ca4:	4b06      	ldr	r3, [pc, #24]	; (82cc0 <enable_motor+0x44>)
   82ca6:	4798      	blx	r3

    tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82ca8:	2210      	movs	r2, #16
   82caa:	2101      	movs	r1, #1
   82cac:	4805      	ldr	r0, [pc, #20]	; (82cc4 <enable_motor+0x48>)
   82cae:	4b06      	ldr	r3, [pc, #24]	; (82cc8 <enable_motor+0x4c>)
   82cb0:	4798      	blx	r3
}
   82cb2:	bf00      	nop
   82cb4:	bd80      	pop	{r7, pc}
   82cb6:	bf00      	nop
   82cb8:	40094000 	.word	0x40094000
   82cbc:	000805f3 	.word	0x000805f3
   82cc0:	000829f5 	.word	0x000829f5
   82cc4:	40080000 	.word	0x40080000
   82cc8:	000806b3 	.word	0x000806b3

00082ccc <motor_speed>:
        pwm_channel_enable(PWM, ENC_CLK);
    }*/ 
}

void motor_speed(uint8_t motor, int16_t ispeed)
{
   82ccc:	b580      	push	{r7, lr}
   82cce:	b084      	sub	sp, #16
   82cd0:	af00      	add	r7, sp, #0
   82cd2:	4603      	mov	r3, r0
   82cd4:	460a      	mov	r2, r1
   82cd6:	71fb      	strb	r3, [r7, #7]
   82cd8:	4613      	mov	r3, r2
   82cda:	80bb      	strh	r3, [r7, #4]
    if (ispeed > 500)
   82cdc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82ce0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82ce4:	dd02      	ble.n	82cec <motor_speed+0x20>
    {
        ispeed = 500;
   82ce6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82cea:	80bb      	strh	r3, [r7, #4]
    }

    if (ispeed < -500)
   82cec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82cf0:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
   82cf4:	da02      	bge.n	82cfc <motor_speed+0x30>
    {
        ispeed = -500;
   82cf6:	f64f 630c 	movw	r3, #65036	; 0xfe0c
   82cfa:	80bb      	strh	r3, [r7, #4]
    }

    uint16_t duty_cycle = (uint16_t)(ispeed + (int16_t)INIT_DUTY_VALUE);
   82cfc:	88bb      	ldrh	r3, [r7, #4]
   82cfe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   82d02:	81fb      	strh	r3, [r7, #14]

    if (duty_cycle < 10)
   82d04:	89fb      	ldrh	r3, [r7, #14]
   82d06:	2b09      	cmp	r3, #9
   82d08:	d801      	bhi.n	82d0e <motor_speed+0x42>
    {
        duty_cycle = 10;
   82d0a:	230a      	movs	r3, #10
   82d0c:	81fb      	strh	r3, [r7, #14]
    }

    if (duty_cycle > 990)
   82d0e:	89fb      	ldrh	r3, [r7, #14]
   82d10:	f240 32de 	movw	r2, #990	; 0x3de
   82d14:	4293      	cmp	r3, r2
   82d16:	d902      	bls.n	82d1e <motor_speed+0x52>
    {
        duty_cycle = 990;
   82d18:	f240 33de 	movw	r3, #990	; 0x3de
   82d1c:	81fb      	strh	r3, [r7, #14]
    }

    switch(motor)
   82d1e:	79fb      	ldrb	r3, [r7, #7]
   82d20:	2b01      	cmp	r3, #1
   82d22:	d00b      	beq.n	82d3c <motor_speed+0x70>
   82d24:	2b02      	cmp	r3, #2
   82d26:	d010      	beq.n	82d4a <motor_speed+0x7e>
   82d28:	2b00      	cmp	r3, #0
   82d2a:	d000      	beq.n	82d2e <motor_speed+0x62>
            break;
        case MOTOR_REAR:
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
            break;
        default:
            break;
   82d2c:	e014      	b.n	82d58 <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MLeft, duty_cycle);
   82d2e:	89fb      	ldrh	r3, [r7, #14]
   82d30:	461a      	mov	r2, r3
   82d32:	490b      	ldr	r1, [pc, #44]	; (82d60 <motor_speed+0x94>)
   82d34:	480b      	ldr	r0, [pc, #44]	; (82d64 <motor_speed+0x98>)
   82d36:	4b0c      	ldr	r3, [pc, #48]	; (82d68 <motor_speed+0x9c>)
   82d38:	4798      	blx	r3
            break;
   82d3a:	e00d      	b.n	82d58 <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRight, duty_cycle);
   82d3c:	89fb      	ldrh	r3, [r7, #14]
   82d3e:	461a      	mov	r2, r3
   82d40:	490a      	ldr	r1, [pc, #40]	; (82d6c <motor_speed+0xa0>)
   82d42:	4808      	ldr	r0, [pc, #32]	; (82d64 <motor_speed+0x98>)
   82d44:	4b08      	ldr	r3, [pc, #32]	; (82d68 <motor_speed+0x9c>)
   82d46:	4798      	blx	r3
            break;
   82d48:	e006      	b.n	82d58 <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
   82d4a:	89fb      	ldrh	r3, [r7, #14]
   82d4c:	461a      	mov	r2, r3
   82d4e:	4908      	ldr	r1, [pc, #32]	; (82d70 <motor_speed+0xa4>)
   82d50:	4804      	ldr	r0, [pc, #16]	; (82d64 <motor_speed+0x98>)
   82d52:	4b05      	ldr	r3, [pc, #20]	; (82d68 <motor_speed+0x9c>)
   82d54:	4798      	blx	r3
            break;
   82d56:	bf00      	nop
    }
}
   82d58:	bf00      	nop
   82d5a:	3710      	adds	r7, #16
   82d5c:	46bd      	mov	sp, r7
   82d5e:	bd80      	pop	{r7, pc}
   82d60:	20070e80 	.word	0x20070e80
   82d64:	40094000 	.word	0x40094000
   82d68:	000805af 	.word	0x000805af
   82d6c:	20070f50 	.word	0x20070f50
   82d70:	20070ef8 	.word	0x20070ef8

00082d74 <TC1_Handler>:

void TC1_Handler(void)
{
   82d74:	b590      	push	{r4, r7, lr}
   82d76:	b085      	sub	sp, #20
   82d78:	af00      	add	r7, sp, #0
    uint32_t PIOC_value;
    int32_t eleft_counts;
    int32_t eright_counts;
    int32_t erear_counts;

    ioport_set_pin_level(LED_M3, 1);
   82d7a:	2101      	movs	r1, #1
   82d7c:	2069      	movs	r0, #105	; 0x69
   82d7e:	4b50      	ldr	r3, [pc, #320]	; (82ec0 <TC1_Handler+0x14c>)
   82d80:	4798      	blx	r3

    if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   82d82:	2101      	movs	r1, #1
   82d84:	484f      	ldr	r0, [pc, #316]	; (82ec4 <TC1_Handler+0x150>)
   82d86:	4b50      	ldr	r3, [pc, #320]	; (82ec8 <TC1_Handler+0x154>)
   82d88:	4798      	blx	r3
   82d8a:	4603      	mov	r3, r0
   82d8c:	f003 0310 	and.w	r3, r3, #16
   82d90:	2b10      	cmp	r3, #16
   82d92:	f040 808c 	bne.w	82eae <TC1_Handler+0x13a>
    {
        pwm_channel_disable(PWM, ENC_CLK);
   82d96:	2104      	movs	r1, #4
   82d98:	484c      	ldr	r0, [pc, #304]	; (82ecc <TC1_Handler+0x158>)
   82d9a:	4b4d      	ldr	r3, [pc, #308]	; (82ed0 <TC1_Handler+0x15c>)
   82d9c:	4798      	blx	r3
        PIOC_value = ioport_get_port_level(IOPORT_PIOC, 0xFFFFFFFF);
   82d9e:	f04f 31ff 	mov.w	r1, #4294967295
   82da2:	2002      	movs	r0, #2
   82da4:	4b4b      	ldr	r3, [pc, #300]	; (82ed4 <TC1_Handler+0x160>)
   82da6:	4798      	blx	r3
   82da8:	60f8      	str	r0, [r7, #12]
        ioport_set_pin_level(ENC_LOAD, 0);
   82daa:	2100      	movs	r1, #0
   82dac:	2020      	movs	r0, #32
   82dae:	4b44      	ldr	r3, [pc, #272]	; (82ec0 <TC1_Handler+0x14c>)
   82db0:	4798      	blx	r3
        ioport_set_pin_level(ENC_LOAD, 1);
   82db2:	2101      	movs	r1, #1
   82db4:	2020      	movs	r0, #32
   82db6:	4b42      	ldr	r3, [pc, #264]	; (82ec0 <TC1_Handler+0x14c>)
   82db8:	4798      	blx	r3
        pwm_channel_enable(PWM, ENC_CLK);
   82dba:	2104      	movs	r1, #4
   82dbc:	4843      	ldr	r0, [pc, #268]	; (82ecc <TC1_Handler+0x158>)
   82dbe:	4b46      	ldr	r3, [pc, #280]	; (82ed8 <TC1_Handler+0x164>)
   82dc0:	4798      	blx	r3

        eleft_counts = (PIOC_value & 0x7F000000) >> 24;
   82dc2:	68fb      	ldr	r3, [r7, #12]
   82dc4:	0e1b      	lsrs	r3, r3, #24
   82dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   82dca:	60bb      	str	r3, [r7, #8]
        eleft_counts = (eleft_counts & 0x00000040) ? eleft_counts - 128 : eleft_counts;
   82dcc:	68bb      	ldr	r3, [r7, #8]
   82dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82dd2:	2b00      	cmp	r3, #0
   82dd4:	d002      	beq.n	82ddc <TC1_Handler+0x68>
   82dd6:	68bb      	ldr	r3, [r7, #8]
   82dd8:	3b80      	subs	r3, #128	; 0x80
   82dda:	e000      	b.n	82dde <TC1_Handler+0x6a>
   82ddc:	68bb      	ldr	r3, [r7, #8]
   82dde:	60bb      	str	r3, [r7, #8]
        eright_counts = ((PIOC_value & 0x00C00000) >> 17) | ((PIOC_value & 0x001F0000) >> 16);
   82de0:	68fb      	ldr	r3, [r7, #12]
   82de2:	0c5b      	lsrs	r3, r3, #17
   82de4:	f003 0260 	and.w	r2, r3, #96	; 0x60
   82de8:	68fb      	ldr	r3, [r7, #12]
   82dea:	0c1b      	lsrs	r3, r3, #16
   82dec:	f003 031f 	and.w	r3, r3, #31
   82df0:	4313      	orrs	r3, r2
   82df2:	607b      	str	r3, [r7, #4]
        eright_counts = (eright_counts & 0x00000040) ? eright_counts - 128 : eright_counts;
   82df4:	687b      	ldr	r3, [r7, #4]
   82df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82dfa:	2b00      	cmp	r3, #0
   82dfc:	d002      	beq.n	82e04 <TC1_Handler+0x90>
   82dfe:	687b      	ldr	r3, [r7, #4]
   82e00:	3b80      	subs	r3, #128	; 0x80
   82e02:	e000      	b.n	82e06 <TC1_Handler+0x92>
   82e04:	687b      	ldr	r3, [r7, #4]
   82e06:	607b      	str	r3, [r7, #4]
        erear_counts = ((PIOC_value & 0x0000FC00) >> 9) | ((PIOC_value & 0x00000002) >> 1);
   82e08:	68fb      	ldr	r3, [r7, #12]
   82e0a:	0a5b      	lsrs	r3, r3, #9
   82e0c:	f003 027e 	and.w	r2, r3, #126	; 0x7e
   82e10:	68fb      	ldr	r3, [r7, #12]
   82e12:	085b      	lsrs	r3, r3, #1
   82e14:	f003 0301 	and.w	r3, r3, #1
   82e18:	4313      	orrs	r3, r2
   82e1a:	603b      	str	r3, [r7, #0]
        erear_counts = (erear_counts & 0x00000040) ? erear_counts - 128 : erear_counts;
   82e1c:	683b      	ldr	r3, [r7, #0]
   82e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82e22:	2b00      	cmp	r3, #0
   82e24:	d002      	beq.n	82e2c <TC1_Handler+0xb8>
   82e26:	683b      	ldr	r3, [r7, #0]
   82e28:	3b80      	subs	r3, #128	; 0x80
   82e2a:	e000      	b.n	82e2e <TC1_Handler+0xba>
   82e2c:	683b      	ldr	r3, [r7, #0]
   82e2e:	603b      	str	r3, [r7, #0]

        motor_speed(MOTOR_LEFT, pidReg(&mleft_pid_reg, speed_mleft, (float)eleft_counts));
   82e30:	4b2a      	ldr	r3, [pc, #168]	; (82edc <TC1_Handler+0x168>)
   82e32:	681c      	ldr	r4, [r3, #0]
   82e34:	4b2a      	ldr	r3, [pc, #168]	; (82ee0 <TC1_Handler+0x16c>)
   82e36:	68b8      	ldr	r0, [r7, #8]
   82e38:	4798      	blx	r3
   82e3a:	4603      	mov	r3, r0
   82e3c:	461a      	mov	r2, r3
   82e3e:	4621      	mov	r1, r4
   82e40:	4828      	ldr	r0, [pc, #160]	; (82ee4 <TC1_Handler+0x170>)
   82e42:	4b29      	ldr	r3, [pc, #164]	; (82ee8 <TC1_Handler+0x174>)
   82e44:	4798      	blx	r3
   82e46:	4602      	mov	r2, r0
   82e48:	4b28      	ldr	r3, [pc, #160]	; (82eec <TC1_Handler+0x178>)
   82e4a:	4610      	mov	r0, r2
   82e4c:	4798      	blx	r3
   82e4e:	4603      	mov	r3, r0
   82e50:	b21b      	sxth	r3, r3
   82e52:	4619      	mov	r1, r3
   82e54:	2000      	movs	r0, #0
   82e56:	4b26      	ldr	r3, [pc, #152]	; (82ef0 <TC1_Handler+0x17c>)
   82e58:	4798      	blx	r3
        motor_speed(MOTOR_RIGHT, pidReg(&mright_pid_reg, speed_mright, (float)eright_counts));
   82e5a:	4b26      	ldr	r3, [pc, #152]	; (82ef4 <TC1_Handler+0x180>)
   82e5c:	681c      	ldr	r4, [r3, #0]
   82e5e:	4b20      	ldr	r3, [pc, #128]	; (82ee0 <TC1_Handler+0x16c>)
   82e60:	6878      	ldr	r0, [r7, #4]
   82e62:	4798      	blx	r3
   82e64:	4603      	mov	r3, r0
   82e66:	461a      	mov	r2, r3
   82e68:	4621      	mov	r1, r4
   82e6a:	4823      	ldr	r0, [pc, #140]	; (82ef8 <TC1_Handler+0x184>)
   82e6c:	4b1e      	ldr	r3, [pc, #120]	; (82ee8 <TC1_Handler+0x174>)
   82e6e:	4798      	blx	r3
   82e70:	4602      	mov	r2, r0
   82e72:	4b1e      	ldr	r3, [pc, #120]	; (82eec <TC1_Handler+0x178>)
   82e74:	4610      	mov	r0, r2
   82e76:	4798      	blx	r3
   82e78:	4603      	mov	r3, r0
   82e7a:	b21b      	sxth	r3, r3
   82e7c:	4619      	mov	r1, r3
   82e7e:	2001      	movs	r0, #1
   82e80:	4b1b      	ldr	r3, [pc, #108]	; (82ef0 <TC1_Handler+0x17c>)
   82e82:	4798      	blx	r3
        motor_speed(MOTOR_REAR, pidReg(&mrear_pid_reg, speed_mrear, (float)erear_counts));
   82e84:	4b1d      	ldr	r3, [pc, #116]	; (82efc <TC1_Handler+0x188>)
   82e86:	681c      	ldr	r4, [r3, #0]
   82e88:	4b15      	ldr	r3, [pc, #84]	; (82ee0 <TC1_Handler+0x16c>)
   82e8a:	6838      	ldr	r0, [r7, #0]
   82e8c:	4798      	blx	r3
   82e8e:	4603      	mov	r3, r0
   82e90:	461a      	mov	r2, r3
   82e92:	4621      	mov	r1, r4
   82e94:	481a      	ldr	r0, [pc, #104]	; (82f00 <TC1_Handler+0x18c>)
   82e96:	4b14      	ldr	r3, [pc, #80]	; (82ee8 <TC1_Handler+0x174>)
   82e98:	4798      	blx	r3
   82e9a:	4602      	mov	r2, r0
   82e9c:	4b13      	ldr	r3, [pc, #76]	; (82eec <TC1_Handler+0x178>)
   82e9e:	4610      	mov	r0, r2
   82ea0:	4798      	blx	r3
   82ea2:	4603      	mov	r3, r0
   82ea4:	b21b      	sxth	r3, r3
   82ea6:	4619      	mov	r1, r3
   82ea8:	2002      	movs	r0, #2
   82eaa:	4b11      	ldr	r3, [pc, #68]	; (82ef0 <TC1_Handler+0x17c>)
   82eac:	4798      	blx	r3

        //pwm_channel_enable(PWM, ENC_CLK);
    }

    ioport_set_pin_level(LED_M3, 0);
   82eae:	2100      	movs	r1, #0
   82eb0:	2069      	movs	r0, #105	; 0x69
   82eb2:	4b03      	ldr	r3, [pc, #12]	; (82ec0 <TC1_Handler+0x14c>)
   82eb4:	4798      	blx	r3
}
   82eb6:	bf00      	nop
   82eb8:	3714      	adds	r7, #20
   82eba:	46bd      	mov	sp, r7
   82ebc:	bd90      	pop	{r4, r7, pc}
   82ebe:	bf00      	nop
   82ec0:	000829f5 	.word	0x000829f5
   82ec4:	40080000 	.word	0x40080000
   82ec8:	000806d9 	.word	0x000806d9
   82ecc:	40094000 	.word	0x40094000
   82ed0:	00080615 	.word	0x00080615
   82ed4:	00082a5f 	.word	0x00082a5f
   82ed8:	000805f3 	.word	0x000805f3
   82edc:	20070f48 	.word	0x20070f48
   82ee0:	00085155 	.word	0x00085155
   82ee4:	20070f78 	.word	0x20070f78
   82ee8:	00082f05 	.word	0x00082f05
   82eec:	00085589 	.word	0x00085589
   82ef0:	00082ccd 	.word	0x00082ccd
   82ef4:	20070ef4 	.word	0x20070ef4
   82ef8:	20070ed0 	.word	0x20070ed0
   82efc:	20070fd0 	.word	0x20070fd0
   82f00:	20070f20 	.word	0x20070f20

00082f04 <pidReg>:
/************************************************************************/

#include "pid.h"

float pidReg(pidReg_t* reg, float refer, float act)
{
   82f04:	b590      	push	{r4, r7, lr}
   82f06:	b08b      	sub	sp, #44	; 0x2c
   82f08:	af00      	add	r7, sp, #0
   82f0a:	60f8      	str	r0, [r7, #12]
   82f0c:	60b9      	str	r1, [r7, #8]
   82f0e:	607a      	str	r2, [r7, #4]
    float diff;
    float outPreSat;
    float out;

    // Compute the error
    err = refer - act;
   82f10:	4b3c      	ldr	r3, [pc, #240]	; (83004 <pidReg+0x100>)
   82f12:	6879      	ldr	r1, [r7, #4]
   82f14:	68b8      	ldr	r0, [r7, #8]
   82f16:	4798      	blx	r3
   82f18:	4603      	mov	r3, r0
   82f1a:	623b      	str	r3, [r7, #32]

    // Compute the proportional output
    prop = reg->kp * err;
   82f1c:	68fb      	ldr	r3, [r7, #12]
   82f1e:	681a      	ldr	r2, [r3, #0]
   82f20:	4b39      	ldr	r3, [pc, #228]	; (83008 <pidReg+0x104>)
   82f22:	6a39      	ldr	r1, [r7, #32]
   82f24:	4610      	mov	r0, r2
   82f26:	4798      	blx	r3
   82f28:	4603      	mov	r3, r0
   82f2a:	61fb      	str	r3, [r7, #28]

    // Compute the integral output
    reg->intg = reg->intg + reg->ki * err + reg->kc * reg->satErr;
   82f2c:	68fb      	ldr	r3, [r7, #12]
   82f2e:	691c      	ldr	r4, [r3, #16]
   82f30:	68fb      	ldr	r3, [r7, #12]
   82f32:	685a      	ldr	r2, [r3, #4]
   82f34:	4b34      	ldr	r3, [pc, #208]	; (83008 <pidReg+0x104>)
   82f36:	6a39      	ldr	r1, [r7, #32]
   82f38:	4610      	mov	r0, r2
   82f3a:	4798      	blx	r3
   82f3c:	4603      	mov	r3, r0
   82f3e:	461a      	mov	r2, r3
   82f40:	4b32      	ldr	r3, [pc, #200]	; (8300c <pidReg+0x108>)
   82f42:	4611      	mov	r1, r2
   82f44:	4620      	mov	r0, r4
   82f46:	4798      	blx	r3
   82f48:	4603      	mov	r3, r0
   82f4a:	461c      	mov	r4, r3
   82f4c:	68fb      	ldr	r3, [r7, #12]
   82f4e:	689a      	ldr	r2, [r3, #8]
   82f50:	68fb      	ldr	r3, [r7, #12]
   82f52:	69d9      	ldr	r1, [r3, #28]
   82f54:	4b2c      	ldr	r3, [pc, #176]	; (83008 <pidReg+0x104>)
   82f56:	4610      	mov	r0, r2
   82f58:	4798      	blx	r3
   82f5a:	4603      	mov	r3, r0
   82f5c:	461a      	mov	r2, r3
   82f5e:	4b2b      	ldr	r3, [pc, #172]	; (8300c <pidReg+0x108>)
   82f60:	4611      	mov	r1, r2
   82f62:	4620      	mov	r0, r4
   82f64:	4798      	blx	r3
   82f66:	4603      	mov	r3, r0
   82f68:	461a      	mov	r2, r3
   82f6a:	68fb      	ldr	r3, [r7, #12]
   82f6c:	611a      	str	r2, [r3, #16]

    // Compute the derivative output
    diff = reg->kd * (err - reg->prevErr);
   82f6e:	68fb      	ldr	r3, [r7, #12]
   82f70:	68dc      	ldr	r4, [r3, #12]
   82f72:	68fb      	ldr	r3, [r7, #12]
   82f74:	6a1a      	ldr	r2, [r3, #32]
   82f76:	4b23      	ldr	r3, [pc, #140]	; (83004 <pidReg+0x100>)
   82f78:	4611      	mov	r1, r2
   82f7a:	6a38      	ldr	r0, [r7, #32]
   82f7c:	4798      	blx	r3
   82f7e:	4603      	mov	r3, r0
   82f80:	461a      	mov	r2, r3
   82f82:	4b21      	ldr	r3, [pc, #132]	; (83008 <pidReg+0x104>)
   82f84:	4611      	mov	r1, r2
   82f86:	4620      	mov	r0, r4
   82f88:	4798      	blx	r3
   82f8a:	4603      	mov	r3, r0
   82f8c:	61bb      	str	r3, [r7, #24]

    // Compute the pre-saturated output
    outPreSat = prop + reg->intg + diff;
   82f8e:	68fb      	ldr	r3, [r7, #12]
   82f90:	691a      	ldr	r2, [r3, #16]
   82f92:	4b1e      	ldr	r3, [pc, #120]	; (8300c <pidReg+0x108>)
   82f94:	69f9      	ldr	r1, [r7, #28]
   82f96:	4610      	mov	r0, r2
   82f98:	4798      	blx	r3
   82f9a:	4603      	mov	r3, r0
   82f9c:	461a      	mov	r2, r3
   82f9e:	4b1b      	ldr	r3, [pc, #108]	; (8300c <pidReg+0x108>)
   82fa0:	69b9      	ldr	r1, [r7, #24]
   82fa2:	4610      	mov	r0, r2
   82fa4:	4798      	blx	r3
   82fa6:	4603      	mov	r3, r0
   82fa8:	617b      	str	r3, [r7, #20]

    // Saturate the output
    if (outPreSat > reg->outMax)
   82faa:	68fb      	ldr	r3, [r7, #12]
   82fac:	695a      	ldr	r2, [r3, #20]
   82fae:	4b18      	ldr	r3, [pc, #96]	; (83010 <pidReg+0x10c>)
   82fb0:	6979      	ldr	r1, [r7, #20]
   82fb2:	4610      	mov	r0, r2
   82fb4:	4798      	blx	r3
   82fb6:	4603      	mov	r3, r0
   82fb8:	2b00      	cmp	r3, #0
   82fba:	d003      	beq.n	82fc4 <pidReg+0xc0>
    {
        out = reg->outMax;
   82fbc:	68fb      	ldr	r3, [r7, #12]
   82fbe:	695b      	ldr	r3, [r3, #20]
   82fc0:	627b      	str	r3, [r7, #36]	; 0x24
   82fc2:	e00e      	b.n	82fe2 <pidReg+0xde>
    }
    else if (outPreSat < reg->outMin)
   82fc4:	68fb      	ldr	r3, [r7, #12]
   82fc6:	699a      	ldr	r2, [r3, #24]
   82fc8:	4b12      	ldr	r3, [pc, #72]	; (83014 <pidReg+0x110>)
   82fca:	6979      	ldr	r1, [r7, #20]
   82fcc:	4610      	mov	r0, r2
   82fce:	4798      	blx	r3
   82fd0:	4603      	mov	r3, r0
   82fd2:	2b00      	cmp	r3, #0
   82fd4:	d003      	beq.n	82fde <pidReg+0xda>
    {
        out = reg->outMin;
   82fd6:	68fb      	ldr	r3, [r7, #12]
   82fd8:	699b      	ldr	r3, [r3, #24]
   82fda:	627b      	str	r3, [r7, #36]	; 0x24
   82fdc:	e001      	b.n	82fe2 <pidReg+0xde>
    }
    else
    {
        out = outPreSat;
   82fde:	697b      	ldr	r3, [r7, #20]
   82fe0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Compute the saturate difference
    reg->satErr = out - outPreSat;
   82fe2:	4b08      	ldr	r3, [pc, #32]	; (83004 <pidReg+0x100>)
   82fe4:	6979      	ldr	r1, [r7, #20]
   82fe6:	6a78      	ldr	r0, [r7, #36]	; 0x24
   82fe8:	4798      	blx	r3
   82fea:	4603      	mov	r3, r0
   82fec:	461a      	mov	r2, r3
   82fee:	68fb      	ldr	r3, [r7, #12]
   82ff0:	61da      	str	r2, [r3, #28]

    // Keep error for next iteration
    reg->prevErr = err;
   82ff2:	68fb      	ldr	r3, [r7, #12]
   82ff4:	6a3a      	ldr	r2, [r7, #32]
   82ff6:	621a      	str	r2, [r3, #32]

    return out;
   82ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   82ffa:	4618      	mov	r0, r3
   82ffc:	372c      	adds	r7, #44	; 0x2c
   82ffe:	46bd      	mov	sp, r7
   83000:	bd90      	pop	{r4, r7, pc}
   83002:	bf00      	nop
   83004:	00084fe9 	.word	0x00084fe9
   83008:	000851fd 	.word	0x000851fd
   8300c:	00084fed 	.word	0x00084fed
   83010:	00085539 	.word	0x00085539
   83014:	00085575 	.word	0x00085575

00083018 <ioport_set_pin_level>:
{
   83018:	b480      	push	{r7}
   8301a:	b08b      	sub	sp, #44	; 0x2c
   8301c:	af00      	add	r7, sp, #0
   8301e:	6078      	str	r0, [r7, #4]
   83020:	460b      	mov	r3, r1
   83022:	70fb      	strb	r3, [r7, #3]
   83024:	687b      	ldr	r3, [r7, #4]
   83026:	627b      	str	r3, [r7, #36]	; 0x24
   83028:	78fb      	ldrb	r3, [r7, #3]
   8302a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   8302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83030:	61fb      	str	r3, [r7, #28]
   83032:	69fb      	ldr	r3, [r7, #28]
   83034:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83036:	69bb      	ldr	r3, [r7, #24]
   83038:	095b      	lsrs	r3, r3, #5
   8303a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8303c:	697b      	ldr	r3, [r7, #20]
   8303e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83042:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83046:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83048:	613b      	str	r3, [r7, #16]
	if (level) {
   8304a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8304e:	2b00      	cmp	r3, #0
   83050:	d009      	beq.n	83066 <ioport_set_pin_level+0x4e>
   83052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83054:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83056:	68fb      	ldr	r3, [r7, #12]
   83058:	f003 031f 	and.w	r3, r3, #31
   8305c:	2201      	movs	r2, #1
   8305e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   83060:	693b      	ldr	r3, [r7, #16]
   83062:	631a      	str	r2, [r3, #48]	; 0x30
}
   83064:	e008      	b.n	83078 <ioport_set_pin_level+0x60>
   83066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83068:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   8306a:	68bb      	ldr	r3, [r7, #8]
   8306c:	f003 031f 	and.w	r3, r3, #31
   83070:	2201      	movs	r2, #1
   83072:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83074:	693b      	ldr	r3, [r7, #16]
   83076:	635a      	str	r2, [r3, #52]	; 0x34
   83078:	bf00      	nop
   8307a:	372c      	adds	r7, #44	; 0x2c
   8307c:	46bd      	mov	sp, r7
   8307e:	bc80      	pop	{r7}
   83080:	4770      	bx	lr
	...

00083084 <SysTick_Handler>:
//float battery_voltage = 0;
uint8_t battery_percentage;
uint8_t prev_battery_percentage = 0;

void SysTick_Handler(void)
{
   83084:	b480      	push	{r7}
   83086:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   83088:	4b04      	ldr	r3, [pc, #16]	; (8309c <SysTick_Handler+0x18>)
   8308a:	681b      	ldr	r3, [r3, #0]
   8308c:	3301      	adds	r3, #1
   8308e:	4a03      	ldr	r2, [pc, #12]	; (8309c <SysTick_Handler+0x18>)
   83090:	6013      	str	r3, [r2, #0]
}
   83092:	bf00      	nop
   83094:	46bd      	mov	sp, r7
   83096:	bc80      	pop	{r7}
   83098:	4770      	bx	lr
   8309a:	bf00      	nop
   8309c:	20070dc4 	.word	0x20070dc4

000830a0 <getTicks>:

uint32_t getTicks(void)
{
   830a0:	b480      	push	{r7}
   830a2:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   830a4:	4b02      	ldr	r3, [pc, #8]	; (830b0 <getTicks+0x10>)
   830a6:	681b      	ldr	r3, [r3, #0]
}
   830a8:	4618      	mov	r0, r3
   830aa:	46bd      	mov	sp, r7
   830ac:	bc80      	pop	{r7}
   830ae:	4770      	bx	lr
   830b0:	20070dc4 	.word	0x20070dc4

000830b4 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   830b4:	b480      	push	{r7}
   830b6:	b085      	sub	sp, #20
   830b8:	af00      	add	r7, sp, #0
   830ba:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   830bc:	4b07      	ldr	r3, [pc, #28]	; (830dc <mdelay+0x28>)
   830be:	681b      	ldr	r3, [r3, #0]
   830c0:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   830c2:	bf00      	nop
   830c4:	4b05      	ldr	r3, [pc, #20]	; (830dc <mdelay+0x28>)
   830c6:	681a      	ldr	r2, [r3, #0]
   830c8:	68fb      	ldr	r3, [r7, #12]
   830ca:	1ad2      	subs	r2, r2, r3
   830cc:	687b      	ldr	r3, [r7, #4]
   830ce:	429a      	cmp	r2, r3
   830d0:	d3f8      	bcc.n	830c4 <mdelay+0x10>
}
   830d2:	bf00      	nop
   830d4:	3714      	adds	r7, #20
   830d6:	46bd      	mov	sp, r7
   830d8:	bc80      	pop	{r7}
   830da:	4770      	bx	lr
   830dc:	20070dc4 	.word	0x20070dc4

000830e0 <update_comm>:

void update_comm(void)
{
   830e0:	b580      	push	{r7, lr}
   830e2:	af00      	add	r7, sp, #0
    if ((getTicks() - ticks_comm) > 5)
   830e4:	4b0b      	ldr	r3, [pc, #44]	; (83114 <update_comm+0x34>)
   830e6:	4798      	blx	r3
   830e8:	4602      	mov	r2, r0
   830ea:	4b0b      	ldr	r3, [pc, #44]	; (83118 <update_comm+0x38>)
   830ec:	681b      	ldr	r3, [r3, #0]
   830ee:	1ad3      	subs	r3, r2, r3
   830f0:	2b05      	cmp	r3, #5
   830f2:	d90d      	bls.n	83110 <update_comm+0x30>
    {
        ticks_comm = getTicks();
   830f4:	4b07      	ldr	r3, [pc, #28]	; (83114 <update_comm+0x34>)
   830f6:	4798      	blx	r3
   830f8:	4602      	mov	r2, r0
   830fa:	4b07      	ldr	r3, [pc, #28]	; (83118 <update_comm+0x38>)
   830fc:	601a      	str	r2, [r3, #0]
        
        memcpy(&sens_buf, &mts, sizeof(mts));
   830fe:	2208      	movs	r2, #8
   83100:	4906      	ldr	r1, [pc, #24]	; (8311c <update_comm+0x3c>)
   83102:	4807      	ldr	r0, [pc, #28]	; (83120 <update_comm+0x40>)
   83104:	4b07      	ldr	r3, [pc, #28]	; (83124 <update_comm+0x44>)
   83106:	4798      	blx	r3
        spi_master_transfer(&sens_buf, sizeof(sens_buf));
   83108:	2110      	movs	r1, #16
   8310a:	4805      	ldr	r0, [pc, #20]	; (83120 <update_comm+0x40>)
   8310c:	4b06      	ldr	r3, [pc, #24]	; (83128 <update_comm+0x48>)
   8310e:	4798      	blx	r3
    }
}
   83110:	bf00      	nop
   83112:	bd80      	pop	{r7, pc}
   83114:	000830a1 	.word	0x000830a1
   83118:	20070e34 	.word	0x20070e34
   8311c:	20070e18 	.word	0x20070e18
   83120:	20070e08 	.word	0x20070e08
   83124:	00085625 	.word	0x00085625
   83128:	00080b15 	.word	0x00080b15

0008312c <update_battery>:

void update_battery(Bool update_forced)
{
   8312c:	b580      	push	{r7, lr}
   8312e:	b084      	sub	sp, #16
   83130:	af00      	add	r7, sp, #0
   83132:	4603      	mov	r3, r0
   83134:	71fb      	strb	r3, [r7, #7]
    char tmp[6];
    battery_percentage = stm.battery.percentage;
   83136:	4b20      	ldr	r3, [pc, #128]	; (831b8 <update_battery+0x8c>)
   83138:	7b5a      	ldrb	r2, [r3, #13]
   8313a:	4b20      	ldr	r3, [pc, #128]	; (831bc <update_battery+0x90>)
   8313c:	701a      	strb	r2, [r3, #0]
    
    if (update_forced || prev_battery_percentage != battery_percentage)
   8313e:	79fb      	ldrb	r3, [r7, #7]
   83140:	2b00      	cmp	r3, #0
   83142:	d105      	bne.n	83150 <update_battery+0x24>
   83144:	4b1e      	ldr	r3, [pc, #120]	; (831c0 <update_battery+0x94>)
   83146:	781a      	ldrb	r2, [r3, #0]
   83148:	4b1c      	ldr	r3, [pc, #112]	; (831bc <update_battery+0x90>)
   8314a:	781b      	ldrb	r3, [r3, #0]
   8314c:	429a      	cmp	r2, r3
   8314e:	d02f      	beq.n	831b0 <update_battery+0x84>
    {
        if (battery_percentage >= 100)
   83150:	4b1a      	ldr	r3, [pc, #104]	; (831bc <update_battery+0x90>)
   83152:	781b      	ldrb	r3, [r3, #0]
   83154:	2b63      	cmp	r3, #99	; 0x63
   83156:	d909      	bls.n	8316c <update_battery+0x40>
        {
            sprintf(tmp, "%3u%%", battery_percentage);
   83158:	4b18      	ldr	r3, [pc, #96]	; (831bc <update_battery+0x90>)
   8315a:	781b      	ldrb	r3, [r3, #0]
   8315c:	461a      	mov	r2, r3
   8315e:	f107 0308 	add.w	r3, r7, #8
   83162:	4918      	ldr	r1, [pc, #96]	; (831c4 <update_battery+0x98>)
   83164:	4618      	mov	r0, r3
   83166:	4b18      	ldr	r3, [pc, #96]	; (831c8 <update_battery+0x9c>)
   83168:	4798      	blx	r3
   8316a:	e016      	b.n	8319a <update_battery+0x6e>
        }
        else if (battery_percentage >= 10)
   8316c:	4b13      	ldr	r3, [pc, #76]	; (831bc <update_battery+0x90>)
   8316e:	781b      	ldrb	r3, [r3, #0]
   83170:	2b09      	cmp	r3, #9
   83172:	d909      	bls.n	83188 <update_battery+0x5c>
        {
            sprintf(tmp, " %2u%%", battery_percentage);
   83174:	4b11      	ldr	r3, [pc, #68]	; (831bc <update_battery+0x90>)
   83176:	781b      	ldrb	r3, [r3, #0]
   83178:	461a      	mov	r2, r3
   8317a:	f107 0308 	add.w	r3, r7, #8
   8317e:	4913      	ldr	r1, [pc, #76]	; (831cc <update_battery+0xa0>)
   83180:	4618      	mov	r0, r3
   83182:	4b11      	ldr	r3, [pc, #68]	; (831c8 <update_battery+0x9c>)
   83184:	4798      	blx	r3
   83186:	e008      	b.n	8319a <update_battery+0x6e>
        }
        else
        {
            sprintf(tmp, "  %1u%%", battery_percentage);
   83188:	4b0c      	ldr	r3, [pc, #48]	; (831bc <update_battery+0x90>)
   8318a:	781b      	ldrb	r3, [r3, #0]
   8318c:	461a      	mov	r2, r3
   8318e:	f107 0308 	add.w	r3, r7, #8
   83192:	490f      	ldr	r1, [pc, #60]	; (831d0 <update_battery+0xa4>)
   83194:	4618      	mov	r0, r3
   83196:	4b0c      	ldr	r3, [pc, #48]	; (831c8 <update_battery+0x9c>)
   83198:	4798      	blx	r3
        }
            
        lcd_print_s(1, 16, tmp);
   8319a:	f107 0308 	add.w	r3, r7, #8
   8319e:	461a      	mov	r2, r3
   831a0:	2110      	movs	r1, #16
   831a2:	2001      	movs	r0, #1
   831a4:	4b0b      	ldr	r3, [pc, #44]	; (831d4 <update_battery+0xa8>)
   831a6:	4798      	blx	r3
        prev_battery_percentage = battery_percentage;
   831a8:	4b04      	ldr	r3, [pc, #16]	; (831bc <update_battery+0x90>)
   831aa:	781a      	ldrb	r2, [r3, #0]
   831ac:	4b04      	ldr	r3, [pc, #16]	; (831c0 <update_battery+0x94>)
   831ae:	701a      	strb	r2, [r3, #0]
    }
}
   831b0:	bf00      	nop
   831b2:	3710      	adds	r7, #16
   831b4:	46bd      	mov	sp, r7
   831b6:	bd80      	pop	{r7, pc}
   831b8:	20070e20 	.word	0x20070e20
   831bc:	20070fd4 	.word	0x20070fd4
   831c0:	20070dc8 	.word	0x20070dc8
   831c4:	0008984c 	.word	0x0008984c
   831c8:	000857ad 	.word	0x000857ad
   831cc:	00089854 	.word	0x00089854
   831d0:	0008985c 	.word	0x0008985c
   831d4:	0008169d 	.word	0x0008169d

000831d8 <update_heartbeat>:

void update_heartbeat(void)
{
   831d8:	b580      	push	{r7, lr}
   831da:	af00      	add	r7, sp, #0
    if (heart_state)
   831dc:	4b20      	ldr	r3, [pc, #128]	; (83260 <update_heartbeat+0x88>)
   831de:	781b      	ldrb	r3, [r3, #0]
   831e0:	2b00      	cmp	r3, #0
   831e2:	d01d      	beq.n	83220 <update_heartbeat+0x48>
    {
        if (getTicks() >= (ticks_heartbeat + 100))
   831e4:	4b1f      	ldr	r3, [pc, #124]	; (83264 <update_heartbeat+0x8c>)
   831e6:	4798      	blx	r3
   831e8:	4602      	mov	r2, r0
   831ea:	4b1f      	ldr	r3, [pc, #124]	; (83268 <update_heartbeat+0x90>)
   831ec:	681b      	ldr	r3, [r3, #0]
   831ee:	3364      	adds	r3, #100	; 0x64
   831f0:	429a      	cmp	r2, r3
   831f2:	d333      	bcc.n	8325c <update_heartbeat+0x84>
        {
            ticks_heartbeat = getTicks();
   831f4:	4b1b      	ldr	r3, [pc, #108]	; (83264 <update_heartbeat+0x8c>)
   831f6:	4798      	blx	r3
   831f8:	4602      	mov	r2, r0
   831fa:	4b1b      	ldr	r3, [pc, #108]	; (83268 <update_heartbeat+0x90>)
   831fc:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 0);
   831fe:	2100      	movs	r1, #0
   83200:	206a      	movs	r0, #106	; 0x6a
   83202:	4b1a      	ldr	r3, [pc, #104]	; (8326c <update_heartbeat+0x94>)
   83204:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 0);
   83206:	2100      	movs	r1, #0
   83208:	2067      	movs	r0, #103	; 0x67
   8320a:	4b18      	ldr	r3, [pc, #96]	; (8326c <update_heartbeat+0x94>)
   8320c:	4798      	blx	r3
            mts.ibit.heartbeat = 0;
   8320e:	4a18      	ldr	r2, [pc, #96]	; (83270 <update_heartbeat+0x98>)
   83210:	7813      	ldrb	r3, [r2, #0]
   83212:	f36f 0300 	bfc	r3, #0, #1
   83216:	7013      	strb	r3, [r2, #0]
            heart_state = 0;
   83218:	4b11      	ldr	r3, [pc, #68]	; (83260 <update_heartbeat+0x88>)
   8321a:	2200      	movs	r2, #0
   8321c:	701a      	strb	r2, [r3, #0]
            ioport_set_pin_level(LED_M1, 1);
            mts.ibit.heartbeat = 1;
            heart_state = 1;
        }
    }
}
   8321e:	e01d      	b.n	8325c <update_heartbeat+0x84>
        if (getTicks() >= (ticks_heartbeat + 900))
   83220:	4b10      	ldr	r3, [pc, #64]	; (83264 <update_heartbeat+0x8c>)
   83222:	4798      	blx	r3
   83224:	4602      	mov	r2, r0
   83226:	4b10      	ldr	r3, [pc, #64]	; (83268 <update_heartbeat+0x90>)
   83228:	681b      	ldr	r3, [r3, #0]
   8322a:	f503 7361 	add.w	r3, r3, #900	; 0x384
   8322e:	429a      	cmp	r2, r3
   83230:	d314      	bcc.n	8325c <update_heartbeat+0x84>
            ticks_heartbeat = getTicks();
   83232:	4b0c      	ldr	r3, [pc, #48]	; (83264 <update_heartbeat+0x8c>)
   83234:	4798      	blx	r3
   83236:	4602      	mov	r2, r0
   83238:	4b0b      	ldr	r3, [pc, #44]	; (83268 <update_heartbeat+0x90>)
   8323a:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 1);
   8323c:	2101      	movs	r1, #1
   8323e:	206a      	movs	r0, #106	; 0x6a
   83240:	4b0a      	ldr	r3, [pc, #40]	; (8326c <update_heartbeat+0x94>)
   83242:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 1);
   83244:	2101      	movs	r1, #1
   83246:	2067      	movs	r0, #103	; 0x67
   83248:	4b08      	ldr	r3, [pc, #32]	; (8326c <update_heartbeat+0x94>)
   8324a:	4798      	blx	r3
            mts.ibit.heartbeat = 1;
   8324c:	4a08      	ldr	r2, [pc, #32]	; (83270 <update_heartbeat+0x98>)
   8324e:	7813      	ldrb	r3, [r2, #0]
   83250:	f043 0301 	orr.w	r3, r3, #1
   83254:	7013      	strb	r3, [r2, #0]
            heart_state = 1;
   83256:	4b02      	ldr	r3, [pc, #8]	; (83260 <update_heartbeat+0x88>)
   83258:	2201      	movs	r2, #1
   8325a:	701a      	strb	r2, [r3, #0]
}
   8325c:	bf00      	nop
   8325e:	bd80      	pop	{r7, pc}
   83260:	20070e30 	.word	0x20070e30
   83264:	000830a1 	.word	0x000830a1
   83268:	20070e40 	.word	0x20070e40
   8326c:	00083019 	.word	0x00083019
   83270:	20070e18 	.word	0x20070e18

00083274 <osc_enable>:
{
   83274:	b580      	push	{r7, lr}
   83276:	b082      	sub	sp, #8
   83278:	af00      	add	r7, sp, #0
   8327a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8327c:	687b      	ldr	r3, [r7, #4]
   8327e:	2b07      	cmp	r3, #7
   83280:	d831      	bhi.n	832e6 <osc_enable+0x72>
   83282:	a201      	add	r2, pc, #4	; (adr r2, 83288 <osc_enable+0x14>)
   83284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83288:	000832e5 	.word	0x000832e5
   8328c:	000832a9 	.word	0x000832a9
   83290:	000832b1 	.word	0x000832b1
   83294:	000832b9 	.word	0x000832b9
   83298:	000832c1 	.word	0x000832c1
   8329c:	000832c9 	.word	0x000832c9
   832a0:	000832d1 	.word	0x000832d1
   832a4:	000832db 	.word	0x000832db
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   832a8:	2000      	movs	r0, #0
   832aa:	4b11      	ldr	r3, [pc, #68]	; (832f0 <osc_enable+0x7c>)
   832ac:	4798      	blx	r3
		break;
   832ae:	e01a      	b.n	832e6 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   832b0:	2001      	movs	r0, #1
   832b2:	4b0f      	ldr	r3, [pc, #60]	; (832f0 <osc_enable+0x7c>)
   832b4:	4798      	blx	r3
		break;
   832b6:	e016      	b.n	832e6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   832b8:	2000      	movs	r0, #0
   832ba:	4b0e      	ldr	r3, [pc, #56]	; (832f4 <osc_enable+0x80>)
   832bc:	4798      	blx	r3
		break;
   832be:	e012      	b.n	832e6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   832c0:	2010      	movs	r0, #16
   832c2:	4b0c      	ldr	r3, [pc, #48]	; (832f4 <osc_enable+0x80>)
   832c4:	4798      	blx	r3
		break;
   832c6:	e00e      	b.n	832e6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   832c8:	2020      	movs	r0, #32
   832ca:	4b0a      	ldr	r3, [pc, #40]	; (832f4 <osc_enable+0x80>)
   832cc:	4798      	blx	r3
		break;
   832ce:	e00a      	b.n	832e6 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   832d0:	213e      	movs	r1, #62	; 0x3e
   832d2:	2000      	movs	r0, #0
   832d4:	4b08      	ldr	r3, [pc, #32]	; (832f8 <osc_enable+0x84>)
   832d6:	4798      	blx	r3
		break;
   832d8:	e005      	b.n	832e6 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   832da:	213e      	movs	r1, #62	; 0x3e
   832dc:	2001      	movs	r0, #1
   832de:	4b06      	ldr	r3, [pc, #24]	; (832f8 <osc_enable+0x84>)
   832e0:	4798      	blx	r3
		break;
   832e2:	e000      	b.n	832e6 <osc_enable+0x72>
		break;
   832e4:	bf00      	nop
}
   832e6:	bf00      	nop
   832e8:	3708      	adds	r7, #8
   832ea:	46bd      	mov	sp, r7
   832ec:	bd80      	pop	{r7, pc}
   832ee:	bf00      	nop
   832f0:	000838b1 	.word	0x000838b1
   832f4:	0008391d 	.word	0x0008391d
   832f8:	0008398d 	.word	0x0008398d

000832fc <osc_is_ready>:
{
   832fc:	b580      	push	{r7, lr}
   832fe:	b082      	sub	sp, #8
   83300:	af00      	add	r7, sp, #0
   83302:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83304:	687b      	ldr	r3, [r7, #4]
   83306:	2b07      	cmp	r3, #7
   83308:	d826      	bhi.n	83358 <osc_is_ready+0x5c>
   8330a:	a201      	add	r2, pc, #4	; (adr r2, 83310 <osc_is_ready+0x14>)
   8330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83310:	00083331 	.word	0x00083331
   83314:	00083335 	.word	0x00083335
   83318:	00083335 	.word	0x00083335
   8331c:	00083347 	.word	0x00083347
   83320:	00083347 	.word	0x00083347
   83324:	00083347 	.word	0x00083347
   83328:	00083347 	.word	0x00083347
   8332c:	00083347 	.word	0x00083347
		return 1;
   83330:	2301      	movs	r3, #1
   83332:	e012      	b.n	8335a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   83334:	4b0b      	ldr	r3, [pc, #44]	; (83364 <osc_is_ready+0x68>)
   83336:	4798      	blx	r3
   83338:	4603      	mov	r3, r0
   8333a:	2b00      	cmp	r3, #0
   8333c:	bf14      	ite	ne
   8333e:	2301      	movne	r3, #1
   83340:	2300      	moveq	r3, #0
   83342:	b2db      	uxtb	r3, r3
   83344:	e009      	b.n	8335a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   83346:	4b08      	ldr	r3, [pc, #32]	; (83368 <osc_is_ready+0x6c>)
   83348:	4798      	blx	r3
   8334a:	4603      	mov	r3, r0
   8334c:	2b00      	cmp	r3, #0
   8334e:	bf14      	ite	ne
   83350:	2301      	movne	r3, #1
   83352:	2300      	moveq	r3, #0
   83354:	b2db      	uxtb	r3, r3
   83356:	e000      	b.n	8335a <osc_is_ready+0x5e>
	return 0;
   83358:	2300      	movs	r3, #0
}
   8335a:	4618      	mov	r0, r3
   8335c:	3708      	adds	r7, #8
   8335e:	46bd      	mov	sp, r7
   83360:	bd80      	pop	{r7, pc}
   83362:	bf00      	nop
   83364:	000838e9 	.word	0x000838e9
   83368:	00083a05 	.word	0x00083a05

0008336c <osc_get_rate>:
{
   8336c:	b480      	push	{r7}
   8336e:	b083      	sub	sp, #12
   83370:	af00      	add	r7, sp, #0
   83372:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83374:	687b      	ldr	r3, [r7, #4]
   83376:	2b07      	cmp	r3, #7
   83378:	d825      	bhi.n	833c6 <osc_get_rate+0x5a>
   8337a:	a201      	add	r2, pc, #4	; (adr r2, 83380 <osc_get_rate+0x14>)
   8337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83380:	000833a1 	.word	0x000833a1
   83384:	000833a7 	.word	0x000833a7
   83388:	000833ad 	.word	0x000833ad
   8338c:	000833b3 	.word	0x000833b3
   83390:	000833b7 	.word	0x000833b7
   83394:	000833bb 	.word	0x000833bb
   83398:	000833bf 	.word	0x000833bf
   8339c:	000833c3 	.word	0x000833c3
		return OSC_SLCK_32K_RC_HZ;
   833a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   833a4:	e010      	b.n	833c8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   833a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   833aa:	e00d      	b.n	833c8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   833ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   833b0:	e00a      	b.n	833c8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   833b2:	4b08      	ldr	r3, [pc, #32]	; (833d4 <osc_get_rate+0x68>)
   833b4:	e008      	b.n	833c8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   833b6:	4b08      	ldr	r3, [pc, #32]	; (833d8 <osc_get_rate+0x6c>)
   833b8:	e006      	b.n	833c8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   833ba:	4b08      	ldr	r3, [pc, #32]	; (833dc <osc_get_rate+0x70>)
   833bc:	e004      	b.n	833c8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   833be:	4b07      	ldr	r3, [pc, #28]	; (833dc <osc_get_rate+0x70>)
   833c0:	e002      	b.n	833c8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   833c2:	4b06      	ldr	r3, [pc, #24]	; (833dc <osc_get_rate+0x70>)
   833c4:	e000      	b.n	833c8 <osc_get_rate+0x5c>
	return 0;
   833c6:	2300      	movs	r3, #0
}
   833c8:	4618      	mov	r0, r3
   833ca:	370c      	adds	r7, #12
   833cc:	46bd      	mov	sp, r7
   833ce:	bc80      	pop	{r7}
   833d0:	4770      	bx	lr
   833d2:	bf00      	nop
   833d4:	003d0900 	.word	0x003d0900
   833d8:	007a1200 	.word	0x007a1200
   833dc:	00b71b00 	.word	0x00b71b00

000833e0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   833e0:	b580      	push	{r7, lr}
   833e2:	b082      	sub	sp, #8
   833e4:	af00      	add	r7, sp, #0
   833e6:	4603      	mov	r3, r0
   833e8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   833ea:	bf00      	nop
   833ec:	79fb      	ldrb	r3, [r7, #7]
   833ee:	4618      	mov	r0, r3
   833f0:	4b05      	ldr	r3, [pc, #20]	; (83408 <osc_wait_ready+0x28>)
   833f2:	4798      	blx	r3
   833f4:	4603      	mov	r3, r0
   833f6:	f083 0301 	eor.w	r3, r3, #1
   833fa:	b2db      	uxtb	r3, r3
   833fc:	2b00      	cmp	r3, #0
   833fe:	d1f5      	bne.n	833ec <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   83400:	bf00      	nop
   83402:	3708      	adds	r7, #8
   83404:	46bd      	mov	sp, r7
   83406:	bd80      	pop	{r7, pc}
   83408:	000832fd 	.word	0x000832fd

0008340c <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   8340c:	b580      	push	{r7, lr}
   8340e:	b086      	sub	sp, #24
   83410:	af00      	add	r7, sp, #0
   83412:	60f8      	str	r0, [r7, #12]
   83414:	607a      	str	r2, [r7, #4]
   83416:	603b      	str	r3, [r7, #0]
   83418:	460b      	mov	r3, r1
   8341a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8341c:	687b      	ldr	r3, [r7, #4]
   8341e:	2b00      	cmp	r3, #0
   83420:	d107      	bne.n	83432 <pll_config_init+0x26>
   83422:	683b      	ldr	r3, [r7, #0]
   83424:	2b00      	cmp	r3, #0
   83426:	d104      	bne.n	83432 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   83428:	68fb      	ldr	r3, [r7, #12]
   8342a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8342e:	601a      	str	r2, [r3, #0]
   83430:	e019      	b.n	83466 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   83432:	7afb      	ldrb	r3, [r7, #11]
   83434:	4618      	mov	r0, r3
   83436:	4b0e      	ldr	r3, [pc, #56]	; (83470 <pll_config_init+0x64>)
   83438:	4798      	blx	r3
   8343a:	4602      	mov	r2, r0
   8343c:	687b      	ldr	r3, [r7, #4]
   8343e:	fbb2 f3f3 	udiv	r3, r2, r3
   83442:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   83444:	697b      	ldr	r3, [r7, #20]
   83446:	683a      	ldr	r2, [r7, #0]
   83448:	fb02 f303 	mul.w	r3, r2, r3
   8344c:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8344e:	683b      	ldr	r3, [r7, #0]
   83450:	3b01      	subs	r3, #1
   83452:	041a      	lsls	r2, r3, #16
   83454:	4b07      	ldr	r3, [pc, #28]	; (83474 <pll_config_init+0x68>)
   83456:	4013      	ands	r3, r2
   83458:	687a      	ldr	r2, [r7, #4]
   8345a:	b2d2      	uxtb	r2, r2
   8345c:	4313      	orrs	r3, r2
   8345e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   83462:	68fb      	ldr	r3, [r7, #12]
   83464:	601a      	str	r2, [r3, #0]
	}
}
   83466:	bf00      	nop
   83468:	3718      	adds	r7, #24
   8346a:	46bd      	mov	sp, r7
   8346c:	bd80      	pop	{r7, pc}
   8346e:	bf00      	nop
   83470:	0008336d 	.word	0x0008336d
   83474:	07ff0000 	.word	0x07ff0000

00083478 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   83478:	b580      	push	{r7, lr}
   8347a:	b082      	sub	sp, #8
   8347c:	af00      	add	r7, sp, #0
   8347e:	6078      	str	r0, [r7, #4]
   83480:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   83482:	683b      	ldr	r3, [r7, #0]
   83484:	2b00      	cmp	r3, #0
   83486:	d108      	bne.n	8349a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83488:	4b09      	ldr	r3, [pc, #36]	; (834b0 <pll_enable+0x38>)
   8348a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8348c:	4a09      	ldr	r2, [pc, #36]	; (834b4 <pll_enable+0x3c>)
   8348e:	687b      	ldr	r3, [r7, #4]
   83490:	681b      	ldr	r3, [r3, #0]
   83492:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83496:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   83498:	e005      	b.n	834a6 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8349a:	4a06      	ldr	r2, [pc, #24]	; (834b4 <pll_enable+0x3c>)
   8349c:	687b      	ldr	r3, [r7, #4]
   8349e:	681b      	ldr	r3, [r3, #0]
   834a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   834a4:	61d3      	str	r3, [r2, #28]
}
   834a6:	bf00      	nop
   834a8:	3708      	adds	r7, #8
   834aa:	46bd      	mov	sp, r7
   834ac:	bd80      	pop	{r7, pc}
   834ae:	bf00      	nop
   834b0:	00083a1d 	.word	0x00083a1d
   834b4:	400e0600 	.word	0x400e0600

000834b8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   834b8:	b580      	push	{r7, lr}
   834ba:	b082      	sub	sp, #8
   834bc:	af00      	add	r7, sp, #0
   834be:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   834c0:	687b      	ldr	r3, [r7, #4]
   834c2:	2b00      	cmp	r3, #0
   834c4:	d103      	bne.n	834ce <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   834c6:	4b05      	ldr	r3, [pc, #20]	; (834dc <pll_is_locked+0x24>)
   834c8:	4798      	blx	r3
   834ca:	4603      	mov	r3, r0
   834cc:	e002      	b.n	834d4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   834ce:	4b04      	ldr	r3, [pc, #16]	; (834e0 <pll_is_locked+0x28>)
   834d0:	4798      	blx	r3
   834d2:	4603      	mov	r3, r0
	}
}
   834d4:	4618      	mov	r0, r3
   834d6:	3708      	adds	r7, #8
   834d8:	46bd      	mov	sp, r7
   834da:	bd80      	pop	{r7, pc}
   834dc:	00083a35 	.word	0x00083a35
   834e0:	00083a4d 	.word	0x00083a4d

000834e4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   834e4:	b580      	push	{r7, lr}
   834e6:	b082      	sub	sp, #8
   834e8:	af00      	add	r7, sp, #0
   834ea:	4603      	mov	r3, r0
   834ec:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   834ee:	79fb      	ldrb	r3, [r7, #7]
   834f0:	3b03      	subs	r3, #3
   834f2:	2b04      	cmp	r3, #4
   834f4:	d808      	bhi.n	83508 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   834f6:	79fb      	ldrb	r3, [r7, #7]
   834f8:	4618      	mov	r0, r3
   834fa:	4b06      	ldr	r3, [pc, #24]	; (83514 <pll_enable_source+0x30>)
   834fc:	4798      	blx	r3
		osc_wait_ready(e_src);
   834fe:	79fb      	ldrb	r3, [r7, #7]
   83500:	4618      	mov	r0, r3
   83502:	4b05      	ldr	r3, [pc, #20]	; (83518 <pll_enable_source+0x34>)
   83504:	4798      	blx	r3
		break;
   83506:	e000      	b.n	8350a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   83508:	bf00      	nop
	}
}
   8350a:	bf00      	nop
   8350c:	3708      	adds	r7, #8
   8350e:	46bd      	mov	sp, r7
   83510:	bd80      	pop	{r7, pc}
   83512:	bf00      	nop
   83514:	00083275 	.word	0x00083275
   83518:	000833e1 	.word	0x000833e1

0008351c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   8351c:	b580      	push	{r7, lr}
   8351e:	b082      	sub	sp, #8
   83520:	af00      	add	r7, sp, #0
   83522:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83524:	bf00      	nop
   83526:	6878      	ldr	r0, [r7, #4]
   83528:	4b04      	ldr	r3, [pc, #16]	; (8353c <pll_wait_for_lock+0x20>)
   8352a:	4798      	blx	r3
   8352c:	4603      	mov	r3, r0
   8352e:	2b00      	cmp	r3, #0
   83530:	d0f9      	beq.n	83526 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   83532:	2300      	movs	r3, #0
}
   83534:	4618      	mov	r0, r3
   83536:	3708      	adds	r7, #8
   83538:	46bd      	mov	sp, r7
   8353a:	bd80      	pop	{r7, pc}
   8353c:	000834b9 	.word	0x000834b9

00083540 <sysclk_get_main_hz>:
{
   83540:	b580      	push	{r7, lr}
   83542:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83544:	2006      	movs	r0, #6
   83546:	4b04      	ldr	r3, [pc, #16]	; (83558 <sysclk_get_main_hz+0x18>)
   83548:	4798      	blx	r3
   8354a:	4602      	mov	r2, r0
   8354c:	4613      	mov	r3, r2
   8354e:	00db      	lsls	r3, r3, #3
   83550:	1a9b      	subs	r3, r3, r2
   83552:	005b      	lsls	r3, r3, #1
}
   83554:	4618      	mov	r0, r3
   83556:	bd80      	pop	{r7, pc}
   83558:	0008336d 	.word	0x0008336d

0008355c <sysclk_get_cpu_hz>:
{
   8355c:	b580      	push	{r7, lr}
   8355e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83560:	4b02      	ldr	r3, [pc, #8]	; (8356c <sysclk_get_cpu_hz+0x10>)
   83562:	4798      	blx	r3
   83564:	4603      	mov	r3, r0
   83566:	085b      	lsrs	r3, r3, #1
}
   83568:	4618      	mov	r0, r3
   8356a:	bd80      	pop	{r7, pc}
   8356c:	00083541 	.word	0x00083541

00083570 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   83570:	b590      	push	{r4, r7, lr}
   83572:	b083      	sub	sp, #12
   83574:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83576:	4811      	ldr	r0, [pc, #68]	; (835bc <sysclk_init+0x4c>)
   83578:	4b11      	ldr	r3, [pc, #68]	; (835c0 <sysclk_init+0x50>)
   8357a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8357c:	2006      	movs	r0, #6
   8357e:	4b11      	ldr	r3, [pc, #68]	; (835c4 <sysclk_init+0x54>)
   83580:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   83582:	1d38      	adds	r0, r7, #4
   83584:	230e      	movs	r3, #14
   83586:	2201      	movs	r2, #1
   83588:	2106      	movs	r1, #6
   8358a:	4c0f      	ldr	r4, [pc, #60]	; (835c8 <sysclk_init+0x58>)
   8358c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8358e:	1d3b      	adds	r3, r7, #4
   83590:	2100      	movs	r1, #0
   83592:	4618      	mov	r0, r3
   83594:	4b0d      	ldr	r3, [pc, #52]	; (835cc <sysclk_init+0x5c>)
   83596:	4798      	blx	r3
		pll_wait_for_lock(0);
   83598:	2000      	movs	r0, #0
   8359a:	4b0d      	ldr	r3, [pc, #52]	; (835d0 <sysclk_init+0x60>)
   8359c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8359e:	2010      	movs	r0, #16
   835a0:	4b0c      	ldr	r3, [pc, #48]	; (835d4 <sysclk_init+0x64>)
   835a2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   835a4:	4b0c      	ldr	r3, [pc, #48]	; (835d8 <sysclk_init+0x68>)
   835a6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   835a8:	4b0c      	ldr	r3, [pc, #48]	; (835dc <sysclk_init+0x6c>)
   835aa:	4798      	blx	r3
   835ac:	4603      	mov	r3, r0
   835ae:	4618      	mov	r0, r3
   835b0:	4b03      	ldr	r3, [pc, #12]	; (835c0 <sysclk_init+0x50>)
   835b2:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   835b4:	bf00      	nop
   835b6:	370c      	adds	r7, #12
   835b8:	46bd      	mov	sp, r7
   835ba:	bd90      	pop	{r4, r7, pc}
   835bc:	0501bd00 	.word	0x0501bd00
   835c0:	200700d1 	.word	0x200700d1
   835c4:	000834e5 	.word	0x000834e5
   835c8:	0008340d 	.word	0x0008340d
   835cc:	00083479 	.word	0x00083479
   835d0:	0008351d 	.word	0x0008351d
   835d4:	00083831 	.word	0x00083831
   835d8:	000841c1 	.word	0x000841c1
   835dc:	0008355d 	.word	0x0008355d

000835e0 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   835e0:	b580      	push	{r7, lr}
   835e2:	b082      	sub	sp, #8
   835e4:	af00      	add	r7, sp, #0
   835e6:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   835e8:	6878      	ldr	r0, [r7, #4]
   835ea:	4b03      	ldr	r3, [pc, #12]	; (835f8 <dmac_init+0x18>)
   835ec:	4798      	blx	r3
}
   835ee:	bf00      	nop
   835f0:	3708      	adds	r7, #8
   835f2:	46bd      	mov	sp, r7
   835f4:	bd80      	pop	{r7, pc}
   835f6:	bf00      	nop
   835f8:	0008363b 	.word	0x0008363b

000835fc <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   835fc:	b480      	push	{r7}
   835fe:	b083      	sub	sp, #12
   83600:	af00      	add	r7, sp, #0
   83602:	6078      	str	r0, [r7, #4]
   83604:	460b      	mov	r3, r1
   83606:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   83608:	687b      	ldr	r3, [r7, #4]
   8360a:	681b      	ldr	r3, [r3, #0]
   8360c:	f023 0210 	bic.w	r2, r3, #16
   83610:	78fb      	ldrb	r3, [r7, #3]
   83612:	431a      	orrs	r2, r3
   83614:	687b      	ldr	r3, [r7, #4]
   83616:	601a      	str	r2, [r3, #0]
}
   83618:	bf00      	nop
   8361a:	370c      	adds	r7, #12
   8361c:	46bd      	mov	sp, r7
   8361e:	bc80      	pop	{r7}
   83620:	4770      	bx	lr

00083622 <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   83622:	b480      	push	{r7}
   83624:	b083      	sub	sp, #12
   83626:	af00      	add	r7, sp, #0
   83628:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   8362a:	687b      	ldr	r3, [r7, #4]
   8362c:	2201      	movs	r2, #1
   8362e:	605a      	str	r2, [r3, #4]
}
   83630:	bf00      	nop
   83632:	370c      	adds	r7, #12
   83634:	46bd      	mov	sp, r7
   83636:	bc80      	pop	{r7}
   83638:	4770      	bx	lr

0008363a <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   8363a:	b480      	push	{r7}
   8363c:	b083      	sub	sp, #12
   8363e:	af00      	add	r7, sp, #0
   83640:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   83642:	687b      	ldr	r3, [r7, #4]
   83644:	685b      	ldr	r3, [r3, #4]
   83646:	f023 0201 	bic.w	r2, r3, #1
   8364a:	687b      	ldr	r3, [r7, #4]
   8364c:	605a      	str	r2, [r3, #4]
}
   8364e:	bf00      	nop
   83650:	370c      	adds	r7, #12
   83652:	46bd      	mov	sp, r7
   83654:	bc80      	pop	{r7}
   83656:	4770      	bx	lr

00083658 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   83658:	b480      	push	{r7}
   8365a:	b083      	sub	sp, #12
   8365c:	af00      	add	r7, sp, #0
   8365e:	6078      	str	r0, [r7, #4]
   83660:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   83662:	687b      	ldr	r3, [r7, #4]
   83664:	683a      	ldr	r2, [r7, #0]
   83666:	619a      	str	r2, [r3, #24]
}
   83668:	bf00      	nop
   8366a:	370c      	adds	r7, #12
   8366c:	46bd      	mov	sp, r7
   8366e:	bc80      	pop	{r7}
   83670:	4770      	bx	lr

00083672 <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   83672:	b480      	push	{r7}
   83674:	b083      	sub	sp, #12
   83676:	af00      	add	r7, sp, #0
   83678:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   8367a:	687b      	ldr	r3, [r7, #4]
   8367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   8367e:	4618      	mov	r0, r3
   83680:	370c      	adds	r7, #12
   83682:	46bd      	mov	sp, r7
   83684:	bc80      	pop	{r7}
   83686:	4770      	bx	lr

00083688 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   83688:	b480      	push	{r7}
   8368a:	b083      	sub	sp, #12
   8368c:	af00      	add	r7, sp, #0
   8368e:	6078      	str	r0, [r7, #4]
   83690:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   83692:	2201      	movs	r2, #1
   83694:	683b      	ldr	r3, [r7, #0]
   83696:	409a      	lsls	r2, r3
   83698:	687b      	ldr	r3, [r7, #4]
   8369a:	629a      	str	r2, [r3, #40]	; 0x28
}
   8369c:	bf00      	nop
   8369e:	370c      	adds	r7, #12
   836a0:	46bd      	mov	sp, r7
   836a2:	bc80      	pop	{r7}
   836a4:	4770      	bx	lr

000836a6 <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   836a6:	b480      	push	{r7}
   836a8:	b083      	sub	sp, #12
   836aa:	af00      	add	r7, sp, #0
   836ac:	6078      	str	r0, [r7, #4]
   836ae:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   836b0:	2201      	movs	r2, #1
   836b2:	683b      	ldr	r3, [r7, #0]
   836b4:	409a      	lsls	r2, r3
   836b6:	687b      	ldr	r3, [r7, #4]
   836b8:	62da      	str	r2, [r3, #44]	; 0x2c
}
   836ba:	bf00      	nop
   836bc:	370c      	adds	r7, #12
   836be:	46bd      	mov	sp, r7
   836c0:	bc80      	pop	{r7}
   836c2:	4770      	bx	lr

000836c4 <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   836c4:	b480      	push	{r7}
   836c6:	b085      	sub	sp, #20
   836c8:	af00      	add	r7, sp, #0
   836ca:	60f8      	str	r0, [r7, #12]
   836cc:	60b9      	str	r1, [r7, #8]
   836ce:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   836d0:	68f9      	ldr	r1, [r7, #12]
   836d2:	68ba      	ldr	r2, [r7, #8]
   836d4:	4613      	mov	r3, r2
   836d6:	009b      	lsls	r3, r3, #2
   836d8:	4413      	add	r3, r2
   836da:	00db      	lsls	r3, r3, #3
   836dc:	440b      	add	r3, r1
   836de:	333c      	adds	r3, #60	; 0x3c
   836e0:	687a      	ldr	r2, [r7, #4]
   836e2:	601a      	str	r2, [r3, #0]
}
   836e4:	bf00      	nop
   836e6:	3714      	adds	r7, #20
   836e8:	46bd      	mov	sp, r7
   836ea:	bc80      	pop	{r7}
   836ec:	4770      	bx	lr

000836ee <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   836ee:	b480      	push	{r7}
   836f0:	b085      	sub	sp, #20
   836f2:	af00      	add	r7, sp, #0
   836f4:	60f8      	str	r0, [r7, #12]
   836f6:	60b9      	str	r1, [r7, #8]
   836f8:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   836fa:	68f9      	ldr	r1, [r7, #12]
   836fc:	68ba      	ldr	r2, [r7, #8]
   836fe:	4613      	mov	r3, r2
   83700:	009b      	lsls	r3, r3, #2
   83702:	4413      	add	r3, r2
   83704:	00db      	lsls	r3, r3, #3
   83706:	440b      	add	r3, r1
   83708:	3340      	adds	r3, #64	; 0x40
   8370a:	687a      	ldr	r2, [r7, #4]
   8370c:	601a      	str	r2, [r3, #0]
}
   8370e:	bf00      	nop
   83710:	3714      	adds	r7, #20
   83712:	46bd      	mov	sp, r7
   83714:	bc80      	pop	{r7}
   83716:	4770      	bx	lr

00083718 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   83718:	b480      	push	{r7}
   8371a:	b085      	sub	sp, #20
   8371c:	af00      	add	r7, sp, #0
   8371e:	60f8      	str	r0, [r7, #12]
   83720:	60b9      	str	r1, [r7, #8]
   83722:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   83724:	68f9      	ldr	r1, [r7, #12]
   83726:	68ba      	ldr	r2, [r7, #8]
   83728:	4613      	mov	r3, r2
   8372a:	009b      	lsls	r3, r3, #2
   8372c:	4413      	add	r3, r2
   8372e:	00db      	lsls	r3, r3, #3
   83730:	440b      	add	r3, r1
   83732:	3344      	adds	r3, #68	; 0x44
   83734:	687a      	ldr	r2, [r7, #4]
   83736:	601a      	str	r2, [r3, #0]
}
   83738:	bf00      	nop
   8373a:	3714      	adds	r7, #20
   8373c:	46bd      	mov	sp, r7
   8373e:	bc80      	pop	{r7}
   83740:	4770      	bx	lr

00083742 <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   83742:	b480      	push	{r7}
   83744:	b085      	sub	sp, #20
   83746:	af00      	add	r7, sp, #0
   83748:	60f8      	str	r0, [r7, #12]
   8374a:	60b9      	str	r1, [r7, #8]
   8374c:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   8374e:	68f9      	ldr	r1, [r7, #12]
   83750:	68ba      	ldr	r2, [r7, #8]
   83752:	4613      	mov	r3, r2
   83754:	009b      	lsls	r3, r3, #2
   83756:	4413      	add	r3, r2
   83758:	00db      	lsls	r3, r3, #3
   8375a:	440b      	add	r3, r1
   8375c:	3348      	adds	r3, #72	; 0x48
   8375e:	687a      	ldr	r2, [r7, #4]
   83760:	601a      	str	r2, [r3, #0]
}
   83762:	bf00      	nop
   83764:	3714      	adds	r7, #20
   83766:	46bd      	mov	sp, r7
   83768:	bc80      	pop	{r7}
   8376a:	4770      	bx	lr

0008376c <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   8376c:	b480      	push	{r7}
   8376e:	b085      	sub	sp, #20
   83770:	af00      	add	r7, sp, #0
   83772:	60f8      	str	r0, [r7, #12]
   83774:	60b9      	str	r1, [r7, #8]
   83776:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   83778:	68f9      	ldr	r1, [r7, #12]
   8377a:	68ba      	ldr	r2, [r7, #8]
   8377c:	4613      	mov	r3, r2
   8377e:	009b      	lsls	r3, r3, #2
   83780:	4413      	add	r3, r2
   83782:	00db      	lsls	r3, r3, #3
   83784:	440b      	add	r3, r1
   83786:	334c      	adds	r3, #76	; 0x4c
   83788:	687a      	ldr	r2, [r7, #4]
   8378a:	601a      	str	r2, [r3, #0]
}
   8378c:	bf00      	nop
   8378e:	3714      	adds	r7, #20
   83790:	46bd      	mov	sp, r7
   83792:	bc80      	pop	{r7}
   83794:	4770      	bx	lr

00083796 <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   83796:	b480      	push	{r7}
   83798:	b085      	sub	sp, #20
   8379a:	af00      	add	r7, sp, #0
   8379c:	60f8      	str	r0, [r7, #12]
   8379e:	60b9      	str	r1, [r7, #8]
   837a0:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   837a2:	68f9      	ldr	r1, [r7, #12]
   837a4:	68ba      	ldr	r2, [r7, #8]
   837a6:	4613      	mov	r3, r2
   837a8:	009b      	lsls	r3, r3, #2
   837aa:	4413      	add	r3, r2
   837ac:	00db      	lsls	r3, r3, #3
   837ae:	440b      	add	r3, r1
   837b0:	3350      	adds	r3, #80	; 0x50
   837b2:	687a      	ldr	r2, [r7, #4]
   837b4:	601a      	str	r2, [r3, #0]
}
   837b6:	bf00      	nop
   837b8:	3714      	adds	r7, #20
   837ba:	46bd      	mov	sp, r7
   837bc:	bc80      	pop	{r7}
   837be:	4770      	bx	lr

000837c0 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   837c0:	b580      	push	{r7, lr}
   837c2:	b084      	sub	sp, #16
   837c4:	af00      	add	r7, sp, #0
   837c6:	60f8      	str	r0, [r7, #12]
   837c8:	60b9      	str	r1, [r7, #8]
   837ca:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   837cc:	68fb      	ldr	r3, [r7, #12]
   837ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   837d0:	687b      	ldr	r3, [r7, #4]
   837d2:	681b      	ldr	r3, [r3, #0]
   837d4:	461a      	mov	r2, r3
   837d6:	68b9      	ldr	r1, [r7, #8]
   837d8:	68f8      	ldr	r0, [r7, #12]
   837da:	4b10      	ldr	r3, [pc, #64]	; (8381c <dmac_channel_single_buf_transfer_init+0x5c>)
   837dc:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   837de:	687b      	ldr	r3, [r7, #4]
   837e0:	685b      	ldr	r3, [r3, #4]
   837e2:	461a      	mov	r2, r3
   837e4:	68b9      	ldr	r1, [r7, #8]
   837e6:	68f8      	ldr	r0, [r7, #12]
   837e8:	4b0d      	ldr	r3, [pc, #52]	; (83820 <dmac_channel_single_buf_transfer_init+0x60>)
   837ea:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   837ec:	2200      	movs	r2, #0
   837ee:	68b9      	ldr	r1, [r7, #8]
   837f0:	68f8      	ldr	r0, [r7, #12]
   837f2:	4b0c      	ldr	r3, [pc, #48]	; (83824 <dmac_channel_single_buf_transfer_init+0x64>)
   837f4:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   837f6:	687b      	ldr	r3, [r7, #4]
   837f8:	689b      	ldr	r3, [r3, #8]
   837fa:	461a      	mov	r2, r3
   837fc:	68b9      	ldr	r1, [r7, #8]
   837fe:	68f8      	ldr	r0, [r7, #12]
   83800:	4b09      	ldr	r3, [pc, #36]	; (83828 <dmac_channel_single_buf_transfer_init+0x68>)
   83802:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   83804:	687b      	ldr	r3, [r7, #4]
   83806:	68db      	ldr	r3, [r3, #12]
   83808:	461a      	mov	r2, r3
   8380a:	68b9      	ldr	r1, [r7, #8]
   8380c:	68f8      	ldr	r0, [r7, #12]
   8380e:	4b07      	ldr	r3, [pc, #28]	; (8382c <dmac_channel_single_buf_transfer_init+0x6c>)
   83810:	4798      	blx	r3
}
   83812:	bf00      	nop
   83814:	3710      	adds	r7, #16
   83816:	46bd      	mov	sp, r7
   83818:	bd80      	pop	{r7, pc}
   8381a:	bf00      	nop
   8381c:	000836c5 	.word	0x000836c5
   83820:	000836ef 	.word	0x000836ef
   83824:	00083719 	.word	0x00083719
   83828:	00083743 	.word	0x00083743
   8382c:	0008376d 	.word	0x0008376d

00083830 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83830:	b480      	push	{r7}
   83832:	b085      	sub	sp, #20
   83834:	af00      	add	r7, sp, #0
   83836:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83838:	491c      	ldr	r1, [pc, #112]	; (838ac <pmc_switch_mck_to_pllack+0x7c>)
   8383a:	4b1c      	ldr	r3, [pc, #112]	; (838ac <pmc_switch_mck_to_pllack+0x7c>)
   8383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8383e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83842:	687b      	ldr	r3, [r7, #4]
   83844:	4313      	orrs	r3, r2
   83846:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83848:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8384c:	60fb      	str	r3, [r7, #12]
   8384e:	e007      	b.n	83860 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83850:	68fb      	ldr	r3, [r7, #12]
   83852:	2b00      	cmp	r3, #0
   83854:	d101      	bne.n	8385a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83856:	2301      	movs	r3, #1
   83858:	e023      	b.n	838a2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8385a:	68fb      	ldr	r3, [r7, #12]
   8385c:	3b01      	subs	r3, #1
   8385e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83860:	4b12      	ldr	r3, [pc, #72]	; (838ac <pmc_switch_mck_to_pllack+0x7c>)
   83862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83864:	f003 0308 	and.w	r3, r3, #8
   83868:	2b00      	cmp	r3, #0
   8386a:	d0f1      	beq.n	83850 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8386c:	4a0f      	ldr	r2, [pc, #60]	; (838ac <pmc_switch_mck_to_pllack+0x7c>)
   8386e:	4b0f      	ldr	r3, [pc, #60]	; (838ac <pmc_switch_mck_to_pllack+0x7c>)
   83870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83872:	f023 0303 	bic.w	r3, r3, #3
   83876:	f043 0302 	orr.w	r3, r3, #2
   8387a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8387c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83880:	60fb      	str	r3, [r7, #12]
   83882:	e007      	b.n	83894 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83884:	68fb      	ldr	r3, [r7, #12]
   83886:	2b00      	cmp	r3, #0
   83888:	d101      	bne.n	8388e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   8388a:	2301      	movs	r3, #1
   8388c:	e009      	b.n	838a2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8388e:	68fb      	ldr	r3, [r7, #12]
   83890:	3b01      	subs	r3, #1
   83892:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83894:	4b05      	ldr	r3, [pc, #20]	; (838ac <pmc_switch_mck_to_pllack+0x7c>)
   83896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83898:	f003 0308 	and.w	r3, r3, #8
   8389c:	2b00      	cmp	r3, #0
   8389e:	d0f1      	beq.n	83884 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   838a0:	2300      	movs	r3, #0
}
   838a2:	4618      	mov	r0, r3
   838a4:	3714      	adds	r7, #20
   838a6:	46bd      	mov	sp, r7
   838a8:	bc80      	pop	{r7}
   838aa:	4770      	bx	lr
   838ac:	400e0600 	.word	0x400e0600

000838b0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   838b0:	b480      	push	{r7}
   838b2:	b083      	sub	sp, #12
   838b4:	af00      	add	r7, sp, #0
   838b6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   838b8:	687b      	ldr	r3, [r7, #4]
   838ba:	2b01      	cmp	r3, #1
   838bc:	d107      	bne.n	838ce <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   838be:	4a08      	ldr	r2, [pc, #32]	; (838e0 <pmc_switch_sclk_to_32kxtal+0x30>)
   838c0:	4b07      	ldr	r3, [pc, #28]	; (838e0 <pmc_switch_sclk_to_32kxtal+0x30>)
   838c2:	689b      	ldr	r3, [r3, #8]
   838c4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   838c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   838cc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   838ce:	4b04      	ldr	r3, [pc, #16]	; (838e0 <pmc_switch_sclk_to_32kxtal+0x30>)
   838d0:	4a04      	ldr	r2, [pc, #16]	; (838e4 <pmc_switch_sclk_to_32kxtal+0x34>)
   838d2:	601a      	str	r2, [r3, #0]
}
   838d4:	bf00      	nop
   838d6:	370c      	adds	r7, #12
   838d8:	46bd      	mov	sp, r7
   838da:	bc80      	pop	{r7}
   838dc:	4770      	bx	lr
   838de:	bf00      	nop
   838e0:	400e1a10 	.word	0x400e1a10
   838e4:	a5000008 	.word	0xa5000008

000838e8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   838e8:	b480      	push	{r7}
   838ea:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   838ec:	4b09      	ldr	r3, [pc, #36]	; (83914 <pmc_osc_is_ready_32kxtal+0x2c>)
   838ee:	695b      	ldr	r3, [r3, #20]
   838f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   838f4:	2b00      	cmp	r3, #0
   838f6:	d007      	beq.n	83908 <pmc_osc_is_ready_32kxtal+0x20>
   838f8:	4b07      	ldr	r3, [pc, #28]	; (83918 <pmc_osc_is_ready_32kxtal+0x30>)
   838fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83900:	2b00      	cmp	r3, #0
   83902:	d001      	beq.n	83908 <pmc_osc_is_ready_32kxtal+0x20>
   83904:	2301      	movs	r3, #1
   83906:	e000      	b.n	8390a <pmc_osc_is_ready_32kxtal+0x22>
   83908:	2300      	movs	r3, #0
}
   8390a:	4618      	mov	r0, r3
   8390c:	46bd      	mov	sp, r7
   8390e:	bc80      	pop	{r7}
   83910:	4770      	bx	lr
   83912:	bf00      	nop
   83914:	400e1a10 	.word	0x400e1a10
   83918:	400e0600 	.word	0x400e0600

0008391c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   8391c:	b480      	push	{r7}
   8391e:	b083      	sub	sp, #12
   83920:	af00      	add	r7, sp, #0
   83922:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   83924:	4a18      	ldr	r2, [pc, #96]	; (83988 <pmc_switch_mainck_to_fastrc+0x6c>)
   83926:	4b18      	ldr	r3, [pc, #96]	; (83988 <pmc_switch_mainck_to_fastrc+0x6c>)
   83928:	6a1b      	ldr	r3, [r3, #32]
   8392a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8392e:	f043 0308 	orr.w	r3, r3, #8
   83932:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83934:	bf00      	nop
   83936:	4b14      	ldr	r3, [pc, #80]	; (83988 <pmc_switch_mainck_to_fastrc+0x6c>)
   83938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8393e:	2b00      	cmp	r3, #0
   83940:	d0f9      	beq.n	83936 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83942:	4911      	ldr	r1, [pc, #68]	; (83988 <pmc_switch_mainck_to_fastrc+0x6c>)
   83944:	4b10      	ldr	r3, [pc, #64]	; (83988 <pmc_switch_mainck_to_fastrc+0x6c>)
   83946:	6a1b      	ldr	r3, [r3, #32]
   83948:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8394c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   83950:	687a      	ldr	r2, [r7, #4]
   83952:	4313      	orrs	r3, r2
   83954:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83958:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8395a:	bf00      	nop
   8395c:	4b0a      	ldr	r3, [pc, #40]	; (83988 <pmc_switch_mainck_to_fastrc+0x6c>)
   8395e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83964:	2b00      	cmp	r3, #0
   83966:	d0f9      	beq.n	8395c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   83968:	4a07      	ldr	r2, [pc, #28]	; (83988 <pmc_switch_mainck_to_fastrc+0x6c>)
   8396a:	4b07      	ldr	r3, [pc, #28]	; (83988 <pmc_switch_mainck_to_fastrc+0x6c>)
   8396c:	6a1b      	ldr	r3, [r3, #32]
   8396e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   83972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83976:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8397a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   8397c:	bf00      	nop
   8397e:	370c      	adds	r7, #12
   83980:	46bd      	mov	sp, r7
   83982:	bc80      	pop	{r7}
   83984:	4770      	bx	lr
   83986:	bf00      	nop
   83988:	400e0600 	.word	0x400e0600

0008398c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   8398c:	b480      	push	{r7}
   8398e:	b083      	sub	sp, #12
   83990:	af00      	add	r7, sp, #0
   83992:	6078      	str	r0, [r7, #4]
   83994:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83996:	687b      	ldr	r3, [r7, #4]
   83998:	2b00      	cmp	r3, #0
   8399a:	d008      	beq.n	839ae <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8399c:	4916      	ldr	r1, [pc, #88]	; (839f8 <pmc_switch_mainck_to_xtal+0x6c>)
   8399e:	4b16      	ldr	r3, [pc, #88]	; (839f8 <pmc_switch_mainck_to_xtal+0x6c>)
   839a0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   839a2:	4a16      	ldr	r2, [pc, #88]	; (839fc <pmc_switch_mainck_to_xtal+0x70>)
   839a4:	401a      	ands	r2, r3
   839a6:	4b16      	ldr	r3, [pc, #88]	; (83a00 <pmc_switch_mainck_to_xtal+0x74>)
   839a8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   839aa:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   839ac:	e01e      	b.n	839ec <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   839ae:	4912      	ldr	r1, [pc, #72]	; (839f8 <pmc_switch_mainck_to_xtal+0x6c>)
   839b0:	4b11      	ldr	r3, [pc, #68]	; (839f8 <pmc_switch_mainck_to_xtal+0x6c>)
   839b2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   839b4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   839b8:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   839bc:	683a      	ldr	r2, [r7, #0]
   839be:	0212      	lsls	r2, r2, #8
   839c0:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   839c2:	4313      	orrs	r3, r2
   839c4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   839c8:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   839cc:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   839ce:	bf00      	nop
   839d0:	4b09      	ldr	r3, [pc, #36]	; (839f8 <pmc_switch_mainck_to_xtal+0x6c>)
   839d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   839d4:	f003 0301 	and.w	r3, r3, #1
   839d8:	2b00      	cmp	r3, #0
   839da:	d0f9      	beq.n	839d0 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   839dc:	4a06      	ldr	r2, [pc, #24]	; (839f8 <pmc_switch_mainck_to_xtal+0x6c>)
   839de:	4b06      	ldr	r3, [pc, #24]	; (839f8 <pmc_switch_mainck_to_xtal+0x6c>)
   839e0:	6a1b      	ldr	r3, [r3, #32]
   839e2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   839e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   839ea:	6213      	str	r3, [r2, #32]
}
   839ec:	bf00      	nop
   839ee:	370c      	adds	r7, #12
   839f0:	46bd      	mov	sp, r7
   839f2:	bc80      	pop	{r7}
   839f4:	4770      	bx	lr
   839f6:	bf00      	nop
   839f8:	400e0600 	.word	0x400e0600
   839fc:	fec8fffc 	.word	0xfec8fffc
   83a00:	01370002 	.word	0x01370002

00083a04 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83a04:	b480      	push	{r7}
   83a06:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83a08:	4b03      	ldr	r3, [pc, #12]	; (83a18 <pmc_osc_is_ready_mainck+0x14>)
   83a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83a10:	4618      	mov	r0, r3
   83a12:	46bd      	mov	sp, r7
   83a14:	bc80      	pop	{r7}
   83a16:	4770      	bx	lr
   83a18:	400e0600 	.word	0x400e0600

00083a1c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83a1c:	b480      	push	{r7}
   83a1e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83a20:	4b03      	ldr	r3, [pc, #12]	; (83a30 <pmc_disable_pllack+0x14>)
   83a22:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83a26:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83a28:	bf00      	nop
   83a2a:	46bd      	mov	sp, r7
   83a2c:	bc80      	pop	{r7}
   83a2e:	4770      	bx	lr
   83a30:	400e0600 	.word	0x400e0600

00083a34 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83a34:	b480      	push	{r7}
   83a36:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83a38:	4b03      	ldr	r3, [pc, #12]	; (83a48 <pmc_is_locked_pllack+0x14>)
   83a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83a3c:	f003 0302 	and.w	r3, r3, #2
}
   83a40:	4618      	mov	r0, r3
   83a42:	46bd      	mov	sp, r7
   83a44:	bc80      	pop	{r7}
   83a46:	4770      	bx	lr
   83a48:	400e0600 	.word	0x400e0600

00083a4c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83a4c:	b480      	push	{r7}
   83a4e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83a50:	4b03      	ldr	r3, [pc, #12]	; (83a60 <pmc_is_locked_upll+0x14>)
   83a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83a58:	4618      	mov	r0, r3
   83a5a:	46bd      	mov	sp, r7
   83a5c:	bc80      	pop	{r7}
   83a5e:	4770      	bx	lr
   83a60:	400e0600 	.word	0x400e0600

00083a64 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83a64:	b480      	push	{r7}
   83a66:	b083      	sub	sp, #12
   83a68:	af00      	add	r7, sp, #0
   83a6a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83a6c:	687b      	ldr	r3, [r7, #4]
   83a6e:	2b2c      	cmp	r3, #44	; 0x2c
   83a70:	d901      	bls.n	83a76 <pmc_enable_periph_clk+0x12>
		return 1;
   83a72:	2301      	movs	r3, #1
   83a74:	e02f      	b.n	83ad6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   83a76:	687b      	ldr	r3, [r7, #4]
   83a78:	2b1f      	cmp	r3, #31
   83a7a:	d813      	bhi.n	83aa4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83a7c:	4b18      	ldr	r3, [pc, #96]	; (83ae0 <pmc_enable_periph_clk+0x7c>)
   83a7e:	699a      	ldr	r2, [r3, #24]
   83a80:	2101      	movs	r1, #1
   83a82:	687b      	ldr	r3, [r7, #4]
   83a84:	fa01 f303 	lsl.w	r3, r1, r3
   83a88:	401a      	ands	r2, r3
   83a8a:	2101      	movs	r1, #1
   83a8c:	687b      	ldr	r3, [r7, #4]
   83a8e:	fa01 f303 	lsl.w	r3, r1, r3
   83a92:	429a      	cmp	r2, r3
   83a94:	d01e      	beq.n	83ad4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   83a96:	4a12      	ldr	r2, [pc, #72]	; (83ae0 <pmc_enable_periph_clk+0x7c>)
   83a98:	2101      	movs	r1, #1
   83a9a:	687b      	ldr	r3, [r7, #4]
   83a9c:	fa01 f303 	lsl.w	r3, r1, r3
   83aa0:	6113      	str	r3, [r2, #16]
   83aa2:	e017      	b.n	83ad4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   83aa4:	687b      	ldr	r3, [r7, #4]
   83aa6:	3b20      	subs	r3, #32
   83aa8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83aaa:	4b0d      	ldr	r3, [pc, #52]	; (83ae0 <pmc_enable_periph_clk+0x7c>)
   83aac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83ab0:	2101      	movs	r1, #1
   83ab2:	687b      	ldr	r3, [r7, #4]
   83ab4:	fa01 f303 	lsl.w	r3, r1, r3
   83ab8:	401a      	ands	r2, r3
   83aba:	2101      	movs	r1, #1
   83abc:	687b      	ldr	r3, [r7, #4]
   83abe:	fa01 f303 	lsl.w	r3, r1, r3
   83ac2:	429a      	cmp	r2, r3
   83ac4:	d006      	beq.n	83ad4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   83ac6:	4a06      	ldr	r2, [pc, #24]	; (83ae0 <pmc_enable_periph_clk+0x7c>)
   83ac8:	2101      	movs	r1, #1
   83aca:	687b      	ldr	r3, [r7, #4]
   83acc:	fa01 f303 	lsl.w	r3, r1, r3
   83ad0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   83ad4:	2300      	movs	r3, #0
}
   83ad6:	4618      	mov	r0, r3
   83ad8:	370c      	adds	r7, #12
   83ada:	46bd      	mov	sp, r7
   83adc:	bc80      	pop	{r7}
   83ade:	4770      	bx	lr
   83ae0:	400e0600 	.word	0x400e0600

00083ae4 <osc_get_rate>:
{
   83ae4:	b480      	push	{r7}
   83ae6:	b083      	sub	sp, #12
   83ae8:	af00      	add	r7, sp, #0
   83aea:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83aec:	687b      	ldr	r3, [r7, #4]
   83aee:	2b07      	cmp	r3, #7
   83af0:	d825      	bhi.n	83b3e <osc_get_rate+0x5a>
   83af2:	a201      	add	r2, pc, #4	; (adr r2, 83af8 <osc_get_rate+0x14>)
   83af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83af8:	00083b19 	.word	0x00083b19
   83afc:	00083b1f 	.word	0x00083b1f
   83b00:	00083b25 	.word	0x00083b25
   83b04:	00083b2b 	.word	0x00083b2b
   83b08:	00083b2f 	.word	0x00083b2f
   83b0c:	00083b33 	.word	0x00083b33
   83b10:	00083b37 	.word	0x00083b37
   83b14:	00083b3b 	.word	0x00083b3b
		return OSC_SLCK_32K_RC_HZ;
   83b18:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83b1c:	e010      	b.n	83b40 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   83b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83b22:	e00d      	b.n	83b40 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   83b24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83b28:	e00a      	b.n	83b40 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   83b2a:	4b08      	ldr	r3, [pc, #32]	; (83b4c <osc_get_rate+0x68>)
   83b2c:	e008      	b.n	83b40 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   83b2e:	4b08      	ldr	r3, [pc, #32]	; (83b50 <osc_get_rate+0x6c>)
   83b30:	e006      	b.n	83b40 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   83b32:	4b08      	ldr	r3, [pc, #32]	; (83b54 <osc_get_rate+0x70>)
   83b34:	e004      	b.n	83b40 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   83b36:	4b07      	ldr	r3, [pc, #28]	; (83b54 <osc_get_rate+0x70>)
   83b38:	e002      	b.n	83b40 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   83b3a:	4b06      	ldr	r3, [pc, #24]	; (83b54 <osc_get_rate+0x70>)
   83b3c:	e000      	b.n	83b40 <osc_get_rate+0x5c>
	return 0;
   83b3e:	2300      	movs	r3, #0
}
   83b40:	4618      	mov	r0, r3
   83b42:	370c      	adds	r7, #12
   83b44:	46bd      	mov	sp, r7
   83b46:	bc80      	pop	{r7}
   83b48:	4770      	bx	lr
   83b4a:	bf00      	nop
   83b4c:	003d0900 	.word	0x003d0900
   83b50:	007a1200 	.word	0x007a1200
   83b54:	00b71b00 	.word	0x00b71b00

00083b58 <sysclk_get_main_hz>:
{
   83b58:	b580      	push	{r7, lr}
   83b5a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83b5c:	2006      	movs	r0, #6
   83b5e:	4b04      	ldr	r3, [pc, #16]	; (83b70 <sysclk_get_main_hz+0x18>)
   83b60:	4798      	blx	r3
   83b62:	4602      	mov	r2, r0
   83b64:	4613      	mov	r3, r2
   83b66:	00db      	lsls	r3, r3, #3
   83b68:	1a9b      	subs	r3, r3, r2
   83b6a:	005b      	lsls	r3, r3, #1
}
   83b6c:	4618      	mov	r0, r3
   83b6e:	bd80      	pop	{r7, pc}
   83b70:	00083ae5 	.word	0x00083ae5

00083b74 <sysclk_get_cpu_hz>:
{
   83b74:	b580      	push	{r7, lr}
   83b76:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83b78:	4b02      	ldr	r3, [pc, #8]	; (83b84 <sysclk_get_cpu_hz+0x10>)
   83b7a:	4798      	blx	r3
   83b7c:	4603      	mov	r3, r0
   83b7e:	085b      	lsrs	r3, r3, #1
}
   83b80:	4618      	mov	r0, r3
   83b82:	bd80      	pop	{r7, pc}
   83b84:	00083b59 	.word	0x00083b59

00083b88 <sysclk_enable_peripheral_clock>:
{
   83b88:	b580      	push	{r7, lr}
   83b8a:	b082      	sub	sp, #8
   83b8c:	af00      	add	r7, sp, #0
   83b8e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   83b90:	6878      	ldr	r0, [r7, #4]
   83b92:	4b03      	ldr	r3, [pc, #12]	; (83ba0 <sysclk_enable_peripheral_clock+0x18>)
   83b94:	4798      	blx	r3
}
   83b96:	bf00      	nop
   83b98:	3708      	adds	r7, #8
   83b9a:	46bd      	mov	sp, r7
   83b9c:	bd80      	pop	{r7, pc}
   83b9e:	bf00      	nop
   83ba0:	00083a65 	.word	0x00083a65

00083ba4 <ioport_init>:
{
   83ba4:	b580      	push	{r7, lr}
   83ba6:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   83ba8:	200b      	movs	r0, #11
   83baa:	4b06      	ldr	r3, [pc, #24]	; (83bc4 <ioport_init+0x20>)
   83bac:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   83bae:	200c      	movs	r0, #12
   83bb0:	4b04      	ldr	r3, [pc, #16]	; (83bc4 <ioport_init+0x20>)
   83bb2:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   83bb4:	200d      	movs	r0, #13
   83bb6:	4b03      	ldr	r3, [pc, #12]	; (83bc4 <ioport_init+0x20>)
   83bb8:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   83bba:	200e      	movs	r0, #14
   83bbc:	4b01      	ldr	r3, [pc, #4]	; (83bc4 <ioport_init+0x20>)
   83bbe:	4798      	blx	r3
}
   83bc0:	bf00      	nop
   83bc2:	bd80      	pop	{r7, pc}
   83bc4:	00083b89 	.word	0x00083b89

00083bc8 <ioport_disable_pin>:
{
   83bc8:	b480      	push	{r7}
   83bca:	b089      	sub	sp, #36	; 0x24
   83bcc:	af00      	add	r7, sp, #0
   83bce:	6078      	str	r0, [r7, #4]
   83bd0:	687b      	ldr	r3, [r7, #4]
   83bd2:	61fb      	str	r3, [r7, #28]
   83bd4:	69fb      	ldr	r3, [r7, #28]
   83bd6:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83bd8:	69bb      	ldr	r3, [r7, #24]
   83bda:	095a      	lsrs	r2, r3, #5
   83bdc:	69fb      	ldr	r3, [r7, #28]
   83bde:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   83be0:	697b      	ldr	r3, [r7, #20]
   83be2:	f003 031f 	and.w	r3, r3, #31
   83be6:	2101      	movs	r1, #1
   83be8:	fa01 f303 	lsl.w	r3, r1, r3
   83bec:	613a      	str	r2, [r7, #16]
   83bee:	60fb      	str	r3, [r7, #12]
   83bf0:	693b      	ldr	r3, [r7, #16]
   83bf2:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83bf4:	68bb      	ldr	r3, [r7, #8]
   83bf6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83bfa:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83bfe:	025b      	lsls	r3, r3, #9
   83c00:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   83c02:	68fb      	ldr	r3, [r7, #12]
   83c04:	6053      	str	r3, [r2, #4]
}
   83c06:	bf00      	nop
   83c08:	3724      	adds	r7, #36	; 0x24
   83c0a:	46bd      	mov	sp, r7
   83c0c:	bc80      	pop	{r7}
   83c0e:	4770      	bx	lr

00083c10 <ioport_set_pin_mode>:
{
   83c10:	b480      	push	{r7}
   83c12:	b08d      	sub	sp, #52	; 0x34
   83c14:	af00      	add	r7, sp, #0
   83c16:	6078      	str	r0, [r7, #4]
   83c18:	6039      	str	r1, [r7, #0]
   83c1a:	687b      	ldr	r3, [r7, #4]
   83c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   83c1e:	683b      	ldr	r3, [r7, #0]
   83c20:	62bb      	str	r3, [r7, #40]	; 0x28
   83c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83c24:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   83c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83c28:	095a      	lsrs	r2, r3, #5
   83c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83c2c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   83c2e:	6a3b      	ldr	r3, [r7, #32]
   83c30:	f003 031f 	and.w	r3, r3, #31
   83c34:	2101      	movs	r1, #1
   83c36:	fa01 f303 	lsl.w	r3, r1, r3
   83c3a:	61fa      	str	r2, [r7, #28]
   83c3c:	61bb      	str	r3, [r7, #24]
   83c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   83c40:	617b      	str	r3, [r7, #20]
   83c42:	69fb      	ldr	r3, [r7, #28]
   83c44:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83c46:	693b      	ldr	r3, [r7, #16]
   83c48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83c4c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83c50:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   83c52:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   83c54:	697b      	ldr	r3, [r7, #20]
   83c56:	f003 0308 	and.w	r3, r3, #8
   83c5a:	2b00      	cmp	r3, #0
   83c5c:	d003      	beq.n	83c66 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   83c5e:	68fb      	ldr	r3, [r7, #12]
   83c60:	69ba      	ldr	r2, [r7, #24]
   83c62:	665a      	str	r2, [r3, #100]	; 0x64
   83c64:	e002      	b.n	83c6c <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   83c66:	68fb      	ldr	r3, [r7, #12]
   83c68:	69ba      	ldr	r2, [r7, #24]
   83c6a:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   83c6c:	697b      	ldr	r3, [r7, #20]
   83c6e:	f003 0320 	and.w	r3, r3, #32
   83c72:	2b00      	cmp	r3, #0
   83c74:	d003      	beq.n	83c7e <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   83c76:	68fb      	ldr	r3, [r7, #12]
   83c78:	69ba      	ldr	r2, [r7, #24]
   83c7a:	651a      	str	r2, [r3, #80]	; 0x50
   83c7c:	e002      	b.n	83c84 <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   83c7e:	68fb      	ldr	r3, [r7, #12]
   83c80:	69ba      	ldr	r2, [r7, #24]
   83c82:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   83c84:	697b      	ldr	r3, [r7, #20]
   83c86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   83c8a:	2b00      	cmp	r3, #0
   83c8c:	d003      	beq.n	83c96 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   83c8e:	68fb      	ldr	r3, [r7, #12]
   83c90:	69ba      	ldr	r2, [r7, #24]
   83c92:	621a      	str	r2, [r3, #32]
   83c94:	e002      	b.n	83c9c <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   83c96:	68fb      	ldr	r3, [r7, #12]
   83c98:	69ba      	ldr	r2, [r7, #24]
   83c9a:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   83c9c:	697b      	ldr	r3, [r7, #20]
   83c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83ca2:	2b00      	cmp	r3, #0
   83ca4:	d004      	beq.n	83cb0 <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   83ca6:	68fb      	ldr	r3, [r7, #12]
   83ca8:	69ba      	ldr	r2, [r7, #24]
   83caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   83cae:	e003      	b.n	83cb8 <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   83cb0:	68fb      	ldr	r3, [r7, #12]
   83cb2:	69ba      	ldr	r2, [r7, #24]
   83cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   83cb8:	697b      	ldr	r3, [r7, #20]
   83cba:	f003 0301 	and.w	r3, r3, #1
   83cbe:	2b00      	cmp	r3, #0
   83cc0:	d006      	beq.n	83cd0 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   83cc2:	68fb      	ldr	r3, [r7, #12]
   83cc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83cc6:	69bb      	ldr	r3, [r7, #24]
   83cc8:	431a      	orrs	r2, r3
   83cca:	68fb      	ldr	r3, [r7, #12]
   83ccc:	671a      	str	r2, [r3, #112]	; 0x70
}
   83cce:	e006      	b.n	83cde <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   83cd0:	68fb      	ldr	r3, [r7, #12]
   83cd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83cd4:	69bb      	ldr	r3, [r7, #24]
   83cd6:	43db      	mvns	r3, r3
   83cd8:	401a      	ands	r2, r3
   83cda:	68fb      	ldr	r3, [r7, #12]
   83cdc:	671a      	str	r2, [r3, #112]	; 0x70
   83cde:	bf00      	nop
   83ce0:	3734      	adds	r7, #52	; 0x34
   83ce2:	46bd      	mov	sp, r7
   83ce4:	bc80      	pop	{r7}
   83ce6:	4770      	bx	lr

00083ce8 <ioport_set_pin_dir>:
{
   83ce8:	b480      	push	{r7}
   83cea:	b08d      	sub	sp, #52	; 0x34
   83cec:	af00      	add	r7, sp, #0
   83cee:	6078      	str	r0, [r7, #4]
   83cf0:	460b      	mov	r3, r1
   83cf2:	70fb      	strb	r3, [r7, #3]
   83cf4:	687b      	ldr	r3, [r7, #4]
   83cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   83cf8:	78fb      	ldrb	r3, [r7, #3]
   83cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   83cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83d00:	627b      	str	r3, [r7, #36]	; 0x24
   83d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83d04:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   83d06:	6a3b      	ldr	r3, [r7, #32]
   83d08:	095b      	lsrs	r3, r3, #5
   83d0a:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83d0c:	69fb      	ldr	r3, [r7, #28]
   83d0e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83d12:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83d16:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83d18:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   83d1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83d1e:	2b01      	cmp	r3, #1
   83d20:	d109      	bne.n	83d36 <ioport_set_pin_dir+0x4e>
   83d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83d24:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   83d26:	697b      	ldr	r3, [r7, #20]
   83d28:	f003 031f 	and.w	r3, r3, #31
   83d2c:	2201      	movs	r2, #1
   83d2e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83d30:	69bb      	ldr	r3, [r7, #24]
   83d32:	611a      	str	r2, [r3, #16]
   83d34:	e00c      	b.n	83d50 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   83d36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83d3a:	2b00      	cmp	r3, #0
   83d3c:	d108      	bne.n	83d50 <ioport_set_pin_dir+0x68>
   83d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83d40:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   83d42:	693b      	ldr	r3, [r7, #16]
   83d44:	f003 031f 	and.w	r3, r3, #31
   83d48:	2201      	movs	r2, #1
   83d4a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   83d4c:	69bb      	ldr	r3, [r7, #24]
   83d4e:	615a      	str	r2, [r3, #20]
   83d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83d52:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83d54:	68fb      	ldr	r3, [r7, #12]
   83d56:	f003 031f 	and.w	r3, r3, #31
   83d5a:	2201      	movs	r2, #1
   83d5c:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83d5e:	69bb      	ldr	r3, [r7, #24]
   83d60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   83d64:	bf00      	nop
   83d66:	3734      	adds	r7, #52	; 0x34
   83d68:	46bd      	mov	sp, r7
   83d6a:	bc80      	pop	{r7}
   83d6c:	4770      	bx	lr

00083d6e <ioport_set_pin_level>:
{
   83d6e:	b480      	push	{r7}
   83d70:	b08b      	sub	sp, #44	; 0x2c
   83d72:	af00      	add	r7, sp, #0
   83d74:	6078      	str	r0, [r7, #4]
   83d76:	460b      	mov	r3, r1
   83d78:	70fb      	strb	r3, [r7, #3]
   83d7a:	687b      	ldr	r3, [r7, #4]
   83d7c:	627b      	str	r3, [r7, #36]	; 0x24
   83d7e:	78fb      	ldrb	r3, [r7, #3]
   83d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   83d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83d86:	61fb      	str	r3, [r7, #28]
   83d88:	69fb      	ldr	r3, [r7, #28]
   83d8a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83d8c:	69bb      	ldr	r3, [r7, #24]
   83d8e:	095b      	lsrs	r3, r3, #5
   83d90:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83d92:	697b      	ldr	r3, [r7, #20]
   83d94:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83d98:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83d9c:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83d9e:	613b      	str	r3, [r7, #16]
	if (level) {
   83da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83da4:	2b00      	cmp	r3, #0
   83da6:	d009      	beq.n	83dbc <ioport_set_pin_level+0x4e>
   83da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83daa:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83dac:	68fb      	ldr	r3, [r7, #12]
   83dae:	f003 031f 	and.w	r3, r3, #31
   83db2:	2201      	movs	r2, #1
   83db4:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   83db6:	693b      	ldr	r3, [r7, #16]
   83db8:	631a      	str	r2, [r3, #48]	; 0x30
}
   83dba:	e008      	b.n	83dce <ioport_set_pin_level+0x60>
   83dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83dbe:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   83dc0:	68bb      	ldr	r3, [r7, #8]
   83dc2:	f003 031f 	and.w	r3, r3, #31
   83dc6:	2201      	movs	r2, #1
   83dc8:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83dca:	693b      	ldr	r3, [r7, #16]
   83dcc:	635a      	str	r2, [r3, #52]	; 0x34
   83dce:	bf00      	nop
   83dd0:	372c      	adds	r7, #44	; 0x2c
   83dd2:	46bd      	mov	sp, r7
   83dd4:	bc80      	pop	{r7}
   83dd6:	4770      	bx	lr

00083dd8 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   83dd8:	b580      	push	{r7, lr}
   83dda:	b084      	sub	sp, #16
   83ddc:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83dde:	4ba6      	ldr	r3, [pc, #664]	; (84078 <board_init+0x2a0>)
   83de0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83de4:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   83de6:	4ba5      	ldr	r3, [pc, #660]	; (8407c <board_init+0x2a4>)
   83de8:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   83dea:	2101      	movs	r1, #1
   83dec:	206a      	movs	r0, #106	; 0x6a
   83dee:	4ba4      	ldr	r3, [pc, #656]	; (84080 <board_init+0x2a8>)
   83df0:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   83df2:	2100      	movs	r1, #0
   83df4:	206a      	movs	r0, #106	; 0x6a
   83df6:	4ba3      	ldr	r3, [pc, #652]	; (84084 <board_init+0x2ac>)
   83df8:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   83dfa:	2101      	movs	r1, #1
   83dfc:	2067      	movs	r0, #103	; 0x67
   83dfe:	4ba0      	ldr	r3, [pc, #640]	; (84080 <board_init+0x2a8>)
   83e00:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   83e02:	2100      	movs	r1, #0
   83e04:	2067      	movs	r0, #103	; 0x67
   83e06:	4b9f      	ldr	r3, [pc, #636]	; (84084 <board_init+0x2ac>)
   83e08:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   83e0a:	2101      	movs	r1, #1
   83e0c:	2068      	movs	r0, #104	; 0x68
   83e0e:	4b9c      	ldr	r3, [pc, #624]	; (84080 <board_init+0x2a8>)
   83e10:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   83e12:	2100      	movs	r1, #0
   83e14:	2068      	movs	r0, #104	; 0x68
   83e16:	4b9b      	ldr	r3, [pc, #620]	; (84084 <board_init+0x2ac>)
   83e18:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   83e1a:	2101      	movs	r1, #1
   83e1c:	2069      	movs	r0, #105	; 0x69
   83e1e:	4b98      	ldr	r3, [pc, #608]	; (84080 <board_init+0x2a8>)
   83e20:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   83e22:	2100      	movs	r1, #0
   83e24:	2069      	movs	r0, #105	; 0x69
   83e26:	4b97      	ldr	r3, [pc, #604]	; (84084 <board_init+0x2ac>)
   83e28:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   83e2a:	2101      	movs	r1, #1
   83e2c:	2066      	movs	r0, #102	; 0x66
   83e2e:	4b94      	ldr	r3, [pc, #592]	; (84080 <board_init+0x2a8>)
   83e30:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   83e32:	2100      	movs	r1, #0
   83e34:	2066      	movs	r0, #102	; 0x66
   83e36:	4b93      	ldr	r3, [pc, #588]	; (84084 <board_init+0x2ac>)
   83e38:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   83e3a:	2100      	movs	r1, #0
   83e3c:	2060      	movs	r0, #96	; 0x60
   83e3e:	4b90      	ldr	r3, [pc, #576]	; (84080 <board_init+0x2a8>)
   83e40:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83e42:	2188      	movs	r1, #136	; 0x88
   83e44:	2060      	movs	r0, #96	; 0x60
   83e46:	4b90      	ldr	r3, [pc, #576]	; (84088 <board_init+0x2b0>)
   83e48:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   83e4a:	2100      	movs	r1, #0
   83e4c:	2061      	movs	r0, #97	; 0x61
   83e4e:	4b8c      	ldr	r3, [pc, #560]	; (84080 <board_init+0x2a8>)
   83e50:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83e52:	2188      	movs	r1, #136	; 0x88
   83e54:	2061      	movs	r0, #97	; 0x61
   83e56:	4b8c      	ldr	r3, [pc, #560]	; (84088 <board_init+0x2b0>)
   83e58:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   83e5a:	2100      	movs	r1, #0
   83e5c:	2062      	movs	r0, #98	; 0x62
   83e5e:	4b88      	ldr	r3, [pc, #544]	; (84080 <board_init+0x2a8>)
   83e60:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83e62:	2188      	movs	r1, #136	; 0x88
   83e64:	2062      	movs	r0, #98	; 0x62
   83e66:	4b88      	ldr	r3, [pc, #544]	; (84088 <board_init+0x2b0>)
   83e68:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   83e6a:	2100      	movs	r1, #0
   83e6c:	2063      	movs	r0, #99	; 0x63
   83e6e:	4b84      	ldr	r3, [pc, #528]	; (84080 <board_init+0x2a8>)
   83e70:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83e72:	2188      	movs	r1, #136	; 0x88
   83e74:	2063      	movs	r0, #99	; 0x63
   83e76:	4b84      	ldr	r3, [pc, #528]	; (84088 <board_init+0x2b0>)
   83e78:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   83e7a:	2100      	movs	r1, #0
   83e7c:	2064      	movs	r0, #100	; 0x64
   83e7e:	4b80      	ldr	r3, [pc, #512]	; (84080 <board_init+0x2a8>)
   83e80:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83e82:	2188      	movs	r1, #136	; 0x88
   83e84:	2064      	movs	r0, #100	; 0x64
   83e86:	4b80      	ldr	r3, [pc, #512]	; (84088 <board_init+0x2b0>)
   83e88:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   83e8a:	2100      	movs	r1, #0
   83e8c:	2065      	movs	r0, #101	; 0x65
   83e8e:	4b7c      	ldr	r3, [pc, #496]	; (84080 <board_init+0x2a8>)
   83e90:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83e92:	2188      	movs	r1, #136	; 0x88
   83e94:	2065      	movs	r0, #101	; 0x65
   83e96:	4b7c      	ldr	r3, [pc, #496]	; (84088 <board_init+0x2b0>)
   83e98:	4798      	blx	r3
  
    /* Configure Motor pins */
    ioport_set_pin_mode(MOTOR_LEFT_L, IOPORT_MODE_MUX_B);
   83e9a:	2101      	movs	r1, #1
   83e9c:	2042      	movs	r0, #66	; 0x42
   83e9e:	4b7a      	ldr	r3, [pc, #488]	; (84088 <board_init+0x2b0>)
   83ea0:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_L);
   83ea2:	2042      	movs	r0, #66	; 0x42
   83ea4:	4b79      	ldr	r3, [pc, #484]	; (8408c <board_init+0x2b4>)
   83ea6:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_LEFT_H, IOPORT_MODE_MUX_B);
   83ea8:	2101      	movs	r1, #1
   83eaa:	2043      	movs	r0, #67	; 0x43
   83eac:	4b76      	ldr	r3, [pc, #472]	; (84088 <board_init+0x2b0>)
   83eae:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_H);
   83eb0:	2043      	movs	r0, #67	; 0x43
   83eb2:	4b76      	ldr	r3, [pc, #472]	; (8408c <board_init+0x2b4>)
   83eb4:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_L, IOPORT_MODE_MUX_B);
   83eb6:	2101      	movs	r1, #1
   83eb8:	2044      	movs	r0, #68	; 0x44
   83eba:	4b73      	ldr	r3, [pc, #460]	; (84088 <board_init+0x2b0>)
   83ebc:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_L);
   83ebe:	2044      	movs	r0, #68	; 0x44
   83ec0:	4b72      	ldr	r3, [pc, #456]	; (8408c <board_init+0x2b4>)
   83ec2:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_H, IOPORT_MODE_MUX_B);
   83ec4:	2101      	movs	r1, #1
   83ec6:	2045      	movs	r0, #69	; 0x45
   83ec8:	4b6f      	ldr	r3, [pc, #444]	; (84088 <board_init+0x2b0>)
   83eca:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_H);
   83ecc:	2045      	movs	r0, #69	; 0x45
   83ece:	4b6f      	ldr	r3, [pc, #444]	; (8408c <board_init+0x2b4>)
   83ed0:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_L, IOPORT_MODE_MUX_B);
   83ed2:	2101      	movs	r1, #1
   83ed4:	2046      	movs	r0, #70	; 0x46
   83ed6:	4b6c      	ldr	r3, [pc, #432]	; (84088 <board_init+0x2b0>)
   83ed8:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_L);
   83eda:	2046      	movs	r0, #70	; 0x46
   83edc:	4b6b      	ldr	r3, [pc, #428]	; (8408c <board_init+0x2b4>)
   83ede:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_H, IOPORT_MODE_MUX_B);
   83ee0:	2101      	movs	r1, #1
   83ee2:	2047      	movs	r0, #71	; 0x47
   83ee4:	4b68      	ldr	r3, [pc, #416]	; (84088 <board_init+0x2b0>)
   83ee6:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_H);
   83ee8:	2047      	movs	r0, #71	; 0x47
   83eea:	4b68      	ldr	r3, [pc, #416]	; (8408c <board_init+0x2b4>)
   83eec:	4798      	blx	r3

    /* Configure Encoder pins */
    ioport_set_pin_mode(ENC_CLK_PIN, IOPORT_MODE_MUX_B);
   83eee:	2101      	movs	r1, #1
   83ef0:	2055      	movs	r0, #85	; 0x55
   83ef2:	4b65      	ldr	r3, [pc, #404]	; (84088 <board_init+0x2b0>)
   83ef4:	4798      	blx	r3
    ioport_disable_pin(ENC_CLK_PIN);
   83ef6:	2055      	movs	r0, #85	; 0x55
   83ef8:	4b64      	ldr	r3, [pc, #400]	; (8408c <board_init+0x2b4>)
   83efa:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LOAD, IOPORT_DIR_OUTPUT);
   83efc:	2101      	movs	r1, #1
   83efe:	2020      	movs	r0, #32
   83f00:	4b5f      	ldr	r3, [pc, #380]	; (84080 <board_init+0x2a8>)
   83f02:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   83f04:	2101      	movs	r1, #1
   83f06:	2020      	movs	r0, #32
   83f08:	4b5e      	ldr	r3, [pc, #376]	; (84084 <board_init+0x2ac>)
   83f0a:	4798      	blx	r3

    ioport_set_pin_dir(ENC_LEFT_A, IOPORT_DIR_INPUT);
   83f0c:	2100      	movs	r1, #0
   83f0e:	2058      	movs	r0, #88	; 0x58
   83f10:	4b5b      	ldr	r3, [pc, #364]	; (84080 <board_init+0x2a8>)
   83f12:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_B, IOPORT_DIR_INPUT);
   83f14:	2100      	movs	r1, #0
   83f16:	2059      	movs	r0, #89	; 0x59
   83f18:	4b59      	ldr	r3, [pc, #356]	; (84080 <board_init+0x2a8>)
   83f1a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_C, IOPORT_DIR_INPUT);
   83f1c:	2100      	movs	r1, #0
   83f1e:	205a      	movs	r0, #90	; 0x5a
   83f20:	4b57      	ldr	r3, [pc, #348]	; (84080 <board_init+0x2a8>)
   83f22:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_D, IOPORT_DIR_INPUT);
   83f24:	2100      	movs	r1, #0
   83f26:	205b      	movs	r0, #91	; 0x5b
   83f28:	4b55      	ldr	r3, [pc, #340]	; (84080 <board_init+0x2a8>)
   83f2a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_E, IOPORT_DIR_INPUT);
   83f2c:	2100      	movs	r1, #0
   83f2e:	205c      	movs	r0, #92	; 0x5c
   83f30:	4b53      	ldr	r3, [pc, #332]	; (84080 <board_init+0x2a8>)
   83f32:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_F, IOPORT_DIR_INPUT);
   83f34:	2100      	movs	r1, #0
   83f36:	205d      	movs	r0, #93	; 0x5d
   83f38:	4b51      	ldr	r3, [pc, #324]	; (84080 <board_init+0x2a8>)
   83f3a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_G, IOPORT_DIR_INPUT);
   83f3c:	2100      	movs	r1, #0
   83f3e:	205e      	movs	r0, #94	; 0x5e
   83f40:	4b4f      	ldr	r3, [pc, #316]	; (84080 <board_init+0x2a8>)
   83f42:	4798      	blx	r3
    
    ioport_set_pin_dir(ENC_RIGHT_A, IOPORT_DIR_INPUT);
   83f44:	2100      	movs	r1, #0
   83f46:	2050      	movs	r0, #80	; 0x50
   83f48:	4b4d      	ldr	r3, [pc, #308]	; (84080 <board_init+0x2a8>)
   83f4a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_B, IOPORT_DIR_INPUT);
   83f4c:	2100      	movs	r1, #0
   83f4e:	2051      	movs	r0, #81	; 0x51
   83f50:	4b4b      	ldr	r3, [pc, #300]	; (84080 <board_init+0x2a8>)
   83f52:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_C, IOPORT_DIR_INPUT);
   83f54:	2100      	movs	r1, #0
   83f56:	2052      	movs	r0, #82	; 0x52
   83f58:	4b49      	ldr	r3, [pc, #292]	; (84080 <board_init+0x2a8>)
   83f5a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_D, IOPORT_DIR_INPUT);
   83f5c:	2100      	movs	r1, #0
   83f5e:	2053      	movs	r0, #83	; 0x53
   83f60:	4b47      	ldr	r3, [pc, #284]	; (84080 <board_init+0x2a8>)
   83f62:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_E, IOPORT_DIR_INPUT);
   83f64:	2100      	movs	r1, #0
   83f66:	2054      	movs	r0, #84	; 0x54
   83f68:	4b45      	ldr	r3, [pc, #276]	; (84080 <board_init+0x2a8>)
   83f6a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_F, IOPORT_DIR_INPUT);
   83f6c:	2100      	movs	r1, #0
   83f6e:	2056      	movs	r0, #86	; 0x56
   83f70:	4b43      	ldr	r3, [pc, #268]	; (84080 <board_init+0x2a8>)
   83f72:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_G, IOPORT_DIR_INPUT);
   83f74:	2100      	movs	r1, #0
   83f76:	2057      	movs	r0, #87	; 0x57
   83f78:	4b41      	ldr	r3, [pc, #260]	; (84080 <board_init+0x2a8>)
   83f7a:	4798      	blx	r3
    
    ioport_set_pin_dir(ENC_REAR_A, IOPORT_DIR_INPUT);
   83f7c:	2100      	movs	r1, #0
   83f7e:	2041      	movs	r0, #65	; 0x41
   83f80:	4b3f      	ldr	r3, [pc, #252]	; (84080 <board_init+0x2a8>)
   83f82:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_B, IOPORT_DIR_INPUT);
   83f84:	2100      	movs	r1, #0
   83f86:	204a      	movs	r0, #74	; 0x4a
   83f88:	4b3d      	ldr	r3, [pc, #244]	; (84080 <board_init+0x2a8>)
   83f8a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_C, IOPORT_DIR_INPUT);
   83f8c:	2100      	movs	r1, #0
   83f8e:	204b      	movs	r0, #75	; 0x4b
   83f90:	4b3b      	ldr	r3, [pc, #236]	; (84080 <board_init+0x2a8>)
   83f92:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_D, IOPORT_DIR_INPUT);
   83f94:	2100      	movs	r1, #0
   83f96:	204c      	movs	r0, #76	; 0x4c
   83f98:	4b39      	ldr	r3, [pc, #228]	; (84080 <board_init+0x2a8>)
   83f9a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_E, IOPORT_DIR_INPUT);
   83f9c:	2100      	movs	r1, #0
   83f9e:	204d      	movs	r0, #77	; 0x4d
   83fa0:	4b37      	ldr	r3, [pc, #220]	; (84080 <board_init+0x2a8>)
   83fa2:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_F, IOPORT_DIR_INPUT);
   83fa4:	2100      	movs	r1, #0
   83fa6:	204e      	movs	r0, #78	; 0x4e
   83fa8:	4b35      	ldr	r3, [pc, #212]	; (84080 <board_init+0x2a8>)
   83faa:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_G, IOPORT_DIR_INPUT);
   83fac:	2100      	movs	r1, #0
   83fae:	204f      	movs	r0, #79	; 0x4f
   83fb0:	4b33      	ldr	r3, [pc, #204]	; (84080 <board_init+0x2a8>)
   83fb2:	4798      	blx	r3
  
    /* Configure Raspberry Pi GPIO pins */
    ioport_set_pin_dir(RPI1, IOPORT_DIR_OUTPUT);
   83fb4:	2101      	movs	r1, #1
   83fb6:	2001      	movs	r0, #1
   83fb8:	4b31      	ldr	r3, [pc, #196]	; (84080 <board_init+0x2a8>)
   83fba:	4798      	blx	r3
    ioport_set_pin_level(RPI1, 1);
   83fbc:	2101      	movs	r1, #1
   83fbe:	2001      	movs	r0, #1
   83fc0:	4b30      	ldr	r3, [pc, #192]	; (84084 <board_init+0x2ac>)
   83fc2:	4798      	blx	r3
    ioport_set_pin_dir(RPI2, IOPORT_DIR_INPUT);
   83fc4:	2100      	movs	r1, #0
   83fc6:	2008      	movs	r0, #8
   83fc8:	4b2d      	ldr	r3, [pc, #180]	; (84080 <board_init+0x2a8>)
   83fca:	4798      	blx	r3
    ioport_set_pin_dir(RPI3, IOPORT_DIR_INPUT);
   83fcc:	2100      	movs	r1, #0
   83fce:	2009      	movs	r0, #9
   83fd0:	4b2b      	ldr	r3, [pc, #172]	; (84080 <board_init+0x2a8>)
   83fd2:	4798      	blx	r3
    ioport_set_pin_dir(RPI4, IOPORT_DIR_INPUT);
   83fd4:	2100      	movs	r1, #0
   83fd6:	2007      	movs	r0, #7
   83fd8:	4b29      	ldr	r3, [pc, #164]	; (84080 <board_init+0x2a8>)
   83fda:	4798      	blx	r3
    ioport_set_pin_dir(RPI5, IOPORT_DIR_INPUT);
   83fdc:	2100      	movs	r1, #0
   83fde:	2005      	movs	r0, #5
   83fe0:	4b27      	ldr	r3, [pc, #156]	; (84080 <board_init+0x2a8>)
   83fe2:	4798      	blx	r3
    ioport_set_pin_dir(RPI6, IOPORT_DIR_INPUT);
   83fe4:	2100      	movs	r1, #0
   83fe6:	2000      	movs	r0, #0
   83fe8:	4b25      	ldr	r3, [pc, #148]	; (84080 <board_init+0x2a8>)
   83fea:	4798      	blx	r3
  
    /* Configure I2C pins */
    ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   83fec:	2100      	movs	r1, #0
   83fee:	2011      	movs	r0, #17
   83ff0:	4b25      	ldr	r3, [pc, #148]	; (84088 <board_init+0x2b0>)
   83ff2:	4798      	blx	r3
    ioport_disable_pin(I2C0_DATA);
   83ff4:	2011      	movs	r0, #17
   83ff6:	4b25      	ldr	r3, [pc, #148]	; (8408c <board_init+0x2b4>)
   83ff8:	4798      	blx	r3
    ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   83ffa:	2100      	movs	r1, #0
   83ffc:	2012      	movs	r0, #18
   83ffe:	4b22      	ldr	r3, [pc, #136]	; (84088 <board_init+0x2b0>)
   84000:	4798      	blx	r3
    ioport_disable_pin(I2C0_CLK);
   84002:	2012      	movs	r0, #18
   84004:	4b21      	ldr	r3, [pc, #132]	; (8408c <board_init+0x2b4>)
   84006:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   84008:	2100      	movs	r1, #0
   8400a:	200c      	movs	r0, #12
   8400c:	4b1e      	ldr	r3, [pc, #120]	; (84088 <board_init+0x2b0>)
   8400e:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   84010:	200c      	movs	r0, #12
   84012:	4b1e      	ldr	r3, [pc, #120]	; (8408c <board_init+0x2b4>)
   84014:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   84016:	2100      	movs	r1, #0
   84018:	200d      	movs	r0, #13
   8401a:	4b1b      	ldr	r3, [pc, #108]	; (84088 <board_init+0x2b0>)
   8401c:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   8401e:	200d      	movs	r0, #13
   84020:	4b1a      	ldr	r3, [pc, #104]	; (8408c <board_init+0x2b4>)
   84022:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   84024:	2100      	movs	r1, #0
   84026:	2010      	movs	r0, #16
   84028:	4b17      	ldr	r3, [pc, #92]	; (84088 <board_init+0x2b0>)
   8402a:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   8402c:	2010      	movs	r0, #16
   8402e:	4b17      	ldr	r3, [pc, #92]	; (8408c <board_init+0x2b4>)
   84030:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   84032:	2100      	movs	r1, #0
   84034:	200e      	movs	r0, #14
   84036:	4b14      	ldr	r3, [pc, #80]	; (84088 <board_init+0x2b0>)
   84038:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   8403a:	200e      	movs	r0, #14
   8403c:	4b13      	ldr	r3, [pc, #76]	; (8408c <board_init+0x2b4>)
   8403e:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   84040:	2100      	movs	r1, #0
   84042:	2014      	movs	r0, #20
   84044:	4b10      	ldr	r3, [pc, #64]	; (84088 <board_init+0x2b0>)
   84046:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   84048:	2014      	movs	r0, #20
   8404a:	4b10      	ldr	r3, [pc, #64]	; (8408c <board_init+0x2b4>)
   8404c:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   8404e:	2100      	movs	r1, #0
   84050:	2013      	movs	r0, #19
   84052:	4b0d      	ldr	r3, [pc, #52]	; (84088 <board_init+0x2b0>)
   84054:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   84056:	2013      	movs	r0, #19
   84058:	4b0c      	ldr	r3, [pc, #48]	; (8408c <board_init+0x2b4>)
   8405a:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   8405c:	2100      	movs	r1, #0
   8405e:	2015      	movs	r0, #21
   84060:	4b09      	ldr	r3, [pc, #36]	; (84088 <board_init+0x2b0>)
   84062:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   84064:	2015      	movs	r0, #21
   84066:	4b09      	ldr	r3, [pc, #36]	; (8408c <board_init+0x2b4>)
   84068:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   8406a:	2100      	movs	r1, #0
   8406c:	2016      	movs	r0, #22
   8406e:	4b06      	ldr	r3, [pc, #24]	; (84088 <board_init+0x2b0>)
   84070:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   84072:	2016      	movs	r0, #22
   84074:	e00c      	b.n	84090 <board_init+0x2b8>
   84076:	bf00      	nop
   84078:	400e1a50 	.word	0x400e1a50
   8407c:	00083ba5 	.word	0x00083ba5
   84080:	00083ce9 	.word	0x00083ce9
   84084:	00083d6f 	.word	0x00083d6f
   84088:	00083c11 	.word	0x00083c11
   8408c:	00083bc9 	.word	0x00083bc9
   84090:	4b17      	ldr	r3, [pc, #92]	; (840f0 <board_init+0x318>)
   84092:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   84094:	2100      	movs	r1, #0
   84096:	2017      	movs	r0, #23
   84098:	4b16      	ldr	r3, [pc, #88]	; (840f4 <board_init+0x31c>)
   8409a:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   8409c:	2017      	movs	r0, #23
   8409e:	4b14      	ldr	r3, [pc, #80]	; (840f0 <board_init+0x318>)
   840a0:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   840a2:	2100      	movs	r1, #0
   840a4:	2018      	movs	r0, #24
   840a6:	4b13      	ldr	r3, [pc, #76]	; (840f4 <board_init+0x31c>)
   840a8:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   840aa:	2018      	movs	r0, #24
   840ac:	4b10      	ldr	r3, [pc, #64]	; (840f0 <board_init+0x318>)
   840ae:	4798      	blx	r3


    /* Init PWM */
    pmc_enable_periph_clk(ID_PWM);
   840b0:	2024      	movs	r0, #36	; 0x24
   840b2:	4b11      	ldr	r3, [pc, #68]	; (840f8 <board_init+0x320>)
   840b4:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_LEFT);
   840b6:	2100      	movs	r1, #0
   840b8:	4810      	ldr	r0, [pc, #64]	; (840fc <board_init+0x324>)
   840ba:	4b11      	ldr	r3, [pc, #68]	; (84100 <board_init+0x328>)
   840bc:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_RIGHT);
   840be:	2101      	movs	r1, #1
   840c0:	480e      	ldr	r0, [pc, #56]	; (840fc <board_init+0x324>)
   840c2:	4b0f      	ldr	r3, [pc, #60]	; (84100 <board_init+0x328>)
   840c4:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_REAR);
   840c6:	2102      	movs	r1, #2
   840c8:	480c      	ldr	r0, [pc, #48]	; (840fc <board_init+0x324>)
   840ca:	4b0d      	ldr	r3, [pc, #52]	; (84100 <board_init+0x328>)
   840cc:	4798      	blx	r3
    pwm_clock_t clock_setting =
   840ce:	4b0d      	ldr	r3, [pc, #52]	; (84104 <board_init+0x32c>)
   840d0:	607b      	str	r3, [r7, #4]
   840d2:	2300      	movs	r3, #0
   840d4:	60bb      	str	r3, [r7, #8]
    {
        .ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
        .ul_clkb = 0,
        .ul_mck = sysclk_get_cpu_hz()
   840d6:	4b0c      	ldr	r3, [pc, #48]	; (84108 <board_init+0x330>)
   840d8:	4798      	blx	r3
   840da:	4603      	mov	r3, r0
    pwm_clock_t clock_setting =
   840dc:	60fb      	str	r3, [r7, #12]
    };
    pwm_init(PWM, &clock_setting);
   840de:	1d3b      	adds	r3, r7, #4
   840e0:	4619      	mov	r1, r3
   840e2:	4806      	ldr	r0, [pc, #24]	; (840fc <board_init+0x324>)
   840e4:	4b09      	ldr	r3, [pc, #36]	; (8410c <board_init+0x334>)
   840e6:	4798      	blx	r3
}
   840e8:	bf00      	nop
   840ea:	3710      	adds	r7, #16
   840ec:	46bd      	mov	sp, r7
   840ee:	bd80      	pop	{r7, pc}
   840f0:	00083bc9 	.word	0x00083bc9
   840f4:	00083c11 	.word	0x00083c11
   840f8:	00083a65 	.word	0x00083a65
   840fc:	40094000 	.word	0x40094000
   84100:	00080615 	.word	0x00080615
   84104:	01312d00 	.word	0x01312d00
   84108:	00083b75 	.word	0x00083b75
   8410c:	000802e9 	.word	0x000802e9

00084110 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   84110:	b480      	push	{r7}
   84112:	af00      	add	r7, sp, #0
	while (1) {
   84114:	e7fe      	b.n	84114 <Dummy_Handler+0x4>
	...

00084118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   84118:	b580      	push	{r7, lr}
   8411a:	b082      	sub	sp, #8
   8411c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   8411e:	4b1e      	ldr	r3, [pc, #120]	; (84198 <Reset_Handler+0x80>)
   84120:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   84122:	4b1e      	ldr	r3, [pc, #120]	; (8419c <Reset_Handler+0x84>)
   84124:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   84126:	687a      	ldr	r2, [r7, #4]
   84128:	683b      	ldr	r3, [r7, #0]
   8412a:	429a      	cmp	r2, r3
   8412c:	d00c      	beq.n	84148 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   8412e:	e007      	b.n	84140 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   84130:	683b      	ldr	r3, [r7, #0]
   84132:	1d1a      	adds	r2, r3, #4
   84134:	603a      	str	r2, [r7, #0]
   84136:	687a      	ldr	r2, [r7, #4]
   84138:	1d11      	adds	r1, r2, #4
   8413a:	6079      	str	r1, [r7, #4]
   8413c:	6812      	ldr	r2, [r2, #0]
   8413e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   84140:	683b      	ldr	r3, [r7, #0]
   84142:	4a17      	ldr	r2, [pc, #92]	; (841a0 <Reset_Handler+0x88>)
   84144:	4293      	cmp	r3, r2
   84146:	d3f3      	bcc.n	84130 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   84148:	4b16      	ldr	r3, [pc, #88]	; (841a4 <Reset_Handler+0x8c>)
   8414a:	603b      	str	r3, [r7, #0]
   8414c:	e004      	b.n	84158 <Reset_Handler+0x40>
		*pDest++ = 0;
   8414e:	683b      	ldr	r3, [r7, #0]
   84150:	1d1a      	adds	r2, r3, #4
   84152:	603a      	str	r2, [r7, #0]
   84154:	2200      	movs	r2, #0
   84156:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   84158:	683b      	ldr	r3, [r7, #0]
   8415a:	4a13      	ldr	r2, [pc, #76]	; (841a8 <Reset_Handler+0x90>)
   8415c:	4293      	cmp	r3, r2
   8415e:	d3f6      	bcc.n	8414e <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   84160:	4b12      	ldr	r3, [pc, #72]	; (841ac <Reset_Handler+0x94>)
   84162:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   84164:	4a12      	ldr	r2, [pc, #72]	; (841b0 <Reset_Handler+0x98>)
   84166:	687b      	ldr	r3, [r7, #4]
   84168:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8416c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   84170:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   84172:	687b      	ldr	r3, [r7, #4]
   84174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   84178:	d309      	bcc.n	8418e <Reset_Handler+0x76>
   8417a:	687b      	ldr	r3, [r7, #4]
   8417c:	4a0d      	ldr	r2, [pc, #52]	; (841b4 <Reset_Handler+0x9c>)
   8417e:	4293      	cmp	r3, r2
   84180:	d805      	bhi.n	8418e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   84182:	4a0b      	ldr	r2, [pc, #44]	; (841b0 <Reset_Handler+0x98>)
   84184:	4b0a      	ldr	r3, [pc, #40]	; (841b0 <Reset_Handler+0x98>)
   84186:	689b      	ldr	r3, [r3, #8]
   84188:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8418c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8418e:	4b0a      	ldr	r3, [pc, #40]	; (841b8 <Reset_Handler+0xa0>)
   84190:	4798      	blx	r3

	/* Branch to main function */
	main();
   84192:	4b0a      	ldr	r3, [pc, #40]	; (841bc <Reset_Handler+0xa4>)
   84194:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   84196:	e7fe      	b.n	84196 <Reset_Handler+0x7e>
   84198:	00089b2c 	.word	0x00089b2c
   8419c:	20070000 	.word	0x20070000
   841a0:	20070b50 	.word	0x20070b50
   841a4:	20070b50 	.word	0x20070b50
   841a8:	20071010 	.word	0x20071010
   841ac:	00080000 	.word	0x00080000
   841b0:	e000ed00 	.word	0xe000ed00
   841b4:	200fffff 	.word	0x200fffff
   841b8:	000855d5 	.word	0x000855d5
   841bc:	00084591 	.word	0x00084591

000841c0 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   841c0:	b480      	push	{r7}
   841c2:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   841c4:	4b57      	ldr	r3, [pc, #348]	; (84324 <SystemCoreClockUpdate+0x164>)
   841c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   841c8:	f003 0303 	and.w	r3, r3, #3
   841cc:	2b03      	cmp	r3, #3
   841ce:	f200 808a 	bhi.w	842e6 <SystemCoreClockUpdate+0x126>
   841d2:	a201      	add	r2, pc, #4	; (adr r2, 841d8 <SystemCoreClockUpdate+0x18>)
   841d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   841d8:	000841e9 	.word	0x000841e9
   841dc:	00084209 	.word	0x00084209
   841e0:	00084259 	.word	0x00084259
   841e4:	00084259 	.word	0x00084259
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   841e8:	4b4f      	ldr	r3, [pc, #316]	; (84328 <SystemCoreClockUpdate+0x168>)
   841ea:	695b      	ldr	r3, [r3, #20]
   841ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
   841f0:	2b00      	cmp	r3, #0
   841f2:	d004      	beq.n	841fe <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   841f4:	4b4d      	ldr	r3, [pc, #308]	; (8432c <SystemCoreClockUpdate+0x16c>)
   841f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   841fa:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   841fc:	e073      	b.n	842e6 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   841fe:	4b4b      	ldr	r3, [pc, #300]	; (8432c <SystemCoreClockUpdate+0x16c>)
   84200:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   84204:	601a      	str	r2, [r3, #0]
		break;
   84206:	e06e      	b.n	842e6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84208:	4b46      	ldr	r3, [pc, #280]	; (84324 <SystemCoreClockUpdate+0x164>)
   8420a:	6a1b      	ldr	r3, [r3, #32]
   8420c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   84210:	2b00      	cmp	r3, #0
   84212:	d003      	beq.n	8421c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84214:	4b45      	ldr	r3, [pc, #276]	; (8432c <SystemCoreClockUpdate+0x16c>)
   84216:	4a46      	ldr	r2, [pc, #280]	; (84330 <SystemCoreClockUpdate+0x170>)
   84218:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   8421a:	e064      	b.n	842e6 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8421c:	4b43      	ldr	r3, [pc, #268]	; (8432c <SystemCoreClockUpdate+0x16c>)
   8421e:	4a45      	ldr	r2, [pc, #276]	; (84334 <SystemCoreClockUpdate+0x174>)
   84220:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84222:	4b40      	ldr	r3, [pc, #256]	; (84324 <SystemCoreClockUpdate+0x164>)
   84224:	6a1b      	ldr	r3, [r3, #32]
   84226:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8422a:	2b10      	cmp	r3, #16
   8422c:	d004      	beq.n	84238 <SystemCoreClockUpdate+0x78>
   8422e:	2b20      	cmp	r3, #32
   84230:	d008      	beq.n	84244 <SystemCoreClockUpdate+0x84>
   84232:	2b00      	cmp	r3, #0
   84234:	d00e      	beq.n	84254 <SystemCoreClockUpdate+0x94>
				break;
   84236:	e00e      	b.n	84256 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   84238:	4b3c      	ldr	r3, [pc, #240]	; (8432c <SystemCoreClockUpdate+0x16c>)
   8423a:	681b      	ldr	r3, [r3, #0]
   8423c:	005b      	lsls	r3, r3, #1
   8423e:	4a3b      	ldr	r2, [pc, #236]	; (8432c <SystemCoreClockUpdate+0x16c>)
   84240:	6013      	str	r3, [r2, #0]
				break;
   84242:	e008      	b.n	84256 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   84244:	4b39      	ldr	r3, [pc, #228]	; (8432c <SystemCoreClockUpdate+0x16c>)
   84246:	681a      	ldr	r2, [r3, #0]
   84248:	4613      	mov	r3, r2
   8424a:	005b      	lsls	r3, r3, #1
   8424c:	4413      	add	r3, r2
   8424e:	4a37      	ldr	r2, [pc, #220]	; (8432c <SystemCoreClockUpdate+0x16c>)
   84250:	6013      	str	r3, [r2, #0]
				break;
   84252:	e000      	b.n	84256 <SystemCoreClockUpdate+0x96>
				break;
   84254:	bf00      	nop
		break;
   84256:	e046      	b.n	842e6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84258:	4b32      	ldr	r3, [pc, #200]	; (84324 <SystemCoreClockUpdate+0x164>)
   8425a:	6a1b      	ldr	r3, [r3, #32]
   8425c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   84260:	2b00      	cmp	r3, #0
   84262:	d003      	beq.n	8426c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84264:	4b31      	ldr	r3, [pc, #196]	; (8432c <SystemCoreClockUpdate+0x16c>)
   84266:	4a32      	ldr	r2, [pc, #200]	; (84330 <SystemCoreClockUpdate+0x170>)
   84268:	601a      	str	r2, [r3, #0]
   8426a:	e01c      	b.n	842a6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8426c:	4b2f      	ldr	r3, [pc, #188]	; (8432c <SystemCoreClockUpdate+0x16c>)
   8426e:	4a31      	ldr	r2, [pc, #196]	; (84334 <SystemCoreClockUpdate+0x174>)
   84270:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84272:	4b2c      	ldr	r3, [pc, #176]	; (84324 <SystemCoreClockUpdate+0x164>)
   84274:	6a1b      	ldr	r3, [r3, #32]
   84276:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8427a:	2b10      	cmp	r3, #16
   8427c:	d004      	beq.n	84288 <SystemCoreClockUpdate+0xc8>
   8427e:	2b20      	cmp	r3, #32
   84280:	d008      	beq.n	84294 <SystemCoreClockUpdate+0xd4>
   84282:	2b00      	cmp	r3, #0
   84284:	d00e      	beq.n	842a4 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   84286:	e00e      	b.n	842a6 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   84288:	4b28      	ldr	r3, [pc, #160]	; (8432c <SystemCoreClockUpdate+0x16c>)
   8428a:	681b      	ldr	r3, [r3, #0]
   8428c:	005b      	lsls	r3, r3, #1
   8428e:	4a27      	ldr	r2, [pc, #156]	; (8432c <SystemCoreClockUpdate+0x16c>)
   84290:	6013      	str	r3, [r2, #0]
				break;
   84292:	e008      	b.n	842a6 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   84294:	4b25      	ldr	r3, [pc, #148]	; (8432c <SystemCoreClockUpdate+0x16c>)
   84296:	681a      	ldr	r2, [r3, #0]
   84298:	4613      	mov	r3, r2
   8429a:	005b      	lsls	r3, r3, #1
   8429c:	4413      	add	r3, r2
   8429e:	4a23      	ldr	r2, [pc, #140]	; (8432c <SystemCoreClockUpdate+0x16c>)
   842a0:	6013      	str	r3, [r2, #0]
				break;
   842a2:	e000      	b.n	842a6 <SystemCoreClockUpdate+0xe6>
				break;
   842a4:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   842a6:	4b1f      	ldr	r3, [pc, #124]	; (84324 <SystemCoreClockUpdate+0x164>)
   842a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   842aa:	f003 0303 	and.w	r3, r3, #3
   842ae:	2b02      	cmp	r3, #2
   842b0:	d115      	bne.n	842de <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   842b2:	4b1c      	ldr	r3, [pc, #112]	; (84324 <SystemCoreClockUpdate+0x164>)
   842b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   842b6:	0c1b      	lsrs	r3, r3, #16
   842b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   842bc:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   842be:	4a1b      	ldr	r2, [pc, #108]	; (8432c <SystemCoreClockUpdate+0x16c>)
   842c0:	6812      	ldr	r2, [r2, #0]
   842c2:	fb02 f303 	mul.w	r3, r2, r3
   842c6:	4a19      	ldr	r2, [pc, #100]	; (8432c <SystemCoreClockUpdate+0x16c>)
   842c8:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   842ca:	4b16      	ldr	r3, [pc, #88]	; (84324 <SystemCoreClockUpdate+0x164>)
   842cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   842ce:	b2db      	uxtb	r3, r3
   842d0:	4a16      	ldr	r2, [pc, #88]	; (8432c <SystemCoreClockUpdate+0x16c>)
   842d2:	6812      	ldr	r2, [r2, #0]
   842d4:	fbb2 f3f3 	udiv	r3, r2, r3
   842d8:	4a14      	ldr	r2, [pc, #80]	; (8432c <SystemCoreClockUpdate+0x16c>)
   842da:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   842dc:	e002      	b.n	842e4 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   842de:	4b13      	ldr	r3, [pc, #76]	; (8432c <SystemCoreClockUpdate+0x16c>)
   842e0:	4a15      	ldr	r2, [pc, #84]	; (84338 <SystemCoreClockUpdate+0x178>)
   842e2:	601a      	str	r2, [r3, #0]
		break;
   842e4:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   842e6:	4b0f      	ldr	r3, [pc, #60]	; (84324 <SystemCoreClockUpdate+0x164>)
   842e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   842ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
   842ee:	2b70      	cmp	r3, #112	; 0x70
   842f0:	d108      	bne.n	84304 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   842f2:	4b0e      	ldr	r3, [pc, #56]	; (8432c <SystemCoreClockUpdate+0x16c>)
   842f4:	681b      	ldr	r3, [r3, #0]
   842f6:	4a11      	ldr	r2, [pc, #68]	; (8433c <SystemCoreClockUpdate+0x17c>)
   842f8:	fba2 2303 	umull	r2, r3, r2, r3
   842fc:	085b      	lsrs	r3, r3, #1
   842fe:	4a0b      	ldr	r2, [pc, #44]	; (8432c <SystemCoreClockUpdate+0x16c>)
   84300:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   84302:	e00a      	b.n	8431a <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   84304:	4b07      	ldr	r3, [pc, #28]	; (84324 <SystemCoreClockUpdate+0x164>)
   84306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84308:	091b      	lsrs	r3, r3, #4
   8430a:	f003 0307 	and.w	r3, r3, #7
   8430e:	4a07      	ldr	r2, [pc, #28]	; (8432c <SystemCoreClockUpdate+0x16c>)
   84310:	6812      	ldr	r2, [r2, #0]
   84312:	fa22 f303 	lsr.w	r3, r2, r3
   84316:	4a05      	ldr	r2, [pc, #20]	; (8432c <SystemCoreClockUpdate+0x16c>)
   84318:	6013      	str	r3, [r2, #0]
}
   8431a:	bf00      	nop
   8431c:	46bd      	mov	sp, r7
   8431e:	bc80      	pop	{r7}
   84320:	4770      	bx	lr
   84322:	bf00      	nop
   84324:	400e0600 	.word	0x400e0600
   84328:	400e1a10 	.word	0x400e1a10
   8432c:	2007019c 	.word	0x2007019c
   84330:	00b71b00 	.word	0x00b71b00
   84334:	003d0900 	.word	0x003d0900
   84338:	0e4e1c00 	.word	0x0e4e1c00
   8433c:	aaaaaaab 	.word	0xaaaaaaab

00084340 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   84340:	b480      	push	{r7}
   84342:	b085      	sub	sp, #20
   84344:	af00      	add	r7, sp, #0
   84346:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   84348:	4b10      	ldr	r3, [pc, #64]	; (8438c <_sbrk+0x4c>)
   8434a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   8434c:	4b10      	ldr	r3, [pc, #64]	; (84390 <_sbrk+0x50>)
   8434e:	681b      	ldr	r3, [r3, #0]
   84350:	2b00      	cmp	r3, #0
   84352:	d102      	bne.n	8435a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   84354:	4b0e      	ldr	r3, [pc, #56]	; (84390 <_sbrk+0x50>)
   84356:	4a0f      	ldr	r2, [pc, #60]	; (84394 <_sbrk+0x54>)
   84358:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8435a:	4b0d      	ldr	r3, [pc, #52]	; (84390 <_sbrk+0x50>)
   8435c:	681b      	ldr	r3, [r3, #0]
   8435e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   84360:	68ba      	ldr	r2, [r7, #8]
   84362:	687b      	ldr	r3, [r7, #4]
   84364:	441a      	add	r2, r3
   84366:	68fb      	ldr	r3, [r7, #12]
   84368:	429a      	cmp	r2, r3
   8436a:	dd02      	ble.n	84372 <_sbrk+0x32>
		return (caddr_t) -1;	
   8436c:	f04f 33ff 	mov.w	r3, #4294967295
   84370:	e006      	b.n	84380 <_sbrk+0x40>
	}

	heap += incr;
   84372:	4b07      	ldr	r3, [pc, #28]	; (84390 <_sbrk+0x50>)
   84374:	681a      	ldr	r2, [r3, #0]
   84376:	687b      	ldr	r3, [r7, #4]
   84378:	4413      	add	r3, r2
   8437a:	4a05      	ldr	r2, [pc, #20]	; (84390 <_sbrk+0x50>)
   8437c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8437e:	68bb      	ldr	r3, [r7, #8]
}
   84380:	4618      	mov	r0, r3
   84382:	3714      	adds	r7, #20
   84384:	46bd      	mov	sp, r7
   84386:	bc80      	pop	{r7}
   84388:	4770      	bx	lr
   8438a:	bf00      	nop
   8438c:	20087ffc 	.word	0x20087ffc
   84390:	20070dcc 	.word	0x20070dcc
   84394:	20073010 	.word	0x20073010

00084398 <NVIC_SetPriority>:
{
   84398:	b480      	push	{r7}
   8439a:	b083      	sub	sp, #12
   8439c:	af00      	add	r7, sp, #0
   8439e:	4603      	mov	r3, r0
   843a0:	6039      	str	r1, [r7, #0]
   843a2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   843a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   843a8:	2b00      	cmp	r3, #0
   843aa:	da0b      	bge.n	843c4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   843ac:	490d      	ldr	r1, [pc, #52]	; (843e4 <NVIC_SetPriority+0x4c>)
   843ae:	79fb      	ldrb	r3, [r7, #7]
   843b0:	f003 030f 	and.w	r3, r3, #15
   843b4:	3b04      	subs	r3, #4
   843b6:	683a      	ldr	r2, [r7, #0]
   843b8:	b2d2      	uxtb	r2, r2
   843ba:	0112      	lsls	r2, r2, #4
   843bc:	b2d2      	uxtb	r2, r2
   843be:	440b      	add	r3, r1
   843c0:	761a      	strb	r2, [r3, #24]
}
   843c2:	e009      	b.n	843d8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   843c4:	4908      	ldr	r1, [pc, #32]	; (843e8 <NVIC_SetPriority+0x50>)
   843c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   843ca:	683a      	ldr	r2, [r7, #0]
   843cc:	b2d2      	uxtb	r2, r2
   843ce:	0112      	lsls	r2, r2, #4
   843d0:	b2d2      	uxtb	r2, r2
   843d2:	440b      	add	r3, r1
   843d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   843d8:	bf00      	nop
   843da:	370c      	adds	r7, #12
   843dc:	46bd      	mov	sp, r7
   843de:	bc80      	pop	{r7}
   843e0:	4770      	bx	lr
   843e2:	bf00      	nop
   843e4:	e000ed00 	.word	0xe000ed00
   843e8:	e000e100 	.word	0xe000e100

000843ec <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   843ec:	b580      	push	{r7, lr}
   843ee:	b082      	sub	sp, #8
   843f0:	af00      	add	r7, sp, #0
   843f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   843f4:	687b      	ldr	r3, [r7, #4]
   843f6:	3b01      	subs	r3, #1
   843f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   843fc:	d301      	bcc.n	84402 <SysTick_Config+0x16>
   843fe:	2301      	movs	r3, #1
   84400:	e00f      	b.n	84422 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   84402:	4a0a      	ldr	r2, [pc, #40]	; (8442c <SysTick_Config+0x40>)
   84404:	687b      	ldr	r3, [r7, #4]
   84406:	3b01      	subs	r3, #1
   84408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   8440a:	210f      	movs	r1, #15
   8440c:	f04f 30ff 	mov.w	r0, #4294967295
   84410:	4b07      	ldr	r3, [pc, #28]	; (84430 <SysTick_Config+0x44>)
   84412:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   84414:	4b05      	ldr	r3, [pc, #20]	; (8442c <SysTick_Config+0x40>)
   84416:	2200      	movs	r2, #0
   84418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   8441a:	4b04      	ldr	r3, [pc, #16]	; (8442c <SysTick_Config+0x40>)
   8441c:	2207      	movs	r2, #7
   8441e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   84420:	2300      	movs	r3, #0
}
   84422:	4618      	mov	r0, r3
   84424:	3708      	adds	r7, #8
   84426:	46bd      	mov	sp, r7
   84428:	bd80      	pop	{r7, pc}
   8442a:	bf00      	nop
   8442c:	e000e010 	.word	0xe000e010
   84430:	00084399 	.word	0x00084399

00084434 <osc_get_rate>:
{
   84434:	b480      	push	{r7}
   84436:	b083      	sub	sp, #12
   84438:	af00      	add	r7, sp, #0
   8443a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8443c:	687b      	ldr	r3, [r7, #4]
   8443e:	2b07      	cmp	r3, #7
   84440:	d825      	bhi.n	8448e <osc_get_rate+0x5a>
   84442:	a201      	add	r2, pc, #4	; (adr r2, 84448 <osc_get_rate+0x14>)
   84444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84448:	00084469 	.word	0x00084469
   8444c:	0008446f 	.word	0x0008446f
   84450:	00084475 	.word	0x00084475
   84454:	0008447b 	.word	0x0008447b
   84458:	0008447f 	.word	0x0008447f
   8445c:	00084483 	.word	0x00084483
   84460:	00084487 	.word	0x00084487
   84464:	0008448b 	.word	0x0008448b
		return OSC_SLCK_32K_RC_HZ;
   84468:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8446c:	e010      	b.n	84490 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8446e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84472:	e00d      	b.n	84490 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   84474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84478:	e00a      	b.n	84490 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   8447a:	4b08      	ldr	r3, [pc, #32]	; (8449c <osc_get_rate+0x68>)
   8447c:	e008      	b.n	84490 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8447e:	4b08      	ldr	r3, [pc, #32]	; (844a0 <osc_get_rate+0x6c>)
   84480:	e006      	b.n	84490 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   84482:	4b08      	ldr	r3, [pc, #32]	; (844a4 <osc_get_rate+0x70>)
   84484:	e004      	b.n	84490 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   84486:	4b07      	ldr	r3, [pc, #28]	; (844a4 <osc_get_rate+0x70>)
   84488:	e002      	b.n	84490 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   8448a:	4b06      	ldr	r3, [pc, #24]	; (844a4 <osc_get_rate+0x70>)
   8448c:	e000      	b.n	84490 <osc_get_rate+0x5c>
	return 0;
   8448e:	2300      	movs	r3, #0
}
   84490:	4618      	mov	r0, r3
   84492:	370c      	adds	r7, #12
   84494:	46bd      	mov	sp, r7
   84496:	bc80      	pop	{r7}
   84498:	4770      	bx	lr
   8449a:	bf00      	nop
   8449c:	003d0900 	.word	0x003d0900
   844a0:	007a1200 	.word	0x007a1200
   844a4:	00b71b00 	.word	0x00b71b00

000844a8 <sysclk_get_main_hz>:
{
   844a8:	b580      	push	{r7, lr}
   844aa:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   844ac:	2006      	movs	r0, #6
   844ae:	4b04      	ldr	r3, [pc, #16]	; (844c0 <sysclk_get_main_hz+0x18>)
   844b0:	4798      	blx	r3
   844b2:	4602      	mov	r2, r0
   844b4:	4613      	mov	r3, r2
   844b6:	00db      	lsls	r3, r3, #3
   844b8:	1a9b      	subs	r3, r3, r2
   844ba:	005b      	lsls	r3, r3, #1
}
   844bc:	4618      	mov	r0, r3
   844be:	bd80      	pop	{r7, pc}
   844c0:	00084435 	.word	0x00084435

000844c4 <sysclk_get_cpu_hz>:
{
   844c4:	b580      	push	{r7, lr}
   844c6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   844c8:	4b02      	ldr	r3, [pc, #8]	; (844d4 <sysclk_get_cpu_hz+0x10>)
   844ca:	4798      	blx	r3
   844cc:	4603      	mov	r3, r0
   844ce:	085b      	lsrs	r3, r3, #1
}
   844d0:	4618      	mov	r0, r3
   844d2:	bd80      	pop	{r7, pc}
   844d4:	000844a9 	.word	0x000844a9

000844d8 <ioport_set_pin_level>:
{
   844d8:	b480      	push	{r7}
   844da:	b08b      	sub	sp, #44	; 0x2c
   844dc:	af00      	add	r7, sp, #0
   844de:	6078      	str	r0, [r7, #4]
   844e0:	460b      	mov	r3, r1
   844e2:	70fb      	strb	r3, [r7, #3]
   844e4:	687b      	ldr	r3, [r7, #4]
   844e6:	627b      	str	r3, [r7, #36]	; 0x24
   844e8:	78fb      	ldrb	r3, [r7, #3]
   844ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   844ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   844f0:	61fb      	str	r3, [r7, #28]
   844f2:	69fb      	ldr	r3, [r7, #28]
   844f4:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   844f6:	69bb      	ldr	r3, [r7, #24]
   844f8:	095b      	lsrs	r3, r3, #5
   844fa:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   844fc:	697b      	ldr	r3, [r7, #20]
   844fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84502:	f203 7307 	addw	r3, r3, #1799	; 0x707
   84506:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   84508:	613b      	str	r3, [r7, #16]
	if (level) {
   8450a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8450e:	2b00      	cmp	r3, #0
   84510:	d009      	beq.n	84526 <ioport_set_pin_level+0x4e>
   84512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84514:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   84516:	68fb      	ldr	r3, [r7, #12]
   84518:	f003 031f 	and.w	r3, r3, #31
   8451c:	2201      	movs	r2, #1
   8451e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   84520:	693b      	ldr	r3, [r7, #16]
   84522:	631a      	str	r2, [r3, #48]	; 0x30
}
   84524:	e008      	b.n	84538 <ioport_set_pin_level+0x60>
   84526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84528:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   8452a:	68bb      	ldr	r3, [r7, #8]
   8452c:	f003 031f 	and.w	r3, r3, #31
   84530:	2201      	movs	r2, #1
   84532:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   84534:	693b      	ldr	r3, [r7, #16]
   84536:	635a      	str	r2, [r3, #52]	; 0x34
   84538:	bf00      	nop
   8453a:	372c      	adds	r7, #44	; 0x2c
   8453c:	46bd      	mov	sp, r7
   8453e:	bc80      	pop	{r7}
   84540:	4770      	bx	lr

00084542 <ioport_get_pin_level>:
{
   84542:	b480      	push	{r7}
   84544:	b089      	sub	sp, #36	; 0x24
   84546:	af00      	add	r7, sp, #0
   84548:	6078      	str	r0, [r7, #4]
   8454a:	687b      	ldr	r3, [r7, #4]
   8454c:	61fb      	str	r3, [r7, #28]
   8454e:	69fb      	ldr	r3, [r7, #28]
   84550:	61bb      	str	r3, [r7, #24]
   84552:	69bb      	ldr	r3, [r7, #24]
   84554:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   84556:	697b      	ldr	r3, [r7, #20]
   84558:	095b      	lsrs	r3, r3, #5
   8455a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8455c:	693b      	ldr	r3, [r7, #16]
   8455e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84562:	f203 7307 	addw	r3, r3, #1799	; 0x707
   84566:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   84568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   8456a:	69fb      	ldr	r3, [r7, #28]
   8456c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8456e:	68fb      	ldr	r3, [r7, #12]
   84570:	f003 031f 	and.w	r3, r3, #31
   84574:	2101      	movs	r1, #1
   84576:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8457a:	4013      	ands	r3, r2
   8457c:	2b00      	cmp	r3, #0
   8457e:	bf14      	ite	ne
   84580:	2301      	movne	r3, #1
   84582:	2300      	moveq	r3, #0
   84584:	b2db      	uxtb	r3, r3
}
   84586:	4618      	mov	r0, r3
   84588:	3724      	adds	r7, #36	; 0x24
   8458a:	46bd      	mov	sp, r7
   8458c:	bc80      	pop	{r7}
   8458e:	4770      	bx	lr

00084590 <main>:

void noOS_bootup_sequence(void);
void set_led(ioport_pin_t pin, Bool level);

int main(void)
{
   84590:	b580      	push	{r7, lr}
   84592:	b082      	sub	sp, #8
   84594:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   84596:	4b1d      	ldr	r3, [pc, #116]	; (8460c <main+0x7c>)
   84598:	4798      	blx	r3
    board_init();
   8459a:	4b1d      	ldr	r3, [pc, #116]	; (84610 <main+0x80>)
   8459c:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   8459e:	4b1d      	ldr	r3, [pc, #116]	; (84614 <main+0x84>)
   845a0:	4798      	blx	r3
   845a2:	4602      	mov	r2, r0
   845a4:	4b1c      	ldr	r3, [pc, #112]	; (84618 <main+0x88>)
   845a6:	fba3 2302 	umull	r2, r3, r3, r2
   845aa:	099b      	lsrs	r3, r3, #6
   845ac:	4618      	mov	r0, r3
   845ae:	4b1b      	ldr	r3, [pc, #108]	; (8461c <main+0x8c>)
   845b0:	4798      	blx	r3
    
    motor_init();
   845b2:	4b1b      	ldr	r3, [pc, #108]	; (84620 <main+0x90>)
   845b4:	4798      	blx	r3

    spi_init();
   845b6:	4b1b      	ldr	r3, [pc, #108]	; (84624 <main+0x94>)
   845b8:	4798      	blx	r3
    
    compass_init();
   845ba:	4b1b      	ldr	r3, [pc, #108]	; (84628 <main+0x98>)
   845bc:	4798      	blx	r3
    lcd_init();
   845be:	4b1b      	ldr	r3, [pc, #108]	; (8462c <main+0x9c>)
   845c0:	4798      	blx	r3
    
    noOS_bootup_sequence();
   845c2:	4b1b      	ldr	r3, [pc, #108]	; (84630 <main+0xa0>)
   845c4:	4798      	blx	r3

    enable_motor();
   845c6:	4b1b      	ldr	r3, [pc, #108]	; (84634 <main+0xa4>)
   845c8:	4798      	blx	r3

    mts.line_cal_value = 7;
   845ca:	4b1b      	ldr	r3, [pc, #108]	; (84638 <main+0xa8>)
   845cc:	2207      	movs	r2, #7
   845ce:	705a      	strb	r2, [r3, #1]

    while (1)
    {
        update_comm();
   845d0:	4b1a      	ldr	r3, [pc, #104]	; (8463c <main+0xac>)
   845d2:	4798      	blx	r3
        update_heartbeat();
   845d4:	4b1a      	ldr	r3, [pc, #104]	; (84640 <main+0xb0>)
   845d6:	4798      	blx	r3
        //check_battery();
        
        if (stm.ibit.heartbeat)
   845d8:	4b1a      	ldr	r3, [pc, #104]	; (84644 <main+0xb4>)
   845da:	781b      	ldrb	r3, [r3, #0]
   845dc:	f003 0301 	and.w	r3, r3, #1
   845e0:	b2db      	uxtb	r3, r3
   845e2:	2b00      	cmp	r3, #0
   845e4:	d004      	beq.n	845f0 <main+0x60>
        {
            set_led(LED_M2, 1);
   845e6:	2101      	movs	r1, #1
   845e8:	2068      	movs	r0, #104	; 0x68
   845ea:	4b17      	ldr	r3, [pc, #92]	; (84648 <main+0xb8>)
   845ec:	4798      	blx	r3
   845ee:	e003      	b.n	845f8 <main+0x68>
        }
        else
        {
            set_led(LED_M2, 0);
   845f0:	2100      	movs	r1, #0
   845f2:	2068      	movs	r0, #104	; 0x68
   845f4:	4b14      	ldr	r3, [pc, #80]	; (84648 <main+0xb8>)
   845f6:	4798      	blx	r3
        }

        //update_motor(1, 1, 0);

        act_event = button_events();
   845f8:	4b14      	ldr	r3, [pc, #80]	; (8464c <main+0xbc>)
   845fa:	4798      	blx	r3
   845fc:	4603      	mov	r3, r0
   845fe:	71fb      	strb	r3, [r7, #7]
        menu(act_event);
   84600:	79fb      	ldrb	r3, [r7, #7]
   84602:	4618      	mov	r0, r3
   84604:	4b12      	ldr	r3, [pc, #72]	; (84650 <main+0xc0>)
   84606:	4798      	blx	r3
        update_comm();
   84608:	e7e2      	b.n	845d0 <main+0x40>
   8460a:	bf00      	nop
   8460c:	00083571 	.word	0x00083571
   84610:	00083dd9 	.word	0x00083dd9
   84614:	000844c5 	.word	0x000844c5
   84618:	10624dd3 	.word	0x10624dd3
   8461c:	000843ed 	.word	0x000843ed
   84620:	00082a95 	.word	0x00082a95
   84624:	00080a8d 	.word	0x00080a8d
   84628:	0008136d 	.word	0x0008136d
   8462c:	000815ad 	.word	0x000815ad
   84630:	00084655 	.word	0x00084655
   84634:	00082c7d 	.word	0x00082c7d
   84638:	20070e18 	.word	0x20070e18
   8463c:	000830e1 	.word	0x000830e1
   84640:	000831d9 	.word	0x000831d9
   84644:	20070e20 	.word	0x20070e20
   84648:	00084809 	.word	0x00084809
   8464c:	000826d1 	.word	0x000826d1
   84650:	00081bf1 	.word	0x00081bf1

00084654 <noOS_bootup_sequence>:
    }
}

void noOS_bootup_sequence(void)
{
   84654:	b580      	push	{r7, lr}
   84656:	b082      	sub	sp, #8
   84658:	af00      	add	r7, sp, #0
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   8465a:	e072      	b.n	84742 <noOS_bootup_sequence+0xee>
    {
        if (getTicks() >= (ticks_blink_update + 800))
   8465c:	4b5e      	ldr	r3, [pc, #376]	; (847d8 <noOS_bootup_sequence+0x184>)
   8465e:	4798      	blx	r3
   84660:	4602      	mov	r2, r0
   84662:	4b5e      	ldr	r3, [pc, #376]	; (847dc <noOS_bootup_sequence+0x188>)
   84664:	681b      	ldr	r3, [r3, #0]
   84666:	f503 7348 	add.w	r3, r3, #800	; 0x320
   8466a:	429a      	cmp	r2, r3
   8466c:	d31a      	bcc.n	846a4 <noOS_bootup_sequence+0x50>
        {
            ticks_blink_update = getTicks();
   8466e:	4b5a      	ldr	r3, [pc, #360]	; (847d8 <noOS_bootup_sequence+0x184>)
   84670:	4798      	blx	r3
   84672:	4602      	mov	r2, r0
   84674:	4b59      	ldr	r3, [pc, #356]	; (847dc <noOS_bootup_sequence+0x188>)
   84676:	601a      	str	r2, [r3, #0]
            
            if (blink_level)
   84678:	4b59      	ldr	r3, [pc, #356]	; (847e0 <noOS_bootup_sequence+0x18c>)
   8467a:	781b      	ldrb	r3, [r3, #0]
   8467c:	2b00      	cmp	r3, #0
   8467e:	d003      	beq.n	84688 <noOS_bootup_sequence+0x34>
            {
                blink_level = 0;
   84680:	4b57      	ldr	r3, [pc, #348]	; (847e0 <noOS_bootup_sequence+0x18c>)
   84682:	2200      	movs	r2, #0
   84684:	701a      	strb	r2, [r3, #0]
   84686:	e002      	b.n	8468e <noOS_bootup_sequence+0x3a>
            }
            else
            {
                blink_level = 1;
   84688:	4b55      	ldr	r3, [pc, #340]	; (847e0 <noOS_bootup_sequence+0x18c>)
   8468a:	2201      	movs	r2, #1
   8468c:	701a      	strb	r2, [r3, #0]
            }
            
            ioport_set_pin_level(LED_BAT, blink_level);
   8468e:	4b54      	ldr	r3, [pc, #336]	; (847e0 <noOS_bootup_sequence+0x18c>)
   84690:	781b      	ldrb	r3, [r3, #0]
   84692:	2b00      	cmp	r3, #0
   84694:	bf14      	ite	ne
   84696:	2301      	movne	r3, #1
   84698:	2300      	moveq	r3, #0
   8469a:	b2db      	uxtb	r3, r3
   8469c:	4619      	mov	r1, r3
   8469e:	2066      	movs	r0, #102	; 0x66
   846a0:	4b50      	ldr	r3, [pc, #320]	; (847e4 <noOS_bootup_sequence+0x190>)
   846a2:	4798      	blx	r3
        }
        
        if (getTicks() >= (ticks_dot_update + 500))
   846a4:	4b4c      	ldr	r3, [pc, #304]	; (847d8 <noOS_bootup_sequence+0x184>)
   846a6:	4798      	blx	r3
   846a8:	4602      	mov	r2, r0
   846aa:	4b4f      	ldr	r3, [pc, #316]	; (847e8 <noOS_bootup_sequence+0x194>)
   846ac:	681b      	ldr	r3, [r3, #0]
   846ae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   846b2:	429a      	cmp	r2, r3
   846b4:	d315      	bcc.n	846e2 <noOS_bootup_sequence+0x8e>
        {
            ticks_dot_update = getTicks();
   846b6:	4b48      	ldr	r3, [pc, #288]	; (847d8 <noOS_bootup_sequence+0x184>)
   846b8:	4798      	blx	r3
   846ba:	4602      	mov	r2, r0
   846bc:	4b4a      	ldr	r3, [pc, #296]	; (847e8 <noOS_bootup_sequence+0x194>)
   846be:	601a      	str	r2, [r3, #0]
            
            if (dots < 3)
   846c0:	4b4a      	ldr	r3, [pc, #296]	; (847ec <noOS_bootup_sequence+0x198>)
   846c2:	781b      	ldrb	r3, [r3, #0]
   846c4:	2b02      	cmp	r3, #2
   846c6:	d806      	bhi.n	846d6 <noOS_bootup_sequence+0x82>
            {
                dots++;
   846c8:	4b48      	ldr	r3, [pc, #288]	; (847ec <noOS_bootup_sequence+0x198>)
   846ca:	781b      	ldrb	r3, [r3, #0]
   846cc:	3301      	adds	r3, #1
   846ce:	b2da      	uxtb	r2, r3
   846d0:	4b46      	ldr	r3, [pc, #280]	; (847ec <noOS_bootup_sequence+0x198>)
   846d2:	701a      	strb	r2, [r3, #0]
   846d4:	e002      	b.n	846dc <noOS_bootup_sequence+0x88>
            }
            else
            {
                dots = 0;
   846d6:	4b45      	ldr	r3, [pc, #276]	; (847ec <noOS_bootup_sequence+0x198>)
   846d8:	2200      	movs	r2, #0
   846da:	701a      	strb	r2, [r3, #0]
            }
            
            update_dots = 1;
   846dc:	4b44      	ldr	r3, [pc, #272]	; (847f0 <noOS_bootup_sequence+0x19c>)
   846de:	2201      	movs	r2, #1
   846e0:	701a      	strb	r2, [r3, #0]
        }
        
        if (update_dots)
   846e2:	4b43      	ldr	r3, [pc, #268]	; (847f0 <noOS_bootup_sequence+0x19c>)
   846e4:	781b      	ldrb	r3, [r3, #0]
   846e6:	2b00      	cmp	r3, #0
   846e8:	d02b      	beq.n	84742 <noOS_bootup_sequence+0xee>
        {
            update_dots = 0;
   846ea:	4b41      	ldr	r3, [pc, #260]	; (847f0 <noOS_bootup_sequence+0x19c>)
   846ec:	2200      	movs	r2, #0
   846ee:	701a      	strb	r2, [r3, #0]
            
            switch (dots)
   846f0:	4b3e      	ldr	r3, [pc, #248]	; (847ec <noOS_bootup_sequence+0x198>)
   846f2:	781b      	ldrb	r3, [r3, #0]
   846f4:	2b03      	cmp	r3, #3
   846f6:	d823      	bhi.n	84740 <noOS_bootup_sequence+0xec>
   846f8:	a201      	add	r2, pc, #4	; (adr r2, 84700 <noOS_bootup_sequence+0xac>)
   846fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   846fe:	bf00      	nop
   84700:	00084711 	.word	0x00084711
   84704:	0008471d 	.word	0x0008471d
   84708:	00084729 	.word	0x00084729
   8470c:	00084735 	.word	0x00084735
            {
                case 0:
                lcd_print_s(2, 2, "booting noOS   ");
   84710:	4a38      	ldr	r2, [pc, #224]	; (847f4 <noOS_bootup_sequence+0x1a0>)
   84712:	2102      	movs	r1, #2
   84714:	2002      	movs	r0, #2
   84716:	4b38      	ldr	r3, [pc, #224]	; (847f8 <noOS_bootup_sequence+0x1a4>)
   84718:	4798      	blx	r3
                break;
   8471a:	e012      	b.n	84742 <noOS_bootup_sequence+0xee>
                case 1:
                lcd_print_s(2, 14, ".");
   8471c:	4a37      	ldr	r2, [pc, #220]	; (847fc <noOS_bootup_sequence+0x1a8>)
   8471e:	210e      	movs	r1, #14
   84720:	2002      	movs	r0, #2
   84722:	4b35      	ldr	r3, [pc, #212]	; (847f8 <noOS_bootup_sequence+0x1a4>)
   84724:	4798      	blx	r3
                break;
   84726:	e00c      	b.n	84742 <noOS_bootup_sequence+0xee>
                case 2:
                lcd_print_s(2, 15, ".");
   84728:	4a34      	ldr	r2, [pc, #208]	; (847fc <noOS_bootup_sequence+0x1a8>)
   8472a:	210f      	movs	r1, #15
   8472c:	2002      	movs	r0, #2
   8472e:	4b32      	ldr	r3, [pc, #200]	; (847f8 <noOS_bootup_sequence+0x1a4>)
   84730:	4798      	blx	r3
                break;
   84732:	e006      	b.n	84742 <noOS_bootup_sequence+0xee>
                case 3:
                lcd_print_s(2, 16, ".");
   84734:	4a31      	ldr	r2, [pc, #196]	; (847fc <noOS_bootup_sequence+0x1a8>)
   84736:	2110      	movs	r1, #16
   84738:	2002      	movs	r0, #2
   8473a:	4b2f      	ldr	r3, [pc, #188]	; (847f8 <noOS_bootup_sequence+0x1a4>)
   8473c:	4798      	blx	r3
                break;
   8473e:	e000      	b.n	84742 <noOS_bootup_sequence+0xee>
                default:
                break;
   84740:	bf00      	nop
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   84742:	2008      	movs	r0, #8
   84744:	4b2e      	ldr	r3, [pc, #184]	; (84800 <noOS_bootup_sequence+0x1ac>)
   84746:	4798      	blx	r3
   84748:	4603      	mov	r3, r0
   8474a:	f083 0301 	eor.w	r3, r3, #1
   8474e:	b2db      	uxtb	r3, r3
   84750:	2b00      	cmp	r3, #0
   84752:	d006      	beq.n	84762 <noOS_bootup_sequence+0x10e>
   84754:	2062      	movs	r0, #98	; 0x62
   84756:	4b2a      	ldr	r3, [pc, #168]	; (84800 <noOS_bootup_sequence+0x1ac>)
   84758:	4798      	blx	r3
   8475a:	4603      	mov	r3, r0
   8475c:	2b00      	cmp	r3, #0
   8475e:	f47f af7d 	bne.w	8465c <noOS_bootup_sequence+0x8>
            }
        }
    }
    
    for(int i = 0; i< 3; i++)
   84762:	2300      	movs	r3, #0
   84764:	607b      	str	r3, [r7, #4]
   84766:	e030      	b.n	847ca <noOS_bootup_sequence+0x176>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   84768:	2101      	movs	r1, #1
   8476a:	206a      	movs	r0, #106	; 0x6a
   8476c:	4b1d      	ldr	r3, [pc, #116]	; (847e4 <noOS_bootup_sequence+0x190>)
   8476e:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 1);
   84770:	2101      	movs	r1, #1
   84772:	2066      	movs	r0, #102	; 0x66
   84774:	4b1b      	ldr	r3, [pc, #108]	; (847e4 <noOS_bootup_sequence+0x190>)
   84776:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 1);
   84778:	2101      	movs	r1, #1
   8477a:	2067      	movs	r0, #103	; 0x67
   8477c:	4b19      	ldr	r3, [pc, #100]	; (847e4 <noOS_bootup_sequence+0x190>)
   8477e:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 1);
   84780:	2101      	movs	r1, #1
   84782:	2068      	movs	r0, #104	; 0x68
   84784:	4b17      	ldr	r3, [pc, #92]	; (847e4 <noOS_bootup_sequence+0x190>)
   84786:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 1);
   84788:	2101      	movs	r1, #1
   8478a:	2069      	movs	r0, #105	; 0x69
   8478c:	4b15      	ldr	r3, [pc, #84]	; (847e4 <noOS_bootup_sequence+0x190>)
   8478e:	4798      	blx	r3
        mdelay(100);
   84790:	2064      	movs	r0, #100	; 0x64
   84792:	4b1c      	ldr	r3, [pc, #112]	; (84804 <noOS_bootup_sequence+0x1b0>)
   84794:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   84796:	2100      	movs	r1, #0
   84798:	206a      	movs	r0, #106	; 0x6a
   8479a:	4b12      	ldr	r3, [pc, #72]	; (847e4 <noOS_bootup_sequence+0x190>)
   8479c:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   8479e:	2100      	movs	r1, #0
   847a0:	2066      	movs	r0, #102	; 0x66
   847a2:	4b10      	ldr	r3, [pc, #64]	; (847e4 <noOS_bootup_sequence+0x190>)
   847a4:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   847a6:	2100      	movs	r1, #0
   847a8:	2067      	movs	r0, #103	; 0x67
   847aa:	4b0e      	ldr	r3, [pc, #56]	; (847e4 <noOS_bootup_sequence+0x190>)
   847ac:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   847ae:	2100      	movs	r1, #0
   847b0:	2068      	movs	r0, #104	; 0x68
   847b2:	4b0c      	ldr	r3, [pc, #48]	; (847e4 <noOS_bootup_sequence+0x190>)
   847b4:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   847b6:	2100      	movs	r1, #0
   847b8:	2069      	movs	r0, #105	; 0x69
   847ba:	4b0a      	ldr	r3, [pc, #40]	; (847e4 <noOS_bootup_sequence+0x190>)
   847bc:	4798      	blx	r3
        mdelay(100);
   847be:	2064      	movs	r0, #100	; 0x64
   847c0:	4b10      	ldr	r3, [pc, #64]	; (84804 <noOS_bootup_sequence+0x1b0>)
   847c2:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   847c4:	687b      	ldr	r3, [r7, #4]
   847c6:	3301      	adds	r3, #1
   847c8:	607b      	str	r3, [r7, #4]
   847ca:	687b      	ldr	r3, [r7, #4]
   847cc:	2b02      	cmp	r3, #2
   847ce:	ddcb      	ble.n	84768 <noOS_bootup_sequence+0x114>
    }
}
   847d0:	bf00      	nop
   847d2:	3708      	adds	r7, #8
   847d4:	46bd      	mov	sp, r7
   847d6:	bd80      	pop	{r7, pc}
   847d8:	000830a1 	.word	0x000830a1
   847dc:	20070fe0 	.word	0x20070fe0
   847e0:	20070fdc 	.word	0x20070fdc
   847e4:	000844d9 	.word	0x000844d9
   847e8:	20070fe4 	.word	0x20070fe4
   847ec:	20070dd0 	.word	0x20070dd0
   847f0:	200701a0 	.word	0x200701a0
   847f4:	00089864 	.word	0x00089864
   847f8:	0008169d 	.word	0x0008169d
   847fc:	00089874 	.word	0x00089874
   84800:	00084543 	.word	0x00084543
   84804:	000830b5 	.word	0x000830b5

00084808 <set_led>:

void set_led(ioport_pin_t pin, Bool level)
{
   84808:	b580      	push	{r7, lr}
   8480a:	b082      	sub	sp, #8
   8480c:	af00      	add	r7, sp, #0
   8480e:	6078      	str	r0, [r7, #4]
   84810:	460b      	mov	r3, r1
   84812:	70fb      	strb	r3, [r7, #3]
    if (allow_leds)
   84814:	4b0b      	ldr	r3, [pc, #44]	; (84844 <set_led+0x3c>)
   84816:	781b      	ldrb	r3, [r3, #0]
   84818:	2b00      	cmp	r3, #0
   8481a:	d00a      	beq.n	84832 <set_led+0x2a>
    {
        ioport_set_pin_level(pin, level);
   8481c:	78fb      	ldrb	r3, [r7, #3]
   8481e:	2b00      	cmp	r3, #0
   84820:	bf14      	ite	ne
   84822:	2301      	movne	r3, #1
   84824:	2300      	moveq	r3, #0
   84826:	b2db      	uxtb	r3, r3
   84828:	4619      	mov	r1, r3
   8482a:	6878      	ldr	r0, [r7, #4]
   8482c:	4b06      	ldr	r3, [pc, #24]	; (84848 <set_led+0x40>)
   8482e:	4798      	blx	r3
    }
    else
    {
        ioport_set_pin_level(pin, 0);
    }
}
   84830:	e003      	b.n	8483a <set_led+0x32>
        ioport_set_pin_level(pin, 0);
   84832:	2100      	movs	r1, #0
   84834:	6878      	ldr	r0, [r7, #4]
   84836:	4b04      	ldr	r3, [pc, #16]	; (84848 <set_led+0x40>)
   84838:	4798      	blx	r3
}
   8483a:	bf00      	nop
   8483c:	3708      	adds	r7, #8
   8483e:	46bd      	mov	sp, r7
   84840:	bd80      	pop	{r7, pc}
   84842:	bf00      	nop
   84844:	2007018d 	.word	0x2007018d
   84848:	000844d9 	.word	0x000844d9

0008484c <__aeabi_drsub>:
   8484c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   84850:	e002      	b.n	84858 <__adddf3>
   84852:	bf00      	nop

00084854 <__aeabi_dsub>:
   84854:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00084858 <__adddf3>:
   84858:	b530      	push	{r4, r5, lr}
   8485a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8485e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   84862:	ea94 0f05 	teq	r4, r5
   84866:	bf08      	it	eq
   84868:	ea90 0f02 	teqeq	r0, r2
   8486c:	bf1f      	itttt	ne
   8486e:	ea54 0c00 	orrsne.w	ip, r4, r0
   84872:	ea55 0c02 	orrsne.w	ip, r5, r2
   84876:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8487a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8487e:	f000 80e2 	beq.w	84a46 <__adddf3+0x1ee>
   84882:	ea4f 5454 	mov.w	r4, r4, lsr #21
   84886:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8488a:	bfb8      	it	lt
   8488c:	426d      	neglt	r5, r5
   8488e:	dd0c      	ble.n	848aa <__adddf3+0x52>
   84890:	442c      	add	r4, r5
   84892:	ea80 0202 	eor.w	r2, r0, r2
   84896:	ea81 0303 	eor.w	r3, r1, r3
   8489a:	ea82 0000 	eor.w	r0, r2, r0
   8489e:	ea83 0101 	eor.w	r1, r3, r1
   848a2:	ea80 0202 	eor.w	r2, r0, r2
   848a6:	ea81 0303 	eor.w	r3, r1, r3
   848aa:	2d36      	cmp	r5, #54	; 0x36
   848ac:	bf88      	it	hi
   848ae:	bd30      	pophi	{r4, r5, pc}
   848b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   848b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   848b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   848bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   848c0:	d002      	beq.n	848c8 <__adddf3+0x70>
   848c2:	4240      	negs	r0, r0
   848c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   848c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   848cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   848d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   848d4:	d002      	beq.n	848dc <__adddf3+0x84>
   848d6:	4252      	negs	r2, r2
   848d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   848dc:	ea94 0f05 	teq	r4, r5
   848e0:	f000 80a7 	beq.w	84a32 <__adddf3+0x1da>
   848e4:	f1a4 0401 	sub.w	r4, r4, #1
   848e8:	f1d5 0e20 	rsbs	lr, r5, #32
   848ec:	db0d      	blt.n	8490a <__adddf3+0xb2>
   848ee:	fa02 fc0e 	lsl.w	ip, r2, lr
   848f2:	fa22 f205 	lsr.w	r2, r2, r5
   848f6:	1880      	adds	r0, r0, r2
   848f8:	f141 0100 	adc.w	r1, r1, #0
   848fc:	fa03 f20e 	lsl.w	r2, r3, lr
   84900:	1880      	adds	r0, r0, r2
   84902:	fa43 f305 	asr.w	r3, r3, r5
   84906:	4159      	adcs	r1, r3
   84908:	e00e      	b.n	84928 <__adddf3+0xd0>
   8490a:	f1a5 0520 	sub.w	r5, r5, #32
   8490e:	f10e 0e20 	add.w	lr, lr, #32
   84912:	2a01      	cmp	r2, #1
   84914:	fa03 fc0e 	lsl.w	ip, r3, lr
   84918:	bf28      	it	cs
   8491a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8491e:	fa43 f305 	asr.w	r3, r3, r5
   84922:	18c0      	adds	r0, r0, r3
   84924:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   84928:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8492c:	d507      	bpl.n	8493e <__adddf3+0xe6>
   8492e:	f04f 0e00 	mov.w	lr, #0
   84932:	f1dc 0c00 	rsbs	ip, ip, #0
   84936:	eb7e 0000 	sbcs.w	r0, lr, r0
   8493a:	eb6e 0101 	sbc.w	r1, lr, r1
   8493e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   84942:	d31b      	bcc.n	8497c <__adddf3+0x124>
   84944:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   84948:	d30c      	bcc.n	84964 <__adddf3+0x10c>
   8494a:	0849      	lsrs	r1, r1, #1
   8494c:	ea5f 0030 	movs.w	r0, r0, rrx
   84950:	ea4f 0c3c 	mov.w	ip, ip, rrx
   84954:	f104 0401 	add.w	r4, r4, #1
   84958:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8495c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   84960:	f080 809a 	bcs.w	84a98 <__adddf3+0x240>
   84964:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84968:	bf08      	it	eq
   8496a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8496e:	f150 0000 	adcs.w	r0, r0, #0
   84972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84976:	ea41 0105 	orr.w	r1, r1, r5
   8497a:	bd30      	pop	{r4, r5, pc}
   8497c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   84980:	4140      	adcs	r0, r0
   84982:	eb41 0101 	adc.w	r1, r1, r1
   84986:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8498a:	f1a4 0401 	sub.w	r4, r4, #1
   8498e:	d1e9      	bne.n	84964 <__adddf3+0x10c>
   84990:	f091 0f00 	teq	r1, #0
   84994:	bf04      	itt	eq
   84996:	4601      	moveq	r1, r0
   84998:	2000      	moveq	r0, #0
   8499a:	fab1 f381 	clz	r3, r1
   8499e:	bf08      	it	eq
   849a0:	3320      	addeq	r3, #32
   849a2:	f1a3 030b 	sub.w	r3, r3, #11
   849a6:	f1b3 0220 	subs.w	r2, r3, #32
   849aa:	da0c      	bge.n	849c6 <__adddf3+0x16e>
   849ac:	320c      	adds	r2, #12
   849ae:	dd08      	ble.n	849c2 <__adddf3+0x16a>
   849b0:	f102 0c14 	add.w	ip, r2, #20
   849b4:	f1c2 020c 	rsb	r2, r2, #12
   849b8:	fa01 f00c 	lsl.w	r0, r1, ip
   849bc:	fa21 f102 	lsr.w	r1, r1, r2
   849c0:	e00c      	b.n	849dc <__adddf3+0x184>
   849c2:	f102 0214 	add.w	r2, r2, #20
   849c6:	bfd8      	it	le
   849c8:	f1c2 0c20 	rsble	ip, r2, #32
   849cc:	fa01 f102 	lsl.w	r1, r1, r2
   849d0:	fa20 fc0c 	lsr.w	ip, r0, ip
   849d4:	bfdc      	itt	le
   849d6:	ea41 010c 	orrle.w	r1, r1, ip
   849da:	4090      	lslle	r0, r2
   849dc:	1ae4      	subs	r4, r4, r3
   849de:	bfa2      	ittt	ge
   849e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   849e4:	4329      	orrge	r1, r5
   849e6:	bd30      	popge	{r4, r5, pc}
   849e8:	ea6f 0404 	mvn.w	r4, r4
   849ec:	3c1f      	subs	r4, #31
   849ee:	da1c      	bge.n	84a2a <__adddf3+0x1d2>
   849f0:	340c      	adds	r4, #12
   849f2:	dc0e      	bgt.n	84a12 <__adddf3+0x1ba>
   849f4:	f104 0414 	add.w	r4, r4, #20
   849f8:	f1c4 0220 	rsb	r2, r4, #32
   849fc:	fa20 f004 	lsr.w	r0, r0, r4
   84a00:	fa01 f302 	lsl.w	r3, r1, r2
   84a04:	ea40 0003 	orr.w	r0, r0, r3
   84a08:	fa21 f304 	lsr.w	r3, r1, r4
   84a0c:	ea45 0103 	orr.w	r1, r5, r3
   84a10:	bd30      	pop	{r4, r5, pc}
   84a12:	f1c4 040c 	rsb	r4, r4, #12
   84a16:	f1c4 0220 	rsb	r2, r4, #32
   84a1a:	fa20 f002 	lsr.w	r0, r0, r2
   84a1e:	fa01 f304 	lsl.w	r3, r1, r4
   84a22:	ea40 0003 	orr.w	r0, r0, r3
   84a26:	4629      	mov	r1, r5
   84a28:	bd30      	pop	{r4, r5, pc}
   84a2a:	fa21 f004 	lsr.w	r0, r1, r4
   84a2e:	4629      	mov	r1, r5
   84a30:	bd30      	pop	{r4, r5, pc}
   84a32:	f094 0f00 	teq	r4, #0
   84a36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   84a3a:	bf06      	itte	eq
   84a3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   84a40:	3401      	addeq	r4, #1
   84a42:	3d01      	subne	r5, #1
   84a44:	e74e      	b.n	848e4 <__adddf3+0x8c>
   84a46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84a4a:	bf18      	it	ne
   84a4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   84a50:	d029      	beq.n	84aa6 <__adddf3+0x24e>
   84a52:	ea94 0f05 	teq	r4, r5
   84a56:	bf08      	it	eq
   84a58:	ea90 0f02 	teqeq	r0, r2
   84a5c:	d005      	beq.n	84a6a <__adddf3+0x212>
   84a5e:	ea54 0c00 	orrs.w	ip, r4, r0
   84a62:	bf04      	itt	eq
   84a64:	4619      	moveq	r1, r3
   84a66:	4610      	moveq	r0, r2
   84a68:	bd30      	pop	{r4, r5, pc}
   84a6a:	ea91 0f03 	teq	r1, r3
   84a6e:	bf1e      	ittt	ne
   84a70:	2100      	movne	r1, #0
   84a72:	2000      	movne	r0, #0
   84a74:	bd30      	popne	{r4, r5, pc}
   84a76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   84a7a:	d105      	bne.n	84a88 <__adddf3+0x230>
   84a7c:	0040      	lsls	r0, r0, #1
   84a7e:	4149      	adcs	r1, r1
   84a80:	bf28      	it	cs
   84a82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   84a86:	bd30      	pop	{r4, r5, pc}
   84a88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   84a8c:	bf3c      	itt	cc
   84a8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   84a92:	bd30      	popcc	{r4, r5, pc}
   84a94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84a98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   84a9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84aa0:	f04f 0000 	mov.w	r0, #0
   84aa4:	bd30      	pop	{r4, r5, pc}
   84aa6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84aaa:	bf1a      	itte	ne
   84aac:	4619      	movne	r1, r3
   84aae:	4610      	movne	r0, r2
   84ab0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   84ab4:	bf1c      	itt	ne
   84ab6:	460b      	movne	r3, r1
   84ab8:	4602      	movne	r2, r0
   84aba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   84abe:	bf06      	itte	eq
   84ac0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   84ac4:	ea91 0f03 	teqeq	r1, r3
   84ac8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   84acc:	bd30      	pop	{r4, r5, pc}
   84ace:	bf00      	nop

00084ad0 <__aeabi_ui2d>:
   84ad0:	f090 0f00 	teq	r0, #0
   84ad4:	bf04      	itt	eq
   84ad6:	2100      	moveq	r1, #0
   84ad8:	4770      	bxeq	lr
   84ada:	b530      	push	{r4, r5, lr}
   84adc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84ae0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84ae4:	f04f 0500 	mov.w	r5, #0
   84ae8:	f04f 0100 	mov.w	r1, #0
   84aec:	e750      	b.n	84990 <__adddf3+0x138>
   84aee:	bf00      	nop

00084af0 <__aeabi_i2d>:
   84af0:	f090 0f00 	teq	r0, #0
   84af4:	bf04      	itt	eq
   84af6:	2100      	moveq	r1, #0
   84af8:	4770      	bxeq	lr
   84afa:	b530      	push	{r4, r5, lr}
   84afc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84b00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84b04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   84b08:	bf48      	it	mi
   84b0a:	4240      	negmi	r0, r0
   84b0c:	f04f 0100 	mov.w	r1, #0
   84b10:	e73e      	b.n	84990 <__adddf3+0x138>
   84b12:	bf00      	nop

00084b14 <__aeabi_f2d>:
   84b14:	0042      	lsls	r2, r0, #1
   84b16:	ea4f 01e2 	mov.w	r1, r2, asr #3
   84b1a:	ea4f 0131 	mov.w	r1, r1, rrx
   84b1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   84b22:	bf1f      	itttt	ne
   84b24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   84b28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84b2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   84b30:	4770      	bxne	lr
   84b32:	f092 0f00 	teq	r2, #0
   84b36:	bf14      	ite	ne
   84b38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84b3c:	4770      	bxeq	lr
   84b3e:	b530      	push	{r4, r5, lr}
   84b40:	f44f 7460 	mov.w	r4, #896	; 0x380
   84b44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84b48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84b4c:	e720      	b.n	84990 <__adddf3+0x138>
   84b4e:	bf00      	nop

00084b50 <__aeabi_ul2d>:
   84b50:	ea50 0201 	orrs.w	r2, r0, r1
   84b54:	bf08      	it	eq
   84b56:	4770      	bxeq	lr
   84b58:	b530      	push	{r4, r5, lr}
   84b5a:	f04f 0500 	mov.w	r5, #0
   84b5e:	e00a      	b.n	84b76 <__aeabi_l2d+0x16>

00084b60 <__aeabi_l2d>:
   84b60:	ea50 0201 	orrs.w	r2, r0, r1
   84b64:	bf08      	it	eq
   84b66:	4770      	bxeq	lr
   84b68:	b530      	push	{r4, r5, lr}
   84b6a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   84b6e:	d502      	bpl.n	84b76 <__aeabi_l2d+0x16>
   84b70:	4240      	negs	r0, r0
   84b72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84b76:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84b7a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84b7e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   84b82:	f43f aedc 	beq.w	8493e <__adddf3+0xe6>
   84b86:	f04f 0203 	mov.w	r2, #3
   84b8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84b8e:	bf18      	it	ne
   84b90:	3203      	addne	r2, #3
   84b92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84b96:	bf18      	it	ne
   84b98:	3203      	addne	r2, #3
   84b9a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   84b9e:	f1c2 0320 	rsb	r3, r2, #32
   84ba2:	fa00 fc03 	lsl.w	ip, r0, r3
   84ba6:	fa20 f002 	lsr.w	r0, r0, r2
   84baa:	fa01 fe03 	lsl.w	lr, r1, r3
   84bae:	ea40 000e 	orr.w	r0, r0, lr
   84bb2:	fa21 f102 	lsr.w	r1, r1, r2
   84bb6:	4414      	add	r4, r2
   84bb8:	e6c1      	b.n	8493e <__adddf3+0xe6>
   84bba:	bf00      	nop

00084bbc <__aeabi_dmul>:
   84bbc:	b570      	push	{r4, r5, r6, lr}
   84bbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84bc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   84bc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   84bca:	bf1d      	ittte	ne
   84bcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84bd0:	ea94 0f0c 	teqne	r4, ip
   84bd4:	ea95 0f0c 	teqne	r5, ip
   84bd8:	f000 f8de 	bleq	84d98 <__aeabi_dmul+0x1dc>
   84bdc:	442c      	add	r4, r5
   84bde:	ea81 0603 	eor.w	r6, r1, r3
   84be2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   84be6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   84bea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   84bee:	bf18      	it	ne
   84bf0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   84bf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   84bfc:	d038      	beq.n	84c70 <__aeabi_dmul+0xb4>
   84bfe:	fba0 ce02 	umull	ip, lr, r0, r2
   84c02:	f04f 0500 	mov.w	r5, #0
   84c06:	fbe1 e502 	umlal	lr, r5, r1, r2
   84c0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   84c0e:	fbe0 e503 	umlal	lr, r5, r0, r3
   84c12:	f04f 0600 	mov.w	r6, #0
   84c16:	fbe1 5603 	umlal	r5, r6, r1, r3
   84c1a:	f09c 0f00 	teq	ip, #0
   84c1e:	bf18      	it	ne
   84c20:	f04e 0e01 	orrne.w	lr, lr, #1
   84c24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   84c28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   84c2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   84c30:	d204      	bcs.n	84c3c <__aeabi_dmul+0x80>
   84c32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   84c36:	416d      	adcs	r5, r5
   84c38:	eb46 0606 	adc.w	r6, r6, r6
   84c3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   84c40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   84c44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   84c48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   84c4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   84c50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84c54:	bf88      	it	hi
   84c56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   84c5a:	d81e      	bhi.n	84c9a <__aeabi_dmul+0xde>
   84c5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   84c60:	bf08      	it	eq
   84c62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   84c66:	f150 0000 	adcs.w	r0, r0, #0
   84c6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84c6e:	bd70      	pop	{r4, r5, r6, pc}
   84c70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   84c74:	ea46 0101 	orr.w	r1, r6, r1
   84c78:	ea40 0002 	orr.w	r0, r0, r2
   84c7c:	ea81 0103 	eor.w	r1, r1, r3
   84c80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   84c84:	bfc2      	ittt	gt
   84c86:	ebd4 050c 	rsbsgt	r5, r4, ip
   84c8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84c8e:	bd70      	popgt	{r4, r5, r6, pc}
   84c90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84c94:	f04f 0e00 	mov.w	lr, #0
   84c98:	3c01      	subs	r4, #1
   84c9a:	f300 80ab 	bgt.w	84df4 <__aeabi_dmul+0x238>
   84c9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   84ca2:	bfde      	ittt	le
   84ca4:	2000      	movle	r0, #0
   84ca6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   84caa:	bd70      	pople	{r4, r5, r6, pc}
   84cac:	f1c4 0400 	rsb	r4, r4, #0
   84cb0:	3c20      	subs	r4, #32
   84cb2:	da35      	bge.n	84d20 <__aeabi_dmul+0x164>
   84cb4:	340c      	adds	r4, #12
   84cb6:	dc1b      	bgt.n	84cf0 <__aeabi_dmul+0x134>
   84cb8:	f104 0414 	add.w	r4, r4, #20
   84cbc:	f1c4 0520 	rsb	r5, r4, #32
   84cc0:	fa00 f305 	lsl.w	r3, r0, r5
   84cc4:	fa20 f004 	lsr.w	r0, r0, r4
   84cc8:	fa01 f205 	lsl.w	r2, r1, r5
   84ccc:	ea40 0002 	orr.w	r0, r0, r2
   84cd0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   84cd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84cd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84cdc:	fa21 f604 	lsr.w	r6, r1, r4
   84ce0:	eb42 0106 	adc.w	r1, r2, r6
   84ce4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84ce8:	bf08      	it	eq
   84cea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84cee:	bd70      	pop	{r4, r5, r6, pc}
   84cf0:	f1c4 040c 	rsb	r4, r4, #12
   84cf4:	f1c4 0520 	rsb	r5, r4, #32
   84cf8:	fa00 f304 	lsl.w	r3, r0, r4
   84cfc:	fa20 f005 	lsr.w	r0, r0, r5
   84d00:	fa01 f204 	lsl.w	r2, r1, r4
   84d04:	ea40 0002 	orr.w	r0, r0, r2
   84d08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84d0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84d10:	f141 0100 	adc.w	r1, r1, #0
   84d14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84d18:	bf08      	it	eq
   84d1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84d1e:	bd70      	pop	{r4, r5, r6, pc}
   84d20:	f1c4 0520 	rsb	r5, r4, #32
   84d24:	fa00 f205 	lsl.w	r2, r0, r5
   84d28:	ea4e 0e02 	orr.w	lr, lr, r2
   84d2c:	fa20 f304 	lsr.w	r3, r0, r4
   84d30:	fa01 f205 	lsl.w	r2, r1, r5
   84d34:	ea43 0302 	orr.w	r3, r3, r2
   84d38:	fa21 f004 	lsr.w	r0, r1, r4
   84d3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84d40:	fa21 f204 	lsr.w	r2, r1, r4
   84d44:	ea20 0002 	bic.w	r0, r0, r2
   84d48:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   84d4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84d50:	bf08      	it	eq
   84d52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84d56:	bd70      	pop	{r4, r5, r6, pc}
   84d58:	f094 0f00 	teq	r4, #0
   84d5c:	d10f      	bne.n	84d7e <__aeabi_dmul+0x1c2>
   84d5e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   84d62:	0040      	lsls	r0, r0, #1
   84d64:	eb41 0101 	adc.w	r1, r1, r1
   84d68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84d6c:	bf08      	it	eq
   84d6e:	3c01      	subeq	r4, #1
   84d70:	d0f7      	beq.n	84d62 <__aeabi_dmul+0x1a6>
   84d72:	ea41 0106 	orr.w	r1, r1, r6
   84d76:	f095 0f00 	teq	r5, #0
   84d7a:	bf18      	it	ne
   84d7c:	4770      	bxne	lr
   84d7e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   84d82:	0052      	lsls	r2, r2, #1
   84d84:	eb43 0303 	adc.w	r3, r3, r3
   84d88:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   84d8c:	bf08      	it	eq
   84d8e:	3d01      	subeq	r5, #1
   84d90:	d0f7      	beq.n	84d82 <__aeabi_dmul+0x1c6>
   84d92:	ea43 0306 	orr.w	r3, r3, r6
   84d96:	4770      	bx	lr
   84d98:	ea94 0f0c 	teq	r4, ip
   84d9c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84da0:	bf18      	it	ne
   84da2:	ea95 0f0c 	teqne	r5, ip
   84da6:	d00c      	beq.n	84dc2 <__aeabi_dmul+0x206>
   84da8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84dac:	bf18      	it	ne
   84dae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84db2:	d1d1      	bne.n	84d58 <__aeabi_dmul+0x19c>
   84db4:	ea81 0103 	eor.w	r1, r1, r3
   84db8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84dbc:	f04f 0000 	mov.w	r0, #0
   84dc0:	bd70      	pop	{r4, r5, r6, pc}
   84dc2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84dc6:	bf06      	itte	eq
   84dc8:	4610      	moveq	r0, r2
   84dca:	4619      	moveq	r1, r3
   84dcc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84dd0:	d019      	beq.n	84e06 <__aeabi_dmul+0x24a>
   84dd2:	ea94 0f0c 	teq	r4, ip
   84dd6:	d102      	bne.n	84dde <__aeabi_dmul+0x222>
   84dd8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   84ddc:	d113      	bne.n	84e06 <__aeabi_dmul+0x24a>
   84dde:	ea95 0f0c 	teq	r5, ip
   84de2:	d105      	bne.n	84df0 <__aeabi_dmul+0x234>
   84de4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   84de8:	bf1c      	itt	ne
   84dea:	4610      	movne	r0, r2
   84dec:	4619      	movne	r1, r3
   84dee:	d10a      	bne.n	84e06 <__aeabi_dmul+0x24a>
   84df0:	ea81 0103 	eor.w	r1, r1, r3
   84df4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84df8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   84dfc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84e00:	f04f 0000 	mov.w	r0, #0
   84e04:	bd70      	pop	{r4, r5, r6, pc}
   84e06:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   84e0a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   84e0e:	bd70      	pop	{r4, r5, r6, pc}

00084e10 <__aeabi_ddiv>:
   84e10:	b570      	push	{r4, r5, r6, lr}
   84e12:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84e16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   84e1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   84e1e:	bf1d      	ittte	ne
   84e20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84e24:	ea94 0f0c 	teqne	r4, ip
   84e28:	ea95 0f0c 	teqne	r5, ip
   84e2c:	f000 f8a7 	bleq	84f7e <__aeabi_ddiv+0x16e>
   84e30:	eba4 0405 	sub.w	r4, r4, r5
   84e34:	ea81 0e03 	eor.w	lr, r1, r3
   84e38:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84e3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84e40:	f000 8088 	beq.w	84f54 <__aeabi_ddiv+0x144>
   84e44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   84e48:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   84e4c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   84e50:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   84e54:	ea4f 2202 	mov.w	r2, r2, lsl #8
   84e58:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   84e5c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   84e60:	ea4f 2600 	mov.w	r6, r0, lsl #8
   84e64:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   84e68:	429d      	cmp	r5, r3
   84e6a:	bf08      	it	eq
   84e6c:	4296      	cmpeq	r6, r2
   84e6e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   84e72:	f504 7440 	add.w	r4, r4, #768	; 0x300
   84e76:	d202      	bcs.n	84e7e <__aeabi_ddiv+0x6e>
   84e78:	085b      	lsrs	r3, r3, #1
   84e7a:	ea4f 0232 	mov.w	r2, r2, rrx
   84e7e:	1ab6      	subs	r6, r6, r2
   84e80:	eb65 0503 	sbc.w	r5, r5, r3
   84e84:	085b      	lsrs	r3, r3, #1
   84e86:	ea4f 0232 	mov.w	r2, r2, rrx
   84e8a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   84e8e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   84e92:	ebb6 0e02 	subs.w	lr, r6, r2
   84e96:	eb75 0e03 	sbcs.w	lr, r5, r3
   84e9a:	bf22      	ittt	cs
   84e9c:	1ab6      	subcs	r6, r6, r2
   84e9e:	4675      	movcs	r5, lr
   84ea0:	ea40 000c 	orrcs.w	r0, r0, ip
   84ea4:	085b      	lsrs	r3, r3, #1
   84ea6:	ea4f 0232 	mov.w	r2, r2, rrx
   84eaa:	ebb6 0e02 	subs.w	lr, r6, r2
   84eae:	eb75 0e03 	sbcs.w	lr, r5, r3
   84eb2:	bf22      	ittt	cs
   84eb4:	1ab6      	subcs	r6, r6, r2
   84eb6:	4675      	movcs	r5, lr
   84eb8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   84ebc:	085b      	lsrs	r3, r3, #1
   84ebe:	ea4f 0232 	mov.w	r2, r2, rrx
   84ec2:	ebb6 0e02 	subs.w	lr, r6, r2
   84ec6:	eb75 0e03 	sbcs.w	lr, r5, r3
   84eca:	bf22      	ittt	cs
   84ecc:	1ab6      	subcs	r6, r6, r2
   84ece:	4675      	movcs	r5, lr
   84ed0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   84ed4:	085b      	lsrs	r3, r3, #1
   84ed6:	ea4f 0232 	mov.w	r2, r2, rrx
   84eda:	ebb6 0e02 	subs.w	lr, r6, r2
   84ede:	eb75 0e03 	sbcs.w	lr, r5, r3
   84ee2:	bf22      	ittt	cs
   84ee4:	1ab6      	subcs	r6, r6, r2
   84ee6:	4675      	movcs	r5, lr
   84ee8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   84eec:	ea55 0e06 	orrs.w	lr, r5, r6
   84ef0:	d018      	beq.n	84f24 <__aeabi_ddiv+0x114>
   84ef2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   84ef6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   84efa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   84efe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   84f02:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   84f06:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   84f0a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   84f0e:	d1c0      	bne.n	84e92 <__aeabi_ddiv+0x82>
   84f10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84f14:	d10b      	bne.n	84f2e <__aeabi_ddiv+0x11e>
   84f16:	ea41 0100 	orr.w	r1, r1, r0
   84f1a:	f04f 0000 	mov.w	r0, #0
   84f1e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   84f22:	e7b6      	b.n	84e92 <__aeabi_ddiv+0x82>
   84f24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84f28:	bf04      	itt	eq
   84f2a:	4301      	orreq	r1, r0
   84f2c:	2000      	moveq	r0, #0
   84f2e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84f32:	bf88      	it	hi
   84f34:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   84f38:	f63f aeaf 	bhi.w	84c9a <__aeabi_dmul+0xde>
   84f3c:	ebb5 0c03 	subs.w	ip, r5, r3
   84f40:	bf04      	itt	eq
   84f42:	ebb6 0c02 	subseq.w	ip, r6, r2
   84f46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   84f4a:	f150 0000 	adcs.w	r0, r0, #0
   84f4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84f52:	bd70      	pop	{r4, r5, r6, pc}
   84f54:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   84f58:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   84f5c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   84f60:	bfc2      	ittt	gt
   84f62:	ebd4 050c 	rsbsgt	r5, r4, ip
   84f66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84f6a:	bd70      	popgt	{r4, r5, r6, pc}
   84f6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84f70:	f04f 0e00 	mov.w	lr, #0
   84f74:	3c01      	subs	r4, #1
   84f76:	e690      	b.n	84c9a <__aeabi_dmul+0xde>
   84f78:	ea45 0e06 	orr.w	lr, r5, r6
   84f7c:	e68d      	b.n	84c9a <__aeabi_dmul+0xde>
   84f7e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84f82:	ea94 0f0c 	teq	r4, ip
   84f86:	bf08      	it	eq
   84f88:	ea95 0f0c 	teqeq	r5, ip
   84f8c:	f43f af3b 	beq.w	84e06 <__aeabi_dmul+0x24a>
   84f90:	ea94 0f0c 	teq	r4, ip
   84f94:	d10a      	bne.n	84fac <__aeabi_ddiv+0x19c>
   84f96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   84f9a:	f47f af34 	bne.w	84e06 <__aeabi_dmul+0x24a>
   84f9e:	ea95 0f0c 	teq	r5, ip
   84fa2:	f47f af25 	bne.w	84df0 <__aeabi_dmul+0x234>
   84fa6:	4610      	mov	r0, r2
   84fa8:	4619      	mov	r1, r3
   84faa:	e72c      	b.n	84e06 <__aeabi_dmul+0x24a>
   84fac:	ea95 0f0c 	teq	r5, ip
   84fb0:	d106      	bne.n	84fc0 <__aeabi_ddiv+0x1b0>
   84fb2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84fb6:	f43f aefd 	beq.w	84db4 <__aeabi_dmul+0x1f8>
   84fba:	4610      	mov	r0, r2
   84fbc:	4619      	mov	r1, r3
   84fbe:	e722      	b.n	84e06 <__aeabi_dmul+0x24a>
   84fc0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84fc4:	bf18      	it	ne
   84fc6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84fca:	f47f aec5 	bne.w	84d58 <__aeabi_dmul+0x19c>
   84fce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   84fd2:	f47f af0d 	bne.w	84df0 <__aeabi_dmul+0x234>
   84fd6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   84fda:	f47f aeeb 	bne.w	84db4 <__aeabi_dmul+0x1f8>
   84fde:	e712      	b.n	84e06 <__aeabi_dmul+0x24a>

00084fe0 <__aeabi_frsub>:
   84fe0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   84fe4:	e002      	b.n	84fec <__addsf3>
   84fe6:	bf00      	nop

00084fe8 <__aeabi_fsub>:
   84fe8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00084fec <__addsf3>:
   84fec:	0042      	lsls	r2, r0, #1
   84fee:	bf1f      	itttt	ne
   84ff0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   84ff4:	ea92 0f03 	teqne	r2, r3
   84ff8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   84ffc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   85000:	d06a      	beq.n	850d8 <__addsf3+0xec>
   85002:	ea4f 6212 	mov.w	r2, r2, lsr #24
   85006:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8500a:	bfc1      	itttt	gt
   8500c:	18d2      	addgt	r2, r2, r3
   8500e:	4041      	eorgt	r1, r0
   85010:	4048      	eorgt	r0, r1
   85012:	4041      	eorgt	r1, r0
   85014:	bfb8      	it	lt
   85016:	425b      	neglt	r3, r3
   85018:	2b19      	cmp	r3, #25
   8501a:	bf88      	it	hi
   8501c:	4770      	bxhi	lr
   8501e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   85022:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85026:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8502a:	bf18      	it	ne
   8502c:	4240      	negne	r0, r0
   8502e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85032:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   85036:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8503a:	bf18      	it	ne
   8503c:	4249      	negne	r1, r1
   8503e:	ea92 0f03 	teq	r2, r3
   85042:	d03f      	beq.n	850c4 <__addsf3+0xd8>
   85044:	f1a2 0201 	sub.w	r2, r2, #1
   85048:	fa41 fc03 	asr.w	ip, r1, r3
   8504c:	eb10 000c 	adds.w	r0, r0, ip
   85050:	f1c3 0320 	rsb	r3, r3, #32
   85054:	fa01 f103 	lsl.w	r1, r1, r3
   85058:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8505c:	d502      	bpl.n	85064 <__addsf3+0x78>
   8505e:	4249      	negs	r1, r1
   85060:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   85064:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   85068:	d313      	bcc.n	85092 <__addsf3+0xa6>
   8506a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8506e:	d306      	bcc.n	8507e <__addsf3+0x92>
   85070:	0840      	lsrs	r0, r0, #1
   85072:	ea4f 0131 	mov.w	r1, r1, rrx
   85076:	f102 0201 	add.w	r2, r2, #1
   8507a:	2afe      	cmp	r2, #254	; 0xfe
   8507c:	d251      	bcs.n	85122 <__addsf3+0x136>
   8507e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   85082:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85086:	bf08      	it	eq
   85088:	f020 0001 	biceq.w	r0, r0, #1
   8508c:	ea40 0003 	orr.w	r0, r0, r3
   85090:	4770      	bx	lr
   85092:	0049      	lsls	r1, r1, #1
   85094:	eb40 0000 	adc.w	r0, r0, r0
   85098:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   8509c:	f1a2 0201 	sub.w	r2, r2, #1
   850a0:	d1ed      	bne.n	8507e <__addsf3+0x92>
   850a2:	fab0 fc80 	clz	ip, r0
   850a6:	f1ac 0c08 	sub.w	ip, ip, #8
   850aa:	ebb2 020c 	subs.w	r2, r2, ip
   850ae:	fa00 f00c 	lsl.w	r0, r0, ip
   850b2:	bfaa      	itet	ge
   850b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   850b8:	4252      	neglt	r2, r2
   850ba:	4318      	orrge	r0, r3
   850bc:	bfbc      	itt	lt
   850be:	40d0      	lsrlt	r0, r2
   850c0:	4318      	orrlt	r0, r3
   850c2:	4770      	bx	lr
   850c4:	f092 0f00 	teq	r2, #0
   850c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   850cc:	bf06      	itte	eq
   850ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   850d2:	3201      	addeq	r2, #1
   850d4:	3b01      	subne	r3, #1
   850d6:	e7b5      	b.n	85044 <__addsf3+0x58>
   850d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   850dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   850e0:	bf18      	it	ne
   850e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   850e6:	d021      	beq.n	8512c <__addsf3+0x140>
   850e8:	ea92 0f03 	teq	r2, r3
   850ec:	d004      	beq.n	850f8 <__addsf3+0x10c>
   850ee:	f092 0f00 	teq	r2, #0
   850f2:	bf08      	it	eq
   850f4:	4608      	moveq	r0, r1
   850f6:	4770      	bx	lr
   850f8:	ea90 0f01 	teq	r0, r1
   850fc:	bf1c      	itt	ne
   850fe:	2000      	movne	r0, #0
   85100:	4770      	bxne	lr
   85102:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   85106:	d104      	bne.n	85112 <__addsf3+0x126>
   85108:	0040      	lsls	r0, r0, #1
   8510a:	bf28      	it	cs
   8510c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   85110:	4770      	bx	lr
   85112:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   85116:	bf3c      	itt	cc
   85118:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   8511c:	4770      	bxcc	lr
   8511e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   85122:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   85126:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8512a:	4770      	bx	lr
   8512c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   85130:	bf16      	itet	ne
   85132:	4608      	movne	r0, r1
   85134:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   85138:	4601      	movne	r1, r0
   8513a:	0242      	lsls	r2, r0, #9
   8513c:	bf06      	itte	eq
   8513e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   85142:	ea90 0f01 	teqeq	r0, r1
   85146:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8514a:	4770      	bx	lr

0008514c <__aeabi_ui2f>:
   8514c:	f04f 0300 	mov.w	r3, #0
   85150:	e004      	b.n	8515c <__aeabi_i2f+0x8>
   85152:	bf00      	nop

00085154 <__aeabi_i2f>:
   85154:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   85158:	bf48      	it	mi
   8515a:	4240      	negmi	r0, r0
   8515c:	ea5f 0c00 	movs.w	ip, r0
   85160:	bf08      	it	eq
   85162:	4770      	bxeq	lr
   85164:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   85168:	4601      	mov	r1, r0
   8516a:	f04f 0000 	mov.w	r0, #0
   8516e:	e01c      	b.n	851aa <__aeabi_l2f+0x2a>

00085170 <__aeabi_ul2f>:
   85170:	ea50 0201 	orrs.w	r2, r0, r1
   85174:	bf08      	it	eq
   85176:	4770      	bxeq	lr
   85178:	f04f 0300 	mov.w	r3, #0
   8517c:	e00a      	b.n	85194 <__aeabi_l2f+0x14>
   8517e:	bf00      	nop

00085180 <__aeabi_l2f>:
   85180:	ea50 0201 	orrs.w	r2, r0, r1
   85184:	bf08      	it	eq
   85186:	4770      	bxeq	lr
   85188:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   8518c:	d502      	bpl.n	85194 <__aeabi_l2f+0x14>
   8518e:	4240      	negs	r0, r0
   85190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85194:	ea5f 0c01 	movs.w	ip, r1
   85198:	bf02      	ittt	eq
   8519a:	4684      	moveq	ip, r0
   8519c:	4601      	moveq	r1, r0
   8519e:	2000      	moveq	r0, #0
   851a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   851a4:	bf08      	it	eq
   851a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   851aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   851ae:	fabc f28c 	clz	r2, ip
   851b2:	3a08      	subs	r2, #8
   851b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   851b8:	db10      	blt.n	851dc <__aeabi_l2f+0x5c>
   851ba:	fa01 fc02 	lsl.w	ip, r1, r2
   851be:	4463      	add	r3, ip
   851c0:	fa00 fc02 	lsl.w	ip, r0, r2
   851c4:	f1c2 0220 	rsb	r2, r2, #32
   851c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   851cc:	fa20 f202 	lsr.w	r2, r0, r2
   851d0:	eb43 0002 	adc.w	r0, r3, r2
   851d4:	bf08      	it	eq
   851d6:	f020 0001 	biceq.w	r0, r0, #1
   851da:	4770      	bx	lr
   851dc:	f102 0220 	add.w	r2, r2, #32
   851e0:	fa01 fc02 	lsl.w	ip, r1, r2
   851e4:	f1c2 0220 	rsb	r2, r2, #32
   851e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   851ec:	fa21 f202 	lsr.w	r2, r1, r2
   851f0:	eb43 0002 	adc.w	r0, r3, r2
   851f4:	bf08      	it	eq
   851f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   851fa:	4770      	bx	lr

000851fc <__aeabi_fmul>:
   851fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85200:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   85204:	bf1e      	ittt	ne
   85206:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8520a:	ea92 0f0c 	teqne	r2, ip
   8520e:	ea93 0f0c 	teqne	r3, ip
   85212:	d06f      	beq.n	852f4 <__aeabi_fmul+0xf8>
   85214:	441a      	add	r2, r3
   85216:	ea80 0c01 	eor.w	ip, r0, r1
   8521a:	0240      	lsls	r0, r0, #9
   8521c:	bf18      	it	ne
   8521e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   85222:	d01e      	beq.n	85262 <__aeabi_fmul+0x66>
   85224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   85228:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   8522c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   85230:	fba0 3101 	umull	r3, r1, r0, r1
   85234:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   85238:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   8523c:	bf3e      	ittt	cc
   8523e:	0049      	lslcc	r1, r1, #1
   85240:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   85244:	005b      	lslcc	r3, r3, #1
   85246:	ea40 0001 	orr.w	r0, r0, r1
   8524a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   8524e:	2afd      	cmp	r2, #253	; 0xfd
   85250:	d81d      	bhi.n	8528e <__aeabi_fmul+0x92>
   85252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   85256:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8525a:	bf08      	it	eq
   8525c:	f020 0001 	biceq.w	r0, r0, #1
   85260:	4770      	bx	lr
   85262:	f090 0f00 	teq	r0, #0
   85266:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8526a:	bf08      	it	eq
   8526c:	0249      	lsleq	r1, r1, #9
   8526e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   85272:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   85276:	3a7f      	subs	r2, #127	; 0x7f
   85278:	bfc2      	ittt	gt
   8527a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8527e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   85282:	4770      	bxgt	lr
   85284:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85288:	f04f 0300 	mov.w	r3, #0
   8528c:	3a01      	subs	r2, #1
   8528e:	dc5d      	bgt.n	8534c <__aeabi_fmul+0x150>
   85290:	f112 0f19 	cmn.w	r2, #25
   85294:	bfdc      	itt	le
   85296:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8529a:	4770      	bxle	lr
   8529c:	f1c2 0200 	rsb	r2, r2, #0
   852a0:	0041      	lsls	r1, r0, #1
   852a2:	fa21 f102 	lsr.w	r1, r1, r2
   852a6:	f1c2 0220 	rsb	r2, r2, #32
   852aa:	fa00 fc02 	lsl.w	ip, r0, r2
   852ae:	ea5f 0031 	movs.w	r0, r1, rrx
   852b2:	f140 0000 	adc.w	r0, r0, #0
   852b6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   852ba:	bf08      	it	eq
   852bc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   852c0:	4770      	bx	lr
   852c2:	f092 0f00 	teq	r2, #0
   852c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   852ca:	bf02      	ittt	eq
   852cc:	0040      	lsleq	r0, r0, #1
   852ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   852d2:	3a01      	subeq	r2, #1
   852d4:	d0f9      	beq.n	852ca <__aeabi_fmul+0xce>
   852d6:	ea40 000c 	orr.w	r0, r0, ip
   852da:	f093 0f00 	teq	r3, #0
   852de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   852e2:	bf02      	ittt	eq
   852e4:	0049      	lsleq	r1, r1, #1
   852e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   852ea:	3b01      	subeq	r3, #1
   852ec:	d0f9      	beq.n	852e2 <__aeabi_fmul+0xe6>
   852ee:	ea41 010c 	orr.w	r1, r1, ip
   852f2:	e78f      	b.n	85214 <__aeabi_fmul+0x18>
   852f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   852f8:	ea92 0f0c 	teq	r2, ip
   852fc:	bf18      	it	ne
   852fe:	ea93 0f0c 	teqne	r3, ip
   85302:	d00a      	beq.n	8531a <__aeabi_fmul+0x11e>
   85304:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   85308:	bf18      	it	ne
   8530a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8530e:	d1d8      	bne.n	852c2 <__aeabi_fmul+0xc6>
   85310:	ea80 0001 	eor.w	r0, r0, r1
   85314:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   85318:	4770      	bx	lr
   8531a:	f090 0f00 	teq	r0, #0
   8531e:	bf17      	itett	ne
   85320:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   85324:	4608      	moveq	r0, r1
   85326:	f091 0f00 	teqne	r1, #0
   8532a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   8532e:	d014      	beq.n	8535a <__aeabi_fmul+0x15e>
   85330:	ea92 0f0c 	teq	r2, ip
   85334:	d101      	bne.n	8533a <__aeabi_fmul+0x13e>
   85336:	0242      	lsls	r2, r0, #9
   85338:	d10f      	bne.n	8535a <__aeabi_fmul+0x15e>
   8533a:	ea93 0f0c 	teq	r3, ip
   8533e:	d103      	bne.n	85348 <__aeabi_fmul+0x14c>
   85340:	024b      	lsls	r3, r1, #9
   85342:	bf18      	it	ne
   85344:	4608      	movne	r0, r1
   85346:	d108      	bne.n	8535a <__aeabi_fmul+0x15e>
   85348:	ea80 0001 	eor.w	r0, r0, r1
   8534c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   85350:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   85354:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85358:	4770      	bx	lr
   8535a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8535e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   85362:	4770      	bx	lr

00085364 <__aeabi_fdiv>:
   85364:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85368:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8536c:	bf1e      	ittt	ne
   8536e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   85372:	ea92 0f0c 	teqne	r2, ip
   85376:	ea93 0f0c 	teqne	r3, ip
   8537a:	d069      	beq.n	85450 <__aeabi_fdiv+0xec>
   8537c:	eba2 0203 	sub.w	r2, r2, r3
   85380:	ea80 0c01 	eor.w	ip, r0, r1
   85384:	0249      	lsls	r1, r1, #9
   85386:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8538a:	d037      	beq.n	853fc <__aeabi_fdiv+0x98>
   8538c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   85390:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   85394:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   85398:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8539c:	428b      	cmp	r3, r1
   8539e:	bf38      	it	cc
   853a0:	005b      	lslcc	r3, r3, #1
   853a2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   853a6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   853aa:	428b      	cmp	r3, r1
   853ac:	bf24      	itt	cs
   853ae:	1a5b      	subcs	r3, r3, r1
   853b0:	ea40 000c 	orrcs.w	r0, r0, ip
   853b4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   853b8:	bf24      	itt	cs
   853ba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   853be:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   853c2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   853c6:	bf24      	itt	cs
   853c8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   853cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   853d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   853d4:	bf24      	itt	cs
   853d6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   853da:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   853de:	011b      	lsls	r3, r3, #4
   853e0:	bf18      	it	ne
   853e2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   853e6:	d1e0      	bne.n	853aa <__aeabi_fdiv+0x46>
   853e8:	2afd      	cmp	r2, #253	; 0xfd
   853ea:	f63f af50 	bhi.w	8528e <__aeabi_fmul+0x92>
   853ee:	428b      	cmp	r3, r1
   853f0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   853f4:	bf08      	it	eq
   853f6:	f020 0001 	biceq.w	r0, r0, #1
   853fa:	4770      	bx	lr
   853fc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   85400:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   85404:	327f      	adds	r2, #127	; 0x7f
   85406:	bfc2      	ittt	gt
   85408:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8540c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   85410:	4770      	bxgt	lr
   85412:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85416:	f04f 0300 	mov.w	r3, #0
   8541a:	3a01      	subs	r2, #1
   8541c:	e737      	b.n	8528e <__aeabi_fmul+0x92>
   8541e:	f092 0f00 	teq	r2, #0
   85422:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   85426:	bf02      	ittt	eq
   85428:	0040      	lsleq	r0, r0, #1
   8542a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8542e:	3a01      	subeq	r2, #1
   85430:	d0f9      	beq.n	85426 <__aeabi_fdiv+0xc2>
   85432:	ea40 000c 	orr.w	r0, r0, ip
   85436:	f093 0f00 	teq	r3, #0
   8543a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8543e:	bf02      	ittt	eq
   85440:	0049      	lsleq	r1, r1, #1
   85442:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   85446:	3b01      	subeq	r3, #1
   85448:	d0f9      	beq.n	8543e <__aeabi_fdiv+0xda>
   8544a:	ea41 010c 	orr.w	r1, r1, ip
   8544e:	e795      	b.n	8537c <__aeabi_fdiv+0x18>
   85450:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   85454:	ea92 0f0c 	teq	r2, ip
   85458:	d108      	bne.n	8546c <__aeabi_fdiv+0x108>
   8545a:	0242      	lsls	r2, r0, #9
   8545c:	f47f af7d 	bne.w	8535a <__aeabi_fmul+0x15e>
   85460:	ea93 0f0c 	teq	r3, ip
   85464:	f47f af70 	bne.w	85348 <__aeabi_fmul+0x14c>
   85468:	4608      	mov	r0, r1
   8546a:	e776      	b.n	8535a <__aeabi_fmul+0x15e>
   8546c:	ea93 0f0c 	teq	r3, ip
   85470:	d104      	bne.n	8547c <__aeabi_fdiv+0x118>
   85472:	024b      	lsls	r3, r1, #9
   85474:	f43f af4c 	beq.w	85310 <__aeabi_fmul+0x114>
   85478:	4608      	mov	r0, r1
   8547a:	e76e      	b.n	8535a <__aeabi_fmul+0x15e>
   8547c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   85480:	bf18      	it	ne
   85482:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   85486:	d1ca      	bne.n	8541e <__aeabi_fdiv+0xba>
   85488:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   8548c:	f47f af5c 	bne.w	85348 <__aeabi_fmul+0x14c>
   85490:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   85494:	f47f af3c 	bne.w	85310 <__aeabi_fmul+0x114>
   85498:	e75f      	b.n	8535a <__aeabi_fmul+0x15e>
   8549a:	bf00      	nop

0008549c <__gesf2>:
   8549c:	f04f 3cff 	mov.w	ip, #4294967295
   854a0:	e006      	b.n	854b0 <__cmpsf2+0x4>
   854a2:	bf00      	nop

000854a4 <__lesf2>:
   854a4:	f04f 0c01 	mov.w	ip, #1
   854a8:	e002      	b.n	854b0 <__cmpsf2+0x4>
   854aa:	bf00      	nop

000854ac <__cmpsf2>:
   854ac:	f04f 0c01 	mov.w	ip, #1
   854b0:	f84d cd04 	str.w	ip, [sp, #-4]!
   854b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   854b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   854bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   854c0:	bf18      	it	ne
   854c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   854c6:	d011      	beq.n	854ec <__cmpsf2+0x40>
   854c8:	b001      	add	sp, #4
   854ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   854ce:	bf18      	it	ne
   854d0:	ea90 0f01 	teqne	r0, r1
   854d4:	bf58      	it	pl
   854d6:	ebb2 0003 	subspl.w	r0, r2, r3
   854da:	bf88      	it	hi
   854dc:	17c8      	asrhi	r0, r1, #31
   854de:	bf38      	it	cc
   854e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   854e4:	bf18      	it	ne
   854e6:	f040 0001 	orrne.w	r0, r0, #1
   854ea:	4770      	bx	lr
   854ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   854f0:	d102      	bne.n	854f8 <__cmpsf2+0x4c>
   854f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   854f6:	d105      	bne.n	85504 <__cmpsf2+0x58>
   854f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   854fc:	d1e4      	bne.n	854c8 <__cmpsf2+0x1c>
   854fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   85502:	d0e1      	beq.n	854c8 <__cmpsf2+0x1c>
   85504:	f85d 0b04 	ldr.w	r0, [sp], #4
   85508:	4770      	bx	lr
   8550a:	bf00      	nop

0008550c <__aeabi_cfrcmple>:
   8550c:	4684      	mov	ip, r0
   8550e:	4608      	mov	r0, r1
   85510:	4661      	mov	r1, ip
   85512:	e7ff      	b.n	85514 <__aeabi_cfcmpeq>

00085514 <__aeabi_cfcmpeq>:
   85514:	b50f      	push	{r0, r1, r2, r3, lr}
   85516:	f7ff ffc9 	bl	854ac <__cmpsf2>
   8551a:	2800      	cmp	r0, #0
   8551c:	bf48      	it	mi
   8551e:	f110 0f00 	cmnmi.w	r0, #0
   85522:	bd0f      	pop	{r0, r1, r2, r3, pc}

00085524 <__aeabi_fcmpeq>:
   85524:	f84d ed08 	str.w	lr, [sp, #-8]!
   85528:	f7ff fff4 	bl	85514 <__aeabi_cfcmpeq>
   8552c:	bf0c      	ite	eq
   8552e:	2001      	moveq	r0, #1
   85530:	2000      	movne	r0, #0
   85532:	f85d fb08 	ldr.w	pc, [sp], #8
   85536:	bf00      	nop

00085538 <__aeabi_fcmplt>:
   85538:	f84d ed08 	str.w	lr, [sp, #-8]!
   8553c:	f7ff ffea 	bl	85514 <__aeabi_cfcmpeq>
   85540:	bf34      	ite	cc
   85542:	2001      	movcc	r0, #1
   85544:	2000      	movcs	r0, #0
   85546:	f85d fb08 	ldr.w	pc, [sp], #8
   8554a:	bf00      	nop

0008554c <__aeabi_fcmple>:
   8554c:	f84d ed08 	str.w	lr, [sp, #-8]!
   85550:	f7ff ffe0 	bl	85514 <__aeabi_cfcmpeq>
   85554:	bf94      	ite	ls
   85556:	2001      	movls	r0, #1
   85558:	2000      	movhi	r0, #0
   8555a:	f85d fb08 	ldr.w	pc, [sp], #8
   8555e:	bf00      	nop

00085560 <__aeabi_fcmpge>:
   85560:	f84d ed08 	str.w	lr, [sp, #-8]!
   85564:	f7ff ffd2 	bl	8550c <__aeabi_cfrcmple>
   85568:	bf94      	ite	ls
   8556a:	2001      	movls	r0, #1
   8556c:	2000      	movhi	r0, #0
   8556e:	f85d fb08 	ldr.w	pc, [sp], #8
   85572:	bf00      	nop

00085574 <__aeabi_fcmpgt>:
   85574:	f84d ed08 	str.w	lr, [sp, #-8]!
   85578:	f7ff ffc8 	bl	8550c <__aeabi_cfrcmple>
   8557c:	bf34      	ite	cc
   8557e:	2001      	movcc	r0, #1
   85580:	2000      	movcs	r0, #0
   85582:	f85d fb08 	ldr.w	pc, [sp], #8
   85586:	bf00      	nop

00085588 <__aeabi_f2iz>:
   85588:	ea4f 0240 	mov.w	r2, r0, lsl #1
   8558c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   85590:	d30f      	bcc.n	855b2 <__aeabi_f2iz+0x2a>
   85592:	f04f 039e 	mov.w	r3, #158	; 0x9e
   85596:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   8559a:	d90d      	bls.n	855b8 <__aeabi_f2iz+0x30>
   8559c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   855a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   855a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   855a8:	fa23 f002 	lsr.w	r0, r3, r2
   855ac:	bf18      	it	ne
   855ae:	4240      	negne	r0, r0
   855b0:	4770      	bx	lr
   855b2:	f04f 0000 	mov.w	r0, #0
   855b6:	4770      	bx	lr
   855b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   855bc:	d101      	bne.n	855c2 <__aeabi_f2iz+0x3a>
   855be:	0242      	lsls	r2, r0, #9
   855c0:	d105      	bne.n	855ce <__aeabi_f2iz+0x46>
   855c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   855c6:	bf08      	it	eq
   855c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   855cc:	4770      	bx	lr
   855ce:	f04f 0000 	mov.w	r0, #0
   855d2:	4770      	bx	lr

000855d4 <__libc_init_array>:
   855d4:	b570      	push	{r4, r5, r6, lr}
   855d6:	4e0f      	ldr	r6, [pc, #60]	; (85614 <__libc_init_array+0x40>)
   855d8:	4d0f      	ldr	r5, [pc, #60]	; (85618 <__libc_init_array+0x44>)
   855da:	1b76      	subs	r6, r6, r5
   855dc:	10b6      	asrs	r6, r6, #2
   855de:	bf18      	it	ne
   855e0:	2400      	movne	r4, #0
   855e2:	d005      	beq.n	855f0 <__libc_init_array+0x1c>
   855e4:	3401      	adds	r4, #1
   855e6:	f855 3b04 	ldr.w	r3, [r5], #4
   855ea:	4798      	blx	r3
   855ec:	42a6      	cmp	r6, r4
   855ee:	d1f9      	bne.n	855e4 <__libc_init_array+0x10>
   855f0:	4e0a      	ldr	r6, [pc, #40]	; (8561c <__libc_init_array+0x48>)
   855f2:	4d0b      	ldr	r5, [pc, #44]	; (85620 <__libc_init_array+0x4c>)
   855f4:	f004 fa84 	bl	89b00 <_init>
   855f8:	1b76      	subs	r6, r6, r5
   855fa:	10b6      	asrs	r6, r6, #2
   855fc:	bf18      	it	ne
   855fe:	2400      	movne	r4, #0
   85600:	d006      	beq.n	85610 <__libc_init_array+0x3c>
   85602:	3401      	adds	r4, #1
   85604:	f855 3b04 	ldr.w	r3, [r5], #4
   85608:	4798      	blx	r3
   8560a:	42a6      	cmp	r6, r4
   8560c:	d1f9      	bne.n	85602 <__libc_init_array+0x2e>
   8560e:	bd70      	pop	{r4, r5, r6, pc}
   85610:	bd70      	pop	{r4, r5, r6, pc}
   85612:	bf00      	nop
   85614:	00089b0c 	.word	0x00089b0c
   85618:	00089b0c 	.word	0x00089b0c
   8561c:	00089b14 	.word	0x00089b14
   85620:	00089b0c 	.word	0x00089b0c

00085624 <memcpy>:
   85624:	4684      	mov	ip, r0
   85626:	ea41 0300 	orr.w	r3, r1, r0
   8562a:	f013 0303 	ands.w	r3, r3, #3
   8562e:	d149      	bne.n	856c4 <memcpy+0xa0>
   85630:	3a40      	subs	r2, #64	; 0x40
   85632:	d323      	bcc.n	8567c <memcpy+0x58>
   85634:	680b      	ldr	r3, [r1, #0]
   85636:	6003      	str	r3, [r0, #0]
   85638:	684b      	ldr	r3, [r1, #4]
   8563a:	6043      	str	r3, [r0, #4]
   8563c:	688b      	ldr	r3, [r1, #8]
   8563e:	6083      	str	r3, [r0, #8]
   85640:	68cb      	ldr	r3, [r1, #12]
   85642:	60c3      	str	r3, [r0, #12]
   85644:	690b      	ldr	r3, [r1, #16]
   85646:	6103      	str	r3, [r0, #16]
   85648:	694b      	ldr	r3, [r1, #20]
   8564a:	6143      	str	r3, [r0, #20]
   8564c:	698b      	ldr	r3, [r1, #24]
   8564e:	6183      	str	r3, [r0, #24]
   85650:	69cb      	ldr	r3, [r1, #28]
   85652:	61c3      	str	r3, [r0, #28]
   85654:	6a0b      	ldr	r3, [r1, #32]
   85656:	6203      	str	r3, [r0, #32]
   85658:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8565a:	6243      	str	r3, [r0, #36]	; 0x24
   8565c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8565e:	6283      	str	r3, [r0, #40]	; 0x28
   85660:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85662:	62c3      	str	r3, [r0, #44]	; 0x2c
   85664:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85666:	6303      	str	r3, [r0, #48]	; 0x30
   85668:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8566a:	6343      	str	r3, [r0, #52]	; 0x34
   8566c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8566e:	6383      	str	r3, [r0, #56]	; 0x38
   85670:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85672:	63c3      	str	r3, [r0, #60]	; 0x3c
   85674:	3040      	adds	r0, #64	; 0x40
   85676:	3140      	adds	r1, #64	; 0x40
   85678:	3a40      	subs	r2, #64	; 0x40
   8567a:	d2db      	bcs.n	85634 <memcpy+0x10>
   8567c:	3230      	adds	r2, #48	; 0x30
   8567e:	d30b      	bcc.n	85698 <memcpy+0x74>
   85680:	680b      	ldr	r3, [r1, #0]
   85682:	6003      	str	r3, [r0, #0]
   85684:	684b      	ldr	r3, [r1, #4]
   85686:	6043      	str	r3, [r0, #4]
   85688:	688b      	ldr	r3, [r1, #8]
   8568a:	6083      	str	r3, [r0, #8]
   8568c:	68cb      	ldr	r3, [r1, #12]
   8568e:	60c3      	str	r3, [r0, #12]
   85690:	3010      	adds	r0, #16
   85692:	3110      	adds	r1, #16
   85694:	3a10      	subs	r2, #16
   85696:	d2f3      	bcs.n	85680 <memcpy+0x5c>
   85698:	320c      	adds	r2, #12
   8569a:	d305      	bcc.n	856a8 <memcpy+0x84>
   8569c:	f851 3b04 	ldr.w	r3, [r1], #4
   856a0:	f840 3b04 	str.w	r3, [r0], #4
   856a4:	3a04      	subs	r2, #4
   856a6:	d2f9      	bcs.n	8569c <memcpy+0x78>
   856a8:	3204      	adds	r2, #4
   856aa:	d008      	beq.n	856be <memcpy+0x9a>
   856ac:	07d2      	lsls	r2, r2, #31
   856ae:	bf1c      	itt	ne
   856b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   856b4:	f800 3b01 	strbne.w	r3, [r0], #1
   856b8:	d301      	bcc.n	856be <memcpy+0x9a>
   856ba:	880b      	ldrh	r3, [r1, #0]
   856bc:	8003      	strh	r3, [r0, #0]
   856be:	4660      	mov	r0, ip
   856c0:	4770      	bx	lr
   856c2:	bf00      	nop
   856c4:	2a08      	cmp	r2, #8
   856c6:	d313      	bcc.n	856f0 <memcpy+0xcc>
   856c8:	078b      	lsls	r3, r1, #30
   856ca:	d0b1      	beq.n	85630 <memcpy+0xc>
   856cc:	f010 0303 	ands.w	r3, r0, #3
   856d0:	d0ae      	beq.n	85630 <memcpy+0xc>
   856d2:	f1c3 0304 	rsb	r3, r3, #4
   856d6:	1ad2      	subs	r2, r2, r3
   856d8:	07db      	lsls	r3, r3, #31
   856da:	bf1c      	itt	ne
   856dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   856e0:	f800 3b01 	strbne.w	r3, [r0], #1
   856e4:	d3a4      	bcc.n	85630 <memcpy+0xc>
   856e6:	f831 3b02 	ldrh.w	r3, [r1], #2
   856ea:	f820 3b02 	strh.w	r3, [r0], #2
   856ee:	e79f      	b.n	85630 <memcpy+0xc>
   856f0:	3a04      	subs	r2, #4
   856f2:	d3d9      	bcc.n	856a8 <memcpy+0x84>
   856f4:	3a01      	subs	r2, #1
   856f6:	f811 3b01 	ldrb.w	r3, [r1], #1
   856fa:	f800 3b01 	strb.w	r3, [r0], #1
   856fe:	d2f9      	bcs.n	856f4 <memcpy+0xd0>
   85700:	780b      	ldrb	r3, [r1, #0]
   85702:	7003      	strb	r3, [r0, #0]
   85704:	784b      	ldrb	r3, [r1, #1]
   85706:	7043      	strb	r3, [r0, #1]
   85708:	788b      	ldrb	r3, [r1, #2]
   8570a:	7083      	strb	r3, [r0, #2]
   8570c:	4660      	mov	r0, ip
   8570e:	4770      	bx	lr

00085710 <memset>:
   85710:	b470      	push	{r4, r5, r6}
   85712:	0786      	lsls	r6, r0, #30
   85714:	d046      	beq.n	857a4 <memset+0x94>
   85716:	1e54      	subs	r4, r2, #1
   85718:	2a00      	cmp	r2, #0
   8571a:	d041      	beq.n	857a0 <memset+0x90>
   8571c:	b2ca      	uxtb	r2, r1
   8571e:	4603      	mov	r3, r0
   85720:	e002      	b.n	85728 <memset+0x18>
   85722:	f114 34ff 	adds.w	r4, r4, #4294967295
   85726:	d33b      	bcc.n	857a0 <memset+0x90>
   85728:	f803 2b01 	strb.w	r2, [r3], #1
   8572c:	079d      	lsls	r5, r3, #30
   8572e:	d1f8      	bne.n	85722 <memset+0x12>
   85730:	2c03      	cmp	r4, #3
   85732:	d92e      	bls.n	85792 <memset+0x82>
   85734:	b2cd      	uxtb	r5, r1
   85736:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8573a:	2c0f      	cmp	r4, #15
   8573c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85740:	d919      	bls.n	85776 <memset+0x66>
   85742:	4626      	mov	r6, r4
   85744:	f103 0210 	add.w	r2, r3, #16
   85748:	3e10      	subs	r6, #16
   8574a:	2e0f      	cmp	r6, #15
   8574c:	f842 5c10 	str.w	r5, [r2, #-16]
   85750:	f842 5c0c 	str.w	r5, [r2, #-12]
   85754:	f842 5c08 	str.w	r5, [r2, #-8]
   85758:	f842 5c04 	str.w	r5, [r2, #-4]
   8575c:	f102 0210 	add.w	r2, r2, #16
   85760:	d8f2      	bhi.n	85748 <memset+0x38>
   85762:	f1a4 0210 	sub.w	r2, r4, #16
   85766:	f022 020f 	bic.w	r2, r2, #15
   8576a:	f004 040f 	and.w	r4, r4, #15
   8576e:	3210      	adds	r2, #16
   85770:	2c03      	cmp	r4, #3
   85772:	4413      	add	r3, r2
   85774:	d90d      	bls.n	85792 <memset+0x82>
   85776:	461e      	mov	r6, r3
   85778:	4622      	mov	r2, r4
   8577a:	3a04      	subs	r2, #4
   8577c:	2a03      	cmp	r2, #3
   8577e:	f846 5b04 	str.w	r5, [r6], #4
   85782:	d8fa      	bhi.n	8577a <memset+0x6a>
   85784:	1f22      	subs	r2, r4, #4
   85786:	f022 0203 	bic.w	r2, r2, #3
   8578a:	3204      	adds	r2, #4
   8578c:	4413      	add	r3, r2
   8578e:	f004 0403 	and.w	r4, r4, #3
   85792:	b12c      	cbz	r4, 857a0 <memset+0x90>
   85794:	b2c9      	uxtb	r1, r1
   85796:	441c      	add	r4, r3
   85798:	f803 1b01 	strb.w	r1, [r3], #1
   8579c:	429c      	cmp	r4, r3
   8579e:	d1fb      	bne.n	85798 <memset+0x88>
   857a0:	bc70      	pop	{r4, r5, r6}
   857a2:	4770      	bx	lr
   857a4:	4614      	mov	r4, r2
   857a6:	4603      	mov	r3, r0
   857a8:	e7c2      	b.n	85730 <memset+0x20>
   857aa:	bf00      	nop

000857ac <sprintf>:
   857ac:	b40e      	push	{r1, r2, r3}
   857ae:	4601      	mov	r1, r0
   857b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   857b2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   857b6:	f44f 7702 	mov.w	r7, #520	; 0x208
   857ba:	f64f 76ff 	movw	r6, #65535	; 0xffff
   857be:	b09c      	sub	sp, #112	; 0x70
   857c0:	ac21      	add	r4, sp, #132	; 0x84
   857c2:	f854 2b04 	ldr.w	r2, [r4], #4
   857c6:	4b0b      	ldr	r3, [pc, #44]	; (857f4 <sprintf+0x48>)
   857c8:	9102      	str	r1, [sp, #8]
   857ca:	9106      	str	r1, [sp, #24]
   857cc:	6818      	ldr	r0, [r3, #0]
   857ce:	a902      	add	r1, sp, #8
   857d0:	4623      	mov	r3, r4
   857d2:	9401      	str	r4, [sp, #4]
   857d4:	f8ad 7014 	strh.w	r7, [sp, #20]
   857d8:	9504      	str	r5, [sp, #16]
   857da:	9507      	str	r5, [sp, #28]
   857dc:	f8ad 6016 	strh.w	r6, [sp, #22]
   857e0:	f000 f838 	bl	85854 <_svfprintf_r>
   857e4:	2200      	movs	r2, #0
   857e6:	9b02      	ldr	r3, [sp, #8]
   857e8:	701a      	strb	r2, [r3, #0]
   857ea:	b01c      	add	sp, #112	; 0x70
   857ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   857f0:	b003      	add	sp, #12
   857f2:	4770      	bx	lr
   857f4:	200701a4 	.word	0x200701a4

000857f8 <strlen>:
   857f8:	f020 0103 	bic.w	r1, r0, #3
   857fc:	f010 0003 	ands.w	r0, r0, #3
   85800:	f1c0 0000 	rsb	r0, r0, #0
   85804:	f851 3b04 	ldr.w	r3, [r1], #4
   85808:	f100 0c04 	add.w	ip, r0, #4
   8580c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   85810:	f06f 0200 	mvn.w	r2, #0
   85814:	bf1c      	itt	ne
   85816:	fa22 f20c 	lsrne.w	r2, r2, ip
   8581a:	4313      	orrne	r3, r2
   8581c:	f04f 0c01 	mov.w	ip, #1
   85820:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   85824:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   85828:	eba3 020c 	sub.w	r2, r3, ip
   8582c:	ea22 0203 	bic.w	r2, r2, r3
   85830:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   85834:	bf04      	itt	eq
   85836:	f851 3b04 	ldreq.w	r3, [r1], #4
   8583a:	3004      	addeq	r0, #4
   8583c:	d0f4      	beq.n	85828 <strlen+0x30>
   8583e:	f1c2 0100 	rsb	r1, r2, #0
   85842:	ea02 0201 	and.w	r2, r2, r1
   85846:	fab2 f282 	clz	r2, r2
   8584a:	f1c2 021f 	rsb	r2, r2, #31
   8584e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   85852:	4770      	bx	lr

00085854 <_svfprintf_r>:
   85854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85858:	b0c3      	sub	sp, #268	; 0x10c
   8585a:	460c      	mov	r4, r1
   8585c:	910b      	str	r1, [sp, #44]	; 0x2c
   8585e:	4692      	mov	sl, r2
   85860:	930f      	str	r3, [sp, #60]	; 0x3c
   85862:	900c      	str	r0, [sp, #48]	; 0x30
   85864:	f002 fa58 	bl	87d18 <_localeconv_r>
   85868:	6803      	ldr	r3, [r0, #0]
   8586a:	4618      	mov	r0, r3
   8586c:	931a      	str	r3, [sp, #104]	; 0x68
   8586e:	f7ff ffc3 	bl	857f8 <strlen>
   85872:	89a3      	ldrh	r3, [r4, #12]
   85874:	9019      	str	r0, [sp, #100]	; 0x64
   85876:	0619      	lsls	r1, r3, #24
   85878:	d503      	bpl.n	85882 <_svfprintf_r+0x2e>
   8587a:	6923      	ldr	r3, [r4, #16]
   8587c:	2b00      	cmp	r3, #0
   8587e:	f001 8035 	beq.w	868ec <_svfprintf_r+0x1098>
   85882:	2300      	movs	r3, #0
   85884:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   85888:	46c8      	mov	r8, r9
   8588a:	9315      	str	r3, [sp, #84]	; 0x54
   8588c:	9313      	str	r3, [sp, #76]	; 0x4c
   8588e:	9314      	str	r3, [sp, #80]	; 0x50
   85890:	9318      	str	r3, [sp, #96]	; 0x60
   85892:	931b      	str	r3, [sp, #108]	; 0x6c
   85894:	9309      	str	r3, [sp, #36]	; 0x24
   85896:	9316      	str	r3, [sp, #88]	; 0x58
   85898:	9317      	str	r3, [sp, #92]	; 0x5c
   8589a:	9327      	str	r3, [sp, #156]	; 0x9c
   8589c:	9326      	str	r3, [sp, #152]	; 0x98
   8589e:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   858a2:	f89a 3000 	ldrb.w	r3, [sl]
   858a6:	4654      	mov	r4, sl
   858a8:	b1eb      	cbz	r3, 858e6 <_svfprintf_r+0x92>
   858aa:	2b25      	cmp	r3, #37	; 0x25
   858ac:	d102      	bne.n	858b4 <_svfprintf_r+0x60>
   858ae:	e01a      	b.n	858e6 <_svfprintf_r+0x92>
   858b0:	2b25      	cmp	r3, #37	; 0x25
   858b2:	d003      	beq.n	858bc <_svfprintf_r+0x68>
   858b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   858b8:	2b00      	cmp	r3, #0
   858ba:	d1f9      	bne.n	858b0 <_svfprintf_r+0x5c>
   858bc:	eba4 050a 	sub.w	r5, r4, sl
   858c0:	b18d      	cbz	r5, 858e6 <_svfprintf_r+0x92>
   858c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   858c4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   858c6:	3301      	adds	r3, #1
   858c8:	442a      	add	r2, r5
   858ca:	2b07      	cmp	r3, #7
   858cc:	f8c8 a000 	str.w	sl, [r8]
   858d0:	f8c8 5004 	str.w	r5, [r8, #4]
   858d4:	9227      	str	r2, [sp, #156]	; 0x9c
   858d6:	9326      	str	r3, [sp, #152]	; 0x98
   858d8:	f300 808a 	bgt.w	859f0 <_svfprintf_r+0x19c>
   858dc:	f108 0808 	add.w	r8, r8, #8
   858e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   858e2:	442b      	add	r3, r5
   858e4:	9309      	str	r3, [sp, #36]	; 0x24
   858e6:	7823      	ldrb	r3, [r4, #0]
   858e8:	2b00      	cmp	r3, #0
   858ea:	f000 8089 	beq.w	85a00 <_svfprintf_r+0x1ac>
   858ee:	2300      	movs	r3, #0
   858f0:	f04f 30ff 	mov.w	r0, #4294967295
   858f4:	461a      	mov	r2, r3
   858f6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   858fa:	4619      	mov	r1, r3
   858fc:	930d      	str	r3, [sp, #52]	; 0x34
   858fe:	469b      	mov	fp, r3
   85900:	7863      	ldrb	r3, [r4, #1]
   85902:	f104 0a01 	add.w	sl, r4, #1
   85906:	900a      	str	r0, [sp, #40]	; 0x28
   85908:	f10a 0a01 	add.w	sl, sl, #1
   8590c:	f1a3 0020 	sub.w	r0, r3, #32
   85910:	2858      	cmp	r0, #88	; 0x58
   85912:	f200 83b7 	bhi.w	86084 <_svfprintf_r+0x830>
   85916:	e8df f010 	tbh	[pc, r0, lsl #1]
   8591a:	034c      	.short	0x034c
   8591c:	03b503b5 	.word	0x03b503b5
   85920:	03b50354 	.word	0x03b50354
   85924:	03b503b5 	.word	0x03b503b5
   85928:	03b503b5 	.word	0x03b503b5
   8592c:	005903b5 	.word	0x005903b5
   85930:	03b50359 	.word	0x03b50359
   85934:	02140066 	.word	0x02140066
   85938:	022f03b5 	.word	0x022f03b5
   8593c:	03a503a5 	.word	0x03a503a5
   85940:	03a503a5 	.word	0x03a503a5
   85944:	03a503a5 	.word	0x03a503a5
   85948:	03a503a5 	.word	0x03a503a5
   8594c:	03b503a5 	.word	0x03b503a5
   85950:	03b503b5 	.word	0x03b503b5
   85954:	03b503b5 	.word	0x03b503b5
   85958:	03b503b5 	.word	0x03b503b5
   8595c:	03b503b5 	.word	0x03b503b5
   85960:	028b03b5 	.word	0x028b03b5
   85964:	03b502d3 	.word	0x03b502d3
   85968:	03b502d3 	.word	0x03b502d3
   8596c:	03b503b5 	.word	0x03b503b5
   85970:	031b03b5 	.word	0x031b03b5
   85974:	03b503b5 	.word	0x03b503b5
   85978:	03b50320 	.word	0x03b50320
   8597c:	03b503b5 	.word	0x03b503b5
   85980:	03b503b5 	.word	0x03b503b5
   85984:	03b50234 	.word	0x03b50234
   85988:	024b03b5 	.word	0x024b03b5
   8598c:	03b503b5 	.word	0x03b503b5
   85990:	03b503b5 	.word	0x03b503b5
   85994:	03b503b5 	.word	0x03b503b5
   85998:	03b503b5 	.word	0x03b503b5
   8599c:	03b503b5 	.word	0x03b503b5
   859a0:	039e0276 	.word	0x039e0276
   859a4:	02d302d3 	.word	0x02d302d3
   859a8:	036302d3 	.word	0x036302d3
   859ac:	03b5039e 	.word	0x03b5039e
   859b0:	036803b5 	.word	0x036803b5
   859b4:	037503b5 	.word	0x037503b5
   859b8:	038c01dd 	.word	0x038c01dd
   859bc:	03b5035e 	.word	0x03b5035e
   859c0:	03b501f2 	.word	0x03b501f2
   859c4:	03b50087 	.word	0x03b50087
   859c8:	033203b5 	.word	0x033203b5
   859cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   859ce:	6823      	ldr	r3, [r4, #0]
   859d0:	4618      	mov	r0, r3
   859d2:	930d      	str	r3, [sp, #52]	; 0x34
   859d4:	4623      	mov	r3, r4
   859d6:	2800      	cmp	r0, #0
   859d8:	f103 0304 	add.w	r3, r3, #4
   859dc:	930f      	str	r3, [sp, #60]	; 0x3c
   859de:	da04      	bge.n	859ea <_svfprintf_r+0x196>
   859e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   859e2:	425b      	negs	r3, r3
   859e4:	930d      	str	r3, [sp, #52]	; 0x34
   859e6:	f04b 0b04 	orr.w	fp, fp, #4
   859ea:	f89a 3000 	ldrb.w	r3, [sl]
   859ee:	e78b      	b.n	85908 <_svfprintf_r+0xb4>
   859f0:	aa25      	add	r2, sp, #148	; 0x94
   859f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   859f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   859f6:	f002 ffa3 	bl	88940 <__ssprint_r>
   859fa:	b940      	cbnz	r0, 85a0e <_svfprintf_r+0x1ba>
   859fc:	46c8      	mov	r8, r9
   859fe:	e76f      	b.n	858e0 <_svfprintf_r+0x8c>
   85a00:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   85a02:	b123      	cbz	r3, 85a0e <_svfprintf_r+0x1ba>
   85a04:	980c      	ldr	r0, [sp, #48]	; 0x30
   85a06:	aa25      	add	r2, sp, #148	; 0x94
   85a08:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85a0a:	f002 ff99 	bl	88940 <__ssprint_r>
   85a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85a10:	899b      	ldrh	r3, [r3, #12]
   85a12:	f013 0f40 	tst.w	r3, #64	; 0x40
   85a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85a18:	bf18      	it	ne
   85a1a:	f04f 33ff 	movne.w	r3, #4294967295
   85a1e:	9309      	str	r3, [sp, #36]	; 0x24
   85a20:	9809      	ldr	r0, [sp, #36]	; 0x24
   85a22:	b043      	add	sp, #268	; 0x10c
   85a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a28:	f01b 0f20 	tst.w	fp, #32
   85a2c:	9311      	str	r3, [sp, #68]	; 0x44
   85a2e:	f040 81af 	bne.w	85d90 <_svfprintf_r+0x53c>
   85a32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85a34:	f01b 0f10 	tst.w	fp, #16
   85a38:	4613      	mov	r3, r2
   85a3a:	f040 859a 	bne.w	86572 <_svfprintf_r+0xd1e>
   85a3e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85a42:	f000 8596 	beq.w	86572 <_svfprintf_r+0xd1e>
   85a46:	2500      	movs	r5, #0
   85a48:	2301      	movs	r3, #1
   85a4a:	8814      	ldrh	r4, [r2, #0]
   85a4c:	3204      	adds	r2, #4
   85a4e:	920f      	str	r2, [sp, #60]	; 0x3c
   85a50:	2200      	movs	r2, #0
   85a52:	4617      	mov	r7, r2
   85a54:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   85a58:	990a      	ldr	r1, [sp, #40]	; 0x28
   85a5a:	1c4a      	adds	r2, r1, #1
   85a5c:	f000 8210 	beq.w	85e80 <_svfprintf_r+0x62c>
   85a60:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   85a64:	9207      	str	r2, [sp, #28]
   85a66:	ea54 0205 	orrs.w	r2, r4, r5
   85a6a:	f040 820f 	bne.w	85e8c <_svfprintf_r+0x638>
   85a6e:	2900      	cmp	r1, #0
   85a70:	f040 8431 	bne.w	862d6 <_svfprintf_r+0xa82>
   85a74:	2b00      	cmp	r3, #0
   85a76:	f040 8539 	bne.w	864ec <_svfprintf_r+0xc98>
   85a7a:	f01b 0301 	ands.w	r3, fp, #1
   85a7e:	930e      	str	r3, [sp, #56]	; 0x38
   85a80:	f000 8662 	beq.w	86748 <_svfprintf_r+0xef4>
   85a84:	2330      	movs	r3, #48	; 0x30
   85a86:	ae42      	add	r6, sp, #264	; 0x108
   85a88:	f806 3d41 	strb.w	r3, [r6, #-65]!
   85a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85a90:	4293      	cmp	r3, r2
   85a92:	bfb8      	it	lt
   85a94:	4613      	movlt	r3, r2
   85a96:	9308      	str	r3, [sp, #32]
   85a98:	2300      	movs	r3, #0
   85a9a:	9312      	str	r3, [sp, #72]	; 0x48
   85a9c:	b117      	cbz	r7, 85aa4 <_svfprintf_r+0x250>
   85a9e:	9b08      	ldr	r3, [sp, #32]
   85aa0:	3301      	adds	r3, #1
   85aa2:	9308      	str	r3, [sp, #32]
   85aa4:	9b07      	ldr	r3, [sp, #28]
   85aa6:	f013 0302 	ands.w	r3, r3, #2
   85aaa:	9310      	str	r3, [sp, #64]	; 0x40
   85aac:	d002      	beq.n	85ab4 <_svfprintf_r+0x260>
   85aae:	9b08      	ldr	r3, [sp, #32]
   85ab0:	3302      	adds	r3, #2
   85ab2:	9308      	str	r3, [sp, #32]
   85ab4:	9b07      	ldr	r3, [sp, #28]
   85ab6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   85aba:	f040 8310 	bne.w	860de <_svfprintf_r+0x88a>
   85abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85ac0:	9a08      	ldr	r2, [sp, #32]
   85ac2:	eba3 0b02 	sub.w	fp, r3, r2
   85ac6:	f1bb 0f00 	cmp.w	fp, #0
   85aca:	f340 8308 	ble.w	860de <_svfprintf_r+0x88a>
   85ace:	f1bb 0f10 	cmp.w	fp, #16
   85ad2:	f340 87b2 	ble.w	86a3a <_svfprintf_r+0x11e6>
   85ad6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85ad8:	4643      	mov	r3, r8
   85ada:	4621      	mov	r1, r4
   85adc:	46a8      	mov	r8, r5
   85ade:	2710      	movs	r7, #16
   85ae0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85ae2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85ae4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85ae6:	e006      	b.n	85af6 <_svfprintf_r+0x2a2>
   85ae8:	f1ab 0b10 	sub.w	fp, fp, #16
   85aec:	f1bb 0f10 	cmp.w	fp, #16
   85af0:	f103 0308 	add.w	r3, r3, #8
   85af4:	dd18      	ble.n	85b28 <_svfprintf_r+0x2d4>
   85af6:	3201      	adds	r2, #1
   85af8:	48ab      	ldr	r0, [pc, #684]	; (85da8 <_svfprintf_r+0x554>)
   85afa:	3110      	adds	r1, #16
   85afc:	2a07      	cmp	r2, #7
   85afe:	9127      	str	r1, [sp, #156]	; 0x9c
   85b00:	9226      	str	r2, [sp, #152]	; 0x98
   85b02:	e883 0081 	stmia.w	r3, {r0, r7}
   85b06:	ddef      	ble.n	85ae8 <_svfprintf_r+0x294>
   85b08:	aa25      	add	r2, sp, #148	; 0x94
   85b0a:	4629      	mov	r1, r5
   85b0c:	4620      	mov	r0, r4
   85b0e:	f002 ff17 	bl	88940 <__ssprint_r>
   85b12:	2800      	cmp	r0, #0
   85b14:	f47f af7b 	bne.w	85a0e <_svfprintf_r+0x1ba>
   85b18:	f1ab 0b10 	sub.w	fp, fp, #16
   85b1c:	f1bb 0f10 	cmp.w	fp, #16
   85b20:	464b      	mov	r3, r9
   85b22:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85b24:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85b26:	dce6      	bgt.n	85af6 <_svfprintf_r+0x2a2>
   85b28:	4645      	mov	r5, r8
   85b2a:	460c      	mov	r4, r1
   85b2c:	4698      	mov	r8, r3
   85b2e:	3201      	adds	r2, #1
   85b30:	4b9d      	ldr	r3, [pc, #628]	; (85da8 <_svfprintf_r+0x554>)
   85b32:	445c      	add	r4, fp
   85b34:	2a07      	cmp	r2, #7
   85b36:	9427      	str	r4, [sp, #156]	; 0x9c
   85b38:	9226      	str	r2, [sp, #152]	; 0x98
   85b3a:	e888 0808 	stmia.w	r8, {r3, fp}
   85b3e:	f300 82c3 	bgt.w	860c8 <_svfprintf_r+0x874>
   85b42:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85b46:	f108 0808 	add.w	r8, r8, #8
   85b4a:	b187      	cbz	r7, 85b6e <_svfprintf_r+0x31a>
   85b4c:	2101      	movs	r1, #1
   85b4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85b50:	440c      	add	r4, r1
   85b52:	440b      	add	r3, r1
   85b54:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   85b58:	2b07      	cmp	r3, #7
   85b5a:	9427      	str	r4, [sp, #156]	; 0x9c
   85b5c:	9326      	str	r3, [sp, #152]	; 0x98
   85b5e:	f8c8 1004 	str.w	r1, [r8, #4]
   85b62:	f8c8 2000 	str.w	r2, [r8]
   85b66:	f300 83cd 	bgt.w	86304 <_svfprintf_r+0xab0>
   85b6a:	f108 0808 	add.w	r8, r8, #8
   85b6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85b70:	b17b      	cbz	r3, 85b92 <_svfprintf_r+0x33e>
   85b72:	2102      	movs	r1, #2
   85b74:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85b76:	440c      	add	r4, r1
   85b78:	3301      	adds	r3, #1
   85b7a:	aa1e      	add	r2, sp, #120	; 0x78
   85b7c:	2b07      	cmp	r3, #7
   85b7e:	9427      	str	r4, [sp, #156]	; 0x9c
   85b80:	9326      	str	r3, [sp, #152]	; 0x98
   85b82:	f8c8 1004 	str.w	r1, [r8, #4]
   85b86:	f8c8 2000 	str.w	r2, [r8]
   85b8a:	f300 8411 	bgt.w	863b0 <_svfprintf_r+0xb5c>
   85b8e:	f108 0808 	add.w	r8, r8, #8
   85b92:	2d80      	cmp	r5, #128	; 0x80
   85b94:	f000 8304 	beq.w	861a0 <_svfprintf_r+0x94c>
   85b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85b9c:	1a9f      	subs	r7, r3, r2
   85b9e:	2f00      	cmp	r7, #0
   85ba0:	dd37      	ble.n	85c12 <_svfprintf_r+0x3be>
   85ba2:	2f10      	cmp	r7, #16
   85ba4:	f340 8679 	ble.w	8689a <_svfprintf_r+0x1046>
   85ba8:	4d80      	ldr	r5, [pc, #512]	; (85dac <_svfprintf_r+0x558>)
   85baa:	4642      	mov	r2, r8
   85bac:	4621      	mov	r1, r4
   85bae:	46b0      	mov	r8, r6
   85bb0:	f04f 0b10 	mov.w	fp, #16
   85bb4:	462e      	mov	r6, r5
   85bb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85bb8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85bba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85bbc:	e004      	b.n	85bc8 <_svfprintf_r+0x374>
   85bbe:	3f10      	subs	r7, #16
   85bc0:	2f10      	cmp	r7, #16
   85bc2:	f102 0208 	add.w	r2, r2, #8
   85bc6:	dd15      	ble.n	85bf4 <_svfprintf_r+0x3a0>
   85bc8:	3301      	adds	r3, #1
   85bca:	3110      	adds	r1, #16
   85bcc:	2b07      	cmp	r3, #7
   85bce:	9127      	str	r1, [sp, #156]	; 0x9c
   85bd0:	9326      	str	r3, [sp, #152]	; 0x98
   85bd2:	e882 0840 	stmia.w	r2, {r6, fp}
   85bd6:	ddf2      	ble.n	85bbe <_svfprintf_r+0x36a>
   85bd8:	aa25      	add	r2, sp, #148	; 0x94
   85bda:	4629      	mov	r1, r5
   85bdc:	4620      	mov	r0, r4
   85bde:	f002 feaf 	bl	88940 <__ssprint_r>
   85be2:	2800      	cmp	r0, #0
   85be4:	f47f af13 	bne.w	85a0e <_svfprintf_r+0x1ba>
   85be8:	3f10      	subs	r7, #16
   85bea:	2f10      	cmp	r7, #16
   85bec:	464a      	mov	r2, r9
   85bee:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85bf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85bf2:	dce9      	bgt.n	85bc8 <_svfprintf_r+0x374>
   85bf4:	4635      	mov	r5, r6
   85bf6:	460c      	mov	r4, r1
   85bf8:	4646      	mov	r6, r8
   85bfa:	4690      	mov	r8, r2
   85bfc:	3301      	adds	r3, #1
   85bfe:	443c      	add	r4, r7
   85c00:	2b07      	cmp	r3, #7
   85c02:	9427      	str	r4, [sp, #156]	; 0x9c
   85c04:	9326      	str	r3, [sp, #152]	; 0x98
   85c06:	e888 00a0 	stmia.w	r8, {r5, r7}
   85c0a:	f300 8370 	bgt.w	862ee <_svfprintf_r+0xa9a>
   85c0e:	f108 0808 	add.w	r8, r8, #8
   85c12:	9b07      	ldr	r3, [sp, #28]
   85c14:	05df      	lsls	r7, r3, #23
   85c16:	f100 8264 	bmi.w	860e2 <_svfprintf_r+0x88e>
   85c1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85c1c:	990e      	ldr	r1, [sp, #56]	; 0x38
   85c1e:	3301      	adds	r3, #1
   85c20:	440c      	add	r4, r1
   85c22:	2b07      	cmp	r3, #7
   85c24:	9427      	str	r4, [sp, #156]	; 0x9c
   85c26:	f8c8 6000 	str.w	r6, [r8]
   85c2a:	f8c8 1004 	str.w	r1, [r8, #4]
   85c2e:	9326      	str	r3, [sp, #152]	; 0x98
   85c30:	f300 83b3 	bgt.w	8639a <_svfprintf_r+0xb46>
   85c34:	f108 0808 	add.w	r8, r8, #8
   85c38:	9b07      	ldr	r3, [sp, #28]
   85c3a:	075b      	lsls	r3, r3, #29
   85c3c:	d53b      	bpl.n	85cb6 <_svfprintf_r+0x462>
   85c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85c40:	9a08      	ldr	r2, [sp, #32]
   85c42:	1a9d      	subs	r5, r3, r2
   85c44:	2d00      	cmp	r5, #0
   85c46:	dd36      	ble.n	85cb6 <_svfprintf_r+0x462>
   85c48:	2d10      	cmp	r5, #16
   85c4a:	f340 8721 	ble.w	86a90 <_svfprintf_r+0x123c>
   85c4e:	2610      	movs	r6, #16
   85c50:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85c52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85c54:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   85c58:	e004      	b.n	85c64 <_svfprintf_r+0x410>
   85c5a:	3d10      	subs	r5, #16
   85c5c:	2d10      	cmp	r5, #16
   85c5e:	f108 0808 	add.w	r8, r8, #8
   85c62:	dd16      	ble.n	85c92 <_svfprintf_r+0x43e>
   85c64:	3301      	adds	r3, #1
   85c66:	4a50      	ldr	r2, [pc, #320]	; (85da8 <_svfprintf_r+0x554>)
   85c68:	3410      	adds	r4, #16
   85c6a:	2b07      	cmp	r3, #7
   85c6c:	9427      	str	r4, [sp, #156]	; 0x9c
   85c6e:	9326      	str	r3, [sp, #152]	; 0x98
   85c70:	e888 0044 	stmia.w	r8, {r2, r6}
   85c74:	ddf1      	ble.n	85c5a <_svfprintf_r+0x406>
   85c76:	aa25      	add	r2, sp, #148	; 0x94
   85c78:	4659      	mov	r1, fp
   85c7a:	4638      	mov	r0, r7
   85c7c:	f002 fe60 	bl	88940 <__ssprint_r>
   85c80:	2800      	cmp	r0, #0
   85c82:	f47f aec4 	bne.w	85a0e <_svfprintf_r+0x1ba>
   85c86:	3d10      	subs	r5, #16
   85c88:	2d10      	cmp	r5, #16
   85c8a:	46c8      	mov	r8, r9
   85c8c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85c8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85c90:	dce8      	bgt.n	85c64 <_svfprintf_r+0x410>
   85c92:	3301      	adds	r3, #1
   85c94:	4a44      	ldr	r2, [pc, #272]	; (85da8 <_svfprintf_r+0x554>)
   85c96:	442c      	add	r4, r5
   85c98:	2b07      	cmp	r3, #7
   85c9a:	9427      	str	r4, [sp, #156]	; 0x9c
   85c9c:	9326      	str	r3, [sp, #152]	; 0x98
   85c9e:	e888 0024 	stmia.w	r8, {r2, r5}
   85ca2:	dd08      	ble.n	85cb6 <_svfprintf_r+0x462>
   85ca4:	aa25      	add	r2, sp, #148	; 0x94
   85ca6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85ca8:	980c      	ldr	r0, [sp, #48]	; 0x30
   85caa:	f002 fe49 	bl	88940 <__ssprint_r>
   85cae:	2800      	cmp	r0, #0
   85cb0:	f47f aead 	bne.w	85a0e <_svfprintf_r+0x1ba>
   85cb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85cb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85cba:	9908      	ldr	r1, [sp, #32]
   85cbc:	428a      	cmp	r2, r1
   85cbe:	bfac      	ite	ge
   85cc0:	189b      	addge	r3, r3, r2
   85cc2:	185b      	addlt	r3, r3, r1
   85cc4:	9309      	str	r3, [sp, #36]	; 0x24
   85cc6:	2c00      	cmp	r4, #0
   85cc8:	f040 82fb 	bne.w	862c2 <_svfprintf_r+0xa6e>
   85ccc:	2300      	movs	r3, #0
   85cce:	46c8      	mov	r8, r9
   85cd0:	9326      	str	r3, [sp, #152]	; 0x98
   85cd2:	e5e6      	b.n	858a2 <_svfprintf_r+0x4e>
   85cd4:	9311      	str	r3, [sp, #68]	; 0x44
   85cd6:	f01b 0320 	ands.w	r3, fp, #32
   85cda:	f040 8145 	bne.w	85f68 <_svfprintf_r+0x714>
   85cde:	f01b 0210 	ands.w	r2, fp, #16
   85ce2:	f040 8466 	bne.w	865b2 <_svfprintf_r+0xd5e>
   85ce6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   85cea:	f000 8462 	beq.w	865b2 <_svfprintf_r+0xd5e>
   85cee:	990f      	ldr	r1, [sp, #60]	; 0x3c
   85cf0:	4613      	mov	r3, r2
   85cf2:	460a      	mov	r2, r1
   85cf4:	3204      	adds	r2, #4
   85cf6:	880c      	ldrh	r4, [r1, #0]
   85cf8:	2500      	movs	r5, #0
   85cfa:	920f      	str	r2, [sp, #60]	; 0x3c
   85cfc:	e6a8      	b.n	85a50 <_svfprintf_r+0x1fc>
   85cfe:	2500      	movs	r5, #0
   85d00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85d02:	9311      	str	r3, [sp, #68]	; 0x44
   85d04:	6816      	ldr	r6, [r2, #0]
   85d06:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   85d0a:	1d14      	adds	r4, r2, #4
   85d0c:	2e00      	cmp	r6, #0
   85d0e:	f000 86cd 	beq.w	86aac <_svfprintf_r+0x1258>
   85d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85d14:	1c53      	adds	r3, r2, #1
   85d16:	f000 861b 	beq.w	86950 <_svfprintf_r+0x10fc>
   85d1a:	4629      	mov	r1, r5
   85d1c:	4630      	mov	r0, r6
   85d1e:	f002 faaf 	bl	88280 <memchr>
   85d22:	2800      	cmp	r0, #0
   85d24:	f000 870d 	beq.w	86b42 <_svfprintf_r+0x12ee>
   85d28:	1b83      	subs	r3, r0, r6
   85d2a:	950a      	str	r5, [sp, #40]	; 0x28
   85d2c:	930e      	str	r3, [sp, #56]	; 0x38
   85d2e:	940f      	str	r4, [sp, #60]	; 0x3c
   85d30:	f8cd b01c 	str.w	fp, [sp, #28]
   85d34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85d38:	9308      	str	r3, [sp, #32]
   85d3a:	9512      	str	r5, [sp, #72]	; 0x48
   85d3c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85d40:	e6ac      	b.n	85a9c <_svfprintf_r+0x248>
   85d42:	f89a 3000 	ldrb.w	r3, [sl]
   85d46:	f10a 0401 	add.w	r4, sl, #1
   85d4a:	2b2a      	cmp	r3, #42	; 0x2a
   85d4c:	f000 87c2 	beq.w	86cd4 <_svfprintf_r+0x1480>
   85d50:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85d54:	2809      	cmp	r0, #9
   85d56:	46a2      	mov	sl, r4
   85d58:	f200 8718 	bhi.w	86b8c <_svfprintf_r+0x1338>
   85d5c:	2300      	movs	r3, #0
   85d5e:	461c      	mov	r4, r3
   85d60:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85d64:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   85d68:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   85d6c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85d70:	2809      	cmp	r0, #9
   85d72:	d9f5      	bls.n	85d60 <_svfprintf_r+0x50c>
   85d74:	940a      	str	r4, [sp, #40]	; 0x28
   85d76:	e5c9      	b.n	8590c <_svfprintf_r+0xb8>
   85d78:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   85d7c:	f89a 3000 	ldrb.w	r3, [sl]
   85d80:	e5c2      	b.n	85908 <_svfprintf_r+0xb4>
   85d82:	f04b 0b10 	orr.w	fp, fp, #16
   85d86:	f01b 0f20 	tst.w	fp, #32
   85d8a:	9311      	str	r3, [sp, #68]	; 0x44
   85d8c:	f43f ae51 	beq.w	85a32 <_svfprintf_r+0x1de>
   85d90:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85d92:	3407      	adds	r4, #7
   85d94:	f024 0307 	bic.w	r3, r4, #7
   85d98:	f103 0208 	add.w	r2, r3, #8
   85d9c:	e9d3 4500 	ldrd	r4, r5, [r3]
   85da0:	920f      	str	r2, [sp, #60]	; 0x3c
   85da2:	2301      	movs	r3, #1
   85da4:	e654      	b.n	85a50 <_svfprintf_r+0x1fc>
   85da6:	bf00      	nop
   85da8:	000898c0 	.word	0x000898c0
   85dac:	000898d0 	.word	0x000898d0
   85db0:	9311      	str	r3, [sp, #68]	; 0x44
   85db2:	2a00      	cmp	r2, #0
   85db4:	f040 87ad 	bne.w	86d12 <_svfprintf_r+0x14be>
   85db8:	4bbe      	ldr	r3, [pc, #760]	; (860b4 <_svfprintf_r+0x860>)
   85dba:	f01b 0f20 	tst.w	fp, #32
   85dbe:	9318      	str	r3, [sp, #96]	; 0x60
   85dc0:	f040 80e7 	bne.w	85f92 <_svfprintf_r+0x73e>
   85dc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85dc6:	f01b 0f10 	tst.w	fp, #16
   85dca:	4613      	mov	r3, r2
   85dcc:	f040 83d8 	bne.w	86580 <_svfprintf_r+0xd2c>
   85dd0:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85dd4:	f000 83d4 	beq.w	86580 <_svfprintf_r+0xd2c>
   85dd8:	2500      	movs	r5, #0
   85dda:	3304      	adds	r3, #4
   85ddc:	8814      	ldrh	r4, [r2, #0]
   85dde:	930f      	str	r3, [sp, #60]	; 0x3c
   85de0:	f01b 0f01 	tst.w	fp, #1
   85de4:	f000 80e3 	beq.w	85fae <_svfprintf_r+0x75a>
   85de8:	ea54 0305 	orrs.w	r3, r4, r5
   85dec:	f000 80df 	beq.w	85fae <_svfprintf_r+0x75a>
   85df0:	2330      	movs	r3, #48	; 0x30
   85df2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   85df6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   85dfa:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   85dfe:	f04b 0b02 	orr.w	fp, fp, #2
   85e02:	2302      	movs	r3, #2
   85e04:	e624      	b.n	85a50 <_svfprintf_r+0x1fc>
   85e06:	2201      	movs	r2, #1
   85e08:	9311      	str	r3, [sp, #68]	; 0x44
   85e0a:	2300      	movs	r3, #0
   85e0c:	4611      	mov	r1, r2
   85e0e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   85e10:	9208      	str	r2, [sp, #32]
   85e12:	6802      	ldr	r2, [r0, #0]
   85e14:	461f      	mov	r7, r3
   85e16:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85e1a:	930a      	str	r3, [sp, #40]	; 0x28
   85e1c:	9312      	str	r3, [sp, #72]	; 0x48
   85e1e:	1d03      	adds	r3, r0, #4
   85e20:	f8cd b01c 	str.w	fp, [sp, #28]
   85e24:	910e      	str	r1, [sp, #56]	; 0x38
   85e26:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   85e2a:	930f      	str	r3, [sp, #60]	; 0x3c
   85e2c:	ae28      	add	r6, sp, #160	; 0xa0
   85e2e:	e639      	b.n	85aa4 <_svfprintf_r+0x250>
   85e30:	9311      	str	r3, [sp, #68]	; 0x44
   85e32:	2a00      	cmp	r2, #0
   85e34:	f040 8784 	bne.w	86d40 <_svfprintf_r+0x14ec>
   85e38:	f04b 0b10 	orr.w	fp, fp, #16
   85e3c:	f01b 0f20 	tst.w	fp, #32
   85e40:	f040 8475 	bne.w	8672e <_svfprintf_r+0xeda>
   85e44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85e46:	f01b 0f10 	tst.w	fp, #16
   85e4a:	4613      	mov	r3, r2
   85e4c:	f040 839d 	bne.w	8658a <_svfprintf_r+0xd36>
   85e50:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85e54:	f000 8399 	beq.w	8658a <_svfprintf_r+0xd36>
   85e58:	f9b2 4000 	ldrsh.w	r4, [r2]
   85e5c:	3304      	adds	r3, #4
   85e5e:	17e5      	asrs	r5, r4, #31
   85e60:	930f      	str	r3, [sp, #60]	; 0x3c
   85e62:	4622      	mov	r2, r4
   85e64:	462b      	mov	r3, r5
   85e66:	2a00      	cmp	r2, #0
   85e68:	f173 0300 	sbcs.w	r3, r3, #0
   85e6c:	f2c0 8398 	blt.w	865a0 <_svfprintf_r+0xd4c>
   85e70:	990a      	ldr	r1, [sp, #40]	; 0x28
   85e72:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85e76:	1c4a      	adds	r2, r1, #1
   85e78:	f04f 0301 	mov.w	r3, #1
   85e7c:	f47f adf0 	bne.w	85a60 <_svfprintf_r+0x20c>
   85e80:	ea54 0205 	orrs.w	r2, r4, r5
   85e84:	f000 8229 	beq.w	862da <_svfprintf_r+0xa86>
   85e88:	f8cd b01c 	str.w	fp, [sp, #28]
   85e8c:	2b01      	cmp	r3, #1
   85e8e:	f000 830e 	beq.w	864ae <_svfprintf_r+0xc5a>
   85e92:	2b02      	cmp	r3, #2
   85e94:	f040 829c 	bne.w	863d0 <_svfprintf_r+0xb7c>
   85e98:	464e      	mov	r6, r9
   85e9a:	9818      	ldr	r0, [sp, #96]	; 0x60
   85e9c:	0923      	lsrs	r3, r4, #4
   85e9e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   85ea2:	0929      	lsrs	r1, r5, #4
   85ea4:	f004 020f 	and.w	r2, r4, #15
   85ea8:	460d      	mov	r5, r1
   85eaa:	461c      	mov	r4, r3
   85eac:	5c83      	ldrb	r3, [r0, r2]
   85eae:	f806 3d01 	strb.w	r3, [r6, #-1]!
   85eb2:	ea54 0305 	orrs.w	r3, r4, r5
   85eb6:	d1f1      	bne.n	85e9c <_svfprintf_r+0x648>
   85eb8:	eba9 0306 	sub.w	r3, r9, r6
   85ebc:	930e      	str	r3, [sp, #56]	; 0x38
   85ebe:	e5e5      	b.n	85a8c <_svfprintf_r+0x238>
   85ec0:	9311      	str	r3, [sp, #68]	; 0x44
   85ec2:	2a00      	cmp	r2, #0
   85ec4:	f040 8738 	bne.w	86d38 <_svfprintf_r+0x14e4>
   85ec8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85eca:	f01b 0f08 	tst.w	fp, #8
   85ece:	f104 0407 	add.w	r4, r4, #7
   85ed2:	f000 84cf 	beq.w	86874 <_svfprintf_r+0x1020>
   85ed6:	f024 0307 	bic.w	r3, r4, #7
   85eda:	f103 0208 	add.w	r2, r3, #8
   85ede:	920f      	str	r2, [sp, #60]	; 0x3c
   85ee0:	681a      	ldr	r2, [r3, #0]
   85ee2:	685b      	ldr	r3, [r3, #4]
   85ee4:	9215      	str	r2, [sp, #84]	; 0x54
   85ee6:	9314      	str	r3, [sp, #80]	; 0x50
   85ee8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85eea:	9d15      	ldr	r5, [sp, #84]	; 0x54
   85eec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   85ef0:	4628      	mov	r0, r5
   85ef2:	4621      	mov	r1, r4
   85ef4:	f04f 32ff 	mov.w	r2, #4294967295
   85ef8:	4b6f      	ldr	r3, [pc, #444]	; (860b8 <_svfprintf_r+0x864>)
   85efa:	f003 fa2b 	bl	89354 <__aeabi_dcmpun>
   85efe:	2800      	cmp	r0, #0
   85f00:	f040 8434 	bne.w	8676c <_svfprintf_r+0xf18>
   85f04:	4628      	mov	r0, r5
   85f06:	4621      	mov	r1, r4
   85f08:	f04f 32ff 	mov.w	r2, #4294967295
   85f0c:	4b6a      	ldr	r3, [pc, #424]	; (860b8 <_svfprintf_r+0x864>)
   85f0e:	f003 fa03 	bl	89318 <__aeabi_dcmple>
   85f12:	2800      	cmp	r0, #0
   85f14:	f040 842a 	bne.w	8676c <_svfprintf_r+0xf18>
   85f18:	a815      	add	r0, sp, #84	; 0x54
   85f1a:	c80d      	ldmia	r0, {r0, r2, r3}
   85f1c:	9914      	ldr	r1, [sp, #80]	; 0x50
   85f1e:	f003 f9f1 	bl	89304 <__aeabi_dcmplt>
   85f22:	2800      	cmp	r0, #0
   85f24:	f040 85d4 	bne.w	86ad0 <_svfprintf_r+0x127c>
   85f28:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85f2c:	2303      	movs	r3, #3
   85f2e:	461a      	mov	r2, r3
   85f30:	9308      	str	r3, [sp, #32]
   85f32:	2300      	movs	r3, #0
   85f34:	4e61      	ldr	r6, [pc, #388]	; (860bc <_svfprintf_r+0x868>)
   85f36:	4619      	mov	r1, r3
   85f38:	930a      	str	r3, [sp, #40]	; 0x28
   85f3a:	4b61      	ldr	r3, [pc, #388]	; (860c0 <_svfprintf_r+0x86c>)
   85f3c:	920e      	str	r2, [sp, #56]	; 0x38
   85f3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85f40:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   85f44:	9007      	str	r0, [sp, #28]
   85f46:	9112      	str	r1, [sp, #72]	; 0x48
   85f48:	2a47      	cmp	r2, #71	; 0x47
   85f4a:	bfd8      	it	le
   85f4c:	461e      	movle	r6, r3
   85f4e:	e5a5      	b.n	85a9c <_svfprintf_r+0x248>
   85f50:	f04b 0b08 	orr.w	fp, fp, #8
   85f54:	f89a 3000 	ldrb.w	r3, [sl]
   85f58:	e4d6      	b.n	85908 <_svfprintf_r+0xb4>
   85f5a:	f04b 0b10 	orr.w	fp, fp, #16
   85f5e:	9311      	str	r3, [sp, #68]	; 0x44
   85f60:	f01b 0320 	ands.w	r3, fp, #32
   85f64:	f43f aebb 	beq.w	85cde <_svfprintf_r+0x48a>
   85f68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85f6a:	3407      	adds	r4, #7
   85f6c:	f024 0307 	bic.w	r3, r4, #7
   85f70:	f103 0208 	add.w	r2, r3, #8
   85f74:	e9d3 4500 	ldrd	r4, r5, [r3]
   85f78:	920f      	str	r2, [sp, #60]	; 0x3c
   85f7a:	2300      	movs	r3, #0
   85f7c:	e568      	b.n	85a50 <_svfprintf_r+0x1fc>
   85f7e:	9311      	str	r3, [sp, #68]	; 0x44
   85f80:	2a00      	cmp	r2, #0
   85f82:	f040 86c2 	bne.w	86d0a <_svfprintf_r+0x14b6>
   85f86:	4b4f      	ldr	r3, [pc, #316]	; (860c4 <_svfprintf_r+0x870>)
   85f88:	f01b 0f20 	tst.w	fp, #32
   85f8c:	9318      	str	r3, [sp, #96]	; 0x60
   85f8e:	f43f af19 	beq.w	85dc4 <_svfprintf_r+0x570>
   85f92:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85f94:	f01b 0f01 	tst.w	fp, #1
   85f98:	f104 0407 	add.w	r4, r4, #7
   85f9c:	f024 0307 	bic.w	r3, r4, #7
   85fa0:	f103 0208 	add.w	r2, r3, #8
   85fa4:	920f      	str	r2, [sp, #60]	; 0x3c
   85fa6:	e9d3 4500 	ldrd	r4, r5, [r3]
   85faa:	f47f af1d 	bne.w	85de8 <_svfprintf_r+0x594>
   85fae:	2302      	movs	r3, #2
   85fb0:	e54e      	b.n	85a50 <_svfprintf_r+0x1fc>
   85fb2:	f89a 3000 	ldrb.w	r3, [sl]
   85fb6:	2900      	cmp	r1, #0
   85fb8:	f47f aca6 	bne.w	85908 <_svfprintf_r+0xb4>
   85fbc:	2201      	movs	r2, #1
   85fbe:	2120      	movs	r1, #32
   85fc0:	e4a2      	b.n	85908 <_svfprintf_r+0xb4>
   85fc2:	f04b 0b01 	orr.w	fp, fp, #1
   85fc6:	f89a 3000 	ldrb.w	r3, [sl]
   85fca:	e49d      	b.n	85908 <_svfprintf_r+0xb4>
   85fcc:	f89a 3000 	ldrb.w	r3, [sl]
   85fd0:	2201      	movs	r2, #1
   85fd2:	212b      	movs	r1, #43	; 0x2b
   85fd4:	e498      	b.n	85908 <_svfprintf_r+0xb4>
   85fd6:	f04b 0b20 	orr.w	fp, fp, #32
   85fda:	f89a 3000 	ldrb.w	r3, [sl]
   85fde:	e493      	b.n	85908 <_svfprintf_r+0xb4>
   85fe0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   85fe4:	f89a 3000 	ldrb.w	r3, [sl]
   85fe8:	e48e      	b.n	85908 <_svfprintf_r+0xb4>
   85fea:	f89a 3000 	ldrb.w	r3, [sl]
   85fee:	2b6c      	cmp	r3, #108	; 0x6c
   85ff0:	bf03      	ittte	eq
   85ff2:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   85ff6:	f04b 0b20 	orreq.w	fp, fp, #32
   85ffa:	f10a 0a01 	addeq.w	sl, sl, #1
   85ffe:	f04b 0b10 	orrne.w	fp, fp, #16
   86002:	e481      	b.n	85908 <_svfprintf_r+0xb4>
   86004:	2a00      	cmp	r2, #0
   86006:	f040 867c 	bne.w	86d02 <_svfprintf_r+0x14ae>
   8600a:	f01b 0f20 	tst.w	fp, #32
   8600e:	f040 8452 	bne.w	868b6 <_svfprintf_r+0x1062>
   86012:	f01b 0f10 	tst.w	fp, #16
   86016:	f040 8438 	bne.w	8688a <_svfprintf_r+0x1036>
   8601a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8601e:	f000 8434 	beq.w	8688a <_svfprintf_r+0x1036>
   86022:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86024:	6813      	ldr	r3, [r2, #0]
   86026:	3204      	adds	r2, #4
   86028:	920f      	str	r2, [sp, #60]	; 0x3c
   8602a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   8602e:	801a      	strh	r2, [r3, #0]
   86030:	e437      	b.n	858a2 <_svfprintf_r+0x4e>
   86032:	2378      	movs	r3, #120	; 0x78
   86034:	2230      	movs	r2, #48	; 0x30
   86036:	980f      	ldr	r0, [sp, #60]	; 0x3c
   86038:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   8603c:	9311      	str	r3, [sp, #68]	; 0x44
   8603e:	1d03      	adds	r3, r0, #4
   86040:	930f      	str	r3, [sp, #60]	; 0x3c
   86042:	4b20      	ldr	r3, [pc, #128]	; (860c4 <_svfprintf_r+0x870>)
   86044:	6804      	ldr	r4, [r0, #0]
   86046:	9318      	str	r3, [sp, #96]	; 0x60
   86048:	f04b 0b02 	orr.w	fp, fp, #2
   8604c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   86050:	2500      	movs	r5, #0
   86052:	2302      	movs	r3, #2
   86054:	e4fc      	b.n	85a50 <_svfprintf_r+0x1fc>
   86056:	9311      	str	r3, [sp, #68]	; 0x44
   86058:	2a00      	cmp	r2, #0
   8605a:	f43f aeef 	beq.w	85e3c <_svfprintf_r+0x5e8>
   8605e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86062:	e6eb      	b.n	85e3c <_svfprintf_r+0x5e8>
   86064:	2000      	movs	r0, #0
   86066:	4604      	mov	r4, r0
   86068:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8606c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   86070:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   86074:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   86078:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8607c:	2809      	cmp	r0, #9
   8607e:	d9f5      	bls.n	8606c <_svfprintf_r+0x818>
   86080:	940d      	str	r4, [sp, #52]	; 0x34
   86082:	e443      	b.n	8590c <_svfprintf_r+0xb8>
   86084:	9311      	str	r3, [sp, #68]	; 0x44
   86086:	2a00      	cmp	r2, #0
   86088:	f040 864a 	bne.w	86d20 <_svfprintf_r+0x14cc>
   8608c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8608e:	2a00      	cmp	r2, #0
   86090:	f43f acb6 	beq.w	85a00 <_svfprintf_r+0x1ac>
   86094:	2300      	movs	r3, #0
   86096:	2101      	movs	r1, #1
   86098:	461f      	mov	r7, r3
   8609a:	9108      	str	r1, [sp, #32]
   8609c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   860a0:	f8cd b01c 	str.w	fp, [sp, #28]
   860a4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   860a8:	930a      	str	r3, [sp, #40]	; 0x28
   860aa:	9312      	str	r3, [sp, #72]	; 0x48
   860ac:	910e      	str	r1, [sp, #56]	; 0x38
   860ae:	ae28      	add	r6, sp, #160	; 0xa0
   860b0:	e4f8      	b.n	85aa4 <_svfprintf_r+0x250>
   860b2:	bf00      	nop
   860b4:	0008988c 	.word	0x0008988c
   860b8:	7fefffff 	.word	0x7fefffff
   860bc:	00089880 	.word	0x00089880
   860c0:	0008987c 	.word	0x0008987c
   860c4:	000898a0 	.word	0x000898a0
   860c8:	aa25      	add	r2, sp, #148	; 0x94
   860ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   860cc:	980c      	ldr	r0, [sp, #48]	; 0x30
   860ce:	f002 fc37 	bl	88940 <__ssprint_r>
   860d2:	2800      	cmp	r0, #0
   860d4:	f47f ac9b 	bne.w	85a0e <_svfprintf_r+0x1ba>
   860d8:	46c8      	mov	r8, r9
   860da:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   860de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   860e0:	e533      	b.n	85b4a <_svfprintf_r+0x2f6>
   860e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   860e4:	2b65      	cmp	r3, #101	; 0x65
   860e6:	f340 809a 	ble.w	8621e <_svfprintf_r+0x9ca>
   860ea:	a815      	add	r0, sp, #84	; 0x54
   860ec:	c80d      	ldmia	r0, {r0, r2, r3}
   860ee:	9914      	ldr	r1, [sp, #80]	; 0x50
   860f0:	f003 f8fe 	bl	892f0 <__aeabi_dcmpeq>
   860f4:	2800      	cmp	r0, #0
   860f6:	f000 8193 	beq.w	86420 <_svfprintf_r+0xbcc>
   860fa:	2101      	movs	r1, #1
   860fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   860fe:	4ab5      	ldr	r2, [pc, #724]	; (863d4 <_svfprintf_r+0xb80>)
   86100:	440b      	add	r3, r1
   86102:	440c      	add	r4, r1
   86104:	2b07      	cmp	r3, #7
   86106:	9427      	str	r4, [sp, #156]	; 0x9c
   86108:	9326      	str	r3, [sp, #152]	; 0x98
   8610a:	f8c8 1004 	str.w	r1, [r8, #4]
   8610e:	f8c8 2000 	str.w	r2, [r8]
   86112:	f300 83c6 	bgt.w	868a2 <_svfprintf_r+0x104e>
   86116:	f108 0808 	add.w	r8, r8, #8
   8611a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8611c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8611e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86120:	4293      	cmp	r3, r2
   86122:	db03      	blt.n	8612c <_svfprintf_r+0x8d8>
   86124:	9b07      	ldr	r3, [sp, #28]
   86126:	07dd      	lsls	r5, r3, #31
   86128:	f57f ad86 	bpl.w	85c38 <_svfprintf_r+0x3e4>
   8612c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8612e:	9919      	ldr	r1, [sp, #100]	; 0x64
   86130:	3301      	adds	r3, #1
   86132:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   86134:	440c      	add	r4, r1
   86136:	2b07      	cmp	r3, #7
   86138:	f8c8 2000 	str.w	r2, [r8]
   8613c:	f8c8 1004 	str.w	r1, [r8, #4]
   86140:	9427      	str	r4, [sp, #156]	; 0x9c
   86142:	9326      	str	r3, [sp, #152]	; 0x98
   86144:	f300 83c4 	bgt.w	868d0 <_svfprintf_r+0x107c>
   86148:	f108 0808 	add.w	r8, r8, #8
   8614c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8614e:	1e5e      	subs	r6, r3, #1
   86150:	2e00      	cmp	r6, #0
   86152:	f77f ad71 	ble.w	85c38 <_svfprintf_r+0x3e4>
   86156:	2e10      	cmp	r6, #16
   86158:	f340 8575 	ble.w	86c46 <_svfprintf_r+0x13f2>
   8615c:	4622      	mov	r2, r4
   8615e:	2710      	movs	r7, #16
   86160:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86162:	4d9d      	ldr	r5, [pc, #628]	; (863d8 <_svfprintf_r+0xb84>)
   86164:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86168:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8616a:	e005      	b.n	86178 <_svfprintf_r+0x924>
   8616c:	f108 0808 	add.w	r8, r8, #8
   86170:	3e10      	subs	r6, #16
   86172:	2e10      	cmp	r6, #16
   86174:	f340 8225 	ble.w	865c2 <_svfprintf_r+0xd6e>
   86178:	3301      	adds	r3, #1
   8617a:	3210      	adds	r2, #16
   8617c:	2b07      	cmp	r3, #7
   8617e:	9227      	str	r2, [sp, #156]	; 0x9c
   86180:	9326      	str	r3, [sp, #152]	; 0x98
   86182:	e888 00a0 	stmia.w	r8, {r5, r7}
   86186:	ddf1      	ble.n	8616c <_svfprintf_r+0x918>
   86188:	aa25      	add	r2, sp, #148	; 0x94
   8618a:	4621      	mov	r1, r4
   8618c:	4658      	mov	r0, fp
   8618e:	f002 fbd7 	bl	88940 <__ssprint_r>
   86192:	2800      	cmp	r0, #0
   86194:	f47f ac3b 	bne.w	85a0e <_svfprintf_r+0x1ba>
   86198:	46c8      	mov	r8, r9
   8619a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8619c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8619e:	e7e7      	b.n	86170 <_svfprintf_r+0x91c>
   861a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   861a2:	9a08      	ldr	r2, [sp, #32]
   861a4:	1a9f      	subs	r7, r3, r2
   861a6:	2f00      	cmp	r7, #0
   861a8:	f77f acf6 	ble.w	85b98 <_svfprintf_r+0x344>
   861ac:	2f10      	cmp	r7, #16
   861ae:	f340 84a8 	ble.w	86b02 <_svfprintf_r+0x12ae>
   861b2:	4d89      	ldr	r5, [pc, #548]	; (863d8 <_svfprintf_r+0xb84>)
   861b4:	4642      	mov	r2, r8
   861b6:	4621      	mov	r1, r4
   861b8:	46b0      	mov	r8, r6
   861ba:	f04f 0b10 	mov.w	fp, #16
   861be:	462e      	mov	r6, r5
   861c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   861c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   861c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   861c6:	e004      	b.n	861d2 <_svfprintf_r+0x97e>
   861c8:	3f10      	subs	r7, #16
   861ca:	2f10      	cmp	r7, #16
   861cc:	f102 0208 	add.w	r2, r2, #8
   861d0:	dd15      	ble.n	861fe <_svfprintf_r+0x9aa>
   861d2:	3301      	adds	r3, #1
   861d4:	3110      	adds	r1, #16
   861d6:	2b07      	cmp	r3, #7
   861d8:	9127      	str	r1, [sp, #156]	; 0x9c
   861da:	9326      	str	r3, [sp, #152]	; 0x98
   861dc:	e882 0840 	stmia.w	r2, {r6, fp}
   861e0:	ddf2      	ble.n	861c8 <_svfprintf_r+0x974>
   861e2:	aa25      	add	r2, sp, #148	; 0x94
   861e4:	4629      	mov	r1, r5
   861e6:	4620      	mov	r0, r4
   861e8:	f002 fbaa 	bl	88940 <__ssprint_r>
   861ec:	2800      	cmp	r0, #0
   861ee:	f47f ac0e 	bne.w	85a0e <_svfprintf_r+0x1ba>
   861f2:	3f10      	subs	r7, #16
   861f4:	2f10      	cmp	r7, #16
   861f6:	464a      	mov	r2, r9
   861f8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   861fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   861fc:	dce9      	bgt.n	861d2 <_svfprintf_r+0x97e>
   861fe:	4635      	mov	r5, r6
   86200:	460c      	mov	r4, r1
   86202:	4646      	mov	r6, r8
   86204:	4690      	mov	r8, r2
   86206:	3301      	adds	r3, #1
   86208:	443c      	add	r4, r7
   8620a:	2b07      	cmp	r3, #7
   8620c:	9427      	str	r4, [sp, #156]	; 0x9c
   8620e:	9326      	str	r3, [sp, #152]	; 0x98
   86210:	e888 00a0 	stmia.w	r8, {r5, r7}
   86214:	f300 829e 	bgt.w	86754 <_svfprintf_r+0xf00>
   86218:	f108 0808 	add.w	r8, r8, #8
   8621c:	e4bc      	b.n	85b98 <_svfprintf_r+0x344>
   8621e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86220:	2b01      	cmp	r3, #1
   86222:	f340 824f 	ble.w	866c4 <_svfprintf_r+0xe70>
   86226:	2301      	movs	r3, #1
   86228:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8622a:	441c      	add	r4, r3
   8622c:	441f      	add	r7, r3
   8622e:	2f07      	cmp	r7, #7
   86230:	9427      	str	r4, [sp, #156]	; 0x9c
   86232:	f8c8 6000 	str.w	r6, [r8]
   86236:	9726      	str	r7, [sp, #152]	; 0x98
   86238:	f8c8 3004 	str.w	r3, [r8, #4]
   8623c:	f300 825f 	bgt.w	866fe <_svfprintf_r+0xeaa>
   86240:	f108 0808 	add.w	r8, r8, #8
   86244:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86246:	3701      	adds	r7, #1
   86248:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8624a:	4414      	add	r4, r2
   8624c:	2f07      	cmp	r7, #7
   8624e:	9427      	str	r4, [sp, #156]	; 0x9c
   86250:	9726      	str	r7, [sp, #152]	; 0x98
   86252:	f8c8 3000 	str.w	r3, [r8]
   86256:	f8c8 2004 	str.w	r2, [r8, #4]
   8625a:	f300 825c 	bgt.w	86716 <_svfprintf_r+0xec2>
   8625e:	f108 0808 	add.w	r8, r8, #8
   86262:	a815      	add	r0, sp, #84	; 0x54
   86264:	c80d      	ldmia	r0, {r0, r2, r3}
   86266:	9914      	ldr	r1, [sp, #80]	; 0x50
   86268:	f003 f842 	bl	892f0 <__aeabi_dcmpeq>
   8626c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8626e:	2800      	cmp	r0, #0
   86270:	f040 8141 	bne.w	864f6 <_svfprintf_r+0xca2>
   86274:	3b01      	subs	r3, #1
   86276:	3701      	adds	r7, #1
   86278:	3601      	adds	r6, #1
   8627a:	441c      	add	r4, r3
   8627c:	2f07      	cmp	r7, #7
   8627e:	f8c8 6000 	str.w	r6, [r8]
   86282:	9726      	str	r7, [sp, #152]	; 0x98
   86284:	9427      	str	r4, [sp, #156]	; 0x9c
   86286:	f8c8 3004 	str.w	r3, [r8, #4]
   8628a:	f300 8166 	bgt.w	8655a <_svfprintf_r+0xd06>
   8628e:	f108 0808 	add.w	r8, r8, #8
   86292:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   86294:	3701      	adds	r7, #1
   86296:	4414      	add	r4, r2
   86298:	ab21      	add	r3, sp, #132	; 0x84
   8629a:	2f07      	cmp	r7, #7
   8629c:	9427      	str	r4, [sp, #156]	; 0x9c
   8629e:	9726      	str	r7, [sp, #152]	; 0x98
   862a0:	f8c8 2004 	str.w	r2, [r8, #4]
   862a4:	f8c8 3000 	str.w	r3, [r8]
   862a8:	f77f acc4 	ble.w	85c34 <_svfprintf_r+0x3e0>
   862ac:	aa25      	add	r2, sp, #148	; 0x94
   862ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   862b0:	980c      	ldr	r0, [sp, #48]	; 0x30
   862b2:	f002 fb45 	bl	88940 <__ssprint_r>
   862b6:	2800      	cmp	r0, #0
   862b8:	f47f aba9 	bne.w	85a0e <_svfprintf_r+0x1ba>
   862bc:	46c8      	mov	r8, r9
   862be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   862c0:	e4ba      	b.n	85c38 <_svfprintf_r+0x3e4>
   862c2:	aa25      	add	r2, sp, #148	; 0x94
   862c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   862c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   862c8:	f002 fb3a 	bl	88940 <__ssprint_r>
   862cc:	2800      	cmp	r0, #0
   862ce:	f43f acfd 	beq.w	85ccc <_svfprintf_r+0x478>
   862d2:	f7ff bb9c 	b.w	85a0e <_svfprintf_r+0x1ba>
   862d6:	f8dd b01c 	ldr.w	fp, [sp, #28]
   862da:	2b01      	cmp	r3, #1
   862dc:	f000 817e 	beq.w	865dc <_svfprintf_r+0xd88>
   862e0:	2b02      	cmp	r3, #2
   862e2:	d171      	bne.n	863c8 <_svfprintf_r+0xb74>
   862e4:	f8cd b01c 	str.w	fp, [sp, #28]
   862e8:	2400      	movs	r4, #0
   862ea:	2500      	movs	r5, #0
   862ec:	e5d4      	b.n	85e98 <_svfprintf_r+0x644>
   862ee:	aa25      	add	r2, sp, #148	; 0x94
   862f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   862f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   862f4:	f002 fb24 	bl	88940 <__ssprint_r>
   862f8:	2800      	cmp	r0, #0
   862fa:	f47f ab88 	bne.w	85a0e <_svfprintf_r+0x1ba>
   862fe:	46c8      	mov	r8, r9
   86300:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86302:	e486      	b.n	85c12 <_svfprintf_r+0x3be>
   86304:	aa25      	add	r2, sp, #148	; 0x94
   86306:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86308:	980c      	ldr	r0, [sp, #48]	; 0x30
   8630a:	f002 fb19 	bl	88940 <__ssprint_r>
   8630e:	2800      	cmp	r0, #0
   86310:	f47f ab7d 	bne.w	85a0e <_svfprintf_r+0x1ba>
   86314:	46c8      	mov	r8, r9
   86316:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86318:	e429      	b.n	85b6e <_svfprintf_r+0x31a>
   8631a:	2001      	movs	r0, #1
   8631c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8631e:	4a2d      	ldr	r2, [pc, #180]	; (863d4 <_svfprintf_r+0xb80>)
   86320:	4403      	add	r3, r0
   86322:	4404      	add	r4, r0
   86324:	2b07      	cmp	r3, #7
   86326:	9427      	str	r4, [sp, #156]	; 0x9c
   86328:	9326      	str	r3, [sp, #152]	; 0x98
   8632a:	f8c8 0004 	str.w	r0, [r8, #4]
   8632e:	f8c8 2000 	str.w	r2, [r8]
   86332:	f340 82d8 	ble.w	868e6 <_svfprintf_r+0x1092>
   86336:	aa25      	add	r2, sp, #148	; 0x94
   86338:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8633a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8633c:	f002 fb00 	bl	88940 <__ssprint_r>
   86340:	2800      	cmp	r0, #0
   86342:	f47f ab64 	bne.w	85a0e <_svfprintf_r+0x1ba>
   86346:	46c8      	mov	r8, r9
   86348:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8634a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8634c:	b929      	cbnz	r1, 8635a <_svfprintf_r+0xb06>
   8634e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86350:	b91b      	cbnz	r3, 8635a <_svfprintf_r+0xb06>
   86352:	9b07      	ldr	r3, [sp, #28]
   86354:	07d8      	lsls	r0, r3, #31
   86356:	f57f ac6f 	bpl.w	85c38 <_svfprintf_r+0x3e4>
   8635a:	9819      	ldr	r0, [sp, #100]	; 0x64
   8635c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8635e:	4602      	mov	r2, r0
   86360:	3301      	adds	r3, #1
   86362:	4422      	add	r2, r4
   86364:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   86366:	2b07      	cmp	r3, #7
   86368:	9227      	str	r2, [sp, #156]	; 0x9c
   8636a:	f8c8 4000 	str.w	r4, [r8]
   8636e:	f8c8 0004 	str.w	r0, [r8, #4]
   86372:	9326      	str	r3, [sp, #152]	; 0x98
   86374:	f300 8431 	bgt.w	86bda <_svfprintf_r+0x1386>
   86378:	f108 0808 	add.w	r8, r8, #8
   8637c:	2900      	cmp	r1, #0
   8637e:	f2c0 8409 	blt.w	86b94 <_svfprintf_r+0x1340>
   86382:	9913      	ldr	r1, [sp, #76]	; 0x4c
   86384:	3301      	adds	r3, #1
   86386:	188c      	adds	r4, r1, r2
   86388:	2b07      	cmp	r3, #7
   8638a:	9427      	str	r4, [sp, #156]	; 0x9c
   8638c:	9326      	str	r3, [sp, #152]	; 0x98
   8638e:	f8c8 6000 	str.w	r6, [r8]
   86392:	f8c8 1004 	str.w	r1, [r8, #4]
   86396:	f77f ac4d 	ble.w	85c34 <_svfprintf_r+0x3e0>
   8639a:	aa25      	add	r2, sp, #148	; 0x94
   8639c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8639e:	980c      	ldr	r0, [sp, #48]	; 0x30
   863a0:	f002 face 	bl	88940 <__ssprint_r>
   863a4:	2800      	cmp	r0, #0
   863a6:	f47f ab32 	bne.w	85a0e <_svfprintf_r+0x1ba>
   863aa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   863ac:	46c8      	mov	r8, r9
   863ae:	e443      	b.n	85c38 <_svfprintf_r+0x3e4>
   863b0:	aa25      	add	r2, sp, #148	; 0x94
   863b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   863b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   863b6:	f002 fac3 	bl	88940 <__ssprint_r>
   863ba:	2800      	cmp	r0, #0
   863bc:	f47f ab27 	bne.w	85a0e <_svfprintf_r+0x1ba>
   863c0:	46c8      	mov	r8, r9
   863c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   863c4:	f7ff bbe5 	b.w	85b92 <_svfprintf_r+0x33e>
   863c8:	2400      	movs	r4, #0
   863ca:	2500      	movs	r5, #0
   863cc:	f8cd b01c 	str.w	fp, [sp, #28]
   863d0:	4649      	mov	r1, r9
   863d2:	e004      	b.n	863de <_svfprintf_r+0xb8a>
   863d4:	000898bc 	.word	0x000898bc
   863d8:	000898d0 	.word	0x000898d0
   863dc:	4631      	mov	r1, r6
   863de:	08e2      	lsrs	r2, r4, #3
   863e0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   863e4:	08e8      	lsrs	r0, r5, #3
   863e6:	f004 0307 	and.w	r3, r4, #7
   863ea:	4605      	mov	r5, r0
   863ec:	4614      	mov	r4, r2
   863ee:	3330      	adds	r3, #48	; 0x30
   863f0:	ea54 0205 	orrs.w	r2, r4, r5
   863f4:	f801 3c01 	strb.w	r3, [r1, #-1]
   863f8:	f101 36ff 	add.w	r6, r1, #4294967295
   863fc:	d1ee      	bne.n	863dc <_svfprintf_r+0xb88>
   863fe:	9a07      	ldr	r2, [sp, #28]
   86400:	07d2      	lsls	r2, r2, #31
   86402:	f57f ad59 	bpl.w	85eb8 <_svfprintf_r+0x664>
   86406:	2b30      	cmp	r3, #48	; 0x30
   86408:	f43f ad56 	beq.w	85eb8 <_svfprintf_r+0x664>
   8640c:	2330      	movs	r3, #48	; 0x30
   8640e:	3902      	subs	r1, #2
   86410:	f806 3c01 	strb.w	r3, [r6, #-1]
   86414:	eba9 0301 	sub.w	r3, r9, r1
   86418:	930e      	str	r3, [sp, #56]	; 0x38
   8641a:	460e      	mov	r6, r1
   8641c:	f7ff bb36 	b.w	85a8c <_svfprintf_r+0x238>
   86420:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86422:	2900      	cmp	r1, #0
   86424:	f77f af79 	ble.w	8631a <_svfprintf_r+0xac6>
   86428:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8642a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8642c:	4293      	cmp	r3, r2
   8642e:	bfa8      	it	ge
   86430:	4613      	movge	r3, r2
   86432:	2b00      	cmp	r3, #0
   86434:	461f      	mov	r7, r3
   86436:	dd0b      	ble.n	86450 <_svfprintf_r+0xbfc>
   86438:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8643a:	443c      	add	r4, r7
   8643c:	3301      	adds	r3, #1
   8643e:	2b07      	cmp	r3, #7
   86440:	9427      	str	r4, [sp, #156]	; 0x9c
   86442:	e888 00c0 	stmia.w	r8, {r6, r7}
   86446:	9326      	str	r3, [sp, #152]	; 0x98
   86448:	f300 82fb 	bgt.w	86a42 <_svfprintf_r+0x11ee>
   8644c:	f108 0808 	add.w	r8, r8, #8
   86450:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86452:	2f00      	cmp	r7, #0
   86454:	bfa8      	it	ge
   86456:	1bdb      	subge	r3, r3, r7
   86458:	2b00      	cmp	r3, #0
   8645a:	461f      	mov	r7, r3
   8645c:	f340 80d7 	ble.w	8660e <_svfprintf_r+0xdba>
   86460:	2b10      	cmp	r3, #16
   86462:	f340 8434 	ble.w	86cce <_svfprintf_r+0x147a>
   86466:	4dba      	ldr	r5, [pc, #744]	; (86750 <_svfprintf_r+0xefc>)
   86468:	4642      	mov	r2, r8
   8646a:	4621      	mov	r1, r4
   8646c:	46b0      	mov	r8, r6
   8646e:	f04f 0b10 	mov.w	fp, #16
   86472:	462e      	mov	r6, r5
   86474:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86476:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86478:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8647a:	e004      	b.n	86486 <_svfprintf_r+0xc32>
   8647c:	3208      	adds	r2, #8
   8647e:	3f10      	subs	r7, #16
   86480:	2f10      	cmp	r7, #16
   86482:	f340 80b5 	ble.w	865f0 <_svfprintf_r+0xd9c>
   86486:	3301      	adds	r3, #1
   86488:	3110      	adds	r1, #16
   8648a:	2b07      	cmp	r3, #7
   8648c:	9127      	str	r1, [sp, #156]	; 0x9c
   8648e:	9326      	str	r3, [sp, #152]	; 0x98
   86490:	e882 0840 	stmia.w	r2, {r6, fp}
   86494:	ddf2      	ble.n	8647c <_svfprintf_r+0xc28>
   86496:	aa25      	add	r2, sp, #148	; 0x94
   86498:	4629      	mov	r1, r5
   8649a:	4620      	mov	r0, r4
   8649c:	f002 fa50 	bl	88940 <__ssprint_r>
   864a0:	2800      	cmp	r0, #0
   864a2:	f47f aab4 	bne.w	85a0e <_svfprintf_r+0x1ba>
   864a6:	464a      	mov	r2, r9
   864a8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   864aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   864ac:	e7e7      	b.n	8647e <_svfprintf_r+0xc2a>
   864ae:	2d00      	cmp	r5, #0
   864b0:	bf08      	it	eq
   864b2:	2c0a      	cmpeq	r4, #10
   864b4:	f0c0 8090 	bcc.w	865d8 <_svfprintf_r+0xd84>
   864b8:	464e      	mov	r6, r9
   864ba:	4620      	mov	r0, r4
   864bc:	4629      	mov	r1, r5
   864be:	220a      	movs	r2, #10
   864c0:	2300      	movs	r3, #0
   864c2:	f002 ff85 	bl	893d0 <__aeabi_uldivmod>
   864c6:	3230      	adds	r2, #48	; 0x30
   864c8:	f806 2d01 	strb.w	r2, [r6, #-1]!
   864cc:	4620      	mov	r0, r4
   864ce:	4629      	mov	r1, r5
   864d0:	2300      	movs	r3, #0
   864d2:	220a      	movs	r2, #10
   864d4:	f002 ff7c 	bl	893d0 <__aeabi_uldivmod>
   864d8:	4604      	mov	r4, r0
   864da:	460d      	mov	r5, r1
   864dc:	ea54 0305 	orrs.w	r3, r4, r5
   864e0:	d1eb      	bne.n	864ba <_svfprintf_r+0xc66>
   864e2:	eba9 0306 	sub.w	r3, r9, r6
   864e6:	930e      	str	r3, [sp, #56]	; 0x38
   864e8:	f7ff bad0 	b.w	85a8c <_svfprintf_r+0x238>
   864ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   864ee:	464e      	mov	r6, r9
   864f0:	930e      	str	r3, [sp, #56]	; 0x38
   864f2:	f7ff bacb 	b.w	85a8c <_svfprintf_r+0x238>
   864f6:	1e5e      	subs	r6, r3, #1
   864f8:	2e00      	cmp	r6, #0
   864fa:	f77f aeca 	ble.w	86292 <_svfprintf_r+0xa3e>
   864fe:	2e10      	cmp	r6, #16
   86500:	f340 83e3 	ble.w	86cca <_svfprintf_r+0x1476>
   86504:	4622      	mov	r2, r4
   86506:	f04f 0b10 	mov.w	fp, #16
   8650a:	4d91      	ldr	r5, [pc, #580]	; (86750 <_svfprintf_r+0xefc>)
   8650c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8650e:	e004      	b.n	8651a <_svfprintf_r+0xcc6>
   86510:	3e10      	subs	r6, #16
   86512:	2e10      	cmp	r6, #16
   86514:	f108 0808 	add.w	r8, r8, #8
   86518:	dd15      	ble.n	86546 <_svfprintf_r+0xcf2>
   8651a:	3701      	adds	r7, #1
   8651c:	3210      	adds	r2, #16
   8651e:	2f07      	cmp	r7, #7
   86520:	9227      	str	r2, [sp, #156]	; 0x9c
   86522:	9726      	str	r7, [sp, #152]	; 0x98
   86524:	e888 0820 	stmia.w	r8, {r5, fp}
   86528:	ddf2      	ble.n	86510 <_svfprintf_r+0xcbc>
   8652a:	aa25      	add	r2, sp, #148	; 0x94
   8652c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8652e:	4620      	mov	r0, r4
   86530:	f002 fa06 	bl	88940 <__ssprint_r>
   86534:	2800      	cmp	r0, #0
   86536:	f47f aa6a 	bne.w	85a0e <_svfprintf_r+0x1ba>
   8653a:	3e10      	subs	r6, #16
   8653c:	2e10      	cmp	r6, #16
   8653e:	46c8      	mov	r8, r9
   86540:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86542:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86544:	dce9      	bgt.n	8651a <_svfprintf_r+0xcc6>
   86546:	4614      	mov	r4, r2
   86548:	3701      	adds	r7, #1
   8654a:	4434      	add	r4, r6
   8654c:	2f07      	cmp	r7, #7
   8654e:	9427      	str	r4, [sp, #156]	; 0x9c
   86550:	9726      	str	r7, [sp, #152]	; 0x98
   86552:	e888 0060 	stmia.w	r8, {r5, r6}
   86556:	f77f ae9a 	ble.w	8628e <_svfprintf_r+0xa3a>
   8655a:	aa25      	add	r2, sp, #148	; 0x94
   8655c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8655e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86560:	f002 f9ee 	bl	88940 <__ssprint_r>
   86564:	2800      	cmp	r0, #0
   86566:	f47f aa52 	bne.w	85a0e <_svfprintf_r+0x1ba>
   8656a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8656c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8656e:	46c8      	mov	r8, r9
   86570:	e68f      	b.n	86292 <_svfprintf_r+0xa3e>
   86572:	3204      	adds	r2, #4
   86574:	681c      	ldr	r4, [r3, #0]
   86576:	2500      	movs	r5, #0
   86578:	2301      	movs	r3, #1
   8657a:	920f      	str	r2, [sp, #60]	; 0x3c
   8657c:	f7ff ba68 	b.w	85a50 <_svfprintf_r+0x1fc>
   86580:	681c      	ldr	r4, [r3, #0]
   86582:	3304      	adds	r3, #4
   86584:	930f      	str	r3, [sp, #60]	; 0x3c
   86586:	2500      	movs	r5, #0
   86588:	e42a      	b.n	85de0 <_svfprintf_r+0x58c>
   8658a:	681c      	ldr	r4, [r3, #0]
   8658c:	3304      	adds	r3, #4
   8658e:	17e5      	asrs	r5, r4, #31
   86590:	4622      	mov	r2, r4
   86592:	930f      	str	r3, [sp, #60]	; 0x3c
   86594:	462b      	mov	r3, r5
   86596:	2a00      	cmp	r2, #0
   86598:	f173 0300 	sbcs.w	r3, r3, #0
   8659c:	f6bf ac68 	bge.w	85e70 <_svfprintf_r+0x61c>
   865a0:	272d      	movs	r7, #45	; 0x2d
   865a2:	4264      	negs	r4, r4
   865a4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   865a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   865ac:	2301      	movs	r3, #1
   865ae:	f7ff ba53 	b.w	85a58 <_svfprintf_r+0x204>
   865b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   865b4:	2500      	movs	r5, #0
   865b6:	460a      	mov	r2, r1
   865b8:	3204      	adds	r2, #4
   865ba:	680c      	ldr	r4, [r1, #0]
   865bc:	920f      	str	r2, [sp, #60]	; 0x3c
   865be:	f7ff ba47 	b.w	85a50 <_svfprintf_r+0x1fc>
   865c2:	4614      	mov	r4, r2
   865c4:	3301      	adds	r3, #1
   865c6:	4434      	add	r4, r6
   865c8:	2b07      	cmp	r3, #7
   865ca:	9427      	str	r4, [sp, #156]	; 0x9c
   865cc:	9326      	str	r3, [sp, #152]	; 0x98
   865ce:	e888 0060 	stmia.w	r8, {r5, r6}
   865d2:	f77f ab2f 	ble.w	85c34 <_svfprintf_r+0x3e0>
   865d6:	e6e0      	b.n	8639a <_svfprintf_r+0xb46>
   865d8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   865dc:	2301      	movs	r3, #1
   865de:	ae42      	add	r6, sp, #264	; 0x108
   865e0:	3430      	adds	r4, #48	; 0x30
   865e2:	f8cd b01c 	str.w	fp, [sp, #28]
   865e6:	f806 4d41 	strb.w	r4, [r6, #-65]!
   865ea:	930e      	str	r3, [sp, #56]	; 0x38
   865ec:	f7ff ba4e 	b.w	85a8c <_svfprintf_r+0x238>
   865f0:	4635      	mov	r5, r6
   865f2:	460c      	mov	r4, r1
   865f4:	4646      	mov	r6, r8
   865f6:	4690      	mov	r8, r2
   865f8:	3301      	adds	r3, #1
   865fa:	443c      	add	r4, r7
   865fc:	2b07      	cmp	r3, #7
   865fe:	9427      	str	r4, [sp, #156]	; 0x9c
   86600:	9326      	str	r3, [sp, #152]	; 0x98
   86602:	e888 00a0 	stmia.w	r8, {r5, r7}
   86606:	f300 8246 	bgt.w	86a96 <_svfprintf_r+0x1242>
   8660a:	f108 0808 	add.w	r8, r8, #8
   8660e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86612:	429a      	cmp	r2, r3
   86614:	db45      	blt.n	866a2 <_svfprintf_r+0xe4e>
   86616:	9b07      	ldr	r3, [sp, #28]
   86618:	07d9      	lsls	r1, r3, #31
   8661a:	d442      	bmi.n	866a2 <_svfprintf_r+0xe4e>
   8661c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8661e:	9812      	ldr	r0, [sp, #72]	; 0x48
   86620:	1a9a      	subs	r2, r3, r2
   86622:	1a1d      	subs	r5, r3, r0
   86624:	4295      	cmp	r5, r2
   86626:	bfa8      	it	ge
   86628:	4615      	movge	r5, r2
   8662a:	2d00      	cmp	r5, #0
   8662c:	dd0e      	ble.n	8664c <_svfprintf_r+0xdf8>
   8662e:	9926      	ldr	r1, [sp, #152]	; 0x98
   86630:	4406      	add	r6, r0
   86632:	3101      	adds	r1, #1
   86634:	442c      	add	r4, r5
   86636:	2907      	cmp	r1, #7
   86638:	f8c8 6000 	str.w	r6, [r8]
   8663c:	9427      	str	r4, [sp, #156]	; 0x9c
   8663e:	f8c8 5004 	str.w	r5, [r8, #4]
   86642:	9126      	str	r1, [sp, #152]	; 0x98
   86644:	f300 8216 	bgt.w	86a74 <_svfprintf_r+0x1220>
   86648:	f108 0808 	add.w	r8, r8, #8
   8664c:	2d00      	cmp	r5, #0
   8664e:	bfb4      	ite	lt
   86650:	4616      	movlt	r6, r2
   86652:	1b56      	subge	r6, r2, r5
   86654:	2e00      	cmp	r6, #0
   86656:	f77f aaef 	ble.w	85c38 <_svfprintf_r+0x3e4>
   8665a:	2e10      	cmp	r6, #16
   8665c:	f340 82f3 	ble.w	86c46 <_svfprintf_r+0x13f2>
   86660:	4622      	mov	r2, r4
   86662:	2710      	movs	r7, #16
   86664:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86666:	4d3a      	ldr	r5, [pc, #232]	; (86750 <_svfprintf_r+0xefc>)
   86668:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8666c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8666e:	e004      	b.n	8667a <_svfprintf_r+0xe26>
   86670:	f108 0808 	add.w	r8, r8, #8
   86674:	3e10      	subs	r6, #16
   86676:	2e10      	cmp	r6, #16
   86678:	dda3      	ble.n	865c2 <_svfprintf_r+0xd6e>
   8667a:	3301      	adds	r3, #1
   8667c:	3210      	adds	r2, #16
   8667e:	2b07      	cmp	r3, #7
   86680:	9227      	str	r2, [sp, #156]	; 0x9c
   86682:	9326      	str	r3, [sp, #152]	; 0x98
   86684:	e888 00a0 	stmia.w	r8, {r5, r7}
   86688:	ddf2      	ble.n	86670 <_svfprintf_r+0xe1c>
   8668a:	aa25      	add	r2, sp, #148	; 0x94
   8668c:	4621      	mov	r1, r4
   8668e:	4658      	mov	r0, fp
   86690:	f002 f956 	bl	88940 <__ssprint_r>
   86694:	2800      	cmp	r0, #0
   86696:	f47f a9ba 	bne.w	85a0e <_svfprintf_r+0x1ba>
   8669a:	46c8      	mov	r8, r9
   8669c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8669e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   866a0:	e7e8      	b.n	86674 <_svfprintf_r+0xe20>
   866a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   866a4:	9819      	ldr	r0, [sp, #100]	; 0x64
   866a6:	3301      	adds	r3, #1
   866a8:	991a      	ldr	r1, [sp, #104]	; 0x68
   866aa:	4404      	add	r4, r0
   866ac:	2b07      	cmp	r3, #7
   866ae:	9427      	str	r4, [sp, #156]	; 0x9c
   866b0:	f8c8 1000 	str.w	r1, [r8]
   866b4:	f8c8 0004 	str.w	r0, [r8, #4]
   866b8:	9326      	str	r3, [sp, #152]	; 0x98
   866ba:	f300 81cf 	bgt.w	86a5c <_svfprintf_r+0x1208>
   866be:	f108 0808 	add.w	r8, r8, #8
   866c2:	e7ab      	b.n	8661c <_svfprintf_r+0xdc8>
   866c4:	9b07      	ldr	r3, [sp, #28]
   866c6:	07da      	lsls	r2, r3, #31
   866c8:	f53f adad 	bmi.w	86226 <_svfprintf_r+0x9d2>
   866cc:	2301      	movs	r3, #1
   866ce:	9f26      	ldr	r7, [sp, #152]	; 0x98
   866d0:	441c      	add	r4, r3
   866d2:	441f      	add	r7, r3
   866d4:	2f07      	cmp	r7, #7
   866d6:	9427      	str	r4, [sp, #156]	; 0x9c
   866d8:	f8c8 6000 	str.w	r6, [r8]
   866dc:	9726      	str	r7, [sp, #152]	; 0x98
   866de:	f8c8 3004 	str.w	r3, [r8, #4]
   866e2:	f77f add4 	ble.w	8628e <_svfprintf_r+0xa3a>
   866e6:	aa25      	add	r2, sp, #148	; 0x94
   866e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   866ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   866ec:	f002 f928 	bl	88940 <__ssprint_r>
   866f0:	2800      	cmp	r0, #0
   866f2:	f47f a98c 	bne.w	85a0e <_svfprintf_r+0x1ba>
   866f6:	46c8      	mov	r8, r9
   866f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   866fa:	9f26      	ldr	r7, [sp, #152]	; 0x98
   866fc:	e5c9      	b.n	86292 <_svfprintf_r+0xa3e>
   866fe:	aa25      	add	r2, sp, #148	; 0x94
   86700:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86702:	980c      	ldr	r0, [sp, #48]	; 0x30
   86704:	f002 f91c 	bl	88940 <__ssprint_r>
   86708:	2800      	cmp	r0, #0
   8670a:	f47f a980 	bne.w	85a0e <_svfprintf_r+0x1ba>
   8670e:	46c8      	mov	r8, r9
   86710:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86712:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86714:	e596      	b.n	86244 <_svfprintf_r+0x9f0>
   86716:	aa25      	add	r2, sp, #148	; 0x94
   86718:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8671a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8671c:	f002 f910 	bl	88940 <__ssprint_r>
   86720:	2800      	cmp	r0, #0
   86722:	f47f a974 	bne.w	85a0e <_svfprintf_r+0x1ba>
   86726:	46c8      	mov	r8, r9
   86728:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8672a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8672c:	e599      	b.n	86262 <_svfprintf_r+0xa0e>
   8672e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86730:	3407      	adds	r4, #7
   86732:	f024 0407 	bic.w	r4, r4, #7
   86736:	f104 0108 	add.w	r1, r4, #8
   8673a:	e9d4 2300 	ldrd	r2, r3, [r4]
   8673e:	910f      	str	r1, [sp, #60]	; 0x3c
   86740:	4614      	mov	r4, r2
   86742:	461d      	mov	r5, r3
   86744:	f7ff bb8f 	b.w	85e66 <_svfprintf_r+0x612>
   86748:	464e      	mov	r6, r9
   8674a:	f7ff b99f 	b.w	85a8c <_svfprintf_r+0x238>
   8674e:	bf00      	nop
   86750:	000898d0 	.word	0x000898d0
   86754:	aa25      	add	r2, sp, #148	; 0x94
   86756:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86758:	980c      	ldr	r0, [sp, #48]	; 0x30
   8675a:	f002 f8f1 	bl	88940 <__ssprint_r>
   8675e:	2800      	cmp	r0, #0
   86760:	f47f a955 	bne.w	85a0e <_svfprintf_r+0x1ba>
   86764:	46c8      	mov	r8, r9
   86766:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86768:	f7ff ba16 	b.w	85b98 <_svfprintf_r+0x344>
   8676c:	9c15      	ldr	r4, [sp, #84]	; 0x54
   8676e:	4622      	mov	r2, r4
   86770:	4620      	mov	r0, r4
   86772:	9c14      	ldr	r4, [sp, #80]	; 0x50
   86774:	4623      	mov	r3, r4
   86776:	4621      	mov	r1, r4
   86778:	f002 fdec 	bl	89354 <__aeabi_dcmpun>
   8677c:	2800      	cmp	r0, #0
   8677e:	f040 8273 	bne.w	86c68 <_svfprintf_r+0x1414>
   86782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86784:	3301      	adds	r3, #1
   86786:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86788:	f023 0320 	bic.w	r3, r3, #32
   8678c:	930e      	str	r3, [sp, #56]	; 0x38
   8678e:	f000 819c 	beq.w	86aca <_svfprintf_r+0x1276>
   86792:	2b47      	cmp	r3, #71	; 0x47
   86794:	f000 80d6 	beq.w	86944 <_svfprintf_r+0x10f0>
   86798:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   8679c:	9307      	str	r3, [sp, #28]
   8679e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   867a0:	1e1f      	subs	r7, r3, #0
   867a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   867a4:	9308      	str	r3, [sp, #32]
   867a6:	bfb7      	itett	lt
   867a8:	463b      	movlt	r3, r7
   867aa:	2300      	movge	r3, #0
   867ac:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   867b0:	232d      	movlt	r3, #45	; 0x2d
   867b2:	9310      	str	r3, [sp, #64]	; 0x40
   867b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   867b6:	2b66      	cmp	r3, #102	; 0x66
   867b8:	f000 8190 	beq.w	86adc <_svfprintf_r+0x1288>
   867bc:	2b46      	cmp	r3, #70	; 0x46
   867be:	f000 80a4 	beq.w	8690a <_svfprintf_r+0x10b6>
   867c2:	2002      	movs	r0, #2
   867c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867c6:	a923      	add	r1, sp, #140	; 0x8c
   867c8:	2b45      	cmp	r3, #69	; 0x45
   867ca:	bf0a      	itet	eq
   867cc:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   867ce:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   867d0:	1c5d      	addeq	r5, r3, #1
   867d2:	e88d 0021 	stmia.w	sp, {r0, r5}
   867d6:	9104      	str	r1, [sp, #16]
   867d8:	a820      	add	r0, sp, #128	; 0x80
   867da:	a91f      	add	r1, sp, #124	; 0x7c
   867dc:	463b      	mov	r3, r7
   867de:	9003      	str	r0, [sp, #12]
   867e0:	9a08      	ldr	r2, [sp, #32]
   867e2:	9102      	str	r1, [sp, #8]
   867e4:	980c      	ldr	r0, [sp, #48]	; 0x30
   867e6:	f000 fb5b 	bl	86ea0 <_dtoa_r>
   867ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   867ec:	4606      	mov	r6, r0
   867ee:	2b67      	cmp	r3, #103	; 0x67
   867f0:	f040 81ba 	bne.w	86b68 <_svfprintf_r+0x1314>
   867f4:	f01b 0f01 	tst.w	fp, #1
   867f8:	f000 8223 	beq.w	86c42 <_svfprintf_r+0x13ee>
   867fc:	1974      	adds	r4, r6, r5
   867fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86800:	9808      	ldr	r0, [sp, #32]
   86802:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86804:	4639      	mov	r1, r7
   86806:	f002 fd73 	bl	892f0 <__aeabi_dcmpeq>
   8680a:	2800      	cmp	r0, #0
   8680c:	f040 8124 	bne.w	86a58 <_svfprintf_r+0x1204>
   86810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86812:	42a3      	cmp	r3, r4
   86814:	d206      	bcs.n	86824 <_svfprintf_r+0xfd0>
   86816:	2130      	movs	r1, #48	; 0x30
   86818:	1c5a      	adds	r2, r3, #1
   8681a:	9223      	str	r2, [sp, #140]	; 0x8c
   8681c:	7019      	strb	r1, [r3, #0]
   8681e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86820:	429c      	cmp	r4, r3
   86822:	d8f9      	bhi.n	86818 <_svfprintf_r+0xfc4>
   86824:	1b9b      	subs	r3, r3, r6
   86826:	9313      	str	r3, [sp, #76]	; 0x4c
   86828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8682a:	2b47      	cmp	r3, #71	; 0x47
   8682c:	f000 80a2 	beq.w	86974 <_svfprintf_r+0x1120>
   86830:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86832:	2b65      	cmp	r3, #101	; 0x65
   86834:	f340 81a7 	ble.w	86b86 <_svfprintf_r+0x1332>
   86838:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8683a:	2b66      	cmp	r3, #102	; 0x66
   8683c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8683e:	9312      	str	r3, [sp, #72]	; 0x48
   86840:	f000 8171 	beq.w	86b26 <_svfprintf_r+0x12d2>
   86844:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86846:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86848:	4619      	mov	r1, r3
   8684a:	4291      	cmp	r1, r2
   8684c:	f300 815d 	bgt.w	86b0a <_svfprintf_r+0x12b6>
   86850:	f01b 0f01 	tst.w	fp, #1
   86854:	f040 81f0 	bne.w	86c38 <_svfprintf_r+0x13e4>
   86858:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8685c:	9308      	str	r3, [sp, #32]
   8685e:	2367      	movs	r3, #103	; 0x67
   86860:	920e      	str	r2, [sp, #56]	; 0x38
   86862:	9311      	str	r3, [sp, #68]	; 0x44
   86864:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86866:	2b00      	cmp	r3, #0
   86868:	d17d      	bne.n	86966 <_svfprintf_r+0x1112>
   8686a:	930a      	str	r3, [sp, #40]	; 0x28
   8686c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86870:	f7ff b914 	b.w	85a9c <_svfprintf_r+0x248>
   86874:	f024 0407 	bic.w	r4, r4, #7
   86878:	6823      	ldr	r3, [r4, #0]
   8687a:	9315      	str	r3, [sp, #84]	; 0x54
   8687c:	6863      	ldr	r3, [r4, #4]
   8687e:	9314      	str	r3, [sp, #80]	; 0x50
   86880:	f104 0308 	add.w	r3, r4, #8
   86884:	930f      	str	r3, [sp, #60]	; 0x3c
   86886:	f7ff bb2f 	b.w	85ee8 <_svfprintf_r+0x694>
   8688a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8688c:	6813      	ldr	r3, [r2, #0]
   8688e:	3204      	adds	r2, #4
   86890:	920f      	str	r2, [sp, #60]	; 0x3c
   86892:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86894:	601a      	str	r2, [r3, #0]
   86896:	f7ff b804 	b.w	858a2 <_svfprintf_r+0x4e>
   8689a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8689c:	4daf      	ldr	r5, [pc, #700]	; (86b5c <_svfprintf_r+0x1308>)
   8689e:	f7ff b9ad 	b.w	85bfc <_svfprintf_r+0x3a8>
   868a2:	aa25      	add	r2, sp, #148	; 0x94
   868a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   868a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   868a8:	f002 f84a 	bl	88940 <__ssprint_r>
   868ac:	2800      	cmp	r0, #0
   868ae:	f47f a8ae 	bne.w	85a0e <_svfprintf_r+0x1ba>
   868b2:	46c8      	mov	r8, r9
   868b4:	e431      	b.n	8611a <_svfprintf_r+0x8c6>
   868b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   868b8:	4613      	mov	r3, r2
   868ba:	3304      	adds	r3, #4
   868bc:	930f      	str	r3, [sp, #60]	; 0x3c
   868be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   868c0:	6811      	ldr	r1, [r2, #0]
   868c2:	17dd      	asrs	r5, r3, #31
   868c4:	461a      	mov	r2, r3
   868c6:	462b      	mov	r3, r5
   868c8:	e9c1 2300 	strd	r2, r3, [r1]
   868cc:	f7fe bfe9 	b.w	858a2 <_svfprintf_r+0x4e>
   868d0:	aa25      	add	r2, sp, #148	; 0x94
   868d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   868d4:	980c      	ldr	r0, [sp, #48]	; 0x30
   868d6:	f002 f833 	bl	88940 <__ssprint_r>
   868da:	2800      	cmp	r0, #0
   868dc:	f47f a897 	bne.w	85a0e <_svfprintf_r+0x1ba>
   868e0:	46c8      	mov	r8, r9
   868e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   868e4:	e432      	b.n	8614c <_svfprintf_r+0x8f8>
   868e6:	f108 0808 	add.w	r8, r8, #8
   868ea:	e52f      	b.n	8634c <_svfprintf_r+0xaf8>
   868ec:	2140      	movs	r1, #64	; 0x40
   868ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   868f0:	f001 fa24 	bl	87d3c <_malloc_r>
   868f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   868f6:	6010      	str	r0, [r2, #0]
   868f8:	6110      	str	r0, [r2, #16]
   868fa:	2800      	cmp	r0, #0
   868fc:	f000 8214 	beq.w	86d28 <_svfprintf_r+0x14d4>
   86900:	2340      	movs	r3, #64	; 0x40
   86902:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86904:	6153      	str	r3, [r2, #20]
   86906:	f7fe bfbc 	b.w	85882 <_svfprintf_r+0x2e>
   8690a:	2003      	movs	r0, #3
   8690c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8690e:	a923      	add	r1, sp, #140	; 0x8c
   86910:	e88d 0011 	stmia.w	sp, {r0, r4}
   86914:	9104      	str	r1, [sp, #16]
   86916:	a820      	add	r0, sp, #128	; 0x80
   86918:	a91f      	add	r1, sp, #124	; 0x7c
   8691a:	9003      	str	r0, [sp, #12]
   8691c:	9a08      	ldr	r2, [sp, #32]
   8691e:	463b      	mov	r3, r7
   86920:	9102      	str	r1, [sp, #8]
   86922:	980c      	ldr	r0, [sp, #48]	; 0x30
   86924:	f000 fabc 	bl	86ea0 <_dtoa_r>
   86928:	4625      	mov	r5, r4
   8692a:	4606      	mov	r6, r0
   8692c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8692e:	1974      	adds	r4, r6, r5
   86930:	2b46      	cmp	r3, #70	; 0x46
   86932:	f47f af64 	bne.w	867fe <_svfprintf_r+0xfaa>
   86936:	7833      	ldrb	r3, [r6, #0]
   86938:	2b30      	cmp	r3, #48	; 0x30
   8693a:	f000 8187 	beq.w	86c4c <_svfprintf_r+0x13f8>
   8693e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   86940:	442c      	add	r4, r5
   86942:	e75c      	b.n	867fe <_svfprintf_r+0xfaa>
   86944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86946:	2b00      	cmp	r3, #0
   86948:	bf08      	it	eq
   8694a:	2301      	moveq	r3, #1
   8694c:	930a      	str	r3, [sp, #40]	; 0x28
   8694e:	e723      	b.n	86798 <_svfprintf_r+0xf44>
   86950:	4630      	mov	r0, r6
   86952:	950a      	str	r5, [sp, #40]	; 0x28
   86954:	f7fe ff50 	bl	857f8 <strlen>
   86958:	940f      	str	r4, [sp, #60]	; 0x3c
   8695a:	900e      	str	r0, [sp, #56]	; 0x38
   8695c:	f8cd b01c 	str.w	fp, [sp, #28]
   86960:	4603      	mov	r3, r0
   86962:	f7ff b9e7 	b.w	85d34 <_svfprintf_r+0x4e0>
   86966:	272d      	movs	r7, #45	; 0x2d
   86968:	2300      	movs	r3, #0
   8696a:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   8696e:	930a      	str	r3, [sp, #40]	; 0x28
   86970:	f7ff b895 	b.w	85a9e <_svfprintf_r+0x24a>
   86974:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86976:	461a      	mov	r2, r3
   86978:	9312      	str	r3, [sp, #72]	; 0x48
   8697a:	3303      	adds	r3, #3
   8697c:	db04      	blt.n	86988 <_svfprintf_r+0x1134>
   8697e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86980:	4619      	mov	r1, r3
   86982:	4291      	cmp	r1, r2
   86984:	f6bf af5e 	bge.w	86844 <_svfprintf_r+0xff0>
   86988:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8698a:	3b02      	subs	r3, #2
   8698c:	9311      	str	r3, [sp, #68]	; 0x44
   8698e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86990:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   86994:	3b01      	subs	r3, #1
   86996:	2b00      	cmp	r3, #0
   86998:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   8699c:	bfb4      	ite	lt
   8699e:	222d      	movlt	r2, #45	; 0x2d
   869a0:	222b      	movge	r2, #43	; 0x2b
   869a2:	931f      	str	r3, [sp, #124]	; 0x7c
   869a4:	bfb8      	it	lt
   869a6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   869a8:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   869ac:	bfb8      	it	lt
   869ae:	f1c3 0301 	rsblt	r3, r3, #1
   869b2:	2b09      	cmp	r3, #9
   869b4:	f340 811f 	ble.w	86bf6 <_svfprintf_r+0x13a2>
   869b8:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   869bc:	4601      	mov	r1, r0
   869be:	4c68      	ldr	r4, [pc, #416]	; (86b60 <_svfprintf_r+0x130c>)
   869c0:	e000      	b.n	869c4 <_svfprintf_r+0x1170>
   869c2:	4611      	mov	r1, r2
   869c4:	fb84 5203 	smull	r5, r2, r4, r3
   869c8:	17dd      	asrs	r5, r3, #31
   869ca:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   869ce:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   869d2:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   869d6:	3230      	adds	r2, #48	; 0x30
   869d8:	2d09      	cmp	r5, #9
   869da:	f801 2c01 	strb.w	r2, [r1, #-1]
   869de:	462b      	mov	r3, r5
   869e0:	f101 32ff 	add.w	r2, r1, #4294967295
   869e4:	dced      	bgt.n	869c2 <_svfprintf_r+0x116e>
   869e6:	3330      	adds	r3, #48	; 0x30
   869e8:	3902      	subs	r1, #2
   869ea:	b2dc      	uxtb	r4, r3
   869ec:	4288      	cmp	r0, r1
   869ee:	f802 4c01 	strb.w	r4, [r2, #-1]
   869f2:	f240 8192 	bls.w	86d1a <_svfprintf_r+0x14c6>
   869f6:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   869fa:	4613      	mov	r3, r2
   869fc:	e001      	b.n	86a02 <_svfprintf_r+0x11ae>
   869fe:	f813 4b01 	ldrb.w	r4, [r3], #1
   86a02:	4283      	cmp	r3, r0
   86a04:	f801 4b01 	strb.w	r4, [r1], #1
   86a08:	d1f9      	bne.n	869fe <_svfprintf_r+0x11aa>
   86a0a:	3301      	adds	r3, #1
   86a0c:	1a9b      	subs	r3, r3, r2
   86a0e:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   86a12:	4413      	add	r3, r2
   86a14:	aa21      	add	r2, sp, #132	; 0x84
   86a16:	1a9b      	subs	r3, r3, r2
   86a18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86a1a:	931b      	str	r3, [sp, #108]	; 0x6c
   86a1c:	2a01      	cmp	r2, #1
   86a1e:	4413      	add	r3, r2
   86a20:	930e      	str	r3, [sp, #56]	; 0x38
   86a22:	f340 8148 	ble.w	86cb6 <_svfprintf_r+0x1462>
   86a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a28:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86a2a:	4413      	add	r3, r2
   86a2c:	930e      	str	r3, [sp, #56]	; 0x38
   86a2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86a32:	9308      	str	r3, [sp, #32]
   86a34:	2300      	movs	r3, #0
   86a36:	9312      	str	r3, [sp, #72]	; 0x48
   86a38:	e714      	b.n	86864 <_svfprintf_r+0x1010>
   86a3a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86a3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86a3e:	f7ff b876 	b.w	85b2e <_svfprintf_r+0x2da>
   86a42:	aa25      	add	r2, sp, #148	; 0x94
   86a44:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86a46:	980c      	ldr	r0, [sp, #48]	; 0x30
   86a48:	f001 ff7a 	bl	88940 <__ssprint_r>
   86a4c:	2800      	cmp	r0, #0
   86a4e:	f47e afde 	bne.w	85a0e <_svfprintf_r+0x1ba>
   86a52:	46c8      	mov	r8, r9
   86a54:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86a56:	e4fb      	b.n	86450 <_svfprintf_r+0xbfc>
   86a58:	4623      	mov	r3, r4
   86a5a:	e6e3      	b.n	86824 <_svfprintf_r+0xfd0>
   86a5c:	aa25      	add	r2, sp, #148	; 0x94
   86a5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86a60:	980c      	ldr	r0, [sp, #48]	; 0x30
   86a62:	f001 ff6d 	bl	88940 <__ssprint_r>
   86a66:	2800      	cmp	r0, #0
   86a68:	f47e afd1 	bne.w	85a0e <_svfprintf_r+0x1ba>
   86a6c:	46c8      	mov	r8, r9
   86a6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86a70:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86a72:	e5d3      	b.n	8661c <_svfprintf_r+0xdc8>
   86a74:	aa25      	add	r2, sp, #148	; 0x94
   86a76:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86a78:	980c      	ldr	r0, [sp, #48]	; 0x30
   86a7a:	f001 ff61 	bl	88940 <__ssprint_r>
   86a7e:	2800      	cmp	r0, #0
   86a80:	f47e afc5 	bne.w	85a0e <_svfprintf_r+0x1ba>
   86a84:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86a86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86a88:	46c8      	mov	r8, r9
   86a8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86a8c:	1a9a      	subs	r2, r3, r2
   86a8e:	e5dd      	b.n	8664c <_svfprintf_r+0xdf8>
   86a90:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86a92:	f7ff b8fe 	b.w	85c92 <_svfprintf_r+0x43e>
   86a96:	aa25      	add	r2, sp, #148	; 0x94
   86a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86a9a:	980c      	ldr	r0, [sp, #48]	; 0x30
   86a9c:	f001 ff50 	bl	88940 <__ssprint_r>
   86aa0:	2800      	cmp	r0, #0
   86aa2:	f47e afb4 	bne.w	85a0e <_svfprintf_r+0x1ba>
   86aa6:	46c8      	mov	r8, r9
   86aa8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86aaa:	e5b0      	b.n	8660e <_svfprintf_r+0xdba>
   86aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86aae:	4637      	mov	r7, r6
   86ab0:	2b06      	cmp	r3, #6
   86ab2:	bf28      	it	cs
   86ab4:	2306      	movcs	r3, #6
   86ab6:	960a      	str	r6, [sp, #40]	; 0x28
   86ab8:	9612      	str	r6, [sp, #72]	; 0x48
   86aba:	9308      	str	r3, [sp, #32]
   86abc:	940f      	str	r4, [sp, #60]	; 0x3c
   86abe:	f8cd b01c 	str.w	fp, [sp, #28]
   86ac2:	930e      	str	r3, [sp, #56]	; 0x38
   86ac4:	4e27      	ldr	r6, [pc, #156]	; (86b64 <_svfprintf_r+0x1310>)
   86ac6:	f7fe bfe9 	b.w	85a9c <_svfprintf_r+0x248>
   86aca:	2306      	movs	r3, #6
   86acc:	930a      	str	r3, [sp, #40]	; 0x28
   86ace:	e663      	b.n	86798 <_svfprintf_r+0xf44>
   86ad0:	232d      	movs	r3, #45	; 0x2d
   86ad2:	461f      	mov	r7, r3
   86ad4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   86ad8:	f7ff ba28 	b.w	85f2c <_svfprintf_r+0x6d8>
   86adc:	2003      	movs	r0, #3
   86ade:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86ae0:	a923      	add	r1, sp, #140	; 0x8c
   86ae2:	e88d 0011 	stmia.w	sp, {r0, r4}
   86ae6:	9104      	str	r1, [sp, #16]
   86ae8:	a820      	add	r0, sp, #128	; 0x80
   86aea:	a91f      	add	r1, sp, #124	; 0x7c
   86aec:	9003      	str	r0, [sp, #12]
   86aee:	9a08      	ldr	r2, [sp, #32]
   86af0:	463b      	mov	r3, r7
   86af2:	9102      	str	r1, [sp, #8]
   86af4:	980c      	ldr	r0, [sp, #48]	; 0x30
   86af6:	f000 f9d3 	bl	86ea0 <_dtoa_r>
   86afa:	4625      	mov	r5, r4
   86afc:	4606      	mov	r6, r0
   86afe:	1904      	adds	r4, r0, r4
   86b00:	e719      	b.n	86936 <_svfprintf_r+0x10e2>
   86b02:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86b04:	4d15      	ldr	r5, [pc, #84]	; (86b5c <_svfprintf_r+0x1308>)
   86b06:	f7ff bb7e 	b.w	86206 <_svfprintf_r+0x9b2>
   86b0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86b0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86b0e:	4413      	add	r3, r2
   86b10:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86b12:	930e      	str	r3, [sp, #56]	; 0x38
   86b14:	2a00      	cmp	r2, #0
   86b16:	f340 80c7 	ble.w	86ca8 <_svfprintf_r+0x1454>
   86b1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86b1e:	9308      	str	r3, [sp, #32]
   86b20:	2367      	movs	r3, #103	; 0x67
   86b22:	9311      	str	r3, [sp, #68]	; 0x44
   86b24:	e69e      	b.n	86864 <_svfprintf_r+0x1010>
   86b26:	2b00      	cmp	r3, #0
   86b28:	f340 80e1 	ble.w	86cee <_svfprintf_r+0x149a>
   86b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86b2e:	2a00      	cmp	r2, #0
   86b30:	f040 80b0 	bne.w	86c94 <_svfprintf_r+0x1440>
   86b34:	f01b 0f01 	tst.w	fp, #1
   86b38:	f040 80ac 	bne.w	86c94 <_svfprintf_r+0x1440>
   86b3c:	9308      	str	r3, [sp, #32]
   86b3e:	930e      	str	r3, [sp, #56]	; 0x38
   86b40:	e690      	b.n	86864 <_svfprintf_r+0x1010>
   86b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86b44:	940f      	str	r4, [sp, #60]	; 0x3c
   86b46:	9308      	str	r3, [sp, #32]
   86b48:	930e      	str	r3, [sp, #56]	; 0x38
   86b4a:	900a      	str	r0, [sp, #40]	; 0x28
   86b4c:	f8cd b01c 	str.w	fp, [sp, #28]
   86b50:	9012      	str	r0, [sp, #72]	; 0x48
   86b52:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86b56:	f7fe bfa1 	b.w	85a9c <_svfprintf_r+0x248>
   86b5a:	bf00      	nop
   86b5c:	000898d0 	.word	0x000898d0
   86b60:	66666667 	.word	0x66666667
   86b64:	000898b4 	.word	0x000898b4
   86b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86b6a:	2b47      	cmp	r3, #71	; 0x47
   86b6c:	f47f ae46 	bne.w	867fc <_svfprintf_r+0xfa8>
   86b70:	f01b 0f01 	tst.w	fp, #1
   86b74:	f47f aeda 	bne.w	8692c <_svfprintf_r+0x10d8>
   86b78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86b7a:	1b9b      	subs	r3, r3, r6
   86b7c:	9313      	str	r3, [sp, #76]	; 0x4c
   86b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86b80:	2b47      	cmp	r3, #71	; 0x47
   86b82:	f43f aef7 	beq.w	86974 <_svfprintf_r+0x1120>
   86b86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86b88:	9312      	str	r3, [sp, #72]	; 0x48
   86b8a:	e700      	b.n	8698e <_svfprintf_r+0x113a>
   86b8c:	2000      	movs	r0, #0
   86b8e:	900a      	str	r0, [sp, #40]	; 0x28
   86b90:	f7fe bebc 	b.w	8590c <_svfprintf_r+0xb8>
   86b94:	424f      	negs	r7, r1
   86b96:	3110      	adds	r1, #16
   86b98:	da35      	bge.n	86c06 <_svfprintf_r+0x13b2>
   86b9a:	2410      	movs	r4, #16
   86b9c:	4d6a      	ldr	r5, [pc, #424]	; (86d48 <_svfprintf_r+0x14f4>)
   86b9e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86ba2:	e004      	b.n	86bae <_svfprintf_r+0x135a>
   86ba4:	f108 0808 	add.w	r8, r8, #8
   86ba8:	3f10      	subs	r7, #16
   86baa:	2f10      	cmp	r7, #16
   86bac:	dd2c      	ble.n	86c08 <_svfprintf_r+0x13b4>
   86bae:	3301      	adds	r3, #1
   86bb0:	3210      	adds	r2, #16
   86bb2:	2b07      	cmp	r3, #7
   86bb4:	9227      	str	r2, [sp, #156]	; 0x9c
   86bb6:	9326      	str	r3, [sp, #152]	; 0x98
   86bb8:	f8c8 5000 	str.w	r5, [r8]
   86bbc:	f8c8 4004 	str.w	r4, [r8, #4]
   86bc0:	ddf0      	ble.n	86ba4 <_svfprintf_r+0x1350>
   86bc2:	aa25      	add	r2, sp, #148	; 0x94
   86bc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86bc6:	4658      	mov	r0, fp
   86bc8:	f001 feba 	bl	88940 <__ssprint_r>
   86bcc:	2800      	cmp	r0, #0
   86bce:	f47e af1e 	bne.w	85a0e <_svfprintf_r+0x1ba>
   86bd2:	46c8      	mov	r8, r9
   86bd4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86bd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86bd8:	e7e6      	b.n	86ba8 <_svfprintf_r+0x1354>
   86bda:	aa25      	add	r2, sp, #148	; 0x94
   86bdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86bde:	980c      	ldr	r0, [sp, #48]	; 0x30
   86be0:	f001 feae 	bl	88940 <__ssprint_r>
   86be4:	2800      	cmp	r0, #0
   86be6:	f47e af12 	bne.w	85a0e <_svfprintf_r+0x1ba>
   86bea:	46c8      	mov	r8, r9
   86bec:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86bee:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86bf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86bf2:	f7ff bbc3 	b.w	8637c <_svfprintf_r+0xb28>
   86bf6:	2230      	movs	r2, #48	; 0x30
   86bf8:	4413      	add	r3, r2
   86bfa:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   86bfe:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   86c02:	ab22      	add	r3, sp, #136	; 0x88
   86c04:	e706      	b.n	86a14 <_svfprintf_r+0x11c0>
   86c06:	4d50      	ldr	r5, [pc, #320]	; (86d48 <_svfprintf_r+0x14f4>)
   86c08:	3301      	adds	r3, #1
   86c0a:	443a      	add	r2, r7
   86c0c:	2b07      	cmp	r3, #7
   86c0e:	e888 00a0 	stmia.w	r8, {r5, r7}
   86c12:	9227      	str	r2, [sp, #156]	; 0x9c
   86c14:	9326      	str	r3, [sp, #152]	; 0x98
   86c16:	f108 0808 	add.w	r8, r8, #8
   86c1a:	f77f abb2 	ble.w	86382 <_svfprintf_r+0xb2e>
   86c1e:	aa25      	add	r2, sp, #148	; 0x94
   86c20:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c22:	980c      	ldr	r0, [sp, #48]	; 0x30
   86c24:	f001 fe8c 	bl	88940 <__ssprint_r>
   86c28:	2800      	cmp	r0, #0
   86c2a:	f47e aef0 	bne.w	85a0e <_svfprintf_r+0x1ba>
   86c2e:	46c8      	mov	r8, r9
   86c30:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86c32:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86c34:	f7ff bba5 	b.w	86382 <_svfprintf_r+0xb2e>
   86c38:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86c3a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86c3c:	4413      	add	r3, r2
   86c3e:	930e      	str	r3, [sp, #56]	; 0x38
   86c40:	e76b      	b.n	86b1a <_svfprintf_r+0x12c6>
   86c42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86c44:	e5ee      	b.n	86824 <_svfprintf_r+0xfd0>
   86c46:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86c48:	4d3f      	ldr	r5, [pc, #252]	; (86d48 <_svfprintf_r+0x14f4>)
   86c4a:	e4bb      	b.n	865c4 <_svfprintf_r+0xd70>
   86c4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86c4e:	9808      	ldr	r0, [sp, #32]
   86c50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86c52:	4639      	mov	r1, r7
   86c54:	f002 fb4c 	bl	892f0 <__aeabi_dcmpeq>
   86c58:	2800      	cmp	r0, #0
   86c5a:	f47f ae70 	bne.w	8693e <_svfprintf_r+0x10ea>
   86c5e:	f1c5 0501 	rsb	r5, r5, #1
   86c62:	951f      	str	r5, [sp, #124]	; 0x7c
   86c64:	442c      	add	r4, r5
   86c66:	e5ca      	b.n	867fe <_svfprintf_r+0xfaa>
   86c68:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86c6a:	4e38      	ldr	r6, [pc, #224]	; (86d4c <_svfprintf_r+0x14f8>)
   86c6c:	2b00      	cmp	r3, #0
   86c6e:	bfbe      	ittt	lt
   86c70:	232d      	movlt	r3, #45	; 0x2d
   86c72:	461f      	movlt	r7, r3
   86c74:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   86c78:	f04f 0303 	mov.w	r3, #3
   86c7c:	461a      	mov	r2, r3
   86c7e:	9308      	str	r3, [sp, #32]
   86c80:	f04f 0300 	mov.w	r3, #0
   86c84:	bfa8      	it	ge
   86c86:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   86c8a:	4619      	mov	r1, r3
   86c8c:	930a      	str	r3, [sp, #40]	; 0x28
   86c8e:	4b30      	ldr	r3, [pc, #192]	; (86d50 <_svfprintf_r+0x14fc>)
   86c90:	f7ff b954 	b.w	85f3c <_svfprintf_r+0x6e8>
   86c94:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86c96:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86c98:	4413      	add	r3, r2
   86c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86c9c:	441a      	add	r2, r3
   86c9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86ca2:	920e      	str	r2, [sp, #56]	; 0x38
   86ca4:	9308      	str	r3, [sp, #32]
   86ca6:	e5dd      	b.n	86864 <_svfprintf_r+0x1010>
   86ca8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86caa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86cac:	f1c3 0301 	rsb	r3, r3, #1
   86cb0:	441a      	add	r2, r3
   86cb2:	4613      	mov	r3, r2
   86cb4:	e7c3      	b.n	86c3e <_svfprintf_r+0x13ea>
   86cb6:	f01b 0301 	ands.w	r3, fp, #1
   86cba:	9312      	str	r3, [sp, #72]	; 0x48
   86cbc:	f47f aeb3 	bne.w	86a26 <_svfprintf_r+0x11d2>
   86cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86cc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86cc6:	9308      	str	r3, [sp, #32]
   86cc8:	e5cc      	b.n	86864 <_svfprintf_r+0x1010>
   86cca:	4d1f      	ldr	r5, [pc, #124]	; (86d48 <_svfprintf_r+0x14f4>)
   86ccc:	e43c      	b.n	86548 <_svfprintf_r+0xcf4>
   86cce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86cd0:	4d1d      	ldr	r5, [pc, #116]	; (86d48 <_svfprintf_r+0x14f4>)
   86cd2:	e491      	b.n	865f8 <_svfprintf_r+0xda4>
   86cd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   86cd6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   86cda:	6828      	ldr	r0, [r5, #0]
   86cdc:	46a2      	mov	sl, r4
   86cde:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   86ce2:	900a      	str	r0, [sp, #40]	; 0x28
   86ce4:	4628      	mov	r0, r5
   86ce6:	3004      	adds	r0, #4
   86ce8:	900f      	str	r0, [sp, #60]	; 0x3c
   86cea:	f7fe be0d 	b.w	85908 <_svfprintf_r+0xb4>
   86cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86cf0:	b913      	cbnz	r3, 86cf8 <_svfprintf_r+0x14a4>
   86cf2:	f01b 0f01 	tst.w	fp, #1
   86cf6:	d002      	beq.n	86cfe <_svfprintf_r+0x14aa>
   86cf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86cfa:	3301      	adds	r3, #1
   86cfc:	e7cd      	b.n	86c9a <_svfprintf_r+0x1446>
   86cfe:	2301      	movs	r3, #1
   86d00:	e71c      	b.n	86b3c <_svfprintf_r+0x12e8>
   86d02:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86d06:	f7ff b980 	b.w	8600a <_svfprintf_r+0x7b6>
   86d0a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86d0e:	f7ff b93a 	b.w	85f86 <_svfprintf_r+0x732>
   86d12:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86d16:	f7ff b84f 	b.w	85db8 <_svfprintf_r+0x564>
   86d1a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   86d1e:	e679      	b.n	86a14 <_svfprintf_r+0x11c0>
   86d20:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86d24:	f7ff b9b2 	b.w	8608c <_svfprintf_r+0x838>
   86d28:	f04f 32ff 	mov.w	r2, #4294967295
   86d2c:	230c      	movs	r3, #12
   86d2e:	9209      	str	r2, [sp, #36]	; 0x24
   86d30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86d32:	6013      	str	r3, [r2, #0]
   86d34:	f7fe be74 	b.w	85a20 <_svfprintf_r+0x1cc>
   86d38:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86d3c:	f7ff b8c4 	b.w	85ec8 <_svfprintf_r+0x674>
   86d40:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86d44:	f7ff b878 	b.w	85e38 <_svfprintf_r+0x5e4>
   86d48:	000898d0 	.word	0x000898d0
   86d4c:	00089888 	.word	0x00089888
   86d50:	00089884 	.word	0x00089884

00086d54 <register_fini>:
   86d54:	4b02      	ldr	r3, [pc, #8]	; (86d60 <register_fini+0xc>)
   86d56:	b113      	cbz	r3, 86d5e <register_fini+0xa>
   86d58:	4802      	ldr	r0, [pc, #8]	; (86d64 <register_fini+0x10>)
   86d5a:	f000 b805 	b.w	86d68 <atexit>
   86d5e:	4770      	bx	lr
   86d60:	00000000 	.word	0x00000000
   86d64:	00087ce5 	.word	0x00087ce5

00086d68 <atexit>:
   86d68:	2300      	movs	r3, #0
   86d6a:	4601      	mov	r1, r0
   86d6c:	461a      	mov	r2, r3
   86d6e:	4618      	mov	r0, r3
   86d70:	f001 be64 	b.w	88a3c <__register_exitproc>

00086d74 <quorem>:
   86d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86d78:	6903      	ldr	r3, [r0, #16]
   86d7a:	690f      	ldr	r7, [r1, #16]
   86d7c:	b083      	sub	sp, #12
   86d7e:	429f      	cmp	r7, r3
   86d80:	f300 8088 	bgt.w	86e94 <quorem+0x120>
   86d84:	3f01      	subs	r7, #1
   86d86:	f101 0614 	add.w	r6, r1, #20
   86d8a:	f100 0a14 	add.w	sl, r0, #20
   86d8e:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   86d92:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   86d96:	3301      	adds	r3, #1
   86d98:	fbb2 f8f3 	udiv	r8, r2, r3
   86d9c:	00bb      	lsls	r3, r7, #2
   86d9e:	9300      	str	r3, [sp, #0]
   86da0:	eb06 0903 	add.w	r9, r6, r3
   86da4:	4453      	add	r3, sl
   86da6:	9301      	str	r3, [sp, #4]
   86da8:	f1b8 0f00 	cmp.w	r8, #0
   86dac:	d03b      	beq.n	86e26 <quorem+0xb2>
   86dae:	2300      	movs	r3, #0
   86db0:	46b4      	mov	ip, r6
   86db2:	461c      	mov	r4, r3
   86db4:	46d6      	mov	lr, sl
   86db6:	f85c 2b04 	ldr.w	r2, [ip], #4
   86dba:	f8de 5000 	ldr.w	r5, [lr]
   86dbe:	fa1f fb82 	uxth.w	fp, r2
   86dc2:	fb08 330b 	mla	r3, r8, fp, r3
   86dc6:	0c12      	lsrs	r2, r2, #16
   86dc8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   86dcc:	fb08 bb02 	mla	fp, r8, r2, fp
   86dd0:	b29a      	uxth	r2, r3
   86dd2:	1aa2      	subs	r2, r4, r2
   86dd4:	b2ab      	uxth	r3, r5
   86dd6:	fa1f f48b 	uxth.w	r4, fp
   86dda:	441a      	add	r2, r3
   86ddc:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   86de0:	eb04 4422 	add.w	r4, r4, r2, asr #16
   86de4:	b292      	uxth	r2, r2
   86de6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   86dea:	45e1      	cmp	r9, ip
   86dec:	f84e 2b04 	str.w	r2, [lr], #4
   86df0:	ea4f 4424 	mov.w	r4, r4, asr #16
   86df4:	ea4f 431b 	mov.w	r3, fp, lsr #16
   86df8:	d2dd      	bcs.n	86db6 <quorem+0x42>
   86dfa:	9b00      	ldr	r3, [sp, #0]
   86dfc:	f85a 3003 	ldr.w	r3, [sl, r3]
   86e00:	b98b      	cbnz	r3, 86e26 <quorem+0xb2>
   86e02:	9c01      	ldr	r4, [sp, #4]
   86e04:	1f23      	subs	r3, r4, #4
   86e06:	459a      	cmp	sl, r3
   86e08:	d20c      	bcs.n	86e24 <quorem+0xb0>
   86e0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86e0e:	b94b      	cbnz	r3, 86e24 <quorem+0xb0>
   86e10:	f1a4 0308 	sub.w	r3, r4, #8
   86e14:	e002      	b.n	86e1c <quorem+0xa8>
   86e16:	681a      	ldr	r2, [r3, #0]
   86e18:	3b04      	subs	r3, #4
   86e1a:	b91a      	cbnz	r2, 86e24 <quorem+0xb0>
   86e1c:	459a      	cmp	sl, r3
   86e1e:	f107 37ff 	add.w	r7, r7, #4294967295
   86e22:	d3f8      	bcc.n	86e16 <quorem+0xa2>
   86e24:	6107      	str	r7, [r0, #16]
   86e26:	4604      	mov	r4, r0
   86e28:	f001 fc7a 	bl	88720 <__mcmp>
   86e2c:	2800      	cmp	r0, #0
   86e2e:	db2d      	blt.n	86e8c <quorem+0x118>
   86e30:	4655      	mov	r5, sl
   86e32:	2300      	movs	r3, #0
   86e34:	f108 0801 	add.w	r8, r8, #1
   86e38:	f856 1b04 	ldr.w	r1, [r6], #4
   86e3c:	6828      	ldr	r0, [r5, #0]
   86e3e:	b28a      	uxth	r2, r1
   86e40:	1a9a      	subs	r2, r3, r2
   86e42:	0c0b      	lsrs	r3, r1, #16
   86e44:	b281      	uxth	r1, r0
   86e46:	440a      	add	r2, r1
   86e48:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   86e4c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   86e50:	b292      	uxth	r2, r2
   86e52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   86e56:	45b1      	cmp	r9, r6
   86e58:	f845 2b04 	str.w	r2, [r5], #4
   86e5c:	ea4f 4323 	mov.w	r3, r3, asr #16
   86e60:	d2ea      	bcs.n	86e38 <quorem+0xc4>
   86e62:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   86e66:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   86e6a:	b97a      	cbnz	r2, 86e8c <quorem+0x118>
   86e6c:	1f1a      	subs	r2, r3, #4
   86e6e:	4592      	cmp	sl, r2
   86e70:	d20b      	bcs.n	86e8a <quorem+0x116>
   86e72:	f853 2c04 	ldr.w	r2, [r3, #-4]
   86e76:	b942      	cbnz	r2, 86e8a <quorem+0x116>
   86e78:	3b08      	subs	r3, #8
   86e7a:	e002      	b.n	86e82 <quorem+0x10e>
   86e7c:	681a      	ldr	r2, [r3, #0]
   86e7e:	3b04      	subs	r3, #4
   86e80:	b91a      	cbnz	r2, 86e8a <quorem+0x116>
   86e82:	459a      	cmp	sl, r3
   86e84:	f107 37ff 	add.w	r7, r7, #4294967295
   86e88:	d3f8      	bcc.n	86e7c <quorem+0x108>
   86e8a:	6127      	str	r7, [r4, #16]
   86e8c:	4640      	mov	r0, r8
   86e8e:	b003      	add	sp, #12
   86e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86e94:	2000      	movs	r0, #0
   86e96:	b003      	add	sp, #12
   86e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86e9c:	0000      	movs	r0, r0
	...

00086ea0 <_dtoa_r>:
   86ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86ea4:	6c05      	ldr	r5, [r0, #64]	; 0x40
   86ea6:	b09b      	sub	sp, #108	; 0x6c
   86ea8:	4604      	mov	r4, r0
   86eaa:	4692      	mov	sl, r2
   86eac:	469b      	mov	fp, r3
   86eae:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   86eb0:	b14d      	cbz	r5, 86ec6 <_dtoa_r+0x26>
   86eb2:	2301      	movs	r3, #1
   86eb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   86eb6:	4629      	mov	r1, r5
   86eb8:	4093      	lsls	r3, r2
   86eba:	60ab      	str	r3, [r5, #8]
   86ebc:	606a      	str	r2, [r5, #4]
   86ebe:	f001 fa57 	bl	88370 <_Bfree>
   86ec2:	2300      	movs	r3, #0
   86ec4:	6423      	str	r3, [r4, #64]	; 0x40
   86ec6:	f1bb 0f00 	cmp.w	fp, #0
   86eca:	465d      	mov	r5, fp
   86ecc:	db35      	blt.n	86f3a <_dtoa_r+0x9a>
   86ece:	2300      	movs	r3, #0
   86ed0:	6033      	str	r3, [r6, #0]
   86ed2:	4b9d      	ldr	r3, [pc, #628]	; (87148 <_dtoa_r+0x2a8>)
   86ed4:	43ab      	bics	r3, r5
   86ed6:	d015      	beq.n	86f04 <_dtoa_r+0x64>
   86ed8:	2200      	movs	r2, #0
   86eda:	2300      	movs	r3, #0
   86edc:	4650      	mov	r0, sl
   86ede:	4659      	mov	r1, fp
   86ee0:	f002 fa06 	bl	892f0 <__aeabi_dcmpeq>
   86ee4:	4680      	mov	r8, r0
   86ee6:	2800      	cmp	r0, #0
   86ee8:	d02d      	beq.n	86f46 <_dtoa_r+0xa6>
   86eea:	2301      	movs	r3, #1
   86eec:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86eee:	6013      	str	r3, [r2, #0]
   86ef0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86ef2:	2b00      	cmp	r3, #0
   86ef4:	f000 80bd 	beq.w	87072 <_dtoa_r+0x1d2>
   86ef8:	4894      	ldr	r0, [pc, #592]	; (8714c <_dtoa_r+0x2ac>)
   86efa:	6018      	str	r0, [r3, #0]
   86efc:	3801      	subs	r0, #1
   86efe:	b01b      	add	sp, #108	; 0x6c
   86f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86f04:	f242 730f 	movw	r3, #9999	; 0x270f
   86f08:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86f0a:	6013      	str	r3, [r2, #0]
   86f0c:	f1ba 0f00 	cmp.w	sl, #0
   86f10:	d10d      	bne.n	86f2e <_dtoa_r+0x8e>
   86f12:	f3c5 0513 	ubfx	r5, r5, #0, #20
   86f16:	b955      	cbnz	r5, 86f2e <_dtoa_r+0x8e>
   86f18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86f1a:	488d      	ldr	r0, [pc, #564]	; (87150 <_dtoa_r+0x2b0>)
   86f1c:	2b00      	cmp	r3, #0
   86f1e:	d0ee      	beq.n	86efe <_dtoa_r+0x5e>
   86f20:	f100 0308 	add.w	r3, r0, #8
   86f24:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   86f26:	6013      	str	r3, [r2, #0]
   86f28:	b01b      	add	sp, #108	; 0x6c
   86f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86f2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86f30:	4888      	ldr	r0, [pc, #544]	; (87154 <_dtoa_r+0x2b4>)
   86f32:	2b00      	cmp	r3, #0
   86f34:	d0e3      	beq.n	86efe <_dtoa_r+0x5e>
   86f36:	1cc3      	adds	r3, r0, #3
   86f38:	e7f4      	b.n	86f24 <_dtoa_r+0x84>
   86f3a:	2301      	movs	r3, #1
   86f3c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   86f40:	6033      	str	r3, [r6, #0]
   86f42:	46ab      	mov	fp, r5
   86f44:	e7c5      	b.n	86ed2 <_dtoa_r+0x32>
   86f46:	aa18      	add	r2, sp, #96	; 0x60
   86f48:	ab19      	add	r3, sp, #100	; 0x64
   86f4a:	9201      	str	r2, [sp, #4]
   86f4c:	9300      	str	r3, [sp, #0]
   86f4e:	4652      	mov	r2, sl
   86f50:	465b      	mov	r3, fp
   86f52:	4620      	mov	r0, r4
   86f54:	f001 fc8e 	bl	88874 <__d2b>
   86f58:	0d2b      	lsrs	r3, r5, #20
   86f5a:	4681      	mov	r9, r0
   86f5c:	d071      	beq.n	87042 <_dtoa_r+0x1a2>
   86f5e:	4650      	mov	r0, sl
   86f60:	f3cb 0213 	ubfx	r2, fp, #0, #20
   86f64:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   86f68:	9f18      	ldr	r7, [sp, #96]	; 0x60
   86f6a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   86f6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   86f72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   86f76:	2200      	movs	r2, #0
   86f78:	4b77      	ldr	r3, [pc, #476]	; (87158 <_dtoa_r+0x2b8>)
   86f7a:	f7fd fc6b 	bl	84854 <__aeabi_dsub>
   86f7e:	a36c      	add	r3, pc, #432	; (adr r3, 87130 <_dtoa_r+0x290>)
   86f80:	e9d3 2300 	ldrd	r2, r3, [r3]
   86f84:	f7fd fe1a 	bl	84bbc <__aeabi_dmul>
   86f88:	a36b      	add	r3, pc, #428	; (adr r3, 87138 <_dtoa_r+0x298>)
   86f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   86f8e:	f7fd fc63 	bl	84858 <__adddf3>
   86f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
   86f96:	4630      	mov	r0, r6
   86f98:	f7fd fdaa 	bl	84af0 <__aeabi_i2d>
   86f9c:	a368      	add	r3, pc, #416	; (adr r3, 87140 <_dtoa_r+0x2a0>)
   86f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   86fa2:	f7fd fe0b 	bl	84bbc <__aeabi_dmul>
   86fa6:	4602      	mov	r2, r0
   86fa8:	460b      	mov	r3, r1
   86faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   86fae:	f7fd fc53 	bl	84858 <__adddf3>
   86fb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   86fb6:	f002 f9e3 	bl	89380 <__aeabi_d2iz>
   86fba:	2200      	movs	r2, #0
   86fbc:	9002      	str	r0, [sp, #8]
   86fbe:	2300      	movs	r3, #0
   86fc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   86fc4:	f002 f99e 	bl	89304 <__aeabi_dcmplt>
   86fc8:	2800      	cmp	r0, #0
   86fca:	f040 816d 	bne.w	872a8 <_dtoa_r+0x408>
   86fce:	9d02      	ldr	r5, [sp, #8]
   86fd0:	2d16      	cmp	r5, #22
   86fd2:	f200 8157 	bhi.w	87284 <_dtoa_r+0x3e4>
   86fd6:	4961      	ldr	r1, [pc, #388]	; (8715c <_dtoa_r+0x2bc>)
   86fd8:	4652      	mov	r2, sl
   86fda:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   86fde:	465b      	mov	r3, fp
   86fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
   86fe4:	f002 f9ac 	bl	89340 <__aeabi_dcmpgt>
   86fe8:	2800      	cmp	r0, #0
   86fea:	f000 81be 	beq.w	8736a <_dtoa_r+0x4ca>
   86fee:	1e6b      	subs	r3, r5, #1
   86ff0:	9302      	str	r3, [sp, #8]
   86ff2:	2300      	movs	r3, #0
   86ff4:	930e      	str	r3, [sp, #56]	; 0x38
   86ff6:	1bbf      	subs	r7, r7, r6
   86ff8:	1e7b      	subs	r3, r7, #1
   86ffa:	9308      	str	r3, [sp, #32]
   86ffc:	f100 814e 	bmi.w	8729c <_dtoa_r+0x3fc>
   87000:	2300      	movs	r3, #0
   87002:	930a      	str	r3, [sp, #40]	; 0x28
   87004:	9b02      	ldr	r3, [sp, #8]
   87006:	2b00      	cmp	r3, #0
   87008:	f2c0 813f 	blt.w	8728a <_dtoa_r+0x3ea>
   8700c:	9a08      	ldr	r2, [sp, #32]
   8700e:	930d      	str	r3, [sp, #52]	; 0x34
   87010:	4611      	mov	r1, r2
   87012:	4419      	add	r1, r3
   87014:	2300      	movs	r3, #0
   87016:	9108      	str	r1, [sp, #32]
   87018:	930c      	str	r3, [sp, #48]	; 0x30
   8701a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8701c:	2b09      	cmp	r3, #9
   8701e:	d82a      	bhi.n	87076 <_dtoa_r+0x1d6>
   87020:	2b05      	cmp	r3, #5
   87022:	f340 8658 	ble.w	87cd6 <_dtoa_r+0xe36>
   87026:	2500      	movs	r5, #0
   87028:	3b04      	subs	r3, #4
   8702a:	9324      	str	r3, [sp, #144]	; 0x90
   8702c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8702e:	3b02      	subs	r3, #2
   87030:	2b03      	cmp	r3, #3
   87032:	f200 863f 	bhi.w	87cb4 <_dtoa_r+0xe14>
   87036:	e8df f013 	tbh	[pc, r3, lsl #1]
   8703a:	03ce      	.short	0x03ce
   8703c:	03d902c3 	.word	0x03d902c3
   87040:	045b      	.short	0x045b
   87042:	9f18      	ldr	r7, [sp, #96]	; 0x60
   87044:	9e19      	ldr	r6, [sp, #100]	; 0x64
   87046:	443e      	add	r6, r7
   87048:	f206 4332 	addw	r3, r6, #1074	; 0x432
   8704c:	2b20      	cmp	r3, #32
   8704e:	f340 8187 	ble.w	87360 <_dtoa_r+0x4c0>
   87052:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   87056:	f206 4012 	addw	r0, r6, #1042	; 0x412
   8705a:	409d      	lsls	r5, r3
   8705c:	fa2a f000 	lsr.w	r0, sl, r0
   87060:	4328      	orrs	r0, r5
   87062:	f7fd fd35 	bl	84ad0 <__aeabi_ui2d>
   87066:	2301      	movs	r3, #1
   87068:	3e01      	subs	r6, #1
   8706a:	9314      	str	r3, [sp, #80]	; 0x50
   8706c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   87070:	e781      	b.n	86f76 <_dtoa_r+0xd6>
   87072:	483b      	ldr	r0, [pc, #236]	; (87160 <_dtoa_r+0x2c0>)
   87074:	e743      	b.n	86efe <_dtoa_r+0x5e>
   87076:	2100      	movs	r1, #0
   87078:	4620      	mov	r0, r4
   8707a:	6461      	str	r1, [r4, #68]	; 0x44
   8707c:	9125      	str	r1, [sp, #148]	; 0x94
   8707e:	f001 f951 	bl	88324 <_Balloc>
   87082:	f04f 33ff 	mov.w	r3, #4294967295
   87086:	9307      	str	r3, [sp, #28]
   87088:	930f      	str	r3, [sp, #60]	; 0x3c
   8708a:	2301      	movs	r3, #1
   8708c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   8708e:	9004      	str	r0, [sp, #16]
   87090:	6420      	str	r0, [r4, #64]	; 0x40
   87092:	9224      	str	r2, [sp, #144]	; 0x90
   87094:	930b      	str	r3, [sp, #44]	; 0x2c
   87096:	9b19      	ldr	r3, [sp, #100]	; 0x64
   87098:	2b00      	cmp	r3, #0
   8709a:	f2c0 80d3 	blt.w	87244 <_dtoa_r+0x3a4>
   8709e:	9a02      	ldr	r2, [sp, #8]
   870a0:	2a0e      	cmp	r2, #14
   870a2:	f300 80cf 	bgt.w	87244 <_dtoa_r+0x3a4>
   870a6:	4b2d      	ldr	r3, [pc, #180]	; (8715c <_dtoa_r+0x2bc>)
   870a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   870ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   870b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   870b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   870b6:	2b00      	cmp	r3, #0
   870b8:	f2c0 83b4 	blt.w	87824 <_dtoa_r+0x984>
   870bc:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   870c0:	4650      	mov	r0, sl
   870c2:	462a      	mov	r2, r5
   870c4:	4633      	mov	r3, r6
   870c6:	4659      	mov	r1, fp
   870c8:	f7fd fea2 	bl	84e10 <__aeabi_ddiv>
   870cc:	f002 f958 	bl	89380 <__aeabi_d2iz>
   870d0:	4680      	mov	r8, r0
   870d2:	f7fd fd0d 	bl	84af0 <__aeabi_i2d>
   870d6:	462a      	mov	r2, r5
   870d8:	4633      	mov	r3, r6
   870da:	f7fd fd6f 	bl	84bbc <__aeabi_dmul>
   870de:	4602      	mov	r2, r0
   870e0:	460b      	mov	r3, r1
   870e2:	4650      	mov	r0, sl
   870e4:	4659      	mov	r1, fp
   870e6:	f7fd fbb5 	bl	84854 <__aeabi_dsub>
   870ea:	9e07      	ldr	r6, [sp, #28]
   870ec:	9f04      	ldr	r7, [sp, #16]
   870ee:	f108 0530 	add.w	r5, r8, #48	; 0x30
   870f2:	2e01      	cmp	r6, #1
   870f4:	703d      	strb	r5, [r7, #0]
   870f6:	4602      	mov	r2, r0
   870f8:	460b      	mov	r3, r1
   870fa:	f107 0501 	add.w	r5, r7, #1
   870fe:	d064      	beq.n	871ca <_dtoa_r+0x32a>
   87100:	2200      	movs	r2, #0
   87102:	4b18      	ldr	r3, [pc, #96]	; (87164 <_dtoa_r+0x2c4>)
   87104:	f7fd fd5a 	bl	84bbc <__aeabi_dmul>
   87108:	2200      	movs	r2, #0
   8710a:	2300      	movs	r3, #0
   8710c:	4606      	mov	r6, r0
   8710e:	460f      	mov	r7, r1
   87110:	f002 f8ee 	bl	892f0 <__aeabi_dcmpeq>
   87114:	2800      	cmp	r0, #0
   87116:	f040 8082 	bne.w	8721e <_dtoa_r+0x37e>
   8711a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8711e:	f04f 0a00 	mov.w	sl, #0
   87122:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   87126:	f04f 0b00 	mov.w	fp, #0
   8712a:	940b      	str	r4, [sp, #44]	; 0x2c
   8712c:	e029      	b.n	87182 <_dtoa_r+0x2e2>
   8712e:	bf00      	nop
   87130:	636f4361 	.word	0x636f4361
   87134:	3fd287a7 	.word	0x3fd287a7
   87138:	8b60c8b3 	.word	0x8b60c8b3
   8713c:	3fc68a28 	.word	0x3fc68a28
   87140:	509f79fb 	.word	0x509f79fb
   87144:	3fd34413 	.word	0x3fd34413
   87148:	7ff00000 	.word	0x7ff00000
   8714c:	000898bd 	.word	0x000898bd
   87150:	000898e0 	.word	0x000898e0
   87154:	000898ec 	.word	0x000898ec
   87158:	3ff80000 	.word	0x3ff80000
   8715c:	00089918 	.word	0x00089918
   87160:	000898bc 	.word	0x000898bc
   87164:	40240000 	.word	0x40240000
   87168:	2200      	movs	r2, #0
   8716a:	4b81      	ldr	r3, [pc, #516]	; (87370 <_dtoa_r+0x4d0>)
   8716c:	f7fd fd26 	bl	84bbc <__aeabi_dmul>
   87170:	4652      	mov	r2, sl
   87172:	465b      	mov	r3, fp
   87174:	4606      	mov	r6, r0
   87176:	460f      	mov	r7, r1
   87178:	f002 f8ba 	bl	892f0 <__aeabi_dcmpeq>
   8717c:	2800      	cmp	r0, #0
   8717e:	f040 83ba 	bne.w	878f6 <_dtoa_r+0xa56>
   87182:	4642      	mov	r2, r8
   87184:	464b      	mov	r3, r9
   87186:	4630      	mov	r0, r6
   87188:	4639      	mov	r1, r7
   8718a:	f7fd fe41 	bl	84e10 <__aeabi_ddiv>
   8718e:	f002 f8f7 	bl	89380 <__aeabi_d2iz>
   87192:	4604      	mov	r4, r0
   87194:	f7fd fcac 	bl	84af0 <__aeabi_i2d>
   87198:	4642      	mov	r2, r8
   8719a:	464b      	mov	r3, r9
   8719c:	f7fd fd0e 	bl	84bbc <__aeabi_dmul>
   871a0:	4602      	mov	r2, r0
   871a2:	460b      	mov	r3, r1
   871a4:	4630      	mov	r0, r6
   871a6:	4639      	mov	r1, r7
   871a8:	f7fd fb54 	bl	84854 <__aeabi_dsub>
   871ac:	f104 0630 	add.w	r6, r4, #48	; 0x30
   871b0:	f805 6b01 	strb.w	r6, [r5], #1
   871b4:	9e04      	ldr	r6, [sp, #16]
   871b6:	9f07      	ldr	r7, [sp, #28]
   871b8:	1bae      	subs	r6, r5, r6
   871ba:	42be      	cmp	r6, r7
   871bc:	4602      	mov	r2, r0
   871be:	460b      	mov	r3, r1
   871c0:	d1d2      	bne.n	87168 <_dtoa_r+0x2c8>
   871c2:	46a0      	mov	r8, r4
   871c4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   871c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   871ca:	4610      	mov	r0, r2
   871cc:	4619      	mov	r1, r3
   871ce:	f7fd fb43 	bl	84858 <__adddf3>
   871d2:	4606      	mov	r6, r0
   871d4:	460f      	mov	r7, r1
   871d6:	4602      	mov	r2, r0
   871d8:	460b      	mov	r3, r1
   871da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   871de:	f002 f891 	bl	89304 <__aeabi_dcmplt>
   871e2:	b948      	cbnz	r0, 871f8 <_dtoa_r+0x358>
   871e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   871e8:	4632      	mov	r2, r6
   871ea:	463b      	mov	r3, r7
   871ec:	f002 f880 	bl	892f0 <__aeabi_dcmpeq>
   871f0:	b1a8      	cbz	r0, 8721e <_dtoa_r+0x37e>
   871f2:	f018 0f01 	tst.w	r8, #1
   871f6:	d012      	beq.n	8721e <_dtoa_r+0x37e>
   871f8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   871fc:	1e6b      	subs	r3, r5, #1
   871fe:	9a04      	ldr	r2, [sp, #16]
   87200:	e004      	b.n	8720c <_dtoa_r+0x36c>
   87202:	429a      	cmp	r2, r3
   87204:	f000 8402 	beq.w	87a0c <_dtoa_r+0xb6c>
   87208:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   8720c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   87210:	f103 0501 	add.w	r5, r3, #1
   87214:	d0f5      	beq.n	87202 <_dtoa_r+0x362>
   87216:	f108 0801 	add.w	r8, r8, #1
   8721a:	f883 8000 	strb.w	r8, [r3]
   8721e:	4649      	mov	r1, r9
   87220:	4620      	mov	r0, r4
   87222:	f001 f8a5 	bl	88370 <_Bfree>
   87226:	2200      	movs	r2, #0
   87228:	9b02      	ldr	r3, [sp, #8]
   8722a:	702a      	strb	r2, [r5, #0]
   8722c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8722e:	3301      	adds	r3, #1
   87230:	6013      	str	r3, [r2, #0]
   87232:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87234:	2b00      	cmp	r3, #0
   87236:	f000 839f 	beq.w	87978 <_dtoa_r+0xad8>
   8723a:	9804      	ldr	r0, [sp, #16]
   8723c:	601d      	str	r5, [r3, #0]
   8723e:	b01b      	add	sp, #108	; 0x6c
   87240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87246:	2a00      	cmp	r2, #0
   87248:	d03e      	beq.n	872c8 <_dtoa_r+0x428>
   8724a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8724c:	2a01      	cmp	r2, #1
   8724e:	f340 8311 	ble.w	87874 <_dtoa_r+0x9d4>
   87252:	9b07      	ldr	r3, [sp, #28]
   87254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87256:	1e5f      	subs	r7, r3, #1
   87258:	42ba      	cmp	r2, r7
   8725a:	f2c0 8390 	blt.w	8797e <_dtoa_r+0xade>
   8725e:	1bd7      	subs	r7, r2, r7
   87260:	9b07      	ldr	r3, [sp, #28]
   87262:	2b00      	cmp	r3, #0
   87264:	f2c0 848c 	blt.w	87b80 <_dtoa_r+0xce0>
   87268:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8726a:	9b07      	ldr	r3, [sp, #28]
   8726c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8726e:	2101      	movs	r1, #1
   87270:	441a      	add	r2, r3
   87272:	920a      	str	r2, [sp, #40]	; 0x28
   87274:	9a08      	ldr	r2, [sp, #32]
   87276:	4620      	mov	r0, r4
   87278:	441a      	add	r2, r3
   8727a:	9208      	str	r2, [sp, #32]
   8727c:	f001 f914 	bl	884a8 <__i2b>
   87280:	4606      	mov	r6, r0
   87282:	e023      	b.n	872cc <_dtoa_r+0x42c>
   87284:	2301      	movs	r3, #1
   87286:	930e      	str	r3, [sp, #56]	; 0x38
   87288:	e6b5      	b.n	86ff6 <_dtoa_r+0x156>
   8728a:	2300      	movs	r3, #0
   8728c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8728e:	930d      	str	r3, [sp, #52]	; 0x34
   87290:	9b02      	ldr	r3, [sp, #8]
   87292:	1ad2      	subs	r2, r2, r3
   87294:	425b      	negs	r3, r3
   87296:	920a      	str	r2, [sp, #40]	; 0x28
   87298:	930c      	str	r3, [sp, #48]	; 0x30
   8729a:	e6be      	b.n	8701a <_dtoa_r+0x17a>
   8729c:	f1c7 0301 	rsb	r3, r7, #1
   872a0:	930a      	str	r3, [sp, #40]	; 0x28
   872a2:	2300      	movs	r3, #0
   872a4:	9308      	str	r3, [sp, #32]
   872a6:	e6ad      	b.n	87004 <_dtoa_r+0x164>
   872a8:	9d02      	ldr	r5, [sp, #8]
   872aa:	4628      	mov	r0, r5
   872ac:	f7fd fc20 	bl	84af0 <__aeabi_i2d>
   872b0:	4602      	mov	r2, r0
   872b2:	460b      	mov	r3, r1
   872b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   872b8:	f002 f81a 	bl	892f0 <__aeabi_dcmpeq>
   872bc:	2800      	cmp	r0, #0
   872be:	f47f ae86 	bne.w	86fce <_dtoa_r+0x12e>
   872c2:	1e6b      	subs	r3, r5, #1
   872c4:	9302      	str	r3, [sp, #8]
   872c6:	e682      	b.n	86fce <_dtoa_r+0x12e>
   872c8:	ad0a      	add	r5, sp, #40	; 0x28
   872ca:	cde0      	ldmia	r5, {r5, r6, r7}
   872cc:	2d00      	cmp	r5, #0
   872ce:	dd0c      	ble.n	872ea <_dtoa_r+0x44a>
   872d0:	9908      	ldr	r1, [sp, #32]
   872d2:	2900      	cmp	r1, #0
   872d4:	460b      	mov	r3, r1
   872d6:	dd08      	ble.n	872ea <_dtoa_r+0x44a>
   872d8:	42a9      	cmp	r1, r5
   872da:	bfa8      	it	ge
   872dc:	462b      	movge	r3, r5
   872de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   872e0:	1aed      	subs	r5, r5, r3
   872e2:	1ad2      	subs	r2, r2, r3
   872e4:	1acb      	subs	r3, r1, r3
   872e6:	920a      	str	r2, [sp, #40]	; 0x28
   872e8:	9308      	str	r3, [sp, #32]
   872ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   872ec:	b1d3      	cbz	r3, 87324 <_dtoa_r+0x484>
   872ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   872f0:	2b00      	cmp	r3, #0
   872f2:	f000 82b8 	beq.w	87866 <_dtoa_r+0x9c6>
   872f6:	2f00      	cmp	r7, #0
   872f8:	dd10      	ble.n	8731c <_dtoa_r+0x47c>
   872fa:	4631      	mov	r1, r6
   872fc:	463a      	mov	r2, r7
   872fe:	4620      	mov	r0, r4
   87300:	f001 f96e 	bl	885e0 <__pow5mult>
   87304:	464a      	mov	r2, r9
   87306:	4601      	mov	r1, r0
   87308:	4606      	mov	r6, r0
   8730a:	4620      	mov	r0, r4
   8730c:	f001 f8d6 	bl	884bc <__multiply>
   87310:	4603      	mov	r3, r0
   87312:	4649      	mov	r1, r9
   87314:	4620      	mov	r0, r4
   87316:	4699      	mov	r9, r3
   87318:	f001 f82a 	bl	88370 <_Bfree>
   8731c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8731e:	1bda      	subs	r2, r3, r7
   87320:	f040 82a2 	bne.w	87868 <_dtoa_r+0x9c8>
   87324:	2101      	movs	r1, #1
   87326:	4620      	mov	r0, r4
   87328:	f001 f8be 	bl	884a8 <__i2b>
   8732c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8732e:	4680      	mov	r8, r0
   87330:	2b00      	cmp	r3, #0
   87332:	dd1f      	ble.n	87374 <_dtoa_r+0x4d4>
   87334:	4601      	mov	r1, r0
   87336:	461a      	mov	r2, r3
   87338:	4620      	mov	r0, r4
   8733a:	f001 f951 	bl	885e0 <__pow5mult>
   8733e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87340:	4680      	mov	r8, r0
   87342:	2b01      	cmp	r3, #1
   87344:	f340 8255 	ble.w	877f2 <_dtoa_r+0x952>
   87348:	2300      	movs	r3, #0
   8734a:	930c      	str	r3, [sp, #48]	; 0x30
   8734c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   87350:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   87354:	6918      	ldr	r0, [r3, #16]
   87356:	f001 f857 	bl	88408 <__hi0bits>
   8735a:	f1c0 0020 	rsb	r0, r0, #32
   8735e:	e013      	b.n	87388 <_dtoa_r+0x4e8>
   87360:	f1c3 0520 	rsb	r5, r3, #32
   87364:	fa0a f005 	lsl.w	r0, sl, r5
   87368:	e67b      	b.n	87062 <_dtoa_r+0x1c2>
   8736a:	900e      	str	r0, [sp, #56]	; 0x38
   8736c:	e643      	b.n	86ff6 <_dtoa_r+0x156>
   8736e:	bf00      	nop
   87370:	40240000 	.word	0x40240000
   87374:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87376:	2b01      	cmp	r3, #1
   87378:	f340 8285 	ble.w	87886 <_dtoa_r+0x9e6>
   8737c:	2300      	movs	r3, #0
   8737e:	930c      	str	r3, [sp, #48]	; 0x30
   87380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87382:	2001      	movs	r0, #1
   87384:	2b00      	cmp	r3, #0
   87386:	d1e1      	bne.n	8734c <_dtoa_r+0x4ac>
   87388:	9a08      	ldr	r2, [sp, #32]
   8738a:	4410      	add	r0, r2
   8738c:	f010 001f 	ands.w	r0, r0, #31
   87390:	f000 80a1 	beq.w	874d6 <_dtoa_r+0x636>
   87394:	f1c0 0320 	rsb	r3, r0, #32
   87398:	2b04      	cmp	r3, #4
   8739a:	f340 8486 	ble.w	87caa <_dtoa_r+0xe0a>
   8739e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   873a0:	f1c0 001c 	rsb	r0, r0, #28
   873a4:	4403      	add	r3, r0
   873a6:	930a      	str	r3, [sp, #40]	; 0x28
   873a8:	4613      	mov	r3, r2
   873aa:	4403      	add	r3, r0
   873ac:	4405      	add	r5, r0
   873ae:	9308      	str	r3, [sp, #32]
   873b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   873b2:	2b00      	cmp	r3, #0
   873b4:	dd05      	ble.n	873c2 <_dtoa_r+0x522>
   873b6:	4649      	mov	r1, r9
   873b8:	461a      	mov	r2, r3
   873ba:	4620      	mov	r0, r4
   873bc:	f001 f960 	bl	88680 <__lshift>
   873c0:	4681      	mov	r9, r0
   873c2:	9b08      	ldr	r3, [sp, #32]
   873c4:	2b00      	cmp	r3, #0
   873c6:	dd05      	ble.n	873d4 <_dtoa_r+0x534>
   873c8:	4641      	mov	r1, r8
   873ca:	461a      	mov	r2, r3
   873cc:	4620      	mov	r0, r4
   873ce:	f001 f957 	bl	88680 <__lshift>
   873d2:	4680      	mov	r8, r0
   873d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   873d6:	2b00      	cmp	r3, #0
   873d8:	f040 8086 	bne.w	874e8 <_dtoa_r+0x648>
   873dc:	9b07      	ldr	r3, [sp, #28]
   873de:	2b00      	cmp	r3, #0
   873e0:	f340 8264 	ble.w	878ac <_dtoa_r+0xa0c>
   873e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   873e6:	2b00      	cmp	r3, #0
   873e8:	f000 8098 	beq.w	8751c <_dtoa_r+0x67c>
   873ec:	2d00      	cmp	r5, #0
   873ee:	dd05      	ble.n	873fc <_dtoa_r+0x55c>
   873f0:	4631      	mov	r1, r6
   873f2:	462a      	mov	r2, r5
   873f4:	4620      	mov	r0, r4
   873f6:	f001 f943 	bl	88680 <__lshift>
   873fa:	4606      	mov	r6, r0
   873fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   873fe:	2b00      	cmp	r3, #0
   87400:	f040 8336 	bne.w	87a70 <_dtoa_r+0xbd0>
   87404:	9608      	str	r6, [sp, #32]
   87406:	9b07      	ldr	r3, [sp, #28]
   87408:	9a04      	ldr	r2, [sp, #16]
   8740a:	3b01      	subs	r3, #1
   8740c:	18d3      	adds	r3, r2, r3
   8740e:	930b      	str	r3, [sp, #44]	; 0x2c
   87410:	4617      	mov	r7, r2
   87412:	f00a 0301 	and.w	r3, sl, #1
   87416:	46c2      	mov	sl, r8
   87418:	f8dd b020 	ldr.w	fp, [sp, #32]
   8741c:	930c      	str	r3, [sp, #48]	; 0x30
   8741e:	4651      	mov	r1, sl
   87420:	4648      	mov	r0, r9
   87422:	f7ff fca7 	bl	86d74 <quorem>
   87426:	4631      	mov	r1, r6
   87428:	4605      	mov	r5, r0
   8742a:	4648      	mov	r0, r9
   8742c:	f001 f978 	bl	88720 <__mcmp>
   87430:	465a      	mov	r2, fp
   87432:	9007      	str	r0, [sp, #28]
   87434:	4651      	mov	r1, sl
   87436:	4620      	mov	r0, r4
   87438:	f001 f98e 	bl	88758 <__mdiff>
   8743c:	68c2      	ldr	r2, [r0, #12]
   8743e:	4680      	mov	r8, r0
   87440:	f105 0330 	add.w	r3, r5, #48	; 0x30
   87444:	2a00      	cmp	r2, #0
   87446:	f040 8229 	bne.w	8789c <_dtoa_r+0x9fc>
   8744a:	4601      	mov	r1, r0
   8744c:	4648      	mov	r0, r9
   8744e:	930a      	str	r3, [sp, #40]	; 0x28
   87450:	f001 f966 	bl	88720 <__mcmp>
   87454:	4641      	mov	r1, r8
   87456:	9008      	str	r0, [sp, #32]
   87458:	4620      	mov	r0, r4
   8745a:	f000 ff89 	bl	88370 <_Bfree>
   8745e:	9a08      	ldr	r2, [sp, #32]
   87460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87462:	b932      	cbnz	r2, 87472 <_dtoa_r+0x5d2>
   87464:	9924      	ldr	r1, [sp, #144]	; 0x90
   87466:	b921      	cbnz	r1, 87472 <_dtoa_r+0x5d2>
   87468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8746a:	2a00      	cmp	r2, #0
   8746c:	f000 83ee 	beq.w	87c4c <_dtoa_r+0xdac>
   87470:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87472:	9907      	ldr	r1, [sp, #28]
   87474:	2900      	cmp	r1, #0
   87476:	f2c0 829f 	blt.w	879b8 <_dtoa_r+0xb18>
   8747a:	d105      	bne.n	87488 <_dtoa_r+0x5e8>
   8747c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8747e:	b919      	cbnz	r1, 87488 <_dtoa_r+0x5e8>
   87480:	990c      	ldr	r1, [sp, #48]	; 0x30
   87482:	2900      	cmp	r1, #0
   87484:	f000 8298 	beq.w	879b8 <_dtoa_r+0xb18>
   87488:	2a00      	cmp	r2, #0
   8748a:	f300 8305 	bgt.w	87a98 <_dtoa_r+0xbf8>
   8748e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87490:	f107 0801 	add.w	r8, r7, #1
   87494:	4297      	cmp	r7, r2
   87496:	703b      	strb	r3, [r7, #0]
   87498:	4645      	mov	r5, r8
   8749a:	f000 830b 	beq.w	87ab4 <_dtoa_r+0xc14>
   8749e:	4649      	mov	r1, r9
   874a0:	2300      	movs	r3, #0
   874a2:	220a      	movs	r2, #10
   874a4:	4620      	mov	r0, r4
   874a6:	f000 ff6d 	bl	88384 <__multadd>
   874aa:	455e      	cmp	r6, fp
   874ac:	4681      	mov	r9, r0
   874ae:	4631      	mov	r1, r6
   874b0:	f04f 0300 	mov.w	r3, #0
   874b4:	f04f 020a 	mov.w	r2, #10
   874b8:	4620      	mov	r0, r4
   874ba:	f000 81e9 	beq.w	87890 <_dtoa_r+0x9f0>
   874be:	f000 ff61 	bl	88384 <__multadd>
   874c2:	4659      	mov	r1, fp
   874c4:	4606      	mov	r6, r0
   874c6:	2300      	movs	r3, #0
   874c8:	220a      	movs	r2, #10
   874ca:	4620      	mov	r0, r4
   874cc:	f000 ff5a 	bl	88384 <__multadd>
   874d0:	4647      	mov	r7, r8
   874d2:	4683      	mov	fp, r0
   874d4:	e7a3      	b.n	8741e <_dtoa_r+0x57e>
   874d6:	201c      	movs	r0, #28
   874d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   874da:	4405      	add	r5, r0
   874dc:	4403      	add	r3, r0
   874de:	930a      	str	r3, [sp, #40]	; 0x28
   874e0:	9b08      	ldr	r3, [sp, #32]
   874e2:	4403      	add	r3, r0
   874e4:	9308      	str	r3, [sp, #32]
   874e6:	e763      	b.n	873b0 <_dtoa_r+0x510>
   874e8:	4641      	mov	r1, r8
   874ea:	4648      	mov	r0, r9
   874ec:	f001 f918 	bl	88720 <__mcmp>
   874f0:	2800      	cmp	r0, #0
   874f2:	f6bf af73 	bge.w	873dc <_dtoa_r+0x53c>
   874f6:	9f02      	ldr	r7, [sp, #8]
   874f8:	4649      	mov	r1, r9
   874fa:	2300      	movs	r3, #0
   874fc:	220a      	movs	r2, #10
   874fe:	4620      	mov	r0, r4
   87500:	3f01      	subs	r7, #1
   87502:	9702      	str	r7, [sp, #8]
   87504:	f000 ff3e 	bl	88384 <__multadd>
   87508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8750a:	4681      	mov	r9, r0
   8750c:	2b00      	cmp	r3, #0
   8750e:	f040 83b5 	bne.w	87c7c <_dtoa_r+0xddc>
   87512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87514:	2b00      	cmp	r3, #0
   87516:	f340 83be 	ble.w	87c96 <_dtoa_r+0xdf6>
   8751a:	9307      	str	r3, [sp, #28]
   8751c:	f8dd a010 	ldr.w	sl, [sp, #16]
   87520:	9f07      	ldr	r7, [sp, #28]
   87522:	4655      	mov	r5, sl
   87524:	e006      	b.n	87534 <_dtoa_r+0x694>
   87526:	4649      	mov	r1, r9
   87528:	2300      	movs	r3, #0
   8752a:	220a      	movs	r2, #10
   8752c:	4620      	mov	r0, r4
   8752e:	f000 ff29 	bl	88384 <__multadd>
   87532:	4681      	mov	r9, r0
   87534:	4641      	mov	r1, r8
   87536:	4648      	mov	r0, r9
   87538:	f7ff fc1c 	bl	86d74 <quorem>
   8753c:	3030      	adds	r0, #48	; 0x30
   8753e:	f805 0b01 	strb.w	r0, [r5], #1
   87542:	eba5 030a 	sub.w	r3, r5, sl
   87546:	42bb      	cmp	r3, r7
   87548:	dbed      	blt.n	87526 <_dtoa_r+0x686>
   8754a:	9b04      	ldr	r3, [sp, #16]
   8754c:	9a07      	ldr	r2, [sp, #28]
   8754e:	4682      	mov	sl, r0
   87550:	2a01      	cmp	r2, #1
   87552:	bfac      	ite	ge
   87554:	189b      	addge	r3, r3, r2
   87556:	3301      	addlt	r3, #1
   87558:	f04f 0b00 	mov.w	fp, #0
   8755c:	461d      	mov	r5, r3
   8755e:	4649      	mov	r1, r9
   87560:	2201      	movs	r2, #1
   87562:	4620      	mov	r0, r4
   87564:	f001 f88c 	bl	88680 <__lshift>
   87568:	4641      	mov	r1, r8
   8756a:	4681      	mov	r9, r0
   8756c:	f001 f8d8 	bl	88720 <__mcmp>
   87570:	2800      	cmp	r0, #0
   87572:	f340 823f 	ble.w	879f4 <_dtoa_r+0xb54>
   87576:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   8757a:	1e6b      	subs	r3, r5, #1
   8757c:	9904      	ldr	r1, [sp, #16]
   8757e:	e004      	b.n	8758a <_dtoa_r+0x6ea>
   87580:	428b      	cmp	r3, r1
   87582:	f000 81ae 	beq.w	878e2 <_dtoa_r+0xa42>
   87586:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   8758a:	2a39      	cmp	r2, #57	; 0x39
   8758c:	f103 0501 	add.w	r5, r3, #1
   87590:	d0f6      	beq.n	87580 <_dtoa_r+0x6e0>
   87592:	3201      	adds	r2, #1
   87594:	701a      	strb	r2, [r3, #0]
   87596:	4641      	mov	r1, r8
   87598:	4620      	mov	r0, r4
   8759a:	f000 fee9 	bl	88370 <_Bfree>
   8759e:	2e00      	cmp	r6, #0
   875a0:	f43f ae3d 	beq.w	8721e <_dtoa_r+0x37e>
   875a4:	f1bb 0f00 	cmp.w	fp, #0
   875a8:	d005      	beq.n	875b6 <_dtoa_r+0x716>
   875aa:	45b3      	cmp	fp, r6
   875ac:	d003      	beq.n	875b6 <_dtoa_r+0x716>
   875ae:	4659      	mov	r1, fp
   875b0:	4620      	mov	r0, r4
   875b2:	f000 fedd 	bl	88370 <_Bfree>
   875b6:	4631      	mov	r1, r6
   875b8:	4620      	mov	r0, r4
   875ba:	f000 fed9 	bl	88370 <_Bfree>
   875be:	e62e      	b.n	8721e <_dtoa_r+0x37e>
   875c0:	2300      	movs	r3, #0
   875c2:	930b      	str	r3, [sp, #44]	; 0x2c
   875c4:	9b02      	ldr	r3, [sp, #8]
   875c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   875c8:	4413      	add	r3, r2
   875ca:	930f      	str	r3, [sp, #60]	; 0x3c
   875cc:	3301      	adds	r3, #1
   875ce:	2b01      	cmp	r3, #1
   875d0:	461f      	mov	r7, r3
   875d2:	461e      	mov	r6, r3
   875d4:	bfb8      	it	lt
   875d6:	2701      	movlt	r7, #1
   875d8:	9307      	str	r3, [sp, #28]
   875da:	2100      	movs	r1, #0
   875dc:	2f17      	cmp	r7, #23
   875de:	6461      	str	r1, [r4, #68]	; 0x44
   875e0:	d90a      	bls.n	875f8 <_dtoa_r+0x758>
   875e2:	2201      	movs	r2, #1
   875e4:	2304      	movs	r3, #4
   875e6:	005b      	lsls	r3, r3, #1
   875e8:	f103 0014 	add.w	r0, r3, #20
   875ec:	4287      	cmp	r7, r0
   875ee:	4611      	mov	r1, r2
   875f0:	f102 0201 	add.w	r2, r2, #1
   875f4:	d2f7      	bcs.n	875e6 <_dtoa_r+0x746>
   875f6:	6461      	str	r1, [r4, #68]	; 0x44
   875f8:	4620      	mov	r0, r4
   875fa:	f000 fe93 	bl	88324 <_Balloc>
   875fe:	2e0e      	cmp	r6, #14
   87600:	9004      	str	r0, [sp, #16]
   87602:	6420      	str	r0, [r4, #64]	; 0x40
   87604:	f63f ad47 	bhi.w	87096 <_dtoa_r+0x1f6>
   87608:	2d00      	cmp	r5, #0
   8760a:	f43f ad44 	beq.w	87096 <_dtoa_r+0x1f6>
   8760e:	9902      	ldr	r1, [sp, #8]
   87610:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   87614:	2900      	cmp	r1, #0
   87616:	f340 8203 	ble.w	87a20 <_dtoa_r+0xb80>
   8761a:	4bb9      	ldr	r3, [pc, #740]	; (87900 <_dtoa_r+0xa60>)
   8761c:	f001 020f 	and.w	r2, r1, #15
   87620:	110d      	asrs	r5, r1, #4
   87622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87626:	06e9      	lsls	r1, r5, #27
   87628:	e9d3 6700 	ldrd	r6, r7, [r3]
   8762c:	f140 81af 	bpl.w	8798e <_dtoa_r+0xaee>
   87630:	4bb4      	ldr	r3, [pc, #720]	; (87904 <_dtoa_r+0xa64>)
   87632:	4650      	mov	r0, sl
   87634:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   87638:	4659      	mov	r1, fp
   8763a:	f7fd fbe9 	bl	84e10 <__aeabi_ddiv>
   8763e:	f04f 0a03 	mov.w	sl, #3
   87642:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   87646:	f005 050f 	and.w	r5, r5, #15
   8764a:	b18d      	cbz	r5, 87670 <_dtoa_r+0x7d0>
   8764c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 87904 <_dtoa_r+0xa64>
   87650:	07ea      	lsls	r2, r5, #31
   87652:	d509      	bpl.n	87668 <_dtoa_r+0x7c8>
   87654:	e9d8 2300 	ldrd	r2, r3, [r8]
   87658:	4630      	mov	r0, r6
   8765a:	4639      	mov	r1, r7
   8765c:	f7fd faae 	bl	84bbc <__aeabi_dmul>
   87660:	4606      	mov	r6, r0
   87662:	460f      	mov	r7, r1
   87664:	f10a 0a01 	add.w	sl, sl, #1
   87668:	106d      	asrs	r5, r5, #1
   8766a:	f108 0808 	add.w	r8, r8, #8
   8766e:	d1ef      	bne.n	87650 <_dtoa_r+0x7b0>
   87670:	463b      	mov	r3, r7
   87672:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   87676:	4632      	mov	r2, r6
   87678:	f7fd fbca 	bl	84e10 <__aeabi_ddiv>
   8767c:	4607      	mov	r7, r0
   8767e:	4688      	mov	r8, r1
   87680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87682:	b143      	cbz	r3, 87696 <_dtoa_r+0x7f6>
   87684:	2200      	movs	r2, #0
   87686:	4ba0      	ldr	r3, [pc, #640]	; (87908 <_dtoa_r+0xa68>)
   87688:	4638      	mov	r0, r7
   8768a:	4641      	mov	r1, r8
   8768c:	f001 fe3a 	bl	89304 <__aeabi_dcmplt>
   87690:	2800      	cmp	r0, #0
   87692:	f040 8287 	bne.w	87ba4 <_dtoa_r+0xd04>
   87696:	4650      	mov	r0, sl
   87698:	f7fd fa2a 	bl	84af0 <__aeabi_i2d>
   8769c:	463a      	mov	r2, r7
   8769e:	4643      	mov	r3, r8
   876a0:	f7fd fa8c 	bl	84bbc <__aeabi_dmul>
   876a4:	4b99      	ldr	r3, [pc, #612]	; (8790c <_dtoa_r+0xa6c>)
   876a6:	2200      	movs	r2, #0
   876a8:	f7fd f8d6 	bl	84858 <__adddf3>
   876ac:	9b07      	ldr	r3, [sp, #28]
   876ae:	4605      	mov	r5, r0
   876b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   876b4:	2b00      	cmp	r3, #0
   876b6:	f000 813f 	beq.w	87938 <_dtoa_r+0xa98>
   876ba:	9b02      	ldr	r3, [sp, #8]
   876bc:	9315      	str	r3, [sp, #84]	; 0x54
   876be:	9b07      	ldr	r3, [sp, #28]
   876c0:	9312      	str	r3, [sp, #72]	; 0x48
   876c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   876c4:	2b00      	cmp	r3, #0
   876c6:	f000 81fb 	beq.w	87ac0 <_dtoa_r+0xc20>
   876ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
   876cc:	4b8c      	ldr	r3, [pc, #560]	; (87900 <_dtoa_r+0xa60>)
   876ce:	2000      	movs	r0, #0
   876d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   876d4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   876d8:	498d      	ldr	r1, [pc, #564]	; (87910 <_dtoa_r+0xa70>)
   876da:	f7fd fb99 	bl	84e10 <__aeabi_ddiv>
   876de:	462a      	mov	r2, r5
   876e0:	4633      	mov	r3, r6
   876e2:	f7fd f8b7 	bl	84854 <__aeabi_dsub>
   876e6:	4682      	mov	sl, r0
   876e8:	468b      	mov	fp, r1
   876ea:	4638      	mov	r0, r7
   876ec:	4641      	mov	r1, r8
   876ee:	f001 fe47 	bl	89380 <__aeabi_d2iz>
   876f2:	4605      	mov	r5, r0
   876f4:	f7fd f9fc 	bl	84af0 <__aeabi_i2d>
   876f8:	4602      	mov	r2, r0
   876fa:	460b      	mov	r3, r1
   876fc:	4638      	mov	r0, r7
   876fe:	4641      	mov	r1, r8
   87700:	f7fd f8a8 	bl	84854 <__aeabi_dsub>
   87704:	3530      	adds	r5, #48	; 0x30
   87706:	fa5f f885 	uxtb.w	r8, r5
   8770a:	9d04      	ldr	r5, [sp, #16]
   8770c:	4606      	mov	r6, r0
   8770e:	460f      	mov	r7, r1
   87710:	f885 8000 	strb.w	r8, [r5]
   87714:	4602      	mov	r2, r0
   87716:	460b      	mov	r3, r1
   87718:	4650      	mov	r0, sl
   8771a:	4659      	mov	r1, fp
   8771c:	3501      	adds	r5, #1
   8771e:	f001 fe0f 	bl	89340 <__aeabi_dcmpgt>
   87722:	2800      	cmp	r0, #0
   87724:	d154      	bne.n	877d0 <_dtoa_r+0x930>
   87726:	4632      	mov	r2, r6
   87728:	463b      	mov	r3, r7
   8772a:	2000      	movs	r0, #0
   8772c:	4976      	ldr	r1, [pc, #472]	; (87908 <_dtoa_r+0xa68>)
   8772e:	f7fd f891 	bl	84854 <__aeabi_dsub>
   87732:	4602      	mov	r2, r0
   87734:	460b      	mov	r3, r1
   87736:	4650      	mov	r0, sl
   87738:	4659      	mov	r1, fp
   8773a:	f001 fe01 	bl	89340 <__aeabi_dcmpgt>
   8773e:	2800      	cmp	r0, #0
   87740:	f040 8270 	bne.w	87c24 <_dtoa_r+0xd84>
   87744:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87746:	2a01      	cmp	r2, #1
   87748:	f000 8112 	beq.w	87970 <_dtoa_r+0xad0>
   8774c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8774e:	9a04      	ldr	r2, [sp, #16]
   87750:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   87754:	4413      	add	r3, r2
   87756:	4699      	mov	r9, r3
   87758:	e00f      	b.n	8777a <_dtoa_r+0x8da>
   8775a:	4632      	mov	r2, r6
   8775c:	463b      	mov	r3, r7
   8775e:	2000      	movs	r0, #0
   87760:	4969      	ldr	r1, [pc, #420]	; (87908 <_dtoa_r+0xa68>)
   87762:	f7fd f877 	bl	84854 <__aeabi_dsub>
   87766:	4652      	mov	r2, sl
   87768:	465b      	mov	r3, fp
   8776a:	f001 fdcb 	bl	89304 <__aeabi_dcmplt>
   8776e:	2800      	cmp	r0, #0
   87770:	f040 8256 	bne.w	87c20 <_dtoa_r+0xd80>
   87774:	454d      	cmp	r5, r9
   87776:	f000 80f9 	beq.w	8796c <_dtoa_r+0xacc>
   8777a:	4650      	mov	r0, sl
   8777c:	4659      	mov	r1, fp
   8777e:	2200      	movs	r2, #0
   87780:	4b64      	ldr	r3, [pc, #400]	; (87914 <_dtoa_r+0xa74>)
   87782:	f7fd fa1b 	bl	84bbc <__aeabi_dmul>
   87786:	2200      	movs	r2, #0
   87788:	4b62      	ldr	r3, [pc, #392]	; (87914 <_dtoa_r+0xa74>)
   8778a:	4682      	mov	sl, r0
   8778c:	468b      	mov	fp, r1
   8778e:	4630      	mov	r0, r6
   87790:	4639      	mov	r1, r7
   87792:	f7fd fa13 	bl	84bbc <__aeabi_dmul>
   87796:	460f      	mov	r7, r1
   87798:	4606      	mov	r6, r0
   8779a:	f001 fdf1 	bl	89380 <__aeabi_d2iz>
   8779e:	4680      	mov	r8, r0
   877a0:	f7fd f9a6 	bl	84af0 <__aeabi_i2d>
   877a4:	4602      	mov	r2, r0
   877a6:	460b      	mov	r3, r1
   877a8:	4630      	mov	r0, r6
   877aa:	4639      	mov	r1, r7
   877ac:	f7fd f852 	bl	84854 <__aeabi_dsub>
   877b0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   877b4:	fa5f f888 	uxtb.w	r8, r8
   877b8:	f805 8b01 	strb.w	r8, [r5], #1
   877bc:	4652      	mov	r2, sl
   877be:	465b      	mov	r3, fp
   877c0:	4606      	mov	r6, r0
   877c2:	460f      	mov	r7, r1
   877c4:	f001 fd9e 	bl	89304 <__aeabi_dcmplt>
   877c8:	2800      	cmp	r0, #0
   877ca:	d0c6      	beq.n	8775a <_dtoa_r+0x8ba>
   877cc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   877d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   877d2:	9302      	str	r3, [sp, #8]
   877d4:	e523      	b.n	8721e <_dtoa_r+0x37e>
   877d6:	2300      	movs	r3, #0
   877d8:	930b      	str	r3, [sp, #44]	; 0x2c
   877da:	9b25      	ldr	r3, [sp, #148]	; 0x94
   877dc:	2b00      	cmp	r3, #0
   877de:	f340 80dd 	ble.w	8799c <_dtoa_r+0xafc>
   877e2:	461f      	mov	r7, r3
   877e4:	461e      	mov	r6, r3
   877e6:	930f      	str	r3, [sp, #60]	; 0x3c
   877e8:	9307      	str	r3, [sp, #28]
   877ea:	e6f6      	b.n	875da <_dtoa_r+0x73a>
   877ec:	2301      	movs	r3, #1
   877ee:	930b      	str	r3, [sp, #44]	; 0x2c
   877f0:	e7f3      	b.n	877da <_dtoa_r+0x93a>
   877f2:	f1ba 0f00 	cmp.w	sl, #0
   877f6:	f47f ada7 	bne.w	87348 <_dtoa_r+0x4a8>
   877fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   877fe:	2b00      	cmp	r3, #0
   87800:	f47f adbc 	bne.w	8737c <_dtoa_r+0x4dc>
   87804:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   87808:	0d3f      	lsrs	r7, r7, #20
   8780a:	053f      	lsls	r7, r7, #20
   8780c:	2f00      	cmp	r7, #0
   8780e:	f000 820d 	beq.w	87c2c <_dtoa_r+0xd8c>
   87812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87814:	3301      	adds	r3, #1
   87816:	930a      	str	r3, [sp, #40]	; 0x28
   87818:	9b08      	ldr	r3, [sp, #32]
   8781a:	3301      	adds	r3, #1
   8781c:	9308      	str	r3, [sp, #32]
   8781e:	2301      	movs	r3, #1
   87820:	930c      	str	r3, [sp, #48]	; 0x30
   87822:	e5ad      	b.n	87380 <_dtoa_r+0x4e0>
   87824:	9b07      	ldr	r3, [sp, #28]
   87826:	2b00      	cmp	r3, #0
   87828:	f73f ac48 	bgt.w	870bc <_dtoa_r+0x21c>
   8782c:	f040 8222 	bne.w	87c74 <_dtoa_r+0xdd4>
   87830:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87834:	2200      	movs	r2, #0
   87836:	4b38      	ldr	r3, [pc, #224]	; (87918 <_dtoa_r+0xa78>)
   87838:	f7fd f9c0 	bl	84bbc <__aeabi_dmul>
   8783c:	4652      	mov	r2, sl
   8783e:	465b      	mov	r3, fp
   87840:	f001 fd74 	bl	8932c <__aeabi_dcmpge>
   87844:	f8dd 801c 	ldr.w	r8, [sp, #28]
   87848:	4646      	mov	r6, r8
   8784a:	2800      	cmp	r0, #0
   8784c:	d041      	beq.n	878d2 <_dtoa_r+0xa32>
   8784e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87850:	9d04      	ldr	r5, [sp, #16]
   87852:	43db      	mvns	r3, r3
   87854:	9302      	str	r3, [sp, #8]
   87856:	4641      	mov	r1, r8
   87858:	4620      	mov	r0, r4
   8785a:	f000 fd89 	bl	88370 <_Bfree>
   8785e:	2e00      	cmp	r6, #0
   87860:	f43f acdd 	beq.w	8721e <_dtoa_r+0x37e>
   87864:	e6a7      	b.n	875b6 <_dtoa_r+0x716>
   87866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87868:	4649      	mov	r1, r9
   8786a:	4620      	mov	r0, r4
   8786c:	f000 feb8 	bl	885e0 <__pow5mult>
   87870:	4681      	mov	r9, r0
   87872:	e557      	b.n	87324 <_dtoa_r+0x484>
   87874:	9a14      	ldr	r2, [sp, #80]	; 0x50
   87876:	2a00      	cmp	r2, #0
   87878:	f000 8188 	beq.w	87b8c <_dtoa_r+0xcec>
   8787c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   87880:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87882:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87884:	e4f2      	b.n	8726c <_dtoa_r+0x3cc>
   87886:	f1ba 0f00 	cmp.w	sl, #0
   8788a:	f47f ad77 	bne.w	8737c <_dtoa_r+0x4dc>
   8788e:	e7b4      	b.n	877fa <_dtoa_r+0x95a>
   87890:	f000 fd78 	bl	88384 <__multadd>
   87894:	4647      	mov	r7, r8
   87896:	4606      	mov	r6, r0
   87898:	4683      	mov	fp, r0
   8789a:	e5c0      	b.n	8741e <_dtoa_r+0x57e>
   8789c:	4601      	mov	r1, r0
   8789e:	4620      	mov	r0, r4
   878a0:	9308      	str	r3, [sp, #32]
   878a2:	f000 fd65 	bl	88370 <_Bfree>
   878a6:	2201      	movs	r2, #1
   878a8:	9b08      	ldr	r3, [sp, #32]
   878aa:	e5e2      	b.n	87472 <_dtoa_r+0x5d2>
   878ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   878ae:	2b02      	cmp	r3, #2
   878b0:	f77f ad98 	ble.w	873e4 <_dtoa_r+0x544>
   878b4:	9b07      	ldr	r3, [sp, #28]
   878b6:	2b00      	cmp	r3, #0
   878b8:	d1c9      	bne.n	8784e <_dtoa_r+0x9ae>
   878ba:	4641      	mov	r1, r8
   878bc:	2205      	movs	r2, #5
   878be:	4620      	mov	r0, r4
   878c0:	f000 fd60 	bl	88384 <__multadd>
   878c4:	4601      	mov	r1, r0
   878c6:	4680      	mov	r8, r0
   878c8:	4648      	mov	r0, r9
   878ca:	f000 ff29 	bl	88720 <__mcmp>
   878ce:	2800      	cmp	r0, #0
   878d0:	ddbd      	ble.n	8784e <_dtoa_r+0x9ae>
   878d2:	2331      	movs	r3, #49	; 0x31
   878d4:	9a02      	ldr	r2, [sp, #8]
   878d6:	9904      	ldr	r1, [sp, #16]
   878d8:	3201      	adds	r2, #1
   878da:	9202      	str	r2, [sp, #8]
   878dc:	700b      	strb	r3, [r1, #0]
   878de:	1c4d      	adds	r5, r1, #1
   878e0:	e7b9      	b.n	87856 <_dtoa_r+0x9b6>
   878e2:	2331      	movs	r3, #49	; 0x31
   878e4:	9a02      	ldr	r2, [sp, #8]
   878e6:	3201      	adds	r2, #1
   878e8:	9202      	str	r2, [sp, #8]
   878ea:	9a04      	ldr	r2, [sp, #16]
   878ec:	7013      	strb	r3, [r2, #0]
   878ee:	e652      	b.n	87596 <_dtoa_r+0x6f6>
   878f0:	2301      	movs	r3, #1
   878f2:	930b      	str	r3, [sp, #44]	; 0x2c
   878f4:	e666      	b.n	875c4 <_dtoa_r+0x724>
   878f6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   878fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   878fc:	e48f      	b.n	8721e <_dtoa_r+0x37e>
   878fe:	bf00      	nop
   87900:	00089918 	.word	0x00089918
   87904:	000898f0 	.word	0x000898f0
   87908:	3ff00000 	.word	0x3ff00000
   8790c:	401c0000 	.word	0x401c0000
   87910:	3fe00000 	.word	0x3fe00000
   87914:	40240000 	.word	0x40240000
   87918:	40140000 	.word	0x40140000
   8791c:	4650      	mov	r0, sl
   8791e:	f7fd f8e7 	bl	84af0 <__aeabi_i2d>
   87922:	463a      	mov	r2, r7
   87924:	4643      	mov	r3, r8
   87926:	f7fd f949 	bl	84bbc <__aeabi_dmul>
   8792a:	2200      	movs	r2, #0
   8792c:	4bc1      	ldr	r3, [pc, #772]	; (87c34 <_dtoa_r+0xd94>)
   8792e:	f7fc ff93 	bl	84858 <__adddf3>
   87932:	4605      	mov	r5, r0
   87934:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87938:	4641      	mov	r1, r8
   8793a:	2200      	movs	r2, #0
   8793c:	4bbe      	ldr	r3, [pc, #760]	; (87c38 <_dtoa_r+0xd98>)
   8793e:	4638      	mov	r0, r7
   87940:	f7fc ff88 	bl	84854 <__aeabi_dsub>
   87944:	462a      	mov	r2, r5
   87946:	4633      	mov	r3, r6
   87948:	4682      	mov	sl, r0
   8794a:	468b      	mov	fp, r1
   8794c:	f001 fcf8 	bl	89340 <__aeabi_dcmpgt>
   87950:	4680      	mov	r8, r0
   87952:	2800      	cmp	r0, #0
   87954:	f040 8110 	bne.w	87b78 <_dtoa_r+0xcd8>
   87958:	462a      	mov	r2, r5
   8795a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8795e:	4650      	mov	r0, sl
   87960:	4659      	mov	r1, fp
   87962:	f001 fccf 	bl	89304 <__aeabi_dcmplt>
   87966:	b118      	cbz	r0, 87970 <_dtoa_r+0xad0>
   87968:	4646      	mov	r6, r8
   8796a:	e770      	b.n	8784e <_dtoa_r+0x9ae>
   8796c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87970:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   87974:	f7ff bb8f 	b.w	87096 <_dtoa_r+0x1f6>
   87978:	9804      	ldr	r0, [sp, #16]
   8797a:	f7ff bac0 	b.w	86efe <_dtoa_r+0x5e>
   8797e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87982:	1afb      	subs	r3, r7, r3
   87984:	441a      	add	r2, r3
   87986:	970c      	str	r7, [sp, #48]	; 0x30
   87988:	920d      	str	r2, [sp, #52]	; 0x34
   8798a:	2700      	movs	r7, #0
   8798c:	e468      	b.n	87260 <_dtoa_r+0x3c0>
   8798e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   87992:	f04f 0a02 	mov.w	sl, #2
   87996:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   8799a:	e656      	b.n	8764a <_dtoa_r+0x7aa>
   8799c:	2100      	movs	r1, #0
   8799e:	2301      	movs	r3, #1
   879a0:	4620      	mov	r0, r4
   879a2:	6461      	str	r1, [r4, #68]	; 0x44
   879a4:	9325      	str	r3, [sp, #148]	; 0x94
   879a6:	f000 fcbd 	bl	88324 <_Balloc>
   879aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   879ac:	9004      	str	r0, [sp, #16]
   879ae:	9307      	str	r3, [sp, #28]
   879b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   879b2:	6420      	str	r0, [r4, #64]	; 0x40
   879b4:	930f      	str	r3, [sp, #60]	; 0x3c
   879b6:	e627      	b.n	87608 <_dtoa_r+0x768>
   879b8:	2a00      	cmp	r2, #0
   879ba:	46d0      	mov	r8, sl
   879bc:	f8cd b020 	str.w	fp, [sp, #32]
   879c0:	469a      	mov	sl, r3
   879c2:	dd11      	ble.n	879e8 <_dtoa_r+0xb48>
   879c4:	4649      	mov	r1, r9
   879c6:	2201      	movs	r2, #1
   879c8:	4620      	mov	r0, r4
   879ca:	f000 fe59 	bl	88680 <__lshift>
   879ce:	4641      	mov	r1, r8
   879d0:	4681      	mov	r9, r0
   879d2:	f000 fea5 	bl	88720 <__mcmp>
   879d6:	2800      	cmp	r0, #0
   879d8:	f340 8145 	ble.w	87c66 <_dtoa_r+0xdc6>
   879dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   879e0:	f000 8105 	beq.w	87bee <_dtoa_r+0xd4e>
   879e4:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   879e8:	46b3      	mov	fp, r6
   879ea:	f887 a000 	strb.w	sl, [r7]
   879ee:	1c7d      	adds	r5, r7, #1
   879f0:	9e08      	ldr	r6, [sp, #32]
   879f2:	e5d0      	b.n	87596 <_dtoa_r+0x6f6>
   879f4:	d104      	bne.n	87a00 <_dtoa_r+0xb60>
   879f6:	f01a 0f01 	tst.w	sl, #1
   879fa:	d001      	beq.n	87a00 <_dtoa_r+0xb60>
   879fc:	e5bb      	b.n	87576 <_dtoa_r+0x6d6>
   879fe:	4615      	mov	r5, r2
   87a00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87a04:	1e6a      	subs	r2, r5, #1
   87a06:	2b30      	cmp	r3, #48	; 0x30
   87a08:	d0f9      	beq.n	879fe <_dtoa_r+0xb5e>
   87a0a:	e5c4      	b.n	87596 <_dtoa_r+0x6f6>
   87a0c:	2230      	movs	r2, #48	; 0x30
   87a0e:	9904      	ldr	r1, [sp, #16]
   87a10:	700a      	strb	r2, [r1, #0]
   87a12:	9a02      	ldr	r2, [sp, #8]
   87a14:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87a18:	3201      	adds	r2, #1
   87a1a:	9202      	str	r2, [sp, #8]
   87a1c:	f7ff bbfb 	b.w	87216 <_dtoa_r+0x376>
   87a20:	f000 80bb 	beq.w	87b9a <_dtoa_r+0xcfa>
   87a24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87a28:	9b02      	ldr	r3, [sp, #8]
   87a2a:	f04f 0a02 	mov.w	sl, #2
   87a2e:	425d      	negs	r5, r3
   87a30:	4b82      	ldr	r3, [pc, #520]	; (87c3c <_dtoa_r+0xd9c>)
   87a32:	f005 020f 	and.w	r2, r5, #15
   87a36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   87a3e:	f7fd f8bd 	bl	84bbc <__aeabi_dmul>
   87a42:	112d      	asrs	r5, r5, #4
   87a44:	4607      	mov	r7, r0
   87a46:	4688      	mov	r8, r1
   87a48:	f43f ae1a 	beq.w	87680 <_dtoa_r+0x7e0>
   87a4c:	4e7c      	ldr	r6, [pc, #496]	; (87c40 <_dtoa_r+0xda0>)
   87a4e:	07eb      	lsls	r3, r5, #31
   87a50:	d509      	bpl.n	87a66 <_dtoa_r+0xbc6>
   87a52:	e9d6 2300 	ldrd	r2, r3, [r6]
   87a56:	4638      	mov	r0, r7
   87a58:	4641      	mov	r1, r8
   87a5a:	f7fd f8af 	bl	84bbc <__aeabi_dmul>
   87a5e:	4607      	mov	r7, r0
   87a60:	4688      	mov	r8, r1
   87a62:	f10a 0a01 	add.w	sl, sl, #1
   87a66:	106d      	asrs	r5, r5, #1
   87a68:	f106 0608 	add.w	r6, r6, #8
   87a6c:	d1ef      	bne.n	87a4e <_dtoa_r+0xbae>
   87a6e:	e607      	b.n	87680 <_dtoa_r+0x7e0>
   87a70:	6871      	ldr	r1, [r6, #4]
   87a72:	4620      	mov	r0, r4
   87a74:	f000 fc56 	bl	88324 <_Balloc>
   87a78:	4605      	mov	r5, r0
   87a7a:	6933      	ldr	r3, [r6, #16]
   87a7c:	f106 010c 	add.w	r1, r6, #12
   87a80:	3302      	adds	r3, #2
   87a82:	009a      	lsls	r2, r3, #2
   87a84:	300c      	adds	r0, #12
   87a86:	f7fd fdcd 	bl	85624 <memcpy>
   87a8a:	4629      	mov	r1, r5
   87a8c:	2201      	movs	r2, #1
   87a8e:	4620      	mov	r0, r4
   87a90:	f000 fdf6 	bl	88680 <__lshift>
   87a94:	9008      	str	r0, [sp, #32]
   87a96:	e4b6      	b.n	87406 <_dtoa_r+0x566>
   87a98:	2b39      	cmp	r3, #57	; 0x39
   87a9a:	f8cd b020 	str.w	fp, [sp, #32]
   87a9e:	46d0      	mov	r8, sl
   87aa0:	f000 80a5 	beq.w	87bee <_dtoa_r+0xd4e>
   87aa4:	f103 0a01 	add.w	sl, r3, #1
   87aa8:	46b3      	mov	fp, r6
   87aaa:	f887 a000 	strb.w	sl, [r7]
   87aae:	1c7d      	adds	r5, r7, #1
   87ab0:	9e08      	ldr	r6, [sp, #32]
   87ab2:	e570      	b.n	87596 <_dtoa_r+0x6f6>
   87ab4:	465a      	mov	r2, fp
   87ab6:	46d0      	mov	r8, sl
   87ab8:	46b3      	mov	fp, r6
   87aba:	469a      	mov	sl, r3
   87abc:	4616      	mov	r6, r2
   87abe:	e54e      	b.n	8755e <_dtoa_r+0x6be>
   87ac0:	9812      	ldr	r0, [sp, #72]	; 0x48
   87ac2:	495e      	ldr	r1, [pc, #376]	; (87c3c <_dtoa_r+0xd9c>)
   87ac4:	462a      	mov	r2, r5
   87ac6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   87aca:	4633      	mov	r3, r6
   87acc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   87ad0:	f7fd f874 	bl	84bbc <__aeabi_dmul>
   87ad4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   87ad8:	4638      	mov	r0, r7
   87ada:	4641      	mov	r1, r8
   87adc:	f001 fc50 	bl	89380 <__aeabi_d2iz>
   87ae0:	4605      	mov	r5, r0
   87ae2:	f7fd f805 	bl	84af0 <__aeabi_i2d>
   87ae6:	4602      	mov	r2, r0
   87ae8:	460b      	mov	r3, r1
   87aea:	4638      	mov	r0, r7
   87aec:	4641      	mov	r1, r8
   87aee:	f7fc feb1 	bl	84854 <__aeabi_dsub>
   87af2:	4606      	mov	r6, r0
   87af4:	9812      	ldr	r0, [sp, #72]	; 0x48
   87af6:	9a04      	ldr	r2, [sp, #16]
   87af8:	3530      	adds	r5, #48	; 0x30
   87afa:	2801      	cmp	r0, #1
   87afc:	7015      	strb	r5, [r2, #0]
   87afe:	460f      	mov	r7, r1
   87b00:	f102 0501 	add.w	r5, r2, #1
   87b04:	d026      	beq.n	87b54 <_dtoa_r+0xcb4>
   87b06:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87b08:	9a04      	ldr	r2, [sp, #16]
   87b0a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   87b0e:	4413      	add	r3, r2
   87b10:	f04f 0a00 	mov.w	sl, #0
   87b14:	4699      	mov	r9, r3
   87b16:	f8df b130 	ldr.w	fp, [pc, #304]	; 87c48 <_dtoa_r+0xda8>
   87b1a:	4652      	mov	r2, sl
   87b1c:	465b      	mov	r3, fp
   87b1e:	4630      	mov	r0, r6
   87b20:	4639      	mov	r1, r7
   87b22:	f7fd f84b 	bl	84bbc <__aeabi_dmul>
   87b26:	460f      	mov	r7, r1
   87b28:	4606      	mov	r6, r0
   87b2a:	f001 fc29 	bl	89380 <__aeabi_d2iz>
   87b2e:	4680      	mov	r8, r0
   87b30:	f7fc ffde 	bl	84af0 <__aeabi_i2d>
   87b34:	4602      	mov	r2, r0
   87b36:	460b      	mov	r3, r1
   87b38:	4630      	mov	r0, r6
   87b3a:	4639      	mov	r1, r7
   87b3c:	f7fc fe8a 	bl	84854 <__aeabi_dsub>
   87b40:	f108 0830 	add.w	r8, r8, #48	; 0x30
   87b44:	f805 8b01 	strb.w	r8, [r5], #1
   87b48:	454d      	cmp	r5, r9
   87b4a:	4606      	mov	r6, r0
   87b4c:	460f      	mov	r7, r1
   87b4e:	d1e4      	bne.n	87b1a <_dtoa_r+0xc7a>
   87b50:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87b54:	2200      	movs	r2, #0
   87b56:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   87b5a:	4b3a      	ldr	r3, [pc, #232]	; (87c44 <_dtoa_r+0xda4>)
   87b5c:	f7fc fe7c 	bl	84858 <__adddf3>
   87b60:	4632      	mov	r2, r6
   87b62:	463b      	mov	r3, r7
   87b64:	f001 fbce 	bl	89304 <__aeabi_dcmplt>
   87b68:	2800      	cmp	r0, #0
   87b6a:	d046      	beq.n	87bfa <_dtoa_r+0xd5a>
   87b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87b6e:	9302      	str	r3, [sp, #8]
   87b70:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87b74:	f7ff bb42 	b.w	871fc <_dtoa_r+0x35c>
   87b78:	f04f 0800 	mov.w	r8, #0
   87b7c:	4646      	mov	r6, r8
   87b7e:	e6a8      	b.n	878d2 <_dtoa_r+0xa32>
   87b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87b82:	9a07      	ldr	r2, [sp, #28]
   87b84:	1a9d      	subs	r5, r3, r2
   87b86:	2300      	movs	r3, #0
   87b88:	f7ff bb70 	b.w	8726c <_dtoa_r+0x3cc>
   87b8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   87b8e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87b90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   87b94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87b96:	f7ff bb69 	b.w	8726c <_dtoa_r+0x3cc>
   87b9a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   87b9e:	f04f 0a02 	mov.w	sl, #2
   87ba2:	e56d      	b.n	87680 <_dtoa_r+0x7e0>
   87ba4:	9b07      	ldr	r3, [sp, #28]
   87ba6:	2b00      	cmp	r3, #0
   87ba8:	f43f aeb8 	beq.w	8791c <_dtoa_r+0xa7c>
   87bac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87bae:	2b00      	cmp	r3, #0
   87bb0:	f77f aede 	ble.w	87970 <_dtoa_r+0xad0>
   87bb4:	2200      	movs	r2, #0
   87bb6:	4b24      	ldr	r3, [pc, #144]	; (87c48 <_dtoa_r+0xda8>)
   87bb8:	4638      	mov	r0, r7
   87bba:	4641      	mov	r1, r8
   87bbc:	f7fc fffe 	bl	84bbc <__aeabi_dmul>
   87bc0:	4607      	mov	r7, r0
   87bc2:	4688      	mov	r8, r1
   87bc4:	f10a 0001 	add.w	r0, sl, #1
   87bc8:	f7fc ff92 	bl	84af0 <__aeabi_i2d>
   87bcc:	463a      	mov	r2, r7
   87bce:	4643      	mov	r3, r8
   87bd0:	f7fc fff4 	bl	84bbc <__aeabi_dmul>
   87bd4:	2200      	movs	r2, #0
   87bd6:	4b17      	ldr	r3, [pc, #92]	; (87c34 <_dtoa_r+0xd94>)
   87bd8:	f7fc fe3e 	bl	84858 <__adddf3>
   87bdc:	9a02      	ldr	r2, [sp, #8]
   87bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87be0:	3a01      	subs	r2, #1
   87be2:	4605      	mov	r5, r0
   87be4:	9215      	str	r2, [sp, #84]	; 0x54
   87be6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87bea:	9312      	str	r3, [sp, #72]	; 0x48
   87bec:	e569      	b.n	876c2 <_dtoa_r+0x822>
   87bee:	2239      	movs	r2, #57	; 0x39
   87bf0:	46b3      	mov	fp, r6
   87bf2:	703a      	strb	r2, [r7, #0]
   87bf4:	9e08      	ldr	r6, [sp, #32]
   87bf6:	1c7d      	adds	r5, r7, #1
   87bf8:	e4bf      	b.n	8757a <_dtoa_r+0x6da>
   87bfa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   87bfe:	2000      	movs	r0, #0
   87c00:	4910      	ldr	r1, [pc, #64]	; (87c44 <_dtoa_r+0xda4>)
   87c02:	f7fc fe27 	bl	84854 <__aeabi_dsub>
   87c06:	4632      	mov	r2, r6
   87c08:	463b      	mov	r3, r7
   87c0a:	f001 fb99 	bl	89340 <__aeabi_dcmpgt>
   87c0e:	b908      	cbnz	r0, 87c14 <_dtoa_r+0xd74>
   87c10:	e6ae      	b.n	87970 <_dtoa_r+0xad0>
   87c12:	4615      	mov	r5, r2
   87c14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87c18:	1e6a      	subs	r2, r5, #1
   87c1a:	2b30      	cmp	r3, #48	; 0x30
   87c1c:	d0f9      	beq.n	87c12 <_dtoa_r+0xd72>
   87c1e:	e5d7      	b.n	877d0 <_dtoa_r+0x930>
   87c20:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87c26:	9302      	str	r3, [sp, #8]
   87c28:	f7ff bae8 	b.w	871fc <_dtoa_r+0x35c>
   87c2c:	970c      	str	r7, [sp, #48]	; 0x30
   87c2e:	f7ff bba7 	b.w	87380 <_dtoa_r+0x4e0>
   87c32:	bf00      	nop
   87c34:	401c0000 	.word	0x401c0000
   87c38:	40140000 	.word	0x40140000
   87c3c:	00089918 	.word	0x00089918
   87c40:	000898f0 	.word	0x000898f0
   87c44:	3fe00000 	.word	0x3fe00000
   87c48:	40240000 	.word	0x40240000
   87c4c:	2b39      	cmp	r3, #57	; 0x39
   87c4e:	f8cd b020 	str.w	fp, [sp, #32]
   87c52:	46d0      	mov	r8, sl
   87c54:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87c58:	469a      	mov	sl, r3
   87c5a:	d0c8      	beq.n	87bee <_dtoa_r+0xd4e>
   87c5c:	f1bb 0f00 	cmp.w	fp, #0
   87c60:	f73f aec0 	bgt.w	879e4 <_dtoa_r+0xb44>
   87c64:	e6c0      	b.n	879e8 <_dtoa_r+0xb48>
   87c66:	f47f aebf 	bne.w	879e8 <_dtoa_r+0xb48>
   87c6a:	f01a 0f01 	tst.w	sl, #1
   87c6e:	f43f aebb 	beq.w	879e8 <_dtoa_r+0xb48>
   87c72:	e6b3      	b.n	879dc <_dtoa_r+0xb3c>
   87c74:	f04f 0800 	mov.w	r8, #0
   87c78:	4646      	mov	r6, r8
   87c7a:	e5e8      	b.n	8784e <_dtoa_r+0x9ae>
   87c7c:	4631      	mov	r1, r6
   87c7e:	2300      	movs	r3, #0
   87c80:	220a      	movs	r2, #10
   87c82:	4620      	mov	r0, r4
   87c84:	f000 fb7e 	bl	88384 <__multadd>
   87c88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87c8a:	4606      	mov	r6, r0
   87c8c:	2b00      	cmp	r3, #0
   87c8e:	dd07      	ble.n	87ca0 <_dtoa_r+0xe00>
   87c90:	9307      	str	r3, [sp, #28]
   87c92:	f7ff bbab 	b.w	873ec <_dtoa_r+0x54c>
   87c96:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87c98:	2b02      	cmp	r3, #2
   87c9a:	dc1f      	bgt.n	87cdc <_dtoa_r+0xe3c>
   87c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87c9e:	e43c      	b.n	8751a <_dtoa_r+0x67a>
   87ca0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87ca2:	2b02      	cmp	r3, #2
   87ca4:	dc1a      	bgt.n	87cdc <_dtoa_r+0xe3c>
   87ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87ca8:	e7f2      	b.n	87c90 <_dtoa_r+0xdf0>
   87caa:	f43f ab81 	beq.w	873b0 <_dtoa_r+0x510>
   87cae:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   87cb2:	e411      	b.n	874d8 <_dtoa_r+0x638>
   87cb4:	2500      	movs	r5, #0
   87cb6:	4620      	mov	r0, r4
   87cb8:	6465      	str	r5, [r4, #68]	; 0x44
   87cba:	4629      	mov	r1, r5
   87cbc:	f000 fb32 	bl	88324 <_Balloc>
   87cc0:	f04f 33ff 	mov.w	r3, #4294967295
   87cc4:	9307      	str	r3, [sp, #28]
   87cc6:	930f      	str	r3, [sp, #60]	; 0x3c
   87cc8:	2301      	movs	r3, #1
   87cca:	9004      	str	r0, [sp, #16]
   87ccc:	9525      	str	r5, [sp, #148]	; 0x94
   87cce:	6420      	str	r0, [r4, #64]	; 0x40
   87cd0:	930b      	str	r3, [sp, #44]	; 0x2c
   87cd2:	f7ff b9e0 	b.w	87096 <_dtoa_r+0x1f6>
   87cd6:	2501      	movs	r5, #1
   87cd8:	f7ff b9a8 	b.w	8702c <_dtoa_r+0x18c>
   87cdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87cde:	9307      	str	r3, [sp, #28]
   87ce0:	e5e8      	b.n	878b4 <_dtoa_r+0xa14>
   87ce2:	bf00      	nop

00087ce4 <__libc_fini_array>:
   87ce4:	b538      	push	{r3, r4, r5, lr}
   87ce6:	4c0a      	ldr	r4, [pc, #40]	; (87d10 <__libc_fini_array+0x2c>)
   87ce8:	4d0a      	ldr	r5, [pc, #40]	; (87d14 <__libc_fini_array+0x30>)
   87cea:	1b64      	subs	r4, r4, r5
   87cec:	10a4      	asrs	r4, r4, #2
   87cee:	d00a      	beq.n	87d06 <__libc_fini_array+0x22>
   87cf0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   87cf4:	3b01      	subs	r3, #1
   87cf6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   87cfa:	3c01      	subs	r4, #1
   87cfc:	f855 3904 	ldr.w	r3, [r5], #-4
   87d00:	4798      	blx	r3
   87d02:	2c00      	cmp	r4, #0
   87d04:	d1f9      	bne.n	87cfa <__libc_fini_array+0x16>
   87d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   87d0a:	f001 bf03 	b.w	89b14 <_fini>
   87d0e:	bf00      	nop
   87d10:	00089b24 	.word	0x00089b24
   87d14:	00089b20 	.word	0x00089b20

00087d18 <_localeconv_r>:
   87d18:	4a04      	ldr	r2, [pc, #16]	; (87d2c <_localeconv_r+0x14>)
   87d1a:	4b05      	ldr	r3, [pc, #20]	; (87d30 <_localeconv_r+0x18>)
   87d1c:	6812      	ldr	r2, [r2, #0]
   87d1e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   87d20:	2800      	cmp	r0, #0
   87d22:	bf08      	it	eq
   87d24:	4618      	moveq	r0, r3
   87d26:	30f0      	adds	r0, #240	; 0xf0
   87d28:	4770      	bx	lr
   87d2a:	bf00      	nop
   87d2c:	200701a4 	.word	0x200701a4
   87d30:	200709e4 	.word	0x200709e4

00087d34 <__retarget_lock_acquire_recursive>:
   87d34:	4770      	bx	lr
   87d36:	bf00      	nop

00087d38 <__retarget_lock_release_recursive>:
   87d38:	4770      	bx	lr
   87d3a:	bf00      	nop

00087d3c <_malloc_r>:
   87d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87d40:	f101 060b 	add.w	r6, r1, #11
   87d44:	2e16      	cmp	r6, #22
   87d46:	b083      	sub	sp, #12
   87d48:	4605      	mov	r5, r0
   87d4a:	f240 809e 	bls.w	87e8a <_malloc_r+0x14e>
   87d4e:	f036 0607 	bics.w	r6, r6, #7
   87d52:	f100 80bd 	bmi.w	87ed0 <_malloc_r+0x194>
   87d56:	42b1      	cmp	r1, r6
   87d58:	f200 80ba 	bhi.w	87ed0 <_malloc_r+0x194>
   87d5c:	f000 fad6 	bl	8830c <__malloc_lock>
   87d60:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   87d64:	f0c0 8285 	bcc.w	88272 <_malloc_r+0x536>
   87d68:	0a73      	lsrs	r3, r6, #9
   87d6a:	f000 80b8 	beq.w	87ede <_malloc_r+0x1a2>
   87d6e:	2b04      	cmp	r3, #4
   87d70:	f200 816c 	bhi.w	8804c <_malloc_r+0x310>
   87d74:	09b3      	lsrs	r3, r6, #6
   87d76:	f103 0039 	add.w	r0, r3, #57	; 0x39
   87d7a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   87d7e:	00c1      	lsls	r1, r0, #3
   87d80:	4fb8      	ldr	r7, [pc, #736]	; (88064 <_malloc_r+0x328>)
   87d82:	4439      	add	r1, r7
   87d84:	684c      	ldr	r4, [r1, #4]
   87d86:	3908      	subs	r1, #8
   87d88:	42a1      	cmp	r1, r4
   87d8a:	d106      	bne.n	87d9a <_malloc_r+0x5e>
   87d8c:	e00c      	b.n	87da8 <_malloc_r+0x6c>
   87d8e:	2a00      	cmp	r2, #0
   87d90:	f280 80ab 	bge.w	87eea <_malloc_r+0x1ae>
   87d94:	68e4      	ldr	r4, [r4, #12]
   87d96:	42a1      	cmp	r1, r4
   87d98:	d006      	beq.n	87da8 <_malloc_r+0x6c>
   87d9a:	6863      	ldr	r3, [r4, #4]
   87d9c:	f023 0303 	bic.w	r3, r3, #3
   87da0:	1b9a      	subs	r2, r3, r6
   87da2:	2a0f      	cmp	r2, #15
   87da4:	ddf3      	ble.n	87d8e <_malloc_r+0x52>
   87da6:	4670      	mov	r0, lr
   87da8:	693c      	ldr	r4, [r7, #16]
   87daa:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 88078 <_malloc_r+0x33c>
   87dae:	4574      	cmp	r4, lr
   87db0:	f000 819e 	beq.w	880f0 <_malloc_r+0x3b4>
   87db4:	6863      	ldr	r3, [r4, #4]
   87db6:	f023 0303 	bic.w	r3, r3, #3
   87dba:	1b9a      	subs	r2, r3, r6
   87dbc:	2a0f      	cmp	r2, #15
   87dbe:	f300 8183 	bgt.w	880c8 <_malloc_r+0x38c>
   87dc2:	2a00      	cmp	r2, #0
   87dc4:	f8c7 e014 	str.w	lr, [r7, #20]
   87dc8:	f8c7 e010 	str.w	lr, [r7, #16]
   87dcc:	f280 8091 	bge.w	87ef2 <_malloc_r+0x1b6>
   87dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   87dd4:	f080 8154 	bcs.w	88080 <_malloc_r+0x344>
   87dd8:	2201      	movs	r2, #1
   87dda:	08db      	lsrs	r3, r3, #3
   87ddc:	6879      	ldr	r1, [r7, #4]
   87dde:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   87de2:	4413      	add	r3, r2
   87de4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   87de8:	fa02 f20c 	lsl.w	r2, r2, ip
   87dec:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   87df0:	430a      	orrs	r2, r1
   87df2:	f1ac 0108 	sub.w	r1, ip, #8
   87df6:	60e1      	str	r1, [r4, #12]
   87df8:	f8c4 8008 	str.w	r8, [r4, #8]
   87dfc:	607a      	str	r2, [r7, #4]
   87dfe:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   87e02:	f8c8 400c 	str.w	r4, [r8, #12]
   87e06:	2401      	movs	r4, #1
   87e08:	1083      	asrs	r3, r0, #2
   87e0a:	409c      	lsls	r4, r3
   87e0c:	4294      	cmp	r4, r2
   87e0e:	d87d      	bhi.n	87f0c <_malloc_r+0x1d0>
   87e10:	4214      	tst	r4, r2
   87e12:	d106      	bne.n	87e22 <_malloc_r+0xe6>
   87e14:	f020 0003 	bic.w	r0, r0, #3
   87e18:	0064      	lsls	r4, r4, #1
   87e1a:	4214      	tst	r4, r2
   87e1c:	f100 0004 	add.w	r0, r0, #4
   87e20:	d0fa      	beq.n	87e18 <_malloc_r+0xdc>
   87e22:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   87e26:	46cc      	mov	ip, r9
   87e28:	4680      	mov	r8, r0
   87e2a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87e2e:	459c      	cmp	ip, r3
   87e30:	d107      	bne.n	87e42 <_malloc_r+0x106>
   87e32:	e15f      	b.n	880f4 <_malloc_r+0x3b8>
   87e34:	2a00      	cmp	r2, #0
   87e36:	f280 816d 	bge.w	88114 <_malloc_r+0x3d8>
   87e3a:	68db      	ldr	r3, [r3, #12]
   87e3c:	459c      	cmp	ip, r3
   87e3e:	f000 8159 	beq.w	880f4 <_malloc_r+0x3b8>
   87e42:	6859      	ldr	r1, [r3, #4]
   87e44:	f021 0103 	bic.w	r1, r1, #3
   87e48:	1b8a      	subs	r2, r1, r6
   87e4a:	2a0f      	cmp	r2, #15
   87e4c:	ddf2      	ble.n	87e34 <_malloc_r+0xf8>
   87e4e:	68dc      	ldr	r4, [r3, #12]
   87e50:	f8d3 c008 	ldr.w	ip, [r3, #8]
   87e54:	f046 0801 	orr.w	r8, r6, #1
   87e58:	4628      	mov	r0, r5
   87e5a:	441e      	add	r6, r3
   87e5c:	f042 0501 	orr.w	r5, r2, #1
   87e60:	f8c3 8004 	str.w	r8, [r3, #4]
   87e64:	f8cc 400c 	str.w	r4, [ip, #12]
   87e68:	f8c4 c008 	str.w	ip, [r4, #8]
   87e6c:	617e      	str	r6, [r7, #20]
   87e6e:	613e      	str	r6, [r7, #16]
   87e70:	f8c6 e00c 	str.w	lr, [r6, #12]
   87e74:	f8c6 e008 	str.w	lr, [r6, #8]
   87e78:	6075      	str	r5, [r6, #4]
   87e7a:	505a      	str	r2, [r3, r1]
   87e7c:	9300      	str	r3, [sp, #0]
   87e7e:	f000 fa4b 	bl	88318 <__malloc_unlock>
   87e82:	9b00      	ldr	r3, [sp, #0]
   87e84:	f103 0408 	add.w	r4, r3, #8
   87e88:	e01e      	b.n	87ec8 <_malloc_r+0x18c>
   87e8a:	2910      	cmp	r1, #16
   87e8c:	d820      	bhi.n	87ed0 <_malloc_r+0x194>
   87e8e:	f000 fa3d 	bl	8830c <__malloc_lock>
   87e92:	2610      	movs	r6, #16
   87e94:	2318      	movs	r3, #24
   87e96:	2002      	movs	r0, #2
   87e98:	4f72      	ldr	r7, [pc, #456]	; (88064 <_malloc_r+0x328>)
   87e9a:	443b      	add	r3, r7
   87e9c:	685c      	ldr	r4, [r3, #4]
   87e9e:	f1a3 0208 	sub.w	r2, r3, #8
   87ea2:	4294      	cmp	r4, r2
   87ea4:	f000 812f 	beq.w	88106 <_malloc_r+0x3ca>
   87ea8:	6863      	ldr	r3, [r4, #4]
   87eaa:	68e1      	ldr	r1, [r4, #12]
   87eac:	f023 0303 	bic.w	r3, r3, #3
   87eb0:	4423      	add	r3, r4
   87eb2:	685a      	ldr	r2, [r3, #4]
   87eb4:	68a6      	ldr	r6, [r4, #8]
   87eb6:	f042 0201 	orr.w	r2, r2, #1
   87eba:	60f1      	str	r1, [r6, #12]
   87ebc:	4628      	mov	r0, r5
   87ebe:	608e      	str	r6, [r1, #8]
   87ec0:	605a      	str	r2, [r3, #4]
   87ec2:	f000 fa29 	bl	88318 <__malloc_unlock>
   87ec6:	3408      	adds	r4, #8
   87ec8:	4620      	mov	r0, r4
   87eca:	b003      	add	sp, #12
   87ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ed0:	2400      	movs	r4, #0
   87ed2:	230c      	movs	r3, #12
   87ed4:	4620      	mov	r0, r4
   87ed6:	602b      	str	r3, [r5, #0]
   87ed8:	b003      	add	sp, #12
   87eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ede:	2040      	movs	r0, #64	; 0x40
   87ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
   87ee4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   87ee8:	e74a      	b.n	87d80 <_malloc_r+0x44>
   87eea:	4423      	add	r3, r4
   87eec:	685a      	ldr	r2, [r3, #4]
   87eee:	68e1      	ldr	r1, [r4, #12]
   87ef0:	e7e0      	b.n	87eb4 <_malloc_r+0x178>
   87ef2:	4423      	add	r3, r4
   87ef4:	685a      	ldr	r2, [r3, #4]
   87ef6:	4628      	mov	r0, r5
   87ef8:	f042 0201 	orr.w	r2, r2, #1
   87efc:	605a      	str	r2, [r3, #4]
   87efe:	3408      	adds	r4, #8
   87f00:	f000 fa0a 	bl	88318 <__malloc_unlock>
   87f04:	4620      	mov	r0, r4
   87f06:	b003      	add	sp, #12
   87f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87f0c:	68bc      	ldr	r4, [r7, #8]
   87f0e:	6863      	ldr	r3, [r4, #4]
   87f10:	f023 0803 	bic.w	r8, r3, #3
   87f14:	45b0      	cmp	r8, r6
   87f16:	d304      	bcc.n	87f22 <_malloc_r+0x1e6>
   87f18:	eba8 0306 	sub.w	r3, r8, r6
   87f1c:	2b0f      	cmp	r3, #15
   87f1e:	f300 8085 	bgt.w	8802c <_malloc_r+0x2f0>
   87f22:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8807c <_malloc_r+0x340>
   87f26:	4b50      	ldr	r3, [pc, #320]	; (88068 <_malloc_r+0x32c>)
   87f28:	f8d9 2000 	ldr.w	r2, [r9]
   87f2c:	681b      	ldr	r3, [r3, #0]
   87f2e:	3201      	adds	r2, #1
   87f30:	4433      	add	r3, r6
   87f32:	eb04 0a08 	add.w	sl, r4, r8
   87f36:	f000 8154 	beq.w	881e2 <_malloc_r+0x4a6>
   87f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   87f3e:	330f      	adds	r3, #15
   87f40:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   87f44:	f02b 0b0f 	bic.w	fp, fp, #15
   87f48:	4659      	mov	r1, fp
   87f4a:	4628      	mov	r0, r5
   87f4c:	f000 fce6 	bl	8891c <_sbrk_r>
   87f50:	1c41      	adds	r1, r0, #1
   87f52:	4602      	mov	r2, r0
   87f54:	f000 80fb 	beq.w	8814e <_malloc_r+0x412>
   87f58:	4582      	cmp	sl, r0
   87f5a:	f200 80f6 	bhi.w	8814a <_malloc_r+0x40e>
   87f5e:	4b43      	ldr	r3, [pc, #268]	; (8806c <_malloc_r+0x330>)
   87f60:	6819      	ldr	r1, [r3, #0]
   87f62:	4459      	add	r1, fp
   87f64:	6019      	str	r1, [r3, #0]
   87f66:	f000 814c 	beq.w	88202 <_malloc_r+0x4c6>
   87f6a:	f8d9 0000 	ldr.w	r0, [r9]
   87f6e:	3001      	adds	r0, #1
   87f70:	bf1b      	ittet	ne
   87f72:	eba2 0a0a 	subne.w	sl, r2, sl
   87f76:	4451      	addne	r1, sl
   87f78:	f8c9 2000 	streq.w	r2, [r9]
   87f7c:	6019      	strne	r1, [r3, #0]
   87f7e:	f012 0107 	ands.w	r1, r2, #7
   87f82:	f000 8114 	beq.w	881ae <_malloc_r+0x472>
   87f86:	f1c1 0008 	rsb	r0, r1, #8
   87f8a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   87f8e:	4402      	add	r2, r0
   87f90:	3108      	adds	r1, #8
   87f92:	eb02 090b 	add.w	r9, r2, fp
   87f96:	f3c9 090b 	ubfx	r9, r9, #0, #12
   87f9a:	eba1 0909 	sub.w	r9, r1, r9
   87f9e:	4649      	mov	r1, r9
   87fa0:	4628      	mov	r0, r5
   87fa2:	9301      	str	r3, [sp, #4]
   87fa4:	9200      	str	r2, [sp, #0]
   87fa6:	f000 fcb9 	bl	8891c <_sbrk_r>
   87faa:	1c43      	adds	r3, r0, #1
   87fac:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87fb0:	f000 8142 	beq.w	88238 <_malloc_r+0x4fc>
   87fb4:	1a80      	subs	r0, r0, r2
   87fb6:	4448      	add	r0, r9
   87fb8:	f040 0001 	orr.w	r0, r0, #1
   87fbc:	6819      	ldr	r1, [r3, #0]
   87fbe:	42bc      	cmp	r4, r7
   87fc0:	4449      	add	r1, r9
   87fc2:	60ba      	str	r2, [r7, #8]
   87fc4:	6019      	str	r1, [r3, #0]
   87fc6:	6050      	str	r0, [r2, #4]
   87fc8:	d017      	beq.n	87ffa <_malloc_r+0x2be>
   87fca:	f1b8 0f0f 	cmp.w	r8, #15
   87fce:	f240 80fa 	bls.w	881c6 <_malloc_r+0x48a>
   87fd2:	f04f 0c05 	mov.w	ip, #5
   87fd6:	6862      	ldr	r2, [r4, #4]
   87fd8:	f1a8 000c 	sub.w	r0, r8, #12
   87fdc:	f020 0007 	bic.w	r0, r0, #7
   87fe0:	f002 0201 	and.w	r2, r2, #1
   87fe4:	eb04 0e00 	add.w	lr, r4, r0
   87fe8:	4302      	orrs	r2, r0
   87fea:	280f      	cmp	r0, #15
   87fec:	6062      	str	r2, [r4, #4]
   87fee:	f8ce c004 	str.w	ip, [lr, #4]
   87ff2:	f8ce c008 	str.w	ip, [lr, #8]
   87ff6:	f200 8116 	bhi.w	88226 <_malloc_r+0x4ea>
   87ffa:	4b1d      	ldr	r3, [pc, #116]	; (88070 <_malloc_r+0x334>)
   87ffc:	68bc      	ldr	r4, [r7, #8]
   87ffe:	681a      	ldr	r2, [r3, #0]
   88000:	4291      	cmp	r1, r2
   88002:	bf88      	it	hi
   88004:	6019      	strhi	r1, [r3, #0]
   88006:	4b1b      	ldr	r3, [pc, #108]	; (88074 <_malloc_r+0x338>)
   88008:	681a      	ldr	r2, [r3, #0]
   8800a:	4291      	cmp	r1, r2
   8800c:	6862      	ldr	r2, [r4, #4]
   8800e:	bf88      	it	hi
   88010:	6019      	strhi	r1, [r3, #0]
   88012:	f022 0203 	bic.w	r2, r2, #3
   88016:	4296      	cmp	r6, r2
   88018:	eba2 0306 	sub.w	r3, r2, r6
   8801c:	d801      	bhi.n	88022 <_malloc_r+0x2e6>
   8801e:	2b0f      	cmp	r3, #15
   88020:	dc04      	bgt.n	8802c <_malloc_r+0x2f0>
   88022:	4628      	mov	r0, r5
   88024:	f000 f978 	bl	88318 <__malloc_unlock>
   88028:	2400      	movs	r4, #0
   8802a:	e74d      	b.n	87ec8 <_malloc_r+0x18c>
   8802c:	f046 0201 	orr.w	r2, r6, #1
   88030:	f043 0301 	orr.w	r3, r3, #1
   88034:	4426      	add	r6, r4
   88036:	6062      	str	r2, [r4, #4]
   88038:	4628      	mov	r0, r5
   8803a:	60be      	str	r6, [r7, #8]
   8803c:	3408      	adds	r4, #8
   8803e:	6073      	str	r3, [r6, #4]
   88040:	f000 f96a 	bl	88318 <__malloc_unlock>
   88044:	4620      	mov	r0, r4
   88046:	b003      	add	sp, #12
   88048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8804c:	2b14      	cmp	r3, #20
   8804e:	d970      	bls.n	88132 <_malloc_r+0x3f6>
   88050:	2b54      	cmp	r3, #84	; 0x54
   88052:	f200 80a2 	bhi.w	8819a <_malloc_r+0x45e>
   88056:	0b33      	lsrs	r3, r6, #12
   88058:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8805c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   88060:	00c1      	lsls	r1, r0, #3
   88062:	e68d      	b.n	87d80 <_malloc_r+0x44>
   88064:	200705d4 	.word	0x200705d4
   88068:	20070e04 	.word	0x20070e04
   8806c:	20070dd4 	.word	0x20070dd4
   88070:	20070dfc 	.word	0x20070dfc
   88074:	20070e00 	.word	0x20070e00
   88078:	200705dc 	.word	0x200705dc
   8807c:	200709dc 	.word	0x200709dc
   88080:	0a5a      	lsrs	r2, r3, #9
   88082:	2a04      	cmp	r2, #4
   88084:	d95b      	bls.n	8813e <_malloc_r+0x402>
   88086:	2a14      	cmp	r2, #20
   88088:	f200 80ae 	bhi.w	881e8 <_malloc_r+0x4ac>
   8808c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   88090:	00c9      	lsls	r1, r1, #3
   88092:	325b      	adds	r2, #91	; 0x5b
   88094:	eb07 0c01 	add.w	ip, r7, r1
   88098:	5879      	ldr	r1, [r7, r1]
   8809a:	f1ac 0c08 	sub.w	ip, ip, #8
   8809e:	458c      	cmp	ip, r1
   880a0:	f000 8088 	beq.w	881b4 <_malloc_r+0x478>
   880a4:	684a      	ldr	r2, [r1, #4]
   880a6:	f022 0203 	bic.w	r2, r2, #3
   880aa:	4293      	cmp	r3, r2
   880ac:	d273      	bcs.n	88196 <_malloc_r+0x45a>
   880ae:	6889      	ldr	r1, [r1, #8]
   880b0:	458c      	cmp	ip, r1
   880b2:	d1f7      	bne.n	880a4 <_malloc_r+0x368>
   880b4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   880b8:	687a      	ldr	r2, [r7, #4]
   880ba:	60e3      	str	r3, [r4, #12]
   880bc:	f8c4 c008 	str.w	ip, [r4, #8]
   880c0:	609c      	str	r4, [r3, #8]
   880c2:	f8cc 400c 	str.w	r4, [ip, #12]
   880c6:	e69e      	b.n	87e06 <_malloc_r+0xca>
   880c8:	f046 0c01 	orr.w	ip, r6, #1
   880cc:	f042 0101 	orr.w	r1, r2, #1
   880d0:	4426      	add	r6, r4
   880d2:	f8c4 c004 	str.w	ip, [r4, #4]
   880d6:	4628      	mov	r0, r5
   880d8:	617e      	str	r6, [r7, #20]
   880da:	613e      	str	r6, [r7, #16]
   880dc:	f8c6 e00c 	str.w	lr, [r6, #12]
   880e0:	f8c6 e008 	str.w	lr, [r6, #8]
   880e4:	6071      	str	r1, [r6, #4]
   880e6:	50e2      	str	r2, [r4, r3]
   880e8:	f000 f916 	bl	88318 <__malloc_unlock>
   880ec:	3408      	adds	r4, #8
   880ee:	e6eb      	b.n	87ec8 <_malloc_r+0x18c>
   880f0:	687a      	ldr	r2, [r7, #4]
   880f2:	e688      	b.n	87e06 <_malloc_r+0xca>
   880f4:	f108 0801 	add.w	r8, r8, #1
   880f8:	f018 0f03 	tst.w	r8, #3
   880fc:	f10c 0c08 	add.w	ip, ip, #8
   88100:	f47f ae93 	bne.w	87e2a <_malloc_r+0xee>
   88104:	e02d      	b.n	88162 <_malloc_r+0x426>
   88106:	68dc      	ldr	r4, [r3, #12]
   88108:	42a3      	cmp	r3, r4
   8810a:	bf08      	it	eq
   8810c:	3002      	addeq	r0, #2
   8810e:	f43f ae4b 	beq.w	87da8 <_malloc_r+0x6c>
   88112:	e6c9      	b.n	87ea8 <_malloc_r+0x16c>
   88114:	461c      	mov	r4, r3
   88116:	4419      	add	r1, r3
   88118:	684a      	ldr	r2, [r1, #4]
   8811a:	68db      	ldr	r3, [r3, #12]
   8811c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   88120:	f042 0201 	orr.w	r2, r2, #1
   88124:	604a      	str	r2, [r1, #4]
   88126:	4628      	mov	r0, r5
   88128:	60f3      	str	r3, [r6, #12]
   8812a:	609e      	str	r6, [r3, #8]
   8812c:	f000 f8f4 	bl	88318 <__malloc_unlock>
   88130:	e6ca      	b.n	87ec8 <_malloc_r+0x18c>
   88132:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   88136:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8813a:	00c1      	lsls	r1, r0, #3
   8813c:	e620      	b.n	87d80 <_malloc_r+0x44>
   8813e:	099a      	lsrs	r2, r3, #6
   88140:	f102 0139 	add.w	r1, r2, #57	; 0x39
   88144:	00c9      	lsls	r1, r1, #3
   88146:	3238      	adds	r2, #56	; 0x38
   88148:	e7a4      	b.n	88094 <_malloc_r+0x358>
   8814a:	42bc      	cmp	r4, r7
   8814c:	d054      	beq.n	881f8 <_malloc_r+0x4bc>
   8814e:	68bc      	ldr	r4, [r7, #8]
   88150:	6862      	ldr	r2, [r4, #4]
   88152:	f022 0203 	bic.w	r2, r2, #3
   88156:	e75e      	b.n	88016 <_malloc_r+0x2da>
   88158:	f859 3908 	ldr.w	r3, [r9], #-8
   8815c:	4599      	cmp	r9, r3
   8815e:	f040 8086 	bne.w	8826e <_malloc_r+0x532>
   88162:	f010 0f03 	tst.w	r0, #3
   88166:	f100 30ff 	add.w	r0, r0, #4294967295
   8816a:	d1f5      	bne.n	88158 <_malloc_r+0x41c>
   8816c:	687b      	ldr	r3, [r7, #4]
   8816e:	ea23 0304 	bic.w	r3, r3, r4
   88172:	607b      	str	r3, [r7, #4]
   88174:	0064      	lsls	r4, r4, #1
   88176:	429c      	cmp	r4, r3
   88178:	f63f aec8 	bhi.w	87f0c <_malloc_r+0x1d0>
   8817c:	2c00      	cmp	r4, #0
   8817e:	f43f aec5 	beq.w	87f0c <_malloc_r+0x1d0>
   88182:	421c      	tst	r4, r3
   88184:	4640      	mov	r0, r8
   88186:	f47f ae4c 	bne.w	87e22 <_malloc_r+0xe6>
   8818a:	0064      	lsls	r4, r4, #1
   8818c:	421c      	tst	r4, r3
   8818e:	f100 0004 	add.w	r0, r0, #4
   88192:	d0fa      	beq.n	8818a <_malloc_r+0x44e>
   88194:	e645      	b.n	87e22 <_malloc_r+0xe6>
   88196:	468c      	mov	ip, r1
   88198:	e78c      	b.n	880b4 <_malloc_r+0x378>
   8819a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8819e:	d815      	bhi.n	881cc <_malloc_r+0x490>
   881a0:	0bf3      	lsrs	r3, r6, #15
   881a2:	f103 0078 	add.w	r0, r3, #120	; 0x78
   881a6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   881aa:	00c1      	lsls	r1, r0, #3
   881ac:	e5e8      	b.n	87d80 <_malloc_r+0x44>
   881ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   881b2:	e6ee      	b.n	87f92 <_malloc_r+0x256>
   881b4:	2101      	movs	r1, #1
   881b6:	687b      	ldr	r3, [r7, #4]
   881b8:	1092      	asrs	r2, r2, #2
   881ba:	fa01 f202 	lsl.w	r2, r1, r2
   881be:	431a      	orrs	r2, r3
   881c0:	607a      	str	r2, [r7, #4]
   881c2:	4663      	mov	r3, ip
   881c4:	e779      	b.n	880ba <_malloc_r+0x37e>
   881c6:	2301      	movs	r3, #1
   881c8:	6053      	str	r3, [r2, #4]
   881ca:	e72a      	b.n	88022 <_malloc_r+0x2e6>
   881cc:	f240 5254 	movw	r2, #1364	; 0x554
   881d0:	4293      	cmp	r3, r2
   881d2:	d822      	bhi.n	8821a <_malloc_r+0x4de>
   881d4:	0cb3      	lsrs	r3, r6, #18
   881d6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   881da:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   881de:	00c1      	lsls	r1, r0, #3
   881e0:	e5ce      	b.n	87d80 <_malloc_r+0x44>
   881e2:	f103 0b10 	add.w	fp, r3, #16
   881e6:	e6af      	b.n	87f48 <_malloc_r+0x20c>
   881e8:	2a54      	cmp	r2, #84	; 0x54
   881ea:	d829      	bhi.n	88240 <_malloc_r+0x504>
   881ec:	0b1a      	lsrs	r2, r3, #12
   881ee:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   881f2:	00c9      	lsls	r1, r1, #3
   881f4:	326e      	adds	r2, #110	; 0x6e
   881f6:	e74d      	b.n	88094 <_malloc_r+0x358>
   881f8:	4b20      	ldr	r3, [pc, #128]	; (8827c <_malloc_r+0x540>)
   881fa:	6819      	ldr	r1, [r3, #0]
   881fc:	4459      	add	r1, fp
   881fe:	6019      	str	r1, [r3, #0]
   88200:	e6b3      	b.n	87f6a <_malloc_r+0x22e>
   88202:	f3ca 000b 	ubfx	r0, sl, #0, #12
   88206:	2800      	cmp	r0, #0
   88208:	f47f aeaf 	bne.w	87f6a <_malloc_r+0x22e>
   8820c:	eb08 030b 	add.w	r3, r8, fp
   88210:	68ba      	ldr	r2, [r7, #8]
   88212:	f043 0301 	orr.w	r3, r3, #1
   88216:	6053      	str	r3, [r2, #4]
   88218:	e6ef      	b.n	87ffa <_malloc_r+0x2be>
   8821a:	207f      	movs	r0, #127	; 0x7f
   8821c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   88220:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   88224:	e5ac      	b.n	87d80 <_malloc_r+0x44>
   88226:	f104 0108 	add.w	r1, r4, #8
   8822a:	4628      	mov	r0, r5
   8822c:	9300      	str	r3, [sp, #0]
   8822e:	f000 fce7 	bl	88c00 <_free_r>
   88232:	9b00      	ldr	r3, [sp, #0]
   88234:	6819      	ldr	r1, [r3, #0]
   88236:	e6e0      	b.n	87ffa <_malloc_r+0x2be>
   88238:	2001      	movs	r0, #1
   8823a:	f04f 0900 	mov.w	r9, #0
   8823e:	e6bd      	b.n	87fbc <_malloc_r+0x280>
   88240:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   88244:	d805      	bhi.n	88252 <_malloc_r+0x516>
   88246:	0bda      	lsrs	r2, r3, #15
   88248:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8824c:	00c9      	lsls	r1, r1, #3
   8824e:	3277      	adds	r2, #119	; 0x77
   88250:	e720      	b.n	88094 <_malloc_r+0x358>
   88252:	f240 5154 	movw	r1, #1364	; 0x554
   88256:	428a      	cmp	r2, r1
   88258:	d805      	bhi.n	88266 <_malloc_r+0x52a>
   8825a:	0c9a      	lsrs	r2, r3, #18
   8825c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   88260:	00c9      	lsls	r1, r1, #3
   88262:	327c      	adds	r2, #124	; 0x7c
   88264:	e716      	b.n	88094 <_malloc_r+0x358>
   88266:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8826a:	227e      	movs	r2, #126	; 0x7e
   8826c:	e712      	b.n	88094 <_malloc_r+0x358>
   8826e:	687b      	ldr	r3, [r7, #4]
   88270:	e780      	b.n	88174 <_malloc_r+0x438>
   88272:	08f0      	lsrs	r0, r6, #3
   88274:	f106 0308 	add.w	r3, r6, #8
   88278:	e60e      	b.n	87e98 <_malloc_r+0x15c>
   8827a:	bf00      	nop
   8827c:	20070dd4 	.word	0x20070dd4

00088280 <memchr>:
   88280:	0783      	lsls	r3, r0, #30
   88282:	b470      	push	{r4, r5, r6}
   88284:	b2cd      	uxtb	r5, r1
   88286:	d03d      	beq.n	88304 <memchr+0x84>
   88288:	1e54      	subs	r4, r2, #1
   8828a:	b30a      	cbz	r2, 882d0 <memchr+0x50>
   8828c:	7803      	ldrb	r3, [r0, #0]
   8828e:	42ab      	cmp	r3, r5
   88290:	d01f      	beq.n	882d2 <memchr+0x52>
   88292:	1c43      	adds	r3, r0, #1
   88294:	e005      	b.n	882a2 <memchr+0x22>
   88296:	f114 34ff 	adds.w	r4, r4, #4294967295
   8829a:	d319      	bcc.n	882d0 <memchr+0x50>
   8829c:	7802      	ldrb	r2, [r0, #0]
   8829e:	42aa      	cmp	r2, r5
   882a0:	d017      	beq.n	882d2 <memchr+0x52>
   882a2:	f013 0f03 	tst.w	r3, #3
   882a6:	4618      	mov	r0, r3
   882a8:	f103 0301 	add.w	r3, r3, #1
   882ac:	d1f3      	bne.n	88296 <memchr+0x16>
   882ae:	2c03      	cmp	r4, #3
   882b0:	d811      	bhi.n	882d6 <memchr+0x56>
   882b2:	b34c      	cbz	r4, 88308 <memchr+0x88>
   882b4:	7803      	ldrb	r3, [r0, #0]
   882b6:	42ab      	cmp	r3, r5
   882b8:	d00b      	beq.n	882d2 <memchr+0x52>
   882ba:	4404      	add	r4, r0
   882bc:	1c43      	adds	r3, r0, #1
   882be:	e002      	b.n	882c6 <memchr+0x46>
   882c0:	7802      	ldrb	r2, [r0, #0]
   882c2:	42aa      	cmp	r2, r5
   882c4:	d005      	beq.n	882d2 <memchr+0x52>
   882c6:	429c      	cmp	r4, r3
   882c8:	4618      	mov	r0, r3
   882ca:	f103 0301 	add.w	r3, r3, #1
   882ce:	d1f7      	bne.n	882c0 <memchr+0x40>
   882d0:	2000      	movs	r0, #0
   882d2:	bc70      	pop	{r4, r5, r6}
   882d4:	4770      	bx	lr
   882d6:	0209      	lsls	r1, r1, #8
   882d8:	b289      	uxth	r1, r1
   882da:	4329      	orrs	r1, r5
   882dc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   882e0:	6803      	ldr	r3, [r0, #0]
   882e2:	4606      	mov	r6, r0
   882e4:	404b      	eors	r3, r1
   882e6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   882ea:	ea22 0303 	bic.w	r3, r2, r3
   882ee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   882f2:	f100 0004 	add.w	r0, r0, #4
   882f6:	d103      	bne.n	88300 <memchr+0x80>
   882f8:	3c04      	subs	r4, #4
   882fa:	2c03      	cmp	r4, #3
   882fc:	d8f0      	bhi.n	882e0 <memchr+0x60>
   882fe:	e7d8      	b.n	882b2 <memchr+0x32>
   88300:	4630      	mov	r0, r6
   88302:	e7d7      	b.n	882b4 <memchr+0x34>
   88304:	4614      	mov	r4, r2
   88306:	e7d2      	b.n	882ae <memchr+0x2e>
   88308:	4620      	mov	r0, r4
   8830a:	e7e2      	b.n	882d2 <memchr+0x52>

0008830c <__malloc_lock>:
   8830c:	4801      	ldr	r0, [pc, #4]	; (88314 <__malloc_lock+0x8>)
   8830e:	f7ff bd11 	b.w	87d34 <__retarget_lock_acquire_recursive>
   88312:	bf00      	nop
   88314:	20070ff8 	.word	0x20070ff8

00088318 <__malloc_unlock>:
   88318:	4801      	ldr	r0, [pc, #4]	; (88320 <__malloc_unlock+0x8>)
   8831a:	f7ff bd0d 	b.w	87d38 <__retarget_lock_release_recursive>
   8831e:	bf00      	nop
   88320:	20070ff8 	.word	0x20070ff8

00088324 <_Balloc>:
   88324:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88326:	b570      	push	{r4, r5, r6, lr}
   88328:	4605      	mov	r5, r0
   8832a:	460c      	mov	r4, r1
   8832c:	b14b      	cbz	r3, 88342 <_Balloc+0x1e>
   8832e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   88332:	b180      	cbz	r0, 88356 <_Balloc+0x32>
   88334:	6802      	ldr	r2, [r0, #0]
   88336:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8833a:	2300      	movs	r3, #0
   8833c:	6103      	str	r3, [r0, #16]
   8833e:	60c3      	str	r3, [r0, #12]
   88340:	bd70      	pop	{r4, r5, r6, pc}
   88342:	2221      	movs	r2, #33	; 0x21
   88344:	2104      	movs	r1, #4
   88346:	f000 fbdb 	bl	88b00 <_calloc_r>
   8834a:	64e8      	str	r0, [r5, #76]	; 0x4c
   8834c:	4603      	mov	r3, r0
   8834e:	2800      	cmp	r0, #0
   88350:	d1ed      	bne.n	8832e <_Balloc+0xa>
   88352:	2000      	movs	r0, #0
   88354:	bd70      	pop	{r4, r5, r6, pc}
   88356:	2101      	movs	r1, #1
   88358:	fa01 f604 	lsl.w	r6, r1, r4
   8835c:	1d72      	adds	r2, r6, #5
   8835e:	4628      	mov	r0, r5
   88360:	0092      	lsls	r2, r2, #2
   88362:	f000 fbcd 	bl	88b00 <_calloc_r>
   88366:	2800      	cmp	r0, #0
   88368:	d0f3      	beq.n	88352 <_Balloc+0x2e>
   8836a:	6044      	str	r4, [r0, #4]
   8836c:	6086      	str	r6, [r0, #8]
   8836e:	e7e4      	b.n	8833a <_Balloc+0x16>

00088370 <_Bfree>:
   88370:	b131      	cbz	r1, 88380 <_Bfree+0x10>
   88372:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88374:	684a      	ldr	r2, [r1, #4]
   88376:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8837a:	6008      	str	r0, [r1, #0]
   8837c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   88380:	4770      	bx	lr
   88382:	bf00      	nop

00088384 <__multadd>:
   88384:	b5f0      	push	{r4, r5, r6, r7, lr}
   88386:	460c      	mov	r4, r1
   88388:	4605      	mov	r5, r0
   8838a:	f04f 0e00 	mov.w	lr, #0
   8838e:	690e      	ldr	r6, [r1, #16]
   88390:	b083      	sub	sp, #12
   88392:	f101 0714 	add.w	r7, r1, #20
   88396:	6838      	ldr	r0, [r7, #0]
   88398:	f10e 0e01 	add.w	lr, lr, #1
   8839c:	b281      	uxth	r1, r0
   8839e:	fb02 3301 	mla	r3, r2, r1, r3
   883a2:	0c01      	lsrs	r1, r0, #16
   883a4:	0c18      	lsrs	r0, r3, #16
   883a6:	fb02 0101 	mla	r1, r2, r1, r0
   883aa:	b29b      	uxth	r3, r3
   883ac:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   883b0:	4576      	cmp	r6, lr
   883b2:	f847 3b04 	str.w	r3, [r7], #4
   883b6:	ea4f 4311 	mov.w	r3, r1, lsr #16
   883ba:	dcec      	bgt.n	88396 <__multadd+0x12>
   883bc:	b13b      	cbz	r3, 883ce <__multadd+0x4a>
   883be:	68a2      	ldr	r2, [r4, #8]
   883c0:	4296      	cmp	r6, r2
   883c2:	da07      	bge.n	883d4 <__multadd+0x50>
   883c4:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   883c8:	3601      	adds	r6, #1
   883ca:	6153      	str	r3, [r2, #20]
   883cc:	6126      	str	r6, [r4, #16]
   883ce:	4620      	mov	r0, r4
   883d0:	b003      	add	sp, #12
   883d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   883d4:	6861      	ldr	r1, [r4, #4]
   883d6:	4628      	mov	r0, r5
   883d8:	3101      	adds	r1, #1
   883da:	9301      	str	r3, [sp, #4]
   883dc:	f7ff ffa2 	bl	88324 <_Balloc>
   883e0:	4607      	mov	r7, r0
   883e2:	6922      	ldr	r2, [r4, #16]
   883e4:	f104 010c 	add.w	r1, r4, #12
   883e8:	3202      	adds	r2, #2
   883ea:	0092      	lsls	r2, r2, #2
   883ec:	300c      	adds	r0, #12
   883ee:	f7fd f919 	bl	85624 <memcpy>
   883f2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   883f4:	6861      	ldr	r1, [r4, #4]
   883f6:	9b01      	ldr	r3, [sp, #4]
   883f8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   883fc:	6020      	str	r0, [r4, #0]
   883fe:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   88402:	463c      	mov	r4, r7
   88404:	e7de      	b.n	883c4 <__multadd+0x40>
   88406:	bf00      	nop

00088408 <__hi0bits>:
   88408:	0c02      	lsrs	r2, r0, #16
   8840a:	0412      	lsls	r2, r2, #16
   8840c:	4603      	mov	r3, r0
   8840e:	b9b2      	cbnz	r2, 8843e <__hi0bits+0x36>
   88410:	0403      	lsls	r3, r0, #16
   88412:	2010      	movs	r0, #16
   88414:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   88418:	bf04      	itt	eq
   8841a:	021b      	lsleq	r3, r3, #8
   8841c:	3008      	addeq	r0, #8
   8841e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   88422:	bf04      	itt	eq
   88424:	011b      	lsleq	r3, r3, #4
   88426:	3004      	addeq	r0, #4
   88428:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8842c:	bf04      	itt	eq
   8842e:	009b      	lsleq	r3, r3, #2
   88430:	3002      	addeq	r0, #2
   88432:	2b00      	cmp	r3, #0
   88434:	db02      	blt.n	8843c <__hi0bits+0x34>
   88436:	005b      	lsls	r3, r3, #1
   88438:	d403      	bmi.n	88442 <__hi0bits+0x3a>
   8843a:	2020      	movs	r0, #32
   8843c:	4770      	bx	lr
   8843e:	2000      	movs	r0, #0
   88440:	e7e8      	b.n	88414 <__hi0bits+0xc>
   88442:	3001      	adds	r0, #1
   88444:	4770      	bx	lr
   88446:	bf00      	nop

00088448 <__lo0bits>:
   88448:	6803      	ldr	r3, [r0, #0]
   8844a:	4601      	mov	r1, r0
   8844c:	f013 0207 	ands.w	r2, r3, #7
   88450:	d007      	beq.n	88462 <__lo0bits+0x1a>
   88452:	07da      	lsls	r2, r3, #31
   88454:	d421      	bmi.n	8849a <__lo0bits+0x52>
   88456:	0798      	lsls	r0, r3, #30
   88458:	d421      	bmi.n	8849e <__lo0bits+0x56>
   8845a:	089b      	lsrs	r3, r3, #2
   8845c:	600b      	str	r3, [r1, #0]
   8845e:	2002      	movs	r0, #2
   88460:	4770      	bx	lr
   88462:	b298      	uxth	r0, r3
   88464:	b198      	cbz	r0, 8848e <__lo0bits+0x46>
   88466:	4610      	mov	r0, r2
   88468:	f013 0fff 	tst.w	r3, #255	; 0xff
   8846c:	bf04      	itt	eq
   8846e:	0a1b      	lsreq	r3, r3, #8
   88470:	3008      	addeq	r0, #8
   88472:	071a      	lsls	r2, r3, #28
   88474:	bf04      	itt	eq
   88476:	091b      	lsreq	r3, r3, #4
   88478:	3004      	addeq	r0, #4
   8847a:	079a      	lsls	r2, r3, #30
   8847c:	bf04      	itt	eq
   8847e:	089b      	lsreq	r3, r3, #2
   88480:	3002      	addeq	r0, #2
   88482:	07da      	lsls	r2, r3, #31
   88484:	d407      	bmi.n	88496 <__lo0bits+0x4e>
   88486:	085b      	lsrs	r3, r3, #1
   88488:	d104      	bne.n	88494 <__lo0bits+0x4c>
   8848a:	2020      	movs	r0, #32
   8848c:	4770      	bx	lr
   8848e:	0c1b      	lsrs	r3, r3, #16
   88490:	2010      	movs	r0, #16
   88492:	e7e9      	b.n	88468 <__lo0bits+0x20>
   88494:	3001      	adds	r0, #1
   88496:	600b      	str	r3, [r1, #0]
   88498:	4770      	bx	lr
   8849a:	2000      	movs	r0, #0
   8849c:	4770      	bx	lr
   8849e:	085b      	lsrs	r3, r3, #1
   884a0:	600b      	str	r3, [r1, #0]
   884a2:	2001      	movs	r0, #1
   884a4:	4770      	bx	lr
   884a6:	bf00      	nop

000884a8 <__i2b>:
   884a8:	b510      	push	{r4, lr}
   884aa:	460c      	mov	r4, r1
   884ac:	2101      	movs	r1, #1
   884ae:	f7ff ff39 	bl	88324 <_Balloc>
   884b2:	2201      	movs	r2, #1
   884b4:	6144      	str	r4, [r0, #20]
   884b6:	6102      	str	r2, [r0, #16]
   884b8:	bd10      	pop	{r4, pc}
   884ba:	bf00      	nop

000884bc <__multiply>:
   884bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   884c0:	690c      	ldr	r4, [r1, #16]
   884c2:	6915      	ldr	r5, [r2, #16]
   884c4:	b083      	sub	sp, #12
   884c6:	42ac      	cmp	r4, r5
   884c8:	468b      	mov	fp, r1
   884ca:	4616      	mov	r6, r2
   884cc:	da04      	bge.n	884d8 <__multiply+0x1c>
   884ce:	4622      	mov	r2, r4
   884d0:	46b3      	mov	fp, r6
   884d2:	462c      	mov	r4, r5
   884d4:	460e      	mov	r6, r1
   884d6:	4615      	mov	r5, r2
   884d8:	f8db 3008 	ldr.w	r3, [fp, #8]
   884dc:	eb04 0805 	add.w	r8, r4, r5
   884e0:	f8db 1004 	ldr.w	r1, [fp, #4]
   884e4:	4598      	cmp	r8, r3
   884e6:	bfc8      	it	gt
   884e8:	3101      	addgt	r1, #1
   884ea:	f7ff ff1b 	bl	88324 <_Balloc>
   884ee:	f100 0914 	add.w	r9, r0, #20
   884f2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   884f6:	45d1      	cmp	r9, sl
   884f8:	9000      	str	r0, [sp, #0]
   884fa:	d205      	bcs.n	88508 <__multiply+0x4c>
   884fc:	464b      	mov	r3, r9
   884fe:	2100      	movs	r1, #0
   88500:	f843 1b04 	str.w	r1, [r3], #4
   88504:	459a      	cmp	sl, r3
   88506:	d8fb      	bhi.n	88500 <__multiply+0x44>
   88508:	f106 0c14 	add.w	ip, r6, #20
   8850c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   88510:	f10b 0b14 	add.w	fp, fp, #20
   88514:	459c      	cmp	ip, r3
   88516:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   8851a:	d24b      	bcs.n	885b4 <__multiply+0xf8>
   8851c:	f8cd a004 	str.w	sl, [sp, #4]
   88520:	469a      	mov	sl, r3
   88522:	f8dc 5000 	ldr.w	r5, [ip]
   88526:	b2af      	uxth	r7, r5
   88528:	b1e7      	cbz	r7, 88564 <__multiply+0xa8>
   8852a:	464d      	mov	r5, r9
   8852c:	465e      	mov	r6, fp
   8852e:	2100      	movs	r1, #0
   88530:	f856 2b04 	ldr.w	r2, [r6], #4
   88534:	6828      	ldr	r0, [r5, #0]
   88536:	b293      	uxth	r3, r2
   88538:	b284      	uxth	r4, r0
   8853a:	0c12      	lsrs	r2, r2, #16
   8853c:	fb07 4303 	mla	r3, r7, r3, r4
   88540:	0c00      	lsrs	r0, r0, #16
   88542:	fb07 0202 	mla	r2, r7, r2, r0
   88546:	440b      	add	r3, r1
   88548:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   8854c:	b29b      	uxth	r3, r3
   8854e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   88552:	45b6      	cmp	lr, r6
   88554:	f845 3b04 	str.w	r3, [r5], #4
   88558:	ea4f 4111 	mov.w	r1, r1, lsr #16
   8855c:	d8e8      	bhi.n	88530 <__multiply+0x74>
   8855e:	6029      	str	r1, [r5, #0]
   88560:	f8dc 5000 	ldr.w	r5, [ip]
   88564:	0c2d      	lsrs	r5, r5, #16
   88566:	d01d      	beq.n	885a4 <__multiply+0xe8>
   88568:	f8d9 3000 	ldr.w	r3, [r9]
   8856c:	4648      	mov	r0, r9
   8856e:	461c      	mov	r4, r3
   88570:	4659      	mov	r1, fp
   88572:	2200      	movs	r2, #0
   88574:	880e      	ldrh	r6, [r1, #0]
   88576:	0c24      	lsrs	r4, r4, #16
   88578:	fb05 4406 	mla	r4, r5, r6, r4
   8857c:	b29b      	uxth	r3, r3
   8857e:	4422      	add	r2, r4
   88580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88584:	f840 3b04 	str.w	r3, [r0], #4
   88588:	f851 3b04 	ldr.w	r3, [r1], #4
   8858c:	6804      	ldr	r4, [r0, #0]
   8858e:	0c1b      	lsrs	r3, r3, #16
   88590:	b2a6      	uxth	r6, r4
   88592:	fb05 6303 	mla	r3, r5, r3, r6
   88596:	458e      	cmp	lr, r1
   88598:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8859c:	ea4f 4213 	mov.w	r2, r3, lsr #16
   885a0:	d8e8      	bhi.n	88574 <__multiply+0xb8>
   885a2:	6003      	str	r3, [r0, #0]
   885a4:	f10c 0c04 	add.w	ip, ip, #4
   885a8:	45e2      	cmp	sl, ip
   885aa:	f109 0904 	add.w	r9, r9, #4
   885ae:	d8b8      	bhi.n	88522 <__multiply+0x66>
   885b0:	f8dd a004 	ldr.w	sl, [sp, #4]
   885b4:	f1b8 0f00 	cmp.w	r8, #0
   885b8:	dd0b      	ble.n	885d2 <__multiply+0x116>
   885ba:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   885be:	f1aa 0a04 	sub.w	sl, sl, #4
   885c2:	b11b      	cbz	r3, 885cc <__multiply+0x110>
   885c4:	e005      	b.n	885d2 <__multiply+0x116>
   885c6:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   885ca:	b913      	cbnz	r3, 885d2 <__multiply+0x116>
   885cc:	f1b8 0801 	subs.w	r8, r8, #1
   885d0:	d1f9      	bne.n	885c6 <__multiply+0x10a>
   885d2:	9800      	ldr	r0, [sp, #0]
   885d4:	f8c0 8010 	str.w	r8, [r0, #16]
   885d8:	b003      	add	sp, #12
   885da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   885de:	bf00      	nop

000885e0 <__pow5mult>:
   885e0:	f012 0303 	ands.w	r3, r2, #3
   885e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   885e8:	4614      	mov	r4, r2
   885ea:	4607      	mov	r7, r0
   885ec:	d12e      	bne.n	8864c <__pow5mult+0x6c>
   885ee:	460d      	mov	r5, r1
   885f0:	10a4      	asrs	r4, r4, #2
   885f2:	d01c      	beq.n	8862e <__pow5mult+0x4e>
   885f4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   885f6:	b396      	cbz	r6, 8865e <__pow5mult+0x7e>
   885f8:	07e3      	lsls	r3, r4, #31
   885fa:	f04f 0800 	mov.w	r8, #0
   885fe:	d406      	bmi.n	8860e <__pow5mult+0x2e>
   88600:	1064      	asrs	r4, r4, #1
   88602:	d014      	beq.n	8862e <__pow5mult+0x4e>
   88604:	6830      	ldr	r0, [r6, #0]
   88606:	b1a8      	cbz	r0, 88634 <__pow5mult+0x54>
   88608:	4606      	mov	r6, r0
   8860a:	07e3      	lsls	r3, r4, #31
   8860c:	d5f8      	bpl.n	88600 <__pow5mult+0x20>
   8860e:	4632      	mov	r2, r6
   88610:	4629      	mov	r1, r5
   88612:	4638      	mov	r0, r7
   88614:	f7ff ff52 	bl	884bc <__multiply>
   88618:	b1b5      	cbz	r5, 88648 <__pow5mult+0x68>
   8861a:	686a      	ldr	r2, [r5, #4]
   8861c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8861e:	1064      	asrs	r4, r4, #1
   88620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88624:	6029      	str	r1, [r5, #0]
   88626:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8862a:	4605      	mov	r5, r0
   8862c:	d1ea      	bne.n	88604 <__pow5mult+0x24>
   8862e:	4628      	mov	r0, r5
   88630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88634:	4632      	mov	r2, r6
   88636:	4631      	mov	r1, r6
   88638:	4638      	mov	r0, r7
   8863a:	f7ff ff3f 	bl	884bc <__multiply>
   8863e:	6030      	str	r0, [r6, #0]
   88640:	f8c0 8000 	str.w	r8, [r0]
   88644:	4606      	mov	r6, r0
   88646:	e7e0      	b.n	8860a <__pow5mult+0x2a>
   88648:	4605      	mov	r5, r0
   8864a:	e7d9      	b.n	88600 <__pow5mult+0x20>
   8864c:	4a0b      	ldr	r2, [pc, #44]	; (8867c <__pow5mult+0x9c>)
   8864e:	3b01      	subs	r3, #1
   88650:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   88654:	2300      	movs	r3, #0
   88656:	f7ff fe95 	bl	88384 <__multadd>
   8865a:	4605      	mov	r5, r0
   8865c:	e7c8      	b.n	885f0 <__pow5mult+0x10>
   8865e:	2101      	movs	r1, #1
   88660:	4638      	mov	r0, r7
   88662:	f7ff fe5f 	bl	88324 <_Balloc>
   88666:	f240 2171 	movw	r1, #625	; 0x271
   8866a:	2201      	movs	r2, #1
   8866c:	2300      	movs	r3, #0
   8866e:	6141      	str	r1, [r0, #20]
   88670:	6102      	str	r2, [r0, #16]
   88672:	4606      	mov	r6, r0
   88674:	64b8      	str	r0, [r7, #72]	; 0x48
   88676:	6003      	str	r3, [r0, #0]
   88678:	e7be      	b.n	885f8 <__pow5mult+0x18>
   8867a:	bf00      	nop
   8867c:	000899e0 	.word	0x000899e0

00088680 <__lshift>:
   88680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88684:	690b      	ldr	r3, [r1, #16]
   88686:	1154      	asrs	r4, r2, #5
   88688:	eb04 0803 	add.w	r8, r4, r3
   8868c:	688b      	ldr	r3, [r1, #8]
   8868e:	f108 0501 	add.w	r5, r8, #1
   88692:	429d      	cmp	r5, r3
   88694:	460e      	mov	r6, r1
   88696:	4691      	mov	r9, r2
   88698:	4607      	mov	r7, r0
   8869a:	6849      	ldr	r1, [r1, #4]
   8869c:	dd04      	ble.n	886a8 <__lshift+0x28>
   8869e:	005b      	lsls	r3, r3, #1
   886a0:	429d      	cmp	r5, r3
   886a2:	f101 0101 	add.w	r1, r1, #1
   886a6:	dcfa      	bgt.n	8869e <__lshift+0x1e>
   886a8:	4638      	mov	r0, r7
   886aa:	f7ff fe3b 	bl	88324 <_Balloc>
   886ae:	2c00      	cmp	r4, #0
   886b0:	f100 0314 	add.w	r3, r0, #20
   886b4:	dd06      	ble.n	886c4 <__lshift+0x44>
   886b6:	2100      	movs	r1, #0
   886b8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   886bc:	f843 1b04 	str.w	r1, [r3], #4
   886c0:	429a      	cmp	r2, r3
   886c2:	d1fb      	bne.n	886bc <__lshift+0x3c>
   886c4:	6934      	ldr	r4, [r6, #16]
   886c6:	f106 0114 	add.w	r1, r6, #20
   886ca:	f019 091f 	ands.w	r9, r9, #31
   886ce:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   886d2:	d01d      	beq.n	88710 <__lshift+0x90>
   886d4:	2200      	movs	r2, #0
   886d6:	f1c9 0c20 	rsb	ip, r9, #32
   886da:	680c      	ldr	r4, [r1, #0]
   886dc:	fa04 f409 	lsl.w	r4, r4, r9
   886e0:	4314      	orrs	r4, r2
   886e2:	f843 4b04 	str.w	r4, [r3], #4
   886e6:	f851 2b04 	ldr.w	r2, [r1], #4
   886ea:	458e      	cmp	lr, r1
   886ec:	fa22 f20c 	lsr.w	r2, r2, ip
   886f0:	d8f3      	bhi.n	886da <__lshift+0x5a>
   886f2:	601a      	str	r2, [r3, #0]
   886f4:	b10a      	cbz	r2, 886fa <__lshift+0x7a>
   886f6:	f108 0502 	add.w	r5, r8, #2
   886fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   886fc:	6872      	ldr	r2, [r6, #4]
   886fe:	3d01      	subs	r5, #1
   88700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88704:	6105      	str	r5, [r0, #16]
   88706:	6031      	str	r1, [r6, #0]
   88708:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8870c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88710:	3b04      	subs	r3, #4
   88712:	f851 2b04 	ldr.w	r2, [r1], #4
   88716:	458e      	cmp	lr, r1
   88718:	f843 2f04 	str.w	r2, [r3, #4]!
   8871c:	d8f9      	bhi.n	88712 <__lshift+0x92>
   8871e:	e7ec      	b.n	886fa <__lshift+0x7a>

00088720 <__mcmp>:
   88720:	b430      	push	{r4, r5}
   88722:	690b      	ldr	r3, [r1, #16]
   88724:	4605      	mov	r5, r0
   88726:	6900      	ldr	r0, [r0, #16]
   88728:	1ac0      	subs	r0, r0, r3
   8872a:	d10f      	bne.n	8874c <__mcmp+0x2c>
   8872c:	009b      	lsls	r3, r3, #2
   8872e:	3514      	adds	r5, #20
   88730:	3114      	adds	r1, #20
   88732:	4419      	add	r1, r3
   88734:	442b      	add	r3, r5
   88736:	e001      	b.n	8873c <__mcmp+0x1c>
   88738:	429d      	cmp	r5, r3
   8873a:	d207      	bcs.n	8874c <__mcmp+0x2c>
   8873c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   88740:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88744:	4294      	cmp	r4, r2
   88746:	d0f7      	beq.n	88738 <__mcmp+0x18>
   88748:	d302      	bcc.n	88750 <__mcmp+0x30>
   8874a:	2001      	movs	r0, #1
   8874c:	bc30      	pop	{r4, r5}
   8874e:	4770      	bx	lr
   88750:	f04f 30ff 	mov.w	r0, #4294967295
   88754:	e7fa      	b.n	8874c <__mcmp+0x2c>
   88756:	bf00      	nop

00088758 <__mdiff>:
   88758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8875c:	690c      	ldr	r4, [r1, #16]
   8875e:	4689      	mov	r9, r1
   88760:	6911      	ldr	r1, [r2, #16]
   88762:	4692      	mov	sl, r2
   88764:	1a64      	subs	r4, r4, r1
   88766:	2c00      	cmp	r4, #0
   88768:	d117      	bne.n	8879a <__mdiff+0x42>
   8876a:	0089      	lsls	r1, r1, #2
   8876c:	f109 0714 	add.w	r7, r9, #20
   88770:	f102 0614 	add.w	r6, r2, #20
   88774:	187b      	adds	r3, r7, r1
   88776:	4431      	add	r1, r6
   88778:	e001      	b.n	8877e <__mdiff+0x26>
   8877a:	429f      	cmp	r7, r3
   8877c:	d265      	bcs.n	8884a <__mdiff+0xf2>
   8877e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   88782:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88786:	4295      	cmp	r5, r2
   88788:	d0f7      	beq.n	8877a <__mdiff+0x22>
   8878a:	d267      	bcs.n	8885c <__mdiff+0x104>
   8878c:	464b      	mov	r3, r9
   8878e:	46bb      	mov	fp, r7
   88790:	46d1      	mov	r9, sl
   88792:	4637      	mov	r7, r6
   88794:	469a      	mov	sl, r3
   88796:	2401      	movs	r4, #1
   88798:	e005      	b.n	887a6 <__mdiff+0x4e>
   8879a:	db61      	blt.n	88860 <__mdiff+0x108>
   8879c:	2400      	movs	r4, #0
   8879e:	f109 0714 	add.w	r7, r9, #20
   887a2:	f10a 0b14 	add.w	fp, sl, #20
   887a6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   887aa:	f7ff fdbb 	bl	88324 <_Balloc>
   887ae:	465d      	mov	r5, fp
   887b0:	f04f 0800 	mov.w	r8, #0
   887b4:	f8d9 e010 	ldr.w	lr, [r9, #16]
   887b8:	f8da 3010 	ldr.w	r3, [sl, #16]
   887bc:	463e      	mov	r6, r7
   887be:	60c4      	str	r4, [r0, #12]
   887c0:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   887c4:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   887c8:	f100 0414 	add.w	r4, r0, #20
   887cc:	f856 9b04 	ldr.w	r9, [r6], #4
   887d0:	f855 2b04 	ldr.w	r2, [r5], #4
   887d4:	fa1f f389 	uxth.w	r3, r9
   887d8:	4443      	add	r3, r8
   887da:	fa1f f882 	uxth.w	r8, r2
   887de:	0c12      	lsrs	r2, r2, #16
   887e0:	eba3 0308 	sub.w	r3, r3, r8
   887e4:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   887e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
   887ec:	b29b      	uxth	r3, r3
   887ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   887f2:	45ac      	cmp	ip, r5
   887f4:	f844 3b04 	str.w	r3, [r4], #4
   887f8:	ea4f 4822 	mov.w	r8, r2, asr #16
   887fc:	d8e6      	bhi.n	887cc <__mdiff+0x74>
   887fe:	42b7      	cmp	r7, r6
   88800:	d917      	bls.n	88832 <__mdiff+0xda>
   88802:	46a4      	mov	ip, r4
   88804:	4635      	mov	r5, r6
   88806:	f855 3b04 	ldr.w	r3, [r5], #4
   8880a:	b299      	uxth	r1, r3
   8880c:	4441      	add	r1, r8
   8880e:	140a      	asrs	r2, r1, #16
   88810:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   88814:	b289      	uxth	r1, r1
   88816:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8881a:	42af      	cmp	r7, r5
   8881c:	f84c 3b04 	str.w	r3, [ip], #4
   88820:	ea4f 4822 	mov.w	r8, r2, asr #16
   88824:	d8ef      	bhi.n	88806 <__mdiff+0xae>
   88826:	43f6      	mvns	r6, r6
   88828:	4437      	add	r7, r6
   8882a:	f027 0703 	bic.w	r7, r7, #3
   8882e:	3704      	adds	r7, #4
   88830:	443c      	add	r4, r7
   88832:	3c04      	subs	r4, #4
   88834:	b92b      	cbnz	r3, 88842 <__mdiff+0xea>
   88836:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8883a:	f10e 3eff 	add.w	lr, lr, #4294967295
   8883e:	2b00      	cmp	r3, #0
   88840:	d0f9      	beq.n	88836 <__mdiff+0xde>
   88842:	f8c0 e010 	str.w	lr, [r0, #16]
   88846:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8884a:	2100      	movs	r1, #0
   8884c:	f7ff fd6a 	bl	88324 <_Balloc>
   88850:	2201      	movs	r2, #1
   88852:	2300      	movs	r3, #0
   88854:	6102      	str	r2, [r0, #16]
   88856:	6143      	str	r3, [r0, #20]
   88858:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8885c:	46b3      	mov	fp, r6
   8885e:	e7a2      	b.n	887a6 <__mdiff+0x4e>
   88860:	464b      	mov	r3, r9
   88862:	f109 0b14 	add.w	fp, r9, #20
   88866:	f102 0714 	add.w	r7, r2, #20
   8886a:	4691      	mov	r9, r2
   8886c:	2401      	movs	r4, #1
   8886e:	469a      	mov	sl, r3
   88870:	e799      	b.n	887a6 <__mdiff+0x4e>
   88872:	bf00      	nop

00088874 <__d2b>:
   88874:	b5f0      	push	{r4, r5, r6, r7, lr}
   88876:	2101      	movs	r1, #1
   88878:	b083      	sub	sp, #12
   8887a:	461c      	mov	r4, r3
   8887c:	f3c3 550a 	ubfx	r5, r3, #20, #11
   88880:	4616      	mov	r6, r2
   88882:	f7ff fd4f 	bl	88324 <_Balloc>
   88886:	f3c4 0413 	ubfx	r4, r4, #0, #20
   8888a:	4607      	mov	r7, r0
   8888c:	b10d      	cbz	r5, 88892 <__d2b+0x1e>
   8888e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   88892:	9401      	str	r4, [sp, #4]
   88894:	b306      	cbz	r6, 888d8 <__d2b+0x64>
   88896:	a802      	add	r0, sp, #8
   88898:	f840 6d08 	str.w	r6, [r0, #-8]!
   8889c:	f7ff fdd4 	bl	88448 <__lo0bits>
   888a0:	2800      	cmp	r0, #0
   888a2:	d130      	bne.n	88906 <__d2b+0x92>
   888a4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   888a8:	617a      	str	r2, [r7, #20]
   888aa:	2b00      	cmp	r3, #0
   888ac:	bf0c      	ite	eq
   888ae:	2101      	moveq	r1, #1
   888b0:	2102      	movne	r1, #2
   888b2:	61bb      	str	r3, [r7, #24]
   888b4:	6139      	str	r1, [r7, #16]
   888b6:	b9d5      	cbnz	r5, 888ee <__d2b+0x7a>
   888b8:	9a08      	ldr	r2, [sp, #32]
   888ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   888be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   888c2:	6010      	str	r0, [r2, #0]
   888c4:	6918      	ldr	r0, [r3, #16]
   888c6:	f7ff fd9f 	bl	88408 <__hi0bits>
   888ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   888cc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   888d0:	6018      	str	r0, [r3, #0]
   888d2:	4638      	mov	r0, r7
   888d4:	b003      	add	sp, #12
   888d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   888d8:	a801      	add	r0, sp, #4
   888da:	f7ff fdb5 	bl	88448 <__lo0bits>
   888de:	2201      	movs	r2, #1
   888e0:	9b01      	ldr	r3, [sp, #4]
   888e2:	4611      	mov	r1, r2
   888e4:	3020      	adds	r0, #32
   888e6:	613a      	str	r2, [r7, #16]
   888e8:	617b      	str	r3, [r7, #20]
   888ea:	2d00      	cmp	r5, #0
   888ec:	d0e4      	beq.n	888b8 <__d2b+0x44>
   888ee:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   888f2:	9a08      	ldr	r2, [sp, #32]
   888f4:	4403      	add	r3, r0
   888f6:	6013      	str	r3, [r2, #0]
   888f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   888fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   888fe:	6018      	str	r0, [r3, #0]
   88900:	4638      	mov	r0, r7
   88902:	b003      	add	sp, #12
   88904:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88906:	9b01      	ldr	r3, [sp, #4]
   88908:	f1c0 0220 	rsb	r2, r0, #32
   8890c:	9900      	ldr	r1, [sp, #0]
   8890e:	fa03 f202 	lsl.w	r2, r3, r2
   88912:	430a      	orrs	r2, r1
   88914:	40c3      	lsrs	r3, r0
   88916:	9301      	str	r3, [sp, #4]
   88918:	617a      	str	r2, [r7, #20]
   8891a:	e7c6      	b.n	888aa <__d2b+0x36>

0008891c <_sbrk_r>:
   8891c:	b538      	push	{r3, r4, r5, lr}
   8891e:	2300      	movs	r3, #0
   88920:	4c06      	ldr	r4, [pc, #24]	; (8893c <_sbrk_r+0x20>)
   88922:	4605      	mov	r5, r0
   88924:	4608      	mov	r0, r1
   88926:	6023      	str	r3, [r4, #0]
   88928:	f7fb fd0a 	bl	84340 <_sbrk>
   8892c:	1c43      	adds	r3, r0, #1
   8892e:	d000      	beq.n	88932 <_sbrk_r+0x16>
   88930:	bd38      	pop	{r3, r4, r5, pc}
   88932:	6823      	ldr	r3, [r4, #0]
   88934:	2b00      	cmp	r3, #0
   88936:	d0fb      	beq.n	88930 <_sbrk_r+0x14>
   88938:	602b      	str	r3, [r5, #0]
   8893a:	bd38      	pop	{r3, r4, r5, pc}
   8893c:	2007100c 	.word	0x2007100c

00088940 <__ssprint_r>:
   88940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88944:	6893      	ldr	r3, [r2, #8]
   88946:	b083      	sub	sp, #12
   88948:	4690      	mov	r8, r2
   8894a:	2b00      	cmp	r3, #0
   8894c:	d070      	beq.n	88a30 <__ssprint_r+0xf0>
   8894e:	4682      	mov	sl, r0
   88950:	460c      	mov	r4, r1
   88952:	6817      	ldr	r7, [r2, #0]
   88954:	688d      	ldr	r5, [r1, #8]
   88956:	6808      	ldr	r0, [r1, #0]
   88958:	e042      	b.n	889e0 <__ssprint_r+0xa0>
   8895a:	89a3      	ldrh	r3, [r4, #12]
   8895c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   88960:	d02e      	beq.n	889c0 <__ssprint_r+0x80>
   88962:	6965      	ldr	r5, [r4, #20]
   88964:	6921      	ldr	r1, [r4, #16]
   88966:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8896a:	eba0 0b01 	sub.w	fp, r0, r1
   8896e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   88972:	f10b 0001 	add.w	r0, fp, #1
   88976:	106d      	asrs	r5, r5, #1
   88978:	4430      	add	r0, r6
   8897a:	42a8      	cmp	r0, r5
   8897c:	462a      	mov	r2, r5
   8897e:	bf84      	itt	hi
   88980:	4605      	movhi	r5, r0
   88982:	462a      	movhi	r2, r5
   88984:	055b      	lsls	r3, r3, #21
   88986:	d538      	bpl.n	889fa <__ssprint_r+0xba>
   88988:	4611      	mov	r1, r2
   8898a:	4650      	mov	r0, sl
   8898c:	f7ff f9d6 	bl	87d3c <_malloc_r>
   88990:	2800      	cmp	r0, #0
   88992:	d03c      	beq.n	88a0e <__ssprint_r+0xce>
   88994:	465a      	mov	r2, fp
   88996:	6921      	ldr	r1, [r4, #16]
   88998:	9001      	str	r0, [sp, #4]
   8899a:	f7fc fe43 	bl	85624 <memcpy>
   8899e:	89a2      	ldrh	r2, [r4, #12]
   889a0:	9b01      	ldr	r3, [sp, #4]
   889a2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   889a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   889aa:	81a2      	strh	r2, [r4, #12]
   889ac:	eba5 020b 	sub.w	r2, r5, fp
   889b0:	eb03 000b 	add.w	r0, r3, fp
   889b4:	6165      	str	r5, [r4, #20]
   889b6:	46b3      	mov	fp, r6
   889b8:	4635      	mov	r5, r6
   889ba:	6123      	str	r3, [r4, #16]
   889bc:	6020      	str	r0, [r4, #0]
   889be:	60a2      	str	r2, [r4, #8]
   889c0:	465a      	mov	r2, fp
   889c2:	4649      	mov	r1, r9
   889c4:	f000 fa18 	bl	88df8 <memmove>
   889c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   889cc:	68a2      	ldr	r2, [r4, #8]
   889ce:	6820      	ldr	r0, [r4, #0]
   889d0:	1b55      	subs	r5, r2, r5
   889d2:	4458      	add	r0, fp
   889d4:	1b9e      	subs	r6, r3, r6
   889d6:	60a5      	str	r5, [r4, #8]
   889d8:	6020      	str	r0, [r4, #0]
   889da:	f8c8 6008 	str.w	r6, [r8, #8]
   889de:	b33e      	cbz	r6, 88a30 <__ssprint_r+0xf0>
   889e0:	687e      	ldr	r6, [r7, #4]
   889e2:	463b      	mov	r3, r7
   889e4:	3708      	adds	r7, #8
   889e6:	2e00      	cmp	r6, #0
   889e8:	d0fa      	beq.n	889e0 <__ssprint_r+0xa0>
   889ea:	42ae      	cmp	r6, r5
   889ec:	f8d3 9000 	ldr.w	r9, [r3]
   889f0:	46ab      	mov	fp, r5
   889f2:	d2b2      	bcs.n	8895a <__ssprint_r+0x1a>
   889f4:	4635      	mov	r5, r6
   889f6:	46b3      	mov	fp, r6
   889f8:	e7e2      	b.n	889c0 <__ssprint_r+0x80>
   889fa:	4650      	mov	r0, sl
   889fc:	f000 fa60 	bl	88ec0 <_realloc_r>
   88a00:	4603      	mov	r3, r0
   88a02:	2800      	cmp	r0, #0
   88a04:	d1d2      	bne.n	889ac <__ssprint_r+0x6c>
   88a06:	6921      	ldr	r1, [r4, #16]
   88a08:	4650      	mov	r0, sl
   88a0a:	f000 f8f9 	bl	88c00 <_free_r>
   88a0e:	230c      	movs	r3, #12
   88a10:	2200      	movs	r2, #0
   88a12:	f04f 30ff 	mov.w	r0, #4294967295
   88a16:	f8ca 3000 	str.w	r3, [sl]
   88a1a:	89a3      	ldrh	r3, [r4, #12]
   88a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88a20:	81a3      	strh	r3, [r4, #12]
   88a22:	f8c8 2008 	str.w	r2, [r8, #8]
   88a26:	f8c8 2004 	str.w	r2, [r8, #4]
   88a2a:	b003      	add	sp, #12
   88a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88a30:	2000      	movs	r0, #0
   88a32:	f8c8 0004 	str.w	r0, [r8, #4]
   88a36:	b003      	add	sp, #12
   88a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00088a3c <__register_exitproc>:
   88a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88a40:	4d2c      	ldr	r5, [pc, #176]	; (88af4 <__register_exitproc+0xb8>)
   88a42:	4606      	mov	r6, r0
   88a44:	6828      	ldr	r0, [r5, #0]
   88a46:	4698      	mov	r8, r3
   88a48:	460f      	mov	r7, r1
   88a4a:	4691      	mov	r9, r2
   88a4c:	f7ff f972 	bl	87d34 <__retarget_lock_acquire_recursive>
   88a50:	4b29      	ldr	r3, [pc, #164]	; (88af8 <__register_exitproc+0xbc>)
   88a52:	681c      	ldr	r4, [r3, #0]
   88a54:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   88a58:	2b00      	cmp	r3, #0
   88a5a:	d03e      	beq.n	88ada <__register_exitproc+0x9e>
   88a5c:	685a      	ldr	r2, [r3, #4]
   88a5e:	2a1f      	cmp	r2, #31
   88a60:	dc1c      	bgt.n	88a9c <__register_exitproc+0x60>
   88a62:	f102 0e01 	add.w	lr, r2, #1
   88a66:	b176      	cbz	r6, 88a86 <__register_exitproc+0x4a>
   88a68:	2101      	movs	r1, #1
   88a6a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   88a6e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   88a72:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   88a76:	4091      	lsls	r1, r2
   88a78:	4308      	orrs	r0, r1
   88a7a:	2e02      	cmp	r6, #2
   88a7c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   88a80:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   88a84:	d023      	beq.n	88ace <__register_exitproc+0x92>
   88a86:	3202      	adds	r2, #2
   88a88:	f8c3 e004 	str.w	lr, [r3, #4]
   88a8c:	6828      	ldr	r0, [r5, #0]
   88a8e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   88a92:	f7ff f951 	bl	87d38 <__retarget_lock_release_recursive>
   88a96:	2000      	movs	r0, #0
   88a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88a9c:	4b17      	ldr	r3, [pc, #92]	; (88afc <__register_exitproc+0xc0>)
   88a9e:	b30b      	cbz	r3, 88ae4 <__register_exitproc+0xa8>
   88aa0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   88aa4:	f3af 8000 	nop.w
   88aa8:	4603      	mov	r3, r0
   88aaa:	b1d8      	cbz	r0, 88ae4 <__register_exitproc+0xa8>
   88aac:	2000      	movs	r0, #0
   88aae:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   88ab2:	f04f 0e01 	mov.w	lr, #1
   88ab6:	6058      	str	r0, [r3, #4]
   88ab8:	6019      	str	r1, [r3, #0]
   88aba:	4602      	mov	r2, r0
   88abc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   88ac0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   88ac4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   88ac8:	2e00      	cmp	r6, #0
   88aca:	d0dc      	beq.n	88a86 <__register_exitproc+0x4a>
   88acc:	e7cc      	b.n	88a68 <__register_exitproc+0x2c>
   88ace:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   88ad2:	4301      	orrs	r1, r0
   88ad4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   88ad8:	e7d5      	b.n	88a86 <__register_exitproc+0x4a>
   88ada:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   88ade:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   88ae2:	e7bb      	b.n	88a5c <__register_exitproc+0x20>
   88ae4:	6828      	ldr	r0, [r5, #0]
   88ae6:	f7ff f927 	bl	87d38 <__retarget_lock_release_recursive>
   88aea:	f04f 30ff 	mov.w	r0, #4294967295
   88aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88af2:	bf00      	nop
   88af4:	200705d0 	.word	0x200705d0
   88af8:	00089878 	.word	0x00089878
   88afc:	00000000 	.word	0x00000000

00088b00 <_calloc_r>:
   88b00:	b510      	push	{r4, lr}
   88b02:	fb02 f101 	mul.w	r1, r2, r1
   88b06:	f7ff f919 	bl	87d3c <_malloc_r>
   88b0a:	4604      	mov	r4, r0
   88b0c:	b1d8      	cbz	r0, 88b46 <_calloc_r+0x46>
   88b0e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   88b12:	f022 0203 	bic.w	r2, r2, #3
   88b16:	3a04      	subs	r2, #4
   88b18:	2a24      	cmp	r2, #36	; 0x24
   88b1a:	d818      	bhi.n	88b4e <_calloc_r+0x4e>
   88b1c:	2a13      	cmp	r2, #19
   88b1e:	d914      	bls.n	88b4a <_calloc_r+0x4a>
   88b20:	2300      	movs	r3, #0
   88b22:	2a1b      	cmp	r2, #27
   88b24:	6003      	str	r3, [r0, #0]
   88b26:	6043      	str	r3, [r0, #4]
   88b28:	d916      	bls.n	88b58 <_calloc_r+0x58>
   88b2a:	2a24      	cmp	r2, #36	; 0x24
   88b2c:	6083      	str	r3, [r0, #8]
   88b2e:	60c3      	str	r3, [r0, #12]
   88b30:	bf11      	iteee	ne
   88b32:	f100 0210 	addne.w	r2, r0, #16
   88b36:	6103      	streq	r3, [r0, #16]
   88b38:	6143      	streq	r3, [r0, #20]
   88b3a:	f100 0218 	addeq.w	r2, r0, #24
   88b3e:	2300      	movs	r3, #0
   88b40:	6013      	str	r3, [r2, #0]
   88b42:	6053      	str	r3, [r2, #4]
   88b44:	6093      	str	r3, [r2, #8]
   88b46:	4620      	mov	r0, r4
   88b48:	bd10      	pop	{r4, pc}
   88b4a:	4602      	mov	r2, r0
   88b4c:	e7f7      	b.n	88b3e <_calloc_r+0x3e>
   88b4e:	2100      	movs	r1, #0
   88b50:	f7fc fdde 	bl	85710 <memset>
   88b54:	4620      	mov	r0, r4
   88b56:	bd10      	pop	{r4, pc}
   88b58:	f100 0208 	add.w	r2, r0, #8
   88b5c:	e7ef      	b.n	88b3e <_calloc_r+0x3e>
   88b5e:	bf00      	nop

00088b60 <_malloc_trim_r>:
   88b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88b62:	460c      	mov	r4, r1
   88b64:	4f23      	ldr	r7, [pc, #140]	; (88bf4 <_malloc_trim_r+0x94>)
   88b66:	4606      	mov	r6, r0
   88b68:	f7ff fbd0 	bl	8830c <__malloc_lock>
   88b6c:	68bb      	ldr	r3, [r7, #8]
   88b6e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   88b72:	685d      	ldr	r5, [r3, #4]
   88b74:	310f      	adds	r1, #15
   88b76:	f025 0503 	bic.w	r5, r5, #3
   88b7a:	4429      	add	r1, r5
   88b7c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   88b80:	f021 010f 	bic.w	r1, r1, #15
   88b84:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   88b88:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   88b8c:	db07      	blt.n	88b9e <_malloc_trim_r+0x3e>
   88b8e:	2100      	movs	r1, #0
   88b90:	4630      	mov	r0, r6
   88b92:	f7ff fec3 	bl	8891c <_sbrk_r>
   88b96:	68bb      	ldr	r3, [r7, #8]
   88b98:	442b      	add	r3, r5
   88b9a:	4298      	cmp	r0, r3
   88b9c:	d004      	beq.n	88ba8 <_malloc_trim_r+0x48>
   88b9e:	4630      	mov	r0, r6
   88ba0:	f7ff fbba 	bl	88318 <__malloc_unlock>
   88ba4:	2000      	movs	r0, #0
   88ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88ba8:	4261      	negs	r1, r4
   88baa:	4630      	mov	r0, r6
   88bac:	f7ff feb6 	bl	8891c <_sbrk_r>
   88bb0:	3001      	adds	r0, #1
   88bb2:	d00d      	beq.n	88bd0 <_malloc_trim_r+0x70>
   88bb4:	4b10      	ldr	r3, [pc, #64]	; (88bf8 <_malloc_trim_r+0x98>)
   88bb6:	68ba      	ldr	r2, [r7, #8]
   88bb8:	6819      	ldr	r1, [r3, #0]
   88bba:	1b2d      	subs	r5, r5, r4
   88bbc:	f045 0501 	orr.w	r5, r5, #1
   88bc0:	4630      	mov	r0, r6
   88bc2:	1b09      	subs	r1, r1, r4
   88bc4:	6055      	str	r5, [r2, #4]
   88bc6:	6019      	str	r1, [r3, #0]
   88bc8:	f7ff fba6 	bl	88318 <__malloc_unlock>
   88bcc:	2001      	movs	r0, #1
   88bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88bd0:	2100      	movs	r1, #0
   88bd2:	4630      	mov	r0, r6
   88bd4:	f7ff fea2 	bl	8891c <_sbrk_r>
   88bd8:	68ba      	ldr	r2, [r7, #8]
   88bda:	1a83      	subs	r3, r0, r2
   88bdc:	2b0f      	cmp	r3, #15
   88bde:	ddde      	ble.n	88b9e <_malloc_trim_r+0x3e>
   88be0:	4c06      	ldr	r4, [pc, #24]	; (88bfc <_malloc_trim_r+0x9c>)
   88be2:	4905      	ldr	r1, [pc, #20]	; (88bf8 <_malloc_trim_r+0x98>)
   88be4:	6824      	ldr	r4, [r4, #0]
   88be6:	f043 0301 	orr.w	r3, r3, #1
   88bea:	1b00      	subs	r0, r0, r4
   88bec:	6053      	str	r3, [r2, #4]
   88bee:	6008      	str	r0, [r1, #0]
   88bf0:	e7d5      	b.n	88b9e <_malloc_trim_r+0x3e>
   88bf2:	bf00      	nop
   88bf4:	200705d4 	.word	0x200705d4
   88bf8:	20070dd4 	.word	0x20070dd4
   88bfc:	200709dc 	.word	0x200709dc

00088c00 <_free_r>:
   88c00:	2900      	cmp	r1, #0
   88c02:	d044      	beq.n	88c8e <_free_r+0x8e>
   88c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88c08:	460d      	mov	r5, r1
   88c0a:	4680      	mov	r8, r0
   88c0c:	f7ff fb7e 	bl	8830c <__malloc_lock>
   88c10:	f855 7c04 	ldr.w	r7, [r5, #-4]
   88c14:	4969      	ldr	r1, [pc, #420]	; (88dbc <_free_r+0x1bc>)
   88c16:	f1a5 0408 	sub.w	r4, r5, #8
   88c1a:	f027 0301 	bic.w	r3, r7, #1
   88c1e:	18e2      	adds	r2, r4, r3
   88c20:	688e      	ldr	r6, [r1, #8]
   88c22:	6850      	ldr	r0, [r2, #4]
   88c24:	42b2      	cmp	r2, r6
   88c26:	f020 0003 	bic.w	r0, r0, #3
   88c2a:	d05e      	beq.n	88cea <_free_r+0xea>
   88c2c:	07fe      	lsls	r6, r7, #31
   88c2e:	6050      	str	r0, [r2, #4]
   88c30:	d40b      	bmi.n	88c4a <_free_r+0x4a>
   88c32:	f855 7c08 	ldr.w	r7, [r5, #-8]
   88c36:	f101 0e08 	add.w	lr, r1, #8
   88c3a:	1be4      	subs	r4, r4, r7
   88c3c:	68a5      	ldr	r5, [r4, #8]
   88c3e:	443b      	add	r3, r7
   88c40:	4575      	cmp	r5, lr
   88c42:	d06d      	beq.n	88d20 <_free_r+0x120>
   88c44:	68e7      	ldr	r7, [r4, #12]
   88c46:	60ef      	str	r7, [r5, #12]
   88c48:	60bd      	str	r5, [r7, #8]
   88c4a:	1815      	adds	r5, r2, r0
   88c4c:	686d      	ldr	r5, [r5, #4]
   88c4e:	07ed      	lsls	r5, r5, #31
   88c50:	d53e      	bpl.n	88cd0 <_free_r+0xd0>
   88c52:	f043 0201 	orr.w	r2, r3, #1
   88c56:	6062      	str	r2, [r4, #4]
   88c58:	50e3      	str	r3, [r4, r3]
   88c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   88c5e:	d217      	bcs.n	88c90 <_free_r+0x90>
   88c60:	2201      	movs	r2, #1
   88c62:	08db      	lsrs	r3, r3, #3
   88c64:	1098      	asrs	r0, r3, #2
   88c66:	684d      	ldr	r5, [r1, #4]
   88c68:	4413      	add	r3, r2
   88c6a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   88c6e:	4082      	lsls	r2, r0
   88c70:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   88c74:	432a      	orrs	r2, r5
   88c76:	3808      	subs	r0, #8
   88c78:	60e0      	str	r0, [r4, #12]
   88c7a:	60a7      	str	r7, [r4, #8]
   88c7c:	604a      	str	r2, [r1, #4]
   88c7e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   88c82:	60fc      	str	r4, [r7, #12]
   88c84:	4640      	mov	r0, r8
   88c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88c8a:	f7ff bb45 	b.w	88318 <__malloc_unlock>
   88c8e:	4770      	bx	lr
   88c90:	0a5a      	lsrs	r2, r3, #9
   88c92:	2a04      	cmp	r2, #4
   88c94:	d852      	bhi.n	88d3c <_free_r+0x13c>
   88c96:	099a      	lsrs	r2, r3, #6
   88c98:	f102 0739 	add.w	r7, r2, #57	; 0x39
   88c9c:	00ff      	lsls	r7, r7, #3
   88c9e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   88ca2:	19c8      	adds	r0, r1, r7
   88ca4:	59ca      	ldr	r2, [r1, r7]
   88ca6:	3808      	subs	r0, #8
   88ca8:	4290      	cmp	r0, r2
   88caa:	d04f      	beq.n	88d4c <_free_r+0x14c>
   88cac:	6851      	ldr	r1, [r2, #4]
   88cae:	f021 0103 	bic.w	r1, r1, #3
   88cb2:	428b      	cmp	r3, r1
   88cb4:	d232      	bcs.n	88d1c <_free_r+0x11c>
   88cb6:	6892      	ldr	r2, [r2, #8]
   88cb8:	4290      	cmp	r0, r2
   88cba:	d1f7      	bne.n	88cac <_free_r+0xac>
   88cbc:	68c3      	ldr	r3, [r0, #12]
   88cbe:	60a0      	str	r0, [r4, #8]
   88cc0:	60e3      	str	r3, [r4, #12]
   88cc2:	609c      	str	r4, [r3, #8]
   88cc4:	60c4      	str	r4, [r0, #12]
   88cc6:	4640      	mov	r0, r8
   88cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88ccc:	f7ff bb24 	b.w	88318 <__malloc_unlock>
   88cd0:	6895      	ldr	r5, [r2, #8]
   88cd2:	4f3b      	ldr	r7, [pc, #236]	; (88dc0 <_free_r+0x1c0>)
   88cd4:	4403      	add	r3, r0
   88cd6:	42bd      	cmp	r5, r7
   88cd8:	d040      	beq.n	88d5c <_free_r+0x15c>
   88cda:	68d0      	ldr	r0, [r2, #12]
   88cdc:	f043 0201 	orr.w	r2, r3, #1
   88ce0:	60e8      	str	r0, [r5, #12]
   88ce2:	6085      	str	r5, [r0, #8]
   88ce4:	6062      	str	r2, [r4, #4]
   88ce6:	50e3      	str	r3, [r4, r3]
   88ce8:	e7b7      	b.n	88c5a <_free_r+0x5a>
   88cea:	07ff      	lsls	r7, r7, #31
   88cec:	4403      	add	r3, r0
   88cee:	d407      	bmi.n	88d00 <_free_r+0x100>
   88cf0:	f855 5c08 	ldr.w	r5, [r5, #-8]
   88cf4:	1b64      	subs	r4, r4, r5
   88cf6:	68e2      	ldr	r2, [r4, #12]
   88cf8:	68a0      	ldr	r0, [r4, #8]
   88cfa:	442b      	add	r3, r5
   88cfc:	60c2      	str	r2, [r0, #12]
   88cfe:	6090      	str	r0, [r2, #8]
   88d00:	4a30      	ldr	r2, [pc, #192]	; (88dc4 <_free_r+0x1c4>)
   88d02:	f043 0001 	orr.w	r0, r3, #1
   88d06:	6812      	ldr	r2, [r2, #0]
   88d08:	6060      	str	r0, [r4, #4]
   88d0a:	4293      	cmp	r3, r2
   88d0c:	608c      	str	r4, [r1, #8]
   88d0e:	d3b9      	bcc.n	88c84 <_free_r+0x84>
   88d10:	4b2d      	ldr	r3, [pc, #180]	; (88dc8 <_free_r+0x1c8>)
   88d12:	4640      	mov	r0, r8
   88d14:	6819      	ldr	r1, [r3, #0]
   88d16:	f7ff ff23 	bl	88b60 <_malloc_trim_r>
   88d1a:	e7b3      	b.n	88c84 <_free_r+0x84>
   88d1c:	4610      	mov	r0, r2
   88d1e:	e7cd      	b.n	88cbc <_free_r+0xbc>
   88d20:	1811      	adds	r1, r2, r0
   88d22:	6849      	ldr	r1, [r1, #4]
   88d24:	07c9      	lsls	r1, r1, #31
   88d26:	d444      	bmi.n	88db2 <_free_r+0x1b2>
   88d28:	6891      	ldr	r1, [r2, #8]
   88d2a:	4403      	add	r3, r0
   88d2c:	68d2      	ldr	r2, [r2, #12]
   88d2e:	f043 0001 	orr.w	r0, r3, #1
   88d32:	60ca      	str	r2, [r1, #12]
   88d34:	6091      	str	r1, [r2, #8]
   88d36:	6060      	str	r0, [r4, #4]
   88d38:	50e3      	str	r3, [r4, r3]
   88d3a:	e7a3      	b.n	88c84 <_free_r+0x84>
   88d3c:	2a14      	cmp	r2, #20
   88d3e:	d816      	bhi.n	88d6e <_free_r+0x16e>
   88d40:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   88d44:	00ff      	lsls	r7, r7, #3
   88d46:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   88d4a:	e7aa      	b.n	88ca2 <_free_r+0xa2>
   88d4c:	2301      	movs	r3, #1
   88d4e:	10aa      	asrs	r2, r5, #2
   88d50:	684d      	ldr	r5, [r1, #4]
   88d52:	4093      	lsls	r3, r2
   88d54:	432b      	orrs	r3, r5
   88d56:	604b      	str	r3, [r1, #4]
   88d58:	4603      	mov	r3, r0
   88d5a:	e7b0      	b.n	88cbe <_free_r+0xbe>
   88d5c:	f043 0201 	orr.w	r2, r3, #1
   88d60:	614c      	str	r4, [r1, #20]
   88d62:	610c      	str	r4, [r1, #16]
   88d64:	60e5      	str	r5, [r4, #12]
   88d66:	60a5      	str	r5, [r4, #8]
   88d68:	6062      	str	r2, [r4, #4]
   88d6a:	50e3      	str	r3, [r4, r3]
   88d6c:	e78a      	b.n	88c84 <_free_r+0x84>
   88d6e:	2a54      	cmp	r2, #84	; 0x54
   88d70:	d806      	bhi.n	88d80 <_free_r+0x180>
   88d72:	0b1a      	lsrs	r2, r3, #12
   88d74:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   88d78:	00ff      	lsls	r7, r7, #3
   88d7a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   88d7e:	e790      	b.n	88ca2 <_free_r+0xa2>
   88d80:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   88d84:	d806      	bhi.n	88d94 <_free_r+0x194>
   88d86:	0bda      	lsrs	r2, r3, #15
   88d88:	f102 0778 	add.w	r7, r2, #120	; 0x78
   88d8c:	00ff      	lsls	r7, r7, #3
   88d8e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   88d92:	e786      	b.n	88ca2 <_free_r+0xa2>
   88d94:	f240 5054 	movw	r0, #1364	; 0x554
   88d98:	4282      	cmp	r2, r0
   88d9a:	d806      	bhi.n	88daa <_free_r+0x1aa>
   88d9c:	0c9a      	lsrs	r2, r3, #18
   88d9e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   88da2:	00ff      	lsls	r7, r7, #3
   88da4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   88da8:	e77b      	b.n	88ca2 <_free_r+0xa2>
   88daa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   88dae:	257e      	movs	r5, #126	; 0x7e
   88db0:	e777      	b.n	88ca2 <_free_r+0xa2>
   88db2:	f043 0101 	orr.w	r1, r3, #1
   88db6:	6061      	str	r1, [r4, #4]
   88db8:	6013      	str	r3, [r2, #0]
   88dba:	e763      	b.n	88c84 <_free_r+0x84>
   88dbc:	200705d4 	.word	0x200705d4
   88dc0:	200705dc 	.word	0x200705dc
   88dc4:	200709e0 	.word	0x200709e0
   88dc8:	20070e04 	.word	0x20070e04

00088dcc <__ascii_mbtowc>:
   88dcc:	b082      	sub	sp, #8
   88dce:	b149      	cbz	r1, 88de4 <__ascii_mbtowc+0x18>
   88dd0:	b15a      	cbz	r2, 88dea <__ascii_mbtowc+0x1e>
   88dd2:	b16b      	cbz	r3, 88df0 <__ascii_mbtowc+0x24>
   88dd4:	7813      	ldrb	r3, [r2, #0]
   88dd6:	600b      	str	r3, [r1, #0]
   88dd8:	7812      	ldrb	r2, [r2, #0]
   88dda:	1c10      	adds	r0, r2, #0
   88ddc:	bf18      	it	ne
   88dde:	2001      	movne	r0, #1
   88de0:	b002      	add	sp, #8
   88de2:	4770      	bx	lr
   88de4:	a901      	add	r1, sp, #4
   88de6:	2a00      	cmp	r2, #0
   88de8:	d1f3      	bne.n	88dd2 <__ascii_mbtowc+0x6>
   88dea:	4610      	mov	r0, r2
   88dec:	b002      	add	sp, #8
   88dee:	4770      	bx	lr
   88df0:	f06f 0001 	mvn.w	r0, #1
   88df4:	e7f4      	b.n	88de0 <__ascii_mbtowc+0x14>
   88df6:	bf00      	nop

00088df8 <memmove>:
   88df8:	4288      	cmp	r0, r1
   88dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
   88dfc:	d90d      	bls.n	88e1a <memmove+0x22>
   88dfe:	188b      	adds	r3, r1, r2
   88e00:	4298      	cmp	r0, r3
   88e02:	d20a      	bcs.n	88e1a <memmove+0x22>
   88e04:	1884      	adds	r4, r0, r2
   88e06:	2a00      	cmp	r2, #0
   88e08:	d051      	beq.n	88eae <memmove+0xb6>
   88e0a:	4622      	mov	r2, r4
   88e0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   88e10:	4299      	cmp	r1, r3
   88e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
   88e16:	d1f9      	bne.n	88e0c <memmove+0x14>
   88e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88e1a:	2a0f      	cmp	r2, #15
   88e1c:	d948      	bls.n	88eb0 <memmove+0xb8>
   88e1e:	ea41 0300 	orr.w	r3, r1, r0
   88e22:	079b      	lsls	r3, r3, #30
   88e24:	d146      	bne.n	88eb4 <memmove+0xbc>
   88e26:	4615      	mov	r5, r2
   88e28:	f100 0410 	add.w	r4, r0, #16
   88e2c:	f101 0310 	add.w	r3, r1, #16
   88e30:	f853 6c10 	ldr.w	r6, [r3, #-16]
   88e34:	3d10      	subs	r5, #16
   88e36:	f844 6c10 	str.w	r6, [r4, #-16]
   88e3a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   88e3e:	2d0f      	cmp	r5, #15
   88e40:	f844 6c0c 	str.w	r6, [r4, #-12]
   88e44:	f853 6c08 	ldr.w	r6, [r3, #-8]
   88e48:	f104 0410 	add.w	r4, r4, #16
   88e4c:	f844 6c18 	str.w	r6, [r4, #-24]
   88e50:	f853 6c04 	ldr.w	r6, [r3, #-4]
   88e54:	f103 0310 	add.w	r3, r3, #16
   88e58:	f844 6c14 	str.w	r6, [r4, #-20]
   88e5c:	d8e8      	bhi.n	88e30 <memmove+0x38>
   88e5e:	f1a2 0310 	sub.w	r3, r2, #16
   88e62:	f023 030f 	bic.w	r3, r3, #15
   88e66:	f002 0e0f 	and.w	lr, r2, #15
   88e6a:	3310      	adds	r3, #16
   88e6c:	f1be 0f03 	cmp.w	lr, #3
   88e70:	4419      	add	r1, r3
   88e72:	4403      	add	r3, r0
   88e74:	d921      	bls.n	88eba <memmove+0xc2>
   88e76:	460e      	mov	r6, r1
   88e78:	4674      	mov	r4, lr
   88e7a:	1f1d      	subs	r5, r3, #4
   88e7c:	f856 7b04 	ldr.w	r7, [r6], #4
   88e80:	3c04      	subs	r4, #4
   88e82:	2c03      	cmp	r4, #3
   88e84:	f845 7f04 	str.w	r7, [r5, #4]!
   88e88:	d8f8      	bhi.n	88e7c <memmove+0x84>
   88e8a:	f1ae 0404 	sub.w	r4, lr, #4
   88e8e:	f024 0403 	bic.w	r4, r4, #3
   88e92:	3404      	adds	r4, #4
   88e94:	4421      	add	r1, r4
   88e96:	4423      	add	r3, r4
   88e98:	f002 0203 	and.w	r2, r2, #3
   88e9c:	b162      	cbz	r2, 88eb8 <memmove+0xc0>
   88e9e:	3b01      	subs	r3, #1
   88ea0:	440a      	add	r2, r1
   88ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
   88ea6:	428a      	cmp	r2, r1
   88ea8:	f803 4f01 	strb.w	r4, [r3, #1]!
   88eac:	d1f9      	bne.n	88ea2 <memmove+0xaa>
   88eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88eb0:	4603      	mov	r3, r0
   88eb2:	e7f3      	b.n	88e9c <memmove+0xa4>
   88eb4:	4603      	mov	r3, r0
   88eb6:	e7f2      	b.n	88e9e <memmove+0xa6>
   88eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88eba:	4672      	mov	r2, lr
   88ebc:	e7ee      	b.n	88e9c <memmove+0xa4>
   88ebe:	bf00      	nop

00088ec0 <_realloc_r>:
   88ec0:	2900      	cmp	r1, #0
   88ec2:	f000 8094 	beq.w	88fee <_realloc_r+0x12e>
   88ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88eca:	460c      	mov	r4, r1
   88ecc:	4615      	mov	r5, r2
   88ece:	b083      	sub	sp, #12
   88ed0:	4680      	mov	r8, r0
   88ed2:	f105 060b 	add.w	r6, r5, #11
   88ed6:	f7ff fa19 	bl	8830c <__malloc_lock>
   88eda:	f854 ec04 	ldr.w	lr, [r4, #-4]
   88ede:	2e16      	cmp	r6, #22
   88ee0:	f02e 0703 	bic.w	r7, lr, #3
   88ee4:	f1a4 0908 	sub.w	r9, r4, #8
   88ee8:	d83c      	bhi.n	88f64 <_realloc_r+0xa4>
   88eea:	2210      	movs	r2, #16
   88eec:	4616      	mov	r6, r2
   88eee:	42b5      	cmp	r5, r6
   88ef0:	d83d      	bhi.n	88f6e <_realloc_r+0xae>
   88ef2:	4297      	cmp	r7, r2
   88ef4:	da43      	bge.n	88f7e <_realloc_r+0xbe>
   88ef6:	4bc6      	ldr	r3, [pc, #792]	; (89210 <_realloc_r+0x350>)
   88ef8:	eb09 0007 	add.w	r0, r9, r7
   88efc:	6899      	ldr	r1, [r3, #8]
   88efe:	4288      	cmp	r0, r1
   88f00:	f000 80c3 	beq.w	8908a <_realloc_r+0x1ca>
   88f04:	6843      	ldr	r3, [r0, #4]
   88f06:	f023 0101 	bic.w	r1, r3, #1
   88f0a:	4401      	add	r1, r0
   88f0c:	6849      	ldr	r1, [r1, #4]
   88f0e:	07c9      	lsls	r1, r1, #31
   88f10:	d54d      	bpl.n	88fae <_realloc_r+0xee>
   88f12:	f01e 0f01 	tst.w	lr, #1
   88f16:	f000 809b 	beq.w	89050 <_realloc_r+0x190>
   88f1a:	4629      	mov	r1, r5
   88f1c:	4640      	mov	r0, r8
   88f1e:	f7fe ff0d 	bl	87d3c <_malloc_r>
   88f22:	4605      	mov	r5, r0
   88f24:	2800      	cmp	r0, #0
   88f26:	d03b      	beq.n	88fa0 <_realloc_r+0xe0>
   88f28:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88f2c:	f1a0 0208 	sub.w	r2, r0, #8
   88f30:	f023 0301 	bic.w	r3, r3, #1
   88f34:	444b      	add	r3, r9
   88f36:	429a      	cmp	r2, r3
   88f38:	f000 812b 	beq.w	89192 <_realloc_r+0x2d2>
   88f3c:	1f3a      	subs	r2, r7, #4
   88f3e:	2a24      	cmp	r2, #36	; 0x24
   88f40:	f200 8118 	bhi.w	89174 <_realloc_r+0x2b4>
   88f44:	2a13      	cmp	r2, #19
   88f46:	f200 80eb 	bhi.w	89120 <_realloc_r+0x260>
   88f4a:	4603      	mov	r3, r0
   88f4c:	4622      	mov	r2, r4
   88f4e:	6811      	ldr	r1, [r2, #0]
   88f50:	6019      	str	r1, [r3, #0]
   88f52:	6851      	ldr	r1, [r2, #4]
   88f54:	6059      	str	r1, [r3, #4]
   88f56:	6892      	ldr	r2, [r2, #8]
   88f58:	609a      	str	r2, [r3, #8]
   88f5a:	4621      	mov	r1, r4
   88f5c:	4640      	mov	r0, r8
   88f5e:	f7ff fe4f 	bl	88c00 <_free_r>
   88f62:	e01d      	b.n	88fa0 <_realloc_r+0xe0>
   88f64:	f026 0607 	bic.w	r6, r6, #7
   88f68:	2e00      	cmp	r6, #0
   88f6a:	4632      	mov	r2, r6
   88f6c:	dabf      	bge.n	88eee <_realloc_r+0x2e>
   88f6e:	2500      	movs	r5, #0
   88f70:	230c      	movs	r3, #12
   88f72:	4628      	mov	r0, r5
   88f74:	f8c8 3000 	str.w	r3, [r8]
   88f78:	b003      	add	sp, #12
   88f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88f7e:	4625      	mov	r5, r4
   88f80:	1bbb      	subs	r3, r7, r6
   88f82:	2b0f      	cmp	r3, #15
   88f84:	f8d9 2004 	ldr.w	r2, [r9, #4]
   88f88:	d81d      	bhi.n	88fc6 <_realloc_r+0x106>
   88f8a:	f002 0201 	and.w	r2, r2, #1
   88f8e:	433a      	orrs	r2, r7
   88f90:	eb09 0107 	add.w	r1, r9, r7
   88f94:	f8c9 2004 	str.w	r2, [r9, #4]
   88f98:	684b      	ldr	r3, [r1, #4]
   88f9a:	f043 0301 	orr.w	r3, r3, #1
   88f9e:	604b      	str	r3, [r1, #4]
   88fa0:	4640      	mov	r0, r8
   88fa2:	f7ff f9b9 	bl	88318 <__malloc_unlock>
   88fa6:	4628      	mov	r0, r5
   88fa8:	b003      	add	sp, #12
   88faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88fae:	f023 0303 	bic.w	r3, r3, #3
   88fb2:	18f9      	adds	r1, r7, r3
   88fb4:	4291      	cmp	r1, r2
   88fb6:	db1d      	blt.n	88ff4 <_realloc_r+0x134>
   88fb8:	68c3      	ldr	r3, [r0, #12]
   88fba:	6882      	ldr	r2, [r0, #8]
   88fbc:	4625      	mov	r5, r4
   88fbe:	60d3      	str	r3, [r2, #12]
   88fc0:	460f      	mov	r7, r1
   88fc2:	609a      	str	r2, [r3, #8]
   88fc4:	e7dc      	b.n	88f80 <_realloc_r+0xc0>
   88fc6:	f002 0201 	and.w	r2, r2, #1
   88fca:	eb09 0106 	add.w	r1, r9, r6
   88fce:	f043 0301 	orr.w	r3, r3, #1
   88fd2:	4332      	orrs	r2, r6
   88fd4:	f8c9 2004 	str.w	r2, [r9, #4]
   88fd8:	444f      	add	r7, r9
   88fda:	604b      	str	r3, [r1, #4]
   88fdc:	687b      	ldr	r3, [r7, #4]
   88fde:	3108      	adds	r1, #8
   88fe0:	f043 0301 	orr.w	r3, r3, #1
   88fe4:	607b      	str	r3, [r7, #4]
   88fe6:	4640      	mov	r0, r8
   88fe8:	f7ff fe0a 	bl	88c00 <_free_r>
   88fec:	e7d8      	b.n	88fa0 <_realloc_r+0xe0>
   88fee:	4611      	mov	r1, r2
   88ff0:	f7fe bea4 	b.w	87d3c <_malloc_r>
   88ff4:	f01e 0f01 	tst.w	lr, #1
   88ff8:	d18f      	bne.n	88f1a <_realloc_r+0x5a>
   88ffa:	f854 1c08 	ldr.w	r1, [r4, #-8]
   88ffe:	eba9 0a01 	sub.w	sl, r9, r1
   89002:	f8da 1004 	ldr.w	r1, [sl, #4]
   89006:	f021 0103 	bic.w	r1, r1, #3
   8900a:	440b      	add	r3, r1
   8900c:	443b      	add	r3, r7
   8900e:	4293      	cmp	r3, r2
   89010:	db26      	blt.n	89060 <_realloc_r+0x1a0>
   89012:	4655      	mov	r5, sl
   89014:	68c1      	ldr	r1, [r0, #12]
   89016:	6880      	ldr	r0, [r0, #8]
   89018:	1f3a      	subs	r2, r7, #4
   8901a:	60c1      	str	r1, [r0, #12]
   8901c:	6088      	str	r0, [r1, #8]
   8901e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   89022:	f8da 100c 	ldr.w	r1, [sl, #12]
   89026:	2a24      	cmp	r2, #36	; 0x24
   89028:	60c1      	str	r1, [r0, #12]
   8902a:	6088      	str	r0, [r1, #8]
   8902c:	d826      	bhi.n	8907c <_realloc_r+0x1bc>
   8902e:	2a13      	cmp	r2, #19
   89030:	f240 8081 	bls.w	89136 <_realloc_r+0x276>
   89034:	6821      	ldr	r1, [r4, #0]
   89036:	2a1b      	cmp	r2, #27
   89038:	f8ca 1008 	str.w	r1, [sl, #8]
   8903c:	6861      	ldr	r1, [r4, #4]
   8903e:	f8ca 100c 	str.w	r1, [sl, #12]
   89042:	f200 80ad 	bhi.w	891a0 <_realloc_r+0x2e0>
   89046:	f104 0008 	add.w	r0, r4, #8
   8904a:	f10a 0210 	add.w	r2, sl, #16
   8904e:	e074      	b.n	8913a <_realloc_r+0x27a>
   89050:	f854 3c08 	ldr.w	r3, [r4, #-8]
   89054:	eba9 0a03 	sub.w	sl, r9, r3
   89058:	f8da 1004 	ldr.w	r1, [sl, #4]
   8905c:	f021 0103 	bic.w	r1, r1, #3
   89060:	187b      	adds	r3, r7, r1
   89062:	4293      	cmp	r3, r2
   89064:	f6ff af59 	blt.w	88f1a <_realloc_r+0x5a>
   89068:	4655      	mov	r5, sl
   8906a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8906e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   89072:	1f3a      	subs	r2, r7, #4
   89074:	2a24      	cmp	r2, #36	; 0x24
   89076:	60c1      	str	r1, [r0, #12]
   89078:	6088      	str	r0, [r1, #8]
   8907a:	d9d8      	bls.n	8902e <_realloc_r+0x16e>
   8907c:	4621      	mov	r1, r4
   8907e:	4628      	mov	r0, r5
   89080:	461f      	mov	r7, r3
   89082:	46d1      	mov	r9, sl
   89084:	f7ff feb8 	bl	88df8 <memmove>
   89088:	e77a      	b.n	88f80 <_realloc_r+0xc0>
   8908a:	6841      	ldr	r1, [r0, #4]
   8908c:	f106 0010 	add.w	r0, r6, #16
   89090:	f021 0b03 	bic.w	fp, r1, #3
   89094:	44bb      	add	fp, r7
   89096:	4583      	cmp	fp, r0
   89098:	da58      	bge.n	8914c <_realloc_r+0x28c>
   8909a:	f01e 0f01 	tst.w	lr, #1
   8909e:	f47f af3c 	bne.w	88f1a <_realloc_r+0x5a>
   890a2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   890a6:	eba9 0a01 	sub.w	sl, r9, r1
   890aa:	f8da 1004 	ldr.w	r1, [sl, #4]
   890ae:	f021 0103 	bic.w	r1, r1, #3
   890b2:	448b      	add	fp, r1
   890b4:	4558      	cmp	r0, fp
   890b6:	dcd3      	bgt.n	89060 <_realloc_r+0x1a0>
   890b8:	4655      	mov	r5, sl
   890ba:	f8da 100c 	ldr.w	r1, [sl, #12]
   890be:	f855 0f08 	ldr.w	r0, [r5, #8]!
   890c2:	1f3a      	subs	r2, r7, #4
   890c4:	2a24      	cmp	r2, #36	; 0x24
   890c6:	60c1      	str	r1, [r0, #12]
   890c8:	6088      	str	r0, [r1, #8]
   890ca:	f200 808d 	bhi.w	891e8 <_realloc_r+0x328>
   890ce:	2a13      	cmp	r2, #19
   890d0:	f240 8087 	bls.w	891e2 <_realloc_r+0x322>
   890d4:	6821      	ldr	r1, [r4, #0]
   890d6:	2a1b      	cmp	r2, #27
   890d8:	f8ca 1008 	str.w	r1, [sl, #8]
   890dc:	6861      	ldr	r1, [r4, #4]
   890de:	f8ca 100c 	str.w	r1, [sl, #12]
   890e2:	f200 8088 	bhi.w	891f6 <_realloc_r+0x336>
   890e6:	f104 0108 	add.w	r1, r4, #8
   890ea:	f10a 0210 	add.w	r2, sl, #16
   890ee:	6808      	ldr	r0, [r1, #0]
   890f0:	6010      	str	r0, [r2, #0]
   890f2:	6848      	ldr	r0, [r1, #4]
   890f4:	6050      	str	r0, [r2, #4]
   890f6:	6889      	ldr	r1, [r1, #8]
   890f8:	6091      	str	r1, [r2, #8]
   890fa:	ebab 0206 	sub.w	r2, fp, r6
   890fe:	eb0a 0106 	add.w	r1, sl, r6
   89102:	f042 0201 	orr.w	r2, r2, #1
   89106:	6099      	str	r1, [r3, #8]
   89108:	604a      	str	r2, [r1, #4]
   8910a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8910e:	4640      	mov	r0, r8
   89110:	f003 0301 	and.w	r3, r3, #1
   89114:	431e      	orrs	r6, r3
   89116:	f8ca 6004 	str.w	r6, [sl, #4]
   8911a:	f7ff f8fd 	bl	88318 <__malloc_unlock>
   8911e:	e742      	b.n	88fa6 <_realloc_r+0xe6>
   89120:	6823      	ldr	r3, [r4, #0]
   89122:	2a1b      	cmp	r2, #27
   89124:	6003      	str	r3, [r0, #0]
   89126:	6863      	ldr	r3, [r4, #4]
   89128:	6043      	str	r3, [r0, #4]
   8912a:	d827      	bhi.n	8917c <_realloc_r+0x2bc>
   8912c:	f100 0308 	add.w	r3, r0, #8
   89130:	f104 0208 	add.w	r2, r4, #8
   89134:	e70b      	b.n	88f4e <_realloc_r+0x8e>
   89136:	4620      	mov	r0, r4
   89138:	462a      	mov	r2, r5
   8913a:	6801      	ldr	r1, [r0, #0]
   8913c:	461f      	mov	r7, r3
   8913e:	6011      	str	r1, [r2, #0]
   89140:	6841      	ldr	r1, [r0, #4]
   89142:	46d1      	mov	r9, sl
   89144:	6051      	str	r1, [r2, #4]
   89146:	6883      	ldr	r3, [r0, #8]
   89148:	6093      	str	r3, [r2, #8]
   8914a:	e719      	b.n	88f80 <_realloc_r+0xc0>
   8914c:	ebab 0b06 	sub.w	fp, fp, r6
   89150:	eb09 0106 	add.w	r1, r9, r6
   89154:	f04b 0201 	orr.w	r2, fp, #1
   89158:	6099      	str	r1, [r3, #8]
   8915a:	604a      	str	r2, [r1, #4]
   8915c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89160:	4640      	mov	r0, r8
   89162:	f003 0301 	and.w	r3, r3, #1
   89166:	431e      	orrs	r6, r3
   89168:	f844 6c04 	str.w	r6, [r4, #-4]
   8916c:	f7ff f8d4 	bl	88318 <__malloc_unlock>
   89170:	4625      	mov	r5, r4
   89172:	e718      	b.n	88fa6 <_realloc_r+0xe6>
   89174:	4621      	mov	r1, r4
   89176:	f7ff fe3f 	bl	88df8 <memmove>
   8917a:	e6ee      	b.n	88f5a <_realloc_r+0x9a>
   8917c:	68a3      	ldr	r3, [r4, #8]
   8917e:	2a24      	cmp	r2, #36	; 0x24
   89180:	6083      	str	r3, [r0, #8]
   89182:	68e3      	ldr	r3, [r4, #12]
   89184:	60c3      	str	r3, [r0, #12]
   89186:	d018      	beq.n	891ba <_realloc_r+0x2fa>
   89188:	f100 0310 	add.w	r3, r0, #16
   8918c:	f104 0210 	add.w	r2, r4, #16
   89190:	e6dd      	b.n	88f4e <_realloc_r+0x8e>
   89192:	f850 3c04 	ldr.w	r3, [r0, #-4]
   89196:	4625      	mov	r5, r4
   89198:	f023 0303 	bic.w	r3, r3, #3
   8919c:	441f      	add	r7, r3
   8919e:	e6ef      	b.n	88f80 <_realloc_r+0xc0>
   891a0:	68a1      	ldr	r1, [r4, #8]
   891a2:	2a24      	cmp	r2, #36	; 0x24
   891a4:	f8ca 1010 	str.w	r1, [sl, #16]
   891a8:	68e1      	ldr	r1, [r4, #12]
   891aa:	f8ca 1014 	str.w	r1, [sl, #20]
   891ae:	d00d      	beq.n	891cc <_realloc_r+0x30c>
   891b0:	f104 0010 	add.w	r0, r4, #16
   891b4:	f10a 0218 	add.w	r2, sl, #24
   891b8:	e7bf      	b.n	8913a <_realloc_r+0x27a>
   891ba:	6922      	ldr	r2, [r4, #16]
   891bc:	f100 0318 	add.w	r3, r0, #24
   891c0:	6102      	str	r2, [r0, #16]
   891c2:	6961      	ldr	r1, [r4, #20]
   891c4:	f104 0218 	add.w	r2, r4, #24
   891c8:	6141      	str	r1, [r0, #20]
   891ca:	e6c0      	b.n	88f4e <_realloc_r+0x8e>
   891cc:	6922      	ldr	r2, [r4, #16]
   891ce:	f104 0018 	add.w	r0, r4, #24
   891d2:	f8ca 2018 	str.w	r2, [sl, #24]
   891d6:	6961      	ldr	r1, [r4, #20]
   891d8:	f10a 0220 	add.w	r2, sl, #32
   891dc:	f8ca 101c 	str.w	r1, [sl, #28]
   891e0:	e7ab      	b.n	8913a <_realloc_r+0x27a>
   891e2:	4621      	mov	r1, r4
   891e4:	462a      	mov	r2, r5
   891e6:	e782      	b.n	890ee <_realloc_r+0x22e>
   891e8:	4621      	mov	r1, r4
   891ea:	4628      	mov	r0, r5
   891ec:	9301      	str	r3, [sp, #4]
   891ee:	f7ff fe03 	bl	88df8 <memmove>
   891f2:	9b01      	ldr	r3, [sp, #4]
   891f4:	e781      	b.n	890fa <_realloc_r+0x23a>
   891f6:	68a1      	ldr	r1, [r4, #8]
   891f8:	2a24      	cmp	r2, #36	; 0x24
   891fa:	f8ca 1010 	str.w	r1, [sl, #16]
   891fe:	68e1      	ldr	r1, [r4, #12]
   89200:	f8ca 1014 	str.w	r1, [sl, #20]
   89204:	d006      	beq.n	89214 <_realloc_r+0x354>
   89206:	f104 0110 	add.w	r1, r4, #16
   8920a:	f10a 0218 	add.w	r2, sl, #24
   8920e:	e76e      	b.n	890ee <_realloc_r+0x22e>
   89210:	200705d4 	.word	0x200705d4
   89214:	6922      	ldr	r2, [r4, #16]
   89216:	f104 0118 	add.w	r1, r4, #24
   8921a:	f8ca 2018 	str.w	r2, [sl, #24]
   8921e:	6960      	ldr	r0, [r4, #20]
   89220:	f10a 0220 	add.w	r2, sl, #32
   89224:	f8ca 001c 	str.w	r0, [sl, #28]
   89228:	e761      	b.n	890ee <_realloc_r+0x22e>
   8922a:	bf00      	nop

0008922c <__ascii_wctomb>:
   8922c:	b119      	cbz	r1, 89236 <__ascii_wctomb+0xa>
   8922e:	2aff      	cmp	r2, #255	; 0xff
   89230:	d803      	bhi.n	8923a <__ascii_wctomb+0xe>
   89232:	700a      	strb	r2, [r1, #0]
   89234:	2101      	movs	r1, #1
   89236:	4608      	mov	r0, r1
   89238:	4770      	bx	lr
   8923a:	238a      	movs	r3, #138	; 0x8a
   8923c:	f04f 31ff 	mov.w	r1, #4294967295
   89240:	6003      	str	r3, [r0, #0]
   89242:	e7f8      	b.n	89236 <__ascii_wctomb+0xa>

00089244 <__gedf2>:
   89244:	f04f 3cff 	mov.w	ip, #4294967295
   89248:	e006      	b.n	89258 <__cmpdf2+0x4>
   8924a:	bf00      	nop

0008924c <__ledf2>:
   8924c:	f04f 0c01 	mov.w	ip, #1
   89250:	e002      	b.n	89258 <__cmpdf2+0x4>
   89252:	bf00      	nop

00089254 <__cmpdf2>:
   89254:	f04f 0c01 	mov.w	ip, #1
   89258:	f84d cd04 	str.w	ip, [sp, #-4]!
   8925c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89260:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89264:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89268:	bf18      	it	ne
   8926a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8926e:	d01b      	beq.n	892a8 <__cmpdf2+0x54>
   89270:	b001      	add	sp, #4
   89272:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   89276:	bf0c      	ite	eq
   89278:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8927c:	ea91 0f03 	teqne	r1, r3
   89280:	bf02      	ittt	eq
   89282:	ea90 0f02 	teqeq	r0, r2
   89286:	2000      	moveq	r0, #0
   89288:	4770      	bxeq	lr
   8928a:	f110 0f00 	cmn.w	r0, #0
   8928e:	ea91 0f03 	teq	r1, r3
   89292:	bf58      	it	pl
   89294:	4299      	cmppl	r1, r3
   89296:	bf08      	it	eq
   89298:	4290      	cmpeq	r0, r2
   8929a:	bf2c      	ite	cs
   8929c:	17d8      	asrcs	r0, r3, #31
   8929e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   892a2:	f040 0001 	orr.w	r0, r0, #1
   892a6:	4770      	bx	lr
   892a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   892ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   892b0:	d102      	bne.n	892b8 <__cmpdf2+0x64>
   892b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   892b6:	d107      	bne.n	892c8 <__cmpdf2+0x74>
   892b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   892bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   892c0:	d1d6      	bne.n	89270 <__cmpdf2+0x1c>
   892c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   892c6:	d0d3      	beq.n	89270 <__cmpdf2+0x1c>
   892c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   892cc:	4770      	bx	lr
   892ce:	bf00      	nop

000892d0 <__aeabi_cdrcmple>:
   892d0:	4684      	mov	ip, r0
   892d2:	4610      	mov	r0, r2
   892d4:	4662      	mov	r2, ip
   892d6:	468c      	mov	ip, r1
   892d8:	4619      	mov	r1, r3
   892da:	4663      	mov	r3, ip
   892dc:	e000      	b.n	892e0 <__aeabi_cdcmpeq>
   892de:	bf00      	nop

000892e0 <__aeabi_cdcmpeq>:
   892e0:	b501      	push	{r0, lr}
   892e2:	f7ff ffb7 	bl	89254 <__cmpdf2>
   892e6:	2800      	cmp	r0, #0
   892e8:	bf48      	it	mi
   892ea:	f110 0f00 	cmnmi.w	r0, #0
   892ee:	bd01      	pop	{r0, pc}

000892f0 <__aeabi_dcmpeq>:
   892f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   892f4:	f7ff fff4 	bl	892e0 <__aeabi_cdcmpeq>
   892f8:	bf0c      	ite	eq
   892fa:	2001      	moveq	r0, #1
   892fc:	2000      	movne	r0, #0
   892fe:	f85d fb08 	ldr.w	pc, [sp], #8
   89302:	bf00      	nop

00089304 <__aeabi_dcmplt>:
   89304:	f84d ed08 	str.w	lr, [sp, #-8]!
   89308:	f7ff ffea 	bl	892e0 <__aeabi_cdcmpeq>
   8930c:	bf34      	ite	cc
   8930e:	2001      	movcc	r0, #1
   89310:	2000      	movcs	r0, #0
   89312:	f85d fb08 	ldr.w	pc, [sp], #8
   89316:	bf00      	nop

00089318 <__aeabi_dcmple>:
   89318:	f84d ed08 	str.w	lr, [sp, #-8]!
   8931c:	f7ff ffe0 	bl	892e0 <__aeabi_cdcmpeq>
   89320:	bf94      	ite	ls
   89322:	2001      	movls	r0, #1
   89324:	2000      	movhi	r0, #0
   89326:	f85d fb08 	ldr.w	pc, [sp], #8
   8932a:	bf00      	nop

0008932c <__aeabi_dcmpge>:
   8932c:	f84d ed08 	str.w	lr, [sp, #-8]!
   89330:	f7ff ffce 	bl	892d0 <__aeabi_cdrcmple>
   89334:	bf94      	ite	ls
   89336:	2001      	movls	r0, #1
   89338:	2000      	movhi	r0, #0
   8933a:	f85d fb08 	ldr.w	pc, [sp], #8
   8933e:	bf00      	nop

00089340 <__aeabi_dcmpgt>:
   89340:	f84d ed08 	str.w	lr, [sp, #-8]!
   89344:	f7ff ffc4 	bl	892d0 <__aeabi_cdrcmple>
   89348:	bf34      	ite	cc
   8934a:	2001      	movcc	r0, #1
   8934c:	2000      	movcs	r0, #0
   8934e:	f85d fb08 	ldr.w	pc, [sp], #8
   89352:	bf00      	nop

00089354 <__aeabi_dcmpun>:
   89354:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89358:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8935c:	d102      	bne.n	89364 <__aeabi_dcmpun+0x10>
   8935e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   89362:	d10a      	bne.n	8937a <__aeabi_dcmpun+0x26>
   89364:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89368:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8936c:	d102      	bne.n	89374 <__aeabi_dcmpun+0x20>
   8936e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   89372:	d102      	bne.n	8937a <__aeabi_dcmpun+0x26>
   89374:	f04f 0000 	mov.w	r0, #0
   89378:	4770      	bx	lr
   8937a:	f04f 0001 	mov.w	r0, #1
   8937e:	4770      	bx	lr

00089380 <__aeabi_d2iz>:
   89380:	ea4f 0241 	mov.w	r2, r1, lsl #1
   89384:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   89388:	d215      	bcs.n	893b6 <__aeabi_d2iz+0x36>
   8938a:	d511      	bpl.n	893b0 <__aeabi_d2iz+0x30>
   8938c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   89390:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   89394:	d912      	bls.n	893bc <__aeabi_d2iz+0x3c>
   89396:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8939a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8939e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   893a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   893a6:	fa23 f002 	lsr.w	r0, r3, r2
   893aa:	bf18      	it	ne
   893ac:	4240      	negne	r0, r0
   893ae:	4770      	bx	lr
   893b0:	f04f 0000 	mov.w	r0, #0
   893b4:	4770      	bx	lr
   893b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   893ba:	d105      	bne.n	893c8 <__aeabi_d2iz+0x48>
   893bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   893c0:	bf08      	it	eq
   893c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   893c6:	4770      	bx	lr
   893c8:	f04f 0000 	mov.w	r0, #0
   893cc:	4770      	bx	lr
   893ce:	bf00      	nop

000893d0 <__aeabi_uldivmod>:
   893d0:	b953      	cbnz	r3, 893e8 <__aeabi_uldivmod+0x18>
   893d2:	b94a      	cbnz	r2, 893e8 <__aeabi_uldivmod+0x18>
   893d4:	2900      	cmp	r1, #0
   893d6:	bf08      	it	eq
   893d8:	2800      	cmpeq	r0, #0
   893da:	bf1c      	itt	ne
   893dc:	f04f 31ff 	movne.w	r1, #4294967295
   893e0:	f04f 30ff 	movne.w	r0, #4294967295
   893e4:	f000 b97a 	b.w	896dc <__aeabi_idiv0>
   893e8:	f1ad 0c08 	sub.w	ip, sp, #8
   893ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   893f0:	f000 f806 	bl	89400 <__udivmoddi4>
   893f4:	f8dd e004 	ldr.w	lr, [sp, #4]
   893f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   893fc:	b004      	add	sp, #16
   893fe:	4770      	bx	lr

00089400 <__udivmoddi4>:
   89400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89404:	468c      	mov	ip, r1
   89406:	460e      	mov	r6, r1
   89408:	4604      	mov	r4, r0
   8940a:	9d08      	ldr	r5, [sp, #32]
   8940c:	2b00      	cmp	r3, #0
   8940e:	d150      	bne.n	894b2 <__udivmoddi4+0xb2>
   89410:	428a      	cmp	r2, r1
   89412:	4617      	mov	r7, r2
   89414:	d96c      	bls.n	894f0 <__udivmoddi4+0xf0>
   89416:	fab2 fe82 	clz	lr, r2
   8941a:	f1be 0f00 	cmp.w	lr, #0
   8941e:	d00b      	beq.n	89438 <__udivmoddi4+0x38>
   89420:	f1ce 0c20 	rsb	ip, lr, #32
   89424:	fa01 f60e 	lsl.w	r6, r1, lr
   89428:	fa20 fc0c 	lsr.w	ip, r0, ip
   8942c:	fa02 f70e 	lsl.w	r7, r2, lr
   89430:	ea4c 0c06 	orr.w	ip, ip, r6
   89434:	fa00 f40e 	lsl.w	r4, r0, lr
   89438:	0c3a      	lsrs	r2, r7, #16
   8943a:	fbbc f9f2 	udiv	r9, ip, r2
   8943e:	b2bb      	uxth	r3, r7
   89440:	fb02 cc19 	mls	ip, r2, r9, ip
   89444:	fb09 fa03 	mul.w	sl, r9, r3
   89448:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8944c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   89450:	45b2      	cmp	sl, r6
   89452:	d90a      	bls.n	8946a <__udivmoddi4+0x6a>
   89454:	19f6      	adds	r6, r6, r7
   89456:	f109 31ff 	add.w	r1, r9, #4294967295
   8945a:	f080 8125 	bcs.w	896a8 <__udivmoddi4+0x2a8>
   8945e:	45b2      	cmp	sl, r6
   89460:	f240 8122 	bls.w	896a8 <__udivmoddi4+0x2a8>
   89464:	f1a9 0902 	sub.w	r9, r9, #2
   89468:	443e      	add	r6, r7
   8946a:	eba6 060a 	sub.w	r6, r6, sl
   8946e:	fbb6 f0f2 	udiv	r0, r6, r2
   89472:	fb02 6610 	mls	r6, r2, r0, r6
   89476:	fb00 f303 	mul.w	r3, r0, r3
   8947a:	b2a4      	uxth	r4, r4
   8947c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   89480:	42a3      	cmp	r3, r4
   89482:	d909      	bls.n	89498 <__udivmoddi4+0x98>
   89484:	19e4      	adds	r4, r4, r7
   89486:	f100 32ff 	add.w	r2, r0, #4294967295
   8948a:	f080 810b 	bcs.w	896a4 <__udivmoddi4+0x2a4>
   8948e:	42a3      	cmp	r3, r4
   89490:	f240 8108 	bls.w	896a4 <__udivmoddi4+0x2a4>
   89494:	3802      	subs	r0, #2
   89496:	443c      	add	r4, r7
   89498:	2100      	movs	r1, #0
   8949a:	1ae4      	subs	r4, r4, r3
   8949c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   894a0:	2d00      	cmp	r5, #0
   894a2:	d062      	beq.n	8956a <__udivmoddi4+0x16a>
   894a4:	2300      	movs	r3, #0
   894a6:	fa24 f40e 	lsr.w	r4, r4, lr
   894aa:	602c      	str	r4, [r5, #0]
   894ac:	606b      	str	r3, [r5, #4]
   894ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   894b2:	428b      	cmp	r3, r1
   894b4:	d907      	bls.n	894c6 <__udivmoddi4+0xc6>
   894b6:	2d00      	cmp	r5, #0
   894b8:	d055      	beq.n	89566 <__udivmoddi4+0x166>
   894ba:	2100      	movs	r1, #0
   894bc:	e885 0041 	stmia.w	r5, {r0, r6}
   894c0:	4608      	mov	r0, r1
   894c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   894c6:	fab3 f183 	clz	r1, r3
   894ca:	2900      	cmp	r1, #0
   894cc:	f040 808f 	bne.w	895ee <__udivmoddi4+0x1ee>
   894d0:	42b3      	cmp	r3, r6
   894d2:	d302      	bcc.n	894da <__udivmoddi4+0xda>
   894d4:	4282      	cmp	r2, r0
   894d6:	f200 80fc 	bhi.w	896d2 <__udivmoddi4+0x2d2>
   894da:	1a84      	subs	r4, r0, r2
   894dc:	eb66 0603 	sbc.w	r6, r6, r3
   894e0:	2001      	movs	r0, #1
   894e2:	46b4      	mov	ip, r6
   894e4:	2d00      	cmp	r5, #0
   894e6:	d040      	beq.n	8956a <__udivmoddi4+0x16a>
   894e8:	e885 1010 	stmia.w	r5, {r4, ip}
   894ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   894f0:	b912      	cbnz	r2, 894f8 <__udivmoddi4+0xf8>
   894f2:	2701      	movs	r7, #1
   894f4:	fbb7 f7f2 	udiv	r7, r7, r2
   894f8:	fab7 fe87 	clz	lr, r7
   894fc:	f1be 0f00 	cmp.w	lr, #0
   89500:	d135      	bne.n	8956e <__udivmoddi4+0x16e>
   89502:	2101      	movs	r1, #1
   89504:	1bf6      	subs	r6, r6, r7
   89506:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8950a:	fa1f f887 	uxth.w	r8, r7
   8950e:	fbb6 f2fc 	udiv	r2, r6, ip
   89512:	fb0c 6612 	mls	r6, ip, r2, r6
   89516:	fb08 f002 	mul.w	r0, r8, r2
   8951a:	0c23      	lsrs	r3, r4, #16
   8951c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   89520:	42b0      	cmp	r0, r6
   89522:	d907      	bls.n	89534 <__udivmoddi4+0x134>
   89524:	19f6      	adds	r6, r6, r7
   89526:	f102 33ff 	add.w	r3, r2, #4294967295
   8952a:	d202      	bcs.n	89532 <__udivmoddi4+0x132>
   8952c:	42b0      	cmp	r0, r6
   8952e:	f200 80d2 	bhi.w	896d6 <__udivmoddi4+0x2d6>
   89532:	461a      	mov	r2, r3
   89534:	1a36      	subs	r6, r6, r0
   89536:	fbb6 f0fc 	udiv	r0, r6, ip
   8953a:	fb0c 6610 	mls	r6, ip, r0, r6
   8953e:	fb08 f800 	mul.w	r8, r8, r0
   89542:	b2a3      	uxth	r3, r4
   89544:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   89548:	45a0      	cmp	r8, r4
   8954a:	d907      	bls.n	8955c <__udivmoddi4+0x15c>
   8954c:	19e4      	adds	r4, r4, r7
   8954e:	f100 33ff 	add.w	r3, r0, #4294967295
   89552:	d202      	bcs.n	8955a <__udivmoddi4+0x15a>
   89554:	45a0      	cmp	r8, r4
   89556:	f200 80b9 	bhi.w	896cc <__udivmoddi4+0x2cc>
   8955a:	4618      	mov	r0, r3
   8955c:	eba4 0408 	sub.w	r4, r4, r8
   89560:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   89564:	e79c      	b.n	894a0 <__udivmoddi4+0xa0>
   89566:	4629      	mov	r1, r5
   89568:	4628      	mov	r0, r5
   8956a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8956e:	fa07 f70e 	lsl.w	r7, r7, lr
   89572:	f1ce 0320 	rsb	r3, lr, #32
   89576:	fa26 f203 	lsr.w	r2, r6, r3
   8957a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8957e:	fbb2 f1fc 	udiv	r1, r2, ip
   89582:	fa1f f887 	uxth.w	r8, r7
   89586:	fb0c 2211 	mls	r2, ip, r1, r2
   8958a:	fa06 f60e 	lsl.w	r6, r6, lr
   8958e:	fa20 f303 	lsr.w	r3, r0, r3
   89592:	fb01 f908 	mul.w	r9, r1, r8
   89596:	4333      	orrs	r3, r6
   89598:	0c1e      	lsrs	r6, r3, #16
   8959a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8959e:	45b1      	cmp	r9, r6
   895a0:	fa00 f40e 	lsl.w	r4, r0, lr
   895a4:	d909      	bls.n	895ba <__udivmoddi4+0x1ba>
   895a6:	19f6      	adds	r6, r6, r7
   895a8:	f101 32ff 	add.w	r2, r1, #4294967295
   895ac:	f080 808c 	bcs.w	896c8 <__udivmoddi4+0x2c8>
   895b0:	45b1      	cmp	r9, r6
   895b2:	f240 8089 	bls.w	896c8 <__udivmoddi4+0x2c8>
   895b6:	3902      	subs	r1, #2
   895b8:	443e      	add	r6, r7
   895ba:	eba6 0609 	sub.w	r6, r6, r9
   895be:	fbb6 f0fc 	udiv	r0, r6, ip
   895c2:	fb0c 6210 	mls	r2, ip, r0, r6
   895c6:	fb00 f908 	mul.w	r9, r0, r8
   895ca:	b29e      	uxth	r6, r3
   895cc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   895d0:	45b1      	cmp	r9, r6
   895d2:	d907      	bls.n	895e4 <__udivmoddi4+0x1e4>
   895d4:	19f6      	adds	r6, r6, r7
   895d6:	f100 33ff 	add.w	r3, r0, #4294967295
   895da:	d271      	bcs.n	896c0 <__udivmoddi4+0x2c0>
   895dc:	45b1      	cmp	r9, r6
   895de:	d96f      	bls.n	896c0 <__udivmoddi4+0x2c0>
   895e0:	3802      	subs	r0, #2
   895e2:	443e      	add	r6, r7
   895e4:	eba6 0609 	sub.w	r6, r6, r9
   895e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   895ec:	e78f      	b.n	8950e <__udivmoddi4+0x10e>
   895ee:	f1c1 0720 	rsb	r7, r1, #32
   895f2:	fa22 f807 	lsr.w	r8, r2, r7
   895f6:	408b      	lsls	r3, r1
   895f8:	ea48 0303 	orr.w	r3, r8, r3
   895fc:	fa26 f407 	lsr.w	r4, r6, r7
   89600:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   89604:	fbb4 f9fe 	udiv	r9, r4, lr
   89608:	fa1f fc83 	uxth.w	ip, r3
   8960c:	fb0e 4419 	mls	r4, lr, r9, r4
   89610:	408e      	lsls	r6, r1
   89612:	fa20 f807 	lsr.w	r8, r0, r7
   89616:	fb09 fa0c 	mul.w	sl, r9, ip
   8961a:	ea48 0806 	orr.w	r8, r8, r6
   8961e:	ea4f 4618 	mov.w	r6, r8, lsr #16
   89622:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   89626:	45a2      	cmp	sl, r4
   89628:	fa02 f201 	lsl.w	r2, r2, r1
   8962c:	fa00 f601 	lsl.w	r6, r0, r1
   89630:	d908      	bls.n	89644 <__udivmoddi4+0x244>
   89632:	18e4      	adds	r4, r4, r3
   89634:	f109 30ff 	add.w	r0, r9, #4294967295
   89638:	d244      	bcs.n	896c4 <__udivmoddi4+0x2c4>
   8963a:	45a2      	cmp	sl, r4
   8963c:	d942      	bls.n	896c4 <__udivmoddi4+0x2c4>
   8963e:	f1a9 0902 	sub.w	r9, r9, #2
   89642:	441c      	add	r4, r3
   89644:	eba4 040a 	sub.w	r4, r4, sl
   89648:	fbb4 f0fe 	udiv	r0, r4, lr
   8964c:	fb0e 4410 	mls	r4, lr, r0, r4
   89650:	fb00 fc0c 	mul.w	ip, r0, ip
   89654:	fa1f f888 	uxth.w	r8, r8
   89658:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   8965c:	45a4      	cmp	ip, r4
   8965e:	d907      	bls.n	89670 <__udivmoddi4+0x270>
   89660:	18e4      	adds	r4, r4, r3
   89662:	f100 3eff 	add.w	lr, r0, #4294967295
   89666:	d229      	bcs.n	896bc <__udivmoddi4+0x2bc>
   89668:	45a4      	cmp	ip, r4
   8966a:	d927      	bls.n	896bc <__udivmoddi4+0x2bc>
   8966c:	3802      	subs	r0, #2
   8966e:	441c      	add	r4, r3
   89670:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89674:	fba0 8902 	umull	r8, r9, r0, r2
   89678:	eba4 0c0c 	sub.w	ip, r4, ip
   8967c:	45cc      	cmp	ip, r9
   8967e:	46c2      	mov	sl, r8
   89680:	46ce      	mov	lr, r9
   89682:	d315      	bcc.n	896b0 <__udivmoddi4+0x2b0>
   89684:	d012      	beq.n	896ac <__udivmoddi4+0x2ac>
   89686:	b155      	cbz	r5, 8969e <__udivmoddi4+0x29e>
   89688:	ebb6 030a 	subs.w	r3, r6, sl
   8968c:	eb6c 060e 	sbc.w	r6, ip, lr
   89690:	fa06 f707 	lsl.w	r7, r6, r7
   89694:	40cb      	lsrs	r3, r1
   89696:	431f      	orrs	r7, r3
   89698:	40ce      	lsrs	r6, r1
   8969a:	602f      	str	r7, [r5, #0]
   8969c:	606e      	str	r6, [r5, #4]
   8969e:	2100      	movs	r1, #0
   896a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   896a4:	4610      	mov	r0, r2
   896a6:	e6f7      	b.n	89498 <__udivmoddi4+0x98>
   896a8:	4689      	mov	r9, r1
   896aa:	e6de      	b.n	8946a <__udivmoddi4+0x6a>
   896ac:	4546      	cmp	r6, r8
   896ae:	d2ea      	bcs.n	89686 <__udivmoddi4+0x286>
   896b0:	ebb8 0a02 	subs.w	sl, r8, r2
   896b4:	eb69 0e03 	sbc.w	lr, r9, r3
   896b8:	3801      	subs	r0, #1
   896ba:	e7e4      	b.n	89686 <__udivmoddi4+0x286>
   896bc:	4670      	mov	r0, lr
   896be:	e7d7      	b.n	89670 <__udivmoddi4+0x270>
   896c0:	4618      	mov	r0, r3
   896c2:	e78f      	b.n	895e4 <__udivmoddi4+0x1e4>
   896c4:	4681      	mov	r9, r0
   896c6:	e7bd      	b.n	89644 <__udivmoddi4+0x244>
   896c8:	4611      	mov	r1, r2
   896ca:	e776      	b.n	895ba <__udivmoddi4+0x1ba>
   896cc:	3802      	subs	r0, #2
   896ce:	443c      	add	r4, r7
   896d0:	e744      	b.n	8955c <__udivmoddi4+0x15c>
   896d2:	4608      	mov	r0, r1
   896d4:	e706      	b.n	894e4 <__udivmoddi4+0xe4>
   896d6:	3a02      	subs	r2, #2
   896d8:	443e      	add	r6, r7
   896da:	e72b      	b.n	89534 <__udivmoddi4+0x134>

000896dc <__aeabi_idiv0>:
   896dc:	4770      	bx	lr
   896de:	bf00      	nop
   896e0:	00000001 	.word	0x00000001
   896e4:	00000002 	.word	0x00000002
   896e8:	00000004 	.word	0x00000004
   896ec:	00000008 	.word	0x00000008
   896f0:	00000010 	.word	0x00000010
   896f4:	00000020 	.word	0x00000020
   896f8:	00000040 	.word	0x00000040
   896fc:	00000080 	.word	0x00000080
   89700:	00000100 	.word	0x00000100
   89704:	00000200 	.word	0x00000200
   89708:	00000400 	.word	0x00000400
   8970c:	000f4240 	.word	0x000f4240
   89710:	000000c0 	.word	0x000000c0
	...
   8971c:	69442020 	.word	0x69442020
   89720:	74636572 	.word	0x74636572
   89724:	3a6e6f69 	.word	0x3a6e6f69
   89728:	2e332520 	.word	0x2e332520
   8972c:	20206631 	.word	0x20206631
   89730:	00000000 	.word	0x00000000
   89734:	696c6163 	.word	0x696c6163
   89738:	74617262 	.word	0x74617262
   8973c:	6f632065 	.word	0x6f632065
   89740:	7361706d 	.word	0x7361706d
   89744:	00000073 	.word	0x00000073
   89748:	69442020 	.word	0x69442020
   8974c:	74636572 	.word	0x74636572
   89750:	3a6e6f69 	.word	0x3a6e6f69
   89754:	64312520 	.word	0x64312520
   89758:	00002020 	.word	0x00002020
   8975c:	3a656553 	.word	0x3a656553
   89760:	64312520 	.word	0x64312520
   89764:	00000000 	.word	0x00000000
   89768:	3a637345 	.word	0x3a637345
   8976c:	64342520 	.word	0x64342520
   89770:	00000000 	.word	0x00000000
   89774:	656e694c 	.word	0x656e694c
   89778:	3125203a 	.word	0x3125203a
   8977c:	64312564 	.word	0x64312564
   89780:	25643125 	.word	0x25643125
   89784:	31256431 	.word	0x31256431
   89788:	64312564 	.word	0x64312564
   8978c:	25643125 	.word	0x25643125
   89790:	31256431 	.word	0x31256431
   89794:	64312564 	.word	0x64312564
   89798:	25643125 	.word	0x25643125
   8979c:	00006431 	.word	0x00006431
   897a0:	74756873 	.word	0x74756873
   897a4:	676e6974 	.word	0x676e6974
   897a8:	776f6420 	.word	0x776f6420
   897ac:	2e2e2e6e 	.word	0x2e2e2e6e
   897b0:	00000000 	.word	0x00000000
   897b4:	666e6f63 	.word	0x666e6f63
   897b8:	206d7269 	.word	0x206d7269
   897bc:	74756873 	.word	0x74756873
   897c0:	6e776f64 	.word	0x6e776f64
   897c4:	0000003f 	.word	0x0000003f
   897c8:	20202020 	.word	0x20202020
   897cc:	534f6f6e 	.word	0x534f6f6e
   897d0:	454e4f20 	.word	0x454e4f20
   897d4:	00000000 	.word	0x00000000
   897d8:	74614d20 	.word	0x74614d20
   897dc:	00006863 	.word	0x00006863
   897e0:	6e655320 	.word	0x6e655320
   897e4:	73726f73 	.word	0x73726f73
   897e8:	00000000 	.word	0x00000000
   897ec:	74655320 	.word	0x74655320
   897f0:	676e6974 	.word	0x676e6974
   897f4:	00000073 	.word	0x00000073
   897f8:	000897c8 	.word	0x000897c8
   897fc:	000897d8 	.word	0x000897d8
   89800:	000897e0 	.word	0x000897e0
   89804:	000897ec 	.word	0x000897ec
   89808:	6c614220 	.word	0x6c614220
   8980c:	0000006c 	.word	0x0000006c
   89810:	6d6f4320 	.word	0x6d6f4320
   89814:	73736170 	.word	0x73736170
   89818:	00000000 	.word	0x00000000
   8981c:	6e694c20 	.word	0x6e694c20
   89820:	00000065 	.word	0x00000065
   89824:	00000020 	.word	0x00000020
   89828:	00089808 	.word	0x00089808
   8982c:	00089810 	.word	0x00089810
   89830:	0008981c 	.word	0x0008981c
   89834:	00089824 	.word	0x00089824
   89838:	00089824 	.word	0x00089824
   8983c:	00089824 	.word	0x00089824
   89840:	00089824 	.word	0x00089824
   89844:	00089824 	.word	0x00089824
   89848:	0000003e 	.word	0x0000003e
   8984c:	25753325 	.word	0x25753325
   89850:	00000025 	.word	0x00000025
   89854:	75322520 	.word	0x75322520
   89858:	00002525 	.word	0x00002525
   8985c:	31252020 	.word	0x31252020
   89860:	00252575 	.word	0x00252575
   89864:	746f6f62 	.word	0x746f6f62
   89868:	20676e69 	.word	0x20676e69
   8986c:	534f6f6e 	.word	0x534f6f6e
   89870:	00202020 	.word	0x00202020
   89874:	0000002e 	.word	0x0000002e

00089878 <_global_impure_ptr>:
   89878:	200701a8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   89888:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   89898:	46454443 00000000 33323130 37363534     CDEF....01234567
   898a8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   898b8:	0000296c 00000030                       l)..0...

000898c0 <blanks.7223>:
   898c0:	20202020 20202020 20202020 20202020                     

000898d0 <zeroes.7224>:
   898d0:	30303030 30303030 30303030 30303030     0000000000000000
   898e0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

000898f0 <__mprec_bigtens>:
   898f0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   89900:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   89910:	7f73bf3c 75154fdd                       <.s..O.u

00089918 <__mprec_tens>:
   89918:	00000000 3ff00000 00000000 40240000     .......?......$@
   89928:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   89938:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   89948:	00000000 412e8480 00000000 416312d0     .......A......cA
   89958:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   89968:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   89978:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   89988:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   89998:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   899a8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   899b8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   899c8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   899d8:	79d99db4 44ea7843                       ...yCx.D

000899e0 <p05.6055>:
   899e0:	00000005 00000019 0000007d 00000043     ........}...C...
   899f0:	49534f50 00000058 0000002e              POSIX.......

000899fc <_ctype_>:
   899fc:	20202000 20202020 28282020 20282828     .         ((((( 
   89a0c:	20202020 20202020 20202020 20202020                     
   89a1c:	10108820 10101010 10101010 10101010      ...............
   89a2c:	04040410 04040404 10040404 10101010     ................
   89a3c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   89a4c:	01010101 01010101 01010101 10101010     ................
   89a5c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   89a6c:	02020202 02020202 02020202 10101010     ................
   89a7c:	00000020 00000000 00000000 00000000      ...............
	...

00089b00 <_init>:
   89b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89b02:	bf00      	nop
   89b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89b06:	bc08      	pop	{r3}
   89b08:	469e      	mov	lr, r3
   89b0a:	4770      	bx	lr

00089b0c <__init_array_start>:
   89b0c:	00086d55 	.word	0x00086d55

00089b10 <__frame_dummy_init_array_entry>:
   89b10:	00080119                                ....

00089b14 <_fini>:
   89b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89b16:	bf00      	nop
   89b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89b1a:	bc08      	pop	{r3}
   89b1c:	469e      	mov	lr, r3
   89b1e:	4770      	bx	lr

00089b20 <__fini_array_start>:
   89b20:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007019c 	.word	0x2007019c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <print_menu>:
2007018c:	00000101                                         .

2007018d <allow_leds>:
2007018d:	02000001                                         ...

20070190 <menu_info>:
20070190:	04020202 03010101 01010101              ............

2007019c <SystemCoreClock>:
2007019c:	003d0900                                ..=.

200701a0 <update_dots>:
200701a0:	00000001                                ....

200701a4 <_impure_ptr>:
200701a4:	200701a8                                ... 

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	20070fe8                                ... 

200705d4 <__malloc_av_>:
	...
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 

200709dc <__malloc_sbrk_base>:
200709dc:	ffffffff                                ....

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__global_locale>:
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00000043 00000000 00000000 00000000     C...............
	...
20070ac4:	0008922d 00088dcd 00000000 000899fc     -...............
20070ad4:	000899f8 0008989c 0008989c 0008989c     ................
20070ae4:	0008989c 0008989c 0008989c 0008989c     ................
20070af4:	0008989c 0008989c ffffffff ffffffff     ................
20070b04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
