
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000098dc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000898dc  000898dc  000198dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b50  20070000  000898e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004a4  20070b50  0008a434  00020b50  2**2
                  ALLOC
  4 .stack        00002004  20070ff4  0008a8d8  00020b50  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b79  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001cfca  00000000  00000000  00020bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b3f  00000000  00000000  0003db9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008c3c  00000000  00000000  000416db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f58  00000000  00000000  0004a317  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ea0  00000000  00000000  0004b26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008673  00000000  00000000  0004c10f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013317  00000000  00000000  00054782  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00063576  00000000  00000000  00067a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004de4  00000000  00000000  000cb010  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	f8 2f 07 20 29 3f 08 00 21 3f 08 00 21 3f 08 00     ./. )?..!?..!?..
   80010:	21 3f 08 00 21 3f 08 00 21 3f 08 00 00 00 00 00     !?..!?..!?......
	...
   8002c:	21 3f 08 00 21 3f 08 00 00 00 00 00 21 3f 08 00     !?..!?......!?..
   8003c:	99 2e 08 00 21 3f 08 00 21 3f 08 00 21 3f 08 00     ....!?..!?..!?..
   8004c:	21 3f 08 00 21 3f 08 00 21 3f 08 00 21 3f 08 00     !?..!?..!?..!?..
   8005c:	21 3f 08 00 21 3f 08 00 21 3f 08 00 00 00 00 00     !?..!?..!?......
   8006c:	21 3f 08 00 21 3f 08 00 21 3f 08 00 21 3f 08 00     !?..!?..!?..!?..
	...
   80084:	21 3f 08 00 21 3f 08 00 21 3f 08 00 21 3f 08 00     !?..!?..!?..!?..
   80094:	21 3f 08 00 ed 10 08 00 21 3f 08 00 21 3f 08 00     !?......!?..!?..
   800a4:	00 00 00 00 21 3f 08 00 21 3f 08 00 89 2b 08 00     ....!?..!?...+..
   800b4:	21 3f 08 00 21 3f 08 00 21 3f 08 00 21 3f 08 00     !?..!?..!?..!?..
   800c4:	21 3f 08 00 21 3f 08 00 21 3f 08 00 21 3f 08 00     !?..!?..!?..!?..
   800d4:	21 3f 08 00 21 3f 08 00 45 0c 08 00 21 3f 08 00     !?..!?..E...!?..
   800e4:	21 3f 08 00 21 3f 08 00 21 3f 08 00 21 3f 08 00     !?..!?..!?..!?..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b50 	.word	0x20070b50
   80110:	00000000 	.word	0x00000000
   80114:	000898e4 	.word	0x000898e4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000898e4 	.word	0x000898e4
   80154:	20070b54 	.word	0x20070b54
   80158:	000898e4 	.word	0x000898e4
   8015c:	00000000 	.word	0x00000000

00080160 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   80160:	b580      	push	{r7, lr}
   80162:	b082      	sub	sp, #8
   80164:	af00      	add	r7, sp, #0
   80166:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   80168:	6878      	ldr	r0, [r7, #4]
   8016a:	4b04      	ldr	r3, [pc, #16]	; (8017c <usart_spi_enable+0x1c>)
   8016c:	4798      	blx	r3
	usart_enable_rx(p_usart);
   8016e:	6878      	ldr	r0, [r7, #4]
   80170:	4b03      	ldr	r3, [pc, #12]	; (80180 <usart_spi_enable+0x20>)
   80172:	4798      	blx	r3
}
   80174:	bf00      	nop
   80176:	3708      	adds	r7, #8
   80178:	46bd      	mov	sp, r7
   8017a:	bd80      	pop	{r7, pc}
   8017c:	000808a1 	.word	0x000808a1
   80180:	000808e9 	.word	0x000808e9

00080184 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   80184:	b580      	push	{r7, lr}
   80186:	b082      	sub	sp, #8
   80188:	af00      	add	r7, sp, #0
   8018a:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   8018c:	6878      	ldr	r0, [r7, #4]
   8018e:	4b04      	ldr	r3, [pc, #16]	; (801a0 <usart_spi_disable+0x1c>)
   80190:	4798      	blx	r3
	usart_disable_rx(p_usart);
   80192:	6878      	ldr	r0, [r7, #4]
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <usart_spi_disable+0x20>)
   80196:	4798      	blx	r3
}
   80198:	bf00      	nop
   8019a:	3708      	adds	r7, #8
   8019c:	46bd      	mov	sp, r7
   8019e:	bd80      	pop	{r7, pc}
   801a0:	000808b9 	.word	0x000808b9
   801a4:	00080901 	.word	0x00080901

000801a8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801a8:	b480      	push	{r7}
   801aa:	b085      	sub	sp, #20
   801ac:	af00      	add	r7, sp, #0
   801ae:	60f8      	str	r0, [r7, #12]
   801b0:	60b9      	str	r1, [r7, #8]
   801b2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801b4:	68bb      	ldr	r3, [r7, #8]
   801b6:	2b00      	cmp	r3, #0
   801b8:	d007      	beq.n	801ca <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   801ba:	68bb      	ldr	r3, [r7, #8]
   801bc:	681a      	ldr	r2, [r3, #0]
   801be:	68fb      	ldr	r3, [r7, #12]
   801c0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   801c2:	68bb      	ldr	r3, [r7, #8]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	68fb      	ldr	r3, [r7, #12]
   801c8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   801ca:	687b      	ldr	r3, [r7, #4]
   801cc:	2b00      	cmp	r3, #0
   801ce:	d007      	beq.n	801e0 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	681a      	ldr	r2, [r3, #0]
   801d4:	68fb      	ldr	r3, [r7, #12]
   801d6:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   801d8:	687b      	ldr	r3, [r7, #4]
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	68fb      	ldr	r3, [r7, #12]
   801de:	61da      	str	r2, [r3, #28]
	}
}
   801e0:	bf00      	nop
   801e2:	3714      	adds	r7, #20
   801e4:	46bd      	mov	sp, r7
   801e6:	bc80      	pop	{r7}
   801e8:	4770      	bx	lr

000801ea <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801ea:	b480      	push	{r7}
   801ec:	b085      	sub	sp, #20
   801ee:	af00      	add	r7, sp, #0
   801f0:	60f8      	str	r0, [r7, #12]
   801f2:	60b9      	str	r1, [r7, #8]
   801f4:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801f6:	68bb      	ldr	r3, [r7, #8]
   801f8:	2b00      	cmp	r3, #0
   801fa:	d007      	beq.n	8020c <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   801fc:	68bb      	ldr	r3, [r7, #8]
   801fe:	681a      	ldr	r2, [r3, #0]
   80200:	68fb      	ldr	r3, [r7, #12]
   80202:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   80204:	68bb      	ldr	r3, [r7, #8]
   80206:	685a      	ldr	r2, [r3, #4]
   80208:	68fb      	ldr	r3, [r7, #12]
   8020a:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b00      	cmp	r3, #0
   80210:	d007      	beq.n	80222 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   80212:	687b      	ldr	r3, [r7, #4]
   80214:	681a      	ldr	r2, [r3, #0]
   80216:	68fb      	ldr	r3, [r7, #12]
   80218:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   8021a:	687b      	ldr	r3, [r7, #4]
   8021c:	685a      	ldr	r2, [r3, #4]
   8021e:	68fb      	ldr	r3, [r7, #12]
   80220:	615a      	str	r2, [r3, #20]
	}
}
   80222:	bf00      	nop
   80224:	3714      	adds	r7, #20
   80226:	46bd      	mov	sp, r7
   80228:	bc80      	pop	{r7}
   8022a:	4770      	bx	lr

0008022c <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8022c:	b480      	push	{r7}
   8022e:	b083      	sub	sp, #12
   80230:	af00      	add	r7, sp, #0
   80232:	6078      	str	r0, [r7, #4]
   80234:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   80236:	683a      	ldr	r2, [r7, #0]
   80238:	f240 1301 	movw	r3, #257	; 0x101
   8023c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8023e:	687a      	ldr	r2, [r7, #4]
   80240:	6213      	str	r3, [r2, #32]
}
   80242:	bf00      	nop
   80244:	370c      	adds	r7, #12
   80246:	46bd      	mov	sp, r7
   80248:	bc80      	pop	{r7}
   8024a:	4770      	bx	lr

0008024c <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8024c:	b480      	push	{r7}
   8024e:	b083      	sub	sp, #12
   80250:	af00      	add	r7, sp, #0
   80252:	6078      	str	r0, [r7, #4]
   80254:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   80256:	683a      	ldr	r2, [r7, #0]
   80258:	f240 2302 	movw	r3, #514	; 0x202
   8025c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8025e:	687a      	ldr	r2, [r7, #4]
   80260:	6213      	str	r3, [r2, #32]
}
   80262:	bf00      	nop
   80264:	370c      	adds	r7, #12
   80266:	46bd      	mov	sp, r7
   80268:	bc80      	pop	{r7}
   8026a:	4770      	bx	lr

0008026c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8026c:	b4b0      	push	{r4, r5, r7}
   8026e:	b091      	sub	sp, #68	; 0x44
   80270:	af00      	add	r7, sp, #0
   80272:	6078      	str	r0, [r7, #4]
   80274:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80276:	4b1b      	ldr	r3, [pc, #108]	; (802e4 <pwm_clocks_generate+0x78>)
   80278:	f107 040c 	add.w	r4, r7, #12
   8027c:	461d      	mov	r5, r3
   8027e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8028a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8028e:	2300      	movs	r3, #0
   80290:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   80294:	009b      	lsls	r3, r3, #2
   80296:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8029a:	4413      	add	r3, r2
   8029c:	f853 3c34 	ldr.w	r3, [r3, #-52]
   802a0:	683a      	ldr	r2, [r7, #0]
   802a2:	fbb2 f2f3 	udiv	r2, r2, r3
   802a6:	687b      	ldr	r3, [r7, #4]
   802a8:	fbb2 f3f3 	udiv	r3, r2, r3
   802ac:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   802b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   802b4:	d906      	bls.n	802c4 <pwm_clocks_generate+0x58>
			break;
		}
		ul_pre++;
   802b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802b8:	3301      	adds	r3, #1
   802ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   802bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802be:	2b0a      	cmp	r3, #10
   802c0:	d9e7      	bls.n	80292 <pwm_clocks_generate+0x26>
   802c2:	e000      	b.n	802c6 <pwm_clocks_generate+0x5a>
			break;
   802c4:	bf00      	nop

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   802c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802c8:	2b0a      	cmp	r3, #10
   802ca:	d804      	bhi.n	802d6 <pwm_clocks_generate+0x6a>
		return ul_div | (ul_pre << 8);
   802cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802ce:	021a      	lsls	r2, r3, #8
   802d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   802d2:	4313      	orrs	r3, r2
   802d4:	e001      	b.n	802da <pwm_clocks_generate+0x6e>
	} else {
		return PWM_INVALID_ARGUMENT;
   802d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
   802da:	4618      	mov	r0, r3
   802dc:	3744      	adds	r7, #68	; 0x44
   802de:	46bd      	mov	sp, r7
   802e0:	bcb0      	pop	{r4, r5, r7}
   802e2:	4770      	bx	lr
   802e4:	000894dc 	.word	0x000894dc

000802e8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   802e8:	b580      	push	{r7, lr}
   802ea:	b084      	sub	sp, #16
   802ec:	af00      	add	r7, sp, #0
   802ee:	6078      	str	r0, [r7, #4]
   802f0:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
   802f2:	2300      	movs	r3, #0
   802f4:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   802f6:	683b      	ldr	r3, [r7, #0]
   802f8:	681b      	ldr	r3, [r3, #0]
   802fa:	2b00      	cmp	r3, #0
   802fc:	d011      	beq.n	80322 <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   802fe:	683b      	ldr	r3, [r7, #0]
   80300:	681a      	ldr	r2, [r3, #0]
   80302:	683b      	ldr	r3, [r7, #0]
   80304:	689b      	ldr	r3, [r3, #8]
   80306:	4619      	mov	r1, r3
   80308:	4610      	mov	r0, r2
   8030a:	4b16      	ldr	r3, [pc, #88]	; (80364 <pwm_init+0x7c>)
   8030c:	4798      	blx	r3
   8030e:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
   80310:	68bb      	ldr	r3, [r7, #8]
   80312:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80316:	4293      	cmp	r3, r2
   80318:	d101      	bne.n	8031e <pwm_init+0x36>
			return result;
   8031a:	68bb      	ldr	r3, [r7, #8]
   8031c:	e01e      	b.n	8035c <pwm_init+0x74>
		}

		clock = result;
   8031e:	68bb      	ldr	r3, [r7, #8]
   80320:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80322:	683b      	ldr	r3, [r7, #0]
   80324:	685b      	ldr	r3, [r3, #4]
   80326:	2b00      	cmp	r3, #0
   80328:	d014      	beq.n	80354 <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8032a:	683b      	ldr	r3, [r7, #0]
   8032c:	685a      	ldr	r2, [r3, #4]
   8032e:	683b      	ldr	r3, [r7, #0]
   80330:	689b      	ldr	r3, [r3, #8]
   80332:	4619      	mov	r1, r3
   80334:	4610      	mov	r0, r2
   80336:	4b0b      	ldr	r3, [pc, #44]	; (80364 <pwm_init+0x7c>)
   80338:	4798      	blx	r3
   8033a:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
   8033c:	68bb      	ldr	r3, [r7, #8]
   8033e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80342:	4293      	cmp	r3, r2
   80344:	d101      	bne.n	8034a <pwm_init+0x62>
			return result;
   80346:	68bb      	ldr	r3, [r7, #8]
   80348:	e008      	b.n	8035c <pwm_init+0x74>
		}

		clock |= (result << 16);
   8034a:	68bb      	ldr	r3, [r7, #8]
   8034c:	041b      	lsls	r3, r3, #16
   8034e:	68fa      	ldr	r2, [r7, #12]
   80350:	4313      	orrs	r3, r2
   80352:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80354:	687b      	ldr	r3, [r7, #4]
   80356:	68fa      	ldr	r2, [r7, #12]
   80358:	601a      	str	r2, [r3, #0]
#endif
	return 0;
   8035a:	2300      	movs	r3, #0
}
   8035c:	4618      	mov	r0, r3
   8035e:	3710      	adds	r7, #16
   80360:	46bd      	mov	sp, r7
   80362:	bd80      	pop	{r7, pc}
   80364:	0008026d 	.word	0x0008026d

00080368 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80368:	b480      	push	{r7}
   8036a:	b087      	sub	sp, #28
   8036c:	af00      	add	r7, sp, #0
   8036e:	6078      	str	r0, [r7, #4]
   80370:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
   80372:	2300      	movs	r3, #0
   80374:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
   80376:	683b      	ldr	r3, [r7, #0]
   80378:	681b      	ldr	r3, [r3, #0]
   8037a:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8037c:	683b      	ldr	r3, [r7, #0]
   8037e:	685b      	ldr	r3, [r3, #4]
   80380:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
   80384:	683a      	ldr	r2, [r7, #0]
   80386:	7a92      	ldrb	r2, [r2, #10]
   80388:	0252      	lsls	r2, r2, #9
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8038a:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   8038c:	683a      	ldr	r2, [r7, #0]
   8038e:	8a92      	ldrh	r2, [r2, #20]
			(p_channel->polarity << 9) |
   80390:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
   80392:	683a      	ldr	r2, [r7, #0]
   80394:	7d92      	ldrb	r2, [r2, #22]
   80396:	0412      	lsls	r2, r2, #16
			(p_channel->counter_event) |
   80398:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
   8039a:	683a      	ldr	r2, [r7, #0]
   8039c:	7dd2      	ldrb	r2, [r2, #23]
   8039e:	0452      	lsls	r2, r2, #17
			(p_channel->b_deadtime_generator << 16) |
   803a0:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
   803a2:	683a      	ldr	r2, [r7, #0]
   803a4:	7e12      	ldrb	r2, [r2, #24]
   803a6:	0492      	lsls	r2, r2, #18
			(p_channel->b_pwmh_output_inverted << 17) |
   803a8:	4313      	orrs	r3, r2
#endif
			(p_channel->alignment);
   803aa:	683a      	ldr	r2, [r7, #0]
   803ac:	8912      	ldrh	r2, [r2, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803ae:	4313      	orrs	r3, r2
   803b0:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   803b2:	687a      	ldr	r2, [r7, #4]
   803b4:	693b      	ldr	r3, [r7, #16]
   803b6:	3310      	adds	r3, #16
   803b8:	015b      	lsls	r3, r3, #5
   803ba:	4413      	add	r3, r2
   803bc:	697a      	ldr	r2, [r7, #20]
   803be:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   803c0:	683b      	ldr	r3, [r7, #0]
   803c2:	68da      	ldr	r2, [r3, #12]
   803c4:	6879      	ldr	r1, [r7, #4]
   803c6:	693b      	ldr	r3, [r7, #16]
   803c8:	3310      	adds	r3, #16
   803ca:	015b      	lsls	r3, r3, #5
   803cc:	440b      	add	r3, r1
   803ce:	3304      	adds	r3, #4
   803d0:	601a      	str	r2, [r3, #0]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   803d2:	683b      	ldr	r3, [r7, #0]
   803d4:	691a      	ldr	r2, [r3, #16]
   803d6:	6879      	ldr	r1, [r7, #4]
   803d8:	693b      	ldr	r3, [r7, #16]
   803da:	015b      	lsls	r3, r3, #5
   803dc:	440b      	add	r3, r1
   803de:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   803e2:	601a      	str	r2, [r3, #0]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   803e4:	683b      	ldr	r3, [r7, #0]
   803e6:	7d9b      	ldrb	r3, [r3, #22]
   803e8:	2b00      	cmp	r3, #0
   803ea:	d00d      	beq.n	80408 <pwm_channel_init+0xa0>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   803ec:	683b      	ldr	r3, [r7, #0]
   803ee:	8b9b      	ldrh	r3, [r3, #28]
   803f0:	041b      	lsls	r3, r3, #16
   803f2:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   803f4:	683b      	ldr	r3, [r7, #0]
   803f6:	8b5b      	ldrh	r3, [r3, #26]
   803f8:	431a      	orrs	r2, r3
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   803fa:	6879      	ldr	r1, [r7, #4]
   803fc:	693b      	ldr	r3, [r7, #16]
   803fe:	015b      	lsls	r3, r3, #5
   80400:	440b      	add	r3, r1
   80402:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80406:	601a      	str	r2, [r3, #0]
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80408:	687b      	ldr	r3, [r7, #4]
   8040a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   8040c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   80410:	693b      	ldr	r3, [r7, #16]
   80412:	fa01 f303 	lsl.w	r3, r1, r3
   80416:	43db      	mvns	r3, r3
   80418:	4013      	ands	r3, r2
   8041a:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   8041c:	683b      	ldr	r3, [r7, #0]
   8041e:	7f9b      	ldrb	r3, [r3, #30]
   80420:	461a      	mov	r2, r3
   80422:	693b      	ldr	r3, [r7, #16]
   80424:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80426:	683b      	ldr	r3, [r7, #0]
   80428:	7fdb      	ldrb	r3, [r3, #31]
   8042a:	4619      	mov	r1, r3
   8042c:	693b      	ldr	r3, [r7, #16]
   8042e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   80432:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80434:	4313      	orrs	r3, r2
   80436:	461a      	mov	r2, r3
   80438:	697b      	ldr	r3, [r7, #20]
   8043a:	4313      	orrs	r3, r2
   8043c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OS = tmp_reg;
   8043e:	687b      	ldr	r3, [r7, #4]
   80440:	697a      	ldr	r2, [r7, #20]
   80442:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80444:	687b      	ldr	r3, [r7, #4]
   80446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   8044c:	693b      	ldr	r3, [r7, #16]
   8044e:	fa01 f303 	lsl.w	r3, r1, r3
   80452:	43db      	mvns	r3, r3
   80454:	4013      	ands	r3, r2
   80456:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80458:	683b      	ldr	r3, [r7, #0]
   8045a:	f893 3020 	ldrb.w	r3, [r3, #32]
   8045e:	461a      	mov	r2, r3
   80460:	693b      	ldr	r3, [r7, #16]
   80462:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80464:	683b      	ldr	r3, [r7, #0]
   80466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   8046a:	4619      	mov	r1, r3
   8046c:	693b      	ldr	r3, [r7, #16]
   8046e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   80472:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80474:	4313      	orrs	r3, r2
   80476:	461a      	mov	r2, r3
   80478:	697b      	ldr	r3, [r7, #20]
   8047a:	4313      	orrs	r3, r2
   8047c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OOV = tmp_reg;
   8047e:	687b      	ldr	r3, [r7, #4]
   80480:	697a      	ldr	r2, [r7, #20]
   80482:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80484:	2201      	movs	r2, #1
   80486:	693b      	ldr	r3, [r7, #16]
   80488:	fa02 f303 	lsl.w	r3, r2, r3
   8048c:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
   8048e:	683b      	ldr	r3, [r7, #0]
   80490:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   80494:	2b00      	cmp	r3, #0
   80496:	d006      	beq.n	804a6 <pwm_channel_init+0x13e>
		p_pwm->PWM_SCM |= channel;
   80498:	687b      	ldr	r3, [r7, #4]
   8049a:	6a1a      	ldr	r2, [r3, #32]
   8049c:	68fb      	ldr	r3, [r7, #12]
   8049e:	431a      	orrs	r2, r3
   804a0:	687b      	ldr	r3, [r7, #4]
   804a2:	621a      	str	r2, [r3, #32]
   804a4:	e006      	b.n	804b4 <pwm_channel_init+0x14c>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   804a6:	687b      	ldr	r3, [r7, #4]
   804a8:	6a1a      	ldr	r2, [r3, #32]
   804aa:	68fb      	ldr	r3, [r7, #12]
   804ac:	43db      	mvns	r3, r3
   804ae:	401a      	ands	r2, r3
   804b0:	687b      	ldr	r3, [r7, #4]
   804b2:	621a      	str	r2, [r3, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   804b4:	683b      	ldr	r3, [r7, #0]
   804b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   804ba:	2b01      	cmp	r3, #1
   804bc:	d109      	bne.n	804d2 <pwm_channel_init+0x16a>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   804be:	687b      	ldr	r3, [r7, #4]
   804c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804c2:	2101      	movs	r1, #1
   804c4:	693a      	ldr	r2, [r7, #16]
   804c6:	fa01 f202 	lsl.w	r2, r1, r2
   804ca:	431a      	orrs	r2, r3
   804cc:	687b      	ldr	r3, [r7, #4]
   804ce:	669a      	str	r2, [r3, #104]	; 0x68
   804d0:	e009      	b.n	804e6 <pwm_channel_init+0x17e>
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   804d2:	687b      	ldr	r3, [r7, #4]
   804d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804d6:	2101      	movs	r1, #1
   804d8:	693a      	ldr	r2, [r7, #16]
   804da:	fa01 f202 	lsl.w	r2, r1, r2
   804de:	43d2      	mvns	r2, r2
   804e0:	401a      	ands	r2, r3
   804e2:	687b      	ldr	r3, [r7, #4]
   804e4:	669a      	str	r2, [r3, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   804e6:	683b      	ldr	r3, [r7, #0]
   804e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   804ec:	2b01      	cmp	r3, #1
   804ee:	d10a      	bne.n	80506 <pwm_channel_init+0x19e>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   804f0:	687b      	ldr	r3, [r7, #4]
   804f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804f4:	2101      	movs	r1, #1
   804f6:	693a      	ldr	r2, [r7, #16]
   804f8:	fa01 f202 	lsl.w	r2, r1, r2
   804fc:	0412      	lsls	r2, r2, #16
   804fe:	431a      	orrs	r2, r3
   80500:	687b      	ldr	r3, [r7, #4]
   80502:	669a      	str	r2, [r3, #104]	; 0x68
   80504:	e00a      	b.n	8051c <pwm_channel_init+0x1b4>
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80506:	687b      	ldr	r3, [r7, #4]
   80508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8050a:	2101      	movs	r1, #1
   8050c:	693a      	ldr	r2, [r7, #16]
   8050e:	fa01 f202 	lsl.w	r2, r1, r2
   80512:	0412      	lsls	r2, r2, #16
   80514:	43d2      	mvns	r2, r2
   80516:	401a      	ands	r2, r3
   80518:	687b      	ldr	r3, [r7, #4]
   8051a:	669a      	str	r2, [r3, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
   8051c:	2300      	movs	r3, #0
   8051e:	60bb      	str	r3, [r7, #8]
#if (SAM3XA)
	if (ch_num < 4) {
   80520:	693b      	ldr	r3, [r7, #16]
   80522:	2b03      	cmp	r3, #3
   80524:	d81d      	bhi.n	80562 <pwm_channel_init+0x1fa>
		ch_num *= 8;
   80526:	693b      	ldr	r3, [r7, #16]
   80528:	00db      	lsls	r3, r3, #3
   8052a:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE1;
   8052c:	687b      	ldr	r3, [r7, #4]
   8052e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   80530:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80532:	22ff      	movs	r2, #255	; 0xff
   80534:	693b      	ldr	r3, [r7, #16]
   80536:	fa02 f303 	lsl.w	r3, r2, r3
   8053a:	43db      	mvns	r3, r3
   8053c:	461a      	mov	r2, r3
   8053e:	68bb      	ldr	r3, [r7, #8]
   80540:	4013      	ands	r3, r2
   80542:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80544:	683b      	ldr	r3, [r7, #0]
   80546:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   8054a:	461a      	mov	r2, r3
   8054c:	693b      	ldr	r3, [r7, #16]
   8054e:	fa02 f303 	lsl.w	r3, r2, r3
   80552:	461a      	mov	r2, r3
   80554:	68bb      	ldr	r3, [r7, #8]
   80556:	4313      	orrs	r3, r2
   80558:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8055a:	687b      	ldr	r3, [r7, #4]
   8055c:	68ba      	ldr	r2, [r7, #8]
   8055e:	66da      	str	r2, [r3, #108]	; 0x6c
   80560:	e01f      	b.n	805a2 <pwm_channel_init+0x23a>
	} else {
		ch_num -= 4;
   80562:	693b      	ldr	r3, [r7, #16]
   80564:	3b04      	subs	r3, #4
   80566:	613b      	str	r3, [r7, #16]
		ch_num *= 8;
   80568:	693b      	ldr	r3, [r7, #16]
   8056a:	00db      	lsls	r3, r3, #3
   8056c:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE2;
   8056e:	687b      	ldr	r3, [r7, #4]
   80570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80572:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80574:	22ff      	movs	r2, #255	; 0xff
   80576:	693b      	ldr	r3, [r7, #16]
   80578:	fa02 f303 	lsl.w	r3, r2, r3
   8057c:	43db      	mvns	r3, r3
   8057e:	461a      	mov	r2, r3
   80580:	68bb      	ldr	r3, [r7, #8]
   80582:	4013      	ands	r3, r2
   80584:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80586:	683b      	ldr	r3, [r7, #0]
   80588:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   8058c:	461a      	mov	r2, r3
   8058e:	693b      	ldr	r3, [r7, #16]
   80590:	fa02 f303 	lsl.w	r3, r2, r3
   80594:	461a      	mov	r2, r3
   80596:	68bb      	ldr	r3, [r7, #8]
   80598:	4313      	orrs	r3, r2
   8059a:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	68ba      	ldr	r2, [r7, #8]
   805a0:	671a      	str	r2, [r3, #112]	; 0x70
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
   805a2:	2300      	movs	r3, #0
}
   805a4:	4618      	mov	r0, r3
   805a6:	371c      	adds	r7, #28
   805a8:	46bd      	mov	sp, r7
   805aa:	bc80      	pop	{r7}
   805ac:	4770      	bx	lr

000805ae <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   805ae:	b480      	push	{r7}
   805b0:	b087      	sub	sp, #28
   805b2:	af00      	add	r7, sp, #0
   805b4:	60f8      	str	r0, [r7, #12]
   805b6:	60b9      	str	r1, [r7, #8]
   805b8:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
   805ba:	68bb      	ldr	r3, [r7, #8]
   805bc:	681b      	ldr	r3, [r3, #0]
   805be:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   805c0:	68bb      	ldr	r3, [r7, #8]
   805c2:	691a      	ldr	r2, [r3, #16]
   805c4:	687b      	ldr	r3, [r7, #4]
   805c6:	429a      	cmp	r2, r3
   805c8:	d202      	bcs.n	805d0 <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
   805ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   805ce:	e00b      	b.n	805e8 <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   805d0:	68bb      	ldr	r3, [r7, #8]
   805d2:	687a      	ldr	r2, [r7, #4]
   805d4:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   805d6:	68fa      	ldr	r2, [r7, #12]
   805d8:	697b      	ldr	r3, [r7, #20]
   805da:	015b      	lsls	r3, r3, #5
   805dc:	4413      	add	r3, r2
   805de:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805e2:	687a      	ldr	r2, [r7, #4]
   805e4:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
   805e6:	2300      	movs	r3, #0
}
   805e8:	4618      	mov	r0, r3
   805ea:	371c      	adds	r7, #28
   805ec:	46bd      	mov	sp, r7
   805ee:	bc80      	pop	{r7}
   805f0:	4770      	bx	lr

000805f2 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
   805f2:	b480      	push	{r7}
   805f4:	b083      	sub	sp, #12
   805f6:	af00      	add	r7, sp, #0
   805f8:	6078      	str	r0, [r7, #4]
   805fa:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
   805fc:	2201      	movs	r2, #1
   805fe:	683b      	ldr	r3, [r7, #0]
   80600:	fa02 f303 	lsl.w	r3, r2, r3
   80604:	461a      	mov	r2, r3
   80606:	687b      	ldr	r3, [r7, #4]
   80608:	605a      	str	r2, [r3, #4]
}
   8060a:	bf00      	nop
   8060c:	370c      	adds	r7, #12
   8060e:	46bd      	mov	sp, r7
   80610:	bc80      	pop	{r7}
   80612:	4770      	bx	lr

00080614 <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
   80614:	b480      	push	{r7}
   80616:	b083      	sub	sp, #12
   80618:	af00      	add	r7, sp, #0
   8061a:	6078      	str	r0, [r7, #4]
   8061c:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
   8061e:	2201      	movs	r2, #1
   80620:	683b      	ldr	r3, [r7, #0]
   80622:	fa02 f303 	lsl.w	r3, r2, r3
   80626:	461a      	mov	r2, r3
   80628:	687b      	ldr	r3, [r7, #4]
   8062a:	609a      	str	r2, [r3, #8]
}
   8062c:	bf00      	nop
   8062e:	370c      	adds	r7, #12
   80630:	46bd      	mov	sp, r7
   80632:	bc80      	pop	{r7}
   80634:	4770      	bx	lr

00080636 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80636:	b480      	push	{r7}
   80638:	b087      	sub	sp, #28
   8063a:	af00      	add	r7, sp, #0
   8063c:	60f8      	str	r0, [r7, #12]
   8063e:	60b9      	str	r1, [r7, #8]
   80640:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80642:	68fa      	ldr	r2, [r7, #12]
   80644:	68bb      	ldr	r3, [r7, #8]
   80646:	019b      	lsls	r3, r3, #6
   80648:	4413      	add	r3, r2
   8064a:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8064c:	697b      	ldr	r3, [r7, #20]
   8064e:	2202      	movs	r2, #2
   80650:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80652:	697b      	ldr	r3, [r7, #20]
   80654:	f04f 32ff 	mov.w	r2, #4294967295
   80658:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   8065a:	697b      	ldr	r3, [r7, #20]
   8065c:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8065e:	697b      	ldr	r3, [r7, #20]
   80660:	687a      	ldr	r2, [r7, #4]
   80662:	605a      	str	r2, [r3, #4]
}
   80664:	bf00      	nop
   80666:	371c      	adds	r7, #28
   80668:	46bd      	mov	sp, r7
   8066a:	bc80      	pop	{r7}
   8066c:	4770      	bx	lr

0008066e <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
   8066e:	b480      	push	{r7}
   80670:	b083      	sub	sp, #12
   80672:	af00      	add	r7, sp, #0
   80674:	6078      	str	r0, [r7, #4]
   80676:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80678:	687a      	ldr	r2, [r7, #4]
   8067a:	683b      	ldr	r3, [r7, #0]
   8067c:	019b      	lsls	r3, r3, #6
   8067e:	4413      	add	r3, r2
   80680:	2205      	movs	r2, #5
   80682:	601a      	str	r2, [r3, #0]
}
   80684:	bf00      	nop
   80686:	370c      	adds	r7, #12
   80688:	46bd      	mov	sp, r7
   8068a:	bc80      	pop	{r7}
   8068c:	4770      	bx	lr

0008068e <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
   8068e:	b480      	push	{r7}
   80690:	b085      	sub	sp, #20
   80692:	af00      	add	r7, sp, #0
   80694:	60f8      	str	r0, [r7, #12]
   80696:	60b9      	str	r1, [r7, #8]
   80698:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   8069a:	68fa      	ldr	r2, [r7, #12]
   8069c:	68bb      	ldr	r3, [r7, #8]
   8069e:	019b      	lsls	r3, r3, #6
   806a0:	4413      	add	r3, r2
   806a2:	331c      	adds	r3, #28
   806a4:	687a      	ldr	r2, [r7, #4]
   806a6:	601a      	str	r2, [r3, #0]
}
   806a8:	bf00      	nop
   806aa:	3714      	adds	r7, #20
   806ac:	46bd      	mov	sp, r7
   806ae:	bc80      	pop	{r7}
   806b0:	4770      	bx	lr

000806b2 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
   806b2:	b480      	push	{r7}
   806b4:	b087      	sub	sp, #28
   806b6:	af00      	add	r7, sp, #0
   806b8:	60f8      	str	r0, [r7, #12]
   806ba:	60b9      	str	r1, [r7, #8]
   806bc:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806be:	68fa      	ldr	r2, [r7, #12]
   806c0:	68bb      	ldr	r3, [r7, #8]
   806c2:	019b      	lsls	r3, r3, #6
   806c4:	4413      	add	r3, r2
   806c6:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   806c8:	697b      	ldr	r3, [r7, #20]
   806ca:	687a      	ldr	r2, [r7, #4]
   806cc:	625a      	str	r2, [r3, #36]	; 0x24
}
   806ce:	bf00      	nop
   806d0:	371c      	adds	r7, #28
   806d2:	46bd      	mov	sp, r7
   806d4:	bc80      	pop	{r7}
   806d6:	4770      	bx	lr

000806d8 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
   806d8:	b480      	push	{r7}
   806da:	b085      	sub	sp, #20
   806dc:	af00      	add	r7, sp, #0
   806de:	6078      	str	r0, [r7, #4]
   806e0:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806e2:	687a      	ldr	r2, [r7, #4]
   806e4:	683b      	ldr	r3, [r7, #0]
   806e6:	019b      	lsls	r3, r3, #6
   806e8:	4413      	add	r3, r2
   806ea:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   806ec:	68fb      	ldr	r3, [r7, #12]
   806ee:	6a1b      	ldr	r3, [r3, #32]
}
   806f0:	4618      	mov	r0, r3
   806f2:	3714      	adds	r7, #20
   806f4:	46bd      	mov	sp, r7
   806f6:	bc80      	pop	{r7}
   806f8:	4770      	bx	lr

000806fa <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   806fa:	b480      	push	{r7}
   806fc:	b087      	sub	sp, #28
   806fe:	af00      	add	r7, sp, #0
   80700:	60f8      	str	r0, [r7, #12]
   80702:	60b9      	str	r1, [r7, #8]
   80704:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   80706:	68bb      	ldr	r3, [r7, #8]
   80708:	085a      	lsrs	r2, r3, #1
   8070a:	687b      	ldr	r3, [r7, #4]
   8070c:	441a      	add	r2, r3
   8070e:	68bb      	ldr	r3, [r7, #8]
   80710:	fbb2 f3f3 	udiv	r3, r2, r3
   80714:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   80716:	697b      	ldr	r3, [r7, #20]
   80718:	2b03      	cmp	r3, #3
   8071a:	d903      	bls.n	80724 <usart_set_spi_master_baudrate+0x2a>
   8071c:	697b      	ldr	r3, [r7, #20]
   8071e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   80722:	d301      	bcc.n	80728 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   80724:	2301      	movs	r3, #1
   80726:	e003      	b.n	80730 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   80728:	68fb      	ldr	r3, [r7, #12]
   8072a:	697a      	ldr	r2, [r7, #20]
   8072c:	621a      	str	r2, [r3, #32]

	return 0;
   8072e:	2300      	movs	r3, #0
}
   80730:	4618      	mov	r0, r3
   80732:	371c      	adds	r7, #28
   80734:	46bd      	mov	sp, r7
   80736:	bc80      	pop	{r7}
   80738:	4770      	bx	lr
	...

0008073c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8073c:	b580      	push	{r7, lr}
   8073e:	b082      	sub	sp, #8
   80740:	af00      	add	r7, sp, #0
   80742:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   80744:	6878      	ldr	r0, [r7, #4]
   80746:	4b0d      	ldr	r3, [pc, #52]	; (8077c <usart_reset+0x40>)
   80748:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8074a:	687b      	ldr	r3, [r7, #4]
   8074c:	2200      	movs	r2, #0
   8074e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   80750:	687b      	ldr	r3, [r7, #4]
   80752:	2200      	movs	r2, #0
   80754:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80756:	687b      	ldr	r3, [r7, #4]
   80758:	2200      	movs	r2, #0
   8075a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8075c:	6878      	ldr	r0, [r7, #4]
   8075e:	4b08      	ldr	r3, [pc, #32]	; (80780 <usart_reset+0x44>)
   80760:	4798      	blx	r3
	usart_reset_rx(p_usart);
   80762:	6878      	ldr	r0, [r7, #4]
   80764:	4b07      	ldr	r3, [pc, #28]	; (80784 <usart_reset+0x48>)
   80766:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   80768:	6878      	ldr	r0, [r7, #4]
   8076a:	4b07      	ldr	r3, [pc, #28]	; (80788 <usart_reset+0x4c>)
   8076c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8076e:	6878      	ldr	r0, [r7, #4]
   80770:	4b06      	ldr	r3, [pc, #24]	; (8078c <usart_reset+0x50>)
   80772:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   80774:	bf00      	nop
   80776:	3708      	adds	r7, #8
   80778:	46bd      	mov	sp, r7
   8077a:	bd80      	pop	{r7, pc}
   8077c:	00080999 	.word	0x00080999
   80780:	000808d1 	.word	0x000808d1
   80784:	00080919 	.word	0x00080919
   80788:	00080931 	.word	0x00080931
   8078c:	0008094b 	.word	0x0008094b

00080790 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   80790:	b580      	push	{r7, lr}
   80792:	b084      	sub	sp, #16
   80794:	af00      	add	r7, sp, #0
   80796:	60f8      	str	r0, [r7, #12]
   80798:	60b9      	str	r1, [r7, #8]
   8079a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   8079c:	68f8      	ldr	r0, [r7, #12]
   8079e:	4b3d      	ldr	r3, [pc, #244]	; (80894 <usart_init_spi_master+0x104>)
   807a0:	4798      	blx	r3

	ul_reg_val = 0;
   807a2:	4b3d      	ldr	r3, [pc, #244]	; (80898 <usart_init_spi_master+0x108>)
   807a4:	2200      	movs	r2, #0
   807a6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   807a8:	68bb      	ldr	r3, [r7, #8]
   807aa:	2b00      	cmp	r3, #0
   807ac:	d00d      	beq.n	807ca <usart_init_spi_master+0x3a>
   807ae:	68bb      	ldr	r3, [r7, #8]
   807b0:	689b      	ldr	r3, [r3, #8]
   807b2:	2b03      	cmp	r3, #3
   807b4:	d809      	bhi.n	807ca <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   807b6:	68bb      	ldr	r3, [r7, #8]
   807b8:	681b      	ldr	r3, [r3, #0]
   807ba:	687a      	ldr	r2, [r7, #4]
   807bc:	4619      	mov	r1, r3
   807be:	68f8      	ldr	r0, [r7, #12]
   807c0:	4b36      	ldr	r3, [pc, #216]	; (8089c <usart_init_spi_master+0x10c>)
   807c2:	4798      	blx	r3
   807c4:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   807c6:	2b00      	cmp	r3, #0
   807c8:	d001      	beq.n	807ce <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   807ca:	2301      	movs	r3, #1
   807cc:	e05d      	b.n	8088a <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   807ce:	68bb      	ldr	r3, [r7, #8]
   807d0:	685a      	ldr	r2, [r3, #4]
   807d2:	4b31      	ldr	r3, [pc, #196]	; (80898 <usart_init_spi_master+0x108>)
   807d4:	681b      	ldr	r3, [r3, #0]
   807d6:	4313      	orrs	r3, r2
   807d8:	4a2f      	ldr	r2, [pc, #188]	; (80898 <usart_init_spi_master+0x108>)
   807da:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   807dc:	68bb      	ldr	r3, [r7, #8]
   807de:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   807e0:	4b2d      	ldr	r3, [pc, #180]	; (80898 <usart_init_spi_master+0x108>)
   807e2:	681b      	ldr	r3, [r3, #0]
   807e4:	4313      	orrs	r3, r2
   807e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   807ea:	f043 030e 	orr.w	r3, r3, #14
   807ee:	4a2a      	ldr	r2, [pc, #168]	; (80898 <usart_init_spi_master+0x108>)
   807f0:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   807f2:	68bb      	ldr	r3, [r7, #8]
   807f4:	689b      	ldr	r3, [r3, #8]
   807f6:	2b03      	cmp	r3, #3
   807f8:	d83e      	bhi.n	80878 <usart_init_spi_master+0xe8>
   807fa:	a201      	add	r2, pc, #4	; (adr r2, 80800 <usart_init_spi_master+0x70>)
   807fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80800:	00080811 	.word	0x00080811
   80804:	0008082b 	.word	0x0008082b
   80808:	00080845 	.word	0x00080845
   8080c:	0008085f 	.word	0x0008085f
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   80810:	4b21      	ldr	r3, [pc, #132]	; (80898 <usart_init_spi_master+0x108>)
   80812:	681b      	ldr	r3, [r3, #0]
   80814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80818:	4a1f      	ldr	r2, [pc, #124]	; (80898 <usart_init_spi_master+0x108>)
   8081a:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8081c:	4b1e      	ldr	r3, [pc, #120]	; (80898 <usart_init_spi_master+0x108>)
   8081e:	681b      	ldr	r3, [r3, #0]
   80820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80824:	4a1c      	ldr	r2, [pc, #112]	; (80898 <usart_init_spi_master+0x108>)
   80826:	6013      	str	r3, [r2, #0]
		break;
   80828:	e027      	b.n	8087a <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8082a:	4b1b      	ldr	r3, [pc, #108]	; (80898 <usart_init_spi_master+0x108>)
   8082c:	681b      	ldr	r3, [r3, #0]
   8082e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80832:	4a19      	ldr	r2, [pc, #100]	; (80898 <usart_init_spi_master+0x108>)
   80834:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   80836:	4b18      	ldr	r3, [pc, #96]	; (80898 <usart_init_spi_master+0x108>)
   80838:	681b      	ldr	r3, [r3, #0]
   8083a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8083e:	4a16      	ldr	r2, [pc, #88]	; (80898 <usart_init_spi_master+0x108>)
   80840:	6013      	str	r3, [r2, #0]
		break;
   80842:	e01a      	b.n	8087a <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   80844:	4b14      	ldr	r3, [pc, #80]	; (80898 <usart_init_spi_master+0x108>)
   80846:	681b      	ldr	r3, [r3, #0]
   80848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8084c:	4a12      	ldr	r2, [pc, #72]	; (80898 <usart_init_spi_master+0x108>)
   8084e:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   80850:	4b11      	ldr	r3, [pc, #68]	; (80898 <usart_init_spi_master+0x108>)
   80852:	681b      	ldr	r3, [r3, #0]
   80854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80858:	4a0f      	ldr	r2, [pc, #60]	; (80898 <usart_init_spi_master+0x108>)
   8085a:	6013      	str	r3, [r2, #0]
		break;
   8085c:	e00d      	b.n	8087a <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8085e:	4b0e      	ldr	r3, [pc, #56]	; (80898 <usart_init_spi_master+0x108>)
   80860:	681b      	ldr	r3, [r3, #0]
   80862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80866:	4a0c      	ldr	r2, [pc, #48]	; (80898 <usart_init_spi_master+0x108>)
   80868:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8086a:	4b0b      	ldr	r3, [pc, #44]	; (80898 <usart_init_spi_master+0x108>)
   8086c:	681b      	ldr	r3, [r3, #0]
   8086e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80872:	4a09      	ldr	r2, [pc, #36]	; (80898 <usart_init_spi_master+0x108>)
   80874:	6013      	str	r3, [r2, #0]
		break;
   80876:	e000      	b.n	8087a <usart_init_spi_master+0xea>

	default:
		break;
   80878:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   8087a:	68fb      	ldr	r3, [r7, #12]
   8087c:	685a      	ldr	r2, [r3, #4]
   8087e:	4b06      	ldr	r3, [pc, #24]	; (80898 <usart_init_spi_master+0x108>)
   80880:	681b      	ldr	r3, [r3, #0]
   80882:	431a      	orrs	r2, r3
   80884:	68fb      	ldr	r3, [r7, #12]
   80886:	605a      	str	r2, [r3, #4]

	return 0;
   80888:	2300      	movs	r3, #0
}
   8088a:	4618      	mov	r0, r3
   8088c:	3710      	adds	r7, #16
   8088e:	46bd      	mov	sp, r7
   80890:	bd80      	pop	{r7, pc}
   80892:	bf00      	nop
   80894:	0008073d 	.word	0x0008073d
   80898:	20070b6c 	.word	0x20070b6c
   8089c:	000806fb 	.word	0x000806fb

000808a0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   808a0:	b480      	push	{r7}
   808a2:	b083      	sub	sp, #12
   808a4:	af00      	add	r7, sp, #0
   808a6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   808a8:	687b      	ldr	r3, [r7, #4]
   808aa:	2240      	movs	r2, #64	; 0x40
   808ac:	601a      	str	r2, [r3, #0]
}
   808ae:	bf00      	nop
   808b0:	370c      	adds	r7, #12
   808b2:	46bd      	mov	sp, r7
   808b4:	bc80      	pop	{r7}
   808b6:	4770      	bx	lr

000808b8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   808b8:	b480      	push	{r7}
   808ba:	b083      	sub	sp, #12
   808bc:	af00      	add	r7, sp, #0
   808be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   808c0:	687b      	ldr	r3, [r7, #4]
   808c2:	2280      	movs	r2, #128	; 0x80
   808c4:	601a      	str	r2, [r3, #0]
}
   808c6:	bf00      	nop
   808c8:	370c      	adds	r7, #12
   808ca:	46bd      	mov	sp, r7
   808cc:	bc80      	pop	{r7}
   808ce:	4770      	bx	lr

000808d0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   808d0:	b480      	push	{r7}
   808d2:	b083      	sub	sp, #12
   808d4:	af00      	add	r7, sp, #0
   808d6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   808d8:	687b      	ldr	r3, [r7, #4]
   808da:	2288      	movs	r2, #136	; 0x88
   808dc:	601a      	str	r2, [r3, #0]
}
   808de:	bf00      	nop
   808e0:	370c      	adds	r7, #12
   808e2:	46bd      	mov	sp, r7
   808e4:	bc80      	pop	{r7}
   808e6:	4770      	bx	lr

000808e8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   808e8:	b480      	push	{r7}
   808ea:	b083      	sub	sp, #12
   808ec:	af00      	add	r7, sp, #0
   808ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   808f0:	687b      	ldr	r3, [r7, #4]
   808f2:	2210      	movs	r2, #16
   808f4:	601a      	str	r2, [r3, #0]
}
   808f6:	bf00      	nop
   808f8:	370c      	adds	r7, #12
   808fa:	46bd      	mov	sp, r7
   808fc:	bc80      	pop	{r7}
   808fe:	4770      	bx	lr

00080900 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   80900:	b480      	push	{r7}
   80902:	b083      	sub	sp, #12
   80904:	af00      	add	r7, sp, #0
   80906:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   80908:	687b      	ldr	r3, [r7, #4]
   8090a:	2220      	movs	r2, #32
   8090c:	601a      	str	r2, [r3, #0]
}
   8090e:	bf00      	nop
   80910:	370c      	adds	r7, #12
   80912:	46bd      	mov	sp, r7
   80914:	bc80      	pop	{r7}
   80916:	4770      	bx	lr

00080918 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   80918:	b480      	push	{r7}
   8091a:	b083      	sub	sp, #12
   8091c:	af00      	add	r7, sp, #0
   8091e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80920:	687b      	ldr	r3, [r7, #4]
   80922:	2224      	movs	r2, #36	; 0x24
   80924:	601a      	str	r2, [r3, #0]
}
   80926:	bf00      	nop
   80928:	370c      	adds	r7, #12
   8092a:	46bd      	mov	sp, r7
   8092c:	bc80      	pop	{r7}
   8092e:	4770      	bx	lr

00080930 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   80930:	b480      	push	{r7}
   80932:	b083      	sub	sp, #12
   80934:	af00      	add	r7, sp, #0
   80936:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   80938:	687b      	ldr	r3, [r7, #4]
   8093a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8093e:	601a      	str	r2, [r3, #0]
}
   80940:	bf00      	nop
   80942:	370c      	adds	r7, #12
   80944:	46bd      	mov	sp, r7
   80946:	bc80      	pop	{r7}
   80948:	4770      	bx	lr

0008094a <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   8094a:	b480      	push	{r7}
   8094c:	b083      	sub	sp, #12
   8094e:	af00      	add	r7, sp, #0
   80950:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   80952:	687b      	ldr	r3, [r7, #4]
   80954:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80958:	601a      	str	r2, [r3, #0]
}
   8095a:	bf00      	nop
   8095c:	370c      	adds	r7, #12
   8095e:	46bd      	mov	sp, r7
   80960:	bc80      	pop	{r7}
   80962:	4770      	bx	lr

00080964 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
   80964:	b480      	push	{r7}
   80966:	b083      	sub	sp, #12
   80968:	af00      	add	r7, sp, #0
   8096a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
   8096c:	687b      	ldr	r3, [r7, #4]
   8096e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   80972:	601a      	str	r2, [r3, #0]
}
   80974:	bf00      	nop
   80976:	370c      	adds	r7, #12
   80978:	46bd      	mov	sp, r7
   8097a:	bc80      	pop	{r7}
   8097c:	4770      	bx	lr

0008097e <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   8097e:	b480      	push	{r7}
   80980:	b083      	sub	sp, #12
   80982:	af00      	add	r7, sp, #0
   80984:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   80986:	687b      	ldr	r3, [r7, #4]
   80988:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8098c:	601a      	str	r2, [r3, #0]
}
   8098e:	bf00      	nop
   80990:	370c      	adds	r7, #12
   80992:	46bd      	mov	sp, r7
   80994:	bc80      	pop	{r7}
   80996:	4770      	bx	lr

00080998 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   80998:	b480      	push	{r7}
   8099a:	b083      	sub	sp, #12
   8099c:	af00      	add	r7, sp, #0
   8099e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   809a0:	687b      	ldr	r3, [r7, #4]
   809a2:	4a04      	ldr	r2, [pc, #16]	; (809b4 <usart_disable_writeprotect+0x1c>)
   809a4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   809a8:	bf00      	nop
   809aa:	370c      	adds	r7, #12
   809ac:	46bd      	mov	sp, r7
   809ae:	bc80      	pop	{r7}
   809b0:	4770      	bx	lr
   809b2:	bf00      	nop
   809b4:	55534100 	.word	0x55534100

000809b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   809b8:	b480      	push	{r7}
   809ba:	b083      	sub	sp, #12
   809bc:	af00      	add	r7, sp, #0
   809be:	4603      	mov	r3, r0
   809c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   809c2:	4908      	ldr	r1, [pc, #32]	; (809e4 <NVIC_EnableIRQ+0x2c>)
   809c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   809c8:	095b      	lsrs	r3, r3, #5
   809ca:	79fa      	ldrb	r2, [r7, #7]
   809cc:	f002 021f 	and.w	r2, r2, #31
   809d0:	2001      	movs	r0, #1
   809d2:	fa00 f202 	lsl.w	r2, r0, r2
   809d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   809da:	bf00      	nop
   809dc:	370c      	adds	r7, #12
   809de:	46bd      	mov	sp, r7
   809e0:	bc80      	pop	{r7}
   809e2:	4770      	bx	lr
   809e4:	e000e100 	.word	0xe000e100

000809e8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   809e8:	b480      	push	{r7}
   809ea:	b083      	sub	sp, #12
   809ec:	af00      	add	r7, sp, #0
   809ee:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   809f0:	687b      	ldr	r3, [r7, #4]
   809f2:	2b07      	cmp	r3, #7
   809f4:	d825      	bhi.n	80a42 <osc_get_rate+0x5a>
   809f6:	a201      	add	r2, pc, #4	; (adr r2, 809fc <osc_get_rate+0x14>)
   809f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   809fc:	00080a1d 	.word	0x00080a1d
   80a00:	00080a23 	.word	0x00080a23
   80a04:	00080a29 	.word	0x00080a29
   80a08:	00080a2f 	.word	0x00080a2f
   80a0c:	00080a33 	.word	0x00080a33
   80a10:	00080a37 	.word	0x00080a37
   80a14:	00080a3b 	.word	0x00080a3b
   80a18:	00080a3f 	.word	0x00080a3f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80a1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80a20:	e010      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80a26:	e00d      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80a2c:	e00a      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80a2e:	4b08      	ldr	r3, [pc, #32]	; (80a50 <osc_get_rate+0x68>)
   80a30:	e008      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80a32:	4b08      	ldr	r3, [pc, #32]	; (80a54 <osc_get_rate+0x6c>)
   80a34:	e006      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80a36:	4b08      	ldr	r3, [pc, #32]	; (80a58 <osc_get_rate+0x70>)
   80a38:	e004      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80a3a:	4b07      	ldr	r3, [pc, #28]	; (80a58 <osc_get_rate+0x70>)
   80a3c:	e002      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80a3e:	4b06      	ldr	r3, [pc, #24]	; (80a58 <osc_get_rate+0x70>)
   80a40:	e000      	b.n	80a44 <osc_get_rate+0x5c>
	}

	return 0;
   80a42:	2300      	movs	r3, #0
}
   80a44:	4618      	mov	r0, r3
   80a46:	370c      	adds	r7, #12
   80a48:	46bd      	mov	sp, r7
   80a4a:	bc80      	pop	{r7}
   80a4c:	4770      	bx	lr
   80a4e:	bf00      	nop
   80a50:	003d0900 	.word	0x003d0900
   80a54:	007a1200 	.word	0x007a1200
   80a58:	00b71b00 	.word	0x00b71b00

00080a5c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80a5c:	b580      	push	{r7, lr}
   80a5e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80a60:	2006      	movs	r0, #6
   80a62:	4b04      	ldr	r3, [pc, #16]	; (80a74 <sysclk_get_main_hz+0x18>)
   80a64:	4798      	blx	r3
   80a66:	4602      	mov	r2, r0
   80a68:	4613      	mov	r3, r2
   80a6a:	00db      	lsls	r3, r3, #3
   80a6c:	1a9b      	subs	r3, r3, r2
   80a6e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80a70:	4618      	mov	r0, r3
   80a72:	bd80      	pop	{r7, pc}
   80a74:	000809e9 	.word	0x000809e9

00080a78 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   80a78:	b580      	push	{r7, lr}
   80a7a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80a7c:	4b02      	ldr	r3, [pc, #8]	; (80a88 <sysclk_get_peripheral_hz+0x10>)
   80a7e:	4798      	blx	r3
   80a80:	4603      	mov	r3, r0
   80a82:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80a84:	4618      	mov	r0, r3
   80a86:	bd80      	pop	{r7, pc}
   80a88:	00080a5d 	.word	0x00080a5d

00080a8c <spi_init>:
sensor_to_motor_t stm;

uint8_t sens_buf[sizeof(stm)];

void spi_init(void)
{
   80a8c:	b580      	push	{r7, lr}
   80a8e:	af00      	add	r7, sp, #0
    configure_dmac();
   80a90:	4b02      	ldr	r3, [pc, #8]	; (80a9c <spi_init+0x10>)
   80a92:	4798      	blx	r3
    spi_master_initialize();
   80a94:	4b02      	ldr	r3, [pc, #8]	; (80aa0 <spi_init+0x14>)
   80a96:	4798      	blx	r3
}
   80a98:	bf00      	nop
   80a9a:	bd80      	pop	{r7, pc}
   80a9c:	00080bb9 	.word	0x00080bb9
   80aa0:	00080aa5 	.word	0x00080aa5

00080aa4 <spi_master_initialize>:

void spi_master_initialize(void)
{
   80aa4:	b590      	push	{r4, r7, lr}
   80aa6:	b085      	sub	sp, #20
   80aa8:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   80aaa:	2101      	movs	r1, #1
   80aac:	4810      	ldr	r0, [pc, #64]	; (80af0 <spi_master_initialize+0x4c>)
   80aae:	4b11      	ldr	r3, [pc, #68]	; (80af4 <spi_master_initialize+0x50>)
   80ab0:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   80ab2:	2100      	movs	r1, #0
   80ab4:	480e      	ldr	r0, [pc, #56]	; (80af0 <spi_master_initialize+0x4c>)
   80ab6:	4b0f      	ldr	r3, [pc, #60]	; (80af4 <spi_master_initialize+0x50>)
   80ab8:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   80aba:	2012      	movs	r0, #18
   80abc:	4b0e      	ldr	r3, [pc, #56]	; (80af8 <spi_master_initialize+0x54>)
   80abe:	4798      	blx	r3
    usart_spi_disable(USART1);
   80ac0:	480e      	ldr	r0, [pc, #56]	; (80afc <spi_master_initialize+0x58>)
   80ac2:	4b0f      	ldr	r3, [pc, #60]	; (80b00 <spi_master_initialize+0x5c>)
   80ac4:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   80ac6:	4b0f      	ldr	r3, [pc, #60]	; (80b04 <spi_master_initialize+0x60>)
   80ac8:	463c      	mov	r4, r7
   80aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   80acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   80ad0:	4b0d      	ldr	r3, [pc, #52]	; (80b08 <spi_master_initialize+0x64>)
   80ad2:	4798      	blx	r3
   80ad4:	4602      	mov	r2, r0
   80ad6:	463b      	mov	r3, r7
   80ad8:	4619      	mov	r1, r3
   80ada:	4808      	ldr	r0, [pc, #32]	; (80afc <spi_master_initialize+0x58>)
   80adc:	4b0b      	ldr	r3, [pc, #44]	; (80b0c <spi_master_initialize+0x68>)
   80ade:	4798      	blx	r3
    usart_spi_enable(USART1);
   80ae0:	4806      	ldr	r0, [pc, #24]	; (80afc <spi_master_initialize+0x58>)
   80ae2:	4b0b      	ldr	r3, [pc, #44]	; (80b10 <spi_master_initialize+0x6c>)
   80ae4:	4798      	blx	r3
}
   80ae6:	bf00      	nop
   80ae8:	3714      	adds	r7, #20
   80aea:	46bd      	mov	sp, r7
   80aec:	bd90      	pop	{r4, r7, pc}
   80aee:	bf00      	nop
   80af0:	400c4000 	.word	0x400c4000
   80af4:	000834b7 	.word	0x000834b7
   80af8:	00083875 	.word	0x00083875
   80afc:	4009c000 	.word	0x4009c000
   80b00:	00080185 	.word	0x00080185
   80b04:	00089508 	.word	0x00089508
   80b08:	00080a79 	.word	0x00080a79
   80b0c:	00080791 	.word	0x00080791
   80b10:	00080161 	.word	0x00080161

00080b14 <spi_master_transfer>:

void spi_master_transfer(void *p_buf, uint32_t ul_size)
{
   80b14:	b580      	push	{r7, lr}
   80b16:	b088      	sub	sp, #32
   80b18:	af00      	add	r7, sp, #0
   80b1a:	6078      	str	r0, [r7, #4]
   80b1c:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    usart_spi_force_chip_select(USART1);
   80b1e:	481c      	ldr	r0, [pc, #112]	; (80b90 <spi_master_transfer+0x7c>)
   80b20:	4b1c      	ldr	r3, [pc, #112]	; (80b94 <spi_master_transfer+0x80>)
   80b22:	4798      	blx	r3

    dmac_channel_disable(DMAC, 1);
   80b24:	2101      	movs	r1, #1
   80b26:	481c      	ldr	r0, [pc, #112]	; (80b98 <spi_master_transfer+0x84>)
   80b28:	4b1c      	ldr	r3, [pc, #112]	; (80b9c <spi_master_transfer+0x88>)
   80b2a:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   80b2c:	687b      	ldr	r3, [r7, #4]
   80b2e:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & USART1->US_THR;
   80b30:	4b1b      	ldr	r3, [pc, #108]	; (80ba0 <spi_master_transfer+0x8c>)
   80b32:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80b34:	683b      	ldr	r3, [r7, #0]
   80b36:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80b38:	4b1a      	ldr	r3, [pc, #104]	; (80ba4 <spi_master_transfer+0x90>)
   80b3a:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80b3c:	2300      	movs	r3, #0
   80b3e:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   80b40:	f107 030c 	add.w	r3, r7, #12
   80b44:	461a      	mov	r2, r3
   80b46:	2101      	movs	r1, #1
   80b48:	4813      	ldr	r0, [pc, #76]	; (80b98 <spi_master_transfer+0x84>)
   80b4a:	4b17      	ldr	r3, [pc, #92]	; (80ba8 <spi_master_transfer+0x94>)
   80b4c:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   80b4e:	2101      	movs	r1, #1
   80b50:	4811      	ldr	r0, [pc, #68]	; (80b98 <spi_master_transfer+0x84>)
   80b52:	4b16      	ldr	r3, [pc, #88]	; (80bac <spi_master_transfer+0x98>)
   80b54:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   80b56:	2100      	movs	r1, #0
   80b58:	480f      	ldr	r0, [pc, #60]	; (80b98 <spi_master_transfer+0x84>)
   80b5a:	4b10      	ldr	r3, [pc, #64]	; (80b9c <spi_master_transfer+0x88>)
   80b5c:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & USART1->US_RHR;
   80b5e:	4b14      	ldr	r3, [pc, #80]	; (80bb0 <spi_master_transfer+0x9c>)
   80b60:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80b62:	687b      	ldr	r3, [r7, #4]
   80b64:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80b66:	683b      	ldr	r3, [r7, #0]
   80b68:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   80b6a:	4b12      	ldr	r3, [pc, #72]	; (80bb4 <spi_master_transfer+0xa0>)
   80b6c:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80b6e:	2300      	movs	r3, #0
   80b70:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   80b72:	f107 030c 	add.w	r3, r7, #12
   80b76:	461a      	mov	r2, r3
   80b78:	2100      	movs	r1, #0
   80b7a:	4807      	ldr	r0, [pc, #28]	; (80b98 <spi_master_transfer+0x84>)
   80b7c:	4b0a      	ldr	r3, [pc, #40]	; (80ba8 <spi_master_transfer+0x94>)
   80b7e:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   80b80:	2100      	movs	r1, #0
   80b82:	4805      	ldr	r0, [pc, #20]	; (80b98 <spi_master_transfer+0x84>)
   80b84:	4b09      	ldr	r3, [pc, #36]	; (80bac <spi_master_transfer+0x98>)
   80b86:	4798      	blx	r3
}
   80b88:	bf00      	nop
   80b8a:	3720      	adds	r7, #32
   80b8c:	46bd      	mov	sp, r7
   80b8e:	bd80      	pop	{r7, pc}
   80b90:	4009c000 	.word	0x4009c000
   80b94:	00080965 	.word	0x00080965
   80b98:	400c4000 	.word	0x400c4000
   80b9c:	000834b7 	.word	0x000834b7
   80ba0:	4009c01c 	.word	0x4009c01c
   80ba4:	20310000 	.word	0x20310000
   80ba8:	000835d1 	.word	0x000835d1
   80bac:	00083499 	.word	0x00083499
   80bb0:	4009c018 	.word	0x4009c018
   80bb4:	02510000 	.word	0x02510000

00080bb8 <configure_dmac>:

void configure_dmac(void)
{
   80bb8:	b580      	push	{r7, lr}
   80bba:	b082      	sub	sp, #8
   80bbc:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   80bbe:	2027      	movs	r0, #39	; 0x27
   80bc0:	4b18      	ldr	r3, [pc, #96]	; (80c24 <configure_dmac+0x6c>)
   80bc2:	4798      	blx	r3
    dmac_init(DMAC);
   80bc4:	4818      	ldr	r0, [pc, #96]	; (80c28 <configure_dmac+0x70>)
   80bc6:	4b19      	ldr	r3, [pc, #100]	; (80c2c <configure_dmac+0x74>)
   80bc8:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   80bca:	2110      	movs	r1, #16
   80bcc:	4816      	ldr	r0, [pc, #88]	; (80c28 <configure_dmac+0x70>)
   80bce:	4b18      	ldr	r3, [pc, #96]	; (80c30 <configure_dmac+0x78>)
   80bd0:	4798      	blx	r3
    dmac_enable(DMAC);
   80bd2:	4815      	ldr	r0, [pc, #84]	; (80c28 <configure_dmac+0x70>)
   80bd4:	4b17      	ldr	r3, [pc, #92]	; (80c34 <configure_dmac+0x7c>)
   80bd6:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80bd8:	2300      	movs	r3, #0
   80bda:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80bdc:	687b      	ldr	r3, [r7, #4]
   80bde:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80be2:	f043 030e 	orr.w	r3, r3, #14
   80be6:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   80be8:	687a      	ldr	r2, [r7, #4]
   80bea:	2100      	movs	r1, #0
   80bec:	480e      	ldr	r0, [pc, #56]	; (80c28 <configure_dmac+0x70>)
   80bee:	4b12      	ldr	r3, [pc, #72]	; (80c38 <configure_dmac+0x80>)
   80bf0:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80bf2:	2300      	movs	r3, #0
   80bf4:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80bf6:	687b      	ldr	r3, [r7, #4]
   80bf8:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   80bfc:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   80c00:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   80c02:	687a      	ldr	r2, [r7, #4]
   80c04:	2101      	movs	r1, #1
   80c06:	4808      	ldr	r0, [pc, #32]	; (80c28 <configure_dmac+0x70>)
   80c08:	4b0b      	ldr	r3, [pc, #44]	; (80c38 <configure_dmac+0x80>)
   80c0a:	4798      	blx	r3
    ul_cfg = 0;
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
    #endif
    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   80c0c:	2027      	movs	r0, #39	; 0x27
   80c0e:	4b0b      	ldr	r3, [pc, #44]	; (80c3c <configure_dmac+0x84>)
   80c10:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   80c12:	2101      	movs	r1, #1
   80c14:	4804      	ldr	r0, [pc, #16]	; (80c28 <configure_dmac+0x70>)
   80c16:	4b0a      	ldr	r3, [pc, #40]	; (80c40 <configure_dmac+0x88>)
   80c18:	4798      	blx	r3
}
   80c1a:	bf00      	nop
   80c1c:	3708      	adds	r7, #8
   80c1e:	46bd      	mov	sp, r7
   80c20:	bd80      	pop	{r7, pc}
   80c22:	bf00      	nop
   80c24:	00083875 	.word	0x00083875
   80c28:	400c4000 	.word	0x400c4000
   80c2c:	000833f1 	.word	0x000833f1
   80c30:	0008340d 	.word	0x0008340d
   80c34:	00083433 	.word	0x00083433
   80c38:	000835a7 	.word	0x000835a7
   80c3c:	000809b9 	.word	0x000809b9
   80c40:	00083469 	.word	0x00083469

00080c44 <DMAC_Handler>:

void DMAC_Handler(void)
{
   80c44:	b580      	push	{r7, lr}
   80c46:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   80c48:	480b      	ldr	r0, [pc, #44]	; (80c78 <DMAC_Handler+0x34>)
   80c4a:	4b0c      	ldr	r3, [pc, #48]	; (80c7c <DMAC_Handler+0x38>)
   80c4c:	4798      	blx	r3
   80c4e:	4602      	mov	r2, r0
   80c50:	4b0b      	ldr	r3, [pc, #44]	; (80c80 <DMAC_Handler+0x3c>)
   80c52:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   80c54:	4b0a      	ldr	r3, [pc, #40]	; (80c80 <DMAC_Handler+0x3c>)
   80c56:	681b      	ldr	r3, [r3, #0]
   80c58:	f003 0301 	and.w	r3, r3, #1
   80c5c:	2b00      	cmp	r3, #0
   80c5e:	d008      	beq.n	80c72 <DMAC_Handler+0x2e>
    {
        usart_spi_release_chip_select(USART1);
   80c60:	4808      	ldr	r0, [pc, #32]	; (80c84 <DMAC_Handler+0x40>)
   80c62:	4b09      	ldr	r3, [pc, #36]	; (80c88 <DMAC_Handler+0x44>)
   80c64:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   80c66:	4b09      	ldr	r3, [pc, #36]	; (80c8c <DMAC_Handler+0x48>)
   80c68:	4a09      	ldr	r2, [pc, #36]	; (80c90 <DMAC_Handler+0x4c>)
   80c6a:	8811      	ldrh	r1, [r2, #0]
   80c6c:	7892      	ldrb	r2, [r2, #2]
   80c6e:	8019      	strh	r1, [r3, #0]
   80c70:	709a      	strb	r2, [r3, #2]
    }
}
   80c72:	bf00      	nop
   80c74:	bd80      	pop	{r7, pc}
   80c76:	bf00      	nop
   80c78:	400c4000 	.word	0x400c4000
   80c7c:	00083483 	.word	0x00083483
   80c80:	20070b70 	.word	0x20070b70
   80c84:	4009c000 	.word	0x4009c000
   80c88:	0008097f 	.word	0x0008097f
   80c8c:	20070e10 	.word	0x20070e10
   80c90:	20070e08 	.word	0x20070e08

00080c94 <NVIC_EnableIRQ>:
{
   80c94:	b480      	push	{r7}
   80c96:	b083      	sub	sp, #12
   80c98:	af00      	add	r7, sp, #0
   80c9a:	4603      	mov	r3, r0
   80c9c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80c9e:	4908      	ldr	r1, [pc, #32]	; (80cc0 <NVIC_EnableIRQ+0x2c>)
   80ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80ca4:	095b      	lsrs	r3, r3, #5
   80ca6:	79fa      	ldrb	r2, [r7, #7]
   80ca8:	f002 021f 	and.w	r2, r2, #31
   80cac:	2001      	movs	r0, #1
   80cae:	fa00 f202 	lsl.w	r2, r0, r2
   80cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80cb6:	bf00      	nop
   80cb8:	370c      	adds	r7, #12
   80cba:	46bd      	mov	sp, r7
   80cbc:	bc80      	pop	{r7}
   80cbe:	4770      	bx	lr
   80cc0:	e000e100 	.word	0xe000e100

00080cc4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80cc4:	b480      	push	{r7}
   80cc6:	b083      	sub	sp, #12
   80cc8:	af00      	add	r7, sp, #0
   80cca:	4603      	mov	r3, r0
   80ccc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80cce:	4909      	ldr	r1, [pc, #36]	; (80cf4 <NVIC_ClearPendingIRQ+0x30>)
   80cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80cd4:	095b      	lsrs	r3, r3, #5
   80cd6:	79fa      	ldrb	r2, [r7, #7]
   80cd8:	f002 021f 	and.w	r2, r2, #31
   80cdc:	2001      	movs	r0, #1
   80cde:	fa00 f202 	lsl.w	r2, r0, r2
   80ce2:	3360      	adds	r3, #96	; 0x60
   80ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80ce8:	bf00      	nop
   80cea:	370c      	adds	r7, #12
   80cec:	46bd      	mov	sp, r7
   80cee:	bc80      	pop	{r7}
   80cf0:	4770      	bx	lr
   80cf2:	bf00      	nop
   80cf4:	e000e100 	.word	0xe000e100

00080cf8 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80cf8:	b480      	push	{r7}
   80cfa:	b083      	sub	sp, #12
   80cfc:	af00      	add	r7, sp, #0
   80cfe:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80d00:	687b      	ldr	r3, [r7, #4]
   80d02:	2208      	movs	r2, #8
   80d04:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80d06:	687b      	ldr	r3, [r7, #4]
   80d08:	2220      	movs	r2, #32
   80d0a:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80d0c:	687b      	ldr	r3, [r7, #4]
   80d0e:	2204      	movs	r2, #4
   80d10:	601a      	str	r2, [r3, #0]
}
   80d12:	bf00      	nop
   80d14:	370c      	adds	r7, #12
   80d16:	46bd      	mov	sp, r7
   80d18:	bc80      	pop	{r7}
   80d1a:	4770      	bx	lr

00080d1c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80d1c:	b580      	push	{r7, lr}
   80d1e:	b084      	sub	sp, #16
   80d20:	af00      	add	r7, sp, #0
   80d22:	6078      	str	r0, [r7, #4]
   80d24:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80d26:	2300      	movs	r3, #0
   80d28:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80d2a:	687b      	ldr	r3, [r7, #4]
   80d2c:	f04f 32ff 	mov.w	r2, #4294967295
   80d30:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   80d32:	687b      	ldr	r3, [r7, #4]
   80d34:	6a1b      	ldr	r3, [r3, #32]

	twi_disable_interrupt(p_twi, MASK_ALL_INTERRUPTS);
   80d36:	f04f 31ff 	mov.w	r1, #4294967295
   80d3a:	6878      	ldr	r0, [r7, #4]
   80d3c:	4b14      	ldr	r3, [pc, #80]	; (80d90 <twi_master_init+0x74>)
   80d3e:	4798      	blx	r3

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80d40:	6878      	ldr	r0, [r7, #4]
   80d42:	4b14      	ldr	r3, [pc, #80]	; (80d94 <twi_master_init+0x78>)
   80d44:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80d46:	6878      	ldr	r0, [r7, #4]
   80d48:	4b13      	ldr	r3, [pc, #76]	; (80d98 <twi_master_init+0x7c>)
   80d4a:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80d4c:	683b      	ldr	r3, [r7, #0]
   80d4e:	6859      	ldr	r1, [r3, #4]
   80d50:	683b      	ldr	r3, [r7, #0]
   80d52:	681b      	ldr	r3, [r3, #0]
   80d54:	461a      	mov	r2, r3
   80d56:	6878      	ldr	r0, [r7, #4]
   80d58:	4b10      	ldr	r3, [pc, #64]	; (80d9c <twi_master_init+0x80>)
   80d5a:	4798      	blx	r3
   80d5c:	4603      	mov	r3, r0
   80d5e:	2b01      	cmp	r3, #1
   80d60:	d101      	bne.n	80d66 <twi_master_init+0x4a>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80d62:	2301      	movs	r3, #1
   80d64:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80d66:	683b      	ldr	r3, [r7, #0]
   80d68:	7a5b      	ldrb	r3, [r3, #9]
   80d6a:	2b01      	cmp	r3, #1
   80d6c:	d102      	bne.n	80d74 <twi_master_init+0x58>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80d6e:	687b      	ldr	r3, [r7, #4]
   80d70:	2240      	movs	r2, #64	; 0x40
   80d72:	601a      	str	r2, [r3, #0]
	}
    
    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   80d74:	f44f 7150 	mov.w	r1, #832	; 0x340
   80d78:	6878      	ldr	r0, [r7, #4]
   80d7a:	4b09      	ldr	r3, [pc, #36]	; (80da0 <twi_master_init+0x84>)
   80d7c:	4798      	blx	r3

    twiBusy = false;
   80d7e:	4b09      	ldr	r3, [pc, #36]	; (80da4 <twi_master_init+0x88>)
   80d80:	2200      	movs	r2, #0
   80d82:	701a      	strb	r2, [r3, #0]
    
	return status;
   80d84:	68fb      	ldr	r3, [r7, #12]
}
   80d86:	4618      	mov	r0, r3
   80d88:	3710      	adds	r7, #16
   80d8a:	46bd      	mov	sp, r7
   80d8c:	bd80      	pop	{r7, pc}
   80d8e:	bf00      	nop
   80d90:	000812b7 	.word	0x000812b7
   80d94:	00081319 	.word	0x00081319
   80d98:	00080cf9 	.word	0x00080cf9
   80d9c:	00080da9 	.word	0x00080da9
   80da0:	0008129d 	.word	0x0008129d
   80da4:	20070d94 	.word	0x20070d94

00080da8 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   80da8:	b480      	push	{r7}
   80daa:	b089      	sub	sp, #36	; 0x24
   80dac:	af00      	add	r7, sp, #0
   80dae:	60f8      	str	r0, [r7, #12]
   80db0:	60b9      	str	r1, [r7, #8]
   80db2:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80db4:	2300      	movs	r3, #0
   80db6:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80db8:	68bb      	ldr	r3, [r7, #8]
   80dba:	4a34      	ldr	r2, [pc, #208]	; (80e8c <twi_set_speed+0xe4>)
   80dbc:	4293      	cmp	r3, r2
   80dbe:	d901      	bls.n	80dc4 <twi_set_speed+0x1c>
		return FAIL;
   80dc0:	2301      	movs	r3, #1
   80dc2:	e05d      	b.n	80e80 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   80dc4:	68bb      	ldr	r3, [r7, #8]
   80dc6:	4a32      	ldr	r2, [pc, #200]	; (80e90 <twi_set_speed+0xe8>)
   80dc8:	4293      	cmp	r3, r2
   80dca:	d937      	bls.n	80e3c <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80dcc:	687b      	ldr	r3, [r7, #4]
   80dce:	4a31      	ldr	r2, [pc, #196]	; (80e94 <twi_set_speed+0xec>)
   80dd0:	fba2 2303 	umull	r2, r3, r2, r3
   80dd4:	0b9b      	lsrs	r3, r3, #14
   80dd6:	3b04      	subs	r3, #4
   80dd8:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80dda:	68ba      	ldr	r2, [r7, #8]
   80ddc:	4b2e      	ldr	r3, [pc, #184]	; (80e98 <twi_set_speed+0xf0>)
   80dde:	4413      	add	r3, r2
   80de0:	009b      	lsls	r3, r3, #2
   80de2:	687a      	ldr	r2, [r7, #4]
   80de4:	fbb2 f3f3 	udiv	r3, r2, r3
   80de8:	3b04      	subs	r3, #4
   80dea:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80dec:	e005      	b.n	80dfa <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   80dee:	69fb      	ldr	r3, [r7, #28]
   80df0:	3301      	adds	r3, #1
   80df2:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   80df4:	697b      	ldr	r3, [r7, #20]
   80df6:	085b      	lsrs	r3, r3, #1
   80df8:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80dfa:	697b      	ldr	r3, [r7, #20]
   80dfc:	2bff      	cmp	r3, #255	; 0xff
   80dfe:	d909      	bls.n	80e14 <twi_set_speed+0x6c>
   80e00:	69fb      	ldr	r3, [r7, #28]
   80e02:	2b06      	cmp	r3, #6
   80e04:	d9f3      	bls.n	80dee <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e06:	e005      	b.n	80e14 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   80e08:	69fb      	ldr	r3, [r7, #28]
   80e0a:	3301      	adds	r3, #1
   80e0c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   80e0e:	693b      	ldr	r3, [r7, #16]
   80e10:	085b      	lsrs	r3, r3, #1
   80e12:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e14:	693b      	ldr	r3, [r7, #16]
   80e16:	2bff      	cmp	r3, #255	; 0xff
   80e18:	d902      	bls.n	80e20 <twi_set_speed+0x78>
   80e1a:	69fb      	ldr	r3, [r7, #28]
   80e1c:	2b06      	cmp	r3, #6
   80e1e:	d9f3      	bls.n	80e08 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80e20:	697b      	ldr	r3, [r7, #20]
   80e22:	b2da      	uxtb	r2, r3
   80e24:	693b      	ldr	r3, [r7, #16]
   80e26:	021b      	lsls	r3, r3, #8
   80e28:	b29b      	uxth	r3, r3
   80e2a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   80e2c:	69fb      	ldr	r3, [r7, #28]
   80e2e:	041b      	lsls	r3, r3, #16
   80e30:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80e34:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80e36:	68fb      	ldr	r3, [r7, #12]
   80e38:	611a      	str	r2, [r3, #16]
   80e3a:	e020      	b.n	80e7e <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80e3c:	68bb      	ldr	r3, [r7, #8]
   80e3e:	005b      	lsls	r3, r3, #1
   80e40:	687a      	ldr	r2, [r7, #4]
   80e42:	fbb2 f3f3 	udiv	r3, r2, r3
   80e46:	3b04      	subs	r3, #4
   80e48:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e4a:	e005      	b.n	80e58 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   80e4c:	69fb      	ldr	r3, [r7, #28]
   80e4e:	3301      	adds	r3, #1
   80e50:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   80e52:	69bb      	ldr	r3, [r7, #24]
   80e54:	085b      	lsrs	r3, r3, #1
   80e56:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e58:	69bb      	ldr	r3, [r7, #24]
   80e5a:	2bff      	cmp	r3, #255	; 0xff
   80e5c:	d902      	bls.n	80e64 <twi_set_speed+0xbc>
   80e5e:	69fb      	ldr	r3, [r7, #28]
   80e60:	2b06      	cmp	r3, #6
   80e62:	d9f3      	bls.n	80e4c <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80e64:	69bb      	ldr	r3, [r7, #24]
   80e66:	b2da      	uxtb	r2, r3
   80e68:	69bb      	ldr	r3, [r7, #24]
   80e6a:	021b      	lsls	r3, r3, #8
   80e6c:	b29b      	uxth	r3, r3
   80e6e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   80e70:	69fb      	ldr	r3, [r7, #28]
   80e72:	041b      	lsls	r3, r3, #16
   80e74:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80e78:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80e7a:	68fb      	ldr	r3, [r7, #12]
   80e7c:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   80e7e:	2300      	movs	r3, #0
}
   80e80:	4618      	mov	r0, r3
   80e82:	3724      	adds	r7, #36	; 0x24
   80e84:	46bd      	mov	sp, r7
   80e86:	bc80      	pop	{r7}
   80e88:	4770      	bx	lr
   80e8a:	bf00      	nop
   80e8c:	00061a80 	.word	0x00061a80
   80e90:	0005dc00 	.word	0x0005dc00
   80e94:	057619f1 	.word	0x057619f1
   80e98:	3ffd1200 	.word	0x3ffd1200

00080e9c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   80e9c:	b480      	push	{r7}
   80e9e:	b085      	sub	sp, #20
   80ea0:	af00      	add	r7, sp, #0
   80ea2:	6078      	str	r0, [r7, #4]
   80ea4:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   80ea6:	683b      	ldr	r3, [r7, #0]
   80ea8:	2b00      	cmp	r3, #0
   80eaa:	d101      	bne.n	80eb0 <twi_mk_addr+0x14>
		return 0;
   80eac:	2300      	movs	r3, #0
   80eae:	e01d      	b.n	80eec <twi_mk_addr+0x50>

	val = addr[0];
   80eb0:	687b      	ldr	r3, [r7, #4]
   80eb2:	781b      	ldrb	r3, [r3, #0]
   80eb4:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   80eb6:	683b      	ldr	r3, [r7, #0]
   80eb8:	2b01      	cmp	r3, #1
   80eba:	dd09      	ble.n	80ed0 <twi_mk_addr+0x34>
		val <<= 8;
   80ebc:	68fb      	ldr	r3, [r7, #12]
   80ebe:	021b      	lsls	r3, r3, #8
   80ec0:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   80ec2:	687b      	ldr	r3, [r7, #4]
   80ec4:	3301      	adds	r3, #1
   80ec6:	781b      	ldrb	r3, [r3, #0]
   80ec8:	461a      	mov	r2, r3
   80eca:	68fb      	ldr	r3, [r7, #12]
   80ecc:	4313      	orrs	r3, r2
   80ece:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   80ed0:	683b      	ldr	r3, [r7, #0]
   80ed2:	2b02      	cmp	r3, #2
   80ed4:	dd09      	ble.n	80eea <twi_mk_addr+0x4e>
		val <<= 8;
   80ed6:	68fb      	ldr	r3, [r7, #12]
   80ed8:	021b      	lsls	r3, r3, #8
   80eda:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   80edc:	687b      	ldr	r3, [r7, #4]
   80ede:	3302      	adds	r3, #2
   80ee0:	781b      	ldrb	r3, [r3, #0]
   80ee2:	461a      	mov	r2, r3
   80ee4:	68fb      	ldr	r3, [r7, #12]
   80ee6:	4313      	orrs	r3, r2
   80ee8:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80eea:	68fb      	ldr	r3, [r7, #12]
}
   80eec:	4618      	mov	r0, r3
   80eee:	3714      	adds	r7, #20
   80ef0:	46bd      	mov	sp, r7
   80ef2:	bc80      	pop	{r7}
   80ef4:	4770      	bx	lr
	...

00080ef8 <twi_is_busy>:
	}
}
#endif
#if 1
uint8_t twi_is_busy(void)
{
   80ef8:	b480      	push	{r7}
   80efa:	af00      	add	r7, sp, #0
    return twiBusy;
   80efc:	4b02      	ldr	r3, [pc, #8]	; (80f08 <twi_is_busy+0x10>)
   80efe:	781b      	ldrb	r3, [r3, #0]
}
   80f00:	4618      	mov	r0, r3
   80f02:	46bd      	mov	sp, r7
   80f04:	bc80      	pop	{r7}
   80f06:	4770      	bx	lr
   80f08:	20070d94 	.word	0x20070d94

00080f0c <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   80f0c:	b480      	push	{r7}
   80f0e:	af00      	add	r7, sp, #0
    return &txPacket;
   80f10:	4b02      	ldr	r3, [pc, #8]	; (80f1c <twi_get_tx_packet+0x10>)
}
   80f12:	4618      	mov	r0, r3
   80f14:	46bd      	mov	sp, r7
   80f16:	bc80      	pop	{r7}
   80f18:	4770      	bx	lr
   80f1a:	bf00      	nop
   80f1c:	20070b74 	.word	0x20070b74

00080f20 <twi_get_rx_packet>:

twi_packet_t *twi_get_rx_packet(void)
{
   80f20:	b480      	push	{r7}
   80f22:	af00      	add	r7, sp, #0
    return &rxPacket;
   80f24:	4b02      	ldr	r3, [pc, #8]	; (80f30 <twi_get_rx_packet+0x10>)
}
   80f26:	4618      	mov	r0, r3
   80f28:	46bd      	mov	sp, r7
   80f2a:	bc80      	pop	{r7}
   80f2c:	4770      	bx	lr
   80f2e:	bf00      	nop
   80f30:	20070c84 	.word	0x20070c84

00080f34 <twi_pdc_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_pdc_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80f34:	b580      	push	{r7, lr}
   80f36:	b084      	sub	sp, #16
   80f38:	af00      	add	r7, sp, #0
   80f3a:	6078      	str	r0, [r7, #4]
   80f3c:	6039      	str	r1, [r7, #0]
    pdc_packet_t rxPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   80f3e:	683b      	ldr	r3, [r7, #0]
   80f40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80f44:	2b00      	cmp	r3, #0
   80f46:	d101      	bne.n	80f4c <twi_pdc_master_read+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   80f48:	2301      	movs	r3, #1
   80f4a:	e047      	b.n	80fdc <twi_pdc_master_read+0xa8>
    }
    
    twiBusy = true;
   80f4c:	4b25      	ldr	r3, [pc, #148]	; (80fe4 <twi_pdc_master_read+0xb0>)
   80f4e:	2201      	movs	r2, #1
   80f50:	701a      	strb	r2, [r3, #0]

    // Ensure Rx is already empty
    twi_read_byte(TWI0);
   80f52:	4825      	ldr	r0, [pc, #148]	; (80fe8 <twi_pdc_master_read+0xb4>)
   80f54:	4b25      	ldr	r3, [pc, #148]	; (80fec <twi_pdc_master_read+0xb8>)
   80f56:	4798      	blx	r3

    // Set read mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   80f58:	687b      	ldr	r3, [r7, #4]
   80f5a:	2200      	movs	r2, #0
   80f5c:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   80f5e:	683b      	ldr	r3, [r7, #0]
   80f60:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   80f64:	041b      	lsls	r3, r3, #16
   80f66:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   80f6a:	683b      	ldr	r3, [r7, #0]
   80f6c:	685b      	ldr	r3, [r3, #4]
   80f6e:	021b      	lsls	r3, r3, #8
   80f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
   80f74:	4313      	orrs	r3, r2
   80f76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   80f7a:	687b      	ldr	r3, [r7, #4]
   80f7c:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   80f7e:	687b      	ldr	r3, [r7, #4]
   80f80:	2200      	movs	r2, #0
   80f82:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80f84:	683a      	ldr	r2, [r7, #0]
   80f86:	683b      	ldr	r3, [r7, #0]
   80f88:	685b      	ldr	r3, [r3, #4]
   80f8a:	4619      	mov	r1, r3
   80f8c:	4610      	mov	r0, r2
   80f8e:	4b18      	ldr	r3, [pc, #96]	; (80ff0 <twi_pdc_master_read+0xbc>)
   80f90:	4798      	blx	r3
   80f92:	4602      	mov	r2, r0
   80f94:	687b      	ldr	r3, [r7, #4]
   80f96:	60da      	str	r2, [r3, #12]
        twi_enable_interrupt(TWI0, IER_ERROR_INTERRUPTS);
    }
    else
    {
#endif
        rxPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   80f98:	683b      	ldr	r3, [r7, #0]
   80f9a:	3308      	adds	r3, #8
   80f9c:	60bb      	str	r3, [r7, #8]
        rxPdcPacket.ul_size = p_packet->length - 1;
   80f9e:	683b      	ldr	r3, [r7, #0]
   80fa0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80fa4:	3b01      	subs	r3, #1
   80fa6:	60fb      	str	r3, [r7, #12]
        pdc_rx_init(PDC_TWI0, &rxPdcPacket, NULL);
   80fa8:	f107 0308 	add.w	r3, r7, #8
   80fac:	2200      	movs	r2, #0
   80fae:	4619      	mov	r1, r3
   80fb0:	4810      	ldr	r0, [pc, #64]	; (80ff4 <twi_pdc_master_read+0xc0>)
   80fb2:	4b11      	ldr	r3, [pc, #68]	; (80ff8 <twi_pdc_master_read+0xc4>)
   80fb4:	4798      	blx	r3

        pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_RXTEN);
   80fb6:	2101      	movs	r1, #1
   80fb8:	480e      	ldr	r0, [pc, #56]	; (80ff4 <twi_pdc_master_read+0xc0>)
   80fba:	4b10      	ldr	r3, [pc, #64]	; (80ffc <twi_pdc_master_read+0xc8>)
   80fbc:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_START;
   80fbe:	4b0a      	ldr	r3, [pc, #40]	; (80fe8 <twi_pdc_master_read+0xb4>)
   80fc0:	2201      	movs	r2, #1
   80fc2:	601a      	str	r2, [r3, #0]

        twi_enable_interrupt(p_twi, TWI_IER_ENDRX);
   80fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80fc8:	6878      	ldr	r0, [r7, #4]
   80fca:	4b0d      	ldr	r3, [pc, #52]	; (81000 <twi_pdc_master_read+0xcc>)
   80fcc:	4798      	blx	r3
        NVIC_ClearPendingIRQ(TWI0_IRQn);
   80fce:	2016      	movs	r0, #22
   80fd0:	4b0c      	ldr	r3, [pc, #48]	; (81004 <twi_pdc_master_read+0xd0>)
   80fd2:	4798      	blx	r3
        NVIC_EnableIRQ(TWI0_IRQn);
   80fd4:	2016      	movs	r0, #22
   80fd6:	4b0c      	ldr	r3, [pc, #48]	; (81008 <twi_pdc_master_read+0xd4>)
   80fd8:	4798      	blx	r3
//    }

    return TWI_SUCCESS;
   80fda:	2300      	movs	r3, #0
}
   80fdc:	4618      	mov	r0, r3
   80fde:	3710      	adds	r7, #16
   80fe0:	46bd      	mov	sp, r7
   80fe2:	bd80      	pop	{r7, pc}
   80fe4:	20070d94 	.word	0x20070d94
   80fe8:	4008c000 	.word	0x4008c000
   80fec:	00081301 	.word	0x00081301
   80ff0:	00080e9d 	.word	0x00080e9d
   80ff4:	4008c100 	.word	0x4008c100
   80ff8:	000801eb 	.word	0x000801eb
   80ffc:	0008022d 	.word	0x0008022d
   81000:	0008129d 	.word	0x0008129d
   81004:	00080cc5 	.word	0x00080cc5
   81008:	00080c95 	.word	0x00080c95

0008100c <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   8100c:	b580      	push	{r7, lr}
   8100e:	b084      	sub	sp, #16
   81010:	af00      	add	r7, sp, #0
   81012:	6078      	str	r0, [r7, #4]
   81014:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   81016:	683b      	ldr	r3, [r7, #0]
   81018:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   8101c:	2b00      	cmp	r3, #0
   8101e:	d101      	bne.n	81024 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   81020:	2301      	movs	r3, #1
   81022:	e040      	b.n	810a6 <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   81024:	4b22      	ldr	r3, [pc, #136]	; (810b0 <twi_pdc_master_write+0xa4>)
   81026:	2201      	movs	r2, #1
   81028:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   8102a:	683b      	ldr	r3, [r7, #0]
   8102c:	3308      	adds	r3, #8
   8102e:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   81030:	683b      	ldr	r3, [r7, #0]
   81032:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81036:	3b01      	subs	r3, #1
   81038:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   8103a:	f107 0308 	add.w	r3, r7, #8
   8103e:	2200      	movs	r2, #0
   81040:	4619      	mov	r1, r3
   81042:	481c      	ldr	r0, [pc, #112]	; (810b4 <twi_pdc_master_write+0xa8>)
   81044:	4b1c      	ldr	r3, [pc, #112]	; (810b8 <twi_pdc_master_write+0xac>)
   81046:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   81048:	687b      	ldr	r3, [r7, #4]
   8104a:	2200      	movs	r2, #0
   8104c:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   8104e:	683b      	ldr	r3, [r7, #0]
   81050:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   81054:	041b      	lsls	r3, r3, #16
   81056:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   8105a:	683b      	ldr	r3, [r7, #0]
   8105c:	685b      	ldr	r3, [r3, #4]
   8105e:	021b      	lsls	r3, r3, #8
   81060:	f403 7340 	and.w	r3, r3, #768	; 0x300
   81064:	431a      	orrs	r2, r3
   81066:	687b      	ldr	r3, [r7, #4]
   81068:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   8106a:	687b      	ldr	r3, [r7, #4]
   8106c:	2200      	movs	r2, #0
   8106e:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   81070:	683a      	ldr	r2, [r7, #0]
   81072:	683b      	ldr	r3, [r7, #0]
   81074:	685b      	ldr	r3, [r3, #4]
   81076:	4619      	mov	r1, r3
   81078:	4610      	mov	r0, r2
   8107a:	4b10      	ldr	r3, [pc, #64]	; (810bc <twi_pdc_master_write+0xb0>)
   8107c:	4798      	blx	r3
   8107e:	4602      	mov	r2, r0
   81080:	687b      	ldr	r3, [r7, #4]
   81082:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   81084:	f44f 7180 	mov.w	r1, #256	; 0x100
   81088:	480a      	ldr	r0, [pc, #40]	; (810b4 <twi_pdc_master_write+0xa8>)
   8108a:	4b0d      	ldr	r3, [pc, #52]	; (810c0 <twi_pdc_master_write+0xb4>)
   8108c:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   8108e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81092:	6878      	ldr	r0, [r7, #4]
   81094:	4b0b      	ldr	r3, [pc, #44]	; (810c4 <twi_pdc_master_write+0xb8>)
   81096:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   81098:	2016      	movs	r0, #22
   8109a:	4b0b      	ldr	r3, [pc, #44]	; (810c8 <twi_pdc_master_write+0xbc>)
   8109c:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   8109e:	2016      	movs	r0, #22
   810a0:	4b0a      	ldr	r3, [pc, #40]	; (810cc <twi_pdc_master_write+0xc0>)
   810a2:	4798      	blx	r3

    return TWI_SUCCESS;
   810a4:	2300      	movs	r3, #0
}
   810a6:	4618      	mov	r0, r3
   810a8:	3710      	adds	r7, #16
   810aa:	46bd      	mov	sp, r7
   810ac:	bd80      	pop	{r7, pc}
   810ae:	bf00      	nop
   810b0:	20070d94 	.word	0x20070d94
   810b4:	4008c100 	.word	0x4008c100
   810b8:	000801a9 	.word	0x000801a9
   810bc:	00080e9d 	.word	0x00080e9d
   810c0:	0008022d 	.word	0x0008022d
   810c4:	0008129d 	.word	0x0008129d
   810c8:	00080cc5 	.word	0x00080cc5
   810cc:	00080c95 	.word	0x00080c95

000810d0 <twi_set_lcd_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_lcd_tx_callback(void (*callback)(void))
{
   810d0:	b480      	push	{r7}
   810d2:	b083      	sub	sp, #12
   810d4:	af00      	add	r7, sp, #0
   810d6:	6078      	str	r0, [r7, #4]
    lcdTxCallback = callback;
   810d8:	4a03      	ldr	r2, [pc, #12]	; (810e8 <twi_set_lcd_tx_callback+0x18>)
   810da:	687b      	ldr	r3, [r7, #4]
   810dc:	6013      	str	r3, [r2, #0]
}
   810de:	bf00      	nop
   810e0:	370c      	adds	r7, #12
   810e2:	46bd      	mov	sp, r7
   810e4:	bc80      	pop	{r7}
   810e6:	4770      	bx	lr
   810e8:	20070d98 	.word	0x20070d98

000810ec <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   810ec:	b590      	push	{r4, r7, lr}
   810ee:	b083      	sub	sp, #12
   810f0:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   810f2:	485d      	ldr	r0, [pc, #372]	; (81268 <TWI0_Handler+0x17c>)
   810f4:	4b5d      	ldr	r3, [pc, #372]	; (8126c <TWI0_Handler+0x180>)
   810f6:	4798      	blx	r3
   810f8:	4604      	mov	r4, r0
   810fa:	485b      	ldr	r0, [pc, #364]	; (81268 <TWI0_Handler+0x17c>)
   810fc:	4b5c      	ldr	r3, [pc, #368]	; (81270 <TWI0_Handler+0x184>)
   810fe:	4798      	blx	r3
   81100:	4603      	mov	r3, r0
   81102:	4023      	ands	r3, r4
   81104:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   81106:	687b      	ldr	r3, [r7, #4]
   81108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   8110c:	2b00      	cmp	r3, #0
   8110e:	d014      	beq.n	8113a <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   81110:	f44f 7100 	mov.w	r1, #512	; 0x200
   81114:	4857      	ldr	r0, [pc, #348]	; (81274 <TWI0_Handler+0x188>)
   81116:	4b58      	ldr	r3, [pc, #352]	; (81278 <TWI0_Handler+0x18c>)
   81118:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   8111a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8111e:	4852      	ldr	r0, [pc, #328]	; (81268 <TWI0_Handler+0x17c>)
   81120:	4b56      	ldr	r3, [pc, #344]	; (8127c <TWI0_Handler+0x190>)
   81122:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   81124:	2104      	movs	r1, #4
   81126:	4850      	ldr	r0, [pc, #320]	; (81268 <TWI0_Handler+0x17c>)
   81128:	4b55      	ldr	r3, [pc, #340]	; (81280 <TWI0_Handler+0x194>)
   8112a:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   8112c:	484e      	ldr	r0, [pc, #312]	; (81268 <TWI0_Handler+0x17c>)
   8112e:	4b4f      	ldr	r3, [pc, #316]	; (8126c <TWI0_Handler+0x180>)
   81130:	4798      	blx	r3
   81132:	4602      	mov	r2, r0
   81134:	687b      	ldr	r3, [r7, #4]
   81136:	4313      	orrs	r3, r2
   81138:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   8113a:	687b      	ldr	r3, [r7, #4]
   8113c:	f003 0304 	and.w	r3, r3, #4
   81140:	2b00      	cmp	r3, #0
   81142:	d01a      	beq.n	8117a <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   81144:	2104      	movs	r1, #4
   81146:	4848      	ldr	r0, [pc, #288]	; (81268 <TWI0_Handler+0x17c>)
   81148:	4b4c      	ldr	r3, [pc, #304]	; (8127c <TWI0_Handler+0x190>)
   8114a:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   8114c:	4b46      	ldr	r3, [pc, #280]	; (81268 <TWI0_Handler+0x17c>)
   8114e:	2202      	movs	r2, #2
   81150:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   81152:	4a45      	ldr	r2, [pc, #276]	; (81268 <TWI0_Handler+0x17c>)
   81154:	4b4b      	ldr	r3, [pc, #300]	; (81284 <TWI0_Handler+0x198>)
   81156:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   8115a:	3b01      	subs	r3, #1
   8115c:	4949      	ldr	r1, [pc, #292]	; (81284 <TWI0_Handler+0x198>)
   8115e:	440b      	add	r3, r1
   81160:	7a1b      	ldrb	r3, [r3, #8]
   81162:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   81164:	2101      	movs	r1, #1
   81166:	4840      	ldr	r0, [pc, #256]	; (81268 <TWI0_Handler+0x17c>)
   81168:	4b45      	ldr	r3, [pc, #276]	; (81280 <TWI0_Handler+0x194>)
   8116a:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   8116c:	483e      	ldr	r0, [pc, #248]	; (81268 <TWI0_Handler+0x17c>)
   8116e:	4b3f      	ldr	r3, [pc, #252]	; (8126c <TWI0_Handler+0x180>)
   81170:	4798      	blx	r3
   81172:	4602      	mov	r2, r0
   81174:	687b      	ldr	r3, [r7, #4]
   81176:	4313      	orrs	r3, r2
   81178:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   8117a:	687b      	ldr	r3, [r7, #4]
   8117c:	f003 0301 	and.w	r3, r3, #1
   81180:	2b00      	cmp	r3, #0
   81182:	d014      	beq.n	811ae <TWI0_Handler+0xc2>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   81184:	2101      	movs	r1, #1
   81186:	4838      	ldr	r0, [pc, #224]	; (81268 <TWI0_Handler+0x17c>)
   81188:	4b3c      	ldr	r3, [pc, #240]	; (8127c <TWI0_Handler+0x190>)
   8118a:	4798      	blx	r3

        // If defined, call the connected function.
        if(compassTxCallback != NULL)
   8118c:	4b3e      	ldr	r3, [pc, #248]	; (81288 <TWI0_Handler+0x19c>)
   8118e:	681b      	ldr	r3, [r3, #0]
   81190:	2b00      	cmp	r3, #0
   81192:	d002      	beq.n	8119a <TWI0_Handler+0xae>
        {
            compassTxCallback();
   81194:	4b3c      	ldr	r3, [pc, #240]	; (81288 <TWI0_Handler+0x19c>)
   81196:	681b      	ldr	r3, [r3, #0]
   81198:	4798      	blx	r3
        }

        // If defined, call the connected function.
        if(lcdTxCallback != NULL)
   8119a:	4b3c      	ldr	r3, [pc, #240]	; (8128c <TWI0_Handler+0x1a0>)
   8119c:	681b      	ldr	r3, [r3, #0]
   8119e:	2b00      	cmp	r3, #0
   811a0:	d002      	beq.n	811a8 <TWI0_Handler+0xbc>
        {
          lcdTxCallback();
   811a2:	4b3a      	ldr	r3, [pc, #232]	; (8128c <TWI0_Handler+0x1a0>)
   811a4:	681b      	ldr	r3, [r3, #0]
   811a6:	4798      	blx	r3
        }

        twiBusy = false;
   811a8:	4b39      	ldr	r3, [pc, #228]	; (81290 <TWI0_Handler+0x1a4>)
   811aa:	2200      	movs	r2, #0
   811ac:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   811ae:	687b      	ldr	r3, [r7, #4]
   811b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   811b4:	2b00      	cmp	r3, #0
   811b6:	d016      	beq.n	811e6 <TWI0_Handler+0xfa>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   811b8:	2102      	movs	r1, #2
   811ba:	482e      	ldr	r0, [pc, #184]	; (81274 <TWI0_Handler+0x188>)
   811bc:	4b2e      	ldr	r3, [pc, #184]	; (81278 <TWI0_Handler+0x18c>)
   811be:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   811c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   811c4:	4828      	ldr	r0, [pc, #160]	; (81268 <TWI0_Handler+0x17c>)
   811c6:	4b2d      	ldr	r3, [pc, #180]	; (8127c <TWI0_Handler+0x190>)
   811c8:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   811ca:	2102      	movs	r1, #2
   811cc:	4826      	ldr	r0, [pc, #152]	; (81268 <TWI0_Handler+0x17c>)
   811ce:	4b2c      	ldr	r3, [pc, #176]	; (81280 <TWI0_Handler+0x194>)
   811d0:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   811d2:	4b25      	ldr	r3, [pc, #148]	; (81268 <TWI0_Handler+0x17c>)
   811d4:	2202      	movs	r2, #2
   811d6:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   811d8:	4823      	ldr	r0, [pc, #140]	; (81268 <TWI0_Handler+0x17c>)
   811da:	4b24      	ldr	r3, [pc, #144]	; (8126c <TWI0_Handler+0x180>)
   811dc:	4798      	blx	r3
   811de:	4602      	mov	r2, r0
   811e0:	687b      	ldr	r3, [r7, #4]
   811e2:	4313      	orrs	r3, r2
   811e4:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   811e6:	687b      	ldr	r3, [r7, #4]
   811e8:	f003 0302 	and.w	r3, r3, #2
   811ec:	2b00      	cmp	r3, #0
   811ee:	d018      	beq.n	81222 <TWI0_Handler+0x136>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   811f0:	2102      	movs	r1, #2
   811f2:	481d      	ldr	r0, [pc, #116]	; (81268 <TWI0_Handler+0x17c>)
   811f4:	4b21      	ldr	r3, [pc, #132]	; (8127c <TWI0_Handler+0x190>)
   811f6:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   811f8:	4b26      	ldr	r3, [pc, #152]	; (81294 <TWI0_Handler+0x1a8>)
   811fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   811fe:	3b01      	subs	r3, #1
   81200:	4a19      	ldr	r2, [pc, #100]	; (81268 <TWI0_Handler+0x17c>)
   81202:	6b12      	ldr	r2, [r2, #48]	; 0x30
   81204:	b2d1      	uxtb	r1, r2
   81206:	4a23      	ldr	r2, [pc, #140]	; (81294 <TWI0_Handler+0x1a8>)
   81208:	4413      	add	r3, r2
   8120a:	460a      	mov	r2, r1
   8120c:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(compassRxCallback != NULL)
   8120e:	4b22      	ldr	r3, [pc, #136]	; (81298 <TWI0_Handler+0x1ac>)
   81210:	681b      	ldr	r3, [r3, #0]
   81212:	2b00      	cmp	r3, #0
   81214:	d002      	beq.n	8121c <TWI0_Handler+0x130>
        {
            compassRxCallback();
   81216:	4b20      	ldr	r3, [pc, #128]	; (81298 <TWI0_Handler+0x1ac>)
   81218:	681b      	ldr	r3, [r3, #0]
   8121a:	4798      	blx	r3
        }

        twiBusy = false;
   8121c:	4b1c      	ldr	r3, [pc, #112]	; (81290 <TWI0_Handler+0x1a4>)
   8121e:	2200      	movs	r2, #0
   81220:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   81222:	687b      	ldr	r3, [r7, #4]
   81224:	f403 7350 	and.w	r3, r3, #832	; 0x340
   81228:	2b00      	cmp	r3, #0
   8122a:	d019      	beq.n	81260 <TWI0_Handler+0x174>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   8122c:	f240 2102 	movw	r1, #514	; 0x202
   81230:	4810      	ldr	r0, [pc, #64]	; (81274 <TWI0_Handler+0x188>)
   81232:	4b11      	ldr	r3, [pc, #68]	; (81278 <TWI0_Handler+0x18c>)
   81234:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   81236:	687b      	ldr	r3, [r7, #4]
   81238:	f403 7380 	and.w	r3, r3, #256	; 0x100
   8123c:	2b00      	cmp	r3, #0
   8123e:	d102      	bne.n	81246 <TWI0_Handler+0x15a>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   81240:	4b09      	ldr	r3, [pc, #36]	; (81268 <TWI0_Handler+0x17c>)
   81242:	2202      	movs	r2, #2
   81244:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   81246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8124a:	4807      	ldr	r0, [pc, #28]	; (81268 <TWI0_Handler+0x17c>)
   8124c:	4b0b      	ldr	r3, [pc, #44]	; (8127c <TWI0_Handler+0x190>)
   8124e:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   81250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81254:	4804      	ldr	r0, [pc, #16]	; (81268 <TWI0_Handler+0x17c>)
   81256:	4b09      	ldr	r3, [pc, #36]	; (8127c <TWI0_Handler+0x190>)
   81258:	4798      	blx	r3

        twiBusy = false;
   8125a:	4b0d      	ldr	r3, [pc, #52]	; (81290 <TWI0_Handler+0x1a4>)
   8125c:	2200      	movs	r2, #0
   8125e:	701a      	strb	r2, [r3, #0]
	}
}
   81260:	bf00      	nop
   81262:	370c      	adds	r7, #12
   81264:	46bd      	mov	sp, r7
   81266:	bd90      	pop	{r4, r7, pc}
   81268:	4008c000 	.word	0x4008c000
   8126c:	000812d5 	.word	0x000812d5
   81270:	000812eb 	.word	0x000812eb
   81274:	4008c100 	.word	0x4008c100
   81278:	0008024d 	.word	0x0008024d
   8127c:	000812b7 	.word	0x000812b7
   81280:	0008129d 	.word	0x0008129d
   81284:	20070b74 	.word	0x20070b74
   81288:	20070d9c 	.word	0x20070d9c
   8128c:	20070d98 	.word	0x20070d98
   81290:	20070d94 	.word	0x20070d94
   81294:	20070c84 	.word	0x20070c84
   81298:	20070da0 	.word	0x20070da0

0008129c <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   8129c:	b480      	push	{r7}
   8129e:	b083      	sub	sp, #12
   812a0:	af00      	add	r7, sp, #0
   812a2:	6078      	str	r0, [r7, #4]
   812a4:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   812a6:	687b      	ldr	r3, [r7, #4]
   812a8:	683a      	ldr	r2, [r7, #0]
   812aa:	625a      	str	r2, [r3, #36]	; 0x24
}
   812ac:	bf00      	nop
   812ae:	370c      	adds	r7, #12
   812b0:	46bd      	mov	sp, r7
   812b2:	bc80      	pop	{r7}
   812b4:	4770      	bx	lr

000812b6 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   812b6:	b480      	push	{r7}
   812b8:	b083      	sub	sp, #12
   812ba:	af00      	add	r7, sp, #0
   812bc:	6078      	str	r0, [r7, #4]
   812be:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   812c0:	687b      	ldr	r3, [r7, #4]
   812c2:	683a      	ldr	r2, [r7, #0]
   812c4:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   812c6:	687b      	ldr	r3, [r7, #4]
   812c8:	6a1b      	ldr	r3, [r3, #32]
}
   812ca:	bf00      	nop
   812cc:	370c      	adds	r7, #12
   812ce:	46bd      	mov	sp, r7
   812d0:	bc80      	pop	{r7}
   812d2:	4770      	bx	lr

000812d4 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   812d4:	b480      	push	{r7}
   812d6:	b083      	sub	sp, #12
   812d8:	af00      	add	r7, sp, #0
   812da:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   812dc:	687b      	ldr	r3, [r7, #4]
   812de:	6a1b      	ldr	r3, [r3, #32]
}
   812e0:	4618      	mov	r0, r3
   812e2:	370c      	adds	r7, #12
   812e4:	46bd      	mov	sp, r7
   812e6:	bc80      	pop	{r7}
   812e8:	4770      	bx	lr

000812ea <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   812ea:	b480      	push	{r7}
   812ec:	b083      	sub	sp, #12
   812ee:	af00      	add	r7, sp, #0
   812f0:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   812f2:	687b      	ldr	r3, [r7, #4]
   812f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   812f6:	4618      	mov	r0, r3
   812f8:	370c      	adds	r7, #12
   812fa:	46bd      	mov	sp, r7
   812fc:	bc80      	pop	{r7}
   812fe:	4770      	bx	lr

00081300 <twi_read_byte>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The byte read.
 */
uint8_t twi_read_byte(Twi *p_twi)
{
   81300:	b480      	push	{r7}
   81302:	b083      	sub	sp, #12
   81304:	af00      	add	r7, sp, #0
   81306:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_RHR;
   81308:	687b      	ldr	r3, [r7, #4]
   8130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8130c:	b2db      	uxtb	r3, r3
}
   8130e:	4618      	mov	r0, r3
   81310:	370c      	adds	r7, #12
   81312:	46bd      	mov	sp, r7
   81314:	bc80      	pop	{r7}
   81316:	4770      	bx	lr

00081318 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   81318:	b480      	push	{r7}
   8131a:	b083      	sub	sp, #12
   8131c:	af00      	add	r7, sp, #0
   8131e:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   81320:	687b      	ldr	r3, [r7, #4]
   81322:	2280      	movs	r2, #128	; 0x80
   81324:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   81326:	687b      	ldr	r3, [r7, #4]
   81328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   8132a:	bf00      	nop
   8132c:	370c      	adds	r7, #12
   8132e:	46bd      	mov	sp, r7
   81330:	bc80      	pop	{r7}
   81332:	4770      	bx	lr

00081334 <update_compass>:
    twi_pdc_master_write(TWI0, tx_packet);
    while(compass_is_busy());
}

void update_compass(void)
{
   81334:	b580      	push	{r7, lr}
   81336:	b082      	sub	sp, #8
   81338:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   8133a:	4b1a      	ldr	r3, [pc, #104]	; (813a4 <update_compass+0x70>)
   8133c:	4798      	blx	r3
   8133e:	6078      	str	r0, [r7, #4]

    if ((getTicks() - ul_ticks_compass) > 33)
   81340:	4b19      	ldr	r3, [pc, #100]	; (813a8 <update_compass+0x74>)
   81342:	4798      	blx	r3
   81344:	4602      	mov	r2, r0
   81346:	4b19      	ldr	r3, [pc, #100]	; (813ac <update_compass+0x78>)
   81348:	681b      	ldr	r3, [r3, #0]
   8134a:	1ad3      	subs	r3, r2, r3
   8134c:	2b21      	cmp	r3, #33	; 0x21
   8134e:	d926      	bls.n	8139e <update_compass+0x6a>
    {
        if(lcd_is_busy())
   81350:	4b17      	ldr	r3, [pc, #92]	; (813b0 <update_compass+0x7c>)
   81352:	4798      	blx	r3
   81354:	4603      	mov	r3, r0
   81356:	2b00      	cmp	r3, #0
   81358:	d120      	bne.n	8139c <update_compass+0x68>
        {
            return;
        }

        ul_ticks_compass = getTicks();
   8135a:	4b13      	ldr	r3, [pc, #76]	; (813a8 <update_compass+0x74>)
   8135c:	4798      	blx	r3
   8135e:	4602      	mov	r2, r0
   81360:	4b12      	ldr	r3, [pc, #72]	; (813ac <update_compass+0x78>)
   81362:	601a      	str	r2, [r3, #0]
        
        compassIsBusy = true;
   81364:	4b13      	ldr	r3, [pc, #76]	; (813b4 <update_compass+0x80>)
   81366:	2201      	movs	r2, #1
   81368:	701a      	strb	r2, [r3, #0]
        if(twi_pdc_master_read(TWI0, rx_packet) == TWI_SUCCESS)
   8136a:	6879      	ldr	r1, [r7, #4]
   8136c:	4812      	ldr	r0, [pc, #72]	; (813b8 <update_compass+0x84>)
   8136e:	4b13      	ldr	r3, [pc, #76]	; (813bc <update_compass+0x88>)
   81370:	4798      	blx	r3
   81372:	4603      	mov	r3, r0
   81374:	2b00      	cmp	r3, #0
   81376:	d104      	bne.n	81382 <update_compass+0x4e>
        {
            while(compassIsBusy);
   81378:	bf00      	nop
   8137a:	4b0e      	ldr	r3, [pc, #56]	; (813b4 <update_compass+0x80>)
   8137c:	781b      	ldrb	r3, [r3, #0]
   8137e:	2b00      	cmp	r3, #0
   81380:	d1fb      	bne.n	8137a <update_compass+0x46>
        }
        direction = (rx_packet->buffer[0] << 8) | rx_packet->buffer[1];
   81382:	687b      	ldr	r3, [r7, #4]
   81384:	7a1b      	ldrb	r3, [r3, #8]
   81386:	021b      	lsls	r3, r3, #8
   81388:	b21a      	sxth	r2, r3
   8138a:	687b      	ldr	r3, [r7, #4]
   8138c:	7a5b      	ldrb	r3, [r3, #9]
   8138e:	b21b      	sxth	r3, r3
   81390:	4313      	orrs	r3, r2
   81392:	b21b      	sxth	r3, r3
   81394:	b29a      	uxth	r2, r3
   81396:	4b0a      	ldr	r3, [pc, #40]	; (813c0 <update_compass+0x8c>)
   81398:	801a      	strh	r2, [r3, #0]
   8139a:	e000      	b.n	8139e <update_compass+0x6a>
            return;
   8139c:	bf00      	nop
    }
}
   8139e:	3708      	adds	r7, #8
   813a0:	46bd      	mov	sp, r7
   813a2:	bd80      	pop	{r7, pc}
   813a4:	00080f21 	.word	0x00080f21
   813a8:	00082eb5 	.word	0x00082eb5
   813ac:	20070fbc 	.word	0x20070fbc
   813b0:	00081821 	.word	0x00081821
   813b4:	20070da4 	.word	0x20070da4
   813b8:	4008c000 	.word	0x4008c000
   813bc:	00080f35 	.word	0x00080f35
   813c0:	20070e1c 	.word	0x20070e1c

000813c4 <set_compass_is_busy>:

void set_compass_is_busy(void)
{
   813c4:	b480      	push	{r7}
   813c6:	af00      	add	r7, sp, #0
    compassIsBusy = true;
   813c8:	4b03      	ldr	r3, [pc, #12]	; (813d8 <set_compass_is_busy+0x14>)
   813ca:	2201      	movs	r2, #1
   813cc:	701a      	strb	r2, [r3, #0]
}
   813ce:	bf00      	nop
   813d0:	46bd      	mov	sp, r7
   813d2:	bc80      	pop	{r7}
   813d4:	4770      	bx	lr
   813d6:	bf00      	nop
   813d8:	20070da4 	.word	0x20070da4

000813dc <compass_is_busy>:

uint8_t compass_is_busy(void)
{
   813dc:	b480      	push	{r7}
   813de:	af00      	add	r7, sp, #0
    return compassIsBusy;
   813e0:	4b02      	ldr	r3, [pc, #8]	; (813ec <compass_is_busy+0x10>)
   813e2:	781b      	ldrb	r3, [r3, #0]
}
   813e4:	4618      	mov	r0, r3
   813e6:	46bd      	mov	sp, r7
   813e8:	bc80      	pop	{r7}
   813ea:	4770      	bx	lr
   813ec:	20070da4 	.word	0x20070da4

000813f0 <osc_get_rate>:
{
   813f0:	b480      	push	{r7}
   813f2:	b083      	sub	sp, #12
   813f4:	af00      	add	r7, sp, #0
   813f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   813f8:	687b      	ldr	r3, [r7, #4]
   813fa:	2b07      	cmp	r3, #7
   813fc:	d825      	bhi.n	8144a <osc_get_rate+0x5a>
   813fe:	a201      	add	r2, pc, #4	; (adr r2, 81404 <osc_get_rate+0x14>)
   81400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81404:	00081425 	.word	0x00081425
   81408:	0008142b 	.word	0x0008142b
   8140c:	00081431 	.word	0x00081431
   81410:	00081437 	.word	0x00081437
   81414:	0008143b 	.word	0x0008143b
   81418:	0008143f 	.word	0x0008143f
   8141c:	00081443 	.word	0x00081443
   81420:	00081447 	.word	0x00081447
		return OSC_SLCK_32K_RC_HZ;
   81424:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81428:	e010      	b.n	8144c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8142a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8142e:	e00d      	b.n	8144c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   81430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81434:	e00a      	b.n	8144c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   81436:	4b08      	ldr	r3, [pc, #32]	; (81458 <osc_get_rate+0x68>)
   81438:	e008      	b.n	8144c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8143a:	4b08      	ldr	r3, [pc, #32]	; (8145c <osc_get_rate+0x6c>)
   8143c:	e006      	b.n	8144c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8143e:	4b08      	ldr	r3, [pc, #32]	; (81460 <osc_get_rate+0x70>)
   81440:	e004      	b.n	8144c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   81442:	4b07      	ldr	r3, [pc, #28]	; (81460 <osc_get_rate+0x70>)
   81444:	e002      	b.n	8144c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   81446:	4b06      	ldr	r3, [pc, #24]	; (81460 <osc_get_rate+0x70>)
   81448:	e000      	b.n	8144c <osc_get_rate+0x5c>
	return 0;
   8144a:	2300      	movs	r3, #0
}
   8144c:	4618      	mov	r0, r3
   8144e:	370c      	adds	r7, #12
   81450:	46bd      	mov	sp, r7
   81452:	bc80      	pop	{r7}
   81454:	4770      	bx	lr
   81456:	bf00      	nop
   81458:	003d0900 	.word	0x003d0900
   8145c:	007a1200 	.word	0x007a1200
   81460:	00b71b00 	.word	0x00b71b00

00081464 <sysclk_get_main_hz>:
{
   81464:	b580      	push	{r7, lr}
   81466:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   81468:	2006      	movs	r0, #6
   8146a:	4b04      	ldr	r3, [pc, #16]	; (8147c <sysclk_get_main_hz+0x18>)
   8146c:	4798      	blx	r3
   8146e:	4602      	mov	r2, r0
   81470:	4613      	mov	r3, r2
   81472:	00db      	lsls	r3, r3, #3
   81474:	1a9b      	subs	r3, r3, r2
   81476:	005b      	lsls	r3, r3, #1
}
   81478:	4618      	mov	r0, r3
   8147a:	bd80      	pop	{r7, pc}
   8147c:	000813f1 	.word	0x000813f1

00081480 <sysclk_get_peripheral_hz>:
{
   81480:	b580      	push	{r7, lr}
   81482:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   81484:	4b02      	ldr	r3, [pc, #8]	; (81490 <sysclk_get_peripheral_hz+0x10>)
   81486:	4798      	blx	r3
   81488:	4603      	mov	r3, r0
   8148a:	085b      	lsrs	r3, r3, #1
}
   8148c:	4618      	mov	r0, r3
   8148e:	bd80      	pop	{r7, pc}
   81490:	00081465 	.word	0x00081465

00081494 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81494:	b580      	push	{r7, lr}
   81496:	b082      	sub	sp, #8
   81498:	af00      	add	r7, sp, #0
   8149a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8149c:	6878      	ldr	r0, [r7, #4]
   8149e:	4b03      	ldr	r3, [pc, #12]	; (814ac <sysclk_enable_peripheral_clock+0x18>)
   814a0:	4798      	blx	r3
}
   814a2:	bf00      	nop
   814a4:	3708      	adds	r7, #8
   814a6:	46bd      	mov	sp, r7
   814a8:	bd80      	pop	{r7, pc}
   814aa:	bf00      	nop
   814ac:	00083875 	.word	0x00083875

000814b0 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   814b0:	b580      	push	{r7, lr}
   814b2:	b082      	sub	sp, #8
   814b4:	af00      	add	r7, sp, #0
   814b6:	6078      	str	r0, [r7, #4]
   814b8:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   814ba:	4b10      	ldr	r3, [pc, #64]	; (814fc <twi_master_setup+0x4c>)
   814bc:	4798      	blx	r3
   814be:	4602      	mov	r2, r0
   814c0:	683b      	ldr	r3, [r7, #0]
   814c2:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   814c4:	683b      	ldr	r3, [r7, #0]
   814c6:	2200      	movs	r2, #0
   814c8:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   814ca:	687b      	ldr	r3, [r7, #4]
   814cc:	4a0c      	ldr	r2, [pc, #48]	; (81500 <twi_master_setup+0x50>)
   814ce:	4293      	cmp	r3, r2
   814d0:	d103      	bne.n	814da <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   814d2:	2016      	movs	r0, #22
   814d4:	4b0b      	ldr	r3, [pc, #44]	; (81504 <twi_master_setup+0x54>)
   814d6:	4798      	blx	r3
   814d8:	e006      	b.n	814e8 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   814da:	687b      	ldr	r3, [r7, #4]
   814dc:	4a0a      	ldr	r2, [pc, #40]	; (81508 <twi_master_setup+0x58>)
   814de:	4293      	cmp	r3, r2
   814e0:	d102      	bne.n	814e8 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   814e2:	2017      	movs	r0, #23
   814e4:	4b07      	ldr	r3, [pc, #28]	; (81504 <twi_master_setup+0x54>)
   814e6:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   814e8:	6839      	ldr	r1, [r7, #0]
   814ea:	6878      	ldr	r0, [r7, #4]
   814ec:	4b07      	ldr	r3, [pc, #28]	; (8150c <twi_master_setup+0x5c>)
   814ee:	4798      	blx	r3
   814f0:	4603      	mov	r3, r0
}
   814f2:	4618      	mov	r0, r3
   814f4:	3708      	adds	r7, #8
   814f6:	46bd      	mov	sp, r7
   814f8:	bd80      	pop	{r7, pc}
   814fa:	bf00      	nop
   814fc:	00081481 	.word	0x00081481
   81500:	4008c000 	.word	0x4008c000
   81504:	00081495 	.word	0x00081495
   81508:	40090000 	.word	0x40090000
   8150c:	00080d1d 	.word	0x00080d1d

00081510 <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   81510:	b580      	push	{r7, lr}
   81512:	af00      	add	r7, sp, #0
    twi_set_lcd_tx_callback(lcd_callback);
   81514:	4821      	ldr	r0, [pc, #132]	; (8159c <lcd_init+0x8c>)
   81516:	4b22      	ldr	r3, [pc, #136]	; (815a0 <lcd_init+0x90>)
   81518:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   8151a:	220c      	movs	r2, #12
   8151c:	2100      	movs	r1, #0
   8151e:	4821      	ldr	r0, [pc, #132]	; (815a4 <lcd_init+0x94>)
   81520:	4b21      	ldr	r3, [pc, #132]	; (815a8 <lcd_init+0x98>)
   81522:	4798      	blx	r3
    twiConfig.speed = 100000;
   81524:	4b1f      	ldr	r3, [pc, #124]	; (815a4 <lcd_init+0x94>)
   81526:	4a21      	ldr	r2, [pc, #132]	; (815ac <lcd_init+0x9c>)
   81528:	605a      	str	r2, [r3, #4]

    backlight = LCD_LIGHT_OFF;
   8152a:	4b21      	ldr	r3, [pc, #132]	; (815b0 <lcd_init+0xa0>)
   8152c:	2200      	movs	r2, #0
   8152e:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   81530:	2103      	movs	r1, #3
   81532:	2000      	movs	r0, #0
   81534:	4b1f      	ldr	r3, [pc, #124]	; (815b4 <lcd_init+0xa4>)
   81536:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81538:	2006      	movs	r0, #6
   8153a:	4b1f      	ldr	r3, [pc, #124]	; (815b8 <lcd_init+0xa8>)
   8153c:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   8153e:	2103      	movs	r1, #3
   81540:	2000      	movs	r0, #0
   81542:	4b1c      	ldr	r3, [pc, #112]	; (815b4 <lcd_init+0xa4>)
   81544:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81546:	2006      	movs	r0, #6
   81548:	4b1b      	ldr	r3, [pc, #108]	; (815b8 <lcd_init+0xa8>)
   8154a:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   8154c:	2103      	movs	r1, #3
   8154e:	2000      	movs	r0, #0
   81550:	4b18      	ldr	r3, [pc, #96]	; (815b4 <lcd_init+0xa4>)
   81552:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81554:	2006      	movs	r0, #6
   81556:	4b18      	ldr	r3, [pc, #96]	; (815b8 <lcd_init+0xa8>)
   81558:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   8155a:	2102      	movs	r1, #2
   8155c:	2000      	movs	r0, #0
   8155e:	4b15      	ldr	r3, [pc, #84]	; (815b4 <lcd_init+0xa4>)
   81560:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   81562:	2128      	movs	r1, #40	; 0x28
   81564:	2000      	movs	r0, #0
   81566:	4b15      	ldr	r3, [pc, #84]	; (815bc <lcd_init+0xac>)
   81568:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   8156a:	2108      	movs	r1, #8
   8156c:	2000      	movs	r0, #0
   8156e:	4b13      	ldr	r3, [pc, #76]	; (815bc <lcd_init+0xac>)
   81570:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   81572:	2101      	movs	r1, #1
   81574:	2000      	movs	r0, #0
   81576:	4b11      	ldr	r3, [pc, #68]	; (815bc <lcd_init+0xac>)
   81578:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   8157a:	2003      	movs	r0, #3
   8157c:	4b0e      	ldr	r3, [pc, #56]	; (815b8 <lcd_init+0xa8>)
   8157e:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   81580:	2106      	movs	r1, #6
   81582:	2000      	movs	r0, #0
   81584:	4b0d      	ldr	r3, [pc, #52]	; (815bc <lcd_init+0xac>)
   81586:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   81588:	210c      	movs	r1, #12
   8158a:	2000      	movs	r0, #0
   8158c:	4b0b      	ldr	r3, [pc, #44]	; (815bc <lcd_init+0xac>)
   8158e:	4798      	blx	r3

    backlight = LCD_LIGHT_ON;
   81590:	4b07      	ldr	r3, [pc, #28]	; (815b0 <lcd_init+0xa0>)
   81592:	2208      	movs	r2, #8
   81594:	701a      	strb	r2, [r3, #0]
}
   81596:	bf00      	nop
   81598:	bd80      	pop	{r7, pc}
   8159a:	bf00      	nop
   8159c:	00081a85 	.word	0x00081a85
   815a0:	000810d1 	.word	0x000810d1
   815a4:	20070db0 	.word	0x20070db0
   815a8:	00085421 	.word	0x00085421
   815ac:	000186a0 	.word	0x000186a0
   815b0:	20070da5 	.word	0x20070da5
   815b4:	00081835 	.word	0x00081835
   815b8:	00082ec9 	.word	0x00082ec9
   815bc:	00081945 	.word	0x00081945

000815c0 <lcd_set_backlight>:

void lcd_set_backlight(backlight_t state)
{
   815c0:	b480      	push	{r7}
   815c2:	b083      	sub	sp, #12
   815c4:	af00      	add	r7, sp, #0
   815c6:	4603      	mov	r3, r0
   815c8:	71fb      	strb	r3, [r7, #7]
    backlight = state;
   815ca:	4a04      	ldr	r2, [pc, #16]	; (815dc <lcd_set_backlight+0x1c>)
   815cc:	79fb      	ldrb	r3, [r7, #7]
   815ce:	7013      	strb	r3, [r2, #0]
//    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
//    mdelay(LCD_CLEAR_WAIT_TIME);
}
   815d0:	bf00      	nop
   815d2:	370c      	adds	r7, #12
   815d4:	46bd      	mov	sp, r7
   815d6:	bc80      	pop	{r7}
   815d8:	4770      	bx	lr
   815da:	bf00      	nop
   815dc:	20070da5 	.word	0x20070da5

000815e0 <lcd_clear>:

void lcd_clear(void)
{
   815e0:	b580      	push	{r7, lr}
   815e2:	af00      	add	r7, sp, #0
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   815e4:	2101      	movs	r1, #1
   815e6:	2000      	movs	r0, #0
   815e8:	4b03      	ldr	r3, [pc, #12]	; (815f8 <lcd_clear+0x18>)
   815ea:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   815ec:	2003      	movs	r0, #3
   815ee:	4b03      	ldr	r3, [pc, #12]	; (815fc <lcd_clear+0x1c>)
   815f0:	4798      	blx	r3
}
   815f2:	bf00      	nop
   815f4:	bd80      	pop	{r7, pc}
   815f6:	bf00      	nop
   815f8:	00081945 	.word	0x00081945
   815fc:	00082ec9 	.word	0x00082ec9

00081600 <lcd_print_s>:
    sprintf(str, "%10lu", data);
    lcd_print_s(line, col, str);
}

void lcd_print_s(uint8_t line, uint8_t col, const char* str)
{
   81600:	b590      	push	{r4, r7, lr}
   81602:	b087      	sub	sp, #28
   81604:	af00      	add	r7, sp, #0
   81606:	4603      	mov	r3, r0
   81608:	603a      	str	r2, [r7, #0]
   8160a:	71fb      	strb	r3, [r7, #7]
   8160c:	460b      	mov	r3, r1
   8160e:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81610:	4b75      	ldr	r3, [pc, #468]	; (817e8 <lcd_print_s+0x1e8>)
   81612:	4798      	blx	r3
   81614:	6138      	str	r0, [r7, #16]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    
    while(lcdIsBusy | twi_is_busy())
   81616:	e019      	b.n	8164c <lcd_print_s+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81618:	4b74      	ldr	r3, [pc, #464]	; (817ec <lcd_print_s+0x1ec>)
   8161a:	4798      	blx	r3
   8161c:	4602      	mov	r2, r0
   8161e:	4b74      	ldr	r3, [pc, #464]	; (817f0 <lcd_print_s+0x1f0>)
   81620:	681b      	ldr	r3, [r3, #0]
   81622:	1ad3      	subs	r3, r2, r3
   81624:	2b0a      	cmp	r3, #10
   81626:	d911      	bls.n	8164c <lcd_print_s+0x4c>
        {
            lcdIsBusy = false;
   81628:	4b72      	ldr	r3, [pc, #456]	; (817f4 <lcd_print_s+0x1f4>)
   8162a:	2200      	movs	r2, #0
   8162c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   8162e:	4b72      	ldr	r3, [pc, #456]	; (817f8 <lcd_print_s+0x1f8>)
   81630:	681b      	ldr	r3, [r3, #0]
   81632:	3301      	adds	r3, #1
   81634:	4a70      	ldr	r2, [pc, #448]	; (817f8 <lcd_print_s+0x1f8>)
   81636:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81638:	f240 2102 	movw	r1, #514	; 0x202
   8163c:	486f      	ldr	r0, [pc, #444]	; (817fc <lcd_print_s+0x1fc>)
   8163e:	4b70      	ldr	r3, [pc, #448]	; (81800 <lcd_print_s+0x200>)
   81640:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81642:	4970      	ldr	r1, [pc, #448]	; (81804 <lcd_print_s+0x204>)
   81644:	4870      	ldr	r0, [pc, #448]	; (81808 <lcd_print_s+0x208>)
   81646:	4b71      	ldr	r3, [pc, #452]	; (8180c <lcd_print_s+0x20c>)
   81648:	4798      	blx	r3
            break;
   8164a:	e009      	b.n	81660 <lcd_print_s+0x60>
    while(lcdIsBusy | twi_is_busy())
   8164c:	4b70      	ldr	r3, [pc, #448]	; (81810 <lcd_print_s+0x210>)
   8164e:	4798      	blx	r3
   81650:	4603      	mov	r3, r0
   81652:	461a      	mov	r2, r3
   81654:	4b67      	ldr	r3, [pc, #412]	; (817f4 <lcd_print_s+0x1f4>)
   81656:	781b      	ldrb	r3, [r3, #0]
   81658:	4313      	orrs	r3, r2
   8165a:	b2db      	uxtb	r3, r3
   8165c:	2b00      	cmp	r3, #0
   8165e:	d1db      	bne.n	81618 <lcd_print_s+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81660:	693b      	ldr	r3, [r7, #16]
   81662:	2227      	movs	r2, #39	; 0x27
   81664:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81668:	693b      	ldr	r3, [r7, #16]
   8166a:	2200      	movs	r2, #0
   8166c:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   8166e:	693b      	ldr	r3, [r7, #16]
   81670:	2200      	movs	r2, #0
   81672:	605a      	str	r2, [r3, #4]
    
    // Calculate display address
    switch(line)
   81674:	79fb      	ldrb	r3, [r7, #7]
   81676:	2b03      	cmp	r3, #3
   81678:	d006      	beq.n	81688 <lcd_print_s+0x88>
   8167a:	2b04      	cmp	r3, #4
   8167c:	d007      	beq.n	8168e <lcd_print_s+0x8e>
   8167e:	2b02      	cmp	r3, #2
   81680:	d108      	bne.n	81694 <lcd_print_s+0x94>
    {
        case 2:
        addr = 0x80 | 0x40;   // set address to start of line 2
   81682:	23c0      	movs	r3, #192	; 0xc0
   81684:	75fb      	strb	r3, [r7, #23]
        break;
   81686:	e008      	b.n	8169a <lcd_print_s+0x9a>
        case 3:
        addr = 0x80 | 0x14;   // set address to start of line 3
   81688:	2394      	movs	r3, #148	; 0x94
   8168a:	75fb      	strb	r3, [r7, #23]
        break;
   8168c:	e005      	b.n	8169a <lcd_print_s+0x9a>
        case 4:
        addr = 0x80 | 0x54;   // set address to start of line 4
   8168e:	23d4      	movs	r3, #212	; 0xd4
   81690:	75fb      	strb	r3, [r7, #23]
        break;
   81692:	e002      	b.n	8169a <lcd_print_s+0x9a>
        case 1:
        default:
        addr = 0x80;          // set address to start of line 1
   81694:	2380      	movs	r3, #128	; 0x80
   81696:	75fb      	strb	r3, [r7, #23]
        break;
   81698:	bf00      	nop
    }
    addr += col;  // set column in the selected line
   8169a:	7dfa      	ldrb	r2, [r7, #23]
   8169c:	79bb      	ldrb	r3, [r7, #6]
   8169e:	4413      	add	r3, r2
   816a0:	75fb      	strb	r3, [r7, #23]

    // Set cursor
    cmd = LCD_FUNTION_WRITE | backlight;
   816a2:	4b5c      	ldr	r3, [pc, #368]	; (81814 <lcd_print_s+0x214>)
   816a4:	781b      	ldrb	r3, [r3, #0]
   816a6:	73fb      	strb	r3, [r7, #15]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   816a8:	7dfb      	ldrb	r3, [r7, #23]
   816aa:	f023 030f 	bic.w	r3, r3, #15
   816ae:	b2da      	uxtb	r2, r3
   816b0:	7bfb      	ldrb	r3, [r7, #15]
   816b2:	4313      	orrs	r3, r2
   816b4:	b2db      	uxtb	r3, r3
   816b6:	f043 0304 	orr.w	r3, r3, #4
   816ba:	b2da      	uxtb	r2, r3
   816bc:	693b      	ldr	r3, [r7, #16]
   816be:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   816c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
   816c4:	f023 030f 	bic.w	r3, r3, #15
   816c8:	b25a      	sxtb	r2, r3
   816ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
   816ce:	4313      	orrs	r3, r2
   816d0:	b25b      	sxtb	r3, r3
   816d2:	b2da      	uxtb	r2, r3
   816d4:	693b      	ldr	r3, [r7, #16]
   816d6:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   816d8:	7dfb      	ldrb	r3, [r7, #23]
   816da:	011b      	lsls	r3, r3, #4
   816dc:	b2da      	uxtb	r2, r3
   816de:	7bfb      	ldrb	r3, [r7, #15]
   816e0:	4313      	orrs	r3, r2
   816e2:	b2db      	uxtb	r3, r3
   816e4:	f043 0304 	orr.w	r3, r3, #4
   816e8:	b2da      	uxtb	r2, r3
   816ea:	693b      	ldr	r3, [r7, #16]
   816ec:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   816ee:	7dfb      	ldrb	r3, [r7, #23]
   816f0:	011b      	lsls	r3, r3, #4
   816f2:	b25a      	sxtb	r2, r3
   816f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   816f8:	4313      	orrs	r3, r2
   816fa:	b25b      	sxtb	r3, r3
   816fc:	b2da      	uxtb	r2, r3
   816fe:	693b      	ldr	r3, [r7, #16]
   81700:	72da      	strb	r2, [r3, #11]
    
    // write string ...
    cmd = LCD_WRITE_DDR | backlight;
   81702:	4b44      	ldr	r3, [pc, #272]	; (81814 <lcd_print_s+0x214>)
   81704:	781b      	ldrb	r3, [r3, #0]
   81706:	f043 0301 	orr.w	r3, r3, #1
   8170a:	73fb      	strb	r3, [r7, #15]
    for(count = 0; count < strlen(str); count++)
   8170c:	2300      	movs	r3, #0
   8170e:	75bb      	strb	r3, [r7, #22]
   81710:	e04b      	b.n	817aa <lcd_print_s+0x1aa>
    {
        byte = str[count];
   81712:	7dbb      	ldrb	r3, [r7, #22]
   81714:	683a      	ldr	r2, [r7, #0]
   81716:	4413      	add	r3, r2
   81718:	781b      	ldrb	r3, [r3, #0]
   8171a:	73bb      	strb	r3, [r7, #14]
        tx_packet->buffer[4 + count * 4 + 0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   8171c:	7dbb      	ldrb	r3, [r7, #22]
   8171e:	3301      	adds	r3, #1
   81720:	009b      	lsls	r3, r3, #2
   81722:	7bba      	ldrb	r2, [r7, #14]
   81724:	f022 020f 	bic.w	r2, r2, #15
   81728:	b2d1      	uxtb	r1, r2
   8172a:	7bfa      	ldrb	r2, [r7, #15]
   8172c:	430a      	orrs	r2, r1
   8172e:	b2d2      	uxtb	r2, r2
   81730:	f042 0204 	orr.w	r2, r2, #4
   81734:	b2d1      	uxtb	r1, r2
   81736:	693a      	ldr	r2, [r7, #16]
   81738:	4413      	add	r3, r2
   8173a:	460a      	mov	r2, r1
   8173c:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   8173e:	7dbb      	ldrb	r3, [r7, #22]
   81740:	3301      	adds	r3, #1
   81742:	009b      	lsls	r3, r3, #2
   81744:	3301      	adds	r3, #1
   81746:	f997 200e 	ldrsb.w	r2, [r7, #14]
   8174a:	f022 020f 	bic.w	r2, r2, #15
   8174e:	b251      	sxtb	r1, r2
   81750:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81754:	430a      	orrs	r2, r1
   81756:	b252      	sxtb	r2, r2
   81758:	b2d1      	uxtb	r1, r2
   8175a:	693a      	ldr	r2, [r7, #16]
   8175c:	4413      	add	r3, r2
   8175e:	460a      	mov	r2, r1
   81760:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81762:	7dbb      	ldrb	r3, [r7, #22]
   81764:	3301      	adds	r3, #1
   81766:	009b      	lsls	r3, r3, #2
   81768:	3302      	adds	r3, #2
   8176a:	7bba      	ldrb	r2, [r7, #14]
   8176c:	0112      	lsls	r2, r2, #4
   8176e:	b2d1      	uxtb	r1, r2
   81770:	7bfa      	ldrb	r2, [r7, #15]
   81772:	430a      	orrs	r2, r1
   81774:	b2d2      	uxtb	r2, r2
   81776:	f042 0204 	orr.w	r2, r2, #4
   8177a:	b2d1      	uxtb	r1, r2
   8177c:	693a      	ldr	r2, [r7, #16]
   8177e:	4413      	add	r3, r2
   81780:	460a      	mov	r2, r1
   81782:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81784:	7dbb      	ldrb	r3, [r7, #22]
   81786:	3301      	adds	r3, #1
   81788:	009b      	lsls	r3, r3, #2
   8178a:	3303      	adds	r3, #3
   8178c:	7bba      	ldrb	r2, [r7, #14]
   8178e:	0112      	lsls	r2, r2, #4
   81790:	b251      	sxtb	r1, r2
   81792:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81796:	430a      	orrs	r2, r1
   81798:	b252      	sxtb	r2, r2
   8179a:	b2d1      	uxtb	r1, r2
   8179c:	693a      	ldr	r2, [r7, #16]
   8179e:	4413      	add	r3, r2
   817a0:	460a      	mov	r2, r1
   817a2:	721a      	strb	r2, [r3, #8]
    for(count = 0; count < strlen(str); count++)
   817a4:	7dbb      	ldrb	r3, [r7, #22]
   817a6:	3301      	adds	r3, #1
   817a8:	75bb      	strb	r3, [r7, #22]
   817aa:	7dbc      	ldrb	r4, [r7, #22]
   817ac:	6838      	ldr	r0, [r7, #0]
   817ae:	4b1a      	ldr	r3, [pc, #104]	; (81818 <lcd_print_s+0x218>)
   817b0:	4798      	blx	r3
   817b2:	4603      	mov	r3, r0
   817b4:	429c      	cmp	r4, r3
   817b6:	d3ac      	bcc.n	81712 <lcd_print_s+0x112>
    }
    tx_packet->length = 4 + count * 4;
   817b8:	7dbb      	ldrb	r3, [r7, #22]
   817ba:	3301      	adds	r3, #1
   817bc:	009b      	lsls	r3, r3, #2
   817be:	461a      	mov	r2, r3
   817c0:	693b      	ldr	r3, [r7, #16]
   817c2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    lcdIsBusy = true;
   817c6:	4b0b      	ldr	r3, [pc, #44]	; (817f4 <lcd_print_s+0x1f4>)
   817c8:	2201      	movs	r2, #1
   817ca:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   817cc:	6939      	ldr	r1, [r7, #16]
   817ce:	480e      	ldr	r0, [pc, #56]	; (81808 <lcd_print_s+0x208>)
   817d0:	4b12      	ldr	r3, [pc, #72]	; (8181c <lcd_print_s+0x21c>)
   817d2:	4798      	blx	r3
    lcdStartTicks = getTicks();
   817d4:	4b05      	ldr	r3, [pc, #20]	; (817ec <lcd_print_s+0x1ec>)
   817d6:	4798      	blx	r3
   817d8:	4602      	mov	r2, r0
   817da:	4b05      	ldr	r3, [pc, #20]	; (817f0 <lcd_print_s+0x1f0>)
   817dc:	601a      	str	r2, [r3, #0]
}
   817de:	bf00      	nop
   817e0:	371c      	adds	r7, #28
   817e2:	46bd      	mov	sp, r7
   817e4:	bd90      	pop	{r4, r7, pc}
   817e6:	bf00      	nop
   817e8:	00080f0d 	.word	0x00080f0d
   817ec:	00082eb5 	.word	0x00082eb5
   817f0:	20070da8 	.word	0x20070da8
   817f4:	20070da6 	.word	0x20070da6
   817f8:	20070dac 	.word	0x20070dac
   817fc:	4008c100 	.word	0x4008c100
   81800:	0008024d 	.word	0x0008024d
   81804:	20070db0 	.word	0x20070db0
   81808:	4008c000 	.word	0x4008c000
   8180c:	000814b1 	.word	0x000814b1
   81810:	00080ef9 	.word	0x00080ef9
   81814:	20070da5 	.word	0x20070da5
   81818:	00085509 	.word	0x00085509
   8181c:	0008100d 	.word	0x0008100d

00081820 <lcd_is_busy>:
    twi_pdc_master_write(TWI0, tx_packet);
    lcdStartTicks = getTicks();
}

uint8_t lcd_is_busy(void)
{
   81820:	b480      	push	{r7}
   81822:	af00      	add	r7, sp, #0
    return lcdIsBusy;
   81824:	4b02      	ldr	r3, [pc, #8]	; (81830 <lcd_is_busy+0x10>)
   81826:	781b      	ldrb	r3, [r3, #0]
}
   81828:	4618      	mov	r0, r3
   8182a:	46bd      	mov	sp, r7
   8182c:	bc80      	pop	{r7}
   8182e:	4770      	bx	lr
   81830:	20070da6 	.word	0x20070da6

00081834 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   81834:	b580      	push	{r7, lr}
   81836:	b084      	sub	sp, #16
   81838:	af00      	add	r7, sp, #0
   8183a:	4603      	mov	r3, r0
   8183c:	460a      	mov	r2, r1
   8183e:	71fb      	strb	r3, [r7, #7]
   81840:	4613      	mov	r3, r2
   81842:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81844:	4b32      	ldr	r3, [pc, #200]	; (81910 <send_nibble+0xdc>)
   81846:	4798      	blx	r3
   81848:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   8184a:	e019      	b.n	81880 <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   8184c:	4b31      	ldr	r3, [pc, #196]	; (81914 <send_nibble+0xe0>)
   8184e:	4798      	blx	r3
   81850:	4602      	mov	r2, r0
   81852:	4b31      	ldr	r3, [pc, #196]	; (81918 <send_nibble+0xe4>)
   81854:	681b      	ldr	r3, [r3, #0]
   81856:	1ad3      	subs	r3, r2, r3
   81858:	2b0a      	cmp	r3, #10
   8185a:	d911      	bls.n	81880 <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   8185c:	4b2f      	ldr	r3, [pc, #188]	; (8191c <send_nibble+0xe8>)
   8185e:	2200      	movs	r2, #0
   81860:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81862:	4b2f      	ldr	r3, [pc, #188]	; (81920 <send_nibble+0xec>)
   81864:	681b      	ldr	r3, [r3, #0]
   81866:	3301      	adds	r3, #1
   81868:	4a2d      	ldr	r2, [pc, #180]	; (81920 <send_nibble+0xec>)
   8186a:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   8186c:	f240 2102 	movw	r1, #514	; 0x202
   81870:	482c      	ldr	r0, [pc, #176]	; (81924 <send_nibble+0xf0>)
   81872:	4b2d      	ldr	r3, [pc, #180]	; (81928 <send_nibble+0xf4>)
   81874:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81876:	492d      	ldr	r1, [pc, #180]	; (8192c <send_nibble+0xf8>)
   81878:	482d      	ldr	r0, [pc, #180]	; (81930 <send_nibble+0xfc>)
   8187a:	4b2e      	ldr	r3, [pc, #184]	; (81934 <send_nibble+0x100>)
   8187c:	4798      	blx	r3
            break;
   8187e:	e009      	b.n	81894 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   81880:	4b2d      	ldr	r3, [pc, #180]	; (81938 <send_nibble+0x104>)
   81882:	4798      	blx	r3
   81884:	4603      	mov	r3, r0
   81886:	461a      	mov	r2, r3
   81888:	4b24      	ldr	r3, [pc, #144]	; (8191c <send_nibble+0xe8>)
   8188a:	781b      	ldrb	r3, [r3, #0]
   8188c:	4313      	orrs	r3, r2
   8188e:	b2db      	uxtb	r3, r3
   81890:	2b00      	cmp	r3, #0
   81892:	d1db      	bne.n	8184c <send_nibble+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81894:	68fb      	ldr	r3, [r7, #12]
   81896:	2227      	movs	r2, #39	; 0x27
   81898:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   8189c:	68fb      	ldr	r3, [r7, #12]
   8189e:	2200      	movs	r2, #0
   818a0:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   818a2:	68fb      	ldr	r3, [r7, #12]
   818a4:	2200      	movs	r2, #0
   818a6:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   818a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   818ac:	f003 030f 	and.w	r3, r3, #15
   818b0:	b25a      	sxtb	r2, r3
   818b2:	4b22      	ldr	r3, [pc, #136]	; (8193c <send_nibble+0x108>)
   818b4:	781b      	ldrb	r3, [r3, #0]
   818b6:	b25b      	sxtb	r3, r3
   818b8:	4313      	orrs	r3, r2
   818ba:	b25b      	sxtb	r3, r3
   818bc:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   818be:	79bb      	ldrb	r3, [r7, #6]
   818c0:	011b      	lsls	r3, r3, #4
   818c2:	b2da      	uxtb	r2, r3
   818c4:	79fb      	ldrb	r3, [r7, #7]
   818c6:	4313      	orrs	r3, r2
   818c8:	b2db      	uxtb	r3, r3
   818ca:	f043 0304 	orr.w	r3, r3, #4
   818ce:	b2da      	uxtb	r2, r3
   818d0:	68fb      	ldr	r3, [r7, #12]
   818d2:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   818d4:	79bb      	ldrb	r3, [r7, #6]
   818d6:	011b      	lsls	r3, r3, #4
   818d8:	b25a      	sxtb	r2, r3
   818da:	f997 3007 	ldrsb.w	r3, [r7, #7]
   818de:	4313      	orrs	r3, r2
   818e0:	b25b      	sxtb	r3, r3
   818e2:	b2da      	uxtb	r2, r3
   818e4:	68fb      	ldr	r3, [r7, #12]
   818e6:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   818e8:	68fb      	ldr	r3, [r7, #12]
   818ea:	2202      	movs	r2, #2
   818ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   818f0:	4b0a      	ldr	r3, [pc, #40]	; (8191c <send_nibble+0xe8>)
   818f2:	2201      	movs	r2, #1
   818f4:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   818f6:	68f9      	ldr	r1, [r7, #12]
   818f8:	480d      	ldr	r0, [pc, #52]	; (81930 <send_nibble+0xfc>)
   818fa:	4b11      	ldr	r3, [pc, #68]	; (81940 <send_nibble+0x10c>)
   818fc:	4798      	blx	r3
    lcdStartTicks = getTicks();
   818fe:	4b05      	ldr	r3, [pc, #20]	; (81914 <send_nibble+0xe0>)
   81900:	4798      	blx	r3
   81902:	4602      	mov	r2, r0
   81904:	4b04      	ldr	r3, [pc, #16]	; (81918 <send_nibble+0xe4>)
   81906:	601a      	str	r2, [r3, #0]
}
   81908:	bf00      	nop
   8190a:	3710      	adds	r7, #16
   8190c:	46bd      	mov	sp, r7
   8190e:	bd80      	pop	{r7, pc}
   81910:	00080f0d 	.word	0x00080f0d
   81914:	00082eb5 	.word	0x00082eb5
   81918:	20070da8 	.word	0x20070da8
   8191c:	20070da6 	.word	0x20070da6
   81920:	20070dac 	.word	0x20070dac
   81924:	4008c100 	.word	0x4008c100
   81928:	0008024d 	.word	0x0008024d
   8192c:	20070db0 	.word	0x20070db0
   81930:	4008c000 	.word	0x4008c000
   81934:	000814b1 	.word	0x000814b1
   81938:	00080ef9 	.word	0x00080ef9
   8193c:	20070da5 	.word	0x20070da5
   81940:	0008100d 	.word	0x0008100d

00081944 <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   81944:	b580      	push	{r7, lr}
   81946:	b084      	sub	sp, #16
   81948:	af00      	add	r7, sp, #0
   8194a:	4603      	mov	r3, r0
   8194c:	460a      	mov	r2, r1
   8194e:	71fb      	strb	r3, [r7, #7]
   81950:	4613      	mov	r3, r2
   81952:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81954:	4b3e      	ldr	r3, [pc, #248]	; (81a50 <send_byte+0x10c>)
   81956:	4798      	blx	r3
   81958:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   8195a:	e019      	b.n	81990 <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   8195c:	4b3d      	ldr	r3, [pc, #244]	; (81a54 <send_byte+0x110>)
   8195e:	4798      	blx	r3
   81960:	4602      	mov	r2, r0
   81962:	4b3d      	ldr	r3, [pc, #244]	; (81a58 <send_byte+0x114>)
   81964:	681b      	ldr	r3, [r3, #0]
   81966:	1ad3      	subs	r3, r2, r3
   81968:	2b0a      	cmp	r3, #10
   8196a:	d911      	bls.n	81990 <send_byte+0x4c>
        {
            lcdIsBusy = false;
   8196c:	4b3b      	ldr	r3, [pc, #236]	; (81a5c <send_byte+0x118>)
   8196e:	2200      	movs	r2, #0
   81970:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81972:	4b3b      	ldr	r3, [pc, #236]	; (81a60 <send_byte+0x11c>)
   81974:	681b      	ldr	r3, [r3, #0]
   81976:	3301      	adds	r3, #1
   81978:	4a39      	ldr	r2, [pc, #228]	; (81a60 <send_byte+0x11c>)
   8197a:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   8197c:	f240 2102 	movw	r1, #514	; 0x202
   81980:	4838      	ldr	r0, [pc, #224]	; (81a64 <send_byte+0x120>)
   81982:	4b39      	ldr	r3, [pc, #228]	; (81a68 <send_byte+0x124>)
   81984:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81986:	4939      	ldr	r1, [pc, #228]	; (81a6c <send_byte+0x128>)
   81988:	4839      	ldr	r0, [pc, #228]	; (81a70 <send_byte+0x12c>)
   8198a:	4b3a      	ldr	r3, [pc, #232]	; (81a74 <send_byte+0x130>)
   8198c:	4798      	blx	r3
            break;
   8198e:	e009      	b.n	819a4 <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   81990:	4b39      	ldr	r3, [pc, #228]	; (81a78 <send_byte+0x134>)
   81992:	4798      	blx	r3
   81994:	4603      	mov	r3, r0
   81996:	461a      	mov	r2, r3
   81998:	4b30      	ldr	r3, [pc, #192]	; (81a5c <send_byte+0x118>)
   8199a:	781b      	ldrb	r3, [r3, #0]
   8199c:	4313      	orrs	r3, r2
   8199e:	b2db      	uxtb	r3, r3
   819a0:	2b00      	cmp	r3, #0
   819a2:	d1db      	bne.n	8195c <send_byte+0x18>
        }
    }

    tx_packet->chip = 0x27;
   819a4:	68fb      	ldr	r3, [r7, #12]
   819a6:	2227      	movs	r2, #39	; 0x27
   819a8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   819ac:	68fb      	ldr	r3, [r7, #12]
   819ae:	2200      	movs	r2, #0
   819b0:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   819b2:	68fb      	ldr	r3, [r7, #12]
   819b4:	2200      	movs	r2, #0
   819b6:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   819b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   819bc:	f003 030f 	and.w	r3, r3, #15
   819c0:	b25a      	sxtb	r2, r3
   819c2:	4b2e      	ldr	r3, [pc, #184]	; (81a7c <send_byte+0x138>)
   819c4:	781b      	ldrb	r3, [r3, #0]
   819c6:	b25b      	sxtb	r3, r3
   819c8:	4313      	orrs	r3, r2
   819ca:	b25b      	sxtb	r3, r3
   819cc:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   819ce:	79bb      	ldrb	r3, [r7, #6]
   819d0:	f023 030f 	bic.w	r3, r3, #15
   819d4:	b2da      	uxtb	r2, r3
   819d6:	79fb      	ldrb	r3, [r7, #7]
   819d8:	4313      	orrs	r3, r2
   819da:	b2db      	uxtb	r3, r3
   819dc:	f043 0304 	orr.w	r3, r3, #4
   819e0:	b2da      	uxtb	r2, r3
   819e2:	68fb      	ldr	r3, [r7, #12]
   819e4:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   819e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
   819ea:	f023 030f 	bic.w	r3, r3, #15
   819ee:	b25a      	sxtb	r2, r3
   819f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   819f4:	4313      	orrs	r3, r2
   819f6:	b25b      	sxtb	r3, r3
   819f8:	b2da      	uxtb	r2, r3
   819fa:	68fb      	ldr	r3, [r7, #12]
   819fc:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   819fe:	79bb      	ldrb	r3, [r7, #6]
   81a00:	011b      	lsls	r3, r3, #4
   81a02:	b2da      	uxtb	r2, r3
   81a04:	79fb      	ldrb	r3, [r7, #7]
   81a06:	4313      	orrs	r3, r2
   81a08:	b2db      	uxtb	r3, r3
   81a0a:	f043 0304 	orr.w	r3, r3, #4
   81a0e:	b2da      	uxtb	r2, r3
   81a10:	68fb      	ldr	r3, [r7, #12]
   81a12:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81a14:	79bb      	ldrb	r3, [r7, #6]
   81a16:	011b      	lsls	r3, r3, #4
   81a18:	b25a      	sxtb	r2, r3
   81a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a1e:	4313      	orrs	r3, r2
   81a20:	b25b      	sxtb	r3, r3
   81a22:	b2da      	uxtb	r2, r3
   81a24:	68fb      	ldr	r3, [r7, #12]
   81a26:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   81a28:	68fb      	ldr	r3, [r7, #12]
   81a2a:	2204      	movs	r2, #4
   81a2c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   81a30:	4b0a      	ldr	r3, [pc, #40]	; (81a5c <send_byte+0x118>)
   81a32:	2201      	movs	r2, #1
   81a34:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81a36:	68f9      	ldr	r1, [r7, #12]
   81a38:	480d      	ldr	r0, [pc, #52]	; (81a70 <send_byte+0x12c>)
   81a3a:	4b11      	ldr	r3, [pc, #68]	; (81a80 <send_byte+0x13c>)
   81a3c:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81a3e:	4b05      	ldr	r3, [pc, #20]	; (81a54 <send_byte+0x110>)
   81a40:	4798      	blx	r3
   81a42:	4602      	mov	r2, r0
   81a44:	4b04      	ldr	r3, [pc, #16]	; (81a58 <send_byte+0x114>)
   81a46:	601a      	str	r2, [r3, #0]
}
   81a48:	bf00      	nop
   81a4a:	3710      	adds	r7, #16
   81a4c:	46bd      	mov	sp, r7
   81a4e:	bd80      	pop	{r7, pc}
   81a50:	00080f0d 	.word	0x00080f0d
   81a54:	00082eb5 	.word	0x00082eb5
   81a58:	20070da8 	.word	0x20070da8
   81a5c:	20070da6 	.word	0x20070da6
   81a60:	20070dac 	.word	0x20070dac
   81a64:	4008c100 	.word	0x4008c100
   81a68:	0008024d 	.word	0x0008024d
   81a6c:	20070db0 	.word	0x20070db0
   81a70:	4008c000 	.word	0x4008c000
   81a74:	000814b1 	.word	0x000814b1
   81a78:	00080ef9 	.word	0x00080ef9
   81a7c:	20070da5 	.word	0x20070da5
   81a80:	0008100d 	.word	0x0008100d

00081a84 <lcd_callback>:

static void lcd_callback(void)
{
   81a84:	b480      	push	{r7}
   81a86:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   81a88:	4b03      	ldr	r3, [pc, #12]	; (81a98 <lcd_callback+0x14>)
   81a8a:	2200      	movs	r2, #0
   81a8c:	701a      	strb	r2, [r3, #0]
}
   81a8e:	bf00      	nop
   81a90:	46bd      	mov	sp, r7
   81a92:	bc80      	pop	{r7}
   81a94:	4770      	bx	lr
   81a96:	bf00      	nop
   81a98:	20070da6 	.word	0x20070da6

00081a9c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   81a9c:	b480      	push	{r7}
   81a9e:	b08b      	sub	sp, #44	; 0x2c
   81aa0:	af00      	add	r7, sp, #0
   81aa2:	6078      	str	r0, [r7, #4]
   81aa4:	460b      	mov	r3, r1
   81aa6:	70fb      	strb	r3, [r7, #3]
   81aa8:	687b      	ldr	r3, [r7, #4]
   81aaa:	627b      	str	r3, [r7, #36]	; 0x24
   81aac:	78fb      	ldrb	r3, [r7, #3]
   81aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81ab4:	61fb      	str	r3, [r7, #28]
   81ab6:	69fb      	ldr	r3, [r7, #28]
   81ab8:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81aba:	69bb      	ldr	r3, [r7, #24]
   81abc:	095b      	lsrs	r3, r3, #5
   81abe:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81ac0:	697b      	ldr	r3, [r7, #20]
   81ac2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81ac6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81aca:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   81acc:	613b      	str	r3, [r7, #16]

	if (level) {
   81ace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81ad2:	2b00      	cmp	r3, #0
   81ad4:	d009      	beq.n	81aea <ioport_set_pin_level+0x4e>
   81ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81ad8:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81ada:	68fb      	ldr	r3, [r7, #12]
   81adc:	f003 031f 	and.w	r3, r3, #31
   81ae0:	2201      	movs	r2, #1
   81ae2:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81ae4:	693b      	ldr	r3, [r7, #16]
   81ae6:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   81ae8:	e008      	b.n	81afc <ioport_set_pin_level+0x60>
   81aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81aec:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   81aee:	68bb      	ldr	r3, [r7, #8]
   81af0:	f003 031f 	and.w	r3, r3, #31
   81af4:	2201      	movs	r2, #1
   81af6:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81af8:	693b      	ldr	r3, [r7, #16]
   81afa:	635a      	str	r2, [r3, #52]	; 0x34
   81afc:	bf00      	nop
   81afe:	372c      	adds	r7, #44	; 0x2c
   81b00:	46bd      	mov	sp, r7
   81b02:	bc80      	pop	{r7}
   81b04:	4770      	bx	lr

00081b06 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   81b06:	b480      	push	{r7}
   81b08:	b089      	sub	sp, #36	; 0x24
   81b0a:	af00      	add	r7, sp, #0
   81b0c:	6078      	str	r0, [r7, #4]
   81b0e:	687b      	ldr	r3, [r7, #4]
   81b10:	61fb      	str	r3, [r7, #28]
   81b12:	69fb      	ldr	r3, [r7, #28]
   81b14:	61bb      	str	r3, [r7, #24]
   81b16:	69bb      	ldr	r3, [r7, #24]
   81b18:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   81b1a:	697b      	ldr	r3, [r7, #20]
   81b1c:	095b      	lsrs	r3, r3, #5
   81b1e:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81b20:	693b      	ldr	r3, [r7, #16]
   81b22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81b26:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81b2a:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   81b2e:	69fb      	ldr	r3, [r7, #28]
   81b30:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81b32:	68fb      	ldr	r3, [r7, #12]
   81b34:	f003 031f 	and.w	r3, r3, #31
   81b38:	2101      	movs	r1, #1
   81b3a:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81b3e:	4013      	ands	r3, r2
   81b40:	2b00      	cmp	r3, #0
   81b42:	bf14      	ite	ne
   81b44:	2301      	movne	r3, #1
   81b46:	2300      	moveq	r3, #0
   81b48:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   81b4a:	4618      	mov	r0, r3
   81b4c:	3724      	adds	r7, #36	; 0x24
   81b4e:	46bd      	mov	sp, r7
   81b50:	bc80      	pop	{r7}
   81b52:	4770      	bx	lr

00081b54 <menu>:
static void print_menu_sensors(void);
static void print_menu_settings(void);
static void print_cursor(menu_info_t *info);

void menu(event_t event1)
{
   81b54:	b580      	push	{r7, lr}
   81b56:	b082      	sub	sp, #8
   81b58:	af00      	add	r7, sp, #0
   81b5a:	4603      	mov	r3, r0
   81b5c:	71fb      	strb	r3, [r7, #7]
    switch (act_menu)
   81b5e:	4b28      	ldr	r3, [pc, #160]	; (81c00 <menu+0xac>)
   81b60:	781b      	ldrb	r3, [r3, #0]
   81b62:	2b09      	cmp	r3, #9
   81b64:	d847      	bhi.n	81bf6 <menu+0xa2>
   81b66:	a201      	add	r2, pc, #4	; (adr r2, 81b6c <menu+0x18>)
   81b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81b6c:	00081b95 	.word	0x00081b95
   81b70:	00081b9f 	.word	0x00081b9f
   81b74:	00081ba9 	.word	0x00081ba9
   81b78:	00081bb3 	.word	0x00081bb3
   81b7c:	00081bbd 	.word	0x00081bbd
   81b80:	00081bdb 	.word	0x00081bdb
   81b84:	00081be5 	.word	0x00081be5
   81b88:	00081bc7 	.word	0x00081bc7
   81b8c:	00081bd1 	.word	0x00081bd1
   81b90:	00081bef 	.word	0x00081bef
    {
        case MENU_MAIN:
            menu_main(event1);
   81b94:	79fb      	ldrb	r3, [r7, #7]
   81b96:	4618      	mov	r0, r3
   81b98:	4b1a      	ldr	r3, [pc, #104]	; (81c04 <menu+0xb0>)
   81b9a:	4798      	blx	r3
            break;
   81b9c:	e02c      	b.n	81bf8 <menu+0xa4>
        case MENU_MATCH:
            menu_match(event1);
   81b9e:	79fb      	ldrb	r3, [r7, #7]
   81ba0:	4618      	mov	r0, r3
   81ba2:	4b19      	ldr	r3, [pc, #100]	; (81c08 <menu+0xb4>)
   81ba4:	4798      	blx	r3
            break;
   81ba6:	e027      	b.n	81bf8 <menu+0xa4>
        case MENU_SENSORS:
            menu_sensors(event1);
   81ba8:	79fb      	ldrb	r3, [r7, #7]
   81baa:	4618      	mov	r0, r3
   81bac:	4b17      	ldr	r3, [pc, #92]	; (81c0c <menu+0xb8>)
   81bae:	4798      	blx	r3
            break;
   81bb0:	e022      	b.n	81bf8 <menu+0xa4>
        case MENU_SETTINGS:
            menu_settings(event1);
   81bb2:	79fb      	ldrb	r3, [r7, #7]
   81bb4:	4618      	mov	r0, r3
   81bb6:	4b16      	ldr	r3, [pc, #88]	; (81c10 <menu+0xbc>)
   81bb8:	4798      	blx	r3
            break;
   81bba:	e01d      	b.n	81bf8 <menu+0xa4>
        case MENU_BALL:
            menu_ball(event1);
   81bbc:	79fb      	ldrb	r3, [r7, #7]
   81bbe:	4618      	mov	r0, r3
   81bc0:	4b14      	ldr	r3, [pc, #80]	; (81c14 <menu+0xc0>)
   81bc2:	4798      	blx	r3
            break;
   81bc4:	e018      	b.n	81bf8 <menu+0xa4>
        case MENU_COMPASS:
            menu_compass(event1);
   81bc6:	79fb      	ldrb	r3, [r7, #7]
   81bc8:	4618      	mov	r0, r3
   81bca:	4b13      	ldr	r3, [pc, #76]	; (81c18 <menu+0xc4>)
   81bcc:	4798      	blx	r3
            break;
   81bce:	e013      	b.n	81bf8 <menu+0xa4>
        case MENU_COMPASS_CALIBRATION:
            menu_compass_calibration(event1);
   81bd0:	79fb      	ldrb	r3, [r7, #7]
   81bd2:	4618      	mov	r0, r3
   81bd4:	4b11      	ldr	r3, [pc, #68]	; (81c1c <menu+0xc8>)
   81bd6:	4798      	blx	r3
            break;
   81bd8:	e00e      	b.n	81bf8 <menu+0xa4>
        case MENU_LINE:
            menu_line(event1);
   81bda:	79fb      	ldrb	r3, [r7, #7]
   81bdc:	4618      	mov	r0, r3
   81bde:	4b10      	ldr	r3, [pc, #64]	; (81c20 <menu+0xcc>)
   81be0:	4798      	blx	r3
            break;
   81be2:	e009      	b.n	81bf8 <menu+0xa4>
        case MENU_LINE_CALIBRATION:
            menu_line_calibration(event1);
   81be4:	79fb      	ldrb	r3, [r7, #7]
   81be6:	4618      	mov	r0, r3
   81be8:	4b0e      	ldr	r3, [pc, #56]	; (81c24 <menu+0xd0>)
   81bea:	4798      	blx	r3
            break;
   81bec:	e004      	b.n	81bf8 <menu+0xa4>
        case MENU_SHUTDOWN:
            menu_shutdown(event1);
   81bee:	79fb      	ldrb	r3, [r7, #7]
   81bf0:	4618      	mov	r0, r3
   81bf2:	4b0d      	ldr	r3, [pc, #52]	; (81c28 <menu+0xd4>)
   81bf4:	4798      	blx	r3
        default:
            break;
   81bf6:	bf00      	nop
    }
}
   81bf8:	bf00      	nop
   81bfa:	3708      	adds	r7, #8
   81bfc:	46bd      	mov	sp, r7
   81bfe:	bd80      	pop	{r7, pc}
   81c00:	20070dbc 	.word	0x20070dbc
   81c04:	00081c2d 	.word	0x00081c2d
   81c08:	00081d55 	.word	0x00081d55
   81c0c:	00081d85 	.word	0x00081d85
   81c10:	00082131 	.word	0x00082131
   81c14:	00081ea9 	.word	0x00081ea9
   81c18:	00081efd 	.word	0x00081efd
   81c1c:	00081fd1 	.word	0x00081fd1
   81c20:	000820d1 	.word	0x000820d1
   81c24:	00082101 	.word	0x00082101
   81c28:	00082255 	.word	0x00082255

00081c2c <menu_main>:

static void menu_main(event_t event1)
{
   81c2c:	b580      	push	{r7, lr}
   81c2e:	b082      	sub	sp, #8
   81c30:	af00      	add	r7, sp, #0
   81c32:	4603      	mov	r3, r0
   81c34:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   81c36:	4b41      	ldr	r3, [pc, #260]	; (81d3c <menu_main+0x110>)
   81c38:	781b      	ldrb	r3, [r3, #0]
   81c3a:	2b00      	cmp	r3, #0
   81c3c:	d004      	beq.n	81c48 <menu_main+0x1c>
    {
        print_menu = 0;
   81c3e:	4b3f      	ldr	r3, [pc, #252]	; (81d3c <menu_main+0x110>)
   81c40:	2200      	movs	r2, #0
   81c42:	701a      	strb	r2, [r3, #0]
        print_menu_main();
   81c44:	4b3e      	ldr	r3, [pc, #248]	; (81d40 <menu_main+0x114>)
   81c46:	4798      	blx	r3
    }
    
    update_battery(0);
   81c48:	2000      	movs	r0, #0
   81c4a:	4b3e      	ldr	r3, [pc, #248]	; (81d44 <menu_main+0x118>)
   81c4c:	4798      	blx	r3
    
    switch (event1)
   81c4e:	79fb      	ldrb	r3, [r7, #7]
   81c50:	3b01      	subs	r3, #1
   81c52:	2b0f      	cmp	r3, #15
   81c54:	d868      	bhi.n	81d28 <menu_main+0xfc>
   81c56:	a201      	add	r2, pc, #4	; (adr r2, 81c5c <menu_main+0x30>)
   81c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81c5c:	00081c9d 	.word	0x00081c9d
   81c60:	00081d29 	.word	0x00081d29
   81c64:	00081d29 	.word	0x00081d29
   81c68:	00081d29 	.word	0x00081d29
   81c6c:	00081d29 	.word	0x00081d29
   81c70:	00081d29 	.word	0x00081d29
   81c74:	00081cdd 	.word	0x00081cdd
   81c78:	00081d29 	.word	0x00081d29
   81c7c:	00081d29 	.word	0x00081d29
   81c80:	00081d29 	.word	0x00081d29
   81c84:	00081d29 	.word	0x00081d29
   81c88:	00081d29 	.word	0x00081d29
   81c8c:	00081cbd 	.word	0x00081cbd
   81c90:	00081d29 	.word	0x00081d29
   81c94:	00081d29 	.word	0x00081d29
   81c98:	00081d1b 	.word	0x00081d1b
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.main.act_cursor_line > menu_info.main.min_cursor_line)
   81c9c:	4b2a      	ldr	r3, [pc, #168]	; (81d48 <menu_main+0x11c>)
   81c9e:	781a      	ldrb	r2, [r3, #0]
   81ca0:	4b29      	ldr	r3, [pc, #164]	; (81d48 <menu_main+0x11c>)
   81ca2:	789b      	ldrb	r3, [r3, #2]
   81ca4:	429a      	cmp	r2, r3
   81ca6:	d941      	bls.n	81d2c <menu_main+0x100>
            {
                menu_info.main.act_cursor_line--;
   81ca8:	4b27      	ldr	r3, [pc, #156]	; (81d48 <menu_main+0x11c>)
   81caa:	781b      	ldrb	r3, [r3, #0]
   81cac:	3b01      	subs	r3, #1
   81cae:	b2da      	uxtb	r2, r3
   81cb0:	4b25      	ldr	r3, [pc, #148]	; (81d48 <menu_main+0x11c>)
   81cb2:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   81cb4:	4824      	ldr	r0, [pc, #144]	; (81d48 <menu_main+0x11c>)
   81cb6:	4b25      	ldr	r3, [pc, #148]	; (81d4c <menu_main+0x120>)
   81cb8:	4798      	blx	r3
            }
            break;
   81cba:	e037      	b.n	81d2c <menu_main+0x100>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.main.act_cursor_line < menu_info.main.max_cursor_line)
   81cbc:	4b22      	ldr	r3, [pc, #136]	; (81d48 <menu_main+0x11c>)
   81cbe:	781a      	ldrb	r2, [r3, #0]
   81cc0:	4b21      	ldr	r3, [pc, #132]	; (81d48 <menu_main+0x11c>)
   81cc2:	78db      	ldrb	r3, [r3, #3]
   81cc4:	429a      	cmp	r2, r3
   81cc6:	d233      	bcs.n	81d30 <menu_main+0x104>
            {
                menu_info.main.act_cursor_line++;
   81cc8:	4b1f      	ldr	r3, [pc, #124]	; (81d48 <menu_main+0x11c>)
   81cca:	781b      	ldrb	r3, [r3, #0]
   81ccc:	3301      	adds	r3, #1
   81cce:	b2da      	uxtb	r2, r3
   81cd0:	4b1d      	ldr	r3, [pc, #116]	; (81d48 <menu_main+0x11c>)
   81cd2:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   81cd4:	481c      	ldr	r0, [pc, #112]	; (81d48 <menu_main+0x11c>)
   81cd6:	4b1d      	ldr	r3, [pc, #116]	; (81d4c <menu_main+0x120>)
   81cd8:	4798      	blx	r3
            }
            break;
   81cda:	e029      	b.n	81d30 <menu_main+0x104>
        case EVENT_BUTTON_MID_P:
            {
                switch (menu_info.main.act_cursor_line)
   81cdc:	4b1a      	ldr	r3, [pc, #104]	; (81d48 <menu_main+0x11c>)
   81cde:	781b      	ldrb	r3, [r3, #0]
   81ce0:	2b03      	cmp	r3, #3
   81ce2:	d00b      	beq.n	81cfc <menu_main+0xd0>
   81ce4:	2b04      	cmp	r3, #4
   81ce6:	d010      	beq.n	81d0a <menu_main+0xde>
   81ce8:	2b02      	cmp	r3, #2
   81cea:	d000      	beq.n	81cee <menu_main+0xc2>
                    case 4:
                        act_menu = MENU_SETTINGS;
                        print_menu = 1;
                        break;
                    default:
                        break;
   81cec:	e014      	b.n	81d18 <menu_main+0xec>
                        act_menu = MENU_MATCH;
   81cee:	4b18      	ldr	r3, [pc, #96]	; (81d50 <menu_main+0x124>)
   81cf0:	2201      	movs	r2, #1
   81cf2:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81cf4:	4b11      	ldr	r3, [pc, #68]	; (81d3c <menu_main+0x110>)
   81cf6:	2201      	movs	r2, #1
   81cf8:	701a      	strb	r2, [r3, #0]
                        break;
   81cfa:	e00d      	b.n	81d18 <menu_main+0xec>
                        act_menu = MENU_SENSORS;
   81cfc:	4b14      	ldr	r3, [pc, #80]	; (81d50 <menu_main+0x124>)
   81cfe:	2202      	movs	r2, #2
   81d00:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81d02:	4b0e      	ldr	r3, [pc, #56]	; (81d3c <menu_main+0x110>)
   81d04:	2201      	movs	r2, #1
   81d06:	701a      	strb	r2, [r3, #0]
                        break;
   81d08:	e006      	b.n	81d18 <menu_main+0xec>
                        act_menu = MENU_SETTINGS;
   81d0a:	4b11      	ldr	r3, [pc, #68]	; (81d50 <menu_main+0x124>)
   81d0c:	2203      	movs	r2, #3
   81d0e:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81d10:	4b0a      	ldr	r3, [pc, #40]	; (81d3c <menu_main+0x110>)
   81d12:	2201      	movs	r2, #1
   81d14:	701a      	strb	r2, [r3, #0]
                        break;
   81d16:	bf00      	nop
                }
            }
            break;
   81d18:	e00b      	b.n	81d32 <menu_main+0x106>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SHUTDOWN;
   81d1a:	4b0d      	ldr	r3, [pc, #52]	; (81d50 <menu_main+0x124>)
   81d1c:	2209      	movs	r2, #9
   81d1e:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81d20:	4b06      	ldr	r3, [pc, #24]	; (81d3c <menu_main+0x110>)
   81d22:	2201      	movs	r2, #1
   81d24:	701a      	strb	r2, [r3, #0]
            break;
   81d26:	e004      	b.n	81d32 <menu_main+0x106>
        default:
            break;
   81d28:	bf00      	nop
   81d2a:	e002      	b.n	81d32 <menu_main+0x106>
            break;
   81d2c:	bf00      	nop
   81d2e:	e000      	b.n	81d32 <menu_main+0x106>
            break;
   81d30:	bf00      	nop
    }
}
   81d32:	bf00      	nop
   81d34:	3708      	adds	r7, #8
   81d36:	46bd      	mov	sp, r7
   81d38:	bd80      	pop	{r7, pc}
   81d3a:	bf00      	nop
   81d3c:	2007018c 	.word	0x2007018c
   81d40:	00082365 	.word	0x00082365
   81d44:	00082f3d 	.word	0x00082f3d
   81d48:	20070190 	.word	0x20070190
   81d4c:	000824a5 	.word	0x000824a5
   81d50:	20070dbc 	.word	0x20070dbc

00081d54 <menu_match>:

static void menu_match(event_t event1)
{
   81d54:	b480      	push	{r7}
   81d56:	b083      	sub	sp, #12
   81d58:	af00      	add	r7, sp, #0
   81d5a:	4603      	mov	r3, r0
   81d5c:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81d5e:	79fb      	ldrb	r3, [r7, #7]
   81d60:	2b10      	cmp	r3, #16
   81d62:	d105      	bne.n	81d70 <menu_match+0x1c>
    {
        act_menu = MENU_MAIN;
   81d64:	4b05      	ldr	r3, [pc, #20]	; (81d7c <menu_match+0x28>)
   81d66:	2200      	movs	r2, #0
   81d68:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81d6a:	4b05      	ldr	r3, [pc, #20]	; (81d80 <menu_match+0x2c>)
   81d6c:	2201      	movs	r2, #1
   81d6e:	701a      	strb	r2, [r3, #0]
    }
}
   81d70:	bf00      	nop
   81d72:	370c      	adds	r7, #12
   81d74:	46bd      	mov	sp, r7
   81d76:	bc80      	pop	{r7}
   81d78:	4770      	bx	lr
   81d7a:	bf00      	nop
   81d7c:	20070dbc 	.word	0x20070dbc
   81d80:	2007018c 	.word	0x2007018c

00081d84 <menu_sensors>:

static void menu_sensors(event_t event1)
{
   81d84:	b580      	push	{r7, lr}
   81d86:	b082      	sub	sp, #8
   81d88:	af00      	add	r7, sp, #0
   81d8a:	4603      	mov	r3, r0
   81d8c:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   81d8e:	4b40      	ldr	r3, [pc, #256]	; (81e90 <menu_sensors+0x10c>)
   81d90:	781b      	ldrb	r3, [r3, #0]
   81d92:	2b00      	cmp	r3, #0
   81d94:	d004      	beq.n	81da0 <menu_sensors+0x1c>
    {
        print_menu = 0;
   81d96:	4b3e      	ldr	r3, [pc, #248]	; (81e90 <menu_sensors+0x10c>)
   81d98:	2200      	movs	r2, #0
   81d9a:	701a      	strb	r2, [r3, #0]
        print_menu_sensors();
   81d9c:	4b3d      	ldr	r3, [pc, #244]	; (81e94 <menu_sensors+0x110>)
   81d9e:	4798      	blx	r3
    }
    
    switch(event1)
   81da0:	79fb      	ldrb	r3, [r7, #7]
   81da2:	3b01      	subs	r3, #1
   81da4:	2b0f      	cmp	r3, #15
   81da6:	d869      	bhi.n	81e7c <menu_sensors+0xf8>
   81da8:	a201      	add	r2, pc, #4	; (adr r2, 81db0 <menu_sensors+0x2c>)
   81daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81dae:	bf00      	nop
   81db0:	00081df1 	.word	0x00081df1
   81db4:	00081e7d 	.word	0x00081e7d
   81db8:	00081e7d 	.word	0x00081e7d
   81dbc:	00081e7d 	.word	0x00081e7d
   81dc0:	00081e7d 	.word	0x00081e7d
   81dc4:	00081e7d 	.word	0x00081e7d
   81dc8:	00081e31 	.word	0x00081e31
   81dcc:	00081e7d 	.word	0x00081e7d
   81dd0:	00081e7d 	.word	0x00081e7d
   81dd4:	00081e7d 	.word	0x00081e7d
   81dd8:	00081e7d 	.word	0x00081e7d
   81ddc:	00081e7d 	.word	0x00081e7d
   81de0:	00081e11 	.word	0x00081e11
   81de4:	00081e7d 	.word	0x00081e7d
   81de8:	00081e7d 	.word	0x00081e7d
   81dec:	00081e6f 	.word	0x00081e6f
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.sensors.act_cursor_line > menu_info.sensors.min_cursor_line)
   81df0:	4b29      	ldr	r3, [pc, #164]	; (81e98 <menu_sensors+0x114>)
   81df2:	791a      	ldrb	r2, [r3, #4]
   81df4:	4b28      	ldr	r3, [pc, #160]	; (81e98 <menu_sensors+0x114>)
   81df6:	799b      	ldrb	r3, [r3, #6]
   81df8:	429a      	cmp	r2, r3
   81dfa:	d941      	bls.n	81e80 <menu_sensors+0xfc>
            {
                menu_info.sensors.act_cursor_line--;
   81dfc:	4b26      	ldr	r3, [pc, #152]	; (81e98 <menu_sensors+0x114>)
   81dfe:	791b      	ldrb	r3, [r3, #4]
   81e00:	3b01      	subs	r3, #1
   81e02:	b2da      	uxtb	r2, r3
   81e04:	4b24      	ldr	r3, [pc, #144]	; (81e98 <menu_sensors+0x114>)
   81e06:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   81e08:	4824      	ldr	r0, [pc, #144]	; (81e9c <menu_sensors+0x118>)
   81e0a:	4b25      	ldr	r3, [pc, #148]	; (81ea0 <menu_sensors+0x11c>)
   81e0c:	4798      	blx	r3
            }
            break;
   81e0e:	e037      	b.n	81e80 <menu_sensors+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.sensors.act_cursor_line < menu_info.sensors.max_cursor_line)
   81e10:	4b21      	ldr	r3, [pc, #132]	; (81e98 <menu_sensors+0x114>)
   81e12:	791a      	ldrb	r2, [r3, #4]
   81e14:	4b20      	ldr	r3, [pc, #128]	; (81e98 <menu_sensors+0x114>)
   81e16:	79db      	ldrb	r3, [r3, #7]
   81e18:	429a      	cmp	r2, r3
   81e1a:	d233      	bcs.n	81e84 <menu_sensors+0x100>
            {
                menu_info.sensors.act_cursor_line++;
   81e1c:	4b1e      	ldr	r3, [pc, #120]	; (81e98 <menu_sensors+0x114>)
   81e1e:	791b      	ldrb	r3, [r3, #4]
   81e20:	3301      	adds	r3, #1
   81e22:	b2da      	uxtb	r2, r3
   81e24:	4b1c      	ldr	r3, [pc, #112]	; (81e98 <menu_sensors+0x114>)
   81e26:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   81e28:	481c      	ldr	r0, [pc, #112]	; (81e9c <menu_sensors+0x118>)
   81e2a:	4b1d      	ldr	r3, [pc, #116]	; (81ea0 <menu_sensors+0x11c>)
   81e2c:	4798      	blx	r3
            }
            break;
   81e2e:	e029      	b.n	81e84 <menu_sensors+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.sensors.act_cursor_line)
   81e30:	4b19      	ldr	r3, [pc, #100]	; (81e98 <menu_sensors+0x114>)
   81e32:	791b      	ldrb	r3, [r3, #4]
   81e34:	2b02      	cmp	r3, #2
   81e36:	d00b      	beq.n	81e50 <menu_sensors+0xcc>
   81e38:	2b03      	cmp	r3, #3
   81e3a:	d010      	beq.n	81e5e <menu_sensors+0xda>
   81e3c:	2b01      	cmp	r3, #1
   81e3e:	d000      	beq.n	81e42 <menu_sensors+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   81e40:	e014      	b.n	81e6c <menu_sensors+0xe8>
                    act_menu = MENU_BALL;
   81e42:	4b18      	ldr	r3, [pc, #96]	; (81ea4 <menu_sensors+0x120>)
   81e44:	2204      	movs	r2, #4
   81e46:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81e48:	4b11      	ldr	r3, [pc, #68]	; (81e90 <menu_sensors+0x10c>)
   81e4a:	2201      	movs	r2, #1
   81e4c:	701a      	strb	r2, [r3, #0]
                    break;
   81e4e:	e00d      	b.n	81e6c <menu_sensors+0xe8>
                    act_menu = MENU_COMPASS;
   81e50:	4b14      	ldr	r3, [pc, #80]	; (81ea4 <menu_sensors+0x120>)
   81e52:	2207      	movs	r2, #7
   81e54:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81e56:	4b0e      	ldr	r3, [pc, #56]	; (81e90 <menu_sensors+0x10c>)
   81e58:	2201      	movs	r2, #1
   81e5a:	701a      	strb	r2, [r3, #0]
                    break;
   81e5c:	e006      	b.n	81e6c <menu_sensors+0xe8>
                    act_menu = MENU_LINE;
   81e5e:	4b11      	ldr	r3, [pc, #68]	; (81ea4 <menu_sensors+0x120>)
   81e60:	2205      	movs	r2, #5
   81e62:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81e64:	4b0a      	ldr	r3, [pc, #40]	; (81e90 <menu_sensors+0x10c>)
   81e66:	2201      	movs	r2, #1
   81e68:	701a      	strb	r2, [r3, #0]
                    break;
   81e6a:	bf00      	nop
            }
            break;
   81e6c:	e00b      	b.n	81e86 <menu_sensors+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   81e6e:	4b0d      	ldr	r3, [pc, #52]	; (81ea4 <menu_sensors+0x120>)
   81e70:	2200      	movs	r2, #0
   81e72:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81e74:	4b06      	ldr	r3, [pc, #24]	; (81e90 <menu_sensors+0x10c>)
   81e76:	2201      	movs	r2, #1
   81e78:	701a      	strb	r2, [r3, #0]
            break;
   81e7a:	e004      	b.n	81e86 <menu_sensors+0x102>
        default:
            break;
   81e7c:	bf00      	nop
   81e7e:	e002      	b.n	81e86 <menu_sensors+0x102>
            break;
   81e80:	bf00      	nop
   81e82:	e000      	b.n	81e86 <menu_sensors+0x102>
            break;
   81e84:	bf00      	nop
    }
}
   81e86:	bf00      	nop
   81e88:	3708      	adds	r7, #8
   81e8a:	46bd      	mov	sp, r7
   81e8c:	bd80      	pop	{r7, pc}
   81e8e:	bf00      	nop
   81e90:	2007018c 	.word	0x2007018c
   81e94:	000823d5 	.word	0x000823d5
   81e98:	20070190 	.word	0x20070190
   81e9c:	20070194 	.word	0x20070194
   81ea0:	000824a5 	.word	0x000824a5
   81ea4:	20070dbc 	.word	0x20070dbc

00081ea8 <menu_ball>:

static void menu_ball(event_t event1)
{
   81ea8:	b580      	push	{r7, lr}
   81eaa:	b082      	sub	sp, #8
   81eac:	af00      	add	r7, sp, #0
   81eae:	4603      	mov	r3, r0
   81eb0:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   81eb2:	4b0d      	ldr	r3, [pc, #52]	; (81ee8 <menu_ball+0x40>)
   81eb4:	781b      	ldrb	r3, [r3, #0]
   81eb6:	2b00      	cmp	r3, #0
   81eb8:	d004      	beq.n	81ec4 <menu_ball+0x1c>
    {
        print_menu = 0;
   81eba:	4b0b      	ldr	r3, [pc, #44]	; (81ee8 <menu_ball+0x40>)
   81ebc:	2200      	movs	r2, #0
   81ebe:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81ec0:	4b0a      	ldr	r3, [pc, #40]	; (81eec <menu_ball+0x44>)
   81ec2:	4798      	blx	r3
    {
        lcd_print_s(2, 0, "Direction: no ball");
    }
    
    sprintf(sprintf_buf, "Having ball: %1d", rpi_rx.ibit.have_ball);*/
    lcd_print_s(3, 0, sprintf_buf);
   81ec4:	4a0a      	ldr	r2, [pc, #40]	; (81ef0 <menu_ball+0x48>)
   81ec6:	2100      	movs	r1, #0
   81ec8:	2003      	movs	r0, #3
   81eca:	4b0a      	ldr	r3, [pc, #40]	; (81ef4 <menu_ball+0x4c>)
   81ecc:	4798      	blx	r3
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81ece:	79fb      	ldrb	r3, [r7, #7]
   81ed0:	2b10      	cmp	r3, #16
   81ed2:	d105      	bne.n	81ee0 <menu_ball+0x38>
    {
        act_menu = MENU_SENSORS;
   81ed4:	4b08      	ldr	r3, [pc, #32]	; (81ef8 <menu_ball+0x50>)
   81ed6:	2202      	movs	r2, #2
   81ed8:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81eda:	4b03      	ldr	r3, [pc, #12]	; (81ee8 <menu_ball+0x40>)
   81edc:	2201      	movs	r2, #1
   81ede:	701a      	strb	r2, [r3, #0]
    }
}
   81ee0:	bf00      	nop
   81ee2:	3708      	adds	r7, #8
   81ee4:	46bd      	mov	sp, r7
   81ee6:	bd80      	pop	{r7, pc}
   81ee8:	2007018c 	.word	0x2007018c
   81eec:	000815e1 	.word	0x000815e1
   81ef0:	20070e4c 	.word	0x20070e4c
   81ef4:	00081601 	.word	0x00081601
   81ef8:	20070dbc 	.word	0x20070dbc

00081efc <menu_compass>:

static void menu_compass(event_t event1)
{
   81efc:	b590      	push	{r4, r7, lr}
   81efe:	b083      	sub	sp, #12
   81f00:	af00      	add	r7, sp, #0
   81f02:	4603      	mov	r3, r0
   81f04:	71fb      	strb	r3, [r7, #7]
    static uint16_t prev_direction = 0;
    
    if(print_menu)
   81f06:	4b24      	ldr	r3, [pc, #144]	; (81f98 <menu_compass+0x9c>)
   81f08:	781b      	ldrb	r3, [r3, #0]
   81f0a:	2b00      	cmp	r3, #0
   81f0c:	d004      	beq.n	81f18 <menu_compass+0x1c>
    {
        print_menu = 0;
   81f0e:	4b22      	ldr	r3, [pc, #136]	; (81f98 <menu_compass+0x9c>)
   81f10:	2200      	movs	r2, #0
   81f12:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81f14:	4b21      	ldr	r3, [pc, #132]	; (81f9c <menu_compass+0xa0>)
   81f16:	4798      	blx	r3
    }
    
    update_compass();
   81f18:	4b21      	ldr	r3, [pc, #132]	; (81fa0 <menu_compass+0xa4>)
   81f1a:	4798      	blx	r3
    if(direction != prev_direction)
   81f1c:	4b21      	ldr	r3, [pc, #132]	; (81fa4 <menu_compass+0xa8>)
   81f1e:	881a      	ldrh	r2, [r3, #0]
   81f20:	4b21      	ldr	r3, [pc, #132]	; (81fa8 <menu_compass+0xac>)
   81f22:	881b      	ldrh	r3, [r3, #0]
   81f24:	429a      	cmp	r2, r3
   81f26:	d01e      	beq.n	81f66 <menu_compass+0x6a>
    {
        prev_direction = direction;
   81f28:	4b1e      	ldr	r3, [pc, #120]	; (81fa4 <menu_compass+0xa8>)
   81f2a:	881a      	ldrh	r2, [r3, #0]
   81f2c:	4b1e      	ldr	r3, [pc, #120]	; (81fa8 <menu_compass+0xac>)
   81f2e:	801a      	strh	r2, [r3, #0]
        sprintf(sprintf_buf, "  Direction: %3.1f  ", (float)direction / 10.0);
   81f30:	4b1c      	ldr	r3, [pc, #112]	; (81fa4 <menu_compass+0xa8>)
   81f32:	881a      	ldrh	r2, [r3, #0]
   81f34:	4b1d      	ldr	r3, [pc, #116]	; (81fac <menu_compass+0xb0>)
   81f36:	4610      	mov	r0, r2
   81f38:	4798      	blx	r3
   81f3a:	4602      	mov	r2, r0
   81f3c:	4b1c      	ldr	r3, [pc, #112]	; (81fb0 <menu_compass+0xb4>)
   81f3e:	4610      	mov	r0, r2
   81f40:	4798      	blx	r3
   81f42:	4c1c      	ldr	r4, [pc, #112]	; (81fb4 <menu_compass+0xb8>)
   81f44:	f04f 0200 	mov.w	r2, #0
   81f48:	4b1b      	ldr	r3, [pc, #108]	; (81fb8 <menu_compass+0xbc>)
   81f4a:	47a0      	blx	r4
   81f4c:	4603      	mov	r3, r0
   81f4e:	460c      	mov	r4, r1
   81f50:	461a      	mov	r2, r3
   81f52:	4623      	mov	r3, r4
   81f54:	4919      	ldr	r1, [pc, #100]	; (81fbc <menu_compass+0xc0>)
   81f56:	481a      	ldr	r0, [pc, #104]	; (81fc0 <menu_compass+0xc4>)
   81f58:	4c1a      	ldr	r4, [pc, #104]	; (81fc4 <menu_compass+0xc8>)
   81f5a:	47a0      	blx	r4
        lcd_print_s(2, 0, sprintf_buf);
   81f5c:	4a18      	ldr	r2, [pc, #96]	; (81fc0 <menu_compass+0xc4>)
   81f5e:	2100      	movs	r1, #0
   81f60:	2002      	movs	r0, #2
   81f62:	4b19      	ldr	r3, [pc, #100]	; (81fc8 <menu_compass+0xcc>)
   81f64:	4798      	blx	r3
    }
    
    switch(event1)
   81f66:	79fb      	ldrb	r3, [r7, #7]
   81f68:	2b07      	cmp	r3, #7
   81f6a:	d002      	beq.n	81f72 <menu_compass+0x76>
   81f6c:	2b10      	cmp	r3, #16
   81f6e:	d007      	beq.n	81f80 <menu_compass+0x84>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SENSORS;
            print_menu = 1;
            break;
        default:
            break;
   81f70:	e00d      	b.n	81f8e <menu_compass+0x92>
            act_menu = MENU_COMPASS_CALIBRATION;
   81f72:	4b16      	ldr	r3, [pc, #88]	; (81fcc <menu_compass+0xd0>)
   81f74:	2208      	movs	r2, #8
   81f76:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81f78:	4b07      	ldr	r3, [pc, #28]	; (81f98 <menu_compass+0x9c>)
   81f7a:	2201      	movs	r2, #1
   81f7c:	701a      	strb	r2, [r3, #0]
            break;
   81f7e:	e006      	b.n	81f8e <menu_compass+0x92>
            act_menu = MENU_SENSORS;
   81f80:	4b12      	ldr	r3, [pc, #72]	; (81fcc <menu_compass+0xd0>)
   81f82:	2202      	movs	r2, #2
   81f84:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81f86:	4b04      	ldr	r3, [pc, #16]	; (81f98 <menu_compass+0x9c>)
   81f88:	2201      	movs	r2, #1
   81f8a:	701a      	strb	r2, [r3, #0]
            break;
   81f8c:	bf00      	nop
    }
}
   81f8e:	bf00      	nop
   81f90:	370c      	adds	r7, #12
   81f92:	46bd      	mov	sp, r7
   81f94:	bd90      	pop	{r4, r7, pc}
   81f96:	bf00      	nop
   81f98:	2007018c 	.word	0x2007018c
   81f9c:	000815e1 	.word	0x000815e1
   81fa0:	00081335 	.word	0x00081335
   81fa4:	20070e1c 	.word	0x20070e1c
   81fa8:	20070dc0 	.word	0x20070dc0
   81fac:	00084f49 	.word	0x00084f49
   81fb0:	00084911 	.word	0x00084911
   81fb4:	00084c0d 	.word	0x00084c0d
   81fb8:	40240000 	.word	0x40240000
   81fbc:	00089518 	.word	0x00089518
   81fc0:	20070e4c 	.word	0x20070e4c
   81fc4:	000854bd 	.word	0x000854bd
   81fc8:	00081601 	.word	0x00081601
   81fcc:	20070dbc 	.word	0x20070dbc

00081fd0 <menu_compass_calibration>:

static void menu_compass_calibration(event_t event1)
{
   81fd0:	b580      	push	{r7, lr}
   81fd2:	b084      	sub	sp, #16
   81fd4:	af00      	add	r7, sp, #0
   81fd6:	4603      	mov	r3, r0
   81fd8:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   81fda:	4b2e      	ldr	r3, [pc, #184]	; (82094 <menu_compass_calibration+0xc4>)
   81fdc:	781b      	ldrb	r3, [r3, #0]
   81fde:	2b00      	cmp	r3, #0
   81fe0:	d016      	beq.n	82010 <menu_compass_calibration+0x40>
    {
        print_menu = 0;
   81fe2:	4b2c      	ldr	r3, [pc, #176]	; (82094 <menu_compass_calibration+0xc4>)
   81fe4:	2200      	movs	r2, #0
   81fe6:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81fe8:	4b2b      	ldr	r3, [pc, #172]	; (82098 <menu_compass_calibration+0xc8>)
   81fea:	4798      	blx	r3
        lcd_print_s(2, 1, "calibrate compass");
   81fec:	4a2b      	ldr	r2, [pc, #172]	; (8209c <menu_compass_calibration+0xcc>)
   81fee:	2101      	movs	r1, #1
   81ff0:	2002      	movs	r0, #2
   81ff2:	4b2b      	ldr	r3, [pc, #172]	; (820a0 <menu_compass_calibration+0xd0>)
   81ff4:	4798      	blx	r3
        sprintf(sprintf_buf, "  Direction: %1d  ", compass_cal_step + 1);
   81ff6:	4b2b      	ldr	r3, [pc, #172]	; (820a4 <menu_compass_calibration+0xd4>)
   81ff8:	781b      	ldrb	r3, [r3, #0]
   81ffa:	3301      	adds	r3, #1
   81ffc:	461a      	mov	r2, r3
   81ffe:	492a      	ldr	r1, [pc, #168]	; (820a8 <menu_compass_calibration+0xd8>)
   82000:	482a      	ldr	r0, [pc, #168]	; (820ac <menu_compass_calibration+0xdc>)
   82002:	4b2b      	ldr	r3, [pc, #172]	; (820b0 <menu_compass_calibration+0xe0>)
   82004:	4798      	blx	r3
        lcd_print_s(3, 1, sprintf_buf);
   82006:	4a29      	ldr	r2, [pc, #164]	; (820ac <menu_compass_calibration+0xdc>)
   82008:	2101      	movs	r1, #1
   8200a:	2003      	movs	r0, #3
   8200c:	4b24      	ldr	r3, [pc, #144]	; (820a0 <menu_compass_calibration+0xd0>)
   8200e:	4798      	blx	r3
    }
    
    if(event1 == EVENT_BUTTON_MID_P)
   82010:	79fb      	ldrb	r3, [r7, #7]
   82012:	2b07      	cmp	r3, #7
   82014:	d139      	bne.n	8208a <menu_compass_calibration+0xba>
    {
        twi_packet_t *tx_packet = twi_get_tx_packet();
   82016:	4b27      	ldr	r3, [pc, #156]	; (820b4 <menu_compass_calibration+0xe4>)
   82018:	4798      	blx	r3
   8201a:	60f8      	str	r0, [r7, #12]
        
        tx_packet->chip = 0x60;
   8201c:	68fb      	ldr	r3, [r7, #12]
   8201e:	2260      	movs	r2, #96	; 0x60
   82020:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        tx_packet->addr[0] = 0x0f;
   82024:	68fb      	ldr	r3, [r7, #12]
   82026:	220f      	movs	r2, #15
   82028:	701a      	strb	r2, [r3, #0]
        tx_packet->addr_length = 1;
   8202a:	68fb      	ldr	r3, [r7, #12]
   8202c:	2201      	movs	r2, #1
   8202e:	605a      	str	r2, [r3, #4]
        
        tx_packet->buffer[0] = 0xff;
   82030:	68fb      	ldr	r3, [r7, #12]
   82032:	22ff      	movs	r2, #255	; 0xff
   82034:	721a      	strb	r2, [r3, #8]
        tx_packet->length = 1;
   82036:	68fb      	ldr	r3, [r7, #12]
   82038:	2201      	movs	r2, #1
   8203a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        
        set_compass_is_busy();
   8203e:	4b1e      	ldr	r3, [pc, #120]	; (820b8 <menu_compass_calibration+0xe8>)
   82040:	4798      	blx	r3
        twi_pdc_master_write(TWI0, tx_packet);
   82042:	68f9      	ldr	r1, [r7, #12]
   82044:	481d      	ldr	r0, [pc, #116]	; (820bc <menu_compass_calibration+0xec>)
   82046:	4b1e      	ldr	r3, [pc, #120]	; (820c0 <menu_compass_calibration+0xf0>)
   82048:	4798      	blx	r3
        while(compass_is_busy());
   8204a:	bf00      	nop
   8204c:	4b1d      	ldr	r3, [pc, #116]	; (820c4 <menu_compass_calibration+0xf4>)
   8204e:	4798      	blx	r3
   82050:	4603      	mov	r3, r0
   82052:	2b00      	cmp	r3, #0
   82054:	d1fa      	bne.n	8204c <menu_compass_calibration+0x7c>
        mdelay(500);
   82056:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   8205a:	4b1b      	ldr	r3, [pc, #108]	; (820c8 <menu_compass_calibration+0xf8>)
   8205c:	4798      	blx	r3
        
        compass_cal_step++;
   8205e:	4b11      	ldr	r3, [pc, #68]	; (820a4 <menu_compass_calibration+0xd4>)
   82060:	781b      	ldrb	r3, [r3, #0]
   82062:	3301      	adds	r3, #1
   82064:	b2da      	uxtb	r2, r3
   82066:	4b0f      	ldr	r3, [pc, #60]	; (820a4 <menu_compass_calibration+0xd4>)
   82068:	701a      	strb	r2, [r3, #0]
        
        if(compass_cal_step == 4)
   8206a:	4b0e      	ldr	r3, [pc, #56]	; (820a4 <menu_compass_calibration+0xd4>)
   8206c:	781b      	ldrb	r3, [r3, #0]
   8206e:	2b04      	cmp	r3, #4
   82070:	d108      	bne.n	82084 <menu_compass_calibration+0xb4>
        {
            compass_cal_step = 0;
   82072:	4b0c      	ldr	r3, [pc, #48]	; (820a4 <menu_compass_calibration+0xd4>)
   82074:	2200      	movs	r2, #0
   82076:	701a      	strb	r2, [r3, #0]
            act_menu = MENU_COMPASS;
   82078:	4b14      	ldr	r3, [pc, #80]	; (820cc <menu_compass_calibration+0xfc>)
   8207a:	2207      	movs	r2, #7
   8207c:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   8207e:	4b05      	ldr	r3, [pc, #20]	; (82094 <menu_compass_calibration+0xc4>)
   82080:	2201      	movs	r2, #1
   82082:	701a      	strb	r2, [r3, #0]
        }
        print_menu = 1;
   82084:	4b03      	ldr	r3, [pc, #12]	; (82094 <menu_compass_calibration+0xc4>)
   82086:	2201      	movs	r2, #1
   82088:	701a      	strb	r2, [r3, #0]
    }
}
   8208a:	bf00      	nop
   8208c:	3710      	adds	r7, #16
   8208e:	46bd      	mov	sp, r7
   82090:	bd80      	pop	{r7, pc}
   82092:	bf00      	nop
   82094:	2007018c 	.word	0x2007018c
   82098:	000815e1 	.word	0x000815e1
   8209c:	00089530 	.word	0x00089530
   820a0:	00081601 	.word	0x00081601
   820a4:	20070dbd 	.word	0x20070dbd
   820a8:	00089544 	.word	0x00089544
   820ac:	20070e4c 	.word	0x20070e4c
   820b0:	000854bd 	.word	0x000854bd
   820b4:	00080f0d 	.word	0x00080f0d
   820b8:	000813c5 	.word	0x000813c5
   820bc:	4008c000 	.word	0x4008c000
   820c0:	0008100d 	.word	0x0008100d
   820c4:	000813dd 	.word	0x000813dd
   820c8:	00082ec9 	.word	0x00082ec9
   820cc:	20070dbc 	.word	0x20070dbc

000820d0 <menu_line>:

static void menu_line(event_t event1)
{
   820d0:	b480      	push	{r7}
   820d2:	b083      	sub	sp, #12
   820d4:	af00      	add	r7, sp, #0
   820d6:	4603      	mov	r3, r0
   820d8:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   820da:	79fb      	ldrb	r3, [r7, #7]
   820dc:	2b10      	cmp	r3, #16
   820de:	d105      	bne.n	820ec <menu_line+0x1c>
    {
        act_menu = MENU_SENSORS;
   820e0:	4b05      	ldr	r3, [pc, #20]	; (820f8 <menu_line+0x28>)
   820e2:	2202      	movs	r2, #2
   820e4:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   820e6:	4b05      	ldr	r3, [pc, #20]	; (820fc <menu_line+0x2c>)
   820e8:	2201      	movs	r2, #1
   820ea:	701a      	strb	r2, [r3, #0]
    }
}
   820ec:	bf00      	nop
   820ee:	370c      	adds	r7, #12
   820f0:	46bd      	mov	sp, r7
   820f2:	bc80      	pop	{r7}
   820f4:	4770      	bx	lr
   820f6:	bf00      	nop
   820f8:	20070dbc 	.word	0x20070dbc
   820fc:	2007018c 	.word	0x2007018c

00082100 <menu_line_calibration>:

static void menu_line_calibration(event_t event1)
{
   82100:	b480      	push	{r7}
   82102:	b083      	sub	sp, #12
   82104:	af00      	add	r7, sp, #0
   82106:	4603      	mov	r3, r0
   82108:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   8210a:	79fb      	ldrb	r3, [r7, #7]
   8210c:	2b10      	cmp	r3, #16
   8210e:	d105      	bne.n	8211c <menu_line_calibration+0x1c>
    {
        act_menu = MENU_LINE;
   82110:	4b05      	ldr	r3, [pc, #20]	; (82128 <menu_line_calibration+0x28>)
   82112:	2205      	movs	r2, #5
   82114:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   82116:	4b05      	ldr	r3, [pc, #20]	; (8212c <menu_line_calibration+0x2c>)
   82118:	2201      	movs	r2, #1
   8211a:	701a      	strb	r2, [r3, #0]
    }
}
   8211c:	bf00      	nop
   8211e:	370c      	adds	r7, #12
   82120:	46bd      	mov	sp, r7
   82122:	bc80      	pop	{r7}
   82124:	4770      	bx	lr
   82126:	bf00      	nop
   82128:	20070dbc 	.word	0x20070dbc
   8212c:	2007018c 	.word	0x2007018c

00082130 <menu_settings>:

static void menu_settings(event_t event1)
{
   82130:	b580      	push	{r7, lr}
   82132:	b082      	sub	sp, #8
   82134:	af00      	add	r7, sp, #0
   82136:	4603      	mov	r3, r0
   82138:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   8213a:	4b40      	ldr	r3, [pc, #256]	; (8223c <menu_settings+0x10c>)
   8213c:	781b      	ldrb	r3, [r3, #0]
   8213e:	2b00      	cmp	r3, #0
   82140:	d004      	beq.n	8214c <menu_settings+0x1c>
    {
        print_menu = 0;
   82142:	4b3e      	ldr	r3, [pc, #248]	; (8223c <menu_settings+0x10c>)
   82144:	2200      	movs	r2, #0
   82146:	701a      	strb	r2, [r3, #0]
        print_menu_settings();
   82148:	4b3d      	ldr	r3, [pc, #244]	; (82240 <menu_settings+0x110>)
   8214a:	4798      	blx	r3
    }
    
    switch(event1)
   8214c:	79fb      	ldrb	r3, [r7, #7]
   8214e:	3b01      	subs	r3, #1
   82150:	2b0f      	cmp	r3, #15
   82152:	d869      	bhi.n	82228 <menu_settings+0xf8>
   82154:	a201      	add	r2, pc, #4	; (adr r2, 8215c <menu_settings+0x2c>)
   82156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8215a:	bf00      	nop
   8215c:	0008219d 	.word	0x0008219d
   82160:	00082229 	.word	0x00082229
   82164:	00082229 	.word	0x00082229
   82168:	00082229 	.word	0x00082229
   8216c:	00082229 	.word	0x00082229
   82170:	00082229 	.word	0x00082229
   82174:	000821dd 	.word	0x000821dd
   82178:	00082229 	.word	0x00082229
   8217c:	00082229 	.word	0x00082229
   82180:	00082229 	.word	0x00082229
   82184:	00082229 	.word	0x00082229
   82188:	00082229 	.word	0x00082229
   8218c:	000821bd 	.word	0x000821bd
   82190:	00082229 	.word	0x00082229
   82194:	00082229 	.word	0x00082229
   82198:	0008221b 	.word	0x0008221b
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.settings.act_cursor_line > menu_info.settings.min_cursor_line)
   8219c:	4b29      	ldr	r3, [pc, #164]	; (82244 <menu_settings+0x114>)
   8219e:	7a1a      	ldrb	r2, [r3, #8]
   821a0:	4b28      	ldr	r3, [pc, #160]	; (82244 <menu_settings+0x114>)
   821a2:	7a9b      	ldrb	r3, [r3, #10]
   821a4:	429a      	cmp	r2, r3
   821a6:	d941      	bls.n	8222c <menu_settings+0xfc>
            {
                menu_info.settings.act_cursor_line--;
   821a8:	4b26      	ldr	r3, [pc, #152]	; (82244 <menu_settings+0x114>)
   821aa:	7a1b      	ldrb	r3, [r3, #8]
   821ac:	3b01      	subs	r3, #1
   821ae:	b2da      	uxtb	r2, r3
   821b0:	4b24      	ldr	r3, [pc, #144]	; (82244 <menu_settings+0x114>)
   821b2:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   821b4:	4824      	ldr	r0, [pc, #144]	; (82248 <menu_settings+0x118>)
   821b6:	4b25      	ldr	r3, [pc, #148]	; (8224c <menu_settings+0x11c>)
   821b8:	4798      	blx	r3
            }
            break;
   821ba:	e037      	b.n	8222c <menu_settings+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.settings.act_cursor_line < menu_info.settings.max_cursor_line)
   821bc:	4b21      	ldr	r3, [pc, #132]	; (82244 <menu_settings+0x114>)
   821be:	7a1a      	ldrb	r2, [r3, #8]
   821c0:	4b20      	ldr	r3, [pc, #128]	; (82244 <menu_settings+0x114>)
   821c2:	7adb      	ldrb	r3, [r3, #11]
   821c4:	429a      	cmp	r2, r3
   821c6:	d233      	bcs.n	82230 <menu_settings+0x100>
            {
                menu_info.settings.act_cursor_line++;
   821c8:	4b1e      	ldr	r3, [pc, #120]	; (82244 <menu_settings+0x114>)
   821ca:	7a1b      	ldrb	r3, [r3, #8]
   821cc:	3301      	adds	r3, #1
   821ce:	b2da      	uxtb	r2, r3
   821d0:	4b1c      	ldr	r3, [pc, #112]	; (82244 <menu_settings+0x114>)
   821d2:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   821d4:	481c      	ldr	r0, [pc, #112]	; (82248 <menu_settings+0x118>)
   821d6:	4b1d      	ldr	r3, [pc, #116]	; (8224c <menu_settings+0x11c>)
   821d8:	4798      	blx	r3
            }
            break;
   821da:	e029      	b.n	82230 <menu_settings+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.settings.act_cursor_line)
   821dc:	4b19      	ldr	r3, [pc, #100]	; (82244 <menu_settings+0x114>)
   821de:	7a1b      	ldrb	r3, [r3, #8]
   821e0:	2b02      	cmp	r3, #2
   821e2:	d00b      	beq.n	821fc <menu_settings+0xcc>
   821e4:	2b03      	cmp	r3, #3
   821e6:	d010      	beq.n	8220a <menu_settings+0xda>
   821e8:	2b01      	cmp	r3, #1
   821ea:	d000      	beq.n	821ee <menu_settings+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   821ec:	e014      	b.n	82218 <menu_settings+0xe8>
                    act_menu = MENU_BALL;
   821ee:	4b18      	ldr	r3, [pc, #96]	; (82250 <menu_settings+0x120>)
   821f0:	2204      	movs	r2, #4
   821f2:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   821f4:	4b11      	ldr	r3, [pc, #68]	; (8223c <menu_settings+0x10c>)
   821f6:	2201      	movs	r2, #1
   821f8:	701a      	strb	r2, [r3, #0]
                    break;
   821fa:	e00d      	b.n	82218 <menu_settings+0xe8>
                    act_menu = MENU_COMPASS;
   821fc:	4b14      	ldr	r3, [pc, #80]	; (82250 <menu_settings+0x120>)
   821fe:	2207      	movs	r2, #7
   82200:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   82202:	4b0e      	ldr	r3, [pc, #56]	; (8223c <menu_settings+0x10c>)
   82204:	2201      	movs	r2, #1
   82206:	701a      	strb	r2, [r3, #0]
                    break;
   82208:	e006      	b.n	82218 <menu_settings+0xe8>
                    act_menu = MENU_LINE;
   8220a:	4b11      	ldr	r3, [pc, #68]	; (82250 <menu_settings+0x120>)
   8220c:	2205      	movs	r2, #5
   8220e:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   82210:	4b0a      	ldr	r3, [pc, #40]	; (8223c <menu_settings+0x10c>)
   82212:	2201      	movs	r2, #1
   82214:	701a      	strb	r2, [r3, #0]
                    break;
   82216:	bf00      	nop
            }
            break;
   82218:	e00b      	b.n	82232 <menu_settings+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   8221a:	4b0d      	ldr	r3, [pc, #52]	; (82250 <menu_settings+0x120>)
   8221c:	2200      	movs	r2, #0
   8221e:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82220:	4b06      	ldr	r3, [pc, #24]	; (8223c <menu_settings+0x10c>)
   82222:	2201      	movs	r2, #1
   82224:	701a      	strb	r2, [r3, #0]
            break;
   82226:	e004      	b.n	82232 <menu_settings+0x102>
        default:
            break;
   82228:	bf00      	nop
   8222a:	e002      	b.n	82232 <menu_settings+0x102>
            break;
   8222c:	bf00      	nop
   8222e:	e000      	b.n	82232 <menu_settings+0x102>
            break;
   82230:	bf00      	nop
    }
}
   82232:	bf00      	nop
   82234:	3708      	adds	r7, #8
   82236:	46bd      	mov	sp, r7
   82238:	bd80      	pop	{r7, pc}
   8223a:	bf00      	nop
   8223c:	2007018c 	.word	0x2007018c
   82240:	0008243d 	.word	0x0008243d
   82244:	20070190 	.word	0x20070190
   82248:	20070198 	.word	0x20070198
   8224c:	000824a5 	.word	0x000824a5
   82250:	20070dbc 	.word	0x20070dbc

00082254 <menu_shutdown>:

static void menu_shutdown(event_t event1)
{
   82254:	b580      	push	{r7, lr}
   82256:	b082      	sub	sp, #8
   82258:	af00      	add	r7, sp, #0
   8225a:	4603      	mov	r3, r0
   8225c:	71fb      	strb	r3, [r7, #7]
    if(shutdown_confirmed)
   8225e:	4b35      	ldr	r3, [pc, #212]	; (82334 <menu_shutdown+0xe0>)
   82260:	781b      	ldrb	r3, [r3, #0]
   82262:	2b00      	cmp	r3, #0
   82264:	d043      	beq.n	822ee <menu_shutdown+0x9a>
    {
        lcd_clear();
   82266:	4b34      	ldr	r3, [pc, #208]	; (82338 <menu_shutdown+0xe4>)
   82268:	4798      	blx	r3
        lcd_print_s(2, 2, "shutting down...");
   8226a:	4a34      	ldr	r2, [pc, #208]	; (8233c <menu_shutdown+0xe8>)
   8226c:	2102      	movs	r1, #2
   8226e:	2002      	movs	r0, #2
   82270:	4b33      	ldr	r3, [pc, #204]	; (82340 <menu_shutdown+0xec>)
   82272:	4798      	blx	r3
        
        ioport_set_pin_level(LED_ONBOARD, 0);
   82274:	2100      	movs	r1, #0
   82276:	206a      	movs	r0, #106	; 0x6a
   82278:	4b32      	ldr	r3, [pc, #200]	; (82344 <menu_shutdown+0xf0>)
   8227a:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   8227c:	2100      	movs	r1, #0
   8227e:	2066      	movs	r0, #102	; 0x66
   82280:	4b30      	ldr	r3, [pc, #192]	; (82344 <menu_shutdown+0xf0>)
   82282:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   82284:	2100      	movs	r1, #0
   82286:	2067      	movs	r0, #103	; 0x67
   82288:	4b2e      	ldr	r3, [pc, #184]	; (82344 <menu_shutdown+0xf0>)
   8228a:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   8228c:	2100      	movs	r1, #0
   8228e:	2068      	movs	r0, #104	; 0x68
   82290:	4b2c      	ldr	r3, [pc, #176]	; (82344 <menu_shutdown+0xf0>)
   82292:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   82294:	2100      	movs	r1, #0
   82296:	2069      	movs	r0, #105	; 0x69
   82298:	4b2a      	ldr	r3, [pc, #168]	; (82344 <menu_shutdown+0xf0>)
   8229a:	4798      	blx	r3
        pwm_channel_disable(PWM, MREAR);
        
        pwm_channel_disable(PWM, ENC_CLK);
        
        sensor_parameters.ibit.sleep_mode = 1;*/
        update_comm();
   8229c:	4b2a      	ldr	r3, [pc, #168]	; (82348 <menu_shutdown+0xf4>)
   8229e:	4798      	blx	r3
        
        ioport_set_pin_level(RPI1, 0);
   822a0:	2100      	movs	r1, #0
   822a2:	2001      	movs	r0, #1
   822a4:	4b27      	ldr	r3, [pc, #156]	; (82344 <menu_shutdown+0xf0>)
   822a6:	4798      	blx	r3
        while (ioport_get_pin_level(RPI2) == 1);
   822a8:	bf00      	nop
   822aa:	2008      	movs	r0, #8
   822ac:	4b27      	ldr	r3, [pc, #156]	; (8234c <menu_shutdown+0xf8>)
   822ae:	4798      	blx	r3
   822b0:	4603      	mov	r3, r0
   822b2:	2b00      	cmp	r3, #0
   822b4:	d1f9      	bne.n	822aa <menu_shutdown+0x56>
        mdelay(7500);
   822b6:	f641 504c 	movw	r0, #7500	; 0x1d4c
   822ba:	4b25      	ldr	r3, [pc, #148]	; (82350 <menu_shutdown+0xfc>)
   822bc:	4798      	blx	r3
        
        lcd_set_backlight(LCD_LIGHT_OFF);
   822be:	2000      	movs	r0, #0
   822c0:	4b24      	ldr	r3, [pc, #144]	; (82354 <menu_shutdown+0x100>)
   822c2:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   822c4:	4b1c      	ldr	r3, [pc, #112]	; (82338 <menu_shutdown+0xe4>)
   822c6:	4798      	blx	r3
        mdelay(100);
   822c8:	2064      	movs	r0, #100	; 0x64
   822ca:	4b21      	ldr	r3, [pc, #132]	; (82350 <menu_shutdown+0xfc>)
   822cc:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_ON);
   822ce:	2008      	movs	r0, #8
   822d0:	4b20      	ldr	r3, [pc, #128]	; (82354 <menu_shutdown+0x100>)
   822d2:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   822d4:	4b18      	ldr	r3, [pc, #96]	; (82338 <menu_shutdown+0xe4>)
   822d6:	4798      	blx	r3
        mdelay(100);
   822d8:	2064      	movs	r0, #100	; 0x64
   822da:	4b1d      	ldr	r3, [pc, #116]	; (82350 <menu_shutdown+0xfc>)
   822dc:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_OFF);
   822de:	2000      	movs	r0, #0
   822e0:	4b1c      	ldr	r3, [pc, #112]	; (82354 <menu_shutdown+0x100>)
   822e2:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   822e4:	4b14      	ldr	r3, [pc, #80]	; (82338 <menu_shutdown+0xe4>)
   822e6:	4798      	blx	r3
        
        while(1)
        {
            update_comm();
   822e8:	4b17      	ldr	r3, [pc, #92]	; (82348 <menu_shutdown+0xf4>)
   822ea:	4798      	blx	r3
   822ec:	e7fc      	b.n	822e8 <menu_shutdown+0x94>
            //check_bat();
        }
    }
    else
    {
        if(print_menu)
   822ee:	4b1a      	ldr	r3, [pc, #104]	; (82358 <menu_shutdown+0x104>)
   822f0:	781b      	ldrb	r3, [r3, #0]
   822f2:	2b00      	cmp	r3, #0
   822f4:	d009      	beq.n	8230a <menu_shutdown+0xb6>
        {
            print_menu = 0;
   822f6:	4b18      	ldr	r3, [pc, #96]	; (82358 <menu_shutdown+0x104>)
   822f8:	2200      	movs	r2, #0
   822fa:	701a      	strb	r2, [r3, #0]
            lcd_clear();
   822fc:	4b0e      	ldr	r3, [pc, #56]	; (82338 <menu_shutdown+0xe4>)
   822fe:	4798      	blx	r3
            lcd_print_s(2, 1, "confirm shutdown?");
   82300:	4a16      	ldr	r2, [pc, #88]	; (8235c <menu_shutdown+0x108>)
   82302:	2101      	movs	r1, #1
   82304:	2002      	movs	r0, #2
   82306:	4b0e      	ldr	r3, [pc, #56]	; (82340 <menu_shutdown+0xec>)
   82308:	4798      	blx	r3
        }
    }
    
    switch (event1)
   8230a:	79fb      	ldrb	r3, [r7, #7]
   8230c:	2b07      	cmp	r3, #7
   8230e:	d002      	beq.n	82316 <menu_shutdown+0xc2>
   82310:	2b10      	cmp	r3, #16
   82312:	d004      	beq.n	8231e <menu_shutdown+0xca>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
            print_menu = 1;
            break;
        default:
            break;
   82314:	e00a      	b.n	8232c <menu_shutdown+0xd8>
            shutdown_confirmed = 1;
   82316:	4b07      	ldr	r3, [pc, #28]	; (82334 <menu_shutdown+0xe0>)
   82318:	2201      	movs	r2, #1
   8231a:	701a      	strb	r2, [r3, #0]
            break;
   8231c:	e006      	b.n	8232c <menu_shutdown+0xd8>
            act_menu = MENU_MAIN;
   8231e:	4b10      	ldr	r3, [pc, #64]	; (82360 <menu_shutdown+0x10c>)
   82320:	2200      	movs	r2, #0
   82322:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82324:	4b0c      	ldr	r3, [pc, #48]	; (82358 <menu_shutdown+0x104>)
   82326:	2201      	movs	r2, #1
   82328:	701a      	strb	r2, [r3, #0]
            break;
   8232a:	bf00      	nop
    }
}
   8232c:	bf00      	nop
   8232e:	3708      	adds	r7, #8
   82330:	46bd      	mov	sp, r7
   82332:	bd80      	pop	{r7, pc}
   82334:	20070dbe 	.word	0x20070dbe
   82338:	000815e1 	.word	0x000815e1
   8233c:	00089558 	.word	0x00089558
   82340:	00081601 	.word	0x00081601
   82344:	00081a9d 	.word	0x00081a9d
   82348:	00082ef5 	.word	0x00082ef5
   8234c:	00081b07 	.word	0x00081b07
   82350:	00082ec9 	.word	0x00082ec9
   82354:	000815c1 	.word	0x000815c1
   82358:	2007018c 	.word	0x2007018c
   8235c:	0008956c 	.word	0x0008956c
   82360:	20070dbc 	.word	0x20070dbc

00082364 <print_menu_main>:

static void print_menu_main(void)
{
   82364:	b590      	push	{r4, r7, lr}
   82366:	b085      	sub	sp, #20
   82368:	af00      	add	r7, sp, #0
    const char *text[4] = {"    noOS ONE", " Match", " Sensors", " Settings"};
   8236a:	4b14      	ldr	r3, [pc, #80]	; (823bc <print_menu_main+0x58>)
   8236c:	463c      	mov	r4, r7
   8236e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   82370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   82374:	4b12      	ldr	r3, [pc, #72]	; (823c0 <print_menu_main+0x5c>)
   82376:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   82378:	683b      	ldr	r3, [r7, #0]
   8237a:	461a      	mov	r2, r3
   8237c:	2100      	movs	r1, #0
   8237e:	2001      	movs	r0, #1
   82380:	4b10      	ldr	r3, [pc, #64]	; (823c4 <print_menu_main+0x60>)
   82382:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   82384:	687b      	ldr	r3, [r7, #4]
   82386:	461a      	mov	r2, r3
   82388:	2100      	movs	r1, #0
   8238a:	2002      	movs	r0, #2
   8238c:	4b0d      	ldr	r3, [pc, #52]	; (823c4 <print_menu_main+0x60>)
   8238e:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82390:	68bb      	ldr	r3, [r7, #8]
   82392:	461a      	mov	r2, r3
   82394:	2100      	movs	r1, #0
   82396:	2003      	movs	r0, #3
   82398:	4b0a      	ldr	r3, [pc, #40]	; (823c4 <print_menu_main+0x60>)
   8239a:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   8239c:	68fb      	ldr	r3, [r7, #12]
   8239e:	461a      	mov	r2, r3
   823a0:	2100      	movs	r1, #0
   823a2:	2004      	movs	r0, #4
   823a4:	4b07      	ldr	r3, [pc, #28]	; (823c4 <print_menu_main+0x60>)
   823a6:	4798      	blx	r3
    print_cursor(&menu_info.main);
   823a8:	4807      	ldr	r0, [pc, #28]	; (823c8 <print_menu_main+0x64>)
   823aa:	4b08      	ldr	r3, [pc, #32]	; (823cc <print_menu_main+0x68>)
   823ac:	4798      	blx	r3
    update_battery(1);
   823ae:	2001      	movs	r0, #1
   823b0:	4b07      	ldr	r3, [pc, #28]	; (823d0 <print_menu_main+0x6c>)
   823b2:	4798      	blx	r3
}
   823b4:	bf00      	nop
   823b6:	3714      	adds	r7, #20
   823b8:	46bd      	mov	sp, r7
   823ba:	bd90      	pop	{r4, r7, pc}
   823bc:	000895b0 	.word	0x000895b0
   823c0:	000815e1 	.word	0x000815e1
   823c4:	00081601 	.word	0x00081601
   823c8:	20070190 	.word	0x20070190
   823cc:	000824a5 	.word	0x000824a5
   823d0:	00082f3d 	.word	0x00082f3d

000823d4 <print_menu_sensors>:

static void print_menu_sensors(void)
{
   823d4:	b590      	push	{r4, r7, lr}
   823d6:	b085      	sub	sp, #20
   823d8:	af00      	add	r7, sp, #0
    const char *text[4] = {" Ball", " Compass", " Line", " "};
   823da:	4b13      	ldr	r3, [pc, #76]	; (82428 <print_menu_sensors+0x54>)
   823dc:	463c      	mov	r4, r7
   823de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   823e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   823e4:	4b11      	ldr	r3, [pc, #68]	; (8242c <print_menu_sensors+0x58>)
   823e6:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   823e8:	683b      	ldr	r3, [r7, #0]
   823ea:	461a      	mov	r2, r3
   823ec:	2100      	movs	r1, #0
   823ee:	2001      	movs	r0, #1
   823f0:	4b0f      	ldr	r3, [pc, #60]	; (82430 <print_menu_sensors+0x5c>)
   823f2:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   823f4:	687b      	ldr	r3, [r7, #4]
   823f6:	461a      	mov	r2, r3
   823f8:	2100      	movs	r1, #0
   823fa:	2002      	movs	r0, #2
   823fc:	4b0c      	ldr	r3, [pc, #48]	; (82430 <print_menu_sensors+0x5c>)
   823fe:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82400:	68bb      	ldr	r3, [r7, #8]
   82402:	461a      	mov	r2, r3
   82404:	2100      	movs	r1, #0
   82406:	2003      	movs	r0, #3
   82408:	4b09      	ldr	r3, [pc, #36]	; (82430 <print_menu_sensors+0x5c>)
   8240a:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   8240c:	68fb      	ldr	r3, [r7, #12]
   8240e:	461a      	mov	r2, r3
   82410:	2100      	movs	r1, #0
   82412:	2004      	movs	r0, #4
   82414:	4b06      	ldr	r3, [pc, #24]	; (82430 <print_menu_sensors+0x5c>)
   82416:	4798      	blx	r3
    print_cursor(&menu_info.sensors);
   82418:	4806      	ldr	r0, [pc, #24]	; (82434 <print_menu_sensors+0x60>)
   8241a:	4b07      	ldr	r3, [pc, #28]	; (82438 <print_menu_sensors+0x64>)
   8241c:	4798      	blx	r3
}
   8241e:	bf00      	nop
   82420:	3714      	adds	r7, #20
   82422:	46bd      	mov	sp, r7
   82424:	bd90      	pop	{r4, r7, pc}
   82426:	bf00      	nop
   82428:	000895e0 	.word	0x000895e0
   8242c:	000815e1 	.word	0x000815e1
   82430:	00081601 	.word	0x00081601
   82434:	20070194 	.word	0x20070194
   82438:	000824a5 	.word	0x000824a5

0008243c <print_menu_settings>:

static void print_menu_settings(void)
{
   8243c:	b590      	push	{r4, r7, lr}
   8243e:	b085      	sub	sp, #20
   82440:	af00      	add	r7, sp, #0
    const char *text[4] = {" ", " ", " ", " "};
   82442:	4b13      	ldr	r3, [pc, #76]	; (82490 <print_menu_settings+0x54>)
   82444:	463c      	mov	r4, r7
   82446:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   82448:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   8244c:	4b11      	ldr	r3, [pc, #68]	; (82494 <print_menu_settings+0x58>)
   8244e:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   82450:	683b      	ldr	r3, [r7, #0]
   82452:	461a      	mov	r2, r3
   82454:	2100      	movs	r1, #0
   82456:	2001      	movs	r0, #1
   82458:	4b0f      	ldr	r3, [pc, #60]	; (82498 <print_menu_settings+0x5c>)
   8245a:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   8245c:	687b      	ldr	r3, [r7, #4]
   8245e:	461a      	mov	r2, r3
   82460:	2100      	movs	r1, #0
   82462:	2002      	movs	r0, #2
   82464:	4b0c      	ldr	r3, [pc, #48]	; (82498 <print_menu_settings+0x5c>)
   82466:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82468:	68bb      	ldr	r3, [r7, #8]
   8246a:	461a      	mov	r2, r3
   8246c:	2100      	movs	r1, #0
   8246e:	2003      	movs	r0, #3
   82470:	4b09      	ldr	r3, [pc, #36]	; (82498 <print_menu_settings+0x5c>)
   82472:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   82474:	68fb      	ldr	r3, [r7, #12]
   82476:	461a      	mov	r2, r3
   82478:	2100      	movs	r1, #0
   8247a:	2004      	movs	r0, #4
   8247c:	4b06      	ldr	r3, [pc, #24]	; (82498 <print_menu_settings+0x5c>)
   8247e:	4798      	blx	r3
    print_cursor(&menu_info.settings);
   82480:	4806      	ldr	r0, [pc, #24]	; (8249c <print_menu_settings+0x60>)
   82482:	4b07      	ldr	r3, [pc, #28]	; (824a0 <print_menu_settings+0x64>)
   82484:	4798      	blx	r3
}
   82486:	bf00      	nop
   82488:	3714      	adds	r7, #20
   8248a:	46bd      	mov	sp, r7
   8248c:	bd90      	pop	{r4, r7, pc}
   8248e:	bf00      	nop
   82490:	000895f0 	.word	0x000895f0
   82494:	000815e1 	.word	0x000815e1
   82498:	00081601 	.word	0x00081601
   8249c:	20070198 	.word	0x20070198
   824a0:	000824a5 	.word	0x000824a5

000824a4 <print_cursor>:

static void print_cursor(menu_info_t *info)
{
   824a4:	b580      	push	{r7, lr}
   824a6:	b082      	sub	sp, #8
   824a8:	af00      	add	r7, sp, #0
   824aa:	6078      	str	r0, [r7, #4]
    lcd_print_s(info->prev_cursor_line, 0, " ");
   824ac:	687b      	ldr	r3, [r7, #4]
   824ae:	785b      	ldrb	r3, [r3, #1]
   824b0:	4a09      	ldr	r2, [pc, #36]	; (824d8 <print_cursor+0x34>)
   824b2:	2100      	movs	r1, #0
   824b4:	4618      	mov	r0, r3
   824b6:	4b09      	ldr	r3, [pc, #36]	; (824dc <print_cursor+0x38>)
   824b8:	4798      	blx	r3
    lcd_print_s(info->act_cursor_line, 0, ">");
   824ba:	687b      	ldr	r3, [r7, #4]
   824bc:	781b      	ldrb	r3, [r3, #0]
   824be:	4a08      	ldr	r2, [pc, #32]	; (824e0 <print_cursor+0x3c>)
   824c0:	2100      	movs	r1, #0
   824c2:	4618      	mov	r0, r3
   824c4:	4b05      	ldr	r3, [pc, #20]	; (824dc <print_cursor+0x38>)
   824c6:	4798      	blx	r3
    
    info->prev_cursor_line = info->act_cursor_line;
   824c8:	687b      	ldr	r3, [r7, #4]
   824ca:	781a      	ldrb	r2, [r3, #0]
   824cc:	687b      	ldr	r3, [r7, #4]
   824ce:	705a      	strb	r2, [r3, #1]
}
   824d0:	bf00      	nop
   824d2:	3708      	adds	r7, #8
   824d4:	46bd      	mov	sp, r7
   824d6:	bd80      	pop	{r7, pc}
   824d8:	000895dc 	.word	0x000895dc
   824dc:	00081601 	.word	0x00081601
   824e0:	00089600 	.word	0x00089600

000824e4 <button_events>:

event_t button_events(void)
{
   824e4:	b580      	push	{r7, lr}
   824e6:	b082      	sub	sp, #8
   824e8:	af00      	add	r7, sp, #0
    event_t nextEvent = EVENT_NO_EVENT;
   824ea:	2300      	movs	r3, #0
   824ec:	71fb      	strb	r3, [r7, #7]

    if (getTicks() >= (ticks_button_update + 30))
   824ee:	4b75      	ldr	r3, [pc, #468]	; (826c4 <button_events+0x1e0>)
   824f0:	4798      	blx	r3
   824f2:	4602      	mov	r2, r0
   824f4:	4b74      	ldr	r3, [pc, #464]	; (826c8 <button_events+0x1e4>)
   824f6:	681b      	ldr	r3, [r3, #0]
   824f8:	331e      	adds	r3, #30
   824fa:	429a      	cmp	r2, r3
   824fc:	f0c0 80dd 	bcc.w	826ba <button_events+0x1d6>
    {
        ticks_button_update = getTicks();
   82500:	4b70      	ldr	r3, [pc, #448]	; (826c4 <button_events+0x1e0>)
   82502:	4798      	blx	r3
   82504:	4602      	mov	r2, r0
   82506:	4b70      	ldr	r3, [pc, #448]	; (826c8 <button_events+0x1e4>)
   82508:	601a      	str	r2, [r3, #0]
        
        pb_up_act = ioport_get_pin_level(PB_UP);
   8250a:	2060      	movs	r0, #96	; 0x60
   8250c:	4b6f      	ldr	r3, [pc, #444]	; (826cc <button_events+0x1e8>)
   8250e:	4798      	blx	r3
   82510:	4603      	mov	r3, r0
   82512:	461a      	mov	r2, r3
   82514:	4b6e      	ldr	r3, [pc, #440]	; (826d0 <button_events+0x1ec>)
   82516:	701a      	strb	r2, [r3, #0]
        pb_left_act = ioport_get_pin_level(PB_LEFT);
   82518:	2061      	movs	r0, #97	; 0x61
   8251a:	4b6c      	ldr	r3, [pc, #432]	; (826cc <button_events+0x1e8>)
   8251c:	4798      	blx	r3
   8251e:	4603      	mov	r3, r0
   82520:	461a      	mov	r2, r3
   82522:	4b6c      	ldr	r3, [pc, #432]	; (826d4 <button_events+0x1f0>)
   82524:	701a      	strb	r2, [r3, #0]
        pb_mid_act = ioport_get_pin_level(PB_MID);
   82526:	2062      	movs	r0, #98	; 0x62
   82528:	4b68      	ldr	r3, [pc, #416]	; (826cc <button_events+0x1e8>)
   8252a:	4798      	blx	r3
   8252c:	4603      	mov	r3, r0
   8252e:	461a      	mov	r2, r3
   82530:	4b69      	ldr	r3, [pc, #420]	; (826d8 <button_events+0x1f4>)
   82532:	701a      	strb	r2, [r3, #0]
        pb_right_act = ioport_get_pin_level(PB_RIGHT);
   82534:	2063      	movs	r0, #99	; 0x63
   82536:	4b65      	ldr	r3, [pc, #404]	; (826cc <button_events+0x1e8>)
   82538:	4798      	blx	r3
   8253a:	4603      	mov	r3, r0
   8253c:	461a      	mov	r2, r3
   8253e:	4b67      	ldr	r3, [pc, #412]	; (826dc <button_events+0x1f8>)
   82540:	701a      	strb	r2, [r3, #0]
        pb_down_act = ioport_get_pin_level(PB_DOWN);
   82542:	2064      	movs	r0, #100	; 0x64
   82544:	4b61      	ldr	r3, [pc, #388]	; (826cc <button_events+0x1e8>)
   82546:	4798      	blx	r3
   82548:	4603      	mov	r3, r0
   8254a:	461a      	mov	r2, r3
   8254c:	4b64      	ldr	r3, [pc, #400]	; (826e0 <button_events+0x1fc>)
   8254e:	701a      	strb	r2, [r3, #0]
        pb_return_act = ioport_get_pin_level(PB_RETURN);
   82550:	2065      	movs	r0, #101	; 0x65
   82552:	4b5e      	ldr	r3, [pc, #376]	; (826cc <button_events+0x1e8>)
   82554:	4798      	blx	r3
   82556:	4603      	mov	r3, r0
   82558:	461a      	mov	r2, r3
   8255a:	4b62      	ldr	r3, [pc, #392]	; (826e4 <button_events+0x200>)
   8255c:	701a      	strb	r2, [r3, #0]
        
        if (pb_up_act != pb_up_prev && pb_up_act == 0)
   8255e:	4b5c      	ldr	r3, [pc, #368]	; (826d0 <button_events+0x1ec>)
   82560:	781a      	ldrb	r2, [r3, #0]
   82562:	4b61      	ldr	r3, [pc, #388]	; (826e8 <button_events+0x204>)
   82564:	781b      	ldrb	r3, [r3, #0]
   82566:	429a      	cmp	r2, r3
   82568:	d006      	beq.n	82578 <button_events+0x94>
   8256a:	4b59      	ldr	r3, [pc, #356]	; (826d0 <button_events+0x1ec>)
   8256c:	781b      	ldrb	r3, [r3, #0]
   8256e:	2b00      	cmp	r3, #0
   82570:	d102      	bne.n	82578 <button_events+0x94>
        {
            nextEvent = EVENT_BUTTON_UP_P;
   82572:	2301      	movs	r3, #1
   82574:	71fb      	strb	r3, [r7, #7]
   82576:	e00b      	b.n	82590 <button_events+0xac>
        }
        else if (pb_up_act != pb_up_prev && pb_up_act == 1)
   82578:	4b55      	ldr	r3, [pc, #340]	; (826d0 <button_events+0x1ec>)
   8257a:	781a      	ldrb	r2, [r3, #0]
   8257c:	4b5a      	ldr	r3, [pc, #360]	; (826e8 <button_events+0x204>)
   8257e:	781b      	ldrb	r3, [r3, #0]
   82580:	429a      	cmp	r2, r3
   82582:	d005      	beq.n	82590 <button_events+0xac>
   82584:	4b52      	ldr	r3, [pc, #328]	; (826d0 <button_events+0x1ec>)
   82586:	781b      	ldrb	r3, [r3, #0]
   82588:	2b01      	cmp	r3, #1
   8258a:	d101      	bne.n	82590 <button_events+0xac>
        {
            nextEvent = EVENT_BUTTON_UP_R;
   8258c:	2303      	movs	r3, #3
   8258e:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_up_act == pb_up_prev && pb_up_act == 0)
        {
            nextEvent = EVENT_BUTTON_UP_H;
        }*/
        
        if (pb_left_act != pb_left_prev && pb_left_act == 0)
   82590:	4b50      	ldr	r3, [pc, #320]	; (826d4 <button_events+0x1f0>)
   82592:	781a      	ldrb	r2, [r3, #0]
   82594:	4b55      	ldr	r3, [pc, #340]	; (826ec <button_events+0x208>)
   82596:	781b      	ldrb	r3, [r3, #0]
   82598:	429a      	cmp	r2, r3
   8259a:	d006      	beq.n	825aa <button_events+0xc6>
   8259c:	4b4d      	ldr	r3, [pc, #308]	; (826d4 <button_events+0x1f0>)
   8259e:	781b      	ldrb	r3, [r3, #0]
   825a0:	2b00      	cmp	r3, #0
   825a2:	d102      	bne.n	825aa <button_events+0xc6>
        {
            nextEvent = EVENT_BUTTON_LEFT_P;
   825a4:	2304      	movs	r3, #4
   825a6:	71fb      	strb	r3, [r7, #7]
   825a8:	e00b      	b.n	825c2 <button_events+0xde>
        }
        else if (pb_left_act != pb_left_prev && pb_left_act == 1)
   825aa:	4b4a      	ldr	r3, [pc, #296]	; (826d4 <button_events+0x1f0>)
   825ac:	781a      	ldrb	r2, [r3, #0]
   825ae:	4b4f      	ldr	r3, [pc, #316]	; (826ec <button_events+0x208>)
   825b0:	781b      	ldrb	r3, [r3, #0]
   825b2:	429a      	cmp	r2, r3
   825b4:	d005      	beq.n	825c2 <button_events+0xde>
   825b6:	4b47      	ldr	r3, [pc, #284]	; (826d4 <button_events+0x1f0>)
   825b8:	781b      	ldrb	r3, [r3, #0]
   825ba:	2b01      	cmp	r3, #1
   825bc:	d101      	bne.n	825c2 <button_events+0xde>
        {
            nextEvent = EVENT_BUTTON_LEFT_R;
   825be:	2306      	movs	r3, #6
   825c0:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_left_act == pb_left_prev && pb_left_act == 0)
        {
            nextEvent = EVENT_BUTTON_LEFT_H;
        }*/
        
        if (pb_mid_act != pb_mid_prev && pb_mid_act == 0)
   825c2:	4b45      	ldr	r3, [pc, #276]	; (826d8 <button_events+0x1f4>)
   825c4:	781a      	ldrb	r2, [r3, #0]
   825c6:	4b4a      	ldr	r3, [pc, #296]	; (826f0 <button_events+0x20c>)
   825c8:	781b      	ldrb	r3, [r3, #0]
   825ca:	429a      	cmp	r2, r3
   825cc:	d006      	beq.n	825dc <button_events+0xf8>
   825ce:	4b42      	ldr	r3, [pc, #264]	; (826d8 <button_events+0x1f4>)
   825d0:	781b      	ldrb	r3, [r3, #0]
   825d2:	2b00      	cmp	r3, #0
   825d4:	d102      	bne.n	825dc <button_events+0xf8>
        {
            nextEvent = EVENT_BUTTON_MID_P;
   825d6:	2307      	movs	r3, #7
   825d8:	71fb      	strb	r3, [r7, #7]
   825da:	e00b      	b.n	825f4 <button_events+0x110>
        }
        else if (pb_mid_act != pb_mid_prev && pb_mid_act == 1)
   825dc:	4b3e      	ldr	r3, [pc, #248]	; (826d8 <button_events+0x1f4>)
   825de:	781a      	ldrb	r2, [r3, #0]
   825e0:	4b43      	ldr	r3, [pc, #268]	; (826f0 <button_events+0x20c>)
   825e2:	781b      	ldrb	r3, [r3, #0]
   825e4:	429a      	cmp	r2, r3
   825e6:	d005      	beq.n	825f4 <button_events+0x110>
   825e8:	4b3b      	ldr	r3, [pc, #236]	; (826d8 <button_events+0x1f4>)
   825ea:	781b      	ldrb	r3, [r3, #0]
   825ec:	2b01      	cmp	r3, #1
   825ee:	d101      	bne.n	825f4 <button_events+0x110>
        {
            nextEvent = EVENT_BUTTON_MID_R;
   825f0:	2309      	movs	r3, #9
   825f2:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_mid_act == pb_mid_prev && pb_mid_act == 0)
        {
            nextEvent = EVENT_BUTTON_MID_H;
        }*/
        
        if (pb_right_act != pb_right_prev && pb_right_act == 0)
   825f4:	4b39      	ldr	r3, [pc, #228]	; (826dc <button_events+0x1f8>)
   825f6:	781a      	ldrb	r2, [r3, #0]
   825f8:	4b3e      	ldr	r3, [pc, #248]	; (826f4 <button_events+0x210>)
   825fa:	781b      	ldrb	r3, [r3, #0]
   825fc:	429a      	cmp	r2, r3
   825fe:	d006      	beq.n	8260e <button_events+0x12a>
   82600:	4b36      	ldr	r3, [pc, #216]	; (826dc <button_events+0x1f8>)
   82602:	781b      	ldrb	r3, [r3, #0]
   82604:	2b00      	cmp	r3, #0
   82606:	d102      	bne.n	8260e <button_events+0x12a>
        {
            nextEvent = EVENT_BUTTON_RIGHT_P;
   82608:	230a      	movs	r3, #10
   8260a:	71fb      	strb	r3, [r7, #7]
   8260c:	e00b      	b.n	82626 <button_events+0x142>
        }
        else if (pb_right_act != pb_right_prev && pb_right_act == 1)
   8260e:	4b33      	ldr	r3, [pc, #204]	; (826dc <button_events+0x1f8>)
   82610:	781a      	ldrb	r2, [r3, #0]
   82612:	4b38      	ldr	r3, [pc, #224]	; (826f4 <button_events+0x210>)
   82614:	781b      	ldrb	r3, [r3, #0]
   82616:	429a      	cmp	r2, r3
   82618:	d005      	beq.n	82626 <button_events+0x142>
   8261a:	4b30      	ldr	r3, [pc, #192]	; (826dc <button_events+0x1f8>)
   8261c:	781b      	ldrb	r3, [r3, #0]
   8261e:	2b01      	cmp	r3, #1
   82620:	d101      	bne.n	82626 <button_events+0x142>
        {
            nextEvent = EVENT_BUTTON_RIGHT_R;
   82622:	230c      	movs	r3, #12
   82624:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_right_act == pb_right_prev && pb_right_act == 0)
        {
            nextEvent = EVENT_BUTTON_RIGHT_H;
        }*/
        
        if (pb_down_act != pb_down_prev && pb_down_act == 0)
   82626:	4b2e      	ldr	r3, [pc, #184]	; (826e0 <button_events+0x1fc>)
   82628:	781a      	ldrb	r2, [r3, #0]
   8262a:	4b33      	ldr	r3, [pc, #204]	; (826f8 <button_events+0x214>)
   8262c:	781b      	ldrb	r3, [r3, #0]
   8262e:	429a      	cmp	r2, r3
   82630:	d006      	beq.n	82640 <button_events+0x15c>
   82632:	4b2b      	ldr	r3, [pc, #172]	; (826e0 <button_events+0x1fc>)
   82634:	781b      	ldrb	r3, [r3, #0]
   82636:	2b00      	cmp	r3, #0
   82638:	d102      	bne.n	82640 <button_events+0x15c>
        {
            nextEvent = EVENT_BUTTON_DOWN_P;
   8263a:	230d      	movs	r3, #13
   8263c:	71fb      	strb	r3, [r7, #7]
   8263e:	e00b      	b.n	82658 <button_events+0x174>
        }
        else if (pb_down_act != pb_down_prev && pb_down_act == 1)
   82640:	4b27      	ldr	r3, [pc, #156]	; (826e0 <button_events+0x1fc>)
   82642:	781a      	ldrb	r2, [r3, #0]
   82644:	4b2c      	ldr	r3, [pc, #176]	; (826f8 <button_events+0x214>)
   82646:	781b      	ldrb	r3, [r3, #0]
   82648:	429a      	cmp	r2, r3
   8264a:	d005      	beq.n	82658 <button_events+0x174>
   8264c:	4b24      	ldr	r3, [pc, #144]	; (826e0 <button_events+0x1fc>)
   8264e:	781b      	ldrb	r3, [r3, #0]
   82650:	2b01      	cmp	r3, #1
   82652:	d101      	bne.n	82658 <button_events+0x174>
        {
            nextEvent = EVENT_BUTTON_DOWN_R;
   82654:	230f      	movs	r3, #15
   82656:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_down_act == pb_down_prev && pb_down_act == 0)
        {
            nextEvent = EVENT_BUTTON_DOWN_H;
        }*/
        
        if (pb_return_act != pb_return_prev && pb_return_act == 0)
   82658:	4b22      	ldr	r3, [pc, #136]	; (826e4 <button_events+0x200>)
   8265a:	781a      	ldrb	r2, [r3, #0]
   8265c:	4b27      	ldr	r3, [pc, #156]	; (826fc <button_events+0x218>)
   8265e:	781b      	ldrb	r3, [r3, #0]
   82660:	429a      	cmp	r2, r3
   82662:	d006      	beq.n	82672 <button_events+0x18e>
   82664:	4b1f      	ldr	r3, [pc, #124]	; (826e4 <button_events+0x200>)
   82666:	781b      	ldrb	r3, [r3, #0]
   82668:	2b00      	cmp	r3, #0
   8266a:	d102      	bne.n	82672 <button_events+0x18e>
        {
            nextEvent = EVENT_BUTTON_RETURN_P;
   8266c:	2310      	movs	r3, #16
   8266e:	71fb      	strb	r3, [r7, #7]
   82670:	e00b      	b.n	8268a <button_events+0x1a6>
        }
        else if (pb_return_act != pb_return_prev && pb_return_act == 1)
   82672:	4b1c      	ldr	r3, [pc, #112]	; (826e4 <button_events+0x200>)
   82674:	781a      	ldrb	r2, [r3, #0]
   82676:	4b21      	ldr	r3, [pc, #132]	; (826fc <button_events+0x218>)
   82678:	781b      	ldrb	r3, [r3, #0]
   8267a:	429a      	cmp	r2, r3
   8267c:	d005      	beq.n	8268a <button_events+0x1a6>
   8267e:	4b19      	ldr	r3, [pc, #100]	; (826e4 <button_events+0x200>)
   82680:	781b      	ldrb	r3, [r3, #0]
   82682:	2b01      	cmp	r3, #1
   82684:	d101      	bne.n	8268a <button_events+0x1a6>
        {
            nextEvent = EVENT_BUTTON_RETURN_R;
   82686:	2312      	movs	r3, #18
   82688:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_return_act == pb_up_prev && pb_return_act == 0)
        {
            nextEvent = EVENT_BUTTON_RETURN_H;
        }*/
        
        pb_up_prev = pb_up_act;
   8268a:	4b11      	ldr	r3, [pc, #68]	; (826d0 <button_events+0x1ec>)
   8268c:	781a      	ldrb	r2, [r3, #0]
   8268e:	4b16      	ldr	r3, [pc, #88]	; (826e8 <button_events+0x204>)
   82690:	701a      	strb	r2, [r3, #0]
        pb_left_prev = pb_left_act;
   82692:	4b10      	ldr	r3, [pc, #64]	; (826d4 <button_events+0x1f0>)
   82694:	781a      	ldrb	r2, [r3, #0]
   82696:	4b15      	ldr	r3, [pc, #84]	; (826ec <button_events+0x208>)
   82698:	701a      	strb	r2, [r3, #0]
        pb_mid_prev = pb_mid_act;
   8269a:	4b0f      	ldr	r3, [pc, #60]	; (826d8 <button_events+0x1f4>)
   8269c:	781a      	ldrb	r2, [r3, #0]
   8269e:	4b14      	ldr	r3, [pc, #80]	; (826f0 <button_events+0x20c>)
   826a0:	701a      	strb	r2, [r3, #0]
        pb_right_prev = pb_right_act;
   826a2:	4b0e      	ldr	r3, [pc, #56]	; (826dc <button_events+0x1f8>)
   826a4:	781a      	ldrb	r2, [r3, #0]
   826a6:	4b13      	ldr	r3, [pc, #76]	; (826f4 <button_events+0x210>)
   826a8:	701a      	strb	r2, [r3, #0]
        pb_down_prev = pb_down_act;
   826aa:	4b0d      	ldr	r3, [pc, #52]	; (826e0 <button_events+0x1fc>)
   826ac:	781a      	ldrb	r2, [r3, #0]
   826ae:	4b12      	ldr	r3, [pc, #72]	; (826f8 <button_events+0x214>)
   826b0:	701a      	strb	r2, [r3, #0]
        pb_return_prev = pb_return_act;
   826b2:	4b0c      	ldr	r3, [pc, #48]	; (826e4 <button_events+0x200>)
   826b4:	781a      	ldrb	r2, [r3, #0]
   826b6:	4b11      	ldr	r3, [pc, #68]	; (826fc <button_events+0x218>)
   826b8:	701a      	strb	r2, [r3, #0]
    }

    return nextEvent;
   826ba:	79fb      	ldrb	r3, [r7, #7]
}
   826bc:	4618      	mov	r0, r3
   826be:	3708      	adds	r7, #8
   826c0:	46bd      	mov	sp, r7
   826c2:	bd80      	pop	{r7, pc}
   826c4:	00082eb5 	.word	0x00082eb5
   826c8:	20070e20 	.word	0x20070e20
   826cc:	00081b07 	.word	0x00081b07
   826d0:	20070e49 	.word	0x20070e49
   826d4:	20070e30 	.word	0x20070e30
   826d8:	20070e48 	.word	0x20070e48
   826dc:	20070e4a 	.word	0x20070e4a
   826e0:	20070e2c 	.word	0x20070e2c
   826e4:	20070e28 	.word	0x20070e28
   826e8:	20070e2d 	.word	0x20070e2d
   826ec:	20070e2b 	.word	0x20070e2b
   826f0:	20070e29 	.word	0x20070e29
   826f4:	20070e2e 	.word	0x20070e2e
   826f8:	20070e2a 	.word	0x20070e2a
   826fc:	20070e2f 	.word	0x20070e2f

00082700 <NVIC_EnableIRQ>:
{
   82700:	b480      	push	{r7}
   82702:	b083      	sub	sp, #12
   82704:	af00      	add	r7, sp, #0
   82706:	4603      	mov	r3, r0
   82708:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8270a:	4908      	ldr	r1, [pc, #32]	; (8272c <NVIC_EnableIRQ+0x2c>)
   8270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82710:	095b      	lsrs	r3, r3, #5
   82712:	79fa      	ldrb	r2, [r7, #7]
   82714:	f002 021f 	and.w	r2, r2, #31
   82718:	2001      	movs	r0, #1
   8271a:	fa00 f202 	lsl.w	r2, r0, r2
   8271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82722:	bf00      	nop
   82724:	370c      	adds	r7, #12
   82726:	46bd      	mov	sp, r7
   82728:	bc80      	pop	{r7}
   8272a:	4770      	bx	lr
   8272c:	e000e100 	.word	0xe000e100

00082730 <NVIC_DisableIRQ>:
{
   82730:	b480      	push	{r7}
   82732:	b083      	sub	sp, #12
   82734:	af00      	add	r7, sp, #0
   82736:	4603      	mov	r3, r0
   82738:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   8273a:	4909      	ldr	r1, [pc, #36]	; (82760 <NVIC_DisableIRQ+0x30>)
   8273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82740:	095b      	lsrs	r3, r3, #5
   82742:	79fa      	ldrb	r2, [r7, #7]
   82744:	f002 021f 	and.w	r2, r2, #31
   82748:	2001      	movs	r0, #1
   8274a:	fa00 f202 	lsl.w	r2, r0, r2
   8274e:	3320      	adds	r3, #32
   82750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82754:	bf00      	nop
   82756:	370c      	adds	r7, #12
   82758:	46bd      	mov	sp, r7
   8275a:	bc80      	pop	{r7}
   8275c:	4770      	bx	lr
   8275e:	bf00      	nop
   82760:	e000e100 	.word	0xe000e100

00082764 <NVIC_ClearPendingIRQ>:
{
   82764:	b480      	push	{r7}
   82766:	b083      	sub	sp, #12
   82768:	af00      	add	r7, sp, #0
   8276a:	4603      	mov	r3, r0
   8276c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8276e:	4909      	ldr	r1, [pc, #36]	; (82794 <NVIC_ClearPendingIRQ+0x30>)
   82770:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82774:	095b      	lsrs	r3, r3, #5
   82776:	79fa      	ldrb	r2, [r7, #7]
   82778:	f002 021f 	and.w	r2, r2, #31
   8277c:	2001      	movs	r0, #1
   8277e:	fa00 f202 	lsl.w	r2, r0, r2
   82782:	3360      	adds	r3, #96	; 0x60
   82784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82788:	bf00      	nop
   8278a:	370c      	adds	r7, #12
   8278c:	46bd      	mov	sp, r7
   8278e:	bc80      	pop	{r7}
   82790:	4770      	bx	lr
   82792:	bf00      	nop
   82794:	e000e100 	.word	0xe000e100

00082798 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   82798:	b480      	push	{r7}
   8279a:	b083      	sub	sp, #12
   8279c:	af00      	add	r7, sp, #0
   8279e:	4603      	mov	r3, r0
   827a0:	6039      	str	r1, [r7, #0]
   827a2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   827a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   827a8:	2b00      	cmp	r3, #0
   827aa:	da0b      	bge.n	827c4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   827ac:	490d      	ldr	r1, [pc, #52]	; (827e4 <NVIC_SetPriority+0x4c>)
   827ae:	79fb      	ldrb	r3, [r7, #7]
   827b0:	f003 030f 	and.w	r3, r3, #15
   827b4:	3b04      	subs	r3, #4
   827b6:	683a      	ldr	r2, [r7, #0]
   827b8:	b2d2      	uxtb	r2, r2
   827ba:	0112      	lsls	r2, r2, #4
   827bc:	b2d2      	uxtb	r2, r2
   827be:	440b      	add	r3, r1
   827c0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   827c2:	e009      	b.n	827d8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   827c4:	4908      	ldr	r1, [pc, #32]	; (827e8 <NVIC_SetPriority+0x50>)
   827c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   827ca:	683a      	ldr	r2, [r7, #0]
   827cc:	b2d2      	uxtb	r2, r2
   827ce:	0112      	lsls	r2, r2, #4
   827d0:	b2d2      	uxtb	r2, r2
   827d2:	440b      	add	r3, r1
   827d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   827d8:	bf00      	nop
   827da:	370c      	adds	r7, #12
   827dc:	46bd      	mov	sp, r7
   827de:	bc80      	pop	{r7}
   827e0:	4770      	bx	lr
   827e2:	bf00      	nop
   827e4:	e000ed00 	.word	0xe000ed00
   827e8:	e000e100 	.word	0xe000e100

000827ec <sysclk_enable_peripheral_clock>:
{
   827ec:	b580      	push	{r7, lr}
   827ee:	b082      	sub	sp, #8
   827f0:	af00      	add	r7, sp, #0
   827f2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   827f4:	6878      	ldr	r0, [r7, #4]
   827f6:	4b03      	ldr	r3, [pc, #12]	; (82804 <sysclk_enable_peripheral_clock+0x18>)
   827f8:	4798      	blx	r3
}
   827fa:	bf00      	nop
   827fc:	3708      	adds	r7, #8
   827fe:	46bd      	mov	sp, r7
   82800:	bd80      	pop	{r7, pc}
   82802:	bf00      	nop
   82804:	00083875 	.word	0x00083875

00082808 <ioport_set_pin_level>:
{
   82808:	b480      	push	{r7}
   8280a:	b08b      	sub	sp, #44	; 0x2c
   8280c:	af00      	add	r7, sp, #0
   8280e:	6078      	str	r0, [r7, #4]
   82810:	460b      	mov	r3, r1
   82812:	70fb      	strb	r3, [r7, #3]
   82814:	687b      	ldr	r3, [r7, #4]
   82816:	627b      	str	r3, [r7, #36]	; 0x24
   82818:	78fb      	ldrb	r3, [r7, #3]
   8281a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   8281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82820:	61fb      	str	r3, [r7, #28]
   82822:	69fb      	ldr	r3, [r7, #28]
   82824:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82826:	69bb      	ldr	r3, [r7, #24]
   82828:	095b      	lsrs	r3, r3, #5
   8282a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8282c:	697b      	ldr	r3, [r7, #20]
   8282e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82832:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82836:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82838:	613b      	str	r3, [r7, #16]
	if (level) {
   8283a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8283e:	2b00      	cmp	r3, #0
   82840:	d009      	beq.n	82856 <ioport_set_pin_level+0x4e>
   82842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82844:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82846:	68fb      	ldr	r3, [r7, #12]
   82848:	f003 031f 	and.w	r3, r3, #31
   8284c:	2201      	movs	r2, #1
   8284e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82850:	693b      	ldr	r3, [r7, #16]
   82852:	631a      	str	r2, [r3, #48]	; 0x30
}
   82854:	e008      	b.n	82868 <ioport_set_pin_level+0x60>
   82856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82858:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   8285a:	68bb      	ldr	r3, [r7, #8]
   8285c:	f003 031f 	and.w	r3, r3, #31
   82860:	2201      	movs	r2, #1
   82862:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82864:	693b      	ldr	r3, [r7, #16]
   82866:	635a      	str	r2, [r3, #52]	; 0x34
   82868:	bf00      	nop
   8286a:	372c      	adds	r7, #44	; 0x2c
   8286c:	46bd      	mov	sp, r7
   8286e:	bc80      	pop	{r7}
   82870:	4770      	bx	lr

00082872 <ioport_get_port_level>:
 * \return Logical levels of the specified pins from the read port, returned as
 * a mask.
 */
static inline ioport_port_mask_t ioport_get_port_level(ioport_pin_t port,
		ioport_port_mask_t mask)
{
   82872:	b480      	push	{r7}
   82874:	b087      	sub	sp, #28
   82876:	af00      	add	r7, sp, #0
   82878:	6078      	str	r0, [r7, #4]
   8287a:	6039      	str	r1, [r7, #0]
   8287c:	687b      	ldr	r3, [r7, #4]
   8287e:	617b      	str	r3, [r7, #20]
   82880:	683b      	ldr	r3, [r7, #0]
   82882:	613b      	str	r3, [r7, #16]
   82884:	697b      	ldr	r3, [r7, #20]
   82886:	60fb      	str	r3, [r7, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82888:	68fb      	ldr	r3, [r7, #12]
   8288a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8288e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82892:	025b      	lsls	r3, r3, #9
}

__always_inline static ioport_port_mask_t arch_ioport_get_port_level(
		ioport_port_t port, ioport_port_mask_t mask)
{
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
   82894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   82896:	693b      	ldr	r3, [r7, #16]
   82898:	4013      	ands	r3, r2
	return arch_ioport_get_port_level(port, mask);
   8289a:	bf00      	nop
}
   8289c:	4618      	mov	r0, r3
   8289e:	371c      	adds	r7, #28
   828a0:	46bd      	mov	sp, r7
   828a2:	bc80      	pop	{r7}
   828a4:	4770      	bx	lr
	...

000828a8 <motor_init>:
float CosinMA1 = -0.866025404f;
float CosinMA2 = 0.866025404f;
float CosinMA3 = 0.0f;

void motor_init(void)
{
   828a8:	b5b0      	push	{r4, r5, r7, lr}
   828aa:	af00      	add	r7, sp, #0
    /* Initialize PWM channel for MLeft */
    /* Period is left-aligned */
    g_pwm_channel_MLeft.alignment = PWM_ALIGN_LEFT;
   828ac:	4b5e      	ldr	r3, [pc, #376]	; (82a28 <motor_init+0x180>)
   828ae:	2200      	movs	r2, #0
   828b0:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MLeft.polarity = PWM_LOW;
   828b2:	4b5d      	ldr	r3, [pc, #372]	; (82a28 <motor_init+0x180>)
   828b4:	2200      	movs	r2, #0
   828b6:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MLeft.ul_prescaler = PWM_CMR_CPRE_CLKA;
   828b8:	4b5b      	ldr	r3, [pc, #364]	; (82a28 <motor_init+0x180>)
   828ba:	220b      	movs	r2, #11
   828bc:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MLeft.ul_period = PERIOD_VALUE;
   828be:	4b5a      	ldr	r3, [pc, #360]	; (82a28 <motor_init+0x180>)
   828c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   828c4:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MLeft.ul_duty = INIT_DUTY_VALUE;
   828c6:	4b58      	ldr	r3, [pc, #352]	; (82a28 <motor_init+0x180>)
   828c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   828cc:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MLeft.channel = MOTOR_LEFT;
   828ce:	4b56      	ldr	r3, [pc, #344]	; (82a28 <motor_init+0x180>)
   828d0:	2200      	movs	r2, #0
   828d2:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MLeft);
   828d4:	4954      	ldr	r1, [pc, #336]	; (82a28 <motor_init+0x180>)
   828d6:	4855      	ldr	r0, [pc, #340]	; (82a2c <motor_init+0x184>)
   828d8:	4b55      	ldr	r3, [pc, #340]	; (82a30 <motor_init+0x188>)
   828da:	4798      	blx	r3


    /* Initialize PWM channel for MRight */
    /* Period is left-aligned */
    g_pwm_channel_MRight.alignment = PWM_ALIGN_LEFT;
   828dc:	4b55      	ldr	r3, [pc, #340]	; (82a34 <motor_init+0x18c>)
   828de:	2200      	movs	r2, #0
   828e0:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MRight.polarity = PWM_LOW;
   828e2:	4b54      	ldr	r3, [pc, #336]	; (82a34 <motor_init+0x18c>)
   828e4:	2200      	movs	r2, #0
   828e6:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MRight.ul_prescaler = PWM_CMR_CPRE_CLKA;
   828e8:	4b52      	ldr	r3, [pc, #328]	; (82a34 <motor_init+0x18c>)
   828ea:	220b      	movs	r2, #11
   828ec:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MRight.ul_period = PERIOD_VALUE;
   828ee:	4b51      	ldr	r3, [pc, #324]	; (82a34 <motor_init+0x18c>)
   828f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   828f4:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MRight.ul_duty = INIT_DUTY_VALUE;
   828f6:	4b4f      	ldr	r3, [pc, #316]	; (82a34 <motor_init+0x18c>)
   828f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   828fc:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MRight.channel = MOTOR_RIGHT;
   828fe:	4b4d      	ldr	r3, [pc, #308]	; (82a34 <motor_init+0x18c>)
   82900:	2201      	movs	r2, #1
   82902:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MRight);
   82904:	494b      	ldr	r1, [pc, #300]	; (82a34 <motor_init+0x18c>)
   82906:	4849      	ldr	r0, [pc, #292]	; (82a2c <motor_init+0x184>)
   82908:	4b49      	ldr	r3, [pc, #292]	; (82a30 <motor_init+0x188>)
   8290a:	4798      	blx	r3


    /* Initialize PWM channel for MBack */
    /* Period is left-aligned */
    g_pwm_channel_MRear.alignment = PWM_ALIGN_LEFT;
   8290c:	4b4a      	ldr	r3, [pc, #296]	; (82a38 <motor_init+0x190>)
   8290e:	2200      	movs	r2, #0
   82910:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MRear.polarity = PWM_LOW;
   82912:	4b49      	ldr	r3, [pc, #292]	; (82a38 <motor_init+0x190>)
   82914:	2200      	movs	r2, #0
   82916:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MRear.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82918:	4b47      	ldr	r3, [pc, #284]	; (82a38 <motor_init+0x190>)
   8291a:	220b      	movs	r2, #11
   8291c:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MRear.ul_period = PERIOD_VALUE;
   8291e:	4b46      	ldr	r3, [pc, #280]	; (82a38 <motor_init+0x190>)
   82920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82924:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MRear.ul_duty = INIT_DUTY_VALUE;
   82926:	4b44      	ldr	r3, [pc, #272]	; (82a38 <motor_init+0x190>)
   82928:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   8292c:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MRear.channel = MOTOR_REAR;
   8292e:	4b42      	ldr	r3, [pc, #264]	; (82a38 <motor_init+0x190>)
   82930:	2202      	movs	r2, #2
   82932:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MRear);
   82934:	4940      	ldr	r1, [pc, #256]	; (82a38 <motor_init+0x190>)
   82936:	483d      	ldr	r0, [pc, #244]	; (82a2c <motor_init+0x184>)
   82938:	4b3d      	ldr	r3, [pc, #244]	; (82a30 <motor_init+0x188>)
   8293a:	4798      	blx	r3

    pwm_channel_disable(PWM, MOTOR_LEFT);
   8293c:	2100      	movs	r1, #0
   8293e:	483b      	ldr	r0, [pc, #236]	; (82a2c <motor_init+0x184>)
   82940:	4b3e      	ldr	r3, [pc, #248]	; (82a3c <motor_init+0x194>)
   82942:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_RIGHT);
   82944:	2101      	movs	r1, #1
   82946:	4839      	ldr	r0, [pc, #228]	; (82a2c <motor_init+0x184>)
   82948:	4b3c      	ldr	r3, [pc, #240]	; (82a3c <motor_init+0x194>)
   8294a:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_REAR);
   8294c:	2102      	movs	r1, #2
   8294e:	4837      	ldr	r0, [pc, #220]	; (82a2c <motor_init+0x184>)
   82950:	4b3a      	ldr	r3, [pc, #232]	; (82a3c <motor_init+0x194>)
   82952:	4798      	blx	r3

    g_pwm_channel_ENC.alignment = PWM_ALIGN_LEFT;
   82954:	4b3a      	ldr	r3, [pc, #232]	; (82a40 <motor_init+0x198>)
   82956:	2200      	movs	r2, #0
   82958:	811a      	strh	r2, [r3, #8]
    g_pwm_channel_ENC.polarity = PWM_LOW;
   8295a:	4b39      	ldr	r3, [pc, #228]	; (82a40 <motor_init+0x198>)
   8295c:	2200      	movs	r2, #0
   8295e:	729a      	strb	r2, [r3, #10]
    g_pwm_channel_ENC.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82960:	4b37      	ldr	r3, [pc, #220]	; (82a40 <motor_init+0x198>)
   82962:	220b      	movs	r2, #11
   82964:	605a      	str	r2, [r3, #4]
    g_pwm_channel_ENC.ul_period = 330;
   82966:	4b36      	ldr	r3, [pc, #216]	; (82a40 <motor_init+0x198>)
   82968:	f44f 72a5 	mov.w	r2, #330	; 0x14a
   8296c:	611a      	str	r2, [r3, #16]
    g_pwm_channel_ENC.ul_duty = 165;
   8296e:	4b34      	ldr	r3, [pc, #208]	; (82a40 <motor_init+0x198>)
   82970:	22a5      	movs	r2, #165	; 0xa5
   82972:	60da      	str	r2, [r3, #12]
    g_pwm_channel_ENC.channel = ENC_CLK;
   82974:	4b32      	ldr	r3, [pc, #200]	; (82a40 <motor_init+0x198>)
   82976:	2204      	movs	r2, #4
   82978:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_ENC);
   8297a:	4931      	ldr	r1, [pc, #196]	; (82a40 <motor_init+0x198>)
   8297c:	482b      	ldr	r0, [pc, #172]	; (82a2c <motor_init+0x184>)
   8297e:	4b2c      	ldr	r3, [pc, #176]	; (82a30 <motor_init+0x188>)
   82980:	4798      	blx	r3
    pwm_channel_enable(PWM, ENC_CLK);
   82982:	2104      	movs	r1, #4
   82984:	4829      	ldr	r0, [pc, #164]	; (82a2c <motor_init+0x184>)
   82986:	4b2f      	ldr	r3, [pc, #188]	; (82a44 <motor_init+0x19c>)
   82988:	4798      	blx	r3

    sysclk_enable_peripheral_clock(ID_TC1);
   8298a:	201c      	movs	r0, #28
   8298c:	4b2e      	ldr	r3, [pc, #184]	; (82a48 <motor_init+0x1a0>)
   8298e:	4798      	blx	r3
    tc_init(TC0, 1, TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_CPCTRG);
   82990:	f244 0203 	movw	r2, #16387	; 0x4003
   82994:	2101      	movs	r1, #1
   82996:	482d      	ldr	r0, [pc, #180]	; (82a4c <motor_init+0x1a4>)
   82998:	4b2d      	ldr	r3, [pc, #180]	; (82a50 <motor_init+0x1a8>)
   8299a:	4798      	blx	r3
    tc_write_rc(TC0, 1, 5249);  //MCLK / 128 * 0,008
   8299c:	f241 4281 	movw	r2, #5249	; 0x1481
   829a0:	2101      	movs	r1, #1
   829a2:	482a      	ldr	r0, [pc, #168]	; (82a4c <motor_init+0x1a4>)
   829a4:	4b2b      	ldr	r3, [pc, #172]	; (82a54 <motor_init+0x1ac>)
   829a6:	4798      	blx	r3
    NVIC_DisableIRQ(TC1_IRQn);
   829a8:	201c      	movs	r0, #28
   829aa:	4b2b      	ldr	r3, [pc, #172]	; (82a58 <motor_init+0x1b0>)
   829ac:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TC1_IRQn);
   829ae:	201c      	movs	r0, #28
   829b0:	4b2a      	ldr	r3, [pc, #168]	; (82a5c <motor_init+0x1b4>)
   829b2:	4798      	blx	r3
    NVIC_SetPriority(TC1_IRQn, 0);
   829b4:	2100      	movs	r1, #0
   829b6:	201c      	movs	r0, #28
   829b8:	4b29      	ldr	r3, [pc, #164]	; (82a60 <motor_init+0x1b8>)
   829ba:	4798      	blx	r3
    NVIC_EnableIRQ(TC1_IRQn);
   829bc:	201c      	movs	r0, #28
   829be:	4b29      	ldr	r3, [pc, #164]	; (82a64 <motor_init+0x1bc>)
   829c0:	4798      	blx	r3
    tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   829c2:	2210      	movs	r2, #16
   829c4:	2101      	movs	r1, #1
   829c6:	4821      	ldr	r0, [pc, #132]	; (82a4c <motor_init+0x1a4>)
   829c8:	4b27      	ldr	r3, [pc, #156]	; (82a68 <motor_init+0x1c0>)
   829ca:	4798      	blx	r3
    tc_start(TC0, 1);
   829cc:	2101      	movs	r1, #1
   829ce:	481f      	ldr	r0, [pc, #124]	; (82a4c <motor_init+0x1a4>)
   829d0:	4b26      	ldr	r3, [pc, #152]	; (82a6c <motor_init+0x1c4>)
   829d2:	4798      	blx	r3

    mleft_pid_reg.kp = 15.0f;
   829d4:	4b26      	ldr	r3, [pc, #152]	; (82a70 <motor_init+0x1c8>)
   829d6:	4a27      	ldr	r2, [pc, #156]	; (82a74 <motor_init+0x1cc>)
   829d8:	601a      	str	r2, [r3, #0]
    mleft_pid_reg.ki = 10.0f;
   829da:	4b25      	ldr	r3, [pc, #148]	; (82a70 <motor_init+0x1c8>)
   829dc:	4a26      	ldr	r2, [pc, #152]	; (82a78 <motor_init+0x1d0>)
   829de:	605a      	str	r2, [r3, #4]
    mleft_pid_reg.kc = 1.0f;
   829e0:	4b23      	ldr	r3, [pc, #140]	; (82a70 <motor_init+0x1c8>)
   829e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   829e6:	609a      	str	r2, [r3, #8]
    mleft_pid_reg.kd = 5.0f;
   829e8:	4b21      	ldr	r3, [pc, #132]	; (82a70 <motor_init+0x1c8>)
   829ea:	4a24      	ldr	r2, [pc, #144]	; (82a7c <motor_init+0x1d4>)
   829ec:	60da      	str	r2, [r3, #12]
    mleft_pid_reg.outMin = -500.0f;
   829ee:	4b20      	ldr	r3, [pc, #128]	; (82a70 <motor_init+0x1c8>)
   829f0:	4a23      	ldr	r2, [pc, #140]	; (82a80 <motor_init+0x1d8>)
   829f2:	619a      	str	r2, [r3, #24]
    mleft_pid_reg.outMax = 500.0f;
   829f4:	4b1e      	ldr	r3, [pc, #120]	; (82a70 <motor_init+0x1c8>)
   829f6:	4a23      	ldr	r2, [pc, #140]	; (82a84 <motor_init+0x1dc>)
   829f8:	615a      	str	r2, [r3, #20]

    mright_pid_reg = mleft_pid_reg;
   829fa:	4a23      	ldr	r2, [pc, #140]	; (82a88 <motor_init+0x1e0>)
   829fc:	4b1c      	ldr	r3, [pc, #112]	; (82a70 <motor_init+0x1c8>)
   829fe:	4614      	mov	r4, r2
   82a00:	461d      	mov	r5, r3
   82a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82a0a:	682b      	ldr	r3, [r5, #0]
   82a0c:	6023      	str	r3, [r4, #0]
    mrear_pid_reg = mleft_pid_reg;
   82a0e:	4a1f      	ldr	r2, [pc, #124]	; (82a8c <motor_init+0x1e4>)
   82a10:	4b17      	ldr	r3, [pc, #92]	; (82a70 <motor_init+0x1c8>)
   82a12:	4614      	mov	r4, r2
   82a14:	461d      	mov	r5, r3
   82a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82a1e:	682b      	ldr	r3, [r5, #0]
   82a20:	6023      	str	r3, [r4, #0]
}
   82a22:	bf00      	nop
   82a24:	bdb0      	pop	{r4, r5, r7, pc}
   82a26:	bf00      	nop
   82a28:	20070e64 	.word	0x20070e64
   82a2c:	40094000 	.word	0x40094000
   82a30:	00080369 	.word	0x00080369
   82a34:	20070f34 	.word	0x20070f34
   82a38:	20070edc 	.word	0x20070edc
   82a3c:	00080615 	.word	0x00080615
   82a40:	20070e8c 	.word	0x20070e8c
   82a44:	000805f3 	.word	0x000805f3
   82a48:	000827ed 	.word	0x000827ed
   82a4c:	40080000 	.word	0x40080000
   82a50:	00080637 	.word	0x00080637
   82a54:	0008068f 	.word	0x0008068f
   82a58:	00082731 	.word	0x00082731
   82a5c:	00082765 	.word	0x00082765
   82a60:	00082799 	.word	0x00082799
   82a64:	00082701 	.word	0x00082701
   82a68:	000806b3 	.word	0x000806b3
   82a6c:	0008066f 	.word	0x0008066f
   82a70:	20070f5c 	.word	0x20070f5c
   82a74:	41700000 	.word	0x41700000
   82a78:	41200000 	.word	0x41200000
   82a7c:	40a00000 	.word	0x40a00000
   82a80:	c3fa0000 	.word	0xc3fa0000
   82a84:	43fa0000 	.word	0x43fa0000
   82a88:	20070eb4 	.word	0x20070eb4
   82a8c:	20070f04 	.word	0x20070f04

00082a90 <enable_motor>:

void enable_motor(void)
{
   82a90:	b580      	push	{r7, lr}
   82a92:	af00      	add	r7, sp, #0
    pwm_channel_enable(PWM, MOTOR_LEFT);
   82a94:	2100      	movs	r1, #0
   82a96:	480d      	ldr	r0, [pc, #52]	; (82acc <enable_motor+0x3c>)
   82a98:	4b0d      	ldr	r3, [pc, #52]	; (82ad0 <enable_motor+0x40>)
   82a9a:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_RIGHT);
   82a9c:	2101      	movs	r1, #1
   82a9e:	480b      	ldr	r0, [pc, #44]	; (82acc <enable_motor+0x3c>)
   82aa0:	4b0b      	ldr	r3, [pc, #44]	; (82ad0 <enable_motor+0x40>)
   82aa2:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_REAR);
   82aa4:	2102      	movs	r1, #2
   82aa6:	4809      	ldr	r0, [pc, #36]	; (82acc <enable_motor+0x3c>)
   82aa8:	4b09      	ldr	r3, [pc, #36]	; (82ad0 <enable_motor+0x40>)
   82aaa:	4798      	blx	r3

    ioport_set_pin_level(ENC_LOAD, 0);
   82aac:	2100      	movs	r1, #0
   82aae:	2020      	movs	r0, #32
   82ab0:	4b08      	ldr	r3, [pc, #32]	; (82ad4 <enable_motor+0x44>)
   82ab2:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   82ab4:	2101      	movs	r1, #1
   82ab6:	2020      	movs	r0, #32
   82ab8:	4b06      	ldr	r3, [pc, #24]	; (82ad4 <enable_motor+0x44>)
   82aba:	4798      	blx	r3

    tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82abc:	2210      	movs	r2, #16
   82abe:	2101      	movs	r1, #1
   82ac0:	4805      	ldr	r0, [pc, #20]	; (82ad8 <enable_motor+0x48>)
   82ac2:	4b06      	ldr	r3, [pc, #24]	; (82adc <enable_motor+0x4c>)
   82ac4:	4798      	blx	r3
}
   82ac6:	bf00      	nop
   82ac8:	bd80      	pop	{r7, pc}
   82aca:	bf00      	nop
   82acc:	40094000 	.word	0x40094000
   82ad0:	000805f3 	.word	0x000805f3
   82ad4:	00082809 	.word	0x00082809
   82ad8:	40080000 	.word	0x40080000
   82adc:	000806b3 	.word	0x000806b3

00082ae0 <motor_speed>:
        pwm_channel_enable(PWM, ENC_CLK);
    }*/ 
}

void motor_speed(uint8_t motor, int16_t ispeed)
{
   82ae0:	b580      	push	{r7, lr}
   82ae2:	b084      	sub	sp, #16
   82ae4:	af00      	add	r7, sp, #0
   82ae6:	4603      	mov	r3, r0
   82ae8:	460a      	mov	r2, r1
   82aea:	71fb      	strb	r3, [r7, #7]
   82aec:	4613      	mov	r3, r2
   82aee:	80bb      	strh	r3, [r7, #4]
    if (ispeed > 500)
   82af0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82af4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82af8:	dd02      	ble.n	82b00 <motor_speed+0x20>
    {
        ispeed = 500;
   82afa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82afe:	80bb      	strh	r3, [r7, #4]
    }

    if (ispeed < -500)
   82b00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82b04:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
   82b08:	da02      	bge.n	82b10 <motor_speed+0x30>
    {
        ispeed = -500;
   82b0a:	f64f 630c 	movw	r3, #65036	; 0xfe0c
   82b0e:	80bb      	strh	r3, [r7, #4]
    }

    uint16_t duty_cycle = (uint16_t)(ispeed + (int16_t)INIT_DUTY_VALUE);
   82b10:	88bb      	ldrh	r3, [r7, #4]
   82b12:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   82b16:	81fb      	strh	r3, [r7, #14]

    if (duty_cycle < 10)
   82b18:	89fb      	ldrh	r3, [r7, #14]
   82b1a:	2b09      	cmp	r3, #9
   82b1c:	d801      	bhi.n	82b22 <motor_speed+0x42>
    {
        duty_cycle = 10;
   82b1e:	230a      	movs	r3, #10
   82b20:	81fb      	strh	r3, [r7, #14]
    }

    if (duty_cycle > 990)
   82b22:	89fb      	ldrh	r3, [r7, #14]
   82b24:	f240 32de 	movw	r2, #990	; 0x3de
   82b28:	4293      	cmp	r3, r2
   82b2a:	d902      	bls.n	82b32 <motor_speed+0x52>
    {
        duty_cycle = 990;
   82b2c:	f240 33de 	movw	r3, #990	; 0x3de
   82b30:	81fb      	strh	r3, [r7, #14]
    }

    switch(motor)
   82b32:	79fb      	ldrb	r3, [r7, #7]
   82b34:	2b01      	cmp	r3, #1
   82b36:	d00b      	beq.n	82b50 <motor_speed+0x70>
   82b38:	2b02      	cmp	r3, #2
   82b3a:	d010      	beq.n	82b5e <motor_speed+0x7e>
   82b3c:	2b00      	cmp	r3, #0
   82b3e:	d000      	beq.n	82b42 <motor_speed+0x62>
            break;
        case MOTOR_REAR:
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
            break;
        default:
            break;
   82b40:	e014      	b.n	82b6c <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MLeft, duty_cycle);
   82b42:	89fb      	ldrh	r3, [r7, #14]
   82b44:	461a      	mov	r2, r3
   82b46:	490b      	ldr	r1, [pc, #44]	; (82b74 <motor_speed+0x94>)
   82b48:	480b      	ldr	r0, [pc, #44]	; (82b78 <motor_speed+0x98>)
   82b4a:	4b0c      	ldr	r3, [pc, #48]	; (82b7c <motor_speed+0x9c>)
   82b4c:	4798      	blx	r3
            break;
   82b4e:	e00d      	b.n	82b6c <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRight, duty_cycle);
   82b50:	89fb      	ldrh	r3, [r7, #14]
   82b52:	461a      	mov	r2, r3
   82b54:	490a      	ldr	r1, [pc, #40]	; (82b80 <motor_speed+0xa0>)
   82b56:	4808      	ldr	r0, [pc, #32]	; (82b78 <motor_speed+0x98>)
   82b58:	4b08      	ldr	r3, [pc, #32]	; (82b7c <motor_speed+0x9c>)
   82b5a:	4798      	blx	r3
            break;
   82b5c:	e006      	b.n	82b6c <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
   82b5e:	89fb      	ldrh	r3, [r7, #14]
   82b60:	461a      	mov	r2, r3
   82b62:	4908      	ldr	r1, [pc, #32]	; (82b84 <motor_speed+0xa4>)
   82b64:	4804      	ldr	r0, [pc, #16]	; (82b78 <motor_speed+0x98>)
   82b66:	4b05      	ldr	r3, [pc, #20]	; (82b7c <motor_speed+0x9c>)
   82b68:	4798      	blx	r3
            break;
   82b6a:	bf00      	nop
    }
}
   82b6c:	bf00      	nop
   82b6e:	3710      	adds	r7, #16
   82b70:	46bd      	mov	sp, r7
   82b72:	bd80      	pop	{r7, pc}
   82b74:	20070e64 	.word	0x20070e64
   82b78:	40094000 	.word	0x40094000
   82b7c:	000805af 	.word	0x000805af
   82b80:	20070f34 	.word	0x20070f34
   82b84:	20070edc 	.word	0x20070edc

00082b88 <TC1_Handler>:

void TC1_Handler(void)
{
   82b88:	b590      	push	{r4, r7, lr}
   82b8a:	b085      	sub	sp, #20
   82b8c:	af00      	add	r7, sp, #0
    uint32_t PIOC_value;
    int32_t eleft_counts;
    int32_t eright_counts;
    int32_t erear_counts;

    ioport_set_pin_level(LED_M3, 1);
   82b8e:	2101      	movs	r1, #1
   82b90:	2069      	movs	r0, #105	; 0x69
   82b92:	4b50      	ldr	r3, [pc, #320]	; (82cd4 <TC1_Handler+0x14c>)
   82b94:	4798      	blx	r3

    if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   82b96:	2101      	movs	r1, #1
   82b98:	484f      	ldr	r0, [pc, #316]	; (82cd8 <TC1_Handler+0x150>)
   82b9a:	4b50      	ldr	r3, [pc, #320]	; (82cdc <TC1_Handler+0x154>)
   82b9c:	4798      	blx	r3
   82b9e:	4603      	mov	r3, r0
   82ba0:	f003 0310 	and.w	r3, r3, #16
   82ba4:	2b10      	cmp	r3, #16
   82ba6:	f040 808c 	bne.w	82cc2 <TC1_Handler+0x13a>
    {
        pwm_channel_disable(PWM, ENC_CLK);
   82baa:	2104      	movs	r1, #4
   82bac:	484c      	ldr	r0, [pc, #304]	; (82ce0 <TC1_Handler+0x158>)
   82bae:	4b4d      	ldr	r3, [pc, #308]	; (82ce4 <TC1_Handler+0x15c>)
   82bb0:	4798      	blx	r3
        PIOC_value = ioport_get_port_level(IOPORT_PIOC, 0xFFFFFFFF);
   82bb2:	f04f 31ff 	mov.w	r1, #4294967295
   82bb6:	2002      	movs	r0, #2
   82bb8:	4b4b      	ldr	r3, [pc, #300]	; (82ce8 <TC1_Handler+0x160>)
   82bba:	4798      	blx	r3
   82bbc:	60f8      	str	r0, [r7, #12]
        ioport_set_pin_level(ENC_LOAD, 0);
   82bbe:	2100      	movs	r1, #0
   82bc0:	2020      	movs	r0, #32
   82bc2:	4b44      	ldr	r3, [pc, #272]	; (82cd4 <TC1_Handler+0x14c>)
   82bc4:	4798      	blx	r3
        ioport_set_pin_level(ENC_LOAD, 1);
   82bc6:	2101      	movs	r1, #1
   82bc8:	2020      	movs	r0, #32
   82bca:	4b42      	ldr	r3, [pc, #264]	; (82cd4 <TC1_Handler+0x14c>)
   82bcc:	4798      	blx	r3
        pwm_channel_enable(PWM, ENC_CLK);
   82bce:	2104      	movs	r1, #4
   82bd0:	4843      	ldr	r0, [pc, #268]	; (82ce0 <TC1_Handler+0x158>)
   82bd2:	4b46      	ldr	r3, [pc, #280]	; (82cec <TC1_Handler+0x164>)
   82bd4:	4798      	blx	r3

        eleft_counts = (PIOC_value & 0x7F000000) >> 24;
   82bd6:	68fb      	ldr	r3, [r7, #12]
   82bd8:	0e1b      	lsrs	r3, r3, #24
   82bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   82bde:	60bb      	str	r3, [r7, #8]
        eleft_counts = (eleft_counts & 0x00000040) ? eleft_counts - 128 : eleft_counts;
   82be0:	68bb      	ldr	r3, [r7, #8]
   82be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82be6:	2b00      	cmp	r3, #0
   82be8:	d002      	beq.n	82bf0 <TC1_Handler+0x68>
   82bea:	68bb      	ldr	r3, [r7, #8]
   82bec:	3b80      	subs	r3, #128	; 0x80
   82bee:	e000      	b.n	82bf2 <TC1_Handler+0x6a>
   82bf0:	68bb      	ldr	r3, [r7, #8]
   82bf2:	60bb      	str	r3, [r7, #8]
        eright_counts = ((PIOC_value & 0x00C00000) >> 17) | ((PIOC_value & 0x001F0000) >> 16);
   82bf4:	68fb      	ldr	r3, [r7, #12]
   82bf6:	0c5b      	lsrs	r3, r3, #17
   82bf8:	f003 0260 	and.w	r2, r3, #96	; 0x60
   82bfc:	68fb      	ldr	r3, [r7, #12]
   82bfe:	0c1b      	lsrs	r3, r3, #16
   82c00:	f003 031f 	and.w	r3, r3, #31
   82c04:	4313      	orrs	r3, r2
   82c06:	607b      	str	r3, [r7, #4]
        eright_counts = (eright_counts & 0x00000040) ? eright_counts - 128 : eright_counts;
   82c08:	687b      	ldr	r3, [r7, #4]
   82c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82c0e:	2b00      	cmp	r3, #0
   82c10:	d002      	beq.n	82c18 <TC1_Handler+0x90>
   82c12:	687b      	ldr	r3, [r7, #4]
   82c14:	3b80      	subs	r3, #128	; 0x80
   82c16:	e000      	b.n	82c1a <TC1_Handler+0x92>
   82c18:	687b      	ldr	r3, [r7, #4]
   82c1a:	607b      	str	r3, [r7, #4]
        erear_counts = ((PIOC_value & 0x0000FC00) >> 9) | ((PIOC_value & 0x00000002) >> 1);
   82c1c:	68fb      	ldr	r3, [r7, #12]
   82c1e:	0a5b      	lsrs	r3, r3, #9
   82c20:	f003 027e 	and.w	r2, r3, #126	; 0x7e
   82c24:	68fb      	ldr	r3, [r7, #12]
   82c26:	085b      	lsrs	r3, r3, #1
   82c28:	f003 0301 	and.w	r3, r3, #1
   82c2c:	4313      	orrs	r3, r2
   82c2e:	603b      	str	r3, [r7, #0]
        erear_counts = (erear_counts & 0x00000040) ? erear_counts - 128 : erear_counts;
   82c30:	683b      	ldr	r3, [r7, #0]
   82c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82c36:	2b00      	cmp	r3, #0
   82c38:	d002      	beq.n	82c40 <TC1_Handler+0xb8>
   82c3a:	683b      	ldr	r3, [r7, #0]
   82c3c:	3b80      	subs	r3, #128	; 0x80
   82c3e:	e000      	b.n	82c42 <TC1_Handler+0xba>
   82c40:	683b      	ldr	r3, [r7, #0]
   82c42:	603b      	str	r3, [r7, #0]

        motor_speed(MOTOR_LEFT, pidReg(&mleft_pid_reg, speed_mleft, (float)eleft_counts));
   82c44:	4b2a      	ldr	r3, [pc, #168]	; (82cf0 <TC1_Handler+0x168>)
   82c46:	681c      	ldr	r4, [r3, #0]
   82c48:	4b2a      	ldr	r3, [pc, #168]	; (82cf4 <TC1_Handler+0x16c>)
   82c4a:	68b8      	ldr	r0, [r7, #8]
   82c4c:	4798      	blx	r3
   82c4e:	4603      	mov	r3, r0
   82c50:	461a      	mov	r2, r3
   82c52:	4621      	mov	r1, r4
   82c54:	4828      	ldr	r0, [pc, #160]	; (82cf8 <TC1_Handler+0x170>)
   82c56:	4b29      	ldr	r3, [pc, #164]	; (82cfc <TC1_Handler+0x174>)
   82c58:	4798      	blx	r3
   82c5a:	4602      	mov	r2, r0
   82c5c:	4b28      	ldr	r3, [pc, #160]	; (82d00 <TC1_Handler+0x178>)
   82c5e:	4610      	mov	r0, r2
   82c60:	4798      	blx	r3
   82c62:	4603      	mov	r3, r0
   82c64:	b21b      	sxth	r3, r3
   82c66:	4619      	mov	r1, r3
   82c68:	2000      	movs	r0, #0
   82c6a:	4b26      	ldr	r3, [pc, #152]	; (82d04 <TC1_Handler+0x17c>)
   82c6c:	4798      	blx	r3
        motor_speed(MOTOR_RIGHT, pidReg(&mright_pid_reg, speed_mright, (float)eright_counts));
   82c6e:	4b26      	ldr	r3, [pc, #152]	; (82d08 <TC1_Handler+0x180>)
   82c70:	681c      	ldr	r4, [r3, #0]
   82c72:	4b20      	ldr	r3, [pc, #128]	; (82cf4 <TC1_Handler+0x16c>)
   82c74:	6878      	ldr	r0, [r7, #4]
   82c76:	4798      	blx	r3
   82c78:	4603      	mov	r3, r0
   82c7a:	461a      	mov	r2, r3
   82c7c:	4621      	mov	r1, r4
   82c7e:	4823      	ldr	r0, [pc, #140]	; (82d0c <TC1_Handler+0x184>)
   82c80:	4b1e      	ldr	r3, [pc, #120]	; (82cfc <TC1_Handler+0x174>)
   82c82:	4798      	blx	r3
   82c84:	4602      	mov	r2, r0
   82c86:	4b1e      	ldr	r3, [pc, #120]	; (82d00 <TC1_Handler+0x178>)
   82c88:	4610      	mov	r0, r2
   82c8a:	4798      	blx	r3
   82c8c:	4603      	mov	r3, r0
   82c8e:	b21b      	sxth	r3, r3
   82c90:	4619      	mov	r1, r3
   82c92:	2001      	movs	r0, #1
   82c94:	4b1b      	ldr	r3, [pc, #108]	; (82d04 <TC1_Handler+0x17c>)
   82c96:	4798      	blx	r3
        motor_speed(MOTOR_REAR, pidReg(&mrear_pid_reg, speed_mrear, (float)erear_counts));
   82c98:	4b1d      	ldr	r3, [pc, #116]	; (82d10 <TC1_Handler+0x188>)
   82c9a:	681c      	ldr	r4, [r3, #0]
   82c9c:	4b15      	ldr	r3, [pc, #84]	; (82cf4 <TC1_Handler+0x16c>)
   82c9e:	6838      	ldr	r0, [r7, #0]
   82ca0:	4798      	blx	r3
   82ca2:	4603      	mov	r3, r0
   82ca4:	461a      	mov	r2, r3
   82ca6:	4621      	mov	r1, r4
   82ca8:	481a      	ldr	r0, [pc, #104]	; (82d14 <TC1_Handler+0x18c>)
   82caa:	4b14      	ldr	r3, [pc, #80]	; (82cfc <TC1_Handler+0x174>)
   82cac:	4798      	blx	r3
   82cae:	4602      	mov	r2, r0
   82cb0:	4b13      	ldr	r3, [pc, #76]	; (82d00 <TC1_Handler+0x178>)
   82cb2:	4610      	mov	r0, r2
   82cb4:	4798      	blx	r3
   82cb6:	4603      	mov	r3, r0
   82cb8:	b21b      	sxth	r3, r3
   82cba:	4619      	mov	r1, r3
   82cbc:	2002      	movs	r0, #2
   82cbe:	4b11      	ldr	r3, [pc, #68]	; (82d04 <TC1_Handler+0x17c>)
   82cc0:	4798      	blx	r3

        //pwm_channel_enable(PWM, ENC_CLK);
    }

    ioport_set_pin_level(LED_M3, 0);
   82cc2:	2100      	movs	r1, #0
   82cc4:	2069      	movs	r0, #105	; 0x69
   82cc6:	4b03      	ldr	r3, [pc, #12]	; (82cd4 <TC1_Handler+0x14c>)
   82cc8:	4798      	blx	r3
}
   82cca:	bf00      	nop
   82ccc:	3714      	adds	r7, #20
   82cce:	46bd      	mov	sp, r7
   82cd0:	bd90      	pop	{r4, r7, pc}
   82cd2:	bf00      	nop
   82cd4:	00082809 	.word	0x00082809
   82cd8:	40080000 	.word	0x40080000
   82cdc:	000806d9 	.word	0x000806d9
   82ce0:	40094000 	.word	0x40094000
   82ce4:	00080615 	.word	0x00080615
   82ce8:	00082873 	.word	0x00082873
   82cec:	000805f3 	.word	0x000805f3
   82cf0:	20070f2c 	.word	0x20070f2c
   82cf4:	00084f51 	.word	0x00084f51
   82cf8:	20070f5c 	.word	0x20070f5c
   82cfc:	00082d19 	.word	0x00082d19
   82d00:	00085385 	.word	0x00085385
   82d04:	00082ae1 	.word	0x00082ae1
   82d08:	20070ed8 	.word	0x20070ed8
   82d0c:	20070eb4 	.word	0x20070eb4
   82d10:	20070fb4 	.word	0x20070fb4
   82d14:	20070f04 	.word	0x20070f04

00082d18 <pidReg>:
/************************************************************************/

#include "pid.h"

float pidReg(pidReg_t* reg, float refer, float act)
{
   82d18:	b590      	push	{r4, r7, lr}
   82d1a:	b08b      	sub	sp, #44	; 0x2c
   82d1c:	af00      	add	r7, sp, #0
   82d1e:	60f8      	str	r0, [r7, #12]
   82d20:	60b9      	str	r1, [r7, #8]
   82d22:	607a      	str	r2, [r7, #4]
    float diff;
    float outPreSat;
    float out;

    // Compute the error
    err = refer - act;
   82d24:	4b3c      	ldr	r3, [pc, #240]	; (82e18 <pidReg+0x100>)
   82d26:	6879      	ldr	r1, [r7, #4]
   82d28:	68b8      	ldr	r0, [r7, #8]
   82d2a:	4798      	blx	r3
   82d2c:	4603      	mov	r3, r0
   82d2e:	623b      	str	r3, [r7, #32]

    // Compute the proportional output
    prop = reg->kp * err;
   82d30:	68fb      	ldr	r3, [r7, #12]
   82d32:	681a      	ldr	r2, [r3, #0]
   82d34:	4b39      	ldr	r3, [pc, #228]	; (82e1c <pidReg+0x104>)
   82d36:	6a39      	ldr	r1, [r7, #32]
   82d38:	4610      	mov	r0, r2
   82d3a:	4798      	blx	r3
   82d3c:	4603      	mov	r3, r0
   82d3e:	61fb      	str	r3, [r7, #28]

    // Compute the integral output
    reg->intg = reg->intg + reg->ki * err + reg->kc * reg->satErr;
   82d40:	68fb      	ldr	r3, [r7, #12]
   82d42:	691c      	ldr	r4, [r3, #16]
   82d44:	68fb      	ldr	r3, [r7, #12]
   82d46:	685a      	ldr	r2, [r3, #4]
   82d48:	4b34      	ldr	r3, [pc, #208]	; (82e1c <pidReg+0x104>)
   82d4a:	6a39      	ldr	r1, [r7, #32]
   82d4c:	4610      	mov	r0, r2
   82d4e:	4798      	blx	r3
   82d50:	4603      	mov	r3, r0
   82d52:	461a      	mov	r2, r3
   82d54:	4b32      	ldr	r3, [pc, #200]	; (82e20 <pidReg+0x108>)
   82d56:	4611      	mov	r1, r2
   82d58:	4620      	mov	r0, r4
   82d5a:	4798      	blx	r3
   82d5c:	4603      	mov	r3, r0
   82d5e:	461c      	mov	r4, r3
   82d60:	68fb      	ldr	r3, [r7, #12]
   82d62:	689a      	ldr	r2, [r3, #8]
   82d64:	68fb      	ldr	r3, [r7, #12]
   82d66:	69d9      	ldr	r1, [r3, #28]
   82d68:	4b2c      	ldr	r3, [pc, #176]	; (82e1c <pidReg+0x104>)
   82d6a:	4610      	mov	r0, r2
   82d6c:	4798      	blx	r3
   82d6e:	4603      	mov	r3, r0
   82d70:	461a      	mov	r2, r3
   82d72:	4b2b      	ldr	r3, [pc, #172]	; (82e20 <pidReg+0x108>)
   82d74:	4611      	mov	r1, r2
   82d76:	4620      	mov	r0, r4
   82d78:	4798      	blx	r3
   82d7a:	4603      	mov	r3, r0
   82d7c:	461a      	mov	r2, r3
   82d7e:	68fb      	ldr	r3, [r7, #12]
   82d80:	611a      	str	r2, [r3, #16]

    // Compute the derivative output
    diff = reg->kd * (err - reg->prevErr);
   82d82:	68fb      	ldr	r3, [r7, #12]
   82d84:	68dc      	ldr	r4, [r3, #12]
   82d86:	68fb      	ldr	r3, [r7, #12]
   82d88:	6a1a      	ldr	r2, [r3, #32]
   82d8a:	4b23      	ldr	r3, [pc, #140]	; (82e18 <pidReg+0x100>)
   82d8c:	4611      	mov	r1, r2
   82d8e:	6a38      	ldr	r0, [r7, #32]
   82d90:	4798      	blx	r3
   82d92:	4603      	mov	r3, r0
   82d94:	461a      	mov	r2, r3
   82d96:	4b21      	ldr	r3, [pc, #132]	; (82e1c <pidReg+0x104>)
   82d98:	4611      	mov	r1, r2
   82d9a:	4620      	mov	r0, r4
   82d9c:	4798      	blx	r3
   82d9e:	4603      	mov	r3, r0
   82da0:	61bb      	str	r3, [r7, #24]

    // Compute the pre-saturated output
    outPreSat = prop + reg->intg + diff;
   82da2:	68fb      	ldr	r3, [r7, #12]
   82da4:	691a      	ldr	r2, [r3, #16]
   82da6:	4b1e      	ldr	r3, [pc, #120]	; (82e20 <pidReg+0x108>)
   82da8:	69f9      	ldr	r1, [r7, #28]
   82daa:	4610      	mov	r0, r2
   82dac:	4798      	blx	r3
   82dae:	4603      	mov	r3, r0
   82db0:	461a      	mov	r2, r3
   82db2:	4b1b      	ldr	r3, [pc, #108]	; (82e20 <pidReg+0x108>)
   82db4:	69b9      	ldr	r1, [r7, #24]
   82db6:	4610      	mov	r0, r2
   82db8:	4798      	blx	r3
   82dba:	4603      	mov	r3, r0
   82dbc:	617b      	str	r3, [r7, #20]

    // Saturate the output
    if (outPreSat > reg->outMax)
   82dbe:	68fb      	ldr	r3, [r7, #12]
   82dc0:	695a      	ldr	r2, [r3, #20]
   82dc2:	4b18      	ldr	r3, [pc, #96]	; (82e24 <pidReg+0x10c>)
   82dc4:	6979      	ldr	r1, [r7, #20]
   82dc6:	4610      	mov	r0, r2
   82dc8:	4798      	blx	r3
   82dca:	4603      	mov	r3, r0
   82dcc:	2b00      	cmp	r3, #0
   82dce:	d003      	beq.n	82dd8 <pidReg+0xc0>
    {
        out = reg->outMax;
   82dd0:	68fb      	ldr	r3, [r7, #12]
   82dd2:	695b      	ldr	r3, [r3, #20]
   82dd4:	627b      	str	r3, [r7, #36]	; 0x24
   82dd6:	e00e      	b.n	82df6 <pidReg+0xde>
    }
    else if (outPreSat < reg->outMin)
   82dd8:	68fb      	ldr	r3, [r7, #12]
   82dda:	699a      	ldr	r2, [r3, #24]
   82ddc:	4b12      	ldr	r3, [pc, #72]	; (82e28 <pidReg+0x110>)
   82dde:	6979      	ldr	r1, [r7, #20]
   82de0:	4610      	mov	r0, r2
   82de2:	4798      	blx	r3
   82de4:	4603      	mov	r3, r0
   82de6:	2b00      	cmp	r3, #0
   82de8:	d003      	beq.n	82df2 <pidReg+0xda>
    {
        out = reg->outMin;
   82dea:	68fb      	ldr	r3, [r7, #12]
   82dec:	699b      	ldr	r3, [r3, #24]
   82dee:	627b      	str	r3, [r7, #36]	; 0x24
   82df0:	e001      	b.n	82df6 <pidReg+0xde>
    }
    else
    {
        out = outPreSat;
   82df2:	697b      	ldr	r3, [r7, #20]
   82df4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Compute the saturate difference
    reg->satErr = out - outPreSat;
   82df6:	4b08      	ldr	r3, [pc, #32]	; (82e18 <pidReg+0x100>)
   82df8:	6979      	ldr	r1, [r7, #20]
   82dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
   82dfc:	4798      	blx	r3
   82dfe:	4603      	mov	r3, r0
   82e00:	461a      	mov	r2, r3
   82e02:	68fb      	ldr	r3, [r7, #12]
   82e04:	61da      	str	r2, [r3, #28]

    // Keep error for next iteration
    reg->prevErr = err;
   82e06:	68fb      	ldr	r3, [r7, #12]
   82e08:	6a3a      	ldr	r2, [r7, #32]
   82e0a:	621a      	str	r2, [r3, #32]

    return out;
   82e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   82e0e:	4618      	mov	r0, r3
   82e10:	372c      	adds	r7, #44	; 0x2c
   82e12:	46bd      	mov	sp, r7
   82e14:	bd90      	pop	{r4, r7, pc}
   82e16:	bf00      	nop
   82e18:	00084de5 	.word	0x00084de5
   82e1c:	00084ff9 	.word	0x00084ff9
   82e20:	00084de9 	.word	0x00084de9
   82e24:	00085335 	.word	0x00085335
   82e28:	00085371 	.word	0x00085371

00082e2c <ioport_set_pin_level>:
{
   82e2c:	b480      	push	{r7}
   82e2e:	b08b      	sub	sp, #44	; 0x2c
   82e30:	af00      	add	r7, sp, #0
   82e32:	6078      	str	r0, [r7, #4]
   82e34:	460b      	mov	r3, r1
   82e36:	70fb      	strb	r3, [r7, #3]
   82e38:	687b      	ldr	r3, [r7, #4]
   82e3a:	627b      	str	r3, [r7, #36]	; 0x24
   82e3c:	78fb      	ldrb	r3, [r7, #3]
   82e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82e44:	61fb      	str	r3, [r7, #28]
   82e46:	69fb      	ldr	r3, [r7, #28]
   82e48:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82e4a:	69bb      	ldr	r3, [r7, #24]
   82e4c:	095b      	lsrs	r3, r3, #5
   82e4e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82e50:	697b      	ldr	r3, [r7, #20]
   82e52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82e56:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82e5a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82e5c:	613b      	str	r3, [r7, #16]
	if (level) {
   82e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82e62:	2b00      	cmp	r3, #0
   82e64:	d009      	beq.n	82e7a <ioport_set_pin_level+0x4e>
   82e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82e68:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82e6a:	68fb      	ldr	r3, [r7, #12]
   82e6c:	f003 031f 	and.w	r3, r3, #31
   82e70:	2201      	movs	r2, #1
   82e72:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82e74:	693b      	ldr	r3, [r7, #16]
   82e76:	631a      	str	r2, [r3, #48]	; 0x30
}
   82e78:	e008      	b.n	82e8c <ioport_set_pin_level+0x60>
   82e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82e7c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   82e7e:	68bb      	ldr	r3, [r7, #8]
   82e80:	f003 031f 	and.w	r3, r3, #31
   82e84:	2201      	movs	r2, #1
   82e86:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82e88:	693b      	ldr	r3, [r7, #16]
   82e8a:	635a      	str	r2, [r3, #52]	; 0x34
   82e8c:	bf00      	nop
   82e8e:	372c      	adds	r7, #44	; 0x2c
   82e90:	46bd      	mov	sp, r7
   82e92:	bc80      	pop	{r7}
   82e94:	4770      	bx	lr
	...

00082e98 <SysTick_Handler>:
//float battery_voltage = 0;
uint8_t battery_percentage;
uint8_t prev_battery_percentage = 0;

void SysTick_Handler(void)
{
   82e98:	b480      	push	{r7}
   82e9a:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   82e9c:	4b04      	ldr	r3, [pc, #16]	; (82eb0 <SysTick_Handler+0x18>)
   82e9e:	681b      	ldr	r3, [r3, #0]
   82ea0:	3301      	adds	r3, #1
   82ea2:	4a03      	ldr	r2, [pc, #12]	; (82eb0 <SysTick_Handler+0x18>)
   82ea4:	6013      	str	r3, [r2, #0]
}
   82ea6:	bf00      	nop
   82ea8:	46bd      	mov	sp, r7
   82eaa:	bc80      	pop	{r7}
   82eac:	4770      	bx	lr
   82eae:	bf00      	nop
   82eb0:	20070dc4 	.word	0x20070dc4

00082eb4 <getTicks>:

uint32_t getTicks(void)
{
   82eb4:	b480      	push	{r7}
   82eb6:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   82eb8:	4b02      	ldr	r3, [pc, #8]	; (82ec4 <getTicks+0x10>)
   82eba:	681b      	ldr	r3, [r3, #0]
}
   82ebc:	4618      	mov	r0, r3
   82ebe:	46bd      	mov	sp, r7
   82ec0:	bc80      	pop	{r7}
   82ec2:	4770      	bx	lr
   82ec4:	20070dc4 	.word	0x20070dc4

00082ec8 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   82ec8:	b480      	push	{r7}
   82eca:	b085      	sub	sp, #20
   82ecc:	af00      	add	r7, sp, #0
   82ece:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   82ed0:	4b07      	ldr	r3, [pc, #28]	; (82ef0 <mdelay+0x28>)
   82ed2:	681b      	ldr	r3, [r3, #0]
   82ed4:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   82ed6:	bf00      	nop
   82ed8:	4b05      	ldr	r3, [pc, #20]	; (82ef0 <mdelay+0x28>)
   82eda:	681a      	ldr	r2, [r3, #0]
   82edc:	68fb      	ldr	r3, [r7, #12]
   82ede:	1ad2      	subs	r2, r2, r3
   82ee0:	687b      	ldr	r3, [r7, #4]
   82ee2:	429a      	cmp	r2, r3
   82ee4:	d3f8      	bcc.n	82ed8 <mdelay+0x10>
}
   82ee6:	bf00      	nop
   82ee8:	3714      	adds	r7, #20
   82eea:	46bd      	mov	sp, r7
   82eec:	bc80      	pop	{r7}
   82eee:	4770      	bx	lr
   82ef0:	20070dc4 	.word	0x20070dc4

00082ef4 <update_comm>:

void update_comm(void)
{
   82ef4:	b580      	push	{r7, lr}
   82ef6:	af00      	add	r7, sp, #0
    if ((getTicks() - ticks_comm) > 5)
   82ef8:	4b0b      	ldr	r3, [pc, #44]	; (82f28 <update_comm+0x34>)
   82efa:	4798      	blx	r3
   82efc:	4602      	mov	r2, r0
   82efe:	4b0b      	ldr	r3, [pc, #44]	; (82f2c <update_comm+0x38>)
   82f00:	681b      	ldr	r3, [r3, #0]
   82f02:	1ad3      	subs	r3, r2, r3
   82f04:	2b05      	cmp	r3, #5
   82f06:	d90d      	bls.n	82f24 <update_comm+0x30>
    {
        ticks_comm = getTicks();
   82f08:	4b07      	ldr	r3, [pc, #28]	; (82f28 <update_comm+0x34>)
   82f0a:	4798      	blx	r3
   82f0c:	4602      	mov	r2, r0
   82f0e:	4b07      	ldr	r3, [pc, #28]	; (82f2c <update_comm+0x38>)
   82f10:	601a      	str	r2, [r3, #0]
        
        memcpy(&sens_buf, &mts, sizeof(mts));
   82f12:	4b07      	ldr	r3, [pc, #28]	; (82f30 <update_comm+0x3c>)
   82f14:	681b      	ldr	r3, [r3, #0]
   82f16:	461a      	mov	r2, r3
   82f18:	4b06      	ldr	r3, [pc, #24]	; (82f34 <update_comm+0x40>)
   82f1a:	601a      	str	r2, [r3, #0]
        spi_master_transfer(&sens_buf, sizeof(sens_buf));
   82f1c:	2103      	movs	r1, #3
   82f1e:	4805      	ldr	r0, [pc, #20]	; (82f34 <update_comm+0x40>)
   82f20:	4b05      	ldr	r3, [pc, #20]	; (82f38 <update_comm+0x44>)
   82f22:	4798      	blx	r3
    }
}
   82f24:	bf00      	nop
   82f26:	bd80      	pop	{r7, pc}
   82f28:	00082eb5 	.word	0x00082eb5
   82f2c:	20070e18 	.word	0x20070e18
   82f30:	20070e0c 	.word	0x20070e0c
   82f34:	20070e08 	.word	0x20070e08
   82f38:	00080b15 	.word	0x00080b15

00082f3c <update_battery>:

void update_battery(Bool update_forced)
{
   82f3c:	b580      	push	{r7, lr}
   82f3e:	b084      	sub	sp, #16
   82f40:	af00      	add	r7, sp, #0
   82f42:	4603      	mov	r3, r0
   82f44:	71fb      	strb	r3, [r7, #7]
    char tmp[6];
    battery_percentage = stm.bat_percentage;
   82f46:	4b20      	ldr	r3, [pc, #128]	; (82fc8 <update_battery+0x8c>)
   82f48:	789a      	ldrb	r2, [r3, #2]
   82f4a:	4b20      	ldr	r3, [pc, #128]	; (82fcc <update_battery+0x90>)
   82f4c:	701a      	strb	r2, [r3, #0]
    
    if (update_forced || prev_battery_percentage != battery_percentage)
   82f4e:	79fb      	ldrb	r3, [r7, #7]
   82f50:	2b00      	cmp	r3, #0
   82f52:	d105      	bne.n	82f60 <update_battery+0x24>
   82f54:	4b1e      	ldr	r3, [pc, #120]	; (82fd0 <update_battery+0x94>)
   82f56:	781a      	ldrb	r2, [r3, #0]
   82f58:	4b1c      	ldr	r3, [pc, #112]	; (82fcc <update_battery+0x90>)
   82f5a:	781b      	ldrb	r3, [r3, #0]
   82f5c:	429a      	cmp	r2, r3
   82f5e:	d02f      	beq.n	82fc0 <update_battery+0x84>
    {
        if (battery_percentage >= 100)
   82f60:	4b1a      	ldr	r3, [pc, #104]	; (82fcc <update_battery+0x90>)
   82f62:	781b      	ldrb	r3, [r3, #0]
   82f64:	2b63      	cmp	r3, #99	; 0x63
   82f66:	d909      	bls.n	82f7c <update_battery+0x40>
        {
            sprintf(tmp, "%3u%%", battery_percentage);
   82f68:	4b18      	ldr	r3, [pc, #96]	; (82fcc <update_battery+0x90>)
   82f6a:	781b      	ldrb	r3, [r3, #0]
   82f6c:	461a      	mov	r2, r3
   82f6e:	f107 0308 	add.w	r3, r7, #8
   82f72:	4918      	ldr	r1, [pc, #96]	; (82fd4 <update_battery+0x98>)
   82f74:	4618      	mov	r0, r3
   82f76:	4b18      	ldr	r3, [pc, #96]	; (82fd8 <update_battery+0x9c>)
   82f78:	4798      	blx	r3
   82f7a:	e016      	b.n	82faa <update_battery+0x6e>
        }
        else if (battery_percentage >= 10)
   82f7c:	4b13      	ldr	r3, [pc, #76]	; (82fcc <update_battery+0x90>)
   82f7e:	781b      	ldrb	r3, [r3, #0]
   82f80:	2b09      	cmp	r3, #9
   82f82:	d909      	bls.n	82f98 <update_battery+0x5c>
        {
            sprintf(tmp, " %2u%%", battery_percentage);
   82f84:	4b11      	ldr	r3, [pc, #68]	; (82fcc <update_battery+0x90>)
   82f86:	781b      	ldrb	r3, [r3, #0]
   82f88:	461a      	mov	r2, r3
   82f8a:	f107 0308 	add.w	r3, r7, #8
   82f8e:	4913      	ldr	r1, [pc, #76]	; (82fdc <update_battery+0xa0>)
   82f90:	4618      	mov	r0, r3
   82f92:	4b11      	ldr	r3, [pc, #68]	; (82fd8 <update_battery+0x9c>)
   82f94:	4798      	blx	r3
   82f96:	e008      	b.n	82faa <update_battery+0x6e>
        }
        else
        {
            sprintf(tmp, "  %1u%%", battery_percentage);
   82f98:	4b0c      	ldr	r3, [pc, #48]	; (82fcc <update_battery+0x90>)
   82f9a:	781b      	ldrb	r3, [r3, #0]
   82f9c:	461a      	mov	r2, r3
   82f9e:	f107 0308 	add.w	r3, r7, #8
   82fa2:	490f      	ldr	r1, [pc, #60]	; (82fe0 <update_battery+0xa4>)
   82fa4:	4618      	mov	r0, r3
   82fa6:	4b0c      	ldr	r3, [pc, #48]	; (82fd8 <update_battery+0x9c>)
   82fa8:	4798      	blx	r3
        }
            
        lcd_print_s(1, 16, tmp);
   82faa:	f107 0308 	add.w	r3, r7, #8
   82fae:	461a      	mov	r2, r3
   82fb0:	2110      	movs	r1, #16
   82fb2:	2001      	movs	r0, #1
   82fb4:	4b0b      	ldr	r3, [pc, #44]	; (82fe4 <update_battery+0xa8>)
   82fb6:	4798      	blx	r3
        prev_battery_percentage = battery_percentage;
   82fb8:	4b04      	ldr	r3, [pc, #16]	; (82fcc <update_battery+0x90>)
   82fba:	781a      	ldrb	r2, [r3, #0]
   82fbc:	4b04      	ldr	r3, [pc, #16]	; (82fd0 <update_battery+0x94>)
   82fbe:	701a      	strb	r2, [r3, #0]
    }
}
   82fc0:	bf00      	nop
   82fc2:	3710      	adds	r7, #16
   82fc4:	46bd      	mov	sp, r7
   82fc6:	bd80      	pop	{r7, pc}
   82fc8:	20070e10 	.word	0x20070e10
   82fcc:	20070fb8 	.word	0x20070fb8
   82fd0:	20070dc8 	.word	0x20070dc8
   82fd4:	00089604 	.word	0x00089604
   82fd8:	000854bd 	.word	0x000854bd
   82fdc:	0008960c 	.word	0x0008960c
   82fe0:	00089614 	.word	0x00089614
   82fe4:	00081601 	.word	0x00081601

00082fe8 <update_heartbeat>:

void update_heartbeat(void)
{
   82fe8:	b580      	push	{r7, lr}
   82fea:	af00      	add	r7, sp, #0
    if (heart_state)
   82fec:	4b20      	ldr	r3, [pc, #128]	; (83070 <update_heartbeat+0x88>)
   82fee:	781b      	ldrb	r3, [r3, #0]
   82ff0:	2b00      	cmp	r3, #0
   82ff2:	d01d      	beq.n	83030 <update_heartbeat+0x48>
    {
        if (getTicks() >= (ticks_heartbeat + 100))
   82ff4:	4b1f      	ldr	r3, [pc, #124]	; (83074 <update_heartbeat+0x8c>)
   82ff6:	4798      	blx	r3
   82ff8:	4602      	mov	r2, r0
   82ffa:	4b1f      	ldr	r3, [pc, #124]	; (83078 <update_heartbeat+0x90>)
   82ffc:	681b      	ldr	r3, [r3, #0]
   82ffe:	3364      	adds	r3, #100	; 0x64
   83000:	429a      	cmp	r2, r3
   83002:	d333      	bcc.n	8306c <update_heartbeat+0x84>
        {
            ticks_heartbeat = getTicks();
   83004:	4b1b      	ldr	r3, [pc, #108]	; (83074 <update_heartbeat+0x8c>)
   83006:	4798      	blx	r3
   83008:	4602      	mov	r2, r0
   8300a:	4b1b      	ldr	r3, [pc, #108]	; (83078 <update_heartbeat+0x90>)
   8300c:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 0);
   8300e:	2100      	movs	r1, #0
   83010:	206a      	movs	r0, #106	; 0x6a
   83012:	4b1a      	ldr	r3, [pc, #104]	; (8307c <update_heartbeat+0x94>)
   83014:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 0);
   83016:	2100      	movs	r1, #0
   83018:	2067      	movs	r0, #103	; 0x67
   8301a:	4b18      	ldr	r3, [pc, #96]	; (8307c <update_heartbeat+0x94>)
   8301c:	4798      	blx	r3
            mts.ibit.heartbeat = 0;
   8301e:	4a18      	ldr	r2, [pc, #96]	; (83080 <update_heartbeat+0x98>)
   83020:	7813      	ldrb	r3, [r2, #0]
   83022:	f36f 0300 	bfc	r3, #0, #1
   83026:	7013      	strb	r3, [r2, #0]
            heart_state = 0;
   83028:	4b11      	ldr	r3, [pc, #68]	; (83070 <update_heartbeat+0x88>)
   8302a:	2200      	movs	r2, #0
   8302c:	701a      	strb	r2, [r3, #0]
            ioport_set_pin_level(LED_M1, 1);
            mts.ibit.heartbeat = 1;
            heart_state = 1;
        }
    }
}
   8302e:	e01d      	b.n	8306c <update_heartbeat+0x84>
        if (getTicks() >= (ticks_heartbeat + 900))
   83030:	4b10      	ldr	r3, [pc, #64]	; (83074 <update_heartbeat+0x8c>)
   83032:	4798      	blx	r3
   83034:	4602      	mov	r2, r0
   83036:	4b10      	ldr	r3, [pc, #64]	; (83078 <update_heartbeat+0x90>)
   83038:	681b      	ldr	r3, [r3, #0]
   8303a:	f503 7361 	add.w	r3, r3, #900	; 0x384
   8303e:	429a      	cmp	r2, r3
   83040:	d314      	bcc.n	8306c <update_heartbeat+0x84>
            ticks_heartbeat = getTicks();
   83042:	4b0c      	ldr	r3, [pc, #48]	; (83074 <update_heartbeat+0x8c>)
   83044:	4798      	blx	r3
   83046:	4602      	mov	r2, r0
   83048:	4b0b      	ldr	r3, [pc, #44]	; (83078 <update_heartbeat+0x90>)
   8304a:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 1);
   8304c:	2101      	movs	r1, #1
   8304e:	206a      	movs	r0, #106	; 0x6a
   83050:	4b0a      	ldr	r3, [pc, #40]	; (8307c <update_heartbeat+0x94>)
   83052:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 1);
   83054:	2101      	movs	r1, #1
   83056:	2067      	movs	r0, #103	; 0x67
   83058:	4b08      	ldr	r3, [pc, #32]	; (8307c <update_heartbeat+0x94>)
   8305a:	4798      	blx	r3
            mts.ibit.heartbeat = 1;
   8305c:	4a08      	ldr	r2, [pc, #32]	; (83080 <update_heartbeat+0x98>)
   8305e:	7813      	ldrb	r3, [r2, #0]
   83060:	f043 0301 	orr.w	r3, r3, #1
   83064:	7013      	strb	r3, [r2, #0]
            heart_state = 1;
   83066:	4b02      	ldr	r3, [pc, #8]	; (83070 <update_heartbeat+0x88>)
   83068:	2201      	movs	r2, #1
   8306a:	701a      	strb	r2, [r3, #0]
}
   8306c:	bf00      	nop
   8306e:	bd80      	pop	{r7, pc}
   83070:	20070e14 	.word	0x20070e14
   83074:	00082eb5 	.word	0x00082eb5
   83078:	20070e24 	.word	0x20070e24
   8307c:	00082e2d 	.word	0x00082e2d
   83080:	20070e0c 	.word	0x20070e0c

00083084 <osc_enable>:
{
   83084:	b580      	push	{r7, lr}
   83086:	b082      	sub	sp, #8
   83088:	af00      	add	r7, sp, #0
   8308a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8308c:	687b      	ldr	r3, [r7, #4]
   8308e:	2b07      	cmp	r3, #7
   83090:	d831      	bhi.n	830f6 <osc_enable+0x72>
   83092:	a201      	add	r2, pc, #4	; (adr r2, 83098 <osc_enable+0x14>)
   83094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83098:	000830f5 	.word	0x000830f5
   8309c:	000830b9 	.word	0x000830b9
   830a0:	000830c1 	.word	0x000830c1
   830a4:	000830c9 	.word	0x000830c9
   830a8:	000830d1 	.word	0x000830d1
   830ac:	000830d9 	.word	0x000830d9
   830b0:	000830e1 	.word	0x000830e1
   830b4:	000830eb 	.word	0x000830eb
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   830b8:	2000      	movs	r0, #0
   830ba:	4b11      	ldr	r3, [pc, #68]	; (83100 <osc_enable+0x7c>)
   830bc:	4798      	blx	r3
		break;
   830be:	e01a      	b.n	830f6 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   830c0:	2001      	movs	r0, #1
   830c2:	4b0f      	ldr	r3, [pc, #60]	; (83100 <osc_enable+0x7c>)
   830c4:	4798      	blx	r3
		break;
   830c6:	e016      	b.n	830f6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   830c8:	2000      	movs	r0, #0
   830ca:	4b0e      	ldr	r3, [pc, #56]	; (83104 <osc_enable+0x80>)
   830cc:	4798      	blx	r3
		break;
   830ce:	e012      	b.n	830f6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   830d0:	2010      	movs	r0, #16
   830d2:	4b0c      	ldr	r3, [pc, #48]	; (83104 <osc_enable+0x80>)
   830d4:	4798      	blx	r3
		break;
   830d6:	e00e      	b.n	830f6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   830d8:	2020      	movs	r0, #32
   830da:	4b0a      	ldr	r3, [pc, #40]	; (83104 <osc_enable+0x80>)
   830dc:	4798      	blx	r3
		break;
   830de:	e00a      	b.n	830f6 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   830e0:	213e      	movs	r1, #62	; 0x3e
   830e2:	2000      	movs	r0, #0
   830e4:	4b08      	ldr	r3, [pc, #32]	; (83108 <osc_enable+0x84>)
   830e6:	4798      	blx	r3
		break;
   830e8:	e005      	b.n	830f6 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   830ea:	213e      	movs	r1, #62	; 0x3e
   830ec:	2001      	movs	r0, #1
   830ee:	4b06      	ldr	r3, [pc, #24]	; (83108 <osc_enable+0x84>)
   830f0:	4798      	blx	r3
		break;
   830f2:	e000      	b.n	830f6 <osc_enable+0x72>
		break;
   830f4:	bf00      	nop
}
   830f6:	bf00      	nop
   830f8:	3708      	adds	r7, #8
   830fa:	46bd      	mov	sp, r7
   830fc:	bd80      	pop	{r7, pc}
   830fe:	bf00      	nop
   83100:	000836c1 	.word	0x000836c1
   83104:	0008372d 	.word	0x0008372d
   83108:	0008379d 	.word	0x0008379d

0008310c <osc_is_ready>:
{
   8310c:	b580      	push	{r7, lr}
   8310e:	b082      	sub	sp, #8
   83110:	af00      	add	r7, sp, #0
   83112:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83114:	687b      	ldr	r3, [r7, #4]
   83116:	2b07      	cmp	r3, #7
   83118:	d826      	bhi.n	83168 <osc_is_ready+0x5c>
   8311a:	a201      	add	r2, pc, #4	; (adr r2, 83120 <osc_is_ready+0x14>)
   8311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83120:	00083141 	.word	0x00083141
   83124:	00083145 	.word	0x00083145
   83128:	00083145 	.word	0x00083145
   8312c:	00083157 	.word	0x00083157
   83130:	00083157 	.word	0x00083157
   83134:	00083157 	.word	0x00083157
   83138:	00083157 	.word	0x00083157
   8313c:	00083157 	.word	0x00083157
		return 1;
   83140:	2301      	movs	r3, #1
   83142:	e012      	b.n	8316a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   83144:	4b0b      	ldr	r3, [pc, #44]	; (83174 <osc_is_ready+0x68>)
   83146:	4798      	blx	r3
   83148:	4603      	mov	r3, r0
   8314a:	2b00      	cmp	r3, #0
   8314c:	bf14      	ite	ne
   8314e:	2301      	movne	r3, #1
   83150:	2300      	moveq	r3, #0
   83152:	b2db      	uxtb	r3, r3
   83154:	e009      	b.n	8316a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   83156:	4b08      	ldr	r3, [pc, #32]	; (83178 <osc_is_ready+0x6c>)
   83158:	4798      	blx	r3
   8315a:	4603      	mov	r3, r0
   8315c:	2b00      	cmp	r3, #0
   8315e:	bf14      	ite	ne
   83160:	2301      	movne	r3, #1
   83162:	2300      	moveq	r3, #0
   83164:	b2db      	uxtb	r3, r3
   83166:	e000      	b.n	8316a <osc_is_ready+0x5e>
	return 0;
   83168:	2300      	movs	r3, #0
}
   8316a:	4618      	mov	r0, r3
   8316c:	3708      	adds	r7, #8
   8316e:	46bd      	mov	sp, r7
   83170:	bd80      	pop	{r7, pc}
   83172:	bf00      	nop
   83174:	000836f9 	.word	0x000836f9
   83178:	00083815 	.word	0x00083815

0008317c <osc_get_rate>:
{
   8317c:	b480      	push	{r7}
   8317e:	b083      	sub	sp, #12
   83180:	af00      	add	r7, sp, #0
   83182:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83184:	687b      	ldr	r3, [r7, #4]
   83186:	2b07      	cmp	r3, #7
   83188:	d825      	bhi.n	831d6 <osc_get_rate+0x5a>
   8318a:	a201      	add	r2, pc, #4	; (adr r2, 83190 <osc_get_rate+0x14>)
   8318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83190:	000831b1 	.word	0x000831b1
   83194:	000831b7 	.word	0x000831b7
   83198:	000831bd 	.word	0x000831bd
   8319c:	000831c3 	.word	0x000831c3
   831a0:	000831c7 	.word	0x000831c7
   831a4:	000831cb 	.word	0x000831cb
   831a8:	000831cf 	.word	0x000831cf
   831ac:	000831d3 	.word	0x000831d3
		return OSC_SLCK_32K_RC_HZ;
   831b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   831b4:	e010      	b.n	831d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   831b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   831ba:	e00d      	b.n	831d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   831bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   831c0:	e00a      	b.n	831d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   831c2:	4b08      	ldr	r3, [pc, #32]	; (831e4 <osc_get_rate+0x68>)
   831c4:	e008      	b.n	831d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   831c6:	4b08      	ldr	r3, [pc, #32]	; (831e8 <osc_get_rate+0x6c>)
   831c8:	e006      	b.n	831d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   831ca:	4b08      	ldr	r3, [pc, #32]	; (831ec <osc_get_rate+0x70>)
   831cc:	e004      	b.n	831d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   831ce:	4b07      	ldr	r3, [pc, #28]	; (831ec <osc_get_rate+0x70>)
   831d0:	e002      	b.n	831d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   831d2:	4b06      	ldr	r3, [pc, #24]	; (831ec <osc_get_rate+0x70>)
   831d4:	e000      	b.n	831d8 <osc_get_rate+0x5c>
	return 0;
   831d6:	2300      	movs	r3, #0
}
   831d8:	4618      	mov	r0, r3
   831da:	370c      	adds	r7, #12
   831dc:	46bd      	mov	sp, r7
   831de:	bc80      	pop	{r7}
   831e0:	4770      	bx	lr
   831e2:	bf00      	nop
   831e4:	003d0900 	.word	0x003d0900
   831e8:	007a1200 	.word	0x007a1200
   831ec:	00b71b00 	.word	0x00b71b00

000831f0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   831f0:	b580      	push	{r7, lr}
   831f2:	b082      	sub	sp, #8
   831f4:	af00      	add	r7, sp, #0
   831f6:	4603      	mov	r3, r0
   831f8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   831fa:	bf00      	nop
   831fc:	79fb      	ldrb	r3, [r7, #7]
   831fe:	4618      	mov	r0, r3
   83200:	4b05      	ldr	r3, [pc, #20]	; (83218 <osc_wait_ready+0x28>)
   83202:	4798      	blx	r3
   83204:	4603      	mov	r3, r0
   83206:	f083 0301 	eor.w	r3, r3, #1
   8320a:	b2db      	uxtb	r3, r3
   8320c:	2b00      	cmp	r3, #0
   8320e:	d1f5      	bne.n	831fc <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   83210:	bf00      	nop
   83212:	3708      	adds	r7, #8
   83214:	46bd      	mov	sp, r7
   83216:	bd80      	pop	{r7, pc}
   83218:	0008310d 	.word	0x0008310d

0008321c <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   8321c:	b580      	push	{r7, lr}
   8321e:	b086      	sub	sp, #24
   83220:	af00      	add	r7, sp, #0
   83222:	60f8      	str	r0, [r7, #12]
   83224:	607a      	str	r2, [r7, #4]
   83226:	603b      	str	r3, [r7, #0]
   83228:	460b      	mov	r3, r1
   8322a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8322c:	687b      	ldr	r3, [r7, #4]
   8322e:	2b00      	cmp	r3, #0
   83230:	d107      	bne.n	83242 <pll_config_init+0x26>
   83232:	683b      	ldr	r3, [r7, #0]
   83234:	2b00      	cmp	r3, #0
   83236:	d104      	bne.n	83242 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   83238:	68fb      	ldr	r3, [r7, #12]
   8323a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8323e:	601a      	str	r2, [r3, #0]
   83240:	e019      	b.n	83276 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   83242:	7afb      	ldrb	r3, [r7, #11]
   83244:	4618      	mov	r0, r3
   83246:	4b0e      	ldr	r3, [pc, #56]	; (83280 <pll_config_init+0x64>)
   83248:	4798      	blx	r3
   8324a:	4602      	mov	r2, r0
   8324c:	687b      	ldr	r3, [r7, #4]
   8324e:	fbb2 f3f3 	udiv	r3, r2, r3
   83252:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   83254:	697b      	ldr	r3, [r7, #20]
   83256:	683a      	ldr	r2, [r7, #0]
   83258:	fb02 f303 	mul.w	r3, r2, r3
   8325c:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8325e:	683b      	ldr	r3, [r7, #0]
   83260:	3b01      	subs	r3, #1
   83262:	041a      	lsls	r2, r3, #16
   83264:	4b07      	ldr	r3, [pc, #28]	; (83284 <pll_config_init+0x68>)
   83266:	4013      	ands	r3, r2
   83268:	687a      	ldr	r2, [r7, #4]
   8326a:	b2d2      	uxtb	r2, r2
   8326c:	4313      	orrs	r3, r2
   8326e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   83272:	68fb      	ldr	r3, [r7, #12]
   83274:	601a      	str	r2, [r3, #0]
	}
}
   83276:	bf00      	nop
   83278:	3718      	adds	r7, #24
   8327a:	46bd      	mov	sp, r7
   8327c:	bd80      	pop	{r7, pc}
   8327e:	bf00      	nop
   83280:	0008317d 	.word	0x0008317d
   83284:	07ff0000 	.word	0x07ff0000

00083288 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   83288:	b580      	push	{r7, lr}
   8328a:	b082      	sub	sp, #8
   8328c:	af00      	add	r7, sp, #0
   8328e:	6078      	str	r0, [r7, #4]
   83290:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   83292:	683b      	ldr	r3, [r7, #0]
   83294:	2b00      	cmp	r3, #0
   83296:	d108      	bne.n	832aa <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83298:	4b09      	ldr	r3, [pc, #36]	; (832c0 <pll_enable+0x38>)
   8329a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8329c:	4a09      	ldr	r2, [pc, #36]	; (832c4 <pll_enable+0x3c>)
   8329e:	687b      	ldr	r3, [r7, #4]
   832a0:	681b      	ldr	r3, [r3, #0]
   832a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   832a6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   832a8:	e005      	b.n	832b6 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   832aa:	4a06      	ldr	r2, [pc, #24]	; (832c4 <pll_enable+0x3c>)
   832ac:	687b      	ldr	r3, [r7, #4]
   832ae:	681b      	ldr	r3, [r3, #0]
   832b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   832b4:	61d3      	str	r3, [r2, #28]
}
   832b6:	bf00      	nop
   832b8:	3708      	adds	r7, #8
   832ba:	46bd      	mov	sp, r7
   832bc:	bd80      	pop	{r7, pc}
   832be:	bf00      	nop
   832c0:	0008382d 	.word	0x0008382d
   832c4:	400e0600 	.word	0x400e0600

000832c8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   832c8:	b580      	push	{r7, lr}
   832ca:	b082      	sub	sp, #8
   832cc:	af00      	add	r7, sp, #0
   832ce:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   832d0:	687b      	ldr	r3, [r7, #4]
   832d2:	2b00      	cmp	r3, #0
   832d4:	d103      	bne.n	832de <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   832d6:	4b05      	ldr	r3, [pc, #20]	; (832ec <pll_is_locked+0x24>)
   832d8:	4798      	blx	r3
   832da:	4603      	mov	r3, r0
   832dc:	e002      	b.n	832e4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   832de:	4b04      	ldr	r3, [pc, #16]	; (832f0 <pll_is_locked+0x28>)
   832e0:	4798      	blx	r3
   832e2:	4603      	mov	r3, r0
	}
}
   832e4:	4618      	mov	r0, r3
   832e6:	3708      	adds	r7, #8
   832e8:	46bd      	mov	sp, r7
   832ea:	bd80      	pop	{r7, pc}
   832ec:	00083845 	.word	0x00083845
   832f0:	0008385d 	.word	0x0008385d

000832f4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   832f4:	b580      	push	{r7, lr}
   832f6:	b082      	sub	sp, #8
   832f8:	af00      	add	r7, sp, #0
   832fa:	4603      	mov	r3, r0
   832fc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   832fe:	79fb      	ldrb	r3, [r7, #7]
   83300:	3b03      	subs	r3, #3
   83302:	2b04      	cmp	r3, #4
   83304:	d808      	bhi.n	83318 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   83306:	79fb      	ldrb	r3, [r7, #7]
   83308:	4618      	mov	r0, r3
   8330a:	4b06      	ldr	r3, [pc, #24]	; (83324 <pll_enable_source+0x30>)
   8330c:	4798      	blx	r3
		osc_wait_ready(e_src);
   8330e:	79fb      	ldrb	r3, [r7, #7]
   83310:	4618      	mov	r0, r3
   83312:	4b05      	ldr	r3, [pc, #20]	; (83328 <pll_enable_source+0x34>)
   83314:	4798      	blx	r3
		break;
   83316:	e000      	b.n	8331a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   83318:	bf00      	nop
	}
}
   8331a:	bf00      	nop
   8331c:	3708      	adds	r7, #8
   8331e:	46bd      	mov	sp, r7
   83320:	bd80      	pop	{r7, pc}
   83322:	bf00      	nop
   83324:	00083085 	.word	0x00083085
   83328:	000831f1 	.word	0x000831f1

0008332c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   8332c:	b580      	push	{r7, lr}
   8332e:	b082      	sub	sp, #8
   83330:	af00      	add	r7, sp, #0
   83332:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83334:	bf00      	nop
   83336:	6878      	ldr	r0, [r7, #4]
   83338:	4b04      	ldr	r3, [pc, #16]	; (8334c <pll_wait_for_lock+0x20>)
   8333a:	4798      	blx	r3
   8333c:	4603      	mov	r3, r0
   8333e:	2b00      	cmp	r3, #0
   83340:	d0f9      	beq.n	83336 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   83342:	2300      	movs	r3, #0
}
   83344:	4618      	mov	r0, r3
   83346:	3708      	adds	r7, #8
   83348:	46bd      	mov	sp, r7
   8334a:	bd80      	pop	{r7, pc}
   8334c:	000832c9 	.word	0x000832c9

00083350 <sysclk_get_main_hz>:
{
   83350:	b580      	push	{r7, lr}
   83352:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83354:	2006      	movs	r0, #6
   83356:	4b04      	ldr	r3, [pc, #16]	; (83368 <sysclk_get_main_hz+0x18>)
   83358:	4798      	blx	r3
   8335a:	4602      	mov	r2, r0
   8335c:	4613      	mov	r3, r2
   8335e:	00db      	lsls	r3, r3, #3
   83360:	1a9b      	subs	r3, r3, r2
   83362:	005b      	lsls	r3, r3, #1
}
   83364:	4618      	mov	r0, r3
   83366:	bd80      	pop	{r7, pc}
   83368:	0008317d 	.word	0x0008317d

0008336c <sysclk_get_cpu_hz>:
{
   8336c:	b580      	push	{r7, lr}
   8336e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83370:	4b02      	ldr	r3, [pc, #8]	; (8337c <sysclk_get_cpu_hz+0x10>)
   83372:	4798      	blx	r3
   83374:	4603      	mov	r3, r0
   83376:	085b      	lsrs	r3, r3, #1
}
   83378:	4618      	mov	r0, r3
   8337a:	bd80      	pop	{r7, pc}
   8337c:	00083351 	.word	0x00083351

00083380 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   83380:	b590      	push	{r4, r7, lr}
   83382:	b083      	sub	sp, #12
   83384:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83386:	4811      	ldr	r0, [pc, #68]	; (833cc <sysclk_init+0x4c>)
   83388:	4b11      	ldr	r3, [pc, #68]	; (833d0 <sysclk_init+0x50>)
   8338a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8338c:	2006      	movs	r0, #6
   8338e:	4b11      	ldr	r3, [pc, #68]	; (833d4 <sysclk_init+0x54>)
   83390:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   83392:	1d38      	adds	r0, r7, #4
   83394:	230e      	movs	r3, #14
   83396:	2201      	movs	r2, #1
   83398:	2106      	movs	r1, #6
   8339a:	4c0f      	ldr	r4, [pc, #60]	; (833d8 <sysclk_init+0x58>)
   8339c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8339e:	1d3b      	adds	r3, r7, #4
   833a0:	2100      	movs	r1, #0
   833a2:	4618      	mov	r0, r3
   833a4:	4b0d      	ldr	r3, [pc, #52]	; (833dc <sysclk_init+0x5c>)
   833a6:	4798      	blx	r3
		pll_wait_for_lock(0);
   833a8:	2000      	movs	r0, #0
   833aa:	4b0d      	ldr	r3, [pc, #52]	; (833e0 <sysclk_init+0x60>)
   833ac:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   833ae:	2010      	movs	r0, #16
   833b0:	4b0c      	ldr	r3, [pc, #48]	; (833e4 <sysclk_init+0x64>)
   833b2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   833b4:	4b0c      	ldr	r3, [pc, #48]	; (833e8 <sysclk_init+0x68>)
   833b6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   833b8:	4b0c      	ldr	r3, [pc, #48]	; (833ec <sysclk_init+0x6c>)
   833ba:	4798      	blx	r3
   833bc:	4603      	mov	r3, r0
   833be:	4618      	mov	r0, r3
   833c0:	4b03      	ldr	r3, [pc, #12]	; (833d0 <sysclk_init+0x50>)
   833c2:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   833c4:	bf00      	nop
   833c6:	370c      	adds	r7, #12
   833c8:	46bd      	mov	sp, r7
   833ca:	bd90      	pop	{r4, r7, pc}
   833cc:	0501bd00 	.word	0x0501bd00
   833d0:	200700d1 	.word	0x200700d1
   833d4:	000832f5 	.word	0x000832f5
   833d8:	0008321d 	.word	0x0008321d
   833dc:	00083289 	.word	0x00083289
   833e0:	0008332d 	.word	0x0008332d
   833e4:	00083641 	.word	0x00083641
   833e8:	00083fd1 	.word	0x00083fd1
   833ec:	0008336d 	.word	0x0008336d

000833f0 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   833f0:	b580      	push	{r7, lr}
   833f2:	b082      	sub	sp, #8
   833f4:	af00      	add	r7, sp, #0
   833f6:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   833f8:	6878      	ldr	r0, [r7, #4]
   833fa:	4b03      	ldr	r3, [pc, #12]	; (83408 <dmac_init+0x18>)
   833fc:	4798      	blx	r3
}
   833fe:	bf00      	nop
   83400:	3708      	adds	r7, #8
   83402:	46bd      	mov	sp, r7
   83404:	bd80      	pop	{r7, pc}
   83406:	bf00      	nop
   83408:	0008344b 	.word	0x0008344b

0008340c <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   8340c:	b480      	push	{r7}
   8340e:	b083      	sub	sp, #12
   83410:	af00      	add	r7, sp, #0
   83412:	6078      	str	r0, [r7, #4]
   83414:	460b      	mov	r3, r1
   83416:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   83418:	687b      	ldr	r3, [r7, #4]
   8341a:	681b      	ldr	r3, [r3, #0]
   8341c:	f023 0210 	bic.w	r2, r3, #16
   83420:	78fb      	ldrb	r3, [r7, #3]
   83422:	431a      	orrs	r2, r3
   83424:	687b      	ldr	r3, [r7, #4]
   83426:	601a      	str	r2, [r3, #0]
}
   83428:	bf00      	nop
   8342a:	370c      	adds	r7, #12
   8342c:	46bd      	mov	sp, r7
   8342e:	bc80      	pop	{r7}
   83430:	4770      	bx	lr

00083432 <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   83432:	b480      	push	{r7}
   83434:	b083      	sub	sp, #12
   83436:	af00      	add	r7, sp, #0
   83438:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   8343a:	687b      	ldr	r3, [r7, #4]
   8343c:	2201      	movs	r2, #1
   8343e:	605a      	str	r2, [r3, #4]
}
   83440:	bf00      	nop
   83442:	370c      	adds	r7, #12
   83444:	46bd      	mov	sp, r7
   83446:	bc80      	pop	{r7}
   83448:	4770      	bx	lr

0008344a <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   8344a:	b480      	push	{r7}
   8344c:	b083      	sub	sp, #12
   8344e:	af00      	add	r7, sp, #0
   83450:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   83452:	687b      	ldr	r3, [r7, #4]
   83454:	685b      	ldr	r3, [r3, #4]
   83456:	f023 0201 	bic.w	r2, r3, #1
   8345a:	687b      	ldr	r3, [r7, #4]
   8345c:	605a      	str	r2, [r3, #4]
}
   8345e:	bf00      	nop
   83460:	370c      	adds	r7, #12
   83462:	46bd      	mov	sp, r7
   83464:	bc80      	pop	{r7}
   83466:	4770      	bx	lr

00083468 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   83468:	b480      	push	{r7}
   8346a:	b083      	sub	sp, #12
   8346c:	af00      	add	r7, sp, #0
   8346e:	6078      	str	r0, [r7, #4]
   83470:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   83472:	687b      	ldr	r3, [r7, #4]
   83474:	683a      	ldr	r2, [r7, #0]
   83476:	619a      	str	r2, [r3, #24]
}
   83478:	bf00      	nop
   8347a:	370c      	adds	r7, #12
   8347c:	46bd      	mov	sp, r7
   8347e:	bc80      	pop	{r7}
   83480:	4770      	bx	lr

00083482 <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   83482:	b480      	push	{r7}
   83484:	b083      	sub	sp, #12
   83486:	af00      	add	r7, sp, #0
   83488:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   8348a:	687b      	ldr	r3, [r7, #4]
   8348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   8348e:	4618      	mov	r0, r3
   83490:	370c      	adds	r7, #12
   83492:	46bd      	mov	sp, r7
   83494:	bc80      	pop	{r7}
   83496:	4770      	bx	lr

00083498 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   83498:	b480      	push	{r7}
   8349a:	b083      	sub	sp, #12
   8349c:	af00      	add	r7, sp, #0
   8349e:	6078      	str	r0, [r7, #4]
   834a0:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   834a2:	2201      	movs	r2, #1
   834a4:	683b      	ldr	r3, [r7, #0]
   834a6:	409a      	lsls	r2, r3
   834a8:	687b      	ldr	r3, [r7, #4]
   834aa:	629a      	str	r2, [r3, #40]	; 0x28
}
   834ac:	bf00      	nop
   834ae:	370c      	adds	r7, #12
   834b0:	46bd      	mov	sp, r7
   834b2:	bc80      	pop	{r7}
   834b4:	4770      	bx	lr

000834b6 <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   834b6:	b480      	push	{r7}
   834b8:	b083      	sub	sp, #12
   834ba:	af00      	add	r7, sp, #0
   834bc:	6078      	str	r0, [r7, #4]
   834be:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   834c0:	2201      	movs	r2, #1
   834c2:	683b      	ldr	r3, [r7, #0]
   834c4:	409a      	lsls	r2, r3
   834c6:	687b      	ldr	r3, [r7, #4]
   834c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
   834ca:	bf00      	nop
   834cc:	370c      	adds	r7, #12
   834ce:	46bd      	mov	sp, r7
   834d0:	bc80      	pop	{r7}
   834d2:	4770      	bx	lr

000834d4 <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   834d4:	b480      	push	{r7}
   834d6:	b085      	sub	sp, #20
   834d8:	af00      	add	r7, sp, #0
   834da:	60f8      	str	r0, [r7, #12]
   834dc:	60b9      	str	r1, [r7, #8]
   834de:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   834e0:	68f9      	ldr	r1, [r7, #12]
   834e2:	68ba      	ldr	r2, [r7, #8]
   834e4:	4613      	mov	r3, r2
   834e6:	009b      	lsls	r3, r3, #2
   834e8:	4413      	add	r3, r2
   834ea:	00db      	lsls	r3, r3, #3
   834ec:	440b      	add	r3, r1
   834ee:	333c      	adds	r3, #60	; 0x3c
   834f0:	687a      	ldr	r2, [r7, #4]
   834f2:	601a      	str	r2, [r3, #0]
}
   834f4:	bf00      	nop
   834f6:	3714      	adds	r7, #20
   834f8:	46bd      	mov	sp, r7
   834fa:	bc80      	pop	{r7}
   834fc:	4770      	bx	lr

000834fe <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   834fe:	b480      	push	{r7}
   83500:	b085      	sub	sp, #20
   83502:	af00      	add	r7, sp, #0
   83504:	60f8      	str	r0, [r7, #12]
   83506:	60b9      	str	r1, [r7, #8]
   83508:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   8350a:	68f9      	ldr	r1, [r7, #12]
   8350c:	68ba      	ldr	r2, [r7, #8]
   8350e:	4613      	mov	r3, r2
   83510:	009b      	lsls	r3, r3, #2
   83512:	4413      	add	r3, r2
   83514:	00db      	lsls	r3, r3, #3
   83516:	440b      	add	r3, r1
   83518:	3340      	adds	r3, #64	; 0x40
   8351a:	687a      	ldr	r2, [r7, #4]
   8351c:	601a      	str	r2, [r3, #0]
}
   8351e:	bf00      	nop
   83520:	3714      	adds	r7, #20
   83522:	46bd      	mov	sp, r7
   83524:	bc80      	pop	{r7}
   83526:	4770      	bx	lr

00083528 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   83528:	b480      	push	{r7}
   8352a:	b085      	sub	sp, #20
   8352c:	af00      	add	r7, sp, #0
   8352e:	60f8      	str	r0, [r7, #12]
   83530:	60b9      	str	r1, [r7, #8]
   83532:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   83534:	68f9      	ldr	r1, [r7, #12]
   83536:	68ba      	ldr	r2, [r7, #8]
   83538:	4613      	mov	r3, r2
   8353a:	009b      	lsls	r3, r3, #2
   8353c:	4413      	add	r3, r2
   8353e:	00db      	lsls	r3, r3, #3
   83540:	440b      	add	r3, r1
   83542:	3344      	adds	r3, #68	; 0x44
   83544:	687a      	ldr	r2, [r7, #4]
   83546:	601a      	str	r2, [r3, #0]
}
   83548:	bf00      	nop
   8354a:	3714      	adds	r7, #20
   8354c:	46bd      	mov	sp, r7
   8354e:	bc80      	pop	{r7}
   83550:	4770      	bx	lr

00083552 <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   83552:	b480      	push	{r7}
   83554:	b085      	sub	sp, #20
   83556:	af00      	add	r7, sp, #0
   83558:	60f8      	str	r0, [r7, #12]
   8355a:	60b9      	str	r1, [r7, #8]
   8355c:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   8355e:	68f9      	ldr	r1, [r7, #12]
   83560:	68ba      	ldr	r2, [r7, #8]
   83562:	4613      	mov	r3, r2
   83564:	009b      	lsls	r3, r3, #2
   83566:	4413      	add	r3, r2
   83568:	00db      	lsls	r3, r3, #3
   8356a:	440b      	add	r3, r1
   8356c:	3348      	adds	r3, #72	; 0x48
   8356e:	687a      	ldr	r2, [r7, #4]
   83570:	601a      	str	r2, [r3, #0]
}
   83572:	bf00      	nop
   83574:	3714      	adds	r7, #20
   83576:	46bd      	mov	sp, r7
   83578:	bc80      	pop	{r7}
   8357a:	4770      	bx	lr

0008357c <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   8357c:	b480      	push	{r7}
   8357e:	b085      	sub	sp, #20
   83580:	af00      	add	r7, sp, #0
   83582:	60f8      	str	r0, [r7, #12]
   83584:	60b9      	str	r1, [r7, #8]
   83586:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   83588:	68f9      	ldr	r1, [r7, #12]
   8358a:	68ba      	ldr	r2, [r7, #8]
   8358c:	4613      	mov	r3, r2
   8358e:	009b      	lsls	r3, r3, #2
   83590:	4413      	add	r3, r2
   83592:	00db      	lsls	r3, r3, #3
   83594:	440b      	add	r3, r1
   83596:	334c      	adds	r3, #76	; 0x4c
   83598:	687a      	ldr	r2, [r7, #4]
   8359a:	601a      	str	r2, [r3, #0]
}
   8359c:	bf00      	nop
   8359e:	3714      	adds	r7, #20
   835a0:	46bd      	mov	sp, r7
   835a2:	bc80      	pop	{r7}
   835a4:	4770      	bx	lr

000835a6 <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   835a6:	b480      	push	{r7}
   835a8:	b085      	sub	sp, #20
   835aa:	af00      	add	r7, sp, #0
   835ac:	60f8      	str	r0, [r7, #12]
   835ae:	60b9      	str	r1, [r7, #8]
   835b0:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   835b2:	68f9      	ldr	r1, [r7, #12]
   835b4:	68ba      	ldr	r2, [r7, #8]
   835b6:	4613      	mov	r3, r2
   835b8:	009b      	lsls	r3, r3, #2
   835ba:	4413      	add	r3, r2
   835bc:	00db      	lsls	r3, r3, #3
   835be:	440b      	add	r3, r1
   835c0:	3350      	adds	r3, #80	; 0x50
   835c2:	687a      	ldr	r2, [r7, #4]
   835c4:	601a      	str	r2, [r3, #0]
}
   835c6:	bf00      	nop
   835c8:	3714      	adds	r7, #20
   835ca:	46bd      	mov	sp, r7
   835cc:	bc80      	pop	{r7}
   835ce:	4770      	bx	lr

000835d0 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   835d0:	b580      	push	{r7, lr}
   835d2:	b084      	sub	sp, #16
   835d4:	af00      	add	r7, sp, #0
   835d6:	60f8      	str	r0, [r7, #12]
   835d8:	60b9      	str	r1, [r7, #8]
   835da:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   835dc:	68fb      	ldr	r3, [r7, #12]
   835de:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   835e0:	687b      	ldr	r3, [r7, #4]
   835e2:	681b      	ldr	r3, [r3, #0]
   835e4:	461a      	mov	r2, r3
   835e6:	68b9      	ldr	r1, [r7, #8]
   835e8:	68f8      	ldr	r0, [r7, #12]
   835ea:	4b10      	ldr	r3, [pc, #64]	; (8362c <dmac_channel_single_buf_transfer_init+0x5c>)
   835ec:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   835ee:	687b      	ldr	r3, [r7, #4]
   835f0:	685b      	ldr	r3, [r3, #4]
   835f2:	461a      	mov	r2, r3
   835f4:	68b9      	ldr	r1, [r7, #8]
   835f6:	68f8      	ldr	r0, [r7, #12]
   835f8:	4b0d      	ldr	r3, [pc, #52]	; (83630 <dmac_channel_single_buf_transfer_init+0x60>)
   835fa:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   835fc:	2200      	movs	r2, #0
   835fe:	68b9      	ldr	r1, [r7, #8]
   83600:	68f8      	ldr	r0, [r7, #12]
   83602:	4b0c      	ldr	r3, [pc, #48]	; (83634 <dmac_channel_single_buf_transfer_init+0x64>)
   83604:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   83606:	687b      	ldr	r3, [r7, #4]
   83608:	689b      	ldr	r3, [r3, #8]
   8360a:	461a      	mov	r2, r3
   8360c:	68b9      	ldr	r1, [r7, #8]
   8360e:	68f8      	ldr	r0, [r7, #12]
   83610:	4b09      	ldr	r3, [pc, #36]	; (83638 <dmac_channel_single_buf_transfer_init+0x68>)
   83612:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   83614:	687b      	ldr	r3, [r7, #4]
   83616:	68db      	ldr	r3, [r3, #12]
   83618:	461a      	mov	r2, r3
   8361a:	68b9      	ldr	r1, [r7, #8]
   8361c:	68f8      	ldr	r0, [r7, #12]
   8361e:	4b07      	ldr	r3, [pc, #28]	; (8363c <dmac_channel_single_buf_transfer_init+0x6c>)
   83620:	4798      	blx	r3
}
   83622:	bf00      	nop
   83624:	3710      	adds	r7, #16
   83626:	46bd      	mov	sp, r7
   83628:	bd80      	pop	{r7, pc}
   8362a:	bf00      	nop
   8362c:	000834d5 	.word	0x000834d5
   83630:	000834ff 	.word	0x000834ff
   83634:	00083529 	.word	0x00083529
   83638:	00083553 	.word	0x00083553
   8363c:	0008357d 	.word	0x0008357d

00083640 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83640:	b480      	push	{r7}
   83642:	b085      	sub	sp, #20
   83644:	af00      	add	r7, sp, #0
   83646:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83648:	491c      	ldr	r1, [pc, #112]	; (836bc <pmc_switch_mck_to_pllack+0x7c>)
   8364a:	4b1c      	ldr	r3, [pc, #112]	; (836bc <pmc_switch_mck_to_pllack+0x7c>)
   8364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8364e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83652:	687b      	ldr	r3, [r7, #4]
   83654:	4313      	orrs	r3, r2
   83656:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83658:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8365c:	60fb      	str	r3, [r7, #12]
   8365e:	e007      	b.n	83670 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83660:	68fb      	ldr	r3, [r7, #12]
   83662:	2b00      	cmp	r3, #0
   83664:	d101      	bne.n	8366a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83666:	2301      	movs	r3, #1
   83668:	e023      	b.n	836b2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8366a:	68fb      	ldr	r3, [r7, #12]
   8366c:	3b01      	subs	r3, #1
   8366e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83670:	4b12      	ldr	r3, [pc, #72]	; (836bc <pmc_switch_mck_to_pllack+0x7c>)
   83672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83674:	f003 0308 	and.w	r3, r3, #8
   83678:	2b00      	cmp	r3, #0
   8367a:	d0f1      	beq.n	83660 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8367c:	4a0f      	ldr	r2, [pc, #60]	; (836bc <pmc_switch_mck_to_pllack+0x7c>)
   8367e:	4b0f      	ldr	r3, [pc, #60]	; (836bc <pmc_switch_mck_to_pllack+0x7c>)
   83680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83682:	f023 0303 	bic.w	r3, r3, #3
   83686:	f043 0302 	orr.w	r3, r3, #2
   8368a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8368c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83690:	60fb      	str	r3, [r7, #12]
   83692:	e007      	b.n	836a4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83694:	68fb      	ldr	r3, [r7, #12]
   83696:	2b00      	cmp	r3, #0
   83698:	d101      	bne.n	8369e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   8369a:	2301      	movs	r3, #1
   8369c:	e009      	b.n	836b2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8369e:	68fb      	ldr	r3, [r7, #12]
   836a0:	3b01      	subs	r3, #1
   836a2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836a4:	4b05      	ldr	r3, [pc, #20]	; (836bc <pmc_switch_mck_to_pllack+0x7c>)
   836a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   836a8:	f003 0308 	and.w	r3, r3, #8
   836ac:	2b00      	cmp	r3, #0
   836ae:	d0f1      	beq.n	83694 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   836b0:	2300      	movs	r3, #0
}
   836b2:	4618      	mov	r0, r3
   836b4:	3714      	adds	r7, #20
   836b6:	46bd      	mov	sp, r7
   836b8:	bc80      	pop	{r7}
   836ba:	4770      	bx	lr
   836bc:	400e0600 	.word	0x400e0600

000836c0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   836c0:	b480      	push	{r7}
   836c2:	b083      	sub	sp, #12
   836c4:	af00      	add	r7, sp, #0
   836c6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   836c8:	687b      	ldr	r3, [r7, #4]
   836ca:	2b01      	cmp	r3, #1
   836cc:	d107      	bne.n	836de <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   836ce:	4a08      	ldr	r2, [pc, #32]	; (836f0 <pmc_switch_sclk_to_32kxtal+0x30>)
   836d0:	4b07      	ldr	r3, [pc, #28]	; (836f0 <pmc_switch_sclk_to_32kxtal+0x30>)
   836d2:	689b      	ldr	r3, [r3, #8]
   836d4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   836d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   836dc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   836de:	4b04      	ldr	r3, [pc, #16]	; (836f0 <pmc_switch_sclk_to_32kxtal+0x30>)
   836e0:	4a04      	ldr	r2, [pc, #16]	; (836f4 <pmc_switch_sclk_to_32kxtal+0x34>)
   836e2:	601a      	str	r2, [r3, #0]
}
   836e4:	bf00      	nop
   836e6:	370c      	adds	r7, #12
   836e8:	46bd      	mov	sp, r7
   836ea:	bc80      	pop	{r7}
   836ec:	4770      	bx	lr
   836ee:	bf00      	nop
   836f0:	400e1a10 	.word	0x400e1a10
   836f4:	a5000008 	.word	0xa5000008

000836f8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   836f8:	b480      	push	{r7}
   836fa:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   836fc:	4b09      	ldr	r3, [pc, #36]	; (83724 <pmc_osc_is_ready_32kxtal+0x2c>)
   836fe:	695b      	ldr	r3, [r3, #20]
   83700:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83704:	2b00      	cmp	r3, #0
   83706:	d007      	beq.n	83718 <pmc_osc_is_ready_32kxtal+0x20>
   83708:	4b07      	ldr	r3, [pc, #28]	; (83728 <pmc_osc_is_ready_32kxtal+0x30>)
   8370a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83710:	2b00      	cmp	r3, #0
   83712:	d001      	beq.n	83718 <pmc_osc_is_ready_32kxtal+0x20>
   83714:	2301      	movs	r3, #1
   83716:	e000      	b.n	8371a <pmc_osc_is_ready_32kxtal+0x22>
   83718:	2300      	movs	r3, #0
}
   8371a:	4618      	mov	r0, r3
   8371c:	46bd      	mov	sp, r7
   8371e:	bc80      	pop	{r7}
   83720:	4770      	bx	lr
   83722:	bf00      	nop
   83724:	400e1a10 	.word	0x400e1a10
   83728:	400e0600 	.word	0x400e0600

0008372c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   8372c:	b480      	push	{r7}
   8372e:	b083      	sub	sp, #12
   83730:	af00      	add	r7, sp, #0
   83732:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   83734:	4a18      	ldr	r2, [pc, #96]	; (83798 <pmc_switch_mainck_to_fastrc+0x6c>)
   83736:	4b18      	ldr	r3, [pc, #96]	; (83798 <pmc_switch_mainck_to_fastrc+0x6c>)
   83738:	6a1b      	ldr	r3, [r3, #32]
   8373a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8373e:	f043 0308 	orr.w	r3, r3, #8
   83742:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83744:	bf00      	nop
   83746:	4b14      	ldr	r3, [pc, #80]	; (83798 <pmc_switch_mainck_to_fastrc+0x6c>)
   83748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8374e:	2b00      	cmp	r3, #0
   83750:	d0f9      	beq.n	83746 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83752:	4911      	ldr	r1, [pc, #68]	; (83798 <pmc_switch_mainck_to_fastrc+0x6c>)
   83754:	4b10      	ldr	r3, [pc, #64]	; (83798 <pmc_switch_mainck_to_fastrc+0x6c>)
   83756:	6a1b      	ldr	r3, [r3, #32]
   83758:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8375c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   83760:	687a      	ldr	r2, [r7, #4]
   83762:	4313      	orrs	r3, r2
   83764:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83768:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8376a:	bf00      	nop
   8376c:	4b0a      	ldr	r3, [pc, #40]	; (83798 <pmc_switch_mainck_to_fastrc+0x6c>)
   8376e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83774:	2b00      	cmp	r3, #0
   83776:	d0f9      	beq.n	8376c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   83778:	4a07      	ldr	r2, [pc, #28]	; (83798 <pmc_switch_mainck_to_fastrc+0x6c>)
   8377a:	4b07      	ldr	r3, [pc, #28]	; (83798 <pmc_switch_mainck_to_fastrc+0x6c>)
   8377c:	6a1b      	ldr	r3, [r3, #32]
   8377e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   83782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83786:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8378a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   8378c:	bf00      	nop
   8378e:	370c      	adds	r7, #12
   83790:	46bd      	mov	sp, r7
   83792:	bc80      	pop	{r7}
   83794:	4770      	bx	lr
   83796:	bf00      	nop
   83798:	400e0600 	.word	0x400e0600

0008379c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   8379c:	b480      	push	{r7}
   8379e:	b083      	sub	sp, #12
   837a0:	af00      	add	r7, sp, #0
   837a2:	6078      	str	r0, [r7, #4]
   837a4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   837a6:	687b      	ldr	r3, [r7, #4]
   837a8:	2b00      	cmp	r3, #0
   837aa:	d008      	beq.n	837be <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   837ac:	4916      	ldr	r1, [pc, #88]	; (83808 <pmc_switch_mainck_to_xtal+0x6c>)
   837ae:	4b16      	ldr	r3, [pc, #88]	; (83808 <pmc_switch_mainck_to_xtal+0x6c>)
   837b0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   837b2:	4a16      	ldr	r2, [pc, #88]	; (8380c <pmc_switch_mainck_to_xtal+0x70>)
   837b4:	401a      	ands	r2, r3
   837b6:	4b16      	ldr	r3, [pc, #88]	; (83810 <pmc_switch_mainck_to_xtal+0x74>)
   837b8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   837ba:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   837bc:	e01e      	b.n	837fc <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   837be:	4912      	ldr	r1, [pc, #72]	; (83808 <pmc_switch_mainck_to_xtal+0x6c>)
   837c0:	4b11      	ldr	r3, [pc, #68]	; (83808 <pmc_switch_mainck_to_xtal+0x6c>)
   837c2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   837c4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   837c8:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   837cc:	683a      	ldr	r2, [r7, #0]
   837ce:	0212      	lsls	r2, r2, #8
   837d0:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   837d2:	4313      	orrs	r3, r2
   837d4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   837d8:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   837dc:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   837de:	bf00      	nop
   837e0:	4b09      	ldr	r3, [pc, #36]	; (83808 <pmc_switch_mainck_to_xtal+0x6c>)
   837e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   837e4:	f003 0301 	and.w	r3, r3, #1
   837e8:	2b00      	cmp	r3, #0
   837ea:	d0f9      	beq.n	837e0 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   837ec:	4a06      	ldr	r2, [pc, #24]	; (83808 <pmc_switch_mainck_to_xtal+0x6c>)
   837ee:	4b06      	ldr	r3, [pc, #24]	; (83808 <pmc_switch_mainck_to_xtal+0x6c>)
   837f0:	6a1b      	ldr	r3, [r3, #32]
   837f2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   837f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   837fa:	6213      	str	r3, [r2, #32]
}
   837fc:	bf00      	nop
   837fe:	370c      	adds	r7, #12
   83800:	46bd      	mov	sp, r7
   83802:	bc80      	pop	{r7}
   83804:	4770      	bx	lr
   83806:	bf00      	nop
   83808:	400e0600 	.word	0x400e0600
   8380c:	fec8fffc 	.word	0xfec8fffc
   83810:	01370002 	.word	0x01370002

00083814 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83814:	b480      	push	{r7}
   83816:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83818:	4b03      	ldr	r3, [pc, #12]	; (83828 <pmc_osc_is_ready_mainck+0x14>)
   8381a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8381c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83820:	4618      	mov	r0, r3
   83822:	46bd      	mov	sp, r7
   83824:	bc80      	pop	{r7}
   83826:	4770      	bx	lr
   83828:	400e0600 	.word	0x400e0600

0008382c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   8382c:	b480      	push	{r7}
   8382e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83830:	4b03      	ldr	r3, [pc, #12]	; (83840 <pmc_disable_pllack+0x14>)
   83832:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83836:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83838:	bf00      	nop
   8383a:	46bd      	mov	sp, r7
   8383c:	bc80      	pop	{r7}
   8383e:	4770      	bx	lr
   83840:	400e0600 	.word	0x400e0600

00083844 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83844:	b480      	push	{r7}
   83846:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83848:	4b03      	ldr	r3, [pc, #12]	; (83858 <pmc_is_locked_pllack+0x14>)
   8384a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8384c:	f003 0302 	and.w	r3, r3, #2
}
   83850:	4618      	mov	r0, r3
   83852:	46bd      	mov	sp, r7
   83854:	bc80      	pop	{r7}
   83856:	4770      	bx	lr
   83858:	400e0600 	.word	0x400e0600

0008385c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   8385c:	b480      	push	{r7}
   8385e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83860:	4b03      	ldr	r3, [pc, #12]	; (83870 <pmc_is_locked_upll+0x14>)
   83862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83864:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83868:	4618      	mov	r0, r3
   8386a:	46bd      	mov	sp, r7
   8386c:	bc80      	pop	{r7}
   8386e:	4770      	bx	lr
   83870:	400e0600 	.word	0x400e0600

00083874 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83874:	b480      	push	{r7}
   83876:	b083      	sub	sp, #12
   83878:	af00      	add	r7, sp, #0
   8387a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   8387c:	687b      	ldr	r3, [r7, #4]
   8387e:	2b2c      	cmp	r3, #44	; 0x2c
   83880:	d901      	bls.n	83886 <pmc_enable_periph_clk+0x12>
		return 1;
   83882:	2301      	movs	r3, #1
   83884:	e02f      	b.n	838e6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   83886:	687b      	ldr	r3, [r7, #4]
   83888:	2b1f      	cmp	r3, #31
   8388a:	d813      	bhi.n	838b4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8388c:	4b18      	ldr	r3, [pc, #96]	; (838f0 <pmc_enable_periph_clk+0x7c>)
   8388e:	699a      	ldr	r2, [r3, #24]
   83890:	2101      	movs	r1, #1
   83892:	687b      	ldr	r3, [r7, #4]
   83894:	fa01 f303 	lsl.w	r3, r1, r3
   83898:	401a      	ands	r2, r3
   8389a:	2101      	movs	r1, #1
   8389c:	687b      	ldr	r3, [r7, #4]
   8389e:	fa01 f303 	lsl.w	r3, r1, r3
   838a2:	429a      	cmp	r2, r3
   838a4:	d01e      	beq.n	838e4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   838a6:	4a12      	ldr	r2, [pc, #72]	; (838f0 <pmc_enable_periph_clk+0x7c>)
   838a8:	2101      	movs	r1, #1
   838aa:	687b      	ldr	r3, [r7, #4]
   838ac:	fa01 f303 	lsl.w	r3, r1, r3
   838b0:	6113      	str	r3, [r2, #16]
   838b2:	e017      	b.n	838e4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   838b4:	687b      	ldr	r3, [r7, #4]
   838b6:	3b20      	subs	r3, #32
   838b8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   838ba:	4b0d      	ldr	r3, [pc, #52]	; (838f0 <pmc_enable_periph_clk+0x7c>)
   838bc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   838c0:	2101      	movs	r1, #1
   838c2:	687b      	ldr	r3, [r7, #4]
   838c4:	fa01 f303 	lsl.w	r3, r1, r3
   838c8:	401a      	ands	r2, r3
   838ca:	2101      	movs	r1, #1
   838cc:	687b      	ldr	r3, [r7, #4]
   838ce:	fa01 f303 	lsl.w	r3, r1, r3
   838d2:	429a      	cmp	r2, r3
   838d4:	d006      	beq.n	838e4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   838d6:	4a06      	ldr	r2, [pc, #24]	; (838f0 <pmc_enable_periph_clk+0x7c>)
   838d8:	2101      	movs	r1, #1
   838da:	687b      	ldr	r3, [r7, #4]
   838dc:	fa01 f303 	lsl.w	r3, r1, r3
   838e0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   838e4:	2300      	movs	r3, #0
}
   838e6:	4618      	mov	r0, r3
   838e8:	370c      	adds	r7, #12
   838ea:	46bd      	mov	sp, r7
   838ec:	bc80      	pop	{r7}
   838ee:	4770      	bx	lr
   838f0:	400e0600 	.word	0x400e0600

000838f4 <osc_get_rate>:
{
   838f4:	b480      	push	{r7}
   838f6:	b083      	sub	sp, #12
   838f8:	af00      	add	r7, sp, #0
   838fa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   838fc:	687b      	ldr	r3, [r7, #4]
   838fe:	2b07      	cmp	r3, #7
   83900:	d825      	bhi.n	8394e <osc_get_rate+0x5a>
   83902:	a201      	add	r2, pc, #4	; (adr r2, 83908 <osc_get_rate+0x14>)
   83904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83908:	00083929 	.word	0x00083929
   8390c:	0008392f 	.word	0x0008392f
   83910:	00083935 	.word	0x00083935
   83914:	0008393b 	.word	0x0008393b
   83918:	0008393f 	.word	0x0008393f
   8391c:	00083943 	.word	0x00083943
   83920:	00083947 	.word	0x00083947
   83924:	0008394b 	.word	0x0008394b
		return OSC_SLCK_32K_RC_HZ;
   83928:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8392c:	e010      	b.n	83950 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8392e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83932:	e00d      	b.n	83950 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   83934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83938:	e00a      	b.n	83950 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   8393a:	4b08      	ldr	r3, [pc, #32]	; (8395c <osc_get_rate+0x68>)
   8393c:	e008      	b.n	83950 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8393e:	4b08      	ldr	r3, [pc, #32]	; (83960 <osc_get_rate+0x6c>)
   83940:	e006      	b.n	83950 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   83942:	4b08      	ldr	r3, [pc, #32]	; (83964 <osc_get_rate+0x70>)
   83944:	e004      	b.n	83950 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   83946:	4b07      	ldr	r3, [pc, #28]	; (83964 <osc_get_rate+0x70>)
   83948:	e002      	b.n	83950 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   8394a:	4b06      	ldr	r3, [pc, #24]	; (83964 <osc_get_rate+0x70>)
   8394c:	e000      	b.n	83950 <osc_get_rate+0x5c>
	return 0;
   8394e:	2300      	movs	r3, #0
}
   83950:	4618      	mov	r0, r3
   83952:	370c      	adds	r7, #12
   83954:	46bd      	mov	sp, r7
   83956:	bc80      	pop	{r7}
   83958:	4770      	bx	lr
   8395a:	bf00      	nop
   8395c:	003d0900 	.word	0x003d0900
   83960:	007a1200 	.word	0x007a1200
   83964:	00b71b00 	.word	0x00b71b00

00083968 <sysclk_get_main_hz>:
{
   83968:	b580      	push	{r7, lr}
   8396a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   8396c:	2006      	movs	r0, #6
   8396e:	4b04      	ldr	r3, [pc, #16]	; (83980 <sysclk_get_main_hz+0x18>)
   83970:	4798      	blx	r3
   83972:	4602      	mov	r2, r0
   83974:	4613      	mov	r3, r2
   83976:	00db      	lsls	r3, r3, #3
   83978:	1a9b      	subs	r3, r3, r2
   8397a:	005b      	lsls	r3, r3, #1
}
   8397c:	4618      	mov	r0, r3
   8397e:	bd80      	pop	{r7, pc}
   83980:	000838f5 	.word	0x000838f5

00083984 <sysclk_get_cpu_hz>:
{
   83984:	b580      	push	{r7, lr}
   83986:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83988:	4b02      	ldr	r3, [pc, #8]	; (83994 <sysclk_get_cpu_hz+0x10>)
   8398a:	4798      	blx	r3
   8398c:	4603      	mov	r3, r0
   8398e:	085b      	lsrs	r3, r3, #1
}
   83990:	4618      	mov	r0, r3
   83992:	bd80      	pop	{r7, pc}
   83994:	00083969 	.word	0x00083969

00083998 <sysclk_enable_peripheral_clock>:
{
   83998:	b580      	push	{r7, lr}
   8399a:	b082      	sub	sp, #8
   8399c:	af00      	add	r7, sp, #0
   8399e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   839a0:	6878      	ldr	r0, [r7, #4]
   839a2:	4b03      	ldr	r3, [pc, #12]	; (839b0 <sysclk_enable_peripheral_clock+0x18>)
   839a4:	4798      	blx	r3
}
   839a6:	bf00      	nop
   839a8:	3708      	adds	r7, #8
   839aa:	46bd      	mov	sp, r7
   839ac:	bd80      	pop	{r7, pc}
   839ae:	bf00      	nop
   839b0:	00083875 	.word	0x00083875

000839b4 <ioport_init>:
{
   839b4:	b580      	push	{r7, lr}
   839b6:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   839b8:	200b      	movs	r0, #11
   839ba:	4b06      	ldr	r3, [pc, #24]	; (839d4 <ioport_init+0x20>)
   839bc:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   839be:	200c      	movs	r0, #12
   839c0:	4b04      	ldr	r3, [pc, #16]	; (839d4 <ioport_init+0x20>)
   839c2:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   839c4:	200d      	movs	r0, #13
   839c6:	4b03      	ldr	r3, [pc, #12]	; (839d4 <ioport_init+0x20>)
   839c8:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   839ca:	200e      	movs	r0, #14
   839cc:	4b01      	ldr	r3, [pc, #4]	; (839d4 <ioport_init+0x20>)
   839ce:	4798      	blx	r3
}
   839d0:	bf00      	nop
   839d2:	bd80      	pop	{r7, pc}
   839d4:	00083999 	.word	0x00083999

000839d8 <ioport_disable_pin>:
{
   839d8:	b480      	push	{r7}
   839da:	b089      	sub	sp, #36	; 0x24
   839dc:	af00      	add	r7, sp, #0
   839de:	6078      	str	r0, [r7, #4]
   839e0:	687b      	ldr	r3, [r7, #4]
   839e2:	61fb      	str	r3, [r7, #28]
   839e4:	69fb      	ldr	r3, [r7, #28]
   839e6:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   839e8:	69bb      	ldr	r3, [r7, #24]
   839ea:	095a      	lsrs	r2, r3, #5
   839ec:	69fb      	ldr	r3, [r7, #28]
   839ee:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   839f0:	697b      	ldr	r3, [r7, #20]
   839f2:	f003 031f 	and.w	r3, r3, #31
   839f6:	2101      	movs	r1, #1
   839f8:	fa01 f303 	lsl.w	r3, r1, r3
   839fc:	613a      	str	r2, [r7, #16]
   839fe:	60fb      	str	r3, [r7, #12]
   83a00:	693b      	ldr	r3, [r7, #16]
   83a02:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83a04:	68bb      	ldr	r3, [r7, #8]
   83a06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83a0a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83a0e:	025b      	lsls	r3, r3, #9
   83a10:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   83a12:	68fb      	ldr	r3, [r7, #12]
   83a14:	6053      	str	r3, [r2, #4]
}
   83a16:	bf00      	nop
   83a18:	3724      	adds	r7, #36	; 0x24
   83a1a:	46bd      	mov	sp, r7
   83a1c:	bc80      	pop	{r7}
   83a1e:	4770      	bx	lr

00083a20 <ioport_set_pin_mode>:
{
   83a20:	b480      	push	{r7}
   83a22:	b08d      	sub	sp, #52	; 0x34
   83a24:	af00      	add	r7, sp, #0
   83a26:	6078      	str	r0, [r7, #4]
   83a28:	6039      	str	r1, [r7, #0]
   83a2a:	687b      	ldr	r3, [r7, #4]
   83a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   83a2e:	683b      	ldr	r3, [r7, #0]
   83a30:	62bb      	str	r3, [r7, #40]	; 0x28
   83a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83a34:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   83a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83a38:	095a      	lsrs	r2, r3, #5
   83a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83a3c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   83a3e:	6a3b      	ldr	r3, [r7, #32]
   83a40:	f003 031f 	and.w	r3, r3, #31
   83a44:	2101      	movs	r1, #1
   83a46:	fa01 f303 	lsl.w	r3, r1, r3
   83a4a:	61fa      	str	r2, [r7, #28]
   83a4c:	61bb      	str	r3, [r7, #24]
   83a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   83a50:	617b      	str	r3, [r7, #20]
   83a52:	69fb      	ldr	r3, [r7, #28]
   83a54:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83a56:	693b      	ldr	r3, [r7, #16]
   83a58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83a5c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83a60:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   83a62:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   83a64:	697b      	ldr	r3, [r7, #20]
   83a66:	f003 0308 	and.w	r3, r3, #8
   83a6a:	2b00      	cmp	r3, #0
   83a6c:	d003      	beq.n	83a76 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   83a6e:	68fb      	ldr	r3, [r7, #12]
   83a70:	69ba      	ldr	r2, [r7, #24]
   83a72:	665a      	str	r2, [r3, #100]	; 0x64
   83a74:	e002      	b.n	83a7c <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   83a76:	68fb      	ldr	r3, [r7, #12]
   83a78:	69ba      	ldr	r2, [r7, #24]
   83a7a:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   83a7c:	697b      	ldr	r3, [r7, #20]
   83a7e:	f003 0320 	and.w	r3, r3, #32
   83a82:	2b00      	cmp	r3, #0
   83a84:	d003      	beq.n	83a8e <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   83a86:	68fb      	ldr	r3, [r7, #12]
   83a88:	69ba      	ldr	r2, [r7, #24]
   83a8a:	651a      	str	r2, [r3, #80]	; 0x50
   83a8c:	e002      	b.n	83a94 <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   83a8e:	68fb      	ldr	r3, [r7, #12]
   83a90:	69ba      	ldr	r2, [r7, #24]
   83a92:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   83a94:	697b      	ldr	r3, [r7, #20]
   83a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   83a9a:	2b00      	cmp	r3, #0
   83a9c:	d003      	beq.n	83aa6 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   83a9e:	68fb      	ldr	r3, [r7, #12]
   83aa0:	69ba      	ldr	r2, [r7, #24]
   83aa2:	621a      	str	r2, [r3, #32]
   83aa4:	e002      	b.n	83aac <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   83aa6:	68fb      	ldr	r3, [r7, #12]
   83aa8:	69ba      	ldr	r2, [r7, #24]
   83aaa:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   83aac:	697b      	ldr	r3, [r7, #20]
   83aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83ab2:	2b00      	cmp	r3, #0
   83ab4:	d004      	beq.n	83ac0 <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   83ab6:	68fb      	ldr	r3, [r7, #12]
   83ab8:	69ba      	ldr	r2, [r7, #24]
   83aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   83abe:	e003      	b.n	83ac8 <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   83ac0:	68fb      	ldr	r3, [r7, #12]
   83ac2:	69ba      	ldr	r2, [r7, #24]
   83ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   83ac8:	697b      	ldr	r3, [r7, #20]
   83aca:	f003 0301 	and.w	r3, r3, #1
   83ace:	2b00      	cmp	r3, #0
   83ad0:	d006      	beq.n	83ae0 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   83ad2:	68fb      	ldr	r3, [r7, #12]
   83ad4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83ad6:	69bb      	ldr	r3, [r7, #24]
   83ad8:	431a      	orrs	r2, r3
   83ada:	68fb      	ldr	r3, [r7, #12]
   83adc:	671a      	str	r2, [r3, #112]	; 0x70
}
   83ade:	e006      	b.n	83aee <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   83ae0:	68fb      	ldr	r3, [r7, #12]
   83ae2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83ae4:	69bb      	ldr	r3, [r7, #24]
   83ae6:	43db      	mvns	r3, r3
   83ae8:	401a      	ands	r2, r3
   83aea:	68fb      	ldr	r3, [r7, #12]
   83aec:	671a      	str	r2, [r3, #112]	; 0x70
   83aee:	bf00      	nop
   83af0:	3734      	adds	r7, #52	; 0x34
   83af2:	46bd      	mov	sp, r7
   83af4:	bc80      	pop	{r7}
   83af6:	4770      	bx	lr

00083af8 <ioport_set_pin_dir>:
{
   83af8:	b480      	push	{r7}
   83afa:	b08d      	sub	sp, #52	; 0x34
   83afc:	af00      	add	r7, sp, #0
   83afe:	6078      	str	r0, [r7, #4]
   83b00:	460b      	mov	r3, r1
   83b02:	70fb      	strb	r3, [r7, #3]
   83b04:	687b      	ldr	r3, [r7, #4]
   83b06:	62fb      	str	r3, [r7, #44]	; 0x2c
   83b08:	78fb      	ldrb	r3, [r7, #3]
   83b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   83b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83b10:	627b      	str	r3, [r7, #36]	; 0x24
   83b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83b14:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   83b16:	6a3b      	ldr	r3, [r7, #32]
   83b18:	095b      	lsrs	r3, r3, #5
   83b1a:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83b1c:	69fb      	ldr	r3, [r7, #28]
   83b1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83b22:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83b26:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83b28:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   83b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83b2e:	2b01      	cmp	r3, #1
   83b30:	d109      	bne.n	83b46 <ioport_set_pin_dir+0x4e>
   83b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83b34:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   83b36:	697b      	ldr	r3, [r7, #20]
   83b38:	f003 031f 	and.w	r3, r3, #31
   83b3c:	2201      	movs	r2, #1
   83b3e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83b40:	69bb      	ldr	r3, [r7, #24]
   83b42:	611a      	str	r2, [r3, #16]
   83b44:	e00c      	b.n	83b60 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   83b46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83b4a:	2b00      	cmp	r3, #0
   83b4c:	d108      	bne.n	83b60 <ioport_set_pin_dir+0x68>
   83b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83b50:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   83b52:	693b      	ldr	r3, [r7, #16]
   83b54:	f003 031f 	and.w	r3, r3, #31
   83b58:	2201      	movs	r2, #1
   83b5a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   83b5c:	69bb      	ldr	r3, [r7, #24]
   83b5e:	615a      	str	r2, [r3, #20]
   83b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83b62:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83b64:	68fb      	ldr	r3, [r7, #12]
   83b66:	f003 031f 	and.w	r3, r3, #31
   83b6a:	2201      	movs	r2, #1
   83b6c:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83b6e:	69bb      	ldr	r3, [r7, #24]
   83b70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   83b74:	bf00      	nop
   83b76:	3734      	adds	r7, #52	; 0x34
   83b78:	46bd      	mov	sp, r7
   83b7a:	bc80      	pop	{r7}
   83b7c:	4770      	bx	lr

00083b7e <ioport_set_pin_level>:
{
   83b7e:	b480      	push	{r7}
   83b80:	b08b      	sub	sp, #44	; 0x2c
   83b82:	af00      	add	r7, sp, #0
   83b84:	6078      	str	r0, [r7, #4]
   83b86:	460b      	mov	r3, r1
   83b88:	70fb      	strb	r3, [r7, #3]
   83b8a:	687b      	ldr	r3, [r7, #4]
   83b8c:	627b      	str	r3, [r7, #36]	; 0x24
   83b8e:	78fb      	ldrb	r3, [r7, #3]
   83b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   83b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83b96:	61fb      	str	r3, [r7, #28]
   83b98:	69fb      	ldr	r3, [r7, #28]
   83b9a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83b9c:	69bb      	ldr	r3, [r7, #24]
   83b9e:	095b      	lsrs	r3, r3, #5
   83ba0:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83ba2:	697b      	ldr	r3, [r7, #20]
   83ba4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83ba8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83bac:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83bae:	613b      	str	r3, [r7, #16]
	if (level) {
   83bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83bb4:	2b00      	cmp	r3, #0
   83bb6:	d009      	beq.n	83bcc <ioport_set_pin_level+0x4e>
   83bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83bba:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83bbc:	68fb      	ldr	r3, [r7, #12]
   83bbe:	f003 031f 	and.w	r3, r3, #31
   83bc2:	2201      	movs	r2, #1
   83bc4:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   83bc6:	693b      	ldr	r3, [r7, #16]
   83bc8:	631a      	str	r2, [r3, #48]	; 0x30
}
   83bca:	e008      	b.n	83bde <ioport_set_pin_level+0x60>
   83bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83bce:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   83bd0:	68bb      	ldr	r3, [r7, #8]
   83bd2:	f003 031f 	and.w	r3, r3, #31
   83bd6:	2201      	movs	r2, #1
   83bd8:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83bda:	693b      	ldr	r3, [r7, #16]
   83bdc:	635a      	str	r2, [r3, #52]	; 0x34
   83bde:	bf00      	nop
   83be0:	372c      	adds	r7, #44	; 0x2c
   83be2:	46bd      	mov	sp, r7
   83be4:	bc80      	pop	{r7}
   83be6:	4770      	bx	lr

00083be8 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   83be8:	b580      	push	{r7, lr}
   83bea:	b084      	sub	sp, #16
   83bec:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83bee:	4ba6      	ldr	r3, [pc, #664]	; (83e88 <board_init+0x2a0>)
   83bf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83bf4:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   83bf6:	4ba5      	ldr	r3, [pc, #660]	; (83e8c <board_init+0x2a4>)
   83bf8:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   83bfa:	2101      	movs	r1, #1
   83bfc:	206a      	movs	r0, #106	; 0x6a
   83bfe:	4ba4      	ldr	r3, [pc, #656]	; (83e90 <board_init+0x2a8>)
   83c00:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   83c02:	2100      	movs	r1, #0
   83c04:	206a      	movs	r0, #106	; 0x6a
   83c06:	4ba3      	ldr	r3, [pc, #652]	; (83e94 <board_init+0x2ac>)
   83c08:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   83c0a:	2101      	movs	r1, #1
   83c0c:	2067      	movs	r0, #103	; 0x67
   83c0e:	4ba0      	ldr	r3, [pc, #640]	; (83e90 <board_init+0x2a8>)
   83c10:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   83c12:	2100      	movs	r1, #0
   83c14:	2067      	movs	r0, #103	; 0x67
   83c16:	4b9f      	ldr	r3, [pc, #636]	; (83e94 <board_init+0x2ac>)
   83c18:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   83c1a:	2101      	movs	r1, #1
   83c1c:	2068      	movs	r0, #104	; 0x68
   83c1e:	4b9c      	ldr	r3, [pc, #624]	; (83e90 <board_init+0x2a8>)
   83c20:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   83c22:	2100      	movs	r1, #0
   83c24:	2068      	movs	r0, #104	; 0x68
   83c26:	4b9b      	ldr	r3, [pc, #620]	; (83e94 <board_init+0x2ac>)
   83c28:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   83c2a:	2101      	movs	r1, #1
   83c2c:	2069      	movs	r0, #105	; 0x69
   83c2e:	4b98      	ldr	r3, [pc, #608]	; (83e90 <board_init+0x2a8>)
   83c30:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   83c32:	2100      	movs	r1, #0
   83c34:	2069      	movs	r0, #105	; 0x69
   83c36:	4b97      	ldr	r3, [pc, #604]	; (83e94 <board_init+0x2ac>)
   83c38:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   83c3a:	2101      	movs	r1, #1
   83c3c:	2066      	movs	r0, #102	; 0x66
   83c3e:	4b94      	ldr	r3, [pc, #592]	; (83e90 <board_init+0x2a8>)
   83c40:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   83c42:	2100      	movs	r1, #0
   83c44:	2066      	movs	r0, #102	; 0x66
   83c46:	4b93      	ldr	r3, [pc, #588]	; (83e94 <board_init+0x2ac>)
   83c48:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   83c4a:	2100      	movs	r1, #0
   83c4c:	2060      	movs	r0, #96	; 0x60
   83c4e:	4b90      	ldr	r3, [pc, #576]	; (83e90 <board_init+0x2a8>)
   83c50:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83c52:	2188      	movs	r1, #136	; 0x88
   83c54:	2060      	movs	r0, #96	; 0x60
   83c56:	4b90      	ldr	r3, [pc, #576]	; (83e98 <board_init+0x2b0>)
   83c58:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   83c5a:	2100      	movs	r1, #0
   83c5c:	2061      	movs	r0, #97	; 0x61
   83c5e:	4b8c      	ldr	r3, [pc, #560]	; (83e90 <board_init+0x2a8>)
   83c60:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83c62:	2188      	movs	r1, #136	; 0x88
   83c64:	2061      	movs	r0, #97	; 0x61
   83c66:	4b8c      	ldr	r3, [pc, #560]	; (83e98 <board_init+0x2b0>)
   83c68:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   83c6a:	2100      	movs	r1, #0
   83c6c:	2062      	movs	r0, #98	; 0x62
   83c6e:	4b88      	ldr	r3, [pc, #544]	; (83e90 <board_init+0x2a8>)
   83c70:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83c72:	2188      	movs	r1, #136	; 0x88
   83c74:	2062      	movs	r0, #98	; 0x62
   83c76:	4b88      	ldr	r3, [pc, #544]	; (83e98 <board_init+0x2b0>)
   83c78:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   83c7a:	2100      	movs	r1, #0
   83c7c:	2063      	movs	r0, #99	; 0x63
   83c7e:	4b84      	ldr	r3, [pc, #528]	; (83e90 <board_init+0x2a8>)
   83c80:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83c82:	2188      	movs	r1, #136	; 0x88
   83c84:	2063      	movs	r0, #99	; 0x63
   83c86:	4b84      	ldr	r3, [pc, #528]	; (83e98 <board_init+0x2b0>)
   83c88:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   83c8a:	2100      	movs	r1, #0
   83c8c:	2064      	movs	r0, #100	; 0x64
   83c8e:	4b80      	ldr	r3, [pc, #512]	; (83e90 <board_init+0x2a8>)
   83c90:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83c92:	2188      	movs	r1, #136	; 0x88
   83c94:	2064      	movs	r0, #100	; 0x64
   83c96:	4b80      	ldr	r3, [pc, #512]	; (83e98 <board_init+0x2b0>)
   83c98:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   83c9a:	2100      	movs	r1, #0
   83c9c:	2065      	movs	r0, #101	; 0x65
   83c9e:	4b7c      	ldr	r3, [pc, #496]	; (83e90 <board_init+0x2a8>)
   83ca0:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83ca2:	2188      	movs	r1, #136	; 0x88
   83ca4:	2065      	movs	r0, #101	; 0x65
   83ca6:	4b7c      	ldr	r3, [pc, #496]	; (83e98 <board_init+0x2b0>)
   83ca8:	4798      	blx	r3
  
    /* Configure Motor pins */
    ioport_set_pin_mode(MOTOR_LEFT_L, IOPORT_MODE_MUX_B);
   83caa:	2101      	movs	r1, #1
   83cac:	2042      	movs	r0, #66	; 0x42
   83cae:	4b7a      	ldr	r3, [pc, #488]	; (83e98 <board_init+0x2b0>)
   83cb0:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_L);
   83cb2:	2042      	movs	r0, #66	; 0x42
   83cb4:	4b79      	ldr	r3, [pc, #484]	; (83e9c <board_init+0x2b4>)
   83cb6:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_LEFT_H, IOPORT_MODE_MUX_B);
   83cb8:	2101      	movs	r1, #1
   83cba:	2043      	movs	r0, #67	; 0x43
   83cbc:	4b76      	ldr	r3, [pc, #472]	; (83e98 <board_init+0x2b0>)
   83cbe:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_H);
   83cc0:	2043      	movs	r0, #67	; 0x43
   83cc2:	4b76      	ldr	r3, [pc, #472]	; (83e9c <board_init+0x2b4>)
   83cc4:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_L, IOPORT_MODE_MUX_B);
   83cc6:	2101      	movs	r1, #1
   83cc8:	2044      	movs	r0, #68	; 0x44
   83cca:	4b73      	ldr	r3, [pc, #460]	; (83e98 <board_init+0x2b0>)
   83ccc:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_L);
   83cce:	2044      	movs	r0, #68	; 0x44
   83cd0:	4b72      	ldr	r3, [pc, #456]	; (83e9c <board_init+0x2b4>)
   83cd2:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_H, IOPORT_MODE_MUX_B);
   83cd4:	2101      	movs	r1, #1
   83cd6:	2045      	movs	r0, #69	; 0x45
   83cd8:	4b6f      	ldr	r3, [pc, #444]	; (83e98 <board_init+0x2b0>)
   83cda:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_H);
   83cdc:	2045      	movs	r0, #69	; 0x45
   83cde:	4b6f      	ldr	r3, [pc, #444]	; (83e9c <board_init+0x2b4>)
   83ce0:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_L, IOPORT_MODE_MUX_B);
   83ce2:	2101      	movs	r1, #1
   83ce4:	2046      	movs	r0, #70	; 0x46
   83ce6:	4b6c      	ldr	r3, [pc, #432]	; (83e98 <board_init+0x2b0>)
   83ce8:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_L);
   83cea:	2046      	movs	r0, #70	; 0x46
   83cec:	4b6b      	ldr	r3, [pc, #428]	; (83e9c <board_init+0x2b4>)
   83cee:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_H, IOPORT_MODE_MUX_B);
   83cf0:	2101      	movs	r1, #1
   83cf2:	2047      	movs	r0, #71	; 0x47
   83cf4:	4b68      	ldr	r3, [pc, #416]	; (83e98 <board_init+0x2b0>)
   83cf6:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_H);
   83cf8:	2047      	movs	r0, #71	; 0x47
   83cfa:	4b68      	ldr	r3, [pc, #416]	; (83e9c <board_init+0x2b4>)
   83cfc:	4798      	blx	r3

    /* Configure Encoder pins */
    ioport_set_pin_mode(ENC_CLK_PIN, IOPORT_MODE_MUX_B);
   83cfe:	2101      	movs	r1, #1
   83d00:	2055      	movs	r0, #85	; 0x55
   83d02:	4b65      	ldr	r3, [pc, #404]	; (83e98 <board_init+0x2b0>)
   83d04:	4798      	blx	r3
    ioport_disable_pin(ENC_CLK_PIN);
   83d06:	2055      	movs	r0, #85	; 0x55
   83d08:	4b64      	ldr	r3, [pc, #400]	; (83e9c <board_init+0x2b4>)
   83d0a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LOAD, IOPORT_DIR_OUTPUT);
   83d0c:	2101      	movs	r1, #1
   83d0e:	2020      	movs	r0, #32
   83d10:	4b5f      	ldr	r3, [pc, #380]	; (83e90 <board_init+0x2a8>)
   83d12:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   83d14:	2101      	movs	r1, #1
   83d16:	2020      	movs	r0, #32
   83d18:	4b5e      	ldr	r3, [pc, #376]	; (83e94 <board_init+0x2ac>)
   83d1a:	4798      	blx	r3

    ioport_set_pin_dir(ENC_LEFT_A, IOPORT_DIR_INPUT);
   83d1c:	2100      	movs	r1, #0
   83d1e:	2058      	movs	r0, #88	; 0x58
   83d20:	4b5b      	ldr	r3, [pc, #364]	; (83e90 <board_init+0x2a8>)
   83d22:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_B, IOPORT_DIR_INPUT);
   83d24:	2100      	movs	r1, #0
   83d26:	2059      	movs	r0, #89	; 0x59
   83d28:	4b59      	ldr	r3, [pc, #356]	; (83e90 <board_init+0x2a8>)
   83d2a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_C, IOPORT_DIR_INPUT);
   83d2c:	2100      	movs	r1, #0
   83d2e:	205a      	movs	r0, #90	; 0x5a
   83d30:	4b57      	ldr	r3, [pc, #348]	; (83e90 <board_init+0x2a8>)
   83d32:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_D, IOPORT_DIR_INPUT);
   83d34:	2100      	movs	r1, #0
   83d36:	205b      	movs	r0, #91	; 0x5b
   83d38:	4b55      	ldr	r3, [pc, #340]	; (83e90 <board_init+0x2a8>)
   83d3a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_E, IOPORT_DIR_INPUT);
   83d3c:	2100      	movs	r1, #0
   83d3e:	205c      	movs	r0, #92	; 0x5c
   83d40:	4b53      	ldr	r3, [pc, #332]	; (83e90 <board_init+0x2a8>)
   83d42:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_F, IOPORT_DIR_INPUT);
   83d44:	2100      	movs	r1, #0
   83d46:	205d      	movs	r0, #93	; 0x5d
   83d48:	4b51      	ldr	r3, [pc, #324]	; (83e90 <board_init+0x2a8>)
   83d4a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_G, IOPORT_DIR_INPUT);
   83d4c:	2100      	movs	r1, #0
   83d4e:	205e      	movs	r0, #94	; 0x5e
   83d50:	4b4f      	ldr	r3, [pc, #316]	; (83e90 <board_init+0x2a8>)
   83d52:	4798      	blx	r3
    
    ioport_set_pin_dir(ENC_RIGHT_A, IOPORT_DIR_INPUT);
   83d54:	2100      	movs	r1, #0
   83d56:	2050      	movs	r0, #80	; 0x50
   83d58:	4b4d      	ldr	r3, [pc, #308]	; (83e90 <board_init+0x2a8>)
   83d5a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_B, IOPORT_DIR_INPUT);
   83d5c:	2100      	movs	r1, #0
   83d5e:	2051      	movs	r0, #81	; 0x51
   83d60:	4b4b      	ldr	r3, [pc, #300]	; (83e90 <board_init+0x2a8>)
   83d62:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_C, IOPORT_DIR_INPUT);
   83d64:	2100      	movs	r1, #0
   83d66:	2052      	movs	r0, #82	; 0x52
   83d68:	4b49      	ldr	r3, [pc, #292]	; (83e90 <board_init+0x2a8>)
   83d6a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_D, IOPORT_DIR_INPUT);
   83d6c:	2100      	movs	r1, #0
   83d6e:	2053      	movs	r0, #83	; 0x53
   83d70:	4b47      	ldr	r3, [pc, #284]	; (83e90 <board_init+0x2a8>)
   83d72:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_E, IOPORT_DIR_INPUT);
   83d74:	2100      	movs	r1, #0
   83d76:	2054      	movs	r0, #84	; 0x54
   83d78:	4b45      	ldr	r3, [pc, #276]	; (83e90 <board_init+0x2a8>)
   83d7a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_F, IOPORT_DIR_INPUT);
   83d7c:	2100      	movs	r1, #0
   83d7e:	2056      	movs	r0, #86	; 0x56
   83d80:	4b43      	ldr	r3, [pc, #268]	; (83e90 <board_init+0x2a8>)
   83d82:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_G, IOPORT_DIR_INPUT);
   83d84:	2100      	movs	r1, #0
   83d86:	2057      	movs	r0, #87	; 0x57
   83d88:	4b41      	ldr	r3, [pc, #260]	; (83e90 <board_init+0x2a8>)
   83d8a:	4798      	blx	r3
    
    ioport_set_pin_dir(ENC_REAR_A, IOPORT_DIR_INPUT);
   83d8c:	2100      	movs	r1, #0
   83d8e:	2041      	movs	r0, #65	; 0x41
   83d90:	4b3f      	ldr	r3, [pc, #252]	; (83e90 <board_init+0x2a8>)
   83d92:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_B, IOPORT_DIR_INPUT);
   83d94:	2100      	movs	r1, #0
   83d96:	204a      	movs	r0, #74	; 0x4a
   83d98:	4b3d      	ldr	r3, [pc, #244]	; (83e90 <board_init+0x2a8>)
   83d9a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_C, IOPORT_DIR_INPUT);
   83d9c:	2100      	movs	r1, #0
   83d9e:	204b      	movs	r0, #75	; 0x4b
   83da0:	4b3b      	ldr	r3, [pc, #236]	; (83e90 <board_init+0x2a8>)
   83da2:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_D, IOPORT_DIR_INPUT);
   83da4:	2100      	movs	r1, #0
   83da6:	204c      	movs	r0, #76	; 0x4c
   83da8:	4b39      	ldr	r3, [pc, #228]	; (83e90 <board_init+0x2a8>)
   83daa:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_E, IOPORT_DIR_INPUT);
   83dac:	2100      	movs	r1, #0
   83dae:	204d      	movs	r0, #77	; 0x4d
   83db0:	4b37      	ldr	r3, [pc, #220]	; (83e90 <board_init+0x2a8>)
   83db2:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_F, IOPORT_DIR_INPUT);
   83db4:	2100      	movs	r1, #0
   83db6:	204e      	movs	r0, #78	; 0x4e
   83db8:	4b35      	ldr	r3, [pc, #212]	; (83e90 <board_init+0x2a8>)
   83dba:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_G, IOPORT_DIR_INPUT);
   83dbc:	2100      	movs	r1, #0
   83dbe:	204f      	movs	r0, #79	; 0x4f
   83dc0:	4b33      	ldr	r3, [pc, #204]	; (83e90 <board_init+0x2a8>)
   83dc2:	4798      	blx	r3
  
    /* Configure Raspberry Pi GPIO pins */
    ioport_set_pin_dir(RPI1, IOPORT_DIR_OUTPUT);
   83dc4:	2101      	movs	r1, #1
   83dc6:	2001      	movs	r0, #1
   83dc8:	4b31      	ldr	r3, [pc, #196]	; (83e90 <board_init+0x2a8>)
   83dca:	4798      	blx	r3
    ioport_set_pin_level(RPI1, 1);
   83dcc:	2101      	movs	r1, #1
   83dce:	2001      	movs	r0, #1
   83dd0:	4b30      	ldr	r3, [pc, #192]	; (83e94 <board_init+0x2ac>)
   83dd2:	4798      	blx	r3
    ioport_set_pin_dir(RPI2, IOPORT_DIR_INPUT);
   83dd4:	2100      	movs	r1, #0
   83dd6:	2008      	movs	r0, #8
   83dd8:	4b2d      	ldr	r3, [pc, #180]	; (83e90 <board_init+0x2a8>)
   83dda:	4798      	blx	r3
    ioport_set_pin_dir(RPI3, IOPORT_DIR_INPUT);
   83ddc:	2100      	movs	r1, #0
   83dde:	2009      	movs	r0, #9
   83de0:	4b2b      	ldr	r3, [pc, #172]	; (83e90 <board_init+0x2a8>)
   83de2:	4798      	blx	r3
    ioport_set_pin_dir(RPI4, IOPORT_DIR_INPUT);
   83de4:	2100      	movs	r1, #0
   83de6:	2007      	movs	r0, #7
   83de8:	4b29      	ldr	r3, [pc, #164]	; (83e90 <board_init+0x2a8>)
   83dea:	4798      	blx	r3
    ioport_set_pin_dir(RPI5, IOPORT_DIR_INPUT);
   83dec:	2100      	movs	r1, #0
   83dee:	2005      	movs	r0, #5
   83df0:	4b27      	ldr	r3, [pc, #156]	; (83e90 <board_init+0x2a8>)
   83df2:	4798      	blx	r3
    ioport_set_pin_dir(RPI6, IOPORT_DIR_INPUT);
   83df4:	2100      	movs	r1, #0
   83df6:	2000      	movs	r0, #0
   83df8:	4b25      	ldr	r3, [pc, #148]	; (83e90 <board_init+0x2a8>)
   83dfa:	4798      	blx	r3
  
    /* Configure I2C pins */
    ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   83dfc:	2100      	movs	r1, #0
   83dfe:	2011      	movs	r0, #17
   83e00:	4b25      	ldr	r3, [pc, #148]	; (83e98 <board_init+0x2b0>)
   83e02:	4798      	blx	r3
    ioport_disable_pin(I2C0_DATA);
   83e04:	2011      	movs	r0, #17
   83e06:	4b25      	ldr	r3, [pc, #148]	; (83e9c <board_init+0x2b4>)
   83e08:	4798      	blx	r3
    ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   83e0a:	2100      	movs	r1, #0
   83e0c:	2012      	movs	r0, #18
   83e0e:	4b22      	ldr	r3, [pc, #136]	; (83e98 <board_init+0x2b0>)
   83e10:	4798      	blx	r3
    ioport_disable_pin(I2C0_CLK);
   83e12:	2012      	movs	r0, #18
   83e14:	4b21      	ldr	r3, [pc, #132]	; (83e9c <board_init+0x2b4>)
   83e16:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   83e18:	2100      	movs	r1, #0
   83e1a:	200c      	movs	r0, #12
   83e1c:	4b1e      	ldr	r3, [pc, #120]	; (83e98 <board_init+0x2b0>)
   83e1e:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   83e20:	200c      	movs	r0, #12
   83e22:	4b1e      	ldr	r3, [pc, #120]	; (83e9c <board_init+0x2b4>)
   83e24:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   83e26:	2100      	movs	r1, #0
   83e28:	200d      	movs	r0, #13
   83e2a:	4b1b      	ldr	r3, [pc, #108]	; (83e98 <board_init+0x2b0>)
   83e2c:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   83e2e:	200d      	movs	r0, #13
   83e30:	4b1a      	ldr	r3, [pc, #104]	; (83e9c <board_init+0x2b4>)
   83e32:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   83e34:	2100      	movs	r1, #0
   83e36:	2010      	movs	r0, #16
   83e38:	4b17      	ldr	r3, [pc, #92]	; (83e98 <board_init+0x2b0>)
   83e3a:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   83e3c:	2010      	movs	r0, #16
   83e3e:	4b17      	ldr	r3, [pc, #92]	; (83e9c <board_init+0x2b4>)
   83e40:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   83e42:	2100      	movs	r1, #0
   83e44:	200e      	movs	r0, #14
   83e46:	4b14      	ldr	r3, [pc, #80]	; (83e98 <board_init+0x2b0>)
   83e48:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   83e4a:	200e      	movs	r0, #14
   83e4c:	4b13      	ldr	r3, [pc, #76]	; (83e9c <board_init+0x2b4>)
   83e4e:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   83e50:	2100      	movs	r1, #0
   83e52:	2014      	movs	r0, #20
   83e54:	4b10      	ldr	r3, [pc, #64]	; (83e98 <board_init+0x2b0>)
   83e56:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   83e58:	2014      	movs	r0, #20
   83e5a:	4b10      	ldr	r3, [pc, #64]	; (83e9c <board_init+0x2b4>)
   83e5c:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   83e5e:	2100      	movs	r1, #0
   83e60:	2013      	movs	r0, #19
   83e62:	4b0d      	ldr	r3, [pc, #52]	; (83e98 <board_init+0x2b0>)
   83e64:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   83e66:	2013      	movs	r0, #19
   83e68:	4b0c      	ldr	r3, [pc, #48]	; (83e9c <board_init+0x2b4>)
   83e6a:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   83e6c:	2100      	movs	r1, #0
   83e6e:	2015      	movs	r0, #21
   83e70:	4b09      	ldr	r3, [pc, #36]	; (83e98 <board_init+0x2b0>)
   83e72:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   83e74:	2015      	movs	r0, #21
   83e76:	4b09      	ldr	r3, [pc, #36]	; (83e9c <board_init+0x2b4>)
   83e78:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   83e7a:	2100      	movs	r1, #0
   83e7c:	2016      	movs	r0, #22
   83e7e:	4b06      	ldr	r3, [pc, #24]	; (83e98 <board_init+0x2b0>)
   83e80:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   83e82:	2016      	movs	r0, #22
   83e84:	e00c      	b.n	83ea0 <board_init+0x2b8>
   83e86:	bf00      	nop
   83e88:	400e1a50 	.word	0x400e1a50
   83e8c:	000839b5 	.word	0x000839b5
   83e90:	00083af9 	.word	0x00083af9
   83e94:	00083b7f 	.word	0x00083b7f
   83e98:	00083a21 	.word	0x00083a21
   83e9c:	000839d9 	.word	0x000839d9
   83ea0:	4b17      	ldr	r3, [pc, #92]	; (83f00 <board_init+0x318>)
   83ea2:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   83ea4:	2100      	movs	r1, #0
   83ea6:	2017      	movs	r0, #23
   83ea8:	4b16      	ldr	r3, [pc, #88]	; (83f04 <board_init+0x31c>)
   83eaa:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   83eac:	2017      	movs	r0, #23
   83eae:	4b14      	ldr	r3, [pc, #80]	; (83f00 <board_init+0x318>)
   83eb0:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   83eb2:	2100      	movs	r1, #0
   83eb4:	2018      	movs	r0, #24
   83eb6:	4b13      	ldr	r3, [pc, #76]	; (83f04 <board_init+0x31c>)
   83eb8:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   83eba:	2018      	movs	r0, #24
   83ebc:	4b10      	ldr	r3, [pc, #64]	; (83f00 <board_init+0x318>)
   83ebe:	4798      	blx	r3


    /* Init PWM */
    pmc_enable_periph_clk(ID_PWM);
   83ec0:	2024      	movs	r0, #36	; 0x24
   83ec2:	4b11      	ldr	r3, [pc, #68]	; (83f08 <board_init+0x320>)
   83ec4:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_LEFT);
   83ec6:	2100      	movs	r1, #0
   83ec8:	4810      	ldr	r0, [pc, #64]	; (83f0c <board_init+0x324>)
   83eca:	4b11      	ldr	r3, [pc, #68]	; (83f10 <board_init+0x328>)
   83ecc:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_RIGHT);
   83ece:	2101      	movs	r1, #1
   83ed0:	480e      	ldr	r0, [pc, #56]	; (83f0c <board_init+0x324>)
   83ed2:	4b0f      	ldr	r3, [pc, #60]	; (83f10 <board_init+0x328>)
   83ed4:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_REAR);
   83ed6:	2102      	movs	r1, #2
   83ed8:	480c      	ldr	r0, [pc, #48]	; (83f0c <board_init+0x324>)
   83eda:	4b0d      	ldr	r3, [pc, #52]	; (83f10 <board_init+0x328>)
   83edc:	4798      	blx	r3
    pwm_clock_t clock_setting =
   83ede:	4b0d      	ldr	r3, [pc, #52]	; (83f14 <board_init+0x32c>)
   83ee0:	607b      	str	r3, [r7, #4]
   83ee2:	2300      	movs	r3, #0
   83ee4:	60bb      	str	r3, [r7, #8]
    {
        .ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
        .ul_clkb = 0,
        .ul_mck = sysclk_get_cpu_hz()
   83ee6:	4b0c      	ldr	r3, [pc, #48]	; (83f18 <board_init+0x330>)
   83ee8:	4798      	blx	r3
   83eea:	4603      	mov	r3, r0
    pwm_clock_t clock_setting =
   83eec:	60fb      	str	r3, [r7, #12]
    };
    pwm_init(PWM, &clock_setting);
   83eee:	1d3b      	adds	r3, r7, #4
   83ef0:	4619      	mov	r1, r3
   83ef2:	4806      	ldr	r0, [pc, #24]	; (83f0c <board_init+0x324>)
   83ef4:	4b09      	ldr	r3, [pc, #36]	; (83f1c <board_init+0x334>)
   83ef6:	4798      	blx	r3
}
   83ef8:	bf00      	nop
   83efa:	3710      	adds	r7, #16
   83efc:	46bd      	mov	sp, r7
   83efe:	bd80      	pop	{r7, pc}
   83f00:	000839d9 	.word	0x000839d9
   83f04:	00083a21 	.word	0x00083a21
   83f08:	00083875 	.word	0x00083875
   83f0c:	40094000 	.word	0x40094000
   83f10:	00080615 	.word	0x00080615
   83f14:	01312d00 	.word	0x01312d00
   83f18:	00083985 	.word	0x00083985
   83f1c:	000802e9 	.word	0x000802e9

00083f20 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83f20:	b480      	push	{r7}
   83f22:	af00      	add	r7, sp, #0
	while (1) {
   83f24:	e7fe      	b.n	83f24 <Dummy_Handler+0x4>
	...

00083f28 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83f28:	b580      	push	{r7, lr}
   83f2a:	b082      	sub	sp, #8
   83f2c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83f2e:	4b1e      	ldr	r3, [pc, #120]	; (83fa8 <Reset_Handler+0x80>)
   83f30:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83f32:	4b1e      	ldr	r3, [pc, #120]	; (83fac <Reset_Handler+0x84>)
   83f34:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83f36:	687a      	ldr	r2, [r7, #4]
   83f38:	683b      	ldr	r3, [r7, #0]
   83f3a:	429a      	cmp	r2, r3
   83f3c:	d00c      	beq.n	83f58 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83f3e:	e007      	b.n	83f50 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83f40:	683b      	ldr	r3, [r7, #0]
   83f42:	1d1a      	adds	r2, r3, #4
   83f44:	603a      	str	r2, [r7, #0]
   83f46:	687a      	ldr	r2, [r7, #4]
   83f48:	1d11      	adds	r1, r2, #4
   83f4a:	6079      	str	r1, [r7, #4]
   83f4c:	6812      	ldr	r2, [r2, #0]
   83f4e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   83f50:	683b      	ldr	r3, [r7, #0]
   83f52:	4a17      	ldr	r2, [pc, #92]	; (83fb0 <Reset_Handler+0x88>)
   83f54:	4293      	cmp	r3, r2
   83f56:	d3f3      	bcc.n	83f40 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83f58:	4b16      	ldr	r3, [pc, #88]	; (83fb4 <Reset_Handler+0x8c>)
   83f5a:	603b      	str	r3, [r7, #0]
   83f5c:	e004      	b.n	83f68 <Reset_Handler+0x40>
		*pDest++ = 0;
   83f5e:	683b      	ldr	r3, [r7, #0]
   83f60:	1d1a      	adds	r2, r3, #4
   83f62:	603a      	str	r2, [r7, #0]
   83f64:	2200      	movs	r2, #0
   83f66:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   83f68:	683b      	ldr	r3, [r7, #0]
   83f6a:	4a13      	ldr	r2, [pc, #76]	; (83fb8 <Reset_Handler+0x90>)
   83f6c:	4293      	cmp	r3, r2
   83f6e:	d3f6      	bcc.n	83f5e <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83f70:	4b12      	ldr	r3, [pc, #72]	; (83fbc <Reset_Handler+0x94>)
   83f72:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83f74:	4a12      	ldr	r2, [pc, #72]	; (83fc0 <Reset_Handler+0x98>)
   83f76:	687b      	ldr	r3, [r7, #4]
   83f78:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83f7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83f80:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   83f82:	687b      	ldr	r3, [r7, #4]
   83f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83f88:	d309      	bcc.n	83f9e <Reset_Handler+0x76>
   83f8a:	687b      	ldr	r3, [r7, #4]
   83f8c:	4a0d      	ldr	r2, [pc, #52]	; (83fc4 <Reset_Handler+0x9c>)
   83f8e:	4293      	cmp	r3, r2
   83f90:	d805      	bhi.n	83f9e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83f92:	4a0b      	ldr	r2, [pc, #44]	; (83fc0 <Reset_Handler+0x98>)
   83f94:	4b0a      	ldr	r3, [pc, #40]	; (83fc0 <Reset_Handler+0x98>)
   83f96:	689b      	ldr	r3, [r3, #8]
   83f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83f9c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83f9e:	4b0a      	ldr	r3, [pc, #40]	; (83fc8 <Reset_Handler+0xa0>)
   83fa0:	4798      	blx	r3

	/* Branch to main function */
	main();
   83fa2:	4b0a      	ldr	r3, [pc, #40]	; (83fcc <Reset_Handler+0xa4>)
   83fa4:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83fa6:	e7fe      	b.n	83fa6 <Reset_Handler+0x7e>
   83fa8:	000898e4 	.word	0x000898e4
   83fac:	20070000 	.word	0x20070000
   83fb0:	20070b50 	.word	0x20070b50
   83fb4:	20070b50 	.word	0x20070b50
   83fb8:	20070ff4 	.word	0x20070ff4
   83fbc:	00080000 	.word	0x00080000
   83fc0:	e000ed00 	.word	0xe000ed00
   83fc4:	200fffff 	.word	0x200fffff
   83fc8:	000853d1 	.word	0x000853d1
   83fcc:	000843a1 	.word	0x000843a1

00083fd0 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83fd0:	b480      	push	{r7}
   83fd2:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83fd4:	4b57      	ldr	r3, [pc, #348]	; (84134 <SystemCoreClockUpdate+0x164>)
   83fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83fd8:	f003 0303 	and.w	r3, r3, #3
   83fdc:	2b03      	cmp	r3, #3
   83fde:	f200 808a 	bhi.w	840f6 <SystemCoreClockUpdate+0x126>
   83fe2:	a201      	add	r2, pc, #4	; (adr r2, 83fe8 <SystemCoreClockUpdate+0x18>)
   83fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83fe8:	00083ff9 	.word	0x00083ff9
   83fec:	00084019 	.word	0x00084019
   83ff0:	00084069 	.word	0x00084069
   83ff4:	00084069 	.word	0x00084069
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83ff8:	4b4f      	ldr	r3, [pc, #316]	; (84138 <SystemCoreClockUpdate+0x168>)
   83ffa:	695b      	ldr	r3, [r3, #20]
   83ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   84000:	2b00      	cmp	r3, #0
   84002:	d004      	beq.n	8400e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   84004:	4b4d      	ldr	r3, [pc, #308]	; (8413c <SystemCoreClockUpdate+0x16c>)
   84006:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8400a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   8400c:	e073      	b.n	840f6 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8400e:	4b4b      	ldr	r3, [pc, #300]	; (8413c <SystemCoreClockUpdate+0x16c>)
   84010:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   84014:	601a      	str	r2, [r3, #0]
		break;
   84016:	e06e      	b.n	840f6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84018:	4b46      	ldr	r3, [pc, #280]	; (84134 <SystemCoreClockUpdate+0x164>)
   8401a:	6a1b      	ldr	r3, [r3, #32]
   8401c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   84020:	2b00      	cmp	r3, #0
   84022:	d003      	beq.n	8402c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84024:	4b45      	ldr	r3, [pc, #276]	; (8413c <SystemCoreClockUpdate+0x16c>)
   84026:	4a46      	ldr	r2, [pc, #280]	; (84140 <SystemCoreClockUpdate+0x170>)
   84028:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   8402a:	e064      	b.n	840f6 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8402c:	4b43      	ldr	r3, [pc, #268]	; (8413c <SystemCoreClockUpdate+0x16c>)
   8402e:	4a45      	ldr	r2, [pc, #276]	; (84144 <SystemCoreClockUpdate+0x174>)
   84030:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84032:	4b40      	ldr	r3, [pc, #256]	; (84134 <SystemCoreClockUpdate+0x164>)
   84034:	6a1b      	ldr	r3, [r3, #32]
   84036:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8403a:	2b10      	cmp	r3, #16
   8403c:	d004      	beq.n	84048 <SystemCoreClockUpdate+0x78>
   8403e:	2b20      	cmp	r3, #32
   84040:	d008      	beq.n	84054 <SystemCoreClockUpdate+0x84>
   84042:	2b00      	cmp	r3, #0
   84044:	d00e      	beq.n	84064 <SystemCoreClockUpdate+0x94>
				break;
   84046:	e00e      	b.n	84066 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   84048:	4b3c      	ldr	r3, [pc, #240]	; (8413c <SystemCoreClockUpdate+0x16c>)
   8404a:	681b      	ldr	r3, [r3, #0]
   8404c:	005b      	lsls	r3, r3, #1
   8404e:	4a3b      	ldr	r2, [pc, #236]	; (8413c <SystemCoreClockUpdate+0x16c>)
   84050:	6013      	str	r3, [r2, #0]
				break;
   84052:	e008      	b.n	84066 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   84054:	4b39      	ldr	r3, [pc, #228]	; (8413c <SystemCoreClockUpdate+0x16c>)
   84056:	681a      	ldr	r2, [r3, #0]
   84058:	4613      	mov	r3, r2
   8405a:	005b      	lsls	r3, r3, #1
   8405c:	4413      	add	r3, r2
   8405e:	4a37      	ldr	r2, [pc, #220]	; (8413c <SystemCoreClockUpdate+0x16c>)
   84060:	6013      	str	r3, [r2, #0]
				break;
   84062:	e000      	b.n	84066 <SystemCoreClockUpdate+0x96>
				break;
   84064:	bf00      	nop
		break;
   84066:	e046      	b.n	840f6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84068:	4b32      	ldr	r3, [pc, #200]	; (84134 <SystemCoreClockUpdate+0x164>)
   8406a:	6a1b      	ldr	r3, [r3, #32]
   8406c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   84070:	2b00      	cmp	r3, #0
   84072:	d003      	beq.n	8407c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84074:	4b31      	ldr	r3, [pc, #196]	; (8413c <SystemCoreClockUpdate+0x16c>)
   84076:	4a32      	ldr	r2, [pc, #200]	; (84140 <SystemCoreClockUpdate+0x170>)
   84078:	601a      	str	r2, [r3, #0]
   8407a:	e01c      	b.n	840b6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8407c:	4b2f      	ldr	r3, [pc, #188]	; (8413c <SystemCoreClockUpdate+0x16c>)
   8407e:	4a31      	ldr	r2, [pc, #196]	; (84144 <SystemCoreClockUpdate+0x174>)
   84080:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84082:	4b2c      	ldr	r3, [pc, #176]	; (84134 <SystemCoreClockUpdate+0x164>)
   84084:	6a1b      	ldr	r3, [r3, #32]
   84086:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8408a:	2b10      	cmp	r3, #16
   8408c:	d004      	beq.n	84098 <SystemCoreClockUpdate+0xc8>
   8408e:	2b20      	cmp	r3, #32
   84090:	d008      	beq.n	840a4 <SystemCoreClockUpdate+0xd4>
   84092:	2b00      	cmp	r3, #0
   84094:	d00e      	beq.n	840b4 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   84096:	e00e      	b.n	840b6 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   84098:	4b28      	ldr	r3, [pc, #160]	; (8413c <SystemCoreClockUpdate+0x16c>)
   8409a:	681b      	ldr	r3, [r3, #0]
   8409c:	005b      	lsls	r3, r3, #1
   8409e:	4a27      	ldr	r2, [pc, #156]	; (8413c <SystemCoreClockUpdate+0x16c>)
   840a0:	6013      	str	r3, [r2, #0]
				break;
   840a2:	e008      	b.n	840b6 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   840a4:	4b25      	ldr	r3, [pc, #148]	; (8413c <SystemCoreClockUpdate+0x16c>)
   840a6:	681a      	ldr	r2, [r3, #0]
   840a8:	4613      	mov	r3, r2
   840aa:	005b      	lsls	r3, r3, #1
   840ac:	4413      	add	r3, r2
   840ae:	4a23      	ldr	r2, [pc, #140]	; (8413c <SystemCoreClockUpdate+0x16c>)
   840b0:	6013      	str	r3, [r2, #0]
				break;
   840b2:	e000      	b.n	840b6 <SystemCoreClockUpdate+0xe6>
				break;
   840b4:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   840b6:	4b1f      	ldr	r3, [pc, #124]	; (84134 <SystemCoreClockUpdate+0x164>)
   840b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   840ba:	f003 0303 	and.w	r3, r3, #3
   840be:	2b02      	cmp	r3, #2
   840c0:	d115      	bne.n	840ee <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   840c2:	4b1c      	ldr	r3, [pc, #112]	; (84134 <SystemCoreClockUpdate+0x164>)
   840c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   840c6:	0c1b      	lsrs	r3, r3, #16
   840c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   840cc:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   840ce:	4a1b      	ldr	r2, [pc, #108]	; (8413c <SystemCoreClockUpdate+0x16c>)
   840d0:	6812      	ldr	r2, [r2, #0]
   840d2:	fb02 f303 	mul.w	r3, r2, r3
   840d6:	4a19      	ldr	r2, [pc, #100]	; (8413c <SystemCoreClockUpdate+0x16c>)
   840d8:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   840da:	4b16      	ldr	r3, [pc, #88]	; (84134 <SystemCoreClockUpdate+0x164>)
   840dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   840de:	b2db      	uxtb	r3, r3
   840e0:	4a16      	ldr	r2, [pc, #88]	; (8413c <SystemCoreClockUpdate+0x16c>)
   840e2:	6812      	ldr	r2, [r2, #0]
   840e4:	fbb2 f3f3 	udiv	r3, r2, r3
   840e8:	4a14      	ldr	r2, [pc, #80]	; (8413c <SystemCoreClockUpdate+0x16c>)
   840ea:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   840ec:	e002      	b.n	840f4 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   840ee:	4b13      	ldr	r3, [pc, #76]	; (8413c <SystemCoreClockUpdate+0x16c>)
   840f0:	4a15      	ldr	r2, [pc, #84]	; (84148 <SystemCoreClockUpdate+0x178>)
   840f2:	601a      	str	r2, [r3, #0]
		break;
   840f4:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   840f6:	4b0f      	ldr	r3, [pc, #60]	; (84134 <SystemCoreClockUpdate+0x164>)
   840f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   840fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   840fe:	2b70      	cmp	r3, #112	; 0x70
   84100:	d108      	bne.n	84114 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   84102:	4b0e      	ldr	r3, [pc, #56]	; (8413c <SystemCoreClockUpdate+0x16c>)
   84104:	681b      	ldr	r3, [r3, #0]
   84106:	4a11      	ldr	r2, [pc, #68]	; (8414c <SystemCoreClockUpdate+0x17c>)
   84108:	fba2 2303 	umull	r2, r3, r2, r3
   8410c:	085b      	lsrs	r3, r3, #1
   8410e:	4a0b      	ldr	r2, [pc, #44]	; (8413c <SystemCoreClockUpdate+0x16c>)
   84110:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   84112:	e00a      	b.n	8412a <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   84114:	4b07      	ldr	r3, [pc, #28]	; (84134 <SystemCoreClockUpdate+0x164>)
   84116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84118:	091b      	lsrs	r3, r3, #4
   8411a:	f003 0307 	and.w	r3, r3, #7
   8411e:	4a07      	ldr	r2, [pc, #28]	; (8413c <SystemCoreClockUpdate+0x16c>)
   84120:	6812      	ldr	r2, [r2, #0]
   84122:	fa22 f303 	lsr.w	r3, r2, r3
   84126:	4a05      	ldr	r2, [pc, #20]	; (8413c <SystemCoreClockUpdate+0x16c>)
   84128:	6013      	str	r3, [r2, #0]
}
   8412a:	bf00      	nop
   8412c:	46bd      	mov	sp, r7
   8412e:	bc80      	pop	{r7}
   84130:	4770      	bx	lr
   84132:	bf00      	nop
   84134:	400e0600 	.word	0x400e0600
   84138:	400e1a10 	.word	0x400e1a10
   8413c:	2007019c 	.word	0x2007019c
   84140:	00b71b00 	.word	0x00b71b00
   84144:	003d0900 	.word	0x003d0900
   84148:	0e4e1c00 	.word	0x0e4e1c00
   8414c:	aaaaaaab 	.word	0xaaaaaaab

00084150 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   84150:	b480      	push	{r7}
   84152:	b085      	sub	sp, #20
   84154:	af00      	add	r7, sp, #0
   84156:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   84158:	4b10      	ldr	r3, [pc, #64]	; (8419c <_sbrk+0x4c>)
   8415a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   8415c:	4b10      	ldr	r3, [pc, #64]	; (841a0 <_sbrk+0x50>)
   8415e:	681b      	ldr	r3, [r3, #0]
   84160:	2b00      	cmp	r3, #0
   84162:	d102      	bne.n	8416a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   84164:	4b0e      	ldr	r3, [pc, #56]	; (841a0 <_sbrk+0x50>)
   84166:	4a0f      	ldr	r2, [pc, #60]	; (841a4 <_sbrk+0x54>)
   84168:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8416a:	4b0d      	ldr	r3, [pc, #52]	; (841a0 <_sbrk+0x50>)
   8416c:	681b      	ldr	r3, [r3, #0]
   8416e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   84170:	68ba      	ldr	r2, [r7, #8]
   84172:	687b      	ldr	r3, [r7, #4]
   84174:	441a      	add	r2, r3
   84176:	68fb      	ldr	r3, [r7, #12]
   84178:	429a      	cmp	r2, r3
   8417a:	dd02      	ble.n	84182 <_sbrk+0x32>
		return (caddr_t) -1;	
   8417c:	f04f 33ff 	mov.w	r3, #4294967295
   84180:	e006      	b.n	84190 <_sbrk+0x40>
	}

	heap += incr;
   84182:	4b07      	ldr	r3, [pc, #28]	; (841a0 <_sbrk+0x50>)
   84184:	681a      	ldr	r2, [r3, #0]
   84186:	687b      	ldr	r3, [r7, #4]
   84188:	4413      	add	r3, r2
   8418a:	4a05      	ldr	r2, [pc, #20]	; (841a0 <_sbrk+0x50>)
   8418c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8418e:	68bb      	ldr	r3, [r7, #8]
}
   84190:	4618      	mov	r0, r3
   84192:	3714      	adds	r7, #20
   84194:	46bd      	mov	sp, r7
   84196:	bc80      	pop	{r7}
   84198:	4770      	bx	lr
   8419a:	bf00      	nop
   8419c:	20087ffc 	.word	0x20087ffc
   841a0:	20070dcc 	.word	0x20070dcc
   841a4:	20072ff8 	.word	0x20072ff8

000841a8 <NVIC_SetPriority>:
{
   841a8:	b480      	push	{r7}
   841aa:	b083      	sub	sp, #12
   841ac:	af00      	add	r7, sp, #0
   841ae:	4603      	mov	r3, r0
   841b0:	6039      	str	r1, [r7, #0]
   841b2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   841b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   841b8:	2b00      	cmp	r3, #0
   841ba:	da0b      	bge.n	841d4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   841bc:	490d      	ldr	r1, [pc, #52]	; (841f4 <NVIC_SetPriority+0x4c>)
   841be:	79fb      	ldrb	r3, [r7, #7]
   841c0:	f003 030f 	and.w	r3, r3, #15
   841c4:	3b04      	subs	r3, #4
   841c6:	683a      	ldr	r2, [r7, #0]
   841c8:	b2d2      	uxtb	r2, r2
   841ca:	0112      	lsls	r2, r2, #4
   841cc:	b2d2      	uxtb	r2, r2
   841ce:	440b      	add	r3, r1
   841d0:	761a      	strb	r2, [r3, #24]
}
   841d2:	e009      	b.n	841e8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   841d4:	4908      	ldr	r1, [pc, #32]	; (841f8 <NVIC_SetPriority+0x50>)
   841d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   841da:	683a      	ldr	r2, [r7, #0]
   841dc:	b2d2      	uxtb	r2, r2
   841de:	0112      	lsls	r2, r2, #4
   841e0:	b2d2      	uxtb	r2, r2
   841e2:	440b      	add	r3, r1
   841e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   841e8:	bf00      	nop
   841ea:	370c      	adds	r7, #12
   841ec:	46bd      	mov	sp, r7
   841ee:	bc80      	pop	{r7}
   841f0:	4770      	bx	lr
   841f2:	bf00      	nop
   841f4:	e000ed00 	.word	0xe000ed00
   841f8:	e000e100 	.word	0xe000e100

000841fc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   841fc:	b580      	push	{r7, lr}
   841fe:	b082      	sub	sp, #8
   84200:	af00      	add	r7, sp, #0
   84202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   84204:	687b      	ldr	r3, [r7, #4]
   84206:	3b01      	subs	r3, #1
   84208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   8420c:	d301      	bcc.n	84212 <SysTick_Config+0x16>
   8420e:	2301      	movs	r3, #1
   84210:	e00f      	b.n	84232 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   84212:	4a0a      	ldr	r2, [pc, #40]	; (8423c <SysTick_Config+0x40>)
   84214:	687b      	ldr	r3, [r7, #4]
   84216:	3b01      	subs	r3, #1
   84218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   8421a:	210f      	movs	r1, #15
   8421c:	f04f 30ff 	mov.w	r0, #4294967295
   84220:	4b07      	ldr	r3, [pc, #28]	; (84240 <SysTick_Config+0x44>)
   84222:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   84224:	4b05      	ldr	r3, [pc, #20]	; (8423c <SysTick_Config+0x40>)
   84226:	2200      	movs	r2, #0
   84228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   8422a:	4b04      	ldr	r3, [pc, #16]	; (8423c <SysTick_Config+0x40>)
   8422c:	2207      	movs	r2, #7
   8422e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   84230:	2300      	movs	r3, #0
}
   84232:	4618      	mov	r0, r3
   84234:	3708      	adds	r7, #8
   84236:	46bd      	mov	sp, r7
   84238:	bd80      	pop	{r7, pc}
   8423a:	bf00      	nop
   8423c:	e000e010 	.word	0xe000e010
   84240:	000841a9 	.word	0x000841a9

00084244 <osc_get_rate>:
{
   84244:	b480      	push	{r7}
   84246:	b083      	sub	sp, #12
   84248:	af00      	add	r7, sp, #0
   8424a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8424c:	687b      	ldr	r3, [r7, #4]
   8424e:	2b07      	cmp	r3, #7
   84250:	d825      	bhi.n	8429e <osc_get_rate+0x5a>
   84252:	a201      	add	r2, pc, #4	; (adr r2, 84258 <osc_get_rate+0x14>)
   84254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84258:	00084279 	.word	0x00084279
   8425c:	0008427f 	.word	0x0008427f
   84260:	00084285 	.word	0x00084285
   84264:	0008428b 	.word	0x0008428b
   84268:	0008428f 	.word	0x0008428f
   8426c:	00084293 	.word	0x00084293
   84270:	00084297 	.word	0x00084297
   84274:	0008429b 	.word	0x0008429b
		return OSC_SLCK_32K_RC_HZ;
   84278:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8427c:	e010      	b.n	842a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8427e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84282:	e00d      	b.n	842a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   84284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84288:	e00a      	b.n	842a0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   8428a:	4b08      	ldr	r3, [pc, #32]	; (842ac <osc_get_rate+0x68>)
   8428c:	e008      	b.n	842a0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8428e:	4b08      	ldr	r3, [pc, #32]	; (842b0 <osc_get_rate+0x6c>)
   84290:	e006      	b.n	842a0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   84292:	4b08      	ldr	r3, [pc, #32]	; (842b4 <osc_get_rate+0x70>)
   84294:	e004      	b.n	842a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   84296:	4b07      	ldr	r3, [pc, #28]	; (842b4 <osc_get_rate+0x70>)
   84298:	e002      	b.n	842a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   8429a:	4b06      	ldr	r3, [pc, #24]	; (842b4 <osc_get_rate+0x70>)
   8429c:	e000      	b.n	842a0 <osc_get_rate+0x5c>
	return 0;
   8429e:	2300      	movs	r3, #0
}
   842a0:	4618      	mov	r0, r3
   842a2:	370c      	adds	r7, #12
   842a4:	46bd      	mov	sp, r7
   842a6:	bc80      	pop	{r7}
   842a8:	4770      	bx	lr
   842aa:	bf00      	nop
   842ac:	003d0900 	.word	0x003d0900
   842b0:	007a1200 	.word	0x007a1200
   842b4:	00b71b00 	.word	0x00b71b00

000842b8 <sysclk_get_main_hz>:
{
   842b8:	b580      	push	{r7, lr}
   842ba:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   842bc:	2006      	movs	r0, #6
   842be:	4b04      	ldr	r3, [pc, #16]	; (842d0 <sysclk_get_main_hz+0x18>)
   842c0:	4798      	blx	r3
   842c2:	4602      	mov	r2, r0
   842c4:	4613      	mov	r3, r2
   842c6:	00db      	lsls	r3, r3, #3
   842c8:	1a9b      	subs	r3, r3, r2
   842ca:	005b      	lsls	r3, r3, #1
}
   842cc:	4618      	mov	r0, r3
   842ce:	bd80      	pop	{r7, pc}
   842d0:	00084245 	.word	0x00084245

000842d4 <sysclk_get_cpu_hz>:
{
   842d4:	b580      	push	{r7, lr}
   842d6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   842d8:	4b02      	ldr	r3, [pc, #8]	; (842e4 <sysclk_get_cpu_hz+0x10>)
   842da:	4798      	blx	r3
   842dc:	4603      	mov	r3, r0
   842de:	085b      	lsrs	r3, r3, #1
}
   842e0:	4618      	mov	r0, r3
   842e2:	bd80      	pop	{r7, pc}
   842e4:	000842b9 	.word	0x000842b9

000842e8 <ioport_set_pin_level>:
{
   842e8:	b480      	push	{r7}
   842ea:	b08b      	sub	sp, #44	; 0x2c
   842ec:	af00      	add	r7, sp, #0
   842ee:	6078      	str	r0, [r7, #4]
   842f0:	460b      	mov	r3, r1
   842f2:	70fb      	strb	r3, [r7, #3]
   842f4:	687b      	ldr	r3, [r7, #4]
   842f6:	627b      	str	r3, [r7, #36]	; 0x24
   842f8:	78fb      	ldrb	r3, [r7, #3]
   842fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   842fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84300:	61fb      	str	r3, [r7, #28]
   84302:	69fb      	ldr	r3, [r7, #28]
   84304:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   84306:	69bb      	ldr	r3, [r7, #24]
   84308:	095b      	lsrs	r3, r3, #5
   8430a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8430c:	697b      	ldr	r3, [r7, #20]
   8430e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84312:	f203 7307 	addw	r3, r3, #1799	; 0x707
   84316:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   84318:	613b      	str	r3, [r7, #16]
	if (level) {
   8431a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8431e:	2b00      	cmp	r3, #0
   84320:	d009      	beq.n	84336 <ioport_set_pin_level+0x4e>
   84322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84324:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   84326:	68fb      	ldr	r3, [r7, #12]
   84328:	f003 031f 	and.w	r3, r3, #31
   8432c:	2201      	movs	r2, #1
   8432e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   84330:	693b      	ldr	r3, [r7, #16]
   84332:	631a      	str	r2, [r3, #48]	; 0x30
}
   84334:	e008      	b.n	84348 <ioport_set_pin_level+0x60>
   84336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84338:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   8433a:	68bb      	ldr	r3, [r7, #8]
   8433c:	f003 031f 	and.w	r3, r3, #31
   84340:	2201      	movs	r2, #1
   84342:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   84344:	693b      	ldr	r3, [r7, #16]
   84346:	635a      	str	r2, [r3, #52]	; 0x34
   84348:	bf00      	nop
   8434a:	372c      	adds	r7, #44	; 0x2c
   8434c:	46bd      	mov	sp, r7
   8434e:	bc80      	pop	{r7}
   84350:	4770      	bx	lr

00084352 <ioport_get_pin_level>:
{
   84352:	b480      	push	{r7}
   84354:	b089      	sub	sp, #36	; 0x24
   84356:	af00      	add	r7, sp, #0
   84358:	6078      	str	r0, [r7, #4]
   8435a:	687b      	ldr	r3, [r7, #4]
   8435c:	61fb      	str	r3, [r7, #28]
   8435e:	69fb      	ldr	r3, [r7, #28]
   84360:	61bb      	str	r3, [r7, #24]
   84362:	69bb      	ldr	r3, [r7, #24]
   84364:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   84366:	697b      	ldr	r3, [r7, #20]
   84368:	095b      	lsrs	r3, r3, #5
   8436a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8436c:	693b      	ldr	r3, [r7, #16]
   8436e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84372:	f203 7307 	addw	r3, r3, #1799	; 0x707
   84376:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   84378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   8437a:	69fb      	ldr	r3, [r7, #28]
   8437c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8437e:	68fb      	ldr	r3, [r7, #12]
   84380:	f003 031f 	and.w	r3, r3, #31
   84384:	2101      	movs	r1, #1
   84386:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8438a:	4013      	ands	r3, r2
   8438c:	2b00      	cmp	r3, #0
   8438e:	bf14      	ite	ne
   84390:	2301      	movne	r3, #1
   84392:	2300      	moveq	r3, #0
   84394:	b2db      	uxtb	r3, r3
}
   84396:	4618      	mov	r0, r3
   84398:	3724      	adds	r7, #36	; 0x24
   8439a:	46bd      	mov	sp, r7
   8439c:	bc80      	pop	{r7}
   8439e:	4770      	bx	lr

000843a0 <main>:

void noOS_bootup_sequence(void);
void set_led(ioport_pin_t pin, Bool level);

int main(void)
{
   843a0:	b580      	push	{r7, lr}
   843a2:	b082      	sub	sp, #8
   843a4:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   843a6:	4b1a      	ldr	r3, [pc, #104]	; (84410 <main+0x70>)
   843a8:	4798      	blx	r3
    board_init();
   843aa:	4b1a      	ldr	r3, [pc, #104]	; (84414 <main+0x74>)
   843ac:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   843ae:	4b1a      	ldr	r3, [pc, #104]	; (84418 <main+0x78>)
   843b0:	4798      	blx	r3
   843b2:	4602      	mov	r2, r0
   843b4:	4b19      	ldr	r3, [pc, #100]	; (8441c <main+0x7c>)
   843b6:	fba3 2302 	umull	r2, r3, r3, r2
   843ba:	099b      	lsrs	r3, r3, #6
   843bc:	4618      	mov	r0, r3
   843be:	4b18      	ldr	r3, [pc, #96]	; (84420 <main+0x80>)
   843c0:	4798      	blx	r3
    
    motor_init();
   843c2:	4b18      	ldr	r3, [pc, #96]	; (84424 <main+0x84>)
   843c4:	4798      	blx	r3

    spi_init();
   843c6:	4b18      	ldr	r3, [pc, #96]	; (84428 <main+0x88>)
   843c8:	4798      	blx	r3
    
    lcd_init();
   843ca:	4b18      	ldr	r3, [pc, #96]	; (8442c <main+0x8c>)
   843cc:	4798      	blx	r3
    //compass_init();
    
    noOS_bootup_sequence();
   843ce:	4b18      	ldr	r3, [pc, #96]	; (84430 <main+0x90>)
   843d0:	4798      	blx	r3

    enable_motor();
   843d2:	4b18      	ldr	r3, [pc, #96]	; (84434 <main+0x94>)
   843d4:	4798      	blx	r3

    while (1)
    {
        update_comm();
   843d6:	4b18      	ldr	r3, [pc, #96]	; (84438 <main+0x98>)
   843d8:	4798      	blx	r3
        update_heartbeat();
   843da:	4b18      	ldr	r3, [pc, #96]	; (8443c <main+0x9c>)
   843dc:	4798      	blx	r3
        //check_battery();
        
        if (stm.ibit.heartbeat)
   843de:	4b18      	ldr	r3, [pc, #96]	; (84440 <main+0xa0>)
   843e0:	781b      	ldrb	r3, [r3, #0]
   843e2:	f003 0301 	and.w	r3, r3, #1
   843e6:	b2db      	uxtb	r3, r3
   843e8:	2b00      	cmp	r3, #0
   843ea:	d004      	beq.n	843f6 <main+0x56>
        {
            set_led(LED_M2, 1);
   843ec:	2101      	movs	r1, #1
   843ee:	2068      	movs	r0, #104	; 0x68
   843f0:	4b14      	ldr	r3, [pc, #80]	; (84444 <main+0xa4>)
   843f2:	4798      	blx	r3
   843f4:	e003      	b.n	843fe <main+0x5e>
        }
        else
        {
            set_led(LED_M2, 0);
   843f6:	2100      	movs	r1, #0
   843f8:	2068      	movs	r0, #104	; 0x68
   843fa:	4b12      	ldr	r3, [pc, #72]	; (84444 <main+0xa4>)
   843fc:	4798      	blx	r3
        }

        //update_motor(1, 1, 0);

        act_event = button_events();
   843fe:	4b12      	ldr	r3, [pc, #72]	; (84448 <main+0xa8>)
   84400:	4798      	blx	r3
   84402:	4603      	mov	r3, r0
   84404:	71fb      	strb	r3, [r7, #7]
        menu(act_event);
   84406:	79fb      	ldrb	r3, [r7, #7]
   84408:	4618      	mov	r0, r3
   8440a:	4b10      	ldr	r3, [pc, #64]	; (8444c <main+0xac>)
   8440c:	4798      	blx	r3
        update_comm();
   8440e:	e7e2      	b.n	843d6 <main+0x36>
   84410:	00083381 	.word	0x00083381
   84414:	00083be9 	.word	0x00083be9
   84418:	000842d5 	.word	0x000842d5
   8441c:	10624dd3 	.word	0x10624dd3
   84420:	000841fd 	.word	0x000841fd
   84424:	000828a9 	.word	0x000828a9
   84428:	00080a8d 	.word	0x00080a8d
   8442c:	00081511 	.word	0x00081511
   84430:	00084451 	.word	0x00084451
   84434:	00082a91 	.word	0x00082a91
   84438:	00082ef5 	.word	0x00082ef5
   8443c:	00082fe9 	.word	0x00082fe9
   84440:	20070e10 	.word	0x20070e10
   84444:	00084605 	.word	0x00084605
   84448:	000824e5 	.word	0x000824e5
   8444c:	00081b55 	.word	0x00081b55

00084450 <noOS_bootup_sequence>:
    }
}

void noOS_bootup_sequence(void)
{
   84450:	b580      	push	{r7, lr}
   84452:	b082      	sub	sp, #8
   84454:	af00      	add	r7, sp, #0
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   84456:	e072      	b.n	8453e <noOS_bootup_sequence+0xee>
    {
        if (getTicks() >= (ticks_blink_update + 800))
   84458:	4b5e      	ldr	r3, [pc, #376]	; (845d4 <noOS_bootup_sequence+0x184>)
   8445a:	4798      	blx	r3
   8445c:	4602      	mov	r2, r0
   8445e:	4b5e      	ldr	r3, [pc, #376]	; (845d8 <noOS_bootup_sequence+0x188>)
   84460:	681b      	ldr	r3, [r3, #0]
   84462:	f503 7348 	add.w	r3, r3, #800	; 0x320
   84466:	429a      	cmp	r2, r3
   84468:	d31a      	bcc.n	844a0 <noOS_bootup_sequence+0x50>
        {
            ticks_blink_update = getTicks();
   8446a:	4b5a      	ldr	r3, [pc, #360]	; (845d4 <noOS_bootup_sequence+0x184>)
   8446c:	4798      	blx	r3
   8446e:	4602      	mov	r2, r0
   84470:	4b59      	ldr	r3, [pc, #356]	; (845d8 <noOS_bootup_sequence+0x188>)
   84472:	601a      	str	r2, [r3, #0]
            
            if (blink_level)
   84474:	4b59      	ldr	r3, [pc, #356]	; (845dc <noOS_bootup_sequence+0x18c>)
   84476:	781b      	ldrb	r3, [r3, #0]
   84478:	2b00      	cmp	r3, #0
   8447a:	d003      	beq.n	84484 <noOS_bootup_sequence+0x34>
            {
                blink_level = 0;
   8447c:	4b57      	ldr	r3, [pc, #348]	; (845dc <noOS_bootup_sequence+0x18c>)
   8447e:	2200      	movs	r2, #0
   84480:	701a      	strb	r2, [r3, #0]
   84482:	e002      	b.n	8448a <noOS_bootup_sequence+0x3a>
            }
            else
            {
                blink_level = 1;
   84484:	4b55      	ldr	r3, [pc, #340]	; (845dc <noOS_bootup_sequence+0x18c>)
   84486:	2201      	movs	r2, #1
   84488:	701a      	strb	r2, [r3, #0]
            }
            
            ioport_set_pin_level(LED_BAT, blink_level);
   8448a:	4b54      	ldr	r3, [pc, #336]	; (845dc <noOS_bootup_sequence+0x18c>)
   8448c:	781b      	ldrb	r3, [r3, #0]
   8448e:	2b00      	cmp	r3, #0
   84490:	bf14      	ite	ne
   84492:	2301      	movne	r3, #1
   84494:	2300      	moveq	r3, #0
   84496:	b2db      	uxtb	r3, r3
   84498:	4619      	mov	r1, r3
   8449a:	2066      	movs	r0, #102	; 0x66
   8449c:	4b50      	ldr	r3, [pc, #320]	; (845e0 <noOS_bootup_sequence+0x190>)
   8449e:	4798      	blx	r3
        }
        
        if (getTicks() >= (ticks_dot_update + 500))
   844a0:	4b4c      	ldr	r3, [pc, #304]	; (845d4 <noOS_bootup_sequence+0x184>)
   844a2:	4798      	blx	r3
   844a4:	4602      	mov	r2, r0
   844a6:	4b4f      	ldr	r3, [pc, #316]	; (845e4 <noOS_bootup_sequence+0x194>)
   844a8:	681b      	ldr	r3, [r3, #0]
   844aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   844ae:	429a      	cmp	r2, r3
   844b0:	d315      	bcc.n	844de <noOS_bootup_sequence+0x8e>
        {
            ticks_dot_update = getTicks();
   844b2:	4b48      	ldr	r3, [pc, #288]	; (845d4 <noOS_bootup_sequence+0x184>)
   844b4:	4798      	blx	r3
   844b6:	4602      	mov	r2, r0
   844b8:	4b4a      	ldr	r3, [pc, #296]	; (845e4 <noOS_bootup_sequence+0x194>)
   844ba:	601a      	str	r2, [r3, #0]
            
            if (dots < 3)
   844bc:	4b4a      	ldr	r3, [pc, #296]	; (845e8 <noOS_bootup_sequence+0x198>)
   844be:	781b      	ldrb	r3, [r3, #0]
   844c0:	2b02      	cmp	r3, #2
   844c2:	d806      	bhi.n	844d2 <noOS_bootup_sequence+0x82>
            {
                dots++;
   844c4:	4b48      	ldr	r3, [pc, #288]	; (845e8 <noOS_bootup_sequence+0x198>)
   844c6:	781b      	ldrb	r3, [r3, #0]
   844c8:	3301      	adds	r3, #1
   844ca:	b2da      	uxtb	r2, r3
   844cc:	4b46      	ldr	r3, [pc, #280]	; (845e8 <noOS_bootup_sequence+0x198>)
   844ce:	701a      	strb	r2, [r3, #0]
   844d0:	e002      	b.n	844d8 <noOS_bootup_sequence+0x88>
            }
            else
            {
                dots = 0;
   844d2:	4b45      	ldr	r3, [pc, #276]	; (845e8 <noOS_bootup_sequence+0x198>)
   844d4:	2200      	movs	r2, #0
   844d6:	701a      	strb	r2, [r3, #0]
            }
            
            update_dots = 1;
   844d8:	4b44      	ldr	r3, [pc, #272]	; (845ec <noOS_bootup_sequence+0x19c>)
   844da:	2201      	movs	r2, #1
   844dc:	701a      	strb	r2, [r3, #0]
        }
        
        if (update_dots)
   844de:	4b43      	ldr	r3, [pc, #268]	; (845ec <noOS_bootup_sequence+0x19c>)
   844e0:	781b      	ldrb	r3, [r3, #0]
   844e2:	2b00      	cmp	r3, #0
   844e4:	d02b      	beq.n	8453e <noOS_bootup_sequence+0xee>
        {
            update_dots = 0;
   844e6:	4b41      	ldr	r3, [pc, #260]	; (845ec <noOS_bootup_sequence+0x19c>)
   844e8:	2200      	movs	r2, #0
   844ea:	701a      	strb	r2, [r3, #0]
            
            switch (dots)
   844ec:	4b3e      	ldr	r3, [pc, #248]	; (845e8 <noOS_bootup_sequence+0x198>)
   844ee:	781b      	ldrb	r3, [r3, #0]
   844f0:	2b03      	cmp	r3, #3
   844f2:	d823      	bhi.n	8453c <noOS_bootup_sequence+0xec>
   844f4:	a201      	add	r2, pc, #4	; (adr r2, 844fc <noOS_bootup_sequence+0xac>)
   844f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   844fa:	bf00      	nop
   844fc:	0008450d 	.word	0x0008450d
   84500:	00084519 	.word	0x00084519
   84504:	00084525 	.word	0x00084525
   84508:	00084531 	.word	0x00084531
            {
                case 0:
                lcd_print_s(2, 2, "booting noOS   ");
   8450c:	4a38      	ldr	r2, [pc, #224]	; (845f0 <noOS_bootup_sequence+0x1a0>)
   8450e:	2102      	movs	r1, #2
   84510:	2002      	movs	r0, #2
   84512:	4b38      	ldr	r3, [pc, #224]	; (845f4 <noOS_bootup_sequence+0x1a4>)
   84514:	4798      	blx	r3
                break;
   84516:	e012      	b.n	8453e <noOS_bootup_sequence+0xee>
                case 1:
                lcd_print_s(2, 14, ".");
   84518:	4a37      	ldr	r2, [pc, #220]	; (845f8 <noOS_bootup_sequence+0x1a8>)
   8451a:	210e      	movs	r1, #14
   8451c:	2002      	movs	r0, #2
   8451e:	4b35      	ldr	r3, [pc, #212]	; (845f4 <noOS_bootup_sequence+0x1a4>)
   84520:	4798      	blx	r3
                break;
   84522:	e00c      	b.n	8453e <noOS_bootup_sequence+0xee>
                case 2:
                lcd_print_s(2, 15, ".");
   84524:	4a34      	ldr	r2, [pc, #208]	; (845f8 <noOS_bootup_sequence+0x1a8>)
   84526:	210f      	movs	r1, #15
   84528:	2002      	movs	r0, #2
   8452a:	4b32      	ldr	r3, [pc, #200]	; (845f4 <noOS_bootup_sequence+0x1a4>)
   8452c:	4798      	blx	r3
                break;
   8452e:	e006      	b.n	8453e <noOS_bootup_sequence+0xee>
                case 3:
                lcd_print_s(2, 16, ".");
   84530:	4a31      	ldr	r2, [pc, #196]	; (845f8 <noOS_bootup_sequence+0x1a8>)
   84532:	2110      	movs	r1, #16
   84534:	2002      	movs	r0, #2
   84536:	4b2f      	ldr	r3, [pc, #188]	; (845f4 <noOS_bootup_sequence+0x1a4>)
   84538:	4798      	blx	r3
                break;
   8453a:	e000      	b.n	8453e <noOS_bootup_sequence+0xee>
                default:
                break;
   8453c:	bf00      	nop
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   8453e:	2008      	movs	r0, #8
   84540:	4b2e      	ldr	r3, [pc, #184]	; (845fc <noOS_bootup_sequence+0x1ac>)
   84542:	4798      	blx	r3
   84544:	4603      	mov	r3, r0
   84546:	f083 0301 	eor.w	r3, r3, #1
   8454a:	b2db      	uxtb	r3, r3
   8454c:	2b00      	cmp	r3, #0
   8454e:	d006      	beq.n	8455e <noOS_bootup_sequence+0x10e>
   84550:	2062      	movs	r0, #98	; 0x62
   84552:	4b2a      	ldr	r3, [pc, #168]	; (845fc <noOS_bootup_sequence+0x1ac>)
   84554:	4798      	blx	r3
   84556:	4603      	mov	r3, r0
   84558:	2b00      	cmp	r3, #0
   8455a:	f47f af7d 	bne.w	84458 <noOS_bootup_sequence+0x8>
            }
        }
    }
    
    for(int i = 0; i< 3; i++)
   8455e:	2300      	movs	r3, #0
   84560:	607b      	str	r3, [r7, #4]
   84562:	e030      	b.n	845c6 <noOS_bootup_sequence+0x176>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   84564:	2101      	movs	r1, #1
   84566:	206a      	movs	r0, #106	; 0x6a
   84568:	4b1d      	ldr	r3, [pc, #116]	; (845e0 <noOS_bootup_sequence+0x190>)
   8456a:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 1);
   8456c:	2101      	movs	r1, #1
   8456e:	2066      	movs	r0, #102	; 0x66
   84570:	4b1b      	ldr	r3, [pc, #108]	; (845e0 <noOS_bootup_sequence+0x190>)
   84572:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 1);
   84574:	2101      	movs	r1, #1
   84576:	2067      	movs	r0, #103	; 0x67
   84578:	4b19      	ldr	r3, [pc, #100]	; (845e0 <noOS_bootup_sequence+0x190>)
   8457a:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 1);
   8457c:	2101      	movs	r1, #1
   8457e:	2068      	movs	r0, #104	; 0x68
   84580:	4b17      	ldr	r3, [pc, #92]	; (845e0 <noOS_bootup_sequence+0x190>)
   84582:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 1);
   84584:	2101      	movs	r1, #1
   84586:	2069      	movs	r0, #105	; 0x69
   84588:	4b15      	ldr	r3, [pc, #84]	; (845e0 <noOS_bootup_sequence+0x190>)
   8458a:	4798      	blx	r3
        mdelay(100);
   8458c:	2064      	movs	r0, #100	; 0x64
   8458e:	4b1c      	ldr	r3, [pc, #112]	; (84600 <noOS_bootup_sequence+0x1b0>)
   84590:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   84592:	2100      	movs	r1, #0
   84594:	206a      	movs	r0, #106	; 0x6a
   84596:	4b12      	ldr	r3, [pc, #72]	; (845e0 <noOS_bootup_sequence+0x190>)
   84598:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   8459a:	2100      	movs	r1, #0
   8459c:	2066      	movs	r0, #102	; 0x66
   8459e:	4b10      	ldr	r3, [pc, #64]	; (845e0 <noOS_bootup_sequence+0x190>)
   845a0:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   845a2:	2100      	movs	r1, #0
   845a4:	2067      	movs	r0, #103	; 0x67
   845a6:	4b0e      	ldr	r3, [pc, #56]	; (845e0 <noOS_bootup_sequence+0x190>)
   845a8:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   845aa:	2100      	movs	r1, #0
   845ac:	2068      	movs	r0, #104	; 0x68
   845ae:	4b0c      	ldr	r3, [pc, #48]	; (845e0 <noOS_bootup_sequence+0x190>)
   845b0:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   845b2:	2100      	movs	r1, #0
   845b4:	2069      	movs	r0, #105	; 0x69
   845b6:	4b0a      	ldr	r3, [pc, #40]	; (845e0 <noOS_bootup_sequence+0x190>)
   845b8:	4798      	blx	r3
        mdelay(100);
   845ba:	2064      	movs	r0, #100	; 0x64
   845bc:	4b10      	ldr	r3, [pc, #64]	; (84600 <noOS_bootup_sequence+0x1b0>)
   845be:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   845c0:	687b      	ldr	r3, [r7, #4]
   845c2:	3301      	adds	r3, #1
   845c4:	607b      	str	r3, [r7, #4]
   845c6:	687b      	ldr	r3, [r7, #4]
   845c8:	2b02      	cmp	r3, #2
   845ca:	ddcb      	ble.n	84564 <noOS_bootup_sequence+0x114>
    }
}
   845cc:	bf00      	nop
   845ce:	3708      	adds	r7, #8
   845d0:	46bd      	mov	sp, r7
   845d2:	bd80      	pop	{r7, pc}
   845d4:	00082eb5 	.word	0x00082eb5
   845d8:	20070fc4 	.word	0x20070fc4
   845dc:	20070fc0 	.word	0x20070fc0
   845e0:	000842e9 	.word	0x000842e9
   845e4:	20070fc8 	.word	0x20070fc8
   845e8:	20070dd0 	.word	0x20070dd0
   845ec:	200701a0 	.word	0x200701a0
   845f0:	0008961c 	.word	0x0008961c
   845f4:	00081601 	.word	0x00081601
   845f8:	0008962c 	.word	0x0008962c
   845fc:	00084353 	.word	0x00084353
   84600:	00082ec9 	.word	0x00082ec9

00084604 <set_led>:

void set_led(ioport_pin_t pin, Bool level)
{
   84604:	b580      	push	{r7, lr}
   84606:	b082      	sub	sp, #8
   84608:	af00      	add	r7, sp, #0
   8460a:	6078      	str	r0, [r7, #4]
   8460c:	460b      	mov	r3, r1
   8460e:	70fb      	strb	r3, [r7, #3]
    if (allow_leds)
   84610:	4b0b      	ldr	r3, [pc, #44]	; (84640 <set_led+0x3c>)
   84612:	781b      	ldrb	r3, [r3, #0]
   84614:	2b00      	cmp	r3, #0
   84616:	d00a      	beq.n	8462e <set_led+0x2a>
    {
        ioport_set_pin_level(pin, level);
   84618:	78fb      	ldrb	r3, [r7, #3]
   8461a:	2b00      	cmp	r3, #0
   8461c:	bf14      	ite	ne
   8461e:	2301      	movne	r3, #1
   84620:	2300      	moveq	r3, #0
   84622:	b2db      	uxtb	r3, r3
   84624:	4619      	mov	r1, r3
   84626:	6878      	ldr	r0, [r7, #4]
   84628:	4b06      	ldr	r3, [pc, #24]	; (84644 <set_led+0x40>)
   8462a:	4798      	blx	r3
    }
    else
    {
        ioport_set_pin_level(pin, 0);
    }
}
   8462c:	e003      	b.n	84636 <set_led+0x32>
        ioport_set_pin_level(pin, 0);
   8462e:	2100      	movs	r1, #0
   84630:	6878      	ldr	r0, [r7, #4]
   84632:	4b04      	ldr	r3, [pc, #16]	; (84644 <set_led+0x40>)
   84634:	4798      	blx	r3
}
   84636:	bf00      	nop
   84638:	3708      	adds	r7, #8
   8463a:	46bd      	mov	sp, r7
   8463c:	bd80      	pop	{r7, pc}
   8463e:	bf00      	nop
   84640:	2007018d 	.word	0x2007018d
   84644:	000842e9 	.word	0x000842e9

00084648 <__aeabi_drsub>:
   84648:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8464c:	e002      	b.n	84654 <__adddf3>
   8464e:	bf00      	nop

00084650 <__aeabi_dsub>:
   84650:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00084654 <__adddf3>:
   84654:	b530      	push	{r4, r5, lr}
   84656:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8465a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8465e:	ea94 0f05 	teq	r4, r5
   84662:	bf08      	it	eq
   84664:	ea90 0f02 	teqeq	r0, r2
   84668:	bf1f      	itttt	ne
   8466a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8466e:	ea55 0c02 	orrsne.w	ip, r5, r2
   84672:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   84676:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8467a:	f000 80e2 	beq.w	84842 <__adddf3+0x1ee>
   8467e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   84682:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   84686:	bfb8      	it	lt
   84688:	426d      	neglt	r5, r5
   8468a:	dd0c      	ble.n	846a6 <__adddf3+0x52>
   8468c:	442c      	add	r4, r5
   8468e:	ea80 0202 	eor.w	r2, r0, r2
   84692:	ea81 0303 	eor.w	r3, r1, r3
   84696:	ea82 0000 	eor.w	r0, r2, r0
   8469a:	ea83 0101 	eor.w	r1, r3, r1
   8469e:	ea80 0202 	eor.w	r2, r0, r2
   846a2:	ea81 0303 	eor.w	r3, r1, r3
   846a6:	2d36      	cmp	r5, #54	; 0x36
   846a8:	bf88      	it	hi
   846aa:	bd30      	pophi	{r4, r5, pc}
   846ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   846b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   846b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   846b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   846bc:	d002      	beq.n	846c4 <__adddf3+0x70>
   846be:	4240      	negs	r0, r0
   846c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   846c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   846c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   846cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   846d0:	d002      	beq.n	846d8 <__adddf3+0x84>
   846d2:	4252      	negs	r2, r2
   846d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   846d8:	ea94 0f05 	teq	r4, r5
   846dc:	f000 80a7 	beq.w	8482e <__adddf3+0x1da>
   846e0:	f1a4 0401 	sub.w	r4, r4, #1
   846e4:	f1d5 0e20 	rsbs	lr, r5, #32
   846e8:	db0d      	blt.n	84706 <__adddf3+0xb2>
   846ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   846ee:	fa22 f205 	lsr.w	r2, r2, r5
   846f2:	1880      	adds	r0, r0, r2
   846f4:	f141 0100 	adc.w	r1, r1, #0
   846f8:	fa03 f20e 	lsl.w	r2, r3, lr
   846fc:	1880      	adds	r0, r0, r2
   846fe:	fa43 f305 	asr.w	r3, r3, r5
   84702:	4159      	adcs	r1, r3
   84704:	e00e      	b.n	84724 <__adddf3+0xd0>
   84706:	f1a5 0520 	sub.w	r5, r5, #32
   8470a:	f10e 0e20 	add.w	lr, lr, #32
   8470e:	2a01      	cmp	r2, #1
   84710:	fa03 fc0e 	lsl.w	ip, r3, lr
   84714:	bf28      	it	cs
   84716:	f04c 0c02 	orrcs.w	ip, ip, #2
   8471a:	fa43 f305 	asr.w	r3, r3, r5
   8471e:	18c0      	adds	r0, r0, r3
   84720:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   84724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84728:	d507      	bpl.n	8473a <__adddf3+0xe6>
   8472a:	f04f 0e00 	mov.w	lr, #0
   8472e:	f1dc 0c00 	rsbs	ip, ip, #0
   84732:	eb7e 0000 	sbcs.w	r0, lr, r0
   84736:	eb6e 0101 	sbc.w	r1, lr, r1
   8473a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8473e:	d31b      	bcc.n	84778 <__adddf3+0x124>
   84740:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   84744:	d30c      	bcc.n	84760 <__adddf3+0x10c>
   84746:	0849      	lsrs	r1, r1, #1
   84748:	ea5f 0030 	movs.w	r0, r0, rrx
   8474c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   84750:	f104 0401 	add.w	r4, r4, #1
   84754:	ea4f 5244 	mov.w	r2, r4, lsl #21
   84758:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8475c:	f080 809a 	bcs.w	84894 <__adddf3+0x240>
   84760:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84764:	bf08      	it	eq
   84766:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8476a:	f150 0000 	adcs.w	r0, r0, #0
   8476e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84772:	ea41 0105 	orr.w	r1, r1, r5
   84776:	bd30      	pop	{r4, r5, pc}
   84778:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8477c:	4140      	adcs	r0, r0
   8477e:	eb41 0101 	adc.w	r1, r1, r1
   84782:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84786:	f1a4 0401 	sub.w	r4, r4, #1
   8478a:	d1e9      	bne.n	84760 <__adddf3+0x10c>
   8478c:	f091 0f00 	teq	r1, #0
   84790:	bf04      	itt	eq
   84792:	4601      	moveq	r1, r0
   84794:	2000      	moveq	r0, #0
   84796:	fab1 f381 	clz	r3, r1
   8479a:	bf08      	it	eq
   8479c:	3320      	addeq	r3, #32
   8479e:	f1a3 030b 	sub.w	r3, r3, #11
   847a2:	f1b3 0220 	subs.w	r2, r3, #32
   847a6:	da0c      	bge.n	847c2 <__adddf3+0x16e>
   847a8:	320c      	adds	r2, #12
   847aa:	dd08      	ble.n	847be <__adddf3+0x16a>
   847ac:	f102 0c14 	add.w	ip, r2, #20
   847b0:	f1c2 020c 	rsb	r2, r2, #12
   847b4:	fa01 f00c 	lsl.w	r0, r1, ip
   847b8:	fa21 f102 	lsr.w	r1, r1, r2
   847bc:	e00c      	b.n	847d8 <__adddf3+0x184>
   847be:	f102 0214 	add.w	r2, r2, #20
   847c2:	bfd8      	it	le
   847c4:	f1c2 0c20 	rsble	ip, r2, #32
   847c8:	fa01 f102 	lsl.w	r1, r1, r2
   847cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   847d0:	bfdc      	itt	le
   847d2:	ea41 010c 	orrle.w	r1, r1, ip
   847d6:	4090      	lslle	r0, r2
   847d8:	1ae4      	subs	r4, r4, r3
   847da:	bfa2      	ittt	ge
   847dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   847e0:	4329      	orrge	r1, r5
   847e2:	bd30      	popge	{r4, r5, pc}
   847e4:	ea6f 0404 	mvn.w	r4, r4
   847e8:	3c1f      	subs	r4, #31
   847ea:	da1c      	bge.n	84826 <__adddf3+0x1d2>
   847ec:	340c      	adds	r4, #12
   847ee:	dc0e      	bgt.n	8480e <__adddf3+0x1ba>
   847f0:	f104 0414 	add.w	r4, r4, #20
   847f4:	f1c4 0220 	rsb	r2, r4, #32
   847f8:	fa20 f004 	lsr.w	r0, r0, r4
   847fc:	fa01 f302 	lsl.w	r3, r1, r2
   84800:	ea40 0003 	orr.w	r0, r0, r3
   84804:	fa21 f304 	lsr.w	r3, r1, r4
   84808:	ea45 0103 	orr.w	r1, r5, r3
   8480c:	bd30      	pop	{r4, r5, pc}
   8480e:	f1c4 040c 	rsb	r4, r4, #12
   84812:	f1c4 0220 	rsb	r2, r4, #32
   84816:	fa20 f002 	lsr.w	r0, r0, r2
   8481a:	fa01 f304 	lsl.w	r3, r1, r4
   8481e:	ea40 0003 	orr.w	r0, r0, r3
   84822:	4629      	mov	r1, r5
   84824:	bd30      	pop	{r4, r5, pc}
   84826:	fa21 f004 	lsr.w	r0, r1, r4
   8482a:	4629      	mov	r1, r5
   8482c:	bd30      	pop	{r4, r5, pc}
   8482e:	f094 0f00 	teq	r4, #0
   84832:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   84836:	bf06      	itte	eq
   84838:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8483c:	3401      	addeq	r4, #1
   8483e:	3d01      	subne	r5, #1
   84840:	e74e      	b.n	846e0 <__adddf3+0x8c>
   84842:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84846:	bf18      	it	ne
   84848:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8484c:	d029      	beq.n	848a2 <__adddf3+0x24e>
   8484e:	ea94 0f05 	teq	r4, r5
   84852:	bf08      	it	eq
   84854:	ea90 0f02 	teqeq	r0, r2
   84858:	d005      	beq.n	84866 <__adddf3+0x212>
   8485a:	ea54 0c00 	orrs.w	ip, r4, r0
   8485e:	bf04      	itt	eq
   84860:	4619      	moveq	r1, r3
   84862:	4610      	moveq	r0, r2
   84864:	bd30      	pop	{r4, r5, pc}
   84866:	ea91 0f03 	teq	r1, r3
   8486a:	bf1e      	ittt	ne
   8486c:	2100      	movne	r1, #0
   8486e:	2000      	movne	r0, #0
   84870:	bd30      	popne	{r4, r5, pc}
   84872:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   84876:	d105      	bne.n	84884 <__adddf3+0x230>
   84878:	0040      	lsls	r0, r0, #1
   8487a:	4149      	adcs	r1, r1
   8487c:	bf28      	it	cs
   8487e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   84882:	bd30      	pop	{r4, r5, pc}
   84884:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   84888:	bf3c      	itt	cc
   8488a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8488e:	bd30      	popcc	{r4, r5, pc}
   84890:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84894:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   84898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8489c:	f04f 0000 	mov.w	r0, #0
   848a0:	bd30      	pop	{r4, r5, pc}
   848a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   848a6:	bf1a      	itte	ne
   848a8:	4619      	movne	r1, r3
   848aa:	4610      	movne	r0, r2
   848ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   848b0:	bf1c      	itt	ne
   848b2:	460b      	movne	r3, r1
   848b4:	4602      	movne	r2, r0
   848b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   848ba:	bf06      	itte	eq
   848bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   848c0:	ea91 0f03 	teqeq	r1, r3
   848c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   848c8:	bd30      	pop	{r4, r5, pc}
   848ca:	bf00      	nop

000848cc <__aeabi_ui2d>:
   848cc:	f090 0f00 	teq	r0, #0
   848d0:	bf04      	itt	eq
   848d2:	2100      	moveq	r1, #0
   848d4:	4770      	bxeq	lr
   848d6:	b530      	push	{r4, r5, lr}
   848d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   848dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   848e0:	f04f 0500 	mov.w	r5, #0
   848e4:	f04f 0100 	mov.w	r1, #0
   848e8:	e750      	b.n	8478c <__adddf3+0x138>
   848ea:	bf00      	nop

000848ec <__aeabi_i2d>:
   848ec:	f090 0f00 	teq	r0, #0
   848f0:	bf04      	itt	eq
   848f2:	2100      	moveq	r1, #0
   848f4:	4770      	bxeq	lr
   848f6:	b530      	push	{r4, r5, lr}
   848f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   848fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84900:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   84904:	bf48      	it	mi
   84906:	4240      	negmi	r0, r0
   84908:	f04f 0100 	mov.w	r1, #0
   8490c:	e73e      	b.n	8478c <__adddf3+0x138>
   8490e:	bf00      	nop

00084910 <__aeabi_f2d>:
   84910:	0042      	lsls	r2, r0, #1
   84912:	ea4f 01e2 	mov.w	r1, r2, asr #3
   84916:	ea4f 0131 	mov.w	r1, r1, rrx
   8491a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8491e:	bf1f      	itttt	ne
   84920:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   84924:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84928:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8492c:	4770      	bxne	lr
   8492e:	f092 0f00 	teq	r2, #0
   84932:	bf14      	ite	ne
   84934:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84938:	4770      	bxeq	lr
   8493a:	b530      	push	{r4, r5, lr}
   8493c:	f44f 7460 	mov.w	r4, #896	; 0x380
   84940:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84944:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84948:	e720      	b.n	8478c <__adddf3+0x138>
   8494a:	bf00      	nop

0008494c <__aeabi_ul2d>:
   8494c:	ea50 0201 	orrs.w	r2, r0, r1
   84950:	bf08      	it	eq
   84952:	4770      	bxeq	lr
   84954:	b530      	push	{r4, r5, lr}
   84956:	f04f 0500 	mov.w	r5, #0
   8495a:	e00a      	b.n	84972 <__aeabi_l2d+0x16>

0008495c <__aeabi_l2d>:
   8495c:	ea50 0201 	orrs.w	r2, r0, r1
   84960:	bf08      	it	eq
   84962:	4770      	bxeq	lr
   84964:	b530      	push	{r4, r5, lr}
   84966:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8496a:	d502      	bpl.n	84972 <__aeabi_l2d+0x16>
   8496c:	4240      	negs	r0, r0
   8496e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84972:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84976:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8497a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8497e:	f43f aedc 	beq.w	8473a <__adddf3+0xe6>
   84982:	f04f 0203 	mov.w	r2, #3
   84986:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8498a:	bf18      	it	ne
   8498c:	3203      	addne	r2, #3
   8498e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84992:	bf18      	it	ne
   84994:	3203      	addne	r2, #3
   84996:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8499a:	f1c2 0320 	rsb	r3, r2, #32
   8499e:	fa00 fc03 	lsl.w	ip, r0, r3
   849a2:	fa20 f002 	lsr.w	r0, r0, r2
   849a6:	fa01 fe03 	lsl.w	lr, r1, r3
   849aa:	ea40 000e 	orr.w	r0, r0, lr
   849ae:	fa21 f102 	lsr.w	r1, r1, r2
   849b2:	4414      	add	r4, r2
   849b4:	e6c1      	b.n	8473a <__adddf3+0xe6>
   849b6:	bf00      	nop

000849b8 <__aeabi_dmul>:
   849b8:	b570      	push	{r4, r5, r6, lr}
   849ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   849be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   849c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   849c6:	bf1d      	ittte	ne
   849c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   849cc:	ea94 0f0c 	teqne	r4, ip
   849d0:	ea95 0f0c 	teqne	r5, ip
   849d4:	f000 f8de 	bleq	84b94 <__aeabi_dmul+0x1dc>
   849d8:	442c      	add	r4, r5
   849da:	ea81 0603 	eor.w	r6, r1, r3
   849de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   849e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   849e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   849ea:	bf18      	it	ne
   849ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   849f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   849f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   849f8:	d038      	beq.n	84a6c <__aeabi_dmul+0xb4>
   849fa:	fba0 ce02 	umull	ip, lr, r0, r2
   849fe:	f04f 0500 	mov.w	r5, #0
   84a02:	fbe1 e502 	umlal	lr, r5, r1, r2
   84a06:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   84a0a:	fbe0 e503 	umlal	lr, r5, r0, r3
   84a0e:	f04f 0600 	mov.w	r6, #0
   84a12:	fbe1 5603 	umlal	r5, r6, r1, r3
   84a16:	f09c 0f00 	teq	ip, #0
   84a1a:	bf18      	it	ne
   84a1c:	f04e 0e01 	orrne.w	lr, lr, #1
   84a20:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   84a24:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   84a28:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   84a2c:	d204      	bcs.n	84a38 <__aeabi_dmul+0x80>
   84a2e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   84a32:	416d      	adcs	r5, r5
   84a34:	eb46 0606 	adc.w	r6, r6, r6
   84a38:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   84a3c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   84a40:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   84a44:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   84a48:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   84a4c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84a50:	bf88      	it	hi
   84a52:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   84a56:	d81e      	bhi.n	84a96 <__aeabi_dmul+0xde>
   84a58:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   84a5c:	bf08      	it	eq
   84a5e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   84a62:	f150 0000 	adcs.w	r0, r0, #0
   84a66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84a6a:	bd70      	pop	{r4, r5, r6, pc}
   84a6c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   84a70:	ea46 0101 	orr.w	r1, r6, r1
   84a74:	ea40 0002 	orr.w	r0, r0, r2
   84a78:	ea81 0103 	eor.w	r1, r1, r3
   84a7c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   84a80:	bfc2      	ittt	gt
   84a82:	ebd4 050c 	rsbsgt	r5, r4, ip
   84a86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84a8a:	bd70      	popgt	{r4, r5, r6, pc}
   84a8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84a90:	f04f 0e00 	mov.w	lr, #0
   84a94:	3c01      	subs	r4, #1
   84a96:	f300 80ab 	bgt.w	84bf0 <__aeabi_dmul+0x238>
   84a9a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   84a9e:	bfde      	ittt	le
   84aa0:	2000      	movle	r0, #0
   84aa2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   84aa6:	bd70      	pople	{r4, r5, r6, pc}
   84aa8:	f1c4 0400 	rsb	r4, r4, #0
   84aac:	3c20      	subs	r4, #32
   84aae:	da35      	bge.n	84b1c <__aeabi_dmul+0x164>
   84ab0:	340c      	adds	r4, #12
   84ab2:	dc1b      	bgt.n	84aec <__aeabi_dmul+0x134>
   84ab4:	f104 0414 	add.w	r4, r4, #20
   84ab8:	f1c4 0520 	rsb	r5, r4, #32
   84abc:	fa00 f305 	lsl.w	r3, r0, r5
   84ac0:	fa20 f004 	lsr.w	r0, r0, r4
   84ac4:	fa01 f205 	lsl.w	r2, r1, r5
   84ac8:	ea40 0002 	orr.w	r0, r0, r2
   84acc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   84ad0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84ad4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84ad8:	fa21 f604 	lsr.w	r6, r1, r4
   84adc:	eb42 0106 	adc.w	r1, r2, r6
   84ae0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84ae4:	bf08      	it	eq
   84ae6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84aea:	bd70      	pop	{r4, r5, r6, pc}
   84aec:	f1c4 040c 	rsb	r4, r4, #12
   84af0:	f1c4 0520 	rsb	r5, r4, #32
   84af4:	fa00 f304 	lsl.w	r3, r0, r4
   84af8:	fa20 f005 	lsr.w	r0, r0, r5
   84afc:	fa01 f204 	lsl.w	r2, r1, r4
   84b00:	ea40 0002 	orr.w	r0, r0, r2
   84b04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84b08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84b0c:	f141 0100 	adc.w	r1, r1, #0
   84b10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84b14:	bf08      	it	eq
   84b16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84b1a:	bd70      	pop	{r4, r5, r6, pc}
   84b1c:	f1c4 0520 	rsb	r5, r4, #32
   84b20:	fa00 f205 	lsl.w	r2, r0, r5
   84b24:	ea4e 0e02 	orr.w	lr, lr, r2
   84b28:	fa20 f304 	lsr.w	r3, r0, r4
   84b2c:	fa01 f205 	lsl.w	r2, r1, r5
   84b30:	ea43 0302 	orr.w	r3, r3, r2
   84b34:	fa21 f004 	lsr.w	r0, r1, r4
   84b38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84b3c:	fa21 f204 	lsr.w	r2, r1, r4
   84b40:	ea20 0002 	bic.w	r0, r0, r2
   84b44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   84b48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84b4c:	bf08      	it	eq
   84b4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84b52:	bd70      	pop	{r4, r5, r6, pc}
   84b54:	f094 0f00 	teq	r4, #0
   84b58:	d10f      	bne.n	84b7a <__aeabi_dmul+0x1c2>
   84b5a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   84b5e:	0040      	lsls	r0, r0, #1
   84b60:	eb41 0101 	adc.w	r1, r1, r1
   84b64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84b68:	bf08      	it	eq
   84b6a:	3c01      	subeq	r4, #1
   84b6c:	d0f7      	beq.n	84b5e <__aeabi_dmul+0x1a6>
   84b6e:	ea41 0106 	orr.w	r1, r1, r6
   84b72:	f095 0f00 	teq	r5, #0
   84b76:	bf18      	it	ne
   84b78:	4770      	bxne	lr
   84b7a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   84b7e:	0052      	lsls	r2, r2, #1
   84b80:	eb43 0303 	adc.w	r3, r3, r3
   84b84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   84b88:	bf08      	it	eq
   84b8a:	3d01      	subeq	r5, #1
   84b8c:	d0f7      	beq.n	84b7e <__aeabi_dmul+0x1c6>
   84b8e:	ea43 0306 	orr.w	r3, r3, r6
   84b92:	4770      	bx	lr
   84b94:	ea94 0f0c 	teq	r4, ip
   84b98:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84b9c:	bf18      	it	ne
   84b9e:	ea95 0f0c 	teqne	r5, ip
   84ba2:	d00c      	beq.n	84bbe <__aeabi_dmul+0x206>
   84ba4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84ba8:	bf18      	it	ne
   84baa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84bae:	d1d1      	bne.n	84b54 <__aeabi_dmul+0x19c>
   84bb0:	ea81 0103 	eor.w	r1, r1, r3
   84bb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84bb8:	f04f 0000 	mov.w	r0, #0
   84bbc:	bd70      	pop	{r4, r5, r6, pc}
   84bbe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84bc2:	bf06      	itte	eq
   84bc4:	4610      	moveq	r0, r2
   84bc6:	4619      	moveq	r1, r3
   84bc8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84bcc:	d019      	beq.n	84c02 <__aeabi_dmul+0x24a>
   84bce:	ea94 0f0c 	teq	r4, ip
   84bd2:	d102      	bne.n	84bda <__aeabi_dmul+0x222>
   84bd4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   84bd8:	d113      	bne.n	84c02 <__aeabi_dmul+0x24a>
   84bda:	ea95 0f0c 	teq	r5, ip
   84bde:	d105      	bne.n	84bec <__aeabi_dmul+0x234>
   84be0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   84be4:	bf1c      	itt	ne
   84be6:	4610      	movne	r0, r2
   84be8:	4619      	movne	r1, r3
   84bea:	d10a      	bne.n	84c02 <__aeabi_dmul+0x24a>
   84bec:	ea81 0103 	eor.w	r1, r1, r3
   84bf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84bf4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   84bf8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84bfc:	f04f 0000 	mov.w	r0, #0
   84c00:	bd70      	pop	{r4, r5, r6, pc}
   84c02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   84c06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   84c0a:	bd70      	pop	{r4, r5, r6, pc}

00084c0c <__aeabi_ddiv>:
   84c0c:	b570      	push	{r4, r5, r6, lr}
   84c0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84c12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   84c16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   84c1a:	bf1d      	ittte	ne
   84c1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84c20:	ea94 0f0c 	teqne	r4, ip
   84c24:	ea95 0f0c 	teqne	r5, ip
   84c28:	f000 f8a7 	bleq	84d7a <__aeabi_ddiv+0x16e>
   84c2c:	eba4 0405 	sub.w	r4, r4, r5
   84c30:	ea81 0e03 	eor.w	lr, r1, r3
   84c34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84c38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84c3c:	f000 8088 	beq.w	84d50 <__aeabi_ddiv+0x144>
   84c40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   84c44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   84c48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   84c4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   84c50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   84c54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   84c58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   84c5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   84c60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   84c64:	429d      	cmp	r5, r3
   84c66:	bf08      	it	eq
   84c68:	4296      	cmpeq	r6, r2
   84c6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   84c6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   84c72:	d202      	bcs.n	84c7a <__aeabi_ddiv+0x6e>
   84c74:	085b      	lsrs	r3, r3, #1
   84c76:	ea4f 0232 	mov.w	r2, r2, rrx
   84c7a:	1ab6      	subs	r6, r6, r2
   84c7c:	eb65 0503 	sbc.w	r5, r5, r3
   84c80:	085b      	lsrs	r3, r3, #1
   84c82:	ea4f 0232 	mov.w	r2, r2, rrx
   84c86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   84c8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   84c8e:	ebb6 0e02 	subs.w	lr, r6, r2
   84c92:	eb75 0e03 	sbcs.w	lr, r5, r3
   84c96:	bf22      	ittt	cs
   84c98:	1ab6      	subcs	r6, r6, r2
   84c9a:	4675      	movcs	r5, lr
   84c9c:	ea40 000c 	orrcs.w	r0, r0, ip
   84ca0:	085b      	lsrs	r3, r3, #1
   84ca2:	ea4f 0232 	mov.w	r2, r2, rrx
   84ca6:	ebb6 0e02 	subs.w	lr, r6, r2
   84caa:	eb75 0e03 	sbcs.w	lr, r5, r3
   84cae:	bf22      	ittt	cs
   84cb0:	1ab6      	subcs	r6, r6, r2
   84cb2:	4675      	movcs	r5, lr
   84cb4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   84cb8:	085b      	lsrs	r3, r3, #1
   84cba:	ea4f 0232 	mov.w	r2, r2, rrx
   84cbe:	ebb6 0e02 	subs.w	lr, r6, r2
   84cc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   84cc6:	bf22      	ittt	cs
   84cc8:	1ab6      	subcs	r6, r6, r2
   84cca:	4675      	movcs	r5, lr
   84ccc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   84cd0:	085b      	lsrs	r3, r3, #1
   84cd2:	ea4f 0232 	mov.w	r2, r2, rrx
   84cd6:	ebb6 0e02 	subs.w	lr, r6, r2
   84cda:	eb75 0e03 	sbcs.w	lr, r5, r3
   84cde:	bf22      	ittt	cs
   84ce0:	1ab6      	subcs	r6, r6, r2
   84ce2:	4675      	movcs	r5, lr
   84ce4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   84ce8:	ea55 0e06 	orrs.w	lr, r5, r6
   84cec:	d018      	beq.n	84d20 <__aeabi_ddiv+0x114>
   84cee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   84cf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   84cf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   84cfa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   84cfe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   84d02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   84d06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   84d0a:	d1c0      	bne.n	84c8e <__aeabi_ddiv+0x82>
   84d0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84d10:	d10b      	bne.n	84d2a <__aeabi_ddiv+0x11e>
   84d12:	ea41 0100 	orr.w	r1, r1, r0
   84d16:	f04f 0000 	mov.w	r0, #0
   84d1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   84d1e:	e7b6      	b.n	84c8e <__aeabi_ddiv+0x82>
   84d20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84d24:	bf04      	itt	eq
   84d26:	4301      	orreq	r1, r0
   84d28:	2000      	moveq	r0, #0
   84d2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84d2e:	bf88      	it	hi
   84d30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   84d34:	f63f aeaf 	bhi.w	84a96 <__aeabi_dmul+0xde>
   84d38:	ebb5 0c03 	subs.w	ip, r5, r3
   84d3c:	bf04      	itt	eq
   84d3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   84d42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   84d46:	f150 0000 	adcs.w	r0, r0, #0
   84d4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84d4e:	bd70      	pop	{r4, r5, r6, pc}
   84d50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   84d54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   84d58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   84d5c:	bfc2      	ittt	gt
   84d5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   84d62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84d66:	bd70      	popgt	{r4, r5, r6, pc}
   84d68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84d6c:	f04f 0e00 	mov.w	lr, #0
   84d70:	3c01      	subs	r4, #1
   84d72:	e690      	b.n	84a96 <__aeabi_dmul+0xde>
   84d74:	ea45 0e06 	orr.w	lr, r5, r6
   84d78:	e68d      	b.n	84a96 <__aeabi_dmul+0xde>
   84d7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84d7e:	ea94 0f0c 	teq	r4, ip
   84d82:	bf08      	it	eq
   84d84:	ea95 0f0c 	teqeq	r5, ip
   84d88:	f43f af3b 	beq.w	84c02 <__aeabi_dmul+0x24a>
   84d8c:	ea94 0f0c 	teq	r4, ip
   84d90:	d10a      	bne.n	84da8 <__aeabi_ddiv+0x19c>
   84d92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   84d96:	f47f af34 	bne.w	84c02 <__aeabi_dmul+0x24a>
   84d9a:	ea95 0f0c 	teq	r5, ip
   84d9e:	f47f af25 	bne.w	84bec <__aeabi_dmul+0x234>
   84da2:	4610      	mov	r0, r2
   84da4:	4619      	mov	r1, r3
   84da6:	e72c      	b.n	84c02 <__aeabi_dmul+0x24a>
   84da8:	ea95 0f0c 	teq	r5, ip
   84dac:	d106      	bne.n	84dbc <__aeabi_ddiv+0x1b0>
   84dae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84db2:	f43f aefd 	beq.w	84bb0 <__aeabi_dmul+0x1f8>
   84db6:	4610      	mov	r0, r2
   84db8:	4619      	mov	r1, r3
   84dba:	e722      	b.n	84c02 <__aeabi_dmul+0x24a>
   84dbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84dc0:	bf18      	it	ne
   84dc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84dc6:	f47f aec5 	bne.w	84b54 <__aeabi_dmul+0x19c>
   84dca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   84dce:	f47f af0d 	bne.w	84bec <__aeabi_dmul+0x234>
   84dd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   84dd6:	f47f aeeb 	bne.w	84bb0 <__aeabi_dmul+0x1f8>
   84dda:	e712      	b.n	84c02 <__aeabi_dmul+0x24a>

00084ddc <__aeabi_frsub>:
   84ddc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   84de0:	e002      	b.n	84de8 <__addsf3>
   84de2:	bf00      	nop

00084de4 <__aeabi_fsub>:
   84de4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00084de8 <__addsf3>:
   84de8:	0042      	lsls	r2, r0, #1
   84dea:	bf1f      	itttt	ne
   84dec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   84df0:	ea92 0f03 	teqne	r2, r3
   84df4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   84df8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84dfc:	d06a      	beq.n	84ed4 <__addsf3+0xec>
   84dfe:	ea4f 6212 	mov.w	r2, r2, lsr #24
   84e02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   84e06:	bfc1      	itttt	gt
   84e08:	18d2      	addgt	r2, r2, r3
   84e0a:	4041      	eorgt	r1, r0
   84e0c:	4048      	eorgt	r0, r1
   84e0e:	4041      	eorgt	r1, r0
   84e10:	bfb8      	it	lt
   84e12:	425b      	neglt	r3, r3
   84e14:	2b19      	cmp	r3, #25
   84e16:	bf88      	it	hi
   84e18:	4770      	bxhi	lr
   84e1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   84e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84e22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   84e26:	bf18      	it	ne
   84e28:	4240      	negne	r0, r0
   84e2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   84e2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   84e32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   84e36:	bf18      	it	ne
   84e38:	4249      	negne	r1, r1
   84e3a:	ea92 0f03 	teq	r2, r3
   84e3e:	d03f      	beq.n	84ec0 <__addsf3+0xd8>
   84e40:	f1a2 0201 	sub.w	r2, r2, #1
   84e44:	fa41 fc03 	asr.w	ip, r1, r3
   84e48:	eb10 000c 	adds.w	r0, r0, ip
   84e4c:	f1c3 0320 	rsb	r3, r3, #32
   84e50:	fa01 f103 	lsl.w	r1, r1, r3
   84e54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84e58:	d502      	bpl.n	84e60 <__addsf3+0x78>
   84e5a:	4249      	negs	r1, r1
   84e5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   84e60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   84e64:	d313      	bcc.n	84e8e <__addsf3+0xa6>
   84e66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   84e6a:	d306      	bcc.n	84e7a <__addsf3+0x92>
   84e6c:	0840      	lsrs	r0, r0, #1
   84e6e:	ea4f 0131 	mov.w	r1, r1, rrx
   84e72:	f102 0201 	add.w	r2, r2, #1
   84e76:	2afe      	cmp	r2, #254	; 0xfe
   84e78:	d251      	bcs.n	84f1e <__addsf3+0x136>
   84e7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   84e7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   84e82:	bf08      	it	eq
   84e84:	f020 0001 	biceq.w	r0, r0, #1
   84e88:	ea40 0003 	orr.w	r0, r0, r3
   84e8c:	4770      	bx	lr
   84e8e:	0049      	lsls	r1, r1, #1
   84e90:	eb40 0000 	adc.w	r0, r0, r0
   84e94:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   84e98:	f1a2 0201 	sub.w	r2, r2, #1
   84e9c:	d1ed      	bne.n	84e7a <__addsf3+0x92>
   84e9e:	fab0 fc80 	clz	ip, r0
   84ea2:	f1ac 0c08 	sub.w	ip, ip, #8
   84ea6:	ebb2 020c 	subs.w	r2, r2, ip
   84eaa:	fa00 f00c 	lsl.w	r0, r0, ip
   84eae:	bfaa      	itet	ge
   84eb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   84eb4:	4252      	neglt	r2, r2
   84eb6:	4318      	orrge	r0, r3
   84eb8:	bfbc      	itt	lt
   84eba:	40d0      	lsrlt	r0, r2
   84ebc:	4318      	orrlt	r0, r3
   84ebe:	4770      	bx	lr
   84ec0:	f092 0f00 	teq	r2, #0
   84ec4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   84ec8:	bf06      	itte	eq
   84eca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   84ece:	3201      	addeq	r2, #1
   84ed0:	3b01      	subne	r3, #1
   84ed2:	e7b5      	b.n	84e40 <__addsf3+0x58>
   84ed4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   84ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   84edc:	bf18      	it	ne
   84ede:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84ee2:	d021      	beq.n	84f28 <__addsf3+0x140>
   84ee4:	ea92 0f03 	teq	r2, r3
   84ee8:	d004      	beq.n	84ef4 <__addsf3+0x10c>
   84eea:	f092 0f00 	teq	r2, #0
   84eee:	bf08      	it	eq
   84ef0:	4608      	moveq	r0, r1
   84ef2:	4770      	bx	lr
   84ef4:	ea90 0f01 	teq	r0, r1
   84ef8:	bf1c      	itt	ne
   84efa:	2000      	movne	r0, #0
   84efc:	4770      	bxne	lr
   84efe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   84f02:	d104      	bne.n	84f0e <__addsf3+0x126>
   84f04:	0040      	lsls	r0, r0, #1
   84f06:	bf28      	it	cs
   84f08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   84f0c:	4770      	bx	lr
   84f0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   84f12:	bf3c      	itt	cc
   84f14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   84f18:	4770      	bxcc	lr
   84f1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84f1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   84f22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84f26:	4770      	bx	lr
   84f28:	ea7f 6222 	mvns.w	r2, r2, asr #24
   84f2c:	bf16      	itet	ne
   84f2e:	4608      	movne	r0, r1
   84f30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   84f34:	4601      	movne	r1, r0
   84f36:	0242      	lsls	r2, r0, #9
   84f38:	bf06      	itte	eq
   84f3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   84f3e:	ea90 0f01 	teqeq	r0, r1
   84f42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   84f46:	4770      	bx	lr

00084f48 <__aeabi_ui2f>:
   84f48:	f04f 0300 	mov.w	r3, #0
   84f4c:	e004      	b.n	84f58 <__aeabi_i2f+0x8>
   84f4e:	bf00      	nop

00084f50 <__aeabi_i2f>:
   84f50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   84f54:	bf48      	it	mi
   84f56:	4240      	negmi	r0, r0
   84f58:	ea5f 0c00 	movs.w	ip, r0
   84f5c:	bf08      	it	eq
   84f5e:	4770      	bxeq	lr
   84f60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   84f64:	4601      	mov	r1, r0
   84f66:	f04f 0000 	mov.w	r0, #0
   84f6a:	e01c      	b.n	84fa6 <__aeabi_l2f+0x2a>

00084f6c <__aeabi_ul2f>:
   84f6c:	ea50 0201 	orrs.w	r2, r0, r1
   84f70:	bf08      	it	eq
   84f72:	4770      	bxeq	lr
   84f74:	f04f 0300 	mov.w	r3, #0
   84f78:	e00a      	b.n	84f90 <__aeabi_l2f+0x14>
   84f7a:	bf00      	nop

00084f7c <__aeabi_l2f>:
   84f7c:	ea50 0201 	orrs.w	r2, r0, r1
   84f80:	bf08      	it	eq
   84f82:	4770      	bxeq	lr
   84f84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   84f88:	d502      	bpl.n	84f90 <__aeabi_l2f+0x14>
   84f8a:	4240      	negs	r0, r0
   84f8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84f90:	ea5f 0c01 	movs.w	ip, r1
   84f94:	bf02      	ittt	eq
   84f96:	4684      	moveq	ip, r0
   84f98:	4601      	moveq	r1, r0
   84f9a:	2000      	moveq	r0, #0
   84f9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   84fa0:	bf08      	it	eq
   84fa2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   84fa6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   84faa:	fabc f28c 	clz	r2, ip
   84fae:	3a08      	subs	r2, #8
   84fb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   84fb4:	db10      	blt.n	84fd8 <__aeabi_l2f+0x5c>
   84fb6:	fa01 fc02 	lsl.w	ip, r1, r2
   84fba:	4463      	add	r3, ip
   84fbc:	fa00 fc02 	lsl.w	ip, r0, r2
   84fc0:	f1c2 0220 	rsb	r2, r2, #32
   84fc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84fc8:	fa20 f202 	lsr.w	r2, r0, r2
   84fcc:	eb43 0002 	adc.w	r0, r3, r2
   84fd0:	bf08      	it	eq
   84fd2:	f020 0001 	biceq.w	r0, r0, #1
   84fd6:	4770      	bx	lr
   84fd8:	f102 0220 	add.w	r2, r2, #32
   84fdc:	fa01 fc02 	lsl.w	ip, r1, r2
   84fe0:	f1c2 0220 	rsb	r2, r2, #32
   84fe4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   84fe8:	fa21 f202 	lsr.w	r2, r1, r2
   84fec:	eb43 0002 	adc.w	r0, r3, r2
   84ff0:	bf08      	it	eq
   84ff2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   84ff6:	4770      	bx	lr

00084ff8 <__aeabi_fmul>:
   84ff8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84ffc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   85000:	bf1e      	ittt	ne
   85002:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   85006:	ea92 0f0c 	teqne	r2, ip
   8500a:	ea93 0f0c 	teqne	r3, ip
   8500e:	d06f      	beq.n	850f0 <__aeabi_fmul+0xf8>
   85010:	441a      	add	r2, r3
   85012:	ea80 0c01 	eor.w	ip, r0, r1
   85016:	0240      	lsls	r0, r0, #9
   85018:	bf18      	it	ne
   8501a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   8501e:	d01e      	beq.n	8505e <__aeabi_fmul+0x66>
   85020:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   85024:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   85028:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   8502c:	fba0 3101 	umull	r3, r1, r0, r1
   85030:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   85034:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   85038:	bf3e      	ittt	cc
   8503a:	0049      	lslcc	r1, r1, #1
   8503c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   85040:	005b      	lslcc	r3, r3, #1
   85042:	ea40 0001 	orr.w	r0, r0, r1
   85046:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   8504a:	2afd      	cmp	r2, #253	; 0xfd
   8504c:	d81d      	bhi.n	8508a <__aeabi_fmul+0x92>
   8504e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   85052:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85056:	bf08      	it	eq
   85058:	f020 0001 	biceq.w	r0, r0, #1
   8505c:	4770      	bx	lr
   8505e:	f090 0f00 	teq	r0, #0
   85062:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   85066:	bf08      	it	eq
   85068:	0249      	lsleq	r1, r1, #9
   8506a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8506e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   85072:	3a7f      	subs	r2, #127	; 0x7f
   85074:	bfc2      	ittt	gt
   85076:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8507a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8507e:	4770      	bxgt	lr
   85080:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85084:	f04f 0300 	mov.w	r3, #0
   85088:	3a01      	subs	r2, #1
   8508a:	dc5d      	bgt.n	85148 <__aeabi_fmul+0x150>
   8508c:	f112 0f19 	cmn.w	r2, #25
   85090:	bfdc      	itt	le
   85092:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   85096:	4770      	bxle	lr
   85098:	f1c2 0200 	rsb	r2, r2, #0
   8509c:	0041      	lsls	r1, r0, #1
   8509e:	fa21 f102 	lsr.w	r1, r1, r2
   850a2:	f1c2 0220 	rsb	r2, r2, #32
   850a6:	fa00 fc02 	lsl.w	ip, r0, r2
   850aa:	ea5f 0031 	movs.w	r0, r1, rrx
   850ae:	f140 0000 	adc.w	r0, r0, #0
   850b2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   850b6:	bf08      	it	eq
   850b8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   850bc:	4770      	bx	lr
   850be:	f092 0f00 	teq	r2, #0
   850c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   850c6:	bf02      	ittt	eq
   850c8:	0040      	lsleq	r0, r0, #1
   850ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   850ce:	3a01      	subeq	r2, #1
   850d0:	d0f9      	beq.n	850c6 <__aeabi_fmul+0xce>
   850d2:	ea40 000c 	orr.w	r0, r0, ip
   850d6:	f093 0f00 	teq	r3, #0
   850da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   850de:	bf02      	ittt	eq
   850e0:	0049      	lsleq	r1, r1, #1
   850e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   850e6:	3b01      	subeq	r3, #1
   850e8:	d0f9      	beq.n	850de <__aeabi_fmul+0xe6>
   850ea:	ea41 010c 	orr.w	r1, r1, ip
   850ee:	e78f      	b.n	85010 <__aeabi_fmul+0x18>
   850f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   850f4:	ea92 0f0c 	teq	r2, ip
   850f8:	bf18      	it	ne
   850fa:	ea93 0f0c 	teqne	r3, ip
   850fe:	d00a      	beq.n	85116 <__aeabi_fmul+0x11e>
   85100:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   85104:	bf18      	it	ne
   85106:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8510a:	d1d8      	bne.n	850be <__aeabi_fmul+0xc6>
   8510c:	ea80 0001 	eor.w	r0, r0, r1
   85110:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   85114:	4770      	bx	lr
   85116:	f090 0f00 	teq	r0, #0
   8511a:	bf17      	itett	ne
   8511c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   85120:	4608      	moveq	r0, r1
   85122:	f091 0f00 	teqne	r1, #0
   85126:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   8512a:	d014      	beq.n	85156 <__aeabi_fmul+0x15e>
   8512c:	ea92 0f0c 	teq	r2, ip
   85130:	d101      	bne.n	85136 <__aeabi_fmul+0x13e>
   85132:	0242      	lsls	r2, r0, #9
   85134:	d10f      	bne.n	85156 <__aeabi_fmul+0x15e>
   85136:	ea93 0f0c 	teq	r3, ip
   8513a:	d103      	bne.n	85144 <__aeabi_fmul+0x14c>
   8513c:	024b      	lsls	r3, r1, #9
   8513e:	bf18      	it	ne
   85140:	4608      	movne	r0, r1
   85142:	d108      	bne.n	85156 <__aeabi_fmul+0x15e>
   85144:	ea80 0001 	eor.w	r0, r0, r1
   85148:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8514c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   85150:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85154:	4770      	bx	lr
   85156:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8515a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   8515e:	4770      	bx	lr

00085160 <__aeabi_fdiv>:
   85160:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   85168:	bf1e      	ittt	ne
   8516a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8516e:	ea92 0f0c 	teqne	r2, ip
   85172:	ea93 0f0c 	teqne	r3, ip
   85176:	d069      	beq.n	8524c <__aeabi_fdiv+0xec>
   85178:	eba2 0203 	sub.w	r2, r2, r3
   8517c:	ea80 0c01 	eor.w	ip, r0, r1
   85180:	0249      	lsls	r1, r1, #9
   85182:	ea4f 2040 	mov.w	r0, r0, lsl #9
   85186:	d037      	beq.n	851f8 <__aeabi_fdiv+0x98>
   85188:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8518c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   85190:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   85194:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   85198:	428b      	cmp	r3, r1
   8519a:	bf38      	it	cc
   8519c:	005b      	lslcc	r3, r3, #1
   8519e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   851a2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   851a6:	428b      	cmp	r3, r1
   851a8:	bf24      	itt	cs
   851aa:	1a5b      	subcs	r3, r3, r1
   851ac:	ea40 000c 	orrcs.w	r0, r0, ip
   851b0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   851b4:	bf24      	itt	cs
   851b6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   851ba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   851be:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   851c2:	bf24      	itt	cs
   851c4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   851c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   851cc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   851d0:	bf24      	itt	cs
   851d2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   851d6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   851da:	011b      	lsls	r3, r3, #4
   851dc:	bf18      	it	ne
   851de:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   851e2:	d1e0      	bne.n	851a6 <__aeabi_fdiv+0x46>
   851e4:	2afd      	cmp	r2, #253	; 0xfd
   851e6:	f63f af50 	bhi.w	8508a <__aeabi_fmul+0x92>
   851ea:	428b      	cmp	r3, r1
   851ec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   851f0:	bf08      	it	eq
   851f2:	f020 0001 	biceq.w	r0, r0, #1
   851f6:	4770      	bx	lr
   851f8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   851fc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   85200:	327f      	adds	r2, #127	; 0x7f
   85202:	bfc2      	ittt	gt
   85204:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   85208:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8520c:	4770      	bxgt	lr
   8520e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85212:	f04f 0300 	mov.w	r3, #0
   85216:	3a01      	subs	r2, #1
   85218:	e737      	b.n	8508a <__aeabi_fmul+0x92>
   8521a:	f092 0f00 	teq	r2, #0
   8521e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   85222:	bf02      	ittt	eq
   85224:	0040      	lsleq	r0, r0, #1
   85226:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8522a:	3a01      	subeq	r2, #1
   8522c:	d0f9      	beq.n	85222 <__aeabi_fdiv+0xc2>
   8522e:	ea40 000c 	orr.w	r0, r0, ip
   85232:	f093 0f00 	teq	r3, #0
   85236:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8523a:	bf02      	ittt	eq
   8523c:	0049      	lsleq	r1, r1, #1
   8523e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   85242:	3b01      	subeq	r3, #1
   85244:	d0f9      	beq.n	8523a <__aeabi_fdiv+0xda>
   85246:	ea41 010c 	orr.w	r1, r1, ip
   8524a:	e795      	b.n	85178 <__aeabi_fdiv+0x18>
   8524c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   85250:	ea92 0f0c 	teq	r2, ip
   85254:	d108      	bne.n	85268 <__aeabi_fdiv+0x108>
   85256:	0242      	lsls	r2, r0, #9
   85258:	f47f af7d 	bne.w	85156 <__aeabi_fmul+0x15e>
   8525c:	ea93 0f0c 	teq	r3, ip
   85260:	f47f af70 	bne.w	85144 <__aeabi_fmul+0x14c>
   85264:	4608      	mov	r0, r1
   85266:	e776      	b.n	85156 <__aeabi_fmul+0x15e>
   85268:	ea93 0f0c 	teq	r3, ip
   8526c:	d104      	bne.n	85278 <__aeabi_fdiv+0x118>
   8526e:	024b      	lsls	r3, r1, #9
   85270:	f43f af4c 	beq.w	8510c <__aeabi_fmul+0x114>
   85274:	4608      	mov	r0, r1
   85276:	e76e      	b.n	85156 <__aeabi_fmul+0x15e>
   85278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8527c:	bf18      	it	ne
   8527e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   85282:	d1ca      	bne.n	8521a <__aeabi_fdiv+0xba>
   85284:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   85288:	f47f af5c 	bne.w	85144 <__aeabi_fmul+0x14c>
   8528c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   85290:	f47f af3c 	bne.w	8510c <__aeabi_fmul+0x114>
   85294:	e75f      	b.n	85156 <__aeabi_fmul+0x15e>
   85296:	bf00      	nop

00085298 <__gesf2>:
   85298:	f04f 3cff 	mov.w	ip, #4294967295
   8529c:	e006      	b.n	852ac <__cmpsf2+0x4>
   8529e:	bf00      	nop

000852a0 <__lesf2>:
   852a0:	f04f 0c01 	mov.w	ip, #1
   852a4:	e002      	b.n	852ac <__cmpsf2+0x4>
   852a6:	bf00      	nop

000852a8 <__cmpsf2>:
   852a8:	f04f 0c01 	mov.w	ip, #1
   852ac:	f84d cd04 	str.w	ip, [sp, #-4]!
   852b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   852b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   852b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   852bc:	bf18      	it	ne
   852be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   852c2:	d011      	beq.n	852e8 <__cmpsf2+0x40>
   852c4:	b001      	add	sp, #4
   852c6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   852ca:	bf18      	it	ne
   852cc:	ea90 0f01 	teqne	r0, r1
   852d0:	bf58      	it	pl
   852d2:	ebb2 0003 	subspl.w	r0, r2, r3
   852d6:	bf88      	it	hi
   852d8:	17c8      	asrhi	r0, r1, #31
   852da:	bf38      	it	cc
   852dc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   852e0:	bf18      	it	ne
   852e2:	f040 0001 	orrne.w	r0, r0, #1
   852e6:	4770      	bx	lr
   852e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   852ec:	d102      	bne.n	852f4 <__cmpsf2+0x4c>
   852ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   852f2:	d105      	bne.n	85300 <__cmpsf2+0x58>
   852f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   852f8:	d1e4      	bne.n	852c4 <__cmpsf2+0x1c>
   852fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   852fe:	d0e1      	beq.n	852c4 <__cmpsf2+0x1c>
   85300:	f85d 0b04 	ldr.w	r0, [sp], #4
   85304:	4770      	bx	lr
   85306:	bf00      	nop

00085308 <__aeabi_cfrcmple>:
   85308:	4684      	mov	ip, r0
   8530a:	4608      	mov	r0, r1
   8530c:	4661      	mov	r1, ip
   8530e:	e7ff      	b.n	85310 <__aeabi_cfcmpeq>

00085310 <__aeabi_cfcmpeq>:
   85310:	b50f      	push	{r0, r1, r2, r3, lr}
   85312:	f7ff ffc9 	bl	852a8 <__cmpsf2>
   85316:	2800      	cmp	r0, #0
   85318:	bf48      	it	mi
   8531a:	f110 0f00 	cmnmi.w	r0, #0
   8531e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00085320 <__aeabi_fcmpeq>:
   85320:	f84d ed08 	str.w	lr, [sp, #-8]!
   85324:	f7ff fff4 	bl	85310 <__aeabi_cfcmpeq>
   85328:	bf0c      	ite	eq
   8532a:	2001      	moveq	r0, #1
   8532c:	2000      	movne	r0, #0
   8532e:	f85d fb08 	ldr.w	pc, [sp], #8
   85332:	bf00      	nop

00085334 <__aeabi_fcmplt>:
   85334:	f84d ed08 	str.w	lr, [sp, #-8]!
   85338:	f7ff ffea 	bl	85310 <__aeabi_cfcmpeq>
   8533c:	bf34      	ite	cc
   8533e:	2001      	movcc	r0, #1
   85340:	2000      	movcs	r0, #0
   85342:	f85d fb08 	ldr.w	pc, [sp], #8
   85346:	bf00      	nop

00085348 <__aeabi_fcmple>:
   85348:	f84d ed08 	str.w	lr, [sp, #-8]!
   8534c:	f7ff ffe0 	bl	85310 <__aeabi_cfcmpeq>
   85350:	bf94      	ite	ls
   85352:	2001      	movls	r0, #1
   85354:	2000      	movhi	r0, #0
   85356:	f85d fb08 	ldr.w	pc, [sp], #8
   8535a:	bf00      	nop

0008535c <__aeabi_fcmpge>:
   8535c:	f84d ed08 	str.w	lr, [sp, #-8]!
   85360:	f7ff ffd2 	bl	85308 <__aeabi_cfrcmple>
   85364:	bf94      	ite	ls
   85366:	2001      	movls	r0, #1
   85368:	2000      	movhi	r0, #0
   8536a:	f85d fb08 	ldr.w	pc, [sp], #8
   8536e:	bf00      	nop

00085370 <__aeabi_fcmpgt>:
   85370:	f84d ed08 	str.w	lr, [sp, #-8]!
   85374:	f7ff ffc8 	bl	85308 <__aeabi_cfrcmple>
   85378:	bf34      	ite	cc
   8537a:	2001      	movcc	r0, #1
   8537c:	2000      	movcs	r0, #0
   8537e:	f85d fb08 	ldr.w	pc, [sp], #8
   85382:	bf00      	nop

00085384 <__aeabi_f2iz>:
   85384:	ea4f 0240 	mov.w	r2, r0, lsl #1
   85388:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   8538c:	d30f      	bcc.n	853ae <__aeabi_f2iz+0x2a>
   8538e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   85392:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   85396:	d90d      	bls.n	853b4 <__aeabi_f2iz+0x30>
   85398:	ea4f 2300 	mov.w	r3, r0, lsl #8
   8539c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   853a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   853a4:	fa23 f002 	lsr.w	r0, r3, r2
   853a8:	bf18      	it	ne
   853aa:	4240      	negne	r0, r0
   853ac:	4770      	bx	lr
   853ae:	f04f 0000 	mov.w	r0, #0
   853b2:	4770      	bx	lr
   853b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   853b8:	d101      	bne.n	853be <__aeabi_f2iz+0x3a>
   853ba:	0242      	lsls	r2, r0, #9
   853bc:	d105      	bne.n	853ca <__aeabi_f2iz+0x46>
   853be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   853c2:	bf08      	it	eq
   853c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   853c8:	4770      	bx	lr
   853ca:	f04f 0000 	mov.w	r0, #0
   853ce:	4770      	bx	lr

000853d0 <__libc_init_array>:
   853d0:	b570      	push	{r4, r5, r6, lr}
   853d2:	4e0f      	ldr	r6, [pc, #60]	; (85410 <__libc_init_array+0x40>)
   853d4:	4d0f      	ldr	r5, [pc, #60]	; (85414 <__libc_init_array+0x44>)
   853d6:	1b76      	subs	r6, r6, r5
   853d8:	10b6      	asrs	r6, r6, #2
   853da:	bf18      	it	ne
   853dc:	2400      	movne	r4, #0
   853de:	d005      	beq.n	853ec <__libc_init_array+0x1c>
   853e0:	3401      	adds	r4, #1
   853e2:	f855 3b04 	ldr.w	r3, [r5], #4
   853e6:	4798      	blx	r3
   853e8:	42a6      	cmp	r6, r4
   853ea:	d1f9      	bne.n	853e0 <__libc_init_array+0x10>
   853ec:	4e0a      	ldr	r6, [pc, #40]	; (85418 <__libc_init_array+0x48>)
   853ee:	4d0b      	ldr	r5, [pc, #44]	; (8541c <__libc_init_array+0x4c>)
   853f0:	f004 fa62 	bl	898b8 <_init>
   853f4:	1b76      	subs	r6, r6, r5
   853f6:	10b6      	asrs	r6, r6, #2
   853f8:	bf18      	it	ne
   853fa:	2400      	movne	r4, #0
   853fc:	d006      	beq.n	8540c <__libc_init_array+0x3c>
   853fe:	3401      	adds	r4, #1
   85400:	f855 3b04 	ldr.w	r3, [r5], #4
   85404:	4798      	blx	r3
   85406:	42a6      	cmp	r6, r4
   85408:	d1f9      	bne.n	853fe <__libc_init_array+0x2e>
   8540a:	bd70      	pop	{r4, r5, r6, pc}
   8540c:	bd70      	pop	{r4, r5, r6, pc}
   8540e:	bf00      	nop
   85410:	000898c4 	.word	0x000898c4
   85414:	000898c4 	.word	0x000898c4
   85418:	000898cc 	.word	0x000898cc
   8541c:	000898c4 	.word	0x000898c4

00085420 <memset>:
   85420:	b470      	push	{r4, r5, r6}
   85422:	0786      	lsls	r6, r0, #30
   85424:	d046      	beq.n	854b4 <memset+0x94>
   85426:	1e54      	subs	r4, r2, #1
   85428:	2a00      	cmp	r2, #0
   8542a:	d041      	beq.n	854b0 <memset+0x90>
   8542c:	b2ca      	uxtb	r2, r1
   8542e:	4603      	mov	r3, r0
   85430:	e002      	b.n	85438 <memset+0x18>
   85432:	f114 34ff 	adds.w	r4, r4, #4294967295
   85436:	d33b      	bcc.n	854b0 <memset+0x90>
   85438:	f803 2b01 	strb.w	r2, [r3], #1
   8543c:	079d      	lsls	r5, r3, #30
   8543e:	d1f8      	bne.n	85432 <memset+0x12>
   85440:	2c03      	cmp	r4, #3
   85442:	d92e      	bls.n	854a2 <memset+0x82>
   85444:	b2cd      	uxtb	r5, r1
   85446:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8544a:	2c0f      	cmp	r4, #15
   8544c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85450:	d919      	bls.n	85486 <memset+0x66>
   85452:	4626      	mov	r6, r4
   85454:	f103 0210 	add.w	r2, r3, #16
   85458:	3e10      	subs	r6, #16
   8545a:	2e0f      	cmp	r6, #15
   8545c:	f842 5c10 	str.w	r5, [r2, #-16]
   85460:	f842 5c0c 	str.w	r5, [r2, #-12]
   85464:	f842 5c08 	str.w	r5, [r2, #-8]
   85468:	f842 5c04 	str.w	r5, [r2, #-4]
   8546c:	f102 0210 	add.w	r2, r2, #16
   85470:	d8f2      	bhi.n	85458 <memset+0x38>
   85472:	f1a4 0210 	sub.w	r2, r4, #16
   85476:	f022 020f 	bic.w	r2, r2, #15
   8547a:	f004 040f 	and.w	r4, r4, #15
   8547e:	3210      	adds	r2, #16
   85480:	2c03      	cmp	r4, #3
   85482:	4413      	add	r3, r2
   85484:	d90d      	bls.n	854a2 <memset+0x82>
   85486:	461e      	mov	r6, r3
   85488:	4622      	mov	r2, r4
   8548a:	3a04      	subs	r2, #4
   8548c:	2a03      	cmp	r2, #3
   8548e:	f846 5b04 	str.w	r5, [r6], #4
   85492:	d8fa      	bhi.n	8548a <memset+0x6a>
   85494:	1f22      	subs	r2, r4, #4
   85496:	f022 0203 	bic.w	r2, r2, #3
   8549a:	3204      	adds	r2, #4
   8549c:	4413      	add	r3, r2
   8549e:	f004 0403 	and.w	r4, r4, #3
   854a2:	b12c      	cbz	r4, 854b0 <memset+0x90>
   854a4:	b2c9      	uxtb	r1, r1
   854a6:	441c      	add	r4, r3
   854a8:	f803 1b01 	strb.w	r1, [r3], #1
   854ac:	429c      	cmp	r4, r3
   854ae:	d1fb      	bne.n	854a8 <memset+0x88>
   854b0:	bc70      	pop	{r4, r5, r6}
   854b2:	4770      	bx	lr
   854b4:	4614      	mov	r4, r2
   854b6:	4603      	mov	r3, r0
   854b8:	e7c2      	b.n	85440 <memset+0x20>
   854ba:	bf00      	nop

000854bc <sprintf>:
   854bc:	b40e      	push	{r1, r2, r3}
   854be:	4601      	mov	r1, r0
   854c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   854c2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   854c6:	f44f 7702 	mov.w	r7, #520	; 0x208
   854ca:	f64f 76ff 	movw	r6, #65535	; 0xffff
   854ce:	b09c      	sub	sp, #112	; 0x70
   854d0:	ac21      	add	r4, sp, #132	; 0x84
   854d2:	f854 2b04 	ldr.w	r2, [r4], #4
   854d6:	4b0b      	ldr	r3, [pc, #44]	; (85504 <sprintf+0x48>)
   854d8:	9102      	str	r1, [sp, #8]
   854da:	9106      	str	r1, [sp, #24]
   854dc:	6818      	ldr	r0, [r3, #0]
   854de:	a902      	add	r1, sp, #8
   854e0:	4623      	mov	r3, r4
   854e2:	9401      	str	r4, [sp, #4]
   854e4:	f8ad 7014 	strh.w	r7, [sp, #20]
   854e8:	9504      	str	r5, [sp, #16]
   854ea:	9507      	str	r5, [sp, #28]
   854ec:	f8ad 6016 	strh.w	r6, [sp, #22]
   854f0:	f000 f838 	bl	85564 <_svfprintf_r>
   854f4:	2200      	movs	r2, #0
   854f6:	9b02      	ldr	r3, [sp, #8]
   854f8:	701a      	strb	r2, [r3, #0]
   854fa:	b01c      	add	sp, #112	; 0x70
   854fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   85500:	b003      	add	sp, #12
   85502:	4770      	bx	lr
   85504:	200701a4 	.word	0x200701a4

00085508 <strlen>:
   85508:	f020 0103 	bic.w	r1, r0, #3
   8550c:	f010 0003 	ands.w	r0, r0, #3
   85510:	f1c0 0000 	rsb	r0, r0, #0
   85514:	f851 3b04 	ldr.w	r3, [r1], #4
   85518:	f100 0c04 	add.w	ip, r0, #4
   8551c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   85520:	f06f 0200 	mvn.w	r2, #0
   85524:	bf1c      	itt	ne
   85526:	fa22 f20c 	lsrne.w	r2, r2, ip
   8552a:	4313      	orrne	r3, r2
   8552c:	f04f 0c01 	mov.w	ip, #1
   85530:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   85534:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   85538:	eba3 020c 	sub.w	r2, r3, ip
   8553c:	ea22 0203 	bic.w	r2, r2, r3
   85540:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   85544:	bf04      	itt	eq
   85546:	f851 3b04 	ldreq.w	r3, [r1], #4
   8554a:	3004      	addeq	r0, #4
   8554c:	d0f4      	beq.n	85538 <strlen+0x30>
   8554e:	f1c2 0100 	rsb	r1, r2, #0
   85552:	ea02 0201 	and.w	r2, r2, r1
   85556:	fab2 f282 	clz	r2, r2
   8555a:	f1c2 021f 	rsb	r2, r2, #31
   8555e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   85562:	4770      	bx	lr

00085564 <_svfprintf_r>:
   85564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85568:	b0c3      	sub	sp, #268	; 0x10c
   8556a:	460c      	mov	r4, r1
   8556c:	910b      	str	r1, [sp, #44]	; 0x2c
   8556e:	4692      	mov	sl, r2
   85570:	930f      	str	r3, [sp, #60]	; 0x3c
   85572:	900c      	str	r0, [sp, #48]	; 0x30
   85574:	f002 fa58 	bl	87a28 <_localeconv_r>
   85578:	6803      	ldr	r3, [r0, #0]
   8557a:	4618      	mov	r0, r3
   8557c:	931a      	str	r3, [sp, #104]	; 0x68
   8557e:	f7ff ffc3 	bl	85508 <strlen>
   85582:	89a3      	ldrh	r3, [r4, #12]
   85584:	9019      	str	r0, [sp, #100]	; 0x64
   85586:	0619      	lsls	r1, r3, #24
   85588:	d503      	bpl.n	85592 <_svfprintf_r+0x2e>
   8558a:	6923      	ldr	r3, [r4, #16]
   8558c:	2b00      	cmp	r3, #0
   8558e:	f001 8035 	beq.w	865fc <_svfprintf_r+0x1098>
   85592:	2300      	movs	r3, #0
   85594:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   85598:	46c8      	mov	r8, r9
   8559a:	9315      	str	r3, [sp, #84]	; 0x54
   8559c:	9313      	str	r3, [sp, #76]	; 0x4c
   8559e:	9314      	str	r3, [sp, #80]	; 0x50
   855a0:	9318      	str	r3, [sp, #96]	; 0x60
   855a2:	931b      	str	r3, [sp, #108]	; 0x6c
   855a4:	9309      	str	r3, [sp, #36]	; 0x24
   855a6:	9316      	str	r3, [sp, #88]	; 0x58
   855a8:	9317      	str	r3, [sp, #92]	; 0x5c
   855aa:	9327      	str	r3, [sp, #156]	; 0x9c
   855ac:	9326      	str	r3, [sp, #152]	; 0x98
   855ae:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   855b2:	f89a 3000 	ldrb.w	r3, [sl]
   855b6:	4654      	mov	r4, sl
   855b8:	b1eb      	cbz	r3, 855f6 <_svfprintf_r+0x92>
   855ba:	2b25      	cmp	r3, #37	; 0x25
   855bc:	d102      	bne.n	855c4 <_svfprintf_r+0x60>
   855be:	e01a      	b.n	855f6 <_svfprintf_r+0x92>
   855c0:	2b25      	cmp	r3, #37	; 0x25
   855c2:	d003      	beq.n	855cc <_svfprintf_r+0x68>
   855c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   855c8:	2b00      	cmp	r3, #0
   855ca:	d1f9      	bne.n	855c0 <_svfprintf_r+0x5c>
   855cc:	eba4 050a 	sub.w	r5, r4, sl
   855d0:	b18d      	cbz	r5, 855f6 <_svfprintf_r+0x92>
   855d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   855d4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   855d6:	3301      	adds	r3, #1
   855d8:	442a      	add	r2, r5
   855da:	2b07      	cmp	r3, #7
   855dc:	f8c8 a000 	str.w	sl, [r8]
   855e0:	f8c8 5004 	str.w	r5, [r8, #4]
   855e4:	9227      	str	r2, [sp, #156]	; 0x9c
   855e6:	9326      	str	r3, [sp, #152]	; 0x98
   855e8:	f300 808a 	bgt.w	85700 <_svfprintf_r+0x19c>
   855ec:	f108 0808 	add.w	r8, r8, #8
   855f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   855f2:	442b      	add	r3, r5
   855f4:	9309      	str	r3, [sp, #36]	; 0x24
   855f6:	7823      	ldrb	r3, [r4, #0]
   855f8:	2b00      	cmp	r3, #0
   855fa:	f000 8089 	beq.w	85710 <_svfprintf_r+0x1ac>
   855fe:	2300      	movs	r3, #0
   85600:	f04f 30ff 	mov.w	r0, #4294967295
   85604:	461a      	mov	r2, r3
   85606:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8560a:	4619      	mov	r1, r3
   8560c:	930d      	str	r3, [sp, #52]	; 0x34
   8560e:	469b      	mov	fp, r3
   85610:	7863      	ldrb	r3, [r4, #1]
   85612:	f104 0a01 	add.w	sl, r4, #1
   85616:	900a      	str	r0, [sp, #40]	; 0x28
   85618:	f10a 0a01 	add.w	sl, sl, #1
   8561c:	f1a3 0020 	sub.w	r0, r3, #32
   85620:	2858      	cmp	r0, #88	; 0x58
   85622:	f200 83b7 	bhi.w	85d94 <_svfprintf_r+0x830>
   85626:	e8df f010 	tbh	[pc, r0, lsl #1]
   8562a:	034c      	.short	0x034c
   8562c:	03b503b5 	.word	0x03b503b5
   85630:	03b50354 	.word	0x03b50354
   85634:	03b503b5 	.word	0x03b503b5
   85638:	03b503b5 	.word	0x03b503b5
   8563c:	005903b5 	.word	0x005903b5
   85640:	03b50359 	.word	0x03b50359
   85644:	02140066 	.word	0x02140066
   85648:	022f03b5 	.word	0x022f03b5
   8564c:	03a503a5 	.word	0x03a503a5
   85650:	03a503a5 	.word	0x03a503a5
   85654:	03a503a5 	.word	0x03a503a5
   85658:	03a503a5 	.word	0x03a503a5
   8565c:	03b503a5 	.word	0x03b503a5
   85660:	03b503b5 	.word	0x03b503b5
   85664:	03b503b5 	.word	0x03b503b5
   85668:	03b503b5 	.word	0x03b503b5
   8566c:	03b503b5 	.word	0x03b503b5
   85670:	028b03b5 	.word	0x028b03b5
   85674:	03b502d3 	.word	0x03b502d3
   85678:	03b502d3 	.word	0x03b502d3
   8567c:	03b503b5 	.word	0x03b503b5
   85680:	031b03b5 	.word	0x031b03b5
   85684:	03b503b5 	.word	0x03b503b5
   85688:	03b50320 	.word	0x03b50320
   8568c:	03b503b5 	.word	0x03b503b5
   85690:	03b503b5 	.word	0x03b503b5
   85694:	03b50234 	.word	0x03b50234
   85698:	024b03b5 	.word	0x024b03b5
   8569c:	03b503b5 	.word	0x03b503b5
   856a0:	03b503b5 	.word	0x03b503b5
   856a4:	03b503b5 	.word	0x03b503b5
   856a8:	03b503b5 	.word	0x03b503b5
   856ac:	03b503b5 	.word	0x03b503b5
   856b0:	039e0276 	.word	0x039e0276
   856b4:	02d302d3 	.word	0x02d302d3
   856b8:	036302d3 	.word	0x036302d3
   856bc:	03b5039e 	.word	0x03b5039e
   856c0:	036803b5 	.word	0x036803b5
   856c4:	037503b5 	.word	0x037503b5
   856c8:	038c01dd 	.word	0x038c01dd
   856cc:	03b5035e 	.word	0x03b5035e
   856d0:	03b501f2 	.word	0x03b501f2
   856d4:	03b50087 	.word	0x03b50087
   856d8:	033203b5 	.word	0x033203b5
   856dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   856de:	6823      	ldr	r3, [r4, #0]
   856e0:	4618      	mov	r0, r3
   856e2:	930d      	str	r3, [sp, #52]	; 0x34
   856e4:	4623      	mov	r3, r4
   856e6:	2800      	cmp	r0, #0
   856e8:	f103 0304 	add.w	r3, r3, #4
   856ec:	930f      	str	r3, [sp, #60]	; 0x3c
   856ee:	da04      	bge.n	856fa <_svfprintf_r+0x196>
   856f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   856f2:	425b      	negs	r3, r3
   856f4:	930d      	str	r3, [sp, #52]	; 0x34
   856f6:	f04b 0b04 	orr.w	fp, fp, #4
   856fa:	f89a 3000 	ldrb.w	r3, [sl]
   856fe:	e78b      	b.n	85618 <_svfprintf_r+0xb4>
   85700:	aa25      	add	r2, sp, #148	; 0x94
   85702:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85704:	980c      	ldr	r0, [sp, #48]	; 0x30
   85706:	f003 f819 	bl	8873c <__ssprint_r>
   8570a:	b940      	cbnz	r0, 8571e <_svfprintf_r+0x1ba>
   8570c:	46c8      	mov	r8, r9
   8570e:	e76f      	b.n	855f0 <_svfprintf_r+0x8c>
   85710:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   85712:	b123      	cbz	r3, 8571e <_svfprintf_r+0x1ba>
   85714:	980c      	ldr	r0, [sp, #48]	; 0x30
   85716:	aa25      	add	r2, sp, #148	; 0x94
   85718:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8571a:	f003 f80f 	bl	8873c <__ssprint_r>
   8571e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85720:	899b      	ldrh	r3, [r3, #12]
   85722:	f013 0f40 	tst.w	r3, #64	; 0x40
   85726:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85728:	bf18      	it	ne
   8572a:	f04f 33ff 	movne.w	r3, #4294967295
   8572e:	9309      	str	r3, [sp, #36]	; 0x24
   85730:	9809      	ldr	r0, [sp, #36]	; 0x24
   85732:	b043      	add	sp, #268	; 0x10c
   85734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85738:	f01b 0f20 	tst.w	fp, #32
   8573c:	9311      	str	r3, [sp, #68]	; 0x44
   8573e:	f040 81af 	bne.w	85aa0 <_svfprintf_r+0x53c>
   85742:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85744:	f01b 0f10 	tst.w	fp, #16
   85748:	4613      	mov	r3, r2
   8574a:	f040 859a 	bne.w	86282 <_svfprintf_r+0xd1e>
   8574e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85752:	f000 8596 	beq.w	86282 <_svfprintf_r+0xd1e>
   85756:	2500      	movs	r5, #0
   85758:	2301      	movs	r3, #1
   8575a:	8814      	ldrh	r4, [r2, #0]
   8575c:	3204      	adds	r2, #4
   8575e:	920f      	str	r2, [sp, #60]	; 0x3c
   85760:	2200      	movs	r2, #0
   85762:	4617      	mov	r7, r2
   85764:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   85768:	990a      	ldr	r1, [sp, #40]	; 0x28
   8576a:	1c4a      	adds	r2, r1, #1
   8576c:	f000 8210 	beq.w	85b90 <_svfprintf_r+0x62c>
   85770:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   85774:	9207      	str	r2, [sp, #28]
   85776:	ea54 0205 	orrs.w	r2, r4, r5
   8577a:	f040 820f 	bne.w	85b9c <_svfprintf_r+0x638>
   8577e:	2900      	cmp	r1, #0
   85780:	f040 8431 	bne.w	85fe6 <_svfprintf_r+0xa82>
   85784:	2b00      	cmp	r3, #0
   85786:	f040 8539 	bne.w	861fc <_svfprintf_r+0xc98>
   8578a:	f01b 0301 	ands.w	r3, fp, #1
   8578e:	930e      	str	r3, [sp, #56]	; 0x38
   85790:	f000 8662 	beq.w	86458 <_svfprintf_r+0xef4>
   85794:	2330      	movs	r3, #48	; 0x30
   85796:	ae42      	add	r6, sp, #264	; 0x108
   85798:	f806 3d41 	strb.w	r3, [r6, #-65]!
   8579c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8579e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   857a0:	4293      	cmp	r3, r2
   857a2:	bfb8      	it	lt
   857a4:	4613      	movlt	r3, r2
   857a6:	9308      	str	r3, [sp, #32]
   857a8:	2300      	movs	r3, #0
   857aa:	9312      	str	r3, [sp, #72]	; 0x48
   857ac:	b117      	cbz	r7, 857b4 <_svfprintf_r+0x250>
   857ae:	9b08      	ldr	r3, [sp, #32]
   857b0:	3301      	adds	r3, #1
   857b2:	9308      	str	r3, [sp, #32]
   857b4:	9b07      	ldr	r3, [sp, #28]
   857b6:	f013 0302 	ands.w	r3, r3, #2
   857ba:	9310      	str	r3, [sp, #64]	; 0x40
   857bc:	d002      	beq.n	857c4 <_svfprintf_r+0x260>
   857be:	9b08      	ldr	r3, [sp, #32]
   857c0:	3302      	adds	r3, #2
   857c2:	9308      	str	r3, [sp, #32]
   857c4:	9b07      	ldr	r3, [sp, #28]
   857c6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   857ca:	f040 8310 	bne.w	85dee <_svfprintf_r+0x88a>
   857ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   857d0:	9a08      	ldr	r2, [sp, #32]
   857d2:	eba3 0b02 	sub.w	fp, r3, r2
   857d6:	f1bb 0f00 	cmp.w	fp, #0
   857da:	f340 8308 	ble.w	85dee <_svfprintf_r+0x88a>
   857de:	f1bb 0f10 	cmp.w	fp, #16
   857e2:	f340 87b2 	ble.w	8674a <_svfprintf_r+0x11e6>
   857e6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   857e8:	4643      	mov	r3, r8
   857ea:	4621      	mov	r1, r4
   857ec:	46a8      	mov	r8, r5
   857ee:	2710      	movs	r7, #16
   857f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   857f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   857f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   857f6:	e006      	b.n	85806 <_svfprintf_r+0x2a2>
   857f8:	f1ab 0b10 	sub.w	fp, fp, #16
   857fc:	f1bb 0f10 	cmp.w	fp, #16
   85800:	f103 0308 	add.w	r3, r3, #8
   85804:	dd18      	ble.n	85838 <_svfprintf_r+0x2d4>
   85806:	3201      	adds	r2, #1
   85808:	48ab      	ldr	r0, [pc, #684]	; (85ab8 <_svfprintf_r+0x554>)
   8580a:	3110      	adds	r1, #16
   8580c:	2a07      	cmp	r2, #7
   8580e:	9127      	str	r1, [sp, #156]	; 0x9c
   85810:	9226      	str	r2, [sp, #152]	; 0x98
   85812:	e883 0081 	stmia.w	r3, {r0, r7}
   85816:	ddef      	ble.n	857f8 <_svfprintf_r+0x294>
   85818:	aa25      	add	r2, sp, #148	; 0x94
   8581a:	4629      	mov	r1, r5
   8581c:	4620      	mov	r0, r4
   8581e:	f002 ff8d 	bl	8873c <__ssprint_r>
   85822:	2800      	cmp	r0, #0
   85824:	f47f af7b 	bne.w	8571e <_svfprintf_r+0x1ba>
   85828:	f1ab 0b10 	sub.w	fp, fp, #16
   8582c:	f1bb 0f10 	cmp.w	fp, #16
   85830:	464b      	mov	r3, r9
   85832:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85834:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85836:	dce6      	bgt.n	85806 <_svfprintf_r+0x2a2>
   85838:	4645      	mov	r5, r8
   8583a:	460c      	mov	r4, r1
   8583c:	4698      	mov	r8, r3
   8583e:	3201      	adds	r2, #1
   85840:	4b9d      	ldr	r3, [pc, #628]	; (85ab8 <_svfprintf_r+0x554>)
   85842:	445c      	add	r4, fp
   85844:	2a07      	cmp	r2, #7
   85846:	9427      	str	r4, [sp, #156]	; 0x9c
   85848:	9226      	str	r2, [sp, #152]	; 0x98
   8584a:	e888 0808 	stmia.w	r8, {r3, fp}
   8584e:	f300 82c3 	bgt.w	85dd8 <_svfprintf_r+0x874>
   85852:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85856:	f108 0808 	add.w	r8, r8, #8
   8585a:	b187      	cbz	r7, 8587e <_svfprintf_r+0x31a>
   8585c:	2101      	movs	r1, #1
   8585e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85860:	440c      	add	r4, r1
   85862:	440b      	add	r3, r1
   85864:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   85868:	2b07      	cmp	r3, #7
   8586a:	9427      	str	r4, [sp, #156]	; 0x9c
   8586c:	9326      	str	r3, [sp, #152]	; 0x98
   8586e:	f8c8 1004 	str.w	r1, [r8, #4]
   85872:	f8c8 2000 	str.w	r2, [r8]
   85876:	f300 83cd 	bgt.w	86014 <_svfprintf_r+0xab0>
   8587a:	f108 0808 	add.w	r8, r8, #8
   8587e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85880:	b17b      	cbz	r3, 858a2 <_svfprintf_r+0x33e>
   85882:	2102      	movs	r1, #2
   85884:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85886:	440c      	add	r4, r1
   85888:	3301      	adds	r3, #1
   8588a:	aa1e      	add	r2, sp, #120	; 0x78
   8588c:	2b07      	cmp	r3, #7
   8588e:	9427      	str	r4, [sp, #156]	; 0x9c
   85890:	9326      	str	r3, [sp, #152]	; 0x98
   85892:	f8c8 1004 	str.w	r1, [r8, #4]
   85896:	f8c8 2000 	str.w	r2, [r8]
   8589a:	f300 8411 	bgt.w	860c0 <_svfprintf_r+0xb5c>
   8589e:	f108 0808 	add.w	r8, r8, #8
   858a2:	2d80      	cmp	r5, #128	; 0x80
   858a4:	f000 8304 	beq.w	85eb0 <_svfprintf_r+0x94c>
   858a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   858aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   858ac:	1a9f      	subs	r7, r3, r2
   858ae:	2f00      	cmp	r7, #0
   858b0:	dd37      	ble.n	85922 <_svfprintf_r+0x3be>
   858b2:	2f10      	cmp	r7, #16
   858b4:	f340 8679 	ble.w	865aa <_svfprintf_r+0x1046>
   858b8:	4d80      	ldr	r5, [pc, #512]	; (85abc <_svfprintf_r+0x558>)
   858ba:	4642      	mov	r2, r8
   858bc:	4621      	mov	r1, r4
   858be:	46b0      	mov	r8, r6
   858c0:	f04f 0b10 	mov.w	fp, #16
   858c4:	462e      	mov	r6, r5
   858c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   858c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   858ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   858cc:	e004      	b.n	858d8 <_svfprintf_r+0x374>
   858ce:	3f10      	subs	r7, #16
   858d0:	2f10      	cmp	r7, #16
   858d2:	f102 0208 	add.w	r2, r2, #8
   858d6:	dd15      	ble.n	85904 <_svfprintf_r+0x3a0>
   858d8:	3301      	adds	r3, #1
   858da:	3110      	adds	r1, #16
   858dc:	2b07      	cmp	r3, #7
   858de:	9127      	str	r1, [sp, #156]	; 0x9c
   858e0:	9326      	str	r3, [sp, #152]	; 0x98
   858e2:	e882 0840 	stmia.w	r2, {r6, fp}
   858e6:	ddf2      	ble.n	858ce <_svfprintf_r+0x36a>
   858e8:	aa25      	add	r2, sp, #148	; 0x94
   858ea:	4629      	mov	r1, r5
   858ec:	4620      	mov	r0, r4
   858ee:	f002 ff25 	bl	8873c <__ssprint_r>
   858f2:	2800      	cmp	r0, #0
   858f4:	f47f af13 	bne.w	8571e <_svfprintf_r+0x1ba>
   858f8:	3f10      	subs	r7, #16
   858fa:	2f10      	cmp	r7, #16
   858fc:	464a      	mov	r2, r9
   858fe:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85900:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85902:	dce9      	bgt.n	858d8 <_svfprintf_r+0x374>
   85904:	4635      	mov	r5, r6
   85906:	460c      	mov	r4, r1
   85908:	4646      	mov	r6, r8
   8590a:	4690      	mov	r8, r2
   8590c:	3301      	adds	r3, #1
   8590e:	443c      	add	r4, r7
   85910:	2b07      	cmp	r3, #7
   85912:	9427      	str	r4, [sp, #156]	; 0x9c
   85914:	9326      	str	r3, [sp, #152]	; 0x98
   85916:	e888 00a0 	stmia.w	r8, {r5, r7}
   8591a:	f300 8370 	bgt.w	85ffe <_svfprintf_r+0xa9a>
   8591e:	f108 0808 	add.w	r8, r8, #8
   85922:	9b07      	ldr	r3, [sp, #28]
   85924:	05df      	lsls	r7, r3, #23
   85926:	f100 8264 	bmi.w	85df2 <_svfprintf_r+0x88e>
   8592a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8592c:	990e      	ldr	r1, [sp, #56]	; 0x38
   8592e:	3301      	adds	r3, #1
   85930:	440c      	add	r4, r1
   85932:	2b07      	cmp	r3, #7
   85934:	9427      	str	r4, [sp, #156]	; 0x9c
   85936:	f8c8 6000 	str.w	r6, [r8]
   8593a:	f8c8 1004 	str.w	r1, [r8, #4]
   8593e:	9326      	str	r3, [sp, #152]	; 0x98
   85940:	f300 83b3 	bgt.w	860aa <_svfprintf_r+0xb46>
   85944:	f108 0808 	add.w	r8, r8, #8
   85948:	9b07      	ldr	r3, [sp, #28]
   8594a:	075b      	lsls	r3, r3, #29
   8594c:	d53b      	bpl.n	859c6 <_svfprintf_r+0x462>
   8594e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85950:	9a08      	ldr	r2, [sp, #32]
   85952:	1a9d      	subs	r5, r3, r2
   85954:	2d00      	cmp	r5, #0
   85956:	dd36      	ble.n	859c6 <_svfprintf_r+0x462>
   85958:	2d10      	cmp	r5, #16
   8595a:	f340 8721 	ble.w	867a0 <_svfprintf_r+0x123c>
   8595e:	2610      	movs	r6, #16
   85960:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85962:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85964:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   85968:	e004      	b.n	85974 <_svfprintf_r+0x410>
   8596a:	3d10      	subs	r5, #16
   8596c:	2d10      	cmp	r5, #16
   8596e:	f108 0808 	add.w	r8, r8, #8
   85972:	dd16      	ble.n	859a2 <_svfprintf_r+0x43e>
   85974:	3301      	adds	r3, #1
   85976:	4a50      	ldr	r2, [pc, #320]	; (85ab8 <_svfprintf_r+0x554>)
   85978:	3410      	adds	r4, #16
   8597a:	2b07      	cmp	r3, #7
   8597c:	9427      	str	r4, [sp, #156]	; 0x9c
   8597e:	9326      	str	r3, [sp, #152]	; 0x98
   85980:	e888 0044 	stmia.w	r8, {r2, r6}
   85984:	ddf1      	ble.n	8596a <_svfprintf_r+0x406>
   85986:	aa25      	add	r2, sp, #148	; 0x94
   85988:	4659      	mov	r1, fp
   8598a:	4638      	mov	r0, r7
   8598c:	f002 fed6 	bl	8873c <__ssprint_r>
   85990:	2800      	cmp	r0, #0
   85992:	f47f aec4 	bne.w	8571e <_svfprintf_r+0x1ba>
   85996:	3d10      	subs	r5, #16
   85998:	2d10      	cmp	r5, #16
   8599a:	46c8      	mov	r8, r9
   8599c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8599e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   859a0:	dce8      	bgt.n	85974 <_svfprintf_r+0x410>
   859a2:	3301      	adds	r3, #1
   859a4:	4a44      	ldr	r2, [pc, #272]	; (85ab8 <_svfprintf_r+0x554>)
   859a6:	442c      	add	r4, r5
   859a8:	2b07      	cmp	r3, #7
   859aa:	9427      	str	r4, [sp, #156]	; 0x9c
   859ac:	9326      	str	r3, [sp, #152]	; 0x98
   859ae:	e888 0024 	stmia.w	r8, {r2, r5}
   859b2:	dd08      	ble.n	859c6 <_svfprintf_r+0x462>
   859b4:	aa25      	add	r2, sp, #148	; 0x94
   859b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   859b8:	980c      	ldr	r0, [sp, #48]	; 0x30
   859ba:	f002 febf 	bl	8873c <__ssprint_r>
   859be:	2800      	cmp	r0, #0
   859c0:	f47f aead 	bne.w	8571e <_svfprintf_r+0x1ba>
   859c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   859c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   859c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   859ca:	9908      	ldr	r1, [sp, #32]
   859cc:	428a      	cmp	r2, r1
   859ce:	bfac      	ite	ge
   859d0:	189b      	addge	r3, r3, r2
   859d2:	185b      	addlt	r3, r3, r1
   859d4:	9309      	str	r3, [sp, #36]	; 0x24
   859d6:	2c00      	cmp	r4, #0
   859d8:	f040 82fb 	bne.w	85fd2 <_svfprintf_r+0xa6e>
   859dc:	2300      	movs	r3, #0
   859de:	46c8      	mov	r8, r9
   859e0:	9326      	str	r3, [sp, #152]	; 0x98
   859e2:	e5e6      	b.n	855b2 <_svfprintf_r+0x4e>
   859e4:	9311      	str	r3, [sp, #68]	; 0x44
   859e6:	f01b 0320 	ands.w	r3, fp, #32
   859ea:	f040 8145 	bne.w	85c78 <_svfprintf_r+0x714>
   859ee:	f01b 0210 	ands.w	r2, fp, #16
   859f2:	f040 8466 	bne.w	862c2 <_svfprintf_r+0xd5e>
   859f6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   859fa:	f000 8462 	beq.w	862c2 <_svfprintf_r+0xd5e>
   859fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   85a00:	4613      	mov	r3, r2
   85a02:	460a      	mov	r2, r1
   85a04:	3204      	adds	r2, #4
   85a06:	880c      	ldrh	r4, [r1, #0]
   85a08:	2500      	movs	r5, #0
   85a0a:	920f      	str	r2, [sp, #60]	; 0x3c
   85a0c:	e6a8      	b.n	85760 <_svfprintf_r+0x1fc>
   85a0e:	2500      	movs	r5, #0
   85a10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85a12:	9311      	str	r3, [sp, #68]	; 0x44
   85a14:	6816      	ldr	r6, [r2, #0]
   85a16:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   85a1a:	1d14      	adds	r4, r2, #4
   85a1c:	2e00      	cmp	r6, #0
   85a1e:	f000 86cd 	beq.w	867bc <_svfprintf_r+0x1258>
   85a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85a24:	1c53      	adds	r3, r2, #1
   85a26:	f000 861b 	beq.w	86660 <_svfprintf_r+0x10fc>
   85a2a:	4629      	mov	r1, r5
   85a2c:	4630      	mov	r0, r6
   85a2e:	f002 faaf 	bl	87f90 <memchr>
   85a32:	2800      	cmp	r0, #0
   85a34:	f000 870d 	beq.w	86852 <_svfprintf_r+0x12ee>
   85a38:	1b83      	subs	r3, r0, r6
   85a3a:	950a      	str	r5, [sp, #40]	; 0x28
   85a3c:	930e      	str	r3, [sp, #56]	; 0x38
   85a3e:	940f      	str	r4, [sp, #60]	; 0x3c
   85a40:	f8cd b01c 	str.w	fp, [sp, #28]
   85a44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85a48:	9308      	str	r3, [sp, #32]
   85a4a:	9512      	str	r5, [sp, #72]	; 0x48
   85a4c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85a50:	e6ac      	b.n	857ac <_svfprintf_r+0x248>
   85a52:	f89a 3000 	ldrb.w	r3, [sl]
   85a56:	f10a 0401 	add.w	r4, sl, #1
   85a5a:	2b2a      	cmp	r3, #42	; 0x2a
   85a5c:	f000 87c2 	beq.w	869e4 <_svfprintf_r+0x1480>
   85a60:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85a64:	2809      	cmp	r0, #9
   85a66:	46a2      	mov	sl, r4
   85a68:	f200 8718 	bhi.w	8689c <_svfprintf_r+0x1338>
   85a6c:	2300      	movs	r3, #0
   85a6e:	461c      	mov	r4, r3
   85a70:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85a74:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   85a78:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   85a7c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85a80:	2809      	cmp	r0, #9
   85a82:	d9f5      	bls.n	85a70 <_svfprintf_r+0x50c>
   85a84:	940a      	str	r4, [sp, #40]	; 0x28
   85a86:	e5c9      	b.n	8561c <_svfprintf_r+0xb8>
   85a88:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   85a8c:	f89a 3000 	ldrb.w	r3, [sl]
   85a90:	e5c2      	b.n	85618 <_svfprintf_r+0xb4>
   85a92:	f04b 0b10 	orr.w	fp, fp, #16
   85a96:	f01b 0f20 	tst.w	fp, #32
   85a9a:	9311      	str	r3, [sp, #68]	; 0x44
   85a9c:	f43f ae51 	beq.w	85742 <_svfprintf_r+0x1de>
   85aa0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85aa2:	3407      	adds	r4, #7
   85aa4:	f024 0307 	bic.w	r3, r4, #7
   85aa8:	f103 0208 	add.w	r2, r3, #8
   85aac:	e9d3 4500 	ldrd	r4, r5, [r3]
   85ab0:	920f      	str	r2, [sp, #60]	; 0x3c
   85ab2:	2301      	movs	r3, #1
   85ab4:	e654      	b.n	85760 <_svfprintf_r+0x1fc>
   85ab6:	bf00      	nop
   85ab8:	00089678 	.word	0x00089678
   85abc:	00089688 	.word	0x00089688
   85ac0:	9311      	str	r3, [sp, #68]	; 0x44
   85ac2:	2a00      	cmp	r2, #0
   85ac4:	f040 87ad 	bne.w	86a22 <_svfprintf_r+0x14be>
   85ac8:	4bbe      	ldr	r3, [pc, #760]	; (85dc4 <_svfprintf_r+0x860>)
   85aca:	f01b 0f20 	tst.w	fp, #32
   85ace:	9318      	str	r3, [sp, #96]	; 0x60
   85ad0:	f040 80e7 	bne.w	85ca2 <_svfprintf_r+0x73e>
   85ad4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85ad6:	f01b 0f10 	tst.w	fp, #16
   85ada:	4613      	mov	r3, r2
   85adc:	f040 83d8 	bne.w	86290 <_svfprintf_r+0xd2c>
   85ae0:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85ae4:	f000 83d4 	beq.w	86290 <_svfprintf_r+0xd2c>
   85ae8:	2500      	movs	r5, #0
   85aea:	3304      	adds	r3, #4
   85aec:	8814      	ldrh	r4, [r2, #0]
   85aee:	930f      	str	r3, [sp, #60]	; 0x3c
   85af0:	f01b 0f01 	tst.w	fp, #1
   85af4:	f000 80e3 	beq.w	85cbe <_svfprintf_r+0x75a>
   85af8:	ea54 0305 	orrs.w	r3, r4, r5
   85afc:	f000 80df 	beq.w	85cbe <_svfprintf_r+0x75a>
   85b00:	2330      	movs	r3, #48	; 0x30
   85b02:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   85b06:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   85b0a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   85b0e:	f04b 0b02 	orr.w	fp, fp, #2
   85b12:	2302      	movs	r3, #2
   85b14:	e624      	b.n	85760 <_svfprintf_r+0x1fc>
   85b16:	2201      	movs	r2, #1
   85b18:	9311      	str	r3, [sp, #68]	; 0x44
   85b1a:	2300      	movs	r3, #0
   85b1c:	4611      	mov	r1, r2
   85b1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   85b20:	9208      	str	r2, [sp, #32]
   85b22:	6802      	ldr	r2, [r0, #0]
   85b24:	461f      	mov	r7, r3
   85b26:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85b2a:	930a      	str	r3, [sp, #40]	; 0x28
   85b2c:	9312      	str	r3, [sp, #72]	; 0x48
   85b2e:	1d03      	adds	r3, r0, #4
   85b30:	f8cd b01c 	str.w	fp, [sp, #28]
   85b34:	910e      	str	r1, [sp, #56]	; 0x38
   85b36:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   85b3a:	930f      	str	r3, [sp, #60]	; 0x3c
   85b3c:	ae28      	add	r6, sp, #160	; 0xa0
   85b3e:	e639      	b.n	857b4 <_svfprintf_r+0x250>
   85b40:	9311      	str	r3, [sp, #68]	; 0x44
   85b42:	2a00      	cmp	r2, #0
   85b44:	f040 8784 	bne.w	86a50 <_svfprintf_r+0x14ec>
   85b48:	f04b 0b10 	orr.w	fp, fp, #16
   85b4c:	f01b 0f20 	tst.w	fp, #32
   85b50:	f040 8475 	bne.w	8643e <_svfprintf_r+0xeda>
   85b54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85b56:	f01b 0f10 	tst.w	fp, #16
   85b5a:	4613      	mov	r3, r2
   85b5c:	f040 839d 	bne.w	8629a <_svfprintf_r+0xd36>
   85b60:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85b64:	f000 8399 	beq.w	8629a <_svfprintf_r+0xd36>
   85b68:	f9b2 4000 	ldrsh.w	r4, [r2]
   85b6c:	3304      	adds	r3, #4
   85b6e:	17e5      	asrs	r5, r4, #31
   85b70:	930f      	str	r3, [sp, #60]	; 0x3c
   85b72:	4622      	mov	r2, r4
   85b74:	462b      	mov	r3, r5
   85b76:	2a00      	cmp	r2, #0
   85b78:	f173 0300 	sbcs.w	r3, r3, #0
   85b7c:	f2c0 8398 	blt.w	862b0 <_svfprintf_r+0xd4c>
   85b80:	990a      	ldr	r1, [sp, #40]	; 0x28
   85b82:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85b86:	1c4a      	adds	r2, r1, #1
   85b88:	f04f 0301 	mov.w	r3, #1
   85b8c:	f47f adf0 	bne.w	85770 <_svfprintf_r+0x20c>
   85b90:	ea54 0205 	orrs.w	r2, r4, r5
   85b94:	f000 8229 	beq.w	85fea <_svfprintf_r+0xa86>
   85b98:	f8cd b01c 	str.w	fp, [sp, #28]
   85b9c:	2b01      	cmp	r3, #1
   85b9e:	f000 830e 	beq.w	861be <_svfprintf_r+0xc5a>
   85ba2:	2b02      	cmp	r3, #2
   85ba4:	f040 829c 	bne.w	860e0 <_svfprintf_r+0xb7c>
   85ba8:	464e      	mov	r6, r9
   85baa:	9818      	ldr	r0, [sp, #96]	; 0x60
   85bac:	0923      	lsrs	r3, r4, #4
   85bae:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   85bb2:	0929      	lsrs	r1, r5, #4
   85bb4:	f004 020f 	and.w	r2, r4, #15
   85bb8:	460d      	mov	r5, r1
   85bba:	461c      	mov	r4, r3
   85bbc:	5c83      	ldrb	r3, [r0, r2]
   85bbe:	f806 3d01 	strb.w	r3, [r6, #-1]!
   85bc2:	ea54 0305 	orrs.w	r3, r4, r5
   85bc6:	d1f1      	bne.n	85bac <_svfprintf_r+0x648>
   85bc8:	eba9 0306 	sub.w	r3, r9, r6
   85bcc:	930e      	str	r3, [sp, #56]	; 0x38
   85bce:	e5e5      	b.n	8579c <_svfprintf_r+0x238>
   85bd0:	9311      	str	r3, [sp, #68]	; 0x44
   85bd2:	2a00      	cmp	r2, #0
   85bd4:	f040 8738 	bne.w	86a48 <_svfprintf_r+0x14e4>
   85bd8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85bda:	f01b 0f08 	tst.w	fp, #8
   85bde:	f104 0407 	add.w	r4, r4, #7
   85be2:	f000 84cf 	beq.w	86584 <_svfprintf_r+0x1020>
   85be6:	f024 0307 	bic.w	r3, r4, #7
   85bea:	f103 0208 	add.w	r2, r3, #8
   85bee:	920f      	str	r2, [sp, #60]	; 0x3c
   85bf0:	681a      	ldr	r2, [r3, #0]
   85bf2:	685b      	ldr	r3, [r3, #4]
   85bf4:	9215      	str	r2, [sp, #84]	; 0x54
   85bf6:	9314      	str	r3, [sp, #80]	; 0x50
   85bf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85bfa:	9d15      	ldr	r5, [sp, #84]	; 0x54
   85bfc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   85c00:	4628      	mov	r0, r5
   85c02:	4621      	mov	r1, r4
   85c04:	f04f 32ff 	mov.w	r2, #4294967295
   85c08:	4b6f      	ldr	r3, [pc, #444]	; (85dc8 <_svfprintf_r+0x864>)
   85c0a:	f003 faa1 	bl	89150 <__aeabi_dcmpun>
   85c0e:	2800      	cmp	r0, #0
   85c10:	f040 8434 	bne.w	8647c <_svfprintf_r+0xf18>
   85c14:	4628      	mov	r0, r5
   85c16:	4621      	mov	r1, r4
   85c18:	f04f 32ff 	mov.w	r2, #4294967295
   85c1c:	4b6a      	ldr	r3, [pc, #424]	; (85dc8 <_svfprintf_r+0x864>)
   85c1e:	f003 fa79 	bl	89114 <__aeabi_dcmple>
   85c22:	2800      	cmp	r0, #0
   85c24:	f040 842a 	bne.w	8647c <_svfprintf_r+0xf18>
   85c28:	a815      	add	r0, sp, #84	; 0x54
   85c2a:	c80d      	ldmia	r0, {r0, r2, r3}
   85c2c:	9914      	ldr	r1, [sp, #80]	; 0x50
   85c2e:	f003 fa67 	bl	89100 <__aeabi_dcmplt>
   85c32:	2800      	cmp	r0, #0
   85c34:	f040 85d4 	bne.w	867e0 <_svfprintf_r+0x127c>
   85c38:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85c3c:	2303      	movs	r3, #3
   85c3e:	461a      	mov	r2, r3
   85c40:	9308      	str	r3, [sp, #32]
   85c42:	2300      	movs	r3, #0
   85c44:	4e61      	ldr	r6, [pc, #388]	; (85dcc <_svfprintf_r+0x868>)
   85c46:	4619      	mov	r1, r3
   85c48:	930a      	str	r3, [sp, #40]	; 0x28
   85c4a:	4b61      	ldr	r3, [pc, #388]	; (85dd0 <_svfprintf_r+0x86c>)
   85c4c:	920e      	str	r2, [sp, #56]	; 0x38
   85c4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85c50:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   85c54:	9007      	str	r0, [sp, #28]
   85c56:	9112      	str	r1, [sp, #72]	; 0x48
   85c58:	2a47      	cmp	r2, #71	; 0x47
   85c5a:	bfd8      	it	le
   85c5c:	461e      	movle	r6, r3
   85c5e:	e5a5      	b.n	857ac <_svfprintf_r+0x248>
   85c60:	f04b 0b08 	orr.w	fp, fp, #8
   85c64:	f89a 3000 	ldrb.w	r3, [sl]
   85c68:	e4d6      	b.n	85618 <_svfprintf_r+0xb4>
   85c6a:	f04b 0b10 	orr.w	fp, fp, #16
   85c6e:	9311      	str	r3, [sp, #68]	; 0x44
   85c70:	f01b 0320 	ands.w	r3, fp, #32
   85c74:	f43f aebb 	beq.w	859ee <_svfprintf_r+0x48a>
   85c78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85c7a:	3407      	adds	r4, #7
   85c7c:	f024 0307 	bic.w	r3, r4, #7
   85c80:	f103 0208 	add.w	r2, r3, #8
   85c84:	e9d3 4500 	ldrd	r4, r5, [r3]
   85c88:	920f      	str	r2, [sp, #60]	; 0x3c
   85c8a:	2300      	movs	r3, #0
   85c8c:	e568      	b.n	85760 <_svfprintf_r+0x1fc>
   85c8e:	9311      	str	r3, [sp, #68]	; 0x44
   85c90:	2a00      	cmp	r2, #0
   85c92:	f040 86c2 	bne.w	86a1a <_svfprintf_r+0x14b6>
   85c96:	4b4f      	ldr	r3, [pc, #316]	; (85dd4 <_svfprintf_r+0x870>)
   85c98:	f01b 0f20 	tst.w	fp, #32
   85c9c:	9318      	str	r3, [sp, #96]	; 0x60
   85c9e:	f43f af19 	beq.w	85ad4 <_svfprintf_r+0x570>
   85ca2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85ca4:	f01b 0f01 	tst.w	fp, #1
   85ca8:	f104 0407 	add.w	r4, r4, #7
   85cac:	f024 0307 	bic.w	r3, r4, #7
   85cb0:	f103 0208 	add.w	r2, r3, #8
   85cb4:	920f      	str	r2, [sp, #60]	; 0x3c
   85cb6:	e9d3 4500 	ldrd	r4, r5, [r3]
   85cba:	f47f af1d 	bne.w	85af8 <_svfprintf_r+0x594>
   85cbe:	2302      	movs	r3, #2
   85cc0:	e54e      	b.n	85760 <_svfprintf_r+0x1fc>
   85cc2:	f89a 3000 	ldrb.w	r3, [sl]
   85cc6:	2900      	cmp	r1, #0
   85cc8:	f47f aca6 	bne.w	85618 <_svfprintf_r+0xb4>
   85ccc:	2201      	movs	r2, #1
   85cce:	2120      	movs	r1, #32
   85cd0:	e4a2      	b.n	85618 <_svfprintf_r+0xb4>
   85cd2:	f04b 0b01 	orr.w	fp, fp, #1
   85cd6:	f89a 3000 	ldrb.w	r3, [sl]
   85cda:	e49d      	b.n	85618 <_svfprintf_r+0xb4>
   85cdc:	f89a 3000 	ldrb.w	r3, [sl]
   85ce0:	2201      	movs	r2, #1
   85ce2:	212b      	movs	r1, #43	; 0x2b
   85ce4:	e498      	b.n	85618 <_svfprintf_r+0xb4>
   85ce6:	f04b 0b20 	orr.w	fp, fp, #32
   85cea:	f89a 3000 	ldrb.w	r3, [sl]
   85cee:	e493      	b.n	85618 <_svfprintf_r+0xb4>
   85cf0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   85cf4:	f89a 3000 	ldrb.w	r3, [sl]
   85cf8:	e48e      	b.n	85618 <_svfprintf_r+0xb4>
   85cfa:	f89a 3000 	ldrb.w	r3, [sl]
   85cfe:	2b6c      	cmp	r3, #108	; 0x6c
   85d00:	bf03      	ittte	eq
   85d02:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   85d06:	f04b 0b20 	orreq.w	fp, fp, #32
   85d0a:	f10a 0a01 	addeq.w	sl, sl, #1
   85d0e:	f04b 0b10 	orrne.w	fp, fp, #16
   85d12:	e481      	b.n	85618 <_svfprintf_r+0xb4>
   85d14:	2a00      	cmp	r2, #0
   85d16:	f040 867c 	bne.w	86a12 <_svfprintf_r+0x14ae>
   85d1a:	f01b 0f20 	tst.w	fp, #32
   85d1e:	f040 8452 	bne.w	865c6 <_svfprintf_r+0x1062>
   85d22:	f01b 0f10 	tst.w	fp, #16
   85d26:	f040 8438 	bne.w	8659a <_svfprintf_r+0x1036>
   85d2a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85d2e:	f000 8434 	beq.w	8659a <_svfprintf_r+0x1036>
   85d32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85d34:	6813      	ldr	r3, [r2, #0]
   85d36:	3204      	adds	r2, #4
   85d38:	920f      	str	r2, [sp, #60]	; 0x3c
   85d3a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   85d3e:	801a      	strh	r2, [r3, #0]
   85d40:	e437      	b.n	855b2 <_svfprintf_r+0x4e>
   85d42:	2378      	movs	r3, #120	; 0x78
   85d44:	2230      	movs	r2, #48	; 0x30
   85d46:	980f      	ldr	r0, [sp, #60]	; 0x3c
   85d48:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   85d4c:	9311      	str	r3, [sp, #68]	; 0x44
   85d4e:	1d03      	adds	r3, r0, #4
   85d50:	930f      	str	r3, [sp, #60]	; 0x3c
   85d52:	4b20      	ldr	r3, [pc, #128]	; (85dd4 <_svfprintf_r+0x870>)
   85d54:	6804      	ldr	r4, [r0, #0]
   85d56:	9318      	str	r3, [sp, #96]	; 0x60
   85d58:	f04b 0b02 	orr.w	fp, fp, #2
   85d5c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   85d60:	2500      	movs	r5, #0
   85d62:	2302      	movs	r3, #2
   85d64:	e4fc      	b.n	85760 <_svfprintf_r+0x1fc>
   85d66:	9311      	str	r3, [sp, #68]	; 0x44
   85d68:	2a00      	cmp	r2, #0
   85d6a:	f43f aeef 	beq.w	85b4c <_svfprintf_r+0x5e8>
   85d6e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85d72:	e6eb      	b.n	85b4c <_svfprintf_r+0x5e8>
   85d74:	2000      	movs	r0, #0
   85d76:	4604      	mov	r4, r0
   85d78:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85d7c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85d80:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   85d84:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   85d88:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85d8c:	2809      	cmp	r0, #9
   85d8e:	d9f5      	bls.n	85d7c <_svfprintf_r+0x818>
   85d90:	940d      	str	r4, [sp, #52]	; 0x34
   85d92:	e443      	b.n	8561c <_svfprintf_r+0xb8>
   85d94:	9311      	str	r3, [sp, #68]	; 0x44
   85d96:	2a00      	cmp	r2, #0
   85d98:	f040 864a 	bne.w	86a30 <_svfprintf_r+0x14cc>
   85d9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85d9e:	2a00      	cmp	r2, #0
   85da0:	f43f acb6 	beq.w	85710 <_svfprintf_r+0x1ac>
   85da4:	2300      	movs	r3, #0
   85da6:	2101      	movs	r1, #1
   85da8:	461f      	mov	r7, r3
   85daa:	9108      	str	r1, [sp, #32]
   85dac:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   85db0:	f8cd b01c 	str.w	fp, [sp, #28]
   85db4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85db8:	930a      	str	r3, [sp, #40]	; 0x28
   85dba:	9312      	str	r3, [sp, #72]	; 0x48
   85dbc:	910e      	str	r1, [sp, #56]	; 0x38
   85dbe:	ae28      	add	r6, sp, #160	; 0xa0
   85dc0:	e4f8      	b.n	857b4 <_svfprintf_r+0x250>
   85dc2:	bf00      	nop
   85dc4:	00089644 	.word	0x00089644
   85dc8:	7fefffff 	.word	0x7fefffff
   85dcc:	00089638 	.word	0x00089638
   85dd0:	00089634 	.word	0x00089634
   85dd4:	00089658 	.word	0x00089658
   85dd8:	aa25      	add	r2, sp, #148	; 0x94
   85dda:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85ddc:	980c      	ldr	r0, [sp, #48]	; 0x30
   85dde:	f002 fcad 	bl	8873c <__ssprint_r>
   85de2:	2800      	cmp	r0, #0
   85de4:	f47f ac9b 	bne.w	8571e <_svfprintf_r+0x1ba>
   85de8:	46c8      	mov	r8, r9
   85dea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85dee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85df0:	e533      	b.n	8585a <_svfprintf_r+0x2f6>
   85df2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85df4:	2b65      	cmp	r3, #101	; 0x65
   85df6:	f340 809a 	ble.w	85f2e <_svfprintf_r+0x9ca>
   85dfa:	a815      	add	r0, sp, #84	; 0x54
   85dfc:	c80d      	ldmia	r0, {r0, r2, r3}
   85dfe:	9914      	ldr	r1, [sp, #80]	; 0x50
   85e00:	f003 f974 	bl	890ec <__aeabi_dcmpeq>
   85e04:	2800      	cmp	r0, #0
   85e06:	f000 8193 	beq.w	86130 <_svfprintf_r+0xbcc>
   85e0a:	2101      	movs	r1, #1
   85e0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e0e:	4ab5      	ldr	r2, [pc, #724]	; (860e4 <_svfprintf_r+0xb80>)
   85e10:	440b      	add	r3, r1
   85e12:	440c      	add	r4, r1
   85e14:	2b07      	cmp	r3, #7
   85e16:	9427      	str	r4, [sp, #156]	; 0x9c
   85e18:	9326      	str	r3, [sp, #152]	; 0x98
   85e1a:	f8c8 1004 	str.w	r1, [r8, #4]
   85e1e:	f8c8 2000 	str.w	r2, [r8]
   85e22:	f300 83c6 	bgt.w	865b2 <_svfprintf_r+0x104e>
   85e26:	f108 0808 	add.w	r8, r8, #8
   85e2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85e2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85e2e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85e30:	4293      	cmp	r3, r2
   85e32:	db03      	blt.n	85e3c <_svfprintf_r+0x8d8>
   85e34:	9b07      	ldr	r3, [sp, #28]
   85e36:	07dd      	lsls	r5, r3, #31
   85e38:	f57f ad86 	bpl.w	85948 <_svfprintf_r+0x3e4>
   85e3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e3e:	9919      	ldr	r1, [sp, #100]	; 0x64
   85e40:	3301      	adds	r3, #1
   85e42:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   85e44:	440c      	add	r4, r1
   85e46:	2b07      	cmp	r3, #7
   85e48:	f8c8 2000 	str.w	r2, [r8]
   85e4c:	f8c8 1004 	str.w	r1, [r8, #4]
   85e50:	9427      	str	r4, [sp, #156]	; 0x9c
   85e52:	9326      	str	r3, [sp, #152]	; 0x98
   85e54:	f300 83c4 	bgt.w	865e0 <_svfprintf_r+0x107c>
   85e58:	f108 0808 	add.w	r8, r8, #8
   85e5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85e5e:	1e5e      	subs	r6, r3, #1
   85e60:	2e00      	cmp	r6, #0
   85e62:	f77f ad71 	ble.w	85948 <_svfprintf_r+0x3e4>
   85e66:	2e10      	cmp	r6, #16
   85e68:	f340 8575 	ble.w	86956 <_svfprintf_r+0x13f2>
   85e6c:	4622      	mov	r2, r4
   85e6e:	2710      	movs	r7, #16
   85e70:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e72:	4d9d      	ldr	r5, [pc, #628]	; (860e8 <_svfprintf_r+0xb84>)
   85e74:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   85e78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85e7a:	e005      	b.n	85e88 <_svfprintf_r+0x924>
   85e7c:	f108 0808 	add.w	r8, r8, #8
   85e80:	3e10      	subs	r6, #16
   85e82:	2e10      	cmp	r6, #16
   85e84:	f340 8225 	ble.w	862d2 <_svfprintf_r+0xd6e>
   85e88:	3301      	adds	r3, #1
   85e8a:	3210      	adds	r2, #16
   85e8c:	2b07      	cmp	r3, #7
   85e8e:	9227      	str	r2, [sp, #156]	; 0x9c
   85e90:	9326      	str	r3, [sp, #152]	; 0x98
   85e92:	e888 00a0 	stmia.w	r8, {r5, r7}
   85e96:	ddf1      	ble.n	85e7c <_svfprintf_r+0x918>
   85e98:	aa25      	add	r2, sp, #148	; 0x94
   85e9a:	4621      	mov	r1, r4
   85e9c:	4658      	mov	r0, fp
   85e9e:	f002 fc4d 	bl	8873c <__ssprint_r>
   85ea2:	2800      	cmp	r0, #0
   85ea4:	f47f ac3b 	bne.w	8571e <_svfprintf_r+0x1ba>
   85ea8:	46c8      	mov	r8, r9
   85eaa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85eac:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85eae:	e7e7      	b.n	85e80 <_svfprintf_r+0x91c>
   85eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85eb2:	9a08      	ldr	r2, [sp, #32]
   85eb4:	1a9f      	subs	r7, r3, r2
   85eb6:	2f00      	cmp	r7, #0
   85eb8:	f77f acf6 	ble.w	858a8 <_svfprintf_r+0x344>
   85ebc:	2f10      	cmp	r7, #16
   85ebe:	f340 84a8 	ble.w	86812 <_svfprintf_r+0x12ae>
   85ec2:	4d89      	ldr	r5, [pc, #548]	; (860e8 <_svfprintf_r+0xb84>)
   85ec4:	4642      	mov	r2, r8
   85ec6:	4621      	mov	r1, r4
   85ec8:	46b0      	mov	r8, r6
   85eca:	f04f 0b10 	mov.w	fp, #16
   85ece:	462e      	mov	r6, r5
   85ed0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85ed2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85ed4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85ed6:	e004      	b.n	85ee2 <_svfprintf_r+0x97e>
   85ed8:	3f10      	subs	r7, #16
   85eda:	2f10      	cmp	r7, #16
   85edc:	f102 0208 	add.w	r2, r2, #8
   85ee0:	dd15      	ble.n	85f0e <_svfprintf_r+0x9aa>
   85ee2:	3301      	adds	r3, #1
   85ee4:	3110      	adds	r1, #16
   85ee6:	2b07      	cmp	r3, #7
   85ee8:	9127      	str	r1, [sp, #156]	; 0x9c
   85eea:	9326      	str	r3, [sp, #152]	; 0x98
   85eec:	e882 0840 	stmia.w	r2, {r6, fp}
   85ef0:	ddf2      	ble.n	85ed8 <_svfprintf_r+0x974>
   85ef2:	aa25      	add	r2, sp, #148	; 0x94
   85ef4:	4629      	mov	r1, r5
   85ef6:	4620      	mov	r0, r4
   85ef8:	f002 fc20 	bl	8873c <__ssprint_r>
   85efc:	2800      	cmp	r0, #0
   85efe:	f47f ac0e 	bne.w	8571e <_svfprintf_r+0x1ba>
   85f02:	3f10      	subs	r7, #16
   85f04:	2f10      	cmp	r7, #16
   85f06:	464a      	mov	r2, r9
   85f08:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85f0c:	dce9      	bgt.n	85ee2 <_svfprintf_r+0x97e>
   85f0e:	4635      	mov	r5, r6
   85f10:	460c      	mov	r4, r1
   85f12:	4646      	mov	r6, r8
   85f14:	4690      	mov	r8, r2
   85f16:	3301      	adds	r3, #1
   85f18:	443c      	add	r4, r7
   85f1a:	2b07      	cmp	r3, #7
   85f1c:	9427      	str	r4, [sp, #156]	; 0x9c
   85f1e:	9326      	str	r3, [sp, #152]	; 0x98
   85f20:	e888 00a0 	stmia.w	r8, {r5, r7}
   85f24:	f300 829e 	bgt.w	86464 <_svfprintf_r+0xf00>
   85f28:	f108 0808 	add.w	r8, r8, #8
   85f2c:	e4bc      	b.n	858a8 <_svfprintf_r+0x344>
   85f2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85f30:	2b01      	cmp	r3, #1
   85f32:	f340 824f 	ble.w	863d4 <_svfprintf_r+0xe70>
   85f36:	2301      	movs	r3, #1
   85f38:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85f3a:	441c      	add	r4, r3
   85f3c:	441f      	add	r7, r3
   85f3e:	2f07      	cmp	r7, #7
   85f40:	9427      	str	r4, [sp, #156]	; 0x9c
   85f42:	f8c8 6000 	str.w	r6, [r8]
   85f46:	9726      	str	r7, [sp, #152]	; 0x98
   85f48:	f8c8 3004 	str.w	r3, [r8, #4]
   85f4c:	f300 825f 	bgt.w	8640e <_svfprintf_r+0xeaa>
   85f50:	f108 0808 	add.w	r8, r8, #8
   85f54:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85f56:	3701      	adds	r7, #1
   85f58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   85f5a:	4414      	add	r4, r2
   85f5c:	2f07      	cmp	r7, #7
   85f5e:	9427      	str	r4, [sp, #156]	; 0x9c
   85f60:	9726      	str	r7, [sp, #152]	; 0x98
   85f62:	f8c8 3000 	str.w	r3, [r8]
   85f66:	f8c8 2004 	str.w	r2, [r8, #4]
   85f6a:	f300 825c 	bgt.w	86426 <_svfprintf_r+0xec2>
   85f6e:	f108 0808 	add.w	r8, r8, #8
   85f72:	a815      	add	r0, sp, #84	; 0x54
   85f74:	c80d      	ldmia	r0, {r0, r2, r3}
   85f76:	9914      	ldr	r1, [sp, #80]	; 0x50
   85f78:	f003 f8b8 	bl	890ec <__aeabi_dcmpeq>
   85f7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85f7e:	2800      	cmp	r0, #0
   85f80:	f040 8141 	bne.w	86206 <_svfprintf_r+0xca2>
   85f84:	3b01      	subs	r3, #1
   85f86:	3701      	adds	r7, #1
   85f88:	3601      	adds	r6, #1
   85f8a:	441c      	add	r4, r3
   85f8c:	2f07      	cmp	r7, #7
   85f8e:	f8c8 6000 	str.w	r6, [r8]
   85f92:	9726      	str	r7, [sp, #152]	; 0x98
   85f94:	9427      	str	r4, [sp, #156]	; 0x9c
   85f96:	f8c8 3004 	str.w	r3, [r8, #4]
   85f9a:	f300 8166 	bgt.w	8626a <_svfprintf_r+0xd06>
   85f9e:	f108 0808 	add.w	r8, r8, #8
   85fa2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   85fa4:	3701      	adds	r7, #1
   85fa6:	4414      	add	r4, r2
   85fa8:	ab21      	add	r3, sp, #132	; 0x84
   85faa:	2f07      	cmp	r7, #7
   85fac:	9427      	str	r4, [sp, #156]	; 0x9c
   85fae:	9726      	str	r7, [sp, #152]	; 0x98
   85fb0:	f8c8 2004 	str.w	r2, [r8, #4]
   85fb4:	f8c8 3000 	str.w	r3, [r8]
   85fb8:	f77f acc4 	ble.w	85944 <_svfprintf_r+0x3e0>
   85fbc:	aa25      	add	r2, sp, #148	; 0x94
   85fbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85fc0:	980c      	ldr	r0, [sp, #48]	; 0x30
   85fc2:	f002 fbbb 	bl	8873c <__ssprint_r>
   85fc6:	2800      	cmp	r0, #0
   85fc8:	f47f aba9 	bne.w	8571e <_svfprintf_r+0x1ba>
   85fcc:	46c8      	mov	r8, r9
   85fce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85fd0:	e4ba      	b.n	85948 <_svfprintf_r+0x3e4>
   85fd2:	aa25      	add	r2, sp, #148	; 0x94
   85fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85fd6:	980c      	ldr	r0, [sp, #48]	; 0x30
   85fd8:	f002 fbb0 	bl	8873c <__ssprint_r>
   85fdc:	2800      	cmp	r0, #0
   85fde:	f43f acfd 	beq.w	859dc <_svfprintf_r+0x478>
   85fe2:	f7ff bb9c 	b.w	8571e <_svfprintf_r+0x1ba>
   85fe6:	f8dd b01c 	ldr.w	fp, [sp, #28]
   85fea:	2b01      	cmp	r3, #1
   85fec:	f000 817e 	beq.w	862ec <_svfprintf_r+0xd88>
   85ff0:	2b02      	cmp	r3, #2
   85ff2:	d171      	bne.n	860d8 <_svfprintf_r+0xb74>
   85ff4:	f8cd b01c 	str.w	fp, [sp, #28]
   85ff8:	2400      	movs	r4, #0
   85ffa:	2500      	movs	r5, #0
   85ffc:	e5d4      	b.n	85ba8 <_svfprintf_r+0x644>
   85ffe:	aa25      	add	r2, sp, #148	; 0x94
   86000:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86002:	980c      	ldr	r0, [sp, #48]	; 0x30
   86004:	f002 fb9a 	bl	8873c <__ssprint_r>
   86008:	2800      	cmp	r0, #0
   8600a:	f47f ab88 	bne.w	8571e <_svfprintf_r+0x1ba>
   8600e:	46c8      	mov	r8, r9
   86010:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86012:	e486      	b.n	85922 <_svfprintf_r+0x3be>
   86014:	aa25      	add	r2, sp, #148	; 0x94
   86016:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86018:	980c      	ldr	r0, [sp, #48]	; 0x30
   8601a:	f002 fb8f 	bl	8873c <__ssprint_r>
   8601e:	2800      	cmp	r0, #0
   86020:	f47f ab7d 	bne.w	8571e <_svfprintf_r+0x1ba>
   86024:	46c8      	mov	r8, r9
   86026:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86028:	e429      	b.n	8587e <_svfprintf_r+0x31a>
   8602a:	2001      	movs	r0, #1
   8602c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8602e:	4a2d      	ldr	r2, [pc, #180]	; (860e4 <_svfprintf_r+0xb80>)
   86030:	4403      	add	r3, r0
   86032:	4404      	add	r4, r0
   86034:	2b07      	cmp	r3, #7
   86036:	9427      	str	r4, [sp, #156]	; 0x9c
   86038:	9326      	str	r3, [sp, #152]	; 0x98
   8603a:	f8c8 0004 	str.w	r0, [r8, #4]
   8603e:	f8c8 2000 	str.w	r2, [r8]
   86042:	f340 82d8 	ble.w	865f6 <_svfprintf_r+0x1092>
   86046:	aa25      	add	r2, sp, #148	; 0x94
   86048:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8604a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8604c:	f002 fb76 	bl	8873c <__ssprint_r>
   86050:	2800      	cmp	r0, #0
   86052:	f47f ab64 	bne.w	8571e <_svfprintf_r+0x1ba>
   86056:	46c8      	mov	r8, r9
   86058:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8605a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8605c:	b929      	cbnz	r1, 8606a <_svfprintf_r+0xb06>
   8605e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86060:	b91b      	cbnz	r3, 8606a <_svfprintf_r+0xb06>
   86062:	9b07      	ldr	r3, [sp, #28]
   86064:	07d8      	lsls	r0, r3, #31
   86066:	f57f ac6f 	bpl.w	85948 <_svfprintf_r+0x3e4>
   8606a:	9819      	ldr	r0, [sp, #100]	; 0x64
   8606c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8606e:	4602      	mov	r2, r0
   86070:	3301      	adds	r3, #1
   86072:	4422      	add	r2, r4
   86074:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   86076:	2b07      	cmp	r3, #7
   86078:	9227      	str	r2, [sp, #156]	; 0x9c
   8607a:	f8c8 4000 	str.w	r4, [r8]
   8607e:	f8c8 0004 	str.w	r0, [r8, #4]
   86082:	9326      	str	r3, [sp, #152]	; 0x98
   86084:	f300 8431 	bgt.w	868ea <_svfprintf_r+0x1386>
   86088:	f108 0808 	add.w	r8, r8, #8
   8608c:	2900      	cmp	r1, #0
   8608e:	f2c0 8409 	blt.w	868a4 <_svfprintf_r+0x1340>
   86092:	9913      	ldr	r1, [sp, #76]	; 0x4c
   86094:	3301      	adds	r3, #1
   86096:	188c      	adds	r4, r1, r2
   86098:	2b07      	cmp	r3, #7
   8609a:	9427      	str	r4, [sp, #156]	; 0x9c
   8609c:	9326      	str	r3, [sp, #152]	; 0x98
   8609e:	f8c8 6000 	str.w	r6, [r8]
   860a2:	f8c8 1004 	str.w	r1, [r8, #4]
   860a6:	f77f ac4d 	ble.w	85944 <_svfprintf_r+0x3e0>
   860aa:	aa25      	add	r2, sp, #148	; 0x94
   860ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   860ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   860b0:	f002 fb44 	bl	8873c <__ssprint_r>
   860b4:	2800      	cmp	r0, #0
   860b6:	f47f ab32 	bne.w	8571e <_svfprintf_r+0x1ba>
   860ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   860bc:	46c8      	mov	r8, r9
   860be:	e443      	b.n	85948 <_svfprintf_r+0x3e4>
   860c0:	aa25      	add	r2, sp, #148	; 0x94
   860c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   860c4:	980c      	ldr	r0, [sp, #48]	; 0x30
   860c6:	f002 fb39 	bl	8873c <__ssprint_r>
   860ca:	2800      	cmp	r0, #0
   860cc:	f47f ab27 	bne.w	8571e <_svfprintf_r+0x1ba>
   860d0:	46c8      	mov	r8, r9
   860d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   860d4:	f7ff bbe5 	b.w	858a2 <_svfprintf_r+0x33e>
   860d8:	2400      	movs	r4, #0
   860da:	2500      	movs	r5, #0
   860dc:	f8cd b01c 	str.w	fp, [sp, #28]
   860e0:	4649      	mov	r1, r9
   860e2:	e004      	b.n	860ee <_svfprintf_r+0xb8a>
   860e4:	00089674 	.word	0x00089674
   860e8:	00089688 	.word	0x00089688
   860ec:	4631      	mov	r1, r6
   860ee:	08e2      	lsrs	r2, r4, #3
   860f0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   860f4:	08e8      	lsrs	r0, r5, #3
   860f6:	f004 0307 	and.w	r3, r4, #7
   860fa:	4605      	mov	r5, r0
   860fc:	4614      	mov	r4, r2
   860fe:	3330      	adds	r3, #48	; 0x30
   86100:	ea54 0205 	orrs.w	r2, r4, r5
   86104:	f801 3c01 	strb.w	r3, [r1, #-1]
   86108:	f101 36ff 	add.w	r6, r1, #4294967295
   8610c:	d1ee      	bne.n	860ec <_svfprintf_r+0xb88>
   8610e:	9a07      	ldr	r2, [sp, #28]
   86110:	07d2      	lsls	r2, r2, #31
   86112:	f57f ad59 	bpl.w	85bc8 <_svfprintf_r+0x664>
   86116:	2b30      	cmp	r3, #48	; 0x30
   86118:	f43f ad56 	beq.w	85bc8 <_svfprintf_r+0x664>
   8611c:	2330      	movs	r3, #48	; 0x30
   8611e:	3902      	subs	r1, #2
   86120:	f806 3c01 	strb.w	r3, [r6, #-1]
   86124:	eba9 0301 	sub.w	r3, r9, r1
   86128:	930e      	str	r3, [sp, #56]	; 0x38
   8612a:	460e      	mov	r6, r1
   8612c:	f7ff bb36 	b.w	8579c <_svfprintf_r+0x238>
   86130:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86132:	2900      	cmp	r1, #0
   86134:	f77f af79 	ble.w	8602a <_svfprintf_r+0xac6>
   86138:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8613a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8613c:	4293      	cmp	r3, r2
   8613e:	bfa8      	it	ge
   86140:	4613      	movge	r3, r2
   86142:	2b00      	cmp	r3, #0
   86144:	461f      	mov	r7, r3
   86146:	dd0b      	ble.n	86160 <_svfprintf_r+0xbfc>
   86148:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8614a:	443c      	add	r4, r7
   8614c:	3301      	adds	r3, #1
   8614e:	2b07      	cmp	r3, #7
   86150:	9427      	str	r4, [sp, #156]	; 0x9c
   86152:	e888 00c0 	stmia.w	r8, {r6, r7}
   86156:	9326      	str	r3, [sp, #152]	; 0x98
   86158:	f300 82fb 	bgt.w	86752 <_svfprintf_r+0x11ee>
   8615c:	f108 0808 	add.w	r8, r8, #8
   86160:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86162:	2f00      	cmp	r7, #0
   86164:	bfa8      	it	ge
   86166:	1bdb      	subge	r3, r3, r7
   86168:	2b00      	cmp	r3, #0
   8616a:	461f      	mov	r7, r3
   8616c:	f340 80d7 	ble.w	8631e <_svfprintf_r+0xdba>
   86170:	2b10      	cmp	r3, #16
   86172:	f340 8434 	ble.w	869de <_svfprintf_r+0x147a>
   86176:	4dba      	ldr	r5, [pc, #744]	; (86460 <_svfprintf_r+0xefc>)
   86178:	4642      	mov	r2, r8
   8617a:	4621      	mov	r1, r4
   8617c:	46b0      	mov	r8, r6
   8617e:	f04f 0b10 	mov.w	fp, #16
   86182:	462e      	mov	r6, r5
   86184:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86186:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86188:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8618a:	e004      	b.n	86196 <_svfprintf_r+0xc32>
   8618c:	3208      	adds	r2, #8
   8618e:	3f10      	subs	r7, #16
   86190:	2f10      	cmp	r7, #16
   86192:	f340 80b5 	ble.w	86300 <_svfprintf_r+0xd9c>
   86196:	3301      	adds	r3, #1
   86198:	3110      	adds	r1, #16
   8619a:	2b07      	cmp	r3, #7
   8619c:	9127      	str	r1, [sp, #156]	; 0x9c
   8619e:	9326      	str	r3, [sp, #152]	; 0x98
   861a0:	e882 0840 	stmia.w	r2, {r6, fp}
   861a4:	ddf2      	ble.n	8618c <_svfprintf_r+0xc28>
   861a6:	aa25      	add	r2, sp, #148	; 0x94
   861a8:	4629      	mov	r1, r5
   861aa:	4620      	mov	r0, r4
   861ac:	f002 fac6 	bl	8873c <__ssprint_r>
   861b0:	2800      	cmp	r0, #0
   861b2:	f47f aab4 	bne.w	8571e <_svfprintf_r+0x1ba>
   861b6:	464a      	mov	r2, r9
   861b8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   861ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   861bc:	e7e7      	b.n	8618e <_svfprintf_r+0xc2a>
   861be:	2d00      	cmp	r5, #0
   861c0:	bf08      	it	eq
   861c2:	2c0a      	cmpeq	r4, #10
   861c4:	f0c0 8090 	bcc.w	862e8 <_svfprintf_r+0xd84>
   861c8:	464e      	mov	r6, r9
   861ca:	4620      	mov	r0, r4
   861cc:	4629      	mov	r1, r5
   861ce:	220a      	movs	r2, #10
   861d0:	2300      	movs	r3, #0
   861d2:	f002 fffb 	bl	891cc <__aeabi_uldivmod>
   861d6:	3230      	adds	r2, #48	; 0x30
   861d8:	f806 2d01 	strb.w	r2, [r6, #-1]!
   861dc:	4620      	mov	r0, r4
   861de:	4629      	mov	r1, r5
   861e0:	2300      	movs	r3, #0
   861e2:	220a      	movs	r2, #10
   861e4:	f002 fff2 	bl	891cc <__aeabi_uldivmod>
   861e8:	4604      	mov	r4, r0
   861ea:	460d      	mov	r5, r1
   861ec:	ea54 0305 	orrs.w	r3, r4, r5
   861f0:	d1eb      	bne.n	861ca <_svfprintf_r+0xc66>
   861f2:	eba9 0306 	sub.w	r3, r9, r6
   861f6:	930e      	str	r3, [sp, #56]	; 0x38
   861f8:	f7ff bad0 	b.w	8579c <_svfprintf_r+0x238>
   861fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   861fe:	464e      	mov	r6, r9
   86200:	930e      	str	r3, [sp, #56]	; 0x38
   86202:	f7ff bacb 	b.w	8579c <_svfprintf_r+0x238>
   86206:	1e5e      	subs	r6, r3, #1
   86208:	2e00      	cmp	r6, #0
   8620a:	f77f aeca 	ble.w	85fa2 <_svfprintf_r+0xa3e>
   8620e:	2e10      	cmp	r6, #16
   86210:	f340 83e3 	ble.w	869da <_svfprintf_r+0x1476>
   86214:	4622      	mov	r2, r4
   86216:	f04f 0b10 	mov.w	fp, #16
   8621a:	4d91      	ldr	r5, [pc, #580]	; (86460 <_svfprintf_r+0xefc>)
   8621c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8621e:	e004      	b.n	8622a <_svfprintf_r+0xcc6>
   86220:	3e10      	subs	r6, #16
   86222:	2e10      	cmp	r6, #16
   86224:	f108 0808 	add.w	r8, r8, #8
   86228:	dd15      	ble.n	86256 <_svfprintf_r+0xcf2>
   8622a:	3701      	adds	r7, #1
   8622c:	3210      	adds	r2, #16
   8622e:	2f07      	cmp	r7, #7
   86230:	9227      	str	r2, [sp, #156]	; 0x9c
   86232:	9726      	str	r7, [sp, #152]	; 0x98
   86234:	e888 0820 	stmia.w	r8, {r5, fp}
   86238:	ddf2      	ble.n	86220 <_svfprintf_r+0xcbc>
   8623a:	aa25      	add	r2, sp, #148	; 0x94
   8623c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8623e:	4620      	mov	r0, r4
   86240:	f002 fa7c 	bl	8873c <__ssprint_r>
   86244:	2800      	cmp	r0, #0
   86246:	f47f aa6a 	bne.w	8571e <_svfprintf_r+0x1ba>
   8624a:	3e10      	subs	r6, #16
   8624c:	2e10      	cmp	r6, #16
   8624e:	46c8      	mov	r8, r9
   86250:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86252:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86254:	dce9      	bgt.n	8622a <_svfprintf_r+0xcc6>
   86256:	4614      	mov	r4, r2
   86258:	3701      	adds	r7, #1
   8625a:	4434      	add	r4, r6
   8625c:	2f07      	cmp	r7, #7
   8625e:	9427      	str	r4, [sp, #156]	; 0x9c
   86260:	9726      	str	r7, [sp, #152]	; 0x98
   86262:	e888 0060 	stmia.w	r8, {r5, r6}
   86266:	f77f ae9a 	ble.w	85f9e <_svfprintf_r+0xa3a>
   8626a:	aa25      	add	r2, sp, #148	; 0x94
   8626c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8626e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86270:	f002 fa64 	bl	8873c <__ssprint_r>
   86274:	2800      	cmp	r0, #0
   86276:	f47f aa52 	bne.w	8571e <_svfprintf_r+0x1ba>
   8627a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8627c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8627e:	46c8      	mov	r8, r9
   86280:	e68f      	b.n	85fa2 <_svfprintf_r+0xa3e>
   86282:	3204      	adds	r2, #4
   86284:	681c      	ldr	r4, [r3, #0]
   86286:	2500      	movs	r5, #0
   86288:	2301      	movs	r3, #1
   8628a:	920f      	str	r2, [sp, #60]	; 0x3c
   8628c:	f7ff ba68 	b.w	85760 <_svfprintf_r+0x1fc>
   86290:	681c      	ldr	r4, [r3, #0]
   86292:	3304      	adds	r3, #4
   86294:	930f      	str	r3, [sp, #60]	; 0x3c
   86296:	2500      	movs	r5, #0
   86298:	e42a      	b.n	85af0 <_svfprintf_r+0x58c>
   8629a:	681c      	ldr	r4, [r3, #0]
   8629c:	3304      	adds	r3, #4
   8629e:	17e5      	asrs	r5, r4, #31
   862a0:	4622      	mov	r2, r4
   862a2:	930f      	str	r3, [sp, #60]	; 0x3c
   862a4:	462b      	mov	r3, r5
   862a6:	2a00      	cmp	r2, #0
   862a8:	f173 0300 	sbcs.w	r3, r3, #0
   862ac:	f6bf ac68 	bge.w	85b80 <_svfprintf_r+0x61c>
   862b0:	272d      	movs	r7, #45	; 0x2d
   862b2:	4264      	negs	r4, r4
   862b4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   862b8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   862bc:	2301      	movs	r3, #1
   862be:	f7ff ba53 	b.w	85768 <_svfprintf_r+0x204>
   862c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   862c4:	2500      	movs	r5, #0
   862c6:	460a      	mov	r2, r1
   862c8:	3204      	adds	r2, #4
   862ca:	680c      	ldr	r4, [r1, #0]
   862cc:	920f      	str	r2, [sp, #60]	; 0x3c
   862ce:	f7ff ba47 	b.w	85760 <_svfprintf_r+0x1fc>
   862d2:	4614      	mov	r4, r2
   862d4:	3301      	adds	r3, #1
   862d6:	4434      	add	r4, r6
   862d8:	2b07      	cmp	r3, #7
   862da:	9427      	str	r4, [sp, #156]	; 0x9c
   862dc:	9326      	str	r3, [sp, #152]	; 0x98
   862de:	e888 0060 	stmia.w	r8, {r5, r6}
   862e2:	f77f ab2f 	ble.w	85944 <_svfprintf_r+0x3e0>
   862e6:	e6e0      	b.n	860aa <_svfprintf_r+0xb46>
   862e8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   862ec:	2301      	movs	r3, #1
   862ee:	ae42      	add	r6, sp, #264	; 0x108
   862f0:	3430      	adds	r4, #48	; 0x30
   862f2:	f8cd b01c 	str.w	fp, [sp, #28]
   862f6:	f806 4d41 	strb.w	r4, [r6, #-65]!
   862fa:	930e      	str	r3, [sp, #56]	; 0x38
   862fc:	f7ff ba4e 	b.w	8579c <_svfprintf_r+0x238>
   86300:	4635      	mov	r5, r6
   86302:	460c      	mov	r4, r1
   86304:	4646      	mov	r6, r8
   86306:	4690      	mov	r8, r2
   86308:	3301      	adds	r3, #1
   8630a:	443c      	add	r4, r7
   8630c:	2b07      	cmp	r3, #7
   8630e:	9427      	str	r4, [sp, #156]	; 0x9c
   86310:	9326      	str	r3, [sp, #152]	; 0x98
   86312:	e888 00a0 	stmia.w	r8, {r5, r7}
   86316:	f300 8246 	bgt.w	867a6 <_svfprintf_r+0x1242>
   8631a:	f108 0808 	add.w	r8, r8, #8
   8631e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86320:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86322:	429a      	cmp	r2, r3
   86324:	db45      	blt.n	863b2 <_svfprintf_r+0xe4e>
   86326:	9b07      	ldr	r3, [sp, #28]
   86328:	07d9      	lsls	r1, r3, #31
   8632a:	d442      	bmi.n	863b2 <_svfprintf_r+0xe4e>
   8632c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8632e:	9812      	ldr	r0, [sp, #72]	; 0x48
   86330:	1a9a      	subs	r2, r3, r2
   86332:	1a1d      	subs	r5, r3, r0
   86334:	4295      	cmp	r5, r2
   86336:	bfa8      	it	ge
   86338:	4615      	movge	r5, r2
   8633a:	2d00      	cmp	r5, #0
   8633c:	dd0e      	ble.n	8635c <_svfprintf_r+0xdf8>
   8633e:	9926      	ldr	r1, [sp, #152]	; 0x98
   86340:	4406      	add	r6, r0
   86342:	3101      	adds	r1, #1
   86344:	442c      	add	r4, r5
   86346:	2907      	cmp	r1, #7
   86348:	f8c8 6000 	str.w	r6, [r8]
   8634c:	9427      	str	r4, [sp, #156]	; 0x9c
   8634e:	f8c8 5004 	str.w	r5, [r8, #4]
   86352:	9126      	str	r1, [sp, #152]	; 0x98
   86354:	f300 8216 	bgt.w	86784 <_svfprintf_r+0x1220>
   86358:	f108 0808 	add.w	r8, r8, #8
   8635c:	2d00      	cmp	r5, #0
   8635e:	bfb4      	ite	lt
   86360:	4616      	movlt	r6, r2
   86362:	1b56      	subge	r6, r2, r5
   86364:	2e00      	cmp	r6, #0
   86366:	f77f aaef 	ble.w	85948 <_svfprintf_r+0x3e4>
   8636a:	2e10      	cmp	r6, #16
   8636c:	f340 82f3 	ble.w	86956 <_svfprintf_r+0x13f2>
   86370:	4622      	mov	r2, r4
   86372:	2710      	movs	r7, #16
   86374:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86376:	4d3a      	ldr	r5, [pc, #232]	; (86460 <_svfprintf_r+0xefc>)
   86378:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8637c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8637e:	e004      	b.n	8638a <_svfprintf_r+0xe26>
   86380:	f108 0808 	add.w	r8, r8, #8
   86384:	3e10      	subs	r6, #16
   86386:	2e10      	cmp	r6, #16
   86388:	dda3      	ble.n	862d2 <_svfprintf_r+0xd6e>
   8638a:	3301      	adds	r3, #1
   8638c:	3210      	adds	r2, #16
   8638e:	2b07      	cmp	r3, #7
   86390:	9227      	str	r2, [sp, #156]	; 0x9c
   86392:	9326      	str	r3, [sp, #152]	; 0x98
   86394:	e888 00a0 	stmia.w	r8, {r5, r7}
   86398:	ddf2      	ble.n	86380 <_svfprintf_r+0xe1c>
   8639a:	aa25      	add	r2, sp, #148	; 0x94
   8639c:	4621      	mov	r1, r4
   8639e:	4658      	mov	r0, fp
   863a0:	f002 f9cc 	bl	8873c <__ssprint_r>
   863a4:	2800      	cmp	r0, #0
   863a6:	f47f a9ba 	bne.w	8571e <_svfprintf_r+0x1ba>
   863aa:	46c8      	mov	r8, r9
   863ac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   863ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   863b0:	e7e8      	b.n	86384 <_svfprintf_r+0xe20>
   863b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   863b4:	9819      	ldr	r0, [sp, #100]	; 0x64
   863b6:	3301      	adds	r3, #1
   863b8:	991a      	ldr	r1, [sp, #104]	; 0x68
   863ba:	4404      	add	r4, r0
   863bc:	2b07      	cmp	r3, #7
   863be:	9427      	str	r4, [sp, #156]	; 0x9c
   863c0:	f8c8 1000 	str.w	r1, [r8]
   863c4:	f8c8 0004 	str.w	r0, [r8, #4]
   863c8:	9326      	str	r3, [sp, #152]	; 0x98
   863ca:	f300 81cf 	bgt.w	8676c <_svfprintf_r+0x1208>
   863ce:	f108 0808 	add.w	r8, r8, #8
   863d2:	e7ab      	b.n	8632c <_svfprintf_r+0xdc8>
   863d4:	9b07      	ldr	r3, [sp, #28]
   863d6:	07da      	lsls	r2, r3, #31
   863d8:	f53f adad 	bmi.w	85f36 <_svfprintf_r+0x9d2>
   863dc:	2301      	movs	r3, #1
   863de:	9f26      	ldr	r7, [sp, #152]	; 0x98
   863e0:	441c      	add	r4, r3
   863e2:	441f      	add	r7, r3
   863e4:	2f07      	cmp	r7, #7
   863e6:	9427      	str	r4, [sp, #156]	; 0x9c
   863e8:	f8c8 6000 	str.w	r6, [r8]
   863ec:	9726      	str	r7, [sp, #152]	; 0x98
   863ee:	f8c8 3004 	str.w	r3, [r8, #4]
   863f2:	f77f add4 	ble.w	85f9e <_svfprintf_r+0xa3a>
   863f6:	aa25      	add	r2, sp, #148	; 0x94
   863f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   863fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   863fc:	f002 f99e 	bl	8873c <__ssprint_r>
   86400:	2800      	cmp	r0, #0
   86402:	f47f a98c 	bne.w	8571e <_svfprintf_r+0x1ba>
   86406:	46c8      	mov	r8, r9
   86408:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8640a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8640c:	e5c9      	b.n	85fa2 <_svfprintf_r+0xa3e>
   8640e:	aa25      	add	r2, sp, #148	; 0x94
   86410:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86412:	980c      	ldr	r0, [sp, #48]	; 0x30
   86414:	f002 f992 	bl	8873c <__ssprint_r>
   86418:	2800      	cmp	r0, #0
   8641a:	f47f a980 	bne.w	8571e <_svfprintf_r+0x1ba>
   8641e:	46c8      	mov	r8, r9
   86420:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86422:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86424:	e596      	b.n	85f54 <_svfprintf_r+0x9f0>
   86426:	aa25      	add	r2, sp, #148	; 0x94
   86428:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8642a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8642c:	f002 f986 	bl	8873c <__ssprint_r>
   86430:	2800      	cmp	r0, #0
   86432:	f47f a974 	bne.w	8571e <_svfprintf_r+0x1ba>
   86436:	46c8      	mov	r8, r9
   86438:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8643a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8643c:	e599      	b.n	85f72 <_svfprintf_r+0xa0e>
   8643e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86440:	3407      	adds	r4, #7
   86442:	f024 0407 	bic.w	r4, r4, #7
   86446:	f104 0108 	add.w	r1, r4, #8
   8644a:	e9d4 2300 	ldrd	r2, r3, [r4]
   8644e:	910f      	str	r1, [sp, #60]	; 0x3c
   86450:	4614      	mov	r4, r2
   86452:	461d      	mov	r5, r3
   86454:	f7ff bb8f 	b.w	85b76 <_svfprintf_r+0x612>
   86458:	464e      	mov	r6, r9
   8645a:	f7ff b99f 	b.w	8579c <_svfprintf_r+0x238>
   8645e:	bf00      	nop
   86460:	00089688 	.word	0x00089688
   86464:	aa25      	add	r2, sp, #148	; 0x94
   86466:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86468:	980c      	ldr	r0, [sp, #48]	; 0x30
   8646a:	f002 f967 	bl	8873c <__ssprint_r>
   8646e:	2800      	cmp	r0, #0
   86470:	f47f a955 	bne.w	8571e <_svfprintf_r+0x1ba>
   86474:	46c8      	mov	r8, r9
   86476:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86478:	f7ff ba16 	b.w	858a8 <_svfprintf_r+0x344>
   8647c:	9c15      	ldr	r4, [sp, #84]	; 0x54
   8647e:	4622      	mov	r2, r4
   86480:	4620      	mov	r0, r4
   86482:	9c14      	ldr	r4, [sp, #80]	; 0x50
   86484:	4623      	mov	r3, r4
   86486:	4621      	mov	r1, r4
   86488:	f002 fe62 	bl	89150 <__aeabi_dcmpun>
   8648c:	2800      	cmp	r0, #0
   8648e:	f040 8273 	bne.w	86978 <_svfprintf_r+0x1414>
   86492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86494:	3301      	adds	r3, #1
   86496:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86498:	f023 0320 	bic.w	r3, r3, #32
   8649c:	930e      	str	r3, [sp, #56]	; 0x38
   8649e:	f000 819c 	beq.w	867da <_svfprintf_r+0x1276>
   864a2:	2b47      	cmp	r3, #71	; 0x47
   864a4:	f000 80d6 	beq.w	86654 <_svfprintf_r+0x10f0>
   864a8:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   864ac:	9307      	str	r3, [sp, #28]
   864ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
   864b0:	1e1f      	subs	r7, r3, #0
   864b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   864b4:	9308      	str	r3, [sp, #32]
   864b6:	bfb7      	itett	lt
   864b8:	463b      	movlt	r3, r7
   864ba:	2300      	movge	r3, #0
   864bc:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   864c0:	232d      	movlt	r3, #45	; 0x2d
   864c2:	9310      	str	r3, [sp, #64]	; 0x40
   864c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   864c6:	2b66      	cmp	r3, #102	; 0x66
   864c8:	f000 8190 	beq.w	867ec <_svfprintf_r+0x1288>
   864cc:	2b46      	cmp	r3, #70	; 0x46
   864ce:	f000 80a4 	beq.w	8661a <_svfprintf_r+0x10b6>
   864d2:	2002      	movs	r0, #2
   864d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   864d6:	a923      	add	r1, sp, #140	; 0x8c
   864d8:	2b45      	cmp	r3, #69	; 0x45
   864da:	bf0a      	itet	eq
   864dc:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   864de:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   864e0:	1c5d      	addeq	r5, r3, #1
   864e2:	e88d 0021 	stmia.w	sp, {r0, r5}
   864e6:	9104      	str	r1, [sp, #16]
   864e8:	a820      	add	r0, sp, #128	; 0x80
   864ea:	a91f      	add	r1, sp, #124	; 0x7c
   864ec:	463b      	mov	r3, r7
   864ee:	9003      	str	r0, [sp, #12]
   864f0:	9a08      	ldr	r2, [sp, #32]
   864f2:	9102      	str	r1, [sp, #8]
   864f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   864f6:	f000 fb5b 	bl	86bb0 <_dtoa_r>
   864fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   864fc:	4606      	mov	r6, r0
   864fe:	2b67      	cmp	r3, #103	; 0x67
   86500:	f040 81ba 	bne.w	86878 <_svfprintf_r+0x1314>
   86504:	f01b 0f01 	tst.w	fp, #1
   86508:	f000 8223 	beq.w	86952 <_svfprintf_r+0x13ee>
   8650c:	1974      	adds	r4, r6, r5
   8650e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86510:	9808      	ldr	r0, [sp, #32]
   86512:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86514:	4639      	mov	r1, r7
   86516:	f002 fde9 	bl	890ec <__aeabi_dcmpeq>
   8651a:	2800      	cmp	r0, #0
   8651c:	f040 8124 	bne.w	86768 <_svfprintf_r+0x1204>
   86520:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86522:	42a3      	cmp	r3, r4
   86524:	d206      	bcs.n	86534 <_svfprintf_r+0xfd0>
   86526:	2130      	movs	r1, #48	; 0x30
   86528:	1c5a      	adds	r2, r3, #1
   8652a:	9223      	str	r2, [sp, #140]	; 0x8c
   8652c:	7019      	strb	r1, [r3, #0]
   8652e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86530:	429c      	cmp	r4, r3
   86532:	d8f9      	bhi.n	86528 <_svfprintf_r+0xfc4>
   86534:	1b9b      	subs	r3, r3, r6
   86536:	9313      	str	r3, [sp, #76]	; 0x4c
   86538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8653a:	2b47      	cmp	r3, #71	; 0x47
   8653c:	f000 80a2 	beq.w	86684 <_svfprintf_r+0x1120>
   86540:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86542:	2b65      	cmp	r3, #101	; 0x65
   86544:	f340 81a7 	ble.w	86896 <_svfprintf_r+0x1332>
   86548:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8654a:	2b66      	cmp	r3, #102	; 0x66
   8654c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8654e:	9312      	str	r3, [sp, #72]	; 0x48
   86550:	f000 8171 	beq.w	86836 <_svfprintf_r+0x12d2>
   86554:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86556:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86558:	4619      	mov	r1, r3
   8655a:	4291      	cmp	r1, r2
   8655c:	f300 815d 	bgt.w	8681a <_svfprintf_r+0x12b6>
   86560:	f01b 0f01 	tst.w	fp, #1
   86564:	f040 81f0 	bne.w	86948 <_svfprintf_r+0x13e4>
   86568:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8656c:	9308      	str	r3, [sp, #32]
   8656e:	2367      	movs	r3, #103	; 0x67
   86570:	920e      	str	r2, [sp, #56]	; 0x38
   86572:	9311      	str	r3, [sp, #68]	; 0x44
   86574:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86576:	2b00      	cmp	r3, #0
   86578:	d17d      	bne.n	86676 <_svfprintf_r+0x1112>
   8657a:	930a      	str	r3, [sp, #40]	; 0x28
   8657c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86580:	f7ff b914 	b.w	857ac <_svfprintf_r+0x248>
   86584:	f024 0407 	bic.w	r4, r4, #7
   86588:	6823      	ldr	r3, [r4, #0]
   8658a:	9315      	str	r3, [sp, #84]	; 0x54
   8658c:	6863      	ldr	r3, [r4, #4]
   8658e:	9314      	str	r3, [sp, #80]	; 0x50
   86590:	f104 0308 	add.w	r3, r4, #8
   86594:	930f      	str	r3, [sp, #60]	; 0x3c
   86596:	f7ff bb2f 	b.w	85bf8 <_svfprintf_r+0x694>
   8659a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8659c:	6813      	ldr	r3, [r2, #0]
   8659e:	3204      	adds	r2, #4
   865a0:	920f      	str	r2, [sp, #60]	; 0x3c
   865a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   865a4:	601a      	str	r2, [r3, #0]
   865a6:	f7ff b804 	b.w	855b2 <_svfprintf_r+0x4e>
   865aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   865ac:	4daf      	ldr	r5, [pc, #700]	; (8686c <_svfprintf_r+0x1308>)
   865ae:	f7ff b9ad 	b.w	8590c <_svfprintf_r+0x3a8>
   865b2:	aa25      	add	r2, sp, #148	; 0x94
   865b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   865b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   865b8:	f002 f8c0 	bl	8873c <__ssprint_r>
   865bc:	2800      	cmp	r0, #0
   865be:	f47f a8ae 	bne.w	8571e <_svfprintf_r+0x1ba>
   865c2:	46c8      	mov	r8, r9
   865c4:	e431      	b.n	85e2a <_svfprintf_r+0x8c6>
   865c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   865c8:	4613      	mov	r3, r2
   865ca:	3304      	adds	r3, #4
   865cc:	930f      	str	r3, [sp, #60]	; 0x3c
   865ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   865d0:	6811      	ldr	r1, [r2, #0]
   865d2:	17dd      	asrs	r5, r3, #31
   865d4:	461a      	mov	r2, r3
   865d6:	462b      	mov	r3, r5
   865d8:	e9c1 2300 	strd	r2, r3, [r1]
   865dc:	f7fe bfe9 	b.w	855b2 <_svfprintf_r+0x4e>
   865e0:	aa25      	add	r2, sp, #148	; 0x94
   865e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   865e4:	980c      	ldr	r0, [sp, #48]	; 0x30
   865e6:	f002 f8a9 	bl	8873c <__ssprint_r>
   865ea:	2800      	cmp	r0, #0
   865ec:	f47f a897 	bne.w	8571e <_svfprintf_r+0x1ba>
   865f0:	46c8      	mov	r8, r9
   865f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   865f4:	e432      	b.n	85e5c <_svfprintf_r+0x8f8>
   865f6:	f108 0808 	add.w	r8, r8, #8
   865fa:	e52f      	b.n	8605c <_svfprintf_r+0xaf8>
   865fc:	2140      	movs	r1, #64	; 0x40
   865fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   86600:	f001 fa24 	bl	87a4c <_malloc_r>
   86604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86606:	6010      	str	r0, [r2, #0]
   86608:	6110      	str	r0, [r2, #16]
   8660a:	2800      	cmp	r0, #0
   8660c:	f000 8214 	beq.w	86a38 <_svfprintf_r+0x14d4>
   86610:	2340      	movs	r3, #64	; 0x40
   86612:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86614:	6153      	str	r3, [r2, #20]
   86616:	f7fe bfbc 	b.w	85592 <_svfprintf_r+0x2e>
   8661a:	2003      	movs	r0, #3
   8661c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8661e:	a923      	add	r1, sp, #140	; 0x8c
   86620:	e88d 0011 	stmia.w	sp, {r0, r4}
   86624:	9104      	str	r1, [sp, #16]
   86626:	a820      	add	r0, sp, #128	; 0x80
   86628:	a91f      	add	r1, sp, #124	; 0x7c
   8662a:	9003      	str	r0, [sp, #12]
   8662c:	9a08      	ldr	r2, [sp, #32]
   8662e:	463b      	mov	r3, r7
   86630:	9102      	str	r1, [sp, #8]
   86632:	980c      	ldr	r0, [sp, #48]	; 0x30
   86634:	f000 fabc 	bl	86bb0 <_dtoa_r>
   86638:	4625      	mov	r5, r4
   8663a:	4606      	mov	r6, r0
   8663c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8663e:	1974      	adds	r4, r6, r5
   86640:	2b46      	cmp	r3, #70	; 0x46
   86642:	f47f af64 	bne.w	8650e <_svfprintf_r+0xfaa>
   86646:	7833      	ldrb	r3, [r6, #0]
   86648:	2b30      	cmp	r3, #48	; 0x30
   8664a:	f000 8187 	beq.w	8695c <_svfprintf_r+0x13f8>
   8664e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   86650:	442c      	add	r4, r5
   86652:	e75c      	b.n	8650e <_svfprintf_r+0xfaa>
   86654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86656:	2b00      	cmp	r3, #0
   86658:	bf08      	it	eq
   8665a:	2301      	moveq	r3, #1
   8665c:	930a      	str	r3, [sp, #40]	; 0x28
   8665e:	e723      	b.n	864a8 <_svfprintf_r+0xf44>
   86660:	4630      	mov	r0, r6
   86662:	950a      	str	r5, [sp, #40]	; 0x28
   86664:	f7fe ff50 	bl	85508 <strlen>
   86668:	940f      	str	r4, [sp, #60]	; 0x3c
   8666a:	900e      	str	r0, [sp, #56]	; 0x38
   8666c:	f8cd b01c 	str.w	fp, [sp, #28]
   86670:	4603      	mov	r3, r0
   86672:	f7ff b9e7 	b.w	85a44 <_svfprintf_r+0x4e0>
   86676:	272d      	movs	r7, #45	; 0x2d
   86678:	2300      	movs	r3, #0
   8667a:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   8667e:	930a      	str	r3, [sp, #40]	; 0x28
   86680:	f7ff b895 	b.w	857ae <_svfprintf_r+0x24a>
   86684:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86686:	461a      	mov	r2, r3
   86688:	9312      	str	r3, [sp, #72]	; 0x48
   8668a:	3303      	adds	r3, #3
   8668c:	db04      	blt.n	86698 <_svfprintf_r+0x1134>
   8668e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86690:	4619      	mov	r1, r3
   86692:	4291      	cmp	r1, r2
   86694:	f6bf af5e 	bge.w	86554 <_svfprintf_r+0xff0>
   86698:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8669a:	3b02      	subs	r3, #2
   8669c:	9311      	str	r3, [sp, #68]	; 0x44
   8669e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   866a0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   866a4:	3b01      	subs	r3, #1
   866a6:	2b00      	cmp	r3, #0
   866a8:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   866ac:	bfb4      	ite	lt
   866ae:	222d      	movlt	r2, #45	; 0x2d
   866b0:	222b      	movge	r2, #43	; 0x2b
   866b2:	931f      	str	r3, [sp, #124]	; 0x7c
   866b4:	bfb8      	it	lt
   866b6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   866b8:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   866bc:	bfb8      	it	lt
   866be:	f1c3 0301 	rsblt	r3, r3, #1
   866c2:	2b09      	cmp	r3, #9
   866c4:	f340 811f 	ble.w	86906 <_svfprintf_r+0x13a2>
   866c8:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   866cc:	4601      	mov	r1, r0
   866ce:	4c68      	ldr	r4, [pc, #416]	; (86870 <_svfprintf_r+0x130c>)
   866d0:	e000      	b.n	866d4 <_svfprintf_r+0x1170>
   866d2:	4611      	mov	r1, r2
   866d4:	fb84 5203 	smull	r5, r2, r4, r3
   866d8:	17dd      	asrs	r5, r3, #31
   866da:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   866de:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   866e2:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   866e6:	3230      	adds	r2, #48	; 0x30
   866e8:	2d09      	cmp	r5, #9
   866ea:	f801 2c01 	strb.w	r2, [r1, #-1]
   866ee:	462b      	mov	r3, r5
   866f0:	f101 32ff 	add.w	r2, r1, #4294967295
   866f4:	dced      	bgt.n	866d2 <_svfprintf_r+0x116e>
   866f6:	3330      	adds	r3, #48	; 0x30
   866f8:	3902      	subs	r1, #2
   866fa:	b2dc      	uxtb	r4, r3
   866fc:	4288      	cmp	r0, r1
   866fe:	f802 4c01 	strb.w	r4, [r2, #-1]
   86702:	f240 8192 	bls.w	86a2a <_svfprintf_r+0x14c6>
   86706:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   8670a:	4613      	mov	r3, r2
   8670c:	e001      	b.n	86712 <_svfprintf_r+0x11ae>
   8670e:	f813 4b01 	ldrb.w	r4, [r3], #1
   86712:	4283      	cmp	r3, r0
   86714:	f801 4b01 	strb.w	r4, [r1], #1
   86718:	d1f9      	bne.n	8670e <_svfprintf_r+0x11aa>
   8671a:	3301      	adds	r3, #1
   8671c:	1a9b      	subs	r3, r3, r2
   8671e:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   86722:	4413      	add	r3, r2
   86724:	aa21      	add	r2, sp, #132	; 0x84
   86726:	1a9b      	subs	r3, r3, r2
   86728:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8672a:	931b      	str	r3, [sp, #108]	; 0x6c
   8672c:	2a01      	cmp	r2, #1
   8672e:	4413      	add	r3, r2
   86730:	930e      	str	r3, [sp, #56]	; 0x38
   86732:	f340 8148 	ble.w	869c6 <_svfprintf_r+0x1462>
   86736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86738:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8673a:	4413      	add	r3, r2
   8673c:	930e      	str	r3, [sp, #56]	; 0x38
   8673e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86742:	9308      	str	r3, [sp, #32]
   86744:	2300      	movs	r3, #0
   86746:	9312      	str	r3, [sp, #72]	; 0x48
   86748:	e714      	b.n	86574 <_svfprintf_r+0x1010>
   8674a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8674c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8674e:	f7ff b876 	b.w	8583e <_svfprintf_r+0x2da>
   86752:	aa25      	add	r2, sp, #148	; 0x94
   86754:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86756:	980c      	ldr	r0, [sp, #48]	; 0x30
   86758:	f001 fff0 	bl	8873c <__ssprint_r>
   8675c:	2800      	cmp	r0, #0
   8675e:	f47e afde 	bne.w	8571e <_svfprintf_r+0x1ba>
   86762:	46c8      	mov	r8, r9
   86764:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86766:	e4fb      	b.n	86160 <_svfprintf_r+0xbfc>
   86768:	4623      	mov	r3, r4
   8676a:	e6e3      	b.n	86534 <_svfprintf_r+0xfd0>
   8676c:	aa25      	add	r2, sp, #148	; 0x94
   8676e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86770:	980c      	ldr	r0, [sp, #48]	; 0x30
   86772:	f001 ffe3 	bl	8873c <__ssprint_r>
   86776:	2800      	cmp	r0, #0
   86778:	f47e afd1 	bne.w	8571e <_svfprintf_r+0x1ba>
   8677c:	46c8      	mov	r8, r9
   8677e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86780:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86782:	e5d3      	b.n	8632c <_svfprintf_r+0xdc8>
   86784:	aa25      	add	r2, sp, #148	; 0x94
   86786:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86788:	980c      	ldr	r0, [sp, #48]	; 0x30
   8678a:	f001 ffd7 	bl	8873c <__ssprint_r>
   8678e:	2800      	cmp	r0, #0
   86790:	f47e afc5 	bne.w	8571e <_svfprintf_r+0x1ba>
   86794:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86796:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86798:	46c8      	mov	r8, r9
   8679a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8679c:	1a9a      	subs	r2, r3, r2
   8679e:	e5dd      	b.n	8635c <_svfprintf_r+0xdf8>
   867a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   867a2:	f7ff b8fe 	b.w	859a2 <_svfprintf_r+0x43e>
   867a6:	aa25      	add	r2, sp, #148	; 0x94
   867a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   867aa:	980c      	ldr	r0, [sp, #48]	; 0x30
   867ac:	f001 ffc6 	bl	8873c <__ssprint_r>
   867b0:	2800      	cmp	r0, #0
   867b2:	f47e afb4 	bne.w	8571e <_svfprintf_r+0x1ba>
   867b6:	46c8      	mov	r8, r9
   867b8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   867ba:	e5b0      	b.n	8631e <_svfprintf_r+0xdba>
   867bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   867be:	4637      	mov	r7, r6
   867c0:	2b06      	cmp	r3, #6
   867c2:	bf28      	it	cs
   867c4:	2306      	movcs	r3, #6
   867c6:	960a      	str	r6, [sp, #40]	; 0x28
   867c8:	9612      	str	r6, [sp, #72]	; 0x48
   867ca:	9308      	str	r3, [sp, #32]
   867cc:	940f      	str	r4, [sp, #60]	; 0x3c
   867ce:	f8cd b01c 	str.w	fp, [sp, #28]
   867d2:	930e      	str	r3, [sp, #56]	; 0x38
   867d4:	4e27      	ldr	r6, [pc, #156]	; (86874 <_svfprintf_r+0x1310>)
   867d6:	f7fe bfe9 	b.w	857ac <_svfprintf_r+0x248>
   867da:	2306      	movs	r3, #6
   867dc:	930a      	str	r3, [sp, #40]	; 0x28
   867de:	e663      	b.n	864a8 <_svfprintf_r+0xf44>
   867e0:	232d      	movs	r3, #45	; 0x2d
   867e2:	461f      	mov	r7, r3
   867e4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   867e8:	f7ff ba28 	b.w	85c3c <_svfprintf_r+0x6d8>
   867ec:	2003      	movs	r0, #3
   867ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   867f0:	a923      	add	r1, sp, #140	; 0x8c
   867f2:	e88d 0011 	stmia.w	sp, {r0, r4}
   867f6:	9104      	str	r1, [sp, #16]
   867f8:	a820      	add	r0, sp, #128	; 0x80
   867fa:	a91f      	add	r1, sp, #124	; 0x7c
   867fc:	9003      	str	r0, [sp, #12]
   867fe:	9a08      	ldr	r2, [sp, #32]
   86800:	463b      	mov	r3, r7
   86802:	9102      	str	r1, [sp, #8]
   86804:	980c      	ldr	r0, [sp, #48]	; 0x30
   86806:	f000 f9d3 	bl	86bb0 <_dtoa_r>
   8680a:	4625      	mov	r5, r4
   8680c:	4606      	mov	r6, r0
   8680e:	1904      	adds	r4, r0, r4
   86810:	e719      	b.n	86646 <_svfprintf_r+0x10e2>
   86812:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86814:	4d15      	ldr	r5, [pc, #84]	; (8686c <_svfprintf_r+0x1308>)
   86816:	f7ff bb7e 	b.w	85f16 <_svfprintf_r+0x9b2>
   8681a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8681c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8681e:	4413      	add	r3, r2
   86820:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86822:	930e      	str	r3, [sp, #56]	; 0x38
   86824:	2a00      	cmp	r2, #0
   86826:	f340 80c7 	ble.w	869b8 <_svfprintf_r+0x1454>
   8682a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8682e:	9308      	str	r3, [sp, #32]
   86830:	2367      	movs	r3, #103	; 0x67
   86832:	9311      	str	r3, [sp, #68]	; 0x44
   86834:	e69e      	b.n	86574 <_svfprintf_r+0x1010>
   86836:	2b00      	cmp	r3, #0
   86838:	f340 80e1 	ble.w	869fe <_svfprintf_r+0x149a>
   8683c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8683e:	2a00      	cmp	r2, #0
   86840:	f040 80b0 	bne.w	869a4 <_svfprintf_r+0x1440>
   86844:	f01b 0f01 	tst.w	fp, #1
   86848:	f040 80ac 	bne.w	869a4 <_svfprintf_r+0x1440>
   8684c:	9308      	str	r3, [sp, #32]
   8684e:	930e      	str	r3, [sp, #56]	; 0x38
   86850:	e690      	b.n	86574 <_svfprintf_r+0x1010>
   86852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86854:	940f      	str	r4, [sp, #60]	; 0x3c
   86856:	9308      	str	r3, [sp, #32]
   86858:	930e      	str	r3, [sp, #56]	; 0x38
   8685a:	900a      	str	r0, [sp, #40]	; 0x28
   8685c:	f8cd b01c 	str.w	fp, [sp, #28]
   86860:	9012      	str	r0, [sp, #72]	; 0x48
   86862:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86866:	f7fe bfa1 	b.w	857ac <_svfprintf_r+0x248>
   8686a:	bf00      	nop
   8686c:	00089688 	.word	0x00089688
   86870:	66666667 	.word	0x66666667
   86874:	0008966c 	.word	0x0008966c
   86878:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8687a:	2b47      	cmp	r3, #71	; 0x47
   8687c:	f47f ae46 	bne.w	8650c <_svfprintf_r+0xfa8>
   86880:	f01b 0f01 	tst.w	fp, #1
   86884:	f47f aeda 	bne.w	8663c <_svfprintf_r+0x10d8>
   86888:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8688a:	1b9b      	subs	r3, r3, r6
   8688c:	9313      	str	r3, [sp, #76]	; 0x4c
   8688e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86890:	2b47      	cmp	r3, #71	; 0x47
   86892:	f43f aef7 	beq.w	86684 <_svfprintf_r+0x1120>
   86896:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86898:	9312      	str	r3, [sp, #72]	; 0x48
   8689a:	e700      	b.n	8669e <_svfprintf_r+0x113a>
   8689c:	2000      	movs	r0, #0
   8689e:	900a      	str	r0, [sp, #40]	; 0x28
   868a0:	f7fe bebc 	b.w	8561c <_svfprintf_r+0xb8>
   868a4:	424f      	negs	r7, r1
   868a6:	3110      	adds	r1, #16
   868a8:	da35      	bge.n	86916 <_svfprintf_r+0x13b2>
   868aa:	2410      	movs	r4, #16
   868ac:	4d6a      	ldr	r5, [pc, #424]	; (86a58 <_svfprintf_r+0x14f4>)
   868ae:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   868b2:	e004      	b.n	868be <_svfprintf_r+0x135a>
   868b4:	f108 0808 	add.w	r8, r8, #8
   868b8:	3f10      	subs	r7, #16
   868ba:	2f10      	cmp	r7, #16
   868bc:	dd2c      	ble.n	86918 <_svfprintf_r+0x13b4>
   868be:	3301      	adds	r3, #1
   868c0:	3210      	adds	r2, #16
   868c2:	2b07      	cmp	r3, #7
   868c4:	9227      	str	r2, [sp, #156]	; 0x9c
   868c6:	9326      	str	r3, [sp, #152]	; 0x98
   868c8:	f8c8 5000 	str.w	r5, [r8]
   868cc:	f8c8 4004 	str.w	r4, [r8, #4]
   868d0:	ddf0      	ble.n	868b4 <_svfprintf_r+0x1350>
   868d2:	aa25      	add	r2, sp, #148	; 0x94
   868d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   868d6:	4658      	mov	r0, fp
   868d8:	f001 ff30 	bl	8873c <__ssprint_r>
   868dc:	2800      	cmp	r0, #0
   868de:	f47e af1e 	bne.w	8571e <_svfprintf_r+0x1ba>
   868e2:	46c8      	mov	r8, r9
   868e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   868e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   868e8:	e7e6      	b.n	868b8 <_svfprintf_r+0x1354>
   868ea:	aa25      	add	r2, sp, #148	; 0x94
   868ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   868ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   868f0:	f001 ff24 	bl	8873c <__ssprint_r>
   868f4:	2800      	cmp	r0, #0
   868f6:	f47e af12 	bne.w	8571e <_svfprintf_r+0x1ba>
   868fa:	46c8      	mov	r8, r9
   868fc:	991f      	ldr	r1, [sp, #124]	; 0x7c
   868fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86900:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86902:	f7ff bbc3 	b.w	8608c <_svfprintf_r+0xb28>
   86906:	2230      	movs	r2, #48	; 0x30
   86908:	4413      	add	r3, r2
   8690a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   8690e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   86912:	ab22      	add	r3, sp, #136	; 0x88
   86914:	e706      	b.n	86724 <_svfprintf_r+0x11c0>
   86916:	4d50      	ldr	r5, [pc, #320]	; (86a58 <_svfprintf_r+0x14f4>)
   86918:	3301      	adds	r3, #1
   8691a:	443a      	add	r2, r7
   8691c:	2b07      	cmp	r3, #7
   8691e:	e888 00a0 	stmia.w	r8, {r5, r7}
   86922:	9227      	str	r2, [sp, #156]	; 0x9c
   86924:	9326      	str	r3, [sp, #152]	; 0x98
   86926:	f108 0808 	add.w	r8, r8, #8
   8692a:	f77f abb2 	ble.w	86092 <_svfprintf_r+0xb2e>
   8692e:	aa25      	add	r2, sp, #148	; 0x94
   86930:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86932:	980c      	ldr	r0, [sp, #48]	; 0x30
   86934:	f001 ff02 	bl	8873c <__ssprint_r>
   86938:	2800      	cmp	r0, #0
   8693a:	f47e aef0 	bne.w	8571e <_svfprintf_r+0x1ba>
   8693e:	46c8      	mov	r8, r9
   86940:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86942:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86944:	f7ff bba5 	b.w	86092 <_svfprintf_r+0xb2e>
   86948:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8694a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8694c:	4413      	add	r3, r2
   8694e:	930e      	str	r3, [sp, #56]	; 0x38
   86950:	e76b      	b.n	8682a <_svfprintf_r+0x12c6>
   86952:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86954:	e5ee      	b.n	86534 <_svfprintf_r+0xfd0>
   86956:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86958:	4d3f      	ldr	r5, [pc, #252]	; (86a58 <_svfprintf_r+0x14f4>)
   8695a:	e4bb      	b.n	862d4 <_svfprintf_r+0xd70>
   8695c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8695e:	9808      	ldr	r0, [sp, #32]
   86960:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86962:	4639      	mov	r1, r7
   86964:	f002 fbc2 	bl	890ec <__aeabi_dcmpeq>
   86968:	2800      	cmp	r0, #0
   8696a:	f47f ae70 	bne.w	8664e <_svfprintf_r+0x10ea>
   8696e:	f1c5 0501 	rsb	r5, r5, #1
   86972:	951f      	str	r5, [sp, #124]	; 0x7c
   86974:	442c      	add	r4, r5
   86976:	e5ca      	b.n	8650e <_svfprintf_r+0xfaa>
   86978:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8697a:	4e38      	ldr	r6, [pc, #224]	; (86a5c <_svfprintf_r+0x14f8>)
   8697c:	2b00      	cmp	r3, #0
   8697e:	bfbe      	ittt	lt
   86980:	232d      	movlt	r3, #45	; 0x2d
   86982:	461f      	movlt	r7, r3
   86984:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   86988:	f04f 0303 	mov.w	r3, #3
   8698c:	461a      	mov	r2, r3
   8698e:	9308      	str	r3, [sp, #32]
   86990:	f04f 0300 	mov.w	r3, #0
   86994:	bfa8      	it	ge
   86996:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   8699a:	4619      	mov	r1, r3
   8699c:	930a      	str	r3, [sp, #40]	; 0x28
   8699e:	4b30      	ldr	r3, [pc, #192]	; (86a60 <_svfprintf_r+0x14fc>)
   869a0:	f7ff b954 	b.w	85c4c <_svfprintf_r+0x6e8>
   869a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   869a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   869a8:	4413      	add	r3, r2
   869aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   869ac:	441a      	add	r2, r3
   869ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   869b2:	920e      	str	r2, [sp, #56]	; 0x38
   869b4:	9308      	str	r3, [sp, #32]
   869b6:	e5dd      	b.n	86574 <_svfprintf_r+0x1010>
   869b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   869ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   869bc:	f1c3 0301 	rsb	r3, r3, #1
   869c0:	441a      	add	r2, r3
   869c2:	4613      	mov	r3, r2
   869c4:	e7c3      	b.n	8694e <_svfprintf_r+0x13ea>
   869c6:	f01b 0301 	ands.w	r3, fp, #1
   869ca:	9312      	str	r3, [sp, #72]	; 0x48
   869cc:	f47f aeb3 	bne.w	86736 <_svfprintf_r+0x11d2>
   869d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   869d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   869d6:	9308      	str	r3, [sp, #32]
   869d8:	e5cc      	b.n	86574 <_svfprintf_r+0x1010>
   869da:	4d1f      	ldr	r5, [pc, #124]	; (86a58 <_svfprintf_r+0x14f4>)
   869dc:	e43c      	b.n	86258 <_svfprintf_r+0xcf4>
   869de:	9b26      	ldr	r3, [sp, #152]	; 0x98
   869e0:	4d1d      	ldr	r5, [pc, #116]	; (86a58 <_svfprintf_r+0x14f4>)
   869e2:	e491      	b.n	86308 <_svfprintf_r+0xda4>
   869e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   869e6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   869ea:	6828      	ldr	r0, [r5, #0]
   869ec:	46a2      	mov	sl, r4
   869ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   869f2:	900a      	str	r0, [sp, #40]	; 0x28
   869f4:	4628      	mov	r0, r5
   869f6:	3004      	adds	r0, #4
   869f8:	900f      	str	r0, [sp, #60]	; 0x3c
   869fa:	f7fe be0d 	b.w	85618 <_svfprintf_r+0xb4>
   869fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86a00:	b913      	cbnz	r3, 86a08 <_svfprintf_r+0x14a4>
   86a02:	f01b 0f01 	tst.w	fp, #1
   86a06:	d002      	beq.n	86a0e <_svfprintf_r+0x14aa>
   86a08:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86a0a:	3301      	adds	r3, #1
   86a0c:	e7cd      	b.n	869aa <_svfprintf_r+0x1446>
   86a0e:	2301      	movs	r3, #1
   86a10:	e71c      	b.n	8684c <_svfprintf_r+0x12e8>
   86a12:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86a16:	f7ff b980 	b.w	85d1a <_svfprintf_r+0x7b6>
   86a1a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86a1e:	f7ff b93a 	b.w	85c96 <_svfprintf_r+0x732>
   86a22:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86a26:	f7ff b84f 	b.w	85ac8 <_svfprintf_r+0x564>
   86a2a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   86a2e:	e679      	b.n	86724 <_svfprintf_r+0x11c0>
   86a30:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86a34:	f7ff b9b2 	b.w	85d9c <_svfprintf_r+0x838>
   86a38:	f04f 32ff 	mov.w	r2, #4294967295
   86a3c:	230c      	movs	r3, #12
   86a3e:	9209      	str	r2, [sp, #36]	; 0x24
   86a40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86a42:	6013      	str	r3, [r2, #0]
   86a44:	f7fe be74 	b.w	85730 <_svfprintf_r+0x1cc>
   86a48:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86a4c:	f7ff b8c4 	b.w	85bd8 <_svfprintf_r+0x674>
   86a50:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86a54:	f7ff b878 	b.w	85b48 <_svfprintf_r+0x5e4>
   86a58:	00089688 	.word	0x00089688
   86a5c:	00089640 	.word	0x00089640
   86a60:	0008963c 	.word	0x0008963c

00086a64 <register_fini>:
   86a64:	4b02      	ldr	r3, [pc, #8]	; (86a70 <register_fini+0xc>)
   86a66:	b113      	cbz	r3, 86a6e <register_fini+0xa>
   86a68:	4802      	ldr	r0, [pc, #8]	; (86a74 <register_fini+0x10>)
   86a6a:	f000 b805 	b.w	86a78 <atexit>
   86a6e:	4770      	bx	lr
   86a70:	00000000 	.word	0x00000000
   86a74:	000879f5 	.word	0x000879f5

00086a78 <atexit>:
   86a78:	2300      	movs	r3, #0
   86a7a:	4601      	mov	r1, r0
   86a7c:	461a      	mov	r2, r3
   86a7e:	4618      	mov	r0, r3
   86a80:	f001 beda 	b.w	88838 <__register_exitproc>

00086a84 <quorem>:
   86a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86a88:	6903      	ldr	r3, [r0, #16]
   86a8a:	690f      	ldr	r7, [r1, #16]
   86a8c:	b083      	sub	sp, #12
   86a8e:	429f      	cmp	r7, r3
   86a90:	f300 8088 	bgt.w	86ba4 <quorem+0x120>
   86a94:	3f01      	subs	r7, #1
   86a96:	f101 0614 	add.w	r6, r1, #20
   86a9a:	f100 0a14 	add.w	sl, r0, #20
   86a9e:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   86aa2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   86aa6:	3301      	adds	r3, #1
   86aa8:	fbb2 f8f3 	udiv	r8, r2, r3
   86aac:	00bb      	lsls	r3, r7, #2
   86aae:	9300      	str	r3, [sp, #0]
   86ab0:	eb06 0903 	add.w	r9, r6, r3
   86ab4:	4453      	add	r3, sl
   86ab6:	9301      	str	r3, [sp, #4]
   86ab8:	f1b8 0f00 	cmp.w	r8, #0
   86abc:	d03b      	beq.n	86b36 <quorem+0xb2>
   86abe:	2300      	movs	r3, #0
   86ac0:	46b4      	mov	ip, r6
   86ac2:	461c      	mov	r4, r3
   86ac4:	46d6      	mov	lr, sl
   86ac6:	f85c 2b04 	ldr.w	r2, [ip], #4
   86aca:	f8de 5000 	ldr.w	r5, [lr]
   86ace:	fa1f fb82 	uxth.w	fp, r2
   86ad2:	fb08 330b 	mla	r3, r8, fp, r3
   86ad6:	0c12      	lsrs	r2, r2, #16
   86ad8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   86adc:	fb08 bb02 	mla	fp, r8, r2, fp
   86ae0:	b29a      	uxth	r2, r3
   86ae2:	1aa2      	subs	r2, r4, r2
   86ae4:	b2ab      	uxth	r3, r5
   86ae6:	fa1f f48b 	uxth.w	r4, fp
   86aea:	441a      	add	r2, r3
   86aec:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   86af0:	eb04 4422 	add.w	r4, r4, r2, asr #16
   86af4:	b292      	uxth	r2, r2
   86af6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   86afa:	45e1      	cmp	r9, ip
   86afc:	f84e 2b04 	str.w	r2, [lr], #4
   86b00:	ea4f 4424 	mov.w	r4, r4, asr #16
   86b04:	ea4f 431b 	mov.w	r3, fp, lsr #16
   86b08:	d2dd      	bcs.n	86ac6 <quorem+0x42>
   86b0a:	9b00      	ldr	r3, [sp, #0]
   86b0c:	f85a 3003 	ldr.w	r3, [sl, r3]
   86b10:	b98b      	cbnz	r3, 86b36 <quorem+0xb2>
   86b12:	9c01      	ldr	r4, [sp, #4]
   86b14:	1f23      	subs	r3, r4, #4
   86b16:	459a      	cmp	sl, r3
   86b18:	d20c      	bcs.n	86b34 <quorem+0xb0>
   86b1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86b1e:	b94b      	cbnz	r3, 86b34 <quorem+0xb0>
   86b20:	f1a4 0308 	sub.w	r3, r4, #8
   86b24:	e002      	b.n	86b2c <quorem+0xa8>
   86b26:	681a      	ldr	r2, [r3, #0]
   86b28:	3b04      	subs	r3, #4
   86b2a:	b91a      	cbnz	r2, 86b34 <quorem+0xb0>
   86b2c:	459a      	cmp	sl, r3
   86b2e:	f107 37ff 	add.w	r7, r7, #4294967295
   86b32:	d3f8      	bcc.n	86b26 <quorem+0xa2>
   86b34:	6107      	str	r7, [r0, #16]
   86b36:	4604      	mov	r4, r0
   86b38:	f001 fcf0 	bl	8851c <__mcmp>
   86b3c:	2800      	cmp	r0, #0
   86b3e:	db2d      	blt.n	86b9c <quorem+0x118>
   86b40:	4655      	mov	r5, sl
   86b42:	2300      	movs	r3, #0
   86b44:	f108 0801 	add.w	r8, r8, #1
   86b48:	f856 1b04 	ldr.w	r1, [r6], #4
   86b4c:	6828      	ldr	r0, [r5, #0]
   86b4e:	b28a      	uxth	r2, r1
   86b50:	1a9a      	subs	r2, r3, r2
   86b52:	0c0b      	lsrs	r3, r1, #16
   86b54:	b281      	uxth	r1, r0
   86b56:	440a      	add	r2, r1
   86b58:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   86b5c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   86b60:	b292      	uxth	r2, r2
   86b62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   86b66:	45b1      	cmp	r9, r6
   86b68:	f845 2b04 	str.w	r2, [r5], #4
   86b6c:	ea4f 4323 	mov.w	r3, r3, asr #16
   86b70:	d2ea      	bcs.n	86b48 <quorem+0xc4>
   86b72:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   86b76:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   86b7a:	b97a      	cbnz	r2, 86b9c <quorem+0x118>
   86b7c:	1f1a      	subs	r2, r3, #4
   86b7e:	4592      	cmp	sl, r2
   86b80:	d20b      	bcs.n	86b9a <quorem+0x116>
   86b82:	f853 2c04 	ldr.w	r2, [r3, #-4]
   86b86:	b942      	cbnz	r2, 86b9a <quorem+0x116>
   86b88:	3b08      	subs	r3, #8
   86b8a:	e002      	b.n	86b92 <quorem+0x10e>
   86b8c:	681a      	ldr	r2, [r3, #0]
   86b8e:	3b04      	subs	r3, #4
   86b90:	b91a      	cbnz	r2, 86b9a <quorem+0x116>
   86b92:	459a      	cmp	sl, r3
   86b94:	f107 37ff 	add.w	r7, r7, #4294967295
   86b98:	d3f8      	bcc.n	86b8c <quorem+0x108>
   86b9a:	6127      	str	r7, [r4, #16]
   86b9c:	4640      	mov	r0, r8
   86b9e:	b003      	add	sp, #12
   86ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86ba4:	2000      	movs	r0, #0
   86ba6:	b003      	add	sp, #12
   86ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86bac:	0000      	movs	r0, r0
	...

00086bb0 <_dtoa_r>:
   86bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86bb4:	6c05      	ldr	r5, [r0, #64]	; 0x40
   86bb6:	b09b      	sub	sp, #108	; 0x6c
   86bb8:	4604      	mov	r4, r0
   86bba:	4692      	mov	sl, r2
   86bbc:	469b      	mov	fp, r3
   86bbe:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   86bc0:	b14d      	cbz	r5, 86bd6 <_dtoa_r+0x26>
   86bc2:	2301      	movs	r3, #1
   86bc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   86bc6:	4629      	mov	r1, r5
   86bc8:	4093      	lsls	r3, r2
   86bca:	60ab      	str	r3, [r5, #8]
   86bcc:	606a      	str	r2, [r5, #4]
   86bce:	f001 facd 	bl	8816c <_Bfree>
   86bd2:	2300      	movs	r3, #0
   86bd4:	6423      	str	r3, [r4, #64]	; 0x40
   86bd6:	f1bb 0f00 	cmp.w	fp, #0
   86bda:	465d      	mov	r5, fp
   86bdc:	db35      	blt.n	86c4a <_dtoa_r+0x9a>
   86bde:	2300      	movs	r3, #0
   86be0:	6033      	str	r3, [r6, #0]
   86be2:	4b9d      	ldr	r3, [pc, #628]	; (86e58 <_dtoa_r+0x2a8>)
   86be4:	43ab      	bics	r3, r5
   86be6:	d015      	beq.n	86c14 <_dtoa_r+0x64>
   86be8:	2200      	movs	r2, #0
   86bea:	2300      	movs	r3, #0
   86bec:	4650      	mov	r0, sl
   86bee:	4659      	mov	r1, fp
   86bf0:	f002 fa7c 	bl	890ec <__aeabi_dcmpeq>
   86bf4:	4680      	mov	r8, r0
   86bf6:	2800      	cmp	r0, #0
   86bf8:	d02d      	beq.n	86c56 <_dtoa_r+0xa6>
   86bfa:	2301      	movs	r3, #1
   86bfc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86bfe:	6013      	str	r3, [r2, #0]
   86c00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86c02:	2b00      	cmp	r3, #0
   86c04:	f000 80bd 	beq.w	86d82 <_dtoa_r+0x1d2>
   86c08:	4894      	ldr	r0, [pc, #592]	; (86e5c <_dtoa_r+0x2ac>)
   86c0a:	6018      	str	r0, [r3, #0]
   86c0c:	3801      	subs	r0, #1
   86c0e:	b01b      	add	sp, #108	; 0x6c
   86c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86c14:	f242 730f 	movw	r3, #9999	; 0x270f
   86c18:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86c1a:	6013      	str	r3, [r2, #0]
   86c1c:	f1ba 0f00 	cmp.w	sl, #0
   86c20:	d10d      	bne.n	86c3e <_dtoa_r+0x8e>
   86c22:	f3c5 0513 	ubfx	r5, r5, #0, #20
   86c26:	b955      	cbnz	r5, 86c3e <_dtoa_r+0x8e>
   86c28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86c2a:	488d      	ldr	r0, [pc, #564]	; (86e60 <_dtoa_r+0x2b0>)
   86c2c:	2b00      	cmp	r3, #0
   86c2e:	d0ee      	beq.n	86c0e <_dtoa_r+0x5e>
   86c30:	f100 0308 	add.w	r3, r0, #8
   86c34:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   86c36:	6013      	str	r3, [r2, #0]
   86c38:	b01b      	add	sp, #108	; 0x6c
   86c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86c3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86c40:	4888      	ldr	r0, [pc, #544]	; (86e64 <_dtoa_r+0x2b4>)
   86c42:	2b00      	cmp	r3, #0
   86c44:	d0e3      	beq.n	86c0e <_dtoa_r+0x5e>
   86c46:	1cc3      	adds	r3, r0, #3
   86c48:	e7f4      	b.n	86c34 <_dtoa_r+0x84>
   86c4a:	2301      	movs	r3, #1
   86c4c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   86c50:	6033      	str	r3, [r6, #0]
   86c52:	46ab      	mov	fp, r5
   86c54:	e7c5      	b.n	86be2 <_dtoa_r+0x32>
   86c56:	aa18      	add	r2, sp, #96	; 0x60
   86c58:	ab19      	add	r3, sp, #100	; 0x64
   86c5a:	9201      	str	r2, [sp, #4]
   86c5c:	9300      	str	r3, [sp, #0]
   86c5e:	4652      	mov	r2, sl
   86c60:	465b      	mov	r3, fp
   86c62:	4620      	mov	r0, r4
   86c64:	f001 fd04 	bl	88670 <__d2b>
   86c68:	0d2b      	lsrs	r3, r5, #20
   86c6a:	4681      	mov	r9, r0
   86c6c:	d071      	beq.n	86d52 <_dtoa_r+0x1a2>
   86c6e:	4650      	mov	r0, sl
   86c70:	f3cb 0213 	ubfx	r2, fp, #0, #20
   86c74:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   86c78:	9f18      	ldr	r7, [sp, #96]	; 0x60
   86c7a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   86c7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   86c82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   86c86:	2200      	movs	r2, #0
   86c88:	4b77      	ldr	r3, [pc, #476]	; (86e68 <_dtoa_r+0x2b8>)
   86c8a:	f7fd fce1 	bl	84650 <__aeabi_dsub>
   86c8e:	a36c      	add	r3, pc, #432	; (adr r3, 86e40 <_dtoa_r+0x290>)
   86c90:	e9d3 2300 	ldrd	r2, r3, [r3]
   86c94:	f7fd fe90 	bl	849b8 <__aeabi_dmul>
   86c98:	a36b      	add	r3, pc, #428	; (adr r3, 86e48 <_dtoa_r+0x298>)
   86c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   86c9e:	f7fd fcd9 	bl	84654 <__adddf3>
   86ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   86ca6:	4630      	mov	r0, r6
   86ca8:	f7fd fe20 	bl	848ec <__aeabi_i2d>
   86cac:	a368      	add	r3, pc, #416	; (adr r3, 86e50 <_dtoa_r+0x2a0>)
   86cae:	e9d3 2300 	ldrd	r2, r3, [r3]
   86cb2:	f7fd fe81 	bl	849b8 <__aeabi_dmul>
   86cb6:	4602      	mov	r2, r0
   86cb8:	460b      	mov	r3, r1
   86cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   86cbe:	f7fd fcc9 	bl	84654 <__adddf3>
   86cc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   86cc6:	f002 fa59 	bl	8917c <__aeabi_d2iz>
   86cca:	2200      	movs	r2, #0
   86ccc:	9002      	str	r0, [sp, #8]
   86cce:	2300      	movs	r3, #0
   86cd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   86cd4:	f002 fa14 	bl	89100 <__aeabi_dcmplt>
   86cd8:	2800      	cmp	r0, #0
   86cda:	f040 816d 	bne.w	86fb8 <_dtoa_r+0x408>
   86cde:	9d02      	ldr	r5, [sp, #8]
   86ce0:	2d16      	cmp	r5, #22
   86ce2:	f200 8157 	bhi.w	86f94 <_dtoa_r+0x3e4>
   86ce6:	4961      	ldr	r1, [pc, #388]	; (86e6c <_dtoa_r+0x2bc>)
   86ce8:	4652      	mov	r2, sl
   86cea:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   86cee:	465b      	mov	r3, fp
   86cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
   86cf4:	f002 fa22 	bl	8913c <__aeabi_dcmpgt>
   86cf8:	2800      	cmp	r0, #0
   86cfa:	f000 81be 	beq.w	8707a <_dtoa_r+0x4ca>
   86cfe:	1e6b      	subs	r3, r5, #1
   86d00:	9302      	str	r3, [sp, #8]
   86d02:	2300      	movs	r3, #0
   86d04:	930e      	str	r3, [sp, #56]	; 0x38
   86d06:	1bbf      	subs	r7, r7, r6
   86d08:	1e7b      	subs	r3, r7, #1
   86d0a:	9308      	str	r3, [sp, #32]
   86d0c:	f100 814e 	bmi.w	86fac <_dtoa_r+0x3fc>
   86d10:	2300      	movs	r3, #0
   86d12:	930a      	str	r3, [sp, #40]	; 0x28
   86d14:	9b02      	ldr	r3, [sp, #8]
   86d16:	2b00      	cmp	r3, #0
   86d18:	f2c0 813f 	blt.w	86f9a <_dtoa_r+0x3ea>
   86d1c:	9a08      	ldr	r2, [sp, #32]
   86d1e:	930d      	str	r3, [sp, #52]	; 0x34
   86d20:	4611      	mov	r1, r2
   86d22:	4419      	add	r1, r3
   86d24:	2300      	movs	r3, #0
   86d26:	9108      	str	r1, [sp, #32]
   86d28:	930c      	str	r3, [sp, #48]	; 0x30
   86d2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86d2c:	2b09      	cmp	r3, #9
   86d2e:	d82a      	bhi.n	86d86 <_dtoa_r+0x1d6>
   86d30:	2b05      	cmp	r3, #5
   86d32:	f340 8658 	ble.w	879e6 <_dtoa_r+0xe36>
   86d36:	2500      	movs	r5, #0
   86d38:	3b04      	subs	r3, #4
   86d3a:	9324      	str	r3, [sp, #144]	; 0x90
   86d3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86d3e:	3b02      	subs	r3, #2
   86d40:	2b03      	cmp	r3, #3
   86d42:	f200 863f 	bhi.w	879c4 <_dtoa_r+0xe14>
   86d46:	e8df f013 	tbh	[pc, r3, lsl #1]
   86d4a:	03ce      	.short	0x03ce
   86d4c:	03d902c3 	.word	0x03d902c3
   86d50:	045b      	.short	0x045b
   86d52:	9f18      	ldr	r7, [sp, #96]	; 0x60
   86d54:	9e19      	ldr	r6, [sp, #100]	; 0x64
   86d56:	443e      	add	r6, r7
   86d58:	f206 4332 	addw	r3, r6, #1074	; 0x432
   86d5c:	2b20      	cmp	r3, #32
   86d5e:	f340 8187 	ble.w	87070 <_dtoa_r+0x4c0>
   86d62:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   86d66:	f206 4012 	addw	r0, r6, #1042	; 0x412
   86d6a:	409d      	lsls	r5, r3
   86d6c:	fa2a f000 	lsr.w	r0, sl, r0
   86d70:	4328      	orrs	r0, r5
   86d72:	f7fd fdab 	bl	848cc <__aeabi_ui2d>
   86d76:	2301      	movs	r3, #1
   86d78:	3e01      	subs	r6, #1
   86d7a:	9314      	str	r3, [sp, #80]	; 0x50
   86d7c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   86d80:	e781      	b.n	86c86 <_dtoa_r+0xd6>
   86d82:	483b      	ldr	r0, [pc, #236]	; (86e70 <_dtoa_r+0x2c0>)
   86d84:	e743      	b.n	86c0e <_dtoa_r+0x5e>
   86d86:	2100      	movs	r1, #0
   86d88:	4620      	mov	r0, r4
   86d8a:	6461      	str	r1, [r4, #68]	; 0x44
   86d8c:	9125      	str	r1, [sp, #148]	; 0x94
   86d8e:	f001 f9c7 	bl	88120 <_Balloc>
   86d92:	f04f 33ff 	mov.w	r3, #4294967295
   86d96:	9307      	str	r3, [sp, #28]
   86d98:	930f      	str	r3, [sp, #60]	; 0x3c
   86d9a:	2301      	movs	r3, #1
   86d9c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   86d9e:	9004      	str	r0, [sp, #16]
   86da0:	6420      	str	r0, [r4, #64]	; 0x40
   86da2:	9224      	str	r2, [sp, #144]	; 0x90
   86da4:	930b      	str	r3, [sp, #44]	; 0x2c
   86da6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86da8:	2b00      	cmp	r3, #0
   86daa:	f2c0 80d3 	blt.w	86f54 <_dtoa_r+0x3a4>
   86dae:	9a02      	ldr	r2, [sp, #8]
   86db0:	2a0e      	cmp	r2, #14
   86db2:	f300 80cf 	bgt.w	86f54 <_dtoa_r+0x3a4>
   86db6:	4b2d      	ldr	r3, [pc, #180]	; (86e6c <_dtoa_r+0x2bc>)
   86db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   86dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   86dc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   86dc4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86dc6:	2b00      	cmp	r3, #0
   86dc8:	f2c0 83b4 	blt.w	87534 <_dtoa_r+0x984>
   86dcc:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   86dd0:	4650      	mov	r0, sl
   86dd2:	462a      	mov	r2, r5
   86dd4:	4633      	mov	r3, r6
   86dd6:	4659      	mov	r1, fp
   86dd8:	f7fd ff18 	bl	84c0c <__aeabi_ddiv>
   86ddc:	f002 f9ce 	bl	8917c <__aeabi_d2iz>
   86de0:	4680      	mov	r8, r0
   86de2:	f7fd fd83 	bl	848ec <__aeabi_i2d>
   86de6:	462a      	mov	r2, r5
   86de8:	4633      	mov	r3, r6
   86dea:	f7fd fde5 	bl	849b8 <__aeabi_dmul>
   86dee:	4602      	mov	r2, r0
   86df0:	460b      	mov	r3, r1
   86df2:	4650      	mov	r0, sl
   86df4:	4659      	mov	r1, fp
   86df6:	f7fd fc2b 	bl	84650 <__aeabi_dsub>
   86dfa:	9e07      	ldr	r6, [sp, #28]
   86dfc:	9f04      	ldr	r7, [sp, #16]
   86dfe:	f108 0530 	add.w	r5, r8, #48	; 0x30
   86e02:	2e01      	cmp	r6, #1
   86e04:	703d      	strb	r5, [r7, #0]
   86e06:	4602      	mov	r2, r0
   86e08:	460b      	mov	r3, r1
   86e0a:	f107 0501 	add.w	r5, r7, #1
   86e0e:	d064      	beq.n	86eda <_dtoa_r+0x32a>
   86e10:	2200      	movs	r2, #0
   86e12:	4b18      	ldr	r3, [pc, #96]	; (86e74 <_dtoa_r+0x2c4>)
   86e14:	f7fd fdd0 	bl	849b8 <__aeabi_dmul>
   86e18:	2200      	movs	r2, #0
   86e1a:	2300      	movs	r3, #0
   86e1c:	4606      	mov	r6, r0
   86e1e:	460f      	mov	r7, r1
   86e20:	f002 f964 	bl	890ec <__aeabi_dcmpeq>
   86e24:	2800      	cmp	r0, #0
   86e26:	f040 8082 	bne.w	86f2e <_dtoa_r+0x37e>
   86e2a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   86e2e:	f04f 0a00 	mov.w	sl, #0
   86e32:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   86e36:	f04f 0b00 	mov.w	fp, #0
   86e3a:	940b      	str	r4, [sp, #44]	; 0x2c
   86e3c:	e029      	b.n	86e92 <_dtoa_r+0x2e2>
   86e3e:	bf00      	nop
   86e40:	636f4361 	.word	0x636f4361
   86e44:	3fd287a7 	.word	0x3fd287a7
   86e48:	8b60c8b3 	.word	0x8b60c8b3
   86e4c:	3fc68a28 	.word	0x3fc68a28
   86e50:	509f79fb 	.word	0x509f79fb
   86e54:	3fd34413 	.word	0x3fd34413
   86e58:	7ff00000 	.word	0x7ff00000
   86e5c:	00089675 	.word	0x00089675
   86e60:	00089698 	.word	0x00089698
   86e64:	000896a4 	.word	0x000896a4
   86e68:	3ff80000 	.word	0x3ff80000
   86e6c:	000896d0 	.word	0x000896d0
   86e70:	00089674 	.word	0x00089674
   86e74:	40240000 	.word	0x40240000
   86e78:	2200      	movs	r2, #0
   86e7a:	4b81      	ldr	r3, [pc, #516]	; (87080 <_dtoa_r+0x4d0>)
   86e7c:	f7fd fd9c 	bl	849b8 <__aeabi_dmul>
   86e80:	4652      	mov	r2, sl
   86e82:	465b      	mov	r3, fp
   86e84:	4606      	mov	r6, r0
   86e86:	460f      	mov	r7, r1
   86e88:	f002 f930 	bl	890ec <__aeabi_dcmpeq>
   86e8c:	2800      	cmp	r0, #0
   86e8e:	f040 83ba 	bne.w	87606 <_dtoa_r+0xa56>
   86e92:	4642      	mov	r2, r8
   86e94:	464b      	mov	r3, r9
   86e96:	4630      	mov	r0, r6
   86e98:	4639      	mov	r1, r7
   86e9a:	f7fd feb7 	bl	84c0c <__aeabi_ddiv>
   86e9e:	f002 f96d 	bl	8917c <__aeabi_d2iz>
   86ea2:	4604      	mov	r4, r0
   86ea4:	f7fd fd22 	bl	848ec <__aeabi_i2d>
   86ea8:	4642      	mov	r2, r8
   86eaa:	464b      	mov	r3, r9
   86eac:	f7fd fd84 	bl	849b8 <__aeabi_dmul>
   86eb0:	4602      	mov	r2, r0
   86eb2:	460b      	mov	r3, r1
   86eb4:	4630      	mov	r0, r6
   86eb6:	4639      	mov	r1, r7
   86eb8:	f7fd fbca 	bl	84650 <__aeabi_dsub>
   86ebc:	f104 0630 	add.w	r6, r4, #48	; 0x30
   86ec0:	f805 6b01 	strb.w	r6, [r5], #1
   86ec4:	9e04      	ldr	r6, [sp, #16]
   86ec6:	9f07      	ldr	r7, [sp, #28]
   86ec8:	1bae      	subs	r6, r5, r6
   86eca:	42be      	cmp	r6, r7
   86ecc:	4602      	mov	r2, r0
   86ece:	460b      	mov	r3, r1
   86ed0:	d1d2      	bne.n	86e78 <_dtoa_r+0x2c8>
   86ed2:	46a0      	mov	r8, r4
   86ed4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86ed8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86eda:	4610      	mov	r0, r2
   86edc:	4619      	mov	r1, r3
   86ede:	f7fd fbb9 	bl	84654 <__adddf3>
   86ee2:	4606      	mov	r6, r0
   86ee4:	460f      	mov	r7, r1
   86ee6:	4602      	mov	r2, r0
   86ee8:	460b      	mov	r3, r1
   86eea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86eee:	f002 f907 	bl	89100 <__aeabi_dcmplt>
   86ef2:	b948      	cbnz	r0, 86f08 <_dtoa_r+0x358>
   86ef4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86ef8:	4632      	mov	r2, r6
   86efa:	463b      	mov	r3, r7
   86efc:	f002 f8f6 	bl	890ec <__aeabi_dcmpeq>
   86f00:	b1a8      	cbz	r0, 86f2e <_dtoa_r+0x37e>
   86f02:	f018 0f01 	tst.w	r8, #1
   86f06:	d012      	beq.n	86f2e <_dtoa_r+0x37e>
   86f08:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   86f0c:	1e6b      	subs	r3, r5, #1
   86f0e:	9a04      	ldr	r2, [sp, #16]
   86f10:	e004      	b.n	86f1c <_dtoa_r+0x36c>
   86f12:	429a      	cmp	r2, r3
   86f14:	f000 8402 	beq.w	8771c <_dtoa_r+0xb6c>
   86f18:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   86f1c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   86f20:	f103 0501 	add.w	r5, r3, #1
   86f24:	d0f5      	beq.n	86f12 <_dtoa_r+0x362>
   86f26:	f108 0801 	add.w	r8, r8, #1
   86f2a:	f883 8000 	strb.w	r8, [r3]
   86f2e:	4649      	mov	r1, r9
   86f30:	4620      	mov	r0, r4
   86f32:	f001 f91b 	bl	8816c <_Bfree>
   86f36:	2200      	movs	r2, #0
   86f38:	9b02      	ldr	r3, [sp, #8]
   86f3a:	702a      	strb	r2, [r5, #0]
   86f3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86f3e:	3301      	adds	r3, #1
   86f40:	6013      	str	r3, [r2, #0]
   86f42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86f44:	2b00      	cmp	r3, #0
   86f46:	f000 839f 	beq.w	87688 <_dtoa_r+0xad8>
   86f4a:	9804      	ldr	r0, [sp, #16]
   86f4c:	601d      	str	r5, [r3, #0]
   86f4e:	b01b      	add	sp, #108	; 0x6c
   86f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86f54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86f56:	2a00      	cmp	r2, #0
   86f58:	d03e      	beq.n	86fd8 <_dtoa_r+0x428>
   86f5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86f5c:	2a01      	cmp	r2, #1
   86f5e:	f340 8311 	ble.w	87584 <_dtoa_r+0x9d4>
   86f62:	9b07      	ldr	r3, [sp, #28]
   86f64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86f66:	1e5f      	subs	r7, r3, #1
   86f68:	42ba      	cmp	r2, r7
   86f6a:	f2c0 8390 	blt.w	8768e <_dtoa_r+0xade>
   86f6e:	1bd7      	subs	r7, r2, r7
   86f70:	9b07      	ldr	r3, [sp, #28]
   86f72:	2b00      	cmp	r3, #0
   86f74:	f2c0 848c 	blt.w	87890 <_dtoa_r+0xce0>
   86f78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   86f7a:	9b07      	ldr	r3, [sp, #28]
   86f7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86f7e:	2101      	movs	r1, #1
   86f80:	441a      	add	r2, r3
   86f82:	920a      	str	r2, [sp, #40]	; 0x28
   86f84:	9a08      	ldr	r2, [sp, #32]
   86f86:	4620      	mov	r0, r4
   86f88:	441a      	add	r2, r3
   86f8a:	9208      	str	r2, [sp, #32]
   86f8c:	f001 f98a 	bl	882a4 <__i2b>
   86f90:	4606      	mov	r6, r0
   86f92:	e023      	b.n	86fdc <_dtoa_r+0x42c>
   86f94:	2301      	movs	r3, #1
   86f96:	930e      	str	r3, [sp, #56]	; 0x38
   86f98:	e6b5      	b.n	86d06 <_dtoa_r+0x156>
   86f9a:	2300      	movs	r3, #0
   86f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86f9e:	930d      	str	r3, [sp, #52]	; 0x34
   86fa0:	9b02      	ldr	r3, [sp, #8]
   86fa2:	1ad2      	subs	r2, r2, r3
   86fa4:	425b      	negs	r3, r3
   86fa6:	920a      	str	r2, [sp, #40]	; 0x28
   86fa8:	930c      	str	r3, [sp, #48]	; 0x30
   86faa:	e6be      	b.n	86d2a <_dtoa_r+0x17a>
   86fac:	f1c7 0301 	rsb	r3, r7, #1
   86fb0:	930a      	str	r3, [sp, #40]	; 0x28
   86fb2:	2300      	movs	r3, #0
   86fb4:	9308      	str	r3, [sp, #32]
   86fb6:	e6ad      	b.n	86d14 <_dtoa_r+0x164>
   86fb8:	9d02      	ldr	r5, [sp, #8]
   86fba:	4628      	mov	r0, r5
   86fbc:	f7fd fc96 	bl	848ec <__aeabi_i2d>
   86fc0:	4602      	mov	r2, r0
   86fc2:	460b      	mov	r3, r1
   86fc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   86fc8:	f002 f890 	bl	890ec <__aeabi_dcmpeq>
   86fcc:	2800      	cmp	r0, #0
   86fce:	f47f ae86 	bne.w	86cde <_dtoa_r+0x12e>
   86fd2:	1e6b      	subs	r3, r5, #1
   86fd4:	9302      	str	r3, [sp, #8]
   86fd6:	e682      	b.n	86cde <_dtoa_r+0x12e>
   86fd8:	ad0a      	add	r5, sp, #40	; 0x28
   86fda:	cde0      	ldmia	r5, {r5, r6, r7}
   86fdc:	2d00      	cmp	r5, #0
   86fde:	dd0c      	ble.n	86ffa <_dtoa_r+0x44a>
   86fe0:	9908      	ldr	r1, [sp, #32]
   86fe2:	2900      	cmp	r1, #0
   86fe4:	460b      	mov	r3, r1
   86fe6:	dd08      	ble.n	86ffa <_dtoa_r+0x44a>
   86fe8:	42a9      	cmp	r1, r5
   86fea:	bfa8      	it	ge
   86fec:	462b      	movge	r3, r5
   86fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86ff0:	1aed      	subs	r5, r5, r3
   86ff2:	1ad2      	subs	r2, r2, r3
   86ff4:	1acb      	subs	r3, r1, r3
   86ff6:	920a      	str	r2, [sp, #40]	; 0x28
   86ff8:	9308      	str	r3, [sp, #32]
   86ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86ffc:	b1d3      	cbz	r3, 87034 <_dtoa_r+0x484>
   86ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87000:	2b00      	cmp	r3, #0
   87002:	f000 82b8 	beq.w	87576 <_dtoa_r+0x9c6>
   87006:	2f00      	cmp	r7, #0
   87008:	dd10      	ble.n	8702c <_dtoa_r+0x47c>
   8700a:	4631      	mov	r1, r6
   8700c:	463a      	mov	r2, r7
   8700e:	4620      	mov	r0, r4
   87010:	f001 f9e4 	bl	883dc <__pow5mult>
   87014:	464a      	mov	r2, r9
   87016:	4601      	mov	r1, r0
   87018:	4606      	mov	r6, r0
   8701a:	4620      	mov	r0, r4
   8701c:	f001 f94c 	bl	882b8 <__multiply>
   87020:	4603      	mov	r3, r0
   87022:	4649      	mov	r1, r9
   87024:	4620      	mov	r0, r4
   87026:	4699      	mov	r9, r3
   87028:	f001 f8a0 	bl	8816c <_Bfree>
   8702c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8702e:	1bda      	subs	r2, r3, r7
   87030:	f040 82a2 	bne.w	87578 <_dtoa_r+0x9c8>
   87034:	2101      	movs	r1, #1
   87036:	4620      	mov	r0, r4
   87038:	f001 f934 	bl	882a4 <__i2b>
   8703c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8703e:	4680      	mov	r8, r0
   87040:	2b00      	cmp	r3, #0
   87042:	dd1f      	ble.n	87084 <_dtoa_r+0x4d4>
   87044:	4601      	mov	r1, r0
   87046:	461a      	mov	r2, r3
   87048:	4620      	mov	r0, r4
   8704a:	f001 f9c7 	bl	883dc <__pow5mult>
   8704e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87050:	4680      	mov	r8, r0
   87052:	2b01      	cmp	r3, #1
   87054:	f340 8255 	ble.w	87502 <_dtoa_r+0x952>
   87058:	2300      	movs	r3, #0
   8705a:	930c      	str	r3, [sp, #48]	; 0x30
   8705c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   87060:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   87064:	6918      	ldr	r0, [r3, #16]
   87066:	f001 f8cd 	bl	88204 <__hi0bits>
   8706a:	f1c0 0020 	rsb	r0, r0, #32
   8706e:	e013      	b.n	87098 <_dtoa_r+0x4e8>
   87070:	f1c3 0520 	rsb	r5, r3, #32
   87074:	fa0a f005 	lsl.w	r0, sl, r5
   87078:	e67b      	b.n	86d72 <_dtoa_r+0x1c2>
   8707a:	900e      	str	r0, [sp, #56]	; 0x38
   8707c:	e643      	b.n	86d06 <_dtoa_r+0x156>
   8707e:	bf00      	nop
   87080:	40240000 	.word	0x40240000
   87084:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87086:	2b01      	cmp	r3, #1
   87088:	f340 8285 	ble.w	87596 <_dtoa_r+0x9e6>
   8708c:	2300      	movs	r3, #0
   8708e:	930c      	str	r3, [sp, #48]	; 0x30
   87090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87092:	2001      	movs	r0, #1
   87094:	2b00      	cmp	r3, #0
   87096:	d1e1      	bne.n	8705c <_dtoa_r+0x4ac>
   87098:	9a08      	ldr	r2, [sp, #32]
   8709a:	4410      	add	r0, r2
   8709c:	f010 001f 	ands.w	r0, r0, #31
   870a0:	f000 80a1 	beq.w	871e6 <_dtoa_r+0x636>
   870a4:	f1c0 0320 	rsb	r3, r0, #32
   870a8:	2b04      	cmp	r3, #4
   870aa:	f340 8486 	ble.w	879ba <_dtoa_r+0xe0a>
   870ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   870b0:	f1c0 001c 	rsb	r0, r0, #28
   870b4:	4403      	add	r3, r0
   870b6:	930a      	str	r3, [sp, #40]	; 0x28
   870b8:	4613      	mov	r3, r2
   870ba:	4403      	add	r3, r0
   870bc:	4405      	add	r5, r0
   870be:	9308      	str	r3, [sp, #32]
   870c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   870c2:	2b00      	cmp	r3, #0
   870c4:	dd05      	ble.n	870d2 <_dtoa_r+0x522>
   870c6:	4649      	mov	r1, r9
   870c8:	461a      	mov	r2, r3
   870ca:	4620      	mov	r0, r4
   870cc:	f001 f9d6 	bl	8847c <__lshift>
   870d0:	4681      	mov	r9, r0
   870d2:	9b08      	ldr	r3, [sp, #32]
   870d4:	2b00      	cmp	r3, #0
   870d6:	dd05      	ble.n	870e4 <_dtoa_r+0x534>
   870d8:	4641      	mov	r1, r8
   870da:	461a      	mov	r2, r3
   870dc:	4620      	mov	r0, r4
   870de:	f001 f9cd 	bl	8847c <__lshift>
   870e2:	4680      	mov	r8, r0
   870e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   870e6:	2b00      	cmp	r3, #0
   870e8:	f040 8086 	bne.w	871f8 <_dtoa_r+0x648>
   870ec:	9b07      	ldr	r3, [sp, #28]
   870ee:	2b00      	cmp	r3, #0
   870f0:	f340 8264 	ble.w	875bc <_dtoa_r+0xa0c>
   870f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   870f6:	2b00      	cmp	r3, #0
   870f8:	f000 8098 	beq.w	8722c <_dtoa_r+0x67c>
   870fc:	2d00      	cmp	r5, #0
   870fe:	dd05      	ble.n	8710c <_dtoa_r+0x55c>
   87100:	4631      	mov	r1, r6
   87102:	462a      	mov	r2, r5
   87104:	4620      	mov	r0, r4
   87106:	f001 f9b9 	bl	8847c <__lshift>
   8710a:	4606      	mov	r6, r0
   8710c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8710e:	2b00      	cmp	r3, #0
   87110:	f040 8336 	bne.w	87780 <_dtoa_r+0xbd0>
   87114:	9608      	str	r6, [sp, #32]
   87116:	9b07      	ldr	r3, [sp, #28]
   87118:	9a04      	ldr	r2, [sp, #16]
   8711a:	3b01      	subs	r3, #1
   8711c:	18d3      	adds	r3, r2, r3
   8711e:	930b      	str	r3, [sp, #44]	; 0x2c
   87120:	4617      	mov	r7, r2
   87122:	f00a 0301 	and.w	r3, sl, #1
   87126:	46c2      	mov	sl, r8
   87128:	f8dd b020 	ldr.w	fp, [sp, #32]
   8712c:	930c      	str	r3, [sp, #48]	; 0x30
   8712e:	4651      	mov	r1, sl
   87130:	4648      	mov	r0, r9
   87132:	f7ff fca7 	bl	86a84 <quorem>
   87136:	4631      	mov	r1, r6
   87138:	4605      	mov	r5, r0
   8713a:	4648      	mov	r0, r9
   8713c:	f001 f9ee 	bl	8851c <__mcmp>
   87140:	465a      	mov	r2, fp
   87142:	9007      	str	r0, [sp, #28]
   87144:	4651      	mov	r1, sl
   87146:	4620      	mov	r0, r4
   87148:	f001 fa04 	bl	88554 <__mdiff>
   8714c:	68c2      	ldr	r2, [r0, #12]
   8714e:	4680      	mov	r8, r0
   87150:	f105 0330 	add.w	r3, r5, #48	; 0x30
   87154:	2a00      	cmp	r2, #0
   87156:	f040 8229 	bne.w	875ac <_dtoa_r+0x9fc>
   8715a:	4601      	mov	r1, r0
   8715c:	4648      	mov	r0, r9
   8715e:	930a      	str	r3, [sp, #40]	; 0x28
   87160:	f001 f9dc 	bl	8851c <__mcmp>
   87164:	4641      	mov	r1, r8
   87166:	9008      	str	r0, [sp, #32]
   87168:	4620      	mov	r0, r4
   8716a:	f000 ffff 	bl	8816c <_Bfree>
   8716e:	9a08      	ldr	r2, [sp, #32]
   87170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87172:	b932      	cbnz	r2, 87182 <_dtoa_r+0x5d2>
   87174:	9924      	ldr	r1, [sp, #144]	; 0x90
   87176:	b921      	cbnz	r1, 87182 <_dtoa_r+0x5d2>
   87178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8717a:	2a00      	cmp	r2, #0
   8717c:	f000 83ee 	beq.w	8795c <_dtoa_r+0xdac>
   87180:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87182:	9907      	ldr	r1, [sp, #28]
   87184:	2900      	cmp	r1, #0
   87186:	f2c0 829f 	blt.w	876c8 <_dtoa_r+0xb18>
   8718a:	d105      	bne.n	87198 <_dtoa_r+0x5e8>
   8718c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8718e:	b919      	cbnz	r1, 87198 <_dtoa_r+0x5e8>
   87190:	990c      	ldr	r1, [sp, #48]	; 0x30
   87192:	2900      	cmp	r1, #0
   87194:	f000 8298 	beq.w	876c8 <_dtoa_r+0xb18>
   87198:	2a00      	cmp	r2, #0
   8719a:	f300 8305 	bgt.w	877a8 <_dtoa_r+0xbf8>
   8719e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   871a0:	f107 0801 	add.w	r8, r7, #1
   871a4:	4297      	cmp	r7, r2
   871a6:	703b      	strb	r3, [r7, #0]
   871a8:	4645      	mov	r5, r8
   871aa:	f000 830b 	beq.w	877c4 <_dtoa_r+0xc14>
   871ae:	4649      	mov	r1, r9
   871b0:	2300      	movs	r3, #0
   871b2:	220a      	movs	r2, #10
   871b4:	4620      	mov	r0, r4
   871b6:	f000 ffe3 	bl	88180 <__multadd>
   871ba:	455e      	cmp	r6, fp
   871bc:	4681      	mov	r9, r0
   871be:	4631      	mov	r1, r6
   871c0:	f04f 0300 	mov.w	r3, #0
   871c4:	f04f 020a 	mov.w	r2, #10
   871c8:	4620      	mov	r0, r4
   871ca:	f000 81e9 	beq.w	875a0 <_dtoa_r+0x9f0>
   871ce:	f000 ffd7 	bl	88180 <__multadd>
   871d2:	4659      	mov	r1, fp
   871d4:	4606      	mov	r6, r0
   871d6:	2300      	movs	r3, #0
   871d8:	220a      	movs	r2, #10
   871da:	4620      	mov	r0, r4
   871dc:	f000 ffd0 	bl	88180 <__multadd>
   871e0:	4647      	mov	r7, r8
   871e2:	4683      	mov	fp, r0
   871e4:	e7a3      	b.n	8712e <_dtoa_r+0x57e>
   871e6:	201c      	movs	r0, #28
   871e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   871ea:	4405      	add	r5, r0
   871ec:	4403      	add	r3, r0
   871ee:	930a      	str	r3, [sp, #40]	; 0x28
   871f0:	9b08      	ldr	r3, [sp, #32]
   871f2:	4403      	add	r3, r0
   871f4:	9308      	str	r3, [sp, #32]
   871f6:	e763      	b.n	870c0 <_dtoa_r+0x510>
   871f8:	4641      	mov	r1, r8
   871fa:	4648      	mov	r0, r9
   871fc:	f001 f98e 	bl	8851c <__mcmp>
   87200:	2800      	cmp	r0, #0
   87202:	f6bf af73 	bge.w	870ec <_dtoa_r+0x53c>
   87206:	9f02      	ldr	r7, [sp, #8]
   87208:	4649      	mov	r1, r9
   8720a:	2300      	movs	r3, #0
   8720c:	220a      	movs	r2, #10
   8720e:	4620      	mov	r0, r4
   87210:	3f01      	subs	r7, #1
   87212:	9702      	str	r7, [sp, #8]
   87214:	f000 ffb4 	bl	88180 <__multadd>
   87218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8721a:	4681      	mov	r9, r0
   8721c:	2b00      	cmp	r3, #0
   8721e:	f040 83b5 	bne.w	8798c <_dtoa_r+0xddc>
   87222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87224:	2b00      	cmp	r3, #0
   87226:	f340 83be 	ble.w	879a6 <_dtoa_r+0xdf6>
   8722a:	9307      	str	r3, [sp, #28]
   8722c:	f8dd a010 	ldr.w	sl, [sp, #16]
   87230:	9f07      	ldr	r7, [sp, #28]
   87232:	4655      	mov	r5, sl
   87234:	e006      	b.n	87244 <_dtoa_r+0x694>
   87236:	4649      	mov	r1, r9
   87238:	2300      	movs	r3, #0
   8723a:	220a      	movs	r2, #10
   8723c:	4620      	mov	r0, r4
   8723e:	f000 ff9f 	bl	88180 <__multadd>
   87242:	4681      	mov	r9, r0
   87244:	4641      	mov	r1, r8
   87246:	4648      	mov	r0, r9
   87248:	f7ff fc1c 	bl	86a84 <quorem>
   8724c:	3030      	adds	r0, #48	; 0x30
   8724e:	f805 0b01 	strb.w	r0, [r5], #1
   87252:	eba5 030a 	sub.w	r3, r5, sl
   87256:	42bb      	cmp	r3, r7
   87258:	dbed      	blt.n	87236 <_dtoa_r+0x686>
   8725a:	9b04      	ldr	r3, [sp, #16]
   8725c:	9a07      	ldr	r2, [sp, #28]
   8725e:	4682      	mov	sl, r0
   87260:	2a01      	cmp	r2, #1
   87262:	bfac      	ite	ge
   87264:	189b      	addge	r3, r3, r2
   87266:	3301      	addlt	r3, #1
   87268:	f04f 0b00 	mov.w	fp, #0
   8726c:	461d      	mov	r5, r3
   8726e:	4649      	mov	r1, r9
   87270:	2201      	movs	r2, #1
   87272:	4620      	mov	r0, r4
   87274:	f001 f902 	bl	8847c <__lshift>
   87278:	4641      	mov	r1, r8
   8727a:	4681      	mov	r9, r0
   8727c:	f001 f94e 	bl	8851c <__mcmp>
   87280:	2800      	cmp	r0, #0
   87282:	f340 823f 	ble.w	87704 <_dtoa_r+0xb54>
   87286:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   8728a:	1e6b      	subs	r3, r5, #1
   8728c:	9904      	ldr	r1, [sp, #16]
   8728e:	e004      	b.n	8729a <_dtoa_r+0x6ea>
   87290:	428b      	cmp	r3, r1
   87292:	f000 81ae 	beq.w	875f2 <_dtoa_r+0xa42>
   87296:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   8729a:	2a39      	cmp	r2, #57	; 0x39
   8729c:	f103 0501 	add.w	r5, r3, #1
   872a0:	d0f6      	beq.n	87290 <_dtoa_r+0x6e0>
   872a2:	3201      	adds	r2, #1
   872a4:	701a      	strb	r2, [r3, #0]
   872a6:	4641      	mov	r1, r8
   872a8:	4620      	mov	r0, r4
   872aa:	f000 ff5f 	bl	8816c <_Bfree>
   872ae:	2e00      	cmp	r6, #0
   872b0:	f43f ae3d 	beq.w	86f2e <_dtoa_r+0x37e>
   872b4:	f1bb 0f00 	cmp.w	fp, #0
   872b8:	d005      	beq.n	872c6 <_dtoa_r+0x716>
   872ba:	45b3      	cmp	fp, r6
   872bc:	d003      	beq.n	872c6 <_dtoa_r+0x716>
   872be:	4659      	mov	r1, fp
   872c0:	4620      	mov	r0, r4
   872c2:	f000 ff53 	bl	8816c <_Bfree>
   872c6:	4631      	mov	r1, r6
   872c8:	4620      	mov	r0, r4
   872ca:	f000 ff4f 	bl	8816c <_Bfree>
   872ce:	e62e      	b.n	86f2e <_dtoa_r+0x37e>
   872d0:	2300      	movs	r3, #0
   872d2:	930b      	str	r3, [sp, #44]	; 0x2c
   872d4:	9b02      	ldr	r3, [sp, #8]
   872d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   872d8:	4413      	add	r3, r2
   872da:	930f      	str	r3, [sp, #60]	; 0x3c
   872dc:	3301      	adds	r3, #1
   872de:	2b01      	cmp	r3, #1
   872e0:	461f      	mov	r7, r3
   872e2:	461e      	mov	r6, r3
   872e4:	bfb8      	it	lt
   872e6:	2701      	movlt	r7, #1
   872e8:	9307      	str	r3, [sp, #28]
   872ea:	2100      	movs	r1, #0
   872ec:	2f17      	cmp	r7, #23
   872ee:	6461      	str	r1, [r4, #68]	; 0x44
   872f0:	d90a      	bls.n	87308 <_dtoa_r+0x758>
   872f2:	2201      	movs	r2, #1
   872f4:	2304      	movs	r3, #4
   872f6:	005b      	lsls	r3, r3, #1
   872f8:	f103 0014 	add.w	r0, r3, #20
   872fc:	4287      	cmp	r7, r0
   872fe:	4611      	mov	r1, r2
   87300:	f102 0201 	add.w	r2, r2, #1
   87304:	d2f7      	bcs.n	872f6 <_dtoa_r+0x746>
   87306:	6461      	str	r1, [r4, #68]	; 0x44
   87308:	4620      	mov	r0, r4
   8730a:	f000 ff09 	bl	88120 <_Balloc>
   8730e:	2e0e      	cmp	r6, #14
   87310:	9004      	str	r0, [sp, #16]
   87312:	6420      	str	r0, [r4, #64]	; 0x40
   87314:	f63f ad47 	bhi.w	86da6 <_dtoa_r+0x1f6>
   87318:	2d00      	cmp	r5, #0
   8731a:	f43f ad44 	beq.w	86da6 <_dtoa_r+0x1f6>
   8731e:	9902      	ldr	r1, [sp, #8]
   87320:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   87324:	2900      	cmp	r1, #0
   87326:	f340 8203 	ble.w	87730 <_dtoa_r+0xb80>
   8732a:	4bb9      	ldr	r3, [pc, #740]	; (87610 <_dtoa_r+0xa60>)
   8732c:	f001 020f 	and.w	r2, r1, #15
   87330:	110d      	asrs	r5, r1, #4
   87332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87336:	06e9      	lsls	r1, r5, #27
   87338:	e9d3 6700 	ldrd	r6, r7, [r3]
   8733c:	f140 81af 	bpl.w	8769e <_dtoa_r+0xaee>
   87340:	4bb4      	ldr	r3, [pc, #720]	; (87614 <_dtoa_r+0xa64>)
   87342:	4650      	mov	r0, sl
   87344:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   87348:	4659      	mov	r1, fp
   8734a:	f7fd fc5f 	bl	84c0c <__aeabi_ddiv>
   8734e:	f04f 0a03 	mov.w	sl, #3
   87352:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   87356:	f005 050f 	and.w	r5, r5, #15
   8735a:	b18d      	cbz	r5, 87380 <_dtoa_r+0x7d0>
   8735c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 87614 <_dtoa_r+0xa64>
   87360:	07ea      	lsls	r2, r5, #31
   87362:	d509      	bpl.n	87378 <_dtoa_r+0x7c8>
   87364:	e9d8 2300 	ldrd	r2, r3, [r8]
   87368:	4630      	mov	r0, r6
   8736a:	4639      	mov	r1, r7
   8736c:	f7fd fb24 	bl	849b8 <__aeabi_dmul>
   87370:	4606      	mov	r6, r0
   87372:	460f      	mov	r7, r1
   87374:	f10a 0a01 	add.w	sl, sl, #1
   87378:	106d      	asrs	r5, r5, #1
   8737a:	f108 0808 	add.w	r8, r8, #8
   8737e:	d1ef      	bne.n	87360 <_dtoa_r+0x7b0>
   87380:	463b      	mov	r3, r7
   87382:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   87386:	4632      	mov	r2, r6
   87388:	f7fd fc40 	bl	84c0c <__aeabi_ddiv>
   8738c:	4607      	mov	r7, r0
   8738e:	4688      	mov	r8, r1
   87390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87392:	b143      	cbz	r3, 873a6 <_dtoa_r+0x7f6>
   87394:	2200      	movs	r2, #0
   87396:	4ba0      	ldr	r3, [pc, #640]	; (87618 <_dtoa_r+0xa68>)
   87398:	4638      	mov	r0, r7
   8739a:	4641      	mov	r1, r8
   8739c:	f001 feb0 	bl	89100 <__aeabi_dcmplt>
   873a0:	2800      	cmp	r0, #0
   873a2:	f040 8287 	bne.w	878b4 <_dtoa_r+0xd04>
   873a6:	4650      	mov	r0, sl
   873a8:	f7fd faa0 	bl	848ec <__aeabi_i2d>
   873ac:	463a      	mov	r2, r7
   873ae:	4643      	mov	r3, r8
   873b0:	f7fd fb02 	bl	849b8 <__aeabi_dmul>
   873b4:	4b99      	ldr	r3, [pc, #612]	; (8761c <_dtoa_r+0xa6c>)
   873b6:	2200      	movs	r2, #0
   873b8:	f7fd f94c 	bl	84654 <__adddf3>
   873bc:	9b07      	ldr	r3, [sp, #28]
   873be:	4605      	mov	r5, r0
   873c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   873c4:	2b00      	cmp	r3, #0
   873c6:	f000 813f 	beq.w	87648 <_dtoa_r+0xa98>
   873ca:	9b02      	ldr	r3, [sp, #8]
   873cc:	9315      	str	r3, [sp, #84]	; 0x54
   873ce:	9b07      	ldr	r3, [sp, #28]
   873d0:	9312      	str	r3, [sp, #72]	; 0x48
   873d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   873d4:	2b00      	cmp	r3, #0
   873d6:	f000 81fb 	beq.w	877d0 <_dtoa_r+0xc20>
   873da:	9a12      	ldr	r2, [sp, #72]	; 0x48
   873dc:	4b8c      	ldr	r3, [pc, #560]	; (87610 <_dtoa_r+0xa60>)
   873de:	2000      	movs	r0, #0
   873e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   873e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   873e8:	498d      	ldr	r1, [pc, #564]	; (87620 <_dtoa_r+0xa70>)
   873ea:	f7fd fc0f 	bl	84c0c <__aeabi_ddiv>
   873ee:	462a      	mov	r2, r5
   873f0:	4633      	mov	r3, r6
   873f2:	f7fd f92d 	bl	84650 <__aeabi_dsub>
   873f6:	4682      	mov	sl, r0
   873f8:	468b      	mov	fp, r1
   873fa:	4638      	mov	r0, r7
   873fc:	4641      	mov	r1, r8
   873fe:	f001 febd 	bl	8917c <__aeabi_d2iz>
   87402:	4605      	mov	r5, r0
   87404:	f7fd fa72 	bl	848ec <__aeabi_i2d>
   87408:	4602      	mov	r2, r0
   8740a:	460b      	mov	r3, r1
   8740c:	4638      	mov	r0, r7
   8740e:	4641      	mov	r1, r8
   87410:	f7fd f91e 	bl	84650 <__aeabi_dsub>
   87414:	3530      	adds	r5, #48	; 0x30
   87416:	fa5f f885 	uxtb.w	r8, r5
   8741a:	9d04      	ldr	r5, [sp, #16]
   8741c:	4606      	mov	r6, r0
   8741e:	460f      	mov	r7, r1
   87420:	f885 8000 	strb.w	r8, [r5]
   87424:	4602      	mov	r2, r0
   87426:	460b      	mov	r3, r1
   87428:	4650      	mov	r0, sl
   8742a:	4659      	mov	r1, fp
   8742c:	3501      	adds	r5, #1
   8742e:	f001 fe85 	bl	8913c <__aeabi_dcmpgt>
   87432:	2800      	cmp	r0, #0
   87434:	d154      	bne.n	874e0 <_dtoa_r+0x930>
   87436:	4632      	mov	r2, r6
   87438:	463b      	mov	r3, r7
   8743a:	2000      	movs	r0, #0
   8743c:	4976      	ldr	r1, [pc, #472]	; (87618 <_dtoa_r+0xa68>)
   8743e:	f7fd f907 	bl	84650 <__aeabi_dsub>
   87442:	4602      	mov	r2, r0
   87444:	460b      	mov	r3, r1
   87446:	4650      	mov	r0, sl
   87448:	4659      	mov	r1, fp
   8744a:	f001 fe77 	bl	8913c <__aeabi_dcmpgt>
   8744e:	2800      	cmp	r0, #0
   87450:	f040 8270 	bne.w	87934 <_dtoa_r+0xd84>
   87454:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87456:	2a01      	cmp	r2, #1
   87458:	f000 8112 	beq.w	87680 <_dtoa_r+0xad0>
   8745c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8745e:	9a04      	ldr	r2, [sp, #16]
   87460:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   87464:	4413      	add	r3, r2
   87466:	4699      	mov	r9, r3
   87468:	e00f      	b.n	8748a <_dtoa_r+0x8da>
   8746a:	4632      	mov	r2, r6
   8746c:	463b      	mov	r3, r7
   8746e:	2000      	movs	r0, #0
   87470:	4969      	ldr	r1, [pc, #420]	; (87618 <_dtoa_r+0xa68>)
   87472:	f7fd f8ed 	bl	84650 <__aeabi_dsub>
   87476:	4652      	mov	r2, sl
   87478:	465b      	mov	r3, fp
   8747a:	f001 fe41 	bl	89100 <__aeabi_dcmplt>
   8747e:	2800      	cmp	r0, #0
   87480:	f040 8256 	bne.w	87930 <_dtoa_r+0xd80>
   87484:	454d      	cmp	r5, r9
   87486:	f000 80f9 	beq.w	8767c <_dtoa_r+0xacc>
   8748a:	4650      	mov	r0, sl
   8748c:	4659      	mov	r1, fp
   8748e:	2200      	movs	r2, #0
   87490:	4b64      	ldr	r3, [pc, #400]	; (87624 <_dtoa_r+0xa74>)
   87492:	f7fd fa91 	bl	849b8 <__aeabi_dmul>
   87496:	2200      	movs	r2, #0
   87498:	4b62      	ldr	r3, [pc, #392]	; (87624 <_dtoa_r+0xa74>)
   8749a:	4682      	mov	sl, r0
   8749c:	468b      	mov	fp, r1
   8749e:	4630      	mov	r0, r6
   874a0:	4639      	mov	r1, r7
   874a2:	f7fd fa89 	bl	849b8 <__aeabi_dmul>
   874a6:	460f      	mov	r7, r1
   874a8:	4606      	mov	r6, r0
   874aa:	f001 fe67 	bl	8917c <__aeabi_d2iz>
   874ae:	4680      	mov	r8, r0
   874b0:	f7fd fa1c 	bl	848ec <__aeabi_i2d>
   874b4:	4602      	mov	r2, r0
   874b6:	460b      	mov	r3, r1
   874b8:	4630      	mov	r0, r6
   874ba:	4639      	mov	r1, r7
   874bc:	f7fd f8c8 	bl	84650 <__aeabi_dsub>
   874c0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   874c4:	fa5f f888 	uxtb.w	r8, r8
   874c8:	f805 8b01 	strb.w	r8, [r5], #1
   874cc:	4652      	mov	r2, sl
   874ce:	465b      	mov	r3, fp
   874d0:	4606      	mov	r6, r0
   874d2:	460f      	mov	r7, r1
   874d4:	f001 fe14 	bl	89100 <__aeabi_dcmplt>
   874d8:	2800      	cmp	r0, #0
   874da:	d0c6      	beq.n	8746a <_dtoa_r+0x8ba>
   874dc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   874e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   874e2:	9302      	str	r3, [sp, #8]
   874e4:	e523      	b.n	86f2e <_dtoa_r+0x37e>
   874e6:	2300      	movs	r3, #0
   874e8:	930b      	str	r3, [sp, #44]	; 0x2c
   874ea:	9b25      	ldr	r3, [sp, #148]	; 0x94
   874ec:	2b00      	cmp	r3, #0
   874ee:	f340 80dd 	ble.w	876ac <_dtoa_r+0xafc>
   874f2:	461f      	mov	r7, r3
   874f4:	461e      	mov	r6, r3
   874f6:	930f      	str	r3, [sp, #60]	; 0x3c
   874f8:	9307      	str	r3, [sp, #28]
   874fa:	e6f6      	b.n	872ea <_dtoa_r+0x73a>
   874fc:	2301      	movs	r3, #1
   874fe:	930b      	str	r3, [sp, #44]	; 0x2c
   87500:	e7f3      	b.n	874ea <_dtoa_r+0x93a>
   87502:	f1ba 0f00 	cmp.w	sl, #0
   87506:	f47f ada7 	bne.w	87058 <_dtoa_r+0x4a8>
   8750a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8750e:	2b00      	cmp	r3, #0
   87510:	f47f adbc 	bne.w	8708c <_dtoa_r+0x4dc>
   87514:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   87518:	0d3f      	lsrs	r7, r7, #20
   8751a:	053f      	lsls	r7, r7, #20
   8751c:	2f00      	cmp	r7, #0
   8751e:	f000 820d 	beq.w	8793c <_dtoa_r+0xd8c>
   87522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87524:	3301      	adds	r3, #1
   87526:	930a      	str	r3, [sp, #40]	; 0x28
   87528:	9b08      	ldr	r3, [sp, #32]
   8752a:	3301      	adds	r3, #1
   8752c:	9308      	str	r3, [sp, #32]
   8752e:	2301      	movs	r3, #1
   87530:	930c      	str	r3, [sp, #48]	; 0x30
   87532:	e5ad      	b.n	87090 <_dtoa_r+0x4e0>
   87534:	9b07      	ldr	r3, [sp, #28]
   87536:	2b00      	cmp	r3, #0
   87538:	f73f ac48 	bgt.w	86dcc <_dtoa_r+0x21c>
   8753c:	f040 8222 	bne.w	87984 <_dtoa_r+0xdd4>
   87540:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87544:	2200      	movs	r2, #0
   87546:	4b38      	ldr	r3, [pc, #224]	; (87628 <_dtoa_r+0xa78>)
   87548:	f7fd fa36 	bl	849b8 <__aeabi_dmul>
   8754c:	4652      	mov	r2, sl
   8754e:	465b      	mov	r3, fp
   87550:	f001 fdea 	bl	89128 <__aeabi_dcmpge>
   87554:	f8dd 801c 	ldr.w	r8, [sp, #28]
   87558:	4646      	mov	r6, r8
   8755a:	2800      	cmp	r0, #0
   8755c:	d041      	beq.n	875e2 <_dtoa_r+0xa32>
   8755e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87560:	9d04      	ldr	r5, [sp, #16]
   87562:	43db      	mvns	r3, r3
   87564:	9302      	str	r3, [sp, #8]
   87566:	4641      	mov	r1, r8
   87568:	4620      	mov	r0, r4
   8756a:	f000 fdff 	bl	8816c <_Bfree>
   8756e:	2e00      	cmp	r6, #0
   87570:	f43f acdd 	beq.w	86f2e <_dtoa_r+0x37e>
   87574:	e6a7      	b.n	872c6 <_dtoa_r+0x716>
   87576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87578:	4649      	mov	r1, r9
   8757a:	4620      	mov	r0, r4
   8757c:	f000 ff2e 	bl	883dc <__pow5mult>
   87580:	4681      	mov	r9, r0
   87582:	e557      	b.n	87034 <_dtoa_r+0x484>
   87584:	9a14      	ldr	r2, [sp, #80]	; 0x50
   87586:	2a00      	cmp	r2, #0
   87588:	f000 8188 	beq.w	8789c <_dtoa_r+0xcec>
   8758c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   87590:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87592:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87594:	e4f2      	b.n	86f7c <_dtoa_r+0x3cc>
   87596:	f1ba 0f00 	cmp.w	sl, #0
   8759a:	f47f ad77 	bne.w	8708c <_dtoa_r+0x4dc>
   8759e:	e7b4      	b.n	8750a <_dtoa_r+0x95a>
   875a0:	f000 fdee 	bl	88180 <__multadd>
   875a4:	4647      	mov	r7, r8
   875a6:	4606      	mov	r6, r0
   875a8:	4683      	mov	fp, r0
   875aa:	e5c0      	b.n	8712e <_dtoa_r+0x57e>
   875ac:	4601      	mov	r1, r0
   875ae:	4620      	mov	r0, r4
   875b0:	9308      	str	r3, [sp, #32]
   875b2:	f000 fddb 	bl	8816c <_Bfree>
   875b6:	2201      	movs	r2, #1
   875b8:	9b08      	ldr	r3, [sp, #32]
   875ba:	e5e2      	b.n	87182 <_dtoa_r+0x5d2>
   875bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   875be:	2b02      	cmp	r3, #2
   875c0:	f77f ad98 	ble.w	870f4 <_dtoa_r+0x544>
   875c4:	9b07      	ldr	r3, [sp, #28]
   875c6:	2b00      	cmp	r3, #0
   875c8:	d1c9      	bne.n	8755e <_dtoa_r+0x9ae>
   875ca:	4641      	mov	r1, r8
   875cc:	2205      	movs	r2, #5
   875ce:	4620      	mov	r0, r4
   875d0:	f000 fdd6 	bl	88180 <__multadd>
   875d4:	4601      	mov	r1, r0
   875d6:	4680      	mov	r8, r0
   875d8:	4648      	mov	r0, r9
   875da:	f000 ff9f 	bl	8851c <__mcmp>
   875de:	2800      	cmp	r0, #0
   875e0:	ddbd      	ble.n	8755e <_dtoa_r+0x9ae>
   875e2:	2331      	movs	r3, #49	; 0x31
   875e4:	9a02      	ldr	r2, [sp, #8]
   875e6:	9904      	ldr	r1, [sp, #16]
   875e8:	3201      	adds	r2, #1
   875ea:	9202      	str	r2, [sp, #8]
   875ec:	700b      	strb	r3, [r1, #0]
   875ee:	1c4d      	adds	r5, r1, #1
   875f0:	e7b9      	b.n	87566 <_dtoa_r+0x9b6>
   875f2:	2331      	movs	r3, #49	; 0x31
   875f4:	9a02      	ldr	r2, [sp, #8]
   875f6:	3201      	adds	r2, #1
   875f8:	9202      	str	r2, [sp, #8]
   875fa:	9a04      	ldr	r2, [sp, #16]
   875fc:	7013      	strb	r3, [r2, #0]
   875fe:	e652      	b.n	872a6 <_dtoa_r+0x6f6>
   87600:	2301      	movs	r3, #1
   87602:	930b      	str	r3, [sp, #44]	; 0x2c
   87604:	e666      	b.n	872d4 <_dtoa_r+0x724>
   87606:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8760a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8760c:	e48f      	b.n	86f2e <_dtoa_r+0x37e>
   8760e:	bf00      	nop
   87610:	000896d0 	.word	0x000896d0
   87614:	000896a8 	.word	0x000896a8
   87618:	3ff00000 	.word	0x3ff00000
   8761c:	401c0000 	.word	0x401c0000
   87620:	3fe00000 	.word	0x3fe00000
   87624:	40240000 	.word	0x40240000
   87628:	40140000 	.word	0x40140000
   8762c:	4650      	mov	r0, sl
   8762e:	f7fd f95d 	bl	848ec <__aeabi_i2d>
   87632:	463a      	mov	r2, r7
   87634:	4643      	mov	r3, r8
   87636:	f7fd f9bf 	bl	849b8 <__aeabi_dmul>
   8763a:	2200      	movs	r2, #0
   8763c:	4bc1      	ldr	r3, [pc, #772]	; (87944 <_dtoa_r+0xd94>)
   8763e:	f7fd f809 	bl	84654 <__adddf3>
   87642:	4605      	mov	r5, r0
   87644:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87648:	4641      	mov	r1, r8
   8764a:	2200      	movs	r2, #0
   8764c:	4bbe      	ldr	r3, [pc, #760]	; (87948 <_dtoa_r+0xd98>)
   8764e:	4638      	mov	r0, r7
   87650:	f7fc fffe 	bl	84650 <__aeabi_dsub>
   87654:	462a      	mov	r2, r5
   87656:	4633      	mov	r3, r6
   87658:	4682      	mov	sl, r0
   8765a:	468b      	mov	fp, r1
   8765c:	f001 fd6e 	bl	8913c <__aeabi_dcmpgt>
   87660:	4680      	mov	r8, r0
   87662:	2800      	cmp	r0, #0
   87664:	f040 8110 	bne.w	87888 <_dtoa_r+0xcd8>
   87668:	462a      	mov	r2, r5
   8766a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8766e:	4650      	mov	r0, sl
   87670:	4659      	mov	r1, fp
   87672:	f001 fd45 	bl	89100 <__aeabi_dcmplt>
   87676:	b118      	cbz	r0, 87680 <_dtoa_r+0xad0>
   87678:	4646      	mov	r6, r8
   8767a:	e770      	b.n	8755e <_dtoa_r+0x9ae>
   8767c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87680:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   87684:	f7ff bb8f 	b.w	86da6 <_dtoa_r+0x1f6>
   87688:	9804      	ldr	r0, [sp, #16]
   8768a:	f7ff bac0 	b.w	86c0e <_dtoa_r+0x5e>
   8768e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87692:	1afb      	subs	r3, r7, r3
   87694:	441a      	add	r2, r3
   87696:	970c      	str	r7, [sp, #48]	; 0x30
   87698:	920d      	str	r2, [sp, #52]	; 0x34
   8769a:	2700      	movs	r7, #0
   8769c:	e468      	b.n	86f70 <_dtoa_r+0x3c0>
   8769e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   876a2:	f04f 0a02 	mov.w	sl, #2
   876a6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   876aa:	e656      	b.n	8735a <_dtoa_r+0x7aa>
   876ac:	2100      	movs	r1, #0
   876ae:	2301      	movs	r3, #1
   876b0:	4620      	mov	r0, r4
   876b2:	6461      	str	r1, [r4, #68]	; 0x44
   876b4:	9325      	str	r3, [sp, #148]	; 0x94
   876b6:	f000 fd33 	bl	88120 <_Balloc>
   876ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
   876bc:	9004      	str	r0, [sp, #16]
   876be:	9307      	str	r3, [sp, #28]
   876c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   876c2:	6420      	str	r0, [r4, #64]	; 0x40
   876c4:	930f      	str	r3, [sp, #60]	; 0x3c
   876c6:	e627      	b.n	87318 <_dtoa_r+0x768>
   876c8:	2a00      	cmp	r2, #0
   876ca:	46d0      	mov	r8, sl
   876cc:	f8cd b020 	str.w	fp, [sp, #32]
   876d0:	469a      	mov	sl, r3
   876d2:	dd11      	ble.n	876f8 <_dtoa_r+0xb48>
   876d4:	4649      	mov	r1, r9
   876d6:	2201      	movs	r2, #1
   876d8:	4620      	mov	r0, r4
   876da:	f000 fecf 	bl	8847c <__lshift>
   876de:	4641      	mov	r1, r8
   876e0:	4681      	mov	r9, r0
   876e2:	f000 ff1b 	bl	8851c <__mcmp>
   876e6:	2800      	cmp	r0, #0
   876e8:	f340 8145 	ble.w	87976 <_dtoa_r+0xdc6>
   876ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   876f0:	f000 8105 	beq.w	878fe <_dtoa_r+0xd4e>
   876f4:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   876f8:	46b3      	mov	fp, r6
   876fa:	f887 a000 	strb.w	sl, [r7]
   876fe:	1c7d      	adds	r5, r7, #1
   87700:	9e08      	ldr	r6, [sp, #32]
   87702:	e5d0      	b.n	872a6 <_dtoa_r+0x6f6>
   87704:	d104      	bne.n	87710 <_dtoa_r+0xb60>
   87706:	f01a 0f01 	tst.w	sl, #1
   8770a:	d001      	beq.n	87710 <_dtoa_r+0xb60>
   8770c:	e5bb      	b.n	87286 <_dtoa_r+0x6d6>
   8770e:	4615      	mov	r5, r2
   87710:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87714:	1e6a      	subs	r2, r5, #1
   87716:	2b30      	cmp	r3, #48	; 0x30
   87718:	d0f9      	beq.n	8770e <_dtoa_r+0xb5e>
   8771a:	e5c4      	b.n	872a6 <_dtoa_r+0x6f6>
   8771c:	2230      	movs	r2, #48	; 0x30
   8771e:	9904      	ldr	r1, [sp, #16]
   87720:	700a      	strb	r2, [r1, #0]
   87722:	9a02      	ldr	r2, [sp, #8]
   87724:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87728:	3201      	adds	r2, #1
   8772a:	9202      	str	r2, [sp, #8]
   8772c:	f7ff bbfb 	b.w	86f26 <_dtoa_r+0x376>
   87730:	f000 80bb 	beq.w	878aa <_dtoa_r+0xcfa>
   87734:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87738:	9b02      	ldr	r3, [sp, #8]
   8773a:	f04f 0a02 	mov.w	sl, #2
   8773e:	425d      	negs	r5, r3
   87740:	4b82      	ldr	r3, [pc, #520]	; (8794c <_dtoa_r+0xd9c>)
   87742:	f005 020f 	and.w	r2, r5, #15
   87746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8774a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8774e:	f7fd f933 	bl	849b8 <__aeabi_dmul>
   87752:	112d      	asrs	r5, r5, #4
   87754:	4607      	mov	r7, r0
   87756:	4688      	mov	r8, r1
   87758:	f43f ae1a 	beq.w	87390 <_dtoa_r+0x7e0>
   8775c:	4e7c      	ldr	r6, [pc, #496]	; (87950 <_dtoa_r+0xda0>)
   8775e:	07eb      	lsls	r3, r5, #31
   87760:	d509      	bpl.n	87776 <_dtoa_r+0xbc6>
   87762:	e9d6 2300 	ldrd	r2, r3, [r6]
   87766:	4638      	mov	r0, r7
   87768:	4641      	mov	r1, r8
   8776a:	f7fd f925 	bl	849b8 <__aeabi_dmul>
   8776e:	4607      	mov	r7, r0
   87770:	4688      	mov	r8, r1
   87772:	f10a 0a01 	add.w	sl, sl, #1
   87776:	106d      	asrs	r5, r5, #1
   87778:	f106 0608 	add.w	r6, r6, #8
   8777c:	d1ef      	bne.n	8775e <_dtoa_r+0xbae>
   8777e:	e607      	b.n	87390 <_dtoa_r+0x7e0>
   87780:	6871      	ldr	r1, [r6, #4]
   87782:	4620      	mov	r0, r4
   87784:	f000 fccc 	bl	88120 <_Balloc>
   87788:	4605      	mov	r5, r0
   8778a:	6933      	ldr	r3, [r6, #16]
   8778c:	f106 010c 	add.w	r1, r6, #12
   87790:	3302      	adds	r3, #2
   87792:	009a      	lsls	r2, r3, #2
   87794:	300c      	adds	r0, #12
   87796:	f000 fc41 	bl	8801c <memcpy>
   8779a:	4629      	mov	r1, r5
   8779c:	2201      	movs	r2, #1
   8779e:	4620      	mov	r0, r4
   877a0:	f000 fe6c 	bl	8847c <__lshift>
   877a4:	9008      	str	r0, [sp, #32]
   877a6:	e4b6      	b.n	87116 <_dtoa_r+0x566>
   877a8:	2b39      	cmp	r3, #57	; 0x39
   877aa:	f8cd b020 	str.w	fp, [sp, #32]
   877ae:	46d0      	mov	r8, sl
   877b0:	f000 80a5 	beq.w	878fe <_dtoa_r+0xd4e>
   877b4:	f103 0a01 	add.w	sl, r3, #1
   877b8:	46b3      	mov	fp, r6
   877ba:	f887 a000 	strb.w	sl, [r7]
   877be:	1c7d      	adds	r5, r7, #1
   877c0:	9e08      	ldr	r6, [sp, #32]
   877c2:	e570      	b.n	872a6 <_dtoa_r+0x6f6>
   877c4:	465a      	mov	r2, fp
   877c6:	46d0      	mov	r8, sl
   877c8:	46b3      	mov	fp, r6
   877ca:	469a      	mov	sl, r3
   877cc:	4616      	mov	r6, r2
   877ce:	e54e      	b.n	8726e <_dtoa_r+0x6be>
   877d0:	9812      	ldr	r0, [sp, #72]	; 0x48
   877d2:	495e      	ldr	r1, [pc, #376]	; (8794c <_dtoa_r+0xd9c>)
   877d4:	462a      	mov	r2, r5
   877d6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   877da:	4633      	mov	r3, r6
   877dc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   877e0:	f7fd f8ea 	bl	849b8 <__aeabi_dmul>
   877e4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   877e8:	4638      	mov	r0, r7
   877ea:	4641      	mov	r1, r8
   877ec:	f001 fcc6 	bl	8917c <__aeabi_d2iz>
   877f0:	4605      	mov	r5, r0
   877f2:	f7fd f87b 	bl	848ec <__aeabi_i2d>
   877f6:	4602      	mov	r2, r0
   877f8:	460b      	mov	r3, r1
   877fa:	4638      	mov	r0, r7
   877fc:	4641      	mov	r1, r8
   877fe:	f7fc ff27 	bl	84650 <__aeabi_dsub>
   87802:	4606      	mov	r6, r0
   87804:	9812      	ldr	r0, [sp, #72]	; 0x48
   87806:	9a04      	ldr	r2, [sp, #16]
   87808:	3530      	adds	r5, #48	; 0x30
   8780a:	2801      	cmp	r0, #1
   8780c:	7015      	strb	r5, [r2, #0]
   8780e:	460f      	mov	r7, r1
   87810:	f102 0501 	add.w	r5, r2, #1
   87814:	d026      	beq.n	87864 <_dtoa_r+0xcb4>
   87816:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87818:	9a04      	ldr	r2, [sp, #16]
   8781a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8781e:	4413      	add	r3, r2
   87820:	f04f 0a00 	mov.w	sl, #0
   87824:	4699      	mov	r9, r3
   87826:	f8df b130 	ldr.w	fp, [pc, #304]	; 87958 <_dtoa_r+0xda8>
   8782a:	4652      	mov	r2, sl
   8782c:	465b      	mov	r3, fp
   8782e:	4630      	mov	r0, r6
   87830:	4639      	mov	r1, r7
   87832:	f7fd f8c1 	bl	849b8 <__aeabi_dmul>
   87836:	460f      	mov	r7, r1
   87838:	4606      	mov	r6, r0
   8783a:	f001 fc9f 	bl	8917c <__aeabi_d2iz>
   8783e:	4680      	mov	r8, r0
   87840:	f7fd f854 	bl	848ec <__aeabi_i2d>
   87844:	4602      	mov	r2, r0
   87846:	460b      	mov	r3, r1
   87848:	4630      	mov	r0, r6
   8784a:	4639      	mov	r1, r7
   8784c:	f7fc ff00 	bl	84650 <__aeabi_dsub>
   87850:	f108 0830 	add.w	r8, r8, #48	; 0x30
   87854:	f805 8b01 	strb.w	r8, [r5], #1
   87858:	454d      	cmp	r5, r9
   8785a:	4606      	mov	r6, r0
   8785c:	460f      	mov	r7, r1
   8785e:	d1e4      	bne.n	8782a <_dtoa_r+0xc7a>
   87860:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87864:	2200      	movs	r2, #0
   87866:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8786a:	4b3a      	ldr	r3, [pc, #232]	; (87954 <_dtoa_r+0xda4>)
   8786c:	f7fc fef2 	bl	84654 <__adddf3>
   87870:	4632      	mov	r2, r6
   87872:	463b      	mov	r3, r7
   87874:	f001 fc44 	bl	89100 <__aeabi_dcmplt>
   87878:	2800      	cmp	r0, #0
   8787a:	d046      	beq.n	8790a <_dtoa_r+0xd5a>
   8787c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8787e:	9302      	str	r3, [sp, #8]
   87880:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87884:	f7ff bb42 	b.w	86f0c <_dtoa_r+0x35c>
   87888:	f04f 0800 	mov.w	r8, #0
   8788c:	4646      	mov	r6, r8
   8788e:	e6a8      	b.n	875e2 <_dtoa_r+0xa32>
   87890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87892:	9a07      	ldr	r2, [sp, #28]
   87894:	1a9d      	subs	r5, r3, r2
   87896:	2300      	movs	r3, #0
   87898:	f7ff bb70 	b.w	86f7c <_dtoa_r+0x3cc>
   8789c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8789e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   878a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   878a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   878a6:	f7ff bb69 	b.w	86f7c <_dtoa_r+0x3cc>
   878aa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   878ae:	f04f 0a02 	mov.w	sl, #2
   878b2:	e56d      	b.n	87390 <_dtoa_r+0x7e0>
   878b4:	9b07      	ldr	r3, [sp, #28]
   878b6:	2b00      	cmp	r3, #0
   878b8:	f43f aeb8 	beq.w	8762c <_dtoa_r+0xa7c>
   878bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   878be:	2b00      	cmp	r3, #0
   878c0:	f77f aede 	ble.w	87680 <_dtoa_r+0xad0>
   878c4:	2200      	movs	r2, #0
   878c6:	4b24      	ldr	r3, [pc, #144]	; (87958 <_dtoa_r+0xda8>)
   878c8:	4638      	mov	r0, r7
   878ca:	4641      	mov	r1, r8
   878cc:	f7fd f874 	bl	849b8 <__aeabi_dmul>
   878d0:	4607      	mov	r7, r0
   878d2:	4688      	mov	r8, r1
   878d4:	f10a 0001 	add.w	r0, sl, #1
   878d8:	f7fd f808 	bl	848ec <__aeabi_i2d>
   878dc:	463a      	mov	r2, r7
   878de:	4643      	mov	r3, r8
   878e0:	f7fd f86a 	bl	849b8 <__aeabi_dmul>
   878e4:	2200      	movs	r2, #0
   878e6:	4b17      	ldr	r3, [pc, #92]	; (87944 <_dtoa_r+0xd94>)
   878e8:	f7fc feb4 	bl	84654 <__adddf3>
   878ec:	9a02      	ldr	r2, [sp, #8]
   878ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   878f0:	3a01      	subs	r2, #1
   878f2:	4605      	mov	r5, r0
   878f4:	9215      	str	r2, [sp, #84]	; 0x54
   878f6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   878fa:	9312      	str	r3, [sp, #72]	; 0x48
   878fc:	e569      	b.n	873d2 <_dtoa_r+0x822>
   878fe:	2239      	movs	r2, #57	; 0x39
   87900:	46b3      	mov	fp, r6
   87902:	703a      	strb	r2, [r7, #0]
   87904:	9e08      	ldr	r6, [sp, #32]
   87906:	1c7d      	adds	r5, r7, #1
   87908:	e4bf      	b.n	8728a <_dtoa_r+0x6da>
   8790a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8790e:	2000      	movs	r0, #0
   87910:	4910      	ldr	r1, [pc, #64]	; (87954 <_dtoa_r+0xda4>)
   87912:	f7fc fe9d 	bl	84650 <__aeabi_dsub>
   87916:	4632      	mov	r2, r6
   87918:	463b      	mov	r3, r7
   8791a:	f001 fc0f 	bl	8913c <__aeabi_dcmpgt>
   8791e:	b908      	cbnz	r0, 87924 <_dtoa_r+0xd74>
   87920:	e6ae      	b.n	87680 <_dtoa_r+0xad0>
   87922:	4615      	mov	r5, r2
   87924:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87928:	1e6a      	subs	r2, r5, #1
   8792a:	2b30      	cmp	r3, #48	; 0x30
   8792c:	d0f9      	beq.n	87922 <_dtoa_r+0xd72>
   8792e:	e5d7      	b.n	874e0 <_dtoa_r+0x930>
   87930:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87934:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87936:	9302      	str	r3, [sp, #8]
   87938:	f7ff bae8 	b.w	86f0c <_dtoa_r+0x35c>
   8793c:	970c      	str	r7, [sp, #48]	; 0x30
   8793e:	f7ff bba7 	b.w	87090 <_dtoa_r+0x4e0>
   87942:	bf00      	nop
   87944:	401c0000 	.word	0x401c0000
   87948:	40140000 	.word	0x40140000
   8794c:	000896d0 	.word	0x000896d0
   87950:	000896a8 	.word	0x000896a8
   87954:	3fe00000 	.word	0x3fe00000
   87958:	40240000 	.word	0x40240000
   8795c:	2b39      	cmp	r3, #57	; 0x39
   8795e:	f8cd b020 	str.w	fp, [sp, #32]
   87962:	46d0      	mov	r8, sl
   87964:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87968:	469a      	mov	sl, r3
   8796a:	d0c8      	beq.n	878fe <_dtoa_r+0xd4e>
   8796c:	f1bb 0f00 	cmp.w	fp, #0
   87970:	f73f aec0 	bgt.w	876f4 <_dtoa_r+0xb44>
   87974:	e6c0      	b.n	876f8 <_dtoa_r+0xb48>
   87976:	f47f aebf 	bne.w	876f8 <_dtoa_r+0xb48>
   8797a:	f01a 0f01 	tst.w	sl, #1
   8797e:	f43f aebb 	beq.w	876f8 <_dtoa_r+0xb48>
   87982:	e6b3      	b.n	876ec <_dtoa_r+0xb3c>
   87984:	f04f 0800 	mov.w	r8, #0
   87988:	4646      	mov	r6, r8
   8798a:	e5e8      	b.n	8755e <_dtoa_r+0x9ae>
   8798c:	4631      	mov	r1, r6
   8798e:	2300      	movs	r3, #0
   87990:	220a      	movs	r2, #10
   87992:	4620      	mov	r0, r4
   87994:	f000 fbf4 	bl	88180 <__multadd>
   87998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8799a:	4606      	mov	r6, r0
   8799c:	2b00      	cmp	r3, #0
   8799e:	dd07      	ble.n	879b0 <_dtoa_r+0xe00>
   879a0:	9307      	str	r3, [sp, #28]
   879a2:	f7ff bbab 	b.w	870fc <_dtoa_r+0x54c>
   879a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   879a8:	2b02      	cmp	r3, #2
   879aa:	dc1f      	bgt.n	879ec <_dtoa_r+0xe3c>
   879ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   879ae:	e43c      	b.n	8722a <_dtoa_r+0x67a>
   879b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   879b2:	2b02      	cmp	r3, #2
   879b4:	dc1a      	bgt.n	879ec <_dtoa_r+0xe3c>
   879b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   879b8:	e7f2      	b.n	879a0 <_dtoa_r+0xdf0>
   879ba:	f43f ab81 	beq.w	870c0 <_dtoa_r+0x510>
   879be:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   879c2:	e411      	b.n	871e8 <_dtoa_r+0x638>
   879c4:	2500      	movs	r5, #0
   879c6:	4620      	mov	r0, r4
   879c8:	6465      	str	r5, [r4, #68]	; 0x44
   879ca:	4629      	mov	r1, r5
   879cc:	f000 fba8 	bl	88120 <_Balloc>
   879d0:	f04f 33ff 	mov.w	r3, #4294967295
   879d4:	9307      	str	r3, [sp, #28]
   879d6:	930f      	str	r3, [sp, #60]	; 0x3c
   879d8:	2301      	movs	r3, #1
   879da:	9004      	str	r0, [sp, #16]
   879dc:	9525      	str	r5, [sp, #148]	; 0x94
   879de:	6420      	str	r0, [r4, #64]	; 0x40
   879e0:	930b      	str	r3, [sp, #44]	; 0x2c
   879e2:	f7ff b9e0 	b.w	86da6 <_dtoa_r+0x1f6>
   879e6:	2501      	movs	r5, #1
   879e8:	f7ff b9a8 	b.w	86d3c <_dtoa_r+0x18c>
   879ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   879ee:	9307      	str	r3, [sp, #28]
   879f0:	e5e8      	b.n	875c4 <_dtoa_r+0xa14>
   879f2:	bf00      	nop

000879f4 <__libc_fini_array>:
   879f4:	b538      	push	{r3, r4, r5, lr}
   879f6:	4c0a      	ldr	r4, [pc, #40]	; (87a20 <__libc_fini_array+0x2c>)
   879f8:	4d0a      	ldr	r5, [pc, #40]	; (87a24 <__libc_fini_array+0x30>)
   879fa:	1b64      	subs	r4, r4, r5
   879fc:	10a4      	asrs	r4, r4, #2
   879fe:	d00a      	beq.n	87a16 <__libc_fini_array+0x22>
   87a00:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   87a04:	3b01      	subs	r3, #1
   87a06:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   87a0a:	3c01      	subs	r4, #1
   87a0c:	f855 3904 	ldr.w	r3, [r5], #-4
   87a10:	4798      	blx	r3
   87a12:	2c00      	cmp	r4, #0
   87a14:	d1f9      	bne.n	87a0a <__libc_fini_array+0x16>
   87a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   87a1a:	f001 bf57 	b.w	898cc <_fini>
   87a1e:	bf00      	nop
   87a20:	000898dc 	.word	0x000898dc
   87a24:	000898d8 	.word	0x000898d8

00087a28 <_localeconv_r>:
   87a28:	4a04      	ldr	r2, [pc, #16]	; (87a3c <_localeconv_r+0x14>)
   87a2a:	4b05      	ldr	r3, [pc, #20]	; (87a40 <_localeconv_r+0x18>)
   87a2c:	6812      	ldr	r2, [r2, #0]
   87a2e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   87a30:	2800      	cmp	r0, #0
   87a32:	bf08      	it	eq
   87a34:	4618      	moveq	r0, r3
   87a36:	30f0      	adds	r0, #240	; 0xf0
   87a38:	4770      	bx	lr
   87a3a:	bf00      	nop
   87a3c:	200701a4 	.word	0x200701a4
   87a40:	200709e4 	.word	0x200709e4

00087a44 <__retarget_lock_acquire_recursive>:
   87a44:	4770      	bx	lr
   87a46:	bf00      	nop

00087a48 <__retarget_lock_release_recursive>:
   87a48:	4770      	bx	lr
   87a4a:	bf00      	nop

00087a4c <_malloc_r>:
   87a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87a50:	f101 060b 	add.w	r6, r1, #11
   87a54:	2e16      	cmp	r6, #22
   87a56:	b083      	sub	sp, #12
   87a58:	4605      	mov	r5, r0
   87a5a:	f240 809e 	bls.w	87b9a <_malloc_r+0x14e>
   87a5e:	f036 0607 	bics.w	r6, r6, #7
   87a62:	f100 80bd 	bmi.w	87be0 <_malloc_r+0x194>
   87a66:	42b1      	cmp	r1, r6
   87a68:	f200 80ba 	bhi.w	87be0 <_malloc_r+0x194>
   87a6c:	f000 fb4c 	bl	88108 <__malloc_lock>
   87a70:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   87a74:	f0c0 8285 	bcc.w	87f82 <_malloc_r+0x536>
   87a78:	0a73      	lsrs	r3, r6, #9
   87a7a:	f000 80b8 	beq.w	87bee <_malloc_r+0x1a2>
   87a7e:	2b04      	cmp	r3, #4
   87a80:	f200 816c 	bhi.w	87d5c <_malloc_r+0x310>
   87a84:	09b3      	lsrs	r3, r6, #6
   87a86:	f103 0039 	add.w	r0, r3, #57	; 0x39
   87a8a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   87a8e:	00c1      	lsls	r1, r0, #3
   87a90:	4fb8      	ldr	r7, [pc, #736]	; (87d74 <_malloc_r+0x328>)
   87a92:	4439      	add	r1, r7
   87a94:	684c      	ldr	r4, [r1, #4]
   87a96:	3908      	subs	r1, #8
   87a98:	42a1      	cmp	r1, r4
   87a9a:	d106      	bne.n	87aaa <_malloc_r+0x5e>
   87a9c:	e00c      	b.n	87ab8 <_malloc_r+0x6c>
   87a9e:	2a00      	cmp	r2, #0
   87aa0:	f280 80ab 	bge.w	87bfa <_malloc_r+0x1ae>
   87aa4:	68e4      	ldr	r4, [r4, #12]
   87aa6:	42a1      	cmp	r1, r4
   87aa8:	d006      	beq.n	87ab8 <_malloc_r+0x6c>
   87aaa:	6863      	ldr	r3, [r4, #4]
   87aac:	f023 0303 	bic.w	r3, r3, #3
   87ab0:	1b9a      	subs	r2, r3, r6
   87ab2:	2a0f      	cmp	r2, #15
   87ab4:	ddf3      	ble.n	87a9e <_malloc_r+0x52>
   87ab6:	4670      	mov	r0, lr
   87ab8:	693c      	ldr	r4, [r7, #16]
   87aba:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 87d88 <_malloc_r+0x33c>
   87abe:	4574      	cmp	r4, lr
   87ac0:	f000 819e 	beq.w	87e00 <_malloc_r+0x3b4>
   87ac4:	6863      	ldr	r3, [r4, #4]
   87ac6:	f023 0303 	bic.w	r3, r3, #3
   87aca:	1b9a      	subs	r2, r3, r6
   87acc:	2a0f      	cmp	r2, #15
   87ace:	f300 8183 	bgt.w	87dd8 <_malloc_r+0x38c>
   87ad2:	2a00      	cmp	r2, #0
   87ad4:	f8c7 e014 	str.w	lr, [r7, #20]
   87ad8:	f8c7 e010 	str.w	lr, [r7, #16]
   87adc:	f280 8091 	bge.w	87c02 <_malloc_r+0x1b6>
   87ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   87ae4:	f080 8154 	bcs.w	87d90 <_malloc_r+0x344>
   87ae8:	2201      	movs	r2, #1
   87aea:	08db      	lsrs	r3, r3, #3
   87aec:	6879      	ldr	r1, [r7, #4]
   87aee:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   87af2:	4413      	add	r3, r2
   87af4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   87af8:	fa02 f20c 	lsl.w	r2, r2, ip
   87afc:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   87b00:	430a      	orrs	r2, r1
   87b02:	f1ac 0108 	sub.w	r1, ip, #8
   87b06:	60e1      	str	r1, [r4, #12]
   87b08:	f8c4 8008 	str.w	r8, [r4, #8]
   87b0c:	607a      	str	r2, [r7, #4]
   87b0e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   87b12:	f8c8 400c 	str.w	r4, [r8, #12]
   87b16:	2401      	movs	r4, #1
   87b18:	1083      	asrs	r3, r0, #2
   87b1a:	409c      	lsls	r4, r3
   87b1c:	4294      	cmp	r4, r2
   87b1e:	d87d      	bhi.n	87c1c <_malloc_r+0x1d0>
   87b20:	4214      	tst	r4, r2
   87b22:	d106      	bne.n	87b32 <_malloc_r+0xe6>
   87b24:	f020 0003 	bic.w	r0, r0, #3
   87b28:	0064      	lsls	r4, r4, #1
   87b2a:	4214      	tst	r4, r2
   87b2c:	f100 0004 	add.w	r0, r0, #4
   87b30:	d0fa      	beq.n	87b28 <_malloc_r+0xdc>
   87b32:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   87b36:	46cc      	mov	ip, r9
   87b38:	4680      	mov	r8, r0
   87b3a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87b3e:	459c      	cmp	ip, r3
   87b40:	d107      	bne.n	87b52 <_malloc_r+0x106>
   87b42:	e15f      	b.n	87e04 <_malloc_r+0x3b8>
   87b44:	2a00      	cmp	r2, #0
   87b46:	f280 816d 	bge.w	87e24 <_malloc_r+0x3d8>
   87b4a:	68db      	ldr	r3, [r3, #12]
   87b4c:	459c      	cmp	ip, r3
   87b4e:	f000 8159 	beq.w	87e04 <_malloc_r+0x3b8>
   87b52:	6859      	ldr	r1, [r3, #4]
   87b54:	f021 0103 	bic.w	r1, r1, #3
   87b58:	1b8a      	subs	r2, r1, r6
   87b5a:	2a0f      	cmp	r2, #15
   87b5c:	ddf2      	ble.n	87b44 <_malloc_r+0xf8>
   87b5e:	68dc      	ldr	r4, [r3, #12]
   87b60:	f8d3 c008 	ldr.w	ip, [r3, #8]
   87b64:	f046 0801 	orr.w	r8, r6, #1
   87b68:	4628      	mov	r0, r5
   87b6a:	441e      	add	r6, r3
   87b6c:	f042 0501 	orr.w	r5, r2, #1
   87b70:	f8c3 8004 	str.w	r8, [r3, #4]
   87b74:	f8cc 400c 	str.w	r4, [ip, #12]
   87b78:	f8c4 c008 	str.w	ip, [r4, #8]
   87b7c:	617e      	str	r6, [r7, #20]
   87b7e:	613e      	str	r6, [r7, #16]
   87b80:	f8c6 e00c 	str.w	lr, [r6, #12]
   87b84:	f8c6 e008 	str.w	lr, [r6, #8]
   87b88:	6075      	str	r5, [r6, #4]
   87b8a:	505a      	str	r2, [r3, r1]
   87b8c:	9300      	str	r3, [sp, #0]
   87b8e:	f000 fac1 	bl	88114 <__malloc_unlock>
   87b92:	9b00      	ldr	r3, [sp, #0]
   87b94:	f103 0408 	add.w	r4, r3, #8
   87b98:	e01e      	b.n	87bd8 <_malloc_r+0x18c>
   87b9a:	2910      	cmp	r1, #16
   87b9c:	d820      	bhi.n	87be0 <_malloc_r+0x194>
   87b9e:	f000 fab3 	bl	88108 <__malloc_lock>
   87ba2:	2610      	movs	r6, #16
   87ba4:	2318      	movs	r3, #24
   87ba6:	2002      	movs	r0, #2
   87ba8:	4f72      	ldr	r7, [pc, #456]	; (87d74 <_malloc_r+0x328>)
   87baa:	443b      	add	r3, r7
   87bac:	685c      	ldr	r4, [r3, #4]
   87bae:	f1a3 0208 	sub.w	r2, r3, #8
   87bb2:	4294      	cmp	r4, r2
   87bb4:	f000 812f 	beq.w	87e16 <_malloc_r+0x3ca>
   87bb8:	6863      	ldr	r3, [r4, #4]
   87bba:	68e1      	ldr	r1, [r4, #12]
   87bbc:	f023 0303 	bic.w	r3, r3, #3
   87bc0:	4423      	add	r3, r4
   87bc2:	685a      	ldr	r2, [r3, #4]
   87bc4:	68a6      	ldr	r6, [r4, #8]
   87bc6:	f042 0201 	orr.w	r2, r2, #1
   87bca:	60f1      	str	r1, [r6, #12]
   87bcc:	4628      	mov	r0, r5
   87bce:	608e      	str	r6, [r1, #8]
   87bd0:	605a      	str	r2, [r3, #4]
   87bd2:	f000 fa9f 	bl	88114 <__malloc_unlock>
   87bd6:	3408      	adds	r4, #8
   87bd8:	4620      	mov	r0, r4
   87bda:	b003      	add	sp, #12
   87bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87be0:	2400      	movs	r4, #0
   87be2:	230c      	movs	r3, #12
   87be4:	4620      	mov	r0, r4
   87be6:	602b      	str	r3, [r5, #0]
   87be8:	b003      	add	sp, #12
   87bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87bee:	2040      	movs	r0, #64	; 0x40
   87bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
   87bf4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   87bf8:	e74a      	b.n	87a90 <_malloc_r+0x44>
   87bfa:	4423      	add	r3, r4
   87bfc:	685a      	ldr	r2, [r3, #4]
   87bfe:	68e1      	ldr	r1, [r4, #12]
   87c00:	e7e0      	b.n	87bc4 <_malloc_r+0x178>
   87c02:	4423      	add	r3, r4
   87c04:	685a      	ldr	r2, [r3, #4]
   87c06:	4628      	mov	r0, r5
   87c08:	f042 0201 	orr.w	r2, r2, #1
   87c0c:	605a      	str	r2, [r3, #4]
   87c0e:	3408      	adds	r4, #8
   87c10:	f000 fa80 	bl	88114 <__malloc_unlock>
   87c14:	4620      	mov	r0, r4
   87c16:	b003      	add	sp, #12
   87c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87c1c:	68bc      	ldr	r4, [r7, #8]
   87c1e:	6863      	ldr	r3, [r4, #4]
   87c20:	f023 0803 	bic.w	r8, r3, #3
   87c24:	45b0      	cmp	r8, r6
   87c26:	d304      	bcc.n	87c32 <_malloc_r+0x1e6>
   87c28:	eba8 0306 	sub.w	r3, r8, r6
   87c2c:	2b0f      	cmp	r3, #15
   87c2e:	f300 8085 	bgt.w	87d3c <_malloc_r+0x2f0>
   87c32:	f8df 9158 	ldr.w	r9, [pc, #344]	; 87d8c <_malloc_r+0x340>
   87c36:	4b50      	ldr	r3, [pc, #320]	; (87d78 <_malloc_r+0x32c>)
   87c38:	f8d9 2000 	ldr.w	r2, [r9]
   87c3c:	681b      	ldr	r3, [r3, #0]
   87c3e:	3201      	adds	r2, #1
   87c40:	4433      	add	r3, r6
   87c42:	eb04 0a08 	add.w	sl, r4, r8
   87c46:	f000 8154 	beq.w	87ef2 <_malloc_r+0x4a6>
   87c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   87c4e:	330f      	adds	r3, #15
   87c50:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   87c54:	f02b 0b0f 	bic.w	fp, fp, #15
   87c58:	4659      	mov	r1, fp
   87c5a:	4628      	mov	r0, r5
   87c5c:	f000 fd5c 	bl	88718 <_sbrk_r>
   87c60:	1c41      	adds	r1, r0, #1
   87c62:	4602      	mov	r2, r0
   87c64:	f000 80fb 	beq.w	87e5e <_malloc_r+0x412>
   87c68:	4582      	cmp	sl, r0
   87c6a:	f200 80f6 	bhi.w	87e5a <_malloc_r+0x40e>
   87c6e:	4b43      	ldr	r3, [pc, #268]	; (87d7c <_malloc_r+0x330>)
   87c70:	6819      	ldr	r1, [r3, #0]
   87c72:	4459      	add	r1, fp
   87c74:	6019      	str	r1, [r3, #0]
   87c76:	f000 814c 	beq.w	87f12 <_malloc_r+0x4c6>
   87c7a:	f8d9 0000 	ldr.w	r0, [r9]
   87c7e:	3001      	adds	r0, #1
   87c80:	bf1b      	ittet	ne
   87c82:	eba2 0a0a 	subne.w	sl, r2, sl
   87c86:	4451      	addne	r1, sl
   87c88:	f8c9 2000 	streq.w	r2, [r9]
   87c8c:	6019      	strne	r1, [r3, #0]
   87c8e:	f012 0107 	ands.w	r1, r2, #7
   87c92:	f000 8114 	beq.w	87ebe <_malloc_r+0x472>
   87c96:	f1c1 0008 	rsb	r0, r1, #8
   87c9a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   87c9e:	4402      	add	r2, r0
   87ca0:	3108      	adds	r1, #8
   87ca2:	eb02 090b 	add.w	r9, r2, fp
   87ca6:	f3c9 090b 	ubfx	r9, r9, #0, #12
   87caa:	eba1 0909 	sub.w	r9, r1, r9
   87cae:	4649      	mov	r1, r9
   87cb0:	4628      	mov	r0, r5
   87cb2:	9301      	str	r3, [sp, #4]
   87cb4:	9200      	str	r2, [sp, #0]
   87cb6:	f000 fd2f 	bl	88718 <_sbrk_r>
   87cba:	1c43      	adds	r3, r0, #1
   87cbc:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87cc0:	f000 8142 	beq.w	87f48 <_malloc_r+0x4fc>
   87cc4:	1a80      	subs	r0, r0, r2
   87cc6:	4448      	add	r0, r9
   87cc8:	f040 0001 	orr.w	r0, r0, #1
   87ccc:	6819      	ldr	r1, [r3, #0]
   87cce:	42bc      	cmp	r4, r7
   87cd0:	4449      	add	r1, r9
   87cd2:	60ba      	str	r2, [r7, #8]
   87cd4:	6019      	str	r1, [r3, #0]
   87cd6:	6050      	str	r0, [r2, #4]
   87cd8:	d017      	beq.n	87d0a <_malloc_r+0x2be>
   87cda:	f1b8 0f0f 	cmp.w	r8, #15
   87cde:	f240 80fa 	bls.w	87ed6 <_malloc_r+0x48a>
   87ce2:	f04f 0c05 	mov.w	ip, #5
   87ce6:	6862      	ldr	r2, [r4, #4]
   87ce8:	f1a8 000c 	sub.w	r0, r8, #12
   87cec:	f020 0007 	bic.w	r0, r0, #7
   87cf0:	f002 0201 	and.w	r2, r2, #1
   87cf4:	eb04 0e00 	add.w	lr, r4, r0
   87cf8:	4302      	orrs	r2, r0
   87cfa:	280f      	cmp	r0, #15
   87cfc:	6062      	str	r2, [r4, #4]
   87cfe:	f8ce c004 	str.w	ip, [lr, #4]
   87d02:	f8ce c008 	str.w	ip, [lr, #8]
   87d06:	f200 8116 	bhi.w	87f36 <_malloc_r+0x4ea>
   87d0a:	4b1d      	ldr	r3, [pc, #116]	; (87d80 <_malloc_r+0x334>)
   87d0c:	68bc      	ldr	r4, [r7, #8]
   87d0e:	681a      	ldr	r2, [r3, #0]
   87d10:	4291      	cmp	r1, r2
   87d12:	bf88      	it	hi
   87d14:	6019      	strhi	r1, [r3, #0]
   87d16:	4b1b      	ldr	r3, [pc, #108]	; (87d84 <_malloc_r+0x338>)
   87d18:	681a      	ldr	r2, [r3, #0]
   87d1a:	4291      	cmp	r1, r2
   87d1c:	6862      	ldr	r2, [r4, #4]
   87d1e:	bf88      	it	hi
   87d20:	6019      	strhi	r1, [r3, #0]
   87d22:	f022 0203 	bic.w	r2, r2, #3
   87d26:	4296      	cmp	r6, r2
   87d28:	eba2 0306 	sub.w	r3, r2, r6
   87d2c:	d801      	bhi.n	87d32 <_malloc_r+0x2e6>
   87d2e:	2b0f      	cmp	r3, #15
   87d30:	dc04      	bgt.n	87d3c <_malloc_r+0x2f0>
   87d32:	4628      	mov	r0, r5
   87d34:	f000 f9ee 	bl	88114 <__malloc_unlock>
   87d38:	2400      	movs	r4, #0
   87d3a:	e74d      	b.n	87bd8 <_malloc_r+0x18c>
   87d3c:	f046 0201 	orr.w	r2, r6, #1
   87d40:	f043 0301 	orr.w	r3, r3, #1
   87d44:	4426      	add	r6, r4
   87d46:	6062      	str	r2, [r4, #4]
   87d48:	4628      	mov	r0, r5
   87d4a:	60be      	str	r6, [r7, #8]
   87d4c:	3408      	adds	r4, #8
   87d4e:	6073      	str	r3, [r6, #4]
   87d50:	f000 f9e0 	bl	88114 <__malloc_unlock>
   87d54:	4620      	mov	r0, r4
   87d56:	b003      	add	sp, #12
   87d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87d5c:	2b14      	cmp	r3, #20
   87d5e:	d970      	bls.n	87e42 <_malloc_r+0x3f6>
   87d60:	2b54      	cmp	r3, #84	; 0x54
   87d62:	f200 80a2 	bhi.w	87eaa <_malloc_r+0x45e>
   87d66:	0b33      	lsrs	r3, r6, #12
   87d68:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   87d6c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   87d70:	00c1      	lsls	r1, r0, #3
   87d72:	e68d      	b.n	87a90 <_malloc_r+0x44>
   87d74:	200705d4 	.word	0x200705d4
   87d78:	20070e04 	.word	0x20070e04
   87d7c:	20070dd4 	.word	0x20070dd4
   87d80:	20070dfc 	.word	0x20070dfc
   87d84:	20070e00 	.word	0x20070e00
   87d88:	200705dc 	.word	0x200705dc
   87d8c:	200709dc 	.word	0x200709dc
   87d90:	0a5a      	lsrs	r2, r3, #9
   87d92:	2a04      	cmp	r2, #4
   87d94:	d95b      	bls.n	87e4e <_malloc_r+0x402>
   87d96:	2a14      	cmp	r2, #20
   87d98:	f200 80ae 	bhi.w	87ef8 <_malloc_r+0x4ac>
   87d9c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   87da0:	00c9      	lsls	r1, r1, #3
   87da2:	325b      	adds	r2, #91	; 0x5b
   87da4:	eb07 0c01 	add.w	ip, r7, r1
   87da8:	5879      	ldr	r1, [r7, r1]
   87daa:	f1ac 0c08 	sub.w	ip, ip, #8
   87dae:	458c      	cmp	ip, r1
   87db0:	f000 8088 	beq.w	87ec4 <_malloc_r+0x478>
   87db4:	684a      	ldr	r2, [r1, #4]
   87db6:	f022 0203 	bic.w	r2, r2, #3
   87dba:	4293      	cmp	r3, r2
   87dbc:	d273      	bcs.n	87ea6 <_malloc_r+0x45a>
   87dbe:	6889      	ldr	r1, [r1, #8]
   87dc0:	458c      	cmp	ip, r1
   87dc2:	d1f7      	bne.n	87db4 <_malloc_r+0x368>
   87dc4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87dc8:	687a      	ldr	r2, [r7, #4]
   87dca:	60e3      	str	r3, [r4, #12]
   87dcc:	f8c4 c008 	str.w	ip, [r4, #8]
   87dd0:	609c      	str	r4, [r3, #8]
   87dd2:	f8cc 400c 	str.w	r4, [ip, #12]
   87dd6:	e69e      	b.n	87b16 <_malloc_r+0xca>
   87dd8:	f046 0c01 	orr.w	ip, r6, #1
   87ddc:	f042 0101 	orr.w	r1, r2, #1
   87de0:	4426      	add	r6, r4
   87de2:	f8c4 c004 	str.w	ip, [r4, #4]
   87de6:	4628      	mov	r0, r5
   87de8:	617e      	str	r6, [r7, #20]
   87dea:	613e      	str	r6, [r7, #16]
   87dec:	f8c6 e00c 	str.w	lr, [r6, #12]
   87df0:	f8c6 e008 	str.w	lr, [r6, #8]
   87df4:	6071      	str	r1, [r6, #4]
   87df6:	50e2      	str	r2, [r4, r3]
   87df8:	f000 f98c 	bl	88114 <__malloc_unlock>
   87dfc:	3408      	adds	r4, #8
   87dfe:	e6eb      	b.n	87bd8 <_malloc_r+0x18c>
   87e00:	687a      	ldr	r2, [r7, #4]
   87e02:	e688      	b.n	87b16 <_malloc_r+0xca>
   87e04:	f108 0801 	add.w	r8, r8, #1
   87e08:	f018 0f03 	tst.w	r8, #3
   87e0c:	f10c 0c08 	add.w	ip, ip, #8
   87e10:	f47f ae93 	bne.w	87b3a <_malloc_r+0xee>
   87e14:	e02d      	b.n	87e72 <_malloc_r+0x426>
   87e16:	68dc      	ldr	r4, [r3, #12]
   87e18:	42a3      	cmp	r3, r4
   87e1a:	bf08      	it	eq
   87e1c:	3002      	addeq	r0, #2
   87e1e:	f43f ae4b 	beq.w	87ab8 <_malloc_r+0x6c>
   87e22:	e6c9      	b.n	87bb8 <_malloc_r+0x16c>
   87e24:	461c      	mov	r4, r3
   87e26:	4419      	add	r1, r3
   87e28:	684a      	ldr	r2, [r1, #4]
   87e2a:	68db      	ldr	r3, [r3, #12]
   87e2c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   87e30:	f042 0201 	orr.w	r2, r2, #1
   87e34:	604a      	str	r2, [r1, #4]
   87e36:	4628      	mov	r0, r5
   87e38:	60f3      	str	r3, [r6, #12]
   87e3a:	609e      	str	r6, [r3, #8]
   87e3c:	f000 f96a 	bl	88114 <__malloc_unlock>
   87e40:	e6ca      	b.n	87bd8 <_malloc_r+0x18c>
   87e42:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   87e46:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   87e4a:	00c1      	lsls	r1, r0, #3
   87e4c:	e620      	b.n	87a90 <_malloc_r+0x44>
   87e4e:	099a      	lsrs	r2, r3, #6
   87e50:	f102 0139 	add.w	r1, r2, #57	; 0x39
   87e54:	00c9      	lsls	r1, r1, #3
   87e56:	3238      	adds	r2, #56	; 0x38
   87e58:	e7a4      	b.n	87da4 <_malloc_r+0x358>
   87e5a:	42bc      	cmp	r4, r7
   87e5c:	d054      	beq.n	87f08 <_malloc_r+0x4bc>
   87e5e:	68bc      	ldr	r4, [r7, #8]
   87e60:	6862      	ldr	r2, [r4, #4]
   87e62:	f022 0203 	bic.w	r2, r2, #3
   87e66:	e75e      	b.n	87d26 <_malloc_r+0x2da>
   87e68:	f859 3908 	ldr.w	r3, [r9], #-8
   87e6c:	4599      	cmp	r9, r3
   87e6e:	f040 8086 	bne.w	87f7e <_malloc_r+0x532>
   87e72:	f010 0f03 	tst.w	r0, #3
   87e76:	f100 30ff 	add.w	r0, r0, #4294967295
   87e7a:	d1f5      	bne.n	87e68 <_malloc_r+0x41c>
   87e7c:	687b      	ldr	r3, [r7, #4]
   87e7e:	ea23 0304 	bic.w	r3, r3, r4
   87e82:	607b      	str	r3, [r7, #4]
   87e84:	0064      	lsls	r4, r4, #1
   87e86:	429c      	cmp	r4, r3
   87e88:	f63f aec8 	bhi.w	87c1c <_malloc_r+0x1d0>
   87e8c:	2c00      	cmp	r4, #0
   87e8e:	f43f aec5 	beq.w	87c1c <_malloc_r+0x1d0>
   87e92:	421c      	tst	r4, r3
   87e94:	4640      	mov	r0, r8
   87e96:	f47f ae4c 	bne.w	87b32 <_malloc_r+0xe6>
   87e9a:	0064      	lsls	r4, r4, #1
   87e9c:	421c      	tst	r4, r3
   87e9e:	f100 0004 	add.w	r0, r0, #4
   87ea2:	d0fa      	beq.n	87e9a <_malloc_r+0x44e>
   87ea4:	e645      	b.n	87b32 <_malloc_r+0xe6>
   87ea6:	468c      	mov	ip, r1
   87ea8:	e78c      	b.n	87dc4 <_malloc_r+0x378>
   87eaa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   87eae:	d815      	bhi.n	87edc <_malloc_r+0x490>
   87eb0:	0bf3      	lsrs	r3, r6, #15
   87eb2:	f103 0078 	add.w	r0, r3, #120	; 0x78
   87eb6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   87eba:	00c1      	lsls	r1, r0, #3
   87ebc:	e5e8      	b.n	87a90 <_malloc_r+0x44>
   87ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   87ec2:	e6ee      	b.n	87ca2 <_malloc_r+0x256>
   87ec4:	2101      	movs	r1, #1
   87ec6:	687b      	ldr	r3, [r7, #4]
   87ec8:	1092      	asrs	r2, r2, #2
   87eca:	fa01 f202 	lsl.w	r2, r1, r2
   87ece:	431a      	orrs	r2, r3
   87ed0:	607a      	str	r2, [r7, #4]
   87ed2:	4663      	mov	r3, ip
   87ed4:	e779      	b.n	87dca <_malloc_r+0x37e>
   87ed6:	2301      	movs	r3, #1
   87ed8:	6053      	str	r3, [r2, #4]
   87eda:	e72a      	b.n	87d32 <_malloc_r+0x2e6>
   87edc:	f240 5254 	movw	r2, #1364	; 0x554
   87ee0:	4293      	cmp	r3, r2
   87ee2:	d822      	bhi.n	87f2a <_malloc_r+0x4de>
   87ee4:	0cb3      	lsrs	r3, r6, #18
   87ee6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   87eea:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   87eee:	00c1      	lsls	r1, r0, #3
   87ef0:	e5ce      	b.n	87a90 <_malloc_r+0x44>
   87ef2:	f103 0b10 	add.w	fp, r3, #16
   87ef6:	e6af      	b.n	87c58 <_malloc_r+0x20c>
   87ef8:	2a54      	cmp	r2, #84	; 0x54
   87efa:	d829      	bhi.n	87f50 <_malloc_r+0x504>
   87efc:	0b1a      	lsrs	r2, r3, #12
   87efe:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   87f02:	00c9      	lsls	r1, r1, #3
   87f04:	326e      	adds	r2, #110	; 0x6e
   87f06:	e74d      	b.n	87da4 <_malloc_r+0x358>
   87f08:	4b20      	ldr	r3, [pc, #128]	; (87f8c <_malloc_r+0x540>)
   87f0a:	6819      	ldr	r1, [r3, #0]
   87f0c:	4459      	add	r1, fp
   87f0e:	6019      	str	r1, [r3, #0]
   87f10:	e6b3      	b.n	87c7a <_malloc_r+0x22e>
   87f12:	f3ca 000b 	ubfx	r0, sl, #0, #12
   87f16:	2800      	cmp	r0, #0
   87f18:	f47f aeaf 	bne.w	87c7a <_malloc_r+0x22e>
   87f1c:	eb08 030b 	add.w	r3, r8, fp
   87f20:	68ba      	ldr	r2, [r7, #8]
   87f22:	f043 0301 	orr.w	r3, r3, #1
   87f26:	6053      	str	r3, [r2, #4]
   87f28:	e6ef      	b.n	87d0a <_malloc_r+0x2be>
   87f2a:	207f      	movs	r0, #127	; 0x7f
   87f2c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   87f30:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   87f34:	e5ac      	b.n	87a90 <_malloc_r+0x44>
   87f36:	f104 0108 	add.w	r1, r4, #8
   87f3a:	4628      	mov	r0, r5
   87f3c:	9300      	str	r3, [sp, #0]
   87f3e:	f000 fd5d 	bl	889fc <_free_r>
   87f42:	9b00      	ldr	r3, [sp, #0]
   87f44:	6819      	ldr	r1, [r3, #0]
   87f46:	e6e0      	b.n	87d0a <_malloc_r+0x2be>
   87f48:	2001      	movs	r0, #1
   87f4a:	f04f 0900 	mov.w	r9, #0
   87f4e:	e6bd      	b.n	87ccc <_malloc_r+0x280>
   87f50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   87f54:	d805      	bhi.n	87f62 <_malloc_r+0x516>
   87f56:	0bda      	lsrs	r2, r3, #15
   87f58:	f102 0178 	add.w	r1, r2, #120	; 0x78
   87f5c:	00c9      	lsls	r1, r1, #3
   87f5e:	3277      	adds	r2, #119	; 0x77
   87f60:	e720      	b.n	87da4 <_malloc_r+0x358>
   87f62:	f240 5154 	movw	r1, #1364	; 0x554
   87f66:	428a      	cmp	r2, r1
   87f68:	d805      	bhi.n	87f76 <_malloc_r+0x52a>
   87f6a:	0c9a      	lsrs	r2, r3, #18
   87f6c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   87f70:	00c9      	lsls	r1, r1, #3
   87f72:	327c      	adds	r2, #124	; 0x7c
   87f74:	e716      	b.n	87da4 <_malloc_r+0x358>
   87f76:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   87f7a:	227e      	movs	r2, #126	; 0x7e
   87f7c:	e712      	b.n	87da4 <_malloc_r+0x358>
   87f7e:	687b      	ldr	r3, [r7, #4]
   87f80:	e780      	b.n	87e84 <_malloc_r+0x438>
   87f82:	08f0      	lsrs	r0, r6, #3
   87f84:	f106 0308 	add.w	r3, r6, #8
   87f88:	e60e      	b.n	87ba8 <_malloc_r+0x15c>
   87f8a:	bf00      	nop
   87f8c:	20070dd4 	.word	0x20070dd4

00087f90 <memchr>:
   87f90:	0783      	lsls	r3, r0, #30
   87f92:	b470      	push	{r4, r5, r6}
   87f94:	b2cd      	uxtb	r5, r1
   87f96:	d03d      	beq.n	88014 <memchr+0x84>
   87f98:	1e54      	subs	r4, r2, #1
   87f9a:	b30a      	cbz	r2, 87fe0 <memchr+0x50>
   87f9c:	7803      	ldrb	r3, [r0, #0]
   87f9e:	42ab      	cmp	r3, r5
   87fa0:	d01f      	beq.n	87fe2 <memchr+0x52>
   87fa2:	1c43      	adds	r3, r0, #1
   87fa4:	e005      	b.n	87fb2 <memchr+0x22>
   87fa6:	f114 34ff 	adds.w	r4, r4, #4294967295
   87faa:	d319      	bcc.n	87fe0 <memchr+0x50>
   87fac:	7802      	ldrb	r2, [r0, #0]
   87fae:	42aa      	cmp	r2, r5
   87fb0:	d017      	beq.n	87fe2 <memchr+0x52>
   87fb2:	f013 0f03 	tst.w	r3, #3
   87fb6:	4618      	mov	r0, r3
   87fb8:	f103 0301 	add.w	r3, r3, #1
   87fbc:	d1f3      	bne.n	87fa6 <memchr+0x16>
   87fbe:	2c03      	cmp	r4, #3
   87fc0:	d811      	bhi.n	87fe6 <memchr+0x56>
   87fc2:	b34c      	cbz	r4, 88018 <memchr+0x88>
   87fc4:	7803      	ldrb	r3, [r0, #0]
   87fc6:	42ab      	cmp	r3, r5
   87fc8:	d00b      	beq.n	87fe2 <memchr+0x52>
   87fca:	4404      	add	r4, r0
   87fcc:	1c43      	adds	r3, r0, #1
   87fce:	e002      	b.n	87fd6 <memchr+0x46>
   87fd0:	7802      	ldrb	r2, [r0, #0]
   87fd2:	42aa      	cmp	r2, r5
   87fd4:	d005      	beq.n	87fe2 <memchr+0x52>
   87fd6:	429c      	cmp	r4, r3
   87fd8:	4618      	mov	r0, r3
   87fda:	f103 0301 	add.w	r3, r3, #1
   87fde:	d1f7      	bne.n	87fd0 <memchr+0x40>
   87fe0:	2000      	movs	r0, #0
   87fe2:	bc70      	pop	{r4, r5, r6}
   87fe4:	4770      	bx	lr
   87fe6:	0209      	lsls	r1, r1, #8
   87fe8:	b289      	uxth	r1, r1
   87fea:	4329      	orrs	r1, r5
   87fec:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   87ff0:	6803      	ldr	r3, [r0, #0]
   87ff2:	4606      	mov	r6, r0
   87ff4:	404b      	eors	r3, r1
   87ff6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   87ffa:	ea22 0303 	bic.w	r3, r2, r3
   87ffe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   88002:	f100 0004 	add.w	r0, r0, #4
   88006:	d103      	bne.n	88010 <memchr+0x80>
   88008:	3c04      	subs	r4, #4
   8800a:	2c03      	cmp	r4, #3
   8800c:	d8f0      	bhi.n	87ff0 <memchr+0x60>
   8800e:	e7d8      	b.n	87fc2 <memchr+0x32>
   88010:	4630      	mov	r0, r6
   88012:	e7d7      	b.n	87fc4 <memchr+0x34>
   88014:	4614      	mov	r4, r2
   88016:	e7d2      	b.n	87fbe <memchr+0x2e>
   88018:	4620      	mov	r0, r4
   8801a:	e7e2      	b.n	87fe2 <memchr+0x52>

0008801c <memcpy>:
   8801c:	4684      	mov	ip, r0
   8801e:	ea41 0300 	orr.w	r3, r1, r0
   88022:	f013 0303 	ands.w	r3, r3, #3
   88026:	d149      	bne.n	880bc <memcpy+0xa0>
   88028:	3a40      	subs	r2, #64	; 0x40
   8802a:	d323      	bcc.n	88074 <memcpy+0x58>
   8802c:	680b      	ldr	r3, [r1, #0]
   8802e:	6003      	str	r3, [r0, #0]
   88030:	684b      	ldr	r3, [r1, #4]
   88032:	6043      	str	r3, [r0, #4]
   88034:	688b      	ldr	r3, [r1, #8]
   88036:	6083      	str	r3, [r0, #8]
   88038:	68cb      	ldr	r3, [r1, #12]
   8803a:	60c3      	str	r3, [r0, #12]
   8803c:	690b      	ldr	r3, [r1, #16]
   8803e:	6103      	str	r3, [r0, #16]
   88040:	694b      	ldr	r3, [r1, #20]
   88042:	6143      	str	r3, [r0, #20]
   88044:	698b      	ldr	r3, [r1, #24]
   88046:	6183      	str	r3, [r0, #24]
   88048:	69cb      	ldr	r3, [r1, #28]
   8804a:	61c3      	str	r3, [r0, #28]
   8804c:	6a0b      	ldr	r3, [r1, #32]
   8804e:	6203      	str	r3, [r0, #32]
   88050:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   88052:	6243      	str	r3, [r0, #36]	; 0x24
   88054:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   88056:	6283      	str	r3, [r0, #40]	; 0x28
   88058:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8805a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8805c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8805e:	6303      	str	r3, [r0, #48]	; 0x30
   88060:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   88062:	6343      	str	r3, [r0, #52]	; 0x34
   88064:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   88066:	6383      	str	r3, [r0, #56]	; 0x38
   88068:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8806a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8806c:	3040      	adds	r0, #64	; 0x40
   8806e:	3140      	adds	r1, #64	; 0x40
   88070:	3a40      	subs	r2, #64	; 0x40
   88072:	d2db      	bcs.n	8802c <memcpy+0x10>
   88074:	3230      	adds	r2, #48	; 0x30
   88076:	d30b      	bcc.n	88090 <memcpy+0x74>
   88078:	680b      	ldr	r3, [r1, #0]
   8807a:	6003      	str	r3, [r0, #0]
   8807c:	684b      	ldr	r3, [r1, #4]
   8807e:	6043      	str	r3, [r0, #4]
   88080:	688b      	ldr	r3, [r1, #8]
   88082:	6083      	str	r3, [r0, #8]
   88084:	68cb      	ldr	r3, [r1, #12]
   88086:	60c3      	str	r3, [r0, #12]
   88088:	3010      	adds	r0, #16
   8808a:	3110      	adds	r1, #16
   8808c:	3a10      	subs	r2, #16
   8808e:	d2f3      	bcs.n	88078 <memcpy+0x5c>
   88090:	320c      	adds	r2, #12
   88092:	d305      	bcc.n	880a0 <memcpy+0x84>
   88094:	f851 3b04 	ldr.w	r3, [r1], #4
   88098:	f840 3b04 	str.w	r3, [r0], #4
   8809c:	3a04      	subs	r2, #4
   8809e:	d2f9      	bcs.n	88094 <memcpy+0x78>
   880a0:	3204      	adds	r2, #4
   880a2:	d008      	beq.n	880b6 <memcpy+0x9a>
   880a4:	07d2      	lsls	r2, r2, #31
   880a6:	bf1c      	itt	ne
   880a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   880ac:	f800 3b01 	strbne.w	r3, [r0], #1
   880b0:	d301      	bcc.n	880b6 <memcpy+0x9a>
   880b2:	880b      	ldrh	r3, [r1, #0]
   880b4:	8003      	strh	r3, [r0, #0]
   880b6:	4660      	mov	r0, ip
   880b8:	4770      	bx	lr
   880ba:	bf00      	nop
   880bc:	2a08      	cmp	r2, #8
   880be:	d313      	bcc.n	880e8 <memcpy+0xcc>
   880c0:	078b      	lsls	r3, r1, #30
   880c2:	d0b1      	beq.n	88028 <memcpy+0xc>
   880c4:	f010 0303 	ands.w	r3, r0, #3
   880c8:	d0ae      	beq.n	88028 <memcpy+0xc>
   880ca:	f1c3 0304 	rsb	r3, r3, #4
   880ce:	1ad2      	subs	r2, r2, r3
   880d0:	07db      	lsls	r3, r3, #31
   880d2:	bf1c      	itt	ne
   880d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   880d8:	f800 3b01 	strbne.w	r3, [r0], #1
   880dc:	d3a4      	bcc.n	88028 <memcpy+0xc>
   880de:	f831 3b02 	ldrh.w	r3, [r1], #2
   880e2:	f820 3b02 	strh.w	r3, [r0], #2
   880e6:	e79f      	b.n	88028 <memcpy+0xc>
   880e8:	3a04      	subs	r2, #4
   880ea:	d3d9      	bcc.n	880a0 <memcpy+0x84>
   880ec:	3a01      	subs	r2, #1
   880ee:	f811 3b01 	ldrb.w	r3, [r1], #1
   880f2:	f800 3b01 	strb.w	r3, [r0], #1
   880f6:	d2f9      	bcs.n	880ec <memcpy+0xd0>
   880f8:	780b      	ldrb	r3, [r1, #0]
   880fa:	7003      	strb	r3, [r0, #0]
   880fc:	784b      	ldrb	r3, [r1, #1]
   880fe:	7043      	strb	r3, [r0, #1]
   88100:	788b      	ldrb	r3, [r1, #2]
   88102:	7083      	strb	r3, [r0, #2]
   88104:	4660      	mov	r0, ip
   88106:	4770      	bx	lr

00088108 <__malloc_lock>:
   88108:	4801      	ldr	r0, [pc, #4]	; (88110 <__malloc_lock+0x8>)
   8810a:	f7ff bc9b 	b.w	87a44 <__retarget_lock_acquire_recursive>
   8810e:	bf00      	nop
   88110:	20070fdc 	.word	0x20070fdc

00088114 <__malloc_unlock>:
   88114:	4801      	ldr	r0, [pc, #4]	; (8811c <__malloc_unlock+0x8>)
   88116:	f7ff bc97 	b.w	87a48 <__retarget_lock_release_recursive>
   8811a:	bf00      	nop
   8811c:	20070fdc 	.word	0x20070fdc

00088120 <_Balloc>:
   88120:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88122:	b570      	push	{r4, r5, r6, lr}
   88124:	4605      	mov	r5, r0
   88126:	460c      	mov	r4, r1
   88128:	b14b      	cbz	r3, 8813e <_Balloc+0x1e>
   8812a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8812e:	b180      	cbz	r0, 88152 <_Balloc+0x32>
   88130:	6802      	ldr	r2, [r0, #0]
   88132:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   88136:	2300      	movs	r3, #0
   88138:	6103      	str	r3, [r0, #16]
   8813a:	60c3      	str	r3, [r0, #12]
   8813c:	bd70      	pop	{r4, r5, r6, pc}
   8813e:	2221      	movs	r2, #33	; 0x21
   88140:	2104      	movs	r1, #4
   88142:	f000 fbdb 	bl	888fc <_calloc_r>
   88146:	64e8      	str	r0, [r5, #76]	; 0x4c
   88148:	4603      	mov	r3, r0
   8814a:	2800      	cmp	r0, #0
   8814c:	d1ed      	bne.n	8812a <_Balloc+0xa>
   8814e:	2000      	movs	r0, #0
   88150:	bd70      	pop	{r4, r5, r6, pc}
   88152:	2101      	movs	r1, #1
   88154:	fa01 f604 	lsl.w	r6, r1, r4
   88158:	1d72      	adds	r2, r6, #5
   8815a:	4628      	mov	r0, r5
   8815c:	0092      	lsls	r2, r2, #2
   8815e:	f000 fbcd 	bl	888fc <_calloc_r>
   88162:	2800      	cmp	r0, #0
   88164:	d0f3      	beq.n	8814e <_Balloc+0x2e>
   88166:	6044      	str	r4, [r0, #4]
   88168:	6086      	str	r6, [r0, #8]
   8816a:	e7e4      	b.n	88136 <_Balloc+0x16>

0008816c <_Bfree>:
   8816c:	b131      	cbz	r1, 8817c <_Bfree+0x10>
   8816e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88170:	684a      	ldr	r2, [r1, #4]
   88172:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   88176:	6008      	str	r0, [r1, #0]
   88178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8817c:	4770      	bx	lr
   8817e:	bf00      	nop

00088180 <__multadd>:
   88180:	b5f0      	push	{r4, r5, r6, r7, lr}
   88182:	460c      	mov	r4, r1
   88184:	4605      	mov	r5, r0
   88186:	f04f 0e00 	mov.w	lr, #0
   8818a:	690e      	ldr	r6, [r1, #16]
   8818c:	b083      	sub	sp, #12
   8818e:	f101 0714 	add.w	r7, r1, #20
   88192:	6838      	ldr	r0, [r7, #0]
   88194:	f10e 0e01 	add.w	lr, lr, #1
   88198:	b281      	uxth	r1, r0
   8819a:	fb02 3301 	mla	r3, r2, r1, r3
   8819e:	0c01      	lsrs	r1, r0, #16
   881a0:	0c18      	lsrs	r0, r3, #16
   881a2:	fb02 0101 	mla	r1, r2, r1, r0
   881a6:	b29b      	uxth	r3, r3
   881a8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   881ac:	4576      	cmp	r6, lr
   881ae:	f847 3b04 	str.w	r3, [r7], #4
   881b2:	ea4f 4311 	mov.w	r3, r1, lsr #16
   881b6:	dcec      	bgt.n	88192 <__multadd+0x12>
   881b8:	b13b      	cbz	r3, 881ca <__multadd+0x4a>
   881ba:	68a2      	ldr	r2, [r4, #8]
   881bc:	4296      	cmp	r6, r2
   881be:	da07      	bge.n	881d0 <__multadd+0x50>
   881c0:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   881c4:	3601      	adds	r6, #1
   881c6:	6153      	str	r3, [r2, #20]
   881c8:	6126      	str	r6, [r4, #16]
   881ca:	4620      	mov	r0, r4
   881cc:	b003      	add	sp, #12
   881ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   881d0:	6861      	ldr	r1, [r4, #4]
   881d2:	4628      	mov	r0, r5
   881d4:	3101      	adds	r1, #1
   881d6:	9301      	str	r3, [sp, #4]
   881d8:	f7ff ffa2 	bl	88120 <_Balloc>
   881dc:	4607      	mov	r7, r0
   881de:	6922      	ldr	r2, [r4, #16]
   881e0:	f104 010c 	add.w	r1, r4, #12
   881e4:	3202      	adds	r2, #2
   881e6:	0092      	lsls	r2, r2, #2
   881e8:	300c      	adds	r0, #12
   881ea:	f7ff ff17 	bl	8801c <memcpy>
   881ee:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   881f0:	6861      	ldr	r1, [r4, #4]
   881f2:	9b01      	ldr	r3, [sp, #4]
   881f4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   881f8:	6020      	str	r0, [r4, #0]
   881fa:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   881fe:	463c      	mov	r4, r7
   88200:	e7de      	b.n	881c0 <__multadd+0x40>
   88202:	bf00      	nop

00088204 <__hi0bits>:
   88204:	0c02      	lsrs	r2, r0, #16
   88206:	0412      	lsls	r2, r2, #16
   88208:	4603      	mov	r3, r0
   8820a:	b9b2      	cbnz	r2, 8823a <__hi0bits+0x36>
   8820c:	0403      	lsls	r3, r0, #16
   8820e:	2010      	movs	r0, #16
   88210:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   88214:	bf04      	itt	eq
   88216:	021b      	lsleq	r3, r3, #8
   88218:	3008      	addeq	r0, #8
   8821a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8821e:	bf04      	itt	eq
   88220:	011b      	lsleq	r3, r3, #4
   88222:	3004      	addeq	r0, #4
   88224:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   88228:	bf04      	itt	eq
   8822a:	009b      	lsleq	r3, r3, #2
   8822c:	3002      	addeq	r0, #2
   8822e:	2b00      	cmp	r3, #0
   88230:	db02      	blt.n	88238 <__hi0bits+0x34>
   88232:	005b      	lsls	r3, r3, #1
   88234:	d403      	bmi.n	8823e <__hi0bits+0x3a>
   88236:	2020      	movs	r0, #32
   88238:	4770      	bx	lr
   8823a:	2000      	movs	r0, #0
   8823c:	e7e8      	b.n	88210 <__hi0bits+0xc>
   8823e:	3001      	adds	r0, #1
   88240:	4770      	bx	lr
   88242:	bf00      	nop

00088244 <__lo0bits>:
   88244:	6803      	ldr	r3, [r0, #0]
   88246:	4601      	mov	r1, r0
   88248:	f013 0207 	ands.w	r2, r3, #7
   8824c:	d007      	beq.n	8825e <__lo0bits+0x1a>
   8824e:	07da      	lsls	r2, r3, #31
   88250:	d421      	bmi.n	88296 <__lo0bits+0x52>
   88252:	0798      	lsls	r0, r3, #30
   88254:	d421      	bmi.n	8829a <__lo0bits+0x56>
   88256:	089b      	lsrs	r3, r3, #2
   88258:	600b      	str	r3, [r1, #0]
   8825a:	2002      	movs	r0, #2
   8825c:	4770      	bx	lr
   8825e:	b298      	uxth	r0, r3
   88260:	b198      	cbz	r0, 8828a <__lo0bits+0x46>
   88262:	4610      	mov	r0, r2
   88264:	f013 0fff 	tst.w	r3, #255	; 0xff
   88268:	bf04      	itt	eq
   8826a:	0a1b      	lsreq	r3, r3, #8
   8826c:	3008      	addeq	r0, #8
   8826e:	071a      	lsls	r2, r3, #28
   88270:	bf04      	itt	eq
   88272:	091b      	lsreq	r3, r3, #4
   88274:	3004      	addeq	r0, #4
   88276:	079a      	lsls	r2, r3, #30
   88278:	bf04      	itt	eq
   8827a:	089b      	lsreq	r3, r3, #2
   8827c:	3002      	addeq	r0, #2
   8827e:	07da      	lsls	r2, r3, #31
   88280:	d407      	bmi.n	88292 <__lo0bits+0x4e>
   88282:	085b      	lsrs	r3, r3, #1
   88284:	d104      	bne.n	88290 <__lo0bits+0x4c>
   88286:	2020      	movs	r0, #32
   88288:	4770      	bx	lr
   8828a:	0c1b      	lsrs	r3, r3, #16
   8828c:	2010      	movs	r0, #16
   8828e:	e7e9      	b.n	88264 <__lo0bits+0x20>
   88290:	3001      	adds	r0, #1
   88292:	600b      	str	r3, [r1, #0]
   88294:	4770      	bx	lr
   88296:	2000      	movs	r0, #0
   88298:	4770      	bx	lr
   8829a:	085b      	lsrs	r3, r3, #1
   8829c:	600b      	str	r3, [r1, #0]
   8829e:	2001      	movs	r0, #1
   882a0:	4770      	bx	lr
   882a2:	bf00      	nop

000882a4 <__i2b>:
   882a4:	b510      	push	{r4, lr}
   882a6:	460c      	mov	r4, r1
   882a8:	2101      	movs	r1, #1
   882aa:	f7ff ff39 	bl	88120 <_Balloc>
   882ae:	2201      	movs	r2, #1
   882b0:	6144      	str	r4, [r0, #20]
   882b2:	6102      	str	r2, [r0, #16]
   882b4:	bd10      	pop	{r4, pc}
   882b6:	bf00      	nop

000882b8 <__multiply>:
   882b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   882bc:	690c      	ldr	r4, [r1, #16]
   882be:	6915      	ldr	r5, [r2, #16]
   882c0:	b083      	sub	sp, #12
   882c2:	42ac      	cmp	r4, r5
   882c4:	468b      	mov	fp, r1
   882c6:	4616      	mov	r6, r2
   882c8:	da04      	bge.n	882d4 <__multiply+0x1c>
   882ca:	4622      	mov	r2, r4
   882cc:	46b3      	mov	fp, r6
   882ce:	462c      	mov	r4, r5
   882d0:	460e      	mov	r6, r1
   882d2:	4615      	mov	r5, r2
   882d4:	f8db 3008 	ldr.w	r3, [fp, #8]
   882d8:	eb04 0805 	add.w	r8, r4, r5
   882dc:	f8db 1004 	ldr.w	r1, [fp, #4]
   882e0:	4598      	cmp	r8, r3
   882e2:	bfc8      	it	gt
   882e4:	3101      	addgt	r1, #1
   882e6:	f7ff ff1b 	bl	88120 <_Balloc>
   882ea:	f100 0914 	add.w	r9, r0, #20
   882ee:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   882f2:	45d1      	cmp	r9, sl
   882f4:	9000      	str	r0, [sp, #0]
   882f6:	d205      	bcs.n	88304 <__multiply+0x4c>
   882f8:	464b      	mov	r3, r9
   882fa:	2100      	movs	r1, #0
   882fc:	f843 1b04 	str.w	r1, [r3], #4
   88300:	459a      	cmp	sl, r3
   88302:	d8fb      	bhi.n	882fc <__multiply+0x44>
   88304:	f106 0c14 	add.w	ip, r6, #20
   88308:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   8830c:	f10b 0b14 	add.w	fp, fp, #20
   88310:	459c      	cmp	ip, r3
   88312:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   88316:	d24b      	bcs.n	883b0 <__multiply+0xf8>
   88318:	f8cd a004 	str.w	sl, [sp, #4]
   8831c:	469a      	mov	sl, r3
   8831e:	f8dc 5000 	ldr.w	r5, [ip]
   88322:	b2af      	uxth	r7, r5
   88324:	b1e7      	cbz	r7, 88360 <__multiply+0xa8>
   88326:	464d      	mov	r5, r9
   88328:	465e      	mov	r6, fp
   8832a:	2100      	movs	r1, #0
   8832c:	f856 2b04 	ldr.w	r2, [r6], #4
   88330:	6828      	ldr	r0, [r5, #0]
   88332:	b293      	uxth	r3, r2
   88334:	b284      	uxth	r4, r0
   88336:	0c12      	lsrs	r2, r2, #16
   88338:	fb07 4303 	mla	r3, r7, r3, r4
   8833c:	0c00      	lsrs	r0, r0, #16
   8833e:	fb07 0202 	mla	r2, r7, r2, r0
   88342:	440b      	add	r3, r1
   88344:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   88348:	b29b      	uxth	r3, r3
   8834a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8834e:	45b6      	cmp	lr, r6
   88350:	f845 3b04 	str.w	r3, [r5], #4
   88354:	ea4f 4111 	mov.w	r1, r1, lsr #16
   88358:	d8e8      	bhi.n	8832c <__multiply+0x74>
   8835a:	6029      	str	r1, [r5, #0]
   8835c:	f8dc 5000 	ldr.w	r5, [ip]
   88360:	0c2d      	lsrs	r5, r5, #16
   88362:	d01d      	beq.n	883a0 <__multiply+0xe8>
   88364:	f8d9 3000 	ldr.w	r3, [r9]
   88368:	4648      	mov	r0, r9
   8836a:	461c      	mov	r4, r3
   8836c:	4659      	mov	r1, fp
   8836e:	2200      	movs	r2, #0
   88370:	880e      	ldrh	r6, [r1, #0]
   88372:	0c24      	lsrs	r4, r4, #16
   88374:	fb05 4406 	mla	r4, r5, r6, r4
   88378:	b29b      	uxth	r3, r3
   8837a:	4422      	add	r2, r4
   8837c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88380:	f840 3b04 	str.w	r3, [r0], #4
   88384:	f851 3b04 	ldr.w	r3, [r1], #4
   88388:	6804      	ldr	r4, [r0, #0]
   8838a:	0c1b      	lsrs	r3, r3, #16
   8838c:	b2a6      	uxth	r6, r4
   8838e:	fb05 6303 	mla	r3, r5, r3, r6
   88392:	458e      	cmp	lr, r1
   88394:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   88398:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8839c:	d8e8      	bhi.n	88370 <__multiply+0xb8>
   8839e:	6003      	str	r3, [r0, #0]
   883a0:	f10c 0c04 	add.w	ip, ip, #4
   883a4:	45e2      	cmp	sl, ip
   883a6:	f109 0904 	add.w	r9, r9, #4
   883aa:	d8b8      	bhi.n	8831e <__multiply+0x66>
   883ac:	f8dd a004 	ldr.w	sl, [sp, #4]
   883b0:	f1b8 0f00 	cmp.w	r8, #0
   883b4:	dd0b      	ble.n	883ce <__multiply+0x116>
   883b6:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   883ba:	f1aa 0a04 	sub.w	sl, sl, #4
   883be:	b11b      	cbz	r3, 883c8 <__multiply+0x110>
   883c0:	e005      	b.n	883ce <__multiply+0x116>
   883c2:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   883c6:	b913      	cbnz	r3, 883ce <__multiply+0x116>
   883c8:	f1b8 0801 	subs.w	r8, r8, #1
   883cc:	d1f9      	bne.n	883c2 <__multiply+0x10a>
   883ce:	9800      	ldr	r0, [sp, #0]
   883d0:	f8c0 8010 	str.w	r8, [r0, #16]
   883d4:	b003      	add	sp, #12
   883d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   883da:	bf00      	nop

000883dc <__pow5mult>:
   883dc:	f012 0303 	ands.w	r3, r2, #3
   883e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   883e4:	4614      	mov	r4, r2
   883e6:	4607      	mov	r7, r0
   883e8:	d12e      	bne.n	88448 <__pow5mult+0x6c>
   883ea:	460d      	mov	r5, r1
   883ec:	10a4      	asrs	r4, r4, #2
   883ee:	d01c      	beq.n	8842a <__pow5mult+0x4e>
   883f0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   883f2:	b396      	cbz	r6, 8845a <__pow5mult+0x7e>
   883f4:	07e3      	lsls	r3, r4, #31
   883f6:	f04f 0800 	mov.w	r8, #0
   883fa:	d406      	bmi.n	8840a <__pow5mult+0x2e>
   883fc:	1064      	asrs	r4, r4, #1
   883fe:	d014      	beq.n	8842a <__pow5mult+0x4e>
   88400:	6830      	ldr	r0, [r6, #0]
   88402:	b1a8      	cbz	r0, 88430 <__pow5mult+0x54>
   88404:	4606      	mov	r6, r0
   88406:	07e3      	lsls	r3, r4, #31
   88408:	d5f8      	bpl.n	883fc <__pow5mult+0x20>
   8840a:	4632      	mov	r2, r6
   8840c:	4629      	mov	r1, r5
   8840e:	4638      	mov	r0, r7
   88410:	f7ff ff52 	bl	882b8 <__multiply>
   88414:	b1b5      	cbz	r5, 88444 <__pow5mult+0x68>
   88416:	686a      	ldr	r2, [r5, #4]
   88418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8841a:	1064      	asrs	r4, r4, #1
   8841c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88420:	6029      	str	r1, [r5, #0]
   88422:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   88426:	4605      	mov	r5, r0
   88428:	d1ea      	bne.n	88400 <__pow5mult+0x24>
   8842a:	4628      	mov	r0, r5
   8842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88430:	4632      	mov	r2, r6
   88432:	4631      	mov	r1, r6
   88434:	4638      	mov	r0, r7
   88436:	f7ff ff3f 	bl	882b8 <__multiply>
   8843a:	6030      	str	r0, [r6, #0]
   8843c:	f8c0 8000 	str.w	r8, [r0]
   88440:	4606      	mov	r6, r0
   88442:	e7e0      	b.n	88406 <__pow5mult+0x2a>
   88444:	4605      	mov	r5, r0
   88446:	e7d9      	b.n	883fc <__pow5mult+0x20>
   88448:	4a0b      	ldr	r2, [pc, #44]	; (88478 <__pow5mult+0x9c>)
   8844a:	3b01      	subs	r3, #1
   8844c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   88450:	2300      	movs	r3, #0
   88452:	f7ff fe95 	bl	88180 <__multadd>
   88456:	4605      	mov	r5, r0
   88458:	e7c8      	b.n	883ec <__pow5mult+0x10>
   8845a:	2101      	movs	r1, #1
   8845c:	4638      	mov	r0, r7
   8845e:	f7ff fe5f 	bl	88120 <_Balloc>
   88462:	f240 2171 	movw	r1, #625	; 0x271
   88466:	2201      	movs	r2, #1
   88468:	2300      	movs	r3, #0
   8846a:	6141      	str	r1, [r0, #20]
   8846c:	6102      	str	r2, [r0, #16]
   8846e:	4606      	mov	r6, r0
   88470:	64b8      	str	r0, [r7, #72]	; 0x48
   88472:	6003      	str	r3, [r0, #0]
   88474:	e7be      	b.n	883f4 <__pow5mult+0x18>
   88476:	bf00      	nop
   88478:	00089798 	.word	0x00089798

0008847c <__lshift>:
   8847c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88480:	690b      	ldr	r3, [r1, #16]
   88482:	1154      	asrs	r4, r2, #5
   88484:	eb04 0803 	add.w	r8, r4, r3
   88488:	688b      	ldr	r3, [r1, #8]
   8848a:	f108 0501 	add.w	r5, r8, #1
   8848e:	429d      	cmp	r5, r3
   88490:	460e      	mov	r6, r1
   88492:	4691      	mov	r9, r2
   88494:	4607      	mov	r7, r0
   88496:	6849      	ldr	r1, [r1, #4]
   88498:	dd04      	ble.n	884a4 <__lshift+0x28>
   8849a:	005b      	lsls	r3, r3, #1
   8849c:	429d      	cmp	r5, r3
   8849e:	f101 0101 	add.w	r1, r1, #1
   884a2:	dcfa      	bgt.n	8849a <__lshift+0x1e>
   884a4:	4638      	mov	r0, r7
   884a6:	f7ff fe3b 	bl	88120 <_Balloc>
   884aa:	2c00      	cmp	r4, #0
   884ac:	f100 0314 	add.w	r3, r0, #20
   884b0:	dd06      	ble.n	884c0 <__lshift+0x44>
   884b2:	2100      	movs	r1, #0
   884b4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   884b8:	f843 1b04 	str.w	r1, [r3], #4
   884bc:	429a      	cmp	r2, r3
   884be:	d1fb      	bne.n	884b8 <__lshift+0x3c>
   884c0:	6934      	ldr	r4, [r6, #16]
   884c2:	f106 0114 	add.w	r1, r6, #20
   884c6:	f019 091f 	ands.w	r9, r9, #31
   884ca:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   884ce:	d01d      	beq.n	8850c <__lshift+0x90>
   884d0:	2200      	movs	r2, #0
   884d2:	f1c9 0c20 	rsb	ip, r9, #32
   884d6:	680c      	ldr	r4, [r1, #0]
   884d8:	fa04 f409 	lsl.w	r4, r4, r9
   884dc:	4314      	orrs	r4, r2
   884de:	f843 4b04 	str.w	r4, [r3], #4
   884e2:	f851 2b04 	ldr.w	r2, [r1], #4
   884e6:	458e      	cmp	lr, r1
   884e8:	fa22 f20c 	lsr.w	r2, r2, ip
   884ec:	d8f3      	bhi.n	884d6 <__lshift+0x5a>
   884ee:	601a      	str	r2, [r3, #0]
   884f0:	b10a      	cbz	r2, 884f6 <__lshift+0x7a>
   884f2:	f108 0502 	add.w	r5, r8, #2
   884f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   884f8:	6872      	ldr	r2, [r6, #4]
   884fa:	3d01      	subs	r5, #1
   884fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88500:	6105      	str	r5, [r0, #16]
   88502:	6031      	str	r1, [r6, #0]
   88504:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   88508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8850c:	3b04      	subs	r3, #4
   8850e:	f851 2b04 	ldr.w	r2, [r1], #4
   88512:	458e      	cmp	lr, r1
   88514:	f843 2f04 	str.w	r2, [r3, #4]!
   88518:	d8f9      	bhi.n	8850e <__lshift+0x92>
   8851a:	e7ec      	b.n	884f6 <__lshift+0x7a>

0008851c <__mcmp>:
   8851c:	b430      	push	{r4, r5}
   8851e:	690b      	ldr	r3, [r1, #16]
   88520:	4605      	mov	r5, r0
   88522:	6900      	ldr	r0, [r0, #16]
   88524:	1ac0      	subs	r0, r0, r3
   88526:	d10f      	bne.n	88548 <__mcmp+0x2c>
   88528:	009b      	lsls	r3, r3, #2
   8852a:	3514      	adds	r5, #20
   8852c:	3114      	adds	r1, #20
   8852e:	4419      	add	r1, r3
   88530:	442b      	add	r3, r5
   88532:	e001      	b.n	88538 <__mcmp+0x1c>
   88534:	429d      	cmp	r5, r3
   88536:	d207      	bcs.n	88548 <__mcmp+0x2c>
   88538:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8853c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88540:	4294      	cmp	r4, r2
   88542:	d0f7      	beq.n	88534 <__mcmp+0x18>
   88544:	d302      	bcc.n	8854c <__mcmp+0x30>
   88546:	2001      	movs	r0, #1
   88548:	bc30      	pop	{r4, r5}
   8854a:	4770      	bx	lr
   8854c:	f04f 30ff 	mov.w	r0, #4294967295
   88550:	e7fa      	b.n	88548 <__mcmp+0x2c>
   88552:	bf00      	nop

00088554 <__mdiff>:
   88554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88558:	690c      	ldr	r4, [r1, #16]
   8855a:	4689      	mov	r9, r1
   8855c:	6911      	ldr	r1, [r2, #16]
   8855e:	4692      	mov	sl, r2
   88560:	1a64      	subs	r4, r4, r1
   88562:	2c00      	cmp	r4, #0
   88564:	d117      	bne.n	88596 <__mdiff+0x42>
   88566:	0089      	lsls	r1, r1, #2
   88568:	f109 0714 	add.w	r7, r9, #20
   8856c:	f102 0614 	add.w	r6, r2, #20
   88570:	187b      	adds	r3, r7, r1
   88572:	4431      	add	r1, r6
   88574:	e001      	b.n	8857a <__mdiff+0x26>
   88576:	429f      	cmp	r7, r3
   88578:	d265      	bcs.n	88646 <__mdiff+0xf2>
   8857a:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8857e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88582:	4295      	cmp	r5, r2
   88584:	d0f7      	beq.n	88576 <__mdiff+0x22>
   88586:	d267      	bcs.n	88658 <__mdiff+0x104>
   88588:	464b      	mov	r3, r9
   8858a:	46bb      	mov	fp, r7
   8858c:	46d1      	mov	r9, sl
   8858e:	4637      	mov	r7, r6
   88590:	469a      	mov	sl, r3
   88592:	2401      	movs	r4, #1
   88594:	e005      	b.n	885a2 <__mdiff+0x4e>
   88596:	db61      	blt.n	8865c <__mdiff+0x108>
   88598:	2400      	movs	r4, #0
   8859a:	f109 0714 	add.w	r7, r9, #20
   8859e:	f10a 0b14 	add.w	fp, sl, #20
   885a2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   885a6:	f7ff fdbb 	bl	88120 <_Balloc>
   885aa:	465d      	mov	r5, fp
   885ac:	f04f 0800 	mov.w	r8, #0
   885b0:	f8d9 e010 	ldr.w	lr, [r9, #16]
   885b4:	f8da 3010 	ldr.w	r3, [sl, #16]
   885b8:	463e      	mov	r6, r7
   885ba:	60c4      	str	r4, [r0, #12]
   885bc:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   885c0:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   885c4:	f100 0414 	add.w	r4, r0, #20
   885c8:	f856 9b04 	ldr.w	r9, [r6], #4
   885cc:	f855 2b04 	ldr.w	r2, [r5], #4
   885d0:	fa1f f389 	uxth.w	r3, r9
   885d4:	4443      	add	r3, r8
   885d6:	fa1f f882 	uxth.w	r8, r2
   885da:	0c12      	lsrs	r2, r2, #16
   885dc:	eba3 0308 	sub.w	r3, r3, r8
   885e0:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   885e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   885e8:	b29b      	uxth	r3, r3
   885ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   885ee:	45ac      	cmp	ip, r5
   885f0:	f844 3b04 	str.w	r3, [r4], #4
   885f4:	ea4f 4822 	mov.w	r8, r2, asr #16
   885f8:	d8e6      	bhi.n	885c8 <__mdiff+0x74>
   885fa:	42b7      	cmp	r7, r6
   885fc:	d917      	bls.n	8862e <__mdiff+0xda>
   885fe:	46a4      	mov	ip, r4
   88600:	4635      	mov	r5, r6
   88602:	f855 3b04 	ldr.w	r3, [r5], #4
   88606:	b299      	uxth	r1, r3
   88608:	4441      	add	r1, r8
   8860a:	140a      	asrs	r2, r1, #16
   8860c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   88610:	b289      	uxth	r1, r1
   88612:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   88616:	42af      	cmp	r7, r5
   88618:	f84c 3b04 	str.w	r3, [ip], #4
   8861c:	ea4f 4822 	mov.w	r8, r2, asr #16
   88620:	d8ef      	bhi.n	88602 <__mdiff+0xae>
   88622:	43f6      	mvns	r6, r6
   88624:	4437      	add	r7, r6
   88626:	f027 0703 	bic.w	r7, r7, #3
   8862a:	3704      	adds	r7, #4
   8862c:	443c      	add	r4, r7
   8862e:	3c04      	subs	r4, #4
   88630:	b92b      	cbnz	r3, 8863e <__mdiff+0xea>
   88632:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   88636:	f10e 3eff 	add.w	lr, lr, #4294967295
   8863a:	2b00      	cmp	r3, #0
   8863c:	d0f9      	beq.n	88632 <__mdiff+0xde>
   8863e:	f8c0 e010 	str.w	lr, [r0, #16]
   88642:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88646:	2100      	movs	r1, #0
   88648:	f7ff fd6a 	bl	88120 <_Balloc>
   8864c:	2201      	movs	r2, #1
   8864e:	2300      	movs	r3, #0
   88650:	6102      	str	r2, [r0, #16]
   88652:	6143      	str	r3, [r0, #20]
   88654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88658:	46b3      	mov	fp, r6
   8865a:	e7a2      	b.n	885a2 <__mdiff+0x4e>
   8865c:	464b      	mov	r3, r9
   8865e:	f109 0b14 	add.w	fp, r9, #20
   88662:	f102 0714 	add.w	r7, r2, #20
   88666:	4691      	mov	r9, r2
   88668:	2401      	movs	r4, #1
   8866a:	469a      	mov	sl, r3
   8866c:	e799      	b.n	885a2 <__mdiff+0x4e>
   8866e:	bf00      	nop

00088670 <__d2b>:
   88670:	b5f0      	push	{r4, r5, r6, r7, lr}
   88672:	2101      	movs	r1, #1
   88674:	b083      	sub	sp, #12
   88676:	461c      	mov	r4, r3
   88678:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8867c:	4616      	mov	r6, r2
   8867e:	f7ff fd4f 	bl	88120 <_Balloc>
   88682:	f3c4 0413 	ubfx	r4, r4, #0, #20
   88686:	4607      	mov	r7, r0
   88688:	b10d      	cbz	r5, 8868e <__d2b+0x1e>
   8868a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8868e:	9401      	str	r4, [sp, #4]
   88690:	b306      	cbz	r6, 886d4 <__d2b+0x64>
   88692:	a802      	add	r0, sp, #8
   88694:	f840 6d08 	str.w	r6, [r0, #-8]!
   88698:	f7ff fdd4 	bl	88244 <__lo0bits>
   8869c:	2800      	cmp	r0, #0
   8869e:	d130      	bne.n	88702 <__d2b+0x92>
   886a0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   886a4:	617a      	str	r2, [r7, #20]
   886a6:	2b00      	cmp	r3, #0
   886a8:	bf0c      	ite	eq
   886aa:	2101      	moveq	r1, #1
   886ac:	2102      	movne	r1, #2
   886ae:	61bb      	str	r3, [r7, #24]
   886b0:	6139      	str	r1, [r7, #16]
   886b2:	b9d5      	cbnz	r5, 886ea <__d2b+0x7a>
   886b4:	9a08      	ldr	r2, [sp, #32]
   886b6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   886ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   886be:	6010      	str	r0, [r2, #0]
   886c0:	6918      	ldr	r0, [r3, #16]
   886c2:	f7ff fd9f 	bl	88204 <__hi0bits>
   886c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   886c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   886cc:	6018      	str	r0, [r3, #0]
   886ce:	4638      	mov	r0, r7
   886d0:	b003      	add	sp, #12
   886d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   886d4:	a801      	add	r0, sp, #4
   886d6:	f7ff fdb5 	bl	88244 <__lo0bits>
   886da:	2201      	movs	r2, #1
   886dc:	9b01      	ldr	r3, [sp, #4]
   886de:	4611      	mov	r1, r2
   886e0:	3020      	adds	r0, #32
   886e2:	613a      	str	r2, [r7, #16]
   886e4:	617b      	str	r3, [r7, #20]
   886e6:	2d00      	cmp	r5, #0
   886e8:	d0e4      	beq.n	886b4 <__d2b+0x44>
   886ea:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   886ee:	9a08      	ldr	r2, [sp, #32]
   886f0:	4403      	add	r3, r0
   886f2:	6013      	str	r3, [r2, #0]
   886f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   886f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   886fa:	6018      	str	r0, [r3, #0]
   886fc:	4638      	mov	r0, r7
   886fe:	b003      	add	sp, #12
   88700:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88702:	9b01      	ldr	r3, [sp, #4]
   88704:	f1c0 0220 	rsb	r2, r0, #32
   88708:	9900      	ldr	r1, [sp, #0]
   8870a:	fa03 f202 	lsl.w	r2, r3, r2
   8870e:	430a      	orrs	r2, r1
   88710:	40c3      	lsrs	r3, r0
   88712:	9301      	str	r3, [sp, #4]
   88714:	617a      	str	r2, [r7, #20]
   88716:	e7c6      	b.n	886a6 <__d2b+0x36>

00088718 <_sbrk_r>:
   88718:	b538      	push	{r3, r4, r5, lr}
   8871a:	2300      	movs	r3, #0
   8871c:	4c06      	ldr	r4, [pc, #24]	; (88738 <_sbrk_r+0x20>)
   8871e:	4605      	mov	r5, r0
   88720:	4608      	mov	r0, r1
   88722:	6023      	str	r3, [r4, #0]
   88724:	f7fb fd14 	bl	84150 <_sbrk>
   88728:	1c43      	adds	r3, r0, #1
   8872a:	d000      	beq.n	8872e <_sbrk_r+0x16>
   8872c:	bd38      	pop	{r3, r4, r5, pc}
   8872e:	6823      	ldr	r3, [r4, #0]
   88730:	2b00      	cmp	r3, #0
   88732:	d0fb      	beq.n	8872c <_sbrk_r+0x14>
   88734:	602b      	str	r3, [r5, #0]
   88736:	bd38      	pop	{r3, r4, r5, pc}
   88738:	20070ff0 	.word	0x20070ff0

0008873c <__ssprint_r>:
   8873c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88740:	6893      	ldr	r3, [r2, #8]
   88742:	b083      	sub	sp, #12
   88744:	4690      	mov	r8, r2
   88746:	2b00      	cmp	r3, #0
   88748:	d070      	beq.n	8882c <__ssprint_r+0xf0>
   8874a:	4682      	mov	sl, r0
   8874c:	460c      	mov	r4, r1
   8874e:	6817      	ldr	r7, [r2, #0]
   88750:	688d      	ldr	r5, [r1, #8]
   88752:	6808      	ldr	r0, [r1, #0]
   88754:	e042      	b.n	887dc <__ssprint_r+0xa0>
   88756:	89a3      	ldrh	r3, [r4, #12]
   88758:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8875c:	d02e      	beq.n	887bc <__ssprint_r+0x80>
   8875e:	6965      	ldr	r5, [r4, #20]
   88760:	6921      	ldr	r1, [r4, #16]
   88762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   88766:	eba0 0b01 	sub.w	fp, r0, r1
   8876a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8876e:	f10b 0001 	add.w	r0, fp, #1
   88772:	106d      	asrs	r5, r5, #1
   88774:	4430      	add	r0, r6
   88776:	42a8      	cmp	r0, r5
   88778:	462a      	mov	r2, r5
   8877a:	bf84      	itt	hi
   8877c:	4605      	movhi	r5, r0
   8877e:	462a      	movhi	r2, r5
   88780:	055b      	lsls	r3, r3, #21
   88782:	d538      	bpl.n	887f6 <__ssprint_r+0xba>
   88784:	4611      	mov	r1, r2
   88786:	4650      	mov	r0, sl
   88788:	f7ff f960 	bl	87a4c <_malloc_r>
   8878c:	2800      	cmp	r0, #0
   8878e:	d03c      	beq.n	8880a <__ssprint_r+0xce>
   88790:	465a      	mov	r2, fp
   88792:	6921      	ldr	r1, [r4, #16]
   88794:	9001      	str	r0, [sp, #4]
   88796:	f7ff fc41 	bl	8801c <memcpy>
   8879a:	89a2      	ldrh	r2, [r4, #12]
   8879c:	9b01      	ldr	r3, [sp, #4]
   8879e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   887a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   887a6:	81a2      	strh	r2, [r4, #12]
   887a8:	eba5 020b 	sub.w	r2, r5, fp
   887ac:	eb03 000b 	add.w	r0, r3, fp
   887b0:	6165      	str	r5, [r4, #20]
   887b2:	46b3      	mov	fp, r6
   887b4:	4635      	mov	r5, r6
   887b6:	6123      	str	r3, [r4, #16]
   887b8:	6020      	str	r0, [r4, #0]
   887ba:	60a2      	str	r2, [r4, #8]
   887bc:	465a      	mov	r2, fp
   887be:	4649      	mov	r1, r9
   887c0:	f000 fa18 	bl	88bf4 <memmove>
   887c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   887c8:	68a2      	ldr	r2, [r4, #8]
   887ca:	6820      	ldr	r0, [r4, #0]
   887cc:	1b55      	subs	r5, r2, r5
   887ce:	4458      	add	r0, fp
   887d0:	1b9e      	subs	r6, r3, r6
   887d2:	60a5      	str	r5, [r4, #8]
   887d4:	6020      	str	r0, [r4, #0]
   887d6:	f8c8 6008 	str.w	r6, [r8, #8]
   887da:	b33e      	cbz	r6, 8882c <__ssprint_r+0xf0>
   887dc:	687e      	ldr	r6, [r7, #4]
   887de:	463b      	mov	r3, r7
   887e0:	3708      	adds	r7, #8
   887e2:	2e00      	cmp	r6, #0
   887e4:	d0fa      	beq.n	887dc <__ssprint_r+0xa0>
   887e6:	42ae      	cmp	r6, r5
   887e8:	f8d3 9000 	ldr.w	r9, [r3]
   887ec:	46ab      	mov	fp, r5
   887ee:	d2b2      	bcs.n	88756 <__ssprint_r+0x1a>
   887f0:	4635      	mov	r5, r6
   887f2:	46b3      	mov	fp, r6
   887f4:	e7e2      	b.n	887bc <__ssprint_r+0x80>
   887f6:	4650      	mov	r0, sl
   887f8:	f000 fa60 	bl	88cbc <_realloc_r>
   887fc:	4603      	mov	r3, r0
   887fe:	2800      	cmp	r0, #0
   88800:	d1d2      	bne.n	887a8 <__ssprint_r+0x6c>
   88802:	6921      	ldr	r1, [r4, #16]
   88804:	4650      	mov	r0, sl
   88806:	f000 f8f9 	bl	889fc <_free_r>
   8880a:	230c      	movs	r3, #12
   8880c:	2200      	movs	r2, #0
   8880e:	f04f 30ff 	mov.w	r0, #4294967295
   88812:	f8ca 3000 	str.w	r3, [sl]
   88816:	89a3      	ldrh	r3, [r4, #12]
   88818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8881c:	81a3      	strh	r3, [r4, #12]
   8881e:	f8c8 2008 	str.w	r2, [r8, #8]
   88822:	f8c8 2004 	str.w	r2, [r8, #4]
   88826:	b003      	add	sp, #12
   88828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8882c:	2000      	movs	r0, #0
   8882e:	f8c8 0004 	str.w	r0, [r8, #4]
   88832:	b003      	add	sp, #12
   88834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00088838 <__register_exitproc>:
   88838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8883c:	4d2c      	ldr	r5, [pc, #176]	; (888f0 <__register_exitproc+0xb8>)
   8883e:	4606      	mov	r6, r0
   88840:	6828      	ldr	r0, [r5, #0]
   88842:	4698      	mov	r8, r3
   88844:	460f      	mov	r7, r1
   88846:	4691      	mov	r9, r2
   88848:	f7ff f8fc 	bl	87a44 <__retarget_lock_acquire_recursive>
   8884c:	4b29      	ldr	r3, [pc, #164]	; (888f4 <__register_exitproc+0xbc>)
   8884e:	681c      	ldr	r4, [r3, #0]
   88850:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   88854:	2b00      	cmp	r3, #0
   88856:	d03e      	beq.n	888d6 <__register_exitproc+0x9e>
   88858:	685a      	ldr	r2, [r3, #4]
   8885a:	2a1f      	cmp	r2, #31
   8885c:	dc1c      	bgt.n	88898 <__register_exitproc+0x60>
   8885e:	f102 0e01 	add.w	lr, r2, #1
   88862:	b176      	cbz	r6, 88882 <__register_exitproc+0x4a>
   88864:	2101      	movs	r1, #1
   88866:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8886a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8886e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   88872:	4091      	lsls	r1, r2
   88874:	4308      	orrs	r0, r1
   88876:	2e02      	cmp	r6, #2
   88878:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8887c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   88880:	d023      	beq.n	888ca <__register_exitproc+0x92>
   88882:	3202      	adds	r2, #2
   88884:	f8c3 e004 	str.w	lr, [r3, #4]
   88888:	6828      	ldr	r0, [r5, #0]
   8888a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8888e:	f7ff f8db 	bl	87a48 <__retarget_lock_release_recursive>
   88892:	2000      	movs	r0, #0
   88894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88898:	4b17      	ldr	r3, [pc, #92]	; (888f8 <__register_exitproc+0xc0>)
   8889a:	b30b      	cbz	r3, 888e0 <__register_exitproc+0xa8>
   8889c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   888a0:	f3af 8000 	nop.w
   888a4:	4603      	mov	r3, r0
   888a6:	b1d8      	cbz	r0, 888e0 <__register_exitproc+0xa8>
   888a8:	2000      	movs	r0, #0
   888aa:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   888ae:	f04f 0e01 	mov.w	lr, #1
   888b2:	6058      	str	r0, [r3, #4]
   888b4:	6019      	str	r1, [r3, #0]
   888b6:	4602      	mov	r2, r0
   888b8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   888bc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   888c0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   888c4:	2e00      	cmp	r6, #0
   888c6:	d0dc      	beq.n	88882 <__register_exitproc+0x4a>
   888c8:	e7cc      	b.n	88864 <__register_exitproc+0x2c>
   888ca:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   888ce:	4301      	orrs	r1, r0
   888d0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   888d4:	e7d5      	b.n	88882 <__register_exitproc+0x4a>
   888d6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   888da:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   888de:	e7bb      	b.n	88858 <__register_exitproc+0x20>
   888e0:	6828      	ldr	r0, [r5, #0]
   888e2:	f7ff f8b1 	bl	87a48 <__retarget_lock_release_recursive>
   888e6:	f04f 30ff 	mov.w	r0, #4294967295
   888ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   888ee:	bf00      	nop
   888f0:	200705d0 	.word	0x200705d0
   888f4:	00089630 	.word	0x00089630
   888f8:	00000000 	.word	0x00000000

000888fc <_calloc_r>:
   888fc:	b510      	push	{r4, lr}
   888fe:	fb02 f101 	mul.w	r1, r2, r1
   88902:	f7ff f8a3 	bl	87a4c <_malloc_r>
   88906:	4604      	mov	r4, r0
   88908:	b1d8      	cbz	r0, 88942 <_calloc_r+0x46>
   8890a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8890e:	f022 0203 	bic.w	r2, r2, #3
   88912:	3a04      	subs	r2, #4
   88914:	2a24      	cmp	r2, #36	; 0x24
   88916:	d818      	bhi.n	8894a <_calloc_r+0x4e>
   88918:	2a13      	cmp	r2, #19
   8891a:	d914      	bls.n	88946 <_calloc_r+0x4a>
   8891c:	2300      	movs	r3, #0
   8891e:	2a1b      	cmp	r2, #27
   88920:	6003      	str	r3, [r0, #0]
   88922:	6043      	str	r3, [r0, #4]
   88924:	d916      	bls.n	88954 <_calloc_r+0x58>
   88926:	2a24      	cmp	r2, #36	; 0x24
   88928:	6083      	str	r3, [r0, #8]
   8892a:	60c3      	str	r3, [r0, #12]
   8892c:	bf11      	iteee	ne
   8892e:	f100 0210 	addne.w	r2, r0, #16
   88932:	6103      	streq	r3, [r0, #16]
   88934:	6143      	streq	r3, [r0, #20]
   88936:	f100 0218 	addeq.w	r2, r0, #24
   8893a:	2300      	movs	r3, #0
   8893c:	6013      	str	r3, [r2, #0]
   8893e:	6053      	str	r3, [r2, #4]
   88940:	6093      	str	r3, [r2, #8]
   88942:	4620      	mov	r0, r4
   88944:	bd10      	pop	{r4, pc}
   88946:	4602      	mov	r2, r0
   88948:	e7f7      	b.n	8893a <_calloc_r+0x3e>
   8894a:	2100      	movs	r1, #0
   8894c:	f7fc fd68 	bl	85420 <memset>
   88950:	4620      	mov	r0, r4
   88952:	bd10      	pop	{r4, pc}
   88954:	f100 0208 	add.w	r2, r0, #8
   88958:	e7ef      	b.n	8893a <_calloc_r+0x3e>
   8895a:	bf00      	nop

0008895c <_malloc_trim_r>:
   8895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8895e:	460c      	mov	r4, r1
   88960:	4f23      	ldr	r7, [pc, #140]	; (889f0 <_malloc_trim_r+0x94>)
   88962:	4606      	mov	r6, r0
   88964:	f7ff fbd0 	bl	88108 <__malloc_lock>
   88968:	68bb      	ldr	r3, [r7, #8]
   8896a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8896e:	685d      	ldr	r5, [r3, #4]
   88970:	310f      	adds	r1, #15
   88972:	f025 0503 	bic.w	r5, r5, #3
   88976:	4429      	add	r1, r5
   88978:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8897c:	f021 010f 	bic.w	r1, r1, #15
   88980:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   88984:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   88988:	db07      	blt.n	8899a <_malloc_trim_r+0x3e>
   8898a:	2100      	movs	r1, #0
   8898c:	4630      	mov	r0, r6
   8898e:	f7ff fec3 	bl	88718 <_sbrk_r>
   88992:	68bb      	ldr	r3, [r7, #8]
   88994:	442b      	add	r3, r5
   88996:	4298      	cmp	r0, r3
   88998:	d004      	beq.n	889a4 <_malloc_trim_r+0x48>
   8899a:	4630      	mov	r0, r6
   8899c:	f7ff fbba 	bl	88114 <__malloc_unlock>
   889a0:	2000      	movs	r0, #0
   889a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   889a4:	4261      	negs	r1, r4
   889a6:	4630      	mov	r0, r6
   889a8:	f7ff feb6 	bl	88718 <_sbrk_r>
   889ac:	3001      	adds	r0, #1
   889ae:	d00d      	beq.n	889cc <_malloc_trim_r+0x70>
   889b0:	4b10      	ldr	r3, [pc, #64]	; (889f4 <_malloc_trim_r+0x98>)
   889b2:	68ba      	ldr	r2, [r7, #8]
   889b4:	6819      	ldr	r1, [r3, #0]
   889b6:	1b2d      	subs	r5, r5, r4
   889b8:	f045 0501 	orr.w	r5, r5, #1
   889bc:	4630      	mov	r0, r6
   889be:	1b09      	subs	r1, r1, r4
   889c0:	6055      	str	r5, [r2, #4]
   889c2:	6019      	str	r1, [r3, #0]
   889c4:	f7ff fba6 	bl	88114 <__malloc_unlock>
   889c8:	2001      	movs	r0, #1
   889ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   889cc:	2100      	movs	r1, #0
   889ce:	4630      	mov	r0, r6
   889d0:	f7ff fea2 	bl	88718 <_sbrk_r>
   889d4:	68ba      	ldr	r2, [r7, #8]
   889d6:	1a83      	subs	r3, r0, r2
   889d8:	2b0f      	cmp	r3, #15
   889da:	ddde      	ble.n	8899a <_malloc_trim_r+0x3e>
   889dc:	4c06      	ldr	r4, [pc, #24]	; (889f8 <_malloc_trim_r+0x9c>)
   889de:	4905      	ldr	r1, [pc, #20]	; (889f4 <_malloc_trim_r+0x98>)
   889e0:	6824      	ldr	r4, [r4, #0]
   889e2:	f043 0301 	orr.w	r3, r3, #1
   889e6:	1b00      	subs	r0, r0, r4
   889e8:	6053      	str	r3, [r2, #4]
   889ea:	6008      	str	r0, [r1, #0]
   889ec:	e7d5      	b.n	8899a <_malloc_trim_r+0x3e>
   889ee:	bf00      	nop
   889f0:	200705d4 	.word	0x200705d4
   889f4:	20070dd4 	.word	0x20070dd4
   889f8:	200709dc 	.word	0x200709dc

000889fc <_free_r>:
   889fc:	2900      	cmp	r1, #0
   889fe:	d044      	beq.n	88a8a <_free_r+0x8e>
   88a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88a04:	460d      	mov	r5, r1
   88a06:	4680      	mov	r8, r0
   88a08:	f7ff fb7e 	bl	88108 <__malloc_lock>
   88a0c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   88a10:	4969      	ldr	r1, [pc, #420]	; (88bb8 <_free_r+0x1bc>)
   88a12:	f1a5 0408 	sub.w	r4, r5, #8
   88a16:	f027 0301 	bic.w	r3, r7, #1
   88a1a:	18e2      	adds	r2, r4, r3
   88a1c:	688e      	ldr	r6, [r1, #8]
   88a1e:	6850      	ldr	r0, [r2, #4]
   88a20:	42b2      	cmp	r2, r6
   88a22:	f020 0003 	bic.w	r0, r0, #3
   88a26:	d05e      	beq.n	88ae6 <_free_r+0xea>
   88a28:	07fe      	lsls	r6, r7, #31
   88a2a:	6050      	str	r0, [r2, #4]
   88a2c:	d40b      	bmi.n	88a46 <_free_r+0x4a>
   88a2e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   88a32:	f101 0e08 	add.w	lr, r1, #8
   88a36:	1be4      	subs	r4, r4, r7
   88a38:	68a5      	ldr	r5, [r4, #8]
   88a3a:	443b      	add	r3, r7
   88a3c:	4575      	cmp	r5, lr
   88a3e:	d06d      	beq.n	88b1c <_free_r+0x120>
   88a40:	68e7      	ldr	r7, [r4, #12]
   88a42:	60ef      	str	r7, [r5, #12]
   88a44:	60bd      	str	r5, [r7, #8]
   88a46:	1815      	adds	r5, r2, r0
   88a48:	686d      	ldr	r5, [r5, #4]
   88a4a:	07ed      	lsls	r5, r5, #31
   88a4c:	d53e      	bpl.n	88acc <_free_r+0xd0>
   88a4e:	f043 0201 	orr.w	r2, r3, #1
   88a52:	6062      	str	r2, [r4, #4]
   88a54:	50e3      	str	r3, [r4, r3]
   88a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   88a5a:	d217      	bcs.n	88a8c <_free_r+0x90>
   88a5c:	2201      	movs	r2, #1
   88a5e:	08db      	lsrs	r3, r3, #3
   88a60:	1098      	asrs	r0, r3, #2
   88a62:	684d      	ldr	r5, [r1, #4]
   88a64:	4413      	add	r3, r2
   88a66:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   88a6a:	4082      	lsls	r2, r0
   88a6c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   88a70:	432a      	orrs	r2, r5
   88a72:	3808      	subs	r0, #8
   88a74:	60e0      	str	r0, [r4, #12]
   88a76:	60a7      	str	r7, [r4, #8]
   88a78:	604a      	str	r2, [r1, #4]
   88a7a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   88a7e:	60fc      	str	r4, [r7, #12]
   88a80:	4640      	mov	r0, r8
   88a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88a86:	f7ff bb45 	b.w	88114 <__malloc_unlock>
   88a8a:	4770      	bx	lr
   88a8c:	0a5a      	lsrs	r2, r3, #9
   88a8e:	2a04      	cmp	r2, #4
   88a90:	d852      	bhi.n	88b38 <_free_r+0x13c>
   88a92:	099a      	lsrs	r2, r3, #6
   88a94:	f102 0739 	add.w	r7, r2, #57	; 0x39
   88a98:	00ff      	lsls	r7, r7, #3
   88a9a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   88a9e:	19c8      	adds	r0, r1, r7
   88aa0:	59ca      	ldr	r2, [r1, r7]
   88aa2:	3808      	subs	r0, #8
   88aa4:	4290      	cmp	r0, r2
   88aa6:	d04f      	beq.n	88b48 <_free_r+0x14c>
   88aa8:	6851      	ldr	r1, [r2, #4]
   88aaa:	f021 0103 	bic.w	r1, r1, #3
   88aae:	428b      	cmp	r3, r1
   88ab0:	d232      	bcs.n	88b18 <_free_r+0x11c>
   88ab2:	6892      	ldr	r2, [r2, #8]
   88ab4:	4290      	cmp	r0, r2
   88ab6:	d1f7      	bne.n	88aa8 <_free_r+0xac>
   88ab8:	68c3      	ldr	r3, [r0, #12]
   88aba:	60a0      	str	r0, [r4, #8]
   88abc:	60e3      	str	r3, [r4, #12]
   88abe:	609c      	str	r4, [r3, #8]
   88ac0:	60c4      	str	r4, [r0, #12]
   88ac2:	4640      	mov	r0, r8
   88ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88ac8:	f7ff bb24 	b.w	88114 <__malloc_unlock>
   88acc:	6895      	ldr	r5, [r2, #8]
   88ace:	4f3b      	ldr	r7, [pc, #236]	; (88bbc <_free_r+0x1c0>)
   88ad0:	4403      	add	r3, r0
   88ad2:	42bd      	cmp	r5, r7
   88ad4:	d040      	beq.n	88b58 <_free_r+0x15c>
   88ad6:	68d0      	ldr	r0, [r2, #12]
   88ad8:	f043 0201 	orr.w	r2, r3, #1
   88adc:	60e8      	str	r0, [r5, #12]
   88ade:	6085      	str	r5, [r0, #8]
   88ae0:	6062      	str	r2, [r4, #4]
   88ae2:	50e3      	str	r3, [r4, r3]
   88ae4:	e7b7      	b.n	88a56 <_free_r+0x5a>
   88ae6:	07ff      	lsls	r7, r7, #31
   88ae8:	4403      	add	r3, r0
   88aea:	d407      	bmi.n	88afc <_free_r+0x100>
   88aec:	f855 5c08 	ldr.w	r5, [r5, #-8]
   88af0:	1b64      	subs	r4, r4, r5
   88af2:	68e2      	ldr	r2, [r4, #12]
   88af4:	68a0      	ldr	r0, [r4, #8]
   88af6:	442b      	add	r3, r5
   88af8:	60c2      	str	r2, [r0, #12]
   88afa:	6090      	str	r0, [r2, #8]
   88afc:	4a30      	ldr	r2, [pc, #192]	; (88bc0 <_free_r+0x1c4>)
   88afe:	f043 0001 	orr.w	r0, r3, #1
   88b02:	6812      	ldr	r2, [r2, #0]
   88b04:	6060      	str	r0, [r4, #4]
   88b06:	4293      	cmp	r3, r2
   88b08:	608c      	str	r4, [r1, #8]
   88b0a:	d3b9      	bcc.n	88a80 <_free_r+0x84>
   88b0c:	4b2d      	ldr	r3, [pc, #180]	; (88bc4 <_free_r+0x1c8>)
   88b0e:	4640      	mov	r0, r8
   88b10:	6819      	ldr	r1, [r3, #0]
   88b12:	f7ff ff23 	bl	8895c <_malloc_trim_r>
   88b16:	e7b3      	b.n	88a80 <_free_r+0x84>
   88b18:	4610      	mov	r0, r2
   88b1a:	e7cd      	b.n	88ab8 <_free_r+0xbc>
   88b1c:	1811      	adds	r1, r2, r0
   88b1e:	6849      	ldr	r1, [r1, #4]
   88b20:	07c9      	lsls	r1, r1, #31
   88b22:	d444      	bmi.n	88bae <_free_r+0x1b2>
   88b24:	6891      	ldr	r1, [r2, #8]
   88b26:	4403      	add	r3, r0
   88b28:	68d2      	ldr	r2, [r2, #12]
   88b2a:	f043 0001 	orr.w	r0, r3, #1
   88b2e:	60ca      	str	r2, [r1, #12]
   88b30:	6091      	str	r1, [r2, #8]
   88b32:	6060      	str	r0, [r4, #4]
   88b34:	50e3      	str	r3, [r4, r3]
   88b36:	e7a3      	b.n	88a80 <_free_r+0x84>
   88b38:	2a14      	cmp	r2, #20
   88b3a:	d816      	bhi.n	88b6a <_free_r+0x16e>
   88b3c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   88b40:	00ff      	lsls	r7, r7, #3
   88b42:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   88b46:	e7aa      	b.n	88a9e <_free_r+0xa2>
   88b48:	2301      	movs	r3, #1
   88b4a:	10aa      	asrs	r2, r5, #2
   88b4c:	684d      	ldr	r5, [r1, #4]
   88b4e:	4093      	lsls	r3, r2
   88b50:	432b      	orrs	r3, r5
   88b52:	604b      	str	r3, [r1, #4]
   88b54:	4603      	mov	r3, r0
   88b56:	e7b0      	b.n	88aba <_free_r+0xbe>
   88b58:	f043 0201 	orr.w	r2, r3, #1
   88b5c:	614c      	str	r4, [r1, #20]
   88b5e:	610c      	str	r4, [r1, #16]
   88b60:	60e5      	str	r5, [r4, #12]
   88b62:	60a5      	str	r5, [r4, #8]
   88b64:	6062      	str	r2, [r4, #4]
   88b66:	50e3      	str	r3, [r4, r3]
   88b68:	e78a      	b.n	88a80 <_free_r+0x84>
   88b6a:	2a54      	cmp	r2, #84	; 0x54
   88b6c:	d806      	bhi.n	88b7c <_free_r+0x180>
   88b6e:	0b1a      	lsrs	r2, r3, #12
   88b70:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   88b74:	00ff      	lsls	r7, r7, #3
   88b76:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   88b7a:	e790      	b.n	88a9e <_free_r+0xa2>
   88b7c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   88b80:	d806      	bhi.n	88b90 <_free_r+0x194>
   88b82:	0bda      	lsrs	r2, r3, #15
   88b84:	f102 0778 	add.w	r7, r2, #120	; 0x78
   88b88:	00ff      	lsls	r7, r7, #3
   88b8a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   88b8e:	e786      	b.n	88a9e <_free_r+0xa2>
   88b90:	f240 5054 	movw	r0, #1364	; 0x554
   88b94:	4282      	cmp	r2, r0
   88b96:	d806      	bhi.n	88ba6 <_free_r+0x1aa>
   88b98:	0c9a      	lsrs	r2, r3, #18
   88b9a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   88b9e:	00ff      	lsls	r7, r7, #3
   88ba0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   88ba4:	e77b      	b.n	88a9e <_free_r+0xa2>
   88ba6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   88baa:	257e      	movs	r5, #126	; 0x7e
   88bac:	e777      	b.n	88a9e <_free_r+0xa2>
   88bae:	f043 0101 	orr.w	r1, r3, #1
   88bb2:	6061      	str	r1, [r4, #4]
   88bb4:	6013      	str	r3, [r2, #0]
   88bb6:	e763      	b.n	88a80 <_free_r+0x84>
   88bb8:	200705d4 	.word	0x200705d4
   88bbc:	200705dc 	.word	0x200705dc
   88bc0:	200709e0 	.word	0x200709e0
   88bc4:	20070e04 	.word	0x20070e04

00088bc8 <__ascii_mbtowc>:
   88bc8:	b082      	sub	sp, #8
   88bca:	b149      	cbz	r1, 88be0 <__ascii_mbtowc+0x18>
   88bcc:	b15a      	cbz	r2, 88be6 <__ascii_mbtowc+0x1e>
   88bce:	b16b      	cbz	r3, 88bec <__ascii_mbtowc+0x24>
   88bd0:	7813      	ldrb	r3, [r2, #0]
   88bd2:	600b      	str	r3, [r1, #0]
   88bd4:	7812      	ldrb	r2, [r2, #0]
   88bd6:	1c10      	adds	r0, r2, #0
   88bd8:	bf18      	it	ne
   88bda:	2001      	movne	r0, #1
   88bdc:	b002      	add	sp, #8
   88bde:	4770      	bx	lr
   88be0:	a901      	add	r1, sp, #4
   88be2:	2a00      	cmp	r2, #0
   88be4:	d1f3      	bne.n	88bce <__ascii_mbtowc+0x6>
   88be6:	4610      	mov	r0, r2
   88be8:	b002      	add	sp, #8
   88bea:	4770      	bx	lr
   88bec:	f06f 0001 	mvn.w	r0, #1
   88bf0:	e7f4      	b.n	88bdc <__ascii_mbtowc+0x14>
   88bf2:	bf00      	nop

00088bf4 <memmove>:
   88bf4:	4288      	cmp	r0, r1
   88bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
   88bf8:	d90d      	bls.n	88c16 <memmove+0x22>
   88bfa:	188b      	adds	r3, r1, r2
   88bfc:	4298      	cmp	r0, r3
   88bfe:	d20a      	bcs.n	88c16 <memmove+0x22>
   88c00:	1884      	adds	r4, r0, r2
   88c02:	2a00      	cmp	r2, #0
   88c04:	d051      	beq.n	88caa <memmove+0xb6>
   88c06:	4622      	mov	r2, r4
   88c08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   88c0c:	4299      	cmp	r1, r3
   88c0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   88c12:	d1f9      	bne.n	88c08 <memmove+0x14>
   88c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88c16:	2a0f      	cmp	r2, #15
   88c18:	d948      	bls.n	88cac <memmove+0xb8>
   88c1a:	ea41 0300 	orr.w	r3, r1, r0
   88c1e:	079b      	lsls	r3, r3, #30
   88c20:	d146      	bne.n	88cb0 <memmove+0xbc>
   88c22:	4615      	mov	r5, r2
   88c24:	f100 0410 	add.w	r4, r0, #16
   88c28:	f101 0310 	add.w	r3, r1, #16
   88c2c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   88c30:	3d10      	subs	r5, #16
   88c32:	f844 6c10 	str.w	r6, [r4, #-16]
   88c36:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   88c3a:	2d0f      	cmp	r5, #15
   88c3c:	f844 6c0c 	str.w	r6, [r4, #-12]
   88c40:	f853 6c08 	ldr.w	r6, [r3, #-8]
   88c44:	f104 0410 	add.w	r4, r4, #16
   88c48:	f844 6c18 	str.w	r6, [r4, #-24]
   88c4c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   88c50:	f103 0310 	add.w	r3, r3, #16
   88c54:	f844 6c14 	str.w	r6, [r4, #-20]
   88c58:	d8e8      	bhi.n	88c2c <memmove+0x38>
   88c5a:	f1a2 0310 	sub.w	r3, r2, #16
   88c5e:	f023 030f 	bic.w	r3, r3, #15
   88c62:	f002 0e0f 	and.w	lr, r2, #15
   88c66:	3310      	adds	r3, #16
   88c68:	f1be 0f03 	cmp.w	lr, #3
   88c6c:	4419      	add	r1, r3
   88c6e:	4403      	add	r3, r0
   88c70:	d921      	bls.n	88cb6 <memmove+0xc2>
   88c72:	460e      	mov	r6, r1
   88c74:	4674      	mov	r4, lr
   88c76:	1f1d      	subs	r5, r3, #4
   88c78:	f856 7b04 	ldr.w	r7, [r6], #4
   88c7c:	3c04      	subs	r4, #4
   88c7e:	2c03      	cmp	r4, #3
   88c80:	f845 7f04 	str.w	r7, [r5, #4]!
   88c84:	d8f8      	bhi.n	88c78 <memmove+0x84>
   88c86:	f1ae 0404 	sub.w	r4, lr, #4
   88c8a:	f024 0403 	bic.w	r4, r4, #3
   88c8e:	3404      	adds	r4, #4
   88c90:	4421      	add	r1, r4
   88c92:	4423      	add	r3, r4
   88c94:	f002 0203 	and.w	r2, r2, #3
   88c98:	b162      	cbz	r2, 88cb4 <memmove+0xc0>
   88c9a:	3b01      	subs	r3, #1
   88c9c:	440a      	add	r2, r1
   88c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   88ca2:	428a      	cmp	r2, r1
   88ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
   88ca8:	d1f9      	bne.n	88c9e <memmove+0xaa>
   88caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88cac:	4603      	mov	r3, r0
   88cae:	e7f3      	b.n	88c98 <memmove+0xa4>
   88cb0:	4603      	mov	r3, r0
   88cb2:	e7f2      	b.n	88c9a <memmove+0xa6>
   88cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88cb6:	4672      	mov	r2, lr
   88cb8:	e7ee      	b.n	88c98 <memmove+0xa4>
   88cba:	bf00      	nop

00088cbc <_realloc_r>:
   88cbc:	2900      	cmp	r1, #0
   88cbe:	f000 8094 	beq.w	88dea <_realloc_r+0x12e>
   88cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88cc6:	460c      	mov	r4, r1
   88cc8:	4615      	mov	r5, r2
   88cca:	b083      	sub	sp, #12
   88ccc:	4680      	mov	r8, r0
   88cce:	f105 060b 	add.w	r6, r5, #11
   88cd2:	f7ff fa19 	bl	88108 <__malloc_lock>
   88cd6:	f854 ec04 	ldr.w	lr, [r4, #-4]
   88cda:	2e16      	cmp	r6, #22
   88cdc:	f02e 0703 	bic.w	r7, lr, #3
   88ce0:	f1a4 0908 	sub.w	r9, r4, #8
   88ce4:	d83c      	bhi.n	88d60 <_realloc_r+0xa4>
   88ce6:	2210      	movs	r2, #16
   88ce8:	4616      	mov	r6, r2
   88cea:	42b5      	cmp	r5, r6
   88cec:	d83d      	bhi.n	88d6a <_realloc_r+0xae>
   88cee:	4297      	cmp	r7, r2
   88cf0:	da43      	bge.n	88d7a <_realloc_r+0xbe>
   88cf2:	4bc6      	ldr	r3, [pc, #792]	; (8900c <_realloc_r+0x350>)
   88cf4:	eb09 0007 	add.w	r0, r9, r7
   88cf8:	6899      	ldr	r1, [r3, #8]
   88cfa:	4288      	cmp	r0, r1
   88cfc:	f000 80c3 	beq.w	88e86 <_realloc_r+0x1ca>
   88d00:	6843      	ldr	r3, [r0, #4]
   88d02:	f023 0101 	bic.w	r1, r3, #1
   88d06:	4401      	add	r1, r0
   88d08:	6849      	ldr	r1, [r1, #4]
   88d0a:	07c9      	lsls	r1, r1, #31
   88d0c:	d54d      	bpl.n	88daa <_realloc_r+0xee>
   88d0e:	f01e 0f01 	tst.w	lr, #1
   88d12:	f000 809b 	beq.w	88e4c <_realloc_r+0x190>
   88d16:	4629      	mov	r1, r5
   88d18:	4640      	mov	r0, r8
   88d1a:	f7fe fe97 	bl	87a4c <_malloc_r>
   88d1e:	4605      	mov	r5, r0
   88d20:	2800      	cmp	r0, #0
   88d22:	d03b      	beq.n	88d9c <_realloc_r+0xe0>
   88d24:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88d28:	f1a0 0208 	sub.w	r2, r0, #8
   88d2c:	f023 0301 	bic.w	r3, r3, #1
   88d30:	444b      	add	r3, r9
   88d32:	429a      	cmp	r2, r3
   88d34:	f000 812b 	beq.w	88f8e <_realloc_r+0x2d2>
   88d38:	1f3a      	subs	r2, r7, #4
   88d3a:	2a24      	cmp	r2, #36	; 0x24
   88d3c:	f200 8118 	bhi.w	88f70 <_realloc_r+0x2b4>
   88d40:	2a13      	cmp	r2, #19
   88d42:	f200 80eb 	bhi.w	88f1c <_realloc_r+0x260>
   88d46:	4603      	mov	r3, r0
   88d48:	4622      	mov	r2, r4
   88d4a:	6811      	ldr	r1, [r2, #0]
   88d4c:	6019      	str	r1, [r3, #0]
   88d4e:	6851      	ldr	r1, [r2, #4]
   88d50:	6059      	str	r1, [r3, #4]
   88d52:	6892      	ldr	r2, [r2, #8]
   88d54:	609a      	str	r2, [r3, #8]
   88d56:	4621      	mov	r1, r4
   88d58:	4640      	mov	r0, r8
   88d5a:	f7ff fe4f 	bl	889fc <_free_r>
   88d5e:	e01d      	b.n	88d9c <_realloc_r+0xe0>
   88d60:	f026 0607 	bic.w	r6, r6, #7
   88d64:	2e00      	cmp	r6, #0
   88d66:	4632      	mov	r2, r6
   88d68:	dabf      	bge.n	88cea <_realloc_r+0x2e>
   88d6a:	2500      	movs	r5, #0
   88d6c:	230c      	movs	r3, #12
   88d6e:	4628      	mov	r0, r5
   88d70:	f8c8 3000 	str.w	r3, [r8]
   88d74:	b003      	add	sp, #12
   88d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88d7a:	4625      	mov	r5, r4
   88d7c:	1bbb      	subs	r3, r7, r6
   88d7e:	2b0f      	cmp	r3, #15
   88d80:	f8d9 2004 	ldr.w	r2, [r9, #4]
   88d84:	d81d      	bhi.n	88dc2 <_realloc_r+0x106>
   88d86:	f002 0201 	and.w	r2, r2, #1
   88d8a:	433a      	orrs	r2, r7
   88d8c:	eb09 0107 	add.w	r1, r9, r7
   88d90:	f8c9 2004 	str.w	r2, [r9, #4]
   88d94:	684b      	ldr	r3, [r1, #4]
   88d96:	f043 0301 	orr.w	r3, r3, #1
   88d9a:	604b      	str	r3, [r1, #4]
   88d9c:	4640      	mov	r0, r8
   88d9e:	f7ff f9b9 	bl	88114 <__malloc_unlock>
   88da2:	4628      	mov	r0, r5
   88da4:	b003      	add	sp, #12
   88da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88daa:	f023 0303 	bic.w	r3, r3, #3
   88dae:	18f9      	adds	r1, r7, r3
   88db0:	4291      	cmp	r1, r2
   88db2:	db1d      	blt.n	88df0 <_realloc_r+0x134>
   88db4:	68c3      	ldr	r3, [r0, #12]
   88db6:	6882      	ldr	r2, [r0, #8]
   88db8:	4625      	mov	r5, r4
   88dba:	60d3      	str	r3, [r2, #12]
   88dbc:	460f      	mov	r7, r1
   88dbe:	609a      	str	r2, [r3, #8]
   88dc0:	e7dc      	b.n	88d7c <_realloc_r+0xc0>
   88dc2:	f002 0201 	and.w	r2, r2, #1
   88dc6:	eb09 0106 	add.w	r1, r9, r6
   88dca:	f043 0301 	orr.w	r3, r3, #1
   88dce:	4332      	orrs	r2, r6
   88dd0:	f8c9 2004 	str.w	r2, [r9, #4]
   88dd4:	444f      	add	r7, r9
   88dd6:	604b      	str	r3, [r1, #4]
   88dd8:	687b      	ldr	r3, [r7, #4]
   88dda:	3108      	adds	r1, #8
   88ddc:	f043 0301 	orr.w	r3, r3, #1
   88de0:	607b      	str	r3, [r7, #4]
   88de2:	4640      	mov	r0, r8
   88de4:	f7ff fe0a 	bl	889fc <_free_r>
   88de8:	e7d8      	b.n	88d9c <_realloc_r+0xe0>
   88dea:	4611      	mov	r1, r2
   88dec:	f7fe be2e 	b.w	87a4c <_malloc_r>
   88df0:	f01e 0f01 	tst.w	lr, #1
   88df4:	d18f      	bne.n	88d16 <_realloc_r+0x5a>
   88df6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   88dfa:	eba9 0a01 	sub.w	sl, r9, r1
   88dfe:	f8da 1004 	ldr.w	r1, [sl, #4]
   88e02:	f021 0103 	bic.w	r1, r1, #3
   88e06:	440b      	add	r3, r1
   88e08:	443b      	add	r3, r7
   88e0a:	4293      	cmp	r3, r2
   88e0c:	db26      	blt.n	88e5c <_realloc_r+0x1a0>
   88e0e:	4655      	mov	r5, sl
   88e10:	68c1      	ldr	r1, [r0, #12]
   88e12:	6880      	ldr	r0, [r0, #8]
   88e14:	1f3a      	subs	r2, r7, #4
   88e16:	60c1      	str	r1, [r0, #12]
   88e18:	6088      	str	r0, [r1, #8]
   88e1a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88e1e:	f8da 100c 	ldr.w	r1, [sl, #12]
   88e22:	2a24      	cmp	r2, #36	; 0x24
   88e24:	60c1      	str	r1, [r0, #12]
   88e26:	6088      	str	r0, [r1, #8]
   88e28:	d826      	bhi.n	88e78 <_realloc_r+0x1bc>
   88e2a:	2a13      	cmp	r2, #19
   88e2c:	f240 8081 	bls.w	88f32 <_realloc_r+0x276>
   88e30:	6821      	ldr	r1, [r4, #0]
   88e32:	2a1b      	cmp	r2, #27
   88e34:	f8ca 1008 	str.w	r1, [sl, #8]
   88e38:	6861      	ldr	r1, [r4, #4]
   88e3a:	f8ca 100c 	str.w	r1, [sl, #12]
   88e3e:	f200 80ad 	bhi.w	88f9c <_realloc_r+0x2e0>
   88e42:	f104 0008 	add.w	r0, r4, #8
   88e46:	f10a 0210 	add.w	r2, sl, #16
   88e4a:	e074      	b.n	88f36 <_realloc_r+0x27a>
   88e4c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   88e50:	eba9 0a03 	sub.w	sl, r9, r3
   88e54:	f8da 1004 	ldr.w	r1, [sl, #4]
   88e58:	f021 0103 	bic.w	r1, r1, #3
   88e5c:	187b      	adds	r3, r7, r1
   88e5e:	4293      	cmp	r3, r2
   88e60:	f6ff af59 	blt.w	88d16 <_realloc_r+0x5a>
   88e64:	4655      	mov	r5, sl
   88e66:	f8da 100c 	ldr.w	r1, [sl, #12]
   88e6a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88e6e:	1f3a      	subs	r2, r7, #4
   88e70:	2a24      	cmp	r2, #36	; 0x24
   88e72:	60c1      	str	r1, [r0, #12]
   88e74:	6088      	str	r0, [r1, #8]
   88e76:	d9d8      	bls.n	88e2a <_realloc_r+0x16e>
   88e78:	4621      	mov	r1, r4
   88e7a:	4628      	mov	r0, r5
   88e7c:	461f      	mov	r7, r3
   88e7e:	46d1      	mov	r9, sl
   88e80:	f7ff feb8 	bl	88bf4 <memmove>
   88e84:	e77a      	b.n	88d7c <_realloc_r+0xc0>
   88e86:	6841      	ldr	r1, [r0, #4]
   88e88:	f106 0010 	add.w	r0, r6, #16
   88e8c:	f021 0b03 	bic.w	fp, r1, #3
   88e90:	44bb      	add	fp, r7
   88e92:	4583      	cmp	fp, r0
   88e94:	da58      	bge.n	88f48 <_realloc_r+0x28c>
   88e96:	f01e 0f01 	tst.w	lr, #1
   88e9a:	f47f af3c 	bne.w	88d16 <_realloc_r+0x5a>
   88e9e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   88ea2:	eba9 0a01 	sub.w	sl, r9, r1
   88ea6:	f8da 1004 	ldr.w	r1, [sl, #4]
   88eaa:	f021 0103 	bic.w	r1, r1, #3
   88eae:	448b      	add	fp, r1
   88eb0:	4558      	cmp	r0, fp
   88eb2:	dcd3      	bgt.n	88e5c <_realloc_r+0x1a0>
   88eb4:	4655      	mov	r5, sl
   88eb6:	f8da 100c 	ldr.w	r1, [sl, #12]
   88eba:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88ebe:	1f3a      	subs	r2, r7, #4
   88ec0:	2a24      	cmp	r2, #36	; 0x24
   88ec2:	60c1      	str	r1, [r0, #12]
   88ec4:	6088      	str	r0, [r1, #8]
   88ec6:	f200 808d 	bhi.w	88fe4 <_realloc_r+0x328>
   88eca:	2a13      	cmp	r2, #19
   88ecc:	f240 8087 	bls.w	88fde <_realloc_r+0x322>
   88ed0:	6821      	ldr	r1, [r4, #0]
   88ed2:	2a1b      	cmp	r2, #27
   88ed4:	f8ca 1008 	str.w	r1, [sl, #8]
   88ed8:	6861      	ldr	r1, [r4, #4]
   88eda:	f8ca 100c 	str.w	r1, [sl, #12]
   88ede:	f200 8088 	bhi.w	88ff2 <_realloc_r+0x336>
   88ee2:	f104 0108 	add.w	r1, r4, #8
   88ee6:	f10a 0210 	add.w	r2, sl, #16
   88eea:	6808      	ldr	r0, [r1, #0]
   88eec:	6010      	str	r0, [r2, #0]
   88eee:	6848      	ldr	r0, [r1, #4]
   88ef0:	6050      	str	r0, [r2, #4]
   88ef2:	6889      	ldr	r1, [r1, #8]
   88ef4:	6091      	str	r1, [r2, #8]
   88ef6:	ebab 0206 	sub.w	r2, fp, r6
   88efa:	eb0a 0106 	add.w	r1, sl, r6
   88efe:	f042 0201 	orr.w	r2, r2, #1
   88f02:	6099      	str	r1, [r3, #8]
   88f04:	604a      	str	r2, [r1, #4]
   88f06:	f8da 3004 	ldr.w	r3, [sl, #4]
   88f0a:	4640      	mov	r0, r8
   88f0c:	f003 0301 	and.w	r3, r3, #1
   88f10:	431e      	orrs	r6, r3
   88f12:	f8ca 6004 	str.w	r6, [sl, #4]
   88f16:	f7ff f8fd 	bl	88114 <__malloc_unlock>
   88f1a:	e742      	b.n	88da2 <_realloc_r+0xe6>
   88f1c:	6823      	ldr	r3, [r4, #0]
   88f1e:	2a1b      	cmp	r2, #27
   88f20:	6003      	str	r3, [r0, #0]
   88f22:	6863      	ldr	r3, [r4, #4]
   88f24:	6043      	str	r3, [r0, #4]
   88f26:	d827      	bhi.n	88f78 <_realloc_r+0x2bc>
   88f28:	f100 0308 	add.w	r3, r0, #8
   88f2c:	f104 0208 	add.w	r2, r4, #8
   88f30:	e70b      	b.n	88d4a <_realloc_r+0x8e>
   88f32:	4620      	mov	r0, r4
   88f34:	462a      	mov	r2, r5
   88f36:	6801      	ldr	r1, [r0, #0]
   88f38:	461f      	mov	r7, r3
   88f3a:	6011      	str	r1, [r2, #0]
   88f3c:	6841      	ldr	r1, [r0, #4]
   88f3e:	46d1      	mov	r9, sl
   88f40:	6051      	str	r1, [r2, #4]
   88f42:	6883      	ldr	r3, [r0, #8]
   88f44:	6093      	str	r3, [r2, #8]
   88f46:	e719      	b.n	88d7c <_realloc_r+0xc0>
   88f48:	ebab 0b06 	sub.w	fp, fp, r6
   88f4c:	eb09 0106 	add.w	r1, r9, r6
   88f50:	f04b 0201 	orr.w	r2, fp, #1
   88f54:	6099      	str	r1, [r3, #8]
   88f56:	604a      	str	r2, [r1, #4]
   88f58:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88f5c:	4640      	mov	r0, r8
   88f5e:	f003 0301 	and.w	r3, r3, #1
   88f62:	431e      	orrs	r6, r3
   88f64:	f844 6c04 	str.w	r6, [r4, #-4]
   88f68:	f7ff f8d4 	bl	88114 <__malloc_unlock>
   88f6c:	4625      	mov	r5, r4
   88f6e:	e718      	b.n	88da2 <_realloc_r+0xe6>
   88f70:	4621      	mov	r1, r4
   88f72:	f7ff fe3f 	bl	88bf4 <memmove>
   88f76:	e6ee      	b.n	88d56 <_realloc_r+0x9a>
   88f78:	68a3      	ldr	r3, [r4, #8]
   88f7a:	2a24      	cmp	r2, #36	; 0x24
   88f7c:	6083      	str	r3, [r0, #8]
   88f7e:	68e3      	ldr	r3, [r4, #12]
   88f80:	60c3      	str	r3, [r0, #12]
   88f82:	d018      	beq.n	88fb6 <_realloc_r+0x2fa>
   88f84:	f100 0310 	add.w	r3, r0, #16
   88f88:	f104 0210 	add.w	r2, r4, #16
   88f8c:	e6dd      	b.n	88d4a <_realloc_r+0x8e>
   88f8e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   88f92:	4625      	mov	r5, r4
   88f94:	f023 0303 	bic.w	r3, r3, #3
   88f98:	441f      	add	r7, r3
   88f9a:	e6ef      	b.n	88d7c <_realloc_r+0xc0>
   88f9c:	68a1      	ldr	r1, [r4, #8]
   88f9e:	2a24      	cmp	r2, #36	; 0x24
   88fa0:	f8ca 1010 	str.w	r1, [sl, #16]
   88fa4:	68e1      	ldr	r1, [r4, #12]
   88fa6:	f8ca 1014 	str.w	r1, [sl, #20]
   88faa:	d00d      	beq.n	88fc8 <_realloc_r+0x30c>
   88fac:	f104 0010 	add.w	r0, r4, #16
   88fb0:	f10a 0218 	add.w	r2, sl, #24
   88fb4:	e7bf      	b.n	88f36 <_realloc_r+0x27a>
   88fb6:	6922      	ldr	r2, [r4, #16]
   88fb8:	f100 0318 	add.w	r3, r0, #24
   88fbc:	6102      	str	r2, [r0, #16]
   88fbe:	6961      	ldr	r1, [r4, #20]
   88fc0:	f104 0218 	add.w	r2, r4, #24
   88fc4:	6141      	str	r1, [r0, #20]
   88fc6:	e6c0      	b.n	88d4a <_realloc_r+0x8e>
   88fc8:	6922      	ldr	r2, [r4, #16]
   88fca:	f104 0018 	add.w	r0, r4, #24
   88fce:	f8ca 2018 	str.w	r2, [sl, #24]
   88fd2:	6961      	ldr	r1, [r4, #20]
   88fd4:	f10a 0220 	add.w	r2, sl, #32
   88fd8:	f8ca 101c 	str.w	r1, [sl, #28]
   88fdc:	e7ab      	b.n	88f36 <_realloc_r+0x27a>
   88fde:	4621      	mov	r1, r4
   88fe0:	462a      	mov	r2, r5
   88fe2:	e782      	b.n	88eea <_realloc_r+0x22e>
   88fe4:	4621      	mov	r1, r4
   88fe6:	4628      	mov	r0, r5
   88fe8:	9301      	str	r3, [sp, #4]
   88fea:	f7ff fe03 	bl	88bf4 <memmove>
   88fee:	9b01      	ldr	r3, [sp, #4]
   88ff0:	e781      	b.n	88ef6 <_realloc_r+0x23a>
   88ff2:	68a1      	ldr	r1, [r4, #8]
   88ff4:	2a24      	cmp	r2, #36	; 0x24
   88ff6:	f8ca 1010 	str.w	r1, [sl, #16]
   88ffa:	68e1      	ldr	r1, [r4, #12]
   88ffc:	f8ca 1014 	str.w	r1, [sl, #20]
   89000:	d006      	beq.n	89010 <_realloc_r+0x354>
   89002:	f104 0110 	add.w	r1, r4, #16
   89006:	f10a 0218 	add.w	r2, sl, #24
   8900a:	e76e      	b.n	88eea <_realloc_r+0x22e>
   8900c:	200705d4 	.word	0x200705d4
   89010:	6922      	ldr	r2, [r4, #16]
   89012:	f104 0118 	add.w	r1, r4, #24
   89016:	f8ca 2018 	str.w	r2, [sl, #24]
   8901a:	6960      	ldr	r0, [r4, #20]
   8901c:	f10a 0220 	add.w	r2, sl, #32
   89020:	f8ca 001c 	str.w	r0, [sl, #28]
   89024:	e761      	b.n	88eea <_realloc_r+0x22e>
   89026:	bf00      	nop

00089028 <__ascii_wctomb>:
   89028:	b119      	cbz	r1, 89032 <__ascii_wctomb+0xa>
   8902a:	2aff      	cmp	r2, #255	; 0xff
   8902c:	d803      	bhi.n	89036 <__ascii_wctomb+0xe>
   8902e:	700a      	strb	r2, [r1, #0]
   89030:	2101      	movs	r1, #1
   89032:	4608      	mov	r0, r1
   89034:	4770      	bx	lr
   89036:	238a      	movs	r3, #138	; 0x8a
   89038:	f04f 31ff 	mov.w	r1, #4294967295
   8903c:	6003      	str	r3, [r0, #0]
   8903e:	e7f8      	b.n	89032 <__ascii_wctomb+0xa>

00089040 <__gedf2>:
   89040:	f04f 3cff 	mov.w	ip, #4294967295
   89044:	e006      	b.n	89054 <__cmpdf2+0x4>
   89046:	bf00      	nop

00089048 <__ledf2>:
   89048:	f04f 0c01 	mov.w	ip, #1
   8904c:	e002      	b.n	89054 <__cmpdf2+0x4>
   8904e:	bf00      	nop

00089050 <__cmpdf2>:
   89050:	f04f 0c01 	mov.w	ip, #1
   89054:	f84d cd04 	str.w	ip, [sp, #-4]!
   89058:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8905c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89060:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89064:	bf18      	it	ne
   89066:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8906a:	d01b      	beq.n	890a4 <__cmpdf2+0x54>
   8906c:	b001      	add	sp, #4
   8906e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   89072:	bf0c      	ite	eq
   89074:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   89078:	ea91 0f03 	teqne	r1, r3
   8907c:	bf02      	ittt	eq
   8907e:	ea90 0f02 	teqeq	r0, r2
   89082:	2000      	moveq	r0, #0
   89084:	4770      	bxeq	lr
   89086:	f110 0f00 	cmn.w	r0, #0
   8908a:	ea91 0f03 	teq	r1, r3
   8908e:	bf58      	it	pl
   89090:	4299      	cmppl	r1, r3
   89092:	bf08      	it	eq
   89094:	4290      	cmpeq	r0, r2
   89096:	bf2c      	ite	cs
   89098:	17d8      	asrcs	r0, r3, #31
   8909a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8909e:	f040 0001 	orr.w	r0, r0, #1
   890a2:	4770      	bx	lr
   890a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   890a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   890ac:	d102      	bne.n	890b4 <__cmpdf2+0x64>
   890ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   890b2:	d107      	bne.n	890c4 <__cmpdf2+0x74>
   890b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   890b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   890bc:	d1d6      	bne.n	8906c <__cmpdf2+0x1c>
   890be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   890c2:	d0d3      	beq.n	8906c <__cmpdf2+0x1c>
   890c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   890c8:	4770      	bx	lr
   890ca:	bf00      	nop

000890cc <__aeabi_cdrcmple>:
   890cc:	4684      	mov	ip, r0
   890ce:	4610      	mov	r0, r2
   890d0:	4662      	mov	r2, ip
   890d2:	468c      	mov	ip, r1
   890d4:	4619      	mov	r1, r3
   890d6:	4663      	mov	r3, ip
   890d8:	e000      	b.n	890dc <__aeabi_cdcmpeq>
   890da:	bf00      	nop

000890dc <__aeabi_cdcmpeq>:
   890dc:	b501      	push	{r0, lr}
   890de:	f7ff ffb7 	bl	89050 <__cmpdf2>
   890e2:	2800      	cmp	r0, #0
   890e4:	bf48      	it	mi
   890e6:	f110 0f00 	cmnmi.w	r0, #0
   890ea:	bd01      	pop	{r0, pc}

000890ec <__aeabi_dcmpeq>:
   890ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   890f0:	f7ff fff4 	bl	890dc <__aeabi_cdcmpeq>
   890f4:	bf0c      	ite	eq
   890f6:	2001      	moveq	r0, #1
   890f8:	2000      	movne	r0, #0
   890fa:	f85d fb08 	ldr.w	pc, [sp], #8
   890fe:	bf00      	nop

00089100 <__aeabi_dcmplt>:
   89100:	f84d ed08 	str.w	lr, [sp, #-8]!
   89104:	f7ff ffea 	bl	890dc <__aeabi_cdcmpeq>
   89108:	bf34      	ite	cc
   8910a:	2001      	movcc	r0, #1
   8910c:	2000      	movcs	r0, #0
   8910e:	f85d fb08 	ldr.w	pc, [sp], #8
   89112:	bf00      	nop

00089114 <__aeabi_dcmple>:
   89114:	f84d ed08 	str.w	lr, [sp, #-8]!
   89118:	f7ff ffe0 	bl	890dc <__aeabi_cdcmpeq>
   8911c:	bf94      	ite	ls
   8911e:	2001      	movls	r0, #1
   89120:	2000      	movhi	r0, #0
   89122:	f85d fb08 	ldr.w	pc, [sp], #8
   89126:	bf00      	nop

00089128 <__aeabi_dcmpge>:
   89128:	f84d ed08 	str.w	lr, [sp, #-8]!
   8912c:	f7ff ffce 	bl	890cc <__aeabi_cdrcmple>
   89130:	bf94      	ite	ls
   89132:	2001      	movls	r0, #1
   89134:	2000      	movhi	r0, #0
   89136:	f85d fb08 	ldr.w	pc, [sp], #8
   8913a:	bf00      	nop

0008913c <__aeabi_dcmpgt>:
   8913c:	f84d ed08 	str.w	lr, [sp, #-8]!
   89140:	f7ff ffc4 	bl	890cc <__aeabi_cdrcmple>
   89144:	bf34      	ite	cc
   89146:	2001      	movcc	r0, #1
   89148:	2000      	movcs	r0, #0
   8914a:	f85d fb08 	ldr.w	pc, [sp], #8
   8914e:	bf00      	nop

00089150 <__aeabi_dcmpun>:
   89150:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89154:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89158:	d102      	bne.n	89160 <__aeabi_dcmpun+0x10>
   8915a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8915e:	d10a      	bne.n	89176 <__aeabi_dcmpun+0x26>
   89160:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89164:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89168:	d102      	bne.n	89170 <__aeabi_dcmpun+0x20>
   8916a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8916e:	d102      	bne.n	89176 <__aeabi_dcmpun+0x26>
   89170:	f04f 0000 	mov.w	r0, #0
   89174:	4770      	bx	lr
   89176:	f04f 0001 	mov.w	r0, #1
   8917a:	4770      	bx	lr

0008917c <__aeabi_d2iz>:
   8917c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   89180:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   89184:	d215      	bcs.n	891b2 <__aeabi_d2iz+0x36>
   89186:	d511      	bpl.n	891ac <__aeabi_d2iz+0x30>
   89188:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8918c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   89190:	d912      	bls.n	891b8 <__aeabi_d2iz+0x3c>
   89192:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   89196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8919a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8919e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   891a2:	fa23 f002 	lsr.w	r0, r3, r2
   891a6:	bf18      	it	ne
   891a8:	4240      	negne	r0, r0
   891aa:	4770      	bx	lr
   891ac:	f04f 0000 	mov.w	r0, #0
   891b0:	4770      	bx	lr
   891b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   891b6:	d105      	bne.n	891c4 <__aeabi_d2iz+0x48>
   891b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   891bc:	bf08      	it	eq
   891be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   891c2:	4770      	bx	lr
   891c4:	f04f 0000 	mov.w	r0, #0
   891c8:	4770      	bx	lr
   891ca:	bf00      	nop

000891cc <__aeabi_uldivmod>:
   891cc:	b953      	cbnz	r3, 891e4 <__aeabi_uldivmod+0x18>
   891ce:	b94a      	cbnz	r2, 891e4 <__aeabi_uldivmod+0x18>
   891d0:	2900      	cmp	r1, #0
   891d2:	bf08      	it	eq
   891d4:	2800      	cmpeq	r0, #0
   891d6:	bf1c      	itt	ne
   891d8:	f04f 31ff 	movne.w	r1, #4294967295
   891dc:	f04f 30ff 	movne.w	r0, #4294967295
   891e0:	f000 b97a 	b.w	894d8 <__aeabi_idiv0>
   891e4:	f1ad 0c08 	sub.w	ip, sp, #8
   891e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   891ec:	f000 f806 	bl	891fc <__udivmoddi4>
   891f0:	f8dd e004 	ldr.w	lr, [sp, #4]
   891f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   891f8:	b004      	add	sp, #16
   891fa:	4770      	bx	lr

000891fc <__udivmoddi4>:
   891fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89200:	468c      	mov	ip, r1
   89202:	460e      	mov	r6, r1
   89204:	4604      	mov	r4, r0
   89206:	9d08      	ldr	r5, [sp, #32]
   89208:	2b00      	cmp	r3, #0
   8920a:	d150      	bne.n	892ae <__udivmoddi4+0xb2>
   8920c:	428a      	cmp	r2, r1
   8920e:	4617      	mov	r7, r2
   89210:	d96c      	bls.n	892ec <__udivmoddi4+0xf0>
   89212:	fab2 fe82 	clz	lr, r2
   89216:	f1be 0f00 	cmp.w	lr, #0
   8921a:	d00b      	beq.n	89234 <__udivmoddi4+0x38>
   8921c:	f1ce 0c20 	rsb	ip, lr, #32
   89220:	fa01 f60e 	lsl.w	r6, r1, lr
   89224:	fa20 fc0c 	lsr.w	ip, r0, ip
   89228:	fa02 f70e 	lsl.w	r7, r2, lr
   8922c:	ea4c 0c06 	orr.w	ip, ip, r6
   89230:	fa00 f40e 	lsl.w	r4, r0, lr
   89234:	0c3a      	lsrs	r2, r7, #16
   89236:	fbbc f9f2 	udiv	r9, ip, r2
   8923a:	b2bb      	uxth	r3, r7
   8923c:	fb02 cc19 	mls	ip, r2, r9, ip
   89240:	fb09 fa03 	mul.w	sl, r9, r3
   89244:	ea4f 4814 	mov.w	r8, r4, lsr #16
   89248:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   8924c:	45b2      	cmp	sl, r6
   8924e:	d90a      	bls.n	89266 <__udivmoddi4+0x6a>
   89250:	19f6      	adds	r6, r6, r7
   89252:	f109 31ff 	add.w	r1, r9, #4294967295
   89256:	f080 8125 	bcs.w	894a4 <__udivmoddi4+0x2a8>
   8925a:	45b2      	cmp	sl, r6
   8925c:	f240 8122 	bls.w	894a4 <__udivmoddi4+0x2a8>
   89260:	f1a9 0902 	sub.w	r9, r9, #2
   89264:	443e      	add	r6, r7
   89266:	eba6 060a 	sub.w	r6, r6, sl
   8926a:	fbb6 f0f2 	udiv	r0, r6, r2
   8926e:	fb02 6610 	mls	r6, r2, r0, r6
   89272:	fb00 f303 	mul.w	r3, r0, r3
   89276:	b2a4      	uxth	r4, r4
   89278:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8927c:	42a3      	cmp	r3, r4
   8927e:	d909      	bls.n	89294 <__udivmoddi4+0x98>
   89280:	19e4      	adds	r4, r4, r7
   89282:	f100 32ff 	add.w	r2, r0, #4294967295
   89286:	f080 810b 	bcs.w	894a0 <__udivmoddi4+0x2a4>
   8928a:	42a3      	cmp	r3, r4
   8928c:	f240 8108 	bls.w	894a0 <__udivmoddi4+0x2a4>
   89290:	3802      	subs	r0, #2
   89292:	443c      	add	r4, r7
   89294:	2100      	movs	r1, #0
   89296:	1ae4      	subs	r4, r4, r3
   89298:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8929c:	2d00      	cmp	r5, #0
   8929e:	d062      	beq.n	89366 <__udivmoddi4+0x16a>
   892a0:	2300      	movs	r3, #0
   892a2:	fa24 f40e 	lsr.w	r4, r4, lr
   892a6:	602c      	str	r4, [r5, #0]
   892a8:	606b      	str	r3, [r5, #4]
   892aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   892ae:	428b      	cmp	r3, r1
   892b0:	d907      	bls.n	892c2 <__udivmoddi4+0xc6>
   892b2:	2d00      	cmp	r5, #0
   892b4:	d055      	beq.n	89362 <__udivmoddi4+0x166>
   892b6:	2100      	movs	r1, #0
   892b8:	e885 0041 	stmia.w	r5, {r0, r6}
   892bc:	4608      	mov	r0, r1
   892be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   892c2:	fab3 f183 	clz	r1, r3
   892c6:	2900      	cmp	r1, #0
   892c8:	f040 808f 	bne.w	893ea <__udivmoddi4+0x1ee>
   892cc:	42b3      	cmp	r3, r6
   892ce:	d302      	bcc.n	892d6 <__udivmoddi4+0xda>
   892d0:	4282      	cmp	r2, r0
   892d2:	f200 80fc 	bhi.w	894ce <__udivmoddi4+0x2d2>
   892d6:	1a84      	subs	r4, r0, r2
   892d8:	eb66 0603 	sbc.w	r6, r6, r3
   892dc:	2001      	movs	r0, #1
   892de:	46b4      	mov	ip, r6
   892e0:	2d00      	cmp	r5, #0
   892e2:	d040      	beq.n	89366 <__udivmoddi4+0x16a>
   892e4:	e885 1010 	stmia.w	r5, {r4, ip}
   892e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   892ec:	b912      	cbnz	r2, 892f4 <__udivmoddi4+0xf8>
   892ee:	2701      	movs	r7, #1
   892f0:	fbb7 f7f2 	udiv	r7, r7, r2
   892f4:	fab7 fe87 	clz	lr, r7
   892f8:	f1be 0f00 	cmp.w	lr, #0
   892fc:	d135      	bne.n	8936a <__udivmoddi4+0x16e>
   892fe:	2101      	movs	r1, #1
   89300:	1bf6      	subs	r6, r6, r7
   89302:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   89306:	fa1f f887 	uxth.w	r8, r7
   8930a:	fbb6 f2fc 	udiv	r2, r6, ip
   8930e:	fb0c 6612 	mls	r6, ip, r2, r6
   89312:	fb08 f002 	mul.w	r0, r8, r2
   89316:	0c23      	lsrs	r3, r4, #16
   89318:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   8931c:	42b0      	cmp	r0, r6
   8931e:	d907      	bls.n	89330 <__udivmoddi4+0x134>
   89320:	19f6      	adds	r6, r6, r7
   89322:	f102 33ff 	add.w	r3, r2, #4294967295
   89326:	d202      	bcs.n	8932e <__udivmoddi4+0x132>
   89328:	42b0      	cmp	r0, r6
   8932a:	f200 80d2 	bhi.w	894d2 <__udivmoddi4+0x2d6>
   8932e:	461a      	mov	r2, r3
   89330:	1a36      	subs	r6, r6, r0
   89332:	fbb6 f0fc 	udiv	r0, r6, ip
   89336:	fb0c 6610 	mls	r6, ip, r0, r6
   8933a:	fb08 f800 	mul.w	r8, r8, r0
   8933e:	b2a3      	uxth	r3, r4
   89340:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   89344:	45a0      	cmp	r8, r4
   89346:	d907      	bls.n	89358 <__udivmoddi4+0x15c>
   89348:	19e4      	adds	r4, r4, r7
   8934a:	f100 33ff 	add.w	r3, r0, #4294967295
   8934e:	d202      	bcs.n	89356 <__udivmoddi4+0x15a>
   89350:	45a0      	cmp	r8, r4
   89352:	f200 80b9 	bhi.w	894c8 <__udivmoddi4+0x2cc>
   89356:	4618      	mov	r0, r3
   89358:	eba4 0408 	sub.w	r4, r4, r8
   8935c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   89360:	e79c      	b.n	8929c <__udivmoddi4+0xa0>
   89362:	4629      	mov	r1, r5
   89364:	4628      	mov	r0, r5
   89366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8936a:	fa07 f70e 	lsl.w	r7, r7, lr
   8936e:	f1ce 0320 	rsb	r3, lr, #32
   89372:	fa26 f203 	lsr.w	r2, r6, r3
   89376:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8937a:	fbb2 f1fc 	udiv	r1, r2, ip
   8937e:	fa1f f887 	uxth.w	r8, r7
   89382:	fb0c 2211 	mls	r2, ip, r1, r2
   89386:	fa06 f60e 	lsl.w	r6, r6, lr
   8938a:	fa20 f303 	lsr.w	r3, r0, r3
   8938e:	fb01 f908 	mul.w	r9, r1, r8
   89392:	4333      	orrs	r3, r6
   89394:	0c1e      	lsrs	r6, r3, #16
   89396:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8939a:	45b1      	cmp	r9, r6
   8939c:	fa00 f40e 	lsl.w	r4, r0, lr
   893a0:	d909      	bls.n	893b6 <__udivmoddi4+0x1ba>
   893a2:	19f6      	adds	r6, r6, r7
   893a4:	f101 32ff 	add.w	r2, r1, #4294967295
   893a8:	f080 808c 	bcs.w	894c4 <__udivmoddi4+0x2c8>
   893ac:	45b1      	cmp	r9, r6
   893ae:	f240 8089 	bls.w	894c4 <__udivmoddi4+0x2c8>
   893b2:	3902      	subs	r1, #2
   893b4:	443e      	add	r6, r7
   893b6:	eba6 0609 	sub.w	r6, r6, r9
   893ba:	fbb6 f0fc 	udiv	r0, r6, ip
   893be:	fb0c 6210 	mls	r2, ip, r0, r6
   893c2:	fb00 f908 	mul.w	r9, r0, r8
   893c6:	b29e      	uxth	r6, r3
   893c8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   893cc:	45b1      	cmp	r9, r6
   893ce:	d907      	bls.n	893e0 <__udivmoddi4+0x1e4>
   893d0:	19f6      	adds	r6, r6, r7
   893d2:	f100 33ff 	add.w	r3, r0, #4294967295
   893d6:	d271      	bcs.n	894bc <__udivmoddi4+0x2c0>
   893d8:	45b1      	cmp	r9, r6
   893da:	d96f      	bls.n	894bc <__udivmoddi4+0x2c0>
   893dc:	3802      	subs	r0, #2
   893de:	443e      	add	r6, r7
   893e0:	eba6 0609 	sub.w	r6, r6, r9
   893e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   893e8:	e78f      	b.n	8930a <__udivmoddi4+0x10e>
   893ea:	f1c1 0720 	rsb	r7, r1, #32
   893ee:	fa22 f807 	lsr.w	r8, r2, r7
   893f2:	408b      	lsls	r3, r1
   893f4:	ea48 0303 	orr.w	r3, r8, r3
   893f8:	fa26 f407 	lsr.w	r4, r6, r7
   893fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   89400:	fbb4 f9fe 	udiv	r9, r4, lr
   89404:	fa1f fc83 	uxth.w	ip, r3
   89408:	fb0e 4419 	mls	r4, lr, r9, r4
   8940c:	408e      	lsls	r6, r1
   8940e:	fa20 f807 	lsr.w	r8, r0, r7
   89412:	fb09 fa0c 	mul.w	sl, r9, ip
   89416:	ea48 0806 	orr.w	r8, r8, r6
   8941a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8941e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   89422:	45a2      	cmp	sl, r4
   89424:	fa02 f201 	lsl.w	r2, r2, r1
   89428:	fa00 f601 	lsl.w	r6, r0, r1
   8942c:	d908      	bls.n	89440 <__udivmoddi4+0x244>
   8942e:	18e4      	adds	r4, r4, r3
   89430:	f109 30ff 	add.w	r0, r9, #4294967295
   89434:	d244      	bcs.n	894c0 <__udivmoddi4+0x2c4>
   89436:	45a2      	cmp	sl, r4
   89438:	d942      	bls.n	894c0 <__udivmoddi4+0x2c4>
   8943a:	f1a9 0902 	sub.w	r9, r9, #2
   8943e:	441c      	add	r4, r3
   89440:	eba4 040a 	sub.w	r4, r4, sl
   89444:	fbb4 f0fe 	udiv	r0, r4, lr
   89448:	fb0e 4410 	mls	r4, lr, r0, r4
   8944c:	fb00 fc0c 	mul.w	ip, r0, ip
   89450:	fa1f f888 	uxth.w	r8, r8
   89454:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   89458:	45a4      	cmp	ip, r4
   8945a:	d907      	bls.n	8946c <__udivmoddi4+0x270>
   8945c:	18e4      	adds	r4, r4, r3
   8945e:	f100 3eff 	add.w	lr, r0, #4294967295
   89462:	d229      	bcs.n	894b8 <__udivmoddi4+0x2bc>
   89464:	45a4      	cmp	ip, r4
   89466:	d927      	bls.n	894b8 <__udivmoddi4+0x2bc>
   89468:	3802      	subs	r0, #2
   8946a:	441c      	add	r4, r3
   8946c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89470:	fba0 8902 	umull	r8, r9, r0, r2
   89474:	eba4 0c0c 	sub.w	ip, r4, ip
   89478:	45cc      	cmp	ip, r9
   8947a:	46c2      	mov	sl, r8
   8947c:	46ce      	mov	lr, r9
   8947e:	d315      	bcc.n	894ac <__udivmoddi4+0x2b0>
   89480:	d012      	beq.n	894a8 <__udivmoddi4+0x2ac>
   89482:	b155      	cbz	r5, 8949a <__udivmoddi4+0x29e>
   89484:	ebb6 030a 	subs.w	r3, r6, sl
   89488:	eb6c 060e 	sbc.w	r6, ip, lr
   8948c:	fa06 f707 	lsl.w	r7, r6, r7
   89490:	40cb      	lsrs	r3, r1
   89492:	431f      	orrs	r7, r3
   89494:	40ce      	lsrs	r6, r1
   89496:	602f      	str	r7, [r5, #0]
   89498:	606e      	str	r6, [r5, #4]
   8949a:	2100      	movs	r1, #0
   8949c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   894a0:	4610      	mov	r0, r2
   894a2:	e6f7      	b.n	89294 <__udivmoddi4+0x98>
   894a4:	4689      	mov	r9, r1
   894a6:	e6de      	b.n	89266 <__udivmoddi4+0x6a>
   894a8:	4546      	cmp	r6, r8
   894aa:	d2ea      	bcs.n	89482 <__udivmoddi4+0x286>
   894ac:	ebb8 0a02 	subs.w	sl, r8, r2
   894b0:	eb69 0e03 	sbc.w	lr, r9, r3
   894b4:	3801      	subs	r0, #1
   894b6:	e7e4      	b.n	89482 <__udivmoddi4+0x286>
   894b8:	4670      	mov	r0, lr
   894ba:	e7d7      	b.n	8946c <__udivmoddi4+0x270>
   894bc:	4618      	mov	r0, r3
   894be:	e78f      	b.n	893e0 <__udivmoddi4+0x1e4>
   894c0:	4681      	mov	r9, r0
   894c2:	e7bd      	b.n	89440 <__udivmoddi4+0x244>
   894c4:	4611      	mov	r1, r2
   894c6:	e776      	b.n	893b6 <__udivmoddi4+0x1ba>
   894c8:	3802      	subs	r0, #2
   894ca:	443c      	add	r4, r7
   894cc:	e744      	b.n	89358 <__udivmoddi4+0x15c>
   894ce:	4608      	mov	r0, r1
   894d0:	e706      	b.n	892e0 <__udivmoddi4+0xe4>
   894d2:	3a02      	subs	r2, #2
   894d4:	443e      	add	r6, r7
   894d6:	e72b      	b.n	89330 <__udivmoddi4+0x134>

000894d8 <__aeabi_idiv0>:
   894d8:	4770      	bx	lr
   894da:	bf00      	nop
   894dc:	00000001 	.word	0x00000001
   894e0:	00000002 	.word	0x00000002
   894e4:	00000004 	.word	0x00000004
   894e8:	00000008 	.word	0x00000008
   894ec:	00000010 	.word	0x00000010
   894f0:	00000020 	.word	0x00000020
   894f4:	00000040 	.word	0x00000040
   894f8:	00000080 	.word	0x00000080
   894fc:	00000100 	.word	0x00000100
   89500:	00000200 	.word	0x00000200
   89504:	00000400 	.word	0x00000400
   89508:	000f4240 	.word	0x000f4240
   8950c:	000000c0 	.word	0x000000c0
	...
   89518:	69442020 	.word	0x69442020
   8951c:	74636572 	.word	0x74636572
   89520:	3a6e6f69 	.word	0x3a6e6f69
   89524:	2e332520 	.word	0x2e332520
   89528:	20206631 	.word	0x20206631
   8952c:	00000000 	.word	0x00000000
   89530:	696c6163 	.word	0x696c6163
   89534:	74617262 	.word	0x74617262
   89538:	6f632065 	.word	0x6f632065
   8953c:	7361706d 	.word	0x7361706d
   89540:	00000073 	.word	0x00000073
   89544:	69442020 	.word	0x69442020
   89548:	74636572 	.word	0x74636572
   8954c:	3a6e6f69 	.word	0x3a6e6f69
   89550:	64312520 	.word	0x64312520
   89554:	00002020 	.word	0x00002020
   89558:	74756873 	.word	0x74756873
   8955c:	676e6974 	.word	0x676e6974
   89560:	776f6420 	.word	0x776f6420
   89564:	2e2e2e6e 	.word	0x2e2e2e6e
   89568:	00000000 	.word	0x00000000
   8956c:	666e6f63 	.word	0x666e6f63
   89570:	206d7269 	.word	0x206d7269
   89574:	74756873 	.word	0x74756873
   89578:	6e776f64 	.word	0x6e776f64
   8957c:	0000003f 	.word	0x0000003f
   89580:	20202020 	.word	0x20202020
   89584:	534f6f6e 	.word	0x534f6f6e
   89588:	454e4f20 	.word	0x454e4f20
   8958c:	00000000 	.word	0x00000000
   89590:	74614d20 	.word	0x74614d20
   89594:	00006863 	.word	0x00006863
   89598:	6e655320 	.word	0x6e655320
   8959c:	73726f73 	.word	0x73726f73
   895a0:	00000000 	.word	0x00000000
   895a4:	74655320 	.word	0x74655320
   895a8:	676e6974 	.word	0x676e6974
   895ac:	00000073 	.word	0x00000073
   895b0:	00089580 	.word	0x00089580
   895b4:	00089590 	.word	0x00089590
   895b8:	00089598 	.word	0x00089598
   895bc:	000895a4 	.word	0x000895a4
   895c0:	6c614220 	.word	0x6c614220
   895c4:	0000006c 	.word	0x0000006c
   895c8:	6d6f4320 	.word	0x6d6f4320
   895cc:	73736170 	.word	0x73736170
   895d0:	00000000 	.word	0x00000000
   895d4:	6e694c20 	.word	0x6e694c20
   895d8:	00000065 	.word	0x00000065
   895dc:	00000020 	.word	0x00000020
   895e0:	000895c0 	.word	0x000895c0
   895e4:	000895c8 	.word	0x000895c8
   895e8:	000895d4 	.word	0x000895d4
   895ec:	000895dc 	.word	0x000895dc
   895f0:	000895dc 	.word	0x000895dc
   895f4:	000895dc 	.word	0x000895dc
   895f8:	000895dc 	.word	0x000895dc
   895fc:	000895dc 	.word	0x000895dc
   89600:	0000003e 	.word	0x0000003e
   89604:	25753325 	.word	0x25753325
   89608:	00000025 	.word	0x00000025
   8960c:	75322520 	.word	0x75322520
   89610:	00002525 	.word	0x00002525
   89614:	31252020 	.word	0x31252020
   89618:	00252575 	.word	0x00252575
   8961c:	746f6f62 	.word	0x746f6f62
   89620:	20676e69 	.word	0x20676e69
   89624:	534f6f6e 	.word	0x534f6f6e
   89628:	00202020 	.word	0x00202020
   8962c:	0000002e 	.word	0x0000002e

00089630 <_global_impure_ptr>:
   89630:	200701a8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   89640:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   89650:	46454443 00000000 33323130 37363534     CDEF....01234567
   89660:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   89670:	0000296c 00000030                       l)..0...

00089678 <blanks.7223>:
   89678:	20202020 20202020 20202020 20202020                     

00089688 <zeroes.7224>:
   89688:	30303030 30303030 30303030 30303030     0000000000000000
   89698:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

000896a8 <__mprec_bigtens>:
   896a8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   896b8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   896c8:	7f73bf3c 75154fdd                       <.s..O.u

000896d0 <__mprec_tens>:
   896d0:	00000000 3ff00000 00000000 40240000     .......?......$@
   896e0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   896f0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   89700:	00000000 412e8480 00000000 416312d0     .......A......cA
   89710:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   89720:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   89730:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   89740:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   89750:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   89760:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   89770:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   89780:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   89790:	79d99db4 44ea7843                       ...yCx.D

00089798 <p05.6055>:
   89798:	00000005 00000019 0000007d 00000043     ........}...C...
   897a8:	49534f50 00000058 0000002e              POSIX.......

000897b4 <_ctype_>:
   897b4:	20202000 20202020 28282020 20282828     .         ((((( 
   897c4:	20202020 20202020 20202020 20202020                     
   897d4:	10108820 10101010 10101010 10101010      ...............
   897e4:	04040410 04040404 10040404 10101010     ................
   897f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   89804:	01010101 01010101 01010101 10101010     ................
   89814:	42421010 42424242 02020202 02020202     ..BBBBBB........
   89824:	02020202 02020202 02020202 10101010     ................
   89834:	00000020 00000000 00000000 00000000      ...............
	...

000898b8 <_init>:
   898b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   898ba:	bf00      	nop
   898bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   898be:	bc08      	pop	{r3}
   898c0:	469e      	mov	lr, r3
   898c2:	4770      	bx	lr

000898c4 <__init_array_start>:
   898c4:	00086a65 	.word	0x00086a65

000898c8 <__frame_dummy_init_array_entry>:
   898c8:	00080119                                ....

000898cc <_fini>:
   898cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   898ce:	bf00      	nop
   898d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   898d2:	bc08      	pop	{r3}
   898d4:	469e      	mov	lr, r3
   898d6:	4770      	bx	lr

000898d8 <__fini_array_start>:
   898d8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007019c 	.word	0x2007019c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <print_menu>:
2007018c:	00000101                                         .

2007018d <allow_leds>:
2007018d:	02000001                                         ...

20070190 <menu_info>:
20070190:	04020202 03010101 01010101              ............

2007019c <SystemCoreClock>:
2007019c:	003d0900                                ..=.

200701a0 <update_dots>:
200701a0:	00000001                                ....

200701a4 <_impure_ptr>:
200701a4:	200701a8                                ... 

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	20070fcc                                ... 

200705d4 <__malloc_av_>:
	...
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 

200709dc <__malloc_sbrk_base>:
200709dc:	ffffffff                                ....

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__global_locale>:
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00000043 00000000 00000000 00000000     C...............
	...
20070ac4:	00089029 00088bc9 00000000 000897b4     )...............
20070ad4:	000897b0 00089654 00089654 00089654     ....T...T...T...
20070ae4:	00089654 00089654 00089654 00089654     T...T...T...T...
20070af4:	00089654 00089654 ffffffff ffffffff     T...T...........
20070b04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
