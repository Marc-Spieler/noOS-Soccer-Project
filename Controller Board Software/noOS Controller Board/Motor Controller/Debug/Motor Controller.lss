
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008674  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00088674  00088674  00018674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b50  20070000  0008867c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000514  20070b50  000891cc  00020b50  2**2
                  ALLOC
  4 .stack        00002004  20071064  000896e0  00020b50  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b79  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015a3f  00000000  00000000  00020bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e44  00000000  00000000  00036611  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006a62  00000000  00000000  00039455  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000bc8  00000000  00000000  0003feb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b30  00000000  00000000  00040a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006c02  00000000  00000000  000415af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fd36  00000000  00000000  000481b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00067e83  00000000  00000000  00057ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003e84  00000000  00000000  000bfd6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	68 30 07 20 05 2d 08 00 fd 2c 08 00 fd 2c 08 00     h0. .-...,...,..
   80010:	fd 2c 08 00 fd 2c 08 00 fd 2c 08 00 00 00 00 00     .,...,...,......
	...
   8002c:	fd 2c 08 00 fd 2c 08 00 00 00 00 00 fd 2c 08 00     .,...,.......,..
   8003c:	d5 1d 08 00 fd 2c 08 00 fd 2c 08 00 fd 2c 08 00     .....,...,...,..
   8004c:	fd 2c 08 00 fd 2c 08 00 fd 2c 08 00 fd 2c 08 00     .,...,...,...,..
   8005c:	fd 2c 08 00 fd 2c 08 00 fd 2c 08 00 00 00 00 00     .,...,...,......
   8006c:	fd 2c 08 00 fd 2c 08 00 fd 2c 08 00 fd 2c 08 00     .,...,...,...,..
	...
   80084:	fd 2c 08 00 fd 2c 08 00 fd 2c 08 00 fd 2c 08 00     .,...,...,...,..
   80094:	fd 2c 08 00 1d 0b 08 00 fd 2c 08 00 fd 2c 08 00     .,.......,...,..
   800a4:	00 00 00 00 fd 2c 08 00 fd 2c 08 00 fd 2c 08 00     .....,...,...,..
   800b4:	fd 2c 08 00 fd 2c 08 00 fd 2c 08 00 fd 2c 08 00     .,...,...,...,..
   800c4:	fd 2c 08 00 fd 2c 08 00 fd 2c 08 00 fd 2c 08 00     .,...,...,...,..
   800d4:	fd 2c 08 00 fd 2c 08 00 75 07 08 00 fd 2c 08 00     .,...,..u....,..
   800e4:	fd 2c 08 00 fd 2c 08 00 fd 2c 08 00 fd 2c 08 00     .,...,...,...,..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b50 	.word	0x20070b50
   80110:	00000000 	.word	0x00000000
   80114:	0008867c 	.word	0x0008867c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008867c 	.word	0x0008867c
   80154:	20070b54 	.word	0x20070b54
   80158:	0008867c 	.word	0x0008867c
   8015c:	00000000 	.word	0x00000000

00080160 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   80160:	b580      	push	{r7, lr}
   80162:	b082      	sub	sp, #8
   80164:	af00      	add	r7, sp, #0
   80166:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   80168:	6878      	ldr	r0, [r7, #4]
   8016a:	4b04      	ldr	r3, [pc, #16]	; (8017c <usart_spi_enable+0x1c>)
   8016c:	4798      	blx	r3
	usart_enable_rx(p_usart);
   8016e:	6878      	ldr	r0, [r7, #4]
   80170:	4b03      	ldr	r3, [pc, #12]	; (80180 <usart_spi_enable+0x20>)
   80172:	4798      	blx	r3
}
   80174:	bf00      	nop
   80176:	3708      	adds	r7, #8
   80178:	46bd      	mov	sp, r7
   8017a:	bd80      	pop	{r7, pc}
   8017c:	000803d1 	.word	0x000803d1
   80180:	00080419 	.word	0x00080419

00080184 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   80184:	b580      	push	{r7, lr}
   80186:	b082      	sub	sp, #8
   80188:	af00      	add	r7, sp, #0
   8018a:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   8018c:	6878      	ldr	r0, [r7, #4]
   8018e:	4b04      	ldr	r3, [pc, #16]	; (801a0 <usart_spi_disable+0x1c>)
   80190:	4798      	blx	r3
	usart_disable_rx(p_usart);
   80192:	6878      	ldr	r0, [r7, #4]
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <usart_spi_disable+0x20>)
   80196:	4798      	blx	r3
}
   80198:	bf00      	nop
   8019a:	3708      	adds	r7, #8
   8019c:	46bd      	mov	sp, r7
   8019e:	bd80      	pop	{r7, pc}
   801a0:	000803e9 	.word	0x000803e9
   801a4:	00080431 	.word	0x00080431

000801a8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801a8:	b480      	push	{r7}
   801aa:	b085      	sub	sp, #20
   801ac:	af00      	add	r7, sp, #0
   801ae:	60f8      	str	r0, [r7, #12]
   801b0:	60b9      	str	r1, [r7, #8]
   801b2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801b4:	68bb      	ldr	r3, [r7, #8]
   801b6:	2b00      	cmp	r3, #0
   801b8:	d007      	beq.n	801ca <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   801ba:	68bb      	ldr	r3, [r7, #8]
   801bc:	681a      	ldr	r2, [r3, #0]
   801be:	68fb      	ldr	r3, [r7, #12]
   801c0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   801c2:	68bb      	ldr	r3, [r7, #8]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	68fb      	ldr	r3, [r7, #12]
   801c8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   801ca:	687b      	ldr	r3, [r7, #4]
   801cc:	2b00      	cmp	r3, #0
   801ce:	d007      	beq.n	801e0 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	681a      	ldr	r2, [r3, #0]
   801d4:	68fb      	ldr	r3, [r7, #12]
   801d6:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   801d8:	687b      	ldr	r3, [r7, #4]
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	68fb      	ldr	r3, [r7, #12]
   801de:	61da      	str	r2, [r3, #28]
	}
}
   801e0:	bf00      	nop
   801e2:	3714      	adds	r7, #20
   801e4:	46bd      	mov	sp, r7
   801e6:	bc80      	pop	{r7}
   801e8:	4770      	bx	lr

000801ea <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   801ea:	b480      	push	{r7}
   801ec:	b083      	sub	sp, #12
   801ee:	af00      	add	r7, sp, #0
   801f0:	6078      	str	r0, [r7, #4]
   801f2:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   801f4:	683a      	ldr	r2, [r7, #0]
   801f6:	f240 1301 	movw	r3, #257	; 0x101
   801fa:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   801fc:	687a      	ldr	r2, [r7, #4]
   801fe:	6213      	str	r3, [r2, #32]
}
   80200:	bf00      	nop
   80202:	370c      	adds	r7, #12
   80204:	46bd      	mov	sp, r7
   80206:	bc80      	pop	{r7}
   80208:	4770      	bx	lr

0008020a <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8020a:	b480      	push	{r7}
   8020c:	b083      	sub	sp, #12
   8020e:	af00      	add	r7, sp, #0
   80210:	6078      	str	r0, [r7, #4]
   80212:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   80214:	683a      	ldr	r2, [r7, #0]
   80216:	f240 2302 	movw	r3, #514	; 0x202
   8021a:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8021c:	687a      	ldr	r2, [r7, #4]
   8021e:	6213      	str	r3, [r2, #32]
}
   80220:	bf00      	nop
   80222:	370c      	adds	r7, #12
   80224:	46bd      	mov	sp, r7
   80226:	bc80      	pop	{r7}
   80228:	4770      	bx	lr

0008022a <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8022a:	b480      	push	{r7}
   8022c:	b087      	sub	sp, #28
   8022e:	af00      	add	r7, sp, #0
   80230:	60f8      	str	r0, [r7, #12]
   80232:	60b9      	str	r1, [r7, #8]
   80234:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   80236:	68bb      	ldr	r3, [r7, #8]
   80238:	085a      	lsrs	r2, r3, #1
   8023a:	687b      	ldr	r3, [r7, #4]
   8023c:	441a      	add	r2, r3
   8023e:	68bb      	ldr	r3, [r7, #8]
   80240:	fbb2 f3f3 	udiv	r3, r2, r3
   80244:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   80246:	697b      	ldr	r3, [r7, #20]
   80248:	2b03      	cmp	r3, #3
   8024a:	d903      	bls.n	80254 <usart_set_spi_master_baudrate+0x2a>
   8024c:	697b      	ldr	r3, [r7, #20]
   8024e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   80252:	d301      	bcc.n	80258 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   80254:	2301      	movs	r3, #1
   80256:	e003      	b.n	80260 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   80258:	68fb      	ldr	r3, [r7, #12]
   8025a:	697a      	ldr	r2, [r7, #20]
   8025c:	621a      	str	r2, [r3, #32]

	return 0;
   8025e:	2300      	movs	r3, #0
}
   80260:	4618      	mov	r0, r3
   80262:	371c      	adds	r7, #28
   80264:	46bd      	mov	sp, r7
   80266:	bc80      	pop	{r7}
   80268:	4770      	bx	lr
	...

0008026c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8026c:	b580      	push	{r7, lr}
   8026e:	b082      	sub	sp, #8
   80270:	af00      	add	r7, sp, #0
   80272:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   80274:	6878      	ldr	r0, [r7, #4]
   80276:	4b0d      	ldr	r3, [pc, #52]	; (802ac <usart_reset+0x40>)
   80278:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8027a:	687b      	ldr	r3, [r7, #4]
   8027c:	2200      	movs	r2, #0
   8027e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   80280:	687b      	ldr	r3, [r7, #4]
   80282:	2200      	movs	r2, #0
   80284:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80286:	687b      	ldr	r3, [r7, #4]
   80288:	2200      	movs	r2, #0
   8028a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8028c:	6878      	ldr	r0, [r7, #4]
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <usart_reset+0x44>)
   80290:	4798      	blx	r3
	usart_reset_rx(p_usart);
   80292:	6878      	ldr	r0, [r7, #4]
   80294:	4b07      	ldr	r3, [pc, #28]	; (802b4 <usart_reset+0x48>)
   80296:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   80298:	6878      	ldr	r0, [r7, #4]
   8029a:	4b07      	ldr	r3, [pc, #28]	; (802b8 <usart_reset+0x4c>)
   8029c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8029e:	6878      	ldr	r0, [r7, #4]
   802a0:	4b06      	ldr	r3, [pc, #24]	; (802bc <usart_reset+0x50>)
   802a2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   802a4:	bf00      	nop
   802a6:	3708      	adds	r7, #8
   802a8:	46bd      	mov	sp, r7
   802aa:	bd80      	pop	{r7, pc}
   802ac:	000804c9 	.word	0x000804c9
   802b0:	00080401 	.word	0x00080401
   802b4:	00080449 	.word	0x00080449
   802b8:	00080461 	.word	0x00080461
   802bc:	0008047b 	.word	0x0008047b

000802c0 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   802c0:	b580      	push	{r7, lr}
   802c2:	b084      	sub	sp, #16
   802c4:	af00      	add	r7, sp, #0
   802c6:	60f8      	str	r0, [r7, #12]
   802c8:	60b9      	str	r1, [r7, #8]
   802ca:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   802cc:	68f8      	ldr	r0, [r7, #12]
   802ce:	4b3d      	ldr	r3, [pc, #244]	; (803c4 <usart_init_spi_master+0x104>)
   802d0:	4798      	blx	r3

	ul_reg_val = 0;
   802d2:	4b3d      	ldr	r3, [pc, #244]	; (803c8 <usart_init_spi_master+0x108>)
   802d4:	2200      	movs	r2, #0
   802d6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   802d8:	68bb      	ldr	r3, [r7, #8]
   802da:	2b00      	cmp	r3, #0
   802dc:	d00d      	beq.n	802fa <usart_init_spi_master+0x3a>
   802de:	68bb      	ldr	r3, [r7, #8]
   802e0:	689b      	ldr	r3, [r3, #8]
   802e2:	2b03      	cmp	r3, #3
   802e4:	d809      	bhi.n	802fa <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   802e6:	68bb      	ldr	r3, [r7, #8]
   802e8:	681b      	ldr	r3, [r3, #0]
   802ea:	687a      	ldr	r2, [r7, #4]
   802ec:	4619      	mov	r1, r3
   802ee:	68f8      	ldr	r0, [r7, #12]
   802f0:	4b36      	ldr	r3, [pc, #216]	; (803cc <usart_init_spi_master+0x10c>)
   802f2:	4798      	blx	r3
   802f4:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   802f6:	2b00      	cmp	r3, #0
   802f8:	d001      	beq.n	802fe <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   802fa:	2301      	movs	r3, #1
   802fc:	e05d      	b.n	803ba <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   802fe:	68bb      	ldr	r3, [r7, #8]
   80300:	685a      	ldr	r2, [r3, #4]
   80302:	4b31      	ldr	r3, [pc, #196]	; (803c8 <usart_init_spi_master+0x108>)
   80304:	681b      	ldr	r3, [r3, #0]
   80306:	4313      	orrs	r3, r2
   80308:	4a2f      	ldr	r2, [pc, #188]	; (803c8 <usart_init_spi_master+0x108>)
   8030a:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   8030c:	68bb      	ldr	r3, [r7, #8]
   8030e:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   80310:	4b2d      	ldr	r3, [pc, #180]	; (803c8 <usart_init_spi_master+0x108>)
   80312:	681b      	ldr	r3, [r3, #0]
   80314:	4313      	orrs	r3, r2
   80316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   8031a:	f043 030e 	orr.w	r3, r3, #14
   8031e:	4a2a      	ldr	r2, [pc, #168]	; (803c8 <usart_init_spi_master+0x108>)
   80320:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   80322:	68bb      	ldr	r3, [r7, #8]
   80324:	689b      	ldr	r3, [r3, #8]
   80326:	2b03      	cmp	r3, #3
   80328:	d83e      	bhi.n	803a8 <usart_init_spi_master+0xe8>
   8032a:	a201      	add	r2, pc, #4	; (adr r2, 80330 <usart_init_spi_master+0x70>)
   8032c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80330:	00080341 	.word	0x00080341
   80334:	0008035b 	.word	0x0008035b
   80338:	00080375 	.word	0x00080375
   8033c:	0008038f 	.word	0x0008038f
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   80340:	4b21      	ldr	r3, [pc, #132]	; (803c8 <usart_init_spi_master+0x108>)
   80342:	681b      	ldr	r3, [r3, #0]
   80344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80348:	4a1f      	ldr	r2, [pc, #124]	; (803c8 <usart_init_spi_master+0x108>)
   8034a:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8034c:	4b1e      	ldr	r3, [pc, #120]	; (803c8 <usart_init_spi_master+0x108>)
   8034e:	681b      	ldr	r3, [r3, #0]
   80350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80354:	4a1c      	ldr	r2, [pc, #112]	; (803c8 <usart_init_spi_master+0x108>)
   80356:	6013      	str	r3, [r2, #0]
		break;
   80358:	e027      	b.n	803aa <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8035a:	4b1b      	ldr	r3, [pc, #108]	; (803c8 <usart_init_spi_master+0x108>)
   8035c:	681b      	ldr	r3, [r3, #0]
   8035e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80362:	4a19      	ldr	r2, [pc, #100]	; (803c8 <usart_init_spi_master+0x108>)
   80364:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   80366:	4b18      	ldr	r3, [pc, #96]	; (803c8 <usart_init_spi_master+0x108>)
   80368:	681b      	ldr	r3, [r3, #0]
   8036a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8036e:	4a16      	ldr	r2, [pc, #88]	; (803c8 <usart_init_spi_master+0x108>)
   80370:	6013      	str	r3, [r2, #0]
		break;
   80372:	e01a      	b.n	803aa <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   80374:	4b14      	ldr	r3, [pc, #80]	; (803c8 <usart_init_spi_master+0x108>)
   80376:	681b      	ldr	r3, [r3, #0]
   80378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8037c:	4a12      	ldr	r2, [pc, #72]	; (803c8 <usart_init_spi_master+0x108>)
   8037e:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   80380:	4b11      	ldr	r3, [pc, #68]	; (803c8 <usart_init_spi_master+0x108>)
   80382:	681b      	ldr	r3, [r3, #0]
   80384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80388:	4a0f      	ldr	r2, [pc, #60]	; (803c8 <usart_init_spi_master+0x108>)
   8038a:	6013      	str	r3, [r2, #0]
		break;
   8038c:	e00d      	b.n	803aa <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8038e:	4b0e      	ldr	r3, [pc, #56]	; (803c8 <usart_init_spi_master+0x108>)
   80390:	681b      	ldr	r3, [r3, #0]
   80392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80396:	4a0c      	ldr	r2, [pc, #48]	; (803c8 <usart_init_spi_master+0x108>)
   80398:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8039a:	4b0b      	ldr	r3, [pc, #44]	; (803c8 <usart_init_spi_master+0x108>)
   8039c:	681b      	ldr	r3, [r3, #0]
   8039e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   803a2:	4a09      	ldr	r2, [pc, #36]	; (803c8 <usart_init_spi_master+0x108>)
   803a4:	6013      	str	r3, [r2, #0]
		break;
   803a6:	e000      	b.n	803aa <usart_init_spi_master+0xea>

	default:
		break;
   803a8:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   803aa:	68fb      	ldr	r3, [r7, #12]
   803ac:	685a      	ldr	r2, [r3, #4]
   803ae:	4b06      	ldr	r3, [pc, #24]	; (803c8 <usart_init_spi_master+0x108>)
   803b0:	681b      	ldr	r3, [r3, #0]
   803b2:	431a      	orrs	r2, r3
   803b4:	68fb      	ldr	r3, [r7, #12]
   803b6:	605a      	str	r2, [r3, #4]

	return 0;
   803b8:	2300      	movs	r3, #0
}
   803ba:	4618      	mov	r0, r3
   803bc:	3710      	adds	r7, #16
   803be:	46bd      	mov	sp, r7
   803c0:	bd80      	pop	{r7, pc}
   803c2:	bf00      	nop
   803c4:	0008026d 	.word	0x0008026d
   803c8:	20070b6c 	.word	0x20070b6c
   803cc:	0008022b 	.word	0x0008022b

000803d0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   803d0:	b480      	push	{r7}
   803d2:	b083      	sub	sp, #12
   803d4:	af00      	add	r7, sp, #0
   803d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   803d8:	687b      	ldr	r3, [r7, #4]
   803da:	2240      	movs	r2, #64	; 0x40
   803dc:	601a      	str	r2, [r3, #0]
}
   803de:	bf00      	nop
   803e0:	370c      	adds	r7, #12
   803e2:	46bd      	mov	sp, r7
   803e4:	bc80      	pop	{r7}
   803e6:	4770      	bx	lr

000803e8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   803e8:	b480      	push	{r7}
   803ea:	b083      	sub	sp, #12
   803ec:	af00      	add	r7, sp, #0
   803ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   803f0:	687b      	ldr	r3, [r7, #4]
   803f2:	2280      	movs	r2, #128	; 0x80
   803f4:	601a      	str	r2, [r3, #0]
}
   803f6:	bf00      	nop
   803f8:	370c      	adds	r7, #12
   803fa:	46bd      	mov	sp, r7
   803fc:	bc80      	pop	{r7}
   803fe:	4770      	bx	lr

00080400 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   80400:	b480      	push	{r7}
   80402:	b083      	sub	sp, #12
   80404:	af00      	add	r7, sp, #0
   80406:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80408:	687b      	ldr	r3, [r7, #4]
   8040a:	2288      	movs	r2, #136	; 0x88
   8040c:	601a      	str	r2, [r3, #0]
}
   8040e:	bf00      	nop
   80410:	370c      	adds	r7, #12
   80412:	46bd      	mov	sp, r7
   80414:	bc80      	pop	{r7}
   80416:	4770      	bx	lr

00080418 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   80418:	b480      	push	{r7}
   8041a:	b083      	sub	sp, #12
   8041c:	af00      	add	r7, sp, #0
   8041e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   80420:	687b      	ldr	r3, [r7, #4]
   80422:	2210      	movs	r2, #16
   80424:	601a      	str	r2, [r3, #0]
}
   80426:	bf00      	nop
   80428:	370c      	adds	r7, #12
   8042a:	46bd      	mov	sp, r7
   8042c:	bc80      	pop	{r7}
   8042e:	4770      	bx	lr

00080430 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   80430:	b480      	push	{r7}
   80432:	b083      	sub	sp, #12
   80434:	af00      	add	r7, sp, #0
   80436:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   80438:	687b      	ldr	r3, [r7, #4]
   8043a:	2220      	movs	r2, #32
   8043c:	601a      	str	r2, [r3, #0]
}
   8043e:	bf00      	nop
   80440:	370c      	adds	r7, #12
   80442:	46bd      	mov	sp, r7
   80444:	bc80      	pop	{r7}
   80446:	4770      	bx	lr

00080448 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   80448:	b480      	push	{r7}
   8044a:	b083      	sub	sp, #12
   8044c:	af00      	add	r7, sp, #0
   8044e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80450:	687b      	ldr	r3, [r7, #4]
   80452:	2224      	movs	r2, #36	; 0x24
   80454:	601a      	str	r2, [r3, #0]
}
   80456:	bf00      	nop
   80458:	370c      	adds	r7, #12
   8045a:	46bd      	mov	sp, r7
   8045c:	bc80      	pop	{r7}
   8045e:	4770      	bx	lr

00080460 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   80460:	b480      	push	{r7}
   80462:	b083      	sub	sp, #12
   80464:	af00      	add	r7, sp, #0
   80466:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   80468:	687b      	ldr	r3, [r7, #4]
   8046a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8046e:	601a      	str	r2, [r3, #0]
}
   80470:	bf00      	nop
   80472:	370c      	adds	r7, #12
   80474:	46bd      	mov	sp, r7
   80476:	bc80      	pop	{r7}
   80478:	4770      	bx	lr

0008047a <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   8047a:	b480      	push	{r7}
   8047c:	b083      	sub	sp, #12
   8047e:	af00      	add	r7, sp, #0
   80480:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   80482:	687b      	ldr	r3, [r7, #4]
   80484:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80488:	601a      	str	r2, [r3, #0]
}
   8048a:	bf00      	nop
   8048c:	370c      	adds	r7, #12
   8048e:	46bd      	mov	sp, r7
   80490:	bc80      	pop	{r7}
   80492:	4770      	bx	lr

00080494 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
   80494:	b480      	push	{r7}
   80496:	b083      	sub	sp, #12
   80498:	af00      	add	r7, sp, #0
   8049a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
   8049c:	687b      	ldr	r3, [r7, #4]
   8049e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   804a2:	601a      	str	r2, [r3, #0]
}
   804a4:	bf00      	nop
   804a6:	370c      	adds	r7, #12
   804a8:	46bd      	mov	sp, r7
   804aa:	bc80      	pop	{r7}
   804ac:	4770      	bx	lr

000804ae <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   804ae:	b480      	push	{r7}
   804b0:	b083      	sub	sp, #12
   804b2:	af00      	add	r7, sp, #0
   804b4:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   804b6:	687b      	ldr	r3, [r7, #4]
   804b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   804bc:	601a      	str	r2, [r3, #0]
}
   804be:	bf00      	nop
   804c0:	370c      	adds	r7, #12
   804c2:	46bd      	mov	sp, r7
   804c4:	bc80      	pop	{r7}
   804c6:	4770      	bx	lr

000804c8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   804c8:	b480      	push	{r7}
   804ca:	b083      	sub	sp, #12
   804cc:	af00      	add	r7, sp, #0
   804ce:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   804d0:	687b      	ldr	r3, [r7, #4]
   804d2:	4a04      	ldr	r2, [pc, #16]	; (804e4 <usart_disable_writeprotect+0x1c>)
   804d4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   804d8:	bf00      	nop
   804da:	370c      	adds	r7, #12
   804dc:	46bd      	mov	sp, r7
   804de:	bc80      	pop	{r7}
   804e0:	4770      	bx	lr
   804e2:	bf00      	nop
   804e4:	55534100 	.word	0x55534100

000804e8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   804e8:	b480      	push	{r7}
   804ea:	b083      	sub	sp, #12
   804ec:	af00      	add	r7, sp, #0
   804ee:	4603      	mov	r3, r0
   804f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   804f2:	4908      	ldr	r1, [pc, #32]	; (80514 <NVIC_EnableIRQ+0x2c>)
   804f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   804f8:	095b      	lsrs	r3, r3, #5
   804fa:	79fa      	ldrb	r2, [r7, #7]
   804fc:	f002 021f 	and.w	r2, r2, #31
   80500:	2001      	movs	r0, #1
   80502:	fa00 f202 	lsl.w	r2, r0, r2
   80506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8050a:	bf00      	nop
   8050c:	370c      	adds	r7, #12
   8050e:	46bd      	mov	sp, r7
   80510:	bc80      	pop	{r7}
   80512:	4770      	bx	lr
   80514:	e000e100 	.word	0xe000e100

00080518 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80518:	b480      	push	{r7}
   8051a:	b083      	sub	sp, #12
   8051c:	af00      	add	r7, sp, #0
   8051e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80520:	687b      	ldr	r3, [r7, #4]
   80522:	2b07      	cmp	r3, #7
   80524:	d825      	bhi.n	80572 <osc_get_rate+0x5a>
   80526:	a201      	add	r2, pc, #4	; (adr r2, 8052c <osc_get_rate+0x14>)
   80528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8052c:	0008054d 	.word	0x0008054d
   80530:	00080553 	.word	0x00080553
   80534:	00080559 	.word	0x00080559
   80538:	0008055f 	.word	0x0008055f
   8053c:	00080563 	.word	0x00080563
   80540:	00080567 	.word	0x00080567
   80544:	0008056b 	.word	0x0008056b
   80548:	0008056f 	.word	0x0008056f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8054c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80550:	e010      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80556:	e00d      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8055c:	e00a      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8055e:	4b08      	ldr	r3, [pc, #32]	; (80580 <osc_get_rate+0x68>)
   80560:	e008      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80562:	4b08      	ldr	r3, [pc, #32]	; (80584 <osc_get_rate+0x6c>)
   80564:	e006      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80566:	4b08      	ldr	r3, [pc, #32]	; (80588 <osc_get_rate+0x70>)
   80568:	e004      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8056a:	4b07      	ldr	r3, [pc, #28]	; (80588 <osc_get_rate+0x70>)
   8056c:	e002      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8056e:	4b06      	ldr	r3, [pc, #24]	; (80588 <osc_get_rate+0x70>)
   80570:	e000      	b.n	80574 <osc_get_rate+0x5c>
	}

	return 0;
   80572:	2300      	movs	r3, #0
}
   80574:	4618      	mov	r0, r3
   80576:	370c      	adds	r7, #12
   80578:	46bd      	mov	sp, r7
   8057a:	bc80      	pop	{r7}
   8057c:	4770      	bx	lr
   8057e:	bf00      	nop
   80580:	003d0900 	.word	0x003d0900
   80584:	007a1200 	.word	0x007a1200
   80588:	00b71b00 	.word	0x00b71b00

0008058c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8058c:	b580      	push	{r7, lr}
   8058e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80590:	2006      	movs	r0, #6
   80592:	4b04      	ldr	r3, [pc, #16]	; (805a4 <sysclk_get_main_hz+0x18>)
   80594:	4798      	blx	r3
   80596:	4602      	mov	r2, r0
   80598:	4613      	mov	r3, r2
   8059a:	00db      	lsls	r3, r3, #3
   8059c:	1a9b      	subs	r3, r3, r2
   8059e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   805a0:	4618      	mov	r0, r3
   805a2:	bd80      	pop	{r7, pc}
   805a4:	00080519 	.word	0x00080519

000805a8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   805a8:	b580      	push	{r7, lr}
   805aa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   805ac:	4b02      	ldr	r3, [pc, #8]	; (805b8 <sysclk_get_peripheral_hz+0x10>)
   805ae:	4798      	blx	r3
   805b0:	4603      	mov	r3, r0
   805b2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   805b4:	4618      	mov	r0, r3
   805b6:	bd80      	pop	{r7, pc}
   805b8:	0008058d 	.word	0x0008058d

000805bc <spi_init>:
sensor_to_motor_t stm;

uint8_t sens_buf[sizeof(mts)];

void spi_init(void)
{
   805bc:	b580      	push	{r7, lr}
   805be:	af00      	add	r7, sp, #0
    configure_dmac();
   805c0:	4b02      	ldr	r3, [pc, #8]	; (805cc <spi_init+0x10>)
   805c2:	4798      	blx	r3
    spi_master_initialize();
   805c4:	4b02      	ldr	r3, [pc, #8]	; (805d0 <spi_init+0x14>)
   805c6:	4798      	blx	r3
}
   805c8:	bf00      	nop
   805ca:	bd80      	pop	{r7, pc}
   805cc:	000806e9 	.word	0x000806e9
   805d0:	000805d5 	.word	0x000805d5

000805d4 <spi_master_initialize>:

void spi_master_initialize(void)
{
   805d4:	b590      	push	{r4, r7, lr}
   805d6:	b085      	sub	sp, #20
   805d8:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   805da:	2101      	movs	r1, #1
   805dc:	4810      	ldr	r0, [pc, #64]	; (80620 <spi_master_initialize+0x4c>)
   805de:	4b11      	ldr	r3, [pc, #68]	; (80624 <spi_master_initialize+0x50>)
   805e0:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   805e2:	2100      	movs	r1, #0
   805e4:	480e      	ldr	r0, [pc, #56]	; (80620 <spi_master_initialize+0x4c>)
   805e6:	4b0f      	ldr	r3, [pc, #60]	; (80624 <spi_master_initialize+0x50>)
   805e8:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   805ea:	2012      	movs	r0, #18
   805ec:	4b0e      	ldr	r3, [pc, #56]	; (80628 <spi_master_initialize+0x54>)
   805ee:	4798      	blx	r3
    usart_spi_disable(USART1);
   805f0:	480e      	ldr	r0, [pc, #56]	; (8062c <spi_master_initialize+0x58>)
   805f2:	4b0f      	ldr	r3, [pc, #60]	; (80630 <spi_master_initialize+0x5c>)
   805f4:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   805f6:	4b0f      	ldr	r3, [pc, #60]	; (80634 <spi_master_initialize+0x60>)
   805f8:	463c      	mov	r4, r7
   805fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   805fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   80600:	4b0d      	ldr	r3, [pc, #52]	; (80638 <spi_master_initialize+0x64>)
   80602:	4798      	blx	r3
   80604:	4602      	mov	r2, r0
   80606:	463b      	mov	r3, r7
   80608:	4619      	mov	r1, r3
   8060a:	4808      	ldr	r0, [pc, #32]	; (8062c <spi_master_initialize+0x58>)
   8060c:	4b0b      	ldr	r3, [pc, #44]	; (8063c <spi_master_initialize+0x68>)
   8060e:	4798      	blx	r3
    usart_spi_enable(USART1);
   80610:	4806      	ldr	r0, [pc, #24]	; (8062c <spi_master_initialize+0x58>)
   80612:	4b0b      	ldr	r3, [pc, #44]	; (80640 <spi_master_initialize+0x6c>)
   80614:	4798      	blx	r3
}
   80616:	bf00      	nop
   80618:	3714      	adds	r7, #20
   8061a:	46bd      	mov	sp, r7
   8061c:	bd90      	pop	{r4, r7, pc}
   8061e:	bf00      	nop
   80620:	400c4000 	.word	0x400c4000
   80624:	000824eb 	.word	0x000824eb
   80628:	000828a9 	.word	0x000828a9
   8062c:	4009c000 	.word	0x4009c000
   80630:	00080185 	.word	0x00080185
   80634:	00088298 	.word	0x00088298
   80638:	000805a9 	.word	0x000805a9
   8063c:	000802c1 	.word	0x000802c1
   80640:	00080161 	.word	0x00080161

00080644 <spi_master_transfer>:

void spi_master_transfer(void *p_buf, uint32_t ul_size)
{
   80644:	b580      	push	{r7, lr}
   80646:	b088      	sub	sp, #32
   80648:	af00      	add	r7, sp, #0
   8064a:	6078      	str	r0, [r7, #4]
   8064c:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    usart_spi_force_chip_select(USART1);
   8064e:	481c      	ldr	r0, [pc, #112]	; (806c0 <spi_master_transfer+0x7c>)
   80650:	4b1c      	ldr	r3, [pc, #112]	; (806c4 <spi_master_transfer+0x80>)
   80652:	4798      	blx	r3

    dmac_channel_disable(DMAC, 1);
   80654:	2101      	movs	r1, #1
   80656:	481c      	ldr	r0, [pc, #112]	; (806c8 <spi_master_transfer+0x84>)
   80658:	4b1c      	ldr	r3, [pc, #112]	; (806cc <spi_master_transfer+0x88>)
   8065a:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   8065c:	687b      	ldr	r3, [r7, #4]
   8065e:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & USART1->US_THR;
   80660:	4b1b      	ldr	r3, [pc, #108]	; (806d0 <spi_master_transfer+0x8c>)
   80662:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80664:	683b      	ldr	r3, [r7, #0]
   80666:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80668:	4b1a      	ldr	r3, [pc, #104]	; (806d4 <spi_master_transfer+0x90>)
   8066a:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   8066c:	2300      	movs	r3, #0
   8066e:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   80670:	f107 030c 	add.w	r3, r7, #12
   80674:	461a      	mov	r2, r3
   80676:	2101      	movs	r1, #1
   80678:	4813      	ldr	r0, [pc, #76]	; (806c8 <spi_master_transfer+0x84>)
   8067a:	4b17      	ldr	r3, [pc, #92]	; (806d8 <spi_master_transfer+0x94>)
   8067c:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   8067e:	2101      	movs	r1, #1
   80680:	4811      	ldr	r0, [pc, #68]	; (806c8 <spi_master_transfer+0x84>)
   80682:	4b16      	ldr	r3, [pc, #88]	; (806dc <spi_master_transfer+0x98>)
   80684:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   80686:	2100      	movs	r1, #0
   80688:	480f      	ldr	r0, [pc, #60]	; (806c8 <spi_master_transfer+0x84>)
   8068a:	4b10      	ldr	r3, [pc, #64]	; (806cc <spi_master_transfer+0x88>)
   8068c:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & USART1->US_RHR;
   8068e:	4b14      	ldr	r3, [pc, #80]	; (806e0 <spi_master_transfer+0x9c>)
   80690:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80692:	687b      	ldr	r3, [r7, #4]
   80694:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80696:	683b      	ldr	r3, [r7, #0]
   80698:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   8069a:	4b12      	ldr	r3, [pc, #72]	; (806e4 <spi_master_transfer+0xa0>)
   8069c:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   8069e:	2300      	movs	r3, #0
   806a0:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   806a2:	f107 030c 	add.w	r3, r7, #12
   806a6:	461a      	mov	r2, r3
   806a8:	2100      	movs	r1, #0
   806aa:	4807      	ldr	r0, [pc, #28]	; (806c8 <spi_master_transfer+0x84>)
   806ac:	4b0a      	ldr	r3, [pc, #40]	; (806d8 <spi_master_transfer+0x94>)
   806ae:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   806b0:	2100      	movs	r1, #0
   806b2:	4805      	ldr	r0, [pc, #20]	; (806c8 <spi_master_transfer+0x84>)
   806b4:	4b09      	ldr	r3, [pc, #36]	; (806dc <spi_master_transfer+0x98>)
   806b6:	4798      	blx	r3
}
   806b8:	bf00      	nop
   806ba:	3720      	adds	r7, #32
   806bc:	46bd      	mov	sp, r7
   806be:	bd80      	pop	{r7, pc}
   806c0:	4009c000 	.word	0x4009c000
   806c4:	00080495 	.word	0x00080495
   806c8:	400c4000 	.word	0x400c4000
   806cc:	000824eb 	.word	0x000824eb
   806d0:	4009c01c 	.word	0x4009c01c
   806d4:	20310000 	.word	0x20310000
   806d8:	00082605 	.word	0x00082605
   806dc:	000824cd 	.word	0x000824cd
   806e0:	4009c018 	.word	0x4009c018
   806e4:	02510000 	.word	0x02510000

000806e8 <configure_dmac>:

void configure_dmac(void)
{
   806e8:	b580      	push	{r7, lr}
   806ea:	b082      	sub	sp, #8
   806ec:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   806ee:	2027      	movs	r0, #39	; 0x27
   806f0:	4b18      	ldr	r3, [pc, #96]	; (80754 <configure_dmac+0x6c>)
   806f2:	4798      	blx	r3
    dmac_init(DMAC);
   806f4:	4818      	ldr	r0, [pc, #96]	; (80758 <configure_dmac+0x70>)
   806f6:	4b19      	ldr	r3, [pc, #100]	; (8075c <configure_dmac+0x74>)
   806f8:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   806fa:	2110      	movs	r1, #16
   806fc:	4816      	ldr	r0, [pc, #88]	; (80758 <configure_dmac+0x70>)
   806fe:	4b18      	ldr	r3, [pc, #96]	; (80760 <configure_dmac+0x78>)
   80700:	4798      	blx	r3
    dmac_enable(DMAC);
   80702:	4815      	ldr	r0, [pc, #84]	; (80758 <configure_dmac+0x70>)
   80704:	4b17      	ldr	r3, [pc, #92]	; (80764 <configure_dmac+0x7c>)
   80706:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80708:	2300      	movs	r3, #0
   8070a:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   8070c:	687b      	ldr	r3, [r7, #4]
   8070e:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80712:	f043 030e 	orr.w	r3, r3, #14
   80716:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   80718:	687a      	ldr	r2, [r7, #4]
   8071a:	2100      	movs	r1, #0
   8071c:	480e      	ldr	r0, [pc, #56]	; (80758 <configure_dmac+0x70>)
   8071e:	4b12      	ldr	r3, [pc, #72]	; (80768 <configure_dmac+0x80>)
   80720:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80722:	2300      	movs	r3, #0
   80724:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80726:	687b      	ldr	r3, [r7, #4]
   80728:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   8072c:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   80730:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   80732:	687a      	ldr	r2, [r7, #4]
   80734:	2101      	movs	r1, #1
   80736:	4808      	ldr	r0, [pc, #32]	; (80758 <configure_dmac+0x70>)
   80738:	4b0b      	ldr	r3, [pc, #44]	; (80768 <configure_dmac+0x80>)
   8073a:	4798      	blx	r3
    ul_cfg = 0;
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
    #endif
    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   8073c:	2027      	movs	r0, #39	; 0x27
   8073e:	4b0b      	ldr	r3, [pc, #44]	; (8076c <configure_dmac+0x84>)
   80740:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   80742:	2101      	movs	r1, #1
   80744:	4804      	ldr	r0, [pc, #16]	; (80758 <configure_dmac+0x70>)
   80746:	4b0a      	ldr	r3, [pc, #40]	; (80770 <configure_dmac+0x88>)
   80748:	4798      	blx	r3
}
   8074a:	bf00      	nop
   8074c:	3708      	adds	r7, #8
   8074e:	46bd      	mov	sp, r7
   80750:	bd80      	pop	{r7, pc}
   80752:	bf00      	nop
   80754:	000828a9 	.word	0x000828a9
   80758:	400c4000 	.word	0x400c4000
   8075c:	00082425 	.word	0x00082425
   80760:	00082441 	.word	0x00082441
   80764:	00082467 	.word	0x00082467
   80768:	000825db 	.word	0x000825db
   8076c:	000804e9 	.word	0x000804e9
   80770:	0008249d 	.word	0x0008249d

00080774 <DMAC_Handler>:

void DMAC_Handler(void)
{
   80774:	b580      	push	{r7, lr}
   80776:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   80778:	480a      	ldr	r0, [pc, #40]	; (807a4 <DMAC_Handler+0x30>)
   8077a:	4b0b      	ldr	r3, [pc, #44]	; (807a8 <DMAC_Handler+0x34>)
   8077c:	4798      	blx	r3
   8077e:	4602      	mov	r2, r0
   80780:	4b0a      	ldr	r3, [pc, #40]	; (807ac <DMAC_Handler+0x38>)
   80782:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   80784:	4b09      	ldr	r3, [pc, #36]	; (807ac <DMAC_Handler+0x38>)
   80786:	681b      	ldr	r3, [r3, #0]
   80788:	f003 0301 	and.w	r3, r3, #1
   8078c:	2b00      	cmp	r3, #0
   8078e:	d007      	beq.n	807a0 <DMAC_Handler+0x2c>
    {
        usart_spi_release_chip_select(USART1);
   80790:	4807      	ldr	r0, [pc, #28]	; (807b0 <DMAC_Handler+0x3c>)
   80792:	4b08      	ldr	r3, [pc, #32]	; (807b4 <DMAC_Handler+0x40>)
   80794:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   80796:	4b08      	ldr	r3, [pc, #32]	; (807b8 <DMAC_Handler+0x44>)
   80798:	881b      	ldrh	r3, [r3, #0]
   8079a:	b29b      	uxth	r3, r3
   8079c:	4a07      	ldr	r2, [pc, #28]	; (807bc <DMAC_Handler+0x48>)
   8079e:	8013      	strh	r3, [r2, #0]
    }
}
   807a0:	bf00      	nop
   807a2:	bd80      	pop	{r7, pc}
   807a4:	400c4000 	.word	0x400c4000
   807a8:	000824b7 	.word	0x000824b7
   807ac:	20070b70 	.word	0x20070b70
   807b0:	4009c000 	.word	0x4009c000
   807b4:	000804af 	.word	0x000804af
   807b8:	20070fec 	.word	0x20070fec
   807bc:	20070ff4 	.word	0x20070ff4

000807c0 <NVIC_EnableIRQ>:
{
   807c0:	b480      	push	{r7}
   807c2:	b083      	sub	sp, #12
   807c4:	af00      	add	r7, sp, #0
   807c6:	4603      	mov	r3, r0
   807c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   807ca:	4908      	ldr	r1, [pc, #32]	; (807ec <NVIC_EnableIRQ+0x2c>)
   807cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   807d0:	095b      	lsrs	r3, r3, #5
   807d2:	79fa      	ldrb	r2, [r7, #7]
   807d4:	f002 021f 	and.w	r2, r2, #31
   807d8:	2001      	movs	r0, #1
   807da:	fa00 f202 	lsl.w	r2, r0, r2
   807de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   807e2:	bf00      	nop
   807e4:	370c      	adds	r7, #12
   807e6:	46bd      	mov	sp, r7
   807e8:	bc80      	pop	{r7}
   807ea:	4770      	bx	lr
   807ec:	e000e100 	.word	0xe000e100

000807f0 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   807f0:	b480      	push	{r7}
   807f2:	b083      	sub	sp, #12
   807f4:	af00      	add	r7, sp, #0
   807f6:	4603      	mov	r3, r0
   807f8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   807fa:	4909      	ldr	r1, [pc, #36]	; (80820 <NVIC_ClearPendingIRQ+0x30>)
   807fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80800:	095b      	lsrs	r3, r3, #5
   80802:	79fa      	ldrb	r2, [r7, #7]
   80804:	f002 021f 	and.w	r2, r2, #31
   80808:	2001      	movs	r0, #1
   8080a:	fa00 f202 	lsl.w	r2, r0, r2
   8080e:	3360      	adds	r3, #96	; 0x60
   80810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80814:	bf00      	nop
   80816:	370c      	adds	r7, #12
   80818:	46bd      	mov	sp, r7
   8081a:	bc80      	pop	{r7}
   8081c:	4770      	bx	lr
   8081e:	bf00      	nop
   80820:	e000e100 	.word	0xe000e100

00080824 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80824:	b480      	push	{r7}
   80826:	b083      	sub	sp, #12
   80828:	af00      	add	r7, sp, #0
   8082a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8082c:	687b      	ldr	r3, [r7, #4]
   8082e:	2208      	movs	r2, #8
   80830:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80832:	687b      	ldr	r3, [r7, #4]
   80834:	2220      	movs	r2, #32
   80836:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80838:	687b      	ldr	r3, [r7, #4]
   8083a:	2204      	movs	r2, #4
   8083c:	601a      	str	r2, [r3, #0]
}
   8083e:	bf00      	nop
   80840:	370c      	adds	r7, #12
   80842:	46bd      	mov	sp, r7
   80844:	bc80      	pop	{r7}
   80846:	4770      	bx	lr

00080848 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80848:	b580      	push	{r7, lr}
   8084a:	b084      	sub	sp, #16
   8084c:	af00      	add	r7, sp, #0
   8084e:	6078      	str	r0, [r7, #4]
   80850:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80852:	2300      	movs	r3, #0
   80854:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80856:	687b      	ldr	r3, [r7, #4]
   80858:	f04f 32ff 	mov.w	r2, #4294967295
   8085c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8085e:	687b      	ldr	r3, [r7, #4]
   80860:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80862:	6878      	ldr	r0, [r7, #4]
   80864:	4b12      	ldr	r3, [pc, #72]	; (808b0 <twi_master_init+0x68>)
   80866:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80868:	6878      	ldr	r0, [r7, #4]
   8086a:	4b12      	ldr	r3, [pc, #72]	; (808b4 <twi_master_init+0x6c>)
   8086c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8086e:	683b      	ldr	r3, [r7, #0]
   80870:	6859      	ldr	r1, [r3, #4]
   80872:	683b      	ldr	r3, [r7, #0]
   80874:	681b      	ldr	r3, [r3, #0]
   80876:	461a      	mov	r2, r3
   80878:	6878      	ldr	r0, [r7, #4]
   8087a:	4b0f      	ldr	r3, [pc, #60]	; (808b8 <twi_master_init+0x70>)
   8087c:	4798      	blx	r3
   8087e:	4603      	mov	r3, r0
   80880:	2b01      	cmp	r3, #1
   80882:	d101      	bne.n	80888 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80884:	2301      	movs	r3, #1
   80886:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80888:	683b      	ldr	r3, [r7, #0]
   8088a:	7a5b      	ldrb	r3, [r3, #9]
   8088c:	2b01      	cmp	r3, #1
   8088e:	d102      	bne.n	80896 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80890:	687b      	ldr	r3, [r7, #4]
   80892:	2240      	movs	r2, #64	; 0x40
   80894:	601a      	str	r2, [r3, #0]
	}

    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   80896:	f44f 7150 	mov.w	r1, #832	; 0x340
   8089a:	6878      	ldr	r0, [r7, #4]
   8089c:	4b07      	ldr	r3, [pc, #28]	; (808bc <twi_master_init+0x74>)
   8089e:	4798      	blx	r3

    twiBusy = false;
   808a0:	4b07      	ldr	r3, [pc, #28]	; (808c0 <twi_master_init+0x78>)
   808a2:	2200      	movs	r2, #0
   808a4:	701a      	strb	r2, [r3, #0]

	return status;
   808a6:	68fb      	ldr	r3, [r7, #12]
}
   808a8:	4618      	mov	r0, r3
   808aa:	3710      	adds	r7, #16
   808ac:	46bd      	mov	sp, r7
   808ae:	bd80      	pop	{r7, pc}
   808b0:	00080d21 	.word	0x00080d21
   808b4:	00080825 	.word	0x00080825
   808b8:	000808c5 	.word	0x000808c5
   808bc:	00080cbd 	.word	0x00080cbd
   808c0:	20070f7c 	.word	0x20070f7c

000808c4 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   808c4:	b480      	push	{r7}
   808c6:	b089      	sub	sp, #36	; 0x24
   808c8:	af00      	add	r7, sp, #0
   808ca:	60f8      	str	r0, [r7, #12]
   808cc:	60b9      	str	r1, [r7, #8]
   808ce:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   808d0:	2300      	movs	r3, #0
   808d2:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   808d4:	68bb      	ldr	r3, [r7, #8]
   808d6:	4a34      	ldr	r2, [pc, #208]	; (809a8 <twi_set_speed+0xe4>)
   808d8:	4293      	cmp	r3, r2
   808da:	d901      	bls.n	808e0 <twi_set_speed+0x1c>
		return FAIL;
   808dc:	2301      	movs	r3, #1
   808de:	e05d      	b.n	8099c <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   808e0:	68bb      	ldr	r3, [r7, #8]
   808e2:	4a32      	ldr	r2, [pc, #200]	; (809ac <twi_set_speed+0xe8>)
   808e4:	4293      	cmp	r3, r2
   808e6:	d937      	bls.n	80958 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   808e8:	687b      	ldr	r3, [r7, #4]
   808ea:	4a31      	ldr	r2, [pc, #196]	; (809b0 <twi_set_speed+0xec>)
   808ec:	fba2 2303 	umull	r2, r3, r2, r3
   808f0:	0b9b      	lsrs	r3, r3, #14
   808f2:	3b04      	subs	r3, #4
   808f4:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   808f6:	68ba      	ldr	r2, [r7, #8]
   808f8:	4b2e      	ldr	r3, [pc, #184]	; (809b4 <twi_set_speed+0xf0>)
   808fa:	4413      	add	r3, r2
   808fc:	009b      	lsls	r3, r3, #2
   808fe:	687a      	ldr	r2, [r7, #4]
   80900:	fbb2 f3f3 	udiv	r3, r2, r3
   80904:	3b04      	subs	r3, #4
   80906:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80908:	e005      	b.n	80916 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   8090a:	69fb      	ldr	r3, [r7, #28]
   8090c:	3301      	adds	r3, #1
   8090e:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   80910:	697b      	ldr	r3, [r7, #20]
   80912:	085b      	lsrs	r3, r3, #1
   80914:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80916:	697b      	ldr	r3, [r7, #20]
   80918:	2bff      	cmp	r3, #255	; 0xff
   8091a:	d909      	bls.n	80930 <twi_set_speed+0x6c>
   8091c:	69fb      	ldr	r3, [r7, #28]
   8091e:	2b06      	cmp	r3, #6
   80920:	d9f3      	bls.n	8090a <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80922:	e005      	b.n	80930 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   80924:	69fb      	ldr	r3, [r7, #28]
   80926:	3301      	adds	r3, #1
   80928:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   8092a:	693b      	ldr	r3, [r7, #16]
   8092c:	085b      	lsrs	r3, r3, #1
   8092e:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80930:	693b      	ldr	r3, [r7, #16]
   80932:	2bff      	cmp	r3, #255	; 0xff
   80934:	d902      	bls.n	8093c <twi_set_speed+0x78>
   80936:	69fb      	ldr	r3, [r7, #28]
   80938:	2b06      	cmp	r3, #6
   8093a:	d9f3      	bls.n	80924 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   8093c:	697b      	ldr	r3, [r7, #20]
   8093e:	b2da      	uxtb	r2, r3
   80940:	693b      	ldr	r3, [r7, #16]
   80942:	021b      	lsls	r3, r3, #8
   80944:	b29b      	uxth	r3, r3
   80946:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   80948:	69fb      	ldr	r3, [r7, #28]
   8094a:	041b      	lsls	r3, r3, #16
   8094c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80950:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80952:	68fb      	ldr	r3, [r7, #12]
   80954:	611a      	str	r2, [r3, #16]
   80956:	e020      	b.n	8099a <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80958:	68bb      	ldr	r3, [r7, #8]
   8095a:	005b      	lsls	r3, r3, #1
   8095c:	687a      	ldr	r2, [r7, #4]
   8095e:	fbb2 f3f3 	udiv	r3, r2, r3
   80962:	3b04      	subs	r3, #4
   80964:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80966:	e005      	b.n	80974 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   80968:	69fb      	ldr	r3, [r7, #28]
   8096a:	3301      	adds	r3, #1
   8096c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   8096e:	69bb      	ldr	r3, [r7, #24]
   80970:	085b      	lsrs	r3, r3, #1
   80972:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80974:	69bb      	ldr	r3, [r7, #24]
   80976:	2bff      	cmp	r3, #255	; 0xff
   80978:	d902      	bls.n	80980 <twi_set_speed+0xbc>
   8097a:	69fb      	ldr	r3, [r7, #28]
   8097c:	2b06      	cmp	r3, #6
   8097e:	d9f3      	bls.n	80968 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80980:	69bb      	ldr	r3, [r7, #24]
   80982:	b2da      	uxtb	r2, r3
   80984:	69bb      	ldr	r3, [r7, #24]
   80986:	021b      	lsls	r3, r3, #8
   80988:	b29b      	uxth	r3, r3
   8098a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   8098c:	69fb      	ldr	r3, [r7, #28]
   8098e:	041b      	lsls	r3, r3, #16
   80990:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80994:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80996:	68fb      	ldr	r3, [r7, #12]
   80998:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   8099a:	2300      	movs	r3, #0
}
   8099c:	4618      	mov	r0, r3
   8099e:	3724      	adds	r7, #36	; 0x24
   809a0:	46bd      	mov	sp, r7
   809a2:	bc80      	pop	{r7}
   809a4:	4770      	bx	lr
   809a6:	bf00      	nop
   809a8:	00061a80 	.word	0x00061a80
   809ac:	0005dc00 	.word	0x0005dc00
   809b0:	057619f1 	.word	0x057619f1
   809b4:	3ffd1200 	.word	0x3ffd1200

000809b8 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   809b8:	b480      	push	{r7}
   809ba:	b085      	sub	sp, #20
   809bc:	af00      	add	r7, sp, #0
   809be:	6078      	str	r0, [r7, #4]
   809c0:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   809c2:	683b      	ldr	r3, [r7, #0]
   809c4:	2b00      	cmp	r3, #0
   809c6:	d101      	bne.n	809cc <twi_mk_addr+0x14>
		return 0;
   809c8:	2300      	movs	r3, #0
   809ca:	e01d      	b.n	80a08 <twi_mk_addr+0x50>

	val = addr[0];
   809cc:	687b      	ldr	r3, [r7, #4]
   809ce:	781b      	ldrb	r3, [r3, #0]
   809d0:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   809d2:	683b      	ldr	r3, [r7, #0]
   809d4:	2b01      	cmp	r3, #1
   809d6:	dd09      	ble.n	809ec <twi_mk_addr+0x34>
		val <<= 8;
   809d8:	68fb      	ldr	r3, [r7, #12]
   809da:	021b      	lsls	r3, r3, #8
   809dc:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   809de:	687b      	ldr	r3, [r7, #4]
   809e0:	3301      	adds	r3, #1
   809e2:	781b      	ldrb	r3, [r3, #0]
   809e4:	461a      	mov	r2, r3
   809e6:	68fb      	ldr	r3, [r7, #12]
   809e8:	4313      	orrs	r3, r2
   809ea:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   809ec:	683b      	ldr	r3, [r7, #0]
   809ee:	2b02      	cmp	r3, #2
   809f0:	dd09      	ble.n	80a06 <twi_mk_addr+0x4e>
		val <<= 8;
   809f2:	68fb      	ldr	r3, [r7, #12]
   809f4:	021b      	lsls	r3, r3, #8
   809f6:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   809f8:	687b      	ldr	r3, [r7, #4]
   809fa:	3302      	adds	r3, #2
   809fc:	781b      	ldrb	r3, [r3, #0]
   809fe:	461a      	mov	r2, r3
   80a00:	68fb      	ldr	r3, [r7, #12]
   80a02:	4313      	orrs	r3, r2
   80a04:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80a06:	68fb      	ldr	r3, [r7, #12]
}
   80a08:	4618      	mov	r0, r3
   80a0a:	3714      	adds	r7, #20
   80a0c:	46bd      	mov	sp, r7
   80a0e:	bc80      	pop	{r7}
   80a10:	4770      	bx	lr
	...

00080a14 <twi_is_busy>:

	return TWI_SUCCESS;
}

uint8_t twi_is_busy(void)
{
   80a14:	b480      	push	{r7}
   80a16:	af00      	add	r7, sp, #0
    return twiBusy;
   80a18:	4b02      	ldr	r3, [pc, #8]	; (80a24 <twi_is_busy+0x10>)
   80a1a:	781b      	ldrb	r3, [r3, #0]
}
   80a1c:	4618      	mov	r0, r3
   80a1e:	46bd      	mov	sp, r7
   80a20:	bc80      	pop	{r7}
   80a22:	4770      	bx	lr
   80a24:	20070f7c 	.word	0x20070f7c

00080a28 <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   80a28:	b480      	push	{r7}
   80a2a:	af00      	add	r7, sp, #0
    return &txPacket;
   80a2c:	4b02      	ldr	r3, [pc, #8]	; (80a38 <twi_get_tx_packet+0x10>)
}
   80a2e:	4618      	mov	r0, r3
   80a30:	46bd      	mov	sp, r7
   80a32:	bc80      	pop	{r7}
   80a34:	4770      	bx	lr
   80a36:	bf00      	nop
   80a38:	20070b74 	.word	0x20070b74

00080a3c <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   80a3c:	b580      	push	{r7, lr}
   80a3e:	b084      	sub	sp, #16
   80a40:	af00      	add	r7, sp, #0
   80a42:	6078      	str	r0, [r7, #4]
   80a44:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   80a46:	683b      	ldr	r3, [r7, #0]
   80a48:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80a4c:	2b00      	cmp	r3, #0
   80a4e:	d101      	bne.n	80a54 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   80a50:	2301      	movs	r3, #1
   80a52:	e040      	b.n	80ad6 <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   80a54:	4b22      	ldr	r3, [pc, #136]	; (80ae0 <twi_pdc_master_write+0xa4>)
   80a56:	2201      	movs	r2, #1
   80a58:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   80a5a:	683b      	ldr	r3, [r7, #0]
   80a5c:	3308      	adds	r3, #8
   80a5e:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   80a60:	683b      	ldr	r3, [r7, #0]
   80a62:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80a66:	3b01      	subs	r3, #1
   80a68:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   80a6a:	f107 0308 	add.w	r3, r7, #8
   80a6e:	2200      	movs	r2, #0
   80a70:	4619      	mov	r1, r3
   80a72:	481c      	ldr	r0, [pc, #112]	; (80ae4 <twi_pdc_master_write+0xa8>)
   80a74:	4b1c      	ldr	r3, [pc, #112]	; (80ae8 <twi_pdc_master_write+0xac>)
   80a76:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   80a78:	687b      	ldr	r3, [r7, #4]
   80a7a:	2200      	movs	r2, #0
   80a7c:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   80a7e:	683b      	ldr	r3, [r7, #0]
   80a80:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
   80a84:	041b      	lsls	r3, r3, #16
   80a86:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   80a8a:	683b      	ldr	r3, [r7, #0]
   80a8c:	685b      	ldr	r3, [r3, #4]
   80a8e:	021b      	lsls	r3, r3, #8
   80a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
   80a94:	431a      	orrs	r2, r3
   80a96:	687b      	ldr	r3, [r7, #4]
   80a98:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   80a9a:	687b      	ldr	r3, [r7, #4]
   80a9c:	2200      	movs	r2, #0
   80a9e:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80aa0:	683a      	ldr	r2, [r7, #0]
   80aa2:	683b      	ldr	r3, [r7, #0]
   80aa4:	685b      	ldr	r3, [r3, #4]
   80aa6:	4619      	mov	r1, r3
   80aa8:	4610      	mov	r0, r2
   80aaa:	4b10      	ldr	r3, [pc, #64]	; (80aec <twi_pdc_master_write+0xb0>)
   80aac:	4798      	blx	r3
   80aae:	4602      	mov	r2, r0
   80ab0:	687b      	ldr	r3, [r7, #4]
   80ab2:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   80ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
   80ab8:	480a      	ldr	r0, [pc, #40]	; (80ae4 <twi_pdc_master_write+0xa8>)
   80aba:	4b0d      	ldr	r3, [pc, #52]	; (80af0 <twi_pdc_master_write+0xb4>)
   80abc:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   80abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80ac2:	6878      	ldr	r0, [r7, #4]
   80ac4:	4b0b      	ldr	r3, [pc, #44]	; (80af4 <twi_pdc_master_write+0xb8>)
   80ac6:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   80ac8:	2016      	movs	r0, #22
   80aca:	4b0b      	ldr	r3, [pc, #44]	; (80af8 <twi_pdc_master_write+0xbc>)
   80acc:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   80ace:	2016      	movs	r0, #22
   80ad0:	4b0a      	ldr	r3, [pc, #40]	; (80afc <twi_pdc_master_write+0xc0>)
   80ad2:	4798      	blx	r3

    return TWI_SUCCESS;
   80ad4:	2300      	movs	r3, #0
}
   80ad6:	4618      	mov	r0, r3
   80ad8:	3710      	adds	r7, #16
   80ada:	46bd      	mov	sp, r7
   80adc:	bd80      	pop	{r7, pc}
   80ade:	bf00      	nop
   80ae0:	20070f7c 	.word	0x20070f7c
   80ae4:	4008c100 	.word	0x4008c100
   80ae8:	000801a9 	.word	0x000801a9
   80aec:	000809b9 	.word	0x000809b9
   80af0:	000801eb 	.word	0x000801eb
   80af4:	00080cbd 	.word	0x00080cbd
   80af8:	000807f1 	.word	0x000807f1
   80afc:	000807c1 	.word	0x000807c1

00080b00 <twi_set_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_tx_callback(void (*callback)(void))
{
   80b00:	b480      	push	{r7}
   80b02:	b083      	sub	sp, #12
   80b04:	af00      	add	r7, sp, #0
   80b06:	6078      	str	r0, [r7, #4]
    txCallback = callback;
   80b08:	4a03      	ldr	r2, [pc, #12]	; (80b18 <twi_set_tx_callback+0x18>)
   80b0a:	687b      	ldr	r3, [r7, #4]
   80b0c:	6013      	str	r3, [r2, #0]
}
   80b0e:	bf00      	nop
   80b10:	370c      	adds	r7, #12
   80b12:	46bd      	mov	sp, r7
   80b14:	bc80      	pop	{r7}
   80b16:	4770      	bx	lr
   80b18:	20070f80 	.word	0x20070f80

00080b1c <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   80b1c:	b590      	push	{r4, r7, lr}
   80b1e:	b083      	sub	sp, #12
   80b20:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   80b22:	485a      	ldr	r0, [pc, #360]	; (80c8c <TWI0_Handler+0x170>)
   80b24:	4b5a      	ldr	r3, [pc, #360]	; (80c90 <TWI0_Handler+0x174>)
   80b26:	4798      	blx	r3
   80b28:	4604      	mov	r4, r0
   80b2a:	4858      	ldr	r0, [pc, #352]	; (80c8c <TWI0_Handler+0x170>)
   80b2c:	4b59      	ldr	r3, [pc, #356]	; (80c94 <TWI0_Handler+0x178>)
   80b2e:	4798      	blx	r3
   80b30:	4603      	mov	r3, r0
   80b32:	4023      	ands	r3, r4
   80b34:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   80b36:	687b      	ldr	r3, [r7, #4]
   80b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   80b3c:	2b00      	cmp	r3, #0
   80b3e:	d014      	beq.n	80b6a <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   80b40:	f44f 7100 	mov.w	r1, #512	; 0x200
   80b44:	4854      	ldr	r0, [pc, #336]	; (80c98 <TWI0_Handler+0x17c>)
   80b46:	4b55      	ldr	r3, [pc, #340]	; (80c9c <TWI0_Handler+0x180>)
   80b48:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   80b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80b4e:	484f      	ldr	r0, [pc, #316]	; (80c8c <TWI0_Handler+0x170>)
   80b50:	4b53      	ldr	r3, [pc, #332]	; (80ca0 <TWI0_Handler+0x184>)
   80b52:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   80b54:	2104      	movs	r1, #4
   80b56:	484d      	ldr	r0, [pc, #308]	; (80c8c <TWI0_Handler+0x170>)
   80b58:	4b52      	ldr	r3, [pc, #328]	; (80ca4 <TWI0_Handler+0x188>)
   80b5a:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   80b5c:	484b      	ldr	r0, [pc, #300]	; (80c8c <TWI0_Handler+0x170>)
   80b5e:	4b4c      	ldr	r3, [pc, #304]	; (80c90 <TWI0_Handler+0x174>)
   80b60:	4798      	blx	r3
   80b62:	4602      	mov	r2, r0
   80b64:	687b      	ldr	r3, [r7, #4]
   80b66:	4313      	orrs	r3, r2
   80b68:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   80b6a:	687b      	ldr	r3, [r7, #4]
   80b6c:	f003 0304 	and.w	r3, r3, #4
   80b70:	2b00      	cmp	r3, #0
   80b72:	d01a      	beq.n	80baa <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   80b74:	2104      	movs	r1, #4
   80b76:	4845      	ldr	r0, [pc, #276]	; (80c8c <TWI0_Handler+0x170>)
   80b78:	4b49      	ldr	r3, [pc, #292]	; (80ca0 <TWI0_Handler+0x184>)
   80b7a:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   80b7c:	4b43      	ldr	r3, [pc, #268]	; (80c8c <TWI0_Handler+0x170>)
   80b7e:	2202      	movs	r2, #2
   80b80:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   80b82:	4a42      	ldr	r2, [pc, #264]	; (80c8c <TWI0_Handler+0x170>)
   80b84:	4b48      	ldr	r3, [pc, #288]	; (80ca8 <TWI0_Handler+0x18c>)
   80b86:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80b8a:	3b01      	subs	r3, #1
   80b8c:	4946      	ldr	r1, [pc, #280]	; (80ca8 <TWI0_Handler+0x18c>)
   80b8e:	440b      	add	r3, r1
   80b90:	7a1b      	ldrb	r3, [r3, #8]
   80b92:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   80b94:	2101      	movs	r1, #1
   80b96:	483d      	ldr	r0, [pc, #244]	; (80c8c <TWI0_Handler+0x170>)
   80b98:	4b42      	ldr	r3, [pc, #264]	; (80ca4 <TWI0_Handler+0x188>)
   80b9a:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   80b9c:	483b      	ldr	r0, [pc, #236]	; (80c8c <TWI0_Handler+0x170>)
   80b9e:	4b3c      	ldr	r3, [pc, #240]	; (80c90 <TWI0_Handler+0x174>)
   80ba0:	4798      	blx	r3
   80ba2:	4602      	mov	r2, r0
   80ba4:	687b      	ldr	r3, [r7, #4]
   80ba6:	4313      	orrs	r3, r2
   80ba8:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   80baa:	687b      	ldr	r3, [r7, #4]
   80bac:	f003 0301 	and.w	r3, r3, #1
   80bb0:	2b00      	cmp	r3, #0
   80bb2:	d00d      	beq.n	80bd0 <TWI0_Handler+0xb4>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   80bb4:	2101      	movs	r1, #1
   80bb6:	4835      	ldr	r0, [pc, #212]	; (80c8c <TWI0_Handler+0x170>)
   80bb8:	4b39      	ldr	r3, [pc, #228]	; (80ca0 <TWI0_Handler+0x184>)
   80bba:	4798      	blx	r3

        // If defined, call the connected function.
        if(txCallback != NULL)
   80bbc:	4b3b      	ldr	r3, [pc, #236]	; (80cac <TWI0_Handler+0x190>)
   80bbe:	681b      	ldr	r3, [r3, #0]
   80bc0:	2b00      	cmp	r3, #0
   80bc2:	d002      	beq.n	80bca <TWI0_Handler+0xae>
        {
            txCallback();
   80bc4:	4b39      	ldr	r3, [pc, #228]	; (80cac <TWI0_Handler+0x190>)
   80bc6:	681b      	ldr	r3, [r3, #0]
   80bc8:	4798      	blx	r3
        }

        twiBusy = false;
   80bca:	4b39      	ldr	r3, [pc, #228]	; (80cb0 <TWI0_Handler+0x194>)
   80bcc:	2200      	movs	r2, #0
   80bce:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   80bd0:	687b      	ldr	r3, [r7, #4]
   80bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   80bd6:	2b00      	cmp	r3, #0
   80bd8:	d016      	beq.n	80c08 <TWI0_Handler+0xec>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   80bda:	2102      	movs	r1, #2
   80bdc:	482e      	ldr	r0, [pc, #184]	; (80c98 <TWI0_Handler+0x17c>)
   80bde:	4b2f      	ldr	r3, [pc, #188]	; (80c9c <TWI0_Handler+0x180>)
   80be0:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   80be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80be6:	4829      	ldr	r0, [pc, #164]	; (80c8c <TWI0_Handler+0x170>)
   80be8:	4b2d      	ldr	r3, [pc, #180]	; (80ca0 <TWI0_Handler+0x184>)
   80bea:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   80bec:	2102      	movs	r1, #2
   80bee:	4827      	ldr	r0, [pc, #156]	; (80c8c <TWI0_Handler+0x170>)
   80bf0:	4b2c      	ldr	r3, [pc, #176]	; (80ca4 <TWI0_Handler+0x188>)
   80bf2:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   80bf4:	4b25      	ldr	r3, [pc, #148]	; (80c8c <TWI0_Handler+0x170>)
   80bf6:	2202      	movs	r2, #2
   80bf8:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   80bfa:	4824      	ldr	r0, [pc, #144]	; (80c8c <TWI0_Handler+0x170>)
   80bfc:	4b24      	ldr	r3, [pc, #144]	; (80c90 <TWI0_Handler+0x174>)
   80bfe:	4798      	blx	r3
   80c00:	4602      	mov	r2, r0
   80c02:	687b      	ldr	r3, [r7, #4]
   80c04:	4313      	orrs	r3, r2
   80c06:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   80c08:	687b      	ldr	r3, [r7, #4]
   80c0a:	f003 0302 	and.w	r3, r3, #2
   80c0e:	2b00      	cmp	r3, #0
   80c10:	d018      	beq.n	80c44 <TWI0_Handler+0x128>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   80c12:	2102      	movs	r1, #2
   80c14:	481d      	ldr	r0, [pc, #116]	; (80c8c <TWI0_Handler+0x170>)
   80c16:	4b22      	ldr	r3, [pc, #136]	; (80ca0 <TWI0_Handler+0x184>)
   80c18:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   80c1a:	4b26      	ldr	r3, [pc, #152]	; (80cb4 <TWI0_Handler+0x198>)
   80c1c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80c20:	3b01      	subs	r3, #1
   80c22:	4a1a      	ldr	r2, [pc, #104]	; (80c8c <TWI0_Handler+0x170>)
   80c24:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80c26:	b2d1      	uxtb	r1, r2
   80c28:	4a22      	ldr	r2, [pc, #136]	; (80cb4 <TWI0_Handler+0x198>)
   80c2a:	4413      	add	r3, r2
   80c2c:	460a      	mov	r2, r1
   80c2e:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(rxCallback != NULL)
   80c30:	4b21      	ldr	r3, [pc, #132]	; (80cb8 <TWI0_Handler+0x19c>)
   80c32:	681b      	ldr	r3, [r3, #0]
   80c34:	2b00      	cmp	r3, #0
   80c36:	d002      	beq.n	80c3e <TWI0_Handler+0x122>
        {
            rxCallback();
   80c38:	4b1f      	ldr	r3, [pc, #124]	; (80cb8 <TWI0_Handler+0x19c>)
   80c3a:	681b      	ldr	r3, [r3, #0]
   80c3c:	4798      	blx	r3
        }

        twiBusy = false;
   80c3e:	4b1c      	ldr	r3, [pc, #112]	; (80cb0 <TWI0_Handler+0x194>)
   80c40:	2200      	movs	r2, #0
   80c42:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   80c44:	687b      	ldr	r3, [r7, #4]
   80c46:	f403 7350 	and.w	r3, r3, #832	; 0x340
   80c4a:	2b00      	cmp	r3, #0
   80c4c:	d019      	beq.n	80c82 <TWI0_Handler+0x166>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   80c4e:	f240 2102 	movw	r1, #514	; 0x202
   80c52:	4811      	ldr	r0, [pc, #68]	; (80c98 <TWI0_Handler+0x17c>)
   80c54:	4b11      	ldr	r3, [pc, #68]	; (80c9c <TWI0_Handler+0x180>)
   80c56:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   80c58:	687b      	ldr	r3, [r7, #4]
   80c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
   80c5e:	2b00      	cmp	r3, #0
   80c60:	d102      	bne.n	80c68 <TWI0_Handler+0x14c>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   80c62:	4b0a      	ldr	r3, [pc, #40]	; (80c8c <TWI0_Handler+0x170>)
   80c64:	2202      	movs	r2, #2
   80c66:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   80c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80c6c:	4807      	ldr	r0, [pc, #28]	; (80c8c <TWI0_Handler+0x170>)
   80c6e:	4b0c      	ldr	r3, [pc, #48]	; (80ca0 <TWI0_Handler+0x184>)
   80c70:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   80c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80c76:	4805      	ldr	r0, [pc, #20]	; (80c8c <TWI0_Handler+0x170>)
   80c78:	4b09      	ldr	r3, [pc, #36]	; (80ca0 <TWI0_Handler+0x184>)
   80c7a:	4798      	blx	r3

        twiBusy = false;
   80c7c:	4b0c      	ldr	r3, [pc, #48]	; (80cb0 <TWI0_Handler+0x194>)
   80c7e:	2200      	movs	r2, #0
   80c80:	701a      	strb	r2, [r3, #0]
	}
}
   80c82:	bf00      	nop
   80c84:	370c      	adds	r7, #12
   80c86:	46bd      	mov	sp, r7
   80c88:	bd90      	pop	{r4, r7, pc}
   80c8a:	bf00      	nop
   80c8c:	4008c000 	.word	0x4008c000
   80c90:	00080cf5 	.word	0x00080cf5
   80c94:	00080d0b 	.word	0x00080d0b
   80c98:	4008c100 	.word	0x4008c100
   80c9c:	0008020b 	.word	0x0008020b
   80ca0:	00080cd7 	.word	0x00080cd7
   80ca4:	00080cbd 	.word	0x00080cbd
   80ca8:	20070b74 	.word	0x20070b74
   80cac:	20070f80 	.word	0x20070f80
   80cb0:	20070f7c 	.word	0x20070f7c
   80cb4:	20070d78 	.word	0x20070d78
   80cb8:	20070f84 	.word	0x20070f84

00080cbc <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   80cbc:	b480      	push	{r7}
   80cbe:	b083      	sub	sp, #12
   80cc0:	af00      	add	r7, sp, #0
   80cc2:	6078      	str	r0, [r7, #4]
   80cc4:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   80cc6:	687b      	ldr	r3, [r7, #4]
   80cc8:	683a      	ldr	r2, [r7, #0]
   80cca:	625a      	str	r2, [r3, #36]	; 0x24
}
   80ccc:	bf00      	nop
   80cce:	370c      	adds	r7, #12
   80cd0:	46bd      	mov	sp, r7
   80cd2:	bc80      	pop	{r7}
   80cd4:	4770      	bx	lr

00080cd6 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   80cd6:	b480      	push	{r7}
   80cd8:	b083      	sub	sp, #12
   80cda:	af00      	add	r7, sp, #0
   80cdc:	6078      	str	r0, [r7, #4]
   80cde:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   80ce0:	687b      	ldr	r3, [r7, #4]
   80ce2:	683a      	ldr	r2, [r7, #0]
   80ce4:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   80ce6:	687b      	ldr	r3, [r7, #4]
   80ce8:	6a1b      	ldr	r3, [r3, #32]
}
   80cea:	bf00      	nop
   80cec:	370c      	adds	r7, #12
   80cee:	46bd      	mov	sp, r7
   80cf0:	bc80      	pop	{r7}
   80cf2:	4770      	bx	lr

00080cf4 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   80cf4:	b480      	push	{r7}
   80cf6:	b083      	sub	sp, #12
   80cf8:	af00      	add	r7, sp, #0
   80cfa:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   80cfc:	687b      	ldr	r3, [r7, #4]
   80cfe:	6a1b      	ldr	r3, [r3, #32]
}
   80d00:	4618      	mov	r0, r3
   80d02:	370c      	adds	r7, #12
   80d04:	46bd      	mov	sp, r7
   80d06:	bc80      	pop	{r7}
   80d08:	4770      	bx	lr

00080d0a <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   80d0a:	b480      	push	{r7}
   80d0c:	b083      	sub	sp, #12
   80d0e:	af00      	add	r7, sp, #0
   80d10:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   80d12:	687b      	ldr	r3, [r7, #4]
   80d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   80d16:	4618      	mov	r0, r3
   80d18:	370c      	adds	r7, #12
   80d1a:	46bd      	mov	sp, r7
   80d1c:	bc80      	pop	{r7}
   80d1e:	4770      	bx	lr

00080d20 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   80d20:	b480      	push	{r7}
   80d22:	b083      	sub	sp, #12
   80d24:	af00      	add	r7, sp, #0
   80d26:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80d28:	687b      	ldr	r3, [r7, #4]
   80d2a:	2280      	movs	r2, #128	; 0x80
   80d2c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   80d2e:	687b      	ldr	r3, [r7, #4]
   80d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   80d32:	bf00      	nop
   80d34:	370c      	adds	r7, #12
   80d36:	46bd      	mov	sp, r7
   80d38:	bc80      	pop	{r7}
   80d3a:	4770      	bx	lr

00080d3c <osc_get_rate>:
{
   80d3c:	b480      	push	{r7}
   80d3e:	b083      	sub	sp, #12
   80d40:	af00      	add	r7, sp, #0
   80d42:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80d44:	687b      	ldr	r3, [r7, #4]
   80d46:	2b07      	cmp	r3, #7
   80d48:	d825      	bhi.n	80d96 <osc_get_rate+0x5a>
   80d4a:	a201      	add	r2, pc, #4	; (adr r2, 80d50 <osc_get_rate+0x14>)
   80d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d50:	00080d71 	.word	0x00080d71
   80d54:	00080d77 	.word	0x00080d77
   80d58:	00080d7d 	.word	0x00080d7d
   80d5c:	00080d83 	.word	0x00080d83
   80d60:	00080d87 	.word	0x00080d87
   80d64:	00080d8b 	.word	0x00080d8b
   80d68:	00080d8f 	.word	0x00080d8f
   80d6c:	00080d93 	.word	0x00080d93
		return OSC_SLCK_32K_RC_HZ;
   80d70:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80d74:	e010      	b.n	80d98 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   80d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80d7a:	e00d      	b.n	80d98 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   80d7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80d80:	e00a      	b.n	80d98 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   80d82:	4b08      	ldr	r3, [pc, #32]	; (80da4 <osc_get_rate+0x68>)
   80d84:	e008      	b.n	80d98 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   80d86:	4b08      	ldr	r3, [pc, #32]	; (80da8 <osc_get_rate+0x6c>)
   80d88:	e006      	b.n	80d98 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   80d8a:	4b08      	ldr	r3, [pc, #32]	; (80dac <osc_get_rate+0x70>)
   80d8c:	e004      	b.n	80d98 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   80d8e:	4b07      	ldr	r3, [pc, #28]	; (80dac <osc_get_rate+0x70>)
   80d90:	e002      	b.n	80d98 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   80d92:	4b06      	ldr	r3, [pc, #24]	; (80dac <osc_get_rate+0x70>)
   80d94:	e000      	b.n	80d98 <osc_get_rate+0x5c>
	return 0;
   80d96:	2300      	movs	r3, #0
}
   80d98:	4618      	mov	r0, r3
   80d9a:	370c      	adds	r7, #12
   80d9c:	46bd      	mov	sp, r7
   80d9e:	bc80      	pop	{r7}
   80da0:	4770      	bx	lr
   80da2:	bf00      	nop
   80da4:	003d0900 	.word	0x003d0900
   80da8:	007a1200 	.word	0x007a1200
   80dac:	00b71b00 	.word	0x00b71b00

00080db0 <sysclk_get_main_hz>:
{
   80db0:	b580      	push	{r7, lr}
   80db2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   80db4:	2006      	movs	r0, #6
   80db6:	4b04      	ldr	r3, [pc, #16]	; (80dc8 <sysclk_get_main_hz+0x18>)
   80db8:	4798      	blx	r3
   80dba:	4602      	mov	r2, r0
   80dbc:	4613      	mov	r3, r2
   80dbe:	00db      	lsls	r3, r3, #3
   80dc0:	1a9b      	subs	r3, r3, r2
   80dc2:	005b      	lsls	r3, r3, #1
}
   80dc4:	4618      	mov	r0, r3
   80dc6:	bd80      	pop	{r7, pc}
   80dc8:	00080d3d 	.word	0x00080d3d

00080dcc <sysclk_get_peripheral_hz>:
{
   80dcc:	b580      	push	{r7, lr}
   80dce:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   80dd0:	4b02      	ldr	r3, [pc, #8]	; (80ddc <sysclk_get_peripheral_hz+0x10>)
   80dd2:	4798      	blx	r3
   80dd4:	4603      	mov	r3, r0
   80dd6:	085b      	lsrs	r3, r3, #1
}
   80dd8:	4618      	mov	r0, r3
   80dda:	bd80      	pop	{r7, pc}
   80ddc:	00080db1 	.word	0x00080db1

00080de0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80de0:	b580      	push	{r7, lr}
   80de2:	b082      	sub	sp, #8
   80de4:	af00      	add	r7, sp, #0
   80de6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80de8:	6878      	ldr	r0, [r7, #4]
   80dea:	4b03      	ldr	r3, [pc, #12]	; (80df8 <sysclk_enable_peripheral_clock+0x18>)
   80dec:	4798      	blx	r3
}
   80dee:	bf00      	nop
   80df0:	3708      	adds	r7, #8
   80df2:	46bd      	mov	sp, r7
   80df4:	bd80      	pop	{r7, pc}
   80df6:	bf00      	nop
   80df8:	000828a9 	.word	0x000828a9

00080dfc <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   80dfc:	b580      	push	{r7, lr}
   80dfe:	b082      	sub	sp, #8
   80e00:	af00      	add	r7, sp, #0
   80e02:	6078      	str	r0, [r7, #4]
   80e04:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   80e06:	4b10      	ldr	r3, [pc, #64]	; (80e48 <twi_master_setup+0x4c>)
   80e08:	4798      	blx	r3
   80e0a:	4602      	mov	r2, r0
   80e0c:	683b      	ldr	r3, [r7, #0]
   80e0e:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   80e10:	683b      	ldr	r3, [r7, #0]
   80e12:	2200      	movs	r2, #0
   80e14:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   80e16:	687b      	ldr	r3, [r7, #4]
   80e18:	4a0c      	ldr	r2, [pc, #48]	; (80e4c <twi_master_setup+0x50>)
   80e1a:	4293      	cmp	r3, r2
   80e1c:	d103      	bne.n	80e26 <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   80e1e:	2016      	movs	r0, #22
   80e20:	4b0b      	ldr	r3, [pc, #44]	; (80e50 <twi_master_setup+0x54>)
   80e22:	4798      	blx	r3
   80e24:	e006      	b.n	80e34 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   80e26:	687b      	ldr	r3, [r7, #4]
   80e28:	4a0a      	ldr	r2, [pc, #40]	; (80e54 <twi_master_setup+0x58>)
   80e2a:	4293      	cmp	r3, r2
   80e2c:	d102      	bne.n	80e34 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   80e2e:	2017      	movs	r0, #23
   80e30:	4b07      	ldr	r3, [pc, #28]	; (80e50 <twi_master_setup+0x54>)
   80e32:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80e34:	6839      	ldr	r1, [r7, #0]
   80e36:	6878      	ldr	r0, [r7, #4]
   80e38:	4b07      	ldr	r3, [pc, #28]	; (80e58 <twi_master_setup+0x5c>)
   80e3a:	4798      	blx	r3
   80e3c:	4603      	mov	r3, r0
}
   80e3e:	4618      	mov	r0, r3
   80e40:	3708      	adds	r7, #8
   80e42:	46bd      	mov	sp, r7
   80e44:	bd80      	pop	{r7, pc}
   80e46:	bf00      	nop
   80e48:	00080dcd 	.word	0x00080dcd
   80e4c:	4008c000 	.word	0x4008c000
   80e50:	00080de1 	.word	0x00080de1
   80e54:	40090000 	.word	0x40090000
   80e58:	00080849 	.word	0x00080849

00080e5c <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   80e5c:	b580      	push	{r7, lr}
   80e5e:	b082      	sub	sp, #8
   80e60:	af00      	add	r7, sp, #0
    twi_package_t *tx_packet = twi_get_tx_packet();
   80e62:	4b29      	ldr	r3, [pc, #164]	; (80f08 <lcd_init+0xac>)
   80e64:	4798      	blx	r3
   80e66:	6078      	str	r0, [r7, #4]

    tx_packet->chip = 0x27;
   80e68:	687b      	ldr	r3, [r7, #4]
   80e6a:	2227      	movs	r2, #39	; 0x27
   80e6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
    tx_packet->addr[0] = 0x00;
   80e70:	687b      	ldr	r3, [r7, #4]
   80e72:	2200      	movs	r2, #0
   80e74:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   80e76:	687b      	ldr	r3, [r7, #4]
   80e78:	2200      	movs	r2, #0
   80e7a:	605a      	str	r2, [r3, #4]
    
    twi_set_tx_callback(lcd_callback);
   80e7c:	4823      	ldr	r0, [pc, #140]	; (80f0c <lcd_init+0xb0>)
   80e7e:	4b24      	ldr	r3, [pc, #144]	; (80f10 <lcd_init+0xb4>)
   80e80:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   80e82:	220c      	movs	r2, #12
   80e84:	2100      	movs	r1, #0
   80e86:	4823      	ldr	r0, [pc, #140]	; (80f14 <lcd_init+0xb8>)
   80e88:	4b23      	ldr	r3, [pc, #140]	; (80f18 <lcd_init+0xbc>)
   80e8a:	4798      	blx	r3
    twiConfig.speed = 100000;
   80e8c:	4b21      	ldr	r3, [pc, #132]	; (80f14 <lcd_init+0xb8>)
   80e8e:	4a23      	ldr	r2, [pc, #140]	; (80f1c <lcd_init+0xc0>)
   80e90:	605a      	str	r2, [r3, #4]
    twi_master_setup(TWI0, &twiConfig);
   80e92:	4920      	ldr	r1, [pc, #128]	; (80f14 <lcd_init+0xb8>)
   80e94:	4822      	ldr	r0, [pc, #136]	; (80f20 <lcd_init+0xc4>)
   80e96:	4b23      	ldr	r3, [pc, #140]	; (80f24 <lcd_init+0xc8>)
   80e98:	4798      	blx	r3

    backlight = LCD_LIGHT_OFF;
   80e9a:	4b23      	ldr	r3, [pc, #140]	; (80f28 <lcd_init+0xcc>)
   80e9c:	2200      	movs	r2, #0
   80e9e:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   80ea0:	2103      	movs	r1, #3
   80ea2:	2000      	movs	r0, #0
   80ea4:	4b21      	ldr	r3, [pc, #132]	; (80f2c <lcd_init+0xd0>)
   80ea6:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   80ea8:	2006      	movs	r0, #6
   80eaa:	4b21      	ldr	r3, [pc, #132]	; (80f30 <lcd_init+0xd4>)
   80eac:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   80eae:	2103      	movs	r1, #3
   80eb0:	2000      	movs	r0, #0
   80eb2:	4b1e      	ldr	r3, [pc, #120]	; (80f2c <lcd_init+0xd0>)
   80eb4:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   80eb6:	2006      	movs	r0, #6
   80eb8:	4b1d      	ldr	r3, [pc, #116]	; (80f30 <lcd_init+0xd4>)
   80eba:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   80ebc:	2103      	movs	r1, #3
   80ebe:	2000      	movs	r0, #0
   80ec0:	4b1a      	ldr	r3, [pc, #104]	; (80f2c <lcd_init+0xd0>)
   80ec2:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   80ec4:	2006      	movs	r0, #6
   80ec6:	4b1a      	ldr	r3, [pc, #104]	; (80f30 <lcd_init+0xd4>)
   80ec8:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   80eca:	2102      	movs	r1, #2
   80ecc:	2000      	movs	r0, #0
   80ece:	4b17      	ldr	r3, [pc, #92]	; (80f2c <lcd_init+0xd0>)
   80ed0:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   80ed2:	2128      	movs	r1, #40	; 0x28
   80ed4:	2000      	movs	r0, #0
   80ed6:	4b17      	ldr	r3, [pc, #92]	; (80f34 <lcd_init+0xd8>)
   80ed8:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   80eda:	2108      	movs	r1, #8
   80edc:	2000      	movs	r0, #0
   80ede:	4b15      	ldr	r3, [pc, #84]	; (80f34 <lcd_init+0xd8>)
   80ee0:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   80ee2:	2101      	movs	r1, #1
   80ee4:	2000      	movs	r0, #0
   80ee6:	4b13      	ldr	r3, [pc, #76]	; (80f34 <lcd_init+0xd8>)
   80ee8:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   80eea:	2003      	movs	r0, #3
   80eec:	4b10      	ldr	r3, [pc, #64]	; (80f30 <lcd_init+0xd4>)
   80eee:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   80ef0:	2106      	movs	r1, #6
   80ef2:	2000      	movs	r0, #0
   80ef4:	4b0f      	ldr	r3, [pc, #60]	; (80f34 <lcd_init+0xd8>)
   80ef6:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   80ef8:	210c      	movs	r1, #12
   80efa:	2000      	movs	r0, #0
   80efc:	4b0d      	ldr	r3, [pc, #52]	; (80f34 <lcd_init+0xd8>)
   80efe:	4798      	blx	r3
}
   80f00:	bf00      	nop
   80f02:	3708      	adds	r7, #8
   80f04:	46bd      	mov	sp, r7
   80f06:	bd80      	pop	{r7, pc}
   80f08:	00080a29 	.word	0x00080a29
   80f0c:	000813d9 	.word	0x000813d9
   80f10:	00080b01 	.word	0x00080b01
   80f14:	20070f94 	.word	0x20070f94
   80f18:	00083dbd 	.word	0x00083dbd
   80f1c:	000186a0 	.word	0x000186a0
   80f20:	4008c000 	.word	0x4008c000
   80f24:	00080dfd 	.word	0x00080dfd
   80f28:	20070f88 	.word	0x20070f88
   80f2c:	000811b1 	.word	0x000811b1
   80f30:	00081e05 	.word	0x00081e05
   80f34:	000812ad 	.word	0x000812ad

00080f38 <lcd_set_backlight>:

void lcd_set_backlight(backlight_t state)
{
   80f38:	b580      	push	{r7, lr}
   80f3a:	b082      	sub	sp, #8
   80f3c:	af00      	add	r7, sp, #0
   80f3e:	4603      	mov	r3, r0
   80f40:	71fb      	strb	r3, [r7, #7]
    backlight = state;
   80f42:	4a07      	ldr	r2, [pc, #28]	; (80f60 <lcd_set_backlight+0x28>)
   80f44:	79fb      	ldrb	r3, [r7, #7]
   80f46:	7013      	strb	r3, [r2, #0]
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   80f48:	2101      	movs	r1, #1
   80f4a:	2000      	movs	r0, #0
   80f4c:	4b05      	ldr	r3, [pc, #20]	; (80f64 <lcd_set_backlight+0x2c>)
   80f4e:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   80f50:	2003      	movs	r0, #3
   80f52:	4b05      	ldr	r3, [pc, #20]	; (80f68 <lcd_set_backlight+0x30>)
   80f54:	4798      	blx	r3
}
   80f56:	bf00      	nop
   80f58:	3708      	adds	r7, #8
   80f5a:	46bd      	mov	sp, r7
   80f5c:	bd80      	pop	{r7, pc}
   80f5e:	bf00      	nop
   80f60:	20070f88 	.word	0x20070f88
   80f64:	000812ad 	.word	0x000812ad
   80f68:	00081e05 	.word	0x00081e05

00080f6c <lcd_clear>:

void lcd_clear(void)
{
   80f6c:	b580      	push	{r7, lr}
   80f6e:	af00      	add	r7, sp, #0
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   80f70:	2101      	movs	r1, #1
   80f72:	2000      	movs	r0, #0
   80f74:	4b03      	ldr	r3, [pc, #12]	; (80f84 <lcd_clear+0x18>)
   80f76:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   80f78:	2003      	movs	r0, #3
   80f7a:	4b03      	ldr	r3, [pc, #12]	; (80f88 <lcd_clear+0x1c>)
   80f7c:	4798      	blx	r3
}
   80f7e:	bf00      	nop
   80f80:	bd80      	pop	{r7, pc}
   80f82:	bf00      	nop
   80f84:	000812ad 	.word	0x000812ad
   80f88:	00081e05 	.word	0x00081e05

00080f8c <lcd_print_s>:
    sprintf(str, "%10lu", data);
    lcd_print_s(line, col, str);
}

void lcd_print_s(int8_t line, uint8_t col, const char* str)
{
   80f8c:	b590      	push	{r4, r7, lr}
   80f8e:	b087      	sub	sp, #28
   80f90:	af00      	add	r7, sp, #0
   80f92:	4603      	mov	r3, r0
   80f94:	603a      	str	r2, [r7, #0]
   80f96:	71fb      	strb	r3, [r7, #7]
   80f98:	460b      	mov	r3, r1
   80f9a:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   80f9c:	4b76      	ldr	r3, [pc, #472]	; (81178 <lcd_print_s+0x1ec>)
   80f9e:	4798      	blx	r3
   80fa0:	6138      	str	r0, [r7, #16]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    
    while(lcdIsBusy | twi_is_busy())
   80fa2:	e019      	b.n	80fd8 <lcd_print_s+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   80fa4:	4b75      	ldr	r3, [pc, #468]	; (8117c <lcd_print_s+0x1f0>)
   80fa6:	4798      	blx	r3
   80fa8:	4602      	mov	r2, r0
   80faa:	4b75      	ldr	r3, [pc, #468]	; (81180 <lcd_print_s+0x1f4>)
   80fac:	681b      	ldr	r3, [r3, #0]
   80fae:	1ad3      	subs	r3, r2, r3
   80fb0:	2b0a      	cmp	r3, #10
   80fb2:	d911      	bls.n	80fd8 <lcd_print_s+0x4c>
        {
            lcdIsBusy = false;
   80fb4:	4b73      	ldr	r3, [pc, #460]	; (81184 <lcd_print_s+0x1f8>)
   80fb6:	2200      	movs	r2, #0
   80fb8:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   80fba:	4b73      	ldr	r3, [pc, #460]	; (81188 <lcd_print_s+0x1fc>)
   80fbc:	681b      	ldr	r3, [r3, #0]
   80fbe:	3301      	adds	r3, #1
   80fc0:	4a71      	ldr	r2, [pc, #452]	; (81188 <lcd_print_s+0x1fc>)
   80fc2:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   80fc4:	f240 2102 	movw	r1, #514	; 0x202
   80fc8:	4870      	ldr	r0, [pc, #448]	; (8118c <lcd_print_s+0x200>)
   80fca:	4b71      	ldr	r3, [pc, #452]	; (81190 <lcd_print_s+0x204>)
   80fcc:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   80fce:	4971      	ldr	r1, [pc, #452]	; (81194 <lcd_print_s+0x208>)
   80fd0:	4871      	ldr	r0, [pc, #452]	; (81198 <lcd_print_s+0x20c>)
   80fd2:	4b72      	ldr	r3, [pc, #456]	; (8119c <lcd_print_s+0x210>)
   80fd4:	4798      	blx	r3
            break;
   80fd6:	e009      	b.n	80fec <lcd_print_s+0x60>
    while(lcdIsBusy | twi_is_busy())
   80fd8:	4b71      	ldr	r3, [pc, #452]	; (811a0 <lcd_print_s+0x214>)
   80fda:	4798      	blx	r3
   80fdc:	4603      	mov	r3, r0
   80fde:	461a      	mov	r2, r3
   80fe0:	4b68      	ldr	r3, [pc, #416]	; (81184 <lcd_print_s+0x1f8>)
   80fe2:	781b      	ldrb	r3, [r3, #0]
   80fe4:	4313      	orrs	r3, r2
   80fe6:	b2db      	uxtb	r3, r3
   80fe8:	2b00      	cmp	r3, #0
   80fea:	d1db      	bne.n	80fa4 <lcd_print_s+0x18>
        }
    }
    
    // Calculate display address
    switch(line)
   80fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80ff0:	3b01      	subs	r3, #1
   80ff2:	2b03      	cmp	r3, #3
   80ff4:	f200 80bb 	bhi.w	8116e <lcd_print_s+0x1e2>
   80ff8:	a201      	add	r2, pc, #4	; (adr r2, 81000 <lcd_print_s+0x74>)
   80ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80ffe:	bf00      	nop
   81000:	00081011 	.word	0x00081011
   81004:	00081017 	.word	0x00081017
   81008:	0008101d 	.word	0x0008101d
   8100c:	00081023 	.word	0x00081023
    {
        case 1:
            addr = 0x80;          // set address to start of line 1
   81010:	2380      	movs	r3, #128	; 0x80
   81012:	75fb      	strb	r3, [r7, #23]
            break;
   81014:	e008      	b.n	81028 <lcd_print_s+0x9c>
        case 2:
            addr = 0x80 | 0x40;   // set address to start of line 2
   81016:	23c0      	movs	r3, #192	; 0xc0
   81018:	75fb      	strb	r3, [r7, #23]
            break;
   8101a:	e005      	b.n	81028 <lcd_print_s+0x9c>
        case 3:
            addr = 0x80 | 0x14;   // set address to start of line 3
   8101c:	2394      	movs	r3, #148	; 0x94
   8101e:	75fb      	strb	r3, [r7, #23]
            break;
   81020:	e002      	b.n	81028 <lcd_print_s+0x9c>
        case 4:
            addr = 0x80 | 0x54;   // set address to start of line 4
   81022:	23d4      	movs	r3, #212	; 0xd4
   81024:	75fb      	strb	r3, [r7, #23]
            break;
   81026:	bf00      	nop
        default:
            return;               // return immediately, if value is out of range
            break;
    }
    addr += col;  // set column in the selected line
   81028:	7dfa      	ldrb	r2, [r7, #23]
   8102a:	79bb      	ldrb	r3, [r7, #6]
   8102c:	4413      	add	r3, r2
   8102e:	75fb      	strb	r3, [r7, #23]

    // Set cursor
    cmd = LCD_FUNTION_WRITE | backlight;
   81030:	4b5c      	ldr	r3, [pc, #368]	; (811a4 <lcd_print_s+0x218>)
   81032:	781b      	ldrb	r3, [r3, #0]
   81034:	73fb      	strb	r3, [r7, #15]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   81036:	7dfb      	ldrb	r3, [r7, #23]
   81038:	f023 030f 	bic.w	r3, r3, #15
   8103c:	b2da      	uxtb	r2, r3
   8103e:	7bfb      	ldrb	r3, [r7, #15]
   81040:	4313      	orrs	r3, r2
   81042:	b2db      	uxtb	r3, r3
   81044:	f043 0304 	orr.w	r3, r3, #4
   81048:	b2da      	uxtb	r2, r3
   8104a:	693b      	ldr	r3, [r7, #16]
   8104c:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   8104e:	f997 3017 	ldrsb.w	r3, [r7, #23]
   81052:	f023 030f 	bic.w	r3, r3, #15
   81056:	b25a      	sxtb	r2, r3
   81058:	f997 300f 	ldrsb.w	r3, [r7, #15]
   8105c:	4313      	orrs	r3, r2
   8105e:	b25b      	sxtb	r3, r3
   81060:	b2da      	uxtb	r2, r3
   81062:	693b      	ldr	r3, [r7, #16]
   81064:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   81066:	7dfb      	ldrb	r3, [r7, #23]
   81068:	011b      	lsls	r3, r3, #4
   8106a:	b2da      	uxtb	r2, r3
   8106c:	7bfb      	ldrb	r3, [r7, #15]
   8106e:	4313      	orrs	r3, r2
   81070:	b2db      	uxtb	r3, r3
   81072:	f043 0304 	orr.w	r3, r3, #4
   81076:	b2da      	uxtb	r2, r3
   81078:	693b      	ldr	r3, [r7, #16]
   8107a:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   8107c:	7dfb      	ldrb	r3, [r7, #23]
   8107e:	011b      	lsls	r3, r3, #4
   81080:	b25a      	sxtb	r2, r3
   81082:	f997 300f 	ldrsb.w	r3, [r7, #15]
   81086:	4313      	orrs	r3, r2
   81088:	b25b      	sxtb	r3, r3
   8108a:	b2da      	uxtb	r2, r3
   8108c:	693b      	ldr	r3, [r7, #16]
   8108e:	72da      	strb	r2, [r3, #11]
    
    // write string ...
    cmd = LCD_WRITE_DDR | backlight;
   81090:	4b44      	ldr	r3, [pc, #272]	; (811a4 <lcd_print_s+0x218>)
   81092:	781b      	ldrb	r3, [r3, #0]
   81094:	f043 0301 	orr.w	r3, r3, #1
   81098:	73fb      	strb	r3, [r7, #15]
    for(count = 0; count < strlen(str); count++)
   8109a:	2300      	movs	r3, #0
   8109c:	75bb      	strb	r3, [r7, #22]
   8109e:	e04b      	b.n	81138 <lcd_print_s+0x1ac>
    {
        byte = str[count];
   810a0:	7dbb      	ldrb	r3, [r7, #22]
   810a2:	683a      	ldr	r2, [r7, #0]
   810a4:	4413      	add	r3, r2
   810a6:	781b      	ldrb	r3, [r3, #0]
   810a8:	73bb      	strb	r3, [r7, #14]
        tx_packet->buffer[4 + count * 4 + 0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   810aa:	7dbb      	ldrb	r3, [r7, #22]
   810ac:	3301      	adds	r3, #1
   810ae:	009b      	lsls	r3, r3, #2
   810b0:	7bba      	ldrb	r2, [r7, #14]
   810b2:	f022 020f 	bic.w	r2, r2, #15
   810b6:	b2d1      	uxtb	r1, r2
   810b8:	7bfa      	ldrb	r2, [r7, #15]
   810ba:	430a      	orrs	r2, r1
   810bc:	b2d2      	uxtb	r2, r2
   810be:	f042 0204 	orr.w	r2, r2, #4
   810c2:	b2d1      	uxtb	r1, r2
   810c4:	693a      	ldr	r2, [r7, #16]
   810c6:	4413      	add	r3, r2
   810c8:	460a      	mov	r2, r1
   810ca:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   810cc:	7dbb      	ldrb	r3, [r7, #22]
   810ce:	3301      	adds	r3, #1
   810d0:	009b      	lsls	r3, r3, #2
   810d2:	3301      	adds	r3, #1
   810d4:	f997 200e 	ldrsb.w	r2, [r7, #14]
   810d8:	f022 020f 	bic.w	r2, r2, #15
   810dc:	b251      	sxtb	r1, r2
   810de:	f997 200f 	ldrsb.w	r2, [r7, #15]
   810e2:	430a      	orrs	r2, r1
   810e4:	b252      	sxtb	r2, r2
   810e6:	b2d1      	uxtb	r1, r2
   810e8:	693a      	ldr	r2, [r7, #16]
   810ea:	4413      	add	r3, r2
   810ec:	460a      	mov	r2, r1
   810ee:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   810f0:	7dbb      	ldrb	r3, [r7, #22]
   810f2:	3301      	adds	r3, #1
   810f4:	009b      	lsls	r3, r3, #2
   810f6:	3302      	adds	r3, #2
   810f8:	7bba      	ldrb	r2, [r7, #14]
   810fa:	0112      	lsls	r2, r2, #4
   810fc:	b2d1      	uxtb	r1, r2
   810fe:	7bfa      	ldrb	r2, [r7, #15]
   81100:	430a      	orrs	r2, r1
   81102:	b2d2      	uxtb	r2, r2
   81104:	f042 0204 	orr.w	r2, r2, #4
   81108:	b2d1      	uxtb	r1, r2
   8110a:	693a      	ldr	r2, [r7, #16]
   8110c:	4413      	add	r3, r2
   8110e:	460a      	mov	r2, r1
   81110:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81112:	7dbb      	ldrb	r3, [r7, #22]
   81114:	3301      	adds	r3, #1
   81116:	009b      	lsls	r3, r3, #2
   81118:	3303      	adds	r3, #3
   8111a:	7bba      	ldrb	r2, [r7, #14]
   8111c:	0112      	lsls	r2, r2, #4
   8111e:	b251      	sxtb	r1, r2
   81120:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81124:	430a      	orrs	r2, r1
   81126:	b252      	sxtb	r2, r2
   81128:	b2d1      	uxtb	r1, r2
   8112a:	693a      	ldr	r2, [r7, #16]
   8112c:	4413      	add	r3, r2
   8112e:	460a      	mov	r2, r1
   81130:	721a      	strb	r2, [r3, #8]
    for(count = 0; count < strlen(str); count++)
   81132:	7dbb      	ldrb	r3, [r7, #22]
   81134:	3301      	adds	r3, #1
   81136:	75bb      	strb	r3, [r7, #22]
   81138:	7dbc      	ldrb	r4, [r7, #22]
   8113a:	6838      	ldr	r0, [r7, #0]
   8113c:	4b1a      	ldr	r3, [pc, #104]	; (811a8 <lcd_print_s+0x21c>)
   8113e:	4798      	blx	r3
   81140:	4603      	mov	r3, r0
   81142:	429c      	cmp	r4, r3
   81144:	d3ac      	bcc.n	810a0 <lcd_print_s+0x114>
    }
    tx_packet->length = 4 + count * 4;
   81146:	7dbb      	ldrb	r3, [r7, #22]
   81148:	3301      	adds	r3, #1
   8114a:	009b      	lsls	r3, r3, #2
   8114c:	461a      	mov	r2, r3
   8114e:	693b      	ldr	r3, [r7, #16]
   81150:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

    lcdIsBusy = true;
   81154:	4b0b      	ldr	r3, [pc, #44]	; (81184 <lcd_print_s+0x1f8>)
   81156:	2201      	movs	r2, #1
   81158:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   8115a:	6939      	ldr	r1, [r7, #16]
   8115c:	480e      	ldr	r0, [pc, #56]	; (81198 <lcd_print_s+0x20c>)
   8115e:	4b13      	ldr	r3, [pc, #76]	; (811ac <lcd_print_s+0x220>)
   81160:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81162:	4b06      	ldr	r3, [pc, #24]	; (8117c <lcd_print_s+0x1f0>)
   81164:	4798      	blx	r3
   81166:	4602      	mov	r2, r0
   81168:	4b05      	ldr	r3, [pc, #20]	; (81180 <lcd_print_s+0x1f4>)
   8116a:	601a      	str	r2, [r3, #0]
   8116c:	e000      	b.n	81170 <lcd_print_s+0x1e4>
            return;               // return immediately, if value is out of range
   8116e:	bf00      	nop
}
   81170:	371c      	adds	r7, #28
   81172:	46bd      	mov	sp, r7
   81174:	bd90      	pop	{r4, r7, pc}
   81176:	bf00      	nop
   81178:	00080a29 	.word	0x00080a29
   8117c:	00081df1 	.word	0x00081df1
   81180:	20070f8c 	.word	0x20070f8c
   81184:	20070f89 	.word	0x20070f89
   81188:	20070f90 	.word	0x20070f90
   8118c:	4008c100 	.word	0x4008c100
   81190:	0008020b 	.word	0x0008020b
   81194:	20070f94 	.word	0x20070f94
   81198:	4008c000 	.word	0x4008c000
   8119c:	00080dfd 	.word	0x00080dfd
   811a0:	00080a15 	.word	0x00080a15
   811a4:	20070f88 	.word	0x20070f88
   811a8:	00083ea5 	.word	0x00083ea5
   811ac:	00080a3d 	.word	0x00080a3d

000811b0 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   811b0:	b580      	push	{r7, lr}
   811b2:	b084      	sub	sp, #16
   811b4:	af00      	add	r7, sp, #0
   811b6:	4603      	mov	r3, r0
   811b8:	460a      	mov	r2, r1
   811ba:	71fb      	strb	r3, [r7, #7]
   811bc:	4613      	mov	r3, r2
   811be:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   811c0:	4b2d      	ldr	r3, [pc, #180]	; (81278 <send_nibble+0xc8>)
   811c2:	4798      	blx	r3
   811c4:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   811c6:	e019      	b.n	811fc <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   811c8:	4b2c      	ldr	r3, [pc, #176]	; (8127c <send_nibble+0xcc>)
   811ca:	4798      	blx	r3
   811cc:	4602      	mov	r2, r0
   811ce:	4b2c      	ldr	r3, [pc, #176]	; (81280 <send_nibble+0xd0>)
   811d0:	681b      	ldr	r3, [r3, #0]
   811d2:	1ad3      	subs	r3, r2, r3
   811d4:	2b0a      	cmp	r3, #10
   811d6:	d911      	bls.n	811fc <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   811d8:	4b2a      	ldr	r3, [pc, #168]	; (81284 <send_nibble+0xd4>)
   811da:	2200      	movs	r2, #0
   811dc:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   811de:	4b2a      	ldr	r3, [pc, #168]	; (81288 <send_nibble+0xd8>)
   811e0:	681b      	ldr	r3, [r3, #0]
   811e2:	3301      	adds	r3, #1
   811e4:	4a28      	ldr	r2, [pc, #160]	; (81288 <send_nibble+0xd8>)
   811e6:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   811e8:	f240 2102 	movw	r1, #514	; 0x202
   811ec:	4827      	ldr	r0, [pc, #156]	; (8128c <send_nibble+0xdc>)
   811ee:	4b28      	ldr	r3, [pc, #160]	; (81290 <send_nibble+0xe0>)
   811f0:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   811f2:	4928      	ldr	r1, [pc, #160]	; (81294 <send_nibble+0xe4>)
   811f4:	4828      	ldr	r0, [pc, #160]	; (81298 <send_nibble+0xe8>)
   811f6:	4b29      	ldr	r3, [pc, #164]	; (8129c <send_nibble+0xec>)
   811f8:	4798      	blx	r3
            break;
   811fa:	e009      	b.n	81210 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   811fc:	4b28      	ldr	r3, [pc, #160]	; (812a0 <send_nibble+0xf0>)
   811fe:	4798      	blx	r3
   81200:	4603      	mov	r3, r0
   81202:	461a      	mov	r2, r3
   81204:	4b1f      	ldr	r3, [pc, #124]	; (81284 <send_nibble+0xd4>)
   81206:	781b      	ldrb	r3, [r3, #0]
   81208:	4313      	orrs	r3, r2
   8120a:	b2db      	uxtb	r3, r3
   8120c:	2b00      	cmp	r3, #0
   8120e:	d1db      	bne.n	811c8 <send_nibble+0x18>
        }
    }

    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81210:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81214:	f003 030f 	and.w	r3, r3, #15
   81218:	b25a      	sxtb	r2, r3
   8121a:	4b22      	ldr	r3, [pc, #136]	; (812a4 <send_nibble+0xf4>)
   8121c:	781b      	ldrb	r3, [r3, #0]
   8121e:	b25b      	sxtb	r3, r3
   81220:	4313      	orrs	r3, r2
   81222:	b25b      	sxtb	r3, r3
   81224:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81226:	79bb      	ldrb	r3, [r7, #6]
   81228:	011b      	lsls	r3, r3, #4
   8122a:	b2da      	uxtb	r2, r3
   8122c:	79fb      	ldrb	r3, [r7, #7]
   8122e:	4313      	orrs	r3, r2
   81230:	b2db      	uxtb	r3, r3
   81232:	f043 0304 	orr.w	r3, r3, #4
   81236:	b2da      	uxtb	r2, r3
   81238:	68fb      	ldr	r3, [r7, #12]
   8123a:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   8123c:	79bb      	ldrb	r3, [r7, #6]
   8123e:	011b      	lsls	r3, r3, #4
   81240:	b25a      	sxtb	r2, r3
   81242:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81246:	4313      	orrs	r3, r2
   81248:	b25b      	sxtb	r3, r3
   8124a:	b2da      	uxtb	r2, r3
   8124c:	68fb      	ldr	r3, [r7, #12]
   8124e:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   81250:	68fb      	ldr	r3, [r7, #12]
   81252:	2202      	movs	r2, #2
   81254:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    
    lcdIsBusy = true;
   81258:	4b0a      	ldr	r3, [pc, #40]	; (81284 <send_nibble+0xd4>)
   8125a:	2201      	movs	r2, #1
   8125c:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   8125e:	68f9      	ldr	r1, [r7, #12]
   81260:	480d      	ldr	r0, [pc, #52]	; (81298 <send_nibble+0xe8>)
   81262:	4b11      	ldr	r3, [pc, #68]	; (812a8 <send_nibble+0xf8>)
   81264:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81266:	4b05      	ldr	r3, [pc, #20]	; (8127c <send_nibble+0xcc>)
   81268:	4798      	blx	r3
   8126a:	4602      	mov	r2, r0
   8126c:	4b04      	ldr	r3, [pc, #16]	; (81280 <send_nibble+0xd0>)
   8126e:	601a      	str	r2, [r3, #0]
}
   81270:	bf00      	nop
   81272:	3710      	adds	r7, #16
   81274:	46bd      	mov	sp, r7
   81276:	bd80      	pop	{r7, pc}
   81278:	00080a29 	.word	0x00080a29
   8127c:	00081df1 	.word	0x00081df1
   81280:	20070f8c 	.word	0x20070f8c
   81284:	20070f89 	.word	0x20070f89
   81288:	20070f90 	.word	0x20070f90
   8128c:	4008c100 	.word	0x4008c100
   81290:	0008020b 	.word	0x0008020b
   81294:	20070f94 	.word	0x20070f94
   81298:	4008c000 	.word	0x4008c000
   8129c:	00080dfd 	.word	0x00080dfd
   812a0:	00080a15 	.word	0x00080a15
   812a4:	20070f88 	.word	0x20070f88
   812a8:	00080a3d 	.word	0x00080a3d

000812ac <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   812ac:	b580      	push	{r7, lr}
   812ae:	b084      	sub	sp, #16
   812b0:	af00      	add	r7, sp, #0
   812b2:	4603      	mov	r3, r0
   812b4:	460a      	mov	r2, r1
   812b6:	71fb      	strb	r3, [r7, #7]
   812b8:	4613      	mov	r3, r2
   812ba:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   812bc:	4b39      	ldr	r3, [pc, #228]	; (813a4 <send_byte+0xf8>)
   812be:	4798      	blx	r3
   812c0:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   812c2:	e019      	b.n	812f8 <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   812c4:	4b38      	ldr	r3, [pc, #224]	; (813a8 <send_byte+0xfc>)
   812c6:	4798      	blx	r3
   812c8:	4602      	mov	r2, r0
   812ca:	4b38      	ldr	r3, [pc, #224]	; (813ac <send_byte+0x100>)
   812cc:	681b      	ldr	r3, [r3, #0]
   812ce:	1ad3      	subs	r3, r2, r3
   812d0:	2b0a      	cmp	r3, #10
   812d2:	d911      	bls.n	812f8 <send_byte+0x4c>
        {
            lcdIsBusy = false;
   812d4:	4b36      	ldr	r3, [pc, #216]	; (813b0 <send_byte+0x104>)
   812d6:	2200      	movs	r2, #0
   812d8:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   812da:	4b36      	ldr	r3, [pc, #216]	; (813b4 <send_byte+0x108>)
   812dc:	681b      	ldr	r3, [r3, #0]
   812de:	3301      	adds	r3, #1
   812e0:	4a34      	ldr	r2, [pc, #208]	; (813b4 <send_byte+0x108>)
   812e2:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   812e4:	f240 2102 	movw	r1, #514	; 0x202
   812e8:	4833      	ldr	r0, [pc, #204]	; (813b8 <send_byte+0x10c>)
   812ea:	4b34      	ldr	r3, [pc, #208]	; (813bc <send_byte+0x110>)
   812ec:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   812ee:	4934      	ldr	r1, [pc, #208]	; (813c0 <send_byte+0x114>)
   812f0:	4834      	ldr	r0, [pc, #208]	; (813c4 <send_byte+0x118>)
   812f2:	4b35      	ldr	r3, [pc, #212]	; (813c8 <send_byte+0x11c>)
   812f4:	4798      	blx	r3
            break;
   812f6:	e009      	b.n	8130c <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   812f8:	4b34      	ldr	r3, [pc, #208]	; (813cc <send_byte+0x120>)
   812fa:	4798      	blx	r3
   812fc:	4603      	mov	r3, r0
   812fe:	461a      	mov	r2, r3
   81300:	4b2b      	ldr	r3, [pc, #172]	; (813b0 <send_byte+0x104>)
   81302:	781b      	ldrb	r3, [r3, #0]
   81304:	4313      	orrs	r3, r2
   81306:	b2db      	uxtb	r3, r3
   81308:	2b00      	cmp	r3, #0
   8130a:	d1db      	bne.n	812c4 <send_byte+0x18>
        }
    }

    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   8130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81310:	f003 030f 	and.w	r3, r3, #15
   81314:	b25a      	sxtb	r2, r3
   81316:	4b2e      	ldr	r3, [pc, #184]	; (813d0 <send_byte+0x124>)
   81318:	781b      	ldrb	r3, [r3, #0]
   8131a:	b25b      	sxtb	r3, r3
   8131c:	4313      	orrs	r3, r2
   8131e:	b25b      	sxtb	r3, r3
   81320:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   81322:	79bb      	ldrb	r3, [r7, #6]
   81324:	f023 030f 	bic.w	r3, r3, #15
   81328:	b2da      	uxtb	r2, r3
   8132a:	79fb      	ldrb	r3, [r7, #7]
   8132c:	4313      	orrs	r3, r2
   8132e:	b2db      	uxtb	r3, r3
   81330:	f043 0304 	orr.w	r3, r3, #4
   81334:	b2da      	uxtb	r2, r3
   81336:	68fb      	ldr	r3, [r7, #12]
   81338:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   8133a:	f997 3006 	ldrsb.w	r3, [r7, #6]
   8133e:	f023 030f 	bic.w	r3, r3, #15
   81342:	b25a      	sxtb	r2, r3
   81344:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81348:	4313      	orrs	r3, r2
   8134a:	b25b      	sxtb	r3, r3
   8134c:	b2da      	uxtb	r2, r3
   8134e:	68fb      	ldr	r3, [r7, #12]
   81350:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81352:	79bb      	ldrb	r3, [r7, #6]
   81354:	011b      	lsls	r3, r3, #4
   81356:	b2da      	uxtb	r2, r3
   81358:	79fb      	ldrb	r3, [r7, #7]
   8135a:	4313      	orrs	r3, r2
   8135c:	b2db      	uxtb	r3, r3
   8135e:	f043 0304 	orr.w	r3, r3, #4
   81362:	b2da      	uxtb	r2, r3
   81364:	68fb      	ldr	r3, [r7, #12]
   81366:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81368:	79bb      	ldrb	r3, [r7, #6]
   8136a:	011b      	lsls	r3, r3, #4
   8136c:	b25a      	sxtb	r2, r3
   8136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81372:	4313      	orrs	r3, r2
   81374:	b25b      	sxtb	r3, r3
   81376:	b2da      	uxtb	r2, r3
   81378:	68fb      	ldr	r3, [r7, #12]
   8137a:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   8137c:	68fb      	ldr	r3, [r7, #12]
   8137e:	2204      	movs	r2, #4
   81380:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    
    lcdIsBusy = true;
   81384:	4b0a      	ldr	r3, [pc, #40]	; (813b0 <send_byte+0x104>)
   81386:	2201      	movs	r2, #1
   81388:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   8138a:	68f9      	ldr	r1, [r7, #12]
   8138c:	480d      	ldr	r0, [pc, #52]	; (813c4 <send_byte+0x118>)
   8138e:	4b11      	ldr	r3, [pc, #68]	; (813d4 <send_byte+0x128>)
   81390:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81392:	4b05      	ldr	r3, [pc, #20]	; (813a8 <send_byte+0xfc>)
   81394:	4798      	blx	r3
   81396:	4602      	mov	r2, r0
   81398:	4b04      	ldr	r3, [pc, #16]	; (813ac <send_byte+0x100>)
   8139a:	601a      	str	r2, [r3, #0]
}
   8139c:	bf00      	nop
   8139e:	3710      	adds	r7, #16
   813a0:	46bd      	mov	sp, r7
   813a2:	bd80      	pop	{r7, pc}
   813a4:	00080a29 	.word	0x00080a29
   813a8:	00081df1 	.word	0x00081df1
   813ac:	20070f8c 	.word	0x20070f8c
   813b0:	20070f89 	.word	0x20070f89
   813b4:	20070f90 	.word	0x20070f90
   813b8:	4008c100 	.word	0x4008c100
   813bc:	0008020b 	.word	0x0008020b
   813c0:	20070f94 	.word	0x20070f94
   813c4:	4008c000 	.word	0x4008c000
   813c8:	00080dfd 	.word	0x00080dfd
   813cc:	00080a15 	.word	0x00080a15
   813d0:	20070f88 	.word	0x20070f88
   813d4:	00080a3d 	.word	0x00080a3d

000813d8 <lcd_callback>:

static void lcd_callback(void)
{
   813d8:	b480      	push	{r7}
   813da:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   813dc:	4b03      	ldr	r3, [pc, #12]	; (813ec <lcd_callback+0x14>)
   813de:	2200      	movs	r2, #0
   813e0:	701a      	strb	r2, [r3, #0]
}
   813e2:	bf00      	nop
   813e4:	46bd      	mov	sp, r7
   813e6:	bc80      	pop	{r7}
   813e8:	4770      	bx	lr
   813ea:	bf00      	nop
   813ec:	20070f89 	.word	0x20070f89

000813f0 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   813f0:	b480      	push	{r7}
   813f2:	b089      	sub	sp, #36	; 0x24
   813f4:	af00      	add	r7, sp, #0
   813f6:	6078      	str	r0, [r7, #4]
   813f8:	687b      	ldr	r3, [r7, #4]
   813fa:	61fb      	str	r3, [r7, #28]
   813fc:	69fb      	ldr	r3, [r7, #28]
   813fe:	61bb      	str	r3, [r7, #24]
   81400:	69bb      	ldr	r3, [r7, #24]
   81402:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81404:	697b      	ldr	r3, [r7, #20]
   81406:	095b      	lsrs	r3, r3, #5
   81408:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8140a:	693b      	ldr	r3, [r7, #16]
   8140c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81410:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81414:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   81418:	69fb      	ldr	r3, [r7, #28]
   8141a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8141c:	68fb      	ldr	r3, [r7, #12]
   8141e:	f003 031f 	and.w	r3, r3, #31
   81422:	2101      	movs	r1, #1
   81424:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81428:	4013      	ands	r3, r2
   8142a:	2b00      	cmp	r3, #0
   8142c:	bf14      	ite	ne
   8142e:	2301      	movne	r3, #1
   81430:	2300      	moveq	r3, #0
   81432:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   81434:	4618      	mov	r0, r3
   81436:	3724      	adds	r7, #36	; 0x24
   81438:	46bd      	mov	sp, r7
   8143a:	bc80      	pop	{r7}
   8143c:	4770      	bx	lr
	...

00081440 <menu>:

uint32_t cnt = 0;


void menu(event_t event1)
{
   81440:	b580      	push	{r7, lr}
   81442:	b082      	sub	sp, #8
   81444:	af00      	add	r7, sp, #0
   81446:	4603      	mov	r3, r0
   81448:	71fb      	strb	r3, [r7, #7]
    switch (event1)
   8144a:	79fb      	ldrb	r3, [r7, #7]
   8144c:	2b01      	cmp	r3, #1
   8144e:	d002      	beq.n	81456 <menu+0x16>
   81450:	2b0d      	cmp	r3, #13
   81452:	d026      	beq.n	814a2 <menu+0x62>
                    print_cursor();
                }
            }
            break;
        default:
            break;
   81454:	e04e      	b.n	814f4 <menu+0xb4>
            if (act_cursor_line > min_cursor_line)
   81456:	4b32      	ldr	r3, [pc, #200]	; (81520 <menu+0xe0>)
   81458:	781a      	ldrb	r2, [r3, #0]
   8145a:	4b32      	ldr	r3, [pc, #200]	; (81524 <menu+0xe4>)
   8145c:	781b      	ldrb	r3, [r3, #0]
   8145e:	429a      	cmp	r2, r3
   81460:	d945      	bls.n	814ee <menu+0xae>
                act_cursor_line--;
   81462:	4b2f      	ldr	r3, [pc, #188]	; (81520 <menu+0xe0>)
   81464:	781b      	ldrb	r3, [r3, #0]
   81466:	3b01      	subs	r3, #1
   81468:	b2da      	uxtb	r2, r3
   8146a:	4b2d      	ldr	r3, [pc, #180]	; (81520 <menu+0xe0>)
   8146c:	701a      	strb	r2, [r3, #0]
                if (act_cursor_line_on_lcd == 1)
   8146e:	4b2e      	ldr	r3, [pc, #184]	; (81528 <menu+0xe8>)
   81470:	781b      	ldrb	r3, [r3, #0]
   81472:	2b01      	cmp	r3, #1
   81474:	d10c      	bne.n	81490 <menu+0x50>
                    if (act_menu == MENU_MAIN)
   81476:	4b2d      	ldr	r3, [pc, #180]	; (8152c <menu+0xec>)
   81478:	781b      	ldrb	r3, [r3, #0]
   8147a:	2b00      	cmp	r3, #0
   8147c:	d137      	bne.n	814ee <menu+0xae>
                        menu_main_scroll--;
   8147e:	4b2c      	ldr	r3, [pc, #176]	; (81530 <menu+0xf0>)
   81480:	781b      	ldrb	r3, [r3, #0]
   81482:	3b01      	subs	r3, #1
   81484:	b2da      	uxtb	r2, r3
   81486:	4b2a      	ldr	r3, [pc, #168]	; (81530 <menu+0xf0>)
   81488:	701a      	strb	r2, [r3, #0]
                        print_menu_main();
   8148a:	4b2a      	ldr	r3, [pc, #168]	; (81534 <menu+0xf4>)
   8148c:	4798      	blx	r3
            break;
   8148e:	e02e      	b.n	814ee <menu+0xae>
                    act_cursor_line_on_lcd--;
   81490:	4b25      	ldr	r3, [pc, #148]	; (81528 <menu+0xe8>)
   81492:	781b      	ldrb	r3, [r3, #0]
   81494:	3b01      	subs	r3, #1
   81496:	b2da      	uxtb	r2, r3
   81498:	4b23      	ldr	r3, [pc, #140]	; (81528 <menu+0xe8>)
   8149a:	701a      	strb	r2, [r3, #0]
                    print_cursor();
   8149c:	4b26      	ldr	r3, [pc, #152]	; (81538 <menu+0xf8>)
   8149e:	4798      	blx	r3
            break;
   814a0:	e025      	b.n	814ee <menu+0xae>
            if (act_cursor_line < max_cursor_line)
   814a2:	4b1f      	ldr	r3, [pc, #124]	; (81520 <menu+0xe0>)
   814a4:	781a      	ldrb	r2, [r3, #0]
   814a6:	4b25      	ldr	r3, [pc, #148]	; (8153c <menu+0xfc>)
   814a8:	781b      	ldrb	r3, [r3, #0]
   814aa:	429a      	cmp	r2, r3
   814ac:	d221      	bcs.n	814f2 <menu+0xb2>
                act_cursor_line++;
   814ae:	4b1c      	ldr	r3, [pc, #112]	; (81520 <menu+0xe0>)
   814b0:	781b      	ldrb	r3, [r3, #0]
   814b2:	3301      	adds	r3, #1
   814b4:	b2da      	uxtb	r2, r3
   814b6:	4b1a      	ldr	r3, [pc, #104]	; (81520 <menu+0xe0>)
   814b8:	701a      	strb	r2, [r3, #0]
                if (act_cursor_line_on_lcd == 4)
   814ba:	4b1b      	ldr	r3, [pc, #108]	; (81528 <menu+0xe8>)
   814bc:	781b      	ldrb	r3, [r3, #0]
   814be:	2b04      	cmp	r3, #4
   814c0:	d10c      	bne.n	814dc <menu+0x9c>
                    if (act_menu == MENU_MAIN)
   814c2:	4b1a      	ldr	r3, [pc, #104]	; (8152c <menu+0xec>)
   814c4:	781b      	ldrb	r3, [r3, #0]
   814c6:	2b00      	cmp	r3, #0
   814c8:	d113      	bne.n	814f2 <menu+0xb2>
                        menu_main_scroll++;
   814ca:	4b19      	ldr	r3, [pc, #100]	; (81530 <menu+0xf0>)
   814cc:	781b      	ldrb	r3, [r3, #0]
   814ce:	3301      	adds	r3, #1
   814d0:	b2da      	uxtb	r2, r3
   814d2:	4b17      	ldr	r3, [pc, #92]	; (81530 <menu+0xf0>)
   814d4:	701a      	strb	r2, [r3, #0]
                        print_menu_main();
   814d6:	4b17      	ldr	r3, [pc, #92]	; (81534 <menu+0xf4>)
   814d8:	4798      	blx	r3
            break;
   814da:	e00a      	b.n	814f2 <menu+0xb2>
                    act_cursor_line_on_lcd++;
   814dc:	4b12      	ldr	r3, [pc, #72]	; (81528 <menu+0xe8>)
   814de:	781b      	ldrb	r3, [r3, #0]
   814e0:	3301      	adds	r3, #1
   814e2:	b2da      	uxtb	r2, r3
   814e4:	4b10      	ldr	r3, [pc, #64]	; (81528 <menu+0xe8>)
   814e6:	701a      	strb	r2, [r3, #0]
                    print_cursor();
   814e8:	4b13      	ldr	r3, [pc, #76]	; (81538 <menu+0xf8>)
   814ea:	4798      	blx	r3
            break;
   814ec:	e001      	b.n	814f2 <menu+0xb2>
            break;
   814ee:	bf00      	nop
   814f0:	e000      	b.n	814f4 <menu+0xb4>
            break;
   814f2:	bf00      	nop
    }
	
    switch (act_menu)
   814f4:	4b0d      	ldr	r3, [pc, #52]	; (8152c <menu+0xec>)
   814f6:	781b      	ldrb	r3, [r3, #0]
   814f8:	2b00      	cmp	r3, #0
   814fa:	d002      	beq.n	81502 <menu+0xc2>
   814fc:	2b01      	cmp	r3, #1
   814fe:	d005      	beq.n	8150c <menu+0xcc>
            break;
        case MENU_SETTINGS:
            menu_settings(event1);
            break;
        default:
            break;
   81500:	e009      	b.n	81516 <menu+0xd6>
            menu_main(event1);
   81502:	79fb      	ldrb	r3, [r7, #7]
   81504:	4618      	mov	r0, r3
   81506:	4b0e      	ldr	r3, [pc, #56]	; (81540 <menu+0x100>)
   81508:	4798      	blx	r3
            break;
   8150a:	e004      	b.n	81516 <menu+0xd6>
            menu_settings(event1);
   8150c:	79fb      	ldrb	r3, [r7, #7]
   8150e:	4618      	mov	r0, r3
   81510:	4b0c      	ldr	r3, [pc, #48]	; (81544 <menu+0x104>)
   81512:	4798      	blx	r3
            break;
   81514:	bf00      	nop
    }
}
   81516:	bf00      	nop
   81518:	3708      	adds	r7, #8
   8151a:	46bd      	mov	sp, r7
   8151c:	bd80      	pop	{r7, pc}
   8151e:	bf00      	nop
   81520:	20070190 	.word	0x20070190
   81524:	20070192 	.word	0x20070192
   81528:	2007018e 	.word	0x2007018e
   8152c:	20070fa0 	.word	0x20070fa0
   81530:	20070fa1 	.word	0x20070fa1
   81534:	00081695 	.word	0x00081695
   81538:	00081965 	.word	0x00081965
   8153c:	20070193 	.word	0x20070193
   81540:	00081549 	.word	0x00081549
   81544:	00081681 	.word	0x00081681

00081548 <menu_main>:

void menu_main(event_t event1)
{
   81548:	b580      	push	{r7, lr}
   8154a:	b082      	sub	sp, #8
   8154c:	af00      	add	r7, sp, #0
   8154e:	4603      	mov	r3, r0
   81550:	71fb      	strb	r3, [r7, #7]
    switch (event1)
   81552:	79fb      	ldrb	r3, [r7, #7]
   81554:	2b07      	cmp	r3, #7
   81556:	d004      	beq.n	81562 <menu_main+0x1a>
   81558:	2b0a      	cmp	r3, #10
   8155a:	d066      	beq.n	8162a <menu_main+0xe2>
   8155c:	2b04      	cmp	r3, #4
   8155e:	d052      	beq.n	81606 <menu_main+0xbe>
                }
                print_menu = 1;
            }
            break;
        default:
            break;
   81560:	e078      	b.n	81654 <menu_main+0x10c>
            switch (menu_main_column)
   81562:	4b43      	ldr	r3, [pc, #268]	; (81670 <menu_main+0x128>)
   81564:	781b      	ldrb	r3, [r3, #0]
   81566:	2b01      	cmp	r3, #1
   81568:	d01c      	beq.n	815a4 <menu_main+0x5c>
   8156a:	2b02      	cmp	r3, #2
   8156c:	d032      	beq.n	815d4 <menu_main+0x8c>
   8156e:	2b00      	cmp	r3, #0
   81570:	d000      	beq.n	81574 <menu_main+0x2c>
            break;
   81572:	e06f      	b.n	81654 <menu_main+0x10c>
                    switch (act_cursor_line)
   81574:	4b3f      	ldr	r3, [pc, #252]	; (81674 <menu_main+0x12c>)
   81576:	781b      	ldrb	r3, [r3, #0]
   81578:	3b02      	subs	r3, #2
   8157a:	2b06      	cmp	r3, #6
   8157c:	d810      	bhi.n	815a0 <menu_main+0x58>
   8157e:	a201      	add	r2, pc, #4	; (adr r2, 81584 <menu_main+0x3c>)
   81580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81584:	000815a1 	.word	0x000815a1
   81588:	000815a1 	.word	0x000815a1
   8158c:	000815a1 	.word	0x000815a1
   81590:	000815a1 	.word	0x000815a1
   81594:	000815a1 	.word	0x000815a1
   81598:	000815a1 	.word	0x000815a1
   8159c:	000815a1 	.word	0x000815a1
                            break;
   815a0:	bf00      	nop
                    break;
   815a2:	e02f      	b.n	81604 <menu_main+0xbc>
                    switch (act_cursor_line)
   815a4:	4b33      	ldr	r3, [pc, #204]	; (81674 <menu_main+0x12c>)
   815a6:	781b      	ldrb	r3, [r3, #0]
   815a8:	3b02      	subs	r3, #2
   815aa:	2b06      	cmp	r3, #6
   815ac:	d810      	bhi.n	815d0 <menu_main+0x88>
   815ae:	a201      	add	r2, pc, #4	; (adr r2, 815b4 <menu_main+0x6c>)
   815b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   815b4:	000815d1 	.word	0x000815d1
   815b8:	000815d1 	.word	0x000815d1
   815bc:	000815d1 	.word	0x000815d1
   815c0:	000815d1 	.word	0x000815d1
   815c4:	000815d1 	.word	0x000815d1
   815c8:	000815d1 	.word	0x000815d1
   815cc:	000815d1 	.word	0x000815d1
                            break;
   815d0:	bf00      	nop
                    break;
   815d2:	e017      	b.n	81604 <menu_main+0xbc>
                    switch (act_cursor_line)
   815d4:	4b27      	ldr	r3, [pc, #156]	; (81674 <menu_main+0x12c>)
   815d6:	781b      	ldrb	r3, [r3, #0]
   815d8:	3b02      	subs	r3, #2
   815da:	2b06      	cmp	r3, #6
   815dc:	d810      	bhi.n	81600 <menu_main+0xb8>
   815de:	a201      	add	r2, pc, #4	; (adr r2, 815e4 <menu_main+0x9c>)
   815e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   815e4:	00081601 	.word	0x00081601
   815e8:	00081601 	.word	0x00081601
   815ec:	00081601 	.word	0x00081601
   815f0:	00081601 	.word	0x00081601
   815f4:	00081601 	.word	0x00081601
   815f8:	00081601 	.word	0x00081601
   815fc:	00081601 	.word	0x00081601
                            break;
   81600:	bf00      	nop
                    break;
   81602:	bf00      	nop
            break;
   81604:	e026      	b.n	81654 <menu_main+0x10c>
            if (act_cursor_line == 1)
   81606:	4b1b      	ldr	r3, [pc, #108]	; (81674 <menu_main+0x12c>)
   81608:	781b      	ldrb	r3, [r3, #0]
   8160a:	2b01      	cmp	r3, #1
   8160c:	d11f      	bne.n	8164e <menu_main+0x106>
                if (menu_main_column >= 1)
   8160e:	4b18      	ldr	r3, [pc, #96]	; (81670 <menu_main+0x128>)
   81610:	781b      	ldrb	r3, [r3, #0]
   81612:	2b00      	cmp	r3, #0
   81614:	d005      	beq.n	81622 <menu_main+0xda>
                    menu_main_column--;
   81616:	4b16      	ldr	r3, [pc, #88]	; (81670 <menu_main+0x128>)
   81618:	781b      	ldrb	r3, [r3, #0]
   8161a:	3b01      	subs	r3, #1
   8161c:	b2da      	uxtb	r2, r3
   8161e:	4b14      	ldr	r3, [pc, #80]	; (81670 <menu_main+0x128>)
   81620:	701a      	strb	r2, [r3, #0]
                print_menu = 1;
   81622:	4b15      	ldr	r3, [pc, #84]	; (81678 <menu_main+0x130>)
   81624:	2201      	movs	r2, #1
   81626:	701a      	strb	r2, [r3, #0]
            break;
   81628:	e011      	b.n	8164e <menu_main+0x106>
            if (act_cursor_line == 1)
   8162a:	4b12      	ldr	r3, [pc, #72]	; (81674 <menu_main+0x12c>)
   8162c:	781b      	ldrb	r3, [r3, #0]
   8162e:	2b01      	cmp	r3, #1
   81630:	d10f      	bne.n	81652 <menu_main+0x10a>
                if (menu_main_column <= 1)
   81632:	4b0f      	ldr	r3, [pc, #60]	; (81670 <menu_main+0x128>)
   81634:	781b      	ldrb	r3, [r3, #0]
   81636:	2b01      	cmp	r3, #1
   81638:	d805      	bhi.n	81646 <menu_main+0xfe>
                    menu_main_column++;
   8163a:	4b0d      	ldr	r3, [pc, #52]	; (81670 <menu_main+0x128>)
   8163c:	781b      	ldrb	r3, [r3, #0]
   8163e:	3301      	adds	r3, #1
   81640:	b2da      	uxtb	r2, r3
   81642:	4b0b      	ldr	r3, [pc, #44]	; (81670 <menu_main+0x128>)
   81644:	701a      	strb	r2, [r3, #0]
                print_menu = 1;
   81646:	4b0c      	ldr	r3, [pc, #48]	; (81678 <menu_main+0x130>)
   81648:	2201      	movs	r2, #1
   8164a:	701a      	strb	r2, [r3, #0]
            break;
   8164c:	e001      	b.n	81652 <menu_main+0x10a>
            break;
   8164e:	bf00      	nop
   81650:	e000      	b.n	81654 <menu_main+0x10c>
            break;
   81652:	bf00      	nop
    }
	
    if (print_menu)
   81654:	4b08      	ldr	r3, [pc, #32]	; (81678 <menu_main+0x130>)
   81656:	781b      	ldrb	r3, [r3, #0]
   81658:	2b00      	cmp	r3, #0
   8165a:	d004      	beq.n	81666 <menu_main+0x11e>
    {
        print_menu = 0;
   8165c:	4b06      	ldr	r3, [pc, #24]	; (81678 <menu_main+0x130>)
   8165e:	2200      	movs	r2, #0
   81660:	701a      	strb	r2, [r3, #0]
        print_menu_main();
   81662:	4b06      	ldr	r3, [pc, #24]	; (8167c <menu_main+0x134>)
   81664:	4798      	blx	r3
    }
}
   81666:	bf00      	nop
   81668:	3708      	adds	r7, #8
   8166a:	46bd      	mov	sp, r7
   8166c:	bd80      	pop	{r7, pc}
   8166e:	bf00      	nop
   81670:	20070194 	.word	0x20070194
   81674:	20070190 	.word	0x20070190
   81678:	2007018c 	.word	0x2007018c
   8167c:	00081695 	.word	0x00081695

00081680 <menu_settings>:

void menu_settings(event_t event1)
{
   81680:	b480      	push	{r7}
   81682:	b083      	sub	sp, #12
   81684:	af00      	add	r7, sp, #0
   81686:	4603      	mov	r3, r0
   81688:	71fb      	strb	r3, [r7, #7]
	
}
   8168a:	bf00      	nop
   8168c:	370c      	adds	r7, #12
   8168e:	46bd      	mov	sp, r7
   81690:	bc80      	pop	{r7}
   81692:	4770      	bx	lr

00081694 <print_menu_main>:

void print_menu_main(void)
{
   81694:	b580      	push	{r7, lr}
   81696:	af00      	add	r7, sp, #0
    lcd_clear();
   81698:	4b97      	ldr	r3, [pc, #604]	; (818f8 <print_menu_main+0x264>)
   8169a:	4798      	blx	r3
	
    switch(menu_main_column)
   8169c:	4b97      	ldr	r3, [pc, #604]	; (818fc <print_menu_main+0x268>)
   8169e:	781b      	ldrb	r3, [r3, #0]
   816a0:	2b01      	cmp	r3, #1
   816a2:	d070      	beq.n	81786 <print_menu_main+0xf2>
   816a4:	2b02      	cmp	r3, #2
   816a6:	f000 80c7 	beq.w	81838 <print_menu_main+0x1a4>
   816aa:	2b00      	cmp	r3, #0
   816ac:	f040 811d 	bne.w	818ea <print_menu_main+0x256>
    {
        case 0:
            lcd_print_s(1 - menu_main_scroll, 3, "Settings  ");
   816b0:	4b93      	ldr	r3, [pc, #588]	; (81900 <print_menu_main+0x26c>)
   816b2:	781b      	ldrb	r3, [r3, #0]
   816b4:	f1c3 0301 	rsb	r3, r3, #1
   816b8:	b2db      	uxtb	r3, r3
   816ba:	b25b      	sxtb	r3, r3
   816bc:	4a91      	ldr	r2, [pc, #580]	; (81904 <print_menu_main+0x270>)
   816be:	2103      	movs	r1, #3
   816c0:	4618      	mov	r0, r3
   816c2:	4b91      	ldr	r3, [pc, #580]	; (81908 <print_menu_main+0x274>)
   816c4:	4798      	blx	r3
            sprintf(sprintf_cache, "Robot ID: %1d", rbt_id);
   816c6:	4b91      	ldr	r3, [pc, #580]	; (8190c <print_menu_main+0x278>)
   816c8:	f993 3000 	ldrsb.w	r3, [r3]
   816cc:	461a      	mov	r2, r3
   816ce:	4990      	ldr	r1, [pc, #576]	; (81910 <print_menu_main+0x27c>)
   816d0:	4890      	ldr	r0, [pc, #576]	; (81914 <print_menu_main+0x280>)
   816d2:	4b91      	ldr	r3, [pc, #580]	; (81918 <print_menu_main+0x284>)
   816d4:	4798      	blx	r3
            lcd_print_s(2 - menu_main_scroll, 1, sprintf_cache);
   816d6:	4b8a      	ldr	r3, [pc, #552]	; (81900 <print_menu_main+0x26c>)
   816d8:	781b      	ldrb	r3, [r3, #0]
   816da:	f1c3 0302 	rsb	r3, r3, #2
   816de:	b2db      	uxtb	r3, r3
   816e0:	b25b      	sxtb	r3, r3
   816e2:	4a8c      	ldr	r2, [pc, #560]	; (81914 <print_menu_main+0x280>)
   816e4:	2101      	movs	r1, #1
   816e6:	4618      	mov	r0, r3
   816e8:	4b87      	ldr	r3, [pc, #540]	; (81908 <print_menu_main+0x274>)
   816ea:	4798      	blx	r3
            sprintf(sprintf_cache, "Speed: %2d", 15);	//speed_preset
   816ec:	220f      	movs	r2, #15
   816ee:	498b      	ldr	r1, [pc, #556]	; (8191c <print_menu_main+0x288>)
   816f0:	4888      	ldr	r0, [pc, #544]	; (81914 <print_menu_main+0x280>)
   816f2:	4b89      	ldr	r3, [pc, #548]	; (81918 <print_menu_main+0x284>)
   816f4:	4798      	blx	r3
            lcd_print_s(3 - menu_main_scroll, 1, sprintf_cache);
   816f6:	4b82      	ldr	r3, [pc, #520]	; (81900 <print_menu_main+0x26c>)
   816f8:	781b      	ldrb	r3, [r3, #0]
   816fa:	f1c3 0303 	rsb	r3, r3, #3
   816fe:	b2db      	uxtb	r3, r3
   81700:	b25b      	sxtb	r3, r3
   81702:	4a84      	ldr	r2, [pc, #528]	; (81914 <print_menu_main+0x280>)
   81704:	2101      	movs	r1, #1
   81706:	4618      	mov	r0, r3
   81708:	4b7f      	ldr	r3, [pc, #508]	; (81908 <print_menu_main+0x274>)
   8170a:	4798      	blx	r3
            sprintf(sprintf_cache, "WIFI: %1d", 1);	//rpi_tx.info.wifi
   8170c:	2201      	movs	r2, #1
   8170e:	4984      	ldr	r1, [pc, #528]	; (81920 <print_menu_main+0x28c>)
   81710:	4880      	ldr	r0, [pc, #512]	; (81914 <print_menu_main+0x280>)
   81712:	4b81      	ldr	r3, [pc, #516]	; (81918 <print_menu_main+0x284>)
   81714:	4798      	blx	r3
            lcd_print_s(4 - menu_main_scroll, 1, sprintf_cache);
   81716:	4b7a      	ldr	r3, [pc, #488]	; (81900 <print_menu_main+0x26c>)
   81718:	781b      	ldrb	r3, [r3, #0]
   8171a:	f1c3 0304 	rsb	r3, r3, #4
   8171e:	b2db      	uxtb	r3, r3
   81720:	b25b      	sxtb	r3, r3
   81722:	4a7c      	ldr	r2, [pc, #496]	; (81914 <print_menu_main+0x280>)
   81724:	2101      	movs	r1, #1
   81726:	4618      	mov	r0, r3
   81728:	4b77      	ldr	r3, [pc, #476]	; (81908 <print_menu_main+0x274>)
   8172a:	4798      	blx	r3
            lcd_print_s(5 - menu_main_scroll, 1, "Calibrate");
   8172c:	4b74      	ldr	r3, [pc, #464]	; (81900 <print_menu_main+0x26c>)
   8172e:	781b      	ldrb	r3, [r3, #0]
   81730:	f1c3 0305 	rsb	r3, r3, #5
   81734:	b2db      	uxtb	r3, r3
   81736:	b25b      	sxtb	r3, r3
   81738:	4a7a      	ldr	r2, [pc, #488]	; (81924 <print_menu_main+0x290>)
   8173a:	2101      	movs	r1, #1
   8173c:	4618      	mov	r0, r3
   8173e:	4b72      	ldr	r3, [pc, #456]	; (81908 <print_menu_main+0x274>)
   81740:	4798      	blx	r3
            lcd_print_s(6 - menu_main_scroll, 1, "Set field size ref");
   81742:	4b6f      	ldr	r3, [pc, #444]	; (81900 <print_menu_main+0x26c>)
   81744:	781b      	ldrb	r3, [r3, #0]
   81746:	f1c3 0306 	rsb	r3, r3, #6
   8174a:	b2db      	uxtb	r3, r3
   8174c:	b25b      	sxtb	r3, r3
   8174e:	4a76      	ldr	r2, [pc, #472]	; (81928 <print_menu_main+0x294>)
   81750:	2101      	movs	r1, #1
   81752:	4618      	mov	r0, r3
   81754:	4b6c      	ldr	r3, [pc, #432]	; (81908 <print_menu_main+0x274>)
   81756:	4798      	blx	r3
            lcd_print_s(7 - menu_main_scroll, 1, "");
   81758:	4b69      	ldr	r3, [pc, #420]	; (81900 <print_menu_main+0x26c>)
   8175a:	781b      	ldrb	r3, [r3, #0]
   8175c:	f1c3 0307 	rsb	r3, r3, #7
   81760:	b2db      	uxtb	r3, r3
   81762:	b25b      	sxtb	r3, r3
   81764:	4a71      	ldr	r2, [pc, #452]	; (8192c <print_menu_main+0x298>)
   81766:	2101      	movs	r1, #1
   81768:	4618      	mov	r0, r3
   8176a:	4b67      	ldr	r3, [pc, #412]	; (81908 <print_menu_main+0x274>)
   8176c:	4798      	blx	r3
            lcd_print_s(8 - menu_main_scroll, 1, "");
   8176e:	4b64      	ldr	r3, [pc, #400]	; (81900 <print_menu_main+0x26c>)
   81770:	781b      	ldrb	r3, [r3, #0]
   81772:	f1c3 0308 	rsb	r3, r3, #8
   81776:	b2db      	uxtb	r3, r3
   81778:	b25b      	sxtb	r3, r3
   8177a:	4a6c      	ldr	r2, [pc, #432]	; (8192c <print_menu_main+0x298>)
   8177c:	2101      	movs	r1, #1
   8177e:	4618      	mov	r0, r3
   81780:	4b61      	ldr	r3, [pc, #388]	; (81908 <print_menu_main+0x274>)
   81782:	4798      	blx	r3
            break;
   81784:	e0b1      	b.n	818ea <print_menu_main+0x256>
        case 1:
            lcd_print_s(1 - menu_main_scroll, 3, "  Match  ");
   81786:	4b5e      	ldr	r3, [pc, #376]	; (81900 <print_menu_main+0x26c>)
   81788:	781b      	ldrb	r3, [r3, #0]
   8178a:	f1c3 0301 	rsb	r3, r3, #1
   8178e:	b2db      	uxtb	r3, r3
   81790:	b25b      	sxtb	r3, r3
   81792:	4a67      	ldr	r2, [pc, #412]	; (81930 <print_menu_main+0x29c>)
   81794:	2103      	movs	r1, #3
   81796:	4618      	mov	r0, r3
   81798:	4b5b      	ldr	r3, [pc, #364]	; (81908 <print_menu_main+0x274>)
   8179a:	4798      	blx	r3
            lcd_print_s(2 - menu_main_scroll, 1, "Start match");
   8179c:	4b58      	ldr	r3, [pc, #352]	; (81900 <print_menu_main+0x26c>)
   8179e:	781b      	ldrb	r3, [r3, #0]
   817a0:	f1c3 0302 	rsb	r3, r3, #2
   817a4:	b2db      	uxtb	r3, r3
   817a6:	b25b      	sxtb	r3, r3
   817a8:	4a62      	ldr	r2, [pc, #392]	; (81934 <print_menu_main+0x2a0>)
   817aa:	2101      	movs	r1, #1
   817ac:	4618      	mov	r0, r3
   817ae:	4b56      	ldr	r3, [pc, #344]	; (81908 <print_menu_main+0x274>)
   817b0:	4798      	blx	r3
            lcd_print_s(3 - menu_main_scroll, 1, "Sensor values");
   817b2:	4b53      	ldr	r3, [pc, #332]	; (81900 <print_menu_main+0x26c>)
   817b4:	781b      	ldrb	r3, [r3, #0]
   817b6:	f1c3 0303 	rsb	r3, r3, #3
   817ba:	b2db      	uxtb	r3, r3
   817bc:	b25b      	sxtb	r3, r3
   817be:	4a5e      	ldr	r2, [pc, #376]	; (81938 <print_menu_main+0x2a4>)
   817c0:	2101      	movs	r1, #1
   817c2:	4618      	mov	r0, r3
   817c4:	4b50      	ldr	r3, [pc, #320]	; (81908 <print_menu_main+0x274>)
   817c6:	4798      	blx	r3
            lcd_print_s(4 - menu_main_scroll, 1, "Drive angle pid");
   817c8:	4b4d      	ldr	r3, [pc, #308]	; (81900 <print_menu_main+0x26c>)
   817ca:	781b      	ldrb	r3, [r3, #0]
   817cc:	f1c3 0304 	rsb	r3, r3, #4
   817d0:	b2db      	uxtb	r3, r3
   817d2:	b25b      	sxtb	r3, r3
   817d4:	4a59      	ldr	r2, [pc, #356]	; (8193c <print_menu_main+0x2a8>)
   817d6:	2101      	movs	r1, #1
   817d8:	4618      	mov	r0, r3
   817da:	4b4b      	ldr	r3, [pc, #300]	; (81908 <print_menu_main+0x274>)
   817dc:	4798      	blx	r3
            lcd_print_s(5 - menu_main_scroll, 1, "");
   817de:	4b48      	ldr	r3, [pc, #288]	; (81900 <print_menu_main+0x26c>)
   817e0:	781b      	ldrb	r3, [r3, #0]
   817e2:	f1c3 0305 	rsb	r3, r3, #5
   817e6:	b2db      	uxtb	r3, r3
   817e8:	b25b      	sxtb	r3, r3
   817ea:	4a50      	ldr	r2, [pc, #320]	; (8192c <print_menu_main+0x298>)
   817ec:	2101      	movs	r1, #1
   817ee:	4618      	mov	r0, r3
   817f0:	4b45      	ldr	r3, [pc, #276]	; (81908 <print_menu_main+0x274>)
   817f2:	4798      	blx	r3
            lcd_print_s(6 - menu_main_scroll, 1, "");
   817f4:	4b42      	ldr	r3, [pc, #264]	; (81900 <print_menu_main+0x26c>)
   817f6:	781b      	ldrb	r3, [r3, #0]
   817f8:	f1c3 0306 	rsb	r3, r3, #6
   817fc:	b2db      	uxtb	r3, r3
   817fe:	b25b      	sxtb	r3, r3
   81800:	4a4a      	ldr	r2, [pc, #296]	; (8192c <print_menu_main+0x298>)
   81802:	2101      	movs	r1, #1
   81804:	4618      	mov	r0, r3
   81806:	4b40      	ldr	r3, [pc, #256]	; (81908 <print_menu_main+0x274>)
   81808:	4798      	blx	r3
            lcd_print_s(7 - menu_main_scroll, 1, "");
   8180a:	4b3d      	ldr	r3, [pc, #244]	; (81900 <print_menu_main+0x26c>)
   8180c:	781b      	ldrb	r3, [r3, #0]
   8180e:	f1c3 0307 	rsb	r3, r3, #7
   81812:	b2db      	uxtb	r3, r3
   81814:	b25b      	sxtb	r3, r3
   81816:	4a45      	ldr	r2, [pc, #276]	; (8192c <print_menu_main+0x298>)
   81818:	2101      	movs	r1, #1
   8181a:	4618      	mov	r0, r3
   8181c:	4b3a      	ldr	r3, [pc, #232]	; (81908 <print_menu_main+0x274>)
   8181e:	4798      	blx	r3
            lcd_print_s(8 - menu_main_scroll, 1, "");
   81820:	4b37      	ldr	r3, [pc, #220]	; (81900 <print_menu_main+0x26c>)
   81822:	781b      	ldrb	r3, [r3, #0]
   81824:	f1c3 0308 	rsb	r3, r3, #8
   81828:	b2db      	uxtb	r3, r3
   8182a:	b25b      	sxtb	r3, r3
   8182c:	4a3f      	ldr	r2, [pc, #252]	; (8192c <print_menu_main+0x298>)
   8182e:	2101      	movs	r1, #1
   81830:	4618      	mov	r0, r3
   81832:	4b35      	ldr	r3, [pc, #212]	; (81908 <print_menu_main+0x274>)
   81834:	4798      	blx	r3
            break;
   81836:	e058      	b.n	818ea <print_menu_main+0x256>
        case 2:
            lcd_print_s(1 - menu_main_scroll, 3, "  Tests");
   81838:	4b31      	ldr	r3, [pc, #196]	; (81900 <print_menu_main+0x26c>)
   8183a:	781b      	ldrb	r3, [r3, #0]
   8183c:	f1c3 0301 	rsb	r3, r3, #1
   81840:	b2db      	uxtb	r3, r3
   81842:	b25b      	sxtb	r3, r3
   81844:	4a3e      	ldr	r2, [pc, #248]	; (81940 <print_menu_main+0x2ac>)
   81846:	2103      	movs	r1, #3
   81848:	4618      	mov	r0, r3
   8184a:	4b2f      	ldr	r3, [pc, #188]	; (81908 <print_menu_main+0x274>)
   8184c:	4798      	blx	r3
            lcd_print_s(2 - menu_main_scroll, 1, "Turn to start");
   8184e:	4b2c      	ldr	r3, [pc, #176]	; (81900 <print_menu_main+0x26c>)
   81850:	781b      	ldrb	r3, [r3, #0]
   81852:	f1c3 0302 	rsb	r3, r3, #2
   81856:	b2db      	uxtb	r3, r3
   81858:	b25b      	sxtb	r3, r3
   8185a:	4a3a      	ldr	r2, [pc, #232]	; (81944 <print_menu_main+0x2b0>)
   8185c:	2101      	movs	r1, #1
   8185e:	4618      	mov	r0, r3
   81860:	4b29      	ldr	r3, [pc, #164]	; (81908 <print_menu_main+0x274>)
   81862:	4798      	blx	r3
            lcd_print_s(3 - menu_main_scroll, 1, "Move to middle");
   81864:	4b26      	ldr	r3, [pc, #152]	; (81900 <print_menu_main+0x26c>)
   81866:	781b      	ldrb	r3, [r3, #0]
   81868:	f1c3 0303 	rsb	r3, r3, #3
   8186c:	b2db      	uxtb	r3, r3
   8186e:	b25b      	sxtb	r3, r3
   81870:	4a35      	ldr	r2, [pc, #212]	; (81948 <print_menu_main+0x2b4>)
   81872:	2101      	movs	r1, #1
   81874:	4618      	mov	r0, r3
   81876:	4b24      	ldr	r3, [pc, #144]	; (81908 <print_menu_main+0x274>)
   81878:	4798      	blx	r3
            lcd_print_s(4 - menu_main_scroll, 1, "Move to ball");
   8187a:	4b21      	ldr	r3, [pc, #132]	; (81900 <print_menu_main+0x26c>)
   8187c:	781b      	ldrb	r3, [r3, #0]
   8187e:	f1c3 0304 	rsb	r3, r3, #4
   81882:	b2db      	uxtb	r3, r3
   81884:	b25b      	sxtb	r3, r3
   81886:	4a31      	ldr	r2, [pc, #196]	; (8194c <print_menu_main+0x2b8>)
   81888:	2101      	movs	r1, #1
   8188a:	4618      	mov	r0, r3
   8188c:	4b1e      	ldr	r3, [pc, #120]	; (81908 <print_menu_main+0x274>)
   8188e:	4798      	blx	r3
            lcd_print_s(5 - menu_main_scroll, 1, "RPI");
   81890:	4b1b      	ldr	r3, [pc, #108]	; (81900 <print_menu_main+0x26c>)
   81892:	781b      	ldrb	r3, [r3, #0]
   81894:	f1c3 0305 	rsb	r3, r3, #5
   81898:	b2db      	uxtb	r3, r3
   8189a:	b25b      	sxtb	r3, r3
   8189c:	4a2c      	ldr	r2, [pc, #176]	; (81950 <print_menu_main+0x2bc>)
   8189e:	2101      	movs	r1, #1
   818a0:	4618      	mov	r0, r3
   818a2:	4b19      	ldr	r3, [pc, #100]	; (81908 <print_menu_main+0x274>)
   818a4:	4798      	blx	r3
            lcd_print_s(6 - menu_main_scroll, 1, "Stop on line");
   818a6:	4b16      	ldr	r3, [pc, #88]	; (81900 <print_menu_main+0x26c>)
   818a8:	781b      	ldrb	r3, [r3, #0]
   818aa:	f1c3 0306 	rsb	r3, r3, #6
   818ae:	b2db      	uxtb	r3, r3
   818b0:	b25b      	sxtb	r3, r3
   818b2:	4a28      	ldr	r2, [pc, #160]	; (81954 <print_menu_main+0x2c0>)
   818b4:	2101      	movs	r1, #1
   818b6:	4618      	mov	r0, r3
   818b8:	4b13      	ldr	r3, [pc, #76]	; (81908 <print_menu_main+0x274>)
   818ba:	4798      	blx	r3
            lcd_print_s(7 - menu_main_scroll, 1, "Encoder test");
   818bc:	4b10      	ldr	r3, [pc, #64]	; (81900 <print_menu_main+0x26c>)
   818be:	781b      	ldrb	r3, [r3, #0]
   818c0:	f1c3 0307 	rsb	r3, r3, #7
   818c4:	b2db      	uxtb	r3, r3
   818c6:	b25b      	sxtb	r3, r3
   818c8:	4a23      	ldr	r2, [pc, #140]	; (81958 <print_menu_main+0x2c4>)
   818ca:	2101      	movs	r1, #1
   818cc:	4618      	mov	r0, r3
   818ce:	4b0e      	ldr	r3, [pc, #56]	; (81908 <print_menu_main+0x274>)
   818d0:	4798      	blx	r3
            lcd_print_s(8 - menu_main_scroll, 1, "");
   818d2:	4b0b      	ldr	r3, [pc, #44]	; (81900 <print_menu_main+0x26c>)
   818d4:	781b      	ldrb	r3, [r3, #0]
   818d6:	f1c3 0308 	rsb	r3, r3, #8
   818da:	b2db      	uxtb	r3, r3
   818dc:	b25b      	sxtb	r3, r3
   818de:	4a13      	ldr	r2, [pc, #76]	; (8192c <print_menu_main+0x298>)
   818e0:	2101      	movs	r1, #1
   818e2:	4618      	mov	r0, r3
   818e4:	4b08      	ldr	r3, [pc, #32]	; (81908 <print_menu_main+0x274>)
   818e6:	4798      	blx	r3
            break;
   818e8:	bf00      	nop
    }
    
    print_cursor();
   818ea:	4b1c      	ldr	r3, [pc, #112]	; (8195c <print_menu_main+0x2c8>)
   818ec:	4798      	blx	r3
    update_battery(1);
   818ee:	2001      	movs	r0, #1
   818f0:	4b1b      	ldr	r3, [pc, #108]	; (81960 <print_menu_main+0x2cc>)
   818f2:	4798      	blx	r3
}
   818f4:	bf00      	nop
   818f6:	bd80      	pop	{r7, pc}
   818f8:	00080f6d 	.word	0x00080f6d
   818fc:	20070194 	.word	0x20070194
   81900:	20070fa1 	.word	0x20070fa1
   81904:	000882a8 	.word	0x000882a8
   81908:	00080f8d 	.word	0x00080f8d
   8190c:	2007018d 	.word	0x2007018d
   81910:	000882b4 	.word	0x000882b4
   81914:	20071018 	.word	0x20071018
   81918:	00083e59 	.word	0x00083e59
   8191c:	000882c4 	.word	0x000882c4
   81920:	000882d0 	.word	0x000882d0
   81924:	000882dc 	.word	0x000882dc
   81928:	000882e8 	.word	0x000882e8
   8192c:	000882fc 	.word	0x000882fc
   81930:	00088300 	.word	0x00088300
   81934:	0008830c 	.word	0x0008830c
   81938:	00088318 	.word	0x00088318
   8193c:	00088328 	.word	0x00088328
   81940:	00088338 	.word	0x00088338
   81944:	00088340 	.word	0x00088340
   81948:	00088350 	.word	0x00088350
   8194c:	00088360 	.word	0x00088360
   81950:	00088370 	.word	0x00088370
   81954:	00088374 	.word	0x00088374
   81958:	00088384 	.word	0x00088384
   8195c:	00081965 	.word	0x00081965
   81960:	00081e79 	.word	0x00081e79

00081964 <print_cursor>:

void print_cursor(void)
{
   81964:	b580      	push	{r7, lr}
   81966:	af00      	add	r7, sp, #0
    if (act_menu == MENU_MAIN && act_cursor_line == 1)
   81968:	4b3a      	ldr	r3, [pc, #232]	; (81a54 <print_cursor+0xf0>)
   8196a:	781b      	ldrb	r3, [r3, #0]
   8196c:	2b00      	cmp	r3, #0
   8196e:	d133      	bne.n	819d8 <print_cursor+0x74>
   81970:	4b39      	ldr	r3, [pc, #228]	; (81a58 <print_cursor+0xf4>)
   81972:	781b      	ldrb	r3, [r3, #0]
   81974:	2b01      	cmp	r3, #1
   81976:	d12f      	bne.n	819d8 <print_cursor+0x74>
    {
        switch (menu_main_column)
   81978:	4b38      	ldr	r3, [pc, #224]	; (81a5c <print_cursor+0xf8>)
   8197a:	781b      	ldrb	r3, [r3, #0]
   8197c:	2b01      	cmp	r3, #1
   8197e:	d00f      	beq.n	819a0 <print_cursor+0x3c>
   81980:	2b02      	cmp	r3, #2
   81982:	d01d      	beq.n	819c0 <print_cursor+0x5c>
   81984:	2b00      	cmp	r3, #0
   81986:	d000      	beq.n	8198a <print_cursor+0x26>
            case 2:
                lcd_print_s(1, 3, "<");
                lcd_print_s(2, 0, " ");
                break;
            default:
                break;
   81988:	e025      	b.n	819d6 <print_cursor+0x72>
                lcd_print_s(1, 12, ">");
   8198a:	4a35      	ldr	r2, [pc, #212]	; (81a60 <print_cursor+0xfc>)
   8198c:	210c      	movs	r1, #12
   8198e:	2001      	movs	r0, #1
   81990:	4b34      	ldr	r3, [pc, #208]	; (81a64 <print_cursor+0x100>)
   81992:	4798      	blx	r3
                lcd_print_s(2, 0, " ");
   81994:	4a34      	ldr	r2, [pc, #208]	; (81a68 <print_cursor+0x104>)
   81996:	2100      	movs	r1, #0
   81998:	2002      	movs	r0, #2
   8199a:	4b32      	ldr	r3, [pc, #200]	; (81a64 <print_cursor+0x100>)
   8199c:	4798      	blx	r3
                break;
   8199e:	e01a      	b.n	819d6 <print_cursor+0x72>
                lcd_print_s(1, 3, "<");
   819a0:	4a32      	ldr	r2, [pc, #200]	; (81a6c <print_cursor+0x108>)
   819a2:	2103      	movs	r1, #3
   819a4:	2001      	movs	r0, #1
   819a6:	4b2f      	ldr	r3, [pc, #188]	; (81a64 <print_cursor+0x100>)
   819a8:	4798      	blx	r3
                lcd_print_s(1, 11, ">");
   819aa:	4a2d      	ldr	r2, [pc, #180]	; (81a60 <print_cursor+0xfc>)
   819ac:	210b      	movs	r1, #11
   819ae:	2001      	movs	r0, #1
   819b0:	4b2c      	ldr	r3, [pc, #176]	; (81a64 <print_cursor+0x100>)
   819b2:	4798      	blx	r3
                lcd_print_s(2, 0, " ");
   819b4:	4a2c      	ldr	r2, [pc, #176]	; (81a68 <print_cursor+0x104>)
   819b6:	2100      	movs	r1, #0
   819b8:	2002      	movs	r0, #2
   819ba:	4b2a      	ldr	r3, [pc, #168]	; (81a64 <print_cursor+0x100>)
   819bc:	4798      	blx	r3
                break;
   819be:	e00a      	b.n	819d6 <print_cursor+0x72>
                lcd_print_s(1, 3, "<");
   819c0:	4a2a      	ldr	r2, [pc, #168]	; (81a6c <print_cursor+0x108>)
   819c2:	2103      	movs	r1, #3
   819c4:	2001      	movs	r0, #1
   819c6:	4b27      	ldr	r3, [pc, #156]	; (81a64 <print_cursor+0x100>)
   819c8:	4798      	blx	r3
                lcd_print_s(2, 0, " ");
   819ca:	4a27      	ldr	r2, [pc, #156]	; (81a68 <print_cursor+0x104>)
   819cc:	2100      	movs	r1, #0
   819ce:	2002      	movs	r0, #2
   819d0:	4b24      	ldr	r3, [pc, #144]	; (81a64 <print_cursor+0x100>)
   819d2:	4798      	blx	r3
                break;
   819d4:	bf00      	nop
        }
    }
   819d6:	e033      	b.n	81a40 <print_cursor+0xdc>
    else
    {
        if (prev_cursor_line == 1)
   819d8:	4b25      	ldr	r3, [pc, #148]	; (81a70 <print_cursor+0x10c>)
   819da:	781b      	ldrb	r3, [r3, #0]
   819dc:	2b01      	cmp	r3, #1
   819de:	d11f      	bne.n	81a20 <print_cursor+0xbc>
        {
            switch (menu_main_column)
   819e0:	4b1e      	ldr	r3, [pc, #120]	; (81a5c <print_cursor+0xf8>)
   819e2:	781b      	ldrb	r3, [r3, #0]
   819e4:	2b01      	cmp	r3, #1
   819e6:	d00a      	beq.n	819fe <print_cursor+0x9a>
   819e8:	2b02      	cmp	r3, #2
   819ea:	d013      	beq.n	81a14 <print_cursor+0xb0>
   819ec:	2b00      	cmp	r3, #0
   819ee:	d000      	beq.n	819f2 <print_cursor+0x8e>
                    break;
                case 2:
                    lcd_print_s(1, 3, " ");
                    break;
                default:
                    break;
   819f0:	e016      	b.n	81a20 <print_cursor+0xbc>
                    lcd_print_s(1, 12, " ");
   819f2:	4a1d      	ldr	r2, [pc, #116]	; (81a68 <print_cursor+0x104>)
   819f4:	210c      	movs	r1, #12
   819f6:	2001      	movs	r0, #1
   819f8:	4b1a      	ldr	r3, [pc, #104]	; (81a64 <print_cursor+0x100>)
   819fa:	4798      	blx	r3
                    break;
   819fc:	e010      	b.n	81a20 <print_cursor+0xbc>
                    lcd_print_s(1, 3, " ");
   819fe:	4a1a      	ldr	r2, [pc, #104]	; (81a68 <print_cursor+0x104>)
   81a00:	2103      	movs	r1, #3
   81a02:	2001      	movs	r0, #1
   81a04:	4b17      	ldr	r3, [pc, #92]	; (81a64 <print_cursor+0x100>)
   81a06:	4798      	blx	r3
                    lcd_print_s(1, 11, " ");
   81a08:	4a17      	ldr	r2, [pc, #92]	; (81a68 <print_cursor+0x104>)
   81a0a:	210b      	movs	r1, #11
   81a0c:	2001      	movs	r0, #1
   81a0e:	4b15      	ldr	r3, [pc, #84]	; (81a64 <print_cursor+0x100>)
   81a10:	4798      	blx	r3
                    break;
   81a12:	e005      	b.n	81a20 <print_cursor+0xbc>
                    lcd_print_s(1, 3, " ");
   81a14:	4a14      	ldr	r2, [pc, #80]	; (81a68 <print_cursor+0x104>)
   81a16:	2103      	movs	r1, #3
   81a18:	2001      	movs	r0, #1
   81a1a:	4b12      	ldr	r3, [pc, #72]	; (81a64 <print_cursor+0x100>)
   81a1c:	4798      	blx	r3
                    break;
   81a1e:	bf00      	nop
            }
        }
        
        lcd_print_s(prev_cursor_line_on_lcd, 0, " ");
   81a20:	4b14      	ldr	r3, [pc, #80]	; (81a74 <print_cursor+0x110>)
   81a22:	781b      	ldrb	r3, [r3, #0]
   81a24:	b25b      	sxtb	r3, r3
   81a26:	4a10      	ldr	r2, [pc, #64]	; (81a68 <print_cursor+0x104>)
   81a28:	2100      	movs	r1, #0
   81a2a:	4618      	mov	r0, r3
   81a2c:	4b0d      	ldr	r3, [pc, #52]	; (81a64 <print_cursor+0x100>)
   81a2e:	4798      	blx	r3
        lcd_print_s(act_cursor_line_on_lcd, 0, ">");
   81a30:	4b11      	ldr	r3, [pc, #68]	; (81a78 <print_cursor+0x114>)
   81a32:	781b      	ldrb	r3, [r3, #0]
   81a34:	b25b      	sxtb	r3, r3
   81a36:	4a0a      	ldr	r2, [pc, #40]	; (81a60 <print_cursor+0xfc>)
   81a38:	2100      	movs	r1, #0
   81a3a:	4618      	mov	r0, r3
   81a3c:	4b09      	ldr	r3, [pc, #36]	; (81a64 <print_cursor+0x100>)
   81a3e:	4798      	blx	r3
    }
    
    prev_cursor_line = act_cursor_line;
   81a40:	4b05      	ldr	r3, [pc, #20]	; (81a58 <print_cursor+0xf4>)
   81a42:	781a      	ldrb	r2, [r3, #0]
   81a44:	4b0a      	ldr	r3, [pc, #40]	; (81a70 <print_cursor+0x10c>)
   81a46:	701a      	strb	r2, [r3, #0]
    prev_cursor_line_on_lcd = act_cursor_line_on_lcd;
   81a48:	4b0b      	ldr	r3, [pc, #44]	; (81a78 <print_cursor+0x114>)
   81a4a:	781a      	ldrb	r2, [r3, #0]
   81a4c:	4b09      	ldr	r3, [pc, #36]	; (81a74 <print_cursor+0x110>)
   81a4e:	701a      	strb	r2, [r3, #0]
}
   81a50:	bf00      	nop
   81a52:	bd80      	pop	{r7, pc}
   81a54:	20070fa0 	.word	0x20070fa0
   81a58:	20070190 	.word	0x20070190
   81a5c:	20070194 	.word	0x20070194
   81a60:	00088394 	.word	0x00088394
   81a64:	00080f8d 	.word	0x00080f8d
   81a68:	00088398 	.word	0x00088398
   81a6c:	0008839c 	.word	0x0008839c
   81a70:	20070191 	.word	0x20070191
   81a74:	2007018f 	.word	0x2007018f
   81a78:	2007018e 	.word	0x2007018e

00081a7c <button_events>:

event_t button_events(void)
{
   81a7c:	b580      	push	{r7, lr}
   81a7e:	b082      	sub	sp, #8
   81a80:	af00      	add	r7, sp, #0
    event_t nextEvent = EVENT_NO_EVENT;
   81a82:	2300      	movs	r3, #0
   81a84:	71fb      	strb	r3, [r7, #7]

    if (getTicks() >= (ticks_button_update + 30))
   81a86:	4b88      	ldr	r3, [pc, #544]	; (81ca8 <button_events+0x22c>)
   81a88:	4798      	blx	r3
   81a8a:	4602      	mov	r2, r0
   81a8c:	4b87      	ldr	r3, [pc, #540]	; (81cac <button_events+0x230>)
   81a8e:	681b      	ldr	r3, [r3, #0]
   81a90:	331e      	adds	r3, #30
   81a92:	429a      	cmp	r2, r3
   81a94:	f0c0 814a 	bcc.w	81d2c <button_events+0x2b0>
    {
        ticks_button_update = getTicks();
   81a98:	4b83      	ldr	r3, [pc, #524]	; (81ca8 <button_events+0x22c>)
   81a9a:	4798      	blx	r3
   81a9c:	4602      	mov	r2, r0
   81a9e:	4b83      	ldr	r3, [pc, #524]	; (81cac <button_events+0x230>)
   81aa0:	601a      	str	r2, [r3, #0]
        
        pb_up_act = ioport_get_pin_level(PB_UP);
   81aa2:	2060      	movs	r0, #96	; 0x60
   81aa4:	4b82      	ldr	r3, [pc, #520]	; (81cb0 <button_events+0x234>)
   81aa6:	4798      	blx	r3
   81aa8:	4603      	mov	r3, r0
   81aaa:	461a      	mov	r2, r3
   81aac:	4b81      	ldr	r3, [pc, #516]	; (81cb4 <button_events+0x238>)
   81aae:	701a      	strb	r2, [r3, #0]
        pb_left_act = ioport_get_pin_level(PB_LEFT);
   81ab0:	2061      	movs	r0, #97	; 0x61
   81ab2:	4b7f      	ldr	r3, [pc, #508]	; (81cb0 <button_events+0x234>)
   81ab4:	4798      	blx	r3
   81ab6:	4603      	mov	r3, r0
   81ab8:	461a      	mov	r2, r3
   81aba:	4b7f      	ldr	r3, [pc, #508]	; (81cb8 <button_events+0x23c>)
   81abc:	701a      	strb	r2, [r3, #0]
        pb_mid_act = ioport_get_pin_level(PB_MID);
   81abe:	2062      	movs	r0, #98	; 0x62
   81ac0:	4b7b      	ldr	r3, [pc, #492]	; (81cb0 <button_events+0x234>)
   81ac2:	4798      	blx	r3
   81ac4:	4603      	mov	r3, r0
   81ac6:	461a      	mov	r2, r3
   81ac8:	4b7c      	ldr	r3, [pc, #496]	; (81cbc <button_events+0x240>)
   81aca:	701a      	strb	r2, [r3, #0]
        pb_right_act = ioport_get_pin_level(PB_RIGHT);
   81acc:	2063      	movs	r0, #99	; 0x63
   81ace:	4b78      	ldr	r3, [pc, #480]	; (81cb0 <button_events+0x234>)
   81ad0:	4798      	blx	r3
   81ad2:	4603      	mov	r3, r0
   81ad4:	461a      	mov	r2, r3
   81ad6:	4b7a      	ldr	r3, [pc, #488]	; (81cc0 <button_events+0x244>)
   81ad8:	701a      	strb	r2, [r3, #0]
        pb_down_act = ioport_get_pin_level(PB_DOWN);
   81ada:	2064      	movs	r0, #100	; 0x64
   81adc:	4b74      	ldr	r3, [pc, #464]	; (81cb0 <button_events+0x234>)
   81ade:	4798      	blx	r3
   81ae0:	4603      	mov	r3, r0
   81ae2:	461a      	mov	r2, r3
   81ae4:	4b77      	ldr	r3, [pc, #476]	; (81cc4 <button_events+0x248>)
   81ae6:	701a      	strb	r2, [r3, #0]
        pb_return_act = ioport_get_pin_level(PB_RETURN);
   81ae8:	2065      	movs	r0, #101	; 0x65
   81aea:	4b71      	ldr	r3, [pc, #452]	; (81cb0 <button_events+0x234>)
   81aec:	4798      	blx	r3
   81aee:	4603      	mov	r3, r0
   81af0:	461a      	mov	r2, r3
   81af2:	4b75      	ldr	r3, [pc, #468]	; (81cc8 <button_events+0x24c>)
   81af4:	701a      	strb	r2, [r3, #0]
        
        if (pb_up_act != pb_up_prev && pb_up_act == 0)
   81af6:	4b6f      	ldr	r3, [pc, #444]	; (81cb4 <button_events+0x238>)
   81af8:	781a      	ldrb	r2, [r3, #0]
   81afa:	4b74      	ldr	r3, [pc, #464]	; (81ccc <button_events+0x250>)
   81afc:	781b      	ldrb	r3, [r3, #0]
   81afe:	429a      	cmp	r2, r3
   81b00:	d006      	beq.n	81b10 <button_events+0x94>
   81b02:	4b6c      	ldr	r3, [pc, #432]	; (81cb4 <button_events+0x238>)
   81b04:	781b      	ldrb	r3, [r3, #0]
   81b06:	2b00      	cmp	r3, #0
   81b08:	d102      	bne.n	81b10 <button_events+0x94>
        {
            nextEvent = EVENT_BUTTON_UP_P;
   81b0a:	2301      	movs	r3, #1
   81b0c:	71fb      	strb	r3, [r7, #7]
   81b0e:	e018      	b.n	81b42 <button_events+0xc6>
        }
        else if (pb_up_act != pb_up_prev && pb_up_act == 1)
   81b10:	4b68      	ldr	r3, [pc, #416]	; (81cb4 <button_events+0x238>)
   81b12:	781a      	ldrb	r2, [r3, #0]
   81b14:	4b6d      	ldr	r3, [pc, #436]	; (81ccc <button_events+0x250>)
   81b16:	781b      	ldrb	r3, [r3, #0]
   81b18:	429a      	cmp	r2, r3
   81b1a:	d006      	beq.n	81b2a <button_events+0xae>
   81b1c:	4b65      	ldr	r3, [pc, #404]	; (81cb4 <button_events+0x238>)
   81b1e:	781b      	ldrb	r3, [r3, #0]
   81b20:	2b01      	cmp	r3, #1
   81b22:	d102      	bne.n	81b2a <button_events+0xae>
        {
            nextEvent = EVENT_BUTTON_UP_R;
   81b24:	2303      	movs	r3, #3
   81b26:	71fb      	strb	r3, [r7, #7]
   81b28:	e00b      	b.n	81b42 <button_events+0xc6>
        }
        else if (pb_up_act == pb_up_prev && pb_up_act == 0)
   81b2a:	4b62      	ldr	r3, [pc, #392]	; (81cb4 <button_events+0x238>)
   81b2c:	781a      	ldrb	r2, [r3, #0]
   81b2e:	4b67      	ldr	r3, [pc, #412]	; (81ccc <button_events+0x250>)
   81b30:	781b      	ldrb	r3, [r3, #0]
   81b32:	429a      	cmp	r2, r3
   81b34:	d105      	bne.n	81b42 <button_events+0xc6>
   81b36:	4b5f      	ldr	r3, [pc, #380]	; (81cb4 <button_events+0x238>)
   81b38:	781b      	ldrb	r3, [r3, #0]
   81b3a:	2b00      	cmp	r3, #0
   81b3c:	d101      	bne.n	81b42 <button_events+0xc6>
        {
            nextEvent = EVENT_BUTTON_UP_H;
   81b3e:	2302      	movs	r3, #2
   81b40:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_left_act != pb_left_prev && pb_left_act == 0)
   81b42:	4b5d      	ldr	r3, [pc, #372]	; (81cb8 <button_events+0x23c>)
   81b44:	781a      	ldrb	r2, [r3, #0]
   81b46:	4b62      	ldr	r3, [pc, #392]	; (81cd0 <button_events+0x254>)
   81b48:	781b      	ldrb	r3, [r3, #0]
   81b4a:	429a      	cmp	r2, r3
   81b4c:	d006      	beq.n	81b5c <button_events+0xe0>
   81b4e:	4b5a      	ldr	r3, [pc, #360]	; (81cb8 <button_events+0x23c>)
   81b50:	781b      	ldrb	r3, [r3, #0]
   81b52:	2b00      	cmp	r3, #0
   81b54:	d102      	bne.n	81b5c <button_events+0xe0>
        {
            nextEvent = EVENT_BUTTON_LEFT_P;
   81b56:	2304      	movs	r3, #4
   81b58:	71fb      	strb	r3, [r7, #7]
   81b5a:	e018      	b.n	81b8e <button_events+0x112>
        }
        else if (pb_left_act != pb_left_prev && pb_left_act == 1)
   81b5c:	4b56      	ldr	r3, [pc, #344]	; (81cb8 <button_events+0x23c>)
   81b5e:	781a      	ldrb	r2, [r3, #0]
   81b60:	4b5b      	ldr	r3, [pc, #364]	; (81cd0 <button_events+0x254>)
   81b62:	781b      	ldrb	r3, [r3, #0]
   81b64:	429a      	cmp	r2, r3
   81b66:	d006      	beq.n	81b76 <button_events+0xfa>
   81b68:	4b53      	ldr	r3, [pc, #332]	; (81cb8 <button_events+0x23c>)
   81b6a:	781b      	ldrb	r3, [r3, #0]
   81b6c:	2b01      	cmp	r3, #1
   81b6e:	d102      	bne.n	81b76 <button_events+0xfa>
        {
            nextEvent = EVENT_BUTTON_LEFT_R;
   81b70:	2306      	movs	r3, #6
   81b72:	71fb      	strb	r3, [r7, #7]
   81b74:	e00b      	b.n	81b8e <button_events+0x112>
        }
        else if (pb_left_act == pb_left_prev && pb_left_act == 0)
   81b76:	4b50      	ldr	r3, [pc, #320]	; (81cb8 <button_events+0x23c>)
   81b78:	781a      	ldrb	r2, [r3, #0]
   81b7a:	4b55      	ldr	r3, [pc, #340]	; (81cd0 <button_events+0x254>)
   81b7c:	781b      	ldrb	r3, [r3, #0]
   81b7e:	429a      	cmp	r2, r3
   81b80:	d105      	bne.n	81b8e <button_events+0x112>
   81b82:	4b4d      	ldr	r3, [pc, #308]	; (81cb8 <button_events+0x23c>)
   81b84:	781b      	ldrb	r3, [r3, #0]
   81b86:	2b00      	cmp	r3, #0
   81b88:	d101      	bne.n	81b8e <button_events+0x112>
        {
            nextEvent = EVENT_BUTTON_LEFT_H;
   81b8a:	2305      	movs	r3, #5
   81b8c:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_mid_act != pb_mid_prev && pb_mid_act == 0)
   81b8e:	4b4b      	ldr	r3, [pc, #300]	; (81cbc <button_events+0x240>)
   81b90:	781a      	ldrb	r2, [r3, #0]
   81b92:	4b50      	ldr	r3, [pc, #320]	; (81cd4 <button_events+0x258>)
   81b94:	781b      	ldrb	r3, [r3, #0]
   81b96:	429a      	cmp	r2, r3
   81b98:	d006      	beq.n	81ba8 <button_events+0x12c>
   81b9a:	4b48      	ldr	r3, [pc, #288]	; (81cbc <button_events+0x240>)
   81b9c:	781b      	ldrb	r3, [r3, #0]
   81b9e:	2b00      	cmp	r3, #0
   81ba0:	d102      	bne.n	81ba8 <button_events+0x12c>
        {
            nextEvent = EVENT_BUTTON_MID_P;
   81ba2:	2307      	movs	r3, #7
   81ba4:	71fb      	strb	r3, [r7, #7]
   81ba6:	e018      	b.n	81bda <button_events+0x15e>
        }
        else if (pb_mid_act != pb_mid_prev && pb_mid_act == 1)
   81ba8:	4b44      	ldr	r3, [pc, #272]	; (81cbc <button_events+0x240>)
   81baa:	781a      	ldrb	r2, [r3, #0]
   81bac:	4b49      	ldr	r3, [pc, #292]	; (81cd4 <button_events+0x258>)
   81bae:	781b      	ldrb	r3, [r3, #0]
   81bb0:	429a      	cmp	r2, r3
   81bb2:	d006      	beq.n	81bc2 <button_events+0x146>
   81bb4:	4b41      	ldr	r3, [pc, #260]	; (81cbc <button_events+0x240>)
   81bb6:	781b      	ldrb	r3, [r3, #0]
   81bb8:	2b01      	cmp	r3, #1
   81bba:	d102      	bne.n	81bc2 <button_events+0x146>
        {
            nextEvent = EVENT_BUTTON_MID_R;
   81bbc:	2309      	movs	r3, #9
   81bbe:	71fb      	strb	r3, [r7, #7]
   81bc0:	e00b      	b.n	81bda <button_events+0x15e>
        }
        else if (pb_mid_act == pb_mid_prev && pb_mid_act == 0)
   81bc2:	4b3e      	ldr	r3, [pc, #248]	; (81cbc <button_events+0x240>)
   81bc4:	781a      	ldrb	r2, [r3, #0]
   81bc6:	4b43      	ldr	r3, [pc, #268]	; (81cd4 <button_events+0x258>)
   81bc8:	781b      	ldrb	r3, [r3, #0]
   81bca:	429a      	cmp	r2, r3
   81bcc:	d105      	bne.n	81bda <button_events+0x15e>
   81bce:	4b3b      	ldr	r3, [pc, #236]	; (81cbc <button_events+0x240>)
   81bd0:	781b      	ldrb	r3, [r3, #0]
   81bd2:	2b00      	cmp	r3, #0
   81bd4:	d101      	bne.n	81bda <button_events+0x15e>
        {
            nextEvent = EVENT_BUTTON_MID_H;
   81bd6:	2308      	movs	r3, #8
   81bd8:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_right_act != pb_right_prev && pb_right_act == 0)
   81bda:	4b39      	ldr	r3, [pc, #228]	; (81cc0 <button_events+0x244>)
   81bdc:	781a      	ldrb	r2, [r3, #0]
   81bde:	4b3e      	ldr	r3, [pc, #248]	; (81cd8 <button_events+0x25c>)
   81be0:	781b      	ldrb	r3, [r3, #0]
   81be2:	429a      	cmp	r2, r3
   81be4:	d006      	beq.n	81bf4 <button_events+0x178>
   81be6:	4b36      	ldr	r3, [pc, #216]	; (81cc0 <button_events+0x244>)
   81be8:	781b      	ldrb	r3, [r3, #0]
   81bea:	2b00      	cmp	r3, #0
   81bec:	d102      	bne.n	81bf4 <button_events+0x178>
        {
            nextEvent = EVENT_BUTTON_RIGHT_P;
   81bee:	230a      	movs	r3, #10
   81bf0:	71fb      	strb	r3, [r7, #7]
   81bf2:	e018      	b.n	81c26 <button_events+0x1aa>
        }
        else if (pb_right_act != pb_right_prev && pb_right_act == 1)
   81bf4:	4b32      	ldr	r3, [pc, #200]	; (81cc0 <button_events+0x244>)
   81bf6:	781a      	ldrb	r2, [r3, #0]
   81bf8:	4b37      	ldr	r3, [pc, #220]	; (81cd8 <button_events+0x25c>)
   81bfa:	781b      	ldrb	r3, [r3, #0]
   81bfc:	429a      	cmp	r2, r3
   81bfe:	d006      	beq.n	81c0e <button_events+0x192>
   81c00:	4b2f      	ldr	r3, [pc, #188]	; (81cc0 <button_events+0x244>)
   81c02:	781b      	ldrb	r3, [r3, #0]
   81c04:	2b01      	cmp	r3, #1
   81c06:	d102      	bne.n	81c0e <button_events+0x192>
        {
            nextEvent = EVENT_BUTTON_RIGHT_R;
   81c08:	230c      	movs	r3, #12
   81c0a:	71fb      	strb	r3, [r7, #7]
   81c0c:	e00b      	b.n	81c26 <button_events+0x1aa>
        }
        else if (pb_right_act == pb_right_prev && pb_right_act == 0)
   81c0e:	4b2c      	ldr	r3, [pc, #176]	; (81cc0 <button_events+0x244>)
   81c10:	781a      	ldrb	r2, [r3, #0]
   81c12:	4b31      	ldr	r3, [pc, #196]	; (81cd8 <button_events+0x25c>)
   81c14:	781b      	ldrb	r3, [r3, #0]
   81c16:	429a      	cmp	r2, r3
   81c18:	d105      	bne.n	81c26 <button_events+0x1aa>
   81c1a:	4b29      	ldr	r3, [pc, #164]	; (81cc0 <button_events+0x244>)
   81c1c:	781b      	ldrb	r3, [r3, #0]
   81c1e:	2b00      	cmp	r3, #0
   81c20:	d101      	bne.n	81c26 <button_events+0x1aa>
        {
            nextEvent = EVENT_BUTTON_RIGHT_H;
   81c22:	230b      	movs	r3, #11
   81c24:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_down_act != pb_down_prev && pb_down_act == 0)
   81c26:	4b27      	ldr	r3, [pc, #156]	; (81cc4 <button_events+0x248>)
   81c28:	781a      	ldrb	r2, [r3, #0]
   81c2a:	4b2c      	ldr	r3, [pc, #176]	; (81cdc <button_events+0x260>)
   81c2c:	781b      	ldrb	r3, [r3, #0]
   81c2e:	429a      	cmp	r2, r3
   81c30:	d006      	beq.n	81c40 <button_events+0x1c4>
   81c32:	4b24      	ldr	r3, [pc, #144]	; (81cc4 <button_events+0x248>)
   81c34:	781b      	ldrb	r3, [r3, #0]
   81c36:	2b00      	cmp	r3, #0
   81c38:	d102      	bne.n	81c40 <button_events+0x1c4>
        {
            nextEvent = EVENT_BUTTON_DOWN_P;
   81c3a:	230d      	movs	r3, #13
   81c3c:	71fb      	strb	r3, [r7, #7]
   81c3e:	e018      	b.n	81c72 <button_events+0x1f6>
        }
        else if (pb_down_act != pb_down_prev && pb_down_act == 1)
   81c40:	4b20      	ldr	r3, [pc, #128]	; (81cc4 <button_events+0x248>)
   81c42:	781a      	ldrb	r2, [r3, #0]
   81c44:	4b25      	ldr	r3, [pc, #148]	; (81cdc <button_events+0x260>)
   81c46:	781b      	ldrb	r3, [r3, #0]
   81c48:	429a      	cmp	r2, r3
   81c4a:	d006      	beq.n	81c5a <button_events+0x1de>
   81c4c:	4b1d      	ldr	r3, [pc, #116]	; (81cc4 <button_events+0x248>)
   81c4e:	781b      	ldrb	r3, [r3, #0]
   81c50:	2b01      	cmp	r3, #1
   81c52:	d102      	bne.n	81c5a <button_events+0x1de>
        {
            nextEvent = EVENT_BUTTON_DOWN_R;
   81c54:	230f      	movs	r3, #15
   81c56:	71fb      	strb	r3, [r7, #7]
   81c58:	e00b      	b.n	81c72 <button_events+0x1f6>
        }
        else if (pb_down_act == pb_down_prev && pb_down_act == 0)
   81c5a:	4b1a      	ldr	r3, [pc, #104]	; (81cc4 <button_events+0x248>)
   81c5c:	781a      	ldrb	r2, [r3, #0]
   81c5e:	4b1f      	ldr	r3, [pc, #124]	; (81cdc <button_events+0x260>)
   81c60:	781b      	ldrb	r3, [r3, #0]
   81c62:	429a      	cmp	r2, r3
   81c64:	d105      	bne.n	81c72 <button_events+0x1f6>
   81c66:	4b17      	ldr	r3, [pc, #92]	; (81cc4 <button_events+0x248>)
   81c68:	781b      	ldrb	r3, [r3, #0]
   81c6a:	2b00      	cmp	r3, #0
   81c6c:	d101      	bne.n	81c72 <button_events+0x1f6>
        {
            nextEvent = EVENT_BUTTON_DOWN_H;
   81c6e:	230e      	movs	r3, #14
   81c70:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_return_act != pb_return_prev && pb_return_act == 0)
   81c72:	4b15      	ldr	r3, [pc, #84]	; (81cc8 <button_events+0x24c>)
   81c74:	781a      	ldrb	r2, [r3, #0]
   81c76:	4b1a      	ldr	r3, [pc, #104]	; (81ce0 <button_events+0x264>)
   81c78:	781b      	ldrb	r3, [r3, #0]
   81c7a:	429a      	cmp	r2, r3
   81c7c:	d006      	beq.n	81c8c <button_events+0x210>
   81c7e:	4b12      	ldr	r3, [pc, #72]	; (81cc8 <button_events+0x24c>)
   81c80:	781b      	ldrb	r3, [r3, #0]
   81c82:	2b00      	cmp	r3, #0
   81c84:	d102      	bne.n	81c8c <button_events+0x210>
        {
            nextEvent = EVENT_BUTTON_RETURN_P;
   81c86:	2310      	movs	r3, #16
   81c88:	71fb      	strb	r3, [r7, #7]
   81c8a:	e037      	b.n	81cfc <button_events+0x280>
        }
        else if (pb_return_act != pb_return_prev && pb_return_act == 1)
   81c8c:	4b0e      	ldr	r3, [pc, #56]	; (81cc8 <button_events+0x24c>)
   81c8e:	781a      	ldrb	r2, [r3, #0]
   81c90:	4b13      	ldr	r3, [pc, #76]	; (81ce0 <button_events+0x264>)
   81c92:	781b      	ldrb	r3, [r3, #0]
   81c94:	429a      	cmp	r2, r3
   81c96:	d025      	beq.n	81ce4 <button_events+0x268>
   81c98:	4b0b      	ldr	r3, [pc, #44]	; (81cc8 <button_events+0x24c>)
   81c9a:	781b      	ldrb	r3, [r3, #0]
   81c9c:	2b01      	cmp	r3, #1
   81c9e:	d121      	bne.n	81ce4 <button_events+0x268>
        {
            nextEvent = EVENT_BUTTON_RETURN_R;
   81ca0:	2312      	movs	r3, #18
   81ca2:	71fb      	strb	r3, [r7, #7]
   81ca4:	e02a      	b.n	81cfc <button_events+0x280>
   81ca6:	bf00      	nop
   81ca8:	00081df1 	.word	0x00081df1
   81cac:	20071000 	.word	0x20071000
   81cb0:	000813f1 	.word	0x000813f1
   81cb4:	2007102d 	.word	0x2007102d
   81cb8:	20071014 	.word	0x20071014
   81cbc:	2007102c 	.word	0x2007102c
   81cc0:	2007102e 	.word	0x2007102e
   81cc4:	20071010 	.word	0x20071010
   81cc8:	2007100c 	.word	0x2007100c
   81ccc:	20071011 	.word	0x20071011
   81cd0:	2007100f 	.word	0x2007100f
   81cd4:	2007100d 	.word	0x2007100d
   81cd8:	20071012 	.word	0x20071012
   81cdc:	2007100e 	.word	0x2007100e
   81ce0:	20071013 	.word	0x20071013
        }
        else if (pb_return_act == pb_up_prev && pb_return_act == 0)
   81ce4:	4b14      	ldr	r3, [pc, #80]	; (81d38 <button_events+0x2bc>)
   81ce6:	781a      	ldrb	r2, [r3, #0]
   81ce8:	4b14      	ldr	r3, [pc, #80]	; (81d3c <button_events+0x2c0>)
   81cea:	781b      	ldrb	r3, [r3, #0]
   81cec:	429a      	cmp	r2, r3
   81cee:	d105      	bne.n	81cfc <button_events+0x280>
   81cf0:	4b11      	ldr	r3, [pc, #68]	; (81d38 <button_events+0x2bc>)
   81cf2:	781b      	ldrb	r3, [r3, #0]
   81cf4:	2b00      	cmp	r3, #0
   81cf6:	d101      	bne.n	81cfc <button_events+0x280>
        {
            nextEvent = EVENT_BUTTON_RETURN_H;
   81cf8:	2311      	movs	r3, #17
   81cfa:	71fb      	strb	r3, [r7, #7]
        }
        
        pb_up_prev = pb_up_act;
   81cfc:	4b10      	ldr	r3, [pc, #64]	; (81d40 <button_events+0x2c4>)
   81cfe:	781a      	ldrb	r2, [r3, #0]
   81d00:	4b0e      	ldr	r3, [pc, #56]	; (81d3c <button_events+0x2c0>)
   81d02:	701a      	strb	r2, [r3, #0]
        pb_left_prev = pb_left_act;
   81d04:	4b0f      	ldr	r3, [pc, #60]	; (81d44 <button_events+0x2c8>)
   81d06:	781a      	ldrb	r2, [r3, #0]
   81d08:	4b0f      	ldr	r3, [pc, #60]	; (81d48 <button_events+0x2cc>)
   81d0a:	701a      	strb	r2, [r3, #0]
        pb_mid_prev = pb_mid_act;
   81d0c:	4b0f      	ldr	r3, [pc, #60]	; (81d4c <button_events+0x2d0>)
   81d0e:	781a      	ldrb	r2, [r3, #0]
   81d10:	4b0f      	ldr	r3, [pc, #60]	; (81d50 <button_events+0x2d4>)
   81d12:	701a      	strb	r2, [r3, #0]
        pb_right_prev = pb_right_act;
   81d14:	4b0f      	ldr	r3, [pc, #60]	; (81d54 <button_events+0x2d8>)
   81d16:	781a      	ldrb	r2, [r3, #0]
   81d18:	4b0f      	ldr	r3, [pc, #60]	; (81d58 <button_events+0x2dc>)
   81d1a:	701a      	strb	r2, [r3, #0]
        pb_down_prev = pb_down_act;
   81d1c:	4b0f      	ldr	r3, [pc, #60]	; (81d5c <button_events+0x2e0>)
   81d1e:	781a      	ldrb	r2, [r3, #0]
   81d20:	4b0f      	ldr	r3, [pc, #60]	; (81d60 <button_events+0x2e4>)
   81d22:	701a      	strb	r2, [r3, #0]
        pb_return_prev = pb_return_act;
   81d24:	4b04      	ldr	r3, [pc, #16]	; (81d38 <button_events+0x2bc>)
   81d26:	781a      	ldrb	r2, [r3, #0]
   81d28:	4b0e      	ldr	r3, [pc, #56]	; (81d64 <button_events+0x2e8>)
   81d2a:	701a      	strb	r2, [r3, #0]
    }

    return nextEvent;
   81d2c:	79fb      	ldrb	r3, [r7, #7]
}
   81d2e:	4618      	mov	r0, r3
   81d30:	3708      	adds	r7, #8
   81d32:	46bd      	mov	sp, r7
   81d34:	bd80      	pop	{r7, pc}
   81d36:	bf00      	nop
   81d38:	2007100c 	.word	0x2007100c
   81d3c:	20071011 	.word	0x20071011
   81d40:	2007102d 	.word	0x2007102d
   81d44:	20071014 	.word	0x20071014
   81d48:	2007100f 	.word	0x2007100f
   81d4c:	2007102c 	.word	0x2007102c
   81d50:	2007100d 	.word	0x2007100d
   81d54:	2007102e 	.word	0x2007102e
   81d58:	20071012 	.word	0x20071012
   81d5c:	20071010 	.word	0x20071010
   81d60:	2007100e 	.word	0x2007100e
   81d64:	20071013 	.word	0x20071013

00081d68 <ioport_set_pin_level>:
{
   81d68:	b480      	push	{r7}
   81d6a:	b08b      	sub	sp, #44	; 0x2c
   81d6c:	af00      	add	r7, sp, #0
   81d6e:	6078      	str	r0, [r7, #4]
   81d70:	460b      	mov	r3, r1
   81d72:	70fb      	strb	r3, [r7, #3]
   81d74:	687b      	ldr	r3, [r7, #4]
   81d76:	627b      	str	r3, [r7, #36]	; 0x24
   81d78:	78fb      	ldrb	r3, [r7, #3]
   81d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81d80:	61fb      	str	r3, [r7, #28]
   81d82:	69fb      	ldr	r3, [r7, #28]
   81d84:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   81d86:	69bb      	ldr	r3, [r7, #24]
   81d88:	095b      	lsrs	r3, r3, #5
   81d8a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81d8c:	697b      	ldr	r3, [r7, #20]
   81d8e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81d92:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81d96:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   81d98:	613b      	str	r3, [r7, #16]
	if (level) {
   81d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81d9e:	2b00      	cmp	r3, #0
   81da0:	d009      	beq.n	81db6 <ioport_set_pin_level+0x4e>
   81da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81da4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81da6:	68fb      	ldr	r3, [r7, #12]
   81da8:	f003 031f 	and.w	r3, r3, #31
   81dac:	2201      	movs	r2, #1
   81dae:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81db0:	693b      	ldr	r3, [r7, #16]
   81db2:	631a      	str	r2, [r3, #48]	; 0x30
}
   81db4:	e008      	b.n	81dc8 <ioport_set_pin_level+0x60>
   81db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81db8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   81dba:	68bb      	ldr	r3, [r7, #8]
   81dbc:	f003 031f 	and.w	r3, r3, #31
   81dc0:	2201      	movs	r2, #1
   81dc2:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81dc4:	693b      	ldr	r3, [r7, #16]
   81dc6:	635a      	str	r2, [r3, #52]	; 0x34
   81dc8:	bf00      	nop
   81dca:	372c      	adds	r7, #44	; 0x2c
   81dcc:	46bd      	mov	sp, r7
   81dce:	bc80      	pop	{r7}
   81dd0:	4770      	bx	lr
	...

00081dd4 <SysTick_Handler>:
static uint32_t g_ul_ms_ticks = 0;
float battery_voltage = 0;
float prev_battery_voltage = 0;

void SysTick_Handler(void)
{
   81dd4:	b480      	push	{r7}
   81dd6:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   81dd8:	4b04      	ldr	r3, [pc, #16]	; (81dec <SysTick_Handler+0x18>)
   81dda:	681b      	ldr	r3, [r3, #0]
   81ddc:	3301      	adds	r3, #1
   81dde:	4a03      	ldr	r2, [pc, #12]	; (81dec <SysTick_Handler+0x18>)
   81de0:	6013      	str	r3, [r2, #0]
}
   81de2:	bf00      	nop
   81de4:	46bd      	mov	sp, r7
   81de6:	bc80      	pop	{r7}
   81de8:	4770      	bx	lr
   81dea:	bf00      	nop
   81dec:	20070fa4 	.word	0x20070fa4

00081df0 <getTicks>:

uint32_t getTicks(void)
{
   81df0:	b480      	push	{r7}
   81df2:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   81df4:	4b02      	ldr	r3, [pc, #8]	; (81e00 <getTicks+0x10>)
   81df6:	681b      	ldr	r3, [r3, #0]
}
   81df8:	4618      	mov	r0, r3
   81dfa:	46bd      	mov	sp, r7
   81dfc:	bc80      	pop	{r7}
   81dfe:	4770      	bx	lr
   81e00:	20070fa4 	.word	0x20070fa4

00081e04 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   81e04:	b480      	push	{r7}
   81e06:	b085      	sub	sp, #20
   81e08:	af00      	add	r7, sp, #0
   81e0a:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   81e0c:	4b07      	ldr	r3, [pc, #28]	; (81e2c <mdelay+0x28>)
   81e0e:	681b      	ldr	r3, [r3, #0]
   81e10:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   81e12:	bf00      	nop
   81e14:	4b05      	ldr	r3, [pc, #20]	; (81e2c <mdelay+0x28>)
   81e16:	681a      	ldr	r2, [r3, #0]
   81e18:	68fb      	ldr	r3, [r7, #12]
   81e1a:	1ad2      	subs	r2, r2, r3
   81e1c:	687b      	ldr	r3, [r7, #4]
   81e1e:	429a      	cmp	r2, r3
   81e20:	d3f8      	bcc.n	81e14 <mdelay+0x10>
}
   81e22:	bf00      	nop
   81e24:	3714      	adds	r7, #20
   81e26:	46bd      	mov	sp, r7
   81e28:	bc80      	pop	{r7}
   81e2a:	4770      	bx	lr
   81e2c:	20070fa4 	.word	0x20070fa4

00081e30 <update_comm>:

void update_comm(void)
{
   81e30:	b580      	push	{r7, lr}
   81e32:	af00      	add	r7, sp, #0
    if ((getTicks() - ticks_comm) > 5)
   81e34:	4b0b      	ldr	r3, [pc, #44]	; (81e64 <update_comm+0x34>)
   81e36:	4798      	blx	r3
   81e38:	4602      	mov	r2, r0
   81e3a:	4b0b      	ldr	r3, [pc, #44]	; (81e68 <update_comm+0x38>)
   81e3c:	681b      	ldr	r3, [r3, #0]
   81e3e:	1ad3      	subs	r3, r2, r3
   81e40:	2b05      	cmp	r3, #5
   81e42:	d90d      	bls.n	81e60 <update_comm+0x30>
    {
        ticks_comm = getTicks();
   81e44:	4b07      	ldr	r3, [pc, #28]	; (81e64 <update_comm+0x34>)
   81e46:	4798      	blx	r3
   81e48:	4602      	mov	r2, r0
   81e4a:	4b07      	ldr	r3, [pc, #28]	; (81e68 <update_comm+0x38>)
   81e4c:	601a      	str	r2, [r3, #0]
        
        memcpy(&sens_buf, &mts, sizeof(mts));
   81e4e:	4b07      	ldr	r3, [pc, #28]	; (81e6c <update_comm+0x3c>)
   81e50:	881b      	ldrh	r3, [r3, #0]
   81e52:	b29b      	uxth	r3, r3
   81e54:	4a06      	ldr	r2, [pc, #24]	; (81e70 <update_comm+0x40>)
   81e56:	8013      	strh	r3, [r2, #0]
        spi_master_transfer(&sens_buf, sizeof(sens_buf));
   81e58:	2102      	movs	r1, #2
   81e5a:	4805      	ldr	r0, [pc, #20]	; (81e70 <update_comm+0x40>)
   81e5c:	4b05      	ldr	r3, [pc, #20]	; (81e74 <update_comm+0x44>)
   81e5e:	4798      	blx	r3
    }
}
   81e60:	bf00      	nop
   81e62:	bd80      	pop	{r7, pc}
   81e64:	00081df1 	.word	0x00081df1
   81e68:	20070ffc 	.word	0x20070ffc
   81e6c:	20070ff0 	.word	0x20070ff0
   81e70:	20070fec 	.word	0x20070fec
   81e74:	00080645 	.word	0x00080645

00081e78 <update_battery>:

void update_battery(Bool update_forced)
{
   81e78:	b590      	push	{r4, r7, lr}
   81e7a:	b085      	sub	sp, #20
   81e7c:	af00      	add	r7, sp, #0
   81e7e:	4603      	mov	r3, r0
   81e80:	71fb      	strb	r3, [r7, #7]
    char tmp[7];
    
    if (menu_main_scroll == 0)
   81e82:	4b56      	ldr	r3, [pc, #344]	; (81fdc <update_battery+0x164>)
   81e84:	781b      	ldrb	r3, [r3, #0]
   81e86:	2b00      	cmp	r3, #0
   81e88:	f040 80a4 	bne.w	81fd4 <update_battery+0x15c>
    {
        if ((getTicks() - ticks_battery) > 500)
   81e8c:	4b54      	ldr	r3, [pc, #336]	; (81fe0 <update_battery+0x168>)
   81e8e:	4798      	blx	r3
   81e90:	4602      	mov	r2, r0
   81e92:	4b54      	ldr	r3, [pc, #336]	; (81fe4 <update_battery+0x16c>)
   81e94:	681b      	ldr	r3, [r3, #0]
   81e96:	1ad3      	subs	r3, r2, r3
   81e98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   81e9c:	d952      	bls.n	81f44 <update_battery+0xcc>
        {
            ticks_battery = getTicks();
   81e9e:	4b50      	ldr	r3, [pc, #320]	; (81fe0 <update_battery+0x168>)
   81ea0:	4798      	blx	r3
   81ea2:	4602      	mov	r2, r0
   81ea4:	4b4f      	ldr	r3, [pc, #316]	; (81fe4 <update_battery+0x16c>)
   81ea6:	601a      	str	r2, [r3, #0]
            
            battery_voltage = (float)stm.bat_voltage / 16.0;
   81ea8:	4b4f      	ldr	r3, [pc, #316]	; (81fe8 <update_battery+0x170>)
   81eaa:	785a      	ldrb	r2, [r3, #1]
   81eac:	4b4f      	ldr	r3, [pc, #316]	; (81fec <update_battery+0x174>)
   81eae:	4610      	mov	r0, r2
   81eb0:	4798      	blx	r3
   81eb2:	4602      	mov	r2, r0
   81eb4:	4b4e      	ldr	r3, [pc, #312]	; (81ff0 <update_battery+0x178>)
   81eb6:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
   81eba:	4610      	mov	r0, r2
   81ebc:	4798      	blx	r3
   81ebe:	4603      	mov	r3, r0
   81ec0:	461a      	mov	r2, r3
   81ec2:	4b4c      	ldr	r3, [pc, #304]	; (81ff4 <update_battery+0x17c>)
   81ec4:	601a      	str	r2, [r3, #0]
            
            if ((int)(battery_voltage) != (int)(prev_battery_voltage))
   81ec6:	4b4b      	ldr	r3, [pc, #300]	; (81ff4 <update_battery+0x17c>)
   81ec8:	681a      	ldr	r2, [r3, #0]
   81eca:	4b4b      	ldr	r3, [pc, #300]	; (81ff8 <update_battery+0x180>)
   81ecc:	4610      	mov	r0, r2
   81ece:	4798      	blx	r3
   81ed0:	4604      	mov	r4, r0
   81ed2:	4b4a      	ldr	r3, [pc, #296]	; (81ffc <update_battery+0x184>)
   81ed4:	681a      	ldr	r2, [r3, #0]
   81ed6:	4b48      	ldr	r3, [pc, #288]	; (81ff8 <update_battery+0x180>)
   81ed8:	4610      	mov	r0, r2
   81eda:	4798      	blx	r3
   81edc:	4603      	mov	r3, r0
   81ede:	429c      	cmp	r4, r3
   81ee0:	d030      	beq.n	81f44 <update_battery+0xcc>
            {
                if (battery_voltage >= 10)
   81ee2:	4b44      	ldr	r3, [pc, #272]	; (81ff4 <update_battery+0x17c>)
   81ee4:	681a      	ldr	r2, [r3, #0]
   81ee6:	4b46      	ldr	r3, [pc, #280]	; (82000 <update_battery+0x188>)
   81ee8:	4946      	ldr	r1, [pc, #280]	; (82004 <update_battery+0x18c>)
   81eea:	4610      	mov	r0, r2
   81eec:	4798      	blx	r3
   81eee:	4603      	mov	r3, r0
   81ef0:	2b00      	cmp	r3, #0
   81ef2:	d00e      	beq.n	81f12 <update_battery+0x9a>
                {
                    sprintf(tmp, "%3.1fV", battery_voltage);
   81ef4:	4b3f      	ldr	r3, [pc, #252]	; (81ff4 <update_battery+0x17c>)
   81ef6:	681a      	ldr	r2, [r3, #0]
   81ef8:	4b43      	ldr	r3, [pc, #268]	; (82008 <update_battery+0x190>)
   81efa:	4610      	mov	r0, r2
   81efc:	4798      	blx	r3
   81efe:	4603      	mov	r3, r0
   81f00:	460c      	mov	r4, r1
   81f02:	f107 0008 	add.w	r0, r7, #8
   81f06:	461a      	mov	r2, r3
   81f08:	4623      	mov	r3, r4
   81f0a:	4940      	ldr	r1, [pc, #256]	; (8200c <update_battery+0x194>)
   81f0c:	4c40      	ldr	r4, [pc, #256]	; (82010 <update_battery+0x198>)
   81f0e:	47a0      	blx	r4
   81f10:	e00d      	b.n	81f2e <update_battery+0xb6>
                }
                else
                {
                    sprintf(tmp, " %3.1fV", battery_voltage);
   81f12:	4b38      	ldr	r3, [pc, #224]	; (81ff4 <update_battery+0x17c>)
   81f14:	681a      	ldr	r2, [r3, #0]
   81f16:	4b3c      	ldr	r3, [pc, #240]	; (82008 <update_battery+0x190>)
   81f18:	4610      	mov	r0, r2
   81f1a:	4798      	blx	r3
   81f1c:	4603      	mov	r3, r0
   81f1e:	460c      	mov	r4, r1
   81f20:	f107 0008 	add.w	r0, r7, #8
   81f24:	461a      	mov	r2, r3
   81f26:	4623      	mov	r3, r4
   81f28:	493a      	ldr	r1, [pc, #232]	; (82014 <update_battery+0x19c>)
   81f2a:	4c39      	ldr	r4, [pc, #228]	; (82010 <update_battery+0x198>)
   81f2c:	47a0      	blx	r4
                }
                
                lcd_print_s(1, 15, tmp);
   81f2e:	f107 0308 	add.w	r3, r7, #8
   81f32:	461a      	mov	r2, r3
   81f34:	210f      	movs	r1, #15
   81f36:	2001      	movs	r0, #1
   81f38:	4b37      	ldr	r3, [pc, #220]	; (82018 <update_battery+0x1a0>)
   81f3a:	4798      	blx	r3
                prev_battery_voltage = battery_voltage;
   81f3c:	4b2d      	ldr	r3, [pc, #180]	; (81ff4 <update_battery+0x17c>)
   81f3e:	681b      	ldr	r3, [r3, #0]
   81f40:	4a2e      	ldr	r2, [pc, #184]	; (81ffc <update_battery+0x184>)
   81f42:	6013      	str	r3, [r2, #0]
            }
        }
        
        if (update_forced)
   81f44:	79fb      	ldrb	r3, [r7, #7]
   81f46:	2b00      	cmp	r3, #0
   81f48:	d044      	beq.n	81fd4 <update_battery+0x15c>
        {
            ticks_battery = getTicks();
   81f4a:	4b25      	ldr	r3, [pc, #148]	; (81fe0 <update_battery+0x168>)
   81f4c:	4798      	blx	r3
   81f4e:	4602      	mov	r2, r0
   81f50:	4b24      	ldr	r3, [pc, #144]	; (81fe4 <update_battery+0x16c>)
   81f52:	601a      	str	r2, [r3, #0]
            
            battery_voltage = (float)stm.bat_voltage / 16.0;
   81f54:	4b24      	ldr	r3, [pc, #144]	; (81fe8 <update_battery+0x170>)
   81f56:	785a      	ldrb	r2, [r3, #1]
   81f58:	4b24      	ldr	r3, [pc, #144]	; (81fec <update_battery+0x174>)
   81f5a:	4610      	mov	r0, r2
   81f5c:	4798      	blx	r3
   81f5e:	4602      	mov	r2, r0
   81f60:	4b23      	ldr	r3, [pc, #140]	; (81ff0 <update_battery+0x178>)
   81f62:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
   81f66:	4610      	mov	r0, r2
   81f68:	4798      	blx	r3
   81f6a:	4603      	mov	r3, r0
   81f6c:	461a      	mov	r2, r3
   81f6e:	4b21      	ldr	r3, [pc, #132]	; (81ff4 <update_battery+0x17c>)
   81f70:	601a      	str	r2, [r3, #0]
            
            if (battery_voltage >= 10)
   81f72:	4b20      	ldr	r3, [pc, #128]	; (81ff4 <update_battery+0x17c>)
   81f74:	681a      	ldr	r2, [r3, #0]
   81f76:	4b22      	ldr	r3, [pc, #136]	; (82000 <update_battery+0x188>)
   81f78:	4922      	ldr	r1, [pc, #136]	; (82004 <update_battery+0x18c>)
   81f7a:	4610      	mov	r0, r2
   81f7c:	4798      	blx	r3
   81f7e:	4603      	mov	r3, r0
   81f80:	2b00      	cmp	r3, #0
   81f82:	d00e      	beq.n	81fa2 <update_battery+0x12a>
            {
                sprintf(tmp, "%3.1fV", battery_voltage);
   81f84:	4b1b      	ldr	r3, [pc, #108]	; (81ff4 <update_battery+0x17c>)
   81f86:	681a      	ldr	r2, [r3, #0]
   81f88:	4b1f      	ldr	r3, [pc, #124]	; (82008 <update_battery+0x190>)
   81f8a:	4610      	mov	r0, r2
   81f8c:	4798      	blx	r3
   81f8e:	4603      	mov	r3, r0
   81f90:	460c      	mov	r4, r1
   81f92:	f107 0008 	add.w	r0, r7, #8
   81f96:	461a      	mov	r2, r3
   81f98:	4623      	mov	r3, r4
   81f9a:	491c      	ldr	r1, [pc, #112]	; (8200c <update_battery+0x194>)
   81f9c:	4c1c      	ldr	r4, [pc, #112]	; (82010 <update_battery+0x198>)
   81f9e:	47a0      	blx	r4
   81fa0:	e00d      	b.n	81fbe <update_battery+0x146>
            }
            else
            {
                sprintf(tmp, " %3.1fV", battery_voltage);
   81fa2:	4b14      	ldr	r3, [pc, #80]	; (81ff4 <update_battery+0x17c>)
   81fa4:	681a      	ldr	r2, [r3, #0]
   81fa6:	4b18      	ldr	r3, [pc, #96]	; (82008 <update_battery+0x190>)
   81fa8:	4610      	mov	r0, r2
   81faa:	4798      	blx	r3
   81fac:	4603      	mov	r3, r0
   81fae:	460c      	mov	r4, r1
   81fb0:	f107 0008 	add.w	r0, r7, #8
   81fb4:	461a      	mov	r2, r3
   81fb6:	4623      	mov	r3, r4
   81fb8:	4916      	ldr	r1, [pc, #88]	; (82014 <update_battery+0x19c>)
   81fba:	4c15      	ldr	r4, [pc, #84]	; (82010 <update_battery+0x198>)
   81fbc:	47a0      	blx	r4
            }
            
            lcd_print_s(1, 15, tmp);
   81fbe:	f107 0308 	add.w	r3, r7, #8
   81fc2:	461a      	mov	r2, r3
   81fc4:	210f      	movs	r1, #15
   81fc6:	2001      	movs	r0, #1
   81fc8:	4b13      	ldr	r3, [pc, #76]	; (82018 <update_battery+0x1a0>)
   81fca:	4798      	blx	r3
            prev_battery_voltage = battery_voltage;
   81fcc:	4b09      	ldr	r3, [pc, #36]	; (81ff4 <update_battery+0x17c>)
   81fce:	681b      	ldr	r3, [r3, #0]
   81fd0:	4a0a      	ldr	r2, [pc, #40]	; (81ffc <update_battery+0x184>)
   81fd2:	6013      	str	r3, [r2, #0]
        }
    }
}
   81fd4:	bf00      	nop
   81fd6:	3714      	adds	r7, #20
   81fd8:	46bd      	mov	sp, r7
   81fda:	bd90      	pop	{r4, r7, pc}
   81fdc:	20070fa1 	.word	0x20070fa1
   81fe0:	00081df1 	.word	0x00081df1
   81fe4:	20071004 	.word	0x20071004
   81fe8:	20070ff4 	.word	0x20070ff4
   81fec:	000838e5 	.word	0x000838e5
   81ff0:	00083afd 	.word	0x00083afd
   81ff4:	20070fa8 	.word	0x20070fa8
   81ff8:	00083d21 	.word	0x00083d21
   81ffc:	20070fac 	.word	0x20070fac
   82000:	00083cf9 	.word	0x00083cf9
   82004:	41200000 	.word	0x41200000
   82008:	000836d1 	.word	0x000836d1
   8200c:	000883a0 	.word	0x000883a0
   82010:	00083e59 	.word	0x00083e59
   82014:	000883a8 	.word	0x000883a8
   82018:	00080f8d 	.word	0x00080f8d

0008201c <update_heartbeat>:

void update_heartbeat(void)
{
   8201c:	b580      	push	{r7, lr}
   8201e:	af00      	add	r7, sp, #0
    if (heart_state)
   82020:	4b20      	ldr	r3, [pc, #128]	; (820a4 <update_heartbeat+0x88>)
   82022:	781b      	ldrb	r3, [r3, #0]
   82024:	2b00      	cmp	r3, #0
   82026:	d01d      	beq.n	82064 <update_heartbeat+0x48>
    {
        if (getTicks() >= (ticks_heartbeat + 100))
   82028:	4b1f      	ldr	r3, [pc, #124]	; (820a8 <update_heartbeat+0x8c>)
   8202a:	4798      	blx	r3
   8202c:	4602      	mov	r2, r0
   8202e:	4b1f      	ldr	r3, [pc, #124]	; (820ac <update_heartbeat+0x90>)
   82030:	681b      	ldr	r3, [r3, #0]
   82032:	3364      	adds	r3, #100	; 0x64
   82034:	429a      	cmp	r2, r3
   82036:	d333      	bcc.n	820a0 <update_heartbeat+0x84>
        {
            ticks_heartbeat = getTicks();
   82038:	4b1b      	ldr	r3, [pc, #108]	; (820a8 <update_heartbeat+0x8c>)
   8203a:	4798      	blx	r3
   8203c:	4602      	mov	r2, r0
   8203e:	4b1b      	ldr	r3, [pc, #108]	; (820ac <update_heartbeat+0x90>)
   82040:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 0);
   82042:	2100      	movs	r1, #0
   82044:	206a      	movs	r0, #106	; 0x6a
   82046:	4b1a      	ldr	r3, [pc, #104]	; (820b0 <update_heartbeat+0x94>)
   82048:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 0);
   8204a:	2100      	movs	r1, #0
   8204c:	2067      	movs	r0, #103	; 0x67
   8204e:	4b18      	ldr	r3, [pc, #96]	; (820b0 <update_heartbeat+0x94>)
   82050:	4798      	blx	r3
            mts.ibit.heartbeat = 0;
   82052:	4a18      	ldr	r2, [pc, #96]	; (820b4 <update_heartbeat+0x98>)
   82054:	7813      	ldrb	r3, [r2, #0]
   82056:	f36f 0300 	bfc	r3, #0, #1
   8205a:	7013      	strb	r3, [r2, #0]
            heart_state = 0;
   8205c:	4b11      	ldr	r3, [pc, #68]	; (820a4 <update_heartbeat+0x88>)
   8205e:	2200      	movs	r2, #0
   82060:	701a      	strb	r2, [r3, #0]
            ioport_set_pin_level(LED_M1, 1);
            mts.ibit.heartbeat = 1;
            heart_state = 1;
        }
    }
}
   82062:	e01d      	b.n	820a0 <update_heartbeat+0x84>
        if (getTicks() >= (ticks_heartbeat + 900))
   82064:	4b10      	ldr	r3, [pc, #64]	; (820a8 <update_heartbeat+0x8c>)
   82066:	4798      	blx	r3
   82068:	4602      	mov	r2, r0
   8206a:	4b10      	ldr	r3, [pc, #64]	; (820ac <update_heartbeat+0x90>)
   8206c:	681b      	ldr	r3, [r3, #0]
   8206e:	f503 7361 	add.w	r3, r3, #900	; 0x384
   82072:	429a      	cmp	r2, r3
   82074:	d314      	bcc.n	820a0 <update_heartbeat+0x84>
            ticks_heartbeat = getTicks();
   82076:	4b0c      	ldr	r3, [pc, #48]	; (820a8 <update_heartbeat+0x8c>)
   82078:	4798      	blx	r3
   8207a:	4602      	mov	r2, r0
   8207c:	4b0b      	ldr	r3, [pc, #44]	; (820ac <update_heartbeat+0x90>)
   8207e:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 1);
   82080:	2101      	movs	r1, #1
   82082:	206a      	movs	r0, #106	; 0x6a
   82084:	4b0a      	ldr	r3, [pc, #40]	; (820b0 <update_heartbeat+0x94>)
   82086:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 1);
   82088:	2101      	movs	r1, #1
   8208a:	2067      	movs	r0, #103	; 0x67
   8208c:	4b08      	ldr	r3, [pc, #32]	; (820b0 <update_heartbeat+0x94>)
   8208e:	4798      	blx	r3
            mts.ibit.heartbeat = 1;
   82090:	4a08      	ldr	r2, [pc, #32]	; (820b4 <update_heartbeat+0x98>)
   82092:	7813      	ldrb	r3, [r2, #0]
   82094:	f043 0301 	orr.w	r3, r3, #1
   82098:	7013      	strb	r3, [r2, #0]
            heart_state = 1;
   8209a:	4b02      	ldr	r3, [pc, #8]	; (820a4 <update_heartbeat+0x88>)
   8209c:	2201      	movs	r2, #1
   8209e:	701a      	strb	r2, [r3, #0]
}
   820a0:	bf00      	nop
   820a2:	bd80      	pop	{r7, pc}
   820a4:	20070ff8 	.word	0x20070ff8
   820a8:	00081df1 	.word	0x00081df1
   820ac:	20071008 	.word	0x20071008
   820b0:	00081d69 	.word	0x00081d69
   820b4:	20070ff0 	.word	0x20070ff0

000820b8 <osc_enable>:
{
   820b8:	b580      	push	{r7, lr}
   820ba:	b082      	sub	sp, #8
   820bc:	af00      	add	r7, sp, #0
   820be:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   820c0:	687b      	ldr	r3, [r7, #4]
   820c2:	2b07      	cmp	r3, #7
   820c4:	d831      	bhi.n	8212a <osc_enable+0x72>
   820c6:	a201      	add	r2, pc, #4	; (adr r2, 820cc <osc_enable+0x14>)
   820c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   820cc:	00082129 	.word	0x00082129
   820d0:	000820ed 	.word	0x000820ed
   820d4:	000820f5 	.word	0x000820f5
   820d8:	000820fd 	.word	0x000820fd
   820dc:	00082105 	.word	0x00082105
   820e0:	0008210d 	.word	0x0008210d
   820e4:	00082115 	.word	0x00082115
   820e8:	0008211f 	.word	0x0008211f
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   820ec:	2000      	movs	r0, #0
   820ee:	4b11      	ldr	r3, [pc, #68]	; (82134 <osc_enable+0x7c>)
   820f0:	4798      	blx	r3
		break;
   820f2:	e01a      	b.n	8212a <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   820f4:	2001      	movs	r0, #1
   820f6:	4b0f      	ldr	r3, [pc, #60]	; (82134 <osc_enable+0x7c>)
   820f8:	4798      	blx	r3
		break;
   820fa:	e016      	b.n	8212a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   820fc:	2000      	movs	r0, #0
   820fe:	4b0e      	ldr	r3, [pc, #56]	; (82138 <osc_enable+0x80>)
   82100:	4798      	blx	r3
		break;
   82102:	e012      	b.n	8212a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   82104:	2010      	movs	r0, #16
   82106:	4b0c      	ldr	r3, [pc, #48]	; (82138 <osc_enable+0x80>)
   82108:	4798      	blx	r3
		break;
   8210a:	e00e      	b.n	8212a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8210c:	2020      	movs	r0, #32
   8210e:	4b0a      	ldr	r3, [pc, #40]	; (82138 <osc_enable+0x80>)
   82110:	4798      	blx	r3
		break;
   82112:	e00a      	b.n	8212a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82114:	213e      	movs	r1, #62	; 0x3e
   82116:	2000      	movs	r0, #0
   82118:	4b08      	ldr	r3, [pc, #32]	; (8213c <osc_enable+0x84>)
   8211a:	4798      	blx	r3
		break;
   8211c:	e005      	b.n	8212a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   8211e:	213e      	movs	r1, #62	; 0x3e
   82120:	2001      	movs	r0, #1
   82122:	4b06      	ldr	r3, [pc, #24]	; (8213c <osc_enable+0x84>)
   82124:	4798      	blx	r3
		break;
   82126:	e000      	b.n	8212a <osc_enable+0x72>
		break;
   82128:	bf00      	nop
}
   8212a:	bf00      	nop
   8212c:	3708      	adds	r7, #8
   8212e:	46bd      	mov	sp, r7
   82130:	bd80      	pop	{r7, pc}
   82132:	bf00      	nop
   82134:	000826f5 	.word	0x000826f5
   82138:	00082761 	.word	0x00082761
   8213c:	000827d1 	.word	0x000827d1

00082140 <osc_is_ready>:
{
   82140:	b580      	push	{r7, lr}
   82142:	b082      	sub	sp, #8
   82144:	af00      	add	r7, sp, #0
   82146:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82148:	687b      	ldr	r3, [r7, #4]
   8214a:	2b07      	cmp	r3, #7
   8214c:	d826      	bhi.n	8219c <osc_is_ready+0x5c>
   8214e:	a201      	add	r2, pc, #4	; (adr r2, 82154 <osc_is_ready+0x14>)
   82150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82154:	00082175 	.word	0x00082175
   82158:	00082179 	.word	0x00082179
   8215c:	00082179 	.word	0x00082179
   82160:	0008218b 	.word	0x0008218b
   82164:	0008218b 	.word	0x0008218b
   82168:	0008218b 	.word	0x0008218b
   8216c:	0008218b 	.word	0x0008218b
   82170:	0008218b 	.word	0x0008218b
		return 1;
   82174:	2301      	movs	r3, #1
   82176:	e012      	b.n	8219e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   82178:	4b0b      	ldr	r3, [pc, #44]	; (821a8 <osc_is_ready+0x68>)
   8217a:	4798      	blx	r3
   8217c:	4603      	mov	r3, r0
   8217e:	2b00      	cmp	r3, #0
   82180:	bf14      	ite	ne
   82182:	2301      	movne	r3, #1
   82184:	2300      	moveq	r3, #0
   82186:	b2db      	uxtb	r3, r3
   82188:	e009      	b.n	8219e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   8218a:	4b08      	ldr	r3, [pc, #32]	; (821ac <osc_is_ready+0x6c>)
   8218c:	4798      	blx	r3
   8218e:	4603      	mov	r3, r0
   82190:	2b00      	cmp	r3, #0
   82192:	bf14      	ite	ne
   82194:	2301      	movne	r3, #1
   82196:	2300      	moveq	r3, #0
   82198:	b2db      	uxtb	r3, r3
   8219a:	e000      	b.n	8219e <osc_is_ready+0x5e>
	return 0;
   8219c:	2300      	movs	r3, #0
}
   8219e:	4618      	mov	r0, r3
   821a0:	3708      	adds	r7, #8
   821a2:	46bd      	mov	sp, r7
   821a4:	bd80      	pop	{r7, pc}
   821a6:	bf00      	nop
   821a8:	0008272d 	.word	0x0008272d
   821ac:	00082849 	.word	0x00082849

000821b0 <osc_get_rate>:
{
   821b0:	b480      	push	{r7}
   821b2:	b083      	sub	sp, #12
   821b4:	af00      	add	r7, sp, #0
   821b6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   821b8:	687b      	ldr	r3, [r7, #4]
   821ba:	2b07      	cmp	r3, #7
   821bc:	d825      	bhi.n	8220a <osc_get_rate+0x5a>
   821be:	a201      	add	r2, pc, #4	; (adr r2, 821c4 <osc_get_rate+0x14>)
   821c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   821c4:	000821e5 	.word	0x000821e5
   821c8:	000821eb 	.word	0x000821eb
   821cc:	000821f1 	.word	0x000821f1
   821d0:	000821f7 	.word	0x000821f7
   821d4:	000821fb 	.word	0x000821fb
   821d8:	000821ff 	.word	0x000821ff
   821dc:	00082203 	.word	0x00082203
   821e0:	00082207 	.word	0x00082207
		return OSC_SLCK_32K_RC_HZ;
   821e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   821e8:	e010      	b.n	8220c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   821ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   821ee:	e00d      	b.n	8220c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   821f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   821f4:	e00a      	b.n	8220c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   821f6:	4b08      	ldr	r3, [pc, #32]	; (82218 <osc_get_rate+0x68>)
   821f8:	e008      	b.n	8220c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   821fa:	4b08      	ldr	r3, [pc, #32]	; (8221c <osc_get_rate+0x6c>)
   821fc:	e006      	b.n	8220c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   821fe:	4b08      	ldr	r3, [pc, #32]	; (82220 <osc_get_rate+0x70>)
   82200:	e004      	b.n	8220c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   82202:	4b07      	ldr	r3, [pc, #28]	; (82220 <osc_get_rate+0x70>)
   82204:	e002      	b.n	8220c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   82206:	4b06      	ldr	r3, [pc, #24]	; (82220 <osc_get_rate+0x70>)
   82208:	e000      	b.n	8220c <osc_get_rate+0x5c>
	return 0;
   8220a:	2300      	movs	r3, #0
}
   8220c:	4618      	mov	r0, r3
   8220e:	370c      	adds	r7, #12
   82210:	46bd      	mov	sp, r7
   82212:	bc80      	pop	{r7}
   82214:	4770      	bx	lr
   82216:	bf00      	nop
   82218:	003d0900 	.word	0x003d0900
   8221c:	007a1200 	.word	0x007a1200
   82220:	00b71b00 	.word	0x00b71b00

00082224 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   82224:	b580      	push	{r7, lr}
   82226:	b082      	sub	sp, #8
   82228:	af00      	add	r7, sp, #0
   8222a:	4603      	mov	r3, r0
   8222c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8222e:	bf00      	nop
   82230:	79fb      	ldrb	r3, [r7, #7]
   82232:	4618      	mov	r0, r3
   82234:	4b05      	ldr	r3, [pc, #20]	; (8224c <osc_wait_ready+0x28>)
   82236:	4798      	blx	r3
   82238:	4603      	mov	r3, r0
   8223a:	f083 0301 	eor.w	r3, r3, #1
   8223e:	b2db      	uxtb	r3, r3
   82240:	2b00      	cmp	r3, #0
   82242:	d1f5      	bne.n	82230 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   82244:	bf00      	nop
   82246:	3708      	adds	r7, #8
   82248:	46bd      	mov	sp, r7
   8224a:	bd80      	pop	{r7, pc}
   8224c:	00082141 	.word	0x00082141

00082250 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   82250:	b580      	push	{r7, lr}
   82252:	b086      	sub	sp, #24
   82254:	af00      	add	r7, sp, #0
   82256:	60f8      	str	r0, [r7, #12]
   82258:	607a      	str	r2, [r7, #4]
   8225a:	603b      	str	r3, [r7, #0]
   8225c:	460b      	mov	r3, r1
   8225e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   82260:	687b      	ldr	r3, [r7, #4]
   82262:	2b00      	cmp	r3, #0
   82264:	d107      	bne.n	82276 <pll_config_init+0x26>
   82266:	683b      	ldr	r3, [r7, #0]
   82268:	2b00      	cmp	r3, #0
   8226a:	d104      	bne.n	82276 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   8226c:	68fb      	ldr	r3, [r7, #12]
   8226e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   82272:	601a      	str	r2, [r3, #0]
   82274:	e019      	b.n	822aa <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   82276:	7afb      	ldrb	r3, [r7, #11]
   82278:	4618      	mov	r0, r3
   8227a:	4b0e      	ldr	r3, [pc, #56]	; (822b4 <pll_config_init+0x64>)
   8227c:	4798      	blx	r3
   8227e:	4602      	mov	r2, r0
   82280:	687b      	ldr	r3, [r7, #4]
   82282:	fbb2 f3f3 	udiv	r3, r2, r3
   82286:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   82288:	697b      	ldr	r3, [r7, #20]
   8228a:	683a      	ldr	r2, [r7, #0]
   8228c:	fb02 f303 	mul.w	r3, r2, r3
   82290:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   82292:	683b      	ldr	r3, [r7, #0]
   82294:	3b01      	subs	r3, #1
   82296:	041a      	lsls	r2, r3, #16
   82298:	4b07      	ldr	r3, [pc, #28]	; (822b8 <pll_config_init+0x68>)
   8229a:	4013      	ands	r3, r2
   8229c:	687a      	ldr	r2, [r7, #4]
   8229e:	b2d2      	uxtb	r2, r2
   822a0:	4313      	orrs	r3, r2
   822a2:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   822a6:	68fb      	ldr	r3, [r7, #12]
   822a8:	601a      	str	r2, [r3, #0]
	}
}
   822aa:	bf00      	nop
   822ac:	3718      	adds	r7, #24
   822ae:	46bd      	mov	sp, r7
   822b0:	bd80      	pop	{r7, pc}
   822b2:	bf00      	nop
   822b4:	000821b1 	.word	0x000821b1
   822b8:	07ff0000 	.word	0x07ff0000

000822bc <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   822bc:	b580      	push	{r7, lr}
   822be:	b082      	sub	sp, #8
   822c0:	af00      	add	r7, sp, #0
   822c2:	6078      	str	r0, [r7, #4]
   822c4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   822c6:	683b      	ldr	r3, [r7, #0]
   822c8:	2b00      	cmp	r3, #0
   822ca:	d108      	bne.n	822de <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   822cc:	4b09      	ldr	r3, [pc, #36]	; (822f4 <pll_enable+0x38>)
   822ce:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   822d0:	4a09      	ldr	r2, [pc, #36]	; (822f8 <pll_enable+0x3c>)
   822d2:	687b      	ldr	r3, [r7, #4]
   822d4:	681b      	ldr	r3, [r3, #0]
   822d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   822da:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   822dc:	e005      	b.n	822ea <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   822de:	4a06      	ldr	r2, [pc, #24]	; (822f8 <pll_enable+0x3c>)
   822e0:	687b      	ldr	r3, [r7, #4]
   822e2:	681b      	ldr	r3, [r3, #0]
   822e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   822e8:	61d3      	str	r3, [r2, #28]
}
   822ea:	bf00      	nop
   822ec:	3708      	adds	r7, #8
   822ee:	46bd      	mov	sp, r7
   822f0:	bd80      	pop	{r7, pc}
   822f2:	bf00      	nop
   822f4:	00082861 	.word	0x00082861
   822f8:	400e0600 	.word	0x400e0600

000822fc <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   822fc:	b580      	push	{r7, lr}
   822fe:	b082      	sub	sp, #8
   82300:	af00      	add	r7, sp, #0
   82302:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82304:	687b      	ldr	r3, [r7, #4]
   82306:	2b00      	cmp	r3, #0
   82308:	d103      	bne.n	82312 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8230a:	4b05      	ldr	r3, [pc, #20]	; (82320 <pll_is_locked+0x24>)
   8230c:	4798      	blx	r3
   8230e:	4603      	mov	r3, r0
   82310:	e002      	b.n	82318 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   82312:	4b04      	ldr	r3, [pc, #16]	; (82324 <pll_is_locked+0x28>)
   82314:	4798      	blx	r3
   82316:	4603      	mov	r3, r0
	}
}
   82318:	4618      	mov	r0, r3
   8231a:	3708      	adds	r7, #8
   8231c:	46bd      	mov	sp, r7
   8231e:	bd80      	pop	{r7, pc}
   82320:	00082879 	.word	0x00082879
   82324:	00082891 	.word	0x00082891

00082328 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   82328:	b580      	push	{r7, lr}
   8232a:	b082      	sub	sp, #8
   8232c:	af00      	add	r7, sp, #0
   8232e:	4603      	mov	r3, r0
   82330:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   82332:	79fb      	ldrb	r3, [r7, #7]
   82334:	3b03      	subs	r3, #3
   82336:	2b04      	cmp	r3, #4
   82338:	d808      	bhi.n	8234c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8233a:	79fb      	ldrb	r3, [r7, #7]
   8233c:	4618      	mov	r0, r3
   8233e:	4b06      	ldr	r3, [pc, #24]	; (82358 <pll_enable_source+0x30>)
   82340:	4798      	blx	r3
		osc_wait_ready(e_src);
   82342:	79fb      	ldrb	r3, [r7, #7]
   82344:	4618      	mov	r0, r3
   82346:	4b05      	ldr	r3, [pc, #20]	; (8235c <pll_enable_source+0x34>)
   82348:	4798      	blx	r3
		break;
   8234a:	e000      	b.n	8234e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   8234c:	bf00      	nop
	}
}
   8234e:	bf00      	nop
   82350:	3708      	adds	r7, #8
   82352:	46bd      	mov	sp, r7
   82354:	bd80      	pop	{r7, pc}
   82356:	bf00      	nop
   82358:	000820b9 	.word	0x000820b9
   8235c:	00082225 	.word	0x00082225

00082360 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   82360:	b580      	push	{r7, lr}
   82362:	b082      	sub	sp, #8
   82364:	af00      	add	r7, sp, #0
   82366:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82368:	bf00      	nop
   8236a:	6878      	ldr	r0, [r7, #4]
   8236c:	4b04      	ldr	r3, [pc, #16]	; (82380 <pll_wait_for_lock+0x20>)
   8236e:	4798      	blx	r3
   82370:	4603      	mov	r3, r0
   82372:	2b00      	cmp	r3, #0
   82374:	d0f9      	beq.n	8236a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   82376:	2300      	movs	r3, #0
}
   82378:	4618      	mov	r0, r3
   8237a:	3708      	adds	r7, #8
   8237c:	46bd      	mov	sp, r7
   8237e:	bd80      	pop	{r7, pc}
   82380:	000822fd 	.word	0x000822fd

00082384 <sysclk_get_main_hz>:
{
   82384:	b580      	push	{r7, lr}
   82386:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   82388:	2006      	movs	r0, #6
   8238a:	4b04      	ldr	r3, [pc, #16]	; (8239c <sysclk_get_main_hz+0x18>)
   8238c:	4798      	blx	r3
   8238e:	4602      	mov	r2, r0
   82390:	4613      	mov	r3, r2
   82392:	00db      	lsls	r3, r3, #3
   82394:	1a9b      	subs	r3, r3, r2
   82396:	005b      	lsls	r3, r3, #1
}
   82398:	4618      	mov	r0, r3
   8239a:	bd80      	pop	{r7, pc}
   8239c:	000821b1 	.word	0x000821b1

000823a0 <sysclk_get_cpu_hz>:
{
   823a0:	b580      	push	{r7, lr}
   823a2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   823a4:	4b02      	ldr	r3, [pc, #8]	; (823b0 <sysclk_get_cpu_hz+0x10>)
   823a6:	4798      	blx	r3
   823a8:	4603      	mov	r3, r0
   823aa:	085b      	lsrs	r3, r3, #1
}
   823ac:	4618      	mov	r0, r3
   823ae:	bd80      	pop	{r7, pc}
   823b0:	00082385 	.word	0x00082385

000823b4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   823b4:	b590      	push	{r4, r7, lr}
   823b6:	b083      	sub	sp, #12
   823b8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   823ba:	4811      	ldr	r0, [pc, #68]	; (82400 <sysclk_init+0x4c>)
   823bc:	4b11      	ldr	r3, [pc, #68]	; (82404 <sysclk_init+0x50>)
   823be:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   823c0:	2006      	movs	r0, #6
   823c2:	4b11      	ldr	r3, [pc, #68]	; (82408 <sysclk_init+0x54>)
   823c4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   823c6:	1d38      	adds	r0, r7, #4
   823c8:	230e      	movs	r3, #14
   823ca:	2201      	movs	r2, #1
   823cc:	2106      	movs	r1, #6
   823ce:	4c0f      	ldr	r4, [pc, #60]	; (8240c <sysclk_init+0x58>)
   823d0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   823d2:	1d3b      	adds	r3, r7, #4
   823d4:	2100      	movs	r1, #0
   823d6:	4618      	mov	r0, r3
   823d8:	4b0d      	ldr	r3, [pc, #52]	; (82410 <sysclk_init+0x5c>)
   823da:	4798      	blx	r3
		pll_wait_for_lock(0);
   823dc:	2000      	movs	r0, #0
   823de:	4b0d      	ldr	r3, [pc, #52]	; (82414 <sysclk_init+0x60>)
   823e0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   823e2:	2010      	movs	r0, #16
   823e4:	4b0c      	ldr	r3, [pc, #48]	; (82418 <sysclk_init+0x64>)
   823e6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   823e8:	4b0c      	ldr	r3, [pc, #48]	; (8241c <sysclk_init+0x68>)
   823ea:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   823ec:	4b0c      	ldr	r3, [pc, #48]	; (82420 <sysclk_init+0x6c>)
   823ee:	4798      	blx	r3
   823f0:	4603      	mov	r3, r0
   823f2:	4618      	mov	r0, r3
   823f4:	4b03      	ldr	r3, [pc, #12]	; (82404 <sysclk_init+0x50>)
   823f6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   823f8:	bf00      	nop
   823fa:	370c      	adds	r7, #12
   823fc:	46bd      	mov	sp, r7
   823fe:	bd90      	pop	{r4, r7, pc}
   82400:	0501bd00 	.word	0x0501bd00
   82404:	200700d1 	.word	0x200700d1
   82408:	00082329 	.word	0x00082329
   8240c:	00082251 	.word	0x00082251
   82410:	000822bd 	.word	0x000822bd
   82414:	00082361 	.word	0x00082361
   82418:	00082675 	.word	0x00082675
   8241c:	00082dad 	.word	0x00082dad
   82420:	000823a1 	.word	0x000823a1

00082424 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   82424:	b580      	push	{r7, lr}
   82426:	b082      	sub	sp, #8
   82428:	af00      	add	r7, sp, #0
   8242a:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   8242c:	6878      	ldr	r0, [r7, #4]
   8242e:	4b03      	ldr	r3, [pc, #12]	; (8243c <dmac_init+0x18>)
   82430:	4798      	blx	r3
}
   82432:	bf00      	nop
   82434:	3708      	adds	r7, #8
   82436:	46bd      	mov	sp, r7
   82438:	bd80      	pop	{r7, pc}
   8243a:	bf00      	nop
   8243c:	0008247f 	.word	0x0008247f

00082440 <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   82440:	b480      	push	{r7}
   82442:	b083      	sub	sp, #12
   82444:	af00      	add	r7, sp, #0
   82446:	6078      	str	r0, [r7, #4]
   82448:	460b      	mov	r3, r1
   8244a:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   8244c:	687b      	ldr	r3, [r7, #4]
   8244e:	681b      	ldr	r3, [r3, #0]
   82450:	f023 0210 	bic.w	r2, r3, #16
   82454:	78fb      	ldrb	r3, [r7, #3]
   82456:	431a      	orrs	r2, r3
   82458:	687b      	ldr	r3, [r7, #4]
   8245a:	601a      	str	r2, [r3, #0]
}
   8245c:	bf00      	nop
   8245e:	370c      	adds	r7, #12
   82460:	46bd      	mov	sp, r7
   82462:	bc80      	pop	{r7}
   82464:	4770      	bx	lr

00082466 <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   82466:	b480      	push	{r7}
   82468:	b083      	sub	sp, #12
   8246a:	af00      	add	r7, sp, #0
   8246c:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   8246e:	687b      	ldr	r3, [r7, #4]
   82470:	2201      	movs	r2, #1
   82472:	605a      	str	r2, [r3, #4]
}
   82474:	bf00      	nop
   82476:	370c      	adds	r7, #12
   82478:	46bd      	mov	sp, r7
   8247a:	bc80      	pop	{r7}
   8247c:	4770      	bx	lr

0008247e <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   8247e:	b480      	push	{r7}
   82480:	b083      	sub	sp, #12
   82482:	af00      	add	r7, sp, #0
   82484:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   82486:	687b      	ldr	r3, [r7, #4]
   82488:	685b      	ldr	r3, [r3, #4]
   8248a:	f023 0201 	bic.w	r2, r3, #1
   8248e:	687b      	ldr	r3, [r7, #4]
   82490:	605a      	str	r2, [r3, #4]
}
   82492:	bf00      	nop
   82494:	370c      	adds	r7, #12
   82496:	46bd      	mov	sp, r7
   82498:	bc80      	pop	{r7}
   8249a:	4770      	bx	lr

0008249c <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   8249c:	b480      	push	{r7}
   8249e:	b083      	sub	sp, #12
   824a0:	af00      	add	r7, sp, #0
   824a2:	6078      	str	r0, [r7, #4]
   824a4:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   824a6:	687b      	ldr	r3, [r7, #4]
   824a8:	683a      	ldr	r2, [r7, #0]
   824aa:	619a      	str	r2, [r3, #24]
}
   824ac:	bf00      	nop
   824ae:	370c      	adds	r7, #12
   824b0:	46bd      	mov	sp, r7
   824b2:	bc80      	pop	{r7}
   824b4:	4770      	bx	lr

000824b6 <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   824b6:	b480      	push	{r7}
   824b8:	b083      	sub	sp, #12
   824ba:	af00      	add	r7, sp, #0
   824bc:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   824be:	687b      	ldr	r3, [r7, #4]
   824c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   824c2:	4618      	mov	r0, r3
   824c4:	370c      	adds	r7, #12
   824c6:	46bd      	mov	sp, r7
   824c8:	bc80      	pop	{r7}
   824ca:	4770      	bx	lr

000824cc <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   824cc:	b480      	push	{r7}
   824ce:	b083      	sub	sp, #12
   824d0:	af00      	add	r7, sp, #0
   824d2:	6078      	str	r0, [r7, #4]
   824d4:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   824d6:	2201      	movs	r2, #1
   824d8:	683b      	ldr	r3, [r7, #0]
   824da:	409a      	lsls	r2, r3
   824dc:	687b      	ldr	r3, [r7, #4]
   824de:	629a      	str	r2, [r3, #40]	; 0x28
}
   824e0:	bf00      	nop
   824e2:	370c      	adds	r7, #12
   824e4:	46bd      	mov	sp, r7
   824e6:	bc80      	pop	{r7}
   824e8:	4770      	bx	lr

000824ea <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   824ea:	b480      	push	{r7}
   824ec:	b083      	sub	sp, #12
   824ee:	af00      	add	r7, sp, #0
   824f0:	6078      	str	r0, [r7, #4]
   824f2:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   824f4:	2201      	movs	r2, #1
   824f6:	683b      	ldr	r3, [r7, #0]
   824f8:	409a      	lsls	r2, r3
   824fa:	687b      	ldr	r3, [r7, #4]
   824fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
   824fe:	bf00      	nop
   82500:	370c      	adds	r7, #12
   82502:	46bd      	mov	sp, r7
   82504:	bc80      	pop	{r7}
   82506:	4770      	bx	lr

00082508 <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   82508:	b480      	push	{r7}
   8250a:	b085      	sub	sp, #20
   8250c:	af00      	add	r7, sp, #0
   8250e:	60f8      	str	r0, [r7, #12]
   82510:	60b9      	str	r1, [r7, #8]
   82512:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   82514:	68f9      	ldr	r1, [r7, #12]
   82516:	68ba      	ldr	r2, [r7, #8]
   82518:	4613      	mov	r3, r2
   8251a:	009b      	lsls	r3, r3, #2
   8251c:	4413      	add	r3, r2
   8251e:	00db      	lsls	r3, r3, #3
   82520:	440b      	add	r3, r1
   82522:	333c      	adds	r3, #60	; 0x3c
   82524:	687a      	ldr	r2, [r7, #4]
   82526:	601a      	str	r2, [r3, #0]
}
   82528:	bf00      	nop
   8252a:	3714      	adds	r7, #20
   8252c:	46bd      	mov	sp, r7
   8252e:	bc80      	pop	{r7}
   82530:	4770      	bx	lr

00082532 <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   82532:	b480      	push	{r7}
   82534:	b085      	sub	sp, #20
   82536:	af00      	add	r7, sp, #0
   82538:	60f8      	str	r0, [r7, #12]
   8253a:	60b9      	str	r1, [r7, #8]
   8253c:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   8253e:	68f9      	ldr	r1, [r7, #12]
   82540:	68ba      	ldr	r2, [r7, #8]
   82542:	4613      	mov	r3, r2
   82544:	009b      	lsls	r3, r3, #2
   82546:	4413      	add	r3, r2
   82548:	00db      	lsls	r3, r3, #3
   8254a:	440b      	add	r3, r1
   8254c:	3340      	adds	r3, #64	; 0x40
   8254e:	687a      	ldr	r2, [r7, #4]
   82550:	601a      	str	r2, [r3, #0]
}
   82552:	bf00      	nop
   82554:	3714      	adds	r7, #20
   82556:	46bd      	mov	sp, r7
   82558:	bc80      	pop	{r7}
   8255a:	4770      	bx	lr

0008255c <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   8255c:	b480      	push	{r7}
   8255e:	b085      	sub	sp, #20
   82560:	af00      	add	r7, sp, #0
   82562:	60f8      	str	r0, [r7, #12]
   82564:	60b9      	str	r1, [r7, #8]
   82566:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   82568:	68f9      	ldr	r1, [r7, #12]
   8256a:	68ba      	ldr	r2, [r7, #8]
   8256c:	4613      	mov	r3, r2
   8256e:	009b      	lsls	r3, r3, #2
   82570:	4413      	add	r3, r2
   82572:	00db      	lsls	r3, r3, #3
   82574:	440b      	add	r3, r1
   82576:	3344      	adds	r3, #68	; 0x44
   82578:	687a      	ldr	r2, [r7, #4]
   8257a:	601a      	str	r2, [r3, #0]
}
   8257c:	bf00      	nop
   8257e:	3714      	adds	r7, #20
   82580:	46bd      	mov	sp, r7
   82582:	bc80      	pop	{r7}
   82584:	4770      	bx	lr

00082586 <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   82586:	b480      	push	{r7}
   82588:	b085      	sub	sp, #20
   8258a:	af00      	add	r7, sp, #0
   8258c:	60f8      	str	r0, [r7, #12]
   8258e:	60b9      	str	r1, [r7, #8]
   82590:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   82592:	68f9      	ldr	r1, [r7, #12]
   82594:	68ba      	ldr	r2, [r7, #8]
   82596:	4613      	mov	r3, r2
   82598:	009b      	lsls	r3, r3, #2
   8259a:	4413      	add	r3, r2
   8259c:	00db      	lsls	r3, r3, #3
   8259e:	440b      	add	r3, r1
   825a0:	3348      	adds	r3, #72	; 0x48
   825a2:	687a      	ldr	r2, [r7, #4]
   825a4:	601a      	str	r2, [r3, #0]
}
   825a6:	bf00      	nop
   825a8:	3714      	adds	r7, #20
   825aa:	46bd      	mov	sp, r7
   825ac:	bc80      	pop	{r7}
   825ae:	4770      	bx	lr

000825b0 <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   825b0:	b480      	push	{r7}
   825b2:	b085      	sub	sp, #20
   825b4:	af00      	add	r7, sp, #0
   825b6:	60f8      	str	r0, [r7, #12]
   825b8:	60b9      	str	r1, [r7, #8]
   825ba:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   825bc:	68f9      	ldr	r1, [r7, #12]
   825be:	68ba      	ldr	r2, [r7, #8]
   825c0:	4613      	mov	r3, r2
   825c2:	009b      	lsls	r3, r3, #2
   825c4:	4413      	add	r3, r2
   825c6:	00db      	lsls	r3, r3, #3
   825c8:	440b      	add	r3, r1
   825ca:	334c      	adds	r3, #76	; 0x4c
   825cc:	687a      	ldr	r2, [r7, #4]
   825ce:	601a      	str	r2, [r3, #0]
}
   825d0:	bf00      	nop
   825d2:	3714      	adds	r7, #20
   825d4:	46bd      	mov	sp, r7
   825d6:	bc80      	pop	{r7}
   825d8:	4770      	bx	lr

000825da <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   825da:	b480      	push	{r7}
   825dc:	b085      	sub	sp, #20
   825de:	af00      	add	r7, sp, #0
   825e0:	60f8      	str	r0, [r7, #12]
   825e2:	60b9      	str	r1, [r7, #8]
   825e4:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   825e6:	68f9      	ldr	r1, [r7, #12]
   825e8:	68ba      	ldr	r2, [r7, #8]
   825ea:	4613      	mov	r3, r2
   825ec:	009b      	lsls	r3, r3, #2
   825ee:	4413      	add	r3, r2
   825f0:	00db      	lsls	r3, r3, #3
   825f2:	440b      	add	r3, r1
   825f4:	3350      	adds	r3, #80	; 0x50
   825f6:	687a      	ldr	r2, [r7, #4]
   825f8:	601a      	str	r2, [r3, #0]
}
   825fa:	bf00      	nop
   825fc:	3714      	adds	r7, #20
   825fe:	46bd      	mov	sp, r7
   82600:	bc80      	pop	{r7}
   82602:	4770      	bx	lr

00082604 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   82604:	b580      	push	{r7, lr}
   82606:	b084      	sub	sp, #16
   82608:	af00      	add	r7, sp, #0
   8260a:	60f8      	str	r0, [r7, #12]
   8260c:	60b9      	str	r1, [r7, #8]
   8260e:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   82610:	68fb      	ldr	r3, [r7, #12]
   82612:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   82614:	687b      	ldr	r3, [r7, #4]
   82616:	681b      	ldr	r3, [r3, #0]
   82618:	461a      	mov	r2, r3
   8261a:	68b9      	ldr	r1, [r7, #8]
   8261c:	68f8      	ldr	r0, [r7, #12]
   8261e:	4b10      	ldr	r3, [pc, #64]	; (82660 <dmac_channel_single_buf_transfer_init+0x5c>)
   82620:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   82622:	687b      	ldr	r3, [r7, #4]
   82624:	685b      	ldr	r3, [r3, #4]
   82626:	461a      	mov	r2, r3
   82628:	68b9      	ldr	r1, [r7, #8]
   8262a:	68f8      	ldr	r0, [r7, #12]
   8262c:	4b0d      	ldr	r3, [pc, #52]	; (82664 <dmac_channel_single_buf_transfer_init+0x60>)
   8262e:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   82630:	2200      	movs	r2, #0
   82632:	68b9      	ldr	r1, [r7, #8]
   82634:	68f8      	ldr	r0, [r7, #12]
   82636:	4b0c      	ldr	r3, [pc, #48]	; (82668 <dmac_channel_single_buf_transfer_init+0x64>)
   82638:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   8263a:	687b      	ldr	r3, [r7, #4]
   8263c:	689b      	ldr	r3, [r3, #8]
   8263e:	461a      	mov	r2, r3
   82640:	68b9      	ldr	r1, [r7, #8]
   82642:	68f8      	ldr	r0, [r7, #12]
   82644:	4b09      	ldr	r3, [pc, #36]	; (8266c <dmac_channel_single_buf_transfer_init+0x68>)
   82646:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   82648:	687b      	ldr	r3, [r7, #4]
   8264a:	68db      	ldr	r3, [r3, #12]
   8264c:	461a      	mov	r2, r3
   8264e:	68b9      	ldr	r1, [r7, #8]
   82650:	68f8      	ldr	r0, [r7, #12]
   82652:	4b07      	ldr	r3, [pc, #28]	; (82670 <dmac_channel_single_buf_transfer_init+0x6c>)
   82654:	4798      	blx	r3
}
   82656:	bf00      	nop
   82658:	3710      	adds	r7, #16
   8265a:	46bd      	mov	sp, r7
   8265c:	bd80      	pop	{r7, pc}
   8265e:	bf00      	nop
   82660:	00082509 	.word	0x00082509
   82664:	00082533 	.word	0x00082533
   82668:	0008255d 	.word	0x0008255d
   8266c:	00082587 	.word	0x00082587
   82670:	000825b1 	.word	0x000825b1

00082674 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82674:	b480      	push	{r7}
   82676:	b085      	sub	sp, #20
   82678:	af00      	add	r7, sp, #0
   8267a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8267c:	491c      	ldr	r1, [pc, #112]	; (826f0 <pmc_switch_mck_to_pllack+0x7c>)
   8267e:	4b1c      	ldr	r3, [pc, #112]	; (826f0 <pmc_switch_mck_to_pllack+0x7c>)
   82680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82686:	687b      	ldr	r3, [r7, #4]
   82688:	4313      	orrs	r3, r2
   8268a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8268c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82690:	60fb      	str	r3, [r7, #12]
   82692:	e007      	b.n	826a4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82694:	68fb      	ldr	r3, [r7, #12]
   82696:	2b00      	cmp	r3, #0
   82698:	d101      	bne.n	8269e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8269a:	2301      	movs	r3, #1
   8269c:	e023      	b.n	826e6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8269e:	68fb      	ldr	r3, [r7, #12]
   826a0:	3b01      	subs	r3, #1
   826a2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826a4:	4b12      	ldr	r3, [pc, #72]	; (826f0 <pmc_switch_mck_to_pllack+0x7c>)
   826a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   826a8:	f003 0308 	and.w	r3, r3, #8
   826ac:	2b00      	cmp	r3, #0
   826ae:	d0f1      	beq.n	82694 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   826b0:	4a0f      	ldr	r2, [pc, #60]	; (826f0 <pmc_switch_mck_to_pllack+0x7c>)
   826b2:	4b0f      	ldr	r3, [pc, #60]	; (826f0 <pmc_switch_mck_to_pllack+0x7c>)
   826b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   826b6:	f023 0303 	bic.w	r3, r3, #3
   826ba:	f043 0302 	orr.w	r3, r3, #2
   826be:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   826c4:	60fb      	str	r3, [r7, #12]
   826c6:	e007      	b.n	826d8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   826c8:	68fb      	ldr	r3, [r7, #12]
   826ca:	2b00      	cmp	r3, #0
   826cc:	d101      	bne.n	826d2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   826ce:	2301      	movs	r3, #1
   826d0:	e009      	b.n	826e6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   826d2:	68fb      	ldr	r3, [r7, #12]
   826d4:	3b01      	subs	r3, #1
   826d6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826d8:	4b05      	ldr	r3, [pc, #20]	; (826f0 <pmc_switch_mck_to_pllack+0x7c>)
   826da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   826dc:	f003 0308 	and.w	r3, r3, #8
   826e0:	2b00      	cmp	r3, #0
   826e2:	d0f1      	beq.n	826c8 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   826e4:	2300      	movs	r3, #0
}
   826e6:	4618      	mov	r0, r3
   826e8:	3714      	adds	r7, #20
   826ea:	46bd      	mov	sp, r7
   826ec:	bc80      	pop	{r7}
   826ee:	4770      	bx	lr
   826f0:	400e0600 	.word	0x400e0600

000826f4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   826f4:	b480      	push	{r7}
   826f6:	b083      	sub	sp, #12
   826f8:	af00      	add	r7, sp, #0
   826fa:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   826fc:	687b      	ldr	r3, [r7, #4]
   826fe:	2b01      	cmp	r3, #1
   82700:	d107      	bne.n	82712 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   82702:	4a08      	ldr	r2, [pc, #32]	; (82724 <pmc_switch_sclk_to_32kxtal+0x30>)
   82704:	4b07      	ldr	r3, [pc, #28]	; (82724 <pmc_switch_sclk_to_32kxtal+0x30>)
   82706:	689b      	ldr	r3, [r3, #8]
   82708:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8270c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82710:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   82712:	4b04      	ldr	r3, [pc, #16]	; (82724 <pmc_switch_sclk_to_32kxtal+0x30>)
   82714:	4a04      	ldr	r2, [pc, #16]	; (82728 <pmc_switch_sclk_to_32kxtal+0x34>)
   82716:	601a      	str	r2, [r3, #0]
}
   82718:	bf00      	nop
   8271a:	370c      	adds	r7, #12
   8271c:	46bd      	mov	sp, r7
   8271e:	bc80      	pop	{r7}
   82720:	4770      	bx	lr
   82722:	bf00      	nop
   82724:	400e1a10 	.word	0x400e1a10
   82728:	a5000008 	.word	0xa5000008

0008272c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   8272c:	b480      	push	{r7}
   8272e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82730:	4b09      	ldr	r3, [pc, #36]	; (82758 <pmc_osc_is_ready_32kxtal+0x2c>)
   82732:	695b      	ldr	r3, [r3, #20]
   82734:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   82738:	2b00      	cmp	r3, #0
   8273a:	d007      	beq.n	8274c <pmc_osc_is_ready_32kxtal+0x20>
   8273c:	4b07      	ldr	r3, [pc, #28]	; (8275c <pmc_osc_is_ready_32kxtal+0x30>)
   8273e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82740:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82744:	2b00      	cmp	r3, #0
   82746:	d001      	beq.n	8274c <pmc_osc_is_ready_32kxtal+0x20>
   82748:	2301      	movs	r3, #1
   8274a:	e000      	b.n	8274e <pmc_osc_is_ready_32kxtal+0x22>
   8274c:	2300      	movs	r3, #0
}
   8274e:	4618      	mov	r0, r3
   82750:	46bd      	mov	sp, r7
   82752:	bc80      	pop	{r7}
   82754:	4770      	bx	lr
   82756:	bf00      	nop
   82758:	400e1a10 	.word	0x400e1a10
   8275c:	400e0600 	.word	0x400e0600

00082760 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   82760:	b480      	push	{r7}
   82762:	b083      	sub	sp, #12
   82764:	af00      	add	r7, sp, #0
   82766:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   82768:	4a18      	ldr	r2, [pc, #96]	; (827cc <pmc_switch_mainck_to_fastrc+0x6c>)
   8276a:	4b18      	ldr	r3, [pc, #96]	; (827cc <pmc_switch_mainck_to_fastrc+0x6c>)
   8276c:	6a1b      	ldr	r3, [r3, #32]
   8276e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82772:	f043 0308 	orr.w	r3, r3, #8
   82776:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82778:	bf00      	nop
   8277a:	4b14      	ldr	r3, [pc, #80]	; (827cc <pmc_switch_mainck_to_fastrc+0x6c>)
   8277c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82782:	2b00      	cmp	r3, #0
   82784:	d0f9      	beq.n	8277a <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82786:	4911      	ldr	r1, [pc, #68]	; (827cc <pmc_switch_mainck_to_fastrc+0x6c>)
   82788:	4b10      	ldr	r3, [pc, #64]	; (827cc <pmc_switch_mainck_to_fastrc+0x6c>)
   8278a:	6a1b      	ldr	r3, [r3, #32]
   8278c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   82794:	687a      	ldr	r2, [r7, #4]
   82796:	4313      	orrs	r3, r2
   82798:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8279c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8279e:	bf00      	nop
   827a0:	4b0a      	ldr	r3, [pc, #40]	; (827cc <pmc_switch_mainck_to_fastrc+0x6c>)
   827a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   827a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   827a8:	2b00      	cmp	r3, #0
   827aa:	d0f9      	beq.n	827a0 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   827ac:	4a07      	ldr	r2, [pc, #28]	; (827cc <pmc_switch_mainck_to_fastrc+0x6c>)
   827ae:	4b07      	ldr	r3, [pc, #28]	; (827cc <pmc_switch_mainck_to_fastrc+0x6c>)
   827b0:	6a1b      	ldr	r3, [r3, #32]
   827b2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   827b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   827ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   827be:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   827c0:	bf00      	nop
   827c2:	370c      	adds	r7, #12
   827c4:	46bd      	mov	sp, r7
   827c6:	bc80      	pop	{r7}
   827c8:	4770      	bx	lr
   827ca:	bf00      	nop
   827cc:	400e0600 	.word	0x400e0600

000827d0 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   827d0:	b480      	push	{r7}
   827d2:	b083      	sub	sp, #12
   827d4:	af00      	add	r7, sp, #0
   827d6:	6078      	str	r0, [r7, #4]
   827d8:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   827da:	687b      	ldr	r3, [r7, #4]
   827dc:	2b00      	cmp	r3, #0
   827de:	d008      	beq.n	827f2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   827e0:	4916      	ldr	r1, [pc, #88]	; (8283c <pmc_switch_mainck_to_xtal+0x6c>)
   827e2:	4b16      	ldr	r3, [pc, #88]	; (8283c <pmc_switch_mainck_to_xtal+0x6c>)
   827e4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   827e6:	4a16      	ldr	r2, [pc, #88]	; (82840 <pmc_switch_mainck_to_xtal+0x70>)
   827e8:	401a      	ands	r2, r3
   827ea:	4b16      	ldr	r3, [pc, #88]	; (82844 <pmc_switch_mainck_to_xtal+0x74>)
   827ec:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   827ee:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   827f0:	e01e      	b.n	82830 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   827f2:	4912      	ldr	r1, [pc, #72]	; (8283c <pmc_switch_mainck_to_xtal+0x6c>)
   827f4:	4b11      	ldr	r3, [pc, #68]	; (8283c <pmc_switch_mainck_to_xtal+0x6c>)
   827f6:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   827f8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   827fc:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82800:	683a      	ldr	r2, [r7, #0]
   82802:	0212      	lsls	r2, r2, #8
   82804:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82806:	4313      	orrs	r3, r2
   82808:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8280c:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82810:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82812:	bf00      	nop
   82814:	4b09      	ldr	r3, [pc, #36]	; (8283c <pmc_switch_mainck_to_xtal+0x6c>)
   82816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82818:	f003 0301 	and.w	r3, r3, #1
   8281c:	2b00      	cmp	r3, #0
   8281e:	d0f9      	beq.n	82814 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82820:	4a06      	ldr	r2, [pc, #24]	; (8283c <pmc_switch_mainck_to_xtal+0x6c>)
   82822:	4b06      	ldr	r3, [pc, #24]	; (8283c <pmc_switch_mainck_to_xtal+0x6c>)
   82824:	6a1b      	ldr	r3, [r3, #32]
   82826:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8282a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8282e:	6213      	str	r3, [r2, #32]
}
   82830:	bf00      	nop
   82832:	370c      	adds	r7, #12
   82834:	46bd      	mov	sp, r7
   82836:	bc80      	pop	{r7}
   82838:	4770      	bx	lr
   8283a:	bf00      	nop
   8283c:	400e0600 	.word	0x400e0600
   82840:	fec8fffc 	.word	0xfec8fffc
   82844:	01370002 	.word	0x01370002

00082848 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82848:	b480      	push	{r7}
   8284a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8284c:	4b03      	ldr	r3, [pc, #12]	; (8285c <pmc_osc_is_ready_mainck+0x14>)
   8284e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82854:	4618      	mov	r0, r3
   82856:	46bd      	mov	sp, r7
   82858:	bc80      	pop	{r7}
   8285a:	4770      	bx	lr
   8285c:	400e0600 	.word	0x400e0600

00082860 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82860:	b480      	push	{r7}
   82862:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82864:	4b03      	ldr	r3, [pc, #12]	; (82874 <pmc_disable_pllack+0x14>)
   82866:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8286a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   8286c:	bf00      	nop
   8286e:	46bd      	mov	sp, r7
   82870:	bc80      	pop	{r7}
   82872:	4770      	bx	lr
   82874:	400e0600 	.word	0x400e0600

00082878 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82878:	b480      	push	{r7}
   8287a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8287c:	4b03      	ldr	r3, [pc, #12]	; (8288c <pmc_is_locked_pllack+0x14>)
   8287e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82880:	f003 0302 	and.w	r3, r3, #2
}
   82884:	4618      	mov	r0, r3
   82886:	46bd      	mov	sp, r7
   82888:	bc80      	pop	{r7}
   8288a:	4770      	bx	lr
   8288c:	400e0600 	.word	0x400e0600

00082890 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   82890:	b480      	push	{r7}
   82892:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82894:	4b03      	ldr	r3, [pc, #12]	; (828a4 <pmc_is_locked_upll+0x14>)
   82896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82898:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   8289c:	4618      	mov	r0, r3
   8289e:	46bd      	mov	sp, r7
   828a0:	bc80      	pop	{r7}
   828a2:	4770      	bx	lr
   828a4:	400e0600 	.word	0x400e0600

000828a8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   828a8:	b480      	push	{r7}
   828aa:	b083      	sub	sp, #12
   828ac:	af00      	add	r7, sp, #0
   828ae:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   828b0:	687b      	ldr	r3, [r7, #4]
   828b2:	2b2c      	cmp	r3, #44	; 0x2c
   828b4:	d901      	bls.n	828ba <pmc_enable_periph_clk+0x12>
		return 1;
   828b6:	2301      	movs	r3, #1
   828b8:	e02f      	b.n	8291a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   828ba:	687b      	ldr	r3, [r7, #4]
   828bc:	2b1f      	cmp	r3, #31
   828be:	d813      	bhi.n	828e8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   828c0:	4b18      	ldr	r3, [pc, #96]	; (82924 <pmc_enable_periph_clk+0x7c>)
   828c2:	699a      	ldr	r2, [r3, #24]
   828c4:	2101      	movs	r1, #1
   828c6:	687b      	ldr	r3, [r7, #4]
   828c8:	fa01 f303 	lsl.w	r3, r1, r3
   828cc:	401a      	ands	r2, r3
   828ce:	2101      	movs	r1, #1
   828d0:	687b      	ldr	r3, [r7, #4]
   828d2:	fa01 f303 	lsl.w	r3, r1, r3
   828d6:	429a      	cmp	r2, r3
   828d8:	d01e      	beq.n	82918 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   828da:	4a12      	ldr	r2, [pc, #72]	; (82924 <pmc_enable_periph_clk+0x7c>)
   828dc:	2101      	movs	r1, #1
   828de:	687b      	ldr	r3, [r7, #4]
   828e0:	fa01 f303 	lsl.w	r3, r1, r3
   828e4:	6113      	str	r3, [r2, #16]
   828e6:	e017      	b.n	82918 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   828e8:	687b      	ldr	r3, [r7, #4]
   828ea:	3b20      	subs	r3, #32
   828ec:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   828ee:	4b0d      	ldr	r3, [pc, #52]	; (82924 <pmc_enable_periph_clk+0x7c>)
   828f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   828f4:	2101      	movs	r1, #1
   828f6:	687b      	ldr	r3, [r7, #4]
   828f8:	fa01 f303 	lsl.w	r3, r1, r3
   828fc:	401a      	ands	r2, r3
   828fe:	2101      	movs	r1, #1
   82900:	687b      	ldr	r3, [r7, #4]
   82902:	fa01 f303 	lsl.w	r3, r1, r3
   82906:	429a      	cmp	r2, r3
   82908:	d006      	beq.n	82918 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   8290a:	4a06      	ldr	r2, [pc, #24]	; (82924 <pmc_enable_periph_clk+0x7c>)
   8290c:	2101      	movs	r1, #1
   8290e:	687b      	ldr	r3, [r7, #4]
   82910:	fa01 f303 	lsl.w	r3, r1, r3
   82914:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   82918:	2300      	movs	r3, #0
}
   8291a:	4618      	mov	r0, r3
   8291c:	370c      	adds	r7, #12
   8291e:	46bd      	mov	sp, r7
   82920:	bc80      	pop	{r7}
   82922:	4770      	bx	lr
   82924:	400e0600 	.word	0x400e0600

00082928 <sysclk_enable_peripheral_clock>:
{
   82928:	b580      	push	{r7, lr}
   8292a:	b082      	sub	sp, #8
   8292c:	af00      	add	r7, sp, #0
   8292e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82930:	6878      	ldr	r0, [r7, #4]
   82932:	4b03      	ldr	r3, [pc, #12]	; (82940 <sysclk_enable_peripheral_clock+0x18>)
   82934:	4798      	blx	r3
}
   82936:	bf00      	nop
   82938:	3708      	adds	r7, #8
   8293a:	46bd      	mov	sp, r7
   8293c:	bd80      	pop	{r7, pc}
   8293e:	bf00      	nop
   82940:	000828a9 	.word	0x000828a9

00082944 <ioport_init>:
{
   82944:	b580      	push	{r7, lr}
   82946:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   82948:	200b      	movs	r0, #11
   8294a:	4b06      	ldr	r3, [pc, #24]	; (82964 <ioport_init+0x20>)
   8294c:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   8294e:	200c      	movs	r0, #12
   82950:	4b04      	ldr	r3, [pc, #16]	; (82964 <ioport_init+0x20>)
   82952:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   82954:	200d      	movs	r0, #13
   82956:	4b03      	ldr	r3, [pc, #12]	; (82964 <ioport_init+0x20>)
   82958:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   8295a:	200e      	movs	r0, #14
   8295c:	4b01      	ldr	r3, [pc, #4]	; (82964 <ioport_init+0x20>)
   8295e:	4798      	blx	r3
}
   82960:	bf00      	nop
   82962:	bd80      	pop	{r7, pc}
   82964:	00082929 	.word	0x00082929

00082968 <ioport_disable_pin>:
{
   82968:	b480      	push	{r7}
   8296a:	b089      	sub	sp, #36	; 0x24
   8296c:	af00      	add	r7, sp, #0
   8296e:	6078      	str	r0, [r7, #4]
   82970:	687b      	ldr	r3, [r7, #4]
   82972:	61fb      	str	r3, [r7, #28]
   82974:	69fb      	ldr	r3, [r7, #28]
   82976:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82978:	69bb      	ldr	r3, [r7, #24]
   8297a:	095a      	lsrs	r2, r3, #5
   8297c:	69fb      	ldr	r3, [r7, #28]
   8297e:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   82980:	697b      	ldr	r3, [r7, #20]
   82982:	f003 031f 	and.w	r3, r3, #31
   82986:	2101      	movs	r1, #1
   82988:	fa01 f303 	lsl.w	r3, r1, r3
   8298c:	613a      	str	r2, [r7, #16]
   8298e:	60fb      	str	r3, [r7, #12]
   82990:	693b      	ldr	r3, [r7, #16]
   82992:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82994:	68bb      	ldr	r3, [r7, #8]
   82996:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8299a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8299e:	025b      	lsls	r3, r3, #9
   829a0:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   829a2:	68fb      	ldr	r3, [r7, #12]
   829a4:	6053      	str	r3, [r2, #4]
}
   829a6:	bf00      	nop
   829a8:	3724      	adds	r7, #36	; 0x24
   829aa:	46bd      	mov	sp, r7
   829ac:	bc80      	pop	{r7}
   829ae:	4770      	bx	lr

000829b0 <ioport_set_pin_mode>:
{
   829b0:	b480      	push	{r7}
   829b2:	b08d      	sub	sp, #52	; 0x34
   829b4:	af00      	add	r7, sp, #0
   829b6:	6078      	str	r0, [r7, #4]
   829b8:	6039      	str	r1, [r7, #0]
   829ba:	687b      	ldr	r3, [r7, #4]
   829bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   829be:	683b      	ldr	r3, [r7, #0]
   829c0:	62bb      	str	r3, [r7, #40]	; 0x28
   829c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   829c4:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   829c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   829c8:	095a      	lsrs	r2, r3, #5
   829ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   829cc:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   829ce:	6a3b      	ldr	r3, [r7, #32]
   829d0:	f003 031f 	and.w	r3, r3, #31
   829d4:	2101      	movs	r1, #1
   829d6:	fa01 f303 	lsl.w	r3, r1, r3
   829da:	61fa      	str	r2, [r7, #28]
   829dc:	61bb      	str	r3, [r7, #24]
   829de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   829e0:	617b      	str	r3, [r7, #20]
   829e2:	69fb      	ldr	r3, [r7, #28]
   829e4:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   829e6:	693b      	ldr	r3, [r7, #16]
   829e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   829ec:	f203 7307 	addw	r3, r3, #1799	; 0x707
   829f0:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   829f2:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   829f4:	697b      	ldr	r3, [r7, #20]
   829f6:	f003 0308 	and.w	r3, r3, #8
   829fa:	2b00      	cmp	r3, #0
   829fc:	d003      	beq.n	82a06 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   829fe:	68fb      	ldr	r3, [r7, #12]
   82a00:	69ba      	ldr	r2, [r7, #24]
   82a02:	665a      	str	r2, [r3, #100]	; 0x64
   82a04:	e002      	b.n	82a0c <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   82a06:	68fb      	ldr	r3, [r7, #12]
   82a08:	69ba      	ldr	r2, [r7, #24]
   82a0a:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   82a0c:	697b      	ldr	r3, [r7, #20]
   82a0e:	f003 0320 	and.w	r3, r3, #32
   82a12:	2b00      	cmp	r3, #0
   82a14:	d003      	beq.n	82a1e <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   82a16:	68fb      	ldr	r3, [r7, #12]
   82a18:	69ba      	ldr	r2, [r7, #24]
   82a1a:	651a      	str	r2, [r3, #80]	; 0x50
   82a1c:	e002      	b.n	82a24 <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   82a1e:	68fb      	ldr	r3, [r7, #12]
   82a20:	69ba      	ldr	r2, [r7, #24]
   82a22:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   82a24:	697b      	ldr	r3, [r7, #20]
   82a26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   82a2a:	2b00      	cmp	r3, #0
   82a2c:	d003      	beq.n	82a36 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   82a2e:	68fb      	ldr	r3, [r7, #12]
   82a30:	69ba      	ldr	r2, [r7, #24]
   82a32:	621a      	str	r2, [r3, #32]
   82a34:	e002      	b.n	82a3c <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   82a36:	68fb      	ldr	r3, [r7, #12]
   82a38:	69ba      	ldr	r2, [r7, #24]
   82a3a:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   82a3c:	697b      	ldr	r3, [r7, #20]
   82a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82a42:	2b00      	cmp	r3, #0
   82a44:	d004      	beq.n	82a50 <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   82a46:	68fb      	ldr	r3, [r7, #12]
   82a48:	69ba      	ldr	r2, [r7, #24]
   82a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   82a4e:	e003      	b.n	82a58 <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   82a50:	68fb      	ldr	r3, [r7, #12]
   82a52:	69ba      	ldr	r2, [r7, #24]
   82a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   82a58:	697b      	ldr	r3, [r7, #20]
   82a5a:	f003 0301 	and.w	r3, r3, #1
   82a5e:	2b00      	cmp	r3, #0
   82a60:	d006      	beq.n	82a70 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   82a62:	68fb      	ldr	r3, [r7, #12]
   82a64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82a66:	69bb      	ldr	r3, [r7, #24]
   82a68:	431a      	orrs	r2, r3
   82a6a:	68fb      	ldr	r3, [r7, #12]
   82a6c:	671a      	str	r2, [r3, #112]	; 0x70
}
   82a6e:	e006      	b.n	82a7e <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   82a70:	68fb      	ldr	r3, [r7, #12]
   82a72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82a74:	69bb      	ldr	r3, [r7, #24]
   82a76:	43db      	mvns	r3, r3
   82a78:	401a      	ands	r2, r3
   82a7a:	68fb      	ldr	r3, [r7, #12]
   82a7c:	671a      	str	r2, [r3, #112]	; 0x70
   82a7e:	bf00      	nop
   82a80:	3734      	adds	r7, #52	; 0x34
   82a82:	46bd      	mov	sp, r7
   82a84:	bc80      	pop	{r7}
   82a86:	4770      	bx	lr

00082a88 <ioport_set_pin_dir>:
{
   82a88:	b480      	push	{r7}
   82a8a:	b08d      	sub	sp, #52	; 0x34
   82a8c:	af00      	add	r7, sp, #0
   82a8e:	6078      	str	r0, [r7, #4]
   82a90:	460b      	mov	r3, r1
   82a92:	70fb      	strb	r3, [r7, #3]
   82a94:	687b      	ldr	r3, [r7, #4]
   82a96:	62fb      	str	r3, [r7, #44]	; 0x2c
   82a98:	78fb      	ldrb	r3, [r7, #3]
   82a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   82a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82aa0:	627b      	str	r3, [r7, #36]	; 0x24
   82aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82aa4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   82aa6:	6a3b      	ldr	r3, [r7, #32]
   82aa8:	095b      	lsrs	r3, r3, #5
   82aaa:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82aac:	69fb      	ldr	r3, [r7, #28]
   82aae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82ab2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82ab6:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82ab8:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   82aba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   82abe:	2b01      	cmp	r3, #1
   82ac0:	d109      	bne.n	82ad6 <ioport_set_pin_dir+0x4e>
   82ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82ac4:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   82ac6:	697b      	ldr	r3, [r7, #20]
   82ac8:	f003 031f 	and.w	r3, r3, #31
   82acc:	2201      	movs	r2, #1
   82ace:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82ad0:	69bb      	ldr	r3, [r7, #24]
   82ad2:	611a      	str	r2, [r3, #16]
   82ad4:	e00c      	b.n	82af0 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   82ad6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   82ada:	2b00      	cmp	r3, #0
   82adc:	d108      	bne.n	82af0 <ioport_set_pin_dir+0x68>
   82ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82ae0:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   82ae2:	693b      	ldr	r3, [r7, #16]
   82ae4:	f003 031f 	and.w	r3, r3, #31
   82ae8:	2201      	movs	r2, #1
   82aea:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   82aec:	69bb      	ldr	r3, [r7, #24]
   82aee:	615a      	str	r2, [r3, #20]
   82af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82af2:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82af4:	68fb      	ldr	r3, [r7, #12]
   82af6:	f003 031f 	and.w	r3, r3, #31
   82afa:	2201      	movs	r2, #1
   82afc:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82afe:	69bb      	ldr	r3, [r7, #24]
   82b00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   82b04:	bf00      	nop
   82b06:	3734      	adds	r7, #52	; 0x34
   82b08:	46bd      	mov	sp, r7
   82b0a:	bc80      	pop	{r7}
   82b0c:	4770      	bx	lr

00082b0e <ioport_set_pin_level>:
{
   82b0e:	b480      	push	{r7}
   82b10:	b08b      	sub	sp, #44	; 0x2c
   82b12:	af00      	add	r7, sp, #0
   82b14:	6078      	str	r0, [r7, #4]
   82b16:	460b      	mov	r3, r1
   82b18:	70fb      	strb	r3, [r7, #3]
   82b1a:	687b      	ldr	r3, [r7, #4]
   82b1c:	627b      	str	r3, [r7, #36]	; 0x24
   82b1e:	78fb      	ldrb	r3, [r7, #3]
   82b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82b26:	61fb      	str	r3, [r7, #28]
   82b28:	69fb      	ldr	r3, [r7, #28]
   82b2a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82b2c:	69bb      	ldr	r3, [r7, #24]
   82b2e:	095b      	lsrs	r3, r3, #5
   82b30:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82b32:	697b      	ldr	r3, [r7, #20]
   82b34:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82b38:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82b3c:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82b3e:	613b      	str	r3, [r7, #16]
	if (level) {
   82b40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82b44:	2b00      	cmp	r3, #0
   82b46:	d009      	beq.n	82b5c <ioport_set_pin_level+0x4e>
   82b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82b4a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82b4c:	68fb      	ldr	r3, [r7, #12]
   82b4e:	f003 031f 	and.w	r3, r3, #31
   82b52:	2201      	movs	r2, #1
   82b54:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82b56:	693b      	ldr	r3, [r7, #16]
   82b58:	631a      	str	r2, [r3, #48]	; 0x30
}
   82b5a:	e008      	b.n	82b6e <ioport_set_pin_level+0x60>
   82b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82b5e:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   82b60:	68bb      	ldr	r3, [r7, #8]
   82b62:	f003 031f 	and.w	r3, r3, #31
   82b66:	2201      	movs	r2, #1
   82b68:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82b6a:	693b      	ldr	r3, [r7, #16]
   82b6c:	635a      	str	r2, [r3, #52]	; 0x34
   82b6e:	bf00      	nop
   82b70:	372c      	adds	r7, #44	; 0x2c
   82b72:	46bd      	mov	sp, r7
   82b74:	bc80      	pop	{r7}
   82b76:	4770      	bx	lr

00082b78 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   82b78:	b580      	push	{r7, lr}
   82b7a:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82b7c:	4b59      	ldr	r3, [pc, #356]	; (82ce4 <board_init+0x16c>)
   82b7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82b82:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   82b84:	4b58      	ldr	r3, [pc, #352]	; (82ce8 <board_init+0x170>)
   82b86:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   82b88:	2101      	movs	r1, #1
   82b8a:	206a      	movs	r0, #106	; 0x6a
   82b8c:	4b57      	ldr	r3, [pc, #348]	; (82cec <board_init+0x174>)
   82b8e:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   82b90:	2100      	movs	r1, #0
   82b92:	206a      	movs	r0, #106	; 0x6a
   82b94:	4b56      	ldr	r3, [pc, #344]	; (82cf0 <board_init+0x178>)
   82b96:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   82b98:	2101      	movs	r1, #1
   82b9a:	2067      	movs	r0, #103	; 0x67
   82b9c:	4b53      	ldr	r3, [pc, #332]	; (82cec <board_init+0x174>)
   82b9e:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   82ba0:	2100      	movs	r1, #0
   82ba2:	2067      	movs	r0, #103	; 0x67
   82ba4:	4b52      	ldr	r3, [pc, #328]	; (82cf0 <board_init+0x178>)
   82ba6:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   82ba8:	2101      	movs	r1, #1
   82baa:	2068      	movs	r0, #104	; 0x68
   82bac:	4b4f      	ldr	r3, [pc, #316]	; (82cec <board_init+0x174>)
   82bae:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   82bb0:	2100      	movs	r1, #0
   82bb2:	2068      	movs	r0, #104	; 0x68
   82bb4:	4b4e      	ldr	r3, [pc, #312]	; (82cf0 <board_init+0x178>)
   82bb6:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   82bb8:	2101      	movs	r1, #1
   82bba:	2069      	movs	r0, #105	; 0x69
   82bbc:	4b4b      	ldr	r3, [pc, #300]	; (82cec <board_init+0x174>)
   82bbe:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   82bc0:	2100      	movs	r1, #0
   82bc2:	2069      	movs	r0, #105	; 0x69
   82bc4:	4b4a      	ldr	r3, [pc, #296]	; (82cf0 <board_init+0x178>)
   82bc6:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   82bc8:	2101      	movs	r1, #1
   82bca:	2066      	movs	r0, #102	; 0x66
   82bcc:	4b47      	ldr	r3, [pc, #284]	; (82cec <board_init+0x174>)
   82bce:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   82bd0:	2100      	movs	r1, #0
   82bd2:	2066      	movs	r0, #102	; 0x66
   82bd4:	4b46      	ldr	r3, [pc, #280]	; (82cf0 <board_init+0x178>)
   82bd6:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   82bd8:	2100      	movs	r1, #0
   82bda:	2060      	movs	r0, #96	; 0x60
   82bdc:	4b43      	ldr	r3, [pc, #268]	; (82cec <board_init+0x174>)
   82bde:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82be0:	2188      	movs	r1, #136	; 0x88
   82be2:	2060      	movs	r0, #96	; 0x60
   82be4:	4b43      	ldr	r3, [pc, #268]	; (82cf4 <board_init+0x17c>)
   82be6:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   82be8:	2100      	movs	r1, #0
   82bea:	2061      	movs	r0, #97	; 0x61
   82bec:	4b3f      	ldr	r3, [pc, #252]	; (82cec <board_init+0x174>)
   82bee:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82bf0:	2188      	movs	r1, #136	; 0x88
   82bf2:	2061      	movs	r0, #97	; 0x61
   82bf4:	4b3f      	ldr	r3, [pc, #252]	; (82cf4 <board_init+0x17c>)
   82bf6:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   82bf8:	2100      	movs	r1, #0
   82bfa:	2062      	movs	r0, #98	; 0x62
   82bfc:	4b3b      	ldr	r3, [pc, #236]	; (82cec <board_init+0x174>)
   82bfe:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82c00:	2188      	movs	r1, #136	; 0x88
   82c02:	2062      	movs	r0, #98	; 0x62
   82c04:	4b3b      	ldr	r3, [pc, #236]	; (82cf4 <board_init+0x17c>)
   82c06:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   82c08:	2100      	movs	r1, #0
   82c0a:	2063      	movs	r0, #99	; 0x63
   82c0c:	4b37      	ldr	r3, [pc, #220]	; (82cec <board_init+0x174>)
   82c0e:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82c10:	2188      	movs	r1, #136	; 0x88
   82c12:	2063      	movs	r0, #99	; 0x63
   82c14:	4b37      	ldr	r3, [pc, #220]	; (82cf4 <board_init+0x17c>)
   82c16:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   82c18:	2100      	movs	r1, #0
   82c1a:	2064      	movs	r0, #100	; 0x64
   82c1c:	4b33      	ldr	r3, [pc, #204]	; (82cec <board_init+0x174>)
   82c1e:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82c20:	2188      	movs	r1, #136	; 0x88
   82c22:	2064      	movs	r0, #100	; 0x64
   82c24:	4b33      	ldr	r3, [pc, #204]	; (82cf4 <board_init+0x17c>)
   82c26:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   82c28:	2100      	movs	r1, #0
   82c2a:	2065      	movs	r0, #101	; 0x65
   82c2c:	4b2f      	ldr	r3, [pc, #188]	; (82cec <board_init+0x174>)
   82c2e:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82c30:	2188      	movs	r1, #136	; 0x88
   82c32:	2065      	movs	r0, #101	; 0x65
   82c34:	4b2f      	ldr	r3, [pc, #188]	; (82cf4 <board_init+0x17c>)
   82c36:	4798      	blx	r3
	
	/* Configure I2C pins */
	ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   82c38:	2100      	movs	r1, #0
   82c3a:	2011      	movs	r0, #17
   82c3c:	4b2d      	ldr	r3, [pc, #180]	; (82cf4 <board_init+0x17c>)
   82c3e:	4798      	blx	r3
	ioport_disable_pin(I2C0_DATA);
   82c40:	2011      	movs	r0, #17
   82c42:	4b2d      	ldr	r3, [pc, #180]	; (82cf8 <board_init+0x180>)
   82c44:	4798      	blx	r3
	ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   82c46:	2100      	movs	r1, #0
   82c48:	2012      	movs	r0, #18
   82c4a:	4b2a      	ldr	r3, [pc, #168]	; (82cf4 <board_init+0x17c>)
   82c4c:	4798      	blx	r3
	ioport_disable_pin(I2C0_CLK);
   82c4e:	2012      	movs	r0, #18
   82c50:	4b29      	ldr	r3, [pc, #164]	; (82cf8 <board_init+0x180>)
   82c52:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   82c54:	2100      	movs	r1, #0
   82c56:	200c      	movs	r0, #12
   82c58:	4b26      	ldr	r3, [pc, #152]	; (82cf4 <board_init+0x17c>)
   82c5a:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   82c5c:	200c      	movs	r0, #12
   82c5e:	4b26      	ldr	r3, [pc, #152]	; (82cf8 <board_init+0x180>)
   82c60:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   82c62:	2100      	movs	r1, #0
   82c64:	200d      	movs	r0, #13
   82c66:	4b23      	ldr	r3, [pc, #140]	; (82cf4 <board_init+0x17c>)
   82c68:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   82c6a:	200d      	movs	r0, #13
   82c6c:	4b22      	ldr	r3, [pc, #136]	; (82cf8 <board_init+0x180>)
   82c6e:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   82c70:	2100      	movs	r1, #0
   82c72:	2010      	movs	r0, #16
   82c74:	4b1f      	ldr	r3, [pc, #124]	; (82cf4 <board_init+0x17c>)
   82c76:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   82c78:	2010      	movs	r0, #16
   82c7a:	4b1f      	ldr	r3, [pc, #124]	; (82cf8 <board_init+0x180>)
   82c7c:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   82c7e:	2100      	movs	r1, #0
   82c80:	200e      	movs	r0, #14
   82c82:	4b1c      	ldr	r3, [pc, #112]	; (82cf4 <board_init+0x17c>)
   82c84:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   82c86:	200e      	movs	r0, #14
   82c88:	4b1b      	ldr	r3, [pc, #108]	; (82cf8 <board_init+0x180>)
   82c8a:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   82c8c:	2100      	movs	r1, #0
   82c8e:	2014      	movs	r0, #20
   82c90:	4b18      	ldr	r3, [pc, #96]	; (82cf4 <board_init+0x17c>)
   82c92:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   82c94:	2014      	movs	r0, #20
   82c96:	4b18      	ldr	r3, [pc, #96]	; (82cf8 <board_init+0x180>)
   82c98:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   82c9a:	2100      	movs	r1, #0
   82c9c:	2013      	movs	r0, #19
   82c9e:	4b15      	ldr	r3, [pc, #84]	; (82cf4 <board_init+0x17c>)
   82ca0:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   82ca2:	2013      	movs	r0, #19
   82ca4:	4b14      	ldr	r3, [pc, #80]	; (82cf8 <board_init+0x180>)
   82ca6:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   82ca8:	2100      	movs	r1, #0
   82caa:	2015      	movs	r0, #21
   82cac:	4b11      	ldr	r3, [pc, #68]	; (82cf4 <board_init+0x17c>)
   82cae:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   82cb0:	2015      	movs	r0, #21
   82cb2:	4b11      	ldr	r3, [pc, #68]	; (82cf8 <board_init+0x180>)
   82cb4:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   82cb6:	2100      	movs	r1, #0
   82cb8:	2016      	movs	r0, #22
   82cba:	4b0e      	ldr	r3, [pc, #56]	; (82cf4 <board_init+0x17c>)
   82cbc:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   82cbe:	2016      	movs	r0, #22
   82cc0:	4b0d      	ldr	r3, [pc, #52]	; (82cf8 <board_init+0x180>)
   82cc2:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   82cc4:	2100      	movs	r1, #0
   82cc6:	2017      	movs	r0, #23
   82cc8:	4b0a      	ldr	r3, [pc, #40]	; (82cf4 <board_init+0x17c>)
   82cca:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   82ccc:	2017      	movs	r0, #23
   82cce:	4b0a      	ldr	r3, [pc, #40]	; (82cf8 <board_init+0x180>)
   82cd0:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   82cd2:	2100      	movs	r1, #0
   82cd4:	2018      	movs	r0, #24
   82cd6:	4b07      	ldr	r3, [pc, #28]	; (82cf4 <board_init+0x17c>)
   82cd8:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   82cda:	2018      	movs	r0, #24
   82cdc:	4b06      	ldr	r3, [pc, #24]	; (82cf8 <board_init+0x180>)
   82cde:	4798      	blx	r3
}
   82ce0:	bf00      	nop
   82ce2:	bd80      	pop	{r7, pc}
   82ce4:	400e1a50 	.word	0x400e1a50
   82ce8:	00082945 	.word	0x00082945
   82cec:	00082a89 	.word	0x00082a89
   82cf0:	00082b0f 	.word	0x00082b0f
   82cf4:	000829b1 	.word	0x000829b1
   82cf8:	00082969 	.word	0x00082969

00082cfc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82cfc:	b480      	push	{r7}
   82cfe:	af00      	add	r7, sp, #0
	while (1) {
   82d00:	e7fe      	b.n	82d00 <Dummy_Handler+0x4>
	...

00082d04 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82d04:	b580      	push	{r7, lr}
   82d06:	b082      	sub	sp, #8
   82d08:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   82d0a:	4b1e      	ldr	r3, [pc, #120]	; (82d84 <Reset_Handler+0x80>)
   82d0c:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   82d0e:	4b1e      	ldr	r3, [pc, #120]	; (82d88 <Reset_Handler+0x84>)
   82d10:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   82d12:	687a      	ldr	r2, [r7, #4]
   82d14:	683b      	ldr	r3, [r7, #0]
   82d16:	429a      	cmp	r2, r3
   82d18:	d00c      	beq.n	82d34 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   82d1a:	e007      	b.n	82d2c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   82d1c:	683b      	ldr	r3, [r7, #0]
   82d1e:	1d1a      	adds	r2, r3, #4
   82d20:	603a      	str	r2, [r7, #0]
   82d22:	687a      	ldr	r2, [r7, #4]
   82d24:	1d11      	adds	r1, r2, #4
   82d26:	6079      	str	r1, [r7, #4]
   82d28:	6812      	ldr	r2, [r2, #0]
   82d2a:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   82d2c:	683b      	ldr	r3, [r7, #0]
   82d2e:	4a17      	ldr	r2, [pc, #92]	; (82d8c <Reset_Handler+0x88>)
   82d30:	4293      	cmp	r3, r2
   82d32:	d3f3      	bcc.n	82d1c <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82d34:	4b16      	ldr	r3, [pc, #88]	; (82d90 <Reset_Handler+0x8c>)
   82d36:	603b      	str	r3, [r7, #0]
   82d38:	e004      	b.n	82d44 <Reset_Handler+0x40>
		*pDest++ = 0;
   82d3a:	683b      	ldr	r3, [r7, #0]
   82d3c:	1d1a      	adds	r2, r3, #4
   82d3e:	603a      	str	r2, [r7, #0]
   82d40:	2200      	movs	r2, #0
   82d42:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   82d44:	683b      	ldr	r3, [r7, #0]
   82d46:	4a13      	ldr	r2, [pc, #76]	; (82d94 <Reset_Handler+0x90>)
   82d48:	4293      	cmp	r3, r2
   82d4a:	d3f6      	bcc.n	82d3a <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   82d4c:	4b12      	ldr	r3, [pc, #72]	; (82d98 <Reset_Handler+0x94>)
   82d4e:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82d50:	4a12      	ldr	r2, [pc, #72]	; (82d9c <Reset_Handler+0x98>)
   82d52:	687b      	ldr	r3, [r7, #4]
   82d54:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82d58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82d5c:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82d5e:	687b      	ldr	r3, [r7, #4]
   82d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82d64:	d309      	bcc.n	82d7a <Reset_Handler+0x76>
   82d66:	687b      	ldr	r3, [r7, #4]
   82d68:	4a0d      	ldr	r2, [pc, #52]	; (82da0 <Reset_Handler+0x9c>)
   82d6a:	4293      	cmp	r3, r2
   82d6c:	d805      	bhi.n	82d7a <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82d6e:	4a0b      	ldr	r2, [pc, #44]	; (82d9c <Reset_Handler+0x98>)
   82d70:	4b0a      	ldr	r3, [pc, #40]	; (82d9c <Reset_Handler+0x98>)
   82d72:	689b      	ldr	r3, [r3, #8]
   82d74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82d78:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82d7a:	4b0a      	ldr	r3, [pc, #40]	; (82da4 <Reset_Handler+0xa0>)
   82d7c:	4798      	blx	r3

	/* Branch to main function */
	main();
   82d7e:	4b0a      	ldr	r3, [pc, #40]	; (82da8 <Reset_Handler+0xa4>)
   82d80:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82d82:	e7fe      	b.n	82d82 <Reset_Handler+0x7e>
   82d84:	0008867c 	.word	0x0008867c
   82d88:	20070000 	.word	0x20070000
   82d8c:	20070b50 	.word	0x20070b50
   82d90:	20070b50 	.word	0x20070b50
   82d94:	20071064 	.word	0x20071064
   82d98:	00080000 	.word	0x00080000
   82d9c:	e000ed00 	.word	0xe000ed00
   82da0:	200fffff 	.word	0x200fffff
   82da4:	00083d6d 	.word	0x00083d6d
   82da8:	0008317d 	.word	0x0008317d

00082dac <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   82dac:	b480      	push	{r7}
   82dae:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82db0:	4b57      	ldr	r3, [pc, #348]	; (82f10 <SystemCoreClockUpdate+0x164>)
   82db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82db4:	f003 0303 	and.w	r3, r3, #3
   82db8:	2b03      	cmp	r3, #3
   82dba:	f200 808a 	bhi.w	82ed2 <SystemCoreClockUpdate+0x126>
   82dbe:	a201      	add	r2, pc, #4	; (adr r2, 82dc4 <SystemCoreClockUpdate+0x18>)
   82dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82dc4:	00082dd5 	.word	0x00082dd5
   82dc8:	00082df5 	.word	0x00082df5
   82dcc:	00082e45 	.word	0x00082e45
   82dd0:	00082e45 	.word	0x00082e45
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82dd4:	4b4f      	ldr	r3, [pc, #316]	; (82f14 <SystemCoreClockUpdate+0x168>)
   82dd6:	695b      	ldr	r3, [r3, #20]
   82dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82ddc:	2b00      	cmp	r3, #0
   82dde:	d004      	beq.n	82dea <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82de0:	4b4d      	ldr	r3, [pc, #308]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82de2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82de6:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   82de8:	e073      	b.n	82ed2 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82dea:	4b4b      	ldr	r3, [pc, #300]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82dec:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82df0:	601a      	str	r2, [r3, #0]
		break;
   82df2:	e06e      	b.n	82ed2 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82df4:	4b46      	ldr	r3, [pc, #280]	; (82f10 <SystemCoreClockUpdate+0x164>)
   82df6:	6a1b      	ldr	r3, [r3, #32]
   82df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82dfc:	2b00      	cmp	r3, #0
   82dfe:	d003      	beq.n	82e08 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82e00:	4b45      	ldr	r3, [pc, #276]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82e02:	4a46      	ldr	r2, [pc, #280]	; (82f1c <SystemCoreClockUpdate+0x170>)
   82e04:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   82e06:	e064      	b.n	82ed2 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82e08:	4b43      	ldr	r3, [pc, #268]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82e0a:	4a45      	ldr	r2, [pc, #276]	; (82f20 <SystemCoreClockUpdate+0x174>)
   82e0c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82e0e:	4b40      	ldr	r3, [pc, #256]	; (82f10 <SystemCoreClockUpdate+0x164>)
   82e10:	6a1b      	ldr	r3, [r3, #32]
   82e12:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82e16:	2b10      	cmp	r3, #16
   82e18:	d004      	beq.n	82e24 <SystemCoreClockUpdate+0x78>
   82e1a:	2b20      	cmp	r3, #32
   82e1c:	d008      	beq.n	82e30 <SystemCoreClockUpdate+0x84>
   82e1e:	2b00      	cmp	r3, #0
   82e20:	d00e      	beq.n	82e40 <SystemCoreClockUpdate+0x94>
				break;
   82e22:	e00e      	b.n	82e42 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   82e24:	4b3c      	ldr	r3, [pc, #240]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82e26:	681b      	ldr	r3, [r3, #0]
   82e28:	005b      	lsls	r3, r3, #1
   82e2a:	4a3b      	ldr	r2, [pc, #236]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82e2c:	6013      	str	r3, [r2, #0]
				break;
   82e2e:	e008      	b.n	82e42 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   82e30:	4b39      	ldr	r3, [pc, #228]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82e32:	681a      	ldr	r2, [r3, #0]
   82e34:	4613      	mov	r3, r2
   82e36:	005b      	lsls	r3, r3, #1
   82e38:	4413      	add	r3, r2
   82e3a:	4a37      	ldr	r2, [pc, #220]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82e3c:	6013      	str	r3, [r2, #0]
				break;
   82e3e:	e000      	b.n	82e42 <SystemCoreClockUpdate+0x96>
				break;
   82e40:	bf00      	nop
		break;
   82e42:	e046      	b.n	82ed2 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82e44:	4b32      	ldr	r3, [pc, #200]	; (82f10 <SystemCoreClockUpdate+0x164>)
   82e46:	6a1b      	ldr	r3, [r3, #32]
   82e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82e4c:	2b00      	cmp	r3, #0
   82e4e:	d003      	beq.n	82e58 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82e50:	4b31      	ldr	r3, [pc, #196]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82e52:	4a32      	ldr	r2, [pc, #200]	; (82f1c <SystemCoreClockUpdate+0x170>)
   82e54:	601a      	str	r2, [r3, #0]
   82e56:	e01c      	b.n	82e92 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82e58:	4b2f      	ldr	r3, [pc, #188]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82e5a:	4a31      	ldr	r2, [pc, #196]	; (82f20 <SystemCoreClockUpdate+0x174>)
   82e5c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82e5e:	4b2c      	ldr	r3, [pc, #176]	; (82f10 <SystemCoreClockUpdate+0x164>)
   82e60:	6a1b      	ldr	r3, [r3, #32]
   82e62:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82e66:	2b10      	cmp	r3, #16
   82e68:	d004      	beq.n	82e74 <SystemCoreClockUpdate+0xc8>
   82e6a:	2b20      	cmp	r3, #32
   82e6c:	d008      	beq.n	82e80 <SystemCoreClockUpdate+0xd4>
   82e6e:	2b00      	cmp	r3, #0
   82e70:	d00e      	beq.n	82e90 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82e72:	e00e      	b.n	82e92 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   82e74:	4b28      	ldr	r3, [pc, #160]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82e76:	681b      	ldr	r3, [r3, #0]
   82e78:	005b      	lsls	r3, r3, #1
   82e7a:	4a27      	ldr	r2, [pc, #156]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82e7c:	6013      	str	r3, [r2, #0]
				break;
   82e7e:	e008      	b.n	82e92 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   82e80:	4b25      	ldr	r3, [pc, #148]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82e82:	681a      	ldr	r2, [r3, #0]
   82e84:	4613      	mov	r3, r2
   82e86:	005b      	lsls	r3, r3, #1
   82e88:	4413      	add	r3, r2
   82e8a:	4a23      	ldr	r2, [pc, #140]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82e8c:	6013      	str	r3, [r2, #0]
				break;
   82e8e:	e000      	b.n	82e92 <SystemCoreClockUpdate+0xe6>
				break;
   82e90:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82e92:	4b1f      	ldr	r3, [pc, #124]	; (82f10 <SystemCoreClockUpdate+0x164>)
   82e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e96:	f003 0303 	and.w	r3, r3, #3
   82e9a:	2b02      	cmp	r3, #2
   82e9c:	d115      	bne.n	82eca <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82e9e:	4b1c      	ldr	r3, [pc, #112]	; (82f10 <SystemCoreClockUpdate+0x164>)
   82ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82ea2:	0c1b      	lsrs	r3, r3, #16
   82ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   82ea8:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82eaa:	4a1b      	ldr	r2, [pc, #108]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82eac:	6812      	ldr	r2, [r2, #0]
   82eae:	fb02 f303 	mul.w	r3, r2, r3
   82eb2:	4a19      	ldr	r2, [pc, #100]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82eb4:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82eb6:	4b16      	ldr	r3, [pc, #88]	; (82f10 <SystemCoreClockUpdate+0x164>)
   82eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82eba:	b2db      	uxtb	r3, r3
   82ebc:	4a16      	ldr	r2, [pc, #88]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82ebe:	6812      	ldr	r2, [r2, #0]
   82ec0:	fbb2 f3f3 	udiv	r3, r2, r3
   82ec4:	4a14      	ldr	r2, [pc, #80]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82ec6:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82ec8:	e002      	b.n	82ed0 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82eca:	4b13      	ldr	r3, [pc, #76]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82ecc:	4a15      	ldr	r2, [pc, #84]	; (82f24 <SystemCoreClockUpdate+0x178>)
   82ece:	601a      	str	r2, [r3, #0]
		break;
   82ed0:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82ed2:	4b0f      	ldr	r3, [pc, #60]	; (82f10 <SystemCoreClockUpdate+0x164>)
   82ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82eda:	2b70      	cmp	r3, #112	; 0x70
   82edc:	d108      	bne.n	82ef0 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82ede:	4b0e      	ldr	r3, [pc, #56]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82ee0:	681b      	ldr	r3, [r3, #0]
   82ee2:	4a11      	ldr	r2, [pc, #68]	; (82f28 <SystemCoreClockUpdate+0x17c>)
   82ee4:	fba2 2303 	umull	r2, r3, r2, r3
   82ee8:	085b      	lsrs	r3, r3, #1
   82eea:	4a0b      	ldr	r2, [pc, #44]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82eec:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   82eee:	e00a      	b.n	82f06 <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82ef0:	4b07      	ldr	r3, [pc, #28]	; (82f10 <SystemCoreClockUpdate+0x164>)
   82ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ef4:	091b      	lsrs	r3, r3, #4
   82ef6:	f003 0307 	and.w	r3, r3, #7
   82efa:	4a07      	ldr	r2, [pc, #28]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82efc:	6812      	ldr	r2, [r2, #0]
   82efe:	fa22 f303 	lsr.w	r3, r2, r3
   82f02:	4a05      	ldr	r2, [pc, #20]	; (82f18 <SystemCoreClockUpdate+0x16c>)
   82f04:	6013      	str	r3, [r2, #0]
}
   82f06:	bf00      	nop
   82f08:	46bd      	mov	sp, r7
   82f0a:	bc80      	pop	{r7}
   82f0c:	4770      	bx	lr
   82f0e:	bf00      	nop
   82f10:	400e0600 	.word	0x400e0600
   82f14:	400e1a10 	.word	0x400e1a10
   82f18:	20070198 	.word	0x20070198
   82f1c:	00b71b00 	.word	0x00b71b00
   82f20:	003d0900 	.word	0x003d0900
   82f24:	0e4e1c00 	.word	0x0e4e1c00
   82f28:	aaaaaaab 	.word	0xaaaaaaab

00082f2c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   82f2c:	b480      	push	{r7}
   82f2e:	b085      	sub	sp, #20
   82f30:	af00      	add	r7, sp, #0
   82f32:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   82f34:	4b10      	ldr	r3, [pc, #64]	; (82f78 <_sbrk+0x4c>)
   82f36:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   82f38:	4b10      	ldr	r3, [pc, #64]	; (82f7c <_sbrk+0x50>)
   82f3a:	681b      	ldr	r3, [r3, #0]
   82f3c:	2b00      	cmp	r3, #0
   82f3e:	d102      	bne.n	82f46 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   82f40:	4b0e      	ldr	r3, [pc, #56]	; (82f7c <_sbrk+0x50>)
   82f42:	4a0f      	ldr	r2, [pc, #60]	; (82f80 <_sbrk+0x54>)
   82f44:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82f46:	4b0d      	ldr	r3, [pc, #52]	; (82f7c <_sbrk+0x50>)
   82f48:	681b      	ldr	r3, [r3, #0]
   82f4a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   82f4c:	68ba      	ldr	r2, [r7, #8]
   82f4e:	687b      	ldr	r3, [r7, #4]
   82f50:	441a      	add	r2, r3
   82f52:	68fb      	ldr	r3, [r7, #12]
   82f54:	429a      	cmp	r2, r3
   82f56:	dd02      	ble.n	82f5e <_sbrk+0x32>
		return (caddr_t) -1;	
   82f58:	f04f 33ff 	mov.w	r3, #4294967295
   82f5c:	e006      	b.n	82f6c <_sbrk+0x40>
	}

	heap += incr;
   82f5e:	4b07      	ldr	r3, [pc, #28]	; (82f7c <_sbrk+0x50>)
   82f60:	681a      	ldr	r2, [r3, #0]
   82f62:	687b      	ldr	r3, [r7, #4]
   82f64:	4413      	add	r3, r2
   82f66:	4a05      	ldr	r2, [pc, #20]	; (82f7c <_sbrk+0x50>)
   82f68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   82f6a:	68bb      	ldr	r3, [r7, #8]
}
   82f6c:	4618      	mov	r0, r3
   82f6e:	3714      	adds	r7, #20
   82f70:	46bd      	mov	sp, r7
   82f72:	bc80      	pop	{r7}
   82f74:	4770      	bx	lr
   82f76:	bf00      	nop
   82f78:	20087ffc 	.word	0x20087ffc
   82f7c:	20070fb0 	.word	0x20070fb0
   82f80:	20073068 	.word	0x20073068

00082f84 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   82f84:	b480      	push	{r7}
   82f86:	b083      	sub	sp, #12
   82f88:	af00      	add	r7, sp, #0
   82f8a:	4603      	mov	r3, r0
   82f8c:	6039      	str	r1, [r7, #0]
   82f8e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   82f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82f94:	2b00      	cmp	r3, #0
   82f96:	da0b      	bge.n	82fb0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   82f98:	490d      	ldr	r1, [pc, #52]	; (82fd0 <NVIC_SetPriority+0x4c>)
   82f9a:	79fb      	ldrb	r3, [r7, #7]
   82f9c:	f003 030f 	and.w	r3, r3, #15
   82fa0:	3b04      	subs	r3, #4
   82fa2:	683a      	ldr	r2, [r7, #0]
   82fa4:	b2d2      	uxtb	r2, r2
   82fa6:	0112      	lsls	r2, r2, #4
   82fa8:	b2d2      	uxtb	r2, r2
   82faa:	440b      	add	r3, r1
   82fac:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   82fae:	e009      	b.n	82fc4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82fb0:	4908      	ldr	r1, [pc, #32]	; (82fd4 <NVIC_SetPriority+0x50>)
   82fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82fb6:	683a      	ldr	r2, [r7, #0]
   82fb8:	b2d2      	uxtb	r2, r2
   82fba:	0112      	lsls	r2, r2, #4
   82fbc:	b2d2      	uxtb	r2, r2
   82fbe:	440b      	add	r3, r1
   82fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   82fc4:	bf00      	nop
   82fc6:	370c      	adds	r7, #12
   82fc8:	46bd      	mov	sp, r7
   82fca:	bc80      	pop	{r7}
   82fcc:	4770      	bx	lr
   82fce:	bf00      	nop
   82fd0:	e000ed00 	.word	0xe000ed00
   82fd4:	e000e100 	.word	0xe000e100

00082fd8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   82fd8:	b580      	push	{r7, lr}
   82fda:	b082      	sub	sp, #8
   82fdc:	af00      	add	r7, sp, #0
   82fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   82fe0:	687b      	ldr	r3, [r7, #4]
   82fe2:	3b01      	subs	r3, #1
   82fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   82fe8:	d301      	bcc.n	82fee <SysTick_Config+0x16>
   82fea:	2301      	movs	r3, #1
   82fec:	e00f      	b.n	8300e <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   82fee:	4a0a      	ldr	r2, [pc, #40]	; (83018 <SysTick_Config+0x40>)
   82ff0:	687b      	ldr	r3, [r7, #4]
   82ff2:	3b01      	subs	r3, #1
   82ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   82ff6:	210f      	movs	r1, #15
   82ff8:	f04f 30ff 	mov.w	r0, #4294967295
   82ffc:	4b07      	ldr	r3, [pc, #28]	; (8301c <SysTick_Config+0x44>)
   82ffe:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   83000:	4b05      	ldr	r3, [pc, #20]	; (83018 <SysTick_Config+0x40>)
   83002:	2200      	movs	r2, #0
   83004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   83006:	4b04      	ldr	r3, [pc, #16]	; (83018 <SysTick_Config+0x40>)
   83008:	2207      	movs	r2, #7
   8300a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   8300c:	2300      	movs	r3, #0
}
   8300e:	4618      	mov	r0, r3
   83010:	3708      	adds	r7, #8
   83012:	46bd      	mov	sp, r7
   83014:	bd80      	pop	{r7, pc}
   83016:	bf00      	nop
   83018:	e000e010 	.word	0xe000e010
   8301c:	00082f85 	.word	0x00082f85

00083020 <osc_get_rate>:
{
   83020:	b480      	push	{r7}
   83022:	b083      	sub	sp, #12
   83024:	af00      	add	r7, sp, #0
   83026:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83028:	687b      	ldr	r3, [r7, #4]
   8302a:	2b07      	cmp	r3, #7
   8302c:	d825      	bhi.n	8307a <osc_get_rate+0x5a>
   8302e:	a201      	add	r2, pc, #4	; (adr r2, 83034 <osc_get_rate+0x14>)
   83030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83034:	00083055 	.word	0x00083055
   83038:	0008305b 	.word	0x0008305b
   8303c:	00083061 	.word	0x00083061
   83040:	00083067 	.word	0x00083067
   83044:	0008306b 	.word	0x0008306b
   83048:	0008306f 	.word	0x0008306f
   8304c:	00083073 	.word	0x00083073
   83050:	00083077 	.word	0x00083077
		return OSC_SLCK_32K_RC_HZ;
   83054:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83058:	e010      	b.n	8307c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8305a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8305e:	e00d      	b.n	8307c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   83060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83064:	e00a      	b.n	8307c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   83066:	4b08      	ldr	r3, [pc, #32]	; (83088 <osc_get_rate+0x68>)
   83068:	e008      	b.n	8307c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8306a:	4b08      	ldr	r3, [pc, #32]	; (8308c <osc_get_rate+0x6c>)
   8306c:	e006      	b.n	8307c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8306e:	4b08      	ldr	r3, [pc, #32]	; (83090 <osc_get_rate+0x70>)
   83070:	e004      	b.n	8307c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   83072:	4b07      	ldr	r3, [pc, #28]	; (83090 <osc_get_rate+0x70>)
   83074:	e002      	b.n	8307c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   83076:	4b06      	ldr	r3, [pc, #24]	; (83090 <osc_get_rate+0x70>)
   83078:	e000      	b.n	8307c <osc_get_rate+0x5c>
	return 0;
   8307a:	2300      	movs	r3, #0
}
   8307c:	4618      	mov	r0, r3
   8307e:	370c      	adds	r7, #12
   83080:	46bd      	mov	sp, r7
   83082:	bc80      	pop	{r7}
   83084:	4770      	bx	lr
   83086:	bf00      	nop
   83088:	003d0900 	.word	0x003d0900
   8308c:	007a1200 	.word	0x007a1200
   83090:	00b71b00 	.word	0x00b71b00

00083094 <sysclk_get_main_hz>:
{
   83094:	b580      	push	{r7, lr}
   83096:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83098:	2006      	movs	r0, #6
   8309a:	4b04      	ldr	r3, [pc, #16]	; (830ac <sysclk_get_main_hz+0x18>)
   8309c:	4798      	blx	r3
   8309e:	4602      	mov	r2, r0
   830a0:	4613      	mov	r3, r2
   830a2:	00db      	lsls	r3, r3, #3
   830a4:	1a9b      	subs	r3, r3, r2
   830a6:	005b      	lsls	r3, r3, #1
}
   830a8:	4618      	mov	r0, r3
   830aa:	bd80      	pop	{r7, pc}
   830ac:	00083021 	.word	0x00083021

000830b0 <sysclk_get_cpu_hz>:
{
   830b0:	b580      	push	{r7, lr}
   830b2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   830b4:	4b02      	ldr	r3, [pc, #8]	; (830c0 <sysclk_get_cpu_hz+0x10>)
   830b6:	4798      	blx	r3
   830b8:	4603      	mov	r3, r0
   830ba:	085b      	lsrs	r3, r3, #1
}
   830bc:	4618      	mov	r0, r3
   830be:	bd80      	pop	{r7, pc}
   830c0:	00083095 	.word	0x00083095

000830c4 <ioport_set_pin_level>:
{
   830c4:	b480      	push	{r7}
   830c6:	b08b      	sub	sp, #44	; 0x2c
   830c8:	af00      	add	r7, sp, #0
   830ca:	6078      	str	r0, [r7, #4]
   830cc:	460b      	mov	r3, r1
   830ce:	70fb      	strb	r3, [r7, #3]
   830d0:	687b      	ldr	r3, [r7, #4]
   830d2:	627b      	str	r3, [r7, #36]	; 0x24
   830d4:	78fb      	ldrb	r3, [r7, #3]
   830d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   830da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   830dc:	61fb      	str	r3, [r7, #28]
   830de:	69fb      	ldr	r3, [r7, #28]
   830e0:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   830e2:	69bb      	ldr	r3, [r7, #24]
   830e4:	095b      	lsrs	r3, r3, #5
   830e6:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   830e8:	697b      	ldr	r3, [r7, #20]
   830ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   830ee:	f203 7307 	addw	r3, r3, #1799	; 0x707
   830f2:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   830f4:	613b      	str	r3, [r7, #16]
	if (level) {
   830f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   830fa:	2b00      	cmp	r3, #0
   830fc:	d009      	beq.n	83112 <ioport_set_pin_level+0x4e>
   830fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83100:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83102:	68fb      	ldr	r3, [r7, #12]
   83104:	f003 031f 	and.w	r3, r3, #31
   83108:	2201      	movs	r2, #1
   8310a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8310c:	693b      	ldr	r3, [r7, #16]
   8310e:	631a      	str	r2, [r3, #48]	; 0x30
}
   83110:	e008      	b.n	83124 <ioport_set_pin_level+0x60>
   83112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83114:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   83116:	68bb      	ldr	r3, [r7, #8]
   83118:	f003 031f 	and.w	r3, r3, #31
   8311c:	2201      	movs	r2, #1
   8311e:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83120:	693b      	ldr	r3, [r7, #16]
   83122:	635a      	str	r2, [r3, #52]	; 0x34
   83124:	bf00      	nop
   83126:	372c      	adds	r7, #44	; 0x2c
   83128:	46bd      	mov	sp, r7
   8312a:	bc80      	pop	{r7}
   8312c:	4770      	bx	lr

0008312e <ioport_get_pin_level>:
{
   8312e:	b480      	push	{r7}
   83130:	b089      	sub	sp, #36	; 0x24
   83132:	af00      	add	r7, sp, #0
   83134:	6078      	str	r0, [r7, #4]
   83136:	687b      	ldr	r3, [r7, #4]
   83138:	61fb      	str	r3, [r7, #28]
   8313a:	69fb      	ldr	r3, [r7, #28]
   8313c:	61bb      	str	r3, [r7, #24]
   8313e:	69bb      	ldr	r3, [r7, #24]
   83140:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   83142:	697b      	ldr	r3, [r7, #20]
   83144:	095b      	lsrs	r3, r3, #5
   83146:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83148:	693b      	ldr	r3, [r7, #16]
   8314a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8314e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83152:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   83154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   83156:	69fb      	ldr	r3, [r7, #28]
   83158:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8315a:	68fb      	ldr	r3, [r7, #12]
   8315c:	f003 031f 	and.w	r3, r3, #31
   83160:	2101      	movs	r1, #1
   83162:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   83166:	4013      	ands	r3, r2
   83168:	2b00      	cmp	r3, #0
   8316a:	bf14      	ite	ne
   8316c:	2301      	movne	r3, #1
   8316e:	2300      	moveq	r3, #0
   83170:	b2db      	uxtb	r3, r3
}
   83172:	4618      	mov	r0, r3
   83174:	3724      	adds	r7, #36	; 0x24
   83176:	46bd      	mov	sp, r7
   83178:	bc80      	pop	{r7}
   8317a:	4770      	bx	lr

0008317c <main>:
FIL file_object;*/

void noOS_bootup_sequence(void);

int main(void)
{
   8317c:	b580      	push	{r7, lr}
   8317e:	b082      	sub	sp, #8
   83180:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   83182:	4b26      	ldr	r3, [pc, #152]	; (8321c <main+0xa0>)
   83184:	4798      	blx	r3
    board_init();
   83186:	4b26      	ldr	r3, [pc, #152]	; (83220 <main+0xa4>)
   83188:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   8318a:	4b26      	ldr	r3, [pc, #152]	; (83224 <main+0xa8>)
   8318c:	4798      	blx	r3
   8318e:	4602      	mov	r2, r0
   83190:	4b25      	ldr	r3, [pc, #148]	; (83228 <main+0xac>)
   83192:	fba3 2302 	umull	r2, r3, r3, r2
   83196:	099b      	lsrs	r3, r3, #6
   83198:	4618      	mov	r0, r3
   8319a:	4b24      	ldr	r3, [pc, #144]	; (8322c <main+0xb0>)
   8319c:	4798      	blx	r3
    
    //sd_mmc_init();
    
    spi_init();
   8319e:	4b24      	ldr	r3, [pc, #144]	; (83230 <main+0xb4>)
   831a0:	4798      	blx	r3
    
    lcd_init();
   831a2:	4b24      	ldr	r3, [pc, #144]	; (83234 <main+0xb8>)
   831a4:	4798      	blx	r3
    bl_state = LCD_LIGHT_ON;
   831a6:	4b24      	ldr	r3, [pc, #144]	; (83238 <main+0xbc>)
   831a8:	2208      	movs	r2, #8
   831aa:	701a      	strb	r2, [r3, #0]
    lcd_set_backlight(bl_state);
   831ac:	4b22      	ldr	r3, [pc, #136]	; (83238 <main+0xbc>)
   831ae:	781b      	ldrb	r3, [r3, #0]
   831b0:	4618      	mov	r0, r3
   831b2:	4b22      	ldr	r3, [pc, #136]	; (8323c <main+0xc0>)
   831b4:	4798      	blx	r3
main_end_of_test:
        //printf("Please unplug the card.\n\r");
        //while (CTRL_NO_PRESENT != sd_mmc_check(0));
//    }*/
    
    noOS_bootup_sequence();
   831b6:	4b22      	ldr	r3, [pc, #136]	; (83240 <main+0xc4>)
   831b8:	4798      	blx	r3
    
    lcd_clear();
   831ba:	4b22      	ldr	r3, [pc, #136]	; (83244 <main+0xc8>)
   831bc:	4798      	blx	r3
    
    while (1)
    {
        update_comm();
   831be:	4b22      	ldr	r3, [pc, #136]	; (83248 <main+0xcc>)
   831c0:	4798      	blx	r3
        update_heartbeat();
   831c2:	4b22      	ldr	r3, [pc, #136]	; (8324c <main+0xd0>)
   831c4:	4798      	blx	r3
        update_battery(0);
   831c6:	2000      	movs	r0, #0
   831c8:	4b21      	ldr	r3, [pc, #132]	; (83250 <main+0xd4>)
   831ca:	4798      	blx	r3
        
        if (stm.ibit.heartbeat)
   831cc:	4b21      	ldr	r3, [pc, #132]	; (83254 <main+0xd8>)
   831ce:	781b      	ldrb	r3, [r3, #0]
   831d0:	f003 0301 	and.w	r3, r3, #1
   831d4:	b2db      	uxtb	r3, r3
   831d6:	2b00      	cmp	r3, #0
   831d8:	d004      	beq.n	831e4 <main+0x68>
        {
            ioport_set_pin_level(LED_M2, 1);
   831da:	2101      	movs	r1, #1
   831dc:	2068      	movs	r0, #104	; 0x68
   831de:	4b1e      	ldr	r3, [pc, #120]	; (83258 <main+0xdc>)
   831e0:	4798      	blx	r3
   831e2:	e003      	b.n	831ec <main+0x70>
        }
        else
        {
            ioport_set_pin_level(LED_M2, 0);
   831e4:	2100      	movs	r1, #0
   831e6:	2068      	movs	r0, #104	; 0x68
   831e8:	4b1b      	ldr	r3, [pc, #108]	; (83258 <main+0xdc>)
   831ea:	4798      	blx	r3
        }
        
        act_event = button_events();
   831ec:	4b1b      	ldr	r3, [pc, #108]	; (8325c <main+0xe0>)
   831ee:	4798      	blx	r3
   831f0:	4603      	mov	r3, r0
   831f2:	71fb      	strb	r3, [r7, #7]
        
        menu(act_event);
   831f4:	79fb      	ldrb	r3, [r7, #7]
   831f6:	4618      	mov	r0, r3
   831f8:	4b19      	ldr	r3, [pc, #100]	; (83260 <main+0xe4>)
   831fa:	4798      	blx	r3
        
        if (act_event == EVENT_BUTTON_MID_H)
   831fc:	79fb      	ldrb	r3, [r7, #7]
   831fe:	2b08      	cmp	r3, #8
   83200:	d105      	bne.n	8320e <main+0x92>
        {
            mts.ibit.button = 1;
   83202:	4a18      	ldr	r2, [pc, #96]	; (83264 <main+0xe8>)
   83204:	7813      	ldrb	r3, [r2, #0]
   83206:	f043 0302 	orr.w	r3, r3, #2
   8320a:	7013      	strb	r3, [r2, #0]
   8320c:	e7d7      	b.n	831be <main+0x42>
        }
        else
        {
            mts.ibit.button = 0;
   8320e:	4a15      	ldr	r2, [pc, #84]	; (83264 <main+0xe8>)
   83210:	7813      	ldrb	r3, [r2, #0]
   83212:	f36f 0341 	bfc	r3, #1, #1
   83216:	7013      	strb	r3, [r2, #0]
        update_comm();
   83218:	e7d1      	b.n	831be <main+0x42>
   8321a:	bf00      	nop
   8321c:	000823b5 	.word	0x000823b5
   83220:	00082b79 	.word	0x00082b79
   83224:	000830b1 	.word	0x000830b1
   83228:	10624dd3 	.word	0x10624dd3
   8322c:	00082fd9 	.word	0x00082fd9
   83230:	000805bd 	.word	0x000805bd
   83234:	00080e5d 	.word	0x00080e5d
   83238:	20070fb4 	.word	0x20070fb4
   8323c:	00080f39 	.word	0x00080f39
   83240:	00083269 	.word	0x00083269
   83244:	00080f6d 	.word	0x00080f6d
   83248:	00081e31 	.word	0x00081e31
   8324c:	0008201d 	.word	0x0008201d
   83250:	00081e79 	.word	0x00081e79
   83254:	20070ff4 	.word	0x20070ff4
   83258:	000830c5 	.word	0x000830c5
   8325c:	00081a7d 	.word	0x00081a7d
   83260:	00081441 	.word	0x00081441
   83264:	20070ff0 	.word	0x20070ff0

00083268 <noOS_bootup_sequence>:
        }  
    }
}

void noOS_bootup_sequence(void)
{
   83268:	b580      	push	{r7, lr}
   8326a:	b082      	sub	sp, #8
   8326c:	af00      	add	r7, sp, #0
    while (ioport_get_pin_level(PB_MID))
   8326e:	e072      	b.n	83356 <noOS_bootup_sequence+0xee>
    {
        if (getTicks() >= (ticks_blink_update + 800))
   83270:	4b59      	ldr	r3, [pc, #356]	; (833d8 <noOS_bootup_sequence+0x170>)
   83272:	4798      	blx	r3
   83274:	4602      	mov	r2, r0
   83276:	4b59      	ldr	r3, [pc, #356]	; (833dc <noOS_bootup_sequence+0x174>)
   83278:	681b      	ldr	r3, [r3, #0]
   8327a:	f503 7348 	add.w	r3, r3, #800	; 0x320
   8327e:	429a      	cmp	r2, r3
   83280:	d31a      	bcc.n	832b8 <noOS_bootup_sequence+0x50>
        {
            ticks_blink_update = getTicks();
   83282:	4b55      	ldr	r3, [pc, #340]	; (833d8 <noOS_bootup_sequence+0x170>)
   83284:	4798      	blx	r3
   83286:	4602      	mov	r2, r0
   83288:	4b54      	ldr	r3, [pc, #336]	; (833dc <noOS_bootup_sequence+0x174>)
   8328a:	601a      	str	r2, [r3, #0]
            
            if (blink_level)
   8328c:	4b54      	ldr	r3, [pc, #336]	; (833e0 <noOS_bootup_sequence+0x178>)
   8328e:	781b      	ldrb	r3, [r3, #0]
   83290:	2b00      	cmp	r3, #0
   83292:	d003      	beq.n	8329c <noOS_bootup_sequence+0x34>
            {
                blink_level = 0;
   83294:	4b52      	ldr	r3, [pc, #328]	; (833e0 <noOS_bootup_sequence+0x178>)
   83296:	2200      	movs	r2, #0
   83298:	701a      	strb	r2, [r3, #0]
   8329a:	e002      	b.n	832a2 <noOS_bootup_sequence+0x3a>
            }
            else
            {
                blink_level = 1;
   8329c:	4b50      	ldr	r3, [pc, #320]	; (833e0 <noOS_bootup_sequence+0x178>)
   8329e:	2201      	movs	r2, #1
   832a0:	701a      	strb	r2, [r3, #0]
            }
            
            ioport_set_pin_level(LED_BAT, blink_level);
   832a2:	4b4f      	ldr	r3, [pc, #316]	; (833e0 <noOS_bootup_sequence+0x178>)
   832a4:	781b      	ldrb	r3, [r3, #0]
   832a6:	2b00      	cmp	r3, #0
   832a8:	bf14      	ite	ne
   832aa:	2301      	movne	r3, #1
   832ac:	2300      	moveq	r3, #0
   832ae:	b2db      	uxtb	r3, r3
   832b0:	4619      	mov	r1, r3
   832b2:	2066      	movs	r0, #102	; 0x66
   832b4:	4b4b      	ldr	r3, [pc, #300]	; (833e4 <noOS_bootup_sequence+0x17c>)
   832b6:	4798      	blx	r3
        }
        
        if (getTicks() >= (ticks_dot_update + 500))
   832b8:	4b47      	ldr	r3, [pc, #284]	; (833d8 <noOS_bootup_sequence+0x170>)
   832ba:	4798      	blx	r3
   832bc:	4602      	mov	r2, r0
   832be:	4b4a      	ldr	r3, [pc, #296]	; (833e8 <noOS_bootup_sequence+0x180>)
   832c0:	681b      	ldr	r3, [r3, #0]
   832c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   832c6:	429a      	cmp	r2, r3
   832c8:	d315      	bcc.n	832f6 <noOS_bootup_sequence+0x8e>
        {
            ticks_dot_update = getTicks();
   832ca:	4b43      	ldr	r3, [pc, #268]	; (833d8 <noOS_bootup_sequence+0x170>)
   832cc:	4798      	blx	r3
   832ce:	4602      	mov	r2, r0
   832d0:	4b45      	ldr	r3, [pc, #276]	; (833e8 <noOS_bootup_sequence+0x180>)
   832d2:	601a      	str	r2, [r3, #0]
            
            if (dots < 3)
   832d4:	4b45      	ldr	r3, [pc, #276]	; (833ec <noOS_bootup_sequence+0x184>)
   832d6:	781b      	ldrb	r3, [r3, #0]
   832d8:	2b02      	cmp	r3, #2
   832da:	d806      	bhi.n	832ea <noOS_bootup_sequence+0x82>
            {
                dots++;
   832dc:	4b43      	ldr	r3, [pc, #268]	; (833ec <noOS_bootup_sequence+0x184>)
   832de:	781b      	ldrb	r3, [r3, #0]
   832e0:	3301      	adds	r3, #1
   832e2:	b2da      	uxtb	r2, r3
   832e4:	4b41      	ldr	r3, [pc, #260]	; (833ec <noOS_bootup_sequence+0x184>)
   832e6:	701a      	strb	r2, [r3, #0]
   832e8:	e002      	b.n	832f0 <noOS_bootup_sequence+0x88>
            }
            else
            {
                dots = 0;
   832ea:	4b40      	ldr	r3, [pc, #256]	; (833ec <noOS_bootup_sequence+0x184>)
   832ec:	2200      	movs	r2, #0
   832ee:	701a      	strb	r2, [r3, #0]
            }
            
            update_dots = 1;
   832f0:	4b3f      	ldr	r3, [pc, #252]	; (833f0 <noOS_bootup_sequence+0x188>)
   832f2:	2201      	movs	r2, #1
   832f4:	701a      	strb	r2, [r3, #0]
        }
        
        if (update_dots)
   832f6:	4b3e      	ldr	r3, [pc, #248]	; (833f0 <noOS_bootup_sequence+0x188>)
   832f8:	781b      	ldrb	r3, [r3, #0]
   832fa:	2b00      	cmp	r3, #0
   832fc:	d02b      	beq.n	83356 <noOS_bootup_sequence+0xee>
        {
            update_dots = 0;
   832fe:	4b3c      	ldr	r3, [pc, #240]	; (833f0 <noOS_bootup_sequence+0x188>)
   83300:	2200      	movs	r2, #0
   83302:	701a      	strb	r2, [r3, #0]
            
            switch (dots)
   83304:	4b39      	ldr	r3, [pc, #228]	; (833ec <noOS_bootup_sequence+0x184>)
   83306:	781b      	ldrb	r3, [r3, #0]
   83308:	2b03      	cmp	r3, #3
   8330a:	d823      	bhi.n	83354 <noOS_bootup_sequence+0xec>
   8330c:	a201      	add	r2, pc, #4	; (adr r2, 83314 <noOS_bootup_sequence+0xac>)
   8330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83312:	bf00      	nop
   83314:	00083325 	.word	0x00083325
   83318:	00083331 	.word	0x00083331
   8331c:	0008333d 	.word	0x0008333d
   83320:	00083349 	.word	0x00083349
            {
                case 0:
                lcd_print_s(2, 2, "booting noOS   ");
   83324:	4a33      	ldr	r2, [pc, #204]	; (833f4 <noOS_bootup_sequence+0x18c>)
   83326:	2102      	movs	r1, #2
   83328:	2002      	movs	r0, #2
   8332a:	4b33      	ldr	r3, [pc, #204]	; (833f8 <noOS_bootup_sequence+0x190>)
   8332c:	4798      	blx	r3
                break;
   8332e:	e012      	b.n	83356 <noOS_bootup_sequence+0xee>
                case 1:
                lcd_print_s(2, 14, ".");
   83330:	4a32      	ldr	r2, [pc, #200]	; (833fc <noOS_bootup_sequence+0x194>)
   83332:	210e      	movs	r1, #14
   83334:	2002      	movs	r0, #2
   83336:	4b30      	ldr	r3, [pc, #192]	; (833f8 <noOS_bootup_sequence+0x190>)
   83338:	4798      	blx	r3
                break;
   8333a:	e00c      	b.n	83356 <noOS_bootup_sequence+0xee>
                case 2:
                lcd_print_s(2, 15, ".");
   8333c:	4a2f      	ldr	r2, [pc, #188]	; (833fc <noOS_bootup_sequence+0x194>)
   8333e:	210f      	movs	r1, #15
   83340:	2002      	movs	r0, #2
   83342:	4b2d      	ldr	r3, [pc, #180]	; (833f8 <noOS_bootup_sequence+0x190>)
   83344:	4798      	blx	r3
                break;
   83346:	e006      	b.n	83356 <noOS_bootup_sequence+0xee>
                case 3:
                lcd_print_s(2, 16, ".");
   83348:	4a2c      	ldr	r2, [pc, #176]	; (833fc <noOS_bootup_sequence+0x194>)
   8334a:	2110      	movs	r1, #16
   8334c:	2002      	movs	r0, #2
   8334e:	4b2a      	ldr	r3, [pc, #168]	; (833f8 <noOS_bootup_sequence+0x190>)
   83350:	4798      	blx	r3
                break;
   83352:	e000      	b.n	83356 <noOS_bootup_sequence+0xee>
                default:
                break;
   83354:	bf00      	nop
    while (ioport_get_pin_level(PB_MID))
   83356:	2062      	movs	r0, #98	; 0x62
   83358:	4b29      	ldr	r3, [pc, #164]	; (83400 <noOS_bootup_sequence+0x198>)
   8335a:	4798      	blx	r3
   8335c:	4603      	mov	r3, r0
   8335e:	2b00      	cmp	r3, #0
   83360:	d186      	bne.n	83270 <noOS_bootup_sequence+0x8>
            }
        }
    }
    
    for(int i = 0; i< 3; i++)
   83362:	2300      	movs	r3, #0
   83364:	607b      	str	r3, [r7, #4]
   83366:	e030      	b.n	833ca <noOS_bootup_sequence+0x162>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   83368:	2101      	movs	r1, #1
   8336a:	206a      	movs	r0, #106	; 0x6a
   8336c:	4b1d      	ldr	r3, [pc, #116]	; (833e4 <noOS_bootup_sequence+0x17c>)
   8336e:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 1);
   83370:	2101      	movs	r1, #1
   83372:	2066      	movs	r0, #102	; 0x66
   83374:	4b1b      	ldr	r3, [pc, #108]	; (833e4 <noOS_bootup_sequence+0x17c>)
   83376:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 1);
   83378:	2101      	movs	r1, #1
   8337a:	2067      	movs	r0, #103	; 0x67
   8337c:	4b19      	ldr	r3, [pc, #100]	; (833e4 <noOS_bootup_sequence+0x17c>)
   8337e:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 1);
   83380:	2101      	movs	r1, #1
   83382:	2068      	movs	r0, #104	; 0x68
   83384:	4b17      	ldr	r3, [pc, #92]	; (833e4 <noOS_bootup_sequence+0x17c>)
   83386:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 1);
   83388:	2101      	movs	r1, #1
   8338a:	2069      	movs	r0, #105	; 0x69
   8338c:	4b15      	ldr	r3, [pc, #84]	; (833e4 <noOS_bootup_sequence+0x17c>)
   8338e:	4798      	blx	r3
        mdelay(100);
   83390:	2064      	movs	r0, #100	; 0x64
   83392:	4b1c      	ldr	r3, [pc, #112]	; (83404 <noOS_bootup_sequence+0x19c>)
   83394:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   83396:	2100      	movs	r1, #0
   83398:	206a      	movs	r0, #106	; 0x6a
   8339a:	4b12      	ldr	r3, [pc, #72]	; (833e4 <noOS_bootup_sequence+0x17c>)
   8339c:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   8339e:	2100      	movs	r1, #0
   833a0:	2066      	movs	r0, #102	; 0x66
   833a2:	4b10      	ldr	r3, [pc, #64]	; (833e4 <noOS_bootup_sequence+0x17c>)
   833a4:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   833a6:	2100      	movs	r1, #0
   833a8:	2067      	movs	r0, #103	; 0x67
   833aa:	4b0e      	ldr	r3, [pc, #56]	; (833e4 <noOS_bootup_sequence+0x17c>)
   833ac:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   833ae:	2100      	movs	r1, #0
   833b0:	2068      	movs	r0, #104	; 0x68
   833b2:	4b0c      	ldr	r3, [pc, #48]	; (833e4 <noOS_bootup_sequence+0x17c>)
   833b4:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   833b6:	2100      	movs	r1, #0
   833b8:	2069      	movs	r0, #105	; 0x69
   833ba:	4b0a      	ldr	r3, [pc, #40]	; (833e4 <noOS_bootup_sequence+0x17c>)
   833bc:	4798      	blx	r3
        mdelay(100);
   833be:	2064      	movs	r0, #100	; 0x64
   833c0:	4b10      	ldr	r3, [pc, #64]	; (83404 <noOS_bootup_sequence+0x19c>)
   833c2:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   833c4:	687b      	ldr	r3, [r7, #4]
   833c6:	3301      	adds	r3, #1
   833c8:	607b      	str	r3, [r7, #4]
   833ca:	687b      	ldr	r3, [r7, #4]
   833cc:	2b02      	cmp	r3, #2
   833ce:	ddcb      	ble.n	83368 <noOS_bootup_sequence+0x100>
    }
}
   833d0:	bf00      	nop
   833d2:	3708      	adds	r7, #8
   833d4:	46bd      	mov	sp, r7
   833d6:	bd80      	pop	{r7, pc}
   833d8:	00081df1 	.word	0x00081df1
   833dc:	20071034 	.word	0x20071034
   833e0:	20071030 	.word	0x20071030
   833e4:	000830c5 	.word	0x000830c5
   833e8:	20071038 	.word	0x20071038
   833ec:	20070fb5 	.word	0x20070fb5
   833f0:	2007019c 	.word	0x2007019c
   833f4:	000883b0 	.word	0x000883b0
   833f8:	00080f8d 	.word	0x00080f8d
   833fc:	000883c0 	.word	0x000883c0
   83400:	0008312f 	.word	0x0008312f
   83404:	00081e05 	.word	0x00081e05

00083408 <__aeabi_drsub>:
   83408:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8340c:	e002      	b.n	83414 <__adddf3>
   8340e:	bf00      	nop

00083410 <__aeabi_dsub>:
   83410:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083414 <__adddf3>:
   83414:	b530      	push	{r4, r5, lr}
   83416:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8341a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8341e:	ea94 0f05 	teq	r4, r5
   83422:	bf08      	it	eq
   83424:	ea90 0f02 	teqeq	r0, r2
   83428:	bf1f      	itttt	ne
   8342a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8342e:	ea55 0c02 	orrsne.w	ip, r5, r2
   83432:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83436:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8343a:	f000 80e2 	beq.w	83602 <__adddf3+0x1ee>
   8343e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83442:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83446:	bfb8      	it	lt
   83448:	426d      	neglt	r5, r5
   8344a:	dd0c      	ble.n	83466 <__adddf3+0x52>
   8344c:	442c      	add	r4, r5
   8344e:	ea80 0202 	eor.w	r2, r0, r2
   83452:	ea81 0303 	eor.w	r3, r1, r3
   83456:	ea82 0000 	eor.w	r0, r2, r0
   8345a:	ea83 0101 	eor.w	r1, r3, r1
   8345e:	ea80 0202 	eor.w	r2, r0, r2
   83462:	ea81 0303 	eor.w	r3, r1, r3
   83466:	2d36      	cmp	r5, #54	; 0x36
   83468:	bf88      	it	hi
   8346a:	bd30      	pophi	{r4, r5, pc}
   8346c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83470:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83474:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83478:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8347c:	d002      	beq.n	83484 <__adddf3+0x70>
   8347e:	4240      	negs	r0, r0
   83480:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83484:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83488:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8348c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83490:	d002      	beq.n	83498 <__adddf3+0x84>
   83492:	4252      	negs	r2, r2
   83494:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83498:	ea94 0f05 	teq	r4, r5
   8349c:	f000 80a7 	beq.w	835ee <__adddf3+0x1da>
   834a0:	f1a4 0401 	sub.w	r4, r4, #1
   834a4:	f1d5 0e20 	rsbs	lr, r5, #32
   834a8:	db0d      	blt.n	834c6 <__adddf3+0xb2>
   834aa:	fa02 fc0e 	lsl.w	ip, r2, lr
   834ae:	fa22 f205 	lsr.w	r2, r2, r5
   834b2:	1880      	adds	r0, r0, r2
   834b4:	f141 0100 	adc.w	r1, r1, #0
   834b8:	fa03 f20e 	lsl.w	r2, r3, lr
   834bc:	1880      	adds	r0, r0, r2
   834be:	fa43 f305 	asr.w	r3, r3, r5
   834c2:	4159      	adcs	r1, r3
   834c4:	e00e      	b.n	834e4 <__adddf3+0xd0>
   834c6:	f1a5 0520 	sub.w	r5, r5, #32
   834ca:	f10e 0e20 	add.w	lr, lr, #32
   834ce:	2a01      	cmp	r2, #1
   834d0:	fa03 fc0e 	lsl.w	ip, r3, lr
   834d4:	bf28      	it	cs
   834d6:	f04c 0c02 	orrcs.w	ip, ip, #2
   834da:	fa43 f305 	asr.w	r3, r3, r5
   834de:	18c0      	adds	r0, r0, r3
   834e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   834e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   834e8:	d507      	bpl.n	834fa <__adddf3+0xe6>
   834ea:	f04f 0e00 	mov.w	lr, #0
   834ee:	f1dc 0c00 	rsbs	ip, ip, #0
   834f2:	eb7e 0000 	sbcs.w	r0, lr, r0
   834f6:	eb6e 0101 	sbc.w	r1, lr, r1
   834fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   834fe:	d31b      	bcc.n	83538 <__adddf3+0x124>
   83500:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83504:	d30c      	bcc.n	83520 <__adddf3+0x10c>
   83506:	0849      	lsrs	r1, r1, #1
   83508:	ea5f 0030 	movs.w	r0, r0, rrx
   8350c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83510:	f104 0401 	add.w	r4, r4, #1
   83514:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83518:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8351c:	f080 809a 	bcs.w	83654 <__adddf3+0x240>
   83520:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83524:	bf08      	it	eq
   83526:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8352a:	f150 0000 	adcs.w	r0, r0, #0
   8352e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83532:	ea41 0105 	orr.w	r1, r1, r5
   83536:	bd30      	pop	{r4, r5, pc}
   83538:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8353c:	4140      	adcs	r0, r0
   8353e:	eb41 0101 	adc.w	r1, r1, r1
   83542:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83546:	f1a4 0401 	sub.w	r4, r4, #1
   8354a:	d1e9      	bne.n	83520 <__adddf3+0x10c>
   8354c:	f091 0f00 	teq	r1, #0
   83550:	bf04      	itt	eq
   83552:	4601      	moveq	r1, r0
   83554:	2000      	moveq	r0, #0
   83556:	fab1 f381 	clz	r3, r1
   8355a:	bf08      	it	eq
   8355c:	3320      	addeq	r3, #32
   8355e:	f1a3 030b 	sub.w	r3, r3, #11
   83562:	f1b3 0220 	subs.w	r2, r3, #32
   83566:	da0c      	bge.n	83582 <__adddf3+0x16e>
   83568:	320c      	adds	r2, #12
   8356a:	dd08      	ble.n	8357e <__adddf3+0x16a>
   8356c:	f102 0c14 	add.w	ip, r2, #20
   83570:	f1c2 020c 	rsb	r2, r2, #12
   83574:	fa01 f00c 	lsl.w	r0, r1, ip
   83578:	fa21 f102 	lsr.w	r1, r1, r2
   8357c:	e00c      	b.n	83598 <__adddf3+0x184>
   8357e:	f102 0214 	add.w	r2, r2, #20
   83582:	bfd8      	it	le
   83584:	f1c2 0c20 	rsble	ip, r2, #32
   83588:	fa01 f102 	lsl.w	r1, r1, r2
   8358c:	fa20 fc0c 	lsr.w	ip, r0, ip
   83590:	bfdc      	itt	le
   83592:	ea41 010c 	orrle.w	r1, r1, ip
   83596:	4090      	lslle	r0, r2
   83598:	1ae4      	subs	r4, r4, r3
   8359a:	bfa2      	ittt	ge
   8359c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   835a0:	4329      	orrge	r1, r5
   835a2:	bd30      	popge	{r4, r5, pc}
   835a4:	ea6f 0404 	mvn.w	r4, r4
   835a8:	3c1f      	subs	r4, #31
   835aa:	da1c      	bge.n	835e6 <__adddf3+0x1d2>
   835ac:	340c      	adds	r4, #12
   835ae:	dc0e      	bgt.n	835ce <__adddf3+0x1ba>
   835b0:	f104 0414 	add.w	r4, r4, #20
   835b4:	f1c4 0220 	rsb	r2, r4, #32
   835b8:	fa20 f004 	lsr.w	r0, r0, r4
   835bc:	fa01 f302 	lsl.w	r3, r1, r2
   835c0:	ea40 0003 	orr.w	r0, r0, r3
   835c4:	fa21 f304 	lsr.w	r3, r1, r4
   835c8:	ea45 0103 	orr.w	r1, r5, r3
   835cc:	bd30      	pop	{r4, r5, pc}
   835ce:	f1c4 040c 	rsb	r4, r4, #12
   835d2:	f1c4 0220 	rsb	r2, r4, #32
   835d6:	fa20 f002 	lsr.w	r0, r0, r2
   835da:	fa01 f304 	lsl.w	r3, r1, r4
   835de:	ea40 0003 	orr.w	r0, r0, r3
   835e2:	4629      	mov	r1, r5
   835e4:	bd30      	pop	{r4, r5, pc}
   835e6:	fa21 f004 	lsr.w	r0, r1, r4
   835ea:	4629      	mov	r1, r5
   835ec:	bd30      	pop	{r4, r5, pc}
   835ee:	f094 0f00 	teq	r4, #0
   835f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   835f6:	bf06      	itte	eq
   835f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   835fc:	3401      	addeq	r4, #1
   835fe:	3d01      	subne	r5, #1
   83600:	e74e      	b.n	834a0 <__adddf3+0x8c>
   83602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83606:	bf18      	it	ne
   83608:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8360c:	d029      	beq.n	83662 <__adddf3+0x24e>
   8360e:	ea94 0f05 	teq	r4, r5
   83612:	bf08      	it	eq
   83614:	ea90 0f02 	teqeq	r0, r2
   83618:	d005      	beq.n	83626 <__adddf3+0x212>
   8361a:	ea54 0c00 	orrs.w	ip, r4, r0
   8361e:	bf04      	itt	eq
   83620:	4619      	moveq	r1, r3
   83622:	4610      	moveq	r0, r2
   83624:	bd30      	pop	{r4, r5, pc}
   83626:	ea91 0f03 	teq	r1, r3
   8362a:	bf1e      	ittt	ne
   8362c:	2100      	movne	r1, #0
   8362e:	2000      	movne	r0, #0
   83630:	bd30      	popne	{r4, r5, pc}
   83632:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83636:	d105      	bne.n	83644 <__adddf3+0x230>
   83638:	0040      	lsls	r0, r0, #1
   8363a:	4149      	adcs	r1, r1
   8363c:	bf28      	it	cs
   8363e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83642:	bd30      	pop	{r4, r5, pc}
   83644:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83648:	bf3c      	itt	cc
   8364a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8364e:	bd30      	popcc	{r4, r5, pc}
   83650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83654:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83658:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8365c:	f04f 0000 	mov.w	r0, #0
   83660:	bd30      	pop	{r4, r5, pc}
   83662:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83666:	bf1a      	itte	ne
   83668:	4619      	movne	r1, r3
   8366a:	4610      	movne	r0, r2
   8366c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83670:	bf1c      	itt	ne
   83672:	460b      	movne	r3, r1
   83674:	4602      	movne	r2, r0
   83676:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8367a:	bf06      	itte	eq
   8367c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83680:	ea91 0f03 	teqeq	r1, r3
   83684:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83688:	bd30      	pop	{r4, r5, pc}
   8368a:	bf00      	nop

0008368c <__aeabi_ui2d>:
   8368c:	f090 0f00 	teq	r0, #0
   83690:	bf04      	itt	eq
   83692:	2100      	moveq	r1, #0
   83694:	4770      	bxeq	lr
   83696:	b530      	push	{r4, r5, lr}
   83698:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8369c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   836a0:	f04f 0500 	mov.w	r5, #0
   836a4:	f04f 0100 	mov.w	r1, #0
   836a8:	e750      	b.n	8354c <__adddf3+0x138>
   836aa:	bf00      	nop

000836ac <__aeabi_i2d>:
   836ac:	f090 0f00 	teq	r0, #0
   836b0:	bf04      	itt	eq
   836b2:	2100      	moveq	r1, #0
   836b4:	4770      	bxeq	lr
   836b6:	b530      	push	{r4, r5, lr}
   836b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   836bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   836c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   836c4:	bf48      	it	mi
   836c6:	4240      	negmi	r0, r0
   836c8:	f04f 0100 	mov.w	r1, #0
   836cc:	e73e      	b.n	8354c <__adddf3+0x138>
   836ce:	bf00      	nop

000836d0 <__aeabi_f2d>:
   836d0:	0042      	lsls	r2, r0, #1
   836d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   836d6:	ea4f 0131 	mov.w	r1, r1, rrx
   836da:	ea4f 7002 	mov.w	r0, r2, lsl #28
   836de:	bf1f      	itttt	ne
   836e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   836e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   836e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   836ec:	4770      	bxne	lr
   836ee:	f092 0f00 	teq	r2, #0
   836f2:	bf14      	ite	ne
   836f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   836f8:	4770      	bxeq	lr
   836fa:	b530      	push	{r4, r5, lr}
   836fc:	f44f 7460 	mov.w	r4, #896	; 0x380
   83700:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83708:	e720      	b.n	8354c <__adddf3+0x138>
   8370a:	bf00      	nop

0008370c <__aeabi_ul2d>:
   8370c:	ea50 0201 	orrs.w	r2, r0, r1
   83710:	bf08      	it	eq
   83712:	4770      	bxeq	lr
   83714:	b530      	push	{r4, r5, lr}
   83716:	f04f 0500 	mov.w	r5, #0
   8371a:	e00a      	b.n	83732 <__aeabi_l2d+0x16>

0008371c <__aeabi_l2d>:
   8371c:	ea50 0201 	orrs.w	r2, r0, r1
   83720:	bf08      	it	eq
   83722:	4770      	bxeq	lr
   83724:	b530      	push	{r4, r5, lr}
   83726:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8372a:	d502      	bpl.n	83732 <__aeabi_l2d+0x16>
   8372c:	4240      	negs	r0, r0
   8372e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83732:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83736:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8373a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8373e:	f43f aedc 	beq.w	834fa <__adddf3+0xe6>
   83742:	f04f 0203 	mov.w	r2, #3
   83746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8374a:	bf18      	it	ne
   8374c:	3203      	addne	r2, #3
   8374e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83752:	bf18      	it	ne
   83754:	3203      	addne	r2, #3
   83756:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8375a:	f1c2 0320 	rsb	r3, r2, #32
   8375e:	fa00 fc03 	lsl.w	ip, r0, r3
   83762:	fa20 f002 	lsr.w	r0, r0, r2
   83766:	fa01 fe03 	lsl.w	lr, r1, r3
   8376a:	ea40 000e 	orr.w	r0, r0, lr
   8376e:	fa21 f102 	lsr.w	r1, r1, r2
   83772:	4414      	add	r4, r2
   83774:	e6c1      	b.n	834fa <__adddf3+0xe6>
   83776:	bf00      	nop

00083778 <__aeabi_frsub>:
   83778:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   8377c:	e002      	b.n	83784 <__addsf3>
   8377e:	bf00      	nop

00083780 <__aeabi_fsub>:
   83780:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00083784 <__addsf3>:
   83784:	0042      	lsls	r2, r0, #1
   83786:	bf1f      	itttt	ne
   83788:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   8378c:	ea92 0f03 	teqne	r2, r3
   83790:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   83794:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   83798:	d06a      	beq.n	83870 <__addsf3+0xec>
   8379a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8379e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   837a2:	bfc1      	itttt	gt
   837a4:	18d2      	addgt	r2, r2, r3
   837a6:	4041      	eorgt	r1, r0
   837a8:	4048      	eorgt	r0, r1
   837aa:	4041      	eorgt	r1, r0
   837ac:	bfb8      	it	lt
   837ae:	425b      	neglt	r3, r3
   837b0:	2b19      	cmp	r3, #25
   837b2:	bf88      	it	hi
   837b4:	4770      	bxhi	lr
   837b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   837ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   837be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   837c2:	bf18      	it	ne
   837c4:	4240      	negne	r0, r0
   837c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   837ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   837ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   837d2:	bf18      	it	ne
   837d4:	4249      	negne	r1, r1
   837d6:	ea92 0f03 	teq	r2, r3
   837da:	d03f      	beq.n	8385c <__addsf3+0xd8>
   837dc:	f1a2 0201 	sub.w	r2, r2, #1
   837e0:	fa41 fc03 	asr.w	ip, r1, r3
   837e4:	eb10 000c 	adds.w	r0, r0, ip
   837e8:	f1c3 0320 	rsb	r3, r3, #32
   837ec:	fa01 f103 	lsl.w	r1, r1, r3
   837f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   837f4:	d502      	bpl.n	837fc <__addsf3+0x78>
   837f6:	4249      	negs	r1, r1
   837f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   837fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   83800:	d313      	bcc.n	8382a <__addsf3+0xa6>
   83802:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   83806:	d306      	bcc.n	83816 <__addsf3+0x92>
   83808:	0840      	lsrs	r0, r0, #1
   8380a:	ea4f 0131 	mov.w	r1, r1, rrx
   8380e:	f102 0201 	add.w	r2, r2, #1
   83812:	2afe      	cmp	r2, #254	; 0xfe
   83814:	d251      	bcs.n	838ba <__addsf3+0x136>
   83816:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8381a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8381e:	bf08      	it	eq
   83820:	f020 0001 	biceq.w	r0, r0, #1
   83824:	ea40 0003 	orr.w	r0, r0, r3
   83828:	4770      	bx	lr
   8382a:	0049      	lsls	r1, r1, #1
   8382c:	eb40 0000 	adc.w	r0, r0, r0
   83830:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   83834:	f1a2 0201 	sub.w	r2, r2, #1
   83838:	d1ed      	bne.n	83816 <__addsf3+0x92>
   8383a:	fab0 fc80 	clz	ip, r0
   8383e:	f1ac 0c08 	sub.w	ip, ip, #8
   83842:	ebb2 020c 	subs.w	r2, r2, ip
   83846:	fa00 f00c 	lsl.w	r0, r0, ip
   8384a:	bfaa      	itet	ge
   8384c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   83850:	4252      	neglt	r2, r2
   83852:	4318      	orrge	r0, r3
   83854:	bfbc      	itt	lt
   83856:	40d0      	lsrlt	r0, r2
   83858:	4318      	orrlt	r0, r3
   8385a:	4770      	bx	lr
   8385c:	f092 0f00 	teq	r2, #0
   83860:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   83864:	bf06      	itte	eq
   83866:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8386a:	3201      	addeq	r2, #1
   8386c:	3b01      	subne	r3, #1
   8386e:	e7b5      	b.n	837dc <__addsf3+0x58>
   83870:	ea4f 0341 	mov.w	r3, r1, lsl #1
   83874:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   83878:	bf18      	it	ne
   8387a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8387e:	d021      	beq.n	838c4 <__addsf3+0x140>
   83880:	ea92 0f03 	teq	r2, r3
   83884:	d004      	beq.n	83890 <__addsf3+0x10c>
   83886:	f092 0f00 	teq	r2, #0
   8388a:	bf08      	it	eq
   8388c:	4608      	moveq	r0, r1
   8388e:	4770      	bx	lr
   83890:	ea90 0f01 	teq	r0, r1
   83894:	bf1c      	itt	ne
   83896:	2000      	movne	r0, #0
   83898:	4770      	bxne	lr
   8389a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8389e:	d104      	bne.n	838aa <__addsf3+0x126>
   838a0:	0040      	lsls	r0, r0, #1
   838a2:	bf28      	it	cs
   838a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   838a8:	4770      	bx	lr
   838aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   838ae:	bf3c      	itt	cc
   838b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   838b4:	4770      	bxcc	lr
   838b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   838ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   838be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   838c2:	4770      	bx	lr
   838c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   838c8:	bf16      	itet	ne
   838ca:	4608      	movne	r0, r1
   838cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   838d0:	4601      	movne	r1, r0
   838d2:	0242      	lsls	r2, r0, #9
   838d4:	bf06      	itte	eq
   838d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   838da:	ea90 0f01 	teqeq	r0, r1
   838de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   838e2:	4770      	bx	lr

000838e4 <__aeabi_ui2f>:
   838e4:	f04f 0300 	mov.w	r3, #0
   838e8:	e004      	b.n	838f4 <__aeabi_i2f+0x8>
   838ea:	bf00      	nop

000838ec <__aeabi_i2f>:
   838ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   838f0:	bf48      	it	mi
   838f2:	4240      	negmi	r0, r0
   838f4:	ea5f 0c00 	movs.w	ip, r0
   838f8:	bf08      	it	eq
   838fa:	4770      	bxeq	lr
   838fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   83900:	4601      	mov	r1, r0
   83902:	f04f 0000 	mov.w	r0, #0
   83906:	e01c      	b.n	83942 <__aeabi_l2f+0x2a>

00083908 <__aeabi_ul2f>:
   83908:	ea50 0201 	orrs.w	r2, r0, r1
   8390c:	bf08      	it	eq
   8390e:	4770      	bxeq	lr
   83910:	f04f 0300 	mov.w	r3, #0
   83914:	e00a      	b.n	8392c <__aeabi_l2f+0x14>
   83916:	bf00      	nop

00083918 <__aeabi_l2f>:
   83918:	ea50 0201 	orrs.w	r2, r0, r1
   8391c:	bf08      	it	eq
   8391e:	4770      	bxeq	lr
   83920:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   83924:	d502      	bpl.n	8392c <__aeabi_l2f+0x14>
   83926:	4240      	negs	r0, r0
   83928:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8392c:	ea5f 0c01 	movs.w	ip, r1
   83930:	bf02      	ittt	eq
   83932:	4684      	moveq	ip, r0
   83934:	4601      	moveq	r1, r0
   83936:	2000      	moveq	r0, #0
   83938:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   8393c:	bf08      	it	eq
   8393e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   83942:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   83946:	fabc f28c 	clz	r2, ip
   8394a:	3a08      	subs	r2, #8
   8394c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   83950:	db10      	blt.n	83974 <__aeabi_l2f+0x5c>
   83952:	fa01 fc02 	lsl.w	ip, r1, r2
   83956:	4463      	add	r3, ip
   83958:	fa00 fc02 	lsl.w	ip, r0, r2
   8395c:	f1c2 0220 	rsb	r2, r2, #32
   83960:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83964:	fa20 f202 	lsr.w	r2, r0, r2
   83968:	eb43 0002 	adc.w	r0, r3, r2
   8396c:	bf08      	it	eq
   8396e:	f020 0001 	biceq.w	r0, r0, #1
   83972:	4770      	bx	lr
   83974:	f102 0220 	add.w	r2, r2, #32
   83978:	fa01 fc02 	lsl.w	ip, r1, r2
   8397c:	f1c2 0220 	rsb	r2, r2, #32
   83980:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   83984:	fa21 f202 	lsr.w	r2, r1, r2
   83988:	eb43 0002 	adc.w	r0, r3, r2
   8398c:	bf08      	it	eq
   8398e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   83992:	4770      	bx	lr

00083994 <__aeabi_fmul>:
   83994:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83998:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8399c:	bf1e      	ittt	ne
   8399e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   839a2:	ea92 0f0c 	teqne	r2, ip
   839a6:	ea93 0f0c 	teqne	r3, ip
   839aa:	d06f      	beq.n	83a8c <__aeabi_fmul+0xf8>
   839ac:	441a      	add	r2, r3
   839ae:	ea80 0c01 	eor.w	ip, r0, r1
   839b2:	0240      	lsls	r0, r0, #9
   839b4:	bf18      	it	ne
   839b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   839ba:	d01e      	beq.n	839fa <__aeabi_fmul+0x66>
   839bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   839c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   839c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   839c8:	fba0 3101 	umull	r3, r1, r0, r1
   839cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   839d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   839d4:	bf3e      	ittt	cc
   839d6:	0049      	lslcc	r1, r1, #1
   839d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   839dc:	005b      	lslcc	r3, r3, #1
   839de:	ea40 0001 	orr.w	r0, r0, r1
   839e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   839e6:	2afd      	cmp	r2, #253	; 0xfd
   839e8:	d81d      	bhi.n	83a26 <__aeabi_fmul+0x92>
   839ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   839ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   839f2:	bf08      	it	eq
   839f4:	f020 0001 	biceq.w	r0, r0, #1
   839f8:	4770      	bx	lr
   839fa:	f090 0f00 	teq	r0, #0
   839fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   83a02:	bf08      	it	eq
   83a04:	0249      	lsleq	r1, r1, #9
   83a06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   83a0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   83a0e:	3a7f      	subs	r2, #127	; 0x7f
   83a10:	bfc2      	ittt	gt
   83a12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   83a16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   83a1a:	4770      	bxgt	lr
   83a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83a20:	f04f 0300 	mov.w	r3, #0
   83a24:	3a01      	subs	r2, #1
   83a26:	dc5d      	bgt.n	83ae4 <__aeabi_fmul+0x150>
   83a28:	f112 0f19 	cmn.w	r2, #25
   83a2c:	bfdc      	itt	le
   83a2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   83a32:	4770      	bxle	lr
   83a34:	f1c2 0200 	rsb	r2, r2, #0
   83a38:	0041      	lsls	r1, r0, #1
   83a3a:	fa21 f102 	lsr.w	r1, r1, r2
   83a3e:	f1c2 0220 	rsb	r2, r2, #32
   83a42:	fa00 fc02 	lsl.w	ip, r0, r2
   83a46:	ea5f 0031 	movs.w	r0, r1, rrx
   83a4a:	f140 0000 	adc.w	r0, r0, #0
   83a4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   83a52:	bf08      	it	eq
   83a54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   83a58:	4770      	bx	lr
   83a5a:	f092 0f00 	teq	r2, #0
   83a5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   83a62:	bf02      	ittt	eq
   83a64:	0040      	lsleq	r0, r0, #1
   83a66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   83a6a:	3a01      	subeq	r2, #1
   83a6c:	d0f9      	beq.n	83a62 <__aeabi_fmul+0xce>
   83a6e:	ea40 000c 	orr.w	r0, r0, ip
   83a72:	f093 0f00 	teq	r3, #0
   83a76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   83a7a:	bf02      	ittt	eq
   83a7c:	0049      	lsleq	r1, r1, #1
   83a7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   83a82:	3b01      	subeq	r3, #1
   83a84:	d0f9      	beq.n	83a7a <__aeabi_fmul+0xe6>
   83a86:	ea41 010c 	orr.w	r1, r1, ip
   83a8a:	e78f      	b.n	839ac <__aeabi_fmul+0x18>
   83a8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   83a90:	ea92 0f0c 	teq	r2, ip
   83a94:	bf18      	it	ne
   83a96:	ea93 0f0c 	teqne	r3, ip
   83a9a:	d00a      	beq.n	83ab2 <__aeabi_fmul+0x11e>
   83a9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   83aa0:	bf18      	it	ne
   83aa2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   83aa6:	d1d8      	bne.n	83a5a <__aeabi_fmul+0xc6>
   83aa8:	ea80 0001 	eor.w	r0, r0, r1
   83aac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   83ab0:	4770      	bx	lr
   83ab2:	f090 0f00 	teq	r0, #0
   83ab6:	bf17      	itett	ne
   83ab8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   83abc:	4608      	moveq	r0, r1
   83abe:	f091 0f00 	teqne	r1, #0
   83ac2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   83ac6:	d014      	beq.n	83af2 <__aeabi_fmul+0x15e>
   83ac8:	ea92 0f0c 	teq	r2, ip
   83acc:	d101      	bne.n	83ad2 <__aeabi_fmul+0x13e>
   83ace:	0242      	lsls	r2, r0, #9
   83ad0:	d10f      	bne.n	83af2 <__aeabi_fmul+0x15e>
   83ad2:	ea93 0f0c 	teq	r3, ip
   83ad6:	d103      	bne.n	83ae0 <__aeabi_fmul+0x14c>
   83ad8:	024b      	lsls	r3, r1, #9
   83ada:	bf18      	it	ne
   83adc:	4608      	movne	r0, r1
   83ade:	d108      	bne.n	83af2 <__aeabi_fmul+0x15e>
   83ae0:	ea80 0001 	eor.w	r0, r0, r1
   83ae4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   83ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   83aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83af0:	4770      	bx	lr
   83af2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   83af6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   83afa:	4770      	bx	lr

00083afc <__aeabi_fdiv>:
   83afc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83b00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   83b04:	bf1e      	ittt	ne
   83b06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   83b0a:	ea92 0f0c 	teqne	r2, ip
   83b0e:	ea93 0f0c 	teqne	r3, ip
   83b12:	d069      	beq.n	83be8 <__aeabi_fdiv+0xec>
   83b14:	eba2 0203 	sub.w	r2, r2, r3
   83b18:	ea80 0c01 	eor.w	ip, r0, r1
   83b1c:	0249      	lsls	r1, r1, #9
   83b1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   83b22:	d037      	beq.n	83b94 <__aeabi_fdiv+0x98>
   83b24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   83b28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   83b2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   83b30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   83b34:	428b      	cmp	r3, r1
   83b36:	bf38      	it	cc
   83b38:	005b      	lslcc	r3, r3, #1
   83b3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   83b3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   83b42:	428b      	cmp	r3, r1
   83b44:	bf24      	itt	cs
   83b46:	1a5b      	subcs	r3, r3, r1
   83b48:	ea40 000c 	orrcs.w	r0, r0, ip
   83b4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   83b50:	bf24      	itt	cs
   83b52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   83b56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83b5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   83b5e:	bf24      	itt	cs
   83b60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   83b64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83b68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   83b6c:	bf24      	itt	cs
   83b6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   83b72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83b76:	011b      	lsls	r3, r3, #4
   83b78:	bf18      	it	ne
   83b7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   83b7e:	d1e0      	bne.n	83b42 <__aeabi_fdiv+0x46>
   83b80:	2afd      	cmp	r2, #253	; 0xfd
   83b82:	f63f af50 	bhi.w	83a26 <__aeabi_fmul+0x92>
   83b86:	428b      	cmp	r3, r1
   83b88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   83b8c:	bf08      	it	eq
   83b8e:	f020 0001 	biceq.w	r0, r0, #1
   83b92:	4770      	bx	lr
   83b94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   83b98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   83b9c:	327f      	adds	r2, #127	; 0x7f
   83b9e:	bfc2      	ittt	gt
   83ba0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   83ba4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   83ba8:	4770      	bxgt	lr
   83baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83bae:	f04f 0300 	mov.w	r3, #0
   83bb2:	3a01      	subs	r2, #1
   83bb4:	e737      	b.n	83a26 <__aeabi_fmul+0x92>
   83bb6:	f092 0f00 	teq	r2, #0
   83bba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   83bbe:	bf02      	ittt	eq
   83bc0:	0040      	lsleq	r0, r0, #1
   83bc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   83bc6:	3a01      	subeq	r2, #1
   83bc8:	d0f9      	beq.n	83bbe <__aeabi_fdiv+0xc2>
   83bca:	ea40 000c 	orr.w	r0, r0, ip
   83bce:	f093 0f00 	teq	r3, #0
   83bd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   83bd6:	bf02      	ittt	eq
   83bd8:	0049      	lsleq	r1, r1, #1
   83bda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   83bde:	3b01      	subeq	r3, #1
   83be0:	d0f9      	beq.n	83bd6 <__aeabi_fdiv+0xda>
   83be2:	ea41 010c 	orr.w	r1, r1, ip
   83be6:	e795      	b.n	83b14 <__aeabi_fdiv+0x18>
   83be8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   83bec:	ea92 0f0c 	teq	r2, ip
   83bf0:	d108      	bne.n	83c04 <__aeabi_fdiv+0x108>
   83bf2:	0242      	lsls	r2, r0, #9
   83bf4:	f47f af7d 	bne.w	83af2 <__aeabi_fmul+0x15e>
   83bf8:	ea93 0f0c 	teq	r3, ip
   83bfc:	f47f af70 	bne.w	83ae0 <__aeabi_fmul+0x14c>
   83c00:	4608      	mov	r0, r1
   83c02:	e776      	b.n	83af2 <__aeabi_fmul+0x15e>
   83c04:	ea93 0f0c 	teq	r3, ip
   83c08:	d104      	bne.n	83c14 <__aeabi_fdiv+0x118>
   83c0a:	024b      	lsls	r3, r1, #9
   83c0c:	f43f af4c 	beq.w	83aa8 <__aeabi_fmul+0x114>
   83c10:	4608      	mov	r0, r1
   83c12:	e76e      	b.n	83af2 <__aeabi_fmul+0x15e>
   83c14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   83c18:	bf18      	it	ne
   83c1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   83c1e:	d1ca      	bne.n	83bb6 <__aeabi_fdiv+0xba>
   83c20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   83c24:	f47f af5c 	bne.w	83ae0 <__aeabi_fmul+0x14c>
   83c28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   83c2c:	f47f af3c 	bne.w	83aa8 <__aeabi_fmul+0x114>
   83c30:	e75f      	b.n	83af2 <__aeabi_fmul+0x15e>
   83c32:	bf00      	nop

00083c34 <__gesf2>:
   83c34:	f04f 3cff 	mov.w	ip, #4294967295
   83c38:	e006      	b.n	83c48 <__cmpsf2+0x4>
   83c3a:	bf00      	nop

00083c3c <__lesf2>:
   83c3c:	f04f 0c01 	mov.w	ip, #1
   83c40:	e002      	b.n	83c48 <__cmpsf2+0x4>
   83c42:	bf00      	nop

00083c44 <__cmpsf2>:
   83c44:	f04f 0c01 	mov.w	ip, #1
   83c48:	f84d cd04 	str.w	ip, [sp, #-4]!
   83c4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   83c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
   83c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   83c58:	bf18      	it	ne
   83c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   83c5e:	d011      	beq.n	83c84 <__cmpsf2+0x40>
   83c60:	b001      	add	sp, #4
   83c62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   83c66:	bf18      	it	ne
   83c68:	ea90 0f01 	teqne	r0, r1
   83c6c:	bf58      	it	pl
   83c6e:	ebb2 0003 	subspl.w	r0, r2, r3
   83c72:	bf88      	it	hi
   83c74:	17c8      	asrhi	r0, r1, #31
   83c76:	bf38      	it	cc
   83c78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   83c7c:	bf18      	it	ne
   83c7e:	f040 0001 	orrne.w	r0, r0, #1
   83c82:	4770      	bx	lr
   83c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   83c88:	d102      	bne.n	83c90 <__cmpsf2+0x4c>
   83c8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   83c8e:	d105      	bne.n	83c9c <__cmpsf2+0x58>
   83c90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   83c94:	d1e4      	bne.n	83c60 <__cmpsf2+0x1c>
   83c96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   83c9a:	d0e1      	beq.n	83c60 <__cmpsf2+0x1c>
   83c9c:	f85d 0b04 	ldr.w	r0, [sp], #4
   83ca0:	4770      	bx	lr
   83ca2:	bf00      	nop

00083ca4 <__aeabi_cfrcmple>:
   83ca4:	4684      	mov	ip, r0
   83ca6:	4608      	mov	r0, r1
   83ca8:	4661      	mov	r1, ip
   83caa:	e7ff      	b.n	83cac <__aeabi_cfcmpeq>

00083cac <__aeabi_cfcmpeq>:
   83cac:	b50f      	push	{r0, r1, r2, r3, lr}
   83cae:	f7ff ffc9 	bl	83c44 <__cmpsf2>
   83cb2:	2800      	cmp	r0, #0
   83cb4:	bf48      	it	mi
   83cb6:	f110 0f00 	cmnmi.w	r0, #0
   83cba:	bd0f      	pop	{r0, r1, r2, r3, pc}

00083cbc <__aeabi_fcmpeq>:
   83cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   83cc0:	f7ff fff4 	bl	83cac <__aeabi_cfcmpeq>
   83cc4:	bf0c      	ite	eq
   83cc6:	2001      	moveq	r0, #1
   83cc8:	2000      	movne	r0, #0
   83cca:	f85d fb08 	ldr.w	pc, [sp], #8
   83cce:	bf00      	nop

00083cd0 <__aeabi_fcmplt>:
   83cd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   83cd4:	f7ff ffea 	bl	83cac <__aeabi_cfcmpeq>
   83cd8:	bf34      	ite	cc
   83cda:	2001      	movcc	r0, #1
   83cdc:	2000      	movcs	r0, #0
   83cde:	f85d fb08 	ldr.w	pc, [sp], #8
   83ce2:	bf00      	nop

00083ce4 <__aeabi_fcmple>:
   83ce4:	f84d ed08 	str.w	lr, [sp, #-8]!
   83ce8:	f7ff ffe0 	bl	83cac <__aeabi_cfcmpeq>
   83cec:	bf94      	ite	ls
   83cee:	2001      	movls	r0, #1
   83cf0:	2000      	movhi	r0, #0
   83cf2:	f85d fb08 	ldr.w	pc, [sp], #8
   83cf6:	bf00      	nop

00083cf8 <__aeabi_fcmpge>:
   83cf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   83cfc:	f7ff ffd2 	bl	83ca4 <__aeabi_cfrcmple>
   83d00:	bf94      	ite	ls
   83d02:	2001      	movls	r0, #1
   83d04:	2000      	movhi	r0, #0
   83d06:	f85d fb08 	ldr.w	pc, [sp], #8
   83d0a:	bf00      	nop

00083d0c <__aeabi_fcmpgt>:
   83d0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   83d10:	f7ff ffc8 	bl	83ca4 <__aeabi_cfrcmple>
   83d14:	bf34      	ite	cc
   83d16:	2001      	movcc	r0, #1
   83d18:	2000      	movcs	r0, #0
   83d1a:	f85d fb08 	ldr.w	pc, [sp], #8
   83d1e:	bf00      	nop

00083d20 <__aeabi_f2iz>:
   83d20:	ea4f 0240 	mov.w	r2, r0, lsl #1
   83d24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   83d28:	d30f      	bcc.n	83d4a <__aeabi_f2iz+0x2a>
   83d2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   83d2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   83d32:	d90d      	bls.n	83d50 <__aeabi_f2iz+0x30>
   83d34:	ea4f 2300 	mov.w	r3, r0, lsl #8
   83d38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83d3c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   83d40:	fa23 f002 	lsr.w	r0, r3, r2
   83d44:	bf18      	it	ne
   83d46:	4240      	negne	r0, r0
   83d48:	4770      	bx	lr
   83d4a:	f04f 0000 	mov.w	r0, #0
   83d4e:	4770      	bx	lr
   83d50:	f112 0f61 	cmn.w	r2, #97	; 0x61
   83d54:	d101      	bne.n	83d5a <__aeabi_f2iz+0x3a>
   83d56:	0242      	lsls	r2, r0, #9
   83d58:	d105      	bne.n	83d66 <__aeabi_f2iz+0x46>
   83d5a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   83d5e:	bf08      	it	eq
   83d60:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   83d64:	4770      	bx	lr
   83d66:	f04f 0000 	mov.w	r0, #0
   83d6a:	4770      	bx	lr

00083d6c <__libc_init_array>:
   83d6c:	b570      	push	{r4, r5, r6, lr}
   83d6e:	4e0f      	ldr	r6, [pc, #60]	; (83dac <__libc_init_array+0x40>)
   83d70:	4d0f      	ldr	r5, [pc, #60]	; (83db0 <__libc_init_array+0x44>)
   83d72:	1b76      	subs	r6, r6, r5
   83d74:	10b6      	asrs	r6, r6, #2
   83d76:	bf18      	it	ne
   83d78:	2400      	movne	r4, #0
   83d7a:	d005      	beq.n	83d88 <__libc_init_array+0x1c>
   83d7c:	3401      	adds	r4, #1
   83d7e:	f855 3b04 	ldr.w	r3, [r5], #4
   83d82:	4798      	blx	r3
   83d84:	42a6      	cmp	r6, r4
   83d86:	d1f9      	bne.n	83d7c <__libc_init_array+0x10>
   83d88:	4e0a      	ldr	r6, [pc, #40]	; (83db4 <__libc_init_array+0x48>)
   83d8a:	4d0b      	ldr	r5, [pc, #44]	; (83db8 <__libc_init_array+0x4c>)
   83d8c:	f004 fc60 	bl	88650 <_init>
   83d90:	1b76      	subs	r6, r6, r5
   83d92:	10b6      	asrs	r6, r6, #2
   83d94:	bf18      	it	ne
   83d96:	2400      	movne	r4, #0
   83d98:	d006      	beq.n	83da8 <__libc_init_array+0x3c>
   83d9a:	3401      	adds	r4, #1
   83d9c:	f855 3b04 	ldr.w	r3, [r5], #4
   83da0:	4798      	blx	r3
   83da2:	42a6      	cmp	r6, r4
   83da4:	d1f9      	bne.n	83d9a <__libc_init_array+0x2e>
   83da6:	bd70      	pop	{r4, r5, r6, pc}
   83da8:	bd70      	pop	{r4, r5, r6, pc}
   83daa:	bf00      	nop
   83dac:	0008865c 	.word	0x0008865c
   83db0:	0008865c 	.word	0x0008865c
   83db4:	00088664 	.word	0x00088664
   83db8:	0008865c 	.word	0x0008865c

00083dbc <memset>:
   83dbc:	b470      	push	{r4, r5, r6}
   83dbe:	0786      	lsls	r6, r0, #30
   83dc0:	d046      	beq.n	83e50 <memset+0x94>
   83dc2:	1e54      	subs	r4, r2, #1
   83dc4:	2a00      	cmp	r2, #0
   83dc6:	d041      	beq.n	83e4c <memset+0x90>
   83dc8:	b2ca      	uxtb	r2, r1
   83dca:	4603      	mov	r3, r0
   83dcc:	e002      	b.n	83dd4 <memset+0x18>
   83dce:	f114 34ff 	adds.w	r4, r4, #4294967295
   83dd2:	d33b      	bcc.n	83e4c <memset+0x90>
   83dd4:	f803 2b01 	strb.w	r2, [r3], #1
   83dd8:	079d      	lsls	r5, r3, #30
   83dda:	d1f8      	bne.n	83dce <memset+0x12>
   83ddc:	2c03      	cmp	r4, #3
   83dde:	d92e      	bls.n	83e3e <memset+0x82>
   83de0:	b2cd      	uxtb	r5, r1
   83de2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83de6:	2c0f      	cmp	r4, #15
   83de8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83dec:	d919      	bls.n	83e22 <memset+0x66>
   83dee:	4626      	mov	r6, r4
   83df0:	f103 0210 	add.w	r2, r3, #16
   83df4:	3e10      	subs	r6, #16
   83df6:	2e0f      	cmp	r6, #15
   83df8:	f842 5c10 	str.w	r5, [r2, #-16]
   83dfc:	f842 5c0c 	str.w	r5, [r2, #-12]
   83e00:	f842 5c08 	str.w	r5, [r2, #-8]
   83e04:	f842 5c04 	str.w	r5, [r2, #-4]
   83e08:	f102 0210 	add.w	r2, r2, #16
   83e0c:	d8f2      	bhi.n	83df4 <memset+0x38>
   83e0e:	f1a4 0210 	sub.w	r2, r4, #16
   83e12:	f022 020f 	bic.w	r2, r2, #15
   83e16:	f004 040f 	and.w	r4, r4, #15
   83e1a:	3210      	adds	r2, #16
   83e1c:	2c03      	cmp	r4, #3
   83e1e:	4413      	add	r3, r2
   83e20:	d90d      	bls.n	83e3e <memset+0x82>
   83e22:	461e      	mov	r6, r3
   83e24:	4622      	mov	r2, r4
   83e26:	3a04      	subs	r2, #4
   83e28:	2a03      	cmp	r2, #3
   83e2a:	f846 5b04 	str.w	r5, [r6], #4
   83e2e:	d8fa      	bhi.n	83e26 <memset+0x6a>
   83e30:	1f22      	subs	r2, r4, #4
   83e32:	f022 0203 	bic.w	r2, r2, #3
   83e36:	3204      	adds	r2, #4
   83e38:	4413      	add	r3, r2
   83e3a:	f004 0403 	and.w	r4, r4, #3
   83e3e:	b12c      	cbz	r4, 83e4c <memset+0x90>
   83e40:	b2c9      	uxtb	r1, r1
   83e42:	441c      	add	r4, r3
   83e44:	f803 1b01 	strb.w	r1, [r3], #1
   83e48:	429c      	cmp	r4, r3
   83e4a:	d1fb      	bne.n	83e44 <memset+0x88>
   83e4c:	bc70      	pop	{r4, r5, r6}
   83e4e:	4770      	bx	lr
   83e50:	4614      	mov	r4, r2
   83e52:	4603      	mov	r3, r0
   83e54:	e7c2      	b.n	83ddc <memset+0x20>
   83e56:	bf00      	nop

00083e58 <sprintf>:
   83e58:	b40e      	push	{r1, r2, r3}
   83e5a:	4601      	mov	r1, r0
   83e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   83e5e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   83e62:	f44f 7702 	mov.w	r7, #520	; 0x208
   83e66:	f64f 76ff 	movw	r6, #65535	; 0xffff
   83e6a:	b09c      	sub	sp, #112	; 0x70
   83e6c:	ac21      	add	r4, sp, #132	; 0x84
   83e6e:	f854 2b04 	ldr.w	r2, [r4], #4
   83e72:	4b0b      	ldr	r3, [pc, #44]	; (83ea0 <sprintf+0x48>)
   83e74:	9102      	str	r1, [sp, #8]
   83e76:	9106      	str	r1, [sp, #24]
   83e78:	6818      	ldr	r0, [r3, #0]
   83e7a:	a902      	add	r1, sp, #8
   83e7c:	4623      	mov	r3, r4
   83e7e:	9401      	str	r4, [sp, #4]
   83e80:	f8ad 7014 	strh.w	r7, [sp, #20]
   83e84:	9504      	str	r5, [sp, #16]
   83e86:	9507      	str	r5, [sp, #28]
   83e88:	f8ad 6016 	strh.w	r6, [sp, #22]
   83e8c:	f000 f838 	bl	83f00 <_svfprintf_r>
   83e90:	2200      	movs	r2, #0
   83e92:	9b02      	ldr	r3, [sp, #8]
   83e94:	701a      	strb	r2, [r3, #0]
   83e96:	b01c      	add	sp, #112	; 0x70
   83e98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   83e9c:	b003      	add	sp, #12
   83e9e:	4770      	bx	lr
   83ea0:	200701a0 	.word	0x200701a0

00083ea4 <strlen>:
   83ea4:	f020 0103 	bic.w	r1, r0, #3
   83ea8:	f010 0003 	ands.w	r0, r0, #3
   83eac:	f1c0 0000 	rsb	r0, r0, #0
   83eb0:	f851 3b04 	ldr.w	r3, [r1], #4
   83eb4:	f100 0c04 	add.w	ip, r0, #4
   83eb8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83ebc:	f06f 0200 	mvn.w	r2, #0
   83ec0:	bf1c      	itt	ne
   83ec2:	fa22 f20c 	lsrne.w	r2, r2, ip
   83ec6:	4313      	orrne	r3, r2
   83ec8:	f04f 0c01 	mov.w	ip, #1
   83ecc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83ed0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83ed4:	eba3 020c 	sub.w	r2, r3, ip
   83ed8:	ea22 0203 	bic.w	r2, r2, r3
   83edc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83ee0:	bf04      	itt	eq
   83ee2:	f851 3b04 	ldreq.w	r3, [r1], #4
   83ee6:	3004      	addeq	r0, #4
   83ee8:	d0f4      	beq.n	83ed4 <strlen+0x30>
   83eea:	f1c2 0100 	rsb	r1, r2, #0
   83eee:	ea02 0201 	and.w	r2, r2, r1
   83ef2:	fab2 f282 	clz	r2, r2
   83ef6:	f1c2 021f 	rsb	r2, r2, #31
   83efa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83efe:	4770      	bx	lr

00083f00 <_svfprintf_r>:
   83f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83f04:	b0c3      	sub	sp, #268	; 0x10c
   83f06:	460c      	mov	r4, r1
   83f08:	910b      	str	r1, [sp, #44]	; 0x2c
   83f0a:	4692      	mov	sl, r2
   83f0c:	930f      	str	r3, [sp, #60]	; 0x3c
   83f0e:	900c      	str	r0, [sp, #48]	; 0x30
   83f10:	f002 fa56 	bl	863c0 <_localeconv_r>
   83f14:	6803      	ldr	r3, [r0, #0]
   83f16:	4618      	mov	r0, r3
   83f18:	931a      	str	r3, [sp, #104]	; 0x68
   83f1a:	f7ff ffc3 	bl	83ea4 <strlen>
   83f1e:	89a3      	ldrh	r3, [r4, #12]
   83f20:	9019      	str	r0, [sp, #100]	; 0x64
   83f22:	0619      	lsls	r1, r3, #24
   83f24:	d503      	bpl.n	83f2e <_svfprintf_r+0x2e>
   83f26:	6923      	ldr	r3, [r4, #16]
   83f28:	2b00      	cmp	r3, #0
   83f2a:	f001 8035 	beq.w	84f98 <_svfprintf_r+0x1098>
   83f2e:	2300      	movs	r3, #0
   83f30:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   83f34:	46c8      	mov	r8, r9
   83f36:	9315      	str	r3, [sp, #84]	; 0x54
   83f38:	9313      	str	r3, [sp, #76]	; 0x4c
   83f3a:	9314      	str	r3, [sp, #80]	; 0x50
   83f3c:	9318      	str	r3, [sp, #96]	; 0x60
   83f3e:	931b      	str	r3, [sp, #108]	; 0x6c
   83f40:	9309      	str	r3, [sp, #36]	; 0x24
   83f42:	9316      	str	r3, [sp, #88]	; 0x58
   83f44:	9317      	str	r3, [sp, #92]	; 0x5c
   83f46:	9327      	str	r3, [sp, #156]	; 0x9c
   83f48:	9326      	str	r3, [sp, #152]	; 0x98
   83f4a:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   83f4e:	f89a 3000 	ldrb.w	r3, [sl]
   83f52:	4654      	mov	r4, sl
   83f54:	b1eb      	cbz	r3, 83f92 <_svfprintf_r+0x92>
   83f56:	2b25      	cmp	r3, #37	; 0x25
   83f58:	d102      	bne.n	83f60 <_svfprintf_r+0x60>
   83f5a:	e01a      	b.n	83f92 <_svfprintf_r+0x92>
   83f5c:	2b25      	cmp	r3, #37	; 0x25
   83f5e:	d003      	beq.n	83f68 <_svfprintf_r+0x68>
   83f60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   83f64:	2b00      	cmp	r3, #0
   83f66:	d1f9      	bne.n	83f5c <_svfprintf_r+0x5c>
   83f68:	eba4 050a 	sub.w	r5, r4, sl
   83f6c:	b18d      	cbz	r5, 83f92 <_svfprintf_r+0x92>
   83f6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83f70:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83f72:	3301      	adds	r3, #1
   83f74:	442a      	add	r2, r5
   83f76:	2b07      	cmp	r3, #7
   83f78:	f8c8 a000 	str.w	sl, [r8]
   83f7c:	f8c8 5004 	str.w	r5, [r8, #4]
   83f80:	9227      	str	r2, [sp, #156]	; 0x9c
   83f82:	9326      	str	r3, [sp, #152]	; 0x98
   83f84:	f300 808a 	bgt.w	8409c <_svfprintf_r+0x19c>
   83f88:	f108 0808 	add.w	r8, r8, #8
   83f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83f8e:	442b      	add	r3, r5
   83f90:	9309      	str	r3, [sp, #36]	; 0x24
   83f92:	7823      	ldrb	r3, [r4, #0]
   83f94:	2b00      	cmp	r3, #0
   83f96:	f000 8089 	beq.w	840ac <_svfprintf_r+0x1ac>
   83f9a:	2300      	movs	r3, #0
   83f9c:	f04f 30ff 	mov.w	r0, #4294967295
   83fa0:	461a      	mov	r2, r3
   83fa2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   83fa6:	4619      	mov	r1, r3
   83fa8:	930d      	str	r3, [sp, #52]	; 0x34
   83faa:	469b      	mov	fp, r3
   83fac:	7863      	ldrb	r3, [r4, #1]
   83fae:	f104 0a01 	add.w	sl, r4, #1
   83fb2:	900a      	str	r0, [sp, #40]	; 0x28
   83fb4:	f10a 0a01 	add.w	sl, sl, #1
   83fb8:	f1a3 0020 	sub.w	r0, r3, #32
   83fbc:	2858      	cmp	r0, #88	; 0x58
   83fbe:	f200 83b7 	bhi.w	84730 <_svfprintf_r+0x830>
   83fc2:	e8df f010 	tbh	[pc, r0, lsl #1]
   83fc6:	034c      	.short	0x034c
   83fc8:	03b503b5 	.word	0x03b503b5
   83fcc:	03b50354 	.word	0x03b50354
   83fd0:	03b503b5 	.word	0x03b503b5
   83fd4:	03b503b5 	.word	0x03b503b5
   83fd8:	005903b5 	.word	0x005903b5
   83fdc:	03b50359 	.word	0x03b50359
   83fe0:	02140066 	.word	0x02140066
   83fe4:	022f03b5 	.word	0x022f03b5
   83fe8:	03a503a5 	.word	0x03a503a5
   83fec:	03a503a5 	.word	0x03a503a5
   83ff0:	03a503a5 	.word	0x03a503a5
   83ff4:	03a503a5 	.word	0x03a503a5
   83ff8:	03b503a5 	.word	0x03b503a5
   83ffc:	03b503b5 	.word	0x03b503b5
   84000:	03b503b5 	.word	0x03b503b5
   84004:	03b503b5 	.word	0x03b503b5
   84008:	03b503b5 	.word	0x03b503b5
   8400c:	028b03b5 	.word	0x028b03b5
   84010:	03b502d3 	.word	0x03b502d3
   84014:	03b502d3 	.word	0x03b502d3
   84018:	03b503b5 	.word	0x03b503b5
   8401c:	031b03b5 	.word	0x031b03b5
   84020:	03b503b5 	.word	0x03b503b5
   84024:	03b50320 	.word	0x03b50320
   84028:	03b503b5 	.word	0x03b503b5
   8402c:	03b503b5 	.word	0x03b503b5
   84030:	03b50234 	.word	0x03b50234
   84034:	024b03b5 	.word	0x024b03b5
   84038:	03b503b5 	.word	0x03b503b5
   8403c:	03b503b5 	.word	0x03b503b5
   84040:	03b503b5 	.word	0x03b503b5
   84044:	03b503b5 	.word	0x03b503b5
   84048:	03b503b5 	.word	0x03b503b5
   8404c:	039e0276 	.word	0x039e0276
   84050:	02d302d3 	.word	0x02d302d3
   84054:	036302d3 	.word	0x036302d3
   84058:	03b5039e 	.word	0x03b5039e
   8405c:	036803b5 	.word	0x036803b5
   84060:	037503b5 	.word	0x037503b5
   84064:	038c01dd 	.word	0x038c01dd
   84068:	03b5035e 	.word	0x03b5035e
   8406c:	03b501f2 	.word	0x03b501f2
   84070:	03b50087 	.word	0x03b50087
   84074:	033203b5 	.word	0x033203b5
   84078:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8407a:	6823      	ldr	r3, [r4, #0]
   8407c:	4618      	mov	r0, r3
   8407e:	930d      	str	r3, [sp, #52]	; 0x34
   84080:	4623      	mov	r3, r4
   84082:	2800      	cmp	r0, #0
   84084:	f103 0304 	add.w	r3, r3, #4
   84088:	930f      	str	r3, [sp, #60]	; 0x3c
   8408a:	da04      	bge.n	84096 <_svfprintf_r+0x196>
   8408c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8408e:	425b      	negs	r3, r3
   84090:	930d      	str	r3, [sp, #52]	; 0x34
   84092:	f04b 0b04 	orr.w	fp, fp, #4
   84096:	f89a 3000 	ldrb.w	r3, [sl]
   8409a:	e78b      	b.n	83fb4 <_svfprintf_r+0xb4>
   8409c:	aa25      	add	r2, sp, #148	; 0x94
   8409e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   840a0:	980c      	ldr	r0, [sp, #48]	; 0x30
   840a2:	f003 f817 	bl	870d4 <__ssprint_r>
   840a6:	b940      	cbnz	r0, 840ba <_svfprintf_r+0x1ba>
   840a8:	46c8      	mov	r8, r9
   840aa:	e76f      	b.n	83f8c <_svfprintf_r+0x8c>
   840ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   840ae:	b123      	cbz	r3, 840ba <_svfprintf_r+0x1ba>
   840b0:	980c      	ldr	r0, [sp, #48]	; 0x30
   840b2:	aa25      	add	r2, sp, #148	; 0x94
   840b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   840b6:	f003 f80d 	bl	870d4 <__ssprint_r>
   840ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   840bc:	899b      	ldrh	r3, [r3, #12]
   840be:	f013 0f40 	tst.w	r3, #64	; 0x40
   840c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   840c4:	bf18      	it	ne
   840c6:	f04f 33ff 	movne.w	r3, #4294967295
   840ca:	9309      	str	r3, [sp, #36]	; 0x24
   840cc:	9809      	ldr	r0, [sp, #36]	; 0x24
   840ce:	b043      	add	sp, #268	; 0x10c
   840d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   840d4:	f01b 0f20 	tst.w	fp, #32
   840d8:	9311      	str	r3, [sp, #68]	; 0x44
   840da:	f040 81af 	bne.w	8443c <_svfprintf_r+0x53c>
   840de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   840e0:	f01b 0f10 	tst.w	fp, #16
   840e4:	4613      	mov	r3, r2
   840e6:	f040 859a 	bne.w	84c1e <_svfprintf_r+0xd1e>
   840ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
   840ee:	f000 8596 	beq.w	84c1e <_svfprintf_r+0xd1e>
   840f2:	2500      	movs	r5, #0
   840f4:	2301      	movs	r3, #1
   840f6:	8814      	ldrh	r4, [r2, #0]
   840f8:	3204      	adds	r2, #4
   840fa:	920f      	str	r2, [sp, #60]	; 0x3c
   840fc:	2200      	movs	r2, #0
   840fe:	4617      	mov	r7, r2
   84100:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   84104:	990a      	ldr	r1, [sp, #40]	; 0x28
   84106:	1c4a      	adds	r2, r1, #1
   84108:	f000 8210 	beq.w	8452c <_svfprintf_r+0x62c>
   8410c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   84110:	9207      	str	r2, [sp, #28]
   84112:	ea54 0205 	orrs.w	r2, r4, r5
   84116:	f040 820f 	bne.w	84538 <_svfprintf_r+0x638>
   8411a:	2900      	cmp	r1, #0
   8411c:	f040 8431 	bne.w	84982 <_svfprintf_r+0xa82>
   84120:	2b00      	cmp	r3, #0
   84122:	f040 8539 	bne.w	84b98 <_svfprintf_r+0xc98>
   84126:	f01b 0301 	ands.w	r3, fp, #1
   8412a:	930e      	str	r3, [sp, #56]	; 0x38
   8412c:	f000 8662 	beq.w	84df4 <_svfprintf_r+0xef4>
   84130:	2330      	movs	r3, #48	; 0x30
   84132:	ae42      	add	r6, sp, #264	; 0x108
   84134:	f806 3d41 	strb.w	r3, [r6, #-65]!
   84138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8413a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8413c:	4293      	cmp	r3, r2
   8413e:	bfb8      	it	lt
   84140:	4613      	movlt	r3, r2
   84142:	9308      	str	r3, [sp, #32]
   84144:	2300      	movs	r3, #0
   84146:	9312      	str	r3, [sp, #72]	; 0x48
   84148:	b117      	cbz	r7, 84150 <_svfprintf_r+0x250>
   8414a:	9b08      	ldr	r3, [sp, #32]
   8414c:	3301      	adds	r3, #1
   8414e:	9308      	str	r3, [sp, #32]
   84150:	9b07      	ldr	r3, [sp, #28]
   84152:	f013 0302 	ands.w	r3, r3, #2
   84156:	9310      	str	r3, [sp, #64]	; 0x40
   84158:	d002      	beq.n	84160 <_svfprintf_r+0x260>
   8415a:	9b08      	ldr	r3, [sp, #32]
   8415c:	3302      	adds	r3, #2
   8415e:	9308      	str	r3, [sp, #32]
   84160:	9b07      	ldr	r3, [sp, #28]
   84162:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   84166:	f040 8310 	bne.w	8478a <_svfprintf_r+0x88a>
   8416a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8416c:	9a08      	ldr	r2, [sp, #32]
   8416e:	eba3 0b02 	sub.w	fp, r3, r2
   84172:	f1bb 0f00 	cmp.w	fp, #0
   84176:	f340 8308 	ble.w	8478a <_svfprintf_r+0x88a>
   8417a:	f1bb 0f10 	cmp.w	fp, #16
   8417e:	f340 87b2 	ble.w	850e6 <_svfprintf_r+0x11e6>
   84182:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84184:	4643      	mov	r3, r8
   84186:	4621      	mov	r1, r4
   84188:	46a8      	mov	r8, r5
   8418a:	2710      	movs	r7, #16
   8418c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8418e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84190:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84192:	e006      	b.n	841a2 <_svfprintf_r+0x2a2>
   84194:	f1ab 0b10 	sub.w	fp, fp, #16
   84198:	f1bb 0f10 	cmp.w	fp, #16
   8419c:	f103 0308 	add.w	r3, r3, #8
   841a0:	dd18      	ble.n	841d4 <_svfprintf_r+0x2d4>
   841a2:	3201      	adds	r2, #1
   841a4:	48ab      	ldr	r0, [pc, #684]	; (84454 <_svfprintf_r+0x554>)
   841a6:	3110      	adds	r1, #16
   841a8:	2a07      	cmp	r2, #7
   841aa:	9127      	str	r1, [sp, #156]	; 0x9c
   841ac:	9226      	str	r2, [sp, #152]	; 0x98
   841ae:	e883 0081 	stmia.w	r3, {r0, r7}
   841b2:	ddef      	ble.n	84194 <_svfprintf_r+0x294>
   841b4:	aa25      	add	r2, sp, #148	; 0x94
   841b6:	4629      	mov	r1, r5
   841b8:	4620      	mov	r0, r4
   841ba:	f002 ff8b 	bl	870d4 <__ssprint_r>
   841be:	2800      	cmp	r0, #0
   841c0:	f47f af7b 	bne.w	840ba <_svfprintf_r+0x1ba>
   841c4:	f1ab 0b10 	sub.w	fp, fp, #16
   841c8:	f1bb 0f10 	cmp.w	fp, #16
   841cc:	464b      	mov	r3, r9
   841ce:	9927      	ldr	r1, [sp, #156]	; 0x9c
   841d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   841d2:	dce6      	bgt.n	841a2 <_svfprintf_r+0x2a2>
   841d4:	4645      	mov	r5, r8
   841d6:	460c      	mov	r4, r1
   841d8:	4698      	mov	r8, r3
   841da:	3201      	adds	r2, #1
   841dc:	4b9d      	ldr	r3, [pc, #628]	; (84454 <_svfprintf_r+0x554>)
   841de:	445c      	add	r4, fp
   841e0:	2a07      	cmp	r2, #7
   841e2:	9427      	str	r4, [sp, #156]	; 0x9c
   841e4:	9226      	str	r2, [sp, #152]	; 0x98
   841e6:	e888 0808 	stmia.w	r8, {r3, fp}
   841ea:	f300 82c3 	bgt.w	84774 <_svfprintf_r+0x874>
   841ee:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   841f2:	f108 0808 	add.w	r8, r8, #8
   841f6:	b187      	cbz	r7, 8421a <_svfprintf_r+0x31a>
   841f8:	2101      	movs	r1, #1
   841fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   841fc:	440c      	add	r4, r1
   841fe:	440b      	add	r3, r1
   84200:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   84204:	2b07      	cmp	r3, #7
   84206:	9427      	str	r4, [sp, #156]	; 0x9c
   84208:	9326      	str	r3, [sp, #152]	; 0x98
   8420a:	f8c8 1004 	str.w	r1, [r8, #4]
   8420e:	f8c8 2000 	str.w	r2, [r8]
   84212:	f300 83cd 	bgt.w	849b0 <_svfprintf_r+0xab0>
   84216:	f108 0808 	add.w	r8, r8, #8
   8421a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8421c:	b17b      	cbz	r3, 8423e <_svfprintf_r+0x33e>
   8421e:	2102      	movs	r1, #2
   84220:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84222:	440c      	add	r4, r1
   84224:	3301      	adds	r3, #1
   84226:	aa1e      	add	r2, sp, #120	; 0x78
   84228:	2b07      	cmp	r3, #7
   8422a:	9427      	str	r4, [sp, #156]	; 0x9c
   8422c:	9326      	str	r3, [sp, #152]	; 0x98
   8422e:	f8c8 1004 	str.w	r1, [r8, #4]
   84232:	f8c8 2000 	str.w	r2, [r8]
   84236:	f300 8411 	bgt.w	84a5c <_svfprintf_r+0xb5c>
   8423a:	f108 0808 	add.w	r8, r8, #8
   8423e:	2d80      	cmp	r5, #128	; 0x80
   84240:	f000 8304 	beq.w	8484c <_svfprintf_r+0x94c>
   84244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   84248:	1a9f      	subs	r7, r3, r2
   8424a:	2f00      	cmp	r7, #0
   8424c:	dd37      	ble.n	842be <_svfprintf_r+0x3be>
   8424e:	2f10      	cmp	r7, #16
   84250:	f340 8679 	ble.w	84f46 <_svfprintf_r+0x1046>
   84254:	4d80      	ldr	r5, [pc, #512]	; (84458 <_svfprintf_r+0x558>)
   84256:	4642      	mov	r2, r8
   84258:	4621      	mov	r1, r4
   8425a:	46b0      	mov	r8, r6
   8425c:	f04f 0b10 	mov.w	fp, #16
   84260:	462e      	mov	r6, r5
   84262:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84264:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84266:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84268:	e004      	b.n	84274 <_svfprintf_r+0x374>
   8426a:	3f10      	subs	r7, #16
   8426c:	2f10      	cmp	r7, #16
   8426e:	f102 0208 	add.w	r2, r2, #8
   84272:	dd15      	ble.n	842a0 <_svfprintf_r+0x3a0>
   84274:	3301      	adds	r3, #1
   84276:	3110      	adds	r1, #16
   84278:	2b07      	cmp	r3, #7
   8427a:	9127      	str	r1, [sp, #156]	; 0x9c
   8427c:	9326      	str	r3, [sp, #152]	; 0x98
   8427e:	e882 0840 	stmia.w	r2, {r6, fp}
   84282:	ddf2      	ble.n	8426a <_svfprintf_r+0x36a>
   84284:	aa25      	add	r2, sp, #148	; 0x94
   84286:	4629      	mov	r1, r5
   84288:	4620      	mov	r0, r4
   8428a:	f002 ff23 	bl	870d4 <__ssprint_r>
   8428e:	2800      	cmp	r0, #0
   84290:	f47f af13 	bne.w	840ba <_svfprintf_r+0x1ba>
   84294:	3f10      	subs	r7, #16
   84296:	2f10      	cmp	r7, #16
   84298:	464a      	mov	r2, r9
   8429a:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8429c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8429e:	dce9      	bgt.n	84274 <_svfprintf_r+0x374>
   842a0:	4635      	mov	r5, r6
   842a2:	460c      	mov	r4, r1
   842a4:	4646      	mov	r6, r8
   842a6:	4690      	mov	r8, r2
   842a8:	3301      	adds	r3, #1
   842aa:	443c      	add	r4, r7
   842ac:	2b07      	cmp	r3, #7
   842ae:	9427      	str	r4, [sp, #156]	; 0x9c
   842b0:	9326      	str	r3, [sp, #152]	; 0x98
   842b2:	e888 00a0 	stmia.w	r8, {r5, r7}
   842b6:	f300 8370 	bgt.w	8499a <_svfprintf_r+0xa9a>
   842ba:	f108 0808 	add.w	r8, r8, #8
   842be:	9b07      	ldr	r3, [sp, #28]
   842c0:	05df      	lsls	r7, r3, #23
   842c2:	f100 8264 	bmi.w	8478e <_svfprintf_r+0x88e>
   842c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   842c8:	990e      	ldr	r1, [sp, #56]	; 0x38
   842ca:	3301      	adds	r3, #1
   842cc:	440c      	add	r4, r1
   842ce:	2b07      	cmp	r3, #7
   842d0:	9427      	str	r4, [sp, #156]	; 0x9c
   842d2:	f8c8 6000 	str.w	r6, [r8]
   842d6:	f8c8 1004 	str.w	r1, [r8, #4]
   842da:	9326      	str	r3, [sp, #152]	; 0x98
   842dc:	f300 83b3 	bgt.w	84a46 <_svfprintf_r+0xb46>
   842e0:	f108 0808 	add.w	r8, r8, #8
   842e4:	9b07      	ldr	r3, [sp, #28]
   842e6:	075b      	lsls	r3, r3, #29
   842e8:	d53b      	bpl.n	84362 <_svfprintf_r+0x462>
   842ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   842ec:	9a08      	ldr	r2, [sp, #32]
   842ee:	1a9d      	subs	r5, r3, r2
   842f0:	2d00      	cmp	r5, #0
   842f2:	dd36      	ble.n	84362 <_svfprintf_r+0x462>
   842f4:	2d10      	cmp	r5, #16
   842f6:	f340 8721 	ble.w	8513c <_svfprintf_r+0x123c>
   842fa:	2610      	movs	r6, #16
   842fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   842fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   84300:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   84304:	e004      	b.n	84310 <_svfprintf_r+0x410>
   84306:	3d10      	subs	r5, #16
   84308:	2d10      	cmp	r5, #16
   8430a:	f108 0808 	add.w	r8, r8, #8
   8430e:	dd16      	ble.n	8433e <_svfprintf_r+0x43e>
   84310:	3301      	adds	r3, #1
   84312:	4a50      	ldr	r2, [pc, #320]	; (84454 <_svfprintf_r+0x554>)
   84314:	3410      	adds	r4, #16
   84316:	2b07      	cmp	r3, #7
   84318:	9427      	str	r4, [sp, #156]	; 0x9c
   8431a:	9326      	str	r3, [sp, #152]	; 0x98
   8431c:	e888 0044 	stmia.w	r8, {r2, r6}
   84320:	ddf1      	ble.n	84306 <_svfprintf_r+0x406>
   84322:	aa25      	add	r2, sp, #148	; 0x94
   84324:	4659      	mov	r1, fp
   84326:	4638      	mov	r0, r7
   84328:	f002 fed4 	bl	870d4 <__ssprint_r>
   8432c:	2800      	cmp	r0, #0
   8432e:	f47f aec4 	bne.w	840ba <_svfprintf_r+0x1ba>
   84332:	3d10      	subs	r5, #16
   84334:	2d10      	cmp	r5, #16
   84336:	46c8      	mov	r8, r9
   84338:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8433a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8433c:	dce8      	bgt.n	84310 <_svfprintf_r+0x410>
   8433e:	3301      	adds	r3, #1
   84340:	4a44      	ldr	r2, [pc, #272]	; (84454 <_svfprintf_r+0x554>)
   84342:	442c      	add	r4, r5
   84344:	2b07      	cmp	r3, #7
   84346:	9427      	str	r4, [sp, #156]	; 0x9c
   84348:	9326      	str	r3, [sp, #152]	; 0x98
   8434a:	e888 0024 	stmia.w	r8, {r2, r5}
   8434e:	dd08      	ble.n	84362 <_svfprintf_r+0x462>
   84350:	aa25      	add	r2, sp, #148	; 0x94
   84352:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84354:	980c      	ldr	r0, [sp, #48]	; 0x30
   84356:	f002 febd 	bl	870d4 <__ssprint_r>
   8435a:	2800      	cmp	r0, #0
   8435c:	f47f aead 	bne.w	840ba <_svfprintf_r+0x1ba>
   84360:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84362:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84364:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84366:	9908      	ldr	r1, [sp, #32]
   84368:	428a      	cmp	r2, r1
   8436a:	bfac      	ite	ge
   8436c:	189b      	addge	r3, r3, r2
   8436e:	185b      	addlt	r3, r3, r1
   84370:	9309      	str	r3, [sp, #36]	; 0x24
   84372:	2c00      	cmp	r4, #0
   84374:	f040 82fb 	bne.w	8496e <_svfprintf_r+0xa6e>
   84378:	2300      	movs	r3, #0
   8437a:	46c8      	mov	r8, r9
   8437c:	9326      	str	r3, [sp, #152]	; 0x98
   8437e:	e5e6      	b.n	83f4e <_svfprintf_r+0x4e>
   84380:	9311      	str	r3, [sp, #68]	; 0x44
   84382:	f01b 0320 	ands.w	r3, fp, #32
   84386:	f040 8145 	bne.w	84614 <_svfprintf_r+0x714>
   8438a:	f01b 0210 	ands.w	r2, fp, #16
   8438e:	f040 8466 	bne.w	84c5e <_svfprintf_r+0xd5e>
   84392:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   84396:	f000 8462 	beq.w	84c5e <_svfprintf_r+0xd5e>
   8439a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8439c:	4613      	mov	r3, r2
   8439e:	460a      	mov	r2, r1
   843a0:	3204      	adds	r2, #4
   843a2:	880c      	ldrh	r4, [r1, #0]
   843a4:	2500      	movs	r5, #0
   843a6:	920f      	str	r2, [sp, #60]	; 0x3c
   843a8:	e6a8      	b.n	840fc <_svfprintf_r+0x1fc>
   843aa:	2500      	movs	r5, #0
   843ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   843ae:	9311      	str	r3, [sp, #68]	; 0x44
   843b0:	6816      	ldr	r6, [r2, #0]
   843b2:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   843b6:	1d14      	adds	r4, r2, #4
   843b8:	2e00      	cmp	r6, #0
   843ba:	f000 86cd 	beq.w	85158 <_svfprintf_r+0x1258>
   843be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   843c0:	1c53      	adds	r3, r2, #1
   843c2:	f000 861b 	beq.w	84ffc <_svfprintf_r+0x10fc>
   843c6:	4629      	mov	r1, r5
   843c8:	4630      	mov	r0, r6
   843ca:	f002 faad 	bl	86928 <memchr>
   843ce:	2800      	cmp	r0, #0
   843d0:	f000 870d 	beq.w	851ee <_svfprintf_r+0x12ee>
   843d4:	1b83      	subs	r3, r0, r6
   843d6:	950a      	str	r5, [sp, #40]	; 0x28
   843d8:	930e      	str	r3, [sp, #56]	; 0x38
   843da:	940f      	str	r4, [sp, #60]	; 0x3c
   843dc:	f8cd b01c 	str.w	fp, [sp, #28]
   843e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   843e4:	9308      	str	r3, [sp, #32]
   843e6:	9512      	str	r5, [sp, #72]	; 0x48
   843e8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   843ec:	e6ac      	b.n	84148 <_svfprintf_r+0x248>
   843ee:	f89a 3000 	ldrb.w	r3, [sl]
   843f2:	f10a 0401 	add.w	r4, sl, #1
   843f6:	2b2a      	cmp	r3, #42	; 0x2a
   843f8:	f000 87c2 	beq.w	85380 <_svfprintf_r+0x1480>
   843fc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84400:	2809      	cmp	r0, #9
   84402:	46a2      	mov	sl, r4
   84404:	f200 8718 	bhi.w	85238 <_svfprintf_r+0x1338>
   84408:	2300      	movs	r3, #0
   8440a:	461c      	mov	r4, r3
   8440c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   84410:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84414:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   84418:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8441c:	2809      	cmp	r0, #9
   8441e:	d9f5      	bls.n	8440c <_svfprintf_r+0x50c>
   84420:	940a      	str	r4, [sp, #40]	; 0x28
   84422:	e5c9      	b.n	83fb8 <_svfprintf_r+0xb8>
   84424:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   84428:	f89a 3000 	ldrb.w	r3, [sl]
   8442c:	e5c2      	b.n	83fb4 <_svfprintf_r+0xb4>
   8442e:	f04b 0b10 	orr.w	fp, fp, #16
   84432:	f01b 0f20 	tst.w	fp, #32
   84436:	9311      	str	r3, [sp, #68]	; 0x44
   84438:	f43f ae51 	beq.w	840de <_svfprintf_r+0x1de>
   8443c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8443e:	3407      	adds	r4, #7
   84440:	f024 0307 	bic.w	r3, r4, #7
   84444:	f103 0208 	add.w	r2, r3, #8
   84448:	e9d3 4500 	ldrd	r4, r5, [r3]
   8444c:	920f      	str	r2, [sp, #60]	; 0x3c
   8444e:	2301      	movs	r3, #1
   84450:	e654      	b.n	840fc <_svfprintf_r+0x1fc>
   84452:	bf00      	nop
   84454:	0008840c 	.word	0x0008840c
   84458:	0008841c 	.word	0x0008841c
   8445c:	9311      	str	r3, [sp, #68]	; 0x44
   8445e:	2a00      	cmp	r2, #0
   84460:	f040 87ad 	bne.w	853be <_svfprintf_r+0x14be>
   84464:	4bbe      	ldr	r3, [pc, #760]	; (84760 <_svfprintf_r+0x860>)
   84466:	f01b 0f20 	tst.w	fp, #32
   8446a:	9318      	str	r3, [sp, #96]	; 0x60
   8446c:	f040 80e7 	bne.w	8463e <_svfprintf_r+0x73e>
   84470:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84472:	f01b 0f10 	tst.w	fp, #16
   84476:	4613      	mov	r3, r2
   84478:	f040 83d8 	bne.w	84c2c <_svfprintf_r+0xd2c>
   8447c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84480:	f000 83d4 	beq.w	84c2c <_svfprintf_r+0xd2c>
   84484:	2500      	movs	r5, #0
   84486:	3304      	adds	r3, #4
   84488:	8814      	ldrh	r4, [r2, #0]
   8448a:	930f      	str	r3, [sp, #60]	; 0x3c
   8448c:	f01b 0f01 	tst.w	fp, #1
   84490:	f000 80e3 	beq.w	8465a <_svfprintf_r+0x75a>
   84494:	ea54 0305 	orrs.w	r3, r4, r5
   84498:	f000 80df 	beq.w	8465a <_svfprintf_r+0x75a>
   8449c:	2330      	movs	r3, #48	; 0x30
   8449e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   844a2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   844a6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   844aa:	f04b 0b02 	orr.w	fp, fp, #2
   844ae:	2302      	movs	r3, #2
   844b0:	e624      	b.n	840fc <_svfprintf_r+0x1fc>
   844b2:	2201      	movs	r2, #1
   844b4:	9311      	str	r3, [sp, #68]	; 0x44
   844b6:	2300      	movs	r3, #0
   844b8:	4611      	mov	r1, r2
   844ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
   844bc:	9208      	str	r2, [sp, #32]
   844be:	6802      	ldr	r2, [r0, #0]
   844c0:	461f      	mov	r7, r3
   844c2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   844c6:	930a      	str	r3, [sp, #40]	; 0x28
   844c8:	9312      	str	r3, [sp, #72]	; 0x48
   844ca:	1d03      	adds	r3, r0, #4
   844cc:	f8cd b01c 	str.w	fp, [sp, #28]
   844d0:	910e      	str	r1, [sp, #56]	; 0x38
   844d2:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   844d6:	930f      	str	r3, [sp, #60]	; 0x3c
   844d8:	ae28      	add	r6, sp, #160	; 0xa0
   844da:	e639      	b.n	84150 <_svfprintf_r+0x250>
   844dc:	9311      	str	r3, [sp, #68]	; 0x44
   844de:	2a00      	cmp	r2, #0
   844e0:	f040 8784 	bne.w	853ec <_svfprintf_r+0x14ec>
   844e4:	f04b 0b10 	orr.w	fp, fp, #16
   844e8:	f01b 0f20 	tst.w	fp, #32
   844ec:	f040 8475 	bne.w	84dda <_svfprintf_r+0xeda>
   844f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   844f2:	f01b 0f10 	tst.w	fp, #16
   844f6:	4613      	mov	r3, r2
   844f8:	f040 839d 	bne.w	84c36 <_svfprintf_r+0xd36>
   844fc:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84500:	f000 8399 	beq.w	84c36 <_svfprintf_r+0xd36>
   84504:	f9b2 4000 	ldrsh.w	r4, [r2]
   84508:	3304      	adds	r3, #4
   8450a:	17e5      	asrs	r5, r4, #31
   8450c:	930f      	str	r3, [sp, #60]	; 0x3c
   8450e:	4622      	mov	r2, r4
   84510:	462b      	mov	r3, r5
   84512:	2a00      	cmp	r2, #0
   84514:	f173 0300 	sbcs.w	r3, r3, #0
   84518:	f2c0 8398 	blt.w	84c4c <_svfprintf_r+0xd4c>
   8451c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8451e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84522:	1c4a      	adds	r2, r1, #1
   84524:	f04f 0301 	mov.w	r3, #1
   84528:	f47f adf0 	bne.w	8410c <_svfprintf_r+0x20c>
   8452c:	ea54 0205 	orrs.w	r2, r4, r5
   84530:	f000 8229 	beq.w	84986 <_svfprintf_r+0xa86>
   84534:	f8cd b01c 	str.w	fp, [sp, #28]
   84538:	2b01      	cmp	r3, #1
   8453a:	f000 830e 	beq.w	84b5a <_svfprintf_r+0xc5a>
   8453e:	2b02      	cmp	r3, #2
   84540:	f040 829c 	bne.w	84a7c <_svfprintf_r+0xb7c>
   84544:	464e      	mov	r6, r9
   84546:	9818      	ldr	r0, [sp, #96]	; 0x60
   84548:	0923      	lsrs	r3, r4, #4
   8454a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8454e:	0929      	lsrs	r1, r5, #4
   84550:	f004 020f 	and.w	r2, r4, #15
   84554:	460d      	mov	r5, r1
   84556:	461c      	mov	r4, r3
   84558:	5c83      	ldrb	r3, [r0, r2]
   8455a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8455e:	ea54 0305 	orrs.w	r3, r4, r5
   84562:	d1f1      	bne.n	84548 <_svfprintf_r+0x648>
   84564:	eba9 0306 	sub.w	r3, r9, r6
   84568:	930e      	str	r3, [sp, #56]	; 0x38
   8456a:	e5e5      	b.n	84138 <_svfprintf_r+0x238>
   8456c:	9311      	str	r3, [sp, #68]	; 0x44
   8456e:	2a00      	cmp	r2, #0
   84570:	f040 8738 	bne.w	853e4 <_svfprintf_r+0x14e4>
   84574:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84576:	f01b 0f08 	tst.w	fp, #8
   8457a:	f104 0407 	add.w	r4, r4, #7
   8457e:	f000 84cf 	beq.w	84f20 <_svfprintf_r+0x1020>
   84582:	f024 0307 	bic.w	r3, r4, #7
   84586:	f103 0208 	add.w	r2, r3, #8
   8458a:	920f      	str	r2, [sp, #60]	; 0x3c
   8458c:	681a      	ldr	r2, [r3, #0]
   8458e:	685b      	ldr	r3, [r3, #4]
   84590:	9215      	str	r2, [sp, #84]	; 0x54
   84592:	9314      	str	r3, [sp, #80]	; 0x50
   84594:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84596:	9d15      	ldr	r5, [sp, #84]	; 0x54
   84598:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   8459c:	4628      	mov	r0, r5
   8459e:	4621      	mov	r1, r4
   845a0:	f04f 32ff 	mov.w	r2, #4294967295
   845a4:	4b6f      	ldr	r3, [pc, #444]	; (84764 <_svfprintf_r+0x864>)
   845a6:	f003 fcb1 	bl	87f0c <__aeabi_dcmpun>
   845aa:	2800      	cmp	r0, #0
   845ac:	f040 8434 	bne.w	84e18 <_svfprintf_r+0xf18>
   845b0:	4628      	mov	r0, r5
   845b2:	4621      	mov	r1, r4
   845b4:	f04f 32ff 	mov.w	r2, #4294967295
   845b8:	4b6a      	ldr	r3, [pc, #424]	; (84764 <_svfprintf_r+0x864>)
   845ba:	f003 fc89 	bl	87ed0 <__aeabi_dcmple>
   845be:	2800      	cmp	r0, #0
   845c0:	f040 842a 	bne.w	84e18 <_svfprintf_r+0xf18>
   845c4:	a815      	add	r0, sp, #84	; 0x54
   845c6:	c80d      	ldmia	r0, {r0, r2, r3}
   845c8:	9914      	ldr	r1, [sp, #80]	; 0x50
   845ca:	f003 fc77 	bl	87ebc <__aeabi_dcmplt>
   845ce:	2800      	cmp	r0, #0
   845d0:	f040 85d4 	bne.w	8517c <_svfprintf_r+0x127c>
   845d4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   845d8:	2303      	movs	r3, #3
   845da:	461a      	mov	r2, r3
   845dc:	9308      	str	r3, [sp, #32]
   845de:	2300      	movs	r3, #0
   845e0:	4e61      	ldr	r6, [pc, #388]	; (84768 <_svfprintf_r+0x868>)
   845e2:	4619      	mov	r1, r3
   845e4:	930a      	str	r3, [sp, #40]	; 0x28
   845e6:	4b61      	ldr	r3, [pc, #388]	; (8476c <_svfprintf_r+0x86c>)
   845e8:	920e      	str	r2, [sp, #56]	; 0x38
   845ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
   845ec:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   845f0:	9007      	str	r0, [sp, #28]
   845f2:	9112      	str	r1, [sp, #72]	; 0x48
   845f4:	2a47      	cmp	r2, #71	; 0x47
   845f6:	bfd8      	it	le
   845f8:	461e      	movle	r6, r3
   845fa:	e5a5      	b.n	84148 <_svfprintf_r+0x248>
   845fc:	f04b 0b08 	orr.w	fp, fp, #8
   84600:	f89a 3000 	ldrb.w	r3, [sl]
   84604:	e4d6      	b.n	83fb4 <_svfprintf_r+0xb4>
   84606:	f04b 0b10 	orr.w	fp, fp, #16
   8460a:	9311      	str	r3, [sp, #68]	; 0x44
   8460c:	f01b 0320 	ands.w	r3, fp, #32
   84610:	f43f aebb 	beq.w	8438a <_svfprintf_r+0x48a>
   84614:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84616:	3407      	adds	r4, #7
   84618:	f024 0307 	bic.w	r3, r4, #7
   8461c:	f103 0208 	add.w	r2, r3, #8
   84620:	e9d3 4500 	ldrd	r4, r5, [r3]
   84624:	920f      	str	r2, [sp, #60]	; 0x3c
   84626:	2300      	movs	r3, #0
   84628:	e568      	b.n	840fc <_svfprintf_r+0x1fc>
   8462a:	9311      	str	r3, [sp, #68]	; 0x44
   8462c:	2a00      	cmp	r2, #0
   8462e:	f040 86c2 	bne.w	853b6 <_svfprintf_r+0x14b6>
   84632:	4b4f      	ldr	r3, [pc, #316]	; (84770 <_svfprintf_r+0x870>)
   84634:	f01b 0f20 	tst.w	fp, #32
   84638:	9318      	str	r3, [sp, #96]	; 0x60
   8463a:	f43f af19 	beq.w	84470 <_svfprintf_r+0x570>
   8463e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84640:	f01b 0f01 	tst.w	fp, #1
   84644:	f104 0407 	add.w	r4, r4, #7
   84648:	f024 0307 	bic.w	r3, r4, #7
   8464c:	f103 0208 	add.w	r2, r3, #8
   84650:	920f      	str	r2, [sp, #60]	; 0x3c
   84652:	e9d3 4500 	ldrd	r4, r5, [r3]
   84656:	f47f af1d 	bne.w	84494 <_svfprintf_r+0x594>
   8465a:	2302      	movs	r3, #2
   8465c:	e54e      	b.n	840fc <_svfprintf_r+0x1fc>
   8465e:	f89a 3000 	ldrb.w	r3, [sl]
   84662:	2900      	cmp	r1, #0
   84664:	f47f aca6 	bne.w	83fb4 <_svfprintf_r+0xb4>
   84668:	2201      	movs	r2, #1
   8466a:	2120      	movs	r1, #32
   8466c:	e4a2      	b.n	83fb4 <_svfprintf_r+0xb4>
   8466e:	f04b 0b01 	orr.w	fp, fp, #1
   84672:	f89a 3000 	ldrb.w	r3, [sl]
   84676:	e49d      	b.n	83fb4 <_svfprintf_r+0xb4>
   84678:	f89a 3000 	ldrb.w	r3, [sl]
   8467c:	2201      	movs	r2, #1
   8467e:	212b      	movs	r1, #43	; 0x2b
   84680:	e498      	b.n	83fb4 <_svfprintf_r+0xb4>
   84682:	f04b 0b20 	orr.w	fp, fp, #32
   84686:	f89a 3000 	ldrb.w	r3, [sl]
   8468a:	e493      	b.n	83fb4 <_svfprintf_r+0xb4>
   8468c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   84690:	f89a 3000 	ldrb.w	r3, [sl]
   84694:	e48e      	b.n	83fb4 <_svfprintf_r+0xb4>
   84696:	f89a 3000 	ldrb.w	r3, [sl]
   8469a:	2b6c      	cmp	r3, #108	; 0x6c
   8469c:	bf03      	ittte	eq
   8469e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   846a2:	f04b 0b20 	orreq.w	fp, fp, #32
   846a6:	f10a 0a01 	addeq.w	sl, sl, #1
   846aa:	f04b 0b10 	orrne.w	fp, fp, #16
   846ae:	e481      	b.n	83fb4 <_svfprintf_r+0xb4>
   846b0:	2a00      	cmp	r2, #0
   846b2:	f040 867c 	bne.w	853ae <_svfprintf_r+0x14ae>
   846b6:	f01b 0f20 	tst.w	fp, #32
   846ba:	f040 8452 	bne.w	84f62 <_svfprintf_r+0x1062>
   846be:	f01b 0f10 	tst.w	fp, #16
   846c2:	f040 8438 	bne.w	84f36 <_svfprintf_r+0x1036>
   846c6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   846ca:	f000 8434 	beq.w	84f36 <_svfprintf_r+0x1036>
   846ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   846d0:	6813      	ldr	r3, [r2, #0]
   846d2:	3204      	adds	r2, #4
   846d4:	920f      	str	r2, [sp, #60]	; 0x3c
   846d6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   846da:	801a      	strh	r2, [r3, #0]
   846dc:	e437      	b.n	83f4e <_svfprintf_r+0x4e>
   846de:	2378      	movs	r3, #120	; 0x78
   846e0:	2230      	movs	r2, #48	; 0x30
   846e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   846e4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   846e8:	9311      	str	r3, [sp, #68]	; 0x44
   846ea:	1d03      	adds	r3, r0, #4
   846ec:	930f      	str	r3, [sp, #60]	; 0x3c
   846ee:	4b20      	ldr	r3, [pc, #128]	; (84770 <_svfprintf_r+0x870>)
   846f0:	6804      	ldr	r4, [r0, #0]
   846f2:	9318      	str	r3, [sp, #96]	; 0x60
   846f4:	f04b 0b02 	orr.w	fp, fp, #2
   846f8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   846fc:	2500      	movs	r5, #0
   846fe:	2302      	movs	r3, #2
   84700:	e4fc      	b.n	840fc <_svfprintf_r+0x1fc>
   84702:	9311      	str	r3, [sp, #68]	; 0x44
   84704:	2a00      	cmp	r2, #0
   84706:	f43f aeef 	beq.w	844e8 <_svfprintf_r+0x5e8>
   8470a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8470e:	e6eb      	b.n	844e8 <_svfprintf_r+0x5e8>
   84710:	2000      	movs	r0, #0
   84712:	4604      	mov	r4, r0
   84714:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84718:	f81a 3b01 	ldrb.w	r3, [sl], #1
   8471c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84720:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   84724:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84728:	2809      	cmp	r0, #9
   8472a:	d9f5      	bls.n	84718 <_svfprintf_r+0x818>
   8472c:	940d      	str	r4, [sp, #52]	; 0x34
   8472e:	e443      	b.n	83fb8 <_svfprintf_r+0xb8>
   84730:	9311      	str	r3, [sp, #68]	; 0x44
   84732:	2a00      	cmp	r2, #0
   84734:	f040 864a 	bne.w	853cc <_svfprintf_r+0x14cc>
   84738:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8473a:	2a00      	cmp	r2, #0
   8473c:	f43f acb6 	beq.w	840ac <_svfprintf_r+0x1ac>
   84740:	2300      	movs	r3, #0
   84742:	2101      	movs	r1, #1
   84744:	461f      	mov	r7, r3
   84746:	9108      	str	r1, [sp, #32]
   84748:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   8474c:	f8cd b01c 	str.w	fp, [sp, #28]
   84750:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84754:	930a      	str	r3, [sp, #40]	; 0x28
   84756:	9312      	str	r3, [sp, #72]	; 0x48
   84758:	910e      	str	r1, [sp, #56]	; 0x38
   8475a:	ae28      	add	r6, sp, #160	; 0xa0
   8475c:	e4f8      	b.n	84150 <_svfprintf_r+0x250>
   8475e:	bf00      	nop
   84760:	000883d8 	.word	0x000883d8
   84764:	7fefffff 	.word	0x7fefffff
   84768:	000883cc 	.word	0x000883cc
   8476c:	000883c8 	.word	0x000883c8
   84770:	000883ec 	.word	0x000883ec
   84774:	aa25      	add	r2, sp, #148	; 0x94
   84776:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84778:	980c      	ldr	r0, [sp, #48]	; 0x30
   8477a:	f002 fcab 	bl	870d4 <__ssprint_r>
   8477e:	2800      	cmp	r0, #0
   84780:	f47f ac9b 	bne.w	840ba <_svfprintf_r+0x1ba>
   84784:	46c8      	mov	r8, r9
   84786:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8478a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8478c:	e533      	b.n	841f6 <_svfprintf_r+0x2f6>
   8478e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84790:	2b65      	cmp	r3, #101	; 0x65
   84792:	f340 809a 	ble.w	848ca <_svfprintf_r+0x9ca>
   84796:	a815      	add	r0, sp, #84	; 0x54
   84798:	c80d      	ldmia	r0, {r0, r2, r3}
   8479a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8479c:	f003 fb84 	bl	87ea8 <__aeabi_dcmpeq>
   847a0:	2800      	cmp	r0, #0
   847a2:	f000 8193 	beq.w	84acc <_svfprintf_r+0xbcc>
   847a6:	2101      	movs	r1, #1
   847a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   847aa:	4ab5      	ldr	r2, [pc, #724]	; (84a80 <_svfprintf_r+0xb80>)
   847ac:	440b      	add	r3, r1
   847ae:	440c      	add	r4, r1
   847b0:	2b07      	cmp	r3, #7
   847b2:	9427      	str	r4, [sp, #156]	; 0x9c
   847b4:	9326      	str	r3, [sp, #152]	; 0x98
   847b6:	f8c8 1004 	str.w	r1, [r8, #4]
   847ba:	f8c8 2000 	str.w	r2, [r8]
   847be:	f300 83c6 	bgt.w	84f4e <_svfprintf_r+0x104e>
   847c2:	f108 0808 	add.w	r8, r8, #8
   847c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   847c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   847ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   847cc:	4293      	cmp	r3, r2
   847ce:	db03      	blt.n	847d8 <_svfprintf_r+0x8d8>
   847d0:	9b07      	ldr	r3, [sp, #28]
   847d2:	07dd      	lsls	r5, r3, #31
   847d4:	f57f ad86 	bpl.w	842e4 <_svfprintf_r+0x3e4>
   847d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   847da:	9919      	ldr	r1, [sp, #100]	; 0x64
   847dc:	3301      	adds	r3, #1
   847de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   847e0:	440c      	add	r4, r1
   847e2:	2b07      	cmp	r3, #7
   847e4:	f8c8 2000 	str.w	r2, [r8]
   847e8:	f8c8 1004 	str.w	r1, [r8, #4]
   847ec:	9427      	str	r4, [sp, #156]	; 0x9c
   847ee:	9326      	str	r3, [sp, #152]	; 0x98
   847f0:	f300 83c4 	bgt.w	84f7c <_svfprintf_r+0x107c>
   847f4:	f108 0808 	add.w	r8, r8, #8
   847f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   847fa:	1e5e      	subs	r6, r3, #1
   847fc:	2e00      	cmp	r6, #0
   847fe:	f77f ad71 	ble.w	842e4 <_svfprintf_r+0x3e4>
   84802:	2e10      	cmp	r6, #16
   84804:	f340 8575 	ble.w	852f2 <_svfprintf_r+0x13f2>
   84808:	4622      	mov	r2, r4
   8480a:	2710      	movs	r7, #16
   8480c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8480e:	4d9d      	ldr	r5, [pc, #628]	; (84a84 <_svfprintf_r+0xb84>)
   84810:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   84814:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84816:	e005      	b.n	84824 <_svfprintf_r+0x924>
   84818:	f108 0808 	add.w	r8, r8, #8
   8481c:	3e10      	subs	r6, #16
   8481e:	2e10      	cmp	r6, #16
   84820:	f340 8225 	ble.w	84c6e <_svfprintf_r+0xd6e>
   84824:	3301      	adds	r3, #1
   84826:	3210      	adds	r2, #16
   84828:	2b07      	cmp	r3, #7
   8482a:	9227      	str	r2, [sp, #156]	; 0x9c
   8482c:	9326      	str	r3, [sp, #152]	; 0x98
   8482e:	e888 00a0 	stmia.w	r8, {r5, r7}
   84832:	ddf1      	ble.n	84818 <_svfprintf_r+0x918>
   84834:	aa25      	add	r2, sp, #148	; 0x94
   84836:	4621      	mov	r1, r4
   84838:	4658      	mov	r0, fp
   8483a:	f002 fc4b 	bl	870d4 <__ssprint_r>
   8483e:	2800      	cmp	r0, #0
   84840:	f47f ac3b 	bne.w	840ba <_svfprintf_r+0x1ba>
   84844:	46c8      	mov	r8, r9
   84846:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84848:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8484a:	e7e7      	b.n	8481c <_svfprintf_r+0x91c>
   8484c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8484e:	9a08      	ldr	r2, [sp, #32]
   84850:	1a9f      	subs	r7, r3, r2
   84852:	2f00      	cmp	r7, #0
   84854:	f77f acf6 	ble.w	84244 <_svfprintf_r+0x344>
   84858:	2f10      	cmp	r7, #16
   8485a:	f340 84a8 	ble.w	851ae <_svfprintf_r+0x12ae>
   8485e:	4d89      	ldr	r5, [pc, #548]	; (84a84 <_svfprintf_r+0xb84>)
   84860:	4642      	mov	r2, r8
   84862:	4621      	mov	r1, r4
   84864:	46b0      	mov	r8, r6
   84866:	f04f 0b10 	mov.w	fp, #16
   8486a:	462e      	mov	r6, r5
   8486c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8486e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84870:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84872:	e004      	b.n	8487e <_svfprintf_r+0x97e>
   84874:	3f10      	subs	r7, #16
   84876:	2f10      	cmp	r7, #16
   84878:	f102 0208 	add.w	r2, r2, #8
   8487c:	dd15      	ble.n	848aa <_svfprintf_r+0x9aa>
   8487e:	3301      	adds	r3, #1
   84880:	3110      	adds	r1, #16
   84882:	2b07      	cmp	r3, #7
   84884:	9127      	str	r1, [sp, #156]	; 0x9c
   84886:	9326      	str	r3, [sp, #152]	; 0x98
   84888:	e882 0840 	stmia.w	r2, {r6, fp}
   8488c:	ddf2      	ble.n	84874 <_svfprintf_r+0x974>
   8488e:	aa25      	add	r2, sp, #148	; 0x94
   84890:	4629      	mov	r1, r5
   84892:	4620      	mov	r0, r4
   84894:	f002 fc1e 	bl	870d4 <__ssprint_r>
   84898:	2800      	cmp	r0, #0
   8489a:	f47f ac0e 	bne.w	840ba <_svfprintf_r+0x1ba>
   8489e:	3f10      	subs	r7, #16
   848a0:	2f10      	cmp	r7, #16
   848a2:	464a      	mov	r2, r9
   848a4:	9927      	ldr	r1, [sp, #156]	; 0x9c
   848a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   848a8:	dce9      	bgt.n	8487e <_svfprintf_r+0x97e>
   848aa:	4635      	mov	r5, r6
   848ac:	460c      	mov	r4, r1
   848ae:	4646      	mov	r6, r8
   848b0:	4690      	mov	r8, r2
   848b2:	3301      	adds	r3, #1
   848b4:	443c      	add	r4, r7
   848b6:	2b07      	cmp	r3, #7
   848b8:	9427      	str	r4, [sp, #156]	; 0x9c
   848ba:	9326      	str	r3, [sp, #152]	; 0x98
   848bc:	e888 00a0 	stmia.w	r8, {r5, r7}
   848c0:	f300 829e 	bgt.w	84e00 <_svfprintf_r+0xf00>
   848c4:	f108 0808 	add.w	r8, r8, #8
   848c8:	e4bc      	b.n	84244 <_svfprintf_r+0x344>
   848ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   848cc:	2b01      	cmp	r3, #1
   848ce:	f340 824f 	ble.w	84d70 <_svfprintf_r+0xe70>
   848d2:	2301      	movs	r3, #1
   848d4:	9f26      	ldr	r7, [sp, #152]	; 0x98
   848d6:	441c      	add	r4, r3
   848d8:	441f      	add	r7, r3
   848da:	2f07      	cmp	r7, #7
   848dc:	9427      	str	r4, [sp, #156]	; 0x9c
   848de:	f8c8 6000 	str.w	r6, [r8]
   848e2:	9726      	str	r7, [sp, #152]	; 0x98
   848e4:	f8c8 3004 	str.w	r3, [r8, #4]
   848e8:	f300 825f 	bgt.w	84daa <_svfprintf_r+0xeaa>
   848ec:	f108 0808 	add.w	r8, r8, #8
   848f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   848f2:	3701      	adds	r7, #1
   848f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   848f6:	4414      	add	r4, r2
   848f8:	2f07      	cmp	r7, #7
   848fa:	9427      	str	r4, [sp, #156]	; 0x9c
   848fc:	9726      	str	r7, [sp, #152]	; 0x98
   848fe:	f8c8 3000 	str.w	r3, [r8]
   84902:	f8c8 2004 	str.w	r2, [r8, #4]
   84906:	f300 825c 	bgt.w	84dc2 <_svfprintf_r+0xec2>
   8490a:	f108 0808 	add.w	r8, r8, #8
   8490e:	a815      	add	r0, sp, #84	; 0x54
   84910:	c80d      	ldmia	r0, {r0, r2, r3}
   84912:	9914      	ldr	r1, [sp, #80]	; 0x50
   84914:	f003 fac8 	bl	87ea8 <__aeabi_dcmpeq>
   84918:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8491a:	2800      	cmp	r0, #0
   8491c:	f040 8141 	bne.w	84ba2 <_svfprintf_r+0xca2>
   84920:	3b01      	subs	r3, #1
   84922:	3701      	adds	r7, #1
   84924:	3601      	adds	r6, #1
   84926:	441c      	add	r4, r3
   84928:	2f07      	cmp	r7, #7
   8492a:	f8c8 6000 	str.w	r6, [r8]
   8492e:	9726      	str	r7, [sp, #152]	; 0x98
   84930:	9427      	str	r4, [sp, #156]	; 0x9c
   84932:	f8c8 3004 	str.w	r3, [r8, #4]
   84936:	f300 8166 	bgt.w	84c06 <_svfprintf_r+0xd06>
   8493a:	f108 0808 	add.w	r8, r8, #8
   8493e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   84940:	3701      	adds	r7, #1
   84942:	4414      	add	r4, r2
   84944:	ab21      	add	r3, sp, #132	; 0x84
   84946:	2f07      	cmp	r7, #7
   84948:	9427      	str	r4, [sp, #156]	; 0x9c
   8494a:	9726      	str	r7, [sp, #152]	; 0x98
   8494c:	f8c8 2004 	str.w	r2, [r8, #4]
   84950:	f8c8 3000 	str.w	r3, [r8]
   84954:	f77f acc4 	ble.w	842e0 <_svfprintf_r+0x3e0>
   84958:	aa25      	add	r2, sp, #148	; 0x94
   8495a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8495c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8495e:	f002 fbb9 	bl	870d4 <__ssprint_r>
   84962:	2800      	cmp	r0, #0
   84964:	f47f aba9 	bne.w	840ba <_svfprintf_r+0x1ba>
   84968:	46c8      	mov	r8, r9
   8496a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8496c:	e4ba      	b.n	842e4 <_svfprintf_r+0x3e4>
   8496e:	aa25      	add	r2, sp, #148	; 0x94
   84970:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84972:	980c      	ldr	r0, [sp, #48]	; 0x30
   84974:	f002 fbae 	bl	870d4 <__ssprint_r>
   84978:	2800      	cmp	r0, #0
   8497a:	f43f acfd 	beq.w	84378 <_svfprintf_r+0x478>
   8497e:	f7ff bb9c 	b.w	840ba <_svfprintf_r+0x1ba>
   84982:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84986:	2b01      	cmp	r3, #1
   84988:	f000 817e 	beq.w	84c88 <_svfprintf_r+0xd88>
   8498c:	2b02      	cmp	r3, #2
   8498e:	d171      	bne.n	84a74 <_svfprintf_r+0xb74>
   84990:	f8cd b01c 	str.w	fp, [sp, #28]
   84994:	2400      	movs	r4, #0
   84996:	2500      	movs	r5, #0
   84998:	e5d4      	b.n	84544 <_svfprintf_r+0x644>
   8499a:	aa25      	add	r2, sp, #148	; 0x94
   8499c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8499e:	980c      	ldr	r0, [sp, #48]	; 0x30
   849a0:	f002 fb98 	bl	870d4 <__ssprint_r>
   849a4:	2800      	cmp	r0, #0
   849a6:	f47f ab88 	bne.w	840ba <_svfprintf_r+0x1ba>
   849aa:	46c8      	mov	r8, r9
   849ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   849ae:	e486      	b.n	842be <_svfprintf_r+0x3be>
   849b0:	aa25      	add	r2, sp, #148	; 0x94
   849b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   849b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   849b6:	f002 fb8d 	bl	870d4 <__ssprint_r>
   849ba:	2800      	cmp	r0, #0
   849bc:	f47f ab7d 	bne.w	840ba <_svfprintf_r+0x1ba>
   849c0:	46c8      	mov	r8, r9
   849c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   849c4:	e429      	b.n	8421a <_svfprintf_r+0x31a>
   849c6:	2001      	movs	r0, #1
   849c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   849ca:	4a2d      	ldr	r2, [pc, #180]	; (84a80 <_svfprintf_r+0xb80>)
   849cc:	4403      	add	r3, r0
   849ce:	4404      	add	r4, r0
   849d0:	2b07      	cmp	r3, #7
   849d2:	9427      	str	r4, [sp, #156]	; 0x9c
   849d4:	9326      	str	r3, [sp, #152]	; 0x98
   849d6:	f8c8 0004 	str.w	r0, [r8, #4]
   849da:	f8c8 2000 	str.w	r2, [r8]
   849de:	f340 82d8 	ble.w	84f92 <_svfprintf_r+0x1092>
   849e2:	aa25      	add	r2, sp, #148	; 0x94
   849e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   849e6:	980c      	ldr	r0, [sp, #48]	; 0x30
   849e8:	f002 fb74 	bl	870d4 <__ssprint_r>
   849ec:	2800      	cmp	r0, #0
   849ee:	f47f ab64 	bne.w	840ba <_svfprintf_r+0x1ba>
   849f2:	46c8      	mov	r8, r9
   849f4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   849f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   849f8:	b929      	cbnz	r1, 84a06 <_svfprintf_r+0xb06>
   849fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   849fc:	b91b      	cbnz	r3, 84a06 <_svfprintf_r+0xb06>
   849fe:	9b07      	ldr	r3, [sp, #28]
   84a00:	07d8      	lsls	r0, r3, #31
   84a02:	f57f ac6f 	bpl.w	842e4 <_svfprintf_r+0x3e4>
   84a06:	9819      	ldr	r0, [sp, #100]	; 0x64
   84a08:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a0a:	4602      	mov	r2, r0
   84a0c:	3301      	adds	r3, #1
   84a0e:	4422      	add	r2, r4
   84a10:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   84a12:	2b07      	cmp	r3, #7
   84a14:	9227      	str	r2, [sp, #156]	; 0x9c
   84a16:	f8c8 4000 	str.w	r4, [r8]
   84a1a:	f8c8 0004 	str.w	r0, [r8, #4]
   84a1e:	9326      	str	r3, [sp, #152]	; 0x98
   84a20:	f300 8431 	bgt.w	85286 <_svfprintf_r+0x1386>
   84a24:	f108 0808 	add.w	r8, r8, #8
   84a28:	2900      	cmp	r1, #0
   84a2a:	f2c0 8409 	blt.w	85240 <_svfprintf_r+0x1340>
   84a2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   84a30:	3301      	adds	r3, #1
   84a32:	188c      	adds	r4, r1, r2
   84a34:	2b07      	cmp	r3, #7
   84a36:	9427      	str	r4, [sp, #156]	; 0x9c
   84a38:	9326      	str	r3, [sp, #152]	; 0x98
   84a3a:	f8c8 6000 	str.w	r6, [r8]
   84a3e:	f8c8 1004 	str.w	r1, [r8, #4]
   84a42:	f77f ac4d 	ble.w	842e0 <_svfprintf_r+0x3e0>
   84a46:	aa25      	add	r2, sp, #148	; 0x94
   84a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84a4a:	980c      	ldr	r0, [sp, #48]	; 0x30
   84a4c:	f002 fb42 	bl	870d4 <__ssprint_r>
   84a50:	2800      	cmp	r0, #0
   84a52:	f47f ab32 	bne.w	840ba <_svfprintf_r+0x1ba>
   84a56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84a58:	46c8      	mov	r8, r9
   84a5a:	e443      	b.n	842e4 <_svfprintf_r+0x3e4>
   84a5c:	aa25      	add	r2, sp, #148	; 0x94
   84a5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84a60:	980c      	ldr	r0, [sp, #48]	; 0x30
   84a62:	f002 fb37 	bl	870d4 <__ssprint_r>
   84a66:	2800      	cmp	r0, #0
   84a68:	f47f ab27 	bne.w	840ba <_svfprintf_r+0x1ba>
   84a6c:	46c8      	mov	r8, r9
   84a6e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84a70:	f7ff bbe5 	b.w	8423e <_svfprintf_r+0x33e>
   84a74:	2400      	movs	r4, #0
   84a76:	2500      	movs	r5, #0
   84a78:	f8cd b01c 	str.w	fp, [sp, #28]
   84a7c:	4649      	mov	r1, r9
   84a7e:	e004      	b.n	84a8a <_svfprintf_r+0xb8a>
   84a80:	00088408 	.word	0x00088408
   84a84:	0008841c 	.word	0x0008841c
   84a88:	4631      	mov	r1, r6
   84a8a:	08e2      	lsrs	r2, r4, #3
   84a8c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   84a90:	08e8      	lsrs	r0, r5, #3
   84a92:	f004 0307 	and.w	r3, r4, #7
   84a96:	4605      	mov	r5, r0
   84a98:	4614      	mov	r4, r2
   84a9a:	3330      	adds	r3, #48	; 0x30
   84a9c:	ea54 0205 	orrs.w	r2, r4, r5
   84aa0:	f801 3c01 	strb.w	r3, [r1, #-1]
   84aa4:	f101 36ff 	add.w	r6, r1, #4294967295
   84aa8:	d1ee      	bne.n	84a88 <_svfprintf_r+0xb88>
   84aaa:	9a07      	ldr	r2, [sp, #28]
   84aac:	07d2      	lsls	r2, r2, #31
   84aae:	f57f ad59 	bpl.w	84564 <_svfprintf_r+0x664>
   84ab2:	2b30      	cmp	r3, #48	; 0x30
   84ab4:	f43f ad56 	beq.w	84564 <_svfprintf_r+0x664>
   84ab8:	2330      	movs	r3, #48	; 0x30
   84aba:	3902      	subs	r1, #2
   84abc:	f806 3c01 	strb.w	r3, [r6, #-1]
   84ac0:	eba9 0301 	sub.w	r3, r9, r1
   84ac4:	930e      	str	r3, [sp, #56]	; 0x38
   84ac6:	460e      	mov	r6, r1
   84ac8:	f7ff bb36 	b.w	84138 <_svfprintf_r+0x238>
   84acc:	991f      	ldr	r1, [sp, #124]	; 0x7c
   84ace:	2900      	cmp	r1, #0
   84ad0:	f77f af79 	ble.w	849c6 <_svfprintf_r+0xac6>
   84ad4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84ad6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   84ad8:	4293      	cmp	r3, r2
   84ada:	bfa8      	it	ge
   84adc:	4613      	movge	r3, r2
   84ade:	2b00      	cmp	r3, #0
   84ae0:	461f      	mov	r7, r3
   84ae2:	dd0b      	ble.n	84afc <_svfprintf_r+0xbfc>
   84ae4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84ae6:	443c      	add	r4, r7
   84ae8:	3301      	adds	r3, #1
   84aea:	2b07      	cmp	r3, #7
   84aec:	9427      	str	r4, [sp, #156]	; 0x9c
   84aee:	e888 00c0 	stmia.w	r8, {r6, r7}
   84af2:	9326      	str	r3, [sp, #152]	; 0x98
   84af4:	f300 82fb 	bgt.w	850ee <_svfprintf_r+0x11ee>
   84af8:	f108 0808 	add.w	r8, r8, #8
   84afc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84afe:	2f00      	cmp	r7, #0
   84b00:	bfa8      	it	ge
   84b02:	1bdb      	subge	r3, r3, r7
   84b04:	2b00      	cmp	r3, #0
   84b06:	461f      	mov	r7, r3
   84b08:	f340 80d7 	ble.w	84cba <_svfprintf_r+0xdba>
   84b0c:	2b10      	cmp	r3, #16
   84b0e:	f340 8434 	ble.w	8537a <_svfprintf_r+0x147a>
   84b12:	4dba      	ldr	r5, [pc, #744]	; (84dfc <_svfprintf_r+0xefc>)
   84b14:	4642      	mov	r2, r8
   84b16:	4621      	mov	r1, r4
   84b18:	46b0      	mov	r8, r6
   84b1a:	f04f 0b10 	mov.w	fp, #16
   84b1e:	462e      	mov	r6, r5
   84b20:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84b22:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84b24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84b26:	e004      	b.n	84b32 <_svfprintf_r+0xc32>
   84b28:	3208      	adds	r2, #8
   84b2a:	3f10      	subs	r7, #16
   84b2c:	2f10      	cmp	r7, #16
   84b2e:	f340 80b5 	ble.w	84c9c <_svfprintf_r+0xd9c>
   84b32:	3301      	adds	r3, #1
   84b34:	3110      	adds	r1, #16
   84b36:	2b07      	cmp	r3, #7
   84b38:	9127      	str	r1, [sp, #156]	; 0x9c
   84b3a:	9326      	str	r3, [sp, #152]	; 0x98
   84b3c:	e882 0840 	stmia.w	r2, {r6, fp}
   84b40:	ddf2      	ble.n	84b28 <_svfprintf_r+0xc28>
   84b42:	aa25      	add	r2, sp, #148	; 0x94
   84b44:	4629      	mov	r1, r5
   84b46:	4620      	mov	r0, r4
   84b48:	f002 fac4 	bl	870d4 <__ssprint_r>
   84b4c:	2800      	cmp	r0, #0
   84b4e:	f47f aab4 	bne.w	840ba <_svfprintf_r+0x1ba>
   84b52:	464a      	mov	r2, r9
   84b54:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84b56:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84b58:	e7e7      	b.n	84b2a <_svfprintf_r+0xc2a>
   84b5a:	2d00      	cmp	r5, #0
   84b5c:	bf08      	it	eq
   84b5e:	2c0a      	cmpeq	r4, #10
   84b60:	f0c0 8090 	bcc.w	84c84 <_svfprintf_r+0xd84>
   84b64:	464e      	mov	r6, r9
   84b66:	4620      	mov	r0, r4
   84b68:	4629      	mov	r1, r5
   84b6a:	220a      	movs	r2, #10
   84b6c:	2300      	movs	r3, #0
   84b6e:	f003 fa0b 	bl	87f88 <__aeabi_uldivmod>
   84b72:	3230      	adds	r2, #48	; 0x30
   84b74:	f806 2d01 	strb.w	r2, [r6, #-1]!
   84b78:	4620      	mov	r0, r4
   84b7a:	4629      	mov	r1, r5
   84b7c:	2300      	movs	r3, #0
   84b7e:	220a      	movs	r2, #10
   84b80:	f003 fa02 	bl	87f88 <__aeabi_uldivmod>
   84b84:	4604      	mov	r4, r0
   84b86:	460d      	mov	r5, r1
   84b88:	ea54 0305 	orrs.w	r3, r4, r5
   84b8c:	d1eb      	bne.n	84b66 <_svfprintf_r+0xc66>
   84b8e:	eba9 0306 	sub.w	r3, r9, r6
   84b92:	930e      	str	r3, [sp, #56]	; 0x38
   84b94:	f7ff bad0 	b.w	84138 <_svfprintf_r+0x238>
   84b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84b9a:	464e      	mov	r6, r9
   84b9c:	930e      	str	r3, [sp, #56]	; 0x38
   84b9e:	f7ff bacb 	b.w	84138 <_svfprintf_r+0x238>
   84ba2:	1e5e      	subs	r6, r3, #1
   84ba4:	2e00      	cmp	r6, #0
   84ba6:	f77f aeca 	ble.w	8493e <_svfprintf_r+0xa3e>
   84baa:	2e10      	cmp	r6, #16
   84bac:	f340 83e3 	ble.w	85376 <_svfprintf_r+0x1476>
   84bb0:	4622      	mov	r2, r4
   84bb2:	f04f 0b10 	mov.w	fp, #16
   84bb6:	4d91      	ldr	r5, [pc, #580]	; (84dfc <_svfprintf_r+0xefc>)
   84bb8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84bba:	e004      	b.n	84bc6 <_svfprintf_r+0xcc6>
   84bbc:	3e10      	subs	r6, #16
   84bbe:	2e10      	cmp	r6, #16
   84bc0:	f108 0808 	add.w	r8, r8, #8
   84bc4:	dd15      	ble.n	84bf2 <_svfprintf_r+0xcf2>
   84bc6:	3701      	adds	r7, #1
   84bc8:	3210      	adds	r2, #16
   84bca:	2f07      	cmp	r7, #7
   84bcc:	9227      	str	r2, [sp, #156]	; 0x9c
   84bce:	9726      	str	r7, [sp, #152]	; 0x98
   84bd0:	e888 0820 	stmia.w	r8, {r5, fp}
   84bd4:	ddf2      	ble.n	84bbc <_svfprintf_r+0xcbc>
   84bd6:	aa25      	add	r2, sp, #148	; 0x94
   84bd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84bda:	4620      	mov	r0, r4
   84bdc:	f002 fa7a 	bl	870d4 <__ssprint_r>
   84be0:	2800      	cmp	r0, #0
   84be2:	f47f aa6a 	bne.w	840ba <_svfprintf_r+0x1ba>
   84be6:	3e10      	subs	r6, #16
   84be8:	2e10      	cmp	r6, #16
   84bea:	46c8      	mov	r8, r9
   84bec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84bee:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84bf0:	dce9      	bgt.n	84bc6 <_svfprintf_r+0xcc6>
   84bf2:	4614      	mov	r4, r2
   84bf4:	3701      	adds	r7, #1
   84bf6:	4434      	add	r4, r6
   84bf8:	2f07      	cmp	r7, #7
   84bfa:	9427      	str	r4, [sp, #156]	; 0x9c
   84bfc:	9726      	str	r7, [sp, #152]	; 0x98
   84bfe:	e888 0060 	stmia.w	r8, {r5, r6}
   84c02:	f77f ae9a 	ble.w	8493a <_svfprintf_r+0xa3a>
   84c06:	aa25      	add	r2, sp, #148	; 0x94
   84c08:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84c0a:	980c      	ldr	r0, [sp, #48]	; 0x30
   84c0c:	f002 fa62 	bl	870d4 <__ssprint_r>
   84c10:	2800      	cmp	r0, #0
   84c12:	f47f aa52 	bne.w	840ba <_svfprintf_r+0x1ba>
   84c16:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84c18:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84c1a:	46c8      	mov	r8, r9
   84c1c:	e68f      	b.n	8493e <_svfprintf_r+0xa3e>
   84c1e:	3204      	adds	r2, #4
   84c20:	681c      	ldr	r4, [r3, #0]
   84c22:	2500      	movs	r5, #0
   84c24:	2301      	movs	r3, #1
   84c26:	920f      	str	r2, [sp, #60]	; 0x3c
   84c28:	f7ff ba68 	b.w	840fc <_svfprintf_r+0x1fc>
   84c2c:	681c      	ldr	r4, [r3, #0]
   84c2e:	3304      	adds	r3, #4
   84c30:	930f      	str	r3, [sp, #60]	; 0x3c
   84c32:	2500      	movs	r5, #0
   84c34:	e42a      	b.n	8448c <_svfprintf_r+0x58c>
   84c36:	681c      	ldr	r4, [r3, #0]
   84c38:	3304      	adds	r3, #4
   84c3a:	17e5      	asrs	r5, r4, #31
   84c3c:	4622      	mov	r2, r4
   84c3e:	930f      	str	r3, [sp, #60]	; 0x3c
   84c40:	462b      	mov	r3, r5
   84c42:	2a00      	cmp	r2, #0
   84c44:	f173 0300 	sbcs.w	r3, r3, #0
   84c48:	f6bf ac68 	bge.w	8451c <_svfprintf_r+0x61c>
   84c4c:	272d      	movs	r7, #45	; 0x2d
   84c4e:	4264      	negs	r4, r4
   84c50:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84c54:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   84c58:	2301      	movs	r3, #1
   84c5a:	f7ff ba53 	b.w	84104 <_svfprintf_r+0x204>
   84c5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   84c60:	2500      	movs	r5, #0
   84c62:	460a      	mov	r2, r1
   84c64:	3204      	adds	r2, #4
   84c66:	680c      	ldr	r4, [r1, #0]
   84c68:	920f      	str	r2, [sp, #60]	; 0x3c
   84c6a:	f7ff ba47 	b.w	840fc <_svfprintf_r+0x1fc>
   84c6e:	4614      	mov	r4, r2
   84c70:	3301      	adds	r3, #1
   84c72:	4434      	add	r4, r6
   84c74:	2b07      	cmp	r3, #7
   84c76:	9427      	str	r4, [sp, #156]	; 0x9c
   84c78:	9326      	str	r3, [sp, #152]	; 0x98
   84c7a:	e888 0060 	stmia.w	r8, {r5, r6}
   84c7e:	f77f ab2f 	ble.w	842e0 <_svfprintf_r+0x3e0>
   84c82:	e6e0      	b.n	84a46 <_svfprintf_r+0xb46>
   84c84:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84c88:	2301      	movs	r3, #1
   84c8a:	ae42      	add	r6, sp, #264	; 0x108
   84c8c:	3430      	adds	r4, #48	; 0x30
   84c8e:	f8cd b01c 	str.w	fp, [sp, #28]
   84c92:	f806 4d41 	strb.w	r4, [r6, #-65]!
   84c96:	930e      	str	r3, [sp, #56]	; 0x38
   84c98:	f7ff ba4e 	b.w	84138 <_svfprintf_r+0x238>
   84c9c:	4635      	mov	r5, r6
   84c9e:	460c      	mov	r4, r1
   84ca0:	4646      	mov	r6, r8
   84ca2:	4690      	mov	r8, r2
   84ca4:	3301      	adds	r3, #1
   84ca6:	443c      	add	r4, r7
   84ca8:	2b07      	cmp	r3, #7
   84caa:	9427      	str	r4, [sp, #156]	; 0x9c
   84cac:	9326      	str	r3, [sp, #152]	; 0x98
   84cae:	e888 00a0 	stmia.w	r8, {r5, r7}
   84cb2:	f300 8246 	bgt.w	85142 <_svfprintf_r+0x1242>
   84cb6:	f108 0808 	add.w	r8, r8, #8
   84cba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84cbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84cbe:	429a      	cmp	r2, r3
   84cc0:	db45      	blt.n	84d4e <_svfprintf_r+0xe4e>
   84cc2:	9b07      	ldr	r3, [sp, #28]
   84cc4:	07d9      	lsls	r1, r3, #31
   84cc6:	d442      	bmi.n	84d4e <_svfprintf_r+0xe4e>
   84cc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84cca:	9812      	ldr	r0, [sp, #72]	; 0x48
   84ccc:	1a9a      	subs	r2, r3, r2
   84cce:	1a1d      	subs	r5, r3, r0
   84cd0:	4295      	cmp	r5, r2
   84cd2:	bfa8      	it	ge
   84cd4:	4615      	movge	r5, r2
   84cd6:	2d00      	cmp	r5, #0
   84cd8:	dd0e      	ble.n	84cf8 <_svfprintf_r+0xdf8>
   84cda:	9926      	ldr	r1, [sp, #152]	; 0x98
   84cdc:	4406      	add	r6, r0
   84cde:	3101      	adds	r1, #1
   84ce0:	442c      	add	r4, r5
   84ce2:	2907      	cmp	r1, #7
   84ce4:	f8c8 6000 	str.w	r6, [r8]
   84ce8:	9427      	str	r4, [sp, #156]	; 0x9c
   84cea:	f8c8 5004 	str.w	r5, [r8, #4]
   84cee:	9126      	str	r1, [sp, #152]	; 0x98
   84cf0:	f300 8216 	bgt.w	85120 <_svfprintf_r+0x1220>
   84cf4:	f108 0808 	add.w	r8, r8, #8
   84cf8:	2d00      	cmp	r5, #0
   84cfa:	bfb4      	ite	lt
   84cfc:	4616      	movlt	r6, r2
   84cfe:	1b56      	subge	r6, r2, r5
   84d00:	2e00      	cmp	r6, #0
   84d02:	f77f aaef 	ble.w	842e4 <_svfprintf_r+0x3e4>
   84d06:	2e10      	cmp	r6, #16
   84d08:	f340 82f3 	ble.w	852f2 <_svfprintf_r+0x13f2>
   84d0c:	4622      	mov	r2, r4
   84d0e:	2710      	movs	r7, #16
   84d10:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84d12:	4d3a      	ldr	r5, [pc, #232]	; (84dfc <_svfprintf_r+0xefc>)
   84d14:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   84d18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84d1a:	e004      	b.n	84d26 <_svfprintf_r+0xe26>
   84d1c:	f108 0808 	add.w	r8, r8, #8
   84d20:	3e10      	subs	r6, #16
   84d22:	2e10      	cmp	r6, #16
   84d24:	dda3      	ble.n	84c6e <_svfprintf_r+0xd6e>
   84d26:	3301      	adds	r3, #1
   84d28:	3210      	adds	r2, #16
   84d2a:	2b07      	cmp	r3, #7
   84d2c:	9227      	str	r2, [sp, #156]	; 0x9c
   84d2e:	9326      	str	r3, [sp, #152]	; 0x98
   84d30:	e888 00a0 	stmia.w	r8, {r5, r7}
   84d34:	ddf2      	ble.n	84d1c <_svfprintf_r+0xe1c>
   84d36:	aa25      	add	r2, sp, #148	; 0x94
   84d38:	4621      	mov	r1, r4
   84d3a:	4658      	mov	r0, fp
   84d3c:	f002 f9ca 	bl	870d4 <__ssprint_r>
   84d40:	2800      	cmp	r0, #0
   84d42:	f47f a9ba 	bne.w	840ba <_svfprintf_r+0x1ba>
   84d46:	46c8      	mov	r8, r9
   84d48:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84d4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84d4c:	e7e8      	b.n	84d20 <_svfprintf_r+0xe20>
   84d4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84d50:	9819      	ldr	r0, [sp, #100]	; 0x64
   84d52:	3301      	adds	r3, #1
   84d54:	991a      	ldr	r1, [sp, #104]	; 0x68
   84d56:	4404      	add	r4, r0
   84d58:	2b07      	cmp	r3, #7
   84d5a:	9427      	str	r4, [sp, #156]	; 0x9c
   84d5c:	f8c8 1000 	str.w	r1, [r8]
   84d60:	f8c8 0004 	str.w	r0, [r8, #4]
   84d64:	9326      	str	r3, [sp, #152]	; 0x98
   84d66:	f300 81cf 	bgt.w	85108 <_svfprintf_r+0x1208>
   84d6a:	f108 0808 	add.w	r8, r8, #8
   84d6e:	e7ab      	b.n	84cc8 <_svfprintf_r+0xdc8>
   84d70:	9b07      	ldr	r3, [sp, #28]
   84d72:	07da      	lsls	r2, r3, #31
   84d74:	f53f adad 	bmi.w	848d2 <_svfprintf_r+0x9d2>
   84d78:	2301      	movs	r3, #1
   84d7a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84d7c:	441c      	add	r4, r3
   84d7e:	441f      	add	r7, r3
   84d80:	2f07      	cmp	r7, #7
   84d82:	9427      	str	r4, [sp, #156]	; 0x9c
   84d84:	f8c8 6000 	str.w	r6, [r8]
   84d88:	9726      	str	r7, [sp, #152]	; 0x98
   84d8a:	f8c8 3004 	str.w	r3, [r8, #4]
   84d8e:	f77f add4 	ble.w	8493a <_svfprintf_r+0xa3a>
   84d92:	aa25      	add	r2, sp, #148	; 0x94
   84d94:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84d96:	980c      	ldr	r0, [sp, #48]	; 0x30
   84d98:	f002 f99c 	bl	870d4 <__ssprint_r>
   84d9c:	2800      	cmp	r0, #0
   84d9e:	f47f a98c 	bne.w	840ba <_svfprintf_r+0x1ba>
   84da2:	46c8      	mov	r8, r9
   84da4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84da6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84da8:	e5c9      	b.n	8493e <_svfprintf_r+0xa3e>
   84daa:	aa25      	add	r2, sp, #148	; 0x94
   84dac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84dae:	980c      	ldr	r0, [sp, #48]	; 0x30
   84db0:	f002 f990 	bl	870d4 <__ssprint_r>
   84db4:	2800      	cmp	r0, #0
   84db6:	f47f a980 	bne.w	840ba <_svfprintf_r+0x1ba>
   84dba:	46c8      	mov	r8, r9
   84dbc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84dbe:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84dc0:	e596      	b.n	848f0 <_svfprintf_r+0x9f0>
   84dc2:	aa25      	add	r2, sp, #148	; 0x94
   84dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84dc6:	980c      	ldr	r0, [sp, #48]	; 0x30
   84dc8:	f002 f984 	bl	870d4 <__ssprint_r>
   84dcc:	2800      	cmp	r0, #0
   84dce:	f47f a974 	bne.w	840ba <_svfprintf_r+0x1ba>
   84dd2:	46c8      	mov	r8, r9
   84dd4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84dd6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84dd8:	e599      	b.n	8490e <_svfprintf_r+0xa0e>
   84dda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84ddc:	3407      	adds	r4, #7
   84dde:	f024 0407 	bic.w	r4, r4, #7
   84de2:	f104 0108 	add.w	r1, r4, #8
   84de6:	e9d4 2300 	ldrd	r2, r3, [r4]
   84dea:	910f      	str	r1, [sp, #60]	; 0x3c
   84dec:	4614      	mov	r4, r2
   84dee:	461d      	mov	r5, r3
   84df0:	f7ff bb8f 	b.w	84512 <_svfprintf_r+0x612>
   84df4:	464e      	mov	r6, r9
   84df6:	f7ff b99f 	b.w	84138 <_svfprintf_r+0x238>
   84dfa:	bf00      	nop
   84dfc:	0008841c 	.word	0x0008841c
   84e00:	aa25      	add	r2, sp, #148	; 0x94
   84e02:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84e04:	980c      	ldr	r0, [sp, #48]	; 0x30
   84e06:	f002 f965 	bl	870d4 <__ssprint_r>
   84e0a:	2800      	cmp	r0, #0
   84e0c:	f47f a955 	bne.w	840ba <_svfprintf_r+0x1ba>
   84e10:	46c8      	mov	r8, r9
   84e12:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84e14:	f7ff ba16 	b.w	84244 <_svfprintf_r+0x344>
   84e18:	9c15      	ldr	r4, [sp, #84]	; 0x54
   84e1a:	4622      	mov	r2, r4
   84e1c:	4620      	mov	r0, r4
   84e1e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   84e20:	4623      	mov	r3, r4
   84e22:	4621      	mov	r1, r4
   84e24:	f003 f872 	bl	87f0c <__aeabi_dcmpun>
   84e28:	2800      	cmp	r0, #0
   84e2a:	f040 8273 	bne.w	85314 <_svfprintf_r+0x1414>
   84e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84e30:	3301      	adds	r3, #1
   84e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84e34:	f023 0320 	bic.w	r3, r3, #32
   84e38:	930e      	str	r3, [sp, #56]	; 0x38
   84e3a:	f000 819c 	beq.w	85176 <_svfprintf_r+0x1276>
   84e3e:	2b47      	cmp	r3, #71	; 0x47
   84e40:	f000 80d6 	beq.w	84ff0 <_svfprintf_r+0x10f0>
   84e44:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   84e48:	9307      	str	r3, [sp, #28]
   84e4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84e4c:	1e1f      	subs	r7, r3, #0
   84e4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84e50:	9308      	str	r3, [sp, #32]
   84e52:	bfb7      	itett	lt
   84e54:	463b      	movlt	r3, r7
   84e56:	2300      	movge	r3, #0
   84e58:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   84e5c:	232d      	movlt	r3, #45	; 0x2d
   84e5e:	9310      	str	r3, [sp, #64]	; 0x40
   84e60:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84e62:	2b66      	cmp	r3, #102	; 0x66
   84e64:	f000 8190 	beq.w	85188 <_svfprintf_r+0x1288>
   84e68:	2b46      	cmp	r3, #70	; 0x46
   84e6a:	f000 80a4 	beq.w	84fb6 <_svfprintf_r+0x10b6>
   84e6e:	2002      	movs	r0, #2
   84e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84e72:	a923      	add	r1, sp, #140	; 0x8c
   84e74:	2b45      	cmp	r3, #69	; 0x45
   84e76:	bf0a      	itet	eq
   84e78:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   84e7a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   84e7c:	1c5d      	addeq	r5, r3, #1
   84e7e:	e88d 0021 	stmia.w	sp, {r0, r5}
   84e82:	9104      	str	r1, [sp, #16]
   84e84:	a820      	add	r0, sp, #128	; 0x80
   84e86:	a91f      	add	r1, sp, #124	; 0x7c
   84e88:	463b      	mov	r3, r7
   84e8a:	9003      	str	r0, [sp, #12]
   84e8c:	9a08      	ldr	r2, [sp, #32]
   84e8e:	9102      	str	r1, [sp, #8]
   84e90:	980c      	ldr	r0, [sp, #48]	; 0x30
   84e92:	f000 fb59 	bl	85548 <_dtoa_r>
   84e96:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84e98:	4606      	mov	r6, r0
   84e9a:	2b67      	cmp	r3, #103	; 0x67
   84e9c:	f040 81ba 	bne.w	85214 <_svfprintf_r+0x1314>
   84ea0:	f01b 0f01 	tst.w	fp, #1
   84ea4:	f000 8223 	beq.w	852ee <_svfprintf_r+0x13ee>
   84ea8:	1974      	adds	r4, r6, r5
   84eaa:	9a16      	ldr	r2, [sp, #88]	; 0x58
   84eac:	9808      	ldr	r0, [sp, #32]
   84eae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   84eb0:	4639      	mov	r1, r7
   84eb2:	f002 fff9 	bl	87ea8 <__aeabi_dcmpeq>
   84eb6:	2800      	cmp	r0, #0
   84eb8:	f040 8124 	bne.w	85104 <_svfprintf_r+0x1204>
   84ebc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   84ebe:	42a3      	cmp	r3, r4
   84ec0:	d206      	bcs.n	84ed0 <_svfprintf_r+0xfd0>
   84ec2:	2130      	movs	r1, #48	; 0x30
   84ec4:	1c5a      	adds	r2, r3, #1
   84ec6:	9223      	str	r2, [sp, #140]	; 0x8c
   84ec8:	7019      	strb	r1, [r3, #0]
   84eca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   84ecc:	429c      	cmp	r4, r3
   84ece:	d8f9      	bhi.n	84ec4 <_svfprintf_r+0xfc4>
   84ed0:	1b9b      	subs	r3, r3, r6
   84ed2:	9313      	str	r3, [sp, #76]	; 0x4c
   84ed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84ed6:	2b47      	cmp	r3, #71	; 0x47
   84ed8:	f000 80a2 	beq.w	85020 <_svfprintf_r+0x1120>
   84edc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84ede:	2b65      	cmp	r3, #101	; 0x65
   84ee0:	f340 81a7 	ble.w	85232 <_svfprintf_r+0x1332>
   84ee4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84ee6:	2b66      	cmp	r3, #102	; 0x66
   84ee8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   84eea:	9312      	str	r3, [sp, #72]	; 0x48
   84eec:	f000 8171 	beq.w	851d2 <_svfprintf_r+0x12d2>
   84ef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84ef2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84ef4:	4619      	mov	r1, r3
   84ef6:	4291      	cmp	r1, r2
   84ef8:	f300 815d 	bgt.w	851b6 <_svfprintf_r+0x12b6>
   84efc:	f01b 0f01 	tst.w	fp, #1
   84f00:	f040 81f0 	bne.w	852e4 <_svfprintf_r+0x13e4>
   84f04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   84f08:	9308      	str	r3, [sp, #32]
   84f0a:	2367      	movs	r3, #103	; 0x67
   84f0c:	920e      	str	r2, [sp, #56]	; 0x38
   84f0e:	9311      	str	r3, [sp, #68]	; 0x44
   84f10:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84f12:	2b00      	cmp	r3, #0
   84f14:	d17d      	bne.n	85012 <_svfprintf_r+0x1112>
   84f16:	930a      	str	r3, [sp, #40]	; 0x28
   84f18:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84f1c:	f7ff b914 	b.w	84148 <_svfprintf_r+0x248>
   84f20:	f024 0407 	bic.w	r4, r4, #7
   84f24:	6823      	ldr	r3, [r4, #0]
   84f26:	9315      	str	r3, [sp, #84]	; 0x54
   84f28:	6863      	ldr	r3, [r4, #4]
   84f2a:	9314      	str	r3, [sp, #80]	; 0x50
   84f2c:	f104 0308 	add.w	r3, r4, #8
   84f30:	930f      	str	r3, [sp, #60]	; 0x3c
   84f32:	f7ff bb2f 	b.w	84594 <_svfprintf_r+0x694>
   84f36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84f38:	6813      	ldr	r3, [r2, #0]
   84f3a:	3204      	adds	r2, #4
   84f3c:	920f      	str	r2, [sp, #60]	; 0x3c
   84f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   84f40:	601a      	str	r2, [r3, #0]
   84f42:	f7ff b804 	b.w	83f4e <_svfprintf_r+0x4e>
   84f46:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84f48:	4daf      	ldr	r5, [pc, #700]	; (85208 <_svfprintf_r+0x1308>)
   84f4a:	f7ff b9ad 	b.w	842a8 <_svfprintf_r+0x3a8>
   84f4e:	aa25      	add	r2, sp, #148	; 0x94
   84f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f52:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f54:	f002 f8be 	bl	870d4 <__ssprint_r>
   84f58:	2800      	cmp	r0, #0
   84f5a:	f47f a8ae 	bne.w	840ba <_svfprintf_r+0x1ba>
   84f5e:	46c8      	mov	r8, r9
   84f60:	e431      	b.n	847c6 <_svfprintf_r+0x8c6>
   84f62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84f64:	4613      	mov	r3, r2
   84f66:	3304      	adds	r3, #4
   84f68:	930f      	str	r3, [sp, #60]	; 0x3c
   84f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84f6c:	6811      	ldr	r1, [r2, #0]
   84f6e:	17dd      	asrs	r5, r3, #31
   84f70:	461a      	mov	r2, r3
   84f72:	462b      	mov	r3, r5
   84f74:	e9c1 2300 	strd	r2, r3, [r1]
   84f78:	f7fe bfe9 	b.w	83f4e <_svfprintf_r+0x4e>
   84f7c:	aa25      	add	r2, sp, #148	; 0x94
   84f7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f80:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f82:	f002 f8a7 	bl	870d4 <__ssprint_r>
   84f86:	2800      	cmp	r0, #0
   84f88:	f47f a897 	bne.w	840ba <_svfprintf_r+0x1ba>
   84f8c:	46c8      	mov	r8, r9
   84f8e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84f90:	e432      	b.n	847f8 <_svfprintf_r+0x8f8>
   84f92:	f108 0808 	add.w	r8, r8, #8
   84f96:	e52f      	b.n	849f8 <_svfprintf_r+0xaf8>
   84f98:	2140      	movs	r1, #64	; 0x40
   84f9a:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f9c:	f001 fa22 	bl	863e4 <_malloc_r>
   84fa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   84fa2:	6010      	str	r0, [r2, #0]
   84fa4:	6110      	str	r0, [r2, #16]
   84fa6:	2800      	cmp	r0, #0
   84fa8:	f000 8214 	beq.w	853d4 <_svfprintf_r+0x14d4>
   84fac:	2340      	movs	r3, #64	; 0x40
   84fae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   84fb0:	6153      	str	r3, [r2, #20]
   84fb2:	f7fe bfbc 	b.w	83f2e <_svfprintf_r+0x2e>
   84fb6:	2003      	movs	r0, #3
   84fb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84fba:	a923      	add	r1, sp, #140	; 0x8c
   84fbc:	e88d 0011 	stmia.w	sp, {r0, r4}
   84fc0:	9104      	str	r1, [sp, #16]
   84fc2:	a820      	add	r0, sp, #128	; 0x80
   84fc4:	a91f      	add	r1, sp, #124	; 0x7c
   84fc6:	9003      	str	r0, [sp, #12]
   84fc8:	9a08      	ldr	r2, [sp, #32]
   84fca:	463b      	mov	r3, r7
   84fcc:	9102      	str	r1, [sp, #8]
   84fce:	980c      	ldr	r0, [sp, #48]	; 0x30
   84fd0:	f000 faba 	bl	85548 <_dtoa_r>
   84fd4:	4625      	mov	r5, r4
   84fd6:	4606      	mov	r6, r0
   84fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84fda:	1974      	adds	r4, r6, r5
   84fdc:	2b46      	cmp	r3, #70	; 0x46
   84fde:	f47f af64 	bne.w	84eaa <_svfprintf_r+0xfaa>
   84fe2:	7833      	ldrb	r3, [r6, #0]
   84fe4:	2b30      	cmp	r3, #48	; 0x30
   84fe6:	f000 8187 	beq.w	852f8 <_svfprintf_r+0x13f8>
   84fea:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   84fec:	442c      	add	r4, r5
   84fee:	e75c      	b.n	84eaa <_svfprintf_r+0xfaa>
   84ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84ff2:	2b00      	cmp	r3, #0
   84ff4:	bf08      	it	eq
   84ff6:	2301      	moveq	r3, #1
   84ff8:	930a      	str	r3, [sp, #40]	; 0x28
   84ffa:	e723      	b.n	84e44 <_svfprintf_r+0xf44>
   84ffc:	4630      	mov	r0, r6
   84ffe:	950a      	str	r5, [sp, #40]	; 0x28
   85000:	f7fe ff50 	bl	83ea4 <strlen>
   85004:	940f      	str	r4, [sp, #60]	; 0x3c
   85006:	900e      	str	r0, [sp, #56]	; 0x38
   85008:	f8cd b01c 	str.w	fp, [sp, #28]
   8500c:	4603      	mov	r3, r0
   8500e:	f7ff b9e7 	b.w	843e0 <_svfprintf_r+0x4e0>
   85012:	272d      	movs	r7, #45	; 0x2d
   85014:	2300      	movs	r3, #0
   85016:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   8501a:	930a      	str	r3, [sp, #40]	; 0x28
   8501c:	f7ff b895 	b.w	8414a <_svfprintf_r+0x24a>
   85020:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85022:	461a      	mov	r2, r3
   85024:	9312      	str	r3, [sp, #72]	; 0x48
   85026:	3303      	adds	r3, #3
   85028:	db04      	blt.n	85034 <_svfprintf_r+0x1134>
   8502a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8502c:	4619      	mov	r1, r3
   8502e:	4291      	cmp	r1, r2
   85030:	f6bf af5e 	bge.w	84ef0 <_svfprintf_r+0xff0>
   85034:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85036:	3b02      	subs	r3, #2
   85038:	9311      	str	r3, [sp, #68]	; 0x44
   8503a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8503c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   85040:	3b01      	subs	r3, #1
   85042:	2b00      	cmp	r3, #0
   85044:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   85048:	bfb4      	ite	lt
   8504a:	222d      	movlt	r2, #45	; 0x2d
   8504c:	222b      	movge	r2, #43	; 0x2b
   8504e:	931f      	str	r3, [sp, #124]	; 0x7c
   85050:	bfb8      	it	lt
   85052:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   85054:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   85058:	bfb8      	it	lt
   8505a:	f1c3 0301 	rsblt	r3, r3, #1
   8505e:	2b09      	cmp	r3, #9
   85060:	f340 811f 	ble.w	852a2 <_svfprintf_r+0x13a2>
   85064:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   85068:	4601      	mov	r1, r0
   8506a:	4c68      	ldr	r4, [pc, #416]	; (8520c <_svfprintf_r+0x130c>)
   8506c:	e000      	b.n	85070 <_svfprintf_r+0x1170>
   8506e:	4611      	mov	r1, r2
   85070:	fb84 5203 	smull	r5, r2, r4, r3
   85074:	17dd      	asrs	r5, r3, #31
   85076:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   8507a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   8507e:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   85082:	3230      	adds	r2, #48	; 0x30
   85084:	2d09      	cmp	r5, #9
   85086:	f801 2c01 	strb.w	r2, [r1, #-1]
   8508a:	462b      	mov	r3, r5
   8508c:	f101 32ff 	add.w	r2, r1, #4294967295
   85090:	dced      	bgt.n	8506e <_svfprintf_r+0x116e>
   85092:	3330      	adds	r3, #48	; 0x30
   85094:	3902      	subs	r1, #2
   85096:	b2dc      	uxtb	r4, r3
   85098:	4288      	cmp	r0, r1
   8509a:	f802 4c01 	strb.w	r4, [r2, #-1]
   8509e:	f240 8192 	bls.w	853c6 <_svfprintf_r+0x14c6>
   850a2:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   850a6:	4613      	mov	r3, r2
   850a8:	e001      	b.n	850ae <_svfprintf_r+0x11ae>
   850aa:	f813 4b01 	ldrb.w	r4, [r3], #1
   850ae:	4283      	cmp	r3, r0
   850b0:	f801 4b01 	strb.w	r4, [r1], #1
   850b4:	d1f9      	bne.n	850aa <_svfprintf_r+0x11aa>
   850b6:	3301      	adds	r3, #1
   850b8:	1a9b      	subs	r3, r3, r2
   850ba:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   850be:	4413      	add	r3, r2
   850c0:	aa21      	add	r2, sp, #132	; 0x84
   850c2:	1a9b      	subs	r3, r3, r2
   850c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   850c6:	931b      	str	r3, [sp, #108]	; 0x6c
   850c8:	2a01      	cmp	r2, #1
   850ca:	4413      	add	r3, r2
   850cc:	930e      	str	r3, [sp, #56]	; 0x38
   850ce:	f340 8148 	ble.w	85362 <_svfprintf_r+0x1462>
   850d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   850d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   850d6:	4413      	add	r3, r2
   850d8:	930e      	str	r3, [sp, #56]	; 0x38
   850da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   850de:	9308      	str	r3, [sp, #32]
   850e0:	2300      	movs	r3, #0
   850e2:	9312      	str	r3, [sp, #72]	; 0x48
   850e4:	e714      	b.n	84f10 <_svfprintf_r+0x1010>
   850e6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   850e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   850ea:	f7ff b876 	b.w	841da <_svfprintf_r+0x2da>
   850ee:	aa25      	add	r2, sp, #148	; 0x94
   850f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   850f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   850f4:	f001 ffee 	bl	870d4 <__ssprint_r>
   850f8:	2800      	cmp	r0, #0
   850fa:	f47e afde 	bne.w	840ba <_svfprintf_r+0x1ba>
   850fe:	46c8      	mov	r8, r9
   85100:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85102:	e4fb      	b.n	84afc <_svfprintf_r+0xbfc>
   85104:	4623      	mov	r3, r4
   85106:	e6e3      	b.n	84ed0 <_svfprintf_r+0xfd0>
   85108:	aa25      	add	r2, sp, #148	; 0x94
   8510a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8510c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8510e:	f001 ffe1 	bl	870d4 <__ssprint_r>
   85112:	2800      	cmp	r0, #0
   85114:	f47e afd1 	bne.w	840ba <_svfprintf_r+0x1ba>
   85118:	46c8      	mov	r8, r9
   8511a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8511c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8511e:	e5d3      	b.n	84cc8 <_svfprintf_r+0xdc8>
   85120:	aa25      	add	r2, sp, #148	; 0x94
   85122:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85124:	980c      	ldr	r0, [sp, #48]	; 0x30
   85126:	f001 ffd5 	bl	870d4 <__ssprint_r>
   8512a:	2800      	cmp	r0, #0
   8512c:	f47e afc5 	bne.w	840ba <_svfprintf_r+0x1ba>
   85130:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   85132:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85134:	46c8      	mov	r8, r9
   85136:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85138:	1a9a      	subs	r2, r3, r2
   8513a:	e5dd      	b.n	84cf8 <_svfprintf_r+0xdf8>
   8513c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8513e:	f7ff b8fe 	b.w	8433e <_svfprintf_r+0x43e>
   85142:	aa25      	add	r2, sp, #148	; 0x94
   85144:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85146:	980c      	ldr	r0, [sp, #48]	; 0x30
   85148:	f001 ffc4 	bl	870d4 <__ssprint_r>
   8514c:	2800      	cmp	r0, #0
   8514e:	f47e afb4 	bne.w	840ba <_svfprintf_r+0x1ba>
   85152:	46c8      	mov	r8, r9
   85154:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85156:	e5b0      	b.n	84cba <_svfprintf_r+0xdba>
   85158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8515a:	4637      	mov	r7, r6
   8515c:	2b06      	cmp	r3, #6
   8515e:	bf28      	it	cs
   85160:	2306      	movcs	r3, #6
   85162:	960a      	str	r6, [sp, #40]	; 0x28
   85164:	9612      	str	r6, [sp, #72]	; 0x48
   85166:	9308      	str	r3, [sp, #32]
   85168:	940f      	str	r4, [sp, #60]	; 0x3c
   8516a:	f8cd b01c 	str.w	fp, [sp, #28]
   8516e:	930e      	str	r3, [sp, #56]	; 0x38
   85170:	4e27      	ldr	r6, [pc, #156]	; (85210 <_svfprintf_r+0x1310>)
   85172:	f7fe bfe9 	b.w	84148 <_svfprintf_r+0x248>
   85176:	2306      	movs	r3, #6
   85178:	930a      	str	r3, [sp, #40]	; 0x28
   8517a:	e663      	b.n	84e44 <_svfprintf_r+0xf44>
   8517c:	232d      	movs	r3, #45	; 0x2d
   8517e:	461f      	mov	r7, r3
   85180:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85184:	f7ff ba28 	b.w	845d8 <_svfprintf_r+0x6d8>
   85188:	2003      	movs	r0, #3
   8518a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8518c:	a923      	add	r1, sp, #140	; 0x8c
   8518e:	e88d 0011 	stmia.w	sp, {r0, r4}
   85192:	9104      	str	r1, [sp, #16]
   85194:	a820      	add	r0, sp, #128	; 0x80
   85196:	a91f      	add	r1, sp, #124	; 0x7c
   85198:	9003      	str	r0, [sp, #12]
   8519a:	9a08      	ldr	r2, [sp, #32]
   8519c:	463b      	mov	r3, r7
   8519e:	9102      	str	r1, [sp, #8]
   851a0:	980c      	ldr	r0, [sp, #48]	; 0x30
   851a2:	f000 f9d1 	bl	85548 <_dtoa_r>
   851a6:	4625      	mov	r5, r4
   851a8:	4606      	mov	r6, r0
   851aa:	1904      	adds	r4, r0, r4
   851ac:	e719      	b.n	84fe2 <_svfprintf_r+0x10e2>
   851ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   851b0:	4d15      	ldr	r5, [pc, #84]	; (85208 <_svfprintf_r+0x1308>)
   851b2:	f7ff bb7e 	b.w	848b2 <_svfprintf_r+0x9b2>
   851b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   851b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   851ba:	4413      	add	r3, r2
   851bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   851be:	930e      	str	r3, [sp, #56]	; 0x38
   851c0:	2a00      	cmp	r2, #0
   851c2:	f340 80c7 	ble.w	85354 <_svfprintf_r+0x1454>
   851c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   851ca:	9308      	str	r3, [sp, #32]
   851cc:	2367      	movs	r3, #103	; 0x67
   851ce:	9311      	str	r3, [sp, #68]	; 0x44
   851d0:	e69e      	b.n	84f10 <_svfprintf_r+0x1010>
   851d2:	2b00      	cmp	r3, #0
   851d4:	f340 80e1 	ble.w	8539a <_svfprintf_r+0x149a>
   851d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   851da:	2a00      	cmp	r2, #0
   851dc:	f040 80b0 	bne.w	85340 <_svfprintf_r+0x1440>
   851e0:	f01b 0f01 	tst.w	fp, #1
   851e4:	f040 80ac 	bne.w	85340 <_svfprintf_r+0x1440>
   851e8:	9308      	str	r3, [sp, #32]
   851ea:	930e      	str	r3, [sp, #56]	; 0x38
   851ec:	e690      	b.n	84f10 <_svfprintf_r+0x1010>
   851ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   851f0:	940f      	str	r4, [sp, #60]	; 0x3c
   851f2:	9308      	str	r3, [sp, #32]
   851f4:	930e      	str	r3, [sp, #56]	; 0x38
   851f6:	900a      	str	r0, [sp, #40]	; 0x28
   851f8:	f8cd b01c 	str.w	fp, [sp, #28]
   851fc:	9012      	str	r0, [sp, #72]	; 0x48
   851fe:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85202:	f7fe bfa1 	b.w	84148 <_svfprintf_r+0x248>
   85206:	bf00      	nop
   85208:	0008841c 	.word	0x0008841c
   8520c:	66666667 	.word	0x66666667
   85210:	00088400 	.word	0x00088400
   85214:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85216:	2b47      	cmp	r3, #71	; 0x47
   85218:	f47f ae46 	bne.w	84ea8 <_svfprintf_r+0xfa8>
   8521c:	f01b 0f01 	tst.w	fp, #1
   85220:	f47f aeda 	bne.w	84fd8 <_svfprintf_r+0x10d8>
   85224:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   85226:	1b9b      	subs	r3, r3, r6
   85228:	9313      	str	r3, [sp, #76]	; 0x4c
   8522a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8522c:	2b47      	cmp	r3, #71	; 0x47
   8522e:	f43f aef7 	beq.w	85020 <_svfprintf_r+0x1120>
   85232:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85234:	9312      	str	r3, [sp, #72]	; 0x48
   85236:	e700      	b.n	8503a <_svfprintf_r+0x113a>
   85238:	2000      	movs	r0, #0
   8523a:	900a      	str	r0, [sp, #40]	; 0x28
   8523c:	f7fe bebc 	b.w	83fb8 <_svfprintf_r+0xb8>
   85240:	424f      	negs	r7, r1
   85242:	3110      	adds	r1, #16
   85244:	da35      	bge.n	852b2 <_svfprintf_r+0x13b2>
   85246:	2410      	movs	r4, #16
   85248:	4d6a      	ldr	r5, [pc, #424]	; (853f4 <_svfprintf_r+0x14f4>)
   8524a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8524e:	e004      	b.n	8525a <_svfprintf_r+0x135a>
   85250:	f108 0808 	add.w	r8, r8, #8
   85254:	3f10      	subs	r7, #16
   85256:	2f10      	cmp	r7, #16
   85258:	dd2c      	ble.n	852b4 <_svfprintf_r+0x13b4>
   8525a:	3301      	adds	r3, #1
   8525c:	3210      	adds	r2, #16
   8525e:	2b07      	cmp	r3, #7
   85260:	9227      	str	r2, [sp, #156]	; 0x9c
   85262:	9326      	str	r3, [sp, #152]	; 0x98
   85264:	f8c8 5000 	str.w	r5, [r8]
   85268:	f8c8 4004 	str.w	r4, [r8, #4]
   8526c:	ddf0      	ble.n	85250 <_svfprintf_r+0x1350>
   8526e:	aa25      	add	r2, sp, #148	; 0x94
   85270:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85272:	4658      	mov	r0, fp
   85274:	f001 ff2e 	bl	870d4 <__ssprint_r>
   85278:	2800      	cmp	r0, #0
   8527a:	f47e af1e 	bne.w	840ba <_svfprintf_r+0x1ba>
   8527e:	46c8      	mov	r8, r9
   85280:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85282:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85284:	e7e6      	b.n	85254 <_svfprintf_r+0x1354>
   85286:	aa25      	add	r2, sp, #148	; 0x94
   85288:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8528a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8528c:	f001 ff22 	bl	870d4 <__ssprint_r>
   85290:	2800      	cmp	r0, #0
   85292:	f47e af12 	bne.w	840ba <_svfprintf_r+0x1ba>
   85296:	46c8      	mov	r8, r9
   85298:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8529a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8529c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8529e:	f7ff bbc3 	b.w	84a28 <_svfprintf_r+0xb28>
   852a2:	2230      	movs	r2, #48	; 0x30
   852a4:	4413      	add	r3, r2
   852a6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   852aa:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   852ae:	ab22      	add	r3, sp, #136	; 0x88
   852b0:	e706      	b.n	850c0 <_svfprintf_r+0x11c0>
   852b2:	4d50      	ldr	r5, [pc, #320]	; (853f4 <_svfprintf_r+0x14f4>)
   852b4:	3301      	adds	r3, #1
   852b6:	443a      	add	r2, r7
   852b8:	2b07      	cmp	r3, #7
   852ba:	e888 00a0 	stmia.w	r8, {r5, r7}
   852be:	9227      	str	r2, [sp, #156]	; 0x9c
   852c0:	9326      	str	r3, [sp, #152]	; 0x98
   852c2:	f108 0808 	add.w	r8, r8, #8
   852c6:	f77f abb2 	ble.w	84a2e <_svfprintf_r+0xb2e>
   852ca:	aa25      	add	r2, sp, #148	; 0x94
   852cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   852ce:	980c      	ldr	r0, [sp, #48]	; 0x30
   852d0:	f001 ff00 	bl	870d4 <__ssprint_r>
   852d4:	2800      	cmp	r0, #0
   852d6:	f47e aef0 	bne.w	840ba <_svfprintf_r+0x1ba>
   852da:	46c8      	mov	r8, r9
   852dc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   852de:	9b26      	ldr	r3, [sp, #152]	; 0x98
   852e0:	f7ff bba5 	b.w	84a2e <_svfprintf_r+0xb2e>
   852e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   852e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   852e8:	4413      	add	r3, r2
   852ea:	930e      	str	r3, [sp, #56]	; 0x38
   852ec:	e76b      	b.n	851c6 <_svfprintf_r+0x12c6>
   852ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   852f0:	e5ee      	b.n	84ed0 <_svfprintf_r+0xfd0>
   852f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   852f4:	4d3f      	ldr	r5, [pc, #252]	; (853f4 <_svfprintf_r+0x14f4>)
   852f6:	e4bb      	b.n	84c70 <_svfprintf_r+0xd70>
   852f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   852fa:	9808      	ldr	r0, [sp, #32]
   852fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   852fe:	4639      	mov	r1, r7
   85300:	f002 fdd2 	bl	87ea8 <__aeabi_dcmpeq>
   85304:	2800      	cmp	r0, #0
   85306:	f47f ae70 	bne.w	84fea <_svfprintf_r+0x10ea>
   8530a:	f1c5 0501 	rsb	r5, r5, #1
   8530e:	951f      	str	r5, [sp, #124]	; 0x7c
   85310:	442c      	add	r4, r5
   85312:	e5ca      	b.n	84eaa <_svfprintf_r+0xfaa>
   85314:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85316:	4e38      	ldr	r6, [pc, #224]	; (853f8 <_svfprintf_r+0x14f8>)
   85318:	2b00      	cmp	r3, #0
   8531a:	bfbe      	ittt	lt
   8531c:	232d      	movlt	r3, #45	; 0x2d
   8531e:	461f      	movlt	r7, r3
   85320:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   85324:	f04f 0303 	mov.w	r3, #3
   85328:	461a      	mov	r2, r3
   8532a:	9308      	str	r3, [sp, #32]
   8532c:	f04f 0300 	mov.w	r3, #0
   85330:	bfa8      	it	ge
   85332:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   85336:	4619      	mov	r1, r3
   85338:	930a      	str	r3, [sp, #40]	; 0x28
   8533a:	4b30      	ldr	r3, [pc, #192]	; (853fc <_svfprintf_r+0x14fc>)
   8533c:	f7ff b954 	b.w	845e8 <_svfprintf_r+0x6e8>
   85340:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85342:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85344:	4413      	add	r3, r2
   85346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85348:	441a      	add	r2, r3
   8534a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8534e:	920e      	str	r2, [sp, #56]	; 0x38
   85350:	9308      	str	r3, [sp, #32]
   85352:	e5dd      	b.n	84f10 <_svfprintf_r+0x1010>
   85354:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85356:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85358:	f1c3 0301 	rsb	r3, r3, #1
   8535c:	441a      	add	r2, r3
   8535e:	4613      	mov	r3, r2
   85360:	e7c3      	b.n	852ea <_svfprintf_r+0x13ea>
   85362:	f01b 0301 	ands.w	r3, fp, #1
   85366:	9312      	str	r3, [sp, #72]	; 0x48
   85368:	f47f aeb3 	bne.w	850d2 <_svfprintf_r+0x11d2>
   8536c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8536e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85372:	9308      	str	r3, [sp, #32]
   85374:	e5cc      	b.n	84f10 <_svfprintf_r+0x1010>
   85376:	4d1f      	ldr	r5, [pc, #124]	; (853f4 <_svfprintf_r+0x14f4>)
   85378:	e43c      	b.n	84bf4 <_svfprintf_r+0xcf4>
   8537a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8537c:	4d1d      	ldr	r5, [pc, #116]	; (853f4 <_svfprintf_r+0x14f4>)
   8537e:	e491      	b.n	84ca4 <_svfprintf_r+0xda4>
   85380:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   85382:	f89a 3001 	ldrb.w	r3, [sl, #1]
   85386:	6828      	ldr	r0, [r5, #0]
   85388:	46a2      	mov	sl, r4
   8538a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8538e:	900a      	str	r0, [sp, #40]	; 0x28
   85390:	4628      	mov	r0, r5
   85392:	3004      	adds	r0, #4
   85394:	900f      	str	r0, [sp, #60]	; 0x3c
   85396:	f7fe be0d 	b.w	83fb4 <_svfprintf_r+0xb4>
   8539a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8539c:	b913      	cbnz	r3, 853a4 <_svfprintf_r+0x14a4>
   8539e:	f01b 0f01 	tst.w	fp, #1
   853a2:	d002      	beq.n	853aa <_svfprintf_r+0x14aa>
   853a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   853a6:	3301      	adds	r3, #1
   853a8:	e7cd      	b.n	85346 <_svfprintf_r+0x1446>
   853aa:	2301      	movs	r3, #1
   853ac:	e71c      	b.n	851e8 <_svfprintf_r+0x12e8>
   853ae:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   853b2:	f7ff b980 	b.w	846b6 <_svfprintf_r+0x7b6>
   853b6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   853ba:	f7ff b93a 	b.w	84632 <_svfprintf_r+0x732>
   853be:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   853c2:	f7ff b84f 	b.w	84464 <_svfprintf_r+0x564>
   853c6:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   853ca:	e679      	b.n	850c0 <_svfprintf_r+0x11c0>
   853cc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   853d0:	f7ff b9b2 	b.w	84738 <_svfprintf_r+0x838>
   853d4:	f04f 32ff 	mov.w	r2, #4294967295
   853d8:	230c      	movs	r3, #12
   853da:	9209      	str	r2, [sp, #36]	; 0x24
   853dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   853de:	6013      	str	r3, [r2, #0]
   853e0:	f7fe be74 	b.w	840cc <_svfprintf_r+0x1cc>
   853e4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   853e8:	f7ff b8c4 	b.w	84574 <_svfprintf_r+0x674>
   853ec:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   853f0:	f7ff b878 	b.w	844e4 <_svfprintf_r+0x5e4>
   853f4:	0008841c 	.word	0x0008841c
   853f8:	000883d4 	.word	0x000883d4
   853fc:	000883d0 	.word	0x000883d0

00085400 <register_fini>:
   85400:	4b02      	ldr	r3, [pc, #8]	; (8540c <register_fini+0xc>)
   85402:	b113      	cbz	r3, 8540a <register_fini+0xa>
   85404:	4802      	ldr	r0, [pc, #8]	; (85410 <register_fini+0x10>)
   85406:	f000 b805 	b.w	85414 <atexit>
   8540a:	4770      	bx	lr
   8540c:	00000000 	.word	0x00000000
   85410:	0008638d 	.word	0x0008638d

00085414 <atexit>:
   85414:	2300      	movs	r3, #0
   85416:	4601      	mov	r1, r0
   85418:	461a      	mov	r2, r3
   8541a:	4618      	mov	r0, r3
   8541c:	f001 bed8 	b.w	871d0 <__register_exitproc>

00085420 <quorem>:
   85420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85424:	6903      	ldr	r3, [r0, #16]
   85426:	690f      	ldr	r7, [r1, #16]
   85428:	b083      	sub	sp, #12
   8542a:	429f      	cmp	r7, r3
   8542c:	f300 8088 	bgt.w	85540 <quorem+0x120>
   85430:	3f01      	subs	r7, #1
   85432:	f101 0614 	add.w	r6, r1, #20
   85436:	f100 0a14 	add.w	sl, r0, #20
   8543a:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   8543e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   85442:	3301      	adds	r3, #1
   85444:	fbb2 f8f3 	udiv	r8, r2, r3
   85448:	00bb      	lsls	r3, r7, #2
   8544a:	9300      	str	r3, [sp, #0]
   8544c:	eb06 0903 	add.w	r9, r6, r3
   85450:	4453      	add	r3, sl
   85452:	9301      	str	r3, [sp, #4]
   85454:	f1b8 0f00 	cmp.w	r8, #0
   85458:	d03b      	beq.n	854d2 <quorem+0xb2>
   8545a:	2300      	movs	r3, #0
   8545c:	46b4      	mov	ip, r6
   8545e:	461c      	mov	r4, r3
   85460:	46d6      	mov	lr, sl
   85462:	f85c 2b04 	ldr.w	r2, [ip], #4
   85466:	f8de 5000 	ldr.w	r5, [lr]
   8546a:	fa1f fb82 	uxth.w	fp, r2
   8546e:	fb08 330b 	mla	r3, r8, fp, r3
   85472:	0c12      	lsrs	r2, r2, #16
   85474:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   85478:	fb08 bb02 	mla	fp, r8, r2, fp
   8547c:	b29a      	uxth	r2, r3
   8547e:	1aa2      	subs	r2, r4, r2
   85480:	b2ab      	uxth	r3, r5
   85482:	fa1f f48b 	uxth.w	r4, fp
   85486:	441a      	add	r2, r3
   85488:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   8548c:	eb04 4422 	add.w	r4, r4, r2, asr #16
   85490:	b292      	uxth	r2, r2
   85492:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   85496:	45e1      	cmp	r9, ip
   85498:	f84e 2b04 	str.w	r2, [lr], #4
   8549c:	ea4f 4424 	mov.w	r4, r4, asr #16
   854a0:	ea4f 431b 	mov.w	r3, fp, lsr #16
   854a4:	d2dd      	bcs.n	85462 <quorem+0x42>
   854a6:	9b00      	ldr	r3, [sp, #0]
   854a8:	f85a 3003 	ldr.w	r3, [sl, r3]
   854ac:	b98b      	cbnz	r3, 854d2 <quorem+0xb2>
   854ae:	9c01      	ldr	r4, [sp, #4]
   854b0:	1f23      	subs	r3, r4, #4
   854b2:	459a      	cmp	sl, r3
   854b4:	d20c      	bcs.n	854d0 <quorem+0xb0>
   854b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   854ba:	b94b      	cbnz	r3, 854d0 <quorem+0xb0>
   854bc:	f1a4 0308 	sub.w	r3, r4, #8
   854c0:	e002      	b.n	854c8 <quorem+0xa8>
   854c2:	681a      	ldr	r2, [r3, #0]
   854c4:	3b04      	subs	r3, #4
   854c6:	b91a      	cbnz	r2, 854d0 <quorem+0xb0>
   854c8:	459a      	cmp	sl, r3
   854ca:	f107 37ff 	add.w	r7, r7, #4294967295
   854ce:	d3f8      	bcc.n	854c2 <quorem+0xa2>
   854d0:	6107      	str	r7, [r0, #16]
   854d2:	4604      	mov	r4, r0
   854d4:	f001 fcee 	bl	86eb4 <__mcmp>
   854d8:	2800      	cmp	r0, #0
   854da:	db2d      	blt.n	85538 <quorem+0x118>
   854dc:	4655      	mov	r5, sl
   854de:	2300      	movs	r3, #0
   854e0:	f108 0801 	add.w	r8, r8, #1
   854e4:	f856 1b04 	ldr.w	r1, [r6], #4
   854e8:	6828      	ldr	r0, [r5, #0]
   854ea:	b28a      	uxth	r2, r1
   854ec:	1a9a      	subs	r2, r3, r2
   854ee:	0c0b      	lsrs	r3, r1, #16
   854f0:	b281      	uxth	r1, r0
   854f2:	440a      	add	r2, r1
   854f4:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   854f8:	eb03 4322 	add.w	r3, r3, r2, asr #16
   854fc:	b292      	uxth	r2, r2
   854fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   85502:	45b1      	cmp	r9, r6
   85504:	f845 2b04 	str.w	r2, [r5], #4
   85508:	ea4f 4323 	mov.w	r3, r3, asr #16
   8550c:	d2ea      	bcs.n	854e4 <quorem+0xc4>
   8550e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   85512:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   85516:	b97a      	cbnz	r2, 85538 <quorem+0x118>
   85518:	1f1a      	subs	r2, r3, #4
   8551a:	4592      	cmp	sl, r2
   8551c:	d20b      	bcs.n	85536 <quorem+0x116>
   8551e:	f853 2c04 	ldr.w	r2, [r3, #-4]
   85522:	b942      	cbnz	r2, 85536 <quorem+0x116>
   85524:	3b08      	subs	r3, #8
   85526:	e002      	b.n	8552e <quorem+0x10e>
   85528:	681a      	ldr	r2, [r3, #0]
   8552a:	3b04      	subs	r3, #4
   8552c:	b91a      	cbnz	r2, 85536 <quorem+0x116>
   8552e:	459a      	cmp	sl, r3
   85530:	f107 37ff 	add.w	r7, r7, #4294967295
   85534:	d3f8      	bcc.n	85528 <quorem+0x108>
   85536:	6127      	str	r7, [r4, #16]
   85538:	4640      	mov	r0, r8
   8553a:	b003      	add	sp, #12
   8553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85540:	2000      	movs	r0, #0
   85542:	b003      	add	sp, #12
   85544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085548 <_dtoa_r>:
   85548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8554c:	6c05      	ldr	r5, [r0, #64]	; 0x40
   8554e:	b09b      	sub	sp, #108	; 0x6c
   85550:	4604      	mov	r4, r0
   85552:	4692      	mov	sl, r2
   85554:	469b      	mov	fp, r3
   85556:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   85558:	b14d      	cbz	r5, 8556e <_dtoa_r+0x26>
   8555a:	2301      	movs	r3, #1
   8555c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8555e:	4629      	mov	r1, r5
   85560:	4093      	lsls	r3, r2
   85562:	60ab      	str	r3, [r5, #8]
   85564:	606a      	str	r2, [r5, #4]
   85566:	f001 facd 	bl	86b04 <_Bfree>
   8556a:	2300      	movs	r3, #0
   8556c:	6423      	str	r3, [r4, #64]	; 0x40
   8556e:	f1bb 0f00 	cmp.w	fp, #0
   85572:	465d      	mov	r5, fp
   85574:	db35      	blt.n	855e2 <_dtoa_r+0x9a>
   85576:	2300      	movs	r3, #0
   85578:	6033      	str	r3, [r6, #0]
   8557a:	4b9d      	ldr	r3, [pc, #628]	; (857f0 <_dtoa_r+0x2a8>)
   8557c:	43ab      	bics	r3, r5
   8557e:	d015      	beq.n	855ac <_dtoa_r+0x64>
   85580:	2200      	movs	r2, #0
   85582:	2300      	movs	r3, #0
   85584:	4650      	mov	r0, sl
   85586:	4659      	mov	r1, fp
   85588:	f002 fc8e 	bl	87ea8 <__aeabi_dcmpeq>
   8558c:	4680      	mov	r8, r0
   8558e:	2800      	cmp	r0, #0
   85590:	d02d      	beq.n	855ee <_dtoa_r+0xa6>
   85592:	2301      	movs	r3, #1
   85594:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85596:	6013      	str	r3, [r2, #0]
   85598:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8559a:	2b00      	cmp	r3, #0
   8559c:	f000 80bd 	beq.w	8571a <_dtoa_r+0x1d2>
   855a0:	4894      	ldr	r0, [pc, #592]	; (857f4 <_dtoa_r+0x2ac>)
   855a2:	6018      	str	r0, [r3, #0]
   855a4:	3801      	subs	r0, #1
   855a6:	b01b      	add	sp, #108	; 0x6c
   855a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   855ac:	f242 730f 	movw	r3, #9999	; 0x270f
   855b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   855b2:	6013      	str	r3, [r2, #0]
   855b4:	f1ba 0f00 	cmp.w	sl, #0
   855b8:	d10d      	bne.n	855d6 <_dtoa_r+0x8e>
   855ba:	f3c5 0513 	ubfx	r5, r5, #0, #20
   855be:	b955      	cbnz	r5, 855d6 <_dtoa_r+0x8e>
   855c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   855c2:	488d      	ldr	r0, [pc, #564]	; (857f8 <_dtoa_r+0x2b0>)
   855c4:	2b00      	cmp	r3, #0
   855c6:	d0ee      	beq.n	855a6 <_dtoa_r+0x5e>
   855c8:	f100 0308 	add.w	r3, r0, #8
   855cc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   855ce:	6013      	str	r3, [r2, #0]
   855d0:	b01b      	add	sp, #108	; 0x6c
   855d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   855d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   855d8:	4888      	ldr	r0, [pc, #544]	; (857fc <_dtoa_r+0x2b4>)
   855da:	2b00      	cmp	r3, #0
   855dc:	d0e3      	beq.n	855a6 <_dtoa_r+0x5e>
   855de:	1cc3      	adds	r3, r0, #3
   855e0:	e7f4      	b.n	855cc <_dtoa_r+0x84>
   855e2:	2301      	movs	r3, #1
   855e4:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   855e8:	6033      	str	r3, [r6, #0]
   855ea:	46ab      	mov	fp, r5
   855ec:	e7c5      	b.n	8557a <_dtoa_r+0x32>
   855ee:	aa18      	add	r2, sp, #96	; 0x60
   855f0:	ab19      	add	r3, sp, #100	; 0x64
   855f2:	9201      	str	r2, [sp, #4]
   855f4:	9300      	str	r3, [sp, #0]
   855f6:	4652      	mov	r2, sl
   855f8:	465b      	mov	r3, fp
   855fa:	4620      	mov	r0, r4
   855fc:	f001 fd04 	bl	87008 <__d2b>
   85600:	0d2b      	lsrs	r3, r5, #20
   85602:	4681      	mov	r9, r0
   85604:	d071      	beq.n	856ea <_dtoa_r+0x1a2>
   85606:	4650      	mov	r0, sl
   85608:	f3cb 0213 	ubfx	r2, fp, #0, #20
   8560c:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   85610:	9f18      	ldr	r7, [sp, #96]	; 0x60
   85612:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   85616:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   8561a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8561e:	2200      	movs	r2, #0
   85620:	4b77      	ldr	r3, [pc, #476]	; (85800 <_dtoa_r+0x2b8>)
   85622:	f7fd fef5 	bl	83410 <__aeabi_dsub>
   85626:	a36c      	add	r3, pc, #432	; (adr r3, 857d8 <_dtoa_r+0x290>)
   85628:	e9d3 2300 	ldrd	r2, r3, [r3]
   8562c:	f002 f9d4 	bl	879d8 <__aeabi_dmul>
   85630:	a36b      	add	r3, pc, #428	; (adr r3, 857e0 <_dtoa_r+0x298>)
   85632:	e9d3 2300 	ldrd	r2, r3, [r3]
   85636:	f7fd feed 	bl	83414 <__adddf3>
   8563a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8563e:	4630      	mov	r0, r6
   85640:	f7fe f834 	bl	836ac <__aeabi_i2d>
   85644:	a368      	add	r3, pc, #416	; (adr r3, 857e8 <_dtoa_r+0x2a0>)
   85646:	e9d3 2300 	ldrd	r2, r3, [r3]
   8564a:	f002 f9c5 	bl	879d8 <__aeabi_dmul>
   8564e:	4602      	mov	r2, r0
   85650:	460b      	mov	r3, r1
   85652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   85656:	f7fd fedd 	bl	83414 <__adddf3>
   8565a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8565e:	f002 fc6b 	bl	87f38 <__aeabi_d2iz>
   85662:	2200      	movs	r2, #0
   85664:	9002      	str	r0, [sp, #8]
   85666:	2300      	movs	r3, #0
   85668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8566c:	f002 fc26 	bl	87ebc <__aeabi_dcmplt>
   85670:	2800      	cmp	r0, #0
   85672:	f040 816d 	bne.w	85950 <_dtoa_r+0x408>
   85676:	9d02      	ldr	r5, [sp, #8]
   85678:	2d16      	cmp	r5, #22
   8567a:	f200 8157 	bhi.w	8592c <_dtoa_r+0x3e4>
   8567e:	4961      	ldr	r1, [pc, #388]	; (85804 <_dtoa_r+0x2bc>)
   85680:	4652      	mov	r2, sl
   85682:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   85686:	465b      	mov	r3, fp
   85688:	e9d1 0100 	ldrd	r0, r1, [r1]
   8568c:	f002 fc34 	bl	87ef8 <__aeabi_dcmpgt>
   85690:	2800      	cmp	r0, #0
   85692:	f000 81be 	beq.w	85a12 <_dtoa_r+0x4ca>
   85696:	1e6b      	subs	r3, r5, #1
   85698:	9302      	str	r3, [sp, #8]
   8569a:	2300      	movs	r3, #0
   8569c:	930e      	str	r3, [sp, #56]	; 0x38
   8569e:	1bbf      	subs	r7, r7, r6
   856a0:	1e7b      	subs	r3, r7, #1
   856a2:	9308      	str	r3, [sp, #32]
   856a4:	f100 814e 	bmi.w	85944 <_dtoa_r+0x3fc>
   856a8:	2300      	movs	r3, #0
   856aa:	930a      	str	r3, [sp, #40]	; 0x28
   856ac:	9b02      	ldr	r3, [sp, #8]
   856ae:	2b00      	cmp	r3, #0
   856b0:	f2c0 813f 	blt.w	85932 <_dtoa_r+0x3ea>
   856b4:	9a08      	ldr	r2, [sp, #32]
   856b6:	930d      	str	r3, [sp, #52]	; 0x34
   856b8:	4611      	mov	r1, r2
   856ba:	4419      	add	r1, r3
   856bc:	2300      	movs	r3, #0
   856be:	9108      	str	r1, [sp, #32]
   856c0:	930c      	str	r3, [sp, #48]	; 0x30
   856c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   856c4:	2b09      	cmp	r3, #9
   856c6:	d82a      	bhi.n	8571e <_dtoa_r+0x1d6>
   856c8:	2b05      	cmp	r3, #5
   856ca:	f340 8658 	ble.w	8637e <_dtoa_r+0xe36>
   856ce:	2500      	movs	r5, #0
   856d0:	3b04      	subs	r3, #4
   856d2:	9324      	str	r3, [sp, #144]	; 0x90
   856d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   856d6:	3b02      	subs	r3, #2
   856d8:	2b03      	cmp	r3, #3
   856da:	f200 863f 	bhi.w	8635c <_dtoa_r+0xe14>
   856de:	e8df f013 	tbh	[pc, r3, lsl #1]
   856e2:	03ce      	.short	0x03ce
   856e4:	03d902c3 	.word	0x03d902c3
   856e8:	045b      	.short	0x045b
   856ea:	9f18      	ldr	r7, [sp, #96]	; 0x60
   856ec:	9e19      	ldr	r6, [sp, #100]	; 0x64
   856ee:	443e      	add	r6, r7
   856f0:	f206 4332 	addw	r3, r6, #1074	; 0x432
   856f4:	2b20      	cmp	r3, #32
   856f6:	f340 8187 	ble.w	85a08 <_dtoa_r+0x4c0>
   856fa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   856fe:	f206 4012 	addw	r0, r6, #1042	; 0x412
   85702:	409d      	lsls	r5, r3
   85704:	fa2a f000 	lsr.w	r0, sl, r0
   85708:	4328      	orrs	r0, r5
   8570a:	f7fd ffbf 	bl	8368c <__aeabi_ui2d>
   8570e:	2301      	movs	r3, #1
   85710:	3e01      	subs	r6, #1
   85712:	9314      	str	r3, [sp, #80]	; 0x50
   85714:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   85718:	e781      	b.n	8561e <_dtoa_r+0xd6>
   8571a:	483b      	ldr	r0, [pc, #236]	; (85808 <_dtoa_r+0x2c0>)
   8571c:	e743      	b.n	855a6 <_dtoa_r+0x5e>
   8571e:	2100      	movs	r1, #0
   85720:	4620      	mov	r0, r4
   85722:	6461      	str	r1, [r4, #68]	; 0x44
   85724:	9125      	str	r1, [sp, #148]	; 0x94
   85726:	f001 f9c7 	bl	86ab8 <_Balloc>
   8572a:	f04f 33ff 	mov.w	r3, #4294967295
   8572e:	9307      	str	r3, [sp, #28]
   85730:	930f      	str	r3, [sp, #60]	; 0x3c
   85732:	2301      	movs	r3, #1
   85734:	9a25      	ldr	r2, [sp, #148]	; 0x94
   85736:	9004      	str	r0, [sp, #16]
   85738:	6420      	str	r0, [r4, #64]	; 0x40
   8573a:	9224      	str	r2, [sp, #144]	; 0x90
   8573c:	930b      	str	r3, [sp, #44]	; 0x2c
   8573e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85740:	2b00      	cmp	r3, #0
   85742:	f2c0 80d3 	blt.w	858ec <_dtoa_r+0x3a4>
   85746:	9a02      	ldr	r2, [sp, #8]
   85748:	2a0e      	cmp	r2, #14
   8574a:	f300 80cf 	bgt.w	858ec <_dtoa_r+0x3a4>
   8574e:	4b2d      	ldr	r3, [pc, #180]	; (85804 <_dtoa_r+0x2bc>)
   85750:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85754:	e9d3 2300 	ldrd	r2, r3, [r3]
   85758:	e9cd 2308 	strd	r2, r3, [sp, #32]
   8575c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8575e:	2b00      	cmp	r3, #0
   85760:	f2c0 83b4 	blt.w	85ecc <_dtoa_r+0x984>
   85764:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   85768:	4650      	mov	r0, sl
   8576a:	462a      	mov	r2, r5
   8576c:	4633      	mov	r3, r6
   8576e:	4659      	mov	r1, fp
   85770:	f002 fa5c 	bl	87c2c <__aeabi_ddiv>
   85774:	f002 fbe0 	bl	87f38 <__aeabi_d2iz>
   85778:	4680      	mov	r8, r0
   8577a:	f7fd ff97 	bl	836ac <__aeabi_i2d>
   8577e:	462a      	mov	r2, r5
   85780:	4633      	mov	r3, r6
   85782:	f002 f929 	bl	879d8 <__aeabi_dmul>
   85786:	4602      	mov	r2, r0
   85788:	460b      	mov	r3, r1
   8578a:	4650      	mov	r0, sl
   8578c:	4659      	mov	r1, fp
   8578e:	f7fd fe3f 	bl	83410 <__aeabi_dsub>
   85792:	9e07      	ldr	r6, [sp, #28]
   85794:	9f04      	ldr	r7, [sp, #16]
   85796:	f108 0530 	add.w	r5, r8, #48	; 0x30
   8579a:	2e01      	cmp	r6, #1
   8579c:	703d      	strb	r5, [r7, #0]
   8579e:	4602      	mov	r2, r0
   857a0:	460b      	mov	r3, r1
   857a2:	f107 0501 	add.w	r5, r7, #1
   857a6:	d064      	beq.n	85872 <_dtoa_r+0x32a>
   857a8:	2200      	movs	r2, #0
   857aa:	4b18      	ldr	r3, [pc, #96]	; (8580c <_dtoa_r+0x2c4>)
   857ac:	f002 f914 	bl	879d8 <__aeabi_dmul>
   857b0:	2200      	movs	r2, #0
   857b2:	2300      	movs	r3, #0
   857b4:	4606      	mov	r6, r0
   857b6:	460f      	mov	r7, r1
   857b8:	f002 fb76 	bl	87ea8 <__aeabi_dcmpeq>
   857bc:	2800      	cmp	r0, #0
   857be:	f040 8082 	bne.w	858c6 <_dtoa_r+0x37e>
   857c2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   857c6:	f04f 0a00 	mov.w	sl, #0
   857ca:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   857ce:	f04f 0b00 	mov.w	fp, #0
   857d2:	940b      	str	r4, [sp, #44]	; 0x2c
   857d4:	e029      	b.n	8582a <_dtoa_r+0x2e2>
   857d6:	bf00      	nop
   857d8:	636f4361 	.word	0x636f4361
   857dc:	3fd287a7 	.word	0x3fd287a7
   857e0:	8b60c8b3 	.word	0x8b60c8b3
   857e4:	3fc68a28 	.word	0x3fc68a28
   857e8:	509f79fb 	.word	0x509f79fb
   857ec:	3fd34413 	.word	0x3fd34413
   857f0:	7ff00000 	.word	0x7ff00000
   857f4:	00088409 	.word	0x00088409
   857f8:	0008842c 	.word	0x0008842c
   857fc:	00088438 	.word	0x00088438
   85800:	3ff80000 	.word	0x3ff80000
   85804:	00088468 	.word	0x00088468
   85808:	00088408 	.word	0x00088408
   8580c:	40240000 	.word	0x40240000
   85810:	2200      	movs	r2, #0
   85812:	4b81      	ldr	r3, [pc, #516]	; (85a18 <_dtoa_r+0x4d0>)
   85814:	f002 f8e0 	bl	879d8 <__aeabi_dmul>
   85818:	4652      	mov	r2, sl
   8581a:	465b      	mov	r3, fp
   8581c:	4606      	mov	r6, r0
   8581e:	460f      	mov	r7, r1
   85820:	f002 fb42 	bl	87ea8 <__aeabi_dcmpeq>
   85824:	2800      	cmp	r0, #0
   85826:	f040 83ba 	bne.w	85f9e <_dtoa_r+0xa56>
   8582a:	4642      	mov	r2, r8
   8582c:	464b      	mov	r3, r9
   8582e:	4630      	mov	r0, r6
   85830:	4639      	mov	r1, r7
   85832:	f002 f9fb 	bl	87c2c <__aeabi_ddiv>
   85836:	f002 fb7f 	bl	87f38 <__aeabi_d2iz>
   8583a:	4604      	mov	r4, r0
   8583c:	f7fd ff36 	bl	836ac <__aeabi_i2d>
   85840:	4642      	mov	r2, r8
   85842:	464b      	mov	r3, r9
   85844:	f002 f8c8 	bl	879d8 <__aeabi_dmul>
   85848:	4602      	mov	r2, r0
   8584a:	460b      	mov	r3, r1
   8584c:	4630      	mov	r0, r6
   8584e:	4639      	mov	r1, r7
   85850:	f7fd fdde 	bl	83410 <__aeabi_dsub>
   85854:	f104 0630 	add.w	r6, r4, #48	; 0x30
   85858:	f805 6b01 	strb.w	r6, [r5], #1
   8585c:	9e04      	ldr	r6, [sp, #16]
   8585e:	9f07      	ldr	r7, [sp, #28]
   85860:	1bae      	subs	r6, r5, r6
   85862:	42be      	cmp	r6, r7
   85864:	4602      	mov	r2, r0
   85866:	460b      	mov	r3, r1
   85868:	d1d2      	bne.n	85810 <_dtoa_r+0x2c8>
   8586a:	46a0      	mov	r8, r4
   8586c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85870:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85872:	4610      	mov	r0, r2
   85874:	4619      	mov	r1, r3
   85876:	f7fd fdcd 	bl	83414 <__adddf3>
   8587a:	4606      	mov	r6, r0
   8587c:	460f      	mov	r7, r1
   8587e:	4602      	mov	r2, r0
   85880:	460b      	mov	r3, r1
   85882:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85886:	f002 fb19 	bl	87ebc <__aeabi_dcmplt>
   8588a:	b948      	cbnz	r0, 858a0 <_dtoa_r+0x358>
   8588c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85890:	4632      	mov	r2, r6
   85892:	463b      	mov	r3, r7
   85894:	f002 fb08 	bl	87ea8 <__aeabi_dcmpeq>
   85898:	b1a8      	cbz	r0, 858c6 <_dtoa_r+0x37e>
   8589a:	f018 0f01 	tst.w	r8, #1
   8589e:	d012      	beq.n	858c6 <_dtoa_r+0x37e>
   858a0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   858a4:	1e6b      	subs	r3, r5, #1
   858a6:	9a04      	ldr	r2, [sp, #16]
   858a8:	e004      	b.n	858b4 <_dtoa_r+0x36c>
   858aa:	429a      	cmp	r2, r3
   858ac:	f000 8402 	beq.w	860b4 <_dtoa_r+0xb6c>
   858b0:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   858b4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   858b8:	f103 0501 	add.w	r5, r3, #1
   858bc:	d0f5      	beq.n	858aa <_dtoa_r+0x362>
   858be:	f108 0801 	add.w	r8, r8, #1
   858c2:	f883 8000 	strb.w	r8, [r3]
   858c6:	4649      	mov	r1, r9
   858c8:	4620      	mov	r0, r4
   858ca:	f001 f91b 	bl	86b04 <_Bfree>
   858ce:	2200      	movs	r2, #0
   858d0:	9b02      	ldr	r3, [sp, #8]
   858d2:	702a      	strb	r2, [r5, #0]
   858d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   858d6:	3301      	adds	r3, #1
   858d8:	6013      	str	r3, [r2, #0]
   858da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   858dc:	2b00      	cmp	r3, #0
   858de:	f000 839f 	beq.w	86020 <_dtoa_r+0xad8>
   858e2:	9804      	ldr	r0, [sp, #16]
   858e4:	601d      	str	r5, [r3, #0]
   858e6:	b01b      	add	sp, #108	; 0x6c
   858e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   858ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   858ee:	2a00      	cmp	r2, #0
   858f0:	d03e      	beq.n	85970 <_dtoa_r+0x428>
   858f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   858f4:	2a01      	cmp	r2, #1
   858f6:	f340 8311 	ble.w	85f1c <_dtoa_r+0x9d4>
   858fa:	9b07      	ldr	r3, [sp, #28]
   858fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   858fe:	1e5f      	subs	r7, r3, #1
   85900:	42ba      	cmp	r2, r7
   85902:	f2c0 8390 	blt.w	86026 <_dtoa_r+0xade>
   85906:	1bd7      	subs	r7, r2, r7
   85908:	9b07      	ldr	r3, [sp, #28]
   8590a:	2b00      	cmp	r3, #0
   8590c:	f2c0 848c 	blt.w	86228 <_dtoa_r+0xce0>
   85910:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85912:	9b07      	ldr	r3, [sp, #28]
   85914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85916:	2101      	movs	r1, #1
   85918:	441a      	add	r2, r3
   8591a:	920a      	str	r2, [sp, #40]	; 0x28
   8591c:	9a08      	ldr	r2, [sp, #32]
   8591e:	4620      	mov	r0, r4
   85920:	441a      	add	r2, r3
   85922:	9208      	str	r2, [sp, #32]
   85924:	f001 f98a 	bl	86c3c <__i2b>
   85928:	4606      	mov	r6, r0
   8592a:	e023      	b.n	85974 <_dtoa_r+0x42c>
   8592c:	2301      	movs	r3, #1
   8592e:	930e      	str	r3, [sp, #56]	; 0x38
   85930:	e6b5      	b.n	8569e <_dtoa_r+0x156>
   85932:	2300      	movs	r3, #0
   85934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85936:	930d      	str	r3, [sp, #52]	; 0x34
   85938:	9b02      	ldr	r3, [sp, #8]
   8593a:	1ad2      	subs	r2, r2, r3
   8593c:	425b      	negs	r3, r3
   8593e:	920a      	str	r2, [sp, #40]	; 0x28
   85940:	930c      	str	r3, [sp, #48]	; 0x30
   85942:	e6be      	b.n	856c2 <_dtoa_r+0x17a>
   85944:	f1c7 0301 	rsb	r3, r7, #1
   85948:	930a      	str	r3, [sp, #40]	; 0x28
   8594a:	2300      	movs	r3, #0
   8594c:	9308      	str	r3, [sp, #32]
   8594e:	e6ad      	b.n	856ac <_dtoa_r+0x164>
   85950:	9d02      	ldr	r5, [sp, #8]
   85952:	4628      	mov	r0, r5
   85954:	f7fd feaa 	bl	836ac <__aeabi_i2d>
   85958:	4602      	mov	r2, r0
   8595a:	460b      	mov	r3, r1
   8595c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   85960:	f002 faa2 	bl	87ea8 <__aeabi_dcmpeq>
   85964:	2800      	cmp	r0, #0
   85966:	f47f ae86 	bne.w	85676 <_dtoa_r+0x12e>
   8596a:	1e6b      	subs	r3, r5, #1
   8596c:	9302      	str	r3, [sp, #8]
   8596e:	e682      	b.n	85676 <_dtoa_r+0x12e>
   85970:	ad0a      	add	r5, sp, #40	; 0x28
   85972:	cde0      	ldmia	r5, {r5, r6, r7}
   85974:	2d00      	cmp	r5, #0
   85976:	dd0c      	ble.n	85992 <_dtoa_r+0x44a>
   85978:	9908      	ldr	r1, [sp, #32]
   8597a:	2900      	cmp	r1, #0
   8597c:	460b      	mov	r3, r1
   8597e:	dd08      	ble.n	85992 <_dtoa_r+0x44a>
   85980:	42a9      	cmp	r1, r5
   85982:	bfa8      	it	ge
   85984:	462b      	movge	r3, r5
   85986:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85988:	1aed      	subs	r5, r5, r3
   8598a:	1ad2      	subs	r2, r2, r3
   8598c:	1acb      	subs	r3, r1, r3
   8598e:	920a      	str	r2, [sp, #40]	; 0x28
   85990:	9308      	str	r3, [sp, #32]
   85992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85994:	b1d3      	cbz	r3, 859cc <_dtoa_r+0x484>
   85996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85998:	2b00      	cmp	r3, #0
   8599a:	f000 82b8 	beq.w	85f0e <_dtoa_r+0x9c6>
   8599e:	2f00      	cmp	r7, #0
   859a0:	dd10      	ble.n	859c4 <_dtoa_r+0x47c>
   859a2:	4631      	mov	r1, r6
   859a4:	463a      	mov	r2, r7
   859a6:	4620      	mov	r0, r4
   859a8:	f001 f9e4 	bl	86d74 <__pow5mult>
   859ac:	464a      	mov	r2, r9
   859ae:	4601      	mov	r1, r0
   859b0:	4606      	mov	r6, r0
   859b2:	4620      	mov	r0, r4
   859b4:	f001 f94c 	bl	86c50 <__multiply>
   859b8:	4603      	mov	r3, r0
   859ba:	4649      	mov	r1, r9
   859bc:	4620      	mov	r0, r4
   859be:	4699      	mov	r9, r3
   859c0:	f001 f8a0 	bl	86b04 <_Bfree>
   859c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   859c6:	1bda      	subs	r2, r3, r7
   859c8:	f040 82a2 	bne.w	85f10 <_dtoa_r+0x9c8>
   859cc:	2101      	movs	r1, #1
   859ce:	4620      	mov	r0, r4
   859d0:	f001 f934 	bl	86c3c <__i2b>
   859d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   859d6:	4680      	mov	r8, r0
   859d8:	2b00      	cmp	r3, #0
   859da:	dd1f      	ble.n	85a1c <_dtoa_r+0x4d4>
   859dc:	4601      	mov	r1, r0
   859de:	461a      	mov	r2, r3
   859e0:	4620      	mov	r0, r4
   859e2:	f001 f9c7 	bl	86d74 <__pow5mult>
   859e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   859e8:	4680      	mov	r8, r0
   859ea:	2b01      	cmp	r3, #1
   859ec:	f340 8255 	ble.w	85e9a <_dtoa_r+0x952>
   859f0:	2300      	movs	r3, #0
   859f2:	930c      	str	r3, [sp, #48]	; 0x30
   859f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   859f8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   859fc:	6918      	ldr	r0, [r3, #16]
   859fe:	f001 f8cd 	bl	86b9c <__hi0bits>
   85a02:	f1c0 0020 	rsb	r0, r0, #32
   85a06:	e013      	b.n	85a30 <_dtoa_r+0x4e8>
   85a08:	f1c3 0520 	rsb	r5, r3, #32
   85a0c:	fa0a f005 	lsl.w	r0, sl, r5
   85a10:	e67b      	b.n	8570a <_dtoa_r+0x1c2>
   85a12:	900e      	str	r0, [sp, #56]	; 0x38
   85a14:	e643      	b.n	8569e <_dtoa_r+0x156>
   85a16:	bf00      	nop
   85a18:	40240000 	.word	0x40240000
   85a1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85a1e:	2b01      	cmp	r3, #1
   85a20:	f340 8285 	ble.w	85f2e <_dtoa_r+0x9e6>
   85a24:	2300      	movs	r3, #0
   85a26:	930c      	str	r3, [sp, #48]	; 0x30
   85a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85a2a:	2001      	movs	r0, #1
   85a2c:	2b00      	cmp	r3, #0
   85a2e:	d1e1      	bne.n	859f4 <_dtoa_r+0x4ac>
   85a30:	9a08      	ldr	r2, [sp, #32]
   85a32:	4410      	add	r0, r2
   85a34:	f010 001f 	ands.w	r0, r0, #31
   85a38:	f000 80a1 	beq.w	85b7e <_dtoa_r+0x636>
   85a3c:	f1c0 0320 	rsb	r3, r0, #32
   85a40:	2b04      	cmp	r3, #4
   85a42:	f340 8486 	ble.w	86352 <_dtoa_r+0xe0a>
   85a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85a48:	f1c0 001c 	rsb	r0, r0, #28
   85a4c:	4403      	add	r3, r0
   85a4e:	930a      	str	r3, [sp, #40]	; 0x28
   85a50:	4613      	mov	r3, r2
   85a52:	4403      	add	r3, r0
   85a54:	4405      	add	r5, r0
   85a56:	9308      	str	r3, [sp, #32]
   85a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85a5a:	2b00      	cmp	r3, #0
   85a5c:	dd05      	ble.n	85a6a <_dtoa_r+0x522>
   85a5e:	4649      	mov	r1, r9
   85a60:	461a      	mov	r2, r3
   85a62:	4620      	mov	r0, r4
   85a64:	f001 f9d6 	bl	86e14 <__lshift>
   85a68:	4681      	mov	r9, r0
   85a6a:	9b08      	ldr	r3, [sp, #32]
   85a6c:	2b00      	cmp	r3, #0
   85a6e:	dd05      	ble.n	85a7c <_dtoa_r+0x534>
   85a70:	4641      	mov	r1, r8
   85a72:	461a      	mov	r2, r3
   85a74:	4620      	mov	r0, r4
   85a76:	f001 f9cd 	bl	86e14 <__lshift>
   85a7a:	4680      	mov	r8, r0
   85a7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85a7e:	2b00      	cmp	r3, #0
   85a80:	f040 8086 	bne.w	85b90 <_dtoa_r+0x648>
   85a84:	9b07      	ldr	r3, [sp, #28]
   85a86:	2b00      	cmp	r3, #0
   85a88:	f340 8264 	ble.w	85f54 <_dtoa_r+0xa0c>
   85a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85a8e:	2b00      	cmp	r3, #0
   85a90:	f000 8098 	beq.w	85bc4 <_dtoa_r+0x67c>
   85a94:	2d00      	cmp	r5, #0
   85a96:	dd05      	ble.n	85aa4 <_dtoa_r+0x55c>
   85a98:	4631      	mov	r1, r6
   85a9a:	462a      	mov	r2, r5
   85a9c:	4620      	mov	r0, r4
   85a9e:	f001 f9b9 	bl	86e14 <__lshift>
   85aa2:	4606      	mov	r6, r0
   85aa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85aa6:	2b00      	cmp	r3, #0
   85aa8:	f040 8336 	bne.w	86118 <_dtoa_r+0xbd0>
   85aac:	9608      	str	r6, [sp, #32]
   85aae:	9b07      	ldr	r3, [sp, #28]
   85ab0:	9a04      	ldr	r2, [sp, #16]
   85ab2:	3b01      	subs	r3, #1
   85ab4:	18d3      	adds	r3, r2, r3
   85ab6:	930b      	str	r3, [sp, #44]	; 0x2c
   85ab8:	4617      	mov	r7, r2
   85aba:	f00a 0301 	and.w	r3, sl, #1
   85abe:	46c2      	mov	sl, r8
   85ac0:	f8dd b020 	ldr.w	fp, [sp, #32]
   85ac4:	930c      	str	r3, [sp, #48]	; 0x30
   85ac6:	4651      	mov	r1, sl
   85ac8:	4648      	mov	r0, r9
   85aca:	f7ff fca9 	bl	85420 <quorem>
   85ace:	4631      	mov	r1, r6
   85ad0:	4605      	mov	r5, r0
   85ad2:	4648      	mov	r0, r9
   85ad4:	f001 f9ee 	bl	86eb4 <__mcmp>
   85ad8:	465a      	mov	r2, fp
   85ada:	9007      	str	r0, [sp, #28]
   85adc:	4651      	mov	r1, sl
   85ade:	4620      	mov	r0, r4
   85ae0:	f001 fa04 	bl	86eec <__mdiff>
   85ae4:	68c2      	ldr	r2, [r0, #12]
   85ae6:	4680      	mov	r8, r0
   85ae8:	f105 0330 	add.w	r3, r5, #48	; 0x30
   85aec:	2a00      	cmp	r2, #0
   85aee:	f040 8229 	bne.w	85f44 <_dtoa_r+0x9fc>
   85af2:	4601      	mov	r1, r0
   85af4:	4648      	mov	r0, r9
   85af6:	930a      	str	r3, [sp, #40]	; 0x28
   85af8:	f001 f9dc 	bl	86eb4 <__mcmp>
   85afc:	4641      	mov	r1, r8
   85afe:	9008      	str	r0, [sp, #32]
   85b00:	4620      	mov	r0, r4
   85b02:	f000 ffff 	bl	86b04 <_Bfree>
   85b06:	9a08      	ldr	r2, [sp, #32]
   85b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85b0a:	b932      	cbnz	r2, 85b1a <_dtoa_r+0x5d2>
   85b0c:	9924      	ldr	r1, [sp, #144]	; 0x90
   85b0e:	b921      	cbnz	r1, 85b1a <_dtoa_r+0x5d2>
   85b10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85b12:	2a00      	cmp	r2, #0
   85b14:	f000 83ee 	beq.w	862f4 <_dtoa_r+0xdac>
   85b18:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85b1a:	9907      	ldr	r1, [sp, #28]
   85b1c:	2900      	cmp	r1, #0
   85b1e:	f2c0 829f 	blt.w	86060 <_dtoa_r+0xb18>
   85b22:	d105      	bne.n	85b30 <_dtoa_r+0x5e8>
   85b24:	9924      	ldr	r1, [sp, #144]	; 0x90
   85b26:	b919      	cbnz	r1, 85b30 <_dtoa_r+0x5e8>
   85b28:	990c      	ldr	r1, [sp, #48]	; 0x30
   85b2a:	2900      	cmp	r1, #0
   85b2c:	f000 8298 	beq.w	86060 <_dtoa_r+0xb18>
   85b30:	2a00      	cmp	r2, #0
   85b32:	f300 8305 	bgt.w	86140 <_dtoa_r+0xbf8>
   85b36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85b38:	f107 0801 	add.w	r8, r7, #1
   85b3c:	4297      	cmp	r7, r2
   85b3e:	703b      	strb	r3, [r7, #0]
   85b40:	4645      	mov	r5, r8
   85b42:	f000 830b 	beq.w	8615c <_dtoa_r+0xc14>
   85b46:	4649      	mov	r1, r9
   85b48:	2300      	movs	r3, #0
   85b4a:	220a      	movs	r2, #10
   85b4c:	4620      	mov	r0, r4
   85b4e:	f000 ffe3 	bl	86b18 <__multadd>
   85b52:	455e      	cmp	r6, fp
   85b54:	4681      	mov	r9, r0
   85b56:	4631      	mov	r1, r6
   85b58:	f04f 0300 	mov.w	r3, #0
   85b5c:	f04f 020a 	mov.w	r2, #10
   85b60:	4620      	mov	r0, r4
   85b62:	f000 81e9 	beq.w	85f38 <_dtoa_r+0x9f0>
   85b66:	f000 ffd7 	bl	86b18 <__multadd>
   85b6a:	4659      	mov	r1, fp
   85b6c:	4606      	mov	r6, r0
   85b6e:	2300      	movs	r3, #0
   85b70:	220a      	movs	r2, #10
   85b72:	4620      	mov	r0, r4
   85b74:	f000 ffd0 	bl	86b18 <__multadd>
   85b78:	4647      	mov	r7, r8
   85b7a:	4683      	mov	fp, r0
   85b7c:	e7a3      	b.n	85ac6 <_dtoa_r+0x57e>
   85b7e:	201c      	movs	r0, #28
   85b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85b82:	4405      	add	r5, r0
   85b84:	4403      	add	r3, r0
   85b86:	930a      	str	r3, [sp, #40]	; 0x28
   85b88:	9b08      	ldr	r3, [sp, #32]
   85b8a:	4403      	add	r3, r0
   85b8c:	9308      	str	r3, [sp, #32]
   85b8e:	e763      	b.n	85a58 <_dtoa_r+0x510>
   85b90:	4641      	mov	r1, r8
   85b92:	4648      	mov	r0, r9
   85b94:	f001 f98e 	bl	86eb4 <__mcmp>
   85b98:	2800      	cmp	r0, #0
   85b9a:	f6bf af73 	bge.w	85a84 <_dtoa_r+0x53c>
   85b9e:	9f02      	ldr	r7, [sp, #8]
   85ba0:	4649      	mov	r1, r9
   85ba2:	2300      	movs	r3, #0
   85ba4:	220a      	movs	r2, #10
   85ba6:	4620      	mov	r0, r4
   85ba8:	3f01      	subs	r7, #1
   85baa:	9702      	str	r7, [sp, #8]
   85bac:	f000 ffb4 	bl	86b18 <__multadd>
   85bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85bb2:	4681      	mov	r9, r0
   85bb4:	2b00      	cmp	r3, #0
   85bb6:	f040 83b5 	bne.w	86324 <_dtoa_r+0xddc>
   85bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85bbc:	2b00      	cmp	r3, #0
   85bbe:	f340 83be 	ble.w	8633e <_dtoa_r+0xdf6>
   85bc2:	9307      	str	r3, [sp, #28]
   85bc4:	f8dd a010 	ldr.w	sl, [sp, #16]
   85bc8:	9f07      	ldr	r7, [sp, #28]
   85bca:	4655      	mov	r5, sl
   85bcc:	e006      	b.n	85bdc <_dtoa_r+0x694>
   85bce:	4649      	mov	r1, r9
   85bd0:	2300      	movs	r3, #0
   85bd2:	220a      	movs	r2, #10
   85bd4:	4620      	mov	r0, r4
   85bd6:	f000 ff9f 	bl	86b18 <__multadd>
   85bda:	4681      	mov	r9, r0
   85bdc:	4641      	mov	r1, r8
   85bde:	4648      	mov	r0, r9
   85be0:	f7ff fc1e 	bl	85420 <quorem>
   85be4:	3030      	adds	r0, #48	; 0x30
   85be6:	f805 0b01 	strb.w	r0, [r5], #1
   85bea:	eba5 030a 	sub.w	r3, r5, sl
   85bee:	42bb      	cmp	r3, r7
   85bf0:	dbed      	blt.n	85bce <_dtoa_r+0x686>
   85bf2:	9b04      	ldr	r3, [sp, #16]
   85bf4:	9a07      	ldr	r2, [sp, #28]
   85bf6:	4682      	mov	sl, r0
   85bf8:	2a01      	cmp	r2, #1
   85bfa:	bfac      	ite	ge
   85bfc:	189b      	addge	r3, r3, r2
   85bfe:	3301      	addlt	r3, #1
   85c00:	f04f 0b00 	mov.w	fp, #0
   85c04:	461d      	mov	r5, r3
   85c06:	4649      	mov	r1, r9
   85c08:	2201      	movs	r2, #1
   85c0a:	4620      	mov	r0, r4
   85c0c:	f001 f902 	bl	86e14 <__lshift>
   85c10:	4641      	mov	r1, r8
   85c12:	4681      	mov	r9, r0
   85c14:	f001 f94e 	bl	86eb4 <__mcmp>
   85c18:	2800      	cmp	r0, #0
   85c1a:	f340 823f 	ble.w	8609c <_dtoa_r+0xb54>
   85c1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   85c22:	1e6b      	subs	r3, r5, #1
   85c24:	9904      	ldr	r1, [sp, #16]
   85c26:	e004      	b.n	85c32 <_dtoa_r+0x6ea>
   85c28:	428b      	cmp	r3, r1
   85c2a:	f000 81ae 	beq.w	85f8a <_dtoa_r+0xa42>
   85c2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   85c32:	2a39      	cmp	r2, #57	; 0x39
   85c34:	f103 0501 	add.w	r5, r3, #1
   85c38:	d0f6      	beq.n	85c28 <_dtoa_r+0x6e0>
   85c3a:	3201      	adds	r2, #1
   85c3c:	701a      	strb	r2, [r3, #0]
   85c3e:	4641      	mov	r1, r8
   85c40:	4620      	mov	r0, r4
   85c42:	f000 ff5f 	bl	86b04 <_Bfree>
   85c46:	2e00      	cmp	r6, #0
   85c48:	f43f ae3d 	beq.w	858c6 <_dtoa_r+0x37e>
   85c4c:	f1bb 0f00 	cmp.w	fp, #0
   85c50:	d005      	beq.n	85c5e <_dtoa_r+0x716>
   85c52:	45b3      	cmp	fp, r6
   85c54:	d003      	beq.n	85c5e <_dtoa_r+0x716>
   85c56:	4659      	mov	r1, fp
   85c58:	4620      	mov	r0, r4
   85c5a:	f000 ff53 	bl	86b04 <_Bfree>
   85c5e:	4631      	mov	r1, r6
   85c60:	4620      	mov	r0, r4
   85c62:	f000 ff4f 	bl	86b04 <_Bfree>
   85c66:	e62e      	b.n	858c6 <_dtoa_r+0x37e>
   85c68:	2300      	movs	r3, #0
   85c6a:	930b      	str	r3, [sp, #44]	; 0x2c
   85c6c:	9b02      	ldr	r3, [sp, #8]
   85c6e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   85c70:	4413      	add	r3, r2
   85c72:	930f      	str	r3, [sp, #60]	; 0x3c
   85c74:	3301      	adds	r3, #1
   85c76:	2b01      	cmp	r3, #1
   85c78:	461f      	mov	r7, r3
   85c7a:	461e      	mov	r6, r3
   85c7c:	bfb8      	it	lt
   85c7e:	2701      	movlt	r7, #1
   85c80:	9307      	str	r3, [sp, #28]
   85c82:	2100      	movs	r1, #0
   85c84:	2f17      	cmp	r7, #23
   85c86:	6461      	str	r1, [r4, #68]	; 0x44
   85c88:	d90a      	bls.n	85ca0 <_dtoa_r+0x758>
   85c8a:	2201      	movs	r2, #1
   85c8c:	2304      	movs	r3, #4
   85c8e:	005b      	lsls	r3, r3, #1
   85c90:	f103 0014 	add.w	r0, r3, #20
   85c94:	4287      	cmp	r7, r0
   85c96:	4611      	mov	r1, r2
   85c98:	f102 0201 	add.w	r2, r2, #1
   85c9c:	d2f7      	bcs.n	85c8e <_dtoa_r+0x746>
   85c9e:	6461      	str	r1, [r4, #68]	; 0x44
   85ca0:	4620      	mov	r0, r4
   85ca2:	f000 ff09 	bl	86ab8 <_Balloc>
   85ca6:	2e0e      	cmp	r6, #14
   85ca8:	9004      	str	r0, [sp, #16]
   85caa:	6420      	str	r0, [r4, #64]	; 0x40
   85cac:	f63f ad47 	bhi.w	8573e <_dtoa_r+0x1f6>
   85cb0:	2d00      	cmp	r5, #0
   85cb2:	f43f ad44 	beq.w	8573e <_dtoa_r+0x1f6>
   85cb6:	9902      	ldr	r1, [sp, #8]
   85cb8:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   85cbc:	2900      	cmp	r1, #0
   85cbe:	f340 8203 	ble.w	860c8 <_dtoa_r+0xb80>
   85cc2:	4bb9      	ldr	r3, [pc, #740]	; (85fa8 <_dtoa_r+0xa60>)
   85cc4:	f001 020f 	and.w	r2, r1, #15
   85cc8:	110d      	asrs	r5, r1, #4
   85cca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85cce:	06e9      	lsls	r1, r5, #27
   85cd0:	e9d3 6700 	ldrd	r6, r7, [r3]
   85cd4:	f140 81af 	bpl.w	86036 <_dtoa_r+0xaee>
   85cd8:	4bb4      	ldr	r3, [pc, #720]	; (85fac <_dtoa_r+0xa64>)
   85cda:	4650      	mov	r0, sl
   85cdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   85ce0:	4659      	mov	r1, fp
   85ce2:	f001 ffa3 	bl	87c2c <__aeabi_ddiv>
   85ce6:	f04f 0a03 	mov.w	sl, #3
   85cea:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   85cee:	f005 050f 	and.w	r5, r5, #15
   85cf2:	b18d      	cbz	r5, 85d18 <_dtoa_r+0x7d0>
   85cf4:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 85fac <_dtoa_r+0xa64>
   85cf8:	07ea      	lsls	r2, r5, #31
   85cfa:	d509      	bpl.n	85d10 <_dtoa_r+0x7c8>
   85cfc:	e9d8 2300 	ldrd	r2, r3, [r8]
   85d00:	4630      	mov	r0, r6
   85d02:	4639      	mov	r1, r7
   85d04:	f001 fe68 	bl	879d8 <__aeabi_dmul>
   85d08:	4606      	mov	r6, r0
   85d0a:	460f      	mov	r7, r1
   85d0c:	f10a 0a01 	add.w	sl, sl, #1
   85d10:	106d      	asrs	r5, r5, #1
   85d12:	f108 0808 	add.w	r8, r8, #8
   85d16:	d1ef      	bne.n	85cf8 <_dtoa_r+0x7b0>
   85d18:	463b      	mov	r3, r7
   85d1a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   85d1e:	4632      	mov	r2, r6
   85d20:	f001 ff84 	bl	87c2c <__aeabi_ddiv>
   85d24:	4607      	mov	r7, r0
   85d26:	4688      	mov	r8, r1
   85d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85d2a:	b143      	cbz	r3, 85d3e <_dtoa_r+0x7f6>
   85d2c:	2200      	movs	r2, #0
   85d2e:	4ba0      	ldr	r3, [pc, #640]	; (85fb0 <_dtoa_r+0xa68>)
   85d30:	4638      	mov	r0, r7
   85d32:	4641      	mov	r1, r8
   85d34:	f002 f8c2 	bl	87ebc <__aeabi_dcmplt>
   85d38:	2800      	cmp	r0, #0
   85d3a:	f040 8287 	bne.w	8624c <_dtoa_r+0xd04>
   85d3e:	4650      	mov	r0, sl
   85d40:	f7fd fcb4 	bl	836ac <__aeabi_i2d>
   85d44:	463a      	mov	r2, r7
   85d46:	4643      	mov	r3, r8
   85d48:	f001 fe46 	bl	879d8 <__aeabi_dmul>
   85d4c:	4b99      	ldr	r3, [pc, #612]	; (85fb4 <_dtoa_r+0xa6c>)
   85d4e:	2200      	movs	r2, #0
   85d50:	f7fd fb60 	bl	83414 <__adddf3>
   85d54:	9b07      	ldr	r3, [sp, #28]
   85d56:	4605      	mov	r5, r0
   85d58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   85d5c:	2b00      	cmp	r3, #0
   85d5e:	f000 813f 	beq.w	85fe0 <_dtoa_r+0xa98>
   85d62:	9b02      	ldr	r3, [sp, #8]
   85d64:	9315      	str	r3, [sp, #84]	; 0x54
   85d66:	9b07      	ldr	r3, [sp, #28]
   85d68:	9312      	str	r3, [sp, #72]	; 0x48
   85d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85d6c:	2b00      	cmp	r3, #0
   85d6e:	f000 81fb 	beq.w	86168 <_dtoa_r+0xc20>
   85d72:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85d74:	4b8c      	ldr	r3, [pc, #560]	; (85fa8 <_dtoa_r+0xa60>)
   85d76:	2000      	movs	r0, #0
   85d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85d7c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   85d80:	498d      	ldr	r1, [pc, #564]	; (85fb8 <_dtoa_r+0xa70>)
   85d82:	f001 ff53 	bl	87c2c <__aeabi_ddiv>
   85d86:	462a      	mov	r2, r5
   85d88:	4633      	mov	r3, r6
   85d8a:	f7fd fb41 	bl	83410 <__aeabi_dsub>
   85d8e:	4682      	mov	sl, r0
   85d90:	468b      	mov	fp, r1
   85d92:	4638      	mov	r0, r7
   85d94:	4641      	mov	r1, r8
   85d96:	f002 f8cf 	bl	87f38 <__aeabi_d2iz>
   85d9a:	4605      	mov	r5, r0
   85d9c:	f7fd fc86 	bl	836ac <__aeabi_i2d>
   85da0:	4602      	mov	r2, r0
   85da2:	460b      	mov	r3, r1
   85da4:	4638      	mov	r0, r7
   85da6:	4641      	mov	r1, r8
   85da8:	f7fd fb32 	bl	83410 <__aeabi_dsub>
   85dac:	3530      	adds	r5, #48	; 0x30
   85dae:	fa5f f885 	uxtb.w	r8, r5
   85db2:	9d04      	ldr	r5, [sp, #16]
   85db4:	4606      	mov	r6, r0
   85db6:	460f      	mov	r7, r1
   85db8:	f885 8000 	strb.w	r8, [r5]
   85dbc:	4602      	mov	r2, r0
   85dbe:	460b      	mov	r3, r1
   85dc0:	4650      	mov	r0, sl
   85dc2:	4659      	mov	r1, fp
   85dc4:	3501      	adds	r5, #1
   85dc6:	f002 f897 	bl	87ef8 <__aeabi_dcmpgt>
   85dca:	2800      	cmp	r0, #0
   85dcc:	d154      	bne.n	85e78 <_dtoa_r+0x930>
   85dce:	4632      	mov	r2, r6
   85dd0:	463b      	mov	r3, r7
   85dd2:	2000      	movs	r0, #0
   85dd4:	4976      	ldr	r1, [pc, #472]	; (85fb0 <_dtoa_r+0xa68>)
   85dd6:	f7fd fb1b 	bl	83410 <__aeabi_dsub>
   85dda:	4602      	mov	r2, r0
   85ddc:	460b      	mov	r3, r1
   85dde:	4650      	mov	r0, sl
   85de0:	4659      	mov	r1, fp
   85de2:	f002 f889 	bl	87ef8 <__aeabi_dcmpgt>
   85de6:	2800      	cmp	r0, #0
   85de8:	f040 8270 	bne.w	862cc <_dtoa_r+0xd84>
   85dec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85dee:	2a01      	cmp	r2, #1
   85df0:	f000 8112 	beq.w	86018 <_dtoa_r+0xad0>
   85df4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85df6:	9a04      	ldr	r2, [sp, #16]
   85df8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   85dfc:	4413      	add	r3, r2
   85dfe:	4699      	mov	r9, r3
   85e00:	e00f      	b.n	85e22 <_dtoa_r+0x8da>
   85e02:	4632      	mov	r2, r6
   85e04:	463b      	mov	r3, r7
   85e06:	2000      	movs	r0, #0
   85e08:	4969      	ldr	r1, [pc, #420]	; (85fb0 <_dtoa_r+0xa68>)
   85e0a:	f7fd fb01 	bl	83410 <__aeabi_dsub>
   85e0e:	4652      	mov	r2, sl
   85e10:	465b      	mov	r3, fp
   85e12:	f002 f853 	bl	87ebc <__aeabi_dcmplt>
   85e16:	2800      	cmp	r0, #0
   85e18:	f040 8256 	bne.w	862c8 <_dtoa_r+0xd80>
   85e1c:	454d      	cmp	r5, r9
   85e1e:	f000 80f9 	beq.w	86014 <_dtoa_r+0xacc>
   85e22:	4650      	mov	r0, sl
   85e24:	4659      	mov	r1, fp
   85e26:	2200      	movs	r2, #0
   85e28:	4b64      	ldr	r3, [pc, #400]	; (85fbc <_dtoa_r+0xa74>)
   85e2a:	f001 fdd5 	bl	879d8 <__aeabi_dmul>
   85e2e:	2200      	movs	r2, #0
   85e30:	4b62      	ldr	r3, [pc, #392]	; (85fbc <_dtoa_r+0xa74>)
   85e32:	4682      	mov	sl, r0
   85e34:	468b      	mov	fp, r1
   85e36:	4630      	mov	r0, r6
   85e38:	4639      	mov	r1, r7
   85e3a:	f001 fdcd 	bl	879d8 <__aeabi_dmul>
   85e3e:	460f      	mov	r7, r1
   85e40:	4606      	mov	r6, r0
   85e42:	f002 f879 	bl	87f38 <__aeabi_d2iz>
   85e46:	4680      	mov	r8, r0
   85e48:	f7fd fc30 	bl	836ac <__aeabi_i2d>
   85e4c:	4602      	mov	r2, r0
   85e4e:	460b      	mov	r3, r1
   85e50:	4630      	mov	r0, r6
   85e52:	4639      	mov	r1, r7
   85e54:	f7fd fadc 	bl	83410 <__aeabi_dsub>
   85e58:	f108 0830 	add.w	r8, r8, #48	; 0x30
   85e5c:	fa5f f888 	uxtb.w	r8, r8
   85e60:	f805 8b01 	strb.w	r8, [r5], #1
   85e64:	4652      	mov	r2, sl
   85e66:	465b      	mov	r3, fp
   85e68:	4606      	mov	r6, r0
   85e6a:	460f      	mov	r7, r1
   85e6c:	f002 f826 	bl	87ebc <__aeabi_dcmplt>
   85e70:	2800      	cmp	r0, #0
   85e72:	d0c6      	beq.n	85e02 <_dtoa_r+0x8ba>
   85e74:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85e78:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85e7a:	9302      	str	r3, [sp, #8]
   85e7c:	e523      	b.n	858c6 <_dtoa_r+0x37e>
   85e7e:	2300      	movs	r3, #0
   85e80:	930b      	str	r3, [sp, #44]	; 0x2c
   85e82:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85e84:	2b00      	cmp	r3, #0
   85e86:	f340 80dd 	ble.w	86044 <_dtoa_r+0xafc>
   85e8a:	461f      	mov	r7, r3
   85e8c:	461e      	mov	r6, r3
   85e8e:	930f      	str	r3, [sp, #60]	; 0x3c
   85e90:	9307      	str	r3, [sp, #28]
   85e92:	e6f6      	b.n	85c82 <_dtoa_r+0x73a>
   85e94:	2301      	movs	r3, #1
   85e96:	930b      	str	r3, [sp, #44]	; 0x2c
   85e98:	e7f3      	b.n	85e82 <_dtoa_r+0x93a>
   85e9a:	f1ba 0f00 	cmp.w	sl, #0
   85e9e:	f47f ada7 	bne.w	859f0 <_dtoa_r+0x4a8>
   85ea2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   85ea6:	2b00      	cmp	r3, #0
   85ea8:	f47f adbc 	bne.w	85a24 <_dtoa_r+0x4dc>
   85eac:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   85eb0:	0d3f      	lsrs	r7, r7, #20
   85eb2:	053f      	lsls	r7, r7, #20
   85eb4:	2f00      	cmp	r7, #0
   85eb6:	f000 820d 	beq.w	862d4 <_dtoa_r+0xd8c>
   85eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85ebc:	3301      	adds	r3, #1
   85ebe:	930a      	str	r3, [sp, #40]	; 0x28
   85ec0:	9b08      	ldr	r3, [sp, #32]
   85ec2:	3301      	adds	r3, #1
   85ec4:	9308      	str	r3, [sp, #32]
   85ec6:	2301      	movs	r3, #1
   85ec8:	930c      	str	r3, [sp, #48]	; 0x30
   85eca:	e5ad      	b.n	85a28 <_dtoa_r+0x4e0>
   85ecc:	9b07      	ldr	r3, [sp, #28]
   85ece:	2b00      	cmp	r3, #0
   85ed0:	f73f ac48 	bgt.w	85764 <_dtoa_r+0x21c>
   85ed4:	f040 8222 	bne.w	8631c <_dtoa_r+0xdd4>
   85ed8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85edc:	2200      	movs	r2, #0
   85ede:	4b38      	ldr	r3, [pc, #224]	; (85fc0 <_dtoa_r+0xa78>)
   85ee0:	f001 fd7a 	bl	879d8 <__aeabi_dmul>
   85ee4:	4652      	mov	r2, sl
   85ee6:	465b      	mov	r3, fp
   85ee8:	f001 fffc 	bl	87ee4 <__aeabi_dcmpge>
   85eec:	f8dd 801c 	ldr.w	r8, [sp, #28]
   85ef0:	4646      	mov	r6, r8
   85ef2:	2800      	cmp	r0, #0
   85ef4:	d041      	beq.n	85f7a <_dtoa_r+0xa32>
   85ef6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85ef8:	9d04      	ldr	r5, [sp, #16]
   85efa:	43db      	mvns	r3, r3
   85efc:	9302      	str	r3, [sp, #8]
   85efe:	4641      	mov	r1, r8
   85f00:	4620      	mov	r0, r4
   85f02:	f000 fdff 	bl	86b04 <_Bfree>
   85f06:	2e00      	cmp	r6, #0
   85f08:	f43f acdd 	beq.w	858c6 <_dtoa_r+0x37e>
   85f0c:	e6a7      	b.n	85c5e <_dtoa_r+0x716>
   85f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85f10:	4649      	mov	r1, r9
   85f12:	4620      	mov	r0, r4
   85f14:	f000 ff2e 	bl	86d74 <__pow5mult>
   85f18:	4681      	mov	r9, r0
   85f1a:	e557      	b.n	859cc <_dtoa_r+0x484>
   85f1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   85f1e:	2a00      	cmp	r2, #0
   85f20:	f000 8188 	beq.w	86234 <_dtoa_r+0xcec>
   85f24:	f203 4333 	addw	r3, r3, #1075	; 0x433
   85f28:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85f2a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85f2c:	e4f2      	b.n	85914 <_dtoa_r+0x3cc>
   85f2e:	f1ba 0f00 	cmp.w	sl, #0
   85f32:	f47f ad77 	bne.w	85a24 <_dtoa_r+0x4dc>
   85f36:	e7b4      	b.n	85ea2 <_dtoa_r+0x95a>
   85f38:	f000 fdee 	bl	86b18 <__multadd>
   85f3c:	4647      	mov	r7, r8
   85f3e:	4606      	mov	r6, r0
   85f40:	4683      	mov	fp, r0
   85f42:	e5c0      	b.n	85ac6 <_dtoa_r+0x57e>
   85f44:	4601      	mov	r1, r0
   85f46:	4620      	mov	r0, r4
   85f48:	9308      	str	r3, [sp, #32]
   85f4a:	f000 fddb 	bl	86b04 <_Bfree>
   85f4e:	2201      	movs	r2, #1
   85f50:	9b08      	ldr	r3, [sp, #32]
   85f52:	e5e2      	b.n	85b1a <_dtoa_r+0x5d2>
   85f54:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85f56:	2b02      	cmp	r3, #2
   85f58:	f77f ad98 	ble.w	85a8c <_dtoa_r+0x544>
   85f5c:	9b07      	ldr	r3, [sp, #28]
   85f5e:	2b00      	cmp	r3, #0
   85f60:	d1c9      	bne.n	85ef6 <_dtoa_r+0x9ae>
   85f62:	4641      	mov	r1, r8
   85f64:	2205      	movs	r2, #5
   85f66:	4620      	mov	r0, r4
   85f68:	f000 fdd6 	bl	86b18 <__multadd>
   85f6c:	4601      	mov	r1, r0
   85f6e:	4680      	mov	r8, r0
   85f70:	4648      	mov	r0, r9
   85f72:	f000 ff9f 	bl	86eb4 <__mcmp>
   85f76:	2800      	cmp	r0, #0
   85f78:	ddbd      	ble.n	85ef6 <_dtoa_r+0x9ae>
   85f7a:	2331      	movs	r3, #49	; 0x31
   85f7c:	9a02      	ldr	r2, [sp, #8]
   85f7e:	9904      	ldr	r1, [sp, #16]
   85f80:	3201      	adds	r2, #1
   85f82:	9202      	str	r2, [sp, #8]
   85f84:	700b      	strb	r3, [r1, #0]
   85f86:	1c4d      	adds	r5, r1, #1
   85f88:	e7b9      	b.n	85efe <_dtoa_r+0x9b6>
   85f8a:	2331      	movs	r3, #49	; 0x31
   85f8c:	9a02      	ldr	r2, [sp, #8]
   85f8e:	3201      	adds	r2, #1
   85f90:	9202      	str	r2, [sp, #8]
   85f92:	9a04      	ldr	r2, [sp, #16]
   85f94:	7013      	strb	r3, [r2, #0]
   85f96:	e652      	b.n	85c3e <_dtoa_r+0x6f6>
   85f98:	2301      	movs	r3, #1
   85f9a:	930b      	str	r3, [sp, #44]	; 0x2c
   85f9c:	e666      	b.n	85c6c <_dtoa_r+0x724>
   85f9e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85fa2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85fa4:	e48f      	b.n	858c6 <_dtoa_r+0x37e>
   85fa6:	bf00      	nop
   85fa8:	00088468 	.word	0x00088468
   85fac:	00088440 	.word	0x00088440
   85fb0:	3ff00000 	.word	0x3ff00000
   85fb4:	401c0000 	.word	0x401c0000
   85fb8:	3fe00000 	.word	0x3fe00000
   85fbc:	40240000 	.word	0x40240000
   85fc0:	40140000 	.word	0x40140000
   85fc4:	4650      	mov	r0, sl
   85fc6:	f7fd fb71 	bl	836ac <__aeabi_i2d>
   85fca:	463a      	mov	r2, r7
   85fcc:	4643      	mov	r3, r8
   85fce:	f001 fd03 	bl	879d8 <__aeabi_dmul>
   85fd2:	2200      	movs	r2, #0
   85fd4:	4bc1      	ldr	r3, [pc, #772]	; (862dc <_dtoa_r+0xd94>)
   85fd6:	f7fd fa1d 	bl	83414 <__adddf3>
   85fda:	4605      	mov	r5, r0
   85fdc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   85fe0:	4641      	mov	r1, r8
   85fe2:	2200      	movs	r2, #0
   85fe4:	4bbe      	ldr	r3, [pc, #760]	; (862e0 <_dtoa_r+0xd98>)
   85fe6:	4638      	mov	r0, r7
   85fe8:	f7fd fa12 	bl	83410 <__aeabi_dsub>
   85fec:	462a      	mov	r2, r5
   85fee:	4633      	mov	r3, r6
   85ff0:	4682      	mov	sl, r0
   85ff2:	468b      	mov	fp, r1
   85ff4:	f001 ff80 	bl	87ef8 <__aeabi_dcmpgt>
   85ff8:	4680      	mov	r8, r0
   85ffa:	2800      	cmp	r0, #0
   85ffc:	f040 8110 	bne.w	86220 <_dtoa_r+0xcd8>
   86000:	462a      	mov	r2, r5
   86002:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   86006:	4650      	mov	r0, sl
   86008:	4659      	mov	r1, fp
   8600a:	f001 ff57 	bl	87ebc <__aeabi_dcmplt>
   8600e:	b118      	cbz	r0, 86018 <_dtoa_r+0xad0>
   86010:	4646      	mov	r6, r8
   86012:	e770      	b.n	85ef6 <_dtoa_r+0x9ae>
   86014:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   86018:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   8601c:	f7ff bb8f 	b.w	8573e <_dtoa_r+0x1f6>
   86020:	9804      	ldr	r0, [sp, #16]
   86022:	f7ff bac0 	b.w	855a6 <_dtoa_r+0x5e>
   86026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8602a:	1afb      	subs	r3, r7, r3
   8602c:	441a      	add	r2, r3
   8602e:	970c      	str	r7, [sp, #48]	; 0x30
   86030:	920d      	str	r2, [sp, #52]	; 0x34
   86032:	2700      	movs	r7, #0
   86034:	e468      	b.n	85908 <_dtoa_r+0x3c0>
   86036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8603a:	f04f 0a02 	mov.w	sl, #2
   8603e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   86042:	e656      	b.n	85cf2 <_dtoa_r+0x7aa>
   86044:	2100      	movs	r1, #0
   86046:	2301      	movs	r3, #1
   86048:	4620      	mov	r0, r4
   8604a:	6461      	str	r1, [r4, #68]	; 0x44
   8604c:	9325      	str	r3, [sp, #148]	; 0x94
   8604e:	f000 fd33 	bl	86ab8 <_Balloc>
   86052:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86054:	9004      	str	r0, [sp, #16]
   86056:	9307      	str	r3, [sp, #28]
   86058:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8605a:	6420      	str	r0, [r4, #64]	; 0x40
   8605c:	930f      	str	r3, [sp, #60]	; 0x3c
   8605e:	e627      	b.n	85cb0 <_dtoa_r+0x768>
   86060:	2a00      	cmp	r2, #0
   86062:	46d0      	mov	r8, sl
   86064:	f8cd b020 	str.w	fp, [sp, #32]
   86068:	469a      	mov	sl, r3
   8606a:	dd11      	ble.n	86090 <_dtoa_r+0xb48>
   8606c:	4649      	mov	r1, r9
   8606e:	2201      	movs	r2, #1
   86070:	4620      	mov	r0, r4
   86072:	f000 fecf 	bl	86e14 <__lshift>
   86076:	4641      	mov	r1, r8
   86078:	4681      	mov	r9, r0
   8607a:	f000 ff1b 	bl	86eb4 <__mcmp>
   8607e:	2800      	cmp	r0, #0
   86080:	f340 8145 	ble.w	8630e <_dtoa_r+0xdc6>
   86084:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   86088:	f000 8105 	beq.w	86296 <_dtoa_r+0xd4e>
   8608c:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   86090:	46b3      	mov	fp, r6
   86092:	f887 a000 	strb.w	sl, [r7]
   86096:	1c7d      	adds	r5, r7, #1
   86098:	9e08      	ldr	r6, [sp, #32]
   8609a:	e5d0      	b.n	85c3e <_dtoa_r+0x6f6>
   8609c:	d104      	bne.n	860a8 <_dtoa_r+0xb60>
   8609e:	f01a 0f01 	tst.w	sl, #1
   860a2:	d001      	beq.n	860a8 <_dtoa_r+0xb60>
   860a4:	e5bb      	b.n	85c1e <_dtoa_r+0x6d6>
   860a6:	4615      	mov	r5, r2
   860a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   860ac:	1e6a      	subs	r2, r5, #1
   860ae:	2b30      	cmp	r3, #48	; 0x30
   860b0:	d0f9      	beq.n	860a6 <_dtoa_r+0xb5e>
   860b2:	e5c4      	b.n	85c3e <_dtoa_r+0x6f6>
   860b4:	2230      	movs	r2, #48	; 0x30
   860b6:	9904      	ldr	r1, [sp, #16]
   860b8:	700a      	strb	r2, [r1, #0]
   860ba:	9a02      	ldr	r2, [sp, #8]
   860bc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   860c0:	3201      	adds	r2, #1
   860c2:	9202      	str	r2, [sp, #8]
   860c4:	f7ff bbfb 	b.w	858be <_dtoa_r+0x376>
   860c8:	f000 80bb 	beq.w	86242 <_dtoa_r+0xcfa>
   860cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   860d0:	9b02      	ldr	r3, [sp, #8]
   860d2:	f04f 0a02 	mov.w	sl, #2
   860d6:	425d      	negs	r5, r3
   860d8:	4b82      	ldr	r3, [pc, #520]	; (862e4 <_dtoa_r+0xd9c>)
   860da:	f005 020f 	and.w	r2, r5, #15
   860de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   860e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   860e6:	f001 fc77 	bl	879d8 <__aeabi_dmul>
   860ea:	112d      	asrs	r5, r5, #4
   860ec:	4607      	mov	r7, r0
   860ee:	4688      	mov	r8, r1
   860f0:	f43f ae1a 	beq.w	85d28 <_dtoa_r+0x7e0>
   860f4:	4e7c      	ldr	r6, [pc, #496]	; (862e8 <_dtoa_r+0xda0>)
   860f6:	07eb      	lsls	r3, r5, #31
   860f8:	d509      	bpl.n	8610e <_dtoa_r+0xbc6>
   860fa:	e9d6 2300 	ldrd	r2, r3, [r6]
   860fe:	4638      	mov	r0, r7
   86100:	4641      	mov	r1, r8
   86102:	f001 fc69 	bl	879d8 <__aeabi_dmul>
   86106:	4607      	mov	r7, r0
   86108:	4688      	mov	r8, r1
   8610a:	f10a 0a01 	add.w	sl, sl, #1
   8610e:	106d      	asrs	r5, r5, #1
   86110:	f106 0608 	add.w	r6, r6, #8
   86114:	d1ef      	bne.n	860f6 <_dtoa_r+0xbae>
   86116:	e607      	b.n	85d28 <_dtoa_r+0x7e0>
   86118:	6871      	ldr	r1, [r6, #4]
   8611a:	4620      	mov	r0, r4
   8611c:	f000 fccc 	bl	86ab8 <_Balloc>
   86120:	4605      	mov	r5, r0
   86122:	6933      	ldr	r3, [r6, #16]
   86124:	f106 010c 	add.w	r1, r6, #12
   86128:	3302      	adds	r3, #2
   8612a:	009a      	lsls	r2, r3, #2
   8612c:	300c      	adds	r0, #12
   8612e:	f000 fc41 	bl	869b4 <memcpy>
   86132:	4629      	mov	r1, r5
   86134:	2201      	movs	r2, #1
   86136:	4620      	mov	r0, r4
   86138:	f000 fe6c 	bl	86e14 <__lshift>
   8613c:	9008      	str	r0, [sp, #32]
   8613e:	e4b6      	b.n	85aae <_dtoa_r+0x566>
   86140:	2b39      	cmp	r3, #57	; 0x39
   86142:	f8cd b020 	str.w	fp, [sp, #32]
   86146:	46d0      	mov	r8, sl
   86148:	f000 80a5 	beq.w	86296 <_dtoa_r+0xd4e>
   8614c:	f103 0a01 	add.w	sl, r3, #1
   86150:	46b3      	mov	fp, r6
   86152:	f887 a000 	strb.w	sl, [r7]
   86156:	1c7d      	adds	r5, r7, #1
   86158:	9e08      	ldr	r6, [sp, #32]
   8615a:	e570      	b.n	85c3e <_dtoa_r+0x6f6>
   8615c:	465a      	mov	r2, fp
   8615e:	46d0      	mov	r8, sl
   86160:	46b3      	mov	fp, r6
   86162:	469a      	mov	sl, r3
   86164:	4616      	mov	r6, r2
   86166:	e54e      	b.n	85c06 <_dtoa_r+0x6be>
   86168:	9812      	ldr	r0, [sp, #72]	; 0x48
   8616a:	495e      	ldr	r1, [pc, #376]	; (862e4 <_dtoa_r+0xd9c>)
   8616c:	462a      	mov	r2, r5
   8616e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   86172:	4633      	mov	r3, r6
   86174:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   86178:	f001 fc2e 	bl	879d8 <__aeabi_dmul>
   8617c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   86180:	4638      	mov	r0, r7
   86182:	4641      	mov	r1, r8
   86184:	f001 fed8 	bl	87f38 <__aeabi_d2iz>
   86188:	4605      	mov	r5, r0
   8618a:	f7fd fa8f 	bl	836ac <__aeabi_i2d>
   8618e:	4602      	mov	r2, r0
   86190:	460b      	mov	r3, r1
   86192:	4638      	mov	r0, r7
   86194:	4641      	mov	r1, r8
   86196:	f7fd f93b 	bl	83410 <__aeabi_dsub>
   8619a:	4606      	mov	r6, r0
   8619c:	9812      	ldr	r0, [sp, #72]	; 0x48
   8619e:	9a04      	ldr	r2, [sp, #16]
   861a0:	3530      	adds	r5, #48	; 0x30
   861a2:	2801      	cmp	r0, #1
   861a4:	7015      	strb	r5, [r2, #0]
   861a6:	460f      	mov	r7, r1
   861a8:	f102 0501 	add.w	r5, r2, #1
   861ac:	d026      	beq.n	861fc <_dtoa_r+0xcb4>
   861ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   861b0:	9a04      	ldr	r2, [sp, #16]
   861b2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   861b6:	4413      	add	r3, r2
   861b8:	f04f 0a00 	mov.w	sl, #0
   861bc:	4699      	mov	r9, r3
   861be:	f8df b130 	ldr.w	fp, [pc, #304]	; 862f0 <_dtoa_r+0xda8>
   861c2:	4652      	mov	r2, sl
   861c4:	465b      	mov	r3, fp
   861c6:	4630      	mov	r0, r6
   861c8:	4639      	mov	r1, r7
   861ca:	f001 fc05 	bl	879d8 <__aeabi_dmul>
   861ce:	460f      	mov	r7, r1
   861d0:	4606      	mov	r6, r0
   861d2:	f001 feb1 	bl	87f38 <__aeabi_d2iz>
   861d6:	4680      	mov	r8, r0
   861d8:	f7fd fa68 	bl	836ac <__aeabi_i2d>
   861dc:	4602      	mov	r2, r0
   861de:	460b      	mov	r3, r1
   861e0:	4630      	mov	r0, r6
   861e2:	4639      	mov	r1, r7
   861e4:	f7fd f914 	bl	83410 <__aeabi_dsub>
   861e8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   861ec:	f805 8b01 	strb.w	r8, [r5], #1
   861f0:	454d      	cmp	r5, r9
   861f2:	4606      	mov	r6, r0
   861f4:	460f      	mov	r7, r1
   861f6:	d1e4      	bne.n	861c2 <_dtoa_r+0xc7a>
   861f8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   861fc:	2200      	movs	r2, #0
   861fe:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   86202:	4b3a      	ldr	r3, [pc, #232]	; (862ec <_dtoa_r+0xda4>)
   86204:	f7fd f906 	bl	83414 <__adddf3>
   86208:	4632      	mov	r2, r6
   8620a:	463b      	mov	r3, r7
   8620c:	f001 fe56 	bl	87ebc <__aeabi_dcmplt>
   86210:	2800      	cmp	r0, #0
   86212:	d046      	beq.n	862a2 <_dtoa_r+0xd5a>
   86214:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86216:	9302      	str	r3, [sp, #8]
   86218:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8621c:	f7ff bb42 	b.w	858a4 <_dtoa_r+0x35c>
   86220:	f04f 0800 	mov.w	r8, #0
   86224:	4646      	mov	r6, r8
   86226:	e6a8      	b.n	85f7a <_dtoa_r+0xa32>
   86228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8622a:	9a07      	ldr	r2, [sp, #28]
   8622c:	1a9d      	subs	r5, r3, r2
   8622e:	2300      	movs	r3, #0
   86230:	f7ff bb70 	b.w	85914 <_dtoa_r+0x3cc>
   86234:	9b18      	ldr	r3, [sp, #96]	; 0x60
   86236:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86238:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8623c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8623e:	f7ff bb69 	b.w	85914 <_dtoa_r+0x3cc>
   86242:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   86246:	f04f 0a02 	mov.w	sl, #2
   8624a:	e56d      	b.n	85d28 <_dtoa_r+0x7e0>
   8624c:	9b07      	ldr	r3, [sp, #28]
   8624e:	2b00      	cmp	r3, #0
   86250:	f43f aeb8 	beq.w	85fc4 <_dtoa_r+0xa7c>
   86254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86256:	2b00      	cmp	r3, #0
   86258:	f77f aede 	ble.w	86018 <_dtoa_r+0xad0>
   8625c:	2200      	movs	r2, #0
   8625e:	4b24      	ldr	r3, [pc, #144]	; (862f0 <_dtoa_r+0xda8>)
   86260:	4638      	mov	r0, r7
   86262:	4641      	mov	r1, r8
   86264:	f001 fbb8 	bl	879d8 <__aeabi_dmul>
   86268:	4607      	mov	r7, r0
   8626a:	4688      	mov	r8, r1
   8626c:	f10a 0001 	add.w	r0, sl, #1
   86270:	f7fd fa1c 	bl	836ac <__aeabi_i2d>
   86274:	463a      	mov	r2, r7
   86276:	4643      	mov	r3, r8
   86278:	f001 fbae 	bl	879d8 <__aeabi_dmul>
   8627c:	2200      	movs	r2, #0
   8627e:	4b17      	ldr	r3, [pc, #92]	; (862dc <_dtoa_r+0xd94>)
   86280:	f7fd f8c8 	bl	83414 <__adddf3>
   86284:	9a02      	ldr	r2, [sp, #8]
   86286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86288:	3a01      	subs	r2, #1
   8628a:	4605      	mov	r5, r0
   8628c:	9215      	str	r2, [sp, #84]	; 0x54
   8628e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   86292:	9312      	str	r3, [sp, #72]	; 0x48
   86294:	e569      	b.n	85d6a <_dtoa_r+0x822>
   86296:	2239      	movs	r2, #57	; 0x39
   86298:	46b3      	mov	fp, r6
   8629a:	703a      	strb	r2, [r7, #0]
   8629c:	9e08      	ldr	r6, [sp, #32]
   8629e:	1c7d      	adds	r5, r7, #1
   862a0:	e4bf      	b.n	85c22 <_dtoa_r+0x6da>
   862a2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   862a6:	2000      	movs	r0, #0
   862a8:	4910      	ldr	r1, [pc, #64]	; (862ec <_dtoa_r+0xda4>)
   862aa:	f7fd f8b1 	bl	83410 <__aeabi_dsub>
   862ae:	4632      	mov	r2, r6
   862b0:	463b      	mov	r3, r7
   862b2:	f001 fe21 	bl	87ef8 <__aeabi_dcmpgt>
   862b6:	b908      	cbnz	r0, 862bc <_dtoa_r+0xd74>
   862b8:	e6ae      	b.n	86018 <_dtoa_r+0xad0>
   862ba:	4615      	mov	r5, r2
   862bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   862c0:	1e6a      	subs	r2, r5, #1
   862c2:	2b30      	cmp	r3, #48	; 0x30
   862c4:	d0f9      	beq.n	862ba <_dtoa_r+0xd72>
   862c6:	e5d7      	b.n	85e78 <_dtoa_r+0x930>
   862c8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   862cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   862ce:	9302      	str	r3, [sp, #8]
   862d0:	f7ff bae8 	b.w	858a4 <_dtoa_r+0x35c>
   862d4:	970c      	str	r7, [sp, #48]	; 0x30
   862d6:	f7ff bba7 	b.w	85a28 <_dtoa_r+0x4e0>
   862da:	bf00      	nop
   862dc:	401c0000 	.word	0x401c0000
   862e0:	40140000 	.word	0x40140000
   862e4:	00088468 	.word	0x00088468
   862e8:	00088440 	.word	0x00088440
   862ec:	3fe00000 	.word	0x3fe00000
   862f0:	40240000 	.word	0x40240000
   862f4:	2b39      	cmp	r3, #57	; 0x39
   862f6:	f8cd b020 	str.w	fp, [sp, #32]
   862fa:	46d0      	mov	r8, sl
   862fc:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86300:	469a      	mov	sl, r3
   86302:	d0c8      	beq.n	86296 <_dtoa_r+0xd4e>
   86304:	f1bb 0f00 	cmp.w	fp, #0
   86308:	f73f aec0 	bgt.w	8608c <_dtoa_r+0xb44>
   8630c:	e6c0      	b.n	86090 <_dtoa_r+0xb48>
   8630e:	f47f aebf 	bne.w	86090 <_dtoa_r+0xb48>
   86312:	f01a 0f01 	tst.w	sl, #1
   86316:	f43f aebb 	beq.w	86090 <_dtoa_r+0xb48>
   8631a:	e6b3      	b.n	86084 <_dtoa_r+0xb3c>
   8631c:	f04f 0800 	mov.w	r8, #0
   86320:	4646      	mov	r6, r8
   86322:	e5e8      	b.n	85ef6 <_dtoa_r+0x9ae>
   86324:	4631      	mov	r1, r6
   86326:	2300      	movs	r3, #0
   86328:	220a      	movs	r2, #10
   8632a:	4620      	mov	r0, r4
   8632c:	f000 fbf4 	bl	86b18 <__multadd>
   86330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86332:	4606      	mov	r6, r0
   86334:	2b00      	cmp	r3, #0
   86336:	dd07      	ble.n	86348 <_dtoa_r+0xe00>
   86338:	9307      	str	r3, [sp, #28]
   8633a:	f7ff bbab 	b.w	85a94 <_dtoa_r+0x54c>
   8633e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86340:	2b02      	cmp	r3, #2
   86342:	dc1f      	bgt.n	86384 <_dtoa_r+0xe3c>
   86344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86346:	e43c      	b.n	85bc2 <_dtoa_r+0x67a>
   86348:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8634a:	2b02      	cmp	r3, #2
   8634c:	dc1a      	bgt.n	86384 <_dtoa_r+0xe3c>
   8634e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86350:	e7f2      	b.n	86338 <_dtoa_r+0xdf0>
   86352:	f43f ab81 	beq.w	85a58 <_dtoa_r+0x510>
   86356:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8635a:	e411      	b.n	85b80 <_dtoa_r+0x638>
   8635c:	2500      	movs	r5, #0
   8635e:	4620      	mov	r0, r4
   86360:	6465      	str	r5, [r4, #68]	; 0x44
   86362:	4629      	mov	r1, r5
   86364:	f000 fba8 	bl	86ab8 <_Balloc>
   86368:	f04f 33ff 	mov.w	r3, #4294967295
   8636c:	9307      	str	r3, [sp, #28]
   8636e:	930f      	str	r3, [sp, #60]	; 0x3c
   86370:	2301      	movs	r3, #1
   86372:	9004      	str	r0, [sp, #16]
   86374:	9525      	str	r5, [sp, #148]	; 0x94
   86376:	6420      	str	r0, [r4, #64]	; 0x40
   86378:	930b      	str	r3, [sp, #44]	; 0x2c
   8637a:	f7ff b9e0 	b.w	8573e <_dtoa_r+0x1f6>
   8637e:	2501      	movs	r5, #1
   86380:	f7ff b9a8 	b.w	856d4 <_dtoa_r+0x18c>
   86384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86386:	9307      	str	r3, [sp, #28]
   86388:	e5e8      	b.n	85f5c <_dtoa_r+0xa14>
   8638a:	bf00      	nop

0008638c <__libc_fini_array>:
   8638c:	b538      	push	{r3, r4, r5, lr}
   8638e:	4c0a      	ldr	r4, [pc, #40]	; (863b8 <__libc_fini_array+0x2c>)
   86390:	4d0a      	ldr	r5, [pc, #40]	; (863bc <__libc_fini_array+0x30>)
   86392:	1b64      	subs	r4, r4, r5
   86394:	10a4      	asrs	r4, r4, #2
   86396:	d00a      	beq.n	863ae <__libc_fini_array+0x22>
   86398:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8639c:	3b01      	subs	r3, #1
   8639e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   863a2:	3c01      	subs	r4, #1
   863a4:	f855 3904 	ldr.w	r3, [r5], #-4
   863a8:	4798      	blx	r3
   863aa:	2c00      	cmp	r4, #0
   863ac:	d1f9      	bne.n	863a2 <__libc_fini_array+0x16>
   863ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   863b2:	f002 b957 	b.w	88664 <_fini>
   863b6:	bf00      	nop
   863b8:	00088674 	.word	0x00088674
   863bc:	00088670 	.word	0x00088670

000863c0 <_localeconv_r>:
   863c0:	4a04      	ldr	r2, [pc, #16]	; (863d4 <_localeconv_r+0x14>)
   863c2:	4b05      	ldr	r3, [pc, #20]	; (863d8 <_localeconv_r+0x18>)
   863c4:	6812      	ldr	r2, [r2, #0]
   863c6:	6b50      	ldr	r0, [r2, #52]	; 0x34
   863c8:	2800      	cmp	r0, #0
   863ca:	bf08      	it	eq
   863cc:	4618      	moveq	r0, r3
   863ce:	30f0      	adds	r0, #240	; 0xf0
   863d0:	4770      	bx	lr
   863d2:	bf00      	nop
   863d4:	200701a0 	.word	0x200701a0
   863d8:	200709e4 	.word	0x200709e4

000863dc <__retarget_lock_acquire_recursive>:
   863dc:	4770      	bx	lr
   863de:	bf00      	nop

000863e0 <__retarget_lock_release_recursive>:
   863e0:	4770      	bx	lr
   863e2:	bf00      	nop

000863e4 <_malloc_r>:
   863e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   863e8:	f101 060b 	add.w	r6, r1, #11
   863ec:	2e16      	cmp	r6, #22
   863ee:	b083      	sub	sp, #12
   863f0:	4605      	mov	r5, r0
   863f2:	f240 809e 	bls.w	86532 <_malloc_r+0x14e>
   863f6:	f036 0607 	bics.w	r6, r6, #7
   863fa:	f100 80bd 	bmi.w	86578 <_malloc_r+0x194>
   863fe:	42b1      	cmp	r1, r6
   86400:	f200 80ba 	bhi.w	86578 <_malloc_r+0x194>
   86404:	f000 fb4c 	bl	86aa0 <__malloc_lock>
   86408:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8640c:	f0c0 8285 	bcc.w	8691a <_malloc_r+0x536>
   86410:	0a73      	lsrs	r3, r6, #9
   86412:	f000 80b8 	beq.w	86586 <_malloc_r+0x1a2>
   86416:	2b04      	cmp	r3, #4
   86418:	f200 816c 	bhi.w	866f4 <_malloc_r+0x310>
   8641c:	09b3      	lsrs	r3, r6, #6
   8641e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   86422:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   86426:	00c1      	lsls	r1, r0, #3
   86428:	4fb8      	ldr	r7, [pc, #736]	; (8670c <_malloc_r+0x328>)
   8642a:	4439      	add	r1, r7
   8642c:	684c      	ldr	r4, [r1, #4]
   8642e:	3908      	subs	r1, #8
   86430:	42a1      	cmp	r1, r4
   86432:	d106      	bne.n	86442 <_malloc_r+0x5e>
   86434:	e00c      	b.n	86450 <_malloc_r+0x6c>
   86436:	2a00      	cmp	r2, #0
   86438:	f280 80ab 	bge.w	86592 <_malloc_r+0x1ae>
   8643c:	68e4      	ldr	r4, [r4, #12]
   8643e:	42a1      	cmp	r1, r4
   86440:	d006      	beq.n	86450 <_malloc_r+0x6c>
   86442:	6863      	ldr	r3, [r4, #4]
   86444:	f023 0303 	bic.w	r3, r3, #3
   86448:	1b9a      	subs	r2, r3, r6
   8644a:	2a0f      	cmp	r2, #15
   8644c:	ddf3      	ble.n	86436 <_malloc_r+0x52>
   8644e:	4670      	mov	r0, lr
   86450:	693c      	ldr	r4, [r7, #16]
   86452:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 86720 <_malloc_r+0x33c>
   86456:	4574      	cmp	r4, lr
   86458:	f000 819e 	beq.w	86798 <_malloc_r+0x3b4>
   8645c:	6863      	ldr	r3, [r4, #4]
   8645e:	f023 0303 	bic.w	r3, r3, #3
   86462:	1b9a      	subs	r2, r3, r6
   86464:	2a0f      	cmp	r2, #15
   86466:	f300 8183 	bgt.w	86770 <_malloc_r+0x38c>
   8646a:	2a00      	cmp	r2, #0
   8646c:	f8c7 e014 	str.w	lr, [r7, #20]
   86470:	f8c7 e010 	str.w	lr, [r7, #16]
   86474:	f280 8091 	bge.w	8659a <_malloc_r+0x1b6>
   86478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8647c:	f080 8154 	bcs.w	86728 <_malloc_r+0x344>
   86480:	2201      	movs	r2, #1
   86482:	08db      	lsrs	r3, r3, #3
   86484:	6879      	ldr	r1, [r7, #4]
   86486:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8648a:	4413      	add	r3, r2
   8648c:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   86490:	fa02 f20c 	lsl.w	r2, r2, ip
   86494:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   86498:	430a      	orrs	r2, r1
   8649a:	f1ac 0108 	sub.w	r1, ip, #8
   8649e:	60e1      	str	r1, [r4, #12]
   864a0:	f8c4 8008 	str.w	r8, [r4, #8]
   864a4:	607a      	str	r2, [r7, #4]
   864a6:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   864aa:	f8c8 400c 	str.w	r4, [r8, #12]
   864ae:	2401      	movs	r4, #1
   864b0:	1083      	asrs	r3, r0, #2
   864b2:	409c      	lsls	r4, r3
   864b4:	4294      	cmp	r4, r2
   864b6:	d87d      	bhi.n	865b4 <_malloc_r+0x1d0>
   864b8:	4214      	tst	r4, r2
   864ba:	d106      	bne.n	864ca <_malloc_r+0xe6>
   864bc:	f020 0003 	bic.w	r0, r0, #3
   864c0:	0064      	lsls	r4, r4, #1
   864c2:	4214      	tst	r4, r2
   864c4:	f100 0004 	add.w	r0, r0, #4
   864c8:	d0fa      	beq.n	864c0 <_malloc_r+0xdc>
   864ca:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   864ce:	46cc      	mov	ip, r9
   864d0:	4680      	mov	r8, r0
   864d2:	f8dc 300c 	ldr.w	r3, [ip, #12]
   864d6:	459c      	cmp	ip, r3
   864d8:	d107      	bne.n	864ea <_malloc_r+0x106>
   864da:	e15f      	b.n	8679c <_malloc_r+0x3b8>
   864dc:	2a00      	cmp	r2, #0
   864de:	f280 816d 	bge.w	867bc <_malloc_r+0x3d8>
   864e2:	68db      	ldr	r3, [r3, #12]
   864e4:	459c      	cmp	ip, r3
   864e6:	f000 8159 	beq.w	8679c <_malloc_r+0x3b8>
   864ea:	6859      	ldr	r1, [r3, #4]
   864ec:	f021 0103 	bic.w	r1, r1, #3
   864f0:	1b8a      	subs	r2, r1, r6
   864f2:	2a0f      	cmp	r2, #15
   864f4:	ddf2      	ble.n	864dc <_malloc_r+0xf8>
   864f6:	68dc      	ldr	r4, [r3, #12]
   864f8:	f8d3 c008 	ldr.w	ip, [r3, #8]
   864fc:	f046 0801 	orr.w	r8, r6, #1
   86500:	4628      	mov	r0, r5
   86502:	441e      	add	r6, r3
   86504:	f042 0501 	orr.w	r5, r2, #1
   86508:	f8c3 8004 	str.w	r8, [r3, #4]
   8650c:	f8cc 400c 	str.w	r4, [ip, #12]
   86510:	f8c4 c008 	str.w	ip, [r4, #8]
   86514:	617e      	str	r6, [r7, #20]
   86516:	613e      	str	r6, [r7, #16]
   86518:	f8c6 e00c 	str.w	lr, [r6, #12]
   8651c:	f8c6 e008 	str.w	lr, [r6, #8]
   86520:	6075      	str	r5, [r6, #4]
   86522:	505a      	str	r2, [r3, r1]
   86524:	9300      	str	r3, [sp, #0]
   86526:	f000 fac1 	bl	86aac <__malloc_unlock>
   8652a:	9b00      	ldr	r3, [sp, #0]
   8652c:	f103 0408 	add.w	r4, r3, #8
   86530:	e01e      	b.n	86570 <_malloc_r+0x18c>
   86532:	2910      	cmp	r1, #16
   86534:	d820      	bhi.n	86578 <_malloc_r+0x194>
   86536:	f000 fab3 	bl	86aa0 <__malloc_lock>
   8653a:	2610      	movs	r6, #16
   8653c:	2318      	movs	r3, #24
   8653e:	2002      	movs	r0, #2
   86540:	4f72      	ldr	r7, [pc, #456]	; (8670c <_malloc_r+0x328>)
   86542:	443b      	add	r3, r7
   86544:	685c      	ldr	r4, [r3, #4]
   86546:	f1a3 0208 	sub.w	r2, r3, #8
   8654a:	4294      	cmp	r4, r2
   8654c:	f000 812f 	beq.w	867ae <_malloc_r+0x3ca>
   86550:	6863      	ldr	r3, [r4, #4]
   86552:	68e1      	ldr	r1, [r4, #12]
   86554:	f023 0303 	bic.w	r3, r3, #3
   86558:	4423      	add	r3, r4
   8655a:	685a      	ldr	r2, [r3, #4]
   8655c:	68a6      	ldr	r6, [r4, #8]
   8655e:	f042 0201 	orr.w	r2, r2, #1
   86562:	60f1      	str	r1, [r6, #12]
   86564:	4628      	mov	r0, r5
   86566:	608e      	str	r6, [r1, #8]
   86568:	605a      	str	r2, [r3, #4]
   8656a:	f000 fa9f 	bl	86aac <__malloc_unlock>
   8656e:	3408      	adds	r4, #8
   86570:	4620      	mov	r0, r4
   86572:	b003      	add	sp, #12
   86574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86578:	2400      	movs	r4, #0
   8657a:	230c      	movs	r3, #12
   8657c:	4620      	mov	r0, r4
   8657e:	602b      	str	r3, [r5, #0]
   86580:	b003      	add	sp, #12
   86582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86586:	2040      	movs	r0, #64	; 0x40
   86588:	f44f 7100 	mov.w	r1, #512	; 0x200
   8658c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   86590:	e74a      	b.n	86428 <_malloc_r+0x44>
   86592:	4423      	add	r3, r4
   86594:	685a      	ldr	r2, [r3, #4]
   86596:	68e1      	ldr	r1, [r4, #12]
   86598:	e7e0      	b.n	8655c <_malloc_r+0x178>
   8659a:	4423      	add	r3, r4
   8659c:	685a      	ldr	r2, [r3, #4]
   8659e:	4628      	mov	r0, r5
   865a0:	f042 0201 	orr.w	r2, r2, #1
   865a4:	605a      	str	r2, [r3, #4]
   865a6:	3408      	adds	r4, #8
   865a8:	f000 fa80 	bl	86aac <__malloc_unlock>
   865ac:	4620      	mov	r0, r4
   865ae:	b003      	add	sp, #12
   865b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   865b4:	68bc      	ldr	r4, [r7, #8]
   865b6:	6863      	ldr	r3, [r4, #4]
   865b8:	f023 0803 	bic.w	r8, r3, #3
   865bc:	45b0      	cmp	r8, r6
   865be:	d304      	bcc.n	865ca <_malloc_r+0x1e6>
   865c0:	eba8 0306 	sub.w	r3, r8, r6
   865c4:	2b0f      	cmp	r3, #15
   865c6:	f300 8085 	bgt.w	866d4 <_malloc_r+0x2f0>
   865ca:	f8df 9158 	ldr.w	r9, [pc, #344]	; 86724 <_malloc_r+0x340>
   865ce:	4b50      	ldr	r3, [pc, #320]	; (86710 <_malloc_r+0x32c>)
   865d0:	f8d9 2000 	ldr.w	r2, [r9]
   865d4:	681b      	ldr	r3, [r3, #0]
   865d6:	3201      	adds	r2, #1
   865d8:	4433      	add	r3, r6
   865da:	eb04 0a08 	add.w	sl, r4, r8
   865de:	f000 8154 	beq.w	8688a <_malloc_r+0x4a6>
   865e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   865e6:	330f      	adds	r3, #15
   865e8:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   865ec:	f02b 0b0f 	bic.w	fp, fp, #15
   865f0:	4659      	mov	r1, fp
   865f2:	4628      	mov	r0, r5
   865f4:	f000 fd5c 	bl	870b0 <_sbrk_r>
   865f8:	1c41      	adds	r1, r0, #1
   865fa:	4602      	mov	r2, r0
   865fc:	f000 80fb 	beq.w	867f6 <_malloc_r+0x412>
   86600:	4582      	cmp	sl, r0
   86602:	f200 80f6 	bhi.w	867f2 <_malloc_r+0x40e>
   86606:	4b43      	ldr	r3, [pc, #268]	; (86714 <_malloc_r+0x330>)
   86608:	6819      	ldr	r1, [r3, #0]
   8660a:	4459      	add	r1, fp
   8660c:	6019      	str	r1, [r3, #0]
   8660e:	f000 814c 	beq.w	868aa <_malloc_r+0x4c6>
   86612:	f8d9 0000 	ldr.w	r0, [r9]
   86616:	3001      	adds	r0, #1
   86618:	bf1b      	ittet	ne
   8661a:	eba2 0a0a 	subne.w	sl, r2, sl
   8661e:	4451      	addne	r1, sl
   86620:	f8c9 2000 	streq.w	r2, [r9]
   86624:	6019      	strne	r1, [r3, #0]
   86626:	f012 0107 	ands.w	r1, r2, #7
   8662a:	f000 8114 	beq.w	86856 <_malloc_r+0x472>
   8662e:	f1c1 0008 	rsb	r0, r1, #8
   86632:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   86636:	4402      	add	r2, r0
   86638:	3108      	adds	r1, #8
   8663a:	eb02 090b 	add.w	r9, r2, fp
   8663e:	f3c9 090b 	ubfx	r9, r9, #0, #12
   86642:	eba1 0909 	sub.w	r9, r1, r9
   86646:	4649      	mov	r1, r9
   86648:	4628      	mov	r0, r5
   8664a:	9301      	str	r3, [sp, #4]
   8664c:	9200      	str	r2, [sp, #0]
   8664e:	f000 fd2f 	bl	870b0 <_sbrk_r>
   86652:	1c43      	adds	r3, r0, #1
   86654:	e89d 000c 	ldmia.w	sp, {r2, r3}
   86658:	f000 8142 	beq.w	868e0 <_malloc_r+0x4fc>
   8665c:	1a80      	subs	r0, r0, r2
   8665e:	4448      	add	r0, r9
   86660:	f040 0001 	orr.w	r0, r0, #1
   86664:	6819      	ldr	r1, [r3, #0]
   86666:	42bc      	cmp	r4, r7
   86668:	4449      	add	r1, r9
   8666a:	60ba      	str	r2, [r7, #8]
   8666c:	6019      	str	r1, [r3, #0]
   8666e:	6050      	str	r0, [r2, #4]
   86670:	d017      	beq.n	866a2 <_malloc_r+0x2be>
   86672:	f1b8 0f0f 	cmp.w	r8, #15
   86676:	f240 80fa 	bls.w	8686e <_malloc_r+0x48a>
   8667a:	f04f 0c05 	mov.w	ip, #5
   8667e:	6862      	ldr	r2, [r4, #4]
   86680:	f1a8 000c 	sub.w	r0, r8, #12
   86684:	f020 0007 	bic.w	r0, r0, #7
   86688:	f002 0201 	and.w	r2, r2, #1
   8668c:	eb04 0e00 	add.w	lr, r4, r0
   86690:	4302      	orrs	r2, r0
   86692:	280f      	cmp	r0, #15
   86694:	6062      	str	r2, [r4, #4]
   86696:	f8ce c004 	str.w	ip, [lr, #4]
   8669a:	f8ce c008 	str.w	ip, [lr, #8]
   8669e:	f200 8116 	bhi.w	868ce <_malloc_r+0x4ea>
   866a2:	4b1d      	ldr	r3, [pc, #116]	; (86718 <_malloc_r+0x334>)
   866a4:	68bc      	ldr	r4, [r7, #8]
   866a6:	681a      	ldr	r2, [r3, #0]
   866a8:	4291      	cmp	r1, r2
   866aa:	bf88      	it	hi
   866ac:	6019      	strhi	r1, [r3, #0]
   866ae:	4b1b      	ldr	r3, [pc, #108]	; (8671c <_malloc_r+0x338>)
   866b0:	681a      	ldr	r2, [r3, #0]
   866b2:	4291      	cmp	r1, r2
   866b4:	6862      	ldr	r2, [r4, #4]
   866b6:	bf88      	it	hi
   866b8:	6019      	strhi	r1, [r3, #0]
   866ba:	f022 0203 	bic.w	r2, r2, #3
   866be:	4296      	cmp	r6, r2
   866c0:	eba2 0306 	sub.w	r3, r2, r6
   866c4:	d801      	bhi.n	866ca <_malloc_r+0x2e6>
   866c6:	2b0f      	cmp	r3, #15
   866c8:	dc04      	bgt.n	866d4 <_malloc_r+0x2f0>
   866ca:	4628      	mov	r0, r5
   866cc:	f000 f9ee 	bl	86aac <__malloc_unlock>
   866d0:	2400      	movs	r4, #0
   866d2:	e74d      	b.n	86570 <_malloc_r+0x18c>
   866d4:	f046 0201 	orr.w	r2, r6, #1
   866d8:	f043 0301 	orr.w	r3, r3, #1
   866dc:	4426      	add	r6, r4
   866de:	6062      	str	r2, [r4, #4]
   866e0:	4628      	mov	r0, r5
   866e2:	60be      	str	r6, [r7, #8]
   866e4:	3408      	adds	r4, #8
   866e6:	6073      	str	r3, [r6, #4]
   866e8:	f000 f9e0 	bl	86aac <__malloc_unlock>
   866ec:	4620      	mov	r0, r4
   866ee:	b003      	add	sp, #12
   866f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   866f4:	2b14      	cmp	r3, #20
   866f6:	d970      	bls.n	867da <_malloc_r+0x3f6>
   866f8:	2b54      	cmp	r3, #84	; 0x54
   866fa:	f200 80a2 	bhi.w	86842 <_malloc_r+0x45e>
   866fe:	0b33      	lsrs	r3, r6, #12
   86700:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   86704:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   86708:	00c1      	lsls	r1, r0, #3
   8670a:	e68d      	b.n	86428 <_malloc_r+0x44>
   8670c:	200705d4 	.word	0x200705d4
   86710:	20070fe8 	.word	0x20070fe8
   86714:	20070fb8 	.word	0x20070fb8
   86718:	20070fe0 	.word	0x20070fe0
   8671c:	20070fe4 	.word	0x20070fe4
   86720:	200705dc 	.word	0x200705dc
   86724:	200709dc 	.word	0x200709dc
   86728:	0a5a      	lsrs	r2, r3, #9
   8672a:	2a04      	cmp	r2, #4
   8672c:	d95b      	bls.n	867e6 <_malloc_r+0x402>
   8672e:	2a14      	cmp	r2, #20
   86730:	f200 80ae 	bhi.w	86890 <_malloc_r+0x4ac>
   86734:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   86738:	00c9      	lsls	r1, r1, #3
   8673a:	325b      	adds	r2, #91	; 0x5b
   8673c:	eb07 0c01 	add.w	ip, r7, r1
   86740:	5879      	ldr	r1, [r7, r1]
   86742:	f1ac 0c08 	sub.w	ip, ip, #8
   86746:	458c      	cmp	ip, r1
   86748:	f000 8088 	beq.w	8685c <_malloc_r+0x478>
   8674c:	684a      	ldr	r2, [r1, #4]
   8674e:	f022 0203 	bic.w	r2, r2, #3
   86752:	4293      	cmp	r3, r2
   86754:	d273      	bcs.n	8683e <_malloc_r+0x45a>
   86756:	6889      	ldr	r1, [r1, #8]
   86758:	458c      	cmp	ip, r1
   8675a:	d1f7      	bne.n	8674c <_malloc_r+0x368>
   8675c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   86760:	687a      	ldr	r2, [r7, #4]
   86762:	60e3      	str	r3, [r4, #12]
   86764:	f8c4 c008 	str.w	ip, [r4, #8]
   86768:	609c      	str	r4, [r3, #8]
   8676a:	f8cc 400c 	str.w	r4, [ip, #12]
   8676e:	e69e      	b.n	864ae <_malloc_r+0xca>
   86770:	f046 0c01 	orr.w	ip, r6, #1
   86774:	f042 0101 	orr.w	r1, r2, #1
   86778:	4426      	add	r6, r4
   8677a:	f8c4 c004 	str.w	ip, [r4, #4]
   8677e:	4628      	mov	r0, r5
   86780:	617e      	str	r6, [r7, #20]
   86782:	613e      	str	r6, [r7, #16]
   86784:	f8c6 e00c 	str.w	lr, [r6, #12]
   86788:	f8c6 e008 	str.w	lr, [r6, #8]
   8678c:	6071      	str	r1, [r6, #4]
   8678e:	50e2      	str	r2, [r4, r3]
   86790:	f000 f98c 	bl	86aac <__malloc_unlock>
   86794:	3408      	adds	r4, #8
   86796:	e6eb      	b.n	86570 <_malloc_r+0x18c>
   86798:	687a      	ldr	r2, [r7, #4]
   8679a:	e688      	b.n	864ae <_malloc_r+0xca>
   8679c:	f108 0801 	add.w	r8, r8, #1
   867a0:	f018 0f03 	tst.w	r8, #3
   867a4:	f10c 0c08 	add.w	ip, ip, #8
   867a8:	f47f ae93 	bne.w	864d2 <_malloc_r+0xee>
   867ac:	e02d      	b.n	8680a <_malloc_r+0x426>
   867ae:	68dc      	ldr	r4, [r3, #12]
   867b0:	42a3      	cmp	r3, r4
   867b2:	bf08      	it	eq
   867b4:	3002      	addeq	r0, #2
   867b6:	f43f ae4b 	beq.w	86450 <_malloc_r+0x6c>
   867ba:	e6c9      	b.n	86550 <_malloc_r+0x16c>
   867bc:	461c      	mov	r4, r3
   867be:	4419      	add	r1, r3
   867c0:	684a      	ldr	r2, [r1, #4]
   867c2:	68db      	ldr	r3, [r3, #12]
   867c4:	f854 6f08 	ldr.w	r6, [r4, #8]!
   867c8:	f042 0201 	orr.w	r2, r2, #1
   867cc:	604a      	str	r2, [r1, #4]
   867ce:	4628      	mov	r0, r5
   867d0:	60f3      	str	r3, [r6, #12]
   867d2:	609e      	str	r6, [r3, #8]
   867d4:	f000 f96a 	bl	86aac <__malloc_unlock>
   867d8:	e6ca      	b.n	86570 <_malloc_r+0x18c>
   867da:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   867de:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   867e2:	00c1      	lsls	r1, r0, #3
   867e4:	e620      	b.n	86428 <_malloc_r+0x44>
   867e6:	099a      	lsrs	r2, r3, #6
   867e8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   867ec:	00c9      	lsls	r1, r1, #3
   867ee:	3238      	adds	r2, #56	; 0x38
   867f0:	e7a4      	b.n	8673c <_malloc_r+0x358>
   867f2:	42bc      	cmp	r4, r7
   867f4:	d054      	beq.n	868a0 <_malloc_r+0x4bc>
   867f6:	68bc      	ldr	r4, [r7, #8]
   867f8:	6862      	ldr	r2, [r4, #4]
   867fa:	f022 0203 	bic.w	r2, r2, #3
   867fe:	e75e      	b.n	866be <_malloc_r+0x2da>
   86800:	f859 3908 	ldr.w	r3, [r9], #-8
   86804:	4599      	cmp	r9, r3
   86806:	f040 8086 	bne.w	86916 <_malloc_r+0x532>
   8680a:	f010 0f03 	tst.w	r0, #3
   8680e:	f100 30ff 	add.w	r0, r0, #4294967295
   86812:	d1f5      	bne.n	86800 <_malloc_r+0x41c>
   86814:	687b      	ldr	r3, [r7, #4]
   86816:	ea23 0304 	bic.w	r3, r3, r4
   8681a:	607b      	str	r3, [r7, #4]
   8681c:	0064      	lsls	r4, r4, #1
   8681e:	429c      	cmp	r4, r3
   86820:	f63f aec8 	bhi.w	865b4 <_malloc_r+0x1d0>
   86824:	2c00      	cmp	r4, #0
   86826:	f43f aec5 	beq.w	865b4 <_malloc_r+0x1d0>
   8682a:	421c      	tst	r4, r3
   8682c:	4640      	mov	r0, r8
   8682e:	f47f ae4c 	bne.w	864ca <_malloc_r+0xe6>
   86832:	0064      	lsls	r4, r4, #1
   86834:	421c      	tst	r4, r3
   86836:	f100 0004 	add.w	r0, r0, #4
   8683a:	d0fa      	beq.n	86832 <_malloc_r+0x44e>
   8683c:	e645      	b.n	864ca <_malloc_r+0xe6>
   8683e:	468c      	mov	ip, r1
   86840:	e78c      	b.n	8675c <_malloc_r+0x378>
   86842:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86846:	d815      	bhi.n	86874 <_malloc_r+0x490>
   86848:	0bf3      	lsrs	r3, r6, #15
   8684a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8684e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   86852:	00c1      	lsls	r1, r0, #3
   86854:	e5e8      	b.n	86428 <_malloc_r+0x44>
   86856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8685a:	e6ee      	b.n	8663a <_malloc_r+0x256>
   8685c:	2101      	movs	r1, #1
   8685e:	687b      	ldr	r3, [r7, #4]
   86860:	1092      	asrs	r2, r2, #2
   86862:	fa01 f202 	lsl.w	r2, r1, r2
   86866:	431a      	orrs	r2, r3
   86868:	607a      	str	r2, [r7, #4]
   8686a:	4663      	mov	r3, ip
   8686c:	e779      	b.n	86762 <_malloc_r+0x37e>
   8686e:	2301      	movs	r3, #1
   86870:	6053      	str	r3, [r2, #4]
   86872:	e72a      	b.n	866ca <_malloc_r+0x2e6>
   86874:	f240 5254 	movw	r2, #1364	; 0x554
   86878:	4293      	cmp	r3, r2
   8687a:	d822      	bhi.n	868c2 <_malloc_r+0x4de>
   8687c:	0cb3      	lsrs	r3, r6, #18
   8687e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   86882:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   86886:	00c1      	lsls	r1, r0, #3
   86888:	e5ce      	b.n	86428 <_malloc_r+0x44>
   8688a:	f103 0b10 	add.w	fp, r3, #16
   8688e:	e6af      	b.n	865f0 <_malloc_r+0x20c>
   86890:	2a54      	cmp	r2, #84	; 0x54
   86892:	d829      	bhi.n	868e8 <_malloc_r+0x504>
   86894:	0b1a      	lsrs	r2, r3, #12
   86896:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8689a:	00c9      	lsls	r1, r1, #3
   8689c:	326e      	adds	r2, #110	; 0x6e
   8689e:	e74d      	b.n	8673c <_malloc_r+0x358>
   868a0:	4b20      	ldr	r3, [pc, #128]	; (86924 <_malloc_r+0x540>)
   868a2:	6819      	ldr	r1, [r3, #0]
   868a4:	4459      	add	r1, fp
   868a6:	6019      	str	r1, [r3, #0]
   868a8:	e6b3      	b.n	86612 <_malloc_r+0x22e>
   868aa:	f3ca 000b 	ubfx	r0, sl, #0, #12
   868ae:	2800      	cmp	r0, #0
   868b0:	f47f aeaf 	bne.w	86612 <_malloc_r+0x22e>
   868b4:	eb08 030b 	add.w	r3, r8, fp
   868b8:	68ba      	ldr	r2, [r7, #8]
   868ba:	f043 0301 	orr.w	r3, r3, #1
   868be:	6053      	str	r3, [r2, #4]
   868c0:	e6ef      	b.n	866a2 <_malloc_r+0x2be>
   868c2:	207f      	movs	r0, #127	; 0x7f
   868c4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   868c8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   868cc:	e5ac      	b.n	86428 <_malloc_r+0x44>
   868ce:	f104 0108 	add.w	r1, r4, #8
   868d2:	4628      	mov	r0, r5
   868d4:	9300      	str	r3, [sp, #0]
   868d6:	f000 fd5d 	bl	87394 <_free_r>
   868da:	9b00      	ldr	r3, [sp, #0]
   868dc:	6819      	ldr	r1, [r3, #0]
   868de:	e6e0      	b.n	866a2 <_malloc_r+0x2be>
   868e0:	2001      	movs	r0, #1
   868e2:	f04f 0900 	mov.w	r9, #0
   868e6:	e6bd      	b.n	86664 <_malloc_r+0x280>
   868e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   868ec:	d805      	bhi.n	868fa <_malloc_r+0x516>
   868ee:	0bda      	lsrs	r2, r3, #15
   868f0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   868f4:	00c9      	lsls	r1, r1, #3
   868f6:	3277      	adds	r2, #119	; 0x77
   868f8:	e720      	b.n	8673c <_malloc_r+0x358>
   868fa:	f240 5154 	movw	r1, #1364	; 0x554
   868fe:	428a      	cmp	r2, r1
   86900:	d805      	bhi.n	8690e <_malloc_r+0x52a>
   86902:	0c9a      	lsrs	r2, r3, #18
   86904:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   86908:	00c9      	lsls	r1, r1, #3
   8690a:	327c      	adds	r2, #124	; 0x7c
   8690c:	e716      	b.n	8673c <_malloc_r+0x358>
   8690e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86912:	227e      	movs	r2, #126	; 0x7e
   86914:	e712      	b.n	8673c <_malloc_r+0x358>
   86916:	687b      	ldr	r3, [r7, #4]
   86918:	e780      	b.n	8681c <_malloc_r+0x438>
   8691a:	08f0      	lsrs	r0, r6, #3
   8691c:	f106 0308 	add.w	r3, r6, #8
   86920:	e60e      	b.n	86540 <_malloc_r+0x15c>
   86922:	bf00      	nop
   86924:	20070fb8 	.word	0x20070fb8

00086928 <memchr>:
   86928:	0783      	lsls	r3, r0, #30
   8692a:	b470      	push	{r4, r5, r6}
   8692c:	b2cd      	uxtb	r5, r1
   8692e:	d03d      	beq.n	869ac <memchr+0x84>
   86930:	1e54      	subs	r4, r2, #1
   86932:	b30a      	cbz	r2, 86978 <memchr+0x50>
   86934:	7803      	ldrb	r3, [r0, #0]
   86936:	42ab      	cmp	r3, r5
   86938:	d01f      	beq.n	8697a <memchr+0x52>
   8693a:	1c43      	adds	r3, r0, #1
   8693c:	e005      	b.n	8694a <memchr+0x22>
   8693e:	f114 34ff 	adds.w	r4, r4, #4294967295
   86942:	d319      	bcc.n	86978 <memchr+0x50>
   86944:	7802      	ldrb	r2, [r0, #0]
   86946:	42aa      	cmp	r2, r5
   86948:	d017      	beq.n	8697a <memchr+0x52>
   8694a:	f013 0f03 	tst.w	r3, #3
   8694e:	4618      	mov	r0, r3
   86950:	f103 0301 	add.w	r3, r3, #1
   86954:	d1f3      	bne.n	8693e <memchr+0x16>
   86956:	2c03      	cmp	r4, #3
   86958:	d811      	bhi.n	8697e <memchr+0x56>
   8695a:	b34c      	cbz	r4, 869b0 <memchr+0x88>
   8695c:	7803      	ldrb	r3, [r0, #0]
   8695e:	42ab      	cmp	r3, r5
   86960:	d00b      	beq.n	8697a <memchr+0x52>
   86962:	4404      	add	r4, r0
   86964:	1c43      	adds	r3, r0, #1
   86966:	e002      	b.n	8696e <memchr+0x46>
   86968:	7802      	ldrb	r2, [r0, #0]
   8696a:	42aa      	cmp	r2, r5
   8696c:	d005      	beq.n	8697a <memchr+0x52>
   8696e:	429c      	cmp	r4, r3
   86970:	4618      	mov	r0, r3
   86972:	f103 0301 	add.w	r3, r3, #1
   86976:	d1f7      	bne.n	86968 <memchr+0x40>
   86978:	2000      	movs	r0, #0
   8697a:	bc70      	pop	{r4, r5, r6}
   8697c:	4770      	bx	lr
   8697e:	0209      	lsls	r1, r1, #8
   86980:	b289      	uxth	r1, r1
   86982:	4329      	orrs	r1, r5
   86984:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   86988:	6803      	ldr	r3, [r0, #0]
   8698a:	4606      	mov	r6, r0
   8698c:	404b      	eors	r3, r1
   8698e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   86992:	ea22 0303 	bic.w	r3, r2, r3
   86996:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8699a:	f100 0004 	add.w	r0, r0, #4
   8699e:	d103      	bne.n	869a8 <memchr+0x80>
   869a0:	3c04      	subs	r4, #4
   869a2:	2c03      	cmp	r4, #3
   869a4:	d8f0      	bhi.n	86988 <memchr+0x60>
   869a6:	e7d8      	b.n	8695a <memchr+0x32>
   869a8:	4630      	mov	r0, r6
   869aa:	e7d7      	b.n	8695c <memchr+0x34>
   869ac:	4614      	mov	r4, r2
   869ae:	e7d2      	b.n	86956 <memchr+0x2e>
   869b0:	4620      	mov	r0, r4
   869b2:	e7e2      	b.n	8697a <memchr+0x52>

000869b4 <memcpy>:
   869b4:	4684      	mov	ip, r0
   869b6:	ea41 0300 	orr.w	r3, r1, r0
   869ba:	f013 0303 	ands.w	r3, r3, #3
   869be:	d149      	bne.n	86a54 <memcpy+0xa0>
   869c0:	3a40      	subs	r2, #64	; 0x40
   869c2:	d323      	bcc.n	86a0c <memcpy+0x58>
   869c4:	680b      	ldr	r3, [r1, #0]
   869c6:	6003      	str	r3, [r0, #0]
   869c8:	684b      	ldr	r3, [r1, #4]
   869ca:	6043      	str	r3, [r0, #4]
   869cc:	688b      	ldr	r3, [r1, #8]
   869ce:	6083      	str	r3, [r0, #8]
   869d0:	68cb      	ldr	r3, [r1, #12]
   869d2:	60c3      	str	r3, [r0, #12]
   869d4:	690b      	ldr	r3, [r1, #16]
   869d6:	6103      	str	r3, [r0, #16]
   869d8:	694b      	ldr	r3, [r1, #20]
   869da:	6143      	str	r3, [r0, #20]
   869dc:	698b      	ldr	r3, [r1, #24]
   869de:	6183      	str	r3, [r0, #24]
   869e0:	69cb      	ldr	r3, [r1, #28]
   869e2:	61c3      	str	r3, [r0, #28]
   869e4:	6a0b      	ldr	r3, [r1, #32]
   869e6:	6203      	str	r3, [r0, #32]
   869e8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   869ea:	6243      	str	r3, [r0, #36]	; 0x24
   869ec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   869ee:	6283      	str	r3, [r0, #40]	; 0x28
   869f0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   869f2:	62c3      	str	r3, [r0, #44]	; 0x2c
   869f4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   869f6:	6303      	str	r3, [r0, #48]	; 0x30
   869f8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   869fa:	6343      	str	r3, [r0, #52]	; 0x34
   869fc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   869fe:	6383      	str	r3, [r0, #56]	; 0x38
   86a00:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86a02:	63c3      	str	r3, [r0, #60]	; 0x3c
   86a04:	3040      	adds	r0, #64	; 0x40
   86a06:	3140      	adds	r1, #64	; 0x40
   86a08:	3a40      	subs	r2, #64	; 0x40
   86a0a:	d2db      	bcs.n	869c4 <memcpy+0x10>
   86a0c:	3230      	adds	r2, #48	; 0x30
   86a0e:	d30b      	bcc.n	86a28 <memcpy+0x74>
   86a10:	680b      	ldr	r3, [r1, #0]
   86a12:	6003      	str	r3, [r0, #0]
   86a14:	684b      	ldr	r3, [r1, #4]
   86a16:	6043      	str	r3, [r0, #4]
   86a18:	688b      	ldr	r3, [r1, #8]
   86a1a:	6083      	str	r3, [r0, #8]
   86a1c:	68cb      	ldr	r3, [r1, #12]
   86a1e:	60c3      	str	r3, [r0, #12]
   86a20:	3010      	adds	r0, #16
   86a22:	3110      	adds	r1, #16
   86a24:	3a10      	subs	r2, #16
   86a26:	d2f3      	bcs.n	86a10 <memcpy+0x5c>
   86a28:	320c      	adds	r2, #12
   86a2a:	d305      	bcc.n	86a38 <memcpy+0x84>
   86a2c:	f851 3b04 	ldr.w	r3, [r1], #4
   86a30:	f840 3b04 	str.w	r3, [r0], #4
   86a34:	3a04      	subs	r2, #4
   86a36:	d2f9      	bcs.n	86a2c <memcpy+0x78>
   86a38:	3204      	adds	r2, #4
   86a3a:	d008      	beq.n	86a4e <memcpy+0x9a>
   86a3c:	07d2      	lsls	r2, r2, #31
   86a3e:	bf1c      	itt	ne
   86a40:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86a44:	f800 3b01 	strbne.w	r3, [r0], #1
   86a48:	d301      	bcc.n	86a4e <memcpy+0x9a>
   86a4a:	880b      	ldrh	r3, [r1, #0]
   86a4c:	8003      	strh	r3, [r0, #0]
   86a4e:	4660      	mov	r0, ip
   86a50:	4770      	bx	lr
   86a52:	bf00      	nop
   86a54:	2a08      	cmp	r2, #8
   86a56:	d313      	bcc.n	86a80 <memcpy+0xcc>
   86a58:	078b      	lsls	r3, r1, #30
   86a5a:	d0b1      	beq.n	869c0 <memcpy+0xc>
   86a5c:	f010 0303 	ands.w	r3, r0, #3
   86a60:	d0ae      	beq.n	869c0 <memcpy+0xc>
   86a62:	f1c3 0304 	rsb	r3, r3, #4
   86a66:	1ad2      	subs	r2, r2, r3
   86a68:	07db      	lsls	r3, r3, #31
   86a6a:	bf1c      	itt	ne
   86a6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86a70:	f800 3b01 	strbne.w	r3, [r0], #1
   86a74:	d3a4      	bcc.n	869c0 <memcpy+0xc>
   86a76:	f831 3b02 	ldrh.w	r3, [r1], #2
   86a7a:	f820 3b02 	strh.w	r3, [r0], #2
   86a7e:	e79f      	b.n	869c0 <memcpy+0xc>
   86a80:	3a04      	subs	r2, #4
   86a82:	d3d9      	bcc.n	86a38 <memcpy+0x84>
   86a84:	3a01      	subs	r2, #1
   86a86:	f811 3b01 	ldrb.w	r3, [r1], #1
   86a8a:	f800 3b01 	strb.w	r3, [r0], #1
   86a8e:	d2f9      	bcs.n	86a84 <memcpy+0xd0>
   86a90:	780b      	ldrb	r3, [r1, #0]
   86a92:	7003      	strb	r3, [r0, #0]
   86a94:	784b      	ldrb	r3, [r1, #1]
   86a96:	7043      	strb	r3, [r0, #1]
   86a98:	788b      	ldrb	r3, [r1, #2]
   86a9a:	7083      	strb	r3, [r0, #2]
   86a9c:	4660      	mov	r0, ip
   86a9e:	4770      	bx	lr

00086aa0 <__malloc_lock>:
   86aa0:	4801      	ldr	r0, [pc, #4]	; (86aa8 <__malloc_lock+0x8>)
   86aa2:	f7ff bc9b 	b.w	863dc <__retarget_lock_acquire_recursive>
   86aa6:	bf00      	nop
   86aa8:	2007104c 	.word	0x2007104c

00086aac <__malloc_unlock>:
   86aac:	4801      	ldr	r0, [pc, #4]	; (86ab4 <__malloc_unlock+0x8>)
   86aae:	f7ff bc97 	b.w	863e0 <__retarget_lock_release_recursive>
   86ab2:	bf00      	nop
   86ab4:	2007104c 	.word	0x2007104c

00086ab8 <_Balloc>:
   86ab8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86aba:	b570      	push	{r4, r5, r6, lr}
   86abc:	4605      	mov	r5, r0
   86abe:	460c      	mov	r4, r1
   86ac0:	b14b      	cbz	r3, 86ad6 <_Balloc+0x1e>
   86ac2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   86ac6:	b180      	cbz	r0, 86aea <_Balloc+0x32>
   86ac8:	6802      	ldr	r2, [r0, #0]
   86aca:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   86ace:	2300      	movs	r3, #0
   86ad0:	6103      	str	r3, [r0, #16]
   86ad2:	60c3      	str	r3, [r0, #12]
   86ad4:	bd70      	pop	{r4, r5, r6, pc}
   86ad6:	2221      	movs	r2, #33	; 0x21
   86ad8:	2104      	movs	r1, #4
   86ada:	f000 fbdb 	bl	87294 <_calloc_r>
   86ade:	64e8      	str	r0, [r5, #76]	; 0x4c
   86ae0:	4603      	mov	r3, r0
   86ae2:	2800      	cmp	r0, #0
   86ae4:	d1ed      	bne.n	86ac2 <_Balloc+0xa>
   86ae6:	2000      	movs	r0, #0
   86ae8:	bd70      	pop	{r4, r5, r6, pc}
   86aea:	2101      	movs	r1, #1
   86aec:	fa01 f604 	lsl.w	r6, r1, r4
   86af0:	1d72      	adds	r2, r6, #5
   86af2:	4628      	mov	r0, r5
   86af4:	0092      	lsls	r2, r2, #2
   86af6:	f000 fbcd 	bl	87294 <_calloc_r>
   86afa:	2800      	cmp	r0, #0
   86afc:	d0f3      	beq.n	86ae6 <_Balloc+0x2e>
   86afe:	6044      	str	r4, [r0, #4]
   86b00:	6086      	str	r6, [r0, #8]
   86b02:	e7e4      	b.n	86ace <_Balloc+0x16>

00086b04 <_Bfree>:
   86b04:	b131      	cbz	r1, 86b14 <_Bfree+0x10>
   86b06:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86b08:	684a      	ldr	r2, [r1, #4]
   86b0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   86b0e:	6008      	str	r0, [r1, #0]
   86b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   86b14:	4770      	bx	lr
   86b16:	bf00      	nop

00086b18 <__multadd>:
   86b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   86b1a:	460c      	mov	r4, r1
   86b1c:	4605      	mov	r5, r0
   86b1e:	f04f 0e00 	mov.w	lr, #0
   86b22:	690e      	ldr	r6, [r1, #16]
   86b24:	b083      	sub	sp, #12
   86b26:	f101 0714 	add.w	r7, r1, #20
   86b2a:	6838      	ldr	r0, [r7, #0]
   86b2c:	f10e 0e01 	add.w	lr, lr, #1
   86b30:	b281      	uxth	r1, r0
   86b32:	fb02 3301 	mla	r3, r2, r1, r3
   86b36:	0c01      	lsrs	r1, r0, #16
   86b38:	0c18      	lsrs	r0, r3, #16
   86b3a:	fb02 0101 	mla	r1, r2, r1, r0
   86b3e:	b29b      	uxth	r3, r3
   86b40:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   86b44:	4576      	cmp	r6, lr
   86b46:	f847 3b04 	str.w	r3, [r7], #4
   86b4a:	ea4f 4311 	mov.w	r3, r1, lsr #16
   86b4e:	dcec      	bgt.n	86b2a <__multadd+0x12>
   86b50:	b13b      	cbz	r3, 86b62 <__multadd+0x4a>
   86b52:	68a2      	ldr	r2, [r4, #8]
   86b54:	4296      	cmp	r6, r2
   86b56:	da07      	bge.n	86b68 <__multadd+0x50>
   86b58:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   86b5c:	3601      	adds	r6, #1
   86b5e:	6153      	str	r3, [r2, #20]
   86b60:	6126      	str	r6, [r4, #16]
   86b62:	4620      	mov	r0, r4
   86b64:	b003      	add	sp, #12
   86b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86b68:	6861      	ldr	r1, [r4, #4]
   86b6a:	4628      	mov	r0, r5
   86b6c:	3101      	adds	r1, #1
   86b6e:	9301      	str	r3, [sp, #4]
   86b70:	f7ff ffa2 	bl	86ab8 <_Balloc>
   86b74:	4607      	mov	r7, r0
   86b76:	6922      	ldr	r2, [r4, #16]
   86b78:	f104 010c 	add.w	r1, r4, #12
   86b7c:	3202      	adds	r2, #2
   86b7e:	0092      	lsls	r2, r2, #2
   86b80:	300c      	adds	r0, #12
   86b82:	f7ff ff17 	bl	869b4 <memcpy>
   86b86:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   86b88:	6861      	ldr	r1, [r4, #4]
   86b8a:	9b01      	ldr	r3, [sp, #4]
   86b8c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   86b90:	6020      	str	r0, [r4, #0]
   86b92:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   86b96:	463c      	mov	r4, r7
   86b98:	e7de      	b.n	86b58 <__multadd+0x40>
   86b9a:	bf00      	nop

00086b9c <__hi0bits>:
   86b9c:	0c02      	lsrs	r2, r0, #16
   86b9e:	0412      	lsls	r2, r2, #16
   86ba0:	4603      	mov	r3, r0
   86ba2:	b9b2      	cbnz	r2, 86bd2 <__hi0bits+0x36>
   86ba4:	0403      	lsls	r3, r0, #16
   86ba6:	2010      	movs	r0, #16
   86ba8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   86bac:	bf04      	itt	eq
   86bae:	021b      	lsleq	r3, r3, #8
   86bb0:	3008      	addeq	r0, #8
   86bb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   86bb6:	bf04      	itt	eq
   86bb8:	011b      	lsleq	r3, r3, #4
   86bba:	3004      	addeq	r0, #4
   86bbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   86bc0:	bf04      	itt	eq
   86bc2:	009b      	lsleq	r3, r3, #2
   86bc4:	3002      	addeq	r0, #2
   86bc6:	2b00      	cmp	r3, #0
   86bc8:	db02      	blt.n	86bd0 <__hi0bits+0x34>
   86bca:	005b      	lsls	r3, r3, #1
   86bcc:	d403      	bmi.n	86bd6 <__hi0bits+0x3a>
   86bce:	2020      	movs	r0, #32
   86bd0:	4770      	bx	lr
   86bd2:	2000      	movs	r0, #0
   86bd4:	e7e8      	b.n	86ba8 <__hi0bits+0xc>
   86bd6:	3001      	adds	r0, #1
   86bd8:	4770      	bx	lr
   86bda:	bf00      	nop

00086bdc <__lo0bits>:
   86bdc:	6803      	ldr	r3, [r0, #0]
   86bde:	4601      	mov	r1, r0
   86be0:	f013 0207 	ands.w	r2, r3, #7
   86be4:	d007      	beq.n	86bf6 <__lo0bits+0x1a>
   86be6:	07da      	lsls	r2, r3, #31
   86be8:	d421      	bmi.n	86c2e <__lo0bits+0x52>
   86bea:	0798      	lsls	r0, r3, #30
   86bec:	d421      	bmi.n	86c32 <__lo0bits+0x56>
   86bee:	089b      	lsrs	r3, r3, #2
   86bf0:	600b      	str	r3, [r1, #0]
   86bf2:	2002      	movs	r0, #2
   86bf4:	4770      	bx	lr
   86bf6:	b298      	uxth	r0, r3
   86bf8:	b198      	cbz	r0, 86c22 <__lo0bits+0x46>
   86bfa:	4610      	mov	r0, r2
   86bfc:	f013 0fff 	tst.w	r3, #255	; 0xff
   86c00:	bf04      	itt	eq
   86c02:	0a1b      	lsreq	r3, r3, #8
   86c04:	3008      	addeq	r0, #8
   86c06:	071a      	lsls	r2, r3, #28
   86c08:	bf04      	itt	eq
   86c0a:	091b      	lsreq	r3, r3, #4
   86c0c:	3004      	addeq	r0, #4
   86c0e:	079a      	lsls	r2, r3, #30
   86c10:	bf04      	itt	eq
   86c12:	089b      	lsreq	r3, r3, #2
   86c14:	3002      	addeq	r0, #2
   86c16:	07da      	lsls	r2, r3, #31
   86c18:	d407      	bmi.n	86c2a <__lo0bits+0x4e>
   86c1a:	085b      	lsrs	r3, r3, #1
   86c1c:	d104      	bne.n	86c28 <__lo0bits+0x4c>
   86c1e:	2020      	movs	r0, #32
   86c20:	4770      	bx	lr
   86c22:	0c1b      	lsrs	r3, r3, #16
   86c24:	2010      	movs	r0, #16
   86c26:	e7e9      	b.n	86bfc <__lo0bits+0x20>
   86c28:	3001      	adds	r0, #1
   86c2a:	600b      	str	r3, [r1, #0]
   86c2c:	4770      	bx	lr
   86c2e:	2000      	movs	r0, #0
   86c30:	4770      	bx	lr
   86c32:	085b      	lsrs	r3, r3, #1
   86c34:	600b      	str	r3, [r1, #0]
   86c36:	2001      	movs	r0, #1
   86c38:	4770      	bx	lr
   86c3a:	bf00      	nop

00086c3c <__i2b>:
   86c3c:	b510      	push	{r4, lr}
   86c3e:	460c      	mov	r4, r1
   86c40:	2101      	movs	r1, #1
   86c42:	f7ff ff39 	bl	86ab8 <_Balloc>
   86c46:	2201      	movs	r2, #1
   86c48:	6144      	str	r4, [r0, #20]
   86c4a:	6102      	str	r2, [r0, #16]
   86c4c:	bd10      	pop	{r4, pc}
   86c4e:	bf00      	nop

00086c50 <__multiply>:
   86c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86c54:	690c      	ldr	r4, [r1, #16]
   86c56:	6915      	ldr	r5, [r2, #16]
   86c58:	b083      	sub	sp, #12
   86c5a:	42ac      	cmp	r4, r5
   86c5c:	468b      	mov	fp, r1
   86c5e:	4616      	mov	r6, r2
   86c60:	da04      	bge.n	86c6c <__multiply+0x1c>
   86c62:	4622      	mov	r2, r4
   86c64:	46b3      	mov	fp, r6
   86c66:	462c      	mov	r4, r5
   86c68:	460e      	mov	r6, r1
   86c6a:	4615      	mov	r5, r2
   86c6c:	f8db 3008 	ldr.w	r3, [fp, #8]
   86c70:	eb04 0805 	add.w	r8, r4, r5
   86c74:	f8db 1004 	ldr.w	r1, [fp, #4]
   86c78:	4598      	cmp	r8, r3
   86c7a:	bfc8      	it	gt
   86c7c:	3101      	addgt	r1, #1
   86c7e:	f7ff ff1b 	bl	86ab8 <_Balloc>
   86c82:	f100 0914 	add.w	r9, r0, #20
   86c86:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   86c8a:	45d1      	cmp	r9, sl
   86c8c:	9000      	str	r0, [sp, #0]
   86c8e:	d205      	bcs.n	86c9c <__multiply+0x4c>
   86c90:	464b      	mov	r3, r9
   86c92:	2100      	movs	r1, #0
   86c94:	f843 1b04 	str.w	r1, [r3], #4
   86c98:	459a      	cmp	sl, r3
   86c9a:	d8fb      	bhi.n	86c94 <__multiply+0x44>
   86c9c:	f106 0c14 	add.w	ip, r6, #20
   86ca0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   86ca4:	f10b 0b14 	add.w	fp, fp, #20
   86ca8:	459c      	cmp	ip, r3
   86caa:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   86cae:	d24b      	bcs.n	86d48 <__multiply+0xf8>
   86cb0:	f8cd a004 	str.w	sl, [sp, #4]
   86cb4:	469a      	mov	sl, r3
   86cb6:	f8dc 5000 	ldr.w	r5, [ip]
   86cba:	b2af      	uxth	r7, r5
   86cbc:	b1e7      	cbz	r7, 86cf8 <__multiply+0xa8>
   86cbe:	464d      	mov	r5, r9
   86cc0:	465e      	mov	r6, fp
   86cc2:	2100      	movs	r1, #0
   86cc4:	f856 2b04 	ldr.w	r2, [r6], #4
   86cc8:	6828      	ldr	r0, [r5, #0]
   86cca:	b293      	uxth	r3, r2
   86ccc:	b284      	uxth	r4, r0
   86cce:	0c12      	lsrs	r2, r2, #16
   86cd0:	fb07 4303 	mla	r3, r7, r3, r4
   86cd4:	0c00      	lsrs	r0, r0, #16
   86cd6:	fb07 0202 	mla	r2, r7, r2, r0
   86cda:	440b      	add	r3, r1
   86cdc:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   86ce0:	b29b      	uxth	r3, r3
   86ce2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   86ce6:	45b6      	cmp	lr, r6
   86ce8:	f845 3b04 	str.w	r3, [r5], #4
   86cec:	ea4f 4111 	mov.w	r1, r1, lsr #16
   86cf0:	d8e8      	bhi.n	86cc4 <__multiply+0x74>
   86cf2:	6029      	str	r1, [r5, #0]
   86cf4:	f8dc 5000 	ldr.w	r5, [ip]
   86cf8:	0c2d      	lsrs	r5, r5, #16
   86cfa:	d01d      	beq.n	86d38 <__multiply+0xe8>
   86cfc:	f8d9 3000 	ldr.w	r3, [r9]
   86d00:	4648      	mov	r0, r9
   86d02:	461c      	mov	r4, r3
   86d04:	4659      	mov	r1, fp
   86d06:	2200      	movs	r2, #0
   86d08:	880e      	ldrh	r6, [r1, #0]
   86d0a:	0c24      	lsrs	r4, r4, #16
   86d0c:	fb05 4406 	mla	r4, r5, r6, r4
   86d10:	b29b      	uxth	r3, r3
   86d12:	4422      	add	r2, r4
   86d14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   86d18:	f840 3b04 	str.w	r3, [r0], #4
   86d1c:	f851 3b04 	ldr.w	r3, [r1], #4
   86d20:	6804      	ldr	r4, [r0, #0]
   86d22:	0c1b      	lsrs	r3, r3, #16
   86d24:	b2a6      	uxth	r6, r4
   86d26:	fb05 6303 	mla	r3, r5, r3, r6
   86d2a:	458e      	cmp	lr, r1
   86d2c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   86d30:	ea4f 4213 	mov.w	r2, r3, lsr #16
   86d34:	d8e8      	bhi.n	86d08 <__multiply+0xb8>
   86d36:	6003      	str	r3, [r0, #0]
   86d38:	f10c 0c04 	add.w	ip, ip, #4
   86d3c:	45e2      	cmp	sl, ip
   86d3e:	f109 0904 	add.w	r9, r9, #4
   86d42:	d8b8      	bhi.n	86cb6 <__multiply+0x66>
   86d44:	f8dd a004 	ldr.w	sl, [sp, #4]
   86d48:	f1b8 0f00 	cmp.w	r8, #0
   86d4c:	dd0b      	ble.n	86d66 <__multiply+0x116>
   86d4e:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   86d52:	f1aa 0a04 	sub.w	sl, sl, #4
   86d56:	b11b      	cbz	r3, 86d60 <__multiply+0x110>
   86d58:	e005      	b.n	86d66 <__multiply+0x116>
   86d5a:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   86d5e:	b913      	cbnz	r3, 86d66 <__multiply+0x116>
   86d60:	f1b8 0801 	subs.w	r8, r8, #1
   86d64:	d1f9      	bne.n	86d5a <__multiply+0x10a>
   86d66:	9800      	ldr	r0, [sp, #0]
   86d68:	f8c0 8010 	str.w	r8, [r0, #16]
   86d6c:	b003      	add	sp, #12
   86d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d72:	bf00      	nop

00086d74 <__pow5mult>:
   86d74:	f012 0303 	ands.w	r3, r2, #3
   86d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86d7c:	4614      	mov	r4, r2
   86d7e:	4607      	mov	r7, r0
   86d80:	d12e      	bne.n	86de0 <__pow5mult+0x6c>
   86d82:	460d      	mov	r5, r1
   86d84:	10a4      	asrs	r4, r4, #2
   86d86:	d01c      	beq.n	86dc2 <__pow5mult+0x4e>
   86d88:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   86d8a:	b396      	cbz	r6, 86df2 <__pow5mult+0x7e>
   86d8c:	07e3      	lsls	r3, r4, #31
   86d8e:	f04f 0800 	mov.w	r8, #0
   86d92:	d406      	bmi.n	86da2 <__pow5mult+0x2e>
   86d94:	1064      	asrs	r4, r4, #1
   86d96:	d014      	beq.n	86dc2 <__pow5mult+0x4e>
   86d98:	6830      	ldr	r0, [r6, #0]
   86d9a:	b1a8      	cbz	r0, 86dc8 <__pow5mult+0x54>
   86d9c:	4606      	mov	r6, r0
   86d9e:	07e3      	lsls	r3, r4, #31
   86da0:	d5f8      	bpl.n	86d94 <__pow5mult+0x20>
   86da2:	4632      	mov	r2, r6
   86da4:	4629      	mov	r1, r5
   86da6:	4638      	mov	r0, r7
   86da8:	f7ff ff52 	bl	86c50 <__multiply>
   86dac:	b1b5      	cbz	r5, 86ddc <__pow5mult+0x68>
   86dae:	686a      	ldr	r2, [r5, #4]
   86db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86db2:	1064      	asrs	r4, r4, #1
   86db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86db8:	6029      	str	r1, [r5, #0]
   86dba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   86dbe:	4605      	mov	r5, r0
   86dc0:	d1ea      	bne.n	86d98 <__pow5mult+0x24>
   86dc2:	4628      	mov	r0, r5
   86dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86dc8:	4632      	mov	r2, r6
   86dca:	4631      	mov	r1, r6
   86dcc:	4638      	mov	r0, r7
   86dce:	f7ff ff3f 	bl	86c50 <__multiply>
   86dd2:	6030      	str	r0, [r6, #0]
   86dd4:	f8c0 8000 	str.w	r8, [r0]
   86dd8:	4606      	mov	r6, r0
   86dda:	e7e0      	b.n	86d9e <__pow5mult+0x2a>
   86ddc:	4605      	mov	r5, r0
   86dde:	e7d9      	b.n	86d94 <__pow5mult+0x20>
   86de0:	4a0b      	ldr	r2, [pc, #44]	; (86e10 <__pow5mult+0x9c>)
   86de2:	3b01      	subs	r3, #1
   86de4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   86de8:	2300      	movs	r3, #0
   86dea:	f7ff fe95 	bl	86b18 <__multadd>
   86dee:	4605      	mov	r5, r0
   86df0:	e7c8      	b.n	86d84 <__pow5mult+0x10>
   86df2:	2101      	movs	r1, #1
   86df4:	4638      	mov	r0, r7
   86df6:	f7ff fe5f 	bl	86ab8 <_Balloc>
   86dfa:	f240 2171 	movw	r1, #625	; 0x271
   86dfe:	2201      	movs	r2, #1
   86e00:	2300      	movs	r3, #0
   86e02:	6141      	str	r1, [r0, #20]
   86e04:	6102      	str	r2, [r0, #16]
   86e06:	4606      	mov	r6, r0
   86e08:	64b8      	str	r0, [r7, #72]	; 0x48
   86e0a:	6003      	str	r3, [r0, #0]
   86e0c:	e7be      	b.n	86d8c <__pow5mult+0x18>
   86e0e:	bf00      	nop
   86e10:	00088530 	.word	0x00088530

00086e14 <__lshift>:
   86e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86e18:	690b      	ldr	r3, [r1, #16]
   86e1a:	1154      	asrs	r4, r2, #5
   86e1c:	eb04 0803 	add.w	r8, r4, r3
   86e20:	688b      	ldr	r3, [r1, #8]
   86e22:	f108 0501 	add.w	r5, r8, #1
   86e26:	429d      	cmp	r5, r3
   86e28:	460e      	mov	r6, r1
   86e2a:	4691      	mov	r9, r2
   86e2c:	4607      	mov	r7, r0
   86e2e:	6849      	ldr	r1, [r1, #4]
   86e30:	dd04      	ble.n	86e3c <__lshift+0x28>
   86e32:	005b      	lsls	r3, r3, #1
   86e34:	429d      	cmp	r5, r3
   86e36:	f101 0101 	add.w	r1, r1, #1
   86e3a:	dcfa      	bgt.n	86e32 <__lshift+0x1e>
   86e3c:	4638      	mov	r0, r7
   86e3e:	f7ff fe3b 	bl	86ab8 <_Balloc>
   86e42:	2c00      	cmp	r4, #0
   86e44:	f100 0314 	add.w	r3, r0, #20
   86e48:	dd06      	ble.n	86e58 <__lshift+0x44>
   86e4a:	2100      	movs	r1, #0
   86e4c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   86e50:	f843 1b04 	str.w	r1, [r3], #4
   86e54:	429a      	cmp	r2, r3
   86e56:	d1fb      	bne.n	86e50 <__lshift+0x3c>
   86e58:	6934      	ldr	r4, [r6, #16]
   86e5a:	f106 0114 	add.w	r1, r6, #20
   86e5e:	f019 091f 	ands.w	r9, r9, #31
   86e62:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   86e66:	d01d      	beq.n	86ea4 <__lshift+0x90>
   86e68:	2200      	movs	r2, #0
   86e6a:	f1c9 0c20 	rsb	ip, r9, #32
   86e6e:	680c      	ldr	r4, [r1, #0]
   86e70:	fa04 f409 	lsl.w	r4, r4, r9
   86e74:	4314      	orrs	r4, r2
   86e76:	f843 4b04 	str.w	r4, [r3], #4
   86e7a:	f851 2b04 	ldr.w	r2, [r1], #4
   86e7e:	458e      	cmp	lr, r1
   86e80:	fa22 f20c 	lsr.w	r2, r2, ip
   86e84:	d8f3      	bhi.n	86e6e <__lshift+0x5a>
   86e86:	601a      	str	r2, [r3, #0]
   86e88:	b10a      	cbz	r2, 86e8e <__lshift+0x7a>
   86e8a:	f108 0502 	add.w	r5, r8, #2
   86e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86e90:	6872      	ldr	r2, [r6, #4]
   86e92:	3d01      	subs	r5, #1
   86e94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86e98:	6105      	str	r5, [r0, #16]
   86e9a:	6031      	str	r1, [r6, #0]
   86e9c:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   86ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86ea4:	3b04      	subs	r3, #4
   86ea6:	f851 2b04 	ldr.w	r2, [r1], #4
   86eaa:	458e      	cmp	lr, r1
   86eac:	f843 2f04 	str.w	r2, [r3, #4]!
   86eb0:	d8f9      	bhi.n	86ea6 <__lshift+0x92>
   86eb2:	e7ec      	b.n	86e8e <__lshift+0x7a>

00086eb4 <__mcmp>:
   86eb4:	b430      	push	{r4, r5}
   86eb6:	690b      	ldr	r3, [r1, #16]
   86eb8:	4605      	mov	r5, r0
   86eba:	6900      	ldr	r0, [r0, #16]
   86ebc:	1ac0      	subs	r0, r0, r3
   86ebe:	d10f      	bne.n	86ee0 <__mcmp+0x2c>
   86ec0:	009b      	lsls	r3, r3, #2
   86ec2:	3514      	adds	r5, #20
   86ec4:	3114      	adds	r1, #20
   86ec6:	4419      	add	r1, r3
   86ec8:	442b      	add	r3, r5
   86eca:	e001      	b.n	86ed0 <__mcmp+0x1c>
   86ecc:	429d      	cmp	r5, r3
   86ece:	d207      	bcs.n	86ee0 <__mcmp+0x2c>
   86ed0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   86ed4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   86ed8:	4294      	cmp	r4, r2
   86eda:	d0f7      	beq.n	86ecc <__mcmp+0x18>
   86edc:	d302      	bcc.n	86ee4 <__mcmp+0x30>
   86ede:	2001      	movs	r0, #1
   86ee0:	bc30      	pop	{r4, r5}
   86ee2:	4770      	bx	lr
   86ee4:	f04f 30ff 	mov.w	r0, #4294967295
   86ee8:	e7fa      	b.n	86ee0 <__mcmp+0x2c>
   86eea:	bf00      	nop

00086eec <__mdiff>:
   86eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86ef0:	690c      	ldr	r4, [r1, #16]
   86ef2:	4689      	mov	r9, r1
   86ef4:	6911      	ldr	r1, [r2, #16]
   86ef6:	4692      	mov	sl, r2
   86ef8:	1a64      	subs	r4, r4, r1
   86efa:	2c00      	cmp	r4, #0
   86efc:	d117      	bne.n	86f2e <__mdiff+0x42>
   86efe:	0089      	lsls	r1, r1, #2
   86f00:	f109 0714 	add.w	r7, r9, #20
   86f04:	f102 0614 	add.w	r6, r2, #20
   86f08:	187b      	adds	r3, r7, r1
   86f0a:	4431      	add	r1, r6
   86f0c:	e001      	b.n	86f12 <__mdiff+0x26>
   86f0e:	429f      	cmp	r7, r3
   86f10:	d265      	bcs.n	86fde <__mdiff+0xf2>
   86f12:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   86f16:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   86f1a:	4295      	cmp	r5, r2
   86f1c:	d0f7      	beq.n	86f0e <__mdiff+0x22>
   86f1e:	d267      	bcs.n	86ff0 <__mdiff+0x104>
   86f20:	464b      	mov	r3, r9
   86f22:	46bb      	mov	fp, r7
   86f24:	46d1      	mov	r9, sl
   86f26:	4637      	mov	r7, r6
   86f28:	469a      	mov	sl, r3
   86f2a:	2401      	movs	r4, #1
   86f2c:	e005      	b.n	86f3a <__mdiff+0x4e>
   86f2e:	db61      	blt.n	86ff4 <__mdiff+0x108>
   86f30:	2400      	movs	r4, #0
   86f32:	f109 0714 	add.w	r7, r9, #20
   86f36:	f10a 0b14 	add.w	fp, sl, #20
   86f3a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   86f3e:	f7ff fdbb 	bl	86ab8 <_Balloc>
   86f42:	465d      	mov	r5, fp
   86f44:	f04f 0800 	mov.w	r8, #0
   86f48:	f8d9 e010 	ldr.w	lr, [r9, #16]
   86f4c:	f8da 3010 	ldr.w	r3, [sl, #16]
   86f50:	463e      	mov	r6, r7
   86f52:	60c4      	str	r4, [r0, #12]
   86f54:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   86f58:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   86f5c:	f100 0414 	add.w	r4, r0, #20
   86f60:	f856 9b04 	ldr.w	r9, [r6], #4
   86f64:	f855 2b04 	ldr.w	r2, [r5], #4
   86f68:	fa1f f389 	uxth.w	r3, r9
   86f6c:	4443      	add	r3, r8
   86f6e:	fa1f f882 	uxth.w	r8, r2
   86f72:	0c12      	lsrs	r2, r2, #16
   86f74:	eba3 0308 	sub.w	r3, r3, r8
   86f78:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   86f7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   86f80:	b29b      	uxth	r3, r3
   86f82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   86f86:	45ac      	cmp	ip, r5
   86f88:	f844 3b04 	str.w	r3, [r4], #4
   86f8c:	ea4f 4822 	mov.w	r8, r2, asr #16
   86f90:	d8e6      	bhi.n	86f60 <__mdiff+0x74>
   86f92:	42b7      	cmp	r7, r6
   86f94:	d917      	bls.n	86fc6 <__mdiff+0xda>
   86f96:	46a4      	mov	ip, r4
   86f98:	4635      	mov	r5, r6
   86f9a:	f855 3b04 	ldr.w	r3, [r5], #4
   86f9e:	b299      	uxth	r1, r3
   86fa0:	4441      	add	r1, r8
   86fa2:	140a      	asrs	r2, r1, #16
   86fa4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   86fa8:	b289      	uxth	r1, r1
   86faa:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   86fae:	42af      	cmp	r7, r5
   86fb0:	f84c 3b04 	str.w	r3, [ip], #4
   86fb4:	ea4f 4822 	mov.w	r8, r2, asr #16
   86fb8:	d8ef      	bhi.n	86f9a <__mdiff+0xae>
   86fba:	43f6      	mvns	r6, r6
   86fbc:	4437      	add	r7, r6
   86fbe:	f027 0703 	bic.w	r7, r7, #3
   86fc2:	3704      	adds	r7, #4
   86fc4:	443c      	add	r4, r7
   86fc6:	3c04      	subs	r4, #4
   86fc8:	b92b      	cbnz	r3, 86fd6 <__mdiff+0xea>
   86fca:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   86fce:	f10e 3eff 	add.w	lr, lr, #4294967295
   86fd2:	2b00      	cmp	r3, #0
   86fd4:	d0f9      	beq.n	86fca <__mdiff+0xde>
   86fd6:	f8c0 e010 	str.w	lr, [r0, #16]
   86fda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86fde:	2100      	movs	r1, #0
   86fe0:	f7ff fd6a 	bl	86ab8 <_Balloc>
   86fe4:	2201      	movs	r2, #1
   86fe6:	2300      	movs	r3, #0
   86fe8:	6102      	str	r2, [r0, #16]
   86fea:	6143      	str	r3, [r0, #20]
   86fec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86ff0:	46b3      	mov	fp, r6
   86ff2:	e7a2      	b.n	86f3a <__mdiff+0x4e>
   86ff4:	464b      	mov	r3, r9
   86ff6:	f109 0b14 	add.w	fp, r9, #20
   86ffa:	f102 0714 	add.w	r7, r2, #20
   86ffe:	4691      	mov	r9, r2
   87000:	2401      	movs	r4, #1
   87002:	469a      	mov	sl, r3
   87004:	e799      	b.n	86f3a <__mdiff+0x4e>
   87006:	bf00      	nop

00087008 <__d2b>:
   87008:	b5f0      	push	{r4, r5, r6, r7, lr}
   8700a:	2101      	movs	r1, #1
   8700c:	b083      	sub	sp, #12
   8700e:	461c      	mov	r4, r3
   87010:	f3c3 550a 	ubfx	r5, r3, #20, #11
   87014:	4616      	mov	r6, r2
   87016:	f7ff fd4f 	bl	86ab8 <_Balloc>
   8701a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   8701e:	4607      	mov	r7, r0
   87020:	b10d      	cbz	r5, 87026 <__d2b+0x1e>
   87022:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   87026:	9401      	str	r4, [sp, #4]
   87028:	b306      	cbz	r6, 8706c <__d2b+0x64>
   8702a:	a802      	add	r0, sp, #8
   8702c:	f840 6d08 	str.w	r6, [r0, #-8]!
   87030:	f7ff fdd4 	bl	86bdc <__lo0bits>
   87034:	2800      	cmp	r0, #0
   87036:	d130      	bne.n	8709a <__d2b+0x92>
   87038:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8703c:	617a      	str	r2, [r7, #20]
   8703e:	2b00      	cmp	r3, #0
   87040:	bf0c      	ite	eq
   87042:	2101      	moveq	r1, #1
   87044:	2102      	movne	r1, #2
   87046:	61bb      	str	r3, [r7, #24]
   87048:	6139      	str	r1, [r7, #16]
   8704a:	b9d5      	cbnz	r5, 87082 <__d2b+0x7a>
   8704c:	9a08      	ldr	r2, [sp, #32]
   8704e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   87052:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   87056:	6010      	str	r0, [r2, #0]
   87058:	6918      	ldr	r0, [r3, #16]
   8705a:	f7ff fd9f 	bl	86b9c <__hi0bits>
   8705e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87060:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   87064:	6018      	str	r0, [r3, #0]
   87066:	4638      	mov	r0, r7
   87068:	b003      	add	sp, #12
   8706a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8706c:	a801      	add	r0, sp, #4
   8706e:	f7ff fdb5 	bl	86bdc <__lo0bits>
   87072:	2201      	movs	r2, #1
   87074:	9b01      	ldr	r3, [sp, #4]
   87076:	4611      	mov	r1, r2
   87078:	3020      	adds	r0, #32
   8707a:	613a      	str	r2, [r7, #16]
   8707c:	617b      	str	r3, [r7, #20]
   8707e:	2d00      	cmp	r5, #0
   87080:	d0e4      	beq.n	8704c <__d2b+0x44>
   87082:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   87086:	9a08      	ldr	r2, [sp, #32]
   87088:	4403      	add	r3, r0
   8708a:	6013      	str	r3, [r2, #0]
   8708c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8708e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   87092:	6018      	str	r0, [r3, #0]
   87094:	4638      	mov	r0, r7
   87096:	b003      	add	sp, #12
   87098:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8709a:	9b01      	ldr	r3, [sp, #4]
   8709c:	f1c0 0220 	rsb	r2, r0, #32
   870a0:	9900      	ldr	r1, [sp, #0]
   870a2:	fa03 f202 	lsl.w	r2, r3, r2
   870a6:	430a      	orrs	r2, r1
   870a8:	40c3      	lsrs	r3, r0
   870aa:	9301      	str	r3, [sp, #4]
   870ac:	617a      	str	r2, [r7, #20]
   870ae:	e7c6      	b.n	8703e <__d2b+0x36>

000870b0 <_sbrk_r>:
   870b0:	b538      	push	{r3, r4, r5, lr}
   870b2:	2300      	movs	r3, #0
   870b4:	4c06      	ldr	r4, [pc, #24]	; (870d0 <_sbrk_r+0x20>)
   870b6:	4605      	mov	r5, r0
   870b8:	4608      	mov	r0, r1
   870ba:	6023      	str	r3, [r4, #0]
   870bc:	f7fb ff36 	bl	82f2c <_sbrk>
   870c0:	1c43      	adds	r3, r0, #1
   870c2:	d000      	beq.n	870c6 <_sbrk_r+0x16>
   870c4:	bd38      	pop	{r3, r4, r5, pc}
   870c6:	6823      	ldr	r3, [r4, #0]
   870c8:	2b00      	cmp	r3, #0
   870ca:	d0fb      	beq.n	870c4 <_sbrk_r+0x14>
   870cc:	602b      	str	r3, [r5, #0]
   870ce:	bd38      	pop	{r3, r4, r5, pc}
   870d0:	20071060 	.word	0x20071060

000870d4 <__ssprint_r>:
   870d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   870d8:	6893      	ldr	r3, [r2, #8]
   870da:	b083      	sub	sp, #12
   870dc:	4690      	mov	r8, r2
   870de:	2b00      	cmp	r3, #0
   870e0:	d070      	beq.n	871c4 <__ssprint_r+0xf0>
   870e2:	4682      	mov	sl, r0
   870e4:	460c      	mov	r4, r1
   870e6:	6817      	ldr	r7, [r2, #0]
   870e8:	688d      	ldr	r5, [r1, #8]
   870ea:	6808      	ldr	r0, [r1, #0]
   870ec:	e042      	b.n	87174 <__ssprint_r+0xa0>
   870ee:	89a3      	ldrh	r3, [r4, #12]
   870f0:	f413 6f90 	tst.w	r3, #1152	; 0x480
   870f4:	d02e      	beq.n	87154 <__ssprint_r+0x80>
   870f6:	6965      	ldr	r5, [r4, #20]
   870f8:	6921      	ldr	r1, [r4, #16]
   870fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   870fe:	eba0 0b01 	sub.w	fp, r0, r1
   87102:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   87106:	f10b 0001 	add.w	r0, fp, #1
   8710a:	106d      	asrs	r5, r5, #1
   8710c:	4430      	add	r0, r6
   8710e:	42a8      	cmp	r0, r5
   87110:	462a      	mov	r2, r5
   87112:	bf84      	itt	hi
   87114:	4605      	movhi	r5, r0
   87116:	462a      	movhi	r2, r5
   87118:	055b      	lsls	r3, r3, #21
   8711a:	d538      	bpl.n	8718e <__ssprint_r+0xba>
   8711c:	4611      	mov	r1, r2
   8711e:	4650      	mov	r0, sl
   87120:	f7ff f960 	bl	863e4 <_malloc_r>
   87124:	2800      	cmp	r0, #0
   87126:	d03c      	beq.n	871a2 <__ssprint_r+0xce>
   87128:	465a      	mov	r2, fp
   8712a:	6921      	ldr	r1, [r4, #16]
   8712c:	9001      	str	r0, [sp, #4]
   8712e:	f7ff fc41 	bl	869b4 <memcpy>
   87132:	89a2      	ldrh	r2, [r4, #12]
   87134:	9b01      	ldr	r3, [sp, #4]
   87136:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8713a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8713e:	81a2      	strh	r2, [r4, #12]
   87140:	eba5 020b 	sub.w	r2, r5, fp
   87144:	eb03 000b 	add.w	r0, r3, fp
   87148:	6165      	str	r5, [r4, #20]
   8714a:	46b3      	mov	fp, r6
   8714c:	4635      	mov	r5, r6
   8714e:	6123      	str	r3, [r4, #16]
   87150:	6020      	str	r0, [r4, #0]
   87152:	60a2      	str	r2, [r4, #8]
   87154:	465a      	mov	r2, fp
   87156:	4649      	mov	r1, r9
   87158:	f000 fa18 	bl	8758c <memmove>
   8715c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   87160:	68a2      	ldr	r2, [r4, #8]
   87162:	6820      	ldr	r0, [r4, #0]
   87164:	1b55      	subs	r5, r2, r5
   87166:	4458      	add	r0, fp
   87168:	1b9e      	subs	r6, r3, r6
   8716a:	60a5      	str	r5, [r4, #8]
   8716c:	6020      	str	r0, [r4, #0]
   8716e:	f8c8 6008 	str.w	r6, [r8, #8]
   87172:	b33e      	cbz	r6, 871c4 <__ssprint_r+0xf0>
   87174:	687e      	ldr	r6, [r7, #4]
   87176:	463b      	mov	r3, r7
   87178:	3708      	adds	r7, #8
   8717a:	2e00      	cmp	r6, #0
   8717c:	d0fa      	beq.n	87174 <__ssprint_r+0xa0>
   8717e:	42ae      	cmp	r6, r5
   87180:	f8d3 9000 	ldr.w	r9, [r3]
   87184:	46ab      	mov	fp, r5
   87186:	d2b2      	bcs.n	870ee <__ssprint_r+0x1a>
   87188:	4635      	mov	r5, r6
   8718a:	46b3      	mov	fp, r6
   8718c:	e7e2      	b.n	87154 <__ssprint_r+0x80>
   8718e:	4650      	mov	r0, sl
   87190:	f000 fa60 	bl	87654 <_realloc_r>
   87194:	4603      	mov	r3, r0
   87196:	2800      	cmp	r0, #0
   87198:	d1d2      	bne.n	87140 <__ssprint_r+0x6c>
   8719a:	6921      	ldr	r1, [r4, #16]
   8719c:	4650      	mov	r0, sl
   8719e:	f000 f8f9 	bl	87394 <_free_r>
   871a2:	230c      	movs	r3, #12
   871a4:	2200      	movs	r2, #0
   871a6:	f04f 30ff 	mov.w	r0, #4294967295
   871aa:	f8ca 3000 	str.w	r3, [sl]
   871ae:	89a3      	ldrh	r3, [r4, #12]
   871b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   871b4:	81a3      	strh	r3, [r4, #12]
   871b6:	f8c8 2008 	str.w	r2, [r8, #8]
   871ba:	f8c8 2004 	str.w	r2, [r8, #4]
   871be:	b003      	add	sp, #12
   871c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   871c4:	2000      	movs	r0, #0
   871c6:	f8c8 0004 	str.w	r0, [r8, #4]
   871ca:	b003      	add	sp, #12
   871cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000871d0 <__register_exitproc>:
   871d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   871d4:	4d2c      	ldr	r5, [pc, #176]	; (87288 <__register_exitproc+0xb8>)
   871d6:	4606      	mov	r6, r0
   871d8:	6828      	ldr	r0, [r5, #0]
   871da:	4698      	mov	r8, r3
   871dc:	460f      	mov	r7, r1
   871de:	4691      	mov	r9, r2
   871e0:	f7ff f8fc 	bl	863dc <__retarget_lock_acquire_recursive>
   871e4:	4b29      	ldr	r3, [pc, #164]	; (8728c <__register_exitproc+0xbc>)
   871e6:	681c      	ldr	r4, [r3, #0]
   871e8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   871ec:	2b00      	cmp	r3, #0
   871ee:	d03e      	beq.n	8726e <__register_exitproc+0x9e>
   871f0:	685a      	ldr	r2, [r3, #4]
   871f2:	2a1f      	cmp	r2, #31
   871f4:	dc1c      	bgt.n	87230 <__register_exitproc+0x60>
   871f6:	f102 0e01 	add.w	lr, r2, #1
   871fa:	b176      	cbz	r6, 8721a <__register_exitproc+0x4a>
   871fc:	2101      	movs	r1, #1
   871fe:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   87202:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   87206:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8720a:	4091      	lsls	r1, r2
   8720c:	4308      	orrs	r0, r1
   8720e:	2e02      	cmp	r6, #2
   87210:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   87214:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   87218:	d023      	beq.n	87262 <__register_exitproc+0x92>
   8721a:	3202      	adds	r2, #2
   8721c:	f8c3 e004 	str.w	lr, [r3, #4]
   87220:	6828      	ldr	r0, [r5, #0]
   87222:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   87226:	f7ff f8db 	bl	863e0 <__retarget_lock_release_recursive>
   8722a:	2000      	movs	r0, #0
   8722c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   87230:	4b17      	ldr	r3, [pc, #92]	; (87290 <__register_exitproc+0xc0>)
   87232:	b30b      	cbz	r3, 87278 <__register_exitproc+0xa8>
   87234:	f44f 70c8 	mov.w	r0, #400	; 0x190
   87238:	f3af 8000 	nop.w
   8723c:	4603      	mov	r3, r0
   8723e:	b1d8      	cbz	r0, 87278 <__register_exitproc+0xa8>
   87240:	2000      	movs	r0, #0
   87242:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   87246:	f04f 0e01 	mov.w	lr, #1
   8724a:	6058      	str	r0, [r3, #4]
   8724c:	6019      	str	r1, [r3, #0]
   8724e:	4602      	mov	r2, r0
   87250:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   87254:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   87258:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8725c:	2e00      	cmp	r6, #0
   8725e:	d0dc      	beq.n	8721a <__register_exitproc+0x4a>
   87260:	e7cc      	b.n	871fc <__register_exitproc+0x2c>
   87262:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   87266:	4301      	orrs	r1, r0
   87268:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8726c:	e7d5      	b.n	8721a <__register_exitproc+0x4a>
   8726e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   87272:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   87276:	e7bb      	b.n	871f0 <__register_exitproc+0x20>
   87278:	6828      	ldr	r0, [r5, #0]
   8727a:	f7ff f8b1 	bl	863e0 <__retarget_lock_release_recursive>
   8727e:	f04f 30ff 	mov.w	r0, #4294967295
   87282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   87286:	bf00      	nop
   87288:	200705d0 	.word	0x200705d0
   8728c:	000883c4 	.word	0x000883c4
   87290:	00000000 	.word	0x00000000

00087294 <_calloc_r>:
   87294:	b510      	push	{r4, lr}
   87296:	fb02 f101 	mul.w	r1, r2, r1
   8729a:	f7ff f8a3 	bl	863e4 <_malloc_r>
   8729e:	4604      	mov	r4, r0
   872a0:	b1d8      	cbz	r0, 872da <_calloc_r+0x46>
   872a2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   872a6:	f022 0203 	bic.w	r2, r2, #3
   872aa:	3a04      	subs	r2, #4
   872ac:	2a24      	cmp	r2, #36	; 0x24
   872ae:	d818      	bhi.n	872e2 <_calloc_r+0x4e>
   872b0:	2a13      	cmp	r2, #19
   872b2:	d914      	bls.n	872de <_calloc_r+0x4a>
   872b4:	2300      	movs	r3, #0
   872b6:	2a1b      	cmp	r2, #27
   872b8:	6003      	str	r3, [r0, #0]
   872ba:	6043      	str	r3, [r0, #4]
   872bc:	d916      	bls.n	872ec <_calloc_r+0x58>
   872be:	2a24      	cmp	r2, #36	; 0x24
   872c0:	6083      	str	r3, [r0, #8]
   872c2:	60c3      	str	r3, [r0, #12]
   872c4:	bf11      	iteee	ne
   872c6:	f100 0210 	addne.w	r2, r0, #16
   872ca:	6103      	streq	r3, [r0, #16]
   872cc:	6143      	streq	r3, [r0, #20]
   872ce:	f100 0218 	addeq.w	r2, r0, #24
   872d2:	2300      	movs	r3, #0
   872d4:	6013      	str	r3, [r2, #0]
   872d6:	6053      	str	r3, [r2, #4]
   872d8:	6093      	str	r3, [r2, #8]
   872da:	4620      	mov	r0, r4
   872dc:	bd10      	pop	{r4, pc}
   872de:	4602      	mov	r2, r0
   872e0:	e7f7      	b.n	872d2 <_calloc_r+0x3e>
   872e2:	2100      	movs	r1, #0
   872e4:	f7fc fd6a 	bl	83dbc <memset>
   872e8:	4620      	mov	r0, r4
   872ea:	bd10      	pop	{r4, pc}
   872ec:	f100 0208 	add.w	r2, r0, #8
   872f0:	e7ef      	b.n	872d2 <_calloc_r+0x3e>
   872f2:	bf00      	nop

000872f4 <_malloc_trim_r>:
   872f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   872f6:	460c      	mov	r4, r1
   872f8:	4f23      	ldr	r7, [pc, #140]	; (87388 <_malloc_trim_r+0x94>)
   872fa:	4606      	mov	r6, r0
   872fc:	f7ff fbd0 	bl	86aa0 <__malloc_lock>
   87300:	68bb      	ldr	r3, [r7, #8]
   87302:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   87306:	685d      	ldr	r5, [r3, #4]
   87308:	310f      	adds	r1, #15
   8730a:	f025 0503 	bic.w	r5, r5, #3
   8730e:	4429      	add	r1, r5
   87310:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   87314:	f021 010f 	bic.w	r1, r1, #15
   87318:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8731c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   87320:	db07      	blt.n	87332 <_malloc_trim_r+0x3e>
   87322:	2100      	movs	r1, #0
   87324:	4630      	mov	r0, r6
   87326:	f7ff fec3 	bl	870b0 <_sbrk_r>
   8732a:	68bb      	ldr	r3, [r7, #8]
   8732c:	442b      	add	r3, r5
   8732e:	4298      	cmp	r0, r3
   87330:	d004      	beq.n	8733c <_malloc_trim_r+0x48>
   87332:	4630      	mov	r0, r6
   87334:	f7ff fbba 	bl	86aac <__malloc_unlock>
   87338:	2000      	movs	r0, #0
   8733a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8733c:	4261      	negs	r1, r4
   8733e:	4630      	mov	r0, r6
   87340:	f7ff feb6 	bl	870b0 <_sbrk_r>
   87344:	3001      	adds	r0, #1
   87346:	d00d      	beq.n	87364 <_malloc_trim_r+0x70>
   87348:	4b10      	ldr	r3, [pc, #64]	; (8738c <_malloc_trim_r+0x98>)
   8734a:	68ba      	ldr	r2, [r7, #8]
   8734c:	6819      	ldr	r1, [r3, #0]
   8734e:	1b2d      	subs	r5, r5, r4
   87350:	f045 0501 	orr.w	r5, r5, #1
   87354:	4630      	mov	r0, r6
   87356:	1b09      	subs	r1, r1, r4
   87358:	6055      	str	r5, [r2, #4]
   8735a:	6019      	str	r1, [r3, #0]
   8735c:	f7ff fba6 	bl	86aac <__malloc_unlock>
   87360:	2001      	movs	r0, #1
   87362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87364:	2100      	movs	r1, #0
   87366:	4630      	mov	r0, r6
   87368:	f7ff fea2 	bl	870b0 <_sbrk_r>
   8736c:	68ba      	ldr	r2, [r7, #8]
   8736e:	1a83      	subs	r3, r0, r2
   87370:	2b0f      	cmp	r3, #15
   87372:	ddde      	ble.n	87332 <_malloc_trim_r+0x3e>
   87374:	4c06      	ldr	r4, [pc, #24]	; (87390 <_malloc_trim_r+0x9c>)
   87376:	4905      	ldr	r1, [pc, #20]	; (8738c <_malloc_trim_r+0x98>)
   87378:	6824      	ldr	r4, [r4, #0]
   8737a:	f043 0301 	orr.w	r3, r3, #1
   8737e:	1b00      	subs	r0, r0, r4
   87380:	6053      	str	r3, [r2, #4]
   87382:	6008      	str	r0, [r1, #0]
   87384:	e7d5      	b.n	87332 <_malloc_trim_r+0x3e>
   87386:	bf00      	nop
   87388:	200705d4 	.word	0x200705d4
   8738c:	20070fb8 	.word	0x20070fb8
   87390:	200709dc 	.word	0x200709dc

00087394 <_free_r>:
   87394:	2900      	cmp	r1, #0
   87396:	d044      	beq.n	87422 <_free_r+0x8e>
   87398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8739c:	460d      	mov	r5, r1
   8739e:	4680      	mov	r8, r0
   873a0:	f7ff fb7e 	bl	86aa0 <__malloc_lock>
   873a4:	f855 7c04 	ldr.w	r7, [r5, #-4]
   873a8:	4969      	ldr	r1, [pc, #420]	; (87550 <_free_r+0x1bc>)
   873aa:	f1a5 0408 	sub.w	r4, r5, #8
   873ae:	f027 0301 	bic.w	r3, r7, #1
   873b2:	18e2      	adds	r2, r4, r3
   873b4:	688e      	ldr	r6, [r1, #8]
   873b6:	6850      	ldr	r0, [r2, #4]
   873b8:	42b2      	cmp	r2, r6
   873ba:	f020 0003 	bic.w	r0, r0, #3
   873be:	d05e      	beq.n	8747e <_free_r+0xea>
   873c0:	07fe      	lsls	r6, r7, #31
   873c2:	6050      	str	r0, [r2, #4]
   873c4:	d40b      	bmi.n	873de <_free_r+0x4a>
   873c6:	f855 7c08 	ldr.w	r7, [r5, #-8]
   873ca:	f101 0e08 	add.w	lr, r1, #8
   873ce:	1be4      	subs	r4, r4, r7
   873d0:	68a5      	ldr	r5, [r4, #8]
   873d2:	443b      	add	r3, r7
   873d4:	4575      	cmp	r5, lr
   873d6:	d06d      	beq.n	874b4 <_free_r+0x120>
   873d8:	68e7      	ldr	r7, [r4, #12]
   873da:	60ef      	str	r7, [r5, #12]
   873dc:	60bd      	str	r5, [r7, #8]
   873de:	1815      	adds	r5, r2, r0
   873e0:	686d      	ldr	r5, [r5, #4]
   873e2:	07ed      	lsls	r5, r5, #31
   873e4:	d53e      	bpl.n	87464 <_free_r+0xd0>
   873e6:	f043 0201 	orr.w	r2, r3, #1
   873ea:	6062      	str	r2, [r4, #4]
   873ec:	50e3      	str	r3, [r4, r3]
   873ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   873f2:	d217      	bcs.n	87424 <_free_r+0x90>
   873f4:	2201      	movs	r2, #1
   873f6:	08db      	lsrs	r3, r3, #3
   873f8:	1098      	asrs	r0, r3, #2
   873fa:	684d      	ldr	r5, [r1, #4]
   873fc:	4413      	add	r3, r2
   873fe:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   87402:	4082      	lsls	r2, r0
   87404:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   87408:	432a      	orrs	r2, r5
   8740a:	3808      	subs	r0, #8
   8740c:	60e0      	str	r0, [r4, #12]
   8740e:	60a7      	str	r7, [r4, #8]
   87410:	604a      	str	r2, [r1, #4]
   87412:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   87416:	60fc      	str	r4, [r7, #12]
   87418:	4640      	mov	r0, r8
   8741a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8741e:	f7ff bb45 	b.w	86aac <__malloc_unlock>
   87422:	4770      	bx	lr
   87424:	0a5a      	lsrs	r2, r3, #9
   87426:	2a04      	cmp	r2, #4
   87428:	d852      	bhi.n	874d0 <_free_r+0x13c>
   8742a:	099a      	lsrs	r2, r3, #6
   8742c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   87430:	00ff      	lsls	r7, r7, #3
   87432:	f102 0538 	add.w	r5, r2, #56	; 0x38
   87436:	19c8      	adds	r0, r1, r7
   87438:	59ca      	ldr	r2, [r1, r7]
   8743a:	3808      	subs	r0, #8
   8743c:	4290      	cmp	r0, r2
   8743e:	d04f      	beq.n	874e0 <_free_r+0x14c>
   87440:	6851      	ldr	r1, [r2, #4]
   87442:	f021 0103 	bic.w	r1, r1, #3
   87446:	428b      	cmp	r3, r1
   87448:	d232      	bcs.n	874b0 <_free_r+0x11c>
   8744a:	6892      	ldr	r2, [r2, #8]
   8744c:	4290      	cmp	r0, r2
   8744e:	d1f7      	bne.n	87440 <_free_r+0xac>
   87450:	68c3      	ldr	r3, [r0, #12]
   87452:	60a0      	str	r0, [r4, #8]
   87454:	60e3      	str	r3, [r4, #12]
   87456:	609c      	str	r4, [r3, #8]
   87458:	60c4      	str	r4, [r0, #12]
   8745a:	4640      	mov	r0, r8
   8745c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   87460:	f7ff bb24 	b.w	86aac <__malloc_unlock>
   87464:	6895      	ldr	r5, [r2, #8]
   87466:	4f3b      	ldr	r7, [pc, #236]	; (87554 <_free_r+0x1c0>)
   87468:	4403      	add	r3, r0
   8746a:	42bd      	cmp	r5, r7
   8746c:	d040      	beq.n	874f0 <_free_r+0x15c>
   8746e:	68d0      	ldr	r0, [r2, #12]
   87470:	f043 0201 	orr.w	r2, r3, #1
   87474:	60e8      	str	r0, [r5, #12]
   87476:	6085      	str	r5, [r0, #8]
   87478:	6062      	str	r2, [r4, #4]
   8747a:	50e3      	str	r3, [r4, r3]
   8747c:	e7b7      	b.n	873ee <_free_r+0x5a>
   8747e:	07ff      	lsls	r7, r7, #31
   87480:	4403      	add	r3, r0
   87482:	d407      	bmi.n	87494 <_free_r+0x100>
   87484:	f855 5c08 	ldr.w	r5, [r5, #-8]
   87488:	1b64      	subs	r4, r4, r5
   8748a:	68e2      	ldr	r2, [r4, #12]
   8748c:	68a0      	ldr	r0, [r4, #8]
   8748e:	442b      	add	r3, r5
   87490:	60c2      	str	r2, [r0, #12]
   87492:	6090      	str	r0, [r2, #8]
   87494:	4a30      	ldr	r2, [pc, #192]	; (87558 <_free_r+0x1c4>)
   87496:	f043 0001 	orr.w	r0, r3, #1
   8749a:	6812      	ldr	r2, [r2, #0]
   8749c:	6060      	str	r0, [r4, #4]
   8749e:	4293      	cmp	r3, r2
   874a0:	608c      	str	r4, [r1, #8]
   874a2:	d3b9      	bcc.n	87418 <_free_r+0x84>
   874a4:	4b2d      	ldr	r3, [pc, #180]	; (8755c <_free_r+0x1c8>)
   874a6:	4640      	mov	r0, r8
   874a8:	6819      	ldr	r1, [r3, #0]
   874aa:	f7ff ff23 	bl	872f4 <_malloc_trim_r>
   874ae:	e7b3      	b.n	87418 <_free_r+0x84>
   874b0:	4610      	mov	r0, r2
   874b2:	e7cd      	b.n	87450 <_free_r+0xbc>
   874b4:	1811      	adds	r1, r2, r0
   874b6:	6849      	ldr	r1, [r1, #4]
   874b8:	07c9      	lsls	r1, r1, #31
   874ba:	d444      	bmi.n	87546 <_free_r+0x1b2>
   874bc:	6891      	ldr	r1, [r2, #8]
   874be:	4403      	add	r3, r0
   874c0:	68d2      	ldr	r2, [r2, #12]
   874c2:	f043 0001 	orr.w	r0, r3, #1
   874c6:	60ca      	str	r2, [r1, #12]
   874c8:	6091      	str	r1, [r2, #8]
   874ca:	6060      	str	r0, [r4, #4]
   874cc:	50e3      	str	r3, [r4, r3]
   874ce:	e7a3      	b.n	87418 <_free_r+0x84>
   874d0:	2a14      	cmp	r2, #20
   874d2:	d816      	bhi.n	87502 <_free_r+0x16e>
   874d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   874d8:	00ff      	lsls	r7, r7, #3
   874da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   874de:	e7aa      	b.n	87436 <_free_r+0xa2>
   874e0:	2301      	movs	r3, #1
   874e2:	10aa      	asrs	r2, r5, #2
   874e4:	684d      	ldr	r5, [r1, #4]
   874e6:	4093      	lsls	r3, r2
   874e8:	432b      	orrs	r3, r5
   874ea:	604b      	str	r3, [r1, #4]
   874ec:	4603      	mov	r3, r0
   874ee:	e7b0      	b.n	87452 <_free_r+0xbe>
   874f0:	f043 0201 	orr.w	r2, r3, #1
   874f4:	614c      	str	r4, [r1, #20]
   874f6:	610c      	str	r4, [r1, #16]
   874f8:	60e5      	str	r5, [r4, #12]
   874fa:	60a5      	str	r5, [r4, #8]
   874fc:	6062      	str	r2, [r4, #4]
   874fe:	50e3      	str	r3, [r4, r3]
   87500:	e78a      	b.n	87418 <_free_r+0x84>
   87502:	2a54      	cmp	r2, #84	; 0x54
   87504:	d806      	bhi.n	87514 <_free_r+0x180>
   87506:	0b1a      	lsrs	r2, r3, #12
   87508:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8750c:	00ff      	lsls	r7, r7, #3
   8750e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   87512:	e790      	b.n	87436 <_free_r+0xa2>
   87514:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   87518:	d806      	bhi.n	87528 <_free_r+0x194>
   8751a:	0bda      	lsrs	r2, r3, #15
   8751c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   87520:	00ff      	lsls	r7, r7, #3
   87522:	f102 0577 	add.w	r5, r2, #119	; 0x77
   87526:	e786      	b.n	87436 <_free_r+0xa2>
   87528:	f240 5054 	movw	r0, #1364	; 0x554
   8752c:	4282      	cmp	r2, r0
   8752e:	d806      	bhi.n	8753e <_free_r+0x1aa>
   87530:	0c9a      	lsrs	r2, r3, #18
   87532:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   87536:	00ff      	lsls	r7, r7, #3
   87538:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8753c:	e77b      	b.n	87436 <_free_r+0xa2>
   8753e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   87542:	257e      	movs	r5, #126	; 0x7e
   87544:	e777      	b.n	87436 <_free_r+0xa2>
   87546:	f043 0101 	orr.w	r1, r3, #1
   8754a:	6061      	str	r1, [r4, #4]
   8754c:	6013      	str	r3, [r2, #0]
   8754e:	e763      	b.n	87418 <_free_r+0x84>
   87550:	200705d4 	.word	0x200705d4
   87554:	200705dc 	.word	0x200705dc
   87558:	200709e0 	.word	0x200709e0
   8755c:	20070fe8 	.word	0x20070fe8

00087560 <__ascii_mbtowc>:
   87560:	b082      	sub	sp, #8
   87562:	b149      	cbz	r1, 87578 <__ascii_mbtowc+0x18>
   87564:	b15a      	cbz	r2, 8757e <__ascii_mbtowc+0x1e>
   87566:	b16b      	cbz	r3, 87584 <__ascii_mbtowc+0x24>
   87568:	7813      	ldrb	r3, [r2, #0]
   8756a:	600b      	str	r3, [r1, #0]
   8756c:	7812      	ldrb	r2, [r2, #0]
   8756e:	1c10      	adds	r0, r2, #0
   87570:	bf18      	it	ne
   87572:	2001      	movne	r0, #1
   87574:	b002      	add	sp, #8
   87576:	4770      	bx	lr
   87578:	a901      	add	r1, sp, #4
   8757a:	2a00      	cmp	r2, #0
   8757c:	d1f3      	bne.n	87566 <__ascii_mbtowc+0x6>
   8757e:	4610      	mov	r0, r2
   87580:	b002      	add	sp, #8
   87582:	4770      	bx	lr
   87584:	f06f 0001 	mvn.w	r0, #1
   87588:	e7f4      	b.n	87574 <__ascii_mbtowc+0x14>
   8758a:	bf00      	nop

0008758c <memmove>:
   8758c:	4288      	cmp	r0, r1
   8758e:	b5f0      	push	{r4, r5, r6, r7, lr}
   87590:	d90d      	bls.n	875ae <memmove+0x22>
   87592:	188b      	adds	r3, r1, r2
   87594:	4298      	cmp	r0, r3
   87596:	d20a      	bcs.n	875ae <memmove+0x22>
   87598:	1884      	adds	r4, r0, r2
   8759a:	2a00      	cmp	r2, #0
   8759c:	d051      	beq.n	87642 <memmove+0xb6>
   8759e:	4622      	mov	r2, r4
   875a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   875a4:	4299      	cmp	r1, r3
   875a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   875aa:	d1f9      	bne.n	875a0 <memmove+0x14>
   875ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   875ae:	2a0f      	cmp	r2, #15
   875b0:	d948      	bls.n	87644 <memmove+0xb8>
   875b2:	ea41 0300 	orr.w	r3, r1, r0
   875b6:	079b      	lsls	r3, r3, #30
   875b8:	d146      	bne.n	87648 <memmove+0xbc>
   875ba:	4615      	mov	r5, r2
   875bc:	f100 0410 	add.w	r4, r0, #16
   875c0:	f101 0310 	add.w	r3, r1, #16
   875c4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   875c8:	3d10      	subs	r5, #16
   875ca:	f844 6c10 	str.w	r6, [r4, #-16]
   875ce:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   875d2:	2d0f      	cmp	r5, #15
   875d4:	f844 6c0c 	str.w	r6, [r4, #-12]
   875d8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   875dc:	f104 0410 	add.w	r4, r4, #16
   875e0:	f844 6c18 	str.w	r6, [r4, #-24]
   875e4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   875e8:	f103 0310 	add.w	r3, r3, #16
   875ec:	f844 6c14 	str.w	r6, [r4, #-20]
   875f0:	d8e8      	bhi.n	875c4 <memmove+0x38>
   875f2:	f1a2 0310 	sub.w	r3, r2, #16
   875f6:	f023 030f 	bic.w	r3, r3, #15
   875fa:	f002 0e0f 	and.w	lr, r2, #15
   875fe:	3310      	adds	r3, #16
   87600:	f1be 0f03 	cmp.w	lr, #3
   87604:	4419      	add	r1, r3
   87606:	4403      	add	r3, r0
   87608:	d921      	bls.n	8764e <memmove+0xc2>
   8760a:	460e      	mov	r6, r1
   8760c:	4674      	mov	r4, lr
   8760e:	1f1d      	subs	r5, r3, #4
   87610:	f856 7b04 	ldr.w	r7, [r6], #4
   87614:	3c04      	subs	r4, #4
   87616:	2c03      	cmp	r4, #3
   87618:	f845 7f04 	str.w	r7, [r5, #4]!
   8761c:	d8f8      	bhi.n	87610 <memmove+0x84>
   8761e:	f1ae 0404 	sub.w	r4, lr, #4
   87622:	f024 0403 	bic.w	r4, r4, #3
   87626:	3404      	adds	r4, #4
   87628:	4421      	add	r1, r4
   8762a:	4423      	add	r3, r4
   8762c:	f002 0203 	and.w	r2, r2, #3
   87630:	b162      	cbz	r2, 8764c <memmove+0xc0>
   87632:	3b01      	subs	r3, #1
   87634:	440a      	add	r2, r1
   87636:	f811 4b01 	ldrb.w	r4, [r1], #1
   8763a:	428a      	cmp	r2, r1
   8763c:	f803 4f01 	strb.w	r4, [r3, #1]!
   87640:	d1f9      	bne.n	87636 <memmove+0xaa>
   87642:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87644:	4603      	mov	r3, r0
   87646:	e7f3      	b.n	87630 <memmove+0xa4>
   87648:	4603      	mov	r3, r0
   8764a:	e7f2      	b.n	87632 <memmove+0xa6>
   8764c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8764e:	4672      	mov	r2, lr
   87650:	e7ee      	b.n	87630 <memmove+0xa4>
   87652:	bf00      	nop

00087654 <_realloc_r>:
   87654:	2900      	cmp	r1, #0
   87656:	f000 8094 	beq.w	87782 <_realloc_r+0x12e>
   8765a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8765e:	460c      	mov	r4, r1
   87660:	4615      	mov	r5, r2
   87662:	b083      	sub	sp, #12
   87664:	4680      	mov	r8, r0
   87666:	f105 060b 	add.w	r6, r5, #11
   8766a:	f7ff fa19 	bl	86aa0 <__malloc_lock>
   8766e:	f854 ec04 	ldr.w	lr, [r4, #-4]
   87672:	2e16      	cmp	r6, #22
   87674:	f02e 0703 	bic.w	r7, lr, #3
   87678:	f1a4 0908 	sub.w	r9, r4, #8
   8767c:	d83c      	bhi.n	876f8 <_realloc_r+0xa4>
   8767e:	2210      	movs	r2, #16
   87680:	4616      	mov	r6, r2
   87682:	42b5      	cmp	r5, r6
   87684:	d83d      	bhi.n	87702 <_realloc_r+0xae>
   87686:	4297      	cmp	r7, r2
   87688:	da43      	bge.n	87712 <_realloc_r+0xbe>
   8768a:	4bc6      	ldr	r3, [pc, #792]	; (879a4 <_realloc_r+0x350>)
   8768c:	eb09 0007 	add.w	r0, r9, r7
   87690:	6899      	ldr	r1, [r3, #8]
   87692:	4288      	cmp	r0, r1
   87694:	f000 80c3 	beq.w	8781e <_realloc_r+0x1ca>
   87698:	6843      	ldr	r3, [r0, #4]
   8769a:	f023 0101 	bic.w	r1, r3, #1
   8769e:	4401      	add	r1, r0
   876a0:	6849      	ldr	r1, [r1, #4]
   876a2:	07c9      	lsls	r1, r1, #31
   876a4:	d54d      	bpl.n	87742 <_realloc_r+0xee>
   876a6:	f01e 0f01 	tst.w	lr, #1
   876aa:	f000 809b 	beq.w	877e4 <_realloc_r+0x190>
   876ae:	4629      	mov	r1, r5
   876b0:	4640      	mov	r0, r8
   876b2:	f7fe fe97 	bl	863e4 <_malloc_r>
   876b6:	4605      	mov	r5, r0
   876b8:	2800      	cmp	r0, #0
   876ba:	d03b      	beq.n	87734 <_realloc_r+0xe0>
   876bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   876c0:	f1a0 0208 	sub.w	r2, r0, #8
   876c4:	f023 0301 	bic.w	r3, r3, #1
   876c8:	444b      	add	r3, r9
   876ca:	429a      	cmp	r2, r3
   876cc:	f000 812b 	beq.w	87926 <_realloc_r+0x2d2>
   876d0:	1f3a      	subs	r2, r7, #4
   876d2:	2a24      	cmp	r2, #36	; 0x24
   876d4:	f200 8118 	bhi.w	87908 <_realloc_r+0x2b4>
   876d8:	2a13      	cmp	r2, #19
   876da:	f200 80eb 	bhi.w	878b4 <_realloc_r+0x260>
   876de:	4603      	mov	r3, r0
   876e0:	4622      	mov	r2, r4
   876e2:	6811      	ldr	r1, [r2, #0]
   876e4:	6019      	str	r1, [r3, #0]
   876e6:	6851      	ldr	r1, [r2, #4]
   876e8:	6059      	str	r1, [r3, #4]
   876ea:	6892      	ldr	r2, [r2, #8]
   876ec:	609a      	str	r2, [r3, #8]
   876ee:	4621      	mov	r1, r4
   876f0:	4640      	mov	r0, r8
   876f2:	f7ff fe4f 	bl	87394 <_free_r>
   876f6:	e01d      	b.n	87734 <_realloc_r+0xe0>
   876f8:	f026 0607 	bic.w	r6, r6, #7
   876fc:	2e00      	cmp	r6, #0
   876fe:	4632      	mov	r2, r6
   87700:	dabf      	bge.n	87682 <_realloc_r+0x2e>
   87702:	2500      	movs	r5, #0
   87704:	230c      	movs	r3, #12
   87706:	4628      	mov	r0, r5
   87708:	f8c8 3000 	str.w	r3, [r8]
   8770c:	b003      	add	sp, #12
   8770e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87712:	4625      	mov	r5, r4
   87714:	1bbb      	subs	r3, r7, r6
   87716:	2b0f      	cmp	r3, #15
   87718:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8771c:	d81d      	bhi.n	8775a <_realloc_r+0x106>
   8771e:	f002 0201 	and.w	r2, r2, #1
   87722:	433a      	orrs	r2, r7
   87724:	eb09 0107 	add.w	r1, r9, r7
   87728:	f8c9 2004 	str.w	r2, [r9, #4]
   8772c:	684b      	ldr	r3, [r1, #4]
   8772e:	f043 0301 	orr.w	r3, r3, #1
   87732:	604b      	str	r3, [r1, #4]
   87734:	4640      	mov	r0, r8
   87736:	f7ff f9b9 	bl	86aac <__malloc_unlock>
   8773a:	4628      	mov	r0, r5
   8773c:	b003      	add	sp, #12
   8773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87742:	f023 0303 	bic.w	r3, r3, #3
   87746:	18f9      	adds	r1, r7, r3
   87748:	4291      	cmp	r1, r2
   8774a:	db1d      	blt.n	87788 <_realloc_r+0x134>
   8774c:	68c3      	ldr	r3, [r0, #12]
   8774e:	6882      	ldr	r2, [r0, #8]
   87750:	4625      	mov	r5, r4
   87752:	60d3      	str	r3, [r2, #12]
   87754:	460f      	mov	r7, r1
   87756:	609a      	str	r2, [r3, #8]
   87758:	e7dc      	b.n	87714 <_realloc_r+0xc0>
   8775a:	f002 0201 	and.w	r2, r2, #1
   8775e:	eb09 0106 	add.w	r1, r9, r6
   87762:	f043 0301 	orr.w	r3, r3, #1
   87766:	4332      	orrs	r2, r6
   87768:	f8c9 2004 	str.w	r2, [r9, #4]
   8776c:	444f      	add	r7, r9
   8776e:	604b      	str	r3, [r1, #4]
   87770:	687b      	ldr	r3, [r7, #4]
   87772:	3108      	adds	r1, #8
   87774:	f043 0301 	orr.w	r3, r3, #1
   87778:	607b      	str	r3, [r7, #4]
   8777a:	4640      	mov	r0, r8
   8777c:	f7ff fe0a 	bl	87394 <_free_r>
   87780:	e7d8      	b.n	87734 <_realloc_r+0xe0>
   87782:	4611      	mov	r1, r2
   87784:	f7fe be2e 	b.w	863e4 <_malloc_r>
   87788:	f01e 0f01 	tst.w	lr, #1
   8778c:	d18f      	bne.n	876ae <_realloc_r+0x5a>
   8778e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87792:	eba9 0a01 	sub.w	sl, r9, r1
   87796:	f8da 1004 	ldr.w	r1, [sl, #4]
   8779a:	f021 0103 	bic.w	r1, r1, #3
   8779e:	440b      	add	r3, r1
   877a0:	443b      	add	r3, r7
   877a2:	4293      	cmp	r3, r2
   877a4:	db26      	blt.n	877f4 <_realloc_r+0x1a0>
   877a6:	4655      	mov	r5, sl
   877a8:	68c1      	ldr	r1, [r0, #12]
   877aa:	6880      	ldr	r0, [r0, #8]
   877ac:	1f3a      	subs	r2, r7, #4
   877ae:	60c1      	str	r1, [r0, #12]
   877b0:	6088      	str	r0, [r1, #8]
   877b2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   877b6:	f8da 100c 	ldr.w	r1, [sl, #12]
   877ba:	2a24      	cmp	r2, #36	; 0x24
   877bc:	60c1      	str	r1, [r0, #12]
   877be:	6088      	str	r0, [r1, #8]
   877c0:	d826      	bhi.n	87810 <_realloc_r+0x1bc>
   877c2:	2a13      	cmp	r2, #19
   877c4:	f240 8081 	bls.w	878ca <_realloc_r+0x276>
   877c8:	6821      	ldr	r1, [r4, #0]
   877ca:	2a1b      	cmp	r2, #27
   877cc:	f8ca 1008 	str.w	r1, [sl, #8]
   877d0:	6861      	ldr	r1, [r4, #4]
   877d2:	f8ca 100c 	str.w	r1, [sl, #12]
   877d6:	f200 80ad 	bhi.w	87934 <_realloc_r+0x2e0>
   877da:	f104 0008 	add.w	r0, r4, #8
   877de:	f10a 0210 	add.w	r2, sl, #16
   877e2:	e074      	b.n	878ce <_realloc_r+0x27a>
   877e4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   877e8:	eba9 0a03 	sub.w	sl, r9, r3
   877ec:	f8da 1004 	ldr.w	r1, [sl, #4]
   877f0:	f021 0103 	bic.w	r1, r1, #3
   877f4:	187b      	adds	r3, r7, r1
   877f6:	4293      	cmp	r3, r2
   877f8:	f6ff af59 	blt.w	876ae <_realloc_r+0x5a>
   877fc:	4655      	mov	r5, sl
   877fe:	f8da 100c 	ldr.w	r1, [sl, #12]
   87802:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87806:	1f3a      	subs	r2, r7, #4
   87808:	2a24      	cmp	r2, #36	; 0x24
   8780a:	60c1      	str	r1, [r0, #12]
   8780c:	6088      	str	r0, [r1, #8]
   8780e:	d9d8      	bls.n	877c2 <_realloc_r+0x16e>
   87810:	4621      	mov	r1, r4
   87812:	4628      	mov	r0, r5
   87814:	461f      	mov	r7, r3
   87816:	46d1      	mov	r9, sl
   87818:	f7ff feb8 	bl	8758c <memmove>
   8781c:	e77a      	b.n	87714 <_realloc_r+0xc0>
   8781e:	6841      	ldr	r1, [r0, #4]
   87820:	f106 0010 	add.w	r0, r6, #16
   87824:	f021 0b03 	bic.w	fp, r1, #3
   87828:	44bb      	add	fp, r7
   8782a:	4583      	cmp	fp, r0
   8782c:	da58      	bge.n	878e0 <_realloc_r+0x28c>
   8782e:	f01e 0f01 	tst.w	lr, #1
   87832:	f47f af3c 	bne.w	876ae <_realloc_r+0x5a>
   87836:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8783a:	eba9 0a01 	sub.w	sl, r9, r1
   8783e:	f8da 1004 	ldr.w	r1, [sl, #4]
   87842:	f021 0103 	bic.w	r1, r1, #3
   87846:	448b      	add	fp, r1
   87848:	4558      	cmp	r0, fp
   8784a:	dcd3      	bgt.n	877f4 <_realloc_r+0x1a0>
   8784c:	4655      	mov	r5, sl
   8784e:	f8da 100c 	ldr.w	r1, [sl, #12]
   87852:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87856:	1f3a      	subs	r2, r7, #4
   87858:	2a24      	cmp	r2, #36	; 0x24
   8785a:	60c1      	str	r1, [r0, #12]
   8785c:	6088      	str	r0, [r1, #8]
   8785e:	f200 808d 	bhi.w	8797c <_realloc_r+0x328>
   87862:	2a13      	cmp	r2, #19
   87864:	f240 8087 	bls.w	87976 <_realloc_r+0x322>
   87868:	6821      	ldr	r1, [r4, #0]
   8786a:	2a1b      	cmp	r2, #27
   8786c:	f8ca 1008 	str.w	r1, [sl, #8]
   87870:	6861      	ldr	r1, [r4, #4]
   87872:	f8ca 100c 	str.w	r1, [sl, #12]
   87876:	f200 8088 	bhi.w	8798a <_realloc_r+0x336>
   8787a:	f104 0108 	add.w	r1, r4, #8
   8787e:	f10a 0210 	add.w	r2, sl, #16
   87882:	6808      	ldr	r0, [r1, #0]
   87884:	6010      	str	r0, [r2, #0]
   87886:	6848      	ldr	r0, [r1, #4]
   87888:	6050      	str	r0, [r2, #4]
   8788a:	6889      	ldr	r1, [r1, #8]
   8788c:	6091      	str	r1, [r2, #8]
   8788e:	ebab 0206 	sub.w	r2, fp, r6
   87892:	eb0a 0106 	add.w	r1, sl, r6
   87896:	f042 0201 	orr.w	r2, r2, #1
   8789a:	6099      	str	r1, [r3, #8]
   8789c:	604a      	str	r2, [r1, #4]
   8789e:	f8da 3004 	ldr.w	r3, [sl, #4]
   878a2:	4640      	mov	r0, r8
   878a4:	f003 0301 	and.w	r3, r3, #1
   878a8:	431e      	orrs	r6, r3
   878aa:	f8ca 6004 	str.w	r6, [sl, #4]
   878ae:	f7ff f8fd 	bl	86aac <__malloc_unlock>
   878b2:	e742      	b.n	8773a <_realloc_r+0xe6>
   878b4:	6823      	ldr	r3, [r4, #0]
   878b6:	2a1b      	cmp	r2, #27
   878b8:	6003      	str	r3, [r0, #0]
   878ba:	6863      	ldr	r3, [r4, #4]
   878bc:	6043      	str	r3, [r0, #4]
   878be:	d827      	bhi.n	87910 <_realloc_r+0x2bc>
   878c0:	f100 0308 	add.w	r3, r0, #8
   878c4:	f104 0208 	add.w	r2, r4, #8
   878c8:	e70b      	b.n	876e2 <_realloc_r+0x8e>
   878ca:	4620      	mov	r0, r4
   878cc:	462a      	mov	r2, r5
   878ce:	6801      	ldr	r1, [r0, #0]
   878d0:	461f      	mov	r7, r3
   878d2:	6011      	str	r1, [r2, #0]
   878d4:	6841      	ldr	r1, [r0, #4]
   878d6:	46d1      	mov	r9, sl
   878d8:	6051      	str	r1, [r2, #4]
   878da:	6883      	ldr	r3, [r0, #8]
   878dc:	6093      	str	r3, [r2, #8]
   878de:	e719      	b.n	87714 <_realloc_r+0xc0>
   878e0:	ebab 0b06 	sub.w	fp, fp, r6
   878e4:	eb09 0106 	add.w	r1, r9, r6
   878e8:	f04b 0201 	orr.w	r2, fp, #1
   878ec:	6099      	str	r1, [r3, #8]
   878ee:	604a      	str	r2, [r1, #4]
   878f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   878f4:	4640      	mov	r0, r8
   878f6:	f003 0301 	and.w	r3, r3, #1
   878fa:	431e      	orrs	r6, r3
   878fc:	f844 6c04 	str.w	r6, [r4, #-4]
   87900:	f7ff f8d4 	bl	86aac <__malloc_unlock>
   87904:	4625      	mov	r5, r4
   87906:	e718      	b.n	8773a <_realloc_r+0xe6>
   87908:	4621      	mov	r1, r4
   8790a:	f7ff fe3f 	bl	8758c <memmove>
   8790e:	e6ee      	b.n	876ee <_realloc_r+0x9a>
   87910:	68a3      	ldr	r3, [r4, #8]
   87912:	2a24      	cmp	r2, #36	; 0x24
   87914:	6083      	str	r3, [r0, #8]
   87916:	68e3      	ldr	r3, [r4, #12]
   87918:	60c3      	str	r3, [r0, #12]
   8791a:	d018      	beq.n	8794e <_realloc_r+0x2fa>
   8791c:	f100 0310 	add.w	r3, r0, #16
   87920:	f104 0210 	add.w	r2, r4, #16
   87924:	e6dd      	b.n	876e2 <_realloc_r+0x8e>
   87926:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8792a:	4625      	mov	r5, r4
   8792c:	f023 0303 	bic.w	r3, r3, #3
   87930:	441f      	add	r7, r3
   87932:	e6ef      	b.n	87714 <_realloc_r+0xc0>
   87934:	68a1      	ldr	r1, [r4, #8]
   87936:	2a24      	cmp	r2, #36	; 0x24
   87938:	f8ca 1010 	str.w	r1, [sl, #16]
   8793c:	68e1      	ldr	r1, [r4, #12]
   8793e:	f8ca 1014 	str.w	r1, [sl, #20]
   87942:	d00d      	beq.n	87960 <_realloc_r+0x30c>
   87944:	f104 0010 	add.w	r0, r4, #16
   87948:	f10a 0218 	add.w	r2, sl, #24
   8794c:	e7bf      	b.n	878ce <_realloc_r+0x27a>
   8794e:	6922      	ldr	r2, [r4, #16]
   87950:	f100 0318 	add.w	r3, r0, #24
   87954:	6102      	str	r2, [r0, #16]
   87956:	6961      	ldr	r1, [r4, #20]
   87958:	f104 0218 	add.w	r2, r4, #24
   8795c:	6141      	str	r1, [r0, #20]
   8795e:	e6c0      	b.n	876e2 <_realloc_r+0x8e>
   87960:	6922      	ldr	r2, [r4, #16]
   87962:	f104 0018 	add.w	r0, r4, #24
   87966:	f8ca 2018 	str.w	r2, [sl, #24]
   8796a:	6961      	ldr	r1, [r4, #20]
   8796c:	f10a 0220 	add.w	r2, sl, #32
   87970:	f8ca 101c 	str.w	r1, [sl, #28]
   87974:	e7ab      	b.n	878ce <_realloc_r+0x27a>
   87976:	4621      	mov	r1, r4
   87978:	462a      	mov	r2, r5
   8797a:	e782      	b.n	87882 <_realloc_r+0x22e>
   8797c:	4621      	mov	r1, r4
   8797e:	4628      	mov	r0, r5
   87980:	9301      	str	r3, [sp, #4]
   87982:	f7ff fe03 	bl	8758c <memmove>
   87986:	9b01      	ldr	r3, [sp, #4]
   87988:	e781      	b.n	8788e <_realloc_r+0x23a>
   8798a:	68a1      	ldr	r1, [r4, #8]
   8798c:	2a24      	cmp	r2, #36	; 0x24
   8798e:	f8ca 1010 	str.w	r1, [sl, #16]
   87992:	68e1      	ldr	r1, [r4, #12]
   87994:	f8ca 1014 	str.w	r1, [sl, #20]
   87998:	d006      	beq.n	879a8 <_realloc_r+0x354>
   8799a:	f104 0110 	add.w	r1, r4, #16
   8799e:	f10a 0218 	add.w	r2, sl, #24
   879a2:	e76e      	b.n	87882 <_realloc_r+0x22e>
   879a4:	200705d4 	.word	0x200705d4
   879a8:	6922      	ldr	r2, [r4, #16]
   879aa:	f104 0118 	add.w	r1, r4, #24
   879ae:	f8ca 2018 	str.w	r2, [sl, #24]
   879b2:	6960      	ldr	r0, [r4, #20]
   879b4:	f10a 0220 	add.w	r2, sl, #32
   879b8:	f8ca 001c 	str.w	r0, [sl, #28]
   879bc:	e761      	b.n	87882 <_realloc_r+0x22e>
   879be:	bf00      	nop

000879c0 <__ascii_wctomb>:
   879c0:	b119      	cbz	r1, 879ca <__ascii_wctomb+0xa>
   879c2:	2aff      	cmp	r2, #255	; 0xff
   879c4:	d803      	bhi.n	879ce <__ascii_wctomb+0xe>
   879c6:	700a      	strb	r2, [r1, #0]
   879c8:	2101      	movs	r1, #1
   879ca:	4608      	mov	r0, r1
   879cc:	4770      	bx	lr
   879ce:	238a      	movs	r3, #138	; 0x8a
   879d0:	f04f 31ff 	mov.w	r1, #4294967295
   879d4:	6003      	str	r3, [r0, #0]
   879d6:	e7f8      	b.n	879ca <__ascii_wctomb+0xa>

000879d8 <__aeabi_dmul>:
   879d8:	b570      	push	{r4, r5, r6, lr}
   879da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   879de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   879e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   879e6:	bf1d      	ittte	ne
   879e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   879ec:	ea94 0f0c 	teqne	r4, ip
   879f0:	ea95 0f0c 	teqne	r5, ip
   879f4:	f000 f8de 	bleq	87bb4 <__aeabi_dmul+0x1dc>
   879f8:	442c      	add	r4, r5
   879fa:	ea81 0603 	eor.w	r6, r1, r3
   879fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   87a02:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   87a06:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   87a0a:	bf18      	it	ne
   87a0c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   87a10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87a14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   87a18:	d038      	beq.n	87a8c <__aeabi_dmul+0xb4>
   87a1a:	fba0 ce02 	umull	ip, lr, r0, r2
   87a1e:	f04f 0500 	mov.w	r5, #0
   87a22:	fbe1 e502 	umlal	lr, r5, r1, r2
   87a26:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   87a2a:	fbe0 e503 	umlal	lr, r5, r0, r3
   87a2e:	f04f 0600 	mov.w	r6, #0
   87a32:	fbe1 5603 	umlal	r5, r6, r1, r3
   87a36:	f09c 0f00 	teq	ip, #0
   87a3a:	bf18      	it	ne
   87a3c:	f04e 0e01 	orrne.w	lr, lr, #1
   87a40:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   87a44:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   87a48:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   87a4c:	d204      	bcs.n	87a58 <__aeabi_dmul+0x80>
   87a4e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   87a52:	416d      	adcs	r5, r5
   87a54:	eb46 0606 	adc.w	r6, r6, r6
   87a58:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   87a5c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   87a60:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   87a64:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   87a68:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   87a6c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   87a70:	bf88      	it	hi
   87a72:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87a76:	d81e      	bhi.n	87ab6 <__aeabi_dmul+0xde>
   87a78:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   87a7c:	bf08      	it	eq
   87a7e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   87a82:	f150 0000 	adcs.w	r0, r0, #0
   87a86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87a8a:	bd70      	pop	{r4, r5, r6, pc}
   87a8c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   87a90:	ea46 0101 	orr.w	r1, r6, r1
   87a94:	ea40 0002 	orr.w	r0, r0, r2
   87a98:	ea81 0103 	eor.w	r1, r1, r3
   87a9c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   87aa0:	bfc2      	ittt	gt
   87aa2:	ebd4 050c 	rsbsgt	r5, r4, ip
   87aa6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87aaa:	bd70      	popgt	{r4, r5, r6, pc}
   87aac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87ab0:	f04f 0e00 	mov.w	lr, #0
   87ab4:	3c01      	subs	r4, #1
   87ab6:	f300 80ab 	bgt.w	87c10 <__aeabi_dmul+0x238>
   87aba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   87abe:	bfde      	ittt	le
   87ac0:	2000      	movle	r0, #0
   87ac2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   87ac6:	bd70      	pople	{r4, r5, r6, pc}
   87ac8:	f1c4 0400 	rsb	r4, r4, #0
   87acc:	3c20      	subs	r4, #32
   87ace:	da35      	bge.n	87b3c <__aeabi_dmul+0x164>
   87ad0:	340c      	adds	r4, #12
   87ad2:	dc1b      	bgt.n	87b0c <__aeabi_dmul+0x134>
   87ad4:	f104 0414 	add.w	r4, r4, #20
   87ad8:	f1c4 0520 	rsb	r5, r4, #32
   87adc:	fa00 f305 	lsl.w	r3, r0, r5
   87ae0:	fa20 f004 	lsr.w	r0, r0, r4
   87ae4:	fa01 f205 	lsl.w	r2, r1, r5
   87ae8:	ea40 0002 	orr.w	r0, r0, r2
   87aec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   87af0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87af4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   87af8:	fa21 f604 	lsr.w	r6, r1, r4
   87afc:	eb42 0106 	adc.w	r1, r2, r6
   87b00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87b04:	bf08      	it	eq
   87b06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87b0a:	bd70      	pop	{r4, r5, r6, pc}
   87b0c:	f1c4 040c 	rsb	r4, r4, #12
   87b10:	f1c4 0520 	rsb	r5, r4, #32
   87b14:	fa00 f304 	lsl.w	r3, r0, r4
   87b18:	fa20 f005 	lsr.w	r0, r0, r5
   87b1c:	fa01 f204 	lsl.w	r2, r1, r4
   87b20:	ea40 0002 	orr.w	r0, r0, r2
   87b24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87b28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   87b2c:	f141 0100 	adc.w	r1, r1, #0
   87b30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87b34:	bf08      	it	eq
   87b36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87b3a:	bd70      	pop	{r4, r5, r6, pc}
   87b3c:	f1c4 0520 	rsb	r5, r4, #32
   87b40:	fa00 f205 	lsl.w	r2, r0, r5
   87b44:	ea4e 0e02 	orr.w	lr, lr, r2
   87b48:	fa20 f304 	lsr.w	r3, r0, r4
   87b4c:	fa01 f205 	lsl.w	r2, r1, r5
   87b50:	ea43 0302 	orr.w	r3, r3, r2
   87b54:	fa21 f004 	lsr.w	r0, r1, r4
   87b58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87b5c:	fa21 f204 	lsr.w	r2, r1, r4
   87b60:	ea20 0002 	bic.w	r0, r0, r2
   87b64:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   87b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87b6c:	bf08      	it	eq
   87b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87b72:	bd70      	pop	{r4, r5, r6, pc}
   87b74:	f094 0f00 	teq	r4, #0
   87b78:	d10f      	bne.n	87b9a <__aeabi_dmul+0x1c2>
   87b7a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   87b7e:	0040      	lsls	r0, r0, #1
   87b80:	eb41 0101 	adc.w	r1, r1, r1
   87b84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87b88:	bf08      	it	eq
   87b8a:	3c01      	subeq	r4, #1
   87b8c:	d0f7      	beq.n	87b7e <__aeabi_dmul+0x1a6>
   87b8e:	ea41 0106 	orr.w	r1, r1, r6
   87b92:	f095 0f00 	teq	r5, #0
   87b96:	bf18      	it	ne
   87b98:	4770      	bxne	lr
   87b9a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   87b9e:	0052      	lsls	r2, r2, #1
   87ba0:	eb43 0303 	adc.w	r3, r3, r3
   87ba4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   87ba8:	bf08      	it	eq
   87baa:	3d01      	subeq	r5, #1
   87bac:	d0f7      	beq.n	87b9e <__aeabi_dmul+0x1c6>
   87bae:	ea43 0306 	orr.w	r3, r3, r6
   87bb2:	4770      	bx	lr
   87bb4:	ea94 0f0c 	teq	r4, ip
   87bb8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   87bbc:	bf18      	it	ne
   87bbe:	ea95 0f0c 	teqne	r5, ip
   87bc2:	d00c      	beq.n	87bde <__aeabi_dmul+0x206>
   87bc4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87bc8:	bf18      	it	ne
   87bca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87bce:	d1d1      	bne.n	87b74 <__aeabi_dmul+0x19c>
   87bd0:	ea81 0103 	eor.w	r1, r1, r3
   87bd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87bd8:	f04f 0000 	mov.w	r0, #0
   87bdc:	bd70      	pop	{r4, r5, r6, pc}
   87bde:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87be2:	bf06      	itte	eq
   87be4:	4610      	moveq	r0, r2
   87be6:	4619      	moveq	r1, r3
   87be8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87bec:	d019      	beq.n	87c22 <__aeabi_dmul+0x24a>
   87bee:	ea94 0f0c 	teq	r4, ip
   87bf2:	d102      	bne.n	87bfa <__aeabi_dmul+0x222>
   87bf4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   87bf8:	d113      	bne.n	87c22 <__aeabi_dmul+0x24a>
   87bfa:	ea95 0f0c 	teq	r5, ip
   87bfe:	d105      	bne.n	87c0c <__aeabi_dmul+0x234>
   87c00:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   87c04:	bf1c      	itt	ne
   87c06:	4610      	movne	r0, r2
   87c08:	4619      	movne	r1, r3
   87c0a:	d10a      	bne.n	87c22 <__aeabi_dmul+0x24a>
   87c0c:	ea81 0103 	eor.w	r1, r1, r3
   87c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87c14:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   87c18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87c1c:	f04f 0000 	mov.w	r0, #0
   87c20:	bd70      	pop	{r4, r5, r6, pc}
   87c22:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   87c26:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   87c2a:	bd70      	pop	{r4, r5, r6, pc}

00087c2c <__aeabi_ddiv>:
   87c2c:	b570      	push	{r4, r5, r6, lr}
   87c2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87c32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87c36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87c3a:	bf1d      	ittte	ne
   87c3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87c40:	ea94 0f0c 	teqne	r4, ip
   87c44:	ea95 0f0c 	teqne	r5, ip
   87c48:	f000 f8a7 	bleq	87d9a <__aeabi_ddiv+0x16e>
   87c4c:	eba4 0405 	sub.w	r4, r4, r5
   87c50:	ea81 0e03 	eor.w	lr, r1, r3
   87c54:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   87c58:	ea4f 3101 	mov.w	r1, r1, lsl #12
   87c5c:	f000 8088 	beq.w	87d70 <__aeabi_ddiv+0x144>
   87c60:	ea4f 3303 	mov.w	r3, r3, lsl #12
   87c64:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   87c68:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   87c6c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   87c70:	ea4f 2202 	mov.w	r2, r2, lsl #8
   87c74:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   87c78:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   87c7c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   87c80:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   87c84:	429d      	cmp	r5, r3
   87c86:	bf08      	it	eq
   87c88:	4296      	cmpeq	r6, r2
   87c8a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   87c8e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   87c92:	d202      	bcs.n	87c9a <__aeabi_ddiv+0x6e>
   87c94:	085b      	lsrs	r3, r3, #1
   87c96:	ea4f 0232 	mov.w	r2, r2, rrx
   87c9a:	1ab6      	subs	r6, r6, r2
   87c9c:	eb65 0503 	sbc.w	r5, r5, r3
   87ca0:	085b      	lsrs	r3, r3, #1
   87ca2:	ea4f 0232 	mov.w	r2, r2, rrx
   87ca6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   87caa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   87cae:	ebb6 0e02 	subs.w	lr, r6, r2
   87cb2:	eb75 0e03 	sbcs.w	lr, r5, r3
   87cb6:	bf22      	ittt	cs
   87cb8:	1ab6      	subcs	r6, r6, r2
   87cba:	4675      	movcs	r5, lr
   87cbc:	ea40 000c 	orrcs.w	r0, r0, ip
   87cc0:	085b      	lsrs	r3, r3, #1
   87cc2:	ea4f 0232 	mov.w	r2, r2, rrx
   87cc6:	ebb6 0e02 	subs.w	lr, r6, r2
   87cca:	eb75 0e03 	sbcs.w	lr, r5, r3
   87cce:	bf22      	ittt	cs
   87cd0:	1ab6      	subcs	r6, r6, r2
   87cd2:	4675      	movcs	r5, lr
   87cd4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   87cd8:	085b      	lsrs	r3, r3, #1
   87cda:	ea4f 0232 	mov.w	r2, r2, rrx
   87cde:	ebb6 0e02 	subs.w	lr, r6, r2
   87ce2:	eb75 0e03 	sbcs.w	lr, r5, r3
   87ce6:	bf22      	ittt	cs
   87ce8:	1ab6      	subcs	r6, r6, r2
   87cea:	4675      	movcs	r5, lr
   87cec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   87cf0:	085b      	lsrs	r3, r3, #1
   87cf2:	ea4f 0232 	mov.w	r2, r2, rrx
   87cf6:	ebb6 0e02 	subs.w	lr, r6, r2
   87cfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   87cfe:	bf22      	ittt	cs
   87d00:	1ab6      	subcs	r6, r6, r2
   87d02:	4675      	movcs	r5, lr
   87d04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   87d08:	ea55 0e06 	orrs.w	lr, r5, r6
   87d0c:	d018      	beq.n	87d40 <__aeabi_ddiv+0x114>
   87d0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   87d12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   87d16:	ea4f 1606 	mov.w	r6, r6, lsl #4
   87d1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   87d1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   87d22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   87d26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   87d2a:	d1c0      	bne.n	87cae <__aeabi_ddiv+0x82>
   87d2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87d30:	d10b      	bne.n	87d4a <__aeabi_ddiv+0x11e>
   87d32:	ea41 0100 	orr.w	r1, r1, r0
   87d36:	f04f 0000 	mov.w	r0, #0
   87d3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   87d3e:	e7b6      	b.n	87cae <__aeabi_ddiv+0x82>
   87d40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87d44:	bf04      	itt	eq
   87d46:	4301      	orreq	r1, r0
   87d48:	2000      	moveq	r0, #0
   87d4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   87d4e:	bf88      	it	hi
   87d50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87d54:	f63f aeaf 	bhi.w	87ab6 <__aeabi_dmul+0xde>
   87d58:	ebb5 0c03 	subs.w	ip, r5, r3
   87d5c:	bf04      	itt	eq
   87d5e:	ebb6 0c02 	subseq.w	ip, r6, r2
   87d62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   87d66:	f150 0000 	adcs.w	r0, r0, #0
   87d6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87d6e:	bd70      	pop	{r4, r5, r6, pc}
   87d70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   87d74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   87d78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   87d7c:	bfc2      	ittt	gt
   87d7e:	ebd4 050c 	rsbsgt	r5, r4, ip
   87d82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87d86:	bd70      	popgt	{r4, r5, r6, pc}
   87d88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87d8c:	f04f 0e00 	mov.w	lr, #0
   87d90:	3c01      	subs	r4, #1
   87d92:	e690      	b.n	87ab6 <__aeabi_dmul+0xde>
   87d94:	ea45 0e06 	orr.w	lr, r5, r6
   87d98:	e68d      	b.n	87ab6 <__aeabi_dmul+0xde>
   87d9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   87d9e:	ea94 0f0c 	teq	r4, ip
   87da2:	bf08      	it	eq
   87da4:	ea95 0f0c 	teqeq	r5, ip
   87da8:	f43f af3b 	beq.w	87c22 <__aeabi_dmul+0x24a>
   87dac:	ea94 0f0c 	teq	r4, ip
   87db0:	d10a      	bne.n	87dc8 <__aeabi_ddiv+0x19c>
   87db2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   87db6:	f47f af34 	bne.w	87c22 <__aeabi_dmul+0x24a>
   87dba:	ea95 0f0c 	teq	r5, ip
   87dbe:	f47f af25 	bne.w	87c0c <__aeabi_dmul+0x234>
   87dc2:	4610      	mov	r0, r2
   87dc4:	4619      	mov	r1, r3
   87dc6:	e72c      	b.n	87c22 <__aeabi_dmul+0x24a>
   87dc8:	ea95 0f0c 	teq	r5, ip
   87dcc:	d106      	bne.n	87ddc <__aeabi_ddiv+0x1b0>
   87dce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   87dd2:	f43f aefd 	beq.w	87bd0 <__aeabi_dmul+0x1f8>
   87dd6:	4610      	mov	r0, r2
   87dd8:	4619      	mov	r1, r3
   87dda:	e722      	b.n	87c22 <__aeabi_dmul+0x24a>
   87ddc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87de0:	bf18      	it	ne
   87de2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87de6:	f47f aec5 	bne.w	87b74 <__aeabi_dmul+0x19c>
   87dea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   87dee:	f47f af0d 	bne.w	87c0c <__aeabi_dmul+0x234>
   87df2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   87df6:	f47f aeeb 	bne.w	87bd0 <__aeabi_dmul+0x1f8>
   87dfa:	e712      	b.n	87c22 <__aeabi_dmul+0x24a>

00087dfc <__gedf2>:
   87dfc:	f04f 3cff 	mov.w	ip, #4294967295
   87e00:	e006      	b.n	87e10 <__cmpdf2+0x4>
   87e02:	bf00      	nop

00087e04 <__ledf2>:
   87e04:	f04f 0c01 	mov.w	ip, #1
   87e08:	e002      	b.n	87e10 <__cmpdf2+0x4>
   87e0a:	bf00      	nop

00087e0c <__cmpdf2>:
   87e0c:	f04f 0c01 	mov.w	ip, #1
   87e10:	f84d cd04 	str.w	ip, [sp, #-4]!
   87e14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   87e18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87e1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   87e20:	bf18      	it	ne
   87e22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   87e26:	d01b      	beq.n	87e60 <__cmpdf2+0x54>
   87e28:	b001      	add	sp, #4
   87e2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   87e2e:	bf0c      	ite	eq
   87e30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   87e34:	ea91 0f03 	teqne	r1, r3
   87e38:	bf02      	ittt	eq
   87e3a:	ea90 0f02 	teqeq	r0, r2
   87e3e:	2000      	moveq	r0, #0
   87e40:	4770      	bxeq	lr
   87e42:	f110 0f00 	cmn.w	r0, #0
   87e46:	ea91 0f03 	teq	r1, r3
   87e4a:	bf58      	it	pl
   87e4c:	4299      	cmppl	r1, r3
   87e4e:	bf08      	it	eq
   87e50:	4290      	cmpeq	r0, r2
   87e52:	bf2c      	ite	cs
   87e54:	17d8      	asrcs	r0, r3, #31
   87e56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   87e5a:	f040 0001 	orr.w	r0, r0, #1
   87e5e:	4770      	bx	lr
   87e60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   87e64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87e68:	d102      	bne.n	87e70 <__cmpdf2+0x64>
   87e6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   87e6e:	d107      	bne.n	87e80 <__cmpdf2+0x74>
   87e70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   87e74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87e78:	d1d6      	bne.n	87e28 <__cmpdf2+0x1c>
   87e7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   87e7e:	d0d3      	beq.n	87e28 <__cmpdf2+0x1c>
   87e80:	f85d 0b04 	ldr.w	r0, [sp], #4
   87e84:	4770      	bx	lr
   87e86:	bf00      	nop

00087e88 <__aeabi_cdrcmple>:
   87e88:	4684      	mov	ip, r0
   87e8a:	4610      	mov	r0, r2
   87e8c:	4662      	mov	r2, ip
   87e8e:	468c      	mov	ip, r1
   87e90:	4619      	mov	r1, r3
   87e92:	4663      	mov	r3, ip
   87e94:	e000      	b.n	87e98 <__aeabi_cdcmpeq>
   87e96:	bf00      	nop

00087e98 <__aeabi_cdcmpeq>:
   87e98:	b501      	push	{r0, lr}
   87e9a:	f7ff ffb7 	bl	87e0c <__cmpdf2>
   87e9e:	2800      	cmp	r0, #0
   87ea0:	bf48      	it	mi
   87ea2:	f110 0f00 	cmnmi.w	r0, #0
   87ea6:	bd01      	pop	{r0, pc}

00087ea8 <__aeabi_dcmpeq>:
   87ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
   87eac:	f7ff fff4 	bl	87e98 <__aeabi_cdcmpeq>
   87eb0:	bf0c      	ite	eq
   87eb2:	2001      	moveq	r0, #1
   87eb4:	2000      	movne	r0, #0
   87eb6:	f85d fb08 	ldr.w	pc, [sp], #8
   87eba:	bf00      	nop

00087ebc <__aeabi_dcmplt>:
   87ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
   87ec0:	f7ff ffea 	bl	87e98 <__aeabi_cdcmpeq>
   87ec4:	bf34      	ite	cc
   87ec6:	2001      	movcc	r0, #1
   87ec8:	2000      	movcs	r0, #0
   87eca:	f85d fb08 	ldr.w	pc, [sp], #8
   87ece:	bf00      	nop

00087ed0 <__aeabi_dcmple>:
   87ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
   87ed4:	f7ff ffe0 	bl	87e98 <__aeabi_cdcmpeq>
   87ed8:	bf94      	ite	ls
   87eda:	2001      	movls	r0, #1
   87edc:	2000      	movhi	r0, #0
   87ede:	f85d fb08 	ldr.w	pc, [sp], #8
   87ee2:	bf00      	nop

00087ee4 <__aeabi_dcmpge>:
   87ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
   87ee8:	f7ff ffce 	bl	87e88 <__aeabi_cdrcmple>
   87eec:	bf94      	ite	ls
   87eee:	2001      	movls	r0, #1
   87ef0:	2000      	movhi	r0, #0
   87ef2:	f85d fb08 	ldr.w	pc, [sp], #8
   87ef6:	bf00      	nop

00087ef8 <__aeabi_dcmpgt>:
   87ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
   87efc:	f7ff ffc4 	bl	87e88 <__aeabi_cdrcmple>
   87f00:	bf34      	ite	cc
   87f02:	2001      	movcc	r0, #1
   87f04:	2000      	movcs	r0, #0
   87f06:	f85d fb08 	ldr.w	pc, [sp], #8
   87f0a:	bf00      	nop

00087f0c <__aeabi_dcmpun>:
   87f0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   87f10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87f14:	d102      	bne.n	87f1c <__aeabi_dcmpun+0x10>
   87f16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   87f1a:	d10a      	bne.n	87f32 <__aeabi_dcmpun+0x26>
   87f1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   87f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87f24:	d102      	bne.n	87f2c <__aeabi_dcmpun+0x20>
   87f26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   87f2a:	d102      	bne.n	87f32 <__aeabi_dcmpun+0x26>
   87f2c:	f04f 0000 	mov.w	r0, #0
   87f30:	4770      	bx	lr
   87f32:	f04f 0001 	mov.w	r0, #1
   87f36:	4770      	bx	lr

00087f38 <__aeabi_d2iz>:
   87f38:	ea4f 0241 	mov.w	r2, r1, lsl #1
   87f3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   87f40:	d215      	bcs.n	87f6e <__aeabi_d2iz+0x36>
   87f42:	d511      	bpl.n	87f68 <__aeabi_d2iz+0x30>
   87f44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   87f48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   87f4c:	d912      	bls.n	87f74 <__aeabi_d2iz+0x3c>
   87f4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   87f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   87f56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   87f5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   87f5e:	fa23 f002 	lsr.w	r0, r3, r2
   87f62:	bf18      	it	ne
   87f64:	4240      	negne	r0, r0
   87f66:	4770      	bx	lr
   87f68:	f04f 0000 	mov.w	r0, #0
   87f6c:	4770      	bx	lr
   87f6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   87f72:	d105      	bne.n	87f80 <__aeabi_d2iz+0x48>
   87f74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   87f78:	bf08      	it	eq
   87f7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   87f7e:	4770      	bx	lr
   87f80:	f04f 0000 	mov.w	r0, #0
   87f84:	4770      	bx	lr
   87f86:	bf00      	nop

00087f88 <__aeabi_uldivmod>:
   87f88:	b953      	cbnz	r3, 87fa0 <__aeabi_uldivmod+0x18>
   87f8a:	b94a      	cbnz	r2, 87fa0 <__aeabi_uldivmod+0x18>
   87f8c:	2900      	cmp	r1, #0
   87f8e:	bf08      	it	eq
   87f90:	2800      	cmpeq	r0, #0
   87f92:	bf1c      	itt	ne
   87f94:	f04f 31ff 	movne.w	r1, #4294967295
   87f98:	f04f 30ff 	movne.w	r0, #4294967295
   87f9c:	f000 b97a 	b.w	88294 <__aeabi_idiv0>
   87fa0:	f1ad 0c08 	sub.w	ip, sp, #8
   87fa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   87fa8:	f000 f806 	bl	87fb8 <__udivmoddi4>
   87fac:	f8dd e004 	ldr.w	lr, [sp, #4]
   87fb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87fb4:	b004      	add	sp, #16
   87fb6:	4770      	bx	lr

00087fb8 <__udivmoddi4>:
   87fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87fbc:	468c      	mov	ip, r1
   87fbe:	460e      	mov	r6, r1
   87fc0:	4604      	mov	r4, r0
   87fc2:	9d08      	ldr	r5, [sp, #32]
   87fc4:	2b00      	cmp	r3, #0
   87fc6:	d150      	bne.n	8806a <__udivmoddi4+0xb2>
   87fc8:	428a      	cmp	r2, r1
   87fca:	4617      	mov	r7, r2
   87fcc:	d96c      	bls.n	880a8 <__udivmoddi4+0xf0>
   87fce:	fab2 fe82 	clz	lr, r2
   87fd2:	f1be 0f00 	cmp.w	lr, #0
   87fd6:	d00b      	beq.n	87ff0 <__udivmoddi4+0x38>
   87fd8:	f1ce 0c20 	rsb	ip, lr, #32
   87fdc:	fa01 f60e 	lsl.w	r6, r1, lr
   87fe0:	fa20 fc0c 	lsr.w	ip, r0, ip
   87fe4:	fa02 f70e 	lsl.w	r7, r2, lr
   87fe8:	ea4c 0c06 	orr.w	ip, ip, r6
   87fec:	fa00 f40e 	lsl.w	r4, r0, lr
   87ff0:	0c3a      	lsrs	r2, r7, #16
   87ff2:	fbbc f9f2 	udiv	r9, ip, r2
   87ff6:	b2bb      	uxth	r3, r7
   87ff8:	fb02 cc19 	mls	ip, r2, r9, ip
   87ffc:	fb09 fa03 	mul.w	sl, r9, r3
   88000:	ea4f 4814 	mov.w	r8, r4, lsr #16
   88004:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   88008:	45b2      	cmp	sl, r6
   8800a:	d90a      	bls.n	88022 <__udivmoddi4+0x6a>
   8800c:	19f6      	adds	r6, r6, r7
   8800e:	f109 31ff 	add.w	r1, r9, #4294967295
   88012:	f080 8125 	bcs.w	88260 <__udivmoddi4+0x2a8>
   88016:	45b2      	cmp	sl, r6
   88018:	f240 8122 	bls.w	88260 <__udivmoddi4+0x2a8>
   8801c:	f1a9 0902 	sub.w	r9, r9, #2
   88020:	443e      	add	r6, r7
   88022:	eba6 060a 	sub.w	r6, r6, sl
   88026:	fbb6 f0f2 	udiv	r0, r6, r2
   8802a:	fb02 6610 	mls	r6, r2, r0, r6
   8802e:	fb00 f303 	mul.w	r3, r0, r3
   88032:	b2a4      	uxth	r4, r4
   88034:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   88038:	42a3      	cmp	r3, r4
   8803a:	d909      	bls.n	88050 <__udivmoddi4+0x98>
   8803c:	19e4      	adds	r4, r4, r7
   8803e:	f100 32ff 	add.w	r2, r0, #4294967295
   88042:	f080 810b 	bcs.w	8825c <__udivmoddi4+0x2a4>
   88046:	42a3      	cmp	r3, r4
   88048:	f240 8108 	bls.w	8825c <__udivmoddi4+0x2a4>
   8804c:	3802      	subs	r0, #2
   8804e:	443c      	add	r4, r7
   88050:	2100      	movs	r1, #0
   88052:	1ae4      	subs	r4, r4, r3
   88054:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   88058:	2d00      	cmp	r5, #0
   8805a:	d062      	beq.n	88122 <__udivmoddi4+0x16a>
   8805c:	2300      	movs	r3, #0
   8805e:	fa24 f40e 	lsr.w	r4, r4, lr
   88062:	602c      	str	r4, [r5, #0]
   88064:	606b      	str	r3, [r5, #4]
   88066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8806a:	428b      	cmp	r3, r1
   8806c:	d907      	bls.n	8807e <__udivmoddi4+0xc6>
   8806e:	2d00      	cmp	r5, #0
   88070:	d055      	beq.n	8811e <__udivmoddi4+0x166>
   88072:	2100      	movs	r1, #0
   88074:	e885 0041 	stmia.w	r5, {r0, r6}
   88078:	4608      	mov	r0, r1
   8807a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8807e:	fab3 f183 	clz	r1, r3
   88082:	2900      	cmp	r1, #0
   88084:	f040 808f 	bne.w	881a6 <__udivmoddi4+0x1ee>
   88088:	42b3      	cmp	r3, r6
   8808a:	d302      	bcc.n	88092 <__udivmoddi4+0xda>
   8808c:	4282      	cmp	r2, r0
   8808e:	f200 80fc 	bhi.w	8828a <__udivmoddi4+0x2d2>
   88092:	1a84      	subs	r4, r0, r2
   88094:	eb66 0603 	sbc.w	r6, r6, r3
   88098:	2001      	movs	r0, #1
   8809a:	46b4      	mov	ip, r6
   8809c:	2d00      	cmp	r5, #0
   8809e:	d040      	beq.n	88122 <__udivmoddi4+0x16a>
   880a0:	e885 1010 	stmia.w	r5, {r4, ip}
   880a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   880a8:	b912      	cbnz	r2, 880b0 <__udivmoddi4+0xf8>
   880aa:	2701      	movs	r7, #1
   880ac:	fbb7 f7f2 	udiv	r7, r7, r2
   880b0:	fab7 fe87 	clz	lr, r7
   880b4:	f1be 0f00 	cmp.w	lr, #0
   880b8:	d135      	bne.n	88126 <__udivmoddi4+0x16e>
   880ba:	2101      	movs	r1, #1
   880bc:	1bf6      	subs	r6, r6, r7
   880be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   880c2:	fa1f f887 	uxth.w	r8, r7
   880c6:	fbb6 f2fc 	udiv	r2, r6, ip
   880ca:	fb0c 6612 	mls	r6, ip, r2, r6
   880ce:	fb08 f002 	mul.w	r0, r8, r2
   880d2:	0c23      	lsrs	r3, r4, #16
   880d4:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   880d8:	42b0      	cmp	r0, r6
   880da:	d907      	bls.n	880ec <__udivmoddi4+0x134>
   880dc:	19f6      	adds	r6, r6, r7
   880de:	f102 33ff 	add.w	r3, r2, #4294967295
   880e2:	d202      	bcs.n	880ea <__udivmoddi4+0x132>
   880e4:	42b0      	cmp	r0, r6
   880e6:	f200 80d2 	bhi.w	8828e <__udivmoddi4+0x2d6>
   880ea:	461a      	mov	r2, r3
   880ec:	1a36      	subs	r6, r6, r0
   880ee:	fbb6 f0fc 	udiv	r0, r6, ip
   880f2:	fb0c 6610 	mls	r6, ip, r0, r6
   880f6:	fb08 f800 	mul.w	r8, r8, r0
   880fa:	b2a3      	uxth	r3, r4
   880fc:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   88100:	45a0      	cmp	r8, r4
   88102:	d907      	bls.n	88114 <__udivmoddi4+0x15c>
   88104:	19e4      	adds	r4, r4, r7
   88106:	f100 33ff 	add.w	r3, r0, #4294967295
   8810a:	d202      	bcs.n	88112 <__udivmoddi4+0x15a>
   8810c:	45a0      	cmp	r8, r4
   8810e:	f200 80b9 	bhi.w	88284 <__udivmoddi4+0x2cc>
   88112:	4618      	mov	r0, r3
   88114:	eba4 0408 	sub.w	r4, r4, r8
   88118:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   8811c:	e79c      	b.n	88058 <__udivmoddi4+0xa0>
   8811e:	4629      	mov	r1, r5
   88120:	4628      	mov	r0, r5
   88122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88126:	fa07 f70e 	lsl.w	r7, r7, lr
   8812a:	f1ce 0320 	rsb	r3, lr, #32
   8812e:	fa26 f203 	lsr.w	r2, r6, r3
   88132:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   88136:	fbb2 f1fc 	udiv	r1, r2, ip
   8813a:	fa1f f887 	uxth.w	r8, r7
   8813e:	fb0c 2211 	mls	r2, ip, r1, r2
   88142:	fa06 f60e 	lsl.w	r6, r6, lr
   88146:	fa20 f303 	lsr.w	r3, r0, r3
   8814a:	fb01 f908 	mul.w	r9, r1, r8
   8814e:	4333      	orrs	r3, r6
   88150:	0c1e      	lsrs	r6, r3, #16
   88152:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   88156:	45b1      	cmp	r9, r6
   88158:	fa00 f40e 	lsl.w	r4, r0, lr
   8815c:	d909      	bls.n	88172 <__udivmoddi4+0x1ba>
   8815e:	19f6      	adds	r6, r6, r7
   88160:	f101 32ff 	add.w	r2, r1, #4294967295
   88164:	f080 808c 	bcs.w	88280 <__udivmoddi4+0x2c8>
   88168:	45b1      	cmp	r9, r6
   8816a:	f240 8089 	bls.w	88280 <__udivmoddi4+0x2c8>
   8816e:	3902      	subs	r1, #2
   88170:	443e      	add	r6, r7
   88172:	eba6 0609 	sub.w	r6, r6, r9
   88176:	fbb6 f0fc 	udiv	r0, r6, ip
   8817a:	fb0c 6210 	mls	r2, ip, r0, r6
   8817e:	fb00 f908 	mul.w	r9, r0, r8
   88182:	b29e      	uxth	r6, r3
   88184:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   88188:	45b1      	cmp	r9, r6
   8818a:	d907      	bls.n	8819c <__udivmoddi4+0x1e4>
   8818c:	19f6      	adds	r6, r6, r7
   8818e:	f100 33ff 	add.w	r3, r0, #4294967295
   88192:	d271      	bcs.n	88278 <__udivmoddi4+0x2c0>
   88194:	45b1      	cmp	r9, r6
   88196:	d96f      	bls.n	88278 <__udivmoddi4+0x2c0>
   88198:	3802      	subs	r0, #2
   8819a:	443e      	add	r6, r7
   8819c:	eba6 0609 	sub.w	r6, r6, r9
   881a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   881a4:	e78f      	b.n	880c6 <__udivmoddi4+0x10e>
   881a6:	f1c1 0720 	rsb	r7, r1, #32
   881aa:	fa22 f807 	lsr.w	r8, r2, r7
   881ae:	408b      	lsls	r3, r1
   881b0:	ea48 0303 	orr.w	r3, r8, r3
   881b4:	fa26 f407 	lsr.w	r4, r6, r7
   881b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   881bc:	fbb4 f9fe 	udiv	r9, r4, lr
   881c0:	fa1f fc83 	uxth.w	ip, r3
   881c4:	fb0e 4419 	mls	r4, lr, r9, r4
   881c8:	408e      	lsls	r6, r1
   881ca:	fa20 f807 	lsr.w	r8, r0, r7
   881ce:	fb09 fa0c 	mul.w	sl, r9, ip
   881d2:	ea48 0806 	orr.w	r8, r8, r6
   881d6:	ea4f 4618 	mov.w	r6, r8, lsr #16
   881da:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   881de:	45a2      	cmp	sl, r4
   881e0:	fa02 f201 	lsl.w	r2, r2, r1
   881e4:	fa00 f601 	lsl.w	r6, r0, r1
   881e8:	d908      	bls.n	881fc <__udivmoddi4+0x244>
   881ea:	18e4      	adds	r4, r4, r3
   881ec:	f109 30ff 	add.w	r0, r9, #4294967295
   881f0:	d244      	bcs.n	8827c <__udivmoddi4+0x2c4>
   881f2:	45a2      	cmp	sl, r4
   881f4:	d942      	bls.n	8827c <__udivmoddi4+0x2c4>
   881f6:	f1a9 0902 	sub.w	r9, r9, #2
   881fa:	441c      	add	r4, r3
   881fc:	eba4 040a 	sub.w	r4, r4, sl
   88200:	fbb4 f0fe 	udiv	r0, r4, lr
   88204:	fb0e 4410 	mls	r4, lr, r0, r4
   88208:	fb00 fc0c 	mul.w	ip, r0, ip
   8820c:	fa1f f888 	uxth.w	r8, r8
   88210:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   88214:	45a4      	cmp	ip, r4
   88216:	d907      	bls.n	88228 <__udivmoddi4+0x270>
   88218:	18e4      	adds	r4, r4, r3
   8821a:	f100 3eff 	add.w	lr, r0, #4294967295
   8821e:	d229      	bcs.n	88274 <__udivmoddi4+0x2bc>
   88220:	45a4      	cmp	ip, r4
   88222:	d927      	bls.n	88274 <__udivmoddi4+0x2bc>
   88224:	3802      	subs	r0, #2
   88226:	441c      	add	r4, r3
   88228:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8822c:	fba0 8902 	umull	r8, r9, r0, r2
   88230:	eba4 0c0c 	sub.w	ip, r4, ip
   88234:	45cc      	cmp	ip, r9
   88236:	46c2      	mov	sl, r8
   88238:	46ce      	mov	lr, r9
   8823a:	d315      	bcc.n	88268 <__udivmoddi4+0x2b0>
   8823c:	d012      	beq.n	88264 <__udivmoddi4+0x2ac>
   8823e:	b155      	cbz	r5, 88256 <__udivmoddi4+0x29e>
   88240:	ebb6 030a 	subs.w	r3, r6, sl
   88244:	eb6c 060e 	sbc.w	r6, ip, lr
   88248:	fa06 f707 	lsl.w	r7, r6, r7
   8824c:	40cb      	lsrs	r3, r1
   8824e:	431f      	orrs	r7, r3
   88250:	40ce      	lsrs	r6, r1
   88252:	602f      	str	r7, [r5, #0]
   88254:	606e      	str	r6, [r5, #4]
   88256:	2100      	movs	r1, #0
   88258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8825c:	4610      	mov	r0, r2
   8825e:	e6f7      	b.n	88050 <__udivmoddi4+0x98>
   88260:	4689      	mov	r9, r1
   88262:	e6de      	b.n	88022 <__udivmoddi4+0x6a>
   88264:	4546      	cmp	r6, r8
   88266:	d2ea      	bcs.n	8823e <__udivmoddi4+0x286>
   88268:	ebb8 0a02 	subs.w	sl, r8, r2
   8826c:	eb69 0e03 	sbc.w	lr, r9, r3
   88270:	3801      	subs	r0, #1
   88272:	e7e4      	b.n	8823e <__udivmoddi4+0x286>
   88274:	4670      	mov	r0, lr
   88276:	e7d7      	b.n	88228 <__udivmoddi4+0x270>
   88278:	4618      	mov	r0, r3
   8827a:	e78f      	b.n	8819c <__udivmoddi4+0x1e4>
   8827c:	4681      	mov	r9, r0
   8827e:	e7bd      	b.n	881fc <__udivmoddi4+0x244>
   88280:	4611      	mov	r1, r2
   88282:	e776      	b.n	88172 <__udivmoddi4+0x1ba>
   88284:	3802      	subs	r0, #2
   88286:	443c      	add	r4, r7
   88288:	e744      	b.n	88114 <__udivmoddi4+0x15c>
   8828a:	4608      	mov	r0, r1
   8828c:	e706      	b.n	8809c <__udivmoddi4+0xe4>
   8828e:	3a02      	subs	r2, #2
   88290:	443e      	add	r6, r7
   88292:	e72b      	b.n	880ec <__udivmoddi4+0x134>

00088294 <__aeabi_idiv0>:
   88294:	4770      	bx	lr
   88296:	bf00      	nop
   88298:	000f4240 	.word	0x000f4240
   8829c:	000000c0 	.word	0x000000c0
	...
   882a8:	74746553 	.word	0x74746553
   882ac:	73676e69 	.word	0x73676e69
   882b0:	00002020 	.word	0x00002020
   882b4:	6f626f52 	.word	0x6f626f52
   882b8:	44492074 	.word	0x44492074
   882bc:	3125203a 	.word	0x3125203a
   882c0:	00000064 	.word	0x00000064
   882c4:	65657053 	.word	0x65657053
   882c8:	25203a64 	.word	0x25203a64
   882cc:	00006432 	.word	0x00006432
   882d0:	49464957 	.word	0x49464957
   882d4:	3125203a 	.word	0x3125203a
   882d8:	00000064 	.word	0x00000064
   882dc:	696c6143 	.word	0x696c6143
   882e0:	74617262 	.word	0x74617262
   882e4:	00000065 	.word	0x00000065
   882e8:	20746553 	.word	0x20746553
   882ec:	6c656966 	.word	0x6c656966
   882f0:	69732064 	.word	0x69732064
   882f4:	7220657a 	.word	0x7220657a
   882f8:	00006665 	.word	0x00006665
   882fc:	00000000 	.word	0x00000000
   88300:	614d2020 	.word	0x614d2020
   88304:	20686374 	.word	0x20686374
   88308:	00000020 	.word	0x00000020
   8830c:	72617453 	.word	0x72617453
   88310:	616d2074 	.word	0x616d2074
   88314:	00686374 	.word	0x00686374
   88318:	736e6553 	.word	0x736e6553
   8831c:	7620726f 	.word	0x7620726f
   88320:	65756c61 	.word	0x65756c61
   88324:	00000073 	.word	0x00000073
   88328:	76697244 	.word	0x76697244
   8832c:	6e612065 	.word	0x6e612065
   88330:	20656c67 	.word	0x20656c67
   88334:	00646970 	.word	0x00646970
   88338:	65542020 	.word	0x65542020
   8833c:	00737473 	.word	0x00737473
   88340:	6e727554 	.word	0x6e727554
   88344:	206f7420 	.word	0x206f7420
   88348:	72617473 	.word	0x72617473
   8834c:	00000074 	.word	0x00000074
   88350:	65766f4d 	.word	0x65766f4d
   88354:	206f7420 	.word	0x206f7420
   88358:	6464696d 	.word	0x6464696d
   8835c:	0000656c 	.word	0x0000656c
   88360:	65766f4d 	.word	0x65766f4d
   88364:	206f7420 	.word	0x206f7420
   88368:	6c6c6162 	.word	0x6c6c6162
   8836c:	00000000 	.word	0x00000000
   88370:	00495052 	.word	0x00495052
   88374:	706f7453 	.word	0x706f7453
   88378:	206e6f20 	.word	0x206e6f20
   8837c:	656e696c 	.word	0x656e696c
   88380:	00000000 	.word	0x00000000
   88384:	6f636e45 	.word	0x6f636e45
   88388:	20726564 	.word	0x20726564
   8838c:	74736574 	.word	0x74736574
   88390:	00000000 	.word	0x00000000
   88394:	0000003e 	.word	0x0000003e
   88398:	00000020 	.word	0x00000020
   8839c:	0000003c 	.word	0x0000003c
   883a0:	312e3325 	.word	0x312e3325
   883a4:	00005666 	.word	0x00005666
   883a8:	2e332520 	.word	0x2e332520
   883ac:	00566631 	.word	0x00566631
   883b0:	746f6f62 	.word	0x746f6f62
   883b4:	20676e69 	.word	0x20676e69
   883b8:	534f6f6e 	.word	0x534f6f6e
   883bc:	00202020 	.word	0x00202020
   883c0:	0000002e 	.word	0x0000002e

000883c4 <_global_impure_ptr>:
   883c4:	200701a8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   883d4:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   883e4:	46454443 00000000 33323130 37363534     CDEF....01234567
   883f4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   88404:	0000296c 00000030                       l)..0...

0008840c <blanks.7223>:
   8840c:	20202020 20202020 20202020 20202020                     

0008841c <zeroes.7224>:
   8841c:	30303030 30303030 30303030 30303030     0000000000000000
   8842c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8843c:	00000000                                ....

00088440 <__mprec_bigtens>:
   88440:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   88450:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   88460:	7f73bf3c 75154fdd                       <.s..O.u

00088468 <__mprec_tens>:
   88468:	00000000 3ff00000 00000000 40240000     .......?......$@
   88478:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   88488:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   88498:	00000000 412e8480 00000000 416312d0     .......A......cA
   884a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   884b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   884c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   884d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   884e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   884f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   88508:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   88518:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   88528:	79d99db4 44ea7843                       ...yCx.D

00088530 <p05.6055>:
   88530:	00000005 00000019 0000007d 00000043     ........}...C...
   88540:	49534f50 00000058 0000002e              POSIX.......

0008854c <_ctype_>:
   8854c:	20202000 20202020 28282020 20282828     .         ((((( 
   8855c:	20202020 20202020 20202020 20202020                     
   8856c:	10108820 10101010 10101010 10101010      ...............
   8857c:	04040410 04040404 10040404 10101010     ................
   8858c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8859c:	01010101 01010101 01010101 10101010     ................
   885ac:	42421010 42424242 02020202 02020202     ..BBBBBB........
   885bc:	02020202 02020202 02020202 10101010     ................
   885cc:	00000020 00000000 00000000 00000000      ...............
	...

00088650 <_init>:
   88650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88652:	bf00      	nop
   88654:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88656:	bc08      	pop	{r3}
   88658:	469e      	mov	lr, r3
   8865a:	4770      	bx	lr

0008865c <__init_array_start>:
   8865c:	00085401 	.word	0x00085401

00088660 <__frame_dummy_init_array_entry>:
   88660:	00080119                                ....

00088664 <_fini>:
   88664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88666:	bf00      	nop
   88668:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8866a:	bc08      	pop	{r3}
   8866c:	469e      	mov	lr, r3
   8866e:	4770      	bx	lr

00088670 <__fini_array_start>:
   88670:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	20070198 	.word	0x20070198
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <print_menu>:
2007018c:	01010101                                         .

2007018d <rbt_id>:
2007018d:	01010101                                         .

2007018e <act_cursor_line_on_lcd>:
2007018e:	01010101                                         .

2007018f <prev_cursor_line_on_lcd>:
2007018f:	01010101                                         .

20070190 <act_cursor_line>:
20070190:	08010101                                         .

20070191 <prev_cursor_line>:
20070191:	01080101                                         .

20070192 <min_cursor_line>:
20070192:	00010801                                         .

20070193 <max_cursor_line>:
20070193:	00000108                                         .

20070194 <menu_main_column>:
20070194:	00000001                                ....

20070198 <SystemCoreClock>:
20070198:	003d0900                                ..=.

2007019c <update_dots>:
2007019c:	00000001                                ....

200701a0 <_impure_ptr>:
200701a0:	200701a8 00000000                       ... ....

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	2007103c                                <.. 

200705d4 <__malloc_av_>:
	...
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 

200709dc <__malloc_sbrk_base>:
200709dc:	ffffffff                                ....

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__global_locale>:
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00000043 00000000 00000000 00000000     C...............
	...
20070ac4:	000879c1 00087561 00000000 0008854c     .y..au......L...
20070ad4:	00088548 000883e8 000883e8 000883e8     H...............
20070ae4:	000883e8 000883e8 000883e8 000883e8     ................
20070af4:	000883e8 000883e8 ffffffff ffffffff     ................
20070b04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
