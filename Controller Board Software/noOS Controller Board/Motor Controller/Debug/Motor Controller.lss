
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009e0c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00089e0c  00089e0c  00019e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b50  20070000  00089e14  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004b4  20070b50  0008a964  00020b50  2**2
                  ALLOC
  4 .stack        00002004  20071004  0008ae18  00020b50  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b79  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001e8f8  00000000  00000000  00020bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003ea0  00000000  00000000  0003f4ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000094e0  00000000  00000000  0004336a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001040  00000000  00000000  0004c84a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f78  00000000  00000000  0004d88a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008c69  00000000  00000000  0004e802  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000141dd  00000000  00000000  0005746b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00063a39  00000000  00000000  0006b648  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000051d0  00000000  00000000  000cf084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	08 30 07 20 01 44 08 00 f9 43 08 00 f9 43 08 00     .0. .D...C...C..
   80010:	f9 43 08 00 f9 43 08 00 f9 43 08 00 00 00 00 00     .C...C...C......
	...
   8002c:	f9 43 08 00 f9 43 08 00 00 00 00 00 f9 43 08 00     .C...C.......C..
   8003c:	39 33 08 00 f9 43 08 00 f9 43 08 00 f9 43 08 00     93...C...C...C..
   8004c:	f9 43 08 00 f9 43 08 00 f9 43 08 00 f9 43 08 00     .C...C...C...C..
   8005c:	f9 43 08 00 f9 43 08 00 f9 43 08 00 00 00 00 00     .C...C...C......
   8006c:	f9 43 08 00 f9 43 08 00 f9 43 08 00 f9 43 08 00     .C...C...C...C..
	...
   80084:	f9 43 08 00 f9 43 08 00 f9 43 08 00 f9 43 08 00     .C...C...C...C..
   80094:	f9 43 08 00 b5 14 08 00 f9 43 08 00 f9 43 08 00     .C.......C...C..
   800a4:	00 00 00 00 f9 43 08 00 f9 43 08 00 29 30 08 00     .....C...C..)0..
   800b4:	f9 43 08 00 f9 43 08 00 f9 43 08 00 f9 43 08 00     .C...C...C...C..
   800c4:	f9 43 08 00 f9 43 08 00 f9 43 08 00 f9 43 08 00     .C...C...C...C..
   800d4:	f9 43 08 00 f9 43 08 00 6d 0f 08 00 f9 43 08 00     .C...C..m....C..
   800e4:	f9 43 08 00 f9 43 08 00 f9 43 08 00 f9 43 08 00     .C...C...C...C..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b50 	.word	0x20070b50
   80110:	00000000 	.word	0x00000000
   80114:	00089e14 	.word	0x00089e14

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00089e14 	.word	0x00089e14
   80154:	20070b54 	.word	0x20070b54
   80158:	00089e14 	.word	0x00089e14
   8015c:	00000000 	.word	0x00000000

00080160 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   80160:	b580      	push	{r7, lr}
   80162:	b082      	sub	sp, #8
   80164:	af00      	add	r7, sp, #0
   80166:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   80168:	6878      	ldr	r0, [r7, #4]
   8016a:	4b04      	ldr	r3, [pc, #16]	; (8017c <usart_spi_enable+0x1c>)
   8016c:	4798      	blx	r3
	usart_enable_rx(p_usart);
   8016e:	6878      	ldr	r0, [r7, #4]
   80170:	4b03      	ldr	r3, [pc, #12]	; (80180 <usart_spi_enable+0x20>)
   80172:	4798      	blx	r3
}
   80174:	bf00      	nop
   80176:	3708      	adds	r7, #8
   80178:	46bd      	mov	sp, r7
   8017a:	bd80      	pop	{r7, pc}
   8017c:	000809b5 	.word	0x000809b5
   80180:	000809fd 	.word	0x000809fd

00080184 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   80184:	b580      	push	{r7, lr}
   80186:	b082      	sub	sp, #8
   80188:	af00      	add	r7, sp, #0
   8018a:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   8018c:	6878      	ldr	r0, [r7, #4]
   8018e:	4b04      	ldr	r3, [pc, #16]	; (801a0 <usart_spi_disable+0x1c>)
   80190:	4798      	blx	r3
	usart_disable_rx(p_usart);
   80192:	6878      	ldr	r0, [r7, #4]
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <usart_spi_disable+0x20>)
   80196:	4798      	blx	r3
}
   80198:	bf00      	nop
   8019a:	3708      	adds	r7, #8
   8019c:	46bd      	mov	sp, r7
   8019e:	bd80      	pop	{r7, pc}
   801a0:	000809cd 	.word	0x000809cd
   801a4:	00080a15 	.word	0x00080a15

000801a8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801a8:	b480      	push	{r7}
   801aa:	b085      	sub	sp, #20
   801ac:	af00      	add	r7, sp, #0
   801ae:	60f8      	str	r0, [r7, #12]
   801b0:	60b9      	str	r1, [r7, #8]
   801b2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801b4:	68bb      	ldr	r3, [r7, #8]
   801b6:	2b00      	cmp	r3, #0
   801b8:	d007      	beq.n	801ca <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   801ba:	68bb      	ldr	r3, [r7, #8]
   801bc:	681a      	ldr	r2, [r3, #0]
   801be:	68fb      	ldr	r3, [r7, #12]
   801c0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   801c2:	68bb      	ldr	r3, [r7, #8]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	68fb      	ldr	r3, [r7, #12]
   801c8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   801ca:	687b      	ldr	r3, [r7, #4]
   801cc:	2b00      	cmp	r3, #0
   801ce:	d007      	beq.n	801e0 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	681a      	ldr	r2, [r3, #0]
   801d4:	68fb      	ldr	r3, [r7, #12]
   801d6:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   801d8:	687b      	ldr	r3, [r7, #4]
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	68fb      	ldr	r3, [r7, #12]
   801de:	61da      	str	r2, [r3, #28]
	}
}
   801e0:	bf00      	nop
   801e2:	3714      	adds	r7, #20
   801e4:	46bd      	mov	sp, r7
   801e6:	bc80      	pop	{r7}
   801e8:	4770      	bx	lr

000801ea <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801ea:	b480      	push	{r7}
   801ec:	b085      	sub	sp, #20
   801ee:	af00      	add	r7, sp, #0
   801f0:	60f8      	str	r0, [r7, #12]
   801f2:	60b9      	str	r1, [r7, #8]
   801f4:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801f6:	68bb      	ldr	r3, [r7, #8]
   801f8:	2b00      	cmp	r3, #0
   801fa:	d007      	beq.n	8020c <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   801fc:	68bb      	ldr	r3, [r7, #8]
   801fe:	681a      	ldr	r2, [r3, #0]
   80200:	68fb      	ldr	r3, [r7, #12]
   80202:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   80204:	68bb      	ldr	r3, [r7, #8]
   80206:	685a      	ldr	r2, [r3, #4]
   80208:	68fb      	ldr	r3, [r7, #12]
   8020a:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b00      	cmp	r3, #0
   80210:	d007      	beq.n	80222 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   80212:	687b      	ldr	r3, [r7, #4]
   80214:	681a      	ldr	r2, [r3, #0]
   80216:	68fb      	ldr	r3, [r7, #12]
   80218:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   8021a:	687b      	ldr	r3, [r7, #4]
   8021c:	685a      	ldr	r2, [r3, #4]
   8021e:	68fb      	ldr	r3, [r7, #12]
   80220:	615a      	str	r2, [r3, #20]
	}
}
   80222:	bf00      	nop
   80224:	3714      	adds	r7, #20
   80226:	46bd      	mov	sp, r7
   80228:	bc80      	pop	{r7}
   8022a:	4770      	bx	lr

0008022c <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8022c:	b480      	push	{r7}
   8022e:	b083      	sub	sp, #12
   80230:	af00      	add	r7, sp, #0
   80232:	6078      	str	r0, [r7, #4]
   80234:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   80236:	683a      	ldr	r2, [r7, #0]
   80238:	f240 1301 	movw	r3, #257	; 0x101
   8023c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8023e:	687a      	ldr	r2, [r7, #4]
   80240:	6213      	str	r3, [r2, #32]
}
   80242:	bf00      	nop
   80244:	370c      	adds	r7, #12
   80246:	46bd      	mov	sp, r7
   80248:	bc80      	pop	{r7}
   8024a:	4770      	bx	lr

0008024c <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8024c:	b480      	push	{r7}
   8024e:	b083      	sub	sp, #12
   80250:	af00      	add	r7, sp, #0
   80252:	6078      	str	r0, [r7, #4]
   80254:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   80256:	683a      	ldr	r2, [r7, #0]
   80258:	f240 2302 	movw	r3, #514	; 0x202
   8025c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8025e:	687a      	ldr	r2, [r7, #4]
   80260:	6213      	str	r3, [r2, #32]
}
   80262:	bf00      	nop
   80264:	370c      	adds	r7, #12
   80266:	46bd      	mov	sp, r7
   80268:	bc80      	pop	{r7}
   8026a:	4770      	bx	lr

0008026c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8026c:	b4b0      	push	{r4, r5, r7}
   8026e:	b091      	sub	sp, #68	; 0x44
   80270:	af00      	add	r7, sp, #0
   80272:	6078      	str	r0, [r7, #4]
   80274:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80276:	4b1b      	ldr	r3, [pc, #108]	; (802e4 <pwm_clocks_generate+0x78>)
   80278:	f107 040c 	add.w	r4, r7, #12
   8027c:	461d      	mov	r5, r3
   8027e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8028a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8028e:	2300      	movs	r3, #0
   80290:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   80294:	009b      	lsls	r3, r3, #2
   80296:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8029a:	4413      	add	r3, r2
   8029c:	f853 3c34 	ldr.w	r3, [r3, #-52]
   802a0:	683a      	ldr	r2, [r7, #0]
   802a2:	fbb2 f2f3 	udiv	r2, r2, r3
   802a6:	687b      	ldr	r3, [r7, #4]
   802a8:	fbb2 f3f3 	udiv	r3, r2, r3
   802ac:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   802b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   802b4:	d906      	bls.n	802c4 <pwm_clocks_generate+0x58>
			break;
		}
		ul_pre++;
   802b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802b8:	3301      	adds	r3, #1
   802ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   802bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802be:	2b0a      	cmp	r3, #10
   802c0:	d9e7      	bls.n	80292 <pwm_clocks_generate+0x26>
   802c2:	e000      	b.n	802c6 <pwm_clocks_generate+0x5a>
			break;
   802c4:	bf00      	nop

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   802c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802c8:	2b0a      	cmp	r3, #10
   802ca:	d804      	bhi.n	802d6 <pwm_clocks_generate+0x6a>
		return ul_div | (ul_pre << 8);
   802cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802ce:	021a      	lsls	r2, r3, #8
   802d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   802d2:	4313      	orrs	r3, r2
   802d4:	e001      	b.n	802da <pwm_clocks_generate+0x6e>
	} else {
		return PWM_INVALID_ARGUMENT;
   802d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
   802da:	4618      	mov	r0, r3
   802dc:	3744      	adds	r7, #68	; 0x44
   802de:	46bd      	mov	sp, r7
   802e0:	bcb0      	pop	{r4, r5, r7}
   802e2:	4770      	bx	lr
   802e4:	000899c4 	.word	0x000899c4

000802e8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   802e8:	b580      	push	{r7, lr}
   802ea:	b084      	sub	sp, #16
   802ec:	af00      	add	r7, sp, #0
   802ee:	6078      	str	r0, [r7, #4]
   802f0:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
   802f2:	2300      	movs	r3, #0
   802f4:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   802f6:	683b      	ldr	r3, [r7, #0]
   802f8:	681b      	ldr	r3, [r3, #0]
   802fa:	2b00      	cmp	r3, #0
   802fc:	d011      	beq.n	80322 <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   802fe:	683b      	ldr	r3, [r7, #0]
   80300:	681a      	ldr	r2, [r3, #0]
   80302:	683b      	ldr	r3, [r7, #0]
   80304:	689b      	ldr	r3, [r3, #8]
   80306:	4619      	mov	r1, r3
   80308:	4610      	mov	r0, r2
   8030a:	4b16      	ldr	r3, [pc, #88]	; (80364 <pwm_init+0x7c>)
   8030c:	4798      	blx	r3
   8030e:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
   80310:	68bb      	ldr	r3, [r7, #8]
   80312:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80316:	4293      	cmp	r3, r2
   80318:	d101      	bne.n	8031e <pwm_init+0x36>
			return result;
   8031a:	68bb      	ldr	r3, [r7, #8]
   8031c:	e01e      	b.n	8035c <pwm_init+0x74>
		}

		clock = result;
   8031e:	68bb      	ldr	r3, [r7, #8]
   80320:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80322:	683b      	ldr	r3, [r7, #0]
   80324:	685b      	ldr	r3, [r3, #4]
   80326:	2b00      	cmp	r3, #0
   80328:	d014      	beq.n	80354 <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8032a:	683b      	ldr	r3, [r7, #0]
   8032c:	685a      	ldr	r2, [r3, #4]
   8032e:	683b      	ldr	r3, [r7, #0]
   80330:	689b      	ldr	r3, [r3, #8]
   80332:	4619      	mov	r1, r3
   80334:	4610      	mov	r0, r2
   80336:	4b0b      	ldr	r3, [pc, #44]	; (80364 <pwm_init+0x7c>)
   80338:	4798      	blx	r3
   8033a:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
   8033c:	68bb      	ldr	r3, [r7, #8]
   8033e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80342:	4293      	cmp	r3, r2
   80344:	d101      	bne.n	8034a <pwm_init+0x62>
			return result;
   80346:	68bb      	ldr	r3, [r7, #8]
   80348:	e008      	b.n	8035c <pwm_init+0x74>
		}

		clock |= (result << 16);
   8034a:	68bb      	ldr	r3, [r7, #8]
   8034c:	041b      	lsls	r3, r3, #16
   8034e:	68fa      	ldr	r2, [r7, #12]
   80350:	4313      	orrs	r3, r2
   80352:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80354:	687b      	ldr	r3, [r7, #4]
   80356:	68fa      	ldr	r2, [r7, #12]
   80358:	601a      	str	r2, [r3, #0]
#endif
	return 0;
   8035a:	2300      	movs	r3, #0
}
   8035c:	4618      	mov	r0, r3
   8035e:	3710      	adds	r7, #16
   80360:	46bd      	mov	sp, r7
   80362:	bd80      	pop	{r7, pc}
   80364:	0008026d 	.word	0x0008026d

00080368 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80368:	b480      	push	{r7}
   8036a:	b087      	sub	sp, #28
   8036c:	af00      	add	r7, sp, #0
   8036e:	6078      	str	r0, [r7, #4]
   80370:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
   80372:	2300      	movs	r3, #0
   80374:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
   80376:	683b      	ldr	r3, [r7, #0]
   80378:	681b      	ldr	r3, [r3, #0]
   8037a:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8037c:	683b      	ldr	r3, [r7, #0]
   8037e:	685b      	ldr	r3, [r3, #4]
   80380:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
   80384:	683a      	ldr	r2, [r7, #0]
   80386:	7a92      	ldrb	r2, [r2, #10]
   80388:	0252      	lsls	r2, r2, #9
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8038a:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   8038c:	683a      	ldr	r2, [r7, #0]
   8038e:	8a92      	ldrh	r2, [r2, #20]
			(p_channel->polarity << 9) |
   80390:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
   80392:	683a      	ldr	r2, [r7, #0]
   80394:	7d92      	ldrb	r2, [r2, #22]
   80396:	0412      	lsls	r2, r2, #16
			(p_channel->counter_event) |
   80398:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
   8039a:	683a      	ldr	r2, [r7, #0]
   8039c:	7dd2      	ldrb	r2, [r2, #23]
   8039e:	0452      	lsls	r2, r2, #17
			(p_channel->b_deadtime_generator << 16) |
   803a0:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
   803a2:	683a      	ldr	r2, [r7, #0]
   803a4:	7e12      	ldrb	r2, [r2, #24]
   803a6:	0492      	lsls	r2, r2, #18
			(p_channel->b_pwmh_output_inverted << 17) |
   803a8:	4313      	orrs	r3, r2
#endif
			(p_channel->alignment);
   803aa:	683a      	ldr	r2, [r7, #0]
   803ac:	8912      	ldrh	r2, [r2, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803ae:	4313      	orrs	r3, r2
   803b0:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   803b2:	687a      	ldr	r2, [r7, #4]
   803b4:	693b      	ldr	r3, [r7, #16]
   803b6:	3310      	adds	r3, #16
   803b8:	015b      	lsls	r3, r3, #5
   803ba:	4413      	add	r3, r2
   803bc:	697a      	ldr	r2, [r7, #20]
   803be:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   803c0:	683b      	ldr	r3, [r7, #0]
   803c2:	68da      	ldr	r2, [r3, #12]
   803c4:	6879      	ldr	r1, [r7, #4]
   803c6:	693b      	ldr	r3, [r7, #16]
   803c8:	3310      	adds	r3, #16
   803ca:	015b      	lsls	r3, r3, #5
   803cc:	440b      	add	r3, r1
   803ce:	3304      	adds	r3, #4
   803d0:	601a      	str	r2, [r3, #0]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   803d2:	683b      	ldr	r3, [r7, #0]
   803d4:	691a      	ldr	r2, [r3, #16]
   803d6:	6879      	ldr	r1, [r7, #4]
   803d8:	693b      	ldr	r3, [r7, #16]
   803da:	015b      	lsls	r3, r3, #5
   803dc:	440b      	add	r3, r1
   803de:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   803e2:	601a      	str	r2, [r3, #0]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   803e4:	683b      	ldr	r3, [r7, #0]
   803e6:	7d9b      	ldrb	r3, [r3, #22]
   803e8:	2b00      	cmp	r3, #0
   803ea:	d00d      	beq.n	80408 <pwm_channel_init+0xa0>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   803ec:	683b      	ldr	r3, [r7, #0]
   803ee:	8b9b      	ldrh	r3, [r3, #28]
   803f0:	041b      	lsls	r3, r3, #16
   803f2:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   803f4:	683b      	ldr	r3, [r7, #0]
   803f6:	8b5b      	ldrh	r3, [r3, #26]
   803f8:	431a      	orrs	r2, r3
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   803fa:	6879      	ldr	r1, [r7, #4]
   803fc:	693b      	ldr	r3, [r7, #16]
   803fe:	015b      	lsls	r3, r3, #5
   80400:	440b      	add	r3, r1
   80402:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80406:	601a      	str	r2, [r3, #0]
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80408:	687b      	ldr	r3, [r7, #4]
   8040a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   8040c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   80410:	693b      	ldr	r3, [r7, #16]
   80412:	fa01 f303 	lsl.w	r3, r1, r3
   80416:	43db      	mvns	r3, r3
   80418:	4013      	ands	r3, r2
   8041a:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   8041c:	683b      	ldr	r3, [r7, #0]
   8041e:	7f9b      	ldrb	r3, [r3, #30]
   80420:	461a      	mov	r2, r3
   80422:	693b      	ldr	r3, [r7, #16]
   80424:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80426:	683b      	ldr	r3, [r7, #0]
   80428:	7fdb      	ldrb	r3, [r3, #31]
   8042a:	4619      	mov	r1, r3
   8042c:	693b      	ldr	r3, [r7, #16]
   8042e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   80432:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80434:	4313      	orrs	r3, r2
   80436:	461a      	mov	r2, r3
   80438:	697b      	ldr	r3, [r7, #20]
   8043a:	4313      	orrs	r3, r2
   8043c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OS = tmp_reg;
   8043e:	687b      	ldr	r3, [r7, #4]
   80440:	697a      	ldr	r2, [r7, #20]
   80442:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80444:	687b      	ldr	r3, [r7, #4]
   80446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   8044c:	693b      	ldr	r3, [r7, #16]
   8044e:	fa01 f303 	lsl.w	r3, r1, r3
   80452:	43db      	mvns	r3, r3
   80454:	4013      	ands	r3, r2
   80456:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80458:	683b      	ldr	r3, [r7, #0]
   8045a:	f893 3020 	ldrb.w	r3, [r3, #32]
   8045e:	461a      	mov	r2, r3
   80460:	693b      	ldr	r3, [r7, #16]
   80462:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80464:	683b      	ldr	r3, [r7, #0]
   80466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   8046a:	4619      	mov	r1, r3
   8046c:	693b      	ldr	r3, [r7, #16]
   8046e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   80472:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80474:	4313      	orrs	r3, r2
   80476:	461a      	mov	r2, r3
   80478:	697b      	ldr	r3, [r7, #20]
   8047a:	4313      	orrs	r3, r2
   8047c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OOV = tmp_reg;
   8047e:	687b      	ldr	r3, [r7, #4]
   80480:	697a      	ldr	r2, [r7, #20]
   80482:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80484:	2201      	movs	r2, #1
   80486:	693b      	ldr	r3, [r7, #16]
   80488:	fa02 f303 	lsl.w	r3, r2, r3
   8048c:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
   8048e:	683b      	ldr	r3, [r7, #0]
   80490:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   80494:	2b00      	cmp	r3, #0
   80496:	d006      	beq.n	804a6 <pwm_channel_init+0x13e>
		p_pwm->PWM_SCM |= channel;
   80498:	687b      	ldr	r3, [r7, #4]
   8049a:	6a1a      	ldr	r2, [r3, #32]
   8049c:	68fb      	ldr	r3, [r7, #12]
   8049e:	431a      	orrs	r2, r3
   804a0:	687b      	ldr	r3, [r7, #4]
   804a2:	621a      	str	r2, [r3, #32]
   804a4:	e006      	b.n	804b4 <pwm_channel_init+0x14c>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   804a6:	687b      	ldr	r3, [r7, #4]
   804a8:	6a1a      	ldr	r2, [r3, #32]
   804aa:	68fb      	ldr	r3, [r7, #12]
   804ac:	43db      	mvns	r3, r3
   804ae:	401a      	ands	r2, r3
   804b0:	687b      	ldr	r3, [r7, #4]
   804b2:	621a      	str	r2, [r3, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   804b4:	683b      	ldr	r3, [r7, #0]
   804b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   804ba:	2b01      	cmp	r3, #1
   804bc:	d109      	bne.n	804d2 <pwm_channel_init+0x16a>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   804be:	687b      	ldr	r3, [r7, #4]
   804c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804c2:	2101      	movs	r1, #1
   804c4:	693a      	ldr	r2, [r7, #16]
   804c6:	fa01 f202 	lsl.w	r2, r1, r2
   804ca:	431a      	orrs	r2, r3
   804cc:	687b      	ldr	r3, [r7, #4]
   804ce:	669a      	str	r2, [r3, #104]	; 0x68
   804d0:	e009      	b.n	804e6 <pwm_channel_init+0x17e>
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   804d2:	687b      	ldr	r3, [r7, #4]
   804d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804d6:	2101      	movs	r1, #1
   804d8:	693a      	ldr	r2, [r7, #16]
   804da:	fa01 f202 	lsl.w	r2, r1, r2
   804de:	43d2      	mvns	r2, r2
   804e0:	401a      	ands	r2, r3
   804e2:	687b      	ldr	r3, [r7, #4]
   804e4:	669a      	str	r2, [r3, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   804e6:	683b      	ldr	r3, [r7, #0]
   804e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   804ec:	2b01      	cmp	r3, #1
   804ee:	d10a      	bne.n	80506 <pwm_channel_init+0x19e>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   804f0:	687b      	ldr	r3, [r7, #4]
   804f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804f4:	2101      	movs	r1, #1
   804f6:	693a      	ldr	r2, [r7, #16]
   804f8:	fa01 f202 	lsl.w	r2, r1, r2
   804fc:	0412      	lsls	r2, r2, #16
   804fe:	431a      	orrs	r2, r3
   80500:	687b      	ldr	r3, [r7, #4]
   80502:	669a      	str	r2, [r3, #104]	; 0x68
   80504:	e00a      	b.n	8051c <pwm_channel_init+0x1b4>
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80506:	687b      	ldr	r3, [r7, #4]
   80508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8050a:	2101      	movs	r1, #1
   8050c:	693a      	ldr	r2, [r7, #16]
   8050e:	fa01 f202 	lsl.w	r2, r1, r2
   80512:	0412      	lsls	r2, r2, #16
   80514:	43d2      	mvns	r2, r2
   80516:	401a      	ands	r2, r3
   80518:	687b      	ldr	r3, [r7, #4]
   8051a:	669a      	str	r2, [r3, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
   8051c:	2300      	movs	r3, #0
   8051e:	60bb      	str	r3, [r7, #8]
#if (SAM3XA)
	if (ch_num < 4) {
   80520:	693b      	ldr	r3, [r7, #16]
   80522:	2b03      	cmp	r3, #3
   80524:	d81d      	bhi.n	80562 <pwm_channel_init+0x1fa>
		ch_num *= 8;
   80526:	693b      	ldr	r3, [r7, #16]
   80528:	00db      	lsls	r3, r3, #3
   8052a:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE1;
   8052c:	687b      	ldr	r3, [r7, #4]
   8052e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   80530:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80532:	22ff      	movs	r2, #255	; 0xff
   80534:	693b      	ldr	r3, [r7, #16]
   80536:	fa02 f303 	lsl.w	r3, r2, r3
   8053a:	43db      	mvns	r3, r3
   8053c:	461a      	mov	r2, r3
   8053e:	68bb      	ldr	r3, [r7, #8]
   80540:	4013      	ands	r3, r2
   80542:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80544:	683b      	ldr	r3, [r7, #0]
   80546:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   8054a:	461a      	mov	r2, r3
   8054c:	693b      	ldr	r3, [r7, #16]
   8054e:	fa02 f303 	lsl.w	r3, r2, r3
   80552:	461a      	mov	r2, r3
   80554:	68bb      	ldr	r3, [r7, #8]
   80556:	4313      	orrs	r3, r2
   80558:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8055a:	687b      	ldr	r3, [r7, #4]
   8055c:	68ba      	ldr	r2, [r7, #8]
   8055e:	66da      	str	r2, [r3, #108]	; 0x6c
   80560:	e01f      	b.n	805a2 <pwm_channel_init+0x23a>
	} else {
		ch_num -= 4;
   80562:	693b      	ldr	r3, [r7, #16]
   80564:	3b04      	subs	r3, #4
   80566:	613b      	str	r3, [r7, #16]
		ch_num *= 8;
   80568:	693b      	ldr	r3, [r7, #16]
   8056a:	00db      	lsls	r3, r3, #3
   8056c:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE2;
   8056e:	687b      	ldr	r3, [r7, #4]
   80570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80572:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80574:	22ff      	movs	r2, #255	; 0xff
   80576:	693b      	ldr	r3, [r7, #16]
   80578:	fa02 f303 	lsl.w	r3, r2, r3
   8057c:	43db      	mvns	r3, r3
   8057e:	461a      	mov	r2, r3
   80580:	68bb      	ldr	r3, [r7, #8]
   80582:	4013      	ands	r3, r2
   80584:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80586:	683b      	ldr	r3, [r7, #0]
   80588:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   8058c:	461a      	mov	r2, r3
   8058e:	693b      	ldr	r3, [r7, #16]
   80590:	fa02 f303 	lsl.w	r3, r2, r3
   80594:	461a      	mov	r2, r3
   80596:	68bb      	ldr	r3, [r7, #8]
   80598:	4313      	orrs	r3, r2
   8059a:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	68ba      	ldr	r2, [r7, #8]
   805a0:	671a      	str	r2, [r3, #112]	; 0x70
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
   805a2:	2300      	movs	r3, #0
}
   805a4:	4618      	mov	r0, r3
   805a6:	371c      	adds	r7, #28
   805a8:	46bd      	mov	sp, r7
   805aa:	bc80      	pop	{r7}
   805ac:	4770      	bx	lr

000805ae <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   805ae:	b480      	push	{r7}
   805b0:	b087      	sub	sp, #28
   805b2:	af00      	add	r7, sp, #0
   805b4:	60f8      	str	r0, [r7, #12]
   805b6:	60b9      	str	r1, [r7, #8]
   805b8:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
   805ba:	68bb      	ldr	r3, [r7, #8]
   805bc:	681b      	ldr	r3, [r3, #0]
   805be:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   805c0:	68bb      	ldr	r3, [r7, #8]
   805c2:	691a      	ldr	r2, [r3, #16]
   805c4:	687b      	ldr	r3, [r7, #4]
   805c6:	429a      	cmp	r2, r3
   805c8:	d202      	bcs.n	805d0 <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
   805ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   805ce:	e00b      	b.n	805e8 <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   805d0:	68bb      	ldr	r3, [r7, #8]
   805d2:	687a      	ldr	r2, [r7, #4]
   805d4:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   805d6:	68fa      	ldr	r2, [r7, #12]
   805d8:	697b      	ldr	r3, [r7, #20]
   805da:	015b      	lsls	r3, r3, #5
   805dc:	4413      	add	r3, r2
   805de:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805e2:	687a      	ldr	r2, [r7, #4]
   805e4:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
   805e6:	2300      	movs	r3, #0
}
   805e8:	4618      	mov	r0, r3
   805ea:	371c      	adds	r7, #28
   805ec:	46bd      	mov	sp, r7
   805ee:	bc80      	pop	{r7}
   805f0:	4770      	bx	lr

000805f2 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
   805f2:	b480      	push	{r7}
   805f4:	b083      	sub	sp, #12
   805f6:	af00      	add	r7, sp, #0
   805f8:	6078      	str	r0, [r7, #4]
   805fa:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
   805fc:	2201      	movs	r2, #1
   805fe:	683b      	ldr	r3, [r7, #0]
   80600:	fa02 f303 	lsl.w	r3, r2, r3
   80604:	461a      	mov	r2, r3
   80606:	687b      	ldr	r3, [r7, #4]
   80608:	605a      	str	r2, [r3, #4]
}
   8060a:	bf00      	nop
   8060c:	370c      	adds	r7, #12
   8060e:	46bd      	mov	sp, r7
   80610:	bc80      	pop	{r7}
   80612:	4770      	bx	lr

00080614 <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
   80614:	b480      	push	{r7}
   80616:	b083      	sub	sp, #12
   80618:	af00      	add	r7, sp, #0
   8061a:	6078      	str	r0, [r7, #4]
   8061c:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
   8061e:	2201      	movs	r2, #1
   80620:	683b      	ldr	r3, [r7, #0]
   80622:	fa02 f303 	lsl.w	r3, r2, r3
   80626:	461a      	mov	r2, r3
   80628:	687b      	ldr	r3, [r7, #4]
   8062a:	609a      	str	r2, [r3, #8]
}
   8062c:	bf00      	nop
   8062e:	370c      	adds	r7, #12
   80630:	46bd      	mov	sp, r7
   80632:	bc80      	pop	{r7}
   80634:	4770      	bx	lr

00080636 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   80636:	b480      	push	{r7}
   80638:	b083      	sub	sp, #12
   8063a:	af00      	add	r7, sp, #0
   8063c:	6078      	str	r0, [r7, #4]
   8063e:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   80640:	687b      	ldr	r3, [r7, #4]
   80642:	685b      	ldr	r3, [r3, #4]
   80644:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   80648:	687b      	ldr	r3, [r7, #4]
   8064a:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   8064c:	687b      	ldr	r3, [r7, #4]
   8064e:	685a      	ldr	r2, [r3, #4]
   80650:	683b      	ldr	r3, [r7, #0]
   80652:	041b      	lsls	r3, r3, #16
   80654:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80658:	431a      	orrs	r2, r3
   8065a:	687b      	ldr	r3, [r7, #4]
   8065c:	605a      	str	r2, [r3, #4]
}
   8065e:	bf00      	nop
   80660:	370c      	adds	r7, #12
   80662:	46bd      	mov	sp, r7
   80664:	bc80      	pop	{r7}
   80666:	4770      	bx	lr

00080668 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   80668:	b480      	push	{r7}
   8066a:	b085      	sub	sp, #20
   8066c:	af00      	add	r7, sp, #0
   8066e:	60f8      	str	r0, [r7, #12]
   80670:	60b9      	str	r1, [r7, #8]
   80672:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   80674:	687b      	ldr	r3, [r7, #4]
   80676:	2b00      	cmp	r3, #0
   80678:	d00c      	beq.n	80694 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   8067a:	68fb      	ldr	r3, [r7, #12]
   8067c:	68ba      	ldr	r2, [r7, #8]
   8067e:	320c      	adds	r2, #12
   80680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80684:	f043 0101 	orr.w	r1, r3, #1
   80688:	68fb      	ldr	r3, [r7, #12]
   8068a:	68ba      	ldr	r2, [r7, #8]
   8068c:	320c      	adds	r2, #12
   8068e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
   80692:	e00b      	b.n	806ac <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   80694:	68fb      	ldr	r3, [r7, #12]
   80696:	68ba      	ldr	r2, [r7, #8]
   80698:	320c      	adds	r2, #12
   8069a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8069e:	f023 0101 	bic.w	r1, r3, #1
   806a2:	68fb      	ldr	r3, [r7, #12]
   806a4:	68ba      	ldr	r2, [r7, #8]
   806a6:	320c      	adds	r2, #12
   806a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   806ac:	bf00      	nop
   806ae:	3714      	adds	r7, #20
   806b0:	46bd      	mov	sp, r7
   806b2:	bc80      	pop	{r7}
   806b4:	4770      	bx	lr

000806b6 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   806b6:	b480      	push	{r7}
   806b8:	b085      	sub	sp, #20
   806ba:	af00      	add	r7, sp, #0
   806bc:	60f8      	str	r0, [r7, #12]
   806be:	60b9      	str	r1, [r7, #8]
   806c0:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   806c2:	687b      	ldr	r3, [r7, #4]
   806c4:	2b00      	cmp	r3, #0
   806c6:	d00c      	beq.n	806e2 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   806c8:	68fb      	ldr	r3, [r7, #12]
   806ca:	68ba      	ldr	r2, [r7, #8]
   806cc:	320c      	adds	r2, #12
   806ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   806d2:	f043 0102 	orr.w	r1, r3, #2
   806d6:	68fb      	ldr	r3, [r7, #12]
   806d8:	68ba      	ldr	r2, [r7, #8]
   806da:	320c      	adds	r2, #12
   806dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
   806e0:	e00b      	b.n	806fa <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   806e2:	68fb      	ldr	r3, [r7, #12]
   806e4:	68ba      	ldr	r2, [r7, #8]
   806e6:	320c      	adds	r2, #12
   806e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   806ec:	f023 0102 	bic.w	r1, r3, #2
   806f0:	68fb      	ldr	r3, [r7, #12]
   806f2:	68ba      	ldr	r2, [r7, #8]
   806f4:	320c      	adds	r2, #12
   806f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   806fa:	bf00      	nop
   806fc:	3714      	adds	r7, #20
   806fe:	46bd      	mov	sp, r7
   80700:	bc80      	pop	{r7}
   80702:	4770      	bx	lr

00080704 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80704:	b480      	push	{r7}
   80706:	b085      	sub	sp, #20
   80708:	af00      	add	r7, sp, #0
   8070a:	60f8      	str	r0, [r7, #12]
   8070c:	60b9      	str	r1, [r7, #8]
   8070e:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   80710:	68fb      	ldr	r3, [r7, #12]
   80712:	68ba      	ldr	r2, [r7, #8]
   80714:	320c      	adds	r2, #12
   80716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8071a:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   8071e:	68fb      	ldr	r3, [r7, #12]
   80720:	68ba      	ldr	r2, [r7, #8]
   80722:	320c      	adds	r2, #12
   80724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80728:	68fb      	ldr	r3, [r7, #12]
   8072a:	68ba      	ldr	r2, [r7, #8]
   8072c:	320c      	adds	r2, #12
   8072e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   80732:	687b      	ldr	r3, [r7, #4]
   80734:	ea42 0103 	orr.w	r1, r2, r3
   80738:	68fb      	ldr	r3, [r7, #12]
   8073a:	68ba      	ldr	r2, [r7, #8]
   8073c:	320c      	adds	r2, #12
   8073e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80742:	bf00      	nop
   80744:	3714      	adds	r7, #20
   80746:	46bd      	mov	sp, r7
   80748:	bc80      	pop	{r7}
   8074a:	4770      	bx	lr

0008074c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   8074c:	b480      	push	{r7}
   8074e:	b087      	sub	sp, #28
   80750:	af00      	add	r7, sp, #0
   80752:	60f8      	str	r0, [r7, #12]
   80754:	60b9      	str	r1, [r7, #8]
   80756:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80758:	68fa      	ldr	r2, [r7, #12]
   8075a:	68bb      	ldr	r3, [r7, #8]
   8075c:	019b      	lsls	r3, r3, #6
   8075e:	4413      	add	r3, r2
   80760:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80762:	697b      	ldr	r3, [r7, #20]
   80764:	2202      	movs	r2, #2
   80766:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80768:	697b      	ldr	r3, [r7, #20]
   8076a:	f04f 32ff 	mov.w	r2, #4294967295
   8076e:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80770:	697b      	ldr	r3, [r7, #20]
   80772:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80774:	697b      	ldr	r3, [r7, #20]
   80776:	687a      	ldr	r2, [r7, #4]
   80778:	605a      	str	r2, [r3, #4]
}
   8077a:	bf00      	nop
   8077c:	371c      	adds	r7, #28
   8077e:	46bd      	mov	sp, r7
   80780:	bc80      	pop	{r7}
   80782:	4770      	bx	lr

00080784 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
   80784:	b480      	push	{r7}
   80786:	b083      	sub	sp, #12
   80788:	af00      	add	r7, sp, #0
   8078a:	6078      	str	r0, [r7, #4]
   8078c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8078e:	687a      	ldr	r2, [r7, #4]
   80790:	683b      	ldr	r3, [r7, #0]
   80792:	019b      	lsls	r3, r3, #6
   80794:	4413      	add	r3, r2
   80796:	2205      	movs	r2, #5
   80798:	601a      	str	r2, [r3, #0]
}
   8079a:	bf00      	nop
   8079c:	370c      	adds	r7, #12
   8079e:	46bd      	mov	sp, r7
   807a0:	bc80      	pop	{r7}
   807a2:	4770      	bx	lr

000807a4 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
   807a4:	b480      	push	{r7}
   807a6:	b085      	sub	sp, #20
   807a8:	af00      	add	r7, sp, #0
   807aa:	60f8      	str	r0, [r7, #12]
   807ac:	60b9      	str	r1, [r7, #8]
   807ae:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   807b0:	68fa      	ldr	r2, [r7, #12]
   807b2:	68bb      	ldr	r3, [r7, #8]
   807b4:	019b      	lsls	r3, r3, #6
   807b6:	4413      	add	r3, r2
   807b8:	331c      	adds	r3, #28
   807ba:	687a      	ldr	r2, [r7, #4]
   807bc:	601a      	str	r2, [r3, #0]
}
   807be:	bf00      	nop
   807c0:	3714      	adds	r7, #20
   807c2:	46bd      	mov	sp, r7
   807c4:	bc80      	pop	{r7}
   807c6:	4770      	bx	lr

000807c8 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
   807c8:	b480      	push	{r7}
   807ca:	b087      	sub	sp, #28
   807cc:	af00      	add	r7, sp, #0
   807ce:	60f8      	str	r0, [r7, #12]
   807d0:	60b9      	str	r1, [r7, #8]
   807d2:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   807d4:	68fa      	ldr	r2, [r7, #12]
   807d6:	68bb      	ldr	r3, [r7, #8]
   807d8:	019b      	lsls	r3, r3, #6
   807da:	4413      	add	r3, r2
   807dc:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   807de:	697b      	ldr	r3, [r7, #20]
   807e0:	687a      	ldr	r2, [r7, #4]
   807e2:	625a      	str	r2, [r3, #36]	; 0x24
}
   807e4:	bf00      	nop
   807e6:	371c      	adds	r7, #28
   807e8:	46bd      	mov	sp, r7
   807ea:	bc80      	pop	{r7}
   807ec:	4770      	bx	lr

000807ee <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
   807ee:	b480      	push	{r7}
   807f0:	b085      	sub	sp, #20
   807f2:	af00      	add	r7, sp, #0
   807f4:	6078      	str	r0, [r7, #4]
   807f6:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   807f8:	687a      	ldr	r2, [r7, #4]
   807fa:	683b      	ldr	r3, [r7, #0]
   807fc:	019b      	lsls	r3, r3, #6
   807fe:	4413      	add	r3, r2
   80800:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   80802:	68fb      	ldr	r3, [r7, #12]
   80804:	6a1b      	ldr	r3, [r3, #32]
}
   80806:	4618      	mov	r0, r3
   80808:	3714      	adds	r7, #20
   8080a:	46bd      	mov	sp, r7
   8080c:	bc80      	pop	{r7}
   8080e:	4770      	bx	lr

00080810 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   80810:	b480      	push	{r7}
   80812:	b087      	sub	sp, #28
   80814:	af00      	add	r7, sp, #0
   80816:	60f8      	str	r0, [r7, #12]
   80818:	60b9      	str	r1, [r7, #8]
   8081a:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   8081c:	68bb      	ldr	r3, [r7, #8]
   8081e:	085a      	lsrs	r2, r3, #1
   80820:	687b      	ldr	r3, [r7, #4]
   80822:	441a      	add	r2, r3
   80824:	68bb      	ldr	r3, [r7, #8]
   80826:	fbb2 f3f3 	udiv	r3, r2, r3
   8082a:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   8082c:	697b      	ldr	r3, [r7, #20]
   8082e:	2b03      	cmp	r3, #3
   80830:	d903      	bls.n	8083a <usart_set_spi_master_baudrate+0x2a>
   80832:	697b      	ldr	r3, [r7, #20]
   80834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   80838:	d301      	bcc.n	8083e <usart_set_spi_master_baudrate+0x2e>
		return 1;
   8083a:	2301      	movs	r3, #1
   8083c:	e003      	b.n	80846 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   8083e:	68fb      	ldr	r3, [r7, #12]
   80840:	697a      	ldr	r2, [r7, #20]
   80842:	621a      	str	r2, [r3, #32]

	return 0;
   80844:	2300      	movs	r3, #0
}
   80846:	4618      	mov	r0, r3
   80848:	371c      	adds	r7, #28
   8084a:	46bd      	mov	sp, r7
   8084c:	bc80      	pop	{r7}
   8084e:	4770      	bx	lr

00080850 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   80850:	b580      	push	{r7, lr}
   80852:	b082      	sub	sp, #8
   80854:	af00      	add	r7, sp, #0
   80856:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   80858:	6878      	ldr	r0, [r7, #4]
   8085a:	4b0d      	ldr	r3, [pc, #52]	; (80890 <usart_reset+0x40>)
   8085c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8085e:	687b      	ldr	r3, [r7, #4]
   80860:	2200      	movs	r2, #0
   80862:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   80864:	687b      	ldr	r3, [r7, #4]
   80866:	2200      	movs	r2, #0
   80868:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8086a:	687b      	ldr	r3, [r7, #4]
   8086c:	2200      	movs	r2, #0
   8086e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   80870:	6878      	ldr	r0, [r7, #4]
   80872:	4b08      	ldr	r3, [pc, #32]	; (80894 <usart_reset+0x44>)
   80874:	4798      	blx	r3
	usart_reset_rx(p_usart);
   80876:	6878      	ldr	r0, [r7, #4]
   80878:	4b07      	ldr	r3, [pc, #28]	; (80898 <usart_reset+0x48>)
   8087a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   8087c:	6878      	ldr	r0, [r7, #4]
   8087e:	4b07      	ldr	r3, [pc, #28]	; (8089c <usart_reset+0x4c>)
   80880:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   80882:	6878      	ldr	r0, [r7, #4]
   80884:	4b06      	ldr	r3, [pc, #24]	; (808a0 <usart_reset+0x50>)
   80886:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   80888:	bf00      	nop
   8088a:	3708      	adds	r7, #8
   8088c:	46bd      	mov	sp, r7
   8088e:	bd80      	pop	{r7, pc}
   80890:	00080aad 	.word	0x00080aad
   80894:	000809e5 	.word	0x000809e5
   80898:	00080a2d 	.word	0x00080a2d
   8089c:	00080a45 	.word	0x00080a45
   808a0:	00080a5f 	.word	0x00080a5f

000808a4 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   808a4:	b580      	push	{r7, lr}
   808a6:	b084      	sub	sp, #16
   808a8:	af00      	add	r7, sp, #0
   808aa:	60f8      	str	r0, [r7, #12]
   808ac:	60b9      	str	r1, [r7, #8]
   808ae:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   808b0:	68f8      	ldr	r0, [r7, #12]
   808b2:	4b3d      	ldr	r3, [pc, #244]	; (809a8 <usart_init_spi_master+0x104>)
   808b4:	4798      	blx	r3

	ul_reg_val = 0;
   808b6:	4b3d      	ldr	r3, [pc, #244]	; (809ac <usart_init_spi_master+0x108>)
   808b8:	2200      	movs	r2, #0
   808ba:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   808bc:	68bb      	ldr	r3, [r7, #8]
   808be:	2b00      	cmp	r3, #0
   808c0:	d00d      	beq.n	808de <usart_init_spi_master+0x3a>
   808c2:	68bb      	ldr	r3, [r7, #8]
   808c4:	689b      	ldr	r3, [r3, #8]
   808c6:	2b03      	cmp	r3, #3
   808c8:	d809      	bhi.n	808de <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   808ca:	68bb      	ldr	r3, [r7, #8]
   808cc:	681b      	ldr	r3, [r3, #0]
   808ce:	687a      	ldr	r2, [r7, #4]
   808d0:	4619      	mov	r1, r3
   808d2:	68f8      	ldr	r0, [r7, #12]
   808d4:	4b36      	ldr	r3, [pc, #216]	; (809b0 <usart_init_spi_master+0x10c>)
   808d6:	4798      	blx	r3
   808d8:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   808da:	2b00      	cmp	r3, #0
   808dc:	d001      	beq.n	808e2 <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   808de:	2301      	movs	r3, #1
   808e0:	e05d      	b.n	8099e <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   808e2:	68bb      	ldr	r3, [r7, #8]
   808e4:	685a      	ldr	r2, [r3, #4]
   808e6:	4b31      	ldr	r3, [pc, #196]	; (809ac <usart_init_spi_master+0x108>)
   808e8:	681b      	ldr	r3, [r3, #0]
   808ea:	4313      	orrs	r3, r2
   808ec:	4a2f      	ldr	r2, [pc, #188]	; (809ac <usart_init_spi_master+0x108>)
   808ee:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   808f0:	68bb      	ldr	r3, [r7, #8]
   808f2:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   808f4:	4b2d      	ldr	r3, [pc, #180]	; (809ac <usart_init_spi_master+0x108>)
   808f6:	681b      	ldr	r3, [r3, #0]
   808f8:	4313      	orrs	r3, r2
   808fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   808fe:	f043 030e 	orr.w	r3, r3, #14
   80902:	4a2a      	ldr	r2, [pc, #168]	; (809ac <usart_init_spi_master+0x108>)
   80904:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   80906:	68bb      	ldr	r3, [r7, #8]
   80908:	689b      	ldr	r3, [r3, #8]
   8090a:	2b03      	cmp	r3, #3
   8090c:	d83e      	bhi.n	8098c <usart_init_spi_master+0xe8>
   8090e:	a201      	add	r2, pc, #4	; (adr r2, 80914 <usart_init_spi_master+0x70>)
   80910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80914:	00080925 	.word	0x00080925
   80918:	0008093f 	.word	0x0008093f
   8091c:	00080959 	.word	0x00080959
   80920:	00080973 	.word	0x00080973
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   80924:	4b21      	ldr	r3, [pc, #132]	; (809ac <usart_init_spi_master+0x108>)
   80926:	681b      	ldr	r3, [r3, #0]
   80928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8092c:	4a1f      	ldr	r2, [pc, #124]	; (809ac <usart_init_spi_master+0x108>)
   8092e:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   80930:	4b1e      	ldr	r3, [pc, #120]	; (809ac <usart_init_spi_master+0x108>)
   80932:	681b      	ldr	r3, [r3, #0]
   80934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80938:	4a1c      	ldr	r2, [pc, #112]	; (809ac <usart_init_spi_master+0x108>)
   8093a:	6013      	str	r3, [r2, #0]
		break;
   8093c:	e027      	b.n	8098e <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8093e:	4b1b      	ldr	r3, [pc, #108]	; (809ac <usart_init_spi_master+0x108>)
   80940:	681b      	ldr	r3, [r3, #0]
   80942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80946:	4a19      	ldr	r2, [pc, #100]	; (809ac <usart_init_spi_master+0x108>)
   80948:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8094a:	4b18      	ldr	r3, [pc, #96]	; (809ac <usart_init_spi_master+0x108>)
   8094c:	681b      	ldr	r3, [r3, #0]
   8094e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80952:	4a16      	ldr	r2, [pc, #88]	; (809ac <usart_init_spi_master+0x108>)
   80954:	6013      	str	r3, [r2, #0]
		break;
   80956:	e01a      	b.n	8098e <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   80958:	4b14      	ldr	r3, [pc, #80]	; (809ac <usart_init_spi_master+0x108>)
   8095a:	681b      	ldr	r3, [r3, #0]
   8095c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80960:	4a12      	ldr	r2, [pc, #72]	; (809ac <usart_init_spi_master+0x108>)
   80962:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   80964:	4b11      	ldr	r3, [pc, #68]	; (809ac <usart_init_spi_master+0x108>)
   80966:	681b      	ldr	r3, [r3, #0]
   80968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8096c:	4a0f      	ldr	r2, [pc, #60]	; (809ac <usart_init_spi_master+0x108>)
   8096e:	6013      	str	r3, [r2, #0]
		break;
   80970:	e00d      	b.n	8098e <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   80972:	4b0e      	ldr	r3, [pc, #56]	; (809ac <usart_init_spi_master+0x108>)
   80974:	681b      	ldr	r3, [r3, #0]
   80976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8097a:	4a0c      	ldr	r2, [pc, #48]	; (809ac <usart_init_spi_master+0x108>)
   8097c:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8097e:	4b0b      	ldr	r3, [pc, #44]	; (809ac <usart_init_spi_master+0x108>)
   80980:	681b      	ldr	r3, [r3, #0]
   80982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80986:	4a09      	ldr	r2, [pc, #36]	; (809ac <usart_init_spi_master+0x108>)
   80988:	6013      	str	r3, [r2, #0]
		break;
   8098a:	e000      	b.n	8098e <usart_init_spi_master+0xea>

	default:
		break;
   8098c:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   8098e:	68fb      	ldr	r3, [r7, #12]
   80990:	685a      	ldr	r2, [r3, #4]
   80992:	4b06      	ldr	r3, [pc, #24]	; (809ac <usart_init_spi_master+0x108>)
   80994:	681b      	ldr	r3, [r3, #0]
   80996:	431a      	orrs	r2, r3
   80998:	68fb      	ldr	r3, [r7, #12]
   8099a:	605a      	str	r2, [r3, #4]

	return 0;
   8099c:	2300      	movs	r3, #0
}
   8099e:	4618      	mov	r0, r3
   809a0:	3710      	adds	r7, #16
   809a2:	46bd      	mov	sp, r7
   809a4:	bd80      	pop	{r7, pc}
   809a6:	bf00      	nop
   809a8:	00080851 	.word	0x00080851
   809ac:	20070b6c 	.word	0x20070b6c
   809b0:	00080811 	.word	0x00080811

000809b4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   809b4:	b480      	push	{r7}
   809b6:	b083      	sub	sp, #12
   809b8:	af00      	add	r7, sp, #0
   809ba:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   809bc:	687b      	ldr	r3, [r7, #4]
   809be:	2240      	movs	r2, #64	; 0x40
   809c0:	601a      	str	r2, [r3, #0]
}
   809c2:	bf00      	nop
   809c4:	370c      	adds	r7, #12
   809c6:	46bd      	mov	sp, r7
   809c8:	bc80      	pop	{r7}
   809ca:	4770      	bx	lr

000809cc <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   809cc:	b480      	push	{r7}
   809ce:	b083      	sub	sp, #12
   809d0:	af00      	add	r7, sp, #0
   809d2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   809d4:	687b      	ldr	r3, [r7, #4]
   809d6:	2280      	movs	r2, #128	; 0x80
   809d8:	601a      	str	r2, [r3, #0]
}
   809da:	bf00      	nop
   809dc:	370c      	adds	r7, #12
   809de:	46bd      	mov	sp, r7
   809e0:	bc80      	pop	{r7}
   809e2:	4770      	bx	lr

000809e4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   809e4:	b480      	push	{r7}
   809e6:	b083      	sub	sp, #12
   809e8:	af00      	add	r7, sp, #0
   809ea:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   809ec:	687b      	ldr	r3, [r7, #4]
   809ee:	2288      	movs	r2, #136	; 0x88
   809f0:	601a      	str	r2, [r3, #0]
}
   809f2:	bf00      	nop
   809f4:	370c      	adds	r7, #12
   809f6:	46bd      	mov	sp, r7
   809f8:	bc80      	pop	{r7}
   809fa:	4770      	bx	lr

000809fc <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   809fc:	b480      	push	{r7}
   809fe:	b083      	sub	sp, #12
   80a00:	af00      	add	r7, sp, #0
   80a02:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   80a04:	687b      	ldr	r3, [r7, #4]
   80a06:	2210      	movs	r2, #16
   80a08:	601a      	str	r2, [r3, #0]
}
   80a0a:	bf00      	nop
   80a0c:	370c      	adds	r7, #12
   80a0e:	46bd      	mov	sp, r7
   80a10:	bc80      	pop	{r7}
   80a12:	4770      	bx	lr

00080a14 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   80a14:	b480      	push	{r7}
   80a16:	b083      	sub	sp, #12
   80a18:	af00      	add	r7, sp, #0
   80a1a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   80a1c:	687b      	ldr	r3, [r7, #4]
   80a1e:	2220      	movs	r2, #32
   80a20:	601a      	str	r2, [r3, #0]
}
   80a22:	bf00      	nop
   80a24:	370c      	adds	r7, #12
   80a26:	46bd      	mov	sp, r7
   80a28:	bc80      	pop	{r7}
   80a2a:	4770      	bx	lr

00080a2c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   80a2c:	b480      	push	{r7}
   80a2e:	b083      	sub	sp, #12
   80a30:	af00      	add	r7, sp, #0
   80a32:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80a34:	687b      	ldr	r3, [r7, #4]
   80a36:	2224      	movs	r2, #36	; 0x24
   80a38:	601a      	str	r2, [r3, #0]
}
   80a3a:	bf00      	nop
   80a3c:	370c      	adds	r7, #12
   80a3e:	46bd      	mov	sp, r7
   80a40:	bc80      	pop	{r7}
   80a42:	4770      	bx	lr

00080a44 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   80a44:	b480      	push	{r7}
   80a46:	b083      	sub	sp, #12
   80a48:	af00      	add	r7, sp, #0
   80a4a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   80a4c:	687b      	ldr	r3, [r7, #4]
   80a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
   80a52:	601a      	str	r2, [r3, #0]
}
   80a54:	bf00      	nop
   80a56:	370c      	adds	r7, #12
   80a58:	46bd      	mov	sp, r7
   80a5a:	bc80      	pop	{r7}
   80a5c:	4770      	bx	lr

00080a5e <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   80a5e:	b480      	push	{r7}
   80a60:	b083      	sub	sp, #12
   80a62:	af00      	add	r7, sp, #0
   80a64:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   80a66:	687b      	ldr	r3, [r7, #4]
   80a68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80a6c:	601a      	str	r2, [r3, #0]
}
   80a6e:	bf00      	nop
   80a70:	370c      	adds	r7, #12
   80a72:	46bd      	mov	sp, r7
   80a74:	bc80      	pop	{r7}
   80a76:	4770      	bx	lr

00080a78 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
   80a78:	b480      	push	{r7}
   80a7a:	b083      	sub	sp, #12
   80a7c:	af00      	add	r7, sp, #0
   80a7e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
   80a80:	687b      	ldr	r3, [r7, #4]
   80a82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   80a86:	601a      	str	r2, [r3, #0]
}
   80a88:	bf00      	nop
   80a8a:	370c      	adds	r7, #12
   80a8c:	46bd      	mov	sp, r7
   80a8e:	bc80      	pop	{r7}
   80a90:	4770      	bx	lr

00080a92 <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   80a92:	b480      	push	{r7}
   80a94:	b083      	sub	sp, #12
   80a96:	af00      	add	r7, sp, #0
   80a98:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   80a9a:	687b      	ldr	r3, [r7, #4]
   80a9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80aa0:	601a      	str	r2, [r3, #0]
}
   80aa2:	bf00      	nop
   80aa4:	370c      	adds	r7, #12
   80aa6:	46bd      	mov	sp, r7
   80aa8:	bc80      	pop	{r7}
   80aaa:	4770      	bx	lr

00080aac <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   80aac:	b480      	push	{r7}
   80aae:	b083      	sub	sp, #12
   80ab0:	af00      	add	r7, sp, #0
   80ab2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   80ab4:	687b      	ldr	r3, [r7, #4]
   80ab6:	4a04      	ldr	r2, [pc, #16]	; (80ac8 <usart_disable_writeprotect+0x1c>)
   80ab8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   80abc:	bf00      	nop
   80abe:	370c      	adds	r7, #12
   80ac0:	46bd      	mov	sp, r7
   80ac2:	bc80      	pop	{r7}
   80ac4:	4770      	bx	lr
   80ac6:	bf00      	nop
   80ac8:	55534100 	.word	0x55534100

00080acc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80acc:	b480      	push	{r7}
   80ace:	b083      	sub	sp, #12
   80ad0:	af00      	add	r7, sp, #0
   80ad2:	4603      	mov	r3, r0
   80ad4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80ad6:	4908      	ldr	r1, [pc, #32]	; (80af8 <NVIC_EnableIRQ+0x2c>)
   80ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80adc:	095b      	lsrs	r3, r3, #5
   80ade:	79fa      	ldrb	r2, [r7, #7]
   80ae0:	f002 021f 	and.w	r2, r2, #31
   80ae4:	2001      	movs	r0, #1
   80ae6:	fa00 f202 	lsl.w	r2, r0, r2
   80aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80aee:	bf00      	nop
   80af0:	370c      	adds	r7, #12
   80af2:	46bd      	mov	sp, r7
   80af4:	bc80      	pop	{r7}
   80af6:	4770      	bx	lr
   80af8:	e000e100 	.word	0xe000e100

00080afc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80afc:	b480      	push	{r7}
   80afe:	b083      	sub	sp, #12
   80b00:	af00      	add	r7, sp, #0
   80b02:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80b04:	687b      	ldr	r3, [r7, #4]
   80b06:	2b07      	cmp	r3, #7
   80b08:	d825      	bhi.n	80b56 <osc_get_rate+0x5a>
   80b0a:	a201      	add	r2, pc, #4	; (adr r2, 80b10 <osc_get_rate+0x14>)
   80b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b10:	00080b31 	.word	0x00080b31
   80b14:	00080b37 	.word	0x00080b37
   80b18:	00080b3d 	.word	0x00080b3d
   80b1c:	00080b43 	.word	0x00080b43
   80b20:	00080b47 	.word	0x00080b47
   80b24:	00080b4b 	.word	0x00080b4b
   80b28:	00080b4f 	.word	0x00080b4f
   80b2c:	00080b53 	.word	0x00080b53
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80b30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80b34:	e010      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80b3a:	e00d      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80b40:	e00a      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80b42:	4b08      	ldr	r3, [pc, #32]	; (80b64 <osc_get_rate+0x68>)
   80b44:	e008      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80b46:	4b08      	ldr	r3, [pc, #32]	; (80b68 <osc_get_rate+0x6c>)
   80b48:	e006      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80b4a:	4b08      	ldr	r3, [pc, #32]	; (80b6c <osc_get_rate+0x70>)
   80b4c:	e004      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80b4e:	4b07      	ldr	r3, [pc, #28]	; (80b6c <osc_get_rate+0x70>)
   80b50:	e002      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80b52:	4b06      	ldr	r3, [pc, #24]	; (80b6c <osc_get_rate+0x70>)
   80b54:	e000      	b.n	80b58 <osc_get_rate+0x5c>
	}

	return 0;
   80b56:	2300      	movs	r3, #0
}
   80b58:	4618      	mov	r0, r3
   80b5a:	370c      	adds	r7, #12
   80b5c:	46bd      	mov	sp, r7
   80b5e:	bc80      	pop	{r7}
   80b60:	4770      	bx	lr
   80b62:	bf00      	nop
   80b64:	003d0900 	.word	0x003d0900
   80b68:	007a1200 	.word	0x007a1200
   80b6c:	00b71b00 	.word	0x00b71b00

00080b70 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80b70:	b580      	push	{r7, lr}
   80b72:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80b74:	2006      	movs	r0, #6
   80b76:	4b04      	ldr	r3, [pc, #16]	; (80b88 <sysclk_get_main_hz+0x18>)
   80b78:	4798      	blx	r3
   80b7a:	4602      	mov	r2, r0
   80b7c:	4613      	mov	r3, r2
   80b7e:	00db      	lsls	r3, r3, #3
   80b80:	1a9b      	subs	r3, r3, r2
   80b82:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80b84:	4618      	mov	r0, r3
   80b86:	bd80      	pop	{r7, pc}
   80b88:	00080afd 	.word	0x00080afd

00080b8c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   80b8c:	b580      	push	{r7, lr}
   80b8e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80b90:	4b02      	ldr	r3, [pc, #8]	; (80b9c <sysclk_get_peripheral_hz+0x10>)
   80b92:	4798      	blx	r3
   80b94:	4603      	mov	r3, r0
   80b96:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80b98:	4618      	mov	r0, r3
   80b9a:	bd80      	pop	{r7, pc}
   80b9c:	00080b71 	.word	0x00080b71

00080ba0 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   80ba0:	b480      	push	{r7}
   80ba2:	b083      	sub	sp, #12
   80ba4:	af00      	add	r7, sp, #0
   80ba6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   80ba8:	687b      	ldr	r3, [r7, #4]
   80baa:	2280      	movs	r2, #128	; 0x80
   80bac:	601a      	str	r2, [r3, #0]
}
   80bae:	bf00      	nop
   80bb0:	370c      	adds	r7, #12
   80bb2:	46bd      	mov	sp, r7
   80bb4:	bc80      	pop	{r7}
   80bb6:	4770      	bx	lr

00080bb8 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   80bb8:	b480      	push	{r7}
   80bba:	b083      	sub	sp, #12
   80bbc:	af00      	add	r7, sp, #0
   80bbe:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80bc0:	687b      	ldr	r3, [r7, #4]
   80bc2:	2201      	movs	r2, #1
   80bc4:	601a      	str	r2, [r3, #0]
}
   80bc6:	bf00      	nop
   80bc8:	370c      	adds	r7, #12
   80bca:	46bd      	mov	sp, r7
   80bcc:	bc80      	pop	{r7}
   80bce:	4770      	bx	lr

00080bd0 <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
   80bd0:	b480      	push	{r7}
   80bd2:	b083      	sub	sp, #12
   80bd4:	af00      	add	r7, sp, #0
   80bd6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   80bd8:	687b      	ldr	r3, [r7, #4]
   80bda:	2202      	movs	r2, #2
   80bdc:	601a      	str	r2, [r3, #0]
}
   80bde:	bf00      	nop
   80be0:	370c      	adds	r7, #12
   80be2:	46bd      	mov	sp, r7
   80be4:	bc80      	pop	{r7}
   80be6:	4770      	bx	lr

00080be8 <spi_set_slave_mode>:
 * \brief Set SPI to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
   80be8:	b480      	push	{r7}
   80bea:	b083      	sub	sp, #12
   80bec:	af00      	add	r7, sp, #0
   80bee:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
   80bf0:	687b      	ldr	r3, [r7, #4]
   80bf2:	685b      	ldr	r3, [r3, #4]
   80bf4:	f023 0201 	bic.w	r2, r3, #1
   80bf8:	687b      	ldr	r3, [r7, #4]
   80bfa:	605a      	str	r2, [r3, #4]
}
   80bfc:	bf00      	nop
   80bfe:	370c      	adds	r7, #12
   80c00:	46bd      	mov	sp, r7
   80c02:	bc80      	pop	{r7}
   80c04:	4770      	bx	lr

00080c06 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   80c06:	b480      	push	{r7}
   80c08:	b083      	sub	sp, #12
   80c0a:	af00      	add	r7, sp, #0
   80c0c:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80c0e:	687b      	ldr	r3, [r7, #4]
   80c10:	685b      	ldr	r3, [r3, #4]
   80c12:	f043 0210 	orr.w	r2, r3, #16
   80c16:	687b      	ldr	r3, [r7, #4]
   80c18:	605a      	str	r2, [r3, #4]
}
   80c1a:	bf00      	nop
   80c1c:	370c      	adds	r7, #12
   80c1e:	46bd      	mov	sp, r7
   80c20:	bc80      	pop	{r7}
   80c22:	4770      	bx	lr

00080c24 <spi_init>:
uint8_t rpi_buf[sizeof(rtm)];

static Bool b_trigger = false;

void spi_init(void)
{
   80c24:	b580      	push	{r7, lr}
   80c26:	af00      	add	r7, sp, #0
    configure_dmac();
   80c28:	4b03      	ldr	r3, [pc, #12]	; (80c38 <spi_init+0x14>)
   80c2a:	4798      	blx	r3
    spi_master_initialize();
   80c2c:	4b03      	ldr	r3, [pc, #12]	; (80c3c <spi_init+0x18>)
   80c2e:	4798      	blx	r3
    spi_slave_initialize();
   80c30:	4b03      	ldr	r3, [pc, #12]	; (80c40 <spi_init+0x1c>)
   80c32:	4798      	blx	r3
}
   80c34:	bf00      	nop
   80c36:	bd80      	pop	{r7, pc}
   80c38:	00080ea5 	.word	0x00080ea5
   80c3c:	00080c45 	.word	0x00080c45
   80c40:	00080cb5 	.word	0x00080cb5

00080c44 <spi_master_initialize>:

void spi_master_initialize(void)
{
   80c44:	b590      	push	{r4, r7, lr}
   80c46:	b085      	sub	sp, #20
   80c48:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   80c4a:	2101      	movs	r1, #1
   80c4c:	4810      	ldr	r0, [pc, #64]	; (80c90 <spi_master_initialize+0x4c>)
   80c4e:	4b11      	ldr	r3, [pc, #68]	; (80c94 <spi_master_initialize+0x50>)
   80c50:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   80c52:	2100      	movs	r1, #0
   80c54:	480e      	ldr	r0, [pc, #56]	; (80c90 <spi_master_initialize+0x4c>)
   80c56:	4b0f      	ldr	r3, [pc, #60]	; (80c94 <spi_master_initialize+0x50>)
   80c58:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   80c5a:	2012      	movs	r0, #18
   80c5c:	4b0e      	ldr	r3, [pc, #56]	; (80c98 <spi_master_initialize+0x54>)
   80c5e:	4798      	blx	r3
    usart_spi_disable(USART1);
   80c60:	480e      	ldr	r0, [pc, #56]	; (80c9c <spi_master_initialize+0x58>)
   80c62:	4b0f      	ldr	r3, [pc, #60]	; (80ca0 <spi_master_initialize+0x5c>)
   80c64:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   80c66:	4b0f      	ldr	r3, [pc, #60]	; (80ca4 <spi_master_initialize+0x60>)
   80c68:	463c      	mov	r4, r7
   80c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   80c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   80c70:	4b0d      	ldr	r3, [pc, #52]	; (80ca8 <spi_master_initialize+0x64>)
   80c72:	4798      	blx	r3
   80c74:	4602      	mov	r2, r0
   80c76:	463b      	mov	r3, r7
   80c78:	4619      	mov	r1, r3
   80c7a:	4808      	ldr	r0, [pc, #32]	; (80c9c <spi_master_initialize+0x58>)
   80c7c:	4b0b      	ldr	r3, [pc, #44]	; (80cac <spi_master_initialize+0x68>)
   80c7e:	4798      	blx	r3
    usart_spi_enable(USART1);
   80c80:	4806      	ldr	r0, [pc, #24]	; (80c9c <spi_master_initialize+0x58>)
   80c82:	4b0b      	ldr	r3, [pc, #44]	; (80cb0 <spi_master_initialize+0x6c>)
   80c84:	4798      	blx	r3
}
   80c86:	bf00      	nop
   80c88:	3714      	adds	r7, #20
   80c8a:	46bd      	mov	sp, r7
   80c8c:	bd90      	pop	{r4, r7, pc}
   80c8e:	bf00      	nop
   80c90:	400c4000 	.word	0x400c4000
   80c94:	00083957 	.word	0x00083957
   80c98:	00083d15 	.word	0x00083d15
   80c9c:	4009c000 	.word	0x4009c000
   80ca0:	00080185 	.word	0x00080185
   80ca4:	000899f0 	.word	0x000899f0
   80ca8:	00080b8d 	.word	0x00080b8d
   80cac:	000808a5 	.word	0x000808a5
   80cb0:	00080161 	.word	0x00080161

00080cb4 <spi_slave_initialize>:

void spi_slave_initialize(void)
{
   80cb4:	b580      	push	{r7, lr}
   80cb6:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 4);
   80cb8:	2104      	movs	r1, #4
   80cba:	481b      	ldr	r0, [pc, #108]	; (80d28 <spi_slave_initialize+0x74>)
   80cbc:	4b1b      	ldr	r3, [pc, #108]	; (80d2c <spi_slave_initialize+0x78>)
   80cbe:	4798      	blx	r3
    dmac_channel_disable(DMAC, 2);
   80cc0:	2102      	movs	r1, #2
   80cc2:	4819      	ldr	r0, [pc, #100]	; (80d28 <spi_slave_initialize+0x74>)
   80cc4:	4b19      	ldr	r3, [pc, #100]	; (80d2c <spi_slave_initialize+0x78>)
   80cc6:	4798      	blx	r3
    pmc_enable_periph_clk(ID_SPI0);
   80cc8:	2018      	movs	r0, #24
   80cca:	4b19      	ldr	r3, [pc, #100]	; (80d30 <spi_slave_initialize+0x7c>)
   80ccc:	4798      	blx	r3
    spi_disable(SPI0);
   80cce:	4819      	ldr	r0, [pc, #100]	; (80d34 <spi_slave_initialize+0x80>)
   80cd0:	4b19      	ldr	r3, [pc, #100]	; (80d38 <spi_slave_initialize+0x84>)
   80cd2:	4798      	blx	r3
    spi_reset(SPI0);
   80cd4:	4817      	ldr	r0, [pc, #92]	; (80d34 <spi_slave_initialize+0x80>)
   80cd6:	4b19      	ldr	r3, [pc, #100]	; (80d3c <spi_slave_initialize+0x88>)
   80cd8:	4798      	blx	r3
    spi_set_slave_mode(SPI0);
   80cda:	4816      	ldr	r0, [pc, #88]	; (80d34 <spi_slave_initialize+0x80>)
   80cdc:	4b18      	ldr	r3, [pc, #96]	; (80d40 <spi_slave_initialize+0x8c>)
   80cde:	4798      	blx	r3
    spi_disable_mode_fault_detect(SPI0);
   80ce0:	4814      	ldr	r0, [pc, #80]	; (80d34 <spi_slave_initialize+0x80>)
   80ce2:	4b18      	ldr	r3, [pc, #96]	; (80d44 <spi_slave_initialize+0x90>)
   80ce4:	4798      	blx	r3
    spi_set_peripheral_chip_select_value(SPI0, spi_get_pcs(0));
   80ce6:	210e      	movs	r1, #14
   80ce8:	4812      	ldr	r0, [pc, #72]	; (80d34 <spi_slave_initialize+0x80>)
   80cea:	4b17      	ldr	r3, [pc, #92]	; (80d48 <spi_slave_initialize+0x94>)
   80cec:	4798      	blx	r3
    spi_set_clock_polarity(SPI0, 0, 0);
   80cee:	2200      	movs	r2, #0
   80cf0:	2100      	movs	r1, #0
   80cf2:	4810      	ldr	r0, [pc, #64]	; (80d34 <spi_slave_initialize+0x80>)
   80cf4:	4b15      	ldr	r3, [pc, #84]	; (80d4c <spi_slave_initialize+0x98>)
   80cf6:	4798      	blx	r3
    spi_set_clock_phase(SPI0, 0, 1);
   80cf8:	2201      	movs	r2, #1
   80cfa:	2100      	movs	r1, #0
   80cfc:	480d      	ldr	r0, [pc, #52]	; (80d34 <spi_slave_initialize+0x80>)
   80cfe:	4b14      	ldr	r3, [pc, #80]	; (80d50 <spi_slave_initialize+0x9c>)
   80d00:	4798      	blx	r3
    spi_set_bits_per_transfer(SPI0, 0, SPI_CSR_BITS_8_BIT);
   80d02:	2200      	movs	r2, #0
   80d04:	2100      	movs	r1, #0
   80d06:	480b      	ldr	r0, [pc, #44]	; (80d34 <spi_slave_initialize+0x80>)
   80d08:	4b12      	ldr	r3, [pc, #72]	; (80d54 <spi_slave_initialize+0xa0>)
   80d0a:	4798      	blx	r3
    spi_enable(SPI0);
   80d0c:	4809      	ldr	r0, [pc, #36]	; (80d34 <spi_slave_initialize+0x80>)
   80d0e:	4b12      	ldr	r3, [pc, #72]	; (80d58 <spi_slave_initialize+0xa4>)
   80d10:	4798      	blx	r3

    /* Start waiting command. */
    memcpy(&rpi_buf, &mtr, sizeof(mtr));
   80d12:	4b12      	ldr	r3, [pc, #72]	; (80d5c <spi_slave_initialize+0xa8>)
   80d14:	881b      	ldrh	r3, [r3, #0]
   80d16:	4a12      	ldr	r2, [pc, #72]	; (80d60 <spi_slave_initialize+0xac>)
   80d18:	8013      	strh	r3, [r2, #0]
    spi_slave_transfer(&rpi_buf, sizeof(rpi_buf));
   80d1a:	2102      	movs	r1, #2
   80d1c:	4810      	ldr	r0, [pc, #64]	; (80d60 <spi_slave_initialize+0xac>)
   80d1e:	4b11      	ldr	r3, [pc, #68]	; (80d64 <spi_slave_initialize+0xb0>)
   80d20:	4798      	blx	r3
}
   80d22:	bf00      	nop
   80d24:	bd80      	pop	{r7, pc}
   80d26:	bf00      	nop
   80d28:	400c4000 	.word	0x400c4000
   80d2c:	00083957 	.word	0x00083957
   80d30:	00083d15 	.word	0x00083d15
   80d34:	40008000 	.word	0x40008000
   80d38:	00080bd1 	.word	0x00080bd1
   80d3c:	00080ba1 	.word	0x00080ba1
   80d40:	00080be9 	.word	0x00080be9
   80d44:	00080c07 	.word	0x00080c07
   80d48:	00080637 	.word	0x00080637
   80d4c:	00080669 	.word	0x00080669
   80d50:	000806b7 	.word	0x000806b7
   80d54:	00080705 	.word	0x00080705
   80d58:	00080bb9 	.word	0x00080bb9
   80d5c:	20070e10 	.word	0x20070e10
   80d60:	20070e14 	.word	0x20070e14
   80d64:	00080e0d 	.word	0x00080e0d

00080d68 <spi_master_transfer>:

void spi_master_transfer(void *p_buf, uint32_t ul_size)
{
   80d68:	b580      	push	{r7, lr}
   80d6a:	b088      	sub	sp, #32
   80d6c:	af00      	add	r7, sp, #0
   80d6e:	6078      	str	r0, [r7, #4]
   80d70:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    usart_spi_force_chip_select(USART1);
   80d72:	481c      	ldr	r0, [pc, #112]	; (80de4 <spi_master_transfer+0x7c>)
   80d74:	4b1c      	ldr	r3, [pc, #112]	; (80de8 <spi_master_transfer+0x80>)
   80d76:	4798      	blx	r3

    dmac_channel_disable(DMAC, 1);
   80d78:	2101      	movs	r1, #1
   80d7a:	481c      	ldr	r0, [pc, #112]	; (80dec <spi_master_transfer+0x84>)
   80d7c:	4b1c      	ldr	r3, [pc, #112]	; (80df0 <spi_master_transfer+0x88>)
   80d7e:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   80d80:	687b      	ldr	r3, [r7, #4]
   80d82:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & USART1->US_THR;
   80d84:	4b1b      	ldr	r3, [pc, #108]	; (80df4 <spi_master_transfer+0x8c>)
   80d86:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80d88:	683b      	ldr	r3, [r7, #0]
   80d8a:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80d8c:	4b1a      	ldr	r3, [pc, #104]	; (80df8 <spi_master_transfer+0x90>)
   80d8e:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80d90:	2300      	movs	r3, #0
   80d92:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   80d94:	f107 030c 	add.w	r3, r7, #12
   80d98:	461a      	mov	r2, r3
   80d9a:	2101      	movs	r1, #1
   80d9c:	4813      	ldr	r0, [pc, #76]	; (80dec <spi_master_transfer+0x84>)
   80d9e:	4b17      	ldr	r3, [pc, #92]	; (80dfc <spi_master_transfer+0x94>)
   80da0:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   80da2:	2101      	movs	r1, #1
   80da4:	4811      	ldr	r0, [pc, #68]	; (80dec <spi_master_transfer+0x84>)
   80da6:	4b16      	ldr	r3, [pc, #88]	; (80e00 <spi_master_transfer+0x98>)
   80da8:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   80daa:	2100      	movs	r1, #0
   80dac:	480f      	ldr	r0, [pc, #60]	; (80dec <spi_master_transfer+0x84>)
   80dae:	4b10      	ldr	r3, [pc, #64]	; (80df0 <spi_master_transfer+0x88>)
   80db0:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & USART1->US_RHR;
   80db2:	4b14      	ldr	r3, [pc, #80]	; (80e04 <spi_master_transfer+0x9c>)
   80db4:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80db6:	687b      	ldr	r3, [r7, #4]
   80db8:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80dba:	683b      	ldr	r3, [r7, #0]
   80dbc:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   80dbe:	4b12      	ldr	r3, [pc, #72]	; (80e08 <spi_master_transfer+0xa0>)
   80dc0:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80dc2:	2300      	movs	r3, #0
   80dc4:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   80dc6:	f107 030c 	add.w	r3, r7, #12
   80dca:	461a      	mov	r2, r3
   80dcc:	2100      	movs	r1, #0
   80dce:	4807      	ldr	r0, [pc, #28]	; (80dec <spi_master_transfer+0x84>)
   80dd0:	4b0a      	ldr	r3, [pc, #40]	; (80dfc <spi_master_transfer+0x94>)
   80dd2:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   80dd4:	2100      	movs	r1, #0
   80dd6:	4805      	ldr	r0, [pc, #20]	; (80dec <spi_master_transfer+0x84>)
   80dd8:	4b09      	ldr	r3, [pc, #36]	; (80e00 <spi_master_transfer+0x98>)
   80dda:	4798      	blx	r3
}
   80ddc:	bf00      	nop
   80dde:	3720      	adds	r7, #32
   80de0:	46bd      	mov	sp, r7
   80de2:	bd80      	pop	{r7, pc}
   80de4:	4009c000 	.word	0x4009c000
   80de8:	00080a79 	.word	0x00080a79
   80dec:	400c4000 	.word	0x400c4000
   80df0:	00083957 	.word	0x00083957
   80df4:	4009c01c 	.word	0x4009c01c
   80df8:	20310000 	.word	0x20310000
   80dfc:	00083a71 	.word	0x00083a71
   80e00:	00083939 	.word	0x00083939
   80e04:	4009c018 	.word	0x4009c018
   80e08:	02510000 	.word	0x02510000

00080e0c <spi_slave_transfer>:

void spi_slave_transfer(void *p_buf, uint32_t ul_size)
{
   80e0c:	b580      	push	{r7, lr}
   80e0e:	b088      	sub	sp, #32
   80e10:	af00      	add	r7, sp, #0
   80e12:	6078      	str	r0, [r7, #4]
   80e14:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    dmac_channel_disable(DMAC, 4);
   80e16:	2104      	movs	r1, #4
   80e18:	481a      	ldr	r0, [pc, #104]	; (80e84 <spi_slave_transfer+0x78>)
   80e1a:	4b1b      	ldr	r3, [pc, #108]	; (80e88 <spi_slave_transfer+0x7c>)
   80e1c:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   80e1e:	687b      	ldr	r3, [r7, #4]
   80e20:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & SPI0->SPI_TDR;
   80e22:	4b1a      	ldr	r3, [pc, #104]	; (80e8c <spi_slave_transfer+0x80>)
   80e24:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80e26:	683b      	ldr	r3, [r7, #0]
   80e28:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80e2a:	4b19      	ldr	r3, [pc, #100]	; (80e90 <spi_slave_transfer+0x84>)
   80e2c:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80e2e:	2300      	movs	r3, #0
   80e30:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 4, &dmac_trans);
   80e32:	f107 030c 	add.w	r3, r7, #12
   80e36:	461a      	mov	r2, r3
   80e38:	2104      	movs	r1, #4
   80e3a:	4812      	ldr	r0, [pc, #72]	; (80e84 <spi_slave_transfer+0x78>)
   80e3c:	4b15      	ldr	r3, [pc, #84]	; (80e94 <spi_slave_transfer+0x88>)
   80e3e:	4798      	blx	r3
    dmac_channel_enable(DMAC, 4);
   80e40:	2104      	movs	r1, #4
   80e42:	4810      	ldr	r0, [pc, #64]	; (80e84 <spi_slave_transfer+0x78>)
   80e44:	4b14      	ldr	r3, [pc, #80]	; (80e98 <spi_slave_transfer+0x8c>)
   80e46:	4798      	blx	r3

    dmac_channel_disable(DMAC, 2);
   80e48:	2102      	movs	r1, #2
   80e4a:	480e      	ldr	r0, [pc, #56]	; (80e84 <spi_slave_transfer+0x78>)
   80e4c:	4b0e      	ldr	r3, [pc, #56]	; (80e88 <spi_slave_transfer+0x7c>)
   80e4e:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & SPI0->SPI_RDR;
   80e50:	4b12      	ldr	r3, [pc, #72]	; (80e9c <spi_slave_transfer+0x90>)
   80e52:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80e54:	687b      	ldr	r3, [r7, #4]
   80e56:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80e58:	683b      	ldr	r3, [r7, #0]
   80e5a:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   80e5c:	4b10      	ldr	r3, [pc, #64]	; (80ea0 <spi_slave_transfer+0x94>)
   80e5e:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80e60:	2300      	movs	r3, #0
   80e62:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 2, (dma_transfer_descriptor_t *) & dmac_trans);
   80e64:	f107 030c 	add.w	r3, r7, #12
   80e68:	461a      	mov	r2, r3
   80e6a:	2102      	movs	r1, #2
   80e6c:	4805      	ldr	r0, [pc, #20]	; (80e84 <spi_slave_transfer+0x78>)
   80e6e:	4b09      	ldr	r3, [pc, #36]	; (80e94 <spi_slave_transfer+0x88>)
   80e70:	4798      	blx	r3
    dmac_channel_enable(DMAC, 2);
   80e72:	2102      	movs	r1, #2
   80e74:	4803      	ldr	r0, [pc, #12]	; (80e84 <spi_slave_transfer+0x78>)
   80e76:	4b08      	ldr	r3, [pc, #32]	; (80e98 <spi_slave_transfer+0x8c>)
   80e78:	4798      	blx	r3
}
   80e7a:	bf00      	nop
   80e7c:	3720      	adds	r7, #32
   80e7e:	46bd      	mov	sp, r7
   80e80:	bd80      	pop	{r7, pc}
   80e82:	bf00      	nop
   80e84:	400c4000 	.word	0x400c4000
   80e88:	00083957 	.word	0x00083957
   80e8c:	4000800c 	.word	0x4000800c
   80e90:	20310000 	.word	0x20310000
   80e94:	00083a71 	.word	0x00083a71
   80e98:	00083939 	.word	0x00083939
   80e9c:	40008008 	.word	0x40008008
   80ea0:	02510000 	.word	0x02510000

00080ea4 <configure_dmac>:

void configure_dmac(void)
{
   80ea4:	b580      	push	{r7, lr}
   80ea6:	b082      	sub	sp, #8
   80ea8:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   80eaa:	2027      	movs	r0, #39	; 0x27
   80eac:	4b27      	ldr	r3, [pc, #156]	; (80f4c <configure_dmac+0xa8>)
   80eae:	4798      	blx	r3
    dmac_init(DMAC);
   80eb0:	4827      	ldr	r0, [pc, #156]	; (80f50 <configure_dmac+0xac>)
   80eb2:	4b28      	ldr	r3, [pc, #160]	; (80f54 <configure_dmac+0xb0>)
   80eb4:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   80eb6:	2110      	movs	r1, #16
   80eb8:	4825      	ldr	r0, [pc, #148]	; (80f50 <configure_dmac+0xac>)
   80eba:	4b27      	ldr	r3, [pc, #156]	; (80f58 <configure_dmac+0xb4>)
   80ebc:	4798      	blx	r3
    dmac_enable(DMAC);
   80ebe:	4824      	ldr	r0, [pc, #144]	; (80f50 <configure_dmac+0xac>)
   80ec0:	4b26      	ldr	r3, [pc, #152]	; (80f5c <configure_dmac+0xb8>)
   80ec2:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80ec4:	2300      	movs	r3, #0
   80ec6:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80ec8:	687b      	ldr	r3, [r7, #4]
   80eca:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80ece:	f043 030e 	orr.w	r3, r3, #14
   80ed2:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   80ed4:	687a      	ldr	r2, [r7, #4]
   80ed6:	2100      	movs	r1, #0
   80ed8:	481d      	ldr	r0, [pc, #116]	; (80f50 <configure_dmac+0xac>)
   80eda:	4b21      	ldr	r3, [pc, #132]	; (80f60 <configure_dmac+0xbc>)
   80edc:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80ede:	2300      	movs	r3, #0
   80ee0:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80ee2:	687b      	ldr	r3, [r7, #4]
   80ee4:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   80ee8:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   80eec:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   80eee:	687a      	ldr	r2, [r7, #4]
   80ef0:	2101      	movs	r1, #1
   80ef2:	4817      	ldr	r0, [pc, #92]	; (80f50 <configure_dmac+0xac>)
   80ef4:	4b1a      	ldr	r3, [pc, #104]	; (80f60 <configure_dmac+0xbc>)
   80ef6:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80ef8:	2300      	movs	r3, #0
   80efa:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(2) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80efc:	687b      	ldr	r3, [r7, #4]
   80efe:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80f02:	f043 0302 	orr.w	r3, r3, #2
   80f06:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 2, ul_cfg);
   80f08:	687a      	ldr	r2, [r7, #4]
   80f0a:	2102      	movs	r1, #2
   80f0c:	4810      	ldr	r0, [pc, #64]	; (80f50 <configure_dmac+0xac>)
   80f0e:	4b14      	ldr	r3, [pc, #80]	; (80f60 <configure_dmac+0xbc>)
   80f10:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80f12:	2300      	movs	r3, #0
   80f14:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80f16:	687b      	ldr	r3, [r7, #4]
   80f18:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   80f1c:	f043 0310 	orr.w	r3, r3, #16
   80f20:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
   80f22:	687a      	ldr	r2, [r7, #4]
   80f24:	2104      	movs	r1, #4
   80f26:	480a      	ldr	r0, [pc, #40]	; (80f50 <configure_dmac+0xac>)
   80f28:	4b0d      	ldr	r3, [pc, #52]	; (80f60 <configure_dmac+0xbc>)
   80f2a:	4798      	blx	r3

    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   80f2c:	2027      	movs	r0, #39	; 0x27
   80f2e:	4b0d      	ldr	r3, [pc, #52]	; (80f64 <configure_dmac+0xc0>)
   80f30:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   80f32:	2101      	movs	r1, #1
   80f34:	4806      	ldr	r0, [pc, #24]	; (80f50 <configure_dmac+0xac>)
   80f36:	4b0c      	ldr	r3, [pc, #48]	; (80f68 <configure_dmac+0xc4>)
   80f38:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 2));
   80f3a:	2104      	movs	r1, #4
   80f3c:	4804      	ldr	r0, [pc, #16]	; (80f50 <configure_dmac+0xac>)
   80f3e:	4b0a      	ldr	r3, [pc, #40]	; (80f68 <configure_dmac+0xc4>)
   80f40:	4798      	blx	r3
}
   80f42:	bf00      	nop
   80f44:	3708      	adds	r7, #8
   80f46:	46bd      	mov	sp, r7
   80f48:	bd80      	pop	{r7, pc}
   80f4a:	bf00      	nop
   80f4c:	00083d15 	.word	0x00083d15
   80f50:	400c4000 	.word	0x400c4000
   80f54:	00083891 	.word	0x00083891
   80f58:	000838ad 	.word	0x000838ad
   80f5c:	000838d3 	.word	0x000838d3
   80f60:	00083a47 	.word	0x00083a47
   80f64:	00080acd 	.word	0x00080acd
   80f68:	00083909 	.word	0x00083909

00080f6c <DMAC_Handler>:

void DMAC_Handler(void)
{
   80f6c:	b580      	push	{r7, lr}
   80f6e:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   80f70:	4812      	ldr	r0, [pc, #72]	; (80fbc <DMAC_Handler+0x50>)
   80f72:	4b13      	ldr	r3, [pc, #76]	; (80fc0 <DMAC_Handler+0x54>)
   80f74:	4798      	blx	r3
   80f76:	4602      	mov	r2, r0
   80f78:	4b12      	ldr	r3, [pc, #72]	; (80fc4 <DMAC_Handler+0x58>)
   80f7a:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   80f7c:	4b11      	ldr	r3, [pc, #68]	; (80fc4 <DMAC_Handler+0x58>)
   80f7e:	681b      	ldr	r3, [r3, #0]
   80f80:	f003 0301 	and.w	r3, r3, #1
   80f84:	2b00      	cmp	r3, #0
   80f86:	d008      	beq.n	80f9a <DMAC_Handler+0x2e>
    {
        usart_spi_release_chip_select(USART1);
   80f88:	480f      	ldr	r0, [pc, #60]	; (80fc8 <DMAC_Handler+0x5c>)
   80f8a:	4b10      	ldr	r3, [pc, #64]	; (80fcc <DMAC_Handler+0x60>)
   80f8c:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   80f8e:	4b10      	ldr	r3, [pc, #64]	; (80fd0 <DMAC_Handler+0x64>)
   80f90:	4a10      	ldr	r2, [pc, #64]	; (80fd4 <DMAC_Handler+0x68>)
   80f92:	8811      	ldrh	r1, [r2, #0]
   80f94:	7892      	ldrb	r2, [r2, #2]
   80f96:	8019      	strh	r1, [r3, #0]
   80f98:	709a      	strb	r2, [r3, #2]
    }
    
    if (ul_status & (1 << 2))
   80f9a:	4b0a      	ldr	r3, [pc, #40]	; (80fc4 <DMAC_Handler+0x58>)
   80f9c:	681b      	ldr	r3, [r3, #0]
   80f9e:	f003 0304 	and.w	r3, r3, #4
   80fa2:	2b00      	cmp	r3, #0
   80fa4:	d007      	beq.n	80fb6 <DMAC_Handler+0x4a>
    {
        memcpy(&rtm, &rpi_buf, sizeof(rtm));
   80fa6:	4b0c      	ldr	r3, [pc, #48]	; (80fd8 <DMAC_Handler+0x6c>)
   80fa8:	881b      	ldrh	r3, [r3, #0]
   80faa:	b29a      	uxth	r2, r3
   80fac:	4b0b      	ldr	r3, [pc, #44]	; (80fdc <DMAC_Handler+0x70>)
   80fae:	801a      	strh	r2, [r3, #0]
        b_trigger = true;
   80fb0:	4b0b      	ldr	r3, [pc, #44]	; (80fe0 <DMAC_Handler+0x74>)
   80fb2:	2201      	movs	r2, #1
   80fb4:	701a      	strb	r2, [r3, #0]
    }
}
   80fb6:	bf00      	nop
   80fb8:	bd80      	pop	{r7, pc}
   80fba:	bf00      	nop
   80fbc:	400c4000 	.word	0x400c4000
   80fc0:	00083923 	.word	0x00083923
   80fc4:	20070b74 	.word	0x20070b74
   80fc8:	4009c000 	.word	0x4009c000
   80fcc:	00080a93 	.word	0x00080a93
   80fd0:	20070e20 	.word	0x20070e20
   80fd4:	20070e0c 	.word	0x20070e0c
   80fd8:	20070e14 	.word	0x20070e14
   80fdc:	20070e18 	.word	0x20070e18
   80fe0:	20070b70 	.word	0x20070b70

00080fe4 <PrepareValuesToSend>:

void PrepareValuesToSend(void)
{
   80fe4:	b580      	push	{r7, lr}
   80fe6:	af00      	add	r7, sp, #0
    if (b_trigger)
   80fe8:	4b0a      	ldr	r3, [pc, #40]	; (81014 <PrepareValuesToSend+0x30>)
   80fea:	781b      	ldrb	r3, [r3, #0]
   80fec:	2b00      	cmp	r3, #0
   80fee:	d00e      	beq.n	8100e <PrepareValuesToSend+0x2a>
    {
        b_trigger = false;
   80ff0:	4b08      	ldr	r3, [pc, #32]	; (81014 <PrepareValuesToSend+0x30>)
   80ff2:	2200      	movs	r2, #0
   80ff4:	701a      	strb	r2, [r3, #0]
        
        mtr.rsvd = 1234;
   80ff6:	4b08      	ldr	r3, [pc, #32]	; (81018 <PrepareValuesToSend+0x34>)
   80ff8:	f240 42d2 	movw	r2, #1234	; 0x4d2
   80ffc:	801a      	strh	r2, [r3, #0]
        
        memcpy(&rpi_buf, &mtr, sizeof(mtr));
   80ffe:	4b06      	ldr	r3, [pc, #24]	; (81018 <PrepareValuesToSend+0x34>)
   81000:	881b      	ldrh	r3, [r3, #0]
   81002:	4a06      	ldr	r2, [pc, #24]	; (8101c <PrepareValuesToSend+0x38>)
   81004:	8013      	strh	r3, [r2, #0]
        spi_slave_transfer(&rpi_buf, sizeof(rpi_buf));
   81006:	2102      	movs	r1, #2
   81008:	4804      	ldr	r0, [pc, #16]	; (8101c <PrepareValuesToSend+0x38>)
   8100a:	4b05      	ldr	r3, [pc, #20]	; (81020 <PrepareValuesToSend+0x3c>)
   8100c:	4798      	blx	r3
    }
}
   8100e:	bf00      	nop
   81010:	bd80      	pop	{r7, pc}
   81012:	bf00      	nop
   81014:	20070b70 	.word	0x20070b70
   81018:	20070e10 	.word	0x20070e10
   8101c:	20070e14 	.word	0x20070e14
   81020:	00080e0d 	.word	0x00080e0d

00081024 <NVIC_EnableIRQ>:
{
   81024:	b480      	push	{r7}
   81026:	b083      	sub	sp, #12
   81028:	af00      	add	r7, sp, #0
   8102a:	4603      	mov	r3, r0
   8102c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8102e:	4908      	ldr	r1, [pc, #32]	; (81050 <NVIC_EnableIRQ+0x2c>)
   81030:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81034:	095b      	lsrs	r3, r3, #5
   81036:	79fa      	ldrb	r2, [r7, #7]
   81038:	f002 021f 	and.w	r2, r2, #31
   8103c:	2001      	movs	r0, #1
   8103e:	fa00 f202 	lsl.w	r2, r0, r2
   81042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81046:	bf00      	nop
   81048:	370c      	adds	r7, #12
   8104a:	46bd      	mov	sp, r7
   8104c:	bc80      	pop	{r7}
   8104e:	4770      	bx	lr
   81050:	e000e100 	.word	0xe000e100

00081054 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81054:	b480      	push	{r7}
   81056:	b083      	sub	sp, #12
   81058:	af00      	add	r7, sp, #0
   8105a:	4603      	mov	r3, r0
   8105c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8105e:	4909      	ldr	r1, [pc, #36]	; (81084 <NVIC_ClearPendingIRQ+0x30>)
   81060:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81064:	095b      	lsrs	r3, r3, #5
   81066:	79fa      	ldrb	r2, [r7, #7]
   81068:	f002 021f 	and.w	r2, r2, #31
   8106c:	2001      	movs	r0, #1
   8106e:	fa00 f202 	lsl.w	r2, r0, r2
   81072:	3360      	adds	r3, #96	; 0x60
   81074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81078:	bf00      	nop
   8107a:	370c      	adds	r7, #12
   8107c:	46bd      	mov	sp, r7
   8107e:	bc80      	pop	{r7}
   81080:	4770      	bx	lr
   81082:	bf00      	nop
   81084:	e000e100 	.word	0xe000e100

00081088 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   81088:	b480      	push	{r7}
   8108a:	b083      	sub	sp, #12
   8108c:	af00      	add	r7, sp, #0
   8108e:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   81090:	687b      	ldr	r3, [r7, #4]
   81092:	2208      	movs	r2, #8
   81094:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   81096:	687b      	ldr	r3, [r7, #4]
   81098:	2220      	movs	r2, #32
   8109a:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   8109c:	687b      	ldr	r3, [r7, #4]
   8109e:	2204      	movs	r2, #4
   810a0:	601a      	str	r2, [r3, #0]
}
   810a2:	bf00      	nop
   810a4:	370c      	adds	r7, #12
   810a6:	46bd      	mov	sp, r7
   810a8:	bc80      	pop	{r7}
   810aa:	4770      	bx	lr

000810ac <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   810ac:	b580      	push	{r7, lr}
   810ae:	b084      	sub	sp, #16
   810b0:	af00      	add	r7, sp, #0
   810b2:	6078      	str	r0, [r7, #4]
   810b4:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   810b6:	2300      	movs	r3, #0
   810b8:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   810ba:	687b      	ldr	r3, [r7, #4]
   810bc:	f04f 32ff 	mov.w	r2, #4294967295
   810c0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   810c2:	687b      	ldr	r3, [r7, #4]
   810c4:	6a1b      	ldr	r3, [r3, #32]

	twi_disable_interrupt(p_twi, MASK_ALL_INTERRUPTS);
   810c6:	f04f 31ff 	mov.w	r1, #4294967295
   810ca:	6878      	ldr	r0, [r7, #4]
   810cc:	4b14      	ldr	r3, [pc, #80]	; (81120 <twi_master_init+0x74>)
   810ce:	4798      	blx	r3

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   810d0:	6878      	ldr	r0, [r7, #4]
   810d2:	4b14      	ldr	r3, [pc, #80]	; (81124 <twi_master_init+0x78>)
   810d4:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   810d6:	6878      	ldr	r0, [r7, #4]
   810d8:	4b13      	ldr	r3, [pc, #76]	; (81128 <twi_master_init+0x7c>)
   810da:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   810dc:	683b      	ldr	r3, [r7, #0]
   810de:	6859      	ldr	r1, [r3, #4]
   810e0:	683b      	ldr	r3, [r7, #0]
   810e2:	681b      	ldr	r3, [r3, #0]
   810e4:	461a      	mov	r2, r3
   810e6:	6878      	ldr	r0, [r7, #4]
   810e8:	4b10      	ldr	r3, [pc, #64]	; (8112c <twi_master_init+0x80>)
   810ea:	4798      	blx	r3
   810ec:	4603      	mov	r3, r0
   810ee:	2b01      	cmp	r3, #1
   810f0:	d101      	bne.n	810f6 <twi_master_init+0x4a>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   810f2:	2301      	movs	r3, #1
   810f4:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   810f6:	683b      	ldr	r3, [r7, #0]
   810f8:	7a5b      	ldrb	r3, [r3, #9]
   810fa:	2b01      	cmp	r3, #1
   810fc:	d102      	bne.n	81104 <twi_master_init+0x58>
		p_twi->TWI_CR = TWI_CR_QUICK;
   810fe:	687b      	ldr	r3, [r7, #4]
   81100:	2240      	movs	r2, #64	; 0x40
   81102:	601a      	str	r2, [r3, #0]
	}
    
    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   81104:	f44f 7150 	mov.w	r1, #832	; 0x340
   81108:	6878      	ldr	r0, [r7, #4]
   8110a:	4b09      	ldr	r3, [pc, #36]	; (81130 <twi_master_init+0x84>)
   8110c:	4798      	blx	r3

    twiBusy = false;
   8110e:	4b09      	ldr	r3, [pc, #36]	; (81134 <twi_master_init+0x88>)
   81110:	2200      	movs	r2, #0
   81112:	701a      	strb	r2, [r3, #0]
    
	return status;
   81114:	68fb      	ldr	r3, [r7, #12]
}
   81116:	4618      	mov	r0, r3
   81118:	3710      	adds	r7, #16
   8111a:	46bd      	mov	sp, r7
   8111c:	bd80      	pop	{r7, pc}
   8111e:	bf00      	nop
   81120:	0008167f 	.word	0x0008167f
   81124:	000816e1 	.word	0x000816e1
   81128:	00081089 	.word	0x00081089
   8112c:	00081139 	.word	0x00081139
   81130:	00081665 	.word	0x00081665
   81134:	20070d98 	.word	0x20070d98

00081138 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   81138:	b480      	push	{r7}
   8113a:	b089      	sub	sp, #36	; 0x24
   8113c:	af00      	add	r7, sp, #0
   8113e:	60f8      	str	r0, [r7, #12]
   81140:	60b9      	str	r1, [r7, #8]
   81142:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   81144:	2300      	movs	r3, #0
   81146:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   81148:	68bb      	ldr	r3, [r7, #8]
   8114a:	4a34      	ldr	r2, [pc, #208]	; (8121c <twi_set_speed+0xe4>)
   8114c:	4293      	cmp	r3, r2
   8114e:	d901      	bls.n	81154 <twi_set_speed+0x1c>
		return FAIL;
   81150:	2301      	movs	r3, #1
   81152:	e05d      	b.n	81210 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   81154:	68bb      	ldr	r3, [r7, #8]
   81156:	4a32      	ldr	r2, [pc, #200]	; (81220 <twi_set_speed+0xe8>)
   81158:	4293      	cmp	r3, r2
   8115a:	d937      	bls.n	811cc <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8115c:	687b      	ldr	r3, [r7, #4]
   8115e:	4a31      	ldr	r2, [pc, #196]	; (81224 <twi_set_speed+0xec>)
   81160:	fba2 2303 	umull	r2, r3, r2, r3
   81164:	0b9b      	lsrs	r3, r3, #14
   81166:	3b04      	subs	r3, #4
   81168:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8116a:	68ba      	ldr	r2, [r7, #8]
   8116c:	4b2e      	ldr	r3, [pc, #184]	; (81228 <twi_set_speed+0xf0>)
   8116e:	4413      	add	r3, r2
   81170:	009b      	lsls	r3, r3, #2
   81172:	687a      	ldr	r2, [r7, #4]
   81174:	fbb2 f3f3 	udiv	r3, r2, r3
   81178:	3b04      	subs	r3, #4
   8117a:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8117c:	e005      	b.n	8118a <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   8117e:	69fb      	ldr	r3, [r7, #28]
   81180:	3301      	adds	r3, #1
   81182:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   81184:	697b      	ldr	r3, [r7, #20]
   81186:	085b      	lsrs	r3, r3, #1
   81188:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8118a:	697b      	ldr	r3, [r7, #20]
   8118c:	2bff      	cmp	r3, #255	; 0xff
   8118e:	d909      	bls.n	811a4 <twi_set_speed+0x6c>
   81190:	69fb      	ldr	r3, [r7, #28]
   81192:	2b06      	cmp	r3, #6
   81194:	d9f3      	bls.n	8117e <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81196:	e005      	b.n	811a4 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   81198:	69fb      	ldr	r3, [r7, #28]
   8119a:	3301      	adds	r3, #1
   8119c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   8119e:	693b      	ldr	r3, [r7, #16]
   811a0:	085b      	lsrs	r3, r3, #1
   811a2:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   811a4:	693b      	ldr	r3, [r7, #16]
   811a6:	2bff      	cmp	r3, #255	; 0xff
   811a8:	d902      	bls.n	811b0 <twi_set_speed+0x78>
   811aa:	69fb      	ldr	r3, [r7, #28]
   811ac:	2b06      	cmp	r3, #6
   811ae:	d9f3      	bls.n	81198 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   811b0:	697b      	ldr	r3, [r7, #20]
   811b2:	b2da      	uxtb	r2, r3
   811b4:	693b      	ldr	r3, [r7, #16]
   811b6:	021b      	lsls	r3, r3, #8
   811b8:	b29b      	uxth	r3, r3
   811ba:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   811bc:	69fb      	ldr	r3, [r7, #28]
   811be:	041b      	lsls	r3, r3, #16
   811c0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   811c4:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   811c6:	68fb      	ldr	r3, [r7, #12]
   811c8:	611a      	str	r2, [r3, #16]
   811ca:	e020      	b.n	8120e <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   811cc:	68bb      	ldr	r3, [r7, #8]
   811ce:	005b      	lsls	r3, r3, #1
   811d0:	687a      	ldr	r2, [r7, #4]
   811d2:	fbb2 f3f3 	udiv	r3, r2, r3
   811d6:	3b04      	subs	r3, #4
   811d8:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   811da:	e005      	b.n	811e8 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   811dc:	69fb      	ldr	r3, [r7, #28]
   811de:	3301      	adds	r3, #1
   811e0:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   811e2:	69bb      	ldr	r3, [r7, #24]
   811e4:	085b      	lsrs	r3, r3, #1
   811e6:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   811e8:	69bb      	ldr	r3, [r7, #24]
   811ea:	2bff      	cmp	r3, #255	; 0xff
   811ec:	d902      	bls.n	811f4 <twi_set_speed+0xbc>
   811ee:	69fb      	ldr	r3, [r7, #28]
   811f0:	2b06      	cmp	r3, #6
   811f2:	d9f3      	bls.n	811dc <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   811f4:	69bb      	ldr	r3, [r7, #24]
   811f6:	b2da      	uxtb	r2, r3
   811f8:	69bb      	ldr	r3, [r7, #24]
   811fa:	021b      	lsls	r3, r3, #8
   811fc:	b29b      	uxth	r3, r3
   811fe:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   81200:	69fb      	ldr	r3, [r7, #28]
   81202:	041b      	lsls	r3, r3, #16
   81204:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   81208:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   8120a:	68fb      	ldr	r3, [r7, #12]
   8120c:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   8120e:	2300      	movs	r3, #0
}
   81210:	4618      	mov	r0, r3
   81212:	3724      	adds	r7, #36	; 0x24
   81214:	46bd      	mov	sp, r7
   81216:	bc80      	pop	{r7}
   81218:	4770      	bx	lr
   8121a:	bf00      	nop
   8121c:	00061a80 	.word	0x00061a80
   81220:	0005dc00 	.word	0x0005dc00
   81224:	057619f1 	.word	0x057619f1
   81228:	3ffd1200 	.word	0x3ffd1200

0008122c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   8122c:	b480      	push	{r7}
   8122e:	b085      	sub	sp, #20
   81230:	af00      	add	r7, sp, #0
   81232:	6078      	str	r0, [r7, #4]
   81234:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   81236:	683b      	ldr	r3, [r7, #0]
   81238:	2b00      	cmp	r3, #0
   8123a:	d101      	bne.n	81240 <twi_mk_addr+0x14>
		return 0;
   8123c:	2300      	movs	r3, #0
   8123e:	e01d      	b.n	8127c <twi_mk_addr+0x50>

	val = addr[0];
   81240:	687b      	ldr	r3, [r7, #4]
   81242:	781b      	ldrb	r3, [r3, #0]
   81244:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   81246:	683b      	ldr	r3, [r7, #0]
   81248:	2b01      	cmp	r3, #1
   8124a:	dd09      	ble.n	81260 <twi_mk_addr+0x34>
		val <<= 8;
   8124c:	68fb      	ldr	r3, [r7, #12]
   8124e:	021b      	lsls	r3, r3, #8
   81250:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   81252:	687b      	ldr	r3, [r7, #4]
   81254:	3301      	adds	r3, #1
   81256:	781b      	ldrb	r3, [r3, #0]
   81258:	461a      	mov	r2, r3
   8125a:	68fb      	ldr	r3, [r7, #12]
   8125c:	4313      	orrs	r3, r2
   8125e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   81260:	683b      	ldr	r3, [r7, #0]
   81262:	2b02      	cmp	r3, #2
   81264:	dd09      	ble.n	8127a <twi_mk_addr+0x4e>
		val <<= 8;
   81266:	68fb      	ldr	r3, [r7, #12]
   81268:	021b      	lsls	r3, r3, #8
   8126a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   8126c:	687b      	ldr	r3, [r7, #4]
   8126e:	3302      	adds	r3, #2
   81270:	781b      	ldrb	r3, [r3, #0]
   81272:	461a      	mov	r2, r3
   81274:	68fb      	ldr	r3, [r7, #12]
   81276:	4313      	orrs	r3, r2
   81278:	60fb      	str	r3, [r7, #12]
	}
	return val;
   8127a:	68fb      	ldr	r3, [r7, #12]
}
   8127c:	4618      	mov	r0, r3
   8127e:	3714      	adds	r7, #20
   81280:	46bd      	mov	sp, r7
   81282:	bc80      	pop	{r7}
   81284:	4770      	bx	lr
	...

00081288 <twi_is_busy>:
	}
}
#endif
#if 1
uint8_t twi_is_busy(void)
{
   81288:	b480      	push	{r7}
   8128a:	af00      	add	r7, sp, #0
    return twiBusy;
   8128c:	4b02      	ldr	r3, [pc, #8]	; (81298 <twi_is_busy+0x10>)
   8128e:	781b      	ldrb	r3, [r3, #0]
}
   81290:	4618      	mov	r0, r3
   81292:	46bd      	mov	sp, r7
   81294:	bc80      	pop	{r7}
   81296:	4770      	bx	lr
   81298:	20070d98 	.word	0x20070d98

0008129c <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   8129c:	b480      	push	{r7}
   8129e:	af00      	add	r7, sp, #0
    return &txPacket;
   812a0:	4b02      	ldr	r3, [pc, #8]	; (812ac <twi_get_tx_packet+0x10>)
}
   812a2:	4618      	mov	r0, r3
   812a4:	46bd      	mov	sp, r7
   812a6:	bc80      	pop	{r7}
   812a8:	4770      	bx	lr
   812aa:	bf00      	nop
   812ac:	20070b78 	.word	0x20070b78

000812b0 <twi_get_rx_packet>:

twi_packet_t *twi_get_rx_packet(void)
{
   812b0:	b480      	push	{r7}
   812b2:	af00      	add	r7, sp, #0
    return &rxPacket;
   812b4:	4b02      	ldr	r3, [pc, #8]	; (812c0 <twi_get_rx_packet+0x10>)
}
   812b6:	4618      	mov	r0, r3
   812b8:	46bd      	mov	sp, r7
   812ba:	bc80      	pop	{r7}
   812bc:	4770      	bx	lr
   812be:	bf00      	nop
   812c0:	20070c88 	.word	0x20070c88

000812c4 <twi_pdc_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_pdc_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   812c4:	b580      	push	{r7, lr}
   812c6:	b084      	sub	sp, #16
   812c8:	af00      	add	r7, sp, #0
   812ca:	6078      	str	r0, [r7, #4]
   812cc:	6039      	str	r1, [r7, #0]
    pdc_packet_t rxPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   812ce:	683b      	ldr	r3, [r7, #0]
   812d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   812d4:	2b00      	cmp	r3, #0
   812d6:	d101      	bne.n	812dc <twi_pdc_master_read+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   812d8:	2301      	movs	r3, #1
   812da:	e047      	b.n	8136c <twi_pdc_master_read+0xa8>
    }
    
    twiBusy = true;
   812dc:	4b25      	ldr	r3, [pc, #148]	; (81374 <twi_pdc_master_read+0xb0>)
   812de:	2201      	movs	r2, #1
   812e0:	701a      	strb	r2, [r3, #0]

    // Ensure Rx is already empty
    twi_read_byte(TWI0);
   812e2:	4825      	ldr	r0, [pc, #148]	; (81378 <twi_pdc_master_read+0xb4>)
   812e4:	4b25      	ldr	r3, [pc, #148]	; (8137c <twi_pdc_master_read+0xb8>)
   812e6:	4798      	blx	r3

    // Set read mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   812e8:	687b      	ldr	r3, [r7, #4]
   812ea:	2200      	movs	r2, #0
   812ec:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   812ee:	683b      	ldr	r3, [r7, #0]
   812f0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   812f4:	041b      	lsls	r3, r3, #16
   812f6:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   812fa:	683b      	ldr	r3, [r7, #0]
   812fc:	685b      	ldr	r3, [r3, #4]
   812fe:	021b      	lsls	r3, r3, #8
   81300:	f403 7340 	and.w	r3, r3, #768	; 0x300
   81304:	4313      	orrs	r3, r2
   81306:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   8130a:	687b      	ldr	r3, [r7, #4]
   8130c:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   8130e:	687b      	ldr	r3, [r7, #4]
   81310:	2200      	movs	r2, #0
   81312:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   81314:	683a      	ldr	r2, [r7, #0]
   81316:	683b      	ldr	r3, [r7, #0]
   81318:	685b      	ldr	r3, [r3, #4]
   8131a:	4619      	mov	r1, r3
   8131c:	4610      	mov	r0, r2
   8131e:	4b18      	ldr	r3, [pc, #96]	; (81380 <twi_pdc_master_read+0xbc>)
   81320:	4798      	blx	r3
   81322:	4602      	mov	r2, r0
   81324:	687b      	ldr	r3, [r7, #4]
   81326:	60da      	str	r2, [r3, #12]
        twi_enable_interrupt(TWI0, IER_ERROR_INTERRUPTS);
    }
    else
    {
#endif
        rxPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   81328:	683b      	ldr	r3, [r7, #0]
   8132a:	3308      	adds	r3, #8
   8132c:	60bb      	str	r3, [r7, #8]
        rxPdcPacket.ul_size = p_packet->length - 1;
   8132e:	683b      	ldr	r3, [r7, #0]
   81330:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81334:	3b01      	subs	r3, #1
   81336:	60fb      	str	r3, [r7, #12]
        pdc_rx_init(PDC_TWI0, &rxPdcPacket, NULL);
   81338:	f107 0308 	add.w	r3, r7, #8
   8133c:	2200      	movs	r2, #0
   8133e:	4619      	mov	r1, r3
   81340:	4810      	ldr	r0, [pc, #64]	; (81384 <twi_pdc_master_read+0xc0>)
   81342:	4b11      	ldr	r3, [pc, #68]	; (81388 <twi_pdc_master_read+0xc4>)
   81344:	4798      	blx	r3

        pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_RXTEN);
   81346:	2101      	movs	r1, #1
   81348:	480e      	ldr	r0, [pc, #56]	; (81384 <twi_pdc_master_read+0xc0>)
   8134a:	4b10      	ldr	r3, [pc, #64]	; (8138c <twi_pdc_master_read+0xc8>)
   8134c:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_START;
   8134e:	4b0a      	ldr	r3, [pc, #40]	; (81378 <twi_pdc_master_read+0xb4>)
   81350:	2201      	movs	r2, #1
   81352:	601a      	str	r2, [r3, #0]

        twi_enable_interrupt(p_twi, TWI_IER_ENDRX);
   81354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81358:	6878      	ldr	r0, [r7, #4]
   8135a:	4b0d      	ldr	r3, [pc, #52]	; (81390 <twi_pdc_master_read+0xcc>)
   8135c:	4798      	blx	r3
        NVIC_ClearPendingIRQ(TWI0_IRQn);
   8135e:	2016      	movs	r0, #22
   81360:	4b0c      	ldr	r3, [pc, #48]	; (81394 <twi_pdc_master_read+0xd0>)
   81362:	4798      	blx	r3
        NVIC_EnableIRQ(TWI0_IRQn);
   81364:	2016      	movs	r0, #22
   81366:	4b0c      	ldr	r3, [pc, #48]	; (81398 <twi_pdc_master_read+0xd4>)
   81368:	4798      	blx	r3
//    }

    return TWI_SUCCESS;
   8136a:	2300      	movs	r3, #0
}
   8136c:	4618      	mov	r0, r3
   8136e:	3710      	adds	r7, #16
   81370:	46bd      	mov	sp, r7
   81372:	bd80      	pop	{r7, pc}
   81374:	20070d98 	.word	0x20070d98
   81378:	4008c000 	.word	0x4008c000
   8137c:	000816c9 	.word	0x000816c9
   81380:	0008122d 	.word	0x0008122d
   81384:	4008c100 	.word	0x4008c100
   81388:	000801eb 	.word	0x000801eb
   8138c:	0008022d 	.word	0x0008022d
   81390:	00081665 	.word	0x00081665
   81394:	00081055 	.word	0x00081055
   81398:	00081025 	.word	0x00081025

0008139c <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   8139c:	b580      	push	{r7, lr}
   8139e:	b084      	sub	sp, #16
   813a0:	af00      	add	r7, sp, #0
   813a2:	6078      	str	r0, [r7, #4]
   813a4:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   813a6:	683b      	ldr	r3, [r7, #0]
   813a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   813ac:	2b00      	cmp	r3, #0
   813ae:	d101      	bne.n	813b4 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   813b0:	2301      	movs	r3, #1
   813b2:	e040      	b.n	81436 <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   813b4:	4b22      	ldr	r3, [pc, #136]	; (81440 <twi_pdc_master_write+0xa4>)
   813b6:	2201      	movs	r2, #1
   813b8:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   813ba:	683b      	ldr	r3, [r7, #0]
   813bc:	3308      	adds	r3, #8
   813be:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   813c0:	683b      	ldr	r3, [r7, #0]
   813c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   813c6:	3b01      	subs	r3, #1
   813c8:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   813ca:	f107 0308 	add.w	r3, r7, #8
   813ce:	2200      	movs	r2, #0
   813d0:	4619      	mov	r1, r3
   813d2:	481c      	ldr	r0, [pc, #112]	; (81444 <twi_pdc_master_write+0xa8>)
   813d4:	4b1c      	ldr	r3, [pc, #112]	; (81448 <twi_pdc_master_write+0xac>)
   813d6:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   813d8:	687b      	ldr	r3, [r7, #4]
   813da:	2200      	movs	r2, #0
   813dc:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   813de:	683b      	ldr	r3, [r7, #0]
   813e0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   813e4:	041b      	lsls	r3, r3, #16
   813e6:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   813ea:	683b      	ldr	r3, [r7, #0]
   813ec:	685b      	ldr	r3, [r3, #4]
   813ee:	021b      	lsls	r3, r3, #8
   813f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
   813f4:	431a      	orrs	r2, r3
   813f6:	687b      	ldr	r3, [r7, #4]
   813f8:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   813fa:	687b      	ldr	r3, [r7, #4]
   813fc:	2200      	movs	r2, #0
   813fe:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   81400:	683a      	ldr	r2, [r7, #0]
   81402:	683b      	ldr	r3, [r7, #0]
   81404:	685b      	ldr	r3, [r3, #4]
   81406:	4619      	mov	r1, r3
   81408:	4610      	mov	r0, r2
   8140a:	4b10      	ldr	r3, [pc, #64]	; (8144c <twi_pdc_master_write+0xb0>)
   8140c:	4798      	blx	r3
   8140e:	4602      	mov	r2, r0
   81410:	687b      	ldr	r3, [r7, #4]
   81412:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   81414:	f44f 7180 	mov.w	r1, #256	; 0x100
   81418:	480a      	ldr	r0, [pc, #40]	; (81444 <twi_pdc_master_write+0xa8>)
   8141a:	4b0d      	ldr	r3, [pc, #52]	; (81450 <twi_pdc_master_write+0xb4>)
   8141c:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   8141e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81422:	6878      	ldr	r0, [r7, #4]
   81424:	4b0b      	ldr	r3, [pc, #44]	; (81454 <twi_pdc_master_write+0xb8>)
   81426:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   81428:	2016      	movs	r0, #22
   8142a:	4b0b      	ldr	r3, [pc, #44]	; (81458 <twi_pdc_master_write+0xbc>)
   8142c:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   8142e:	2016      	movs	r0, #22
   81430:	4b0a      	ldr	r3, [pc, #40]	; (8145c <twi_pdc_master_write+0xc0>)
   81432:	4798      	blx	r3

    return TWI_SUCCESS;
   81434:	2300      	movs	r3, #0
}
   81436:	4618      	mov	r0, r3
   81438:	3710      	adds	r7, #16
   8143a:	46bd      	mov	sp, r7
   8143c:	bd80      	pop	{r7, pc}
   8143e:	bf00      	nop
   81440:	20070d98 	.word	0x20070d98
   81444:	4008c100 	.word	0x4008c100
   81448:	000801a9 	.word	0x000801a9
   8144c:	0008122d 	.word	0x0008122d
   81450:	0008022d 	.word	0x0008022d
   81454:	00081665 	.word	0x00081665
   81458:	00081055 	.word	0x00081055
   8145c:	00081025 	.word	0x00081025

00081460 <twi_set_compass_rx_callback>:
 * \brief Callback function for TWI receive.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_rx_callback(void (*callback)(void))
{
   81460:	b480      	push	{r7}
   81462:	b083      	sub	sp, #12
   81464:	af00      	add	r7, sp, #0
   81466:	6078      	str	r0, [r7, #4]
    compassRxCallback = callback;
   81468:	4a03      	ldr	r2, [pc, #12]	; (81478 <twi_set_compass_rx_callback+0x18>)
   8146a:	687b      	ldr	r3, [r7, #4]
   8146c:	6013      	str	r3, [r2, #0]
}
   8146e:	bf00      	nop
   81470:	370c      	adds	r7, #12
   81472:	46bd      	mov	sp, r7
   81474:	bc80      	pop	{r7}
   81476:	4770      	bx	lr
   81478:	20070da4 	.word	0x20070da4

0008147c <twi_set_compass_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_tx_callback(void (*callback)(void))
{
   8147c:	b480      	push	{r7}
   8147e:	b083      	sub	sp, #12
   81480:	af00      	add	r7, sp, #0
   81482:	6078      	str	r0, [r7, #4]
    compassTxCallback = callback;
   81484:	4a03      	ldr	r2, [pc, #12]	; (81494 <twi_set_compass_tx_callback+0x18>)
   81486:	687b      	ldr	r3, [r7, #4]
   81488:	6013      	str	r3, [r2, #0]
}
   8148a:	bf00      	nop
   8148c:	370c      	adds	r7, #12
   8148e:	46bd      	mov	sp, r7
   81490:	bc80      	pop	{r7}
   81492:	4770      	bx	lr
   81494:	20070da0 	.word	0x20070da0

00081498 <twi_set_lcd_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_lcd_tx_callback(void (*callback)(void))
{
   81498:	b480      	push	{r7}
   8149a:	b083      	sub	sp, #12
   8149c:	af00      	add	r7, sp, #0
   8149e:	6078      	str	r0, [r7, #4]
    lcdTxCallback = callback;
   814a0:	4a03      	ldr	r2, [pc, #12]	; (814b0 <twi_set_lcd_tx_callback+0x18>)
   814a2:	687b      	ldr	r3, [r7, #4]
   814a4:	6013      	str	r3, [r2, #0]
}
   814a6:	bf00      	nop
   814a8:	370c      	adds	r7, #12
   814aa:	46bd      	mov	sp, r7
   814ac:	bc80      	pop	{r7}
   814ae:	4770      	bx	lr
   814b0:	20070d9c 	.word	0x20070d9c

000814b4 <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   814b4:	b590      	push	{r4, r7, lr}
   814b6:	b083      	sub	sp, #12
   814b8:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   814ba:	485d      	ldr	r0, [pc, #372]	; (81630 <TWI0_Handler+0x17c>)
   814bc:	4b5d      	ldr	r3, [pc, #372]	; (81634 <TWI0_Handler+0x180>)
   814be:	4798      	blx	r3
   814c0:	4604      	mov	r4, r0
   814c2:	485b      	ldr	r0, [pc, #364]	; (81630 <TWI0_Handler+0x17c>)
   814c4:	4b5c      	ldr	r3, [pc, #368]	; (81638 <TWI0_Handler+0x184>)
   814c6:	4798      	blx	r3
   814c8:	4603      	mov	r3, r0
   814ca:	4023      	ands	r3, r4
   814cc:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   814ce:	687b      	ldr	r3, [r7, #4]
   814d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   814d4:	2b00      	cmp	r3, #0
   814d6:	d014      	beq.n	81502 <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   814d8:	f44f 7100 	mov.w	r1, #512	; 0x200
   814dc:	4857      	ldr	r0, [pc, #348]	; (8163c <TWI0_Handler+0x188>)
   814de:	4b58      	ldr	r3, [pc, #352]	; (81640 <TWI0_Handler+0x18c>)
   814e0:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   814e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   814e6:	4852      	ldr	r0, [pc, #328]	; (81630 <TWI0_Handler+0x17c>)
   814e8:	4b56      	ldr	r3, [pc, #344]	; (81644 <TWI0_Handler+0x190>)
   814ea:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   814ec:	2104      	movs	r1, #4
   814ee:	4850      	ldr	r0, [pc, #320]	; (81630 <TWI0_Handler+0x17c>)
   814f0:	4b55      	ldr	r3, [pc, #340]	; (81648 <TWI0_Handler+0x194>)
   814f2:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   814f4:	484e      	ldr	r0, [pc, #312]	; (81630 <TWI0_Handler+0x17c>)
   814f6:	4b4f      	ldr	r3, [pc, #316]	; (81634 <TWI0_Handler+0x180>)
   814f8:	4798      	blx	r3
   814fa:	4602      	mov	r2, r0
   814fc:	687b      	ldr	r3, [r7, #4]
   814fe:	4313      	orrs	r3, r2
   81500:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   81502:	687b      	ldr	r3, [r7, #4]
   81504:	f003 0304 	and.w	r3, r3, #4
   81508:	2b00      	cmp	r3, #0
   8150a:	d01a      	beq.n	81542 <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   8150c:	2104      	movs	r1, #4
   8150e:	4848      	ldr	r0, [pc, #288]	; (81630 <TWI0_Handler+0x17c>)
   81510:	4b4c      	ldr	r3, [pc, #304]	; (81644 <TWI0_Handler+0x190>)
   81512:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   81514:	4b46      	ldr	r3, [pc, #280]	; (81630 <TWI0_Handler+0x17c>)
   81516:	2202      	movs	r2, #2
   81518:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   8151a:	4a45      	ldr	r2, [pc, #276]	; (81630 <TWI0_Handler+0x17c>)
   8151c:	4b4b      	ldr	r3, [pc, #300]	; (8164c <TWI0_Handler+0x198>)
   8151e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81522:	3b01      	subs	r3, #1
   81524:	4949      	ldr	r1, [pc, #292]	; (8164c <TWI0_Handler+0x198>)
   81526:	440b      	add	r3, r1
   81528:	7a1b      	ldrb	r3, [r3, #8]
   8152a:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   8152c:	2101      	movs	r1, #1
   8152e:	4840      	ldr	r0, [pc, #256]	; (81630 <TWI0_Handler+0x17c>)
   81530:	4b45      	ldr	r3, [pc, #276]	; (81648 <TWI0_Handler+0x194>)
   81532:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   81534:	483e      	ldr	r0, [pc, #248]	; (81630 <TWI0_Handler+0x17c>)
   81536:	4b3f      	ldr	r3, [pc, #252]	; (81634 <TWI0_Handler+0x180>)
   81538:	4798      	blx	r3
   8153a:	4602      	mov	r2, r0
   8153c:	687b      	ldr	r3, [r7, #4]
   8153e:	4313      	orrs	r3, r2
   81540:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   81542:	687b      	ldr	r3, [r7, #4]
   81544:	f003 0301 	and.w	r3, r3, #1
   81548:	2b00      	cmp	r3, #0
   8154a:	d014      	beq.n	81576 <TWI0_Handler+0xc2>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   8154c:	2101      	movs	r1, #1
   8154e:	4838      	ldr	r0, [pc, #224]	; (81630 <TWI0_Handler+0x17c>)
   81550:	4b3c      	ldr	r3, [pc, #240]	; (81644 <TWI0_Handler+0x190>)
   81552:	4798      	blx	r3

        // If defined, call the connected function.
        if(compassTxCallback != NULL)
   81554:	4b3e      	ldr	r3, [pc, #248]	; (81650 <TWI0_Handler+0x19c>)
   81556:	681b      	ldr	r3, [r3, #0]
   81558:	2b00      	cmp	r3, #0
   8155a:	d002      	beq.n	81562 <TWI0_Handler+0xae>
        {
            compassTxCallback();
   8155c:	4b3c      	ldr	r3, [pc, #240]	; (81650 <TWI0_Handler+0x19c>)
   8155e:	681b      	ldr	r3, [r3, #0]
   81560:	4798      	blx	r3
        }

        // If defined, call the connected function.
        if(lcdTxCallback != NULL)
   81562:	4b3c      	ldr	r3, [pc, #240]	; (81654 <TWI0_Handler+0x1a0>)
   81564:	681b      	ldr	r3, [r3, #0]
   81566:	2b00      	cmp	r3, #0
   81568:	d002      	beq.n	81570 <TWI0_Handler+0xbc>
        {
          lcdTxCallback();
   8156a:	4b3a      	ldr	r3, [pc, #232]	; (81654 <TWI0_Handler+0x1a0>)
   8156c:	681b      	ldr	r3, [r3, #0]
   8156e:	4798      	blx	r3
        }

        twiBusy = false;
   81570:	4b39      	ldr	r3, [pc, #228]	; (81658 <TWI0_Handler+0x1a4>)
   81572:	2200      	movs	r2, #0
   81574:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   81576:	687b      	ldr	r3, [r7, #4]
   81578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   8157c:	2b00      	cmp	r3, #0
   8157e:	d016      	beq.n	815ae <TWI0_Handler+0xfa>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   81580:	2102      	movs	r1, #2
   81582:	482e      	ldr	r0, [pc, #184]	; (8163c <TWI0_Handler+0x188>)
   81584:	4b2e      	ldr	r3, [pc, #184]	; (81640 <TWI0_Handler+0x18c>)
   81586:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   81588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8158c:	4828      	ldr	r0, [pc, #160]	; (81630 <TWI0_Handler+0x17c>)
   8158e:	4b2d      	ldr	r3, [pc, #180]	; (81644 <TWI0_Handler+0x190>)
   81590:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   81592:	2102      	movs	r1, #2
   81594:	4826      	ldr	r0, [pc, #152]	; (81630 <TWI0_Handler+0x17c>)
   81596:	4b2c      	ldr	r3, [pc, #176]	; (81648 <TWI0_Handler+0x194>)
   81598:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   8159a:	4b25      	ldr	r3, [pc, #148]	; (81630 <TWI0_Handler+0x17c>)
   8159c:	2202      	movs	r2, #2
   8159e:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   815a0:	4823      	ldr	r0, [pc, #140]	; (81630 <TWI0_Handler+0x17c>)
   815a2:	4b24      	ldr	r3, [pc, #144]	; (81634 <TWI0_Handler+0x180>)
   815a4:	4798      	blx	r3
   815a6:	4602      	mov	r2, r0
   815a8:	687b      	ldr	r3, [r7, #4]
   815aa:	4313      	orrs	r3, r2
   815ac:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   815ae:	687b      	ldr	r3, [r7, #4]
   815b0:	f003 0302 	and.w	r3, r3, #2
   815b4:	2b00      	cmp	r3, #0
   815b6:	d018      	beq.n	815ea <TWI0_Handler+0x136>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   815b8:	2102      	movs	r1, #2
   815ba:	481d      	ldr	r0, [pc, #116]	; (81630 <TWI0_Handler+0x17c>)
   815bc:	4b21      	ldr	r3, [pc, #132]	; (81644 <TWI0_Handler+0x190>)
   815be:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   815c0:	4b26      	ldr	r3, [pc, #152]	; (8165c <TWI0_Handler+0x1a8>)
   815c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   815c6:	3b01      	subs	r3, #1
   815c8:	4a19      	ldr	r2, [pc, #100]	; (81630 <TWI0_Handler+0x17c>)
   815ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
   815cc:	b2d1      	uxtb	r1, r2
   815ce:	4a23      	ldr	r2, [pc, #140]	; (8165c <TWI0_Handler+0x1a8>)
   815d0:	4413      	add	r3, r2
   815d2:	460a      	mov	r2, r1
   815d4:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(compassRxCallback != NULL)
   815d6:	4b22      	ldr	r3, [pc, #136]	; (81660 <TWI0_Handler+0x1ac>)
   815d8:	681b      	ldr	r3, [r3, #0]
   815da:	2b00      	cmp	r3, #0
   815dc:	d002      	beq.n	815e4 <TWI0_Handler+0x130>
        {
            compassRxCallback();
   815de:	4b20      	ldr	r3, [pc, #128]	; (81660 <TWI0_Handler+0x1ac>)
   815e0:	681b      	ldr	r3, [r3, #0]
   815e2:	4798      	blx	r3
        }

        twiBusy = false;
   815e4:	4b1c      	ldr	r3, [pc, #112]	; (81658 <TWI0_Handler+0x1a4>)
   815e6:	2200      	movs	r2, #0
   815e8:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   815ea:	687b      	ldr	r3, [r7, #4]
   815ec:	f403 7350 	and.w	r3, r3, #832	; 0x340
   815f0:	2b00      	cmp	r3, #0
   815f2:	d019      	beq.n	81628 <TWI0_Handler+0x174>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   815f4:	f240 2102 	movw	r1, #514	; 0x202
   815f8:	4810      	ldr	r0, [pc, #64]	; (8163c <TWI0_Handler+0x188>)
   815fa:	4b11      	ldr	r3, [pc, #68]	; (81640 <TWI0_Handler+0x18c>)
   815fc:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   815fe:	687b      	ldr	r3, [r7, #4]
   81600:	f403 7380 	and.w	r3, r3, #256	; 0x100
   81604:	2b00      	cmp	r3, #0
   81606:	d102      	bne.n	8160e <TWI0_Handler+0x15a>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   81608:	4b09      	ldr	r3, [pc, #36]	; (81630 <TWI0_Handler+0x17c>)
   8160a:	2202      	movs	r2, #2
   8160c:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   8160e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81612:	4807      	ldr	r0, [pc, #28]	; (81630 <TWI0_Handler+0x17c>)
   81614:	4b0b      	ldr	r3, [pc, #44]	; (81644 <TWI0_Handler+0x190>)
   81616:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   81618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8161c:	4804      	ldr	r0, [pc, #16]	; (81630 <TWI0_Handler+0x17c>)
   8161e:	4b09      	ldr	r3, [pc, #36]	; (81644 <TWI0_Handler+0x190>)
   81620:	4798      	blx	r3

        twiBusy = false;
   81622:	4b0d      	ldr	r3, [pc, #52]	; (81658 <TWI0_Handler+0x1a4>)
   81624:	2200      	movs	r2, #0
   81626:	701a      	strb	r2, [r3, #0]
	}
}
   81628:	bf00      	nop
   8162a:	370c      	adds	r7, #12
   8162c:	46bd      	mov	sp, r7
   8162e:	bd90      	pop	{r4, r7, pc}
   81630:	4008c000 	.word	0x4008c000
   81634:	0008169d 	.word	0x0008169d
   81638:	000816b3 	.word	0x000816b3
   8163c:	4008c100 	.word	0x4008c100
   81640:	0008024d 	.word	0x0008024d
   81644:	0008167f 	.word	0x0008167f
   81648:	00081665 	.word	0x00081665
   8164c:	20070b78 	.word	0x20070b78
   81650:	20070da0 	.word	0x20070da0
   81654:	20070d9c 	.word	0x20070d9c
   81658:	20070d98 	.word	0x20070d98
   8165c:	20070c88 	.word	0x20070c88
   81660:	20070da4 	.word	0x20070da4

00081664 <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   81664:	b480      	push	{r7}
   81666:	b083      	sub	sp, #12
   81668:	af00      	add	r7, sp, #0
   8166a:	6078      	str	r0, [r7, #4]
   8166c:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   8166e:	687b      	ldr	r3, [r7, #4]
   81670:	683a      	ldr	r2, [r7, #0]
   81672:	625a      	str	r2, [r3, #36]	; 0x24
}
   81674:	bf00      	nop
   81676:	370c      	adds	r7, #12
   81678:	46bd      	mov	sp, r7
   8167a:	bc80      	pop	{r7}
   8167c:	4770      	bx	lr

0008167e <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   8167e:	b480      	push	{r7}
   81680:	b083      	sub	sp, #12
   81682:	af00      	add	r7, sp, #0
   81684:	6078      	str	r0, [r7, #4]
   81686:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   81688:	687b      	ldr	r3, [r7, #4]
   8168a:	683a      	ldr	r2, [r7, #0]
   8168c:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   8168e:	687b      	ldr	r3, [r7, #4]
   81690:	6a1b      	ldr	r3, [r3, #32]
}
   81692:	bf00      	nop
   81694:	370c      	adds	r7, #12
   81696:	46bd      	mov	sp, r7
   81698:	bc80      	pop	{r7}
   8169a:	4770      	bx	lr

0008169c <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   8169c:	b480      	push	{r7}
   8169e:	b083      	sub	sp, #12
   816a0:	af00      	add	r7, sp, #0
   816a2:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   816a4:	687b      	ldr	r3, [r7, #4]
   816a6:	6a1b      	ldr	r3, [r3, #32]
}
   816a8:	4618      	mov	r0, r3
   816aa:	370c      	adds	r7, #12
   816ac:	46bd      	mov	sp, r7
   816ae:	bc80      	pop	{r7}
   816b0:	4770      	bx	lr

000816b2 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   816b2:	b480      	push	{r7}
   816b4:	b083      	sub	sp, #12
   816b6:	af00      	add	r7, sp, #0
   816b8:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   816ba:	687b      	ldr	r3, [r7, #4]
   816bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   816be:	4618      	mov	r0, r3
   816c0:	370c      	adds	r7, #12
   816c2:	46bd      	mov	sp, r7
   816c4:	bc80      	pop	{r7}
   816c6:	4770      	bx	lr

000816c8 <twi_read_byte>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The byte read.
 */
uint8_t twi_read_byte(Twi *p_twi)
{
   816c8:	b480      	push	{r7}
   816ca:	b083      	sub	sp, #12
   816cc:	af00      	add	r7, sp, #0
   816ce:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_RHR;
   816d0:	687b      	ldr	r3, [r7, #4]
   816d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   816d4:	b2db      	uxtb	r3, r3
}
   816d6:	4618      	mov	r0, r3
   816d8:	370c      	adds	r7, #12
   816da:	46bd      	mov	sp, r7
   816dc:	bc80      	pop	{r7}
   816de:	4770      	bx	lr

000816e0 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   816e0:	b480      	push	{r7}
   816e2:	b083      	sub	sp, #12
   816e4:	af00      	add	r7, sp, #0
   816e6:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   816e8:	687b      	ldr	r3, [r7, #4]
   816ea:	2280      	movs	r2, #128	; 0x80
   816ec:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   816ee:	687b      	ldr	r3, [r7, #4]
   816f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   816f2:	bf00      	nop
   816f4:	370c      	adds	r7, #12
   816f6:	46bd      	mov	sp, r7
   816f8:	bc80      	pop	{r7}
   816fa:	4770      	bx	lr

000816fc <compass_init>:

//local function
static void compass_callback(void);

void compass_init(void)
{
   816fc:	b580      	push	{r7, lr}
   816fe:	b082      	sub	sp, #8
   81700:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   81702:	4b0d      	ldr	r3, [pc, #52]	; (81738 <compass_init+0x3c>)
   81704:	4798      	blx	r3
   81706:	6078      	str	r0, [r7, #4]

    rx_packet->chip = 0x60;
   81708:	687b      	ldr	r3, [r7, #4]
   8170a:	2260      	movs	r2, #96	; 0x60
   8170c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    rx_packet->addr[0] = 0x02;
   81710:	687b      	ldr	r3, [r7, #4]
   81712:	2202      	movs	r2, #2
   81714:	701a      	strb	r2, [r3, #0]
    rx_packet->addr_length = 1;
   81716:	687b      	ldr	r3, [r7, #4]
   81718:	2201      	movs	r2, #1
   8171a:	605a      	str	r2, [r3, #4]
    rx_packet->length = sizeof(direction);
   8171c:	687b      	ldr	r3, [r7, #4]
   8171e:	2202      	movs	r2, #2
   81720:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    twi_set_compass_tx_callback(compass_callback);
   81724:	4805      	ldr	r0, [pc, #20]	; (8173c <compass_init+0x40>)
   81726:	4b06      	ldr	r3, [pc, #24]	; (81740 <compass_init+0x44>)
   81728:	4798      	blx	r3
    twi_set_compass_rx_callback(compass_callback);
   8172a:	4804      	ldr	r0, [pc, #16]	; (8173c <compass_init+0x40>)
   8172c:	4b05      	ldr	r3, [pc, #20]	; (81744 <compass_init+0x48>)
   8172e:	4798      	blx	r3
}
   81730:	bf00      	nop
   81732:	3708      	adds	r7, #8
   81734:	46bd      	mov	sp, r7
   81736:	bd80      	pop	{r7, pc}
   81738:	000812b1 	.word	0x000812b1
   8173c:	00081805 	.word	0x00081805
   81740:	0008147d 	.word	0x0008147d
   81744:	00081461 	.word	0x00081461

00081748 <update_compass>:

void update_compass(void)
{
   81748:	b580      	push	{r7, lr}
   8174a:	b082      	sub	sp, #8
   8174c:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   8174e:	4b1a      	ldr	r3, [pc, #104]	; (817b8 <update_compass+0x70>)
   81750:	4798      	blx	r3
   81752:	6078      	str	r0, [r7, #4]

    if ((getTicks() - ul_ticks_compass) > 100)
   81754:	4b19      	ldr	r3, [pc, #100]	; (817bc <update_compass+0x74>)
   81756:	4798      	blx	r3
   81758:	4602      	mov	r2, r0
   8175a:	4b19      	ldr	r3, [pc, #100]	; (817c0 <update_compass+0x78>)
   8175c:	681b      	ldr	r3, [r3, #0]
   8175e:	1ad3      	subs	r3, r2, r3
   81760:	2b64      	cmp	r3, #100	; 0x64
   81762:	d926      	bls.n	817b2 <update_compass+0x6a>
    {
        if(lcd_is_busy())
   81764:	4b17      	ldr	r3, [pc, #92]	; (817c4 <update_compass+0x7c>)
   81766:	4798      	blx	r3
   81768:	4603      	mov	r3, r0
   8176a:	2b00      	cmp	r3, #0
   8176c:	d120      	bne.n	817b0 <update_compass+0x68>
        {
            return;
        }

        ul_ticks_compass = getTicks();
   8176e:	4b13      	ldr	r3, [pc, #76]	; (817bc <update_compass+0x74>)
   81770:	4798      	blx	r3
   81772:	4602      	mov	r2, r0
   81774:	4b12      	ldr	r3, [pc, #72]	; (817c0 <update_compass+0x78>)
   81776:	601a      	str	r2, [r3, #0]
        
        compassIsBusy = true;
   81778:	4b13      	ldr	r3, [pc, #76]	; (817c8 <update_compass+0x80>)
   8177a:	2201      	movs	r2, #1
   8177c:	701a      	strb	r2, [r3, #0]
        if(twi_pdc_master_read(TWI0, rx_packet) == TWI_SUCCESS)
   8177e:	6879      	ldr	r1, [r7, #4]
   81780:	4812      	ldr	r0, [pc, #72]	; (817cc <update_compass+0x84>)
   81782:	4b13      	ldr	r3, [pc, #76]	; (817d0 <update_compass+0x88>)
   81784:	4798      	blx	r3
   81786:	4603      	mov	r3, r0
   81788:	2b00      	cmp	r3, #0
   8178a:	d104      	bne.n	81796 <update_compass+0x4e>
        {
            while(compassIsBusy);
   8178c:	bf00      	nop
   8178e:	4b0e      	ldr	r3, [pc, #56]	; (817c8 <update_compass+0x80>)
   81790:	781b      	ldrb	r3, [r3, #0]
   81792:	2b00      	cmp	r3, #0
   81794:	d1fb      	bne.n	8178e <update_compass+0x46>
        }
        direction = (rx_packet->buffer[0] << 8) | rx_packet->buffer[1];
   81796:	687b      	ldr	r3, [r7, #4]
   81798:	7a1b      	ldrb	r3, [r3, #8]
   8179a:	021b      	lsls	r3, r3, #8
   8179c:	b21a      	sxth	r2, r3
   8179e:	687b      	ldr	r3, [r7, #4]
   817a0:	7a5b      	ldrb	r3, [r3, #9]
   817a2:	b21b      	sxth	r3, r3
   817a4:	4313      	orrs	r3, r2
   817a6:	b21b      	sxth	r3, r3
   817a8:	b29a      	uxth	r2, r3
   817aa:	4b0a      	ldr	r3, [pc, #40]	; (817d4 <update_compass+0x8c>)
   817ac:	801a      	strh	r2, [r3, #0]
   817ae:	e000      	b.n	817b2 <update_compass+0x6a>
            return;
   817b0:	bf00      	nop
    }
}
   817b2:	3708      	adds	r7, #8
   817b4:	46bd      	mov	sp, r7
   817b6:	bd80      	pop	{r7, pc}
   817b8:	000812b1 	.word	0x000812b1
   817bc:	00083355 	.word	0x00083355
   817c0:	20070fcc 	.word	0x20070fcc
   817c4:	00081c4d 	.word	0x00081c4d
   817c8:	20070da8 	.word	0x20070da8
   817cc:	4008c000 	.word	0x4008c000
   817d0:	000812c5 	.word	0x000812c5
   817d4:	20070e2c 	.word	0x20070e2c

000817d8 <set_compass_is_busy>:

void set_compass_is_busy(void)
{
   817d8:	b480      	push	{r7}
   817da:	af00      	add	r7, sp, #0
    compassIsBusy = true;
   817dc:	4b03      	ldr	r3, [pc, #12]	; (817ec <set_compass_is_busy+0x14>)
   817de:	2201      	movs	r2, #1
   817e0:	701a      	strb	r2, [r3, #0]
}
   817e2:	bf00      	nop
   817e4:	46bd      	mov	sp, r7
   817e6:	bc80      	pop	{r7}
   817e8:	4770      	bx	lr
   817ea:	bf00      	nop
   817ec:	20070da8 	.word	0x20070da8

000817f0 <compass_is_busy>:

uint8_t compass_is_busy(void)
{
   817f0:	b480      	push	{r7}
   817f2:	af00      	add	r7, sp, #0
    return compassIsBusy;
   817f4:	4b02      	ldr	r3, [pc, #8]	; (81800 <compass_is_busy+0x10>)
   817f6:	781b      	ldrb	r3, [r3, #0]
}
   817f8:	4618      	mov	r0, r3
   817fa:	46bd      	mov	sp, r7
   817fc:	bc80      	pop	{r7}
   817fe:	4770      	bx	lr
   81800:	20070da8 	.word	0x20070da8

00081804 <compass_callback>:
    return tmp_corr;
}*/

//local function
static void compass_callback(void)
{
   81804:	b480      	push	{r7}
   81806:	af00      	add	r7, sp, #0
    compassIsBusy = false;
   81808:	4b03      	ldr	r3, [pc, #12]	; (81818 <compass_callback+0x14>)
   8180a:	2200      	movs	r2, #0
   8180c:	701a      	strb	r2, [r3, #0]
}
   8180e:	bf00      	nop
   81810:	46bd      	mov	sp, r7
   81812:	bc80      	pop	{r7}
   81814:	4770      	bx	lr
   81816:	bf00      	nop
   81818:	20070da8 	.word	0x20070da8

0008181c <osc_get_rate>:
{
   8181c:	b480      	push	{r7}
   8181e:	b083      	sub	sp, #12
   81820:	af00      	add	r7, sp, #0
   81822:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81824:	687b      	ldr	r3, [r7, #4]
   81826:	2b07      	cmp	r3, #7
   81828:	d825      	bhi.n	81876 <osc_get_rate+0x5a>
   8182a:	a201      	add	r2, pc, #4	; (adr r2, 81830 <osc_get_rate+0x14>)
   8182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81830:	00081851 	.word	0x00081851
   81834:	00081857 	.word	0x00081857
   81838:	0008185d 	.word	0x0008185d
   8183c:	00081863 	.word	0x00081863
   81840:	00081867 	.word	0x00081867
   81844:	0008186b 	.word	0x0008186b
   81848:	0008186f 	.word	0x0008186f
   8184c:	00081873 	.word	0x00081873
		return OSC_SLCK_32K_RC_HZ;
   81850:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81854:	e010      	b.n	81878 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   81856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8185a:	e00d      	b.n	81878 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   8185c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81860:	e00a      	b.n	81878 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   81862:	4b08      	ldr	r3, [pc, #32]	; (81884 <osc_get_rate+0x68>)
   81864:	e008      	b.n	81878 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   81866:	4b08      	ldr	r3, [pc, #32]	; (81888 <osc_get_rate+0x6c>)
   81868:	e006      	b.n	81878 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8186a:	4b08      	ldr	r3, [pc, #32]	; (8188c <osc_get_rate+0x70>)
   8186c:	e004      	b.n	81878 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8186e:	4b07      	ldr	r3, [pc, #28]	; (8188c <osc_get_rate+0x70>)
   81870:	e002      	b.n	81878 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   81872:	4b06      	ldr	r3, [pc, #24]	; (8188c <osc_get_rate+0x70>)
   81874:	e000      	b.n	81878 <osc_get_rate+0x5c>
	return 0;
   81876:	2300      	movs	r3, #0
}
   81878:	4618      	mov	r0, r3
   8187a:	370c      	adds	r7, #12
   8187c:	46bd      	mov	sp, r7
   8187e:	bc80      	pop	{r7}
   81880:	4770      	bx	lr
   81882:	bf00      	nop
   81884:	003d0900 	.word	0x003d0900
   81888:	007a1200 	.word	0x007a1200
   8188c:	00b71b00 	.word	0x00b71b00

00081890 <sysclk_get_main_hz>:
{
   81890:	b580      	push	{r7, lr}
   81892:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   81894:	2006      	movs	r0, #6
   81896:	4b04      	ldr	r3, [pc, #16]	; (818a8 <sysclk_get_main_hz+0x18>)
   81898:	4798      	blx	r3
   8189a:	4602      	mov	r2, r0
   8189c:	4613      	mov	r3, r2
   8189e:	00db      	lsls	r3, r3, #3
   818a0:	1a9b      	subs	r3, r3, r2
   818a2:	005b      	lsls	r3, r3, #1
}
   818a4:	4618      	mov	r0, r3
   818a6:	bd80      	pop	{r7, pc}
   818a8:	0008181d 	.word	0x0008181d

000818ac <sysclk_get_peripheral_hz>:
{
   818ac:	b580      	push	{r7, lr}
   818ae:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   818b0:	4b02      	ldr	r3, [pc, #8]	; (818bc <sysclk_get_peripheral_hz+0x10>)
   818b2:	4798      	blx	r3
   818b4:	4603      	mov	r3, r0
   818b6:	085b      	lsrs	r3, r3, #1
}
   818b8:	4618      	mov	r0, r3
   818ba:	bd80      	pop	{r7, pc}
   818bc:	00081891 	.word	0x00081891

000818c0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   818c0:	b580      	push	{r7, lr}
   818c2:	b082      	sub	sp, #8
   818c4:	af00      	add	r7, sp, #0
   818c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   818c8:	6878      	ldr	r0, [r7, #4]
   818ca:	4b03      	ldr	r3, [pc, #12]	; (818d8 <sysclk_enable_peripheral_clock+0x18>)
   818cc:	4798      	blx	r3
}
   818ce:	bf00      	nop
   818d0:	3708      	adds	r7, #8
   818d2:	46bd      	mov	sp, r7
   818d4:	bd80      	pop	{r7, pc}
   818d6:	bf00      	nop
   818d8:	00083d15 	.word	0x00083d15

000818dc <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   818dc:	b580      	push	{r7, lr}
   818de:	b082      	sub	sp, #8
   818e0:	af00      	add	r7, sp, #0
   818e2:	6078      	str	r0, [r7, #4]
   818e4:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   818e6:	4b10      	ldr	r3, [pc, #64]	; (81928 <twi_master_setup+0x4c>)
   818e8:	4798      	blx	r3
   818ea:	4602      	mov	r2, r0
   818ec:	683b      	ldr	r3, [r7, #0]
   818ee:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   818f0:	683b      	ldr	r3, [r7, #0]
   818f2:	2200      	movs	r2, #0
   818f4:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   818f6:	687b      	ldr	r3, [r7, #4]
   818f8:	4a0c      	ldr	r2, [pc, #48]	; (8192c <twi_master_setup+0x50>)
   818fa:	4293      	cmp	r3, r2
   818fc:	d103      	bne.n	81906 <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   818fe:	2016      	movs	r0, #22
   81900:	4b0b      	ldr	r3, [pc, #44]	; (81930 <twi_master_setup+0x54>)
   81902:	4798      	blx	r3
   81904:	e006      	b.n	81914 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   81906:	687b      	ldr	r3, [r7, #4]
   81908:	4a0a      	ldr	r2, [pc, #40]	; (81934 <twi_master_setup+0x58>)
   8190a:	4293      	cmp	r3, r2
   8190c:	d102      	bne.n	81914 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   8190e:	2017      	movs	r0, #23
   81910:	4b07      	ldr	r3, [pc, #28]	; (81930 <twi_master_setup+0x54>)
   81912:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   81914:	6839      	ldr	r1, [r7, #0]
   81916:	6878      	ldr	r0, [r7, #4]
   81918:	4b07      	ldr	r3, [pc, #28]	; (81938 <twi_master_setup+0x5c>)
   8191a:	4798      	blx	r3
   8191c:	4603      	mov	r3, r0
}
   8191e:	4618      	mov	r0, r3
   81920:	3708      	adds	r7, #8
   81922:	46bd      	mov	sp, r7
   81924:	bd80      	pop	{r7, pc}
   81926:	bf00      	nop
   81928:	000818ad 	.word	0x000818ad
   8192c:	4008c000 	.word	0x4008c000
   81930:	000818c1 	.word	0x000818c1
   81934:	40090000 	.word	0x40090000
   81938:	000810ad 	.word	0x000810ad

0008193c <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   8193c:	b580      	push	{r7, lr}
   8193e:	af00      	add	r7, sp, #0
    twi_set_lcd_tx_callback(lcd_callback);
   81940:	4821      	ldr	r0, [pc, #132]	; (819c8 <lcd_init+0x8c>)
   81942:	4b22      	ldr	r3, [pc, #136]	; (819cc <lcd_init+0x90>)
   81944:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   81946:	220c      	movs	r2, #12
   81948:	2100      	movs	r1, #0
   8194a:	4821      	ldr	r0, [pc, #132]	; (819d0 <lcd_init+0x94>)
   8194c:	4b21      	ldr	r3, [pc, #132]	; (819d4 <lcd_init+0x98>)
   8194e:	4798      	blx	r3
    twiConfig.speed = 100000;
   81950:	4b1f      	ldr	r3, [pc, #124]	; (819d0 <lcd_init+0x94>)
   81952:	4a21      	ldr	r2, [pc, #132]	; (819d8 <lcd_init+0x9c>)
   81954:	605a      	str	r2, [r3, #4]

    backlight = LCD_LIGHT_OFF;
   81956:	4b21      	ldr	r3, [pc, #132]	; (819dc <lcd_init+0xa0>)
   81958:	2200      	movs	r2, #0
   8195a:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   8195c:	2103      	movs	r1, #3
   8195e:	2000      	movs	r0, #0
   81960:	4b1f      	ldr	r3, [pc, #124]	; (819e0 <lcd_init+0xa4>)
   81962:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81964:	2006      	movs	r0, #6
   81966:	4b1f      	ldr	r3, [pc, #124]	; (819e4 <lcd_init+0xa8>)
   81968:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   8196a:	2103      	movs	r1, #3
   8196c:	2000      	movs	r0, #0
   8196e:	4b1c      	ldr	r3, [pc, #112]	; (819e0 <lcd_init+0xa4>)
   81970:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81972:	2006      	movs	r0, #6
   81974:	4b1b      	ldr	r3, [pc, #108]	; (819e4 <lcd_init+0xa8>)
   81976:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   81978:	2103      	movs	r1, #3
   8197a:	2000      	movs	r0, #0
   8197c:	4b18      	ldr	r3, [pc, #96]	; (819e0 <lcd_init+0xa4>)
   8197e:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81980:	2006      	movs	r0, #6
   81982:	4b18      	ldr	r3, [pc, #96]	; (819e4 <lcd_init+0xa8>)
   81984:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   81986:	2102      	movs	r1, #2
   81988:	2000      	movs	r0, #0
   8198a:	4b15      	ldr	r3, [pc, #84]	; (819e0 <lcd_init+0xa4>)
   8198c:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   8198e:	2128      	movs	r1, #40	; 0x28
   81990:	2000      	movs	r0, #0
   81992:	4b15      	ldr	r3, [pc, #84]	; (819e8 <lcd_init+0xac>)
   81994:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   81996:	2108      	movs	r1, #8
   81998:	2000      	movs	r0, #0
   8199a:	4b13      	ldr	r3, [pc, #76]	; (819e8 <lcd_init+0xac>)
   8199c:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   8199e:	2101      	movs	r1, #1
   819a0:	2000      	movs	r0, #0
   819a2:	4b11      	ldr	r3, [pc, #68]	; (819e8 <lcd_init+0xac>)
   819a4:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   819a6:	2003      	movs	r0, #3
   819a8:	4b0e      	ldr	r3, [pc, #56]	; (819e4 <lcd_init+0xa8>)
   819aa:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   819ac:	2106      	movs	r1, #6
   819ae:	2000      	movs	r0, #0
   819b0:	4b0d      	ldr	r3, [pc, #52]	; (819e8 <lcd_init+0xac>)
   819b2:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   819b4:	210c      	movs	r1, #12
   819b6:	2000      	movs	r0, #0
   819b8:	4b0b      	ldr	r3, [pc, #44]	; (819e8 <lcd_init+0xac>)
   819ba:	4798      	blx	r3

    backlight = LCD_LIGHT_ON;
   819bc:	4b07      	ldr	r3, [pc, #28]	; (819dc <lcd_init+0xa0>)
   819be:	2208      	movs	r2, #8
   819c0:	701a      	strb	r2, [r3, #0]
}
   819c2:	bf00      	nop
   819c4:	bd80      	pop	{r7, pc}
   819c6:	bf00      	nop
   819c8:	00081eb1 	.word	0x00081eb1
   819cc:	00081499 	.word	0x00081499
   819d0:	20070db4 	.word	0x20070db4
   819d4:	00085909 	.word	0x00085909
   819d8:	000186a0 	.word	0x000186a0
   819dc:	20070da9 	.word	0x20070da9
   819e0:	00081c61 	.word	0x00081c61
   819e4:	00083369 	.word	0x00083369
   819e8:	00081d71 	.word	0x00081d71

000819ec <lcd_set_backlight>:

void lcd_set_backlight(backlight_t state)
{
   819ec:	b480      	push	{r7}
   819ee:	b083      	sub	sp, #12
   819f0:	af00      	add	r7, sp, #0
   819f2:	4603      	mov	r3, r0
   819f4:	71fb      	strb	r3, [r7, #7]
    backlight = state;
   819f6:	4a04      	ldr	r2, [pc, #16]	; (81a08 <lcd_set_backlight+0x1c>)
   819f8:	79fb      	ldrb	r3, [r7, #7]
   819fa:	7013      	strb	r3, [r2, #0]
//    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
//    mdelay(LCD_CLEAR_WAIT_TIME);
}
   819fc:	bf00      	nop
   819fe:	370c      	adds	r7, #12
   81a00:	46bd      	mov	sp, r7
   81a02:	bc80      	pop	{r7}
   81a04:	4770      	bx	lr
   81a06:	bf00      	nop
   81a08:	20070da9 	.word	0x20070da9

00081a0c <lcd_clear>:

void lcd_clear(void)
{
   81a0c:	b580      	push	{r7, lr}
   81a0e:	af00      	add	r7, sp, #0
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   81a10:	2101      	movs	r1, #1
   81a12:	2000      	movs	r0, #0
   81a14:	4b03      	ldr	r3, [pc, #12]	; (81a24 <lcd_clear+0x18>)
   81a16:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   81a18:	2003      	movs	r0, #3
   81a1a:	4b03      	ldr	r3, [pc, #12]	; (81a28 <lcd_clear+0x1c>)
   81a1c:	4798      	blx	r3
}
   81a1e:	bf00      	nop
   81a20:	bd80      	pop	{r7, pc}
   81a22:	bf00      	nop
   81a24:	00081d71 	.word	0x00081d71
   81a28:	00083369 	.word	0x00083369

00081a2c <lcd_print_s>:
    sprintf(str, "%10lu", data);
    lcd_print_s(line, col, str);
}

void lcd_print_s(uint8_t line, uint8_t col, const char* str)
{
   81a2c:	b590      	push	{r4, r7, lr}
   81a2e:	b087      	sub	sp, #28
   81a30:	af00      	add	r7, sp, #0
   81a32:	4603      	mov	r3, r0
   81a34:	603a      	str	r2, [r7, #0]
   81a36:	71fb      	strb	r3, [r7, #7]
   81a38:	460b      	mov	r3, r1
   81a3a:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81a3c:	4b75      	ldr	r3, [pc, #468]	; (81c14 <lcd_print_s+0x1e8>)
   81a3e:	4798      	blx	r3
   81a40:	6138      	str	r0, [r7, #16]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    
    while(lcdIsBusy | twi_is_busy())
   81a42:	e019      	b.n	81a78 <lcd_print_s+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81a44:	4b74      	ldr	r3, [pc, #464]	; (81c18 <lcd_print_s+0x1ec>)
   81a46:	4798      	blx	r3
   81a48:	4602      	mov	r2, r0
   81a4a:	4b74      	ldr	r3, [pc, #464]	; (81c1c <lcd_print_s+0x1f0>)
   81a4c:	681b      	ldr	r3, [r3, #0]
   81a4e:	1ad3      	subs	r3, r2, r3
   81a50:	2b0a      	cmp	r3, #10
   81a52:	d911      	bls.n	81a78 <lcd_print_s+0x4c>
        {
            lcdIsBusy = false;
   81a54:	4b72      	ldr	r3, [pc, #456]	; (81c20 <lcd_print_s+0x1f4>)
   81a56:	2200      	movs	r2, #0
   81a58:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81a5a:	4b72      	ldr	r3, [pc, #456]	; (81c24 <lcd_print_s+0x1f8>)
   81a5c:	681b      	ldr	r3, [r3, #0]
   81a5e:	3301      	adds	r3, #1
   81a60:	4a70      	ldr	r2, [pc, #448]	; (81c24 <lcd_print_s+0x1f8>)
   81a62:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81a64:	f240 2102 	movw	r1, #514	; 0x202
   81a68:	486f      	ldr	r0, [pc, #444]	; (81c28 <lcd_print_s+0x1fc>)
   81a6a:	4b70      	ldr	r3, [pc, #448]	; (81c2c <lcd_print_s+0x200>)
   81a6c:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81a6e:	4970      	ldr	r1, [pc, #448]	; (81c30 <lcd_print_s+0x204>)
   81a70:	4870      	ldr	r0, [pc, #448]	; (81c34 <lcd_print_s+0x208>)
   81a72:	4b71      	ldr	r3, [pc, #452]	; (81c38 <lcd_print_s+0x20c>)
   81a74:	4798      	blx	r3
            break;
   81a76:	e009      	b.n	81a8c <lcd_print_s+0x60>
    while(lcdIsBusy | twi_is_busy())
   81a78:	4b70      	ldr	r3, [pc, #448]	; (81c3c <lcd_print_s+0x210>)
   81a7a:	4798      	blx	r3
   81a7c:	4603      	mov	r3, r0
   81a7e:	461a      	mov	r2, r3
   81a80:	4b67      	ldr	r3, [pc, #412]	; (81c20 <lcd_print_s+0x1f4>)
   81a82:	781b      	ldrb	r3, [r3, #0]
   81a84:	4313      	orrs	r3, r2
   81a86:	b2db      	uxtb	r3, r3
   81a88:	2b00      	cmp	r3, #0
   81a8a:	d1db      	bne.n	81a44 <lcd_print_s+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81a8c:	693b      	ldr	r3, [r7, #16]
   81a8e:	2227      	movs	r2, #39	; 0x27
   81a90:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81a94:	693b      	ldr	r3, [r7, #16]
   81a96:	2200      	movs	r2, #0
   81a98:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   81a9a:	693b      	ldr	r3, [r7, #16]
   81a9c:	2200      	movs	r2, #0
   81a9e:	605a      	str	r2, [r3, #4]
    
    // Calculate display address
    switch(line)
   81aa0:	79fb      	ldrb	r3, [r7, #7]
   81aa2:	2b03      	cmp	r3, #3
   81aa4:	d006      	beq.n	81ab4 <lcd_print_s+0x88>
   81aa6:	2b04      	cmp	r3, #4
   81aa8:	d007      	beq.n	81aba <lcd_print_s+0x8e>
   81aaa:	2b02      	cmp	r3, #2
   81aac:	d108      	bne.n	81ac0 <lcd_print_s+0x94>
    {
        case 2:
        addr = 0x80 | 0x40;   // set address to start of line 2
   81aae:	23c0      	movs	r3, #192	; 0xc0
   81ab0:	75fb      	strb	r3, [r7, #23]
        break;
   81ab2:	e008      	b.n	81ac6 <lcd_print_s+0x9a>
        case 3:
        addr = 0x80 | 0x14;   // set address to start of line 3
   81ab4:	2394      	movs	r3, #148	; 0x94
   81ab6:	75fb      	strb	r3, [r7, #23]
        break;
   81ab8:	e005      	b.n	81ac6 <lcd_print_s+0x9a>
        case 4:
        addr = 0x80 | 0x54;   // set address to start of line 4
   81aba:	23d4      	movs	r3, #212	; 0xd4
   81abc:	75fb      	strb	r3, [r7, #23]
        break;
   81abe:	e002      	b.n	81ac6 <lcd_print_s+0x9a>
        case 1:
        default:
        addr = 0x80;          // set address to start of line 1
   81ac0:	2380      	movs	r3, #128	; 0x80
   81ac2:	75fb      	strb	r3, [r7, #23]
        break;
   81ac4:	bf00      	nop
    }
    addr += col;  // set column in the selected line
   81ac6:	7dfa      	ldrb	r2, [r7, #23]
   81ac8:	79bb      	ldrb	r3, [r7, #6]
   81aca:	4413      	add	r3, r2
   81acc:	75fb      	strb	r3, [r7, #23]

    // Set cursor
    cmd = LCD_FUNTION_WRITE | backlight;
   81ace:	4b5c      	ldr	r3, [pc, #368]	; (81c40 <lcd_print_s+0x214>)
   81ad0:	781b      	ldrb	r3, [r3, #0]
   81ad2:	73fb      	strb	r3, [r7, #15]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   81ad4:	7dfb      	ldrb	r3, [r7, #23]
   81ad6:	f023 030f 	bic.w	r3, r3, #15
   81ada:	b2da      	uxtb	r2, r3
   81adc:	7bfb      	ldrb	r3, [r7, #15]
   81ade:	4313      	orrs	r3, r2
   81ae0:	b2db      	uxtb	r3, r3
   81ae2:	f043 0304 	orr.w	r3, r3, #4
   81ae6:	b2da      	uxtb	r2, r3
   81ae8:	693b      	ldr	r3, [r7, #16]
   81aea:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   81aec:	f997 3017 	ldrsb.w	r3, [r7, #23]
   81af0:	f023 030f 	bic.w	r3, r3, #15
   81af4:	b25a      	sxtb	r2, r3
   81af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
   81afa:	4313      	orrs	r3, r2
   81afc:	b25b      	sxtb	r3, r3
   81afe:	b2da      	uxtb	r2, r3
   81b00:	693b      	ldr	r3, [r7, #16]
   81b02:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   81b04:	7dfb      	ldrb	r3, [r7, #23]
   81b06:	011b      	lsls	r3, r3, #4
   81b08:	b2da      	uxtb	r2, r3
   81b0a:	7bfb      	ldrb	r3, [r7, #15]
   81b0c:	4313      	orrs	r3, r2
   81b0e:	b2db      	uxtb	r3, r3
   81b10:	f043 0304 	orr.w	r3, r3, #4
   81b14:	b2da      	uxtb	r2, r3
   81b16:	693b      	ldr	r3, [r7, #16]
   81b18:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   81b1a:	7dfb      	ldrb	r3, [r7, #23]
   81b1c:	011b      	lsls	r3, r3, #4
   81b1e:	b25a      	sxtb	r2, r3
   81b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
   81b24:	4313      	orrs	r3, r2
   81b26:	b25b      	sxtb	r3, r3
   81b28:	b2da      	uxtb	r2, r3
   81b2a:	693b      	ldr	r3, [r7, #16]
   81b2c:	72da      	strb	r2, [r3, #11]
    
    // write string ...
    cmd = LCD_WRITE_DDR | backlight;
   81b2e:	4b44      	ldr	r3, [pc, #272]	; (81c40 <lcd_print_s+0x214>)
   81b30:	781b      	ldrb	r3, [r3, #0]
   81b32:	f043 0301 	orr.w	r3, r3, #1
   81b36:	73fb      	strb	r3, [r7, #15]
    for(count = 0; count < strlen(str); count++)
   81b38:	2300      	movs	r3, #0
   81b3a:	75bb      	strb	r3, [r7, #22]
   81b3c:	e04b      	b.n	81bd6 <lcd_print_s+0x1aa>
    {
        byte = str[count];
   81b3e:	7dbb      	ldrb	r3, [r7, #22]
   81b40:	683a      	ldr	r2, [r7, #0]
   81b42:	4413      	add	r3, r2
   81b44:	781b      	ldrb	r3, [r3, #0]
   81b46:	73bb      	strb	r3, [r7, #14]
        tx_packet->buffer[4 + count * 4 + 0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   81b48:	7dbb      	ldrb	r3, [r7, #22]
   81b4a:	3301      	adds	r3, #1
   81b4c:	009b      	lsls	r3, r3, #2
   81b4e:	7bba      	ldrb	r2, [r7, #14]
   81b50:	f022 020f 	bic.w	r2, r2, #15
   81b54:	b2d1      	uxtb	r1, r2
   81b56:	7bfa      	ldrb	r2, [r7, #15]
   81b58:	430a      	orrs	r2, r1
   81b5a:	b2d2      	uxtb	r2, r2
   81b5c:	f042 0204 	orr.w	r2, r2, #4
   81b60:	b2d1      	uxtb	r1, r2
   81b62:	693a      	ldr	r2, [r7, #16]
   81b64:	4413      	add	r3, r2
   81b66:	460a      	mov	r2, r1
   81b68:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   81b6a:	7dbb      	ldrb	r3, [r7, #22]
   81b6c:	3301      	adds	r3, #1
   81b6e:	009b      	lsls	r3, r3, #2
   81b70:	3301      	adds	r3, #1
   81b72:	f997 200e 	ldrsb.w	r2, [r7, #14]
   81b76:	f022 020f 	bic.w	r2, r2, #15
   81b7a:	b251      	sxtb	r1, r2
   81b7c:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81b80:	430a      	orrs	r2, r1
   81b82:	b252      	sxtb	r2, r2
   81b84:	b2d1      	uxtb	r1, r2
   81b86:	693a      	ldr	r2, [r7, #16]
   81b88:	4413      	add	r3, r2
   81b8a:	460a      	mov	r2, r1
   81b8c:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81b8e:	7dbb      	ldrb	r3, [r7, #22]
   81b90:	3301      	adds	r3, #1
   81b92:	009b      	lsls	r3, r3, #2
   81b94:	3302      	adds	r3, #2
   81b96:	7bba      	ldrb	r2, [r7, #14]
   81b98:	0112      	lsls	r2, r2, #4
   81b9a:	b2d1      	uxtb	r1, r2
   81b9c:	7bfa      	ldrb	r2, [r7, #15]
   81b9e:	430a      	orrs	r2, r1
   81ba0:	b2d2      	uxtb	r2, r2
   81ba2:	f042 0204 	orr.w	r2, r2, #4
   81ba6:	b2d1      	uxtb	r1, r2
   81ba8:	693a      	ldr	r2, [r7, #16]
   81baa:	4413      	add	r3, r2
   81bac:	460a      	mov	r2, r1
   81bae:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81bb0:	7dbb      	ldrb	r3, [r7, #22]
   81bb2:	3301      	adds	r3, #1
   81bb4:	009b      	lsls	r3, r3, #2
   81bb6:	3303      	adds	r3, #3
   81bb8:	7bba      	ldrb	r2, [r7, #14]
   81bba:	0112      	lsls	r2, r2, #4
   81bbc:	b251      	sxtb	r1, r2
   81bbe:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81bc2:	430a      	orrs	r2, r1
   81bc4:	b252      	sxtb	r2, r2
   81bc6:	b2d1      	uxtb	r1, r2
   81bc8:	693a      	ldr	r2, [r7, #16]
   81bca:	4413      	add	r3, r2
   81bcc:	460a      	mov	r2, r1
   81bce:	721a      	strb	r2, [r3, #8]
    for(count = 0; count < strlen(str); count++)
   81bd0:	7dbb      	ldrb	r3, [r7, #22]
   81bd2:	3301      	adds	r3, #1
   81bd4:	75bb      	strb	r3, [r7, #22]
   81bd6:	7dbc      	ldrb	r4, [r7, #22]
   81bd8:	6838      	ldr	r0, [r7, #0]
   81bda:	4b1a      	ldr	r3, [pc, #104]	; (81c44 <lcd_print_s+0x218>)
   81bdc:	4798      	blx	r3
   81bde:	4603      	mov	r3, r0
   81be0:	429c      	cmp	r4, r3
   81be2:	d3ac      	bcc.n	81b3e <lcd_print_s+0x112>
    }
    tx_packet->length = 4 + count * 4;
   81be4:	7dbb      	ldrb	r3, [r7, #22]
   81be6:	3301      	adds	r3, #1
   81be8:	009b      	lsls	r3, r3, #2
   81bea:	461a      	mov	r2, r3
   81bec:	693b      	ldr	r3, [r7, #16]
   81bee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    lcdIsBusy = true;
   81bf2:	4b0b      	ldr	r3, [pc, #44]	; (81c20 <lcd_print_s+0x1f4>)
   81bf4:	2201      	movs	r2, #1
   81bf6:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81bf8:	6939      	ldr	r1, [r7, #16]
   81bfa:	480e      	ldr	r0, [pc, #56]	; (81c34 <lcd_print_s+0x208>)
   81bfc:	4b12      	ldr	r3, [pc, #72]	; (81c48 <lcd_print_s+0x21c>)
   81bfe:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81c00:	4b05      	ldr	r3, [pc, #20]	; (81c18 <lcd_print_s+0x1ec>)
   81c02:	4798      	blx	r3
   81c04:	4602      	mov	r2, r0
   81c06:	4b05      	ldr	r3, [pc, #20]	; (81c1c <lcd_print_s+0x1f0>)
   81c08:	601a      	str	r2, [r3, #0]
}
   81c0a:	bf00      	nop
   81c0c:	371c      	adds	r7, #28
   81c0e:	46bd      	mov	sp, r7
   81c10:	bd90      	pop	{r4, r7, pc}
   81c12:	bf00      	nop
   81c14:	0008129d 	.word	0x0008129d
   81c18:	00083355 	.word	0x00083355
   81c1c:	20070dac 	.word	0x20070dac
   81c20:	20070daa 	.word	0x20070daa
   81c24:	20070db0 	.word	0x20070db0
   81c28:	4008c100 	.word	0x4008c100
   81c2c:	0008024d 	.word	0x0008024d
   81c30:	20070db4 	.word	0x20070db4
   81c34:	4008c000 	.word	0x4008c000
   81c38:	000818dd 	.word	0x000818dd
   81c3c:	00081289 	.word	0x00081289
   81c40:	20070da9 	.word	0x20070da9
   81c44:	000859f1 	.word	0x000859f1
   81c48:	0008139d 	.word	0x0008139d

00081c4c <lcd_is_busy>:
    twi_pdc_master_write(TWI0, tx_packet);
    lcdStartTicks = getTicks();
}

uint8_t lcd_is_busy(void)
{
   81c4c:	b480      	push	{r7}
   81c4e:	af00      	add	r7, sp, #0
    return lcdIsBusy;
   81c50:	4b02      	ldr	r3, [pc, #8]	; (81c5c <lcd_is_busy+0x10>)
   81c52:	781b      	ldrb	r3, [r3, #0]
}
   81c54:	4618      	mov	r0, r3
   81c56:	46bd      	mov	sp, r7
   81c58:	bc80      	pop	{r7}
   81c5a:	4770      	bx	lr
   81c5c:	20070daa 	.word	0x20070daa

00081c60 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   81c60:	b580      	push	{r7, lr}
   81c62:	b084      	sub	sp, #16
   81c64:	af00      	add	r7, sp, #0
   81c66:	4603      	mov	r3, r0
   81c68:	460a      	mov	r2, r1
   81c6a:	71fb      	strb	r3, [r7, #7]
   81c6c:	4613      	mov	r3, r2
   81c6e:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81c70:	4b32      	ldr	r3, [pc, #200]	; (81d3c <send_nibble+0xdc>)
   81c72:	4798      	blx	r3
   81c74:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   81c76:	e019      	b.n	81cac <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81c78:	4b31      	ldr	r3, [pc, #196]	; (81d40 <send_nibble+0xe0>)
   81c7a:	4798      	blx	r3
   81c7c:	4602      	mov	r2, r0
   81c7e:	4b31      	ldr	r3, [pc, #196]	; (81d44 <send_nibble+0xe4>)
   81c80:	681b      	ldr	r3, [r3, #0]
   81c82:	1ad3      	subs	r3, r2, r3
   81c84:	2b0a      	cmp	r3, #10
   81c86:	d911      	bls.n	81cac <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   81c88:	4b2f      	ldr	r3, [pc, #188]	; (81d48 <send_nibble+0xe8>)
   81c8a:	2200      	movs	r2, #0
   81c8c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81c8e:	4b2f      	ldr	r3, [pc, #188]	; (81d4c <send_nibble+0xec>)
   81c90:	681b      	ldr	r3, [r3, #0]
   81c92:	3301      	adds	r3, #1
   81c94:	4a2d      	ldr	r2, [pc, #180]	; (81d4c <send_nibble+0xec>)
   81c96:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81c98:	f240 2102 	movw	r1, #514	; 0x202
   81c9c:	482c      	ldr	r0, [pc, #176]	; (81d50 <send_nibble+0xf0>)
   81c9e:	4b2d      	ldr	r3, [pc, #180]	; (81d54 <send_nibble+0xf4>)
   81ca0:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81ca2:	492d      	ldr	r1, [pc, #180]	; (81d58 <send_nibble+0xf8>)
   81ca4:	482d      	ldr	r0, [pc, #180]	; (81d5c <send_nibble+0xfc>)
   81ca6:	4b2e      	ldr	r3, [pc, #184]	; (81d60 <send_nibble+0x100>)
   81ca8:	4798      	blx	r3
            break;
   81caa:	e009      	b.n	81cc0 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   81cac:	4b2d      	ldr	r3, [pc, #180]	; (81d64 <send_nibble+0x104>)
   81cae:	4798      	blx	r3
   81cb0:	4603      	mov	r3, r0
   81cb2:	461a      	mov	r2, r3
   81cb4:	4b24      	ldr	r3, [pc, #144]	; (81d48 <send_nibble+0xe8>)
   81cb6:	781b      	ldrb	r3, [r3, #0]
   81cb8:	4313      	orrs	r3, r2
   81cba:	b2db      	uxtb	r3, r3
   81cbc:	2b00      	cmp	r3, #0
   81cbe:	d1db      	bne.n	81c78 <send_nibble+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81cc0:	68fb      	ldr	r3, [r7, #12]
   81cc2:	2227      	movs	r2, #39	; 0x27
   81cc4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81cc8:	68fb      	ldr	r3, [r7, #12]
   81cca:	2200      	movs	r2, #0
   81ccc:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   81cce:	68fb      	ldr	r3, [r7, #12]
   81cd0:	2200      	movs	r2, #0
   81cd2:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81cd8:	f003 030f 	and.w	r3, r3, #15
   81cdc:	b25a      	sxtb	r2, r3
   81cde:	4b22      	ldr	r3, [pc, #136]	; (81d68 <send_nibble+0x108>)
   81ce0:	781b      	ldrb	r3, [r3, #0]
   81ce2:	b25b      	sxtb	r3, r3
   81ce4:	4313      	orrs	r3, r2
   81ce6:	b25b      	sxtb	r3, r3
   81ce8:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81cea:	79bb      	ldrb	r3, [r7, #6]
   81cec:	011b      	lsls	r3, r3, #4
   81cee:	b2da      	uxtb	r2, r3
   81cf0:	79fb      	ldrb	r3, [r7, #7]
   81cf2:	4313      	orrs	r3, r2
   81cf4:	b2db      	uxtb	r3, r3
   81cf6:	f043 0304 	orr.w	r3, r3, #4
   81cfa:	b2da      	uxtb	r2, r3
   81cfc:	68fb      	ldr	r3, [r7, #12]
   81cfe:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81d00:	79bb      	ldrb	r3, [r7, #6]
   81d02:	011b      	lsls	r3, r3, #4
   81d04:	b25a      	sxtb	r2, r3
   81d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81d0a:	4313      	orrs	r3, r2
   81d0c:	b25b      	sxtb	r3, r3
   81d0e:	b2da      	uxtb	r2, r3
   81d10:	68fb      	ldr	r3, [r7, #12]
   81d12:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   81d14:	68fb      	ldr	r3, [r7, #12]
   81d16:	2202      	movs	r2, #2
   81d18:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   81d1c:	4b0a      	ldr	r3, [pc, #40]	; (81d48 <send_nibble+0xe8>)
   81d1e:	2201      	movs	r2, #1
   81d20:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81d22:	68f9      	ldr	r1, [r7, #12]
   81d24:	480d      	ldr	r0, [pc, #52]	; (81d5c <send_nibble+0xfc>)
   81d26:	4b11      	ldr	r3, [pc, #68]	; (81d6c <send_nibble+0x10c>)
   81d28:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81d2a:	4b05      	ldr	r3, [pc, #20]	; (81d40 <send_nibble+0xe0>)
   81d2c:	4798      	blx	r3
   81d2e:	4602      	mov	r2, r0
   81d30:	4b04      	ldr	r3, [pc, #16]	; (81d44 <send_nibble+0xe4>)
   81d32:	601a      	str	r2, [r3, #0]
}
   81d34:	bf00      	nop
   81d36:	3710      	adds	r7, #16
   81d38:	46bd      	mov	sp, r7
   81d3a:	bd80      	pop	{r7, pc}
   81d3c:	0008129d 	.word	0x0008129d
   81d40:	00083355 	.word	0x00083355
   81d44:	20070dac 	.word	0x20070dac
   81d48:	20070daa 	.word	0x20070daa
   81d4c:	20070db0 	.word	0x20070db0
   81d50:	4008c100 	.word	0x4008c100
   81d54:	0008024d 	.word	0x0008024d
   81d58:	20070db4 	.word	0x20070db4
   81d5c:	4008c000 	.word	0x4008c000
   81d60:	000818dd 	.word	0x000818dd
   81d64:	00081289 	.word	0x00081289
   81d68:	20070da9 	.word	0x20070da9
   81d6c:	0008139d 	.word	0x0008139d

00081d70 <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   81d70:	b580      	push	{r7, lr}
   81d72:	b084      	sub	sp, #16
   81d74:	af00      	add	r7, sp, #0
   81d76:	4603      	mov	r3, r0
   81d78:	460a      	mov	r2, r1
   81d7a:	71fb      	strb	r3, [r7, #7]
   81d7c:	4613      	mov	r3, r2
   81d7e:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81d80:	4b3e      	ldr	r3, [pc, #248]	; (81e7c <send_byte+0x10c>)
   81d82:	4798      	blx	r3
   81d84:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   81d86:	e019      	b.n	81dbc <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81d88:	4b3d      	ldr	r3, [pc, #244]	; (81e80 <send_byte+0x110>)
   81d8a:	4798      	blx	r3
   81d8c:	4602      	mov	r2, r0
   81d8e:	4b3d      	ldr	r3, [pc, #244]	; (81e84 <send_byte+0x114>)
   81d90:	681b      	ldr	r3, [r3, #0]
   81d92:	1ad3      	subs	r3, r2, r3
   81d94:	2b0a      	cmp	r3, #10
   81d96:	d911      	bls.n	81dbc <send_byte+0x4c>
        {
            lcdIsBusy = false;
   81d98:	4b3b      	ldr	r3, [pc, #236]	; (81e88 <send_byte+0x118>)
   81d9a:	2200      	movs	r2, #0
   81d9c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81d9e:	4b3b      	ldr	r3, [pc, #236]	; (81e8c <send_byte+0x11c>)
   81da0:	681b      	ldr	r3, [r3, #0]
   81da2:	3301      	adds	r3, #1
   81da4:	4a39      	ldr	r2, [pc, #228]	; (81e8c <send_byte+0x11c>)
   81da6:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81da8:	f240 2102 	movw	r1, #514	; 0x202
   81dac:	4838      	ldr	r0, [pc, #224]	; (81e90 <send_byte+0x120>)
   81dae:	4b39      	ldr	r3, [pc, #228]	; (81e94 <send_byte+0x124>)
   81db0:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81db2:	4939      	ldr	r1, [pc, #228]	; (81e98 <send_byte+0x128>)
   81db4:	4839      	ldr	r0, [pc, #228]	; (81e9c <send_byte+0x12c>)
   81db6:	4b3a      	ldr	r3, [pc, #232]	; (81ea0 <send_byte+0x130>)
   81db8:	4798      	blx	r3
            break;
   81dba:	e009      	b.n	81dd0 <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   81dbc:	4b39      	ldr	r3, [pc, #228]	; (81ea4 <send_byte+0x134>)
   81dbe:	4798      	blx	r3
   81dc0:	4603      	mov	r3, r0
   81dc2:	461a      	mov	r2, r3
   81dc4:	4b30      	ldr	r3, [pc, #192]	; (81e88 <send_byte+0x118>)
   81dc6:	781b      	ldrb	r3, [r3, #0]
   81dc8:	4313      	orrs	r3, r2
   81dca:	b2db      	uxtb	r3, r3
   81dcc:	2b00      	cmp	r3, #0
   81dce:	d1db      	bne.n	81d88 <send_byte+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81dd0:	68fb      	ldr	r3, [r7, #12]
   81dd2:	2227      	movs	r2, #39	; 0x27
   81dd4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81dd8:	68fb      	ldr	r3, [r7, #12]
   81dda:	2200      	movs	r2, #0
   81ddc:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   81dde:	68fb      	ldr	r3, [r7, #12]
   81de0:	2200      	movs	r2, #0
   81de2:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81de8:	f003 030f 	and.w	r3, r3, #15
   81dec:	b25a      	sxtb	r2, r3
   81dee:	4b2e      	ldr	r3, [pc, #184]	; (81ea8 <send_byte+0x138>)
   81df0:	781b      	ldrb	r3, [r3, #0]
   81df2:	b25b      	sxtb	r3, r3
   81df4:	4313      	orrs	r3, r2
   81df6:	b25b      	sxtb	r3, r3
   81df8:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   81dfa:	79bb      	ldrb	r3, [r7, #6]
   81dfc:	f023 030f 	bic.w	r3, r3, #15
   81e00:	b2da      	uxtb	r2, r3
   81e02:	79fb      	ldrb	r3, [r7, #7]
   81e04:	4313      	orrs	r3, r2
   81e06:	b2db      	uxtb	r3, r3
   81e08:	f043 0304 	orr.w	r3, r3, #4
   81e0c:	b2da      	uxtb	r2, r3
   81e0e:	68fb      	ldr	r3, [r7, #12]
   81e10:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   81e12:	f997 3006 	ldrsb.w	r3, [r7, #6]
   81e16:	f023 030f 	bic.w	r3, r3, #15
   81e1a:	b25a      	sxtb	r2, r3
   81e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81e20:	4313      	orrs	r3, r2
   81e22:	b25b      	sxtb	r3, r3
   81e24:	b2da      	uxtb	r2, r3
   81e26:	68fb      	ldr	r3, [r7, #12]
   81e28:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81e2a:	79bb      	ldrb	r3, [r7, #6]
   81e2c:	011b      	lsls	r3, r3, #4
   81e2e:	b2da      	uxtb	r2, r3
   81e30:	79fb      	ldrb	r3, [r7, #7]
   81e32:	4313      	orrs	r3, r2
   81e34:	b2db      	uxtb	r3, r3
   81e36:	f043 0304 	orr.w	r3, r3, #4
   81e3a:	b2da      	uxtb	r2, r3
   81e3c:	68fb      	ldr	r3, [r7, #12]
   81e3e:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81e40:	79bb      	ldrb	r3, [r7, #6]
   81e42:	011b      	lsls	r3, r3, #4
   81e44:	b25a      	sxtb	r2, r3
   81e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81e4a:	4313      	orrs	r3, r2
   81e4c:	b25b      	sxtb	r3, r3
   81e4e:	b2da      	uxtb	r2, r3
   81e50:	68fb      	ldr	r3, [r7, #12]
   81e52:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   81e54:	68fb      	ldr	r3, [r7, #12]
   81e56:	2204      	movs	r2, #4
   81e58:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   81e5c:	4b0a      	ldr	r3, [pc, #40]	; (81e88 <send_byte+0x118>)
   81e5e:	2201      	movs	r2, #1
   81e60:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81e62:	68f9      	ldr	r1, [r7, #12]
   81e64:	480d      	ldr	r0, [pc, #52]	; (81e9c <send_byte+0x12c>)
   81e66:	4b11      	ldr	r3, [pc, #68]	; (81eac <send_byte+0x13c>)
   81e68:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81e6a:	4b05      	ldr	r3, [pc, #20]	; (81e80 <send_byte+0x110>)
   81e6c:	4798      	blx	r3
   81e6e:	4602      	mov	r2, r0
   81e70:	4b04      	ldr	r3, [pc, #16]	; (81e84 <send_byte+0x114>)
   81e72:	601a      	str	r2, [r3, #0]
}
   81e74:	bf00      	nop
   81e76:	3710      	adds	r7, #16
   81e78:	46bd      	mov	sp, r7
   81e7a:	bd80      	pop	{r7, pc}
   81e7c:	0008129d 	.word	0x0008129d
   81e80:	00083355 	.word	0x00083355
   81e84:	20070dac 	.word	0x20070dac
   81e88:	20070daa 	.word	0x20070daa
   81e8c:	20070db0 	.word	0x20070db0
   81e90:	4008c100 	.word	0x4008c100
   81e94:	0008024d 	.word	0x0008024d
   81e98:	20070db4 	.word	0x20070db4
   81e9c:	4008c000 	.word	0x4008c000
   81ea0:	000818dd 	.word	0x000818dd
   81ea4:	00081289 	.word	0x00081289
   81ea8:	20070da9 	.word	0x20070da9
   81eac:	0008139d 	.word	0x0008139d

00081eb0 <lcd_callback>:

static void lcd_callback(void)
{
   81eb0:	b480      	push	{r7}
   81eb2:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   81eb4:	4b03      	ldr	r3, [pc, #12]	; (81ec4 <lcd_callback+0x14>)
   81eb6:	2200      	movs	r2, #0
   81eb8:	701a      	strb	r2, [r3, #0]
}
   81eba:	bf00      	nop
   81ebc:	46bd      	mov	sp, r7
   81ebe:	bc80      	pop	{r7}
   81ec0:	4770      	bx	lr
   81ec2:	bf00      	nop
   81ec4:	20070daa 	.word	0x20070daa

00081ec8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   81ec8:	b480      	push	{r7}
   81eca:	b08b      	sub	sp, #44	; 0x2c
   81ecc:	af00      	add	r7, sp, #0
   81ece:	6078      	str	r0, [r7, #4]
   81ed0:	460b      	mov	r3, r1
   81ed2:	70fb      	strb	r3, [r7, #3]
   81ed4:	687b      	ldr	r3, [r7, #4]
   81ed6:	627b      	str	r3, [r7, #36]	; 0x24
   81ed8:	78fb      	ldrb	r3, [r7, #3]
   81eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81ee0:	61fb      	str	r3, [r7, #28]
   81ee2:	69fb      	ldr	r3, [r7, #28]
   81ee4:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81ee6:	69bb      	ldr	r3, [r7, #24]
   81ee8:	095b      	lsrs	r3, r3, #5
   81eea:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81eec:	697b      	ldr	r3, [r7, #20]
   81eee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81ef2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81ef6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   81ef8:	613b      	str	r3, [r7, #16]

	if (level) {
   81efa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81efe:	2b00      	cmp	r3, #0
   81f00:	d009      	beq.n	81f16 <ioport_set_pin_level+0x4e>
   81f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f04:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81f06:	68fb      	ldr	r3, [r7, #12]
   81f08:	f003 031f 	and.w	r3, r3, #31
   81f0c:	2201      	movs	r2, #1
   81f0e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81f10:	693b      	ldr	r3, [r7, #16]
   81f12:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   81f14:	e008      	b.n	81f28 <ioport_set_pin_level+0x60>
   81f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f18:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   81f1a:	68bb      	ldr	r3, [r7, #8]
   81f1c:	f003 031f 	and.w	r3, r3, #31
   81f20:	2201      	movs	r2, #1
   81f22:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81f24:	693b      	ldr	r3, [r7, #16]
   81f26:	635a      	str	r2, [r3, #52]	; 0x34
   81f28:	bf00      	nop
   81f2a:	372c      	adds	r7, #44	; 0x2c
   81f2c:	46bd      	mov	sp, r7
   81f2e:	bc80      	pop	{r7}
   81f30:	4770      	bx	lr

00081f32 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   81f32:	b480      	push	{r7}
   81f34:	b089      	sub	sp, #36	; 0x24
   81f36:	af00      	add	r7, sp, #0
   81f38:	6078      	str	r0, [r7, #4]
   81f3a:	687b      	ldr	r3, [r7, #4]
   81f3c:	61fb      	str	r3, [r7, #28]
   81f3e:	69fb      	ldr	r3, [r7, #28]
   81f40:	61bb      	str	r3, [r7, #24]
   81f42:	69bb      	ldr	r3, [r7, #24]
   81f44:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   81f46:	697b      	ldr	r3, [r7, #20]
   81f48:	095b      	lsrs	r3, r3, #5
   81f4a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81f4c:	693b      	ldr	r3, [r7, #16]
   81f4e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81f52:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81f56:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   81f5a:	69fb      	ldr	r3, [r7, #28]
   81f5c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81f5e:	68fb      	ldr	r3, [r7, #12]
   81f60:	f003 031f 	and.w	r3, r3, #31
   81f64:	2101      	movs	r1, #1
   81f66:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81f6a:	4013      	ands	r3, r2
   81f6c:	2b00      	cmp	r3, #0
   81f6e:	bf14      	ite	ne
   81f70:	2301      	movne	r3, #1
   81f72:	2300      	moveq	r3, #0
   81f74:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   81f76:	4618      	mov	r0, r3
   81f78:	3724      	adds	r7, #36	; 0x24
   81f7a:	46bd      	mov	sp, r7
   81f7c:	bc80      	pop	{r7}
   81f7e:	4770      	bx	lr

00081f80 <menu>:
static void print_menu_sensors(void);
static void print_menu_settings(void);
static void print_cursor(menu_info_t *info);

void menu(event_t event1)
{
   81f80:	b580      	push	{r7, lr}
   81f82:	b082      	sub	sp, #8
   81f84:	af00      	add	r7, sp, #0
   81f86:	4603      	mov	r3, r0
   81f88:	71fb      	strb	r3, [r7, #7]
    switch (act_menu)
   81f8a:	4b28      	ldr	r3, [pc, #160]	; (8202c <menu+0xac>)
   81f8c:	781b      	ldrb	r3, [r3, #0]
   81f8e:	2b09      	cmp	r3, #9
   81f90:	d847      	bhi.n	82022 <menu+0xa2>
   81f92:	a201      	add	r2, pc, #4	; (adr r2, 81f98 <menu+0x18>)
   81f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81f98:	00081fc1 	.word	0x00081fc1
   81f9c:	00081fcb 	.word	0x00081fcb
   81fa0:	00081fd5 	.word	0x00081fd5
   81fa4:	00081fdf 	.word	0x00081fdf
   81fa8:	00081fe9 	.word	0x00081fe9
   81fac:	00082007 	.word	0x00082007
   81fb0:	00082011 	.word	0x00082011
   81fb4:	00081ff3 	.word	0x00081ff3
   81fb8:	00081ffd 	.word	0x00081ffd
   81fbc:	0008201b 	.word	0x0008201b
    {
        case MENU_MAIN:
            menu_main(event1);
   81fc0:	79fb      	ldrb	r3, [r7, #7]
   81fc2:	4618      	mov	r0, r3
   81fc4:	4b1a      	ldr	r3, [pc, #104]	; (82030 <menu+0xb0>)
   81fc6:	4798      	blx	r3
            break;
   81fc8:	e02c      	b.n	82024 <menu+0xa4>
        case MENU_MATCH:
            menu_match(event1);
   81fca:	79fb      	ldrb	r3, [r7, #7]
   81fcc:	4618      	mov	r0, r3
   81fce:	4b19      	ldr	r3, [pc, #100]	; (82034 <menu+0xb4>)
   81fd0:	4798      	blx	r3
            break;
   81fd2:	e027      	b.n	82024 <menu+0xa4>
        case MENU_SENSORS:
            menu_sensors(event1);
   81fd4:	79fb      	ldrb	r3, [r7, #7]
   81fd6:	4618      	mov	r0, r3
   81fd8:	4b17      	ldr	r3, [pc, #92]	; (82038 <menu+0xb8>)
   81fda:	4798      	blx	r3
            break;
   81fdc:	e022      	b.n	82024 <menu+0xa4>
        case MENU_SETTINGS:
            menu_settings(event1);
   81fde:	79fb      	ldrb	r3, [r7, #7]
   81fe0:	4618      	mov	r0, r3
   81fe2:	4b16      	ldr	r3, [pc, #88]	; (8203c <menu+0xbc>)
   81fe4:	4798      	blx	r3
            break;
   81fe6:	e01d      	b.n	82024 <menu+0xa4>
        case MENU_BALL:
            menu_ball(event1);
   81fe8:	79fb      	ldrb	r3, [r7, #7]
   81fea:	4618      	mov	r0, r3
   81fec:	4b14      	ldr	r3, [pc, #80]	; (82040 <menu+0xc0>)
   81fee:	4798      	blx	r3
            break;
   81ff0:	e018      	b.n	82024 <menu+0xa4>
        case MENU_COMPASS:
            menu_compass(event1);
   81ff2:	79fb      	ldrb	r3, [r7, #7]
   81ff4:	4618      	mov	r0, r3
   81ff6:	4b13      	ldr	r3, [pc, #76]	; (82044 <menu+0xc4>)
   81ff8:	4798      	blx	r3
            break;
   81ffa:	e013      	b.n	82024 <menu+0xa4>
        case MENU_COMPASS_CALIBRATION:
            menu_compass_calibration(event1);
   81ffc:	79fb      	ldrb	r3, [r7, #7]
   81ffe:	4618      	mov	r0, r3
   82000:	4b11      	ldr	r3, [pc, #68]	; (82048 <menu+0xc8>)
   82002:	4798      	blx	r3
            break;
   82004:	e00e      	b.n	82024 <menu+0xa4>
        case MENU_LINE:
            menu_line(event1);
   82006:	79fb      	ldrb	r3, [r7, #7]
   82008:	4618      	mov	r0, r3
   8200a:	4b10      	ldr	r3, [pc, #64]	; (8204c <menu+0xcc>)
   8200c:	4798      	blx	r3
            break;
   8200e:	e009      	b.n	82024 <menu+0xa4>
        case MENU_LINE_CALIBRATION:
            menu_line_calibration(event1);
   82010:	79fb      	ldrb	r3, [r7, #7]
   82012:	4618      	mov	r0, r3
   82014:	4b0e      	ldr	r3, [pc, #56]	; (82050 <menu+0xd0>)
   82016:	4798      	blx	r3
            break;
   82018:	e004      	b.n	82024 <menu+0xa4>
        case MENU_SHUTDOWN:
            menu_shutdown(event1);
   8201a:	79fb      	ldrb	r3, [r7, #7]
   8201c:	4618      	mov	r0, r3
   8201e:	4b0d      	ldr	r3, [pc, #52]	; (82054 <menu+0xd4>)
   82020:	4798      	blx	r3
        default:
            break;
   82022:	bf00      	nop
    }
}
   82024:	bf00      	nop
   82026:	3708      	adds	r7, #8
   82028:	46bd      	mov	sp, r7
   8202a:	bd80      	pop	{r7, pc}
   8202c:	20070dc0 	.word	0x20070dc0
   82030:	00082059 	.word	0x00082059
   82034:	00082181 	.word	0x00082181
   82038:	000821b1 	.word	0x000821b1
   8203c:	000825d1 	.word	0x000825d1
   82040:	000822d5 	.word	0x000822d5
   82044:	0008239d 	.word	0x0008239d
   82048:	00082471 	.word	0x00082471
   8204c:	00082571 	.word	0x00082571
   82050:	000825a1 	.word	0x000825a1
   82054:	000826f5 	.word	0x000826f5

00082058 <menu_main>:

static void menu_main(event_t event1)
{
   82058:	b580      	push	{r7, lr}
   8205a:	b082      	sub	sp, #8
   8205c:	af00      	add	r7, sp, #0
   8205e:	4603      	mov	r3, r0
   82060:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   82062:	4b41      	ldr	r3, [pc, #260]	; (82168 <menu_main+0x110>)
   82064:	781b      	ldrb	r3, [r3, #0]
   82066:	2b00      	cmp	r3, #0
   82068:	d004      	beq.n	82074 <menu_main+0x1c>
    {
        print_menu = 0;
   8206a:	4b3f      	ldr	r3, [pc, #252]	; (82168 <menu_main+0x110>)
   8206c:	2200      	movs	r2, #0
   8206e:	701a      	strb	r2, [r3, #0]
        print_menu_main();
   82070:	4b3e      	ldr	r3, [pc, #248]	; (8216c <menu_main+0x114>)
   82072:	4798      	blx	r3
    }
    
    update_battery(0);
   82074:	2000      	movs	r0, #0
   82076:	4b3e      	ldr	r3, [pc, #248]	; (82170 <menu_main+0x118>)
   82078:	4798      	blx	r3
    
    switch (event1)
   8207a:	79fb      	ldrb	r3, [r7, #7]
   8207c:	3b01      	subs	r3, #1
   8207e:	2b0f      	cmp	r3, #15
   82080:	d868      	bhi.n	82154 <menu_main+0xfc>
   82082:	a201      	add	r2, pc, #4	; (adr r2, 82088 <menu_main+0x30>)
   82084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82088:	000820c9 	.word	0x000820c9
   8208c:	00082155 	.word	0x00082155
   82090:	00082155 	.word	0x00082155
   82094:	00082155 	.word	0x00082155
   82098:	00082155 	.word	0x00082155
   8209c:	00082155 	.word	0x00082155
   820a0:	00082109 	.word	0x00082109
   820a4:	00082155 	.word	0x00082155
   820a8:	00082155 	.word	0x00082155
   820ac:	00082155 	.word	0x00082155
   820b0:	00082155 	.word	0x00082155
   820b4:	00082155 	.word	0x00082155
   820b8:	000820e9 	.word	0x000820e9
   820bc:	00082155 	.word	0x00082155
   820c0:	00082155 	.word	0x00082155
   820c4:	00082147 	.word	0x00082147
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.main.act_cursor_line > menu_info.main.min_cursor_line)
   820c8:	4b2a      	ldr	r3, [pc, #168]	; (82174 <menu_main+0x11c>)
   820ca:	781a      	ldrb	r2, [r3, #0]
   820cc:	4b29      	ldr	r3, [pc, #164]	; (82174 <menu_main+0x11c>)
   820ce:	789b      	ldrb	r3, [r3, #2]
   820d0:	429a      	cmp	r2, r3
   820d2:	d941      	bls.n	82158 <menu_main+0x100>
            {
                menu_info.main.act_cursor_line--;
   820d4:	4b27      	ldr	r3, [pc, #156]	; (82174 <menu_main+0x11c>)
   820d6:	781b      	ldrb	r3, [r3, #0]
   820d8:	3b01      	subs	r3, #1
   820da:	b2da      	uxtb	r2, r3
   820dc:	4b25      	ldr	r3, [pc, #148]	; (82174 <menu_main+0x11c>)
   820de:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   820e0:	4824      	ldr	r0, [pc, #144]	; (82174 <menu_main+0x11c>)
   820e2:	4b25      	ldr	r3, [pc, #148]	; (82178 <menu_main+0x120>)
   820e4:	4798      	blx	r3
            }
            break;
   820e6:	e037      	b.n	82158 <menu_main+0x100>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.main.act_cursor_line < menu_info.main.max_cursor_line)
   820e8:	4b22      	ldr	r3, [pc, #136]	; (82174 <menu_main+0x11c>)
   820ea:	781a      	ldrb	r2, [r3, #0]
   820ec:	4b21      	ldr	r3, [pc, #132]	; (82174 <menu_main+0x11c>)
   820ee:	78db      	ldrb	r3, [r3, #3]
   820f0:	429a      	cmp	r2, r3
   820f2:	d233      	bcs.n	8215c <menu_main+0x104>
            {
                menu_info.main.act_cursor_line++;
   820f4:	4b1f      	ldr	r3, [pc, #124]	; (82174 <menu_main+0x11c>)
   820f6:	781b      	ldrb	r3, [r3, #0]
   820f8:	3301      	adds	r3, #1
   820fa:	b2da      	uxtb	r2, r3
   820fc:	4b1d      	ldr	r3, [pc, #116]	; (82174 <menu_main+0x11c>)
   820fe:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   82100:	481c      	ldr	r0, [pc, #112]	; (82174 <menu_main+0x11c>)
   82102:	4b1d      	ldr	r3, [pc, #116]	; (82178 <menu_main+0x120>)
   82104:	4798      	blx	r3
            }
            break;
   82106:	e029      	b.n	8215c <menu_main+0x104>
        case EVENT_BUTTON_MID_P:
            {
                switch (menu_info.main.act_cursor_line)
   82108:	4b1a      	ldr	r3, [pc, #104]	; (82174 <menu_main+0x11c>)
   8210a:	781b      	ldrb	r3, [r3, #0]
   8210c:	2b03      	cmp	r3, #3
   8210e:	d00b      	beq.n	82128 <menu_main+0xd0>
   82110:	2b04      	cmp	r3, #4
   82112:	d010      	beq.n	82136 <menu_main+0xde>
   82114:	2b02      	cmp	r3, #2
   82116:	d000      	beq.n	8211a <menu_main+0xc2>
                    case 4:
                        act_menu = MENU_SETTINGS;
                        print_menu = 1;
                        break;
                    default:
                        break;
   82118:	e014      	b.n	82144 <menu_main+0xec>
                        act_menu = MENU_MATCH;
   8211a:	4b18      	ldr	r3, [pc, #96]	; (8217c <menu_main+0x124>)
   8211c:	2201      	movs	r2, #1
   8211e:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   82120:	4b11      	ldr	r3, [pc, #68]	; (82168 <menu_main+0x110>)
   82122:	2201      	movs	r2, #1
   82124:	701a      	strb	r2, [r3, #0]
                        break;
   82126:	e00d      	b.n	82144 <menu_main+0xec>
                        act_menu = MENU_SENSORS;
   82128:	4b14      	ldr	r3, [pc, #80]	; (8217c <menu_main+0x124>)
   8212a:	2202      	movs	r2, #2
   8212c:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   8212e:	4b0e      	ldr	r3, [pc, #56]	; (82168 <menu_main+0x110>)
   82130:	2201      	movs	r2, #1
   82132:	701a      	strb	r2, [r3, #0]
                        break;
   82134:	e006      	b.n	82144 <menu_main+0xec>
                        act_menu = MENU_SETTINGS;
   82136:	4b11      	ldr	r3, [pc, #68]	; (8217c <menu_main+0x124>)
   82138:	2203      	movs	r2, #3
   8213a:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   8213c:	4b0a      	ldr	r3, [pc, #40]	; (82168 <menu_main+0x110>)
   8213e:	2201      	movs	r2, #1
   82140:	701a      	strb	r2, [r3, #0]
                        break;
   82142:	bf00      	nop
                }
            }
            break;
   82144:	e00b      	b.n	8215e <menu_main+0x106>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SHUTDOWN;
   82146:	4b0d      	ldr	r3, [pc, #52]	; (8217c <menu_main+0x124>)
   82148:	2209      	movs	r2, #9
   8214a:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   8214c:	4b06      	ldr	r3, [pc, #24]	; (82168 <menu_main+0x110>)
   8214e:	2201      	movs	r2, #1
   82150:	701a      	strb	r2, [r3, #0]
            break;
   82152:	e004      	b.n	8215e <menu_main+0x106>
        default:
            break;
   82154:	bf00      	nop
   82156:	e002      	b.n	8215e <menu_main+0x106>
            break;
   82158:	bf00      	nop
   8215a:	e000      	b.n	8215e <menu_main+0x106>
            break;
   8215c:	bf00      	nop
    }
}
   8215e:	bf00      	nop
   82160:	3708      	adds	r7, #8
   82162:	46bd      	mov	sp, r7
   82164:	bd80      	pop	{r7, pc}
   82166:	bf00      	nop
   82168:	2007018c 	.word	0x2007018c
   8216c:	00082805 	.word	0x00082805
   82170:	000833dd 	.word	0x000833dd
   82174:	20070190 	.word	0x20070190
   82178:	00082945 	.word	0x00082945
   8217c:	20070dc0 	.word	0x20070dc0

00082180 <menu_match>:

static void menu_match(event_t event1)
{
   82180:	b480      	push	{r7}
   82182:	b083      	sub	sp, #12
   82184:	af00      	add	r7, sp, #0
   82186:	4603      	mov	r3, r0
   82188:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   8218a:	79fb      	ldrb	r3, [r7, #7]
   8218c:	2b10      	cmp	r3, #16
   8218e:	d105      	bne.n	8219c <menu_match+0x1c>
    {
        act_menu = MENU_MAIN;
   82190:	4b05      	ldr	r3, [pc, #20]	; (821a8 <menu_match+0x28>)
   82192:	2200      	movs	r2, #0
   82194:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   82196:	4b05      	ldr	r3, [pc, #20]	; (821ac <menu_match+0x2c>)
   82198:	2201      	movs	r2, #1
   8219a:	701a      	strb	r2, [r3, #0]
    }
}
   8219c:	bf00      	nop
   8219e:	370c      	adds	r7, #12
   821a0:	46bd      	mov	sp, r7
   821a2:	bc80      	pop	{r7}
   821a4:	4770      	bx	lr
   821a6:	bf00      	nop
   821a8:	20070dc0 	.word	0x20070dc0
   821ac:	2007018c 	.word	0x2007018c

000821b0 <menu_sensors>:

static void menu_sensors(event_t event1)
{
   821b0:	b580      	push	{r7, lr}
   821b2:	b082      	sub	sp, #8
   821b4:	af00      	add	r7, sp, #0
   821b6:	4603      	mov	r3, r0
   821b8:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   821ba:	4b40      	ldr	r3, [pc, #256]	; (822bc <menu_sensors+0x10c>)
   821bc:	781b      	ldrb	r3, [r3, #0]
   821be:	2b00      	cmp	r3, #0
   821c0:	d004      	beq.n	821cc <menu_sensors+0x1c>
    {
        print_menu = 0;
   821c2:	4b3e      	ldr	r3, [pc, #248]	; (822bc <menu_sensors+0x10c>)
   821c4:	2200      	movs	r2, #0
   821c6:	701a      	strb	r2, [r3, #0]
        print_menu_sensors();
   821c8:	4b3d      	ldr	r3, [pc, #244]	; (822c0 <menu_sensors+0x110>)
   821ca:	4798      	blx	r3
    }
    
    switch(event1)
   821cc:	79fb      	ldrb	r3, [r7, #7]
   821ce:	3b01      	subs	r3, #1
   821d0:	2b0f      	cmp	r3, #15
   821d2:	d869      	bhi.n	822a8 <menu_sensors+0xf8>
   821d4:	a201      	add	r2, pc, #4	; (adr r2, 821dc <menu_sensors+0x2c>)
   821d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   821da:	bf00      	nop
   821dc:	0008221d 	.word	0x0008221d
   821e0:	000822a9 	.word	0x000822a9
   821e4:	000822a9 	.word	0x000822a9
   821e8:	000822a9 	.word	0x000822a9
   821ec:	000822a9 	.word	0x000822a9
   821f0:	000822a9 	.word	0x000822a9
   821f4:	0008225d 	.word	0x0008225d
   821f8:	000822a9 	.word	0x000822a9
   821fc:	000822a9 	.word	0x000822a9
   82200:	000822a9 	.word	0x000822a9
   82204:	000822a9 	.word	0x000822a9
   82208:	000822a9 	.word	0x000822a9
   8220c:	0008223d 	.word	0x0008223d
   82210:	000822a9 	.word	0x000822a9
   82214:	000822a9 	.word	0x000822a9
   82218:	0008229b 	.word	0x0008229b
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.sensors.act_cursor_line > menu_info.sensors.min_cursor_line)
   8221c:	4b29      	ldr	r3, [pc, #164]	; (822c4 <menu_sensors+0x114>)
   8221e:	791a      	ldrb	r2, [r3, #4]
   82220:	4b28      	ldr	r3, [pc, #160]	; (822c4 <menu_sensors+0x114>)
   82222:	799b      	ldrb	r3, [r3, #6]
   82224:	429a      	cmp	r2, r3
   82226:	d941      	bls.n	822ac <menu_sensors+0xfc>
            {
                menu_info.sensors.act_cursor_line--;
   82228:	4b26      	ldr	r3, [pc, #152]	; (822c4 <menu_sensors+0x114>)
   8222a:	791b      	ldrb	r3, [r3, #4]
   8222c:	3b01      	subs	r3, #1
   8222e:	b2da      	uxtb	r2, r3
   82230:	4b24      	ldr	r3, [pc, #144]	; (822c4 <menu_sensors+0x114>)
   82232:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   82234:	4824      	ldr	r0, [pc, #144]	; (822c8 <menu_sensors+0x118>)
   82236:	4b25      	ldr	r3, [pc, #148]	; (822cc <menu_sensors+0x11c>)
   82238:	4798      	blx	r3
            }
            break;
   8223a:	e037      	b.n	822ac <menu_sensors+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.sensors.act_cursor_line < menu_info.sensors.max_cursor_line)
   8223c:	4b21      	ldr	r3, [pc, #132]	; (822c4 <menu_sensors+0x114>)
   8223e:	791a      	ldrb	r2, [r3, #4]
   82240:	4b20      	ldr	r3, [pc, #128]	; (822c4 <menu_sensors+0x114>)
   82242:	79db      	ldrb	r3, [r3, #7]
   82244:	429a      	cmp	r2, r3
   82246:	d233      	bcs.n	822b0 <menu_sensors+0x100>
            {
                menu_info.sensors.act_cursor_line++;
   82248:	4b1e      	ldr	r3, [pc, #120]	; (822c4 <menu_sensors+0x114>)
   8224a:	791b      	ldrb	r3, [r3, #4]
   8224c:	3301      	adds	r3, #1
   8224e:	b2da      	uxtb	r2, r3
   82250:	4b1c      	ldr	r3, [pc, #112]	; (822c4 <menu_sensors+0x114>)
   82252:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   82254:	481c      	ldr	r0, [pc, #112]	; (822c8 <menu_sensors+0x118>)
   82256:	4b1d      	ldr	r3, [pc, #116]	; (822cc <menu_sensors+0x11c>)
   82258:	4798      	blx	r3
            }
            break;
   8225a:	e029      	b.n	822b0 <menu_sensors+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.sensors.act_cursor_line)
   8225c:	4b19      	ldr	r3, [pc, #100]	; (822c4 <menu_sensors+0x114>)
   8225e:	791b      	ldrb	r3, [r3, #4]
   82260:	2b02      	cmp	r3, #2
   82262:	d00b      	beq.n	8227c <menu_sensors+0xcc>
   82264:	2b03      	cmp	r3, #3
   82266:	d010      	beq.n	8228a <menu_sensors+0xda>
   82268:	2b01      	cmp	r3, #1
   8226a:	d000      	beq.n	8226e <menu_sensors+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   8226c:	e014      	b.n	82298 <menu_sensors+0xe8>
                    act_menu = MENU_BALL;
   8226e:	4b18      	ldr	r3, [pc, #96]	; (822d0 <menu_sensors+0x120>)
   82270:	2204      	movs	r2, #4
   82272:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   82274:	4b11      	ldr	r3, [pc, #68]	; (822bc <menu_sensors+0x10c>)
   82276:	2201      	movs	r2, #1
   82278:	701a      	strb	r2, [r3, #0]
                    break;
   8227a:	e00d      	b.n	82298 <menu_sensors+0xe8>
                    act_menu = MENU_COMPASS;
   8227c:	4b14      	ldr	r3, [pc, #80]	; (822d0 <menu_sensors+0x120>)
   8227e:	2207      	movs	r2, #7
   82280:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   82282:	4b0e      	ldr	r3, [pc, #56]	; (822bc <menu_sensors+0x10c>)
   82284:	2201      	movs	r2, #1
   82286:	701a      	strb	r2, [r3, #0]
                    break;
   82288:	e006      	b.n	82298 <menu_sensors+0xe8>
                    act_menu = MENU_LINE;
   8228a:	4b11      	ldr	r3, [pc, #68]	; (822d0 <menu_sensors+0x120>)
   8228c:	2205      	movs	r2, #5
   8228e:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   82290:	4b0a      	ldr	r3, [pc, #40]	; (822bc <menu_sensors+0x10c>)
   82292:	2201      	movs	r2, #1
   82294:	701a      	strb	r2, [r3, #0]
                    break;
   82296:	bf00      	nop
            }
            break;
   82298:	e00b      	b.n	822b2 <menu_sensors+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   8229a:	4b0d      	ldr	r3, [pc, #52]	; (822d0 <menu_sensors+0x120>)
   8229c:	2200      	movs	r2, #0
   8229e:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   822a0:	4b06      	ldr	r3, [pc, #24]	; (822bc <menu_sensors+0x10c>)
   822a2:	2201      	movs	r2, #1
   822a4:	701a      	strb	r2, [r3, #0]
            break;
   822a6:	e004      	b.n	822b2 <menu_sensors+0x102>
        default:
            break;
   822a8:	bf00      	nop
   822aa:	e002      	b.n	822b2 <menu_sensors+0x102>
            break;
   822ac:	bf00      	nop
   822ae:	e000      	b.n	822b2 <menu_sensors+0x102>
            break;
   822b0:	bf00      	nop
    }
}
   822b2:	bf00      	nop
   822b4:	3708      	adds	r7, #8
   822b6:	46bd      	mov	sp, r7
   822b8:	bd80      	pop	{r7, pc}
   822ba:	bf00      	nop
   822bc:	2007018c 	.word	0x2007018c
   822c0:	00082875 	.word	0x00082875
   822c4:	20070190 	.word	0x20070190
   822c8:	20070194 	.word	0x20070194
   822cc:	00082945 	.word	0x00082945
   822d0:	20070dc0 	.word	0x20070dc0

000822d4 <menu_ball>:

static void menu_ball(event_t event1)
{
   822d4:	b580      	push	{r7, lr}
   822d6:	b082      	sub	sp, #8
   822d8:	af00      	add	r7, sp, #0
   822da:	4603      	mov	r3, r0
   822dc:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   822de:	4b24      	ldr	r3, [pc, #144]	; (82370 <menu_ball+0x9c>)
   822e0:	781b      	ldrb	r3, [r3, #0]
   822e2:	2b00      	cmp	r3, #0
   822e4:	d004      	beq.n	822f0 <menu_ball+0x1c>
    {
        print_menu = 0;
   822e6:	4b22      	ldr	r3, [pc, #136]	; (82370 <menu_ball+0x9c>)
   822e8:	2200      	movs	r2, #0
   822ea:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   822ec:	4b21      	ldr	r3, [pc, #132]	; (82374 <menu_ball+0xa0>)
   822ee:	4798      	blx	r3
    }
    
    if (rtm.ball.dir == 0)
   822f0:	4b21      	ldr	r3, [pc, #132]	; (82378 <menu_ball+0xa4>)
   822f2:	781b      	ldrb	r3, [r3, #0]
   822f4:	2b00      	cmp	r3, #0
   822f6:	d105      	bne.n	82304 <menu_ball+0x30>
    {
        lcd_print_s(2, 0, "RPi inactive   ");
   822f8:	4a20      	ldr	r2, [pc, #128]	; (8237c <menu_ball+0xa8>)
   822fa:	2100      	movs	r1, #0
   822fc:	2002      	movs	r0, #2
   822fe:	4b20      	ldr	r3, [pc, #128]	; (82380 <menu_ball+0xac>)
   82300:	4798      	blx	r3
   82302:	e019      	b.n	82338 <menu_ball+0x64>
    }
    else if (rtm.ball.see) //  && rtm.ball.dir != 0
   82304:	4b1c      	ldr	r3, [pc, #112]	; (82378 <menu_ball+0xa4>)
   82306:	785b      	ldrb	r3, [r3, #1]
   82308:	f003 0301 	and.w	r3, r3, #1
   8230c:	b2db      	uxtb	r3, r3
   8230e:	2b00      	cmp	r3, #0
   82310:	d00d      	beq.n	8232e <menu_ball+0x5a>
    {
        sprintf(sprintf_buf, "Direction: %4d   ", rtm.ball.dir - 128);
   82312:	4b19      	ldr	r3, [pc, #100]	; (82378 <menu_ball+0xa4>)
   82314:	781b      	ldrb	r3, [r3, #0]
   82316:	3b80      	subs	r3, #128	; 0x80
   82318:	461a      	mov	r2, r3
   8231a:	491a      	ldr	r1, [pc, #104]	; (82384 <menu_ball+0xb0>)
   8231c:	481a      	ldr	r0, [pc, #104]	; (82388 <menu_ball+0xb4>)
   8231e:	4b1b      	ldr	r3, [pc, #108]	; (8238c <menu_ball+0xb8>)
   82320:	4798      	blx	r3
        lcd_print_s(2, 0, sprintf_buf);
   82322:	4a19      	ldr	r2, [pc, #100]	; (82388 <menu_ball+0xb4>)
   82324:	2100      	movs	r1, #0
   82326:	2002      	movs	r0, #2
   82328:	4b15      	ldr	r3, [pc, #84]	; (82380 <menu_ball+0xac>)
   8232a:	4798      	blx	r3
   8232c:	e004      	b.n	82338 <menu_ball+0x64>
    }
    else
    {
        lcd_print_s(2, 0, "no ball found  ");
   8232e:	4a18      	ldr	r2, [pc, #96]	; (82390 <menu_ball+0xbc>)
   82330:	2100      	movs	r1, #0
   82332:	2002      	movs	r0, #2
   82334:	4b12      	ldr	r3, [pc, #72]	; (82380 <menu_ball+0xac>)
   82336:	4798      	blx	r3
    }
    
    sprintf(sprintf_buf, "Having ball: %1d", rtm.ball.have);
   82338:	4b0f      	ldr	r3, [pc, #60]	; (82378 <menu_ball+0xa4>)
   8233a:	785b      	ldrb	r3, [r3, #1]
   8233c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   82340:	b2db      	uxtb	r3, r3
   82342:	461a      	mov	r2, r3
   82344:	4913      	ldr	r1, [pc, #76]	; (82394 <menu_ball+0xc0>)
   82346:	4810      	ldr	r0, [pc, #64]	; (82388 <menu_ball+0xb4>)
   82348:	4b10      	ldr	r3, [pc, #64]	; (8238c <menu_ball+0xb8>)
   8234a:	4798      	blx	r3
    lcd_print_s(3, 0, sprintf_buf);
   8234c:	4a0e      	ldr	r2, [pc, #56]	; (82388 <menu_ball+0xb4>)
   8234e:	2100      	movs	r1, #0
   82350:	2003      	movs	r0, #3
   82352:	4b0b      	ldr	r3, [pc, #44]	; (82380 <menu_ball+0xac>)
   82354:	4798      	blx	r3
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   82356:	79fb      	ldrb	r3, [r7, #7]
   82358:	2b10      	cmp	r3, #16
   8235a:	d105      	bne.n	82368 <menu_ball+0x94>
    {
        act_menu = MENU_SENSORS;
   8235c:	4b0e      	ldr	r3, [pc, #56]	; (82398 <menu_ball+0xc4>)
   8235e:	2202      	movs	r2, #2
   82360:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   82362:	4b03      	ldr	r3, [pc, #12]	; (82370 <menu_ball+0x9c>)
   82364:	2201      	movs	r2, #1
   82366:	701a      	strb	r2, [r3, #0]
    }
}
   82368:	bf00      	nop
   8236a:	3708      	adds	r7, #8
   8236c:	46bd      	mov	sp, r7
   8236e:	bd80      	pop	{r7, pc}
   82370:	2007018c 	.word	0x2007018c
   82374:	00081a0d 	.word	0x00081a0d
   82378:	20070e18 	.word	0x20070e18
   8237c:	00089a00 	.word	0x00089a00
   82380:	00081a2d 	.word	0x00081a2d
   82384:	00089a10 	.word	0x00089a10
   82388:	20070e5c 	.word	0x20070e5c
   8238c:	000859a5 	.word	0x000859a5
   82390:	00089a24 	.word	0x00089a24
   82394:	00089a34 	.word	0x00089a34
   82398:	20070dc0 	.word	0x20070dc0

0008239c <menu_compass>:

static void menu_compass(event_t event1)
{
   8239c:	b590      	push	{r4, r7, lr}
   8239e:	b083      	sub	sp, #12
   823a0:	af00      	add	r7, sp, #0
   823a2:	4603      	mov	r3, r0
   823a4:	71fb      	strb	r3, [r7, #7]
    static uint16_t prev_direction = 0;
    
    if(print_menu)
   823a6:	4b24      	ldr	r3, [pc, #144]	; (82438 <menu_compass+0x9c>)
   823a8:	781b      	ldrb	r3, [r3, #0]
   823aa:	2b00      	cmp	r3, #0
   823ac:	d004      	beq.n	823b8 <menu_compass+0x1c>
    {
        print_menu = 0;
   823ae:	4b22      	ldr	r3, [pc, #136]	; (82438 <menu_compass+0x9c>)
   823b0:	2200      	movs	r2, #0
   823b2:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   823b4:	4b21      	ldr	r3, [pc, #132]	; (8243c <menu_compass+0xa0>)
   823b6:	4798      	blx	r3
    }
    
    update_compass();
   823b8:	4b21      	ldr	r3, [pc, #132]	; (82440 <menu_compass+0xa4>)
   823ba:	4798      	blx	r3
    if(direction != prev_direction)
   823bc:	4b21      	ldr	r3, [pc, #132]	; (82444 <menu_compass+0xa8>)
   823be:	881a      	ldrh	r2, [r3, #0]
   823c0:	4b21      	ldr	r3, [pc, #132]	; (82448 <menu_compass+0xac>)
   823c2:	881b      	ldrh	r3, [r3, #0]
   823c4:	429a      	cmp	r2, r3
   823c6:	d01e      	beq.n	82406 <menu_compass+0x6a>
    {
        prev_direction = direction;
   823c8:	4b1e      	ldr	r3, [pc, #120]	; (82444 <menu_compass+0xa8>)
   823ca:	881a      	ldrh	r2, [r3, #0]
   823cc:	4b1e      	ldr	r3, [pc, #120]	; (82448 <menu_compass+0xac>)
   823ce:	801a      	strh	r2, [r3, #0]
        sprintf(sprintf_buf, "  Direction: %3.1f  ", (float)direction / 10.0);
   823d0:	4b1c      	ldr	r3, [pc, #112]	; (82444 <menu_compass+0xa8>)
   823d2:	881a      	ldrh	r2, [r3, #0]
   823d4:	4b1d      	ldr	r3, [pc, #116]	; (8244c <menu_compass+0xb0>)
   823d6:	4610      	mov	r0, r2
   823d8:	4798      	blx	r3
   823da:	4602      	mov	r2, r0
   823dc:	4b1c      	ldr	r3, [pc, #112]	; (82450 <menu_compass+0xb4>)
   823de:	4610      	mov	r0, r2
   823e0:	4798      	blx	r3
   823e2:	4c1c      	ldr	r4, [pc, #112]	; (82454 <menu_compass+0xb8>)
   823e4:	f04f 0200 	mov.w	r2, #0
   823e8:	4b1b      	ldr	r3, [pc, #108]	; (82458 <menu_compass+0xbc>)
   823ea:	47a0      	blx	r4
   823ec:	4603      	mov	r3, r0
   823ee:	460c      	mov	r4, r1
   823f0:	461a      	mov	r2, r3
   823f2:	4623      	mov	r3, r4
   823f4:	4919      	ldr	r1, [pc, #100]	; (8245c <menu_compass+0xc0>)
   823f6:	481a      	ldr	r0, [pc, #104]	; (82460 <menu_compass+0xc4>)
   823f8:	4c1a      	ldr	r4, [pc, #104]	; (82464 <menu_compass+0xc8>)
   823fa:	47a0      	blx	r4
        lcd_print_s(2, 0, sprintf_buf);
   823fc:	4a18      	ldr	r2, [pc, #96]	; (82460 <menu_compass+0xc4>)
   823fe:	2100      	movs	r1, #0
   82400:	2002      	movs	r0, #2
   82402:	4b19      	ldr	r3, [pc, #100]	; (82468 <menu_compass+0xcc>)
   82404:	4798      	blx	r3
    }
    
    switch(event1)
   82406:	79fb      	ldrb	r3, [r7, #7]
   82408:	2b07      	cmp	r3, #7
   8240a:	d002      	beq.n	82412 <menu_compass+0x76>
   8240c:	2b10      	cmp	r3, #16
   8240e:	d007      	beq.n	82420 <menu_compass+0x84>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SENSORS;
            print_menu = 1;
            break;
        default:
            break;
   82410:	e00d      	b.n	8242e <menu_compass+0x92>
            act_menu = MENU_COMPASS_CALIBRATION;
   82412:	4b16      	ldr	r3, [pc, #88]	; (8246c <menu_compass+0xd0>)
   82414:	2208      	movs	r2, #8
   82416:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82418:	4b07      	ldr	r3, [pc, #28]	; (82438 <menu_compass+0x9c>)
   8241a:	2201      	movs	r2, #1
   8241c:	701a      	strb	r2, [r3, #0]
            break;
   8241e:	e006      	b.n	8242e <menu_compass+0x92>
            act_menu = MENU_SENSORS;
   82420:	4b12      	ldr	r3, [pc, #72]	; (8246c <menu_compass+0xd0>)
   82422:	2202      	movs	r2, #2
   82424:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82426:	4b04      	ldr	r3, [pc, #16]	; (82438 <menu_compass+0x9c>)
   82428:	2201      	movs	r2, #1
   8242a:	701a      	strb	r2, [r3, #0]
            break;
   8242c:	bf00      	nop
    }
}
   8242e:	bf00      	nop
   82430:	370c      	adds	r7, #12
   82432:	46bd      	mov	sp, r7
   82434:	bd90      	pop	{r4, r7, pc}
   82436:	bf00      	nop
   82438:	2007018c 	.word	0x2007018c
   8243c:	00081a0d 	.word	0x00081a0d
   82440:	00081749 	.word	0x00081749
   82444:	20070e2c 	.word	0x20070e2c
   82448:	20070dc4 	.word	0x20070dc4
   8244c:	00085431 	.word	0x00085431
   82450:	00084df9 	.word	0x00084df9
   82454:	000850f5 	.word	0x000850f5
   82458:	40240000 	.word	0x40240000
   8245c:	00089a48 	.word	0x00089a48
   82460:	20070e5c 	.word	0x20070e5c
   82464:	000859a5 	.word	0x000859a5
   82468:	00081a2d 	.word	0x00081a2d
   8246c:	20070dc0 	.word	0x20070dc0

00082470 <menu_compass_calibration>:

static void menu_compass_calibration(event_t event1)
{
   82470:	b580      	push	{r7, lr}
   82472:	b084      	sub	sp, #16
   82474:	af00      	add	r7, sp, #0
   82476:	4603      	mov	r3, r0
   82478:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   8247a:	4b2e      	ldr	r3, [pc, #184]	; (82534 <menu_compass_calibration+0xc4>)
   8247c:	781b      	ldrb	r3, [r3, #0]
   8247e:	2b00      	cmp	r3, #0
   82480:	d016      	beq.n	824b0 <menu_compass_calibration+0x40>
    {
        print_menu = 0;
   82482:	4b2c      	ldr	r3, [pc, #176]	; (82534 <menu_compass_calibration+0xc4>)
   82484:	2200      	movs	r2, #0
   82486:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   82488:	4b2b      	ldr	r3, [pc, #172]	; (82538 <menu_compass_calibration+0xc8>)
   8248a:	4798      	blx	r3
        lcd_print_s(2, 1, "calibrate compass");
   8248c:	4a2b      	ldr	r2, [pc, #172]	; (8253c <menu_compass_calibration+0xcc>)
   8248e:	2101      	movs	r1, #1
   82490:	2002      	movs	r0, #2
   82492:	4b2b      	ldr	r3, [pc, #172]	; (82540 <menu_compass_calibration+0xd0>)
   82494:	4798      	blx	r3
        sprintf(sprintf_buf, "  Direction: %1d  ", compass_cal_step + 1);
   82496:	4b2b      	ldr	r3, [pc, #172]	; (82544 <menu_compass_calibration+0xd4>)
   82498:	781b      	ldrb	r3, [r3, #0]
   8249a:	3301      	adds	r3, #1
   8249c:	461a      	mov	r2, r3
   8249e:	492a      	ldr	r1, [pc, #168]	; (82548 <menu_compass_calibration+0xd8>)
   824a0:	482a      	ldr	r0, [pc, #168]	; (8254c <menu_compass_calibration+0xdc>)
   824a2:	4b2b      	ldr	r3, [pc, #172]	; (82550 <menu_compass_calibration+0xe0>)
   824a4:	4798      	blx	r3
        lcd_print_s(3, 1, sprintf_buf);
   824a6:	4a29      	ldr	r2, [pc, #164]	; (8254c <menu_compass_calibration+0xdc>)
   824a8:	2101      	movs	r1, #1
   824aa:	2003      	movs	r0, #3
   824ac:	4b24      	ldr	r3, [pc, #144]	; (82540 <menu_compass_calibration+0xd0>)
   824ae:	4798      	blx	r3
    }
    
    if(event1 == EVENT_BUTTON_MID_P)
   824b0:	79fb      	ldrb	r3, [r7, #7]
   824b2:	2b07      	cmp	r3, #7
   824b4:	d139      	bne.n	8252a <menu_compass_calibration+0xba>
    {
        twi_packet_t *tx_packet = twi_get_tx_packet();
   824b6:	4b27      	ldr	r3, [pc, #156]	; (82554 <menu_compass_calibration+0xe4>)
   824b8:	4798      	blx	r3
   824ba:	60f8      	str	r0, [r7, #12]
        
        tx_packet->chip = 0x60;
   824bc:	68fb      	ldr	r3, [r7, #12]
   824be:	2260      	movs	r2, #96	; 0x60
   824c0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        tx_packet->addr[0] = 0x0f;
   824c4:	68fb      	ldr	r3, [r7, #12]
   824c6:	220f      	movs	r2, #15
   824c8:	701a      	strb	r2, [r3, #0]
        tx_packet->addr_length = 1;
   824ca:	68fb      	ldr	r3, [r7, #12]
   824cc:	2201      	movs	r2, #1
   824ce:	605a      	str	r2, [r3, #4]
        
        tx_packet->buffer[0] = 0xff;
   824d0:	68fb      	ldr	r3, [r7, #12]
   824d2:	22ff      	movs	r2, #255	; 0xff
   824d4:	721a      	strb	r2, [r3, #8]
        tx_packet->length = 1;
   824d6:	68fb      	ldr	r3, [r7, #12]
   824d8:	2201      	movs	r2, #1
   824da:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        
        set_compass_is_busy();
   824de:	4b1e      	ldr	r3, [pc, #120]	; (82558 <menu_compass_calibration+0xe8>)
   824e0:	4798      	blx	r3
        twi_pdc_master_write(TWI0, tx_packet);
   824e2:	68f9      	ldr	r1, [r7, #12]
   824e4:	481d      	ldr	r0, [pc, #116]	; (8255c <menu_compass_calibration+0xec>)
   824e6:	4b1e      	ldr	r3, [pc, #120]	; (82560 <menu_compass_calibration+0xf0>)
   824e8:	4798      	blx	r3
        while(compass_is_busy());
   824ea:	bf00      	nop
   824ec:	4b1d      	ldr	r3, [pc, #116]	; (82564 <menu_compass_calibration+0xf4>)
   824ee:	4798      	blx	r3
   824f0:	4603      	mov	r3, r0
   824f2:	2b00      	cmp	r3, #0
   824f4:	d1fa      	bne.n	824ec <menu_compass_calibration+0x7c>
        mdelay(500);
   824f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   824fa:	4b1b      	ldr	r3, [pc, #108]	; (82568 <menu_compass_calibration+0xf8>)
   824fc:	4798      	blx	r3
        
        compass_cal_step++;
   824fe:	4b11      	ldr	r3, [pc, #68]	; (82544 <menu_compass_calibration+0xd4>)
   82500:	781b      	ldrb	r3, [r3, #0]
   82502:	3301      	adds	r3, #1
   82504:	b2da      	uxtb	r2, r3
   82506:	4b0f      	ldr	r3, [pc, #60]	; (82544 <menu_compass_calibration+0xd4>)
   82508:	701a      	strb	r2, [r3, #0]
        
        if(compass_cal_step == 4)
   8250a:	4b0e      	ldr	r3, [pc, #56]	; (82544 <menu_compass_calibration+0xd4>)
   8250c:	781b      	ldrb	r3, [r3, #0]
   8250e:	2b04      	cmp	r3, #4
   82510:	d108      	bne.n	82524 <menu_compass_calibration+0xb4>
        {
            compass_cal_step = 0;
   82512:	4b0c      	ldr	r3, [pc, #48]	; (82544 <menu_compass_calibration+0xd4>)
   82514:	2200      	movs	r2, #0
   82516:	701a      	strb	r2, [r3, #0]
            act_menu = MENU_COMPASS;
   82518:	4b14      	ldr	r3, [pc, #80]	; (8256c <menu_compass_calibration+0xfc>)
   8251a:	2207      	movs	r2, #7
   8251c:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   8251e:	4b05      	ldr	r3, [pc, #20]	; (82534 <menu_compass_calibration+0xc4>)
   82520:	2201      	movs	r2, #1
   82522:	701a      	strb	r2, [r3, #0]
        }
        print_menu = 1;
   82524:	4b03      	ldr	r3, [pc, #12]	; (82534 <menu_compass_calibration+0xc4>)
   82526:	2201      	movs	r2, #1
   82528:	701a      	strb	r2, [r3, #0]
    }
}
   8252a:	bf00      	nop
   8252c:	3710      	adds	r7, #16
   8252e:	46bd      	mov	sp, r7
   82530:	bd80      	pop	{r7, pc}
   82532:	bf00      	nop
   82534:	2007018c 	.word	0x2007018c
   82538:	00081a0d 	.word	0x00081a0d
   8253c:	00089a60 	.word	0x00089a60
   82540:	00081a2d 	.word	0x00081a2d
   82544:	20070dc1 	.word	0x20070dc1
   82548:	00089a74 	.word	0x00089a74
   8254c:	20070e5c 	.word	0x20070e5c
   82550:	000859a5 	.word	0x000859a5
   82554:	0008129d 	.word	0x0008129d
   82558:	000817d9 	.word	0x000817d9
   8255c:	4008c000 	.word	0x4008c000
   82560:	0008139d 	.word	0x0008139d
   82564:	000817f1 	.word	0x000817f1
   82568:	00083369 	.word	0x00083369
   8256c:	20070dc0 	.word	0x20070dc0

00082570 <menu_line>:

static void menu_line(event_t event1)
{
   82570:	b480      	push	{r7}
   82572:	b083      	sub	sp, #12
   82574:	af00      	add	r7, sp, #0
   82576:	4603      	mov	r3, r0
   82578:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   8257a:	79fb      	ldrb	r3, [r7, #7]
   8257c:	2b10      	cmp	r3, #16
   8257e:	d105      	bne.n	8258c <menu_line+0x1c>
    {
        act_menu = MENU_SENSORS;
   82580:	4b05      	ldr	r3, [pc, #20]	; (82598 <menu_line+0x28>)
   82582:	2202      	movs	r2, #2
   82584:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   82586:	4b05      	ldr	r3, [pc, #20]	; (8259c <menu_line+0x2c>)
   82588:	2201      	movs	r2, #1
   8258a:	701a      	strb	r2, [r3, #0]
    }
}
   8258c:	bf00      	nop
   8258e:	370c      	adds	r7, #12
   82590:	46bd      	mov	sp, r7
   82592:	bc80      	pop	{r7}
   82594:	4770      	bx	lr
   82596:	bf00      	nop
   82598:	20070dc0 	.word	0x20070dc0
   8259c:	2007018c 	.word	0x2007018c

000825a0 <menu_line_calibration>:

static void menu_line_calibration(event_t event1)
{
   825a0:	b480      	push	{r7}
   825a2:	b083      	sub	sp, #12
   825a4:	af00      	add	r7, sp, #0
   825a6:	4603      	mov	r3, r0
   825a8:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   825aa:	79fb      	ldrb	r3, [r7, #7]
   825ac:	2b10      	cmp	r3, #16
   825ae:	d105      	bne.n	825bc <menu_line_calibration+0x1c>
    {
        act_menu = MENU_LINE;
   825b0:	4b05      	ldr	r3, [pc, #20]	; (825c8 <menu_line_calibration+0x28>)
   825b2:	2205      	movs	r2, #5
   825b4:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   825b6:	4b05      	ldr	r3, [pc, #20]	; (825cc <menu_line_calibration+0x2c>)
   825b8:	2201      	movs	r2, #1
   825ba:	701a      	strb	r2, [r3, #0]
    }
}
   825bc:	bf00      	nop
   825be:	370c      	adds	r7, #12
   825c0:	46bd      	mov	sp, r7
   825c2:	bc80      	pop	{r7}
   825c4:	4770      	bx	lr
   825c6:	bf00      	nop
   825c8:	20070dc0 	.word	0x20070dc0
   825cc:	2007018c 	.word	0x2007018c

000825d0 <menu_settings>:

static void menu_settings(event_t event1)
{
   825d0:	b580      	push	{r7, lr}
   825d2:	b082      	sub	sp, #8
   825d4:	af00      	add	r7, sp, #0
   825d6:	4603      	mov	r3, r0
   825d8:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   825da:	4b40      	ldr	r3, [pc, #256]	; (826dc <menu_settings+0x10c>)
   825dc:	781b      	ldrb	r3, [r3, #0]
   825de:	2b00      	cmp	r3, #0
   825e0:	d004      	beq.n	825ec <menu_settings+0x1c>
    {
        print_menu = 0;
   825e2:	4b3e      	ldr	r3, [pc, #248]	; (826dc <menu_settings+0x10c>)
   825e4:	2200      	movs	r2, #0
   825e6:	701a      	strb	r2, [r3, #0]
        print_menu_settings();
   825e8:	4b3d      	ldr	r3, [pc, #244]	; (826e0 <menu_settings+0x110>)
   825ea:	4798      	blx	r3
    }
    
    switch(event1)
   825ec:	79fb      	ldrb	r3, [r7, #7]
   825ee:	3b01      	subs	r3, #1
   825f0:	2b0f      	cmp	r3, #15
   825f2:	d869      	bhi.n	826c8 <menu_settings+0xf8>
   825f4:	a201      	add	r2, pc, #4	; (adr r2, 825fc <menu_settings+0x2c>)
   825f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   825fa:	bf00      	nop
   825fc:	0008263d 	.word	0x0008263d
   82600:	000826c9 	.word	0x000826c9
   82604:	000826c9 	.word	0x000826c9
   82608:	000826c9 	.word	0x000826c9
   8260c:	000826c9 	.word	0x000826c9
   82610:	000826c9 	.word	0x000826c9
   82614:	0008267d 	.word	0x0008267d
   82618:	000826c9 	.word	0x000826c9
   8261c:	000826c9 	.word	0x000826c9
   82620:	000826c9 	.word	0x000826c9
   82624:	000826c9 	.word	0x000826c9
   82628:	000826c9 	.word	0x000826c9
   8262c:	0008265d 	.word	0x0008265d
   82630:	000826c9 	.word	0x000826c9
   82634:	000826c9 	.word	0x000826c9
   82638:	000826bb 	.word	0x000826bb
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.settings.act_cursor_line > menu_info.settings.min_cursor_line)
   8263c:	4b29      	ldr	r3, [pc, #164]	; (826e4 <menu_settings+0x114>)
   8263e:	7a1a      	ldrb	r2, [r3, #8]
   82640:	4b28      	ldr	r3, [pc, #160]	; (826e4 <menu_settings+0x114>)
   82642:	7a9b      	ldrb	r3, [r3, #10]
   82644:	429a      	cmp	r2, r3
   82646:	d941      	bls.n	826cc <menu_settings+0xfc>
            {
                menu_info.settings.act_cursor_line--;
   82648:	4b26      	ldr	r3, [pc, #152]	; (826e4 <menu_settings+0x114>)
   8264a:	7a1b      	ldrb	r3, [r3, #8]
   8264c:	3b01      	subs	r3, #1
   8264e:	b2da      	uxtb	r2, r3
   82650:	4b24      	ldr	r3, [pc, #144]	; (826e4 <menu_settings+0x114>)
   82652:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   82654:	4824      	ldr	r0, [pc, #144]	; (826e8 <menu_settings+0x118>)
   82656:	4b25      	ldr	r3, [pc, #148]	; (826ec <menu_settings+0x11c>)
   82658:	4798      	blx	r3
            }
            break;
   8265a:	e037      	b.n	826cc <menu_settings+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.settings.act_cursor_line < menu_info.settings.max_cursor_line)
   8265c:	4b21      	ldr	r3, [pc, #132]	; (826e4 <menu_settings+0x114>)
   8265e:	7a1a      	ldrb	r2, [r3, #8]
   82660:	4b20      	ldr	r3, [pc, #128]	; (826e4 <menu_settings+0x114>)
   82662:	7adb      	ldrb	r3, [r3, #11]
   82664:	429a      	cmp	r2, r3
   82666:	d233      	bcs.n	826d0 <menu_settings+0x100>
            {
                menu_info.settings.act_cursor_line++;
   82668:	4b1e      	ldr	r3, [pc, #120]	; (826e4 <menu_settings+0x114>)
   8266a:	7a1b      	ldrb	r3, [r3, #8]
   8266c:	3301      	adds	r3, #1
   8266e:	b2da      	uxtb	r2, r3
   82670:	4b1c      	ldr	r3, [pc, #112]	; (826e4 <menu_settings+0x114>)
   82672:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   82674:	481c      	ldr	r0, [pc, #112]	; (826e8 <menu_settings+0x118>)
   82676:	4b1d      	ldr	r3, [pc, #116]	; (826ec <menu_settings+0x11c>)
   82678:	4798      	blx	r3
            }
            break;
   8267a:	e029      	b.n	826d0 <menu_settings+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.settings.act_cursor_line)
   8267c:	4b19      	ldr	r3, [pc, #100]	; (826e4 <menu_settings+0x114>)
   8267e:	7a1b      	ldrb	r3, [r3, #8]
   82680:	2b02      	cmp	r3, #2
   82682:	d00b      	beq.n	8269c <menu_settings+0xcc>
   82684:	2b03      	cmp	r3, #3
   82686:	d010      	beq.n	826aa <menu_settings+0xda>
   82688:	2b01      	cmp	r3, #1
   8268a:	d000      	beq.n	8268e <menu_settings+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   8268c:	e014      	b.n	826b8 <menu_settings+0xe8>
                    act_menu = MENU_BALL;
   8268e:	4b18      	ldr	r3, [pc, #96]	; (826f0 <menu_settings+0x120>)
   82690:	2204      	movs	r2, #4
   82692:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   82694:	4b11      	ldr	r3, [pc, #68]	; (826dc <menu_settings+0x10c>)
   82696:	2201      	movs	r2, #1
   82698:	701a      	strb	r2, [r3, #0]
                    break;
   8269a:	e00d      	b.n	826b8 <menu_settings+0xe8>
                    act_menu = MENU_COMPASS;
   8269c:	4b14      	ldr	r3, [pc, #80]	; (826f0 <menu_settings+0x120>)
   8269e:	2207      	movs	r2, #7
   826a0:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   826a2:	4b0e      	ldr	r3, [pc, #56]	; (826dc <menu_settings+0x10c>)
   826a4:	2201      	movs	r2, #1
   826a6:	701a      	strb	r2, [r3, #0]
                    break;
   826a8:	e006      	b.n	826b8 <menu_settings+0xe8>
                    act_menu = MENU_LINE;
   826aa:	4b11      	ldr	r3, [pc, #68]	; (826f0 <menu_settings+0x120>)
   826ac:	2205      	movs	r2, #5
   826ae:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   826b0:	4b0a      	ldr	r3, [pc, #40]	; (826dc <menu_settings+0x10c>)
   826b2:	2201      	movs	r2, #1
   826b4:	701a      	strb	r2, [r3, #0]
                    break;
   826b6:	bf00      	nop
            }
            break;
   826b8:	e00b      	b.n	826d2 <menu_settings+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   826ba:	4b0d      	ldr	r3, [pc, #52]	; (826f0 <menu_settings+0x120>)
   826bc:	2200      	movs	r2, #0
   826be:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   826c0:	4b06      	ldr	r3, [pc, #24]	; (826dc <menu_settings+0x10c>)
   826c2:	2201      	movs	r2, #1
   826c4:	701a      	strb	r2, [r3, #0]
            break;
   826c6:	e004      	b.n	826d2 <menu_settings+0x102>
        default:
            break;
   826c8:	bf00      	nop
   826ca:	e002      	b.n	826d2 <menu_settings+0x102>
            break;
   826cc:	bf00      	nop
   826ce:	e000      	b.n	826d2 <menu_settings+0x102>
            break;
   826d0:	bf00      	nop
    }
}
   826d2:	bf00      	nop
   826d4:	3708      	adds	r7, #8
   826d6:	46bd      	mov	sp, r7
   826d8:	bd80      	pop	{r7, pc}
   826da:	bf00      	nop
   826dc:	2007018c 	.word	0x2007018c
   826e0:	000828dd 	.word	0x000828dd
   826e4:	20070190 	.word	0x20070190
   826e8:	20070198 	.word	0x20070198
   826ec:	00082945 	.word	0x00082945
   826f0:	20070dc0 	.word	0x20070dc0

000826f4 <menu_shutdown>:

static void menu_shutdown(event_t event1)
{
   826f4:	b580      	push	{r7, lr}
   826f6:	b082      	sub	sp, #8
   826f8:	af00      	add	r7, sp, #0
   826fa:	4603      	mov	r3, r0
   826fc:	71fb      	strb	r3, [r7, #7]
    if(shutdown_confirmed)
   826fe:	4b35      	ldr	r3, [pc, #212]	; (827d4 <menu_shutdown+0xe0>)
   82700:	781b      	ldrb	r3, [r3, #0]
   82702:	2b00      	cmp	r3, #0
   82704:	d043      	beq.n	8278e <menu_shutdown+0x9a>
    {
        lcd_clear();
   82706:	4b34      	ldr	r3, [pc, #208]	; (827d8 <menu_shutdown+0xe4>)
   82708:	4798      	blx	r3
        lcd_print_s(2, 2, "shutting down...");
   8270a:	4a34      	ldr	r2, [pc, #208]	; (827dc <menu_shutdown+0xe8>)
   8270c:	2102      	movs	r1, #2
   8270e:	2002      	movs	r0, #2
   82710:	4b33      	ldr	r3, [pc, #204]	; (827e0 <menu_shutdown+0xec>)
   82712:	4798      	blx	r3
        
        ioport_set_pin_level(LED_ONBOARD, 0);
   82714:	2100      	movs	r1, #0
   82716:	206a      	movs	r0, #106	; 0x6a
   82718:	4b32      	ldr	r3, [pc, #200]	; (827e4 <menu_shutdown+0xf0>)
   8271a:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   8271c:	2100      	movs	r1, #0
   8271e:	2066      	movs	r0, #102	; 0x66
   82720:	4b30      	ldr	r3, [pc, #192]	; (827e4 <menu_shutdown+0xf0>)
   82722:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   82724:	2100      	movs	r1, #0
   82726:	2067      	movs	r0, #103	; 0x67
   82728:	4b2e      	ldr	r3, [pc, #184]	; (827e4 <menu_shutdown+0xf0>)
   8272a:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   8272c:	2100      	movs	r1, #0
   8272e:	2068      	movs	r0, #104	; 0x68
   82730:	4b2c      	ldr	r3, [pc, #176]	; (827e4 <menu_shutdown+0xf0>)
   82732:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   82734:	2100      	movs	r1, #0
   82736:	2069      	movs	r0, #105	; 0x69
   82738:	4b2a      	ldr	r3, [pc, #168]	; (827e4 <menu_shutdown+0xf0>)
   8273a:	4798      	blx	r3
        pwm_channel_disable(PWM, MREAR);
        
        pwm_channel_disable(PWM, ENC_CLK);
        
        sensor_parameters.ibit.sleep_mode = 1;*/
        update_comm();
   8273c:	4b2a      	ldr	r3, [pc, #168]	; (827e8 <menu_shutdown+0xf4>)
   8273e:	4798      	blx	r3
        
        ioport_set_pin_level(RPI1, 0);
   82740:	2100      	movs	r1, #0
   82742:	2001      	movs	r0, #1
   82744:	4b27      	ldr	r3, [pc, #156]	; (827e4 <menu_shutdown+0xf0>)
   82746:	4798      	blx	r3
        while (ioport_get_pin_level(RPI2) == 1);
   82748:	bf00      	nop
   8274a:	2008      	movs	r0, #8
   8274c:	4b27      	ldr	r3, [pc, #156]	; (827ec <menu_shutdown+0xf8>)
   8274e:	4798      	blx	r3
   82750:	4603      	mov	r3, r0
   82752:	2b00      	cmp	r3, #0
   82754:	d1f9      	bne.n	8274a <menu_shutdown+0x56>
        mdelay(7500);
   82756:	f641 504c 	movw	r0, #7500	; 0x1d4c
   8275a:	4b25      	ldr	r3, [pc, #148]	; (827f0 <menu_shutdown+0xfc>)
   8275c:	4798      	blx	r3
        
        lcd_set_backlight(LCD_LIGHT_OFF);
   8275e:	2000      	movs	r0, #0
   82760:	4b24      	ldr	r3, [pc, #144]	; (827f4 <menu_shutdown+0x100>)
   82762:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   82764:	4b1c      	ldr	r3, [pc, #112]	; (827d8 <menu_shutdown+0xe4>)
   82766:	4798      	blx	r3
        mdelay(100);
   82768:	2064      	movs	r0, #100	; 0x64
   8276a:	4b21      	ldr	r3, [pc, #132]	; (827f0 <menu_shutdown+0xfc>)
   8276c:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_ON);
   8276e:	2008      	movs	r0, #8
   82770:	4b20      	ldr	r3, [pc, #128]	; (827f4 <menu_shutdown+0x100>)
   82772:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   82774:	4b18      	ldr	r3, [pc, #96]	; (827d8 <menu_shutdown+0xe4>)
   82776:	4798      	blx	r3
        mdelay(100);
   82778:	2064      	movs	r0, #100	; 0x64
   8277a:	4b1d      	ldr	r3, [pc, #116]	; (827f0 <menu_shutdown+0xfc>)
   8277c:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_OFF);
   8277e:	2000      	movs	r0, #0
   82780:	4b1c      	ldr	r3, [pc, #112]	; (827f4 <menu_shutdown+0x100>)
   82782:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   82784:	4b14      	ldr	r3, [pc, #80]	; (827d8 <menu_shutdown+0xe4>)
   82786:	4798      	blx	r3
        
        while(1)
        {
            update_comm();
   82788:	4b17      	ldr	r3, [pc, #92]	; (827e8 <menu_shutdown+0xf4>)
   8278a:	4798      	blx	r3
   8278c:	e7fc      	b.n	82788 <menu_shutdown+0x94>
            //check_bat();
        }
    }
    else
    {
        if(print_menu)
   8278e:	4b1a      	ldr	r3, [pc, #104]	; (827f8 <menu_shutdown+0x104>)
   82790:	781b      	ldrb	r3, [r3, #0]
   82792:	2b00      	cmp	r3, #0
   82794:	d009      	beq.n	827aa <menu_shutdown+0xb6>
        {
            print_menu = 0;
   82796:	4b18      	ldr	r3, [pc, #96]	; (827f8 <menu_shutdown+0x104>)
   82798:	2200      	movs	r2, #0
   8279a:	701a      	strb	r2, [r3, #0]
            lcd_clear();
   8279c:	4b0e      	ldr	r3, [pc, #56]	; (827d8 <menu_shutdown+0xe4>)
   8279e:	4798      	blx	r3
            lcd_print_s(2, 1, "confirm shutdown?");
   827a0:	4a16      	ldr	r2, [pc, #88]	; (827fc <menu_shutdown+0x108>)
   827a2:	2101      	movs	r1, #1
   827a4:	2002      	movs	r0, #2
   827a6:	4b0e      	ldr	r3, [pc, #56]	; (827e0 <menu_shutdown+0xec>)
   827a8:	4798      	blx	r3
        }
    }
    
    switch (event1)
   827aa:	79fb      	ldrb	r3, [r7, #7]
   827ac:	2b07      	cmp	r3, #7
   827ae:	d002      	beq.n	827b6 <menu_shutdown+0xc2>
   827b0:	2b10      	cmp	r3, #16
   827b2:	d004      	beq.n	827be <menu_shutdown+0xca>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
            print_menu = 1;
            break;
        default:
            break;
   827b4:	e00a      	b.n	827cc <menu_shutdown+0xd8>
            shutdown_confirmed = 1;
   827b6:	4b07      	ldr	r3, [pc, #28]	; (827d4 <menu_shutdown+0xe0>)
   827b8:	2201      	movs	r2, #1
   827ba:	701a      	strb	r2, [r3, #0]
            break;
   827bc:	e006      	b.n	827cc <menu_shutdown+0xd8>
            act_menu = MENU_MAIN;
   827be:	4b10      	ldr	r3, [pc, #64]	; (82800 <menu_shutdown+0x10c>)
   827c0:	2200      	movs	r2, #0
   827c2:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   827c4:	4b0c      	ldr	r3, [pc, #48]	; (827f8 <menu_shutdown+0x104>)
   827c6:	2201      	movs	r2, #1
   827c8:	701a      	strb	r2, [r3, #0]
            break;
   827ca:	bf00      	nop
    }
}
   827cc:	bf00      	nop
   827ce:	3708      	adds	r7, #8
   827d0:	46bd      	mov	sp, r7
   827d2:	bd80      	pop	{r7, pc}
   827d4:	20070dc2 	.word	0x20070dc2
   827d8:	00081a0d 	.word	0x00081a0d
   827dc:	00089a88 	.word	0x00089a88
   827e0:	00081a2d 	.word	0x00081a2d
   827e4:	00081ec9 	.word	0x00081ec9
   827e8:	00083395 	.word	0x00083395
   827ec:	00081f33 	.word	0x00081f33
   827f0:	00083369 	.word	0x00083369
   827f4:	000819ed 	.word	0x000819ed
   827f8:	2007018c 	.word	0x2007018c
   827fc:	00089a9c 	.word	0x00089a9c
   82800:	20070dc0 	.word	0x20070dc0

00082804 <print_menu_main>:

static void print_menu_main(void)
{
   82804:	b590      	push	{r4, r7, lr}
   82806:	b085      	sub	sp, #20
   82808:	af00      	add	r7, sp, #0
    const char *text[4] = {"    noOS ONE", " Match", " Sensors", " Settings"};
   8280a:	4b14      	ldr	r3, [pc, #80]	; (8285c <print_menu_main+0x58>)
   8280c:	463c      	mov	r4, r7
   8280e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   82810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   82814:	4b12      	ldr	r3, [pc, #72]	; (82860 <print_menu_main+0x5c>)
   82816:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   82818:	683b      	ldr	r3, [r7, #0]
   8281a:	461a      	mov	r2, r3
   8281c:	2100      	movs	r1, #0
   8281e:	2001      	movs	r0, #1
   82820:	4b10      	ldr	r3, [pc, #64]	; (82864 <print_menu_main+0x60>)
   82822:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   82824:	687b      	ldr	r3, [r7, #4]
   82826:	461a      	mov	r2, r3
   82828:	2100      	movs	r1, #0
   8282a:	2002      	movs	r0, #2
   8282c:	4b0d      	ldr	r3, [pc, #52]	; (82864 <print_menu_main+0x60>)
   8282e:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82830:	68bb      	ldr	r3, [r7, #8]
   82832:	461a      	mov	r2, r3
   82834:	2100      	movs	r1, #0
   82836:	2003      	movs	r0, #3
   82838:	4b0a      	ldr	r3, [pc, #40]	; (82864 <print_menu_main+0x60>)
   8283a:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   8283c:	68fb      	ldr	r3, [r7, #12]
   8283e:	461a      	mov	r2, r3
   82840:	2100      	movs	r1, #0
   82842:	2004      	movs	r0, #4
   82844:	4b07      	ldr	r3, [pc, #28]	; (82864 <print_menu_main+0x60>)
   82846:	4798      	blx	r3
    print_cursor(&menu_info.main);
   82848:	4807      	ldr	r0, [pc, #28]	; (82868 <print_menu_main+0x64>)
   8284a:	4b08      	ldr	r3, [pc, #32]	; (8286c <print_menu_main+0x68>)
   8284c:	4798      	blx	r3
    update_battery(1);
   8284e:	2001      	movs	r0, #1
   82850:	4b07      	ldr	r3, [pc, #28]	; (82870 <print_menu_main+0x6c>)
   82852:	4798      	blx	r3
}
   82854:	bf00      	nop
   82856:	3714      	adds	r7, #20
   82858:	46bd      	mov	sp, r7
   8285a:	bd90      	pop	{r4, r7, pc}
   8285c:	00089ae0 	.word	0x00089ae0
   82860:	00081a0d 	.word	0x00081a0d
   82864:	00081a2d 	.word	0x00081a2d
   82868:	20070190 	.word	0x20070190
   8286c:	00082945 	.word	0x00082945
   82870:	000833dd 	.word	0x000833dd

00082874 <print_menu_sensors>:

static void print_menu_sensors(void)
{
   82874:	b590      	push	{r4, r7, lr}
   82876:	b085      	sub	sp, #20
   82878:	af00      	add	r7, sp, #0
    const char *text[4] = {" Ball", " Compass", " Line", " "};
   8287a:	4b13      	ldr	r3, [pc, #76]	; (828c8 <print_menu_sensors+0x54>)
   8287c:	463c      	mov	r4, r7
   8287e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   82880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   82884:	4b11      	ldr	r3, [pc, #68]	; (828cc <print_menu_sensors+0x58>)
   82886:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   82888:	683b      	ldr	r3, [r7, #0]
   8288a:	461a      	mov	r2, r3
   8288c:	2100      	movs	r1, #0
   8288e:	2001      	movs	r0, #1
   82890:	4b0f      	ldr	r3, [pc, #60]	; (828d0 <print_menu_sensors+0x5c>)
   82892:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   82894:	687b      	ldr	r3, [r7, #4]
   82896:	461a      	mov	r2, r3
   82898:	2100      	movs	r1, #0
   8289a:	2002      	movs	r0, #2
   8289c:	4b0c      	ldr	r3, [pc, #48]	; (828d0 <print_menu_sensors+0x5c>)
   8289e:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   828a0:	68bb      	ldr	r3, [r7, #8]
   828a2:	461a      	mov	r2, r3
   828a4:	2100      	movs	r1, #0
   828a6:	2003      	movs	r0, #3
   828a8:	4b09      	ldr	r3, [pc, #36]	; (828d0 <print_menu_sensors+0x5c>)
   828aa:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   828ac:	68fb      	ldr	r3, [r7, #12]
   828ae:	461a      	mov	r2, r3
   828b0:	2100      	movs	r1, #0
   828b2:	2004      	movs	r0, #4
   828b4:	4b06      	ldr	r3, [pc, #24]	; (828d0 <print_menu_sensors+0x5c>)
   828b6:	4798      	blx	r3
    print_cursor(&menu_info.sensors);
   828b8:	4806      	ldr	r0, [pc, #24]	; (828d4 <print_menu_sensors+0x60>)
   828ba:	4b07      	ldr	r3, [pc, #28]	; (828d8 <print_menu_sensors+0x64>)
   828bc:	4798      	blx	r3
}
   828be:	bf00      	nop
   828c0:	3714      	adds	r7, #20
   828c2:	46bd      	mov	sp, r7
   828c4:	bd90      	pop	{r4, r7, pc}
   828c6:	bf00      	nop
   828c8:	00089b10 	.word	0x00089b10
   828cc:	00081a0d 	.word	0x00081a0d
   828d0:	00081a2d 	.word	0x00081a2d
   828d4:	20070194 	.word	0x20070194
   828d8:	00082945 	.word	0x00082945

000828dc <print_menu_settings>:

static void print_menu_settings(void)
{
   828dc:	b590      	push	{r4, r7, lr}
   828de:	b085      	sub	sp, #20
   828e0:	af00      	add	r7, sp, #0
    const char *text[4] = {" ", " ", " ", " "};
   828e2:	4b13      	ldr	r3, [pc, #76]	; (82930 <print_menu_settings+0x54>)
   828e4:	463c      	mov	r4, r7
   828e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   828e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   828ec:	4b11      	ldr	r3, [pc, #68]	; (82934 <print_menu_settings+0x58>)
   828ee:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   828f0:	683b      	ldr	r3, [r7, #0]
   828f2:	461a      	mov	r2, r3
   828f4:	2100      	movs	r1, #0
   828f6:	2001      	movs	r0, #1
   828f8:	4b0f      	ldr	r3, [pc, #60]	; (82938 <print_menu_settings+0x5c>)
   828fa:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   828fc:	687b      	ldr	r3, [r7, #4]
   828fe:	461a      	mov	r2, r3
   82900:	2100      	movs	r1, #0
   82902:	2002      	movs	r0, #2
   82904:	4b0c      	ldr	r3, [pc, #48]	; (82938 <print_menu_settings+0x5c>)
   82906:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82908:	68bb      	ldr	r3, [r7, #8]
   8290a:	461a      	mov	r2, r3
   8290c:	2100      	movs	r1, #0
   8290e:	2003      	movs	r0, #3
   82910:	4b09      	ldr	r3, [pc, #36]	; (82938 <print_menu_settings+0x5c>)
   82912:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   82914:	68fb      	ldr	r3, [r7, #12]
   82916:	461a      	mov	r2, r3
   82918:	2100      	movs	r1, #0
   8291a:	2004      	movs	r0, #4
   8291c:	4b06      	ldr	r3, [pc, #24]	; (82938 <print_menu_settings+0x5c>)
   8291e:	4798      	blx	r3
    print_cursor(&menu_info.settings);
   82920:	4806      	ldr	r0, [pc, #24]	; (8293c <print_menu_settings+0x60>)
   82922:	4b07      	ldr	r3, [pc, #28]	; (82940 <print_menu_settings+0x64>)
   82924:	4798      	blx	r3
}
   82926:	bf00      	nop
   82928:	3714      	adds	r7, #20
   8292a:	46bd      	mov	sp, r7
   8292c:	bd90      	pop	{r4, r7, pc}
   8292e:	bf00      	nop
   82930:	00089b20 	.word	0x00089b20
   82934:	00081a0d 	.word	0x00081a0d
   82938:	00081a2d 	.word	0x00081a2d
   8293c:	20070198 	.word	0x20070198
   82940:	00082945 	.word	0x00082945

00082944 <print_cursor>:

static void print_cursor(menu_info_t *info)
{
   82944:	b580      	push	{r7, lr}
   82946:	b082      	sub	sp, #8
   82948:	af00      	add	r7, sp, #0
   8294a:	6078      	str	r0, [r7, #4]
    lcd_print_s(info->prev_cursor_line, 0, " ");
   8294c:	687b      	ldr	r3, [r7, #4]
   8294e:	785b      	ldrb	r3, [r3, #1]
   82950:	4a09      	ldr	r2, [pc, #36]	; (82978 <print_cursor+0x34>)
   82952:	2100      	movs	r1, #0
   82954:	4618      	mov	r0, r3
   82956:	4b09      	ldr	r3, [pc, #36]	; (8297c <print_cursor+0x38>)
   82958:	4798      	blx	r3
    lcd_print_s(info->act_cursor_line, 0, ">");
   8295a:	687b      	ldr	r3, [r7, #4]
   8295c:	781b      	ldrb	r3, [r3, #0]
   8295e:	4a08      	ldr	r2, [pc, #32]	; (82980 <print_cursor+0x3c>)
   82960:	2100      	movs	r1, #0
   82962:	4618      	mov	r0, r3
   82964:	4b05      	ldr	r3, [pc, #20]	; (8297c <print_cursor+0x38>)
   82966:	4798      	blx	r3
    
    info->prev_cursor_line = info->act_cursor_line;
   82968:	687b      	ldr	r3, [r7, #4]
   8296a:	781a      	ldrb	r2, [r3, #0]
   8296c:	687b      	ldr	r3, [r7, #4]
   8296e:	705a      	strb	r2, [r3, #1]
}
   82970:	bf00      	nop
   82972:	3708      	adds	r7, #8
   82974:	46bd      	mov	sp, r7
   82976:	bd80      	pop	{r7, pc}
   82978:	00089b0c 	.word	0x00089b0c
   8297c:	00081a2d 	.word	0x00081a2d
   82980:	00089b30 	.word	0x00089b30

00082984 <button_events>:

event_t button_events(void)
{
   82984:	b580      	push	{r7, lr}
   82986:	b082      	sub	sp, #8
   82988:	af00      	add	r7, sp, #0
    event_t nextEvent = EVENT_NO_EVENT;
   8298a:	2300      	movs	r3, #0
   8298c:	71fb      	strb	r3, [r7, #7]

    if (getTicks() >= (ticks_button_update + 30))
   8298e:	4b75      	ldr	r3, [pc, #468]	; (82b64 <button_events+0x1e0>)
   82990:	4798      	blx	r3
   82992:	4602      	mov	r2, r0
   82994:	4b74      	ldr	r3, [pc, #464]	; (82b68 <button_events+0x1e4>)
   82996:	681b      	ldr	r3, [r3, #0]
   82998:	331e      	adds	r3, #30
   8299a:	429a      	cmp	r2, r3
   8299c:	f0c0 80dd 	bcc.w	82b5a <button_events+0x1d6>
    {
        ticks_button_update = getTicks();
   829a0:	4b70      	ldr	r3, [pc, #448]	; (82b64 <button_events+0x1e0>)
   829a2:	4798      	blx	r3
   829a4:	4602      	mov	r2, r0
   829a6:	4b70      	ldr	r3, [pc, #448]	; (82b68 <button_events+0x1e4>)
   829a8:	601a      	str	r2, [r3, #0]
        
        pb_up_act = ioport_get_pin_level(PB_UP);
   829aa:	2060      	movs	r0, #96	; 0x60
   829ac:	4b6f      	ldr	r3, [pc, #444]	; (82b6c <button_events+0x1e8>)
   829ae:	4798      	blx	r3
   829b0:	4603      	mov	r3, r0
   829b2:	461a      	mov	r2, r3
   829b4:	4b6e      	ldr	r3, [pc, #440]	; (82b70 <button_events+0x1ec>)
   829b6:	701a      	strb	r2, [r3, #0]
        pb_left_act = ioport_get_pin_level(PB_LEFT);
   829b8:	2061      	movs	r0, #97	; 0x61
   829ba:	4b6c      	ldr	r3, [pc, #432]	; (82b6c <button_events+0x1e8>)
   829bc:	4798      	blx	r3
   829be:	4603      	mov	r3, r0
   829c0:	461a      	mov	r2, r3
   829c2:	4b6c      	ldr	r3, [pc, #432]	; (82b74 <button_events+0x1f0>)
   829c4:	701a      	strb	r2, [r3, #0]
        pb_mid_act = ioport_get_pin_level(PB_MID);
   829c6:	2062      	movs	r0, #98	; 0x62
   829c8:	4b68      	ldr	r3, [pc, #416]	; (82b6c <button_events+0x1e8>)
   829ca:	4798      	blx	r3
   829cc:	4603      	mov	r3, r0
   829ce:	461a      	mov	r2, r3
   829d0:	4b69      	ldr	r3, [pc, #420]	; (82b78 <button_events+0x1f4>)
   829d2:	701a      	strb	r2, [r3, #0]
        pb_right_act = ioport_get_pin_level(PB_RIGHT);
   829d4:	2063      	movs	r0, #99	; 0x63
   829d6:	4b65      	ldr	r3, [pc, #404]	; (82b6c <button_events+0x1e8>)
   829d8:	4798      	blx	r3
   829da:	4603      	mov	r3, r0
   829dc:	461a      	mov	r2, r3
   829de:	4b67      	ldr	r3, [pc, #412]	; (82b7c <button_events+0x1f8>)
   829e0:	701a      	strb	r2, [r3, #0]
        pb_down_act = ioport_get_pin_level(PB_DOWN);
   829e2:	2064      	movs	r0, #100	; 0x64
   829e4:	4b61      	ldr	r3, [pc, #388]	; (82b6c <button_events+0x1e8>)
   829e6:	4798      	blx	r3
   829e8:	4603      	mov	r3, r0
   829ea:	461a      	mov	r2, r3
   829ec:	4b64      	ldr	r3, [pc, #400]	; (82b80 <button_events+0x1fc>)
   829ee:	701a      	strb	r2, [r3, #0]
        pb_return_act = ioport_get_pin_level(PB_RETURN);
   829f0:	2065      	movs	r0, #101	; 0x65
   829f2:	4b5e      	ldr	r3, [pc, #376]	; (82b6c <button_events+0x1e8>)
   829f4:	4798      	blx	r3
   829f6:	4603      	mov	r3, r0
   829f8:	461a      	mov	r2, r3
   829fa:	4b62      	ldr	r3, [pc, #392]	; (82b84 <button_events+0x200>)
   829fc:	701a      	strb	r2, [r3, #0]
        
        if (pb_up_act != pb_up_prev && pb_up_act == 0)
   829fe:	4b5c      	ldr	r3, [pc, #368]	; (82b70 <button_events+0x1ec>)
   82a00:	781a      	ldrb	r2, [r3, #0]
   82a02:	4b61      	ldr	r3, [pc, #388]	; (82b88 <button_events+0x204>)
   82a04:	781b      	ldrb	r3, [r3, #0]
   82a06:	429a      	cmp	r2, r3
   82a08:	d006      	beq.n	82a18 <button_events+0x94>
   82a0a:	4b59      	ldr	r3, [pc, #356]	; (82b70 <button_events+0x1ec>)
   82a0c:	781b      	ldrb	r3, [r3, #0]
   82a0e:	2b00      	cmp	r3, #0
   82a10:	d102      	bne.n	82a18 <button_events+0x94>
        {
            nextEvent = EVENT_BUTTON_UP_P;
   82a12:	2301      	movs	r3, #1
   82a14:	71fb      	strb	r3, [r7, #7]
   82a16:	e00b      	b.n	82a30 <button_events+0xac>
        }
        else if (pb_up_act != pb_up_prev && pb_up_act == 1)
   82a18:	4b55      	ldr	r3, [pc, #340]	; (82b70 <button_events+0x1ec>)
   82a1a:	781a      	ldrb	r2, [r3, #0]
   82a1c:	4b5a      	ldr	r3, [pc, #360]	; (82b88 <button_events+0x204>)
   82a1e:	781b      	ldrb	r3, [r3, #0]
   82a20:	429a      	cmp	r2, r3
   82a22:	d005      	beq.n	82a30 <button_events+0xac>
   82a24:	4b52      	ldr	r3, [pc, #328]	; (82b70 <button_events+0x1ec>)
   82a26:	781b      	ldrb	r3, [r3, #0]
   82a28:	2b01      	cmp	r3, #1
   82a2a:	d101      	bne.n	82a30 <button_events+0xac>
        {
            nextEvent = EVENT_BUTTON_UP_R;
   82a2c:	2303      	movs	r3, #3
   82a2e:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_up_act == pb_up_prev && pb_up_act == 0)
        {
            nextEvent = EVENT_BUTTON_UP_H;
        }*/
        
        if (pb_left_act != pb_left_prev && pb_left_act == 0)
   82a30:	4b50      	ldr	r3, [pc, #320]	; (82b74 <button_events+0x1f0>)
   82a32:	781a      	ldrb	r2, [r3, #0]
   82a34:	4b55      	ldr	r3, [pc, #340]	; (82b8c <button_events+0x208>)
   82a36:	781b      	ldrb	r3, [r3, #0]
   82a38:	429a      	cmp	r2, r3
   82a3a:	d006      	beq.n	82a4a <button_events+0xc6>
   82a3c:	4b4d      	ldr	r3, [pc, #308]	; (82b74 <button_events+0x1f0>)
   82a3e:	781b      	ldrb	r3, [r3, #0]
   82a40:	2b00      	cmp	r3, #0
   82a42:	d102      	bne.n	82a4a <button_events+0xc6>
        {
            nextEvent = EVENT_BUTTON_LEFT_P;
   82a44:	2304      	movs	r3, #4
   82a46:	71fb      	strb	r3, [r7, #7]
   82a48:	e00b      	b.n	82a62 <button_events+0xde>
        }
        else if (pb_left_act != pb_left_prev && pb_left_act == 1)
   82a4a:	4b4a      	ldr	r3, [pc, #296]	; (82b74 <button_events+0x1f0>)
   82a4c:	781a      	ldrb	r2, [r3, #0]
   82a4e:	4b4f      	ldr	r3, [pc, #316]	; (82b8c <button_events+0x208>)
   82a50:	781b      	ldrb	r3, [r3, #0]
   82a52:	429a      	cmp	r2, r3
   82a54:	d005      	beq.n	82a62 <button_events+0xde>
   82a56:	4b47      	ldr	r3, [pc, #284]	; (82b74 <button_events+0x1f0>)
   82a58:	781b      	ldrb	r3, [r3, #0]
   82a5a:	2b01      	cmp	r3, #1
   82a5c:	d101      	bne.n	82a62 <button_events+0xde>
        {
            nextEvent = EVENT_BUTTON_LEFT_R;
   82a5e:	2306      	movs	r3, #6
   82a60:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_left_act == pb_left_prev && pb_left_act == 0)
        {
            nextEvent = EVENT_BUTTON_LEFT_H;
        }*/
        
        if (pb_mid_act != pb_mid_prev && pb_mid_act == 0)
   82a62:	4b45      	ldr	r3, [pc, #276]	; (82b78 <button_events+0x1f4>)
   82a64:	781a      	ldrb	r2, [r3, #0]
   82a66:	4b4a      	ldr	r3, [pc, #296]	; (82b90 <button_events+0x20c>)
   82a68:	781b      	ldrb	r3, [r3, #0]
   82a6a:	429a      	cmp	r2, r3
   82a6c:	d006      	beq.n	82a7c <button_events+0xf8>
   82a6e:	4b42      	ldr	r3, [pc, #264]	; (82b78 <button_events+0x1f4>)
   82a70:	781b      	ldrb	r3, [r3, #0]
   82a72:	2b00      	cmp	r3, #0
   82a74:	d102      	bne.n	82a7c <button_events+0xf8>
        {
            nextEvent = EVENT_BUTTON_MID_P;
   82a76:	2307      	movs	r3, #7
   82a78:	71fb      	strb	r3, [r7, #7]
   82a7a:	e00b      	b.n	82a94 <button_events+0x110>
        }
        else if (pb_mid_act != pb_mid_prev && pb_mid_act == 1)
   82a7c:	4b3e      	ldr	r3, [pc, #248]	; (82b78 <button_events+0x1f4>)
   82a7e:	781a      	ldrb	r2, [r3, #0]
   82a80:	4b43      	ldr	r3, [pc, #268]	; (82b90 <button_events+0x20c>)
   82a82:	781b      	ldrb	r3, [r3, #0]
   82a84:	429a      	cmp	r2, r3
   82a86:	d005      	beq.n	82a94 <button_events+0x110>
   82a88:	4b3b      	ldr	r3, [pc, #236]	; (82b78 <button_events+0x1f4>)
   82a8a:	781b      	ldrb	r3, [r3, #0]
   82a8c:	2b01      	cmp	r3, #1
   82a8e:	d101      	bne.n	82a94 <button_events+0x110>
        {
            nextEvent = EVENT_BUTTON_MID_R;
   82a90:	2309      	movs	r3, #9
   82a92:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_mid_act == pb_mid_prev && pb_mid_act == 0)
        {
            nextEvent = EVENT_BUTTON_MID_H;
        }*/
        
        if (pb_right_act != pb_right_prev && pb_right_act == 0)
   82a94:	4b39      	ldr	r3, [pc, #228]	; (82b7c <button_events+0x1f8>)
   82a96:	781a      	ldrb	r2, [r3, #0]
   82a98:	4b3e      	ldr	r3, [pc, #248]	; (82b94 <button_events+0x210>)
   82a9a:	781b      	ldrb	r3, [r3, #0]
   82a9c:	429a      	cmp	r2, r3
   82a9e:	d006      	beq.n	82aae <button_events+0x12a>
   82aa0:	4b36      	ldr	r3, [pc, #216]	; (82b7c <button_events+0x1f8>)
   82aa2:	781b      	ldrb	r3, [r3, #0]
   82aa4:	2b00      	cmp	r3, #0
   82aa6:	d102      	bne.n	82aae <button_events+0x12a>
        {
            nextEvent = EVENT_BUTTON_RIGHT_P;
   82aa8:	230a      	movs	r3, #10
   82aaa:	71fb      	strb	r3, [r7, #7]
   82aac:	e00b      	b.n	82ac6 <button_events+0x142>
        }
        else if (pb_right_act != pb_right_prev && pb_right_act == 1)
   82aae:	4b33      	ldr	r3, [pc, #204]	; (82b7c <button_events+0x1f8>)
   82ab0:	781a      	ldrb	r2, [r3, #0]
   82ab2:	4b38      	ldr	r3, [pc, #224]	; (82b94 <button_events+0x210>)
   82ab4:	781b      	ldrb	r3, [r3, #0]
   82ab6:	429a      	cmp	r2, r3
   82ab8:	d005      	beq.n	82ac6 <button_events+0x142>
   82aba:	4b30      	ldr	r3, [pc, #192]	; (82b7c <button_events+0x1f8>)
   82abc:	781b      	ldrb	r3, [r3, #0]
   82abe:	2b01      	cmp	r3, #1
   82ac0:	d101      	bne.n	82ac6 <button_events+0x142>
        {
            nextEvent = EVENT_BUTTON_RIGHT_R;
   82ac2:	230c      	movs	r3, #12
   82ac4:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_right_act == pb_right_prev && pb_right_act == 0)
        {
            nextEvent = EVENT_BUTTON_RIGHT_H;
        }*/
        
        if (pb_down_act != pb_down_prev && pb_down_act == 0)
   82ac6:	4b2e      	ldr	r3, [pc, #184]	; (82b80 <button_events+0x1fc>)
   82ac8:	781a      	ldrb	r2, [r3, #0]
   82aca:	4b33      	ldr	r3, [pc, #204]	; (82b98 <button_events+0x214>)
   82acc:	781b      	ldrb	r3, [r3, #0]
   82ace:	429a      	cmp	r2, r3
   82ad0:	d006      	beq.n	82ae0 <button_events+0x15c>
   82ad2:	4b2b      	ldr	r3, [pc, #172]	; (82b80 <button_events+0x1fc>)
   82ad4:	781b      	ldrb	r3, [r3, #0]
   82ad6:	2b00      	cmp	r3, #0
   82ad8:	d102      	bne.n	82ae0 <button_events+0x15c>
        {
            nextEvent = EVENT_BUTTON_DOWN_P;
   82ada:	230d      	movs	r3, #13
   82adc:	71fb      	strb	r3, [r7, #7]
   82ade:	e00b      	b.n	82af8 <button_events+0x174>
        }
        else if (pb_down_act != pb_down_prev && pb_down_act == 1)
   82ae0:	4b27      	ldr	r3, [pc, #156]	; (82b80 <button_events+0x1fc>)
   82ae2:	781a      	ldrb	r2, [r3, #0]
   82ae4:	4b2c      	ldr	r3, [pc, #176]	; (82b98 <button_events+0x214>)
   82ae6:	781b      	ldrb	r3, [r3, #0]
   82ae8:	429a      	cmp	r2, r3
   82aea:	d005      	beq.n	82af8 <button_events+0x174>
   82aec:	4b24      	ldr	r3, [pc, #144]	; (82b80 <button_events+0x1fc>)
   82aee:	781b      	ldrb	r3, [r3, #0]
   82af0:	2b01      	cmp	r3, #1
   82af2:	d101      	bne.n	82af8 <button_events+0x174>
        {
            nextEvent = EVENT_BUTTON_DOWN_R;
   82af4:	230f      	movs	r3, #15
   82af6:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_down_act == pb_down_prev && pb_down_act == 0)
        {
            nextEvent = EVENT_BUTTON_DOWN_H;
        }*/
        
        if (pb_return_act != pb_return_prev && pb_return_act == 0)
   82af8:	4b22      	ldr	r3, [pc, #136]	; (82b84 <button_events+0x200>)
   82afa:	781a      	ldrb	r2, [r3, #0]
   82afc:	4b27      	ldr	r3, [pc, #156]	; (82b9c <button_events+0x218>)
   82afe:	781b      	ldrb	r3, [r3, #0]
   82b00:	429a      	cmp	r2, r3
   82b02:	d006      	beq.n	82b12 <button_events+0x18e>
   82b04:	4b1f      	ldr	r3, [pc, #124]	; (82b84 <button_events+0x200>)
   82b06:	781b      	ldrb	r3, [r3, #0]
   82b08:	2b00      	cmp	r3, #0
   82b0a:	d102      	bne.n	82b12 <button_events+0x18e>
        {
            nextEvent = EVENT_BUTTON_RETURN_P;
   82b0c:	2310      	movs	r3, #16
   82b0e:	71fb      	strb	r3, [r7, #7]
   82b10:	e00b      	b.n	82b2a <button_events+0x1a6>
        }
        else if (pb_return_act != pb_return_prev && pb_return_act == 1)
   82b12:	4b1c      	ldr	r3, [pc, #112]	; (82b84 <button_events+0x200>)
   82b14:	781a      	ldrb	r2, [r3, #0]
   82b16:	4b21      	ldr	r3, [pc, #132]	; (82b9c <button_events+0x218>)
   82b18:	781b      	ldrb	r3, [r3, #0]
   82b1a:	429a      	cmp	r2, r3
   82b1c:	d005      	beq.n	82b2a <button_events+0x1a6>
   82b1e:	4b19      	ldr	r3, [pc, #100]	; (82b84 <button_events+0x200>)
   82b20:	781b      	ldrb	r3, [r3, #0]
   82b22:	2b01      	cmp	r3, #1
   82b24:	d101      	bne.n	82b2a <button_events+0x1a6>
        {
            nextEvent = EVENT_BUTTON_RETURN_R;
   82b26:	2312      	movs	r3, #18
   82b28:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_return_act == pb_up_prev && pb_return_act == 0)
        {
            nextEvent = EVENT_BUTTON_RETURN_H;
        }*/
        
        pb_up_prev = pb_up_act;
   82b2a:	4b11      	ldr	r3, [pc, #68]	; (82b70 <button_events+0x1ec>)
   82b2c:	781a      	ldrb	r2, [r3, #0]
   82b2e:	4b16      	ldr	r3, [pc, #88]	; (82b88 <button_events+0x204>)
   82b30:	701a      	strb	r2, [r3, #0]
        pb_left_prev = pb_left_act;
   82b32:	4b10      	ldr	r3, [pc, #64]	; (82b74 <button_events+0x1f0>)
   82b34:	781a      	ldrb	r2, [r3, #0]
   82b36:	4b15      	ldr	r3, [pc, #84]	; (82b8c <button_events+0x208>)
   82b38:	701a      	strb	r2, [r3, #0]
        pb_mid_prev = pb_mid_act;
   82b3a:	4b0f      	ldr	r3, [pc, #60]	; (82b78 <button_events+0x1f4>)
   82b3c:	781a      	ldrb	r2, [r3, #0]
   82b3e:	4b14      	ldr	r3, [pc, #80]	; (82b90 <button_events+0x20c>)
   82b40:	701a      	strb	r2, [r3, #0]
        pb_right_prev = pb_right_act;
   82b42:	4b0e      	ldr	r3, [pc, #56]	; (82b7c <button_events+0x1f8>)
   82b44:	781a      	ldrb	r2, [r3, #0]
   82b46:	4b13      	ldr	r3, [pc, #76]	; (82b94 <button_events+0x210>)
   82b48:	701a      	strb	r2, [r3, #0]
        pb_down_prev = pb_down_act;
   82b4a:	4b0d      	ldr	r3, [pc, #52]	; (82b80 <button_events+0x1fc>)
   82b4c:	781a      	ldrb	r2, [r3, #0]
   82b4e:	4b12      	ldr	r3, [pc, #72]	; (82b98 <button_events+0x214>)
   82b50:	701a      	strb	r2, [r3, #0]
        pb_return_prev = pb_return_act;
   82b52:	4b0c      	ldr	r3, [pc, #48]	; (82b84 <button_events+0x200>)
   82b54:	781a      	ldrb	r2, [r3, #0]
   82b56:	4b11      	ldr	r3, [pc, #68]	; (82b9c <button_events+0x218>)
   82b58:	701a      	strb	r2, [r3, #0]
    }

    return nextEvent;
   82b5a:	79fb      	ldrb	r3, [r7, #7]
}
   82b5c:	4618      	mov	r0, r3
   82b5e:	3708      	adds	r7, #8
   82b60:	46bd      	mov	sp, r7
   82b62:	bd80      	pop	{r7, pc}
   82b64:	00083355 	.word	0x00083355
   82b68:	20070e30 	.word	0x20070e30
   82b6c:	00081f33 	.word	0x00081f33
   82b70:	20070e59 	.word	0x20070e59
   82b74:	20070e40 	.word	0x20070e40
   82b78:	20070e58 	.word	0x20070e58
   82b7c:	20070e5a 	.word	0x20070e5a
   82b80:	20070e3c 	.word	0x20070e3c
   82b84:	20070e38 	.word	0x20070e38
   82b88:	20070e3d 	.word	0x20070e3d
   82b8c:	20070e3b 	.word	0x20070e3b
   82b90:	20070e39 	.word	0x20070e39
   82b94:	20070e3e 	.word	0x20070e3e
   82b98:	20070e3a 	.word	0x20070e3a
   82b9c:	20070e3f 	.word	0x20070e3f

00082ba0 <NVIC_EnableIRQ>:
{
   82ba0:	b480      	push	{r7}
   82ba2:	b083      	sub	sp, #12
   82ba4:	af00      	add	r7, sp, #0
   82ba6:	4603      	mov	r3, r0
   82ba8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82baa:	4908      	ldr	r1, [pc, #32]	; (82bcc <NVIC_EnableIRQ+0x2c>)
   82bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82bb0:	095b      	lsrs	r3, r3, #5
   82bb2:	79fa      	ldrb	r2, [r7, #7]
   82bb4:	f002 021f 	and.w	r2, r2, #31
   82bb8:	2001      	movs	r0, #1
   82bba:	fa00 f202 	lsl.w	r2, r0, r2
   82bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82bc2:	bf00      	nop
   82bc4:	370c      	adds	r7, #12
   82bc6:	46bd      	mov	sp, r7
   82bc8:	bc80      	pop	{r7}
   82bca:	4770      	bx	lr
   82bcc:	e000e100 	.word	0xe000e100

00082bd0 <NVIC_DisableIRQ>:
{
   82bd0:	b480      	push	{r7}
   82bd2:	b083      	sub	sp, #12
   82bd4:	af00      	add	r7, sp, #0
   82bd6:	4603      	mov	r3, r0
   82bd8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82bda:	4909      	ldr	r1, [pc, #36]	; (82c00 <NVIC_DisableIRQ+0x30>)
   82bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82be0:	095b      	lsrs	r3, r3, #5
   82be2:	79fa      	ldrb	r2, [r7, #7]
   82be4:	f002 021f 	and.w	r2, r2, #31
   82be8:	2001      	movs	r0, #1
   82bea:	fa00 f202 	lsl.w	r2, r0, r2
   82bee:	3320      	adds	r3, #32
   82bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82bf4:	bf00      	nop
   82bf6:	370c      	adds	r7, #12
   82bf8:	46bd      	mov	sp, r7
   82bfa:	bc80      	pop	{r7}
   82bfc:	4770      	bx	lr
   82bfe:	bf00      	nop
   82c00:	e000e100 	.word	0xe000e100

00082c04 <NVIC_ClearPendingIRQ>:
{
   82c04:	b480      	push	{r7}
   82c06:	b083      	sub	sp, #12
   82c08:	af00      	add	r7, sp, #0
   82c0a:	4603      	mov	r3, r0
   82c0c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82c0e:	4909      	ldr	r1, [pc, #36]	; (82c34 <NVIC_ClearPendingIRQ+0x30>)
   82c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82c14:	095b      	lsrs	r3, r3, #5
   82c16:	79fa      	ldrb	r2, [r7, #7]
   82c18:	f002 021f 	and.w	r2, r2, #31
   82c1c:	2001      	movs	r0, #1
   82c1e:	fa00 f202 	lsl.w	r2, r0, r2
   82c22:	3360      	adds	r3, #96	; 0x60
   82c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82c28:	bf00      	nop
   82c2a:	370c      	adds	r7, #12
   82c2c:	46bd      	mov	sp, r7
   82c2e:	bc80      	pop	{r7}
   82c30:	4770      	bx	lr
   82c32:	bf00      	nop
   82c34:	e000e100 	.word	0xe000e100

00082c38 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   82c38:	b480      	push	{r7}
   82c3a:	b083      	sub	sp, #12
   82c3c:	af00      	add	r7, sp, #0
   82c3e:	4603      	mov	r3, r0
   82c40:	6039      	str	r1, [r7, #0]
   82c42:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   82c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82c48:	2b00      	cmp	r3, #0
   82c4a:	da0b      	bge.n	82c64 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   82c4c:	490d      	ldr	r1, [pc, #52]	; (82c84 <NVIC_SetPriority+0x4c>)
   82c4e:	79fb      	ldrb	r3, [r7, #7]
   82c50:	f003 030f 	and.w	r3, r3, #15
   82c54:	3b04      	subs	r3, #4
   82c56:	683a      	ldr	r2, [r7, #0]
   82c58:	b2d2      	uxtb	r2, r2
   82c5a:	0112      	lsls	r2, r2, #4
   82c5c:	b2d2      	uxtb	r2, r2
   82c5e:	440b      	add	r3, r1
   82c60:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   82c62:	e009      	b.n	82c78 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82c64:	4908      	ldr	r1, [pc, #32]	; (82c88 <NVIC_SetPriority+0x50>)
   82c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82c6a:	683a      	ldr	r2, [r7, #0]
   82c6c:	b2d2      	uxtb	r2, r2
   82c6e:	0112      	lsls	r2, r2, #4
   82c70:	b2d2      	uxtb	r2, r2
   82c72:	440b      	add	r3, r1
   82c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   82c78:	bf00      	nop
   82c7a:	370c      	adds	r7, #12
   82c7c:	46bd      	mov	sp, r7
   82c7e:	bc80      	pop	{r7}
   82c80:	4770      	bx	lr
   82c82:	bf00      	nop
   82c84:	e000ed00 	.word	0xe000ed00
   82c88:	e000e100 	.word	0xe000e100

00082c8c <sysclk_enable_peripheral_clock>:
{
   82c8c:	b580      	push	{r7, lr}
   82c8e:	b082      	sub	sp, #8
   82c90:	af00      	add	r7, sp, #0
   82c92:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82c94:	6878      	ldr	r0, [r7, #4]
   82c96:	4b03      	ldr	r3, [pc, #12]	; (82ca4 <sysclk_enable_peripheral_clock+0x18>)
   82c98:	4798      	blx	r3
}
   82c9a:	bf00      	nop
   82c9c:	3708      	adds	r7, #8
   82c9e:	46bd      	mov	sp, r7
   82ca0:	bd80      	pop	{r7, pc}
   82ca2:	bf00      	nop
   82ca4:	00083d15 	.word	0x00083d15

00082ca8 <ioport_set_pin_level>:
{
   82ca8:	b480      	push	{r7}
   82caa:	b08b      	sub	sp, #44	; 0x2c
   82cac:	af00      	add	r7, sp, #0
   82cae:	6078      	str	r0, [r7, #4]
   82cb0:	460b      	mov	r3, r1
   82cb2:	70fb      	strb	r3, [r7, #3]
   82cb4:	687b      	ldr	r3, [r7, #4]
   82cb6:	627b      	str	r3, [r7, #36]	; 0x24
   82cb8:	78fb      	ldrb	r3, [r7, #3]
   82cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82cc0:	61fb      	str	r3, [r7, #28]
   82cc2:	69fb      	ldr	r3, [r7, #28]
   82cc4:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82cc6:	69bb      	ldr	r3, [r7, #24]
   82cc8:	095b      	lsrs	r3, r3, #5
   82cca:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82ccc:	697b      	ldr	r3, [r7, #20]
   82cce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82cd2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82cd6:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82cd8:	613b      	str	r3, [r7, #16]
	if (level) {
   82cda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82cde:	2b00      	cmp	r3, #0
   82ce0:	d009      	beq.n	82cf6 <ioport_set_pin_level+0x4e>
   82ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82ce4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82ce6:	68fb      	ldr	r3, [r7, #12]
   82ce8:	f003 031f 	and.w	r3, r3, #31
   82cec:	2201      	movs	r2, #1
   82cee:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82cf0:	693b      	ldr	r3, [r7, #16]
   82cf2:	631a      	str	r2, [r3, #48]	; 0x30
}
   82cf4:	e008      	b.n	82d08 <ioport_set_pin_level+0x60>
   82cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82cf8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   82cfa:	68bb      	ldr	r3, [r7, #8]
   82cfc:	f003 031f 	and.w	r3, r3, #31
   82d00:	2201      	movs	r2, #1
   82d02:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82d04:	693b      	ldr	r3, [r7, #16]
   82d06:	635a      	str	r2, [r3, #52]	; 0x34
   82d08:	bf00      	nop
   82d0a:	372c      	adds	r7, #44	; 0x2c
   82d0c:	46bd      	mov	sp, r7
   82d0e:	bc80      	pop	{r7}
   82d10:	4770      	bx	lr

00082d12 <ioport_get_port_level>:
 * \return Logical levels of the specified pins from the read port, returned as
 * a mask.
 */
static inline ioport_port_mask_t ioport_get_port_level(ioport_pin_t port,
		ioport_port_mask_t mask)
{
   82d12:	b480      	push	{r7}
   82d14:	b087      	sub	sp, #28
   82d16:	af00      	add	r7, sp, #0
   82d18:	6078      	str	r0, [r7, #4]
   82d1a:	6039      	str	r1, [r7, #0]
   82d1c:	687b      	ldr	r3, [r7, #4]
   82d1e:	617b      	str	r3, [r7, #20]
   82d20:	683b      	ldr	r3, [r7, #0]
   82d22:	613b      	str	r3, [r7, #16]
   82d24:	697b      	ldr	r3, [r7, #20]
   82d26:	60fb      	str	r3, [r7, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82d28:	68fb      	ldr	r3, [r7, #12]
   82d2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82d2e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82d32:	025b      	lsls	r3, r3, #9
}

__always_inline static ioport_port_mask_t arch_ioport_get_port_level(
		ioport_port_t port, ioport_port_mask_t mask)
{
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
   82d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   82d36:	693b      	ldr	r3, [r7, #16]
   82d38:	4013      	ands	r3, r2
	return arch_ioport_get_port_level(port, mask);
   82d3a:	bf00      	nop
}
   82d3c:	4618      	mov	r0, r3
   82d3e:	371c      	adds	r7, #28
   82d40:	46bd      	mov	sp, r7
   82d42:	bc80      	pop	{r7}
   82d44:	4770      	bx	lr
	...

00082d48 <motor_init>:
float CosinMA1 = -0.866025404f;
float CosinMA2 = 0.866025404f;
float CosinMA3 = 0.0f;

void motor_init(void)
{
   82d48:	b5b0      	push	{r4, r5, r7, lr}
   82d4a:	af00      	add	r7, sp, #0
    /* Initialize PWM channel for MLeft */
    /* Period is left-aligned */
    g_pwm_channel_MLeft.alignment = PWM_ALIGN_LEFT;
   82d4c:	4b5e      	ldr	r3, [pc, #376]	; (82ec8 <motor_init+0x180>)
   82d4e:	2200      	movs	r2, #0
   82d50:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MLeft.polarity = PWM_LOW;
   82d52:	4b5d      	ldr	r3, [pc, #372]	; (82ec8 <motor_init+0x180>)
   82d54:	2200      	movs	r2, #0
   82d56:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MLeft.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82d58:	4b5b      	ldr	r3, [pc, #364]	; (82ec8 <motor_init+0x180>)
   82d5a:	220b      	movs	r2, #11
   82d5c:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MLeft.ul_period = PERIOD_VALUE;
   82d5e:	4b5a      	ldr	r3, [pc, #360]	; (82ec8 <motor_init+0x180>)
   82d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82d64:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MLeft.ul_duty = INIT_DUTY_VALUE;
   82d66:	4b58      	ldr	r3, [pc, #352]	; (82ec8 <motor_init+0x180>)
   82d68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82d6c:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MLeft.channel = MOTOR_LEFT;
   82d6e:	4b56      	ldr	r3, [pc, #344]	; (82ec8 <motor_init+0x180>)
   82d70:	2200      	movs	r2, #0
   82d72:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MLeft);
   82d74:	4954      	ldr	r1, [pc, #336]	; (82ec8 <motor_init+0x180>)
   82d76:	4855      	ldr	r0, [pc, #340]	; (82ecc <motor_init+0x184>)
   82d78:	4b55      	ldr	r3, [pc, #340]	; (82ed0 <motor_init+0x188>)
   82d7a:	4798      	blx	r3


    /* Initialize PWM channel for MRight */
    /* Period is left-aligned */
    g_pwm_channel_MRight.alignment = PWM_ALIGN_LEFT;
   82d7c:	4b55      	ldr	r3, [pc, #340]	; (82ed4 <motor_init+0x18c>)
   82d7e:	2200      	movs	r2, #0
   82d80:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MRight.polarity = PWM_LOW;
   82d82:	4b54      	ldr	r3, [pc, #336]	; (82ed4 <motor_init+0x18c>)
   82d84:	2200      	movs	r2, #0
   82d86:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MRight.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82d88:	4b52      	ldr	r3, [pc, #328]	; (82ed4 <motor_init+0x18c>)
   82d8a:	220b      	movs	r2, #11
   82d8c:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MRight.ul_period = PERIOD_VALUE;
   82d8e:	4b51      	ldr	r3, [pc, #324]	; (82ed4 <motor_init+0x18c>)
   82d90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82d94:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MRight.ul_duty = INIT_DUTY_VALUE;
   82d96:	4b4f      	ldr	r3, [pc, #316]	; (82ed4 <motor_init+0x18c>)
   82d98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82d9c:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MRight.channel = MOTOR_RIGHT;
   82d9e:	4b4d      	ldr	r3, [pc, #308]	; (82ed4 <motor_init+0x18c>)
   82da0:	2201      	movs	r2, #1
   82da2:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MRight);
   82da4:	494b      	ldr	r1, [pc, #300]	; (82ed4 <motor_init+0x18c>)
   82da6:	4849      	ldr	r0, [pc, #292]	; (82ecc <motor_init+0x184>)
   82da8:	4b49      	ldr	r3, [pc, #292]	; (82ed0 <motor_init+0x188>)
   82daa:	4798      	blx	r3


    /* Initialize PWM channel for MBack */
    /* Period is left-aligned */
    g_pwm_channel_MRear.alignment = PWM_ALIGN_LEFT;
   82dac:	4b4a      	ldr	r3, [pc, #296]	; (82ed8 <motor_init+0x190>)
   82dae:	2200      	movs	r2, #0
   82db0:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MRear.polarity = PWM_LOW;
   82db2:	4b49      	ldr	r3, [pc, #292]	; (82ed8 <motor_init+0x190>)
   82db4:	2200      	movs	r2, #0
   82db6:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MRear.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82db8:	4b47      	ldr	r3, [pc, #284]	; (82ed8 <motor_init+0x190>)
   82dba:	220b      	movs	r2, #11
   82dbc:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MRear.ul_period = PERIOD_VALUE;
   82dbe:	4b46      	ldr	r3, [pc, #280]	; (82ed8 <motor_init+0x190>)
   82dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82dc4:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MRear.ul_duty = INIT_DUTY_VALUE;
   82dc6:	4b44      	ldr	r3, [pc, #272]	; (82ed8 <motor_init+0x190>)
   82dc8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82dcc:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MRear.channel = MOTOR_REAR;
   82dce:	4b42      	ldr	r3, [pc, #264]	; (82ed8 <motor_init+0x190>)
   82dd0:	2202      	movs	r2, #2
   82dd2:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MRear);
   82dd4:	4940      	ldr	r1, [pc, #256]	; (82ed8 <motor_init+0x190>)
   82dd6:	483d      	ldr	r0, [pc, #244]	; (82ecc <motor_init+0x184>)
   82dd8:	4b3d      	ldr	r3, [pc, #244]	; (82ed0 <motor_init+0x188>)
   82dda:	4798      	blx	r3

    pwm_channel_disable(PWM, MOTOR_LEFT);
   82ddc:	2100      	movs	r1, #0
   82dde:	483b      	ldr	r0, [pc, #236]	; (82ecc <motor_init+0x184>)
   82de0:	4b3e      	ldr	r3, [pc, #248]	; (82edc <motor_init+0x194>)
   82de2:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_RIGHT);
   82de4:	2101      	movs	r1, #1
   82de6:	4839      	ldr	r0, [pc, #228]	; (82ecc <motor_init+0x184>)
   82de8:	4b3c      	ldr	r3, [pc, #240]	; (82edc <motor_init+0x194>)
   82dea:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_REAR);
   82dec:	2102      	movs	r1, #2
   82dee:	4837      	ldr	r0, [pc, #220]	; (82ecc <motor_init+0x184>)
   82df0:	4b3a      	ldr	r3, [pc, #232]	; (82edc <motor_init+0x194>)
   82df2:	4798      	blx	r3

    g_pwm_channel_ENC.alignment = PWM_ALIGN_LEFT;
   82df4:	4b3a      	ldr	r3, [pc, #232]	; (82ee0 <motor_init+0x198>)
   82df6:	2200      	movs	r2, #0
   82df8:	811a      	strh	r2, [r3, #8]
    g_pwm_channel_ENC.polarity = PWM_LOW;
   82dfa:	4b39      	ldr	r3, [pc, #228]	; (82ee0 <motor_init+0x198>)
   82dfc:	2200      	movs	r2, #0
   82dfe:	729a      	strb	r2, [r3, #10]
    g_pwm_channel_ENC.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82e00:	4b37      	ldr	r3, [pc, #220]	; (82ee0 <motor_init+0x198>)
   82e02:	220b      	movs	r2, #11
   82e04:	605a      	str	r2, [r3, #4]
    g_pwm_channel_ENC.ul_period = 330;
   82e06:	4b36      	ldr	r3, [pc, #216]	; (82ee0 <motor_init+0x198>)
   82e08:	f44f 72a5 	mov.w	r2, #330	; 0x14a
   82e0c:	611a      	str	r2, [r3, #16]
    g_pwm_channel_ENC.ul_duty = 165;
   82e0e:	4b34      	ldr	r3, [pc, #208]	; (82ee0 <motor_init+0x198>)
   82e10:	22a5      	movs	r2, #165	; 0xa5
   82e12:	60da      	str	r2, [r3, #12]
    g_pwm_channel_ENC.channel = ENC_CLK;
   82e14:	4b32      	ldr	r3, [pc, #200]	; (82ee0 <motor_init+0x198>)
   82e16:	2204      	movs	r2, #4
   82e18:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_ENC);
   82e1a:	4931      	ldr	r1, [pc, #196]	; (82ee0 <motor_init+0x198>)
   82e1c:	482b      	ldr	r0, [pc, #172]	; (82ecc <motor_init+0x184>)
   82e1e:	4b2c      	ldr	r3, [pc, #176]	; (82ed0 <motor_init+0x188>)
   82e20:	4798      	blx	r3
    pwm_channel_enable(PWM, ENC_CLK);
   82e22:	2104      	movs	r1, #4
   82e24:	4829      	ldr	r0, [pc, #164]	; (82ecc <motor_init+0x184>)
   82e26:	4b2f      	ldr	r3, [pc, #188]	; (82ee4 <motor_init+0x19c>)
   82e28:	4798      	blx	r3

    sysclk_enable_peripheral_clock(ID_TC1);
   82e2a:	201c      	movs	r0, #28
   82e2c:	4b2e      	ldr	r3, [pc, #184]	; (82ee8 <motor_init+0x1a0>)
   82e2e:	4798      	blx	r3
    tc_init(TC0, 1, TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_CPCTRG);
   82e30:	f244 0203 	movw	r2, #16387	; 0x4003
   82e34:	2101      	movs	r1, #1
   82e36:	482d      	ldr	r0, [pc, #180]	; (82eec <motor_init+0x1a4>)
   82e38:	4b2d      	ldr	r3, [pc, #180]	; (82ef0 <motor_init+0x1a8>)
   82e3a:	4798      	blx	r3
    tc_write_rc(TC0, 1, 5249);  //MCLK / 128 * 0,008
   82e3c:	f241 4281 	movw	r2, #5249	; 0x1481
   82e40:	2101      	movs	r1, #1
   82e42:	482a      	ldr	r0, [pc, #168]	; (82eec <motor_init+0x1a4>)
   82e44:	4b2b      	ldr	r3, [pc, #172]	; (82ef4 <motor_init+0x1ac>)
   82e46:	4798      	blx	r3
    NVIC_DisableIRQ(TC1_IRQn);
   82e48:	201c      	movs	r0, #28
   82e4a:	4b2b      	ldr	r3, [pc, #172]	; (82ef8 <motor_init+0x1b0>)
   82e4c:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TC1_IRQn);
   82e4e:	201c      	movs	r0, #28
   82e50:	4b2a      	ldr	r3, [pc, #168]	; (82efc <motor_init+0x1b4>)
   82e52:	4798      	blx	r3
    NVIC_SetPriority(TC1_IRQn, 0);
   82e54:	2100      	movs	r1, #0
   82e56:	201c      	movs	r0, #28
   82e58:	4b29      	ldr	r3, [pc, #164]	; (82f00 <motor_init+0x1b8>)
   82e5a:	4798      	blx	r3
    NVIC_EnableIRQ(TC1_IRQn);
   82e5c:	201c      	movs	r0, #28
   82e5e:	4b29      	ldr	r3, [pc, #164]	; (82f04 <motor_init+0x1bc>)
   82e60:	4798      	blx	r3
    tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82e62:	2210      	movs	r2, #16
   82e64:	2101      	movs	r1, #1
   82e66:	4821      	ldr	r0, [pc, #132]	; (82eec <motor_init+0x1a4>)
   82e68:	4b27      	ldr	r3, [pc, #156]	; (82f08 <motor_init+0x1c0>)
   82e6a:	4798      	blx	r3
    tc_start(TC0, 1);
   82e6c:	2101      	movs	r1, #1
   82e6e:	481f      	ldr	r0, [pc, #124]	; (82eec <motor_init+0x1a4>)
   82e70:	4b26      	ldr	r3, [pc, #152]	; (82f0c <motor_init+0x1c4>)
   82e72:	4798      	blx	r3

    mleft_pid_reg.kp = 15.0f;
   82e74:	4b26      	ldr	r3, [pc, #152]	; (82f10 <motor_init+0x1c8>)
   82e76:	4a27      	ldr	r2, [pc, #156]	; (82f14 <motor_init+0x1cc>)
   82e78:	601a      	str	r2, [r3, #0]
    mleft_pid_reg.ki = 10.0f;
   82e7a:	4b25      	ldr	r3, [pc, #148]	; (82f10 <motor_init+0x1c8>)
   82e7c:	4a26      	ldr	r2, [pc, #152]	; (82f18 <motor_init+0x1d0>)
   82e7e:	605a      	str	r2, [r3, #4]
    mleft_pid_reg.kc = 1.0f;
   82e80:	4b23      	ldr	r3, [pc, #140]	; (82f10 <motor_init+0x1c8>)
   82e82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   82e86:	609a      	str	r2, [r3, #8]
    mleft_pid_reg.kd = 5.0f;
   82e88:	4b21      	ldr	r3, [pc, #132]	; (82f10 <motor_init+0x1c8>)
   82e8a:	4a24      	ldr	r2, [pc, #144]	; (82f1c <motor_init+0x1d4>)
   82e8c:	60da      	str	r2, [r3, #12]
    mleft_pid_reg.outMin = -500.0f;
   82e8e:	4b20      	ldr	r3, [pc, #128]	; (82f10 <motor_init+0x1c8>)
   82e90:	4a23      	ldr	r2, [pc, #140]	; (82f20 <motor_init+0x1d8>)
   82e92:	619a      	str	r2, [r3, #24]
    mleft_pid_reg.outMax = 500.0f;
   82e94:	4b1e      	ldr	r3, [pc, #120]	; (82f10 <motor_init+0x1c8>)
   82e96:	4a23      	ldr	r2, [pc, #140]	; (82f24 <motor_init+0x1dc>)
   82e98:	615a      	str	r2, [r3, #20]

    mright_pid_reg = mleft_pid_reg;
   82e9a:	4a23      	ldr	r2, [pc, #140]	; (82f28 <motor_init+0x1e0>)
   82e9c:	4b1c      	ldr	r3, [pc, #112]	; (82f10 <motor_init+0x1c8>)
   82e9e:	4614      	mov	r4, r2
   82ea0:	461d      	mov	r5, r3
   82ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82eaa:	682b      	ldr	r3, [r5, #0]
   82eac:	6023      	str	r3, [r4, #0]
    mrear_pid_reg = mleft_pid_reg;
   82eae:	4a1f      	ldr	r2, [pc, #124]	; (82f2c <motor_init+0x1e4>)
   82eb0:	4b17      	ldr	r3, [pc, #92]	; (82f10 <motor_init+0x1c8>)
   82eb2:	4614      	mov	r4, r2
   82eb4:	461d      	mov	r5, r3
   82eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82ebe:	682b      	ldr	r3, [r5, #0]
   82ec0:	6023      	str	r3, [r4, #0]
}
   82ec2:	bf00      	nop
   82ec4:	bdb0      	pop	{r4, r5, r7, pc}
   82ec6:	bf00      	nop
   82ec8:	20070e74 	.word	0x20070e74
   82ecc:	40094000 	.word	0x40094000
   82ed0:	00080369 	.word	0x00080369
   82ed4:	20070f44 	.word	0x20070f44
   82ed8:	20070eec 	.word	0x20070eec
   82edc:	00080615 	.word	0x00080615
   82ee0:	20070e9c 	.word	0x20070e9c
   82ee4:	000805f3 	.word	0x000805f3
   82ee8:	00082c8d 	.word	0x00082c8d
   82eec:	40080000 	.word	0x40080000
   82ef0:	0008074d 	.word	0x0008074d
   82ef4:	000807a5 	.word	0x000807a5
   82ef8:	00082bd1 	.word	0x00082bd1
   82efc:	00082c05 	.word	0x00082c05
   82f00:	00082c39 	.word	0x00082c39
   82f04:	00082ba1 	.word	0x00082ba1
   82f08:	000807c9 	.word	0x000807c9
   82f0c:	00080785 	.word	0x00080785
   82f10:	20070f6c 	.word	0x20070f6c
   82f14:	41700000 	.word	0x41700000
   82f18:	41200000 	.word	0x41200000
   82f1c:	40a00000 	.word	0x40a00000
   82f20:	c3fa0000 	.word	0xc3fa0000
   82f24:	43fa0000 	.word	0x43fa0000
   82f28:	20070ec4 	.word	0x20070ec4
   82f2c:	20070f14 	.word	0x20070f14

00082f30 <enable_motor>:

void enable_motor(void)
{
   82f30:	b580      	push	{r7, lr}
   82f32:	af00      	add	r7, sp, #0
    pwm_channel_enable(PWM, MOTOR_LEFT);
   82f34:	2100      	movs	r1, #0
   82f36:	480d      	ldr	r0, [pc, #52]	; (82f6c <enable_motor+0x3c>)
   82f38:	4b0d      	ldr	r3, [pc, #52]	; (82f70 <enable_motor+0x40>)
   82f3a:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_RIGHT);
   82f3c:	2101      	movs	r1, #1
   82f3e:	480b      	ldr	r0, [pc, #44]	; (82f6c <enable_motor+0x3c>)
   82f40:	4b0b      	ldr	r3, [pc, #44]	; (82f70 <enable_motor+0x40>)
   82f42:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_REAR);
   82f44:	2102      	movs	r1, #2
   82f46:	4809      	ldr	r0, [pc, #36]	; (82f6c <enable_motor+0x3c>)
   82f48:	4b09      	ldr	r3, [pc, #36]	; (82f70 <enable_motor+0x40>)
   82f4a:	4798      	blx	r3

    ioport_set_pin_level(ENC_LOAD, 0);
   82f4c:	2100      	movs	r1, #0
   82f4e:	2020      	movs	r0, #32
   82f50:	4b08      	ldr	r3, [pc, #32]	; (82f74 <enable_motor+0x44>)
   82f52:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   82f54:	2101      	movs	r1, #1
   82f56:	2020      	movs	r0, #32
   82f58:	4b06      	ldr	r3, [pc, #24]	; (82f74 <enable_motor+0x44>)
   82f5a:	4798      	blx	r3

    tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82f5c:	2210      	movs	r2, #16
   82f5e:	2101      	movs	r1, #1
   82f60:	4805      	ldr	r0, [pc, #20]	; (82f78 <enable_motor+0x48>)
   82f62:	4b06      	ldr	r3, [pc, #24]	; (82f7c <enable_motor+0x4c>)
   82f64:	4798      	blx	r3
}
   82f66:	bf00      	nop
   82f68:	bd80      	pop	{r7, pc}
   82f6a:	bf00      	nop
   82f6c:	40094000 	.word	0x40094000
   82f70:	000805f3 	.word	0x000805f3
   82f74:	00082ca9 	.word	0x00082ca9
   82f78:	40080000 	.word	0x40080000
   82f7c:	000807c9 	.word	0x000807c9

00082f80 <motor_speed>:
        pwm_channel_enable(PWM, ENC_CLK);
    }*/ 
}

void motor_speed(uint8_t motor, int16_t ispeed)
{
   82f80:	b580      	push	{r7, lr}
   82f82:	b084      	sub	sp, #16
   82f84:	af00      	add	r7, sp, #0
   82f86:	4603      	mov	r3, r0
   82f88:	460a      	mov	r2, r1
   82f8a:	71fb      	strb	r3, [r7, #7]
   82f8c:	4613      	mov	r3, r2
   82f8e:	80bb      	strh	r3, [r7, #4]
    if (ispeed > 500)
   82f90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82f94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82f98:	dd02      	ble.n	82fa0 <motor_speed+0x20>
    {
        ispeed = 500;
   82f9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82f9e:	80bb      	strh	r3, [r7, #4]
    }

    if (ispeed < -500)
   82fa0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82fa4:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
   82fa8:	da02      	bge.n	82fb0 <motor_speed+0x30>
    {
        ispeed = -500;
   82faa:	f64f 630c 	movw	r3, #65036	; 0xfe0c
   82fae:	80bb      	strh	r3, [r7, #4]
    }

    uint16_t duty_cycle = (uint16_t)(ispeed + (int16_t)INIT_DUTY_VALUE);
   82fb0:	88bb      	ldrh	r3, [r7, #4]
   82fb2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   82fb6:	81fb      	strh	r3, [r7, #14]

    if (duty_cycle < 10)
   82fb8:	89fb      	ldrh	r3, [r7, #14]
   82fba:	2b09      	cmp	r3, #9
   82fbc:	d801      	bhi.n	82fc2 <motor_speed+0x42>
    {
        duty_cycle = 10;
   82fbe:	230a      	movs	r3, #10
   82fc0:	81fb      	strh	r3, [r7, #14]
    }

    if (duty_cycle > 990)
   82fc2:	89fb      	ldrh	r3, [r7, #14]
   82fc4:	f240 32de 	movw	r2, #990	; 0x3de
   82fc8:	4293      	cmp	r3, r2
   82fca:	d902      	bls.n	82fd2 <motor_speed+0x52>
    {
        duty_cycle = 990;
   82fcc:	f240 33de 	movw	r3, #990	; 0x3de
   82fd0:	81fb      	strh	r3, [r7, #14]
    }

    switch(motor)
   82fd2:	79fb      	ldrb	r3, [r7, #7]
   82fd4:	2b01      	cmp	r3, #1
   82fd6:	d00b      	beq.n	82ff0 <motor_speed+0x70>
   82fd8:	2b02      	cmp	r3, #2
   82fda:	d010      	beq.n	82ffe <motor_speed+0x7e>
   82fdc:	2b00      	cmp	r3, #0
   82fde:	d000      	beq.n	82fe2 <motor_speed+0x62>
            break;
        case MOTOR_REAR:
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
            break;
        default:
            break;
   82fe0:	e014      	b.n	8300c <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MLeft, duty_cycle);
   82fe2:	89fb      	ldrh	r3, [r7, #14]
   82fe4:	461a      	mov	r2, r3
   82fe6:	490b      	ldr	r1, [pc, #44]	; (83014 <motor_speed+0x94>)
   82fe8:	480b      	ldr	r0, [pc, #44]	; (83018 <motor_speed+0x98>)
   82fea:	4b0c      	ldr	r3, [pc, #48]	; (8301c <motor_speed+0x9c>)
   82fec:	4798      	blx	r3
            break;
   82fee:	e00d      	b.n	8300c <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRight, duty_cycle);
   82ff0:	89fb      	ldrh	r3, [r7, #14]
   82ff2:	461a      	mov	r2, r3
   82ff4:	490a      	ldr	r1, [pc, #40]	; (83020 <motor_speed+0xa0>)
   82ff6:	4808      	ldr	r0, [pc, #32]	; (83018 <motor_speed+0x98>)
   82ff8:	4b08      	ldr	r3, [pc, #32]	; (8301c <motor_speed+0x9c>)
   82ffa:	4798      	blx	r3
            break;
   82ffc:	e006      	b.n	8300c <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
   82ffe:	89fb      	ldrh	r3, [r7, #14]
   83000:	461a      	mov	r2, r3
   83002:	4908      	ldr	r1, [pc, #32]	; (83024 <motor_speed+0xa4>)
   83004:	4804      	ldr	r0, [pc, #16]	; (83018 <motor_speed+0x98>)
   83006:	4b05      	ldr	r3, [pc, #20]	; (8301c <motor_speed+0x9c>)
   83008:	4798      	blx	r3
            break;
   8300a:	bf00      	nop
    }
}
   8300c:	bf00      	nop
   8300e:	3710      	adds	r7, #16
   83010:	46bd      	mov	sp, r7
   83012:	bd80      	pop	{r7, pc}
   83014:	20070e74 	.word	0x20070e74
   83018:	40094000 	.word	0x40094000
   8301c:	000805af 	.word	0x000805af
   83020:	20070f44 	.word	0x20070f44
   83024:	20070eec 	.word	0x20070eec

00083028 <TC1_Handler>:

void TC1_Handler(void)
{
   83028:	b590      	push	{r4, r7, lr}
   8302a:	b085      	sub	sp, #20
   8302c:	af00      	add	r7, sp, #0
    uint32_t PIOC_value;
    int32_t eleft_counts;
    int32_t eright_counts;
    int32_t erear_counts;

    ioport_set_pin_level(LED_M3, 1);
   8302e:	2101      	movs	r1, #1
   83030:	2069      	movs	r0, #105	; 0x69
   83032:	4b50      	ldr	r3, [pc, #320]	; (83174 <TC1_Handler+0x14c>)
   83034:	4798      	blx	r3

    if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   83036:	2101      	movs	r1, #1
   83038:	484f      	ldr	r0, [pc, #316]	; (83178 <TC1_Handler+0x150>)
   8303a:	4b50      	ldr	r3, [pc, #320]	; (8317c <TC1_Handler+0x154>)
   8303c:	4798      	blx	r3
   8303e:	4603      	mov	r3, r0
   83040:	f003 0310 	and.w	r3, r3, #16
   83044:	2b10      	cmp	r3, #16
   83046:	f040 808c 	bne.w	83162 <TC1_Handler+0x13a>
    {
        pwm_channel_disable(PWM, ENC_CLK);
   8304a:	2104      	movs	r1, #4
   8304c:	484c      	ldr	r0, [pc, #304]	; (83180 <TC1_Handler+0x158>)
   8304e:	4b4d      	ldr	r3, [pc, #308]	; (83184 <TC1_Handler+0x15c>)
   83050:	4798      	blx	r3
        PIOC_value = ioport_get_port_level(IOPORT_PIOC, 0xFFFFFFFF);
   83052:	f04f 31ff 	mov.w	r1, #4294967295
   83056:	2002      	movs	r0, #2
   83058:	4b4b      	ldr	r3, [pc, #300]	; (83188 <TC1_Handler+0x160>)
   8305a:	4798      	blx	r3
   8305c:	60f8      	str	r0, [r7, #12]
        ioport_set_pin_level(ENC_LOAD, 0);
   8305e:	2100      	movs	r1, #0
   83060:	2020      	movs	r0, #32
   83062:	4b44      	ldr	r3, [pc, #272]	; (83174 <TC1_Handler+0x14c>)
   83064:	4798      	blx	r3
        ioport_set_pin_level(ENC_LOAD, 1);
   83066:	2101      	movs	r1, #1
   83068:	2020      	movs	r0, #32
   8306a:	4b42      	ldr	r3, [pc, #264]	; (83174 <TC1_Handler+0x14c>)
   8306c:	4798      	blx	r3
        pwm_channel_enable(PWM, ENC_CLK);
   8306e:	2104      	movs	r1, #4
   83070:	4843      	ldr	r0, [pc, #268]	; (83180 <TC1_Handler+0x158>)
   83072:	4b46      	ldr	r3, [pc, #280]	; (8318c <TC1_Handler+0x164>)
   83074:	4798      	blx	r3

        eleft_counts = (PIOC_value & 0x7F000000) >> 24;
   83076:	68fb      	ldr	r3, [r7, #12]
   83078:	0e1b      	lsrs	r3, r3, #24
   8307a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8307e:	60bb      	str	r3, [r7, #8]
        eleft_counts = (eleft_counts & 0x00000040) ? eleft_counts - 128 : eleft_counts;
   83080:	68bb      	ldr	r3, [r7, #8]
   83082:	f003 0340 	and.w	r3, r3, #64	; 0x40
   83086:	2b00      	cmp	r3, #0
   83088:	d002      	beq.n	83090 <TC1_Handler+0x68>
   8308a:	68bb      	ldr	r3, [r7, #8]
   8308c:	3b80      	subs	r3, #128	; 0x80
   8308e:	e000      	b.n	83092 <TC1_Handler+0x6a>
   83090:	68bb      	ldr	r3, [r7, #8]
   83092:	60bb      	str	r3, [r7, #8]
        eright_counts = ((PIOC_value & 0x00C00000) >> 17) | ((PIOC_value & 0x001F0000) >> 16);
   83094:	68fb      	ldr	r3, [r7, #12]
   83096:	0c5b      	lsrs	r3, r3, #17
   83098:	f003 0260 	and.w	r2, r3, #96	; 0x60
   8309c:	68fb      	ldr	r3, [r7, #12]
   8309e:	0c1b      	lsrs	r3, r3, #16
   830a0:	f003 031f 	and.w	r3, r3, #31
   830a4:	4313      	orrs	r3, r2
   830a6:	607b      	str	r3, [r7, #4]
        eright_counts = (eright_counts & 0x00000040) ? eright_counts - 128 : eright_counts;
   830a8:	687b      	ldr	r3, [r7, #4]
   830aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
   830ae:	2b00      	cmp	r3, #0
   830b0:	d002      	beq.n	830b8 <TC1_Handler+0x90>
   830b2:	687b      	ldr	r3, [r7, #4]
   830b4:	3b80      	subs	r3, #128	; 0x80
   830b6:	e000      	b.n	830ba <TC1_Handler+0x92>
   830b8:	687b      	ldr	r3, [r7, #4]
   830ba:	607b      	str	r3, [r7, #4]
        erear_counts = ((PIOC_value & 0x0000FC00) >> 9) | ((PIOC_value & 0x00000002) >> 1);
   830bc:	68fb      	ldr	r3, [r7, #12]
   830be:	0a5b      	lsrs	r3, r3, #9
   830c0:	f003 027e 	and.w	r2, r3, #126	; 0x7e
   830c4:	68fb      	ldr	r3, [r7, #12]
   830c6:	085b      	lsrs	r3, r3, #1
   830c8:	f003 0301 	and.w	r3, r3, #1
   830cc:	4313      	orrs	r3, r2
   830ce:	603b      	str	r3, [r7, #0]
        erear_counts = (erear_counts & 0x00000040) ? erear_counts - 128 : erear_counts;
   830d0:	683b      	ldr	r3, [r7, #0]
   830d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   830d6:	2b00      	cmp	r3, #0
   830d8:	d002      	beq.n	830e0 <TC1_Handler+0xb8>
   830da:	683b      	ldr	r3, [r7, #0]
   830dc:	3b80      	subs	r3, #128	; 0x80
   830de:	e000      	b.n	830e2 <TC1_Handler+0xba>
   830e0:	683b      	ldr	r3, [r7, #0]
   830e2:	603b      	str	r3, [r7, #0]

        motor_speed(MOTOR_LEFT, pidReg(&mleft_pid_reg, speed_mleft, (float)eleft_counts));
   830e4:	4b2a      	ldr	r3, [pc, #168]	; (83190 <TC1_Handler+0x168>)
   830e6:	681c      	ldr	r4, [r3, #0]
   830e8:	4b2a      	ldr	r3, [pc, #168]	; (83194 <TC1_Handler+0x16c>)
   830ea:	68b8      	ldr	r0, [r7, #8]
   830ec:	4798      	blx	r3
   830ee:	4603      	mov	r3, r0
   830f0:	461a      	mov	r2, r3
   830f2:	4621      	mov	r1, r4
   830f4:	4828      	ldr	r0, [pc, #160]	; (83198 <TC1_Handler+0x170>)
   830f6:	4b29      	ldr	r3, [pc, #164]	; (8319c <TC1_Handler+0x174>)
   830f8:	4798      	blx	r3
   830fa:	4602      	mov	r2, r0
   830fc:	4b28      	ldr	r3, [pc, #160]	; (831a0 <TC1_Handler+0x178>)
   830fe:	4610      	mov	r0, r2
   83100:	4798      	blx	r3
   83102:	4603      	mov	r3, r0
   83104:	b21b      	sxth	r3, r3
   83106:	4619      	mov	r1, r3
   83108:	2000      	movs	r0, #0
   8310a:	4b26      	ldr	r3, [pc, #152]	; (831a4 <TC1_Handler+0x17c>)
   8310c:	4798      	blx	r3
        motor_speed(MOTOR_RIGHT, pidReg(&mright_pid_reg, speed_mright, (float)eright_counts));
   8310e:	4b26      	ldr	r3, [pc, #152]	; (831a8 <TC1_Handler+0x180>)
   83110:	681c      	ldr	r4, [r3, #0]
   83112:	4b20      	ldr	r3, [pc, #128]	; (83194 <TC1_Handler+0x16c>)
   83114:	6878      	ldr	r0, [r7, #4]
   83116:	4798      	blx	r3
   83118:	4603      	mov	r3, r0
   8311a:	461a      	mov	r2, r3
   8311c:	4621      	mov	r1, r4
   8311e:	4823      	ldr	r0, [pc, #140]	; (831ac <TC1_Handler+0x184>)
   83120:	4b1e      	ldr	r3, [pc, #120]	; (8319c <TC1_Handler+0x174>)
   83122:	4798      	blx	r3
   83124:	4602      	mov	r2, r0
   83126:	4b1e      	ldr	r3, [pc, #120]	; (831a0 <TC1_Handler+0x178>)
   83128:	4610      	mov	r0, r2
   8312a:	4798      	blx	r3
   8312c:	4603      	mov	r3, r0
   8312e:	b21b      	sxth	r3, r3
   83130:	4619      	mov	r1, r3
   83132:	2001      	movs	r0, #1
   83134:	4b1b      	ldr	r3, [pc, #108]	; (831a4 <TC1_Handler+0x17c>)
   83136:	4798      	blx	r3
        motor_speed(MOTOR_REAR, pidReg(&mrear_pid_reg, speed_mrear, (float)erear_counts));
   83138:	4b1d      	ldr	r3, [pc, #116]	; (831b0 <TC1_Handler+0x188>)
   8313a:	681c      	ldr	r4, [r3, #0]
   8313c:	4b15      	ldr	r3, [pc, #84]	; (83194 <TC1_Handler+0x16c>)
   8313e:	6838      	ldr	r0, [r7, #0]
   83140:	4798      	blx	r3
   83142:	4603      	mov	r3, r0
   83144:	461a      	mov	r2, r3
   83146:	4621      	mov	r1, r4
   83148:	481a      	ldr	r0, [pc, #104]	; (831b4 <TC1_Handler+0x18c>)
   8314a:	4b14      	ldr	r3, [pc, #80]	; (8319c <TC1_Handler+0x174>)
   8314c:	4798      	blx	r3
   8314e:	4602      	mov	r2, r0
   83150:	4b13      	ldr	r3, [pc, #76]	; (831a0 <TC1_Handler+0x178>)
   83152:	4610      	mov	r0, r2
   83154:	4798      	blx	r3
   83156:	4603      	mov	r3, r0
   83158:	b21b      	sxth	r3, r3
   8315a:	4619      	mov	r1, r3
   8315c:	2002      	movs	r0, #2
   8315e:	4b11      	ldr	r3, [pc, #68]	; (831a4 <TC1_Handler+0x17c>)
   83160:	4798      	blx	r3

        //pwm_channel_enable(PWM, ENC_CLK);
    }

    ioport_set_pin_level(LED_M3, 0);
   83162:	2100      	movs	r1, #0
   83164:	2069      	movs	r0, #105	; 0x69
   83166:	4b03      	ldr	r3, [pc, #12]	; (83174 <TC1_Handler+0x14c>)
   83168:	4798      	blx	r3
}
   8316a:	bf00      	nop
   8316c:	3714      	adds	r7, #20
   8316e:	46bd      	mov	sp, r7
   83170:	bd90      	pop	{r4, r7, pc}
   83172:	bf00      	nop
   83174:	00082ca9 	.word	0x00082ca9
   83178:	40080000 	.word	0x40080000
   8317c:	000807ef 	.word	0x000807ef
   83180:	40094000 	.word	0x40094000
   83184:	00080615 	.word	0x00080615
   83188:	00082d13 	.word	0x00082d13
   8318c:	000805f3 	.word	0x000805f3
   83190:	20070f3c 	.word	0x20070f3c
   83194:	00085439 	.word	0x00085439
   83198:	20070f6c 	.word	0x20070f6c
   8319c:	000831b9 	.word	0x000831b9
   831a0:	0008586d 	.word	0x0008586d
   831a4:	00082f81 	.word	0x00082f81
   831a8:	20070ee8 	.word	0x20070ee8
   831ac:	20070ec4 	.word	0x20070ec4
   831b0:	20070fc4 	.word	0x20070fc4
   831b4:	20070f14 	.word	0x20070f14

000831b8 <pidReg>:
/************************************************************************/

#include "pid.h"

float pidReg(pidReg_t* reg, float refer, float act)
{
   831b8:	b590      	push	{r4, r7, lr}
   831ba:	b08b      	sub	sp, #44	; 0x2c
   831bc:	af00      	add	r7, sp, #0
   831be:	60f8      	str	r0, [r7, #12]
   831c0:	60b9      	str	r1, [r7, #8]
   831c2:	607a      	str	r2, [r7, #4]
    float diff;
    float outPreSat;
    float out;

    // Compute the error
    err = refer - act;
   831c4:	4b3c      	ldr	r3, [pc, #240]	; (832b8 <pidReg+0x100>)
   831c6:	6879      	ldr	r1, [r7, #4]
   831c8:	68b8      	ldr	r0, [r7, #8]
   831ca:	4798      	blx	r3
   831cc:	4603      	mov	r3, r0
   831ce:	623b      	str	r3, [r7, #32]

    // Compute the proportional output
    prop = reg->kp * err;
   831d0:	68fb      	ldr	r3, [r7, #12]
   831d2:	681a      	ldr	r2, [r3, #0]
   831d4:	4b39      	ldr	r3, [pc, #228]	; (832bc <pidReg+0x104>)
   831d6:	6a39      	ldr	r1, [r7, #32]
   831d8:	4610      	mov	r0, r2
   831da:	4798      	blx	r3
   831dc:	4603      	mov	r3, r0
   831de:	61fb      	str	r3, [r7, #28]

    // Compute the integral output
    reg->intg = reg->intg + reg->ki * err + reg->kc * reg->satErr;
   831e0:	68fb      	ldr	r3, [r7, #12]
   831e2:	691c      	ldr	r4, [r3, #16]
   831e4:	68fb      	ldr	r3, [r7, #12]
   831e6:	685a      	ldr	r2, [r3, #4]
   831e8:	4b34      	ldr	r3, [pc, #208]	; (832bc <pidReg+0x104>)
   831ea:	6a39      	ldr	r1, [r7, #32]
   831ec:	4610      	mov	r0, r2
   831ee:	4798      	blx	r3
   831f0:	4603      	mov	r3, r0
   831f2:	461a      	mov	r2, r3
   831f4:	4b32      	ldr	r3, [pc, #200]	; (832c0 <pidReg+0x108>)
   831f6:	4611      	mov	r1, r2
   831f8:	4620      	mov	r0, r4
   831fa:	4798      	blx	r3
   831fc:	4603      	mov	r3, r0
   831fe:	461c      	mov	r4, r3
   83200:	68fb      	ldr	r3, [r7, #12]
   83202:	689a      	ldr	r2, [r3, #8]
   83204:	68fb      	ldr	r3, [r7, #12]
   83206:	69d9      	ldr	r1, [r3, #28]
   83208:	4b2c      	ldr	r3, [pc, #176]	; (832bc <pidReg+0x104>)
   8320a:	4610      	mov	r0, r2
   8320c:	4798      	blx	r3
   8320e:	4603      	mov	r3, r0
   83210:	461a      	mov	r2, r3
   83212:	4b2b      	ldr	r3, [pc, #172]	; (832c0 <pidReg+0x108>)
   83214:	4611      	mov	r1, r2
   83216:	4620      	mov	r0, r4
   83218:	4798      	blx	r3
   8321a:	4603      	mov	r3, r0
   8321c:	461a      	mov	r2, r3
   8321e:	68fb      	ldr	r3, [r7, #12]
   83220:	611a      	str	r2, [r3, #16]

    // Compute the derivative output
    diff = reg->kd * (err - reg->prevErr);
   83222:	68fb      	ldr	r3, [r7, #12]
   83224:	68dc      	ldr	r4, [r3, #12]
   83226:	68fb      	ldr	r3, [r7, #12]
   83228:	6a1a      	ldr	r2, [r3, #32]
   8322a:	4b23      	ldr	r3, [pc, #140]	; (832b8 <pidReg+0x100>)
   8322c:	4611      	mov	r1, r2
   8322e:	6a38      	ldr	r0, [r7, #32]
   83230:	4798      	blx	r3
   83232:	4603      	mov	r3, r0
   83234:	461a      	mov	r2, r3
   83236:	4b21      	ldr	r3, [pc, #132]	; (832bc <pidReg+0x104>)
   83238:	4611      	mov	r1, r2
   8323a:	4620      	mov	r0, r4
   8323c:	4798      	blx	r3
   8323e:	4603      	mov	r3, r0
   83240:	61bb      	str	r3, [r7, #24]

    // Compute the pre-saturated output
    outPreSat = prop + reg->intg + diff;
   83242:	68fb      	ldr	r3, [r7, #12]
   83244:	691a      	ldr	r2, [r3, #16]
   83246:	4b1e      	ldr	r3, [pc, #120]	; (832c0 <pidReg+0x108>)
   83248:	69f9      	ldr	r1, [r7, #28]
   8324a:	4610      	mov	r0, r2
   8324c:	4798      	blx	r3
   8324e:	4603      	mov	r3, r0
   83250:	461a      	mov	r2, r3
   83252:	4b1b      	ldr	r3, [pc, #108]	; (832c0 <pidReg+0x108>)
   83254:	69b9      	ldr	r1, [r7, #24]
   83256:	4610      	mov	r0, r2
   83258:	4798      	blx	r3
   8325a:	4603      	mov	r3, r0
   8325c:	617b      	str	r3, [r7, #20]

    // Saturate the output
    if (outPreSat > reg->outMax)
   8325e:	68fb      	ldr	r3, [r7, #12]
   83260:	695a      	ldr	r2, [r3, #20]
   83262:	4b18      	ldr	r3, [pc, #96]	; (832c4 <pidReg+0x10c>)
   83264:	6979      	ldr	r1, [r7, #20]
   83266:	4610      	mov	r0, r2
   83268:	4798      	blx	r3
   8326a:	4603      	mov	r3, r0
   8326c:	2b00      	cmp	r3, #0
   8326e:	d003      	beq.n	83278 <pidReg+0xc0>
    {
        out = reg->outMax;
   83270:	68fb      	ldr	r3, [r7, #12]
   83272:	695b      	ldr	r3, [r3, #20]
   83274:	627b      	str	r3, [r7, #36]	; 0x24
   83276:	e00e      	b.n	83296 <pidReg+0xde>
    }
    else if (outPreSat < reg->outMin)
   83278:	68fb      	ldr	r3, [r7, #12]
   8327a:	699a      	ldr	r2, [r3, #24]
   8327c:	4b12      	ldr	r3, [pc, #72]	; (832c8 <pidReg+0x110>)
   8327e:	6979      	ldr	r1, [r7, #20]
   83280:	4610      	mov	r0, r2
   83282:	4798      	blx	r3
   83284:	4603      	mov	r3, r0
   83286:	2b00      	cmp	r3, #0
   83288:	d003      	beq.n	83292 <pidReg+0xda>
    {
        out = reg->outMin;
   8328a:	68fb      	ldr	r3, [r7, #12]
   8328c:	699b      	ldr	r3, [r3, #24]
   8328e:	627b      	str	r3, [r7, #36]	; 0x24
   83290:	e001      	b.n	83296 <pidReg+0xde>
    }
    else
    {
        out = outPreSat;
   83292:	697b      	ldr	r3, [r7, #20]
   83294:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Compute the saturate difference
    reg->satErr = out - outPreSat;
   83296:	4b08      	ldr	r3, [pc, #32]	; (832b8 <pidReg+0x100>)
   83298:	6979      	ldr	r1, [r7, #20]
   8329a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   8329c:	4798      	blx	r3
   8329e:	4603      	mov	r3, r0
   832a0:	461a      	mov	r2, r3
   832a2:	68fb      	ldr	r3, [r7, #12]
   832a4:	61da      	str	r2, [r3, #28]

    // Keep error for next iteration
    reg->prevErr = err;
   832a6:	68fb      	ldr	r3, [r7, #12]
   832a8:	6a3a      	ldr	r2, [r7, #32]
   832aa:	621a      	str	r2, [r3, #32]

    return out;
   832ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   832ae:	4618      	mov	r0, r3
   832b0:	372c      	adds	r7, #44	; 0x2c
   832b2:	46bd      	mov	sp, r7
   832b4:	bd90      	pop	{r4, r7, pc}
   832b6:	bf00      	nop
   832b8:	000852cd 	.word	0x000852cd
   832bc:	000854e1 	.word	0x000854e1
   832c0:	000852d1 	.word	0x000852d1
   832c4:	0008581d 	.word	0x0008581d
   832c8:	00085859 	.word	0x00085859

000832cc <ioport_set_pin_level>:
{
   832cc:	b480      	push	{r7}
   832ce:	b08b      	sub	sp, #44	; 0x2c
   832d0:	af00      	add	r7, sp, #0
   832d2:	6078      	str	r0, [r7, #4]
   832d4:	460b      	mov	r3, r1
   832d6:	70fb      	strb	r3, [r7, #3]
   832d8:	687b      	ldr	r3, [r7, #4]
   832da:	627b      	str	r3, [r7, #36]	; 0x24
   832dc:	78fb      	ldrb	r3, [r7, #3]
   832de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   832e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   832e4:	61fb      	str	r3, [r7, #28]
   832e6:	69fb      	ldr	r3, [r7, #28]
   832e8:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   832ea:	69bb      	ldr	r3, [r7, #24]
   832ec:	095b      	lsrs	r3, r3, #5
   832ee:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   832f0:	697b      	ldr	r3, [r7, #20]
   832f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   832f6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   832fa:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   832fc:	613b      	str	r3, [r7, #16]
	if (level) {
   832fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83302:	2b00      	cmp	r3, #0
   83304:	d009      	beq.n	8331a <ioport_set_pin_level+0x4e>
   83306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83308:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8330a:	68fb      	ldr	r3, [r7, #12]
   8330c:	f003 031f 	and.w	r3, r3, #31
   83310:	2201      	movs	r2, #1
   83312:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   83314:	693b      	ldr	r3, [r7, #16]
   83316:	631a      	str	r2, [r3, #48]	; 0x30
}
   83318:	e008      	b.n	8332c <ioport_set_pin_level+0x60>
   8331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8331c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   8331e:	68bb      	ldr	r3, [r7, #8]
   83320:	f003 031f 	and.w	r3, r3, #31
   83324:	2201      	movs	r2, #1
   83326:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83328:	693b      	ldr	r3, [r7, #16]
   8332a:	635a      	str	r2, [r3, #52]	; 0x34
   8332c:	bf00      	nop
   8332e:	372c      	adds	r7, #44	; 0x2c
   83330:	46bd      	mov	sp, r7
   83332:	bc80      	pop	{r7}
   83334:	4770      	bx	lr
	...

00083338 <SysTick_Handler>:
//float battery_voltage = 0;
uint8_t battery_percentage;
uint8_t prev_battery_percentage = 0;

void SysTick_Handler(void)
{
   83338:	b480      	push	{r7}
   8333a:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   8333c:	4b04      	ldr	r3, [pc, #16]	; (83350 <SysTick_Handler+0x18>)
   8333e:	681b      	ldr	r3, [r3, #0]
   83340:	3301      	adds	r3, #1
   83342:	4a03      	ldr	r2, [pc, #12]	; (83350 <SysTick_Handler+0x18>)
   83344:	6013      	str	r3, [r2, #0]
}
   83346:	bf00      	nop
   83348:	46bd      	mov	sp, r7
   8334a:	bc80      	pop	{r7}
   8334c:	4770      	bx	lr
   8334e:	bf00      	nop
   83350:	20070dc8 	.word	0x20070dc8

00083354 <getTicks>:

uint32_t getTicks(void)
{
   83354:	b480      	push	{r7}
   83356:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   83358:	4b02      	ldr	r3, [pc, #8]	; (83364 <getTicks+0x10>)
   8335a:	681b      	ldr	r3, [r3, #0]
}
   8335c:	4618      	mov	r0, r3
   8335e:	46bd      	mov	sp, r7
   83360:	bc80      	pop	{r7}
   83362:	4770      	bx	lr
   83364:	20070dc8 	.word	0x20070dc8

00083368 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   83368:	b480      	push	{r7}
   8336a:	b085      	sub	sp, #20
   8336c:	af00      	add	r7, sp, #0
   8336e:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   83370:	4b07      	ldr	r3, [pc, #28]	; (83390 <mdelay+0x28>)
   83372:	681b      	ldr	r3, [r3, #0]
   83374:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   83376:	bf00      	nop
   83378:	4b05      	ldr	r3, [pc, #20]	; (83390 <mdelay+0x28>)
   8337a:	681a      	ldr	r2, [r3, #0]
   8337c:	68fb      	ldr	r3, [r7, #12]
   8337e:	1ad2      	subs	r2, r2, r3
   83380:	687b      	ldr	r3, [r7, #4]
   83382:	429a      	cmp	r2, r3
   83384:	d3f8      	bcc.n	83378 <mdelay+0x10>
}
   83386:	bf00      	nop
   83388:	3714      	adds	r7, #20
   8338a:	46bd      	mov	sp, r7
   8338c:	bc80      	pop	{r7}
   8338e:	4770      	bx	lr
   83390:	20070dc8 	.word	0x20070dc8

00083394 <update_comm>:

void update_comm(void)
{
   83394:	b580      	push	{r7, lr}
   83396:	af00      	add	r7, sp, #0
    if ((getTicks() - ticks_comm) > 5)
   83398:	4b0b      	ldr	r3, [pc, #44]	; (833c8 <update_comm+0x34>)
   8339a:	4798      	blx	r3
   8339c:	4602      	mov	r2, r0
   8339e:	4b0b      	ldr	r3, [pc, #44]	; (833cc <update_comm+0x38>)
   833a0:	681b      	ldr	r3, [r3, #0]
   833a2:	1ad3      	subs	r3, r2, r3
   833a4:	2b05      	cmp	r3, #5
   833a6:	d90d      	bls.n	833c4 <update_comm+0x30>
    {
        ticks_comm = getTicks();
   833a8:	4b07      	ldr	r3, [pc, #28]	; (833c8 <update_comm+0x34>)
   833aa:	4798      	blx	r3
   833ac:	4602      	mov	r2, r0
   833ae:	4b07      	ldr	r3, [pc, #28]	; (833cc <update_comm+0x38>)
   833b0:	601a      	str	r2, [r3, #0]
        
        memcpy(&sens_buf, &mts, sizeof(mts));
   833b2:	4b07      	ldr	r3, [pc, #28]	; (833d0 <update_comm+0x3c>)
   833b4:	681b      	ldr	r3, [r3, #0]
   833b6:	461a      	mov	r2, r3
   833b8:	4b06      	ldr	r3, [pc, #24]	; (833d4 <update_comm+0x40>)
   833ba:	601a      	str	r2, [r3, #0]
        spi_master_transfer(&sens_buf, sizeof(sens_buf));
   833bc:	2103      	movs	r1, #3
   833be:	4805      	ldr	r0, [pc, #20]	; (833d4 <update_comm+0x40>)
   833c0:	4b05      	ldr	r3, [pc, #20]	; (833d8 <update_comm+0x44>)
   833c2:	4798      	blx	r3
    }
}
   833c4:	bf00      	nop
   833c6:	bd80      	pop	{r7, pc}
   833c8:	00083355 	.word	0x00083355
   833cc:	20070e28 	.word	0x20070e28
   833d0:	20070e1c 	.word	0x20070e1c
   833d4:	20070e0c 	.word	0x20070e0c
   833d8:	00080d69 	.word	0x00080d69

000833dc <update_battery>:

void update_battery(Bool update_forced)
{
   833dc:	b580      	push	{r7, lr}
   833de:	b084      	sub	sp, #16
   833e0:	af00      	add	r7, sp, #0
   833e2:	4603      	mov	r3, r0
   833e4:	71fb      	strb	r3, [r7, #7]
    char tmp[6];
    battery_percentage = stm.bat_percentage;
   833e6:	4b20      	ldr	r3, [pc, #128]	; (83468 <update_battery+0x8c>)
   833e8:	789a      	ldrb	r2, [r3, #2]
   833ea:	4b20      	ldr	r3, [pc, #128]	; (8346c <update_battery+0x90>)
   833ec:	701a      	strb	r2, [r3, #0]
    
    if (update_forced || prev_battery_percentage != battery_percentage)
   833ee:	79fb      	ldrb	r3, [r7, #7]
   833f0:	2b00      	cmp	r3, #0
   833f2:	d105      	bne.n	83400 <update_battery+0x24>
   833f4:	4b1e      	ldr	r3, [pc, #120]	; (83470 <update_battery+0x94>)
   833f6:	781a      	ldrb	r2, [r3, #0]
   833f8:	4b1c      	ldr	r3, [pc, #112]	; (8346c <update_battery+0x90>)
   833fa:	781b      	ldrb	r3, [r3, #0]
   833fc:	429a      	cmp	r2, r3
   833fe:	d02f      	beq.n	83460 <update_battery+0x84>
    {
        if (battery_percentage >= 100)
   83400:	4b1a      	ldr	r3, [pc, #104]	; (8346c <update_battery+0x90>)
   83402:	781b      	ldrb	r3, [r3, #0]
   83404:	2b63      	cmp	r3, #99	; 0x63
   83406:	d909      	bls.n	8341c <update_battery+0x40>
        {
            sprintf(tmp, "%3u%%", battery_percentage);
   83408:	4b18      	ldr	r3, [pc, #96]	; (8346c <update_battery+0x90>)
   8340a:	781b      	ldrb	r3, [r3, #0]
   8340c:	461a      	mov	r2, r3
   8340e:	f107 0308 	add.w	r3, r7, #8
   83412:	4918      	ldr	r1, [pc, #96]	; (83474 <update_battery+0x98>)
   83414:	4618      	mov	r0, r3
   83416:	4b18      	ldr	r3, [pc, #96]	; (83478 <update_battery+0x9c>)
   83418:	4798      	blx	r3
   8341a:	e016      	b.n	8344a <update_battery+0x6e>
        }
        else if (battery_percentage >= 10)
   8341c:	4b13      	ldr	r3, [pc, #76]	; (8346c <update_battery+0x90>)
   8341e:	781b      	ldrb	r3, [r3, #0]
   83420:	2b09      	cmp	r3, #9
   83422:	d909      	bls.n	83438 <update_battery+0x5c>
        {
            sprintf(tmp, " %2u%%", battery_percentage);
   83424:	4b11      	ldr	r3, [pc, #68]	; (8346c <update_battery+0x90>)
   83426:	781b      	ldrb	r3, [r3, #0]
   83428:	461a      	mov	r2, r3
   8342a:	f107 0308 	add.w	r3, r7, #8
   8342e:	4913      	ldr	r1, [pc, #76]	; (8347c <update_battery+0xa0>)
   83430:	4618      	mov	r0, r3
   83432:	4b11      	ldr	r3, [pc, #68]	; (83478 <update_battery+0x9c>)
   83434:	4798      	blx	r3
   83436:	e008      	b.n	8344a <update_battery+0x6e>
        }
        else
        {
            sprintf(tmp, "  %1u%%", battery_percentage);
   83438:	4b0c      	ldr	r3, [pc, #48]	; (8346c <update_battery+0x90>)
   8343a:	781b      	ldrb	r3, [r3, #0]
   8343c:	461a      	mov	r2, r3
   8343e:	f107 0308 	add.w	r3, r7, #8
   83442:	490f      	ldr	r1, [pc, #60]	; (83480 <update_battery+0xa4>)
   83444:	4618      	mov	r0, r3
   83446:	4b0c      	ldr	r3, [pc, #48]	; (83478 <update_battery+0x9c>)
   83448:	4798      	blx	r3
        }
            
        lcd_print_s(1, 16, tmp);
   8344a:	f107 0308 	add.w	r3, r7, #8
   8344e:	461a      	mov	r2, r3
   83450:	2110      	movs	r1, #16
   83452:	2001      	movs	r0, #1
   83454:	4b0b      	ldr	r3, [pc, #44]	; (83484 <update_battery+0xa8>)
   83456:	4798      	blx	r3
        prev_battery_percentage = battery_percentage;
   83458:	4b04      	ldr	r3, [pc, #16]	; (8346c <update_battery+0x90>)
   8345a:	781a      	ldrb	r2, [r3, #0]
   8345c:	4b04      	ldr	r3, [pc, #16]	; (83470 <update_battery+0x94>)
   8345e:	701a      	strb	r2, [r3, #0]
    }
}
   83460:	bf00      	nop
   83462:	3710      	adds	r7, #16
   83464:	46bd      	mov	sp, r7
   83466:	bd80      	pop	{r7, pc}
   83468:	20070e20 	.word	0x20070e20
   8346c:	20070fc8 	.word	0x20070fc8
   83470:	20070dcc 	.word	0x20070dcc
   83474:	00089b34 	.word	0x00089b34
   83478:	000859a5 	.word	0x000859a5
   8347c:	00089b3c 	.word	0x00089b3c
   83480:	00089b44 	.word	0x00089b44
   83484:	00081a2d 	.word	0x00081a2d

00083488 <update_heartbeat>:

void update_heartbeat(void)
{
   83488:	b580      	push	{r7, lr}
   8348a:	af00      	add	r7, sp, #0
    if (heart_state)
   8348c:	4b20      	ldr	r3, [pc, #128]	; (83510 <update_heartbeat+0x88>)
   8348e:	781b      	ldrb	r3, [r3, #0]
   83490:	2b00      	cmp	r3, #0
   83492:	d01d      	beq.n	834d0 <update_heartbeat+0x48>
    {
        if (getTicks() >= (ticks_heartbeat + 100))
   83494:	4b1f      	ldr	r3, [pc, #124]	; (83514 <update_heartbeat+0x8c>)
   83496:	4798      	blx	r3
   83498:	4602      	mov	r2, r0
   8349a:	4b1f      	ldr	r3, [pc, #124]	; (83518 <update_heartbeat+0x90>)
   8349c:	681b      	ldr	r3, [r3, #0]
   8349e:	3364      	adds	r3, #100	; 0x64
   834a0:	429a      	cmp	r2, r3
   834a2:	d333      	bcc.n	8350c <update_heartbeat+0x84>
        {
            ticks_heartbeat = getTicks();
   834a4:	4b1b      	ldr	r3, [pc, #108]	; (83514 <update_heartbeat+0x8c>)
   834a6:	4798      	blx	r3
   834a8:	4602      	mov	r2, r0
   834aa:	4b1b      	ldr	r3, [pc, #108]	; (83518 <update_heartbeat+0x90>)
   834ac:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 0);
   834ae:	2100      	movs	r1, #0
   834b0:	206a      	movs	r0, #106	; 0x6a
   834b2:	4b1a      	ldr	r3, [pc, #104]	; (8351c <update_heartbeat+0x94>)
   834b4:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 0);
   834b6:	2100      	movs	r1, #0
   834b8:	2067      	movs	r0, #103	; 0x67
   834ba:	4b18      	ldr	r3, [pc, #96]	; (8351c <update_heartbeat+0x94>)
   834bc:	4798      	blx	r3
            mts.ibit.heartbeat = 0;
   834be:	4a18      	ldr	r2, [pc, #96]	; (83520 <update_heartbeat+0x98>)
   834c0:	7813      	ldrb	r3, [r2, #0]
   834c2:	f36f 0300 	bfc	r3, #0, #1
   834c6:	7013      	strb	r3, [r2, #0]
            heart_state = 0;
   834c8:	4b11      	ldr	r3, [pc, #68]	; (83510 <update_heartbeat+0x88>)
   834ca:	2200      	movs	r2, #0
   834cc:	701a      	strb	r2, [r3, #0]
            ioport_set_pin_level(LED_M1, 1);
            mts.ibit.heartbeat = 1;
            heart_state = 1;
        }
    }
}
   834ce:	e01d      	b.n	8350c <update_heartbeat+0x84>
        if (getTicks() >= (ticks_heartbeat + 900))
   834d0:	4b10      	ldr	r3, [pc, #64]	; (83514 <update_heartbeat+0x8c>)
   834d2:	4798      	blx	r3
   834d4:	4602      	mov	r2, r0
   834d6:	4b10      	ldr	r3, [pc, #64]	; (83518 <update_heartbeat+0x90>)
   834d8:	681b      	ldr	r3, [r3, #0]
   834da:	f503 7361 	add.w	r3, r3, #900	; 0x384
   834de:	429a      	cmp	r2, r3
   834e0:	d314      	bcc.n	8350c <update_heartbeat+0x84>
            ticks_heartbeat = getTicks();
   834e2:	4b0c      	ldr	r3, [pc, #48]	; (83514 <update_heartbeat+0x8c>)
   834e4:	4798      	blx	r3
   834e6:	4602      	mov	r2, r0
   834e8:	4b0b      	ldr	r3, [pc, #44]	; (83518 <update_heartbeat+0x90>)
   834ea:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 1);
   834ec:	2101      	movs	r1, #1
   834ee:	206a      	movs	r0, #106	; 0x6a
   834f0:	4b0a      	ldr	r3, [pc, #40]	; (8351c <update_heartbeat+0x94>)
   834f2:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 1);
   834f4:	2101      	movs	r1, #1
   834f6:	2067      	movs	r0, #103	; 0x67
   834f8:	4b08      	ldr	r3, [pc, #32]	; (8351c <update_heartbeat+0x94>)
   834fa:	4798      	blx	r3
            mts.ibit.heartbeat = 1;
   834fc:	4a08      	ldr	r2, [pc, #32]	; (83520 <update_heartbeat+0x98>)
   834fe:	7813      	ldrb	r3, [r2, #0]
   83500:	f043 0301 	orr.w	r3, r3, #1
   83504:	7013      	strb	r3, [r2, #0]
            heart_state = 1;
   83506:	4b02      	ldr	r3, [pc, #8]	; (83510 <update_heartbeat+0x88>)
   83508:	2201      	movs	r2, #1
   8350a:	701a      	strb	r2, [r3, #0]
}
   8350c:	bf00      	nop
   8350e:	bd80      	pop	{r7, pc}
   83510:	20070e24 	.word	0x20070e24
   83514:	00083355 	.word	0x00083355
   83518:	20070e34 	.word	0x20070e34
   8351c:	000832cd 	.word	0x000832cd
   83520:	20070e1c 	.word	0x20070e1c

00083524 <osc_enable>:
{
   83524:	b580      	push	{r7, lr}
   83526:	b082      	sub	sp, #8
   83528:	af00      	add	r7, sp, #0
   8352a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8352c:	687b      	ldr	r3, [r7, #4]
   8352e:	2b07      	cmp	r3, #7
   83530:	d831      	bhi.n	83596 <osc_enable+0x72>
   83532:	a201      	add	r2, pc, #4	; (adr r2, 83538 <osc_enable+0x14>)
   83534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83538:	00083595 	.word	0x00083595
   8353c:	00083559 	.word	0x00083559
   83540:	00083561 	.word	0x00083561
   83544:	00083569 	.word	0x00083569
   83548:	00083571 	.word	0x00083571
   8354c:	00083579 	.word	0x00083579
   83550:	00083581 	.word	0x00083581
   83554:	0008358b 	.word	0x0008358b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83558:	2000      	movs	r0, #0
   8355a:	4b11      	ldr	r3, [pc, #68]	; (835a0 <osc_enable+0x7c>)
   8355c:	4798      	blx	r3
		break;
   8355e:	e01a      	b.n	83596 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   83560:	2001      	movs	r0, #1
   83562:	4b0f      	ldr	r3, [pc, #60]	; (835a0 <osc_enable+0x7c>)
   83564:	4798      	blx	r3
		break;
   83566:	e016      	b.n	83596 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83568:	2000      	movs	r0, #0
   8356a:	4b0e      	ldr	r3, [pc, #56]	; (835a4 <osc_enable+0x80>)
   8356c:	4798      	blx	r3
		break;
   8356e:	e012      	b.n	83596 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83570:	2010      	movs	r0, #16
   83572:	4b0c      	ldr	r3, [pc, #48]	; (835a4 <osc_enable+0x80>)
   83574:	4798      	blx	r3
		break;
   83576:	e00e      	b.n	83596 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83578:	2020      	movs	r0, #32
   8357a:	4b0a      	ldr	r3, [pc, #40]	; (835a4 <osc_enable+0x80>)
   8357c:	4798      	blx	r3
		break;
   8357e:	e00a      	b.n	83596 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   83580:	213e      	movs	r1, #62	; 0x3e
   83582:	2000      	movs	r0, #0
   83584:	4b08      	ldr	r3, [pc, #32]	; (835a8 <osc_enable+0x84>)
   83586:	4798      	blx	r3
		break;
   83588:	e005      	b.n	83596 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   8358a:	213e      	movs	r1, #62	; 0x3e
   8358c:	2001      	movs	r0, #1
   8358e:	4b06      	ldr	r3, [pc, #24]	; (835a8 <osc_enable+0x84>)
   83590:	4798      	blx	r3
		break;
   83592:	e000      	b.n	83596 <osc_enable+0x72>
		break;
   83594:	bf00      	nop
}
   83596:	bf00      	nop
   83598:	3708      	adds	r7, #8
   8359a:	46bd      	mov	sp, r7
   8359c:	bd80      	pop	{r7, pc}
   8359e:	bf00      	nop
   835a0:	00083b61 	.word	0x00083b61
   835a4:	00083bcd 	.word	0x00083bcd
   835a8:	00083c3d 	.word	0x00083c3d

000835ac <osc_is_ready>:
{
   835ac:	b580      	push	{r7, lr}
   835ae:	b082      	sub	sp, #8
   835b0:	af00      	add	r7, sp, #0
   835b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   835b4:	687b      	ldr	r3, [r7, #4]
   835b6:	2b07      	cmp	r3, #7
   835b8:	d826      	bhi.n	83608 <osc_is_ready+0x5c>
   835ba:	a201      	add	r2, pc, #4	; (adr r2, 835c0 <osc_is_ready+0x14>)
   835bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   835c0:	000835e1 	.word	0x000835e1
   835c4:	000835e5 	.word	0x000835e5
   835c8:	000835e5 	.word	0x000835e5
   835cc:	000835f7 	.word	0x000835f7
   835d0:	000835f7 	.word	0x000835f7
   835d4:	000835f7 	.word	0x000835f7
   835d8:	000835f7 	.word	0x000835f7
   835dc:	000835f7 	.word	0x000835f7
		return 1;
   835e0:	2301      	movs	r3, #1
   835e2:	e012      	b.n	8360a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   835e4:	4b0b      	ldr	r3, [pc, #44]	; (83614 <osc_is_ready+0x68>)
   835e6:	4798      	blx	r3
   835e8:	4603      	mov	r3, r0
   835ea:	2b00      	cmp	r3, #0
   835ec:	bf14      	ite	ne
   835ee:	2301      	movne	r3, #1
   835f0:	2300      	moveq	r3, #0
   835f2:	b2db      	uxtb	r3, r3
   835f4:	e009      	b.n	8360a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   835f6:	4b08      	ldr	r3, [pc, #32]	; (83618 <osc_is_ready+0x6c>)
   835f8:	4798      	blx	r3
   835fa:	4603      	mov	r3, r0
   835fc:	2b00      	cmp	r3, #0
   835fe:	bf14      	ite	ne
   83600:	2301      	movne	r3, #1
   83602:	2300      	moveq	r3, #0
   83604:	b2db      	uxtb	r3, r3
   83606:	e000      	b.n	8360a <osc_is_ready+0x5e>
	return 0;
   83608:	2300      	movs	r3, #0
}
   8360a:	4618      	mov	r0, r3
   8360c:	3708      	adds	r7, #8
   8360e:	46bd      	mov	sp, r7
   83610:	bd80      	pop	{r7, pc}
   83612:	bf00      	nop
   83614:	00083b99 	.word	0x00083b99
   83618:	00083cb5 	.word	0x00083cb5

0008361c <osc_get_rate>:
{
   8361c:	b480      	push	{r7}
   8361e:	b083      	sub	sp, #12
   83620:	af00      	add	r7, sp, #0
   83622:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83624:	687b      	ldr	r3, [r7, #4]
   83626:	2b07      	cmp	r3, #7
   83628:	d825      	bhi.n	83676 <osc_get_rate+0x5a>
   8362a:	a201      	add	r2, pc, #4	; (adr r2, 83630 <osc_get_rate+0x14>)
   8362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83630:	00083651 	.word	0x00083651
   83634:	00083657 	.word	0x00083657
   83638:	0008365d 	.word	0x0008365d
   8363c:	00083663 	.word	0x00083663
   83640:	00083667 	.word	0x00083667
   83644:	0008366b 	.word	0x0008366b
   83648:	0008366f 	.word	0x0008366f
   8364c:	00083673 	.word	0x00083673
		return OSC_SLCK_32K_RC_HZ;
   83650:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83654:	e010      	b.n	83678 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   83656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8365a:	e00d      	b.n	83678 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   8365c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83660:	e00a      	b.n	83678 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   83662:	4b08      	ldr	r3, [pc, #32]	; (83684 <osc_get_rate+0x68>)
   83664:	e008      	b.n	83678 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   83666:	4b08      	ldr	r3, [pc, #32]	; (83688 <osc_get_rate+0x6c>)
   83668:	e006      	b.n	83678 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8366a:	4b08      	ldr	r3, [pc, #32]	; (8368c <osc_get_rate+0x70>)
   8366c:	e004      	b.n	83678 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8366e:	4b07      	ldr	r3, [pc, #28]	; (8368c <osc_get_rate+0x70>)
   83670:	e002      	b.n	83678 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   83672:	4b06      	ldr	r3, [pc, #24]	; (8368c <osc_get_rate+0x70>)
   83674:	e000      	b.n	83678 <osc_get_rate+0x5c>
	return 0;
   83676:	2300      	movs	r3, #0
}
   83678:	4618      	mov	r0, r3
   8367a:	370c      	adds	r7, #12
   8367c:	46bd      	mov	sp, r7
   8367e:	bc80      	pop	{r7}
   83680:	4770      	bx	lr
   83682:	bf00      	nop
   83684:	003d0900 	.word	0x003d0900
   83688:	007a1200 	.word	0x007a1200
   8368c:	00b71b00 	.word	0x00b71b00

00083690 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   83690:	b580      	push	{r7, lr}
   83692:	b082      	sub	sp, #8
   83694:	af00      	add	r7, sp, #0
   83696:	4603      	mov	r3, r0
   83698:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8369a:	bf00      	nop
   8369c:	79fb      	ldrb	r3, [r7, #7]
   8369e:	4618      	mov	r0, r3
   836a0:	4b05      	ldr	r3, [pc, #20]	; (836b8 <osc_wait_ready+0x28>)
   836a2:	4798      	blx	r3
   836a4:	4603      	mov	r3, r0
   836a6:	f083 0301 	eor.w	r3, r3, #1
   836aa:	b2db      	uxtb	r3, r3
   836ac:	2b00      	cmp	r3, #0
   836ae:	d1f5      	bne.n	8369c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   836b0:	bf00      	nop
   836b2:	3708      	adds	r7, #8
   836b4:	46bd      	mov	sp, r7
   836b6:	bd80      	pop	{r7, pc}
   836b8:	000835ad 	.word	0x000835ad

000836bc <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   836bc:	b580      	push	{r7, lr}
   836be:	b086      	sub	sp, #24
   836c0:	af00      	add	r7, sp, #0
   836c2:	60f8      	str	r0, [r7, #12]
   836c4:	607a      	str	r2, [r7, #4]
   836c6:	603b      	str	r3, [r7, #0]
   836c8:	460b      	mov	r3, r1
   836ca:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   836cc:	687b      	ldr	r3, [r7, #4]
   836ce:	2b00      	cmp	r3, #0
   836d0:	d107      	bne.n	836e2 <pll_config_init+0x26>
   836d2:	683b      	ldr	r3, [r7, #0]
   836d4:	2b00      	cmp	r3, #0
   836d6:	d104      	bne.n	836e2 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   836d8:	68fb      	ldr	r3, [r7, #12]
   836da:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   836de:	601a      	str	r2, [r3, #0]
   836e0:	e019      	b.n	83716 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   836e2:	7afb      	ldrb	r3, [r7, #11]
   836e4:	4618      	mov	r0, r3
   836e6:	4b0e      	ldr	r3, [pc, #56]	; (83720 <pll_config_init+0x64>)
   836e8:	4798      	blx	r3
   836ea:	4602      	mov	r2, r0
   836ec:	687b      	ldr	r3, [r7, #4]
   836ee:	fbb2 f3f3 	udiv	r3, r2, r3
   836f2:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   836f4:	697b      	ldr	r3, [r7, #20]
   836f6:	683a      	ldr	r2, [r7, #0]
   836f8:	fb02 f303 	mul.w	r3, r2, r3
   836fc:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   836fe:	683b      	ldr	r3, [r7, #0]
   83700:	3b01      	subs	r3, #1
   83702:	041a      	lsls	r2, r3, #16
   83704:	4b07      	ldr	r3, [pc, #28]	; (83724 <pll_config_init+0x68>)
   83706:	4013      	ands	r3, r2
   83708:	687a      	ldr	r2, [r7, #4]
   8370a:	b2d2      	uxtb	r2, r2
   8370c:	4313      	orrs	r3, r2
   8370e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   83712:	68fb      	ldr	r3, [r7, #12]
   83714:	601a      	str	r2, [r3, #0]
	}
}
   83716:	bf00      	nop
   83718:	3718      	adds	r7, #24
   8371a:	46bd      	mov	sp, r7
   8371c:	bd80      	pop	{r7, pc}
   8371e:	bf00      	nop
   83720:	0008361d 	.word	0x0008361d
   83724:	07ff0000 	.word	0x07ff0000

00083728 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   83728:	b580      	push	{r7, lr}
   8372a:	b082      	sub	sp, #8
   8372c:	af00      	add	r7, sp, #0
   8372e:	6078      	str	r0, [r7, #4]
   83730:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   83732:	683b      	ldr	r3, [r7, #0]
   83734:	2b00      	cmp	r3, #0
   83736:	d108      	bne.n	8374a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83738:	4b09      	ldr	r3, [pc, #36]	; (83760 <pll_enable+0x38>)
   8373a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8373c:	4a09      	ldr	r2, [pc, #36]	; (83764 <pll_enable+0x3c>)
   8373e:	687b      	ldr	r3, [r7, #4]
   83740:	681b      	ldr	r3, [r3, #0]
   83742:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83746:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   83748:	e005      	b.n	83756 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8374a:	4a06      	ldr	r2, [pc, #24]	; (83764 <pll_enable+0x3c>)
   8374c:	687b      	ldr	r3, [r7, #4]
   8374e:	681b      	ldr	r3, [r3, #0]
   83750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83754:	61d3      	str	r3, [r2, #28]
}
   83756:	bf00      	nop
   83758:	3708      	adds	r7, #8
   8375a:	46bd      	mov	sp, r7
   8375c:	bd80      	pop	{r7, pc}
   8375e:	bf00      	nop
   83760:	00083ccd 	.word	0x00083ccd
   83764:	400e0600 	.word	0x400e0600

00083768 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   83768:	b580      	push	{r7, lr}
   8376a:	b082      	sub	sp, #8
   8376c:	af00      	add	r7, sp, #0
   8376e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   83770:	687b      	ldr	r3, [r7, #4]
   83772:	2b00      	cmp	r3, #0
   83774:	d103      	bne.n	8377e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   83776:	4b05      	ldr	r3, [pc, #20]	; (8378c <pll_is_locked+0x24>)
   83778:	4798      	blx	r3
   8377a:	4603      	mov	r3, r0
   8377c:	e002      	b.n	83784 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8377e:	4b04      	ldr	r3, [pc, #16]	; (83790 <pll_is_locked+0x28>)
   83780:	4798      	blx	r3
   83782:	4603      	mov	r3, r0
	}
}
   83784:	4618      	mov	r0, r3
   83786:	3708      	adds	r7, #8
   83788:	46bd      	mov	sp, r7
   8378a:	bd80      	pop	{r7, pc}
   8378c:	00083ce5 	.word	0x00083ce5
   83790:	00083cfd 	.word	0x00083cfd

00083794 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   83794:	b580      	push	{r7, lr}
   83796:	b082      	sub	sp, #8
   83798:	af00      	add	r7, sp, #0
   8379a:	4603      	mov	r3, r0
   8379c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8379e:	79fb      	ldrb	r3, [r7, #7]
   837a0:	3b03      	subs	r3, #3
   837a2:	2b04      	cmp	r3, #4
   837a4:	d808      	bhi.n	837b8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   837a6:	79fb      	ldrb	r3, [r7, #7]
   837a8:	4618      	mov	r0, r3
   837aa:	4b06      	ldr	r3, [pc, #24]	; (837c4 <pll_enable_source+0x30>)
   837ac:	4798      	blx	r3
		osc_wait_ready(e_src);
   837ae:	79fb      	ldrb	r3, [r7, #7]
   837b0:	4618      	mov	r0, r3
   837b2:	4b05      	ldr	r3, [pc, #20]	; (837c8 <pll_enable_source+0x34>)
   837b4:	4798      	blx	r3
		break;
   837b6:	e000      	b.n	837ba <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   837b8:	bf00      	nop
	}
}
   837ba:	bf00      	nop
   837bc:	3708      	adds	r7, #8
   837be:	46bd      	mov	sp, r7
   837c0:	bd80      	pop	{r7, pc}
   837c2:	bf00      	nop
   837c4:	00083525 	.word	0x00083525
   837c8:	00083691 	.word	0x00083691

000837cc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   837cc:	b580      	push	{r7, lr}
   837ce:	b082      	sub	sp, #8
   837d0:	af00      	add	r7, sp, #0
   837d2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   837d4:	bf00      	nop
   837d6:	6878      	ldr	r0, [r7, #4]
   837d8:	4b04      	ldr	r3, [pc, #16]	; (837ec <pll_wait_for_lock+0x20>)
   837da:	4798      	blx	r3
   837dc:	4603      	mov	r3, r0
   837de:	2b00      	cmp	r3, #0
   837e0:	d0f9      	beq.n	837d6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   837e2:	2300      	movs	r3, #0
}
   837e4:	4618      	mov	r0, r3
   837e6:	3708      	adds	r7, #8
   837e8:	46bd      	mov	sp, r7
   837ea:	bd80      	pop	{r7, pc}
   837ec:	00083769 	.word	0x00083769

000837f0 <sysclk_get_main_hz>:
{
   837f0:	b580      	push	{r7, lr}
   837f2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   837f4:	2006      	movs	r0, #6
   837f6:	4b04      	ldr	r3, [pc, #16]	; (83808 <sysclk_get_main_hz+0x18>)
   837f8:	4798      	blx	r3
   837fa:	4602      	mov	r2, r0
   837fc:	4613      	mov	r3, r2
   837fe:	00db      	lsls	r3, r3, #3
   83800:	1a9b      	subs	r3, r3, r2
   83802:	005b      	lsls	r3, r3, #1
}
   83804:	4618      	mov	r0, r3
   83806:	bd80      	pop	{r7, pc}
   83808:	0008361d 	.word	0x0008361d

0008380c <sysclk_get_cpu_hz>:
{
   8380c:	b580      	push	{r7, lr}
   8380e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83810:	4b02      	ldr	r3, [pc, #8]	; (8381c <sysclk_get_cpu_hz+0x10>)
   83812:	4798      	blx	r3
   83814:	4603      	mov	r3, r0
   83816:	085b      	lsrs	r3, r3, #1
}
   83818:	4618      	mov	r0, r3
   8381a:	bd80      	pop	{r7, pc}
   8381c:	000837f1 	.word	0x000837f1

00083820 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   83820:	b590      	push	{r4, r7, lr}
   83822:	b083      	sub	sp, #12
   83824:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83826:	4811      	ldr	r0, [pc, #68]	; (8386c <sysclk_init+0x4c>)
   83828:	4b11      	ldr	r3, [pc, #68]	; (83870 <sysclk_init+0x50>)
   8382a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8382c:	2006      	movs	r0, #6
   8382e:	4b11      	ldr	r3, [pc, #68]	; (83874 <sysclk_init+0x54>)
   83830:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   83832:	1d38      	adds	r0, r7, #4
   83834:	230e      	movs	r3, #14
   83836:	2201      	movs	r2, #1
   83838:	2106      	movs	r1, #6
   8383a:	4c0f      	ldr	r4, [pc, #60]	; (83878 <sysclk_init+0x58>)
   8383c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8383e:	1d3b      	adds	r3, r7, #4
   83840:	2100      	movs	r1, #0
   83842:	4618      	mov	r0, r3
   83844:	4b0d      	ldr	r3, [pc, #52]	; (8387c <sysclk_init+0x5c>)
   83846:	4798      	blx	r3
		pll_wait_for_lock(0);
   83848:	2000      	movs	r0, #0
   8384a:	4b0d      	ldr	r3, [pc, #52]	; (83880 <sysclk_init+0x60>)
   8384c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8384e:	2010      	movs	r0, #16
   83850:	4b0c      	ldr	r3, [pc, #48]	; (83884 <sysclk_init+0x64>)
   83852:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83854:	4b0c      	ldr	r3, [pc, #48]	; (83888 <sysclk_init+0x68>)
   83856:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83858:	4b0c      	ldr	r3, [pc, #48]	; (8388c <sysclk_init+0x6c>)
   8385a:	4798      	blx	r3
   8385c:	4603      	mov	r3, r0
   8385e:	4618      	mov	r0, r3
   83860:	4b03      	ldr	r3, [pc, #12]	; (83870 <sysclk_init+0x50>)
   83862:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83864:	bf00      	nop
   83866:	370c      	adds	r7, #12
   83868:	46bd      	mov	sp, r7
   8386a:	bd90      	pop	{r4, r7, pc}
   8386c:	0501bd00 	.word	0x0501bd00
   83870:	200700d1 	.word	0x200700d1
   83874:	00083795 	.word	0x00083795
   83878:	000836bd 	.word	0x000836bd
   8387c:	00083729 	.word	0x00083729
   83880:	000837cd 	.word	0x000837cd
   83884:	00083ae1 	.word	0x00083ae1
   83888:	000844a9 	.word	0x000844a9
   8388c:	0008380d 	.word	0x0008380d

00083890 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   83890:	b580      	push	{r7, lr}
   83892:	b082      	sub	sp, #8
   83894:	af00      	add	r7, sp, #0
   83896:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   83898:	6878      	ldr	r0, [r7, #4]
   8389a:	4b03      	ldr	r3, [pc, #12]	; (838a8 <dmac_init+0x18>)
   8389c:	4798      	blx	r3
}
   8389e:	bf00      	nop
   838a0:	3708      	adds	r7, #8
   838a2:	46bd      	mov	sp, r7
   838a4:	bd80      	pop	{r7, pc}
   838a6:	bf00      	nop
   838a8:	000838eb 	.word	0x000838eb

000838ac <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   838ac:	b480      	push	{r7}
   838ae:	b083      	sub	sp, #12
   838b0:	af00      	add	r7, sp, #0
   838b2:	6078      	str	r0, [r7, #4]
   838b4:	460b      	mov	r3, r1
   838b6:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   838b8:	687b      	ldr	r3, [r7, #4]
   838ba:	681b      	ldr	r3, [r3, #0]
   838bc:	f023 0210 	bic.w	r2, r3, #16
   838c0:	78fb      	ldrb	r3, [r7, #3]
   838c2:	431a      	orrs	r2, r3
   838c4:	687b      	ldr	r3, [r7, #4]
   838c6:	601a      	str	r2, [r3, #0]
}
   838c8:	bf00      	nop
   838ca:	370c      	adds	r7, #12
   838cc:	46bd      	mov	sp, r7
   838ce:	bc80      	pop	{r7}
   838d0:	4770      	bx	lr

000838d2 <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   838d2:	b480      	push	{r7}
   838d4:	b083      	sub	sp, #12
   838d6:	af00      	add	r7, sp, #0
   838d8:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   838da:	687b      	ldr	r3, [r7, #4]
   838dc:	2201      	movs	r2, #1
   838de:	605a      	str	r2, [r3, #4]
}
   838e0:	bf00      	nop
   838e2:	370c      	adds	r7, #12
   838e4:	46bd      	mov	sp, r7
   838e6:	bc80      	pop	{r7}
   838e8:	4770      	bx	lr

000838ea <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   838ea:	b480      	push	{r7}
   838ec:	b083      	sub	sp, #12
   838ee:	af00      	add	r7, sp, #0
   838f0:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   838f2:	687b      	ldr	r3, [r7, #4]
   838f4:	685b      	ldr	r3, [r3, #4]
   838f6:	f023 0201 	bic.w	r2, r3, #1
   838fa:	687b      	ldr	r3, [r7, #4]
   838fc:	605a      	str	r2, [r3, #4]
}
   838fe:	bf00      	nop
   83900:	370c      	adds	r7, #12
   83902:	46bd      	mov	sp, r7
   83904:	bc80      	pop	{r7}
   83906:	4770      	bx	lr

00083908 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   83908:	b480      	push	{r7}
   8390a:	b083      	sub	sp, #12
   8390c:	af00      	add	r7, sp, #0
   8390e:	6078      	str	r0, [r7, #4]
   83910:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   83912:	687b      	ldr	r3, [r7, #4]
   83914:	683a      	ldr	r2, [r7, #0]
   83916:	619a      	str	r2, [r3, #24]
}
   83918:	bf00      	nop
   8391a:	370c      	adds	r7, #12
   8391c:	46bd      	mov	sp, r7
   8391e:	bc80      	pop	{r7}
   83920:	4770      	bx	lr

00083922 <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   83922:	b480      	push	{r7}
   83924:	b083      	sub	sp, #12
   83926:	af00      	add	r7, sp, #0
   83928:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   8392a:	687b      	ldr	r3, [r7, #4]
   8392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   8392e:	4618      	mov	r0, r3
   83930:	370c      	adds	r7, #12
   83932:	46bd      	mov	sp, r7
   83934:	bc80      	pop	{r7}
   83936:	4770      	bx	lr

00083938 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   83938:	b480      	push	{r7}
   8393a:	b083      	sub	sp, #12
   8393c:	af00      	add	r7, sp, #0
   8393e:	6078      	str	r0, [r7, #4]
   83940:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   83942:	2201      	movs	r2, #1
   83944:	683b      	ldr	r3, [r7, #0]
   83946:	409a      	lsls	r2, r3
   83948:	687b      	ldr	r3, [r7, #4]
   8394a:	629a      	str	r2, [r3, #40]	; 0x28
}
   8394c:	bf00      	nop
   8394e:	370c      	adds	r7, #12
   83950:	46bd      	mov	sp, r7
   83952:	bc80      	pop	{r7}
   83954:	4770      	bx	lr

00083956 <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   83956:	b480      	push	{r7}
   83958:	b083      	sub	sp, #12
   8395a:	af00      	add	r7, sp, #0
   8395c:	6078      	str	r0, [r7, #4]
   8395e:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   83960:	2201      	movs	r2, #1
   83962:	683b      	ldr	r3, [r7, #0]
   83964:	409a      	lsls	r2, r3
   83966:	687b      	ldr	r3, [r7, #4]
   83968:	62da      	str	r2, [r3, #44]	; 0x2c
}
   8396a:	bf00      	nop
   8396c:	370c      	adds	r7, #12
   8396e:	46bd      	mov	sp, r7
   83970:	bc80      	pop	{r7}
   83972:	4770      	bx	lr

00083974 <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   83974:	b480      	push	{r7}
   83976:	b085      	sub	sp, #20
   83978:	af00      	add	r7, sp, #0
   8397a:	60f8      	str	r0, [r7, #12]
   8397c:	60b9      	str	r1, [r7, #8]
   8397e:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   83980:	68f9      	ldr	r1, [r7, #12]
   83982:	68ba      	ldr	r2, [r7, #8]
   83984:	4613      	mov	r3, r2
   83986:	009b      	lsls	r3, r3, #2
   83988:	4413      	add	r3, r2
   8398a:	00db      	lsls	r3, r3, #3
   8398c:	440b      	add	r3, r1
   8398e:	333c      	adds	r3, #60	; 0x3c
   83990:	687a      	ldr	r2, [r7, #4]
   83992:	601a      	str	r2, [r3, #0]
}
   83994:	bf00      	nop
   83996:	3714      	adds	r7, #20
   83998:	46bd      	mov	sp, r7
   8399a:	bc80      	pop	{r7}
   8399c:	4770      	bx	lr

0008399e <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   8399e:	b480      	push	{r7}
   839a0:	b085      	sub	sp, #20
   839a2:	af00      	add	r7, sp, #0
   839a4:	60f8      	str	r0, [r7, #12]
   839a6:	60b9      	str	r1, [r7, #8]
   839a8:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   839aa:	68f9      	ldr	r1, [r7, #12]
   839ac:	68ba      	ldr	r2, [r7, #8]
   839ae:	4613      	mov	r3, r2
   839b0:	009b      	lsls	r3, r3, #2
   839b2:	4413      	add	r3, r2
   839b4:	00db      	lsls	r3, r3, #3
   839b6:	440b      	add	r3, r1
   839b8:	3340      	adds	r3, #64	; 0x40
   839ba:	687a      	ldr	r2, [r7, #4]
   839bc:	601a      	str	r2, [r3, #0]
}
   839be:	bf00      	nop
   839c0:	3714      	adds	r7, #20
   839c2:	46bd      	mov	sp, r7
   839c4:	bc80      	pop	{r7}
   839c6:	4770      	bx	lr

000839c8 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   839c8:	b480      	push	{r7}
   839ca:	b085      	sub	sp, #20
   839cc:	af00      	add	r7, sp, #0
   839ce:	60f8      	str	r0, [r7, #12]
   839d0:	60b9      	str	r1, [r7, #8]
   839d2:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   839d4:	68f9      	ldr	r1, [r7, #12]
   839d6:	68ba      	ldr	r2, [r7, #8]
   839d8:	4613      	mov	r3, r2
   839da:	009b      	lsls	r3, r3, #2
   839dc:	4413      	add	r3, r2
   839de:	00db      	lsls	r3, r3, #3
   839e0:	440b      	add	r3, r1
   839e2:	3344      	adds	r3, #68	; 0x44
   839e4:	687a      	ldr	r2, [r7, #4]
   839e6:	601a      	str	r2, [r3, #0]
}
   839e8:	bf00      	nop
   839ea:	3714      	adds	r7, #20
   839ec:	46bd      	mov	sp, r7
   839ee:	bc80      	pop	{r7}
   839f0:	4770      	bx	lr

000839f2 <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   839f2:	b480      	push	{r7}
   839f4:	b085      	sub	sp, #20
   839f6:	af00      	add	r7, sp, #0
   839f8:	60f8      	str	r0, [r7, #12]
   839fa:	60b9      	str	r1, [r7, #8]
   839fc:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   839fe:	68f9      	ldr	r1, [r7, #12]
   83a00:	68ba      	ldr	r2, [r7, #8]
   83a02:	4613      	mov	r3, r2
   83a04:	009b      	lsls	r3, r3, #2
   83a06:	4413      	add	r3, r2
   83a08:	00db      	lsls	r3, r3, #3
   83a0a:	440b      	add	r3, r1
   83a0c:	3348      	adds	r3, #72	; 0x48
   83a0e:	687a      	ldr	r2, [r7, #4]
   83a10:	601a      	str	r2, [r3, #0]
}
   83a12:	bf00      	nop
   83a14:	3714      	adds	r7, #20
   83a16:	46bd      	mov	sp, r7
   83a18:	bc80      	pop	{r7}
   83a1a:	4770      	bx	lr

00083a1c <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   83a1c:	b480      	push	{r7}
   83a1e:	b085      	sub	sp, #20
   83a20:	af00      	add	r7, sp, #0
   83a22:	60f8      	str	r0, [r7, #12]
   83a24:	60b9      	str	r1, [r7, #8]
   83a26:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   83a28:	68f9      	ldr	r1, [r7, #12]
   83a2a:	68ba      	ldr	r2, [r7, #8]
   83a2c:	4613      	mov	r3, r2
   83a2e:	009b      	lsls	r3, r3, #2
   83a30:	4413      	add	r3, r2
   83a32:	00db      	lsls	r3, r3, #3
   83a34:	440b      	add	r3, r1
   83a36:	334c      	adds	r3, #76	; 0x4c
   83a38:	687a      	ldr	r2, [r7, #4]
   83a3a:	601a      	str	r2, [r3, #0]
}
   83a3c:	bf00      	nop
   83a3e:	3714      	adds	r7, #20
   83a40:	46bd      	mov	sp, r7
   83a42:	bc80      	pop	{r7}
   83a44:	4770      	bx	lr

00083a46 <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   83a46:	b480      	push	{r7}
   83a48:	b085      	sub	sp, #20
   83a4a:	af00      	add	r7, sp, #0
   83a4c:	60f8      	str	r0, [r7, #12]
   83a4e:	60b9      	str	r1, [r7, #8]
   83a50:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   83a52:	68f9      	ldr	r1, [r7, #12]
   83a54:	68ba      	ldr	r2, [r7, #8]
   83a56:	4613      	mov	r3, r2
   83a58:	009b      	lsls	r3, r3, #2
   83a5a:	4413      	add	r3, r2
   83a5c:	00db      	lsls	r3, r3, #3
   83a5e:	440b      	add	r3, r1
   83a60:	3350      	adds	r3, #80	; 0x50
   83a62:	687a      	ldr	r2, [r7, #4]
   83a64:	601a      	str	r2, [r3, #0]
}
   83a66:	bf00      	nop
   83a68:	3714      	adds	r7, #20
   83a6a:	46bd      	mov	sp, r7
   83a6c:	bc80      	pop	{r7}
   83a6e:	4770      	bx	lr

00083a70 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   83a70:	b580      	push	{r7, lr}
   83a72:	b084      	sub	sp, #16
   83a74:	af00      	add	r7, sp, #0
   83a76:	60f8      	str	r0, [r7, #12]
   83a78:	60b9      	str	r1, [r7, #8]
   83a7a:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   83a7c:	68fb      	ldr	r3, [r7, #12]
   83a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   83a80:	687b      	ldr	r3, [r7, #4]
   83a82:	681b      	ldr	r3, [r3, #0]
   83a84:	461a      	mov	r2, r3
   83a86:	68b9      	ldr	r1, [r7, #8]
   83a88:	68f8      	ldr	r0, [r7, #12]
   83a8a:	4b10      	ldr	r3, [pc, #64]	; (83acc <dmac_channel_single_buf_transfer_init+0x5c>)
   83a8c:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   83a8e:	687b      	ldr	r3, [r7, #4]
   83a90:	685b      	ldr	r3, [r3, #4]
   83a92:	461a      	mov	r2, r3
   83a94:	68b9      	ldr	r1, [r7, #8]
   83a96:	68f8      	ldr	r0, [r7, #12]
   83a98:	4b0d      	ldr	r3, [pc, #52]	; (83ad0 <dmac_channel_single_buf_transfer_init+0x60>)
   83a9a:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   83a9c:	2200      	movs	r2, #0
   83a9e:	68b9      	ldr	r1, [r7, #8]
   83aa0:	68f8      	ldr	r0, [r7, #12]
   83aa2:	4b0c      	ldr	r3, [pc, #48]	; (83ad4 <dmac_channel_single_buf_transfer_init+0x64>)
   83aa4:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   83aa6:	687b      	ldr	r3, [r7, #4]
   83aa8:	689b      	ldr	r3, [r3, #8]
   83aaa:	461a      	mov	r2, r3
   83aac:	68b9      	ldr	r1, [r7, #8]
   83aae:	68f8      	ldr	r0, [r7, #12]
   83ab0:	4b09      	ldr	r3, [pc, #36]	; (83ad8 <dmac_channel_single_buf_transfer_init+0x68>)
   83ab2:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   83ab4:	687b      	ldr	r3, [r7, #4]
   83ab6:	68db      	ldr	r3, [r3, #12]
   83ab8:	461a      	mov	r2, r3
   83aba:	68b9      	ldr	r1, [r7, #8]
   83abc:	68f8      	ldr	r0, [r7, #12]
   83abe:	4b07      	ldr	r3, [pc, #28]	; (83adc <dmac_channel_single_buf_transfer_init+0x6c>)
   83ac0:	4798      	blx	r3
}
   83ac2:	bf00      	nop
   83ac4:	3710      	adds	r7, #16
   83ac6:	46bd      	mov	sp, r7
   83ac8:	bd80      	pop	{r7, pc}
   83aca:	bf00      	nop
   83acc:	00083975 	.word	0x00083975
   83ad0:	0008399f 	.word	0x0008399f
   83ad4:	000839c9 	.word	0x000839c9
   83ad8:	000839f3 	.word	0x000839f3
   83adc:	00083a1d 	.word	0x00083a1d

00083ae0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83ae0:	b480      	push	{r7}
   83ae2:	b085      	sub	sp, #20
   83ae4:	af00      	add	r7, sp, #0
   83ae6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83ae8:	491c      	ldr	r1, [pc, #112]	; (83b5c <pmc_switch_mck_to_pllack+0x7c>)
   83aea:	4b1c      	ldr	r3, [pc, #112]	; (83b5c <pmc_switch_mck_to_pllack+0x7c>)
   83aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83aee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83af2:	687b      	ldr	r3, [r7, #4]
   83af4:	4313      	orrs	r3, r2
   83af6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83af8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83afc:	60fb      	str	r3, [r7, #12]
   83afe:	e007      	b.n	83b10 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83b00:	68fb      	ldr	r3, [r7, #12]
   83b02:	2b00      	cmp	r3, #0
   83b04:	d101      	bne.n	83b0a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83b06:	2301      	movs	r3, #1
   83b08:	e023      	b.n	83b52 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83b0a:	68fb      	ldr	r3, [r7, #12]
   83b0c:	3b01      	subs	r3, #1
   83b0e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b10:	4b12      	ldr	r3, [pc, #72]	; (83b5c <pmc_switch_mck_to_pllack+0x7c>)
   83b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83b14:	f003 0308 	and.w	r3, r3, #8
   83b18:	2b00      	cmp	r3, #0
   83b1a:	d0f1      	beq.n	83b00 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83b1c:	4a0f      	ldr	r2, [pc, #60]	; (83b5c <pmc_switch_mck_to_pllack+0x7c>)
   83b1e:	4b0f      	ldr	r3, [pc, #60]	; (83b5c <pmc_switch_mck_to_pllack+0x7c>)
   83b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b22:	f023 0303 	bic.w	r3, r3, #3
   83b26:	f043 0302 	orr.w	r3, r3, #2
   83b2a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83b30:	60fb      	str	r3, [r7, #12]
   83b32:	e007      	b.n	83b44 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83b34:	68fb      	ldr	r3, [r7, #12]
   83b36:	2b00      	cmp	r3, #0
   83b38:	d101      	bne.n	83b3e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   83b3a:	2301      	movs	r3, #1
   83b3c:	e009      	b.n	83b52 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83b3e:	68fb      	ldr	r3, [r7, #12]
   83b40:	3b01      	subs	r3, #1
   83b42:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b44:	4b05      	ldr	r3, [pc, #20]	; (83b5c <pmc_switch_mck_to_pllack+0x7c>)
   83b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83b48:	f003 0308 	and.w	r3, r3, #8
   83b4c:	2b00      	cmp	r3, #0
   83b4e:	d0f1      	beq.n	83b34 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   83b50:	2300      	movs	r3, #0
}
   83b52:	4618      	mov	r0, r3
   83b54:	3714      	adds	r7, #20
   83b56:	46bd      	mov	sp, r7
   83b58:	bc80      	pop	{r7}
   83b5a:	4770      	bx	lr
   83b5c:	400e0600 	.word	0x400e0600

00083b60 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   83b60:	b480      	push	{r7}
   83b62:	b083      	sub	sp, #12
   83b64:	af00      	add	r7, sp, #0
   83b66:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83b68:	687b      	ldr	r3, [r7, #4]
   83b6a:	2b01      	cmp	r3, #1
   83b6c:	d107      	bne.n	83b7e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   83b6e:	4a08      	ldr	r2, [pc, #32]	; (83b90 <pmc_switch_sclk_to_32kxtal+0x30>)
   83b70:	4b07      	ldr	r3, [pc, #28]	; (83b90 <pmc_switch_sclk_to_32kxtal+0x30>)
   83b72:	689b      	ldr	r3, [r3, #8]
   83b74:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83b78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83b7c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   83b7e:	4b04      	ldr	r3, [pc, #16]	; (83b90 <pmc_switch_sclk_to_32kxtal+0x30>)
   83b80:	4a04      	ldr	r2, [pc, #16]	; (83b94 <pmc_switch_sclk_to_32kxtal+0x34>)
   83b82:	601a      	str	r2, [r3, #0]
}
   83b84:	bf00      	nop
   83b86:	370c      	adds	r7, #12
   83b88:	46bd      	mov	sp, r7
   83b8a:	bc80      	pop	{r7}
   83b8c:	4770      	bx	lr
   83b8e:	bf00      	nop
   83b90:	400e1a10 	.word	0x400e1a10
   83b94:	a5000008 	.word	0xa5000008

00083b98 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83b98:	b480      	push	{r7}
   83b9a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83b9c:	4b09      	ldr	r3, [pc, #36]	; (83bc4 <pmc_osc_is_ready_32kxtal+0x2c>)
   83b9e:	695b      	ldr	r3, [r3, #20]
   83ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83ba4:	2b00      	cmp	r3, #0
   83ba6:	d007      	beq.n	83bb8 <pmc_osc_is_ready_32kxtal+0x20>
   83ba8:	4b07      	ldr	r3, [pc, #28]	; (83bc8 <pmc_osc_is_ready_32kxtal+0x30>)
   83baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83bb0:	2b00      	cmp	r3, #0
   83bb2:	d001      	beq.n	83bb8 <pmc_osc_is_ready_32kxtal+0x20>
   83bb4:	2301      	movs	r3, #1
   83bb6:	e000      	b.n	83bba <pmc_osc_is_ready_32kxtal+0x22>
   83bb8:	2300      	movs	r3, #0
}
   83bba:	4618      	mov	r0, r3
   83bbc:	46bd      	mov	sp, r7
   83bbe:	bc80      	pop	{r7}
   83bc0:	4770      	bx	lr
   83bc2:	bf00      	nop
   83bc4:	400e1a10 	.word	0x400e1a10
   83bc8:	400e0600 	.word	0x400e0600

00083bcc <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   83bcc:	b480      	push	{r7}
   83bce:	b083      	sub	sp, #12
   83bd0:	af00      	add	r7, sp, #0
   83bd2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   83bd4:	4a18      	ldr	r2, [pc, #96]	; (83c38 <pmc_switch_mainck_to_fastrc+0x6c>)
   83bd6:	4b18      	ldr	r3, [pc, #96]	; (83c38 <pmc_switch_mainck_to_fastrc+0x6c>)
   83bd8:	6a1b      	ldr	r3, [r3, #32]
   83bda:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83bde:	f043 0308 	orr.w	r3, r3, #8
   83be2:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83be4:	bf00      	nop
   83be6:	4b14      	ldr	r3, [pc, #80]	; (83c38 <pmc_switch_mainck_to_fastrc+0x6c>)
   83be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83bee:	2b00      	cmp	r3, #0
   83bf0:	d0f9      	beq.n	83be6 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83bf2:	4911      	ldr	r1, [pc, #68]	; (83c38 <pmc_switch_mainck_to_fastrc+0x6c>)
   83bf4:	4b10      	ldr	r3, [pc, #64]	; (83c38 <pmc_switch_mainck_to_fastrc+0x6c>)
   83bf6:	6a1b      	ldr	r3, [r3, #32]
   83bf8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   83c00:	687a      	ldr	r2, [r7, #4]
   83c02:	4313      	orrs	r3, r2
   83c04:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83c08:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83c0a:	bf00      	nop
   83c0c:	4b0a      	ldr	r3, [pc, #40]	; (83c38 <pmc_switch_mainck_to_fastrc+0x6c>)
   83c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83c14:	2b00      	cmp	r3, #0
   83c16:	d0f9      	beq.n	83c0c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   83c18:	4a07      	ldr	r2, [pc, #28]	; (83c38 <pmc_switch_mainck_to_fastrc+0x6c>)
   83c1a:	4b07      	ldr	r3, [pc, #28]	; (83c38 <pmc_switch_mainck_to_fastrc+0x6c>)
   83c1c:	6a1b      	ldr	r3, [r3, #32]
   83c1e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   83c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83c26:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83c2a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   83c2c:	bf00      	nop
   83c2e:	370c      	adds	r7, #12
   83c30:	46bd      	mov	sp, r7
   83c32:	bc80      	pop	{r7}
   83c34:	4770      	bx	lr
   83c36:	bf00      	nop
   83c38:	400e0600 	.word	0x400e0600

00083c3c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   83c3c:	b480      	push	{r7}
   83c3e:	b083      	sub	sp, #12
   83c40:	af00      	add	r7, sp, #0
   83c42:	6078      	str	r0, [r7, #4]
   83c44:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83c46:	687b      	ldr	r3, [r7, #4]
   83c48:	2b00      	cmp	r3, #0
   83c4a:	d008      	beq.n	83c5e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83c4c:	4916      	ldr	r1, [pc, #88]	; (83ca8 <pmc_switch_mainck_to_xtal+0x6c>)
   83c4e:	4b16      	ldr	r3, [pc, #88]	; (83ca8 <pmc_switch_mainck_to_xtal+0x6c>)
   83c50:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83c52:	4a16      	ldr	r2, [pc, #88]	; (83cac <pmc_switch_mainck_to_xtal+0x70>)
   83c54:	401a      	ands	r2, r3
   83c56:	4b16      	ldr	r3, [pc, #88]	; (83cb0 <pmc_switch_mainck_to_xtal+0x74>)
   83c58:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83c5a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   83c5c:	e01e      	b.n	83c9c <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83c5e:	4912      	ldr	r1, [pc, #72]	; (83ca8 <pmc_switch_mainck_to_xtal+0x6c>)
   83c60:	4b11      	ldr	r3, [pc, #68]	; (83ca8 <pmc_switch_mainck_to_xtal+0x6c>)
   83c62:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83c64:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83c68:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83c6c:	683a      	ldr	r2, [r7, #0]
   83c6e:	0212      	lsls	r2, r2, #8
   83c70:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83c72:	4313      	orrs	r3, r2
   83c74:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83c78:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83c7c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83c7e:	bf00      	nop
   83c80:	4b09      	ldr	r3, [pc, #36]	; (83ca8 <pmc_switch_mainck_to_xtal+0x6c>)
   83c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c84:	f003 0301 	and.w	r3, r3, #1
   83c88:	2b00      	cmp	r3, #0
   83c8a:	d0f9      	beq.n	83c80 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83c8c:	4a06      	ldr	r2, [pc, #24]	; (83ca8 <pmc_switch_mainck_to_xtal+0x6c>)
   83c8e:	4b06      	ldr	r3, [pc, #24]	; (83ca8 <pmc_switch_mainck_to_xtal+0x6c>)
   83c90:	6a1b      	ldr	r3, [r3, #32]
   83c92:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83c9a:	6213      	str	r3, [r2, #32]
}
   83c9c:	bf00      	nop
   83c9e:	370c      	adds	r7, #12
   83ca0:	46bd      	mov	sp, r7
   83ca2:	bc80      	pop	{r7}
   83ca4:	4770      	bx	lr
   83ca6:	bf00      	nop
   83ca8:	400e0600 	.word	0x400e0600
   83cac:	fec8fffc 	.word	0xfec8fffc
   83cb0:	01370002 	.word	0x01370002

00083cb4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83cb4:	b480      	push	{r7}
   83cb6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83cb8:	4b03      	ldr	r3, [pc, #12]	; (83cc8 <pmc_osc_is_ready_mainck+0x14>)
   83cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83cc0:	4618      	mov	r0, r3
   83cc2:	46bd      	mov	sp, r7
   83cc4:	bc80      	pop	{r7}
   83cc6:	4770      	bx	lr
   83cc8:	400e0600 	.word	0x400e0600

00083ccc <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83ccc:	b480      	push	{r7}
   83cce:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83cd0:	4b03      	ldr	r3, [pc, #12]	; (83ce0 <pmc_disable_pllack+0x14>)
   83cd2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83cd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83cd8:	bf00      	nop
   83cda:	46bd      	mov	sp, r7
   83cdc:	bc80      	pop	{r7}
   83cde:	4770      	bx	lr
   83ce0:	400e0600 	.word	0x400e0600

00083ce4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83ce4:	b480      	push	{r7}
   83ce6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83ce8:	4b03      	ldr	r3, [pc, #12]	; (83cf8 <pmc_is_locked_pllack+0x14>)
   83cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83cec:	f003 0302 	and.w	r3, r3, #2
}
   83cf0:	4618      	mov	r0, r3
   83cf2:	46bd      	mov	sp, r7
   83cf4:	bc80      	pop	{r7}
   83cf6:	4770      	bx	lr
   83cf8:	400e0600 	.word	0x400e0600

00083cfc <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83cfc:	b480      	push	{r7}
   83cfe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83d00:	4b03      	ldr	r3, [pc, #12]	; (83d10 <pmc_is_locked_upll+0x14>)
   83d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83d08:	4618      	mov	r0, r3
   83d0a:	46bd      	mov	sp, r7
   83d0c:	bc80      	pop	{r7}
   83d0e:	4770      	bx	lr
   83d10:	400e0600 	.word	0x400e0600

00083d14 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83d14:	b480      	push	{r7}
   83d16:	b083      	sub	sp, #12
   83d18:	af00      	add	r7, sp, #0
   83d1a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83d1c:	687b      	ldr	r3, [r7, #4]
   83d1e:	2b2c      	cmp	r3, #44	; 0x2c
   83d20:	d901      	bls.n	83d26 <pmc_enable_periph_clk+0x12>
		return 1;
   83d22:	2301      	movs	r3, #1
   83d24:	e02f      	b.n	83d86 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   83d26:	687b      	ldr	r3, [r7, #4]
   83d28:	2b1f      	cmp	r3, #31
   83d2a:	d813      	bhi.n	83d54 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83d2c:	4b18      	ldr	r3, [pc, #96]	; (83d90 <pmc_enable_periph_clk+0x7c>)
   83d2e:	699a      	ldr	r2, [r3, #24]
   83d30:	2101      	movs	r1, #1
   83d32:	687b      	ldr	r3, [r7, #4]
   83d34:	fa01 f303 	lsl.w	r3, r1, r3
   83d38:	401a      	ands	r2, r3
   83d3a:	2101      	movs	r1, #1
   83d3c:	687b      	ldr	r3, [r7, #4]
   83d3e:	fa01 f303 	lsl.w	r3, r1, r3
   83d42:	429a      	cmp	r2, r3
   83d44:	d01e      	beq.n	83d84 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   83d46:	4a12      	ldr	r2, [pc, #72]	; (83d90 <pmc_enable_periph_clk+0x7c>)
   83d48:	2101      	movs	r1, #1
   83d4a:	687b      	ldr	r3, [r7, #4]
   83d4c:	fa01 f303 	lsl.w	r3, r1, r3
   83d50:	6113      	str	r3, [r2, #16]
   83d52:	e017      	b.n	83d84 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   83d54:	687b      	ldr	r3, [r7, #4]
   83d56:	3b20      	subs	r3, #32
   83d58:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83d5a:	4b0d      	ldr	r3, [pc, #52]	; (83d90 <pmc_enable_periph_clk+0x7c>)
   83d5c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83d60:	2101      	movs	r1, #1
   83d62:	687b      	ldr	r3, [r7, #4]
   83d64:	fa01 f303 	lsl.w	r3, r1, r3
   83d68:	401a      	ands	r2, r3
   83d6a:	2101      	movs	r1, #1
   83d6c:	687b      	ldr	r3, [r7, #4]
   83d6e:	fa01 f303 	lsl.w	r3, r1, r3
   83d72:	429a      	cmp	r2, r3
   83d74:	d006      	beq.n	83d84 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   83d76:	4a06      	ldr	r2, [pc, #24]	; (83d90 <pmc_enable_periph_clk+0x7c>)
   83d78:	2101      	movs	r1, #1
   83d7a:	687b      	ldr	r3, [r7, #4]
   83d7c:	fa01 f303 	lsl.w	r3, r1, r3
   83d80:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   83d84:	2300      	movs	r3, #0
}
   83d86:	4618      	mov	r0, r3
   83d88:	370c      	adds	r7, #12
   83d8a:	46bd      	mov	sp, r7
   83d8c:	bc80      	pop	{r7}
   83d8e:	4770      	bx	lr
   83d90:	400e0600 	.word	0x400e0600

00083d94 <osc_get_rate>:
{
   83d94:	b480      	push	{r7}
   83d96:	b083      	sub	sp, #12
   83d98:	af00      	add	r7, sp, #0
   83d9a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83d9c:	687b      	ldr	r3, [r7, #4]
   83d9e:	2b07      	cmp	r3, #7
   83da0:	d825      	bhi.n	83dee <osc_get_rate+0x5a>
   83da2:	a201      	add	r2, pc, #4	; (adr r2, 83da8 <osc_get_rate+0x14>)
   83da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83da8:	00083dc9 	.word	0x00083dc9
   83dac:	00083dcf 	.word	0x00083dcf
   83db0:	00083dd5 	.word	0x00083dd5
   83db4:	00083ddb 	.word	0x00083ddb
   83db8:	00083ddf 	.word	0x00083ddf
   83dbc:	00083de3 	.word	0x00083de3
   83dc0:	00083de7 	.word	0x00083de7
   83dc4:	00083deb 	.word	0x00083deb
		return OSC_SLCK_32K_RC_HZ;
   83dc8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83dcc:	e010      	b.n	83df0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   83dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83dd2:	e00d      	b.n	83df0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   83dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83dd8:	e00a      	b.n	83df0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   83dda:	4b08      	ldr	r3, [pc, #32]	; (83dfc <osc_get_rate+0x68>)
   83ddc:	e008      	b.n	83df0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   83dde:	4b08      	ldr	r3, [pc, #32]	; (83e00 <osc_get_rate+0x6c>)
   83de0:	e006      	b.n	83df0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   83de2:	4b08      	ldr	r3, [pc, #32]	; (83e04 <osc_get_rate+0x70>)
   83de4:	e004      	b.n	83df0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   83de6:	4b07      	ldr	r3, [pc, #28]	; (83e04 <osc_get_rate+0x70>)
   83de8:	e002      	b.n	83df0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   83dea:	4b06      	ldr	r3, [pc, #24]	; (83e04 <osc_get_rate+0x70>)
   83dec:	e000      	b.n	83df0 <osc_get_rate+0x5c>
	return 0;
   83dee:	2300      	movs	r3, #0
}
   83df0:	4618      	mov	r0, r3
   83df2:	370c      	adds	r7, #12
   83df4:	46bd      	mov	sp, r7
   83df6:	bc80      	pop	{r7}
   83df8:	4770      	bx	lr
   83dfa:	bf00      	nop
   83dfc:	003d0900 	.word	0x003d0900
   83e00:	007a1200 	.word	0x007a1200
   83e04:	00b71b00 	.word	0x00b71b00

00083e08 <sysclk_get_main_hz>:
{
   83e08:	b580      	push	{r7, lr}
   83e0a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83e0c:	2006      	movs	r0, #6
   83e0e:	4b04      	ldr	r3, [pc, #16]	; (83e20 <sysclk_get_main_hz+0x18>)
   83e10:	4798      	blx	r3
   83e12:	4602      	mov	r2, r0
   83e14:	4613      	mov	r3, r2
   83e16:	00db      	lsls	r3, r3, #3
   83e18:	1a9b      	subs	r3, r3, r2
   83e1a:	005b      	lsls	r3, r3, #1
}
   83e1c:	4618      	mov	r0, r3
   83e1e:	bd80      	pop	{r7, pc}
   83e20:	00083d95 	.word	0x00083d95

00083e24 <sysclk_get_cpu_hz>:
{
   83e24:	b580      	push	{r7, lr}
   83e26:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83e28:	4b02      	ldr	r3, [pc, #8]	; (83e34 <sysclk_get_cpu_hz+0x10>)
   83e2a:	4798      	blx	r3
   83e2c:	4603      	mov	r3, r0
   83e2e:	085b      	lsrs	r3, r3, #1
}
   83e30:	4618      	mov	r0, r3
   83e32:	bd80      	pop	{r7, pc}
   83e34:	00083e09 	.word	0x00083e09

00083e38 <sysclk_enable_peripheral_clock>:
{
   83e38:	b580      	push	{r7, lr}
   83e3a:	b082      	sub	sp, #8
   83e3c:	af00      	add	r7, sp, #0
   83e3e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   83e40:	6878      	ldr	r0, [r7, #4]
   83e42:	4b03      	ldr	r3, [pc, #12]	; (83e50 <sysclk_enable_peripheral_clock+0x18>)
   83e44:	4798      	blx	r3
}
   83e46:	bf00      	nop
   83e48:	3708      	adds	r7, #8
   83e4a:	46bd      	mov	sp, r7
   83e4c:	bd80      	pop	{r7, pc}
   83e4e:	bf00      	nop
   83e50:	00083d15 	.word	0x00083d15

00083e54 <ioport_init>:
{
   83e54:	b580      	push	{r7, lr}
   83e56:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   83e58:	200b      	movs	r0, #11
   83e5a:	4b06      	ldr	r3, [pc, #24]	; (83e74 <ioport_init+0x20>)
   83e5c:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   83e5e:	200c      	movs	r0, #12
   83e60:	4b04      	ldr	r3, [pc, #16]	; (83e74 <ioport_init+0x20>)
   83e62:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   83e64:	200d      	movs	r0, #13
   83e66:	4b03      	ldr	r3, [pc, #12]	; (83e74 <ioport_init+0x20>)
   83e68:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   83e6a:	200e      	movs	r0, #14
   83e6c:	4b01      	ldr	r3, [pc, #4]	; (83e74 <ioport_init+0x20>)
   83e6e:	4798      	blx	r3
}
   83e70:	bf00      	nop
   83e72:	bd80      	pop	{r7, pc}
   83e74:	00083e39 	.word	0x00083e39

00083e78 <ioport_disable_pin>:
{
   83e78:	b480      	push	{r7}
   83e7a:	b089      	sub	sp, #36	; 0x24
   83e7c:	af00      	add	r7, sp, #0
   83e7e:	6078      	str	r0, [r7, #4]
   83e80:	687b      	ldr	r3, [r7, #4]
   83e82:	61fb      	str	r3, [r7, #28]
   83e84:	69fb      	ldr	r3, [r7, #28]
   83e86:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83e88:	69bb      	ldr	r3, [r7, #24]
   83e8a:	095a      	lsrs	r2, r3, #5
   83e8c:	69fb      	ldr	r3, [r7, #28]
   83e8e:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   83e90:	697b      	ldr	r3, [r7, #20]
   83e92:	f003 031f 	and.w	r3, r3, #31
   83e96:	2101      	movs	r1, #1
   83e98:	fa01 f303 	lsl.w	r3, r1, r3
   83e9c:	613a      	str	r2, [r7, #16]
   83e9e:	60fb      	str	r3, [r7, #12]
   83ea0:	693b      	ldr	r3, [r7, #16]
   83ea2:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83ea4:	68bb      	ldr	r3, [r7, #8]
   83ea6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83eaa:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83eae:	025b      	lsls	r3, r3, #9
   83eb0:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   83eb2:	68fb      	ldr	r3, [r7, #12]
   83eb4:	6053      	str	r3, [r2, #4]
}
   83eb6:	bf00      	nop
   83eb8:	3724      	adds	r7, #36	; 0x24
   83eba:	46bd      	mov	sp, r7
   83ebc:	bc80      	pop	{r7}
   83ebe:	4770      	bx	lr

00083ec0 <ioport_set_pin_mode>:
{
   83ec0:	b480      	push	{r7}
   83ec2:	b08d      	sub	sp, #52	; 0x34
   83ec4:	af00      	add	r7, sp, #0
   83ec6:	6078      	str	r0, [r7, #4]
   83ec8:	6039      	str	r1, [r7, #0]
   83eca:	687b      	ldr	r3, [r7, #4]
   83ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   83ece:	683b      	ldr	r3, [r7, #0]
   83ed0:	62bb      	str	r3, [r7, #40]	; 0x28
   83ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83ed4:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   83ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83ed8:	095a      	lsrs	r2, r3, #5
   83eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83edc:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   83ede:	6a3b      	ldr	r3, [r7, #32]
   83ee0:	f003 031f 	and.w	r3, r3, #31
   83ee4:	2101      	movs	r1, #1
   83ee6:	fa01 f303 	lsl.w	r3, r1, r3
   83eea:	61fa      	str	r2, [r7, #28]
   83eec:	61bb      	str	r3, [r7, #24]
   83eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   83ef0:	617b      	str	r3, [r7, #20]
   83ef2:	69fb      	ldr	r3, [r7, #28]
   83ef4:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83ef6:	693b      	ldr	r3, [r7, #16]
   83ef8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83efc:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83f00:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   83f02:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   83f04:	697b      	ldr	r3, [r7, #20]
   83f06:	f003 0308 	and.w	r3, r3, #8
   83f0a:	2b00      	cmp	r3, #0
   83f0c:	d003      	beq.n	83f16 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   83f0e:	68fb      	ldr	r3, [r7, #12]
   83f10:	69ba      	ldr	r2, [r7, #24]
   83f12:	665a      	str	r2, [r3, #100]	; 0x64
   83f14:	e002      	b.n	83f1c <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   83f16:	68fb      	ldr	r3, [r7, #12]
   83f18:	69ba      	ldr	r2, [r7, #24]
   83f1a:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   83f1c:	697b      	ldr	r3, [r7, #20]
   83f1e:	f003 0320 	and.w	r3, r3, #32
   83f22:	2b00      	cmp	r3, #0
   83f24:	d003      	beq.n	83f2e <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   83f26:	68fb      	ldr	r3, [r7, #12]
   83f28:	69ba      	ldr	r2, [r7, #24]
   83f2a:	651a      	str	r2, [r3, #80]	; 0x50
   83f2c:	e002      	b.n	83f34 <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   83f2e:	68fb      	ldr	r3, [r7, #12]
   83f30:	69ba      	ldr	r2, [r7, #24]
   83f32:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   83f34:	697b      	ldr	r3, [r7, #20]
   83f36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   83f3a:	2b00      	cmp	r3, #0
   83f3c:	d003      	beq.n	83f46 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   83f3e:	68fb      	ldr	r3, [r7, #12]
   83f40:	69ba      	ldr	r2, [r7, #24]
   83f42:	621a      	str	r2, [r3, #32]
   83f44:	e002      	b.n	83f4c <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   83f46:	68fb      	ldr	r3, [r7, #12]
   83f48:	69ba      	ldr	r2, [r7, #24]
   83f4a:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   83f4c:	697b      	ldr	r3, [r7, #20]
   83f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83f52:	2b00      	cmp	r3, #0
   83f54:	d004      	beq.n	83f60 <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   83f56:	68fb      	ldr	r3, [r7, #12]
   83f58:	69ba      	ldr	r2, [r7, #24]
   83f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   83f5e:	e003      	b.n	83f68 <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   83f60:	68fb      	ldr	r3, [r7, #12]
   83f62:	69ba      	ldr	r2, [r7, #24]
   83f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   83f68:	697b      	ldr	r3, [r7, #20]
   83f6a:	f003 0301 	and.w	r3, r3, #1
   83f6e:	2b00      	cmp	r3, #0
   83f70:	d006      	beq.n	83f80 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   83f72:	68fb      	ldr	r3, [r7, #12]
   83f74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83f76:	69bb      	ldr	r3, [r7, #24]
   83f78:	431a      	orrs	r2, r3
   83f7a:	68fb      	ldr	r3, [r7, #12]
   83f7c:	671a      	str	r2, [r3, #112]	; 0x70
}
   83f7e:	e006      	b.n	83f8e <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   83f80:	68fb      	ldr	r3, [r7, #12]
   83f82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83f84:	69bb      	ldr	r3, [r7, #24]
   83f86:	43db      	mvns	r3, r3
   83f88:	401a      	ands	r2, r3
   83f8a:	68fb      	ldr	r3, [r7, #12]
   83f8c:	671a      	str	r2, [r3, #112]	; 0x70
   83f8e:	bf00      	nop
   83f90:	3734      	adds	r7, #52	; 0x34
   83f92:	46bd      	mov	sp, r7
   83f94:	bc80      	pop	{r7}
   83f96:	4770      	bx	lr

00083f98 <ioport_set_pin_dir>:
{
   83f98:	b480      	push	{r7}
   83f9a:	b08d      	sub	sp, #52	; 0x34
   83f9c:	af00      	add	r7, sp, #0
   83f9e:	6078      	str	r0, [r7, #4]
   83fa0:	460b      	mov	r3, r1
   83fa2:	70fb      	strb	r3, [r7, #3]
   83fa4:	687b      	ldr	r3, [r7, #4]
   83fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   83fa8:	78fb      	ldrb	r3, [r7, #3]
   83faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   83fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83fb0:	627b      	str	r3, [r7, #36]	; 0x24
   83fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83fb4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   83fb6:	6a3b      	ldr	r3, [r7, #32]
   83fb8:	095b      	lsrs	r3, r3, #5
   83fba:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83fbc:	69fb      	ldr	r3, [r7, #28]
   83fbe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83fc2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83fc6:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83fc8:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   83fca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83fce:	2b01      	cmp	r3, #1
   83fd0:	d109      	bne.n	83fe6 <ioport_set_pin_dir+0x4e>
   83fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83fd4:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   83fd6:	697b      	ldr	r3, [r7, #20]
   83fd8:	f003 031f 	and.w	r3, r3, #31
   83fdc:	2201      	movs	r2, #1
   83fde:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83fe0:	69bb      	ldr	r3, [r7, #24]
   83fe2:	611a      	str	r2, [r3, #16]
   83fe4:	e00c      	b.n	84000 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   83fe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83fea:	2b00      	cmp	r3, #0
   83fec:	d108      	bne.n	84000 <ioport_set_pin_dir+0x68>
   83fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83ff0:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   83ff2:	693b      	ldr	r3, [r7, #16]
   83ff4:	f003 031f 	and.w	r3, r3, #31
   83ff8:	2201      	movs	r2, #1
   83ffa:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   83ffc:	69bb      	ldr	r3, [r7, #24]
   83ffe:	615a      	str	r2, [r3, #20]
   84000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   84002:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   84004:	68fb      	ldr	r3, [r7, #12]
   84006:	f003 031f 	and.w	r3, r3, #31
   8400a:	2201      	movs	r2, #1
   8400c:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8400e:	69bb      	ldr	r3, [r7, #24]
   84010:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   84014:	bf00      	nop
   84016:	3734      	adds	r7, #52	; 0x34
   84018:	46bd      	mov	sp, r7
   8401a:	bc80      	pop	{r7}
   8401c:	4770      	bx	lr

0008401e <ioport_set_pin_level>:
{
   8401e:	b480      	push	{r7}
   84020:	b08b      	sub	sp, #44	; 0x2c
   84022:	af00      	add	r7, sp, #0
   84024:	6078      	str	r0, [r7, #4]
   84026:	460b      	mov	r3, r1
   84028:	70fb      	strb	r3, [r7, #3]
   8402a:	687b      	ldr	r3, [r7, #4]
   8402c:	627b      	str	r3, [r7, #36]	; 0x24
   8402e:	78fb      	ldrb	r3, [r7, #3]
   84030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   84034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84036:	61fb      	str	r3, [r7, #28]
   84038:	69fb      	ldr	r3, [r7, #28]
   8403a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   8403c:	69bb      	ldr	r3, [r7, #24]
   8403e:	095b      	lsrs	r3, r3, #5
   84040:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   84042:	697b      	ldr	r3, [r7, #20]
   84044:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84048:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8404c:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   8404e:	613b      	str	r3, [r7, #16]
	if (level) {
   84050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   84054:	2b00      	cmp	r3, #0
   84056:	d009      	beq.n	8406c <ioport_set_pin_level+0x4e>
   84058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8405a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8405c:	68fb      	ldr	r3, [r7, #12]
   8405e:	f003 031f 	and.w	r3, r3, #31
   84062:	2201      	movs	r2, #1
   84064:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   84066:	693b      	ldr	r3, [r7, #16]
   84068:	631a      	str	r2, [r3, #48]	; 0x30
}
   8406a:	e008      	b.n	8407e <ioport_set_pin_level+0x60>
   8406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8406e:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   84070:	68bb      	ldr	r3, [r7, #8]
   84072:	f003 031f 	and.w	r3, r3, #31
   84076:	2201      	movs	r2, #1
   84078:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8407a:	693b      	ldr	r3, [r7, #16]
   8407c:	635a      	str	r2, [r3, #52]	; 0x34
   8407e:	bf00      	nop
   84080:	372c      	adds	r7, #44	; 0x2c
   84082:	46bd      	mov	sp, r7
   84084:	bc80      	pop	{r7}
   84086:	4770      	bx	lr

00084088 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   84088:	b580      	push	{r7, lr}
   8408a:	b084      	sub	sp, #16
   8408c:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8408e:	4ba6      	ldr	r3, [pc, #664]	; (84328 <board_init+0x2a0>)
   84090:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84094:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   84096:	4ba5      	ldr	r3, [pc, #660]	; (8432c <board_init+0x2a4>)
   84098:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   8409a:	2101      	movs	r1, #1
   8409c:	206a      	movs	r0, #106	; 0x6a
   8409e:	4ba4      	ldr	r3, [pc, #656]	; (84330 <board_init+0x2a8>)
   840a0:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   840a2:	2100      	movs	r1, #0
   840a4:	206a      	movs	r0, #106	; 0x6a
   840a6:	4ba3      	ldr	r3, [pc, #652]	; (84334 <board_init+0x2ac>)
   840a8:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   840aa:	2101      	movs	r1, #1
   840ac:	2067      	movs	r0, #103	; 0x67
   840ae:	4ba0      	ldr	r3, [pc, #640]	; (84330 <board_init+0x2a8>)
   840b0:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   840b2:	2100      	movs	r1, #0
   840b4:	2067      	movs	r0, #103	; 0x67
   840b6:	4b9f      	ldr	r3, [pc, #636]	; (84334 <board_init+0x2ac>)
   840b8:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   840ba:	2101      	movs	r1, #1
   840bc:	2068      	movs	r0, #104	; 0x68
   840be:	4b9c      	ldr	r3, [pc, #624]	; (84330 <board_init+0x2a8>)
   840c0:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   840c2:	2100      	movs	r1, #0
   840c4:	2068      	movs	r0, #104	; 0x68
   840c6:	4b9b      	ldr	r3, [pc, #620]	; (84334 <board_init+0x2ac>)
   840c8:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   840ca:	2101      	movs	r1, #1
   840cc:	2069      	movs	r0, #105	; 0x69
   840ce:	4b98      	ldr	r3, [pc, #608]	; (84330 <board_init+0x2a8>)
   840d0:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   840d2:	2100      	movs	r1, #0
   840d4:	2069      	movs	r0, #105	; 0x69
   840d6:	4b97      	ldr	r3, [pc, #604]	; (84334 <board_init+0x2ac>)
   840d8:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   840da:	2101      	movs	r1, #1
   840dc:	2066      	movs	r0, #102	; 0x66
   840de:	4b94      	ldr	r3, [pc, #592]	; (84330 <board_init+0x2a8>)
   840e0:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   840e2:	2100      	movs	r1, #0
   840e4:	2066      	movs	r0, #102	; 0x66
   840e6:	4b93      	ldr	r3, [pc, #588]	; (84334 <board_init+0x2ac>)
   840e8:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   840ea:	2100      	movs	r1, #0
   840ec:	2060      	movs	r0, #96	; 0x60
   840ee:	4b90      	ldr	r3, [pc, #576]	; (84330 <board_init+0x2a8>)
   840f0:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   840f2:	2188      	movs	r1, #136	; 0x88
   840f4:	2060      	movs	r0, #96	; 0x60
   840f6:	4b90      	ldr	r3, [pc, #576]	; (84338 <board_init+0x2b0>)
   840f8:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   840fa:	2100      	movs	r1, #0
   840fc:	2061      	movs	r0, #97	; 0x61
   840fe:	4b8c      	ldr	r3, [pc, #560]	; (84330 <board_init+0x2a8>)
   84100:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   84102:	2188      	movs	r1, #136	; 0x88
   84104:	2061      	movs	r0, #97	; 0x61
   84106:	4b8c      	ldr	r3, [pc, #560]	; (84338 <board_init+0x2b0>)
   84108:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   8410a:	2100      	movs	r1, #0
   8410c:	2062      	movs	r0, #98	; 0x62
   8410e:	4b88      	ldr	r3, [pc, #544]	; (84330 <board_init+0x2a8>)
   84110:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   84112:	2188      	movs	r1, #136	; 0x88
   84114:	2062      	movs	r0, #98	; 0x62
   84116:	4b88      	ldr	r3, [pc, #544]	; (84338 <board_init+0x2b0>)
   84118:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   8411a:	2100      	movs	r1, #0
   8411c:	2063      	movs	r0, #99	; 0x63
   8411e:	4b84      	ldr	r3, [pc, #528]	; (84330 <board_init+0x2a8>)
   84120:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   84122:	2188      	movs	r1, #136	; 0x88
   84124:	2063      	movs	r0, #99	; 0x63
   84126:	4b84      	ldr	r3, [pc, #528]	; (84338 <board_init+0x2b0>)
   84128:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   8412a:	2100      	movs	r1, #0
   8412c:	2064      	movs	r0, #100	; 0x64
   8412e:	4b80      	ldr	r3, [pc, #512]	; (84330 <board_init+0x2a8>)
   84130:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   84132:	2188      	movs	r1, #136	; 0x88
   84134:	2064      	movs	r0, #100	; 0x64
   84136:	4b80      	ldr	r3, [pc, #512]	; (84338 <board_init+0x2b0>)
   84138:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   8413a:	2100      	movs	r1, #0
   8413c:	2065      	movs	r0, #101	; 0x65
   8413e:	4b7c      	ldr	r3, [pc, #496]	; (84330 <board_init+0x2a8>)
   84140:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   84142:	2188      	movs	r1, #136	; 0x88
   84144:	2065      	movs	r0, #101	; 0x65
   84146:	4b7c      	ldr	r3, [pc, #496]	; (84338 <board_init+0x2b0>)
   84148:	4798      	blx	r3
  
    /* Configure Motor pins */
    ioport_set_pin_mode(MOTOR_LEFT_L, IOPORT_MODE_MUX_B);
   8414a:	2101      	movs	r1, #1
   8414c:	2042      	movs	r0, #66	; 0x42
   8414e:	4b7a      	ldr	r3, [pc, #488]	; (84338 <board_init+0x2b0>)
   84150:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_L);
   84152:	2042      	movs	r0, #66	; 0x42
   84154:	4b79      	ldr	r3, [pc, #484]	; (8433c <board_init+0x2b4>)
   84156:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_LEFT_H, IOPORT_MODE_MUX_B);
   84158:	2101      	movs	r1, #1
   8415a:	2043      	movs	r0, #67	; 0x43
   8415c:	4b76      	ldr	r3, [pc, #472]	; (84338 <board_init+0x2b0>)
   8415e:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_H);
   84160:	2043      	movs	r0, #67	; 0x43
   84162:	4b76      	ldr	r3, [pc, #472]	; (8433c <board_init+0x2b4>)
   84164:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_L, IOPORT_MODE_MUX_B);
   84166:	2101      	movs	r1, #1
   84168:	2044      	movs	r0, #68	; 0x44
   8416a:	4b73      	ldr	r3, [pc, #460]	; (84338 <board_init+0x2b0>)
   8416c:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_L);
   8416e:	2044      	movs	r0, #68	; 0x44
   84170:	4b72      	ldr	r3, [pc, #456]	; (8433c <board_init+0x2b4>)
   84172:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_H, IOPORT_MODE_MUX_B);
   84174:	2101      	movs	r1, #1
   84176:	2045      	movs	r0, #69	; 0x45
   84178:	4b6f      	ldr	r3, [pc, #444]	; (84338 <board_init+0x2b0>)
   8417a:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_H);
   8417c:	2045      	movs	r0, #69	; 0x45
   8417e:	4b6f      	ldr	r3, [pc, #444]	; (8433c <board_init+0x2b4>)
   84180:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_L, IOPORT_MODE_MUX_B);
   84182:	2101      	movs	r1, #1
   84184:	2046      	movs	r0, #70	; 0x46
   84186:	4b6c      	ldr	r3, [pc, #432]	; (84338 <board_init+0x2b0>)
   84188:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_L);
   8418a:	2046      	movs	r0, #70	; 0x46
   8418c:	4b6b      	ldr	r3, [pc, #428]	; (8433c <board_init+0x2b4>)
   8418e:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_H, IOPORT_MODE_MUX_B);
   84190:	2101      	movs	r1, #1
   84192:	2047      	movs	r0, #71	; 0x47
   84194:	4b68      	ldr	r3, [pc, #416]	; (84338 <board_init+0x2b0>)
   84196:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_H);
   84198:	2047      	movs	r0, #71	; 0x47
   8419a:	4b68      	ldr	r3, [pc, #416]	; (8433c <board_init+0x2b4>)
   8419c:	4798      	blx	r3

    /* Configure Encoder pins */
    ioport_set_pin_mode(ENC_CLK_PIN, IOPORT_MODE_MUX_B);
   8419e:	2101      	movs	r1, #1
   841a0:	2055      	movs	r0, #85	; 0x55
   841a2:	4b65      	ldr	r3, [pc, #404]	; (84338 <board_init+0x2b0>)
   841a4:	4798      	blx	r3
    ioport_disable_pin(ENC_CLK_PIN);
   841a6:	2055      	movs	r0, #85	; 0x55
   841a8:	4b64      	ldr	r3, [pc, #400]	; (8433c <board_init+0x2b4>)
   841aa:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LOAD, IOPORT_DIR_OUTPUT);
   841ac:	2101      	movs	r1, #1
   841ae:	2020      	movs	r0, #32
   841b0:	4b5f      	ldr	r3, [pc, #380]	; (84330 <board_init+0x2a8>)
   841b2:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   841b4:	2101      	movs	r1, #1
   841b6:	2020      	movs	r0, #32
   841b8:	4b5e      	ldr	r3, [pc, #376]	; (84334 <board_init+0x2ac>)
   841ba:	4798      	blx	r3

    ioport_set_pin_dir(ENC_LEFT_A, IOPORT_DIR_INPUT);
   841bc:	2100      	movs	r1, #0
   841be:	2058      	movs	r0, #88	; 0x58
   841c0:	4b5b      	ldr	r3, [pc, #364]	; (84330 <board_init+0x2a8>)
   841c2:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_B, IOPORT_DIR_INPUT);
   841c4:	2100      	movs	r1, #0
   841c6:	2059      	movs	r0, #89	; 0x59
   841c8:	4b59      	ldr	r3, [pc, #356]	; (84330 <board_init+0x2a8>)
   841ca:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_C, IOPORT_DIR_INPUT);
   841cc:	2100      	movs	r1, #0
   841ce:	205a      	movs	r0, #90	; 0x5a
   841d0:	4b57      	ldr	r3, [pc, #348]	; (84330 <board_init+0x2a8>)
   841d2:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_D, IOPORT_DIR_INPUT);
   841d4:	2100      	movs	r1, #0
   841d6:	205b      	movs	r0, #91	; 0x5b
   841d8:	4b55      	ldr	r3, [pc, #340]	; (84330 <board_init+0x2a8>)
   841da:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_E, IOPORT_DIR_INPUT);
   841dc:	2100      	movs	r1, #0
   841de:	205c      	movs	r0, #92	; 0x5c
   841e0:	4b53      	ldr	r3, [pc, #332]	; (84330 <board_init+0x2a8>)
   841e2:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_F, IOPORT_DIR_INPUT);
   841e4:	2100      	movs	r1, #0
   841e6:	205d      	movs	r0, #93	; 0x5d
   841e8:	4b51      	ldr	r3, [pc, #324]	; (84330 <board_init+0x2a8>)
   841ea:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_G, IOPORT_DIR_INPUT);
   841ec:	2100      	movs	r1, #0
   841ee:	205e      	movs	r0, #94	; 0x5e
   841f0:	4b4f      	ldr	r3, [pc, #316]	; (84330 <board_init+0x2a8>)
   841f2:	4798      	blx	r3
    
    ioport_set_pin_dir(ENC_RIGHT_A, IOPORT_DIR_INPUT);
   841f4:	2100      	movs	r1, #0
   841f6:	2050      	movs	r0, #80	; 0x50
   841f8:	4b4d      	ldr	r3, [pc, #308]	; (84330 <board_init+0x2a8>)
   841fa:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_B, IOPORT_DIR_INPUT);
   841fc:	2100      	movs	r1, #0
   841fe:	2051      	movs	r0, #81	; 0x51
   84200:	4b4b      	ldr	r3, [pc, #300]	; (84330 <board_init+0x2a8>)
   84202:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_C, IOPORT_DIR_INPUT);
   84204:	2100      	movs	r1, #0
   84206:	2052      	movs	r0, #82	; 0x52
   84208:	4b49      	ldr	r3, [pc, #292]	; (84330 <board_init+0x2a8>)
   8420a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_D, IOPORT_DIR_INPUT);
   8420c:	2100      	movs	r1, #0
   8420e:	2053      	movs	r0, #83	; 0x53
   84210:	4b47      	ldr	r3, [pc, #284]	; (84330 <board_init+0x2a8>)
   84212:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_E, IOPORT_DIR_INPUT);
   84214:	2100      	movs	r1, #0
   84216:	2054      	movs	r0, #84	; 0x54
   84218:	4b45      	ldr	r3, [pc, #276]	; (84330 <board_init+0x2a8>)
   8421a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_F, IOPORT_DIR_INPUT);
   8421c:	2100      	movs	r1, #0
   8421e:	2056      	movs	r0, #86	; 0x56
   84220:	4b43      	ldr	r3, [pc, #268]	; (84330 <board_init+0x2a8>)
   84222:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_G, IOPORT_DIR_INPUT);
   84224:	2100      	movs	r1, #0
   84226:	2057      	movs	r0, #87	; 0x57
   84228:	4b41      	ldr	r3, [pc, #260]	; (84330 <board_init+0x2a8>)
   8422a:	4798      	blx	r3
    
    ioport_set_pin_dir(ENC_REAR_A, IOPORT_DIR_INPUT);
   8422c:	2100      	movs	r1, #0
   8422e:	2041      	movs	r0, #65	; 0x41
   84230:	4b3f      	ldr	r3, [pc, #252]	; (84330 <board_init+0x2a8>)
   84232:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_B, IOPORT_DIR_INPUT);
   84234:	2100      	movs	r1, #0
   84236:	204a      	movs	r0, #74	; 0x4a
   84238:	4b3d      	ldr	r3, [pc, #244]	; (84330 <board_init+0x2a8>)
   8423a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_C, IOPORT_DIR_INPUT);
   8423c:	2100      	movs	r1, #0
   8423e:	204b      	movs	r0, #75	; 0x4b
   84240:	4b3b      	ldr	r3, [pc, #236]	; (84330 <board_init+0x2a8>)
   84242:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_D, IOPORT_DIR_INPUT);
   84244:	2100      	movs	r1, #0
   84246:	204c      	movs	r0, #76	; 0x4c
   84248:	4b39      	ldr	r3, [pc, #228]	; (84330 <board_init+0x2a8>)
   8424a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_E, IOPORT_DIR_INPUT);
   8424c:	2100      	movs	r1, #0
   8424e:	204d      	movs	r0, #77	; 0x4d
   84250:	4b37      	ldr	r3, [pc, #220]	; (84330 <board_init+0x2a8>)
   84252:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_F, IOPORT_DIR_INPUT);
   84254:	2100      	movs	r1, #0
   84256:	204e      	movs	r0, #78	; 0x4e
   84258:	4b35      	ldr	r3, [pc, #212]	; (84330 <board_init+0x2a8>)
   8425a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_G, IOPORT_DIR_INPUT);
   8425c:	2100      	movs	r1, #0
   8425e:	204f      	movs	r0, #79	; 0x4f
   84260:	4b33      	ldr	r3, [pc, #204]	; (84330 <board_init+0x2a8>)
   84262:	4798      	blx	r3
  
    /* Configure Raspberry Pi GPIO pins */
    ioport_set_pin_dir(RPI1, IOPORT_DIR_OUTPUT);
   84264:	2101      	movs	r1, #1
   84266:	2001      	movs	r0, #1
   84268:	4b31      	ldr	r3, [pc, #196]	; (84330 <board_init+0x2a8>)
   8426a:	4798      	blx	r3
    ioport_set_pin_level(RPI1, 1);
   8426c:	2101      	movs	r1, #1
   8426e:	2001      	movs	r0, #1
   84270:	4b30      	ldr	r3, [pc, #192]	; (84334 <board_init+0x2ac>)
   84272:	4798      	blx	r3
    ioport_set_pin_dir(RPI2, IOPORT_DIR_INPUT);
   84274:	2100      	movs	r1, #0
   84276:	2008      	movs	r0, #8
   84278:	4b2d      	ldr	r3, [pc, #180]	; (84330 <board_init+0x2a8>)
   8427a:	4798      	blx	r3
    ioport_set_pin_dir(RPI3, IOPORT_DIR_INPUT);
   8427c:	2100      	movs	r1, #0
   8427e:	2009      	movs	r0, #9
   84280:	4b2b      	ldr	r3, [pc, #172]	; (84330 <board_init+0x2a8>)
   84282:	4798      	blx	r3
    ioport_set_pin_dir(RPI4, IOPORT_DIR_INPUT);
   84284:	2100      	movs	r1, #0
   84286:	2007      	movs	r0, #7
   84288:	4b29      	ldr	r3, [pc, #164]	; (84330 <board_init+0x2a8>)
   8428a:	4798      	blx	r3
    ioport_set_pin_dir(RPI5, IOPORT_DIR_INPUT);
   8428c:	2100      	movs	r1, #0
   8428e:	2005      	movs	r0, #5
   84290:	4b27      	ldr	r3, [pc, #156]	; (84330 <board_init+0x2a8>)
   84292:	4798      	blx	r3
    ioport_set_pin_dir(RPI6, IOPORT_DIR_INPUT);
   84294:	2100      	movs	r1, #0
   84296:	2000      	movs	r0, #0
   84298:	4b25      	ldr	r3, [pc, #148]	; (84330 <board_init+0x2a8>)
   8429a:	4798      	blx	r3
  
    /* Configure I2C pins */
    ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   8429c:	2100      	movs	r1, #0
   8429e:	2011      	movs	r0, #17
   842a0:	4b25      	ldr	r3, [pc, #148]	; (84338 <board_init+0x2b0>)
   842a2:	4798      	blx	r3
    ioport_disable_pin(I2C0_DATA);
   842a4:	2011      	movs	r0, #17
   842a6:	4b25      	ldr	r3, [pc, #148]	; (8433c <board_init+0x2b4>)
   842a8:	4798      	blx	r3
    ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   842aa:	2100      	movs	r1, #0
   842ac:	2012      	movs	r0, #18
   842ae:	4b22      	ldr	r3, [pc, #136]	; (84338 <board_init+0x2b0>)
   842b0:	4798      	blx	r3
    ioport_disable_pin(I2C0_CLK);
   842b2:	2012      	movs	r0, #18
   842b4:	4b21      	ldr	r3, [pc, #132]	; (8433c <board_init+0x2b4>)
   842b6:	4798      	blx	r3
	
    /* Configure SPI0 pins */
    ioport_set_pin_mode(SPI0_MISO, IOPORT_MODE_MUX_A);
   842b8:	2100      	movs	r1, #0
   842ba:	2019      	movs	r0, #25
   842bc:	4b1e      	ldr	r3, [pc, #120]	; (84338 <board_init+0x2b0>)
   842be:	4798      	blx	r3
    ioport_disable_pin(SPI0_MISO);
   842c0:	2019      	movs	r0, #25
   842c2:	4b1e      	ldr	r3, [pc, #120]	; (8433c <board_init+0x2b4>)
   842c4:	4798      	blx	r3
    ioport_set_pin_mode(SPI0_MOSI, IOPORT_MODE_MUX_A);
   842c6:	2100      	movs	r1, #0
   842c8:	201a      	movs	r0, #26
   842ca:	4b1b      	ldr	r3, [pc, #108]	; (84338 <board_init+0x2b0>)
   842cc:	4798      	blx	r3
    ioport_disable_pin(SPI0_MOSI);
   842ce:	201a      	movs	r0, #26
   842d0:	4b1a      	ldr	r3, [pc, #104]	; (8433c <board_init+0x2b4>)
   842d2:	4798      	blx	r3
    ioport_set_pin_mode(SPI0_SPCK, IOPORT_MODE_MUX_A);
   842d4:	2100      	movs	r1, #0
   842d6:	201b      	movs	r0, #27
   842d8:	4b17      	ldr	r3, [pc, #92]	; (84338 <board_init+0x2b0>)
   842da:	4798      	blx	r3
    ioport_disable_pin(SPI0_SPCK);
   842dc:	201b      	movs	r0, #27
   842de:	4b17      	ldr	r3, [pc, #92]	; (8433c <board_init+0x2b4>)
   842e0:	4798      	blx	r3
    ioport_set_pin_mode(SPI0_NPCS0, IOPORT_MODE_MUX_A);
   842e2:	2100      	movs	r1, #0
   842e4:	201c      	movs	r0, #28
   842e6:	4b14      	ldr	r3, [pc, #80]	; (84338 <board_init+0x2b0>)
   842e8:	4798      	blx	r3
    ioport_disable_pin(SPI0_NPCS0);
   842ea:	201c      	movs	r0, #28
   842ec:	4b13      	ldr	r3, [pc, #76]	; (8433c <board_init+0x2b4>)
   842ee:	4798      	blx	r3

	/* Configure SPI1 pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   842f0:	2100      	movs	r1, #0
   842f2:	200c      	movs	r0, #12
   842f4:	4b10      	ldr	r3, [pc, #64]	; (84338 <board_init+0x2b0>)
   842f6:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   842f8:	200c      	movs	r0, #12
   842fa:	4b10      	ldr	r3, [pc, #64]	; (8433c <board_init+0x2b4>)
   842fc:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   842fe:	2100      	movs	r1, #0
   84300:	200d      	movs	r0, #13
   84302:	4b0d      	ldr	r3, [pc, #52]	; (84338 <board_init+0x2b0>)
   84304:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   84306:	200d      	movs	r0, #13
   84308:	4b0c      	ldr	r3, [pc, #48]	; (8433c <board_init+0x2b4>)
   8430a:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   8430c:	2100      	movs	r1, #0
   8430e:	2010      	movs	r0, #16
   84310:	4b09      	ldr	r3, [pc, #36]	; (84338 <board_init+0x2b0>)
   84312:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   84314:	2010      	movs	r0, #16
   84316:	4b09      	ldr	r3, [pc, #36]	; (8433c <board_init+0x2b4>)
   84318:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   8431a:	2100      	movs	r1, #0
   8431c:	200e      	movs	r0, #14
   8431e:	4b06      	ldr	r3, [pc, #24]	; (84338 <board_init+0x2b0>)
   84320:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   84322:	200e      	movs	r0, #14
   84324:	e00c      	b.n	84340 <board_init+0x2b8>
   84326:	bf00      	nop
   84328:	400e1a50 	.word	0x400e1a50
   8432c:	00083e55 	.word	0x00083e55
   84330:	00083f99 	.word	0x00083f99
   84334:	0008401f 	.word	0x0008401f
   84338:	00083ec1 	.word	0x00083ec1
   8433c:	00083e79 	.word	0x00083e79
   84340:	4b25      	ldr	r3, [pc, #148]	; (843d8 <board_init+0x350>)
   84342:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   84344:	2100      	movs	r1, #0
   84346:	2014      	movs	r0, #20
   84348:	4b24      	ldr	r3, [pc, #144]	; (843dc <board_init+0x354>)
   8434a:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   8434c:	2014      	movs	r0, #20
   8434e:	4b22      	ldr	r3, [pc, #136]	; (843d8 <board_init+0x350>)
   84350:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   84352:	2100      	movs	r1, #0
   84354:	2013      	movs	r0, #19
   84356:	4b21      	ldr	r3, [pc, #132]	; (843dc <board_init+0x354>)
   84358:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   8435a:	2013      	movs	r0, #19
   8435c:	4b1e      	ldr	r3, [pc, #120]	; (843d8 <board_init+0x350>)
   8435e:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   84360:	2100      	movs	r1, #0
   84362:	2015      	movs	r0, #21
   84364:	4b1d      	ldr	r3, [pc, #116]	; (843dc <board_init+0x354>)
   84366:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   84368:	2015      	movs	r0, #21
   8436a:	4b1b      	ldr	r3, [pc, #108]	; (843d8 <board_init+0x350>)
   8436c:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   8436e:	2100      	movs	r1, #0
   84370:	2016      	movs	r0, #22
   84372:	4b1a      	ldr	r3, [pc, #104]	; (843dc <board_init+0x354>)
   84374:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   84376:	2016      	movs	r0, #22
   84378:	4b17      	ldr	r3, [pc, #92]	; (843d8 <board_init+0x350>)
   8437a:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   8437c:	2100      	movs	r1, #0
   8437e:	2017      	movs	r0, #23
   84380:	4b16      	ldr	r3, [pc, #88]	; (843dc <board_init+0x354>)
   84382:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   84384:	2017      	movs	r0, #23
   84386:	4b14      	ldr	r3, [pc, #80]	; (843d8 <board_init+0x350>)
   84388:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   8438a:	2100      	movs	r1, #0
   8438c:	2018      	movs	r0, #24
   8438e:	4b13      	ldr	r3, [pc, #76]	; (843dc <board_init+0x354>)
   84390:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   84392:	2018      	movs	r0, #24
   84394:	4b10      	ldr	r3, [pc, #64]	; (843d8 <board_init+0x350>)
   84396:	4798      	blx	r3


    /* Init PWM */
    pmc_enable_periph_clk(ID_PWM);
   84398:	2024      	movs	r0, #36	; 0x24
   8439a:	4b11      	ldr	r3, [pc, #68]	; (843e0 <board_init+0x358>)
   8439c:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_LEFT);
   8439e:	2100      	movs	r1, #0
   843a0:	4810      	ldr	r0, [pc, #64]	; (843e4 <board_init+0x35c>)
   843a2:	4b11      	ldr	r3, [pc, #68]	; (843e8 <board_init+0x360>)
   843a4:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_RIGHT);
   843a6:	2101      	movs	r1, #1
   843a8:	480e      	ldr	r0, [pc, #56]	; (843e4 <board_init+0x35c>)
   843aa:	4b0f      	ldr	r3, [pc, #60]	; (843e8 <board_init+0x360>)
   843ac:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_REAR);
   843ae:	2102      	movs	r1, #2
   843b0:	480c      	ldr	r0, [pc, #48]	; (843e4 <board_init+0x35c>)
   843b2:	4b0d      	ldr	r3, [pc, #52]	; (843e8 <board_init+0x360>)
   843b4:	4798      	blx	r3
    pwm_clock_t clock_setting =
   843b6:	4b0d      	ldr	r3, [pc, #52]	; (843ec <board_init+0x364>)
   843b8:	607b      	str	r3, [r7, #4]
   843ba:	2300      	movs	r3, #0
   843bc:	60bb      	str	r3, [r7, #8]
    {
        .ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
        .ul_clkb = 0,
        .ul_mck = sysclk_get_cpu_hz()
   843be:	4b0c      	ldr	r3, [pc, #48]	; (843f0 <board_init+0x368>)
   843c0:	4798      	blx	r3
   843c2:	4603      	mov	r3, r0
    pwm_clock_t clock_setting =
   843c4:	60fb      	str	r3, [r7, #12]
    };
    pwm_init(PWM, &clock_setting);
   843c6:	1d3b      	adds	r3, r7, #4
   843c8:	4619      	mov	r1, r3
   843ca:	4806      	ldr	r0, [pc, #24]	; (843e4 <board_init+0x35c>)
   843cc:	4b09      	ldr	r3, [pc, #36]	; (843f4 <board_init+0x36c>)
   843ce:	4798      	blx	r3
}
   843d0:	bf00      	nop
   843d2:	3710      	adds	r7, #16
   843d4:	46bd      	mov	sp, r7
   843d6:	bd80      	pop	{r7, pc}
   843d8:	00083e79 	.word	0x00083e79
   843dc:	00083ec1 	.word	0x00083ec1
   843e0:	00083d15 	.word	0x00083d15
   843e4:	40094000 	.word	0x40094000
   843e8:	00080615 	.word	0x00080615
   843ec:	01312d00 	.word	0x01312d00
   843f0:	00083e25 	.word	0x00083e25
   843f4:	000802e9 	.word	0x000802e9

000843f8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   843f8:	b480      	push	{r7}
   843fa:	af00      	add	r7, sp, #0
	while (1) {
   843fc:	e7fe      	b.n	843fc <Dummy_Handler+0x4>
	...

00084400 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   84400:	b580      	push	{r7, lr}
   84402:	b082      	sub	sp, #8
   84404:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   84406:	4b1e      	ldr	r3, [pc, #120]	; (84480 <Reset_Handler+0x80>)
   84408:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   8440a:	4b1e      	ldr	r3, [pc, #120]	; (84484 <Reset_Handler+0x84>)
   8440c:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8440e:	687a      	ldr	r2, [r7, #4]
   84410:	683b      	ldr	r3, [r7, #0]
   84412:	429a      	cmp	r2, r3
   84414:	d00c      	beq.n	84430 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   84416:	e007      	b.n	84428 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   84418:	683b      	ldr	r3, [r7, #0]
   8441a:	1d1a      	adds	r2, r3, #4
   8441c:	603a      	str	r2, [r7, #0]
   8441e:	687a      	ldr	r2, [r7, #4]
   84420:	1d11      	adds	r1, r2, #4
   84422:	6079      	str	r1, [r7, #4]
   84424:	6812      	ldr	r2, [r2, #0]
   84426:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   84428:	683b      	ldr	r3, [r7, #0]
   8442a:	4a17      	ldr	r2, [pc, #92]	; (84488 <Reset_Handler+0x88>)
   8442c:	4293      	cmp	r3, r2
   8442e:	d3f3      	bcc.n	84418 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   84430:	4b16      	ldr	r3, [pc, #88]	; (8448c <Reset_Handler+0x8c>)
   84432:	603b      	str	r3, [r7, #0]
   84434:	e004      	b.n	84440 <Reset_Handler+0x40>
		*pDest++ = 0;
   84436:	683b      	ldr	r3, [r7, #0]
   84438:	1d1a      	adds	r2, r3, #4
   8443a:	603a      	str	r2, [r7, #0]
   8443c:	2200      	movs	r2, #0
   8443e:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   84440:	683b      	ldr	r3, [r7, #0]
   84442:	4a13      	ldr	r2, [pc, #76]	; (84490 <Reset_Handler+0x90>)
   84444:	4293      	cmp	r3, r2
   84446:	d3f6      	bcc.n	84436 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   84448:	4b12      	ldr	r3, [pc, #72]	; (84494 <Reset_Handler+0x94>)
   8444a:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8444c:	4a12      	ldr	r2, [pc, #72]	; (84498 <Reset_Handler+0x98>)
   8444e:	687b      	ldr	r3, [r7, #4]
   84450:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   84454:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   84458:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8445a:	687b      	ldr	r3, [r7, #4]
   8445c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   84460:	d309      	bcc.n	84476 <Reset_Handler+0x76>
   84462:	687b      	ldr	r3, [r7, #4]
   84464:	4a0d      	ldr	r2, [pc, #52]	; (8449c <Reset_Handler+0x9c>)
   84466:	4293      	cmp	r3, r2
   84468:	d805      	bhi.n	84476 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8446a:	4a0b      	ldr	r2, [pc, #44]	; (84498 <Reset_Handler+0x98>)
   8446c:	4b0a      	ldr	r3, [pc, #40]	; (84498 <Reset_Handler+0x98>)
   8446e:	689b      	ldr	r3, [r3, #8]
   84470:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   84474:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   84476:	4b0a      	ldr	r3, [pc, #40]	; (844a0 <Reset_Handler+0xa0>)
   84478:	4798      	blx	r3

	/* Branch to main function */
	main();
   8447a:	4b0a      	ldr	r3, [pc, #40]	; (844a4 <Reset_Handler+0xa4>)
   8447c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8447e:	e7fe      	b.n	8447e <Reset_Handler+0x7e>
   84480:	00089e14 	.word	0x00089e14
   84484:	20070000 	.word	0x20070000
   84488:	20070b50 	.word	0x20070b50
   8448c:	20070b50 	.word	0x20070b50
   84490:	20071004 	.word	0x20071004
   84494:	00080000 	.word	0x00080000
   84498:	e000ed00 	.word	0xe000ed00
   8449c:	200fffff 	.word	0x200fffff
   844a0:	000858b9 	.word	0x000858b9
   844a4:	00084879 	.word	0x00084879

000844a8 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   844a8:	b480      	push	{r7}
   844aa:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   844ac:	4b57      	ldr	r3, [pc, #348]	; (8460c <SystemCoreClockUpdate+0x164>)
   844ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   844b0:	f003 0303 	and.w	r3, r3, #3
   844b4:	2b03      	cmp	r3, #3
   844b6:	f200 808a 	bhi.w	845ce <SystemCoreClockUpdate+0x126>
   844ba:	a201      	add	r2, pc, #4	; (adr r2, 844c0 <SystemCoreClockUpdate+0x18>)
   844bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   844c0:	000844d1 	.word	0x000844d1
   844c4:	000844f1 	.word	0x000844f1
   844c8:	00084541 	.word	0x00084541
   844cc:	00084541 	.word	0x00084541
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   844d0:	4b4f      	ldr	r3, [pc, #316]	; (84610 <SystemCoreClockUpdate+0x168>)
   844d2:	695b      	ldr	r3, [r3, #20]
   844d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   844d8:	2b00      	cmp	r3, #0
   844da:	d004      	beq.n	844e6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   844dc:	4b4d      	ldr	r3, [pc, #308]	; (84614 <SystemCoreClockUpdate+0x16c>)
   844de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   844e2:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   844e4:	e073      	b.n	845ce <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   844e6:	4b4b      	ldr	r3, [pc, #300]	; (84614 <SystemCoreClockUpdate+0x16c>)
   844e8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   844ec:	601a      	str	r2, [r3, #0]
		break;
   844ee:	e06e      	b.n	845ce <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   844f0:	4b46      	ldr	r3, [pc, #280]	; (8460c <SystemCoreClockUpdate+0x164>)
   844f2:	6a1b      	ldr	r3, [r3, #32]
   844f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   844f8:	2b00      	cmp	r3, #0
   844fa:	d003      	beq.n	84504 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   844fc:	4b45      	ldr	r3, [pc, #276]	; (84614 <SystemCoreClockUpdate+0x16c>)
   844fe:	4a46      	ldr	r2, [pc, #280]	; (84618 <SystemCoreClockUpdate+0x170>)
   84500:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   84502:	e064      	b.n	845ce <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84504:	4b43      	ldr	r3, [pc, #268]	; (84614 <SystemCoreClockUpdate+0x16c>)
   84506:	4a45      	ldr	r2, [pc, #276]	; (8461c <SystemCoreClockUpdate+0x174>)
   84508:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8450a:	4b40      	ldr	r3, [pc, #256]	; (8460c <SystemCoreClockUpdate+0x164>)
   8450c:	6a1b      	ldr	r3, [r3, #32]
   8450e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84512:	2b10      	cmp	r3, #16
   84514:	d004      	beq.n	84520 <SystemCoreClockUpdate+0x78>
   84516:	2b20      	cmp	r3, #32
   84518:	d008      	beq.n	8452c <SystemCoreClockUpdate+0x84>
   8451a:	2b00      	cmp	r3, #0
   8451c:	d00e      	beq.n	8453c <SystemCoreClockUpdate+0x94>
				break;
   8451e:	e00e      	b.n	8453e <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   84520:	4b3c      	ldr	r3, [pc, #240]	; (84614 <SystemCoreClockUpdate+0x16c>)
   84522:	681b      	ldr	r3, [r3, #0]
   84524:	005b      	lsls	r3, r3, #1
   84526:	4a3b      	ldr	r2, [pc, #236]	; (84614 <SystemCoreClockUpdate+0x16c>)
   84528:	6013      	str	r3, [r2, #0]
				break;
   8452a:	e008      	b.n	8453e <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   8452c:	4b39      	ldr	r3, [pc, #228]	; (84614 <SystemCoreClockUpdate+0x16c>)
   8452e:	681a      	ldr	r2, [r3, #0]
   84530:	4613      	mov	r3, r2
   84532:	005b      	lsls	r3, r3, #1
   84534:	4413      	add	r3, r2
   84536:	4a37      	ldr	r2, [pc, #220]	; (84614 <SystemCoreClockUpdate+0x16c>)
   84538:	6013      	str	r3, [r2, #0]
				break;
   8453a:	e000      	b.n	8453e <SystemCoreClockUpdate+0x96>
				break;
   8453c:	bf00      	nop
		break;
   8453e:	e046      	b.n	845ce <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84540:	4b32      	ldr	r3, [pc, #200]	; (8460c <SystemCoreClockUpdate+0x164>)
   84542:	6a1b      	ldr	r3, [r3, #32]
   84544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   84548:	2b00      	cmp	r3, #0
   8454a:	d003      	beq.n	84554 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8454c:	4b31      	ldr	r3, [pc, #196]	; (84614 <SystemCoreClockUpdate+0x16c>)
   8454e:	4a32      	ldr	r2, [pc, #200]	; (84618 <SystemCoreClockUpdate+0x170>)
   84550:	601a      	str	r2, [r3, #0]
   84552:	e01c      	b.n	8458e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84554:	4b2f      	ldr	r3, [pc, #188]	; (84614 <SystemCoreClockUpdate+0x16c>)
   84556:	4a31      	ldr	r2, [pc, #196]	; (8461c <SystemCoreClockUpdate+0x174>)
   84558:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8455a:	4b2c      	ldr	r3, [pc, #176]	; (8460c <SystemCoreClockUpdate+0x164>)
   8455c:	6a1b      	ldr	r3, [r3, #32]
   8455e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84562:	2b10      	cmp	r3, #16
   84564:	d004      	beq.n	84570 <SystemCoreClockUpdate+0xc8>
   84566:	2b20      	cmp	r3, #32
   84568:	d008      	beq.n	8457c <SystemCoreClockUpdate+0xd4>
   8456a:	2b00      	cmp	r3, #0
   8456c:	d00e      	beq.n	8458c <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8456e:	e00e      	b.n	8458e <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   84570:	4b28      	ldr	r3, [pc, #160]	; (84614 <SystemCoreClockUpdate+0x16c>)
   84572:	681b      	ldr	r3, [r3, #0]
   84574:	005b      	lsls	r3, r3, #1
   84576:	4a27      	ldr	r2, [pc, #156]	; (84614 <SystemCoreClockUpdate+0x16c>)
   84578:	6013      	str	r3, [r2, #0]
				break;
   8457a:	e008      	b.n	8458e <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   8457c:	4b25      	ldr	r3, [pc, #148]	; (84614 <SystemCoreClockUpdate+0x16c>)
   8457e:	681a      	ldr	r2, [r3, #0]
   84580:	4613      	mov	r3, r2
   84582:	005b      	lsls	r3, r3, #1
   84584:	4413      	add	r3, r2
   84586:	4a23      	ldr	r2, [pc, #140]	; (84614 <SystemCoreClockUpdate+0x16c>)
   84588:	6013      	str	r3, [r2, #0]
				break;
   8458a:	e000      	b.n	8458e <SystemCoreClockUpdate+0xe6>
				break;
   8458c:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8458e:	4b1f      	ldr	r3, [pc, #124]	; (8460c <SystemCoreClockUpdate+0x164>)
   84590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84592:	f003 0303 	and.w	r3, r3, #3
   84596:	2b02      	cmp	r3, #2
   84598:	d115      	bne.n	845c6 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8459a:	4b1c      	ldr	r3, [pc, #112]	; (8460c <SystemCoreClockUpdate+0x164>)
   8459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8459e:	0c1b      	lsrs	r3, r3, #16
   845a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   845a4:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   845a6:	4a1b      	ldr	r2, [pc, #108]	; (84614 <SystemCoreClockUpdate+0x16c>)
   845a8:	6812      	ldr	r2, [r2, #0]
   845aa:	fb02 f303 	mul.w	r3, r2, r3
   845ae:	4a19      	ldr	r2, [pc, #100]	; (84614 <SystemCoreClockUpdate+0x16c>)
   845b0:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   845b2:	4b16      	ldr	r3, [pc, #88]	; (8460c <SystemCoreClockUpdate+0x164>)
   845b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   845b6:	b2db      	uxtb	r3, r3
   845b8:	4a16      	ldr	r2, [pc, #88]	; (84614 <SystemCoreClockUpdate+0x16c>)
   845ba:	6812      	ldr	r2, [r2, #0]
   845bc:	fbb2 f3f3 	udiv	r3, r2, r3
   845c0:	4a14      	ldr	r2, [pc, #80]	; (84614 <SystemCoreClockUpdate+0x16c>)
   845c2:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   845c4:	e002      	b.n	845cc <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   845c6:	4b13      	ldr	r3, [pc, #76]	; (84614 <SystemCoreClockUpdate+0x16c>)
   845c8:	4a15      	ldr	r2, [pc, #84]	; (84620 <SystemCoreClockUpdate+0x178>)
   845ca:	601a      	str	r2, [r3, #0]
		break;
   845cc:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   845ce:	4b0f      	ldr	r3, [pc, #60]	; (8460c <SystemCoreClockUpdate+0x164>)
   845d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   845d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   845d6:	2b70      	cmp	r3, #112	; 0x70
   845d8:	d108      	bne.n	845ec <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   845da:	4b0e      	ldr	r3, [pc, #56]	; (84614 <SystemCoreClockUpdate+0x16c>)
   845dc:	681b      	ldr	r3, [r3, #0]
   845de:	4a11      	ldr	r2, [pc, #68]	; (84624 <SystemCoreClockUpdate+0x17c>)
   845e0:	fba2 2303 	umull	r2, r3, r2, r3
   845e4:	085b      	lsrs	r3, r3, #1
   845e6:	4a0b      	ldr	r2, [pc, #44]	; (84614 <SystemCoreClockUpdate+0x16c>)
   845e8:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   845ea:	e00a      	b.n	84602 <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   845ec:	4b07      	ldr	r3, [pc, #28]	; (8460c <SystemCoreClockUpdate+0x164>)
   845ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   845f0:	091b      	lsrs	r3, r3, #4
   845f2:	f003 0307 	and.w	r3, r3, #7
   845f6:	4a07      	ldr	r2, [pc, #28]	; (84614 <SystemCoreClockUpdate+0x16c>)
   845f8:	6812      	ldr	r2, [r2, #0]
   845fa:	fa22 f303 	lsr.w	r3, r2, r3
   845fe:	4a05      	ldr	r2, [pc, #20]	; (84614 <SystemCoreClockUpdate+0x16c>)
   84600:	6013      	str	r3, [r2, #0]
}
   84602:	bf00      	nop
   84604:	46bd      	mov	sp, r7
   84606:	bc80      	pop	{r7}
   84608:	4770      	bx	lr
   8460a:	bf00      	nop
   8460c:	400e0600 	.word	0x400e0600
   84610:	400e1a10 	.word	0x400e1a10
   84614:	2007019c 	.word	0x2007019c
   84618:	00b71b00 	.word	0x00b71b00
   8461c:	003d0900 	.word	0x003d0900
   84620:	0e4e1c00 	.word	0x0e4e1c00
   84624:	aaaaaaab 	.word	0xaaaaaaab

00084628 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   84628:	b480      	push	{r7}
   8462a:	b085      	sub	sp, #20
   8462c:	af00      	add	r7, sp, #0
   8462e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   84630:	4b10      	ldr	r3, [pc, #64]	; (84674 <_sbrk+0x4c>)
   84632:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   84634:	4b10      	ldr	r3, [pc, #64]	; (84678 <_sbrk+0x50>)
   84636:	681b      	ldr	r3, [r3, #0]
   84638:	2b00      	cmp	r3, #0
   8463a:	d102      	bne.n	84642 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   8463c:	4b0e      	ldr	r3, [pc, #56]	; (84678 <_sbrk+0x50>)
   8463e:	4a0f      	ldr	r2, [pc, #60]	; (8467c <_sbrk+0x54>)
   84640:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   84642:	4b0d      	ldr	r3, [pc, #52]	; (84678 <_sbrk+0x50>)
   84644:	681b      	ldr	r3, [r3, #0]
   84646:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   84648:	68ba      	ldr	r2, [r7, #8]
   8464a:	687b      	ldr	r3, [r7, #4]
   8464c:	441a      	add	r2, r3
   8464e:	68fb      	ldr	r3, [r7, #12]
   84650:	429a      	cmp	r2, r3
   84652:	dd02      	ble.n	8465a <_sbrk+0x32>
		return (caddr_t) -1;	
   84654:	f04f 33ff 	mov.w	r3, #4294967295
   84658:	e006      	b.n	84668 <_sbrk+0x40>
	}

	heap += incr;
   8465a:	4b07      	ldr	r3, [pc, #28]	; (84678 <_sbrk+0x50>)
   8465c:	681a      	ldr	r2, [r3, #0]
   8465e:	687b      	ldr	r3, [r7, #4]
   84660:	4413      	add	r3, r2
   84662:	4a05      	ldr	r2, [pc, #20]	; (84678 <_sbrk+0x50>)
   84664:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   84666:	68bb      	ldr	r3, [r7, #8]
}
   84668:	4618      	mov	r0, r3
   8466a:	3714      	adds	r7, #20
   8466c:	46bd      	mov	sp, r7
   8466e:	bc80      	pop	{r7}
   84670:	4770      	bx	lr
   84672:	bf00      	nop
   84674:	20087ffc 	.word	0x20087ffc
   84678:	20070dd0 	.word	0x20070dd0
   8467c:	20073008 	.word	0x20073008

00084680 <NVIC_SetPriority>:
{
   84680:	b480      	push	{r7}
   84682:	b083      	sub	sp, #12
   84684:	af00      	add	r7, sp, #0
   84686:	4603      	mov	r3, r0
   84688:	6039      	str	r1, [r7, #0]
   8468a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   8468c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84690:	2b00      	cmp	r3, #0
   84692:	da0b      	bge.n	846ac <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   84694:	490d      	ldr	r1, [pc, #52]	; (846cc <NVIC_SetPriority+0x4c>)
   84696:	79fb      	ldrb	r3, [r7, #7]
   84698:	f003 030f 	and.w	r3, r3, #15
   8469c:	3b04      	subs	r3, #4
   8469e:	683a      	ldr	r2, [r7, #0]
   846a0:	b2d2      	uxtb	r2, r2
   846a2:	0112      	lsls	r2, r2, #4
   846a4:	b2d2      	uxtb	r2, r2
   846a6:	440b      	add	r3, r1
   846a8:	761a      	strb	r2, [r3, #24]
}
   846aa:	e009      	b.n	846c0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   846ac:	4908      	ldr	r1, [pc, #32]	; (846d0 <NVIC_SetPriority+0x50>)
   846ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
   846b2:	683a      	ldr	r2, [r7, #0]
   846b4:	b2d2      	uxtb	r2, r2
   846b6:	0112      	lsls	r2, r2, #4
   846b8:	b2d2      	uxtb	r2, r2
   846ba:	440b      	add	r3, r1
   846bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   846c0:	bf00      	nop
   846c2:	370c      	adds	r7, #12
   846c4:	46bd      	mov	sp, r7
   846c6:	bc80      	pop	{r7}
   846c8:	4770      	bx	lr
   846ca:	bf00      	nop
   846cc:	e000ed00 	.word	0xe000ed00
   846d0:	e000e100 	.word	0xe000e100

000846d4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   846d4:	b580      	push	{r7, lr}
   846d6:	b082      	sub	sp, #8
   846d8:	af00      	add	r7, sp, #0
   846da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   846dc:	687b      	ldr	r3, [r7, #4]
   846de:	3b01      	subs	r3, #1
   846e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   846e4:	d301      	bcc.n	846ea <SysTick_Config+0x16>
   846e6:	2301      	movs	r3, #1
   846e8:	e00f      	b.n	8470a <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   846ea:	4a0a      	ldr	r2, [pc, #40]	; (84714 <SysTick_Config+0x40>)
   846ec:	687b      	ldr	r3, [r7, #4]
   846ee:	3b01      	subs	r3, #1
   846f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   846f2:	210f      	movs	r1, #15
   846f4:	f04f 30ff 	mov.w	r0, #4294967295
   846f8:	4b07      	ldr	r3, [pc, #28]	; (84718 <SysTick_Config+0x44>)
   846fa:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   846fc:	4b05      	ldr	r3, [pc, #20]	; (84714 <SysTick_Config+0x40>)
   846fe:	2200      	movs	r2, #0
   84700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   84702:	4b04      	ldr	r3, [pc, #16]	; (84714 <SysTick_Config+0x40>)
   84704:	2207      	movs	r2, #7
   84706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   84708:	2300      	movs	r3, #0
}
   8470a:	4618      	mov	r0, r3
   8470c:	3708      	adds	r7, #8
   8470e:	46bd      	mov	sp, r7
   84710:	bd80      	pop	{r7, pc}
   84712:	bf00      	nop
   84714:	e000e010 	.word	0xe000e010
   84718:	00084681 	.word	0x00084681

0008471c <osc_get_rate>:
{
   8471c:	b480      	push	{r7}
   8471e:	b083      	sub	sp, #12
   84720:	af00      	add	r7, sp, #0
   84722:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   84724:	687b      	ldr	r3, [r7, #4]
   84726:	2b07      	cmp	r3, #7
   84728:	d825      	bhi.n	84776 <osc_get_rate+0x5a>
   8472a:	a201      	add	r2, pc, #4	; (adr r2, 84730 <osc_get_rate+0x14>)
   8472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84730:	00084751 	.word	0x00084751
   84734:	00084757 	.word	0x00084757
   84738:	0008475d 	.word	0x0008475d
   8473c:	00084763 	.word	0x00084763
   84740:	00084767 	.word	0x00084767
   84744:	0008476b 	.word	0x0008476b
   84748:	0008476f 	.word	0x0008476f
   8474c:	00084773 	.word	0x00084773
		return OSC_SLCK_32K_RC_HZ;
   84750:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   84754:	e010      	b.n	84778 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   84756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8475a:	e00d      	b.n	84778 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   8475c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84760:	e00a      	b.n	84778 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   84762:	4b08      	ldr	r3, [pc, #32]	; (84784 <osc_get_rate+0x68>)
   84764:	e008      	b.n	84778 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   84766:	4b08      	ldr	r3, [pc, #32]	; (84788 <osc_get_rate+0x6c>)
   84768:	e006      	b.n	84778 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8476a:	4b08      	ldr	r3, [pc, #32]	; (8478c <osc_get_rate+0x70>)
   8476c:	e004      	b.n	84778 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8476e:	4b07      	ldr	r3, [pc, #28]	; (8478c <osc_get_rate+0x70>)
   84770:	e002      	b.n	84778 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   84772:	4b06      	ldr	r3, [pc, #24]	; (8478c <osc_get_rate+0x70>)
   84774:	e000      	b.n	84778 <osc_get_rate+0x5c>
	return 0;
   84776:	2300      	movs	r3, #0
}
   84778:	4618      	mov	r0, r3
   8477a:	370c      	adds	r7, #12
   8477c:	46bd      	mov	sp, r7
   8477e:	bc80      	pop	{r7}
   84780:	4770      	bx	lr
   84782:	bf00      	nop
   84784:	003d0900 	.word	0x003d0900
   84788:	007a1200 	.word	0x007a1200
   8478c:	00b71b00 	.word	0x00b71b00

00084790 <sysclk_get_main_hz>:
{
   84790:	b580      	push	{r7, lr}
   84792:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   84794:	2006      	movs	r0, #6
   84796:	4b04      	ldr	r3, [pc, #16]	; (847a8 <sysclk_get_main_hz+0x18>)
   84798:	4798      	blx	r3
   8479a:	4602      	mov	r2, r0
   8479c:	4613      	mov	r3, r2
   8479e:	00db      	lsls	r3, r3, #3
   847a0:	1a9b      	subs	r3, r3, r2
   847a2:	005b      	lsls	r3, r3, #1
}
   847a4:	4618      	mov	r0, r3
   847a6:	bd80      	pop	{r7, pc}
   847a8:	0008471d 	.word	0x0008471d

000847ac <sysclk_get_cpu_hz>:
{
   847ac:	b580      	push	{r7, lr}
   847ae:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   847b0:	4b02      	ldr	r3, [pc, #8]	; (847bc <sysclk_get_cpu_hz+0x10>)
   847b2:	4798      	blx	r3
   847b4:	4603      	mov	r3, r0
   847b6:	085b      	lsrs	r3, r3, #1
}
   847b8:	4618      	mov	r0, r3
   847ba:	bd80      	pop	{r7, pc}
   847bc:	00084791 	.word	0x00084791

000847c0 <ioport_set_pin_level>:
{
   847c0:	b480      	push	{r7}
   847c2:	b08b      	sub	sp, #44	; 0x2c
   847c4:	af00      	add	r7, sp, #0
   847c6:	6078      	str	r0, [r7, #4]
   847c8:	460b      	mov	r3, r1
   847ca:	70fb      	strb	r3, [r7, #3]
   847cc:	687b      	ldr	r3, [r7, #4]
   847ce:	627b      	str	r3, [r7, #36]	; 0x24
   847d0:	78fb      	ldrb	r3, [r7, #3]
   847d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   847d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   847d8:	61fb      	str	r3, [r7, #28]
   847da:	69fb      	ldr	r3, [r7, #28]
   847dc:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   847de:	69bb      	ldr	r3, [r7, #24]
   847e0:	095b      	lsrs	r3, r3, #5
   847e2:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   847e4:	697b      	ldr	r3, [r7, #20]
   847e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   847ea:	f203 7307 	addw	r3, r3, #1799	; 0x707
   847ee:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   847f0:	613b      	str	r3, [r7, #16]
	if (level) {
   847f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   847f6:	2b00      	cmp	r3, #0
   847f8:	d009      	beq.n	8480e <ioport_set_pin_level+0x4e>
   847fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   847fc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   847fe:	68fb      	ldr	r3, [r7, #12]
   84800:	f003 031f 	and.w	r3, r3, #31
   84804:	2201      	movs	r2, #1
   84806:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   84808:	693b      	ldr	r3, [r7, #16]
   8480a:	631a      	str	r2, [r3, #48]	; 0x30
}
   8480c:	e008      	b.n	84820 <ioport_set_pin_level+0x60>
   8480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84810:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   84812:	68bb      	ldr	r3, [r7, #8]
   84814:	f003 031f 	and.w	r3, r3, #31
   84818:	2201      	movs	r2, #1
   8481a:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8481c:	693b      	ldr	r3, [r7, #16]
   8481e:	635a      	str	r2, [r3, #52]	; 0x34
   84820:	bf00      	nop
   84822:	372c      	adds	r7, #44	; 0x2c
   84824:	46bd      	mov	sp, r7
   84826:	bc80      	pop	{r7}
   84828:	4770      	bx	lr

0008482a <ioport_get_pin_level>:
{
   8482a:	b480      	push	{r7}
   8482c:	b089      	sub	sp, #36	; 0x24
   8482e:	af00      	add	r7, sp, #0
   84830:	6078      	str	r0, [r7, #4]
   84832:	687b      	ldr	r3, [r7, #4]
   84834:	61fb      	str	r3, [r7, #28]
   84836:	69fb      	ldr	r3, [r7, #28]
   84838:	61bb      	str	r3, [r7, #24]
   8483a:	69bb      	ldr	r3, [r7, #24]
   8483c:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   8483e:	697b      	ldr	r3, [r7, #20]
   84840:	095b      	lsrs	r3, r3, #5
   84842:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   84844:	693b      	ldr	r3, [r7, #16]
   84846:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8484a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8484e:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   84850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   84852:	69fb      	ldr	r3, [r7, #28]
   84854:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   84856:	68fb      	ldr	r3, [r7, #12]
   84858:	f003 031f 	and.w	r3, r3, #31
   8485c:	2101      	movs	r1, #1
   8485e:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   84862:	4013      	ands	r3, r2
   84864:	2b00      	cmp	r3, #0
   84866:	bf14      	ite	ne
   84868:	2301      	movne	r3, #1
   8486a:	2300      	moveq	r3, #0
   8486c:	b2db      	uxtb	r3, r3
}
   8486e:	4618      	mov	r0, r3
   84870:	3724      	adds	r7, #36	; 0x24
   84872:	46bd      	mov	sp, r7
   84874:	bc80      	pop	{r7}
   84876:	4770      	bx	lr

00084878 <main>:

void noOS_bootup_sequence(void);
void set_led(ioport_pin_t pin, Bool level);

int main(void)
{
   84878:	b580      	push	{r7, lr}
   8487a:	b082      	sub	sp, #8
   8487c:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   8487e:	4b1c      	ldr	r3, [pc, #112]	; (848f0 <main+0x78>)
   84880:	4798      	blx	r3
    board_init();
   84882:	4b1c      	ldr	r3, [pc, #112]	; (848f4 <main+0x7c>)
   84884:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   84886:	4b1c      	ldr	r3, [pc, #112]	; (848f8 <main+0x80>)
   84888:	4798      	blx	r3
   8488a:	4602      	mov	r2, r0
   8488c:	4b1b      	ldr	r3, [pc, #108]	; (848fc <main+0x84>)
   8488e:	fba3 2302 	umull	r2, r3, r3, r2
   84892:	099b      	lsrs	r3, r3, #6
   84894:	4618      	mov	r0, r3
   84896:	4b1a      	ldr	r3, [pc, #104]	; (84900 <main+0x88>)
   84898:	4798      	blx	r3
    
    motor_init();
   8489a:	4b1a      	ldr	r3, [pc, #104]	; (84904 <main+0x8c>)
   8489c:	4798      	blx	r3

    spi_init();
   8489e:	4b1a      	ldr	r3, [pc, #104]	; (84908 <main+0x90>)
   848a0:	4798      	blx	r3
    
    compass_init();
   848a2:	4b1a      	ldr	r3, [pc, #104]	; (8490c <main+0x94>)
   848a4:	4798      	blx	r3
    lcd_init();
   848a6:	4b1a      	ldr	r3, [pc, #104]	; (84910 <main+0x98>)
   848a8:	4798      	blx	r3
    
    noOS_bootup_sequence();
   848aa:	4b1a      	ldr	r3, [pc, #104]	; (84914 <main+0x9c>)
   848ac:	4798      	blx	r3

    enable_motor();
   848ae:	4b1a      	ldr	r3, [pc, #104]	; (84918 <main+0xa0>)
   848b0:	4798      	blx	r3

    while (1)
    {
        update_comm();
   848b2:	4b1a      	ldr	r3, [pc, #104]	; (8491c <main+0xa4>)
   848b4:	4798      	blx	r3
        update_heartbeat();
   848b6:	4b1a      	ldr	r3, [pc, #104]	; (84920 <main+0xa8>)
   848b8:	4798      	blx	r3
        //check_battery();
        
        if (stm.ibit.heartbeat)
   848ba:	4b1a      	ldr	r3, [pc, #104]	; (84924 <main+0xac>)
   848bc:	781b      	ldrb	r3, [r3, #0]
   848be:	f003 0301 	and.w	r3, r3, #1
   848c2:	b2db      	uxtb	r3, r3
   848c4:	2b00      	cmp	r3, #0
   848c6:	d004      	beq.n	848d2 <main+0x5a>
        {
            set_led(LED_M2, 1);
   848c8:	2101      	movs	r1, #1
   848ca:	2068      	movs	r0, #104	; 0x68
   848cc:	4b16      	ldr	r3, [pc, #88]	; (84928 <main+0xb0>)
   848ce:	4798      	blx	r3
   848d0:	e003      	b.n	848da <main+0x62>
        }
        else
        {
            set_led(LED_M2, 0);
   848d2:	2100      	movs	r1, #0
   848d4:	2068      	movs	r0, #104	; 0x68
   848d6:	4b14      	ldr	r3, [pc, #80]	; (84928 <main+0xb0>)
   848d8:	4798      	blx	r3
        }

        //update_motor(1, 1, 0);
        
        PrepareValuesToSend();
   848da:	4b14      	ldr	r3, [pc, #80]	; (8492c <main+0xb4>)
   848dc:	4798      	blx	r3

        act_event = button_events();
   848de:	4b14      	ldr	r3, [pc, #80]	; (84930 <main+0xb8>)
   848e0:	4798      	blx	r3
   848e2:	4603      	mov	r3, r0
   848e4:	71fb      	strb	r3, [r7, #7]
        menu(act_event);
   848e6:	79fb      	ldrb	r3, [r7, #7]
   848e8:	4618      	mov	r0, r3
   848ea:	4b12      	ldr	r3, [pc, #72]	; (84934 <main+0xbc>)
   848ec:	4798      	blx	r3
        update_comm();
   848ee:	e7e0      	b.n	848b2 <main+0x3a>
   848f0:	00083821 	.word	0x00083821
   848f4:	00084089 	.word	0x00084089
   848f8:	000847ad 	.word	0x000847ad
   848fc:	10624dd3 	.word	0x10624dd3
   84900:	000846d5 	.word	0x000846d5
   84904:	00082d49 	.word	0x00082d49
   84908:	00080c25 	.word	0x00080c25
   8490c:	000816fd 	.word	0x000816fd
   84910:	0008193d 	.word	0x0008193d
   84914:	00084939 	.word	0x00084939
   84918:	00082f31 	.word	0x00082f31
   8491c:	00083395 	.word	0x00083395
   84920:	00083489 	.word	0x00083489
   84924:	20070e20 	.word	0x20070e20
   84928:	00084aed 	.word	0x00084aed
   8492c:	00080fe5 	.word	0x00080fe5
   84930:	00082985 	.word	0x00082985
   84934:	00081f81 	.word	0x00081f81

00084938 <noOS_bootup_sequence>:
    }
}

void noOS_bootup_sequence(void)
{
   84938:	b580      	push	{r7, lr}
   8493a:	b082      	sub	sp, #8
   8493c:	af00      	add	r7, sp, #0
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   8493e:	e072      	b.n	84a26 <noOS_bootup_sequence+0xee>
    {
        if (getTicks() >= (ticks_blink_update + 800))
   84940:	4b5e      	ldr	r3, [pc, #376]	; (84abc <noOS_bootup_sequence+0x184>)
   84942:	4798      	blx	r3
   84944:	4602      	mov	r2, r0
   84946:	4b5e      	ldr	r3, [pc, #376]	; (84ac0 <noOS_bootup_sequence+0x188>)
   84948:	681b      	ldr	r3, [r3, #0]
   8494a:	f503 7348 	add.w	r3, r3, #800	; 0x320
   8494e:	429a      	cmp	r2, r3
   84950:	d31a      	bcc.n	84988 <noOS_bootup_sequence+0x50>
        {
            ticks_blink_update = getTicks();
   84952:	4b5a      	ldr	r3, [pc, #360]	; (84abc <noOS_bootup_sequence+0x184>)
   84954:	4798      	blx	r3
   84956:	4602      	mov	r2, r0
   84958:	4b59      	ldr	r3, [pc, #356]	; (84ac0 <noOS_bootup_sequence+0x188>)
   8495a:	601a      	str	r2, [r3, #0]
            
            if (blink_level)
   8495c:	4b59      	ldr	r3, [pc, #356]	; (84ac4 <noOS_bootup_sequence+0x18c>)
   8495e:	781b      	ldrb	r3, [r3, #0]
   84960:	2b00      	cmp	r3, #0
   84962:	d003      	beq.n	8496c <noOS_bootup_sequence+0x34>
            {
                blink_level = 0;
   84964:	4b57      	ldr	r3, [pc, #348]	; (84ac4 <noOS_bootup_sequence+0x18c>)
   84966:	2200      	movs	r2, #0
   84968:	701a      	strb	r2, [r3, #0]
   8496a:	e002      	b.n	84972 <noOS_bootup_sequence+0x3a>
            }
            else
            {
                blink_level = 1;
   8496c:	4b55      	ldr	r3, [pc, #340]	; (84ac4 <noOS_bootup_sequence+0x18c>)
   8496e:	2201      	movs	r2, #1
   84970:	701a      	strb	r2, [r3, #0]
            }
            
            ioport_set_pin_level(LED_BAT, blink_level);
   84972:	4b54      	ldr	r3, [pc, #336]	; (84ac4 <noOS_bootup_sequence+0x18c>)
   84974:	781b      	ldrb	r3, [r3, #0]
   84976:	2b00      	cmp	r3, #0
   84978:	bf14      	ite	ne
   8497a:	2301      	movne	r3, #1
   8497c:	2300      	moveq	r3, #0
   8497e:	b2db      	uxtb	r3, r3
   84980:	4619      	mov	r1, r3
   84982:	2066      	movs	r0, #102	; 0x66
   84984:	4b50      	ldr	r3, [pc, #320]	; (84ac8 <noOS_bootup_sequence+0x190>)
   84986:	4798      	blx	r3
        }
        
        if (getTicks() >= (ticks_dot_update + 500))
   84988:	4b4c      	ldr	r3, [pc, #304]	; (84abc <noOS_bootup_sequence+0x184>)
   8498a:	4798      	blx	r3
   8498c:	4602      	mov	r2, r0
   8498e:	4b4f      	ldr	r3, [pc, #316]	; (84acc <noOS_bootup_sequence+0x194>)
   84990:	681b      	ldr	r3, [r3, #0]
   84992:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   84996:	429a      	cmp	r2, r3
   84998:	d315      	bcc.n	849c6 <noOS_bootup_sequence+0x8e>
        {
            ticks_dot_update = getTicks();
   8499a:	4b48      	ldr	r3, [pc, #288]	; (84abc <noOS_bootup_sequence+0x184>)
   8499c:	4798      	blx	r3
   8499e:	4602      	mov	r2, r0
   849a0:	4b4a      	ldr	r3, [pc, #296]	; (84acc <noOS_bootup_sequence+0x194>)
   849a2:	601a      	str	r2, [r3, #0]
            
            if (dots < 3)
   849a4:	4b4a      	ldr	r3, [pc, #296]	; (84ad0 <noOS_bootup_sequence+0x198>)
   849a6:	781b      	ldrb	r3, [r3, #0]
   849a8:	2b02      	cmp	r3, #2
   849aa:	d806      	bhi.n	849ba <noOS_bootup_sequence+0x82>
            {
                dots++;
   849ac:	4b48      	ldr	r3, [pc, #288]	; (84ad0 <noOS_bootup_sequence+0x198>)
   849ae:	781b      	ldrb	r3, [r3, #0]
   849b0:	3301      	adds	r3, #1
   849b2:	b2da      	uxtb	r2, r3
   849b4:	4b46      	ldr	r3, [pc, #280]	; (84ad0 <noOS_bootup_sequence+0x198>)
   849b6:	701a      	strb	r2, [r3, #0]
   849b8:	e002      	b.n	849c0 <noOS_bootup_sequence+0x88>
            }
            else
            {
                dots = 0;
   849ba:	4b45      	ldr	r3, [pc, #276]	; (84ad0 <noOS_bootup_sequence+0x198>)
   849bc:	2200      	movs	r2, #0
   849be:	701a      	strb	r2, [r3, #0]
            }
            
            update_dots = 1;
   849c0:	4b44      	ldr	r3, [pc, #272]	; (84ad4 <noOS_bootup_sequence+0x19c>)
   849c2:	2201      	movs	r2, #1
   849c4:	701a      	strb	r2, [r3, #0]
        }
        
        if (update_dots)
   849c6:	4b43      	ldr	r3, [pc, #268]	; (84ad4 <noOS_bootup_sequence+0x19c>)
   849c8:	781b      	ldrb	r3, [r3, #0]
   849ca:	2b00      	cmp	r3, #0
   849cc:	d02b      	beq.n	84a26 <noOS_bootup_sequence+0xee>
        {
            update_dots = 0;
   849ce:	4b41      	ldr	r3, [pc, #260]	; (84ad4 <noOS_bootup_sequence+0x19c>)
   849d0:	2200      	movs	r2, #0
   849d2:	701a      	strb	r2, [r3, #0]
            
            switch (dots)
   849d4:	4b3e      	ldr	r3, [pc, #248]	; (84ad0 <noOS_bootup_sequence+0x198>)
   849d6:	781b      	ldrb	r3, [r3, #0]
   849d8:	2b03      	cmp	r3, #3
   849da:	d823      	bhi.n	84a24 <noOS_bootup_sequence+0xec>
   849dc:	a201      	add	r2, pc, #4	; (adr r2, 849e4 <noOS_bootup_sequence+0xac>)
   849de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   849e2:	bf00      	nop
   849e4:	000849f5 	.word	0x000849f5
   849e8:	00084a01 	.word	0x00084a01
   849ec:	00084a0d 	.word	0x00084a0d
   849f0:	00084a19 	.word	0x00084a19
            {
                case 0:
                lcd_print_s(2, 2, "booting noOS   ");
   849f4:	4a38      	ldr	r2, [pc, #224]	; (84ad8 <noOS_bootup_sequence+0x1a0>)
   849f6:	2102      	movs	r1, #2
   849f8:	2002      	movs	r0, #2
   849fa:	4b38      	ldr	r3, [pc, #224]	; (84adc <noOS_bootup_sequence+0x1a4>)
   849fc:	4798      	blx	r3
                break;
   849fe:	e012      	b.n	84a26 <noOS_bootup_sequence+0xee>
                case 1:
                lcd_print_s(2, 14, ".");
   84a00:	4a37      	ldr	r2, [pc, #220]	; (84ae0 <noOS_bootup_sequence+0x1a8>)
   84a02:	210e      	movs	r1, #14
   84a04:	2002      	movs	r0, #2
   84a06:	4b35      	ldr	r3, [pc, #212]	; (84adc <noOS_bootup_sequence+0x1a4>)
   84a08:	4798      	blx	r3
                break;
   84a0a:	e00c      	b.n	84a26 <noOS_bootup_sequence+0xee>
                case 2:
                lcd_print_s(2, 15, ".");
   84a0c:	4a34      	ldr	r2, [pc, #208]	; (84ae0 <noOS_bootup_sequence+0x1a8>)
   84a0e:	210f      	movs	r1, #15
   84a10:	2002      	movs	r0, #2
   84a12:	4b32      	ldr	r3, [pc, #200]	; (84adc <noOS_bootup_sequence+0x1a4>)
   84a14:	4798      	blx	r3
                break;
   84a16:	e006      	b.n	84a26 <noOS_bootup_sequence+0xee>
                case 3:
                lcd_print_s(2, 16, ".");
   84a18:	4a31      	ldr	r2, [pc, #196]	; (84ae0 <noOS_bootup_sequence+0x1a8>)
   84a1a:	2110      	movs	r1, #16
   84a1c:	2002      	movs	r0, #2
   84a1e:	4b2f      	ldr	r3, [pc, #188]	; (84adc <noOS_bootup_sequence+0x1a4>)
   84a20:	4798      	blx	r3
                break;
   84a22:	e000      	b.n	84a26 <noOS_bootup_sequence+0xee>
                default:
                break;
   84a24:	bf00      	nop
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   84a26:	2008      	movs	r0, #8
   84a28:	4b2e      	ldr	r3, [pc, #184]	; (84ae4 <noOS_bootup_sequence+0x1ac>)
   84a2a:	4798      	blx	r3
   84a2c:	4603      	mov	r3, r0
   84a2e:	f083 0301 	eor.w	r3, r3, #1
   84a32:	b2db      	uxtb	r3, r3
   84a34:	2b00      	cmp	r3, #0
   84a36:	d006      	beq.n	84a46 <noOS_bootup_sequence+0x10e>
   84a38:	2062      	movs	r0, #98	; 0x62
   84a3a:	4b2a      	ldr	r3, [pc, #168]	; (84ae4 <noOS_bootup_sequence+0x1ac>)
   84a3c:	4798      	blx	r3
   84a3e:	4603      	mov	r3, r0
   84a40:	2b00      	cmp	r3, #0
   84a42:	f47f af7d 	bne.w	84940 <noOS_bootup_sequence+0x8>
            }
        }
    }
    
    for(int i = 0; i< 3; i++)
   84a46:	2300      	movs	r3, #0
   84a48:	607b      	str	r3, [r7, #4]
   84a4a:	e030      	b.n	84aae <noOS_bootup_sequence+0x176>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   84a4c:	2101      	movs	r1, #1
   84a4e:	206a      	movs	r0, #106	; 0x6a
   84a50:	4b1d      	ldr	r3, [pc, #116]	; (84ac8 <noOS_bootup_sequence+0x190>)
   84a52:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 1);
   84a54:	2101      	movs	r1, #1
   84a56:	2066      	movs	r0, #102	; 0x66
   84a58:	4b1b      	ldr	r3, [pc, #108]	; (84ac8 <noOS_bootup_sequence+0x190>)
   84a5a:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 1);
   84a5c:	2101      	movs	r1, #1
   84a5e:	2067      	movs	r0, #103	; 0x67
   84a60:	4b19      	ldr	r3, [pc, #100]	; (84ac8 <noOS_bootup_sequence+0x190>)
   84a62:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 1);
   84a64:	2101      	movs	r1, #1
   84a66:	2068      	movs	r0, #104	; 0x68
   84a68:	4b17      	ldr	r3, [pc, #92]	; (84ac8 <noOS_bootup_sequence+0x190>)
   84a6a:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 1);
   84a6c:	2101      	movs	r1, #1
   84a6e:	2069      	movs	r0, #105	; 0x69
   84a70:	4b15      	ldr	r3, [pc, #84]	; (84ac8 <noOS_bootup_sequence+0x190>)
   84a72:	4798      	blx	r3
        mdelay(100);
   84a74:	2064      	movs	r0, #100	; 0x64
   84a76:	4b1c      	ldr	r3, [pc, #112]	; (84ae8 <noOS_bootup_sequence+0x1b0>)
   84a78:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   84a7a:	2100      	movs	r1, #0
   84a7c:	206a      	movs	r0, #106	; 0x6a
   84a7e:	4b12      	ldr	r3, [pc, #72]	; (84ac8 <noOS_bootup_sequence+0x190>)
   84a80:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   84a82:	2100      	movs	r1, #0
   84a84:	2066      	movs	r0, #102	; 0x66
   84a86:	4b10      	ldr	r3, [pc, #64]	; (84ac8 <noOS_bootup_sequence+0x190>)
   84a88:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   84a8a:	2100      	movs	r1, #0
   84a8c:	2067      	movs	r0, #103	; 0x67
   84a8e:	4b0e      	ldr	r3, [pc, #56]	; (84ac8 <noOS_bootup_sequence+0x190>)
   84a90:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   84a92:	2100      	movs	r1, #0
   84a94:	2068      	movs	r0, #104	; 0x68
   84a96:	4b0c      	ldr	r3, [pc, #48]	; (84ac8 <noOS_bootup_sequence+0x190>)
   84a98:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   84a9a:	2100      	movs	r1, #0
   84a9c:	2069      	movs	r0, #105	; 0x69
   84a9e:	4b0a      	ldr	r3, [pc, #40]	; (84ac8 <noOS_bootup_sequence+0x190>)
   84aa0:	4798      	blx	r3
        mdelay(100);
   84aa2:	2064      	movs	r0, #100	; 0x64
   84aa4:	4b10      	ldr	r3, [pc, #64]	; (84ae8 <noOS_bootup_sequence+0x1b0>)
   84aa6:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   84aa8:	687b      	ldr	r3, [r7, #4]
   84aaa:	3301      	adds	r3, #1
   84aac:	607b      	str	r3, [r7, #4]
   84aae:	687b      	ldr	r3, [r7, #4]
   84ab0:	2b02      	cmp	r3, #2
   84ab2:	ddcb      	ble.n	84a4c <noOS_bootup_sequence+0x114>
    }
}
   84ab4:	bf00      	nop
   84ab6:	3708      	adds	r7, #8
   84ab8:	46bd      	mov	sp, r7
   84aba:	bd80      	pop	{r7, pc}
   84abc:	00083355 	.word	0x00083355
   84ac0:	20070fd4 	.word	0x20070fd4
   84ac4:	20070fd0 	.word	0x20070fd0
   84ac8:	000847c1 	.word	0x000847c1
   84acc:	20070fd8 	.word	0x20070fd8
   84ad0:	20070dd4 	.word	0x20070dd4
   84ad4:	200701a0 	.word	0x200701a0
   84ad8:	00089b4c 	.word	0x00089b4c
   84adc:	00081a2d 	.word	0x00081a2d
   84ae0:	00089b5c 	.word	0x00089b5c
   84ae4:	0008482b 	.word	0x0008482b
   84ae8:	00083369 	.word	0x00083369

00084aec <set_led>:

void set_led(ioport_pin_t pin, Bool level)
{
   84aec:	b580      	push	{r7, lr}
   84aee:	b082      	sub	sp, #8
   84af0:	af00      	add	r7, sp, #0
   84af2:	6078      	str	r0, [r7, #4]
   84af4:	460b      	mov	r3, r1
   84af6:	70fb      	strb	r3, [r7, #3]
    if (allow_leds)
   84af8:	4b0b      	ldr	r3, [pc, #44]	; (84b28 <set_led+0x3c>)
   84afa:	781b      	ldrb	r3, [r3, #0]
   84afc:	2b00      	cmp	r3, #0
   84afe:	d00a      	beq.n	84b16 <set_led+0x2a>
    {
        ioport_set_pin_level(pin, level);
   84b00:	78fb      	ldrb	r3, [r7, #3]
   84b02:	2b00      	cmp	r3, #0
   84b04:	bf14      	ite	ne
   84b06:	2301      	movne	r3, #1
   84b08:	2300      	moveq	r3, #0
   84b0a:	b2db      	uxtb	r3, r3
   84b0c:	4619      	mov	r1, r3
   84b0e:	6878      	ldr	r0, [r7, #4]
   84b10:	4b06      	ldr	r3, [pc, #24]	; (84b2c <set_led+0x40>)
   84b12:	4798      	blx	r3
    }
    else
    {
        ioport_set_pin_level(pin, 0);
    }
}
   84b14:	e003      	b.n	84b1e <set_led+0x32>
        ioport_set_pin_level(pin, 0);
   84b16:	2100      	movs	r1, #0
   84b18:	6878      	ldr	r0, [r7, #4]
   84b1a:	4b04      	ldr	r3, [pc, #16]	; (84b2c <set_led+0x40>)
   84b1c:	4798      	blx	r3
}
   84b1e:	bf00      	nop
   84b20:	3708      	adds	r7, #8
   84b22:	46bd      	mov	sp, r7
   84b24:	bd80      	pop	{r7, pc}
   84b26:	bf00      	nop
   84b28:	2007018d 	.word	0x2007018d
   84b2c:	000847c1 	.word	0x000847c1

00084b30 <__aeabi_drsub>:
   84b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   84b34:	e002      	b.n	84b3c <__adddf3>
   84b36:	bf00      	nop

00084b38 <__aeabi_dsub>:
   84b38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00084b3c <__adddf3>:
   84b3c:	b530      	push	{r4, r5, lr}
   84b3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   84b42:	ea4f 0543 	mov.w	r5, r3, lsl #1
   84b46:	ea94 0f05 	teq	r4, r5
   84b4a:	bf08      	it	eq
   84b4c:	ea90 0f02 	teqeq	r0, r2
   84b50:	bf1f      	itttt	ne
   84b52:	ea54 0c00 	orrsne.w	ip, r4, r0
   84b56:	ea55 0c02 	orrsne.w	ip, r5, r2
   84b5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   84b5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   84b62:	f000 80e2 	beq.w	84d2a <__adddf3+0x1ee>
   84b66:	ea4f 5454 	mov.w	r4, r4, lsr #21
   84b6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   84b6e:	bfb8      	it	lt
   84b70:	426d      	neglt	r5, r5
   84b72:	dd0c      	ble.n	84b8e <__adddf3+0x52>
   84b74:	442c      	add	r4, r5
   84b76:	ea80 0202 	eor.w	r2, r0, r2
   84b7a:	ea81 0303 	eor.w	r3, r1, r3
   84b7e:	ea82 0000 	eor.w	r0, r2, r0
   84b82:	ea83 0101 	eor.w	r1, r3, r1
   84b86:	ea80 0202 	eor.w	r2, r0, r2
   84b8a:	ea81 0303 	eor.w	r3, r1, r3
   84b8e:	2d36      	cmp	r5, #54	; 0x36
   84b90:	bf88      	it	hi
   84b92:	bd30      	pophi	{r4, r5, pc}
   84b94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   84b98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84b9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   84ba0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   84ba4:	d002      	beq.n	84bac <__adddf3+0x70>
   84ba6:	4240      	negs	r0, r0
   84ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84bac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   84bb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   84bb4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   84bb8:	d002      	beq.n	84bc0 <__adddf3+0x84>
   84bba:	4252      	negs	r2, r2
   84bbc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84bc0:	ea94 0f05 	teq	r4, r5
   84bc4:	f000 80a7 	beq.w	84d16 <__adddf3+0x1da>
   84bc8:	f1a4 0401 	sub.w	r4, r4, #1
   84bcc:	f1d5 0e20 	rsbs	lr, r5, #32
   84bd0:	db0d      	blt.n	84bee <__adddf3+0xb2>
   84bd2:	fa02 fc0e 	lsl.w	ip, r2, lr
   84bd6:	fa22 f205 	lsr.w	r2, r2, r5
   84bda:	1880      	adds	r0, r0, r2
   84bdc:	f141 0100 	adc.w	r1, r1, #0
   84be0:	fa03 f20e 	lsl.w	r2, r3, lr
   84be4:	1880      	adds	r0, r0, r2
   84be6:	fa43 f305 	asr.w	r3, r3, r5
   84bea:	4159      	adcs	r1, r3
   84bec:	e00e      	b.n	84c0c <__adddf3+0xd0>
   84bee:	f1a5 0520 	sub.w	r5, r5, #32
   84bf2:	f10e 0e20 	add.w	lr, lr, #32
   84bf6:	2a01      	cmp	r2, #1
   84bf8:	fa03 fc0e 	lsl.w	ip, r3, lr
   84bfc:	bf28      	it	cs
   84bfe:	f04c 0c02 	orrcs.w	ip, ip, #2
   84c02:	fa43 f305 	asr.w	r3, r3, r5
   84c06:	18c0      	adds	r0, r0, r3
   84c08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   84c0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84c10:	d507      	bpl.n	84c22 <__adddf3+0xe6>
   84c12:	f04f 0e00 	mov.w	lr, #0
   84c16:	f1dc 0c00 	rsbs	ip, ip, #0
   84c1a:	eb7e 0000 	sbcs.w	r0, lr, r0
   84c1e:	eb6e 0101 	sbc.w	r1, lr, r1
   84c22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   84c26:	d31b      	bcc.n	84c60 <__adddf3+0x124>
   84c28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   84c2c:	d30c      	bcc.n	84c48 <__adddf3+0x10c>
   84c2e:	0849      	lsrs	r1, r1, #1
   84c30:	ea5f 0030 	movs.w	r0, r0, rrx
   84c34:	ea4f 0c3c 	mov.w	ip, ip, rrx
   84c38:	f104 0401 	add.w	r4, r4, #1
   84c3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   84c40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   84c44:	f080 809a 	bcs.w	84d7c <__adddf3+0x240>
   84c48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84c4c:	bf08      	it	eq
   84c4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   84c52:	f150 0000 	adcs.w	r0, r0, #0
   84c56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84c5a:	ea41 0105 	orr.w	r1, r1, r5
   84c5e:	bd30      	pop	{r4, r5, pc}
   84c60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   84c64:	4140      	adcs	r0, r0
   84c66:	eb41 0101 	adc.w	r1, r1, r1
   84c6a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84c6e:	f1a4 0401 	sub.w	r4, r4, #1
   84c72:	d1e9      	bne.n	84c48 <__adddf3+0x10c>
   84c74:	f091 0f00 	teq	r1, #0
   84c78:	bf04      	itt	eq
   84c7a:	4601      	moveq	r1, r0
   84c7c:	2000      	moveq	r0, #0
   84c7e:	fab1 f381 	clz	r3, r1
   84c82:	bf08      	it	eq
   84c84:	3320      	addeq	r3, #32
   84c86:	f1a3 030b 	sub.w	r3, r3, #11
   84c8a:	f1b3 0220 	subs.w	r2, r3, #32
   84c8e:	da0c      	bge.n	84caa <__adddf3+0x16e>
   84c90:	320c      	adds	r2, #12
   84c92:	dd08      	ble.n	84ca6 <__adddf3+0x16a>
   84c94:	f102 0c14 	add.w	ip, r2, #20
   84c98:	f1c2 020c 	rsb	r2, r2, #12
   84c9c:	fa01 f00c 	lsl.w	r0, r1, ip
   84ca0:	fa21 f102 	lsr.w	r1, r1, r2
   84ca4:	e00c      	b.n	84cc0 <__adddf3+0x184>
   84ca6:	f102 0214 	add.w	r2, r2, #20
   84caa:	bfd8      	it	le
   84cac:	f1c2 0c20 	rsble	ip, r2, #32
   84cb0:	fa01 f102 	lsl.w	r1, r1, r2
   84cb4:	fa20 fc0c 	lsr.w	ip, r0, ip
   84cb8:	bfdc      	itt	le
   84cba:	ea41 010c 	orrle.w	r1, r1, ip
   84cbe:	4090      	lslle	r0, r2
   84cc0:	1ae4      	subs	r4, r4, r3
   84cc2:	bfa2      	ittt	ge
   84cc4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   84cc8:	4329      	orrge	r1, r5
   84cca:	bd30      	popge	{r4, r5, pc}
   84ccc:	ea6f 0404 	mvn.w	r4, r4
   84cd0:	3c1f      	subs	r4, #31
   84cd2:	da1c      	bge.n	84d0e <__adddf3+0x1d2>
   84cd4:	340c      	adds	r4, #12
   84cd6:	dc0e      	bgt.n	84cf6 <__adddf3+0x1ba>
   84cd8:	f104 0414 	add.w	r4, r4, #20
   84cdc:	f1c4 0220 	rsb	r2, r4, #32
   84ce0:	fa20 f004 	lsr.w	r0, r0, r4
   84ce4:	fa01 f302 	lsl.w	r3, r1, r2
   84ce8:	ea40 0003 	orr.w	r0, r0, r3
   84cec:	fa21 f304 	lsr.w	r3, r1, r4
   84cf0:	ea45 0103 	orr.w	r1, r5, r3
   84cf4:	bd30      	pop	{r4, r5, pc}
   84cf6:	f1c4 040c 	rsb	r4, r4, #12
   84cfa:	f1c4 0220 	rsb	r2, r4, #32
   84cfe:	fa20 f002 	lsr.w	r0, r0, r2
   84d02:	fa01 f304 	lsl.w	r3, r1, r4
   84d06:	ea40 0003 	orr.w	r0, r0, r3
   84d0a:	4629      	mov	r1, r5
   84d0c:	bd30      	pop	{r4, r5, pc}
   84d0e:	fa21 f004 	lsr.w	r0, r1, r4
   84d12:	4629      	mov	r1, r5
   84d14:	bd30      	pop	{r4, r5, pc}
   84d16:	f094 0f00 	teq	r4, #0
   84d1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   84d1e:	bf06      	itte	eq
   84d20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   84d24:	3401      	addeq	r4, #1
   84d26:	3d01      	subne	r5, #1
   84d28:	e74e      	b.n	84bc8 <__adddf3+0x8c>
   84d2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84d2e:	bf18      	it	ne
   84d30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   84d34:	d029      	beq.n	84d8a <__adddf3+0x24e>
   84d36:	ea94 0f05 	teq	r4, r5
   84d3a:	bf08      	it	eq
   84d3c:	ea90 0f02 	teqeq	r0, r2
   84d40:	d005      	beq.n	84d4e <__adddf3+0x212>
   84d42:	ea54 0c00 	orrs.w	ip, r4, r0
   84d46:	bf04      	itt	eq
   84d48:	4619      	moveq	r1, r3
   84d4a:	4610      	moveq	r0, r2
   84d4c:	bd30      	pop	{r4, r5, pc}
   84d4e:	ea91 0f03 	teq	r1, r3
   84d52:	bf1e      	ittt	ne
   84d54:	2100      	movne	r1, #0
   84d56:	2000      	movne	r0, #0
   84d58:	bd30      	popne	{r4, r5, pc}
   84d5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   84d5e:	d105      	bne.n	84d6c <__adddf3+0x230>
   84d60:	0040      	lsls	r0, r0, #1
   84d62:	4149      	adcs	r1, r1
   84d64:	bf28      	it	cs
   84d66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   84d6a:	bd30      	pop	{r4, r5, pc}
   84d6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   84d70:	bf3c      	itt	cc
   84d72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   84d76:	bd30      	popcc	{r4, r5, pc}
   84d78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84d7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   84d80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84d84:	f04f 0000 	mov.w	r0, #0
   84d88:	bd30      	pop	{r4, r5, pc}
   84d8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84d8e:	bf1a      	itte	ne
   84d90:	4619      	movne	r1, r3
   84d92:	4610      	movne	r0, r2
   84d94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   84d98:	bf1c      	itt	ne
   84d9a:	460b      	movne	r3, r1
   84d9c:	4602      	movne	r2, r0
   84d9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   84da2:	bf06      	itte	eq
   84da4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   84da8:	ea91 0f03 	teqeq	r1, r3
   84dac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   84db0:	bd30      	pop	{r4, r5, pc}
   84db2:	bf00      	nop

00084db4 <__aeabi_ui2d>:
   84db4:	f090 0f00 	teq	r0, #0
   84db8:	bf04      	itt	eq
   84dba:	2100      	moveq	r1, #0
   84dbc:	4770      	bxeq	lr
   84dbe:	b530      	push	{r4, r5, lr}
   84dc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84dc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84dc8:	f04f 0500 	mov.w	r5, #0
   84dcc:	f04f 0100 	mov.w	r1, #0
   84dd0:	e750      	b.n	84c74 <__adddf3+0x138>
   84dd2:	bf00      	nop

00084dd4 <__aeabi_i2d>:
   84dd4:	f090 0f00 	teq	r0, #0
   84dd8:	bf04      	itt	eq
   84dda:	2100      	moveq	r1, #0
   84ddc:	4770      	bxeq	lr
   84dde:	b530      	push	{r4, r5, lr}
   84de0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84de4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84de8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   84dec:	bf48      	it	mi
   84dee:	4240      	negmi	r0, r0
   84df0:	f04f 0100 	mov.w	r1, #0
   84df4:	e73e      	b.n	84c74 <__adddf3+0x138>
   84df6:	bf00      	nop

00084df8 <__aeabi_f2d>:
   84df8:	0042      	lsls	r2, r0, #1
   84dfa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   84dfe:	ea4f 0131 	mov.w	r1, r1, rrx
   84e02:	ea4f 7002 	mov.w	r0, r2, lsl #28
   84e06:	bf1f      	itttt	ne
   84e08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   84e0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84e10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   84e14:	4770      	bxne	lr
   84e16:	f092 0f00 	teq	r2, #0
   84e1a:	bf14      	ite	ne
   84e1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84e20:	4770      	bxeq	lr
   84e22:	b530      	push	{r4, r5, lr}
   84e24:	f44f 7460 	mov.w	r4, #896	; 0x380
   84e28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84e2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84e30:	e720      	b.n	84c74 <__adddf3+0x138>
   84e32:	bf00      	nop

00084e34 <__aeabi_ul2d>:
   84e34:	ea50 0201 	orrs.w	r2, r0, r1
   84e38:	bf08      	it	eq
   84e3a:	4770      	bxeq	lr
   84e3c:	b530      	push	{r4, r5, lr}
   84e3e:	f04f 0500 	mov.w	r5, #0
   84e42:	e00a      	b.n	84e5a <__aeabi_l2d+0x16>

00084e44 <__aeabi_l2d>:
   84e44:	ea50 0201 	orrs.w	r2, r0, r1
   84e48:	bf08      	it	eq
   84e4a:	4770      	bxeq	lr
   84e4c:	b530      	push	{r4, r5, lr}
   84e4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   84e52:	d502      	bpl.n	84e5a <__aeabi_l2d+0x16>
   84e54:	4240      	negs	r0, r0
   84e56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84e5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84e5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84e62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   84e66:	f43f aedc 	beq.w	84c22 <__adddf3+0xe6>
   84e6a:	f04f 0203 	mov.w	r2, #3
   84e6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84e72:	bf18      	it	ne
   84e74:	3203      	addne	r2, #3
   84e76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84e7a:	bf18      	it	ne
   84e7c:	3203      	addne	r2, #3
   84e7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   84e82:	f1c2 0320 	rsb	r3, r2, #32
   84e86:	fa00 fc03 	lsl.w	ip, r0, r3
   84e8a:	fa20 f002 	lsr.w	r0, r0, r2
   84e8e:	fa01 fe03 	lsl.w	lr, r1, r3
   84e92:	ea40 000e 	orr.w	r0, r0, lr
   84e96:	fa21 f102 	lsr.w	r1, r1, r2
   84e9a:	4414      	add	r4, r2
   84e9c:	e6c1      	b.n	84c22 <__adddf3+0xe6>
   84e9e:	bf00      	nop

00084ea0 <__aeabi_dmul>:
   84ea0:	b570      	push	{r4, r5, r6, lr}
   84ea2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84ea6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   84eaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   84eae:	bf1d      	ittte	ne
   84eb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84eb4:	ea94 0f0c 	teqne	r4, ip
   84eb8:	ea95 0f0c 	teqne	r5, ip
   84ebc:	f000 f8de 	bleq	8507c <__aeabi_dmul+0x1dc>
   84ec0:	442c      	add	r4, r5
   84ec2:	ea81 0603 	eor.w	r6, r1, r3
   84ec6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   84eca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   84ece:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   84ed2:	bf18      	it	ne
   84ed4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   84ed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   84ee0:	d038      	beq.n	84f54 <__aeabi_dmul+0xb4>
   84ee2:	fba0 ce02 	umull	ip, lr, r0, r2
   84ee6:	f04f 0500 	mov.w	r5, #0
   84eea:	fbe1 e502 	umlal	lr, r5, r1, r2
   84eee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   84ef2:	fbe0 e503 	umlal	lr, r5, r0, r3
   84ef6:	f04f 0600 	mov.w	r6, #0
   84efa:	fbe1 5603 	umlal	r5, r6, r1, r3
   84efe:	f09c 0f00 	teq	ip, #0
   84f02:	bf18      	it	ne
   84f04:	f04e 0e01 	orrne.w	lr, lr, #1
   84f08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   84f0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   84f10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   84f14:	d204      	bcs.n	84f20 <__aeabi_dmul+0x80>
   84f16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   84f1a:	416d      	adcs	r5, r5
   84f1c:	eb46 0606 	adc.w	r6, r6, r6
   84f20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   84f24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   84f28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   84f2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   84f30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   84f34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84f38:	bf88      	it	hi
   84f3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   84f3e:	d81e      	bhi.n	84f7e <__aeabi_dmul+0xde>
   84f40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   84f44:	bf08      	it	eq
   84f46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   84f4a:	f150 0000 	adcs.w	r0, r0, #0
   84f4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84f52:	bd70      	pop	{r4, r5, r6, pc}
   84f54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   84f58:	ea46 0101 	orr.w	r1, r6, r1
   84f5c:	ea40 0002 	orr.w	r0, r0, r2
   84f60:	ea81 0103 	eor.w	r1, r1, r3
   84f64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   84f68:	bfc2      	ittt	gt
   84f6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   84f6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84f72:	bd70      	popgt	{r4, r5, r6, pc}
   84f74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84f78:	f04f 0e00 	mov.w	lr, #0
   84f7c:	3c01      	subs	r4, #1
   84f7e:	f300 80ab 	bgt.w	850d8 <__aeabi_dmul+0x238>
   84f82:	f114 0f36 	cmn.w	r4, #54	; 0x36
   84f86:	bfde      	ittt	le
   84f88:	2000      	movle	r0, #0
   84f8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   84f8e:	bd70      	pople	{r4, r5, r6, pc}
   84f90:	f1c4 0400 	rsb	r4, r4, #0
   84f94:	3c20      	subs	r4, #32
   84f96:	da35      	bge.n	85004 <__aeabi_dmul+0x164>
   84f98:	340c      	adds	r4, #12
   84f9a:	dc1b      	bgt.n	84fd4 <__aeabi_dmul+0x134>
   84f9c:	f104 0414 	add.w	r4, r4, #20
   84fa0:	f1c4 0520 	rsb	r5, r4, #32
   84fa4:	fa00 f305 	lsl.w	r3, r0, r5
   84fa8:	fa20 f004 	lsr.w	r0, r0, r4
   84fac:	fa01 f205 	lsl.w	r2, r1, r5
   84fb0:	ea40 0002 	orr.w	r0, r0, r2
   84fb4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   84fb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84fbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84fc0:	fa21 f604 	lsr.w	r6, r1, r4
   84fc4:	eb42 0106 	adc.w	r1, r2, r6
   84fc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84fcc:	bf08      	it	eq
   84fce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84fd2:	bd70      	pop	{r4, r5, r6, pc}
   84fd4:	f1c4 040c 	rsb	r4, r4, #12
   84fd8:	f1c4 0520 	rsb	r5, r4, #32
   84fdc:	fa00 f304 	lsl.w	r3, r0, r4
   84fe0:	fa20 f005 	lsr.w	r0, r0, r5
   84fe4:	fa01 f204 	lsl.w	r2, r1, r4
   84fe8:	ea40 0002 	orr.w	r0, r0, r2
   84fec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84ff0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84ff4:	f141 0100 	adc.w	r1, r1, #0
   84ff8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84ffc:	bf08      	it	eq
   84ffe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   85002:	bd70      	pop	{r4, r5, r6, pc}
   85004:	f1c4 0520 	rsb	r5, r4, #32
   85008:	fa00 f205 	lsl.w	r2, r0, r5
   8500c:	ea4e 0e02 	orr.w	lr, lr, r2
   85010:	fa20 f304 	lsr.w	r3, r0, r4
   85014:	fa01 f205 	lsl.w	r2, r1, r5
   85018:	ea43 0302 	orr.w	r3, r3, r2
   8501c:	fa21 f004 	lsr.w	r0, r1, r4
   85020:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   85024:	fa21 f204 	lsr.w	r2, r1, r4
   85028:	ea20 0002 	bic.w	r0, r0, r2
   8502c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   85030:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   85034:	bf08      	it	eq
   85036:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8503a:	bd70      	pop	{r4, r5, r6, pc}
   8503c:	f094 0f00 	teq	r4, #0
   85040:	d10f      	bne.n	85062 <__aeabi_dmul+0x1c2>
   85042:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   85046:	0040      	lsls	r0, r0, #1
   85048:	eb41 0101 	adc.w	r1, r1, r1
   8504c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85050:	bf08      	it	eq
   85052:	3c01      	subeq	r4, #1
   85054:	d0f7      	beq.n	85046 <__aeabi_dmul+0x1a6>
   85056:	ea41 0106 	orr.w	r1, r1, r6
   8505a:	f095 0f00 	teq	r5, #0
   8505e:	bf18      	it	ne
   85060:	4770      	bxne	lr
   85062:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   85066:	0052      	lsls	r2, r2, #1
   85068:	eb43 0303 	adc.w	r3, r3, r3
   8506c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   85070:	bf08      	it	eq
   85072:	3d01      	subeq	r5, #1
   85074:	d0f7      	beq.n	85066 <__aeabi_dmul+0x1c6>
   85076:	ea43 0306 	orr.w	r3, r3, r6
   8507a:	4770      	bx	lr
   8507c:	ea94 0f0c 	teq	r4, ip
   85080:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   85084:	bf18      	it	ne
   85086:	ea95 0f0c 	teqne	r5, ip
   8508a:	d00c      	beq.n	850a6 <__aeabi_dmul+0x206>
   8508c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   85090:	bf18      	it	ne
   85092:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   85096:	d1d1      	bne.n	8503c <__aeabi_dmul+0x19c>
   85098:	ea81 0103 	eor.w	r1, r1, r3
   8509c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   850a0:	f04f 0000 	mov.w	r0, #0
   850a4:	bd70      	pop	{r4, r5, r6, pc}
   850a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   850aa:	bf06      	itte	eq
   850ac:	4610      	moveq	r0, r2
   850ae:	4619      	moveq	r1, r3
   850b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   850b4:	d019      	beq.n	850ea <__aeabi_dmul+0x24a>
   850b6:	ea94 0f0c 	teq	r4, ip
   850ba:	d102      	bne.n	850c2 <__aeabi_dmul+0x222>
   850bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   850c0:	d113      	bne.n	850ea <__aeabi_dmul+0x24a>
   850c2:	ea95 0f0c 	teq	r5, ip
   850c6:	d105      	bne.n	850d4 <__aeabi_dmul+0x234>
   850c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   850cc:	bf1c      	itt	ne
   850ce:	4610      	movne	r0, r2
   850d0:	4619      	movne	r1, r3
   850d2:	d10a      	bne.n	850ea <__aeabi_dmul+0x24a>
   850d4:	ea81 0103 	eor.w	r1, r1, r3
   850d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   850dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   850e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   850e4:	f04f 0000 	mov.w	r0, #0
   850e8:	bd70      	pop	{r4, r5, r6, pc}
   850ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   850ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   850f2:	bd70      	pop	{r4, r5, r6, pc}

000850f4 <__aeabi_ddiv>:
   850f4:	b570      	push	{r4, r5, r6, lr}
   850f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   850fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   850fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   85102:	bf1d      	ittte	ne
   85104:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   85108:	ea94 0f0c 	teqne	r4, ip
   8510c:	ea95 0f0c 	teqne	r5, ip
   85110:	f000 f8a7 	bleq	85262 <__aeabi_ddiv+0x16e>
   85114:	eba4 0405 	sub.w	r4, r4, r5
   85118:	ea81 0e03 	eor.w	lr, r1, r3
   8511c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   85120:	ea4f 3101 	mov.w	r1, r1, lsl #12
   85124:	f000 8088 	beq.w	85238 <__aeabi_ddiv+0x144>
   85128:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8512c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   85130:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   85134:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   85138:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8513c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   85140:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   85144:	ea4f 2600 	mov.w	r6, r0, lsl #8
   85148:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8514c:	429d      	cmp	r5, r3
   8514e:	bf08      	it	eq
   85150:	4296      	cmpeq	r6, r2
   85152:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   85156:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8515a:	d202      	bcs.n	85162 <__aeabi_ddiv+0x6e>
   8515c:	085b      	lsrs	r3, r3, #1
   8515e:	ea4f 0232 	mov.w	r2, r2, rrx
   85162:	1ab6      	subs	r6, r6, r2
   85164:	eb65 0503 	sbc.w	r5, r5, r3
   85168:	085b      	lsrs	r3, r3, #1
   8516a:	ea4f 0232 	mov.w	r2, r2, rrx
   8516e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   85172:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   85176:	ebb6 0e02 	subs.w	lr, r6, r2
   8517a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8517e:	bf22      	ittt	cs
   85180:	1ab6      	subcs	r6, r6, r2
   85182:	4675      	movcs	r5, lr
   85184:	ea40 000c 	orrcs.w	r0, r0, ip
   85188:	085b      	lsrs	r3, r3, #1
   8518a:	ea4f 0232 	mov.w	r2, r2, rrx
   8518e:	ebb6 0e02 	subs.w	lr, r6, r2
   85192:	eb75 0e03 	sbcs.w	lr, r5, r3
   85196:	bf22      	ittt	cs
   85198:	1ab6      	subcs	r6, r6, r2
   8519a:	4675      	movcs	r5, lr
   8519c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   851a0:	085b      	lsrs	r3, r3, #1
   851a2:	ea4f 0232 	mov.w	r2, r2, rrx
   851a6:	ebb6 0e02 	subs.w	lr, r6, r2
   851aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   851ae:	bf22      	ittt	cs
   851b0:	1ab6      	subcs	r6, r6, r2
   851b2:	4675      	movcs	r5, lr
   851b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   851b8:	085b      	lsrs	r3, r3, #1
   851ba:	ea4f 0232 	mov.w	r2, r2, rrx
   851be:	ebb6 0e02 	subs.w	lr, r6, r2
   851c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   851c6:	bf22      	ittt	cs
   851c8:	1ab6      	subcs	r6, r6, r2
   851ca:	4675      	movcs	r5, lr
   851cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   851d0:	ea55 0e06 	orrs.w	lr, r5, r6
   851d4:	d018      	beq.n	85208 <__aeabi_ddiv+0x114>
   851d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   851da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   851de:	ea4f 1606 	mov.w	r6, r6, lsl #4
   851e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   851e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   851ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   851ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   851f2:	d1c0      	bne.n	85176 <__aeabi_ddiv+0x82>
   851f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   851f8:	d10b      	bne.n	85212 <__aeabi_ddiv+0x11e>
   851fa:	ea41 0100 	orr.w	r1, r1, r0
   851fe:	f04f 0000 	mov.w	r0, #0
   85202:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   85206:	e7b6      	b.n	85176 <__aeabi_ddiv+0x82>
   85208:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8520c:	bf04      	itt	eq
   8520e:	4301      	orreq	r1, r0
   85210:	2000      	moveq	r0, #0
   85212:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   85216:	bf88      	it	hi
   85218:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8521c:	f63f aeaf 	bhi.w	84f7e <__aeabi_dmul+0xde>
   85220:	ebb5 0c03 	subs.w	ip, r5, r3
   85224:	bf04      	itt	eq
   85226:	ebb6 0c02 	subseq.w	ip, r6, r2
   8522a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8522e:	f150 0000 	adcs.w	r0, r0, #0
   85232:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   85236:	bd70      	pop	{r4, r5, r6, pc}
   85238:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8523c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   85240:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   85244:	bfc2      	ittt	gt
   85246:	ebd4 050c 	rsbsgt	r5, r4, ip
   8524a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8524e:	bd70      	popgt	{r4, r5, r6, pc}
   85250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   85254:	f04f 0e00 	mov.w	lr, #0
   85258:	3c01      	subs	r4, #1
   8525a:	e690      	b.n	84f7e <__aeabi_dmul+0xde>
   8525c:	ea45 0e06 	orr.w	lr, r5, r6
   85260:	e68d      	b.n	84f7e <__aeabi_dmul+0xde>
   85262:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   85266:	ea94 0f0c 	teq	r4, ip
   8526a:	bf08      	it	eq
   8526c:	ea95 0f0c 	teqeq	r5, ip
   85270:	f43f af3b 	beq.w	850ea <__aeabi_dmul+0x24a>
   85274:	ea94 0f0c 	teq	r4, ip
   85278:	d10a      	bne.n	85290 <__aeabi_ddiv+0x19c>
   8527a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8527e:	f47f af34 	bne.w	850ea <__aeabi_dmul+0x24a>
   85282:	ea95 0f0c 	teq	r5, ip
   85286:	f47f af25 	bne.w	850d4 <__aeabi_dmul+0x234>
   8528a:	4610      	mov	r0, r2
   8528c:	4619      	mov	r1, r3
   8528e:	e72c      	b.n	850ea <__aeabi_dmul+0x24a>
   85290:	ea95 0f0c 	teq	r5, ip
   85294:	d106      	bne.n	852a4 <__aeabi_ddiv+0x1b0>
   85296:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8529a:	f43f aefd 	beq.w	85098 <__aeabi_dmul+0x1f8>
   8529e:	4610      	mov	r0, r2
   852a0:	4619      	mov	r1, r3
   852a2:	e722      	b.n	850ea <__aeabi_dmul+0x24a>
   852a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   852a8:	bf18      	it	ne
   852aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   852ae:	f47f aec5 	bne.w	8503c <__aeabi_dmul+0x19c>
   852b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   852b6:	f47f af0d 	bne.w	850d4 <__aeabi_dmul+0x234>
   852ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   852be:	f47f aeeb 	bne.w	85098 <__aeabi_dmul+0x1f8>
   852c2:	e712      	b.n	850ea <__aeabi_dmul+0x24a>

000852c4 <__aeabi_frsub>:
   852c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   852c8:	e002      	b.n	852d0 <__addsf3>
   852ca:	bf00      	nop

000852cc <__aeabi_fsub>:
   852cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000852d0 <__addsf3>:
   852d0:	0042      	lsls	r2, r0, #1
   852d2:	bf1f      	itttt	ne
   852d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   852d8:	ea92 0f03 	teqne	r2, r3
   852dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   852e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   852e4:	d06a      	beq.n	853bc <__addsf3+0xec>
   852e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   852ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   852ee:	bfc1      	itttt	gt
   852f0:	18d2      	addgt	r2, r2, r3
   852f2:	4041      	eorgt	r1, r0
   852f4:	4048      	eorgt	r0, r1
   852f6:	4041      	eorgt	r1, r0
   852f8:	bfb8      	it	lt
   852fa:	425b      	neglt	r3, r3
   852fc:	2b19      	cmp	r3, #25
   852fe:	bf88      	it	hi
   85300:	4770      	bxhi	lr
   85302:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   85306:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8530a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8530e:	bf18      	it	ne
   85310:	4240      	negne	r0, r0
   85312:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85316:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8531a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8531e:	bf18      	it	ne
   85320:	4249      	negne	r1, r1
   85322:	ea92 0f03 	teq	r2, r3
   85326:	d03f      	beq.n	853a8 <__addsf3+0xd8>
   85328:	f1a2 0201 	sub.w	r2, r2, #1
   8532c:	fa41 fc03 	asr.w	ip, r1, r3
   85330:	eb10 000c 	adds.w	r0, r0, ip
   85334:	f1c3 0320 	rsb	r3, r3, #32
   85338:	fa01 f103 	lsl.w	r1, r1, r3
   8533c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   85340:	d502      	bpl.n	85348 <__addsf3+0x78>
   85342:	4249      	negs	r1, r1
   85344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   85348:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   8534c:	d313      	bcc.n	85376 <__addsf3+0xa6>
   8534e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   85352:	d306      	bcc.n	85362 <__addsf3+0x92>
   85354:	0840      	lsrs	r0, r0, #1
   85356:	ea4f 0131 	mov.w	r1, r1, rrx
   8535a:	f102 0201 	add.w	r2, r2, #1
   8535e:	2afe      	cmp	r2, #254	; 0xfe
   85360:	d251      	bcs.n	85406 <__addsf3+0x136>
   85362:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   85366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8536a:	bf08      	it	eq
   8536c:	f020 0001 	biceq.w	r0, r0, #1
   85370:	ea40 0003 	orr.w	r0, r0, r3
   85374:	4770      	bx	lr
   85376:	0049      	lsls	r1, r1, #1
   85378:	eb40 0000 	adc.w	r0, r0, r0
   8537c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   85380:	f1a2 0201 	sub.w	r2, r2, #1
   85384:	d1ed      	bne.n	85362 <__addsf3+0x92>
   85386:	fab0 fc80 	clz	ip, r0
   8538a:	f1ac 0c08 	sub.w	ip, ip, #8
   8538e:	ebb2 020c 	subs.w	r2, r2, ip
   85392:	fa00 f00c 	lsl.w	r0, r0, ip
   85396:	bfaa      	itet	ge
   85398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   8539c:	4252      	neglt	r2, r2
   8539e:	4318      	orrge	r0, r3
   853a0:	bfbc      	itt	lt
   853a2:	40d0      	lsrlt	r0, r2
   853a4:	4318      	orrlt	r0, r3
   853a6:	4770      	bx	lr
   853a8:	f092 0f00 	teq	r2, #0
   853ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   853b0:	bf06      	itte	eq
   853b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   853b6:	3201      	addeq	r2, #1
   853b8:	3b01      	subne	r3, #1
   853ba:	e7b5      	b.n	85328 <__addsf3+0x58>
   853bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   853c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   853c4:	bf18      	it	ne
   853c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   853ca:	d021      	beq.n	85410 <__addsf3+0x140>
   853cc:	ea92 0f03 	teq	r2, r3
   853d0:	d004      	beq.n	853dc <__addsf3+0x10c>
   853d2:	f092 0f00 	teq	r2, #0
   853d6:	bf08      	it	eq
   853d8:	4608      	moveq	r0, r1
   853da:	4770      	bx	lr
   853dc:	ea90 0f01 	teq	r0, r1
   853e0:	bf1c      	itt	ne
   853e2:	2000      	movne	r0, #0
   853e4:	4770      	bxne	lr
   853e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   853ea:	d104      	bne.n	853f6 <__addsf3+0x126>
   853ec:	0040      	lsls	r0, r0, #1
   853ee:	bf28      	it	cs
   853f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   853f4:	4770      	bx	lr
   853f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   853fa:	bf3c      	itt	cc
   853fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   85400:	4770      	bxcc	lr
   85402:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   85406:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8540a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8540e:	4770      	bx	lr
   85410:	ea7f 6222 	mvns.w	r2, r2, asr #24
   85414:	bf16      	itet	ne
   85416:	4608      	movne	r0, r1
   85418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   8541c:	4601      	movne	r1, r0
   8541e:	0242      	lsls	r2, r0, #9
   85420:	bf06      	itte	eq
   85422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   85426:	ea90 0f01 	teqeq	r0, r1
   8542a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8542e:	4770      	bx	lr

00085430 <__aeabi_ui2f>:
   85430:	f04f 0300 	mov.w	r3, #0
   85434:	e004      	b.n	85440 <__aeabi_i2f+0x8>
   85436:	bf00      	nop

00085438 <__aeabi_i2f>:
   85438:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   8543c:	bf48      	it	mi
   8543e:	4240      	negmi	r0, r0
   85440:	ea5f 0c00 	movs.w	ip, r0
   85444:	bf08      	it	eq
   85446:	4770      	bxeq	lr
   85448:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   8544c:	4601      	mov	r1, r0
   8544e:	f04f 0000 	mov.w	r0, #0
   85452:	e01c      	b.n	8548e <__aeabi_l2f+0x2a>

00085454 <__aeabi_ul2f>:
   85454:	ea50 0201 	orrs.w	r2, r0, r1
   85458:	bf08      	it	eq
   8545a:	4770      	bxeq	lr
   8545c:	f04f 0300 	mov.w	r3, #0
   85460:	e00a      	b.n	85478 <__aeabi_l2f+0x14>
   85462:	bf00      	nop

00085464 <__aeabi_l2f>:
   85464:	ea50 0201 	orrs.w	r2, r0, r1
   85468:	bf08      	it	eq
   8546a:	4770      	bxeq	lr
   8546c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   85470:	d502      	bpl.n	85478 <__aeabi_l2f+0x14>
   85472:	4240      	negs	r0, r0
   85474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85478:	ea5f 0c01 	movs.w	ip, r1
   8547c:	bf02      	ittt	eq
   8547e:	4684      	moveq	ip, r0
   85480:	4601      	moveq	r1, r0
   85482:	2000      	moveq	r0, #0
   85484:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   85488:	bf08      	it	eq
   8548a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8548e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   85492:	fabc f28c 	clz	r2, ip
   85496:	3a08      	subs	r2, #8
   85498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8549c:	db10      	blt.n	854c0 <__aeabi_l2f+0x5c>
   8549e:	fa01 fc02 	lsl.w	ip, r1, r2
   854a2:	4463      	add	r3, ip
   854a4:	fa00 fc02 	lsl.w	ip, r0, r2
   854a8:	f1c2 0220 	rsb	r2, r2, #32
   854ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   854b0:	fa20 f202 	lsr.w	r2, r0, r2
   854b4:	eb43 0002 	adc.w	r0, r3, r2
   854b8:	bf08      	it	eq
   854ba:	f020 0001 	biceq.w	r0, r0, #1
   854be:	4770      	bx	lr
   854c0:	f102 0220 	add.w	r2, r2, #32
   854c4:	fa01 fc02 	lsl.w	ip, r1, r2
   854c8:	f1c2 0220 	rsb	r2, r2, #32
   854cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   854d0:	fa21 f202 	lsr.w	r2, r1, r2
   854d4:	eb43 0002 	adc.w	r0, r3, r2
   854d8:	bf08      	it	eq
   854da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   854de:	4770      	bx	lr

000854e0 <__aeabi_fmul>:
   854e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   854e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   854e8:	bf1e      	ittt	ne
   854ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   854ee:	ea92 0f0c 	teqne	r2, ip
   854f2:	ea93 0f0c 	teqne	r3, ip
   854f6:	d06f      	beq.n	855d8 <__aeabi_fmul+0xf8>
   854f8:	441a      	add	r2, r3
   854fa:	ea80 0c01 	eor.w	ip, r0, r1
   854fe:	0240      	lsls	r0, r0, #9
   85500:	bf18      	it	ne
   85502:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   85506:	d01e      	beq.n	85546 <__aeabi_fmul+0x66>
   85508:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   8550c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   85510:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   85514:	fba0 3101 	umull	r3, r1, r0, r1
   85518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8551c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   85520:	bf3e      	ittt	cc
   85522:	0049      	lslcc	r1, r1, #1
   85524:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   85528:	005b      	lslcc	r3, r3, #1
   8552a:	ea40 0001 	orr.w	r0, r0, r1
   8552e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   85532:	2afd      	cmp	r2, #253	; 0xfd
   85534:	d81d      	bhi.n	85572 <__aeabi_fmul+0x92>
   85536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   8553a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8553e:	bf08      	it	eq
   85540:	f020 0001 	biceq.w	r0, r0, #1
   85544:	4770      	bx	lr
   85546:	f090 0f00 	teq	r0, #0
   8554a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8554e:	bf08      	it	eq
   85550:	0249      	lsleq	r1, r1, #9
   85552:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   85556:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   8555a:	3a7f      	subs	r2, #127	; 0x7f
   8555c:	bfc2      	ittt	gt
   8555e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   85562:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   85566:	4770      	bxgt	lr
   85568:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8556c:	f04f 0300 	mov.w	r3, #0
   85570:	3a01      	subs	r2, #1
   85572:	dc5d      	bgt.n	85630 <__aeabi_fmul+0x150>
   85574:	f112 0f19 	cmn.w	r2, #25
   85578:	bfdc      	itt	le
   8557a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8557e:	4770      	bxle	lr
   85580:	f1c2 0200 	rsb	r2, r2, #0
   85584:	0041      	lsls	r1, r0, #1
   85586:	fa21 f102 	lsr.w	r1, r1, r2
   8558a:	f1c2 0220 	rsb	r2, r2, #32
   8558e:	fa00 fc02 	lsl.w	ip, r0, r2
   85592:	ea5f 0031 	movs.w	r0, r1, rrx
   85596:	f140 0000 	adc.w	r0, r0, #0
   8559a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8559e:	bf08      	it	eq
   855a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   855a4:	4770      	bx	lr
   855a6:	f092 0f00 	teq	r2, #0
   855aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   855ae:	bf02      	ittt	eq
   855b0:	0040      	lsleq	r0, r0, #1
   855b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   855b6:	3a01      	subeq	r2, #1
   855b8:	d0f9      	beq.n	855ae <__aeabi_fmul+0xce>
   855ba:	ea40 000c 	orr.w	r0, r0, ip
   855be:	f093 0f00 	teq	r3, #0
   855c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   855c6:	bf02      	ittt	eq
   855c8:	0049      	lsleq	r1, r1, #1
   855ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   855ce:	3b01      	subeq	r3, #1
   855d0:	d0f9      	beq.n	855c6 <__aeabi_fmul+0xe6>
   855d2:	ea41 010c 	orr.w	r1, r1, ip
   855d6:	e78f      	b.n	854f8 <__aeabi_fmul+0x18>
   855d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   855dc:	ea92 0f0c 	teq	r2, ip
   855e0:	bf18      	it	ne
   855e2:	ea93 0f0c 	teqne	r3, ip
   855e6:	d00a      	beq.n	855fe <__aeabi_fmul+0x11e>
   855e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   855ec:	bf18      	it	ne
   855ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   855f2:	d1d8      	bne.n	855a6 <__aeabi_fmul+0xc6>
   855f4:	ea80 0001 	eor.w	r0, r0, r1
   855f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   855fc:	4770      	bx	lr
   855fe:	f090 0f00 	teq	r0, #0
   85602:	bf17      	itett	ne
   85604:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   85608:	4608      	moveq	r0, r1
   8560a:	f091 0f00 	teqne	r1, #0
   8560e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   85612:	d014      	beq.n	8563e <__aeabi_fmul+0x15e>
   85614:	ea92 0f0c 	teq	r2, ip
   85618:	d101      	bne.n	8561e <__aeabi_fmul+0x13e>
   8561a:	0242      	lsls	r2, r0, #9
   8561c:	d10f      	bne.n	8563e <__aeabi_fmul+0x15e>
   8561e:	ea93 0f0c 	teq	r3, ip
   85622:	d103      	bne.n	8562c <__aeabi_fmul+0x14c>
   85624:	024b      	lsls	r3, r1, #9
   85626:	bf18      	it	ne
   85628:	4608      	movne	r0, r1
   8562a:	d108      	bne.n	8563e <__aeabi_fmul+0x15e>
   8562c:	ea80 0001 	eor.w	r0, r0, r1
   85630:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   85634:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   85638:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8563c:	4770      	bx	lr
   8563e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   85642:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   85646:	4770      	bx	lr

00085648 <__aeabi_fdiv>:
   85648:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8564c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   85650:	bf1e      	ittt	ne
   85652:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   85656:	ea92 0f0c 	teqne	r2, ip
   8565a:	ea93 0f0c 	teqne	r3, ip
   8565e:	d069      	beq.n	85734 <__aeabi_fdiv+0xec>
   85660:	eba2 0203 	sub.w	r2, r2, r3
   85664:	ea80 0c01 	eor.w	ip, r0, r1
   85668:	0249      	lsls	r1, r1, #9
   8566a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8566e:	d037      	beq.n	856e0 <__aeabi_fdiv+0x98>
   85670:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   85674:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   85678:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   8567c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   85680:	428b      	cmp	r3, r1
   85682:	bf38      	it	cc
   85684:	005b      	lslcc	r3, r3, #1
   85686:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8568a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8568e:	428b      	cmp	r3, r1
   85690:	bf24      	itt	cs
   85692:	1a5b      	subcs	r3, r3, r1
   85694:	ea40 000c 	orrcs.w	r0, r0, ip
   85698:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   8569c:	bf24      	itt	cs
   8569e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   856a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   856a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   856aa:	bf24      	itt	cs
   856ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   856b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   856b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   856b8:	bf24      	itt	cs
   856ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   856be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   856c2:	011b      	lsls	r3, r3, #4
   856c4:	bf18      	it	ne
   856c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   856ca:	d1e0      	bne.n	8568e <__aeabi_fdiv+0x46>
   856cc:	2afd      	cmp	r2, #253	; 0xfd
   856ce:	f63f af50 	bhi.w	85572 <__aeabi_fmul+0x92>
   856d2:	428b      	cmp	r3, r1
   856d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   856d8:	bf08      	it	eq
   856da:	f020 0001 	biceq.w	r0, r0, #1
   856de:	4770      	bx	lr
   856e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   856e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   856e8:	327f      	adds	r2, #127	; 0x7f
   856ea:	bfc2      	ittt	gt
   856ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   856f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   856f4:	4770      	bxgt	lr
   856f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   856fa:	f04f 0300 	mov.w	r3, #0
   856fe:	3a01      	subs	r2, #1
   85700:	e737      	b.n	85572 <__aeabi_fmul+0x92>
   85702:	f092 0f00 	teq	r2, #0
   85706:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8570a:	bf02      	ittt	eq
   8570c:	0040      	lsleq	r0, r0, #1
   8570e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   85712:	3a01      	subeq	r2, #1
   85714:	d0f9      	beq.n	8570a <__aeabi_fdiv+0xc2>
   85716:	ea40 000c 	orr.w	r0, r0, ip
   8571a:	f093 0f00 	teq	r3, #0
   8571e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   85722:	bf02      	ittt	eq
   85724:	0049      	lsleq	r1, r1, #1
   85726:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8572a:	3b01      	subeq	r3, #1
   8572c:	d0f9      	beq.n	85722 <__aeabi_fdiv+0xda>
   8572e:	ea41 010c 	orr.w	r1, r1, ip
   85732:	e795      	b.n	85660 <__aeabi_fdiv+0x18>
   85734:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   85738:	ea92 0f0c 	teq	r2, ip
   8573c:	d108      	bne.n	85750 <__aeabi_fdiv+0x108>
   8573e:	0242      	lsls	r2, r0, #9
   85740:	f47f af7d 	bne.w	8563e <__aeabi_fmul+0x15e>
   85744:	ea93 0f0c 	teq	r3, ip
   85748:	f47f af70 	bne.w	8562c <__aeabi_fmul+0x14c>
   8574c:	4608      	mov	r0, r1
   8574e:	e776      	b.n	8563e <__aeabi_fmul+0x15e>
   85750:	ea93 0f0c 	teq	r3, ip
   85754:	d104      	bne.n	85760 <__aeabi_fdiv+0x118>
   85756:	024b      	lsls	r3, r1, #9
   85758:	f43f af4c 	beq.w	855f4 <__aeabi_fmul+0x114>
   8575c:	4608      	mov	r0, r1
   8575e:	e76e      	b.n	8563e <__aeabi_fmul+0x15e>
   85760:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   85764:	bf18      	it	ne
   85766:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8576a:	d1ca      	bne.n	85702 <__aeabi_fdiv+0xba>
   8576c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   85770:	f47f af5c 	bne.w	8562c <__aeabi_fmul+0x14c>
   85774:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   85778:	f47f af3c 	bne.w	855f4 <__aeabi_fmul+0x114>
   8577c:	e75f      	b.n	8563e <__aeabi_fmul+0x15e>
   8577e:	bf00      	nop

00085780 <__gesf2>:
   85780:	f04f 3cff 	mov.w	ip, #4294967295
   85784:	e006      	b.n	85794 <__cmpsf2+0x4>
   85786:	bf00      	nop

00085788 <__lesf2>:
   85788:	f04f 0c01 	mov.w	ip, #1
   8578c:	e002      	b.n	85794 <__cmpsf2+0x4>
   8578e:	bf00      	nop

00085790 <__cmpsf2>:
   85790:	f04f 0c01 	mov.w	ip, #1
   85794:	f84d cd04 	str.w	ip, [sp, #-4]!
   85798:	ea4f 0240 	mov.w	r2, r0, lsl #1
   8579c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   857a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   857a4:	bf18      	it	ne
   857a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   857aa:	d011      	beq.n	857d0 <__cmpsf2+0x40>
   857ac:	b001      	add	sp, #4
   857ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   857b2:	bf18      	it	ne
   857b4:	ea90 0f01 	teqne	r0, r1
   857b8:	bf58      	it	pl
   857ba:	ebb2 0003 	subspl.w	r0, r2, r3
   857be:	bf88      	it	hi
   857c0:	17c8      	asrhi	r0, r1, #31
   857c2:	bf38      	it	cc
   857c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   857c8:	bf18      	it	ne
   857ca:	f040 0001 	orrne.w	r0, r0, #1
   857ce:	4770      	bx	lr
   857d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   857d4:	d102      	bne.n	857dc <__cmpsf2+0x4c>
   857d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   857da:	d105      	bne.n	857e8 <__cmpsf2+0x58>
   857dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   857e0:	d1e4      	bne.n	857ac <__cmpsf2+0x1c>
   857e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   857e6:	d0e1      	beq.n	857ac <__cmpsf2+0x1c>
   857e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   857ec:	4770      	bx	lr
   857ee:	bf00      	nop

000857f0 <__aeabi_cfrcmple>:
   857f0:	4684      	mov	ip, r0
   857f2:	4608      	mov	r0, r1
   857f4:	4661      	mov	r1, ip
   857f6:	e7ff      	b.n	857f8 <__aeabi_cfcmpeq>

000857f8 <__aeabi_cfcmpeq>:
   857f8:	b50f      	push	{r0, r1, r2, r3, lr}
   857fa:	f7ff ffc9 	bl	85790 <__cmpsf2>
   857fe:	2800      	cmp	r0, #0
   85800:	bf48      	it	mi
   85802:	f110 0f00 	cmnmi.w	r0, #0
   85806:	bd0f      	pop	{r0, r1, r2, r3, pc}

00085808 <__aeabi_fcmpeq>:
   85808:	f84d ed08 	str.w	lr, [sp, #-8]!
   8580c:	f7ff fff4 	bl	857f8 <__aeabi_cfcmpeq>
   85810:	bf0c      	ite	eq
   85812:	2001      	moveq	r0, #1
   85814:	2000      	movne	r0, #0
   85816:	f85d fb08 	ldr.w	pc, [sp], #8
   8581a:	bf00      	nop

0008581c <__aeabi_fcmplt>:
   8581c:	f84d ed08 	str.w	lr, [sp, #-8]!
   85820:	f7ff ffea 	bl	857f8 <__aeabi_cfcmpeq>
   85824:	bf34      	ite	cc
   85826:	2001      	movcc	r0, #1
   85828:	2000      	movcs	r0, #0
   8582a:	f85d fb08 	ldr.w	pc, [sp], #8
   8582e:	bf00      	nop

00085830 <__aeabi_fcmple>:
   85830:	f84d ed08 	str.w	lr, [sp, #-8]!
   85834:	f7ff ffe0 	bl	857f8 <__aeabi_cfcmpeq>
   85838:	bf94      	ite	ls
   8583a:	2001      	movls	r0, #1
   8583c:	2000      	movhi	r0, #0
   8583e:	f85d fb08 	ldr.w	pc, [sp], #8
   85842:	bf00      	nop

00085844 <__aeabi_fcmpge>:
   85844:	f84d ed08 	str.w	lr, [sp, #-8]!
   85848:	f7ff ffd2 	bl	857f0 <__aeabi_cfrcmple>
   8584c:	bf94      	ite	ls
   8584e:	2001      	movls	r0, #1
   85850:	2000      	movhi	r0, #0
   85852:	f85d fb08 	ldr.w	pc, [sp], #8
   85856:	bf00      	nop

00085858 <__aeabi_fcmpgt>:
   85858:	f84d ed08 	str.w	lr, [sp, #-8]!
   8585c:	f7ff ffc8 	bl	857f0 <__aeabi_cfrcmple>
   85860:	bf34      	ite	cc
   85862:	2001      	movcc	r0, #1
   85864:	2000      	movcs	r0, #0
   85866:	f85d fb08 	ldr.w	pc, [sp], #8
   8586a:	bf00      	nop

0008586c <__aeabi_f2iz>:
   8586c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   85870:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   85874:	d30f      	bcc.n	85896 <__aeabi_f2iz+0x2a>
   85876:	f04f 039e 	mov.w	r3, #158	; 0x9e
   8587a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   8587e:	d90d      	bls.n	8589c <__aeabi_f2iz+0x30>
   85880:	ea4f 2300 	mov.w	r3, r0, lsl #8
   85884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   85888:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8588c:	fa23 f002 	lsr.w	r0, r3, r2
   85890:	bf18      	it	ne
   85892:	4240      	negne	r0, r0
   85894:	4770      	bx	lr
   85896:	f04f 0000 	mov.w	r0, #0
   8589a:	4770      	bx	lr
   8589c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   858a0:	d101      	bne.n	858a6 <__aeabi_f2iz+0x3a>
   858a2:	0242      	lsls	r2, r0, #9
   858a4:	d105      	bne.n	858b2 <__aeabi_f2iz+0x46>
   858a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   858aa:	bf08      	it	eq
   858ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   858b0:	4770      	bx	lr
   858b2:	f04f 0000 	mov.w	r0, #0
   858b6:	4770      	bx	lr

000858b8 <__libc_init_array>:
   858b8:	b570      	push	{r4, r5, r6, lr}
   858ba:	4e0f      	ldr	r6, [pc, #60]	; (858f8 <__libc_init_array+0x40>)
   858bc:	4d0f      	ldr	r5, [pc, #60]	; (858fc <__libc_init_array+0x44>)
   858be:	1b76      	subs	r6, r6, r5
   858c0:	10b6      	asrs	r6, r6, #2
   858c2:	bf18      	it	ne
   858c4:	2400      	movne	r4, #0
   858c6:	d005      	beq.n	858d4 <__libc_init_array+0x1c>
   858c8:	3401      	adds	r4, #1
   858ca:	f855 3b04 	ldr.w	r3, [r5], #4
   858ce:	4798      	blx	r3
   858d0:	42a6      	cmp	r6, r4
   858d2:	d1f9      	bne.n	858c8 <__libc_init_array+0x10>
   858d4:	4e0a      	ldr	r6, [pc, #40]	; (85900 <__libc_init_array+0x48>)
   858d6:	4d0b      	ldr	r5, [pc, #44]	; (85904 <__libc_init_array+0x4c>)
   858d8:	f004 fa86 	bl	89de8 <_init>
   858dc:	1b76      	subs	r6, r6, r5
   858de:	10b6      	asrs	r6, r6, #2
   858e0:	bf18      	it	ne
   858e2:	2400      	movne	r4, #0
   858e4:	d006      	beq.n	858f4 <__libc_init_array+0x3c>
   858e6:	3401      	adds	r4, #1
   858e8:	f855 3b04 	ldr.w	r3, [r5], #4
   858ec:	4798      	blx	r3
   858ee:	42a6      	cmp	r6, r4
   858f0:	d1f9      	bne.n	858e6 <__libc_init_array+0x2e>
   858f2:	bd70      	pop	{r4, r5, r6, pc}
   858f4:	bd70      	pop	{r4, r5, r6, pc}
   858f6:	bf00      	nop
   858f8:	00089df4 	.word	0x00089df4
   858fc:	00089df4 	.word	0x00089df4
   85900:	00089dfc 	.word	0x00089dfc
   85904:	00089df4 	.word	0x00089df4

00085908 <memset>:
   85908:	b470      	push	{r4, r5, r6}
   8590a:	0786      	lsls	r6, r0, #30
   8590c:	d046      	beq.n	8599c <memset+0x94>
   8590e:	1e54      	subs	r4, r2, #1
   85910:	2a00      	cmp	r2, #0
   85912:	d041      	beq.n	85998 <memset+0x90>
   85914:	b2ca      	uxtb	r2, r1
   85916:	4603      	mov	r3, r0
   85918:	e002      	b.n	85920 <memset+0x18>
   8591a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8591e:	d33b      	bcc.n	85998 <memset+0x90>
   85920:	f803 2b01 	strb.w	r2, [r3], #1
   85924:	079d      	lsls	r5, r3, #30
   85926:	d1f8      	bne.n	8591a <memset+0x12>
   85928:	2c03      	cmp	r4, #3
   8592a:	d92e      	bls.n	8598a <memset+0x82>
   8592c:	b2cd      	uxtb	r5, r1
   8592e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   85932:	2c0f      	cmp	r4, #15
   85934:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85938:	d919      	bls.n	8596e <memset+0x66>
   8593a:	4626      	mov	r6, r4
   8593c:	f103 0210 	add.w	r2, r3, #16
   85940:	3e10      	subs	r6, #16
   85942:	2e0f      	cmp	r6, #15
   85944:	f842 5c10 	str.w	r5, [r2, #-16]
   85948:	f842 5c0c 	str.w	r5, [r2, #-12]
   8594c:	f842 5c08 	str.w	r5, [r2, #-8]
   85950:	f842 5c04 	str.w	r5, [r2, #-4]
   85954:	f102 0210 	add.w	r2, r2, #16
   85958:	d8f2      	bhi.n	85940 <memset+0x38>
   8595a:	f1a4 0210 	sub.w	r2, r4, #16
   8595e:	f022 020f 	bic.w	r2, r2, #15
   85962:	f004 040f 	and.w	r4, r4, #15
   85966:	3210      	adds	r2, #16
   85968:	2c03      	cmp	r4, #3
   8596a:	4413      	add	r3, r2
   8596c:	d90d      	bls.n	8598a <memset+0x82>
   8596e:	461e      	mov	r6, r3
   85970:	4622      	mov	r2, r4
   85972:	3a04      	subs	r2, #4
   85974:	2a03      	cmp	r2, #3
   85976:	f846 5b04 	str.w	r5, [r6], #4
   8597a:	d8fa      	bhi.n	85972 <memset+0x6a>
   8597c:	1f22      	subs	r2, r4, #4
   8597e:	f022 0203 	bic.w	r2, r2, #3
   85982:	3204      	adds	r2, #4
   85984:	4413      	add	r3, r2
   85986:	f004 0403 	and.w	r4, r4, #3
   8598a:	b12c      	cbz	r4, 85998 <memset+0x90>
   8598c:	b2c9      	uxtb	r1, r1
   8598e:	441c      	add	r4, r3
   85990:	f803 1b01 	strb.w	r1, [r3], #1
   85994:	429c      	cmp	r4, r3
   85996:	d1fb      	bne.n	85990 <memset+0x88>
   85998:	bc70      	pop	{r4, r5, r6}
   8599a:	4770      	bx	lr
   8599c:	4614      	mov	r4, r2
   8599e:	4603      	mov	r3, r0
   859a0:	e7c2      	b.n	85928 <memset+0x20>
   859a2:	bf00      	nop

000859a4 <sprintf>:
   859a4:	b40e      	push	{r1, r2, r3}
   859a6:	4601      	mov	r1, r0
   859a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   859aa:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   859ae:	f44f 7702 	mov.w	r7, #520	; 0x208
   859b2:	f64f 76ff 	movw	r6, #65535	; 0xffff
   859b6:	b09c      	sub	sp, #112	; 0x70
   859b8:	ac21      	add	r4, sp, #132	; 0x84
   859ba:	f854 2b04 	ldr.w	r2, [r4], #4
   859be:	4b0b      	ldr	r3, [pc, #44]	; (859ec <sprintf+0x48>)
   859c0:	9102      	str	r1, [sp, #8]
   859c2:	9106      	str	r1, [sp, #24]
   859c4:	6818      	ldr	r0, [r3, #0]
   859c6:	a902      	add	r1, sp, #8
   859c8:	4623      	mov	r3, r4
   859ca:	9401      	str	r4, [sp, #4]
   859cc:	f8ad 7014 	strh.w	r7, [sp, #20]
   859d0:	9504      	str	r5, [sp, #16]
   859d2:	9507      	str	r5, [sp, #28]
   859d4:	f8ad 6016 	strh.w	r6, [sp, #22]
   859d8:	f000 f838 	bl	85a4c <_svfprintf_r>
   859dc:	2200      	movs	r2, #0
   859de:	9b02      	ldr	r3, [sp, #8]
   859e0:	701a      	strb	r2, [r3, #0]
   859e2:	b01c      	add	sp, #112	; 0x70
   859e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   859e8:	b003      	add	sp, #12
   859ea:	4770      	bx	lr
   859ec:	200701a4 	.word	0x200701a4

000859f0 <strlen>:
   859f0:	f020 0103 	bic.w	r1, r0, #3
   859f4:	f010 0003 	ands.w	r0, r0, #3
   859f8:	f1c0 0000 	rsb	r0, r0, #0
   859fc:	f851 3b04 	ldr.w	r3, [r1], #4
   85a00:	f100 0c04 	add.w	ip, r0, #4
   85a04:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   85a08:	f06f 0200 	mvn.w	r2, #0
   85a0c:	bf1c      	itt	ne
   85a0e:	fa22 f20c 	lsrne.w	r2, r2, ip
   85a12:	4313      	orrne	r3, r2
   85a14:	f04f 0c01 	mov.w	ip, #1
   85a18:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   85a1c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   85a20:	eba3 020c 	sub.w	r2, r3, ip
   85a24:	ea22 0203 	bic.w	r2, r2, r3
   85a28:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   85a2c:	bf04      	itt	eq
   85a2e:	f851 3b04 	ldreq.w	r3, [r1], #4
   85a32:	3004      	addeq	r0, #4
   85a34:	d0f4      	beq.n	85a20 <strlen+0x30>
   85a36:	f1c2 0100 	rsb	r1, r2, #0
   85a3a:	ea02 0201 	and.w	r2, r2, r1
   85a3e:	fab2 f282 	clz	r2, r2
   85a42:	f1c2 021f 	rsb	r2, r2, #31
   85a46:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   85a4a:	4770      	bx	lr

00085a4c <_svfprintf_r>:
   85a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85a50:	b0c3      	sub	sp, #268	; 0x10c
   85a52:	460c      	mov	r4, r1
   85a54:	910b      	str	r1, [sp, #44]	; 0x2c
   85a56:	4692      	mov	sl, r2
   85a58:	930f      	str	r3, [sp, #60]	; 0x3c
   85a5a:	900c      	str	r0, [sp, #48]	; 0x30
   85a5c:	f002 fa58 	bl	87f10 <_localeconv_r>
   85a60:	6803      	ldr	r3, [r0, #0]
   85a62:	4618      	mov	r0, r3
   85a64:	931a      	str	r3, [sp, #104]	; 0x68
   85a66:	f7ff ffc3 	bl	859f0 <strlen>
   85a6a:	89a3      	ldrh	r3, [r4, #12]
   85a6c:	9019      	str	r0, [sp, #100]	; 0x64
   85a6e:	0619      	lsls	r1, r3, #24
   85a70:	d503      	bpl.n	85a7a <_svfprintf_r+0x2e>
   85a72:	6923      	ldr	r3, [r4, #16]
   85a74:	2b00      	cmp	r3, #0
   85a76:	f001 8035 	beq.w	86ae4 <_svfprintf_r+0x1098>
   85a7a:	2300      	movs	r3, #0
   85a7c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   85a80:	46c8      	mov	r8, r9
   85a82:	9315      	str	r3, [sp, #84]	; 0x54
   85a84:	9313      	str	r3, [sp, #76]	; 0x4c
   85a86:	9314      	str	r3, [sp, #80]	; 0x50
   85a88:	9318      	str	r3, [sp, #96]	; 0x60
   85a8a:	931b      	str	r3, [sp, #108]	; 0x6c
   85a8c:	9309      	str	r3, [sp, #36]	; 0x24
   85a8e:	9316      	str	r3, [sp, #88]	; 0x58
   85a90:	9317      	str	r3, [sp, #92]	; 0x5c
   85a92:	9327      	str	r3, [sp, #156]	; 0x9c
   85a94:	9326      	str	r3, [sp, #152]	; 0x98
   85a96:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   85a9a:	f89a 3000 	ldrb.w	r3, [sl]
   85a9e:	4654      	mov	r4, sl
   85aa0:	b1eb      	cbz	r3, 85ade <_svfprintf_r+0x92>
   85aa2:	2b25      	cmp	r3, #37	; 0x25
   85aa4:	d102      	bne.n	85aac <_svfprintf_r+0x60>
   85aa6:	e01a      	b.n	85ade <_svfprintf_r+0x92>
   85aa8:	2b25      	cmp	r3, #37	; 0x25
   85aaa:	d003      	beq.n	85ab4 <_svfprintf_r+0x68>
   85aac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   85ab0:	2b00      	cmp	r3, #0
   85ab2:	d1f9      	bne.n	85aa8 <_svfprintf_r+0x5c>
   85ab4:	eba4 050a 	sub.w	r5, r4, sl
   85ab8:	b18d      	cbz	r5, 85ade <_svfprintf_r+0x92>
   85aba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85abc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85abe:	3301      	adds	r3, #1
   85ac0:	442a      	add	r2, r5
   85ac2:	2b07      	cmp	r3, #7
   85ac4:	f8c8 a000 	str.w	sl, [r8]
   85ac8:	f8c8 5004 	str.w	r5, [r8, #4]
   85acc:	9227      	str	r2, [sp, #156]	; 0x9c
   85ace:	9326      	str	r3, [sp, #152]	; 0x98
   85ad0:	f300 808a 	bgt.w	85be8 <_svfprintf_r+0x19c>
   85ad4:	f108 0808 	add.w	r8, r8, #8
   85ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85ada:	442b      	add	r3, r5
   85adc:	9309      	str	r3, [sp, #36]	; 0x24
   85ade:	7823      	ldrb	r3, [r4, #0]
   85ae0:	2b00      	cmp	r3, #0
   85ae2:	f000 8089 	beq.w	85bf8 <_svfprintf_r+0x1ac>
   85ae6:	2300      	movs	r3, #0
   85ae8:	f04f 30ff 	mov.w	r0, #4294967295
   85aec:	461a      	mov	r2, r3
   85aee:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85af2:	4619      	mov	r1, r3
   85af4:	930d      	str	r3, [sp, #52]	; 0x34
   85af6:	469b      	mov	fp, r3
   85af8:	7863      	ldrb	r3, [r4, #1]
   85afa:	f104 0a01 	add.w	sl, r4, #1
   85afe:	900a      	str	r0, [sp, #40]	; 0x28
   85b00:	f10a 0a01 	add.w	sl, sl, #1
   85b04:	f1a3 0020 	sub.w	r0, r3, #32
   85b08:	2858      	cmp	r0, #88	; 0x58
   85b0a:	f200 83b7 	bhi.w	8627c <_svfprintf_r+0x830>
   85b0e:	e8df f010 	tbh	[pc, r0, lsl #1]
   85b12:	034c      	.short	0x034c
   85b14:	03b503b5 	.word	0x03b503b5
   85b18:	03b50354 	.word	0x03b50354
   85b1c:	03b503b5 	.word	0x03b503b5
   85b20:	03b503b5 	.word	0x03b503b5
   85b24:	005903b5 	.word	0x005903b5
   85b28:	03b50359 	.word	0x03b50359
   85b2c:	02140066 	.word	0x02140066
   85b30:	022f03b5 	.word	0x022f03b5
   85b34:	03a503a5 	.word	0x03a503a5
   85b38:	03a503a5 	.word	0x03a503a5
   85b3c:	03a503a5 	.word	0x03a503a5
   85b40:	03a503a5 	.word	0x03a503a5
   85b44:	03b503a5 	.word	0x03b503a5
   85b48:	03b503b5 	.word	0x03b503b5
   85b4c:	03b503b5 	.word	0x03b503b5
   85b50:	03b503b5 	.word	0x03b503b5
   85b54:	03b503b5 	.word	0x03b503b5
   85b58:	028b03b5 	.word	0x028b03b5
   85b5c:	03b502d3 	.word	0x03b502d3
   85b60:	03b502d3 	.word	0x03b502d3
   85b64:	03b503b5 	.word	0x03b503b5
   85b68:	031b03b5 	.word	0x031b03b5
   85b6c:	03b503b5 	.word	0x03b503b5
   85b70:	03b50320 	.word	0x03b50320
   85b74:	03b503b5 	.word	0x03b503b5
   85b78:	03b503b5 	.word	0x03b503b5
   85b7c:	03b50234 	.word	0x03b50234
   85b80:	024b03b5 	.word	0x024b03b5
   85b84:	03b503b5 	.word	0x03b503b5
   85b88:	03b503b5 	.word	0x03b503b5
   85b8c:	03b503b5 	.word	0x03b503b5
   85b90:	03b503b5 	.word	0x03b503b5
   85b94:	03b503b5 	.word	0x03b503b5
   85b98:	039e0276 	.word	0x039e0276
   85b9c:	02d302d3 	.word	0x02d302d3
   85ba0:	036302d3 	.word	0x036302d3
   85ba4:	03b5039e 	.word	0x03b5039e
   85ba8:	036803b5 	.word	0x036803b5
   85bac:	037503b5 	.word	0x037503b5
   85bb0:	038c01dd 	.word	0x038c01dd
   85bb4:	03b5035e 	.word	0x03b5035e
   85bb8:	03b501f2 	.word	0x03b501f2
   85bbc:	03b50087 	.word	0x03b50087
   85bc0:	033203b5 	.word	0x033203b5
   85bc4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85bc6:	6823      	ldr	r3, [r4, #0]
   85bc8:	4618      	mov	r0, r3
   85bca:	930d      	str	r3, [sp, #52]	; 0x34
   85bcc:	4623      	mov	r3, r4
   85bce:	2800      	cmp	r0, #0
   85bd0:	f103 0304 	add.w	r3, r3, #4
   85bd4:	930f      	str	r3, [sp, #60]	; 0x3c
   85bd6:	da04      	bge.n	85be2 <_svfprintf_r+0x196>
   85bd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85bda:	425b      	negs	r3, r3
   85bdc:	930d      	str	r3, [sp, #52]	; 0x34
   85bde:	f04b 0b04 	orr.w	fp, fp, #4
   85be2:	f89a 3000 	ldrb.w	r3, [sl]
   85be6:	e78b      	b.n	85b00 <_svfprintf_r+0xb4>
   85be8:	aa25      	add	r2, sp, #148	; 0x94
   85bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85bec:	980c      	ldr	r0, [sp, #48]	; 0x30
   85bee:	f003 f819 	bl	88c24 <__ssprint_r>
   85bf2:	b940      	cbnz	r0, 85c06 <_svfprintf_r+0x1ba>
   85bf4:	46c8      	mov	r8, r9
   85bf6:	e76f      	b.n	85ad8 <_svfprintf_r+0x8c>
   85bf8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   85bfa:	b123      	cbz	r3, 85c06 <_svfprintf_r+0x1ba>
   85bfc:	980c      	ldr	r0, [sp, #48]	; 0x30
   85bfe:	aa25      	add	r2, sp, #148	; 0x94
   85c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85c02:	f003 f80f 	bl	88c24 <__ssprint_r>
   85c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85c08:	899b      	ldrh	r3, [r3, #12]
   85c0a:	f013 0f40 	tst.w	r3, #64	; 0x40
   85c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85c10:	bf18      	it	ne
   85c12:	f04f 33ff 	movne.w	r3, #4294967295
   85c16:	9309      	str	r3, [sp, #36]	; 0x24
   85c18:	9809      	ldr	r0, [sp, #36]	; 0x24
   85c1a:	b043      	add	sp, #268	; 0x10c
   85c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c20:	f01b 0f20 	tst.w	fp, #32
   85c24:	9311      	str	r3, [sp, #68]	; 0x44
   85c26:	f040 81af 	bne.w	85f88 <_svfprintf_r+0x53c>
   85c2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85c2c:	f01b 0f10 	tst.w	fp, #16
   85c30:	4613      	mov	r3, r2
   85c32:	f040 859a 	bne.w	8676a <_svfprintf_r+0xd1e>
   85c36:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85c3a:	f000 8596 	beq.w	8676a <_svfprintf_r+0xd1e>
   85c3e:	2500      	movs	r5, #0
   85c40:	2301      	movs	r3, #1
   85c42:	8814      	ldrh	r4, [r2, #0]
   85c44:	3204      	adds	r2, #4
   85c46:	920f      	str	r2, [sp, #60]	; 0x3c
   85c48:	2200      	movs	r2, #0
   85c4a:	4617      	mov	r7, r2
   85c4c:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   85c50:	990a      	ldr	r1, [sp, #40]	; 0x28
   85c52:	1c4a      	adds	r2, r1, #1
   85c54:	f000 8210 	beq.w	86078 <_svfprintf_r+0x62c>
   85c58:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   85c5c:	9207      	str	r2, [sp, #28]
   85c5e:	ea54 0205 	orrs.w	r2, r4, r5
   85c62:	f040 820f 	bne.w	86084 <_svfprintf_r+0x638>
   85c66:	2900      	cmp	r1, #0
   85c68:	f040 8431 	bne.w	864ce <_svfprintf_r+0xa82>
   85c6c:	2b00      	cmp	r3, #0
   85c6e:	f040 8539 	bne.w	866e4 <_svfprintf_r+0xc98>
   85c72:	f01b 0301 	ands.w	r3, fp, #1
   85c76:	930e      	str	r3, [sp, #56]	; 0x38
   85c78:	f000 8662 	beq.w	86940 <_svfprintf_r+0xef4>
   85c7c:	2330      	movs	r3, #48	; 0x30
   85c7e:	ae42      	add	r6, sp, #264	; 0x108
   85c80:	f806 3d41 	strb.w	r3, [r6, #-65]!
   85c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85c86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85c88:	4293      	cmp	r3, r2
   85c8a:	bfb8      	it	lt
   85c8c:	4613      	movlt	r3, r2
   85c8e:	9308      	str	r3, [sp, #32]
   85c90:	2300      	movs	r3, #0
   85c92:	9312      	str	r3, [sp, #72]	; 0x48
   85c94:	b117      	cbz	r7, 85c9c <_svfprintf_r+0x250>
   85c96:	9b08      	ldr	r3, [sp, #32]
   85c98:	3301      	adds	r3, #1
   85c9a:	9308      	str	r3, [sp, #32]
   85c9c:	9b07      	ldr	r3, [sp, #28]
   85c9e:	f013 0302 	ands.w	r3, r3, #2
   85ca2:	9310      	str	r3, [sp, #64]	; 0x40
   85ca4:	d002      	beq.n	85cac <_svfprintf_r+0x260>
   85ca6:	9b08      	ldr	r3, [sp, #32]
   85ca8:	3302      	adds	r3, #2
   85caa:	9308      	str	r3, [sp, #32]
   85cac:	9b07      	ldr	r3, [sp, #28]
   85cae:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   85cb2:	f040 8310 	bne.w	862d6 <_svfprintf_r+0x88a>
   85cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85cb8:	9a08      	ldr	r2, [sp, #32]
   85cba:	eba3 0b02 	sub.w	fp, r3, r2
   85cbe:	f1bb 0f00 	cmp.w	fp, #0
   85cc2:	f340 8308 	ble.w	862d6 <_svfprintf_r+0x88a>
   85cc6:	f1bb 0f10 	cmp.w	fp, #16
   85cca:	f340 87b2 	ble.w	86c32 <_svfprintf_r+0x11e6>
   85cce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85cd0:	4643      	mov	r3, r8
   85cd2:	4621      	mov	r1, r4
   85cd4:	46a8      	mov	r8, r5
   85cd6:	2710      	movs	r7, #16
   85cd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85cda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85cdc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85cde:	e006      	b.n	85cee <_svfprintf_r+0x2a2>
   85ce0:	f1ab 0b10 	sub.w	fp, fp, #16
   85ce4:	f1bb 0f10 	cmp.w	fp, #16
   85ce8:	f103 0308 	add.w	r3, r3, #8
   85cec:	dd18      	ble.n	85d20 <_svfprintf_r+0x2d4>
   85cee:	3201      	adds	r2, #1
   85cf0:	48ab      	ldr	r0, [pc, #684]	; (85fa0 <_svfprintf_r+0x554>)
   85cf2:	3110      	adds	r1, #16
   85cf4:	2a07      	cmp	r2, #7
   85cf6:	9127      	str	r1, [sp, #156]	; 0x9c
   85cf8:	9226      	str	r2, [sp, #152]	; 0x98
   85cfa:	e883 0081 	stmia.w	r3, {r0, r7}
   85cfe:	ddef      	ble.n	85ce0 <_svfprintf_r+0x294>
   85d00:	aa25      	add	r2, sp, #148	; 0x94
   85d02:	4629      	mov	r1, r5
   85d04:	4620      	mov	r0, r4
   85d06:	f002 ff8d 	bl	88c24 <__ssprint_r>
   85d0a:	2800      	cmp	r0, #0
   85d0c:	f47f af7b 	bne.w	85c06 <_svfprintf_r+0x1ba>
   85d10:	f1ab 0b10 	sub.w	fp, fp, #16
   85d14:	f1bb 0f10 	cmp.w	fp, #16
   85d18:	464b      	mov	r3, r9
   85d1a:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85d1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85d1e:	dce6      	bgt.n	85cee <_svfprintf_r+0x2a2>
   85d20:	4645      	mov	r5, r8
   85d22:	460c      	mov	r4, r1
   85d24:	4698      	mov	r8, r3
   85d26:	3201      	adds	r2, #1
   85d28:	4b9d      	ldr	r3, [pc, #628]	; (85fa0 <_svfprintf_r+0x554>)
   85d2a:	445c      	add	r4, fp
   85d2c:	2a07      	cmp	r2, #7
   85d2e:	9427      	str	r4, [sp, #156]	; 0x9c
   85d30:	9226      	str	r2, [sp, #152]	; 0x98
   85d32:	e888 0808 	stmia.w	r8, {r3, fp}
   85d36:	f300 82c3 	bgt.w	862c0 <_svfprintf_r+0x874>
   85d3a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85d3e:	f108 0808 	add.w	r8, r8, #8
   85d42:	b187      	cbz	r7, 85d66 <_svfprintf_r+0x31a>
   85d44:	2101      	movs	r1, #1
   85d46:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85d48:	440c      	add	r4, r1
   85d4a:	440b      	add	r3, r1
   85d4c:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   85d50:	2b07      	cmp	r3, #7
   85d52:	9427      	str	r4, [sp, #156]	; 0x9c
   85d54:	9326      	str	r3, [sp, #152]	; 0x98
   85d56:	f8c8 1004 	str.w	r1, [r8, #4]
   85d5a:	f8c8 2000 	str.w	r2, [r8]
   85d5e:	f300 83cd 	bgt.w	864fc <_svfprintf_r+0xab0>
   85d62:	f108 0808 	add.w	r8, r8, #8
   85d66:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85d68:	b17b      	cbz	r3, 85d8a <_svfprintf_r+0x33e>
   85d6a:	2102      	movs	r1, #2
   85d6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85d6e:	440c      	add	r4, r1
   85d70:	3301      	adds	r3, #1
   85d72:	aa1e      	add	r2, sp, #120	; 0x78
   85d74:	2b07      	cmp	r3, #7
   85d76:	9427      	str	r4, [sp, #156]	; 0x9c
   85d78:	9326      	str	r3, [sp, #152]	; 0x98
   85d7a:	f8c8 1004 	str.w	r1, [r8, #4]
   85d7e:	f8c8 2000 	str.w	r2, [r8]
   85d82:	f300 8411 	bgt.w	865a8 <_svfprintf_r+0xb5c>
   85d86:	f108 0808 	add.w	r8, r8, #8
   85d8a:	2d80      	cmp	r5, #128	; 0x80
   85d8c:	f000 8304 	beq.w	86398 <_svfprintf_r+0x94c>
   85d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85d94:	1a9f      	subs	r7, r3, r2
   85d96:	2f00      	cmp	r7, #0
   85d98:	dd37      	ble.n	85e0a <_svfprintf_r+0x3be>
   85d9a:	2f10      	cmp	r7, #16
   85d9c:	f340 8679 	ble.w	86a92 <_svfprintf_r+0x1046>
   85da0:	4d80      	ldr	r5, [pc, #512]	; (85fa4 <_svfprintf_r+0x558>)
   85da2:	4642      	mov	r2, r8
   85da4:	4621      	mov	r1, r4
   85da6:	46b0      	mov	r8, r6
   85da8:	f04f 0b10 	mov.w	fp, #16
   85dac:	462e      	mov	r6, r5
   85dae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85db0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85db2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85db4:	e004      	b.n	85dc0 <_svfprintf_r+0x374>
   85db6:	3f10      	subs	r7, #16
   85db8:	2f10      	cmp	r7, #16
   85dba:	f102 0208 	add.w	r2, r2, #8
   85dbe:	dd15      	ble.n	85dec <_svfprintf_r+0x3a0>
   85dc0:	3301      	adds	r3, #1
   85dc2:	3110      	adds	r1, #16
   85dc4:	2b07      	cmp	r3, #7
   85dc6:	9127      	str	r1, [sp, #156]	; 0x9c
   85dc8:	9326      	str	r3, [sp, #152]	; 0x98
   85dca:	e882 0840 	stmia.w	r2, {r6, fp}
   85dce:	ddf2      	ble.n	85db6 <_svfprintf_r+0x36a>
   85dd0:	aa25      	add	r2, sp, #148	; 0x94
   85dd2:	4629      	mov	r1, r5
   85dd4:	4620      	mov	r0, r4
   85dd6:	f002 ff25 	bl	88c24 <__ssprint_r>
   85dda:	2800      	cmp	r0, #0
   85ddc:	f47f af13 	bne.w	85c06 <_svfprintf_r+0x1ba>
   85de0:	3f10      	subs	r7, #16
   85de2:	2f10      	cmp	r7, #16
   85de4:	464a      	mov	r2, r9
   85de6:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85de8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85dea:	dce9      	bgt.n	85dc0 <_svfprintf_r+0x374>
   85dec:	4635      	mov	r5, r6
   85dee:	460c      	mov	r4, r1
   85df0:	4646      	mov	r6, r8
   85df2:	4690      	mov	r8, r2
   85df4:	3301      	adds	r3, #1
   85df6:	443c      	add	r4, r7
   85df8:	2b07      	cmp	r3, #7
   85dfa:	9427      	str	r4, [sp, #156]	; 0x9c
   85dfc:	9326      	str	r3, [sp, #152]	; 0x98
   85dfe:	e888 00a0 	stmia.w	r8, {r5, r7}
   85e02:	f300 8370 	bgt.w	864e6 <_svfprintf_r+0xa9a>
   85e06:	f108 0808 	add.w	r8, r8, #8
   85e0a:	9b07      	ldr	r3, [sp, #28]
   85e0c:	05df      	lsls	r7, r3, #23
   85e0e:	f100 8264 	bmi.w	862da <_svfprintf_r+0x88e>
   85e12:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e14:	990e      	ldr	r1, [sp, #56]	; 0x38
   85e16:	3301      	adds	r3, #1
   85e18:	440c      	add	r4, r1
   85e1a:	2b07      	cmp	r3, #7
   85e1c:	9427      	str	r4, [sp, #156]	; 0x9c
   85e1e:	f8c8 6000 	str.w	r6, [r8]
   85e22:	f8c8 1004 	str.w	r1, [r8, #4]
   85e26:	9326      	str	r3, [sp, #152]	; 0x98
   85e28:	f300 83b3 	bgt.w	86592 <_svfprintf_r+0xb46>
   85e2c:	f108 0808 	add.w	r8, r8, #8
   85e30:	9b07      	ldr	r3, [sp, #28]
   85e32:	075b      	lsls	r3, r3, #29
   85e34:	d53b      	bpl.n	85eae <_svfprintf_r+0x462>
   85e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85e38:	9a08      	ldr	r2, [sp, #32]
   85e3a:	1a9d      	subs	r5, r3, r2
   85e3c:	2d00      	cmp	r5, #0
   85e3e:	dd36      	ble.n	85eae <_svfprintf_r+0x462>
   85e40:	2d10      	cmp	r5, #16
   85e42:	f340 8721 	ble.w	86c88 <_svfprintf_r+0x123c>
   85e46:	2610      	movs	r6, #16
   85e48:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e4a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85e4c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   85e50:	e004      	b.n	85e5c <_svfprintf_r+0x410>
   85e52:	3d10      	subs	r5, #16
   85e54:	2d10      	cmp	r5, #16
   85e56:	f108 0808 	add.w	r8, r8, #8
   85e5a:	dd16      	ble.n	85e8a <_svfprintf_r+0x43e>
   85e5c:	3301      	adds	r3, #1
   85e5e:	4a50      	ldr	r2, [pc, #320]	; (85fa0 <_svfprintf_r+0x554>)
   85e60:	3410      	adds	r4, #16
   85e62:	2b07      	cmp	r3, #7
   85e64:	9427      	str	r4, [sp, #156]	; 0x9c
   85e66:	9326      	str	r3, [sp, #152]	; 0x98
   85e68:	e888 0044 	stmia.w	r8, {r2, r6}
   85e6c:	ddf1      	ble.n	85e52 <_svfprintf_r+0x406>
   85e6e:	aa25      	add	r2, sp, #148	; 0x94
   85e70:	4659      	mov	r1, fp
   85e72:	4638      	mov	r0, r7
   85e74:	f002 fed6 	bl	88c24 <__ssprint_r>
   85e78:	2800      	cmp	r0, #0
   85e7a:	f47f aec4 	bne.w	85c06 <_svfprintf_r+0x1ba>
   85e7e:	3d10      	subs	r5, #16
   85e80:	2d10      	cmp	r5, #16
   85e82:	46c8      	mov	r8, r9
   85e84:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85e86:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e88:	dce8      	bgt.n	85e5c <_svfprintf_r+0x410>
   85e8a:	3301      	adds	r3, #1
   85e8c:	4a44      	ldr	r2, [pc, #272]	; (85fa0 <_svfprintf_r+0x554>)
   85e8e:	442c      	add	r4, r5
   85e90:	2b07      	cmp	r3, #7
   85e92:	9427      	str	r4, [sp, #156]	; 0x9c
   85e94:	9326      	str	r3, [sp, #152]	; 0x98
   85e96:	e888 0024 	stmia.w	r8, {r2, r5}
   85e9a:	dd08      	ble.n	85eae <_svfprintf_r+0x462>
   85e9c:	aa25      	add	r2, sp, #148	; 0x94
   85e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85ea0:	980c      	ldr	r0, [sp, #48]	; 0x30
   85ea2:	f002 febf 	bl	88c24 <__ssprint_r>
   85ea6:	2800      	cmp	r0, #0
   85ea8:	f47f aead 	bne.w	85c06 <_svfprintf_r+0x1ba>
   85eac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85eb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85eb2:	9908      	ldr	r1, [sp, #32]
   85eb4:	428a      	cmp	r2, r1
   85eb6:	bfac      	ite	ge
   85eb8:	189b      	addge	r3, r3, r2
   85eba:	185b      	addlt	r3, r3, r1
   85ebc:	9309      	str	r3, [sp, #36]	; 0x24
   85ebe:	2c00      	cmp	r4, #0
   85ec0:	f040 82fb 	bne.w	864ba <_svfprintf_r+0xa6e>
   85ec4:	2300      	movs	r3, #0
   85ec6:	46c8      	mov	r8, r9
   85ec8:	9326      	str	r3, [sp, #152]	; 0x98
   85eca:	e5e6      	b.n	85a9a <_svfprintf_r+0x4e>
   85ecc:	9311      	str	r3, [sp, #68]	; 0x44
   85ece:	f01b 0320 	ands.w	r3, fp, #32
   85ed2:	f040 8145 	bne.w	86160 <_svfprintf_r+0x714>
   85ed6:	f01b 0210 	ands.w	r2, fp, #16
   85eda:	f040 8466 	bne.w	867aa <_svfprintf_r+0xd5e>
   85ede:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   85ee2:	f000 8462 	beq.w	867aa <_svfprintf_r+0xd5e>
   85ee6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   85ee8:	4613      	mov	r3, r2
   85eea:	460a      	mov	r2, r1
   85eec:	3204      	adds	r2, #4
   85eee:	880c      	ldrh	r4, [r1, #0]
   85ef0:	2500      	movs	r5, #0
   85ef2:	920f      	str	r2, [sp, #60]	; 0x3c
   85ef4:	e6a8      	b.n	85c48 <_svfprintf_r+0x1fc>
   85ef6:	2500      	movs	r5, #0
   85ef8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85efa:	9311      	str	r3, [sp, #68]	; 0x44
   85efc:	6816      	ldr	r6, [r2, #0]
   85efe:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   85f02:	1d14      	adds	r4, r2, #4
   85f04:	2e00      	cmp	r6, #0
   85f06:	f000 86cd 	beq.w	86ca4 <_svfprintf_r+0x1258>
   85f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85f0c:	1c53      	adds	r3, r2, #1
   85f0e:	f000 861b 	beq.w	86b48 <_svfprintf_r+0x10fc>
   85f12:	4629      	mov	r1, r5
   85f14:	4630      	mov	r0, r6
   85f16:	f002 faaf 	bl	88478 <memchr>
   85f1a:	2800      	cmp	r0, #0
   85f1c:	f000 870d 	beq.w	86d3a <_svfprintf_r+0x12ee>
   85f20:	1b83      	subs	r3, r0, r6
   85f22:	950a      	str	r5, [sp, #40]	; 0x28
   85f24:	930e      	str	r3, [sp, #56]	; 0x38
   85f26:	940f      	str	r4, [sp, #60]	; 0x3c
   85f28:	f8cd b01c 	str.w	fp, [sp, #28]
   85f2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85f30:	9308      	str	r3, [sp, #32]
   85f32:	9512      	str	r5, [sp, #72]	; 0x48
   85f34:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85f38:	e6ac      	b.n	85c94 <_svfprintf_r+0x248>
   85f3a:	f89a 3000 	ldrb.w	r3, [sl]
   85f3e:	f10a 0401 	add.w	r4, sl, #1
   85f42:	2b2a      	cmp	r3, #42	; 0x2a
   85f44:	f000 87c2 	beq.w	86ecc <_svfprintf_r+0x1480>
   85f48:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85f4c:	2809      	cmp	r0, #9
   85f4e:	46a2      	mov	sl, r4
   85f50:	f200 8718 	bhi.w	86d84 <_svfprintf_r+0x1338>
   85f54:	2300      	movs	r3, #0
   85f56:	461c      	mov	r4, r3
   85f58:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85f5c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   85f60:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   85f64:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85f68:	2809      	cmp	r0, #9
   85f6a:	d9f5      	bls.n	85f58 <_svfprintf_r+0x50c>
   85f6c:	940a      	str	r4, [sp, #40]	; 0x28
   85f6e:	e5c9      	b.n	85b04 <_svfprintf_r+0xb8>
   85f70:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   85f74:	f89a 3000 	ldrb.w	r3, [sl]
   85f78:	e5c2      	b.n	85b00 <_svfprintf_r+0xb4>
   85f7a:	f04b 0b10 	orr.w	fp, fp, #16
   85f7e:	f01b 0f20 	tst.w	fp, #32
   85f82:	9311      	str	r3, [sp, #68]	; 0x44
   85f84:	f43f ae51 	beq.w	85c2a <_svfprintf_r+0x1de>
   85f88:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85f8a:	3407      	adds	r4, #7
   85f8c:	f024 0307 	bic.w	r3, r4, #7
   85f90:	f103 0208 	add.w	r2, r3, #8
   85f94:	e9d3 4500 	ldrd	r4, r5, [r3]
   85f98:	920f      	str	r2, [sp, #60]	; 0x3c
   85f9a:	2301      	movs	r3, #1
   85f9c:	e654      	b.n	85c48 <_svfprintf_r+0x1fc>
   85f9e:	bf00      	nop
   85fa0:	00089ba8 	.word	0x00089ba8
   85fa4:	00089bb8 	.word	0x00089bb8
   85fa8:	9311      	str	r3, [sp, #68]	; 0x44
   85faa:	2a00      	cmp	r2, #0
   85fac:	f040 87ad 	bne.w	86f0a <_svfprintf_r+0x14be>
   85fb0:	4bbe      	ldr	r3, [pc, #760]	; (862ac <_svfprintf_r+0x860>)
   85fb2:	f01b 0f20 	tst.w	fp, #32
   85fb6:	9318      	str	r3, [sp, #96]	; 0x60
   85fb8:	f040 80e7 	bne.w	8618a <_svfprintf_r+0x73e>
   85fbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85fbe:	f01b 0f10 	tst.w	fp, #16
   85fc2:	4613      	mov	r3, r2
   85fc4:	f040 83d8 	bne.w	86778 <_svfprintf_r+0xd2c>
   85fc8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85fcc:	f000 83d4 	beq.w	86778 <_svfprintf_r+0xd2c>
   85fd0:	2500      	movs	r5, #0
   85fd2:	3304      	adds	r3, #4
   85fd4:	8814      	ldrh	r4, [r2, #0]
   85fd6:	930f      	str	r3, [sp, #60]	; 0x3c
   85fd8:	f01b 0f01 	tst.w	fp, #1
   85fdc:	f000 80e3 	beq.w	861a6 <_svfprintf_r+0x75a>
   85fe0:	ea54 0305 	orrs.w	r3, r4, r5
   85fe4:	f000 80df 	beq.w	861a6 <_svfprintf_r+0x75a>
   85fe8:	2330      	movs	r3, #48	; 0x30
   85fea:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   85fee:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   85ff2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   85ff6:	f04b 0b02 	orr.w	fp, fp, #2
   85ffa:	2302      	movs	r3, #2
   85ffc:	e624      	b.n	85c48 <_svfprintf_r+0x1fc>
   85ffe:	2201      	movs	r2, #1
   86000:	9311      	str	r3, [sp, #68]	; 0x44
   86002:	2300      	movs	r3, #0
   86004:	4611      	mov	r1, r2
   86006:	980f      	ldr	r0, [sp, #60]	; 0x3c
   86008:	9208      	str	r2, [sp, #32]
   8600a:	6802      	ldr	r2, [r0, #0]
   8600c:	461f      	mov	r7, r3
   8600e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   86012:	930a      	str	r3, [sp, #40]	; 0x28
   86014:	9312      	str	r3, [sp, #72]	; 0x48
   86016:	1d03      	adds	r3, r0, #4
   86018:	f8cd b01c 	str.w	fp, [sp, #28]
   8601c:	910e      	str	r1, [sp, #56]	; 0x38
   8601e:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   86022:	930f      	str	r3, [sp, #60]	; 0x3c
   86024:	ae28      	add	r6, sp, #160	; 0xa0
   86026:	e639      	b.n	85c9c <_svfprintf_r+0x250>
   86028:	9311      	str	r3, [sp, #68]	; 0x44
   8602a:	2a00      	cmp	r2, #0
   8602c:	f040 8784 	bne.w	86f38 <_svfprintf_r+0x14ec>
   86030:	f04b 0b10 	orr.w	fp, fp, #16
   86034:	f01b 0f20 	tst.w	fp, #32
   86038:	f040 8475 	bne.w	86926 <_svfprintf_r+0xeda>
   8603c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8603e:	f01b 0f10 	tst.w	fp, #16
   86042:	4613      	mov	r3, r2
   86044:	f040 839d 	bne.w	86782 <_svfprintf_r+0xd36>
   86048:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8604c:	f000 8399 	beq.w	86782 <_svfprintf_r+0xd36>
   86050:	f9b2 4000 	ldrsh.w	r4, [r2]
   86054:	3304      	adds	r3, #4
   86056:	17e5      	asrs	r5, r4, #31
   86058:	930f      	str	r3, [sp, #60]	; 0x3c
   8605a:	4622      	mov	r2, r4
   8605c:	462b      	mov	r3, r5
   8605e:	2a00      	cmp	r2, #0
   86060:	f173 0300 	sbcs.w	r3, r3, #0
   86064:	f2c0 8398 	blt.w	86798 <_svfprintf_r+0xd4c>
   86068:	990a      	ldr	r1, [sp, #40]	; 0x28
   8606a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8606e:	1c4a      	adds	r2, r1, #1
   86070:	f04f 0301 	mov.w	r3, #1
   86074:	f47f adf0 	bne.w	85c58 <_svfprintf_r+0x20c>
   86078:	ea54 0205 	orrs.w	r2, r4, r5
   8607c:	f000 8229 	beq.w	864d2 <_svfprintf_r+0xa86>
   86080:	f8cd b01c 	str.w	fp, [sp, #28]
   86084:	2b01      	cmp	r3, #1
   86086:	f000 830e 	beq.w	866a6 <_svfprintf_r+0xc5a>
   8608a:	2b02      	cmp	r3, #2
   8608c:	f040 829c 	bne.w	865c8 <_svfprintf_r+0xb7c>
   86090:	464e      	mov	r6, r9
   86092:	9818      	ldr	r0, [sp, #96]	; 0x60
   86094:	0923      	lsrs	r3, r4, #4
   86096:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8609a:	0929      	lsrs	r1, r5, #4
   8609c:	f004 020f 	and.w	r2, r4, #15
   860a0:	460d      	mov	r5, r1
   860a2:	461c      	mov	r4, r3
   860a4:	5c83      	ldrb	r3, [r0, r2]
   860a6:	f806 3d01 	strb.w	r3, [r6, #-1]!
   860aa:	ea54 0305 	orrs.w	r3, r4, r5
   860ae:	d1f1      	bne.n	86094 <_svfprintf_r+0x648>
   860b0:	eba9 0306 	sub.w	r3, r9, r6
   860b4:	930e      	str	r3, [sp, #56]	; 0x38
   860b6:	e5e5      	b.n	85c84 <_svfprintf_r+0x238>
   860b8:	9311      	str	r3, [sp, #68]	; 0x44
   860ba:	2a00      	cmp	r2, #0
   860bc:	f040 8738 	bne.w	86f30 <_svfprintf_r+0x14e4>
   860c0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   860c2:	f01b 0f08 	tst.w	fp, #8
   860c6:	f104 0407 	add.w	r4, r4, #7
   860ca:	f000 84cf 	beq.w	86a6c <_svfprintf_r+0x1020>
   860ce:	f024 0307 	bic.w	r3, r4, #7
   860d2:	f103 0208 	add.w	r2, r3, #8
   860d6:	920f      	str	r2, [sp, #60]	; 0x3c
   860d8:	681a      	ldr	r2, [r3, #0]
   860da:	685b      	ldr	r3, [r3, #4]
   860dc:	9215      	str	r2, [sp, #84]	; 0x54
   860de:	9314      	str	r3, [sp, #80]	; 0x50
   860e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   860e2:	9d15      	ldr	r5, [sp, #84]	; 0x54
   860e4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   860e8:	4628      	mov	r0, r5
   860ea:	4621      	mov	r1, r4
   860ec:	f04f 32ff 	mov.w	r2, #4294967295
   860f0:	4b6f      	ldr	r3, [pc, #444]	; (862b0 <_svfprintf_r+0x864>)
   860f2:	f003 faa1 	bl	89638 <__aeabi_dcmpun>
   860f6:	2800      	cmp	r0, #0
   860f8:	f040 8434 	bne.w	86964 <_svfprintf_r+0xf18>
   860fc:	4628      	mov	r0, r5
   860fe:	4621      	mov	r1, r4
   86100:	f04f 32ff 	mov.w	r2, #4294967295
   86104:	4b6a      	ldr	r3, [pc, #424]	; (862b0 <_svfprintf_r+0x864>)
   86106:	f003 fa79 	bl	895fc <__aeabi_dcmple>
   8610a:	2800      	cmp	r0, #0
   8610c:	f040 842a 	bne.w	86964 <_svfprintf_r+0xf18>
   86110:	a815      	add	r0, sp, #84	; 0x54
   86112:	c80d      	ldmia	r0, {r0, r2, r3}
   86114:	9914      	ldr	r1, [sp, #80]	; 0x50
   86116:	f003 fa67 	bl	895e8 <__aeabi_dcmplt>
   8611a:	2800      	cmp	r0, #0
   8611c:	f040 85d4 	bne.w	86cc8 <_svfprintf_r+0x127c>
   86120:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86124:	2303      	movs	r3, #3
   86126:	461a      	mov	r2, r3
   86128:	9308      	str	r3, [sp, #32]
   8612a:	2300      	movs	r3, #0
   8612c:	4e61      	ldr	r6, [pc, #388]	; (862b4 <_svfprintf_r+0x868>)
   8612e:	4619      	mov	r1, r3
   86130:	930a      	str	r3, [sp, #40]	; 0x28
   86132:	4b61      	ldr	r3, [pc, #388]	; (862b8 <_svfprintf_r+0x86c>)
   86134:	920e      	str	r2, [sp, #56]	; 0x38
   86136:	9a11      	ldr	r2, [sp, #68]	; 0x44
   86138:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   8613c:	9007      	str	r0, [sp, #28]
   8613e:	9112      	str	r1, [sp, #72]	; 0x48
   86140:	2a47      	cmp	r2, #71	; 0x47
   86142:	bfd8      	it	le
   86144:	461e      	movle	r6, r3
   86146:	e5a5      	b.n	85c94 <_svfprintf_r+0x248>
   86148:	f04b 0b08 	orr.w	fp, fp, #8
   8614c:	f89a 3000 	ldrb.w	r3, [sl]
   86150:	e4d6      	b.n	85b00 <_svfprintf_r+0xb4>
   86152:	f04b 0b10 	orr.w	fp, fp, #16
   86156:	9311      	str	r3, [sp, #68]	; 0x44
   86158:	f01b 0320 	ands.w	r3, fp, #32
   8615c:	f43f aebb 	beq.w	85ed6 <_svfprintf_r+0x48a>
   86160:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86162:	3407      	adds	r4, #7
   86164:	f024 0307 	bic.w	r3, r4, #7
   86168:	f103 0208 	add.w	r2, r3, #8
   8616c:	e9d3 4500 	ldrd	r4, r5, [r3]
   86170:	920f      	str	r2, [sp, #60]	; 0x3c
   86172:	2300      	movs	r3, #0
   86174:	e568      	b.n	85c48 <_svfprintf_r+0x1fc>
   86176:	9311      	str	r3, [sp, #68]	; 0x44
   86178:	2a00      	cmp	r2, #0
   8617a:	f040 86c2 	bne.w	86f02 <_svfprintf_r+0x14b6>
   8617e:	4b4f      	ldr	r3, [pc, #316]	; (862bc <_svfprintf_r+0x870>)
   86180:	f01b 0f20 	tst.w	fp, #32
   86184:	9318      	str	r3, [sp, #96]	; 0x60
   86186:	f43f af19 	beq.w	85fbc <_svfprintf_r+0x570>
   8618a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8618c:	f01b 0f01 	tst.w	fp, #1
   86190:	f104 0407 	add.w	r4, r4, #7
   86194:	f024 0307 	bic.w	r3, r4, #7
   86198:	f103 0208 	add.w	r2, r3, #8
   8619c:	920f      	str	r2, [sp, #60]	; 0x3c
   8619e:	e9d3 4500 	ldrd	r4, r5, [r3]
   861a2:	f47f af1d 	bne.w	85fe0 <_svfprintf_r+0x594>
   861a6:	2302      	movs	r3, #2
   861a8:	e54e      	b.n	85c48 <_svfprintf_r+0x1fc>
   861aa:	f89a 3000 	ldrb.w	r3, [sl]
   861ae:	2900      	cmp	r1, #0
   861b0:	f47f aca6 	bne.w	85b00 <_svfprintf_r+0xb4>
   861b4:	2201      	movs	r2, #1
   861b6:	2120      	movs	r1, #32
   861b8:	e4a2      	b.n	85b00 <_svfprintf_r+0xb4>
   861ba:	f04b 0b01 	orr.w	fp, fp, #1
   861be:	f89a 3000 	ldrb.w	r3, [sl]
   861c2:	e49d      	b.n	85b00 <_svfprintf_r+0xb4>
   861c4:	f89a 3000 	ldrb.w	r3, [sl]
   861c8:	2201      	movs	r2, #1
   861ca:	212b      	movs	r1, #43	; 0x2b
   861cc:	e498      	b.n	85b00 <_svfprintf_r+0xb4>
   861ce:	f04b 0b20 	orr.w	fp, fp, #32
   861d2:	f89a 3000 	ldrb.w	r3, [sl]
   861d6:	e493      	b.n	85b00 <_svfprintf_r+0xb4>
   861d8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   861dc:	f89a 3000 	ldrb.w	r3, [sl]
   861e0:	e48e      	b.n	85b00 <_svfprintf_r+0xb4>
   861e2:	f89a 3000 	ldrb.w	r3, [sl]
   861e6:	2b6c      	cmp	r3, #108	; 0x6c
   861e8:	bf03      	ittte	eq
   861ea:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   861ee:	f04b 0b20 	orreq.w	fp, fp, #32
   861f2:	f10a 0a01 	addeq.w	sl, sl, #1
   861f6:	f04b 0b10 	orrne.w	fp, fp, #16
   861fa:	e481      	b.n	85b00 <_svfprintf_r+0xb4>
   861fc:	2a00      	cmp	r2, #0
   861fe:	f040 867c 	bne.w	86efa <_svfprintf_r+0x14ae>
   86202:	f01b 0f20 	tst.w	fp, #32
   86206:	f040 8452 	bne.w	86aae <_svfprintf_r+0x1062>
   8620a:	f01b 0f10 	tst.w	fp, #16
   8620e:	f040 8438 	bne.w	86a82 <_svfprintf_r+0x1036>
   86212:	f01b 0f40 	tst.w	fp, #64	; 0x40
   86216:	f000 8434 	beq.w	86a82 <_svfprintf_r+0x1036>
   8621a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8621c:	6813      	ldr	r3, [r2, #0]
   8621e:	3204      	adds	r2, #4
   86220:	920f      	str	r2, [sp, #60]	; 0x3c
   86222:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   86226:	801a      	strh	r2, [r3, #0]
   86228:	e437      	b.n	85a9a <_svfprintf_r+0x4e>
   8622a:	2378      	movs	r3, #120	; 0x78
   8622c:	2230      	movs	r2, #48	; 0x30
   8622e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   86230:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   86234:	9311      	str	r3, [sp, #68]	; 0x44
   86236:	1d03      	adds	r3, r0, #4
   86238:	930f      	str	r3, [sp, #60]	; 0x3c
   8623a:	4b20      	ldr	r3, [pc, #128]	; (862bc <_svfprintf_r+0x870>)
   8623c:	6804      	ldr	r4, [r0, #0]
   8623e:	9318      	str	r3, [sp, #96]	; 0x60
   86240:	f04b 0b02 	orr.w	fp, fp, #2
   86244:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   86248:	2500      	movs	r5, #0
   8624a:	2302      	movs	r3, #2
   8624c:	e4fc      	b.n	85c48 <_svfprintf_r+0x1fc>
   8624e:	9311      	str	r3, [sp, #68]	; 0x44
   86250:	2a00      	cmp	r2, #0
   86252:	f43f aeef 	beq.w	86034 <_svfprintf_r+0x5e8>
   86256:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8625a:	e6eb      	b.n	86034 <_svfprintf_r+0x5e8>
   8625c:	2000      	movs	r0, #0
   8625e:	4604      	mov	r4, r0
   86260:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86264:	f81a 3b01 	ldrb.w	r3, [sl], #1
   86268:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8626c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   86270:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86274:	2809      	cmp	r0, #9
   86276:	d9f5      	bls.n	86264 <_svfprintf_r+0x818>
   86278:	940d      	str	r4, [sp, #52]	; 0x34
   8627a:	e443      	b.n	85b04 <_svfprintf_r+0xb8>
   8627c:	9311      	str	r3, [sp, #68]	; 0x44
   8627e:	2a00      	cmp	r2, #0
   86280:	f040 864a 	bne.w	86f18 <_svfprintf_r+0x14cc>
   86284:	9a11      	ldr	r2, [sp, #68]	; 0x44
   86286:	2a00      	cmp	r2, #0
   86288:	f43f acb6 	beq.w	85bf8 <_svfprintf_r+0x1ac>
   8628c:	2300      	movs	r3, #0
   8628e:	2101      	movs	r1, #1
   86290:	461f      	mov	r7, r3
   86292:	9108      	str	r1, [sp, #32]
   86294:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   86298:	f8cd b01c 	str.w	fp, [sp, #28]
   8629c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   862a0:	930a      	str	r3, [sp, #40]	; 0x28
   862a2:	9312      	str	r3, [sp, #72]	; 0x48
   862a4:	910e      	str	r1, [sp, #56]	; 0x38
   862a6:	ae28      	add	r6, sp, #160	; 0xa0
   862a8:	e4f8      	b.n	85c9c <_svfprintf_r+0x250>
   862aa:	bf00      	nop
   862ac:	00089b74 	.word	0x00089b74
   862b0:	7fefffff 	.word	0x7fefffff
   862b4:	00089b68 	.word	0x00089b68
   862b8:	00089b64 	.word	0x00089b64
   862bc:	00089b88 	.word	0x00089b88
   862c0:	aa25      	add	r2, sp, #148	; 0x94
   862c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   862c4:	980c      	ldr	r0, [sp, #48]	; 0x30
   862c6:	f002 fcad 	bl	88c24 <__ssprint_r>
   862ca:	2800      	cmp	r0, #0
   862cc:	f47f ac9b 	bne.w	85c06 <_svfprintf_r+0x1ba>
   862d0:	46c8      	mov	r8, r9
   862d2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   862d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   862d8:	e533      	b.n	85d42 <_svfprintf_r+0x2f6>
   862da:	9b11      	ldr	r3, [sp, #68]	; 0x44
   862dc:	2b65      	cmp	r3, #101	; 0x65
   862de:	f340 809a 	ble.w	86416 <_svfprintf_r+0x9ca>
   862e2:	a815      	add	r0, sp, #84	; 0x54
   862e4:	c80d      	ldmia	r0, {r0, r2, r3}
   862e6:	9914      	ldr	r1, [sp, #80]	; 0x50
   862e8:	f003 f974 	bl	895d4 <__aeabi_dcmpeq>
   862ec:	2800      	cmp	r0, #0
   862ee:	f000 8193 	beq.w	86618 <_svfprintf_r+0xbcc>
   862f2:	2101      	movs	r1, #1
   862f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   862f6:	4ab5      	ldr	r2, [pc, #724]	; (865cc <_svfprintf_r+0xb80>)
   862f8:	440b      	add	r3, r1
   862fa:	440c      	add	r4, r1
   862fc:	2b07      	cmp	r3, #7
   862fe:	9427      	str	r4, [sp, #156]	; 0x9c
   86300:	9326      	str	r3, [sp, #152]	; 0x98
   86302:	f8c8 1004 	str.w	r1, [r8, #4]
   86306:	f8c8 2000 	str.w	r2, [r8]
   8630a:	f300 83c6 	bgt.w	86a9a <_svfprintf_r+0x104e>
   8630e:	f108 0808 	add.w	r8, r8, #8
   86312:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86314:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86316:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86318:	4293      	cmp	r3, r2
   8631a:	db03      	blt.n	86324 <_svfprintf_r+0x8d8>
   8631c:	9b07      	ldr	r3, [sp, #28]
   8631e:	07dd      	lsls	r5, r3, #31
   86320:	f57f ad86 	bpl.w	85e30 <_svfprintf_r+0x3e4>
   86324:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86326:	9919      	ldr	r1, [sp, #100]	; 0x64
   86328:	3301      	adds	r3, #1
   8632a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   8632c:	440c      	add	r4, r1
   8632e:	2b07      	cmp	r3, #7
   86330:	f8c8 2000 	str.w	r2, [r8]
   86334:	f8c8 1004 	str.w	r1, [r8, #4]
   86338:	9427      	str	r4, [sp, #156]	; 0x9c
   8633a:	9326      	str	r3, [sp, #152]	; 0x98
   8633c:	f300 83c4 	bgt.w	86ac8 <_svfprintf_r+0x107c>
   86340:	f108 0808 	add.w	r8, r8, #8
   86344:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86346:	1e5e      	subs	r6, r3, #1
   86348:	2e00      	cmp	r6, #0
   8634a:	f77f ad71 	ble.w	85e30 <_svfprintf_r+0x3e4>
   8634e:	2e10      	cmp	r6, #16
   86350:	f340 8575 	ble.w	86e3e <_svfprintf_r+0x13f2>
   86354:	4622      	mov	r2, r4
   86356:	2710      	movs	r7, #16
   86358:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8635a:	4d9d      	ldr	r5, [pc, #628]	; (865d0 <_svfprintf_r+0xb84>)
   8635c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86360:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86362:	e005      	b.n	86370 <_svfprintf_r+0x924>
   86364:	f108 0808 	add.w	r8, r8, #8
   86368:	3e10      	subs	r6, #16
   8636a:	2e10      	cmp	r6, #16
   8636c:	f340 8225 	ble.w	867ba <_svfprintf_r+0xd6e>
   86370:	3301      	adds	r3, #1
   86372:	3210      	adds	r2, #16
   86374:	2b07      	cmp	r3, #7
   86376:	9227      	str	r2, [sp, #156]	; 0x9c
   86378:	9326      	str	r3, [sp, #152]	; 0x98
   8637a:	e888 00a0 	stmia.w	r8, {r5, r7}
   8637e:	ddf1      	ble.n	86364 <_svfprintf_r+0x918>
   86380:	aa25      	add	r2, sp, #148	; 0x94
   86382:	4621      	mov	r1, r4
   86384:	4658      	mov	r0, fp
   86386:	f002 fc4d 	bl	88c24 <__ssprint_r>
   8638a:	2800      	cmp	r0, #0
   8638c:	f47f ac3b 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86390:	46c8      	mov	r8, r9
   86392:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86394:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86396:	e7e7      	b.n	86368 <_svfprintf_r+0x91c>
   86398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8639a:	9a08      	ldr	r2, [sp, #32]
   8639c:	1a9f      	subs	r7, r3, r2
   8639e:	2f00      	cmp	r7, #0
   863a0:	f77f acf6 	ble.w	85d90 <_svfprintf_r+0x344>
   863a4:	2f10      	cmp	r7, #16
   863a6:	f340 84a8 	ble.w	86cfa <_svfprintf_r+0x12ae>
   863aa:	4d89      	ldr	r5, [pc, #548]	; (865d0 <_svfprintf_r+0xb84>)
   863ac:	4642      	mov	r2, r8
   863ae:	4621      	mov	r1, r4
   863b0:	46b0      	mov	r8, r6
   863b2:	f04f 0b10 	mov.w	fp, #16
   863b6:	462e      	mov	r6, r5
   863b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   863ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   863bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   863be:	e004      	b.n	863ca <_svfprintf_r+0x97e>
   863c0:	3f10      	subs	r7, #16
   863c2:	2f10      	cmp	r7, #16
   863c4:	f102 0208 	add.w	r2, r2, #8
   863c8:	dd15      	ble.n	863f6 <_svfprintf_r+0x9aa>
   863ca:	3301      	adds	r3, #1
   863cc:	3110      	adds	r1, #16
   863ce:	2b07      	cmp	r3, #7
   863d0:	9127      	str	r1, [sp, #156]	; 0x9c
   863d2:	9326      	str	r3, [sp, #152]	; 0x98
   863d4:	e882 0840 	stmia.w	r2, {r6, fp}
   863d8:	ddf2      	ble.n	863c0 <_svfprintf_r+0x974>
   863da:	aa25      	add	r2, sp, #148	; 0x94
   863dc:	4629      	mov	r1, r5
   863de:	4620      	mov	r0, r4
   863e0:	f002 fc20 	bl	88c24 <__ssprint_r>
   863e4:	2800      	cmp	r0, #0
   863e6:	f47f ac0e 	bne.w	85c06 <_svfprintf_r+0x1ba>
   863ea:	3f10      	subs	r7, #16
   863ec:	2f10      	cmp	r7, #16
   863ee:	464a      	mov	r2, r9
   863f0:	9927      	ldr	r1, [sp, #156]	; 0x9c
   863f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   863f4:	dce9      	bgt.n	863ca <_svfprintf_r+0x97e>
   863f6:	4635      	mov	r5, r6
   863f8:	460c      	mov	r4, r1
   863fa:	4646      	mov	r6, r8
   863fc:	4690      	mov	r8, r2
   863fe:	3301      	adds	r3, #1
   86400:	443c      	add	r4, r7
   86402:	2b07      	cmp	r3, #7
   86404:	9427      	str	r4, [sp, #156]	; 0x9c
   86406:	9326      	str	r3, [sp, #152]	; 0x98
   86408:	e888 00a0 	stmia.w	r8, {r5, r7}
   8640c:	f300 829e 	bgt.w	8694c <_svfprintf_r+0xf00>
   86410:	f108 0808 	add.w	r8, r8, #8
   86414:	e4bc      	b.n	85d90 <_svfprintf_r+0x344>
   86416:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86418:	2b01      	cmp	r3, #1
   8641a:	f340 824f 	ble.w	868bc <_svfprintf_r+0xe70>
   8641e:	2301      	movs	r3, #1
   86420:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86422:	441c      	add	r4, r3
   86424:	441f      	add	r7, r3
   86426:	2f07      	cmp	r7, #7
   86428:	9427      	str	r4, [sp, #156]	; 0x9c
   8642a:	f8c8 6000 	str.w	r6, [r8]
   8642e:	9726      	str	r7, [sp, #152]	; 0x98
   86430:	f8c8 3004 	str.w	r3, [r8, #4]
   86434:	f300 825f 	bgt.w	868f6 <_svfprintf_r+0xeaa>
   86438:	f108 0808 	add.w	r8, r8, #8
   8643c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8643e:	3701      	adds	r7, #1
   86440:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86442:	4414      	add	r4, r2
   86444:	2f07      	cmp	r7, #7
   86446:	9427      	str	r4, [sp, #156]	; 0x9c
   86448:	9726      	str	r7, [sp, #152]	; 0x98
   8644a:	f8c8 3000 	str.w	r3, [r8]
   8644e:	f8c8 2004 	str.w	r2, [r8, #4]
   86452:	f300 825c 	bgt.w	8690e <_svfprintf_r+0xec2>
   86456:	f108 0808 	add.w	r8, r8, #8
   8645a:	a815      	add	r0, sp, #84	; 0x54
   8645c:	c80d      	ldmia	r0, {r0, r2, r3}
   8645e:	9914      	ldr	r1, [sp, #80]	; 0x50
   86460:	f003 f8b8 	bl	895d4 <__aeabi_dcmpeq>
   86464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86466:	2800      	cmp	r0, #0
   86468:	f040 8141 	bne.w	866ee <_svfprintf_r+0xca2>
   8646c:	3b01      	subs	r3, #1
   8646e:	3701      	adds	r7, #1
   86470:	3601      	adds	r6, #1
   86472:	441c      	add	r4, r3
   86474:	2f07      	cmp	r7, #7
   86476:	f8c8 6000 	str.w	r6, [r8]
   8647a:	9726      	str	r7, [sp, #152]	; 0x98
   8647c:	9427      	str	r4, [sp, #156]	; 0x9c
   8647e:	f8c8 3004 	str.w	r3, [r8, #4]
   86482:	f300 8166 	bgt.w	86752 <_svfprintf_r+0xd06>
   86486:	f108 0808 	add.w	r8, r8, #8
   8648a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   8648c:	3701      	adds	r7, #1
   8648e:	4414      	add	r4, r2
   86490:	ab21      	add	r3, sp, #132	; 0x84
   86492:	2f07      	cmp	r7, #7
   86494:	9427      	str	r4, [sp, #156]	; 0x9c
   86496:	9726      	str	r7, [sp, #152]	; 0x98
   86498:	f8c8 2004 	str.w	r2, [r8, #4]
   8649c:	f8c8 3000 	str.w	r3, [r8]
   864a0:	f77f acc4 	ble.w	85e2c <_svfprintf_r+0x3e0>
   864a4:	aa25      	add	r2, sp, #148	; 0x94
   864a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   864a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   864aa:	f002 fbbb 	bl	88c24 <__ssprint_r>
   864ae:	2800      	cmp	r0, #0
   864b0:	f47f aba9 	bne.w	85c06 <_svfprintf_r+0x1ba>
   864b4:	46c8      	mov	r8, r9
   864b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   864b8:	e4ba      	b.n	85e30 <_svfprintf_r+0x3e4>
   864ba:	aa25      	add	r2, sp, #148	; 0x94
   864bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   864be:	980c      	ldr	r0, [sp, #48]	; 0x30
   864c0:	f002 fbb0 	bl	88c24 <__ssprint_r>
   864c4:	2800      	cmp	r0, #0
   864c6:	f43f acfd 	beq.w	85ec4 <_svfprintf_r+0x478>
   864ca:	f7ff bb9c 	b.w	85c06 <_svfprintf_r+0x1ba>
   864ce:	f8dd b01c 	ldr.w	fp, [sp, #28]
   864d2:	2b01      	cmp	r3, #1
   864d4:	f000 817e 	beq.w	867d4 <_svfprintf_r+0xd88>
   864d8:	2b02      	cmp	r3, #2
   864da:	d171      	bne.n	865c0 <_svfprintf_r+0xb74>
   864dc:	f8cd b01c 	str.w	fp, [sp, #28]
   864e0:	2400      	movs	r4, #0
   864e2:	2500      	movs	r5, #0
   864e4:	e5d4      	b.n	86090 <_svfprintf_r+0x644>
   864e6:	aa25      	add	r2, sp, #148	; 0x94
   864e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   864ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   864ec:	f002 fb9a 	bl	88c24 <__ssprint_r>
   864f0:	2800      	cmp	r0, #0
   864f2:	f47f ab88 	bne.w	85c06 <_svfprintf_r+0x1ba>
   864f6:	46c8      	mov	r8, r9
   864f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   864fa:	e486      	b.n	85e0a <_svfprintf_r+0x3be>
   864fc:	aa25      	add	r2, sp, #148	; 0x94
   864fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86500:	980c      	ldr	r0, [sp, #48]	; 0x30
   86502:	f002 fb8f 	bl	88c24 <__ssprint_r>
   86506:	2800      	cmp	r0, #0
   86508:	f47f ab7d 	bne.w	85c06 <_svfprintf_r+0x1ba>
   8650c:	46c8      	mov	r8, r9
   8650e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86510:	e429      	b.n	85d66 <_svfprintf_r+0x31a>
   86512:	2001      	movs	r0, #1
   86514:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86516:	4a2d      	ldr	r2, [pc, #180]	; (865cc <_svfprintf_r+0xb80>)
   86518:	4403      	add	r3, r0
   8651a:	4404      	add	r4, r0
   8651c:	2b07      	cmp	r3, #7
   8651e:	9427      	str	r4, [sp, #156]	; 0x9c
   86520:	9326      	str	r3, [sp, #152]	; 0x98
   86522:	f8c8 0004 	str.w	r0, [r8, #4]
   86526:	f8c8 2000 	str.w	r2, [r8]
   8652a:	f340 82d8 	ble.w	86ade <_svfprintf_r+0x1092>
   8652e:	aa25      	add	r2, sp, #148	; 0x94
   86530:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86532:	980c      	ldr	r0, [sp, #48]	; 0x30
   86534:	f002 fb76 	bl	88c24 <__ssprint_r>
   86538:	2800      	cmp	r0, #0
   8653a:	f47f ab64 	bne.w	85c06 <_svfprintf_r+0x1ba>
   8653e:	46c8      	mov	r8, r9
   86540:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86542:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86544:	b929      	cbnz	r1, 86552 <_svfprintf_r+0xb06>
   86546:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86548:	b91b      	cbnz	r3, 86552 <_svfprintf_r+0xb06>
   8654a:	9b07      	ldr	r3, [sp, #28]
   8654c:	07d8      	lsls	r0, r3, #31
   8654e:	f57f ac6f 	bpl.w	85e30 <_svfprintf_r+0x3e4>
   86552:	9819      	ldr	r0, [sp, #100]	; 0x64
   86554:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86556:	4602      	mov	r2, r0
   86558:	3301      	adds	r3, #1
   8655a:	4422      	add	r2, r4
   8655c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   8655e:	2b07      	cmp	r3, #7
   86560:	9227      	str	r2, [sp, #156]	; 0x9c
   86562:	f8c8 4000 	str.w	r4, [r8]
   86566:	f8c8 0004 	str.w	r0, [r8, #4]
   8656a:	9326      	str	r3, [sp, #152]	; 0x98
   8656c:	f300 8431 	bgt.w	86dd2 <_svfprintf_r+0x1386>
   86570:	f108 0808 	add.w	r8, r8, #8
   86574:	2900      	cmp	r1, #0
   86576:	f2c0 8409 	blt.w	86d8c <_svfprintf_r+0x1340>
   8657a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8657c:	3301      	adds	r3, #1
   8657e:	188c      	adds	r4, r1, r2
   86580:	2b07      	cmp	r3, #7
   86582:	9427      	str	r4, [sp, #156]	; 0x9c
   86584:	9326      	str	r3, [sp, #152]	; 0x98
   86586:	f8c8 6000 	str.w	r6, [r8]
   8658a:	f8c8 1004 	str.w	r1, [r8, #4]
   8658e:	f77f ac4d 	ble.w	85e2c <_svfprintf_r+0x3e0>
   86592:	aa25      	add	r2, sp, #148	; 0x94
   86594:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86596:	980c      	ldr	r0, [sp, #48]	; 0x30
   86598:	f002 fb44 	bl	88c24 <__ssprint_r>
   8659c:	2800      	cmp	r0, #0
   8659e:	f47f ab32 	bne.w	85c06 <_svfprintf_r+0x1ba>
   865a2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   865a4:	46c8      	mov	r8, r9
   865a6:	e443      	b.n	85e30 <_svfprintf_r+0x3e4>
   865a8:	aa25      	add	r2, sp, #148	; 0x94
   865aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   865ac:	980c      	ldr	r0, [sp, #48]	; 0x30
   865ae:	f002 fb39 	bl	88c24 <__ssprint_r>
   865b2:	2800      	cmp	r0, #0
   865b4:	f47f ab27 	bne.w	85c06 <_svfprintf_r+0x1ba>
   865b8:	46c8      	mov	r8, r9
   865ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   865bc:	f7ff bbe5 	b.w	85d8a <_svfprintf_r+0x33e>
   865c0:	2400      	movs	r4, #0
   865c2:	2500      	movs	r5, #0
   865c4:	f8cd b01c 	str.w	fp, [sp, #28]
   865c8:	4649      	mov	r1, r9
   865ca:	e004      	b.n	865d6 <_svfprintf_r+0xb8a>
   865cc:	00089ba4 	.word	0x00089ba4
   865d0:	00089bb8 	.word	0x00089bb8
   865d4:	4631      	mov	r1, r6
   865d6:	08e2      	lsrs	r2, r4, #3
   865d8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   865dc:	08e8      	lsrs	r0, r5, #3
   865de:	f004 0307 	and.w	r3, r4, #7
   865e2:	4605      	mov	r5, r0
   865e4:	4614      	mov	r4, r2
   865e6:	3330      	adds	r3, #48	; 0x30
   865e8:	ea54 0205 	orrs.w	r2, r4, r5
   865ec:	f801 3c01 	strb.w	r3, [r1, #-1]
   865f0:	f101 36ff 	add.w	r6, r1, #4294967295
   865f4:	d1ee      	bne.n	865d4 <_svfprintf_r+0xb88>
   865f6:	9a07      	ldr	r2, [sp, #28]
   865f8:	07d2      	lsls	r2, r2, #31
   865fa:	f57f ad59 	bpl.w	860b0 <_svfprintf_r+0x664>
   865fe:	2b30      	cmp	r3, #48	; 0x30
   86600:	f43f ad56 	beq.w	860b0 <_svfprintf_r+0x664>
   86604:	2330      	movs	r3, #48	; 0x30
   86606:	3902      	subs	r1, #2
   86608:	f806 3c01 	strb.w	r3, [r6, #-1]
   8660c:	eba9 0301 	sub.w	r3, r9, r1
   86610:	930e      	str	r3, [sp, #56]	; 0x38
   86612:	460e      	mov	r6, r1
   86614:	f7ff bb36 	b.w	85c84 <_svfprintf_r+0x238>
   86618:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8661a:	2900      	cmp	r1, #0
   8661c:	f77f af79 	ble.w	86512 <_svfprintf_r+0xac6>
   86620:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86622:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86624:	4293      	cmp	r3, r2
   86626:	bfa8      	it	ge
   86628:	4613      	movge	r3, r2
   8662a:	2b00      	cmp	r3, #0
   8662c:	461f      	mov	r7, r3
   8662e:	dd0b      	ble.n	86648 <_svfprintf_r+0xbfc>
   86630:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86632:	443c      	add	r4, r7
   86634:	3301      	adds	r3, #1
   86636:	2b07      	cmp	r3, #7
   86638:	9427      	str	r4, [sp, #156]	; 0x9c
   8663a:	e888 00c0 	stmia.w	r8, {r6, r7}
   8663e:	9326      	str	r3, [sp, #152]	; 0x98
   86640:	f300 82fb 	bgt.w	86c3a <_svfprintf_r+0x11ee>
   86644:	f108 0808 	add.w	r8, r8, #8
   86648:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8664a:	2f00      	cmp	r7, #0
   8664c:	bfa8      	it	ge
   8664e:	1bdb      	subge	r3, r3, r7
   86650:	2b00      	cmp	r3, #0
   86652:	461f      	mov	r7, r3
   86654:	f340 80d7 	ble.w	86806 <_svfprintf_r+0xdba>
   86658:	2b10      	cmp	r3, #16
   8665a:	f340 8434 	ble.w	86ec6 <_svfprintf_r+0x147a>
   8665e:	4dba      	ldr	r5, [pc, #744]	; (86948 <_svfprintf_r+0xefc>)
   86660:	4642      	mov	r2, r8
   86662:	4621      	mov	r1, r4
   86664:	46b0      	mov	r8, r6
   86666:	f04f 0b10 	mov.w	fp, #16
   8666a:	462e      	mov	r6, r5
   8666c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8666e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86670:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   86672:	e004      	b.n	8667e <_svfprintf_r+0xc32>
   86674:	3208      	adds	r2, #8
   86676:	3f10      	subs	r7, #16
   86678:	2f10      	cmp	r7, #16
   8667a:	f340 80b5 	ble.w	867e8 <_svfprintf_r+0xd9c>
   8667e:	3301      	adds	r3, #1
   86680:	3110      	adds	r1, #16
   86682:	2b07      	cmp	r3, #7
   86684:	9127      	str	r1, [sp, #156]	; 0x9c
   86686:	9326      	str	r3, [sp, #152]	; 0x98
   86688:	e882 0840 	stmia.w	r2, {r6, fp}
   8668c:	ddf2      	ble.n	86674 <_svfprintf_r+0xc28>
   8668e:	aa25      	add	r2, sp, #148	; 0x94
   86690:	4629      	mov	r1, r5
   86692:	4620      	mov	r0, r4
   86694:	f002 fac6 	bl	88c24 <__ssprint_r>
   86698:	2800      	cmp	r0, #0
   8669a:	f47f aab4 	bne.w	85c06 <_svfprintf_r+0x1ba>
   8669e:	464a      	mov	r2, r9
   866a0:	9927      	ldr	r1, [sp, #156]	; 0x9c
   866a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   866a4:	e7e7      	b.n	86676 <_svfprintf_r+0xc2a>
   866a6:	2d00      	cmp	r5, #0
   866a8:	bf08      	it	eq
   866aa:	2c0a      	cmpeq	r4, #10
   866ac:	f0c0 8090 	bcc.w	867d0 <_svfprintf_r+0xd84>
   866b0:	464e      	mov	r6, r9
   866b2:	4620      	mov	r0, r4
   866b4:	4629      	mov	r1, r5
   866b6:	220a      	movs	r2, #10
   866b8:	2300      	movs	r3, #0
   866ba:	f002 fffb 	bl	896b4 <__aeabi_uldivmod>
   866be:	3230      	adds	r2, #48	; 0x30
   866c0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   866c4:	4620      	mov	r0, r4
   866c6:	4629      	mov	r1, r5
   866c8:	2300      	movs	r3, #0
   866ca:	220a      	movs	r2, #10
   866cc:	f002 fff2 	bl	896b4 <__aeabi_uldivmod>
   866d0:	4604      	mov	r4, r0
   866d2:	460d      	mov	r5, r1
   866d4:	ea54 0305 	orrs.w	r3, r4, r5
   866d8:	d1eb      	bne.n	866b2 <_svfprintf_r+0xc66>
   866da:	eba9 0306 	sub.w	r3, r9, r6
   866de:	930e      	str	r3, [sp, #56]	; 0x38
   866e0:	f7ff bad0 	b.w	85c84 <_svfprintf_r+0x238>
   866e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   866e6:	464e      	mov	r6, r9
   866e8:	930e      	str	r3, [sp, #56]	; 0x38
   866ea:	f7ff bacb 	b.w	85c84 <_svfprintf_r+0x238>
   866ee:	1e5e      	subs	r6, r3, #1
   866f0:	2e00      	cmp	r6, #0
   866f2:	f77f aeca 	ble.w	8648a <_svfprintf_r+0xa3e>
   866f6:	2e10      	cmp	r6, #16
   866f8:	f340 83e3 	ble.w	86ec2 <_svfprintf_r+0x1476>
   866fc:	4622      	mov	r2, r4
   866fe:	f04f 0b10 	mov.w	fp, #16
   86702:	4d91      	ldr	r5, [pc, #580]	; (86948 <_svfprintf_r+0xefc>)
   86704:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86706:	e004      	b.n	86712 <_svfprintf_r+0xcc6>
   86708:	3e10      	subs	r6, #16
   8670a:	2e10      	cmp	r6, #16
   8670c:	f108 0808 	add.w	r8, r8, #8
   86710:	dd15      	ble.n	8673e <_svfprintf_r+0xcf2>
   86712:	3701      	adds	r7, #1
   86714:	3210      	adds	r2, #16
   86716:	2f07      	cmp	r7, #7
   86718:	9227      	str	r2, [sp, #156]	; 0x9c
   8671a:	9726      	str	r7, [sp, #152]	; 0x98
   8671c:	e888 0820 	stmia.w	r8, {r5, fp}
   86720:	ddf2      	ble.n	86708 <_svfprintf_r+0xcbc>
   86722:	aa25      	add	r2, sp, #148	; 0x94
   86724:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86726:	4620      	mov	r0, r4
   86728:	f002 fa7c 	bl	88c24 <__ssprint_r>
   8672c:	2800      	cmp	r0, #0
   8672e:	f47f aa6a 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86732:	3e10      	subs	r6, #16
   86734:	2e10      	cmp	r6, #16
   86736:	46c8      	mov	r8, r9
   86738:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8673a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8673c:	dce9      	bgt.n	86712 <_svfprintf_r+0xcc6>
   8673e:	4614      	mov	r4, r2
   86740:	3701      	adds	r7, #1
   86742:	4434      	add	r4, r6
   86744:	2f07      	cmp	r7, #7
   86746:	9427      	str	r4, [sp, #156]	; 0x9c
   86748:	9726      	str	r7, [sp, #152]	; 0x98
   8674a:	e888 0060 	stmia.w	r8, {r5, r6}
   8674e:	f77f ae9a 	ble.w	86486 <_svfprintf_r+0xa3a>
   86752:	aa25      	add	r2, sp, #148	; 0x94
   86754:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86756:	980c      	ldr	r0, [sp, #48]	; 0x30
   86758:	f002 fa64 	bl	88c24 <__ssprint_r>
   8675c:	2800      	cmp	r0, #0
   8675e:	f47f aa52 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86762:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86764:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86766:	46c8      	mov	r8, r9
   86768:	e68f      	b.n	8648a <_svfprintf_r+0xa3e>
   8676a:	3204      	adds	r2, #4
   8676c:	681c      	ldr	r4, [r3, #0]
   8676e:	2500      	movs	r5, #0
   86770:	2301      	movs	r3, #1
   86772:	920f      	str	r2, [sp, #60]	; 0x3c
   86774:	f7ff ba68 	b.w	85c48 <_svfprintf_r+0x1fc>
   86778:	681c      	ldr	r4, [r3, #0]
   8677a:	3304      	adds	r3, #4
   8677c:	930f      	str	r3, [sp, #60]	; 0x3c
   8677e:	2500      	movs	r5, #0
   86780:	e42a      	b.n	85fd8 <_svfprintf_r+0x58c>
   86782:	681c      	ldr	r4, [r3, #0]
   86784:	3304      	adds	r3, #4
   86786:	17e5      	asrs	r5, r4, #31
   86788:	4622      	mov	r2, r4
   8678a:	930f      	str	r3, [sp, #60]	; 0x3c
   8678c:	462b      	mov	r3, r5
   8678e:	2a00      	cmp	r2, #0
   86790:	f173 0300 	sbcs.w	r3, r3, #0
   86794:	f6bf ac68 	bge.w	86068 <_svfprintf_r+0x61c>
   86798:	272d      	movs	r7, #45	; 0x2d
   8679a:	4264      	negs	r4, r4
   8679c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   867a0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   867a4:	2301      	movs	r3, #1
   867a6:	f7ff ba53 	b.w	85c50 <_svfprintf_r+0x204>
   867aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   867ac:	2500      	movs	r5, #0
   867ae:	460a      	mov	r2, r1
   867b0:	3204      	adds	r2, #4
   867b2:	680c      	ldr	r4, [r1, #0]
   867b4:	920f      	str	r2, [sp, #60]	; 0x3c
   867b6:	f7ff ba47 	b.w	85c48 <_svfprintf_r+0x1fc>
   867ba:	4614      	mov	r4, r2
   867bc:	3301      	adds	r3, #1
   867be:	4434      	add	r4, r6
   867c0:	2b07      	cmp	r3, #7
   867c2:	9427      	str	r4, [sp, #156]	; 0x9c
   867c4:	9326      	str	r3, [sp, #152]	; 0x98
   867c6:	e888 0060 	stmia.w	r8, {r5, r6}
   867ca:	f77f ab2f 	ble.w	85e2c <_svfprintf_r+0x3e0>
   867ce:	e6e0      	b.n	86592 <_svfprintf_r+0xb46>
   867d0:	f8dd b01c 	ldr.w	fp, [sp, #28]
   867d4:	2301      	movs	r3, #1
   867d6:	ae42      	add	r6, sp, #264	; 0x108
   867d8:	3430      	adds	r4, #48	; 0x30
   867da:	f8cd b01c 	str.w	fp, [sp, #28]
   867de:	f806 4d41 	strb.w	r4, [r6, #-65]!
   867e2:	930e      	str	r3, [sp, #56]	; 0x38
   867e4:	f7ff ba4e 	b.w	85c84 <_svfprintf_r+0x238>
   867e8:	4635      	mov	r5, r6
   867ea:	460c      	mov	r4, r1
   867ec:	4646      	mov	r6, r8
   867ee:	4690      	mov	r8, r2
   867f0:	3301      	adds	r3, #1
   867f2:	443c      	add	r4, r7
   867f4:	2b07      	cmp	r3, #7
   867f6:	9427      	str	r4, [sp, #156]	; 0x9c
   867f8:	9326      	str	r3, [sp, #152]	; 0x98
   867fa:	e888 00a0 	stmia.w	r8, {r5, r7}
   867fe:	f300 8246 	bgt.w	86c8e <_svfprintf_r+0x1242>
   86802:	f108 0808 	add.w	r8, r8, #8
   86806:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86808:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8680a:	429a      	cmp	r2, r3
   8680c:	db45      	blt.n	8689a <_svfprintf_r+0xe4e>
   8680e:	9b07      	ldr	r3, [sp, #28]
   86810:	07d9      	lsls	r1, r3, #31
   86812:	d442      	bmi.n	8689a <_svfprintf_r+0xe4e>
   86814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86816:	9812      	ldr	r0, [sp, #72]	; 0x48
   86818:	1a9a      	subs	r2, r3, r2
   8681a:	1a1d      	subs	r5, r3, r0
   8681c:	4295      	cmp	r5, r2
   8681e:	bfa8      	it	ge
   86820:	4615      	movge	r5, r2
   86822:	2d00      	cmp	r5, #0
   86824:	dd0e      	ble.n	86844 <_svfprintf_r+0xdf8>
   86826:	9926      	ldr	r1, [sp, #152]	; 0x98
   86828:	4406      	add	r6, r0
   8682a:	3101      	adds	r1, #1
   8682c:	442c      	add	r4, r5
   8682e:	2907      	cmp	r1, #7
   86830:	f8c8 6000 	str.w	r6, [r8]
   86834:	9427      	str	r4, [sp, #156]	; 0x9c
   86836:	f8c8 5004 	str.w	r5, [r8, #4]
   8683a:	9126      	str	r1, [sp, #152]	; 0x98
   8683c:	f300 8216 	bgt.w	86c6c <_svfprintf_r+0x1220>
   86840:	f108 0808 	add.w	r8, r8, #8
   86844:	2d00      	cmp	r5, #0
   86846:	bfb4      	ite	lt
   86848:	4616      	movlt	r6, r2
   8684a:	1b56      	subge	r6, r2, r5
   8684c:	2e00      	cmp	r6, #0
   8684e:	f77f aaef 	ble.w	85e30 <_svfprintf_r+0x3e4>
   86852:	2e10      	cmp	r6, #16
   86854:	f340 82f3 	ble.w	86e3e <_svfprintf_r+0x13f2>
   86858:	4622      	mov	r2, r4
   8685a:	2710      	movs	r7, #16
   8685c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8685e:	4d3a      	ldr	r5, [pc, #232]	; (86948 <_svfprintf_r+0xefc>)
   86860:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86864:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86866:	e004      	b.n	86872 <_svfprintf_r+0xe26>
   86868:	f108 0808 	add.w	r8, r8, #8
   8686c:	3e10      	subs	r6, #16
   8686e:	2e10      	cmp	r6, #16
   86870:	dda3      	ble.n	867ba <_svfprintf_r+0xd6e>
   86872:	3301      	adds	r3, #1
   86874:	3210      	adds	r2, #16
   86876:	2b07      	cmp	r3, #7
   86878:	9227      	str	r2, [sp, #156]	; 0x9c
   8687a:	9326      	str	r3, [sp, #152]	; 0x98
   8687c:	e888 00a0 	stmia.w	r8, {r5, r7}
   86880:	ddf2      	ble.n	86868 <_svfprintf_r+0xe1c>
   86882:	aa25      	add	r2, sp, #148	; 0x94
   86884:	4621      	mov	r1, r4
   86886:	4658      	mov	r0, fp
   86888:	f002 f9cc 	bl	88c24 <__ssprint_r>
   8688c:	2800      	cmp	r0, #0
   8688e:	f47f a9ba 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86892:	46c8      	mov	r8, r9
   86894:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86896:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86898:	e7e8      	b.n	8686c <_svfprintf_r+0xe20>
   8689a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8689c:	9819      	ldr	r0, [sp, #100]	; 0x64
   8689e:	3301      	adds	r3, #1
   868a0:	991a      	ldr	r1, [sp, #104]	; 0x68
   868a2:	4404      	add	r4, r0
   868a4:	2b07      	cmp	r3, #7
   868a6:	9427      	str	r4, [sp, #156]	; 0x9c
   868a8:	f8c8 1000 	str.w	r1, [r8]
   868ac:	f8c8 0004 	str.w	r0, [r8, #4]
   868b0:	9326      	str	r3, [sp, #152]	; 0x98
   868b2:	f300 81cf 	bgt.w	86c54 <_svfprintf_r+0x1208>
   868b6:	f108 0808 	add.w	r8, r8, #8
   868ba:	e7ab      	b.n	86814 <_svfprintf_r+0xdc8>
   868bc:	9b07      	ldr	r3, [sp, #28]
   868be:	07da      	lsls	r2, r3, #31
   868c0:	f53f adad 	bmi.w	8641e <_svfprintf_r+0x9d2>
   868c4:	2301      	movs	r3, #1
   868c6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   868c8:	441c      	add	r4, r3
   868ca:	441f      	add	r7, r3
   868cc:	2f07      	cmp	r7, #7
   868ce:	9427      	str	r4, [sp, #156]	; 0x9c
   868d0:	f8c8 6000 	str.w	r6, [r8]
   868d4:	9726      	str	r7, [sp, #152]	; 0x98
   868d6:	f8c8 3004 	str.w	r3, [r8, #4]
   868da:	f77f add4 	ble.w	86486 <_svfprintf_r+0xa3a>
   868de:	aa25      	add	r2, sp, #148	; 0x94
   868e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   868e2:	980c      	ldr	r0, [sp, #48]	; 0x30
   868e4:	f002 f99e 	bl	88c24 <__ssprint_r>
   868e8:	2800      	cmp	r0, #0
   868ea:	f47f a98c 	bne.w	85c06 <_svfprintf_r+0x1ba>
   868ee:	46c8      	mov	r8, r9
   868f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   868f2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   868f4:	e5c9      	b.n	8648a <_svfprintf_r+0xa3e>
   868f6:	aa25      	add	r2, sp, #148	; 0x94
   868f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   868fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   868fc:	f002 f992 	bl	88c24 <__ssprint_r>
   86900:	2800      	cmp	r0, #0
   86902:	f47f a980 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86906:	46c8      	mov	r8, r9
   86908:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8690a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8690c:	e596      	b.n	8643c <_svfprintf_r+0x9f0>
   8690e:	aa25      	add	r2, sp, #148	; 0x94
   86910:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86912:	980c      	ldr	r0, [sp, #48]	; 0x30
   86914:	f002 f986 	bl	88c24 <__ssprint_r>
   86918:	2800      	cmp	r0, #0
   8691a:	f47f a974 	bne.w	85c06 <_svfprintf_r+0x1ba>
   8691e:	46c8      	mov	r8, r9
   86920:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86922:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86924:	e599      	b.n	8645a <_svfprintf_r+0xa0e>
   86926:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86928:	3407      	adds	r4, #7
   8692a:	f024 0407 	bic.w	r4, r4, #7
   8692e:	f104 0108 	add.w	r1, r4, #8
   86932:	e9d4 2300 	ldrd	r2, r3, [r4]
   86936:	910f      	str	r1, [sp, #60]	; 0x3c
   86938:	4614      	mov	r4, r2
   8693a:	461d      	mov	r5, r3
   8693c:	f7ff bb8f 	b.w	8605e <_svfprintf_r+0x612>
   86940:	464e      	mov	r6, r9
   86942:	f7ff b99f 	b.w	85c84 <_svfprintf_r+0x238>
   86946:	bf00      	nop
   86948:	00089bb8 	.word	0x00089bb8
   8694c:	aa25      	add	r2, sp, #148	; 0x94
   8694e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86950:	980c      	ldr	r0, [sp, #48]	; 0x30
   86952:	f002 f967 	bl	88c24 <__ssprint_r>
   86956:	2800      	cmp	r0, #0
   86958:	f47f a955 	bne.w	85c06 <_svfprintf_r+0x1ba>
   8695c:	46c8      	mov	r8, r9
   8695e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86960:	f7ff ba16 	b.w	85d90 <_svfprintf_r+0x344>
   86964:	9c15      	ldr	r4, [sp, #84]	; 0x54
   86966:	4622      	mov	r2, r4
   86968:	4620      	mov	r0, r4
   8696a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   8696c:	4623      	mov	r3, r4
   8696e:	4621      	mov	r1, r4
   86970:	f002 fe62 	bl	89638 <__aeabi_dcmpun>
   86974:	2800      	cmp	r0, #0
   86976:	f040 8273 	bne.w	86e60 <_svfprintf_r+0x1414>
   8697a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8697c:	3301      	adds	r3, #1
   8697e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86980:	f023 0320 	bic.w	r3, r3, #32
   86984:	930e      	str	r3, [sp, #56]	; 0x38
   86986:	f000 819c 	beq.w	86cc2 <_svfprintf_r+0x1276>
   8698a:	2b47      	cmp	r3, #71	; 0x47
   8698c:	f000 80d6 	beq.w	86b3c <_svfprintf_r+0x10f0>
   86990:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   86994:	9307      	str	r3, [sp, #28]
   86996:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86998:	1e1f      	subs	r7, r3, #0
   8699a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8699c:	9308      	str	r3, [sp, #32]
   8699e:	bfb7      	itett	lt
   869a0:	463b      	movlt	r3, r7
   869a2:	2300      	movge	r3, #0
   869a4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   869a8:	232d      	movlt	r3, #45	; 0x2d
   869aa:	9310      	str	r3, [sp, #64]	; 0x40
   869ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   869ae:	2b66      	cmp	r3, #102	; 0x66
   869b0:	f000 8190 	beq.w	86cd4 <_svfprintf_r+0x1288>
   869b4:	2b46      	cmp	r3, #70	; 0x46
   869b6:	f000 80a4 	beq.w	86b02 <_svfprintf_r+0x10b6>
   869ba:	2002      	movs	r0, #2
   869bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   869be:	a923      	add	r1, sp, #140	; 0x8c
   869c0:	2b45      	cmp	r3, #69	; 0x45
   869c2:	bf0a      	itet	eq
   869c4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   869c6:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   869c8:	1c5d      	addeq	r5, r3, #1
   869ca:	e88d 0021 	stmia.w	sp, {r0, r5}
   869ce:	9104      	str	r1, [sp, #16]
   869d0:	a820      	add	r0, sp, #128	; 0x80
   869d2:	a91f      	add	r1, sp, #124	; 0x7c
   869d4:	463b      	mov	r3, r7
   869d6:	9003      	str	r0, [sp, #12]
   869d8:	9a08      	ldr	r2, [sp, #32]
   869da:	9102      	str	r1, [sp, #8]
   869dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   869de:	f000 fb5b 	bl	87098 <_dtoa_r>
   869e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   869e4:	4606      	mov	r6, r0
   869e6:	2b67      	cmp	r3, #103	; 0x67
   869e8:	f040 81ba 	bne.w	86d60 <_svfprintf_r+0x1314>
   869ec:	f01b 0f01 	tst.w	fp, #1
   869f0:	f000 8223 	beq.w	86e3a <_svfprintf_r+0x13ee>
   869f4:	1974      	adds	r4, r6, r5
   869f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   869f8:	9808      	ldr	r0, [sp, #32]
   869fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   869fc:	4639      	mov	r1, r7
   869fe:	f002 fde9 	bl	895d4 <__aeabi_dcmpeq>
   86a02:	2800      	cmp	r0, #0
   86a04:	f040 8124 	bne.w	86c50 <_svfprintf_r+0x1204>
   86a08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86a0a:	42a3      	cmp	r3, r4
   86a0c:	d206      	bcs.n	86a1c <_svfprintf_r+0xfd0>
   86a0e:	2130      	movs	r1, #48	; 0x30
   86a10:	1c5a      	adds	r2, r3, #1
   86a12:	9223      	str	r2, [sp, #140]	; 0x8c
   86a14:	7019      	strb	r1, [r3, #0]
   86a16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86a18:	429c      	cmp	r4, r3
   86a1a:	d8f9      	bhi.n	86a10 <_svfprintf_r+0xfc4>
   86a1c:	1b9b      	subs	r3, r3, r6
   86a1e:	9313      	str	r3, [sp, #76]	; 0x4c
   86a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a22:	2b47      	cmp	r3, #71	; 0x47
   86a24:	f000 80a2 	beq.w	86b6c <_svfprintf_r+0x1120>
   86a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86a2a:	2b65      	cmp	r3, #101	; 0x65
   86a2c:	f340 81a7 	ble.w	86d7e <_svfprintf_r+0x1332>
   86a30:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86a32:	2b66      	cmp	r3, #102	; 0x66
   86a34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86a36:	9312      	str	r3, [sp, #72]	; 0x48
   86a38:	f000 8171 	beq.w	86d1e <_svfprintf_r+0x12d2>
   86a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86a3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86a40:	4619      	mov	r1, r3
   86a42:	4291      	cmp	r1, r2
   86a44:	f300 815d 	bgt.w	86d02 <_svfprintf_r+0x12b6>
   86a48:	f01b 0f01 	tst.w	fp, #1
   86a4c:	f040 81f0 	bne.w	86e30 <_svfprintf_r+0x13e4>
   86a50:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86a54:	9308      	str	r3, [sp, #32]
   86a56:	2367      	movs	r3, #103	; 0x67
   86a58:	920e      	str	r2, [sp, #56]	; 0x38
   86a5a:	9311      	str	r3, [sp, #68]	; 0x44
   86a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86a5e:	2b00      	cmp	r3, #0
   86a60:	d17d      	bne.n	86b5e <_svfprintf_r+0x1112>
   86a62:	930a      	str	r3, [sp, #40]	; 0x28
   86a64:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86a68:	f7ff b914 	b.w	85c94 <_svfprintf_r+0x248>
   86a6c:	f024 0407 	bic.w	r4, r4, #7
   86a70:	6823      	ldr	r3, [r4, #0]
   86a72:	9315      	str	r3, [sp, #84]	; 0x54
   86a74:	6863      	ldr	r3, [r4, #4]
   86a76:	9314      	str	r3, [sp, #80]	; 0x50
   86a78:	f104 0308 	add.w	r3, r4, #8
   86a7c:	930f      	str	r3, [sp, #60]	; 0x3c
   86a7e:	f7ff bb2f 	b.w	860e0 <_svfprintf_r+0x694>
   86a82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86a84:	6813      	ldr	r3, [r2, #0]
   86a86:	3204      	adds	r2, #4
   86a88:	920f      	str	r2, [sp, #60]	; 0x3c
   86a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86a8c:	601a      	str	r2, [r3, #0]
   86a8e:	f7ff b804 	b.w	85a9a <_svfprintf_r+0x4e>
   86a92:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86a94:	4daf      	ldr	r5, [pc, #700]	; (86d54 <_svfprintf_r+0x1308>)
   86a96:	f7ff b9ad 	b.w	85df4 <_svfprintf_r+0x3a8>
   86a9a:	aa25      	add	r2, sp, #148	; 0x94
   86a9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86a9e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86aa0:	f002 f8c0 	bl	88c24 <__ssprint_r>
   86aa4:	2800      	cmp	r0, #0
   86aa6:	f47f a8ae 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86aaa:	46c8      	mov	r8, r9
   86aac:	e431      	b.n	86312 <_svfprintf_r+0x8c6>
   86aae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86ab0:	4613      	mov	r3, r2
   86ab2:	3304      	adds	r3, #4
   86ab4:	930f      	str	r3, [sp, #60]	; 0x3c
   86ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86ab8:	6811      	ldr	r1, [r2, #0]
   86aba:	17dd      	asrs	r5, r3, #31
   86abc:	461a      	mov	r2, r3
   86abe:	462b      	mov	r3, r5
   86ac0:	e9c1 2300 	strd	r2, r3, [r1]
   86ac4:	f7fe bfe9 	b.w	85a9a <_svfprintf_r+0x4e>
   86ac8:	aa25      	add	r2, sp, #148	; 0x94
   86aca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86acc:	980c      	ldr	r0, [sp, #48]	; 0x30
   86ace:	f002 f8a9 	bl	88c24 <__ssprint_r>
   86ad2:	2800      	cmp	r0, #0
   86ad4:	f47f a897 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86ad8:	46c8      	mov	r8, r9
   86ada:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86adc:	e432      	b.n	86344 <_svfprintf_r+0x8f8>
   86ade:	f108 0808 	add.w	r8, r8, #8
   86ae2:	e52f      	b.n	86544 <_svfprintf_r+0xaf8>
   86ae4:	2140      	movs	r1, #64	; 0x40
   86ae6:	980c      	ldr	r0, [sp, #48]	; 0x30
   86ae8:	f001 fa24 	bl	87f34 <_malloc_r>
   86aec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86aee:	6010      	str	r0, [r2, #0]
   86af0:	6110      	str	r0, [r2, #16]
   86af2:	2800      	cmp	r0, #0
   86af4:	f000 8214 	beq.w	86f20 <_svfprintf_r+0x14d4>
   86af8:	2340      	movs	r3, #64	; 0x40
   86afa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86afc:	6153      	str	r3, [r2, #20]
   86afe:	f7fe bfbc 	b.w	85a7a <_svfprintf_r+0x2e>
   86b02:	2003      	movs	r0, #3
   86b04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86b06:	a923      	add	r1, sp, #140	; 0x8c
   86b08:	e88d 0011 	stmia.w	sp, {r0, r4}
   86b0c:	9104      	str	r1, [sp, #16]
   86b0e:	a820      	add	r0, sp, #128	; 0x80
   86b10:	a91f      	add	r1, sp, #124	; 0x7c
   86b12:	9003      	str	r0, [sp, #12]
   86b14:	9a08      	ldr	r2, [sp, #32]
   86b16:	463b      	mov	r3, r7
   86b18:	9102      	str	r1, [sp, #8]
   86b1a:	980c      	ldr	r0, [sp, #48]	; 0x30
   86b1c:	f000 fabc 	bl	87098 <_dtoa_r>
   86b20:	4625      	mov	r5, r4
   86b22:	4606      	mov	r6, r0
   86b24:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86b26:	1974      	adds	r4, r6, r5
   86b28:	2b46      	cmp	r3, #70	; 0x46
   86b2a:	f47f af64 	bne.w	869f6 <_svfprintf_r+0xfaa>
   86b2e:	7833      	ldrb	r3, [r6, #0]
   86b30:	2b30      	cmp	r3, #48	; 0x30
   86b32:	f000 8187 	beq.w	86e44 <_svfprintf_r+0x13f8>
   86b36:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   86b38:	442c      	add	r4, r5
   86b3a:	e75c      	b.n	869f6 <_svfprintf_r+0xfaa>
   86b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86b3e:	2b00      	cmp	r3, #0
   86b40:	bf08      	it	eq
   86b42:	2301      	moveq	r3, #1
   86b44:	930a      	str	r3, [sp, #40]	; 0x28
   86b46:	e723      	b.n	86990 <_svfprintf_r+0xf44>
   86b48:	4630      	mov	r0, r6
   86b4a:	950a      	str	r5, [sp, #40]	; 0x28
   86b4c:	f7fe ff50 	bl	859f0 <strlen>
   86b50:	940f      	str	r4, [sp, #60]	; 0x3c
   86b52:	900e      	str	r0, [sp, #56]	; 0x38
   86b54:	f8cd b01c 	str.w	fp, [sp, #28]
   86b58:	4603      	mov	r3, r0
   86b5a:	f7ff b9e7 	b.w	85f2c <_svfprintf_r+0x4e0>
   86b5e:	272d      	movs	r7, #45	; 0x2d
   86b60:	2300      	movs	r3, #0
   86b62:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   86b66:	930a      	str	r3, [sp, #40]	; 0x28
   86b68:	f7ff b895 	b.w	85c96 <_svfprintf_r+0x24a>
   86b6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86b6e:	461a      	mov	r2, r3
   86b70:	9312      	str	r3, [sp, #72]	; 0x48
   86b72:	3303      	adds	r3, #3
   86b74:	db04      	blt.n	86b80 <_svfprintf_r+0x1134>
   86b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86b78:	4619      	mov	r1, r3
   86b7a:	4291      	cmp	r1, r2
   86b7c:	f6bf af5e 	bge.w	86a3c <_svfprintf_r+0xff0>
   86b80:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86b82:	3b02      	subs	r3, #2
   86b84:	9311      	str	r3, [sp, #68]	; 0x44
   86b86:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86b88:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   86b8c:	3b01      	subs	r3, #1
   86b8e:	2b00      	cmp	r3, #0
   86b90:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   86b94:	bfb4      	ite	lt
   86b96:	222d      	movlt	r2, #45	; 0x2d
   86b98:	222b      	movge	r2, #43	; 0x2b
   86b9a:	931f      	str	r3, [sp, #124]	; 0x7c
   86b9c:	bfb8      	it	lt
   86b9e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   86ba0:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   86ba4:	bfb8      	it	lt
   86ba6:	f1c3 0301 	rsblt	r3, r3, #1
   86baa:	2b09      	cmp	r3, #9
   86bac:	f340 811f 	ble.w	86dee <_svfprintf_r+0x13a2>
   86bb0:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   86bb4:	4601      	mov	r1, r0
   86bb6:	4c68      	ldr	r4, [pc, #416]	; (86d58 <_svfprintf_r+0x130c>)
   86bb8:	e000      	b.n	86bbc <_svfprintf_r+0x1170>
   86bba:	4611      	mov	r1, r2
   86bbc:	fb84 5203 	smull	r5, r2, r4, r3
   86bc0:	17dd      	asrs	r5, r3, #31
   86bc2:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   86bc6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   86bca:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   86bce:	3230      	adds	r2, #48	; 0x30
   86bd0:	2d09      	cmp	r5, #9
   86bd2:	f801 2c01 	strb.w	r2, [r1, #-1]
   86bd6:	462b      	mov	r3, r5
   86bd8:	f101 32ff 	add.w	r2, r1, #4294967295
   86bdc:	dced      	bgt.n	86bba <_svfprintf_r+0x116e>
   86bde:	3330      	adds	r3, #48	; 0x30
   86be0:	3902      	subs	r1, #2
   86be2:	b2dc      	uxtb	r4, r3
   86be4:	4288      	cmp	r0, r1
   86be6:	f802 4c01 	strb.w	r4, [r2, #-1]
   86bea:	f240 8192 	bls.w	86f12 <_svfprintf_r+0x14c6>
   86bee:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   86bf2:	4613      	mov	r3, r2
   86bf4:	e001      	b.n	86bfa <_svfprintf_r+0x11ae>
   86bf6:	f813 4b01 	ldrb.w	r4, [r3], #1
   86bfa:	4283      	cmp	r3, r0
   86bfc:	f801 4b01 	strb.w	r4, [r1], #1
   86c00:	d1f9      	bne.n	86bf6 <_svfprintf_r+0x11aa>
   86c02:	3301      	adds	r3, #1
   86c04:	1a9b      	subs	r3, r3, r2
   86c06:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   86c0a:	4413      	add	r3, r2
   86c0c:	aa21      	add	r2, sp, #132	; 0x84
   86c0e:	1a9b      	subs	r3, r3, r2
   86c10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86c12:	931b      	str	r3, [sp, #108]	; 0x6c
   86c14:	2a01      	cmp	r2, #1
   86c16:	4413      	add	r3, r2
   86c18:	930e      	str	r3, [sp, #56]	; 0x38
   86c1a:	f340 8148 	ble.w	86eae <_svfprintf_r+0x1462>
   86c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86c20:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86c22:	4413      	add	r3, r2
   86c24:	930e      	str	r3, [sp, #56]	; 0x38
   86c26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86c2a:	9308      	str	r3, [sp, #32]
   86c2c:	2300      	movs	r3, #0
   86c2e:	9312      	str	r3, [sp, #72]	; 0x48
   86c30:	e714      	b.n	86a5c <_svfprintf_r+0x1010>
   86c32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86c34:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86c36:	f7ff b876 	b.w	85d26 <_svfprintf_r+0x2da>
   86c3a:	aa25      	add	r2, sp, #148	; 0x94
   86c3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c3e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86c40:	f001 fff0 	bl	88c24 <__ssprint_r>
   86c44:	2800      	cmp	r0, #0
   86c46:	f47e afde 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86c4a:	46c8      	mov	r8, r9
   86c4c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86c4e:	e4fb      	b.n	86648 <_svfprintf_r+0xbfc>
   86c50:	4623      	mov	r3, r4
   86c52:	e6e3      	b.n	86a1c <_svfprintf_r+0xfd0>
   86c54:	aa25      	add	r2, sp, #148	; 0x94
   86c56:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c58:	980c      	ldr	r0, [sp, #48]	; 0x30
   86c5a:	f001 ffe3 	bl	88c24 <__ssprint_r>
   86c5e:	2800      	cmp	r0, #0
   86c60:	f47e afd1 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86c64:	46c8      	mov	r8, r9
   86c66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86c68:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86c6a:	e5d3      	b.n	86814 <_svfprintf_r+0xdc8>
   86c6c:	aa25      	add	r2, sp, #148	; 0x94
   86c6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c70:	980c      	ldr	r0, [sp, #48]	; 0x30
   86c72:	f001 ffd7 	bl	88c24 <__ssprint_r>
   86c76:	2800      	cmp	r0, #0
   86c78:	f47e afc5 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86c7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86c7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86c80:	46c8      	mov	r8, r9
   86c82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86c84:	1a9a      	subs	r2, r3, r2
   86c86:	e5dd      	b.n	86844 <_svfprintf_r+0xdf8>
   86c88:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86c8a:	f7ff b8fe 	b.w	85e8a <_svfprintf_r+0x43e>
   86c8e:	aa25      	add	r2, sp, #148	; 0x94
   86c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c92:	980c      	ldr	r0, [sp, #48]	; 0x30
   86c94:	f001 ffc6 	bl	88c24 <__ssprint_r>
   86c98:	2800      	cmp	r0, #0
   86c9a:	f47e afb4 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86c9e:	46c8      	mov	r8, r9
   86ca0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86ca2:	e5b0      	b.n	86806 <_svfprintf_r+0xdba>
   86ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86ca6:	4637      	mov	r7, r6
   86ca8:	2b06      	cmp	r3, #6
   86caa:	bf28      	it	cs
   86cac:	2306      	movcs	r3, #6
   86cae:	960a      	str	r6, [sp, #40]	; 0x28
   86cb0:	9612      	str	r6, [sp, #72]	; 0x48
   86cb2:	9308      	str	r3, [sp, #32]
   86cb4:	940f      	str	r4, [sp, #60]	; 0x3c
   86cb6:	f8cd b01c 	str.w	fp, [sp, #28]
   86cba:	930e      	str	r3, [sp, #56]	; 0x38
   86cbc:	4e27      	ldr	r6, [pc, #156]	; (86d5c <_svfprintf_r+0x1310>)
   86cbe:	f7fe bfe9 	b.w	85c94 <_svfprintf_r+0x248>
   86cc2:	2306      	movs	r3, #6
   86cc4:	930a      	str	r3, [sp, #40]	; 0x28
   86cc6:	e663      	b.n	86990 <_svfprintf_r+0xf44>
   86cc8:	232d      	movs	r3, #45	; 0x2d
   86cca:	461f      	mov	r7, r3
   86ccc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   86cd0:	f7ff ba28 	b.w	86124 <_svfprintf_r+0x6d8>
   86cd4:	2003      	movs	r0, #3
   86cd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86cd8:	a923      	add	r1, sp, #140	; 0x8c
   86cda:	e88d 0011 	stmia.w	sp, {r0, r4}
   86cde:	9104      	str	r1, [sp, #16]
   86ce0:	a820      	add	r0, sp, #128	; 0x80
   86ce2:	a91f      	add	r1, sp, #124	; 0x7c
   86ce4:	9003      	str	r0, [sp, #12]
   86ce6:	9a08      	ldr	r2, [sp, #32]
   86ce8:	463b      	mov	r3, r7
   86cea:	9102      	str	r1, [sp, #8]
   86cec:	980c      	ldr	r0, [sp, #48]	; 0x30
   86cee:	f000 f9d3 	bl	87098 <_dtoa_r>
   86cf2:	4625      	mov	r5, r4
   86cf4:	4606      	mov	r6, r0
   86cf6:	1904      	adds	r4, r0, r4
   86cf8:	e719      	b.n	86b2e <_svfprintf_r+0x10e2>
   86cfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86cfc:	4d15      	ldr	r5, [pc, #84]	; (86d54 <_svfprintf_r+0x1308>)
   86cfe:	f7ff bb7e 	b.w	863fe <_svfprintf_r+0x9b2>
   86d02:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86d04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86d06:	4413      	add	r3, r2
   86d08:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86d0a:	930e      	str	r3, [sp, #56]	; 0x38
   86d0c:	2a00      	cmp	r2, #0
   86d0e:	f340 80c7 	ble.w	86ea0 <_svfprintf_r+0x1454>
   86d12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86d16:	9308      	str	r3, [sp, #32]
   86d18:	2367      	movs	r3, #103	; 0x67
   86d1a:	9311      	str	r3, [sp, #68]	; 0x44
   86d1c:	e69e      	b.n	86a5c <_svfprintf_r+0x1010>
   86d1e:	2b00      	cmp	r3, #0
   86d20:	f340 80e1 	ble.w	86ee6 <_svfprintf_r+0x149a>
   86d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86d26:	2a00      	cmp	r2, #0
   86d28:	f040 80b0 	bne.w	86e8c <_svfprintf_r+0x1440>
   86d2c:	f01b 0f01 	tst.w	fp, #1
   86d30:	f040 80ac 	bne.w	86e8c <_svfprintf_r+0x1440>
   86d34:	9308      	str	r3, [sp, #32]
   86d36:	930e      	str	r3, [sp, #56]	; 0x38
   86d38:	e690      	b.n	86a5c <_svfprintf_r+0x1010>
   86d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86d3c:	940f      	str	r4, [sp, #60]	; 0x3c
   86d3e:	9308      	str	r3, [sp, #32]
   86d40:	930e      	str	r3, [sp, #56]	; 0x38
   86d42:	900a      	str	r0, [sp, #40]	; 0x28
   86d44:	f8cd b01c 	str.w	fp, [sp, #28]
   86d48:	9012      	str	r0, [sp, #72]	; 0x48
   86d4a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86d4e:	f7fe bfa1 	b.w	85c94 <_svfprintf_r+0x248>
   86d52:	bf00      	nop
   86d54:	00089bb8 	.word	0x00089bb8
   86d58:	66666667 	.word	0x66666667
   86d5c:	00089b9c 	.word	0x00089b9c
   86d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86d62:	2b47      	cmp	r3, #71	; 0x47
   86d64:	f47f ae46 	bne.w	869f4 <_svfprintf_r+0xfa8>
   86d68:	f01b 0f01 	tst.w	fp, #1
   86d6c:	f47f aeda 	bne.w	86b24 <_svfprintf_r+0x10d8>
   86d70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86d72:	1b9b      	subs	r3, r3, r6
   86d74:	9313      	str	r3, [sp, #76]	; 0x4c
   86d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86d78:	2b47      	cmp	r3, #71	; 0x47
   86d7a:	f43f aef7 	beq.w	86b6c <_svfprintf_r+0x1120>
   86d7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86d80:	9312      	str	r3, [sp, #72]	; 0x48
   86d82:	e700      	b.n	86b86 <_svfprintf_r+0x113a>
   86d84:	2000      	movs	r0, #0
   86d86:	900a      	str	r0, [sp, #40]	; 0x28
   86d88:	f7fe bebc 	b.w	85b04 <_svfprintf_r+0xb8>
   86d8c:	424f      	negs	r7, r1
   86d8e:	3110      	adds	r1, #16
   86d90:	da35      	bge.n	86dfe <_svfprintf_r+0x13b2>
   86d92:	2410      	movs	r4, #16
   86d94:	4d6a      	ldr	r5, [pc, #424]	; (86f40 <_svfprintf_r+0x14f4>)
   86d96:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86d9a:	e004      	b.n	86da6 <_svfprintf_r+0x135a>
   86d9c:	f108 0808 	add.w	r8, r8, #8
   86da0:	3f10      	subs	r7, #16
   86da2:	2f10      	cmp	r7, #16
   86da4:	dd2c      	ble.n	86e00 <_svfprintf_r+0x13b4>
   86da6:	3301      	adds	r3, #1
   86da8:	3210      	adds	r2, #16
   86daa:	2b07      	cmp	r3, #7
   86dac:	9227      	str	r2, [sp, #156]	; 0x9c
   86dae:	9326      	str	r3, [sp, #152]	; 0x98
   86db0:	f8c8 5000 	str.w	r5, [r8]
   86db4:	f8c8 4004 	str.w	r4, [r8, #4]
   86db8:	ddf0      	ble.n	86d9c <_svfprintf_r+0x1350>
   86dba:	aa25      	add	r2, sp, #148	; 0x94
   86dbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86dbe:	4658      	mov	r0, fp
   86dc0:	f001 ff30 	bl	88c24 <__ssprint_r>
   86dc4:	2800      	cmp	r0, #0
   86dc6:	f47e af1e 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86dca:	46c8      	mov	r8, r9
   86dcc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86dce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86dd0:	e7e6      	b.n	86da0 <_svfprintf_r+0x1354>
   86dd2:	aa25      	add	r2, sp, #148	; 0x94
   86dd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86dd6:	980c      	ldr	r0, [sp, #48]	; 0x30
   86dd8:	f001 ff24 	bl	88c24 <__ssprint_r>
   86ddc:	2800      	cmp	r0, #0
   86dde:	f47e af12 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86de2:	46c8      	mov	r8, r9
   86de4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86de6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86de8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86dea:	f7ff bbc3 	b.w	86574 <_svfprintf_r+0xb28>
   86dee:	2230      	movs	r2, #48	; 0x30
   86df0:	4413      	add	r3, r2
   86df2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   86df6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   86dfa:	ab22      	add	r3, sp, #136	; 0x88
   86dfc:	e706      	b.n	86c0c <_svfprintf_r+0x11c0>
   86dfe:	4d50      	ldr	r5, [pc, #320]	; (86f40 <_svfprintf_r+0x14f4>)
   86e00:	3301      	adds	r3, #1
   86e02:	443a      	add	r2, r7
   86e04:	2b07      	cmp	r3, #7
   86e06:	e888 00a0 	stmia.w	r8, {r5, r7}
   86e0a:	9227      	str	r2, [sp, #156]	; 0x9c
   86e0c:	9326      	str	r3, [sp, #152]	; 0x98
   86e0e:	f108 0808 	add.w	r8, r8, #8
   86e12:	f77f abb2 	ble.w	8657a <_svfprintf_r+0xb2e>
   86e16:	aa25      	add	r2, sp, #148	; 0x94
   86e18:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86e1a:	980c      	ldr	r0, [sp, #48]	; 0x30
   86e1c:	f001 ff02 	bl	88c24 <__ssprint_r>
   86e20:	2800      	cmp	r0, #0
   86e22:	f47e aef0 	bne.w	85c06 <_svfprintf_r+0x1ba>
   86e26:	46c8      	mov	r8, r9
   86e28:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86e2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86e2c:	f7ff bba5 	b.w	8657a <_svfprintf_r+0xb2e>
   86e30:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86e32:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86e34:	4413      	add	r3, r2
   86e36:	930e      	str	r3, [sp, #56]	; 0x38
   86e38:	e76b      	b.n	86d12 <_svfprintf_r+0x12c6>
   86e3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86e3c:	e5ee      	b.n	86a1c <_svfprintf_r+0xfd0>
   86e3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86e40:	4d3f      	ldr	r5, [pc, #252]	; (86f40 <_svfprintf_r+0x14f4>)
   86e42:	e4bb      	b.n	867bc <_svfprintf_r+0xd70>
   86e44:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86e46:	9808      	ldr	r0, [sp, #32]
   86e48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86e4a:	4639      	mov	r1, r7
   86e4c:	f002 fbc2 	bl	895d4 <__aeabi_dcmpeq>
   86e50:	2800      	cmp	r0, #0
   86e52:	f47f ae70 	bne.w	86b36 <_svfprintf_r+0x10ea>
   86e56:	f1c5 0501 	rsb	r5, r5, #1
   86e5a:	951f      	str	r5, [sp, #124]	; 0x7c
   86e5c:	442c      	add	r4, r5
   86e5e:	e5ca      	b.n	869f6 <_svfprintf_r+0xfaa>
   86e60:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86e62:	4e38      	ldr	r6, [pc, #224]	; (86f44 <_svfprintf_r+0x14f8>)
   86e64:	2b00      	cmp	r3, #0
   86e66:	bfbe      	ittt	lt
   86e68:	232d      	movlt	r3, #45	; 0x2d
   86e6a:	461f      	movlt	r7, r3
   86e6c:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   86e70:	f04f 0303 	mov.w	r3, #3
   86e74:	461a      	mov	r2, r3
   86e76:	9308      	str	r3, [sp, #32]
   86e78:	f04f 0300 	mov.w	r3, #0
   86e7c:	bfa8      	it	ge
   86e7e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   86e82:	4619      	mov	r1, r3
   86e84:	930a      	str	r3, [sp, #40]	; 0x28
   86e86:	4b30      	ldr	r3, [pc, #192]	; (86f48 <_svfprintf_r+0x14fc>)
   86e88:	f7ff b954 	b.w	86134 <_svfprintf_r+0x6e8>
   86e8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86e8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86e90:	4413      	add	r3, r2
   86e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86e94:	441a      	add	r2, r3
   86e96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86e9a:	920e      	str	r2, [sp, #56]	; 0x38
   86e9c:	9308      	str	r3, [sp, #32]
   86e9e:	e5dd      	b.n	86a5c <_svfprintf_r+0x1010>
   86ea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86ea4:	f1c3 0301 	rsb	r3, r3, #1
   86ea8:	441a      	add	r2, r3
   86eaa:	4613      	mov	r3, r2
   86eac:	e7c3      	b.n	86e36 <_svfprintf_r+0x13ea>
   86eae:	f01b 0301 	ands.w	r3, fp, #1
   86eb2:	9312      	str	r3, [sp, #72]	; 0x48
   86eb4:	f47f aeb3 	bne.w	86c1e <_svfprintf_r+0x11d2>
   86eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86eba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86ebe:	9308      	str	r3, [sp, #32]
   86ec0:	e5cc      	b.n	86a5c <_svfprintf_r+0x1010>
   86ec2:	4d1f      	ldr	r5, [pc, #124]	; (86f40 <_svfprintf_r+0x14f4>)
   86ec4:	e43c      	b.n	86740 <_svfprintf_r+0xcf4>
   86ec6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86ec8:	4d1d      	ldr	r5, [pc, #116]	; (86f40 <_svfprintf_r+0x14f4>)
   86eca:	e491      	b.n	867f0 <_svfprintf_r+0xda4>
   86ecc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   86ece:	f89a 3001 	ldrb.w	r3, [sl, #1]
   86ed2:	6828      	ldr	r0, [r5, #0]
   86ed4:	46a2      	mov	sl, r4
   86ed6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   86eda:	900a      	str	r0, [sp, #40]	; 0x28
   86edc:	4628      	mov	r0, r5
   86ede:	3004      	adds	r0, #4
   86ee0:	900f      	str	r0, [sp, #60]	; 0x3c
   86ee2:	f7fe be0d 	b.w	85b00 <_svfprintf_r+0xb4>
   86ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86ee8:	b913      	cbnz	r3, 86ef0 <_svfprintf_r+0x14a4>
   86eea:	f01b 0f01 	tst.w	fp, #1
   86eee:	d002      	beq.n	86ef6 <_svfprintf_r+0x14aa>
   86ef0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86ef2:	3301      	adds	r3, #1
   86ef4:	e7cd      	b.n	86e92 <_svfprintf_r+0x1446>
   86ef6:	2301      	movs	r3, #1
   86ef8:	e71c      	b.n	86d34 <_svfprintf_r+0x12e8>
   86efa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86efe:	f7ff b980 	b.w	86202 <_svfprintf_r+0x7b6>
   86f02:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86f06:	f7ff b93a 	b.w	8617e <_svfprintf_r+0x732>
   86f0a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86f0e:	f7ff b84f 	b.w	85fb0 <_svfprintf_r+0x564>
   86f12:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   86f16:	e679      	b.n	86c0c <_svfprintf_r+0x11c0>
   86f18:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86f1c:	f7ff b9b2 	b.w	86284 <_svfprintf_r+0x838>
   86f20:	f04f 32ff 	mov.w	r2, #4294967295
   86f24:	230c      	movs	r3, #12
   86f26:	9209      	str	r2, [sp, #36]	; 0x24
   86f28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86f2a:	6013      	str	r3, [r2, #0]
   86f2c:	f7fe be74 	b.w	85c18 <_svfprintf_r+0x1cc>
   86f30:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86f34:	f7ff b8c4 	b.w	860c0 <_svfprintf_r+0x674>
   86f38:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86f3c:	f7ff b878 	b.w	86030 <_svfprintf_r+0x5e4>
   86f40:	00089bb8 	.word	0x00089bb8
   86f44:	00089b70 	.word	0x00089b70
   86f48:	00089b6c 	.word	0x00089b6c

00086f4c <register_fini>:
   86f4c:	4b02      	ldr	r3, [pc, #8]	; (86f58 <register_fini+0xc>)
   86f4e:	b113      	cbz	r3, 86f56 <register_fini+0xa>
   86f50:	4802      	ldr	r0, [pc, #8]	; (86f5c <register_fini+0x10>)
   86f52:	f000 b805 	b.w	86f60 <atexit>
   86f56:	4770      	bx	lr
   86f58:	00000000 	.word	0x00000000
   86f5c:	00087edd 	.word	0x00087edd

00086f60 <atexit>:
   86f60:	2300      	movs	r3, #0
   86f62:	4601      	mov	r1, r0
   86f64:	461a      	mov	r2, r3
   86f66:	4618      	mov	r0, r3
   86f68:	f001 beda 	b.w	88d20 <__register_exitproc>

00086f6c <quorem>:
   86f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86f70:	6903      	ldr	r3, [r0, #16]
   86f72:	690f      	ldr	r7, [r1, #16]
   86f74:	b083      	sub	sp, #12
   86f76:	429f      	cmp	r7, r3
   86f78:	f300 8088 	bgt.w	8708c <quorem+0x120>
   86f7c:	3f01      	subs	r7, #1
   86f7e:	f101 0614 	add.w	r6, r1, #20
   86f82:	f100 0a14 	add.w	sl, r0, #20
   86f86:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   86f8a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   86f8e:	3301      	adds	r3, #1
   86f90:	fbb2 f8f3 	udiv	r8, r2, r3
   86f94:	00bb      	lsls	r3, r7, #2
   86f96:	9300      	str	r3, [sp, #0]
   86f98:	eb06 0903 	add.w	r9, r6, r3
   86f9c:	4453      	add	r3, sl
   86f9e:	9301      	str	r3, [sp, #4]
   86fa0:	f1b8 0f00 	cmp.w	r8, #0
   86fa4:	d03b      	beq.n	8701e <quorem+0xb2>
   86fa6:	2300      	movs	r3, #0
   86fa8:	46b4      	mov	ip, r6
   86faa:	461c      	mov	r4, r3
   86fac:	46d6      	mov	lr, sl
   86fae:	f85c 2b04 	ldr.w	r2, [ip], #4
   86fb2:	f8de 5000 	ldr.w	r5, [lr]
   86fb6:	fa1f fb82 	uxth.w	fp, r2
   86fba:	fb08 330b 	mla	r3, r8, fp, r3
   86fbe:	0c12      	lsrs	r2, r2, #16
   86fc0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   86fc4:	fb08 bb02 	mla	fp, r8, r2, fp
   86fc8:	b29a      	uxth	r2, r3
   86fca:	1aa2      	subs	r2, r4, r2
   86fcc:	b2ab      	uxth	r3, r5
   86fce:	fa1f f48b 	uxth.w	r4, fp
   86fd2:	441a      	add	r2, r3
   86fd4:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   86fd8:	eb04 4422 	add.w	r4, r4, r2, asr #16
   86fdc:	b292      	uxth	r2, r2
   86fde:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   86fe2:	45e1      	cmp	r9, ip
   86fe4:	f84e 2b04 	str.w	r2, [lr], #4
   86fe8:	ea4f 4424 	mov.w	r4, r4, asr #16
   86fec:	ea4f 431b 	mov.w	r3, fp, lsr #16
   86ff0:	d2dd      	bcs.n	86fae <quorem+0x42>
   86ff2:	9b00      	ldr	r3, [sp, #0]
   86ff4:	f85a 3003 	ldr.w	r3, [sl, r3]
   86ff8:	b98b      	cbnz	r3, 8701e <quorem+0xb2>
   86ffa:	9c01      	ldr	r4, [sp, #4]
   86ffc:	1f23      	subs	r3, r4, #4
   86ffe:	459a      	cmp	sl, r3
   87000:	d20c      	bcs.n	8701c <quorem+0xb0>
   87002:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87006:	b94b      	cbnz	r3, 8701c <quorem+0xb0>
   87008:	f1a4 0308 	sub.w	r3, r4, #8
   8700c:	e002      	b.n	87014 <quorem+0xa8>
   8700e:	681a      	ldr	r2, [r3, #0]
   87010:	3b04      	subs	r3, #4
   87012:	b91a      	cbnz	r2, 8701c <quorem+0xb0>
   87014:	459a      	cmp	sl, r3
   87016:	f107 37ff 	add.w	r7, r7, #4294967295
   8701a:	d3f8      	bcc.n	8700e <quorem+0xa2>
   8701c:	6107      	str	r7, [r0, #16]
   8701e:	4604      	mov	r4, r0
   87020:	f001 fcf0 	bl	88a04 <__mcmp>
   87024:	2800      	cmp	r0, #0
   87026:	db2d      	blt.n	87084 <quorem+0x118>
   87028:	4655      	mov	r5, sl
   8702a:	2300      	movs	r3, #0
   8702c:	f108 0801 	add.w	r8, r8, #1
   87030:	f856 1b04 	ldr.w	r1, [r6], #4
   87034:	6828      	ldr	r0, [r5, #0]
   87036:	b28a      	uxth	r2, r1
   87038:	1a9a      	subs	r2, r3, r2
   8703a:	0c0b      	lsrs	r3, r1, #16
   8703c:	b281      	uxth	r1, r0
   8703e:	440a      	add	r2, r1
   87040:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   87044:	eb03 4322 	add.w	r3, r3, r2, asr #16
   87048:	b292      	uxth	r2, r2
   8704a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8704e:	45b1      	cmp	r9, r6
   87050:	f845 2b04 	str.w	r2, [r5], #4
   87054:	ea4f 4323 	mov.w	r3, r3, asr #16
   87058:	d2ea      	bcs.n	87030 <quorem+0xc4>
   8705a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8705e:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   87062:	b97a      	cbnz	r2, 87084 <quorem+0x118>
   87064:	1f1a      	subs	r2, r3, #4
   87066:	4592      	cmp	sl, r2
   87068:	d20b      	bcs.n	87082 <quorem+0x116>
   8706a:	f853 2c04 	ldr.w	r2, [r3, #-4]
   8706e:	b942      	cbnz	r2, 87082 <quorem+0x116>
   87070:	3b08      	subs	r3, #8
   87072:	e002      	b.n	8707a <quorem+0x10e>
   87074:	681a      	ldr	r2, [r3, #0]
   87076:	3b04      	subs	r3, #4
   87078:	b91a      	cbnz	r2, 87082 <quorem+0x116>
   8707a:	459a      	cmp	sl, r3
   8707c:	f107 37ff 	add.w	r7, r7, #4294967295
   87080:	d3f8      	bcc.n	87074 <quorem+0x108>
   87082:	6127      	str	r7, [r4, #16]
   87084:	4640      	mov	r0, r8
   87086:	b003      	add	sp, #12
   87088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8708c:	2000      	movs	r0, #0
   8708e:	b003      	add	sp, #12
   87090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87094:	0000      	movs	r0, r0
	...

00087098 <_dtoa_r>:
   87098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8709c:	6c05      	ldr	r5, [r0, #64]	; 0x40
   8709e:	b09b      	sub	sp, #108	; 0x6c
   870a0:	4604      	mov	r4, r0
   870a2:	4692      	mov	sl, r2
   870a4:	469b      	mov	fp, r3
   870a6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   870a8:	b14d      	cbz	r5, 870be <_dtoa_r+0x26>
   870aa:	2301      	movs	r3, #1
   870ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
   870ae:	4629      	mov	r1, r5
   870b0:	4093      	lsls	r3, r2
   870b2:	60ab      	str	r3, [r5, #8]
   870b4:	606a      	str	r2, [r5, #4]
   870b6:	f001 facd 	bl	88654 <_Bfree>
   870ba:	2300      	movs	r3, #0
   870bc:	6423      	str	r3, [r4, #64]	; 0x40
   870be:	f1bb 0f00 	cmp.w	fp, #0
   870c2:	465d      	mov	r5, fp
   870c4:	db35      	blt.n	87132 <_dtoa_r+0x9a>
   870c6:	2300      	movs	r3, #0
   870c8:	6033      	str	r3, [r6, #0]
   870ca:	4b9d      	ldr	r3, [pc, #628]	; (87340 <_dtoa_r+0x2a8>)
   870cc:	43ab      	bics	r3, r5
   870ce:	d015      	beq.n	870fc <_dtoa_r+0x64>
   870d0:	2200      	movs	r2, #0
   870d2:	2300      	movs	r3, #0
   870d4:	4650      	mov	r0, sl
   870d6:	4659      	mov	r1, fp
   870d8:	f002 fa7c 	bl	895d4 <__aeabi_dcmpeq>
   870dc:	4680      	mov	r8, r0
   870de:	2800      	cmp	r0, #0
   870e0:	d02d      	beq.n	8713e <_dtoa_r+0xa6>
   870e2:	2301      	movs	r3, #1
   870e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   870e6:	6013      	str	r3, [r2, #0]
   870e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   870ea:	2b00      	cmp	r3, #0
   870ec:	f000 80bd 	beq.w	8726a <_dtoa_r+0x1d2>
   870f0:	4894      	ldr	r0, [pc, #592]	; (87344 <_dtoa_r+0x2ac>)
   870f2:	6018      	str	r0, [r3, #0]
   870f4:	3801      	subs	r0, #1
   870f6:	b01b      	add	sp, #108	; 0x6c
   870f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   870fc:	f242 730f 	movw	r3, #9999	; 0x270f
   87100:	9a26      	ldr	r2, [sp, #152]	; 0x98
   87102:	6013      	str	r3, [r2, #0]
   87104:	f1ba 0f00 	cmp.w	sl, #0
   87108:	d10d      	bne.n	87126 <_dtoa_r+0x8e>
   8710a:	f3c5 0513 	ubfx	r5, r5, #0, #20
   8710e:	b955      	cbnz	r5, 87126 <_dtoa_r+0x8e>
   87110:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87112:	488d      	ldr	r0, [pc, #564]	; (87348 <_dtoa_r+0x2b0>)
   87114:	2b00      	cmp	r3, #0
   87116:	d0ee      	beq.n	870f6 <_dtoa_r+0x5e>
   87118:	f100 0308 	add.w	r3, r0, #8
   8711c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8711e:	6013      	str	r3, [r2, #0]
   87120:	b01b      	add	sp, #108	; 0x6c
   87122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87126:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87128:	4888      	ldr	r0, [pc, #544]	; (8734c <_dtoa_r+0x2b4>)
   8712a:	2b00      	cmp	r3, #0
   8712c:	d0e3      	beq.n	870f6 <_dtoa_r+0x5e>
   8712e:	1cc3      	adds	r3, r0, #3
   87130:	e7f4      	b.n	8711c <_dtoa_r+0x84>
   87132:	2301      	movs	r3, #1
   87134:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   87138:	6033      	str	r3, [r6, #0]
   8713a:	46ab      	mov	fp, r5
   8713c:	e7c5      	b.n	870ca <_dtoa_r+0x32>
   8713e:	aa18      	add	r2, sp, #96	; 0x60
   87140:	ab19      	add	r3, sp, #100	; 0x64
   87142:	9201      	str	r2, [sp, #4]
   87144:	9300      	str	r3, [sp, #0]
   87146:	4652      	mov	r2, sl
   87148:	465b      	mov	r3, fp
   8714a:	4620      	mov	r0, r4
   8714c:	f001 fd04 	bl	88b58 <__d2b>
   87150:	0d2b      	lsrs	r3, r5, #20
   87152:	4681      	mov	r9, r0
   87154:	d071      	beq.n	8723a <_dtoa_r+0x1a2>
   87156:	4650      	mov	r0, sl
   87158:	f3cb 0213 	ubfx	r2, fp, #0, #20
   8715c:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   87160:	9f18      	ldr	r7, [sp, #96]	; 0x60
   87162:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   87166:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   8716a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8716e:	2200      	movs	r2, #0
   87170:	4b77      	ldr	r3, [pc, #476]	; (87350 <_dtoa_r+0x2b8>)
   87172:	f7fd fce1 	bl	84b38 <__aeabi_dsub>
   87176:	a36c      	add	r3, pc, #432	; (adr r3, 87328 <_dtoa_r+0x290>)
   87178:	e9d3 2300 	ldrd	r2, r3, [r3]
   8717c:	f7fd fe90 	bl	84ea0 <__aeabi_dmul>
   87180:	a36b      	add	r3, pc, #428	; (adr r3, 87330 <_dtoa_r+0x298>)
   87182:	e9d3 2300 	ldrd	r2, r3, [r3]
   87186:	f7fd fcd9 	bl	84b3c <__adddf3>
   8718a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8718e:	4630      	mov	r0, r6
   87190:	f7fd fe20 	bl	84dd4 <__aeabi_i2d>
   87194:	a368      	add	r3, pc, #416	; (adr r3, 87338 <_dtoa_r+0x2a0>)
   87196:	e9d3 2300 	ldrd	r2, r3, [r3]
   8719a:	f7fd fe81 	bl	84ea0 <__aeabi_dmul>
   8719e:	4602      	mov	r2, r0
   871a0:	460b      	mov	r3, r1
   871a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   871a6:	f7fd fcc9 	bl	84b3c <__adddf3>
   871aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   871ae:	f002 fa59 	bl	89664 <__aeabi_d2iz>
   871b2:	2200      	movs	r2, #0
   871b4:	9002      	str	r0, [sp, #8]
   871b6:	2300      	movs	r3, #0
   871b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   871bc:	f002 fa14 	bl	895e8 <__aeabi_dcmplt>
   871c0:	2800      	cmp	r0, #0
   871c2:	f040 816d 	bne.w	874a0 <_dtoa_r+0x408>
   871c6:	9d02      	ldr	r5, [sp, #8]
   871c8:	2d16      	cmp	r5, #22
   871ca:	f200 8157 	bhi.w	8747c <_dtoa_r+0x3e4>
   871ce:	4961      	ldr	r1, [pc, #388]	; (87354 <_dtoa_r+0x2bc>)
   871d0:	4652      	mov	r2, sl
   871d2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   871d6:	465b      	mov	r3, fp
   871d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   871dc:	f002 fa22 	bl	89624 <__aeabi_dcmpgt>
   871e0:	2800      	cmp	r0, #0
   871e2:	f000 81be 	beq.w	87562 <_dtoa_r+0x4ca>
   871e6:	1e6b      	subs	r3, r5, #1
   871e8:	9302      	str	r3, [sp, #8]
   871ea:	2300      	movs	r3, #0
   871ec:	930e      	str	r3, [sp, #56]	; 0x38
   871ee:	1bbf      	subs	r7, r7, r6
   871f0:	1e7b      	subs	r3, r7, #1
   871f2:	9308      	str	r3, [sp, #32]
   871f4:	f100 814e 	bmi.w	87494 <_dtoa_r+0x3fc>
   871f8:	2300      	movs	r3, #0
   871fa:	930a      	str	r3, [sp, #40]	; 0x28
   871fc:	9b02      	ldr	r3, [sp, #8]
   871fe:	2b00      	cmp	r3, #0
   87200:	f2c0 813f 	blt.w	87482 <_dtoa_r+0x3ea>
   87204:	9a08      	ldr	r2, [sp, #32]
   87206:	930d      	str	r3, [sp, #52]	; 0x34
   87208:	4611      	mov	r1, r2
   8720a:	4419      	add	r1, r3
   8720c:	2300      	movs	r3, #0
   8720e:	9108      	str	r1, [sp, #32]
   87210:	930c      	str	r3, [sp, #48]	; 0x30
   87212:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87214:	2b09      	cmp	r3, #9
   87216:	d82a      	bhi.n	8726e <_dtoa_r+0x1d6>
   87218:	2b05      	cmp	r3, #5
   8721a:	f340 8658 	ble.w	87ece <_dtoa_r+0xe36>
   8721e:	2500      	movs	r5, #0
   87220:	3b04      	subs	r3, #4
   87222:	9324      	str	r3, [sp, #144]	; 0x90
   87224:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87226:	3b02      	subs	r3, #2
   87228:	2b03      	cmp	r3, #3
   8722a:	f200 863f 	bhi.w	87eac <_dtoa_r+0xe14>
   8722e:	e8df f013 	tbh	[pc, r3, lsl #1]
   87232:	03ce      	.short	0x03ce
   87234:	03d902c3 	.word	0x03d902c3
   87238:	045b      	.short	0x045b
   8723a:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8723c:	9e19      	ldr	r6, [sp, #100]	; 0x64
   8723e:	443e      	add	r6, r7
   87240:	f206 4332 	addw	r3, r6, #1074	; 0x432
   87244:	2b20      	cmp	r3, #32
   87246:	f340 8187 	ble.w	87558 <_dtoa_r+0x4c0>
   8724a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   8724e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   87252:	409d      	lsls	r5, r3
   87254:	fa2a f000 	lsr.w	r0, sl, r0
   87258:	4328      	orrs	r0, r5
   8725a:	f7fd fdab 	bl	84db4 <__aeabi_ui2d>
   8725e:	2301      	movs	r3, #1
   87260:	3e01      	subs	r6, #1
   87262:	9314      	str	r3, [sp, #80]	; 0x50
   87264:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   87268:	e781      	b.n	8716e <_dtoa_r+0xd6>
   8726a:	483b      	ldr	r0, [pc, #236]	; (87358 <_dtoa_r+0x2c0>)
   8726c:	e743      	b.n	870f6 <_dtoa_r+0x5e>
   8726e:	2100      	movs	r1, #0
   87270:	4620      	mov	r0, r4
   87272:	6461      	str	r1, [r4, #68]	; 0x44
   87274:	9125      	str	r1, [sp, #148]	; 0x94
   87276:	f001 f9c7 	bl	88608 <_Balloc>
   8727a:	f04f 33ff 	mov.w	r3, #4294967295
   8727e:	9307      	str	r3, [sp, #28]
   87280:	930f      	str	r3, [sp, #60]	; 0x3c
   87282:	2301      	movs	r3, #1
   87284:	9a25      	ldr	r2, [sp, #148]	; 0x94
   87286:	9004      	str	r0, [sp, #16]
   87288:	6420      	str	r0, [r4, #64]	; 0x40
   8728a:	9224      	str	r2, [sp, #144]	; 0x90
   8728c:	930b      	str	r3, [sp, #44]	; 0x2c
   8728e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   87290:	2b00      	cmp	r3, #0
   87292:	f2c0 80d3 	blt.w	8743c <_dtoa_r+0x3a4>
   87296:	9a02      	ldr	r2, [sp, #8]
   87298:	2a0e      	cmp	r2, #14
   8729a:	f300 80cf 	bgt.w	8743c <_dtoa_r+0x3a4>
   8729e:	4b2d      	ldr	r3, [pc, #180]	; (87354 <_dtoa_r+0x2bc>)
   872a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   872a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   872a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   872ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
   872ae:	2b00      	cmp	r3, #0
   872b0:	f2c0 83b4 	blt.w	87a1c <_dtoa_r+0x984>
   872b4:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   872b8:	4650      	mov	r0, sl
   872ba:	462a      	mov	r2, r5
   872bc:	4633      	mov	r3, r6
   872be:	4659      	mov	r1, fp
   872c0:	f7fd ff18 	bl	850f4 <__aeabi_ddiv>
   872c4:	f002 f9ce 	bl	89664 <__aeabi_d2iz>
   872c8:	4680      	mov	r8, r0
   872ca:	f7fd fd83 	bl	84dd4 <__aeabi_i2d>
   872ce:	462a      	mov	r2, r5
   872d0:	4633      	mov	r3, r6
   872d2:	f7fd fde5 	bl	84ea0 <__aeabi_dmul>
   872d6:	4602      	mov	r2, r0
   872d8:	460b      	mov	r3, r1
   872da:	4650      	mov	r0, sl
   872dc:	4659      	mov	r1, fp
   872de:	f7fd fc2b 	bl	84b38 <__aeabi_dsub>
   872e2:	9e07      	ldr	r6, [sp, #28]
   872e4:	9f04      	ldr	r7, [sp, #16]
   872e6:	f108 0530 	add.w	r5, r8, #48	; 0x30
   872ea:	2e01      	cmp	r6, #1
   872ec:	703d      	strb	r5, [r7, #0]
   872ee:	4602      	mov	r2, r0
   872f0:	460b      	mov	r3, r1
   872f2:	f107 0501 	add.w	r5, r7, #1
   872f6:	d064      	beq.n	873c2 <_dtoa_r+0x32a>
   872f8:	2200      	movs	r2, #0
   872fa:	4b18      	ldr	r3, [pc, #96]	; (8735c <_dtoa_r+0x2c4>)
   872fc:	f7fd fdd0 	bl	84ea0 <__aeabi_dmul>
   87300:	2200      	movs	r2, #0
   87302:	2300      	movs	r3, #0
   87304:	4606      	mov	r6, r0
   87306:	460f      	mov	r7, r1
   87308:	f002 f964 	bl	895d4 <__aeabi_dcmpeq>
   8730c:	2800      	cmp	r0, #0
   8730e:	f040 8082 	bne.w	87416 <_dtoa_r+0x37e>
   87312:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   87316:	f04f 0a00 	mov.w	sl, #0
   8731a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   8731e:	f04f 0b00 	mov.w	fp, #0
   87322:	940b      	str	r4, [sp, #44]	; 0x2c
   87324:	e029      	b.n	8737a <_dtoa_r+0x2e2>
   87326:	bf00      	nop
   87328:	636f4361 	.word	0x636f4361
   8732c:	3fd287a7 	.word	0x3fd287a7
   87330:	8b60c8b3 	.word	0x8b60c8b3
   87334:	3fc68a28 	.word	0x3fc68a28
   87338:	509f79fb 	.word	0x509f79fb
   8733c:	3fd34413 	.word	0x3fd34413
   87340:	7ff00000 	.word	0x7ff00000
   87344:	00089ba5 	.word	0x00089ba5
   87348:	00089bc8 	.word	0x00089bc8
   8734c:	00089bd4 	.word	0x00089bd4
   87350:	3ff80000 	.word	0x3ff80000
   87354:	00089c00 	.word	0x00089c00
   87358:	00089ba4 	.word	0x00089ba4
   8735c:	40240000 	.word	0x40240000
   87360:	2200      	movs	r2, #0
   87362:	4b81      	ldr	r3, [pc, #516]	; (87568 <_dtoa_r+0x4d0>)
   87364:	f7fd fd9c 	bl	84ea0 <__aeabi_dmul>
   87368:	4652      	mov	r2, sl
   8736a:	465b      	mov	r3, fp
   8736c:	4606      	mov	r6, r0
   8736e:	460f      	mov	r7, r1
   87370:	f002 f930 	bl	895d4 <__aeabi_dcmpeq>
   87374:	2800      	cmp	r0, #0
   87376:	f040 83ba 	bne.w	87aee <_dtoa_r+0xa56>
   8737a:	4642      	mov	r2, r8
   8737c:	464b      	mov	r3, r9
   8737e:	4630      	mov	r0, r6
   87380:	4639      	mov	r1, r7
   87382:	f7fd feb7 	bl	850f4 <__aeabi_ddiv>
   87386:	f002 f96d 	bl	89664 <__aeabi_d2iz>
   8738a:	4604      	mov	r4, r0
   8738c:	f7fd fd22 	bl	84dd4 <__aeabi_i2d>
   87390:	4642      	mov	r2, r8
   87392:	464b      	mov	r3, r9
   87394:	f7fd fd84 	bl	84ea0 <__aeabi_dmul>
   87398:	4602      	mov	r2, r0
   8739a:	460b      	mov	r3, r1
   8739c:	4630      	mov	r0, r6
   8739e:	4639      	mov	r1, r7
   873a0:	f7fd fbca 	bl	84b38 <__aeabi_dsub>
   873a4:	f104 0630 	add.w	r6, r4, #48	; 0x30
   873a8:	f805 6b01 	strb.w	r6, [r5], #1
   873ac:	9e04      	ldr	r6, [sp, #16]
   873ae:	9f07      	ldr	r7, [sp, #28]
   873b0:	1bae      	subs	r6, r5, r6
   873b2:	42be      	cmp	r6, r7
   873b4:	4602      	mov	r2, r0
   873b6:	460b      	mov	r3, r1
   873b8:	d1d2      	bne.n	87360 <_dtoa_r+0x2c8>
   873ba:	46a0      	mov	r8, r4
   873bc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   873c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   873c2:	4610      	mov	r0, r2
   873c4:	4619      	mov	r1, r3
   873c6:	f7fd fbb9 	bl	84b3c <__adddf3>
   873ca:	4606      	mov	r6, r0
   873cc:	460f      	mov	r7, r1
   873ce:	4602      	mov	r2, r0
   873d0:	460b      	mov	r3, r1
   873d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   873d6:	f002 f907 	bl	895e8 <__aeabi_dcmplt>
   873da:	b948      	cbnz	r0, 873f0 <_dtoa_r+0x358>
   873dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   873e0:	4632      	mov	r2, r6
   873e2:	463b      	mov	r3, r7
   873e4:	f002 f8f6 	bl	895d4 <__aeabi_dcmpeq>
   873e8:	b1a8      	cbz	r0, 87416 <_dtoa_r+0x37e>
   873ea:	f018 0f01 	tst.w	r8, #1
   873ee:	d012      	beq.n	87416 <_dtoa_r+0x37e>
   873f0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   873f4:	1e6b      	subs	r3, r5, #1
   873f6:	9a04      	ldr	r2, [sp, #16]
   873f8:	e004      	b.n	87404 <_dtoa_r+0x36c>
   873fa:	429a      	cmp	r2, r3
   873fc:	f000 8402 	beq.w	87c04 <_dtoa_r+0xb6c>
   87400:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   87404:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   87408:	f103 0501 	add.w	r5, r3, #1
   8740c:	d0f5      	beq.n	873fa <_dtoa_r+0x362>
   8740e:	f108 0801 	add.w	r8, r8, #1
   87412:	f883 8000 	strb.w	r8, [r3]
   87416:	4649      	mov	r1, r9
   87418:	4620      	mov	r0, r4
   8741a:	f001 f91b 	bl	88654 <_Bfree>
   8741e:	2200      	movs	r2, #0
   87420:	9b02      	ldr	r3, [sp, #8]
   87422:	702a      	strb	r2, [r5, #0]
   87424:	9a26      	ldr	r2, [sp, #152]	; 0x98
   87426:	3301      	adds	r3, #1
   87428:	6013      	str	r3, [r2, #0]
   8742a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8742c:	2b00      	cmp	r3, #0
   8742e:	f000 839f 	beq.w	87b70 <_dtoa_r+0xad8>
   87432:	9804      	ldr	r0, [sp, #16]
   87434:	601d      	str	r5, [r3, #0]
   87436:	b01b      	add	sp, #108	; 0x6c
   87438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8743c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8743e:	2a00      	cmp	r2, #0
   87440:	d03e      	beq.n	874c0 <_dtoa_r+0x428>
   87442:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87444:	2a01      	cmp	r2, #1
   87446:	f340 8311 	ble.w	87a6c <_dtoa_r+0x9d4>
   8744a:	9b07      	ldr	r3, [sp, #28]
   8744c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8744e:	1e5f      	subs	r7, r3, #1
   87450:	42ba      	cmp	r2, r7
   87452:	f2c0 8390 	blt.w	87b76 <_dtoa_r+0xade>
   87456:	1bd7      	subs	r7, r2, r7
   87458:	9b07      	ldr	r3, [sp, #28]
   8745a:	2b00      	cmp	r3, #0
   8745c:	f2c0 848c 	blt.w	87d78 <_dtoa_r+0xce0>
   87460:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87462:	9b07      	ldr	r3, [sp, #28]
   87464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87466:	2101      	movs	r1, #1
   87468:	441a      	add	r2, r3
   8746a:	920a      	str	r2, [sp, #40]	; 0x28
   8746c:	9a08      	ldr	r2, [sp, #32]
   8746e:	4620      	mov	r0, r4
   87470:	441a      	add	r2, r3
   87472:	9208      	str	r2, [sp, #32]
   87474:	f001 f98a 	bl	8878c <__i2b>
   87478:	4606      	mov	r6, r0
   8747a:	e023      	b.n	874c4 <_dtoa_r+0x42c>
   8747c:	2301      	movs	r3, #1
   8747e:	930e      	str	r3, [sp, #56]	; 0x38
   87480:	e6b5      	b.n	871ee <_dtoa_r+0x156>
   87482:	2300      	movs	r3, #0
   87484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87486:	930d      	str	r3, [sp, #52]	; 0x34
   87488:	9b02      	ldr	r3, [sp, #8]
   8748a:	1ad2      	subs	r2, r2, r3
   8748c:	425b      	negs	r3, r3
   8748e:	920a      	str	r2, [sp, #40]	; 0x28
   87490:	930c      	str	r3, [sp, #48]	; 0x30
   87492:	e6be      	b.n	87212 <_dtoa_r+0x17a>
   87494:	f1c7 0301 	rsb	r3, r7, #1
   87498:	930a      	str	r3, [sp, #40]	; 0x28
   8749a:	2300      	movs	r3, #0
   8749c:	9308      	str	r3, [sp, #32]
   8749e:	e6ad      	b.n	871fc <_dtoa_r+0x164>
   874a0:	9d02      	ldr	r5, [sp, #8]
   874a2:	4628      	mov	r0, r5
   874a4:	f7fd fc96 	bl	84dd4 <__aeabi_i2d>
   874a8:	4602      	mov	r2, r0
   874aa:	460b      	mov	r3, r1
   874ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   874b0:	f002 f890 	bl	895d4 <__aeabi_dcmpeq>
   874b4:	2800      	cmp	r0, #0
   874b6:	f47f ae86 	bne.w	871c6 <_dtoa_r+0x12e>
   874ba:	1e6b      	subs	r3, r5, #1
   874bc:	9302      	str	r3, [sp, #8]
   874be:	e682      	b.n	871c6 <_dtoa_r+0x12e>
   874c0:	ad0a      	add	r5, sp, #40	; 0x28
   874c2:	cde0      	ldmia	r5, {r5, r6, r7}
   874c4:	2d00      	cmp	r5, #0
   874c6:	dd0c      	ble.n	874e2 <_dtoa_r+0x44a>
   874c8:	9908      	ldr	r1, [sp, #32]
   874ca:	2900      	cmp	r1, #0
   874cc:	460b      	mov	r3, r1
   874ce:	dd08      	ble.n	874e2 <_dtoa_r+0x44a>
   874d0:	42a9      	cmp	r1, r5
   874d2:	bfa8      	it	ge
   874d4:	462b      	movge	r3, r5
   874d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   874d8:	1aed      	subs	r5, r5, r3
   874da:	1ad2      	subs	r2, r2, r3
   874dc:	1acb      	subs	r3, r1, r3
   874de:	920a      	str	r2, [sp, #40]	; 0x28
   874e0:	9308      	str	r3, [sp, #32]
   874e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   874e4:	b1d3      	cbz	r3, 8751c <_dtoa_r+0x484>
   874e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   874e8:	2b00      	cmp	r3, #0
   874ea:	f000 82b8 	beq.w	87a5e <_dtoa_r+0x9c6>
   874ee:	2f00      	cmp	r7, #0
   874f0:	dd10      	ble.n	87514 <_dtoa_r+0x47c>
   874f2:	4631      	mov	r1, r6
   874f4:	463a      	mov	r2, r7
   874f6:	4620      	mov	r0, r4
   874f8:	f001 f9e4 	bl	888c4 <__pow5mult>
   874fc:	464a      	mov	r2, r9
   874fe:	4601      	mov	r1, r0
   87500:	4606      	mov	r6, r0
   87502:	4620      	mov	r0, r4
   87504:	f001 f94c 	bl	887a0 <__multiply>
   87508:	4603      	mov	r3, r0
   8750a:	4649      	mov	r1, r9
   8750c:	4620      	mov	r0, r4
   8750e:	4699      	mov	r9, r3
   87510:	f001 f8a0 	bl	88654 <_Bfree>
   87514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87516:	1bda      	subs	r2, r3, r7
   87518:	f040 82a2 	bne.w	87a60 <_dtoa_r+0x9c8>
   8751c:	2101      	movs	r1, #1
   8751e:	4620      	mov	r0, r4
   87520:	f001 f934 	bl	8878c <__i2b>
   87524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87526:	4680      	mov	r8, r0
   87528:	2b00      	cmp	r3, #0
   8752a:	dd1f      	ble.n	8756c <_dtoa_r+0x4d4>
   8752c:	4601      	mov	r1, r0
   8752e:	461a      	mov	r2, r3
   87530:	4620      	mov	r0, r4
   87532:	f001 f9c7 	bl	888c4 <__pow5mult>
   87536:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87538:	4680      	mov	r8, r0
   8753a:	2b01      	cmp	r3, #1
   8753c:	f340 8255 	ble.w	879ea <_dtoa_r+0x952>
   87540:	2300      	movs	r3, #0
   87542:	930c      	str	r3, [sp, #48]	; 0x30
   87544:	f8d8 3010 	ldr.w	r3, [r8, #16]
   87548:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8754c:	6918      	ldr	r0, [r3, #16]
   8754e:	f001 f8cd 	bl	886ec <__hi0bits>
   87552:	f1c0 0020 	rsb	r0, r0, #32
   87556:	e013      	b.n	87580 <_dtoa_r+0x4e8>
   87558:	f1c3 0520 	rsb	r5, r3, #32
   8755c:	fa0a f005 	lsl.w	r0, sl, r5
   87560:	e67b      	b.n	8725a <_dtoa_r+0x1c2>
   87562:	900e      	str	r0, [sp, #56]	; 0x38
   87564:	e643      	b.n	871ee <_dtoa_r+0x156>
   87566:	bf00      	nop
   87568:	40240000 	.word	0x40240000
   8756c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8756e:	2b01      	cmp	r3, #1
   87570:	f340 8285 	ble.w	87a7e <_dtoa_r+0x9e6>
   87574:	2300      	movs	r3, #0
   87576:	930c      	str	r3, [sp, #48]	; 0x30
   87578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8757a:	2001      	movs	r0, #1
   8757c:	2b00      	cmp	r3, #0
   8757e:	d1e1      	bne.n	87544 <_dtoa_r+0x4ac>
   87580:	9a08      	ldr	r2, [sp, #32]
   87582:	4410      	add	r0, r2
   87584:	f010 001f 	ands.w	r0, r0, #31
   87588:	f000 80a1 	beq.w	876ce <_dtoa_r+0x636>
   8758c:	f1c0 0320 	rsb	r3, r0, #32
   87590:	2b04      	cmp	r3, #4
   87592:	f340 8486 	ble.w	87ea2 <_dtoa_r+0xe0a>
   87596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87598:	f1c0 001c 	rsb	r0, r0, #28
   8759c:	4403      	add	r3, r0
   8759e:	930a      	str	r3, [sp, #40]	; 0x28
   875a0:	4613      	mov	r3, r2
   875a2:	4403      	add	r3, r0
   875a4:	4405      	add	r5, r0
   875a6:	9308      	str	r3, [sp, #32]
   875a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   875aa:	2b00      	cmp	r3, #0
   875ac:	dd05      	ble.n	875ba <_dtoa_r+0x522>
   875ae:	4649      	mov	r1, r9
   875b0:	461a      	mov	r2, r3
   875b2:	4620      	mov	r0, r4
   875b4:	f001 f9d6 	bl	88964 <__lshift>
   875b8:	4681      	mov	r9, r0
   875ba:	9b08      	ldr	r3, [sp, #32]
   875bc:	2b00      	cmp	r3, #0
   875be:	dd05      	ble.n	875cc <_dtoa_r+0x534>
   875c0:	4641      	mov	r1, r8
   875c2:	461a      	mov	r2, r3
   875c4:	4620      	mov	r0, r4
   875c6:	f001 f9cd 	bl	88964 <__lshift>
   875ca:	4680      	mov	r8, r0
   875cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   875ce:	2b00      	cmp	r3, #0
   875d0:	f040 8086 	bne.w	876e0 <_dtoa_r+0x648>
   875d4:	9b07      	ldr	r3, [sp, #28]
   875d6:	2b00      	cmp	r3, #0
   875d8:	f340 8264 	ble.w	87aa4 <_dtoa_r+0xa0c>
   875dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   875de:	2b00      	cmp	r3, #0
   875e0:	f000 8098 	beq.w	87714 <_dtoa_r+0x67c>
   875e4:	2d00      	cmp	r5, #0
   875e6:	dd05      	ble.n	875f4 <_dtoa_r+0x55c>
   875e8:	4631      	mov	r1, r6
   875ea:	462a      	mov	r2, r5
   875ec:	4620      	mov	r0, r4
   875ee:	f001 f9b9 	bl	88964 <__lshift>
   875f2:	4606      	mov	r6, r0
   875f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   875f6:	2b00      	cmp	r3, #0
   875f8:	f040 8336 	bne.w	87c68 <_dtoa_r+0xbd0>
   875fc:	9608      	str	r6, [sp, #32]
   875fe:	9b07      	ldr	r3, [sp, #28]
   87600:	9a04      	ldr	r2, [sp, #16]
   87602:	3b01      	subs	r3, #1
   87604:	18d3      	adds	r3, r2, r3
   87606:	930b      	str	r3, [sp, #44]	; 0x2c
   87608:	4617      	mov	r7, r2
   8760a:	f00a 0301 	and.w	r3, sl, #1
   8760e:	46c2      	mov	sl, r8
   87610:	f8dd b020 	ldr.w	fp, [sp, #32]
   87614:	930c      	str	r3, [sp, #48]	; 0x30
   87616:	4651      	mov	r1, sl
   87618:	4648      	mov	r0, r9
   8761a:	f7ff fca7 	bl	86f6c <quorem>
   8761e:	4631      	mov	r1, r6
   87620:	4605      	mov	r5, r0
   87622:	4648      	mov	r0, r9
   87624:	f001 f9ee 	bl	88a04 <__mcmp>
   87628:	465a      	mov	r2, fp
   8762a:	9007      	str	r0, [sp, #28]
   8762c:	4651      	mov	r1, sl
   8762e:	4620      	mov	r0, r4
   87630:	f001 fa04 	bl	88a3c <__mdiff>
   87634:	68c2      	ldr	r2, [r0, #12]
   87636:	4680      	mov	r8, r0
   87638:	f105 0330 	add.w	r3, r5, #48	; 0x30
   8763c:	2a00      	cmp	r2, #0
   8763e:	f040 8229 	bne.w	87a94 <_dtoa_r+0x9fc>
   87642:	4601      	mov	r1, r0
   87644:	4648      	mov	r0, r9
   87646:	930a      	str	r3, [sp, #40]	; 0x28
   87648:	f001 f9dc 	bl	88a04 <__mcmp>
   8764c:	4641      	mov	r1, r8
   8764e:	9008      	str	r0, [sp, #32]
   87650:	4620      	mov	r0, r4
   87652:	f000 ffff 	bl	88654 <_Bfree>
   87656:	9a08      	ldr	r2, [sp, #32]
   87658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8765a:	b932      	cbnz	r2, 8766a <_dtoa_r+0x5d2>
   8765c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8765e:	b921      	cbnz	r1, 8766a <_dtoa_r+0x5d2>
   87660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87662:	2a00      	cmp	r2, #0
   87664:	f000 83ee 	beq.w	87e44 <_dtoa_r+0xdac>
   87668:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8766a:	9907      	ldr	r1, [sp, #28]
   8766c:	2900      	cmp	r1, #0
   8766e:	f2c0 829f 	blt.w	87bb0 <_dtoa_r+0xb18>
   87672:	d105      	bne.n	87680 <_dtoa_r+0x5e8>
   87674:	9924      	ldr	r1, [sp, #144]	; 0x90
   87676:	b919      	cbnz	r1, 87680 <_dtoa_r+0x5e8>
   87678:	990c      	ldr	r1, [sp, #48]	; 0x30
   8767a:	2900      	cmp	r1, #0
   8767c:	f000 8298 	beq.w	87bb0 <_dtoa_r+0xb18>
   87680:	2a00      	cmp	r2, #0
   87682:	f300 8305 	bgt.w	87c90 <_dtoa_r+0xbf8>
   87686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87688:	f107 0801 	add.w	r8, r7, #1
   8768c:	4297      	cmp	r7, r2
   8768e:	703b      	strb	r3, [r7, #0]
   87690:	4645      	mov	r5, r8
   87692:	f000 830b 	beq.w	87cac <_dtoa_r+0xc14>
   87696:	4649      	mov	r1, r9
   87698:	2300      	movs	r3, #0
   8769a:	220a      	movs	r2, #10
   8769c:	4620      	mov	r0, r4
   8769e:	f000 ffe3 	bl	88668 <__multadd>
   876a2:	455e      	cmp	r6, fp
   876a4:	4681      	mov	r9, r0
   876a6:	4631      	mov	r1, r6
   876a8:	f04f 0300 	mov.w	r3, #0
   876ac:	f04f 020a 	mov.w	r2, #10
   876b0:	4620      	mov	r0, r4
   876b2:	f000 81e9 	beq.w	87a88 <_dtoa_r+0x9f0>
   876b6:	f000 ffd7 	bl	88668 <__multadd>
   876ba:	4659      	mov	r1, fp
   876bc:	4606      	mov	r6, r0
   876be:	2300      	movs	r3, #0
   876c0:	220a      	movs	r2, #10
   876c2:	4620      	mov	r0, r4
   876c4:	f000 ffd0 	bl	88668 <__multadd>
   876c8:	4647      	mov	r7, r8
   876ca:	4683      	mov	fp, r0
   876cc:	e7a3      	b.n	87616 <_dtoa_r+0x57e>
   876ce:	201c      	movs	r0, #28
   876d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   876d2:	4405      	add	r5, r0
   876d4:	4403      	add	r3, r0
   876d6:	930a      	str	r3, [sp, #40]	; 0x28
   876d8:	9b08      	ldr	r3, [sp, #32]
   876da:	4403      	add	r3, r0
   876dc:	9308      	str	r3, [sp, #32]
   876de:	e763      	b.n	875a8 <_dtoa_r+0x510>
   876e0:	4641      	mov	r1, r8
   876e2:	4648      	mov	r0, r9
   876e4:	f001 f98e 	bl	88a04 <__mcmp>
   876e8:	2800      	cmp	r0, #0
   876ea:	f6bf af73 	bge.w	875d4 <_dtoa_r+0x53c>
   876ee:	9f02      	ldr	r7, [sp, #8]
   876f0:	4649      	mov	r1, r9
   876f2:	2300      	movs	r3, #0
   876f4:	220a      	movs	r2, #10
   876f6:	4620      	mov	r0, r4
   876f8:	3f01      	subs	r7, #1
   876fa:	9702      	str	r7, [sp, #8]
   876fc:	f000 ffb4 	bl	88668 <__multadd>
   87700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87702:	4681      	mov	r9, r0
   87704:	2b00      	cmp	r3, #0
   87706:	f040 83b5 	bne.w	87e74 <_dtoa_r+0xddc>
   8770a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8770c:	2b00      	cmp	r3, #0
   8770e:	f340 83be 	ble.w	87e8e <_dtoa_r+0xdf6>
   87712:	9307      	str	r3, [sp, #28]
   87714:	f8dd a010 	ldr.w	sl, [sp, #16]
   87718:	9f07      	ldr	r7, [sp, #28]
   8771a:	4655      	mov	r5, sl
   8771c:	e006      	b.n	8772c <_dtoa_r+0x694>
   8771e:	4649      	mov	r1, r9
   87720:	2300      	movs	r3, #0
   87722:	220a      	movs	r2, #10
   87724:	4620      	mov	r0, r4
   87726:	f000 ff9f 	bl	88668 <__multadd>
   8772a:	4681      	mov	r9, r0
   8772c:	4641      	mov	r1, r8
   8772e:	4648      	mov	r0, r9
   87730:	f7ff fc1c 	bl	86f6c <quorem>
   87734:	3030      	adds	r0, #48	; 0x30
   87736:	f805 0b01 	strb.w	r0, [r5], #1
   8773a:	eba5 030a 	sub.w	r3, r5, sl
   8773e:	42bb      	cmp	r3, r7
   87740:	dbed      	blt.n	8771e <_dtoa_r+0x686>
   87742:	9b04      	ldr	r3, [sp, #16]
   87744:	9a07      	ldr	r2, [sp, #28]
   87746:	4682      	mov	sl, r0
   87748:	2a01      	cmp	r2, #1
   8774a:	bfac      	ite	ge
   8774c:	189b      	addge	r3, r3, r2
   8774e:	3301      	addlt	r3, #1
   87750:	f04f 0b00 	mov.w	fp, #0
   87754:	461d      	mov	r5, r3
   87756:	4649      	mov	r1, r9
   87758:	2201      	movs	r2, #1
   8775a:	4620      	mov	r0, r4
   8775c:	f001 f902 	bl	88964 <__lshift>
   87760:	4641      	mov	r1, r8
   87762:	4681      	mov	r9, r0
   87764:	f001 f94e 	bl	88a04 <__mcmp>
   87768:	2800      	cmp	r0, #0
   8776a:	f340 823f 	ble.w	87bec <_dtoa_r+0xb54>
   8776e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   87772:	1e6b      	subs	r3, r5, #1
   87774:	9904      	ldr	r1, [sp, #16]
   87776:	e004      	b.n	87782 <_dtoa_r+0x6ea>
   87778:	428b      	cmp	r3, r1
   8777a:	f000 81ae 	beq.w	87ada <_dtoa_r+0xa42>
   8777e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   87782:	2a39      	cmp	r2, #57	; 0x39
   87784:	f103 0501 	add.w	r5, r3, #1
   87788:	d0f6      	beq.n	87778 <_dtoa_r+0x6e0>
   8778a:	3201      	adds	r2, #1
   8778c:	701a      	strb	r2, [r3, #0]
   8778e:	4641      	mov	r1, r8
   87790:	4620      	mov	r0, r4
   87792:	f000 ff5f 	bl	88654 <_Bfree>
   87796:	2e00      	cmp	r6, #0
   87798:	f43f ae3d 	beq.w	87416 <_dtoa_r+0x37e>
   8779c:	f1bb 0f00 	cmp.w	fp, #0
   877a0:	d005      	beq.n	877ae <_dtoa_r+0x716>
   877a2:	45b3      	cmp	fp, r6
   877a4:	d003      	beq.n	877ae <_dtoa_r+0x716>
   877a6:	4659      	mov	r1, fp
   877a8:	4620      	mov	r0, r4
   877aa:	f000 ff53 	bl	88654 <_Bfree>
   877ae:	4631      	mov	r1, r6
   877b0:	4620      	mov	r0, r4
   877b2:	f000 ff4f 	bl	88654 <_Bfree>
   877b6:	e62e      	b.n	87416 <_dtoa_r+0x37e>
   877b8:	2300      	movs	r3, #0
   877ba:	930b      	str	r3, [sp, #44]	; 0x2c
   877bc:	9b02      	ldr	r3, [sp, #8]
   877be:	9a25      	ldr	r2, [sp, #148]	; 0x94
   877c0:	4413      	add	r3, r2
   877c2:	930f      	str	r3, [sp, #60]	; 0x3c
   877c4:	3301      	adds	r3, #1
   877c6:	2b01      	cmp	r3, #1
   877c8:	461f      	mov	r7, r3
   877ca:	461e      	mov	r6, r3
   877cc:	bfb8      	it	lt
   877ce:	2701      	movlt	r7, #1
   877d0:	9307      	str	r3, [sp, #28]
   877d2:	2100      	movs	r1, #0
   877d4:	2f17      	cmp	r7, #23
   877d6:	6461      	str	r1, [r4, #68]	; 0x44
   877d8:	d90a      	bls.n	877f0 <_dtoa_r+0x758>
   877da:	2201      	movs	r2, #1
   877dc:	2304      	movs	r3, #4
   877de:	005b      	lsls	r3, r3, #1
   877e0:	f103 0014 	add.w	r0, r3, #20
   877e4:	4287      	cmp	r7, r0
   877e6:	4611      	mov	r1, r2
   877e8:	f102 0201 	add.w	r2, r2, #1
   877ec:	d2f7      	bcs.n	877de <_dtoa_r+0x746>
   877ee:	6461      	str	r1, [r4, #68]	; 0x44
   877f0:	4620      	mov	r0, r4
   877f2:	f000 ff09 	bl	88608 <_Balloc>
   877f6:	2e0e      	cmp	r6, #14
   877f8:	9004      	str	r0, [sp, #16]
   877fa:	6420      	str	r0, [r4, #64]	; 0x40
   877fc:	f63f ad47 	bhi.w	8728e <_dtoa_r+0x1f6>
   87800:	2d00      	cmp	r5, #0
   87802:	f43f ad44 	beq.w	8728e <_dtoa_r+0x1f6>
   87806:	9902      	ldr	r1, [sp, #8]
   87808:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   8780c:	2900      	cmp	r1, #0
   8780e:	f340 8203 	ble.w	87c18 <_dtoa_r+0xb80>
   87812:	4bb9      	ldr	r3, [pc, #740]	; (87af8 <_dtoa_r+0xa60>)
   87814:	f001 020f 	and.w	r2, r1, #15
   87818:	110d      	asrs	r5, r1, #4
   8781a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8781e:	06e9      	lsls	r1, r5, #27
   87820:	e9d3 6700 	ldrd	r6, r7, [r3]
   87824:	f140 81af 	bpl.w	87b86 <_dtoa_r+0xaee>
   87828:	4bb4      	ldr	r3, [pc, #720]	; (87afc <_dtoa_r+0xa64>)
   8782a:	4650      	mov	r0, sl
   8782c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   87830:	4659      	mov	r1, fp
   87832:	f7fd fc5f 	bl	850f4 <__aeabi_ddiv>
   87836:	f04f 0a03 	mov.w	sl, #3
   8783a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   8783e:	f005 050f 	and.w	r5, r5, #15
   87842:	b18d      	cbz	r5, 87868 <_dtoa_r+0x7d0>
   87844:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 87afc <_dtoa_r+0xa64>
   87848:	07ea      	lsls	r2, r5, #31
   8784a:	d509      	bpl.n	87860 <_dtoa_r+0x7c8>
   8784c:	e9d8 2300 	ldrd	r2, r3, [r8]
   87850:	4630      	mov	r0, r6
   87852:	4639      	mov	r1, r7
   87854:	f7fd fb24 	bl	84ea0 <__aeabi_dmul>
   87858:	4606      	mov	r6, r0
   8785a:	460f      	mov	r7, r1
   8785c:	f10a 0a01 	add.w	sl, sl, #1
   87860:	106d      	asrs	r5, r5, #1
   87862:	f108 0808 	add.w	r8, r8, #8
   87866:	d1ef      	bne.n	87848 <_dtoa_r+0x7b0>
   87868:	463b      	mov	r3, r7
   8786a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8786e:	4632      	mov	r2, r6
   87870:	f7fd fc40 	bl	850f4 <__aeabi_ddiv>
   87874:	4607      	mov	r7, r0
   87876:	4688      	mov	r8, r1
   87878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8787a:	b143      	cbz	r3, 8788e <_dtoa_r+0x7f6>
   8787c:	2200      	movs	r2, #0
   8787e:	4ba0      	ldr	r3, [pc, #640]	; (87b00 <_dtoa_r+0xa68>)
   87880:	4638      	mov	r0, r7
   87882:	4641      	mov	r1, r8
   87884:	f001 feb0 	bl	895e8 <__aeabi_dcmplt>
   87888:	2800      	cmp	r0, #0
   8788a:	f040 8287 	bne.w	87d9c <_dtoa_r+0xd04>
   8788e:	4650      	mov	r0, sl
   87890:	f7fd faa0 	bl	84dd4 <__aeabi_i2d>
   87894:	463a      	mov	r2, r7
   87896:	4643      	mov	r3, r8
   87898:	f7fd fb02 	bl	84ea0 <__aeabi_dmul>
   8789c:	4b99      	ldr	r3, [pc, #612]	; (87b04 <_dtoa_r+0xa6c>)
   8789e:	2200      	movs	r2, #0
   878a0:	f7fd f94c 	bl	84b3c <__adddf3>
   878a4:	9b07      	ldr	r3, [sp, #28]
   878a6:	4605      	mov	r5, r0
   878a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   878ac:	2b00      	cmp	r3, #0
   878ae:	f000 813f 	beq.w	87b30 <_dtoa_r+0xa98>
   878b2:	9b02      	ldr	r3, [sp, #8]
   878b4:	9315      	str	r3, [sp, #84]	; 0x54
   878b6:	9b07      	ldr	r3, [sp, #28]
   878b8:	9312      	str	r3, [sp, #72]	; 0x48
   878ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   878bc:	2b00      	cmp	r3, #0
   878be:	f000 81fb 	beq.w	87cb8 <_dtoa_r+0xc20>
   878c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   878c4:	4b8c      	ldr	r3, [pc, #560]	; (87af8 <_dtoa_r+0xa60>)
   878c6:	2000      	movs	r0, #0
   878c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   878cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   878d0:	498d      	ldr	r1, [pc, #564]	; (87b08 <_dtoa_r+0xa70>)
   878d2:	f7fd fc0f 	bl	850f4 <__aeabi_ddiv>
   878d6:	462a      	mov	r2, r5
   878d8:	4633      	mov	r3, r6
   878da:	f7fd f92d 	bl	84b38 <__aeabi_dsub>
   878de:	4682      	mov	sl, r0
   878e0:	468b      	mov	fp, r1
   878e2:	4638      	mov	r0, r7
   878e4:	4641      	mov	r1, r8
   878e6:	f001 febd 	bl	89664 <__aeabi_d2iz>
   878ea:	4605      	mov	r5, r0
   878ec:	f7fd fa72 	bl	84dd4 <__aeabi_i2d>
   878f0:	4602      	mov	r2, r0
   878f2:	460b      	mov	r3, r1
   878f4:	4638      	mov	r0, r7
   878f6:	4641      	mov	r1, r8
   878f8:	f7fd f91e 	bl	84b38 <__aeabi_dsub>
   878fc:	3530      	adds	r5, #48	; 0x30
   878fe:	fa5f f885 	uxtb.w	r8, r5
   87902:	9d04      	ldr	r5, [sp, #16]
   87904:	4606      	mov	r6, r0
   87906:	460f      	mov	r7, r1
   87908:	f885 8000 	strb.w	r8, [r5]
   8790c:	4602      	mov	r2, r0
   8790e:	460b      	mov	r3, r1
   87910:	4650      	mov	r0, sl
   87912:	4659      	mov	r1, fp
   87914:	3501      	adds	r5, #1
   87916:	f001 fe85 	bl	89624 <__aeabi_dcmpgt>
   8791a:	2800      	cmp	r0, #0
   8791c:	d154      	bne.n	879c8 <_dtoa_r+0x930>
   8791e:	4632      	mov	r2, r6
   87920:	463b      	mov	r3, r7
   87922:	2000      	movs	r0, #0
   87924:	4976      	ldr	r1, [pc, #472]	; (87b00 <_dtoa_r+0xa68>)
   87926:	f7fd f907 	bl	84b38 <__aeabi_dsub>
   8792a:	4602      	mov	r2, r0
   8792c:	460b      	mov	r3, r1
   8792e:	4650      	mov	r0, sl
   87930:	4659      	mov	r1, fp
   87932:	f001 fe77 	bl	89624 <__aeabi_dcmpgt>
   87936:	2800      	cmp	r0, #0
   87938:	f040 8270 	bne.w	87e1c <_dtoa_r+0xd84>
   8793c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8793e:	2a01      	cmp	r2, #1
   87940:	f000 8112 	beq.w	87b68 <_dtoa_r+0xad0>
   87944:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87946:	9a04      	ldr	r2, [sp, #16]
   87948:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8794c:	4413      	add	r3, r2
   8794e:	4699      	mov	r9, r3
   87950:	e00f      	b.n	87972 <_dtoa_r+0x8da>
   87952:	4632      	mov	r2, r6
   87954:	463b      	mov	r3, r7
   87956:	2000      	movs	r0, #0
   87958:	4969      	ldr	r1, [pc, #420]	; (87b00 <_dtoa_r+0xa68>)
   8795a:	f7fd f8ed 	bl	84b38 <__aeabi_dsub>
   8795e:	4652      	mov	r2, sl
   87960:	465b      	mov	r3, fp
   87962:	f001 fe41 	bl	895e8 <__aeabi_dcmplt>
   87966:	2800      	cmp	r0, #0
   87968:	f040 8256 	bne.w	87e18 <_dtoa_r+0xd80>
   8796c:	454d      	cmp	r5, r9
   8796e:	f000 80f9 	beq.w	87b64 <_dtoa_r+0xacc>
   87972:	4650      	mov	r0, sl
   87974:	4659      	mov	r1, fp
   87976:	2200      	movs	r2, #0
   87978:	4b64      	ldr	r3, [pc, #400]	; (87b0c <_dtoa_r+0xa74>)
   8797a:	f7fd fa91 	bl	84ea0 <__aeabi_dmul>
   8797e:	2200      	movs	r2, #0
   87980:	4b62      	ldr	r3, [pc, #392]	; (87b0c <_dtoa_r+0xa74>)
   87982:	4682      	mov	sl, r0
   87984:	468b      	mov	fp, r1
   87986:	4630      	mov	r0, r6
   87988:	4639      	mov	r1, r7
   8798a:	f7fd fa89 	bl	84ea0 <__aeabi_dmul>
   8798e:	460f      	mov	r7, r1
   87990:	4606      	mov	r6, r0
   87992:	f001 fe67 	bl	89664 <__aeabi_d2iz>
   87996:	4680      	mov	r8, r0
   87998:	f7fd fa1c 	bl	84dd4 <__aeabi_i2d>
   8799c:	4602      	mov	r2, r0
   8799e:	460b      	mov	r3, r1
   879a0:	4630      	mov	r0, r6
   879a2:	4639      	mov	r1, r7
   879a4:	f7fd f8c8 	bl	84b38 <__aeabi_dsub>
   879a8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   879ac:	fa5f f888 	uxtb.w	r8, r8
   879b0:	f805 8b01 	strb.w	r8, [r5], #1
   879b4:	4652      	mov	r2, sl
   879b6:	465b      	mov	r3, fp
   879b8:	4606      	mov	r6, r0
   879ba:	460f      	mov	r7, r1
   879bc:	f001 fe14 	bl	895e8 <__aeabi_dcmplt>
   879c0:	2800      	cmp	r0, #0
   879c2:	d0c6      	beq.n	87952 <_dtoa_r+0x8ba>
   879c4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   879c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   879ca:	9302      	str	r3, [sp, #8]
   879cc:	e523      	b.n	87416 <_dtoa_r+0x37e>
   879ce:	2300      	movs	r3, #0
   879d0:	930b      	str	r3, [sp, #44]	; 0x2c
   879d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   879d4:	2b00      	cmp	r3, #0
   879d6:	f340 80dd 	ble.w	87b94 <_dtoa_r+0xafc>
   879da:	461f      	mov	r7, r3
   879dc:	461e      	mov	r6, r3
   879de:	930f      	str	r3, [sp, #60]	; 0x3c
   879e0:	9307      	str	r3, [sp, #28]
   879e2:	e6f6      	b.n	877d2 <_dtoa_r+0x73a>
   879e4:	2301      	movs	r3, #1
   879e6:	930b      	str	r3, [sp, #44]	; 0x2c
   879e8:	e7f3      	b.n	879d2 <_dtoa_r+0x93a>
   879ea:	f1ba 0f00 	cmp.w	sl, #0
   879ee:	f47f ada7 	bne.w	87540 <_dtoa_r+0x4a8>
   879f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   879f6:	2b00      	cmp	r3, #0
   879f8:	f47f adbc 	bne.w	87574 <_dtoa_r+0x4dc>
   879fc:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   87a00:	0d3f      	lsrs	r7, r7, #20
   87a02:	053f      	lsls	r7, r7, #20
   87a04:	2f00      	cmp	r7, #0
   87a06:	f000 820d 	beq.w	87e24 <_dtoa_r+0xd8c>
   87a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87a0c:	3301      	adds	r3, #1
   87a0e:	930a      	str	r3, [sp, #40]	; 0x28
   87a10:	9b08      	ldr	r3, [sp, #32]
   87a12:	3301      	adds	r3, #1
   87a14:	9308      	str	r3, [sp, #32]
   87a16:	2301      	movs	r3, #1
   87a18:	930c      	str	r3, [sp, #48]	; 0x30
   87a1a:	e5ad      	b.n	87578 <_dtoa_r+0x4e0>
   87a1c:	9b07      	ldr	r3, [sp, #28]
   87a1e:	2b00      	cmp	r3, #0
   87a20:	f73f ac48 	bgt.w	872b4 <_dtoa_r+0x21c>
   87a24:	f040 8222 	bne.w	87e6c <_dtoa_r+0xdd4>
   87a28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87a2c:	2200      	movs	r2, #0
   87a2e:	4b38      	ldr	r3, [pc, #224]	; (87b10 <_dtoa_r+0xa78>)
   87a30:	f7fd fa36 	bl	84ea0 <__aeabi_dmul>
   87a34:	4652      	mov	r2, sl
   87a36:	465b      	mov	r3, fp
   87a38:	f001 fdea 	bl	89610 <__aeabi_dcmpge>
   87a3c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   87a40:	4646      	mov	r6, r8
   87a42:	2800      	cmp	r0, #0
   87a44:	d041      	beq.n	87aca <_dtoa_r+0xa32>
   87a46:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87a48:	9d04      	ldr	r5, [sp, #16]
   87a4a:	43db      	mvns	r3, r3
   87a4c:	9302      	str	r3, [sp, #8]
   87a4e:	4641      	mov	r1, r8
   87a50:	4620      	mov	r0, r4
   87a52:	f000 fdff 	bl	88654 <_Bfree>
   87a56:	2e00      	cmp	r6, #0
   87a58:	f43f acdd 	beq.w	87416 <_dtoa_r+0x37e>
   87a5c:	e6a7      	b.n	877ae <_dtoa_r+0x716>
   87a5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87a60:	4649      	mov	r1, r9
   87a62:	4620      	mov	r0, r4
   87a64:	f000 ff2e 	bl	888c4 <__pow5mult>
   87a68:	4681      	mov	r9, r0
   87a6a:	e557      	b.n	8751c <_dtoa_r+0x484>
   87a6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   87a6e:	2a00      	cmp	r2, #0
   87a70:	f000 8188 	beq.w	87d84 <_dtoa_r+0xcec>
   87a74:	f203 4333 	addw	r3, r3, #1075	; 0x433
   87a78:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87a7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87a7c:	e4f2      	b.n	87464 <_dtoa_r+0x3cc>
   87a7e:	f1ba 0f00 	cmp.w	sl, #0
   87a82:	f47f ad77 	bne.w	87574 <_dtoa_r+0x4dc>
   87a86:	e7b4      	b.n	879f2 <_dtoa_r+0x95a>
   87a88:	f000 fdee 	bl	88668 <__multadd>
   87a8c:	4647      	mov	r7, r8
   87a8e:	4606      	mov	r6, r0
   87a90:	4683      	mov	fp, r0
   87a92:	e5c0      	b.n	87616 <_dtoa_r+0x57e>
   87a94:	4601      	mov	r1, r0
   87a96:	4620      	mov	r0, r4
   87a98:	9308      	str	r3, [sp, #32]
   87a9a:	f000 fddb 	bl	88654 <_Bfree>
   87a9e:	2201      	movs	r2, #1
   87aa0:	9b08      	ldr	r3, [sp, #32]
   87aa2:	e5e2      	b.n	8766a <_dtoa_r+0x5d2>
   87aa4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87aa6:	2b02      	cmp	r3, #2
   87aa8:	f77f ad98 	ble.w	875dc <_dtoa_r+0x544>
   87aac:	9b07      	ldr	r3, [sp, #28]
   87aae:	2b00      	cmp	r3, #0
   87ab0:	d1c9      	bne.n	87a46 <_dtoa_r+0x9ae>
   87ab2:	4641      	mov	r1, r8
   87ab4:	2205      	movs	r2, #5
   87ab6:	4620      	mov	r0, r4
   87ab8:	f000 fdd6 	bl	88668 <__multadd>
   87abc:	4601      	mov	r1, r0
   87abe:	4680      	mov	r8, r0
   87ac0:	4648      	mov	r0, r9
   87ac2:	f000 ff9f 	bl	88a04 <__mcmp>
   87ac6:	2800      	cmp	r0, #0
   87ac8:	ddbd      	ble.n	87a46 <_dtoa_r+0x9ae>
   87aca:	2331      	movs	r3, #49	; 0x31
   87acc:	9a02      	ldr	r2, [sp, #8]
   87ace:	9904      	ldr	r1, [sp, #16]
   87ad0:	3201      	adds	r2, #1
   87ad2:	9202      	str	r2, [sp, #8]
   87ad4:	700b      	strb	r3, [r1, #0]
   87ad6:	1c4d      	adds	r5, r1, #1
   87ad8:	e7b9      	b.n	87a4e <_dtoa_r+0x9b6>
   87ada:	2331      	movs	r3, #49	; 0x31
   87adc:	9a02      	ldr	r2, [sp, #8]
   87ade:	3201      	adds	r2, #1
   87ae0:	9202      	str	r2, [sp, #8]
   87ae2:	9a04      	ldr	r2, [sp, #16]
   87ae4:	7013      	strb	r3, [r2, #0]
   87ae6:	e652      	b.n	8778e <_dtoa_r+0x6f6>
   87ae8:	2301      	movs	r3, #1
   87aea:	930b      	str	r3, [sp, #44]	; 0x2c
   87aec:	e666      	b.n	877bc <_dtoa_r+0x724>
   87aee:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   87af2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   87af4:	e48f      	b.n	87416 <_dtoa_r+0x37e>
   87af6:	bf00      	nop
   87af8:	00089c00 	.word	0x00089c00
   87afc:	00089bd8 	.word	0x00089bd8
   87b00:	3ff00000 	.word	0x3ff00000
   87b04:	401c0000 	.word	0x401c0000
   87b08:	3fe00000 	.word	0x3fe00000
   87b0c:	40240000 	.word	0x40240000
   87b10:	40140000 	.word	0x40140000
   87b14:	4650      	mov	r0, sl
   87b16:	f7fd f95d 	bl	84dd4 <__aeabi_i2d>
   87b1a:	463a      	mov	r2, r7
   87b1c:	4643      	mov	r3, r8
   87b1e:	f7fd f9bf 	bl	84ea0 <__aeabi_dmul>
   87b22:	2200      	movs	r2, #0
   87b24:	4bc1      	ldr	r3, [pc, #772]	; (87e2c <_dtoa_r+0xd94>)
   87b26:	f7fd f809 	bl	84b3c <__adddf3>
   87b2a:	4605      	mov	r5, r0
   87b2c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87b30:	4641      	mov	r1, r8
   87b32:	2200      	movs	r2, #0
   87b34:	4bbe      	ldr	r3, [pc, #760]	; (87e30 <_dtoa_r+0xd98>)
   87b36:	4638      	mov	r0, r7
   87b38:	f7fc fffe 	bl	84b38 <__aeabi_dsub>
   87b3c:	462a      	mov	r2, r5
   87b3e:	4633      	mov	r3, r6
   87b40:	4682      	mov	sl, r0
   87b42:	468b      	mov	fp, r1
   87b44:	f001 fd6e 	bl	89624 <__aeabi_dcmpgt>
   87b48:	4680      	mov	r8, r0
   87b4a:	2800      	cmp	r0, #0
   87b4c:	f040 8110 	bne.w	87d70 <_dtoa_r+0xcd8>
   87b50:	462a      	mov	r2, r5
   87b52:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   87b56:	4650      	mov	r0, sl
   87b58:	4659      	mov	r1, fp
   87b5a:	f001 fd45 	bl	895e8 <__aeabi_dcmplt>
   87b5e:	b118      	cbz	r0, 87b68 <_dtoa_r+0xad0>
   87b60:	4646      	mov	r6, r8
   87b62:	e770      	b.n	87a46 <_dtoa_r+0x9ae>
   87b64:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87b68:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   87b6c:	f7ff bb8f 	b.w	8728e <_dtoa_r+0x1f6>
   87b70:	9804      	ldr	r0, [sp, #16]
   87b72:	f7ff bac0 	b.w	870f6 <_dtoa_r+0x5e>
   87b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87b78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87b7a:	1afb      	subs	r3, r7, r3
   87b7c:	441a      	add	r2, r3
   87b7e:	970c      	str	r7, [sp, #48]	; 0x30
   87b80:	920d      	str	r2, [sp, #52]	; 0x34
   87b82:	2700      	movs	r7, #0
   87b84:	e468      	b.n	87458 <_dtoa_r+0x3c0>
   87b86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   87b8a:	f04f 0a02 	mov.w	sl, #2
   87b8e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   87b92:	e656      	b.n	87842 <_dtoa_r+0x7aa>
   87b94:	2100      	movs	r1, #0
   87b96:	2301      	movs	r3, #1
   87b98:	4620      	mov	r0, r4
   87b9a:	6461      	str	r1, [r4, #68]	; 0x44
   87b9c:	9325      	str	r3, [sp, #148]	; 0x94
   87b9e:	f000 fd33 	bl	88608 <_Balloc>
   87ba2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87ba4:	9004      	str	r0, [sp, #16]
   87ba6:	9307      	str	r3, [sp, #28]
   87ba8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87baa:	6420      	str	r0, [r4, #64]	; 0x40
   87bac:	930f      	str	r3, [sp, #60]	; 0x3c
   87bae:	e627      	b.n	87800 <_dtoa_r+0x768>
   87bb0:	2a00      	cmp	r2, #0
   87bb2:	46d0      	mov	r8, sl
   87bb4:	f8cd b020 	str.w	fp, [sp, #32]
   87bb8:	469a      	mov	sl, r3
   87bba:	dd11      	ble.n	87be0 <_dtoa_r+0xb48>
   87bbc:	4649      	mov	r1, r9
   87bbe:	2201      	movs	r2, #1
   87bc0:	4620      	mov	r0, r4
   87bc2:	f000 fecf 	bl	88964 <__lshift>
   87bc6:	4641      	mov	r1, r8
   87bc8:	4681      	mov	r9, r0
   87bca:	f000 ff1b 	bl	88a04 <__mcmp>
   87bce:	2800      	cmp	r0, #0
   87bd0:	f340 8145 	ble.w	87e5e <_dtoa_r+0xdc6>
   87bd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   87bd8:	f000 8105 	beq.w	87de6 <_dtoa_r+0xd4e>
   87bdc:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   87be0:	46b3      	mov	fp, r6
   87be2:	f887 a000 	strb.w	sl, [r7]
   87be6:	1c7d      	adds	r5, r7, #1
   87be8:	9e08      	ldr	r6, [sp, #32]
   87bea:	e5d0      	b.n	8778e <_dtoa_r+0x6f6>
   87bec:	d104      	bne.n	87bf8 <_dtoa_r+0xb60>
   87bee:	f01a 0f01 	tst.w	sl, #1
   87bf2:	d001      	beq.n	87bf8 <_dtoa_r+0xb60>
   87bf4:	e5bb      	b.n	8776e <_dtoa_r+0x6d6>
   87bf6:	4615      	mov	r5, r2
   87bf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87bfc:	1e6a      	subs	r2, r5, #1
   87bfe:	2b30      	cmp	r3, #48	; 0x30
   87c00:	d0f9      	beq.n	87bf6 <_dtoa_r+0xb5e>
   87c02:	e5c4      	b.n	8778e <_dtoa_r+0x6f6>
   87c04:	2230      	movs	r2, #48	; 0x30
   87c06:	9904      	ldr	r1, [sp, #16]
   87c08:	700a      	strb	r2, [r1, #0]
   87c0a:	9a02      	ldr	r2, [sp, #8]
   87c0c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87c10:	3201      	adds	r2, #1
   87c12:	9202      	str	r2, [sp, #8]
   87c14:	f7ff bbfb 	b.w	8740e <_dtoa_r+0x376>
   87c18:	f000 80bb 	beq.w	87d92 <_dtoa_r+0xcfa>
   87c1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87c20:	9b02      	ldr	r3, [sp, #8]
   87c22:	f04f 0a02 	mov.w	sl, #2
   87c26:	425d      	negs	r5, r3
   87c28:	4b82      	ldr	r3, [pc, #520]	; (87e34 <_dtoa_r+0xd9c>)
   87c2a:	f005 020f 	and.w	r2, r5, #15
   87c2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87c32:	e9d3 2300 	ldrd	r2, r3, [r3]
   87c36:	f7fd f933 	bl	84ea0 <__aeabi_dmul>
   87c3a:	112d      	asrs	r5, r5, #4
   87c3c:	4607      	mov	r7, r0
   87c3e:	4688      	mov	r8, r1
   87c40:	f43f ae1a 	beq.w	87878 <_dtoa_r+0x7e0>
   87c44:	4e7c      	ldr	r6, [pc, #496]	; (87e38 <_dtoa_r+0xda0>)
   87c46:	07eb      	lsls	r3, r5, #31
   87c48:	d509      	bpl.n	87c5e <_dtoa_r+0xbc6>
   87c4a:	e9d6 2300 	ldrd	r2, r3, [r6]
   87c4e:	4638      	mov	r0, r7
   87c50:	4641      	mov	r1, r8
   87c52:	f7fd f925 	bl	84ea0 <__aeabi_dmul>
   87c56:	4607      	mov	r7, r0
   87c58:	4688      	mov	r8, r1
   87c5a:	f10a 0a01 	add.w	sl, sl, #1
   87c5e:	106d      	asrs	r5, r5, #1
   87c60:	f106 0608 	add.w	r6, r6, #8
   87c64:	d1ef      	bne.n	87c46 <_dtoa_r+0xbae>
   87c66:	e607      	b.n	87878 <_dtoa_r+0x7e0>
   87c68:	6871      	ldr	r1, [r6, #4]
   87c6a:	4620      	mov	r0, r4
   87c6c:	f000 fccc 	bl	88608 <_Balloc>
   87c70:	4605      	mov	r5, r0
   87c72:	6933      	ldr	r3, [r6, #16]
   87c74:	f106 010c 	add.w	r1, r6, #12
   87c78:	3302      	adds	r3, #2
   87c7a:	009a      	lsls	r2, r3, #2
   87c7c:	300c      	adds	r0, #12
   87c7e:	f000 fc41 	bl	88504 <memcpy>
   87c82:	4629      	mov	r1, r5
   87c84:	2201      	movs	r2, #1
   87c86:	4620      	mov	r0, r4
   87c88:	f000 fe6c 	bl	88964 <__lshift>
   87c8c:	9008      	str	r0, [sp, #32]
   87c8e:	e4b6      	b.n	875fe <_dtoa_r+0x566>
   87c90:	2b39      	cmp	r3, #57	; 0x39
   87c92:	f8cd b020 	str.w	fp, [sp, #32]
   87c96:	46d0      	mov	r8, sl
   87c98:	f000 80a5 	beq.w	87de6 <_dtoa_r+0xd4e>
   87c9c:	f103 0a01 	add.w	sl, r3, #1
   87ca0:	46b3      	mov	fp, r6
   87ca2:	f887 a000 	strb.w	sl, [r7]
   87ca6:	1c7d      	adds	r5, r7, #1
   87ca8:	9e08      	ldr	r6, [sp, #32]
   87caa:	e570      	b.n	8778e <_dtoa_r+0x6f6>
   87cac:	465a      	mov	r2, fp
   87cae:	46d0      	mov	r8, sl
   87cb0:	46b3      	mov	fp, r6
   87cb2:	469a      	mov	sl, r3
   87cb4:	4616      	mov	r6, r2
   87cb6:	e54e      	b.n	87756 <_dtoa_r+0x6be>
   87cb8:	9812      	ldr	r0, [sp, #72]	; 0x48
   87cba:	495e      	ldr	r1, [pc, #376]	; (87e34 <_dtoa_r+0xd9c>)
   87cbc:	462a      	mov	r2, r5
   87cbe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   87cc2:	4633      	mov	r3, r6
   87cc4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   87cc8:	f7fd f8ea 	bl	84ea0 <__aeabi_dmul>
   87ccc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   87cd0:	4638      	mov	r0, r7
   87cd2:	4641      	mov	r1, r8
   87cd4:	f001 fcc6 	bl	89664 <__aeabi_d2iz>
   87cd8:	4605      	mov	r5, r0
   87cda:	f7fd f87b 	bl	84dd4 <__aeabi_i2d>
   87cde:	4602      	mov	r2, r0
   87ce0:	460b      	mov	r3, r1
   87ce2:	4638      	mov	r0, r7
   87ce4:	4641      	mov	r1, r8
   87ce6:	f7fc ff27 	bl	84b38 <__aeabi_dsub>
   87cea:	4606      	mov	r6, r0
   87cec:	9812      	ldr	r0, [sp, #72]	; 0x48
   87cee:	9a04      	ldr	r2, [sp, #16]
   87cf0:	3530      	adds	r5, #48	; 0x30
   87cf2:	2801      	cmp	r0, #1
   87cf4:	7015      	strb	r5, [r2, #0]
   87cf6:	460f      	mov	r7, r1
   87cf8:	f102 0501 	add.w	r5, r2, #1
   87cfc:	d026      	beq.n	87d4c <_dtoa_r+0xcb4>
   87cfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87d00:	9a04      	ldr	r2, [sp, #16]
   87d02:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   87d06:	4413      	add	r3, r2
   87d08:	f04f 0a00 	mov.w	sl, #0
   87d0c:	4699      	mov	r9, r3
   87d0e:	f8df b130 	ldr.w	fp, [pc, #304]	; 87e40 <_dtoa_r+0xda8>
   87d12:	4652      	mov	r2, sl
   87d14:	465b      	mov	r3, fp
   87d16:	4630      	mov	r0, r6
   87d18:	4639      	mov	r1, r7
   87d1a:	f7fd f8c1 	bl	84ea0 <__aeabi_dmul>
   87d1e:	460f      	mov	r7, r1
   87d20:	4606      	mov	r6, r0
   87d22:	f001 fc9f 	bl	89664 <__aeabi_d2iz>
   87d26:	4680      	mov	r8, r0
   87d28:	f7fd f854 	bl	84dd4 <__aeabi_i2d>
   87d2c:	4602      	mov	r2, r0
   87d2e:	460b      	mov	r3, r1
   87d30:	4630      	mov	r0, r6
   87d32:	4639      	mov	r1, r7
   87d34:	f7fc ff00 	bl	84b38 <__aeabi_dsub>
   87d38:	f108 0830 	add.w	r8, r8, #48	; 0x30
   87d3c:	f805 8b01 	strb.w	r8, [r5], #1
   87d40:	454d      	cmp	r5, r9
   87d42:	4606      	mov	r6, r0
   87d44:	460f      	mov	r7, r1
   87d46:	d1e4      	bne.n	87d12 <_dtoa_r+0xc7a>
   87d48:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87d4c:	2200      	movs	r2, #0
   87d4e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   87d52:	4b3a      	ldr	r3, [pc, #232]	; (87e3c <_dtoa_r+0xda4>)
   87d54:	f7fc fef2 	bl	84b3c <__adddf3>
   87d58:	4632      	mov	r2, r6
   87d5a:	463b      	mov	r3, r7
   87d5c:	f001 fc44 	bl	895e8 <__aeabi_dcmplt>
   87d60:	2800      	cmp	r0, #0
   87d62:	d046      	beq.n	87df2 <_dtoa_r+0xd5a>
   87d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87d66:	9302      	str	r3, [sp, #8]
   87d68:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87d6c:	f7ff bb42 	b.w	873f4 <_dtoa_r+0x35c>
   87d70:	f04f 0800 	mov.w	r8, #0
   87d74:	4646      	mov	r6, r8
   87d76:	e6a8      	b.n	87aca <_dtoa_r+0xa32>
   87d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87d7a:	9a07      	ldr	r2, [sp, #28]
   87d7c:	1a9d      	subs	r5, r3, r2
   87d7e:	2300      	movs	r3, #0
   87d80:	f7ff bb70 	b.w	87464 <_dtoa_r+0x3cc>
   87d84:	9b18      	ldr	r3, [sp, #96]	; 0x60
   87d86:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87d88:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   87d8c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87d8e:	f7ff bb69 	b.w	87464 <_dtoa_r+0x3cc>
   87d92:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   87d96:	f04f 0a02 	mov.w	sl, #2
   87d9a:	e56d      	b.n	87878 <_dtoa_r+0x7e0>
   87d9c:	9b07      	ldr	r3, [sp, #28]
   87d9e:	2b00      	cmp	r3, #0
   87da0:	f43f aeb8 	beq.w	87b14 <_dtoa_r+0xa7c>
   87da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87da6:	2b00      	cmp	r3, #0
   87da8:	f77f aede 	ble.w	87b68 <_dtoa_r+0xad0>
   87dac:	2200      	movs	r2, #0
   87dae:	4b24      	ldr	r3, [pc, #144]	; (87e40 <_dtoa_r+0xda8>)
   87db0:	4638      	mov	r0, r7
   87db2:	4641      	mov	r1, r8
   87db4:	f7fd f874 	bl	84ea0 <__aeabi_dmul>
   87db8:	4607      	mov	r7, r0
   87dba:	4688      	mov	r8, r1
   87dbc:	f10a 0001 	add.w	r0, sl, #1
   87dc0:	f7fd f808 	bl	84dd4 <__aeabi_i2d>
   87dc4:	463a      	mov	r2, r7
   87dc6:	4643      	mov	r3, r8
   87dc8:	f7fd f86a 	bl	84ea0 <__aeabi_dmul>
   87dcc:	2200      	movs	r2, #0
   87dce:	4b17      	ldr	r3, [pc, #92]	; (87e2c <_dtoa_r+0xd94>)
   87dd0:	f7fc feb4 	bl	84b3c <__adddf3>
   87dd4:	9a02      	ldr	r2, [sp, #8]
   87dd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87dd8:	3a01      	subs	r2, #1
   87dda:	4605      	mov	r5, r0
   87ddc:	9215      	str	r2, [sp, #84]	; 0x54
   87dde:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87de2:	9312      	str	r3, [sp, #72]	; 0x48
   87de4:	e569      	b.n	878ba <_dtoa_r+0x822>
   87de6:	2239      	movs	r2, #57	; 0x39
   87de8:	46b3      	mov	fp, r6
   87dea:	703a      	strb	r2, [r7, #0]
   87dec:	9e08      	ldr	r6, [sp, #32]
   87dee:	1c7d      	adds	r5, r7, #1
   87df0:	e4bf      	b.n	87772 <_dtoa_r+0x6da>
   87df2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   87df6:	2000      	movs	r0, #0
   87df8:	4910      	ldr	r1, [pc, #64]	; (87e3c <_dtoa_r+0xda4>)
   87dfa:	f7fc fe9d 	bl	84b38 <__aeabi_dsub>
   87dfe:	4632      	mov	r2, r6
   87e00:	463b      	mov	r3, r7
   87e02:	f001 fc0f 	bl	89624 <__aeabi_dcmpgt>
   87e06:	b908      	cbnz	r0, 87e0c <_dtoa_r+0xd74>
   87e08:	e6ae      	b.n	87b68 <_dtoa_r+0xad0>
   87e0a:	4615      	mov	r5, r2
   87e0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87e10:	1e6a      	subs	r2, r5, #1
   87e12:	2b30      	cmp	r3, #48	; 0x30
   87e14:	d0f9      	beq.n	87e0a <_dtoa_r+0xd72>
   87e16:	e5d7      	b.n	879c8 <_dtoa_r+0x930>
   87e18:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87e1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87e1e:	9302      	str	r3, [sp, #8]
   87e20:	f7ff bae8 	b.w	873f4 <_dtoa_r+0x35c>
   87e24:	970c      	str	r7, [sp, #48]	; 0x30
   87e26:	f7ff bba7 	b.w	87578 <_dtoa_r+0x4e0>
   87e2a:	bf00      	nop
   87e2c:	401c0000 	.word	0x401c0000
   87e30:	40140000 	.word	0x40140000
   87e34:	00089c00 	.word	0x00089c00
   87e38:	00089bd8 	.word	0x00089bd8
   87e3c:	3fe00000 	.word	0x3fe00000
   87e40:	40240000 	.word	0x40240000
   87e44:	2b39      	cmp	r3, #57	; 0x39
   87e46:	f8cd b020 	str.w	fp, [sp, #32]
   87e4a:	46d0      	mov	r8, sl
   87e4c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87e50:	469a      	mov	sl, r3
   87e52:	d0c8      	beq.n	87de6 <_dtoa_r+0xd4e>
   87e54:	f1bb 0f00 	cmp.w	fp, #0
   87e58:	f73f aec0 	bgt.w	87bdc <_dtoa_r+0xb44>
   87e5c:	e6c0      	b.n	87be0 <_dtoa_r+0xb48>
   87e5e:	f47f aebf 	bne.w	87be0 <_dtoa_r+0xb48>
   87e62:	f01a 0f01 	tst.w	sl, #1
   87e66:	f43f aebb 	beq.w	87be0 <_dtoa_r+0xb48>
   87e6a:	e6b3      	b.n	87bd4 <_dtoa_r+0xb3c>
   87e6c:	f04f 0800 	mov.w	r8, #0
   87e70:	4646      	mov	r6, r8
   87e72:	e5e8      	b.n	87a46 <_dtoa_r+0x9ae>
   87e74:	4631      	mov	r1, r6
   87e76:	2300      	movs	r3, #0
   87e78:	220a      	movs	r2, #10
   87e7a:	4620      	mov	r0, r4
   87e7c:	f000 fbf4 	bl	88668 <__multadd>
   87e80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87e82:	4606      	mov	r6, r0
   87e84:	2b00      	cmp	r3, #0
   87e86:	dd07      	ble.n	87e98 <_dtoa_r+0xe00>
   87e88:	9307      	str	r3, [sp, #28]
   87e8a:	f7ff bbab 	b.w	875e4 <_dtoa_r+0x54c>
   87e8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87e90:	2b02      	cmp	r3, #2
   87e92:	dc1f      	bgt.n	87ed4 <_dtoa_r+0xe3c>
   87e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87e96:	e43c      	b.n	87712 <_dtoa_r+0x67a>
   87e98:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87e9a:	2b02      	cmp	r3, #2
   87e9c:	dc1a      	bgt.n	87ed4 <_dtoa_r+0xe3c>
   87e9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87ea0:	e7f2      	b.n	87e88 <_dtoa_r+0xdf0>
   87ea2:	f43f ab81 	beq.w	875a8 <_dtoa_r+0x510>
   87ea6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   87eaa:	e411      	b.n	876d0 <_dtoa_r+0x638>
   87eac:	2500      	movs	r5, #0
   87eae:	4620      	mov	r0, r4
   87eb0:	6465      	str	r5, [r4, #68]	; 0x44
   87eb2:	4629      	mov	r1, r5
   87eb4:	f000 fba8 	bl	88608 <_Balloc>
   87eb8:	f04f 33ff 	mov.w	r3, #4294967295
   87ebc:	9307      	str	r3, [sp, #28]
   87ebe:	930f      	str	r3, [sp, #60]	; 0x3c
   87ec0:	2301      	movs	r3, #1
   87ec2:	9004      	str	r0, [sp, #16]
   87ec4:	9525      	str	r5, [sp, #148]	; 0x94
   87ec6:	6420      	str	r0, [r4, #64]	; 0x40
   87ec8:	930b      	str	r3, [sp, #44]	; 0x2c
   87eca:	f7ff b9e0 	b.w	8728e <_dtoa_r+0x1f6>
   87ece:	2501      	movs	r5, #1
   87ed0:	f7ff b9a8 	b.w	87224 <_dtoa_r+0x18c>
   87ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87ed6:	9307      	str	r3, [sp, #28]
   87ed8:	e5e8      	b.n	87aac <_dtoa_r+0xa14>
   87eda:	bf00      	nop

00087edc <__libc_fini_array>:
   87edc:	b538      	push	{r3, r4, r5, lr}
   87ede:	4c0a      	ldr	r4, [pc, #40]	; (87f08 <__libc_fini_array+0x2c>)
   87ee0:	4d0a      	ldr	r5, [pc, #40]	; (87f0c <__libc_fini_array+0x30>)
   87ee2:	1b64      	subs	r4, r4, r5
   87ee4:	10a4      	asrs	r4, r4, #2
   87ee6:	d00a      	beq.n	87efe <__libc_fini_array+0x22>
   87ee8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   87eec:	3b01      	subs	r3, #1
   87eee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   87ef2:	3c01      	subs	r4, #1
   87ef4:	f855 3904 	ldr.w	r3, [r5], #-4
   87ef8:	4798      	blx	r3
   87efa:	2c00      	cmp	r4, #0
   87efc:	d1f9      	bne.n	87ef2 <__libc_fini_array+0x16>
   87efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   87f02:	f001 bf7b 	b.w	89dfc <_fini>
   87f06:	bf00      	nop
   87f08:	00089e0c 	.word	0x00089e0c
   87f0c:	00089e08 	.word	0x00089e08

00087f10 <_localeconv_r>:
   87f10:	4a04      	ldr	r2, [pc, #16]	; (87f24 <_localeconv_r+0x14>)
   87f12:	4b05      	ldr	r3, [pc, #20]	; (87f28 <_localeconv_r+0x18>)
   87f14:	6812      	ldr	r2, [r2, #0]
   87f16:	6b50      	ldr	r0, [r2, #52]	; 0x34
   87f18:	2800      	cmp	r0, #0
   87f1a:	bf08      	it	eq
   87f1c:	4618      	moveq	r0, r3
   87f1e:	30f0      	adds	r0, #240	; 0xf0
   87f20:	4770      	bx	lr
   87f22:	bf00      	nop
   87f24:	200701a4 	.word	0x200701a4
   87f28:	200709e4 	.word	0x200709e4

00087f2c <__retarget_lock_acquire_recursive>:
   87f2c:	4770      	bx	lr
   87f2e:	bf00      	nop

00087f30 <__retarget_lock_release_recursive>:
   87f30:	4770      	bx	lr
   87f32:	bf00      	nop

00087f34 <_malloc_r>:
   87f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87f38:	f101 060b 	add.w	r6, r1, #11
   87f3c:	2e16      	cmp	r6, #22
   87f3e:	b083      	sub	sp, #12
   87f40:	4605      	mov	r5, r0
   87f42:	f240 809e 	bls.w	88082 <_malloc_r+0x14e>
   87f46:	f036 0607 	bics.w	r6, r6, #7
   87f4a:	f100 80bd 	bmi.w	880c8 <_malloc_r+0x194>
   87f4e:	42b1      	cmp	r1, r6
   87f50:	f200 80ba 	bhi.w	880c8 <_malloc_r+0x194>
   87f54:	f000 fb4c 	bl	885f0 <__malloc_lock>
   87f58:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   87f5c:	f0c0 8285 	bcc.w	8846a <_malloc_r+0x536>
   87f60:	0a73      	lsrs	r3, r6, #9
   87f62:	f000 80b8 	beq.w	880d6 <_malloc_r+0x1a2>
   87f66:	2b04      	cmp	r3, #4
   87f68:	f200 816c 	bhi.w	88244 <_malloc_r+0x310>
   87f6c:	09b3      	lsrs	r3, r6, #6
   87f6e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   87f72:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   87f76:	00c1      	lsls	r1, r0, #3
   87f78:	4fb8      	ldr	r7, [pc, #736]	; (8825c <_malloc_r+0x328>)
   87f7a:	4439      	add	r1, r7
   87f7c:	684c      	ldr	r4, [r1, #4]
   87f7e:	3908      	subs	r1, #8
   87f80:	42a1      	cmp	r1, r4
   87f82:	d106      	bne.n	87f92 <_malloc_r+0x5e>
   87f84:	e00c      	b.n	87fa0 <_malloc_r+0x6c>
   87f86:	2a00      	cmp	r2, #0
   87f88:	f280 80ab 	bge.w	880e2 <_malloc_r+0x1ae>
   87f8c:	68e4      	ldr	r4, [r4, #12]
   87f8e:	42a1      	cmp	r1, r4
   87f90:	d006      	beq.n	87fa0 <_malloc_r+0x6c>
   87f92:	6863      	ldr	r3, [r4, #4]
   87f94:	f023 0303 	bic.w	r3, r3, #3
   87f98:	1b9a      	subs	r2, r3, r6
   87f9a:	2a0f      	cmp	r2, #15
   87f9c:	ddf3      	ble.n	87f86 <_malloc_r+0x52>
   87f9e:	4670      	mov	r0, lr
   87fa0:	693c      	ldr	r4, [r7, #16]
   87fa2:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 88270 <_malloc_r+0x33c>
   87fa6:	4574      	cmp	r4, lr
   87fa8:	f000 819e 	beq.w	882e8 <_malloc_r+0x3b4>
   87fac:	6863      	ldr	r3, [r4, #4]
   87fae:	f023 0303 	bic.w	r3, r3, #3
   87fb2:	1b9a      	subs	r2, r3, r6
   87fb4:	2a0f      	cmp	r2, #15
   87fb6:	f300 8183 	bgt.w	882c0 <_malloc_r+0x38c>
   87fba:	2a00      	cmp	r2, #0
   87fbc:	f8c7 e014 	str.w	lr, [r7, #20]
   87fc0:	f8c7 e010 	str.w	lr, [r7, #16]
   87fc4:	f280 8091 	bge.w	880ea <_malloc_r+0x1b6>
   87fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   87fcc:	f080 8154 	bcs.w	88278 <_malloc_r+0x344>
   87fd0:	2201      	movs	r2, #1
   87fd2:	08db      	lsrs	r3, r3, #3
   87fd4:	6879      	ldr	r1, [r7, #4]
   87fd6:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   87fda:	4413      	add	r3, r2
   87fdc:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   87fe0:	fa02 f20c 	lsl.w	r2, r2, ip
   87fe4:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   87fe8:	430a      	orrs	r2, r1
   87fea:	f1ac 0108 	sub.w	r1, ip, #8
   87fee:	60e1      	str	r1, [r4, #12]
   87ff0:	f8c4 8008 	str.w	r8, [r4, #8]
   87ff4:	607a      	str	r2, [r7, #4]
   87ff6:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   87ffa:	f8c8 400c 	str.w	r4, [r8, #12]
   87ffe:	2401      	movs	r4, #1
   88000:	1083      	asrs	r3, r0, #2
   88002:	409c      	lsls	r4, r3
   88004:	4294      	cmp	r4, r2
   88006:	d87d      	bhi.n	88104 <_malloc_r+0x1d0>
   88008:	4214      	tst	r4, r2
   8800a:	d106      	bne.n	8801a <_malloc_r+0xe6>
   8800c:	f020 0003 	bic.w	r0, r0, #3
   88010:	0064      	lsls	r4, r4, #1
   88012:	4214      	tst	r4, r2
   88014:	f100 0004 	add.w	r0, r0, #4
   88018:	d0fa      	beq.n	88010 <_malloc_r+0xdc>
   8801a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8801e:	46cc      	mov	ip, r9
   88020:	4680      	mov	r8, r0
   88022:	f8dc 300c 	ldr.w	r3, [ip, #12]
   88026:	459c      	cmp	ip, r3
   88028:	d107      	bne.n	8803a <_malloc_r+0x106>
   8802a:	e15f      	b.n	882ec <_malloc_r+0x3b8>
   8802c:	2a00      	cmp	r2, #0
   8802e:	f280 816d 	bge.w	8830c <_malloc_r+0x3d8>
   88032:	68db      	ldr	r3, [r3, #12]
   88034:	459c      	cmp	ip, r3
   88036:	f000 8159 	beq.w	882ec <_malloc_r+0x3b8>
   8803a:	6859      	ldr	r1, [r3, #4]
   8803c:	f021 0103 	bic.w	r1, r1, #3
   88040:	1b8a      	subs	r2, r1, r6
   88042:	2a0f      	cmp	r2, #15
   88044:	ddf2      	ble.n	8802c <_malloc_r+0xf8>
   88046:	68dc      	ldr	r4, [r3, #12]
   88048:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8804c:	f046 0801 	orr.w	r8, r6, #1
   88050:	4628      	mov	r0, r5
   88052:	441e      	add	r6, r3
   88054:	f042 0501 	orr.w	r5, r2, #1
   88058:	f8c3 8004 	str.w	r8, [r3, #4]
   8805c:	f8cc 400c 	str.w	r4, [ip, #12]
   88060:	f8c4 c008 	str.w	ip, [r4, #8]
   88064:	617e      	str	r6, [r7, #20]
   88066:	613e      	str	r6, [r7, #16]
   88068:	f8c6 e00c 	str.w	lr, [r6, #12]
   8806c:	f8c6 e008 	str.w	lr, [r6, #8]
   88070:	6075      	str	r5, [r6, #4]
   88072:	505a      	str	r2, [r3, r1]
   88074:	9300      	str	r3, [sp, #0]
   88076:	f000 fac1 	bl	885fc <__malloc_unlock>
   8807a:	9b00      	ldr	r3, [sp, #0]
   8807c:	f103 0408 	add.w	r4, r3, #8
   88080:	e01e      	b.n	880c0 <_malloc_r+0x18c>
   88082:	2910      	cmp	r1, #16
   88084:	d820      	bhi.n	880c8 <_malloc_r+0x194>
   88086:	f000 fab3 	bl	885f0 <__malloc_lock>
   8808a:	2610      	movs	r6, #16
   8808c:	2318      	movs	r3, #24
   8808e:	2002      	movs	r0, #2
   88090:	4f72      	ldr	r7, [pc, #456]	; (8825c <_malloc_r+0x328>)
   88092:	443b      	add	r3, r7
   88094:	685c      	ldr	r4, [r3, #4]
   88096:	f1a3 0208 	sub.w	r2, r3, #8
   8809a:	4294      	cmp	r4, r2
   8809c:	f000 812f 	beq.w	882fe <_malloc_r+0x3ca>
   880a0:	6863      	ldr	r3, [r4, #4]
   880a2:	68e1      	ldr	r1, [r4, #12]
   880a4:	f023 0303 	bic.w	r3, r3, #3
   880a8:	4423      	add	r3, r4
   880aa:	685a      	ldr	r2, [r3, #4]
   880ac:	68a6      	ldr	r6, [r4, #8]
   880ae:	f042 0201 	orr.w	r2, r2, #1
   880b2:	60f1      	str	r1, [r6, #12]
   880b4:	4628      	mov	r0, r5
   880b6:	608e      	str	r6, [r1, #8]
   880b8:	605a      	str	r2, [r3, #4]
   880ba:	f000 fa9f 	bl	885fc <__malloc_unlock>
   880be:	3408      	adds	r4, #8
   880c0:	4620      	mov	r0, r4
   880c2:	b003      	add	sp, #12
   880c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   880c8:	2400      	movs	r4, #0
   880ca:	230c      	movs	r3, #12
   880cc:	4620      	mov	r0, r4
   880ce:	602b      	str	r3, [r5, #0]
   880d0:	b003      	add	sp, #12
   880d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   880d6:	2040      	movs	r0, #64	; 0x40
   880d8:	f44f 7100 	mov.w	r1, #512	; 0x200
   880dc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   880e0:	e74a      	b.n	87f78 <_malloc_r+0x44>
   880e2:	4423      	add	r3, r4
   880e4:	685a      	ldr	r2, [r3, #4]
   880e6:	68e1      	ldr	r1, [r4, #12]
   880e8:	e7e0      	b.n	880ac <_malloc_r+0x178>
   880ea:	4423      	add	r3, r4
   880ec:	685a      	ldr	r2, [r3, #4]
   880ee:	4628      	mov	r0, r5
   880f0:	f042 0201 	orr.w	r2, r2, #1
   880f4:	605a      	str	r2, [r3, #4]
   880f6:	3408      	adds	r4, #8
   880f8:	f000 fa80 	bl	885fc <__malloc_unlock>
   880fc:	4620      	mov	r0, r4
   880fe:	b003      	add	sp, #12
   88100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88104:	68bc      	ldr	r4, [r7, #8]
   88106:	6863      	ldr	r3, [r4, #4]
   88108:	f023 0803 	bic.w	r8, r3, #3
   8810c:	45b0      	cmp	r8, r6
   8810e:	d304      	bcc.n	8811a <_malloc_r+0x1e6>
   88110:	eba8 0306 	sub.w	r3, r8, r6
   88114:	2b0f      	cmp	r3, #15
   88116:	f300 8085 	bgt.w	88224 <_malloc_r+0x2f0>
   8811a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 88274 <_malloc_r+0x340>
   8811e:	4b50      	ldr	r3, [pc, #320]	; (88260 <_malloc_r+0x32c>)
   88120:	f8d9 2000 	ldr.w	r2, [r9]
   88124:	681b      	ldr	r3, [r3, #0]
   88126:	3201      	adds	r2, #1
   88128:	4433      	add	r3, r6
   8812a:	eb04 0a08 	add.w	sl, r4, r8
   8812e:	f000 8154 	beq.w	883da <_malloc_r+0x4a6>
   88132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   88136:	330f      	adds	r3, #15
   88138:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8813c:	f02b 0b0f 	bic.w	fp, fp, #15
   88140:	4659      	mov	r1, fp
   88142:	4628      	mov	r0, r5
   88144:	f000 fd5c 	bl	88c00 <_sbrk_r>
   88148:	1c41      	adds	r1, r0, #1
   8814a:	4602      	mov	r2, r0
   8814c:	f000 80fb 	beq.w	88346 <_malloc_r+0x412>
   88150:	4582      	cmp	sl, r0
   88152:	f200 80f6 	bhi.w	88342 <_malloc_r+0x40e>
   88156:	4b43      	ldr	r3, [pc, #268]	; (88264 <_malloc_r+0x330>)
   88158:	6819      	ldr	r1, [r3, #0]
   8815a:	4459      	add	r1, fp
   8815c:	6019      	str	r1, [r3, #0]
   8815e:	f000 814c 	beq.w	883fa <_malloc_r+0x4c6>
   88162:	f8d9 0000 	ldr.w	r0, [r9]
   88166:	3001      	adds	r0, #1
   88168:	bf1b      	ittet	ne
   8816a:	eba2 0a0a 	subne.w	sl, r2, sl
   8816e:	4451      	addne	r1, sl
   88170:	f8c9 2000 	streq.w	r2, [r9]
   88174:	6019      	strne	r1, [r3, #0]
   88176:	f012 0107 	ands.w	r1, r2, #7
   8817a:	f000 8114 	beq.w	883a6 <_malloc_r+0x472>
   8817e:	f1c1 0008 	rsb	r0, r1, #8
   88182:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   88186:	4402      	add	r2, r0
   88188:	3108      	adds	r1, #8
   8818a:	eb02 090b 	add.w	r9, r2, fp
   8818e:	f3c9 090b 	ubfx	r9, r9, #0, #12
   88192:	eba1 0909 	sub.w	r9, r1, r9
   88196:	4649      	mov	r1, r9
   88198:	4628      	mov	r0, r5
   8819a:	9301      	str	r3, [sp, #4]
   8819c:	9200      	str	r2, [sp, #0]
   8819e:	f000 fd2f 	bl	88c00 <_sbrk_r>
   881a2:	1c43      	adds	r3, r0, #1
   881a4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   881a8:	f000 8142 	beq.w	88430 <_malloc_r+0x4fc>
   881ac:	1a80      	subs	r0, r0, r2
   881ae:	4448      	add	r0, r9
   881b0:	f040 0001 	orr.w	r0, r0, #1
   881b4:	6819      	ldr	r1, [r3, #0]
   881b6:	42bc      	cmp	r4, r7
   881b8:	4449      	add	r1, r9
   881ba:	60ba      	str	r2, [r7, #8]
   881bc:	6019      	str	r1, [r3, #0]
   881be:	6050      	str	r0, [r2, #4]
   881c0:	d017      	beq.n	881f2 <_malloc_r+0x2be>
   881c2:	f1b8 0f0f 	cmp.w	r8, #15
   881c6:	f240 80fa 	bls.w	883be <_malloc_r+0x48a>
   881ca:	f04f 0c05 	mov.w	ip, #5
   881ce:	6862      	ldr	r2, [r4, #4]
   881d0:	f1a8 000c 	sub.w	r0, r8, #12
   881d4:	f020 0007 	bic.w	r0, r0, #7
   881d8:	f002 0201 	and.w	r2, r2, #1
   881dc:	eb04 0e00 	add.w	lr, r4, r0
   881e0:	4302      	orrs	r2, r0
   881e2:	280f      	cmp	r0, #15
   881e4:	6062      	str	r2, [r4, #4]
   881e6:	f8ce c004 	str.w	ip, [lr, #4]
   881ea:	f8ce c008 	str.w	ip, [lr, #8]
   881ee:	f200 8116 	bhi.w	8841e <_malloc_r+0x4ea>
   881f2:	4b1d      	ldr	r3, [pc, #116]	; (88268 <_malloc_r+0x334>)
   881f4:	68bc      	ldr	r4, [r7, #8]
   881f6:	681a      	ldr	r2, [r3, #0]
   881f8:	4291      	cmp	r1, r2
   881fa:	bf88      	it	hi
   881fc:	6019      	strhi	r1, [r3, #0]
   881fe:	4b1b      	ldr	r3, [pc, #108]	; (8826c <_malloc_r+0x338>)
   88200:	681a      	ldr	r2, [r3, #0]
   88202:	4291      	cmp	r1, r2
   88204:	6862      	ldr	r2, [r4, #4]
   88206:	bf88      	it	hi
   88208:	6019      	strhi	r1, [r3, #0]
   8820a:	f022 0203 	bic.w	r2, r2, #3
   8820e:	4296      	cmp	r6, r2
   88210:	eba2 0306 	sub.w	r3, r2, r6
   88214:	d801      	bhi.n	8821a <_malloc_r+0x2e6>
   88216:	2b0f      	cmp	r3, #15
   88218:	dc04      	bgt.n	88224 <_malloc_r+0x2f0>
   8821a:	4628      	mov	r0, r5
   8821c:	f000 f9ee 	bl	885fc <__malloc_unlock>
   88220:	2400      	movs	r4, #0
   88222:	e74d      	b.n	880c0 <_malloc_r+0x18c>
   88224:	f046 0201 	orr.w	r2, r6, #1
   88228:	f043 0301 	orr.w	r3, r3, #1
   8822c:	4426      	add	r6, r4
   8822e:	6062      	str	r2, [r4, #4]
   88230:	4628      	mov	r0, r5
   88232:	60be      	str	r6, [r7, #8]
   88234:	3408      	adds	r4, #8
   88236:	6073      	str	r3, [r6, #4]
   88238:	f000 f9e0 	bl	885fc <__malloc_unlock>
   8823c:	4620      	mov	r0, r4
   8823e:	b003      	add	sp, #12
   88240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88244:	2b14      	cmp	r3, #20
   88246:	d970      	bls.n	8832a <_malloc_r+0x3f6>
   88248:	2b54      	cmp	r3, #84	; 0x54
   8824a:	f200 80a2 	bhi.w	88392 <_malloc_r+0x45e>
   8824e:	0b33      	lsrs	r3, r6, #12
   88250:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   88254:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   88258:	00c1      	lsls	r1, r0, #3
   8825a:	e68d      	b.n	87f78 <_malloc_r+0x44>
   8825c:	200705d4 	.word	0x200705d4
   88260:	20070e08 	.word	0x20070e08
   88264:	20070dd8 	.word	0x20070dd8
   88268:	20070e00 	.word	0x20070e00
   8826c:	20070e04 	.word	0x20070e04
   88270:	200705dc 	.word	0x200705dc
   88274:	200709dc 	.word	0x200709dc
   88278:	0a5a      	lsrs	r2, r3, #9
   8827a:	2a04      	cmp	r2, #4
   8827c:	d95b      	bls.n	88336 <_malloc_r+0x402>
   8827e:	2a14      	cmp	r2, #20
   88280:	f200 80ae 	bhi.w	883e0 <_malloc_r+0x4ac>
   88284:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   88288:	00c9      	lsls	r1, r1, #3
   8828a:	325b      	adds	r2, #91	; 0x5b
   8828c:	eb07 0c01 	add.w	ip, r7, r1
   88290:	5879      	ldr	r1, [r7, r1]
   88292:	f1ac 0c08 	sub.w	ip, ip, #8
   88296:	458c      	cmp	ip, r1
   88298:	f000 8088 	beq.w	883ac <_malloc_r+0x478>
   8829c:	684a      	ldr	r2, [r1, #4]
   8829e:	f022 0203 	bic.w	r2, r2, #3
   882a2:	4293      	cmp	r3, r2
   882a4:	d273      	bcs.n	8838e <_malloc_r+0x45a>
   882a6:	6889      	ldr	r1, [r1, #8]
   882a8:	458c      	cmp	ip, r1
   882aa:	d1f7      	bne.n	8829c <_malloc_r+0x368>
   882ac:	f8dc 300c 	ldr.w	r3, [ip, #12]
   882b0:	687a      	ldr	r2, [r7, #4]
   882b2:	60e3      	str	r3, [r4, #12]
   882b4:	f8c4 c008 	str.w	ip, [r4, #8]
   882b8:	609c      	str	r4, [r3, #8]
   882ba:	f8cc 400c 	str.w	r4, [ip, #12]
   882be:	e69e      	b.n	87ffe <_malloc_r+0xca>
   882c0:	f046 0c01 	orr.w	ip, r6, #1
   882c4:	f042 0101 	orr.w	r1, r2, #1
   882c8:	4426      	add	r6, r4
   882ca:	f8c4 c004 	str.w	ip, [r4, #4]
   882ce:	4628      	mov	r0, r5
   882d0:	617e      	str	r6, [r7, #20]
   882d2:	613e      	str	r6, [r7, #16]
   882d4:	f8c6 e00c 	str.w	lr, [r6, #12]
   882d8:	f8c6 e008 	str.w	lr, [r6, #8]
   882dc:	6071      	str	r1, [r6, #4]
   882de:	50e2      	str	r2, [r4, r3]
   882e0:	f000 f98c 	bl	885fc <__malloc_unlock>
   882e4:	3408      	adds	r4, #8
   882e6:	e6eb      	b.n	880c0 <_malloc_r+0x18c>
   882e8:	687a      	ldr	r2, [r7, #4]
   882ea:	e688      	b.n	87ffe <_malloc_r+0xca>
   882ec:	f108 0801 	add.w	r8, r8, #1
   882f0:	f018 0f03 	tst.w	r8, #3
   882f4:	f10c 0c08 	add.w	ip, ip, #8
   882f8:	f47f ae93 	bne.w	88022 <_malloc_r+0xee>
   882fc:	e02d      	b.n	8835a <_malloc_r+0x426>
   882fe:	68dc      	ldr	r4, [r3, #12]
   88300:	42a3      	cmp	r3, r4
   88302:	bf08      	it	eq
   88304:	3002      	addeq	r0, #2
   88306:	f43f ae4b 	beq.w	87fa0 <_malloc_r+0x6c>
   8830a:	e6c9      	b.n	880a0 <_malloc_r+0x16c>
   8830c:	461c      	mov	r4, r3
   8830e:	4419      	add	r1, r3
   88310:	684a      	ldr	r2, [r1, #4]
   88312:	68db      	ldr	r3, [r3, #12]
   88314:	f854 6f08 	ldr.w	r6, [r4, #8]!
   88318:	f042 0201 	orr.w	r2, r2, #1
   8831c:	604a      	str	r2, [r1, #4]
   8831e:	4628      	mov	r0, r5
   88320:	60f3      	str	r3, [r6, #12]
   88322:	609e      	str	r6, [r3, #8]
   88324:	f000 f96a 	bl	885fc <__malloc_unlock>
   88328:	e6ca      	b.n	880c0 <_malloc_r+0x18c>
   8832a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8832e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   88332:	00c1      	lsls	r1, r0, #3
   88334:	e620      	b.n	87f78 <_malloc_r+0x44>
   88336:	099a      	lsrs	r2, r3, #6
   88338:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8833c:	00c9      	lsls	r1, r1, #3
   8833e:	3238      	adds	r2, #56	; 0x38
   88340:	e7a4      	b.n	8828c <_malloc_r+0x358>
   88342:	42bc      	cmp	r4, r7
   88344:	d054      	beq.n	883f0 <_malloc_r+0x4bc>
   88346:	68bc      	ldr	r4, [r7, #8]
   88348:	6862      	ldr	r2, [r4, #4]
   8834a:	f022 0203 	bic.w	r2, r2, #3
   8834e:	e75e      	b.n	8820e <_malloc_r+0x2da>
   88350:	f859 3908 	ldr.w	r3, [r9], #-8
   88354:	4599      	cmp	r9, r3
   88356:	f040 8086 	bne.w	88466 <_malloc_r+0x532>
   8835a:	f010 0f03 	tst.w	r0, #3
   8835e:	f100 30ff 	add.w	r0, r0, #4294967295
   88362:	d1f5      	bne.n	88350 <_malloc_r+0x41c>
   88364:	687b      	ldr	r3, [r7, #4]
   88366:	ea23 0304 	bic.w	r3, r3, r4
   8836a:	607b      	str	r3, [r7, #4]
   8836c:	0064      	lsls	r4, r4, #1
   8836e:	429c      	cmp	r4, r3
   88370:	f63f aec8 	bhi.w	88104 <_malloc_r+0x1d0>
   88374:	2c00      	cmp	r4, #0
   88376:	f43f aec5 	beq.w	88104 <_malloc_r+0x1d0>
   8837a:	421c      	tst	r4, r3
   8837c:	4640      	mov	r0, r8
   8837e:	f47f ae4c 	bne.w	8801a <_malloc_r+0xe6>
   88382:	0064      	lsls	r4, r4, #1
   88384:	421c      	tst	r4, r3
   88386:	f100 0004 	add.w	r0, r0, #4
   8838a:	d0fa      	beq.n	88382 <_malloc_r+0x44e>
   8838c:	e645      	b.n	8801a <_malloc_r+0xe6>
   8838e:	468c      	mov	ip, r1
   88390:	e78c      	b.n	882ac <_malloc_r+0x378>
   88392:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   88396:	d815      	bhi.n	883c4 <_malloc_r+0x490>
   88398:	0bf3      	lsrs	r3, r6, #15
   8839a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8839e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   883a2:	00c1      	lsls	r1, r0, #3
   883a4:	e5e8      	b.n	87f78 <_malloc_r+0x44>
   883a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   883aa:	e6ee      	b.n	8818a <_malloc_r+0x256>
   883ac:	2101      	movs	r1, #1
   883ae:	687b      	ldr	r3, [r7, #4]
   883b0:	1092      	asrs	r2, r2, #2
   883b2:	fa01 f202 	lsl.w	r2, r1, r2
   883b6:	431a      	orrs	r2, r3
   883b8:	607a      	str	r2, [r7, #4]
   883ba:	4663      	mov	r3, ip
   883bc:	e779      	b.n	882b2 <_malloc_r+0x37e>
   883be:	2301      	movs	r3, #1
   883c0:	6053      	str	r3, [r2, #4]
   883c2:	e72a      	b.n	8821a <_malloc_r+0x2e6>
   883c4:	f240 5254 	movw	r2, #1364	; 0x554
   883c8:	4293      	cmp	r3, r2
   883ca:	d822      	bhi.n	88412 <_malloc_r+0x4de>
   883cc:	0cb3      	lsrs	r3, r6, #18
   883ce:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   883d2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   883d6:	00c1      	lsls	r1, r0, #3
   883d8:	e5ce      	b.n	87f78 <_malloc_r+0x44>
   883da:	f103 0b10 	add.w	fp, r3, #16
   883de:	e6af      	b.n	88140 <_malloc_r+0x20c>
   883e0:	2a54      	cmp	r2, #84	; 0x54
   883e2:	d829      	bhi.n	88438 <_malloc_r+0x504>
   883e4:	0b1a      	lsrs	r2, r3, #12
   883e6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   883ea:	00c9      	lsls	r1, r1, #3
   883ec:	326e      	adds	r2, #110	; 0x6e
   883ee:	e74d      	b.n	8828c <_malloc_r+0x358>
   883f0:	4b20      	ldr	r3, [pc, #128]	; (88474 <_malloc_r+0x540>)
   883f2:	6819      	ldr	r1, [r3, #0]
   883f4:	4459      	add	r1, fp
   883f6:	6019      	str	r1, [r3, #0]
   883f8:	e6b3      	b.n	88162 <_malloc_r+0x22e>
   883fa:	f3ca 000b 	ubfx	r0, sl, #0, #12
   883fe:	2800      	cmp	r0, #0
   88400:	f47f aeaf 	bne.w	88162 <_malloc_r+0x22e>
   88404:	eb08 030b 	add.w	r3, r8, fp
   88408:	68ba      	ldr	r2, [r7, #8]
   8840a:	f043 0301 	orr.w	r3, r3, #1
   8840e:	6053      	str	r3, [r2, #4]
   88410:	e6ef      	b.n	881f2 <_malloc_r+0x2be>
   88412:	207f      	movs	r0, #127	; 0x7f
   88414:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   88418:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   8841c:	e5ac      	b.n	87f78 <_malloc_r+0x44>
   8841e:	f104 0108 	add.w	r1, r4, #8
   88422:	4628      	mov	r0, r5
   88424:	9300      	str	r3, [sp, #0]
   88426:	f000 fd5d 	bl	88ee4 <_free_r>
   8842a:	9b00      	ldr	r3, [sp, #0]
   8842c:	6819      	ldr	r1, [r3, #0]
   8842e:	e6e0      	b.n	881f2 <_malloc_r+0x2be>
   88430:	2001      	movs	r0, #1
   88432:	f04f 0900 	mov.w	r9, #0
   88436:	e6bd      	b.n	881b4 <_malloc_r+0x280>
   88438:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8843c:	d805      	bhi.n	8844a <_malloc_r+0x516>
   8843e:	0bda      	lsrs	r2, r3, #15
   88440:	f102 0178 	add.w	r1, r2, #120	; 0x78
   88444:	00c9      	lsls	r1, r1, #3
   88446:	3277      	adds	r2, #119	; 0x77
   88448:	e720      	b.n	8828c <_malloc_r+0x358>
   8844a:	f240 5154 	movw	r1, #1364	; 0x554
   8844e:	428a      	cmp	r2, r1
   88450:	d805      	bhi.n	8845e <_malloc_r+0x52a>
   88452:	0c9a      	lsrs	r2, r3, #18
   88454:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   88458:	00c9      	lsls	r1, r1, #3
   8845a:	327c      	adds	r2, #124	; 0x7c
   8845c:	e716      	b.n	8828c <_malloc_r+0x358>
   8845e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   88462:	227e      	movs	r2, #126	; 0x7e
   88464:	e712      	b.n	8828c <_malloc_r+0x358>
   88466:	687b      	ldr	r3, [r7, #4]
   88468:	e780      	b.n	8836c <_malloc_r+0x438>
   8846a:	08f0      	lsrs	r0, r6, #3
   8846c:	f106 0308 	add.w	r3, r6, #8
   88470:	e60e      	b.n	88090 <_malloc_r+0x15c>
   88472:	bf00      	nop
   88474:	20070dd8 	.word	0x20070dd8

00088478 <memchr>:
   88478:	0783      	lsls	r3, r0, #30
   8847a:	b470      	push	{r4, r5, r6}
   8847c:	b2cd      	uxtb	r5, r1
   8847e:	d03d      	beq.n	884fc <memchr+0x84>
   88480:	1e54      	subs	r4, r2, #1
   88482:	b30a      	cbz	r2, 884c8 <memchr+0x50>
   88484:	7803      	ldrb	r3, [r0, #0]
   88486:	42ab      	cmp	r3, r5
   88488:	d01f      	beq.n	884ca <memchr+0x52>
   8848a:	1c43      	adds	r3, r0, #1
   8848c:	e005      	b.n	8849a <memchr+0x22>
   8848e:	f114 34ff 	adds.w	r4, r4, #4294967295
   88492:	d319      	bcc.n	884c8 <memchr+0x50>
   88494:	7802      	ldrb	r2, [r0, #0]
   88496:	42aa      	cmp	r2, r5
   88498:	d017      	beq.n	884ca <memchr+0x52>
   8849a:	f013 0f03 	tst.w	r3, #3
   8849e:	4618      	mov	r0, r3
   884a0:	f103 0301 	add.w	r3, r3, #1
   884a4:	d1f3      	bne.n	8848e <memchr+0x16>
   884a6:	2c03      	cmp	r4, #3
   884a8:	d811      	bhi.n	884ce <memchr+0x56>
   884aa:	b34c      	cbz	r4, 88500 <memchr+0x88>
   884ac:	7803      	ldrb	r3, [r0, #0]
   884ae:	42ab      	cmp	r3, r5
   884b0:	d00b      	beq.n	884ca <memchr+0x52>
   884b2:	4404      	add	r4, r0
   884b4:	1c43      	adds	r3, r0, #1
   884b6:	e002      	b.n	884be <memchr+0x46>
   884b8:	7802      	ldrb	r2, [r0, #0]
   884ba:	42aa      	cmp	r2, r5
   884bc:	d005      	beq.n	884ca <memchr+0x52>
   884be:	429c      	cmp	r4, r3
   884c0:	4618      	mov	r0, r3
   884c2:	f103 0301 	add.w	r3, r3, #1
   884c6:	d1f7      	bne.n	884b8 <memchr+0x40>
   884c8:	2000      	movs	r0, #0
   884ca:	bc70      	pop	{r4, r5, r6}
   884cc:	4770      	bx	lr
   884ce:	0209      	lsls	r1, r1, #8
   884d0:	b289      	uxth	r1, r1
   884d2:	4329      	orrs	r1, r5
   884d4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   884d8:	6803      	ldr	r3, [r0, #0]
   884da:	4606      	mov	r6, r0
   884dc:	404b      	eors	r3, r1
   884de:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   884e2:	ea22 0303 	bic.w	r3, r2, r3
   884e6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   884ea:	f100 0004 	add.w	r0, r0, #4
   884ee:	d103      	bne.n	884f8 <memchr+0x80>
   884f0:	3c04      	subs	r4, #4
   884f2:	2c03      	cmp	r4, #3
   884f4:	d8f0      	bhi.n	884d8 <memchr+0x60>
   884f6:	e7d8      	b.n	884aa <memchr+0x32>
   884f8:	4630      	mov	r0, r6
   884fa:	e7d7      	b.n	884ac <memchr+0x34>
   884fc:	4614      	mov	r4, r2
   884fe:	e7d2      	b.n	884a6 <memchr+0x2e>
   88500:	4620      	mov	r0, r4
   88502:	e7e2      	b.n	884ca <memchr+0x52>

00088504 <memcpy>:
   88504:	4684      	mov	ip, r0
   88506:	ea41 0300 	orr.w	r3, r1, r0
   8850a:	f013 0303 	ands.w	r3, r3, #3
   8850e:	d149      	bne.n	885a4 <memcpy+0xa0>
   88510:	3a40      	subs	r2, #64	; 0x40
   88512:	d323      	bcc.n	8855c <memcpy+0x58>
   88514:	680b      	ldr	r3, [r1, #0]
   88516:	6003      	str	r3, [r0, #0]
   88518:	684b      	ldr	r3, [r1, #4]
   8851a:	6043      	str	r3, [r0, #4]
   8851c:	688b      	ldr	r3, [r1, #8]
   8851e:	6083      	str	r3, [r0, #8]
   88520:	68cb      	ldr	r3, [r1, #12]
   88522:	60c3      	str	r3, [r0, #12]
   88524:	690b      	ldr	r3, [r1, #16]
   88526:	6103      	str	r3, [r0, #16]
   88528:	694b      	ldr	r3, [r1, #20]
   8852a:	6143      	str	r3, [r0, #20]
   8852c:	698b      	ldr	r3, [r1, #24]
   8852e:	6183      	str	r3, [r0, #24]
   88530:	69cb      	ldr	r3, [r1, #28]
   88532:	61c3      	str	r3, [r0, #28]
   88534:	6a0b      	ldr	r3, [r1, #32]
   88536:	6203      	str	r3, [r0, #32]
   88538:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8853a:	6243      	str	r3, [r0, #36]	; 0x24
   8853c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8853e:	6283      	str	r3, [r0, #40]	; 0x28
   88540:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   88542:	62c3      	str	r3, [r0, #44]	; 0x2c
   88544:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   88546:	6303      	str	r3, [r0, #48]	; 0x30
   88548:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8854a:	6343      	str	r3, [r0, #52]	; 0x34
   8854c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8854e:	6383      	str	r3, [r0, #56]	; 0x38
   88550:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   88552:	63c3      	str	r3, [r0, #60]	; 0x3c
   88554:	3040      	adds	r0, #64	; 0x40
   88556:	3140      	adds	r1, #64	; 0x40
   88558:	3a40      	subs	r2, #64	; 0x40
   8855a:	d2db      	bcs.n	88514 <memcpy+0x10>
   8855c:	3230      	adds	r2, #48	; 0x30
   8855e:	d30b      	bcc.n	88578 <memcpy+0x74>
   88560:	680b      	ldr	r3, [r1, #0]
   88562:	6003      	str	r3, [r0, #0]
   88564:	684b      	ldr	r3, [r1, #4]
   88566:	6043      	str	r3, [r0, #4]
   88568:	688b      	ldr	r3, [r1, #8]
   8856a:	6083      	str	r3, [r0, #8]
   8856c:	68cb      	ldr	r3, [r1, #12]
   8856e:	60c3      	str	r3, [r0, #12]
   88570:	3010      	adds	r0, #16
   88572:	3110      	adds	r1, #16
   88574:	3a10      	subs	r2, #16
   88576:	d2f3      	bcs.n	88560 <memcpy+0x5c>
   88578:	320c      	adds	r2, #12
   8857a:	d305      	bcc.n	88588 <memcpy+0x84>
   8857c:	f851 3b04 	ldr.w	r3, [r1], #4
   88580:	f840 3b04 	str.w	r3, [r0], #4
   88584:	3a04      	subs	r2, #4
   88586:	d2f9      	bcs.n	8857c <memcpy+0x78>
   88588:	3204      	adds	r2, #4
   8858a:	d008      	beq.n	8859e <memcpy+0x9a>
   8858c:	07d2      	lsls	r2, r2, #31
   8858e:	bf1c      	itt	ne
   88590:	f811 3b01 	ldrbne.w	r3, [r1], #1
   88594:	f800 3b01 	strbne.w	r3, [r0], #1
   88598:	d301      	bcc.n	8859e <memcpy+0x9a>
   8859a:	880b      	ldrh	r3, [r1, #0]
   8859c:	8003      	strh	r3, [r0, #0]
   8859e:	4660      	mov	r0, ip
   885a0:	4770      	bx	lr
   885a2:	bf00      	nop
   885a4:	2a08      	cmp	r2, #8
   885a6:	d313      	bcc.n	885d0 <memcpy+0xcc>
   885a8:	078b      	lsls	r3, r1, #30
   885aa:	d0b1      	beq.n	88510 <memcpy+0xc>
   885ac:	f010 0303 	ands.w	r3, r0, #3
   885b0:	d0ae      	beq.n	88510 <memcpy+0xc>
   885b2:	f1c3 0304 	rsb	r3, r3, #4
   885b6:	1ad2      	subs	r2, r2, r3
   885b8:	07db      	lsls	r3, r3, #31
   885ba:	bf1c      	itt	ne
   885bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   885c0:	f800 3b01 	strbne.w	r3, [r0], #1
   885c4:	d3a4      	bcc.n	88510 <memcpy+0xc>
   885c6:	f831 3b02 	ldrh.w	r3, [r1], #2
   885ca:	f820 3b02 	strh.w	r3, [r0], #2
   885ce:	e79f      	b.n	88510 <memcpy+0xc>
   885d0:	3a04      	subs	r2, #4
   885d2:	d3d9      	bcc.n	88588 <memcpy+0x84>
   885d4:	3a01      	subs	r2, #1
   885d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   885da:	f800 3b01 	strb.w	r3, [r0], #1
   885de:	d2f9      	bcs.n	885d4 <memcpy+0xd0>
   885e0:	780b      	ldrb	r3, [r1, #0]
   885e2:	7003      	strb	r3, [r0, #0]
   885e4:	784b      	ldrb	r3, [r1, #1]
   885e6:	7043      	strb	r3, [r0, #1]
   885e8:	788b      	ldrb	r3, [r1, #2]
   885ea:	7083      	strb	r3, [r0, #2]
   885ec:	4660      	mov	r0, ip
   885ee:	4770      	bx	lr

000885f0 <__malloc_lock>:
   885f0:	4801      	ldr	r0, [pc, #4]	; (885f8 <__malloc_lock+0x8>)
   885f2:	f7ff bc9b 	b.w	87f2c <__retarget_lock_acquire_recursive>
   885f6:	bf00      	nop
   885f8:	20070fec 	.word	0x20070fec

000885fc <__malloc_unlock>:
   885fc:	4801      	ldr	r0, [pc, #4]	; (88604 <__malloc_unlock+0x8>)
   885fe:	f7ff bc97 	b.w	87f30 <__retarget_lock_release_recursive>
   88602:	bf00      	nop
   88604:	20070fec 	.word	0x20070fec

00088608 <_Balloc>:
   88608:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8860a:	b570      	push	{r4, r5, r6, lr}
   8860c:	4605      	mov	r5, r0
   8860e:	460c      	mov	r4, r1
   88610:	b14b      	cbz	r3, 88626 <_Balloc+0x1e>
   88612:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   88616:	b180      	cbz	r0, 8863a <_Balloc+0x32>
   88618:	6802      	ldr	r2, [r0, #0]
   8861a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8861e:	2300      	movs	r3, #0
   88620:	6103      	str	r3, [r0, #16]
   88622:	60c3      	str	r3, [r0, #12]
   88624:	bd70      	pop	{r4, r5, r6, pc}
   88626:	2221      	movs	r2, #33	; 0x21
   88628:	2104      	movs	r1, #4
   8862a:	f000 fbdb 	bl	88de4 <_calloc_r>
   8862e:	64e8      	str	r0, [r5, #76]	; 0x4c
   88630:	4603      	mov	r3, r0
   88632:	2800      	cmp	r0, #0
   88634:	d1ed      	bne.n	88612 <_Balloc+0xa>
   88636:	2000      	movs	r0, #0
   88638:	bd70      	pop	{r4, r5, r6, pc}
   8863a:	2101      	movs	r1, #1
   8863c:	fa01 f604 	lsl.w	r6, r1, r4
   88640:	1d72      	adds	r2, r6, #5
   88642:	4628      	mov	r0, r5
   88644:	0092      	lsls	r2, r2, #2
   88646:	f000 fbcd 	bl	88de4 <_calloc_r>
   8864a:	2800      	cmp	r0, #0
   8864c:	d0f3      	beq.n	88636 <_Balloc+0x2e>
   8864e:	6044      	str	r4, [r0, #4]
   88650:	6086      	str	r6, [r0, #8]
   88652:	e7e4      	b.n	8861e <_Balloc+0x16>

00088654 <_Bfree>:
   88654:	b131      	cbz	r1, 88664 <_Bfree+0x10>
   88656:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88658:	684a      	ldr	r2, [r1, #4]
   8865a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8865e:	6008      	str	r0, [r1, #0]
   88660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   88664:	4770      	bx	lr
   88666:	bf00      	nop

00088668 <__multadd>:
   88668:	b5f0      	push	{r4, r5, r6, r7, lr}
   8866a:	460c      	mov	r4, r1
   8866c:	4605      	mov	r5, r0
   8866e:	f04f 0e00 	mov.w	lr, #0
   88672:	690e      	ldr	r6, [r1, #16]
   88674:	b083      	sub	sp, #12
   88676:	f101 0714 	add.w	r7, r1, #20
   8867a:	6838      	ldr	r0, [r7, #0]
   8867c:	f10e 0e01 	add.w	lr, lr, #1
   88680:	b281      	uxth	r1, r0
   88682:	fb02 3301 	mla	r3, r2, r1, r3
   88686:	0c01      	lsrs	r1, r0, #16
   88688:	0c18      	lsrs	r0, r3, #16
   8868a:	fb02 0101 	mla	r1, r2, r1, r0
   8868e:	b29b      	uxth	r3, r3
   88690:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   88694:	4576      	cmp	r6, lr
   88696:	f847 3b04 	str.w	r3, [r7], #4
   8869a:	ea4f 4311 	mov.w	r3, r1, lsr #16
   8869e:	dcec      	bgt.n	8867a <__multadd+0x12>
   886a0:	b13b      	cbz	r3, 886b2 <__multadd+0x4a>
   886a2:	68a2      	ldr	r2, [r4, #8]
   886a4:	4296      	cmp	r6, r2
   886a6:	da07      	bge.n	886b8 <__multadd+0x50>
   886a8:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   886ac:	3601      	adds	r6, #1
   886ae:	6153      	str	r3, [r2, #20]
   886b0:	6126      	str	r6, [r4, #16]
   886b2:	4620      	mov	r0, r4
   886b4:	b003      	add	sp, #12
   886b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   886b8:	6861      	ldr	r1, [r4, #4]
   886ba:	4628      	mov	r0, r5
   886bc:	3101      	adds	r1, #1
   886be:	9301      	str	r3, [sp, #4]
   886c0:	f7ff ffa2 	bl	88608 <_Balloc>
   886c4:	4607      	mov	r7, r0
   886c6:	6922      	ldr	r2, [r4, #16]
   886c8:	f104 010c 	add.w	r1, r4, #12
   886cc:	3202      	adds	r2, #2
   886ce:	0092      	lsls	r2, r2, #2
   886d0:	300c      	adds	r0, #12
   886d2:	f7ff ff17 	bl	88504 <memcpy>
   886d6:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   886d8:	6861      	ldr	r1, [r4, #4]
   886da:	9b01      	ldr	r3, [sp, #4]
   886dc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   886e0:	6020      	str	r0, [r4, #0]
   886e2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   886e6:	463c      	mov	r4, r7
   886e8:	e7de      	b.n	886a8 <__multadd+0x40>
   886ea:	bf00      	nop

000886ec <__hi0bits>:
   886ec:	0c02      	lsrs	r2, r0, #16
   886ee:	0412      	lsls	r2, r2, #16
   886f0:	4603      	mov	r3, r0
   886f2:	b9b2      	cbnz	r2, 88722 <__hi0bits+0x36>
   886f4:	0403      	lsls	r3, r0, #16
   886f6:	2010      	movs	r0, #16
   886f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   886fc:	bf04      	itt	eq
   886fe:	021b      	lsleq	r3, r3, #8
   88700:	3008      	addeq	r0, #8
   88702:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   88706:	bf04      	itt	eq
   88708:	011b      	lsleq	r3, r3, #4
   8870a:	3004      	addeq	r0, #4
   8870c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   88710:	bf04      	itt	eq
   88712:	009b      	lsleq	r3, r3, #2
   88714:	3002      	addeq	r0, #2
   88716:	2b00      	cmp	r3, #0
   88718:	db02      	blt.n	88720 <__hi0bits+0x34>
   8871a:	005b      	lsls	r3, r3, #1
   8871c:	d403      	bmi.n	88726 <__hi0bits+0x3a>
   8871e:	2020      	movs	r0, #32
   88720:	4770      	bx	lr
   88722:	2000      	movs	r0, #0
   88724:	e7e8      	b.n	886f8 <__hi0bits+0xc>
   88726:	3001      	adds	r0, #1
   88728:	4770      	bx	lr
   8872a:	bf00      	nop

0008872c <__lo0bits>:
   8872c:	6803      	ldr	r3, [r0, #0]
   8872e:	4601      	mov	r1, r0
   88730:	f013 0207 	ands.w	r2, r3, #7
   88734:	d007      	beq.n	88746 <__lo0bits+0x1a>
   88736:	07da      	lsls	r2, r3, #31
   88738:	d421      	bmi.n	8877e <__lo0bits+0x52>
   8873a:	0798      	lsls	r0, r3, #30
   8873c:	d421      	bmi.n	88782 <__lo0bits+0x56>
   8873e:	089b      	lsrs	r3, r3, #2
   88740:	600b      	str	r3, [r1, #0]
   88742:	2002      	movs	r0, #2
   88744:	4770      	bx	lr
   88746:	b298      	uxth	r0, r3
   88748:	b198      	cbz	r0, 88772 <__lo0bits+0x46>
   8874a:	4610      	mov	r0, r2
   8874c:	f013 0fff 	tst.w	r3, #255	; 0xff
   88750:	bf04      	itt	eq
   88752:	0a1b      	lsreq	r3, r3, #8
   88754:	3008      	addeq	r0, #8
   88756:	071a      	lsls	r2, r3, #28
   88758:	bf04      	itt	eq
   8875a:	091b      	lsreq	r3, r3, #4
   8875c:	3004      	addeq	r0, #4
   8875e:	079a      	lsls	r2, r3, #30
   88760:	bf04      	itt	eq
   88762:	089b      	lsreq	r3, r3, #2
   88764:	3002      	addeq	r0, #2
   88766:	07da      	lsls	r2, r3, #31
   88768:	d407      	bmi.n	8877a <__lo0bits+0x4e>
   8876a:	085b      	lsrs	r3, r3, #1
   8876c:	d104      	bne.n	88778 <__lo0bits+0x4c>
   8876e:	2020      	movs	r0, #32
   88770:	4770      	bx	lr
   88772:	0c1b      	lsrs	r3, r3, #16
   88774:	2010      	movs	r0, #16
   88776:	e7e9      	b.n	8874c <__lo0bits+0x20>
   88778:	3001      	adds	r0, #1
   8877a:	600b      	str	r3, [r1, #0]
   8877c:	4770      	bx	lr
   8877e:	2000      	movs	r0, #0
   88780:	4770      	bx	lr
   88782:	085b      	lsrs	r3, r3, #1
   88784:	600b      	str	r3, [r1, #0]
   88786:	2001      	movs	r0, #1
   88788:	4770      	bx	lr
   8878a:	bf00      	nop

0008878c <__i2b>:
   8878c:	b510      	push	{r4, lr}
   8878e:	460c      	mov	r4, r1
   88790:	2101      	movs	r1, #1
   88792:	f7ff ff39 	bl	88608 <_Balloc>
   88796:	2201      	movs	r2, #1
   88798:	6144      	str	r4, [r0, #20]
   8879a:	6102      	str	r2, [r0, #16]
   8879c:	bd10      	pop	{r4, pc}
   8879e:	bf00      	nop

000887a0 <__multiply>:
   887a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   887a4:	690c      	ldr	r4, [r1, #16]
   887a6:	6915      	ldr	r5, [r2, #16]
   887a8:	b083      	sub	sp, #12
   887aa:	42ac      	cmp	r4, r5
   887ac:	468b      	mov	fp, r1
   887ae:	4616      	mov	r6, r2
   887b0:	da04      	bge.n	887bc <__multiply+0x1c>
   887b2:	4622      	mov	r2, r4
   887b4:	46b3      	mov	fp, r6
   887b6:	462c      	mov	r4, r5
   887b8:	460e      	mov	r6, r1
   887ba:	4615      	mov	r5, r2
   887bc:	f8db 3008 	ldr.w	r3, [fp, #8]
   887c0:	eb04 0805 	add.w	r8, r4, r5
   887c4:	f8db 1004 	ldr.w	r1, [fp, #4]
   887c8:	4598      	cmp	r8, r3
   887ca:	bfc8      	it	gt
   887cc:	3101      	addgt	r1, #1
   887ce:	f7ff ff1b 	bl	88608 <_Balloc>
   887d2:	f100 0914 	add.w	r9, r0, #20
   887d6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   887da:	45d1      	cmp	r9, sl
   887dc:	9000      	str	r0, [sp, #0]
   887de:	d205      	bcs.n	887ec <__multiply+0x4c>
   887e0:	464b      	mov	r3, r9
   887e2:	2100      	movs	r1, #0
   887e4:	f843 1b04 	str.w	r1, [r3], #4
   887e8:	459a      	cmp	sl, r3
   887ea:	d8fb      	bhi.n	887e4 <__multiply+0x44>
   887ec:	f106 0c14 	add.w	ip, r6, #20
   887f0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   887f4:	f10b 0b14 	add.w	fp, fp, #20
   887f8:	459c      	cmp	ip, r3
   887fa:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   887fe:	d24b      	bcs.n	88898 <__multiply+0xf8>
   88800:	f8cd a004 	str.w	sl, [sp, #4]
   88804:	469a      	mov	sl, r3
   88806:	f8dc 5000 	ldr.w	r5, [ip]
   8880a:	b2af      	uxth	r7, r5
   8880c:	b1e7      	cbz	r7, 88848 <__multiply+0xa8>
   8880e:	464d      	mov	r5, r9
   88810:	465e      	mov	r6, fp
   88812:	2100      	movs	r1, #0
   88814:	f856 2b04 	ldr.w	r2, [r6], #4
   88818:	6828      	ldr	r0, [r5, #0]
   8881a:	b293      	uxth	r3, r2
   8881c:	b284      	uxth	r4, r0
   8881e:	0c12      	lsrs	r2, r2, #16
   88820:	fb07 4303 	mla	r3, r7, r3, r4
   88824:	0c00      	lsrs	r0, r0, #16
   88826:	fb07 0202 	mla	r2, r7, r2, r0
   8882a:	440b      	add	r3, r1
   8882c:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   88830:	b29b      	uxth	r3, r3
   88832:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   88836:	45b6      	cmp	lr, r6
   88838:	f845 3b04 	str.w	r3, [r5], #4
   8883c:	ea4f 4111 	mov.w	r1, r1, lsr #16
   88840:	d8e8      	bhi.n	88814 <__multiply+0x74>
   88842:	6029      	str	r1, [r5, #0]
   88844:	f8dc 5000 	ldr.w	r5, [ip]
   88848:	0c2d      	lsrs	r5, r5, #16
   8884a:	d01d      	beq.n	88888 <__multiply+0xe8>
   8884c:	f8d9 3000 	ldr.w	r3, [r9]
   88850:	4648      	mov	r0, r9
   88852:	461c      	mov	r4, r3
   88854:	4659      	mov	r1, fp
   88856:	2200      	movs	r2, #0
   88858:	880e      	ldrh	r6, [r1, #0]
   8885a:	0c24      	lsrs	r4, r4, #16
   8885c:	fb05 4406 	mla	r4, r5, r6, r4
   88860:	b29b      	uxth	r3, r3
   88862:	4422      	add	r2, r4
   88864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88868:	f840 3b04 	str.w	r3, [r0], #4
   8886c:	f851 3b04 	ldr.w	r3, [r1], #4
   88870:	6804      	ldr	r4, [r0, #0]
   88872:	0c1b      	lsrs	r3, r3, #16
   88874:	b2a6      	uxth	r6, r4
   88876:	fb05 6303 	mla	r3, r5, r3, r6
   8887a:	458e      	cmp	lr, r1
   8887c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   88880:	ea4f 4213 	mov.w	r2, r3, lsr #16
   88884:	d8e8      	bhi.n	88858 <__multiply+0xb8>
   88886:	6003      	str	r3, [r0, #0]
   88888:	f10c 0c04 	add.w	ip, ip, #4
   8888c:	45e2      	cmp	sl, ip
   8888e:	f109 0904 	add.w	r9, r9, #4
   88892:	d8b8      	bhi.n	88806 <__multiply+0x66>
   88894:	f8dd a004 	ldr.w	sl, [sp, #4]
   88898:	f1b8 0f00 	cmp.w	r8, #0
   8889c:	dd0b      	ble.n	888b6 <__multiply+0x116>
   8889e:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   888a2:	f1aa 0a04 	sub.w	sl, sl, #4
   888a6:	b11b      	cbz	r3, 888b0 <__multiply+0x110>
   888a8:	e005      	b.n	888b6 <__multiply+0x116>
   888aa:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   888ae:	b913      	cbnz	r3, 888b6 <__multiply+0x116>
   888b0:	f1b8 0801 	subs.w	r8, r8, #1
   888b4:	d1f9      	bne.n	888aa <__multiply+0x10a>
   888b6:	9800      	ldr	r0, [sp, #0]
   888b8:	f8c0 8010 	str.w	r8, [r0, #16]
   888bc:	b003      	add	sp, #12
   888be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   888c2:	bf00      	nop

000888c4 <__pow5mult>:
   888c4:	f012 0303 	ands.w	r3, r2, #3
   888c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   888cc:	4614      	mov	r4, r2
   888ce:	4607      	mov	r7, r0
   888d0:	d12e      	bne.n	88930 <__pow5mult+0x6c>
   888d2:	460d      	mov	r5, r1
   888d4:	10a4      	asrs	r4, r4, #2
   888d6:	d01c      	beq.n	88912 <__pow5mult+0x4e>
   888d8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   888da:	b396      	cbz	r6, 88942 <__pow5mult+0x7e>
   888dc:	07e3      	lsls	r3, r4, #31
   888de:	f04f 0800 	mov.w	r8, #0
   888e2:	d406      	bmi.n	888f2 <__pow5mult+0x2e>
   888e4:	1064      	asrs	r4, r4, #1
   888e6:	d014      	beq.n	88912 <__pow5mult+0x4e>
   888e8:	6830      	ldr	r0, [r6, #0]
   888ea:	b1a8      	cbz	r0, 88918 <__pow5mult+0x54>
   888ec:	4606      	mov	r6, r0
   888ee:	07e3      	lsls	r3, r4, #31
   888f0:	d5f8      	bpl.n	888e4 <__pow5mult+0x20>
   888f2:	4632      	mov	r2, r6
   888f4:	4629      	mov	r1, r5
   888f6:	4638      	mov	r0, r7
   888f8:	f7ff ff52 	bl	887a0 <__multiply>
   888fc:	b1b5      	cbz	r5, 8892c <__pow5mult+0x68>
   888fe:	686a      	ldr	r2, [r5, #4]
   88900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   88902:	1064      	asrs	r4, r4, #1
   88904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88908:	6029      	str	r1, [r5, #0]
   8890a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8890e:	4605      	mov	r5, r0
   88910:	d1ea      	bne.n	888e8 <__pow5mult+0x24>
   88912:	4628      	mov	r0, r5
   88914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88918:	4632      	mov	r2, r6
   8891a:	4631      	mov	r1, r6
   8891c:	4638      	mov	r0, r7
   8891e:	f7ff ff3f 	bl	887a0 <__multiply>
   88922:	6030      	str	r0, [r6, #0]
   88924:	f8c0 8000 	str.w	r8, [r0]
   88928:	4606      	mov	r6, r0
   8892a:	e7e0      	b.n	888ee <__pow5mult+0x2a>
   8892c:	4605      	mov	r5, r0
   8892e:	e7d9      	b.n	888e4 <__pow5mult+0x20>
   88930:	4a0b      	ldr	r2, [pc, #44]	; (88960 <__pow5mult+0x9c>)
   88932:	3b01      	subs	r3, #1
   88934:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   88938:	2300      	movs	r3, #0
   8893a:	f7ff fe95 	bl	88668 <__multadd>
   8893e:	4605      	mov	r5, r0
   88940:	e7c8      	b.n	888d4 <__pow5mult+0x10>
   88942:	2101      	movs	r1, #1
   88944:	4638      	mov	r0, r7
   88946:	f7ff fe5f 	bl	88608 <_Balloc>
   8894a:	f240 2171 	movw	r1, #625	; 0x271
   8894e:	2201      	movs	r2, #1
   88950:	2300      	movs	r3, #0
   88952:	6141      	str	r1, [r0, #20]
   88954:	6102      	str	r2, [r0, #16]
   88956:	4606      	mov	r6, r0
   88958:	64b8      	str	r0, [r7, #72]	; 0x48
   8895a:	6003      	str	r3, [r0, #0]
   8895c:	e7be      	b.n	888dc <__pow5mult+0x18>
   8895e:	bf00      	nop
   88960:	00089cc8 	.word	0x00089cc8

00088964 <__lshift>:
   88964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88968:	690b      	ldr	r3, [r1, #16]
   8896a:	1154      	asrs	r4, r2, #5
   8896c:	eb04 0803 	add.w	r8, r4, r3
   88970:	688b      	ldr	r3, [r1, #8]
   88972:	f108 0501 	add.w	r5, r8, #1
   88976:	429d      	cmp	r5, r3
   88978:	460e      	mov	r6, r1
   8897a:	4691      	mov	r9, r2
   8897c:	4607      	mov	r7, r0
   8897e:	6849      	ldr	r1, [r1, #4]
   88980:	dd04      	ble.n	8898c <__lshift+0x28>
   88982:	005b      	lsls	r3, r3, #1
   88984:	429d      	cmp	r5, r3
   88986:	f101 0101 	add.w	r1, r1, #1
   8898a:	dcfa      	bgt.n	88982 <__lshift+0x1e>
   8898c:	4638      	mov	r0, r7
   8898e:	f7ff fe3b 	bl	88608 <_Balloc>
   88992:	2c00      	cmp	r4, #0
   88994:	f100 0314 	add.w	r3, r0, #20
   88998:	dd06      	ble.n	889a8 <__lshift+0x44>
   8899a:	2100      	movs	r1, #0
   8899c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   889a0:	f843 1b04 	str.w	r1, [r3], #4
   889a4:	429a      	cmp	r2, r3
   889a6:	d1fb      	bne.n	889a0 <__lshift+0x3c>
   889a8:	6934      	ldr	r4, [r6, #16]
   889aa:	f106 0114 	add.w	r1, r6, #20
   889ae:	f019 091f 	ands.w	r9, r9, #31
   889b2:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   889b6:	d01d      	beq.n	889f4 <__lshift+0x90>
   889b8:	2200      	movs	r2, #0
   889ba:	f1c9 0c20 	rsb	ip, r9, #32
   889be:	680c      	ldr	r4, [r1, #0]
   889c0:	fa04 f409 	lsl.w	r4, r4, r9
   889c4:	4314      	orrs	r4, r2
   889c6:	f843 4b04 	str.w	r4, [r3], #4
   889ca:	f851 2b04 	ldr.w	r2, [r1], #4
   889ce:	458e      	cmp	lr, r1
   889d0:	fa22 f20c 	lsr.w	r2, r2, ip
   889d4:	d8f3      	bhi.n	889be <__lshift+0x5a>
   889d6:	601a      	str	r2, [r3, #0]
   889d8:	b10a      	cbz	r2, 889de <__lshift+0x7a>
   889da:	f108 0502 	add.w	r5, r8, #2
   889de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   889e0:	6872      	ldr	r2, [r6, #4]
   889e2:	3d01      	subs	r5, #1
   889e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   889e8:	6105      	str	r5, [r0, #16]
   889ea:	6031      	str	r1, [r6, #0]
   889ec:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   889f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   889f4:	3b04      	subs	r3, #4
   889f6:	f851 2b04 	ldr.w	r2, [r1], #4
   889fa:	458e      	cmp	lr, r1
   889fc:	f843 2f04 	str.w	r2, [r3, #4]!
   88a00:	d8f9      	bhi.n	889f6 <__lshift+0x92>
   88a02:	e7ec      	b.n	889de <__lshift+0x7a>

00088a04 <__mcmp>:
   88a04:	b430      	push	{r4, r5}
   88a06:	690b      	ldr	r3, [r1, #16]
   88a08:	4605      	mov	r5, r0
   88a0a:	6900      	ldr	r0, [r0, #16]
   88a0c:	1ac0      	subs	r0, r0, r3
   88a0e:	d10f      	bne.n	88a30 <__mcmp+0x2c>
   88a10:	009b      	lsls	r3, r3, #2
   88a12:	3514      	adds	r5, #20
   88a14:	3114      	adds	r1, #20
   88a16:	4419      	add	r1, r3
   88a18:	442b      	add	r3, r5
   88a1a:	e001      	b.n	88a20 <__mcmp+0x1c>
   88a1c:	429d      	cmp	r5, r3
   88a1e:	d207      	bcs.n	88a30 <__mcmp+0x2c>
   88a20:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   88a24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88a28:	4294      	cmp	r4, r2
   88a2a:	d0f7      	beq.n	88a1c <__mcmp+0x18>
   88a2c:	d302      	bcc.n	88a34 <__mcmp+0x30>
   88a2e:	2001      	movs	r0, #1
   88a30:	bc30      	pop	{r4, r5}
   88a32:	4770      	bx	lr
   88a34:	f04f 30ff 	mov.w	r0, #4294967295
   88a38:	e7fa      	b.n	88a30 <__mcmp+0x2c>
   88a3a:	bf00      	nop

00088a3c <__mdiff>:
   88a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88a40:	690c      	ldr	r4, [r1, #16]
   88a42:	4689      	mov	r9, r1
   88a44:	6911      	ldr	r1, [r2, #16]
   88a46:	4692      	mov	sl, r2
   88a48:	1a64      	subs	r4, r4, r1
   88a4a:	2c00      	cmp	r4, #0
   88a4c:	d117      	bne.n	88a7e <__mdiff+0x42>
   88a4e:	0089      	lsls	r1, r1, #2
   88a50:	f109 0714 	add.w	r7, r9, #20
   88a54:	f102 0614 	add.w	r6, r2, #20
   88a58:	187b      	adds	r3, r7, r1
   88a5a:	4431      	add	r1, r6
   88a5c:	e001      	b.n	88a62 <__mdiff+0x26>
   88a5e:	429f      	cmp	r7, r3
   88a60:	d265      	bcs.n	88b2e <__mdiff+0xf2>
   88a62:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   88a66:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88a6a:	4295      	cmp	r5, r2
   88a6c:	d0f7      	beq.n	88a5e <__mdiff+0x22>
   88a6e:	d267      	bcs.n	88b40 <__mdiff+0x104>
   88a70:	464b      	mov	r3, r9
   88a72:	46bb      	mov	fp, r7
   88a74:	46d1      	mov	r9, sl
   88a76:	4637      	mov	r7, r6
   88a78:	469a      	mov	sl, r3
   88a7a:	2401      	movs	r4, #1
   88a7c:	e005      	b.n	88a8a <__mdiff+0x4e>
   88a7e:	db61      	blt.n	88b44 <__mdiff+0x108>
   88a80:	2400      	movs	r4, #0
   88a82:	f109 0714 	add.w	r7, r9, #20
   88a86:	f10a 0b14 	add.w	fp, sl, #20
   88a8a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   88a8e:	f7ff fdbb 	bl	88608 <_Balloc>
   88a92:	465d      	mov	r5, fp
   88a94:	f04f 0800 	mov.w	r8, #0
   88a98:	f8d9 e010 	ldr.w	lr, [r9, #16]
   88a9c:	f8da 3010 	ldr.w	r3, [sl, #16]
   88aa0:	463e      	mov	r6, r7
   88aa2:	60c4      	str	r4, [r0, #12]
   88aa4:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   88aa8:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   88aac:	f100 0414 	add.w	r4, r0, #20
   88ab0:	f856 9b04 	ldr.w	r9, [r6], #4
   88ab4:	f855 2b04 	ldr.w	r2, [r5], #4
   88ab8:	fa1f f389 	uxth.w	r3, r9
   88abc:	4443      	add	r3, r8
   88abe:	fa1f f882 	uxth.w	r8, r2
   88ac2:	0c12      	lsrs	r2, r2, #16
   88ac4:	eba3 0308 	sub.w	r3, r3, r8
   88ac8:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   88acc:	eb02 4223 	add.w	r2, r2, r3, asr #16
   88ad0:	b29b      	uxth	r3, r3
   88ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88ad6:	45ac      	cmp	ip, r5
   88ad8:	f844 3b04 	str.w	r3, [r4], #4
   88adc:	ea4f 4822 	mov.w	r8, r2, asr #16
   88ae0:	d8e6      	bhi.n	88ab0 <__mdiff+0x74>
   88ae2:	42b7      	cmp	r7, r6
   88ae4:	d917      	bls.n	88b16 <__mdiff+0xda>
   88ae6:	46a4      	mov	ip, r4
   88ae8:	4635      	mov	r5, r6
   88aea:	f855 3b04 	ldr.w	r3, [r5], #4
   88aee:	b299      	uxth	r1, r3
   88af0:	4441      	add	r1, r8
   88af2:	140a      	asrs	r2, r1, #16
   88af4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   88af8:	b289      	uxth	r1, r1
   88afa:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   88afe:	42af      	cmp	r7, r5
   88b00:	f84c 3b04 	str.w	r3, [ip], #4
   88b04:	ea4f 4822 	mov.w	r8, r2, asr #16
   88b08:	d8ef      	bhi.n	88aea <__mdiff+0xae>
   88b0a:	43f6      	mvns	r6, r6
   88b0c:	4437      	add	r7, r6
   88b0e:	f027 0703 	bic.w	r7, r7, #3
   88b12:	3704      	adds	r7, #4
   88b14:	443c      	add	r4, r7
   88b16:	3c04      	subs	r4, #4
   88b18:	b92b      	cbnz	r3, 88b26 <__mdiff+0xea>
   88b1a:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   88b1e:	f10e 3eff 	add.w	lr, lr, #4294967295
   88b22:	2b00      	cmp	r3, #0
   88b24:	d0f9      	beq.n	88b1a <__mdiff+0xde>
   88b26:	f8c0 e010 	str.w	lr, [r0, #16]
   88b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88b2e:	2100      	movs	r1, #0
   88b30:	f7ff fd6a 	bl	88608 <_Balloc>
   88b34:	2201      	movs	r2, #1
   88b36:	2300      	movs	r3, #0
   88b38:	6102      	str	r2, [r0, #16]
   88b3a:	6143      	str	r3, [r0, #20]
   88b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88b40:	46b3      	mov	fp, r6
   88b42:	e7a2      	b.n	88a8a <__mdiff+0x4e>
   88b44:	464b      	mov	r3, r9
   88b46:	f109 0b14 	add.w	fp, r9, #20
   88b4a:	f102 0714 	add.w	r7, r2, #20
   88b4e:	4691      	mov	r9, r2
   88b50:	2401      	movs	r4, #1
   88b52:	469a      	mov	sl, r3
   88b54:	e799      	b.n	88a8a <__mdiff+0x4e>
   88b56:	bf00      	nop

00088b58 <__d2b>:
   88b58:	b5f0      	push	{r4, r5, r6, r7, lr}
   88b5a:	2101      	movs	r1, #1
   88b5c:	b083      	sub	sp, #12
   88b5e:	461c      	mov	r4, r3
   88b60:	f3c3 550a 	ubfx	r5, r3, #20, #11
   88b64:	4616      	mov	r6, r2
   88b66:	f7ff fd4f 	bl	88608 <_Balloc>
   88b6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   88b6e:	4607      	mov	r7, r0
   88b70:	b10d      	cbz	r5, 88b76 <__d2b+0x1e>
   88b72:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   88b76:	9401      	str	r4, [sp, #4]
   88b78:	b306      	cbz	r6, 88bbc <__d2b+0x64>
   88b7a:	a802      	add	r0, sp, #8
   88b7c:	f840 6d08 	str.w	r6, [r0, #-8]!
   88b80:	f7ff fdd4 	bl	8872c <__lo0bits>
   88b84:	2800      	cmp	r0, #0
   88b86:	d130      	bne.n	88bea <__d2b+0x92>
   88b88:	e89d 000c 	ldmia.w	sp, {r2, r3}
   88b8c:	617a      	str	r2, [r7, #20]
   88b8e:	2b00      	cmp	r3, #0
   88b90:	bf0c      	ite	eq
   88b92:	2101      	moveq	r1, #1
   88b94:	2102      	movne	r1, #2
   88b96:	61bb      	str	r3, [r7, #24]
   88b98:	6139      	str	r1, [r7, #16]
   88b9a:	b9d5      	cbnz	r5, 88bd2 <__d2b+0x7a>
   88b9c:	9a08      	ldr	r2, [sp, #32]
   88b9e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   88ba2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   88ba6:	6010      	str	r0, [r2, #0]
   88ba8:	6918      	ldr	r0, [r3, #16]
   88baa:	f7ff fd9f 	bl	886ec <__hi0bits>
   88bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88bb0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   88bb4:	6018      	str	r0, [r3, #0]
   88bb6:	4638      	mov	r0, r7
   88bb8:	b003      	add	sp, #12
   88bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88bbc:	a801      	add	r0, sp, #4
   88bbe:	f7ff fdb5 	bl	8872c <__lo0bits>
   88bc2:	2201      	movs	r2, #1
   88bc4:	9b01      	ldr	r3, [sp, #4]
   88bc6:	4611      	mov	r1, r2
   88bc8:	3020      	adds	r0, #32
   88bca:	613a      	str	r2, [r7, #16]
   88bcc:	617b      	str	r3, [r7, #20]
   88bce:	2d00      	cmp	r5, #0
   88bd0:	d0e4      	beq.n	88b9c <__d2b+0x44>
   88bd2:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   88bd6:	9a08      	ldr	r2, [sp, #32]
   88bd8:	4403      	add	r3, r0
   88bda:	6013      	str	r3, [r2, #0]
   88bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88bde:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   88be2:	6018      	str	r0, [r3, #0]
   88be4:	4638      	mov	r0, r7
   88be6:	b003      	add	sp, #12
   88be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88bea:	9b01      	ldr	r3, [sp, #4]
   88bec:	f1c0 0220 	rsb	r2, r0, #32
   88bf0:	9900      	ldr	r1, [sp, #0]
   88bf2:	fa03 f202 	lsl.w	r2, r3, r2
   88bf6:	430a      	orrs	r2, r1
   88bf8:	40c3      	lsrs	r3, r0
   88bfa:	9301      	str	r3, [sp, #4]
   88bfc:	617a      	str	r2, [r7, #20]
   88bfe:	e7c6      	b.n	88b8e <__d2b+0x36>

00088c00 <_sbrk_r>:
   88c00:	b538      	push	{r3, r4, r5, lr}
   88c02:	2300      	movs	r3, #0
   88c04:	4c06      	ldr	r4, [pc, #24]	; (88c20 <_sbrk_r+0x20>)
   88c06:	4605      	mov	r5, r0
   88c08:	4608      	mov	r0, r1
   88c0a:	6023      	str	r3, [r4, #0]
   88c0c:	f7fb fd0c 	bl	84628 <_sbrk>
   88c10:	1c43      	adds	r3, r0, #1
   88c12:	d000      	beq.n	88c16 <_sbrk_r+0x16>
   88c14:	bd38      	pop	{r3, r4, r5, pc}
   88c16:	6823      	ldr	r3, [r4, #0]
   88c18:	2b00      	cmp	r3, #0
   88c1a:	d0fb      	beq.n	88c14 <_sbrk_r+0x14>
   88c1c:	602b      	str	r3, [r5, #0]
   88c1e:	bd38      	pop	{r3, r4, r5, pc}
   88c20:	20071000 	.word	0x20071000

00088c24 <__ssprint_r>:
   88c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88c28:	6893      	ldr	r3, [r2, #8]
   88c2a:	b083      	sub	sp, #12
   88c2c:	4690      	mov	r8, r2
   88c2e:	2b00      	cmp	r3, #0
   88c30:	d070      	beq.n	88d14 <__ssprint_r+0xf0>
   88c32:	4682      	mov	sl, r0
   88c34:	460c      	mov	r4, r1
   88c36:	6817      	ldr	r7, [r2, #0]
   88c38:	688d      	ldr	r5, [r1, #8]
   88c3a:	6808      	ldr	r0, [r1, #0]
   88c3c:	e042      	b.n	88cc4 <__ssprint_r+0xa0>
   88c3e:	89a3      	ldrh	r3, [r4, #12]
   88c40:	f413 6f90 	tst.w	r3, #1152	; 0x480
   88c44:	d02e      	beq.n	88ca4 <__ssprint_r+0x80>
   88c46:	6965      	ldr	r5, [r4, #20]
   88c48:	6921      	ldr	r1, [r4, #16]
   88c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   88c4e:	eba0 0b01 	sub.w	fp, r0, r1
   88c52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   88c56:	f10b 0001 	add.w	r0, fp, #1
   88c5a:	106d      	asrs	r5, r5, #1
   88c5c:	4430      	add	r0, r6
   88c5e:	42a8      	cmp	r0, r5
   88c60:	462a      	mov	r2, r5
   88c62:	bf84      	itt	hi
   88c64:	4605      	movhi	r5, r0
   88c66:	462a      	movhi	r2, r5
   88c68:	055b      	lsls	r3, r3, #21
   88c6a:	d538      	bpl.n	88cde <__ssprint_r+0xba>
   88c6c:	4611      	mov	r1, r2
   88c6e:	4650      	mov	r0, sl
   88c70:	f7ff f960 	bl	87f34 <_malloc_r>
   88c74:	2800      	cmp	r0, #0
   88c76:	d03c      	beq.n	88cf2 <__ssprint_r+0xce>
   88c78:	465a      	mov	r2, fp
   88c7a:	6921      	ldr	r1, [r4, #16]
   88c7c:	9001      	str	r0, [sp, #4]
   88c7e:	f7ff fc41 	bl	88504 <memcpy>
   88c82:	89a2      	ldrh	r2, [r4, #12]
   88c84:	9b01      	ldr	r3, [sp, #4]
   88c86:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   88c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   88c8e:	81a2      	strh	r2, [r4, #12]
   88c90:	eba5 020b 	sub.w	r2, r5, fp
   88c94:	eb03 000b 	add.w	r0, r3, fp
   88c98:	6165      	str	r5, [r4, #20]
   88c9a:	46b3      	mov	fp, r6
   88c9c:	4635      	mov	r5, r6
   88c9e:	6123      	str	r3, [r4, #16]
   88ca0:	6020      	str	r0, [r4, #0]
   88ca2:	60a2      	str	r2, [r4, #8]
   88ca4:	465a      	mov	r2, fp
   88ca6:	4649      	mov	r1, r9
   88ca8:	f000 fa18 	bl	890dc <memmove>
   88cac:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88cb0:	68a2      	ldr	r2, [r4, #8]
   88cb2:	6820      	ldr	r0, [r4, #0]
   88cb4:	1b55      	subs	r5, r2, r5
   88cb6:	4458      	add	r0, fp
   88cb8:	1b9e      	subs	r6, r3, r6
   88cba:	60a5      	str	r5, [r4, #8]
   88cbc:	6020      	str	r0, [r4, #0]
   88cbe:	f8c8 6008 	str.w	r6, [r8, #8]
   88cc2:	b33e      	cbz	r6, 88d14 <__ssprint_r+0xf0>
   88cc4:	687e      	ldr	r6, [r7, #4]
   88cc6:	463b      	mov	r3, r7
   88cc8:	3708      	adds	r7, #8
   88cca:	2e00      	cmp	r6, #0
   88ccc:	d0fa      	beq.n	88cc4 <__ssprint_r+0xa0>
   88cce:	42ae      	cmp	r6, r5
   88cd0:	f8d3 9000 	ldr.w	r9, [r3]
   88cd4:	46ab      	mov	fp, r5
   88cd6:	d2b2      	bcs.n	88c3e <__ssprint_r+0x1a>
   88cd8:	4635      	mov	r5, r6
   88cda:	46b3      	mov	fp, r6
   88cdc:	e7e2      	b.n	88ca4 <__ssprint_r+0x80>
   88cde:	4650      	mov	r0, sl
   88ce0:	f000 fa60 	bl	891a4 <_realloc_r>
   88ce4:	4603      	mov	r3, r0
   88ce6:	2800      	cmp	r0, #0
   88ce8:	d1d2      	bne.n	88c90 <__ssprint_r+0x6c>
   88cea:	6921      	ldr	r1, [r4, #16]
   88cec:	4650      	mov	r0, sl
   88cee:	f000 f8f9 	bl	88ee4 <_free_r>
   88cf2:	230c      	movs	r3, #12
   88cf4:	2200      	movs	r2, #0
   88cf6:	f04f 30ff 	mov.w	r0, #4294967295
   88cfa:	f8ca 3000 	str.w	r3, [sl]
   88cfe:	89a3      	ldrh	r3, [r4, #12]
   88d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88d04:	81a3      	strh	r3, [r4, #12]
   88d06:	f8c8 2008 	str.w	r2, [r8, #8]
   88d0a:	f8c8 2004 	str.w	r2, [r8, #4]
   88d0e:	b003      	add	sp, #12
   88d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88d14:	2000      	movs	r0, #0
   88d16:	f8c8 0004 	str.w	r0, [r8, #4]
   88d1a:	b003      	add	sp, #12
   88d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00088d20 <__register_exitproc>:
   88d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88d24:	4d2c      	ldr	r5, [pc, #176]	; (88dd8 <__register_exitproc+0xb8>)
   88d26:	4606      	mov	r6, r0
   88d28:	6828      	ldr	r0, [r5, #0]
   88d2a:	4698      	mov	r8, r3
   88d2c:	460f      	mov	r7, r1
   88d2e:	4691      	mov	r9, r2
   88d30:	f7ff f8fc 	bl	87f2c <__retarget_lock_acquire_recursive>
   88d34:	4b29      	ldr	r3, [pc, #164]	; (88ddc <__register_exitproc+0xbc>)
   88d36:	681c      	ldr	r4, [r3, #0]
   88d38:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   88d3c:	2b00      	cmp	r3, #0
   88d3e:	d03e      	beq.n	88dbe <__register_exitproc+0x9e>
   88d40:	685a      	ldr	r2, [r3, #4]
   88d42:	2a1f      	cmp	r2, #31
   88d44:	dc1c      	bgt.n	88d80 <__register_exitproc+0x60>
   88d46:	f102 0e01 	add.w	lr, r2, #1
   88d4a:	b176      	cbz	r6, 88d6a <__register_exitproc+0x4a>
   88d4c:	2101      	movs	r1, #1
   88d4e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   88d52:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   88d56:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   88d5a:	4091      	lsls	r1, r2
   88d5c:	4308      	orrs	r0, r1
   88d5e:	2e02      	cmp	r6, #2
   88d60:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   88d64:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   88d68:	d023      	beq.n	88db2 <__register_exitproc+0x92>
   88d6a:	3202      	adds	r2, #2
   88d6c:	f8c3 e004 	str.w	lr, [r3, #4]
   88d70:	6828      	ldr	r0, [r5, #0]
   88d72:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   88d76:	f7ff f8db 	bl	87f30 <__retarget_lock_release_recursive>
   88d7a:	2000      	movs	r0, #0
   88d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88d80:	4b17      	ldr	r3, [pc, #92]	; (88de0 <__register_exitproc+0xc0>)
   88d82:	b30b      	cbz	r3, 88dc8 <__register_exitproc+0xa8>
   88d84:	f44f 70c8 	mov.w	r0, #400	; 0x190
   88d88:	f3af 8000 	nop.w
   88d8c:	4603      	mov	r3, r0
   88d8e:	b1d8      	cbz	r0, 88dc8 <__register_exitproc+0xa8>
   88d90:	2000      	movs	r0, #0
   88d92:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   88d96:	f04f 0e01 	mov.w	lr, #1
   88d9a:	6058      	str	r0, [r3, #4]
   88d9c:	6019      	str	r1, [r3, #0]
   88d9e:	4602      	mov	r2, r0
   88da0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   88da4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   88da8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   88dac:	2e00      	cmp	r6, #0
   88dae:	d0dc      	beq.n	88d6a <__register_exitproc+0x4a>
   88db0:	e7cc      	b.n	88d4c <__register_exitproc+0x2c>
   88db2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   88db6:	4301      	orrs	r1, r0
   88db8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   88dbc:	e7d5      	b.n	88d6a <__register_exitproc+0x4a>
   88dbe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   88dc2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   88dc6:	e7bb      	b.n	88d40 <__register_exitproc+0x20>
   88dc8:	6828      	ldr	r0, [r5, #0]
   88dca:	f7ff f8b1 	bl	87f30 <__retarget_lock_release_recursive>
   88dce:	f04f 30ff 	mov.w	r0, #4294967295
   88dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88dd6:	bf00      	nop
   88dd8:	200705d0 	.word	0x200705d0
   88ddc:	00089b60 	.word	0x00089b60
   88de0:	00000000 	.word	0x00000000

00088de4 <_calloc_r>:
   88de4:	b510      	push	{r4, lr}
   88de6:	fb02 f101 	mul.w	r1, r2, r1
   88dea:	f7ff f8a3 	bl	87f34 <_malloc_r>
   88dee:	4604      	mov	r4, r0
   88df0:	b1d8      	cbz	r0, 88e2a <_calloc_r+0x46>
   88df2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   88df6:	f022 0203 	bic.w	r2, r2, #3
   88dfa:	3a04      	subs	r2, #4
   88dfc:	2a24      	cmp	r2, #36	; 0x24
   88dfe:	d818      	bhi.n	88e32 <_calloc_r+0x4e>
   88e00:	2a13      	cmp	r2, #19
   88e02:	d914      	bls.n	88e2e <_calloc_r+0x4a>
   88e04:	2300      	movs	r3, #0
   88e06:	2a1b      	cmp	r2, #27
   88e08:	6003      	str	r3, [r0, #0]
   88e0a:	6043      	str	r3, [r0, #4]
   88e0c:	d916      	bls.n	88e3c <_calloc_r+0x58>
   88e0e:	2a24      	cmp	r2, #36	; 0x24
   88e10:	6083      	str	r3, [r0, #8]
   88e12:	60c3      	str	r3, [r0, #12]
   88e14:	bf11      	iteee	ne
   88e16:	f100 0210 	addne.w	r2, r0, #16
   88e1a:	6103      	streq	r3, [r0, #16]
   88e1c:	6143      	streq	r3, [r0, #20]
   88e1e:	f100 0218 	addeq.w	r2, r0, #24
   88e22:	2300      	movs	r3, #0
   88e24:	6013      	str	r3, [r2, #0]
   88e26:	6053      	str	r3, [r2, #4]
   88e28:	6093      	str	r3, [r2, #8]
   88e2a:	4620      	mov	r0, r4
   88e2c:	bd10      	pop	{r4, pc}
   88e2e:	4602      	mov	r2, r0
   88e30:	e7f7      	b.n	88e22 <_calloc_r+0x3e>
   88e32:	2100      	movs	r1, #0
   88e34:	f7fc fd68 	bl	85908 <memset>
   88e38:	4620      	mov	r0, r4
   88e3a:	bd10      	pop	{r4, pc}
   88e3c:	f100 0208 	add.w	r2, r0, #8
   88e40:	e7ef      	b.n	88e22 <_calloc_r+0x3e>
   88e42:	bf00      	nop

00088e44 <_malloc_trim_r>:
   88e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88e46:	460c      	mov	r4, r1
   88e48:	4f23      	ldr	r7, [pc, #140]	; (88ed8 <_malloc_trim_r+0x94>)
   88e4a:	4606      	mov	r6, r0
   88e4c:	f7ff fbd0 	bl	885f0 <__malloc_lock>
   88e50:	68bb      	ldr	r3, [r7, #8]
   88e52:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   88e56:	685d      	ldr	r5, [r3, #4]
   88e58:	310f      	adds	r1, #15
   88e5a:	f025 0503 	bic.w	r5, r5, #3
   88e5e:	4429      	add	r1, r5
   88e60:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   88e64:	f021 010f 	bic.w	r1, r1, #15
   88e68:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   88e6c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   88e70:	db07      	blt.n	88e82 <_malloc_trim_r+0x3e>
   88e72:	2100      	movs	r1, #0
   88e74:	4630      	mov	r0, r6
   88e76:	f7ff fec3 	bl	88c00 <_sbrk_r>
   88e7a:	68bb      	ldr	r3, [r7, #8]
   88e7c:	442b      	add	r3, r5
   88e7e:	4298      	cmp	r0, r3
   88e80:	d004      	beq.n	88e8c <_malloc_trim_r+0x48>
   88e82:	4630      	mov	r0, r6
   88e84:	f7ff fbba 	bl	885fc <__malloc_unlock>
   88e88:	2000      	movs	r0, #0
   88e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88e8c:	4261      	negs	r1, r4
   88e8e:	4630      	mov	r0, r6
   88e90:	f7ff feb6 	bl	88c00 <_sbrk_r>
   88e94:	3001      	adds	r0, #1
   88e96:	d00d      	beq.n	88eb4 <_malloc_trim_r+0x70>
   88e98:	4b10      	ldr	r3, [pc, #64]	; (88edc <_malloc_trim_r+0x98>)
   88e9a:	68ba      	ldr	r2, [r7, #8]
   88e9c:	6819      	ldr	r1, [r3, #0]
   88e9e:	1b2d      	subs	r5, r5, r4
   88ea0:	f045 0501 	orr.w	r5, r5, #1
   88ea4:	4630      	mov	r0, r6
   88ea6:	1b09      	subs	r1, r1, r4
   88ea8:	6055      	str	r5, [r2, #4]
   88eaa:	6019      	str	r1, [r3, #0]
   88eac:	f7ff fba6 	bl	885fc <__malloc_unlock>
   88eb0:	2001      	movs	r0, #1
   88eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88eb4:	2100      	movs	r1, #0
   88eb6:	4630      	mov	r0, r6
   88eb8:	f7ff fea2 	bl	88c00 <_sbrk_r>
   88ebc:	68ba      	ldr	r2, [r7, #8]
   88ebe:	1a83      	subs	r3, r0, r2
   88ec0:	2b0f      	cmp	r3, #15
   88ec2:	ddde      	ble.n	88e82 <_malloc_trim_r+0x3e>
   88ec4:	4c06      	ldr	r4, [pc, #24]	; (88ee0 <_malloc_trim_r+0x9c>)
   88ec6:	4905      	ldr	r1, [pc, #20]	; (88edc <_malloc_trim_r+0x98>)
   88ec8:	6824      	ldr	r4, [r4, #0]
   88eca:	f043 0301 	orr.w	r3, r3, #1
   88ece:	1b00      	subs	r0, r0, r4
   88ed0:	6053      	str	r3, [r2, #4]
   88ed2:	6008      	str	r0, [r1, #0]
   88ed4:	e7d5      	b.n	88e82 <_malloc_trim_r+0x3e>
   88ed6:	bf00      	nop
   88ed8:	200705d4 	.word	0x200705d4
   88edc:	20070dd8 	.word	0x20070dd8
   88ee0:	200709dc 	.word	0x200709dc

00088ee4 <_free_r>:
   88ee4:	2900      	cmp	r1, #0
   88ee6:	d044      	beq.n	88f72 <_free_r+0x8e>
   88ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88eec:	460d      	mov	r5, r1
   88eee:	4680      	mov	r8, r0
   88ef0:	f7ff fb7e 	bl	885f0 <__malloc_lock>
   88ef4:	f855 7c04 	ldr.w	r7, [r5, #-4]
   88ef8:	4969      	ldr	r1, [pc, #420]	; (890a0 <_free_r+0x1bc>)
   88efa:	f1a5 0408 	sub.w	r4, r5, #8
   88efe:	f027 0301 	bic.w	r3, r7, #1
   88f02:	18e2      	adds	r2, r4, r3
   88f04:	688e      	ldr	r6, [r1, #8]
   88f06:	6850      	ldr	r0, [r2, #4]
   88f08:	42b2      	cmp	r2, r6
   88f0a:	f020 0003 	bic.w	r0, r0, #3
   88f0e:	d05e      	beq.n	88fce <_free_r+0xea>
   88f10:	07fe      	lsls	r6, r7, #31
   88f12:	6050      	str	r0, [r2, #4]
   88f14:	d40b      	bmi.n	88f2e <_free_r+0x4a>
   88f16:	f855 7c08 	ldr.w	r7, [r5, #-8]
   88f1a:	f101 0e08 	add.w	lr, r1, #8
   88f1e:	1be4      	subs	r4, r4, r7
   88f20:	68a5      	ldr	r5, [r4, #8]
   88f22:	443b      	add	r3, r7
   88f24:	4575      	cmp	r5, lr
   88f26:	d06d      	beq.n	89004 <_free_r+0x120>
   88f28:	68e7      	ldr	r7, [r4, #12]
   88f2a:	60ef      	str	r7, [r5, #12]
   88f2c:	60bd      	str	r5, [r7, #8]
   88f2e:	1815      	adds	r5, r2, r0
   88f30:	686d      	ldr	r5, [r5, #4]
   88f32:	07ed      	lsls	r5, r5, #31
   88f34:	d53e      	bpl.n	88fb4 <_free_r+0xd0>
   88f36:	f043 0201 	orr.w	r2, r3, #1
   88f3a:	6062      	str	r2, [r4, #4]
   88f3c:	50e3      	str	r3, [r4, r3]
   88f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   88f42:	d217      	bcs.n	88f74 <_free_r+0x90>
   88f44:	2201      	movs	r2, #1
   88f46:	08db      	lsrs	r3, r3, #3
   88f48:	1098      	asrs	r0, r3, #2
   88f4a:	684d      	ldr	r5, [r1, #4]
   88f4c:	4413      	add	r3, r2
   88f4e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   88f52:	4082      	lsls	r2, r0
   88f54:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   88f58:	432a      	orrs	r2, r5
   88f5a:	3808      	subs	r0, #8
   88f5c:	60e0      	str	r0, [r4, #12]
   88f5e:	60a7      	str	r7, [r4, #8]
   88f60:	604a      	str	r2, [r1, #4]
   88f62:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   88f66:	60fc      	str	r4, [r7, #12]
   88f68:	4640      	mov	r0, r8
   88f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88f6e:	f7ff bb45 	b.w	885fc <__malloc_unlock>
   88f72:	4770      	bx	lr
   88f74:	0a5a      	lsrs	r2, r3, #9
   88f76:	2a04      	cmp	r2, #4
   88f78:	d852      	bhi.n	89020 <_free_r+0x13c>
   88f7a:	099a      	lsrs	r2, r3, #6
   88f7c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   88f80:	00ff      	lsls	r7, r7, #3
   88f82:	f102 0538 	add.w	r5, r2, #56	; 0x38
   88f86:	19c8      	adds	r0, r1, r7
   88f88:	59ca      	ldr	r2, [r1, r7]
   88f8a:	3808      	subs	r0, #8
   88f8c:	4290      	cmp	r0, r2
   88f8e:	d04f      	beq.n	89030 <_free_r+0x14c>
   88f90:	6851      	ldr	r1, [r2, #4]
   88f92:	f021 0103 	bic.w	r1, r1, #3
   88f96:	428b      	cmp	r3, r1
   88f98:	d232      	bcs.n	89000 <_free_r+0x11c>
   88f9a:	6892      	ldr	r2, [r2, #8]
   88f9c:	4290      	cmp	r0, r2
   88f9e:	d1f7      	bne.n	88f90 <_free_r+0xac>
   88fa0:	68c3      	ldr	r3, [r0, #12]
   88fa2:	60a0      	str	r0, [r4, #8]
   88fa4:	60e3      	str	r3, [r4, #12]
   88fa6:	609c      	str	r4, [r3, #8]
   88fa8:	60c4      	str	r4, [r0, #12]
   88faa:	4640      	mov	r0, r8
   88fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88fb0:	f7ff bb24 	b.w	885fc <__malloc_unlock>
   88fb4:	6895      	ldr	r5, [r2, #8]
   88fb6:	4f3b      	ldr	r7, [pc, #236]	; (890a4 <_free_r+0x1c0>)
   88fb8:	4403      	add	r3, r0
   88fba:	42bd      	cmp	r5, r7
   88fbc:	d040      	beq.n	89040 <_free_r+0x15c>
   88fbe:	68d0      	ldr	r0, [r2, #12]
   88fc0:	f043 0201 	orr.w	r2, r3, #1
   88fc4:	60e8      	str	r0, [r5, #12]
   88fc6:	6085      	str	r5, [r0, #8]
   88fc8:	6062      	str	r2, [r4, #4]
   88fca:	50e3      	str	r3, [r4, r3]
   88fcc:	e7b7      	b.n	88f3e <_free_r+0x5a>
   88fce:	07ff      	lsls	r7, r7, #31
   88fd0:	4403      	add	r3, r0
   88fd2:	d407      	bmi.n	88fe4 <_free_r+0x100>
   88fd4:	f855 5c08 	ldr.w	r5, [r5, #-8]
   88fd8:	1b64      	subs	r4, r4, r5
   88fda:	68e2      	ldr	r2, [r4, #12]
   88fdc:	68a0      	ldr	r0, [r4, #8]
   88fde:	442b      	add	r3, r5
   88fe0:	60c2      	str	r2, [r0, #12]
   88fe2:	6090      	str	r0, [r2, #8]
   88fe4:	4a30      	ldr	r2, [pc, #192]	; (890a8 <_free_r+0x1c4>)
   88fe6:	f043 0001 	orr.w	r0, r3, #1
   88fea:	6812      	ldr	r2, [r2, #0]
   88fec:	6060      	str	r0, [r4, #4]
   88fee:	4293      	cmp	r3, r2
   88ff0:	608c      	str	r4, [r1, #8]
   88ff2:	d3b9      	bcc.n	88f68 <_free_r+0x84>
   88ff4:	4b2d      	ldr	r3, [pc, #180]	; (890ac <_free_r+0x1c8>)
   88ff6:	4640      	mov	r0, r8
   88ff8:	6819      	ldr	r1, [r3, #0]
   88ffa:	f7ff ff23 	bl	88e44 <_malloc_trim_r>
   88ffe:	e7b3      	b.n	88f68 <_free_r+0x84>
   89000:	4610      	mov	r0, r2
   89002:	e7cd      	b.n	88fa0 <_free_r+0xbc>
   89004:	1811      	adds	r1, r2, r0
   89006:	6849      	ldr	r1, [r1, #4]
   89008:	07c9      	lsls	r1, r1, #31
   8900a:	d444      	bmi.n	89096 <_free_r+0x1b2>
   8900c:	6891      	ldr	r1, [r2, #8]
   8900e:	4403      	add	r3, r0
   89010:	68d2      	ldr	r2, [r2, #12]
   89012:	f043 0001 	orr.w	r0, r3, #1
   89016:	60ca      	str	r2, [r1, #12]
   89018:	6091      	str	r1, [r2, #8]
   8901a:	6060      	str	r0, [r4, #4]
   8901c:	50e3      	str	r3, [r4, r3]
   8901e:	e7a3      	b.n	88f68 <_free_r+0x84>
   89020:	2a14      	cmp	r2, #20
   89022:	d816      	bhi.n	89052 <_free_r+0x16e>
   89024:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   89028:	00ff      	lsls	r7, r7, #3
   8902a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8902e:	e7aa      	b.n	88f86 <_free_r+0xa2>
   89030:	2301      	movs	r3, #1
   89032:	10aa      	asrs	r2, r5, #2
   89034:	684d      	ldr	r5, [r1, #4]
   89036:	4093      	lsls	r3, r2
   89038:	432b      	orrs	r3, r5
   8903a:	604b      	str	r3, [r1, #4]
   8903c:	4603      	mov	r3, r0
   8903e:	e7b0      	b.n	88fa2 <_free_r+0xbe>
   89040:	f043 0201 	orr.w	r2, r3, #1
   89044:	614c      	str	r4, [r1, #20]
   89046:	610c      	str	r4, [r1, #16]
   89048:	60e5      	str	r5, [r4, #12]
   8904a:	60a5      	str	r5, [r4, #8]
   8904c:	6062      	str	r2, [r4, #4]
   8904e:	50e3      	str	r3, [r4, r3]
   89050:	e78a      	b.n	88f68 <_free_r+0x84>
   89052:	2a54      	cmp	r2, #84	; 0x54
   89054:	d806      	bhi.n	89064 <_free_r+0x180>
   89056:	0b1a      	lsrs	r2, r3, #12
   89058:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8905c:	00ff      	lsls	r7, r7, #3
   8905e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   89062:	e790      	b.n	88f86 <_free_r+0xa2>
   89064:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   89068:	d806      	bhi.n	89078 <_free_r+0x194>
   8906a:	0bda      	lsrs	r2, r3, #15
   8906c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   89070:	00ff      	lsls	r7, r7, #3
   89072:	f102 0577 	add.w	r5, r2, #119	; 0x77
   89076:	e786      	b.n	88f86 <_free_r+0xa2>
   89078:	f240 5054 	movw	r0, #1364	; 0x554
   8907c:	4282      	cmp	r2, r0
   8907e:	d806      	bhi.n	8908e <_free_r+0x1aa>
   89080:	0c9a      	lsrs	r2, r3, #18
   89082:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   89086:	00ff      	lsls	r7, r7, #3
   89088:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8908c:	e77b      	b.n	88f86 <_free_r+0xa2>
   8908e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   89092:	257e      	movs	r5, #126	; 0x7e
   89094:	e777      	b.n	88f86 <_free_r+0xa2>
   89096:	f043 0101 	orr.w	r1, r3, #1
   8909a:	6061      	str	r1, [r4, #4]
   8909c:	6013      	str	r3, [r2, #0]
   8909e:	e763      	b.n	88f68 <_free_r+0x84>
   890a0:	200705d4 	.word	0x200705d4
   890a4:	200705dc 	.word	0x200705dc
   890a8:	200709e0 	.word	0x200709e0
   890ac:	20070e08 	.word	0x20070e08

000890b0 <__ascii_mbtowc>:
   890b0:	b082      	sub	sp, #8
   890b2:	b149      	cbz	r1, 890c8 <__ascii_mbtowc+0x18>
   890b4:	b15a      	cbz	r2, 890ce <__ascii_mbtowc+0x1e>
   890b6:	b16b      	cbz	r3, 890d4 <__ascii_mbtowc+0x24>
   890b8:	7813      	ldrb	r3, [r2, #0]
   890ba:	600b      	str	r3, [r1, #0]
   890bc:	7812      	ldrb	r2, [r2, #0]
   890be:	1c10      	adds	r0, r2, #0
   890c0:	bf18      	it	ne
   890c2:	2001      	movne	r0, #1
   890c4:	b002      	add	sp, #8
   890c6:	4770      	bx	lr
   890c8:	a901      	add	r1, sp, #4
   890ca:	2a00      	cmp	r2, #0
   890cc:	d1f3      	bne.n	890b6 <__ascii_mbtowc+0x6>
   890ce:	4610      	mov	r0, r2
   890d0:	b002      	add	sp, #8
   890d2:	4770      	bx	lr
   890d4:	f06f 0001 	mvn.w	r0, #1
   890d8:	e7f4      	b.n	890c4 <__ascii_mbtowc+0x14>
   890da:	bf00      	nop

000890dc <memmove>:
   890dc:	4288      	cmp	r0, r1
   890de:	b5f0      	push	{r4, r5, r6, r7, lr}
   890e0:	d90d      	bls.n	890fe <memmove+0x22>
   890e2:	188b      	adds	r3, r1, r2
   890e4:	4298      	cmp	r0, r3
   890e6:	d20a      	bcs.n	890fe <memmove+0x22>
   890e8:	1884      	adds	r4, r0, r2
   890ea:	2a00      	cmp	r2, #0
   890ec:	d051      	beq.n	89192 <memmove+0xb6>
   890ee:	4622      	mov	r2, r4
   890f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   890f4:	4299      	cmp	r1, r3
   890f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   890fa:	d1f9      	bne.n	890f0 <memmove+0x14>
   890fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   890fe:	2a0f      	cmp	r2, #15
   89100:	d948      	bls.n	89194 <memmove+0xb8>
   89102:	ea41 0300 	orr.w	r3, r1, r0
   89106:	079b      	lsls	r3, r3, #30
   89108:	d146      	bne.n	89198 <memmove+0xbc>
   8910a:	4615      	mov	r5, r2
   8910c:	f100 0410 	add.w	r4, r0, #16
   89110:	f101 0310 	add.w	r3, r1, #16
   89114:	f853 6c10 	ldr.w	r6, [r3, #-16]
   89118:	3d10      	subs	r5, #16
   8911a:	f844 6c10 	str.w	r6, [r4, #-16]
   8911e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   89122:	2d0f      	cmp	r5, #15
   89124:	f844 6c0c 	str.w	r6, [r4, #-12]
   89128:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8912c:	f104 0410 	add.w	r4, r4, #16
   89130:	f844 6c18 	str.w	r6, [r4, #-24]
   89134:	f853 6c04 	ldr.w	r6, [r3, #-4]
   89138:	f103 0310 	add.w	r3, r3, #16
   8913c:	f844 6c14 	str.w	r6, [r4, #-20]
   89140:	d8e8      	bhi.n	89114 <memmove+0x38>
   89142:	f1a2 0310 	sub.w	r3, r2, #16
   89146:	f023 030f 	bic.w	r3, r3, #15
   8914a:	f002 0e0f 	and.w	lr, r2, #15
   8914e:	3310      	adds	r3, #16
   89150:	f1be 0f03 	cmp.w	lr, #3
   89154:	4419      	add	r1, r3
   89156:	4403      	add	r3, r0
   89158:	d921      	bls.n	8919e <memmove+0xc2>
   8915a:	460e      	mov	r6, r1
   8915c:	4674      	mov	r4, lr
   8915e:	1f1d      	subs	r5, r3, #4
   89160:	f856 7b04 	ldr.w	r7, [r6], #4
   89164:	3c04      	subs	r4, #4
   89166:	2c03      	cmp	r4, #3
   89168:	f845 7f04 	str.w	r7, [r5, #4]!
   8916c:	d8f8      	bhi.n	89160 <memmove+0x84>
   8916e:	f1ae 0404 	sub.w	r4, lr, #4
   89172:	f024 0403 	bic.w	r4, r4, #3
   89176:	3404      	adds	r4, #4
   89178:	4421      	add	r1, r4
   8917a:	4423      	add	r3, r4
   8917c:	f002 0203 	and.w	r2, r2, #3
   89180:	b162      	cbz	r2, 8919c <memmove+0xc0>
   89182:	3b01      	subs	r3, #1
   89184:	440a      	add	r2, r1
   89186:	f811 4b01 	ldrb.w	r4, [r1], #1
   8918a:	428a      	cmp	r2, r1
   8918c:	f803 4f01 	strb.w	r4, [r3, #1]!
   89190:	d1f9      	bne.n	89186 <memmove+0xaa>
   89192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89194:	4603      	mov	r3, r0
   89196:	e7f3      	b.n	89180 <memmove+0xa4>
   89198:	4603      	mov	r3, r0
   8919a:	e7f2      	b.n	89182 <memmove+0xa6>
   8919c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8919e:	4672      	mov	r2, lr
   891a0:	e7ee      	b.n	89180 <memmove+0xa4>
   891a2:	bf00      	nop

000891a4 <_realloc_r>:
   891a4:	2900      	cmp	r1, #0
   891a6:	f000 8094 	beq.w	892d2 <_realloc_r+0x12e>
   891aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   891ae:	460c      	mov	r4, r1
   891b0:	4615      	mov	r5, r2
   891b2:	b083      	sub	sp, #12
   891b4:	4680      	mov	r8, r0
   891b6:	f105 060b 	add.w	r6, r5, #11
   891ba:	f7ff fa19 	bl	885f0 <__malloc_lock>
   891be:	f854 ec04 	ldr.w	lr, [r4, #-4]
   891c2:	2e16      	cmp	r6, #22
   891c4:	f02e 0703 	bic.w	r7, lr, #3
   891c8:	f1a4 0908 	sub.w	r9, r4, #8
   891cc:	d83c      	bhi.n	89248 <_realloc_r+0xa4>
   891ce:	2210      	movs	r2, #16
   891d0:	4616      	mov	r6, r2
   891d2:	42b5      	cmp	r5, r6
   891d4:	d83d      	bhi.n	89252 <_realloc_r+0xae>
   891d6:	4297      	cmp	r7, r2
   891d8:	da43      	bge.n	89262 <_realloc_r+0xbe>
   891da:	4bc6      	ldr	r3, [pc, #792]	; (894f4 <_realloc_r+0x350>)
   891dc:	eb09 0007 	add.w	r0, r9, r7
   891e0:	6899      	ldr	r1, [r3, #8]
   891e2:	4288      	cmp	r0, r1
   891e4:	f000 80c3 	beq.w	8936e <_realloc_r+0x1ca>
   891e8:	6843      	ldr	r3, [r0, #4]
   891ea:	f023 0101 	bic.w	r1, r3, #1
   891ee:	4401      	add	r1, r0
   891f0:	6849      	ldr	r1, [r1, #4]
   891f2:	07c9      	lsls	r1, r1, #31
   891f4:	d54d      	bpl.n	89292 <_realloc_r+0xee>
   891f6:	f01e 0f01 	tst.w	lr, #1
   891fa:	f000 809b 	beq.w	89334 <_realloc_r+0x190>
   891fe:	4629      	mov	r1, r5
   89200:	4640      	mov	r0, r8
   89202:	f7fe fe97 	bl	87f34 <_malloc_r>
   89206:	4605      	mov	r5, r0
   89208:	2800      	cmp	r0, #0
   8920a:	d03b      	beq.n	89284 <_realloc_r+0xe0>
   8920c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89210:	f1a0 0208 	sub.w	r2, r0, #8
   89214:	f023 0301 	bic.w	r3, r3, #1
   89218:	444b      	add	r3, r9
   8921a:	429a      	cmp	r2, r3
   8921c:	f000 812b 	beq.w	89476 <_realloc_r+0x2d2>
   89220:	1f3a      	subs	r2, r7, #4
   89222:	2a24      	cmp	r2, #36	; 0x24
   89224:	f200 8118 	bhi.w	89458 <_realloc_r+0x2b4>
   89228:	2a13      	cmp	r2, #19
   8922a:	f200 80eb 	bhi.w	89404 <_realloc_r+0x260>
   8922e:	4603      	mov	r3, r0
   89230:	4622      	mov	r2, r4
   89232:	6811      	ldr	r1, [r2, #0]
   89234:	6019      	str	r1, [r3, #0]
   89236:	6851      	ldr	r1, [r2, #4]
   89238:	6059      	str	r1, [r3, #4]
   8923a:	6892      	ldr	r2, [r2, #8]
   8923c:	609a      	str	r2, [r3, #8]
   8923e:	4621      	mov	r1, r4
   89240:	4640      	mov	r0, r8
   89242:	f7ff fe4f 	bl	88ee4 <_free_r>
   89246:	e01d      	b.n	89284 <_realloc_r+0xe0>
   89248:	f026 0607 	bic.w	r6, r6, #7
   8924c:	2e00      	cmp	r6, #0
   8924e:	4632      	mov	r2, r6
   89250:	dabf      	bge.n	891d2 <_realloc_r+0x2e>
   89252:	2500      	movs	r5, #0
   89254:	230c      	movs	r3, #12
   89256:	4628      	mov	r0, r5
   89258:	f8c8 3000 	str.w	r3, [r8]
   8925c:	b003      	add	sp, #12
   8925e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89262:	4625      	mov	r5, r4
   89264:	1bbb      	subs	r3, r7, r6
   89266:	2b0f      	cmp	r3, #15
   89268:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8926c:	d81d      	bhi.n	892aa <_realloc_r+0x106>
   8926e:	f002 0201 	and.w	r2, r2, #1
   89272:	433a      	orrs	r2, r7
   89274:	eb09 0107 	add.w	r1, r9, r7
   89278:	f8c9 2004 	str.w	r2, [r9, #4]
   8927c:	684b      	ldr	r3, [r1, #4]
   8927e:	f043 0301 	orr.w	r3, r3, #1
   89282:	604b      	str	r3, [r1, #4]
   89284:	4640      	mov	r0, r8
   89286:	f7ff f9b9 	bl	885fc <__malloc_unlock>
   8928a:	4628      	mov	r0, r5
   8928c:	b003      	add	sp, #12
   8928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89292:	f023 0303 	bic.w	r3, r3, #3
   89296:	18f9      	adds	r1, r7, r3
   89298:	4291      	cmp	r1, r2
   8929a:	db1d      	blt.n	892d8 <_realloc_r+0x134>
   8929c:	68c3      	ldr	r3, [r0, #12]
   8929e:	6882      	ldr	r2, [r0, #8]
   892a0:	4625      	mov	r5, r4
   892a2:	60d3      	str	r3, [r2, #12]
   892a4:	460f      	mov	r7, r1
   892a6:	609a      	str	r2, [r3, #8]
   892a8:	e7dc      	b.n	89264 <_realloc_r+0xc0>
   892aa:	f002 0201 	and.w	r2, r2, #1
   892ae:	eb09 0106 	add.w	r1, r9, r6
   892b2:	f043 0301 	orr.w	r3, r3, #1
   892b6:	4332      	orrs	r2, r6
   892b8:	f8c9 2004 	str.w	r2, [r9, #4]
   892bc:	444f      	add	r7, r9
   892be:	604b      	str	r3, [r1, #4]
   892c0:	687b      	ldr	r3, [r7, #4]
   892c2:	3108      	adds	r1, #8
   892c4:	f043 0301 	orr.w	r3, r3, #1
   892c8:	607b      	str	r3, [r7, #4]
   892ca:	4640      	mov	r0, r8
   892cc:	f7ff fe0a 	bl	88ee4 <_free_r>
   892d0:	e7d8      	b.n	89284 <_realloc_r+0xe0>
   892d2:	4611      	mov	r1, r2
   892d4:	f7fe be2e 	b.w	87f34 <_malloc_r>
   892d8:	f01e 0f01 	tst.w	lr, #1
   892dc:	d18f      	bne.n	891fe <_realloc_r+0x5a>
   892de:	f854 1c08 	ldr.w	r1, [r4, #-8]
   892e2:	eba9 0a01 	sub.w	sl, r9, r1
   892e6:	f8da 1004 	ldr.w	r1, [sl, #4]
   892ea:	f021 0103 	bic.w	r1, r1, #3
   892ee:	440b      	add	r3, r1
   892f0:	443b      	add	r3, r7
   892f2:	4293      	cmp	r3, r2
   892f4:	db26      	blt.n	89344 <_realloc_r+0x1a0>
   892f6:	4655      	mov	r5, sl
   892f8:	68c1      	ldr	r1, [r0, #12]
   892fa:	6880      	ldr	r0, [r0, #8]
   892fc:	1f3a      	subs	r2, r7, #4
   892fe:	60c1      	str	r1, [r0, #12]
   89300:	6088      	str	r0, [r1, #8]
   89302:	f855 0f08 	ldr.w	r0, [r5, #8]!
   89306:	f8da 100c 	ldr.w	r1, [sl, #12]
   8930a:	2a24      	cmp	r2, #36	; 0x24
   8930c:	60c1      	str	r1, [r0, #12]
   8930e:	6088      	str	r0, [r1, #8]
   89310:	d826      	bhi.n	89360 <_realloc_r+0x1bc>
   89312:	2a13      	cmp	r2, #19
   89314:	f240 8081 	bls.w	8941a <_realloc_r+0x276>
   89318:	6821      	ldr	r1, [r4, #0]
   8931a:	2a1b      	cmp	r2, #27
   8931c:	f8ca 1008 	str.w	r1, [sl, #8]
   89320:	6861      	ldr	r1, [r4, #4]
   89322:	f8ca 100c 	str.w	r1, [sl, #12]
   89326:	f200 80ad 	bhi.w	89484 <_realloc_r+0x2e0>
   8932a:	f104 0008 	add.w	r0, r4, #8
   8932e:	f10a 0210 	add.w	r2, sl, #16
   89332:	e074      	b.n	8941e <_realloc_r+0x27a>
   89334:	f854 3c08 	ldr.w	r3, [r4, #-8]
   89338:	eba9 0a03 	sub.w	sl, r9, r3
   8933c:	f8da 1004 	ldr.w	r1, [sl, #4]
   89340:	f021 0103 	bic.w	r1, r1, #3
   89344:	187b      	adds	r3, r7, r1
   89346:	4293      	cmp	r3, r2
   89348:	f6ff af59 	blt.w	891fe <_realloc_r+0x5a>
   8934c:	4655      	mov	r5, sl
   8934e:	f8da 100c 	ldr.w	r1, [sl, #12]
   89352:	f855 0f08 	ldr.w	r0, [r5, #8]!
   89356:	1f3a      	subs	r2, r7, #4
   89358:	2a24      	cmp	r2, #36	; 0x24
   8935a:	60c1      	str	r1, [r0, #12]
   8935c:	6088      	str	r0, [r1, #8]
   8935e:	d9d8      	bls.n	89312 <_realloc_r+0x16e>
   89360:	4621      	mov	r1, r4
   89362:	4628      	mov	r0, r5
   89364:	461f      	mov	r7, r3
   89366:	46d1      	mov	r9, sl
   89368:	f7ff feb8 	bl	890dc <memmove>
   8936c:	e77a      	b.n	89264 <_realloc_r+0xc0>
   8936e:	6841      	ldr	r1, [r0, #4]
   89370:	f106 0010 	add.w	r0, r6, #16
   89374:	f021 0b03 	bic.w	fp, r1, #3
   89378:	44bb      	add	fp, r7
   8937a:	4583      	cmp	fp, r0
   8937c:	da58      	bge.n	89430 <_realloc_r+0x28c>
   8937e:	f01e 0f01 	tst.w	lr, #1
   89382:	f47f af3c 	bne.w	891fe <_realloc_r+0x5a>
   89386:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8938a:	eba9 0a01 	sub.w	sl, r9, r1
   8938e:	f8da 1004 	ldr.w	r1, [sl, #4]
   89392:	f021 0103 	bic.w	r1, r1, #3
   89396:	448b      	add	fp, r1
   89398:	4558      	cmp	r0, fp
   8939a:	dcd3      	bgt.n	89344 <_realloc_r+0x1a0>
   8939c:	4655      	mov	r5, sl
   8939e:	f8da 100c 	ldr.w	r1, [sl, #12]
   893a2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   893a6:	1f3a      	subs	r2, r7, #4
   893a8:	2a24      	cmp	r2, #36	; 0x24
   893aa:	60c1      	str	r1, [r0, #12]
   893ac:	6088      	str	r0, [r1, #8]
   893ae:	f200 808d 	bhi.w	894cc <_realloc_r+0x328>
   893b2:	2a13      	cmp	r2, #19
   893b4:	f240 8087 	bls.w	894c6 <_realloc_r+0x322>
   893b8:	6821      	ldr	r1, [r4, #0]
   893ba:	2a1b      	cmp	r2, #27
   893bc:	f8ca 1008 	str.w	r1, [sl, #8]
   893c0:	6861      	ldr	r1, [r4, #4]
   893c2:	f8ca 100c 	str.w	r1, [sl, #12]
   893c6:	f200 8088 	bhi.w	894da <_realloc_r+0x336>
   893ca:	f104 0108 	add.w	r1, r4, #8
   893ce:	f10a 0210 	add.w	r2, sl, #16
   893d2:	6808      	ldr	r0, [r1, #0]
   893d4:	6010      	str	r0, [r2, #0]
   893d6:	6848      	ldr	r0, [r1, #4]
   893d8:	6050      	str	r0, [r2, #4]
   893da:	6889      	ldr	r1, [r1, #8]
   893dc:	6091      	str	r1, [r2, #8]
   893de:	ebab 0206 	sub.w	r2, fp, r6
   893e2:	eb0a 0106 	add.w	r1, sl, r6
   893e6:	f042 0201 	orr.w	r2, r2, #1
   893ea:	6099      	str	r1, [r3, #8]
   893ec:	604a      	str	r2, [r1, #4]
   893ee:	f8da 3004 	ldr.w	r3, [sl, #4]
   893f2:	4640      	mov	r0, r8
   893f4:	f003 0301 	and.w	r3, r3, #1
   893f8:	431e      	orrs	r6, r3
   893fa:	f8ca 6004 	str.w	r6, [sl, #4]
   893fe:	f7ff f8fd 	bl	885fc <__malloc_unlock>
   89402:	e742      	b.n	8928a <_realloc_r+0xe6>
   89404:	6823      	ldr	r3, [r4, #0]
   89406:	2a1b      	cmp	r2, #27
   89408:	6003      	str	r3, [r0, #0]
   8940a:	6863      	ldr	r3, [r4, #4]
   8940c:	6043      	str	r3, [r0, #4]
   8940e:	d827      	bhi.n	89460 <_realloc_r+0x2bc>
   89410:	f100 0308 	add.w	r3, r0, #8
   89414:	f104 0208 	add.w	r2, r4, #8
   89418:	e70b      	b.n	89232 <_realloc_r+0x8e>
   8941a:	4620      	mov	r0, r4
   8941c:	462a      	mov	r2, r5
   8941e:	6801      	ldr	r1, [r0, #0]
   89420:	461f      	mov	r7, r3
   89422:	6011      	str	r1, [r2, #0]
   89424:	6841      	ldr	r1, [r0, #4]
   89426:	46d1      	mov	r9, sl
   89428:	6051      	str	r1, [r2, #4]
   8942a:	6883      	ldr	r3, [r0, #8]
   8942c:	6093      	str	r3, [r2, #8]
   8942e:	e719      	b.n	89264 <_realloc_r+0xc0>
   89430:	ebab 0b06 	sub.w	fp, fp, r6
   89434:	eb09 0106 	add.w	r1, r9, r6
   89438:	f04b 0201 	orr.w	r2, fp, #1
   8943c:	6099      	str	r1, [r3, #8]
   8943e:	604a      	str	r2, [r1, #4]
   89440:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89444:	4640      	mov	r0, r8
   89446:	f003 0301 	and.w	r3, r3, #1
   8944a:	431e      	orrs	r6, r3
   8944c:	f844 6c04 	str.w	r6, [r4, #-4]
   89450:	f7ff f8d4 	bl	885fc <__malloc_unlock>
   89454:	4625      	mov	r5, r4
   89456:	e718      	b.n	8928a <_realloc_r+0xe6>
   89458:	4621      	mov	r1, r4
   8945a:	f7ff fe3f 	bl	890dc <memmove>
   8945e:	e6ee      	b.n	8923e <_realloc_r+0x9a>
   89460:	68a3      	ldr	r3, [r4, #8]
   89462:	2a24      	cmp	r2, #36	; 0x24
   89464:	6083      	str	r3, [r0, #8]
   89466:	68e3      	ldr	r3, [r4, #12]
   89468:	60c3      	str	r3, [r0, #12]
   8946a:	d018      	beq.n	8949e <_realloc_r+0x2fa>
   8946c:	f100 0310 	add.w	r3, r0, #16
   89470:	f104 0210 	add.w	r2, r4, #16
   89474:	e6dd      	b.n	89232 <_realloc_r+0x8e>
   89476:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8947a:	4625      	mov	r5, r4
   8947c:	f023 0303 	bic.w	r3, r3, #3
   89480:	441f      	add	r7, r3
   89482:	e6ef      	b.n	89264 <_realloc_r+0xc0>
   89484:	68a1      	ldr	r1, [r4, #8]
   89486:	2a24      	cmp	r2, #36	; 0x24
   89488:	f8ca 1010 	str.w	r1, [sl, #16]
   8948c:	68e1      	ldr	r1, [r4, #12]
   8948e:	f8ca 1014 	str.w	r1, [sl, #20]
   89492:	d00d      	beq.n	894b0 <_realloc_r+0x30c>
   89494:	f104 0010 	add.w	r0, r4, #16
   89498:	f10a 0218 	add.w	r2, sl, #24
   8949c:	e7bf      	b.n	8941e <_realloc_r+0x27a>
   8949e:	6922      	ldr	r2, [r4, #16]
   894a0:	f100 0318 	add.w	r3, r0, #24
   894a4:	6102      	str	r2, [r0, #16]
   894a6:	6961      	ldr	r1, [r4, #20]
   894a8:	f104 0218 	add.w	r2, r4, #24
   894ac:	6141      	str	r1, [r0, #20]
   894ae:	e6c0      	b.n	89232 <_realloc_r+0x8e>
   894b0:	6922      	ldr	r2, [r4, #16]
   894b2:	f104 0018 	add.w	r0, r4, #24
   894b6:	f8ca 2018 	str.w	r2, [sl, #24]
   894ba:	6961      	ldr	r1, [r4, #20]
   894bc:	f10a 0220 	add.w	r2, sl, #32
   894c0:	f8ca 101c 	str.w	r1, [sl, #28]
   894c4:	e7ab      	b.n	8941e <_realloc_r+0x27a>
   894c6:	4621      	mov	r1, r4
   894c8:	462a      	mov	r2, r5
   894ca:	e782      	b.n	893d2 <_realloc_r+0x22e>
   894cc:	4621      	mov	r1, r4
   894ce:	4628      	mov	r0, r5
   894d0:	9301      	str	r3, [sp, #4]
   894d2:	f7ff fe03 	bl	890dc <memmove>
   894d6:	9b01      	ldr	r3, [sp, #4]
   894d8:	e781      	b.n	893de <_realloc_r+0x23a>
   894da:	68a1      	ldr	r1, [r4, #8]
   894dc:	2a24      	cmp	r2, #36	; 0x24
   894de:	f8ca 1010 	str.w	r1, [sl, #16]
   894e2:	68e1      	ldr	r1, [r4, #12]
   894e4:	f8ca 1014 	str.w	r1, [sl, #20]
   894e8:	d006      	beq.n	894f8 <_realloc_r+0x354>
   894ea:	f104 0110 	add.w	r1, r4, #16
   894ee:	f10a 0218 	add.w	r2, sl, #24
   894f2:	e76e      	b.n	893d2 <_realloc_r+0x22e>
   894f4:	200705d4 	.word	0x200705d4
   894f8:	6922      	ldr	r2, [r4, #16]
   894fa:	f104 0118 	add.w	r1, r4, #24
   894fe:	f8ca 2018 	str.w	r2, [sl, #24]
   89502:	6960      	ldr	r0, [r4, #20]
   89504:	f10a 0220 	add.w	r2, sl, #32
   89508:	f8ca 001c 	str.w	r0, [sl, #28]
   8950c:	e761      	b.n	893d2 <_realloc_r+0x22e>
   8950e:	bf00      	nop

00089510 <__ascii_wctomb>:
   89510:	b119      	cbz	r1, 8951a <__ascii_wctomb+0xa>
   89512:	2aff      	cmp	r2, #255	; 0xff
   89514:	d803      	bhi.n	8951e <__ascii_wctomb+0xe>
   89516:	700a      	strb	r2, [r1, #0]
   89518:	2101      	movs	r1, #1
   8951a:	4608      	mov	r0, r1
   8951c:	4770      	bx	lr
   8951e:	238a      	movs	r3, #138	; 0x8a
   89520:	f04f 31ff 	mov.w	r1, #4294967295
   89524:	6003      	str	r3, [r0, #0]
   89526:	e7f8      	b.n	8951a <__ascii_wctomb+0xa>

00089528 <__gedf2>:
   89528:	f04f 3cff 	mov.w	ip, #4294967295
   8952c:	e006      	b.n	8953c <__cmpdf2+0x4>
   8952e:	bf00      	nop

00089530 <__ledf2>:
   89530:	f04f 0c01 	mov.w	ip, #1
   89534:	e002      	b.n	8953c <__cmpdf2+0x4>
   89536:	bf00      	nop

00089538 <__cmpdf2>:
   89538:	f04f 0c01 	mov.w	ip, #1
   8953c:	f84d cd04 	str.w	ip, [sp, #-4]!
   89540:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89544:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89548:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8954c:	bf18      	it	ne
   8954e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   89552:	d01b      	beq.n	8958c <__cmpdf2+0x54>
   89554:	b001      	add	sp, #4
   89556:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8955a:	bf0c      	ite	eq
   8955c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   89560:	ea91 0f03 	teqne	r1, r3
   89564:	bf02      	ittt	eq
   89566:	ea90 0f02 	teqeq	r0, r2
   8956a:	2000      	moveq	r0, #0
   8956c:	4770      	bxeq	lr
   8956e:	f110 0f00 	cmn.w	r0, #0
   89572:	ea91 0f03 	teq	r1, r3
   89576:	bf58      	it	pl
   89578:	4299      	cmppl	r1, r3
   8957a:	bf08      	it	eq
   8957c:	4290      	cmpeq	r0, r2
   8957e:	bf2c      	ite	cs
   89580:	17d8      	asrcs	r0, r3, #31
   89582:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   89586:	f040 0001 	orr.w	r0, r0, #1
   8958a:	4770      	bx	lr
   8958c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89590:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89594:	d102      	bne.n	8959c <__cmpdf2+0x64>
   89596:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8959a:	d107      	bne.n	895ac <__cmpdf2+0x74>
   8959c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   895a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   895a4:	d1d6      	bne.n	89554 <__cmpdf2+0x1c>
   895a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   895aa:	d0d3      	beq.n	89554 <__cmpdf2+0x1c>
   895ac:	f85d 0b04 	ldr.w	r0, [sp], #4
   895b0:	4770      	bx	lr
   895b2:	bf00      	nop

000895b4 <__aeabi_cdrcmple>:
   895b4:	4684      	mov	ip, r0
   895b6:	4610      	mov	r0, r2
   895b8:	4662      	mov	r2, ip
   895ba:	468c      	mov	ip, r1
   895bc:	4619      	mov	r1, r3
   895be:	4663      	mov	r3, ip
   895c0:	e000      	b.n	895c4 <__aeabi_cdcmpeq>
   895c2:	bf00      	nop

000895c4 <__aeabi_cdcmpeq>:
   895c4:	b501      	push	{r0, lr}
   895c6:	f7ff ffb7 	bl	89538 <__cmpdf2>
   895ca:	2800      	cmp	r0, #0
   895cc:	bf48      	it	mi
   895ce:	f110 0f00 	cmnmi.w	r0, #0
   895d2:	bd01      	pop	{r0, pc}

000895d4 <__aeabi_dcmpeq>:
   895d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   895d8:	f7ff fff4 	bl	895c4 <__aeabi_cdcmpeq>
   895dc:	bf0c      	ite	eq
   895de:	2001      	moveq	r0, #1
   895e0:	2000      	movne	r0, #0
   895e2:	f85d fb08 	ldr.w	pc, [sp], #8
   895e6:	bf00      	nop

000895e8 <__aeabi_dcmplt>:
   895e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   895ec:	f7ff ffea 	bl	895c4 <__aeabi_cdcmpeq>
   895f0:	bf34      	ite	cc
   895f2:	2001      	movcc	r0, #1
   895f4:	2000      	movcs	r0, #0
   895f6:	f85d fb08 	ldr.w	pc, [sp], #8
   895fa:	bf00      	nop

000895fc <__aeabi_dcmple>:
   895fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   89600:	f7ff ffe0 	bl	895c4 <__aeabi_cdcmpeq>
   89604:	bf94      	ite	ls
   89606:	2001      	movls	r0, #1
   89608:	2000      	movhi	r0, #0
   8960a:	f85d fb08 	ldr.w	pc, [sp], #8
   8960e:	bf00      	nop

00089610 <__aeabi_dcmpge>:
   89610:	f84d ed08 	str.w	lr, [sp, #-8]!
   89614:	f7ff ffce 	bl	895b4 <__aeabi_cdrcmple>
   89618:	bf94      	ite	ls
   8961a:	2001      	movls	r0, #1
   8961c:	2000      	movhi	r0, #0
   8961e:	f85d fb08 	ldr.w	pc, [sp], #8
   89622:	bf00      	nop

00089624 <__aeabi_dcmpgt>:
   89624:	f84d ed08 	str.w	lr, [sp, #-8]!
   89628:	f7ff ffc4 	bl	895b4 <__aeabi_cdrcmple>
   8962c:	bf34      	ite	cc
   8962e:	2001      	movcc	r0, #1
   89630:	2000      	movcs	r0, #0
   89632:	f85d fb08 	ldr.w	pc, [sp], #8
   89636:	bf00      	nop

00089638 <__aeabi_dcmpun>:
   89638:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8963c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89640:	d102      	bne.n	89648 <__aeabi_dcmpun+0x10>
   89642:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   89646:	d10a      	bne.n	8965e <__aeabi_dcmpun+0x26>
   89648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8964c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89650:	d102      	bne.n	89658 <__aeabi_dcmpun+0x20>
   89652:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   89656:	d102      	bne.n	8965e <__aeabi_dcmpun+0x26>
   89658:	f04f 0000 	mov.w	r0, #0
   8965c:	4770      	bx	lr
   8965e:	f04f 0001 	mov.w	r0, #1
   89662:	4770      	bx	lr

00089664 <__aeabi_d2iz>:
   89664:	ea4f 0241 	mov.w	r2, r1, lsl #1
   89668:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8966c:	d215      	bcs.n	8969a <__aeabi_d2iz+0x36>
   8966e:	d511      	bpl.n	89694 <__aeabi_d2iz+0x30>
   89670:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   89674:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   89678:	d912      	bls.n	896a0 <__aeabi_d2iz+0x3c>
   8967a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8967e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   89682:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   89686:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8968a:	fa23 f002 	lsr.w	r0, r3, r2
   8968e:	bf18      	it	ne
   89690:	4240      	negne	r0, r0
   89692:	4770      	bx	lr
   89694:	f04f 0000 	mov.w	r0, #0
   89698:	4770      	bx	lr
   8969a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8969e:	d105      	bne.n	896ac <__aeabi_d2iz+0x48>
   896a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   896a4:	bf08      	it	eq
   896a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   896aa:	4770      	bx	lr
   896ac:	f04f 0000 	mov.w	r0, #0
   896b0:	4770      	bx	lr
   896b2:	bf00      	nop

000896b4 <__aeabi_uldivmod>:
   896b4:	b953      	cbnz	r3, 896cc <__aeabi_uldivmod+0x18>
   896b6:	b94a      	cbnz	r2, 896cc <__aeabi_uldivmod+0x18>
   896b8:	2900      	cmp	r1, #0
   896ba:	bf08      	it	eq
   896bc:	2800      	cmpeq	r0, #0
   896be:	bf1c      	itt	ne
   896c0:	f04f 31ff 	movne.w	r1, #4294967295
   896c4:	f04f 30ff 	movne.w	r0, #4294967295
   896c8:	f000 b97a 	b.w	899c0 <__aeabi_idiv0>
   896cc:	f1ad 0c08 	sub.w	ip, sp, #8
   896d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   896d4:	f000 f806 	bl	896e4 <__udivmoddi4>
   896d8:	f8dd e004 	ldr.w	lr, [sp, #4]
   896dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   896e0:	b004      	add	sp, #16
   896e2:	4770      	bx	lr

000896e4 <__udivmoddi4>:
   896e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   896e8:	468c      	mov	ip, r1
   896ea:	460e      	mov	r6, r1
   896ec:	4604      	mov	r4, r0
   896ee:	9d08      	ldr	r5, [sp, #32]
   896f0:	2b00      	cmp	r3, #0
   896f2:	d150      	bne.n	89796 <__udivmoddi4+0xb2>
   896f4:	428a      	cmp	r2, r1
   896f6:	4617      	mov	r7, r2
   896f8:	d96c      	bls.n	897d4 <__udivmoddi4+0xf0>
   896fa:	fab2 fe82 	clz	lr, r2
   896fe:	f1be 0f00 	cmp.w	lr, #0
   89702:	d00b      	beq.n	8971c <__udivmoddi4+0x38>
   89704:	f1ce 0c20 	rsb	ip, lr, #32
   89708:	fa01 f60e 	lsl.w	r6, r1, lr
   8970c:	fa20 fc0c 	lsr.w	ip, r0, ip
   89710:	fa02 f70e 	lsl.w	r7, r2, lr
   89714:	ea4c 0c06 	orr.w	ip, ip, r6
   89718:	fa00 f40e 	lsl.w	r4, r0, lr
   8971c:	0c3a      	lsrs	r2, r7, #16
   8971e:	fbbc f9f2 	udiv	r9, ip, r2
   89722:	b2bb      	uxth	r3, r7
   89724:	fb02 cc19 	mls	ip, r2, r9, ip
   89728:	fb09 fa03 	mul.w	sl, r9, r3
   8972c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   89730:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   89734:	45b2      	cmp	sl, r6
   89736:	d90a      	bls.n	8974e <__udivmoddi4+0x6a>
   89738:	19f6      	adds	r6, r6, r7
   8973a:	f109 31ff 	add.w	r1, r9, #4294967295
   8973e:	f080 8125 	bcs.w	8998c <__udivmoddi4+0x2a8>
   89742:	45b2      	cmp	sl, r6
   89744:	f240 8122 	bls.w	8998c <__udivmoddi4+0x2a8>
   89748:	f1a9 0902 	sub.w	r9, r9, #2
   8974c:	443e      	add	r6, r7
   8974e:	eba6 060a 	sub.w	r6, r6, sl
   89752:	fbb6 f0f2 	udiv	r0, r6, r2
   89756:	fb02 6610 	mls	r6, r2, r0, r6
   8975a:	fb00 f303 	mul.w	r3, r0, r3
   8975e:	b2a4      	uxth	r4, r4
   89760:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   89764:	42a3      	cmp	r3, r4
   89766:	d909      	bls.n	8977c <__udivmoddi4+0x98>
   89768:	19e4      	adds	r4, r4, r7
   8976a:	f100 32ff 	add.w	r2, r0, #4294967295
   8976e:	f080 810b 	bcs.w	89988 <__udivmoddi4+0x2a4>
   89772:	42a3      	cmp	r3, r4
   89774:	f240 8108 	bls.w	89988 <__udivmoddi4+0x2a4>
   89778:	3802      	subs	r0, #2
   8977a:	443c      	add	r4, r7
   8977c:	2100      	movs	r1, #0
   8977e:	1ae4      	subs	r4, r4, r3
   89780:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89784:	2d00      	cmp	r5, #0
   89786:	d062      	beq.n	8984e <__udivmoddi4+0x16a>
   89788:	2300      	movs	r3, #0
   8978a:	fa24 f40e 	lsr.w	r4, r4, lr
   8978e:	602c      	str	r4, [r5, #0]
   89790:	606b      	str	r3, [r5, #4]
   89792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89796:	428b      	cmp	r3, r1
   89798:	d907      	bls.n	897aa <__udivmoddi4+0xc6>
   8979a:	2d00      	cmp	r5, #0
   8979c:	d055      	beq.n	8984a <__udivmoddi4+0x166>
   8979e:	2100      	movs	r1, #0
   897a0:	e885 0041 	stmia.w	r5, {r0, r6}
   897a4:	4608      	mov	r0, r1
   897a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   897aa:	fab3 f183 	clz	r1, r3
   897ae:	2900      	cmp	r1, #0
   897b0:	f040 808f 	bne.w	898d2 <__udivmoddi4+0x1ee>
   897b4:	42b3      	cmp	r3, r6
   897b6:	d302      	bcc.n	897be <__udivmoddi4+0xda>
   897b8:	4282      	cmp	r2, r0
   897ba:	f200 80fc 	bhi.w	899b6 <__udivmoddi4+0x2d2>
   897be:	1a84      	subs	r4, r0, r2
   897c0:	eb66 0603 	sbc.w	r6, r6, r3
   897c4:	2001      	movs	r0, #1
   897c6:	46b4      	mov	ip, r6
   897c8:	2d00      	cmp	r5, #0
   897ca:	d040      	beq.n	8984e <__udivmoddi4+0x16a>
   897cc:	e885 1010 	stmia.w	r5, {r4, ip}
   897d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   897d4:	b912      	cbnz	r2, 897dc <__udivmoddi4+0xf8>
   897d6:	2701      	movs	r7, #1
   897d8:	fbb7 f7f2 	udiv	r7, r7, r2
   897dc:	fab7 fe87 	clz	lr, r7
   897e0:	f1be 0f00 	cmp.w	lr, #0
   897e4:	d135      	bne.n	89852 <__udivmoddi4+0x16e>
   897e6:	2101      	movs	r1, #1
   897e8:	1bf6      	subs	r6, r6, r7
   897ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   897ee:	fa1f f887 	uxth.w	r8, r7
   897f2:	fbb6 f2fc 	udiv	r2, r6, ip
   897f6:	fb0c 6612 	mls	r6, ip, r2, r6
   897fa:	fb08 f002 	mul.w	r0, r8, r2
   897fe:	0c23      	lsrs	r3, r4, #16
   89800:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   89804:	42b0      	cmp	r0, r6
   89806:	d907      	bls.n	89818 <__udivmoddi4+0x134>
   89808:	19f6      	adds	r6, r6, r7
   8980a:	f102 33ff 	add.w	r3, r2, #4294967295
   8980e:	d202      	bcs.n	89816 <__udivmoddi4+0x132>
   89810:	42b0      	cmp	r0, r6
   89812:	f200 80d2 	bhi.w	899ba <__udivmoddi4+0x2d6>
   89816:	461a      	mov	r2, r3
   89818:	1a36      	subs	r6, r6, r0
   8981a:	fbb6 f0fc 	udiv	r0, r6, ip
   8981e:	fb0c 6610 	mls	r6, ip, r0, r6
   89822:	fb08 f800 	mul.w	r8, r8, r0
   89826:	b2a3      	uxth	r3, r4
   89828:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   8982c:	45a0      	cmp	r8, r4
   8982e:	d907      	bls.n	89840 <__udivmoddi4+0x15c>
   89830:	19e4      	adds	r4, r4, r7
   89832:	f100 33ff 	add.w	r3, r0, #4294967295
   89836:	d202      	bcs.n	8983e <__udivmoddi4+0x15a>
   89838:	45a0      	cmp	r8, r4
   8983a:	f200 80b9 	bhi.w	899b0 <__udivmoddi4+0x2cc>
   8983e:	4618      	mov	r0, r3
   89840:	eba4 0408 	sub.w	r4, r4, r8
   89844:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   89848:	e79c      	b.n	89784 <__udivmoddi4+0xa0>
   8984a:	4629      	mov	r1, r5
   8984c:	4628      	mov	r0, r5
   8984e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89852:	fa07 f70e 	lsl.w	r7, r7, lr
   89856:	f1ce 0320 	rsb	r3, lr, #32
   8985a:	fa26 f203 	lsr.w	r2, r6, r3
   8985e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   89862:	fbb2 f1fc 	udiv	r1, r2, ip
   89866:	fa1f f887 	uxth.w	r8, r7
   8986a:	fb0c 2211 	mls	r2, ip, r1, r2
   8986e:	fa06 f60e 	lsl.w	r6, r6, lr
   89872:	fa20 f303 	lsr.w	r3, r0, r3
   89876:	fb01 f908 	mul.w	r9, r1, r8
   8987a:	4333      	orrs	r3, r6
   8987c:	0c1e      	lsrs	r6, r3, #16
   8987e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   89882:	45b1      	cmp	r9, r6
   89884:	fa00 f40e 	lsl.w	r4, r0, lr
   89888:	d909      	bls.n	8989e <__udivmoddi4+0x1ba>
   8988a:	19f6      	adds	r6, r6, r7
   8988c:	f101 32ff 	add.w	r2, r1, #4294967295
   89890:	f080 808c 	bcs.w	899ac <__udivmoddi4+0x2c8>
   89894:	45b1      	cmp	r9, r6
   89896:	f240 8089 	bls.w	899ac <__udivmoddi4+0x2c8>
   8989a:	3902      	subs	r1, #2
   8989c:	443e      	add	r6, r7
   8989e:	eba6 0609 	sub.w	r6, r6, r9
   898a2:	fbb6 f0fc 	udiv	r0, r6, ip
   898a6:	fb0c 6210 	mls	r2, ip, r0, r6
   898aa:	fb00 f908 	mul.w	r9, r0, r8
   898ae:	b29e      	uxth	r6, r3
   898b0:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   898b4:	45b1      	cmp	r9, r6
   898b6:	d907      	bls.n	898c8 <__udivmoddi4+0x1e4>
   898b8:	19f6      	adds	r6, r6, r7
   898ba:	f100 33ff 	add.w	r3, r0, #4294967295
   898be:	d271      	bcs.n	899a4 <__udivmoddi4+0x2c0>
   898c0:	45b1      	cmp	r9, r6
   898c2:	d96f      	bls.n	899a4 <__udivmoddi4+0x2c0>
   898c4:	3802      	subs	r0, #2
   898c6:	443e      	add	r6, r7
   898c8:	eba6 0609 	sub.w	r6, r6, r9
   898cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   898d0:	e78f      	b.n	897f2 <__udivmoddi4+0x10e>
   898d2:	f1c1 0720 	rsb	r7, r1, #32
   898d6:	fa22 f807 	lsr.w	r8, r2, r7
   898da:	408b      	lsls	r3, r1
   898dc:	ea48 0303 	orr.w	r3, r8, r3
   898e0:	fa26 f407 	lsr.w	r4, r6, r7
   898e4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   898e8:	fbb4 f9fe 	udiv	r9, r4, lr
   898ec:	fa1f fc83 	uxth.w	ip, r3
   898f0:	fb0e 4419 	mls	r4, lr, r9, r4
   898f4:	408e      	lsls	r6, r1
   898f6:	fa20 f807 	lsr.w	r8, r0, r7
   898fa:	fb09 fa0c 	mul.w	sl, r9, ip
   898fe:	ea48 0806 	orr.w	r8, r8, r6
   89902:	ea4f 4618 	mov.w	r6, r8, lsr #16
   89906:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   8990a:	45a2      	cmp	sl, r4
   8990c:	fa02 f201 	lsl.w	r2, r2, r1
   89910:	fa00 f601 	lsl.w	r6, r0, r1
   89914:	d908      	bls.n	89928 <__udivmoddi4+0x244>
   89916:	18e4      	adds	r4, r4, r3
   89918:	f109 30ff 	add.w	r0, r9, #4294967295
   8991c:	d244      	bcs.n	899a8 <__udivmoddi4+0x2c4>
   8991e:	45a2      	cmp	sl, r4
   89920:	d942      	bls.n	899a8 <__udivmoddi4+0x2c4>
   89922:	f1a9 0902 	sub.w	r9, r9, #2
   89926:	441c      	add	r4, r3
   89928:	eba4 040a 	sub.w	r4, r4, sl
   8992c:	fbb4 f0fe 	udiv	r0, r4, lr
   89930:	fb0e 4410 	mls	r4, lr, r0, r4
   89934:	fb00 fc0c 	mul.w	ip, r0, ip
   89938:	fa1f f888 	uxth.w	r8, r8
   8993c:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   89940:	45a4      	cmp	ip, r4
   89942:	d907      	bls.n	89954 <__udivmoddi4+0x270>
   89944:	18e4      	adds	r4, r4, r3
   89946:	f100 3eff 	add.w	lr, r0, #4294967295
   8994a:	d229      	bcs.n	899a0 <__udivmoddi4+0x2bc>
   8994c:	45a4      	cmp	ip, r4
   8994e:	d927      	bls.n	899a0 <__udivmoddi4+0x2bc>
   89950:	3802      	subs	r0, #2
   89952:	441c      	add	r4, r3
   89954:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89958:	fba0 8902 	umull	r8, r9, r0, r2
   8995c:	eba4 0c0c 	sub.w	ip, r4, ip
   89960:	45cc      	cmp	ip, r9
   89962:	46c2      	mov	sl, r8
   89964:	46ce      	mov	lr, r9
   89966:	d315      	bcc.n	89994 <__udivmoddi4+0x2b0>
   89968:	d012      	beq.n	89990 <__udivmoddi4+0x2ac>
   8996a:	b155      	cbz	r5, 89982 <__udivmoddi4+0x29e>
   8996c:	ebb6 030a 	subs.w	r3, r6, sl
   89970:	eb6c 060e 	sbc.w	r6, ip, lr
   89974:	fa06 f707 	lsl.w	r7, r6, r7
   89978:	40cb      	lsrs	r3, r1
   8997a:	431f      	orrs	r7, r3
   8997c:	40ce      	lsrs	r6, r1
   8997e:	602f      	str	r7, [r5, #0]
   89980:	606e      	str	r6, [r5, #4]
   89982:	2100      	movs	r1, #0
   89984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89988:	4610      	mov	r0, r2
   8998a:	e6f7      	b.n	8977c <__udivmoddi4+0x98>
   8998c:	4689      	mov	r9, r1
   8998e:	e6de      	b.n	8974e <__udivmoddi4+0x6a>
   89990:	4546      	cmp	r6, r8
   89992:	d2ea      	bcs.n	8996a <__udivmoddi4+0x286>
   89994:	ebb8 0a02 	subs.w	sl, r8, r2
   89998:	eb69 0e03 	sbc.w	lr, r9, r3
   8999c:	3801      	subs	r0, #1
   8999e:	e7e4      	b.n	8996a <__udivmoddi4+0x286>
   899a0:	4670      	mov	r0, lr
   899a2:	e7d7      	b.n	89954 <__udivmoddi4+0x270>
   899a4:	4618      	mov	r0, r3
   899a6:	e78f      	b.n	898c8 <__udivmoddi4+0x1e4>
   899a8:	4681      	mov	r9, r0
   899aa:	e7bd      	b.n	89928 <__udivmoddi4+0x244>
   899ac:	4611      	mov	r1, r2
   899ae:	e776      	b.n	8989e <__udivmoddi4+0x1ba>
   899b0:	3802      	subs	r0, #2
   899b2:	443c      	add	r4, r7
   899b4:	e744      	b.n	89840 <__udivmoddi4+0x15c>
   899b6:	4608      	mov	r0, r1
   899b8:	e706      	b.n	897c8 <__udivmoddi4+0xe4>
   899ba:	3a02      	subs	r2, #2
   899bc:	443e      	add	r6, r7
   899be:	e72b      	b.n	89818 <__udivmoddi4+0x134>

000899c0 <__aeabi_idiv0>:
   899c0:	4770      	bx	lr
   899c2:	bf00      	nop
   899c4:	00000001 	.word	0x00000001
   899c8:	00000002 	.word	0x00000002
   899cc:	00000004 	.word	0x00000004
   899d0:	00000008 	.word	0x00000008
   899d4:	00000010 	.word	0x00000010
   899d8:	00000020 	.word	0x00000020
   899dc:	00000040 	.word	0x00000040
   899e0:	00000080 	.word	0x00000080
   899e4:	00000100 	.word	0x00000100
   899e8:	00000200 	.word	0x00000200
   899ec:	00000400 	.word	0x00000400
   899f0:	000f4240 	.word	0x000f4240
   899f4:	000000c0 	.word	0x000000c0
	...
   89a00:	20695052 	.word	0x20695052
   89a04:	63616e69 	.word	0x63616e69
   89a08:	65766974 	.word	0x65766974
   89a0c:	00202020 	.word	0x00202020
   89a10:	65726944 	.word	0x65726944
   89a14:	6f697463 	.word	0x6f697463
   89a18:	25203a6e 	.word	0x25203a6e
   89a1c:	20206434 	.word	0x20206434
   89a20:	00000020 	.word	0x00000020
   89a24:	62206f6e 	.word	0x62206f6e
   89a28:	206c6c61 	.word	0x206c6c61
   89a2c:	6e756f66 	.word	0x6e756f66
   89a30:	00202064 	.word	0x00202064
   89a34:	69766148 	.word	0x69766148
   89a38:	6220676e 	.word	0x6220676e
   89a3c:	3a6c6c61 	.word	0x3a6c6c61
   89a40:	64312520 	.word	0x64312520
   89a44:	00000000 	.word	0x00000000
   89a48:	69442020 	.word	0x69442020
   89a4c:	74636572 	.word	0x74636572
   89a50:	3a6e6f69 	.word	0x3a6e6f69
   89a54:	2e332520 	.word	0x2e332520
   89a58:	20206631 	.word	0x20206631
   89a5c:	00000000 	.word	0x00000000
   89a60:	696c6163 	.word	0x696c6163
   89a64:	74617262 	.word	0x74617262
   89a68:	6f632065 	.word	0x6f632065
   89a6c:	7361706d 	.word	0x7361706d
   89a70:	00000073 	.word	0x00000073
   89a74:	69442020 	.word	0x69442020
   89a78:	74636572 	.word	0x74636572
   89a7c:	3a6e6f69 	.word	0x3a6e6f69
   89a80:	64312520 	.word	0x64312520
   89a84:	00002020 	.word	0x00002020
   89a88:	74756873 	.word	0x74756873
   89a8c:	676e6974 	.word	0x676e6974
   89a90:	776f6420 	.word	0x776f6420
   89a94:	2e2e2e6e 	.word	0x2e2e2e6e
   89a98:	00000000 	.word	0x00000000
   89a9c:	666e6f63 	.word	0x666e6f63
   89aa0:	206d7269 	.word	0x206d7269
   89aa4:	74756873 	.word	0x74756873
   89aa8:	6e776f64 	.word	0x6e776f64
   89aac:	0000003f 	.word	0x0000003f
   89ab0:	20202020 	.word	0x20202020
   89ab4:	534f6f6e 	.word	0x534f6f6e
   89ab8:	454e4f20 	.word	0x454e4f20
   89abc:	00000000 	.word	0x00000000
   89ac0:	74614d20 	.word	0x74614d20
   89ac4:	00006863 	.word	0x00006863
   89ac8:	6e655320 	.word	0x6e655320
   89acc:	73726f73 	.word	0x73726f73
   89ad0:	00000000 	.word	0x00000000
   89ad4:	74655320 	.word	0x74655320
   89ad8:	676e6974 	.word	0x676e6974
   89adc:	00000073 	.word	0x00000073
   89ae0:	00089ab0 	.word	0x00089ab0
   89ae4:	00089ac0 	.word	0x00089ac0
   89ae8:	00089ac8 	.word	0x00089ac8
   89aec:	00089ad4 	.word	0x00089ad4
   89af0:	6c614220 	.word	0x6c614220
   89af4:	0000006c 	.word	0x0000006c
   89af8:	6d6f4320 	.word	0x6d6f4320
   89afc:	73736170 	.word	0x73736170
   89b00:	00000000 	.word	0x00000000
   89b04:	6e694c20 	.word	0x6e694c20
   89b08:	00000065 	.word	0x00000065
   89b0c:	00000020 	.word	0x00000020
   89b10:	00089af0 	.word	0x00089af0
   89b14:	00089af8 	.word	0x00089af8
   89b18:	00089b04 	.word	0x00089b04
   89b1c:	00089b0c 	.word	0x00089b0c
   89b20:	00089b0c 	.word	0x00089b0c
   89b24:	00089b0c 	.word	0x00089b0c
   89b28:	00089b0c 	.word	0x00089b0c
   89b2c:	00089b0c 	.word	0x00089b0c
   89b30:	0000003e 	.word	0x0000003e
   89b34:	25753325 	.word	0x25753325
   89b38:	00000025 	.word	0x00000025
   89b3c:	75322520 	.word	0x75322520
   89b40:	00002525 	.word	0x00002525
   89b44:	31252020 	.word	0x31252020
   89b48:	00252575 	.word	0x00252575
   89b4c:	746f6f62 	.word	0x746f6f62
   89b50:	20676e69 	.word	0x20676e69
   89b54:	534f6f6e 	.word	0x534f6f6e
   89b58:	00202020 	.word	0x00202020
   89b5c:	0000002e 	.word	0x0000002e

00089b60 <_global_impure_ptr>:
   89b60:	200701a8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   89b70:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   89b80:	46454443 00000000 33323130 37363534     CDEF....01234567
   89b90:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   89ba0:	0000296c 00000030                       l)..0...

00089ba8 <blanks.7223>:
   89ba8:	20202020 20202020 20202020 20202020                     

00089bb8 <zeroes.7224>:
   89bb8:	30303030 30303030 30303030 30303030     0000000000000000
   89bc8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00089bd8 <__mprec_bigtens>:
   89bd8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   89be8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   89bf8:	7f73bf3c 75154fdd                       <.s..O.u

00089c00 <__mprec_tens>:
   89c00:	00000000 3ff00000 00000000 40240000     .......?......$@
   89c10:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   89c20:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   89c30:	00000000 412e8480 00000000 416312d0     .......A......cA
   89c40:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   89c50:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   89c60:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   89c70:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   89c80:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   89c90:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   89ca0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   89cb0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   89cc0:	79d99db4 44ea7843                       ...yCx.D

00089cc8 <p05.6055>:
   89cc8:	00000005 00000019 0000007d 00000043     ........}...C...
   89cd8:	49534f50 00000058 0000002e              POSIX.......

00089ce4 <_ctype_>:
   89ce4:	20202000 20202020 28282020 20282828     .         ((((( 
   89cf4:	20202020 20202020 20202020 20202020                     
   89d04:	10108820 10101010 10101010 10101010      ...............
   89d14:	04040410 04040404 10040404 10101010     ................
   89d24:	41411010 41414141 01010101 01010101     ..AAAAAA........
   89d34:	01010101 01010101 01010101 10101010     ................
   89d44:	42421010 42424242 02020202 02020202     ..BBBBBB........
   89d54:	02020202 02020202 02020202 10101010     ................
   89d64:	00000020 00000000 00000000 00000000      ...............
	...

00089de8 <_init>:
   89de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89dea:	bf00      	nop
   89dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89dee:	bc08      	pop	{r3}
   89df0:	469e      	mov	lr, r3
   89df2:	4770      	bx	lr

00089df4 <__init_array_start>:
   89df4:	00086f4d 	.word	0x00086f4d

00089df8 <__frame_dummy_init_array_entry>:
   89df8:	00080119                                ....

00089dfc <_fini>:
   89dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89dfe:	bf00      	nop
   89e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89e02:	bc08      	pop	{r3}
   89e04:	469e      	mov	lr, r3
   89e06:	4770      	bx	lr

00089e08 <__fini_array_start>:
   89e08:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007019c 	.word	0x2007019c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <print_menu>:
2007018c:	00000101                                         .

2007018d <allow_leds>:
2007018d:	02000001                                         ...

20070190 <menu_info>:
20070190:	04020202 03010101 01010101              ............

2007019c <SystemCoreClock>:
2007019c:	003d0900                                ..=.

200701a0 <update_dots>:
200701a0:	00000001                                ....

200701a4 <_impure_ptr>:
200701a4:	200701a8                                ... 

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	20070fdc                                ... 

200705d4 <__malloc_av_>:
	...
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 

200709dc <__malloc_sbrk_base>:
200709dc:	ffffffff                                ....

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__global_locale>:
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00000043 00000000 00000000 00000000     C...............
	...
20070ac4:	00089511 000890b1 00000000 00089ce4     ................
20070ad4:	00089ce0 00089b84 00089b84 00089b84     ................
20070ae4:	00089b84 00089b84 00089b84 00089b84     ................
20070af4:	00089b84 00089b84 ffffffff ffffffff     ................
20070b04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
