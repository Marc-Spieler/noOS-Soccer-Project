
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009744  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00089744  00089744  00019744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b50  20070000  0008974c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004c8  20070b50  0008a29c  00020b50  2**2
                  ALLOC
  4 .stack        00002000  20071018  0008a764  00020b50  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b79  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001ff9c  00000000  00000000  00020bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004097  00000000  00000000  00040b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a04e  00000000  00000000  00044c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001198  00000000  00000000  0004ec53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000010c0  00000000  00000000  0004fdeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c6d7  00000000  00000000  00050eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016a22  00000000  00000000  0006d582  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006a305  00000000  00000000  00083fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005774  00000000  00000000  000ee2ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	18 30 07 20 a1 3d 08 00 99 3d 08 00 99 3d 08 00     .0. .=...=...=..
   80010:	99 3d 08 00 99 3d 08 00 99 3d 08 00 00 00 00 00     .=...=...=......
	...
   8002c:	99 3d 08 00 99 3d 08 00 00 00 00 00 99 3d 08 00     .=...=.......=..
   8003c:	e9 2e 08 00 99 3d 08 00 99 3d 08 00 99 3d 08 00     .....=...=...=..
   8004c:	99 3d 08 00 99 3d 08 00 99 3d 08 00 99 3d 08 00     .=...=...=...=..
   8005c:	99 3d 08 00 99 3d 08 00 99 3d 08 00 00 00 00 00     .=...=...=......
   8006c:	99 3d 08 00 99 3d 08 00 99 3d 08 00 99 3d 08 00     .=...=...=...=..
	...
   80084:	99 3d 08 00 99 3d 08 00 99 3d 08 00 99 3d 08 00     .=...=...=...=..
   80094:	99 3d 08 00 d5 10 08 00 99 3d 08 00 99 3d 08 00     .=.......=...=..
   800a4:	00 00 00 00 99 3d 08 00 99 3d 08 00 d9 2b 08 00     .....=...=...+..
   800b4:	99 3d 08 00 99 3d 08 00 99 3d 08 00 99 3d 08 00     .=...=...=...=..
   800c4:	99 3d 08 00 99 3d 08 00 99 3d 08 00 99 3d 08 00     .=...=...=...=..
   800d4:	99 3d 08 00 99 3d 08 00 f5 0b 08 00 99 3d 08 00     .=...=.......=..
   800e4:	99 3d 08 00 99 3d 08 00 99 3d 08 00 99 3d 08 00     .=...=...=...=..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b50 	.word	0x20070b50
   80110:	00000000 	.word	0x00000000
   80114:	0008974c 	.word	0x0008974c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008974c 	.word	0x0008974c
   80154:	20070b54 	.word	0x20070b54
   80158:	0008974c 	.word	0x0008974c
   8015c:	00000000 	.word	0x00000000

00080160 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   80160:	b580      	push	{r7, lr}
   80162:	b082      	sub	sp, #8
   80164:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   80166:	2300      	movs	r3, #0
   80168:	71fb      	strb	r3, [r7, #7]
   8016a:	e009      	b.n	80180 <sd_mmc_init+0x20>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   8016c:	79fb      	ldrb	r3, [r7, #7]
   8016e:	4a0a      	ldr	r2, [pc, #40]	; (80198 <sd_mmc_init+0x38>)
   80170:	015b      	lsls	r3, r3, #5
   80172:	4413      	add	r3, r2
   80174:	330a      	adds	r3, #10
   80176:	2204      	movs	r2, #4
   80178:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   8017a:	79fb      	ldrb	r3, [r7, #7]
   8017c:	3301      	adds	r3, #1
   8017e:	71fb      	strb	r3, [r7, #7]
   80180:	79fb      	ldrb	r3, [r7, #7]
   80182:	2b00      	cmp	r3, #0
   80184:	d0f2      	beq.n	8016c <sd_mmc_init+0xc>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   80186:	4b05      	ldr	r3, [pc, #20]	; (8019c <sd_mmc_init+0x3c>)
   80188:	22ff      	movs	r2, #255	; 0xff
   8018a:	701a      	strb	r2, [r3, #0]
	driver_init();
   8018c:	4b04      	ldr	r3, [pc, #16]	; (801a0 <sd_mmc_init+0x40>)
   8018e:	4798      	blx	r3
}
   80190:	bf00      	nop
   80192:	3708      	adds	r7, #8
   80194:	46bd      	mov	sp, r7
   80196:	bd80      	pop	{r7, pc}
   80198:	20070b6c 	.word	0x20070b6c
   8019c:	20070b8c 	.word	0x20070b8c
   801a0:	000801ed 	.word	0x000801ed

000801a4 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   801a4:	b580      	push	{r7, lr}
   801a6:	b082      	sub	sp, #8
   801a8:	af00      	add	r7, sp, #0
   801aa:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   801ac:	6878      	ldr	r0, [r7, #4]
   801ae:	4b04      	ldr	r3, [pc, #16]	; (801c0 <usart_spi_enable+0x1c>)
   801b0:	4798      	blx	r3
	usart_enable_rx(p_usart);
   801b2:	6878      	ldr	r0, [r7, #4]
   801b4:	4b03      	ldr	r3, [pc, #12]	; (801c4 <usart_spi_enable+0x20>)
   801b6:	4798      	blx	r3
}
   801b8:	bf00      	nop
   801ba:	3708      	adds	r7, #8
   801bc:	46bd      	mov	sp, r7
   801be:	bd80      	pop	{r7, pc}
   801c0:	00080851 	.word	0x00080851
   801c4:	00080899 	.word	0x00080899

000801c8 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   801c8:	b580      	push	{r7, lr}
   801ca:	b082      	sub	sp, #8
   801cc:	af00      	add	r7, sp, #0
   801ce:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   801d0:	6878      	ldr	r0, [r7, #4]
   801d2:	4b04      	ldr	r3, [pc, #16]	; (801e4 <usart_spi_disable+0x1c>)
   801d4:	4798      	blx	r3
	usart_disable_rx(p_usart);
   801d6:	6878      	ldr	r0, [r7, #4]
   801d8:	4b03      	ldr	r3, [pc, #12]	; (801e8 <usart_spi_disable+0x20>)
   801da:	4798      	blx	r3
}
   801dc:	bf00      	nop
   801de:	3708      	adds	r7, #8
   801e0:	46bd      	mov	sp, r7
   801e2:	bd80      	pop	{r7, pc}
   801e4:	00080869 	.word	0x00080869
   801e8:	000808b1 	.word	0x000808b1

000801ec <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
   801ec:	b580      	push	{r7, lr}
   801ee:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_HSMCI);
   801f0:	2015      	movs	r0, #21
   801f2:	4b0e      	ldr	r3, [pc, #56]	; (8022c <hsmci_init+0x40>)
   801f4:	4798      	blx	r3
#ifdef HSMCI_SR_DMADONE
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
   801f6:	2027      	movs	r0, #39	; 0x27
   801f8:	4b0c      	ldr	r3, [pc, #48]	; (8022c <hsmci_init+0x40>)
   801fa:	4798      	blx	r3
	pmc_enable_periph_clk(ID_XDMAC);
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
   801fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   80200:	2272      	movs	r2, #114	; 0x72
   80202:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
   80204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   80208:	2272      	movs	r2, #114	; 0x72
   8020a:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
   8020c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   80210:	2211      	movs	r2, #17
   80212:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
   80214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   80218:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   8021c:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
   8021e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   80222:	2205      	movs	r2, #5
   80224:	601a      	str	r2, [r3, #0]
}
   80226:	bf00      	nop
   80228:	bd80      	pop	{r7, pc}
   8022a:	bf00      	nop
   8022c:	000838c5 	.word	0x000838c5

00080230 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   80230:	b480      	push	{r7}
   80232:	b085      	sub	sp, #20
   80234:	af00      	add	r7, sp, #0
   80236:	60f8      	str	r0, [r7, #12]
   80238:	60b9      	str	r1, [r7, #8]
   8023a:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   8023c:	68bb      	ldr	r3, [r7, #8]
   8023e:	2b00      	cmp	r3, #0
   80240:	d007      	beq.n	80252 <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   80242:	68bb      	ldr	r3, [r7, #8]
   80244:	681a      	ldr	r2, [r3, #0]
   80246:	68fb      	ldr	r3, [r7, #12]
   80248:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   8024a:	68bb      	ldr	r3, [r7, #8]
   8024c:	685a      	ldr	r2, [r3, #4]
   8024e:	68fb      	ldr	r3, [r7, #12]
   80250:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   80252:	687b      	ldr	r3, [r7, #4]
   80254:	2b00      	cmp	r3, #0
   80256:	d007      	beq.n	80268 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   80258:	687b      	ldr	r3, [r7, #4]
   8025a:	681a      	ldr	r2, [r3, #0]
   8025c:	68fb      	ldr	r3, [r7, #12]
   8025e:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   80260:	687b      	ldr	r3, [r7, #4]
   80262:	685a      	ldr	r2, [r3, #4]
   80264:	68fb      	ldr	r3, [r7, #12]
   80266:	61da      	str	r2, [r3, #28]
	}
}
   80268:	bf00      	nop
   8026a:	3714      	adds	r7, #20
   8026c:	46bd      	mov	sp, r7
   8026e:	bc80      	pop	{r7}
   80270:	4770      	bx	lr

00080272 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   80272:	b480      	push	{r7}
   80274:	b085      	sub	sp, #20
   80276:	af00      	add	r7, sp, #0
   80278:	60f8      	str	r0, [r7, #12]
   8027a:	60b9      	str	r1, [r7, #8]
   8027c:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   8027e:	68bb      	ldr	r3, [r7, #8]
   80280:	2b00      	cmp	r3, #0
   80282:	d007      	beq.n	80294 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   80284:	68bb      	ldr	r3, [r7, #8]
   80286:	681a      	ldr	r2, [r3, #0]
   80288:	68fb      	ldr	r3, [r7, #12]
   8028a:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   8028c:	68bb      	ldr	r3, [r7, #8]
   8028e:	685a      	ldr	r2, [r3, #4]
   80290:	68fb      	ldr	r3, [r7, #12]
   80292:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
   80294:	687b      	ldr	r3, [r7, #4]
   80296:	2b00      	cmp	r3, #0
   80298:	d007      	beq.n	802aa <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   8029a:	687b      	ldr	r3, [r7, #4]
   8029c:	681a      	ldr	r2, [r3, #0]
   8029e:	68fb      	ldr	r3, [r7, #12]
   802a0:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   802a2:	687b      	ldr	r3, [r7, #4]
   802a4:	685a      	ldr	r2, [r3, #4]
   802a6:	68fb      	ldr	r3, [r7, #12]
   802a8:	615a      	str	r2, [r3, #20]
	}
}
   802aa:	bf00      	nop
   802ac:	3714      	adds	r7, #20
   802ae:	46bd      	mov	sp, r7
   802b0:	bc80      	pop	{r7}
   802b2:	4770      	bx	lr

000802b4 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   802b4:	b480      	push	{r7}
   802b6:	b083      	sub	sp, #12
   802b8:	af00      	add	r7, sp, #0
   802ba:	6078      	str	r0, [r7, #4]
   802bc:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   802be:	683a      	ldr	r2, [r7, #0]
   802c0:	f240 1301 	movw	r3, #257	; 0x101
   802c4:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   802c6:	687a      	ldr	r2, [r7, #4]
   802c8:	6213      	str	r3, [r2, #32]
}
   802ca:	bf00      	nop
   802cc:	370c      	adds	r7, #12
   802ce:	46bd      	mov	sp, r7
   802d0:	bc80      	pop	{r7}
   802d2:	4770      	bx	lr

000802d4 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   802d4:	b480      	push	{r7}
   802d6:	b083      	sub	sp, #12
   802d8:	af00      	add	r7, sp, #0
   802da:	6078      	str	r0, [r7, #4]
   802dc:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   802de:	683a      	ldr	r2, [r7, #0]
   802e0:	f240 2302 	movw	r3, #514	; 0x202
   802e4:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   802e6:	687a      	ldr	r2, [r7, #4]
   802e8:	6213      	str	r3, [r2, #32]
}
   802ea:	bf00      	nop
   802ec:	370c      	adds	r7, #12
   802ee:	46bd      	mov	sp, r7
   802f0:	bc80      	pop	{r7}
   802f2:	4770      	bx	lr

000802f4 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   802f4:	b480      	push	{r7}
   802f6:	b087      	sub	sp, #28
   802f8:	af00      	add	r7, sp, #0
   802fa:	6078      	str	r0, [r7, #4]
   802fc:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
   802fe:	2300      	movs	r3, #0
   80300:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
   80302:	683b      	ldr	r3, [r7, #0]
   80304:	681b      	ldr	r3, [r3, #0]
   80306:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80308:	683b      	ldr	r3, [r7, #0]
   8030a:	685b      	ldr	r3, [r3, #4]
   8030c:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
   80310:	683a      	ldr	r2, [r7, #0]
   80312:	7a92      	ldrb	r2, [r2, #10]
   80314:	0252      	lsls	r2, r2, #9
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80316:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   80318:	683a      	ldr	r2, [r7, #0]
   8031a:	8a92      	ldrh	r2, [r2, #20]
			(p_channel->polarity << 9) |
   8031c:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
   8031e:	683a      	ldr	r2, [r7, #0]
   80320:	7d92      	ldrb	r2, [r2, #22]
   80322:	0412      	lsls	r2, r2, #16
			(p_channel->counter_event) |
   80324:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
   80326:	683a      	ldr	r2, [r7, #0]
   80328:	7dd2      	ldrb	r2, [r2, #23]
   8032a:	0452      	lsls	r2, r2, #17
			(p_channel->b_deadtime_generator << 16) |
   8032c:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
   8032e:	683a      	ldr	r2, [r7, #0]
   80330:	7e12      	ldrb	r2, [r2, #24]
   80332:	0492      	lsls	r2, r2, #18
			(p_channel->b_pwmh_output_inverted << 17) |
   80334:	4313      	orrs	r3, r2
#endif
			(p_channel->alignment);
   80336:	683a      	ldr	r2, [r7, #0]
   80338:	8912      	ldrh	r2, [r2, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8033a:	4313      	orrs	r3, r2
   8033c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   8033e:	687a      	ldr	r2, [r7, #4]
   80340:	693b      	ldr	r3, [r7, #16]
   80342:	3310      	adds	r3, #16
   80344:	015b      	lsls	r3, r3, #5
   80346:	4413      	add	r3, r2
   80348:	697a      	ldr	r2, [r7, #20]
   8034a:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8034c:	683b      	ldr	r3, [r7, #0]
   8034e:	68da      	ldr	r2, [r3, #12]
   80350:	6879      	ldr	r1, [r7, #4]
   80352:	693b      	ldr	r3, [r7, #16]
   80354:	3310      	adds	r3, #16
   80356:	015b      	lsls	r3, r3, #5
   80358:	440b      	add	r3, r1
   8035a:	3304      	adds	r3, #4
   8035c:	601a      	str	r2, [r3, #0]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   8035e:	683b      	ldr	r3, [r7, #0]
   80360:	691a      	ldr	r2, [r3, #16]
   80362:	6879      	ldr	r1, [r7, #4]
   80364:	693b      	ldr	r3, [r7, #16]
   80366:	015b      	lsls	r3, r3, #5
   80368:	440b      	add	r3, r1
   8036a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   8036e:	601a      	str	r2, [r3, #0]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80370:	683b      	ldr	r3, [r7, #0]
   80372:	7d9b      	ldrb	r3, [r3, #22]
   80374:	2b00      	cmp	r3, #0
   80376:	d00d      	beq.n	80394 <pwm_channel_init+0xa0>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80378:	683b      	ldr	r3, [r7, #0]
   8037a:	8b9b      	ldrh	r3, [r3, #28]
   8037c:	041b      	lsls	r3, r3, #16
   8037e:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80380:	683b      	ldr	r3, [r7, #0]
   80382:	8b5b      	ldrh	r3, [r3, #26]
   80384:	431a      	orrs	r2, r3
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80386:	6879      	ldr	r1, [r7, #4]
   80388:	693b      	ldr	r3, [r7, #16]
   8038a:	015b      	lsls	r3, r3, #5
   8038c:	440b      	add	r3, r1
   8038e:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80392:	601a      	str	r2, [r3, #0]
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80394:	687b      	ldr	r3, [r7, #4]
   80396:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   80398:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   8039c:	693b      	ldr	r3, [r7, #16]
   8039e:	fa01 f303 	lsl.w	r3, r1, r3
   803a2:	43db      	mvns	r3, r3
   803a4:	4013      	ands	r3, r2
   803a6:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   803a8:	683b      	ldr	r3, [r7, #0]
   803aa:	7f9b      	ldrb	r3, [r3, #30]
   803ac:	461a      	mov	r2, r3
   803ae:	693b      	ldr	r3, [r7, #16]
   803b0:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   803b2:	683b      	ldr	r3, [r7, #0]
   803b4:	7fdb      	ldrb	r3, [r3, #31]
   803b6:	4619      	mov	r1, r3
   803b8:	693b      	ldr	r3, [r7, #16]
   803ba:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   803be:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   803c0:	4313      	orrs	r3, r2
   803c2:	461a      	mov	r2, r3
   803c4:	697b      	ldr	r3, [r7, #20]
   803c6:	4313      	orrs	r3, r2
   803c8:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OS = tmp_reg;
   803ca:	687b      	ldr	r3, [r7, #4]
   803cc:	697a      	ldr	r2, [r7, #20]
   803ce:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   803d0:	687b      	ldr	r3, [r7, #4]
   803d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   803d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   803d8:	693b      	ldr	r3, [r7, #16]
   803da:	fa01 f303 	lsl.w	r3, r1, r3
   803de:	43db      	mvns	r3, r3
   803e0:	4013      	ands	r3, r2
   803e2:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   803e4:	683b      	ldr	r3, [r7, #0]
   803e6:	f893 3020 	ldrb.w	r3, [r3, #32]
   803ea:	461a      	mov	r2, r3
   803ec:	693b      	ldr	r3, [r7, #16]
   803ee:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   803f0:	683b      	ldr	r3, [r7, #0]
   803f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   803f6:	4619      	mov	r1, r3
   803f8:	693b      	ldr	r3, [r7, #16]
   803fa:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   803fe:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80400:	4313      	orrs	r3, r2
   80402:	461a      	mov	r2, r3
   80404:	697b      	ldr	r3, [r7, #20]
   80406:	4313      	orrs	r3, r2
   80408:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OOV = tmp_reg;
   8040a:	687b      	ldr	r3, [r7, #4]
   8040c:	697a      	ldr	r2, [r7, #20]
   8040e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80410:	2201      	movs	r2, #1
   80412:	693b      	ldr	r3, [r7, #16]
   80414:	fa02 f303 	lsl.w	r3, r2, r3
   80418:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
   8041a:	683b      	ldr	r3, [r7, #0]
   8041c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   80420:	2b00      	cmp	r3, #0
   80422:	d006      	beq.n	80432 <pwm_channel_init+0x13e>
		p_pwm->PWM_SCM |= channel;
   80424:	687b      	ldr	r3, [r7, #4]
   80426:	6a1a      	ldr	r2, [r3, #32]
   80428:	68fb      	ldr	r3, [r7, #12]
   8042a:	431a      	orrs	r2, r3
   8042c:	687b      	ldr	r3, [r7, #4]
   8042e:	621a      	str	r2, [r3, #32]
   80430:	e006      	b.n	80440 <pwm_channel_init+0x14c>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80432:	687b      	ldr	r3, [r7, #4]
   80434:	6a1a      	ldr	r2, [r3, #32]
   80436:	68fb      	ldr	r3, [r7, #12]
   80438:	43db      	mvns	r3, r3
   8043a:	401a      	ands	r2, r3
   8043c:	687b      	ldr	r3, [r7, #4]
   8043e:	621a      	str	r2, [r3, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80440:	683b      	ldr	r3, [r7, #0]
   80442:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   80446:	2b01      	cmp	r3, #1
   80448:	d109      	bne.n	8045e <pwm_channel_init+0x16a>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8044a:	687b      	ldr	r3, [r7, #4]
   8044c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8044e:	2101      	movs	r1, #1
   80450:	693a      	ldr	r2, [r7, #16]
   80452:	fa01 f202 	lsl.w	r2, r1, r2
   80456:	431a      	orrs	r2, r3
   80458:	687b      	ldr	r3, [r7, #4]
   8045a:	669a      	str	r2, [r3, #104]	; 0x68
   8045c:	e009      	b.n	80472 <pwm_channel_init+0x17e>
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   8045e:	687b      	ldr	r3, [r7, #4]
   80460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80462:	2101      	movs	r1, #1
   80464:	693a      	ldr	r2, [r7, #16]
   80466:	fa01 f202 	lsl.w	r2, r1, r2
   8046a:	43d2      	mvns	r2, r2
   8046c:	401a      	ands	r2, r3
   8046e:	687b      	ldr	r3, [r7, #4]
   80470:	669a      	str	r2, [r3, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80472:	683b      	ldr	r3, [r7, #0]
   80474:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   80478:	2b01      	cmp	r3, #1
   8047a:	d10a      	bne.n	80492 <pwm_channel_init+0x19e>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8047c:	687b      	ldr	r3, [r7, #4]
   8047e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80480:	2101      	movs	r1, #1
   80482:	693a      	ldr	r2, [r7, #16]
   80484:	fa01 f202 	lsl.w	r2, r1, r2
   80488:	0412      	lsls	r2, r2, #16
   8048a:	431a      	orrs	r2, r3
   8048c:	687b      	ldr	r3, [r7, #4]
   8048e:	669a      	str	r2, [r3, #104]	; 0x68
   80490:	e00a      	b.n	804a8 <pwm_channel_init+0x1b4>
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80492:	687b      	ldr	r3, [r7, #4]
   80494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80496:	2101      	movs	r1, #1
   80498:	693a      	ldr	r2, [r7, #16]
   8049a:	fa01 f202 	lsl.w	r2, r1, r2
   8049e:	0412      	lsls	r2, r2, #16
   804a0:	43d2      	mvns	r2, r2
   804a2:	401a      	ands	r2, r3
   804a4:	687b      	ldr	r3, [r7, #4]
   804a6:	669a      	str	r2, [r3, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
   804a8:	2300      	movs	r3, #0
   804aa:	60bb      	str	r3, [r7, #8]
#if (SAM3XA)
	if (ch_num < 4) {
   804ac:	693b      	ldr	r3, [r7, #16]
   804ae:	2b03      	cmp	r3, #3
   804b0:	d81d      	bhi.n	804ee <pwm_channel_init+0x1fa>
		ch_num *= 8;
   804b2:	693b      	ldr	r3, [r7, #16]
   804b4:	00db      	lsls	r3, r3, #3
   804b6:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE1;
   804b8:	687b      	ldr	r3, [r7, #4]
   804ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   804bc:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   804be:	22ff      	movs	r2, #255	; 0xff
   804c0:	693b      	ldr	r3, [r7, #16]
   804c2:	fa02 f303 	lsl.w	r3, r2, r3
   804c6:	43db      	mvns	r3, r3
   804c8:	461a      	mov	r2, r3
   804ca:	68bb      	ldr	r3, [r7, #8]
   804cc:	4013      	ands	r3, r2
   804ce:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   804d0:	683b      	ldr	r3, [r7, #0]
   804d2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   804d6:	461a      	mov	r2, r3
   804d8:	693b      	ldr	r3, [r7, #16]
   804da:	fa02 f303 	lsl.w	r3, r2, r3
   804de:	461a      	mov	r2, r3
   804e0:	68bb      	ldr	r3, [r7, #8]
   804e2:	4313      	orrs	r3, r2
   804e4:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE1 = fault_enable_reg;
   804e6:	687b      	ldr	r3, [r7, #4]
   804e8:	68ba      	ldr	r2, [r7, #8]
   804ea:	66da      	str	r2, [r3, #108]	; 0x6c
   804ec:	e01f      	b.n	8052e <pwm_channel_init+0x23a>
	} else {
		ch_num -= 4;
   804ee:	693b      	ldr	r3, [r7, #16]
   804f0:	3b04      	subs	r3, #4
   804f2:	613b      	str	r3, [r7, #16]
		ch_num *= 8;
   804f4:	693b      	ldr	r3, [r7, #16]
   804f6:	00db      	lsls	r3, r3, #3
   804f8:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE2;
   804fa:	687b      	ldr	r3, [r7, #4]
   804fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   804fe:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80500:	22ff      	movs	r2, #255	; 0xff
   80502:	693b      	ldr	r3, [r7, #16]
   80504:	fa02 f303 	lsl.w	r3, r2, r3
   80508:	43db      	mvns	r3, r3
   8050a:	461a      	mov	r2, r3
   8050c:	68bb      	ldr	r3, [r7, #8]
   8050e:	4013      	ands	r3, r2
   80510:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80512:	683b      	ldr	r3, [r7, #0]
   80514:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   80518:	461a      	mov	r2, r3
   8051a:	693b      	ldr	r3, [r7, #16]
   8051c:	fa02 f303 	lsl.w	r3, r2, r3
   80520:	461a      	mov	r2, r3
   80522:	68bb      	ldr	r3, [r7, #8]
   80524:	4313      	orrs	r3, r2
   80526:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80528:	687b      	ldr	r3, [r7, #4]
   8052a:	68ba      	ldr	r2, [r7, #8]
   8052c:	671a      	str	r2, [r3, #112]	; 0x70
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
   8052e:	2300      	movs	r3, #0
}
   80530:	4618      	mov	r0, r3
   80532:	371c      	adds	r7, #28
   80534:	46bd      	mov	sp, r7
   80536:	bc80      	pop	{r7}
   80538:	4770      	bx	lr

0008053a <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   8053a:	b480      	push	{r7}
   8053c:	b087      	sub	sp, #28
   8053e:	af00      	add	r7, sp, #0
   80540:	60f8      	str	r0, [r7, #12]
   80542:	60b9      	str	r1, [r7, #8]
   80544:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
   80546:	68bb      	ldr	r3, [r7, #8]
   80548:	681b      	ldr	r3, [r3, #0]
   8054a:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   8054c:	68bb      	ldr	r3, [r7, #8]
   8054e:	691a      	ldr	r2, [r3, #16]
   80550:	687b      	ldr	r3, [r7, #4]
   80552:	429a      	cmp	r2, r3
   80554:	d202      	bcs.n	8055c <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
   80556:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8055a:	e00b      	b.n	80574 <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   8055c:	68bb      	ldr	r3, [r7, #8]
   8055e:	687a      	ldr	r2, [r7, #4]
   80560:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80562:	68fa      	ldr	r2, [r7, #12]
   80564:	697b      	ldr	r3, [r7, #20]
   80566:	015b      	lsls	r3, r3, #5
   80568:	4413      	add	r3, r2
   8056a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8056e:	687a      	ldr	r2, [r7, #4]
   80570:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
   80572:	2300      	movs	r3, #0
}
   80574:	4618      	mov	r0, r3
   80576:	371c      	adds	r7, #28
   80578:	46bd      	mov	sp, r7
   8057a:	bc80      	pop	{r7}
   8057c:	4770      	bx	lr

0008057e <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
   8057e:	b480      	push	{r7}
   80580:	b083      	sub	sp, #12
   80582:	af00      	add	r7, sp, #0
   80584:	6078      	str	r0, [r7, #4]
   80586:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
   80588:	2201      	movs	r2, #1
   8058a:	683b      	ldr	r3, [r7, #0]
   8058c:	fa02 f303 	lsl.w	r3, r2, r3
   80590:	461a      	mov	r2, r3
   80592:	687b      	ldr	r3, [r7, #4]
   80594:	605a      	str	r2, [r3, #4]
}
   80596:	bf00      	nop
   80598:	370c      	adds	r7, #12
   8059a:	46bd      	mov	sp, r7
   8059c:	bc80      	pop	{r7}
   8059e:	4770      	bx	lr

000805a0 <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
   805a0:	b480      	push	{r7}
   805a2:	b083      	sub	sp, #12
   805a4:	af00      	add	r7, sp, #0
   805a6:	6078      	str	r0, [r7, #4]
   805a8:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
   805aa:	2201      	movs	r2, #1
   805ac:	683b      	ldr	r3, [r7, #0]
   805ae:	fa02 f303 	lsl.w	r3, r2, r3
   805b2:	461a      	mov	r2, r3
   805b4:	687b      	ldr	r3, [r7, #4]
   805b6:	609a      	str	r2, [r3, #8]
}
   805b8:	bf00      	nop
   805ba:	370c      	adds	r7, #12
   805bc:	46bd      	mov	sp, r7
   805be:	bc80      	pop	{r7}
   805c0:	4770      	bx	lr

000805c2 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   805c2:	b480      	push	{r7}
   805c4:	b087      	sub	sp, #28
   805c6:	af00      	add	r7, sp, #0
   805c8:	60f8      	str	r0, [r7, #12]
   805ca:	60b9      	str	r1, [r7, #8]
   805cc:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   805ce:	68fa      	ldr	r2, [r7, #12]
   805d0:	68bb      	ldr	r3, [r7, #8]
   805d2:	019b      	lsls	r3, r3, #6
   805d4:	4413      	add	r3, r2
   805d6:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   805d8:	697b      	ldr	r3, [r7, #20]
   805da:	2202      	movs	r2, #2
   805dc:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   805de:	697b      	ldr	r3, [r7, #20]
   805e0:	f04f 32ff 	mov.w	r2, #4294967295
   805e4:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   805e6:	697b      	ldr	r3, [r7, #20]
   805e8:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   805ea:	697b      	ldr	r3, [r7, #20]
   805ec:	687a      	ldr	r2, [r7, #4]
   805ee:	605a      	str	r2, [r3, #4]
}
   805f0:	bf00      	nop
   805f2:	371c      	adds	r7, #28
   805f4:	46bd      	mov	sp, r7
   805f6:	bc80      	pop	{r7}
   805f8:	4770      	bx	lr

000805fa <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
   805fa:	b480      	push	{r7}
   805fc:	b083      	sub	sp, #12
   805fe:	af00      	add	r7, sp, #0
   80600:	6078      	str	r0, [r7, #4]
   80602:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80604:	687a      	ldr	r2, [r7, #4]
   80606:	683b      	ldr	r3, [r7, #0]
   80608:	019b      	lsls	r3, r3, #6
   8060a:	4413      	add	r3, r2
   8060c:	2205      	movs	r2, #5
   8060e:	601a      	str	r2, [r3, #0]
}
   80610:	bf00      	nop
   80612:	370c      	adds	r7, #12
   80614:	46bd      	mov	sp, r7
   80616:	bc80      	pop	{r7}
   80618:	4770      	bx	lr

0008061a <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
   8061a:	b480      	push	{r7}
   8061c:	b085      	sub	sp, #20
   8061e:	af00      	add	r7, sp, #0
   80620:	60f8      	str	r0, [r7, #12]
   80622:	60b9      	str	r1, [r7, #8]
   80624:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80626:	68fa      	ldr	r2, [r7, #12]
   80628:	68bb      	ldr	r3, [r7, #8]
   8062a:	019b      	lsls	r3, r3, #6
   8062c:	4413      	add	r3, r2
   8062e:	331c      	adds	r3, #28
   80630:	687a      	ldr	r2, [r7, #4]
   80632:	601a      	str	r2, [r3, #0]
}
   80634:	bf00      	nop
   80636:	3714      	adds	r7, #20
   80638:	46bd      	mov	sp, r7
   8063a:	bc80      	pop	{r7}
   8063c:	4770      	bx	lr

0008063e <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
   8063e:	b480      	push	{r7}
   80640:	b087      	sub	sp, #28
   80642:	af00      	add	r7, sp, #0
   80644:	60f8      	str	r0, [r7, #12]
   80646:	60b9      	str	r1, [r7, #8]
   80648:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8064a:	68fa      	ldr	r2, [r7, #12]
   8064c:	68bb      	ldr	r3, [r7, #8]
   8064e:	019b      	lsls	r3, r3, #6
   80650:	4413      	add	r3, r2
   80652:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   80654:	697b      	ldr	r3, [r7, #20]
   80656:	687a      	ldr	r2, [r7, #4]
   80658:	625a      	str	r2, [r3, #36]	; 0x24
}
   8065a:	bf00      	nop
   8065c:	371c      	adds	r7, #28
   8065e:	46bd      	mov	sp, r7
   80660:	bc80      	pop	{r7}
   80662:	4770      	bx	lr

00080664 <tc_disable_interrupt>:
 */
void tc_disable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
   80664:	b480      	push	{r7}
   80666:	b087      	sub	sp, #28
   80668:	af00      	add	r7, sp, #0
   8066a:	60f8      	str	r0, [r7, #12]
   8066c:	60b9      	str	r1, [r7, #8]
   8066e:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80670:	68fa      	ldr	r2, [r7, #12]
   80672:	68bb      	ldr	r3, [r7, #8]
   80674:	019b      	lsls	r3, r3, #6
   80676:	4413      	add	r3, r2
   80678:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IDR = ul_sources;
   8067a:	697b      	ldr	r3, [r7, #20]
   8067c:	687a      	ldr	r2, [r7, #4]
   8067e:	629a      	str	r2, [r3, #40]	; 0x28
}
   80680:	bf00      	nop
   80682:	371c      	adds	r7, #28
   80684:	46bd      	mov	sp, r7
   80686:	bc80      	pop	{r7}
   80688:	4770      	bx	lr

0008068a <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
   8068a:	b480      	push	{r7}
   8068c:	b085      	sub	sp, #20
   8068e:	af00      	add	r7, sp, #0
   80690:	6078      	str	r0, [r7, #4]
   80692:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80694:	687a      	ldr	r2, [r7, #4]
   80696:	683b      	ldr	r3, [r7, #0]
   80698:	019b      	lsls	r3, r3, #6
   8069a:	4413      	add	r3, r2
   8069c:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   8069e:	68fb      	ldr	r3, [r7, #12]
   806a0:	6a1b      	ldr	r3, [r3, #32]
}
   806a2:	4618      	mov	r0, r3
   806a4:	3714      	adds	r7, #20
   806a6:	46bd      	mov	sp, r7
   806a8:	bc80      	pop	{r7}
   806aa:	4770      	bx	lr

000806ac <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   806ac:	b480      	push	{r7}
   806ae:	b087      	sub	sp, #28
   806b0:	af00      	add	r7, sp, #0
   806b2:	60f8      	str	r0, [r7, #12]
   806b4:	60b9      	str	r1, [r7, #8]
   806b6:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   806b8:	68bb      	ldr	r3, [r7, #8]
   806ba:	085a      	lsrs	r2, r3, #1
   806bc:	687b      	ldr	r3, [r7, #4]
   806be:	441a      	add	r2, r3
   806c0:	68bb      	ldr	r3, [r7, #8]
   806c2:	fbb2 f3f3 	udiv	r3, r2, r3
   806c6:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   806c8:	697b      	ldr	r3, [r7, #20]
   806ca:	2b03      	cmp	r3, #3
   806cc:	d903      	bls.n	806d6 <usart_set_spi_master_baudrate+0x2a>
   806ce:	697b      	ldr	r3, [r7, #20]
   806d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   806d4:	d301      	bcc.n	806da <usart_set_spi_master_baudrate+0x2e>
		return 1;
   806d6:	2301      	movs	r3, #1
   806d8:	e003      	b.n	806e2 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   806da:	68fb      	ldr	r3, [r7, #12]
   806dc:	697a      	ldr	r2, [r7, #20]
   806de:	621a      	str	r2, [r3, #32]

	return 0;
   806e0:	2300      	movs	r3, #0
}
   806e2:	4618      	mov	r0, r3
   806e4:	371c      	adds	r7, #28
   806e6:	46bd      	mov	sp, r7
   806e8:	bc80      	pop	{r7}
   806ea:	4770      	bx	lr

000806ec <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   806ec:	b580      	push	{r7, lr}
   806ee:	b082      	sub	sp, #8
   806f0:	af00      	add	r7, sp, #0
   806f2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   806f4:	6878      	ldr	r0, [r7, #4]
   806f6:	4b0d      	ldr	r3, [pc, #52]	; (8072c <usart_reset+0x40>)
   806f8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   806fa:	687b      	ldr	r3, [r7, #4]
   806fc:	2200      	movs	r2, #0
   806fe:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   80700:	687b      	ldr	r3, [r7, #4]
   80702:	2200      	movs	r2, #0
   80704:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80706:	687b      	ldr	r3, [r7, #4]
   80708:	2200      	movs	r2, #0
   8070a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8070c:	6878      	ldr	r0, [r7, #4]
   8070e:	4b08      	ldr	r3, [pc, #32]	; (80730 <usart_reset+0x44>)
   80710:	4798      	blx	r3
	usart_reset_rx(p_usart);
   80712:	6878      	ldr	r0, [r7, #4]
   80714:	4b07      	ldr	r3, [pc, #28]	; (80734 <usart_reset+0x48>)
   80716:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   80718:	6878      	ldr	r0, [r7, #4]
   8071a:	4b07      	ldr	r3, [pc, #28]	; (80738 <usart_reset+0x4c>)
   8071c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8071e:	6878      	ldr	r0, [r7, #4]
   80720:	4b06      	ldr	r3, [pc, #24]	; (8073c <usart_reset+0x50>)
   80722:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   80724:	bf00      	nop
   80726:	3708      	adds	r7, #8
   80728:	46bd      	mov	sp, r7
   8072a:	bd80      	pop	{r7, pc}
   8072c:	00080949 	.word	0x00080949
   80730:	00080881 	.word	0x00080881
   80734:	000808c9 	.word	0x000808c9
   80738:	000808e1 	.word	0x000808e1
   8073c:	000808fb 	.word	0x000808fb

00080740 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   80740:	b580      	push	{r7, lr}
   80742:	b084      	sub	sp, #16
   80744:	af00      	add	r7, sp, #0
   80746:	60f8      	str	r0, [r7, #12]
   80748:	60b9      	str	r1, [r7, #8]
   8074a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   8074c:	68f8      	ldr	r0, [r7, #12]
   8074e:	4b3d      	ldr	r3, [pc, #244]	; (80844 <usart_init_spi_master+0x104>)
   80750:	4798      	blx	r3

	ul_reg_val = 0;
   80752:	4b3d      	ldr	r3, [pc, #244]	; (80848 <usart_init_spi_master+0x108>)
   80754:	2200      	movs	r2, #0
   80756:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   80758:	68bb      	ldr	r3, [r7, #8]
   8075a:	2b00      	cmp	r3, #0
   8075c:	d00d      	beq.n	8077a <usart_init_spi_master+0x3a>
   8075e:	68bb      	ldr	r3, [r7, #8]
   80760:	689b      	ldr	r3, [r3, #8]
   80762:	2b03      	cmp	r3, #3
   80764:	d809      	bhi.n	8077a <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   80766:	68bb      	ldr	r3, [r7, #8]
   80768:	681b      	ldr	r3, [r3, #0]
   8076a:	687a      	ldr	r2, [r7, #4]
   8076c:	4619      	mov	r1, r3
   8076e:	68f8      	ldr	r0, [r7, #12]
   80770:	4b36      	ldr	r3, [pc, #216]	; (8084c <usart_init_spi_master+0x10c>)
   80772:	4798      	blx	r3
   80774:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   80776:	2b00      	cmp	r3, #0
   80778:	d001      	beq.n	8077e <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   8077a:	2301      	movs	r3, #1
   8077c:	e05d      	b.n	8083a <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   8077e:	68bb      	ldr	r3, [r7, #8]
   80780:	685a      	ldr	r2, [r3, #4]
   80782:	4b31      	ldr	r3, [pc, #196]	; (80848 <usart_init_spi_master+0x108>)
   80784:	681b      	ldr	r3, [r3, #0]
   80786:	4313      	orrs	r3, r2
   80788:	4a2f      	ldr	r2, [pc, #188]	; (80848 <usart_init_spi_master+0x108>)
   8078a:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   8078c:	68bb      	ldr	r3, [r7, #8]
   8078e:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   80790:	4b2d      	ldr	r3, [pc, #180]	; (80848 <usart_init_spi_master+0x108>)
   80792:	681b      	ldr	r3, [r3, #0]
   80794:	4313      	orrs	r3, r2
   80796:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   8079a:	f043 030e 	orr.w	r3, r3, #14
   8079e:	4a2a      	ldr	r2, [pc, #168]	; (80848 <usart_init_spi_master+0x108>)
   807a0:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   807a2:	68bb      	ldr	r3, [r7, #8]
   807a4:	689b      	ldr	r3, [r3, #8]
   807a6:	2b03      	cmp	r3, #3
   807a8:	d83e      	bhi.n	80828 <usart_init_spi_master+0xe8>
   807aa:	a201      	add	r2, pc, #4	; (adr r2, 807b0 <usart_init_spi_master+0x70>)
   807ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   807b0:	000807c1 	.word	0x000807c1
   807b4:	000807db 	.word	0x000807db
   807b8:	000807f5 	.word	0x000807f5
   807bc:	0008080f 	.word	0x0008080f
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   807c0:	4b21      	ldr	r3, [pc, #132]	; (80848 <usart_init_spi_master+0x108>)
   807c2:	681b      	ldr	r3, [r3, #0]
   807c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   807c8:	4a1f      	ldr	r2, [pc, #124]	; (80848 <usart_init_spi_master+0x108>)
   807ca:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   807cc:	4b1e      	ldr	r3, [pc, #120]	; (80848 <usart_init_spi_master+0x108>)
   807ce:	681b      	ldr	r3, [r3, #0]
   807d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   807d4:	4a1c      	ldr	r2, [pc, #112]	; (80848 <usart_init_spi_master+0x108>)
   807d6:	6013      	str	r3, [r2, #0]
		break;
   807d8:	e027      	b.n	8082a <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   807da:	4b1b      	ldr	r3, [pc, #108]	; (80848 <usart_init_spi_master+0x108>)
   807dc:	681b      	ldr	r3, [r3, #0]
   807de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   807e2:	4a19      	ldr	r2, [pc, #100]	; (80848 <usart_init_spi_master+0x108>)
   807e4:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   807e6:	4b18      	ldr	r3, [pc, #96]	; (80848 <usart_init_spi_master+0x108>)
   807e8:	681b      	ldr	r3, [r3, #0]
   807ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   807ee:	4a16      	ldr	r2, [pc, #88]	; (80848 <usart_init_spi_master+0x108>)
   807f0:	6013      	str	r3, [r2, #0]
		break;
   807f2:	e01a      	b.n	8082a <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   807f4:	4b14      	ldr	r3, [pc, #80]	; (80848 <usart_init_spi_master+0x108>)
   807f6:	681b      	ldr	r3, [r3, #0]
   807f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   807fc:	4a12      	ldr	r2, [pc, #72]	; (80848 <usart_init_spi_master+0x108>)
   807fe:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   80800:	4b11      	ldr	r3, [pc, #68]	; (80848 <usart_init_spi_master+0x108>)
   80802:	681b      	ldr	r3, [r3, #0]
   80804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80808:	4a0f      	ldr	r2, [pc, #60]	; (80848 <usart_init_spi_master+0x108>)
   8080a:	6013      	str	r3, [r2, #0]
		break;
   8080c:	e00d      	b.n	8082a <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8080e:	4b0e      	ldr	r3, [pc, #56]	; (80848 <usart_init_spi_master+0x108>)
   80810:	681b      	ldr	r3, [r3, #0]
   80812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80816:	4a0c      	ldr	r2, [pc, #48]	; (80848 <usart_init_spi_master+0x108>)
   80818:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8081a:	4b0b      	ldr	r3, [pc, #44]	; (80848 <usart_init_spi_master+0x108>)
   8081c:	681b      	ldr	r3, [r3, #0]
   8081e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80822:	4a09      	ldr	r2, [pc, #36]	; (80848 <usart_init_spi_master+0x108>)
   80824:	6013      	str	r3, [r2, #0]
		break;
   80826:	e000      	b.n	8082a <usart_init_spi_master+0xea>

	default:
		break;
   80828:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   8082a:	68fb      	ldr	r3, [r7, #12]
   8082c:	685a      	ldr	r2, [r3, #4]
   8082e:	4b06      	ldr	r3, [pc, #24]	; (80848 <usart_init_spi_master+0x108>)
   80830:	681b      	ldr	r3, [r3, #0]
   80832:	431a      	orrs	r2, r3
   80834:	68fb      	ldr	r3, [r7, #12]
   80836:	605a      	str	r2, [r3, #4]

	return 0;
   80838:	2300      	movs	r3, #0
}
   8083a:	4618      	mov	r0, r3
   8083c:	3710      	adds	r7, #16
   8083e:	46bd      	mov	sp, r7
   80840:	bd80      	pop	{r7, pc}
   80842:	bf00      	nop
   80844:	000806ed 	.word	0x000806ed
   80848:	20070b90 	.word	0x20070b90
   8084c:	000806ad 	.word	0x000806ad

00080850 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   80850:	b480      	push	{r7}
   80852:	b083      	sub	sp, #12
   80854:	af00      	add	r7, sp, #0
   80856:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   80858:	687b      	ldr	r3, [r7, #4]
   8085a:	2240      	movs	r2, #64	; 0x40
   8085c:	601a      	str	r2, [r3, #0]
}
   8085e:	bf00      	nop
   80860:	370c      	adds	r7, #12
   80862:	46bd      	mov	sp, r7
   80864:	bc80      	pop	{r7}
   80866:	4770      	bx	lr

00080868 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   80868:	b480      	push	{r7}
   8086a:	b083      	sub	sp, #12
   8086c:	af00      	add	r7, sp, #0
   8086e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   80870:	687b      	ldr	r3, [r7, #4]
   80872:	2280      	movs	r2, #128	; 0x80
   80874:	601a      	str	r2, [r3, #0]
}
   80876:	bf00      	nop
   80878:	370c      	adds	r7, #12
   8087a:	46bd      	mov	sp, r7
   8087c:	bc80      	pop	{r7}
   8087e:	4770      	bx	lr

00080880 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   80880:	b480      	push	{r7}
   80882:	b083      	sub	sp, #12
   80884:	af00      	add	r7, sp, #0
   80886:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80888:	687b      	ldr	r3, [r7, #4]
   8088a:	2288      	movs	r2, #136	; 0x88
   8088c:	601a      	str	r2, [r3, #0]
}
   8088e:	bf00      	nop
   80890:	370c      	adds	r7, #12
   80892:	46bd      	mov	sp, r7
   80894:	bc80      	pop	{r7}
   80896:	4770      	bx	lr

00080898 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   80898:	b480      	push	{r7}
   8089a:	b083      	sub	sp, #12
   8089c:	af00      	add	r7, sp, #0
   8089e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   808a0:	687b      	ldr	r3, [r7, #4]
   808a2:	2210      	movs	r2, #16
   808a4:	601a      	str	r2, [r3, #0]
}
   808a6:	bf00      	nop
   808a8:	370c      	adds	r7, #12
   808aa:	46bd      	mov	sp, r7
   808ac:	bc80      	pop	{r7}
   808ae:	4770      	bx	lr

000808b0 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   808b0:	b480      	push	{r7}
   808b2:	b083      	sub	sp, #12
   808b4:	af00      	add	r7, sp, #0
   808b6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   808b8:	687b      	ldr	r3, [r7, #4]
   808ba:	2220      	movs	r2, #32
   808bc:	601a      	str	r2, [r3, #0]
}
   808be:	bf00      	nop
   808c0:	370c      	adds	r7, #12
   808c2:	46bd      	mov	sp, r7
   808c4:	bc80      	pop	{r7}
   808c6:	4770      	bx	lr

000808c8 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   808c8:	b480      	push	{r7}
   808ca:	b083      	sub	sp, #12
   808cc:	af00      	add	r7, sp, #0
   808ce:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   808d0:	687b      	ldr	r3, [r7, #4]
   808d2:	2224      	movs	r2, #36	; 0x24
   808d4:	601a      	str	r2, [r3, #0]
}
   808d6:	bf00      	nop
   808d8:	370c      	adds	r7, #12
   808da:	46bd      	mov	sp, r7
   808dc:	bc80      	pop	{r7}
   808de:	4770      	bx	lr

000808e0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   808e0:	b480      	push	{r7}
   808e2:	b083      	sub	sp, #12
   808e4:	af00      	add	r7, sp, #0
   808e6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   808e8:	687b      	ldr	r3, [r7, #4]
   808ea:	f44f 7280 	mov.w	r2, #256	; 0x100
   808ee:	601a      	str	r2, [r3, #0]
}
   808f0:	bf00      	nop
   808f2:	370c      	adds	r7, #12
   808f4:	46bd      	mov	sp, r7
   808f6:	bc80      	pop	{r7}
   808f8:	4770      	bx	lr

000808fa <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   808fa:	b480      	push	{r7}
   808fc:	b083      	sub	sp, #12
   808fe:	af00      	add	r7, sp, #0
   80900:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   80902:	687b      	ldr	r3, [r7, #4]
   80904:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80908:	601a      	str	r2, [r3, #0]
}
   8090a:	bf00      	nop
   8090c:	370c      	adds	r7, #12
   8090e:	46bd      	mov	sp, r7
   80910:	bc80      	pop	{r7}
   80912:	4770      	bx	lr

00080914 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
   80914:	b480      	push	{r7}
   80916:	b083      	sub	sp, #12
   80918:	af00      	add	r7, sp, #0
   8091a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
   8091c:	687b      	ldr	r3, [r7, #4]
   8091e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   80922:	601a      	str	r2, [r3, #0]
}
   80924:	bf00      	nop
   80926:	370c      	adds	r7, #12
   80928:	46bd      	mov	sp, r7
   8092a:	bc80      	pop	{r7}
   8092c:	4770      	bx	lr

0008092e <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   8092e:	b480      	push	{r7}
   80930:	b083      	sub	sp, #12
   80932:	af00      	add	r7, sp, #0
   80934:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   80936:	687b      	ldr	r3, [r7, #4]
   80938:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8093c:	601a      	str	r2, [r3, #0]
}
   8093e:	bf00      	nop
   80940:	370c      	adds	r7, #12
   80942:	46bd      	mov	sp, r7
   80944:	bc80      	pop	{r7}
   80946:	4770      	bx	lr

00080948 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   80948:	b480      	push	{r7}
   8094a:	b083      	sub	sp, #12
   8094c:	af00      	add	r7, sp, #0
   8094e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   80950:	687b      	ldr	r3, [r7, #4]
   80952:	4a04      	ldr	r2, [pc, #16]	; (80964 <usart_disable_writeprotect+0x1c>)
   80954:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   80958:	bf00      	nop
   8095a:	370c      	adds	r7, #12
   8095c:	46bd      	mov	sp, r7
   8095e:	bc80      	pop	{r7}
   80960:	4770      	bx	lr
   80962:	bf00      	nop
   80964:	55534100 	.word	0x55534100

00080968 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80968:	b480      	push	{r7}
   8096a:	b083      	sub	sp, #12
   8096c:	af00      	add	r7, sp, #0
   8096e:	4603      	mov	r3, r0
   80970:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80972:	4908      	ldr	r1, [pc, #32]	; (80994 <NVIC_EnableIRQ+0x2c>)
   80974:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80978:	095b      	lsrs	r3, r3, #5
   8097a:	79fa      	ldrb	r2, [r7, #7]
   8097c:	f002 021f 	and.w	r2, r2, #31
   80980:	2001      	movs	r0, #1
   80982:	fa00 f202 	lsl.w	r2, r0, r2
   80986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8098a:	bf00      	nop
   8098c:	370c      	adds	r7, #12
   8098e:	46bd      	mov	sp, r7
   80990:	bc80      	pop	{r7}
   80992:	4770      	bx	lr
   80994:	e000e100 	.word	0xe000e100

00080998 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80998:	b480      	push	{r7}
   8099a:	b083      	sub	sp, #12
   8099c:	af00      	add	r7, sp, #0
   8099e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   809a0:	687b      	ldr	r3, [r7, #4]
   809a2:	2b07      	cmp	r3, #7
   809a4:	d825      	bhi.n	809f2 <osc_get_rate+0x5a>
   809a6:	a201      	add	r2, pc, #4	; (adr r2, 809ac <osc_get_rate+0x14>)
   809a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   809ac:	000809cd 	.word	0x000809cd
   809b0:	000809d3 	.word	0x000809d3
   809b4:	000809d9 	.word	0x000809d9
   809b8:	000809df 	.word	0x000809df
   809bc:	000809e3 	.word	0x000809e3
   809c0:	000809e7 	.word	0x000809e7
   809c4:	000809eb 	.word	0x000809eb
   809c8:	000809ef 	.word	0x000809ef
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   809cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   809d0:	e010      	b.n	809f4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   809d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   809d6:	e00d      	b.n	809f4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   809d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   809dc:	e00a      	b.n	809f4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   809de:	4b08      	ldr	r3, [pc, #32]	; (80a00 <osc_get_rate+0x68>)
   809e0:	e008      	b.n	809f4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   809e2:	4b08      	ldr	r3, [pc, #32]	; (80a04 <osc_get_rate+0x6c>)
   809e4:	e006      	b.n	809f4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   809e6:	4b08      	ldr	r3, [pc, #32]	; (80a08 <osc_get_rate+0x70>)
   809e8:	e004      	b.n	809f4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   809ea:	4b07      	ldr	r3, [pc, #28]	; (80a08 <osc_get_rate+0x70>)
   809ec:	e002      	b.n	809f4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   809ee:	4b06      	ldr	r3, [pc, #24]	; (80a08 <osc_get_rate+0x70>)
   809f0:	e000      	b.n	809f4 <osc_get_rate+0x5c>
	}

	return 0;
   809f2:	2300      	movs	r3, #0
}
   809f4:	4618      	mov	r0, r3
   809f6:	370c      	adds	r7, #12
   809f8:	46bd      	mov	sp, r7
   809fa:	bc80      	pop	{r7}
   809fc:	4770      	bx	lr
   809fe:	bf00      	nop
   80a00:	003d0900 	.word	0x003d0900
   80a04:	007a1200 	.word	0x007a1200
   80a08:	00b71b00 	.word	0x00b71b00

00080a0c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80a0c:	b580      	push	{r7, lr}
   80a0e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80a10:	2006      	movs	r0, #6
   80a12:	4b04      	ldr	r3, [pc, #16]	; (80a24 <sysclk_get_main_hz+0x18>)
   80a14:	4798      	blx	r3
   80a16:	4602      	mov	r2, r0
   80a18:	4613      	mov	r3, r2
   80a1a:	00db      	lsls	r3, r3, #3
   80a1c:	1a9b      	subs	r3, r3, r2
   80a1e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80a20:	4618      	mov	r0, r3
   80a22:	bd80      	pop	{r7, pc}
   80a24:	00080999 	.word	0x00080999

00080a28 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   80a28:	b580      	push	{r7, lr}
   80a2a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80a2c:	4b02      	ldr	r3, [pc, #8]	; (80a38 <sysclk_get_peripheral_hz+0x10>)
   80a2e:	4798      	blx	r3
   80a30:	4603      	mov	r3, r0
   80a32:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80a34:	4618      	mov	r0, r3
   80a36:	bd80      	pop	{r7, pc}
   80a38:	00080a0d 	.word	0x00080a0d

00080a3c <spi_init>:
sensor_to_motor_t stm;

uint8_t sens_buf[sizeof(stm)];

void spi_init(void)
{
   80a3c:	b580      	push	{r7, lr}
   80a3e:	af00      	add	r7, sp, #0
    configure_dmac();
   80a40:	4b02      	ldr	r3, [pc, #8]	; (80a4c <spi_init+0x10>)
   80a42:	4798      	blx	r3
    spi_master_initialize();
   80a44:	4b02      	ldr	r3, [pc, #8]	; (80a50 <spi_init+0x14>)
   80a46:	4798      	blx	r3
}
   80a48:	bf00      	nop
   80a4a:	bd80      	pop	{r7, pc}
   80a4c:	00080b69 	.word	0x00080b69
   80a50:	00080a55 	.word	0x00080a55

00080a54 <spi_master_initialize>:

void spi_master_initialize(void)
{
   80a54:	b590      	push	{r4, r7, lr}
   80a56:	b085      	sub	sp, #20
   80a58:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   80a5a:	2101      	movs	r1, #1
   80a5c:	4810      	ldr	r0, [pc, #64]	; (80aa0 <spi_master_initialize+0x4c>)
   80a5e:	4b11      	ldr	r3, [pc, #68]	; (80aa4 <spi_master_initialize+0x50>)
   80a60:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   80a62:	2100      	movs	r1, #0
   80a64:	480e      	ldr	r0, [pc, #56]	; (80aa0 <spi_master_initialize+0x4c>)
   80a66:	4b0f      	ldr	r3, [pc, #60]	; (80aa4 <spi_master_initialize+0x50>)
   80a68:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   80a6a:	2012      	movs	r0, #18
   80a6c:	4b0e      	ldr	r3, [pc, #56]	; (80aa8 <spi_master_initialize+0x54>)
   80a6e:	4798      	blx	r3
    usart_spi_disable(USART1);
   80a70:	480e      	ldr	r0, [pc, #56]	; (80aac <spi_master_initialize+0x58>)
   80a72:	4b0f      	ldr	r3, [pc, #60]	; (80ab0 <spi_master_initialize+0x5c>)
   80a74:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   80a76:	4b0f      	ldr	r3, [pc, #60]	; (80ab4 <spi_master_initialize+0x60>)
   80a78:	463c      	mov	r4, r7
   80a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   80a7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   80a80:	4b0d      	ldr	r3, [pc, #52]	; (80ab8 <spi_master_initialize+0x64>)
   80a82:	4798      	blx	r3
   80a84:	4602      	mov	r2, r0
   80a86:	463b      	mov	r3, r7
   80a88:	4619      	mov	r1, r3
   80a8a:	4808      	ldr	r0, [pc, #32]	; (80aac <spi_master_initialize+0x58>)
   80a8c:	4b0b      	ldr	r3, [pc, #44]	; (80abc <spi_master_initialize+0x68>)
   80a8e:	4798      	blx	r3
    usart_spi_enable(USART1);
   80a90:	4806      	ldr	r0, [pc, #24]	; (80aac <spi_master_initialize+0x58>)
   80a92:	4b0b      	ldr	r3, [pc, #44]	; (80ac0 <spi_master_initialize+0x6c>)
   80a94:	4798      	blx	r3
}
   80a96:	bf00      	nop
   80a98:	3714      	adds	r7, #20
   80a9a:	46bd      	mov	sp, r7
   80a9c:	bd90      	pop	{r4, r7, pc}
   80a9e:	bf00      	nop
   80aa0:	400c4000 	.word	0x400c4000
   80aa4:	00083507 	.word	0x00083507
   80aa8:	000838c5 	.word	0x000838c5
   80aac:	4009c000 	.word	0x4009c000
   80ab0:	000801c9 	.word	0x000801c9
   80ab4:	0008936c 	.word	0x0008936c
   80ab8:	00080a29 	.word	0x00080a29
   80abc:	00080741 	.word	0x00080741
   80ac0:	000801a5 	.word	0x000801a5

00080ac4 <spi_master_transfer>:

void spi_master_transfer(void *p_buf, uint32_t ul_size)
{
   80ac4:	b580      	push	{r7, lr}
   80ac6:	b088      	sub	sp, #32
   80ac8:	af00      	add	r7, sp, #0
   80aca:	6078      	str	r0, [r7, #4]
   80acc:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    usart_spi_force_chip_select(USART1);
   80ace:	481c      	ldr	r0, [pc, #112]	; (80b40 <spi_master_transfer+0x7c>)
   80ad0:	4b1c      	ldr	r3, [pc, #112]	; (80b44 <spi_master_transfer+0x80>)
   80ad2:	4798      	blx	r3

    dmac_channel_disable(DMAC, 1);
   80ad4:	2101      	movs	r1, #1
   80ad6:	481c      	ldr	r0, [pc, #112]	; (80b48 <spi_master_transfer+0x84>)
   80ad8:	4b1c      	ldr	r3, [pc, #112]	; (80b4c <spi_master_transfer+0x88>)
   80ada:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   80adc:	687b      	ldr	r3, [r7, #4]
   80ade:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & USART1->US_THR;
   80ae0:	4b1b      	ldr	r3, [pc, #108]	; (80b50 <spi_master_transfer+0x8c>)
   80ae2:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80ae4:	683b      	ldr	r3, [r7, #0]
   80ae6:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80ae8:	4b1a      	ldr	r3, [pc, #104]	; (80b54 <spi_master_transfer+0x90>)
   80aea:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80aec:	2300      	movs	r3, #0
   80aee:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   80af0:	f107 030c 	add.w	r3, r7, #12
   80af4:	461a      	mov	r2, r3
   80af6:	2101      	movs	r1, #1
   80af8:	4813      	ldr	r0, [pc, #76]	; (80b48 <spi_master_transfer+0x84>)
   80afa:	4b17      	ldr	r3, [pc, #92]	; (80b58 <spi_master_transfer+0x94>)
   80afc:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   80afe:	2101      	movs	r1, #1
   80b00:	4811      	ldr	r0, [pc, #68]	; (80b48 <spi_master_transfer+0x84>)
   80b02:	4b16      	ldr	r3, [pc, #88]	; (80b5c <spi_master_transfer+0x98>)
   80b04:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   80b06:	2100      	movs	r1, #0
   80b08:	480f      	ldr	r0, [pc, #60]	; (80b48 <spi_master_transfer+0x84>)
   80b0a:	4b10      	ldr	r3, [pc, #64]	; (80b4c <spi_master_transfer+0x88>)
   80b0c:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & USART1->US_RHR;
   80b0e:	4b14      	ldr	r3, [pc, #80]	; (80b60 <spi_master_transfer+0x9c>)
   80b10:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80b12:	687b      	ldr	r3, [r7, #4]
   80b14:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80b16:	683b      	ldr	r3, [r7, #0]
   80b18:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   80b1a:	4b12      	ldr	r3, [pc, #72]	; (80b64 <spi_master_transfer+0xa0>)
   80b1c:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80b1e:	2300      	movs	r3, #0
   80b20:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   80b22:	f107 030c 	add.w	r3, r7, #12
   80b26:	461a      	mov	r2, r3
   80b28:	2100      	movs	r1, #0
   80b2a:	4807      	ldr	r0, [pc, #28]	; (80b48 <spi_master_transfer+0x84>)
   80b2c:	4b0a      	ldr	r3, [pc, #40]	; (80b58 <spi_master_transfer+0x94>)
   80b2e:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   80b30:	2100      	movs	r1, #0
   80b32:	4805      	ldr	r0, [pc, #20]	; (80b48 <spi_master_transfer+0x84>)
   80b34:	4b09      	ldr	r3, [pc, #36]	; (80b5c <spi_master_transfer+0x98>)
   80b36:	4798      	blx	r3
}
   80b38:	bf00      	nop
   80b3a:	3720      	adds	r7, #32
   80b3c:	46bd      	mov	sp, r7
   80b3e:	bd80      	pop	{r7, pc}
   80b40:	4009c000 	.word	0x4009c000
   80b44:	00080915 	.word	0x00080915
   80b48:	400c4000 	.word	0x400c4000
   80b4c:	00083507 	.word	0x00083507
   80b50:	4009c01c 	.word	0x4009c01c
   80b54:	20310000 	.word	0x20310000
   80b58:	00083621 	.word	0x00083621
   80b5c:	000834e9 	.word	0x000834e9
   80b60:	4009c018 	.word	0x4009c018
   80b64:	02510000 	.word	0x02510000

00080b68 <configure_dmac>:

void configure_dmac(void)
{
   80b68:	b580      	push	{r7, lr}
   80b6a:	b082      	sub	sp, #8
   80b6c:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   80b6e:	2027      	movs	r0, #39	; 0x27
   80b70:	4b18      	ldr	r3, [pc, #96]	; (80bd4 <configure_dmac+0x6c>)
   80b72:	4798      	blx	r3
    dmac_init(DMAC);
   80b74:	4818      	ldr	r0, [pc, #96]	; (80bd8 <configure_dmac+0x70>)
   80b76:	4b19      	ldr	r3, [pc, #100]	; (80bdc <configure_dmac+0x74>)
   80b78:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   80b7a:	2110      	movs	r1, #16
   80b7c:	4816      	ldr	r0, [pc, #88]	; (80bd8 <configure_dmac+0x70>)
   80b7e:	4b18      	ldr	r3, [pc, #96]	; (80be0 <configure_dmac+0x78>)
   80b80:	4798      	blx	r3
    dmac_enable(DMAC);
   80b82:	4815      	ldr	r0, [pc, #84]	; (80bd8 <configure_dmac+0x70>)
   80b84:	4b17      	ldr	r3, [pc, #92]	; (80be4 <configure_dmac+0x7c>)
   80b86:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80b88:	2300      	movs	r3, #0
   80b8a:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80b8c:	687b      	ldr	r3, [r7, #4]
   80b8e:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80b92:	f043 030e 	orr.w	r3, r3, #14
   80b96:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   80b98:	687a      	ldr	r2, [r7, #4]
   80b9a:	2100      	movs	r1, #0
   80b9c:	480e      	ldr	r0, [pc, #56]	; (80bd8 <configure_dmac+0x70>)
   80b9e:	4b12      	ldr	r3, [pc, #72]	; (80be8 <configure_dmac+0x80>)
   80ba0:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80ba2:	2300      	movs	r3, #0
   80ba4:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80ba6:	687b      	ldr	r3, [r7, #4]
   80ba8:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   80bac:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   80bb0:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   80bb2:	687a      	ldr	r2, [r7, #4]
   80bb4:	2101      	movs	r1, #1
   80bb6:	4808      	ldr	r0, [pc, #32]	; (80bd8 <configure_dmac+0x70>)
   80bb8:	4b0b      	ldr	r3, [pc, #44]	; (80be8 <configure_dmac+0x80>)
   80bba:	4798      	blx	r3
    ul_cfg = 0;
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
    #endif
    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   80bbc:	2027      	movs	r0, #39	; 0x27
   80bbe:	4b0b      	ldr	r3, [pc, #44]	; (80bec <configure_dmac+0x84>)
   80bc0:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   80bc2:	2101      	movs	r1, #1
   80bc4:	4804      	ldr	r0, [pc, #16]	; (80bd8 <configure_dmac+0x70>)
   80bc6:	4b0a      	ldr	r3, [pc, #40]	; (80bf0 <configure_dmac+0x88>)
   80bc8:	4798      	blx	r3
}
   80bca:	bf00      	nop
   80bcc:	3708      	adds	r7, #8
   80bce:	46bd      	mov	sp, r7
   80bd0:	bd80      	pop	{r7, pc}
   80bd2:	bf00      	nop
   80bd4:	000838c5 	.word	0x000838c5
   80bd8:	400c4000 	.word	0x400c4000
   80bdc:	00083441 	.word	0x00083441
   80be0:	0008345d 	.word	0x0008345d
   80be4:	00083483 	.word	0x00083483
   80be8:	000835f7 	.word	0x000835f7
   80bec:	00080969 	.word	0x00080969
   80bf0:	000834b9 	.word	0x000834b9

00080bf4 <DMAC_Handler>:

void DMAC_Handler(void)
{
   80bf4:	b580      	push	{r7, lr}
   80bf6:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   80bf8:	480b      	ldr	r0, [pc, #44]	; (80c28 <DMAC_Handler+0x34>)
   80bfa:	4b0c      	ldr	r3, [pc, #48]	; (80c2c <DMAC_Handler+0x38>)
   80bfc:	4798      	blx	r3
   80bfe:	4602      	mov	r2, r0
   80c00:	4b0b      	ldr	r3, [pc, #44]	; (80c30 <DMAC_Handler+0x3c>)
   80c02:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   80c04:	4b0a      	ldr	r3, [pc, #40]	; (80c30 <DMAC_Handler+0x3c>)
   80c06:	681b      	ldr	r3, [r3, #0]
   80c08:	f003 0301 	and.w	r3, r3, #1
   80c0c:	2b00      	cmp	r3, #0
   80c0e:	d008      	beq.n	80c22 <DMAC_Handler+0x2e>
    {
        usart_spi_release_chip_select(USART1);
   80c10:	4808      	ldr	r0, [pc, #32]	; (80c34 <DMAC_Handler+0x40>)
   80c12:	4b09      	ldr	r3, [pc, #36]	; (80c38 <DMAC_Handler+0x44>)
   80c14:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   80c16:	4b09      	ldr	r3, [pc, #36]	; (80c3c <DMAC_Handler+0x48>)
   80c18:	4a09      	ldr	r2, [pc, #36]	; (80c40 <DMAC_Handler+0x4c>)
   80c1a:	8811      	ldrh	r1, [r2, #0]
   80c1c:	7892      	ldrb	r2, [r2, #2]
   80c1e:	8019      	strh	r1, [r3, #0]
   80c20:	709a      	strb	r2, [r3, #2]
    }
}
   80c22:	bf00      	nop
   80c24:	bd80      	pop	{r7, pc}
   80c26:	bf00      	nop
   80c28:	400c4000 	.word	0x400c4000
   80c2c:	000834d3 	.word	0x000834d3
   80c30:	20070b94 	.word	0x20070b94
   80c34:	4009c000 	.word	0x4009c000
   80c38:	0008092f 	.word	0x0008092f
   80c3c:	20070e34 	.word	0x20070e34
   80c40:	20070e2c 	.word	0x20070e2c

00080c44 <NVIC_EnableIRQ>:
{
   80c44:	b480      	push	{r7}
   80c46:	b083      	sub	sp, #12
   80c48:	af00      	add	r7, sp, #0
   80c4a:	4603      	mov	r3, r0
   80c4c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80c4e:	4908      	ldr	r1, [pc, #32]	; (80c70 <NVIC_EnableIRQ+0x2c>)
   80c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80c54:	095b      	lsrs	r3, r3, #5
   80c56:	79fa      	ldrb	r2, [r7, #7]
   80c58:	f002 021f 	and.w	r2, r2, #31
   80c5c:	2001      	movs	r0, #1
   80c5e:	fa00 f202 	lsl.w	r2, r0, r2
   80c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80c66:	bf00      	nop
   80c68:	370c      	adds	r7, #12
   80c6a:	46bd      	mov	sp, r7
   80c6c:	bc80      	pop	{r7}
   80c6e:	4770      	bx	lr
   80c70:	e000e100 	.word	0xe000e100

00080c74 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80c74:	b480      	push	{r7}
   80c76:	b083      	sub	sp, #12
   80c78:	af00      	add	r7, sp, #0
   80c7a:	4603      	mov	r3, r0
   80c7c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80c7e:	4909      	ldr	r1, [pc, #36]	; (80ca4 <NVIC_ClearPendingIRQ+0x30>)
   80c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80c84:	095b      	lsrs	r3, r3, #5
   80c86:	79fa      	ldrb	r2, [r7, #7]
   80c88:	f002 021f 	and.w	r2, r2, #31
   80c8c:	2001      	movs	r0, #1
   80c8e:	fa00 f202 	lsl.w	r2, r0, r2
   80c92:	3360      	adds	r3, #96	; 0x60
   80c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80c98:	bf00      	nop
   80c9a:	370c      	adds	r7, #12
   80c9c:	46bd      	mov	sp, r7
   80c9e:	bc80      	pop	{r7}
   80ca0:	4770      	bx	lr
   80ca2:	bf00      	nop
   80ca4:	e000e100 	.word	0xe000e100

00080ca8 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80ca8:	b480      	push	{r7}
   80caa:	b083      	sub	sp, #12
   80cac:	af00      	add	r7, sp, #0
   80cae:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80cb0:	687b      	ldr	r3, [r7, #4]
   80cb2:	2208      	movs	r2, #8
   80cb4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80cb6:	687b      	ldr	r3, [r7, #4]
   80cb8:	2220      	movs	r2, #32
   80cba:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80cbc:	687b      	ldr	r3, [r7, #4]
   80cbe:	2204      	movs	r2, #4
   80cc0:	601a      	str	r2, [r3, #0]
}
   80cc2:	bf00      	nop
   80cc4:	370c      	adds	r7, #12
   80cc6:	46bd      	mov	sp, r7
   80cc8:	bc80      	pop	{r7}
   80cca:	4770      	bx	lr

00080ccc <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80ccc:	b580      	push	{r7, lr}
   80cce:	b084      	sub	sp, #16
   80cd0:	af00      	add	r7, sp, #0
   80cd2:	6078      	str	r0, [r7, #4]
   80cd4:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80cd6:	2300      	movs	r3, #0
   80cd8:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80cda:	687b      	ldr	r3, [r7, #4]
   80cdc:	f04f 32ff 	mov.w	r2, #4294967295
   80ce0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   80ce2:	687b      	ldr	r3, [r7, #4]
   80ce4:	6a1b      	ldr	r3, [r3, #32]

	twi_disable_interrupt(p_twi, MASK_ALL_INTERRUPTS);
   80ce6:	f04f 31ff 	mov.w	r1, #4294967295
   80cea:	6878      	ldr	r0, [r7, #4]
   80cec:	4b14      	ldr	r3, [pc, #80]	; (80d40 <twi_master_init+0x74>)
   80cee:	4798      	blx	r3

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80cf0:	6878      	ldr	r0, [r7, #4]
   80cf2:	4b14      	ldr	r3, [pc, #80]	; (80d44 <twi_master_init+0x78>)
   80cf4:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80cf6:	6878      	ldr	r0, [r7, #4]
   80cf8:	4b13      	ldr	r3, [pc, #76]	; (80d48 <twi_master_init+0x7c>)
   80cfa:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80cfc:	683b      	ldr	r3, [r7, #0]
   80cfe:	6859      	ldr	r1, [r3, #4]
   80d00:	683b      	ldr	r3, [r7, #0]
   80d02:	681b      	ldr	r3, [r3, #0]
   80d04:	461a      	mov	r2, r3
   80d06:	6878      	ldr	r0, [r7, #4]
   80d08:	4b10      	ldr	r3, [pc, #64]	; (80d4c <twi_master_init+0x80>)
   80d0a:	4798      	blx	r3
   80d0c:	4603      	mov	r3, r0
   80d0e:	2b01      	cmp	r3, #1
   80d10:	d101      	bne.n	80d16 <twi_master_init+0x4a>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80d12:	2301      	movs	r3, #1
   80d14:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80d16:	683b      	ldr	r3, [r7, #0]
   80d18:	7a5b      	ldrb	r3, [r3, #9]
   80d1a:	2b01      	cmp	r3, #1
   80d1c:	d102      	bne.n	80d24 <twi_master_init+0x58>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80d1e:	687b      	ldr	r3, [r7, #4]
   80d20:	2240      	movs	r2, #64	; 0x40
   80d22:	601a      	str	r2, [r3, #0]
	}
    
    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   80d24:	f44f 7150 	mov.w	r1, #832	; 0x340
   80d28:	6878      	ldr	r0, [r7, #4]
   80d2a:	4b09      	ldr	r3, [pc, #36]	; (80d50 <twi_master_init+0x84>)
   80d2c:	4798      	blx	r3

    twiBusy = false;
   80d2e:	4b09      	ldr	r3, [pc, #36]	; (80d54 <twi_master_init+0x88>)
   80d30:	2200      	movs	r2, #0
   80d32:	701a      	strb	r2, [r3, #0]
    
	return status;
   80d34:	68fb      	ldr	r3, [r7, #12]
}
   80d36:	4618      	mov	r0, r3
   80d38:	3710      	adds	r7, #16
   80d3a:	46bd      	mov	sp, r7
   80d3c:	bd80      	pop	{r7, pc}
   80d3e:	bf00      	nop
   80d40:	0008129f 	.word	0x0008129f
   80d44:	00081301 	.word	0x00081301
   80d48:	00080ca9 	.word	0x00080ca9
   80d4c:	00080d59 	.word	0x00080d59
   80d50:	00081285 	.word	0x00081285
   80d54:	20070db8 	.word	0x20070db8

00080d58 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   80d58:	b480      	push	{r7}
   80d5a:	b089      	sub	sp, #36	; 0x24
   80d5c:	af00      	add	r7, sp, #0
   80d5e:	60f8      	str	r0, [r7, #12]
   80d60:	60b9      	str	r1, [r7, #8]
   80d62:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80d64:	2300      	movs	r3, #0
   80d66:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80d68:	68bb      	ldr	r3, [r7, #8]
   80d6a:	4a34      	ldr	r2, [pc, #208]	; (80e3c <twi_set_speed+0xe4>)
   80d6c:	4293      	cmp	r3, r2
   80d6e:	d901      	bls.n	80d74 <twi_set_speed+0x1c>
		return FAIL;
   80d70:	2301      	movs	r3, #1
   80d72:	e05d      	b.n	80e30 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   80d74:	68bb      	ldr	r3, [r7, #8]
   80d76:	4a32      	ldr	r2, [pc, #200]	; (80e40 <twi_set_speed+0xe8>)
   80d78:	4293      	cmp	r3, r2
   80d7a:	d937      	bls.n	80dec <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80d7c:	687b      	ldr	r3, [r7, #4]
   80d7e:	4a31      	ldr	r2, [pc, #196]	; (80e44 <twi_set_speed+0xec>)
   80d80:	fba2 2303 	umull	r2, r3, r2, r3
   80d84:	0b9b      	lsrs	r3, r3, #14
   80d86:	3b04      	subs	r3, #4
   80d88:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80d8a:	68ba      	ldr	r2, [r7, #8]
   80d8c:	4b2e      	ldr	r3, [pc, #184]	; (80e48 <twi_set_speed+0xf0>)
   80d8e:	4413      	add	r3, r2
   80d90:	009b      	lsls	r3, r3, #2
   80d92:	687a      	ldr	r2, [r7, #4]
   80d94:	fbb2 f3f3 	udiv	r3, r2, r3
   80d98:	3b04      	subs	r3, #4
   80d9a:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80d9c:	e005      	b.n	80daa <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   80d9e:	69fb      	ldr	r3, [r7, #28]
   80da0:	3301      	adds	r3, #1
   80da2:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   80da4:	697b      	ldr	r3, [r7, #20]
   80da6:	085b      	lsrs	r3, r3, #1
   80da8:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80daa:	697b      	ldr	r3, [r7, #20]
   80dac:	2bff      	cmp	r3, #255	; 0xff
   80dae:	d909      	bls.n	80dc4 <twi_set_speed+0x6c>
   80db0:	69fb      	ldr	r3, [r7, #28]
   80db2:	2b06      	cmp	r3, #6
   80db4:	d9f3      	bls.n	80d9e <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80db6:	e005      	b.n	80dc4 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   80db8:	69fb      	ldr	r3, [r7, #28]
   80dba:	3301      	adds	r3, #1
   80dbc:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   80dbe:	693b      	ldr	r3, [r7, #16]
   80dc0:	085b      	lsrs	r3, r3, #1
   80dc2:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80dc4:	693b      	ldr	r3, [r7, #16]
   80dc6:	2bff      	cmp	r3, #255	; 0xff
   80dc8:	d902      	bls.n	80dd0 <twi_set_speed+0x78>
   80dca:	69fb      	ldr	r3, [r7, #28]
   80dcc:	2b06      	cmp	r3, #6
   80dce:	d9f3      	bls.n	80db8 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80dd0:	697b      	ldr	r3, [r7, #20]
   80dd2:	b2da      	uxtb	r2, r3
   80dd4:	693b      	ldr	r3, [r7, #16]
   80dd6:	021b      	lsls	r3, r3, #8
   80dd8:	b29b      	uxth	r3, r3
   80dda:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   80ddc:	69fb      	ldr	r3, [r7, #28]
   80dde:	041b      	lsls	r3, r3, #16
   80de0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80de4:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80de6:	68fb      	ldr	r3, [r7, #12]
   80de8:	611a      	str	r2, [r3, #16]
   80dea:	e020      	b.n	80e2e <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80dec:	68bb      	ldr	r3, [r7, #8]
   80dee:	005b      	lsls	r3, r3, #1
   80df0:	687a      	ldr	r2, [r7, #4]
   80df2:	fbb2 f3f3 	udiv	r3, r2, r3
   80df6:	3b04      	subs	r3, #4
   80df8:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80dfa:	e005      	b.n	80e08 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   80dfc:	69fb      	ldr	r3, [r7, #28]
   80dfe:	3301      	adds	r3, #1
   80e00:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   80e02:	69bb      	ldr	r3, [r7, #24]
   80e04:	085b      	lsrs	r3, r3, #1
   80e06:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e08:	69bb      	ldr	r3, [r7, #24]
   80e0a:	2bff      	cmp	r3, #255	; 0xff
   80e0c:	d902      	bls.n	80e14 <twi_set_speed+0xbc>
   80e0e:	69fb      	ldr	r3, [r7, #28]
   80e10:	2b06      	cmp	r3, #6
   80e12:	d9f3      	bls.n	80dfc <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80e14:	69bb      	ldr	r3, [r7, #24]
   80e16:	b2da      	uxtb	r2, r3
   80e18:	69bb      	ldr	r3, [r7, #24]
   80e1a:	021b      	lsls	r3, r3, #8
   80e1c:	b29b      	uxth	r3, r3
   80e1e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   80e20:	69fb      	ldr	r3, [r7, #28]
   80e22:	041b      	lsls	r3, r3, #16
   80e24:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80e28:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80e2a:	68fb      	ldr	r3, [r7, #12]
   80e2c:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   80e2e:	2300      	movs	r3, #0
}
   80e30:	4618      	mov	r0, r3
   80e32:	3724      	adds	r7, #36	; 0x24
   80e34:	46bd      	mov	sp, r7
   80e36:	bc80      	pop	{r7}
   80e38:	4770      	bx	lr
   80e3a:	bf00      	nop
   80e3c:	00061a80 	.word	0x00061a80
   80e40:	0005dc00 	.word	0x0005dc00
   80e44:	057619f1 	.word	0x057619f1
   80e48:	3ffd1200 	.word	0x3ffd1200

00080e4c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   80e4c:	b480      	push	{r7}
   80e4e:	b085      	sub	sp, #20
   80e50:	af00      	add	r7, sp, #0
   80e52:	6078      	str	r0, [r7, #4]
   80e54:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   80e56:	683b      	ldr	r3, [r7, #0]
   80e58:	2b00      	cmp	r3, #0
   80e5a:	d101      	bne.n	80e60 <twi_mk_addr+0x14>
		return 0;
   80e5c:	2300      	movs	r3, #0
   80e5e:	e01d      	b.n	80e9c <twi_mk_addr+0x50>

	val = addr[0];
   80e60:	687b      	ldr	r3, [r7, #4]
   80e62:	781b      	ldrb	r3, [r3, #0]
   80e64:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   80e66:	683b      	ldr	r3, [r7, #0]
   80e68:	2b01      	cmp	r3, #1
   80e6a:	dd09      	ble.n	80e80 <twi_mk_addr+0x34>
		val <<= 8;
   80e6c:	68fb      	ldr	r3, [r7, #12]
   80e6e:	021b      	lsls	r3, r3, #8
   80e70:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   80e72:	687b      	ldr	r3, [r7, #4]
   80e74:	3301      	adds	r3, #1
   80e76:	781b      	ldrb	r3, [r3, #0]
   80e78:	461a      	mov	r2, r3
   80e7a:	68fb      	ldr	r3, [r7, #12]
   80e7c:	4313      	orrs	r3, r2
   80e7e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   80e80:	683b      	ldr	r3, [r7, #0]
   80e82:	2b02      	cmp	r3, #2
   80e84:	dd09      	ble.n	80e9a <twi_mk_addr+0x4e>
		val <<= 8;
   80e86:	68fb      	ldr	r3, [r7, #12]
   80e88:	021b      	lsls	r3, r3, #8
   80e8a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   80e8c:	687b      	ldr	r3, [r7, #4]
   80e8e:	3302      	adds	r3, #2
   80e90:	781b      	ldrb	r3, [r3, #0]
   80e92:	461a      	mov	r2, r3
   80e94:	68fb      	ldr	r3, [r7, #12]
   80e96:	4313      	orrs	r3, r2
   80e98:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80e9a:	68fb      	ldr	r3, [r7, #12]
}
   80e9c:	4618      	mov	r0, r3
   80e9e:	3714      	adds	r7, #20
   80ea0:	46bd      	mov	sp, r7
   80ea2:	bc80      	pop	{r7}
   80ea4:	4770      	bx	lr
	...

00080ea8 <twi_is_busy>:
	}
}
#endif
#if 1
uint8_t twi_is_busy(void)
{
   80ea8:	b480      	push	{r7}
   80eaa:	af00      	add	r7, sp, #0
    return twiBusy;
   80eac:	4b02      	ldr	r3, [pc, #8]	; (80eb8 <twi_is_busy+0x10>)
   80eae:	781b      	ldrb	r3, [r3, #0]
}
   80eb0:	4618      	mov	r0, r3
   80eb2:	46bd      	mov	sp, r7
   80eb4:	bc80      	pop	{r7}
   80eb6:	4770      	bx	lr
   80eb8:	20070db8 	.word	0x20070db8

00080ebc <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   80ebc:	b480      	push	{r7}
   80ebe:	af00      	add	r7, sp, #0
    return &txPacket;
   80ec0:	4b02      	ldr	r3, [pc, #8]	; (80ecc <twi_get_tx_packet+0x10>)
}
   80ec2:	4618      	mov	r0, r3
   80ec4:	46bd      	mov	sp, r7
   80ec6:	bc80      	pop	{r7}
   80ec8:	4770      	bx	lr
   80eca:	bf00      	nop
   80ecc:	20070b98 	.word	0x20070b98

00080ed0 <twi_get_rx_packet>:

twi_packet_t *twi_get_rx_packet(void)
{
   80ed0:	b480      	push	{r7}
   80ed2:	af00      	add	r7, sp, #0
    return &rxPacket;
   80ed4:	4b02      	ldr	r3, [pc, #8]	; (80ee0 <twi_get_rx_packet+0x10>)
}
   80ed6:	4618      	mov	r0, r3
   80ed8:	46bd      	mov	sp, r7
   80eda:	bc80      	pop	{r7}
   80edc:	4770      	bx	lr
   80ede:	bf00      	nop
   80ee0:	20070ca8 	.word	0x20070ca8

00080ee4 <twi_pdc_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_pdc_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80ee4:	b580      	push	{r7, lr}
   80ee6:	b084      	sub	sp, #16
   80ee8:	af00      	add	r7, sp, #0
   80eea:	6078      	str	r0, [r7, #4]
   80eec:	6039      	str	r1, [r7, #0]
    pdc_packet_t rxPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   80eee:	683b      	ldr	r3, [r7, #0]
   80ef0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80ef4:	2b00      	cmp	r3, #0
   80ef6:	d101      	bne.n	80efc <twi_pdc_master_read+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   80ef8:	2301      	movs	r3, #1
   80efa:	e047      	b.n	80f8c <twi_pdc_master_read+0xa8>
    }
    
    twiBusy = true;
   80efc:	4b25      	ldr	r3, [pc, #148]	; (80f94 <twi_pdc_master_read+0xb0>)
   80efe:	2201      	movs	r2, #1
   80f00:	701a      	strb	r2, [r3, #0]

    // Ensure Rx is already empty
    twi_read_byte(TWI0);
   80f02:	4825      	ldr	r0, [pc, #148]	; (80f98 <twi_pdc_master_read+0xb4>)
   80f04:	4b25      	ldr	r3, [pc, #148]	; (80f9c <twi_pdc_master_read+0xb8>)
   80f06:	4798      	blx	r3

    // Set read mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   80f08:	687b      	ldr	r3, [r7, #4]
   80f0a:	2200      	movs	r2, #0
   80f0c:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   80f0e:	683b      	ldr	r3, [r7, #0]
   80f10:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   80f14:	041b      	lsls	r3, r3, #16
   80f16:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   80f1a:	683b      	ldr	r3, [r7, #0]
   80f1c:	685b      	ldr	r3, [r3, #4]
   80f1e:	021b      	lsls	r3, r3, #8
   80f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
   80f24:	4313      	orrs	r3, r2
   80f26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   80f2a:	687b      	ldr	r3, [r7, #4]
   80f2c:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   80f2e:	687b      	ldr	r3, [r7, #4]
   80f30:	2200      	movs	r2, #0
   80f32:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80f34:	683a      	ldr	r2, [r7, #0]
   80f36:	683b      	ldr	r3, [r7, #0]
   80f38:	685b      	ldr	r3, [r3, #4]
   80f3a:	4619      	mov	r1, r3
   80f3c:	4610      	mov	r0, r2
   80f3e:	4b18      	ldr	r3, [pc, #96]	; (80fa0 <twi_pdc_master_read+0xbc>)
   80f40:	4798      	blx	r3
   80f42:	4602      	mov	r2, r0
   80f44:	687b      	ldr	r3, [r7, #4]
   80f46:	60da      	str	r2, [r3, #12]
        twi_enable_interrupt(TWI0, IER_ERROR_INTERRUPTS);
    }
    else
    {
#endif
        rxPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   80f48:	683b      	ldr	r3, [r7, #0]
   80f4a:	3308      	adds	r3, #8
   80f4c:	60bb      	str	r3, [r7, #8]
        rxPdcPacket.ul_size = p_packet->length - 1;
   80f4e:	683b      	ldr	r3, [r7, #0]
   80f50:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80f54:	3b01      	subs	r3, #1
   80f56:	60fb      	str	r3, [r7, #12]
        pdc_rx_init(PDC_TWI0, &rxPdcPacket, NULL);
   80f58:	f107 0308 	add.w	r3, r7, #8
   80f5c:	2200      	movs	r2, #0
   80f5e:	4619      	mov	r1, r3
   80f60:	4810      	ldr	r0, [pc, #64]	; (80fa4 <twi_pdc_master_read+0xc0>)
   80f62:	4b11      	ldr	r3, [pc, #68]	; (80fa8 <twi_pdc_master_read+0xc4>)
   80f64:	4798      	blx	r3

        pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_RXTEN);
   80f66:	2101      	movs	r1, #1
   80f68:	480e      	ldr	r0, [pc, #56]	; (80fa4 <twi_pdc_master_read+0xc0>)
   80f6a:	4b10      	ldr	r3, [pc, #64]	; (80fac <twi_pdc_master_read+0xc8>)
   80f6c:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_START;
   80f6e:	4b0a      	ldr	r3, [pc, #40]	; (80f98 <twi_pdc_master_read+0xb4>)
   80f70:	2201      	movs	r2, #1
   80f72:	601a      	str	r2, [r3, #0]

        twi_enable_interrupt(p_twi, TWI_IER_ENDRX);
   80f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80f78:	6878      	ldr	r0, [r7, #4]
   80f7a:	4b0d      	ldr	r3, [pc, #52]	; (80fb0 <twi_pdc_master_read+0xcc>)
   80f7c:	4798      	blx	r3
        NVIC_ClearPendingIRQ(TWI0_IRQn);
   80f7e:	2016      	movs	r0, #22
   80f80:	4b0c      	ldr	r3, [pc, #48]	; (80fb4 <twi_pdc_master_read+0xd0>)
   80f82:	4798      	blx	r3
        NVIC_EnableIRQ(TWI0_IRQn);
   80f84:	2016      	movs	r0, #22
   80f86:	4b0c      	ldr	r3, [pc, #48]	; (80fb8 <twi_pdc_master_read+0xd4>)
   80f88:	4798      	blx	r3
//    }

    return TWI_SUCCESS;
   80f8a:	2300      	movs	r3, #0
}
   80f8c:	4618      	mov	r0, r3
   80f8e:	3710      	adds	r7, #16
   80f90:	46bd      	mov	sp, r7
   80f92:	bd80      	pop	{r7, pc}
   80f94:	20070db8 	.word	0x20070db8
   80f98:	4008c000 	.word	0x4008c000
   80f9c:	000812e9 	.word	0x000812e9
   80fa0:	00080e4d 	.word	0x00080e4d
   80fa4:	4008c100 	.word	0x4008c100
   80fa8:	00080273 	.word	0x00080273
   80fac:	000802b5 	.word	0x000802b5
   80fb0:	00081285 	.word	0x00081285
   80fb4:	00080c75 	.word	0x00080c75
   80fb8:	00080c45 	.word	0x00080c45

00080fbc <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   80fbc:	b580      	push	{r7, lr}
   80fbe:	b084      	sub	sp, #16
   80fc0:	af00      	add	r7, sp, #0
   80fc2:	6078      	str	r0, [r7, #4]
   80fc4:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   80fc6:	683b      	ldr	r3, [r7, #0]
   80fc8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80fcc:	2b00      	cmp	r3, #0
   80fce:	d101      	bne.n	80fd4 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   80fd0:	2301      	movs	r3, #1
   80fd2:	e040      	b.n	81056 <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   80fd4:	4b22      	ldr	r3, [pc, #136]	; (81060 <twi_pdc_master_write+0xa4>)
   80fd6:	2201      	movs	r2, #1
   80fd8:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   80fda:	683b      	ldr	r3, [r7, #0]
   80fdc:	3308      	adds	r3, #8
   80fde:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   80fe0:	683b      	ldr	r3, [r7, #0]
   80fe2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80fe6:	3b01      	subs	r3, #1
   80fe8:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   80fea:	f107 0308 	add.w	r3, r7, #8
   80fee:	2200      	movs	r2, #0
   80ff0:	4619      	mov	r1, r3
   80ff2:	481c      	ldr	r0, [pc, #112]	; (81064 <twi_pdc_master_write+0xa8>)
   80ff4:	4b1c      	ldr	r3, [pc, #112]	; (81068 <twi_pdc_master_write+0xac>)
   80ff6:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   80ff8:	687b      	ldr	r3, [r7, #4]
   80ffa:	2200      	movs	r2, #0
   80ffc:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   80ffe:	683b      	ldr	r3, [r7, #0]
   81000:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   81004:	041b      	lsls	r3, r3, #16
   81006:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   8100a:	683b      	ldr	r3, [r7, #0]
   8100c:	685b      	ldr	r3, [r3, #4]
   8100e:	021b      	lsls	r3, r3, #8
   81010:	f403 7340 	and.w	r3, r3, #768	; 0x300
   81014:	431a      	orrs	r2, r3
   81016:	687b      	ldr	r3, [r7, #4]
   81018:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   8101a:	687b      	ldr	r3, [r7, #4]
   8101c:	2200      	movs	r2, #0
   8101e:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   81020:	683a      	ldr	r2, [r7, #0]
   81022:	683b      	ldr	r3, [r7, #0]
   81024:	685b      	ldr	r3, [r3, #4]
   81026:	4619      	mov	r1, r3
   81028:	4610      	mov	r0, r2
   8102a:	4b10      	ldr	r3, [pc, #64]	; (8106c <twi_pdc_master_write+0xb0>)
   8102c:	4798      	blx	r3
   8102e:	4602      	mov	r2, r0
   81030:	687b      	ldr	r3, [r7, #4]
   81032:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   81034:	f44f 7180 	mov.w	r1, #256	; 0x100
   81038:	480a      	ldr	r0, [pc, #40]	; (81064 <twi_pdc_master_write+0xa8>)
   8103a:	4b0d      	ldr	r3, [pc, #52]	; (81070 <twi_pdc_master_write+0xb4>)
   8103c:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   8103e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81042:	6878      	ldr	r0, [r7, #4]
   81044:	4b0b      	ldr	r3, [pc, #44]	; (81074 <twi_pdc_master_write+0xb8>)
   81046:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   81048:	2016      	movs	r0, #22
   8104a:	4b0b      	ldr	r3, [pc, #44]	; (81078 <twi_pdc_master_write+0xbc>)
   8104c:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   8104e:	2016      	movs	r0, #22
   81050:	4b0a      	ldr	r3, [pc, #40]	; (8107c <twi_pdc_master_write+0xc0>)
   81052:	4798      	blx	r3

    return TWI_SUCCESS;
   81054:	2300      	movs	r3, #0
}
   81056:	4618      	mov	r0, r3
   81058:	3710      	adds	r7, #16
   8105a:	46bd      	mov	sp, r7
   8105c:	bd80      	pop	{r7, pc}
   8105e:	bf00      	nop
   81060:	20070db8 	.word	0x20070db8
   81064:	4008c100 	.word	0x4008c100
   81068:	00080231 	.word	0x00080231
   8106c:	00080e4d 	.word	0x00080e4d
   81070:	000802b5 	.word	0x000802b5
   81074:	00081285 	.word	0x00081285
   81078:	00080c75 	.word	0x00080c75
   8107c:	00080c45 	.word	0x00080c45

00081080 <twi_set_compass_rx_callback>:
 * \brief Callback function for TWI receive.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_rx_callback(void (*callback)(void))
{
   81080:	b480      	push	{r7}
   81082:	b083      	sub	sp, #12
   81084:	af00      	add	r7, sp, #0
   81086:	6078      	str	r0, [r7, #4]
    compassRxCallback = callback;
   81088:	4a03      	ldr	r2, [pc, #12]	; (81098 <twi_set_compass_rx_callback+0x18>)
   8108a:	687b      	ldr	r3, [r7, #4]
   8108c:	6013      	str	r3, [r2, #0]
}
   8108e:	bf00      	nop
   81090:	370c      	adds	r7, #12
   81092:	46bd      	mov	sp, r7
   81094:	bc80      	pop	{r7}
   81096:	4770      	bx	lr
   81098:	20070dc4 	.word	0x20070dc4

0008109c <twi_set_compass_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_tx_callback(void (*callback)(void))
{
   8109c:	b480      	push	{r7}
   8109e:	b083      	sub	sp, #12
   810a0:	af00      	add	r7, sp, #0
   810a2:	6078      	str	r0, [r7, #4]
    compassTxCallback = callback;
   810a4:	4a03      	ldr	r2, [pc, #12]	; (810b4 <twi_set_compass_tx_callback+0x18>)
   810a6:	687b      	ldr	r3, [r7, #4]
   810a8:	6013      	str	r3, [r2, #0]
}
   810aa:	bf00      	nop
   810ac:	370c      	adds	r7, #12
   810ae:	46bd      	mov	sp, r7
   810b0:	bc80      	pop	{r7}
   810b2:	4770      	bx	lr
   810b4:	20070dc0 	.word	0x20070dc0

000810b8 <twi_set_lcd_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_lcd_tx_callback(void (*callback)(void))
{
   810b8:	b480      	push	{r7}
   810ba:	b083      	sub	sp, #12
   810bc:	af00      	add	r7, sp, #0
   810be:	6078      	str	r0, [r7, #4]
    lcdTxCallback = callback;
   810c0:	4a03      	ldr	r2, [pc, #12]	; (810d0 <twi_set_lcd_tx_callback+0x18>)
   810c2:	687b      	ldr	r3, [r7, #4]
   810c4:	6013      	str	r3, [r2, #0]
}
   810c6:	bf00      	nop
   810c8:	370c      	adds	r7, #12
   810ca:	46bd      	mov	sp, r7
   810cc:	bc80      	pop	{r7}
   810ce:	4770      	bx	lr
   810d0:	20070dbc 	.word	0x20070dbc

000810d4 <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   810d4:	b590      	push	{r4, r7, lr}
   810d6:	b083      	sub	sp, #12
   810d8:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   810da:	485d      	ldr	r0, [pc, #372]	; (81250 <TWI0_Handler+0x17c>)
   810dc:	4b5d      	ldr	r3, [pc, #372]	; (81254 <TWI0_Handler+0x180>)
   810de:	4798      	blx	r3
   810e0:	4604      	mov	r4, r0
   810e2:	485b      	ldr	r0, [pc, #364]	; (81250 <TWI0_Handler+0x17c>)
   810e4:	4b5c      	ldr	r3, [pc, #368]	; (81258 <TWI0_Handler+0x184>)
   810e6:	4798      	blx	r3
   810e8:	4603      	mov	r3, r0
   810ea:	4023      	ands	r3, r4
   810ec:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   810ee:	687b      	ldr	r3, [r7, #4]
   810f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   810f4:	2b00      	cmp	r3, #0
   810f6:	d014      	beq.n	81122 <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   810f8:	f44f 7100 	mov.w	r1, #512	; 0x200
   810fc:	4857      	ldr	r0, [pc, #348]	; (8125c <TWI0_Handler+0x188>)
   810fe:	4b58      	ldr	r3, [pc, #352]	; (81260 <TWI0_Handler+0x18c>)
   81100:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   81102:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81106:	4852      	ldr	r0, [pc, #328]	; (81250 <TWI0_Handler+0x17c>)
   81108:	4b56      	ldr	r3, [pc, #344]	; (81264 <TWI0_Handler+0x190>)
   8110a:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   8110c:	2104      	movs	r1, #4
   8110e:	4850      	ldr	r0, [pc, #320]	; (81250 <TWI0_Handler+0x17c>)
   81110:	4b55      	ldr	r3, [pc, #340]	; (81268 <TWI0_Handler+0x194>)
   81112:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   81114:	484e      	ldr	r0, [pc, #312]	; (81250 <TWI0_Handler+0x17c>)
   81116:	4b4f      	ldr	r3, [pc, #316]	; (81254 <TWI0_Handler+0x180>)
   81118:	4798      	blx	r3
   8111a:	4602      	mov	r2, r0
   8111c:	687b      	ldr	r3, [r7, #4]
   8111e:	4313      	orrs	r3, r2
   81120:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   81122:	687b      	ldr	r3, [r7, #4]
   81124:	f003 0304 	and.w	r3, r3, #4
   81128:	2b00      	cmp	r3, #0
   8112a:	d01a      	beq.n	81162 <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   8112c:	2104      	movs	r1, #4
   8112e:	4848      	ldr	r0, [pc, #288]	; (81250 <TWI0_Handler+0x17c>)
   81130:	4b4c      	ldr	r3, [pc, #304]	; (81264 <TWI0_Handler+0x190>)
   81132:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   81134:	4b46      	ldr	r3, [pc, #280]	; (81250 <TWI0_Handler+0x17c>)
   81136:	2202      	movs	r2, #2
   81138:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   8113a:	4a45      	ldr	r2, [pc, #276]	; (81250 <TWI0_Handler+0x17c>)
   8113c:	4b4b      	ldr	r3, [pc, #300]	; (8126c <TWI0_Handler+0x198>)
   8113e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81142:	3b01      	subs	r3, #1
   81144:	4949      	ldr	r1, [pc, #292]	; (8126c <TWI0_Handler+0x198>)
   81146:	440b      	add	r3, r1
   81148:	7a1b      	ldrb	r3, [r3, #8]
   8114a:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   8114c:	2101      	movs	r1, #1
   8114e:	4840      	ldr	r0, [pc, #256]	; (81250 <TWI0_Handler+0x17c>)
   81150:	4b45      	ldr	r3, [pc, #276]	; (81268 <TWI0_Handler+0x194>)
   81152:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   81154:	483e      	ldr	r0, [pc, #248]	; (81250 <TWI0_Handler+0x17c>)
   81156:	4b3f      	ldr	r3, [pc, #252]	; (81254 <TWI0_Handler+0x180>)
   81158:	4798      	blx	r3
   8115a:	4602      	mov	r2, r0
   8115c:	687b      	ldr	r3, [r7, #4]
   8115e:	4313      	orrs	r3, r2
   81160:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   81162:	687b      	ldr	r3, [r7, #4]
   81164:	f003 0301 	and.w	r3, r3, #1
   81168:	2b00      	cmp	r3, #0
   8116a:	d014      	beq.n	81196 <TWI0_Handler+0xc2>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   8116c:	2101      	movs	r1, #1
   8116e:	4838      	ldr	r0, [pc, #224]	; (81250 <TWI0_Handler+0x17c>)
   81170:	4b3c      	ldr	r3, [pc, #240]	; (81264 <TWI0_Handler+0x190>)
   81172:	4798      	blx	r3

        // If defined, call the connected function.
        if(compassTxCallback != NULL)
   81174:	4b3e      	ldr	r3, [pc, #248]	; (81270 <TWI0_Handler+0x19c>)
   81176:	681b      	ldr	r3, [r3, #0]
   81178:	2b00      	cmp	r3, #0
   8117a:	d002      	beq.n	81182 <TWI0_Handler+0xae>
        {
            compassTxCallback();
   8117c:	4b3c      	ldr	r3, [pc, #240]	; (81270 <TWI0_Handler+0x19c>)
   8117e:	681b      	ldr	r3, [r3, #0]
   81180:	4798      	blx	r3
        }

        // If defined, call the connected function.
        if(lcdTxCallback != NULL)
   81182:	4b3c      	ldr	r3, [pc, #240]	; (81274 <TWI0_Handler+0x1a0>)
   81184:	681b      	ldr	r3, [r3, #0]
   81186:	2b00      	cmp	r3, #0
   81188:	d002      	beq.n	81190 <TWI0_Handler+0xbc>
        {
          lcdTxCallback();
   8118a:	4b3a      	ldr	r3, [pc, #232]	; (81274 <TWI0_Handler+0x1a0>)
   8118c:	681b      	ldr	r3, [r3, #0]
   8118e:	4798      	blx	r3
        }

        twiBusy = false;
   81190:	4b39      	ldr	r3, [pc, #228]	; (81278 <TWI0_Handler+0x1a4>)
   81192:	2200      	movs	r2, #0
   81194:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   81196:	687b      	ldr	r3, [r7, #4]
   81198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   8119c:	2b00      	cmp	r3, #0
   8119e:	d016      	beq.n	811ce <TWI0_Handler+0xfa>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   811a0:	2102      	movs	r1, #2
   811a2:	482e      	ldr	r0, [pc, #184]	; (8125c <TWI0_Handler+0x188>)
   811a4:	4b2e      	ldr	r3, [pc, #184]	; (81260 <TWI0_Handler+0x18c>)
   811a6:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   811a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   811ac:	4828      	ldr	r0, [pc, #160]	; (81250 <TWI0_Handler+0x17c>)
   811ae:	4b2d      	ldr	r3, [pc, #180]	; (81264 <TWI0_Handler+0x190>)
   811b0:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   811b2:	2102      	movs	r1, #2
   811b4:	4826      	ldr	r0, [pc, #152]	; (81250 <TWI0_Handler+0x17c>)
   811b6:	4b2c      	ldr	r3, [pc, #176]	; (81268 <TWI0_Handler+0x194>)
   811b8:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   811ba:	4b25      	ldr	r3, [pc, #148]	; (81250 <TWI0_Handler+0x17c>)
   811bc:	2202      	movs	r2, #2
   811be:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   811c0:	4823      	ldr	r0, [pc, #140]	; (81250 <TWI0_Handler+0x17c>)
   811c2:	4b24      	ldr	r3, [pc, #144]	; (81254 <TWI0_Handler+0x180>)
   811c4:	4798      	blx	r3
   811c6:	4602      	mov	r2, r0
   811c8:	687b      	ldr	r3, [r7, #4]
   811ca:	4313      	orrs	r3, r2
   811cc:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   811ce:	687b      	ldr	r3, [r7, #4]
   811d0:	f003 0302 	and.w	r3, r3, #2
   811d4:	2b00      	cmp	r3, #0
   811d6:	d018      	beq.n	8120a <TWI0_Handler+0x136>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   811d8:	2102      	movs	r1, #2
   811da:	481d      	ldr	r0, [pc, #116]	; (81250 <TWI0_Handler+0x17c>)
   811dc:	4b21      	ldr	r3, [pc, #132]	; (81264 <TWI0_Handler+0x190>)
   811de:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   811e0:	4b26      	ldr	r3, [pc, #152]	; (8127c <TWI0_Handler+0x1a8>)
   811e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   811e6:	3b01      	subs	r3, #1
   811e8:	4a19      	ldr	r2, [pc, #100]	; (81250 <TWI0_Handler+0x17c>)
   811ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
   811ec:	b2d1      	uxtb	r1, r2
   811ee:	4a23      	ldr	r2, [pc, #140]	; (8127c <TWI0_Handler+0x1a8>)
   811f0:	4413      	add	r3, r2
   811f2:	460a      	mov	r2, r1
   811f4:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(compassRxCallback != NULL)
   811f6:	4b22      	ldr	r3, [pc, #136]	; (81280 <TWI0_Handler+0x1ac>)
   811f8:	681b      	ldr	r3, [r3, #0]
   811fa:	2b00      	cmp	r3, #0
   811fc:	d002      	beq.n	81204 <TWI0_Handler+0x130>
        {
            compassRxCallback();
   811fe:	4b20      	ldr	r3, [pc, #128]	; (81280 <TWI0_Handler+0x1ac>)
   81200:	681b      	ldr	r3, [r3, #0]
   81202:	4798      	blx	r3
        }

        twiBusy = false;
   81204:	4b1c      	ldr	r3, [pc, #112]	; (81278 <TWI0_Handler+0x1a4>)
   81206:	2200      	movs	r2, #0
   81208:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   8120a:	687b      	ldr	r3, [r7, #4]
   8120c:	f403 7350 	and.w	r3, r3, #832	; 0x340
   81210:	2b00      	cmp	r3, #0
   81212:	d019      	beq.n	81248 <TWI0_Handler+0x174>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81214:	f240 2102 	movw	r1, #514	; 0x202
   81218:	4810      	ldr	r0, [pc, #64]	; (8125c <TWI0_Handler+0x188>)
   8121a:	4b11      	ldr	r3, [pc, #68]	; (81260 <TWI0_Handler+0x18c>)
   8121c:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   8121e:	687b      	ldr	r3, [r7, #4]
   81220:	f403 7380 	and.w	r3, r3, #256	; 0x100
   81224:	2b00      	cmp	r3, #0
   81226:	d102      	bne.n	8122e <TWI0_Handler+0x15a>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   81228:	4b09      	ldr	r3, [pc, #36]	; (81250 <TWI0_Handler+0x17c>)
   8122a:	2202      	movs	r2, #2
   8122c:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   8122e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81232:	4807      	ldr	r0, [pc, #28]	; (81250 <TWI0_Handler+0x17c>)
   81234:	4b0b      	ldr	r3, [pc, #44]	; (81264 <TWI0_Handler+0x190>)
   81236:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   81238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8123c:	4804      	ldr	r0, [pc, #16]	; (81250 <TWI0_Handler+0x17c>)
   8123e:	4b09      	ldr	r3, [pc, #36]	; (81264 <TWI0_Handler+0x190>)
   81240:	4798      	blx	r3

        twiBusy = false;
   81242:	4b0d      	ldr	r3, [pc, #52]	; (81278 <TWI0_Handler+0x1a4>)
   81244:	2200      	movs	r2, #0
   81246:	701a      	strb	r2, [r3, #0]
	}
}
   81248:	bf00      	nop
   8124a:	370c      	adds	r7, #12
   8124c:	46bd      	mov	sp, r7
   8124e:	bd90      	pop	{r4, r7, pc}
   81250:	4008c000 	.word	0x4008c000
   81254:	000812bd 	.word	0x000812bd
   81258:	000812d3 	.word	0x000812d3
   8125c:	4008c100 	.word	0x4008c100
   81260:	000802d5 	.word	0x000802d5
   81264:	0008129f 	.word	0x0008129f
   81268:	00081285 	.word	0x00081285
   8126c:	20070b98 	.word	0x20070b98
   81270:	20070dc0 	.word	0x20070dc0
   81274:	20070dbc 	.word	0x20070dbc
   81278:	20070db8 	.word	0x20070db8
   8127c:	20070ca8 	.word	0x20070ca8
   81280:	20070dc4 	.word	0x20070dc4

00081284 <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   81284:	b480      	push	{r7}
   81286:	b083      	sub	sp, #12
   81288:	af00      	add	r7, sp, #0
   8128a:	6078      	str	r0, [r7, #4]
   8128c:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   8128e:	687b      	ldr	r3, [r7, #4]
   81290:	683a      	ldr	r2, [r7, #0]
   81292:	625a      	str	r2, [r3, #36]	; 0x24
}
   81294:	bf00      	nop
   81296:	370c      	adds	r7, #12
   81298:	46bd      	mov	sp, r7
   8129a:	bc80      	pop	{r7}
   8129c:	4770      	bx	lr

0008129e <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   8129e:	b480      	push	{r7}
   812a0:	b083      	sub	sp, #12
   812a2:	af00      	add	r7, sp, #0
   812a4:	6078      	str	r0, [r7, #4]
   812a6:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   812a8:	687b      	ldr	r3, [r7, #4]
   812aa:	683a      	ldr	r2, [r7, #0]
   812ac:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   812ae:	687b      	ldr	r3, [r7, #4]
   812b0:	6a1b      	ldr	r3, [r3, #32]
}
   812b2:	bf00      	nop
   812b4:	370c      	adds	r7, #12
   812b6:	46bd      	mov	sp, r7
   812b8:	bc80      	pop	{r7}
   812ba:	4770      	bx	lr

000812bc <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   812bc:	b480      	push	{r7}
   812be:	b083      	sub	sp, #12
   812c0:	af00      	add	r7, sp, #0
   812c2:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   812c4:	687b      	ldr	r3, [r7, #4]
   812c6:	6a1b      	ldr	r3, [r3, #32]
}
   812c8:	4618      	mov	r0, r3
   812ca:	370c      	adds	r7, #12
   812cc:	46bd      	mov	sp, r7
   812ce:	bc80      	pop	{r7}
   812d0:	4770      	bx	lr

000812d2 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   812d2:	b480      	push	{r7}
   812d4:	b083      	sub	sp, #12
   812d6:	af00      	add	r7, sp, #0
   812d8:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   812da:	687b      	ldr	r3, [r7, #4]
   812dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   812de:	4618      	mov	r0, r3
   812e0:	370c      	adds	r7, #12
   812e2:	46bd      	mov	sp, r7
   812e4:	bc80      	pop	{r7}
   812e6:	4770      	bx	lr

000812e8 <twi_read_byte>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The byte read.
 */
uint8_t twi_read_byte(Twi *p_twi)
{
   812e8:	b480      	push	{r7}
   812ea:	b083      	sub	sp, #12
   812ec:	af00      	add	r7, sp, #0
   812ee:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_RHR;
   812f0:	687b      	ldr	r3, [r7, #4]
   812f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   812f4:	b2db      	uxtb	r3, r3
}
   812f6:	4618      	mov	r0, r3
   812f8:	370c      	adds	r7, #12
   812fa:	46bd      	mov	sp, r7
   812fc:	bc80      	pop	{r7}
   812fe:	4770      	bx	lr

00081300 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   81300:	b480      	push	{r7}
   81302:	b083      	sub	sp, #12
   81304:	af00      	add	r7, sp, #0
   81306:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   81308:	687b      	ldr	r3, [r7, #4]
   8130a:	2280      	movs	r2, #128	; 0x80
   8130c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   8130e:	687b      	ldr	r3, [r7, #4]
   81310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   81312:	bf00      	nop
   81314:	370c      	adds	r7, #12
   81316:	46bd      	mov	sp, r7
   81318:	bc80      	pop	{r7}
   8131a:	4770      	bx	lr

0008131c <compass_init>:

//local function
static void compass_callback(void);

void compass_init(void)
{
   8131c:	b580      	push	{r7, lr}
   8131e:	b082      	sub	sp, #8
   81320:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   81322:	4b0d      	ldr	r3, [pc, #52]	; (81358 <compass_init+0x3c>)
   81324:	4798      	blx	r3
   81326:	6078      	str	r0, [r7, #4]

    rx_packet->chip = 0x60;
   81328:	687b      	ldr	r3, [r7, #4]
   8132a:	2260      	movs	r2, #96	; 0x60
   8132c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    rx_packet->addr[0] = 0x02;
   81330:	687b      	ldr	r3, [r7, #4]
   81332:	2202      	movs	r2, #2
   81334:	701a      	strb	r2, [r3, #0]
    rx_packet->addr_length = 1;
   81336:	687b      	ldr	r3, [r7, #4]
   81338:	2201      	movs	r2, #1
   8133a:	605a      	str	r2, [r3, #4]
    rx_packet->length = sizeof(direction);
   8133c:	687b      	ldr	r3, [r7, #4]
   8133e:	2202      	movs	r2, #2
   81340:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    twi_set_compass_tx_callback(compass_callback);
   81344:	4805      	ldr	r0, [pc, #20]	; (8135c <compass_init+0x40>)
   81346:	4b06      	ldr	r3, [pc, #24]	; (81360 <compass_init+0x44>)
   81348:	4798      	blx	r3
    twi_set_compass_rx_callback(compass_callback);
   8134a:	4804      	ldr	r0, [pc, #16]	; (8135c <compass_init+0x40>)
   8134c:	4b05      	ldr	r3, [pc, #20]	; (81364 <compass_init+0x48>)
   8134e:	4798      	blx	r3
}
   81350:	bf00      	nop
   81352:	3708      	adds	r7, #8
   81354:	46bd      	mov	sp, r7
   81356:	bd80      	pop	{r7, pc}
   81358:	00080ed1 	.word	0x00080ed1
   8135c:	00081425 	.word	0x00081425
   81360:	0008109d 	.word	0x0008109d
   81364:	00081081 	.word	0x00081081

00081368 <update_compass>:

void update_compass(void)
{
   81368:	b580      	push	{r7, lr}
   8136a:	b082      	sub	sp, #8
   8136c:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   8136e:	4b1a      	ldr	r3, [pc, #104]	; (813d8 <update_compass+0x70>)
   81370:	4798      	blx	r3
   81372:	6078      	str	r0, [r7, #4]

    if ((getTicks() - ul_ticks_compass) > 100)
   81374:	4b19      	ldr	r3, [pc, #100]	; (813dc <update_compass+0x74>)
   81376:	4798      	blx	r3
   81378:	4602      	mov	r2, r0
   8137a:	4b19      	ldr	r3, [pc, #100]	; (813e0 <update_compass+0x78>)
   8137c:	681b      	ldr	r3, [r3, #0]
   8137e:	1ad3      	subs	r3, r2, r3
   81380:	2b64      	cmp	r3, #100	; 0x64
   81382:	d926      	bls.n	813d2 <update_compass+0x6a>
    {
        if(lcd_is_busy())
   81384:	4b17      	ldr	r3, [pc, #92]	; (813e4 <update_compass+0x7c>)
   81386:	4798      	blx	r3
   81388:	4603      	mov	r3, r0
   8138a:	2b00      	cmp	r3, #0
   8138c:	d120      	bne.n	813d0 <update_compass+0x68>
        {
            return;
        }

        ul_ticks_compass = getTicks();
   8138e:	4b13      	ldr	r3, [pc, #76]	; (813dc <update_compass+0x74>)
   81390:	4798      	blx	r3
   81392:	4602      	mov	r2, r0
   81394:	4b12      	ldr	r3, [pc, #72]	; (813e0 <update_compass+0x78>)
   81396:	601a      	str	r2, [r3, #0]
        
        compassIsBusy = true;
   81398:	4b13      	ldr	r3, [pc, #76]	; (813e8 <update_compass+0x80>)
   8139a:	2201      	movs	r2, #1
   8139c:	701a      	strb	r2, [r3, #0]
        if(twi_pdc_master_read(TWI0, rx_packet) == TWI_SUCCESS)
   8139e:	6879      	ldr	r1, [r7, #4]
   813a0:	4812      	ldr	r0, [pc, #72]	; (813ec <update_compass+0x84>)
   813a2:	4b13      	ldr	r3, [pc, #76]	; (813f0 <update_compass+0x88>)
   813a4:	4798      	blx	r3
   813a6:	4603      	mov	r3, r0
   813a8:	2b00      	cmp	r3, #0
   813aa:	d104      	bne.n	813b6 <update_compass+0x4e>
        {
            while(compassIsBusy);
   813ac:	bf00      	nop
   813ae:	4b0e      	ldr	r3, [pc, #56]	; (813e8 <update_compass+0x80>)
   813b0:	781b      	ldrb	r3, [r3, #0]
   813b2:	2b00      	cmp	r3, #0
   813b4:	d1fb      	bne.n	813ae <update_compass+0x46>
        }
        direction = (rx_packet->buffer[0] << 8) | rx_packet->buffer[1];
   813b6:	687b      	ldr	r3, [r7, #4]
   813b8:	7a1b      	ldrb	r3, [r3, #8]
   813ba:	021b      	lsls	r3, r3, #8
   813bc:	b21a      	sxth	r2, r3
   813be:	687b      	ldr	r3, [r7, #4]
   813c0:	7a5b      	ldrb	r3, [r3, #9]
   813c2:	b21b      	sxth	r3, r3
   813c4:	4313      	orrs	r3, r2
   813c6:	b21b      	sxth	r3, r3
   813c8:	b29a      	uxth	r2, r3
   813ca:	4b0a      	ldr	r3, [pc, #40]	; (813f4 <update_compass+0x8c>)
   813cc:	801a      	strh	r2, [r3, #0]
   813ce:	e000      	b.n	813d2 <update_compass+0x6a>
            return;
   813d0:	bf00      	nop
    }
}
   813d2:	3708      	adds	r7, #8
   813d4:	46bd      	mov	sp, r7
   813d6:	bd80      	pop	{r7, pc}
   813d8:	00080ed1 	.word	0x00080ed1
   813dc:	00082f05 	.word	0x00082f05
   813e0:	20070fe0 	.word	0x20070fe0
   813e4:	0008186d 	.word	0x0008186d
   813e8:	20070dc8 	.word	0x20070dc8
   813ec:	4008c000 	.word	0x4008c000
   813f0:	00080ee5 	.word	0x00080ee5
   813f4:	20070e40 	.word	0x20070e40

000813f8 <set_compass_is_busy>:

void set_compass_is_busy(void)
{
   813f8:	b480      	push	{r7}
   813fa:	af00      	add	r7, sp, #0
    compassIsBusy = true;
   813fc:	4b03      	ldr	r3, [pc, #12]	; (8140c <set_compass_is_busy+0x14>)
   813fe:	2201      	movs	r2, #1
   81400:	701a      	strb	r2, [r3, #0]
}
   81402:	bf00      	nop
   81404:	46bd      	mov	sp, r7
   81406:	bc80      	pop	{r7}
   81408:	4770      	bx	lr
   8140a:	bf00      	nop
   8140c:	20070dc8 	.word	0x20070dc8

00081410 <compass_is_busy>:

uint8_t compass_is_busy(void)
{
   81410:	b480      	push	{r7}
   81412:	af00      	add	r7, sp, #0
    return compassIsBusy;
   81414:	4b02      	ldr	r3, [pc, #8]	; (81420 <compass_is_busy+0x10>)
   81416:	781b      	ldrb	r3, [r3, #0]
}
   81418:	4618      	mov	r0, r3
   8141a:	46bd      	mov	sp, r7
   8141c:	bc80      	pop	{r7}
   8141e:	4770      	bx	lr
   81420:	20070dc8 	.word	0x20070dc8

00081424 <compass_callback>:
    return tmp_corr;
}*/

//local function
static void compass_callback(void)
{
   81424:	b480      	push	{r7}
   81426:	af00      	add	r7, sp, #0
    compassIsBusy = false;
   81428:	4b03      	ldr	r3, [pc, #12]	; (81438 <compass_callback+0x14>)
   8142a:	2200      	movs	r2, #0
   8142c:	701a      	strb	r2, [r3, #0]
}
   8142e:	bf00      	nop
   81430:	46bd      	mov	sp, r7
   81432:	bc80      	pop	{r7}
   81434:	4770      	bx	lr
   81436:	bf00      	nop
   81438:	20070dc8 	.word	0x20070dc8

0008143c <osc_get_rate>:
{
   8143c:	b480      	push	{r7}
   8143e:	b083      	sub	sp, #12
   81440:	af00      	add	r7, sp, #0
   81442:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81444:	687b      	ldr	r3, [r7, #4]
   81446:	2b07      	cmp	r3, #7
   81448:	d825      	bhi.n	81496 <osc_get_rate+0x5a>
   8144a:	a201      	add	r2, pc, #4	; (adr r2, 81450 <osc_get_rate+0x14>)
   8144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81450:	00081471 	.word	0x00081471
   81454:	00081477 	.word	0x00081477
   81458:	0008147d 	.word	0x0008147d
   8145c:	00081483 	.word	0x00081483
   81460:	00081487 	.word	0x00081487
   81464:	0008148b 	.word	0x0008148b
   81468:	0008148f 	.word	0x0008148f
   8146c:	00081493 	.word	0x00081493
		return OSC_SLCK_32K_RC_HZ;
   81470:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81474:	e010      	b.n	81498 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   81476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8147a:	e00d      	b.n	81498 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   8147c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81480:	e00a      	b.n	81498 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   81482:	4b08      	ldr	r3, [pc, #32]	; (814a4 <osc_get_rate+0x68>)
   81484:	e008      	b.n	81498 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   81486:	4b08      	ldr	r3, [pc, #32]	; (814a8 <osc_get_rate+0x6c>)
   81488:	e006      	b.n	81498 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8148a:	4b08      	ldr	r3, [pc, #32]	; (814ac <osc_get_rate+0x70>)
   8148c:	e004      	b.n	81498 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8148e:	4b07      	ldr	r3, [pc, #28]	; (814ac <osc_get_rate+0x70>)
   81490:	e002      	b.n	81498 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   81492:	4b06      	ldr	r3, [pc, #24]	; (814ac <osc_get_rate+0x70>)
   81494:	e000      	b.n	81498 <osc_get_rate+0x5c>
	return 0;
   81496:	2300      	movs	r3, #0
}
   81498:	4618      	mov	r0, r3
   8149a:	370c      	adds	r7, #12
   8149c:	46bd      	mov	sp, r7
   8149e:	bc80      	pop	{r7}
   814a0:	4770      	bx	lr
   814a2:	bf00      	nop
   814a4:	003d0900 	.word	0x003d0900
   814a8:	007a1200 	.word	0x007a1200
   814ac:	00b71b00 	.word	0x00b71b00

000814b0 <sysclk_get_main_hz>:
{
   814b0:	b580      	push	{r7, lr}
   814b2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   814b4:	2006      	movs	r0, #6
   814b6:	4b04      	ldr	r3, [pc, #16]	; (814c8 <sysclk_get_main_hz+0x18>)
   814b8:	4798      	blx	r3
   814ba:	4602      	mov	r2, r0
   814bc:	4613      	mov	r3, r2
   814be:	00db      	lsls	r3, r3, #3
   814c0:	1a9b      	subs	r3, r3, r2
   814c2:	005b      	lsls	r3, r3, #1
}
   814c4:	4618      	mov	r0, r3
   814c6:	bd80      	pop	{r7, pc}
   814c8:	0008143d 	.word	0x0008143d

000814cc <sysclk_get_peripheral_hz>:
{
   814cc:	b580      	push	{r7, lr}
   814ce:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   814d0:	4b02      	ldr	r3, [pc, #8]	; (814dc <sysclk_get_peripheral_hz+0x10>)
   814d2:	4798      	blx	r3
   814d4:	4603      	mov	r3, r0
   814d6:	085b      	lsrs	r3, r3, #1
}
   814d8:	4618      	mov	r0, r3
   814da:	bd80      	pop	{r7, pc}
   814dc:	000814b1 	.word	0x000814b1

000814e0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   814e0:	b580      	push	{r7, lr}
   814e2:	b082      	sub	sp, #8
   814e4:	af00      	add	r7, sp, #0
   814e6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   814e8:	6878      	ldr	r0, [r7, #4]
   814ea:	4b03      	ldr	r3, [pc, #12]	; (814f8 <sysclk_enable_peripheral_clock+0x18>)
   814ec:	4798      	blx	r3
}
   814ee:	bf00      	nop
   814f0:	3708      	adds	r7, #8
   814f2:	46bd      	mov	sp, r7
   814f4:	bd80      	pop	{r7, pc}
   814f6:	bf00      	nop
   814f8:	000838c5 	.word	0x000838c5

000814fc <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   814fc:	b580      	push	{r7, lr}
   814fe:	b082      	sub	sp, #8
   81500:	af00      	add	r7, sp, #0
   81502:	6078      	str	r0, [r7, #4]
   81504:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   81506:	4b10      	ldr	r3, [pc, #64]	; (81548 <twi_master_setup+0x4c>)
   81508:	4798      	blx	r3
   8150a:	4602      	mov	r2, r0
   8150c:	683b      	ldr	r3, [r7, #0]
   8150e:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   81510:	683b      	ldr	r3, [r7, #0]
   81512:	2200      	movs	r2, #0
   81514:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   81516:	687b      	ldr	r3, [r7, #4]
   81518:	4a0c      	ldr	r2, [pc, #48]	; (8154c <twi_master_setup+0x50>)
   8151a:	4293      	cmp	r3, r2
   8151c:	d103      	bne.n	81526 <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   8151e:	2016      	movs	r0, #22
   81520:	4b0b      	ldr	r3, [pc, #44]	; (81550 <twi_master_setup+0x54>)
   81522:	4798      	blx	r3
   81524:	e006      	b.n	81534 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   81526:	687b      	ldr	r3, [r7, #4]
   81528:	4a0a      	ldr	r2, [pc, #40]	; (81554 <twi_master_setup+0x58>)
   8152a:	4293      	cmp	r3, r2
   8152c:	d102      	bne.n	81534 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   8152e:	2017      	movs	r0, #23
   81530:	4b07      	ldr	r3, [pc, #28]	; (81550 <twi_master_setup+0x54>)
   81532:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   81534:	6839      	ldr	r1, [r7, #0]
   81536:	6878      	ldr	r0, [r7, #4]
   81538:	4b07      	ldr	r3, [pc, #28]	; (81558 <twi_master_setup+0x5c>)
   8153a:	4798      	blx	r3
   8153c:	4603      	mov	r3, r0
}
   8153e:	4618      	mov	r0, r3
   81540:	3708      	adds	r7, #8
   81542:	46bd      	mov	sp, r7
   81544:	bd80      	pop	{r7, pc}
   81546:	bf00      	nop
   81548:	000814cd 	.word	0x000814cd
   8154c:	4008c000 	.word	0x4008c000
   81550:	000814e1 	.word	0x000814e1
   81554:	40090000 	.word	0x40090000
   81558:	00080ccd 	.word	0x00080ccd

0008155c <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   8155c:	b580      	push	{r7, lr}
   8155e:	af00      	add	r7, sp, #0
    twi_set_lcd_tx_callback(lcd_callback);
   81560:	4821      	ldr	r0, [pc, #132]	; (815e8 <lcd_init+0x8c>)
   81562:	4b22      	ldr	r3, [pc, #136]	; (815ec <lcd_init+0x90>)
   81564:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   81566:	220c      	movs	r2, #12
   81568:	2100      	movs	r1, #0
   8156a:	4821      	ldr	r0, [pc, #132]	; (815f0 <lcd_init+0x94>)
   8156c:	4b21      	ldr	r3, [pc, #132]	; (815f4 <lcd_init+0x98>)
   8156e:	4798      	blx	r3
    twiConfig.speed = 100000;
   81570:	4b1f      	ldr	r3, [pc, #124]	; (815f0 <lcd_init+0x94>)
   81572:	4a21      	ldr	r2, [pc, #132]	; (815f8 <lcd_init+0x9c>)
   81574:	605a      	str	r2, [r3, #4]

    backlight = LCD_LIGHT_OFF;
   81576:	4b21      	ldr	r3, [pc, #132]	; (815fc <lcd_init+0xa0>)
   81578:	2200      	movs	r2, #0
   8157a:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   8157c:	2103      	movs	r1, #3
   8157e:	2000      	movs	r0, #0
   81580:	4b1f      	ldr	r3, [pc, #124]	; (81600 <lcd_init+0xa4>)
   81582:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81584:	2006      	movs	r0, #6
   81586:	4b1f      	ldr	r3, [pc, #124]	; (81604 <lcd_init+0xa8>)
   81588:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   8158a:	2103      	movs	r1, #3
   8158c:	2000      	movs	r0, #0
   8158e:	4b1c      	ldr	r3, [pc, #112]	; (81600 <lcd_init+0xa4>)
   81590:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81592:	2006      	movs	r0, #6
   81594:	4b1b      	ldr	r3, [pc, #108]	; (81604 <lcd_init+0xa8>)
   81596:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   81598:	2103      	movs	r1, #3
   8159a:	2000      	movs	r0, #0
   8159c:	4b18      	ldr	r3, [pc, #96]	; (81600 <lcd_init+0xa4>)
   8159e:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   815a0:	2006      	movs	r0, #6
   815a2:	4b18      	ldr	r3, [pc, #96]	; (81604 <lcd_init+0xa8>)
   815a4:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   815a6:	2102      	movs	r1, #2
   815a8:	2000      	movs	r0, #0
   815aa:	4b15      	ldr	r3, [pc, #84]	; (81600 <lcd_init+0xa4>)
   815ac:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   815ae:	2128      	movs	r1, #40	; 0x28
   815b0:	2000      	movs	r0, #0
   815b2:	4b15      	ldr	r3, [pc, #84]	; (81608 <lcd_init+0xac>)
   815b4:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   815b6:	2108      	movs	r1, #8
   815b8:	2000      	movs	r0, #0
   815ba:	4b13      	ldr	r3, [pc, #76]	; (81608 <lcd_init+0xac>)
   815bc:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   815be:	2101      	movs	r1, #1
   815c0:	2000      	movs	r0, #0
   815c2:	4b11      	ldr	r3, [pc, #68]	; (81608 <lcd_init+0xac>)
   815c4:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   815c6:	2003      	movs	r0, #3
   815c8:	4b0e      	ldr	r3, [pc, #56]	; (81604 <lcd_init+0xa8>)
   815ca:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   815cc:	2106      	movs	r1, #6
   815ce:	2000      	movs	r0, #0
   815d0:	4b0d      	ldr	r3, [pc, #52]	; (81608 <lcd_init+0xac>)
   815d2:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   815d4:	210c      	movs	r1, #12
   815d6:	2000      	movs	r0, #0
   815d8:	4b0b      	ldr	r3, [pc, #44]	; (81608 <lcd_init+0xac>)
   815da:	4798      	blx	r3

    backlight = LCD_LIGHT_ON;
   815dc:	4b07      	ldr	r3, [pc, #28]	; (815fc <lcd_init+0xa0>)
   815de:	2208      	movs	r2, #8
   815e0:	701a      	strb	r2, [r3, #0]
}
   815e2:	bf00      	nop
   815e4:	bd80      	pop	{r7, pc}
   815e6:	bf00      	nop
   815e8:	00081ad1 	.word	0x00081ad1
   815ec:	000810b9 	.word	0x000810b9
   815f0:	20070dd4 	.word	0x20070dd4
   815f4:	000852b5 	.word	0x000852b5
   815f8:	000186a0 	.word	0x000186a0
   815fc:	20070dc9 	.word	0x20070dc9
   81600:	00081881 	.word	0x00081881
   81604:	00082f19 	.word	0x00082f19
   81608:	00081991 	.word	0x00081991

0008160c <lcd_set_backlight>:

void lcd_set_backlight(backlight_t state)
{
   8160c:	b480      	push	{r7}
   8160e:	b083      	sub	sp, #12
   81610:	af00      	add	r7, sp, #0
   81612:	4603      	mov	r3, r0
   81614:	71fb      	strb	r3, [r7, #7]
    backlight = state;
   81616:	4a04      	ldr	r2, [pc, #16]	; (81628 <lcd_set_backlight+0x1c>)
   81618:	79fb      	ldrb	r3, [r7, #7]
   8161a:	7013      	strb	r3, [r2, #0]
//    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
//    mdelay(LCD_CLEAR_WAIT_TIME);
}
   8161c:	bf00      	nop
   8161e:	370c      	adds	r7, #12
   81620:	46bd      	mov	sp, r7
   81622:	bc80      	pop	{r7}
   81624:	4770      	bx	lr
   81626:	bf00      	nop
   81628:	20070dc9 	.word	0x20070dc9

0008162c <lcd_clear>:

void lcd_clear(void)
{
   8162c:	b580      	push	{r7, lr}
   8162e:	af00      	add	r7, sp, #0
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   81630:	2101      	movs	r1, #1
   81632:	2000      	movs	r0, #0
   81634:	4b03      	ldr	r3, [pc, #12]	; (81644 <lcd_clear+0x18>)
   81636:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   81638:	2003      	movs	r0, #3
   8163a:	4b03      	ldr	r3, [pc, #12]	; (81648 <lcd_clear+0x1c>)
   8163c:	4798      	blx	r3
}
   8163e:	bf00      	nop
   81640:	bd80      	pop	{r7, pc}
   81642:	bf00      	nop
   81644:	00081991 	.word	0x00081991
   81648:	00082f19 	.word	0x00082f19

0008164c <lcd_print_s>:
    sprintf(str, "%10lu", data);
    lcd_print_s(line, col, str);
}

void lcd_print_s(uint8_t line, uint8_t col, const char* str)
{
   8164c:	b590      	push	{r4, r7, lr}
   8164e:	b087      	sub	sp, #28
   81650:	af00      	add	r7, sp, #0
   81652:	4603      	mov	r3, r0
   81654:	603a      	str	r2, [r7, #0]
   81656:	71fb      	strb	r3, [r7, #7]
   81658:	460b      	mov	r3, r1
   8165a:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   8165c:	4b75      	ldr	r3, [pc, #468]	; (81834 <lcd_print_s+0x1e8>)
   8165e:	4798      	blx	r3
   81660:	6138      	str	r0, [r7, #16]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    
    while(lcdIsBusy | twi_is_busy())
   81662:	e019      	b.n	81698 <lcd_print_s+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81664:	4b74      	ldr	r3, [pc, #464]	; (81838 <lcd_print_s+0x1ec>)
   81666:	4798      	blx	r3
   81668:	4602      	mov	r2, r0
   8166a:	4b74      	ldr	r3, [pc, #464]	; (8183c <lcd_print_s+0x1f0>)
   8166c:	681b      	ldr	r3, [r3, #0]
   8166e:	1ad3      	subs	r3, r2, r3
   81670:	2b0a      	cmp	r3, #10
   81672:	d911      	bls.n	81698 <lcd_print_s+0x4c>
        {
            lcdIsBusy = false;
   81674:	4b72      	ldr	r3, [pc, #456]	; (81840 <lcd_print_s+0x1f4>)
   81676:	2200      	movs	r2, #0
   81678:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   8167a:	4b72      	ldr	r3, [pc, #456]	; (81844 <lcd_print_s+0x1f8>)
   8167c:	681b      	ldr	r3, [r3, #0]
   8167e:	3301      	adds	r3, #1
   81680:	4a70      	ldr	r2, [pc, #448]	; (81844 <lcd_print_s+0x1f8>)
   81682:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81684:	f240 2102 	movw	r1, #514	; 0x202
   81688:	486f      	ldr	r0, [pc, #444]	; (81848 <lcd_print_s+0x1fc>)
   8168a:	4b70      	ldr	r3, [pc, #448]	; (8184c <lcd_print_s+0x200>)
   8168c:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   8168e:	4970      	ldr	r1, [pc, #448]	; (81850 <lcd_print_s+0x204>)
   81690:	4870      	ldr	r0, [pc, #448]	; (81854 <lcd_print_s+0x208>)
   81692:	4b71      	ldr	r3, [pc, #452]	; (81858 <lcd_print_s+0x20c>)
   81694:	4798      	blx	r3
            break;
   81696:	e009      	b.n	816ac <lcd_print_s+0x60>
    while(lcdIsBusy | twi_is_busy())
   81698:	4b70      	ldr	r3, [pc, #448]	; (8185c <lcd_print_s+0x210>)
   8169a:	4798      	blx	r3
   8169c:	4603      	mov	r3, r0
   8169e:	461a      	mov	r2, r3
   816a0:	4b67      	ldr	r3, [pc, #412]	; (81840 <lcd_print_s+0x1f4>)
   816a2:	781b      	ldrb	r3, [r3, #0]
   816a4:	4313      	orrs	r3, r2
   816a6:	b2db      	uxtb	r3, r3
   816a8:	2b00      	cmp	r3, #0
   816aa:	d1db      	bne.n	81664 <lcd_print_s+0x18>
        }
    }

    tx_packet->chip = 0x27;
   816ac:	693b      	ldr	r3, [r7, #16]
   816ae:	2227      	movs	r2, #39	; 0x27
   816b0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   816b4:	693b      	ldr	r3, [r7, #16]
   816b6:	2200      	movs	r2, #0
   816b8:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   816ba:	693b      	ldr	r3, [r7, #16]
   816bc:	2200      	movs	r2, #0
   816be:	605a      	str	r2, [r3, #4]
    
    // Calculate display address
    switch(line)
   816c0:	79fb      	ldrb	r3, [r7, #7]
   816c2:	2b03      	cmp	r3, #3
   816c4:	d006      	beq.n	816d4 <lcd_print_s+0x88>
   816c6:	2b04      	cmp	r3, #4
   816c8:	d007      	beq.n	816da <lcd_print_s+0x8e>
   816ca:	2b02      	cmp	r3, #2
   816cc:	d108      	bne.n	816e0 <lcd_print_s+0x94>
    {
        case 2:
        addr = 0x80 | 0x40;   // set address to start of line 2
   816ce:	23c0      	movs	r3, #192	; 0xc0
   816d0:	75fb      	strb	r3, [r7, #23]
        break;
   816d2:	e008      	b.n	816e6 <lcd_print_s+0x9a>
        case 3:
        addr = 0x80 | 0x14;   // set address to start of line 3
   816d4:	2394      	movs	r3, #148	; 0x94
   816d6:	75fb      	strb	r3, [r7, #23]
        break;
   816d8:	e005      	b.n	816e6 <lcd_print_s+0x9a>
        case 4:
        addr = 0x80 | 0x54;   // set address to start of line 4
   816da:	23d4      	movs	r3, #212	; 0xd4
   816dc:	75fb      	strb	r3, [r7, #23]
        break;
   816de:	e002      	b.n	816e6 <lcd_print_s+0x9a>
        case 1:
        default:
        addr = 0x80;          // set address to start of line 1
   816e0:	2380      	movs	r3, #128	; 0x80
   816e2:	75fb      	strb	r3, [r7, #23]
        break;
   816e4:	bf00      	nop
    }
    addr += col;  // set column in the selected line
   816e6:	7dfa      	ldrb	r2, [r7, #23]
   816e8:	79bb      	ldrb	r3, [r7, #6]
   816ea:	4413      	add	r3, r2
   816ec:	75fb      	strb	r3, [r7, #23]

    // Set cursor
    cmd = LCD_FUNTION_WRITE | backlight;
   816ee:	4b5c      	ldr	r3, [pc, #368]	; (81860 <lcd_print_s+0x214>)
   816f0:	781b      	ldrb	r3, [r3, #0]
   816f2:	73fb      	strb	r3, [r7, #15]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   816f4:	7dfb      	ldrb	r3, [r7, #23]
   816f6:	f023 030f 	bic.w	r3, r3, #15
   816fa:	b2da      	uxtb	r2, r3
   816fc:	7bfb      	ldrb	r3, [r7, #15]
   816fe:	4313      	orrs	r3, r2
   81700:	b2db      	uxtb	r3, r3
   81702:	f043 0304 	orr.w	r3, r3, #4
   81706:	b2da      	uxtb	r2, r3
   81708:	693b      	ldr	r3, [r7, #16]
   8170a:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   8170c:	f997 3017 	ldrsb.w	r3, [r7, #23]
   81710:	f023 030f 	bic.w	r3, r3, #15
   81714:	b25a      	sxtb	r2, r3
   81716:	f997 300f 	ldrsb.w	r3, [r7, #15]
   8171a:	4313      	orrs	r3, r2
   8171c:	b25b      	sxtb	r3, r3
   8171e:	b2da      	uxtb	r2, r3
   81720:	693b      	ldr	r3, [r7, #16]
   81722:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   81724:	7dfb      	ldrb	r3, [r7, #23]
   81726:	011b      	lsls	r3, r3, #4
   81728:	b2da      	uxtb	r2, r3
   8172a:	7bfb      	ldrb	r3, [r7, #15]
   8172c:	4313      	orrs	r3, r2
   8172e:	b2db      	uxtb	r3, r3
   81730:	f043 0304 	orr.w	r3, r3, #4
   81734:	b2da      	uxtb	r2, r3
   81736:	693b      	ldr	r3, [r7, #16]
   81738:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   8173a:	7dfb      	ldrb	r3, [r7, #23]
   8173c:	011b      	lsls	r3, r3, #4
   8173e:	b25a      	sxtb	r2, r3
   81740:	f997 300f 	ldrsb.w	r3, [r7, #15]
   81744:	4313      	orrs	r3, r2
   81746:	b25b      	sxtb	r3, r3
   81748:	b2da      	uxtb	r2, r3
   8174a:	693b      	ldr	r3, [r7, #16]
   8174c:	72da      	strb	r2, [r3, #11]
    
    // write string ...
    cmd = LCD_WRITE_DDR | backlight;
   8174e:	4b44      	ldr	r3, [pc, #272]	; (81860 <lcd_print_s+0x214>)
   81750:	781b      	ldrb	r3, [r3, #0]
   81752:	f043 0301 	orr.w	r3, r3, #1
   81756:	73fb      	strb	r3, [r7, #15]
    for(count = 0; count < strlen(str); count++)
   81758:	2300      	movs	r3, #0
   8175a:	75bb      	strb	r3, [r7, #22]
   8175c:	e04b      	b.n	817f6 <lcd_print_s+0x1aa>
    {
        byte = str[count];
   8175e:	7dbb      	ldrb	r3, [r7, #22]
   81760:	683a      	ldr	r2, [r7, #0]
   81762:	4413      	add	r3, r2
   81764:	781b      	ldrb	r3, [r3, #0]
   81766:	73bb      	strb	r3, [r7, #14]
        tx_packet->buffer[4 + count * 4 + 0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   81768:	7dbb      	ldrb	r3, [r7, #22]
   8176a:	3301      	adds	r3, #1
   8176c:	009b      	lsls	r3, r3, #2
   8176e:	7bba      	ldrb	r2, [r7, #14]
   81770:	f022 020f 	bic.w	r2, r2, #15
   81774:	b2d1      	uxtb	r1, r2
   81776:	7bfa      	ldrb	r2, [r7, #15]
   81778:	430a      	orrs	r2, r1
   8177a:	b2d2      	uxtb	r2, r2
   8177c:	f042 0204 	orr.w	r2, r2, #4
   81780:	b2d1      	uxtb	r1, r2
   81782:	693a      	ldr	r2, [r7, #16]
   81784:	4413      	add	r3, r2
   81786:	460a      	mov	r2, r1
   81788:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   8178a:	7dbb      	ldrb	r3, [r7, #22]
   8178c:	3301      	adds	r3, #1
   8178e:	009b      	lsls	r3, r3, #2
   81790:	3301      	adds	r3, #1
   81792:	f997 200e 	ldrsb.w	r2, [r7, #14]
   81796:	f022 020f 	bic.w	r2, r2, #15
   8179a:	b251      	sxtb	r1, r2
   8179c:	f997 200f 	ldrsb.w	r2, [r7, #15]
   817a0:	430a      	orrs	r2, r1
   817a2:	b252      	sxtb	r2, r2
   817a4:	b2d1      	uxtb	r1, r2
   817a6:	693a      	ldr	r2, [r7, #16]
   817a8:	4413      	add	r3, r2
   817aa:	460a      	mov	r2, r1
   817ac:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   817ae:	7dbb      	ldrb	r3, [r7, #22]
   817b0:	3301      	adds	r3, #1
   817b2:	009b      	lsls	r3, r3, #2
   817b4:	3302      	adds	r3, #2
   817b6:	7bba      	ldrb	r2, [r7, #14]
   817b8:	0112      	lsls	r2, r2, #4
   817ba:	b2d1      	uxtb	r1, r2
   817bc:	7bfa      	ldrb	r2, [r7, #15]
   817be:	430a      	orrs	r2, r1
   817c0:	b2d2      	uxtb	r2, r2
   817c2:	f042 0204 	orr.w	r2, r2, #4
   817c6:	b2d1      	uxtb	r1, r2
   817c8:	693a      	ldr	r2, [r7, #16]
   817ca:	4413      	add	r3, r2
   817cc:	460a      	mov	r2, r1
   817ce:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   817d0:	7dbb      	ldrb	r3, [r7, #22]
   817d2:	3301      	adds	r3, #1
   817d4:	009b      	lsls	r3, r3, #2
   817d6:	3303      	adds	r3, #3
   817d8:	7bba      	ldrb	r2, [r7, #14]
   817da:	0112      	lsls	r2, r2, #4
   817dc:	b251      	sxtb	r1, r2
   817de:	f997 200f 	ldrsb.w	r2, [r7, #15]
   817e2:	430a      	orrs	r2, r1
   817e4:	b252      	sxtb	r2, r2
   817e6:	b2d1      	uxtb	r1, r2
   817e8:	693a      	ldr	r2, [r7, #16]
   817ea:	4413      	add	r3, r2
   817ec:	460a      	mov	r2, r1
   817ee:	721a      	strb	r2, [r3, #8]
    for(count = 0; count < strlen(str); count++)
   817f0:	7dbb      	ldrb	r3, [r7, #22]
   817f2:	3301      	adds	r3, #1
   817f4:	75bb      	strb	r3, [r7, #22]
   817f6:	7dbc      	ldrb	r4, [r7, #22]
   817f8:	6838      	ldr	r0, [r7, #0]
   817fa:	4b1a      	ldr	r3, [pc, #104]	; (81864 <lcd_print_s+0x218>)
   817fc:	4798      	blx	r3
   817fe:	4603      	mov	r3, r0
   81800:	429c      	cmp	r4, r3
   81802:	d3ac      	bcc.n	8175e <lcd_print_s+0x112>
    }
    tx_packet->length = 4 + count * 4;
   81804:	7dbb      	ldrb	r3, [r7, #22]
   81806:	3301      	adds	r3, #1
   81808:	009b      	lsls	r3, r3, #2
   8180a:	461a      	mov	r2, r3
   8180c:	693b      	ldr	r3, [r7, #16]
   8180e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    lcdIsBusy = true;
   81812:	4b0b      	ldr	r3, [pc, #44]	; (81840 <lcd_print_s+0x1f4>)
   81814:	2201      	movs	r2, #1
   81816:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81818:	6939      	ldr	r1, [r7, #16]
   8181a:	480e      	ldr	r0, [pc, #56]	; (81854 <lcd_print_s+0x208>)
   8181c:	4b12      	ldr	r3, [pc, #72]	; (81868 <lcd_print_s+0x21c>)
   8181e:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81820:	4b05      	ldr	r3, [pc, #20]	; (81838 <lcd_print_s+0x1ec>)
   81822:	4798      	blx	r3
   81824:	4602      	mov	r2, r0
   81826:	4b05      	ldr	r3, [pc, #20]	; (8183c <lcd_print_s+0x1f0>)
   81828:	601a      	str	r2, [r3, #0]
}
   8182a:	bf00      	nop
   8182c:	371c      	adds	r7, #28
   8182e:	46bd      	mov	sp, r7
   81830:	bd90      	pop	{r4, r7, pc}
   81832:	bf00      	nop
   81834:	00080ebd 	.word	0x00080ebd
   81838:	00082f05 	.word	0x00082f05
   8183c:	20070dcc 	.word	0x20070dcc
   81840:	20070dca 	.word	0x20070dca
   81844:	20070dd0 	.word	0x20070dd0
   81848:	4008c100 	.word	0x4008c100
   8184c:	000802d5 	.word	0x000802d5
   81850:	20070dd4 	.word	0x20070dd4
   81854:	4008c000 	.word	0x4008c000
   81858:	000814fd 	.word	0x000814fd
   8185c:	00080ea9 	.word	0x00080ea9
   81860:	20070dc9 	.word	0x20070dc9
   81864:	0008539d 	.word	0x0008539d
   81868:	00080fbd 	.word	0x00080fbd

0008186c <lcd_is_busy>:
    twi_pdc_master_write(TWI0, tx_packet);
    lcdStartTicks = getTicks();
}

uint8_t lcd_is_busy(void)
{
   8186c:	b480      	push	{r7}
   8186e:	af00      	add	r7, sp, #0
    return lcdIsBusy;
   81870:	4b02      	ldr	r3, [pc, #8]	; (8187c <lcd_is_busy+0x10>)
   81872:	781b      	ldrb	r3, [r3, #0]
}
   81874:	4618      	mov	r0, r3
   81876:	46bd      	mov	sp, r7
   81878:	bc80      	pop	{r7}
   8187a:	4770      	bx	lr
   8187c:	20070dca 	.word	0x20070dca

00081880 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   81880:	b580      	push	{r7, lr}
   81882:	b084      	sub	sp, #16
   81884:	af00      	add	r7, sp, #0
   81886:	4603      	mov	r3, r0
   81888:	460a      	mov	r2, r1
   8188a:	71fb      	strb	r3, [r7, #7]
   8188c:	4613      	mov	r3, r2
   8188e:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81890:	4b32      	ldr	r3, [pc, #200]	; (8195c <send_nibble+0xdc>)
   81892:	4798      	blx	r3
   81894:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   81896:	e019      	b.n	818cc <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81898:	4b31      	ldr	r3, [pc, #196]	; (81960 <send_nibble+0xe0>)
   8189a:	4798      	blx	r3
   8189c:	4602      	mov	r2, r0
   8189e:	4b31      	ldr	r3, [pc, #196]	; (81964 <send_nibble+0xe4>)
   818a0:	681b      	ldr	r3, [r3, #0]
   818a2:	1ad3      	subs	r3, r2, r3
   818a4:	2b0a      	cmp	r3, #10
   818a6:	d911      	bls.n	818cc <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   818a8:	4b2f      	ldr	r3, [pc, #188]	; (81968 <send_nibble+0xe8>)
   818aa:	2200      	movs	r2, #0
   818ac:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   818ae:	4b2f      	ldr	r3, [pc, #188]	; (8196c <send_nibble+0xec>)
   818b0:	681b      	ldr	r3, [r3, #0]
   818b2:	3301      	adds	r3, #1
   818b4:	4a2d      	ldr	r2, [pc, #180]	; (8196c <send_nibble+0xec>)
   818b6:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   818b8:	f240 2102 	movw	r1, #514	; 0x202
   818bc:	482c      	ldr	r0, [pc, #176]	; (81970 <send_nibble+0xf0>)
   818be:	4b2d      	ldr	r3, [pc, #180]	; (81974 <send_nibble+0xf4>)
   818c0:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   818c2:	492d      	ldr	r1, [pc, #180]	; (81978 <send_nibble+0xf8>)
   818c4:	482d      	ldr	r0, [pc, #180]	; (8197c <send_nibble+0xfc>)
   818c6:	4b2e      	ldr	r3, [pc, #184]	; (81980 <send_nibble+0x100>)
   818c8:	4798      	blx	r3
            break;
   818ca:	e009      	b.n	818e0 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   818cc:	4b2d      	ldr	r3, [pc, #180]	; (81984 <send_nibble+0x104>)
   818ce:	4798      	blx	r3
   818d0:	4603      	mov	r3, r0
   818d2:	461a      	mov	r2, r3
   818d4:	4b24      	ldr	r3, [pc, #144]	; (81968 <send_nibble+0xe8>)
   818d6:	781b      	ldrb	r3, [r3, #0]
   818d8:	4313      	orrs	r3, r2
   818da:	b2db      	uxtb	r3, r3
   818dc:	2b00      	cmp	r3, #0
   818de:	d1db      	bne.n	81898 <send_nibble+0x18>
        }
    }

    tx_packet->chip = 0x27;
   818e0:	68fb      	ldr	r3, [r7, #12]
   818e2:	2227      	movs	r2, #39	; 0x27
   818e4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   818e8:	68fb      	ldr	r3, [r7, #12]
   818ea:	2200      	movs	r2, #0
   818ec:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   818ee:	68fb      	ldr	r3, [r7, #12]
   818f0:	2200      	movs	r2, #0
   818f2:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   818f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   818f8:	f003 030f 	and.w	r3, r3, #15
   818fc:	b25a      	sxtb	r2, r3
   818fe:	4b22      	ldr	r3, [pc, #136]	; (81988 <send_nibble+0x108>)
   81900:	781b      	ldrb	r3, [r3, #0]
   81902:	b25b      	sxtb	r3, r3
   81904:	4313      	orrs	r3, r2
   81906:	b25b      	sxtb	r3, r3
   81908:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   8190a:	79bb      	ldrb	r3, [r7, #6]
   8190c:	011b      	lsls	r3, r3, #4
   8190e:	b2da      	uxtb	r2, r3
   81910:	79fb      	ldrb	r3, [r7, #7]
   81912:	4313      	orrs	r3, r2
   81914:	b2db      	uxtb	r3, r3
   81916:	f043 0304 	orr.w	r3, r3, #4
   8191a:	b2da      	uxtb	r2, r3
   8191c:	68fb      	ldr	r3, [r7, #12]
   8191e:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81920:	79bb      	ldrb	r3, [r7, #6]
   81922:	011b      	lsls	r3, r3, #4
   81924:	b25a      	sxtb	r2, r3
   81926:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8192a:	4313      	orrs	r3, r2
   8192c:	b25b      	sxtb	r3, r3
   8192e:	b2da      	uxtb	r2, r3
   81930:	68fb      	ldr	r3, [r7, #12]
   81932:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   81934:	68fb      	ldr	r3, [r7, #12]
   81936:	2202      	movs	r2, #2
   81938:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   8193c:	4b0a      	ldr	r3, [pc, #40]	; (81968 <send_nibble+0xe8>)
   8193e:	2201      	movs	r2, #1
   81940:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81942:	68f9      	ldr	r1, [r7, #12]
   81944:	480d      	ldr	r0, [pc, #52]	; (8197c <send_nibble+0xfc>)
   81946:	4b11      	ldr	r3, [pc, #68]	; (8198c <send_nibble+0x10c>)
   81948:	4798      	blx	r3
    lcdStartTicks = getTicks();
   8194a:	4b05      	ldr	r3, [pc, #20]	; (81960 <send_nibble+0xe0>)
   8194c:	4798      	blx	r3
   8194e:	4602      	mov	r2, r0
   81950:	4b04      	ldr	r3, [pc, #16]	; (81964 <send_nibble+0xe4>)
   81952:	601a      	str	r2, [r3, #0]
}
   81954:	bf00      	nop
   81956:	3710      	adds	r7, #16
   81958:	46bd      	mov	sp, r7
   8195a:	bd80      	pop	{r7, pc}
   8195c:	00080ebd 	.word	0x00080ebd
   81960:	00082f05 	.word	0x00082f05
   81964:	20070dcc 	.word	0x20070dcc
   81968:	20070dca 	.word	0x20070dca
   8196c:	20070dd0 	.word	0x20070dd0
   81970:	4008c100 	.word	0x4008c100
   81974:	000802d5 	.word	0x000802d5
   81978:	20070dd4 	.word	0x20070dd4
   8197c:	4008c000 	.word	0x4008c000
   81980:	000814fd 	.word	0x000814fd
   81984:	00080ea9 	.word	0x00080ea9
   81988:	20070dc9 	.word	0x20070dc9
   8198c:	00080fbd 	.word	0x00080fbd

00081990 <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   81990:	b580      	push	{r7, lr}
   81992:	b084      	sub	sp, #16
   81994:	af00      	add	r7, sp, #0
   81996:	4603      	mov	r3, r0
   81998:	460a      	mov	r2, r1
   8199a:	71fb      	strb	r3, [r7, #7]
   8199c:	4613      	mov	r3, r2
   8199e:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   819a0:	4b3e      	ldr	r3, [pc, #248]	; (81a9c <send_byte+0x10c>)
   819a2:	4798      	blx	r3
   819a4:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   819a6:	e019      	b.n	819dc <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   819a8:	4b3d      	ldr	r3, [pc, #244]	; (81aa0 <send_byte+0x110>)
   819aa:	4798      	blx	r3
   819ac:	4602      	mov	r2, r0
   819ae:	4b3d      	ldr	r3, [pc, #244]	; (81aa4 <send_byte+0x114>)
   819b0:	681b      	ldr	r3, [r3, #0]
   819b2:	1ad3      	subs	r3, r2, r3
   819b4:	2b0a      	cmp	r3, #10
   819b6:	d911      	bls.n	819dc <send_byte+0x4c>
        {
            lcdIsBusy = false;
   819b8:	4b3b      	ldr	r3, [pc, #236]	; (81aa8 <send_byte+0x118>)
   819ba:	2200      	movs	r2, #0
   819bc:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   819be:	4b3b      	ldr	r3, [pc, #236]	; (81aac <send_byte+0x11c>)
   819c0:	681b      	ldr	r3, [r3, #0]
   819c2:	3301      	adds	r3, #1
   819c4:	4a39      	ldr	r2, [pc, #228]	; (81aac <send_byte+0x11c>)
   819c6:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   819c8:	f240 2102 	movw	r1, #514	; 0x202
   819cc:	4838      	ldr	r0, [pc, #224]	; (81ab0 <send_byte+0x120>)
   819ce:	4b39      	ldr	r3, [pc, #228]	; (81ab4 <send_byte+0x124>)
   819d0:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   819d2:	4939      	ldr	r1, [pc, #228]	; (81ab8 <send_byte+0x128>)
   819d4:	4839      	ldr	r0, [pc, #228]	; (81abc <send_byte+0x12c>)
   819d6:	4b3a      	ldr	r3, [pc, #232]	; (81ac0 <send_byte+0x130>)
   819d8:	4798      	blx	r3
            break;
   819da:	e009      	b.n	819f0 <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   819dc:	4b39      	ldr	r3, [pc, #228]	; (81ac4 <send_byte+0x134>)
   819de:	4798      	blx	r3
   819e0:	4603      	mov	r3, r0
   819e2:	461a      	mov	r2, r3
   819e4:	4b30      	ldr	r3, [pc, #192]	; (81aa8 <send_byte+0x118>)
   819e6:	781b      	ldrb	r3, [r3, #0]
   819e8:	4313      	orrs	r3, r2
   819ea:	b2db      	uxtb	r3, r3
   819ec:	2b00      	cmp	r3, #0
   819ee:	d1db      	bne.n	819a8 <send_byte+0x18>
        }
    }

    tx_packet->chip = 0x27;
   819f0:	68fb      	ldr	r3, [r7, #12]
   819f2:	2227      	movs	r2, #39	; 0x27
   819f4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   819f8:	68fb      	ldr	r3, [r7, #12]
   819fa:	2200      	movs	r2, #0
   819fc:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   819fe:	68fb      	ldr	r3, [r7, #12]
   81a00:	2200      	movs	r2, #0
   81a02:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a08:	f003 030f 	and.w	r3, r3, #15
   81a0c:	b25a      	sxtb	r2, r3
   81a0e:	4b2e      	ldr	r3, [pc, #184]	; (81ac8 <send_byte+0x138>)
   81a10:	781b      	ldrb	r3, [r3, #0]
   81a12:	b25b      	sxtb	r3, r3
   81a14:	4313      	orrs	r3, r2
   81a16:	b25b      	sxtb	r3, r3
   81a18:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   81a1a:	79bb      	ldrb	r3, [r7, #6]
   81a1c:	f023 030f 	bic.w	r3, r3, #15
   81a20:	b2da      	uxtb	r2, r3
   81a22:	79fb      	ldrb	r3, [r7, #7]
   81a24:	4313      	orrs	r3, r2
   81a26:	b2db      	uxtb	r3, r3
   81a28:	f043 0304 	orr.w	r3, r3, #4
   81a2c:	b2da      	uxtb	r2, r3
   81a2e:	68fb      	ldr	r3, [r7, #12]
   81a30:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   81a32:	f997 3006 	ldrsb.w	r3, [r7, #6]
   81a36:	f023 030f 	bic.w	r3, r3, #15
   81a3a:	b25a      	sxtb	r2, r3
   81a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a40:	4313      	orrs	r3, r2
   81a42:	b25b      	sxtb	r3, r3
   81a44:	b2da      	uxtb	r2, r3
   81a46:	68fb      	ldr	r3, [r7, #12]
   81a48:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81a4a:	79bb      	ldrb	r3, [r7, #6]
   81a4c:	011b      	lsls	r3, r3, #4
   81a4e:	b2da      	uxtb	r2, r3
   81a50:	79fb      	ldrb	r3, [r7, #7]
   81a52:	4313      	orrs	r3, r2
   81a54:	b2db      	uxtb	r3, r3
   81a56:	f043 0304 	orr.w	r3, r3, #4
   81a5a:	b2da      	uxtb	r2, r3
   81a5c:	68fb      	ldr	r3, [r7, #12]
   81a5e:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81a60:	79bb      	ldrb	r3, [r7, #6]
   81a62:	011b      	lsls	r3, r3, #4
   81a64:	b25a      	sxtb	r2, r3
   81a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a6a:	4313      	orrs	r3, r2
   81a6c:	b25b      	sxtb	r3, r3
   81a6e:	b2da      	uxtb	r2, r3
   81a70:	68fb      	ldr	r3, [r7, #12]
   81a72:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   81a74:	68fb      	ldr	r3, [r7, #12]
   81a76:	2204      	movs	r2, #4
   81a78:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   81a7c:	4b0a      	ldr	r3, [pc, #40]	; (81aa8 <send_byte+0x118>)
   81a7e:	2201      	movs	r2, #1
   81a80:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81a82:	68f9      	ldr	r1, [r7, #12]
   81a84:	480d      	ldr	r0, [pc, #52]	; (81abc <send_byte+0x12c>)
   81a86:	4b11      	ldr	r3, [pc, #68]	; (81acc <send_byte+0x13c>)
   81a88:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81a8a:	4b05      	ldr	r3, [pc, #20]	; (81aa0 <send_byte+0x110>)
   81a8c:	4798      	blx	r3
   81a8e:	4602      	mov	r2, r0
   81a90:	4b04      	ldr	r3, [pc, #16]	; (81aa4 <send_byte+0x114>)
   81a92:	601a      	str	r2, [r3, #0]
}
   81a94:	bf00      	nop
   81a96:	3710      	adds	r7, #16
   81a98:	46bd      	mov	sp, r7
   81a9a:	bd80      	pop	{r7, pc}
   81a9c:	00080ebd 	.word	0x00080ebd
   81aa0:	00082f05 	.word	0x00082f05
   81aa4:	20070dcc 	.word	0x20070dcc
   81aa8:	20070dca 	.word	0x20070dca
   81aac:	20070dd0 	.word	0x20070dd0
   81ab0:	4008c100 	.word	0x4008c100
   81ab4:	000802d5 	.word	0x000802d5
   81ab8:	20070dd4 	.word	0x20070dd4
   81abc:	4008c000 	.word	0x4008c000
   81ac0:	000814fd 	.word	0x000814fd
   81ac4:	00080ea9 	.word	0x00080ea9
   81ac8:	20070dc9 	.word	0x20070dc9
   81acc:	00080fbd 	.word	0x00080fbd

00081ad0 <lcd_callback>:

static void lcd_callback(void)
{
   81ad0:	b480      	push	{r7}
   81ad2:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   81ad4:	4b03      	ldr	r3, [pc, #12]	; (81ae4 <lcd_callback+0x14>)
   81ad6:	2200      	movs	r2, #0
   81ad8:	701a      	strb	r2, [r3, #0]
}
   81ada:	bf00      	nop
   81adc:	46bd      	mov	sp, r7
   81ade:	bc80      	pop	{r7}
   81ae0:	4770      	bx	lr
   81ae2:	bf00      	nop
   81ae4:	20070dca 	.word	0x20070dca

00081ae8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   81ae8:	b480      	push	{r7}
   81aea:	b08b      	sub	sp, #44	; 0x2c
   81aec:	af00      	add	r7, sp, #0
   81aee:	6078      	str	r0, [r7, #4]
   81af0:	460b      	mov	r3, r1
   81af2:	70fb      	strb	r3, [r7, #3]
   81af4:	687b      	ldr	r3, [r7, #4]
   81af6:	627b      	str	r3, [r7, #36]	; 0x24
   81af8:	78fb      	ldrb	r3, [r7, #3]
   81afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81b00:	61fb      	str	r3, [r7, #28]
   81b02:	69fb      	ldr	r3, [r7, #28]
   81b04:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81b06:	69bb      	ldr	r3, [r7, #24]
   81b08:	095b      	lsrs	r3, r3, #5
   81b0a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81b0c:	697b      	ldr	r3, [r7, #20]
   81b0e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81b12:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81b16:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   81b18:	613b      	str	r3, [r7, #16]

	if (level) {
   81b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81b1e:	2b00      	cmp	r3, #0
   81b20:	d009      	beq.n	81b36 <ioport_set_pin_level+0x4e>
   81b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81b24:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81b26:	68fb      	ldr	r3, [r7, #12]
   81b28:	f003 031f 	and.w	r3, r3, #31
   81b2c:	2201      	movs	r2, #1
   81b2e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81b30:	693b      	ldr	r3, [r7, #16]
   81b32:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   81b34:	e008      	b.n	81b48 <ioport_set_pin_level+0x60>
   81b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81b38:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   81b3a:	68bb      	ldr	r3, [r7, #8]
   81b3c:	f003 031f 	and.w	r3, r3, #31
   81b40:	2201      	movs	r2, #1
   81b42:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81b44:	693b      	ldr	r3, [r7, #16]
   81b46:	635a      	str	r2, [r3, #52]	; 0x34
   81b48:	bf00      	nop
   81b4a:	372c      	adds	r7, #44	; 0x2c
   81b4c:	46bd      	mov	sp, r7
   81b4e:	bc80      	pop	{r7}
   81b50:	4770      	bx	lr

00081b52 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   81b52:	b480      	push	{r7}
   81b54:	b089      	sub	sp, #36	; 0x24
   81b56:	af00      	add	r7, sp, #0
   81b58:	6078      	str	r0, [r7, #4]
   81b5a:	687b      	ldr	r3, [r7, #4]
   81b5c:	61fb      	str	r3, [r7, #28]
   81b5e:	69fb      	ldr	r3, [r7, #28]
   81b60:	61bb      	str	r3, [r7, #24]
   81b62:	69bb      	ldr	r3, [r7, #24]
   81b64:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   81b66:	697b      	ldr	r3, [r7, #20]
   81b68:	095b      	lsrs	r3, r3, #5
   81b6a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81b6c:	693b      	ldr	r3, [r7, #16]
   81b6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81b72:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81b76:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   81b7a:	69fb      	ldr	r3, [r7, #28]
   81b7c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81b7e:	68fb      	ldr	r3, [r7, #12]
   81b80:	f003 031f 	and.w	r3, r3, #31
   81b84:	2101      	movs	r1, #1
   81b86:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81b8a:	4013      	ands	r3, r2
   81b8c:	2b00      	cmp	r3, #0
   81b8e:	bf14      	ite	ne
   81b90:	2301      	movne	r3, #1
   81b92:	2300      	moveq	r3, #0
   81b94:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   81b96:	4618      	mov	r0, r3
   81b98:	3724      	adds	r7, #36	; 0x24
   81b9a:	46bd      	mov	sp, r7
   81b9c:	bc80      	pop	{r7}
   81b9e:	4770      	bx	lr

00081ba0 <menu>:
static void print_menu_sensors(void);
static void print_menu_settings(void);
static void print_cursor(menu_info_t *info);

void menu(event_t event1)
{
   81ba0:	b580      	push	{r7, lr}
   81ba2:	b082      	sub	sp, #8
   81ba4:	af00      	add	r7, sp, #0
   81ba6:	4603      	mov	r3, r0
   81ba8:	71fb      	strb	r3, [r7, #7]
    switch (act_menu)
   81baa:	4b28      	ldr	r3, [pc, #160]	; (81c4c <menu+0xac>)
   81bac:	781b      	ldrb	r3, [r3, #0]
   81bae:	2b09      	cmp	r3, #9
   81bb0:	d847      	bhi.n	81c42 <menu+0xa2>
   81bb2:	a201      	add	r2, pc, #4	; (adr r2, 81bb8 <menu+0x18>)
   81bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81bb8:	00081be1 	.word	0x00081be1
   81bbc:	00081beb 	.word	0x00081beb
   81bc0:	00081bf5 	.word	0x00081bf5
   81bc4:	00081bff 	.word	0x00081bff
   81bc8:	00081c09 	.word	0x00081c09
   81bcc:	00081c27 	.word	0x00081c27
   81bd0:	00081c31 	.word	0x00081c31
   81bd4:	00081c13 	.word	0x00081c13
   81bd8:	00081c1d 	.word	0x00081c1d
   81bdc:	00081c3b 	.word	0x00081c3b
    {
        case MENU_MAIN:
            menu_main(event1);
   81be0:	79fb      	ldrb	r3, [r7, #7]
   81be2:	4618      	mov	r0, r3
   81be4:	4b1a      	ldr	r3, [pc, #104]	; (81c50 <menu+0xb0>)
   81be6:	4798      	blx	r3
            break;
   81be8:	e02c      	b.n	81c44 <menu+0xa4>
        case MENU_MATCH:
            menu_match(event1);
   81bea:	79fb      	ldrb	r3, [r7, #7]
   81bec:	4618      	mov	r0, r3
   81bee:	4b19      	ldr	r3, [pc, #100]	; (81c54 <menu+0xb4>)
   81bf0:	4798      	blx	r3
            break;
   81bf2:	e027      	b.n	81c44 <menu+0xa4>
        case MENU_SENSORS:
            menu_sensors(event1);
   81bf4:	79fb      	ldrb	r3, [r7, #7]
   81bf6:	4618      	mov	r0, r3
   81bf8:	4b17      	ldr	r3, [pc, #92]	; (81c58 <menu+0xb8>)
   81bfa:	4798      	blx	r3
            break;
   81bfc:	e022      	b.n	81c44 <menu+0xa4>
        case MENU_SETTINGS:
            menu_settings(event1);
   81bfe:	79fb      	ldrb	r3, [r7, #7]
   81c00:	4618      	mov	r0, r3
   81c02:	4b16      	ldr	r3, [pc, #88]	; (81c5c <menu+0xbc>)
   81c04:	4798      	blx	r3
            break;
   81c06:	e01d      	b.n	81c44 <menu+0xa4>
        case MENU_BALL:
            menu_ball(event1);
   81c08:	79fb      	ldrb	r3, [r7, #7]
   81c0a:	4618      	mov	r0, r3
   81c0c:	4b14      	ldr	r3, [pc, #80]	; (81c60 <menu+0xc0>)
   81c0e:	4798      	blx	r3
            break;
   81c10:	e018      	b.n	81c44 <menu+0xa4>
        case MENU_COMPASS:
            menu_compass(event1);
   81c12:	79fb      	ldrb	r3, [r7, #7]
   81c14:	4618      	mov	r0, r3
   81c16:	4b13      	ldr	r3, [pc, #76]	; (81c64 <menu+0xc4>)
   81c18:	4798      	blx	r3
            break;
   81c1a:	e013      	b.n	81c44 <menu+0xa4>
        case MENU_COMPASS_CALIBRATION:
            menu_compass_calibration(event1);
   81c1c:	79fb      	ldrb	r3, [r7, #7]
   81c1e:	4618      	mov	r0, r3
   81c20:	4b11      	ldr	r3, [pc, #68]	; (81c68 <menu+0xc8>)
   81c22:	4798      	blx	r3
            break;
   81c24:	e00e      	b.n	81c44 <menu+0xa4>
        case MENU_LINE:
            menu_line(event1);
   81c26:	79fb      	ldrb	r3, [r7, #7]
   81c28:	4618      	mov	r0, r3
   81c2a:	4b10      	ldr	r3, [pc, #64]	; (81c6c <menu+0xcc>)
   81c2c:	4798      	blx	r3
            break;
   81c2e:	e009      	b.n	81c44 <menu+0xa4>
        case MENU_LINE_CALIBRATION:
            menu_line_calibration(event1);
   81c30:	79fb      	ldrb	r3, [r7, #7]
   81c32:	4618      	mov	r0, r3
   81c34:	4b0e      	ldr	r3, [pc, #56]	; (81c70 <menu+0xd0>)
   81c36:	4798      	blx	r3
            break;
   81c38:	e004      	b.n	81c44 <menu+0xa4>
        case MENU_SHUTDOWN:
            menu_shutdown(event1);
   81c3a:	79fb      	ldrb	r3, [r7, #7]
   81c3c:	4618      	mov	r0, r3
   81c3e:	4b0d      	ldr	r3, [pc, #52]	; (81c74 <menu+0xd4>)
   81c40:	4798      	blx	r3
        default:
            break;
   81c42:	bf00      	nop
    }
}
   81c44:	bf00      	nop
   81c46:	3708      	adds	r7, #8
   81c48:	46bd      	mov	sp, r7
   81c4a:	bd80      	pop	{r7, pc}
   81c4c:	20070de0 	.word	0x20070de0
   81c50:	00081c79 	.word	0x00081c79
   81c54:	00081da1 	.word	0x00081da1
   81c58:	00081dd1 	.word	0x00081dd1
   81c5c:	0008217d 	.word	0x0008217d
   81c60:	00081ef5 	.word	0x00081ef5
   81c64:	00081f49 	.word	0x00081f49
   81c68:	0008201d 	.word	0x0008201d
   81c6c:	0008211d 	.word	0x0008211d
   81c70:	0008214d 	.word	0x0008214d
   81c74:	000822a1 	.word	0x000822a1

00081c78 <menu_main>:

static void menu_main(event_t event1)
{
   81c78:	b580      	push	{r7, lr}
   81c7a:	b082      	sub	sp, #8
   81c7c:	af00      	add	r7, sp, #0
   81c7e:	4603      	mov	r3, r0
   81c80:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   81c82:	4b41      	ldr	r3, [pc, #260]	; (81d88 <menu_main+0x110>)
   81c84:	781b      	ldrb	r3, [r3, #0]
   81c86:	2b00      	cmp	r3, #0
   81c88:	d004      	beq.n	81c94 <menu_main+0x1c>
    {
        print_menu = 0;
   81c8a:	4b3f      	ldr	r3, [pc, #252]	; (81d88 <menu_main+0x110>)
   81c8c:	2200      	movs	r2, #0
   81c8e:	701a      	strb	r2, [r3, #0]
        print_menu_main();
   81c90:	4b3e      	ldr	r3, [pc, #248]	; (81d8c <menu_main+0x114>)
   81c92:	4798      	blx	r3
    }
    
    update_battery(0);
   81c94:	2000      	movs	r0, #0
   81c96:	4b3e      	ldr	r3, [pc, #248]	; (81d90 <menu_main+0x118>)
   81c98:	4798      	blx	r3
    
    switch (event1)
   81c9a:	79fb      	ldrb	r3, [r7, #7]
   81c9c:	3b01      	subs	r3, #1
   81c9e:	2b0f      	cmp	r3, #15
   81ca0:	d868      	bhi.n	81d74 <menu_main+0xfc>
   81ca2:	a201      	add	r2, pc, #4	; (adr r2, 81ca8 <menu_main+0x30>)
   81ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81ca8:	00081ce9 	.word	0x00081ce9
   81cac:	00081d75 	.word	0x00081d75
   81cb0:	00081d75 	.word	0x00081d75
   81cb4:	00081d75 	.word	0x00081d75
   81cb8:	00081d75 	.word	0x00081d75
   81cbc:	00081d75 	.word	0x00081d75
   81cc0:	00081d29 	.word	0x00081d29
   81cc4:	00081d75 	.word	0x00081d75
   81cc8:	00081d75 	.word	0x00081d75
   81ccc:	00081d75 	.word	0x00081d75
   81cd0:	00081d75 	.word	0x00081d75
   81cd4:	00081d75 	.word	0x00081d75
   81cd8:	00081d09 	.word	0x00081d09
   81cdc:	00081d75 	.word	0x00081d75
   81ce0:	00081d75 	.word	0x00081d75
   81ce4:	00081d67 	.word	0x00081d67
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.main.act_cursor_line > menu_info.main.min_cursor_line)
   81ce8:	4b2a      	ldr	r3, [pc, #168]	; (81d94 <menu_main+0x11c>)
   81cea:	781a      	ldrb	r2, [r3, #0]
   81cec:	4b29      	ldr	r3, [pc, #164]	; (81d94 <menu_main+0x11c>)
   81cee:	789b      	ldrb	r3, [r3, #2]
   81cf0:	429a      	cmp	r2, r3
   81cf2:	d941      	bls.n	81d78 <menu_main+0x100>
            {
                menu_info.main.act_cursor_line--;
   81cf4:	4b27      	ldr	r3, [pc, #156]	; (81d94 <menu_main+0x11c>)
   81cf6:	781b      	ldrb	r3, [r3, #0]
   81cf8:	3b01      	subs	r3, #1
   81cfa:	b2da      	uxtb	r2, r3
   81cfc:	4b25      	ldr	r3, [pc, #148]	; (81d94 <menu_main+0x11c>)
   81cfe:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   81d00:	4824      	ldr	r0, [pc, #144]	; (81d94 <menu_main+0x11c>)
   81d02:	4b25      	ldr	r3, [pc, #148]	; (81d98 <menu_main+0x120>)
   81d04:	4798      	blx	r3
            }
            break;
   81d06:	e037      	b.n	81d78 <menu_main+0x100>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.main.act_cursor_line < menu_info.main.max_cursor_line)
   81d08:	4b22      	ldr	r3, [pc, #136]	; (81d94 <menu_main+0x11c>)
   81d0a:	781a      	ldrb	r2, [r3, #0]
   81d0c:	4b21      	ldr	r3, [pc, #132]	; (81d94 <menu_main+0x11c>)
   81d0e:	78db      	ldrb	r3, [r3, #3]
   81d10:	429a      	cmp	r2, r3
   81d12:	d233      	bcs.n	81d7c <menu_main+0x104>
            {
                menu_info.main.act_cursor_line++;
   81d14:	4b1f      	ldr	r3, [pc, #124]	; (81d94 <menu_main+0x11c>)
   81d16:	781b      	ldrb	r3, [r3, #0]
   81d18:	3301      	adds	r3, #1
   81d1a:	b2da      	uxtb	r2, r3
   81d1c:	4b1d      	ldr	r3, [pc, #116]	; (81d94 <menu_main+0x11c>)
   81d1e:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   81d20:	481c      	ldr	r0, [pc, #112]	; (81d94 <menu_main+0x11c>)
   81d22:	4b1d      	ldr	r3, [pc, #116]	; (81d98 <menu_main+0x120>)
   81d24:	4798      	blx	r3
            }
            break;
   81d26:	e029      	b.n	81d7c <menu_main+0x104>
        case EVENT_BUTTON_MID_P:
            {
                switch (menu_info.main.act_cursor_line)
   81d28:	4b1a      	ldr	r3, [pc, #104]	; (81d94 <menu_main+0x11c>)
   81d2a:	781b      	ldrb	r3, [r3, #0]
   81d2c:	2b03      	cmp	r3, #3
   81d2e:	d00b      	beq.n	81d48 <menu_main+0xd0>
   81d30:	2b04      	cmp	r3, #4
   81d32:	d010      	beq.n	81d56 <menu_main+0xde>
   81d34:	2b02      	cmp	r3, #2
   81d36:	d000      	beq.n	81d3a <menu_main+0xc2>
                    case 4:
                        act_menu = MENU_SETTINGS;
                        print_menu = 1;
                        break;
                    default:
                        break;
   81d38:	e014      	b.n	81d64 <menu_main+0xec>
                        act_menu = MENU_MATCH;
   81d3a:	4b18      	ldr	r3, [pc, #96]	; (81d9c <menu_main+0x124>)
   81d3c:	2201      	movs	r2, #1
   81d3e:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81d40:	4b11      	ldr	r3, [pc, #68]	; (81d88 <menu_main+0x110>)
   81d42:	2201      	movs	r2, #1
   81d44:	701a      	strb	r2, [r3, #0]
                        break;
   81d46:	e00d      	b.n	81d64 <menu_main+0xec>
                        act_menu = MENU_SENSORS;
   81d48:	4b14      	ldr	r3, [pc, #80]	; (81d9c <menu_main+0x124>)
   81d4a:	2202      	movs	r2, #2
   81d4c:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81d4e:	4b0e      	ldr	r3, [pc, #56]	; (81d88 <menu_main+0x110>)
   81d50:	2201      	movs	r2, #1
   81d52:	701a      	strb	r2, [r3, #0]
                        break;
   81d54:	e006      	b.n	81d64 <menu_main+0xec>
                        act_menu = MENU_SETTINGS;
   81d56:	4b11      	ldr	r3, [pc, #68]	; (81d9c <menu_main+0x124>)
   81d58:	2203      	movs	r2, #3
   81d5a:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81d5c:	4b0a      	ldr	r3, [pc, #40]	; (81d88 <menu_main+0x110>)
   81d5e:	2201      	movs	r2, #1
   81d60:	701a      	strb	r2, [r3, #0]
                        break;
   81d62:	bf00      	nop
                }
            }
            break;
   81d64:	e00b      	b.n	81d7e <menu_main+0x106>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SHUTDOWN;
   81d66:	4b0d      	ldr	r3, [pc, #52]	; (81d9c <menu_main+0x124>)
   81d68:	2209      	movs	r2, #9
   81d6a:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81d6c:	4b06      	ldr	r3, [pc, #24]	; (81d88 <menu_main+0x110>)
   81d6e:	2201      	movs	r2, #1
   81d70:	701a      	strb	r2, [r3, #0]
            break;
   81d72:	e004      	b.n	81d7e <menu_main+0x106>
        default:
            break;
   81d74:	bf00      	nop
   81d76:	e002      	b.n	81d7e <menu_main+0x106>
            break;
   81d78:	bf00      	nop
   81d7a:	e000      	b.n	81d7e <menu_main+0x106>
            break;
   81d7c:	bf00      	nop
    }
}
   81d7e:	bf00      	nop
   81d80:	3708      	adds	r7, #8
   81d82:	46bd      	mov	sp, r7
   81d84:	bd80      	pop	{r7, pc}
   81d86:	bf00      	nop
   81d88:	2007018c 	.word	0x2007018c
   81d8c:	000823b1 	.word	0x000823b1
   81d90:	00082f8d 	.word	0x00082f8d
   81d94:	20070190 	.word	0x20070190
   81d98:	000824f1 	.word	0x000824f1
   81d9c:	20070de0 	.word	0x20070de0

00081da0 <menu_match>:

static void menu_match(event_t event1)
{
   81da0:	b480      	push	{r7}
   81da2:	b083      	sub	sp, #12
   81da4:	af00      	add	r7, sp, #0
   81da6:	4603      	mov	r3, r0
   81da8:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81daa:	79fb      	ldrb	r3, [r7, #7]
   81dac:	2b10      	cmp	r3, #16
   81dae:	d105      	bne.n	81dbc <menu_match+0x1c>
    {
        act_menu = MENU_MAIN;
   81db0:	4b05      	ldr	r3, [pc, #20]	; (81dc8 <menu_match+0x28>)
   81db2:	2200      	movs	r2, #0
   81db4:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81db6:	4b05      	ldr	r3, [pc, #20]	; (81dcc <menu_match+0x2c>)
   81db8:	2201      	movs	r2, #1
   81dba:	701a      	strb	r2, [r3, #0]
    }
}
   81dbc:	bf00      	nop
   81dbe:	370c      	adds	r7, #12
   81dc0:	46bd      	mov	sp, r7
   81dc2:	bc80      	pop	{r7}
   81dc4:	4770      	bx	lr
   81dc6:	bf00      	nop
   81dc8:	20070de0 	.word	0x20070de0
   81dcc:	2007018c 	.word	0x2007018c

00081dd0 <menu_sensors>:

static void menu_sensors(event_t event1)
{
   81dd0:	b580      	push	{r7, lr}
   81dd2:	b082      	sub	sp, #8
   81dd4:	af00      	add	r7, sp, #0
   81dd6:	4603      	mov	r3, r0
   81dd8:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   81dda:	4b40      	ldr	r3, [pc, #256]	; (81edc <menu_sensors+0x10c>)
   81ddc:	781b      	ldrb	r3, [r3, #0]
   81dde:	2b00      	cmp	r3, #0
   81de0:	d004      	beq.n	81dec <menu_sensors+0x1c>
    {
        print_menu = 0;
   81de2:	4b3e      	ldr	r3, [pc, #248]	; (81edc <menu_sensors+0x10c>)
   81de4:	2200      	movs	r2, #0
   81de6:	701a      	strb	r2, [r3, #0]
        print_menu_sensors();
   81de8:	4b3d      	ldr	r3, [pc, #244]	; (81ee0 <menu_sensors+0x110>)
   81dea:	4798      	blx	r3
    }
    
    switch(event1)
   81dec:	79fb      	ldrb	r3, [r7, #7]
   81dee:	3b01      	subs	r3, #1
   81df0:	2b0f      	cmp	r3, #15
   81df2:	d869      	bhi.n	81ec8 <menu_sensors+0xf8>
   81df4:	a201      	add	r2, pc, #4	; (adr r2, 81dfc <menu_sensors+0x2c>)
   81df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81dfa:	bf00      	nop
   81dfc:	00081e3d 	.word	0x00081e3d
   81e00:	00081ec9 	.word	0x00081ec9
   81e04:	00081ec9 	.word	0x00081ec9
   81e08:	00081ec9 	.word	0x00081ec9
   81e0c:	00081ec9 	.word	0x00081ec9
   81e10:	00081ec9 	.word	0x00081ec9
   81e14:	00081e7d 	.word	0x00081e7d
   81e18:	00081ec9 	.word	0x00081ec9
   81e1c:	00081ec9 	.word	0x00081ec9
   81e20:	00081ec9 	.word	0x00081ec9
   81e24:	00081ec9 	.word	0x00081ec9
   81e28:	00081ec9 	.word	0x00081ec9
   81e2c:	00081e5d 	.word	0x00081e5d
   81e30:	00081ec9 	.word	0x00081ec9
   81e34:	00081ec9 	.word	0x00081ec9
   81e38:	00081ebb 	.word	0x00081ebb
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.sensors.act_cursor_line > menu_info.sensors.min_cursor_line)
   81e3c:	4b29      	ldr	r3, [pc, #164]	; (81ee4 <menu_sensors+0x114>)
   81e3e:	791a      	ldrb	r2, [r3, #4]
   81e40:	4b28      	ldr	r3, [pc, #160]	; (81ee4 <menu_sensors+0x114>)
   81e42:	799b      	ldrb	r3, [r3, #6]
   81e44:	429a      	cmp	r2, r3
   81e46:	d941      	bls.n	81ecc <menu_sensors+0xfc>
            {
                menu_info.sensors.act_cursor_line--;
   81e48:	4b26      	ldr	r3, [pc, #152]	; (81ee4 <menu_sensors+0x114>)
   81e4a:	791b      	ldrb	r3, [r3, #4]
   81e4c:	3b01      	subs	r3, #1
   81e4e:	b2da      	uxtb	r2, r3
   81e50:	4b24      	ldr	r3, [pc, #144]	; (81ee4 <menu_sensors+0x114>)
   81e52:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   81e54:	4824      	ldr	r0, [pc, #144]	; (81ee8 <menu_sensors+0x118>)
   81e56:	4b25      	ldr	r3, [pc, #148]	; (81eec <menu_sensors+0x11c>)
   81e58:	4798      	blx	r3
            }
            break;
   81e5a:	e037      	b.n	81ecc <menu_sensors+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.sensors.act_cursor_line < menu_info.sensors.max_cursor_line)
   81e5c:	4b21      	ldr	r3, [pc, #132]	; (81ee4 <menu_sensors+0x114>)
   81e5e:	791a      	ldrb	r2, [r3, #4]
   81e60:	4b20      	ldr	r3, [pc, #128]	; (81ee4 <menu_sensors+0x114>)
   81e62:	79db      	ldrb	r3, [r3, #7]
   81e64:	429a      	cmp	r2, r3
   81e66:	d233      	bcs.n	81ed0 <menu_sensors+0x100>
            {
                menu_info.sensors.act_cursor_line++;
   81e68:	4b1e      	ldr	r3, [pc, #120]	; (81ee4 <menu_sensors+0x114>)
   81e6a:	791b      	ldrb	r3, [r3, #4]
   81e6c:	3301      	adds	r3, #1
   81e6e:	b2da      	uxtb	r2, r3
   81e70:	4b1c      	ldr	r3, [pc, #112]	; (81ee4 <menu_sensors+0x114>)
   81e72:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   81e74:	481c      	ldr	r0, [pc, #112]	; (81ee8 <menu_sensors+0x118>)
   81e76:	4b1d      	ldr	r3, [pc, #116]	; (81eec <menu_sensors+0x11c>)
   81e78:	4798      	blx	r3
            }
            break;
   81e7a:	e029      	b.n	81ed0 <menu_sensors+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.sensors.act_cursor_line)
   81e7c:	4b19      	ldr	r3, [pc, #100]	; (81ee4 <menu_sensors+0x114>)
   81e7e:	791b      	ldrb	r3, [r3, #4]
   81e80:	2b02      	cmp	r3, #2
   81e82:	d00b      	beq.n	81e9c <menu_sensors+0xcc>
   81e84:	2b03      	cmp	r3, #3
   81e86:	d010      	beq.n	81eaa <menu_sensors+0xda>
   81e88:	2b01      	cmp	r3, #1
   81e8a:	d000      	beq.n	81e8e <menu_sensors+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   81e8c:	e014      	b.n	81eb8 <menu_sensors+0xe8>
                    act_menu = MENU_BALL;
   81e8e:	4b18      	ldr	r3, [pc, #96]	; (81ef0 <menu_sensors+0x120>)
   81e90:	2204      	movs	r2, #4
   81e92:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81e94:	4b11      	ldr	r3, [pc, #68]	; (81edc <menu_sensors+0x10c>)
   81e96:	2201      	movs	r2, #1
   81e98:	701a      	strb	r2, [r3, #0]
                    break;
   81e9a:	e00d      	b.n	81eb8 <menu_sensors+0xe8>
                    act_menu = MENU_COMPASS;
   81e9c:	4b14      	ldr	r3, [pc, #80]	; (81ef0 <menu_sensors+0x120>)
   81e9e:	2207      	movs	r2, #7
   81ea0:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81ea2:	4b0e      	ldr	r3, [pc, #56]	; (81edc <menu_sensors+0x10c>)
   81ea4:	2201      	movs	r2, #1
   81ea6:	701a      	strb	r2, [r3, #0]
                    break;
   81ea8:	e006      	b.n	81eb8 <menu_sensors+0xe8>
                    act_menu = MENU_LINE;
   81eaa:	4b11      	ldr	r3, [pc, #68]	; (81ef0 <menu_sensors+0x120>)
   81eac:	2205      	movs	r2, #5
   81eae:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81eb0:	4b0a      	ldr	r3, [pc, #40]	; (81edc <menu_sensors+0x10c>)
   81eb2:	2201      	movs	r2, #1
   81eb4:	701a      	strb	r2, [r3, #0]
                    break;
   81eb6:	bf00      	nop
            }
            break;
   81eb8:	e00b      	b.n	81ed2 <menu_sensors+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   81eba:	4b0d      	ldr	r3, [pc, #52]	; (81ef0 <menu_sensors+0x120>)
   81ebc:	2200      	movs	r2, #0
   81ebe:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81ec0:	4b06      	ldr	r3, [pc, #24]	; (81edc <menu_sensors+0x10c>)
   81ec2:	2201      	movs	r2, #1
   81ec4:	701a      	strb	r2, [r3, #0]
            break;
   81ec6:	e004      	b.n	81ed2 <menu_sensors+0x102>
        default:
            break;
   81ec8:	bf00      	nop
   81eca:	e002      	b.n	81ed2 <menu_sensors+0x102>
            break;
   81ecc:	bf00      	nop
   81ece:	e000      	b.n	81ed2 <menu_sensors+0x102>
            break;
   81ed0:	bf00      	nop
    }
}
   81ed2:	bf00      	nop
   81ed4:	3708      	adds	r7, #8
   81ed6:	46bd      	mov	sp, r7
   81ed8:	bd80      	pop	{r7, pc}
   81eda:	bf00      	nop
   81edc:	2007018c 	.word	0x2007018c
   81ee0:	00082421 	.word	0x00082421
   81ee4:	20070190 	.word	0x20070190
   81ee8:	20070194 	.word	0x20070194
   81eec:	000824f1 	.word	0x000824f1
   81ef0:	20070de0 	.word	0x20070de0

00081ef4 <menu_ball>:

static void menu_ball(event_t event1)
{
   81ef4:	b580      	push	{r7, lr}
   81ef6:	b082      	sub	sp, #8
   81ef8:	af00      	add	r7, sp, #0
   81efa:	4603      	mov	r3, r0
   81efc:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   81efe:	4b0d      	ldr	r3, [pc, #52]	; (81f34 <menu_ball+0x40>)
   81f00:	781b      	ldrb	r3, [r3, #0]
   81f02:	2b00      	cmp	r3, #0
   81f04:	d004      	beq.n	81f10 <menu_ball+0x1c>
    {
        print_menu = 0;
   81f06:	4b0b      	ldr	r3, [pc, #44]	; (81f34 <menu_ball+0x40>)
   81f08:	2200      	movs	r2, #0
   81f0a:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81f0c:	4b0a      	ldr	r3, [pc, #40]	; (81f38 <menu_ball+0x44>)
   81f0e:	4798      	blx	r3
    {
        lcd_print_s(2, 0, "Direction: no ball");
    }
    
    sprintf(sprintf_buf, "Having ball: %1d", rpi_rx.ibit.have_ball);*/
    lcd_print_s(3, 0, sprintf_buf);
   81f10:	4a0a      	ldr	r2, [pc, #40]	; (81f3c <menu_ball+0x48>)
   81f12:	2100      	movs	r1, #0
   81f14:	2003      	movs	r0, #3
   81f16:	4b0a      	ldr	r3, [pc, #40]	; (81f40 <menu_ball+0x4c>)
   81f18:	4798      	blx	r3
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81f1a:	79fb      	ldrb	r3, [r7, #7]
   81f1c:	2b10      	cmp	r3, #16
   81f1e:	d105      	bne.n	81f2c <menu_ball+0x38>
    {
        act_menu = MENU_SENSORS;
   81f20:	4b08      	ldr	r3, [pc, #32]	; (81f44 <menu_ball+0x50>)
   81f22:	2202      	movs	r2, #2
   81f24:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81f26:	4b03      	ldr	r3, [pc, #12]	; (81f34 <menu_ball+0x40>)
   81f28:	2201      	movs	r2, #1
   81f2a:	701a      	strb	r2, [r3, #0]
    }
}
   81f2c:	bf00      	nop
   81f2e:	3708      	adds	r7, #8
   81f30:	46bd      	mov	sp, r7
   81f32:	bd80      	pop	{r7, pc}
   81f34:	2007018c 	.word	0x2007018c
   81f38:	0008162d 	.word	0x0008162d
   81f3c:	20070e70 	.word	0x20070e70
   81f40:	0008164d 	.word	0x0008164d
   81f44:	20070de0 	.word	0x20070de0

00081f48 <menu_compass>:

static void menu_compass(event_t event1)
{
   81f48:	b590      	push	{r4, r7, lr}
   81f4a:	b083      	sub	sp, #12
   81f4c:	af00      	add	r7, sp, #0
   81f4e:	4603      	mov	r3, r0
   81f50:	71fb      	strb	r3, [r7, #7]
    static uint16_t prev_direction = 0;
    
    if(print_menu)
   81f52:	4b24      	ldr	r3, [pc, #144]	; (81fe4 <menu_compass+0x9c>)
   81f54:	781b      	ldrb	r3, [r3, #0]
   81f56:	2b00      	cmp	r3, #0
   81f58:	d004      	beq.n	81f64 <menu_compass+0x1c>
    {
        print_menu = 0;
   81f5a:	4b22      	ldr	r3, [pc, #136]	; (81fe4 <menu_compass+0x9c>)
   81f5c:	2200      	movs	r2, #0
   81f5e:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81f60:	4b21      	ldr	r3, [pc, #132]	; (81fe8 <menu_compass+0xa0>)
   81f62:	4798      	blx	r3
    }
    
    update_compass();
   81f64:	4b21      	ldr	r3, [pc, #132]	; (81fec <menu_compass+0xa4>)
   81f66:	4798      	blx	r3
    if(direction != prev_direction)
   81f68:	4b21      	ldr	r3, [pc, #132]	; (81ff0 <menu_compass+0xa8>)
   81f6a:	881a      	ldrh	r2, [r3, #0]
   81f6c:	4b21      	ldr	r3, [pc, #132]	; (81ff4 <menu_compass+0xac>)
   81f6e:	881b      	ldrh	r3, [r3, #0]
   81f70:	429a      	cmp	r2, r3
   81f72:	d01e      	beq.n	81fb2 <menu_compass+0x6a>
    {
        prev_direction = direction;
   81f74:	4b1e      	ldr	r3, [pc, #120]	; (81ff0 <menu_compass+0xa8>)
   81f76:	881a      	ldrh	r2, [r3, #0]
   81f78:	4b1e      	ldr	r3, [pc, #120]	; (81ff4 <menu_compass+0xac>)
   81f7a:	801a      	strh	r2, [r3, #0]
        sprintf(sprintf_buf, "  Direction: %3.1f  ", (float)direction / 10.0);
   81f7c:	4b1c      	ldr	r3, [pc, #112]	; (81ff0 <menu_compass+0xa8>)
   81f7e:	881a      	ldrh	r2, [r3, #0]
   81f80:	4b1d      	ldr	r3, [pc, #116]	; (81ff8 <menu_compass+0xb0>)
   81f82:	4610      	mov	r0, r2
   81f84:	4798      	blx	r3
   81f86:	4602      	mov	r2, r0
   81f88:	4b1c      	ldr	r3, [pc, #112]	; (81ffc <menu_compass+0xb4>)
   81f8a:	4610      	mov	r0, r2
   81f8c:	4798      	blx	r3
   81f8e:	4c1c      	ldr	r4, [pc, #112]	; (82000 <menu_compass+0xb8>)
   81f90:	f04f 0200 	mov.w	r2, #0
   81f94:	4b1b      	ldr	r3, [pc, #108]	; (82004 <menu_compass+0xbc>)
   81f96:	47a0      	blx	r4
   81f98:	4603      	mov	r3, r0
   81f9a:	460c      	mov	r4, r1
   81f9c:	461a      	mov	r2, r3
   81f9e:	4623      	mov	r3, r4
   81fa0:	4919      	ldr	r1, [pc, #100]	; (82008 <menu_compass+0xc0>)
   81fa2:	481a      	ldr	r0, [pc, #104]	; (8200c <menu_compass+0xc4>)
   81fa4:	4c1a      	ldr	r4, [pc, #104]	; (82010 <menu_compass+0xc8>)
   81fa6:	47a0      	blx	r4
        lcd_print_s(2, 0, sprintf_buf);
   81fa8:	4a18      	ldr	r2, [pc, #96]	; (8200c <menu_compass+0xc4>)
   81faa:	2100      	movs	r1, #0
   81fac:	2002      	movs	r0, #2
   81fae:	4b19      	ldr	r3, [pc, #100]	; (82014 <menu_compass+0xcc>)
   81fb0:	4798      	blx	r3
    }
    
    switch(event1)
   81fb2:	79fb      	ldrb	r3, [r7, #7]
   81fb4:	2b07      	cmp	r3, #7
   81fb6:	d002      	beq.n	81fbe <menu_compass+0x76>
   81fb8:	2b10      	cmp	r3, #16
   81fba:	d007      	beq.n	81fcc <menu_compass+0x84>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SENSORS;
            print_menu = 1;
            break;
        default:
            break;
   81fbc:	e00d      	b.n	81fda <menu_compass+0x92>
            act_menu = MENU_COMPASS_CALIBRATION;
   81fbe:	4b16      	ldr	r3, [pc, #88]	; (82018 <menu_compass+0xd0>)
   81fc0:	2208      	movs	r2, #8
   81fc2:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81fc4:	4b07      	ldr	r3, [pc, #28]	; (81fe4 <menu_compass+0x9c>)
   81fc6:	2201      	movs	r2, #1
   81fc8:	701a      	strb	r2, [r3, #0]
            break;
   81fca:	e006      	b.n	81fda <menu_compass+0x92>
            act_menu = MENU_SENSORS;
   81fcc:	4b12      	ldr	r3, [pc, #72]	; (82018 <menu_compass+0xd0>)
   81fce:	2202      	movs	r2, #2
   81fd0:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81fd2:	4b04      	ldr	r3, [pc, #16]	; (81fe4 <menu_compass+0x9c>)
   81fd4:	2201      	movs	r2, #1
   81fd6:	701a      	strb	r2, [r3, #0]
            break;
   81fd8:	bf00      	nop
    }
}
   81fda:	bf00      	nop
   81fdc:	370c      	adds	r7, #12
   81fde:	46bd      	mov	sp, r7
   81fe0:	bd90      	pop	{r4, r7, pc}
   81fe2:	bf00      	nop
   81fe4:	2007018c 	.word	0x2007018c
   81fe8:	0008162d 	.word	0x0008162d
   81fec:	00081369 	.word	0x00081369
   81ff0:	20070e40 	.word	0x20070e40
   81ff4:	20070de4 	.word	0x20070de4
   81ff8:	00084ddd 	.word	0x00084ddd
   81ffc:	000847a5 	.word	0x000847a5
   82000:	00084aa1 	.word	0x00084aa1
   82004:	40240000 	.word	0x40240000
   82008:	0008937c 	.word	0x0008937c
   8200c:	20070e70 	.word	0x20070e70
   82010:	00085351 	.word	0x00085351
   82014:	0008164d 	.word	0x0008164d
   82018:	20070de0 	.word	0x20070de0

0008201c <menu_compass_calibration>:

static void menu_compass_calibration(event_t event1)
{
   8201c:	b580      	push	{r7, lr}
   8201e:	b084      	sub	sp, #16
   82020:	af00      	add	r7, sp, #0
   82022:	4603      	mov	r3, r0
   82024:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   82026:	4b2e      	ldr	r3, [pc, #184]	; (820e0 <menu_compass_calibration+0xc4>)
   82028:	781b      	ldrb	r3, [r3, #0]
   8202a:	2b00      	cmp	r3, #0
   8202c:	d016      	beq.n	8205c <menu_compass_calibration+0x40>
    {
        print_menu = 0;
   8202e:	4b2c      	ldr	r3, [pc, #176]	; (820e0 <menu_compass_calibration+0xc4>)
   82030:	2200      	movs	r2, #0
   82032:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   82034:	4b2b      	ldr	r3, [pc, #172]	; (820e4 <menu_compass_calibration+0xc8>)
   82036:	4798      	blx	r3
        lcd_print_s(2, 1, "calibrate compass");
   82038:	4a2b      	ldr	r2, [pc, #172]	; (820e8 <menu_compass_calibration+0xcc>)
   8203a:	2101      	movs	r1, #1
   8203c:	2002      	movs	r0, #2
   8203e:	4b2b      	ldr	r3, [pc, #172]	; (820ec <menu_compass_calibration+0xd0>)
   82040:	4798      	blx	r3
        sprintf(sprintf_buf, "  Direction: %1d  ", compass_cal_step + 1);
   82042:	4b2b      	ldr	r3, [pc, #172]	; (820f0 <menu_compass_calibration+0xd4>)
   82044:	781b      	ldrb	r3, [r3, #0]
   82046:	3301      	adds	r3, #1
   82048:	461a      	mov	r2, r3
   8204a:	492a      	ldr	r1, [pc, #168]	; (820f4 <menu_compass_calibration+0xd8>)
   8204c:	482a      	ldr	r0, [pc, #168]	; (820f8 <menu_compass_calibration+0xdc>)
   8204e:	4b2b      	ldr	r3, [pc, #172]	; (820fc <menu_compass_calibration+0xe0>)
   82050:	4798      	blx	r3
        lcd_print_s(3, 1, sprintf_buf);
   82052:	4a29      	ldr	r2, [pc, #164]	; (820f8 <menu_compass_calibration+0xdc>)
   82054:	2101      	movs	r1, #1
   82056:	2003      	movs	r0, #3
   82058:	4b24      	ldr	r3, [pc, #144]	; (820ec <menu_compass_calibration+0xd0>)
   8205a:	4798      	blx	r3
    }
    
    if(event1 == EVENT_BUTTON_MID_P)
   8205c:	79fb      	ldrb	r3, [r7, #7]
   8205e:	2b07      	cmp	r3, #7
   82060:	d139      	bne.n	820d6 <menu_compass_calibration+0xba>
    {
        twi_packet_t *tx_packet = twi_get_tx_packet();
   82062:	4b27      	ldr	r3, [pc, #156]	; (82100 <menu_compass_calibration+0xe4>)
   82064:	4798      	blx	r3
   82066:	60f8      	str	r0, [r7, #12]
        
        tx_packet->chip = 0x60;
   82068:	68fb      	ldr	r3, [r7, #12]
   8206a:	2260      	movs	r2, #96	; 0x60
   8206c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        tx_packet->addr[0] = 0x0f;
   82070:	68fb      	ldr	r3, [r7, #12]
   82072:	220f      	movs	r2, #15
   82074:	701a      	strb	r2, [r3, #0]
        tx_packet->addr_length = 1;
   82076:	68fb      	ldr	r3, [r7, #12]
   82078:	2201      	movs	r2, #1
   8207a:	605a      	str	r2, [r3, #4]
        
        tx_packet->buffer[0] = 0xff;
   8207c:	68fb      	ldr	r3, [r7, #12]
   8207e:	22ff      	movs	r2, #255	; 0xff
   82080:	721a      	strb	r2, [r3, #8]
        tx_packet->length = 1;
   82082:	68fb      	ldr	r3, [r7, #12]
   82084:	2201      	movs	r2, #1
   82086:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        
        set_compass_is_busy();
   8208a:	4b1e      	ldr	r3, [pc, #120]	; (82104 <menu_compass_calibration+0xe8>)
   8208c:	4798      	blx	r3
        twi_pdc_master_write(TWI0, tx_packet);
   8208e:	68f9      	ldr	r1, [r7, #12]
   82090:	481d      	ldr	r0, [pc, #116]	; (82108 <menu_compass_calibration+0xec>)
   82092:	4b1e      	ldr	r3, [pc, #120]	; (8210c <menu_compass_calibration+0xf0>)
   82094:	4798      	blx	r3
        while(compass_is_busy());
   82096:	bf00      	nop
   82098:	4b1d      	ldr	r3, [pc, #116]	; (82110 <menu_compass_calibration+0xf4>)
   8209a:	4798      	blx	r3
   8209c:	4603      	mov	r3, r0
   8209e:	2b00      	cmp	r3, #0
   820a0:	d1fa      	bne.n	82098 <menu_compass_calibration+0x7c>
        mdelay(500);
   820a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   820a6:	4b1b      	ldr	r3, [pc, #108]	; (82114 <menu_compass_calibration+0xf8>)
   820a8:	4798      	blx	r3
        
        compass_cal_step++;
   820aa:	4b11      	ldr	r3, [pc, #68]	; (820f0 <menu_compass_calibration+0xd4>)
   820ac:	781b      	ldrb	r3, [r3, #0]
   820ae:	3301      	adds	r3, #1
   820b0:	b2da      	uxtb	r2, r3
   820b2:	4b0f      	ldr	r3, [pc, #60]	; (820f0 <menu_compass_calibration+0xd4>)
   820b4:	701a      	strb	r2, [r3, #0]
        
        if(compass_cal_step == 4)
   820b6:	4b0e      	ldr	r3, [pc, #56]	; (820f0 <menu_compass_calibration+0xd4>)
   820b8:	781b      	ldrb	r3, [r3, #0]
   820ba:	2b04      	cmp	r3, #4
   820bc:	d108      	bne.n	820d0 <menu_compass_calibration+0xb4>
        {
            compass_cal_step = 0;
   820be:	4b0c      	ldr	r3, [pc, #48]	; (820f0 <menu_compass_calibration+0xd4>)
   820c0:	2200      	movs	r2, #0
   820c2:	701a      	strb	r2, [r3, #0]
            act_menu = MENU_COMPASS;
   820c4:	4b14      	ldr	r3, [pc, #80]	; (82118 <menu_compass_calibration+0xfc>)
   820c6:	2207      	movs	r2, #7
   820c8:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   820ca:	4b05      	ldr	r3, [pc, #20]	; (820e0 <menu_compass_calibration+0xc4>)
   820cc:	2201      	movs	r2, #1
   820ce:	701a      	strb	r2, [r3, #0]
        }
        print_menu = 1;
   820d0:	4b03      	ldr	r3, [pc, #12]	; (820e0 <menu_compass_calibration+0xc4>)
   820d2:	2201      	movs	r2, #1
   820d4:	701a      	strb	r2, [r3, #0]
    }
}
   820d6:	bf00      	nop
   820d8:	3710      	adds	r7, #16
   820da:	46bd      	mov	sp, r7
   820dc:	bd80      	pop	{r7, pc}
   820de:	bf00      	nop
   820e0:	2007018c 	.word	0x2007018c
   820e4:	0008162d 	.word	0x0008162d
   820e8:	00089394 	.word	0x00089394
   820ec:	0008164d 	.word	0x0008164d
   820f0:	20070de1 	.word	0x20070de1
   820f4:	000893a8 	.word	0x000893a8
   820f8:	20070e70 	.word	0x20070e70
   820fc:	00085351 	.word	0x00085351
   82100:	00080ebd 	.word	0x00080ebd
   82104:	000813f9 	.word	0x000813f9
   82108:	4008c000 	.word	0x4008c000
   8210c:	00080fbd 	.word	0x00080fbd
   82110:	00081411 	.word	0x00081411
   82114:	00082f19 	.word	0x00082f19
   82118:	20070de0 	.word	0x20070de0

0008211c <menu_line>:

static void menu_line(event_t event1)
{
   8211c:	b480      	push	{r7}
   8211e:	b083      	sub	sp, #12
   82120:	af00      	add	r7, sp, #0
   82122:	4603      	mov	r3, r0
   82124:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   82126:	79fb      	ldrb	r3, [r7, #7]
   82128:	2b10      	cmp	r3, #16
   8212a:	d105      	bne.n	82138 <menu_line+0x1c>
    {
        act_menu = MENU_SENSORS;
   8212c:	4b05      	ldr	r3, [pc, #20]	; (82144 <menu_line+0x28>)
   8212e:	2202      	movs	r2, #2
   82130:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   82132:	4b05      	ldr	r3, [pc, #20]	; (82148 <menu_line+0x2c>)
   82134:	2201      	movs	r2, #1
   82136:	701a      	strb	r2, [r3, #0]
    }
}
   82138:	bf00      	nop
   8213a:	370c      	adds	r7, #12
   8213c:	46bd      	mov	sp, r7
   8213e:	bc80      	pop	{r7}
   82140:	4770      	bx	lr
   82142:	bf00      	nop
   82144:	20070de0 	.word	0x20070de0
   82148:	2007018c 	.word	0x2007018c

0008214c <menu_line_calibration>:

static void menu_line_calibration(event_t event1)
{
   8214c:	b480      	push	{r7}
   8214e:	b083      	sub	sp, #12
   82150:	af00      	add	r7, sp, #0
   82152:	4603      	mov	r3, r0
   82154:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   82156:	79fb      	ldrb	r3, [r7, #7]
   82158:	2b10      	cmp	r3, #16
   8215a:	d105      	bne.n	82168 <menu_line_calibration+0x1c>
    {
        act_menu = MENU_LINE;
   8215c:	4b05      	ldr	r3, [pc, #20]	; (82174 <menu_line_calibration+0x28>)
   8215e:	2205      	movs	r2, #5
   82160:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   82162:	4b05      	ldr	r3, [pc, #20]	; (82178 <menu_line_calibration+0x2c>)
   82164:	2201      	movs	r2, #1
   82166:	701a      	strb	r2, [r3, #0]
    }
}
   82168:	bf00      	nop
   8216a:	370c      	adds	r7, #12
   8216c:	46bd      	mov	sp, r7
   8216e:	bc80      	pop	{r7}
   82170:	4770      	bx	lr
   82172:	bf00      	nop
   82174:	20070de0 	.word	0x20070de0
   82178:	2007018c 	.word	0x2007018c

0008217c <menu_settings>:

static void menu_settings(event_t event1)
{
   8217c:	b580      	push	{r7, lr}
   8217e:	b082      	sub	sp, #8
   82180:	af00      	add	r7, sp, #0
   82182:	4603      	mov	r3, r0
   82184:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   82186:	4b40      	ldr	r3, [pc, #256]	; (82288 <menu_settings+0x10c>)
   82188:	781b      	ldrb	r3, [r3, #0]
   8218a:	2b00      	cmp	r3, #0
   8218c:	d004      	beq.n	82198 <menu_settings+0x1c>
    {
        print_menu = 0;
   8218e:	4b3e      	ldr	r3, [pc, #248]	; (82288 <menu_settings+0x10c>)
   82190:	2200      	movs	r2, #0
   82192:	701a      	strb	r2, [r3, #0]
        print_menu_settings();
   82194:	4b3d      	ldr	r3, [pc, #244]	; (8228c <menu_settings+0x110>)
   82196:	4798      	blx	r3
    }
    
    switch(event1)
   82198:	79fb      	ldrb	r3, [r7, #7]
   8219a:	3b01      	subs	r3, #1
   8219c:	2b0f      	cmp	r3, #15
   8219e:	d869      	bhi.n	82274 <menu_settings+0xf8>
   821a0:	a201      	add	r2, pc, #4	; (adr r2, 821a8 <menu_settings+0x2c>)
   821a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   821a6:	bf00      	nop
   821a8:	000821e9 	.word	0x000821e9
   821ac:	00082275 	.word	0x00082275
   821b0:	00082275 	.word	0x00082275
   821b4:	00082275 	.word	0x00082275
   821b8:	00082275 	.word	0x00082275
   821bc:	00082275 	.word	0x00082275
   821c0:	00082229 	.word	0x00082229
   821c4:	00082275 	.word	0x00082275
   821c8:	00082275 	.word	0x00082275
   821cc:	00082275 	.word	0x00082275
   821d0:	00082275 	.word	0x00082275
   821d4:	00082275 	.word	0x00082275
   821d8:	00082209 	.word	0x00082209
   821dc:	00082275 	.word	0x00082275
   821e0:	00082275 	.word	0x00082275
   821e4:	00082267 	.word	0x00082267
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.settings.act_cursor_line > menu_info.settings.min_cursor_line)
   821e8:	4b29      	ldr	r3, [pc, #164]	; (82290 <menu_settings+0x114>)
   821ea:	7a1a      	ldrb	r2, [r3, #8]
   821ec:	4b28      	ldr	r3, [pc, #160]	; (82290 <menu_settings+0x114>)
   821ee:	7a9b      	ldrb	r3, [r3, #10]
   821f0:	429a      	cmp	r2, r3
   821f2:	d941      	bls.n	82278 <menu_settings+0xfc>
            {
                menu_info.settings.act_cursor_line--;
   821f4:	4b26      	ldr	r3, [pc, #152]	; (82290 <menu_settings+0x114>)
   821f6:	7a1b      	ldrb	r3, [r3, #8]
   821f8:	3b01      	subs	r3, #1
   821fa:	b2da      	uxtb	r2, r3
   821fc:	4b24      	ldr	r3, [pc, #144]	; (82290 <menu_settings+0x114>)
   821fe:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   82200:	4824      	ldr	r0, [pc, #144]	; (82294 <menu_settings+0x118>)
   82202:	4b25      	ldr	r3, [pc, #148]	; (82298 <menu_settings+0x11c>)
   82204:	4798      	blx	r3
            }
            break;
   82206:	e037      	b.n	82278 <menu_settings+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.settings.act_cursor_line < menu_info.settings.max_cursor_line)
   82208:	4b21      	ldr	r3, [pc, #132]	; (82290 <menu_settings+0x114>)
   8220a:	7a1a      	ldrb	r2, [r3, #8]
   8220c:	4b20      	ldr	r3, [pc, #128]	; (82290 <menu_settings+0x114>)
   8220e:	7adb      	ldrb	r3, [r3, #11]
   82210:	429a      	cmp	r2, r3
   82212:	d233      	bcs.n	8227c <menu_settings+0x100>
            {
                menu_info.settings.act_cursor_line++;
   82214:	4b1e      	ldr	r3, [pc, #120]	; (82290 <menu_settings+0x114>)
   82216:	7a1b      	ldrb	r3, [r3, #8]
   82218:	3301      	adds	r3, #1
   8221a:	b2da      	uxtb	r2, r3
   8221c:	4b1c      	ldr	r3, [pc, #112]	; (82290 <menu_settings+0x114>)
   8221e:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   82220:	481c      	ldr	r0, [pc, #112]	; (82294 <menu_settings+0x118>)
   82222:	4b1d      	ldr	r3, [pc, #116]	; (82298 <menu_settings+0x11c>)
   82224:	4798      	blx	r3
            }
            break;
   82226:	e029      	b.n	8227c <menu_settings+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.settings.act_cursor_line)
   82228:	4b19      	ldr	r3, [pc, #100]	; (82290 <menu_settings+0x114>)
   8222a:	7a1b      	ldrb	r3, [r3, #8]
   8222c:	2b02      	cmp	r3, #2
   8222e:	d00b      	beq.n	82248 <menu_settings+0xcc>
   82230:	2b03      	cmp	r3, #3
   82232:	d010      	beq.n	82256 <menu_settings+0xda>
   82234:	2b01      	cmp	r3, #1
   82236:	d000      	beq.n	8223a <menu_settings+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   82238:	e014      	b.n	82264 <menu_settings+0xe8>
                    act_menu = MENU_BALL;
   8223a:	4b18      	ldr	r3, [pc, #96]	; (8229c <menu_settings+0x120>)
   8223c:	2204      	movs	r2, #4
   8223e:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   82240:	4b11      	ldr	r3, [pc, #68]	; (82288 <menu_settings+0x10c>)
   82242:	2201      	movs	r2, #1
   82244:	701a      	strb	r2, [r3, #0]
                    break;
   82246:	e00d      	b.n	82264 <menu_settings+0xe8>
                    act_menu = MENU_COMPASS;
   82248:	4b14      	ldr	r3, [pc, #80]	; (8229c <menu_settings+0x120>)
   8224a:	2207      	movs	r2, #7
   8224c:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   8224e:	4b0e      	ldr	r3, [pc, #56]	; (82288 <menu_settings+0x10c>)
   82250:	2201      	movs	r2, #1
   82252:	701a      	strb	r2, [r3, #0]
                    break;
   82254:	e006      	b.n	82264 <menu_settings+0xe8>
                    act_menu = MENU_LINE;
   82256:	4b11      	ldr	r3, [pc, #68]	; (8229c <menu_settings+0x120>)
   82258:	2205      	movs	r2, #5
   8225a:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   8225c:	4b0a      	ldr	r3, [pc, #40]	; (82288 <menu_settings+0x10c>)
   8225e:	2201      	movs	r2, #1
   82260:	701a      	strb	r2, [r3, #0]
                    break;
   82262:	bf00      	nop
            }
            break;
   82264:	e00b      	b.n	8227e <menu_settings+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   82266:	4b0d      	ldr	r3, [pc, #52]	; (8229c <menu_settings+0x120>)
   82268:	2200      	movs	r2, #0
   8226a:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   8226c:	4b06      	ldr	r3, [pc, #24]	; (82288 <menu_settings+0x10c>)
   8226e:	2201      	movs	r2, #1
   82270:	701a      	strb	r2, [r3, #0]
            break;
   82272:	e004      	b.n	8227e <menu_settings+0x102>
        default:
            break;
   82274:	bf00      	nop
   82276:	e002      	b.n	8227e <menu_settings+0x102>
            break;
   82278:	bf00      	nop
   8227a:	e000      	b.n	8227e <menu_settings+0x102>
            break;
   8227c:	bf00      	nop
    }
}
   8227e:	bf00      	nop
   82280:	3708      	adds	r7, #8
   82282:	46bd      	mov	sp, r7
   82284:	bd80      	pop	{r7, pc}
   82286:	bf00      	nop
   82288:	2007018c 	.word	0x2007018c
   8228c:	00082489 	.word	0x00082489
   82290:	20070190 	.word	0x20070190
   82294:	20070198 	.word	0x20070198
   82298:	000824f1 	.word	0x000824f1
   8229c:	20070de0 	.word	0x20070de0

000822a0 <menu_shutdown>:

static void menu_shutdown(event_t event1)
{
   822a0:	b580      	push	{r7, lr}
   822a2:	b082      	sub	sp, #8
   822a4:	af00      	add	r7, sp, #0
   822a6:	4603      	mov	r3, r0
   822a8:	71fb      	strb	r3, [r7, #7]
    if(shutdown_confirmed)
   822aa:	4b35      	ldr	r3, [pc, #212]	; (82380 <menu_shutdown+0xe0>)
   822ac:	781b      	ldrb	r3, [r3, #0]
   822ae:	2b00      	cmp	r3, #0
   822b0:	d043      	beq.n	8233a <menu_shutdown+0x9a>
    {
        lcd_clear();
   822b2:	4b34      	ldr	r3, [pc, #208]	; (82384 <menu_shutdown+0xe4>)
   822b4:	4798      	blx	r3
        lcd_print_s(2, 2, "shutting down...");
   822b6:	4a34      	ldr	r2, [pc, #208]	; (82388 <menu_shutdown+0xe8>)
   822b8:	2102      	movs	r1, #2
   822ba:	2002      	movs	r0, #2
   822bc:	4b33      	ldr	r3, [pc, #204]	; (8238c <menu_shutdown+0xec>)
   822be:	4798      	blx	r3
        
        ioport_set_pin_level(LED_ONBOARD, 0);
   822c0:	2100      	movs	r1, #0
   822c2:	206a      	movs	r0, #106	; 0x6a
   822c4:	4b32      	ldr	r3, [pc, #200]	; (82390 <menu_shutdown+0xf0>)
   822c6:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   822c8:	2100      	movs	r1, #0
   822ca:	2066      	movs	r0, #102	; 0x66
   822cc:	4b30      	ldr	r3, [pc, #192]	; (82390 <menu_shutdown+0xf0>)
   822ce:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   822d0:	2100      	movs	r1, #0
   822d2:	2067      	movs	r0, #103	; 0x67
   822d4:	4b2e      	ldr	r3, [pc, #184]	; (82390 <menu_shutdown+0xf0>)
   822d6:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   822d8:	2100      	movs	r1, #0
   822da:	2068      	movs	r0, #104	; 0x68
   822dc:	4b2c      	ldr	r3, [pc, #176]	; (82390 <menu_shutdown+0xf0>)
   822de:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   822e0:	2100      	movs	r1, #0
   822e2:	2069      	movs	r0, #105	; 0x69
   822e4:	4b2a      	ldr	r3, [pc, #168]	; (82390 <menu_shutdown+0xf0>)
   822e6:	4798      	blx	r3
        pwm_channel_disable(PWM, MREAR);
        
        pwm_channel_disable(PWM, ENC_CLK);
        
        sensor_parameters.ibit.sleep_mode = 1;*/
        update_comm();
   822e8:	4b2a      	ldr	r3, [pc, #168]	; (82394 <menu_shutdown+0xf4>)
   822ea:	4798      	blx	r3
        
        ioport_set_pin_level(RPI1, 0);
   822ec:	2100      	movs	r1, #0
   822ee:	2001      	movs	r0, #1
   822f0:	4b27      	ldr	r3, [pc, #156]	; (82390 <menu_shutdown+0xf0>)
   822f2:	4798      	blx	r3
        while (ioport_get_pin_level(RPI2) == 1);
   822f4:	bf00      	nop
   822f6:	2008      	movs	r0, #8
   822f8:	4b27      	ldr	r3, [pc, #156]	; (82398 <menu_shutdown+0xf8>)
   822fa:	4798      	blx	r3
   822fc:	4603      	mov	r3, r0
   822fe:	2b00      	cmp	r3, #0
   82300:	d1f9      	bne.n	822f6 <menu_shutdown+0x56>
        mdelay(7500);
   82302:	f641 504c 	movw	r0, #7500	; 0x1d4c
   82306:	4b25      	ldr	r3, [pc, #148]	; (8239c <menu_shutdown+0xfc>)
   82308:	4798      	blx	r3
        
        lcd_set_backlight(LCD_LIGHT_OFF);
   8230a:	2000      	movs	r0, #0
   8230c:	4b24      	ldr	r3, [pc, #144]	; (823a0 <menu_shutdown+0x100>)
   8230e:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   82310:	4b1c      	ldr	r3, [pc, #112]	; (82384 <menu_shutdown+0xe4>)
   82312:	4798      	blx	r3
        mdelay(100);
   82314:	2064      	movs	r0, #100	; 0x64
   82316:	4b21      	ldr	r3, [pc, #132]	; (8239c <menu_shutdown+0xfc>)
   82318:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_ON);
   8231a:	2008      	movs	r0, #8
   8231c:	4b20      	ldr	r3, [pc, #128]	; (823a0 <menu_shutdown+0x100>)
   8231e:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   82320:	4b18      	ldr	r3, [pc, #96]	; (82384 <menu_shutdown+0xe4>)
   82322:	4798      	blx	r3
        mdelay(100);
   82324:	2064      	movs	r0, #100	; 0x64
   82326:	4b1d      	ldr	r3, [pc, #116]	; (8239c <menu_shutdown+0xfc>)
   82328:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_OFF);
   8232a:	2000      	movs	r0, #0
   8232c:	4b1c      	ldr	r3, [pc, #112]	; (823a0 <menu_shutdown+0x100>)
   8232e:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   82330:	4b14      	ldr	r3, [pc, #80]	; (82384 <menu_shutdown+0xe4>)
   82332:	4798      	blx	r3
        
        while(1)
        {
            update_comm();
   82334:	4b17      	ldr	r3, [pc, #92]	; (82394 <menu_shutdown+0xf4>)
   82336:	4798      	blx	r3
   82338:	e7fc      	b.n	82334 <menu_shutdown+0x94>
            //check_bat();
        }
    }
    else
    {
        if(print_menu)
   8233a:	4b1a      	ldr	r3, [pc, #104]	; (823a4 <menu_shutdown+0x104>)
   8233c:	781b      	ldrb	r3, [r3, #0]
   8233e:	2b00      	cmp	r3, #0
   82340:	d009      	beq.n	82356 <menu_shutdown+0xb6>
        {
            print_menu = 0;
   82342:	4b18      	ldr	r3, [pc, #96]	; (823a4 <menu_shutdown+0x104>)
   82344:	2200      	movs	r2, #0
   82346:	701a      	strb	r2, [r3, #0]
            lcd_clear();
   82348:	4b0e      	ldr	r3, [pc, #56]	; (82384 <menu_shutdown+0xe4>)
   8234a:	4798      	blx	r3
            lcd_print_s(2, 1, "confirm shutdown?");
   8234c:	4a16      	ldr	r2, [pc, #88]	; (823a8 <menu_shutdown+0x108>)
   8234e:	2101      	movs	r1, #1
   82350:	2002      	movs	r0, #2
   82352:	4b0e      	ldr	r3, [pc, #56]	; (8238c <menu_shutdown+0xec>)
   82354:	4798      	blx	r3
        }
    }
    
    switch (event1)
   82356:	79fb      	ldrb	r3, [r7, #7]
   82358:	2b07      	cmp	r3, #7
   8235a:	d002      	beq.n	82362 <menu_shutdown+0xc2>
   8235c:	2b10      	cmp	r3, #16
   8235e:	d004      	beq.n	8236a <menu_shutdown+0xca>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
            print_menu = 1;
            break;
        default:
            break;
   82360:	e00a      	b.n	82378 <menu_shutdown+0xd8>
            shutdown_confirmed = 1;
   82362:	4b07      	ldr	r3, [pc, #28]	; (82380 <menu_shutdown+0xe0>)
   82364:	2201      	movs	r2, #1
   82366:	701a      	strb	r2, [r3, #0]
            break;
   82368:	e006      	b.n	82378 <menu_shutdown+0xd8>
            act_menu = MENU_MAIN;
   8236a:	4b10      	ldr	r3, [pc, #64]	; (823ac <menu_shutdown+0x10c>)
   8236c:	2200      	movs	r2, #0
   8236e:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82370:	4b0c      	ldr	r3, [pc, #48]	; (823a4 <menu_shutdown+0x104>)
   82372:	2201      	movs	r2, #1
   82374:	701a      	strb	r2, [r3, #0]
            break;
   82376:	bf00      	nop
    }
}
   82378:	bf00      	nop
   8237a:	3708      	adds	r7, #8
   8237c:	46bd      	mov	sp, r7
   8237e:	bd80      	pop	{r7, pc}
   82380:	20070de2 	.word	0x20070de2
   82384:	0008162d 	.word	0x0008162d
   82388:	000893bc 	.word	0x000893bc
   8238c:	0008164d 	.word	0x0008164d
   82390:	00081ae9 	.word	0x00081ae9
   82394:	00082f45 	.word	0x00082f45
   82398:	00081b53 	.word	0x00081b53
   8239c:	00082f19 	.word	0x00082f19
   823a0:	0008160d 	.word	0x0008160d
   823a4:	2007018c 	.word	0x2007018c
   823a8:	000893d0 	.word	0x000893d0
   823ac:	20070de0 	.word	0x20070de0

000823b0 <print_menu_main>:

static void print_menu_main(void)
{
   823b0:	b590      	push	{r4, r7, lr}
   823b2:	b085      	sub	sp, #20
   823b4:	af00      	add	r7, sp, #0
    const char *text[4] = {"    noOS ONE", " Match", " Sensors", " Settings"};
   823b6:	4b14      	ldr	r3, [pc, #80]	; (82408 <print_menu_main+0x58>)
   823b8:	463c      	mov	r4, r7
   823ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   823bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   823c0:	4b12      	ldr	r3, [pc, #72]	; (8240c <print_menu_main+0x5c>)
   823c2:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   823c4:	683b      	ldr	r3, [r7, #0]
   823c6:	461a      	mov	r2, r3
   823c8:	2100      	movs	r1, #0
   823ca:	2001      	movs	r0, #1
   823cc:	4b10      	ldr	r3, [pc, #64]	; (82410 <print_menu_main+0x60>)
   823ce:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   823d0:	687b      	ldr	r3, [r7, #4]
   823d2:	461a      	mov	r2, r3
   823d4:	2100      	movs	r1, #0
   823d6:	2002      	movs	r0, #2
   823d8:	4b0d      	ldr	r3, [pc, #52]	; (82410 <print_menu_main+0x60>)
   823da:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   823dc:	68bb      	ldr	r3, [r7, #8]
   823de:	461a      	mov	r2, r3
   823e0:	2100      	movs	r1, #0
   823e2:	2003      	movs	r0, #3
   823e4:	4b0a      	ldr	r3, [pc, #40]	; (82410 <print_menu_main+0x60>)
   823e6:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   823e8:	68fb      	ldr	r3, [r7, #12]
   823ea:	461a      	mov	r2, r3
   823ec:	2100      	movs	r1, #0
   823ee:	2004      	movs	r0, #4
   823f0:	4b07      	ldr	r3, [pc, #28]	; (82410 <print_menu_main+0x60>)
   823f2:	4798      	blx	r3
    print_cursor(&menu_info.main);
   823f4:	4807      	ldr	r0, [pc, #28]	; (82414 <print_menu_main+0x64>)
   823f6:	4b08      	ldr	r3, [pc, #32]	; (82418 <print_menu_main+0x68>)
   823f8:	4798      	blx	r3
    update_battery(1);
   823fa:	2001      	movs	r0, #1
   823fc:	4b07      	ldr	r3, [pc, #28]	; (8241c <print_menu_main+0x6c>)
   823fe:	4798      	blx	r3
}
   82400:	bf00      	nop
   82402:	3714      	adds	r7, #20
   82404:	46bd      	mov	sp, r7
   82406:	bd90      	pop	{r4, r7, pc}
   82408:	00089414 	.word	0x00089414
   8240c:	0008162d 	.word	0x0008162d
   82410:	0008164d 	.word	0x0008164d
   82414:	20070190 	.word	0x20070190
   82418:	000824f1 	.word	0x000824f1
   8241c:	00082f8d 	.word	0x00082f8d

00082420 <print_menu_sensors>:

static void print_menu_sensors(void)
{
   82420:	b590      	push	{r4, r7, lr}
   82422:	b085      	sub	sp, #20
   82424:	af00      	add	r7, sp, #0
    const char *text[4] = {" Ball", " Compass", " Line", " "};
   82426:	4b13      	ldr	r3, [pc, #76]	; (82474 <print_menu_sensors+0x54>)
   82428:	463c      	mov	r4, r7
   8242a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   8242c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   82430:	4b11      	ldr	r3, [pc, #68]	; (82478 <print_menu_sensors+0x58>)
   82432:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   82434:	683b      	ldr	r3, [r7, #0]
   82436:	461a      	mov	r2, r3
   82438:	2100      	movs	r1, #0
   8243a:	2001      	movs	r0, #1
   8243c:	4b0f      	ldr	r3, [pc, #60]	; (8247c <print_menu_sensors+0x5c>)
   8243e:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   82440:	687b      	ldr	r3, [r7, #4]
   82442:	461a      	mov	r2, r3
   82444:	2100      	movs	r1, #0
   82446:	2002      	movs	r0, #2
   82448:	4b0c      	ldr	r3, [pc, #48]	; (8247c <print_menu_sensors+0x5c>)
   8244a:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   8244c:	68bb      	ldr	r3, [r7, #8]
   8244e:	461a      	mov	r2, r3
   82450:	2100      	movs	r1, #0
   82452:	2003      	movs	r0, #3
   82454:	4b09      	ldr	r3, [pc, #36]	; (8247c <print_menu_sensors+0x5c>)
   82456:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   82458:	68fb      	ldr	r3, [r7, #12]
   8245a:	461a      	mov	r2, r3
   8245c:	2100      	movs	r1, #0
   8245e:	2004      	movs	r0, #4
   82460:	4b06      	ldr	r3, [pc, #24]	; (8247c <print_menu_sensors+0x5c>)
   82462:	4798      	blx	r3
    print_cursor(&menu_info.sensors);
   82464:	4806      	ldr	r0, [pc, #24]	; (82480 <print_menu_sensors+0x60>)
   82466:	4b07      	ldr	r3, [pc, #28]	; (82484 <print_menu_sensors+0x64>)
   82468:	4798      	blx	r3
}
   8246a:	bf00      	nop
   8246c:	3714      	adds	r7, #20
   8246e:	46bd      	mov	sp, r7
   82470:	bd90      	pop	{r4, r7, pc}
   82472:	bf00      	nop
   82474:	00089444 	.word	0x00089444
   82478:	0008162d 	.word	0x0008162d
   8247c:	0008164d 	.word	0x0008164d
   82480:	20070194 	.word	0x20070194
   82484:	000824f1 	.word	0x000824f1

00082488 <print_menu_settings>:

static void print_menu_settings(void)
{
   82488:	b590      	push	{r4, r7, lr}
   8248a:	b085      	sub	sp, #20
   8248c:	af00      	add	r7, sp, #0
    const char *text[4] = {" ", " ", " ", " "};
   8248e:	4b13      	ldr	r3, [pc, #76]	; (824dc <print_menu_settings+0x54>)
   82490:	463c      	mov	r4, r7
   82492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   82494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   82498:	4b11      	ldr	r3, [pc, #68]	; (824e0 <print_menu_settings+0x58>)
   8249a:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   8249c:	683b      	ldr	r3, [r7, #0]
   8249e:	461a      	mov	r2, r3
   824a0:	2100      	movs	r1, #0
   824a2:	2001      	movs	r0, #1
   824a4:	4b0f      	ldr	r3, [pc, #60]	; (824e4 <print_menu_settings+0x5c>)
   824a6:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   824a8:	687b      	ldr	r3, [r7, #4]
   824aa:	461a      	mov	r2, r3
   824ac:	2100      	movs	r1, #0
   824ae:	2002      	movs	r0, #2
   824b0:	4b0c      	ldr	r3, [pc, #48]	; (824e4 <print_menu_settings+0x5c>)
   824b2:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   824b4:	68bb      	ldr	r3, [r7, #8]
   824b6:	461a      	mov	r2, r3
   824b8:	2100      	movs	r1, #0
   824ba:	2003      	movs	r0, #3
   824bc:	4b09      	ldr	r3, [pc, #36]	; (824e4 <print_menu_settings+0x5c>)
   824be:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   824c0:	68fb      	ldr	r3, [r7, #12]
   824c2:	461a      	mov	r2, r3
   824c4:	2100      	movs	r1, #0
   824c6:	2004      	movs	r0, #4
   824c8:	4b06      	ldr	r3, [pc, #24]	; (824e4 <print_menu_settings+0x5c>)
   824ca:	4798      	blx	r3
    print_cursor(&menu_info.settings);
   824cc:	4806      	ldr	r0, [pc, #24]	; (824e8 <print_menu_settings+0x60>)
   824ce:	4b07      	ldr	r3, [pc, #28]	; (824ec <print_menu_settings+0x64>)
   824d0:	4798      	blx	r3
}
   824d2:	bf00      	nop
   824d4:	3714      	adds	r7, #20
   824d6:	46bd      	mov	sp, r7
   824d8:	bd90      	pop	{r4, r7, pc}
   824da:	bf00      	nop
   824dc:	00089454 	.word	0x00089454
   824e0:	0008162d 	.word	0x0008162d
   824e4:	0008164d 	.word	0x0008164d
   824e8:	20070198 	.word	0x20070198
   824ec:	000824f1 	.word	0x000824f1

000824f0 <print_cursor>:

static void print_cursor(menu_info_t *info)
{
   824f0:	b580      	push	{r7, lr}
   824f2:	b082      	sub	sp, #8
   824f4:	af00      	add	r7, sp, #0
   824f6:	6078      	str	r0, [r7, #4]
    lcd_print_s(info->prev_cursor_line, 0, " ");
   824f8:	687b      	ldr	r3, [r7, #4]
   824fa:	785b      	ldrb	r3, [r3, #1]
   824fc:	4a09      	ldr	r2, [pc, #36]	; (82524 <print_cursor+0x34>)
   824fe:	2100      	movs	r1, #0
   82500:	4618      	mov	r0, r3
   82502:	4b09      	ldr	r3, [pc, #36]	; (82528 <print_cursor+0x38>)
   82504:	4798      	blx	r3
    lcd_print_s(info->act_cursor_line, 0, ">");
   82506:	687b      	ldr	r3, [r7, #4]
   82508:	781b      	ldrb	r3, [r3, #0]
   8250a:	4a08      	ldr	r2, [pc, #32]	; (8252c <print_cursor+0x3c>)
   8250c:	2100      	movs	r1, #0
   8250e:	4618      	mov	r0, r3
   82510:	4b05      	ldr	r3, [pc, #20]	; (82528 <print_cursor+0x38>)
   82512:	4798      	blx	r3
    
    info->prev_cursor_line = info->act_cursor_line;
   82514:	687b      	ldr	r3, [r7, #4]
   82516:	781a      	ldrb	r2, [r3, #0]
   82518:	687b      	ldr	r3, [r7, #4]
   8251a:	705a      	strb	r2, [r3, #1]
}
   8251c:	bf00      	nop
   8251e:	3708      	adds	r7, #8
   82520:	46bd      	mov	sp, r7
   82522:	bd80      	pop	{r7, pc}
   82524:	00089440 	.word	0x00089440
   82528:	0008164d 	.word	0x0008164d
   8252c:	00089464 	.word	0x00089464

00082530 <button_events>:

event_t button_events(void)
{
   82530:	b580      	push	{r7, lr}
   82532:	b082      	sub	sp, #8
   82534:	af00      	add	r7, sp, #0
    event_t nextEvent = EVENT_NO_EVENT;
   82536:	2300      	movs	r3, #0
   82538:	71fb      	strb	r3, [r7, #7]

    if (getTicks() >= (ticks_button_update + 30))
   8253a:	4b75      	ldr	r3, [pc, #468]	; (82710 <button_events+0x1e0>)
   8253c:	4798      	blx	r3
   8253e:	4602      	mov	r2, r0
   82540:	4b74      	ldr	r3, [pc, #464]	; (82714 <button_events+0x1e4>)
   82542:	681b      	ldr	r3, [r3, #0]
   82544:	331e      	adds	r3, #30
   82546:	429a      	cmp	r2, r3
   82548:	f0c0 80dd 	bcc.w	82706 <button_events+0x1d6>
    {
        ticks_button_update = getTicks();
   8254c:	4b70      	ldr	r3, [pc, #448]	; (82710 <button_events+0x1e0>)
   8254e:	4798      	blx	r3
   82550:	4602      	mov	r2, r0
   82552:	4b70      	ldr	r3, [pc, #448]	; (82714 <button_events+0x1e4>)
   82554:	601a      	str	r2, [r3, #0]
        
        pb_up_act = ioport_get_pin_level(PB_UP);
   82556:	2060      	movs	r0, #96	; 0x60
   82558:	4b6f      	ldr	r3, [pc, #444]	; (82718 <button_events+0x1e8>)
   8255a:	4798      	blx	r3
   8255c:	4603      	mov	r3, r0
   8255e:	461a      	mov	r2, r3
   82560:	4b6e      	ldr	r3, [pc, #440]	; (8271c <button_events+0x1ec>)
   82562:	701a      	strb	r2, [r3, #0]
        pb_left_act = ioport_get_pin_level(PB_LEFT);
   82564:	2061      	movs	r0, #97	; 0x61
   82566:	4b6c      	ldr	r3, [pc, #432]	; (82718 <button_events+0x1e8>)
   82568:	4798      	blx	r3
   8256a:	4603      	mov	r3, r0
   8256c:	461a      	mov	r2, r3
   8256e:	4b6c      	ldr	r3, [pc, #432]	; (82720 <button_events+0x1f0>)
   82570:	701a      	strb	r2, [r3, #0]
        pb_mid_act = ioport_get_pin_level(PB_MID);
   82572:	2062      	movs	r0, #98	; 0x62
   82574:	4b68      	ldr	r3, [pc, #416]	; (82718 <button_events+0x1e8>)
   82576:	4798      	blx	r3
   82578:	4603      	mov	r3, r0
   8257a:	461a      	mov	r2, r3
   8257c:	4b69      	ldr	r3, [pc, #420]	; (82724 <button_events+0x1f4>)
   8257e:	701a      	strb	r2, [r3, #0]
        pb_right_act = ioport_get_pin_level(PB_RIGHT);
   82580:	2063      	movs	r0, #99	; 0x63
   82582:	4b65      	ldr	r3, [pc, #404]	; (82718 <button_events+0x1e8>)
   82584:	4798      	blx	r3
   82586:	4603      	mov	r3, r0
   82588:	461a      	mov	r2, r3
   8258a:	4b67      	ldr	r3, [pc, #412]	; (82728 <button_events+0x1f8>)
   8258c:	701a      	strb	r2, [r3, #0]
        pb_down_act = ioport_get_pin_level(PB_DOWN);
   8258e:	2064      	movs	r0, #100	; 0x64
   82590:	4b61      	ldr	r3, [pc, #388]	; (82718 <button_events+0x1e8>)
   82592:	4798      	blx	r3
   82594:	4603      	mov	r3, r0
   82596:	461a      	mov	r2, r3
   82598:	4b64      	ldr	r3, [pc, #400]	; (8272c <button_events+0x1fc>)
   8259a:	701a      	strb	r2, [r3, #0]
        pb_return_act = ioport_get_pin_level(PB_RETURN);
   8259c:	2065      	movs	r0, #101	; 0x65
   8259e:	4b5e      	ldr	r3, [pc, #376]	; (82718 <button_events+0x1e8>)
   825a0:	4798      	blx	r3
   825a2:	4603      	mov	r3, r0
   825a4:	461a      	mov	r2, r3
   825a6:	4b62      	ldr	r3, [pc, #392]	; (82730 <button_events+0x200>)
   825a8:	701a      	strb	r2, [r3, #0]
        
        if (pb_up_act != pb_up_prev && pb_up_act == 0)
   825aa:	4b5c      	ldr	r3, [pc, #368]	; (8271c <button_events+0x1ec>)
   825ac:	781a      	ldrb	r2, [r3, #0]
   825ae:	4b61      	ldr	r3, [pc, #388]	; (82734 <button_events+0x204>)
   825b0:	781b      	ldrb	r3, [r3, #0]
   825b2:	429a      	cmp	r2, r3
   825b4:	d006      	beq.n	825c4 <button_events+0x94>
   825b6:	4b59      	ldr	r3, [pc, #356]	; (8271c <button_events+0x1ec>)
   825b8:	781b      	ldrb	r3, [r3, #0]
   825ba:	2b00      	cmp	r3, #0
   825bc:	d102      	bne.n	825c4 <button_events+0x94>
        {
            nextEvent = EVENT_BUTTON_UP_P;
   825be:	2301      	movs	r3, #1
   825c0:	71fb      	strb	r3, [r7, #7]
   825c2:	e00b      	b.n	825dc <button_events+0xac>
        }
        else if (pb_up_act != pb_up_prev && pb_up_act == 1)
   825c4:	4b55      	ldr	r3, [pc, #340]	; (8271c <button_events+0x1ec>)
   825c6:	781a      	ldrb	r2, [r3, #0]
   825c8:	4b5a      	ldr	r3, [pc, #360]	; (82734 <button_events+0x204>)
   825ca:	781b      	ldrb	r3, [r3, #0]
   825cc:	429a      	cmp	r2, r3
   825ce:	d005      	beq.n	825dc <button_events+0xac>
   825d0:	4b52      	ldr	r3, [pc, #328]	; (8271c <button_events+0x1ec>)
   825d2:	781b      	ldrb	r3, [r3, #0]
   825d4:	2b01      	cmp	r3, #1
   825d6:	d101      	bne.n	825dc <button_events+0xac>
        {
            nextEvent = EVENT_BUTTON_UP_R;
   825d8:	2303      	movs	r3, #3
   825da:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_up_act == pb_up_prev && pb_up_act == 0)
        {
            nextEvent = EVENT_BUTTON_UP_H;
        }*/
        
        if (pb_left_act != pb_left_prev && pb_left_act == 0)
   825dc:	4b50      	ldr	r3, [pc, #320]	; (82720 <button_events+0x1f0>)
   825de:	781a      	ldrb	r2, [r3, #0]
   825e0:	4b55      	ldr	r3, [pc, #340]	; (82738 <button_events+0x208>)
   825e2:	781b      	ldrb	r3, [r3, #0]
   825e4:	429a      	cmp	r2, r3
   825e6:	d006      	beq.n	825f6 <button_events+0xc6>
   825e8:	4b4d      	ldr	r3, [pc, #308]	; (82720 <button_events+0x1f0>)
   825ea:	781b      	ldrb	r3, [r3, #0]
   825ec:	2b00      	cmp	r3, #0
   825ee:	d102      	bne.n	825f6 <button_events+0xc6>
        {
            nextEvent = EVENT_BUTTON_LEFT_P;
   825f0:	2304      	movs	r3, #4
   825f2:	71fb      	strb	r3, [r7, #7]
   825f4:	e00b      	b.n	8260e <button_events+0xde>
        }
        else if (pb_left_act != pb_left_prev && pb_left_act == 1)
   825f6:	4b4a      	ldr	r3, [pc, #296]	; (82720 <button_events+0x1f0>)
   825f8:	781a      	ldrb	r2, [r3, #0]
   825fa:	4b4f      	ldr	r3, [pc, #316]	; (82738 <button_events+0x208>)
   825fc:	781b      	ldrb	r3, [r3, #0]
   825fe:	429a      	cmp	r2, r3
   82600:	d005      	beq.n	8260e <button_events+0xde>
   82602:	4b47      	ldr	r3, [pc, #284]	; (82720 <button_events+0x1f0>)
   82604:	781b      	ldrb	r3, [r3, #0]
   82606:	2b01      	cmp	r3, #1
   82608:	d101      	bne.n	8260e <button_events+0xde>
        {
            nextEvent = EVENT_BUTTON_LEFT_R;
   8260a:	2306      	movs	r3, #6
   8260c:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_left_act == pb_left_prev && pb_left_act == 0)
        {
            nextEvent = EVENT_BUTTON_LEFT_H;
        }*/
        
        if (pb_mid_act != pb_mid_prev && pb_mid_act == 0)
   8260e:	4b45      	ldr	r3, [pc, #276]	; (82724 <button_events+0x1f4>)
   82610:	781a      	ldrb	r2, [r3, #0]
   82612:	4b4a      	ldr	r3, [pc, #296]	; (8273c <button_events+0x20c>)
   82614:	781b      	ldrb	r3, [r3, #0]
   82616:	429a      	cmp	r2, r3
   82618:	d006      	beq.n	82628 <button_events+0xf8>
   8261a:	4b42      	ldr	r3, [pc, #264]	; (82724 <button_events+0x1f4>)
   8261c:	781b      	ldrb	r3, [r3, #0]
   8261e:	2b00      	cmp	r3, #0
   82620:	d102      	bne.n	82628 <button_events+0xf8>
        {
            nextEvent = EVENT_BUTTON_MID_P;
   82622:	2307      	movs	r3, #7
   82624:	71fb      	strb	r3, [r7, #7]
   82626:	e00b      	b.n	82640 <button_events+0x110>
        }
        else if (pb_mid_act != pb_mid_prev && pb_mid_act == 1)
   82628:	4b3e      	ldr	r3, [pc, #248]	; (82724 <button_events+0x1f4>)
   8262a:	781a      	ldrb	r2, [r3, #0]
   8262c:	4b43      	ldr	r3, [pc, #268]	; (8273c <button_events+0x20c>)
   8262e:	781b      	ldrb	r3, [r3, #0]
   82630:	429a      	cmp	r2, r3
   82632:	d005      	beq.n	82640 <button_events+0x110>
   82634:	4b3b      	ldr	r3, [pc, #236]	; (82724 <button_events+0x1f4>)
   82636:	781b      	ldrb	r3, [r3, #0]
   82638:	2b01      	cmp	r3, #1
   8263a:	d101      	bne.n	82640 <button_events+0x110>
        {
            nextEvent = EVENT_BUTTON_MID_R;
   8263c:	2309      	movs	r3, #9
   8263e:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_mid_act == pb_mid_prev && pb_mid_act == 0)
        {
            nextEvent = EVENT_BUTTON_MID_H;
        }*/
        
        if (pb_right_act != pb_right_prev && pb_right_act == 0)
   82640:	4b39      	ldr	r3, [pc, #228]	; (82728 <button_events+0x1f8>)
   82642:	781a      	ldrb	r2, [r3, #0]
   82644:	4b3e      	ldr	r3, [pc, #248]	; (82740 <button_events+0x210>)
   82646:	781b      	ldrb	r3, [r3, #0]
   82648:	429a      	cmp	r2, r3
   8264a:	d006      	beq.n	8265a <button_events+0x12a>
   8264c:	4b36      	ldr	r3, [pc, #216]	; (82728 <button_events+0x1f8>)
   8264e:	781b      	ldrb	r3, [r3, #0]
   82650:	2b00      	cmp	r3, #0
   82652:	d102      	bne.n	8265a <button_events+0x12a>
        {
            nextEvent = EVENT_BUTTON_RIGHT_P;
   82654:	230a      	movs	r3, #10
   82656:	71fb      	strb	r3, [r7, #7]
   82658:	e00b      	b.n	82672 <button_events+0x142>
        }
        else if (pb_right_act != pb_right_prev && pb_right_act == 1)
   8265a:	4b33      	ldr	r3, [pc, #204]	; (82728 <button_events+0x1f8>)
   8265c:	781a      	ldrb	r2, [r3, #0]
   8265e:	4b38      	ldr	r3, [pc, #224]	; (82740 <button_events+0x210>)
   82660:	781b      	ldrb	r3, [r3, #0]
   82662:	429a      	cmp	r2, r3
   82664:	d005      	beq.n	82672 <button_events+0x142>
   82666:	4b30      	ldr	r3, [pc, #192]	; (82728 <button_events+0x1f8>)
   82668:	781b      	ldrb	r3, [r3, #0]
   8266a:	2b01      	cmp	r3, #1
   8266c:	d101      	bne.n	82672 <button_events+0x142>
        {
            nextEvent = EVENT_BUTTON_RIGHT_R;
   8266e:	230c      	movs	r3, #12
   82670:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_right_act == pb_right_prev && pb_right_act == 0)
        {
            nextEvent = EVENT_BUTTON_RIGHT_H;
        }*/
        
        if (pb_down_act != pb_down_prev && pb_down_act == 0)
   82672:	4b2e      	ldr	r3, [pc, #184]	; (8272c <button_events+0x1fc>)
   82674:	781a      	ldrb	r2, [r3, #0]
   82676:	4b33      	ldr	r3, [pc, #204]	; (82744 <button_events+0x214>)
   82678:	781b      	ldrb	r3, [r3, #0]
   8267a:	429a      	cmp	r2, r3
   8267c:	d006      	beq.n	8268c <button_events+0x15c>
   8267e:	4b2b      	ldr	r3, [pc, #172]	; (8272c <button_events+0x1fc>)
   82680:	781b      	ldrb	r3, [r3, #0]
   82682:	2b00      	cmp	r3, #0
   82684:	d102      	bne.n	8268c <button_events+0x15c>
        {
            nextEvent = EVENT_BUTTON_DOWN_P;
   82686:	230d      	movs	r3, #13
   82688:	71fb      	strb	r3, [r7, #7]
   8268a:	e00b      	b.n	826a4 <button_events+0x174>
        }
        else if (pb_down_act != pb_down_prev && pb_down_act == 1)
   8268c:	4b27      	ldr	r3, [pc, #156]	; (8272c <button_events+0x1fc>)
   8268e:	781a      	ldrb	r2, [r3, #0]
   82690:	4b2c      	ldr	r3, [pc, #176]	; (82744 <button_events+0x214>)
   82692:	781b      	ldrb	r3, [r3, #0]
   82694:	429a      	cmp	r2, r3
   82696:	d005      	beq.n	826a4 <button_events+0x174>
   82698:	4b24      	ldr	r3, [pc, #144]	; (8272c <button_events+0x1fc>)
   8269a:	781b      	ldrb	r3, [r3, #0]
   8269c:	2b01      	cmp	r3, #1
   8269e:	d101      	bne.n	826a4 <button_events+0x174>
        {
            nextEvent = EVENT_BUTTON_DOWN_R;
   826a0:	230f      	movs	r3, #15
   826a2:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_down_act == pb_down_prev && pb_down_act == 0)
        {
            nextEvent = EVENT_BUTTON_DOWN_H;
        }*/
        
        if (pb_return_act != pb_return_prev && pb_return_act == 0)
   826a4:	4b22      	ldr	r3, [pc, #136]	; (82730 <button_events+0x200>)
   826a6:	781a      	ldrb	r2, [r3, #0]
   826a8:	4b27      	ldr	r3, [pc, #156]	; (82748 <button_events+0x218>)
   826aa:	781b      	ldrb	r3, [r3, #0]
   826ac:	429a      	cmp	r2, r3
   826ae:	d006      	beq.n	826be <button_events+0x18e>
   826b0:	4b1f      	ldr	r3, [pc, #124]	; (82730 <button_events+0x200>)
   826b2:	781b      	ldrb	r3, [r3, #0]
   826b4:	2b00      	cmp	r3, #0
   826b6:	d102      	bne.n	826be <button_events+0x18e>
        {
            nextEvent = EVENT_BUTTON_RETURN_P;
   826b8:	2310      	movs	r3, #16
   826ba:	71fb      	strb	r3, [r7, #7]
   826bc:	e00b      	b.n	826d6 <button_events+0x1a6>
        }
        else if (pb_return_act != pb_return_prev && pb_return_act == 1)
   826be:	4b1c      	ldr	r3, [pc, #112]	; (82730 <button_events+0x200>)
   826c0:	781a      	ldrb	r2, [r3, #0]
   826c2:	4b21      	ldr	r3, [pc, #132]	; (82748 <button_events+0x218>)
   826c4:	781b      	ldrb	r3, [r3, #0]
   826c6:	429a      	cmp	r2, r3
   826c8:	d005      	beq.n	826d6 <button_events+0x1a6>
   826ca:	4b19      	ldr	r3, [pc, #100]	; (82730 <button_events+0x200>)
   826cc:	781b      	ldrb	r3, [r3, #0]
   826ce:	2b01      	cmp	r3, #1
   826d0:	d101      	bne.n	826d6 <button_events+0x1a6>
        {
            nextEvent = EVENT_BUTTON_RETURN_R;
   826d2:	2312      	movs	r3, #18
   826d4:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_return_act == pb_up_prev && pb_return_act == 0)
        {
            nextEvent = EVENT_BUTTON_RETURN_H;
        }*/
        
        pb_up_prev = pb_up_act;
   826d6:	4b11      	ldr	r3, [pc, #68]	; (8271c <button_events+0x1ec>)
   826d8:	781a      	ldrb	r2, [r3, #0]
   826da:	4b16      	ldr	r3, [pc, #88]	; (82734 <button_events+0x204>)
   826dc:	701a      	strb	r2, [r3, #0]
        pb_left_prev = pb_left_act;
   826de:	4b10      	ldr	r3, [pc, #64]	; (82720 <button_events+0x1f0>)
   826e0:	781a      	ldrb	r2, [r3, #0]
   826e2:	4b15      	ldr	r3, [pc, #84]	; (82738 <button_events+0x208>)
   826e4:	701a      	strb	r2, [r3, #0]
        pb_mid_prev = pb_mid_act;
   826e6:	4b0f      	ldr	r3, [pc, #60]	; (82724 <button_events+0x1f4>)
   826e8:	781a      	ldrb	r2, [r3, #0]
   826ea:	4b14      	ldr	r3, [pc, #80]	; (8273c <button_events+0x20c>)
   826ec:	701a      	strb	r2, [r3, #0]
        pb_right_prev = pb_right_act;
   826ee:	4b0e      	ldr	r3, [pc, #56]	; (82728 <button_events+0x1f8>)
   826f0:	781a      	ldrb	r2, [r3, #0]
   826f2:	4b13      	ldr	r3, [pc, #76]	; (82740 <button_events+0x210>)
   826f4:	701a      	strb	r2, [r3, #0]
        pb_down_prev = pb_down_act;
   826f6:	4b0d      	ldr	r3, [pc, #52]	; (8272c <button_events+0x1fc>)
   826f8:	781a      	ldrb	r2, [r3, #0]
   826fa:	4b12      	ldr	r3, [pc, #72]	; (82744 <button_events+0x214>)
   826fc:	701a      	strb	r2, [r3, #0]
        pb_return_prev = pb_return_act;
   826fe:	4b0c      	ldr	r3, [pc, #48]	; (82730 <button_events+0x200>)
   82700:	781a      	ldrb	r2, [r3, #0]
   82702:	4b11      	ldr	r3, [pc, #68]	; (82748 <button_events+0x218>)
   82704:	701a      	strb	r2, [r3, #0]
    }

    return nextEvent;
   82706:	79fb      	ldrb	r3, [r7, #7]
}
   82708:	4618      	mov	r0, r3
   8270a:	3708      	adds	r7, #8
   8270c:	46bd      	mov	sp, r7
   8270e:	bd80      	pop	{r7, pc}
   82710:	00082f05 	.word	0x00082f05
   82714:	20070e44 	.word	0x20070e44
   82718:	00081b53 	.word	0x00081b53
   8271c:	20070e6d 	.word	0x20070e6d
   82720:	20070e54 	.word	0x20070e54
   82724:	20070e6c 	.word	0x20070e6c
   82728:	20070e6e 	.word	0x20070e6e
   8272c:	20070e50 	.word	0x20070e50
   82730:	20070e4c 	.word	0x20070e4c
   82734:	20070e51 	.word	0x20070e51
   82738:	20070e4f 	.word	0x20070e4f
   8273c:	20070e4d 	.word	0x20070e4d
   82740:	20070e52 	.word	0x20070e52
   82744:	20070e4e 	.word	0x20070e4e
   82748:	20070e53 	.word	0x20070e53

0008274c <NVIC_EnableIRQ>:
{
   8274c:	b480      	push	{r7}
   8274e:	b083      	sub	sp, #12
   82750:	af00      	add	r7, sp, #0
   82752:	4603      	mov	r3, r0
   82754:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82756:	4908      	ldr	r1, [pc, #32]	; (82778 <NVIC_EnableIRQ+0x2c>)
   82758:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8275c:	095b      	lsrs	r3, r3, #5
   8275e:	79fa      	ldrb	r2, [r7, #7]
   82760:	f002 021f 	and.w	r2, r2, #31
   82764:	2001      	movs	r0, #1
   82766:	fa00 f202 	lsl.w	r2, r0, r2
   8276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8276e:	bf00      	nop
   82770:	370c      	adds	r7, #12
   82772:	46bd      	mov	sp, r7
   82774:	bc80      	pop	{r7}
   82776:	4770      	bx	lr
   82778:	e000e100 	.word	0xe000e100

0008277c <NVIC_DisableIRQ>:
{
   8277c:	b480      	push	{r7}
   8277e:	b083      	sub	sp, #12
   82780:	af00      	add	r7, sp, #0
   82782:	4603      	mov	r3, r0
   82784:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82786:	4909      	ldr	r1, [pc, #36]	; (827ac <NVIC_DisableIRQ+0x30>)
   82788:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8278c:	095b      	lsrs	r3, r3, #5
   8278e:	79fa      	ldrb	r2, [r7, #7]
   82790:	f002 021f 	and.w	r2, r2, #31
   82794:	2001      	movs	r0, #1
   82796:	fa00 f202 	lsl.w	r2, r0, r2
   8279a:	3320      	adds	r3, #32
   8279c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   827a0:	bf00      	nop
   827a2:	370c      	adds	r7, #12
   827a4:	46bd      	mov	sp, r7
   827a6:	bc80      	pop	{r7}
   827a8:	4770      	bx	lr
   827aa:	bf00      	nop
   827ac:	e000e100 	.word	0xe000e100

000827b0 <NVIC_ClearPendingIRQ>:
{
   827b0:	b480      	push	{r7}
   827b2:	b083      	sub	sp, #12
   827b4:	af00      	add	r7, sp, #0
   827b6:	4603      	mov	r3, r0
   827b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   827ba:	4909      	ldr	r1, [pc, #36]	; (827e0 <NVIC_ClearPendingIRQ+0x30>)
   827bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   827c0:	095b      	lsrs	r3, r3, #5
   827c2:	79fa      	ldrb	r2, [r7, #7]
   827c4:	f002 021f 	and.w	r2, r2, #31
   827c8:	2001      	movs	r0, #1
   827ca:	fa00 f202 	lsl.w	r2, r0, r2
   827ce:	3360      	adds	r3, #96	; 0x60
   827d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   827d4:	bf00      	nop
   827d6:	370c      	adds	r7, #12
   827d8:	46bd      	mov	sp, r7
   827da:	bc80      	pop	{r7}
   827dc:	4770      	bx	lr
   827de:	bf00      	nop
   827e0:	e000e100 	.word	0xe000e100

000827e4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   827e4:	b480      	push	{r7}
   827e6:	b083      	sub	sp, #12
   827e8:	af00      	add	r7, sp, #0
   827ea:	4603      	mov	r3, r0
   827ec:	6039      	str	r1, [r7, #0]
   827ee:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   827f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   827f4:	2b00      	cmp	r3, #0
   827f6:	da0b      	bge.n	82810 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   827f8:	490d      	ldr	r1, [pc, #52]	; (82830 <NVIC_SetPriority+0x4c>)
   827fa:	79fb      	ldrb	r3, [r7, #7]
   827fc:	f003 030f 	and.w	r3, r3, #15
   82800:	3b04      	subs	r3, #4
   82802:	683a      	ldr	r2, [r7, #0]
   82804:	b2d2      	uxtb	r2, r2
   82806:	0112      	lsls	r2, r2, #4
   82808:	b2d2      	uxtb	r2, r2
   8280a:	440b      	add	r3, r1
   8280c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   8280e:	e009      	b.n	82824 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82810:	4908      	ldr	r1, [pc, #32]	; (82834 <NVIC_SetPriority+0x50>)
   82812:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82816:	683a      	ldr	r2, [r7, #0]
   82818:	b2d2      	uxtb	r2, r2
   8281a:	0112      	lsls	r2, r2, #4
   8281c:	b2d2      	uxtb	r2, r2
   8281e:	440b      	add	r3, r1
   82820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   82824:	bf00      	nop
   82826:	370c      	adds	r7, #12
   82828:	46bd      	mov	sp, r7
   8282a:	bc80      	pop	{r7}
   8282c:	4770      	bx	lr
   8282e:	bf00      	nop
   82830:	e000ed00 	.word	0xe000ed00
   82834:	e000e100 	.word	0xe000e100

00082838 <sysclk_enable_peripheral_clock>:
{
   82838:	b580      	push	{r7, lr}
   8283a:	b082      	sub	sp, #8
   8283c:	af00      	add	r7, sp, #0
   8283e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82840:	6878      	ldr	r0, [r7, #4]
   82842:	4b03      	ldr	r3, [pc, #12]	; (82850 <sysclk_enable_peripheral_clock+0x18>)
   82844:	4798      	blx	r3
}
   82846:	bf00      	nop
   82848:	3708      	adds	r7, #8
   8284a:	46bd      	mov	sp, r7
   8284c:	bd80      	pop	{r7, pc}
   8284e:	bf00      	nop
   82850:	000838c5 	.word	0x000838c5

00082854 <ioport_set_pin_level>:
{
   82854:	b480      	push	{r7}
   82856:	b08b      	sub	sp, #44	; 0x2c
   82858:	af00      	add	r7, sp, #0
   8285a:	6078      	str	r0, [r7, #4]
   8285c:	460b      	mov	r3, r1
   8285e:	70fb      	strb	r3, [r7, #3]
   82860:	687b      	ldr	r3, [r7, #4]
   82862:	627b      	str	r3, [r7, #36]	; 0x24
   82864:	78fb      	ldrb	r3, [r7, #3]
   82866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   8286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8286c:	61fb      	str	r3, [r7, #28]
   8286e:	69fb      	ldr	r3, [r7, #28]
   82870:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82872:	69bb      	ldr	r3, [r7, #24]
   82874:	095b      	lsrs	r3, r3, #5
   82876:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82878:	697b      	ldr	r3, [r7, #20]
   8287a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8287e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82882:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82884:	613b      	str	r3, [r7, #16]
	if (level) {
   82886:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8288a:	2b00      	cmp	r3, #0
   8288c:	d009      	beq.n	828a2 <ioport_set_pin_level+0x4e>
   8288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82890:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82892:	68fb      	ldr	r3, [r7, #12]
   82894:	f003 031f 	and.w	r3, r3, #31
   82898:	2201      	movs	r2, #1
   8289a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8289c:	693b      	ldr	r3, [r7, #16]
   8289e:	631a      	str	r2, [r3, #48]	; 0x30
}
   828a0:	e008      	b.n	828b4 <ioport_set_pin_level+0x60>
   828a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   828a4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   828a6:	68bb      	ldr	r3, [r7, #8]
   828a8:	f003 031f 	and.w	r3, r3, #31
   828ac:	2201      	movs	r2, #1
   828ae:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   828b0:	693b      	ldr	r3, [r7, #16]
   828b2:	635a      	str	r2, [r3, #52]	; 0x34
   828b4:	bf00      	nop
   828b6:	372c      	adds	r7, #44	; 0x2c
   828b8:	46bd      	mov	sp, r7
   828ba:	bc80      	pop	{r7}
   828bc:	4770      	bx	lr

000828be <ioport_get_port_level>:
 * \return Logical levels of the specified pins from the read port, returned as
 * a mask.
 */
static inline ioport_port_mask_t ioport_get_port_level(ioport_pin_t port,
		ioport_port_mask_t mask)
{
   828be:	b480      	push	{r7}
   828c0:	b087      	sub	sp, #28
   828c2:	af00      	add	r7, sp, #0
   828c4:	6078      	str	r0, [r7, #4]
   828c6:	6039      	str	r1, [r7, #0]
   828c8:	687b      	ldr	r3, [r7, #4]
   828ca:	617b      	str	r3, [r7, #20]
   828cc:	683b      	ldr	r3, [r7, #0]
   828ce:	613b      	str	r3, [r7, #16]
   828d0:	697b      	ldr	r3, [r7, #20]
   828d2:	60fb      	str	r3, [r7, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   828d4:	68fb      	ldr	r3, [r7, #12]
   828d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   828da:	f203 7307 	addw	r3, r3, #1799	; 0x707
   828de:	025b      	lsls	r3, r3, #9
}

__always_inline static ioport_port_mask_t arch_ioport_get_port_level(
		ioport_port_t port, ioport_port_mask_t mask)
{
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
   828e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   828e2:	693b      	ldr	r3, [r7, #16]
   828e4:	4013      	ands	r3, r2
	return arch_ioport_get_port_level(port, mask);
   828e6:	bf00      	nop
}
   828e8:	4618      	mov	r0, r3
   828ea:	371c      	adds	r7, #28
   828ec:	46bd      	mov	sp, r7
   828ee:	bc80      	pop	{r7}
   828f0:	4770      	bx	lr
	...

000828f4 <motor_init>:
float CosinMA1 = -0.866025404f;
float CosinMA2 = 0.866025404f;
float CosinMA3 = 0.0f;

void motor_init(void)
{
   828f4:	b5b0      	push	{r4, r5, r7, lr}
   828f6:	af00      	add	r7, sp, #0
	/* Initialize PWM channel for MLeft */
  /* Period is left-aligned */
  g_pwm_channel_MLeft.alignment = PWM_ALIGN_LEFT;
   828f8:	4b5e      	ldr	r3, [pc, #376]	; (82a74 <motor_init+0x180>)
   828fa:	2200      	movs	r2, #0
   828fc:	811a      	strh	r2, [r3, #8]
  /* Output waveform starts at a low level */
  g_pwm_channel_MLeft.polarity = PWM_LOW;
   828fe:	4b5d      	ldr	r3, [pc, #372]	; (82a74 <motor_init+0x180>)
   82900:	2200      	movs	r2, #0
   82902:	729a      	strb	r2, [r3, #10]
  /* Use PWM clock A as source clock */
  g_pwm_channel_MLeft.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82904:	4b5b      	ldr	r3, [pc, #364]	; (82a74 <motor_init+0x180>)
   82906:	220b      	movs	r2, #11
   82908:	605a      	str	r2, [r3, #4]
  /* Period value of output waveform */
  g_pwm_channel_MLeft.ul_period = PERIOD_VALUE;
   8290a:	4b5a      	ldr	r3, [pc, #360]	; (82a74 <motor_init+0x180>)
   8290c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82910:	611a      	str	r2, [r3, #16]
  /* Duty cycle value of output waveform */
  g_pwm_channel_MLeft.ul_duty = INIT_DUTY_VALUE;
   82912:	4b58      	ldr	r3, [pc, #352]	; (82a74 <motor_init+0x180>)
   82914:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82918:	60da      	str	r2, [r3, #12]
  g_pwm_channel_MLeft.channel = MOTOR_LEFT;
   8291a:	4b56      	ldr	r3, [pc, #344]	; (82a74 <motor_init+0x180>)
   8291c:	2200      	movs	r2, #0
   8291e:	601a      	str	r2, [r3, #0]
  pwm_channel_init(PWM, &g_pwm_channel_MLeft);
   82920:	4954      	ldr	r1, [pc, #336]	; (82a74 <motor_init+0x180>)
   82922:	4855      	ldr	r0, [pc, #340]	; (82a78 <motor_init+0x184>)
   82924:	4b55      	ldr	r3, [pc, #340]	; (82a7c <motor_init+0x188>)
   82926:	4798      	blx	r3
	
	
  /* Initialize PWM channel for MRight */
  /* Period is left-aligned */
  g_pwm_channel_MRight.alignment = PWM_ALIGN_LEFT;
   82928:	4b55      	ldr	r3, [pc, #340]	; (82a80 <motor_init+0x18c>)
   8292a:	2200      	movs	r2, #0
   8292c:	811a      	strh	r2, [r3, #8]
  /* Output waveform starts at a low level */
  g_pwm_channel_MRight.polarity = PWM_LOW;
   8292e:	4b54      	ldr	r3, [pc, #336]	; (82a80 <motor_init+0x18c>)
   82930:	2200      	movs	r2, #0
   82932:	729a      	strb	r2, [r3, #10]
  /* Use PWM clock A as source clock */
  g_pwm_channel_MRight.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82934:	4b52      	ldr	r3, [pc, #328]	; (82a80 <motor_init+0x18c>)
   82936:	220b      	movs	r2, #11
   82938:	605a      	str	r2, [r3, #4]
  /* Period value of output waveform */
  g_pwm_channel_MRight.ul_period = PERIOD_VALUE;
   8293a:	4b51      	ldr	r3, [pc, #324]	; (82a80 <motor_init+0x18c>)
   8293c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82940:	611a      	str	r2, [r3, #16]
  /* Duty cycle value of output waveform */
  g_pwm_channel_MRight.ul_duty = INIT_DUTY_VALUE;
   82942:	4b4f      	ldr	r3, [pc, #316]	; (82a80 <motor_init+0x18c>)
   82944:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82948:	60da      	str	r2, [r3, #12]
  g_pwm_channel_MRight.channel = MOTOR_RIGHT;
   8294a:	4b4d      	ldr	r3, [pc, #308]	; (82a80 <motor_init+0x18c>)
   8294c:	2201      	movs	r2, #1
   8294e:	601a      	str	r2, [r3, #0]
  pwm_channel_init(PWM, &g_pwm_channel_MRight);
   82950:	494b      	ldr	r1, [pc, #300]	; (82a80 <motor_init+0x18c>)
   82952:	4849      	ldr	r0, [pc, #292]	; (82a78 <motor_init+0x184>)
   82954:	4b49      	ldr	r3, [pc, #292]	; (82a7c <motor_init+0x188>)
   82956:	4798      	blx	r3
	
	
  /* Initialize PWM channel for MBack */
  /* Period is left-aligned */
  g_pwm_channel_MRear.alignment = PWM_ALIGN_LEFT;
   82958:	4b4a      	ldr	r3, [pc, #296]	; (82a84 <motor_init+0x190>)
   8295a:	2200      	movs	r2, #0
   8295c:	811a      	strh	r2, [r3, #8]
  /* Output waveform starts at a low level */
  g_pwm_channel_MRear.polarity = PWM_LOW;
   8295e:	4b49      	ldr	r3, [pc, #292]	; (82a84 <motor_init+0x190>)
   82960:	2200      	movs	r2, #0
   82962:	729a      	strb	r2, [r3, #10]
  /* Use PWM clock A as source clock */
  g_pwm_channel_MRear.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82964:	4b47      	ldr	r3, [pc, #284]	; (82a84 <motor_init+0x190>)
   82966:	220b      	movs	r2, #11
   82968:	605a      	str	r2, [r3, #4]
  /* Period value of output waveform */
  g_pwm_channel_MRear.ul_period = PERIOD_VALUE;
   8296a:	4b46      	ldr	r3, [pc, #280]	; (82a84 <motor_init+0x190>)
   8296c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82970:	611a      	str	r2, [r3, #16]
  /* Duty cycle value of output waveform */
  g_pwm_channel_MRear.ul_duty = INIT_DUTY_VALUE;
   82972:	4b44      	ldr	r3, [pc, #272]	; (82a84 <motor_init+0x190>)
   82974:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82978:	60da      	str	r2, [r3, #12]
  g_pwm_channel_MRear.channel = MOTOR_REAR;
   8297a:	4b42      	ldr	r3, [pc, #264]	; (82a84 <motor_init+0x190>)
   8297c:	2202      	movs	r2, #2
   8297e:	601a      	str	r2, [r3, #0]
  pwm_channel_init(PWM, &g_pwm_channel_MRear);
   82980:	4940      	ldr	r1, [pc, #256]	; (82a84 <motor_init+0x190>)
   82982:	483d      	ldr	r0, [pc, #244]	; (82a78 <motor_init+0x184>)
   82984:	4b3d      	ldr	r3, [pc, #244]	; (82a7c <motor_init+0x188>)
   82986:	4798      	blx	r3
  
  pwm_channel_disable(PWM, MOTOR_LEFT);
   82988:	2100      	movs	r1, #0
   8298a:	483b      	ldr	r0, [pc, #236]	; (82a78 <motor_init+0x184>)
   8298c:	4b3e      	ldr	r3, [pc, #248]	; (82a88 <motor_init+0x194>)
   8298e:	4798      	blx	r3
  pwm_channel_disable(PWM, MOTOR_RIGHT);
   82990:	2101      	movs	r1, #1
   82992:	4839      	ldr	r0, [pc, #228]	; (82a78 <motor_init+0x184>)
   82994:	4b3c      	ldr	r3, [pc, #240]	; (82a88 <motor_init+0x194>)
   82996:	4798      	blx	r3
  pwm_channel_disable(PWM, MOTOR_REAR);
   82998:	2102      	movs	r1, #2
   8299a:	4837      	ldr	r0, [pc, #220]	; (82a78 <motor_init+0x184>)
   8299c:	4b3a      	ldr	r3, [pc, #232]	; (82a88 <motor_init+0x194>)
   8299e:	4798      	blx	r3
  
  g_pwm_channel_ENC.alignment = PWM_ALIGN_LEFT;
   829a0:	4b3a      	ldr	r3, [pc, #232]	; (82a8c <motor_init+0x198>)
   829a2:	2200      	movs	r2, #0
   829a4:	811a      	strh	r2, [r3, #8]
  g_pwm_channel_ENC.polarity = PWM_LOW;
   829a6:	4b39      	ldr	r3, [pc, #228]	; (82a8c <motor_init+0x198>)
   829a8:	2200      	movs	r2, #0
   829aa:	729a      	strb	r2, [r3, #10]
  g_pwm_channel_ENC.ul_prescaler = PWM_CMR_CPRE_CLKA;
   829ac:	4b37      	ldr	r3, [pc, #220]	; (82a8c <motor_init+0x198>)
   829ae:	220b      	movs	r2, #11
   829b0:	605a      	str	r2, [r3, #4]
  g_pwm_channel_ENC.ul_period = 330;
   829b2:	4b36      	ldr	r3, [pc, #216]	; (82a8c <motor_init+0x198>)
   829b4:	f44f 72a5 	mov.w	r2, #330	; 0x14a
   829b8:	611a      	str	r2, [r3, #16]
  g_pwm_channel_ENC.ul_duty = 165;
   829ba:	4b34      	ldr	r3, [pc, #208]	; (82a8c <motor_init+0x198>)
   829bc:	22a5      	movs	r2, #165	; 0xa5
   829be:	60da      	str	r2, [r3, #12]
  g_pwm_channel_ENC.channel = ENC_CLK;
   829c0:	4b32      	ldr	r3, [pc, #200]	; (82a8c <motor_init+0x198>)
   829c2:	2255      	movs	r2, #85	; 0x55
   829c4:	601a      	str	r2, [r3, #0]
  pwm_channel_init(PWM, &g_pwm_channel_ENC);
   829c6:	4931      	ldr	r1, [pc, #196]	; (82a8c <motor_init+0x198>)
   829c8:	482b      	ldr	r0, [pc, #172]	; (82a78 <motor_init+0x184>)
   829ca:	4b2c      	ldr	r3, [pc, #176]	; (82a7c <motor_init+0x188>)
   829cc:	4798      	blx	r3
  pwm_channel_enable(PWM, ENC_CLK);
   829ce:	2155      	movs	r1, #85	; 0x55
   829d0:	4829      	ldr	r0, [pc, #164]	; (82a78 <motor_init+0x184>)
   829d2:	4b2f      	ldr	r3, [pc, #188]	; (82a90 <motor_init+0x19c>)
   829d4:	4798      	blx	r3
  
  sysclk_enable_peripheral_clock(ID_TC1);
   829d6:	201c      	movs	r0, #28
   829d8:	4b2e      	ldr	r3, [pc, #184]	; (82a94 <motor_init+0x1a0>)
   829da:	4798      	blx	r3
  tc_init(TC0, 1, TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_CPCTRG);
   829dc:	f244 0203 	movw	r2, #16387	; 0x4003
   829e0:	2101      	movs	r1, #1
   829e2:	482d      	ldr	r0, [pc, #180]	; (82a98 <motor_init+0x1a4>)
   829e4:	4b2d      	ldr	r3, [pc, #180]	; (82a9c <motor_init+0x1a8>)
   829e6:	4798      	blx	r3
  tc_write_rc(TC0, 1, 5249);  //MCLK / 128 * 0,008
   829e8:	f241 4281 	movw	r2, #5249	; 0x1481
   829ec:	2101      	movs	r1, #1
   829ee:	482a      	ldr	r0, [pc, #168]	; (82a98 <motor_init+0x1a4>)
   829f0:	4b2b      	ldr	r3, [pc, #172]	; (82aa0 <motor_init+0x1ac>)
   829f2:	4798      	blx	r3
  NVIC_DisableIRQ(TC1_IRQn);
   829f4:	201c      	movs	r0, #28
   829f6:	4b2b      	ldr	r3, [pc, #172]	; (82aa4 <motor_init+0x1b0>)
   829f8:	4798      	blx	r3
  NVIC_ClearPendingIRQ(TC1_IRQn);
   829fa:	201c      	movs	r0, #28
   829fc:	4b2a      	ldr	r3, [pc, #168]	; (82aa8 <motor_init+0x1b4>)
   829fe:	4798      	blx	r3
  NVIC_SetPriority(TC1_IRQn, 0);
   82a00:	2100      	movs	r1, #0
   82a02:	201c      	movs	r0, #28
   82a04:	4b29      	ldr	r3, [pc, #164]	; (82aac <motor_init+0x1b8>)
   82a06:	4798      	blx	r3
  NVIC_EnableIRQ(TC1_IRQn);
   82a08:	201c      	movs	r0, #28
   82a0a:	4b29      	ldr	r3, [pc, #164]	; (82ab0 <motor_init+0x1bc>)
   82a0c:	4798      	blx	r3
  tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82a0e:	2210      	movs	r2, #16
   82a10:	2101      	movs	r1, #1
   82a12:	4821      	ldr	r0, [pc, #132]	; (82a98 <motor_init+0x1a4>)
   82a14:	4b27      	ldr	r3, [pc, #156]	; (82ab4 <motor_init+0x1c0>)
   82a16:	4798      	blx	r3
  tc_start(TC0, 1);
   82a18:	2101      	movs	r1, #1
   82a1a:	481f      	ldr	r0, [pc, #124]	; (82a98 <motor_init+0x1a4>)
   82a1c:	4b26      	ldr	r3, [pc, #152]	; (82ab8 <motor_init+0x1c4>)
   82a1e:	4798      	blx	r3
  
  mleft_pid_reg.kp = 15.0f;
   82a20:	4b26      	ldr	r3, [pc, #152]	; (82abc <motor_init+0x1c8>)
   82a22:	4a27      	ldr	r2, [pc, #156]	; (82ac0 <motor_init+0x1cc>)
   82a24:	601a      	str	r2, [r3, #0]
  mleft_pid_reg.ki = 10.0f;
   82a26:	4b25      	ldr	r3, [pc, #148]	; (82abc <motor_init+0x1c8>)
   82a28:	4a26      	ldr	r2, [pc, #152]	; (82ac4 <motor_init+0x1d0>)
   82a2a:	605a      	str	r2, [r3, #4]
  mleft_pid_reg.kc = 1.0f;
   82a2c:	4b23      	ldr	r3, [pc, #140]	; (82abc <motor_init+0x1c8>)
   82a2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   82a32:	609a      	str	r2, [r3, #8]
  mleft_pid_reg.kd = 5.0f;
   82a34:	4b21      	ldr	r3, [pc, #132]	; (82abc <motor_init+0x1c8>)
   82a36:	4a24      	ldr	r2, [pc, #144]	; (82ac8 <motor_init+0x1d4>)
   82a38:	60da      	str	r2, [r3, #12]
  mleft_pid_reg.outMin = -500.0f;
   82a3a:	4b20      	ldr	r3, [pc, #128]	; (82abc <motor_init+0x1c8>)
   82a3c:	4a23      	ldr	r2, [pc, #140]	; (82acc <motor_init+0x1d8>)
   82a3e:	619a      	str	r2, [r3, #24]
  mleft_pid_reg.outMax = 500.0f;
   82a40:	4b1e      	ldr	r3, [pc, #120]	; (82abc <motor_init+0x1c8>)
   82a42:	4a23      	ldr	r2, [pc, #140]	; (82ad0 <motor_init+0x1dc>)
   82a44:	615a      	str	r2, [r3, #20]
  
  mright_pid_reg = mleft_pid_reg;
   82a46:	4a23      	ldr	r2, [pc, #140]	; (82ad4 <motor_init+0x1e0>)
   82a48:	4b1c      	ldr	r3, [pc, #112]	; (82abc <motor_init+0x1c8>)
   82a4a:	4614      	mov	r4, r2
   82a4c:	461d      	mov	r5, r3
   82a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82a56:	682b      	ldr	r3, [r5, #0]
   82a58:	6023      	str	r3, [r4, #0]
  mrear_pid_reg = mleft_pid_reg;
   82a5a:	4a1f      	ldr	r2, [pc, #124]	; (82ad8 <motor_init+0x1e4>)
   82a5c:	4b17      	ldr	r3, [pc, #92]	; (82abc <motor_init+0x1c8>)
   82a5e:	4614      	mov	r4, r2
   82a60:	461d      	mov	r5, r3
   82a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82a6a:	682b      	ldr	r3, [r5, #0]
   82a6c:	6023      	str	r3, [r4, #0]
}
   82a6e:	bf00      	nop
   82a70:	bdb0      	pop	{r4, r5, r7, pc}
   82a72:	bf00      	nop
   82a74:	20070e88 	.word	0x20070e88
   82a78:	40094000 	.word	0x40094000
   82a7c:	000802f5 	.word	0x000802f5
   82a80:	20070f58 	.word	0x20070f58
   82a84:	20070f00 	.word	0x20070f00
   82a88:	000805a1 	.word	0x000805a1
   82a8c:	20070eb0 	.word	0x20070eb0
   82a90:	0008057f 	.word	0x0008057f
   82a94:	00082839 	.word	0x00082839
   82a98:	40080000 	.word	0x40080000
   82a9c:	000805c3 	.word	0x000805c3
   82aa0:	0008061b 	.word	0x0008061b
   82aa4:	0008277d 	.word	0x0008277d
   82aa8:	000827b1 	.word	0x000827b1
   82aac:	000827e5 	.word	0x000827e5
   82ab0:	0008274d 	.word	0x0008274d
   82ab4:	0008063f 	.word	0x0008063f
   82ab8:	000805fb 	.word	0x000805fb
   82abc:	20070f80 	.word	0x20070f80
   82ac0:	41700000 	.word	0x41700000
   82ac4:	41200000 	.word	0x41200000
   82ac8:	40a00000 	.word	0x40a00000
   82acc:	c3fa0000 	.word	0xc3fa0000
   82ad0:	43fa0000 	.word	0x43fa0000
   82ad4:	20070ed8 	.word	0x20070ed8
   82ad8:	20070f28 	.word	0x20070f28

00082adc <update_motor>:

void update_motor(float mleft_ref, float mright_ref, float mrear_ref)
{
   82adc:	b580      	push	{r7, lr}
   82ade:	b084      	sub	sp, #16
   82ae0:	af00      	add	r7, sp, #0
   82ae2:	60f8      	str	r0, [r7, #12]
   82ae4:	60b9      	str	r1, [r7, #8]
   82ae6:	607a      	str	r2, [r7, #4]
  tc_disable_interrupt(TC0, 1, TC_IER_CPCS);
   82ae8:	2210      	movs	r2, #16
   82aea:	2101      	movs	r1, #1
   82aec:	480a      	ldr	r0, [pc, #40]	; (82b18 <update_motor+0x3c>)
   82aee:	4b0b      	ldr	r3, [pc, #44]	; (82b1c <update_motor+0x40>)
   82af0:	4798      	blx	r3
  speed_mleft = (float)mleft_ref;
   82af2:	4a0b      	ldr	r2, [pc, #44]	; (82b20 <update_motor+0x44>)
   82af4:	68fb      	ldr	r3, [r7, #12]
   82af6:	6013      	str	r3, [r2, #0]
  speed_mright = (float)mright_ref;
   82af8:	4a0a      	ldr	r2, [pc, #40]	; (82b24 <update_motor+0x48>)
   82afa:	68bb      	ldr	r3, [r7, #8]
   82afc:	6013      	str	r3, [r2, #0]
  speed_mrear = (float)mrear_ref;
   82afe:	4a0a      	ldr	r2, [pc, #40]	; (82b28 <update_motor+0x4c>)
   82b00:	687b      	ldr	r3, [r7, #4]
   82b02:	6013      	str	r3, [r2, #0]
  tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82b04:	2210      	movs	r2, #16
   82b06:	2101      	movs	r1, #1
   82b08:	4803      	ldr	r0, [pc, #12]	; (82b18 <update_motor+0x3c>)
   82b0a:	4b08      	ldr	r3, [pc, #32]	; (82b2c <update_motor+0x50>)
   82b0c:	4798      	blx	r3
    motor_speed(MRIGHT, pidReg(&mright_pid_reg, (float)mright_ref, (float)eright_counts));
    motor_speed(MREAR, pidReg(&mrear_pid_reg, (float)mrear_ref, (float)erear_counts));
    
    pwm_channel_enable(PWM, ENC_CLK);
  }*/ 
}
   82b0e:	bf00      	nop
   82b10:	3710      	adds	r7, #16
   82b12:	46bd      	mov	sp, r7
   82b14:	bd80      	pop	{r7, pc}
   82b16:	bf00      	nop
   82b18:	40080000 	.word	0x40080000
   82b1c:	00080665 	.word	0x00080665
   82b20:	20070f50 	.word	0x20070f50
   82b24:	20070efc 	.word	0x20070efc
   82b28:	20070fd8 	.word	0x20070fd8
   82b2c:	0008063f 	.word	0x0008063f

00082b30 <motor_speed>:

void motor_speed(uint8_t motor, int16_t ispeed)
{
   82b30:	b580      	push	{r7, lr}
   82b32:	b084      	sub	sp, #16
   82b34:	af00      	add	r7, sp, #0
   82b36:	4603      	mov	r3, r0
   82b38:	460a      	mov	r2, r1
   82b3a:	71fb      	strb	r3, [r7, #7]
   82b3c:	4613      	mov	r3, r2
   82b3e:	80bb      	strh	r3, [r7, #4]
  if (ispeed > 500)
   82b40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82b44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82b48:	dd02      	ble.n	82b50 <motor_speed+0x20>
  {
    ispeed = 500;
   82b4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82b4e:	80bb      	strh	r3, [r7, #4]
  }
  
  if (ispeed < -500)
   82b50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82b54:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
   82b58:	da02      	bge.n	82b60 <motor_speed+0x30>
  {
    ispeed = -500;
   82b5a:	f64f 630c 	movw	r3, #65036	; 0xfe0c
   82b5e:	80bb      	strh	r3, [r7, #4]
  }
  
  uint16_t duty_cycle = (uint16_t)(ispeed + (int16_t)INIT_DUTY_VALUE);
   82b60:	88bb      	ldrh	r3, [r7, #4]
   82b62:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   82b66:	81fb      	strh	r3, [r7, #14]
  
  if (duty_cycle < 10)
   82b68:	89fb      	ldrh	r3, [r7, #14]
   82b6a:	2b09      	cmp	r3, #9
   82b6c:	d801      	bhi.n	82b72 <motor_speed+0x42>
  {
    duty_cycle = 10;
   82b6e:	230a      	movs	r3, #10
   82b70:	81fb      	strh	r3, [r7, #14]
  }
  
  if (duty_cycle > 990)
   82b72:	89fb      	ldrh	r3, [r7, #14]
   82b74:	f240 32de 	movw	r2, #990	; 0x3de
   82b78:	4293      	cmp	r3, r2
   82b7a:	d902      	bls.n	82b82 <motor_speed+0x52>
  {
    duty_cycle = 990;
   82b7c:	f240 33de 	movw	r3, #990	; 0x3de
   82b80:	81fb      	strh	r3, [r7, #14]
  }
  
  switch(motor)
   82b82:	79fb      	ldrb	r3, [r7, #7]
   82b84:	2b01      	cmp	r3, #1
   82b86:	d00b      	beq.n	82ba0 <motor_speed+0x70>
   82b88:	2b02      	cmp	r3, #2
   82b8a:	d010      	beq.n	82bae <motor_speed+0x7e>
   82b8c:	2b00      	cmp	r3, #0
   82b8e:	d000      	beq.n	82b92 <motor_speed+0x62>
      break;
    case MOTOR_REAR:
      pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
      break;
    default:
      break;
   82b90:	e014      	b.n	82bbc <motor_speed+0x8c>
      pwm_channel_update_duty(PWM, &g_pwm_channel_MLeft, duty_cycle);
   82b92:	89fb      	ldrh	r3, [r7, #14]
   82b94:	461a      	mov	r2, r3
   82b96:	490b      	ldr	r1, [pc, #44]	; (82bc4 <motor_speed+0x94>)
   82b98:	480b      	ldr	r0, [pc, #44]	; (82bc8 <motor_speed+0x98>)
   82b9a:	4b0c      	ldr	r3, [pc, #48]	; (82bcc <motor_speed+0x9c>)
   82b9c:	4798      	blx	r3
      break;
   82b9e:	e00d      	b.n	82bbc <motor_speed+0x8c>
      pwm_channel_update_duty(PWM, &g_pwm_channel_MRight, duty_cycle);
   82ba0:	89fb      	ldrh	r3, [r7, #14]
   82ba2:	461a      	mov	r2, r3
   82ba4:	490a      	ldr	r1, [pc, #40]	; (82bd0 <motor_speed+0xa0>)
   82ba6:	4808      	ldr	r0, [pc, #32]	; (82bc8 <motor_speed+0x98>)
   82ba8:	4b08      	ldr	r3, [pc, #32]	; (82bcc <motor_speed+0x9c>)
   82baa:	4798      	blx	r3
      break;
   82bac:	e006      	b.n	82bbc <motor_speed+0x8c>
      pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
   82bae:	89fb      	ldrh	r3, [r7, #14]
   82bb0:	461a      	mov	r2, r3
   82bb2:	4908      	ldr	r1, [pc, #32]	; (82bd4 <motor_speed+0xa4>)
   82bb4:	4804      	ldr	r0, [pc, #16]	; (82bc8 <motor_speed+0x98>)
   82bb6:	4b05      	ldr	r3, [pc, #20]	; (82bcc <motor_speed+0x9c>)
   82bb8:	4798      	blx	r3
      break;
   82bba:	bf00      	nop
  }
}
   82bbc:	bf00      	nop
   82bbe:	3710      	adds	r7, #16
   82bc0:	46bd      	mov	sp, r7
   82bc2:	bd80      	pop	{r7, pc}
   82bc4:	20070e88 	.word	0x20070e88
   82bc8:	40094000 	.word	0x40094000
   82bcc:	0008053b 	.word	0x0008053b
   82bd0:	20070f58 	.word	0x20070f58
   82bd4:	20070f00 	.word	0x20070f00

00082bd8 <TC1_Handler>:

void TC1_Handler(void)
{
   82bd8:	b590      	push	{r4, r7, lr}
   82bda:	b085      	sub	sp, #20
   82bdc:	af00      	add	r7, sp, #0
  uint32_t PIOC_value;
  int32_t eleft_counts;
  int32_t eright_counts;
  int32_t erear_counts;
  
  ioport_set_pin_level(LED_M3, 1);
   82bde:	2101      	movs	r1, #1
   82be0:	2069      	movs	r0, #105	; 0x69
   82be2:	4b50      	ldr	r3, [pc, #320]	; (82d24 <TC1_Handler+0x14c>)
   82be4:	4798      	blx	r3
  
  if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   82be6:	2101      	movs	r1, #1
   82be8:	484f      	ldr	r0, [pc, #316]	; (82d28 <TC1_Handler+0x150>)
   82bea:	4b50      	ldr	r3, [pc, #320]	; (82d2c <TC1_Handler+0x154>)
   82bec:	4798      	blx	r3
   82bee:	4603      	mov	r3, r0
   82bf0:	f003 0310 	and.w	r3, r3, #16
   82bf4:	2b10      	cmp	r3, #16
   82bf6:	f040 808c 	bne.w	82d12 <TC1_Handler+0x13a>
  {
    pwm_channel_disable(PWM, ENC_CLK);
   82bfa:	2155      	movs	r1, #85	; 0x55
   82bfc:	484c      	ldr	r0, [pc, #304]	; (82d30 <TC1_Handler+0x158>)
   82bfe:	4b4d      	ldr	r3, [pc, #308]	; (82d34 <TC1_Handler+0x15c>)
   82c00:	4798      	blx	r3
    PIOC_value = ioport_get_port_level(IOPORT_PIOC, 0xFFFFFFFF);
   82c02:	f04f 31ff 	mov.w	r1, #4294967295
   82c06:	2002      	movs	r0, #2
   82c08:	4b4b      	ldr	r3, [pc, #300]	; (82d38 <TC1_Handler+0x160>)
   82c0a:	4798      	blx	r3
   82c0c:	60f8      	str	r0, [r7, #12]
    ioport_set_pin_level(ENC_LOAD, 0);
   82c0e:	2100      	movs	r1, #0
   82c10:	2020      	movs	r0, #32
   82c12:	4b44      	ldr	r3, [pc, #272]	; (82d24 <TC1_Handler+0x14c>)
   82c14:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   82c16:	2101      	movs	r1, #1
   82c18:	2020      	movs	r0, #32
   82c1a:	4b42      	ldr	r3, [pc, #264]	; (82d24 <TC1_Handler+0x14c>)
   82c1c:	4798      	blx	r3
    //pwm_channel_enable(PWM, ENC_CLK);
  
    eleft_counts = (PIOC_value & 0x7F000000) >> 24;
   82c1e:	68fb      	ldr	r3, [r7, #12]
   82c20:	0e1b      	lsrs	r3, r3, #24
   82c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   82c26:	60bb      	str	r3, [r7, #8]
    eleft_counts = (eleft_counts & 0x00000040) ? eleft_counts - 128 : eleft_counts;
   82c28:	68bb      	ldr	r3, [r7, #8]
   82c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82c2e:	2b00      	cmp	r3, #0
   82c30:	d002      	beq.n	82c38 <TC1_Handler+0x60>
   82c32:	68bb      	ldr	r3, [r7, #8]
   82c34:	3b80      	subs	r3, #128	; 0x80
   82c36:	e000      	b.n	82c3a <TC1_Handler+0x62>
   82c38:	68bb      	ldr	r3, [r7, #8]
   82c3a:	60bb      	str	r3, [r7, #8]
    eright_counts = ((PIOC_value & 0x00C00000) >> 17) | ((PIOC_value & 0x001F0000) >> 16);
   82c3c:	68fb      	ldr	r3, [r7, #12]
   82c3e:	0c5b      	lsrs	r3, r3, #17
   82c40:	f003 0260 	and.w	r2, r3, #96	; 0x60
   82c44:	68fb      	ldr	r3, [r7, #12]
   82c46:	0c1b      	lsrs	r3, r3, #16
   82c48:	f003 031f 	and.w	r3, r3, #31
   82c4c:	4313      	orrs	r3, r2
   82c4e:	607b      	str	r3, [r7, #4]
    eright_counts = (eright_counts & 0x00000040) ? eright_counts - 128 : eright_counts;
   82c50:	687b      	ldr	r3, [r7, #4]
   82c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82c56:	2b00      	cmp	r3, #0
   82c58:	d002      	beq.n	82c60 <TC1_Handler+0x88>
   82c5a:	687b      	ldr	r3, [r7, #4]
   82c5c:	3b80      	subs	r3, #128	; 0x80
   82c5e:	e000      	b.n	82c62 <TC1_Handler+0x8a>
   82c60:	687b      	ldr	r3, [r7, #4]
   82c62:	607b      	str	r3, [r7, #4]
    erear_counts = ((PIOC_value & 0x0000FC00) >> 9) | ((PIOC_value & 0x00000002) >> 1);
   82c64:	68fb      	ldr	r3, [r7, #12]
   82c66:	0a5b      	lsrs	r3, r3, #9
   82c68:	f003 027e 	and.w	r2, r3, #126	; 0x7e
   82c6c:	68fb      	ldr	r3, [r7, #12]
   82c6e:	085b      	lsrs	r3, r3, #1
   82c70:	f003 0301 	and.w	r3, r3, #1
   82c74:	4313      	orrs	r3, r2
   82c76:	603b      	str	r3, [r7, #0]
    erear_counts = (erear_counts & 0x00000040) ? erear_counts - 128 : erear_counts;
   82c78:	683b      	ldr	r3, [r7, #0]
   82c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82c7e:	2b00      	cmp	r3, #0
   82c80:	d002      	beq.n	82c88 <TC1_Handler+0xb0>
   82c82:	683b      	ldr	r3, [r7, #0]
   82c84:	3b80      	subs	r3, #128	; 0x80
   82c86:	e000      	b.n	82c8a <TC1_Handler+0xb2>
   82c88:	683b      	ldr	r3, [r7, #0]
   82c8a:	603b      	str	r3, [r7, #0]
  
    motor_speed(MOTOR_LEFT, pidReg(&mleft_pid_reg, speed_mleft, (float)eleft_counts));
   82c8c:	4b2b      	ldr	r3, [pc, #172]	; (82d3c <TC1_Handler+0x164>)
   82c8e:	681c      	ldr	r4, [r3, #0]
   82c90:	4b2b      	ldr	r3, [pc, #172]	; (82d40 <TC1_Handler+0x168>)
   82c92:	68b8      	ldr	r0, [r7, #8]
   82c94:	4798      	blx	r3
   82c96:	4603      	mov	r3, r0
   82c98:	461a      	mov	r2, r3
   82c9a:	4621      	mov	r1, r4
   82c9c:	4829      	ldr	r0, [pc, #164]	; (82d44 <TC1_Handler+0x16c>)
   82c9e:	4b2a      	ldr	r3, [pc, #168]	; (82d48 <TC1_Handler+0x170>)
   82ca0:	4798      	blx	r3
   82ca2:	4602      	mov	r2, r0
   82ca4:	4b29      	ldr	r3, [pc, #164]	; (82d4c <TC1_Handler+0x174>)
   82ca6:	4610      	mov	r0, r2
   82ca8:	4798      	blx	r3
   82caa:	4603      	mov	r3, r0
   82cac:	b21b      	sxth	r3, r3
   82cae:	4619      	mov	r1, r3
   82cb0:	2000      	movs	r0, #0
   82cb2:	4b27      	ldr	r3, [pc, #156]	; (82d50 <TC1_Handler+0x178>)
   82cb4:	4798      	blx	r3
    motor_speed(MOTOR_RIGHT, pidReg(&mright_pid_reg, speed_mright, (float)eright_counts));
   82cb6:	4b27      	ldr	r3, [pc, #156]	; (82d54 <TC1_Handler+0x17c>)
   82cb8:	681c      	ldr	r4, [r3, #0]
   82cba:	4b21      	ldr	r3, [pc, #132]	; (82d40 <TC1_Handler+0x168>)
   82cbc:	6878      	ldr	r0, [r7, #4]
   82cbe:	4798      	blx	r3
   82cc0:	4603      	mov	r3, r0
   82cc2:	461a      	mov	r2, r3
   82cc4:	4621      	mov	r1, r4
   82cc6:	4824      	ldr	r0, [pc, #144]	; (82d58 <TC1_Handler+0x180>)
   82cc8:	4b1f      	ldr	r3, [pc, #124]	; (82d48 <TC1_Handler+0x170>)
   82cca:	4798      	blx	r3
   82ccc:	4602      	mov	r2, r0
   82cce:	4b1f      	ldr	r3, [pc, #124]	; (82d4c <TC1_Handler+0x174>)
   82cd0:	4610      	mov	r0, r2
   82cd2:	4798      	blx	r3
   82cd4:	4603      	mov	r3, r0
   82cd6:	b21b      	sxth	r3, r3
   82cd8:	4619      	mov	r1, r3
   82cda:	2001      	movs	r0, #1
   82cdc:	4b1c      	ldr	r3, [pc, #112]	; (82d50 <TC1_Handler+0x178>)
   82cde:	4798      	blx	r3
    motor_speed(MOTOR_REAR, pidReg(&mrear_pid_reg, speed_mrear, (float)erear_counts));
   82ce0:	4b1e      	ldr	r3, [pc, #120]	; (82d5c <TC1_Handler+0x184>)
   82ce2:	681c      	ldr	r4, [r3, #0]
   82ce4:	4b16      	ldr	r3, [pc, #88]	; (82d40 <TC1_Handler+0x168>)
   82ce6:	6838      	ldr	r0, [r7, #0]
   82ce8:	4798      	blx	r3
   82cea:	4603      	mov	r3, r0
   82cec:	461a      	mov	r2, r3
   82cee:	4621      	mov	r1, r4
   82cf0:	481b      	ldr	r0, [pc, #108]	; (82d60 <TC1_Handler+0x188>)
   82cf2:	4b15      	ldr	r3, [pc, #84]	; (82d48 <TC1_Handler+0x170>)
   82cf4:	4798      	blx	r3
   82cf6:	4602      	mov	r2, r0
   82cf8:	4b14      	ldr	r3, [pc, #80]	; (82d4c <TC1_Handler+0x174>)
   82cfa:	4610      	mov	r0, r2
   82cfc:	4798      	blx	r3
   82cfe:	4603      	mov	r3, r0
   82d00:	b21b      	sxth	r3, r3
   82d02:	4619      	mov	r1, r3
   82d04:	2002      	movs	r0, #2
   82d06:	4b12      	ldr	r3, [pc, #72]	; (82d50 <TC1_Handler+0x178>)
   82d08:	4798      	blx	r3
  
    pwm_channel_enable(PWM, ENC_CLK);
   82d0a:	2155      	movs	r1, #85	; 0x55
   82d0c:	4808      	ldr	r0, [pc, #32]	; (82d30 <TC1_Handler+0x158>)
   82d0e:	4b15      	ldr	r3, [pc, #84]	; (82d64 <TC1_Handler+0x18c>)
   82d10:	4798      	blx	r3
  }

  ioport_set_pin_level(LED_M3, 0);
   82d12:	2100      	movs	r1, #0
   82d14:	2069      	movs	r0, #105	; 0x69
   82d16:	4b03      	ldr	r3, [pc, #12]	; (82d24 <TC1_Handler+0x14c>)
   82d18:	4798      	blx	r3
}
   82d1a:	bf00      	nop
   82d1c:	3714      	adds	r7, #20
   82d1e:	46bd      	mov	sp, r7
   82d20:	bd90      	pop	{r4, r7, pc}
   82d22:	bf00      	nop
   82d24:	00082855 	.word	0x00082855
   82d28:	40080000 	.word	0x40080000
   82d2c:	0008068b 	.word	0x0008068b
   82d30:	40094000 	.word	0x40094000
   82d34:	000805a1 	.word	0x000805a1
   82d38:	000828bf 	.word	0x000828bf
   82d3c:	20070f50 	.word	0x20070f50
   82d40:	00084de5 	.word	0x00084de5
   82d44:	20070f80 	.word	0x20070f80
   82d48:	00082d69 	.word	0x00082d69
   82d4c:	00085219 	.word	0x00085219
   82d50:	00082b31 	.word	0x00082b31
   82d54:	20070efc 	.word	0x20070efc
   82d58:	20070ed8 	.word	0x20070ed8
   82d5c:	20070fd8 	.word	0x20070fd8
   82d60:	20070f28 	.word	0x20070f28
   82d64:	0008057f 	.word	0x0008057f

00082d68 <pidReg>:
/************************************************************************/

#include "pid.h"

float pidReg(pidReg_t* reg, float refer, float act)
{
   82d68:	b590      	push	{r4, r7, lr}
   82d6a:	b08b      	sub	sp, #44	; 0x2c
   82d6c:	af00      	add	r7, sp, #0
   82d6e:	60f8      	str	r0, [r7, #12]
   82d70:	60b9      	str	r1, [r7, #8]
   82d72:	607a      	str	r2, [r7, #4]
  float diff;
  float outPreSat;
  float out;

  // Compute the error
  err = refer - act;
   82d74:	4b3c      	ldr	r3, [pc, #240]	; (82e68 <pidReg+0x100>)
   82d76:	6879      	ldr	r1, [r7, #4]
   82d78:	68b8      	ldr	r0, [r7, #8]
   82d7a:	4798      	blx	r3
   82d7c:	4603      	mov	r3, r0
   82d7e:	623b      	str	r3, [r7, #32]

  // Compute the proportional output
  prop = reg->kp * err;
   82d80:	68fb      	ldr	r3, [r7, #12]
   82d82:	681a      	ldr	r2, [r3, #0]
   82d84:	4b39      	ldr	r3, [pc, #228]	; (82e6c <pidReg+0x104>)
   82d86:	6a39      	ldr	r1, [r7, #32]
   82d88:	4610      	mov	r0, r2
   82d8a:	4798      	blx	r3
   82d8c:	4603      	mov	r3, r0
   82d8e:	61fb      	str	r3, [r7, #28]

  // Compute the integral output
  reg->intg = reg->intg + reg->ki * err + reg->kc * reg->satErr;
   82d90:	68fb      	ldr	r3, [r7, #12]
   82d92:	691c      	ldr	r4, [r3, #16]
   82d94:	68fb      	ldr	r3, [r7, #12]
   82d96:	685a      	ldr	r2, [r3, #4]
   82d98:	4b34      	ldr	r3, [pc, #208]	; (82e6c <pidReg+0x104>)
   82d9a:	6a39      	ldr	r1, [r7, #32]
   82d9c:	4610      	mov	r0, r2
   82d9e:	4798      	blx	r3
   82da0:	4603      	mov	r3, r0
   82da2:	461a      	mov	r2, r3
   82da4:	4b32      	ldr	r3, [pc, #200]	; (82e70 <pidReg+0x108>)
   82da6:	4611      	mov	r1, r2
   82da8:	4620      	mov	r0, r4
   82daa:	4798      	blx	r3
   82dac:	4603      	mov	r3, r0
   82dae:	461c      	mov	r4, r3
   82db0:	68fb      	ldr	r3, [r7, #12]
   82db2:	689a      	ldr	r2, [r3, #8]
   82db4:	68fb      	ldr	r3, [r7, #12]
   82db6:	69d9      	ldr	r1, [r3, #28]
   82db8:	4b2c      	ldr	r3, [pc, #176]	; (82e6c <pidReg+0x104>)
   82dba:	4610      	mov	r0, r2
   82dbc:	4798      	blx	r3
   82dbe:	4603      	mov	r3, r0
   82dc0:	461a      	mov	r2, r3
   82dc2:	4b2b      	ldr	r3, [pc, #172]	; (82e70 <pidReg+0x108>)
   82dc4:	4611      	mov	r1, r2
   82dc6:	4620      	mov	r0, r4
   82dc8:	4798      	blx	r3
   82dca:	4603      	mov	r3, r0
   82dcc:	461a      	mov	r2, r3
   82dce:	68fb      	ldr	r3, [r7, #12]
   82dd0:	611a      	str	r2, [r3, #16]

  // Compute the derivative output
  diff = reg->kd * (err - reg->prevErr);
   82dd2:	68fb      	ldr	r3, [r7, #12]
   82dd4:	68dc      	ldr	r4, [r3, #12]
   82dd6:	68fb      	ldr	r3, [r7, #12]
   82dd8:	6a1a      	ldr	r2, [r3, #32]
   82dda:	4b23      	ldr	r3, [pc, #140]	; (82e68 <pidReg+0x100>)
   82ddc:	4611      	mov	r1, r2
   82dde:	6a38      	ldr	r0, [r7, #32]
   82de0:	4798      	blx	r3
   82de2:	4603      	mov	r3, r0
   82de4:	461a      	mov	r2, r3
   82de6:	4b21      	ldr	r3, [pc, #132]	; (82e6c <pidReg+0x104>)
   82de8:	4611      	mov	r1, r2
   82dea:	4620      	mov	r0, r4
   82dec:	4798      	blx	r3
   82dee:	4603      	mov	r3, r0
   82df0:	61bb      	str	r3, [r7, #24]

  // Compute the pre-saturated output
  outPreSat = prop + reg->intg + diff;
   82df2:	68fb      	ldr	r3, [r7, #12]
   82df4:	691a      	ldr	r2, [r3, #16]
   82df6:	4b1e      	ldr	r3, [pc, #120]	; (82e70 <pidReg+0x108>)
   82df8:	69f9      	ldr	r1, [r7, #28]
   82dfa:	4610      	mov	r0, r2
   82dfc:	4798      	blx	r3
   82dfe:	4603      	mov	r3, r0
   82e00:	461a      	mov	r2, r3
   82e02:	4b1b      	ldr	r3, [pc, #108]	; (82e70 <pidReg+0x108>)
   82e04:	69b9      	ldr	r1, [r7, #24]
   82e06:	4610      	mov	r0, r2
   82e08:	4798      	blx	r3
   82e0a:	4603      	mov	r3, r0
   82e0c:	617b      	str	r3, [r7, #20]

  // Saturate the output
  if (outPreSat > reg->outMax)
   82e0e:	68fb      	ldr	r3, [r7, #12]
   82e10:	695a      	ldr	r2, [r3, #20]
   82e12:	4b18      	ldr	r3, [pc, #96]	; (82e74 <pidReg+0x10c>)
   82e14:	6979      	ldr	r1, [r7, #20]
   82e16:	4610      	mov	r0, r2
   82e18:	4798      	blx	r3
   82e1a:	4603      	mov	r3, r0
   82e1c:	2b00      	cmp	r3, #0
   82e1e:	d003      	beq.n	82e28 <pidReg+0xc0>
  {
    out = reg->outMax;
   82e20:	68fb      	ldr	r3, [r7, #12]
   82e22:	695b      	ldr	r3, [r3, #20]
   82e24:	627b      	str	r3, [r7, #36]	; 0x24
   82e26:	e00e      	b.n	82e46 <pidReg+0xde>
  }
  else if (outPreSat < reg->outMin)
   82e28:	68fb      	ldr	r3, [r7, #12]
   82e2a:	699a      	ldr	r2, [r3, #24]
   82e2c:	4b12      	ldr	r3, [pc, #72]	; (82e78 <pidReg+0x110>)
   82e2e:	6979      	ldr	r1, [r7, #20]
   82e30:	4610      	mov	r0, r2
   82e32:	4798      	blx	r3
   82e34:	4603      	mov	r3, r0
   82e36:	2b00      	cmp	r3, #0
   82e38:	d003      	beq.n	82e42 <pidReg+0xda>
  {
    out = reg->outMin;
   82e3a:	68fb      	ldr	r3, [r7, #12]
   82e3c:	699b      	ldr	r3, [r3, #24]
   82e3e:	627b      	str	r3, [r7, #36]	; 0x24
   82e40:	e001      	b.n	82e46 <pidReg+0xde>
  }
  else
  {
    out = outPreSat;
   82e42:	697b      	ldr	r3, [r7, #20]
   82e44:	627b      	str	r3, [r7, #36]	; 0x24
  }

  // Compute the saturate difference
  reg->satErr = out - outPreSat;
   82e46:	4b08      	ldr	r3, [pc, #32]	; (82e68 <pidReg+0x100>)
   82e48:	6979      	ldr	r1, [r7, #20]
   82e4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   82e4c:	4798      	blx	r3
   82e4e:	4603      	mov	r3, r0
   82e50:	461a      	mov	r2, r3
   82e52:	68fb      	ldr	r3, [r7, #12]
   82e54:	61da      	str	r2, [r3, #28]

  // Keep error for next iteration
  reg->prevErr = err;
   82e56:	68fb      	ldr	r3, [r7, #12]
   82e58:	6a3a      	ldr	r2, [r7, #32]
   82e5a:	621a      	str	r2, [r3, #32]
  
  return out;
   82e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   82e5e:	4618      	mov	r0, r3
   82e60:	372c      	adds	r7, #44	; 0x2c
   82e62:	46bd      	mov	sp, r7
   82e64:	bd90      	pop	{r4, r7, pc}
   82e66:	bf00      	nop
   82e68:	00084c79 	.word	0x00084c79
   82e6c:	00084e8d 	.word	0x00084e8d
   82e70:	00084c7d 	.word	0x00084c7d
   82e74:	000851c9 	.word	0x000851c9
   82e78:	00085205 	.word	0x00085205

00082e7c <ioport_set_pin_level>:
{
   82e7c:	b480      	push	{r7}
   82e7e:	b08b      	sub	sp, #44	; 0x2c
   82e80:	af00      	add	r7, sp, #0
   82e82:	6078      	str	r0, [r7, #4]
   82e84:	460b      	mov	r3, r1
   82e86:	70fb      	strb	r3, [r7, #3]
   82e88:	687b      	ldr	r3, [r7, #4]
   82e8a:	627b      	str	r3, [r7, #36]	; 0x24
   82e8c:	78fb      	ldrb	r3, [r7, #3]
   82e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82e94:	61fb      	str	r3, [r7, #28]
   82e96:	69fb      	ldr	r3, [r7, #28]
   82e98:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82e9a:	69bb      	ldr	r3, [r7, #24]
   82e9c:	095b      	lsrs	r3, r3, #5
   82e9e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82ea0:	697b      	ldr	r3, [r7, #20]
   82ea2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82ea6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82eaa:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82eac:	613b      	str	r3, [r7, #16]
	if (level) {
   82eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82eb2:	2b00      	cmp	r3, #0
   82eb4:	d009      	beq.n	82eca <ioport_set_pin_level+0x4e>
   82eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82eb8:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82eba:	68fb      	ldr	r3, [r7, #12]
   82ebc:	f003 031f 	and.w	r3, r3, #31
   82ec0:	2201      	movs	r2, #1
   82ec2:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82ec4:	693b      	ldr	r3, [r7, #16]
   82ec6:	631a      	str	r2, [r3, #48]	; 0x30
}
   82ec8:	e008      	b.n	82edc <ioport_set_pin_level+0x60>
   82eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82ecc:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   82ece:	68bb      	ldr	r3, [r7, #8]
   82ed0:	f003 031f 	and.w	r3, r3, #31
   82ed4:	2201      	movs	r2, #1
   82ed6:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82ed8:	693b      	ldr	r3, [r7, #16]
   82eda:	635a      	str	r2, [r3, #52]	; 0x34
   82edc:	bf00      	nop
   82ede:	372c      	adds	r7, #44	; 0x2c
   82ee0:	46bd      	mov	sp, r7
   82ee2:	bc80      	pop	{r7}
   82ee4:	4770      	bx	lr
	...

00082ee8 <SysTick_Handler>:
//float battery_voltage = 0;
uint8_t battery_percentage;
uint8_t prev_battery_percentage = 0;

void SysTick_Handler(void)
{
   82ee8:	b480      	push	{r7}
   82eea:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   82eec:	4b04      	ldr	r3, [pc, #16]	; (82f00 <SysTick_Handler+0x18>)
   82eee:	681b      	ldr	r3, [r3, #0]
   82ef0:	3301      	adds	r3, #1
   82ef2:	4a03      	ldr	r2, [pc, #12]	; (82f00 <SysTick_Handler+0x18>)
   82ef4:	6013      	str	r3, [r2, #0]
}
   82ef6:	bf00      	nop
   82ef8:	46bd      	mov	sp, r7
   82efa:	bc80      	pop	{r7}
   82efc:	4770      	bx	lr
   82efe:	bf00      	nop
   82f00:	20070de8 	.word	0x20070de8

00082f04 <getTicks>:

uint32_t getTicks(void)
{
   82f04:	b480      	push	{r7}
   82f06:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   82f08:	4b02      	ldr	r3, [pc, #8]	; (82f14 <getTicks+0x10>)
   82f0a:	681b      	ldr	r3, [r3, #0]
}
   82f0c:	4618      	mov	r0, r3
   82f0e:	46bd      	mov	sp, r7
   82f10:	bc80      	pop	{r7}
   82f12:	4770      	bx	lr
   82f14:	20070de8 	.word	0x20070de8

00082f18 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   82f18:	b480      	push	{r7}
   82f1a:	b085      	sub	sp, #20
   82f1c:	af00      	add	r7, sp, #0
   82f1e:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   82f20:	4b07      	ldr	r3, [pc, #28]	; (82f40 <mdelay+0x28>)
   82f22:	681b      	ldr	r3, [r3, #0]
   82f24:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   82f26:	bf00      	nop
   82f28:	4b05      	ldr	r3, [pc, #20]	; (82f40 <mdelay+0x28>)
   82f2a:	681a      	ldr	r2, [r3, #0]
   82f2c:	68fb      	ldr	r3, [r7, #12]
   82f2e:	1ad2      	subs	r2, r2, r3
   82f30:	687b      	ldr	r3, [r7, #4]
   82f32:	429a      	cmp	r2, r3
   82f34:	d3f8      	bcc.n	82f28 <mdelay+0x10>
}
   82f36:	bf00      	nop
   82f38:	3714      	adds	r7, #20
   82f3a:	46bd      	mov	sp, r7
   82f3c:	bc80      	pop	{r7}
   82f3e:	4770      	bx	lr
   82f40:	20070de8 	.word	0x20070de8

00082f44 <update_comm>:

void update_comm(void)
{
   82f44:	b580      	push	{r7, lr}
   82f46:	af00      	add	r7, sp, #0
    if ((getTicks() - ticks_comm) > 5)
   82f48:	4b0b      	ldr	r3, [pc, #44]	; (82f78 <update_comm+0x34>)
   82f4a:	4798      	blx	r3
   82f4c:	4602      	mov	r2, r0
   82f4e:	4b0b      	ldr	r3, [pc, #44]	; (82f7c <update_comm+0x38>)
   82f50:	681b      	ldr	r3, [r3, #0]
   82f52:	1ad3      	subs	r3, r2, r3
   82f54:	2b05      	cmp	r3, #5
   82f56:	d90d      	bls.n	82f74 <update_comm+0x30>
    {
        ticks_comm = getTicks();
   82f58:	4b07      	ldr	r3, [pc, #28]	; (82f78 <update_comm+0x34>)
   82f5a:	4798      	blx	r3
   82f5c:	4602      	mov	r2, r0
   82f5e:	4b07      	ldr	r3, [pc, #28]	; (82f7c <update_comm+0x38>)
   82f60:	601a      	str	r2, [r3, #0]
        
        memcpy(&sens_buf, &mts, sizeof(mts));
   82f62:	4b07      	ldr	r3, [pc, #28]	; (82f80 <update_comm+0x3c>)
   82f64:	681b      	ldr	r3, [r3, #0]
   82f66:	461a      	mov	r2, r3
   82f68:	4b06      	ldr	r3, [pc, #24]	; (82f84 <update_comm+0x40>)
   82f6a:	601a      	str	r2, [r3, #0]
        spi_master_transfer(&sens_buf, sizeof(sens_buf));
   82f6c:	2103      	movs	r1, #3
   82f6e:	4805      	ldr	r0, [pc, #20]	; (82f84 <update_comm+0x40>)
   82f70:	4b05      	ldr	r3, [pc, #20]	; (82f88 <update_comm+0x44>)
   82f72:	4798      	blx	r3
    }
}
   82f74:	bf00      	nop
   82f76:	bd80      	pop	{r7, pc}
   82f78:	00082f05 	.word	0x00082f05
   82f7c:	20070e3c 	.word	0x20070e3c
   82f80:	20070e30 	.word	0x20070e30
   82f84:	20070e2c 	.word	0x20070e2c
   82f88:	00080ac5 	.word	0x00080ac5

00082f8c <update_battery>:

void update_battery(Bool update_forced)
{
   82f8c:	b580      	push	{r7, lr}
   82f8e:	b084      	sub	sp, #16
   82f90:	af00      	add	r7, sp, #0
   82f92:	4603      	mov	r3, r0
   82f94:	71fb      	strb	r3, [r7, #7]
    char tmp[6];
    battery_percentage = stm.bat_percentage;
   82f96:	4b20      	ldr	r3, [pc, #128]	; (83018 <update_battery+0x8c>)
   82f98:	789a      	ldrb	r2, [r3, #2]
   82f9a:	4b20      	ldr	r3, [pc, #128]	; (8301c <update_battery+0x90>)
   82f9c:	701a      	strb	r2, [r3, #0]
    
    if (update_forced || prev_battery_percentage != battery_percentage)
   82f9e:	79fb      	ldrb	r3, [r7, #7]
   82fa0:	2b00      	cmp	r3, #0
   82fa2:	d105      	bne.n	82fb0 <update_battery+0x24>
   82fa4:	4b1e      	ldr	r3, [pc, #120]	; (83020 <update_battery+0x94>)
   82fa6:	781a      	ldrb	r2, [r3, #0]
   82fa8:	4b1c      	ldr	r3, [pc, #112]	; (8301c <update_battery+0x90>)
   82faa:	781b      	ldrb	r3, [r3, #0]
   82fac:	429a      	cmp	r2, r3
   82fae:	d02f      	beq.n	83010 <update_battery+0x84>
    {
        if (battery_percentage >= 100)
   82fb0:	4b1a      	ldr	r3, [pc, #104]	; (8301c <update_battery+0x90>)
   82fb2:	781b      	ldrb	r3, [r3, #0]
   82fb4:	2b63      	cmp	r3, #99	; 0x63
   82fb6:	d909      	bls.n	82fcc <update_battery+0x40>
        {
            sprintf(tmp, "%3u%%", battery_percentage);
   82fb8:	4b18      	ldr	r3, [pc, #96]	; (8301c <update_battery+0x90>)
   82fba:	781b      	ldrb	r3, [r3, #0]
   82fbc:	461a      	mov	r2, r3
   82fbe:	f107 0308 	add.w	r3, r7, #8
   82fc2:	4918      	ldr	r1, [pc, #96]	; (83024 <update_battery+0x98>)
   82fc4:	4618      	mov	r0, r3
   82fc6:	4b18      	ldr	r3, [pc, #96]	; (83028 <update_battery+0x9c>)
   82fc8:	4798      	blx	r3
   82fca:	e016      	b.n	82ffa <update_battery+0x6e>
        }
        else if (battery_percentage >= 10)
   82fcc:	4b13      	ldr	r3, [pc, #76]	; (8301c <update_battery+0x90>)
   82fce:	781b      	ldrb	r3, [r3, #0]
   82fd0:	2b09      	cmp	r3, #9
   82fd2:	d909      	bls.n	82fe8 <update_battery+0x5c>
        {
            sprintf(tmp, " %2u%%", battery_percentage);
   82fd4:	4b11      	ldr	r3, [pc, #68]	; (8301c <update_battery+0x90>)
   82fd6:	781b      	ldrb	r3, [r3, #0]
   82fd8:	461a      	mov	r2, r3
   82fda:	f107 0308 	add.w	r3, r7, #8
   82fde:	4913      	ldr	r1, [pc, #76]	; (8302c <update_battery+0xa0>)
   82fe0:	4618      	mov	r0, r3
   82fe2:	4b11      	ldr	r3, [pc, #68]	; (83028 <update_battery+0x9c>)
   82fe4:	4798      	blx	r3
   82fe6:	e008      	b.n	82ffa <update_battery+0x6e>
        }
        else
        {
            sprintf(tmp, "  %1u%%", battery_percentage);
   82fe8:	4b0c      	ldr	r3, [pc, #48]	; (8301c <update_battery+0x90>)
   82fea:	781b      	ldrb	r3, [r3, #0]
   82fec:	461a      	mov	r2, r3
   82fee:	f107 0308 	add.w	r3, r7, #8
   82ff2:	490f      	ldr	r1, [pc, #60]	; (83030 <update_battery+0xa4>)
   82ff4:	4618      	mov	r0, r3
   82ff6:	4b0c      	ldr	r3, [pc, #48]	; (83028 <update_battery+0x9c>)
   82ff8:	4798      	blx	r3
        }
            
        lcd_print_s(1, 16, tmp);
   82ffa:	f107 0308 	add.w	r3, r7, #8
   82ffe:	461a      	mov	r2, r3
   83000:	2110      	movs	r1, #16
   83002:	2001      	movs	r0, #1
   83004:	4b0b      	ldr	r3, [pc, #44]	; (83034 <update_battery+0xa8>)
   83006:	4798      	blx	r3
        prev_battery_percentage = battery_percentage;
   83008:	4b04      	ldr	r3, [pc, #16]	; (8301c <update_battery+0x90>)
   8300a:	781a      	ldrb	r2, [r3, #0]
   8300c:	4b04      	ldr	r3, [pc, #16]	; (83020 <update_battery+0x94>)
   8300e:	701a      	strb	r2, [r3, #0]
    }
}
   83010:	bf00      	nop
   83012:	3710      	adds	r7, #16
   83014:	46bd      	mov	sp, r7
   83016:	bd80      	pop	{r7, pc}
   83018:	20070e34 	.word	0x20070e34
   8301c:	20070fdc 	.word	0x20070fdc
   83020:	20070dec 	.word	0x20070dec
   83024:	00089468 	.word	0x00089468
   83028:	00085351 	.word	0x00085351
   8302c:	00089470 	.word	0x00089470
   83030:	00089478 	.word	0x00089478
   83034:	0008164d 	.word	0x0008164d

00083038 <update_heartbeat>:

void update_heartbeat(void)
{
   83038:	b580      	push	{r7, lr}
   8303a:	af00      	add	r7, sp, #0
    if (heart_state)
   8303c:	4b20      	ldr	r3, [pc, #128]	; (830c0 <update_heartbeat+0x88>)
   8303e:	781b      	ldrb	r3, [r3, #0]
   83040:	2b00      	cmp	r3, #0
   83042:	d01d      	beq.n	83080 <update_heartbeat+0x48>
    {
        if (getTicks() >= (ticks_heartbeat + 100))
   83044:	4b1f      	ldr	r3, [pc, #124]	; (830c4 <update_heartbeat+0x8c>)
   83046:	4798      	blx	r3
   83048:	4602      	mov	r2, r0
   8304a:	4b1f      	ldr	r3, [pc, #124]	; (830c8 <update_heartbeat+0x90>)
   8304c:	681b      	ldr	r3, [r3, #0]
   8304e:	3364      	adds	r3, #100	; 0x64
   83050:	429a      	cmp	r2, r3
   83052:	d333      	bcc.n	830bc <update_heartbeat+0x84>
        {
            ticks_heartbeat = getTicks();
   83054:	4b1b      	ldr	r3, [pc, #108]	; (830c4 <update_heartbeat+0x8c>)
   83056:	4798      	blx	r3
   83058:	4602      	mov	r2, r0
   8305a:	4b1b      	ldr	r3, [pc, #108]	; (830c8 <update_heartbeat+0x90>)
   8305c:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 0);
   8305e:	2100      	movs	r1, #0
   83060:	206a      	movs	r0, #106	; 0x6a
   83062:	4b1a      	ldr	r3, [pc, #104]	; (830cc <update_heartbeat+0x94>)
   83064:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 0);
   83066:	2100      	movs	r1, #0
   83068:	2067      	movs	r0, #103	; 0x67
   8306a:	4b18      	ldr	r3, [pc, #96]	; (830cc <update_heartbeat+0x94>)
   8306c:	4798      	blx	r3
            mts.ibit.heartbeat = 0;
   8306e:	4a18      	ldr	r2, [pc, #96]	; (830d0 <update_heartbeat+0x98>)
   83070:	7813      	ldrb	r3, [r2, #0]
   83072:	f36f 0300 	bfc	r3, #0, #1
   83076:	7013      	strb	r3, [r2, #0]
            heart_state = 0;
   83078:	4b11      	ldr	r3, [pc, #68]	; (830c0 <update_heartbeat+0x88>)
   8307a:	2200      	movs	r2, #0
   8307c:	701a      	strb	r2, [r3, #0]
            ioport_set_pin_level(LED_M1, 1);
            mts.ibit.heartbeat = 1;
            heart_state = 1;
        }
    }
}
   8307e:	e01d      	b.n	830bc <update_heartbeat+0x84>
        if (getTicks() >= (ticks_heartbeat + 900))
   83080:	4b10      	ldr	r3, [pc, #64]	; (830c4 <update_heartbeat+0x8c>)
   83082:	4798      	blx	r3
   83084:	4602      	mov	r2, r0
   83086:	4b10      	ldr	r3, [pc, #64]	; (830c8 <update_heartbeat+0x90>)
   83088:	681b      	ldr	r3, [r3, #0]
   8308a:	f503 7361 	add.w	r3, r3, #900	; 0x384
   8308e:	429a      	cmp	r2, r3
   83090:	d314      	bcc.n	830bc <update_heartbeat+0x84>
            ticks_heartbeat = getTicks();
   83092:	4b0c      	ldr	r3, [pc, #48]	; (830c4 <update_heartbeat+0x8c>)
   83094:	4798      	blx	r3
   83096:	4602      	mov	r2, r0
   83098:	4b0b      	ldr	r3, [pc, #44]	; (830c8 <update_heartbeat+0x90>)
   8309a:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 1);
   8309c:	2101      	movs	r1, #1
   8309e:	206a      	movs	r0, #106	; 0x6a
   830a0:	4b0a      	ldr	r3, [pc, #40]	; (830cc <update_heartbeat+0x94>)
   830a2:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 1);
   830a4:	2101      	movs	r1, #1
   830a6:	2067      	movs	r0, #103	; 0x67
   830a8:	4b08      	ldr	r3, [pc, #32]	; (830cc <update_heartbeat+0x94>)
   830aa:	4798      	blx	r3
            mts.ibit.heartbeat = 1;
   830ac:	4a08      	ldr	r2, [pc, #32]	; (830d0 <update_heartbeat+0x98>)
   830ae:	7813      	ldrb	r3, [r2, #0]
   830b0:	f043 0301 	orr.w	r3, r3, #1
   830b4:	7013      	strb	r3, [r2, #0]
            heart_state = 1;
   830b6:	4b02      	ldr	r3, [pc, #8]	; (830c0 <update_heartbeat+0x88>)
   830b8:	2201      	movs	r2, #1
   830ba:	701a      	strb	r2, [r3, #0]
}
   830bc:	bf00      	nop
   830be:	bd80      	pop	{r7, pc}
   830c0:	20070e38 	.word	0x20070e38
   830c4:	00082f05 	.word	0x00082f05
   830c8:	20070e48 	.word	0x20070e48
   830cc:	00082e7d 	.word	0x00082e7d
   830d0:	20070e30 	.word	0x20070e30

000830d4 <osc_enable>:
{
   830d4:	b580      	push	{r7, lr}
   830d6:	b082      	sub	sp, #8
   830d8:	af00      	add	r7, sp, #0
   830da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   830dc:	687b      	ldr	r3, [r7, #4]
   830de:	2b07      	cmp	r3, #7
   830e0:	d831      	bhi.n	83146 <osc_enable+0x72>
   830e2:	a201      	add	r2, pc, #4	; (adr r2, 830e8 <osc_enable+0x14>)
   830e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   830e8:	00083145 	.word	0x00083145
   830ec:	00083109 	.word	0x00083109
   830f0:	00083111 	.word	0x00083111
   830f4:	00083119 	.word	0x00083119
   830f8:	00083121 	.word	0x00083121
   830fc:	00083129 	.word	0x00083129
   83100:	00083131 	.word	0x00083131
   83104:	0008313b 	.word	0x0008313b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83108:	2000      	movs	r0, #0
   8310a:	4b11      	ldr	r3, [pc, #68]	; (83150 <osc_enable+0x7c>)
   8310c:	4798      	blx	r3
		break;
   8310e:	e01a      	b.n	83146 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   83110:	2001      	movs	r0, #1
   83112:	4b0f      	ldr	r3, [pc, #60]	; (83150 <osc_enable+0x7c>)
   83114:	4798      	blx	r3
		break;
   83116:	e016      	b.n	83146 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83118:	2000      	movs	r0, #0
   8311a:	4b0e      	ldr	r3, [pc, #56]	; (83154 <osc_enable+0x80>)
   8311c:	4798      	blx	r3
		break;
   8311e:	e012      	b.n	83146 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83120:	2010      	movs	r0, #16
   83122:	4b0c      	ldr	r3, [pc, #48]	; (83154 <osc_enable+0x80>)
   83124:	4798      	blx	r3
		break;
   83126:	e00e      	b.n	83146 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83128:	2020      	movs	r0, #32
   8312a:	4b0a      	ldr	r3, [pc, #40]	; (83154 <osc_enable+0x80>)
   8312c:	4798      	blx	r3
		break;
   8312e:	e00a      	b.n	83146 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   83130:	213e      	movs	r1, #62	; 0x3e
   83132:	2000      	movs	r0, #0
   83134:	4b08      	ldr	r3, [pc, #32]	; (83158 <osc_enable+0x84>)
   83136:	4798      	blx	r3
		break;
   83138:	e005      	b.n	83146 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   8313a:	213e      	movs	r1, #62	; 0x3e
   8313c:	2001      	movs	r0, #1
   8313e:	4b06      	ldr	r3, [pc, #24]	; (83158 <osc_enable+0x84>)
   83140:	4798      	blx	r3
		break;
   83142:	e000      	b.n	83146 <osc_enable+0x72>
		break;
   83144:	bf00      	nop
}
   83146:	bf00      	nop
   83148:	3708      	adds	r7, #8
   8314a:	46bd      	mov	sp, r7
   8314c:	bd80      	pop	{r7, pc}
   8314e:	bf00      	nop
   83150:	00083711 	.word	0x00083711
   83154:	0008377d 	.word	0x0008377d
   83158:	000837ed 	.word	0x000837ed

0008315c <osc_is_ready>:
{
   8315c:	b580      	push	{r7, lr}
   8315e:	b082      	sub	sp, #8
   83160:	af00      	add	r7, sp, #0
   83162:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83164:	687b      	ldr	r3, [r7, #4]
   83166:	2b07      	cmp	r3, #7
   83168:	d826      	bhi.n	831b8 <osc_is_ready+0x5c>
   8316a:	a201      	add	r2, pc, #4	; (adr r2, 83170 <osc_is_ready+0x14>)
   8316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83170:	00083191 	.word	0x00083191
   83174:	00083195 	.word	0x00083195
   83178:	00083195 	.word	0x00083195
   8317c:	000831a7 	.word	0x000831a7
   83180:	000831a7 	.word	0x000831a7
   83184:	000831a7 	.word	0x000831a7
   83188:	000831a7 	.word	0x000831a7
   8318c:	000831a7 	.word	0x000831a7
		return 1;
   83190:	2301      	movs	r3, #1
   83192:	e012      	b.n	831ba <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   83194:	4b0b      	ldr	r3, [pc, #44]	; (831c4 <osc_is_ready+0x68>)
   83196:	4798      	blx	r3
   83198:	4603      	mov	r3, r0
   8319a:	2b00      	cmp	r3, #0
   8319c:	bf14      	ite	ne
   8319e:	2301      	movne	r3, #1
   831a0:	2300      	moveq	r3, #0
   831a2:	b2db      	uxtb	r3, r3
   831a4:	e009      	b.n	831ba <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   831a6:	4b08      	ldr	r3, [pc, #32]	; (831c8 <osc_is_ready+0x6c>)
   831a8:	4798      	blx	r3
   831aa:	4603      	mov	r3, r0
   831ac:	2b00      	cmp	r3, #0
   831ae:	bf14      	ite	ne
   831b0:	2301      	movne	r3, #1
   831b2:	2300      	moveq	r3, #0
   831b4:	b2db      	uxtb	r3, r3
   831b6:	e000      	b.n	831ba <osc_is_ready+0x5e>
	return 0;
   831b8:	2300      	movs	r3, #0
}
   831ba:	4618      	mov	r0, r3
   831bc:	3708      	adds	r7, #8
   831be:	46bd      	mov	sp, r7
   831c0:	bd80      	pop	{r7, pc}
   831c2:	bf00      	nop
   831c4:	00083749 	.word	0x00083749
   831c8:	00083865 	.word	0x00083865

000831cc <osc_get_rate>:
{
   831cc:	b480      	push	{r7}
   831ce:	b083      	sub	sp, #12
   831d0:	af00      	add	r7, sp, #0
   831d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   831d4:	687b      	ldr	r3, [r7, #4]
   831d6:	2b07      	cmp	r3, #7
   831d8:	d825      	bhi.n	83226 <osc_get_rate+0x5a>
   831da:	a201      	add	r2, pc, #4	; (adr r2, 831e0 <osc_get_rate+0x14>)
   831dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   831e0:	00083201 	.word	0x00083201
   831e4:	00083207 	.word	0x00083207
   831e8:	0008320d 	.word	0x0008320d
   831ec:	00083213 	.word	0x00083213
   831f0:	00083217 	.word	0x00083217
   831f4:	0008321b 	.word	0x0008321b
   831f8:	0008321f 	.word	0x0008321f
   831fc:	00083223 	.word	0x00083223
		return OSC_SLCK_32K_RC_HZ;
   83200:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83204:	e010      	b.n	83228 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   83206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8320a:	e00d      	b.n	83228 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   8320c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83210:	e00a      	b.n	83228 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   83212:	4b08      	ldr	r3, [pc, #32]	; (83234 <osc_get_rate+0x68>)
   83214:	e008      	b.n	83228 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   83216:	4b08      	ldr	r3, [pc, #32]	; (83238 <osc_get_rate+0x6c>)
   83218:	e006      	b.n	83228 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8321a:	4b08      	ldr	r3, [pc, #32]	; (8323c <osc_get_rate+0x70>)
   8321c:	e004      	b.n	83228 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8321e:	4b07      	ldr	r3, [pc, #28]	; (8323c <osc_get_rate+0x70>)
   83220:	e002      	b.n	83228 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   83222:	4b06      	ldr	r3, [pc, #24]	; (8323c <osc_get_rate+0x70>)
   83224:	e000      	b.n	83228 <osc_get_rate+0x5c>
	return 0;
   83226:	2300      	movs	r3, #0
}
   83228:	4618      	mov	r0, r3
   8322a:	370c      	adds	r7, #12
   8322c:	46bd      	mov	sp, r7
   8322e:	bc80      	pop	{r7}
   83230:	4770      	bx	lr
   83232:	bf00      	nop
   83234:	003d0900 	.word	0x003d0900
   83238:	007a1200 	.word	0x007a1200
   8323c:	00b71b00 	.word	0x00b71b00

00083240 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   83240:	b580      	push	{r7, lr}
   83242:	b082      	sub	sp, #8
   83244:	af00      	add	r7, sp, #0
   83246:	4603      	mov	r3, r0
   83248:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8324a:	bf00      	nop
   8324c:	79fb      	ldrb	r3, [r7, #7]
   8324e:	4618      	mov	r0, r3
   83250:	4b05      	ldr	r3, [pc, #20]	; (83268 <osc_wait_ready+0x28>)
   83252:	4798      	blx	r3
   83254:	4603      	mov	r3, r0
   83256:	f083 0301 	eor.w	r3, r3, #1
   8325a:	b2db      	uxtb	r3, r3
   8325c:	2b00      	cmp	r3, #0
   8325e:	d1f5      	bne.n	8324c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   83260:	bf00      	nop
   83262:	3708      	adds	r7, #8
   83264:	46bd      	mov	sp, r7
   83266:	bd80      	pop	{r7, pc}
   83268:	0008315d 	.word	0x0008315d

0008326c <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   8326c:	b580      	push	{r7, lr}
   8326e:	b086      	sub	sp, #24
   83270:	af00      	add	r7, sp, #0
   83272:	60f8      	str	r0, [r7, #12]
   83274:	607a      	str	r2, [r7, #4]
   83276:	603b      	str	r3, [r7, #0]
   83278:	460b      	mov	r3, r1
   8327a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8327c:	687b      	ldr	r3, [r7, #4]
   8327e:	2b00      	cmp	r3, #0
   83280:	d107      	bne.n	83292 <pll_config_init+0x26>
   83282:	683b      	ldr	r3, [r7, #0]
   83284:	2b00      	cmp	r3, #0
   83286:	d104      	bne.n	83292 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   83288:	68fb      	ldr	r3, [r7, #12]
   8328a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8328e:	601a      	str	r2, [r3, #0]
   83290:	e019      	b.n	832c6 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   83292:	7afb      	ldrb	r3, [r7, #11]
   83294:	4618      	mov	r0, r3
   83296:	4b0e      	ldr	r3, [pc, #56]	; (832d0 <pll_config_init+0x64>)
   83298:	4798      	blx	r3
   8329a:	4602      	mov	r2, r0
   8329c:	687b      	ldr	r3, [r7, #4]
   8329e:	fbb2 f3f3 	udiv	r3, r2, r3
   832a2:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   832a4:	697b      	ldr	r3, [r7, #20]
   832a6:	683a      	ldr	r2, [r7, #0]
   832a8:	fb02 f303 	mul.w	r3, r2, r3
   832ac:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   832ae:	683b      	ldr	r3, [r7, #0]
   832b0:	3b01      	subs	r3, #1
   832b2:	041a      	lsls	r2, r3, #16
   832b4:	4b07      	ldr	r3, [pc, #28]	; (832d4 <pll_config_init+0x68>)
   832b6:	4013      	ands	r3, r2
   832b8:	687a      	ldr	r2, [r7, #4]
   832ba:	b2d2      	uxtb	r2, r2
   832bc:	4313      	orrs	r3, r2
   832be:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   832c2:	68fb      	ldr	r3, [r7, #12]
   832c4:	601a      	str	r2, [r3, #0]
	}
}
   832c6:	bf00      	nop
   832c8:	3718      	adds	r7, #24
   832ca:	46bd      	mov	sp, r7
   832cc:	bd80      	pop	{r7, pc}
   832ce:	bf00      	nop
   832d0:	000831cd 	.word	0x000831cd
   832d4:	07ff0000 	.word	0x07ff0000

000832d8 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   832d8:	b580      	push	{r7, lr}
   832da:	b082      	sub	sp, #8
   832dc:	af00      	add	r7, sp, #0
   832de:	6078      	str	r0, [r7, #4]
   832e0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   832e2:	683b      	ldr	r3, [r7, #0]
   832e4:	2b00      	cmp	r3, #0
   832e6:	d108      	bne.n	832fa <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   832e8:	4b09      	ldr	r3, [pc, #36]	; (83310 <pll_enable+0x38>)
   832ea:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   832ec:	4a09      	ldr	r2, [pc, #36]	; (83314 <pll_enable+0x3c>)
   832ee:	687b      	ldr	r3, [r7, #4]
   832f0:	681b      	ldr	r3, [r3, #0]
   832f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   832f6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   832f8:	e005      	b.n	83306 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   832fa:	4a06      	ldr	r2, [pc, #24]	; (83314 <pll_enable+0x3c>)
   832fc:	687b      	ldr	r3, [r7, #4]
   832fe:	681b      	ldr	r3, [r3, #0]
   83300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83304:	61d3      	str	r3, [r2, #28]
}
   83306:	bf00      	nop
   83308:	3708      	adds	r7, #8
   8330a:	46bd      	mov	sp, r7
   8330c:	bd80      	pop	{r7, pc}
   8330e:	bf00      	nop
   83310:	0008387d 	.word	0x0008387d
   83314:	400e0600 	.word	0x400e0600

00083318 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   83318:	b580      	push	{r7, lr}
   8331a:	b082      	sub	sp, #8
   8331c:	af00      	add	r7, sp, #0
   8331e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   83320:	687b      	ldr	r3, [r7, #4]
   83322:	2b00      	cmp	r3, #0
   83324:	d103      	bne.n	8332e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   83326:	4b05      	ldr	r3, [pc, #20]	; (8333c <pll_is_locked+0x24>)
   83328:	4798      	blx	r3
   8332a:	4603      	mov	r3, r0
   8332c:	e002      	b.n	83334 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8332e:	4b04      	ldr	r3, [pc, #16]	; (83340 <pll_is_locked+0x28>)
   83330:	4798      	blx	r3
   83332:	4603      	mov	r3, r0
	}
}
   83334:	4618      	mov	r0, r3
   83336:	3708      	adds	r7, #8
   83338:	46bd      	mov	sp, r7
   8333a:	bd80      	pop	{r7, pc}
   8333c:	00083895 	.word	0x00083895
   83340:	000838ad 	.word	0x000838ad

00083344 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   83344:	b580      	push	{r7, lr}
   83346:	b082      	sub	sp, #8
   83348:	af00      	add	r7, sp, #0
   8334a:	4603      	mov	r3, r0
   8334c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8334e:	79fb      	ldrb	r3, [r7, #7]
   83350:	3b03      	subs	r3, #3
   83352:	2b04      	cmp	r3, #4
   83354:	d808      	bhi.n	83368 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   83356:	79fb      	ldrb	r3, [r7, #7]
   83358:	4618      	mov	r0, r3
   8335a:	4b06      	ldr	r3, [pc, #24]	; (83374 <pll_enable_source+0x30>)
   8335c:	4798      	blx	r3
		osc_wait_ready(e_src);
   8335e:	79fb      	ldrb	r3, [r7, #7]
   83360:	4618      	mov	r0, r3
   83362:	4b05      	ldr	r3, [pc, #20]	; (83378 <pll_enable_source+0x34>)
   83364:	4798      	blx	r3
		break;
   83366:	e000      	b.n	8336a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   83368:	bf00      	nop
	}
}
   8336a:	bf00      	nop
   8336c:	3708      	adds	r7, #8
   8336e:	46bd      	mov	sp, r7
   83370:	bd80      	pop	{r7, pc}
   83372:	bf00      	nop
   83374:	000830d5 	.word	0x000830d5
   83378:	00083241 	.word	0x00083241

0008337c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   8337c:	b580      	push	{r7, lr}
   8337e:	b082      	sub	sp, #8
   83380:	af00      	add	r7, sp, #0
   83382:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83384:	bf00      	nop
   83386:	6878      	ldr	r0, [r7, #4]
   83388:	4b04      	ldr	r3, [pc, #16]	; (8339c <pll_wait_for_lock+0x20>)
   8338a:	4798      	blx	r3
   8338c:	4603      	mov	r3, r0
   8338e:	2b00      	cmp	r3, #0
   83390:	d0f9      	beq.n	83386 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   83392:	2300      	movs	r3, #0
}
   83394:	4618      	mov	r0, r3
   83396:	3708      	adds	r7, #8
   83398:	46bd      	mov	sp, r7
   8339a:	bd80      	pop	{r7, pc}
   8339c:	00083319 	.word	0x00083319

000833a0 <sysclk_get_main_hz>:
{
   833a0:	b580      	push	{r7, lr}
   833a2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   833a4:	2006      	movs	r0, #6
   833a6:	4b04      	ldr	r3, [pc, #16]	; (833b8 <sysclk_get_main_hz+0x18>)
   833a8:	4798      	blx	r3
   833aa:	4602      	mov	r2, r0
   833ac:	4613      	mov	r3, r2
   833ae:	00db      	lsls	r3, r3, #3
   833b0:	1a9b      	subs	r3, r3, r2
   833b2:	005b      	lsls	r3, r3, #1
}
   833b4:	4618      	mov	r0, r3
   833b6:	bd80      	pop	{r7, pc}
   833b8:	000831cd 	.word	0x000831cd

000833bc <sysclk_get_cpu_hz>:
{
   833bc:	b580      	push	{r7, lr}
   833be:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   833c0:	4b02      	ldr	r3, [pc, #8]	; (833cc <sysclk_get_cpu_hz+0x10>)
   833c2:	4798      	blx	r3
   833c4:	4603      	mov	r3, r0
   833c6:	085b      	lsrs	r3, r3, #1
}
   833c8:	4618      	mov	r0, r3
   833ca:	bd80      	pop	{r7, pc}
   833cc:	000833a1 	.word	0x000833a1

000833d0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   833d0:	b590      	push	{r4, r7, lr}
   833d2:	b083      	sub	sp, #12
   833d4:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   833d6:	4811      	ldr	r0, [pc, #68]	; (8341c <sysclk_init+0x4c>)
   833d8:	4b11      	ldr	r3, [pc, #68]	; (83420 <sysclk_init+0x50>)
   833da:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   833dc:	2006      	movs	r0, #6
   833de:	4b11      	ldr	r3, [pc, #68]	; (83424 <sysclk_init+0x54>)
   833e0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   833e2:	1d38      	adds	r0, r7, #4
   833e4:	230e      	movs	r3, #14
   833e6:	2201      	movs	r2, #1
   833e8:	2106      	movs	r1, #6
   833ea:	4c0f      	ldr	r4, [pc, #60]	; (83428 <sysclk_init+0x58>)
   833ec:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   833ee:	1d3b      	adds	r3, r7, #4
   833f0:	2100      	movs	r1, #0
   833f2:	4618      	mov	r0, r3
   833f4:	4b0d      	ldr	r3, [pc, #52]	; (8342c <sysclk_init+0x5c>)
   833f6:	4798      	blx	r3
		pll_wait_for_lock(0);
   833f8:	2000      	movs	r0, #0
   833fa:	4b0d      	ldr	r3, [pc, #52]	; (83430 <sysclk_init+0x60>)
   833fc:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   833fe:	2010      	movs	r0, #16
   83400:	4b0c      	ldr	r3, [pc, #48]	; (83434 <sysclk_init+0x64>)
   83402:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83404:	4b0c      	ldr	r3, [pc, #48]	; (83438 <sysclk_init+0x68>)
   83406:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83408:	4b0c      	ldr	r3, [pc, #48]	; (8343c <sysclk_init+0x6c>)
   8340a:	4798      	blx	r3
   8340c:	4603      	mov	r3, r0
   8340e:	4618      	mov	r0, r3
   83410:	4b03      	ldr	r3, [pc, #12]	; (83420 <sysclk_init+0x50>)
   83412:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83414:	bf00      	nop
   83416:	370c      	adds	r7, #12
   83418:	46bd      	mov	sp, r7
   8341a:	bd90      	pop	{r4, r7, pc}
   8341c:	0501bd00 	.word	0x0501bd00
   83420:	200700d1 	.word	0x200700d1
   83424:	00083345 	.word	0x00083345
   83428:	0008326d 	.word	0x0008326d
   8342c:	000832d9 	.word	0x000832d9
   83430:	0008337d 	.word	0x0008337d
   83434:	00083691 	.word	0x00083691
   83438:	00083e49 	.word	0x00083e49
   8343c:	000833bd 	.word	0x000833bd

00083440 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   83440:	b580      	push	{r7, lr}
   83442:	b082      	sub	sp, #8
   83444:	af00      	add	r7, sp, #0
   83446:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   83448:	6878      	ldr	r0, [r7, #4]
   8344a:	4b03      	ldr	r3, [pc, #12]	; (83458 <dmac_init+0x18>)
   8344c:	4798      	blx	r3
}
   8344e:	bf00      	nop
   83450:	3708      	adds	r7, #8
   83452:	46bd      	mov	sp, r7
   83454:	bd80      	pop	{r7, pc}
   83456:	bf00      	nop
   83458:	0008349b 	.word	0x0008349b

0008345c <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   8345c:	b480      	push	{r7}
   8345e:	b083      	sub	sp, #12
   83460:	af00      	add	r7, sp, #0
   83462:	6078      	str	r0, [r7, #4]
   83464:	460b      	mov	r3, r1
   83466:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   83468:	687b      	ldr	r3, [r7, #4]
   8346a:	681b      	ldr	r3, [r3, #0]
   8346c:	f023 0210 	bic.w	r2, r3, #16
   83470:	78fb      	ldrb	r3, [r7, #3]
   83472:	431a      	orrs	r2, r3
   83474:	687b      	ldr	r3, [r7, #4]
   83476:	601a      	str	r2, [r3, #0]
}
   83478:	bf00      	nop
   8347a:	370c      	adds	r7, #12
   8347c:	46bd      	mov	sp, r7
   8347e:	bc80      	pop	{r7}
   83480:	4770      	bx	lr

00083482 <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   83482:	b480      	push	{r7}
   83484:	b083      	sub	sp, #12
   83486:	af00      	add	r7, sp, #0
   83488:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   8348a:	687b      	ldr	r3, [r7, #4]
   8348c:	2201      	movs	r2, #1
   8348e:	605a      	str	r2, [r3, #4]
}
   83490:	bf00      	nop
   83492:	370c      	adds	r7, #12
   83494:	46bd      	mov	sp, r7
   83496:	bc80      	pop	{r7}
   83498:	4770      	bx	lr

0008349a <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   8349a:	b480      	push	{r7}
   8349c:	b083      	sub	sp, #12
   8349e:	af00      	add	r7, sp, #0
   834a0:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   834a2:	687b      	ldr	r3, [r7, #4]
   834a4:	685b      	ldr	r3, [r3, #4]
   834a6:	f023 0201 	bic.w	r2, r3, #1
   834aa:	687b      	ldr	r3, [r7, #4]
   834ac:	605a      	str	r2, [r3, #4]
}
   834ae:	bf00      	nop
   834b0:	370c      	adds	r7, #12
   834b2:	46bd      	mov	sp, r7
   834b4:	bc80      	pop	{r7}
   834b6:	4770      	bx	lr

000834b8 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   834b8:	b480      	push	{r7}
   834ba:	b083      	sub	sp, #12
   834bc:	af00      	add	r7, sp, #0
   834be:	6078      	str	r0, [r7, #4]
   834c0:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   834c2:	687b      	ldr	r3, [r7, #4]
   834c4:	683a      	ldr	r2, [r7, #0]
   834c6:	619a      	str	r2, [r3, #24]
}
   834c8:	bf00      	nop
   834ca:	370c      	adds	r7, #12
   834cc:	46bd      	mov	sp, r7
   834ce:	bc80      	pop	{r7}
   834d0:	4770      	bx	lr

000834d2 <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   834d2:	b480      	push	{r7}
   834d4:	b083      	sub	sp, #12
   834d6:	af00      	add	r7, sp, #0
   834d8:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   834da:	687b      	ldr	r3, [r7, #4]
   834dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   834de:	4618      	mov	r0, r3
   834e0:	370c      	adds	r7, #12
   834e2:	46bd      	mov	sp, r7
   834e4:	bc80      	pop	{r7}
   834e6:	4770      	bx	lr

000834e8 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   834e8:	b480      	push	{r7}
   834ea:	b083      	sub	sp, #12
   834ec:	af00      	add	r7, sp, #0
   834ee:	6078      	str	r0, [r7, #4]
   834f0:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   834f2:	2201      	movs	r2, #1
   834f4:	683b      	ldr	r3, [r7, #0]
   834f6:	409a      	lsls	r2, r3
   834f8:	687b      	ldr	r3, [r7, #4]
   834fa:	629a      	str	r2, [r3, #40]	; 0x28
}
   834fc:	bf00      	nop
   834fe:	370c      	adds	r7, #12
   83500:	46bd      	mov	sp, r7
   83502:	bc80      	pop	{r7}
   83504:	4770      	bx	lr

00083506 <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   83506:	b480      	push	{r7}
   83508:	b083      	sub	sp, #12
   8350a:	af00      	add	r7, sp, #0
   8350c:	6078      	str	r0, [r7, #4]
   8350e:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   83510:	2201      	movs	r2, #1
   83512:	683b      	ldr	r3, [r7, #0]
   83514:	409a      	lsls	r2, r3
   83516:	687b      	ldr	r3, [r7, #4]
   83518:	62da      	str	r2, [r3, #44]	; 0x2c
}
   8351a:	bf00      	nop
   8351c:	370c      	adds	r7, #12
   8351e:	46bd      	mov	sp, r7
   83520:	bc80      	pop	{r7}
   83522:	4770      	bx	lr

00083524 <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   83524:	b480      	push	{r7}
   83526:	b085      	sub	sp, #20
   83528:	af00      	add	r7, sp, #0
   8352a:	60f8      	str	r0, [r7, #12]
   8352c:	60b9      	str	r1, [r7, #8]
   8352e:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   83530:	68f9      	ldr	r1, [r7, #12]
   83532:	68ba      	ldr	r2, [r7, #8]
   83534:	4613      	mov	r3, r2
   83536:	009b      	lsls	r3, r3, #2
   83538:	4413      	add	r3, r2
   8353a:	00db      	lsls	r3, r3, #3
   8353c:	440b      	add	r3, r1
   8353e:	333c      	adds	r3, #60	; 0x3c
   83540:	687a      	ldr	r2, [r7, #4]
   83542:	601a      	str	r2, [r3, #0]
}
   83544:	bf00      	nop
   83546:	3714      	adds	r7, #20
   83548:	46bd      	mov	sp, r7
   8354a:	bc80      	pop	{r7}
   8354c:	4770      	bx	lr

0008354e <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   8354e:	b480      	push	{r7}
   83550:	b085      	sub	sp, #20
   83552:	af00      	add	r7, sp, #0
   83554:	60f8      	str	r0, [r7, #12]
   83556:	60b9      	str	r1, [r7, #8]
   83558:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   8355a:	68f9      	ldr	r1, [r7, #12]
   8355c:	68ba      	ldr	r2, [r7, #8]
   8355e:	4613      	mov	r3, r2
   83560:	009b      	lsls	r3, r3, #2
   83562:	4413      	add	r3, r2
   83564:	00db      	lsls	r3, r3, #3
   83566:	440b      	add	r3, r1
   83568:	3340      	adds	r3, #64	; 0x40
   8356a:	687a      	ldr	r2, [r7, #4]
   8356c:	601a      	str	r2, [r3, #0]
}
   8356e:	bf00      	nop
   83570:	3714      	adds	r7, #20
   83572:	46bd      	mov	sp, r7
   83574:	bc80      	pop	{r7}
   83576:	4770      	bx	lr

00083578 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   83578:	b480      	push	{r7}
   8357a:	b085      	sub	sp, #20
   8357c:	af00      	add	r7, sp, #0
   8357e:	60f8      	str	r0, [r7, #12]
   83580:	60b9      	str	r1, [r7, #8]
   83582:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   83584:	68f9      	ldr	r1, [r7, #12]
   83586:	68ba      	ldr	r2, [r7, #8]
   83588:	4613      	mov	r3, r2
   8358a:	009b      	lsls	r3, r3, #2
   8358c:	4413      	add	r3, r2
   8358e:	00db      	lsls	r3, r3, #3
   83590:	440b      	add	r3, r1
   83592:	3344      	adds	r3, #68	; 0x44
   83594:	687a      	ldr	r2, [r7, #4]
   83596:	601a      	str	r2, [r3, #0]
}
   83598:	bf00      	nop
   8359a:	3714      	adds	r7, #20
   8359c:	46bd      	mov	sp, r7
   8359e:	bc80      	pop	{r7}
   835a0:	4770      	bx	lr

000835a2 <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   835a2:	b480      	push	{r7}
   835a4:	b085      	sub	sp, #20
   835a6:	af00      	add	r7, sp, #0
   835a8:	60f8      	str	r0, [r7, #12]
   835aa:	60b9      	str	r1, [r7, #8]
   835ac:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   835ae:	68f9      	ldr	r1, [r7, #12]
   835b0:	68ba      	ldr	r2, [r7, #8]
   835b2:	4613      	mov	r3, r2
   835b4:	009b      	lsls	r3, r3, #2
   835b6:	4413      	add	r3, r2
   835b8:	00db      	lsls	r3, r3, #3
   835ba:	440b      	add	r3, r1
   835bc:	3348      	adds	r3, #72	; 0x48
   835be:	687a      	ldr	r2, [r7, #4]
   835c0:	601a      	str	r2, [r3, #0]
}
   835c2:	bf00      	nop
   835c4:	3714      	adds	r7, #20
   835c6:	46bd      	mov	sp, r7
   835c8:	bc80      	pop	{r7}
   835ca:	4770      	bx	lr

000835cc <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   835cc:	b480      	push	{r7}
   835ce:	b085      	sub	sp, #20
   835d0:	af00      	add	r7, sp, #0
   835d2:	60f8      	str	r0, [r7, #12]
   835d4:	60b9      	str	r1, [r7, #8]
   835d6:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   835d8:	68f9      	ldr	r1, [r7, #12]
   835da:	68ba      	ldr	r2, [r7, #8]
   835dc:	4613      	mov	r3, r2
   835de:	009b      	lsls	r3, r3, #2
   835e0:	4413      	add	r3, r2
   835e2:	00db      	lsls	r3, r3, #3
   835e4:	440b      	add	r3, r1
   835e6:	334c      	adds	r3, #76	; 0x4c
   835e8:	687a      	ldr	r2, [r7, #4]
   835ea:	601a      	str	r2, [r3, #0]
}
   835ec:	bf00      	nop
   835ee:	3714      	adds	r7, #20
   835f0:	46bd      	mov	sp, r7
   835f2:	bc80      	pop	{r7}
   835f4:	4770      	bx	lr

000835f6 <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   835f6:	b480      	push	{r7}
   835f8:	b085      	sub	sp, #20
   835fa:	af00      	add	r7, sp, #0
   835fc:	60f8      	str	r0, [r7, #12]
   835fe:	60b9      	str	r1, [r7, #8]
   83600:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   83602:	68f9      	ldr	r1, [r7, #12]
   83604:	68ba      	ldr	r2, [r7, #8]
   83606:	4613      	mov	r3, r2
   83608:	009b      	lsls	r3, r3, #2
   8360a:	4413      	add	r3, r2
   8360c:	00db      	lsls	r3, r3, #3
   8360e:	440b      	add	r3, r1
   83610:	3350      	adds	r3, #80	; 0x50
   83612:	687a      	ldr	r2, [r7, #4]
   83614:	601a      	str	r2, [r3, #0]
}
   83616:	bf00      	nop
   83618:	3714      	adds	r7, #20
   8361a:	46bd      	mov	sp, r7
   8361c:	bc80      	pop	{r7}
   8361e:	4770      	bx	lr

00083620 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   83620:	b580      	push	{r7, lr}
   83622:	b084      	sub	sp, #16
   83624:	af00      	add	r7, sp, #0
   83626:	60f8      	str	r0, [r7, #12]
   83628:	60b9      	str	r1, [r7, #8]
   8362a:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   8362c:	68fb      	ldr	r3, [r7, #12]
   8362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   83630:	687b      	ldr	r3, [r7, #4]
   83632:	681b      	ldr	r3, [r3, #0]
   83634:	461a      	mov	r2, r3
   83636:	68b9      	ldr	r1, [r7, #8]
   83638:	68f8      	ldr	r0, [r7, #12]
   8363a:	4b10      	ldr	r3, [pc, #64]	; (8367c <dmac_channel_single_buf_transfer_init+0x5c>)
   8363c:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   8363e:	687b      	ldr	r3, [r7, #4]
   83640:	685b      	ldr	r3, [r3, #4]
   83642:	461a      	mov	r2, r3
   83644:	68b9      	ldr	r1, [r7, #8]
   83646:	68f8      	ldr	r0, [r7, #12]
   83648:	4b0d      	ldr	r3, [pc, #52]	; (83680 <dmac_channel_single_buf_transfer_init+0x60>)
   8364a:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   8364c:	2200      	movs	r2, #0
   8364e:	68b9      	ldr	r1, [r7, #8]
   83650:	68f8      	ldr	r0, [r7, #12]
   83652:	4b0c      	ldr	r3, [pc, #48]	; (83684 <dmac_channel_single_buf_transfer_init+0x64>)
   83654:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   83656:	687b      	ldr	r3, [r7, #4]
   83658:	689b      	ldr	r3, [r3, #8]
   8365a:	461a      	mov	r2, r3
   8365c:	68b9      	ldr	r1, [r7, #8]
   8365e:	68f8      	ldr	r0, [r7, #12]
   83660:	4b09      	ldr	r3, [pc, #36]	; (83688 <dmac_channel_single_buf_transfer_init+0x68>)
   83662:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   83664:	687b      	ldr	r3, [r7, #4]
   83666:	68db      	ldr	r3, [r3, #12]
   83668:	461a      	mov	r2, r3
   8366a:	68b9      	ldr	r1, [r7, #8]
   8366c:	68f8      	ldr	r0, [r7, #12]
   8366e:	4b07      	ldr	r3, [pc, #28]	; (8368c <dmac_channel_single_buf_transfer_init+0x6c>)
   83670:	4798      	blx	r3
}
   83672:	bf00      	nop
   83674:	3710      	adds	r7, #16
   83676:	46bd      	mov	sp, r7
   83678:	bd80      	pop	{r7, pc}
   8367a:	bf00      	nop
   8367c:	00083525 	.word	0x00083525
   83680:	0008354f 	.word	0x0008354f
   83684:	00083579 	.word	0x00083579
   83688:	000835a3 	.word	0x000835a3
   8368c:	000835cd 	.word	0x000835cd

00083690 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83690:	b480      	push	{r7}
   83692:	b085      	sub	sp, #20
   83694:	af00      	add	r7, sp, #0
   83696:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83698:	491c      	ldr	r1, [pc, #112]	; (8370c <pmc_switch_mck_to_pllack+0x7c>)
   8369a:	4b1c      	ldr	r3, [pc, #112]	; (8370c <pmc_switch_mck_to_pllack+0x7c>)
   8369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8369e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   836a2:	687b      	ldr	r3, [r7, #4]
   836a4:	4313      	orrs	r3, r2
   836a6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   836ac:	60fb      	str	r3, [r7, #12]
   836ae:	e007      	b.n	836c0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   836b0:	68fb      	ldr	r3, [r7, #12]
   836b2:	2b00      	cmp	r3, #0
   836b4:	d101      	bne.n	836ba <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   836b6:	2301      	movs	r3, #1
   836b8:	e023      	b.n	83702 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   836ba:	68fb      	ldr	r3, [r7, #12]
   836bc:	3b01      	subs	r3, #1
   836be:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836c0:	4b12      	ldr	r3, [pc, #72]	; (8370c <pmc_switch_mck_to_pllack+0x7c>)
   836c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   836c4:	f003 0308 	and.w	r3, r3, #8
   836c8:	2b00      	cmp	r3, #0
   836ca:	d0f1      	beq.n	836b0 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   836cc:	4a0f      	ldr	r2, [pc, #60]	; (8370c <pmc_switch_mck_to_pllack+0x7c>)
   836ce:	4b0f      	ldr	r3, [pc, #60]	; (8370c <pmc_switch_mck_to_pllack+0x7c>)
   836d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   836d2:	f023 0303 	bic.w	r3, r3, #3
   836d6:	f043 0302 	orr.w	r3, r3, #2
   836da:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   836e0:	60fb      	str	r3, [r7, #12]
   836e2:	e007      	b.n	836f4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   836e4:	68fb      	ldr	r3, [r7, #12]
   836e6:	2b00      	cmp	r3, #0
   836e8:	d101      	bne.n	836ee <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   836ea:	2301      	movs	r3, #1
   836ec:	e009      	b.n	83702 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   836ee:	68fb      	ldr	r3, [r7, #12]
   836f0:	3b01      	subs	r3, #1
   836f2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836f4:	4b05      	ldr	r3, [pc, #20]	; (8370c <pmc_switch_mck_to_pllack+0x7c>)
   836f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   836f8:	f003 0308 	and.w	r3, r3, #8
   836fc:	2b00      	cmp	r3, #0
   836fe:	d0f1      	beq.n	836e4 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   83700:	2300      	movs	r3, #0
}
   83702:	4618      	mov	r0, r3
   83704:	3714      	adds	r7, #20
   83706:	46bd      	mov	sp, r7
   83708:	bc80      	pop	{r7}
   8370a:	4770      	bx	lr
   8370c:	400e0600 	.word	0x400e0600

00083710 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   83710:	b480      	push	{r7}
   83712:	b083      	sub	sp, #12
   83714:	af00      	add	r7, sp, #0
   83716:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83718:	687b      	ldr	r3, [r7, #4]
   8371a:	2b01      	cmp	r3, #1
   8371c:	d107      	bne.n	8372e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   8371e:	4a08      	ldr	r2, [pc, #32]	; (83740 <pmc_switch_sclk_to_32kxtal+0x30>)
   83720:	4b07      	ldr	r3, [pc, #28]	; (83740 <pmc_switch_sclk_to_32kxtal+0x30>)
   83722:	689b      	ldr	r3, [r3, #8]
   83724:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8372c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   8372e:	4b04      	ldr	r3, [pc, #16]	; (83740 <pmc_switch_sclk_to_32kxtal+0x30>)
   83730:	4a04      	ldr	r2, [pc, #16]	; (83744 <pmc_switch_sclk_to_32kxtal+0x34>)
   83732:	601a      	str	r2, [r3, #0]
}
   83734:	bf00      	nop
   83736:	370c      	adds	r7, #12
   83738:	46bd      	mov	sp, r7
   8373a:	bc80      	pop	{r7}
   8373c:	4770      	bx	lr
   8373e:	bf00      	nop
   83740:	400e1a10 	.word	0x400e1a10
   83744:	a5000008 	.word	0xa5000008

00083748 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83748:	b480      	push	{r7}
   8374a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   8374c:	4b09      	ldr	r3, [pc, #36]	; (83774 <pmc_osc_is_ready_32kxtal+0x2c>)
   8374e:	695b      	ldr	r3, [r3, #20]
   83750:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83754:	2b00      	cmp	r3, #0
   83756:	d007      	beq.n	83768 <pmc_osc_is_ready_32kxtal+0x20>
   83758:	4b07      	ldr	r3, [pc, #28]	; (83778 <pmc_osc_is_ready_32kxtal+0x30>)
   8375a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83760:	2b00      	cmp	r3, #0
   83762:	d001      	beq.n	83768 <pmc_osc_is_ready_32kxtal+0x20>
   83764:	2301      	movs	r3, #1
   83766:	e000      	b.n	8376a <pmc_osc_is_ready_32kxtal+0x22>
   83768:	2300      	movs	r3, #0
}
   8376a:	4618      	mov	r0, r3
   8376c:	46bd      	mov	sp, r7
   8376e:	bc80      	pop	{r7}
   83770:	4770      	bx	lr
   83772:	bf00      	nop
   83774:	400e1a10 	.word	0x400e1a10
   83778:	400e0600 	.word	0x400e0600

0008377c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   8377c:	b480      	push	{r7}
   8377e:	b083      	sub	sp, #12
   83780:	af00      	add	r7, sp, #0
   83782:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   83784:	4a18      	ldr	r2, [pc, #96]	; (837e8 <pmc_switch_mainck_to_fastrc+0x6c>)
   83786:	4b18      	ldr	r3, [pc, #96]	; (837e8 <pmc_switch_mainck_to_fastrc+0x6c>)
   83788:	6a1b      	ldr	r3, [r3, #32]
   8378a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8378e:	f043 0308 	orr.w	r3, r3, #8
   83792:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83794:	bf00      	nop
   83796:	4b14      	ldr	r3, [pc, #80]	; (837e8 <pmc_switch_mainck_to_fastrc+0x6c>)
   83798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8379e:	2b00      	cmp	r3, #0
   837a0:	d0f9      	beq.n	83796 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   837a2:	4911      	ldr	r1, [pc, #68]	; (837e8 <pmc_switch_mainck_to_fastrc+0x6c>)
   837a4:	4b10      	ldr	r3, [pc, #64]	; (837e8 <pmc_switch_mainck_to_fastrc+0x6c>)
   837a6:	6a1b      	ldr	r3, [r3, #32]
   837a8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   837ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   837b0:	687a      	ldr	r2, [r7, #4]
   837b2:	4313      	orrs	r3, r2
   837b4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   837b8:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   837ba:	bf00      	nop
   837bc:	4b0a      	ldr	r3, [pc, #40]	; (837e8 <pmc_switch_mainck_to_fastrc+0x6c>)
   837be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   837c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   837c4:	2b00      	cmp	r3, #0
   837c6:	d0f9      	beq.n	837bc <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   837c8:	4a07      	ldr	r2, [pc, #28]	; (837e8 <pmc_switch_mainck_to_fastrc+0x6c>)
   837ca:	4b07      	ldr	r3, [pc, #28]	; (837e8 <pmc_switch_mainck_to_fastrc+0x6c>)
   837cc:	6a1b      	ldr	r3, [r3, #32]
   837ce:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   837d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   837d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   837da:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   837dc:	bf00      	nop
   837de:	370c      	adds	r7, #12
   837e0:	46bd      	mov	sp, r7
   837e2:	bc80      	pop	{r7}
   837e4:	4770      	bx	lr
   837e6:	bf00      	nop
   837e8:	400e0600 	.word	0x400e0600

000837ec <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   837ec:	b480      	push	{r7}
   837ee:	b083      	sub	sp, #12
   837f0:	af00      	add	r7, sp, #0
   837f2:	6078      	str	r0, [r7, #4]
   837f4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   837f6:	687b      	ldr	r3, [r7, #4]
   837f8:	2b00      	cmp	r3, #0
   837fa:	d008      	beq.n	8380e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   837fc:	4916      	ldr	r1, [pc, #88]	; (83858 <pmc_switch_mainck_to_xtal+0x6c>)
   837fe:	4b16      	ldr	r3, [pc, #88]	; (83858 <pmc_switch_mainck_to_xtal+0x6c>)
   83800:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83802:	4a16      	ldr	r2, [pc, #88]	; (8385c <pmc_switch_mainck_to_xtal+0x70>)
   83804:	401a      	ands	r2, r3
   83806:	4b16      	ldr	r3, [pc, #88]	; (83860 <pmc_switch_mainck_to_xtal+0x74>)
   83808:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8380a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   8380c:	e01e      	b.n	8384c <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8380e:	4912      	ldr	r1, [pc, #72]	; (83858 <pmc_switch_mainck_to_xtal+0x6c>)
   83810:	4b11      	ldr	r3, [pc, #68]	; (83858 <pmc_switch_mainck_to_xtal+0x6c>)
   83812:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83814:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83818:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8381c:	683a      	ldr	r2, [r7, #0]
   8381e:	0212      	lsls	r2, r2, #8
   83820:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83822:	4313      	orrs	r3, r2
   83824:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83828:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8382c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8382e:	bf00      	nop
   83830:	4b09      	ldr	r3, [pc, #36]	; (83858 <pmc_switch_mainck_to_xtal+0x6c>)
   83832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83834:	f003 0301 	and.w	r3, r3, #1
   83838:	2b00      	cmp	r3, #0
   8383a:	d0f9      	beq.n	83830 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8383c:	4a06      	ldr	r2, [pc, #24]	; (83858 <pmc_switch_mainck_to_xtal+0x6c>)
   8383e:	4b06      	ldr	r3, [pc, #24]	; (83858 <pmc_switch_mainck_to_xtal+0x6c>)
   83840:	6a1b      	ldr	r3, [r3, #32]
   83842:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8384a:	6213      	str	r3, [r2, #32]
}
   8384c:	bf00      	nop
   8384e:	370c      	adds	r7, #12
   83850:	46bd      	mov	sp, r7
   83852:	bc80      	pop	{r7}
   83854:	4770      	bx	lr
   83856:	bf00      	nop
   83858:	400e0600 	.word	0x400e0600
   8385c:	fec8fffc 	.word	0xfec8fffc
   83860:	01370002 	.word	0x01370002

00083864 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83864:	b480      	push	{r7}
   83866:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83868:	4b03      	ldr	r3, [pc, #12]	; (83878 <pmc_osc_is_ready_mainck+0x14>)
   8386a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8386c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83870:	4618      	mov	r0, r3
   83872:	46bd      	mov	sp, r7
   83874:	bc80      	pop	{r7}
   83876:	4770      	bx	lr
   83878:	400e0600 	.word	0x400e0600

0008387c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   8387c:	b480      	push	{r7}
   8387e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83880:	4b03      	ldr	r3, [pc, #12]	; (83890 <pmc_disable_pllack+0x14>)
   83882:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83886:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83888:	bf00      	nop
   8388a:	46bd      	mov	sp, r7
   8388c:	bc80      	pop	{r7}
   8388e:	4770      	bx	lr
   83890:	400e0600 	.word	0x400e0600

00083894 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83894:	b480      	push	{r7}
   83896:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83898:	4b03      	ldr	r3, [pc, #12]	; (838a8 <pmc_is_locked_pllack+0x14>)
   8389a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8389c:	f003 0302 	and.w	r3, r3, #2
}
   838a0:	4618      	mov	r0, r3
   838a2:	46bd      	mov	sp, r7
   838a4:	bc80      	pop	{r7}
   838a6:	4770      	bx	lr
   838a8:	400e0600 	.word	0x400e0600

000838ac <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   838ac:	b480      	push	{r7}
   838ae:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   838b0:	4b03      	ldr	r3, [pc, #12]	; (838c0 <pmc_is_locked_upll+0x14>)
   838b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   838b8:	4618      	mov	r0, r3
   838ba:	46bd      	mov	sp, r7
   838bc:	bc80      	pop	{r7}
   838be:	4770      	bx	lr
   838c0:	400e0600 	.word	0x400e0600

000838c4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   838c4:	b480      	push	{r7}
   838c6:	b083      	sub	sp, #12
   838c8:	af00      	add	r7, sp, #0
   838ca:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   838cc:	687b      	ldr	r3, [r7, #4]
   838ce:	2b2c      	cmp	r3, #44	; 0x2c
   838d0:	d901      	bls.n	838d6 <pmc_enable_periph_clk+0x12>
		return 1;
   838d2:	2301      	movs	r3, #1
   838d4:	e02f      	b.n	83936 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   838d6:	687b      	ldr	r3, [r7, #4]
   838d8:	2b1f      	cmp	r3, #31
   838da:	d813      	bhi.n	83904 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   838dc:	4b18      	ldr	r3, [pc, #96]	; (83940 <pmc_enable_periph_clk+0x7c>)
   838de:	699a      	ldr	r2, [r3, #24]
   838e0:	2101      	movs	r1, #1
   838e2:	687b      	ldr	r3, [r7, #4]
   838e4:	fa01 f303 	lsl.w	r3, r1, r3
   838e8:	401a      	ands	r2, r3
   838ea:	2101      	movs	r1, #1
   838ec:	687b      	ldr	r3, [r7, #4]
   838ee:	fa01 f303 	lsl.w	r3, r1, r3
   838f2:	429a      	cmp	r2, r3
   838f4:	d01e      	beq.n	83934 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   838f6:	4a12      	ldr	r2, [pc, #72]	; (83940 <pmc_enable_periph_clk+0x7c>)
   838f8:	2101      	movs	r1, #1
   838fa:	687b      	ldr	r3, [r7, #4]
   838fc:	fa01 f303 	lsl.w	r3, r1, r3
   83900:	6113      	str	r3, [r2, #16]
   83902:	e017      	b.n	83934 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   83904:	687b      	ldr	r3, [r7, #4]
   83906:	3b20      	subs	r3, #32
   83908:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8390a:	4b0d      	ldr	r3, [pc, #52]	; (83940 <pmc_enable_periph_clk+0x7c>)
   8390c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83910:	2101      	movs	r1, #1
   83912:	687b      	ldr	r3, [r7, #4]
   83914:	fa01 f303 	lsl.w	r3, r1, r3
   83918:	401a      	ands	r2, r3
   8391a:	2101      	movs	r1, #1
   8391c:	687b      	ldr	r3, [r7, #4]
   8391e:	fa01 f303 	lsl.w	r3, r1, r3
   83922:	429a      	cmp	r2, r3
   83924:	d006      	beq.n	83934 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   83926:	4a06      	ldr	r2, [pc, #24]	; (83940 <pmc_enable_periph_clk+0x7c>)
   83928:	2101      	movs	r1, #1
   8392a:	687b      	ldr	r3, [r7, #4]
   8392c:	fa01 f303 	lsl.w	r3, r1, r3
   83930:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   83934:	2300      	movs	r3, #0
}
   83936:	4618      	mov	r0, r3
   83938:	370c      	adds	r7, #12
   8393a:	46bd      	mov	sp, r7
   8393c:	bc80      	pop	{r7}
   8393e:	4770      	bx	lr
   83940:	400e0600 	.word	0x400e0600

00083944 <sysclk_enable_peripheral_clock>:
{
   83944:	b580      	push	{r7, lr}
   83946:	b082      	sub	sp, #8
   83948:	af00      	add	r7, sp, #0
   8394a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8394c:	6878      	ldr	r0, [r7, #4]
   8394e:	4b03      	ldr	r3, [pc, #12]	; (8395c <sysclk_enable_peripheral_clock+0x18>)
   83950:	4798      	blx	r3
}
   83952:	bf00      	nop
   83954:	3708      	adds	r7, #8
   83956:	46bd      	mov	sp, r7
   83958:	bd80      	pop	{r7, pc}
   8395a:	bf00      	nop
   8395c:	000838c5 	.word	0x000838c5

00083960 <ioport_init>:
{
   83960:	b580      	push	{r7, lr}
   83962:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   83964:	200b      	movs	r0, #11
   83966:	4b06      	ldr	r3, [pc, #24]	; (83980 <ioport_init+0x20>)
   83968:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   8396a:	200c      	movs	r0, #12
   8396c:	4b04      	ldr	r3, [pc, #16]	; (83980 <ioport_init+0x20>)
   8396e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   83970:	200d      	movs	r0, #13
   83972:	4b03      	ldr	r3, [pc, #12]	; (83980 <ioport_init+0x20>)
   83974:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   83976:	200e      	movs	r0, #14
   83978:	4b01      	ldr	r3, [pc, #4]	; (83980 <ioport_init+0x20>)
   8397a:	4798      	blx	r3
}
   8397c:	bf00      	nop
   8397e:	bd80      	pop	{r7, pc}
   83980:	00083945 	.word	0x00083945

00083984 <ioport_disable_pin>:
{
   83984:	b480      	push	{r7}
   83986:	b089      	sub	sp, #36	; 0x24
   83988:	af00      	add	r7, sp, #0
   8398a:	6078      	str	r0, [r7, #4]
   8398c:	687b      	ldr	r3, [r7, #4]
   8398e:	61fb      	str	r3, [r7, #28]
   83990:	69fb      	ldr	r3, [r7, #28]
   83992:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83994:	69bb      	ldr	r3, [r7, #24]
   83996:	095a      	lsrs	r2, r3, #5
   83998:	69fb      	ldr	r3, [r7, #28]
   8399a:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   8399c:	697b      	ldr	r3, [r7, #20]
   8399e:	f003 031f 	and.w	r3, r3, #31
   839a2:	2101      	movs	r1, #1
   839a4:	fa01 f303 	lsl.w	r3, r1, r3
   839a8:	613a      	str	r2, [r7, #16]
   839aa:	60fb      	str	r3, [r7, #12]
   839ac:	693b      	ldr	r3, [r7, #16]
   839ae:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   839b0:	68bb      	ldr	r3, [r7, #8]
   839b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   839b6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   839ba:	025b      	lsls	r3, r3, #9
   839bc:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   839be:	68fb      	ldr	r3, [r7, #12]
   839c0:	6053      	str	r3, [r2, #4]
}
   839c2:	bf00      	nop
   839c4:	3724      	adds	r7, #36	; 0x24
   839c6:	46bd      	mov	sp, r7
   839c8:	bc80      	pop	{r7}
   839ca:	4770      	bx	lr

000839cc <ioport_set_pin_mode>:
{
   839cc:	b480      	push	{r7}
   839ce:	b08d      	sub	sp, #52	; 0x34
   839d0:	af00      	add	r7, sp, #0
   839d2:	6078      	str	r0, [r7, #4]
   839d4:	6039      	str	r1, [r7, #0]
   839d6:	687b      	ldr	r3, [r7, #4]
   839d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   839da:	683b      	ldr	r3, [r7, #0]
   839dc:	62bb      	str	r3, [r7, #40]	; 0x28
   839de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   839e0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   839e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   839e4:	095a      	lsrs	r2, r3, #5
   839e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   839e8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   839ea:	6a3b      	ldr	r3, [r7, #32]
   839ec:	f003 031f 	and.w	r3, r3, #31
   839f0:	2101      	movs	r1, #1
   839f2:	fa01 f303 	lsl.w	r3, r1, r3
   839f6:	61fa      	str	r2, [r7, #28]
   839f8:	61bb      	str	r3, [r7, #24]
   839fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   839fc:	617b      	str	r3, [r7, #20]
   839fe:	69fb      	ldr	r3, [r7, #28]
   83a00:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83a02:	693b      	ldr	r3, [r7, #16]
   83a04:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83a08:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83a0c:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   83a0e:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   83a10:	697b      	ldr	r3, [r7, #20]
   83a12:	f003 0308 	and.w	r3, r3, #8
   83a16:	2b00      	cmp	r3, #0
   83a18:	d003      	beq.n	83a22 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   83a1a:	68fb      	ldr	r3, [r7, #12]
   83a1c:	69ba      	ldr	r2, [r7, #24]
   83a1e:	665a      	str	r2, [r3, #100]	; 0x64
   83a20:	e002      	b.n	83a28 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   83a22:	68fb      	ldr	r3, [r7, #12]
   83a24:	69ba      	ldr	r2, [r7, #24]
   83a26:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   83a28:	697b      	ldr	r3, [r7, #20]
   83a2a:	f003 0320 	and.w	r3, r3, #32
   83a2e:	2b00      	cmp	r3, #0
   83a30:	d003      	beq.n	83a3a <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   83a32:	68fb      	ldr	r3, [r7, #12]
   83a34:	69ba      	ldr	r2, [r7, #24]
   83a36:	651a      	str	r2, [r3, #80]	; 0x50
   83a38:	e002      	b.n	83a40 <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   83a3a:	68fb      	ldr	r3, [r7, #12]
   83a3c:	69ba      	ldr	r2, [r7, #24]
   83a3e:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   83a40:	697b      	ldr	r3, [r7, #20]
   83a42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   83a46:	2b00      	cmp	r3, #0
   83a48:	d003      	beq.n	83a52 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   83a4a:	68fb      	ldr	r3, [r7, #12]
   83a4c:	69ba      	ldr	r2, [r7, #24]
   83a4e:	621a      	str	r2, [r3, #32]
   83a50:	e002      	b.n	83a58 <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   83a52:	68fb      	ldr	r3, [r7, #12]
   83a54:	69ba      	ldr	r2, [r7, #24]
   83a56:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   83a58:	697b      	ldr	r3, [r7, #20]
   83a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83a5e:	2b00      	cmp	r3, #0
   83a60:	d004      	beq.n	83a6c <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   83a62:	68fb      	ldr	r3, [r7, #12]
   83a64:	69ba      	ldr	r2, [r7, #24]
   83a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   83a6a:	e003      	b.n	83a74 <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   83a6c:	68fb      	ldr	r3, [r7, #12]
   83a6e:	69ba      	ldr	r2, [r7, #24]
   83a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   83a74:	697b      	ldr	r3, [r7, #20]
   83a76:	f003 0301 	and.w	r3, r3, #1
   83a7a:	2b00      	cmp	r3, #0
   83a7c:	d006      	beq.n	83a8c <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   83a7e:	68fb      	ldr	r3, [r7, #12]
   83a80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83a82:	69bb      	ldr	r3, [r7, #24]
   83a84:	431a      	orrs	r2, r3
   83a86:	68fb      	ldr	r3, [r7, #12]
   83a88:	671a      	str	r2, [r3, #112]	; 0x70
}
   83a8a:	e006      	b.n	83a9a <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   83a8c:	68fb      	ldr	r3, [r7, #12]
   83a8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83a90:	69bb      	ldr	r3, [r7, #24]
   83a92:	43db      	mvns	r3, r3
   83a94:	401a      	ands	r2, r3
   83a96:	68fb      	ldr	r3, [r7, #12]
   83a98:	671a      	str	r2, [r3, #112]	; 0x70
   83a9a:	bf00      	nop
   83a9c:	3734      	adds	r7, #52	; 0x34
   83a9e:	46bd      	mov	sp, r7
   83aa0:	bc80      	pop	{r7}
   83aa2:	4770      	bx	lr

00083aa4 <ioport_set_pin_dir>:
{
   83aa4:	b480      	push	{r7}
   83aa6:	b08d      	sub	sp, #52	; 0x34
   83aa8:	af00      	add	r7, sp, #0
   83aaa:	6078      	str	r0, [r7, #4]
   83aac:	460b      	mov	r3, r1
   83aae:	70fb      	strb	r3, [r7, #3]
   83ab0:	687b      	ldr	r3, [r7, #4]
   83ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   83ab4:	78fb      	ldrb	r3, [r7, #3]
   83ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   83aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83abc:	627b      	str	r3, [r7, #36]	; 0x24
   83abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83ac0:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   83ac2:	6a3b      	ldr	r3, [r7, #32]
   83ac4:	095b      	lsrs	r3, r3, #5
   83ac6:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83ac8:	69fb      	ldr	r3, [r7, #28]
   83aca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83ace:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83ad2:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83ad4:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   83ad6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83ada:	2b01      	cmp	r3, #1
   83adc:	d109      	bne.n	83af2 <ioport_set_pin_dir+0x4e>
   83ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83ae0:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   83ae2:	697b      	ldr	r3, [r7, #20]
   83ae4:	f003 031f 	and.w	r3, r3, #31
   83ae8:	2201      	movs	r2, #1
   83aea:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83aec:	69bb      	ldr	r3, [r7, #24]
   83aee:	611a      	str	r2, [r3, #16]
   83af0:	e00c      	b.n	83b0c <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   83af2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83af6:	2b00      	cmp	r3, #0
   83af8:	d108      	bne.n	83b0c <ioport_set_pin_dir+0x68>
   83afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83afc:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   83afe:	693b      	ldr	r3, [r7, #16]
   83b00:	f003 031f 	and.w	r3, r3, #31
   83b04:	2201      	movs	r2, #1
   83b06:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   83b08:	69bb      	ldr	r3, [r7, #24]
   83b0a:	615a      	str	r2, [r3, #20]
   83b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83b0e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83b10:	68fb      	ldr	r3, [r7, #12]
   83b12:	f003 031f 	and.w	r3, r3, #31
   83b16:	2201      	movs	r2, #1
   83b18:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83b1a:	69bb      	ldr	r3, [r7, #24]
   83b1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   83b20:	bf00      	nop
   83b22:	3734      	adds	r7, #52	; 0x34
   83b24:	46bd      	mov	sp, r7
   83b26:	bc80      	pop	{r7}
   83b28:	4770      	bx	lr

00083b2a <ioport_set_pin_level>:
{
   83b2a:	b480      	push	{r7}
   83b2c:	b08b      	sub	sp, #44	; 0x2c
   83b2e:	af00      	add	r7, sp, #0
   83b30:	6078      	str	r0, [r7, #4]
   83b32:	460b      	mov	r3, r1
   83b34:	70fb      	strb	r3, [r7, #3]
   83b36:	687b      	ldr	r3, [r7, #4]
   83b38:	627b      	str	r3, [r7, #36]	; 0x24
   83b3a:	78fb      	ldrb	r3, [r7, #3]
   83b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   83b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83b42:	61fb      	str	r3, [r7, #28]
   83b44:	69fb      	ldr	r3, [r7, #28]
   83b46:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83b48:	69bb      	ldr	r3, [r7, #24]
   83b4a:	095b      	lsrs	r3, r3, #5
   83b4c:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83b4e:	697b      	ldr	r3, [r7, #20]
   83b50:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83b54:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83b58:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83b5a:	613b      	str	r3, [r7, #16]
	if (level) {
   83b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83b60:	2b00      	cmp	r3, #0
   83b62:	d009      	beq.n	83b78 <ioport_set_pin_level+0x4e>
   83b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83b66:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83b68:	68fb      	ldr	r3, [r7, #12]
   83b6a:	f003 031f 	and.w	r3, r3, #31
   83b6e:	2201      	movs	r2, #1
   83b70:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   83b72:	693b      	ldr	r3, [r7, #16]
   83b74:	631a      	str	r2, [r3, #48]	; 0x30
}
   83b76:	e008      	b.n	83b8a <ioport_set_pin_level+0x60>
   83b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83b7a:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   83b7c:	68bb      	ldr	r3, [r7, #8]
   83b7e:	f003 031f 	and.w	r3, r3, #31
   83b82:	2201      	movs	r2, #1
   83b84:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83b86:	693b      	ldr	r3, [r7, #16]
   83b88:	635a      	str	r2, [r3, #52]	; 0x34
   83b8a:	bf00      	nop
   83b8c:	372c      	adds	r7, #44	; 0x2c
   83b8e:	46bd      	mov	sp, r7
   83b90:	bc80      	pop	{r7}
   83b92:	4770      	bx	lr

00083b94 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   83b94:	b580      	push	{r7, lr}
   83b96:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83b98:	4b79      	ldr	r3, [pc, #484]	; (83d80 <board_init+0x1ec>)
   83b9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83b9e:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   83ba0:	4b78      	ldr	r3, [pc, #480]	; (83d84 <board_init+0x1f0>)
   83ba2:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   83ba4:	2101      	movs	r1, #1
   83ba6:	206a      	movs	r0, #106	; 0x6a
   83ba8:	4b77      	ldr	r3, [pc, #476]	; (83d88 <board_init+0x1f4>)
   83baa:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   83bac:	2100      	movs	r1, #0
   83bae:	206a      	movs	r0, #106	; 0x6a
   83bb0:	4b76      	ldr	r3, [pc, #472]	; (83d8c <board_init+0x1f8>)
   83bb2:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   83bb4:	2101      	movs	r1, #1
   83bb6:	2067      	movs	r0, #103	; 0x67
   83bb8:	4b73      	ldr	r3, [pc, #460]	; (83d88 <board_init+0x1f4>)
   83bba:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   83bbc:	2100      	movs	r1, #0
   83bbe:	2067      	movs	r0, #103	; 0x67
   83bc0:	4b72      	ldr	r3, [pc, #456]	; (83d8c <board_init+0x1f8>)
   83bc2:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   83bc4:	2101      	movs	r1, #1
   83bc6:	2068      	movs	r0, #104	; 0x68
   83bc8:	4b6f      	ldr	r3, [pc, #444]	; (83d88 <board_init+0x1f4>)
   83bca:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   83bcc:	2100      	movs	r1, #0
   83bce:	2068      	movs	r0, #104	; 0x68
   83bd0:	4b6e      	ldr	r3, [pc, #440]	; (83d8c <board_init+0x1f8>)
   83bd2:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   83bd4:	2101      	movs	r1, #1
   83bd6:	2069      	movs	r0, #105	; 0x69
   83bd8:	4b6b      	ldr	r3, [pc, #428]	; (83d88 <board_init+0x1f4>)
   83bda:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   83bdc:	2100      	movs	r1, #0
   83bde:	2069      	movs	r0, #105	; 0x69
   83be0:	4b6a      	ldr	r3, [pc, #424]	; (83d8c <board_init+0x1f8>)
   83be2:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   83be4:	2101      	movs	r1, #1
   83be6:	2066      	movs	r0, #102	; 0x66
   83be8:	4b67      	ldr	r3, [pc, #412]	; (83d88 <board_init+0x1f4>)
   83bea:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   83bec:	2100      	movs	r1, #0
   83bee:	2066      	movs	r0, #102	; 0x66
   83bf0:	4b66      	ldr	r3, [pc, #408]	; (83d8c <board_init+0x1f8>)
   83bf2:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   83bf4:	2100      	movs	r1, #0
   83bf6:	2060      	movs	r0, #96	; 0x60
   83bf8:	4b63      	ldr	r3, [pc, #396]	; (83d88 <board_init+0x1f4>)
   83bfa:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83bfc:	2188      	movs	r1, #136	; 0x88
   83bfe:	2060      	movs	r0, #96	; 0x60
   83c00:	4b63      	ldr	r3, [pc, #396]	; (83d90 <board_init+0x1fc>)
   83c02:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   83c04:	2100      	movs	r1, #0
   83c06:	2061      	movs	r0, #97	; 0x61
   83c08:	4b5f      	ldr	r3, [pc, #380]	; (83d88 <board_init+0x1f4>)
   83c0a:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83c0c:	2188      	movs	r1, #136	; 0x88
   83c0e:	2061      	movs	r0, #97	; 0x61
   83c10:	4b5f      	ldr	r3, [pc, #380]	; (83d90 <board_init+0x1fc>)
   83c12:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   83c14:	2100      	movs	r1, #0
   83c16:	2062      	movs	r0, #98	; 0x62
   83c18:	4b5b      	ldr	r3, [pc, #364]	; (83d88 <board_init+0x1f4>)
   83c1a:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83c1c:	2188      	movs	r1, #136	; 0x88
   83c1e:	2062      	movs	r0, #98	; 0x62
   83c20:	4b5b      	ldr	r3, [pc, #364]	; (83d90 <board_init+0x1fc>)
   83c22:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   83c24:	2100      	movs	r1, #0
   83c26:	2063      	movs	r0, #99	; 0x63
   83c28:	4b57      	ldr	r3, [pc, #348]	; (83d88 <board_init+0x1f4>)
   83c2a:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83c2c:	2188      	movs	r1, #136	; 0x88
   83c2e:	2063      	movs	r0, #99	; 0x63
   83c30:	4b57      	ldr	r3, [pc, #348]	; (83d90 <board_init+0x1fc>)
   83c32:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   83c34:	2100      	movs	r1, #0
   83c36:	2064      	movs	r0, #100	; 0x64
   83c38:	4b53      	ldr	r3, [pc, #332]	; (83d88 <board_init+0x1f4>)
   83c3a:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83c3c:	2188      	movs	r1, #136	; 0x88
   83c3e:	2064      	movs	r0, #100	; 0x64
   83c40:	4b53      	ldr	r3, [pc, #332]	; (83d90 <board_init+0x1fc>)
   83c42:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   83c44:	2100      	movs	r1, #0
   83c46:	2065      	movs	r0, #101	; 0x65
   83c48:	4b4f      	ldr	r3, [pc, #316]	; (83d88 <board_init+0x1f4>)
   83c4a:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83c4c:	2188      	movs	r1, #136	; 0x88
   83c4e:	2065      	movs	r0, #101	; 0x65
   83c50:	4b4f      	ldr	r3, [pc, #316]	; (83d90 <board_init+0x1fc>)
   83c52:	4798      	blx	r3
  
  /* Configure Motor pins */
  ioport_set_pin_mode(MOTOR_LEFT_L, IOPORT_MODE_MUX_B);
   83c54:	2101      	movs	r1, #1
   83c56:	2042      	movs	r0, #66	; 0x42
   83c58:	4b4d      	ldr	r3, [pc, #308]	; (83d90 <board_init+0x1fc>)
   83c5a:	4798      	blx	r3
  ioport_set_pin_mode(MOTOR_LEFT_H, IOPORT_MODE_MUX_B);
   83c5c:	2101      	movs	r1, #1
   83c5e:	2043      	movs	r0, #67	; 0x43
   83c60:	4b4b      	ldr	r3, [pc, #300]	; (83d90 <board_init+0x1fc>)
   83c62:	4798      	blx	r3
  ioport_set_pin_mode(MOTOR_RIGHT_L, IOPORT_MODE_MUX_B);
   83c64:	2101      	movs	r1, #1
   83c66:	2044      	movs	r0, #68	; 0x44
   83c68:	4b49      	ldr	r3, [pc, #292]	; (83d90 <board_init+0x1fc>)
   83c6a:	4798      	blx	r3
  ioport_set_pin_mode(MOTOR_RIGHT_H, IOPORT_MODE_MUX_B);
   83c6c:	2101      	movs	r1, #1
   83c6e:	2045      	movs	r0, #69	; 0x45
   83c70:	4b47      	ldr	r3, [pc, #284]	; (83d90 <board_init+0x1fc>)
   83c72:	4798      	blx	r3
  ioport_set_pin_mode(MOTOR_REAR_L, IOPORT_MODE_MUX_B);
   83c74:	2101      	movs	r1, #1
   83c76:	2046      	movs	r0, #70	; 0x46
   83c78:	4b45      	ldr	r3, [pc, #276]	; (83d90 <board_init+0x1fc>)
   83c7a:	4798      	blx	r3
  ioport_set_pin_mode(MOTOR_REAR_H, IOPORT_MODE_MUX_B);
   83c7c:	2101      	movs	r1, #1
   83c7e:	2047      	movs	r0, #71	; 0x47
   83c80:	4b43      	ldr	r3, [pc, #268]	; (83d90 <board_init+0x1fc>)
   83c82:	4798      	blx	r3
  
  /* Configure Encoder pins */
  ioport_set_pin_mode(ENC_CLK, IOPORT_MODE_MUX_B);
   83c84:	2101      	movs	r1, #1
   83c86:	2055      	movs	r0, #85	; 0x55
   83c88:	4b41      	ldr	r3, [pc, #260]	; (83d90 <board_init+0x1fc>)
   83c8a:	4798      	blx	r3
  ioport_set_pin_mode(ENC_LOAD, IOPORT_DIR_OUTPUT);
   83c8c:	2101      	movs	r1, #1
   83c8e:	2020      	movs	r0, #32
   83c90:	4b3f      	ldr	r3, [pc, #252]	; (83d90 <board_init+0x1fc>)
   83c92:	4798      	blx	r3
  ioport_set_pin_level(ENC_LOAD, 1);
   83c94:	2101      	movs	r1, #1
   83c96:	2020      	movs	r0, #32
   83c98:	4b3c      	ldr	r3, [pc, #240]	; (83d8c <board_init+0x1f8>)
   83c9a:	4798      	blx	r3
  
  /* Configure Raspberry Pi GPIO pins */
  ioport_set_pin_dir(RPI1, IOPORT_DIR_OUTPUT);
   83c9c:	2101      	movs	r1, #1
   83c9e:	2001      	movs	r0, #1
   83ca0:	4b39      	ldr	r3, [pc, #228]	; (83d88 <board_init+0x1f4>)
   83ca2:	4798      	blx	r3
  ioport_set_pin_level(RPI1, 1);
   83ca4:	2101      	movs	r1, #1
   83ca6:	2001      	movs	r0, #1
   83ca8:	4b38      	ldr	r3, [pc, #224]	; (83d8c <board_init+0x1f8>)
   83caa:	4798      	blx	r3
  ioport_set_pin_dir(RPI2, IOPORT_DIR_INPUT);
   83cac:	2100      	movs	r1, #0
   83cae:	2008      	movs	r0, #8
   83cb0:	4b35      	ldr	r3, [pc, #212]	; (83d88 <board_init+0x1f4>)
   83cb2:	4798      	blx	r3
  ioport_set_pin_dir(RPI3, IOPORT_DIR_INPUT);
   83cb4:	2100      	movs	r1, #0
   83cb6:	2009      	movs	r0, #9
   83cb8:	4b33      	ldr	r3, [pc, #204]	; (83d88 <board_init+0x1f4>)
   83cba:	4798      	blx	r3
  ioport_set_pin_dir(RPI4, IOPORT_DIR_INPUT);
   83cbc:	2100      	movs	r1, #0
   83cbe:	2007      	movs	r0, #7
   83cc0:	4b31      	ldr	r3, [pc, #196]	; (83d88 <board_init+0x1f4>)
   83cc2:	4798      	blx	r3
  ioport_set_pin_dir(RPI5, IOPORT_DIR_INPUT);
   83cc4:	2100      	movs	r1, #0
   83cc6:	2005      	movs	r0, #5
   83cc8:	4b2f      	ldr	r3, [pc, #188]	; (83d88 <board_init+0x1f4>)
   83cca:	4798      	blx	r3
	ioport_set_pin_dir(RPI6, IOPORT_DIR_INPUT);
   83ccc:	2100      	movs	r1, #0
   83cce:	2000      	movs	r0, #0
   83cd0:	4b2d      	ldr	r3, [pc, #180]	; (83d88 <board_init+0x1f4>)
   83cd2:	4798      	blx	r3
  
	/* Configure I2C pins */
	ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   83cd4:	2100      	movs	r1, #0
   83cd6:	2011      	movs	r0, #17
   83cd8:	4b2d      	ldr	r3, [pc, #180]	; (83d90 <board_init+0x1fc>)
   83cda:	4798      	blx	r3
	ioport_disable_pin(I2C0_DATA);
   83cdc:	2011      	movs	r0, #17
   83cde:	4b2d      	ldr	r3, [pc, #180]	; (83d94 <board_init+0x200>)
   83ce0:	4798      	blx	r3
	ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   83ce2:	2100      	movs	r1, #0
   83ce4:	2012      	movs	r0, #18
   83ce6:	4b2a      	ldr	r3, [pc, #168]	; (83d90 <board_init+0x1fc>)
   83ce8:	4798      	blx	r3
	ioport_disable_pin(I2C0_CLK);
   83cea:	2012      	movs	r0, #18
   83cec:	4b29      	ldr	r3, [pc, #164]	; (83d94 <board_init+0x200>)
   83cee:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   83cf0:	2100      	movs	r1, #0
   83cf2:	200c      	movs	r0, #12
   83cf4:	4b26      	ldr	r3, [pc, #152]	; (83d90 <board_init+0x1fc>)
   83cf6:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   83cf8:	200c      	movs	r0, #12
   83cfa:	4b26      	ldr	r3, [pc, #152]	; (83d94 <board_init+0x200>)
   83cfc:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   83cfe:	2100      	movs	r1, #0
   83d00:	200d      	movs	r0, #13
   83d02:	4b23      	ldr	r3, [pc, #140]	; (83d90 <board_init+0x1fc>)
   83d04:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   83d06:	200d      	movs	r0, #13
   83d08:	4b22      	ldr	r3, [pc, #136]	; (83d94 <board_init+0x200>)
   83d0a:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   83d0c:	2100      	movs	r1, #0
   83d0e:	2010      	movs	r0, #16
   83d10:	4b1f      	ldr	r3, [pc, #124]	; (83d90 <board_init+0x1fc>)
   83d12:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   83d14:	2010      	movs	r0, #16
   83d16:	4b1f      	ldr	r3, [pc, #124]	; (83d94 <board_init+0x200>)
   83d18:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   83d1a:	2100      	movs	r1, #0
   83d1c:	200e      	movs	r0, #14
   83d1e:	4b1c      	ldr	r3, [pc, #112]	; (83d90 <board_init+0x1fc>)
   83d20:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   83d22:	200e      	movs	r0, #14
   83d24:	4b1b      	ldr	r3, [pc, #108]	; (83d94 <board_init+0x200>)
   83d26:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   83d28:	2100      	movs	r1, #0
   83d2a:	2014      	movs	r0, #20
   83d2c:	4b18      	ldr	r3, [pc, #96]	; (83d90 <board_init+0x1fc>)
   83d2e:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   83d30:	2014      	movs	r0, #20
   83d32:	4b18      	ldr	r3, [pc, #96]	; (83d94 <board_init+0x200>)
   83d34:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   83d36:	2100      	movs	r1, #0
   83d38:	2013      	movs	r0, #19
   83d3a:	4b15      	ldr	r3, [pc, #84]	; (83d90 <board_init+0x1fc>)
   83d3c:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   83d3e:	2013      	movs	r0, #19
   83d40:	4b14      	ldr	r3, [pc, #80]	; (83d94 <board_init+0x200>)
   83d42:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   83d44:	2100      	movs	r1, #0
   83d46:	2015      	movs	r0, #21
   83d48:	4b11      	ldr	r3, [pc, #68]	; (83d90 <board_init+0x1fc>)
   83d4a:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   83d4c:	2015      	movs	r0, #21
   83d4e:	4b11      	ldr	r3, [pc, #68]	; (83d94 <board_init+0x200>)
   83d50:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   83d52:	2100      	movs	r1, #0
   83d54:	2016      	movs	r0, #22
   83d56:	4b0e      	ldr	r3, [pc, #56]	; (83d90 <board_init+0x1fc>)
   83d58:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   83d5a:	2016      	movs	r0, #22
   83d5c:	4b0d      	ldr	r3, [pc, #52]	; (83d94 <board_init+0x200>)
   83d5e:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   83d60:	2100      	movs	r1, #0
   83d62:	2017      	movs	r0, #23
   83d64:	4b0a      	ldr	r3, [pc, #40]	; (83d90 <board_init+0x1fc>)
   83d66:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   83d68:	2017      	movs	r0, #23
   83d6a:	4b0a      	ldr	r3, [pc, #40]	; (83d94 <board_init+0x200>)
   83d6c:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   83d6e:	2100      	movs	r1, #0
   83d70:	2018      	movs	r0, #24
   83d72:	4b07      	ldr	r3, [pc, #28]	; (83d90 <board_init+0x1fc>)
   83d74:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   83d76:	2018      	movs	r0, #24
   83d78:	4b06      	ldr	r3, [pc, #24]	; (83d94 <board_init+0x200>)
   83d7a:	4798      	blx	r3
}
   83d7c:	bf00      	nop
   83d7e:	bd80      	pop	{r7, pc}
   83d80:	400e1a50 	.word	0x400e1a50
   83d84:	00083961 	.word	0x00083961
   83d88:	00083aa5 	.word	0x00083aa5
   83d8c:	00083b2b 	.word	0x00083b2b
   83d90:	000839cd 	.word	0x000839cd
   83d94:	00083985 	.word	0x00083985

00083d98 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83d98:	b480      	push	{r7}
   83d9a:	af00      	add	r7, sp, #0
	while (1) {
   83d9c:	e7fe      	b.n	83d9c <Dummy_Handler+0x4>
	...

00083da0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83da0:	b580      	push	{r7, lr}
   83da2:	b082      	sub	sp, #8
   83da4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83da6:	4b1e      	ldr	r3, [pc, #120]	; (83e20 <Reset_Handler+0x80>)
   83da8:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83daa:	4b1e      	ldr	r3, [pc, #120]	; (83e24 <Reset_Handler+0x84>)
   83dac:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83dae:	687a      	ldr	r2, [r7, #4]
   83db0:	683b      	ldr	r3, [r7, #0]
   83db2:	429a      	cmp	r2, r3
   83db4:	d00c      	beq.n	83dd0 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83db6:	e007      	b.n	83dc8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83db8:	683b      	ldr	r3, [r7, #0]
   83dba:	1d1a      	adds	r2, r3, #4
   83dbc:	603a      	str	r2, [r7, #0]
   83dbe:	687a      	ldr	r2, [r7, #4]
   83dc0:	1d11      	adds	r1, r2, #4
   83dc2:	6079      	str	r1, [r7, #4]
   83dc4:	6812      	ldr	r2, [r2, #0]
   83dc6:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   83dc8:	683b      	ldr	r3, [r7, #0]
   83dca:	4a17      	ldr	r2, [pc, #92]	; (83e28 <Reset_Handler+0x88>)
   83dcc:	4293      	cmp	r3, r2
   83dce:	d3f3      	bcc.n	83db8 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83dd0:	4b16      	ldr	r3, [pc, #88]	; (83e2c <Reset_Handler+0x8c>)
   83dd2:	603b      	str	r3, [r7, #0]
   83dd4:	e004      	b.n	83de0 <Reset_Handler+0x40>
		*pDest++ = 0;
   83dd6:	683b      	ldr	r3, [r7, #0]
   83dd8:	1d1a      	adds	r2, r3, #4
   83dda:	603a      	str	r2, [r7, #0]
   83ddc:	2200      	movs	r2, #0
   83dde:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   83de0:	683b      	ldr	r3, [r7, #0]
   83de2:	4a13      	ldr	r2, [pc, #76]	; (83e30 <Reset_Handler+0x90>)
   83de4:	4293      	cmp	r3, r2
   83de6:	d3f6      	bcc.n	83dd6 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83de8:	4b12      	ldr	r3, [pc, #72]	; (83e34 <Reset_Handler+0x94>)
   83dea:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83dec:	4a12      	ldr	r2, [pc, #72]	; (83e38 <Reset_Handler+0x98>)
   83dee:	687b      	ldr	r3, [r7, #4]
   83df0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83df4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83df8:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   83dfa:	687b      	ldr	r3, [r7, #4]
   83dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83e00:	d309      	bcc.n	83e16 <Reset_Handler+0x76>
   83e02:	687b      	ldr	r3, [r7, #4]
   83e04:	4a0d      	ldr	r2, [pc, #52]	; (83e3c <Reset_Handler+0x9c>)
   83e06:	4293      	cmp	r3, r2
   83e08:	d805      	bhi.n	83e16 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83e0a:	4a0b      	ldr	r2, [pc, #44]	; (83e38 <Reset_Handler+0x98>)
   83e0c:	4b0a      	ldr	r3, [pc, #40]	; (83e38 <Reset_Handler+0x98>)
   83e0e:	689b      	ldr	r3, [r3, #8]
   83e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83e14:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83e16:	4b0a      	ldr	r3, [pc, #40]	; (83e40 <Reset_Handler+0xa0>)
   83e18:	4798      	blx	r3

	/* Branch to main function */
	main();
   83e1a:	4b0a      	ldr	r3, [pc, #40]	; (83e44 <Reset_Handler+0xa4>)
   83e1c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83e1e:	e7fe      	b.n	83e1e <Reset_Handler+0x7e>
   83e20:	0008974c 	.word	0x0008974c
   83e24:	20070000 	.word	0x20070000
   83e28:	20070b50 	.word	0x20070b50
   83e2c:	20070b50 	.word	0x20070b50
   83e30:	20071018 	.word	0x20071018
   83e34:	00080000 	.word	0x00080000
   83e38:	e000ed00 	.word	0xe000ed00
   83e3c:	200fffff 	.word	0x200fffff
   83e40:	00085265 	.word	0x00085265
   83e44:	00084219 	.word	0x00084219

00083e48 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83e48:	b480      	push	{r7}
   83e4a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83e4c:	4b57      	ldr	r3, [pc, #348]	; (83fac <SystemCoreClockUpdate+0x164>)
   83e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83e50:	f003 0303 	and.w	r3, r3, #3
   83e54:	2b03      	cmp	r3, #3
   83e56:	f200 808a 	bhi.w	83f6e <SystemCoreClockUpdate+0x126>
   83e5a:	a201      	add	r2, pc, #4	; (adr r2, 83e60 <SystemCoreClockUpdate+0x18>)
   83e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83e60:	00083e71 	.word	0x00083e71
   83e64:	00083e91 	.word	0x00083e91
   83e68:	00083ee1 	.word	0x00083ee1
   83e6c:	00083ee1 	.word	0x00083ee1
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83e70:	4b4f      	ldr	r3, [pc, #316]	; (83fb0 <SystemCoreClockUpdate+0x168>)
   83e72:	695b      	ldr	r3, [r3, #20]
   83e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83e78:	2b00      	cmp	r3, #0
   83e7a:	d004      	beq.n	83e86 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83e7c:	4b4d      	ldr	r3, [pc, #308]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83e7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83e82:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83e84:	e073      	b.n	83f6e <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83e86:	4b4b      	ldr	r3, [pc, #300]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83e88:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83e8c:	601a      	str	r2, [r3, #0]
		break;
   83e8e:	e06e      	b.n	83f6e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83e90:	4b46      	ldr	r3, [pc, #280]	; (83fac <SystemCoreClockUpdate+0x164>)
   83e92:	6a1b      	ldr	r3, [r3, #32]
   83e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83e98:	2b00      	cmp	r3, #0
   83e9a:	d003      	beq.n	83ea4 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83e9c:	4b45      	ldr	r3, [pc, #276]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83e9e:	4a46      	ldr	r2, [pc, #280]	; (83fb8 <SystemCoreClockUpdate+0x170>)
   83ea0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   83ea2:	e064      	b.n	83f6e <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83ea4:	4b43      	ldr	r3, [pc, #268]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83ea6:	4a45      	ldr	r2, [pc, #276]	; (83fbc <SystemCoreClockUpdate+0x174>)
   83ea8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83eaa:	4b40      	ldr	r3, [pc, #256]	; (83fac <SystemCoreClockUpdate+0x164>)
   83eac:	6a1b      	ldr	r3, [r3, #32]
   83eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83eb2:	2b10      	cmp	r3, #16
   83eb4:	d004      	beq.n	83ec0 <SystemCoreClockUpdate+0x78>
   83eb6:	2b20      	cmp	r3, #32
   83eb8:	d008      	beq.n	83ecc <SystemCoreClockUpdate+0x84>
   83eba:	2b00      	cmp	r3, #0
   83ebc:	d00e      	beq.n	83edc <SystemCoreClockUpdate+0x94>
				break;
   83ebe:	e00e      	b.n	83ede <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   83ec0:	4b3c      	ldr	r3, [pc, #240]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83ec2:	681b      	ldr	r3, [r3, #0]
   83ec4:	005b      	lsls	r3, r3, #1
   83ec6:	4a3b      	ldr	r2, [pc, #236]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83ec8:	6013      	str	r3, [r2, #0]
				break;
   83eca:	e008      	b.n	83ede <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   83ecc:	4b39      	ldr	r3, [pc, #228]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83ece:	681a      	ldr	r2, [r3, #0]
   83ed0:	4613      	mov	r3, r2
   83ed2:	005b      	lsls	r3, r3, #1
   83ed4:	4413      	add	r3, r2
   83ed6:	4a37      	ldr	r2, [pc, #220]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83ed8:	6013      	str	r3, [r2, #0]
				break;
   83eda:	e000      	b.n	83ede <SystemCoreClockUpdate+0x96>
				break;
   83edc:	bf00      	nop
		break;
   83ede:	e046      	b.n	83f6e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83ee0:	4b32      	ldr	r3, [pc, #200]	; (83fac <SystemCoreClockUpdate+0x164>)
   83ee2:	6a1b      	ldr	r3, [r3, #32]
   83ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83ee8:	2b00      	cmp	r3, #0
   83eea:	d003      	beq.n	83ef4 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83eec:	4b31      	ldr	r3, [pc, #196]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83eee:	4a32      	ldr	r2, [pc, #200]	; (83fb8 <SystemCoreClockUpdate+0x170>)
   83ef0:	601a      	str	r2, [r3, #0]
   83ef2:	e01c      	b.n	83f2e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83ef4:	4b2f      	ldr	r3, [pc, #188]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83ef6:	4a31      	ldr	r2, [pc, #196]	; (83fbc <SystemCoreClockUpdate+0x174>)
   83ef8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83efa:	4b2c      	ldr	r3, [pc, #176]	; (83fac <SystemCoreClockUpdate+0x164>)
   83efc:	6a1b      	ldr	r3, [r3, #32]
   83efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83f02:	2b10      	cmp	r3, #16
   83f04:	d004      	beq.n	83f10 <SystemCoreClockUpdate+0xc8>
   83f06:	2b20      	cmp	r3, #32
   83f08:	d008      	beq.n	83f1c <SystemCoreClockUpdate+0xd4>
   83f0a:	2b00      	cmp	r3, #0
   83f0c:	d00e      	beq.n	83f2c <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   83f0e:	e00e      	b.n	83f2e <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   83f10:	4b28      	ldr	r3, [pc, #160]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83f12:	681b      	ldr	r3, [r3, #0]
   83f14:	005b      	lsls	r3, r3, #1
   83f16:	4a27      	ldr	r2, [pc, #156]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83f18:	6013      	str	r3, [r2, #0]
				break;
   83f1a:	e008      	b.n	83f2e <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   83f1c:	4b25      	ldr	r3, [pc, #148]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83f1e:	681a      	ldr	r2, [r3, #0]
   83f20:	4613      	mov	r3, r2
   83f22:	005b      	lsls	r3, r3, #1
   83f24:	4413      	add	r3, r2
   83f26:	4a23      	ldr	r2, [pc, #140]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83f28:	6013      	str	r3, [r2, #0]
				break;
   83f2a:	e000      	b.n	83f2e <SystemCoreClockUpdate+0xe6>
				break;
   83f2c:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83f2e:	4b1f      	ldr	r3, [pc, #124]	; (83fac <SystemCoreClockUpdate+0x164>)
   83f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83f32:	f003 0303 	and.w	r3, r3, #3
   83f36:	2b02      	cmp	r3, #2
   83f38:	d115      	bne.n	83f66 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83f3a:	4b1c      	ldr	r3, [pc, #112]	; (83fac <SystemCoreClockUpdate+0x164>)
   83f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83f3e:	0c1b      	lsrs	r3, r3, #16
   83f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   83f44:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83f46:	4a1b      	ldr	r2, [pc, #108]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83f48:	6812      	ldr	r2, [r2, #0]
   83f4a:	fb02 f303 	mul.w	r3, r2, r3
   83f4e:	4a19      	ldr	r2, [pc, #100]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83f50:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83f52:	4b16      	ldr	r3, [pc, #88]	; (83fac <SystemCoreClockUpdate+0x164>)
   83f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83f56:	b2db      	uxtb	r3, r3
   83f58:	4a16      	ldr	r2, [pc, #88]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83f5a:	6812      	ldr	r2, [r2, #0]
   83f5c:	fbb2 f3f3 	udiv	r3, r2, r3
   83f60:	4a14      	ldr	r2, [pc, #80]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83f62:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   83f64:	e002      	b.n	83f6c <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83f66:	4b13      	ldr	r3, [pc, #76]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83f68:	4a15      	ldr	r2, [pc, #84]	; (83fc0 <SystemCoreClockUpdate+0x178>)
   83f6a:	601a      	str	r2, [r3, #0]
		break;
   83f6c:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83f6e:	4b0f      	ldr	r3, [pc, #60]	; (83fac <SystemCoreClockUpdate+0x164>)
   83f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83f76:	2b70      	cmp	r3, #112	; 0x70
   83f78:	d108      	bne.n	83f8c <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   83f7a:	4b0e      	ldr	r3, [pc, #56]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83f7c:	681b      	ldr	r3, [r3, #0]
   83f7e:	4a11      	ldr	r2, [pc, #68]	; (83fc4 <SystemCoreClockUpdate+0x17c>)
   83f80:	fba2 2303 	umull	r2, r3, r2, r3
   83f84:	085b      	lsrs	r3, r3, #1
   83f86:	4a0b      	ldr	r2, [pc, #44]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83f88:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   83f8a:	e00a      	b.n	83fa2 <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83f8c:	4b07      	ldr	r3, [pc, #28]	; (83fac <SystemCoreClockUpdate+0x164>)
   83f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83f90:	091b      	lsrs	r3, r3, #4
   83f92:	f003 0307 	and.w	r3, r3, #7
   83f96:	4a07      	ldr	r2, [pc, #28]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83f98:	6812      	ldr	r2, [r2, #0]
   83f9a:	fa22 f303 	lsr.w	r3, r2, r3
   83f9e:	4a05      	ldr	r2, [pc, #20]	; (83fb4 <SystemCoreClockUpdate+0x16c>)
   83fa0:	6013      	str	r3, [r2, #0]
}
   83fa2:	bf00      	nop
   83fa4:	46bd      	mov	sp, r7
   83fa6:	bc80      	pop	{r7}
   83fa8:	4770      	bx	lr
   83faa:	bf00      	nop
   83fac:	400e0600 	.word	0x400e0600
   83fb0:	400e1a10 	.word	0x400e1a10
   83fb4:	2007019c 	.word	0x2007019c
   83fb8:	00b71b00 	.word	0x00b71b00
   83fbc:	003d0900 	.word	0x003d0900
   83fc0:	0e4e1c00 	.word	0x0e4e1c00
   83fc4:	aaaaaaab 	.word	0xaaaaaaab

00083fc8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   83fc8:	b480      	push	{r7}
   83fca:	b085      	sub	sp, #20
   83fcc:	af00      	add	r7, sp, #0
   83fce:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   83fd0:	4b10      	ldr	r3, [pc, #64]	; (84014 <_sbrk+0x4c>)
   83fd2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   83fd4:	4b10      	ldr	r3, [pc, #64]	; (84018 <_sbrk+0x50>)
   83fd6:	681b      	ldr	r3, [r3, #0]
   83fd8:	2b00      	cmp	r3, #0
   83fda:	d102      	bne.n	83fe2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   83fdc:	4b0e      	ldr	r3, [pc, #56]	; (84018 <_sbrk+0x50>)
   83fde:	4a0f      	ldr	r2, [pc, #60]	; (8401c <_sbrk+0x54>)
   83fe0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   83fe2:	4b0d      	ldr	r3, [pc, #52]	; (84018 <_sbrk+0x50>)
   83fe4:	681b      	ldr	r3, [r3, #0]
   83fe6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   83fe8:	68ba      	ldr	r2, [r7, #8]
   83fea:	687b      	ldr	r3, [r7, #4]
   83fec:	441a      	add	r2, r3
   83fee:	68fb      	ldr	r3, [r7, #12]
   83ff0:	429a      	cmp	r2, r3
   83ff2:	dd02      	ble.n	83ffa <_sbrk+0x32>
		return (caddr_t) -1;	
   83ff4:	f04f 33ff 	mov.w	r3, #4294967295
   83ff8:	e006      	b.n	84008 <_sbrk+0x40>
	}

	heap += incr;
   83ffa:	4b07      	ldr	r3, [pc, #28]	; (84018 <_sbrk+0x50>)
   83ffc:	681a      	ldr	r2, [r3, #0]
   83ffe:	687b      	ldr	r3, [r7, #4]
   84000:	4413      	add	r3, r2
   84002:	4a05      	ldr	r2, [pc, #20]	; (84018 <_sbrk+0x50>)
   84004:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   84006:	68bb      	ldr	r3, [r7, #8]
}
   84008:	4618      	mov	r0, r3
   8400a:	3714      	adds	r7, #20
   8400c:	46bd      	mov	sp, r7
   8400e:	bc80      	pop	{r7}
   84010:	4770      	bx	lr
   84012:	bf00      	nop
   84014:	20087ffc 	.word	0x20087ffc
   84018:	20070df0 	.word	0x20070df0
   8401c:	20073018 	.word	0x20073018

00084020 <NVIC_SetPriority>:
{
   84020:	b480      	push	{r7}
   84022:	b083      	sub	sp, #12
   84024:	af00      	add	r7, sp, #0
   84026:	4603      	mov	r3, r0
   84028:	6039      	str	r1, [r7, #0]
   8402a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   8402c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84030:	2b00      	cmp	r3, #0
   84032:	da0b      	bge.n	8404c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   84034:	490d      	ldr	r1, [pc, #52]	; (8406c <NVIC_SetPriority+0x4c>)
   84036:	79fb      	ldrb	r3, [r7, #7]
   84038:	f003 030f 	and.w	r3, r3, #15
   8403c:	3b04      	subs	r3, #4
   8403e:	683a      	ldr	r2, [r7, #0]
   84040:	b2d2      	uxtb	r2, r2
   84042:	0112      	lsls	r2, r2, #4
   84044:	b2d2      	uxtb	r2, r2
   84046:	440b      	add	r3, r1
   84048:	761a      	strb	r2, [r3, #24]
}
   8404a:	e009      	b.n	84060 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8404c:	4908      	ldr	r1, [pc, #32]	; (84070 <NVIC_SetPriority+0x50>)
   8404e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84052:	683a      	ldr	r2, [r7, #0]
   84054:	b2d2      	uxtb	r2, r2
   84056:	0112      	lsls	r2, r2, #4
   84058:	b2d2      	uxtb	r2, r2
   8405a:	440b      	add	r3, r1
   8405c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   84060:	bf00      	nop
   84062:	370c      	adds	r7, #12
   84064:	46bd      	mov	sp, r7
   84066:	bc80      	pop	{r7}
   84068:	4770      	bx	lr
   8406a:	bf00      	nop
   8406c:	e000ed00 	.word	0xe000ed00
   84070:	e000e100 	.word	0xe000e100

00084074 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   84074:	b580      	push	{r7, lr}
   84076:	b082      	sub	sp, #8
   84078:	af00      	add	r7, sp, #0
   8407a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   8407c:	687b      	ldr	r3, [r7, #4]
   8407e:	3b01      	subs	r3, #1
   84080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   84084:	d301      	bcc.n	8408a <SysTick_Config+0x16>
   84086:	2301      	movs	r3, #1
   84088:	e00f      	b.n	840aa <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   8408a:	4a0a      	ldr	r2, [pc, #40]	; (840b4 <SysTick_Config+0x40>)
   8408c:	687b      	ldr	r3, [r7, #4]
   8408e:	3b01      	subs	r3, #1
   84090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   84092:	210f      	movs	r1, #15
   84094:	f04f 30ff 	mov.w	r0, #4294967295
   84098:	4b07      	ldr	r3, [pc, #28]	; (840b8 <SysTick_Config+0x44>)
   8409a:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   8409c:	4b05      	ldr	r3, [pc, #20]	; (840b4 <SysTick_Config+0x40>)
   8409e:	2200      	movs	r2, #0
   840a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   840a2:	4b04      	ldr	r3, [pc, #16]	; (840b4 <SysTick_Config+0x40>)
   840a4:	2207      	movs	r2, #7
   840a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   840a8:	2300      	movs	r3, #0
}
   840aa:	4618      	mov	r0, r3
   840ac:	3708      	adds	r7, #8
   840ae:	46bd      	mov	sp, r7
   840b0:	bd80      	pop	{r7, pc}
   840b2:	bf00      	nop
   840b4:	e000e010 	.word	0xe000e010
   840b8:	00084021 	.word	0x00084021

000840bc <osc_get_rate>:
{
   840bc:	b480      	push	{r7}
   840be:	b083      	sub	sp, #12
   840c0:	af00      	add	r7, sp, #0
   840c2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   840c4:	687b      	ldr	r3, [r7, #4]
   840c6:	2b07      	cmp	r3, #7
   840c8:	d825      	bhi.n	84116 <osc_get_rate+0x5a>
   840ca:	a201      	add	r2, pc, #4	; (adr r2, 840d0 <osc_get_rate+0x14>)
   840cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   840d0:	000840f1 	.word	0x000840f1
   840d4:	000840f7 	.word	0x000840f7
   840d8:	000840fd 	.word	0x000840fd
   840dc:	00084103 	.word	0x00084103
   840e0:	00084107 	.word	0x00084107
   840e4:	0008410b 	.word	0x0008410b
   840e8:	0008410f 	.word	0x0008410f
   840ec:	00084113 	.word	0x00084113
		return OSC_SLCK_32K_RC_HZ;
   840f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   840f4:	e010      	b.n	84118 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   840f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   840fa:	e00d      	b.n	84118 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   840fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84100:	e00a      	b.n	84118 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   84102:	4b08      	ldr	r3, [pc, #32]	; (84124 <osc_get_rate+0x68>)
   84104:	e008      	b.n	84118 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   84106:	4b08      	ldr	r3, [pc, #32]	; (84128 <osc_get_rate+0x6c>)
   84108:	e006      	b.n	84118 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8410a:	4b08      	ldr	r3, [pc, #32]	; (8412c <osc_get_rate+0x70>)
   8410c:	e004      	b.n	84118 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8410e:	4b07      	ldr	r3, [pc, #28]	; (8412c <osc_get_rate+0x70>)
   84110:	e002      	b.n	84118 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   84112:	4b06      	ldr	r3, [pc, #24]	; (8412c <osc_get_rate+0x70>)
   84114:	e000      	b.n	84118 <osc_get_rate+0x5c>
	return 0;
   84116:	2300      	movs	r3, #0
}
   84118:	4618      	mov	r0, r3
   8411a:	370c      	adds	r7, #12
   8411c:	46bd      	mov	sp, r7
   8411e:	bc80      	pop	{r7}
   84120:	4770      	bx	lr
   84122:	bf00      	nop
   84124:	003d0900 	.word	0x003d0900
   84128:	007a1200 	.word	0x007a1200
   8412c:	00b71b00 	.word	0x00b71b00

00084130 <sysclk_get_main_hz>:
{
   84130:	b580      	push	{r7, lr}
   84132:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   84134:	2006      	movs	r0, #6
   84136:	4b04      	ldr	r3, [pc, #16]	; (84148 <sysclk_get_main_hz+0x18>)
   84138:	4798      	blx	r3
   8413a:	4602      	mov	r2, r0
   8413c:	4613      	mov	r3, r2
   8413e:	00db      	lsls	r3, r3, #3
   84140:	1a9b      	subs	r3, r3, r2
   84142:	005b      	lsls	r3, r3, #1
}
   84144:	4618      	mov	r0, r3
   84146:	bd80      	pop	{r7, pc}
   84148:	000840bd 	.word	0x000840bd

0008414c <sysclk_get_cpu_hz>:
{
   8414c:	b580      	push	{r7, lr}
   8414e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   84150:	4b02      	ldr	r3, [pc, #8]	; (8415c <sysclk_get_cpu_hz+0x10>)
   84152:	4798      	blx	r3
   84154:	4603      	mov	r3, r0
   84156:	085b      	lsrs	r3, r3, #1
}
   84158:	4618      	mov	r0, r3
   8415a:	bd80      	pop	{r7, pc}
   8415c:	00084131 	.word	0x00084131

00084160 <ioport_set_pin_level>:
{
   84160:	b480      	push	{r7}
   84162:	b08b      	sub	sp, #44	; 0x2c
   84164:	af00      	add	r7, sp, #0
   84166:	6078      	str	r0, [r7, #4]
   84168:	460b      	mov	r3, r1
   8416a:	70fb      	strb	r3, [r7, #3]
   8416c:	687b      	ldr	r3, [r7, #4]
   8416e:	627b      	str	r3, [r7, #36]	; 0x24
   84170:	78fb      	ldrb	r3, [r7, #3]
   84172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   84176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84178:	61fb      	str	r3, [r7, #28]
   8417a:	69fb      	ldr	r3, [r7, #28]
   8417c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   8417e:	69bb      	ldr	r3, [r7, #24]
   84180:	095b      	lsrs	r3, r3, #5
   84182:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   84184:	697b      	ldr	r3, [r7, #20]
   84186:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8418a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8418e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   84190:	613b      	str	r3, [r7, #16]
	if (level) {
   84192:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   84196:	2b00      	cmp	r3, #0
   84198:	d009      	beq.n	841ae <ioport_set_pin_level+0x4e>
   8419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8419c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8419e:	68fb      	ldr	r3, [r7, #12]
   841a0:	f003 031f 	and.w	r3, r3, #31
   841a4:	2201      	movs	r2, #1
   841a6:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   841a8:	693b      	ldr	r3, [r7, #16]
   841aa:	631a      	str	r2, [r3, #48]	; 0x30
}
   841ac:	e008      	b.n	841c0 <ioport_set_pin_level+0x60>
   841ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   841b0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   841b2:	68bb      	ldr	r3, [r7, #8]
   841b4:	f003 031f 	and.w	r3, r3, #31
   841b8:	2201      	movs	r2, #1
   841ba:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   841bc:	693b      	ldr	r3, [r7, #16]
   841be:	635a      	str	r2, [r3, #52]	; 0x34
   841c0:	bf00      	nop
   841c2:	372c      	adds	r7, #44	; 0x2c
   841c4:	46bd      	mov	sp, r7
   841c6:	bc80      	pop	{r7}
   841c8:	4770      	bx	lr

000841ca <ioport_get_pin_level>:
{
   841ca:	b480      	push	{r7}
   841cc:	b089      	sub	sp, #36	; 0x24
   841ce:	af00      	add	r7, sp, #0
   841d0:	6078      	str	r0, [r7, #4]
   841d2:	687b      	ldr	r3, [r7, #4]
   841d4:	61fb      	str	r3, [r7, #28]
   841d6:	69fb      	ldr	r3, [r7, #28]
   841d8:	61bb      	str	r3, [r7, #24]
   841da:	69bb      	ldr	r3, [r7, #24]
   841dc:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   841de:	697b      	ldr	r3, [r7, #20]
   841e0:	095b      	lsrs	r3, r3, #5
   841e2:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   841e4:	693b      	ldr	r3, [r7, #16]
   841e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   841ea:	f203 7307 	addw	r3, r3, #1799	; 0x707
   841ee:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   841f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   841f2:	69fb      	ldr	r3, [r7, #28]
   841f4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   841f6:	68fb      	ldr	r3, [r7, #12]
   841f8:	f003 031f 	and.w	r3, r3, #31
   841fc:	2101      	movs	r1, #1
   841fe:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   84202:	4013      	ands	r3, r2
   84204:	2b00      	cmp	r3, #0
   84206:	bf14      	ite	ne
   84208:	2301      	movne	r3, #1
   8420a:	2300      	moveq	r3, #0
   8420c:	b2db      	uxtb	r3, r3
}
   8420e:	4618      	mov	r0, r3
   84210:	3724      	adds	r7, #36	; 0x24
   84212:	46bd      	mov	sp, r7
   84214:	bc80      	pop	{r7}
   84216:	4770      	bx	lr

00084218 <main>:

void noOS_bootup_sequence(void);
void set_led(ioport_pin_t pin, Bool level);

int main(void)
{
   84218:	b580      	push	{r7, lr}
   8421a:	b082      	sub	sp, #8
   8421c:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   8421e:	4b1e      	ldr	r3, [pc, #120]	; (84298 <main+0x80>)
   84220:	4798      	blx	r3
    board_init();
   84222:	4b1e      	ldr	r3, [pc, #120]	; (8429c <main+0x84>)
   84224:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   84226:	4b1e      	ldr	r3, [pc, #120]	; (842a0 <main+0x88>)
   84228:	4798      	blx	r3
   8422a:	4602      	mov	r2, r0
   8422c:	4b1d      	ldr	r3, [pc, #116]	; (842a4 <main+0x8c>)
   8422e:	fba3 2302 	umull	r2, r3, r3, r2
   84232:	099b      	lsrs	r3, r3, #6
   84234:	4618      	mov	r0, r3
   84236:	4b1c      	ldr	r3, [pc, #112]	; (842a8 <main+0x90>)
   84238:	4798      	blx	r3
    
    motor_init();
   8423a:	4b1c      	ldr	r3, [pc, #112]	; (842ac <main+0x94>)
   8423c:	4798      	blx	r3
    
    sd_mmc_init();
   8423e:	4b1c      	ldr	r3, [pc, #112]	; (842b0 <main+0x98>)
   84240:	4798      	blx	r3
    
    spi_init();
   84242:	4b1c      	ldr	r3, [pc, #112]	; (842b4 <main+0x9c>)
   84244:	4798      	blx	r3
    
    compass_init();
   84246:	4b1c      	ldr	r3, [pc, #112]	; (842b8 <main+0xa0>)
   84248:	4798      	blx	r3
    lcd_init();
   8424a:	4b1c      	ldr	r3, [pc, #112]	; (842bc <main+0xa4>)
   8424c:	4798      	blx	r3
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    f_write(&file_object, "Test SD/MMC stack\n", 18, &bw);
    f_close(&file_object);*/
    
    noOS_bootup_sequence();
   8424e:	4b1c      	ldr	r3, [pc, #112]	; (842c0 <main+0xa8>)
   84250:	4798      	blx	r3
    
    while (1)
    {
        update_comm();
   84252:	4b1c      	ldr	r3, [pc, #112]	; (842c4 <main+0xac>)
   84254:	4798      	blx	r3
        update_heartbeat();
   84256:	4b1c      	ldr	r3, [pc, #112]	; (842c8 <main+0xb0>)
   84258:	4798      	blx	r3
        //check_battery();
        
        if (stm.ibit.heartbeat)
   8425a:	4b1c      	ldr	r3, [pc, #112]	; (842cc <main+0xb4>)
   8425c:	781b      	ldrb	r3, [r3, #0]
   8425e:	f003 0301 	and.w	r3, r3, #1
   84262:	b2db      	uxtb	r3, r3
   84264:	2b00      	cmp	r3, #0
   84266:	d004      	beq.n	84272 <main+0x5a>
        {
            set_led(LED_M2, 1);
   84268:	2101      	movs	r1, #1
   8426a:	2068      	movs	r0, #104	; 0x68
   8426c:	4b18      	ldr	r3, [pc, #96]	; (842d0 <main+0xb8>)
   8426e:	4798      	blx	r3
   84270:	e003      	b.n	8427a <main+0x62>
        }
        else
        {
            set_led(LED_M2, 0);
   84272:	2100      	movs	r1, #0
   84274:	2068      	movs	r0, #104	; 0x68
   84276:	4b16      	ldr	r3, [pc, #88]	; (842d0 <main+0xb8>)
   84278:	4798      	blx	r3
        }
        
        update_motor(5, 5, 5);
   8427a:	4a16      	ldr	r2, [pc, #88]	; (842d4 <main+0xbc>)
   8427c:	4915      	ldr	r1, [pc, #84]	; (842d4 <main+0xbc>)
   8427e:	4815      	ldr	r0, [pc, #84]	; (842d4 <main+0xbc>)
   84280:	4b15      	ldr	r3, [pc, #84]	; (842d8 <main+0xc0>)
   84282:	4798      	blx	r3
        
        act_event = button_events();
   84284:	4b15      	ldr	r3, [pc, #84]	; (842dc <main+0xc4>)
   84286:	4798      	blx	r3
   84288:	4603      	mov	r3, r0
   8428a:	71fb      	strb	r3, [r7, #7]
        
        menu(act_event);
   8428c:	79fb      	ldrb	r3, [r7, #7]
   8428e:	4618      	mov	r0, r3
   84290:	4b13      	ldr	r3, [pc, #76]	; (842e0 <main+0xc8>)
   84292:	4798      	blx	r3
        update_comm();
   84294:	e7dd      	b.n	84252 <main+0x3a>
   84296:	bf00      	nop
   84298:	000833d1 	.word	0x000833d1
   8429c:	00083b95 	.word	0x00083b95
   842a0:	0008414d 	.word	0x0008414d
   842a4:	10624dd3 	.word	0x10624dd3
   842a8:	00084075 	.word	0x00084075
   842ac:	000828f5 	.word	0x000828f5
   842b0:	00080161 	.word	0x00080161
   842b4:	00080a3d 	.word	0x00080a3d
   842b8:	0008131d 	.word	0x0008131d
   842bc:	0008155d 	.word	0x0008155d
   842c0:	000842e5 	.word	0x000842e5
   842c4:	00082f45 	.word	0x00082f45
   842c8:	00083039 	.word	0x00083039
   842cc:	20070e34 	.word	0x20070e34
   842d0:	00084499 	.word	0x00084499
   842d4:	40a00000 	.word	0x40a00000
   842d8:	00082add 	.word	0x00082add
   842dc:	00082531 	.word	0x00082531
   842e0:	00081ba1 	.word	0x00081ba1

000842e4 <noOS_bootup_sequence>:
    }
}

void noOS_bootup_sequence(void)
{
   842e4:	b580      	push	{r7, lr}
   842e6:	b082      	sub	sp, #8
   842e8:	af00      	add	r7, sp, #0
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   842ea:	e072      	b.n	843d2 <noOS_bootup_sequence+0xee>
    {
        if (getTicks() >= (ticks_blink_update + 800))
   842ec:	4b5e      	ldr	r3, [pc, #376]	; (84468 <noOS_bootup_sequence+0x184>)
   842ee:	4798      	blx	r3
   842f0:	4602      	mov	r2, r0
   842f2:	4b5e      	ldr	r3, [pc, #376]	; (8446c <noOS_bootup_sequence+0x188>)
   842f4:	681b      	ldr	r3, [r3, #0]
   842f6:	f503 7348 	add.w	r3, r3, #800	; 0x320
   842fa:	429a      	cmp	r2, r3
   842fc:	d31a      	bcc.n	84334 <noOS_bootup_sequence+0x50>
        {
            ticks_blink_update = getTicks();
   842fe:	4b5a      	ldr	r3, [pc, #360]	; (84468 <noOS_bootup_sequence+0x184>)
   84300:	4798      	blx	r3
   84302:	4602      	mov	r2, r0
   84304:	4b59      	ldr	r3, [pc, #356]	; (8446c <noOS_bootup_sequence+0x188>)
   84306:	601a      	str	r2, [r3, #0]
            
            if (blink_level)
   84308:	4b59      	ldr	r3, [pc, #356]	; (84470 <noOS_bootup_sequence+0x18c>)
   8430a:	781b      	ldrb	r3, [r3, #0]
   8430c:	2b00      	cmp	r3, #0
   8430e:	d003      	beq.n	84318 <noOS_bootup_sequence+0x34>
            {
                blink_level = 0;
   84310:	4b57      	ldr	r3, [pc, #348]	; (84470 <noOS_bootup_sequence+0x18c>)
   84312:	2200      	movs	r2, #0
   84314:	701a      	strb	r2, [r3, #0]
   84316:	e002      	b.n	8431e <noOS_bootup_sequence+0x3a>
            }
            else
            {
                blink_level = 1;
   84318:	4b55      	ldr	r3, [pc, #340]	; (84470 <noOS_bootup_sequence+0x18c>)
   8431a:	2201      	movs	r2, #1
   8431c:	701a      	strb	r2, [r3, #0]
            }
            
            ioport_set_pin_level(LED_BAT, blink_level);
   8431e:	4b54      	ldr	r3, [pc, #336]	; (84470 <noOS_bootup_sequence+0x18c>)
   84320:	781b      	ldrb	r3, [r3, #0]
   84322:	2b00      	cmp	r3, #0
   84324:	bf14      	ite	ne
   84326:	2301      	movne	r3, #1
   84328:	2300      	moveq	r3, #0
   8432a:	b2db      	uxtb	r3, r3
   8432c:	4619      	mov	r1, r3
   8432e:	2066      	movs	r0, #102	; 0x66
   84330:	4b50      	ldr	r3, [pc, #320]	; (84474 <noOS_bootup_sequence+0x190>)
   84332:	4798      	blx	r3
        }
        
        if (getTicks() >= (ticks_dot_update + 500))
   84334:	4b4c      	ldr	r3, [pc, #304]	; (84468 <noOS_bootup_sequence+0x184>)
   84336:	4798      	blx	r3
   84338:	4602      	mov	r2, r0
   8433a:	4b4f      	ldr	r3, [pc, #316]	; (84478 <noOS_bootup_sequence+0x194>)
   8433c:	681b      	ldr	r3, [r3, #0]
   8433e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   84342:	429a      	cmp	r2, r3
   84344:	d315      	bcc.n	84372 <noOS_bootup_sequence+0x8e>
        {
            ticks_dot_update = getTicks();
   84346:	4b48      	ldr	r3, [pc, #288]	; (84468 <noOS_bootup_sequence+0x184>)
   84348:	4798      	blx	r3
   8434a:	4602      	mov	r2, r0
   8434c:	4b4a      	ldr	r3, [pc, #296]	; (84478 <noOS_bootup_sequence+0x194>)
   8434e:	601a      	str	r2, [r3, #0]
            
            if (dots < 3)
   84350:	4b4a      	ldr	r3, [pc, #296]	; (8447c <noOS_bootup_sequence+0x198>)
   84352:	781b      	ldrb	r3, [r3, #0]
   84354:	2b02      	cmp	r3, #2
   84356:	d806      	bhi.n	84366 <noOS_bootup_sequence+0x82>
            {
                dots++;
   84358:	4b48      	ldr	r3, [pc, #288]	; (8447c <noOS_bootup_sequence+0x198>)
   8435a:	781b      	ldrb	r3, [r3, #0]
   8435c:	3301      	adds	r3, #1
   8435e:	b2da      	uxtb	r2, r3
   84360:	4b46      	ldr	r3, [pc, #280]	; (8447c <noOS_bootup_sequence+0x198>)
   84362:	701a      	strb	r2, [r3, #0]
   84364:	e002      	b.n	8436c <noOS_bootup_sequence+0x88>
            }
            else
            {
                dots = 0;
   84366:	4b45      	ldr	r3, [pc, #276]	; (8447c <noOS_bootup_sequence+0x198>)
   84368:	2200      	movs	r2, #0
   8436a:	701a      	strb	r2, [r3, #0]
            }
            
            update_dots = 1;
   8436c:	4b44      	ldr	r3, [pc, #272]	; (84480 <noOS_bootup_sequence+0x19c>)
   8436e:	2201      	movs	r2, #1
   84370:	701a      	strb	r2, [r3, #0]
        }
        
        if (update_dots)
   84372:	4b43      	ldr	r3, [pc, #268]	; (84480 <noOS_bootup_sequence+0x19c>)
   84374:	781b      	ldrb	r3, [r3, #0]
   84376:	2b00      	cmp	r3, #0
   84378:	d02b      	beq.n	843d2 <noOS_bootup_sequence+0xee>
        {
            update_dots = 0;
   8437a:	4b41      	ldr	r3, [pc, #260]	; (84480 <noOS_bootup_sequence+0x19c>)
   8437c:	2200      	movs	r2, #0
   8437e:	701a      	strb	r2, [r3, #0]
            
            switch (dots)
   84380:	4b3e      	ldr	r3, [pc, #248]	; (8447c <noOS_bootup_sequence+0x198>)
   84382:	781b      	ldrb	r3, [r3, #0]
   84384:	2b03      	cmp	r3, #3
   84386:	d823      	bhi.n	843d0 <noOS_bootup_sequence+0xec>
   84388:	a201      	add	r2, pc, #4	; (adr r2, 84390 <noOS_bootup_sequence+0xac>)
   8438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8438e:	bf00      	nop
   84390:	000843a1 	.word	0x000843a1
   84394:	000843ad 	.word	0x000843ad
   84398:	000843b9 	.word	0x000843b9
   8439c:	000843c5 	.word	0x000843c5
            {
                case 0:
                lcd_print_s(2, 2, "booting noOS   ");
   843a0:	4a38      	ldr	r2, [pc, #224]	; (84484 <noOS_bootup_sequence+0x1a0>)
   843a2:	2102      	movs	r1, #2
   843a4:	2002      	movs	r0, #2
   843a6:	4b38      	ldr	r3, [pc, #224]	; (84488 <noOS_bootup_sequence+0x1a4>)
   843a8:	4798      	blx	r3
                break;
   843aa:	e012      	b.n	843d2 <noOS_bootup_sequence+0xee>
                case 1:
                lcd_print_s(2, 14, ".");
   843ac:	4a37      	ldr	r2, [pc, #220]	; (8448c <noOS_bootup_sequence+0x1a8>)
   843ae:	210e      	movs	r1, #14
   843b0:	2002      	movs	r0, #2
   843b2:	4b35      	ldr	r3, [pc, #212]	; (84488 <noOS_bootup_sequence+0x1a4>)
   843b4:	4798      	blx	r3
                break;
   843b6:	e00c      	b.n	843d2 <noOS_bootup_sequence+0xee>
                case 2:
                lcd_print_s(2, 15, ".");
   843b8:	4a34      	ldr	r2, [pc, #208]	; (8448c <noOS_bootup_sequence+0x1a8>)
   843ba:	210f      	movs	r1, #15
   843bc:	2002      	movs	r0, #2
   843be:	4b32      	ldr	r3, [pc, #200]	; (84488 <noOS_bootup_sequence+0x1a4>)
   843c0:	4798      	blx	r3
                break;
   843c2:	e006      	b.n	843d2 <noOS_bootup_sequence+0xee>
                case 3:
                lcd_print_s(2, 16, ".");
   843c4:	4a31      	ldr	r2, [pc, #196]	; (8448c <noOS_bootup_sequence+0x1a8>)
   843c6:	2110      	movs	r1, #16
   843c8:	2002      	movs	r0, #2
   843ca:	4b2f      	ldr	r3, [pc, #188]	; (84488 <noOS_bootup_sequence+0x1a4>)
   843cc:	4798      	blx	r3
                break;
   843ce:	e000      	b.n	843d2 <noOS_bootup_sequence+0xee>
                default:
                break;
   843d0:	bf00      	nop
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   843d2:	2008      	movs	r0, #8
   843d4:	4b2e      	ldr	r3, [pc, #184]	; (84490 <noOS_bootup_sequence+0x1ac>)
   843d6:	4798      	blx	r3
   843d8:	4603      	mov	r3, r0
   843da:	f083 0301 	eor.w	r3, r3, #1
   843de:	b2db      	uxtb	r3, r3
   843e0:	2b00      	cmp	r3, #0
   843e2:	d006      	beq.n	843f2 <noOS_bootup_sequence+0x10e>
   843e4:	2062      	movs	r0, #98	; 0x62
   843e6:	4b2a      	ldr	r3, [pc, #168]	; (84490 <noOS_bootup_sequence+0x1ac>)
   843e8:	4798      	blx	r3
   843ea:	4603      	mov	r3, r0
   843ec:	2b00      	cmp	r3, #0
   843ee:	f47f af7d 	bne.w	842ec <noOS_bootup_sequence+0x8>
            }
        }
    }
    
    for(int i = 0; i< 3; i++)
   843f2:	2300      	movs	r3, #0
   843f4:	607b      	str	r3, [r7, #4]
   843f6:	e030      	b.n	8445a <noOS_bootup_sequence+0x176>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   843f8:	2101      	movs	r1, #1
   843fa:	206a      	movs	r0, #106	; 0x6a
   843fc:	4b1d      	ldr	r3, [pc, #116]	; (84474 <noOS_bootup_sequence+0x190>)
   843fe:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 1);
   84400:	2101      	movs	r1, #1
   84402:	2066      	movs	r0, #102	; 0x66
   84404:	4b1b      	ldr	r3, [pc, #108]	; (84474 <noOS_bootup_sequence+0x190>)
   84406:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 1);
   84408:	2101      	movs	r1, #1
   8440a:	2067      	movs	r0, #103	; 0x67
   8440c:	4b19      	ldr	r3, [pc, #100]	; (84474 <noOS_bootup_sequence+0x190>)
   8440e:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 1);
   84410:	2101      	movs	r1, #1
   84412:	2068      	movs	r0, #104	; 0x68
   84414:	4b17      	ldr	r3, [pc, #92]	; (84474 <noOS_bootup_sequence+0x190>)
   84416:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 1);
   84418:	2101      	movs	r1, #1
   8441a:	2069      	movs	r0, #105	; 0x69
   8441c:	4b15      	ldr	r3, [pc, #84]	; (84474 <noOS_bootup_sequence+0x190>)
   8441e:	4798      	blx	r3
        mdelay(100);
   84420:	2064      	movs	r0, #100	; 0x64
   84422:	4b1c      	ldr	r3, [pc, #112]	; (84494 <noOS_bootup_sequence+0x1b0>)
   84424:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   84426:	2100      	movs	r1, #0
   84428:	206a      	movs	r0, #106	; 0x6a
   8442a:	4b12      	ldr	r3, [pc, #72]	; (84474 <noOS_bootup_sequence+0x190>)
   8442c:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   8442e:	2100      	movs	r1, #0
   84430:	2066      	movs	r0, #102	; 0x66
   84432:	4b10      	ldr	r3, [pc, #64]	; (84474 <noOS_bootup_sequence+0x190>)
   84434:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   84436:	2100      	movs	r1, #0
   84438:	2067      	movs	r0, #103	; 0x67
   8443a:	4b0e      	ldr	r3, [pc, #56]	; (84474 <noOS_bootup_sequence+0x190>)
   8443c:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   8443e:	2100      	movs	r1, #0
   84440:	2068      	movs	r0, #104	; 0x68
   84442:	4b0c      	ldr	r3, [pc, #48]	; (84474 <noOS_bootup_sequence+0x190>)
   84444:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   84446:	2100      	movs	r1, #0
   84448:	2069      	movs	r0, #105	; 0x69
   8444a:	4b0a      	ldr	r3, [pc, #40]	; (84474 <noOS_bootup_sequence+0x190>)
   8444c:	4798      	blx	r3
        mdelay(100);
   8444e:	2064      	movs	r0, #100	; 0x64
   84450:	4b10      	ldr	r3, [pc, #64]	; (84494 <noOS_bootup_sequence+0x1b0>)
   84452:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   84454:	687b      	ldr	r3, [r7, #4]
   84456:	3301      	adds	r3, #1
   84458:	607b      	str	r3, [r7, #4]
   8445a:	687b      	ldr	r3, [r7, #4]
   8445c:	2b02      	cmp	r3, #2
   8445e:	ddcb      	ble.n	843f8 <noOS_bootup_sequence+0x114>
    }
}
   84460:	bf00      	nop
   84462:	3708      	adds	r7, #8
   84464:	46bd      	mov	sp, r7
   84466:	bd80      	pop	{r7, pc}
   84468:	00082f05 	.word	0x00082f05
   8446c:	20070fe8 	.word	0x20070fe8
   84470:	20070fe4 	.word	0x20070fe4
   84474:	00084161 	.word	0x00084161
   84478:	20070fec 	.word	0x20070fec
   8447c:	20070df4 	.word	0x20070df4
   84480:	200701a0 	.word	0x200701a0
   84484:	00089480 	.word	0x00089480
   84488:	0008164d 	.word	0x0008164d
   8448c:	00089490 	.word	0x00089490
   84490:	000841cb 	.word	0x000841cb
   84494:	00082f19 	.word	0x00082f19

00084498 <set_led>:

void set_led(ioport_pin_t pin, Bool level)
{
   84498:	b580      	push	{r7, lr}
   8449a:	b082      	sub	sp, #8
   8449c:	af00      	add	r7, sp, #0
   8449e:	6078      	str	r0, [r7, #4]
   844a0:	460b      	mov	r3, r1
   844a2:	70fb      	strb	r3, [r7, #3]
    if (allow_leds)
   844a4:	4b0b      	ldr	r3, [pc, #44]	; (844d4 <set_led+0x3c>)
   844a6:	781b      	ldrb	r3, [r3, #0]
   844a8:	2b00      	cmp	r3, #0
   844aa:	d00a      	beq.n	844c2 <set_led+0x2a>
    {
        ioport_set_pin_level(pin, level);
   844ac:	78fb      	ldrb	r3, [r7, #3]
   844ae:	2b00      	cmp	r3, #0
   844b0:	bf14      	ite	ne
   844b2:	2301      	movne	r3, #1
   844b4:	2300      	moveq	r3, #0
   844b6:	b2db      	uxtb	r3, r3
   844b8:	4619      	mov	r1, r3
   844ba:	6878      	ldr	r0, [r7, #4]
   844bc:	4b06      	ldr	r3, [pc, #24]	; (844d8 <set_led+0x40>)
   844be:	4798      	blx	r3
    }
    else
    {
        ioport_set_pin_level(pin, 0);
    }
}
   844c0:	e003      	b.n	844ca <set_led+0x32>
        ioport_set_pin_level(pin, 0);
   844c2:	2100      	movs	r1, #0
   844c4:	6878      	ldr	r0, [r7, #4]
   844c6:	4b04      	ldr	r3, [pc, #16]	; (844d8 <set_led+0x40>)
   844c8:	4798      	blx	r3
}
   844ca:	bf00      	nop
   844cc:	3708      	adds	r7, #8
   844ce:	46bd      	mov	sp, r7
   844d0:	bd80      	pop	{r7, pc}
   844d2:	bf00      	nop
   844d4:	2007018d 	.word	0x2007018d
   844d8:	00084161 	.word	0x00084161

000844dc <__aeabi_drsub>:
   844dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   844e0:	e002      	b.n	844e8 <__adddf3>
   844e2:	bf00      	nop

000844e4 <__aeabi_dsub>:
   844e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000844e8 <__adddf3>:
   844e8:	b530      	push	{r4, r5, lr}
   844ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   844ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   844f2:	ea94 0f05 	teq	r4, r5
   844f6:	bf08      	it	eq
   844f8:	ea90 0f02 	teqeq	r0, r2
   844fc:	bf1f      	itttt	ne
   844fe:	ea54 0c00 	orrsne.w	ip, r4, r0
   84502:	ea55 0c02 	orrsne.w	ip, r5, r2
   84506:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8450a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8450e:	f000 80e2 	beq.w	846d6 <__adddf3+0x1ee>
   84512:	ea4f 5454 	mov.w	r4, r4, lsr #21
   84516:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8451a:	bfb8      	it	lt
   8451c:	426d      	neglt	r5, r5
   8451e:	dd0c      	ble.n	8453a <__adddf3+0x52>
   84520:	442c      	add	r4, r5
   84522:	ea80 0202 	eor.w	r2, r0, r2
   84526:	ea81 0303 	eor.w	r3, r1, r3
   8452a:	ea82 0000 	eor.w	r0, r2, r0
   8452e:	ea83 0101 	eor.w	r1, r3, r1
   84532:	ea80 0202 	eor.w	r2, r0, r2
   84536:	ea81 0303 	eor.w	r3, r1, r3
   8453a:	2d36      	cmp	r5, #54	; 0x36
   8453c:	bf88      	it	hi
   8453e:	bd30      	pophi	{r4, r5, pc}
   84540:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   84544:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84548:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8454c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   84550:	d002      	beq.n	84558 <__adddf3+0x70>
   84552:	4240      	negs	r0, r0
   84554:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84558:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8455c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   84560:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   84564:	d002      	beq.n	8456c <__adddf3+0x84>
   84566:	4252      	negs	r2, r2
   84568:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8456c:	ea94 0f05 	teq	r4, r5
   84570:	f000 80a7 	beq.w	846c2 <__adddf3+0x1da>
   84574:	f1a4 0401 	sub.w	r4, r4, #1
   84578:	f1d5 0e20 	rsbs	lr, r5, #32
   8457c:	db0d      	blt.n	8459a <__adddf3+0xb2>
   8457e:	fa02 fc0e 	lsl.w	ip, r2, lr
   84582:	fa22 f205 	lsr.w	r2, r2, r5
   84586:	1880      	adds	r0, r0, r2
   84588:	f141 0100 	adc.w	r1, r1, #0
   8458c:	fa03 f20e 	lsl.w	r2, r3, lr
   84590:	1880      	adds	r0, r0, r2
   84592:	fa43 f305 	asr.w	r3, r3, r5
   84596:	4159      	adcs	r1, r3
   84598:	e00e      	b.n	845b8 <__adddf3+0xd0>
   8459a:	f1a5 0520 	sub.w	r5, r5, #32
   8459e:	f10e 0e20 	add.w	lr, lr, #32
   845a2:	2a01      	cmp	r2, #1
   845a4:	fa03 fc0e 	lsl.w	ip, r3, lr
   845a8:	bf28      	it	cs
   845aa:	f04c 0c02 	orrcs.w	ip, ip, #2
   845ae:	fa43 f305 	asr.w	r3, r3, r5
   845b2:	18c0      	adds	r0, r0, r3
   845b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   845b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   845bc:	d507      	bpl.n	845ce <__adddf3+0xe6>
   845be:	f04f 0e00 	mov.w	lr, #0
   845c2:	f1dc 0c00 	rsbs	ip, ip, #0
   845c6:	eb7e 0000 	sbcs.w	r0, lr, r0
   845ca:	eb6e 0101 	sbc.w	r1, lr, r1
   845ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   845d2:	d31b      	bcc.n	8460c <__adddf3+0x124>
   845d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   845d8:	d30c      	bcc.n	845f4 <__adddf3+0x10c>
   845da:	0849      	lsrs	r1, r1, #1
   845dc:	ea5f 0030 	movs.w	r0, r0, rrx
   845e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   845e4:	f104 0401 	add.w	r4, r4, #1
   845e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   845ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   845f0:	f080 809a 	bcs.w	84728 <__adddf3+0x240>
   845f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   845f8:	bf08      	it	eq
   845fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   845fe:	f150 0000 	adcs.w	r0, r0, #0
   84602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84606:	ea41 0105 	orr.w	r1, r1, r5
   8460a:	bd30      	pop	{r4, r5, pc}
   8460c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   84610:	4140      	adcs	r0, r0
   84612:	eb41 0101 	adc.w	r1, r1, r1
   84616:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8461a:	f1a4 0401 	sub.w	r4, r4, #1
   8461e:	d1e9      	bne.n	845f4 <__adddf3+0x10c>
   84620:	f091 0f00 	teq	r1, #0
   84624:	bf04      	itt	eq
   84626:	4601      	moveq	r1, r0
   84628:	2000      	moveq	r0, #0
   8462a:	fab1 f381 	clz	r3, r1
   8462e:	bf08      	it	eq
   84630:	3320      	addeq	r3, #32
   84632:	f1a3 030b 	sub.w	r3, r3, #11
   84636:	f1b3 0220 	subs.w	r2, r3, #32
   8463a:	da0c      	bge.n	84656 <__adddf3+0x16e>
   8463c:	320c      	adds	r2, #12
   8463e:	dd08      	ble.n	84652 <__adddf3+0x16a>
   84640:	f102 0c14 	add.w	ip, r2, #20
   84644:	f1c2 020c 	rsb	r2, r2, #12
   84648:	fa01 f00c 	lsl.w	r0, r1, ip
   8464c:	fa21 f102 	lsr.w	r1, r1, r2
   84650:	e00c      	b.n	8466c <__adddf3+0x184>
   84652:	f102 0214 	add.w	r2, r2, #20
   84656:	bfd8      	it	le
   84658:	f1c2 0c20 	rsble	ip, r2, #32
   8465c:	fa01 f102 	lsl.w	r1, r1, r2
   84660:	fa20 fc0c 	lsr.w	ip, r0, ip
   84664:	bfdc      	itt	le
   84666:	ea41 010c 	orrle.w	r1, r1, ip
   8466a:	4090      	lslle	r0, r2
   8466c:	1ae4      	subs	r4, r4, r3
   8466e:	bfa2      	ittt	ge
   84670:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   84674:	4329      	orrge	r1, r5
   84676:	bd30      	popge	{r4, r5, pc}
   84678:	ea6f 0404 	mvn.w	r4, r4
   8467c:	3c1f      	subs	r4, #31
   8467e:	da1c      	bge.n	846ba <__adddf3+0x1d2>
   84680:	340c      	adds	r4, #12
   84682:	dc0e      	bgt.n	846a2 <__adddf3+0x1ba>
   84684:	f104 0414 	add.w	r4, r4, #20
   84688:	f1c4 0220 	rsb	r2, r4, #32
   8468c:	fa20 f004 	lsr.w	r0, r0, r4
   84690:	fa01 f302 	lsl.w	r3, r1, r2
   84694:	ea40 0003 	orr.w	r0, r0, r3
   84698:	fa21 f304 	lsr.w	r3, r1, r4
   8469c:	ea45 0103 	orr.w	r1, r5, r3
   846a0:	bd30      	pop	{r4, r5, pc}
   846a2:	f1c4 040c 	rsb	r4, r4, #12
   846a6:	f1c4 0220 	rsb	r2, r4, #32
   846aa:	fa20 f002 	lsr.w	r0, r0, r2
   846ae:	fa01 f304 	lsl.w	r3, r1, r4
   846b2:	ea40 0003 	orr.w	r0, r0, r3
   846b6:	4629      	mov	r1, r5
   846b8:	bd30      	pop	{r4, r5, pc}
   846ba:	fa21 f004 	lsr.w	r0, r1, r4
   846be:	4629      	mov	r1, r5
   846c0:	bd30      	pop	{r4, r5, pc}
   846c2:	f094 0f00 	teq	r4, #0
   846c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   846ca:	bf06      	itte	eq
   846cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   846d0:	3401      	addeq	r4, #1
   846d2:	3d01      	subne	r5, #1
   846d4:	e74e      	b.n	84574 <__adddf3+0x8c>
   846d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   846da:	bf18      	it	ne
   846dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   846e0:	d029      	beq.n	84736 <__adddf3+0x24e>
   846e2:	ea94 0f05 	teq	r4, r5
   846e6:	bf08      	it	eq
   846e8:	ea90 0f02 	teqeq	r0, r2
   846ec:	d005      	beq.n	846fa <__adddf3+0x212>
   846ee:	ea54 0c00 	orrs.w	ip, r4, r0
   846f2:	bf04      	itt	eq
   846f4:	4619      	moveq	r1, r3
   846f6:	4610      	moveq	r0, r2
   846f8:	bd30      	pop	{r4, r5, pc}
   846fa:	ea91 0f03 	teq	r1, r3
   846fe:	bf1e      	ittt	ne
   84700:	2100      	movne	r1, #0
   84702:	2000      	movne	r0, #0
   84704:	bd30      	popne	{r4, r5, pc}
   84706:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8470a:	d105      	bne.n	84718 <__adddf3+0x230>
   8470c:	0040      	lsls	r0, r0, #1
   8470e:	4149      	adcs	r1, r1
   84710:	bf28      	it	cs
   84712:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   84716:	bd30      	pop	{r4, r5, pc}
   84718:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8471c:	bf3c      	itt	cc
   8471e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   84722:	bd30      	popcc	{r4, r5, pc}
   84724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84728:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8472c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84730:	f04f 0000 	mov.w	r0, #0
   84734:	bd30      	pop	{r4, r5, pc}
   84736:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8473a:	bf1a      	itte	ne
   8473c:	4619      	movne	r1, r3
   8473e:	4610      	movne	r0, r2
   84740:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   84744:	bf1c      	itt	ne
   84746:	460b      	movne	r3, r1
   84748:	4602      	movne	r2, r0
   8474a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8474e:	bf06      	itte	eq
   84750:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   84754:	ea91 0f03 	teqeq	r1, r3
   84758:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8475c:	bd30      	pop	{r4, r5, pc}
   8475e:	bf00      	nop

00084760 <__aeabi_ui2d>:
   84760:	f090 0f00 	teq	r0, #0
   84764:	bf04      	itt	eq
   84766:	2100      	moveq	r1, #0
   84768:	4770      	bxeq	lr
   8476a:	b530      	push	{r4, r5, lr}
   8476c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84770:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84774:	f04f 0500 	mov.w	r5, #0
   84778:	f04f 0100 	mov.w	r1, #0
   8477c:	e750      	b.n	84620 <__adddf3+0x138>
   8477e:	bf00      	nop

00084780 <__aeabi_i2d>:
   84780:	f090 0f00 	teq	r0, #0
   84784:	bf04      	itt	eq
   84786:	2100      	moveq	r1, #0
   84788:	4770      	bxeq	lr
   8478a:	b530      	push	{r4, r5, lr}
   8478c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84790:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84794:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   84798:	bf48      	it	mi
   8479a:	4240      	negmi	r0, r0
   8479c:	f04f 0100 	mov.w	r1, #0
   847a0:	e73e      	b.n	84620 <__adddf3+0x138>
   847a2:	bf00      	nop

000847a4 <__aeabi_f2d>:
   847a4:	0042      	lsls	r2, r0, #1
   847a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   847aa:	ea4f 0131 	mov.w	r1, r1, rrx
   847ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   847b2:	bf1f      	itttt	ne
   847b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   847b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   847bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   847c0:	4770      	bxne	lr
   847c2:	f092 0f00 	teq	r2, #0
   847c6:	bf14      	ite	ne
   847c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   847cc:	4770      	bxeq	lr
   847ce:	b530      	push	{r4, r5, lr}
   847d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   847d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   847d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   847dc:	e720      	b.n	84620 <__adddf3+0x138>
   847de:	bf00      	nop

000847e0 <__aeabi_ul2d>:
   847e0:	ea50 0201 	orrs.w	r2, r0, r1
   847e4:	bf08      	it	eq
   847e6:	4770      	bxeq	lr
   847e8:	b530      	push	{r4, r5, lr}
   847ea:	f04f 0500 	mov.w	r5, #0
   847ee:	e00a      	b.n	84806 <__aeabi_l2d+0x16>

000847f0 <__aeabi_l2d>:
   847f0:	ea50 0201 	orrs.w	r2, r0, r1
   847f4:	bf08      	it	eq
   847f6:	4770      	bxeq	lr
   847f8:	b530      	push	{r4, r5, lr}
   847fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   847fe:	d502      	bpl.n	84806 <__aeabi_l2d+0x16>
   84800:	4240      	negs	r0, r0
   84802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84806:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8480a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8480e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   84812:	f43f aedc 	beq.w	845ce <__adddf3+0xe6>
   84816:	f04f 0203 	mov.w	r2, #3
   8481a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8481e:	bf18      	it	ne
   84820:	3203      	addne	r2, #3
   84822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84826:	bf18      	it	ne
   84828:	3203      	addne	r2, #3
   8482a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8482e:	f1c2 0320 	rsb	r3, r2, #32
   84832:	fa00 fc03 	lsl.w	ip, r0, r3
   84836:	fa20 f002 	lsr.w	r0, r0, r2
   8483a:	fa01 fe03 	lsl.w	lr, r1, r3
   8483e:	ea40 000e 	orr.w	r0, r0, lr
   84842:	fa21 f102 	lsr.w	r1, r1, r2
   84846:	4414      	add	r4, r2
   84848:	e6c1      	b.n	845ce <__adddf3+0xe6>
   8484a:	bf00      	nop

0008484c <__aeabi_dmul>:
   8484c:	b570      	push	{r4, r5, r6, lr}
   8484e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   84856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8485a:	bf1d      	ittte	ne
   8485c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84860:	ea94 0f0c 	teqne	r4, ip
   84864:	ea95 0f0c 	teqne	r5, ip
   84868:	f000 f8de 	bleq	84a28 <__aeabi_dmul+0x1dc>
   8486c:	442c      	add	r4, r5
   8486e:	ea81 0603 	eor.w	r6, r1, r3
   84872:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   84876:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8487a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8487e:	bf18      	it	ne
   84880:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   84884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8488c:	d038      	beq.n	84900 <__aeabi_dmul+0xb4>
   8488e:	fba0 ce02 	umull	ip, lr, r0, r2
   84892:	f04f 0500 	mov.w	r5, #0
   84896:	fbe1 e502 	umlal	lr, r5, r1, r2
   8489a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8489e:	fbe0 e503 	umlal	lr, r5, r0, r3
   848a2:	f04f 0600 	mov.w	r6, #0
   848a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   848aa:	f09c 0f00 	teq	ip, #0
   848ae:	bf18      	it	ne
   848b0:	f04e 0e01 	orrne.w	lr, lr, #1
   848b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   848b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   848bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   848c0:	d204      	bcs.n	848cc <__aeabi_dmul+0x80>
   848c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   848c6:	416d      	adcs	r5, r5
   848c8:	eb46 0606 	adc.w	r6, r6, r6
   848cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   848d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   848d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   848d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   848dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   848e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   848e4:	bf88      	it	hi
   848e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   848ea:	d81e      	bhi.n	8492a <__aeabi_dmul+0xde>
   848ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   848f0:	bf08      	it	eq
   848f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   848f6:	f150 0000 	adcs.w	r0, r0, #0
   848fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   848fe:	bd70      	pop	{r4, r5, r6, pc}
   84900:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   84904:	ea46 0101 	orr.w	r1, r6, r1
   84908:	ea40 0002 	orr.w	r0, r0, r2
   8490c:	ea81 0103 	eor.w	r1, r1, r3
   84910:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   84914:	bfc2      	ittt	gt
   84916:	ebd4 050c 	rsbsgt	r5, r4, ip
   8491a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8491e:	bd70      	popgt	{r4, r5, r6, pc}
   84920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84924:	f04f 0e00 	mov.w	lr, #0
   84928:	3c01      	subs	r4, #1
   8492a:	f300 80ab 	bgt.w	84a84 <__aeabi_dmul+0x238>
   8492e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   84932:	bfde      	ittt	le
   84934:	2000      	movle	r0, #0
   84936:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8493a:	bd70      	pople	{r4, r5, r6, pc}
   8493c:	f1c4 0400 	rsb	r4, r4, #0
   84940:	3c20      	subs	r4, #32
   84942:	da35      	bge.n	849b0 <__aeabi_dmul+0x164>
   84944:	340c      	adds	r4, #12
   84946:	dc1b      	bgt.n	84980 <__aeabi_dmul+0x134>
   84948:	f104 0414 	add.w	r4, r4, #20
   8494c:	f1c4 0520 	rsb	r5, r4, #32
   84950:	fa00 f305 	lsl.w	r3, r0, r5
   84954:	fa20 f004 	lsr.w	r0, r0, r4
   84958:	fa01 f205 	lsl.w	r2, r1, r5
   8495c:	ea40 0002 	orr.w	r0, r0, r2
   84960:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   84964:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84968:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8496c:	fa21 f604 	lsr.w	r6, r1, r4
   84970:	eb42 0106 	adc.w	r1, r2, r6
   84974:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84978:	bf08      	it	eq
   8497a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8497e:	bd70      	pop	{r4, r5, r6, pc}
   84980:	f1c4 040c 	rsb	r4, r4, #12
   84984:	f1c4 0520 	rsb	r5, r4, #32
   84988:	fa00 f304 	lsl.w	r3, r0, r4
   8498c:	fa20 f005 	lsr.w	r0, r0, r5
   84990:	fa01 f204 	lsl.w	r2, r1, r4
   84994:	ea40 0002 	orr.w	r0, r0, r2
   84998:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8499c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   849a0:	f141 0100 	adc.w	r1, r1, #0
   849a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   849a8:	bf08      	it	eq
   849aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   849ae:	bd70      	pop	{r4, r5, r6, pc}
   849b0:	f1c4 0520 	rsb	r5, r4, #32
   849b4:	fa00 f205 	lsl.w	r2, r0, r5
   849b8:	ea4e 0e02 	orr.w	lr, lr, r2
   849bc:	fa20 f304 	lsr.w	r3, r0, r4
   849c0:	fa01 f205 	lsl.w	r2, r1, r5
   849c4:	ea43 0302 	orr.w	r3, r3, r2
   849c8:	fa21 f004 	lsr.w	r0, r1, r4
   849cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   849d0:	fa21 f204 	lsr.w	r2, r1, r4
   849d4:	ea20 0002 	bic.w	r0, r0, r2
   849d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   849dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   849e0:	bf08      	it	eq
   849e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   849e6:	bd70      	pop	{r4, r5, r6, pc}
   849e8:	f094 0f00 	teq	r4, #0
   849ec:	d10f      	bne.n	84a0e <__aeabi_dmul+0x1c2>
   849ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   849f2:	0040      	lsls	r0, r0, #1
   849f4:	eb41 0101 	adc.w	r1, r1, r1
   849f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   849fc:	bf08      	it	eq
   849fe:	3c01      	subeq	r4, #1
   84a00:	d0f7      	beq.n	849f2 <__aeabi_dmul+0x1a6>
   84a02:	ea41 0106 	orr.w	r1, r1, r6
   84a06:	f095 0f00 	teq	r5, #0
   84a0a:	bf18      	it	ne
   84a0c:	4770      	bxne	lr
   84a0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   84a12:	0052      	lsls	r2, r2, #1
   84a14:	eb43 0303 	adc.w	r3, r3, r3
   84a18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   84a1c:	bf08      	it	eq
   84a1e:	3d01      	subeq	r5, #1
   84a20:	d0f7      	beq.n	84a12 <__aeabi_dmul+0x1c6>
   84a22:	ea43 0306 	orr.w	r3, r3, r6
   84a26:	4770      	bx	lr
   84a28:	ea94 0f0c 	teq	r4, ip
   84a2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84a30:	bf18      	it	ne
   84a32:	ea95 0f0c 	teqne	r5, ip
   84a36:	d00c      	beq.n	84a52 <__aeabi_dmul+0x206>
   84a38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84a3c:	bf18      	it	ne
   84a3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84a42:	d1d1      	bne.n	849e8 <__aeabi_dmul+0x19c>
   84a44:	ea81 0103 	eor.w	r1, r1, r3
   84a48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84a4c:	f04f 0000 	mov.w	r0, #0
   84a50:	bd70      	pop	{r4, r5, r6, pc}
   84a52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84a56:	bf06      	itte	eq
   84a58:	4610      	moveq	r0, r2
   84a5a:	4619      	moveq	r1, r3
   84a5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84a60:	d019      	beq.n	84a96 <__aeabi_dmul+0x24a>
   84a62:	ea94 0f0c 	teq	r4, ip
   84a66:	d102      	bne.n	84a6e <__aeabi_dmul+0x222>
   84a68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   84a6c:	d113      	bne.n	84a96 <__aeabi_dmul+0x24a>
   84a6e:	ea95 0f0c 	teq	r5, ip
   84a72:	d105      	bne.n	84a80 <__aeabi_dmul+0x234>
   84a74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   84a78:	bf1c      	itt	ne
   84a7a:	4610      	movne	r0, r2
   84a7c:	4619      	movne	r1, r3
   84a7e:	d10a      	bne.n	84a96 <__aeabi_dmul+0x24a>
   84a80:	ea81 0103 	eor.w	r1, r1, r3
   84a84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84a88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   84a8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84a90:	f04f 0000 	mov.w	r0, #0
   84a94:	bd70      	pop	{r4, r5, r6, pc}
   84a96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   84a9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   84a9e:	bd70      	pop	{r4, r5, r6, pc}

00084aa0 <__aeabi_ddiv>:
   84aa0:	b570      	push	{r4, r5, r6, lr}
   84aa2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84aa6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   84aaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   84aae:	bf1d      	ittte	ne
   84ab0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84ab4:	ea94 0f0c 	teqne	r4, ip
   84ab8:	ea95 0f0c 	teqne	r5, ip
   84abc:	f000 f8a7 	bleq	84c0e <__aeabi_ddiv+0x16e>
   84ac0:	eba4 0405 	sub.w	r4, r4, r5
   84ac4:	ea81 0e03 	eor.w	lr, r1, r3
   84ac8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84acc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84ad0:	f000 8088 	beq.w	84be4 <__aeabi_ddiv+0x144>
   84ad4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   84ad8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   84adc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   84ae0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   84ae4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   84ae8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   84aec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   84af0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   84af4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   84af8:	429d      	cmp	r5, r3
   84afa:	bf08      	it	eq
   84afc:	4296      	cmpeq	r6, r2
   84afe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   84b02:	f504 7440 	add.w	r4, r4, #768	; 0x300
   84b06:	d202      	bcs.n	84b0e <__aeabi_ddiv+0x6e>
   84b08:	085b      	lsrs	r3, r3, #1
   84b0a:	ea4f 0232 	mov.w	r2, r2, rrx
   84b0e:	1ab6      	subs	r6, r6, r2
   84b10:	eb65 0503 	sbc.w	r5, r5, r3
   84b14:	085b      	lsrs	r3, r3, #1
   84b16:	ea4f 0232 	mov.w	r2, r2, rrx
   84b1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   84b1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   84b22:	ebb6 0e02 	subs.w	lr, r6, r2
   84b26:	eb75 0e03 	sbcs.w	lr, r5, r3
   84b2a:	bf22      	ittt	cs
   84b2c:	1ab6      	subcs	r6, r6, r2
   84b2e:	4675      	movcs	r5, lr
   84b30:	ea40 000c 	orrcs.w	r0, r0, ip
   84b34:	085b      	lsrs	r3, r3, #1
   84b36:	ea4f 0232 	mov.w	r2, r2, rrx
   84b3a:	ebb6 0e02 	subs.w	lr, r6, r2
   84b3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   84b42:	bf22      	ittt	cs
   84b44:	1ab6      	subcs	r6, r6, r2
   84b46:	4675      	movcs	r5, lr
   84b48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   84b4c:	085b      	lsrs	r3, r3, #1
   84b4e:	ea4f 0232 	mov.w	r2, r2, rrx
   84b52:	ebb6 0e02 	subs.w	lr, r6, r2
   84b56:	eb75 0e03 	sbcs.w	lr, r5, r3
   84b5a:	bf22      	ittt	cs
   84b5c:	1ab6      	subcs	r6, r6, r2
   84b5e:	4675      	movcs	r5, lr
   84b60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   84b64:	085b      	lsrs	r3, r3, #1
   84b66:	ea4f 0232 	mov.w	r2, r2, rrx
   84b6a:	ebb6 0e02 	subs.w	lr, r6, r2
   84b6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   84b72:	bf22      	ittt	cs
   84b74:	1ab6      	subcs	r6, r6, r2
   84b76:	4675      	movcs	r5, lr
   84b78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   84b7c:	ea55 0e06 	orrs.w	lr, r5, r6
   84b80:	d018      	beq.n	84bb4 <__aeabi_ddiv+0x114>
   84b82:	ea4f 1505 	mov.w	r5, r5, lsl #4
   84b86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   84b8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   84b8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   84b92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   84b96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   84b9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   84b9e:	d1c0      	bne.n	84b22 <__aeabi_ddiv+0x82>
   84ba0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84ba4:	d10b      	bne.n	84bbe <__aeabi_ddiv+0x11e>
   84ba6:	ea41 0100 	orr.w	r1, r1, r0
   84baa:	f04f 0000 	mov.w	r0, #0
   84bae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   84bb2:	e7b6      	b.n	84b22 <__aeabi_ddiv+0x82>
   84bb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84bb8:	bf04      	itt	eq
   84bba:	4301      	orreq	r1, r0
   84bbc:	2000      	moveq	r0, #0
   84bbe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84bc2:	bf88      	it	hi
   84bc4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   84bc8:	f63f aeaf 	bhi.w	8492a <__aeabi_dmul+0xde>
   84bcc:	ebb5 0c03 	subs.w	ip, r5, r3
   84bd0:	bf04      	itt	eq
   84bd2:	ebb6 0c02 	subseq.w	ip, r6, r2
   84bd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   84bda:	f150 0000 	adcs.w	r0, r0, #0
   84bde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84be2:	bd70      	pop	{r4, r5, r6, pc}
   84be4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   84be8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   84bec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   84bf0:	bfc2      	ittt	gt
   84bf2:	ebd4 050c 	rsbsgt	r5, r4, ip
   84bf6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84bfa:	bd70      	popgt	{r4, r5, r6, pc}
   84bfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84c00:	f04f 0e00 	mov.w	lr, #0
   84c04:	3c01      	subs	r4, #1
   84c06:	e690      	b.n	8492a <__aeabi_dmul+0xde>
   84c08:	ea45 0e06 	orr.w	lr, r5, r6
   84c0c:	e68d      	b.n	8492a <__aeabi_dmul+0xde>
   84c0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84c12:	ea94 0f0c 	teq	r4, ip
   84c16:	bf08      	it	eq
   84c18:	ea95 0f0c 	teqeq	r5, ip
   84c1c:	f43f af3b 	beq.w	84a96 <__aeabi_dmul+0x24a>
   84c20:	ea94 0f0c 	teq	r4, ip
   84c24:	d10a      	bne.n	84c3c <__aeabi_ddiv+0x19c>
   84c26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   84c2a:	f47f af34 	bne.w	84a96 <__aeabi_dmul+0x24a>
   84c2e:	ea95 0f0c 	teq	r5, ip
   84c32:	f47f af25 	bne.w	84a80 <__aeabi_dmul+0x234>
   84c36:	4610      	mov	r0, r2
   84c38:	4619      	mov	r1, r3
   84c3a:	e72c      	b.n	84a96 <__aeabi_dmul+0x24a>
   84c3c:	ea95 0f0c 	teq	r5, ip
   84c40:	d106      	bne.n	84c50 <__aeabi_ddiv+0x1b0>
   84c42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84c46:	f43f aefd 	beq.w	84a44 <__aeabi_dmul+0x1f8>
   84c4a:	4610      	mov	r0, r2
   84c4c:	4619      	mov	r1, r3
   84c4e:	e722      	b.n	84a96 <__aeabi_dmul+0x24a>
   84c50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84c54:	bf18      	it	ne
   84c56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84c5a:	f47f aec5 	bne.w	849e8 <__aeabi_dmul+0x19c>
   84c5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   84c62:	f47f af0d 	bne.w	84a80 <__aeabi_dmul+0x234>
   84c66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   84c6a:	f47f aeeb 	bne.w	84a44 <__aeabi_dmul+0x1f8>
   84c6e:	e712      	b.n	84a96 <__aeabi_dmul+0x24a>

00084c70 <__aeabi_frsub>:
   84c70:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   84c74:	e002      	b.n	84c7c <__addsf3>
   84c76:	bf00      	nop

00084c78 <__aeabi_fsub>:
   84c78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00084c7c <__addsf3>:
   84c7c:	0042      	lsls	r2, r0, #1
   84c7e:	bf1f      	itttt	ne
   84c80:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   84c84:	ea92 0f03 	teqne	r2, r3
   84c88:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   84c8c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84c90:	d06a      	beq.n	84d68 <__addsf3+0xec>
   84c92:	ea4f 6212 	mov.w	r2, r2, lsr #24
   84c96:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   84c9a:	bfc1      	itttt	gt
   84c9c:	18d2      	addgt	r2, r2, r3
   84c9e:	4041      	eorgt	r1, r0
   84ca0:	4048      	eorgt	r0, r1
   84ca2:	4041      	eorgt	r1, r0
   84ca4:	bfb8      	it	lt
   84ca6:	425b      	neglt	r3, r3
   84ca8:	2b19      	cmp	r3, #25
   84caa:	bf88      	it	hi
   84cac:	4770      	bxhi	lr
   84cae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   84cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84cb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   84cba:	bf18      	it	ne
   84cbc:	4240      	negne	r0, r0
   84cbe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   84cc2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   84cc6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   84cca:	bf18      	it	ne
   84ccc:	4249      	negne	r1, r1
   84cce:	ea92 0f03 	teq	r2, r3
   84cd2:	d03f      	beq.n	84d54 <__addsf3+0xd8>
   84cd4:	f1a2 0201 	sub.w	r2, r2, #1
   84cd8:	fa41 fc03 	asr.w	ip, r1, r3
   84cdc:	eb10 000c 	adds.w	r0, r0, ip
   84ce0:	f1c3 0320 	rsb	r3, r3, #32
   84ce4:	fa01 f103 	lsl.w	r1, r1, r3
   84ce8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84cec:	d502      	bpl.n	84cf4 <__addsf3+0x78>
   84cee:	4249      	negs	r1, r1
   84cf0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   84cf4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   84cf8:	d313      	bcc.n	84d22 <__addsf3+0xa6>
   84cfa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   84cfe:	d306      	bcc.n	84d0e <__addsf3+0x92>
   84d00:	0840      	lsrs	r0, r0, #1
   84d02:	ea4f 0131 	mov.w	r1, r1, rrx
   84d06:	f102 0201 	add.w	r2, r2, #1
   84d0a:	2afe      	cmp	r2, #254	; 0xfe
   84d0c:	d251      	bcs.n	84db2 <__addsf3+0x136>
   84d0e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   84d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   84d16:	bf08      	it	eq
   84d18:	f020 0001 	biceq.w	r0, r0, #1
   84d1c:	ea40 0003 	orr.w	r0, r0, r3
   84d20:	4770      	bx	lr
   84d22:	0049      	lsls	r1, r1, #1
   84d24:	eb40 0000 	adc.w	r0, r0, r0
   84d28:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   84d2c:	f1a2 0201 	sub.w	r2, r2, #1
   84d30:	d1ed      	bne.n	84d0e <__addsf3+0x92>
   84d32:	fab0 fc80 	clz	ip, r0
   84d36:	f1ac 0c08 	sub.w	ip, ip, #8
   84d3a:	ebb2 020c 	subs.w	r2, r2, ip
   84d3e:	fa00 f00c 	lsl.w	r0, r0, ip
   84d42:	bfaa      	itet	ge
   84d44:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   84d48:	4252      	neglt	r2, r2
   84d4a:	4318      	orrge	r0, r3
   84d4c:	bfbc      	itt	lt
   84d4e:	40d0      	lsrlt	r0, r2
   84d50:	4318      	orrlt	r0, r3
   84d52:	4770      	bx	lr
   84d54:	f092 0f00 	teq	r2, #0
   84d58:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   84d5c:	bf06      	itte	eq
   84d5e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   84d62:	3201      	addeq	r2, #1
   84d64:	3b01      	subne	r3, #1
   84d66:	e7b5      	b.n	84cd4 <__addsf3+0x58>
   84d68:	ea4f 0341 	mov.w	r3, r1, lsl #1
   84d6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   84d70:	bf18      	it	ne
   84d72:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84d76:	d021      	beq.n	84dbc <__addsf3+0x140>
   84d78:	ea92 0f03 	teq	r2, r3
   84d7c:	d004      	beq.n	84d88 <__addsf3+0x10c>
   84d7e:	f092 0f00 	teq	r2, #0
   84d82:	bf08      	it	eq
   84d84:	4608      	moveq	r0, r1
   84d86:	4770      	bx	lr
   84d88:	ea90 0f01 	teq	r0, r1
   84d8c:	bf1c      	itt	ne
   84d8e:	2000      	movne	r0, #0
   84d90:	4770      	bxne	lr
   84d92:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   84d96:	d104      	bne.n	84da2 <__addsf3+0x126>
   84d98:	0040      	lsls	r0, r0, #1
   84d9a:	bf28      	it	cs
   84d9c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   84da0:	4770      	bx	lr
   84da2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   84da6:	bf3c      	itt	cc
   84da8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   84dac:	4770      	bxcc	lr
   84dae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84db2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   84db6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84dba:	4770      	bx	lr
   84dbc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   84dc0:	bf16      	itet	ne
   84dc2:	4608      	movne	r0, r1
   84dc4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   84dc8:	4601      	movne	r1, r0
   84dca:	0242      	lsls	r2, r0, #9
   84dcc:	bf06      	itte	eq
   84dce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   84dd2:	ea90 0f01 	teqeq	r0, r1
   84dd6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   84dda:	4770      	bx	lr

00084ddc <__aeabi_ui2f>:
   84ddc:	f04f 0300 	mov.w	r3, #0
   84de0:	e004      	b.n	84dec <__aeabi_i2f+0x8>
   84de2:	bf00      	nop

00084de4 <__aeabi_i2f>:
   84de4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   84de8:	bf48      	it	mi
   84dea:	4240      	negmi	r0, r0
   84dec:	ea5f 0c00 	movs.w	ip, r0
   84df0:	bf08      	it	eq
   84df2:	4770      	bxeq	lr
   84df4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   84df8:	4601      	mov	r1, r0
   84dfa:	f04f 0000 	mov.w	r0, #0
   84dfe:	e01c      	b.n	84e3a <__aeabi_l2f+0x2a>

00084e00 <__aeabi_ul2f>:
   84e00:	ea50 0201 	orrs.w	r2, r0, r1
   84e04:	bf08      	it	eq
   84e06:	4770      	bxeq	lr
   84e08:	f04f 0300 	mov.w	r3, #0
   84e0c:	e00a      	b.n	84e24 <__aeabi_l2f+0x14>
   84e0e:	bf00      	nop

00084e10 <__aeabi_l2f>:
   84e10:	ea50 0201 	orrs.w	r2, r0, r1
   84e14:	bf08      	it	eq
   84e16:	4770      	bxeq	lr
   84e18:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   84e1c:	d502      	bpl.n	84e24 <__aeabi_l2f+0x14>
   84e1e:	4240      	negs	r0, r0
   84e20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84e24:	ea5f 0c01 	movs.w	ip, r1
   84e28:	bf02      	ittt	eq
   84e2a:	4684      	moveq	ip, r0
   84e2c:	4601      	moveq	r1, r0
   84e2e:	2000      	moveq	r0, #0
   84e30:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   84e34:	bf08      	it	eq
   84e36:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   84e3a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   84e3e:	fabc f28c 	clz	r2, ip
   84e42:	3a08      	subs	r2, #8
   84e44:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   84e48:	db10      	blt.n	84e6c <__aeabi_l2f+0x5c>
   84e4a:	fa01 fc02 	lsl.w	ip, r1, r2
   84e4e:	4463      	add	r3, ip
   84e50:	fa00 fc02 	lsl.w	ip, r0, r2
   84e54:	f1c2 0220 	rsb	r2, r2, #32
   84e58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84e5c:	fa20 f202 	lsr.w	r2, r0, r2
   84e60:	eb43 0002 	adc.w	r0, r3, r2
   84e64:	bf08      	it	eq
   84e66:	f020 0001 	biceq.w	r0, r0, #1
   84e6a:	4770      	bx	lr
   84e6c:	f102 0220 	add.w	r2, r2, #32
   84e70:	fa01 fc02 	lsl.w	ip, r1, r2
   84e74:	f1c2 0220 	rsb	r2, r2, #32
   84e78:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   84e7c:	fa21 f202 	lsr.w	r2, r1, r2
   84e80:	eb43 0002 	adc.w	r0, r3, r2
   84e84:	bf08      	it	eq
   84e86:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   84e8a:	4770      	bx	lr

00084e8c <__aeabi_fmul>:
   84e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   84e94:	bf1e      	ittt	ne
   84e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   84e9a:	ea92 0f0c 	teqne	r2, ip
   84e9e:	ea93 0f0c 	teqne	r3, ip
   84ea2:	d06f      	beq.n	84f84 <__aeabi_fmul+0xf8>
   84ea4:	441a      	add	r2, r3
   84ea6:	ea80 0c01 	eor.w	ip, r0, r1
   84eaa:	0240      	lsls	r0, r0, #9
   84eac:	bf18      	it	ne
   84eae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   84eb2:	d01e      	beq.n	84ef2 <__aeabi_fmul+0x66>
   84eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   84eb8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   84ebc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   84ec0:	fba0 3101 	umull	r3, r1, r0, r1
   84ec4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   84ec8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   84ecc:	bf3e      	ittt	cc
   84ece:	0049      	lslcc	r1, r1, #1
   84ed0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   84ed4:	005b      	lslcc	r3, r3, #1
   84ed6:	ea40 0001 	orr.w	r0, r0, r1
   84eda:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   84ede:	2afd      	cmp	r2, #253	; 0xfd
   84ee0:	d81d      	bhi.n	84f1e <__aeabi_fmul+0x92>
   84ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   84ee6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   84eea:	bf08      	it	eq
   84eec:	f020 0001 	biceq.w	r0, r0, #1
   84ef0:	4770      	bx	lr
   84ef2:	f090 0f00 	teq	r0, #0
   84ef6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   84efa:	bf08      	it	eq
   84efc:	0249      	lsleq	r1, r1, #9
   84efe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   84f02:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   84f06:	3a7f      	subs	r2, #127	; 0x7f
   84f08:	bfc2      	ittt	gt
   84f0a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   84f0e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   84f12:	4770      	bxgt	lr
   84f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84f18:	f04f 0300 	mov.w	r3, #0
   84f1c:	3a01      	subs	r2, #1
   84f1e:	dc5d      	bgt.n	84fdc <__aeabi_fmul+0x150>
   84f20:	f112 0f19 	cmn.w	r2, #25
   84f24:	bfdc      	itt	le
   84f26:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   84f2a:	4770      	bxle	lr
   84f2c:	f1c2 0200 	rsb	r2, r2, #0
   84f30:	0041      	lsls	r1, r0, #1
   84f32:	fa21 f102 	lsr.w	r1, r1, r2
   84f36:	f1c2 0220 	rsb	r2, r2, #32
   84f3a:	fa00 fc02 	lsl.w	ip, r0, r2
   84f3e:	ea5f 0031 	movs.w	r0, r1, rrx
   84f42:	f140 0000 	adc.w	r0, r0, #0
   84f46:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   84f4a:	bf08      	it	eq
   84f4c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   84f50:	4770      	bx	lr
   84f52:	f092 0f00 	teq	r2, #0
   84f56:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   84f5a:	bf02      	ittt	eq
   84f5c:	0040      	lsleq	r0, r0, #1
   84f5e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   84f62:	3a01      	subeq	r2, #1
   84f64:	d0f9      	beq.n	84f5a <__aeabi_fmul+0xce>
   84f66:	ea40 000c 	orr.w	r0, r0, ip
   84f6a:	f093 0f00 	teq	r3, #0
   84f6e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   84f72:	bf02      	ittt	eq
   84f74:	0049      	lsleq	r1, r1, #1
   84f76:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   84f7a:	3b01      	subeq	r3, #1
   84f7c:	d0f9      	beq.n	84f72 <__aeabi_fmul+0xe6>
   84f7e:	ea41 010c 	orr.w	r1, r1, ip
   84f82:	e78f      	b.n	84ea4 <__aeabi_fmul+0x18>
   84f84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   84f88:	ea92 0f0c 	teq	r2, ip
   84f8c:	bf18      	it	ne
   84f8e:	ea93 0f0c 	teqne	r3, ip
   84f92:	d00a      	beq.n	84faa <__aeabi_fmul+0x11e>
   84f94:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   84f98:	bf18      	it	ne
   84f9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   84f9e:	d1d8      	bne.n	84f52 <__aeabi_fmul+0xc6>
   84fa0:	ea80 0001 	eor.w	r0, r0, r1
   84fa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   84fa8:	4770      	bx	lr
   84faa:	f090 0f00 	teq	r0, #0
   84fae:	bf17      	itett	ne
   84fb0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   84fb4:	4608      	moveq	r0, r1
   84fb6:	f091 0f00 	teqne	r1, #0
   84fba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   84fbe:	d014      	beq.n	84fea <__aeabi_fmul+0x15e>
   84fc0:	ea92 0f0c 	teq	r2, ip
   84fc4:	d101      	bne.n	84fca <__aeabi_fmul+0x13e>
   84fc6:	0242      	lsls	r2, r0, #9
   84fc8:	d10f      	bne.n	84fea <__aeabi_fmul+0x15e>
   84fca:	ea93 0f0c 	teq	r3, ip
   84fce:	d103      	bne.n	84fd8 <__aeabi_fmul+0x14c>
   84fd0:	024b      	lsls	r3, r1, #9
   84fd2:	bf18      	it	ne
   84fd4:	4608      	movne	r0, r1
   84fd6:	d108      	bne.n	84fea <__aeabi_fmul+0x15e>
   84fd8:	ea80 0001 	eor.w	r0, r0, r1
   84fdc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   84fe0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   84fe4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84fe8:	4770      	bx	lr
   84fea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   84fee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   84ff2:	4770      	bx	lr

00084ff4 <__aeabi_fdiv>:
   84ff4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84ff8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   84ffc:	bf1e      	ittt	ne
   84ffe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   85002:	ea92 0f0c 	teqne	r2, ip
   85006:	ea93 0f0c 	teqne	r3, ip
   8500a:	d069      	beq.n	850e0 <__aeabi_fdiv+0xec>
   8500c:	eba2 0203 	sub.w	r2, r2, r3
   85010:	ea80 0c01 	eor.w	ip, r0, r1
   85014:	0249      	lsls	r1, r1, #9
   85016:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8501a:	d037      	beq.n	8508c <__aeabi_fdiv+0x98>
   8501c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   85020:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   85024:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   85028:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8502c:	428b      	cmp	r3, r1
   8502e:	bf38      	it	cc
   85030:	005b      	lslcc	r3, r3, #1
   85032:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   85036:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8503a:	428b      	cmp	r3, r1
   8503c:	bf24      	itt	cs
   8503e:	1a5b      	subcs	r3, r3, r1
   85040:	ea40 000c 	orrcs.w	r0, r0, ip
   85044:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   85048:	bf24      	itt	cs
   8504a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   8504e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   85052:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   85056:	bf24      	itt	cs
   85058:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   8505c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   85060:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   85064:	bf24      	itt	cs
   85066:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   8506a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8506e:	011b      	lsls	r3, r3, #4
   85070:	bf18      	it	ne
   85072:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   85076:	d1e0      	bne.n	8503a <__aeabi_fdiv+0x46>
   85078:	2afd      	cmp	r2, #253	; 0xfd
   8507a:	f63f af50 	bhi.w	84f1e <__aeabi_fmul+0x92>
   8507e:	428b      	cmp	r3, r1
   85080:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85084:	bf08      	it	eq
   85086:	f020 0001 	biceq.w	r0, r0, #1
   8508a:	4770      	bx	lr
   8508c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   85090:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   85094:	327f      	adds	r2, #127	; 0x7f
   85096:	bfc2      	ittt	gt
   85098:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8509c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   850a0:	4770      	bxgt	lr
   850a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   850a6:	f04f 0300 	mov.w	r3, #0
   850aa:	3a01      	subs	r2, #1
   850ac:	e737      	b.n	84f1e <__aeabi_fmul+0x92>
   850ae:	f092 0f00 	teq	r2, #0
   850b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   850b6:	bf02      	ittt	eq
   850b8:	0040      	lsleq	r0, r0, #1
   850ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   850be:	3a01      	subeq	r2, #1
   850c0:	d0f9      	beq.n	850b6 <__aeabi_fdiv+0xc2>
   850c2:	ea40 000c 	orr.w	r0, r0, ip
   850c6:	f093 0f00 	teq	r3, #0
   850ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   850ce:	bf02      	ittt	eq
   850d0:	0049      	lsleq	r1, r1, #1
   850d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   850d6:	3b01      	subeq	r3, #1
   850d8:	d0f9      	beq.n	850ce <__aeabi_fdiv+0xda>
   850da:	ea41 010c 	orr.w	r1, r1, ip
   850de:	e795      	b.n	8500c <__aeabi_fdiv+0x18>
   850e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   850e4:	ea92 0f0c 	teq	r2, ip
   850e8:	d108      	bne.n	850fc <__aeabi_fdiv+0x108>
   850ea:	0242      	lsls	r2, r0, #9
   850ec:	f47f af7d 	bne.w	84fea <__aeabi_fmul+0x15e>
   850f0:	ea93 0f0c 	teq	r3, ip
   850f4:	f47f af70 	bne.w	84fd8 <__aeabi_fmul+0x14c>
   850f8:	4608      	mov	r0, r1
   850fa:	e776      	b.n	84fea <__aeabi_fmul+0x15e>
   850fc:	ea93 0f0c 	teq	r3, ip
   85100:	d104      	bne.n	8510c <__aeabi_fdiv+0x118>
   85102:	024b      	lsls	r3, r1, #9
   85104:	f43f af4c 	beq.w	84fa0 <__aeabi_fmul+0x114>
   85108:	4608      	mov	r0, r1
   8510a:	e76e      	b.n	84fea <__aeabi_fmul+0x15e>
   8510c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   85110:	bf18      	it	ne
   85112:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   85116:	d1ca      	bne.n	850ae <__aeabi_fdiv+0xba>
   85118:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   8511c:	f47f af5c 	bne.w	84fd8 <__aeabi_fmul+0x14c>
   85120:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   85124:	f47f af3c 	bne.w	84fa0 <__aeabi_fmul+0x114>
   85128:	e75f      	b.n	84fea <__aeabi_fmul+0x15e>
   8512a:	bf00      	nop

0008512c <__gesf2>:
   8512c:	f04f 3cff 	mov.w	ip, #4294967295
   85130:	e006      	b.n	85140 <__cmpsf2+0x4>
   85132:	bf00      	nop

00085134 <__lesf2>:
   85134:	f04f 0c01 	mov.w	ip, #1
   85138:	e002      	b.n	85140 <__cmpsf2+0x4>
   8513a:	bf00      	nop

0008513c <__cmpsf2>:
   8513c:	f04f 0c01 	mov.w	ip, #1
   85140:	f84d cd04 	str.w	ip, [sp, #-4]!
   85144:	ea4f 0240 	mov.w	r2, r0, lsl #1
   85148:	ea4f 0341 	mov.w	r3, r1, lsl #1
   8514c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   85150:	bf18      	it	ne
   85152:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   85156:	d011      	beq.n	8517c <__cmpsf2+0x40>
   85158:	b001      	add	sp, #4
   8515a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   8515e:	bf18      	it	ne
   85160:	ea90 0f01 	teqne	r0, r1
   85164:	bf58      	it	pl
   85166:	ebb2 0003 	subspl.w	r0, r2, r3
   8516a:	bf88      	it	hi
   8516c:	17c8      	asrhi	r0, r1, #31
   8516e:	bf38      	it	cc
   85170:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   85174:	bf18      	it	ne
   85176:	f040 0001 	orrne.w	r0, r0, #1
   8517a:	4770      	bx	lr
   8517c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   85180:	d102      	bne.n	85188 <__cmpsf2+0x4c>
   85182:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   85186:	d105      	bne.n	85194 <__cmpsf2+0x58>
   85188:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   8518c:	d1e4      	bne.n	85158 <__cmpsf2+0x1c>
   8518e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   85192:	d0e1      	beq.n	85158 <__cmpsf2+0x1c>
   85194:	f85d 0b04 	ldr.w	r0, [sp], #4
   85198:	4770      	bx	lr
   8519a:	bf00      	nop

0008519c <__aeabi_cfrcmple>:
   8519c:	4684      	mov	ip, r0
   8519e:	4608      	mov	r0, r1
   851a0:	4661      	mov	r1, ip
   851a2:	e7ff      	b.n	851a4 <__aeabi_cfcmpeq>

000851a4 <__aeabi_cfcmpeq>:
   851a4:	b50f      	push	{r0, r1, r2, r3, lr}
   851a6:	f7ff ffc9 	bl	8513c <__cmpsf2>
   851aa:	2800      	cmp	r0, #0
   851ac:	bf48      	it	mi
   851ae:	f110 0f00 	cmnmi.w	r0, #0
   851b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

000851b4 <__aeabi_fcmpeq>:
   851b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   851b8:	f7ff fff4 	bl	851a4 <__aeabi_cfcmpeq>
   851bc:	bf0c      	ite	eq
   851be:	2001      	moveq	r0, #1
   851c0:	2000      	movne	r0, #0
   851c2:	f85d fb08 	ldr.w	pc, [sp], #8
   851c6:	bf00      	nop

000851c8 <__aeabi_fcmplt>:
   851c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   851cc:	f7ff ffea 	bl	851a4 <__aeabi_cfcmpeq>
   851d0:	bf34      	ite	cc
   851d2:	2001      	movcc	r0, #1
   851d4:	2000      	movcs	r0, #0
   851d6:	f85d fb08 	ldr.w	pc, [sp], #8
   851da:	bf00      	nop

000851dc <__aeabi_fcmple>:
   851dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   851e0:	f7ff ffe0 	bl	851a4 <__aeabi_cfcmpeq>
   851e4:	bf94      	ite	ls
   851e6:	2001      	movls	r0, #1
   851e8:	2000      	movhi	r0, #0
   851ea:	f85d fb08 	ldr.w	pc, [sp], #8
   851ee:	bf00      	nop

000851f0 <__aeabi_fcmpge>:
   851f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   851f4:	f7ff ffd2 	bl	8519c <__aeabi_cfrcmple>
   851f8:	bf94      	ite	ls
   851fa:	2001      	movls	r0, #1
   851fc:	2000      	movhi	r0, #0
   851fe:	f85d fb08 	ldr.w	pc, [sp], #8
   85202:	bf00      	nop

00085204 <__aeabi_fcmpgt>:
   85204:	f84d ed08 	str.w	lr, [sp, #-8]!
   85208:	f7ff ffc8 	bl	8519c <__aeabi_cfrcmple>
   8520c:	bf34      	ite	cc
   8520e:	2001      	movcc	r0, #1
   85210:	2000      	movcs	r0, #0
   85212:	f85d fb08 	ldr.w	pc, [sp], #8
   85216:	bf00      	nop

00085218 <__aeabi_f2iz>:
   85218:	ea4f 0240 	mov.w	r2, r0, lsl #1
   8521c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   85220:	d30f      	bcc.n	85242 <__aeabi_f2iz+0x2a>
   85222:	f04f 039e 	mov.w	r3, #158	; 0x9e
   85226:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   8522a:	d90d      	bls.n	85248 <__aeabi_f2iz+0x30>
   8522c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   85230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   85234:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   85238:	fa23 f002 	lsr.w	r0, r3, r2
   8523c:	bf18      	it	ne
   8523e:	4240      	negne	r0, r0
   85240:	4770      	bx	lr
   85242:	f04f 0000 	mov.w	r0, #0
   85246:	4770      	bx	lr
   85248:	f112 0f61 	cmn.w	r2, #97	; 0x61
   8524c:	d101      	bne.n	85252 <__aeabi_f2iz+0x3a>
   8524e:	0242      	lsls	r2, r0, #9
   85250:	d105      	bne.n	8525e <__aeabi_f2iz+0x46>
   85252:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   85256:	bf08      	it	eq
   85258:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8525c:	4770      	bx	lr
   8525e:	f04f 0000 	mov.w	r0, #0
   85262:	4770      	bx	lr

00085264 <__libc_init_array>:
   85264:	b570      	push	{r4, r5, r6, lr}
   85266:	4e0f      	ldr	r6, [pc, #60]	; (852a4 <__libc_init_array+0x40>)
   85268:	4d0f      	ldr	r5, [pc, #60]	; (852a8 <__libc_init_array+0x44>)
   8526a:	1b76      	subs	r6, r6, r5
   8526c:	10b6      	asrs	r6, r6, #2
   8526e:	bf18      	it	ne
   85270:	2400      	movne	r4, #0
   85272:	d005      	beq.n	85280 <__libc_init_array+0x1c>
   85274:	3401      	adds	r4, #1
   85276:	f855 3b04 	ldr.w	r3, [r5], #4
   8527a:	4798      	blx	r3
   8527c:	42a6      	cmp	r6, r4
   8527e:	d1f9      	bne.n	85274 <__libc_init_array+0x10>
   85280:	4e0a      	ldr	r6, [pc, #40]	; (852ac <__libc_init_array+0x48>)
   85282:	4d0b      	ldr	r5, [pc, #44]	; (852b0 <__libc_init_array+0x4c>)
   85284:	f004 fa4c 	bl	89720 <_init>
   85288:	1b76      	subs	r6, r6, r5
   8528a:	10b6      	asrs	r6, r6, #2
   8528c:	bf18      	it	ne
   8528e:	2400      	movne	r4, #0
   85290:	d006      	beq.n	852a0 <__libc_init_array+0x3c>
   85292:	3401      	adds	r4, #1
   85294:	f855 3b04 	ldr.w	r3, [r5], #4
   85298:	4798      	blx	r3
   8529a:	42a6      	cmp	r6, r4
   8529c:	d1f9      	bne.n	85292 <__libc_init_array+0x2e>
   8529e:	bd70      	pop	{r4, r5, r6, pc}
   852a0:	bd70      	pop	{r4, r5, r6, pc}
   852a2:	bf00      	nop
   852a4:	0008972c 	.word	0x0008972c
   852a8:	0008972c 	.word	0x0008972c
   852ac:	00089734 	.word	0x00089734
   852b0:	0008972c 	.word	0x0008972c

000852b4 <memset>:
   852b4:	b470      	push	{r4, r5, r6}
   852b6:	0786      	lsls	r6, r0, #30
   852b8:	d046      	beq.n	85348 <memset+0x94>
   852ba:	1e54      	subs	r4, r2, #1
   852bc:	2a00      	cmp	r2, #0
   852be:	d041      	beq.n	85344 <memset+0x90>
   852c0:	b2ca      	uxtb	r2, r1
   852c2:	4603      	mov	r3, r0
   852c4:	e002      	b.n	852cc <memset+0x18>
   852c6:	f114 34ff 	adds.w	r4, r4, #4294967295
   852ca:	d33b      	bcc.n	85344 <memset+0x90>
   852cc:	f803 2b01 	strb.w	r2, [r3], #1
   852d0:	079d      	lsls	r5, r3, #30
   852d2:	d1f8      	bne.n	852c6 <memset+0x12>
   852d4:	2c03      	cmp	r4, #3
   852d6:	d92e      	bls.n	85336 <memset+0x82>
   852d8:	b2cd      	uxtb	r5, r1
   852da:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   852de:	2c0f      	cmp	r4, #15
   852e0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   852e4:	d919      	bls.n	8531a <memset+0x66>
   852e6:	4626      	mov	r6, r4
   852e8:	f103 0210 	add.w	r2, r3, #16
   852ec:	3e10      	subs	r6, #16
   852ee:	2e0f      	cmp	r6, #15
   852f0:	f842 5c10 	str.w	r5, [r2, #-16]
   852f4:	f842 5c0c 	str.w	r5, [r2, #-12]
   852f8:	f842 5c08 	str.w	r5, [r2, #-8]
   852fc:	f842 5c04 	str.w	r5, [r2, #-4]
   85300:	f102 0210 	add.w	r2, r2, #16
   85304:	d8f2      	bhi.n	852ec <memset+0x38>
   85306:	f1a4 0210 	sub.w	r2, r4, #16
   8530a:	f022 020f 	bic.w	r2, r2, #15
   8530e:	f004 040f 	and.w	r4, r4, #15
   85312:	3210      	adds	r2, #16
   85314:	2c03      	cmp	r4, #3
   85316:	4413      	add	r3, r2
   85318:	d90d      	bls.n	85336 <memset+0x82>
   8531a:	461e      	mov	r6, r3
   8531c:	4622      	mov	r2, r4
   8531e:	3a04      	subs	r2, #4
   85320:	2a03      	cmp	r2, #3
   85322:	f846 5b04 	str.w	r5, [r6], #4
   85326:	d8fa      	bhi.n	8531e <memset+0x6a>
   85328:	1f22      	subs	r2, r4, #4
   8532a:	f022 0203 	bic.w	r2, r2, #3
   8532e:	3204      	adds	r2, #4
   85330:	4413      	add	r3, r2
   85332:	f004 0403 	and.w	r4, r4, #3
   85336:	b12c      	cbz	r4, 85344 <memset+0x90>
   85338:	b2c9      	uxtb	r1, r1
   8533a:	441c      	add	r4, r3
   8533c:	f803 1b01 	strb.w	r1, [r3], #1
   85340:	429c      	cmp	r4, r3
   85342:	d1fb      	bne.n	8533c <memset+0x88>
   85344:	bc70      	pop	{r4, r5, r6}
   85346:	4770      	bx	lr
   85348:	4614      	mov	r4, r2
   8534a:	4603      	mov	r3, r0
   8534c:	e7c2      	b.n	852d4 <memset+0x20>
   8534e:	bf00      	nop

00085350 <sprintf>:
   85350:	b40e      	push	{r1, r2, r3}
   85352:	4601      	mov	r1, r0
   85354:	b5f0      	push	{r4, r5, r6, r7, lr}
   85356:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   8535a:	f44f 7702 	mov.w	r7, #520	; 0x208
   8535e:	f64f 76ff 	movw	r6, #65535	; 0xffff
   85362:	b09c      	sub	sp, #112	; 0x70
   85364:	ac21      	add	r4, sp, #132	; 0x84
   85366:	f854 2b04 	ldr.w	r2, [r4], #4
   8536a:	4b0b      	ldr	r3, [pc, #44]	; (85398 <sprintf+0x48>)
   8536c:	9102      	str	r1, [sp, #8]
   8536e:	9106      	str	r1, [sp, #24]
   85370:	6818      	ldr	r0, [r3, #0]
   85372:	a902      	add	r1, sp, #8
   85374:	4623      	mov	r3, r4
   85376:	9401      	str	r4, [sp, #4]
   85378:	f8ad 7014 	strh.w	r7, [sp, #20]
   8537c:	9504      	str	r5, [sp, #16]
   8537e:	9507      	str	r5, [sp, #28]
   85380:	f8ad 6016 	strh.w	r6, [sp, #22]
   85384:	f000 f838 	bl	853f8 <_svfprintf_r>
   85388:	2200      	movs	r2, #0
   8538a:	9b02      	ldr	r3, [sp, #8]
   8538c:	701a      	strb	r2, [r3, #0]
   8538e:	b01c      	add	sp, #112	; 0x70
   85390:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   85394:	b003      	add	sp, #12
   85396:	4770      	bx	lr
   85398:	200701a4 	.word	0x200701a4

0008539c <strlen>:
   8539c:	f020 0103 	bic.w	r1, r0, #3
   853a0:	f010 0003 	ands.w	r0, r0, #3
   853a4:	f1c0 0000 	rsb	r0, r0, #0
   853a8:	f851 3b04 	ldr.w	r3, [r1], #4
   853ac:	f100 0c04 	add.w	ip, r0, #4
   853b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   853b4:	f06f 0200 	mvn.w	r2, #0
   853b8:	bf1c      	itt	ne
   853ba:	fa22 f20c 	lsrne.w	r2, r2, ip
   853be:	4313      	orrne	r3, r2
   853c0:	f04f 0c01 	mov.w	ip, #1
   853c4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   853c8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   853cc:	eba3 020c 	sub.w	r2, r3, ip
   853d0:	ea22 0203 	bic.w	r2, r2, r3
   853d4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   853d8:	bf04      	itt	eq
   853da:	f851 3b04 	ldreq.w	r3, [r1], #4
   853de:	3004      	addeq	r0, #4
   853e0:	d0f4      	beq.n	853cc <strlen+0x30>
   853e2:	f1c2 0100 	rsb	r1, r2, #0
   853e6:	ea02 0201 	and.w	r2, r2, r1
   853ea:	fab2 f282 	clz	r2, r2
   853ee:	f1c2 021f 	rsb	r2, r2, #31
   853f2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   853f6:	4770      	bx	lr

000853f8 <_svfprintf_r>:
   853f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   853fc:	b0c3      	sub	sp, #268	; 0x10c
   853fe:	460c      	mov	r4, r1
   85400:	910b      	str	r1, [sp, #44]	; 0x2c
   85402:	4692      	mov	sl, r2
   85404:	930f      	str	r3, [sp, #60]	; 0x3c
   85406:	900c      	str	r0, [sp, #48]	; 0x30
   85408:	f002 fa56 	bl	878b8 <_localeconv_r>
   8540c:	6803      	ldr	r3, [r0, #0]
   8540e:	4618      	mov	r0, r3
   85410:	931a      	str	r3, [sp, #104]	; 0x68
   85412:	f7ff ffc3 	bl	8539c <strlen>
   85416:	89a3      	ldrh	r3, [r4, #12]
   85418:	9019      	str	r0, [sp, #100]	; 0x64
   8541a:	0619      	lsls	r1, r3, #24
   8541c:	d503      	bpl.n	85426 <_svfprintf_r+0x2e>
   8541e:	6923      	ldr	r3, [r4, #16]
   85420:	2b00      	cmp	r3, #0
   85422:	f001 8035 	beq.w	86490 <_svfprintf_r+0x1098>
   85426:	2300      	movs	r3, #0
   85428:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   8542c:	46c8      	mov	r8, r9
   8542e:	9315      	str	r3, [sp, #84]	; 0x54
   85430:	9313      	str	r3, [sp, #76]	; 0x4c
   85432:	9314      	str	r3, [sp, #80]	; 0x50
   85434:	9318      	str	r3, [sp, #96]	; 0x60
   85436:	931b      	str	r3, [sp, #108]	; 0x6c
   85438:	9309      	str	r3, [sp, #36]	; 0x24
   8543a:	9316      	str	r3, [sp, #88]	; 0x58
   8543c:	9317      	str	r3, [sp, #92]	; 0x5c
   8543e:	9327      	str	r3, [sp, #156]	; 0x9c
   85440:	9326      	str	r3, [sp, #152]	; 0x98
   85442:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   85446:	f89a 3000 	ldrb.w	r3, [sl]
   8544a:	4654      	mov	r4, sl
   8544c:	b1eb      	cbz	r3, 8548a <_svfprintf_r+0x92>
   8544e:	2b25      	cmp	r3, #37	; 0x25
   85450:	d102      	bne.n	85458 <_svfprintf_r+0x60>
   85452:	e01a      	b.n	8548a <_svfprintf_r+0x92>
   85454:	2b25      	cmp	r3, #37	; 0x25
   85456:	d003      	beq.n	85460 <_svfprintf_r+0x68>
   85458:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8545c:	2b00      	cmp	r3, #0
   8545e:	d1f9      	bne.n	85454 <_svfprintf_r+0x5c>
   85460:	eba4 050a 	sub.w	r5, r4, sl
   85464:	b18d      	cbz	r5, 8548a <_svfprintf_r+0x92>
   85466:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85468:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8546a:	3301      	adds	r3, #1
   8546c:	442a      	add	r2, r5
   8546e:	2b07      	cmp	r3, #7
   85470:	f8c8 a000 	str.w	sl, [r8]
   85474:	f8c8 5004 	str.w	r5, [r8, #4]
   85478:	9227      	str	r2, [sp, #156]	; 0x9c
   8547a:	9326      	str	r3, [sp, #152]	; 0x98
   8547c:	f300 808a 	bgt.w	85594 <_svfprintf_r+0x19c>
   85480:	f108 0808 	add.w	r8, r8, #8
   85484:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85486:	442b      	add	r3, r5
   85488:	9309      	str	r3, [sp, #36]	; 0x24
   8548a:	7823      	ldrb	r3, [r4, #0]
   8548c:	2b00      	cmp	r3, #0
   8548e:	f000 8089 	beq.w	855a4 <_svfprintf_r+0x1ac>
   85492:	2300      	movs	r3, #0
   85494:	f04f 30ff 	mov.w	r0, #4294967295
   85498:	461a      	mov	r2, r3
   8549a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8549e:	4619      	mov	r1, r3
   854a0:	930d      	str	r3, [sp, #52]	; 0x34
   854a2:	469b      	mov	fp, r3
   854a4:	7863      	ldrb	r3, [r4, #1]
   854a6:	f104 0a01 	add.w	sl, r4, #1
   854aa:	900a      	str	r0, [sp, #40]	; 0x28
   854ac:	f10a 0a01 	add.w	sl, sl, #1
   854b0:	f1a3 0020 	sub.w	r0, r3, #32
   854b4:	2858      	cmp	r0, #88	; 0x58
   854b6:	f200 83b7 	bhi.w	85c28 <_svfprintf_r+0x830>
   854ba:	e8df f010 	tbh	[pc, r0, lsl #1]
   854be:	034c      	.short	0x034c
   854c0:	03b503b5 	.word	0x03b503b5
   854c4:	03b50354 	.word	0x03b50354
   854c8:	03b503b5 	.word	0x03b503b5
   854cc:	03b503b5 	.word	0x03b503b5
   854d0:	005903b5 	.word	0x005903b5
   854d4:	03b50359 	.word	0x03b50359
   854d8:	02140066 	.word	0x02140066
   854dc:	022f03b5 	.word	0x022f03b5
   854e0:	03a503a5 	.word	0x03a503a5
   854e4:	03a503a5 	.word	0x03a503a5
   854e8:	03a503a5 	.word	0x03a503a5
   854ec:	03a503a5 	.word	0x03a503a5
   854f0:	03b503a5 	.word	0x03b503a5
   854f4:	03b503b5 	.word	0x03b503b5
   854f8:	03b503b5 	.word	0x03b503b5
   854fc:	03b503b5 	.word	0x03b503b5
   85500:	03b503b5 	.word	0x03b503b5
   85504:	028b03b5 	.word	0x028b03b5
   85508:	03b502d3 	.word	0x03b502d3
   8550c:	03b502d3 	.word	0x03b502d3
   85510:	03b503b5 	.word	0x03b503b5
   85514:	031b03b5 	.word	0x031b03b5
   85518:	03b503b5 	.word	0x03b503b5
   8551c:	03b50320 	.word	0x03b50320
   85520:	03b503b5 	.word	0x03b503b5
   85524:	03b503b5 	.word	0x03b503b5
   85528:	03b50234 	.word	0x03b50234
   8552c:	024b03b5 	.word	0x024b03b5
   85530:	03b503b5 	.word	0x03b503b5
   85534:	03b503b5 	.word	0x03b503b5
   85538:	03b503b5 	.word	0x03b503b5
   8553c:	03b503b5 	.word	0x03b503b5
   85540:	03b503b5 	.word	0x03b503b5
   85544:	039e0276 	.word	0x039e0276
   85548:	02d302d3 	.word	0x02d302d3
   8554c:	036302d3 	.word	0x036302d3
   85550:	03b5039e 	.word	0x03b5039e
   85554:	036803b5 	.word	0x036803b5
   85558:	037503b5 	.word	0x037503b5
   8555c:	038c01dd 	.word	0x038c01dd
   85560:	03b5035e 	.word	0x03b5035e
   85564:	03b501f2 	.word	0x03b501f2
   85568:	03b50087 	.word	0x03b50087
   8556c:	033203b5 	.word	0x033203b5
   85570:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85572:	6823      	ldr	r3, [r4, #0]
   85574:	4618      	mov	r0, r3
   85576:	930d      	str	r3, [sp, #52]	; 0x34
   85578:	4623      	mov	r3, r4
   8557a:	2800      	cmp	r0, #0
   8557c:	f103 0304 	add.w	r3, r3, #4
   85580:	930f      	str	r3, [sp, #60]	; 0x3c
   85582:	da04      	bge.n	8558e <_svfprintf_r+0x196>
   85584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85586:	425b      	negs	r3, r3
   85588:	930d      	str	r3, [sp, #52]	; 0x34
   8558a:	f04b 0b04 	orr.w	fp, fp, #4
   8558e:	f89a 3000 	ldrb.w	r3, [sl]
   85592:	e78b      	b.n	854ac <_svfprintf_r+0xb4>
   85594:	aa25      	add	r2, sp, #148	; 0x94
   85596:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85598:	980c      	ldr	r0, [sp, #48]	; 0x30
   8559a:	f003 f817 	bl	885cc <__ssprint_r>
   8559e:	b940      	cbnz	r0, 855b2 <_svfprintf_r+0x1ba>
   855a0:	46c8      	mov	r8, r9
   855a2:	e76f      	b.n	85484 <_svfprintf_r+0x8c>
   855a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   855a6:	b123      	cbz	r3, 855b2 <_svfprintf_r+0x1ba>
   855a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   855aa:	aa25      	add	r2, sp, #148	; 0x94
   855ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   855ae:	f003 f80d 	bl	885cc <__ssprint_r>
   855b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   855b4:	899b      	ldrh	r3, [r3, #12]
   855b6:	f013 0f40 	tst.w	r3, #64	; 0x40
   855ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   855bc:	bf18      	it	ne
   855be:	f04f 33ff 	movne.w	r3, #4294967295
   855c2:	9309      	str	r3, [sp, #36]	; 0x24
   855c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   855c6:	b043      	add	sp, #268	; 0x10c
   855c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   855cc:	f01b 0f20 	tst.w	fp, #32
   855d0:	9311      	str	r3, [sp, #68]	; 0x44
   855d2:	f040 81af 	bne.w	85934 <_svfprintf_r+0x53c>
   855d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   855d8:	f01b 0f10 	tst.w	fp, #16
   855dc:	4613      	mov	r3, r2
   855de:	f040 859a 	bne.w	86116 <_svfprintf_r+0xd1e>
   855e2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   855e6:	f000 8596 	beq.w	86116 <_svfprintf_r+0xd1e>
   855ea:	2500      	movs	r5, #0
   855ec:	2301      	movs	r3, #1
   855ee:	8814      	ldrh	r4, [r2, #0]
   855f0:	3204      	adds	r2, #4
   855f2:	920f      	str	r2, [sp, #60]	; 0x3c
   855f4:	2200      	movs	r2, #0
   855f6:	4617      	mov	r7, r2
   855f8:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   855fc:	990a      	ldr	r1, [sp, #40]	; 0x28
   855fe:	1c4a      	adds	r2, r1, #1
   85600:	f000 8210 	beq.w	85a24 <_svfprintf_r+0x62c>
   85604:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   85608:	9207      	str	r2, [sp, #28]
   8560a:	ea54 0205 	orrs.w	r2, r4, r5
   8560e:	f040 820f 	bne.w	85a30 <_svfprintf_r+0x638>
   85612:	2900      	cmp	r1, #0
   85614:	f040 8431 	bne.w	85e7a <_svfprintf_r+0xa82>
   85618:	2b00      	cmp	r3, #0
   8561a:	f040 8539 	bne.w	86090 <_svfprintf_r+0xc98>
   8561e:	f01b 0301 	ands.w	r3, fp, #1
   85622:	930e      	str	r3, [sp, #56]	; 0x38
   85624:	f000 8662 	beq.w	862ec <_svfprintf_r+0xef4>
   85628:	2330      	movs	r3, #48	; 0x30
   8562a:	ae42      	add	r6, sp, #264	; 0x108
   8562c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   85630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85634:	4293      	cmp	r3, r2
   85636:	bfb8      	it	lt
   85638:	4613      	movlt	r3, r2
   8563a:	9308      	str	r3, [sp, #32]
   8563c:	2300      	movs	r3, #0
   8563e:	9312      	str	r3, [sp, #72]	; 0x48
   85640:	b117      	cbz	r7, 85648 <_svfprintf_r+0x250>
   85642:	9b08      	ldr	r3, [sp, #32]
   85644:	3301      	adds	r3, #1
   85646:	9308      	str	r3, [sp, #32]
   85648:	9b07      	ldr	r3, [sp, #28]
   8564a:	f013 0302 	ands.w	r3, r3, #2
   8564e:	9310      	str	r3, [sp, #64]	; 0x40
   85650:	d002      	beq.n	85658 <_svfprintf_r+0x260>
   85652:	9b08      	ldr	r3, [sp, #32]
   85654:	3302      	adds	r3, #2
   85656:	9308      	str	r3, [sp, #32]
   85658:	9b07      	ldr	r3, [sp, #28]
   8565a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   8565e:	f040 8310 	bne.w	85c82 <_svfprintf_r+0x88a>
   85662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85664:	9a08      	ldr	r2, [sp, #32]
   85666:	eba3 0b02 	sub.w	fp, r3, r2
   8566a:	f1bb 0f00 	cmp.w	fp, #0
   8566e:	f340 8308 	ble.w	85c82 <_svfprintf_r+0x88a>
   85672:	f1bb 0f10 	cmp.w	fp, #16
   85676:	f340 87b2 	ble.w	865de <_svfprintf_r+0x11e6>
   8567a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8567c:	4643      	mov	r3, r8
   8567e:	4621      	mov	r1, r4
   85680:	46a8      	mov	r8, r5
   85682:	2710      	movs	r7, #16
   85684:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85686:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85688:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8568a:	e006      	b.n	8569a <_svfprintf_r+0x2a2>
   8568c:	f1ab 0b10 	sub.w	fp, fp, #16
   85690:	f1bb 0f10 	cmp.w	fp, #16
   85694:	f103 0308 	add.w	r3, r3, #8
   85698:	dd18      	ble.n	856cc <_svfprintf_r+0x2d4>
   8569a:	3201      	adds	r2, #1
   8569c:	48ab      	ldr	r0, [pc, #684]	; (8594c <_svfprintf_r+0x554>)
   8569e:	3110      	adds	r1, #16
   856a0:	2a07      	cmp	r2, #7
   856a2:	9127      	str	r1, [sp, #156]	; 0x9c
   856a4:	9226      	str	r2, [sp, #152]	; 0x98
   856a6:	e883 0081 	stmia.w	r3, {r0, r7}
   856aa:	ddef      	ble.n	8568c <_svfprintf_r+0x294>
   856ac:	aa25      	add	r2, sp, #148	; 0x94
   856ae:	4629      	mov	r1, r5
   856b0:	4620      	mov	r0, r4
   856b2:	f002 ff8b 	bl	885cc <__ssprint_r>
   856b6:	2800      	cmp	r0, #0
   856b8:	f47f af7b 	bne.w	855b2 <_svfprintf_r+0x1ba>
   856bc:	f1ab 0b10 	sub.w	fp, fp, #16
   856c0:	f1bb 0f10 	cmp.w	fp, #16
   856c4:	464b      	mov	r3, r9
   856c6:	9927      	ldr	r1, [sp, #156]	; 0x9c
   856c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   856ca:	dce6      	bgt.n	8569a <_svfprintf_r+0x2a2>
   856cc:	4645      	mov	r5, r8
   856ce:	460c      	mov	r4, r1
   856d0:	4698      	mov	r8, r3
   856d2:	3201      	adds	r2, #1
   856d4:	4b9d      	ldr	r3, [pc, #628]	; (8594c <_svfprintf_r+0x554>)
   856d6:	445c      	add	r4, fp
   856d8:	2a07      	cmp	r2, #7
   856da:	9427      	str	r4, [sp, #156]	; 0x9c
   856dc:	9226      	str	r2, [sp, #152]	; 0x98
   856de:	e888 0808 	stmia.w	r8, {r3, fp}
   856e2:	f300 82c3 	bgt.w	85c6c <_svfprintf_r+0x874>
   856e6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   856ea:	f108 0808 	add.w	r8, r8, #8
   856ee:	b187      	cbz	r7, 85712 <_svfprintf_r+0x31a>
   856f0:	2101      	movs	r1, #1
   856f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   856f4:	440c      	add	r4, r1
   856f6:	440b      	add	r3, r1
   856f8:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   856fc:	2b07      	cmp	r3, #7
   856fe:	9427      	str	r4, [sp, #156]	; 0x9c
   85700:	9326      	str	r3, [sp, #152]	; 0x98
   85702:	f8c8 1004 	str.w	r1, [r8, #4]
   85706:	f8c8 2000 	str.w	r2, [r8]
   8570a:	f300 83cd 	bgt.w	85ea8 <_svfprintf_r+0xab0>
   8570e:	f108 0808 	add.w	r8, r8, #8
   85712:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85714:	b17b      	cbz	r3, 85736 <_svfprintf_r+0x33e>
   85716:	2102      	movs	r1, #2
   85718:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8571a:	440c      	add	r4, r1
   8571c:	3301      	adds	r3, #1
   8571e:	aa1e      	add	r2, sp, #120	; 0x78
   85720:	2b07      	cmp	r3, #7
   85722:	9427      	str	r4, [sp, #156]	; 0x9c
   85724:	9326      	str	r3, [sp, #152]	; 0x98
   85726:	f8c8 1004 	str.w	r1, [r8, #4]
   8572a:	f8c8 2000 	str.w	r2, [r8]
   8572e:	f300 8411 	bgt.w	85f54 <_svfprintf_r+0xb5c>
   85732:	f108 0808 	add.w	r8, r8, #8
   85736:	2d80      	cmp	r5, #128	; 0x80
   85738:	f000 8304 	beq.w	85d44 <_svfprintf_r+0x94c>
   8573c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8573e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85740:	1a9f      	subs	r7, r3, r2
   85742:	2f00      	cmp	r7, #0
   85744:	dd37      	ble.n	857b6 <_svfprintf_r+0x3be>
   85746:	2f10      	cmp	r7, #16
   85748:	f340 8679 	ble.w	8643e <_svfprintf_r+0x1046>
   8574c:	4d80      	ldr	r5, [pc, #512]	; (85950 <_svfprintf_r+0x558>)
   8574e:	4642      	mov	r2, r8
   85750:	4621      	mov	r1, r4
   85752:	46b0      	mov	r8, r6
   85754:	f04f 0b10 	mov.w	fp, #16
   85758:	462e      	mov	r6, r5
   8575a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8575c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8575e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85760:	e004      	b.n	8576c <_svfprintf_r+0x374>
   85762:	3f10      	subs	r7, #16
   85764:	2f10      	cmp	r7, #16
   85766:	f102 0208 	add.w	r2, r2, #8
   8576a:	dd15      	ble.n	85798 <_svfprintf_r+0x3a0>
   8576c:	3301      	adds	r3, #1
   8576e:	3110      	adds	r1, #16
   85770:	2b07      	cmp	r3, #7
   85772:	9127      	str	r1, [sp, #156]	; 0x9c
   85774:	9326      	str	r3, [sp, #152]	; 0x98
   85776:	e882 0840 	stmia.w	r2, {r6, fp}
   8577a:	ddf2      	ble.n	85762 <_svfprintf_r+0x36a>
   8577c:	aa25      	add	r2, sp, #148	; 0x94
   8577e:	4629      	mov	r1, r5
   85780:	4620      	mov	r0, r4
   85782:	f002 ff23 	bl	885cc <__ssprint_r>
   85786:	2800      	cmp	r0, #0
   85788:	f47f af13 	bne.w	855b2 <_svfprintf_r+0x1ba>
   8578c:	3f10      	subs	r7, #16
   8578e:	2f10      	cmp	r7, #16
   85790:	464a      	mov	r2, r9
   85792:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85794:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85796:	dce9      	bgt.n	8576c <_svfprintf_r+0x374>
   85798:	4635      	mov	r5, r6
   8579a:	460c      	mov	r4, r1
   8579c:	4646      	mov	r6, r8
   8579e:	4690      	mov	r8, r2
   857a0:	3301      	adds	r3, #1
   857a2:	443c      	add	r4, r7
   857a4:	2b07      	cmp	r3, #7
   857a6:	9427      	str	r4, [sp, #156]	; 0x9c
   857a8:	9326      	str	r3, [sp, #152]	; 0x98
   857aa:	e888 00a0 	stmia.w	r8, {r5, r7}
   857ae:	f300 8370 	bgt.w	85e92 <_svfprintf_r+0xa9a>
   857b2:	f108 0808 	add.w	r8, r8, #8
   857b6:	9b07      	ldr	r3, [sp, #28]
   857b8:	05df      	lsls	r7, r3, #23
   857ba:	f100 8264 	bmi.w	85c86 <_svfprintf_r+0x88e>
   857be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   857c0:	990e      	ldr	r1, [sp, #56]	; 0x38
   857c2:	3301      	adds	r3, #1
   857c4:	440c      	add	r4, r1
   857c6:	2b07      	cmp	r3, #7
   857c8:	9427      	str	r4, [sp, #156]	; 0x9c
   857ca:	f8c8 6000 	str.w	r6, [r8]
   857ce:	f8c8 1004 	str.w	r1, [r8, #4]
   857d2:	9326      	str	r3, [sp, #152]	; 0x98
   857d4:	f300 83b3 	bgt.w	85f3e <_svfprintf_r+0xb46>
   857d8:	f108 0808 	add.w	r8, r8, #8
   857dc:	9b07      	ldr	r3, [sp, #28]
   857de:	075b      	lsls	r3, r3, #29
   857e0:	d53b      	bpl.n	8585a <_svfprintf_r+0x462>
   857e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   857e4:	9a08      	ldr	r2, [sp, #32]
   857e6:	1a9d      	subs	r5, r3, r2
   857e8:	2d00      	cmp	r5, #0
   857ea:	dd36      	ble.n	8585a <_svfprintf_r+0x462>
   857ec:	2d10      	cmp	r5, #16
   857ee:	f340 8721 	ble.w	86634 <_svfprintf_r+0x123c>
   857f2:	2610      	movs	r6, #16
   857f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   857f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   857f8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   857fc:	e004      	b.n	85808 <_svfprintf_r+0x410>
   857fe:	3d10      	subs	r5, #16
   85800:	2d10      	cmp	r5, #16
   85802:	f108 0808 	add.w	r8, r8, #8
   85806:	dd16      	ble.n	85836 <_svfprintf_r+0x43e>
   85808:	3301      	adds	r3, #1
   8580a:	4a50      	ldr	r2, [pc, #320]	; (8594c <_svfprintf_r+0x554>)
   8580c:	3410      	adds	r4, #16
   8580e:	2b07      	cmp	r3, #7
   85810:	9427      	str	r4, [sp, #156]	; 0x9c
   85812:	9326      	str	r3, [sp, #152]	; 0x98
   85814:	e888 0044 	stmia.w	r8, {r2, r6}
   85818:	ddf1      	ble.n	857fe <_svfprintf_r+0x406>
   8581a:	aa25      	add	r2, sp, #148	; 0x94
   8581c:	4659      	mov	r1, fp
   8581e:	4638      	mov	r0, r7
   85820:	f002 fed4 	bl	885cc <__ssprint_r>
   85824:	2800      	cmp	r0, #0
   85826:	f47f aec4 	bne.w	855b2 <_svfprintf_r+0x1ba>
   8582a:	3d10      	subs	r5, #16
   8582c:	2d10      	cmp	r5, #16
   8582e:	46c8      	mov	r8, r9
   85830:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85832:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85834:	dce8      	bgt.n	85808 <_svfprintf_r+0x410>
   85836:	3301      	adds	r3, #1
   85838:	4a44      	ldr	r2, [pc, #272]	; (8594c <_svfprintf_r+0x554>)
   8583a:	442c      	add	r4, r5
   8583c:	2b07      	cmp	r3, #7
   8583e:	9427      	str	r4, [sp, #156]	; 0x9c
   85840:	9326      	str	r3, [sp, #152]	; 0x98
   85842:	e888 0024 	stmia.w	r8, {r2, r5}
   85846:	dd08      	ble.n	8585a <_svfprintf_r+0x462>
   85848:	aa25      	add	r2, sp, #148	; 0x94
   8584a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8584c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8584e:	f002 febd 	bl	885cc <__ssprint_r>
   85852:	2800      	cmp	r0, #0
   85854:	f47f aead 	bne.w	855b2 <_svfprintf_r+0x1ba>
   85858:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8585a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8585c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8585e:	9908      	ldr	r1, [sp, #32]
   85860:	428a      	cmp	r2, r1
   85862:	bfac      	ite	ge
   85864:	189b      	addge	r3, r3, r2
   85866:	185b      	addlt	r3, r3, r1
   85868:	9309      	str	r3, [sp, #36]	; 0x24
   8586a:	2c00      	cmp	r4, #0
   8586c:	f040 82fb 	bne.w	85e66 <_svfprintf_r+0xa6e>
   85870:	2300      	movs	r3, #0
   85872:	46c8      	mov	r8, r9
   85874:	9326      	str	r3, [sp, #152]	; 0x98
   85876:	e5e6      	b.n	85446 <_svfprintf_r+0x4e>
   85878:	9311      	str	r3, [sp, #68]	; 0x44
   8587a:	f01b 0320 	ands.w	r3, fp, #32
   8587e:	f040 8145 	bne.w	85b0c <_svfprintf_r+0x714>
   85882:	f01b 0210 	ands.w	r2, fp, #16
   85886:	f040 8466 	bne.w	86156 <_svfprintf_r+0xd5e>
   8588a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   8588e:	f000 8462 	beq.w	86156 <_svfprintf_r+0xd5e>
   85892:	990f      	ldr	r1, [sp, #60]	; 0x3c
   85894:	4613      	mov	r3, r2
   85896:	460a      	mov	r2, r1
   85898:	3204      	adds	r2, #4
   8589a:	880c      	ldrh	r4, [r1, #0]
   8589c:	2500      	movs	r5, #0
   8589e:	920f      	str	r2, [sp, #60]	; 0x3c
   858a0:	e6a8      	b.n	855f4 <_svfprintf_r+0x1fc>
   858a2:	2500      	movs	r5, #0
   858a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   858a6:	9311      	str	r3, [sp, #68]	; 0x44
   858a8:	6816      	ldr	r6, [r2, #0]
   858aa:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   858ae:	1d14      	adds	r4, r2, #4
   858b0:	2e00      	cmp	r6, #0
   858b2:	f000 86cd 	beq.w	86650 <_svfprintf_r+0x1258>
   858b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   858b8:	1c53      	adds	r3, r2, #1
   858ba:	f000 861b 	beq.w	864f4 <_svfprintf_r+0x10fc>
   858be:	4629      	mov	r1, r5
   858c0:	4630      	mov	r0, r6
   858c2:	f002 faad 	bl	87e20 <memchr>
   858c6:	2800      	cmp	r0, #0
   858c8:	f000 870d 	beq.w	866e6 <_svfprintf_r+0x12ee>
   858cc:	1b83      	subs	r3, r0, r6
   858ce:	950a      	str	r5, [sp, #40]	; 0x28
   858d0:	930e      	str	r3, [sp, #56]	; 0x38
   858d2:	940f      	str	r4, [sp, #60]	; 0x3c
   858d4:	f8cd b01c 	str.w	fp, [sp, #28]
   858d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   858dc:	9308      	str	r3, [sp, #32]
   858de:	9512      	str	r5, [sp, #72]	; 0x48
   858e0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   858e4:	e6ac      	b.n	85640 <_svfprintf_r+0x248>
   858e6:	f89a 3000 	ldrb.w	r3, [sl]
   858ea:	f10a 0401 	add.w	r4, sl, #1
   858ee:	2b2a      	cmp	r3, #42	; 0x2a
   858f0:	f000 87c2 	beq.w	86878 <_svfprintf_r+0x1480>
   858f4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   858f8:	2809      	cmp	r0, #9
   858fa:	46a2      	mov	sl, r4
   858fc:	f200 8718 	bhi.w	86730 <_svfprintf_r+0x1338>
   85900:	2300      	movs	r3, #0
   85902:	461c      	mov	r4, r3
   85904:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85908:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8590c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   85910:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85914:	2809      	cmp	r0, #9
   85916:	d9f5      	bls.n	85904 <_svfprintf_r+0x50c>
   85918:	940a      	str	r4, [sp, #40]	; 0x28
   8591a:	e5c9      	b.n	854b0 <_svfprintf_r+0xb8>
   8591c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   85920:	f89a 3000 	ldrb.w	r3, [sl]
   85924:	e5c2      	b.n	854ac <_svfprintf_r+0xb4>
   85926:	f04b 0b10 	orr.w	fp, fp, #16
   8592a:	f01b 0f20 	tst.w	fp, #32
   8592e:	9311      	str	r3, [sp, #68]	; 0x44
   85930:	f43f ae51 	beq.w	855d6 <_svfprintf_r+0x1de>
   85934:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85936:	3407      	adds	r4, #7
   85938:	f024 0307 	bic.w	r3, r4, #7
   8593c:	f103 0208 	add.w	r2, r3, #8
   85940:	e9d3 4500 	ldrd	r4, r5, [r3]
   85944:	920f      	str	r2, [sp, #60]	; 0x3c
   85946:	2301      	movs	r3, #1
   85948:	e654      	b.n	855f4 <_svfprintf_r+0x1fc>
   8594a:	bf00      	nop
   8594c:	000894dc 	.word	0x000894dc
   85950:	000894ec 	.word	0x000894ec
   85954:	9311      	str	r3, [sp, #68]	; 0x44
   85956:	2a00      	cmp	r2, #0
   85958:	f040 87ad 	bne.w	868b6 <_svfprintf_r+0x14be>
   8595c:	4bbe      	ldr	r3, [pc, #760]	; (85c58 <_svfprintf_r+0x860>)
   8595e:	f01b 0f20 	tst.w	fp, #32
   85962:	9318      	str	r3, [sp, #96]	; 0x60
   85964:	f040 80e7 	bne.w	85b36 <_svfprintf_r+0x73e>
   85968:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8596a:	f01b 0f10 	tst.w	fp, #16
   8596e:	4613      	mov	r3, r2
   85970:	f040 83d8 	bne.w	86124 <_svfprintf_r+0xd2c>
   85974:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85978:	f000 83d4 	beq.w	86124 <_svfprintf_r+0xd2c>
   8597c:	2500      	movs	r5, #0
   8597e:	3304      	adds	r3, #4
   85980:	8814      	ldrh	r4, [r2, #0]
   85982:	930f      	str	r3, [sp, #60]	; 0x3c
   85984:	f01b 0f01 	tst.w	fp, #1
   85988:	f000 80e3 	beq.w	85b52 <_svfprintf_r+0x75a>
   8598c:	ea54 0305 	orrs.w	r3, r4, r5
   85990:	f000 80df 	beq.w	85b52 <_svfprintf_r+0x75a>
   85994:	2330      	movs	r3, #48	; 0x30
   85996:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   8599a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   8599e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   859a2:	f04b 0b02 	orr.w	fp, fp, #2
   859a6:	2302      	movs	r3, #2
   859a8:	e624      	b.n	855f4 <_svfprintf_r+0x1fc>
   859aa:	2201      	movs	r2, #1
   859ac:	9311      	str	r3, [sp, #68]	; 0x44
   859ae:	2300      	movs	r3, #0
   859b0:	4611      	mov	r1, r2
   859b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   859b4:	9208      	str	r2, [sp, #32]
   859b6:	6802      	ldr	r2, [r0, #0]
   859b8:	461f      	mov	r7, r3
   859ba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   859be:	930a      	str	r3, [sp, #40]	; 0x28
   859c0:	9312      	str	r3, [sp, #72]	; 0x48
   859c2:	1d03      	adds	r3, r0, #4
   859c4:	f8cd b01c 	str.w	fp, [sp, #28]
   859c8:	910e      	str	r1, [sp, #56]	; 0x38
   859ca:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   859ce:	930f      	str	r3, [sp, #60]	; 0x3c
   859d0:	ae28      	add	r6, sp, #160	; 0xa0
   859d2:	e639      	b.n	85648 <_svfprintf_r+0x250>
   859d4:	9311      	str	r3, [sp, #68]	; 0x44
   859d6:	2a00      	cmp	r2, #0
   859d8:	f040 8784 	bne.w	868e4 <_svfprintf_r+0x14ec>
   859dc:	f04b 0b10 	orr.w	fp, fp, #16
   859e0:	f01b 0f20 	tst.w	fp, #32
   859e4:	f040 8475 	bne.w	862d2 <_svfprintf_r+0xeda>
   859e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   859ea:	f01b 0f10 	tst.w	fp, #16
   859ee:	4613      	mov	r3, r2
   859f0:	f040 839d 	bne.w	8612e <_svfprintf_r+0xd36>
   859f4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   859f8:	f000 8399 	beq.w	8612e <_svfprintf_r+0xd36>
   859fc:	f9b2 4000 	ldrsh.w	r4, [r2]
   85a00:	3304      	adds	r3, #4
   85a02:	17e5      	asrs	r5, r4, #31
   85a04:	930f      	str	r3, [sp, #60]	; 0x3c
   85a06:	4622      	mov	r2, r4
   85a08:	462b      	mov	r3, r5
   85a0a:	2a00      	cmp	r2, #0
   85a0c:	f173 0300 	sbcs.w	r3, r3, #0
   85a10:	f2c0 8398 	blt.w	86144 <_svfprintf_r+0xd4c>
   85a14:	990a      	ldr	r1, [sp, #40]	; 0x28
   85a16:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85a1a:	1c4a      	adds	r2, r1, #1
   85a1c:	f04f 0301 	mov.w	r3, #1
   85a20:	f47f adf0 	bne.w	85604 <_svfprintf_r+0x20c>
   85a24:	ea54 0205 	orrs.w	r2, r4, r5
   85a28:	f000 8229 	beq.w	85e7e <_svfprintf_r+0xa86>
   85a2c:	f8cd b01c 	str.w	fp, [sp, #28]
   85a30:	2b01      	cmp	r3, #1
   85a32:	f000 830e 	beq.w	86052 <_svfprintf_r+0xc5a>
   85a36:	2b02      	cmp	r3, #2
   85a38:	f040 829c 	bne.w	85f74 <_svfprintf_r+0xb7c>
   85a3c:	464e      	mov	r6, r9
   85a3e:	9818      	ldr	r0, [sp, #96]	; 0x60
   85a40:	0923      	lsrs	r3, r4, #4
   85a42:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   85a46:	0929      	lsrs	r1, r5, #4
   85a48:	f004 020f 	and.w	r2, r4, #15
   85a4c:	460d      	mov	r5, r1
   85a4e:	461c      	mov	r4, r3
   85a50:	5c83      	ldrb	r3, [r0, r2]
   85a52:	f806 3d01 	strb.w	r3, [r6, #-1]!
   85a56:	ea54 0305 	orrs.w	r3, r4, r5
   85a5a:	d1f1      	bne.n	85a40 <_svfprintf_r+0x648>
   85a5c:	eba9 0306 	sub.w	r3, r9, r6
   85a60:	930e      	str	r3, [sp, #56]	; 0x38
   85a62:	e5e5      	b.n	85630 <_svfprintf_r+0x238>
   85a64:	9311      	str	r3, [sp, #68]	; 0x44
   85a66:	2a00      	cmp	r2, #0
   85a68:	f040 8738 	bne.w	868dc <_svfprintf_r+0x14e4>
   85a6c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85a6e:	f01b 0f08 	tst.w	fp, #8
   85a72:	f104 0407 	add.w	r4, r4, #7
   85a76:	f000 84cf 	beq.w	86418 <_svfprintf_r+0x1020>
   85a7a:	f024 0307 	bic.w	r3, r4, #7
   85a7e:	f103 0208 	add.w	r2, r3, #8
   85a82:	920f      	str	r2, [sp, #60]	; 0x3c
   85a84:	681a      	ldr	r2, [r3, #0]
   85a86:	685b      	ldr	r3, [r3, #4]
   85a88:	9215      	str	r2, [sp, #84]	; 0x54
   85a8a:	9314      	str	r3, [sp, #80]	; 0x50
   85a8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85a8e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   85a90:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   85a94:	4628      	mov	r0, r5
   85a96:	4621      	mov	r1, r4
   85a98:	f04f 32ff 	mov.w	r2, #4294967295
   85a9c:	4b6f      	ldr	r3, [pc, #444]	; (85c5c <_svfprintf_r+0x864>)
   85a9e:	f003 fa9f 	bl	88fe0 <__aeabi_dcmpun>
   85aa2:	2800      	cmp	r0, #0
   85aa4:	f040 8434 	bne.w	86310 <_svfprintf_r+0xf18>
   85aa8:	4628      	mov	r0, r5
   85aaa:	4621      	mov	r1, r4
   85aac:	f04f 32ff 	mov.w	r2, #4294967295
   85ab0:	4b6a      	ldr	r3, [pc, #424]	; (85c5c <_svfprintf_r+0x864>)
   85ab2:	f003 fa77 	bl	88fa4 <__aeabi_dcmple>
   85ab6:	2800      	cmp	r0, #0
   85ab8:	f040 842a 	bne.w	86310 <_svfprintf_r+0xf18>
   85abc:	a815      	add	r0, sp, #84	; 0x54
   85abe:	c80d      	ldmia	r0, {r0, r2, r3}
   85ac0:	9914      	ldr	r1, [sp, #80]	; 0x50
   85ac2:	f003 fa65 	bl	88f90 <__aeabi_dcmplt>
   85ac6:	2800      	cmp	r0, #0
   85ac8:	f040 85d4 	bne.w	86674 <_svfprintf_r+0x127c>
   85acc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85ad0:	2303      	movs	r3, #3
   85ad2:	461a      	mov	r2, r3
   85ad4:	9308      	str	r3, [sp, #32]
   85ad6:	2300      	movs	r3, #0
   85ad8:	4e61      	ldr	r6, [pc, #388]	; (85c60 <_svfprintf_r+0x868>)
   85ada:	4619      	mov	r1, r3
   85adc:	930a      	str	r3, [sp, #40]	; 0x28
   85ade:	4b61      	ldr	r3, [pc, #388]	; (85c64 <_svfprintf_r+0x86c>)
   85ae0:	920e      	str	r2, [sp, #56]	; 0x38
   85ae2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85ae4:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   85ae8:	9007      	str	r0, [sp, #28]
   85aea:	9112      	str	r1, [sp, #72]	; 0x48
   85aec:	2a47      	cmp	r2, #71	; 0x47
   85aee:	bfd8      	it	le
   85af0:	461e      	movle	r6, r3
   85af2:	e5a5      	b.n	85640 <_svfprintf_r+0x248>
   85af4:	f04b 0b08 	orr.w	fp, fp, #8
   85af8:	f89a 3000 	ldrb.w	r3, [sl]
   85afc:	e4d6      	b.n	854ac <_svfprintf_r+0xb4>
   85afe:	f04b 0b10 	orr.w	fp, fp, #16
   85b02:	9311      	str	r3, [sp, #68]	; 0x44
   85b04:	f01b 0320 	ands.w	r3, fp, #32
   85b08:	f43f aebb 	beq.w	85882 <_svfprintf_r+0x48a>
   85b0c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85b0e:	3407      	adds	r4, #7
   85b10:	f024 0307 	bic.w	r3, r4, #7
   85b14:	f103 0208 	add.w	r2, r3, #8
   85b18:	e9d3 4500 	ldrd	r4, r5, [r3]
   85b1c:	920f      	str	r2, [sp, #60]	; 0x3c
   85b1e:	2300      	movs	r3, #0
   85b20:	e568      	b.n	855f4 <_svfprintf_r+0x1fc>
   85b22:	9311      	str	r3, [sp, #68]	; 0x44
   85b24:	2a00      	cmp	r2, #0
   85b26:	f040 86c2 	bne.w	868ae <_svfprintf_r+0x14b6>
   85b2a:	4b4f      	ldr	r3, [pc, #316]	; (85c68 <_svfprintf_r+0x870>)
   85b2c:	f01b 0f20 	tst.w	fp, #32
   85b30:	9318      	str	r3, [sp, #96]	; 0x60
   85b32:	f43f af19 	beq.w	85968 <_svfprintf_r+0x570>
   85b36:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85b38:	f01b 0f01 	tst.w	fp, #1
   85b3c:	f104 0407 	add.w	r4, r4, #7
   85b40:	f024 0307 	bic.w	r3, r4, #7
   85b44:	f103 0208 	add.w	r2, r3, #8
   85b48:	920f      	str	r2, [sp, #60]	; 0x3c
   85b4a:	e9d3 4500 	ldrd	r4, r5, [r3]
   85b4e:	f47f af1d 	bne.w	8598c <_svfprintf_r+0x594>
   85b52:	2302      	movs	r3, #2
   85b54:	e54e      	b.n	855f4 <_svfprintf_r+0x1fc>
   85b56:	f89a 3000 	ldrb.w	r3, [sl]
   85b5a:	2900      	cmp	r1, #0
   85b5c:	f47f aca6 	bne.w	854ac <_svfprintf_r+0xb4>
   85b60:	2201      	movs	r2, #1
   85b62:	2120      	movs	r1, #32
   85b64:	e4a2      	b.n	854ac <_svfprintf_r+0xb4>
   85b66:	f04b 0b01 	orr.w	fp, fp, #1
   85b6a:	f89a 3000 	ldrb.w	r3, [sl]
   85b6e:	e49d      	b.n	854ac <_svfprintf_r+0xb4>
   85b70:	f89a 3000 	ldrb.w	r3, [sl]
   85b74:	2201      	movs	r2, #1
   85b76:	212b      	movs	r1, #43	; 0x2b
   85b78:	e498      	b.n	854ac <_svfprintf_r+0xb4>
   85b7a:	f04b 0b20 	orr.w	fp, fp, #32
   85b7e:	f89a 3000 	ldrb.w	r3, [sl]
   85b82:	e493      	b.n	854ac <_svfprintf_r+0xb4>
   85b84:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   85b88:	f89a 3000 	ldrb.w	r3, [sl]
   85b8c:	e48e      	b.n	854ac <_svfprintf_r+0xb4>
   85b8e:	f89a 3000 	ldrb.w	r3, [sl]
   85b92:	2b6c      	cmp	r3, #108	; 0x6c
   85b94:	bf03      	ittte	eq
   85b96:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   85b9a:	f04b 0b20 	orreq.w	fp, fp, #32
   85b9e:	f10a 0a01 	addeq.w	sl, sl, #1
   85ba2:	f04b 0b10 	orrne.w	fp, fp, #16
   85ba6:	e481      	b.n	854ac <_svfprintf_r+0xb4>
   85ba8:	2a00      	cmp	r2, #0
   85baa:	f040 867c 	bne.w	868a6 <_svfprintf_r+0x14ae>
   85bae:	f01b 0f20 	tst.w	fp, #32
   85bb2:	f040 8452 	bne.w	8645a <_svfprintf_r+0x1062>
   85bb6:	f01b 0f10 	tst.w	fp, #16
   85bba:	f040 8438 	bne.w	8642e <_svfprintf_r+0x1036>
   85bbe:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85bc2:	f000 8434 	beq.w	8642e <_svfprintf_r+0x1036>
   85bc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85bc8:	6813      	ldr	r3, [r2, #0]
   85bca:	3204      	adds	r2, #4
   85bcc:	920f      	str	r2, [sp, #60]	; 0x3c
   85bce:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   85bd2:	801a      	strh	r2, [r3, #0]
   85bd4:	e437      	b.n	85446 <_svfprintf_r+0x4e>
   85bd6:	2378      	movs	r3, #120	; 0x78
   85bd8:	2230      	movs	r2, #48	; 0x30
   85bda:	980f      	ldr	r0, [sp, #60]	; 0x3c
   85bdc:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   85be0:	9311      	str	r3, [sp, #68]	; 0x44
   85be2:	1d03      	adds	r3, r0, #4
   85be4:	930f      	str	r3, [sp, #60]	; 0x3c
   85be6:	4b20      	ldr	r3, [pc, #128]	; (85c68 <_svfprintf_r+0x870>)
   85be8:	6804      	ldr	r4, [r0, #0]
   85bea:	9318      	str	r3, [sp, #96]	; 0x60
   85bec:	f04b 0b02 	orr.w	fp, fp, #2
   85bf0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   85bf4:	2500      	movs	r5, #0
   85bf6:	2302      	movs	r3, #2
   85bf8:	e4fc      	b.n	855f4 <_svfprintf_r+0x1fc>
   85bfa:	9311      	str	r3, [sp, #68]	; 0x44
   85bfc:	2a00      	cmp	r2, #0
   85bfe:	f43f aeef 	beq.w	859e0 <_svfprintf_r+0x5e8>
   85c02:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85c06:	e6eb      	b.n	859e0 <_svfprintf_r+0x5e8>
   85c08:	2000      	movs	r0, #0
   85c0a:	4604      	mov	r4, r0
   85c0c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85c10:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85c14:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   85c18:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   85c1c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85c20:	2809      	cmp	r0, #9
   85c22:	d9f5      	bls.n	85c10 <_svfprintf_r+0x818>
   85c24:	940d      	str	r4, [sp, #52]	; 0x34
   85c26:	e443      	b.n	854b0 <_svfprintf_r+0xb8>
   85c28:	9311      	str	r3, [sp, #68]	; 0x44
   85c2a:	2a00      	cmp	r2, #0
   85c2c:	f040 864a 	bne.w	868c4 <_svfprintf_r+0x14cc>
   85c30:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85c32:	2a00      	cmp	r2, #0
   85c34:	f43f acb6 	beq.w	855a4 <_svfprintf_r+0x1ac>
   85c38:	2300      	movs	r3, #0
   85c3a:	2101      	movs	r1, #1
   85c3c:	461f      	mov	r7, r3
   85c3e:	9108      	str	r1, [sp, #32]
   85c40:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   85c44:	f8cd b01c 	str.w	fp, [sp, #28]
   85c48:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85c4c:	930a      	str	r3, [sp, #40]	; 0x28
   85c4e:	9312      	str	r3, [sp, #72]	; 0x48
   85c50:	910e      	str	r1, [sp, #56]	; 0x38
   85c52:	ae28      	add	r6, sp, #160	; 0xa0
   85c54:	e4f8      	b.n	85648 <_svfprintf_r+0x250>
   85c56:	bf00      	nop
   85c58:	000894a8 	.word	0x000894a8
   85c5c:	7fefffff 	.word	0x7fefffff
   85c60:	0008949c 	.word	0x0008949c
   85c64:	00089498 	.word	0x00089498
   85c68:	000894bc 	.word	0x000894bc
   85c6c:	aa25      	add	r2, sp, #148	; 0x94
   85c6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85c70:	980c      	ldr	r0, [sp, #48]	; 0x30
   85c72:	f002 fcab 	bl	885cc <__ssprint_r>
   85c76:	2800      	cmp	r0, #0
   85c78:	f47f ac9b 	bne.w	855b2 <_svfprintf_r+0x1ba>
   85c7c:	46c8      	mov	r8, r9
   85c7e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85c82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85c84:	e533      	b.n	856ee <_svfprintf_r+0x2f6>
   85c86:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85c88:	2b65      	cmp	r3, #101	; 0x65
   85c8a:	f340 809a 	ble.w	85dc2 <_svfprintf_r+0x9ca>
   85c8e:	a815      	add	r0, sp, #84	; 0x54
   85c90:	c80d      	ldmia	r0, {r0, r2, r3}
   85c92:	9914      	ldr	r1, [sp, #80]	; 0x50
   85c94:	f003 f972 	bl	88f7c <__aeabi_dcmpeq>
   85c98:	2800      	cmp	r0, #0
   85c9a:	f000 8193 	beq.w	85fc4 <_svfprintf_r+0xbcc>
   85c9e:	2101      	movs	r1, #1
   85ca0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85ca2:	4ab5      	ldr	r2, [pc, #724]	; (85f78 <_svfprintf_r+0xb80>)
   85ca4:	440b      	add	r3, r1
   85ca6:	440c      	add	r4, r1
   85ca8:	2b07      	cmp	r3, #7
   85caa:	9427      	str	r4, [sp, #156]	; 0x9c
   85cac:	9326      	str	r3, [sp, #152]	; 0x98
   85cae:	f8c8 1004 	str.w	r1, [r8, #4]
   85cb2:	f8c8 2000 	str.w	r2, [r8]
   85cb6:	f300 83c6 	bgt.w	86446 <_svfprintf_r+0x104e>
   85cba:	f108 0808 	add.w	r8, r8, #8
   85cbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85cc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85cc2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85cc4:	4293      	cmp	r3, r2
   85cc6:	db03      	blt.n	85cd0 <_svfprintf_r+0x8d8>
   85cc8:	9b07      	ldr	r3, [sp, #28]
   85cca:	07dd      	lsls	r5, r3, #31
   85ccc:	f57f ad86 	bpl.w	857dc <_svfprintf_r+0x3e4>
   85cd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85cd2:	9919      	ldr	r1, [sp, #100]	; 0x64
   85cd4:	3301      	adds	r3, #1
   85cd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   85cd8:	440c      	add	r4, r1
   85cda:	2b07      	cmp	r3, #7
   85cdc:	f8c8 2000 	str.w	r2, [r8]
   85ce0:	f8c8 1004 	str.w	r1, [r8, #4]
   85ce4:	9427      	str	r4, [sp, #156]	; 0x9c
   85ce6:	9326      	str	r3, [sp, #152]	; 0x98
   85ce8:	f300 83c4 	bgt.w	86474 <_svfprintf_r+0x107c>
   85cec:	f108 0808 	add.w	r8, r8, #8
   85cf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85cf2:	1e5e      	subs	r6, r3, #1
   85cf4:	2e00      	cmp	r6, #0
   85cf6:	f77f ad71 	ble.w	857dc <_svfprintf_r+0x3e4>
   85cfa:	2e10      	cmp	r6, #16
   85cfc:	f340 8575 	ble.w	867ea <_svfprintf_r+0x13f2>
   85d00:	4622      	mov	r2, r4
   85d02:	2710      	movs	r7, #16
   85d04:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85d06:	4d9d      	ldr	r5, [pc, #628]	; (85f7c <_svfprintf_r+0xb84>)
   85d08:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   85d0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85d0e:	e005      	b.n	85d1c <_svfprintf_r+0x924>
   85d10:	f108 0808 	add.w	r8, r8, #8
   85d14:	3e10      	subs	r6, #16
   85d16:	2e10      	cmp	r6, #16
   85d18:	f340 8225 	ble.w	86166 <_svfprintf_r+0xd6e>
   85d1c:	3301      	adds	r3, #1
   85d1e:	3210      	adds	r2, #16
   85d20:	2b07      	cmp	r3, #7
   85d22:	9227      	str	r2, [sp, #156]	; 0x9c
   85d24:	9326      	str	r3, [sp, #152]	; 0x98
   85d26:	e888 00a0 	stmia.w	r8, {r5, r7}
   85d2a:	ddf1      	ble.n	85d10 <_svfprintf_r+0x918>
   85d2c:	aa25      	add	r2, sp, #148	; 0x94
   85d2e:	4621      	mov	r1, r4
   85d30:	4658      	mov	r0, fp
   85d32:	f002 fc4b 	bl	885cc <__ssprint_r>
   85d36:	2800      	cmp	r0, #0
   85d38:	f47f ac3b 	bne.w	855b2 <_svfprintf_r+0x1ba>
   85d3c:	46c8      	mov	r8, r9
   85d3e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85d40:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85d42:	e7e7      	b.n	85d14 <_svfprintf_r+0x91c>
   85d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85d46:	9a08      	ldr	r2, [sp, #32]
   85d48:	1a9f      	subs	r7, r3, r2
   85d4a:	2f00      	cmp	r7, #0
   85d4c:	f77f acf6 	ble.w	8573c <_svfprintf_r+0x344>
   85d50:	2f10      	cmp	r7, #16
   85d52:	f340 84a8 	ble.w	866a6 <_svfprintf_r+0x12ae>
   85d56:	4d89      	ldr	r5, [pc, #548]	; (85f7c <_svfprintf_r+0xb84>)
   85d58:	4642      	mov	r2, r8
   85d5a:	4621      	mov	r1, r4
   85d5c:	46b0      	mov	r8, r6
   85d5e:	f04f 0b10 	mov.w	fp, #16
   85d62:	462e      	mov	r6, r5
   85d64:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85d66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85d68:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85d6a:	e004      	b.n	85d76 <_svfprintf_r+0x97e>
   85d6c:	3f10      	subs	r7, #16
   85d6e:	2f10      	cmp	r7, #16
   85d70:	f102 0208 	add.w	r2, r2, #8
   85d74:	dd15      	ble.n	85da2 <_svfprintf_r+0x9aa>
   85d76:	3301      	adds	r3, #1
   85d78:	3110      	adds	r1, #16
   85d7a:	2b07      	cmp	r3, #7
   85d7c:	9127      	str	r1, [sp, #156]	; 0x9c
   85d7e:	9326      	str	r3, [sp, #152]	; 0x98
   85d80:	e882 0840 	stmia.w	r2, {r6, fp}
   85d84:	ddf2      	ble.n	85d6c <_svfprintf_r+0x974>
   85d86:	aa25      	add	r2, sp, #148	; 0x94
   85d88:	4629      	mov	r1, r5
   85d8a:	4620      	mov	r0, r4
   85d8c:	f002 fc1e 	bl	885cc <__ssprint_r>
   85d90:	2800      	cmp	r0, #0
   85d92:	f47f ac0e 	bne.w	855b2 <_svfprintf_r+0x1ba>
   85d96:	3f10      	subs	r7, #16
   85d98:	2f10      	cmp	r7, #16
   85d9a:	464a      	mov	r2, r9
   85d9c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85d9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85da0:	dce9      	bgt.n	85d76 <_svfprintf_r+0x97e>
   85da2:	4635      	mov	r5, r6
   85da4:	460c      	mov	r4, r1
   85da6:	4646      	mov	r6, r8
   85da8:	4690      	mov	r8, r2
   85daa:	3301      	adds	r3, #1
   85dac:	443c      	add	r4, r7
   85dae:	2b07      	cmp	r3, #7
   85db0:	9427      	str	r4, [sp, #156]	; 0x9c
   85db2:	9326      	str	r3, [sp, #152]	; 0x98
   85db4:	e888 00a0 	stmia.w	r8, {r5, r7}
   85db8:	f300 829e 	bgt.w	862f8 <_svfprintf_r+0xf00>
   85dbc:	f108 0808 	add.w	r8, r8, #8
   85dc0:	e4bc      	b.n	8573c <_svfprintf_r+0x344>
   85dc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85dc4:	2b01      	cmp	r3, #1
   85dc6:	f340 824f 	ble.w	86268 <_svfprintf_r+0xe70>
   85dca:	2301      	movs	r3, #1
   85dcc:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85dce:	441c      	add	r4, r3
   85dd0:	441f      	add	r7, r3
   85dd2:	2f07      	cmp	r7, #7
   85dd4:	9427      	str	r4, [sp, #156]	; 0x9c
   85dd6:	f8c8 6000 	str.w	r6, [r8]
   85dda:	9726      	str	r7, [sp, #152]	; 0x98
   85ddc:	f8c8 3004 	str.w	r3, [r8, #4]
   85de0:	f300 825f 	bgt.w	862a2 <_svfprintf_r+0xeaa>
   85de4:	f108 0808 	add.w	r8, r8, #8
   85de8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85dea:	3701      	adds	r7, #1
   85dec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   85dee:	4414      	add	r4, r2
   85df0:	2f07      	cmp	r7, #7
   85df2:	9427      	str	r4, [sp, #156]	; 0x9c
   85df4:	9726      	str	r7, [sp, #152]	; 0x98
   85df6:	f8c8 3000 	str.w	r3, [r8]
   85dfa:	f8c8 2004 	str.w	r2, [r8, #4]
   85dfe:	f300 825c 	bgt.w	862ba <_svfprintf_r+0xec2>
   85e02:	f108 0808 	add.w	r8, r8, #8
   85e06:	a815      	add	r0, sp, #84	; 0x54
   85e08:	c80d      	ldmia	r0, {r0, r2, r3}
   85e0a:	9914      	ldr	r1, [sp, #80]	; 0x50
   85e0c:	f003 f8b6 	bl	88f7c <__aeabi_dcmpeq>
   85e10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85e12:	2800      	cmp	r0, #0
   85e14:	f040 8141 	bne.w	8609a <_svfprintf_r+0xca2>
   85e18:	3b01      	subs	r3, #1
   85e1a:	3701      	adds	r7, #1
   85e1c:	3601      	adds	r6, #1
   85e1e:	441c      	add	r4, r3
   85e20:	2f07      	cmp	r7, #7
   85e22:	f8c8 6000 	str.w	r6, [r8]
   85e26:	9726      	str	r7, [sp, #152]	; 0x98
   85e28:	9427      	str	r4, [sp, #156]	; 0x9c
   85e2a:	f8c8 3004 	str.w	r3, [r8, #4]
   85e2e:	f300 8166 	bgt.w	860fe <_svfprintf_r+0xd06>
   85e32:	f108 0808 	add.w	r8, r8, #8
   85e36:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   85e38:	3701      	adds	r7, #1
   85e3a:	4414      	add	r4, r2
   85e3c:	ab21      	add	r3, sp, #132	; 0x84
   85e3e:	2f07      	cmp	r7, #7
   85e40:	9427      	str	r4, [sp, #156]	; 0x9c
   85e42:	9726      	str	r7, [sp, #152]	; 0x98
   85e44:	f8c8 2004 	str.w	r2, [r8, #4]
   85e48:	f8c8 3000 	str.w	r3, [r8]
   85e4c:	f77f acc4 	ble.w	857d8 <_svfprintf_r+0x3e0>
   85e50:	aa25      	add	r2, sp, #148	; 0x94
   85e52:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85e54:	980c      	ldr	r0, [sp, #48]	; 0x30
   85e56:	f002 fbb9 	bl	885cc <__ssprint_r>
   85e5a:	2800      	cmp	r0, #0
   85e5c:	f47f aba9 	bne.w	855b2 <_svfprintf_r+0x1ba>
   85e60:	46c8      	mov	r8, r9
   85e62:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85e64:	e4ba      	b.n	857dc <_svfprintf_r+0x3e4>
   85e66:	aa25      	add	r2, sp, #148	; 0x94
   85e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85e6a:	980c      	ldr	r0, [sp, #48]	; 0x30
   85e6c:	f002 fbae 	bl	885cc <__ssprint_r>
   85e70:	2800      	cmp	r0, #0
   85e72:	f43f acfd 	beq.w	85870 <_svfprintf_r+0x478>
   85e76:	f7ff bb9c 	b.w	855b2 <_svfprintf_r+0x1ba>
   85e7a:	f8dd b01c 	ldr.w	fp, [sp, #28]
   85e7e:	2b01      	cmp	r3, #1
   85e80:	f000 817e 	beq.w	86180 <_svfprintf_r+0xd88>
   85e84:	2b02      	cmp	r3, #2
   85e86:	d171      	bne.n	85f6c <_svfprintf_r+0xb74>
   85e88:	f8cd b01c 	str.w	fp, [sp, #28]
   85e8c:	2400      	movs	r4, #0
   85e8e:	2500      	movs	r5, #0
   85e90:	e5d4      	b.n	85a3c <_svfprintf_r+0x644>
   85e92:	aa25      	add	r2, sp, #148	; 0x94
   85e94:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85e96:	980c      	ldr	r0, [sp, #48]	; 0x30
   85e98:	f002 fb98 	bl	885cc <__ssprint_r>
   85e9c:	2800      	cmp	r0, #0
   85e9e:	f47f ab88 	bne.w	855b2 <_svfprintf_r+0x1ba>
   85ea2:	46c8      	mov	r8, r9
   85ea4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85ea6:	e486      	b.n	857b6 <_svfprintf_r+0x3be>
   85ea8:	aa25      	add	r2, sp, #148	; 0x94
   85eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85eac:	980c      	ldr	r0, [sp, #48]	; 0x30
   85eae:	f002 fb8d 	bl	885cc <__ssprint_r>
   85eb2:	2800      	cmp	r0, #0
   85eb4:	f47f ab7d 	bne.w	855b2 <_svfprintf_r+0x1ba>
   85eb8:	46c8      	mov	r8, r9
   85eba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85ebc:	e429      	b.n	85712 <_svfprintf_r+0x31a>
   85ebe:	2001      	movs	r0, #1
   85ec0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85ec2:	4a2d      	ldr	r2, [pc, #180]	; (85f78 <_svfprintf_r+0xb80>)
   85ec4:	4403      	add	r3, r0
   85ec6:	4404      	add	r4, r0
   85ec8:	2b07      	cmp	r3, #7
   85eca:	9427      	str	r4, [sp, #156]	; 0x9c
   85ecc:	9326      	str	r3, [sp, #152]	; 0x98
   85ece:	f8c8 0004 	str.w	r0, [r8, #4]
   85ed2:	f8c8 2000 	str.w	r2, [r8]
   85ed6:	f340 82d8 	ble.w	8648a <_svfprintf_r+0x1092>
   85eda:	aa25      	add	r2, sp, #148	; 0x94
   85edc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85ede:	980c      	ldr	r0, [sp, #48]	; 0x30
   85ee0:	f002 fb74 	bl	885cc <__ssprint_r>
   85ee4:	2800      	cmp	r0, #0
   85ee6:	f47f ab64 	bne.w	855b2 <_svfprintf_r+0x1ba>
   85eea:	46c8      	mov	r8, r9
   85eec:	991f      	ldr	r1, [sp, #124]	; 0x7c
   85eee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85ef0:	b929      	cbnz	r1, 85efe <_svfprintf_r+0xb06>
   85ef2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85ef4:	b91b      	cbnz	r3, 85efe <_svfprintf_r+0xb06>
   85ef6:	9b07      	ldr	r3, [sp, #28]
   85ef8:	07d8      	lsls	r0, r3, #31
   85efa:	f57f ac6f 	bpl.w	857dc <_svfprintf_r+0x3e4>
   85efe:	9819      	ldr	r0, [sp, #100]	; 0x64
   85f00:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85f02:	4602      	mov	r2, r0
   85f04:	3301      	adds	r3, #1
   85f06:	4422      	add	r2, r4
   85f08:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   85f0a:	2b07      	cmp	r3, #7
   85f0c:	9227      	str	r2, [sp, #156]	; 0x9c
   85f0e:	f8c8 4000 	str.w	r4, [r8]
   85f12:	f8c8 0004 	str.w	r0, [r8, #4]
   85f16:	9326      	str	r3, [sp, #152]	; 0x98
   85f18:	f300 8431 	bgt.w	8677e <_svfprintf_r+0x1386>
   85f1c:	f108 0808 	add.w	r8, r8, #8
   85f20:	2900      	cmp	r1, #0
   85f22:	f2c0 8409 	blt.w	86738 <_svfprintf_r+0x1340>
   85f26:	9913      	ldr	r1, [sp, #76]	; 0x4c
   85f28:	3301      	adds	r3, #1
   85f2a:	188c      	adds	r4, r1, r2
   85f2c:	2b07      	cmp	r3, #7
   85f2e:	9427      	str	r4, [sp, #156]	; 0x9c
   85f30:	9326      	str	r3, [sp, #152]	; 0x98
   85f32:	f8c8 6000 	str.w	r6, [r8]
   85f36:	f8c8 1004 	str.w	r1, [r8, #4]
   85f3a:	f77f ac4d 	ble.w	857d8 <_svfprintf_r+0x3e0>
   85f3e:	aa25      	add	r2, sp, #148	; 0x94
   85f40:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85f42:	980c      	ldr	r0, [sp, #48]	; 0x30
   85f44:	f002 fb42 	bl	885cc <__ssprint_r>
   85f48:	2800      	cmp	r0, #0
   85f4a:	f47f ab32 	bne.w	855b2 <_svfprintf_r+0x1ba>
   85f4e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85f50:	46c8      	mov	r8, r9
   85f52:	e443      	b.n	857dc <_svfprintf_r+0x3e4>
   85f54:	aa25      	add	r2, sp, #148	; 0x94
   85f56:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85f58:	980c      	ldr	r0, [sp, #48]	; 0x30
   85f5a:	f002 fb37 	bl	885cc <__ssprint_r>
   85f5e:	2800      	cmp	r0, #0
   85f60:	f47f ab27 	bne.w	855b2 <_svfprintf_r+0x1ba>
   85f64:	46c8      	mov	r8, r9
   85f66:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85f68:	f7ff bbe5 	b.w	85736 <_svfprintf_r+0x33e>
   85f6c:	2400      	movs	r4, #0
   85f6e:	2500      	movs	r5, #0
   85f70:	f8cd b01c 	str.w	fp, [sp, #28]
   85f74:	4649      	mov	r1, r9
   85f76:	e004      	b.n	85f82 <_svfprintf_r+0xb8a>
   85f78:	000894d8 	.word	0x000894d8
   85f7c:	000894ec 	.word	0x000894ec
   85f80:	4631      	mov	r1, r6
   85f82:	08e2      	lsrs	r2, r4, #3
   85f84:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   85f88:	08e8      	lsrs	r0, r5, #3
   85f8a:	f004 0307 	and.w	r3, r4, #7
   85f8e:	4605      	mov	r5, r0
   85f90:	4614      	mov	r4, r2
   85f92:	3330      	adds	r3, #48	; 0x30
   85f94:	ea54 0205 	orrs.w	r2, r4, r5
   85f98:	f801 3c01 	strb.w	r3, [r1, #-1]
   85f9c:	f101 36ff 	add.w	r6, r1, #4294967295
   85fa0:	d1ee      	bne.n	85f80 <_svfprintf_r+0xb88>
   85fa2:	9a07      	ldr	r2, [sp, #28]
   85fa4:	07d2      	lsls	r2, r2, #31
   85fa6:	f57f ad59 	bpl.w	85a5c <_svfprintf_r+0x664>
   85faa:	2b30      	cmp	r3, #48	; 0x30
   85fac:	f43f ad56 	beq.w	85a5c <_svfprintf_r+0x664>
   85fb0:	2330      	movs	r3, #48	; 0x30
   85fb2:	3902      	subs	r1, #2
   85fb4:	f806 3c01 	strb.w	r3, [r6, #-1]
   85fb8:	eba9 0301 	sub.w	r3, r9, r1
   85fbc:	930e      	str	r3, [sp, #56]	; 0x38
   85fbe:	460e      	mov	r6, r1
   85fc0:	f7ff bb36 	b.w	85630 <_svfprintf_r+0x238>
   85fc4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   85fc6:	2900      	cmp	r1, #0
   85fc8:	f77f af79 	ble.w	85ebe <_svfprintf_r+0xac6>
   85fcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85fce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85fd0:	4293      	cmp	r3, r2
   85fd2:	bfa8      	it	ge
   85fd4:	4613      	movge	r3, r2
   85fd6:	2b00      	cmp	r3, #0
   85fd8:	461f      	mov	r7, r3
   85fda:	dd0b      	ble.n	85ff4 <_svfprintf_r+0xbfc>
   85fdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85fde:	443c      	add	r4, r7
   85fe0:	3301      	adds	r3, #1
   85fe2:	2b07      	cmp	r3, #7
   85fe4:	9427      	str	r4, [sp, #156]	; 0x9c
   85fe6:	e888 00c0 	stmia.w	r8, {r6, r7}
   85fea:	9326      	str	r3, [sp, #152]	; 0x98
   85fec:	f300 82fb 	bgt.w	865e6 <_svfprintf_r+0x11ee>
   85ff0:	f108 0808 	add.w	r8, r8, #8
   85ff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85ff6:	2f00      	cmp	r7, #0
   85ff8:	bfa8      	it	ge
   85ffa:	1bdb      	subge	r3, r3, r7
   85ffc:	2b00      	cmp	r3, #0
   85ffe:	461f      	mov	r7, r3
   86000:	f340 80d7 	ble.w	861b2 <_svfprintf_r+0xdba>
   86004:	2b10      	cmp	r3, #16
   86006:	f340 8434 	ble.w	86872 <_svfprintf_r+0x147a>
   8600a:	4dba      	ldr	r5, [pc, #744]	; (862f4 <_svfprintf_r+0xefc>)
   8600c:	4642      	mov	r2, r8
   8600e:	4621      	mov	r1, r4
   86010:	46b0      	mov	r8, r6
   86012:	f04f 0b10 	mov.w	fp, #16
   86016:	462e      	mov	r6, r5
   86018:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8601a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8601c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8601e:	e004      	b.n	8602a <_svfprintf_r+0xc32>
   86020:	3208      	adds	r2, #8
   86022:	3f10      	subs	r7, #16
   86024:	2f10      	cmp	r7, #16
   86026:	f340 80b5 	ble.w	86194 <_svfprintf_r+0xd9c>
   8602a:	3301      	adds	r3, #1
   8602c:	3110      	adds	r1, #16
   8602e:	2b07      	cmp	r3, #7
   86030:	9127      	str	r1, [sp, #156]	; 0x9c
   86032:	9326      	str	r3, [sp, #152]	; 0x98
   86034:	e882 0840 	stmia.w	r2, {r6, fp}
   86038:	ddf2      	ble.n	86020 <_svfprintf_r+0xc28>
   8603a:	aa25      	add	r2, sp, #148	; 0x94
   8603c:	4629      	mov	r1, r5
   8603e:	4620      	mov	r0, r4
   86040:	f002 fac4 	bl	885cc <__ssprint_r>
   86044:	2800      	cmp	r0, #0
   86046:	f47f aab4 	bne.w	855b2 <_svfprintf_r+0x1ba>
   8604a:	464a      	mov	r2, r9
   8604c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8604e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86050:	e7e7      	b.n	86022 <_svfprintf_r+0xc2a>
   86052:	2d00      	cmp	r5, #0
   86054:	bf08      	it	eq
   86056:	2c0a      	cmpeq	r4, #10
   86058:	f0c0 8090 	bcc.w	8617c <_svfprintf_r+0xd84>
   8605c:	464e      	mov	r6, r9
   8605e:	4620      	mov	r0, r4
   86060:	4629      	mov	r1, r5
   86062:	220a      	movs	r2, #10
   86064:	2300      	movs	r3, #0
   86066:	f002 fff9 	bl	8905c <__aeabi_uldivmod>
   8606a:	3230      	adds	r2, #48	; 0x30
   8606c:	f806 2d01 	strb.w	r2, [r6, #-1]!
   86070:	4620      	mov	r0, r4
   86072:	4629      	mov	r1, r5
   86074:	2300      	movs	r3, #0
   86076:	220a      	movs	r2, #10
   86078:	f002 fff0 	bl	8905c <__aeabi_uldivmod>
   8607c:	4604      	mov	r4, r0
   8607e:	460d      	mov	r5, r1
   86080:	ea54 0305 	orrs.w	r3, r4, r5
   86084:	d1eb      	bne.n	8605e <_svfprintf_r+0xc66>
   86086:	eba9 0306 	sub.w	r3, r9, r6
   8608a:	930e      	str	r3, [sp, #56]	; 0x38
   8608c:	f7ff bad0 	b.w	85630 <_svfprintf_r+0x238>
   86090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86092:	464e      	mov	r6, r9
   86094:	930e      	str	r3, [sp, #56]	; 0x38
   86096:	f7ff bacb 	b.w	85630 <_svfprintf_r+0x238>
   8609a:	1e5e      	subs	r6, r3, #1
   8609c:	2e00      	cmp	r6, #0
   8609e:	f77f aeca 	ble.w	85e36 <_svfprintf_r+0xa3e>
   860a2:	2e10      	cmp	r6, #16
   860a4:	f340 83e3 	ble.w	8686e <_svfprintf_r+0x1476>
   860a8:	4622      	mov	r2, r4
   860aa:	f04f 0b10 	mov.w	fp, #16
   860ae:	4d91      	ldr	r5, [pc, #580]	; (862f4 <_svfprintf_r+0xefc>)
   860b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   860b2:	e004      	b.n	860be <_svfprintf_r+0xcc6>
   860b4:	3e10      	subs	r6, #16
   860b6:	2e10      	cmp	r6, #16
   860b8:	f108 0808 	add.w	r8, r8, #8
   860bc:	dd15      	ble.n	860ea <_svfprintf_r+0xcf2>
   860be:	3701      	adds	r7, #1
   860c0:	3210      	adds	r2, #16
   860c2:	2f07      	cmp	r7, #7
   860c4:	9227      	str	r2, [sp, #156]	; 0x9c
   860c6:	9726      	str	r7, [sp, #152]	; 0x98
   860c8:	e888 0820 	stmia.w	r8, {r5, fp}
   860cc:	ddf2      	ble.n	860b4 <_svfprintf_r+0xcbc>
   860ce:	aa25      	add	r2, sp, #148	; 0x94
   860d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   860d2:	4620      	mov	r0, r4
   860d4:	f002 fa7a 	bl	885cc <__ssprint_r>
   860d8:	2800      	cmp	r0, #0
   860da:	f47f aa6a 	bne.w	855b2 <_svfprintf_r+0x1ba>
   860de:	3e10      	subs	r6, #16
   860e0:	2e10      	cmp	r6, #16
   860e2:	46c8      	mov	r8, r9
   860e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   860e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   860e8:	dce9      	bgt.n	860be <_svfprintf_r+0xcc6>
   860ea:	4614      	mov	r4, r2
   860ec:	3701      	adds	r7, #1
   860ee:	4434      	add	r4, r6
   860f0:	2f07      	cmp	r7, #7
   860f2:	9427      	str	r4, [sp, #156]	; 0x9c
   860f4:	9726      	str	r7, [sp, #152]	; 0x98
   860f6:	e888 0060 	stmia.w	r8, {r5, r6}
   860fa:	f77f ae9a 	ble.w	85e32 <_svfprintf_r+0xa3a>
   860fe:	aa25      	add	r2, sp, #148	; 0x94
   86100:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86102:	980c      	ldr	r0, [sp, #48]	; 0x30
   86104:	f002 fa62 	bl	885cc <__ssprint_r>
   86108:	2800      	cmp	r0, #0
   8610a:	f47f aa52 	bne.w	855b2 <_svfprintf_r+0x1ba>
   8610e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86110:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86112:	46c8      	mov	r8, r9
   86114:	e68f      	b.n	85e36 <_svfprintf_r+0xa3e>
   86116:	3204      	adds	r2, #4
   86118:	681c      	ldr	r4, [r3, #0]
   8611a:	2500      	movs	r5, #0
   8611c:	2301      	movs	r3, #1
   8611e:	920f      	str	r2, [sp, #60]	; 0x3c
   86120:	f7ff ba68 	b.w	855f4 <_svfprintf_r+0x1fc>
   86124:	681c      	ldr	r4, [r3, #0]
   86126:	3304      	adds	r3, #4
   86128:	930f      	str	r3, [sp, #60]	; 0x3c
   8612a:	2500      	movs	r5, #0
   8612c:	e42a      	b.n	85984 <_svfprintf_r+0x58c>
   8612e:	681c      	ldr	r4, [r3, #0]
   86130:	3304      	adds	r3, #4
   86132:	17e5      	asrs	r5, r4, #31
   86134:	4622      	mov	r2, r4
   86136:	930f      	str	r3, [sp, #60]	; 0x3c
   86138:	462b      	mov	r3, r5
   8613a:	2a00      	cmp	r2, #0
   8613c:	f173 0300 	sbcs.w	r3, r3, #0
   86140:	f6bf ac68 	bge.w	85a14 <_svfprintf_r+0x61c>
   86144:	272d      	movs	r7, #45	; 0x2d
   86146:	4264      	negs	r4, r4
   86148:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8614c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   86150:	2301      	movs	r3, #1
   86152:	f7ff ba53 	b.w	855fc <_svfprintf_r+0x204>
   86156:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86158:	2500      	movs	r5, #0
   8615a:	460a      	mov	r2, r1
   8615c:	3204      	adds	r2, #4
   8615e:	680c      	ldr	r4, [r1, #0]
   86160:	920f      	str	r2, [sp, #60]	; 0x3c
   86162:	f7ff ba47 	b.w	855f4 <_svfprintf_r+0x1fc>
   86166:	4614      	mov	r4, r2
   86168:	3301      	adds	r3, #1
   8616a:	4434      	add	r4, r6
   8616c:	2b07      	cmp	r3, #7
   8616e:	9427      	str	r4, [sp, #156]	; 0x9c
   86170:	9326      	str	r3, [sp, #152]	; 0x98
   86172:	e888 0060 	stmia.w	r8, {r5, r6}
   86176:	f77f ab2f 	ble.w	857d8 <_svfprintf_r+0x3e0>
   8617a:	e6e0      	b.n	85f3e <_svfprintf_r+0xb46>
   8617c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86180:	2301      	movs	r3, #1
   86182:	ae42      	add	r6, sp, #264	; 0x108
   86184:	3430      	adds	r4, #48	; 0x30
   86186:	f8cd b01c 	str.w	fp, [sp, #28]
   8618a:	f806 4d41 	strb.w	r4, [r6, #-65]!
   8618e:	930e      	str	r3, [sp, #56]	; 0x38
   86190:	f7ff ba4e 	b.w	85630 <_svfprintf_r+0x238>
   86194:	4635      	mov	r5, r6
   86196:	460c      	mov	r4, r1
   86198:	4646      	mov	r6, r8
   8619a:	4690      	mov	r8, r2
   8619c:	3301      	adds	r3, #1
   8619e:	443c      	add	r4, r7
   861a0:	2b07      	cmp	r3, #7
   861a2:	9427      	str	r4, [sp, #156]	; 0x9c
   861a4:	9326      	str	r3, [sp, #152]	; 0x98
   861a6:	e888 00a0 	stmia.w	r8, {r5, r7}
   861aa:	f300 8246 	bgt.w	8663a <_svfprintf_r+0x1242>
   861ae:	f108 0808 	add.w	r8, r8, #8
   861b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   861b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   861b6:	429a      	cmp	r2, r3
   861b8:	db45      	blt.n	86246 <_svfprintf_r+0xe4e>
   861ba:	9b07      	ldr	r3, [sp, #28]
   861bc:	07d9      	lsls	r1, r3, #31
   861be:	d442      	bmi.n	86246 <_svfprintf_r+0xe4e>
   861c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   861c2:	9812      	ldr	r0, [sp, #72]	; 0x48
   861c4:	1a9a      	subs	r2, r3, r2
   861c6:	1a1d      	subs	r5, r3, r0
   861c8:	4295      	cmp	r5, r2
   861ca:	bfa8      	it	ge
   861cc:	4615      	movge	r5, r2
   861ce:	2d00      	cmp	r5, #0
   861d0:	dd0e      	ble.n	861f0 <_svfprintf_r+0xdf8>
   861d2:	9926      	ldr	r1, [sp, #152]	; 0x98
   861d4:	4406      	add	r6, r0
   861d6:	3101      	adds	r1, #1
   861d8:	442c      	add	r4, r5
   861da:	2907      	cmp	r1, #7
   861dc:	f8c8 6000 	str.w	r6, [r8]
   861e0:	9427      	str	r4, [sp, #156]	; 0x9c
   861e2:	f8c8 5004 	str.w	r5, [r8, #4]
   861e6:	9126      	str	r1, [sp, #152]	; 0x98
   861e8:	f300 8216 	bgt.w	86618 <_svfprintf_r+0x1220>
   861ec:	f108 0808 	add.w	r8, r8, #8
   861f0:	2d00      	cmp	r5, #0
   861f2:	bfb4      	ite	lt
   861f4:	4616      	movlt	r6, r2
   861f6:	1b56      	subge	r6, r2, r5
   861f8:	2e00      	cmp	r6, #0
   861fa:	f77f aaef 	ble.w	857dc <_svfprintf_r+0x3e4>
   861fe:	2e10      	cmp	r6, #16
   86200:	f340 82f3 	ble.w	867ea <_svfprintf_r+0x13f2>
   86204:	4622      	mov	r2, r4
   86206:	2710      	movs	r7, #16
   86208:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8620a:	4d3a      	ldr	r5, [pc, #232]	; (862f4 <_svfprintf_r+0xefc>)
   8620c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86210:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86212:	e004      	b.n	8621e <_svfprintf_r+0xe26>
   86214:	f108 0808 	add.w	r8, r8, #8
   86218:	3e10      	subs	r6, #16
   8621a:	2e10      	cmp	r6, #16
   8621c:	dda3      	ble.n	86166 <_svfprintf_r+0xd6e>
   8621e:	3301      	adds	r3, #1
   86220:	3210      	adds	r2, #16
   86222:	2b07      	cmp	r3, #7
   86224:	9227      	str	r2, [sp, #156]	; 0x9c
   86226:	9326      	str	r3, [sp, #152]	; 0x98
   86228:	e888 00a0 	stmia.w	r8, {r5, r7}
   8622c:	ddf2      	ble.n	86214 <_svfprintf_r+0xe1c>
   8622e:	aa25      	add	r2, sp, #148	; 0x94
   86230:	4621      	mov	r1, r4
   86232:	4658      	mov	r0, fp
   86234:	f002 f9ca 	bl	885cc <__ssprint_r>
   86238:	2800      	cmp	r0, #0
   8623a:	f47f a9ba 	bne.w	855b2 <_svfprintf_r+0x1ba>
   8623e:	46c8      	mov	r8, r9
   86240:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86242:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86244:	e7e8      	b.n	86218 <_svfprintf_r+0xe20>
   86246:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86248:	9819      	ldr	r0, [sp, #100]	; 0x64
   8624a:	3301      	adds	r3, #1
   8624c:	991a      	ldr	r1, [sp, #104]	; 0x68
   8624e:	4404      	add	r4, r0
   86250:	2b07      	cmp	r3, #7
   86252:	9427      	str	r4, [sp, #156]	; 0x9c
   86254:	f8c8 1000 	str.w	r1, [r8]
   86258:	f8c8 0004 	str.w	r0, [r8, #4]
   8625c:	9326      	str	r3, [sp, #152]	; 0x98
   8625e:	f300 81cf 	bgt.w	86600 <_svfprintf_r+0x1208>
   86262:	f108 0808 	add.w	r8, r8, #8
   86266:	e7ab      	b.n	861c0 <_svfprintf_r+0xdc8>
   86268:	9b07      	ldr	r3, [sp, #28]
   8626a:	07da      	lsls	r2, r3, #31
   8626c:	f53f adad 	bmi.w	85dca <_svfprintf_r+0x9d2>
   86270:	2301      	movs	r3, #1
   86272:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86274:	441c      	add	r4, r3
   86276:	441f      	add	r7, r3
   86278:	2f07      	cmp	r7, #7
   8627a:	9427      	str	r4, [sp, #156]	; 0x9c
   8627c:	f8c8 6000 	str.w	r6, [r8]
   86280:	9726      	str	r7, [sp, #152]	; 0x98
   86282:	f8c8 3004 	str.w	r3, [r8, #4]
   86286:	f77f add4 	ble.w	85e32 <_svfprintf_r+0xa3a>
   8628a:	aa25      	add	r2, sp, #148	; 0x94
   8628c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8628e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86290:	f002 f99c 	bl	885cc <__ssprint_r>
   86294:	2800      	cmp	r0, #0
   86296:	f47f a98c 	bne.w	855b2 <_svfprintf_r+0x1ba>
   8629a:	46c8      	mov	r8, r9
   8629c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8629e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   862a0:	e5c9      	b.n	85e36 <_svfprintf_r+0xa3e>
   862a2:	aa25      	add	r2, sp, #148	; 0x94
   862a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   862a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   862a8:	f002 f990 	bl	885cc <__ssprint_r>
   862ac:	2800      	cmp	r0, #0
   862ae:	f47f a980 	bne.w	855b2 <_svfprintf_r+0x1ba>
   862b2:	46c8      	mov	r8, r9
   862b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   862b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   862b8:	e596      	b.n	85de8 <_svfprintf_r+0x9f0>
   862ba:	aa25      	add	r2, sp, #148	; 0x94
   862bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   862be:	980c      	ldr	r0, [sp, #48]	; 0x30
   862c0:	f002 f984 	bl	885cc <__ssprint_r>
   862c4:	2800      	cmp	r0, #0
   862c6:	f47f a974 	bne.w	855b2 <_svfprintf_r+0x1ba>
   862ca:	46c8      	mov	r8, r9
   862cc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   862ce:	9f26      	ldr	r7, [sp, #152]	; 0x98
   862d0:	e599      	b.n	85e06 <_svfprintf_r+0xa0e>
   862d2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   862d4:	3407      	adds	r4, #7
   862d6:	f024 0407 	bic.w	r4, r4, #7
   862da:	f104 0108 	add.w	r1, r4, #8
   862de:	e9d4 2300 	ldrd	r2, r3, [r4]
   862e2:	910f      	str	r1, [sp, #60]	; 0x3c
   862e4:	4614      	mov	r4, r2
   862e6:	461d      	mov	r5, r3
   862e8:	f7ff bb8f 	b.w	85a0a <_svfprintf_r+0x612>
   862ec:	464e      	mov	r6, r9
   862ee:	f7ff b99f 	b.w	85630 <_svfprintf_r+0x238>
   862f2:	bf00      	nop
   862f4:	000894ec 	.word	0x000894ec
   862f8:	aa25      	add	r2, sp, #148	; 0x94
   862fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   862fc:	980c      	ldr	r0, [sp, #48]	; 0x30
   862fe:	f002 f965 	bl	885cc <__ssprint_r>
   86302:	2800      	cmp	r0, #0
   86304:	f47f a955 	bne.w	855b2 <_svfprintf_r+0x1ba>
   86308:	46c8      	mov	r8, r9
   8630a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8630c:	f7ff ba16 	b.w	8573c <_svfprintf_r+0x344>
   86310:	9c15      	ldr	r4, [sp, #84]	; 0x54
   86312:	4622      	mov	r2, r4
   86314:	4620      	mov	r0, r4
   86316:	9c14      	ldr	r4, [sp, #80]	; 0x50
   86318:	4623      	mov	r3, r4
   8631a:	4621      	mov	r1, r4
   8631c:	f002 fe60 	bl	88fe0 <__aeabi_dcmpun>
   86320:	2800      	cmp	r0, #0
   86322:	f040 8273 	bne.w	8680c <_svfprintf_r+0x1414>
   86326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86328:	3301      	adds	r3, #1
   8632a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8632c:	f023 0320 	bic.w	r3, r3, #32
   86330:	930e      	str	r3, [sp, #56]	; 0x38
   86332:	f000 819c 	beq.w	8666e <_svfprintf_r+0x1276>
   86336:	2b47      	cmp	r3, #71	; 0x47
   86338:	f000 80d6 	beq.w	864e8 <_svfprintf_r+0x10f0>
   8633c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   86340:	9307      	str	r3, [sp, #28]
   86342:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86344:	1e1f      	subs	r7, r3, #0
   86346:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86348:	9308      	str	r3, [sp, #32]
   8634a:	bfb7      	itett	lt
   8634c:	463b      	movlt	r3, r7
   8634e:	2300      	movge	r3, #0
   86350:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   86354:	232d      	movlt	r3, #45	; 0x2d
   86356:	9310      	str	r3, [sp, #64]	; 0x40
   86358:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8635a:	2b66      	cmp	r3, #102	; 0x66
   8635c:	f000 8190 	beq.w	86680 <_svfprintf_r+0x1288>
   86360:	2b46      	cmp	r3, #70	; 0x46
   86362:	f000 80a4 	beq.w	864ae <_svfprintf_r+0x10b6>
   86366:	2002      	movs	r0, #2
   86368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8636a:	a923      	add	r1, sp, #140	; 0x8c
   8636c:	2b45      	cmp	r3, #69	; 0x45
   8636e:	bf0a      	itet	eq
   86370:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   86372:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   86374:	1c5d      	addeq	r5, r3, #1
   86376:	e88d 0021 	stmia.w	sp, {r0, r5}
   8637a:	9104      	str	r1, [sp, #16]
   8637c:	a820      	add	r0, sp, #128	; 0x80
   8637e:	a91f      	add	r1, sp, #124	; 0x7c
   86380:	463b      	mov	r3, r7
   86382:	9003      	str	r0, [sp, #12]
   86384:	9a08      	ldr	r2, [sp, #32]
   86386:	9102      	str	r1, [sp, #8]
   86388:	980c      	ldr	r0, [sp, #48]	; 0x30
   8638a:	f000 fb59 	bl	86a40 <_dtoa_r>
   8638e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86390:	4606      	mov	r6, r0
   86392:	2b67      	cmp	r3, #103	; 0x67
   86394:	f040 81ba 	bne.w	8670c <_svfprintf_r+0x1314>
   86398:	f01b 0f01 	tst.w	fp, #1
   8639c:	f000 8223 	beq.w	867e6 <_svfprintf_r+0x13ee>
   863a0:	1974      	adds	r4, r6, r5
   863a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   863a4:	9808      	ldr	r0, [sp, #32]
   863a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   863a8:	4639      	mov	r1, r7
   863aa:	f002 fde7 	bl	88f7c <__aeabi_dcmpeq>
   863ae:	2800      	cmp	r0, #0
   863b0:	f040 8124 	bne.w	865fc <_svfprintf_r+0x1204>
   863b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   863b6:	42a3      	cmp	r3, r4
   863b8:	d206      	bcs.n	863c8 <_svfprintf_r+0xfd0>
   863ba:	2130      	movs	r1, #48	; 0x30
   863bc:	1c5a      	adds	r2, r3, #1
   863be:	9223      	str	r2, [sp, #140]	; 0x8c
   863c0:	7019      	strb	r1, [r3, #0]
   863c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   863c4:	429c      	cmp	r4, r3
   863c6:	d8f9      	bhi.n	863bc <_svfprintf_r+0xfc4>
   863c8:	1b9b      	subs	r3, r3, r6
   863ca:	9313      	str	r3, [sp, #76]	; 0x4c
   863cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   863ce:	2b47      	cmp	r3, #71	; 0x47
   863d0:	f000 80a2 	beq.w	86518 <_svfprintf_r+0x1120>
   863d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   863d6:	2b65      	cmp	r3, #101	; 0x65
   863d8:	f340 81a7 	ble.w	8672a <_svfprintf_r+0x1332>
   863dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   863de:	2b66      	cmp	r3, #102	; 0x66
   863e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   863e2:	9312      	str	r3, [sp, #72]	; 0x48
   863e4:	f000 8171 	beq.w	866ca <_svfprintf_r+0x12d2>
   863e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   863ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   863ec:	4619      	mov	r1, r3
   863ee:	4291      	cmp	r1, r2
   863f0:	f300 815d 	bgt.w	866ae <_svfprintf_r+0x12b6>
   863f4:	f01b 0f01 	tst.w	fp, #1
   863f8:	f040 81f0 	bne.w	867dc <_svfprintf_r+0x13e4>
   863fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86400:	9308      	str	r3, [sp, #32]
   86402:	2367      	movs	r3, #103	; 0x67
   86404:	920e      	str	r2, [sp, #56]	; 0x38
   86406:	9311      	str	r3, [sp, #68]	; 0x44
   86408:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8640a:	2b00      	cmp	r3, #0
   8640c:	d17d      	bne.n	8650a <_svfprintf_r+0x1112>
   8640e:	930a      	str	r3, [sp, #40]	; 0x28
   86410:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86414:	f7ff b914 	b.w	85640 <_svfprintf_r+0x248>
   86418:	f024 0407 	bic.w	r4, r4, #7
   8641c:	6823      	ldr	r3, [r4, #0]
   8641e:	9315      	str	r3, [sp, #84]	; 0x54
   86420:	6863      	ldr	r3, [r4, #4]
   86422:	9314      	str	r3, [sp, #80]	; 0x50
   86424:	f104 0308 	add.w	r3, r4, #8
   86428:	930f      	str	r3, [sp, #60]	; 0x3c
   8642a:	f7ff bb2f 	b.w	85a8c <_svfprintf_r+0x694>
   8642e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86430:	6813      	ldr	r3, [r2, #0]
   86432:	3204      	adds	r2, #4
   86434:	920f      	str	r2, [sp, #60]	; 0x3c
   86436:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86438:	601a      	str	r2, [r3, #0]
   8643a:	f7ff b804 	b.w	85446 <_svfprintf_r+0x4e>
   8643e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86440:	4daf      	ldr	r5, [pc, #700]	; (86700 <_svfprintf_r+0x1308>)
   86442:	f7ff b9ad 	b.w	857a0 <_svfprintf_r+0x3a8>
   86446:	aa25      	add	r2, sp, #148	; 0x94
   86448:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8644a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8644c:	f002 f8be 	bl	885cc <__ssprint_r>
   86450:	2800      	cmp	r0, #0
   86452:	f47f a8ae 	bne.w	855b2 <_svfprintf_r+0x1ba>
   86456:	46c8      	mov	r8, r9
   86458:	e431      	b.n	85cbe <_svfprintf_r+0x8c6>
   8645a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8645c:	4613      	mov	r3, r2
   8645e:	3304      	adds	r3, #4
   86460:	930f      	str	r3, [sp, #60]	; 0x3c
   86462:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86464:	6811      	ldr	r1, [r2, #0]
   86466:	17dd      	asrs	r5, r3, #31
   86468:	461a      	mov	r2, r3
   8646a:	462b      	mov	r3, r5
   8646c:	e9c1 2300 	strd	r2, r3, [r1]
   86470:	f7fe bfe9 	b.w	85446 <_svfprintf_r+0x4e>
   86474:	aa25      	add	r2, sp, #148	; 0x94
   86476:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86478:	980c      	ldr	r0, [sp, #48]	; 0x30
   8647a:	f002 f8a7 	bl	885cc <__ssprint_r>
   8647e:	2800      	cmp	r0, #0
   86480:	f47f a897 	bne.w	855b2 <_svfprintf_r+0x1ba>
   86484:	46c8      	mov	r8, r9
   86486:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86488:	e432      	b.n	85cf0 <_svfprintf_r+0x8f8>
   8648a:	f108 0808 	add.w	r8, r8, #8
   8648e:	e52f      	b.n	85ef0 <_svfprintf_r+0xaf8>
   86490:	2140      	movs	r1, #64	; 0x40
   86492:	980c      	ldr	r0, [sp, #48]	; 0x30
   86494:	f001 fa22 	bl	878dc <_malloc_r>
   86498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8649a:	6010      	str	r0, [r2, #0]
   8649c:	6110      	str	r0, [r2, #16]
   8649e:	2800      	cmp	r0, #0
   864a0:	f000 8214 	beq.w	868cc <_svfprintf_r+0x14d4>
   864a4:	2340      	movs	r3, #64	; 0x40
   864a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   864a8:	6153      	str	r3, [r2, #20]
   864aa:	f7fe bfbc 	b.w	85426 <_svfprintf_r+0x2e>
   864ae:	2003      	movs	r0, #3
   864b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   864b2:	a923      	add	r1, sp, #140	; 0x8c
   864b4:	e88d 0011 	stmia.w	sp, {r0, r4}
   864b8:	9104      	str	r1, [sp, #16]
   864ba:	a820      	add	r0, sp, #128	; 0x80
   864bc:	a91f      	add	r1, sp, #124	; 0x7c
   864be:	9003      	str	r0, [sp, #12]
   864c0:	9a08      	ldr	r2, [sp, #32]
   864c2:	463b      	mov	r3, r7
   864c4:	9102      	str	r1, [sp, #8]
   864c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   864c8:	f000 faba 	bl	86a40 <_dtoa_r>
   864cc:	4625      	mov	r5, r4
   864ce:	4606      	mov	r6, r0
   864d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   864d2:	1974      	adds	r4, r6, r5
   864d4:	2b46      	cmp	r3, #70	; 0x46
   864d6:	f47f af64 	bne.w	863a2 <_svfprintf_r+0xfaa>
   864da:	7833      	ldrb	r3, [r6, #0]
   864dc:	2b30      	cmp	r3, #48	; 0x30
   864de:	f000 8187 	beq.w	867f0 <_svfprintf_r+0x13f8>
   864e2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   864e4:	442c      	add	r4, r5
   864e6:	e75c      	b.n	863a2 <_svfprintf_r+0xfaa>
   864e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   864ea:	2b00      	cmp	r3, #0
   864ec:	bf08      	it	eq
   864ee:	2301      	moveq	r3, #1
   864f0:	930a      	str	r3, [sp, #40]	; 0x28
   864f2:	e723      	b.n	8633c <_svfprintf_r+0xf44>
   864f4:	4630      	mov	r0, r6
   864f6:	950a      	str	r5, [sp, #40]	; 0x28
   864f8:	f7fe ff50 	bl	8539c <strlen>
   864fc:	940f      	str	r4, [sp, #60]	; 0x3c
   864fe:	900e      	str	r0, [sp, #56]	; 0x38
   86500:	f8cd b01c 	str.w	fp, [sp, #28]
   86504:	4603      	mov	r3, r0
   86506:	f7ff b9e7 	b.w	858d8 <_svfprintf_r+0x4e0>
   8650a:	272d      	movs	r7, #45	; 0x2d
   8650c:	2300      	movs	r3, #0
   8650e:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   86512:	930a      	str	r3, [sp, #40]	; 0x28
   86514:	f7ff b895 	b.w	85642 <_svfprintf_r+0x24a>
   86518:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8651a:	461a      	mov	r2, r3
   8651c:	9312      	str	r3, [sp, #72]	; 0x48
   8651e:	3303      	adds	r3, #3
   86520:	db04      	blt.n	8652c <_svfprintf_r+0x1134>
   86522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86524:	4619      	mov	r1, r3
   86526:	4291      	cmp	r1, r2
   86528:	f6bf af5e 	bge.w	863e8 <_svfprintf_r+0xff0>
   8652c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8652e:	3b02      	subs	r3, #2
   86530:	9311      	str	r3, [sp, #68]	; 0x44
   86532:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86534:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   86538:	3b01      	subs	r3, #1
   8653a:	2b00      	cmp	r3, #0
   8653c:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   86540:	bfb4      	ite	lt
   86542:	222d      	movlt	r2, #45	; 0x2d
   86544:	222b      	movge	r2, #43	; 0x2b
   86546:	931f      	str	r3, [sp, #124]	; 0x7c
   86548:	bfb8      	it	lt
   8654a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   8654c:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   86550:	bfb8      	it	lt
   86552:	f1c3 0301 	rsblt	r3, r3, #1
   86556:	2b09      	cmp	r3, #9
   86558:	f340 811f 	ble.w	8679a <_svfprintf_r+0x13a2>
   8655c:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   86560:	4601      	mov	r1, r0
   86562:	4c68      	ldr	r4, [pc, #416]	; (86704 <_svfprintf_r+0x130c>)
   86564:	e000      	b.n	86568 <_svfprintf_r+0x1170>
   86566:	4611      	mov	r1, r2
   86568:	fb84 5203 	smull	r5, r2, r4, r3
   8656c:	17dd      	asrs	r5, r3, #31
   8656e:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   86572:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   86576:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   8657a:	3230      	adds	r2, #48	; 0x30
   8657c:	2d09      	cmp	r5, #9
   8657e:	f801 2c01 	strb.w	r2, [r1, #-1]
   86582:	462b      	mov	r3, r5
   86584:	f101 32ff 	add.w	r2, r1, #4294967295
   86588:	dced      	bgt.n	86566 <_svfprintf_r+0x116e>
   8658a:	3330      	adds	r3, #48	; 0x30
   8658c:	3902      	subs	r1, #2
   8658e:	b2dc      	uxtb	r4, r3
   86590:	4288      	cmp	r0, r1
   86592:	f802 4c01 	strb.w	r4, [r2, #-1]
   86596:	f240 8192 	bls.w	868be <_svfprintf_r+0x14c6>
   8659a:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   8659e:	4613      	mov	r3, r2
   865a0:	e001      	b.n	865a6 <_svfprintf_r+0x11ae>
   865a2:	f813 4b01 	ldrb.w	r4, [r3], #1
   865a6:	4283      	cmp	r3, r0
   865a8:	f801 4b01 	strb.w	r4, [r1], #1
   865ac:	d1f9      	bne.n	865a2 <_svfprintf_r+0x11aa>
   865ae:	3301      	adds	r3, #1
   865b0:	1a9b      	subs	r3, r3, r2
   865b2:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   865b6:	4413      	add	r3, r2
   865b8:	aa21      	add	r2, sp, #132	; 0x84
   865ba:	1a9b      	subs	r3, r3, r2
   865bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   865be:	931b      	str	r3, [sp, #108]	; 0x6c
   865c0:	2a01      	cmp	r2, #1
   865c2:	4413      	add	r3, r2
   865c4:	930e      	str	r3, [sp, #56]	; 0x38
   865c6:	f340 8148 	ble.w	8685a <_svfprintf_r+0x1462>
   865ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   865cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   865ce:	4413      	add	r3, r2
   865d0:	930e      	str	r3, [sp, #56]	; 0x38
   865d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   865d6:	9308      	str	r3, [sp, #32]
   865d8:	2300      	movs	r3, #0
   865da:	9312      	str	r3, [sp, #72]	; 0x48
   865dc:	e714      	b.n	86408 <_svfprintf_r+0x1010>
   865de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   865e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   865e2:	f7ff b876 	b.w	856d2 <_svfprintf_r+0x2da>
   865e6:	aa25      	add	r2, sp, #148	; 0x94
   865e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   865ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   865ec:	f001 ffee 	bl	885cc <__ssprint_r>
   865f0:	2800      	cmp	r0, #0
   865f2:	f47e afde 	bne.w	855b2 <_svfprintf_r+0x1ba>
   865f6:	46c8      	mov	r8, r9
   865f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   865fa:	e4fb      	b.n	85ff4 <_svfprintf_r+0xbfc>
   865fc:	4623      	mov	r3, r4
   865fe:	e6e3      	b.n	863c8 <_svfprintf_r+0xfd0>
   86600:	aa25      	add	r2, sp, #148	; 0x94
   86602:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86604:	980c      	ldr	r0, [sp, #48]	; 0x30
   86606:	f001 ffe1 	bl	885cc <__ssprint_r>
   8660a:	2800      	cmp	r0, #0
   8660c:	f47e afd1 	bne.w	855b2 <_svfprintf_r+0x1ba>
   86610:	46c8      	mov	r8, r9
   86612:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86614:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86616:	e5d3      	b.n	861c0 <_svfprintf_r+0xdc8>
   86618:	aa25      	add	r2, sp, #148	; 0x94
   8661a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8661c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8661e:	f001 ffd5 	bl	885cc <__ssprint_r>
   86622:	2800      	cmp	r0, #0
   86624:	f47e afc5 	bne.w	855b2 <_svfprintf_r+0x1ba>
   86628:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8662a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8662c:	46c8      	mov	r8, r9
   8662e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86630:	1a9a      	subs	r2, r3, r2
   86632:	e5dd      	b.n	861f0 <_svfprintf_r+0xdf8>
   86634:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86636:	f7ff b8fe 	b.w	85836 <_svfprintf_r+0x43e>
   8663a:	aa25      	add	r2, sp, #148	; 0x94
   8663c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8663e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86640:	f001 ffc4 	bl	885cc <__ssprint_r>
   86644:	2800      	cmp	r0, #0
   86646:	f47e afb4 	bne.w	855b2 <_svfprintf_r+0x1ba>
   8664a:	46c8      	mov	r8, r9
   8664c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8664e:	e5b0      	b.n	861b2 <_svfprintf_r+0xdba>
   86650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86652:	4637      	mov	r7, r6
   86654:	2b06      	cmp	r3, #6
   86656:	bf28      	it	cs
   86658:	2306      	movcs	r3, #6
   8665a:	960a      	str	r6, [sp, #40]	; 0x28
   8665c:	9612      	str	r6, [sp, #72]	; 0x48
   8665e:	9308      	str	r3, [sp, #32]
   86660:	940f      	str	r4, [sp, #60]	; 0x3c
   86662:	f8cd b01c 	str.w	fp, [sp, #28]
   86666:	930e      	str	r3, [sp, #56]	; 0x38
   86668:	4e27      	ldr	r6, [pc, #156]	; (86708 <_svfprintf_r+0x1310>)
   8666a:	f7fe bfe9 	b.w	85640 <_svfprintf_r+0x248>
   8666e:	2306      	movs	r3, #6
   86670:	930a      	str	r3, [sp, #40]	; 0x28
   86672:	e663      	b.n	8633c <_svfprintf_r+0xf44>
   86674:	232d      	movs	r3, #45	; 0x2d
   86676:	461f      	mov	r7, r3
   86678:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8667c:	f7ff ba28 	b.w	85ad0 <_svfprintf_r+0x6d8>
   86680:	2003      	movs	r0, #3
   86682:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86684:	a923      	add	r1, sp, #140	; 0x8c
   86686:	e88d 0011 	stmia.w	sp, {r0, r4}
   8668a:	9104      	str	r1, [sp, #16]
   8668c:	a820      	add	r0, sp, #128	; 0x80
   8668e:	a91f      	add	r1, sp, #124	; 0x7c
   86690:	9003      	str	r0, [sp, #12]
   86692:	9a08      	ldr	r2, [sp, #32]
   86694:	463b      	mov	r3, r7
   86696:	9102      	str	r1, [sp, #8]
   86698:	980c      	ldr	r0, [sp, #48]	; 0x30
   8669a:	f000 f9d1 	bl	86a40 <_dtoa_r>
   8669e:	4625      	mov	r5, r4
   866a0:	4606      	mov	r6, r0
   866a2:	1904      	adds	r4, r0, r4
   866a4:	e719      	b.n	864da <_svfprintf_r+0x10e2>
   866a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   866a8:	4d15      	ldr	r5, [pc, #84]	; (86700 <_svfprintf_r+0x1308>)
   866aa:	f7ff bb7e 	b.w	85daa <_svfprintf_r+0x9b2>
   866ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
   866b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   866b2:	4413      	add	r3, r2
   866b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   866b6:	930e      	str	r3, [sp, #56]	; 0x38
   866b8:	2a00      	cmp	r2, #0
   866ba:	f340 80c7 	ble.w	8684c <_svfprintf_r+0x1454>
   866be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   866c2:	9308      	str	r3, [sp, #32]
   866c4:	2367      	movs	r3, #103	; 0x67
   866c6:	9311      	str	r3, [sp, #68]	; 0x44
   866c8:	e69e      	b.n	86408 <_svfprintf_r+0x1010>
   866ca:	2b00      	cmp	r3, #0
   866cc:	f340 80e1 	ble.w	86892 <_svfprintf_r+0x149a>
   866d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   866d2:	2a00      	cmp	r2, #0
   866d4:	f040 80b0 	bne.w	86838 <_svfprintf_r+0x1440>
   866d8:	f01b 0f01 	tst.w	fp, #1
   866dc:	f040 80ac 	bne.w	86838 <_svfprintf_r+0x1440>
   866e0:	9308      	str	r3, [sp, #32]
   866e2:	930e      	str	r3, [sp, #56]	; 0x38
   866e4:	e690      	b.n	86408 <_svfprintf_r+0x1010>
   866e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   866e8:	940f      	str	r4, [sp, #60]	; 0x3c
   866ea:	9308      	str	r3, [sp, #32]
   866ec:	930e      	str	r3, [sp, #56]	; 0x38
   866ee:	900a      	str	r0, [sp, #40]	; 0x28
   866f0:	f8cd b01c 	str.w	fp, [sp, #28]
   866f4:	9012      	str	r0, [sp, #72]	; 0x48
   866f6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   866fa:	f7fe bfa1 	b.w	85640 <_svfprintf_r+0x248>
   866fe:	bf00      	nop
   86700:	000894ec 	.word	0x000894ec
   86704:	66666667 	.word	0x66666667
   86708:	000894d0 	.word	0x000894d0
   8670c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8670e:	2b47      	cmp	r3, #71	; 0x47
   86710:	f47f ae46 	bne.w	863a0 <_svfprintf_r+0xfa8>
   86714:	f01b 0f01 	tst.w	fp, #1
   86718:	f47f aeda 	bne.w	864d0 <_svfprintf_r+0x10d8>
   8671c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8671e:	1b9b      	subs	r3, r3, r6
   86720:	9313      	str	r3, [sp, #76]	; 0x4c
   86722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86724:	2b47      	cmp	r3, #71	; 0x47
   86726:	f43f aef7 	beq.w	86518 <_svfprintf_r+0x1120>
   8672a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8672c:	9312      	str	r3, [sp, #72]	; 0x48
   8672e:	e700      	b.n	86532 <_svfprintf_r+0x113a>
   86730:	2000      	movs	r0, #0
   86732:	900a      	str	r0, [sp, #40]	; 0x28
   86734:	f7fe bebc 	b.w	854b0 <_svfprintf_r+0xb8>
   86738:	424f      	negs	r7, r1
   8673a:	3110      	adds	r1, #16
   8673c:	da35      	bge.n	867aa <_svfprintf_r+0x13b2>
   8673e:	2410      	movs	r4, #16
   86740:	4d6a      	ldr	r5, [pc, #424]	; (868ec <_svfprintf_r+0x14f4>)
   86742:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86746:	e004      	b.n	86752 <_svfprintf_r+0x135a>
   86748:	f108 0808 	add.w	r8, r8, #8
   8674c:	3f10      	subs	r7, #16
   8674e:	2f10      	cmp	r7, #16
   86750:	dd2c      	ble.n	867ac <_svfprintf_r+0x13b4>
   86752:	3301      	adds	r3, #1
   86754:	3210      	adds	r2, #16
   86756:	2b07      	cmp	r3, #7
   86758:	9227      	str	r2, [sp, #156]	; 0x9c
   8675a:	9326      	str	r3, [sp, #152]	; 0x98
   8675c:	f8c8 5000 	str.w	r5, [r8]
   86760:	f8c8 4004 	str.w	r4, [r8, #4]
   86764:	ddf0      	ble.n	86748 <_svfprintf_r+0x1350>
   86766:	aa25      	add	r2, sp, #148	; 0x94
   86768:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8676a:	4658      	mov	r0, fp
   8676c:	f001 ff2e 	bl	885cc <__ssprint_r>
   86770:	2800      	cmp	r0, #0
   86772:	f47e af1e 	bne.w	855b2 <_svfprintf_r+0x1ba>
   86776:	46c8      	mov	r8, r9
   86778:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8677a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8677c:	e7e6      	b.n	8674c <_svfprintf_r+0x1354>
   8677e:	aa25      	add	r2, sp, #148	; 0x94
   86780:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86782:	980c      	ldr	r0, [sp, #48]	; 0x30
   86784:	f001 ff22 	bl	885cc <__ssprint_r>
   86788:	2800      	cmp	r0, #0
   8678a:	f47e af12 	bne.w	855b2 <_svfprintf_r+0x1ba>
   8678e:	46c8      	mov	r8, r9
   86790:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86792:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86794:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86796:	f7ff bbc3 	b.w	85f20 <_svfprintf_r+0xb28>
   8679a:	2230      	movs	r2, #48	; 0x30
   8679c:	4413      	add	r3, r2
   8679e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   867a2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   867a6:	ab22      	add	r3, sp, #136	; 0x88
   867a8:	e706      	b.n	865b8 <_svfprintf_r+0x11c0>
   867aa:	4d50      	ldr	r5, [pc, #320]	; (868ec <_svfprintf_r+0x14f4>)
   867ac:	3301      	adds	r3, #1
   867ae:	443a      	add	r2, r7
   867b0:	2b07      	cmp	r3, #7
   867b2:	e888 00a0 	stmia.w	r8, {r5, r7}
   867b6:	9227      	str	r2, [sp, #156]	; 0x9c
   867b8:	9326      	str	r3, [sp, #152]	; 0x98
   867ba:	f108 0808 	add.w	r8, r8, #8
   867be:	f77f abb2 	ble.w	85f26 <_svfprintf_r+0xb2e>
   867c2:	aa25      	add	r2, sp, #148	; 0x94
   867c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   867c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   867c8:	f001 ff00 	bl	885cc <__ssprint_r>
   867cc:	2800      	cmp	r0, #0
   867ce:	f47e aef0 	bne.w	855b2 <_svfprintf_r+0x1ba>
   867d2:	46c8      	mov	r8, r9
   867d4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   867d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   867d8:	f7ff bba5 	b.w	85f26 <_svfprintf_r+0xb2e>
   867dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   867de:	9a19      	ldr	r2, [sp, #100]	; 0x64
   867e0:	4413      	add	r3, r2
   867e2:	930e      	str	r3, [sp, #56]	; 0x38
   867e4:	e76b      	b.n	866be <_svfprintf_r+0x12c6>
   867e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   867e8:	e5ee      	b.n	863c8 <_svfprintf_r+0xfd0>
   867ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
   867ec:	4d3f      	ldr	r5, [pc, #252]	; (868ec <_svfprintf_r+0x14f4>)
   867ee:	e4bb      	b.n	86168 <_svfprintf_r+0xd70>
   867f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   867f2:	9808      	ldr	r0, [sp, #32]
   867f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   867f6:	4639      	mov	r1, r7
   867f8:	f002 fbc0 	bl	88f7c <__aeabi_dcmpeq>
   867fc:	2800      	cmp	r0, #0
   867fe:	f47f ae70 	bne.w	864e2 <_svfprintf_r+0x10ea>
   86802:	f1c5 0501 	rsb	r5, r5, #1
   86806:	951f      	str	r5, [sp, #124]	; 0x7c
   86808:	442c      	add	r4, r5
   8680a:	e5ca      	b.n	863a2 <_svfprintf_r+0xfaa>
   8680c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8680e:	4e38      	ldr	r6, [pc, #224]	; (868f0 <_svfprintf_r+0x14f8>)
   86810:	2b00      	cmp	r3, #0
   86812:	bfbe      	ittt	lt
   86814:	232d      	movlt	r3, #45	; 0x2d
   86816:	461f      	movlt	r7, r3
   86818:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   8681c:	f04f 0303 	mov.w	r3, #3
   86820:	461a      	mov	r2, r3
   86822:	9308      	str	r3, [sp, #32]
   86824:	f04f 0300 	mov.w	r3, #0
   86828:	bfa8      	it	ge
   8682a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   8682e:	4619      	mov	r1, r3
   86830:	930a      	str	r3, [sp, #40]	; 0x28
   86832:	4b30      	ldr	r3, [pc, #192]	; (868f4 <_svfprintf_r+0x14fc>)
   86834:	f7ff b954 	b.w	85ae0 <_svfprintf_r+0x6e8>
   86838:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8683a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8683c:	4413      	add	r3, r2
   8683e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86840:	441a      	add	r2, r3
   86842:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86846:	920e      	str	r2, [sp, #56]	; 0x38
   86848:	9308      	str	r3, [sp, #32]
   8684a:	e5dd      	b.n	86408 <_svfprintf_r+0x1010>
   8684c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8684e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86850:	f1c3 0301 	rsb	r3, r3, #1
   86854:	441a      	add	r2, r3
   86856:	4613      	mov	r3, r2
   86858:	e7c3      	b.n	867e2 <_svfprintf_r+0x13ea>
   8685a:	f01b 0301 	ands.w	r3, fp, #1
   8685e:	9312      	str	r3, [sp, #72]	; 0x48
   86860:	f47f aeb3 	bne.w	865ca <_svfprintf_r+0x11d2>
   86864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86866:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8686a:	9308      	str	r3, [sp, #32]
   8686c:	e5cc      	b.n	86408 <_svfprintf_r+0x1010>
   8686e:	4d1f      	ldr	r5, [pc, #124]	; (868ec <_svfprintf_r+0x14f4>)
   86870:	e43c      	b.n	860ec <_svfprintf_r+0xcf4>
   86872:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86874:	4d1d      	ldr	r5, [pc, #116]	; (868ec <_svfprintf_r+0x14f4>)
   86876:	e491      	b.n	8619c <_svfprintf_r+0xda4>
   86878:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8687a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   8687e:	6828      	ldr	r0, [r5, #0]
   86880:	46a2      	mov	sl, r4
   86882:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   86886:	900a      	str	r0, [sp, #40]	; 0x28
   86888:	4628      	mov	r0, r5
   8688a:	3004      	adds	r0, #4
   8688c:	900f      	str	r0, [sp, #60]	; 0x3c
   8688e:	f7fe be0d 	b.w	854ac <_svfprintf_r+0xb4>
   86892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86894:	b913      	cbnz	r3, 8689c <_svfprintf_r+0x14a4>
   86896:	f01b 0f01 	tst.w	fp, #1
   8689a:	d002      	beq.n	868a2 <_svfprintf_r+0x14aa>
   8689c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8689e:	3301      	adds	r3, #1
   868a0:	e7cd      	b.n	8683e <_svfprintf_r+0x1446>
   868a2:	2301      	movs	r3, #1
   868a4:	e71c      	b.n	866e0 <_svfprintf_r+0x12e8>
   868a6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   868aa:	f7ff b980 	b.w	85bae <_svfprintf_r+0x7b6>
   868ae:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   868b2:	f7ff b93a 	b.w	85b2a <_svfprintf_r+0x732>
   868b6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   868ba:	f7ff b84f 	b.w	8595c <_svfprintf_r+0x564>
   868be:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   868c2:	e679      	b.n	865b8 <_svfprintf_r+0x11c0>
   868c4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   868c8:	f7ff b9b2 	b.w	85c30 <_svfprintf_r+0x838>
   868cc:	f04f 32ff 	mov.w	r2, #4294967295
   868d0:	230c      	movs	r3, #12
   868d2:	9209      	str	r2, [sp, #36]	; 0x24
   868d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   868d6:	6013      	str	r3, [r2, #0]
   868d8:	f7fe be74 	b.w	855c4 <_svfprintf_r+0x1cc>
   868dc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   868e0:	f7ff b8c4 	b.w	85a6c <_svfprintf_r+0x674>
   868e4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   868e8:	f7ff b878 	b.w	859dc <_svfprintf_r+0x5e4>
   868ec:	000894ec 	.word	0x000894ec
   868f0:	000894a4 	.word	0x000894a4
   868f4:	000894a0 	.word	0x000894a0

000868f8 <register_fini>:
   868f8:	4b02      	ldr	r3, [pc, #8]	; (86904 <register_fini+0xc>)
   868fa:	b113      	cbz	r3, 86902 <register_fini+0xa>
   868fc:	4802      	ldr	r0, [pc, #8]	; (86908 <register_fini+0x10>)
   868fe:	f000 b805 	b.w	8690c <atexit>
   86902:	4770      	bx	lr
   86904:	00000000 	.word	0x00000000
   86908:	00087885 	.word	0x00087885

0008690c <atexit>:
   8690c:	2300      	movs	r3, #0
   8690e:	4601      	mov	r1, r0
   86910:	461a      	mov	r2, r3
   86912:	4618      	mov	r0, r3
   86914:	f001 bed8 	b.w	886c8 <__register_exitproc>

00086918 <quorem>:
   86918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8691c:	6903      	ldr	r3, [r0, #16]
   8691e:	690f      	ldr	r7, [r1, #16]
   86920:	b083      	sub	sp, #12
   86922:	429f      	cmp	r7, r3
   86924:	f300 8088 	bgt.w	86a38 <quorem+0x120>
   86928:	3f01      	subs	r7, #1
   8692a:	f101 0614 	add.w	r6, r1, #20
   8692e:	f100 0a14 	add.w	sl, r0, #20
   86932:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   86936:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8693a:	3301      	adds	r3, #1
   8693c:	fbb2 f8f3 	udiv	r8, r2, r3
   86940:	00bb      	lsls	r3, r7, #2
   86942:	9300      	str	r3, [sp, #0]
   86944:	eb06 0903 	add.w	r9, r6, r3
   86948:	4453      	add	r3, sl
   8694a:	9301      	str	r3, [sp, #4]
   8694c:	f1b8 0f00 	cmp.w	r8, #0
   86950:	d03b      	beq.n	869ca <quorem+0xb2>
   86952:	2300      	movs	r3, #0
   86954:	46b4      	mov	ip, r6
   86956:	461c      	mov	r4, r3
   86958:	46d6      	mov	lr, sl
   8695a:	f85c 2b04 	ldr.w	r2, [ip], #4
   8695e:	f8de 5000 	ldr.w	r5, [lr]
   86962:	fa1f fb82 	uxth.w	fp, r2
   86966:	fb08 330b 	mla	r3, r8, fp, r3
   8696a:	0c12      	lsrs	r2, r2, #16
   8696c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   86970:	fb08 bb02 	mla	fp, r8, r2, fp
   86974:	b29a      	uxth	r2, r3
   86976:	1aa2      	subs	r2, r4, r2
   86978:	b2ab      	uxth	r3, r5
   8697a:	fa1f f48b 	uxth.w	r4, fp
   8697e:	441a      	add	r2, r3
   86980:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   86984:	eb04 4422 	add.w	r4, r4, r2, asr #16
   86988:	b292      	uxth	r2, r2
   8698a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   8698e:	45e1      	cmp	r9, ip
   86990:	f84e 2b04 	str.w	r2, [lr], #4
   86994:	ea4f 4424 	mov.w	r4, r4, asr #16
   86998:	ea4f 431b 	mov.w	r3, fp, lsr #16
   8699c:	d2dd      	bcs.n	8695a <quorem+0x42>
   8699e:	9b00      	ldr	r3, [sp, #0]
   869a0:	f85a 3003 	ldr.w	r3, [sl, r3]
   869a4:	b98b      	cbnz	r3, 869ca <quorem+0xb2>
   869a6:	9c01      	ldr	r4, [sp, #4]
   869a8:	1f23      	subs	r3, r4, #4
   869aa:	459a      	cmp	sl, r3
   869ac:	d20c      	bcs.n	869c8 <quorem+0xb0>
   869ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   869b2:	b94b      	cbnz	r3, 869c8 <quorem+0xb0>
   869b4:	f1a4 0308 	sub.w	r3, r4, #8
   869b8:	e002      	b.n	869c0 <quorem+0xa8>
   869ba:	681a      	ldr	r2, [r3, #0]
   869bc:	3b04      	subs	r3, #4
   869be:	b91a      	cbnz	r2, 869c8 <quorem+0xb0>
   869c0:	459a      	cmp	sl, r3
   869c2:	f107 37ff 	add.w	r7, r7, #4294967295
   869c6:	d3f8      	bcc.n	869ba <quorem+0xa2>
   869c8:	6107      	str	r7, [r0, #16]
   869ca:	4604      	mov	r4, r0
   869cc:	f001 fcee 	bl	883ac <__mcmp>
   869d0:	2800      	cmp	r0, #0
   869d2:	db2d      	blt.n	86a30 <quorem+0x118>
   869d4:	4655      	mov	r5, sl
   869d6:	2300      	movs	r3, #0
   869d8:	f108 0801 	add.w	r8, r8, #1
   869dc:	f856 1b04 	ldr.w	r1, [r6], #4
   869e0:	6828      	ldr	r0, [r5, #0]
   869e2:	b28a      	uxth	r2, r1
   869e4:	1a9a      	subs	r2, r3, r2
   869e6:	0c0b      	lsrs	r3, r1, #16
   869e8:	b281      	uxth	r1, r0
   869ea:	440a      	add	r2, r1
   869ec:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   869f0:	eb03 4322 	add.w	r3, r3, r2, asr #16
   869f4:	b292      	uxth	r2, r2
   869f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   869fa:	45b1      	cmp	r9, r6
   869fc:	f845 2b04 	str.w	r2, [r5], #4
   86a00:	ea4f 4323 	mov.w	r3, r3, asr #16
   86a04:	d2ea      	bcs.n	869dc <quorem+0xc4>
   86a06:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   86a0a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   86a0e:	b97a      	cbnz	r2, 86a30 <quorem+0x118>
   86a10:	1f1a      	subs	r2, r3, #4
   86a12:	4592      	cmp	sl, r2
   86a14:	d20b      	bcs.n	86a2e <quorem+0x116>
   86a16:	f853 2c04 	ldr.w	r2, [r3, #-4]
   86a1a:	b942      	cbnz	r2, 86a2e <quorem+0x116>
   86a1c:	3b08      	subs	r3, #8
   86a1e:	e002      	b.n	86a26 <quorem+0x10e>
   86a20:	681a      	ldr	r2, [r3, #0]
   86a22:	3b04      	subs	r3, #4
   86a24:	b91a      	cbnz	r2, 86a2e <quorem+0x116>
   86a26:	459a      	cmp	sl, r3
   86a28:	f107 37ff 	add.w	r7, r7, #4294967295
   86a2c:	d3f8      	bcc.n	86a20 <quorem+0x108>
   86a2e:	6127      	str	r7, [r4, #16]
   86a30:	4640      	mov	r0, r8
   86a32:	b003      	add	sp, #12
   86a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86a38:	2000      	movs	r0, #0
   86a3a:	b003      	add	sp, #12
   86a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00086a40 <_dtoa_r>:
   86a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86a44:	6c05      	ldr	r5, [r0, #64]	; 0x40
   86a46:	b09b      	sub	sp, #108	; 0x6c
   86a48:	4604      	mov	r4, r0
   86a4a:	4692      	mov	sl, r2
   86a4c:	469b      	mov	fp, r3
   86a4e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   86a50:	b14d      	cbz	r5, 86a66 <_dtoa_r+0x26>
   86a52:	2301      	movs	r3, #1
   86a54:	6c42      	ldr	r2, [r0, #68]	; 0x44
   86a56:	4629      	mov	r1, r5
   86a58:	4093      	lsls	r3, r2
   86a5a:	60ab      	str	r3, [r5, #8]
   86a5c:	606a      	str	r2, [r5, #4]
   86a5e:	f001 facd 	bl	87ffc <_Bfree>
   86a62:	2300      	movs	r3, #0
   86a64:	6423      	str	r3, [r4, #64]	; 0x40
   86a66:	f1bb 0f00 	cmp.w	fp, #0
   86a6a:	465d      	mov	r5, fp
   86a6c:	db35      	blt.n	86ada <_dtoa_r+0x9a>
   86a6e:	2300      	movs	r3, #0
   86a70:	6033      	str	r3, [r6, #0]
   86a72:	4b9d      	ldr	r3, [pc, #628]	; (86ce8 <_dtoa_r+0x2a8>)
   86a74:	43ab      	bics	r3, r5
   86a76:	d015      	beq.n	86aa4 <_dtoa_r+0x64>
   86a78:	2200      	movs	r2, #0
   86a7a:	2300      	movs	r3, #0
   86a7c:	4650      	mov	r0, sl
   86a7e:	4659      	mov	r1, fp
   86a80:	f002 fa7c 	bl	88f7c <__aeabi_dcmpeq>
   86a84:	4680      	mov	r8, r0
   86a86:	2800      	cmp	r0, #0
   86a88:	d02d      	beq.n	86ae6 <_dtoa_r+0xa6>
   86a8a:	2301      	movs	r3, #1
   86a8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86a8e:	6013      	str	r3, [r2, #0]
   86a90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86a92:	2b00      	cmp	r3, #0
   86a94:	f000 80bd 	beq.w	86c12 <_dtoa_r+0x1d2>
   86a98:	4894      	ldr	r0, [pc, #592]	; (86cec <_dtoa_r+0x2ac>)
   86a9a:	6018      	str	r0, [r3, #0]
   86a9c:	3801      	subs	r0, #1
   86a9e:	b01b      	add	sp, #108	; 0x6c
   86aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86aa4:	f242 730f 	movw	r3, #9999	; 0x270f
   86aa8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86aaa:	6013      	str	r3, [r2, #0]
   86aac:	f1ba 0f00 	cmp.w	sl, #0
   86ab0:	d10d      	bne.n	86ace <_dtoa_r+0x8e>
   86ab2:	f3c5 0513 	ubfx	r5, r5, #0, #20
   86ab6:	b955      	cbnz	r5, 86ace <_dtoa_r+0x8e>
   86ab8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86aba:	488d      	ldr	r0, [pc, #564]	; (86cf0 <_dtoa_r+0x2b0>)
   86abc:	2b00      	cmp	r3, #0
   86abe:	d0ee      	beq.n	86a9e <_dtoa_r+0x5e>
   86ac0:	f100 0308 	add.w	r3, r0, #8
   86ac4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   86ac6:	6013      	str	r3, [r2, #0]
   86ac8:	b01b      	add	sp, #108	; 0x6c
   86aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86ace:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86ad0:	4888      	ldr	r0, [pc, #544]	; (86cf4 <_dtoa_r+0x2b4>)
   86ad2:	2b00      	cmp	r3, #0
   86ad4:	d0e3      	beq.n	86a9e <_dtoa_r+0x5e>
   86ad6:	1cc3      	adds	r3, r0, #3
   86ad8:	e7f4      	b.n	86ac4 <_dtoa_r+0x84>
   86ada:	2301      	movs	r3, #1
   86adc:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   86ae0:	6033      	str	r3, [r6, #0]
   86ae2:	46ab      	mov	fp, r5
   86ae4:	e7c5      	b.n	86a72 <_dtoa_r+0x32>
   86ae6:	aa18      	add	r2, sp, #96	; 0x60
   86ae8:	ab19      	add	r3, sp, #100	; 0x64
   86aea:	9201      	str	r2, [sp, #4]
   86aec:	9300      	str	r3, [sp, #0]
   86aee:	4652      	mov	r2, sl
   86af0:	465b      	mov	r3, fp
   86af2:	4620      	mov	r0, r4
   86af4:	f001 fd04 	bl	88500 <__d2b>
   86af8:	0d2b      	lsrs	r3, r5, #20
   86afa:	4681      	mov	r9, r0
   86afc:	d071      	beq.n	86be2 <_dtoa_r+0x1a2>
   86afe:	4650      	mov	r0, sl
   86b00:	f3cb 0213 	ubfx	r2, fp, #0, #20
   86b04:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   86b08:	9f18      	ldr	r7, [sp, #96]	; 0x60
   86b0a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   86b0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   86b12:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   86b16:	2200      	movs	r2, #0
   86b18:	4b77      	ldr	r3, [pc, #476]	; (86cf8 <_dtoa_r+0x2b8>)
   86b1a:	f7fd fce3 	bl	844e4 <__aeabi_dsub>
   86b1e:	a36c      	add	r3, pc, #432	; (adr r3, 86cd0 <_dtoa_r+0x290>)
   86b20:	e9d3 2300 	ldrd	r2, r3, [r3]
   86b24:	f7fd fe92 	bl	8484c <__aeabi_dmul>
   86b28:	a36b      	add	r3, pc, #428	; (adr r3, 86cd8 <_dtoa_r+0x298>)
   86b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   86b2e:	f7fd fcdb 	bl	844e8 <__adddf3>
   86b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
   86b36:	4630      	mov	r0, r6
   86b38:	f7fd fe22 	bl	84780 <__aeabi_i2d>
   86b3c:	a368      	add	r3, pc, #416	; (adr r3, 86ce0 <_dtoa_r+0x2a0>)
   86b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   86b42:	f7fd fe83 	bl	8484c <__aeabi_dmul>
   86b46:	4602      	mov	r2, r0
   86b48:	460b      	mov	r3, r1
   86b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   86b4e:	f7fd fccb 	bl	844e8 <__adddf3>
   86b52:	e9cd 0104 	strd	r0, r1, [sp, #16]
   86b56:	f002 fa59 	bl	8900c <__aeabi_d2iz>
   86b5a:	2200      	movs	r2, #0
   86b5c:	9002      	str	r0, [sp, #8]
   86b5e:	2300      	movs	r3, #0
   86b60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   86b64:	f002 fa14 	bl	88f90 <__aeabi_dcmplt>
   86b68:	2800      	cmp	r0, #0
   86b6a:	f040 816d 	bne.w	86e48 <_dtoa_r+0x408>
   86b6e:	9d02      	ldr	r5, [sp, #8]
   86b70:	2d16      	cmp	r5, #22
   86b72:	f200 8157 	bhi.w	86e24 <_dtoa_r+0x3e4>
   86b76:	4961      	ldr	r1, [pc, #388]	; (86cfc <_dtoa_r+0x2bc>)
   86b78:	4652      	mov	r2, sl
   86b7a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   86b7e:	465b      	mov	r3, fp
   86b80:	e9d1 0100 	ldrd	r0, r1, [r1]
   86b84:	f002 fa22 	bl	88fcc <__aeabi_dcmpgt>
   86b88:	2800      	cmp	r0, #0
   86b8a:	f000 81be 	beq.w	86f0a <_dtoa_r+0x4ca>
   86b8e:	1e6b      	subs	r3, r5, #1
   86b90:	9302      	str	r3, [sp, #8]
   86b92:	2300      	movs	r3, #0
   86b94:	930e      	str	r3, [sp, #56]	; 0x38
   86b96:	1bbf      	subs	r7, r7, r6
   86b98:	1e7b      	subs	r3, r7, #1
   86b9a:	9308      	str	r3, [sp, #32]
   86b9c:	f100 814e 	bmi.w	86e3c <_dtoa_r+0x3fc>
   86ba0:	2300      	movs	r3, #0
   86ba2:	930a      	str	r3, [sp, #40]	; 0x28
   86ba4:	9b02      	ldr	r3, [sp, #8]
   86ba6:	2b00      	cmp	r3, #0
   86ba8:	f2c0 813f 	blt.w	86e2a <_dtoa_r+0x3ea>
   86bac:	9a08      	ldr	r2, [sp, #32]
   86bae:	930d      	str	r3, [sp, #52]	; 0x34
   86bb0:	4611      	mov	r1, r2
   86bb2:	4419      	add	r1, r3
   86bb4:	2300      	movs	r3, #0
   86bb6:	9108      	str	r1, [sp, #32]
   86bb8:	930c      	str	r3, [sp, #48]	; 0x30
   86bba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86bbc:	2b09      	cmp	r3, #9
   86bbe:	d82a      	bhi.n	86c16 <_dtoa_r+0x1d6>
   86bc0:	2b05      	cmp	r3, #5
   86bc2:	f340 8658 	ble.w	87876 <_dtoa_r+0xe36>
   86bc6:	2500      	movs	r5, #0
   86bc8:	3b04      	subs	r3, #4
   86bca:	9324      	str	r3, [sp, #144]	; 0x90
   86bcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86bce:	3b02      	subs	r3, #2
   86bd0:	2b03      	cmp	r3, #3
   86bd2:	f200 863f 	bhi.w	87854 <_dtoa_r+0xe14>
   86bd6:	e8df f013 	tbh	[pc, r3, lsl #1]
   86bda:	03ce      	.short	0x03ce
   86bdc:	03d902c3 	.word	0x03d902c3
   86be0:	045b      	.short	0x045b
   86be2:	9f18      	ldr	r7, [sp, #96]	; 0x60
   86be4:	9e19      	ldr	r6, [sp, #100]	; 0x64
   86be6:	443e      	add	r6, r7
   86be8:	f206 4332 	addw	r3, r6, #1074	; 0x432
   86bec:	2b20      	cmp	r3, #32
   86bee:	f340 8187 	ble.w	86f00 <_dtoa_r+0x4c0>
   86bf2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   86bf6:	f206 4012 	addw	r0, r6, #1042	; 0x412
   86bfa:	409d      	lsls	r5, r3
   86bfc:	fa2a f000 	lsr.w	r0, sl, r0
   86c00:	4328      	orrs	r0, r5
   86c02:	f7fd fdad 	bl	84760 <__aeabi_ui2d>
   86c06:	2301      	movs	r3, #1
   86c08:	3e01      	subs	r6, #1
   86c0a:	9314      	str	r3, [sp, #80]	; 0x50
   86c0c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   86c10:	e781      	b.n	86b16 <_dtoa_r+0xd6>
   86c12:	483b      	ldr	r0, [pc, #236]	; (86d00 <_dtoa_r+0x2c0>)
   86c14:	e743      	b.n	86a9e <_dtoa_r+0x5e>
   86c16:	2100      	movs	r1, #0
   86c18:	4620      	mov	r0, r4
   86c1a:	6461      	str	r1, [r4, #68]	; 0x44
   86c1c:	9125      	str	r1, [sp, #148]	; 0x94
   86c1e:	f001 f9c7 	bl	87fb0 <_Balloc>
   86c22:	f04f 33ff 	mov.w	r3, #4294967295
   86c26:	9307      	str	r3, [sp, #28]
   86c28:	930f      	str	r3, [sp, #60]	; 0x3c
   86c2a:	2301      	movs	r3, #1
   86c2c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   86c2e:	9004      	str	r0, [sp, #16]
   86c30:	6420      	str	r0, [r4, #64]	; 0x40
   86c32:	9224      	str	r2, [sp, #144]	; 0x90
   86c34:	930b      	str	r3, [sp, #44]	; 0x2c
   86c36:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86c38:	2b00      	cmp	r3, #0
   86c3a:	f2c0 80d3 	blt.w	86de4 <_dtoa_r+0x3a4>
   86c3e:	9a02      	ldr	r2, [sp, #8]
   86c40:	2a0e      	cmp	r2, #14
   86c42:	f300 80cf 	bgt.w	86de4 <_dtoa_r+0x3a4>
   86c46:	4b2d      	ldr	r3, [pc, #180]	; (86cfc <_dtoa_r+0x2bc>)
   86c48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   86c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   86c50:	e9cd 2308 	strd	r2, r3, [sp, #32]
   86c54:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86c56:	2b00      	cmp	r3, #0
   86c58:	f2c0 83b4 	blt.w	873c4 <_dtoa_r+0x984>
   86c5c:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   86c60:	4650      	mov	r0, sl
   86c62:	462a      	mov	r2, r5
   86c64:	4633      	mov	r3, r6
   86c66:	4659      	mov	r1, fp
   86c68:	f7fd ff1a 	bl	84aa0 <__aeabi_ddiv>
   86c6c:	f002 f9ce 	bl	8900c <__aeabi_d2iz>
   86c70:	4680      	mov	r8, r0
   86c72:	f7fd fd85 	bl	84780 <__aeabi_i2d>
   86c76:	462a      	mov	r2, r5
   86c78:	4633      	mov	r3, r6
   86c7a:	f7fd fde7 	bl	8484c <__aeabi_dmul>
   86c7e:	4602      	mov	r2, r0
   86c80:	460b      	mov	r3, r1
   86c82:	4650      	mov	r0, sl
   86c84:	4659      	mov	r1, fp
   86c86:	f7fd fc2d 	bl	844e4 <__aeabi_dsub>
   86c8a:	9e07      	ldr	r6, [sp, #28]
   86c8c:	9f04      	ldr	r7, [sp, #16]
   86c8e:	f108 0530 	add.w	r5, r8, #48	; 0x30
   86c92:	2e01      	cmp	r6, #1
   86c94:	703d      	strb	r5, [r7, #0]
   86c96:	4602      	mov	r2, r0
   86c98:	460b      	mov	r3, r1
   86c9a:	f107 0501 	add.w	r5, r7, #1
   86c9e:	d064      	beq.n	86d6a <_dtoa_r+0x32a>
   86ca0:	2200      	movs	r2, #0
   86ca2:	4b18      	ldr	r3, [pc, #96]	; (86d04 <_dtoa_r+0x2c4>)
   86ca4:	f7fd fdd2 	bl	8484c <__aeabi_dmul>
   86ca8:	2200      	movs	r2, #0
   86caa:	2300      	movs	r3, #0
   86cac:	4606      	mov	r6, r0
   86cae:	460f      	mov	r7, r1
   86cb0:	f002 f964 	bl	88f7c <__aeabi_dcmpeq>
   86cb4:	2800      	cmp	r0, #0
   86cb6:	f040 8082 	bne.w	86dbe <_dtoa_r+0x37e>
   86cba:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   86cbe:	f04f 0a00 	mov.w	sl, #0
   86cc2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   86cc6:	f04f 0b00 	mov.w	fp, #0
   86cca:	940b      	str	r4, [sp, #44]	; 0x2c
   86ccc:	e029      	b.n	86d22 <_dtoa_r+0x2e2>
   86cce:	bf00      	nop
   86cd0:	636f4361 	.word	0x636f4361
   86cd4:	3fd287a7 	.word	0x3fd287a7
   86cd8:	8b60c8b3 	.word	0x8b60c8b3
   86cdc:	3fc68a28 	.word	0x3fc68a28
   86ce0:	509f79fb 	.word	0x509f79fb
   86ce4:	3fd34413 	.word	0x3fd34413
   86ce8:	7ff00000 	.word	0x7ff00000
   86cec:	000894d9 	.word	0x000894d9
   86cf0:	000894fc 	.word	0x000894fc
   86cf4:	00089508 	.word	0x00089508
   86cf8:	3ff80000 	.word	0x3ff80000
   86cfc:	00089538 	.word	0x00089538
   86d00:	000894d8 	.word	0x000894d8
   86d04:	40240000 	.word	0x40240000
   86d08:	2200      	movs	r2, #0
   86d0a:	4b81      	ldr	r3, [pc, #516]	; (86f10 <_dtoa_r+0x4d0>)
   86d0c:	f7fd fd9e 	bl	8484c <__aeabi_dmul>
   86d10:	4652      	mov	r2, sl
   86d12:	465b      	mov	r3, fp
   86d14:	4606      	mov	r6, r0
   86d16:	460f      	mov	r7, r1
   86d18:	f002 f930 	bl	88f7c <__aeabi_dcmpeq>
   86d1c:	2800      	cmp	r0, #0
   86d1e:	f040 83ba 	bne.w	87496 <_dtoa_r+0xa56>
   86d22:	4642      	mov	r2, r8
   86d24:	464b      	mov	r3, r9
   86d26:	4630      	mov	r0, r6
   86d28:	4639      	mov	r1, r7
   86d2a:	f7fd feb9 	bl	84aa0 <__aeabi_ddiv>
   86d2e:	f002 f96d 	bl	8900c <__aeabi_d2iz>
   86d32:	4604      	mov	r4, r0
   86d34:	f7fd fd24 	bl	84780 <__aeabi_i2d>
   86d38:	4642      	mov	r2, r8
   86d3a:	464b      	mov	r3, r9
   86d3c:	f7fd fd86 	bl	8484c <__aeabi_dmul>
   86d40:	4602      	mov	r2, r0
   86d42:	460b      	mov	r3, r1
   86d44:	4630      	mov	r0, r6
   86d46:	4639      	mov	r1, r7
   86d48:	f7fd fbcc 	bl	844e4 <__aeabi_dsub>
   86d4c:	f104 0630 	add.w	r6, r4, #48	; 0x30
   86d50:	f805 6b01 	strb.w	r6, [r5], #1
   86d54:	9e04      	ldr	r6, [sp, #16]
   86d56:	9f07      	ldr	r7, [sp, #28]
   86d58:	1bae      	subs	r6, r5, r6
   86d5a:	42be      	cmp	r6, r7
   86d5c:	4602      	mov	r2, r0
   86d5e:	460b      	mov	r3, r1
   86d60:	d1d2      	bne.n	86d08 <_dtoa_r+0x2c8>
   86d62:	46a0      	mov	r8, r4
   86d64:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86d68:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86d6a:	4610      	mov	r0, r2
   86d6c:	4619      	mov	r1, r3
   86d6e:	f7fd fbbb 	bl	844e8 <__adddf3>
   86d72:	4606      	mov	r6, r0
   86d74:	460f      	mov	r7, r1
   86d76:	4602      	mov	r2, r0
   86d78:	460b      	mov	r3, r1
   86d7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86d7e:	f002 f907 	bl	88f90 <__aeabi_dcmplt>
   86d82:	b948      	cbnz	r0, 86d98 <_dtoa_r+0x358>
   86d84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86d88:	4632      	mov	r2, r6
   86d8a:	463b      	mov	r3, r7
   86d8c:	f002 f8f6 	bl	88f7c <__aeabi_dcmpeq>
   86d90:	b1a8      	cbz	r0, 86dbe <_dtoa_r+0x37e>
   86d92:	f018 0f01 	tst.w	r8, #1
   86d96:	d012      	beq.n	86dbe <_dtoa_r+0x37e>
   86d98:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   86d9c:	1e6b      	subs	r3, r5, #1
   86d9e:	9a04      	ldr	r2, [sp, #16]
   86da0:	e004      	b.n	86dac <_dtoa_r+0x36c>
   86da2:	429a      	cmp	r2, r3
   86da4:	f000 8402 	beq.w	875ac <_dtoa_r+0xb6c>
   86da8:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   86dac:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   86db0:	f103 0501 	add.w	r5, r3, #1
   86db4:	d0f5      	beq.n	86da2 <_dtoa_r+0x362>
   86db6:	f108 0801 	add.w	r8, r8, #1
   86dba:	f883 8000 	strb.w	r8, [r3]
   86dbe:	4649      	mov	r1, r9
   86dc0:	4620      	mov	r0, r4
   86dc2:	f001 f91b 	bl	87ffc <_Bfree>
   86dc6:	2200      	movs	r2, #0
   86dc8:	9b02      	ldr	r3, [sp, #8]
   86dca:	702a      	strb	r2, [r5, #0]
   86dcc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86dce:	3301      	adds	r3, #1
   86dd0:	6013      	str	r3, [r2, #0]
   86dd2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86dd4:	2b00      	cmp	r3, #0
   86dd6:	f000 839f 	beq.w	87518 <_dtoa_r+0xad8>
   86dda:	9804      	ldr	r0, [sp, #16]
   86ddc:	601d      	str	r5, [r3, #0]
   86dde:	b01b      	add	sp, #108	; 0x6c
   86de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86de4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86de6:	2a00      	cmp	r2, #0
   86de8:	d03e      	beq.n	86e68 <_dtoa_r+0x428>
   86dea:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86dec:	2a01      	cmp	r2, #1
   86dee:	f340 8311 	ble.w	87414 <_dtoa_r+0x9d4>
   86df2:	9b07      	ldr	r3, [sp, #28]
   86df4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86df6:	1e5f      	subs	r7, r3, #1
   86df8:	42ba      	cmp	r2, r7
   86dfa:	f2c0 8390 	blt.w	8751e <_dtoa_r+0xade>
   86dfe:	1bd7      	subs	r7, r2, r7
   86e00:	9b07      	ldr	r3, [sp, #28]
   86e02:	2b00      	cmp	r3, #0
   86e04:	f2c0 848c 	blt.w	87720 <_dtoa_r+0xce0>
   86e08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   86e0a:	9b07      	ldr	r3, [sp, #28]
   86e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86e0e:	2101      	movs	r1, #1
   86e10:	441a      	add	r2, r3
   86e12:	920a      	str	r2, [sp, #40]	; 0x28
   86e14:	9a08      	ldr	r2, [sp, #32]
   86e16:	4620      	mov	r0, r4
   86e18:	441a      	add	r2, r3
   86e1a:	9208      	str	r2, [sp, #32]
   86e1c:	f001 f98a 	bl	88134 <__i2b>
   86e20:	4606      	mov	r6, r0
   86e22:	e023      	b.n	86e6c <_dtoa_r+0x42c>
   86e24:	2301      	movs	r3, #1
   86e26:	930e      	str	r3, [sp, #56]	; 0x38
   86e28:	e6b5      	b.n	86b96 <_dtoa_r+0x156>
   86e2a:	2300      	movs	r3, #0
   86e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86e2e:	930d      	str	r3, [sp, #52]	; 0x34
   86e30:	9b02      	ldr	r3, [sp, #8]
   86e32:	1ad2      	subs	r2, r2, r3
   86e34:	425b      	negs	r3, r3
   86e36:	920a      	str	r2, [sp, #40]	; 0x28
   86e38:	930c      	str	r3, [sp, #48]	; 0x30
   86e3a:	e6be      	b.n	86bba <_dtoa_r+0x17a>
   86e3c:	f1c7 0301 	rsb	r3, r7, #1
   86e40:	930a      	str	r3, [sp, #40]	; 0x28
   86e42:	2300      	movs	r3, #0
   86e44:	9308      	str	r3, [sp, #32]
   86e46:	e6ad      	b.n	86ba4 <_dtoa_r+0x164>
   86e48:	9d02      	ldr	r5, [sp, #8]
   86e4a:	4628      	mov	r0, r5
   86e4c:	f7fd fc98 	bl	84780 <__aeabi_i2d>
   86e50:	4602      	mov	r2, r0
   86e52:	460b      	mov	r3, r1
   86e54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   86e58:	f002 f890 	bl	88f7c <__aeabi_dcmpeq>
   86e5c:	2800      	cmp	r0, #0
   86e5e:	f47f ae86 	bne.w	86b6e <_dtoa_r+0x12e>
   86e62:	1e6b      	subs	r3, r5, #1
   86e64:	9302      	str	r3, [sp, #8]
   86e66:	e682      	b.n	86b6e <_dtoa_r+0x12e>
   86e68:	ad0a      	add	r5, sp, #40	; 0x28
   86e6a:	cde0      	ldmia	r5, {r5, r6, r7}
   86e6c:	2d00      	cmp	r5, #0
   86e6e:	dd0c      	ble.n	86e8a <_dtoa_r+0x44a>
   86e70:	9908      	ldr	r1, [sp, #32]
   86e72:	2900      	cmp	r1, #0
   86e74:	460b      	mov	r3, r1
   86e76:	dd08      	ble.n	86e8a <_dtoa_r+0x44a>
   86e78:	42a9      	cmp	r1, r5
   86e7a:	bfa8      	it	ge
   86e7c:	462b      	movge	r3, r5
   86e7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86e80:	1aed      	subs	r5, r5, r3
   86e82:	1ad2      	subs	r2, r2, r3
   86e84:	1acb      	subs	r3, r1, r3
   86e86:	920a      	str	r2, [sp, #40]	; 0x28
   86e88:	9308      	str	r3, [sp, #32]
   86e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86e8c:	b1d3      	cbz	r3, 86ec4 <_dtoa_r+0x484>
   86e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86e90:	2b00      	cmp	r3, #0
   86e92:	f000 82b8 	beq.w	87406 <_dtoa_r+0x9c6>
   86e96:	2f00      	cmp	r7, #0
   86e98:	dd10      	ble.n	86ebc <_dtoa_r+0x47c>
   86e9a:	4631      	mov	r1, r6
   86e9c:	463a      	mov	r2, r7
   86e9e:	4620      	mov	r0, r4
   86ea0:	f001 f9e4 	bl	8826c <__pow5mult>
   86ea4:	464a      	mov	r2, r9
   86ea6:	4601      	mov	r1, r0
   86ea8:	4606      	mov	r6, r0
   86eaa:	4620      	mov	r0, r4
   86eac:	f001 f94c 	bl	88148 <__multiply>
   86eb0:	4603      	mov	r3, r0
   86eb2:	4649      	mov	r1, r9
   86eb4:	4620      	mov	r0, r4
   86eb6:	4699      	mov	r9, r3
   86eb8:	f001 f8a0 	bl	87ffc <_Bfree>
   86ebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86ebe:	1bda      	subs	r2, r3, r7
   86ec0:	f040 82a2 	bne.w	87408 <_dtoa_r+0x9c8>
   86ec4:	2101      	movs	r1, #1
   86ec6:	4620      	mov	r0, r4
   86ec8:	f001 f934 	bl	88134 <__i2b>
   86ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86ece:	4680      	mov	r8, r0
   86ed0:	2b00      	cmp	r3, #0
   86ed2:	dd1f      	ble.n	86f14 <_dtoa_r+0x4d4>
   86ed4:	4601      	mov	r1, r0
   86ed6:	461a      	mov	r2, r3
   86ed8:	4620      	mov	r0, r4
   86eda:	f001 f9c7 	bl	8826c <__pow5mult>
   86ede:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86ee0:	4680      	mov	r8, r0
   86ee2:	2b01      	cmp	r3, #1
   86ee4:	f340 8255 	ble.w	87392 <_dtoa_r+0x952>
   86ee8:	2300      	movs	r3, #0
   86eea:	930c      	str	r3, [sp, #48]	; 0x30
   86eec:	f8d8 3010 	ldr.w	r3, [r8, #16]
   86ef0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   86ef4:	6918      	ldr	r0, [r3, #16]
   86ef6:	f001 f8cd 	bl	88094 <__hi0bits>
   86efa:	f1c0 0020 	rsb	r0, r0, #32
   86efe:	e013      	b.n	86f28 <_dtoa_r+0x4e8>
   86f00:	f1c3 0520 	rsb	r5, r3, #32
   86f04:	fa0a f005 	lsl.w	r0, sl, r5
   86f08:	e67b      	b.n	86c02 <_dtoa_r+0x1c2>
   86f0a:	900e      	str	r0, [sp, #56]	; 0x38
   86f0c:	e643      	b.n	86b96 <_dtoa_r+0x156>
   86f0e:	bf00      	nop
   86f10:	40240000 	.word	0x40240000
   86f14:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86f16:	2b01      	cmp	r3, #1
   86f18:	f340 8285 	ble.w	87426 <_dtoa_r+0x9e6>
   86f1c:	2300      	movs	r3, #0
   86f1e:	930c      	str	r3, [sp, #48]	; 0x30
   86f20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86f22:	2001      	movs	r0, #1
   86f24:	2b00      	cmp	r3, #0
   86f26:	d1e1      	bne.n	86eec <_dtoa_r+0x4ac>
   86f28:	9a08      	ldr	r2, [sp, #32]
   86f2a:	4410      	add	r0, r2
   86f2c:	f010 001f 	ands.w	r0, r0, #31
   86f30:	f000 80a1 	beq.w	87076 <_dtoa_r+0x636>
   86f34:	f1c0 0320 	rsb	r3, r0, #32
   86f38:	2b04      	cmp	r3, #4
   86f3a:	f340 8486 	ble.w	8784a <_dtoa_r+0xe0a>
   86f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86f40:	f1c0 001c 	rsb	r0, r0, #28
   86f44:	4403      	add	r3, r0
   86f46:	930a      	str	r3, [sp, #40]	; 0x28
   86f48:	4613      	mov	r3, r2
   86f4a:	4403      	add	r3, r0
   86f4c:	4405      	add	r5, r0
   86f4e:	9308      	str	r3, [sp, #32]
   86f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86f52:	2b00      	cmp	r3, #0
   86f54:	dd05      	ble.n	86f62 <_dtoa_r+0x522>
   86f56:	4649      	mov	r1, r9
   86f58:	461a      	mov	r2, r3
   86f5a:	4620      	mov	r0, r4
   86f5c:	f001 f9d6 	bl	8830c <__lshift>
   86f60:	4681      	mov	r9, r0
   86f62:	9b08      	ldr	r3, [sp, #32]
   86f64:	2b00      	cmp	r3, #0
   86f66:	dd05      	ble.n	86f74 <_dtoa_r+0x534>
   86f68:	4641      	mov	r1, r8
   86f6a:	461a      	mov	r2, r3
   86f6c:	4620      	mov	r0, r4
   86f6e:	f001 f9cd 	bl	8830c <__lshift>
   86f72:	4680      	mov	r8, r0
   86f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86f76:	2b00      	cmp	r3, #0
   86f78:	f040 8086 	bne.w	87088 <_dtoa_r+0x648>
   86f7c:	9b07      	ldr	r3, [sp, #28]
   86f7e:	2b00      	cmp	r3, #0
   86f80:	f340 8264 	ble.w	8744c <_dtoa_r+0xa0c>
   86f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86f86:	2b00      	cmp	r3, #0
   86f88:	f000 8098 	beq.w	870bc <_dtoa_r+0x67c>
   86f8c:	2d00      	cmp	r5, #0
   86f8e:	dd05      	ble.n	86f9c <_dtoa_r+0x55c>
   86f90:	4631      	mov	r1, r6
   86f92:	462a      	mov	r2, r5
   86f94:	4620      	mov	r0, r4
   86f96:	f001 f9b9 	bl	8830c <__lshift>
   86f9a:	4606      	mov	r6, r0
   86f9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86f9e:	2b00      	cmp	r3, #0
   86fa0:	f040 8336 	bne.w	87610 <_dtoa_r+0xbd0>
   86fa4:	9608      	str	r6, [sp, #32]
   86fa6:	9b07      	ldr	r3, [sp, #28]
   86fa8:	9a04      	ldr	r2, [sp, #16]
   86faa:	3b01      	subs	r3, #1
   86fac:	18d3      	adds	r3, r2, r3
   86fae:	930b      	str	r3, [sp, #44]	; 0x2c
   86fb0:	4617      	mov	r7, r2
   86fb2:	f00a 0301 	and.w	r3, sl, #1
   86fb6:	46c2      	mov	sl, r8
   86fb8:	f8dd b020 	ldr.w	fp, [sp, #32]
   86fbc:	930c      	str	r3, [sp, #48]	; 0x30
   86fbe:	4651      	mov	r1, sl
   86fc0:	4648      	mov	r0, r9
   86fc2:	f7ff fca9 	bl	86918 <quorem>
   86fc6:	4631      	mov	r1, r6
   86fc8:	4605      	mov	r5, r0
   86fca:	4648      	mov	r0, r9
   86fcc:	f001 f9ee 	bl	883ac <__mcmp>
   86fd0:	465a      	mov	r2, fp
   86fd2:	9007      	str	r0, [sp, #28]
   86fd4:	4651      	mov	r1, sl
   86fd6:	4620      	mov	r0, r4
   86fd8:	f001 fa04 	bl	883e4 <__mdiff>
   86fdc:	68c2      	ldr	r2, [r0, #12]
   86fde:	4680      	mov	r8, r0
   86fe0:	f105 0330 	add.w	r3, r5, #48	; 0x30
   86fe4:	2a00      	cmp	r2, #0
   86fe6:	f040 8229 	bne.w	8743c <_dtoa_r+0x9fc>
   86fea:	4601      	mov	r1, r0
   86fec:	4648      	mov	r0, r9
   86fee:	930a      	str	r3, [sp, #40]	; 0x28
   86ff0:	f001 f9dc 	bl	883ac <__mcmp>
   86ff4:	4641      	mov	r1, r8
   86ff6:	9008      	str	r0, [sp, #32]
   86ff8:	4620      	mov	r0, r4
   86ffa:	f000 ffff 	bl	87ffc <_Bfree>
   86ffe:	9a08      	ldr	r2, [sp, #32]
   87000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87002:	b932      	cbnz	r2, 87012 <_dtoa_r+0x5d2>
   87004:	9924      	ldr	r1, [sp, #144]	; 0x90
   87006:	b921      	cbnz	r1, 87012 <_dtoa_r+0x5d2>
   87008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8700a:	2a00      	cmp	r2, #0
   8700c:	f000 83ee 	beq.w	877ec <_dtoa_r+0xdac>
   87010:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87012:	9907      	ldr	r1, [sp, #28]
   87014:	2900      	cmp	r1, #0
   87016:	f2c0 829f 	blt.w	87558 <_dtoa_r+0xb18>
   8701a:	d105      	bne.n	87028 <_dtoa_r+0x5e8>
   8701c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8701e:	b919      	cbnz	r1, 87028 <_dtoa_r+0x5e8>
   87020:	990c      	ldr	r1, [sp, #48]	; 0x30
   87022:	2900      	cmp	r1, #0
   87024:	f000 8298 	beq.w	87558 <_dtoa_r+0xb18>
   87028:	2a00      	cmp	r2, #0
   8702a:	f300 8305 	bgt.w	87638 <_dtoa_r+0xbf8>
   8702e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87030:	f107 0801 	add.w	r8, r7, #1
   87034:	4297      	cmp	r7, r2
   87036:	703b      	strb	r3, [r7, #0]
   87038:	4645      	mov	r5, r8
   8703a:	f000 830b 	beq.w	87654 <_dtoa_r+0xc14>
   8703e:	4649      	mov	r1, r9
   87040:	2300      	movs	r3, #0
   87042:	220a      	movs	r2, #10
   87044:	4620      	mov	r0, r4
   87046:	f000 ffe3 	bl	88010 <__multadd>
   8704a:	455e      	cmp	r6, fp
   8704c:	4681      	mov	r9, r0
   8704e:	4631      	mov	r1, r6
   87050:	f04f 0300 	mov.w	r3, #0
   87054:	f04f 020a 	mov.w	r2, #10
   87058:	4620      	mov	r0, r4
   8705a:	f000 81e9 	beq.w	87430 <_dtoa_r+0x9f0>
   8705e:	f000 ffd7 	bl	88010 <__multadd>
   87062:	4659      	mov	r1, fp
   87064:	4606      	mov	r6, r0
   87066:	2300      	movs	r3, #0
   87068:	220a      	movs	r2, #10
   8706a:	4620      	mov	r0, r4
   8706c:	f000 ffd0 	bl	88010 <__multadd>
   87070:	4647      	mov	r7, r8
   87072:	4683      	mov	fp, r0
   87074:	e7a3      	b.n	86fbe <_dtoa_r+0x57e>
   87076:	201c      	movs	r0, #28
   87078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8707a:	4405      	add	r5, r0
   8707c:	4403      	add	r3, r0
   8707e:	930a      	str	r3, [sp, #40]	; 0x28
   87080:	9b08      	ldr	r3, [sp, #32]
   87082:	4403      	add	r3, r0
   87084:	9308      	str	r3, [sp, #32]
   87086:	e763      	b.n	86f50 <_dtoa_r+0x510>
   87088:	4641      	mov	r1, r8
   8708a:	4648      	mov	r0, r9
   8708c:	f001 f98e 	bl	883ac <__mcmp>
   87090:	2800      	cmp	r0, #0
   87092:	f6bf af73 	bge.w	86f7c <_dtoa_r+0x53c>
   87096:	9f02      	ldr	r7, [sp, #8]
   87098:	4649      	mov	r1, r9
   8709a:	2300      	movs	r3, #0
   8709c:	220a      	movs	r2, #10
   8709e:	4620      	mov	r0, r4
   870a0:	3f01      	subs	r7, #1
   870a2:	9702      	str	r7, [sp, #8]
   870a4:	f000 ffb4 	bl	88010 <__multadd>
   870a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   870aa:	4681      	mov	r9, r0
   870ac:	2b00      	cmp	r3, #0
   870ae:	f040 83b5 	bne.w	8781c <_dtoa_r+0xddc>
   870b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   870b4:	2b00      	cmp	r3, #0
   870b6:	f340 83be 	ble.w	87836 <_dtoa_r+0xdf6>
   870ba:	9307      	str	r3, [sp, #28]
   870bc:	f8dd a010 	ldr.w	sl, [sp, #16]
   870c0:	9f07      	ldr	r7, [sp, #28]
   870c2:	4655      	mov	r5, sl
   870c4:	e006      	b.n	870d4 <_dtoa_r+0x694>
   870c6:	4649      	mov	r1, r9
   870c8:	2300      	movs	r3, #0
   870ca:	220a      	movs	r2, #10
   870cc:	4620      	mov	r0, r4
   870ce:	f000 ff9f 	bl	88010 <__multadd>
   870d2:	4681      	mov	r9, r0
   870d4:	4641      	mov	r1, r8
   870d6:	4648      	mov	r0, r9
   870d8:	f7ff fc1e 	bl	86918 <quorem>
   870dc:	3030      	adds	r0, #48	; 0x30
   870de:	f805 0b01 	strb.w	r0, [r5], #1
   870e2:	eba5 030a 	sub.w	r3, r5, sl
   870e6:	42bb      	cmp	r3, r7
   870e8:	dbed      	blt.n	870c6 <_dtoa_r+0x686>
   870ea:	9b04      	ldr	r3, [sp, #16]
   870ec:	9a07      	ldr	r2, [sp, #28]
   870ee:	4682      	mov	sl, r0
   870f0:	2a01      	cmp	r2, #1
   870f2:	bfac      	ite	ge
   870f4:	189b      	addge	r3, r3, r2
   870f6:	3301      	addlt	r3, #1
   870f8:	f04f 0b00 	mov.w	fp, #0
   870fc:	461d      	mov	r5, r3
   870fe:	4649      	mov	r1, r9
   87100:	2201      	movs	r2, #1
   87102:	4620      	mov	r0, r4
   87104:	f001 f902 	bl	8830c <__lshift>
   87108:	4641      	mov	r1, r8
   8710a:	4681      	mov	r9, r0
   8710c:	f001 f94e 	bl	883ac <__mcmp>
   87110:	2800      	cmp	r0, #0
   87112:	f340 823f 	ble.w	87594 <_dtoa_r+0xb54>
   87116:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   8711a:	1e6b      	subs	r3, r5, #1
   8711c:	9904      	ldr	r1, [sp, #16]
   8711e:	e004      	b.n	8712a <_dtoa_r+0x6ea>
   87120:	428b      	cmp	r3, r1
   87122:	f000 81ae 	beq.w	87482 <_dtoa_r+0xa42>
   87126:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   8712a:	2a39      	cmp	r2, #57	; 0x39
   8712c:	f103 0501 	add.w	r5, r3, #1
   87130:	d0f6      	beq.n	87120 <_dtoa_r+0x6e0>
   87132:	3201      	adds	r2, #1
   87134:	701a      	strb	r2, [r3, #0]
   87136:	4641      	mov	r1, r8
   87138:	4620      	mov	r0, r4
   8713a:	f000 ff5f 	bl	87ffc <_Bfree>
   8713e:	2e00      	cmp	r6, #0
   87140:	f43f ae3d 	beq.w	86dbe <_dtoa_r+0x37e>
   87144:	f1bb 0f00 	cmp.w	fp, #0
   87148:	d005      	beq.n	87156 <_dtoa_r+0x716>
   8714a:	45b3      	cmp	fp, r6
   8714c:	d003      	beq.n	87156 <_dtoa_r+0x716>
   8714e:	4659      	mov	r1, fp
   87150:	4620      	mov	r0, r4
   87152:	f000 ff53 	bl	87ffc <_Bfree>
   87156:	4631      	mov	r1, r6
   87158:	4620      	mov	r0, r4
   8715a:	f000 ff4f 	bl	87ffc <_Bfree>
   8715e:	e62e      	b.n	86dbe <_dtoa_r+0x37e>
   87160:	2300      	movs	r3, #0
   87162:	930b      	str	r3, [sp, #44]	; 0x2c
   87164:	9b02      	ldr	r3, [sp, #8]
   87166:	9a25      	ldr	r2, [sp, #148]	; 0x94
   87168:	4413      	add	r3, r2
   8716a:	930f      	str	r3, [sp, #60]	; 0x3c
   8716c:	3301      	adds	r3, #1
   8716e:	2b01      	cmp	r3, #1
   87170:	461f      	mov	r7, r3
   87172:	461e      	mov	r6, r3
   87174:	bfb8      	it	lt
   87176:	2701      	movlt	r7, #1
   87178:	9307      	str	r3, [sp, #28]
   8717a:	2100      	movs	r1, #0
   8717c:	2f17      	cmp	r7, #23
   8717e:	6461      	str	r1, [r4, #68]	; 0x44
   87180:	d90a      	bls.n	87198 <_dtoa_r+0x758>
   87182:	2201      	movs	r2, #1
   87184:	2304      	movs	r3, #4
   87186:	005b      	lsls	r3, r3, #1
   87188:	f103 0014 	add.w	r0, r3, #20
   8718c:	4287      	cmp	r7, r0
   8718e:	4611      	mov	r1, r2
   87190:	f102 0201 	add.w	r2, r2, #1
   87194:	d2f7      	bcs.n	87186 <_dtoa_r+0x746>
   87196:	6461      	str	r1, [r4, #68]	; 0x44
   87198:	4620      	mov	r0, r4
   8719a:	f000 ff09 	bl	87fb0 <_Balloc>
   8719e:	2e0e      	cmp	r6, #14
   871a0:	9004      	str	r0, [sp, #16]
   871a2:	6420      	str	r0, [r4, #64]	; 0x40
   871a4:	f63f ad47 	bhi.w	86c36 <_dtoa_r+0x1f6>
   871a8:	2d00      	cmp	r5, #0
   871aa:	f43f ad44 	beq.w	86c36 <_dtoa_r+0x1f6>
   871ae:	9902      	ldr	r1, [sp, #8]
   871b0:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   871b4:	2900      	cmp	r1, #0
   871b6:	f340 8203 	ble.w	875c0 <_dtoa_r+0xb80>
   871ba:	4bb9      	ldr	r3, [pc, #740]	; (874a0 <_dtoa_r+0xa60>)
   871bc:	f001 020f 	and.w	r2, r1, #15
   871c0:	110d      	asrs	r5, r1, #4
   871c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   871c6:	06e9      	lsls	r1, r5, #27
   871c8:	e9d3 6700 	ldrd	r6, r7, [r3]
   871cc:	f140 81af 	bpl.w	8752e <_dtoa_r+0xaee>
   871d0:	4bb4      	ldr	r3, [pc, #720]	; (874a4 <_dtoa_r+0xa64>)
   871d2:	4650      	mov	r0, sl
   871d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   871d8:	4659      	mov	r1, fp
   871da:	f7fd fc61 	bl	84aa0 <__aeabi_ddiv>
   871de:	f04f 0a03 	mov.w	sl, #3
   871e2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   871e6:	f005 050f 	and.w	r5, r5, #15
   871ea:	b18d      	cbz	r5, 87210 <_dtoa_r+0x7d0>
   871ec:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 874a4 <_dtoa_r+0xa64>
   871f0:	07ea      	lsls	r2, r5, #31
   871f2:	d509      	bpl.n	87208 <_dtoa_r+0x7c8>
   871f4:	e9d8 2300 	ldrd	r2, r3, [r8]
   871f8:	4630      	mov	r0, r6
   871fa:	4639      	mov	r1, r7
   871fc:	f7fd fb26 	bl	8484c <__aeabi_dmul>
   87200:	4606      	mov	r6, r0
   87202:	460f      	mov	r7, r1
   87204:	f10a 0a01 	add.w	sl, sl, #1
   87208:	106d      	asrs	r5, r5, #1
   8720a:	f108 0808 	add.w	r8, r8, #8
   8720e:	d1ef      	bne.n	871f0 <_dtoa_r+0x7b0>
   87210:	463b      	mov	r3, r7
   87212:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   87216:	4632      	mov	r2, r6
   87218:	f7fd fc42 	bl	84aa0 <__aeabi_ddiv>
   8721c:	4607      	mov	r7, r0
   8721e:	4688      	mov	r8, r1
   87220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87222:	b143      	cbz	r3, 87236 <_dtoa_r+0x7f6>
   87224:	2200      	movs	r2, #0
   87226:	4ba0      	ldr	r3, [pc, #640]	; (874a8 <_dtoa_r+0xa68>)
   87228:	4638      	mov	r0, r7
   8722a:	4641      	mov	r1, r8
   8722c:	f001 feb0 	bl	88f90 <__aeabi_dcmplt>
   87230:	2800      	cmp	r0, #0
   87232:	f040 8287 	bne.w	87744 <_dtoa_r+0xd04>
   87236:	4650      	mov	r0, sl
   87238:	f7fd faa2 	bl	84780 <__aeabi_i2d>
   8723c:	463a      	mov	r2, r7
   8723e:	4643      	mov	r3, r8
   87240:	f7fd fb04 	bl	8484c <__aeabi_dmul>
   87244:	4b99      	ldr	r3, [pc, #612]	; (874ac <_dtoa_r+0xa6c>)
   87246:	2200      	movs	r2, #0
   87248:	f7fd f94e 	bl	844e8 <__adddf3>
   8724c:	9b07      	ldr	r3, [sp, #28]
   8724e:	4605      	mov	r5, r0
   87250:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87254:	2b00      	cmp	r3, #0
   87256:	f000 813f 	beq.w	874d8 <_dtoa_r+0xa98>
   8725a:	9b02      	ldr	r3, [sp, #8]
   8725c:	9315      	str	r3, [sp, #84]	; 0x54
   8725e:	9b07      	ldr	r3, [sp, #28]
   87260:	9312      	str	r3, [sp, #72]	; 0x48
   87262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87264:	2b00      	cmp	r3, #0
   87266:	f000 81fb 	beq.w	87660 <_dtoa_r+0xc20>
   8726a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8726c:	4b8c      	ldr	r3, [pc, #560]	; (874a0 <_dtoa_r+0xa60>)
   8726e:	2000      	movs	r0, #0
   87270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87274:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   87278:	498d      	ldr	r1, [pc, #564]	; (874b0 <_dtoa_r+0xa70>)
   8727a:	f7fd fc11 	bl	84aa0 <__aeabi_ddiv>
   8727e:	462a      	mov	r2, r5
   87280:	4633      	mov	r3, r6
   87282:	f7fd f92f 	bl	844e4 <__aeabi_dsub>
   87286:	4682      	mov	sl, r0
   87288:	468b      	mov	fp, r1
   8728a:	4638      	mov	r0, r7
   8728c:	4641      	mov	r1, r8
   8728e:	f001 febd 	bl	8900c <__aeabi_d2iz>
   87292:	4605      	mov	r5, r0
   87294:	f7fd fa74 	bl	84780 <__aeabi_i2d>
   87298:	4602      	mov	r2, r0
   8729a:	460b      	mov	r3, r1
   8729c:	4638      	mov	r0, r7
   8729e:	4641      	mov	r1, r8
   872a0:	f7fd f920 	bl	844e4 <__aeabi_dsub>
   872a4:	3530      	adds	r5, #48	; 0x30
   872a6:	fa5f f885 	uxtb.w	r8, r5
   872aa:	9d04      	ldr	r5, [sp, #16]
   872ac:	4606      	mov	r6, r0
   872ae:	460f      	mov	r7, r1
   872b0:	f885 8000 	strb.w	r8, [r5]
   872b4:	4602      	mov	r2, r0
   872b6:	460b      	mov	r3, r1
   872b8:	4650      	mov	r0, sl
   872ba:	4659      	mov	r1, fp
   872bc:	3501      	adds	r5, #1
   872be:	f001 fe85 	bl	88fcc <__aeabi_dcmpgt>
   872c2:	2800      	cmp	r0, #0
   872c4:	d154      	bne.n	87370 <_dtoa_r+0x930>
   872c6:	4632      	mov	r2, r6
   872c8:	463b      	mov	r3, r7
   872ca:	2000      	movs	r0, #0
   872cc:	4976      	ldr	r1, [pc, #472]	; (874a8 <_dtoa_r+0xa68>)
   872ce:	f7fd f909 	bl	844e4 <__aeabi_dsub>
   872d2:	4602      	mov	r2, r0
   872d4:	460b      	mov	r3, r1
   872d6:	4650      	mov	r0, sl
   872d8:	4659      	mov	r1, fp
   872da:	f001 fe77 	bl	88fcc <__aeabi_dcmpgt>
   872de:	2800      	cmp	r0, #0
   872e0:	f040 8270 	bne.w	877c4 <_dtoa_r+0xd84>
   872e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   872e6:	2a01      	cmp	r2, #1
   872e8:	f000 8112 	beq.w	87510 <_dtoa_r+0xad0>
   872ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   872ee:	9a04      	ldr	r2, [sp, #16]
   872f0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   872f4:	4413      	add	r3, r2
   872f6:	4699      	mov	r9, r3
   872f8:	e00f      	b.n	8731a <_dtoa_r+0x8da>
   872fa:	4632      	mov	r2, r6
   872fc:	463b      	mov	r3, r7
   872fe:	2000      	movs	r0, #0
   87300:	4969      	ldr	r1, [pc, #420]	; (874a8 <_dtoa_r+0xa68>)
   87302:	f7fd f8ef 	bl	844e4 <__aeabi_dsub>
   87306:	4652      	mov	r2, sl
   87308:	465b      	mov	r3, fp
   8730a:	f001 fe41 	bl	88f90 <__aeabi_dcmplt>
   8730e:	2800      	cmp	r0, #0
   87310:	f040 8256 	bne.w	877c0 <_dtoa_r+0xd80>
   87314:	454d      	cmp	r5, r9
   87316:	f000 80f9 	beq.w	8750c <_dtoa_r+0xacc>
   8731a:	4650      	mov	r0, sl
   8731c:	4659      	mov	r1, fp
   8731e:	2200      	movs	r2, #0
   87320:	4b64      	ldr	r3, [pc, #400]	; (874b4 <_dtoa_r+0xa74>)
   87322:	f7fd fa93 	bl	8484c <__aeabi_dmul>
   87326:	2200      	movs	r2, #0
   87328:	4b62      	ldr	r3, [pc, #392]	; (874b4 <_dtoa_r+0xa74>)
   8732a:	4682      	mov	sl, r0
   8732c:	468b      	mov	fp, r1
   8732e:	4630      	mov	r0, r6
   87330:	4639      	mov	r1, r7
   87332:	f7fd fa8b 	bl	8484c <__aeabi_dmul>
   87336:	460f      	mov	r7, r1
   87338:	4606      	mov	r6, r0
   8733a:	f001 fe67 	bl	8900c <__aeabi_d2iz>
   8733e:	4680      	mov	r8, r0
   87340:	f7fd fa1e 	bl	84780 <__aeabi_i2d>
   87344:	4602      	mov	r2, r0
   87346:	460b      	mov	r3, r1
   87348:	4630      	mov	r0, r6
   8734a:	4639      	mov	r1, r7
   8734c:	f7fd f8ca 	bl	844e4 <__aeabi_dsub>
   87350:	f108 0830 	add.w	r8, r8, #48	; 0x30
   87354:	fa5f f888 	uxtb.w	r8, r8
   87358:	f805 8b01 	strb.w	r8, [r5], #1
   8735c:	4652      	mov	r2, sl
   8735e:	465b      	mov	r3, fp
   87360:	4606      	mov	r6, r0
   87362:	460f      	mov	r7, r1
   87364:	f001 fe14 	bl	88f90 <__aeabi_dcmplt>
   87368:	2800      	cmp	r0, #0
   8736a:	d0c6      	beq.n	872fa <_dtoa_r+0x8ba>
   8736c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87370:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87372:	9302      	str	r3, [sp, #8]
   87374:	e523      	b.n	86dbe <_dtoa_r+0x37e>
   87376:	2300      	movs	r3, #0
   87378:	930b      	str	r3, [sp, #44]	; 0x2c
   8737a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8737c:	2b00      	cmp	r3, #0
   8737e:	f340 80dd 	ble.w	8753c <_dtoa_r+0xafc>
   87382:	461f      	mov	r7, r3
   87384:	461e      	mov	r6, r3
   87386:	930f      	str	r3, [sp, #60]	; 0x3c
   87388:	9307      	str	r3, [sp, #28]
   8738a:	e6f6      	b.n	8717a <_dtoa_r+0x73a>
   8738c:	2301      	movs	r3, #1
   8738e:	930b      	str	r3, [sp, #44]	; 0x2c
   87390:	e7f3      	b.n	8737a <_dtoa_r+0x93a>
   87392:	f1ba 0f00 	cmp.w	sl, #0
   87396:	f47f ada7 	bne.w	86ee8 <_dtoa_r+0x4a8>
   8739a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8739e:	2b00      	cmp	r3, #0
   873a0:	f47f adbc 	bne.w	86f1c <_dtoa_r+0x4dc>
   873a4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   873a8:	0d3f      	lsrs	r7, r7, #20
   873aa:	053f      	lsls	r7, r7, #20
   873ac:	2f00      	cmp	r7, #0
   873ae:	f000 820d 	beq.w	877cc <_dtoa_r+0xd8c>
   873b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   873b4:	3301      	adds	r3, #1
   873b6:	930a      	str	r3, [sp, #40]	; 0x28
   873b8:	9b08      	ldr	r3, [sp, #32]
   873ba:	3301      	adds	r3, #1
   873bc:	9308      	str	r3, [sp, #32]
   873be:	2301      	movs	r3, #1
   873c0:	930c      	str	r3, [sp, #48]	; 0x30
   873c2:	e5ad      	b.n	86f20 <_dtoa_r+0x4e0>
   873c4:	9b07      	ldr	r3, [sp, #28]
   873c6:	2b00      	cmp	r3, #0
   873c8:	f73f ac48 	bgt.w	86c5c <_dtoa_r+0x21c>
   873cc:	f040 8222 	bne.w	87814 <_dtoa_r+0xdd4>
   873d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   873d4:	2200      	movs	r2, #0
   873d6:	4b38      	ldr	r3, [pc, #224]	; (874b8 <_dtoa_r+0xa78>)
   873d8:	f7fd fa38 	bl	8484c <__aeabi_dmul>
   873dc:	4652      	mov	r2, sl
   873de:	465b      	mov	r3, fp
   873e0:	f001 fdea 	bl	88fb8 <__aeabi_dcmpge>
   873e4:	f8dd 801c 	ldr.w	r8, [sp, #28]
   873e8:	4646      	mov	r6, r8
   873ea:	2800      	cmp	r0, #0
   873ec:	d041      	beq.n	87472 <_dtoa_r+0xa32>
   873ee:	9b25      	ldr	r3, [sp, #148]	; 0x94
   873f0:	9d04      	ldr	r5, [sp, #16]
   873f2:	43db      	mvns	r3, r3
   873f4:	9302      	str	r3, [sp, #8]
   873f6:	4641      	mov	r1, r8
   873f8:	4620      	mov	r0, r4
   873fa:	f000 fdff 	bl	87ffc <_Bfree>
   873fe:	2e00      	cmp	r6, #0
   87400:	f43f acdd 	beq.w	86dbe <_dtoa_r+0x37e>
   87404:	e6a7      	b.n	87156 <_dtoa_r+0x716>
   87406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87408:	4649      	mov	r1, r9
   8740a:	4620      	mov	r0, r4
   8740c:	f000 ff2e 	bl	8826c <__pow5mult>
   87410:	4681      	mov	r9, r0
   87412:	e557      	b.n	86ec4 <_dtoa_r+0x484>
   87414:	9a14      	ldr	r2, [sp, #80]	; 0x50
   87416:	2a00      	cmp	r2, #0
   87418:	f000 8188 	beq.w	8772c <_dtoa_r+0xcec>
   8741c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   87420:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87422:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87424:	e4f2      	b.n	86e0c <_dtoa_r+0x3cc>
   87426:	f1ba 0f00 	cmp.w	sl, #0
   8742a:	f47f ad77 	bne.w	86f1c <_dtoa_r+0x4dc>
   8742e:	e7b4      	b.n	8739a <_dtoa_r+0x95a>
   87430:	f000 fdee 	bl	88010 <__multadd>
   87434:	4647      	mov	r7, r8
   87436:	4606      	mov	r6, r0
   87438:	4683      	mov	fp, r0
   8743a:	e5c0      	b.n	86fbe <_dtoa_r+0x57e>
   8743c:	4601      	mov	r1, r0
   8743e:	4620      	mov	r0, r4
   87440:	9308      	str	r3, [sp, #32]
   87442:	f000 fddb 	bl	87ffc <_Bfree>
   87446:	2201      	movs	r2, #1
   87448:	9b08      	ldr	r3, [sp, #32]
   8744a:	e5e2      	b.n	87012 <_dtoa_r+0x5d2>
   8744c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8744e:	2b02      	cmp	r3, #2
   87450:	f77f ad98 	ble.w	86f84 <_dtoa_r+0x544>
   87454:	9b07      	ldr	r3, [sp, #28]
   87456:	2b00      	cmp	r3, #0
   87458:	d1c9      	bne.n	873ee <_dtoa_r+0x9ae>
   8745a:	4641      	mov	r1, r8
   8745c:	2205      	movs	r2, #5
   8745e:	4620      	mov	r0, r4
   87460:	f000 fdd6 	bl	88010 <__multadd>
   87464:	4601      	mov	r1, r0
   87466:	4680      	mov	r8, r0
   87468:	4648      	mov	r0, r9
   8746a:	f000 ff9f 	bl	883ac <__mcmp>
   8746e:	2800      	cmp	r0, #0
   87470:	ddbd      	ble.n	873ee <_dtoa_r+0x9ae>
   87472:	2331      	movs	r3, #49	; 0x31
   87474:	9a02      	ldr	r2, [sp, #8]
   87476:	9904      	ldr	r1, [sp, #16]
   87478:	3201      	adds	r2, #1
   8747a:	9202      	str	r2, [sp, #8]
   8747c:	700b      	strb	r3, [r1, #0]
   8747e:	1c4d      	adds	r5, r1, #1
   87480:	e7b9      	b.n	873f6 <_dtoa_r+0x9b6>
   87482:	2331      	movs	r3, #49	; 0x31
   87484:	9a02      	ldr	r2, [sp, #8]
   87486:	3201      	adds	r2, #1
   87488:	9202      	str	r2, [sp, #8]
   8748a:	9a04      	ldr	r2, [sp, #16]
   8748c:	7013      	strb	r3, [r2, #0]
   8748e:	e652      	b.n	87136 <_dtoa_r+0x6f6>
   87490:	2301      	movs	r3, #1
   87492:	930b      	str	r3, [sp, #44]	; 0x2c
   87494:	e666      	b.n	87164 <_dtoa_r+0x724>
   87496:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8749a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8749c:	e48f      	b.n	86dbe <_dtoa_r+0x37e>
   8749e:	bf00      	nop
   874a0:	00089538 	.word	0x00089538
   874a4:	00089510 	.word	0x00089510
   874a8:	3ff00000 	.word	0x3ff00000
   874ac:	401c0000 	.word	0x401c0000
   874b0:	3fe00000 	.word	0x3fe00000
   874b4:	40240000 	.word	0x40240000
   874b8:	40140000 	.word	0x40140000
   874bc:	4650      	mov	r0, sl
   874be:	f7fd f95f 	bl	84780 <__aeabi_i2d>
   874c2:	463a      	mov	r2, r7
   874c4:	4643      	mov	r3, r8
   874c6:	f7fd f9c1 	bl	8484c <__aeabi_dmul>
   874ca:	2200      	movs	r2, #0
   874cc:	4bc1      	ldr	r3, [pc, #772]	; (877d4 <_dtoa_r+0xd94>)
   874ce:	f7fd f80b 	bl	844e8 <__adddf3>
   874d2:	4605      	mov	r5, r0
   874d4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   874d8:	4641      	mov	r1, r8
   874da:	2200      	movs	r2, #0
   874dc:	4bbe      	ldr	r3, [pc, #760]	; (877d8 <_dtoa_r+0xd98>)
   874de:	4638      	mov	r0, r7
   874e0:	f7fd f800 	bl	844e4 <__aeabi_dsub>
   874e4:	462a      	mov	r2, r5
   874e6:	4633      	mov	r3, r6
   874e8:	4682      	mov	sl, r0
   874ea:	468b      	mov	fp, r1
   874ec:	f001 fd6e 	bl	88fcc <__aeabi_dcmpgt>
   874f0:	4680      	mov	r8, r0
   874f2:	2800      	cmp	r0, #0
   874f4:	f040 8110 	bne.w	87718 <_dtoa_r+0xcd8>
   874f8:	462a      	mov	r2, r5
   874fa:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   874fe:	4650      	mov	r0, sl
   87500:	4659      	mov	r1, fp
   87502:	f001 fd45 	bl	88f90 <__aeabi_dcmplt>
   87506:	b118      	cbz	r0, 87510 <_dtoa_r+0xad0>
   87508:	4646      	mov	r6, r8
   8750a:	e770      	b.n	873ee <_dtoa_r+0x9ae>
   8750c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87510:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   87514:	f7ff bb8f 	b.w	86c36 <_dtoa_r+0x1f6>
   87518:	9804      	ldr	r0, [sp, #16]
   8751a:	f7ff bac0 	b.w	86a9e <_dtoa_r+0x5e>
   8751e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87520:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87522:	1afb      	subs	r3, r7, r3
   87524:	441a      	add	r2, r3
   87526:	970c      	str	r7, [sp, #48]	; 0x30
   87528:	920d      	str	r2, [sp, #52]	; 0x34
   8752a:	2700      	movs	r7, #0
   8752c:	e468      	b.n	86e00 <_dtoa_r+0x3c0>
   8752e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   87532:	f04f 0a02 	mov.w	sl, #2
   87536:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   8753a:	e656      	b.n	871ea <_dtoa_r+0x7aa>
   8753c:	2100      	movs	r1, #0
   8753e:	2301      	movs	r3, #1
   87540:	4620      	mov	r0, r4
   87542:	6461      	str	r1, [r4, #68]	; 0x44
   87544:	9325      	str	r3, [sp, #148]	; 0x94
   87546:	f000 fd33 	bl	87fb0 <_Balloc>
   8754a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8754c:	9004      	str	r0, [sp, #16]
   8754e:	9307      	str	r3, [sp, #28]
   87550:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87552:	6420      	str	r0, [r4, #64]	; 0x40
   87554:	930f      	str	r3, [sp, #60]	; 0x3c
   87556:	e627      	b.n	871a8 <_dtoa_r+0x768>
   87558:	2a00      	cmp	r2, #0
   8755a:	46d0      	mov	r8, sl
   8755c:	f8cd b020 	str.w	fp, [sp, #32]
   87560:	469a      	mov	sl, r3
   87562:	dd11      	ble.n	87588 <_dtoa_r+0xb48>
   87564:	4649      	mov	r1, r9
   87566:	2201      	movs	r2, #1
   87568:	4620      	mov	r0, r4
   8756a:	f000 fecf 	bl	8830c <__lshift>
   8756e:	4641      	mov	r1, r8
   87570:	4681      	mov	r9, r0
   87572:	f000 ff1b 	bl	883ac <__mcmp>
   87576:	2800      	cmp	r0, #0
   87578:	f340 8145 	ble.w	87806 <_dtoa_r+0xdc6>
   8757c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   87580:	f000 8105 	beq.w	8778e <_dtoa_r+0xd4e>
   87584:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   87588:	46b3      	mov	fp, r6
   8758a:	f887 a000 	strb.w	sl, [r7]
   8758e:	1c7d      	adds	r5, r7, #1
   87590:	9e08      	ldr	r6, [sp, #32]
   87592:	e5d0      	b.n	87136 <_dtoa_r+0x6f6>
   87594:	d104      	bne.n	875a0 <_dtoa_r+0xb60>
   87596:	f01a 0f01 	tst.w	sl, #1
   8759a:	d001      	beq.n	875a0 <_dtoa_r+0xb60>
   8759c:	e5bb      	b.n	87116 <_dtoa_r+0x6d6>
   8759e:	4615      	mov	r5, r2
   875a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   875a4:	1e6a      	subs	r2, r5, #1
   875a6:	2b30      	cmp	r3, #48	; 0x30
   875a8:	d0f9      	beq.n	8759e <_dtoa_r+0xb5e>
   875aa:	e5c4      	b.n	87136 <_dtoa_r+0x6f6>
   875ac:	2230      	movs	r2, #48	; 0x30
   875ae:	9904      	ldr	r1, [sp, #16]
   875b0:	700a      	strb	r2, [r1, #0]
   875b2:	9a02      	ldr	r2, [sp, #8]
   875b4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   875b8:	3201      	adds	r2, #1
   875ba:	9202      	str	r2, [sp, #8]
   875bc:	f7ff bbfb 	b.w	86db6 <_dtoa_r+0x376>
   875c0:	f000 80bb 	beq.w	8773a <_dtoa_r+0xcfa>
   875c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   875c8:	9b02      	ldr	r3, [sp, #8]
   875ca:	f04f 0a02 	mov.w	sl, #2
   875ce:	425d      	negs	r5, r3
   875d0:	4b82      	ldr	r3, [pc, #520]	; (877dc <_dtoa_r+0xd9c>)
   875d2:	f005 020f 	and.w	r2, r5, #15
   875d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   875da:	e9d3 2300 	ldrd	r2, r3, [r3]
   875de:	f7fd f935 	bl	8484c <__aeabi_dmul>
   875e2:	112d      	asrs	r5, r5, #4
   875e4:	4607      	mov	r7, r0
   875e6:	4688      	mov	r8, r1
   875e8:	f43f ae1a 	beq.w	87220 <_dtoa_r+0x7e0>
   875ec:	4e7c      	ldr	r6, [pc, #496]	; (877e0 <_dtoa_r+0xda0>)
   875ee:	07eb      	lsls	r3, r5, #31
   875f0:	d509      	bpl.n	87606 <_dtoa_r+0xbc6>
   875f2:	e9d6 2300 	ldrd	r2, r3, [r6]
   875f6:	4638      	mov	r0, r7
   875f8:	4641      	mov	r1, r8
   875fa:	f7fd f927 	bl	8484c <__aeabi_dmul>
   875fe:	4607      	mov	r7, r0
   87600:	4688      	mov	r8, r1
   87602:	f10a 0a01 	add.w	sl, sl, #1
   87606:	106d      	asrs	r5, r5, #1
   87608:	f106 0608 	add.w	r6, r6, #8
   8760c:	d1ef      	bne.n	875ee <_dtoa_r+0xbae>
   8760e:	e607      	b.n	87220 <_dtoa_r+0x7e0>
   87610:	6871      	ldr	r1, [r6, #4]
   87612:	4620      	mov	r0, r4
   87614:	f000 fccc 	bl	87fb0 <_Balloc>
   87618:	4605      	mov	r5, r0
   8761a:	6933      	ldr	r3, [r6, #16]
   8761c:	f106 010c 	add.w	r1, r6, #12
   87620:	3302      	adds	r3, #2
   87622:	009a      	lsls	r2, r3, #2
   87624:	300c      	adds	r0, #12
   87626:	f000 fc41 	bl	87eac <memcpy>
   8762a:	4629      	mov	r1, r5
   8762c:	2201      	movs	r2, #1
   8762e:	4620      	mov	r0, r4
   87630:	f000 fe6c 	bl	8830c <__lshift>
   87634:	9008      	str	r0, [sp, #32]
   87636:	e4b6      	b.n	86fa6 <_dtoa_r+0x566>
   87638:	2b39      	cmp	r3, #57	; 0x39
   8763a:	f8cd b020 	str.w	fp, [sp, #32]
   8763e:	46d0      	mov	r8, sl
   87640:	f000 80a5 	beq.w	8778e <_dtoa_r+0xd4e>
   87644:	f103 0a01 	add.w	sl, r3, #1
   87648:	46b3      	mov	fp, r6
   8764a:	f887 a000 	strb.w	sl, [r7]
   8764e:	1c7d      	adds	r5, r7, #1
   87650:	9e08      	ldr	r6, [sp, #32]
   87652:	e570      	b.n	87136 <_dtoa_r+0x6f6>
   87654:	465a      	mov	r2, fp
   87656:	46d0      	mov	r8, sl
   87658:	46b3      	mov	fp, r6
   8765a:	469a      	mov	sl, r3
   8765c:	4616      	mov	r6, r2
   8765e:	e54e      	b.n	870fe <_dtoa_r+0x6be>
   87660:	9812      	ldr	r0, [sp, #72]	; 0x48
   87662:	495e      	ldr	r1, [pc, #376]	; (877dc <_dtoa_r+0xd9c>)
   87664:	462a      	mov	r2, r5
   87666:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8766a:	4633      	mov	r3, r6
   8766c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   87670:	f7fd f8ec 	bl	8484c <__aeabi_dmul>
   87674:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   87678:	4638      	mov	r0, r7
   8767a:	4641      	mov	r1, r8
   8767c:	f001 fcc6 	bl	8900c <__aeabi_d2iz>
   87680:	4605      	mov	r5, r0
   87682:	f7fd f87d 	bl	84780 <__aeabi_i2d>
   87686:	4602      	mov	r2, r0
   87688:	460b      	mov	r3, r1
   8768a:	4638      	mov	r0, r7
   8768c:	4641      	mov	r1, r8
   8768e:	f7fc ff29 	bl	844e4 <__aeabi_dsub>
   87692:	4606      	mov	r6, r0
   87694:	9812      	ldr	r0, [sp, #72]	; 0x48
   87696:	9a04      	ldr	r2, [sp, #16]
   87698:	3530      	adds	r5, #48	; 0x30
   8769a:	2801      	cmp	r0, #1
   8769c:	7015      	strb	r5, [r2, #0]
   8769e:	460f      	mov	r7, r1
   876a0:	f102 0501 	add.w	r5, r2, #1
   876a4:	d026      	beq.n	876f4 <_dtoa_r+0xcb4>
   876a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   876a8:	9a04      	ldr	r2, [sp, #16]
   876aa:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   876ae:	4413      	add	r3, r2
   876b0:	f04f 0a00 	mov.w	sl, #0
   876b4:	4699      	mov	r9, r3
   876b6:	f8df b130 	ldr.w	fp, [pc, #304]	; 877e8 <_dtoa_r+0xda8>
   876ba:	4652      	mov	r2, sl
   876bc:	465b      	mov	r3, fp
   876be:	4630      	mov	r0, r6
   876c0:	4639      	mov	r1, r7
   876c2:	f7fd f8c3 	bl	8484c <__aeabi_dmul>
   876c6:	460f      	mov	r7, r1
   876c8:	4606      	mov	r6, r0
   876ca:	f001 fc9f 	bl	8900c <__aeabi_d2iz>
   876ce:	4680      	mov	r8, r0
   876d0:	f7fd f856 	bl	84780 <__aeabi_i2d>
   876d4:	4602      	mov	r2, r0
   876d6:	460b      	mov	r3, r1
   876d8:	4630      	mov	r0, r6
   876da:	4639      	mov	r1, r7
   876dc:	f7fc ff02 	bl	844e4 <__aeabi_dsub>
   876e0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   876e4:	f805 8b01 	strb.w	r8, [r5], #1
   876e8:	454d      	cmp	r5, r9
   876ea:	4606      	mov	r6, r0
   876ec:	460f      	mov	r7, r1
   876ee:	d1e4      	bne.n	876ba <_dtoa_r+0xc7a>
   876f0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   876f4:	2200      	movs	r2, #0
   876f6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   876fa:	4b3a      	ldr	r3, [pc, #232]	; (877e4 <_dtoa_r+0xda4>)
   876fc:	f7fc fef4 	bl	844e8 <__adddf3>
   87700:	4632      	mov	r2, r6
   87702:	463b      	mov	r3, r7
   87704:	f001 fc44 	bl	88f90 <__aeabi_dcmplt>
   87708:	2800      	cmp	r0, #0
   8770a:	d046      	beq.n	8779a <_dtoa_r+0xd5a>
   8770c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8770e:	9302      	str	r3, [sp, #8]
   87710:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87714:	f7ff bb42 	b.w	86d9c <_dtoa_r+0x35c>
   87718:	f04f 0800 	mov.w	r8, #0
   8771c:	4646      	mov	r6, r8
   8771e:	e6a8      	b.n	87472 <_dtoa_r+0xa32>
   87720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87722:	9a07      	ldr	r2, [sp, #28]
   87724:	1a9d      	subs	r5, r3, r2
   87726:	2300      	movs	r3, #0
   87728:	f7ff bb70 	b.w	86e0c <_dtoa_r+0x3cc>
   8772c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8772e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87730:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   87734:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87736:	f7ff bb69 	b.w	86e0c <_dtoa_r+0x3cc>
   8773a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   8773e:	f04f 0a02 	mov.w	sl, #2
   87742:	e56d      	b.n	87220 <_dtoa_r+0x7e0>
   87744:	9b07      	ldr	r3, [sp, #28]
   87746:	2b00      	cmp	r3, #0
   87748:	f43f aeb8 	beq.w	874bc <_dtoa_r+0xa7c>
   8774c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8774e:	2b00      	cmp	r3, #0
   87750:	f77f aede 	ble.w	87510 <_dtoa_r+0xad0>
   87754:	2200      	movs	r2, #0
   87756:	4b24      	ldr	r3, [pc, #144]	; (877e8 <_dtoa_r+0xda8>)
   87758:	4638      	mov	r0, r7
   8775a:	4641      	mov	r1, r8
   8775c:	f7fd f876 	bl	8484c <__aeabi_dmul>
   87760:	4607      	mov	r7, r0
   87762:	4688      	mov	r8, r1
   87764:	f10a 0001 	add.w	r0, sl, #1
   87768:	f7fd f80a 	bl	84780 <__aeabi_i2d>
   8776c:	463a      	mov	r2, r7
   8776e:	4643      	mov	r3, r8
   87770:	f7fd f86c 	bl	8484c <__aeabi_dmul>
   87774:	2200      	movs	r2, #0
   87776:	4b17      	ldr	r3, [pc, #92]	; (877d4 <_dtoa_r+0xd94>)
   87778:	f7fc feb6 	bl	844e8 <__adddf3>
   8777c:	9a02      	ldr	r2, [sp, #8]
   8777e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87780:	3a01      	subs	r2, #1
   87782:	4605      	mov	r5, r0
   87784:	9215      	str	r2, [sp, #84]	; 0x54
   87786:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8778a:	9312      	str	r3, [sp, #72]	; 0x48
   8778c:	e569      	b.n	87262 <_dtoa_r+0x822>
   8778e:	2239      	movs	r2, #57	; 0x39
   87790:	46b3      	mov	fp, r6
   87792:	703a      	strb	r2, [r7, #0]
   87794:	9e08      	ldr	r6, [sp, #32]
   87796:	1c7d      	adds	r5, r7, #1
   87798:	e4bf      	b.n	8711a <_dtoa_r+0x6da>
   8779a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8779e:	2000      	movs	r0, #0
   877a0:	4910      	ldr	r1, [pc, #64]	; (877e4 <_dtoa_r+0xda4>)
   877a2:	f7fc fe9f 	bl	844e4 <__aeabi_dsub>
   877a6:	4632      	mov	r2, r6
   877a8:	463b      	mov	r3, r7
   877aa:	f001 fc0f 	bl	88fcc <__aeabi_dcmpgt>
   877ae:	b908      	cbnz	r0, 877b4 <_dtoa_r+0xd74>
   877b0:	e6ae      	b.n	87510 <_dtoa_r+0xad0>
   877b2:	4615      	mov	r5, r2
   877b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   877b8:	1e6a      	subs	r2, r5, #1
   877ba:	2b30      	cmp	r3, #48	; 0x30
   877bc:	d0f9      	beq.n	877b2 <_dtoa_r+0xd72>
   877be:	e5d7      	b.n	87370 <_dtoa_r+0x930>
   877c0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   877c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   877c6:	9302      	str	r3, [sp, #8]
   877c8:	f7ff bae8 	b.w	86d9c <_dtoa_r+0x35c>
   877cc:	970c      	str	r7, [sp, #48]	; 0x30
   877ce:	f7ff bba7 	b.w	86f20 <_dtoa_r+0x4e0>
   877d2:	bf00      	nop
   877d4:	401c0000 	.word	0x401c0000
   877d8:	40140000 	.word	0x40140000
   877dc:	00089538 	.word	0x00089538
   877e0:	00089510 	.word	0x00089510
   877e4:	3fe00000 	.word	0x3fe00000
   877e8:	40240000 	.word	0x40240000
   877ec:	2b39      	cmp	r3, #57	; 0x39
   877ee:	f8cd b020 	str.w	fp, [sp, #32]
   877f2:	46d0      	mov	r8, sl
   877f4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   877f8:	469a      	mov	sl, r3
   877fa:	d0c8      	beq.n	8778e <_dtoa_r+0xd4e>
   877fc:	f1bb 0f00 	cmp.w	fp, #0
   87800:	f73f aec0 	bgt.w	87584 <_dtoa_r+0xb44>
   87804:	e6c0      	b.n	87588 <_dtoa_r+0xb48>
   87806:	f47f aebf 	bne.w	87588 <_dtoa_r+0xb48>
   8780a:	f01a 0f01 	tst.w	sl, #1
   8780e:	f43f aebb 	beq.w	87588 <_dtoa_r+0xb48>
   87812:	e6b3      	b.n	8757c <_dtoa_r+0xb3c>
   87814:	f04f 0800 	mov.w	r8, #0
   87818:	4646      	mov	r6, r8
   8781a:	e5e8      	b.n	873ee <_dtoa_r+0x9ae>
   8781c:	4631      	mov	r1, r6
   8781e:	2300      	movs	r3, #0
   87820:	220a      	movs	r2, #10
   87822:	4620      	mov	r0, r4
   87824:	f000 fbf4 	bl	88010 <__multadd>
   87828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8782a:	4606      	mov	r6, r0
   8782c:	2b00      	cmp	r3, #0
   8782e:	dd07      	ble.n	87840 <_dtoa_r+0xe00>
   87830:	9307      	str	r3, [sp, #28]
   87832:	f7ff bbab 	b.w	86f8c <_dtoa_r+0x54c>
   87836:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87838:	2b02      	cmp	r3, #2
   8783a:	dc1f      	bgt.n	8787c <_dtoa_r+0xe3c>
   8783c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8783e:	e43c      	b.n	870ba <_dtoa_r+0x67a>
   87840:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87842:	2b02      	cmp	r3, #2
   87844:	dc1a      	bgt.n	8787c <_dtoa_r+0xe3c>
   87846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87848:	e7f2      	b.n	87830 <_dtoa_r+0xdf0>
   8784a:	f43f ab81 	beq.w	86f50 <_dtoa_r+0x510>
   8784e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   87852:	e411      	b.n	87078 <_dtoa_r+0x638>
   87854:	2500      	movs	r5, #0
   87856:	4620      	mov	r0, r4
   87858:	6465      	str	r5, [r4, #68]	; 0x44
   8785a:	4629      	mov	r1, r5
   8785c:	f000 fba8 	bl	87fb0 <_Balloc>
   87860:	f04f 33ff 	mov.w	r3, #4294967295
   87864:	9307      	str	r3, [sp, #28]
   87866:	930f      	str	r3, [sp, #60]	; 0x3c
   87868:	2301      	movs	r3, #1
   8786a:	9004      	str	r0, [sp, #16]
   8786c:	9525      	str	r5, [sp, #148]	; 0x94
   8786e:	6420      	str	r0, [r4, #64]	; 0x40
   87870:	930b      	str	r3, [sp, #44]	; 0x2c
   87872:	f7ff b9e0 	b.w	86c36 <_dtoa_r+0x1f6>
   87876:	2501      	movs	r5, #1
   87878:	f7ff b9a8 	b.w	86bcc <_dtoa_r+0x18c>
   8787c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8787e:	9307      	str	r3, [sp, #28]
   87880:	e5e8      	b.n	87454 <_dtoa_r+0xa14>
   87882:	bf00      	nop

00087884 <__libc_fini_array>:
   87884:	b538      	push	{r3, r4, r5, lr}
   87886:	4c0a      	ldr	r4, [pc, #40]	; (878b0 <__libc_fini_array+0x2c>)
   87888:	4d0a      	ldr	r5, [pc, #40]	; (878b4 <__libc_fini_array+0x30>)
   8788a:	1b64      	subs	r4, r4, r5
   8788c:	10a4      	asrs	r4, r4, #2
   8788e:	d00a      	beq.n	878a6 <__libc_fini_array+0x22>
   87890:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   87894:	3b01      	subs	r3, #1
   87896:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8789a:	3c01      	subs	r4, #1
   8789c:	f855 3904 	ldr.w	r3, [r5], #-4
   878a0:	4798      	blx	r3
   878a2:	2c00      	cmp	r4, #0
   878a4:	d1f9      	bne.n	8789a <__libc_fini_array+0x16>
   878a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   878aa:	f001 bf43 	b.w	89734 <_fini>
   878ae:	bf00      	nop
   878b0:	00089744 	.word	0x00089744
   878b4:	00089740 	.word	0x00089740

000878b8 <_localeconv_r>:
   878b8:	4a04      	ldr	r2, [pc, #16]	; (878cc <_localeconv_r+0x14>)
   878ba:	4b05      	ldr	r3, [pc, #20]	; (878d0 <_localeconv_r+0x18>)
   878bc:	6812      	ldr	r2, [r2, #0]
   878be:	6b50      	ldr	r0, [r2, #52]	; 0x34
   878c0:	2800      	cmp	r0, #0
   878c2:	bf08      	it	eq
   878c4:	4618      	moveq	r0, r3
   878c6:	30f0      	adds	r0, #240	; 0xf0
   878c8:	4770      	bx	lr
   878ca:	bf00      	nop
   878cc:	200701a4 	.word	0x200701a4
   878d0:	200709e4 	.word	0x200709e4

000878d4 <__retarget_lock_acquire_recursive>:
   878d4:	4770      	bx	lr
   878d6:	bf00      	nop

000878d8 <__retarget_lock_release_recursive>:
   878d8:	4770      	bx	lr
   878da:	bf00      	nop

000878dc <_malloc_r>:
   878dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   878e0:	f101 060b 	add.w	r6, r1, #11
   878e4:	2e16      	cmp	r6, #22
   878e6:	b083      	sub	sp, #12
   878e8:	4605      	mov	r5, r0
   878ea:	f240 809e 	bls.w	87a2a <_malloc_r+0x14e>
   878ee:	f036 0607 	bics.w	r6, r6, #7
   878f2:	f100 80bd 	bmi.w	87a70 <_malloc_r+0x194>
   878f6:	42b1      	cmp	r1, r6
   878f8:	f200 80ba 	bhi.w	87a70 <_malloc_r+0x194>
   878fc:	f000 fb4c 	bl	87f98 <__malloc_lock>
   87900:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   87904:	f0c0 8285 	bcc.w	87e12 <_malloc_r+0x536>
   87908:	0a73      	lsrs	r3, r6, #9
   8790a:	f000 80b8 	beq.w	87a7e <_malloc_r+0x1a2>
   8790e:	2b04      	cmp	r3, #4
   87910:	f200 816c 	bhi.w	87bec <_malloc_r+0x310>
   87914:	09b3      	lsrs	r3, r6, #6
   87916:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8791a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8791e:	00c1      	lsls	r1, r0, #3
   87920:	4fb8      	ldr	r7, [pc, #736]	; (87c04 <_malloc_r+0x328>)
   87922:	4439      	add	r1, r7
   87924:	684c      	ldr	r4, [r1, #4]
   87926:	3908      	subs	r1, #8
   87928:	42a1      	cmp	r1, r4
   8792a:	d106      	bne.n	8793a <_malloc_r+0x5e>
   8792c:	e00c      	b.n	87948 <_malloc_r+0x6c>
   8792e:	2a00      	cmp	r2, #0
   87930:	f280 80ab 	bge.w	87a8a <_malloc_r+0x1ae>
   87934:	68e4      	ldr	r4, [r4, #12]
   87936:	42a1      	cmp	r1, r4
   87938:	d006      	beq.n	87948 <_malloc_r+0x6c>
   8793a:	6863      	ldr	r3, [r4, #4]
   8793c:	f023 0303 	bic.w	r3, r3, #3
   87940:	1b9a      	subs	r2, r3, r6
   87942:	2a0f      	cmp	r2, #15
   87944:	ddf3      	ble.n	8792e <_malloc_r+0x52>
   87946:	4670      	mov	r0, lr
   87948:	693c      	ldr	r4, [r7, #16]
   8794a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 87c18 <_malloc_r+0x33c>
   8794e:	4574      	cmp	r4, lr
   87950:	f000 819e 	beq.w	87c90 <_malloc_r+0x3b4>
   87954:	6863      	ldr	r3, [r4, #4]
   87956:	f023 0303 	bic.w	r3, r3, #3
   8795a:	1b9a      	subs	r2, r3, r6
   8795c:	2a0f      	cmp	r2, #15
   8795e:	f300 8183 	bgt.w	87c68 <_malloc_r+0x38c>
   87962:	2a00      	cmp	r2, #0
   87964:	f8c7 e014 	str.w	lr, [r7, #20]
   87968:	f8c7 e010 	str.w	lr, [r7, #16]
   8796c:	f280 8091 	bge.w	87a92 <_malloc_r+0x1b6>
   87970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   87974:	f080 8154 	bcs.w	87c20 <_malloc_r+0x344>
   87978:	2201      	movs	r2, #1
   8797a:	08db      	lsrs	r3, r3, #3
   8797c:	6879      	ldr	r1, [r7, #4]
   8797e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   87982:	4413      	add	r3, r2
   87984:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   87988:	fa02 f20c 	lsl.w	r2, r2, ip
   8798c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   87990:	430a      	orrs	r2, r1
   87992:	f1ac 0108 	sub.w	r1, ip, #8
   87996:	60e1      	str	r1, [r4, #12]
   87998:	f8c4 8008 	str.w	r8, [r4, #8]
   8799c:	607a      	str	r2, [r7, #4]
   8799e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   879a2:	f8c8 400c 	str.w	r4, [r8, #12]
   879a6:	2401      	movs	r4, #1
   879a8:	1083      	asrs	r3, r0, #2
   879aa:	409c      	lsls	r4, r3
   879ac:	4294      	cmp	r4, r2
   879ae:	d87d      	bhi.n	87aac <_malloc_r+0x1d0>
   879b0:	4214      	tst	r4, r2
   879b2:	d106      	bne.n	879c2 <_malloc_r+0xe6>
   879b4:	f020 0003 	bic.w	r0, r0, #3
   879b8:	0064      	lsls	r4, r4, #1
   879ba:	4214      	tst	r4, r2
   879bc:	f100 0004 	add.w	r0, r0, #4
   879c0:	d0fa      	beq.n	879b8 <_malloc_r+0xdc>
   879c2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   879c6:	46cc      	mov	ip, r9
   879c8:	4680      	mov	r8, r0
   879ca:	f8dc 300c 	ldr.w	r3, [ip, #12]
   879ce:	459c      	cmp	ip, r3
   879d0:	d107      	bne.n	879e2 <_malloc_r+0x106>
   879d2:	e15f      	b.n	87c94 <_malloc_r+0x3b8>
   879d4:	2a00      	cmp	r2, #0
   879d6:	f280 816d 	bge.w	87cb4 <_malloc_r+0x3d8>
   879da:	68db      	ldr	r3, [r3, #12]
   879dc:	459c      	cmp	ip, r3
   879de:	f000 8159 	beq.w	87c94 <_malloc_r+0x3b8>
   879e2:	6859      	ldr	r1, [r3, #4]
   879e4:	f021 0103 	bic.w	r1, r1, #3
   879e8:	1b8a      	subs	r2, r1, r6
   879ea:	2a0f      	cmp	r2, #15
   879ec:	ddf2      	ble.n	879d4 <_malloc_r+0xf8>
   879ee:	68dc      	ldr	r4, [r3, #12]
   879f0:	f8d3 c008 	ldr.w	ip, [r3, #8]
   879f4:	f046 0801 	orr.w	r8, r6, #1
   879f8:	4628      	mov	r0, r5
   879fa:	441e      	add	r6, r3
   879fc:	f042 0501 	orr.w	r5, r2, #1
   87a00:	f8c3 8004 	str.w	r8, [r3, #4]
   87a04:	f8cc 400c 	str.w	r4, [ip, #12]
   87a08:	f8c4 c008 	str.w	ip, [r4, #8]
   87a0c:	617e      	str	r6, [r7, #20]
   87a0e:	613e      	str	r6, [r7, #16]
   87a10:	f8c6 e00c 	str.w	lr, [r6, #12]
   87a14:	f8c6 e008 	str.w	lr, [r6, #8]
   87a18:	6075      	str	r5, [r6, #4]
   87a1a:	505a      	str	r2, [r3, r1]
   87a1c:	9300      	str	r3, [sp, #0]
   87a1e:	f000 fac1 	bl	87fa4 <__malloc_unlock>
   87a22:	9b00      	ldr	r3, [sp, #0]
   87a24:	f103 0408 	add.w	r4, r3, #8
   87a28:	e01e      	b.n	87a68 <_malloc_r+0x18c>
   87a2a:	2910      	cmp	r1, #16
   87a2c:	d820      	bhi.n	87a70 <_malloc_r+0x194>
   87a2e:	f000 fab3 	bl	87f98 <__malloc_lock>
   87a32:	2610      	movs	r6, #16
   87a34:	2318      	movs	r3, #24
   87a36:	2002      	movs	r0, #2
   87a38:	4f72      	ldr	r7, [pc, #456]	; (87c04 <_malloc_r+0x328>)
   87a3a:	443b      	add	r3, r7
   87a3c:	685c      	ldr	r4, [r3, #4]
   87a3e:	f1a3 0208 	sub.w	r2, r3, #8
   87a42:	4294      	cmp	r4, r2
   87a44:	f000 812f 	beq.w	87ca6 <_malloc_r+0x3ca>
   87a48:	6863      	ldr	r3, [r4, #4]
   87a4a:	68e1      	ldr	r1, [r4, #12]
   87a4c:	f023 0303 	bic.w	r3, r3, #3
   87a50:	4423      	add	r3, r4
   87a52:	685a      	ldr	r2, [r3, #4]
   87a54:	68a6      	ldr	r6, [r4, #8]
   87a56:	f042 0201 	orr.w	r2, r2, #1
   87a5a:	60f1      	str	r1, [r6, #12]
   87a5c:	4628      	mov	r0, r5
   87a5e:	608e      	str	r6, [r1, #8]
   87a60:	605a      	str	r2, [r3, #4]
   87a62:	f000 fa9f 	bl	87fa4 <__malloc_unlock>
   87a66:	3408      	adds	r4, #8
   87a68:	4620      	mov	r0, r4
   87a6a:	b003      	add	sp, #12
   87a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a70:	2400      	movs	r4, #0
   87a72:	230c      	movs	r3, #12
   87a74:	4620      	mov	r0, r4
   87a76:	602b      	str	r3, [r5, #0]
   87a78:	b003      	add	sp, #12
   87a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a7e:	2040      	movs	r0, #64	; 0x40
   87a80:	f44f 7100 	mov.w	r1, #512	; 0x200
   87a84:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   87a88:	e74a      	b.n	87920 <_malloc_r+0x44>
   87a8a:	4423      	add	r3, r4
   87a8c:	685a      	ldr	r2, [r3, #4]
   87a8e:	68e1      	ldr	r1, [r4, #12]
   87a90:	e7e0      	b.n	87a54 <_malloc_r+0x178>
   87a92:	4423      	add	r3, r4
   87a94:	685a      	ldr	r2, [r3, #4]
   87a96:	4628      	mov	r0, r5
   87a98:	f042 0201 	orr.w	r2, r2, #1
   87a9c:	605a      	str	r2, [r3, #4]
   87a9e:	3408      	adds	r4, #8
   87aa0:	f000 fa80 	bl	87fa4 <__malloc_unlock>
   87aa4:	4620      	mov	r0, r4
   87aa6:	b003      	add	sp, #12
   87aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87aac:	68bc      	ldr	r4, [r7, #8]
   87aae:	6863      	ldr	r3, [r4, #4]
   87ab0:	f023 0803 	bic.w	r8, r3, #3
   87ab4:	45b0      	cmp	r8, r6
   87ab6:	d304      	bcc.n	87ac2 <_malloc_r+0x1e6>
   87ab8:	eba8 0306 	sub.w	r3, r8, r6
   87abc:	2b0f      	cmp	r3, #15
   87abe:	f300 8085 	bgt.w	87bcc <_malloc_r+0x2f0>
   87ac2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 87c1c <_malloc_r+0x340>
   87ac6:	4b50      	ldr	r3, [pc, #320]	; (87c08 <_malloc_r+0x32c>)
   87ac8:	f8d9 2000 	ldr.w	r2, [r9]
   87acc:	681b      	ldr	r3, [r3, #0]
   87ace:	3201      	adds	r2, #1
   87ad0:	4433      	add	r3, r6
   87ad2:	eb04 0a08 	add.w	sl, r4, r8
   87ad6:	f000 8154 	beq.w	87d82 <_malloc_r+0x4a6>
   87ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   87ade:	330f      	adds	r3, #15
   87ae0:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   87ae4:	f02b 0b0f 	bic.w	fp, fp, #15
   87ae8:	4659      	mov	r1, fp
   87aea:	4628      	mov	r0, r5
   87aec:	f000 fd5c 	bl	885a8 <_sbrk_r>
   87af0:	1c41      	adds	r1, r0, #1
   87af2:	4602      	mov	r2, r0
   87af4:	f000 80fb 	beq.w	87cee <_malloc_r+0x412>
   87af8:	4582      	cmp	sl, r0
   87afa:	f200 80f6 	bhi.w	87cea <_malloc_r+0x40e>
   87afe:	4b43      	ldr	r3, [pc, #268]	; (87c0c <_malloc_r+0x330>)
   87b00:	6819      	ldr	r1, [r3, #0]
   87b02:	4459      	add	r1, fp
   87b04:	6019      	str	r1, [r3, #0]
   87b06:	f000 814c 	beq.w	87da2 <_malloc_r+0x4c6>
   87b0a:	f8d9 0000 	ldr.w	r0, [r9]
   87b0e:	3001      	adds	r0, #1
   87b10:	bf1b      	ittet	ne
   87b12:	eba2 0a0a 	subne.w	sl, r2, sl
   87b16:	4451      	addne	r1, sl
   87b18:	f8c9 2000 	streq.w	r2, [r9]
   87b1c:	6019      	strne	r1, [r3, #0]
   87b1e:	f012 0107 	ands.w	r1, r2, #7
   87b22:	f000 8114 	beq.w	87d4e <_malloc_r+0x472>
   87b26:	f1c1 0008 	rsb	r0, r1, #8
   87b2a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   87b2e:	4402      	add	r2, r0
   87b30:	3108      	adds	r1, #8
   87b32:	eb02 090b 	add.w	r9, r2, fp
   87b36:	f3c9 090b 	ubfx	r9, r9, #0, #12
   87b3a:	eba1 0909 	sub.w	r9, r1, r9
   87b3e:	4649      	mov	r1, r9
   87b40:	4628      	mov	r0, r5
   87b42:	9301      	str	r3, [sp, #4]
   87b44:	9200      	str	r2, [sp, #0]
   87b46:	f000 fd2f 	bl	885a8 <_sbrk_r>
   87b4a:	1c43      	adds	r3, r0, #1
   87b4c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87b50:	f000 8142 	beq.w	87dd8 <_malloc_r+0x4fc>
   87b54:	1a80      	subs	r0, r0, r2
   87b56:	4448      	add	r0, r9
   87b58:	f040 0001 	orr.w	r0, r0, #1
   87b5c:	6819      	ldr	r1, [r3, #0]
   87b5e:	42bc      	cmp	r4, r7
   87b60:	4449      	add	r1, r9
   87b62:	60ba      	str	r2, [r7, #8]
   87b64:	6019      	str	r1, [r3, #0]
   87b66:	6050      	str	r0, [r2, #4]
   87b68:	d017      	beq.n	87b9a <_malloc_r+0x2be>
   87b6a:	f1b8 0f0f 	cmp.w	r8, #15
   87b6e:	f240 80fa 	bls.w	87d66 <_malloc_r+0x48a>
   87b72:	f04f 0c05 	mov.w	ip, #5
   87b76:	6862      	ldr	r2, [r4, #4]
   87b78:	f1a8 000c 	sub.w	r0, r8, #12
   87b7c:	f020 0007 	bic.w	r0, r0, #7
   87b80:	f002 0201 	and.w	r2, r2, #1
   87b84:	eb04 0e00 	add.w	lr, r4, r0
   87b88:	4302      	orrs	r2, r0
   87b8a:	280f      	cmp	r0, #15
   87b8c:	6062      	str	r2, [r4, #4]
   87b8e:	f8ce c004 	str.w	ip, [lr, #4]
   87b92:	f8ce c008 	str.w	ip, [lr, #8]
   87b96:	f200 8116 	bhi.w	87dc6 <_malloc_r+0x4ea>
   87b9a:	4b1d      	ldr	r3, [pc, #116]	; (87c10 <_malloc_r+0x334>)
   87b9c:	68bc      	ldr	r4, [r7, #8]
   87b9e:	681a      	ldr	r2, [r3, #0]
   87ba0:	4291      	cmp	r1, r2
   87ba2:	bf88      	it	hi
   87ba4:	6019      	strhi	r1, [r3, #0]
   87ba6:	4b1b      	ldr	r3, [pc, #108]	; (87c14 <_malloc_r+0x338>)
   87ba8:	681a      	ldr	r2, [r3, #0]
   87baa:	4291      	cmp	r1, r2
   87bac:	6862      	ldr	r2, [r4, #4]
   87bae:	bf88      	it	hi
   87bb0:	6019      	strhi	r1, [r3, #0]
   87bb2:	f022 0203 	bic.w	r2, r2, #3
   87bb6:	4296      	cmp	r6, r2
   87bb8:	eba2 0306 	sub.w	r3, r2, r6
   87bbc:	d801      	bhi.n	87bc2 <_malloc_r+0x2e6>
   87bbe:	2b0f      	cmp	r3, #15
   87bc0:	dc04      	bgt.n	87bcc <_malloc_r+0x2f0>
   87bc2:	4628      	mov	r0, r5
   87bc4:	f000 f9ee 	bl	87fa4 <__malloc_unlock>
   87bc8:	2400      	movs	r4, #0
   87bca:	e74d      	b.n	87a68 <_malloc_r+0x18c>
   87bcc:	f046 0201 	orr.w	r2, r6, #1
   87bd0:	f043 0301 	orr.w	r3, r3, #1
   87bd4:	4426      	add	r6, r4
   87bd6:	6062      	str	r2, [r4, #4]
   87bd8:	4628      	mov	r0, r5
   87bda:	60be      	str	r6, [r7, #8]
   87bdc:	3408      	adds	r4, #8
   87bde:	6073      	str	r3, [r6, #4]
   87be0:	f000 f9e0 	bl	87fa4 <__malloc_unlock>
   87be4:	4620      	mov	r0, r4
   87be6:	b003      	add	sp, #12
   87be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87bec:	2b14      	cmp	r3, #20
   87bee:	d970      	bls.n	87cd2 <_malloc_r+0x3f6>
   87bf0:	2b54      	cmp	r3, #84	; 0x54
   87bf2:	f200 80a2 	bhi.w	87d3a <_malloc_r+0x45e>
   87bf6:	0b33      	lsrs	r3, r6, #12
   87bf8:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   87bfc:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   87c00:	00c1      	lsls	r1, r0, #3
   87c02:	e68d      	b.n	87920 <_malloc_r+0x44>
   87c04:	200705d4 	.word	0x200705d4
   87c08:	20070e28 	.word	0x20070e28
   87c0c:	20070df8 	.word	0x20070df8
   87c10:	20070e20 	.word	0x20070e20
   87c14:	20070e24 	.word	0x20070e24
   87c18:	200705dc 	.word	0x200705dc
   87c1c:	200709dc 	.word	0x200709dc
   87c20:	0a5a      	lsrs	r2, r3, #9
   87c22:	2a04      	cmp	r2, #4
   87c24:	d95b      	bls.n	87cde <_malloc_r+0x402>
   87c26:	2a14      	cmp	r2, #20
   87c28:	f200 80ae 	bhi.w	87d88 <_malloc_r+0x4ac>
   87c2c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   87c30:	00c9      	lsls	r1, r1, #3
   87c32:	325b      	adds	r2, #91	; 0x5b
   87c34:	eb07 0c01 	add.w	ip, r7, r1
   87c38:	5879      	ldr	r1, [r7, r1]
   87c3a:	f1ac 0c08 	sub.w	ip, ip, #8
   87c3e:	458c      	cmp	ip, r1
   87c40:	f000 8088 	beq.w	87d54 <_malloc_r+0x478>
   87c44:	684a      	ldr	r2, [r1, #4]
   87c46:	f022 0203 	bic.w	r2, r2, #3
   87c4a:	4293      	cmp	r3, r2
   87c4c:	d273      	bcs.n	87d36 <_malloc_r+0x45a>
   87c4e:	6889      	ldr	r1, [r1, #8]
   87c50:	458c      	cmp	ip, r1
   87c52:	d1f7      	bne.n	87c44 <_malloc_r+0x368>
   87c54:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87c58:	687a      	ldr	r2, [r7, #4]
   87c5a:	60e3      	str	r3, [r4, #12]
   87c5c:	f8c4 c008 	str.w	ip, [r4, #8]
   87c60:	609c      	str	r4, [r3, #8]
   87c62:	f8cc 400c 	str.w	r4, [ip, #12]
   87c66:	e69e      	b.n	879a6 <_malloc_r+0xca>
   87c68:	f046 0c01 	orr.w	ip, r6, #1
   87c6c:	f042 0101 	orr.w	r1, r2, #1
   87c70:	4426      	add	r6, r4
   87c72:	f8c4 c004 	str.w	ip, [r4, #4]
   87c76:	4628      	mov	r0, r5
   87c78:	617e      	str	r6, [r7, #20]
   87c7a:	613e      	str	r6, [r7, #16]
   87c7c:	f8c6 e00c 	str.w	lr, [r6, #12]
   87c80:	f8c6 e008 	str.w	lr, [r6, #8]
   87c84:	6071      	str	r1, [r6, #4]
   87c86:	50e2      	str	r2, [r4, r3]
   87c88:	f000 f98c 	bl	87fa4 <__malloc_unlock>
   87c8c:	3408      	adds	r4, #8
   87c8e:	e6eb      	b.n	87a68 <_malloc_r+0x18c>
   87c90:	687a      	ldr	r2, [r7, #4]
   87c92:	e688      	b.n	879a6 <_malloc_r+0xca>
   87c94:	f108 0801 	add.w	r8, r8, #1
   87c98:	f018 0f03 	tst.w	r8, #3
   87c9c:	f10c 0c08 	add.w	ip, ip, #8
   87ca0:	f47f ae93 	bne.w	879ca <_malloc_r+0xee>
   87ca4:	e02d      	b.n	87d02 <_malloc_r+0x426>
   87ca6:	68dc      	ldr	r4, [r3, #12]
   87ca8:	42a3      	cmp	r3, r4
   87caa:	bf08      	it	eq
   87cac:	3002      	addeq	r0, #2
   87cae:	f43f ae4b 	beq.w	87948 <_malloc_r+0x6c>
   87cb2:	e6c9      	b.n	87a48 <_malloc_r+0x16c>
   87cb4:	461c      	mov	r4, r3
   87cb6:	4419      	add	r1, r3
   87cb8:	684a      	ldr	r2, [r1, #4]
   87cba:	68db      	ldr	r3, [r3, #12]
   87cbc:	f854 6f08 	ldr.w	r6, [r4, #8]!
   87cc0:	f042 0201 	orr.w	r2, r2, #1
   87cc4:	604a      	str	r2, [r1, #4]
   87cc6:	4628      	mov	r0, r5
   87cc8:	60f3      	str	r3, [r6, #12]
   87cca:	609e      	str	r6, [r3, #8]
   87ccc:	f000 f96a 	bl	87fa4 <__malloc_unlock>
   87cd0:	e6ca      	b.n	87a68 <_malloc_r+0x18c>
   87cd2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   87cd6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   87cda:	00c1      	lsls	r1, r0, #3
   87cdc:	e620      	b.n	87920 <_malloc_r+0x44>
   87cde:	099a      	lsrs	r2, r3, #6
   87ce0:	f102 0139 	add.w	r1, r2, #57	; 0x39
   87ce4:	00c9      	lsls	r1, r1, #3
   87ce6:	3238      	adds	r2, #56	; 0x38
   87ce8:	e7a4      	b.n	87c34 <_malloc_r+0x358>
   87cea:	42bc      	cmp	r4, r7
   87cec:	d054      	beq.n	87d98 <_malloc_r+0x4bc>
   87cee:	68bc      	ldr	r4, [r7, #8]
   87cf0:	6862      	ldr	r2, [r4, #4]
   87cf2:	f022 0203 	bic.w	r2, r2, #3
   87cf6:	e75e      	b.n	87bb6 <_malloc_r+0x2da>
   87cf8:	f859 3908 	ldr.w	r3, [r9], #-8
   87cfc:	4599      	cmp	r9, r3
   87cfe:	f040 8086 	bne.w	87e0e <_malloc_r+0x532>
   87d02:	f010 0f03 	tst.w	r0, #3
   87d06:	f100 30ff 	add.w	r0, r0, #4294967295
   87d0a:	d1f5      	bne.n	87cf8 <_malloc_r+0x41c>
   87d0c:	687b      	ldr	r3, [r7, #4]
   87d0e:	ea23 0304 	bic.w	r3, r3, r4
   87d12:	607b      	str	r3, [r7, #4]
   87d14:	0064      	lsls	r4, r4, #1
   87d16:	429c      	cmp	r4, r3
   87d18:	f63f aec8 	bhi.w	87aac <_malloc_r+0x1d0>
   87d1c:	2c00      	cmp	r4, #0
   87d1e:	f43f aec5 	beq.w	87aac <_malloc_r+0x1d0>
   87d22:	421c      	tst	r4, r3
   87d24:	4640      	mov	r0, r8
   87d26:	f47f ae4c 	bne.w	879c2 <_malloc_r+0xe6>
   87d2a:	0064      	lsls	r4, r4, #1
   87d2c:	421c      	tst	r4, r3
   87d2e:	f100 0004 	add.w	r0, r0, #4
   87d32:	d0fa      	beq.n	87d2a <_malloc_r+0x44e>
   87d34:	e645      	b.n	879c2 <_malloc_r+0xe6>
   87d36:	468c      	mov	ip, r1
   87d38:	e78c      	b.n	87c54 <_malloc_r+0x378>
   87d3a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   87d3e:	d815      	bhi.n	87d6c <_malloc_r+0x490>
   87d40:	0bf3      	lsrs	r3, r6, #15
   87d42:	f103 0078 	add.w	r0, r3, #120	; 0x78
   87d46:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   87d4a:	00c1      	lsls	r1, r0, #3
   87d4c:	e5e8      	b.n	87920 <_malloc_r+0x44>
   87d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   87d52:	e6ee      	b.n	87b32 <_malloc_r+0x256>
   87d54:	2101      	movs	r1, #1
   87d56:	687b      	ldr	r3, [r7, #4]
   87d58:	1092      	asrs	r2, r2, #2
   87d5a:	fa01 f202 	lsl.w	r2, r1, r2
   87d5e:	431a      	orrs	r2, r3
   87d60:	607a      	str	r2, [r7, #4]
   87d62:	4663      	mov	r3, ip
   87d64:	e779      	b.n	87c5a <_malloc_r+0x37e>
   87d66:	2301      	movs	r3, #1
   87d68:	6053      	str	r3, [r2, #4]
   87d6a:	e72a      	b.n	87bc2 <_malloc_r+0x2e6>
   87d6c:	f240 5254 	movw	r2, #1364	; 0x554
   87d70:	4293      	cmp	r3, r2
   87d72:	d822      	bhi.n	87dba <_malloc_r+0x4de>
   87d74:	0cb3      	lsrs	r3, r6, #18
   87d76:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   87d7a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   87d7e:	00c1      	lsls	r1, r0, #3
   87d80:	e5ce      	b.n	87920 <_malloc_r+0x44>
   87d82:	f103 0b10 	add.w	fp, r3, #16
   87d86:	e6af      	b.n	87ae8 <_malloc_r+0x20c>
   87d88:	2a54      	cmp	r2, #84	; 0x54
   87d8a:	d829      	bhi.n	87de0 <_malloc_r+0x504>
   87d8c:	0b1a      	lsrs	r2, r3, #12
   87d8e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   87d92:	00c9      	lsls	r1, r1, #3
   87d94:	326e      	adds	r2, #110	; 0x6e
   87d96:	e74d      	b.n	87c34 <_malloc_r+0x358>
   87d98:	4b20      	ldr	r3, [pc, #128]	; (87e1c <_malloc_r+0x540>)
   87d9a:	6819      	ldr	r1, [r3, #0]
   87d9c:	4459      	add	r1, fp
   87d9e:	6019      	str	r1, [r3, #0]
   87da0:	e6b3      	b.n	87b0a <_malloc_r+0x22e>
   87da2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   87da6:	2800      	cmp	r0, #0
   87da8:	f47f aeaf 	bne.w	87b0a <_malloc_r+0x22e>
   87dac:	eb08 030b 	add.w	r3, r8, fp
   87db0:	68ba      	ldr	r2, [r7, #8]
   87db2:	f043 0301 	orr.w	r3, r3, #1
   87db6:	6053      	str	r3, [r2, #4]
   87db8:	e6ef      	b.n	87b9a <_malloc_r+0x2be>
   87dba:	207f      	movs	r0, #127	; 0x7f
   87dbc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   87dc0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   87dc4:	e5ac      	b.n	87920 <_malloc_r+0x44>
   87dc6:	f104 0108 	add.w	r1, r4, #8
   87dca:	4628      	mov	r0, r5
   87dcc:	9300      	str	r3, [sp, #0]
   87dce:	f000 fd5d 	bl	8888c <_free_r>
   87dd2:	9b00      	ldr	r3, [sp, #0]
   87dd4:	6819      	ldr	r1, [r3, #0]
   87dd6:	e6e0      	b.n	87b9a <_malloc_r+0x2be>
   87dd8:	2001      	movs	r0, #1
   87dda:	f04f 0900 	mov.w	r9, #0
   87dde:	e6bd      	b.n	87b5c <_malloc_r+0x280>
   87de0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   87de4:	d805      	bhi.n	87df2 <_malloc_r+0x516>
   87de6:	0bda      	lsrs	r2, r3, #15
   87de8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   87dec:	00c9      	lsls	r1, r1, #3
   87dee:	3277      	adds	r2, #119	; 0x77
   87df0:	e720      	b.n	87c34 <_malloc_r+0x358>
   87df2:	f240 5154 	movw	r1, #1364	; 0x554
   87df6:	428a      	cmp	r2, r1
   87df8:	d805      	bhi.n	87e06 <_malloc_r+0x52a>
   87dfa:	0c9a      	lsrs	r2, r3, #18
   87dfc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   87e00:	00c9      	lsls	r1, r1, #3
   87e02:	327c      	adds	r2, #124	; 0x7c
   87e04:	e716      	b.n	87c34 <_malloc_r+0x358>
   87e06:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   87e0a:	227e      	movs	r2, #126	; 0x7e
   87e0c:	e712      	b.n	87c34 <_malloc_r+0x358>
   87e0e:	687b      	ldr	r3, [r7, #4]
   87e10:	e780      	b.n	87d14 <_malloc_r+0x438>
   87e12:	08f0      	lsrs	r0, r6, #3
   87e14:	f106 0308 	add.w	r3, r6, #8
   87e18:	e60e      	b.n	87a38 <_malloc_r+0x15c>
   87e1a:	bf00      	nop
   87e1c:	20070df8 	.word	0x20070df8

00087e20 <memchr>:
   87e20:	0783      	lsls	r3, r0, #30
   87e22:	b470      	push	{r4, r5, r6}
   87e24:	b2cd      	uxtb	r5, r1
   87e26:	d03d      	beq.n	87ea4 <memchr+0x84>
   87e28:	1e54      	subs	r4, r2, #1
   87e2a:	b30a      	cbz	r2, 87e70 <memchr+0x50>
   87e2c:	7803      	ldrb	r3, [r0, #0]
   87e2e:	42ab      	cmp	r3, r5
   87e30:	d01f      	beq.n	87e72 <memchr+0x52>
   87e32:	1c43      	adds	r3, r0, #1
   87e34:	e005      	b.n	87e42 <memchr+0x22>
   87e36:	f114 34ff 	adds.w	r4, r4, #4294967295
   87e3a:	d319      	bcc.n	87e70 <memchr+0x50>
   87e3c:	7802      	ldrb	r2, [r0, #0]
   87e3e:	42aa      	cmp	r2, r5
   87e40:	d017      	beq.n	87e72 <memchr+0x52>
   87e42:	f013 0f03 	tst.w	r3, #3
   87e46:	4618      	mov	r0, r3
   87e48:	f103 0301 	add.w	r3, r3, #1
   87e4c:	d1f3      	bne.n	87e36 <memchr+0x16>
   87e4e:	2c03      	cmp	r4, #3
   87e50:	d811      	bhi.n	87e76 <memchr+0x56>
   87e52:	b34c      	cbz	r4, 87ea8 <memchr+0x88>
   87e54:	7803      	ldrb	r3, [r0, #0]
   87e56:	42ab      	cmp	r3, r5
   87e58:	d00b      	beq.n	87e72 <memchr+0x52>
   87e5a:	4404      	add	r4, r0
   87e5c:	1c43      	adds	r3, r0, #1
   87e5e:	e002      	b.n	87e66 <memchr+0x46>
   87e60:	7802      	ldrb	r2, [r0, #0]
   87e62:	42aa      	cmp	r2, r5
   87e64:	d005      	beq.n	87e72 <memchr+0x52>
   87e66:	429c      	cmp	r4, r3
   87e68:	4618      	mov	r0, r3
   87e6a:	f103 0301 	add.w	r3, r3, #1
   87e6e:	d1f7      	bne.n	87e60 <memchr+0x40>
   87e70:	2000      	movs	r0, #0
   87e72:	bc70      	pop	{r4, r5, r6}
   87e74:	4770      	bx	lr
   87e76:	0209      	lsls	r1, r1, #8
   87e78:	b289      	uxth	r1, r1
   87e7a:	4329      	orrs	r1, r5
   87e7c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   87e80:	6803      	ldr	r3, [r0, #0]
   87e82:	4606      	mov	r6, r0
   87e84:	404b      	eors	r3, r1
   87e86:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   87e8a:	ea22 0303 	bic.w	r3, r2, r3
   87e8e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   87e92:	f100 0004 	add.w	r0, r0, #4
   87e96:	d103      	bne.n	87ea0 <memchr+0x80>
   87e98:	3c04      	subs	r4, #4
   87e9a:	2c03      	cmp	r4, #3
   87e9c:	d8f0      	bhi.n	87e80 <memchr+0x60>
   87e9e:	e7d8      	b.n	87e52 <memchr+0x32>
   87ea0:	4630      	mov	r0, r6
   87ea2:	e7d7      	b.n	87e54 <memchr+0x34>
   87ea4:	4614      	mov	r4, r2
   87ea6:	e7d2      	b.n	87e4e <memchr+0x2e>
   87ea8:	4620      	mov	r0, r4
   87eaa:	e7e2      	b.n	87e72 <memchr+0x52>

00087eac <memcpy>:
   87eac:	4684      	mov	ip, r0
   87eae:	ea41 0300 	orr.w	r3, r1, r0
   87eb2:	f013 0303 	ands.w	r3, r3, #3
   87eb6:	d149      	bne.n	87f4c <memcpy+0xa0>
   87eb8:	3a40      	subs	r2, #64	; 0x40
   87eba:	d323      	bcc.n	87f04 <memcpy+0x58>
   87ebc:	680b      	ldr	r3, [r1, #0]
   87ebe:	6003      	str	r3, [r0, #0]
   87ec0:	684b      	ldr	r3, [r1, #4]
   87ec2:	6043      	str	r3, [r0, #4]
   87ec4:	688b      	ldr	r3, [r1, #8]
   87ec6:	6083      	str	r3, [r0, #8]
   87ec8:	68cb      	ldr	r3, [r1, #12]
   87eca:	60c3      	str	r3, [r0, #12]
   87ecc:	690b      	ldr	r3, [r1, #16]
   87ece:	6103      	str	r3, [r0, #16]
   87ed0:	694b      	ldr	r3, [r1, #20]
   87ed2:	6143      	str	r3, [r0, #20]
   87ed4:	698b      	ldr	r3, [r1, #24]
   87ed6:	6183      	str	r3, [r0, #24]
   87ed8:	69cb      	ldr	r3, [r1, #28]
   87eda:	61c3      	str	r3, [r0, #28]
   87edc:	6a0b      	ldr	r3, [r1, #32]
   87ede:	6203      	str	r3, [r0, #32]
   87ee0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   87ee2:	6243      	str	r3, [r0, #36]	; 0x24
   87ee4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   87ee6:	6283      	str	r3, [r0, #40]	; 0x28
   87ee8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   87eea:	62c3      	str	r3, [r0, #44]	; 0x2c
   87eec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   87eee:	6303      	str	r3, [r0, #48]	; 0x30
   87ef0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   87ef2:	6343      	str	r3, [r0, #52]	; 0x34
   87ef4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   87ef6:	6383      	str	r3, [r0, #56]	; 0x38
   87ef8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   87efa:	63c3      	str	r3, [r0, #60]	; 0x3c
   87efc:	3040      	adds	r0, #64	; 0x40
   87efe:	3140      	adds	r1, #64	; 0x40
   87f00:	3a40      	subs	r2, #64	; 0x40
   87f02:	d2db      	bcs.n	87ebc <memcpy+0x10>
   87f04:	3230      	adds	r2, #48	; 0x30
   87f06:	d30b      	bcc.n	87f20 <memcpy+0x74>
   87f08:	680b      	ldr	r3, [r1, #0]
   87f0a:	6003      	str	r3, [r0, #0]
   87f0c:	684b      	ldr	r3, [r1, #4]
   87f0e:	6043      	str	r3, [r0, #4]
   87f10:	688b      	ldr	r3, [r1, #8]
   87f12:	6083      	str	r3, [r0, #8]
   87f14:	68cb      	ldr	r3, [r1, #12]
   87f16:	60c3      	str	r3, [r0, #12]
   87f18:	3010      	adds	r0, #16
   87f1a:	3110      	adds	r1, #16
   87f1c:	3a10      	subs	r2, #16
   87f1e:	d2f3      	bcs.n	87f08 <memcpy+0x5c>
   87f20:	320c      	adds	r2, #12
   87f22:	d305      	bcc.n	87f30 <memcpy+0x84>
   87f24:	f851 3b04 	ldr.w	r3, [r1], #4
   87f28:	f840 3b04 	str.w	r3, [r0], #4
   87f2c:	3a04      	subs	r2, #4
   87f2e:	d2f9      	bcs.n	87f24 <memcpy+0x78>
   87f30:	3204      	adds	r2, #4
   87f32:	d008      	beq.n	87f46 <memcpy+0x9a>
   87f34:	07d2      	lsls	r2, r2, #31
   87f36:	bf1c      	itt	ne
   87f38:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87f3c:	f800 3b01 	strbne.w	r3, [r0], #1
   87f40:	d301      	bcc.n	87f46 <memcpy+0x9a>
   87f42:	880b      	ldrh	r3, [r1, #0]
   87f44:	8003      	strh	r3, [r0, #0]
   87f46:	4660      	mov	r0, ip
   87f48:	4770      	bx	lr
   87f4a:	bf00      	nop
   87f4c:	2a08      	cmp	r2, #8
   87f4e:	d313      	bcc.n	87f78 <memcpy+0xcc>
   87f50:	078b      	lsls	r3, r1, #30
   87f52:	d0b1      	beq.n	87eb8 <memcpy+0xc>
   87f54:	f010 0303 	ands.w	r3, r0, #3
   87f58:	d0ae      	beq.n	87eb8 <memcpy+0xc>
   87f5a:	f1c3 0304 	rsb	r3, r3, #4
   87f5e:	1ad2      	subs	r2, r2, r3
   87f60:	07db      	lsls	r3, r3, #31
   87f62:	bf1c      	itt	ne
   87f64:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87f68:	f800 3b01 	strbne.w	r3, [r0], #1
   87f6c:	d3a4      	bcc.n	87eb8 <memcpy+0xc>
   87f6e:	f831 3b02 	ldrh.w	r3, [r1], #2
   87f72:	f820 3b02 	strh.w	r3, [r0], #2
   87f76:	e79f      	b.n	87eb8 <memcpy+0xc>
   87f78:	3a04      	subs	r2, #4
   87f7a:	d3d9      	bcc.n	87f30 <memcpy+0x84>
   87f7c:	3a01      	subs	r2, #1
   87f7e:	f811 3b01 	ldrb.w	r3, [r1], #1
   87f82:	f800 3b01 	strb.w	r3, [r0], #1
   87f86:	d2f9      	bcs.n	87f7c <memcpy+0xd0>
   87f88:	780b      	ldrb	r3, [r1, #0]
   87f8a:	7003      	strb	r3, [r0, #0]
   87f8c:	784b      	ldrb	r3, [r1, #1]
   87f8e:	7043      	strb	r3, [r0, #1]
   87f90:	788b      	ldrb	r3, [r1, #2]
   87f92:	7083      	strb	r3, [r0, #2]
   87f94:	4660      	mov	r0, ip
   87f96:	4770      	bx	lr

00087f98 <__malloc_lock>:
   87f98:	4801      	ldr	r0, [pc, #4]	; (87fa0 <__malloc_lock+0x8>)
   87f9a:	f7ff bc9b 	b.w	878d4 <__retarget_lock_acquire_recursive>
   87f9e:	bf00      	nop
   87fa0:	20071000 	.word	0x20071000

00087fa4 <__malloc_unlock>:
   87fa4:	4801      	ldr	r0, [pc, #4]	; (87fac <__malloc_unlock+0x8>)
   87fa6:	f7ff bc97 	b.w	878d8 <__retarget_lock_release_recursive>
   87faa:	bf00      	nop
   87fac:	20071000 	.word	0x20071000

00087fb0 <_Balloc>:
   87fb0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   87fb2:	b570      	push	{r4, r5, r6, lr}
   87fb4:	4605      	mov	r5, r0
   87fb6:	460c      	mov	r4, r1
   87fb8:	b14b      	cbz	r3, 87fce <_Balloc+0x1e>
   87fba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   87fbe:	b180      	cbz	r0, 87fe2 <_Balloc+0x32>
   87fc0:	6802      	ldr	r2, [r0, #0]
   87fc2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   87fc6:	2300      	movs	r3, #0
   87fc8:	6103      	str	r3, [r0, #16]
   87fca:	60c3      	str	r3, [r0, #12]
   87fcc:	bd70      	pop	{r4, r5, r6, pc}
   87fce:	2221      	movs	r2, #33	; 0x21
   87fd0:	2104      	movs	r1, #4
   87fd2:	f000 fbdb 	bl	8878c <_calloc_r>
   87fd6:	64e8      	str	r0, [r5, #76]	; 0x4c
   87fd8:	4603      	mov	r3, r0
   87fda:	2800      	cmp	r0, #0
   87fdc:	d1ed      	bne.n	87fba <_Balloc+0xa>
   87fde:	2000      	movs	r0, #0
   87fe0:	bd70      	pop	{r4, r5, r6, pc}
   87fe2:	2101      	movs	r1, #1
   87fe4:	fa01 f604 	lsl.w	r6, r1, r4
   87fe8:	1d72      	adds	r2, r6, #5
   87fea:	4628      	mov	r0, r5
   87fec:	0092      	lsls	r2, r2, #2
   87fee:	f000 fbcd 	bl	8878c <_calloc_r>
   87ff2:	2800      	cmp	r0, #0
   87ff4:	d0f3      	beq.n	87fde <_Balloc+0x2e>
   87ff6:	6044      	str	r4, [r0, #4]
   87ff8:	6086      	str	r6, [r0, #8]
   87ffa:	e7e4      	b.n	87fc6 <_Balloc+0x16>

00087ffc <_Bfree>:
   87ffc:	b131      	cbz	r1, 8800c <_Bfree+0x10>
   87ffe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88000:	684a      	ldr	r2, [r1, #4]
   88002:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   88006:	6008      	str	r0, [r1, #0]
   88008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8800c:	4770      	bx	lr
   8800e:	bf00      	nop

00088010 <__multadd>:
   88010:	b5f0      	push	{r4, r5, r6, r7, lr}
   88012:	460c      	mov	r4, r1
   88014:	4605      	mov	r5, r0
   88016:	f04f 0e00 	mov.w	lr, #0
   8801a:	690e      	ldr	r6, [r1, #16]
   8801c:	b083      	sub	sp, #12
   8801e:	f101 0714 	add.w	r7, r1, #20
   88022:	6838      	ldr	r0, [r7, #0]
   88024:	f10e 0e01 	add.w	lr, lr, #1
   88028:	b281      	uxth	r1, r0
   8802a:	fb02 3301 	mla	r3, r2, r1, r3
   8802e:	0c01      	lsrs	r1, r0, #16
   88030:	0c18      	lsrs	r0, r3, #16
   88032:	fb02 0101 	mla	r1, r2, r1, r0
   88036:	b29b      	uxth	r3, r3
   88038:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   8803c:	4576      	cmp	r6, lr
   8803e:	f847 3b04 	str.w	r3, [r7], #4
   88042:	ea4f 4311 	mov.w	r3, r1, lsr #16
   88046:	dcec      	bgt.n	88022 <__multadd+0x12>
   88048:	b13b      	cbz	r3, 8805a <__multadd+0x4a>
   8804a:	68a2      	ldr	r2, [r4, #8]
   8804c:	4296      	cmp	r6, r2
   8804e:	da07      	bge.n	88060 <__multadd+0x50>
   88050:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   88054:	3601      	adds	r6, #1
   88056:	6153      	str	r3, [r2, #20]
   88058:	6126      	str	r6, [r4, #16]
   8805a:	4620      	mov	r0, r4
   8805c:	b003      	add	sp, #12
   8805e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88060:	6861      	ldr	r1, [r4, #4]
   88062:	4628      	mov	r0, r5
   88064:	3101      	adds	r1, #1
   88066:	9301      	str	r3, [sp, #4]
   88068:	f7ff ffa2 	bl	87fb0 <_Balloc>
   8806c:	4607      	mov	r7, r0
   8806e:	6922      	ldr	r2, [r4, #16]
   88070:	f104 010c 	add.w	r1, r4, #12
   88074:	3202      	adds	r2, #2
   88076:	0092      	lsls	r2, r2, #2
   88078:	300c      	adds	r0, #12
   8807a:	f7ff ff17 	bl	87eac <memcpy>
   8807e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   88080:	6861      	ldr	r1, [r4, #4]
   88082:	9b01      	ldr	r3, [sp, #4]
   88084:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   88088:	6020      	str	r0, [r4, #0]
   8808a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   8808e:	463c      	mov	r4, r7
   88090:	e7de      	b.n	88050 <__multadd+0x40>
   88092:	bf00      	nop

00088094 <__hi0bits>:
   88094:	0c02      	lsrs	r2, r0, #16
   88096:	0412      	lsls	r2, r2, #16
   88098:	4603      	mov	r3, r0
   8809a:	b9b2      	cbnz	r2, 880ca <__hi0bits+0x36>
   8809c:	0403      	lsls	r3, r0, #16
   8809e:	2010      	movs	r0, #16
   880a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   880a4:	bf04      	itt	eq
   880a6:	021b      	lsleq	r3, r3, #8
   880a8:	3008      	addeq	r0, #8
   880aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   880ae:	bf04      	itt	eq
   880b0:	011b      	lsleq	r3, r3, #4
   880b2:	3004      	addeq	r0, #4
   880b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   880b8:	bf04      	itt	eq
   880ba:	009b      	lsleq	r3, r3, #2
   880bc:	3002      	addeq	r0, #2
   880be:	2b00      	cmp	r3, #0
   880c0:	db02      	blt.n	880c8 <__hi0bits+0x34>
   880c2:	005b      	lsls	r3, r3, #1
   880c4:	d403      	bmi.n	880ce <__hi0bits+0x3a>
   880c6:	2020      	movs	r0, #32
   880c8:	4770      	bx	lr
   880ca:	2000      	movs	r0, #0
   880cc:	e7e8      	b.n	880a0 <__hi0bits+0xc>
   880ce:	3001      	adds	r0, #1
   880d0:	4770      	bx	lr
   880d2:	bf00      	nop

000880d4 <__lo0bits>:
   880d4:	6803      	ldr	r3, [r0, #0]
   880d6:	4601      	mov	r1, r0
   880d8:	f013 0207 	ands.w	r2, r3, #7
   880dc:	d007      	beq.n	880ee <__lo0bits+0x1a>
   880de:	07da      	lsls	r2, r3, #31
   880e0:	d421      	bmi.n	88126 <__lo0bits+0x52>
   880e2:	0798      	lsls	r0, r3, #30
   880e4:	d421      	bmi.n	8812a <__lo0bits+0x56>
   880e6:	089b      	lsrs	r3, r3, #2
   880e8:	600b      	str	r3, [r1, #0]
   880ea:	2002      	movs	r0, #2
   880ec:	4770      	bx	lr
   880ee:	b298      	uxth	r0, r3
   880f0:	b198      	cbz	r0, 8811a <__lo0bits+0x46>
   880f2:	4610      	mov	r0, r2
   880f4:	f013 0fff 	tst.w	r3, #255	; 0xff
   880f8:	bf04      	itt	eq
   880fa:	0a1b      	lsreq	r3, r3, #8
   880fc:	3008      	addeq	r0, #8
   880fe:	071a      	lsls	r2, r3, #28
   88100:	bf04      	itt	eq
   88102:	091b      	lsreq	r3, r3, #4
   88104:	3004      	addeq	r0, #4
   88106:	079a      	lsls	r2, r3, #30
   88108:	bf04      	itt	eq
   8810a:	089b      	lsreq	r3, r3, #2
   8810c:	3002      	addeq	r0, #2
   8810e:	07da      	lsls	r2, r3, #31
   88110:	d407      	bmi.n	88122 <__lo0bits+0x4e>
   88112:	085b      	lsrs	r3, r3, #1
   88114:	d104      	bne.n	88120 <__lo0bits+0x4c>
   88116:	2020      	movs	r0, #32
   88118:	4770      	bx	lr
   8811a:	0c1b      	lsrs	r3, r3, #16
   8811c:	2010      	movs	r0, #16
   8811e:	e7e9      	b.n	880f4 <__lo0bits+0x20>
   88120:	3001      	adds	r0, #1
   88122:	600b      	str	r3, [r1, #0]
   88124:	4770      	bx	lr
   88126:	2000      	movs	r0, #0
   88128:	4770      	bx	lr
   8812a:	085b      	lsrs	r3, r3, #1
   8812c:	600b      	str	r3, [r1, #0]
   8812e:	2001      	movs	r0, #1
   88130:	4770      	bx	lr
   88132:	bf00      	nop

00088134 <__i2b>:
   88134:	b510      	push	{r4, lr}
   88136:	460c      	mov	r4, r1
   88138:	2101      	movs	r1, #1
   8813a:	f7ff ff39 	bl	87fb0 <_Balloc>
   8813e:	2201      	movs	r2, #1
   88140:	6144      	str	r4, [r0, #20]
   88142:	6102      	str	r2, [r0, #16]
   88144:	bd10      	pop	{r4, pc}
   88146:	bf00      	nop

00088148 <__multiply>:
   88148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8814c:	690c      	ldr	r4, [r1, #16]
   8814e:	6915      	ldr	r5, [r2, #16]
   88150:	b083      	sub	sp, #12
   88152:	42ac      	cmp	r4, r5
   88154:	468b      	mov	fp, r1
   88156:	4616      	mov	r6, r2
   88158:	da04      	bge.n	88164 <__multiply+0x1c>
   8815a:	4622      	mov	r2, r4
   8815c:	46b3      	mov	fp, r6
   8815e:	462c      	mov	r4, r5
   88160:	460e      	mov	r6, r1
   88162:	4615      	mov	r5, r2
   88164:	f8db 3008 	ldr.w	r3, [fp, #8]
   88168:	eb04 0805 	add.w	r8, r4, r5
   8816c:	f8db 1004 	ldr.w	r1, [fp, #4]
   88170:	4598      	cmp	r8, r3
   88172:	bfc8      	it	gt
   88174:	3101      	addgt	r1, #1
   88176:	f7ff ff1b 	bl	87fb0 <_Balloc>
   8817a:	f100 0914 	add.w	r9, r0, #20
   8817e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   88182:	45d1      	cmp	r9, sl
   88184:	9000      	str	r0, [sp, #0]
   88186:	d205      	bcs.n	88194 <__multiply+0x4c>
   88188:	464b      	mov	r3, r9
   8818a:	2100      	movs	r1, #0
   8818c:	f843 1b04 	str.w	r1, [r3], #4
   88190:	459a      	cmp	sl, r3
   88192:	d8fb      	bhi.n	8818c <__multiply+0x44>
   88194:	f106 0c14 	add.w	ip, r6, #20
   88198:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   8819c:	f10b 0b14 	add.w	fp, fp, #20
   881a0:	459c      	cmp	ip, r3
   881a2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   881a6:	d24b      	bcs.n	88240 <__multiply+0xf8>
   881a8:	f8cd a004 	str.w	sl, [sp, #4]
   881ac:	469a      	mov	sl, r3
   881ae:	f8dc 5000 	ldr.w	r5, [ip]
   881b2:	b2af      	uxth	r7, r5
   881b4:	b1e7      	cbz	r7, 881f0 <__multiply+0xa8>
   881b6:	464d      	mov	r5, r9
   881b8:	465e      	mov	r6, fp
   881ba:	2100      	movs	r1, #0
   881bc:	f856 2b04 	ldr.w	r2, [r6], #4
   881c0:	6828      	ldr	r0, [r5, #0]
   881c2:	b293      	uxth	r3, r2
   881c4:	b284      	uxth	r4, r0
   881c6:	0c12      	lsrs	r2, r2, #16
   881c8:	fb07 4303 	mla	r3, r7, r3, r4
   881cc:	0c00      	lsrs	r0, r0, #16
   881ce:	fb07 0202 	mla	r2, r7, r2, r0
   881d2:	440b      	add	r3, r1
   881d4:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   881d8:	b29b      	uxth	r3, r3
   881da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   881de:	45b6      	cmp	lr, r6
   881e0:	f845 3b04 	str.w	r3, [r5], #4
   881e4:	ea4f 4111 	mov.w	r1, r1, lsr #16
   881e8:	d8e8      	bhi.n	881bc <__multiply+0x74>
   881ea:	6029      	str	r1, [r5, #0]
   881ec:	f8dc 5000 	ldr.w	r5, [ip]
   881f0:	0c2d      	lsrs	r5, r5, #16
   881f2:	d01d      	beq.n	88230 <__multiply+0xe8>
   881f4:	f8d9 3000 	ldr.w	r3, [r9]
   881f8:	4648      	mov	r0, r9
   881fa:	461c      	mov	r4, r3
   881fc:	4659      	mov	r1, fp
   881fe:	2200      	movs	r2, #0
   88200:	880e      	ldrh	r6, [r1, #0]
   88202:	0c24      	lsrs	r4, r4, #16
   88204:	fb05 4406 	mla	r4, r5, r6, r4
   88208:	b29b      	uxth	r3, r3
   8820a:	4422      	add	r2, r4
   8820c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88210:	f840 3b04 	str.w	r3, [r0], #4
   88214:	f851 3b04 	ldr.w	r3, [r1], #4
   88218:	6804      	ldr	r4, [r0, #0]
   8821a:	0c1b      	lsrs	r3, r3, #16
   8821c:	b2a6      	uxth	r6, r4
   8821e:	fb05 6303 	mla	r3, r5, r3, r6
   88222:	458e      	cmp	lr, r1
   88224:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   88228:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8822c:	d8e8      	bhi.n	88200 <__multiply+0xb8>
   8822e:	6003      	str	r3, [r0, #0]
   88230:	f10c 0c04 	add.w	ip, ip, #4
   88234:	45e2      	cmp	sl, ip
   88236:	f109 0904 	add.w	r9, r9, #4
   8823a:	d8b8      	bhi.n	881ae <__multiply+0x66>
   8823c:	f8dd a004 	ldr.w	sl, [sp, #4]
   88240:	f1b8 0f00 	cmp.w	r8, #0
   88244:	dd0b      	ble.n	8825e <__multiply+0x116>
   88246:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   8824a:	f1aa 0a04 	sub.w	sl, sl, #4
   8824e:	b11b      	cbz	r3, 88258 <__multiply+0x110>
   88250:	e005      	b.n	8825e <__multiply+0x116>
   88252:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   88256:	b913      	cbnz	r3, 8825e <__multiply+0x116>
   88258:	f1b8 0801 	subs.w	r8, r8, #1
   8825c:	d1f9      	bne.n	88252 <__multiply+0x10a>
   8825e:	9800      	ldr	r0, [sp, #0]
   88260:	f8c0 8010 	str.w	r8, [r0, #16]
   88264:	b003      	add	sp, #12
   88266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8826a:	bf00      	nop

0008826c <__pow5mult>:
   8826c:	f012 0303 	ands.w	r3, r2, #3
   88270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88274:	4614      	mov	r4, r2
   88276:	4607      	mov	r7, r0
   88278:	d12e      	bne.n	882d8 <__pow5mult+0x6c>
   8827a:	460d      	mov	r5, r1
   8827c:	10a4      	asrs	r4, r4, #2
   8827e:	d01c      	beq.n	882ba <__pow5mult+0x4e>
   88280:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   88282:	b396      	cbz	r6, 882ea <__pow5mult+0x7e>
   88284:	07e3      	lsls	r3, r4, #31
   88286:	f04f 0800 	mov.w	r8, #0
   8828a:	d406      	bmi.n	8829a <__pow5mult+0x2e>
   8828c:	1064      	asrs	r4, r4, #1
   8828e:	d014      	beq.n	882ba <__pow5mult+0x4e>
   88290:	6830      	ldr	r0, [r6, #0]
   88292:	b1a8      	cbz	r0, 882c0 <__pow5mult+0x54>
   88294:	4606      	mov	r6, r0
   88296:	07e3      	lsls	r3, r4, #31
   88298:	d5f8      	bpl.n	8828c <__pow5mult+0x20>
   8829a:	4632      	mov	r2, r6
   8829c:	4629      	mov	r1, r5
   8829e:	4638      	mov	r0, r7
   882a0:	f7ff ff52 	bl	88148 <__multiply>
   882a4:	b1b5      	cbz	r5, 882d4 <__pow5mult+0x68>
   882a6:	686a      	ldr	r2, [r5, #4]
   882a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   882aa:	1064      	asrs	r4, r4, #1
   882ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   882b0:	6029      	str	r1, [r5, #0]
   882b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   882b6:	4605      	mov	r5, r0
   882b8:	d1ea      	bne.n	88290 <__pow5mult+0x24>
   882ba:	4628      	mov	r0, r5
   882bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   882c0:	4632      	mov	r2, r6
   882c2:	4631      	mov	r1, r6
   882c4:	4638      	mov	r0, r7
   882c6:	f7ff ff3f 	bl	88148 <__multiply>
   882ca:	6030      	str	r0, [r6, #0]
   882cc:	f8c0 8000 	str.w	r8, [r0]
   882d0:	4606      	mov	r6, r0
   882d2:	e7e0      	b.n	88296 <__pow5mult+0x2a>
   882d4:	4605      	mov	r5, r0
   882d6:	e7d9      	b.n	8828c <__pow5mult+0x20>
   882d8:	4a0b      	ldr	r2, [pc, #44]	; (88308 <__pow5mult+0x9c>)
   882da:	3b01      	subs	r3, #1
   882dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   882e0:	2300      	movs	r3, #0
   882e2:	f7ff fe95 	bl	88010 <__multadd>
   882e6:	4605      	mov	r5, r0
   882e8:	e7c8      	b.n	8827c <__pow5mult+0x10>
   882ea:	2101      	movs	r1, #1
   882ec:	4638      	mov	r0, r7
   882ee:	f7ff fe5f 	bl	87fb0 <_Balloc>
   882f2:	f240 2171 	movw	r1, #625	; 0x271
   882f6:	2201      	movs	r2, #1
   882f8:	2300      	movs	r3, #0
   882fa:	6141      	str	r1, [r0, #20]
   882fc:	6102      	str	r2, [r0, #16]
   882fe:	4606      	mov	r6, r0
   88300:	64b8      	str	r0, [r7, #72]	; 0x48
   88302:	6003      	str	r3, [r0, #0]
   88304:	e7be      	b.n	88284 <__pow5mult+0x18>
   88306:	bf00      	nop
   88308:	00089600 	.word	0x00089600

0008830c <__lshift>:
   8830c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88310:	690b      	ldr	r3, [r1, #16]
   88312:	1154      	asrs	r4, r2, #5
   88314:	eb04 0803 	add.w	r8, r4, r3
   88318:	688b      	ldr	r3, [r1, #8]
   8831a:	f108 0501 	add.w	r5, r8, #1
   8831e:	429d      	cmp	r5, r3
   88320:	460e      	mov	r6, r1
   88322:	4691      	mov	r9, r2
   88324:	4607      	mov	r7, r0
   88326:	6849      	ldr	r1, [r1, #4]
   88328:	dd04      	ble.n	88334 <__lshift+0x28>
   8832a:	005b      	lsls	r3, r3, #1
   8832c:	429d      	cmp	r5, r3
   8832e:	f101 0101 	add.w	r1, r1, #1
   88332:	dcfa      	bgt.n	8832a <__lshift+0x1e>
   88334:	4638      	mov	r0, r7
   88336:	f7ff fe3b 	bl	87fb0 <_Balloc>
   8833a:	2c00      	cmp	r4, #0
   8833c:	f100 0314 	add.w	r3, r0, #20
   88340:	dd06      	ble.n	88350 <__lshift+0x44>
   88342:	2100      	movs	r1, #0
   88344:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   88348:	f843 1b04 	str.w	r1, [r3], #4
   8834c:	429a      	cmp	r2, r3
   8834e:	d1fb      	bne.n	88348 <__lshift+0x3c>
   88350:	6934      	ldr	r4, [r6, #16]
   88352:	f106 0114 	add.w	r1, r6, #20
   88356:	f019 091f 	ands.w	r9, r9, #31
   8835a:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8835e:	d01d      	beq.n	8839c <__lshift+0x90>
   88360:	2200      	movs	r2, #0
   88362:	f1c9 0c20 	rsb	ip, r9, #32
   88366:	680c      	ldr	r4, [r1, #0]
   88368:	fa04 f409 	lsl.w	r4, r4, r9
   8836c:	4314      	orrs	r4, r2
   8836e:	f843 4b04 	str.w	r4, [r3], #4
   88372:	f851 2b04 	ldr.w	r2, [r1], #4
   88376:	458e      	cmp	lr, r1
   88378:	fa22 f20c 	lsr.w	r2, r2, ip
   8837c:	d8f3      	bhi.n	88366 <__lshift+0x5a>
   8837e:	601a      	str	r2, [r3, #0]
   88380:	b10a      	cbz	r2, 88386 <__lshift+0x7a>
   88382:	f108 0502 	add.w	r5, r8, #2
   88386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   88388:	6872      	ldr	r2, [r6, #4]
   8838a:	3d01      	subs	r5, #1
   8838c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88390:	6105      	str	r5, [r0, #16]
   88392:	6031      	str	r1, [r6, #0]
   88394:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   88398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8839c:	3b04      	subs	r3, #4
   8839e:	f851 2b04 	ldr.w	r2, [r1], #4
   883a2:	458e      	cmp	lr, r1
   883a4:	f843 2f04 	str.w	r2, [r3, #4]!
   883a8:	d8f9      	bhi.n	8839e <__lshift+0x92>
   883aa:	e7ec      	b.n	88386 <__lshift+0x7a>

000883ac <__mcmp>:
   883ac:	b430      	push	{r4, r5}
   883ae:	690b      	ldr	r3, [r1, #16]
   883b0:	4605      	mov	r5, r0
   883b2:	6900      	ldr	r0, [r0, #16]
   883b4:	1ac0      	subs	r0, r0, r3
   883b6:	d10f      	bne.n	883d8 <__mcmp+0x2c>
   883b8:	009b      	lsls	r3, r3, #2
   883ba:	3514      	adds	r5, #20
   883bc:	3114      	adds	r1, #20
   883be:	4419      	add	r1, r3
   883c0:	442b      	add	r3, r5
   883c2:	e001      	b.n	883c8 <__mcmp+0x1c>
   883c4:	429d      	cmp	r5, r3
   883c6:	d207      	bcs.n	883d8 <__mcmp+0x2c>
   883c8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   883cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   883d0:	4294      	cmp	r4, r2
   883d2:	d0f7      	beq.n	883c4 <__mcmp+0x18>
   883d4:	d302      	bcc.n	883dc <__mcmp+0x30>
   883d6:	2001      	movs	r0, #1
   883d8:	bc30      	pop	{r4, r5}
   883da:	4770      	bx	lr
   883dc:	f04f 30ff 	mov.w	r0, #4294967295
   883e0:	e7fa      	b.n	883d8 <__mcmp+0x2c>
   883e2:	bf00      	nop

000883e4 <__mdiff>:
   883e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   883e8:	690c      	ldr	r4, [r1, #16]
   883ea:	4689      	mov	r9, r1
   883ec:	6911      	ldr	r1, [r2, #16]
   883ee:	4692      	mov	sl, r2
   883f0:	1a64      	subs	r4, r4, r1
   883f2:	2c00      	cmp	r4, #0
   883f4:	d117      	bne.n	88426 <__mdiff+0x42>
   883f6:	0089      	lsls	r1, r1, #2
   883f8:	f109 0714 	add.w	r7, r9, #20
   883fc:	f102 0614 	add.w	r6, r2, #20
   88400:	187b      	adds	r3, r7, r1
   88402:	4431      	add	r1, r6
   88404:	e001      	b.n	8840a <__mdiff+0x26>
   88406:	429f      	cmp	r7, r3
   88408:	d265      	bcs.n	884d6 <__mdiff+0xf2>
   8840a:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8840e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88412:	4295      	cmp	r5, r2
   88414:	d0f7      	beq.n	88406 <__mdiff+0x22>
   88416:	d267      	bcs.n	884e8 <__mdiff+0x104>
   88418:	464b      	mov	r3, r9
   8841a:	46bb      	mov	fp, r7
   8841c:	46d1      	mov	r9, sl
   8841e:	4637      	mov	r7, r6
   88420:	469a      	mov	sl, r3
   88422:	2401      	movs	r4, #1
   88424:	e005      	b.n	88432 <__mdiff+0x4e>
   88426:	db61      	blt.n	884ec <__mdiff+0x108>
   88428:	2400      	movs	r4, #0
   8842a:	f109 0714 	add.w	r7, r9, #20
   8842e:	f10a 0b14 	add.w	fp, sl, #20
   88432:	f8d9 1004 	ldr.w	r1, [r9, #4]
   88436:	f7ff fdbb 	bl	87fb0 <_Balloc>
   8843a:	465d      	mov	r5, fp
   8843c:	f04f 0800 	mov.w	r8, #0
   88440:	f8d9 e010 	ldr.w	lr, [r9, #16]
   88444:	f8da 3010 	ldr.w	r3, [sl, #16]
   88448:	463e      	mov	r6, r7
   8844a:	60c4      	str	r4, [r0, #12]
   8844c:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   88450:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   88454:	f100 0414 	add.w	r4, r0, #20
   88458:	f856 9b04 	ldr.w	r9, [r6], #4
   8845c:	f855 2b04 	ldr.w	r2, [r5], #4
   88460:	fa1f f389 	uxth.w	r3, r9
   88464:	4443      	add	r3, r8
   88466:	fa1f f882 	uxth.w	r8, r2
   8846a:	0c12      	lsrs	r2, r2, #16
   8846c:	eba3 0308 	sub.w	r3, r3, r8
   88470:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   88474:	eb02 4223 	add.w	r2, r2, r3, asr #16
   88478:	b29b      	uxth	r3, r3
   8847a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8847e:	45ac      	cmp	ip, r5
   88480:	f844 3b04 	str.w	r3, [r4], #4
   88484:	ea4f 4822 	mov.w	r8, r2, asr #16
   88488:	d8e6      	bhi.n	88458 <__mdiff+0x74>
   8848a:	42b7      	cmp	r7, r6
   8848c:	d917      	bls.n	884be <__mdiff+0xda>
   8848e:	46a4      	mov	ip, r4
   88490:	4635      	mov	r5, r6
   88492:	f855 3b04 	ldr.w	r3, [r5], #4
   88496:	b299      	uxth	r1, r3
   88498:	4441      	add	r1, r8
   8849a:	140a      	asrs	r2, r1, #16
   8849c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   884a0:	b289      	uxth	r1, r1
   884a2:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   884a6:	42af      	cmp	r7, r5
   884a8:	f84c 3b04 	str.w	r3, [ip], #4
   884ac:	ea4f 4822 	mov.w	r8, r2, asr #16
   884b0:	d8ef      	bhi.n	88492 <__mdiff+0xae>
   884b2:	43f6      	mvns	r6, r6
   884b4:	4437      	add	r7, r6
   884b6:	f027 0703 	bic.w	r7, r7, #3
   884ba:	3704      	adds	r7, #4
   884bc:	443c      	add	r4, r7
   884be:	3c04      	subs	r4, #4
   884c0:	b92b      	cbnz	r3, 884ce <__mdiff+0xea>
   884c2:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   884c6:	f10e 3eff 	add.w	lr, lr, #4294967295
   884ca:	2b00      	cmp	r3, #0
   884cc:	d0f9      	beq.n	884c2 <__mdiff+0xde>
   884ce:	f8c0 e010 	str.w	lr, [r0, #16]
   884d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   884d6:	2100      	movs	r1, #0
   884d8:	f7ff fd6a 	bl	87fb0 <_Balloc>
   884dc:	2201      	movs	r2, #1
   884de:	2300      	movs	r3, #0
   884e0:	6102      	str	r2, [r0, #16]
   884e2:	6143      	str	r3, [r0, #20]
   884e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   884e8:	46b3      	mov	fp, r6
   884ea:	e7a2      	b.n	88432 <__mdiff+0x4e>
   884ec:	464b      	mov	r3, r9
   884ee:	f109 0b14 	add.w	fp, r9, #20
   884f2:	f102 0714 	add.w	r7, r2, #20
   884f6:	4691      	mov	r9, r2
   884f8:	2401      	movs	r4, #1
   884fa:	469a      	mov	sl, r3
   884fc:	e799      	b.n	88432 <__mdiff+0x4e>
   884fe:	bf00      	nop

00088500 <__d2b>:
   88500:	b5f0      	push	{r4, r5, r6, r7, lr}
   88502:	2101      	movs	r1, #1
   88504:	b083      	sub	sp, #12
   88506:	461c      	mov	r4, r3
   88508:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8850c:	4616      	mov	r6, r2
   8850e:	f7ff fd4f 	bl	87fb0 <_Balloc>
   88512:	f3c4 0413 	ubfx	r4, r4, #0, #20
   88516:	4607      	mov	r7, r0
   88518:	b10d      	cbz	r5, 8851e <__d2b+0x1e>
   8851a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8851e:	9401      	str	r4, [sp, #4]
   88520:	b306      	cbz	r6, 88564 <__d2b+0x64>
   88522:	a802      	add	r0, sp, #8
   88524:	f840 6d08 	str.w	r6, [r0, #-8]!
   88528:	f7ff fdd4 	bl	880d4 <__lo0bits>
   8852c:	2800      	cmp	r0, #0
   8852e:	d130      	bne.n	88592 <__d2b+0x92>
   88530:	e89d 000c 	ldmia.w	sp, {r2, r3}
   88534:	617a      	str	r2, [r7, #20]
   88536:	2b00      	cmp	r3, #0
   88538:	bf0c      	ite	eq
   8853a:	2101      	moveq	r1, #1
   8853c:	2102      	movne	r1, #2
   8853e:	61bb      	str	r3, [r7, #24]
   88540:	6139      	str	r1, [r7, #16]
   88542:	b9d5      	cbnz	r5, 8857a <__d2b+0x7a>
   88544:	9a08      	ldr	r2, [sp, #32]
   88546:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   8854a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8854e:	6010      	str	r0, [r2, #0]
   88550:	6918      	ldr	r0, [r3, #16]
   88552:	f7ff fd9f 	bl	88094 <__hi0bits>
   88556:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88558:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   8855c:	6018      	str	r0, [r3, #0]
   8855e:	4638      	mov	r0, r7
   88560:	b003      	add	sp, #12
   88562:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88564:	a801      	add	r0, sp, #4
   88566:	f7ff fdb5 	bl	880d4 <__lo0bits>
   8856a:	2201      	movs	r2, #1
   8856c:	9b01      	ldr	r3, [sp, #4]
   8856e:	4611      	mov	r1, r2
   88570:	3020      	adds	r0, #32
   88572:	613a      	str	r2, [r7, #16]
   88574:	617b      	str	r3, [r7, #20]
   88576:	2d00      	cmp	r5, #0
   88578:	d0e4      	beq.n	88544 <__d2b+0x44>
   8857a:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8857e:	9a08      	ldr	r2, [sp, #32]
   88580:	4403      	add	r3, r0
   88582:	6013      	str	r3, [r2, #0]
   88584:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88586:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8858a:	6018      	str	r0, [r3, #0]
   8858c:	4638      	mov	r0, r7
   8858e:	b003      	add	sp, #12
   88590:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88592:	9b01      	ldr	r3, [sp, #4]
   88594:	f1c0 0220 	rsb	r2, r0, #32
   88598:	9900      	ldr	r1, [sp, #0]
   8859a:	fa03 f202 	lsl.w	r2, r3, r2
   8859e:	430a      	orrs	r2, r1
   885a0:	40c3      	lsrs	r3, r0
   885a2:	9301      	str	r3, [sp, #4]
   885a4:	617a      	str	r2, [r7, #20]
   885a6:	e7c6      	b.n	88536 <__d2b+0x36>

000885a8 <_sbrk_r>:
   885a8:	b538      	push	{r3, r4, r5, lr}
   885aa:	2300      	movs	r3, #0
   885ac:	4c06      	ldr	r4, [pc, #24]	; (885c8 <_sbrk_r+0x20>)
   885ae:	4605      	mov	r5, r0
   885b0:	4608      	mov	r0, r1
   885b2:	6023      	str	r3, [r4, #0]
   885b4:	f7fb fd08 	bl	83fc8 <_sbrk>
   885b8:	1c43      	adds	r3, r0, #1
   885ba:	d000      	beq.n	885be <_sbrk_r+0x16>
   885bc:	bd38      	pop	{r3, r4, r5, pc}
   885be:	6823      	ldr	r3, [r4, #0]
   885c0:	2b00      	cmp	r3, #0
   885c2:	d0fb      	beq.n	885bc <_sbrk_r+0x14>
   885c4:	602b      	str	r3, [r5, #0]
   885c6:	bd38      	pop	{r3, r4, r5, pc}
   885c8:	20071014 	.word	0x20071014

000885cc <__ssprint_r>:
   885cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   885d0:	6893      	ldr	r3, [r2, #8]
   885d2:	b083      	sub	sp, #12
   885d4:	4690      	mov	r8, r2
   885d6:	2b00      	cmp	r3, #0
   885d8:	d070      	beq.n	886bc <__ssprint_r+0xf0>
   885da:	4682      	mov	sl, r0
   885dc:	460c      	mov	r4, r1
   885de:	6817      	ldr	r7, [r2, #0]
   885e0:	688d      	ldr	r5, [r1, #8]
   885e2:	6808      	ldr	r0, [r1, #0]
   885e4:	e042      	b.n	8866c <__ssprint_r+0xa0>
   885e6:	89a3      	ldrh	r3, [r4, #12]
   885e8:	f413 6f90 	tst.w	r3, #1152	; 0x480
   885ec:	d02e      	beq.n	8864c <__ssprint_r+0x80>
   885ee:	6965      	ldr	r5, [r4, #20]
   885f0:	6921      	ldr	r1, [r4, #16]
   885f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   885f6:	eba0 0b01 	sub.w	fp, r0, r1
   885fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   885fe:	f10b 0001 	add.w	r0, fp, #1
   88602:	106d      	asrs	r5, r5, #1
   88604:	4430      	add	r0, r6
   88606:	42a8      	cmp	r0, r5
   88608:	462a      	mov	r2, r5
   8860a:	bf84      	itt	hi
   8860c:	4605      	movhi	r5, r0
   8860e:	462a      	movhi	r2, r5
   88610:	055b      	lsls	r3, r3, #21
   88612:	d538      	bpl.n	88686 <__ssprint_r+0xba>
   88614:	4611      	mov	r1, r2
   88616:	4650      	mov	r0, sl
   88618:	f7ff f960 	bl	878dc <_malloc_r>
   8861c:	2800      	cmp	r0, #0
   8861e:	d03c      	beq.n	8869a <__ssprint_r+0xce>
   88620:	465a      	mov	r2, fp
   88622:	6921      	ldr	r1, [r4, #16]
   88624:	9001      	str	r0, [sp, #4]
   88626:	f7ff fc41 	bl	87eac <memcpy>
   8862a:	89a2      	ldrh	r2, [r4, #12]
   8862c:	9b01      	ldr	r3, [sp, #4]
   8862e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   88632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   88636:	81a2      	strh	r2, [r4, #12]
   88638:	eba5 020b 	sub.w	r2, r5, fp
   8863c:	eb03 000b 	add.w	r0, r3, fp
   88640:	6165      	str	r5, [r4, #20]
   88642:	46b3      	mov	fp, r6
   88644:	4635      	mov	r5, r6
   88646:	6123      	str	r3, [r4, #16]
   88648:	6020      	str	r0, [r4, #0]
   8864a:	60a2      	str	r2, [r4, #8]
   8864c:	465a      	mov	r2, fp
   8864e:	4649      	mov	r1, r9
   88650:	f000 fa18 	bl	88a84 <memmove>
   88654:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88658:	68a2      	ldr	r2, [r4, #8]
   8865a:	6820      	ldr	r0, [r4, #0]
   8865c:	1b55      	subs	r5, r2, r5
   8865e:	4458      	add	r0, fp
   88660:	1b9e      	subs	r6, r3, r6
   88662:	60a5      	str	r5, [r4, #8]
   88664:	6020      	str	r0, [r4, #0]
   88666:	f8c8 6008 	str.w	r6, [r8, #8]
   8866a:	b33e      	cbz	r6, 886bc <__ssprint_r+0xf0>
   8866c:	687e      	ldr	r6, [r7, #4]
   8866e:	463b      	mov	r3, r7
   88670:	3708      	adds	r7, #8
   88672:	2e00      	cmp	r6, #0
   88674:	d0fa      	beq.n	8866c <__ssprint_r+0xa0>
   88676:	42ae      	cmp	r6, r5
   88678:	f8d3 9000 	ldr.w	r9, [r3]
   8867c:	46ab      	mov	fp, r5
   8867e:	d2b2      	bcs.n	885e6 <__ssprint_r+0x1a>
   88680:	4635      	mov	r5, r6
   88682:	46b3      	mov	fp, r6
   88684:	e7e2      	b.n	8864c <__ssprint_r+0x80>
   88686:	4650      	mov	r0, sl
   88688:	f000 fa60 	bl	88b4c <_realloc_r>
   8868c:	4603      	mov	r3, r0
   8868e:	2800      	cmp	r0, #0
   88690:	d1d2      	bne.n	88638 <__ssprint_r+0x6c>
   88692:	6921      	ldr	r1, [r4, #16]
   88694:	4650      	mov	r0, sl
   88696:	f000 f8f9 	bl	8888c <_free_r>
   8869a:	230c      	movs	r3, #12
   8869c:	2200      	movs	r2, #0
   8869e:	f04f 30ff 	mov.w	r0, #4294967295
   886a2:	f8ca 3000 	str.w	r3, [sl]
   886a6:	89a3      	ldrh	r3, [r4, #12]
   886a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   886ac:	81a3      	strh	r3, [r4, #12]
   886ae:	f8c8 2008 	str.w	r2, [r8, #8]
   886b2:	f8c8 2004 	str.w	r2, [r8, #4]
   886b6:	b003      	add	sp, #12
   886b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   886bc:	2000      	movs	r0, #0
   886be:	f8c8 0004 	str.w	r0, [r8, #4]
   886c2:	b003      	add	sp, #12
   886c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000886c8 <__register_exitproc>:
   886c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   886cc:	4d2c      	ldr	r5, [pc, #176]	; (88780 <__register_exitproc+0xb8>)
   886ce:	4606      	mov	r6, r0
   886d0:	6828      	ldr	r0, [r5, #0]
   886d2:	4698      	mov	r8, r3
   886d4:	460f      	mov	r7, r1
   886d6:	4691      	mov	r9, r2
   886d8:	f7ff f8fc 	bl	878d4 <__retarget_lock_acquire_recursive>
   886dc:	4b29      	ldr	r3, [pc, #164]	; (88784 <__register_exitproc+0xbc>)
   886de:	681c      	ldr	r4, [r3, #0]
   886e0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   886e4:	2b00      	cmp	r3, #0
   886e6:	d03e      	beq.n	88766 <__register_exitproc+0x9e>
   886e8:	685a      	ldr	r2, [r3, #4]
   886ea:	2a1f      	cmp	r2, #31
   886ec:	dc1c      	bgt.n	88728 <__register_exitproc+0x60>
   886ee:	f102 0e01 	add.w	lr, r2, #1
   886f2:	b176      	cbz	r6, 88712 <__register_exitproc+0x4a>
   886f4:	2101      	movs	r1, #1
   886f6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   886fa:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   886fe:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   88702:	4091      	lsls	r1, r2
   88704:	4308      	orrs	r0, r1
   88706:	2e02      	cmp	r6, #2
   88708:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8870c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   88710:	d023      	beq.n	8875a <__register_exitproc+0x92>
   88712:	3202      	adds	r2, #2
   88714:	f8c3 e004 	str.w	lr, [r3, #4]
   88718:	6828      	ldr	r0, [r5, #0]
   8871a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8871e:	f7ff f8db 	bl	878d8 <__retarget_lock_release_recursive>
   88722:	2000      	movs	r0, #0
   88724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88728:	4b17      	ldr	r3, [pc, #92]	; (88788 <__register_exitproc+0xc0>)
   8872a:	b30b      	cbz	r3, 88770 <__register_exitproc+0xa8>
   8872c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   88730:	f3af 8000 	nop.w
   88734:	4603      	mov	r3, r0
   88736:	b1d8      	cbz	r0, 88770 <__register_exitproc+0xa8>
   88738:	2000      	movs	r0, #0
   8873a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8873e:	f04f 0e01 	mov.w	lr, #1
   88742:	6058      	str	r0, [r3, #4]
   88744:	6019      	str	r1, [r3, #0]
   88746:	4602      	mov	r2, r0
   88748:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8874c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   88750:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   88754:	2e00      	cmp	r6, #0
   88756:	d0dc      	beq.n	88712 <__register_exitproc+0x4a>
   88758:	e7cc      	b.n	886f4 <__register_exitproc+0x2c>
   8875a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8875e:	4301      	orrs	r1, r0
   88760:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   88764:	e7d5      	b.n	88712 <__register_exitproc+0x4a>
   88766:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8876a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8876e:	e7bb      	b.n	886e8 <__register_exitproc+0x20>
   88770:	6828      	ldr	r0, [r5, #0]
   88772:	f7ff f8b1 	bl	878d8 <__retarget_lock_release_recursive>
   88776:	f04f 30ff 	mov.w	r0, #4294967295
   8877a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8877e:	bf00      	nop
   88780:	200705d0 	.word	0x200705d0
   88784:	00089494 	.word	0x00089494
   88788:	00000000 	.word	0x00000000

0008878c <_calloc_r>:
   8878c:	b510      	push	{r4, lr}
   8878e:	fb02 f101 	mul.w	r1, r2, r1
   88792:	f7ff f8a3 	bl	878dc <_malloc_r>
   88796:	4604      	mov	r4, r0
   88798:	b1d8      	cbz	r0, 887d2 <_calloc_r+0x46>
   8879a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8879e:	f022 0203 	bic.w	r2, r2, #3
   887a2:	3a04      	subs	r2, #4
   887a4:	2a24      	cmp	r2, #36	; 0x24
   887a6:	d818      	bhi.n	887da <_calloc_r+0x4e>
   887a8:	2a13      	cmp	r2, #19
   887aa:	d914      	bls.n	887d6 <_calloc_r+0x4a>
   887ac:	2300      	movs	r3, #0
   887ae:	2a1b      	cmp	r2, #27
   887b0:	6003      	str	r3, [r0, #0]
   887b2:	6043      	str	r3, [r0, #4]
   887b4:	d916      	bls.n	887e4 <_calloc_r+0x58>
   887b6:	2a24      	cmp	r2, #36	; 0x24
   887b8:	6083      	str	r3, [r0, #8]
   887ba:	60c3      	str	r3, [r0, #12]
   887bc:	bf11      	iteee	ne
   887be:	f100 0210 	addne.w	r2, r0, #16
   887c2:	6103      	streq	r3, [r0, #16]
   887c4:	6143      	streq	r3, [r0, #20]
   887c6:	f100 0218 	addeq.w	r2, r0, #24
   887ca:	2300      	movs	r3, #0
   887cc:	6013      	str	r3, [r2, #0]
   887ce:	6053      	str	r3, [r2, #4]
   887d0:	6093      	str	r3, [r2, #8]
   887d2:	4620      	mov	r0, r4
   887d4:	bd10      	pop	{r4, pc}
   887d6:	4602      	mov	r2, r0
   887d8:	e7f7      	b.n	887ca <_calloc_r+0x3e>
   887da:	2100      	movs	r1, #0
   887dc:	f7fc fd6a 	bl	852b4 <memset>
   887e0:	4620      	mov	r0, r4
   887e2:	bd10      	pop	{r4, pc}
   887e4:	f100 0208 	add.w	r2, r0, #8
   887e8:	e7ef      	b.n	887ca <_calloc_r+0x3e>
   887ea:	bf00      	nop

000887ec <_malloc_trim_r>:
   887ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   887ee:	460c      	mov	r4, r1
   887f0:	4f23      	ldr	r7, [pc, #140]	; (88880 <_malloc_trim_r+0x94>)
   887f2:	4606      	mov	r6, r0
   887f4:	f7ff fbd0 	bl	87f98 <__malloc_lock>
   887f8:	68bb      	ldr	r3, [r7, #8]
   887fa:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   887fe:	685d      	ldr	r5, [r3, #4]
   88800:	310f      	adds	r1, #15
   88802:	f025 0503 	bic.w	r5, r5, #3
   88806:	4429      	add	r1, r5
   88808:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8880c:	f021 010f 	bic.w	r1, r1, #15
   88810:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   88814:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   88818:	db07      	blt.n	8882a <_malloc_trim_r+0x3e>
   8881a:	2100      	movs	r1, #0
   8881c:	4630      	mov	r0, r6
   8881e:	f7ff fec3 	bl	885a8 <_sbrk_r>
   88822:	68bb      	ldr	r3, [r7, #8]
   88824:	442b      	add	r3, r5
   88826:	4298      	cmp	r0, r3
   88828:	d004      	beq.n	88834 <_malloc_trim_r+0x48>
   8882a:	4630      	mov	r0, r6
   8882c:	f7ff fbba 	bl	87fa4 <__malloc_unlock>
   88830:	2000      	movs	r0, #0
   88832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88834:	4261      	negs	r1, r4
   88836:	4630      	mov	r0, r6
   88838:	f7ff feb6 	bl	885a8 <_sbrk_r>
   8883c:	3001      	adds	r0, #1
   8883e:	d00d      	beq.n	8885c <_malloc_trim_r+0x70>
   88840:	4b10      	ldr	r3, [pc, #64]	; (88884 <_malloc_trim_r+0x98>)
   88842:	68ba      	ldr	r2, [r7, #8]
   88844:	6819      	ldr	r1, [r3, #0]
   88846:	1b2d      	subs	r5, r5, r4
   88848:	f045 0501 	orr.w	r5, r5, #1
   8884c:	4630      	mov	r0, r6
   8884e:	1b09      	subs	r1, r1, r4
   88850:	6055      	str	r5, [r2, #4]
   88852:	6019      	str	r1, [r3, #0]
   88854:	f7ff fba6 	bl	87fa4 <__malloc_unlock>
   88858:	2001      	movs	r0, #1
   8885a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8885c:	2100      	movs	r1, #0
   8885e:	4630      	mov	r0, r6
   88860:	f7ff fea2 	bl	885a8 <_sbrk_r>
   88864:	68ba      	ldr	r2, [r7, #8]
   88866:	1a83      	subs	r3, r0, r2
   88868:	2b0f      	cmp	r3, #15
   8886a:	ddde      	ble.n	8882a <_malloc_trim_r+0x3e>
   8886c:	4c06      	ldr	r4, [pc, #24]	; (88888 <_malloc_trim_r+0x9c>)
   8886e:	4905      	ldr	r1, [pc, #20]	; (88884 <_malloc_trim_r+0x98>)
   88870:	6824      	ldr	r4, [r4, #0]
   88872:	f043 0301 	orr.w	r3, r3, #1
   88876:	1b00      	subs	r0, r0, r4
   88878:	6053      	str	r3, [r2, #4]
   8887a:	6008      	str	r0, [r1, #0]
   8887c:	e7d5      	b.n	8882a <_malloc_trim_r+0x3e>
   8887e:	bf00      	nop
   88880:	200705d4 	.word	0x200705d4
   88884:	20070df8 	.word	0x20070df8
   88888:	200709dc 	.word	0x200709dc

0008888c <_free_r>:
   8888c:	2900      	cmp	r1, #0
   8888e:	d044      	beq.n	8891a <_free_r+0x8e>
   88890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88894:	460d      	mov	r5, r1
   88896:	4680      	mov	r8, r0
   88898:	f7ff fb7e 	bl	87f98 <__malloc_lock>
   8889c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   888a0:	4969      	ldr	r1, [pc, #420]	; (88a48 <_free_r+0x1bc>)
   888a2:	f1a5 0408 	sub.w	r4, r5, #8
   888a6:	f027 0301 	bic.w	r3, r7, #1
   888aa:	18e2      	adds	r2, r4, r3
   888ac:	688e      	ldr	r6, [r1, #8]
   888ae:	6850      	ldr	r0, [r2, #4]
   888b0:	42b2      	cmp	r2, r6
   888b2:	f020 0003 	bic.w	r0, r0, #3
   888b6:	d05e      	beq.n	88976 <_free_r+0xea>
   888b8:	07fe      	lsls	r6, r7, #31
   888ba:	6050      	str	r0, [r2, #4]
   888bc:	d40b      	bmi.n	888d6 <_free_r+0x4a>
   888be:	f855 7c08 	ldr.w	r7, [r5, #-8]
   888c2:	f101 0e08 	add.w	lr, r1, #8
   888c6:	1be4      	subs	r4, r4, r7
   888c8:	68a5      	ldr	r5, [r4, #8]
   888ca:	443b      	add	r3, r7
   888cc:	4575      	cmp	r5, lr
   888ce:	d06d      	beq.n	889ac <_free_r+0x120>
   888d0:	68e7      	ldr	r7, [r4, #12]
   888d2:	60ef      	str	r7, [r5, #12]
   888d4:	60bd      	str	r5, [r7, #8]
   888d6:	1815      	adds	r5, r2, r0
   888d8:	686d      	ldr	r5, [r5, #4]
   888da:	07ed      	lsls	r5, r5, #31
   888dc:	d53e      	bpl.n	8895c <_free_r+0xd0>
   888de:	f043 0201 	orr.w	r2, r3, #1
   888e2:	6062      	str	r2, [r4, #4]
   888e4:	50e3      	str	r3, [r4, r3]
   888e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   888ea:	d217      	bcs.n	8891c <_free_r+0x90>
   888ec:	2201      	movs	r2, #1
   888ee:	08db      	lsrs	r3, r3, #3
   888f0:	1098      	asrs	r0, r3, #2
   888f2:	684d      	ldr	r5, [r1, #4]
   888f4:	4413      	add	r3, r2
   888f6:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   888fa:	4082      	lsls	r2, r0
   888fc:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   88900:	432a      	orrs	r2, r5
   88902:	3808      	subs	r0, #8
   88904:	60e0      	str	r0, [r4, #12]
   88906:	60a7      	str	r7, [r4, #8]
   88908:	604a      	str	r2, [r1, #4]
   8890a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8890e:	60fc      	str	r4, [r7, #12]
   88910:	4640      	mov	r0, r8
   88912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88916:	f7ff bb45 	b.w	87fa4 <__malloc_unlock>
   8891a:	4770      	bx	lr
   8891c:	0a5a      	lsrs	r2, r3, #9
   8891e:	2a04      	cmp	r2, #4
   88920:	d852      	bhi.n	889c8 <_free_r+0x13c>
   88922:	099a      	lsrs	r2, r3, #6
   88924:	f102 0739 	add.w	r7, r2, #57	; 0x39
   88928:	00ff      	lsls	r7, r7, #3
   8892a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8892e:	19c8      	adds	r0, r1, r7
   88930:	59ca      	ldr	r2, [r1, r7]
   88932:	3808      	subs	r0, #8
   88934:	4290      	cmp	r0, r2
   88936:	d04f      	beq.n	889d8 <_free_r+0x14c>
   88938:	6851      	ldr	r1, [r2, #4]
   8893a:	f021 0103 	bic.w	r1, r1, #3
   8893e:	428b      	cmp	r3, r1
   88940:	d232      	bcs.n	889a8 <_free_r+0x11c>
   88942:	6892      	ldr	r2, [r2, #8]
   88944:	4290      	cmp	r0, r2
   88946:	d1f7      	bne.n	88938 <_free_r+0xac>
   88948:	68c3      	ldr	r3, [r0, #12]
   8894a:	60a0      	str	r0, [r4, #8]
   8894c:	60e3      	str	r3, [r4, #12]
   8894e:	609c      	str	r4, [r3, #8]
   88950:	60c4      	str	r4, [r0, #12]
   88952:	4640      	mov	r0, r8
   88954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88958:	f7ff bb24 	b.w	87fa4 <__malloc_unlock>
   8895c:	6895      	ldr	r5, [r2, #8]
   8895e:	4f3b      	ldr	r7, [pc, #236]	; (88a4c <_free_r+0x1c0>)
   88960:	4403      	add	r3, r0
   88962:	42bd      	cmp	r5, r7
   88964:	d040      	beq.n	889e8 <_free_r+0x15c>
   88966:	68d0      	ldr	r0, [r2, #12]
   88968:	f043 0201 	orr.w	r2, r3, #1
   8896c:	60e8      	str	r0, [r5, #12]
   8896e:	6085      	str	r5, [r0, #8]
   88970:	6062      	str	r2, [r4, #4]
   88972:	50e3      	str	r3, [r4, r3]
   88974:	e7b7      	b.n	888e6 <_free_r+0x5a>
   88976:	07ff      	lsls	r7, r7, #31
   88978:	4403      	add	r3, r0
   8897a:	d407      	bmi.n	8898c <_free_r+0x100>
   8897c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   88980:	1b64      	subs	r4, r4, r5
   88982:	68e2      	ldr	r2, [r4, #12]
   88984:	68a0      	ldr	r0, [r4, #8]
   88986:	442b      	add	r3, r5
   88988:	60c2      	str	r2, [r0, #12]
   8898a:	6090      	str	r0, [r2, #8]
   8898c:	4a30      	ldr	r2, [pc, #192]	; (88a50 <_free_r+0x1c4>)
   8898e:	f043 0001 	orr.w	r0, r3, #1
   88992:	6812      	ldr	r2, [r2, #0]
   88994:	6060      	str	r0, [r4, #4]
   88996:	4293      	cmp	r3, r2
   88998:	608c      	str	r4, [r1, #8]
   8899a:	d3b9      	bcc.n	88910 <_free_r+0x84>
   8899c:	4b2d      	ldr	r3, [pc, #180]	; (88a54 <_free_r+0x1c8>)
   8899e:	4640      	mov	r0, r8
   889a0:	6819      	ldr	r1, [r3, #0]
   889a2:	f7ff ff23 	bl	887ec <_malloc_trim_r>
   889a6:	e7b3      	b.n	88910 <_free_r+0x84>
   889a8:	4610      	mov	r0, r2
   889aa:	e7cd      	b.n	88948 <_free_r+0xbc>
   889ac:	1811      	adds	r1, r2, r0
   889ae:	6849      	ldr	r1, [r1, #4]
   889b0:	07c9      	lsls	r1, r1, #31
   889b2:	d444      	bmi.n	88a3e <_free_r+0x1b2>
   889b4:	6891      	ldr	r1, [r2, #8]
   889b6:	4403      	add	r3, r0
   889b8:	68d2      	ldr	r2, [r2, #12]
   889ba:	f043 0001 	orr.w	r0, r3, #1
   889be:	60ca      	str	r2, [r1, #12]
   889c0:	6091      	str	r1, [r2, #8]
   889c2:	6060      	str	r0, [r4, #4]
   889c4:	50e3      	str	r3, [r4, r3]
   889c6:	e7a3      	b.n	88910 <_free_r+0x84>
   889c8:	2a14      	cmp	r2, #20
   889ca:	d816      	bhi.n	889fa <_free_r+0x16e>
   889cc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   889d0:	00ff      	lsls	r7, r7, #3
   889d2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   889d6:	e7aa      	b.n	8892e <_free_r+0xa2>
   889d8:	2301      	movs	r3, #1
   889da:	10aa      	asrs	r2, r5, #2
   889dc:	684d      	ldr	r5, [r1, #4]
   889de:	4093      	lsls	r3, r2
   889e0:	432b      	orrs	r3, r5
   889e2:	604b      	str	r3, [r1, #4]
   889e4:	4603      	mov	r3, r0
   889e6:	e7b0      	b.n	8894a <_free_r+0xbe>
   889e8:	f043 0201 	orr.w	r2, r3, #1
   889ec:	614c      	str	r4, [r1, #20]
   889ee:	610c      	str	r4, [r1, #16]
   889f0:	60e5      	str	r5, [r4, #12]
   889f2:	60a5      	str	r5, [r4, #8]
   889f4:	6062      	str	r2, [r4, #4]
   889f6:	50e3      	str	r3, [r4, r3]
   889f8:	e78a      	b.n	88910 <_free_r+0x84>
   889fa:	2a54      	cmp	r2, #84	; 0x54
   889fc:	d806      	bhi.n	88a0c <_free_r+0x180>
   889fe:	0b1a      	lsrs	r2, r3, #12
   88a00:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   88a04:	00ff      	lsls	r7, r7, #3
   88a06:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   88a0a:	e790      	b.n	8892e <_free_r+0xa2>
   88a0c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   88a10:	d806      	bhi.n	88a20 <_free_r+0x194>
   88a12:	0bda      	lsrs	r2, r3, #15
   88a14:	f102 0778 	add.w	r7, r2, #120	; 0x78
   88a18:	00ff      	lsls	r7, r7, #3
   88a1a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   88a1e:	e786      	b.n	8892e <_free_r+0xa2>
   88a20:	f240 5054 	movw	r0, #1364	; 0x554
   88a24:	4282      	cmp	r2, r0
   88a26:	d806      	bhi.n	88a36 <_free_r+0x1aa>
   88a28:	0c9a      	lsrs	r2, r3, #18
   88a2a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   88a2e:	00ff      	lsls	r7, r7, #3
   88a30:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   88a34:	e77b      	b.n	8892e <_free_r+0xa2>
   88a36:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   88a3a:	257e      	movs	r5, #126	; 0x7e
   88a3c:	e777      	b.n	8892e <_free_r+0xa2>
   88a3e:	f043 0101 	orr.w	r1, r3, #1
   88a42:	6061      	str	r1, [r4, #4]
   88a44:	6013      	str	r3, [r2, #0]
   88a46:	e763      	b.n	88910 <_free_r+0x84>
   88a48:	200705d4 	.word	0x200705d4
   88a4c:	200705dc 	.word	0x200705dc
   88a50:	200709e0 	.word	0x200709e0
   88a54:	20070e28 	.word	0x20070e28

00088a58 <__ascii_mbtowc>:
   88a58:	b082      	sub	sp, #8
   88a5a:	b149      	cbz	r1, 88a70 <__ascii_mbtowc+0x18>
   88a5c:	b15a      	cbz	r2, 88a76 <__ascii_mbtowc+0x1e>
   88a5e:	b16b      	cbz	r3, 88a7c <__ascii_mbtowc+0x24>
   88a60:	7813      	ldrb	r3, [r2, #0]
   88a62:	600b      	str	r3, [r1, #0]
   88a64:	7812      	ldrb	r2, [r2, #0]
   88a66:	1c10      	adds	r0, r2, #0
   88a68:	bf18      	it	ne
   88a6a:	2001      	movne	r0, #1
   88a6c:	b002      	add	sp, #8
   88a6e:	4770      	bx	lr
   88a70:	a901      	add	r1, sp, #4
   88a72:	2a00      	cmp	r2, #0
   88a74:	d1f3      	bne.n	88a5e <__ascii_mbtowc+0x6>
   88a76:	4610      	mov	r0, r2
   88a78:	b002      	add	sp, #8
   88a7a:	4770      	bx	lr
   88a7c:	f06f 0001 	mvn.w	r0, #1
   88a80:	e7f4      	b.n	88a6c <__ascii_mbtowc+0x14>
   88a82:	bf00      	nop

00088a84 <memmove>:
   88a84:	4288      	cmp	r0, r1
   88a86:	b5f0      	push	{r4, r5, r6, r7, lr}
   88a88:	d90d      	bls.n	88aa6 <memmove+0x22>
   88a8a:	188b      	adds	r3, r1, r2
   88a8c:	4298      	cmp	r0, r3
   88a8e:	d20a      	bcs.n	88aa6 <memmove+0x22>
   88a90:	1884      	adds	r4, r0, r2
   88a92:	2a00      	cmp	r2, #0
   88a94:	d051      	beq.n	88b3a <memmove+0xb6>
   88a96:	4622      	mov	r2, r4
   88a98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   88a9c:	4299      	cmp	r1, r3
   88a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   88aa2:	d1f9      	bne.n	88a98 <memmove+0x14>
   88aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88aa6:	2a0f      	cmp	r2, #15
   88aa8:	d948      	bls.n	88b3c <memmove+0xb8>
   88aaa:	ea41 0300 	orr.w	r3, r1, r0
   88aae:	079b      	lsls	r3, r3, #30
   88ab0:	d146      	bne.n	88b40 <memmove+0xbc>
   88ab2:	4615      	mov	r5, r2
   88ab4:	f100 0410 	add.w	r4, r0, #16
   88ab8:	f101 0310 	add.w	r3, r1, #16
   88abc:	f853 6c10 	ldr.w	r6, [r3, #-16]
   88ac0:	3d10      	subs	r5, #16
   88ac2:	f844 6c10 	str.w	r6, [r4, #-16]
   88ac6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   88aca:	2d0f      	cmp	r5, #15
   88acc:	f844 6c0c 	str.w	r6, [r4, #-12]
   88ad0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   88ad4:	f104 0410 	add.w	r4, r4, #16
   88ad8:	f844 6c18 	str.w	r6, [r4, #-24]
   88adc:	f853 6c04 	ldr.w	r6, [r3, #-4]
   88ae0:	f103 0310 	add.w	r3, r3, #16
   88ae4:	f844 6c14 	str.w	r6, [r4, #-20]
   88ae8:	d8e8      	bhi.n	88abc <memmove+0x38>
   88aea:	f1a2 0310 	sub.w	r3, r2, #16
   88aee:	f023 030f 	bic.w	r3, r3, #15
   88af2:	f002 0e0f 	and.w	lr, r2, #15
   88af6:	3310      	adds	r3, #16
   88af8:	f1be 0f03 	cmp.w	lr, #3
   88afc:	4419      	add	r1, r3
   88afe:	4403      	add	r3, r0
   88b00:	d921      	bls.n	88b46 <memmove+0xc2>
   88b02:	460e      	mov	r6, r1
   88b04:	4674      	mov	r4, lr
   88b06:	1f1d      	subs	r5, r3, #4
   88b08:	f856 7b04 	ldr.w	r7, [r6], #4
   88b0c:	3c04      	subs	r4, #4
   88b0e:	2c03      	cmp	r4, #3
   88b10:	f845 7f04 	str.w	r7, [r5, #4]!
   88b14:	d8f8      	bhi.n	88b08 <memmove+0x84>
   88b16:	f1ae 0404 	sub.w	r4, lr, #4
   88b1a:	f024 0403 	bic.w	r4, r4, #3
   88b1e:	3404      	adds	r4, #4
   88b20:	4421      	add	r1, r4
   88b22:	4423      	add	r3, r4
   88b24:	f002 0203 	and.w	r2, r2, #3
   88b28:	b162      	cbz	r2, 88b44 <memmove+0xc0>
   88b2a:	3b01      	subs	r3, #1
   88b2c:	440a      	add	r2, r1
   88b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   88b32:	428a      	cmp	r2, r1
   88b34:	f803 4f01 	strb.w	r4, [r3, #1]!
   88b38:	d1f9      	bne.n	88b2e <memmove+0xaa>
   88b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88b3c:	4603      	mov	r3, r0
   88b3e:	e7f3      	b.n	88b28 <memmove+0xa4>
   88b40:	4603      	mov	r3, r0
   88b42:	e7f2      	b.n	88b2a <memmove+0xa6>
   88b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88b46:	4672      	mov	r2, lr
   88b48:	e7ee      	b.n	88b28 <memmove+0xa4>
   88b4a:	bf00      	nop

00088b4c <_realloc_r>:
   88b4c:	2900      	cmp	r1, #0
   88b4e:	f000 8094 	beq.w	88c7a <_realloc_r+0x12e>
   88b52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88b56:	460c      	mov	r4, r1
   88b58:	4615      	mov	r5, r2
   88b5a:	b083      	sub	sp, #12
   88b5c:	4680      	mov	r8, r0
   88b5e:	f105 060b 	add.w	r6, r5, #11
   88b62:	f7ff fa19 	bl	87f98 <__malloc_lock>
   88b66:	f854 ec04 	ldr.w	lr, [r4, #-4]
   88b6a:	2e16      	cmp	r6, #22
   88b6c:	f02e 0703 	bic.w	r7, lr, #3
   88b70:	f1a4 0908 	sub.w	r9, r4, #8
   88b74:	d83c      	bhi.n	88bf0 <_realloc_r+0xa4>
   88b76:	2210      	movs	r2, #16
   88b78:	4616      	mov	r6, r2
   88b7a:	42b5      	cmp	r5, r6
   88b7c:	d83d      	bhi.n	88bfa <_realloc_r+0xae>
   88b7e:	4297      	cmp	r7, r2
   88b80:	da43      	bge.n	88c0a <_realloc_r+0xbe>
   88b82:	4bc6      	ldr	r3, [pc, #792]	; (88e9c <_realloc_r+0x350>)
   88b84:	eb09 0007 	add.w	r0, r9, r7
   88b88:	6899      	ldr	r1, [r3, #8]
   88b8a:	4288      	cmp	r0, r1
   88b8c:	f000 80c3 	beq.w	88d16 <_realloc_r+0x1ca>
   88b90:	6843      	ldr	r3, [r0, #4]
   88b92:	f023 0101 	bic.w	r1, r3, #1
   88b96:	4401      	add	r1, r0
   88b98:	6849      	ldr	r1, [r1, #4]
   88b9a:	07c9      	lsls	r1, r1, #31
   88b9c:	d54d      	bpl.n	88c3a <_realloc_r+0xee>
   88b9e:	f01e 0f01 	tst.w	lr, #1
   88ba2:	f000 809b 	beq.w	88cdc <_realloc_r+0x190>
   88ba6:	4629      	mov	r1, r5
   88ba8:	4640      	mov	r0, r8
   88baa:	f7fe fe97 	bl	878dc <_malloc_r>
   88bae:	4605      	mov	r5, r0
   88bb0:	2800      	cmp	r0, #0
   88bb2:	d03b      	beq.n	88c2c <_realloc_r+0xe0>
   88bb4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88bb8:	f1a0 0208 	sub.w	r2, r0, #8
   88bbc:	f023 0301 	bic.w	r3, r3, #1
   88bc0:	444b      	add	r3, r9
   88bc2:	429a      	cmp	r2, r3
   88bc4:	f000 812b 	beq.w	88e1e <_realloc_r+0x2d2>
   88bc8:	1f3a      	subs	r2, r7, #4
   88bca:	2a24      	cmp	r2, #36	; 0x24
   88bcc:	f200 8118 	bhi.w	88e00 <_realloc_r+0x2b4>
   88bd0:	2a13      	cmp	r2, #19
   88bd2:	f200 80eb 	bhi.w	88dac <_realloc_r+0x260>
   88bd6:	4603      	mov	r3, r0
   88bd8:	4622      	mov	r2, r4
   88bda:	6811      	ldr	r1, [r2, #0]
   88bdc:	6019      	str	r1, [r3, #0]
   88bde:	6851      	ldr	r1, [r2, #4]
   88be0:	6059      	str	r1, [r3, #4]
   88be2:	6892      	ldr	r2, [r2, #8]
   88be4:	609a      	str	r2, [r3, #8]
   88be6:	4621      	mov	r1, r4
   88be8:	4640      	mov	r0, r8
   88bea:	f7ff fe4f 	bl	8888c <_free_r>
   88bee:	e01d      	b.n	88c2c <_realloc_r+0xe0>
   88bf0:	f026 0607 	bic.w	r6, r6, #7
   88bf4:	2e00      	cmp	r6, #0
   88bf6:	4632      	mov	r2, r6
   88bf8:	dabf      	bge.n	88b7a <_realloc_r+0x2e>
   88bfa:	2500      	movs	r5, #0
   88bfc:	230c      	movs	r3, #12
   88bfe:	4628      	mov	r0, r5
   88c00:	f8c8 3000 	str.w	r3, [r8]
   88c04:	b003      	add	sp, #12
   88c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88c0a:	4625      	mov	r5, r4
   88c0c:	1bbb      	subs	r3, r7, r6
   88c0e:	2b0f      	cmp	r3, #15
   88c10:	f8d9 2004 	ldr.w	r2, [r9, #4]
   88c14:	d81d      	bhi.n	88c52 <_realloc_r+0x106>
   88c16:	f002 0201 	and.w	r2, r2, #1
   88c1a:	433a      	orrs	r2, r7
   88c1c:	eb09 0107 	add.w	r1, r9, r7
   88c20:	f8c9 2004 	str.w	r2, [r9, #4]
   88c24:	684b      	ldr	r3, [r1, #4]
   88c26:	f043 0301 	orr.w	r3, r3, #1
   88c2a:	604b      	str	r3, [r1, #4]
   88c2c:	4640      	mov	r0, r8
   88c2e:	f7ff f9b9 	bl	87fa4 <__malloc_unlock>
   88c32:	4628      	mov	r0, r5
   88c34:	b003      	add	sp, #12
   88c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88c3a:	f023 0303 	bic.w	r3, r3, #3
   88c3e:	18f9      	adds	r1, r7, r3
   88c40:	4291      	cmp	r1, r2
   88c42:	db1d      	blt.n	88c80 <_realloc_r+0x134>
   88c44:	68c3      	ldr	r3, [r0, #12]
   88c46:	6882      	ldr	r2, [r0, #8]
   88c48:	4625      	mov	r5, r4
   88c4a:	60d3      	str	r3, [r2, #12]
   88c4c:	460f      	mov	r7, r1
   88c4e:	609a      	str	r2, [r3, #8]
   88c50:	e7dc      	b.n	88c0c <_realloc_r+0xc0>
   88c52:	f002 0201 	and.w	r2, r2, #1
   88c56:	eb09 0106 	add.w	r1, r9, r6
   88c5a:	f043 0301 	orr.w	r3, r3, #1
   88c5e:	4332      	orrs	r2, r6
   88c60:	f8c9 2004 	str.w	r2, [r9, #4]
   88c64:	444f      	add	r7, r9
   88c66:	604b      	str	r3, [r1, #4]
   88c68:	687b      	ldr	r3, [r7, #4]
   88c6a:	3108      	adds	r1, #8
   88c6c:	f043 0301 	orr.w	r3, r3, #1
   88c70:	607b      	str	r3, [r7, #4]
   88c72:	4640      	mov	r0, r8
   88c74:	f7ff fe0a 	bl	8888c <_free_r>
   88c78:	e7d8      	b.n	88c2c <_realloc_r+0xe0>
   88c7a:	4611      	mov	r1, r2
   88c7c:	f7fe be2e 	b.w	878dc <_malloc_r>
   88c80:	f01e 0f01 	tst.w	lr, #1
   88c84:	d18f      	bne.n	88ba6 <_realloc_r+0x5a>
   88c86:	f854 1c08 	ldr.w	r1, [r4, #-8]
   88c8a:	eba9 0a01 	sub.w	sl, r9, r1
   88c8e:	f8da 1004 	ldr.w	r1, [sl, #4]
   88c92:	f021 0103 	bic.w	r1, r1, #3
   88c96:	440b      	add	r3, r1
   88c98:	443b      	add	r3, r7
   88c9a:	4293      	cmp	r3, r2
   88c9c:	db26      	blt.n	88cec <_realloc_r+0x1a0>
   88c9e:	4655      	mov	r5, sl
   88ca0:	68c1      	ldr	r1, [r0, #12]
   88ca2:	6880      	ldr	r0, [r0, #8]
   88ca4:	1f3a      	subs	r2, r7, #4
   88ca6:	60c1      	str	r1, [r0, #12]
   88ca8:	6088      	str	r0, [r1, #8]
   88caa:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88cae:	f8da 100c 	ldr.w	r1, [sl, #12]
   88cb2:	2a24      	cmp	r2, #36	; 0x24
   88cb4:	60c1      	str	r1, [r0, #12]
   88cb6:	6088      	str	r0, [r1, #8]
   88cb8:	d826      	bhi.n	88d08 <_realloc_r+0x1bc>
   88cba:	2a13      	cmp	r2, #19
   88cbc:	f240 8081 	bls.w	88dc2 <_realloc_r+0x276>
   88cc0:	6821      	ldr	r1, [r4, #0]
   88cc2:	2a1b      	cmp	r2, #27
   88cc4:	f8ca 1008 	str.w	r1, [sl, #8]
   88cc8:	6861      	ldr	r1, [r4, #4]
   88cca:	f8ca 100c 	str.w	r1, [sl, #12]
   88cce:	f200 80ad 	bhi.w	88e2c <_realloc_r+0x2e0>
   88cd2:	f104 0008 	add.w	r0, r4, #8
   88cd6:	f10a 0210 	add.w	r2, sl, #16
   88cda:	e074      	b.n	88dc6 <_realloc_r+0x27a>
   88cdc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   88ce0:	eba9 0a03 	sub.w	sl, r9, r3
   88ce4:	f8da 1004 	ldr.w	r1, [sl, #4]
   88ce8:	f021 0103 	bic.w	r1, r1, #3
   88cec:	187b      	adds	r3, r7, r1
   88cee:	4293      	cmp	r3, r2
   88cf0:	f6ff af59 	blt.w	88ba6 <_realloc_r+0x5a>
   88cf4:	4655      	mov	r5, sl
   88cf6:	f8da 100c 	ldr.w	r1, [sl, #12]
   88cfa:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88cfe:	1f3a      	subs	r2, r7, #4
   88d00:	2a24      	cmp	r2, #36	; 0x24
   88d02:	60c1      	str	r1, [r0, #12]
   88d04:	6088      	str	r0, [r1, #8]
   88d06:	d9d8      	bls.n	88cba <_realloc_r+0x16e>
   88d08:	4621      	mov	r1, r4
   88d0a:	4628      	mov	r0, r5
   88d0c:	461f      	mov	r7, r3
   88d0e:	46d1      	mov	r9, sl
   88d10:	f7ff feb8 	bl	88a84 <memmove>
   88d14:	e77a      	b.n	88c0c <_realloc_r+0xc0>
   88d16:	6841      	ldr	r1, [r0, #4]
   88d18:	f106 0010 	add.w	r0, r6, #16
   88d1c:	f021 0b03 	bic.w	fp, r1, #3
   88d20:	44bb      	add	fp, r7
   88d22:	4583      	cmp	fp, r0
   88d24:	da58      	bge.n	88dd8 <_realloc_r+0x28c>
   88d26:	f01e 0f01 	tst.w	lr, #1
   88d2a:	f47f af3c 	bne.w	88ba6 <_realloc_r+0x5a>
   88d2e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   88d32:	eba9 0a01 	sub.w	sl, r9, r1
   88d36:	f8da 1004 	ldr.w	r1, [sl, #4]
   88d3a:	f021 0103 	bic.w	r1, r1, #3
   88d3e:	448b      	add	fp, r1
   88d40:	4558      	cmp	r0, fp
   88d42:	dcd3      	bgt.n	88cec <_realloc_r+0x1a0>
   88d44:	4655      	mov	r5, sl
   88d46:	f8da 100c 	ldr.w	r1, [sl, #12]
   88d4a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88d4e:	1f3a      	subs	r2, r7, #4
   88d50:	2a24      	cmp	r2, #36	; 0x24
   88d52:	60c1      	str	r1, [r0, #12]
   88d54:	6088      	str	r0, [r1, #8]
   88d56:	f200 808d 	bhi.w	88e74 <_realloc_r+0x328>
   88d5a:	2a13      	cmp	r2, #19
   88d5c:	f240 8087 	bls.w	88e6e <_realloc_r+0x322>
   88d60:	6821      	ldr	r1, [r4, #0]
   88d62:	2a1b      	cmp	r2, #27
   88d64:	f8ca 1008 	str.w	r1, [sl, #8]
   88d68:	6861      	ldr	r1, [r4, #4]
   88d6a:	f8ca 100c 	str.w	r1, [sl, #12]
   88d6e:	f200 8088 	bhi.w	88e82 <_realloc_r+0x336>
   88d72:	f104 0108 	add.w	r1, r4, #8
   88d76:	f10a 0210 	add.w	r2, sl, #16
   88d7a:	6808      	ldr	r0, [r1, #0]
   88d7c:	6010      	str	r0, [r2, #0]
   88d7e:	6848      	ldr	r0, [r1, #4]
   88d80:	6050      	str	r0, [r2, #4]
   88d82:	6889      	ldr	r1, [r1, #8]
   88d84:	6091      	str	r1, [r2, #8]
   88d86:	ebab 0206 	sub.w	r2, fp, r6
   88d8a:	eb0a 0106 	add.w	r1, sl, r6
   88d8e:	f042 0201 	orr.w	r2, r2, #1
   88d92:	6099      	str	r1, [r3, #8]
   88d94:	604a      	str	r2, [r1, #4]
   88d96:	f8da 3004 	ldr.w	r3, [sl, #4]
   88d9a:	4640      	mov	r0, r8
   88d9c:	f003 0301 	and.w	r3, r3, #1
   88da0:	431e      	orrs	r6, r3
   88da2:	f8ca 6004 	str.w	r6, [sl, #4]
   88da6:	f7ff f8fd 	bl	87fa4 <__malloc_unlock>
   88daa:	e742      	b.n	88c32 <_realloc_r+0xe6>
   88dac:	6823      	ldr	r3, [r4, #0]
   88dae:	2a1b      	cmp	r2, #27
   88db0:	6003      	str	r3, [r0, #0]
   88db2:	6863      	ldr	r3, [r4, #4]
   88db4:	6043      	str	r3, [r0, #4]
   88db6:	d827      	bhi.n	88e08 <_realloc_r+0x2bc>
   88db8:	f100 0308 	add.w	r3, r0, #8
   88dbc:	f104 0208 	add.w	r2, r4, #8
   88dc0:	e70b      	b.n	88bda <_realloc_r+0x8e>
   88dc2:	4620      	mov	r0, r4
   88dc4:	462a      	mov	r2, r5
   88dc6:	6801      	ldr	r1, [r0, #0]
   88dc8:	461f      	mov	r7, r3
   88dca:	6011      	str	r1, [r2, #0]
   88dcc:	6841      	ldr	r1, [r0, #4]
   88dce:	46d1      	mov	r9, sl
   88dd0:	6051      	str	r1, [r2, #4]
   88dd2:	6883      	ldr	r3, [r0, #8]
   88dd4:	6093      	str	r3, [r2, #8]
   88dd6:	e719      	b.n	88c0c <_realloc_r+0xc0>
   88dd8:	ebab 0b06 	sub.w	fp, fp, r6
   88ddc:	eb09 0106 	add.w	r1, r9, r6
   88de0:	f04b 0201 	orr.w	r2, fp, #1
   88de4:	6099      	str	r1, [r3, #8]
   88de6:	604a      	str	r2, [r1, #4]
   88de8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88dec:	4640      	mov	r0, r8
   88dee:	f003 0301 	and.w	r3, r3, #1
   88df2:	431e      	orrs	r6, r3
   88df4:	f844 6c04 	str.w	r6, [r4, #-4]
   88df8:	f7ff f8d4 	bl	87fa4 <__malloc_unlock>
   88dfc:	4625      	mov	r5, r4
   88dfe:	e718      	b.n	88c32 <_realloc_r+0xe6>
   88e00:	4621      	mov	r1, r4
   88e02:	f7ff fe3f 	bl	88a84 <memmove>
   88e06:	e6ee      	b.n	88be6 <_realloc_r+0x9a>
   88e08:	68a3      	ldr	r3, [r4, #8]
   88e0a:	2a24      	cmp	r2, #36	; 0x24
   88e0c:	6083      	str	r3, [r0, #8]
   88e0e:	68e3      	ldr	r3, [r4, #12]
   88e10:	60c3      	str	r3, [r0, #12]
   88e12:	d018      	beq.n	88e46 <_realloc_r+0x2fa>
   88e14:	f100 0310 	add.w	r3, r0, #16
   88e18:	f104 0210 	add.w	r2, r4, #16
   88e1c:	e6dd      	b.n	88bda <_realloc_r+0x8e>
   88e1e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   88e22:	4625      	mov	r5, r4
   88e24:	f023 0303 	bic.w	r3, r3, #3
   88e28:	441f      	add	r7, r3
   88e2a:	e6ef      	b.n	88c0c <_realloc_r+0xc0>
   88e2c:	68a1      	ldr	r1, [r4, #8]
   88e2e:	2a24      	cmp	r2, #36	; 0x24
   88e30:	f8ca 1010 	str.w	r1, [sl, #16]
   88e34:	68e1      	ldr	r1, [r4, #12]
   88e36:	f8ca 1014 	str.w	r1, [sl, #20]
   88e3a:	d00d      	beq.n	88e58 <_realloc_r+0x30c>
   88e3c:	f104 0010 	add.w	r0, r4, #16
   88e40:	f10a 0218 	add.w	r2, sl, #24
   88e44:	e7bf      	b.n	88dc6 <_realloc_r+0x27a>
   88e46:	6922      	ldr	r2, [r4, #16]
   88e48:	f100 0318 	add.w	r3, r0, #24
   88e4c:	6102      	str	r2, [r0, #16]
   88e4e:	6961      	ldr	r1, [r4, #20]
   88e50:	f104 0218 	add.w	r2, r4, #24
   88e54:	6141      	str	r1, [r0, #20]
   88e56:	e6c0      	b.n	88bda <_realloc_r+0x8e>
   88e58:	6922      	ldr	r2, [r4, #16]
   88e5a:	f104 0018 	add.w	r0, r4, #24
   88e5e:	f8ca 2018 	str.w	r2, [sl, #24]
   88e62:	6961      	ldr	r1, [r4, #20]
   88e64:	f10a 0220 	add.w	r2, sl, #32
   88e68:	f8ca 101c 	str.w	r1, [sl, #28]
   88e6c:	e7ab      	b.n	88dc6 <_realloc_r+0x27a>
   88e6e:	4621      	mov	r1, r4
   88e70:	462a      	mov	r2, r5
   88e72:	e782      	b.n	88d7a <_realloc_r+0x22e>
   88e74:	4621      	mov	r1, r4
   88e76:	4628      	mov	r0, r5
   88e78:	9301      	str	r3, [sp, #4]
   88e7a:	f7ff fe03 	bl	88a84 <memmove>
   88e7e:	9b01      	ldr	r3, [sp, #4]
   88e80:	e781      	b.n	88d86 <_realloc_r+0x23a>
   88e82:	68a1      	ldr	r1, [r4, #8]
   88e84:	2a24      	cmp	r2, #36	; 0x24
   88e86:	f8ca 1010 	str.w	r1, [sl, #16]
   88e8a:	68e1      	ldr	r1, [r4, #12]
   88e8c:	f8ca 1014 	str.w	r1, [sl, #20]
   88e90:	d006      	beq.n	88ea0 <_realloc_r+0x354>
   88e92:	f104 0110 	add.w	r1, r4, #16
   88e96:	f10a 0218 	add.w	r2, sl, #24
   88e9a:	e76e      	b.n	88d7a <_realloc_r+0x22e>
   88e9c:	200705d4 	.word	0x200705d4
   88ea0:	6922      	ldr	r2, [r4, #16]
   88ea2:	f104 0118 	add.w	r1, r4, #24
   88ea6:	f8ca 2018 	str.w	r2, [sl, #24]
   88eaa:	6960      	ldr	r0, [r4, #20]
   88eac:	f10a 0220 	add.w	r2, sl, #32
   88eb0:	f8ca 001c 	str.w	r0, [sl, #28]
   88eb4:	e761      	b.n	88d7a <_realloc_r+0x22e>
   88eb6:	bf00      	nop

00088eb8 <__ascii_wctomb>:
   88eb8:	b119      	cbz	r1, 88ec2 <__ascii_wctomb+0xa>
   88eba:	2aff      	cmp	r2, #255	; 0xff
   88ebc:	d803      	bhi.n	88ec6 <__ascii_wctomb+0xe>
   88ebe:	700a      	strb	r2, [r1, #0]
   88ec0:	2101      	movs	r1, #1
   88ec2:	4608      	mov	r0, r1
   88ec4:	4770      	bx	lr
   88ec6:	238a      	movs	r3, #138	; 0x8a
   88ec8:	f04f 31ff 	mov.w	r1, #4294967295
   88ecc:	6003      	str	r3, [r0, #0]
   88ece:	e7f8      	b.n	88ec2 <__ascii_wctomb+0xa>

00088ed0 <__gedf2>:
   88ed0:	f04f 3cff 	mov.w	ip, #4294967295
   88ed4:	e006      	b.n	88ee4 <__cmpdf2+0x4>
   88ed6:	bf00      	nop

00088ed8 <__ledf2>:
   88ed8:	f04f 0c01 	mov.w	ip, #1
   88edc:	e002      	b.n	88ee4 <__cmpdf2+0x4>
   88ede:	bf00      	nop

00088ee0 <__cmpdf2>:
   88ee0:	f04f 0c01 	mov.w	ip, #1
   88ee4:	f84d cd04 	str.w	ip, [sp, #-4]!
   88ee8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88eec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88ef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88ef4:	bf18      	it	ne
   88ef6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   88efa:	d01b      	beq.n	88f34 <__cmpdf2+0x54>
   88efc:	b001      	add	sp, #4
   88efe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   88f02:	bf0c      	ite	eq
   88f04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   88f08:	ea91 0f03 	teqne	r1, r3
   88f0c:	bf02      	ittt	eq
   88f0e:	ea90 0f02 	teqeq	r0, r2
   88f12:	2000      	moveq	r0, #0
   88f14:	4770      	bxeq	lr
   88f16:	f110 0f00 	cmn.w	r0, #0
   88f1a:	ea91 0f03 	teq	r1, r3
   88f1e:	bf58      	it	pl
   88f20:	4299      	cmppl	r1, r3
   88f22:	bf08      	it	eq
   88f24:	4290      	cmpeq	r0, r2
   88f26:	bf2c      	ite	cs
   88f28:	17d8      	asrcs	r0, r3, #31
   88f2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   88f2e:	f040 0001 	orr.w	r0, r0, #1
   88f32:	4770      	bx	lr
   88f34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88f38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88f3c:	d102      	bne.n	88f44 <__cmpdf2+0x64>
   88f3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   88f42:	d107      	bne.n	88f54 <__cmpdf2+0x74>
   88f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88f48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88f4c:	d1d6      	bne.n	88efc <__cmpdf2+0x1c>
   88f4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   88f52:	d0d3      	beq.n	88efc <__cmpdf2+0x1c>
   88f54:	f85d 0b04 	ldr.w	r0, [sp], #4
   88f58:	4770      	bx	lr
   88f5a:	bf00      	nop

00088f5c <__aeabi_cdrcmple>:
   88f5c:	4684      	mov	ip, r0
   88f5e:	4610      	mov	r0, r2
   88f60:	4662      	mov	r2, ip
   88f62:	468c      	mov	ip, r1
   88f64:	4619      	mov	r1, r3
   88f66:	4663      	mov	r3, ip
   88f68:	e000      	b.n	88f6c <__aeabi_cdcmpeq>
   88f6a:	bf00      	nop

00088f6c <__aeabi_cdcmpeq>:
   88f6c:	b501      	push	{r0, lr}
   88f6e:	f7ff ffb7 	bl	88ee0 <__cmpdf2>
   88f72:	2800      	cmp	r0, #0
   88f74:	bf48      	it	mi
   88f76:	f110 0f00 	cmnmi.w	r0, #0
   88f7a:	bd01      	pop	{r0, pc}

00088f7c <__aeabi_dcmpeq>:
   88f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   88f80:	f7ff fff4 	bl	88f6c <__aeabi_cdcmpeq>
   88f84:	bf0c      	ite	eq
   88f86:	2001      	moveq	r0, #1
   88f88:	2000      	movne	r0, #0
   88f8a:	f85d fb08 	ldr.w	pc, [sp], #8
   88f8e:	bf00      	nop

00088f90 <__aeabi_dcmplt>:
   88f90:	f84d ed08 	str.w	lr, [sp, #-8]!
   88f94:	f7ff ffea 	bl	88f6c <__aeabi_cdcmpeq>
   88f98:	bf34      	ite	cc
   88f9a:	2001      	movcc	r0, #1
   88f9c:	2000      	movcs	r0, #0
   88f9e:	f85d fb08 	ldr.w	pc, [sp], #8
   88fa2:	bf00      	nop

00088fa4 <__aeabi_dcmple>:
   88fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   88fa8:	f7ff ffe0 	bl	88f6c <__aeabi_cdcmpeq>
   88fac:	bf94      	ite	ls
   88fae:	2001      	movls	r0, #1
   88fb0:	2000      	movhi	r0, #0
   88fb2:	f85d fb08 	ldr.w	pc, [sp], #8
   88fb6:	bf00      	nop

00088fb8 <__aeabi_dcmpge>:
   88fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   88fbc:	f7ff ffce 	bl	88f5c <__aeabi_cdrcmple>
   88fc0:	bf94      	ite	ls
   88fc2:	2001      	movls	r0, #1
   88fc4:	2000      	movhi	r0, #0
   88fc6:	f85d fb08 	ldr.w	pc, [sp], #8
   88fca:	bf00      	nop

00088fcc <__aeabi_dcmpgt>:
   88fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   88fd0:	f7ff ffc4 	bl	88f5c <__aeabi_cdrcmple>
   88fd4:	bf34      	ite	cc
   88fd6:	2001      	movcc	r0, #1
   88fd8:	2000      	movcs	r0, #0
   88fda:	f85d fb08 	ldr.w	pc, [sp], #8
   88fde:	bf00      	nop

00088fe0 <__aeabi_dcmpun>:
   88fe0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88fe4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88fe8:	d102      	bne.n	88ff0 <__aeabi_dcmpun+0x10>
   88fea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   88fee:	d10a      	bne.n	89006 <__aeabi_dcmpun+0x26>
   88ff0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88ff4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88ff8:	d102      	bne.n	89000 <__aeabi_dcmpun+0x20>
   88ffa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   88ffe:	d102      	bne.n	89006 <__aeabi_dcmpun+0x26>
   89000:	f04f 0000 	mov.w	r0, #0
   89004:	4770      	bx	lr
   89006:	f04f 0001 	mov.w	r0, #1
   8900a:	4770      	bx	lr

0008900c <__aeabi_d2iz>:
   8900c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   89010:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   89014:	d215      	bcs.n	89042 <__aeabi_d2iz+0x36>
   89016:	d511      	bpl.n	8903c <__aeabi_d2iz+0x30>
   89018:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8901c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   89020:	d912      	bls.n	89048 <__aeabi_d2iz+0x3c>
   89022:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   89026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8902a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8902e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   89032:	fa23 f002 	lsr.w	r0, r3, r2
   89036:	bf18      	it	ne
   89038:	4240      	negne	r0, r0
   8903a:	4770      	bx	lr
   8903c:	f04f 0000 	mov.w	r0, #0
   89040:	4770      	bx	lr
   89042:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   89046:	d105      	bne.n	89054 <__aeabi_d2iz+0x48>
   89048:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8904c:	bf08      	it	eq
   8904e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   89052:	4770      	bx	lr
   89054:	f04f 0000 	mov.w	r0, #0
   89058:	4770      	bx	lr
   8905a:	bf00      	nop

0008905c <__aeabi_uldivmod>:
   8905c:	b953      	cbnz	r3, 89074 <__aeabi_uldivmod+0x18>
   8905e:	b94a      	cbnz	r2, 89074 <__aeabi_uldivmod+0x18>
   89060:	2900      	cmp	r1, #0
   89062:	bf08      	it	eq
   89064:	2800      	cmpeq	r0, #0
   89066:	bf1c      	itt	ne
   89068:	f04f 31ff 	movne.w	r1, #4294967295
   8906c:	f04f 30ff 	movne.w	r0, #4294967295
   89070:	f000 b97a 	b.w	89368 <__aeabi_idiv0>
   89074:	f1ad 0c08 	sub.w	ip, sp, #8
   89078:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8907c:	f000 f806 	bl	8908c <__udivmoddi4>
   89080:	f8dd e004 	ldr.w	lr, [sp, #4]
   89084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   89088:	b004      	add	sp, #16
   8908a:	4770      	bx	lr

0008908c <__udivmoddi4>:
   8908c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89090:	468c      	mov	ip, r1
   89092:	460e      	mov	r6, r1
   89094:	4604      	mov	r4, r0
   89096:	9d08      	ldr	r5, [sp, #32]
   89098:	2b00      	cmp	r3, #0
   8909a:	d150      	bne.n	8913e <__udivmoddi4+0xb2>
   8909c:	428a      	cmp	r2, r1
   8909e:	4617      	mov	r7, r2
   890a0:	d96c      	bls.n	8917c <__udivmoddi4+0xf0>
   890a2:	fab2 fe82 	clz	lr, r2
   890a6:	f1be 0f00 	cmp.w	lr, #0
   890aa:	d00b      	beq.n	890c4 <__udivmoddi4+0x38>
   890ac:	f1ce 0c20 	rsb	ip, lr, #32
   890b0:	fa01 f60e 	lsl.w	r6, r1, lr
   890b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   890b8:	fa02 f70e 	lsl.w	r7, r2, lr
   890bc:	ea4c 0c06 	orr.w	ip, ip, r6
   890c0:	fa00 f40e 	lsl.w	r4, r0, lr
   890c4:	0c3a      	lsrs	r2, r7, #16
   890c6:	fbbc f9f2 	udiv	r9, ip, r2
   890ca:	b2bb      	uxth	r3, r7
   890cc:	fb02 cc19 	mls	ip, r2, r9, ip
   890d0:	fb09 fa03 	mul.w	sl, r9, r3
   890d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   890d8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   890dc:	45b2      	cmp	sl, r6
   890de:	d90a      	bls.n	890f6 <__udivmoddi4+0x6a>
   890e0:	19f6      	adds	r6, r6, r7
   890e2:	f109 31ff 	add.w	r1, r9, #4294967295
   890e6:	f080 8125 	bcs.w	89334 <__udivmoddi4+0x2a8>
   890ea:	45b2      	cmp	sl, r6
   890ec:	f240 8122 	bls.w	89334 <__udivmoddi4+0x2a8>
   890f0:	f1a9 0902 	sub.w	r9, r9, #2
   890f4:	443e      	add	r6, r7
   890f6:	eba6 060a 	sub.w	r6, r6, sl
   890fa:	fbb6 f0f2 	udiv	r0, r6, r2
   890fe:	fb02 6610 	mls	r6, r2, r0, r6
   89102:	fb00 f303 	mul.w	r3, r0, r3
   89106:	b2a4      	uxth	r4, r4
   89108:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8910c:	42a3      	cmp	r3, r4
   8910e:	d909      	bls.n	89124 <__udivmoddi4+0x98>
   89110:	19e4      	adds	r4, r4, r7
   89112:	f100 32ff 	add.w	r2, r0, #4294967295
   89116:	f080 810b 	bcs.w	89330 <__udivmoddi4+0x2a4>
   8911a:	42a3      	cmp	r3, r4
   8911c:	f240 8108 	bls.w	89330 <__udivmoddi4+0x2a4>
   89120:	3802      	subs	r0, #2
   89122:	443c      	add	r4, r7
   89124:	2100      	movs	r1, #0
   89126:	1ae4      	subs	r4, r4, r3
   89128:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8912c:	2d00      	cmp	r5, #0
   8912e:	d062      	beq.n	891f6 <__udivmoddi4+0x16a>
   89130:	2300      	movs	r3, #0
   89132:	fa24 f40e 	lsr.w	r4, r4, lr
   89136:	602c      	str	r4, [r5, #0]
   89138:	606b      	str	r3, [r5, #4]
   8913a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8913e:	428b      	cmp	r3, r1
   89140:	d907      	bls.n	89152 <__udivmoddi4+0xc6>
   89142:	2d00      	cmp	r5, #0
   89144:	d055      	beq.n	891f2 <__udivmoddi4+0x166>
   89146:	2100      	movs	r1, #0
   89148:	e885 0041 	stmia.w	r5, {r0, r6}
   8914c:	4608      	mov	r0, r1
   8914e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89152:	fab3 f183 	clz	r1, r3
   89156:	2900      	cmp	r1, #0
   89158:	f040 808f 	bne.w	8927a <__udivmoddi4+0x1ee>
   8915c:	42b3      	cmp	r3, r6
   8915e:	d302      	bcc.n	89166 <__udivmoddi4+0xda>
   89160:	4282      	cmp	r2, r0
   89162:	f200 80fc 	bhi.w	8935e <__udivmoddi4+0x2d2>
   89166:	1a84      	subs	r4, r0, r2
   89168:	eb66 0603 	sbc.w	r6, r6, r3
   8916c:	2001      	movs	r0, #1
   8916e:	46b4      	mov	ip, r6
   89170:	2d00      	cmp	r5, #0
   89172:	d040      	beq.n	891f6 <__udivmoddi4+0x16a>
   89174:	e885 1010 	stmia.w	r5, {r4, ip}
   89178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8917c:	b912      	cbnz	r2, 89184 <__udivmoddi4+0xf8>
   8917e:	2701      	movs	r7, #1
   89180:	fbb7 f7f2 	udiv	r7, r7, r2
   89184:	fab7 fe87 	clz	lr, r7
   89188:	f1be 0f00 	cmp.w	lr, #0
   8918c:	d135      	bne.n	891fa <__udivmoddi4+0x16e>
   8918e:	2101      	movs	r1, #1
   89190:	1bf6      	subs	r6, r6, r7
   89192:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   89196:	fa1f f887 	uxth.w	r8, r7
   8919a:	fbb6 f2fc 	udiv	r2, r6, ip
   8919e:	fb0c 6612 	mls	r6, ip, r2, r6
   891a2:	fb08 f002 	mul.w	r0, r8, r2
   891a6:	0c23      	lsrs	r3, r4, #16
   891a8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   891ac:	42b0      	cmp	r0, r6
   891ae:	d907      	bls.n	891c0 <__udivmoddi4+0x134>
   891b0:	19f6      	adds	r6, r6, r7
   891b2:	f102 33ff 	add.w	r3, r2, #4294967295
   891b6:	d202      	bcs.n	891be <__udivmoddi4+0x132>
   891b8:	42b0      	cmp	r0, r6
   891ba:	f200 80d2 	bhi.w	89362 <__udivmoddi4+0x2d6>
   891be:	461a      	mov	r2, r3
   891c0:	1a36      	subs	r6, r6, r0
   891c2:	fbb6 f0fc 	udiv	r0, r6, ip
   891c6:	fb0c 6610 	mls	r6, ip, r0, r6
   891ca:	fb08 f800 	mul.w	r8, r8, r0
   891ce:	b2a3      	uxth	r3, r4
   891d0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   891d4:	45a0      	cmp	r8, r4
   891d6:	d907      	bls.n	891e8 <__udivmoddi4+0x15c>
   891d8:	19e4      	adds	r4, r4, r7
   891da:	f100 33ff 	add.w	r3, r0, #4294967295
   891de:	d202      	bcs.n	891e6 <__udivmoddi4+0x15a>
   891e0:	45a0      	cmp	r8, r4
   891e2:	f200 80b9 	bhi.w	89358 <__udivmoddi4+0x2cc>
   891e6:	4618      	mov	r0, r3
   891e8:	eba4 0408 	sub.w	r4, r4, r8
   891ec:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   891f0:	e79c      	b.n	8912c <__udivmoddi4+0xa0>
   891f2:	4629      	mov	r1, r5
   891f4:	4628      	mov	r0, r5
   891f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   891fa:	fa07 f70e 	lsl.w	r7, r7, lr
   891fe:	f1ce 0320 	rsb	r3, lr, #32
   89202:	fa26 f203 	lsr.w	r2, r6, r3
   89206:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8920a:	fbb2 f1fc 	udiv	r1, r2, ip
   8920e:	fa1f f887 	uxth.w	r8, r7
   89212:	fb0c 2211 	mls	r2, ip, r1, r2
   89216:	fa06 f60e 	lsl.w	r6, r6, lr
   8921a:	fa20 f303 	lsr.w	r3, r0, r3
   8921e:	fb01 f908 	mul.w	r9, r1, r8
   89222:	4333      	orrs	r3, r6
   89224:	0c1e      	lsrs	r6, r3, #16
   89226:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8922a:	45b1      	cmp	r9, r6
   8922c:	fa00 f40e 	lsl.w	r4, r0, lr
   89230:	d909      	bls.n	89246 <__udivmoddi4+0x1ba>
   89232:	19f6      	adds	r6, r6, r7
   89234:	f101 32ff 	add.w	r2, r1, #4294967295
   89238:	f080 808c 	bcs.w	89354 <__udivmoddi4+0x2c8>
   8923c:	45b1      	cmp	r9, r6
   8923e:	f240 8089 	bls.w	89354 <__udivmoddi4+0x2c8>
   89242:	3902      	subs	r1, #2
   89244:	443e      	add	r6, r7
   89246:	eba6 0609 	sub.w	r6, r6, r9
   8924a:	fbb6 f0fc 	udiv	r0, r6, ip
   8924e:	fb0c 6210 	mls	r2, ip, r0, r6
   89252:	fb00 f908 	mul.w	r9, r0, r8
   89256:	b29e      	uxth	r6, r3
   89258:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8925c:	45b1      	cmp	r9, r6
   8925e:	d907      	bls.n	89270 <__udivmoddi4+0x1e4>
   89260:	19f6      	adds	r6, r6, r7
   89262:	f100 33ff 	add.w	r3, r0, #4294967295
   89266:	d271      	bcs.n	8934c <__udivmoddi4+0x2c0>
   89268:	45b1      	cmp	r9, r6
   8926a:	d96f      	bls.n	8934c <__udivmoddi4+0x2c0>
   8926c:	3802      	subs	r0, #2
   8926e:	443e      	add	r6, r7
   89270:	eba6 0609 	sub.w	r6, r6, r9
   89274:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   89278:	e78f      	b.n	8919a <__udivmoddi4+0x10e>
   8927a:	f1c1 0720 	rsb	r7, r1, #32
   8927e:	fa22 f807 	lsr.w	r8, r2, r7
   89282:	408b      	lsls	r3, r1
   89284:	ea48 0303 	orr.w	r3, r8, r3
   89288:	fa26 f407 	lsr.w	r4, r6, r7
   8928c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   89290:	fbb4 f9fe 	udiv	r9, r4, lr
   89294:	fa1f fc83 	uxth.w	ip, r3
   89298:	fb0e 4419 	mls	r4, lr, r9, r4
   8929c:	408e      	lsls	r6, r1
   8929e:	fa20 f807 	lsr.w	r8, r0, r7
   892a2:	fb09 fa0c 	mul.w	sl, r9, ip
   892a6:	ea48 0806 	orr.w	r8, r8, r6
   892aa:	ea4f 4618 	mov.w	r6, r8, lsr #16
   892ae:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   892b2:	45a2      	cmp	sl, r4
   892b4:	fa02 f201 	lsl.w	r2, r2, r1
   892b8:	fa00 f601 	lsl.w	r6, r0, r1
   892bc:	d908      	bls.n	892d0 <__udivmoddi4+0x244>
   892be:	18e4      	adds	r4, r4, r3
   892c0:	f109 30ff 	add.w	r0, r9, #4294967295
   892c4:	d244      	bcs.n	89350 <__udivmoddi4+0x2c4>
   892c6:	45a2      	cmp	sl, r4
   892c8:	d942      	bls.n	89350 <__udivmoddi4+0x2c4>
   892ca:	f1a9 0902 	sub.w	r9, r9, #2
   892ce:	441c      	add	r4, r3
   892d0:	eba4 040a 	sub.w	r4, r4, sl
   892d4:	fbb4 f0fe 	udiv	r0, r4, lr
   892d8:	fb0e 4410 	mls	r4, lr, r0, r4
   892dc:	fb00 fc0c 	mul.w	ip, r0, ip
   892e0:	fa1f f888 	uxth.w	r8, r8
   892e4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   892e8:	45a4      	cmp	ip, r4
   892ea:	d907      	bls.n	892fc <__udivmoddi4+0x270>
   892ec:	18e4      	adds	r4, r4, r3
   892ee:	f100 3eff 	add.w	lr, r0, #4294967295
   892f2:	d229      	bcs.n	89348 <__udivmoddi4+0x2bc>
   892f4:	45a4      	cmp	ip, r4
   892f6:	d927      	bls.n	89348 <__udivmoddi4+0x2bc>
   892f8:	3802      	subs	r0, #2
   892fa:	441c      	add	r4, r3
   892fc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89300:	fba0 8902 	umull	r8, r9, r0, r2
   89304:	eba4 0c0c 	sub.w	ip, r4, ip
   89308:	45cc      	cmp	ip, r9
   8930a:	46c2      	mov	sl, r8
   8930c:	46ce      	mov	lr, r9
   8930e:	d315      	bcc.n	8933c <__udivmoddi4+0x2b0>
   89310:	d012      	beq.n	89338 <__udivmoddi4+0x2ac>
   89312:	b155      	cbz	r5, 8932a <__udivmoddi4+0x29e>
   89314:	ebb6 030a 	subs.w	r3, r6, sl
   89318:	eb6c 060e 	sbc.w	r6, ip, lr
   8931c:	fa06 f707 	lsl.w	r7, r6, r7
   89320:	40cb      	lsrs	r3, r1
   89322:	431f      	orrs	r7, r3
   89324:	40ce      	lsrs	r6, r1
   89326:	602f      	str	r7, [r5, #0]
   89328:	606e      	str	r6, [r5, #4]
   8932a:	2100      	movs	r1, #0
   8932c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89330:	4610      	mov	r0, r2
   89332:	e6f7      	b.n	89124 <__udivmoddi4+0x98>
   89334:	4689      	mov	r9, r1
   89336:	e6de      	b.n	890f6 <__udivmoddi4+0x6a>
   89338:	4546      	cmp	r6, r8
   8933a:	d2ea      	bcs.n	89312 <__udivmoddi4+0x286>
   8933c:	ebb8 0a02 	subs.w	sl, r8, r2
   89340:	eb69 0e03 	sbc.w	lr, r9, r3
   89344:	3801      	subs	r0, #1
   89346:	e7e4      	b.n	89312 <__udivmoddi4+0x286>
   89348:	4670      	mov	r0, lr
   8934a:	e7d7      	b.n	892fc <__udivmoddi4+0x270>
   8934c:	4618      	mov	r0, r3
   8934e:	e78f      	b.n	89270 <__udivmoddi4+0x1e4>
   89350:	4681      	mov	r9, r0
   89352:	e7bd      	b.n	892d0 <__udivmoddi4+0x244>
   89354:	4611      	mov	r1, r2
   89356:	e776      	b.n	89246 <__udivmoddi4+0x1ba>
   89358:	3802      	subs	r0, #2
   8935a:	443c      	add	r4, r7
   8935c:	e744      	b.n	891e8 <__udivmoddi4+0x15c>
   8935e:	4608      	mov	r0, r1
   89360:	e706      	b.n	89170 <__udivmoddi4+0xe4>
   89362:	3a02      	subs	r2, #2
   89364:	443e      	add	r6, r7
   89366:	e72b      	b.n	891c0 <__udivmoddi4+0x134>

00089368 <__aeabi_idiv0>:
   89368:	4770      	bx	lr
   8936a:	bf00      	nop
   8936c:	000f4240 	.word	0x000f4240
   89370:	000000c0 	.word	0x000000c0
	...
   8937c:	69442020 	.word	0x69442020
   89380:	74636572 	.word	0x74636572
   89384:	3a6e6f69 	.word	0x3a6e6f69
   89388:	2e332520 	.word	0x2e332520
   8938c:	20206631 	.word	0x20206631
   89390:	00000000 	.word	0x00000000
   89394:	696c6163 	.word	0x696c6163
   89398:	74617262 	.word	0x74617262
   8939c:	6f632065 	.word	0x6f632065
   893a0:	7361706d 	.word	0x7361706d
   893a4:	00000073 	.word	0x00000073
   893a8:	69442020 	.word	0x69442020
   893ac:	74636572 	.word	0x74636572
   893b0:	3a6e6f69 	.word	0x3a6e6f69
   893b4:	64312520 	.word	0x64312520
   893b8:	00002020 	.word	0x00002020
   893bc:	74756873 	.word	0x74756873
   893c0:	676e6974 	.word	0x676e6974
   893c4:	776f6420 	.word	0x776f6420
   893c8:	2e2e2e6e 	.word	0x2e2e2e6e
   893cc:	00000000 	.word	0x00000000
   893d0:	666e6f63 	.word	0x666e6f63
   893d4:	206d7269 	.word	0x206d7269
   893d8:	74756873 	.word	0x74756873
   893dc:	6e776f64 	.word	0x6e776f64
   893e0:	0000003f 	.word	0x0000003f
   893e4:	20202020 	.word	0x20202020
   893e8:	534f6f6e 	.word	0x534f6f6e
   893ec:	454e4f20 	.word	0x454e4f20
   893f0:	00000000 	.word	0x00000000
   893f4:	74614d20 	.word	0x74614d20
   893f8:	00006863 	.word	0x00006863
   893fc:	6e655320 	.word	0x6e655320
   89400:	73726f73 	.word	0x73726f73
   89404:	00000000 	.word	0x00000000
   89408:	74655320 	.word	0x74655320
   8940c:	676e6974 	.word	0x676e6974
   89410:	00000073 	.word	0x00000073
   89414:	000893e4 	.word	0x000893e4
   89418:	000893f4 	.word	0x000893f4
   8941c:	000893fc 	.word	0x000893fc
   89420:	00089408 	.word	0x00089408
   89424:	6c614220 	.word	0x6c614220
   89428:	0000006c 	.word	0x0000006c
   8942c:	6d6f4320 	.word	0x6d6f4320
   89430:	73736170 	.word	0x73736170
   89434:	00000000 	.word	0x00000000
   89438:	6e694c20 	.word	0x6e694c20
   8943c:	00000065 	.word	0x00000065
   89440:	00000020 	.word	0x00000020
   89444:	00089424 	.word	0x00089424
   89448:	0008942c 	.word	0x0008942c
   8944c:	00089438 	.word	0x00089438
   89450:	00089440 	.word	0x00089440
   89454:	00089440 	.word	0x00089440
   89458:	00089440 	.word	0x00089440
   8945c:	00089440 	.word	0x00089440
   89460:	00089440 	.word	0x00089440
   89464:	0000003e 	.word	0x0000003e
   89468:	25753325 	.word	0x25753325
   8946c:	00000025 	.word	0x00000025
   89470:	75322520 	.word	0x75322520
   89474:	00002525 	.word	0x00002525
   89478:	31252020 	.word	0x31252020
   8947c:	00252575 	.word	0x00252575
   89480:	746f6f62 	.word	0x746f6f62
   89484:	20676e69 	.word	0x20676e69
   89488:	534f6f6e 	.word	0x534f6f6e
   8948c:	00202020 	.word	0x00202020
   89490:	0000002e 	.word	0x0000002e

00089494 <_global_impure_ptr>:
   89494:	200701a8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   894a4:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   894b4:	46454443 00000000 33323130 37363534     CDEF....01234567
   894c4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   894d4:	0000296c 00000030                       l)..0...

000894dc <blanks.7223>:
   894dc:	20202020 20202020 20202020 20202020                     

000894ec <zeroes.7224>:
   894ec:	30303030 30303030 30303030 30303030     0000000000000000
   894fc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8950c:	00000000                                ....

00089510 <__mprec_bigtens>:
   89510:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   89520:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   89530:	7f73bf3c 75154fdd                       <.s..O.u

00089538 <__mprec_tens>:
   89538:	00000000 3ff00000 00000000 40240000     .......?......$@
   89548:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   89558:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   89568:	00000000 412e8480 00000000 416312d0     .......A......cA
   89578:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   89588:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   89598:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   895a8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   895b8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   895c8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   895d8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   895e8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   895f8:	79d99db4 44ea7843                       ...yCx.D

00089600 <p05.6055>:
   89600:	00000005 00000019 0000007d 00000043     ........}...C...
   89610:	49534f50 00000058 0000002e              POSIX.......

0008961c <_ctype_>:
   8961c:	20202000 20202020 28282020 20282828     .         ((((( 
   8962c:	20202020 20202020 20202020 20202020                     
   8963c:	10108820 10101010 10101010 10101010      ...............
   8964c:	04040410 04040404 10040404 10101010     ................
   8965c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8966c:	01010101 01010101 01010101 10101010     ................
   8967c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8968c:	02020202 02020202 02020202 10101010     ................
   8969c:	00000020 00000000 00000000 00000000      ...............
	...

00089720 <_init>:
   89720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89722:	bf00      	nop
   89724:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89726:	bc08      	pop	{r3}
   89728:	469e      	mov	lr, r3
   8972a:	4770      	bx	lr

0008972c <__init_array_start>:
   8972c:	000868f9 	.word	0x000868f9

00089730 <__frame_dummy_init_array_entry>:
   89730:	00080119                                ....

00089734 <_fini>:
   89734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89736:	bf00      	nop
   89738:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8973a:	bc08      	pop	{r3}
   8973c:	469e      	mov	lr, r3
   8973e:	4770      	bx	lr

00089740 <__fini_array_start>:
   89740:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007019c 	.word	0x2007019c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <print_menu>:
2007018c:	00000101                                         .

2007018d <allow_leds>:
2007018d:	02000001                                         ...

20070190 <menu_info>:
20070190:	04020202 03010101 01010101              ............

2007019c <SystemCoreClock>:
2007019c:	003d0900                                ..=.

200701a0 <update_dots>:
200701a0:	00000001                                ....

200701a4 <_impure_ptr>:
200701a4:	200701a8                                ... 

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	20070ff0                                ... 

200705d4 <__malloc_av_>:
	...
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 

200709dc <__malloc_sbrk_base>:
200709dc:	ffffffff                                ....

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__global_locale>:
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00000043 00000000 00000000 00000000     C...............
	...
20070ac4:	00088eb9 00088a59 00000000 0008961c     ....Y...........
20070ad4:	00089618 000894b8 000894b8 000894b8     ................
20070ae4:	000894b8 000894b8 000894b8 000894b8     ................
20070af4:	000894b8 000894b8 ffffffff ffffffff     ................
20070b04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
