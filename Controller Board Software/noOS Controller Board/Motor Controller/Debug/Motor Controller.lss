
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009e54  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00089e54  00089e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b50  20070000  00089e5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004b4  20070b50  0008a9ac  00020b50  2**2
                  ALLOC
  4 .stack        00002004  20071004  0008ae60  00020b50  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b79  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001ea03  00000000  00000000  00020bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003ea0  00000000  00000000  0003f5d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000094e0  00000000  00000000  00043475  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001040  00000000  00000000  0004c955  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f78  00000000  00000000  0004d995  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008c69  00000000  00000000  0004e90d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000141d2  00000000  00000000  00057576  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00063a42  00000000  00000000  0006b748  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000051d0  00000000  00000000  000cf18c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	08 30 07 20 29 44 08 00 21 44 08 00 21 44 08 00     .0. )D..!D..!D..
   80010:	21 44 08 00 21 44 08 00 21 44 08 00 00 00 00 00     !D..!D..!D......
	...
   8002c:	21 44 08 00 21 44 08 00 00 00 00 00 21 44 08 00     !D..!D......!D..
   8003c:	61 33 08 00 21 44 08 00 21 44 08 00 21 44 08 00     a3..!D..!D..!D..
   8004c:	21 44 08 00 21 44 08 00 21 44 08 00 21 44 08 00     !D..!D..!D..!D..
   8005c:	21 44 08 00 21 44 08 00 21 44 08 00 00 00 00 00     !D..!D..!D......
   8006c:	21 44 08 00 21 44 08 00 21 44 08 00 21 44 08 00     !D..!D..!D..!D..
	...
   80084:	21 44 08 00 21 44 08 00 21 44 08 00 21 44 08 00     !D..!D..!D..!D..
   80094:	21 44 08 00 b5 14 08 00 21 44 08 00 21 44 08 00     !D......!D..!D..
   800a4:	00 00 00 00 21 44 08 00 21 44 08 00 51 30 08 00     ....!D..!D..Q0..
   800b4:	21 44 08 00 21 44 08 00 21 44 08 00 21 44 08 00     !D..!D..!D..!D..
   800c4:	21 44 08 00 21 44 08 00 21 44 08 00 21 44 08 00     !D..!D..!D..!D..
   800d4:	21 44 08 00 21 44 08 00 6d 0f 08 00 21 44 08 00     !D..!D..m...!D..
   800e4:	21 44 08 00 21 44 08 00 21 44 08 00 21 44 08 00     !D..!D..!D..!D..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b50 	.word	0x20070b50
   80110:	00000000 	.word	0x00000000
   80114:	00089e5c 	.word	0x00089e5c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00089e5c 	.word	0x00089e5c
   80154:	20070b54 	.word	0x20070b54
   80158:	00089e5c 	.word	0x00089e5c
   8015c:	00000000 	.word	0x00000000

00080160 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   80160:	b580      	push	{r7, lr}
   80162:	b082      	sub	sp, #8
   80164:	af00      	add	r7, sp, #0
   80166:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   80168:	6878      	ldr	r0, [r7, #4]
   8016a:	4b04      	ldr	r3, [pc, #16]	; (8017c <usart_spi_enable+0x1c>)
   8016c:	4798      	blx	r3
	usart_enable_rx(p_usart);
   8016e:	6878      	ldr	r0, [r7, #4]
   80170:	4b03      	ldr	r3, [pc, #12]	; (80180 <usart_spi_enable+0x20>)
   80172:	4798      	blx	r3
}
   80174:	bf00      	nop
   80176:	3708      	adds	r7, #8
   80178:	46bd      	mov	sp, r7
   8017a:	bd80      	pop	{r7, pc}
   8017c:	000809b5 	.word	0x000809b5
   80180:	000809fd 	.word	0x000809fd

00080184 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   80184:	b580      	push	{r7, lr}
   80186:	b082      	sub	sp, #8
   80188:	af00      	add	r7, sp, #0
   8018a:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   8018c:	6878      	ldr	r0, [r7, #4]
   8018e:	4b04      	ldr	r3, [pc, #16]	; (801a0 <usart_spi_disable+0x1c>)
   80190:	4798      	blx	r3
	usart_disable_rx(p_usart);
   80192:	6878      	ldr	r0, [r7, #4]
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <usart_spi_disable+0x20>)
   80196:	4798      	blx	r3
}
   80198:	bf00      	nop
   8019a:	3708      	adds	r7, #8
   8019c:	46bd      	mov	sp, r7
   8019e:	bd80      	pop	{r7, pc}
   801a0:	000809cd 	.word	0x000809cd
   801a4:	00080a15 	.word	0x00080a15

000801a8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801a8:	b480      	push	{r7}
   801aa:	b085      	sub	sp, #20
   801ac:	af00      	add	r7, sp, #0
   801ae:	60f8      	str	r0, [r7, #12]
   801b0:	60b9      	str	r1, [r7, #8]
   801b2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801b4:	68bb      	ldr	r3, [r7, #8]
   801b6:	2b00      	cmp	r3, #0
   801b8:	d007      	beq.n	801ca <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   801ba:	68bb      	ldr	r3, [r7, #8]
   801bc:	681a      	ldr	r2, [r3, #0]
   801be:	68fb      	ldr	r3, [r7, #12]
   801c0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   801c2:	68bb      	ldr	r3, [r7, #8]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	68fb      	ldr	r3, [r7, #12]
   801c8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   801ca:	687b      	ldr	r3, [r7, #4]
   801cc:	2b00      	cmp	r3, #0
   801ce:	d007      	beq.n	801e0 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	681a      	ldr	r2, [r3, #0]
   801d4:	68fb      	ldr	r3, [r7, #12]
   801d6:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   801d8:	687b      	ldr	r3, [r7, #4]
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	68fb      	ldr	r3, [r7, #12]
   801de:	61da      	str	r2, [r3, #28]
	}
}
   801e0:	bf00      	nop
   801e2:	3714      	adds	r7, #20
   801e4:	46bd      	mov	sp, r7
   801e6:	bc80      	pop	{r7}
   801e8:	4770      	bx	lr

000801ea <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801ea:	b480      	push	{r7}
   801ec:	b085      	sub	sp, #20
   801ee:	af00      	add	r7, sp, #0
   801f0:	60f8      	str	r0, [r7, #12]
   801f2:	60b9      	str	r1, [r7, #8]
   801f4:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801f6:	68bb      	ldr	r3, [r7, #8]
   801f8:	2b00      	cmp	r3, #0
   801fa:	d007      	beq.n	8020c <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   801fc:	68bb      	ldr	r3, [r7, #8]
   801fe:	681a      	ldr	r2, [r3, #0]
   80200:	68fb      	ldr	r3, [r7, #12]
   80202:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   80204:	68bb      	ldr	r3, [r7, #8]
   80206:	685a      	ldr	r2, [r3, #4]
   80208:	68fb      	ldr	r3, [r7, #12]
   8020a:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b00      	cmp	r3, #0
   80210:	d007      	beq.n	80222 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   80212:	687b      	ldr	r3, [r7, #4]
   80214:	681a      	ldr	r2, [r3, #0]
   80216:	68fb      	ldr	r3, [r7, #12]
   80218:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   8021a:	687b      	ldr	r3, [r7, #4]
   8021c:	685a      	ldr	r2, [r3, #4]
   8021e:	68fb      	ldr	r3, [r7, #12]
   80220:	615a      	str	r2, [r3, #20]
	}
}
   80222:	bf00      	nop
   80224:	3714      	adds	r7, #20
   80226:	46bd      	mov	sp, r7
   80228:	bc80      	pop	{r7}
   8022a:	4770      	bx	lr

0008022c <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8022c:	b480      	push	{r7}
   8022e:	b083      	sub	sp, #12
   80230:	af00      	add	r7, sp, #0
   80232:	6078      	str	r0, [r7, #4]
   80234:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   80236:	683a      	ldr	r2, [r7, #0]
   80238:	f240 1301 	movw	r3, #257	; 0x101
   8023c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8023e:	687a      	ldr	r2, [r7, #4]
   80240:	6213      	str	r3, [r2, #32]
}
   80242:	bf00      	nop
   80244:	370c      	adds	r7, #12
   80246:	46bd      	mov	sp, r7
   80248:	bc80      	pop	{r7}
   8024a:	4770      	bx	lr

0008024c <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8024c:	b480      	push	{r7}
   8024e:	b083      	sub	sp, #12
   80250:	af00      	add	r7, sp, #0
   80252:	6078      	str	r0, [r7, #4]
   80254:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   80256:	683a      	ldr	r2, [r7, #0]
   80258:	f240 2302 	movw	r3, #514	; 0x202
   8025c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8025e:	687a      	ldr	r2, [r7, #4]
   80260:	6213      	str	r3, [r2, #32]
}
   80262:	bf00      	nop
   80264:	370c      	adds	r7, #12
   80266:	46bd      	mov	sp, r7
   80268:	bc80      	pop	{r7}
   8026a:	4770      	bx	lr

0008026c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8026c:	b4b0      	push	{r4, r5, r7}
   8026e:	b091      	sub	sp, #68	; 0x44
   80270:	af00      	add	r7, sp, #0
   80272:	6078      	str	r0, [r7, #4]
   80274:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80276:	4b1b      	ldr	r3, [pc, #108]	; (802e4 <pwm_clocks_generate+0x78>)
   80278:	f107 040c 	add.w	r4, r7, #12
   8027c:	461d      	mov	r5, r3
   8027e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8028a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8028e:	2300      	movs	r3, #0
   80290:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   80294:	009b      	lsls	r3, r3, #2
   80296:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8029a:	4413      	add	r3, r2
   8029c:	f853 3c34 	ldr.w	r3, [r3, #-52]
   802a0:	683a      	ldr	r2, [r7, #0]
   802a2:	fbb2 f2f3 	udiv	r2, r2, r3
   802a6:	687b      	ldr	r3, [r7, #4]
   802a8:	fbb2 f3f3 	udiv	r3, r2, r3
   802ac:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   802b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   802b4:	d906      	bls.n	802c4 <pwm_clocks_generate+0x58>
			break;
		}
		ul_pre++;
   802b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802b8:	3301      	adds	r3, #1
   802ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   802bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802be:	2b0a      	cmp	r3, #10
   802c0:	d9e7      	bls.n	80292 <pwm_clocks_generate+0x26>
   802c2:	e000      	b.n	802c6 <pwm_clocks_generate+0x5a>
			break;
   802c4:	bf00      	nop

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   802c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802c8:	2b0a      	cmp	r3, #10
   802ca:	d804      	bhi.n	802d6 <pwm_clocks_generate+0x6a>
		return ul_div | (ul_pre << 8);
   802cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802ce:	021a      	lsls	r2, r3, #8
   802d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   802d2:	4313      	orrs	r3, r2
   802d4:	e001      	b.n	802da <pwm_clocks_generate+0x6e>
	} else {
		return PWM_INVALID_ARGUMENT;
   802d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
   802da:	4618      	mov	r0, r3
   802dc:	3744      	adds	r7, #68	; 0x44
   802de:	46bd      	mov	sp, r7
   802e0:	bcb0      	pop	{r4, r5, r7}
   802e2:	4770      	bx	lr
   802e4:	000899ec 	.word	0x000899ec

000802e8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   802e8:	b580      	push	{r7, lr}
   802ea:	b084      	sub	sp, #16
   802ec:	af00      	add	r7, sp, #0
   802ee:	6078      	str	r0, [r7, #4]
   802f0:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
   802f2:	2300      	movs	r3, #0
   802f4:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   802f6:	683b      	ldr	r3, [r7, #0]
   802f8:	681b      	ldr	r3, [r3, #0]
   802fa:	2b00      	cmp	r3, #0
   802fc:	d011      	beq.n	80322 <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   802fe:	683b      	ldr	r3, [r7, #0]
   80300:	681a      	ldr	r2, [r3, #0]
   80302:	683b      	ldr	r3, [r7, #0]
   80304:	689b      	ldr	r3, [r3, #8]
   80306:	4619      	mov	r1, r3
   80308:	4610      	mov	r0, r2
   8030a:	4b16      	ldr	r3, [pc, #88]	; (80364 <pwm_init+0x7c>)
   8030c:	4798      	blx	r3
   8030e:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
   80310:	68bb      	ldr	r3, [r7, #8]
   80312:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80316:	4293      	cmp	r3, r2
   80318:	d101      	bne.n	8031e <pwm_init+0x36>
			return result;
   8031a:	68bb      	ldr	r3, [r7, #8]
   8031c:	e01e      	b.n	8035c <pwm_init+0x74>
		}

		clock = result;
   8031e:	68bb      	ldr	r3, [r7, #8]
   80320:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80322:	683b      	ldr	r3, [r7, #0]
   80324:	685b      	ldr	r3, [r3, #4]
   80326:	2b00      	cmp	r3, #0
   80328:	d014      	beq.n	80354 <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8032a:	683b      	ldr	r3, [r7, #0]
   8032c:	685a      	ldr	r2, [r3, #4]
   8032e:	683b      	ldr	r3, [r7, #0]
   80330:	689b      	ldr	r3, [r3, #8]
   80332:	4619      	mov	r1, r3
   80334:	4610      	mov	r0, r2
   80336:	4b0b      	ldr	r3, [pc, #44]	; (80364 <pwm_init+0x7c>)
   80338:	4798      	blx	r3
   8033a:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
   8033c:	68bb      	ldr	r3, [r7, #8]
   8033e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80342:	4293      	cmp	r3, r2
   80344:	d101      	bne.n	8034a <pwm_init+0x62>
			return result;
   80346:	68bb      	ldr	r3, [r7, #8]
   80348:	e008      	b.n	8035c <pwm_init+0x74>
		}

		clock |= (result << 16);
   8034a:	68bb      	ldr	r3, [r7, #8]
   8034c:	041b      	lsls	r3, r3, #16
   8034e:	68fa      	ldr	r2, [r7, #12]
   80350:	4313      	orrs	r3, r2
   80352:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80354:	687b      	ldr	r3, [r7, #4]
   80356:	68fa      	ldr	r2, [r7, #12]
   80358:	601a      	str	r2, [r3, #0]
#endif
	return 0;
   8035a:	2300      	movs	r3, #0
}
   8035c:	4618      	mov	r0, r3
   8035e:	3710      	adds	r7, #16
   80360:	46bd      	mov	sp, r7
   80362:	bd80      	pop	{r7, pc}
   80364:	0008026d 	.word	0x0008026d

00080368 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80368:	b480      	push	{r7}
   8036a:	b087      	sub	sp, #28
   8036c:	af00      	add	r7, sp, #0
   8036e:	6078      	str	r0, [r7, #4]
   80370:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
   80372:	2300      	movs	r3, #0
   80374:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
   80376:	683b      	ldr	r3, [r7, #0]
   80378:	681b      	ldr	r3, [r3, #0]
   8037a:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8037c:	683b      	ldr	r3, [r7, #0]
   8037e:	685b      	ldr	r3, [r3, #4]
   80380:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
   80384:	683a      	ldr	r2, [r7, #0]
   80386:	7a92      	ldrb	r2, [r2, #10]
   80388:	0252      	lsls	r2, r2, #9
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8038a:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   8038c:	683a      	ldr	r2, [r7, #0]
   8038e:	8a92      	ldrh	r2, [r2, #20]
			(p_channel->polarity << 9) |
   80390:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
   80392:	683a      	ldr	r2, [r7, #0]
   80394:	7d92      	ldrb	r2, [r2, #22]
   80396:	0412      	lsls	r2, r2, #16
			(p_channel->counter_event) |
   80398:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
   8039a:	683a      	ldr	r2, [r7, #0]
   8039c:	7dd2      	ldrb	r2, [r2, #23]
   8039e:	0452      	lsls	r2, r2, #17
			(p_channel->b_deadtime_generator << 16) |
   803a0:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
   803a2:	683a      	ldr	r2, [r7, #0]
   803a4:	7e12      	ldrb	r2, [r2, #24]
   803a6:	0492      	lsls	r2, r2, #18
			(p_channel->b_pwmh_output_inverted << 17) |
   803a8:	4313      	orrs	r3, r2
#endif
			(p_channel->alignment);
   803aa:	683a      	ldr	r2, [r7, #0]
   803ac:	8912      	ldrh	r2, [r2, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803ae:	4313      	orrs	r3, r2
   803b0:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   803b2:	687a      	ldr	r2, [r7, #4]
   803b4:	693b      	ldr	r3, [r7, #16]
   803b6:	3310      	adds	r3, #16
   803b8:	015b      	lsls	r3, r3, #5
   803ba:	4413      	add	r3, r2
   803bc:	697a      	ldr	r2, [r7, #20]
   803be:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   803c0:	683b      	ldr	r3, [r7, #0]
   803c2:	68da      	ldr	r2, [r3, #12]
   803c4:	6879      	ldr	r1, [r7, #4]
   803c6:	693b      	ldr	r3, [r7, #16]
   803c8:	3310      	adds	r3, #16
   803ca:	015b      	lsls	r3, r3, #5
   803cc:	440b      	add	r3, r1
   803ce:	3304      	adds	r3, #4
   803d0:	601a      	str	r2, [r3, #0]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   803d2:	683b      	ldr	r3, [r7, #0]
   803d4:	691a      	ldr	r2, [r3, #16]
   803d6:	6879      	ldr	r1, [r7, #4]
   803d8:	693b      	ldr	r3, [r7, #16]
   803da:	015b      	lsls	r3, r3, #5
   803dc:	440b      	add	r3, r1
   803de:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   803e2:	601a      	str	r2, [r3, #0]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   803e4:	683b      	ldr	r3, [r7, #0]
   803e6:	7d9b      	ldrb	r3, [r3, #22]
   803e8:	2b00      	cmp	r3, #0
   803ea:	d00d      	beq.n	80408 <pwm_channel_init+0xa0>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   803ec:	683b      	ldr	r3, [r7, #0]
   803ee:	8b9b      	ldrh	r3, [r3, #28]
   803f0:	041b      	lsls	r3, r3, #16
   803f2:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   803f4:	683b      	ldr	r3, [r7, #0]
   803f6:	8b5b      	ldrh	r3, [r3, #26]
   803f8:	431a      	orrs	r2, r3
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   803fa:	6879      	ldr	r1, [r7, #4]
   803fc:	693b      	ldr	r3, [r7, #16]
   803fe:	015b      	lsls	r3, r3, #5
   80400:	440b      	add	r3, r1
   80402:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80406:	601a      	str	r2, [r3, #0]
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80408:	687b      	ldr	r3, [r7, #4]
   8040a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   8040c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   80410:	693b      	ldr	r3, [r7, #16]
   80412:	fa01 f303 	lsl.w	r3, r1, r3
   80416:	43db      	mvns	r3, r3
   80418:	4013      	ands	r3, r2
   8041a:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   8041c:	683b      	ldr	r3, [r7, #0]
   8041e:	7f9b      	ldrb	r3, [r3, #30]
   80420:	461a      	mov	r2, r3
   80422:	693b      	ldr	r3, [r7, #16]
   80424:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80426:	683b      	ldr	r3, [r7, #0]
   80428:	7fdb      	ldrb	r3, [r3, #31]
   8042a:	4619      	mov	r1, r3
   8042c:	693b      	ldr	r3, [r7, #16]
   8042e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   80432:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80434:	4313      	orrs	r3, r2
   80436:	461a      	mov	r2, r3
   80438:	697b      	ldr	r3, [r7, #20]
   8043a:	4313      	orrs	r3, r2
   8043c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OS = tmp_reg;
   8043e:	687b      	ldr	r3, [r7, #4]
   80440:	697a      	ldr	r2, [r7, #20]
   80442:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80444:	687b      	ldr	r3, [r7, #4]
   80446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   8044c:	693b      	ldr	r3, [r7, #16]
   8044e:	fa01 f303 	lsl.w	r3, r1, r3
   80452:	43db      	mvns	r3, r3
   80454:	4013      	ands	r3, r2
   80456:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80458:	683b      	ldr	r3, [r7, #0]
   8045a:	f893 3020 	ldrb.w	r3, [r3, #32]
   8045e:	461a      	mov	r2, r3
   80460:	693b      	ldr	r3, [r7, #16]
   80462:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80464:	683b      	ldr	r3, [r7, #0]
   80466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   8046a:	4619      	mov	r1, r3
   8046c:	693b      	ldr	r3, [r7, #16]
   8046e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   80472:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80474:	4313      	orrs	r3, r2
   80476:	461a      	mov	r2, r3
   80478:	697b      	ldr	r3, [r7, #20]
   8047a:	4313      	orrs	r3, r2
   8047c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OOV = tmp_reg;
   8047e:	687b      	ldr	r3, [r7, #4]
   80480:	697a      	ldr	r2, [r7, #20]
   80482:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80484:	2201      	movs	r2, #1
   80486:	693b      	ldr	r3, [r7, #16]
   80488:	fa02 f303 	lsl.w	r3, r2, r3
   8048c:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
   8048e:	683b      	ldr	r3, [r7, #0]
   80490:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   80494:	2b00      	cmp	r3, #0
   80496:	d006      	beq.n	804a6 <pwm_channel_init+0x13e>
		p_pwm->PWM_SCM |= channel;
   80498:	687b      	ldr	r3, [r7, #4]
   8049a:	6a1a      	ldr	r2, [r3, #32]
   8049c:	68fb      	ldr	r3, [r7, #12]
   8049e:	431a      	orrs	r2, r3
   804a0:	687b      	ldr	r3, [r7, #4]
   804a2:	621a      	str	r2, [r3, #32]
   804a4:	e006      	b.n	804b4 <pwm_channel_init+0x14c>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   804a6:	687b      	ldr	r3, [r7, #4]
   804a8:	6a1a      	ldr	r2, [r3, #32]
   804aa:	68fb      	ldr	r3, [r7, #12]
   804ac:	43db      	mvns	r3, r3
   804ae:	401a      	ands	r2, r3
   804b0:	687b      	ldr	r3, [r7, #4]
   804b2:	621a      	str	r2, [r3, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   804b4:	683b      	ldr	r3, [r7, #0]
   804b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   804ba:	2b01      	cmp	r3, #1
   804bc:	d109      	bne.n	804d2 <pwm_channel_init+0x16a>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   804be:	687b      	ldr	r3, [r7, #4]
   804c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804c2:	2101      	movs	r1, #1
   804c4:	693a      	ldr	r2, [r7, #16]
   804c6:	fa01 f202 	lsl.w	r2, r1, r2
   804ca:	431a      	orrs	r2, r3
   804cc:	687b      	ldr	r3, [r7, #4]
   804ce:	669a      	str	r2, [r3, #104]	; 0x68
   804d0:	e009      	b.n	804e6 <pwm_channel_init+0x17e>
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   804d2:	687b      	ldr	r3, [r7, #4]
   804d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804d6:	2101      	movs	r1, #1
   804d8:	693a      	ldr	r2, [r7, #16]
   804da:	fa01 f202 	lsl.w	r2, r1, r2
   804de:	43d2      	mvns	r2, r2
   804e0:	401a      	ands	r2, r3
   804e2:	687b      	ldr	r3, [r7, #4]
   804e4:	669a      	str	r2, [r3, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   804e6:	683b      	ldr	r3, [r7, #0]
   804e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   804ec:	2b01      	cmp	r3, #1
   804ee:	d10a      	bne.n	80506 <pwm_channel_init+0x19e>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   804f0:	687b      	ldr	r3, [r7, #4]
   804f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804f4:	2101      	movs	r1, #1
   804f6:	693a      	ldr	r2, [r7, #16]
   804f8:	fa01 f202 	lsl.w	r2, r1, r2
   804fc:	0412      	lsls	r2, r2, #16
   804fe:	431a      	orrs	r2, r3
   80500:	687b      	ldr	r3, [r7, #4]
   80502:	669a      	str	r2, [r3, #104]	; 0x68
   80504:	e00a      	b.n	8051c <pwm_channel_init+0x1b4>
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80506:	687b      	ldr	r3, [r7, #4]
   80508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8050a:	2101      	movs	r1, #1
   8050c:	693a      	ldr	r2, [r7, #16]
   8050e:	fa01 f202 	lsl.w	r2, r1, r2
   80512:	0412      	lsls	r2, r2, #16
   80514:	43d2      	mvns	r2, r2
   80516:	401a      	ands	r2, r3
   80518:	687b      	ldr	r3, [r7, #4]
   8051a:	669a      	str	r2, [r3, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
   8051c:	2300      	movs	r3, #0
   8051e:	60bb      	str	r3, [r7, #8]
#if (SAM3XA)
	if (ch_num < 4) {
   80520:	693b      	ldr	r3, [r7, #16]
   80522:	2b03      	cmp	r3, #3
   80524:	d81d      	bhi.n	80562 <pwm_channel_init+0x1fa>
		ch_num *= 8;
   80526:	693b      	ldr	r3, [r7, #16]
   80528:	00db      	lsls	r3, r3, #3
   8052a:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE1;
   8052c:	687b      	ldr	r3, [r7, #4]
   8052e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   80530:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80532:	22ff      	movs	r2, #255	; 0xff
   80534:	693b      	ldr	r3, [r7, #16]
   80536:	fa02 f303 	lsl.w	r3, r2, r3
   8053a:	43db      	mvns	r3, r3
   8053c:	461a      	mov	r2, r3
   8053e:	68bb      	ldr	r3, [r7, #8]
   80540:	4013      	ands	r3, r2
   80542:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80544:	683b      	ldr	r3, [r7, #0]
   80546:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   8054a:	461a      	mov	r2, r3
   8054c:	693b      	ldr	r3, [r7, #16]
   8054e:	fa02 f303 	lsl.w	r3, r2, r3
   80552:	461a      	mov	r2, r3
   80554:	68bb      	ldr	r3, [r7, #8]
   80556:	4313      	orrs	r3, r2
   80558:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8055a:	687b      	ldr	r3, [r7, #4]
   8055c:	68ba      	ldr	r2, [r7, #8]
   8055e:	66da      	str	r2, [r3, #108]	; 0x6c
   80560:	e01f      	b.n	805a2 <pwm_channel_init+0x23a>
	} else {
		ch_num -= 4;
   80562:	693b      	ldr	r3, [r7, #16]
   80564:	3b04      	subs	r3, #4
   80566:	613b      	str	r3, [r7, #16]
		ch_num *= 8;
   80568:	693b      	ldr	r3, [r7, #16]
   8056a:	00db      	lsls	r3, r3, #3
   8056c:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE2;
   8056e:	687b      	ldr	r3, [r7, #4]
   80570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80572:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80574:	22ff      	movs	r2, #255	; 0xff
   80576:	693b      	ldr	r3, [r7, #16]
   80578:	fa02 f303 	lsl.w	r3, r2, r3
   8057c:	43db      	mvns	r3, r3
   8057e:	461a      	mov	r2, r3
   80580:	68bb      	ldr	r3, [r7, #8]
   80582:	4013      	ands	r3, r2
   80584:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80586:	683b      	ldr	r3, [r7, #0]
   80588:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   8058c:	461a      	mov	r2, r3
   8058e:	693b      	ldr	r3, [r7, #16]
   80590:	fa02 f303 	lsl.w	r3, r2, r3
   80594:	461a      	mov	r2, r3
   80596:	68bb      	ldr	r3, [r7, #8]
   80598:	4313      	orrs	r3, r2
   8059a:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	68ba      	ldr	r2, [r7, #8]
   805a0:	671a      	str	r2, [r3, #112]	; 0x70
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
   805a2:	2300      	movs	r3, #0
}
   805a4:	4618      	mov	r0, r3
   805a6:	371c      	adds	r7, #28
   805a8:	46bd      	mov	sp, r7
   805aa:	bc80      	pop	{r7}
   805ac:	4770      	bx	lr

000805ae <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   805ae:	b480      	push	{r7}
   805b0:	b087      	sub	sp, #28
   805b2:	af00      	add	r7, sp, #0
   805b4:	60f8      	str	r0, [r7, #12]
   805b6:	60b9      	str	r1, [r7, #8]
   805b8:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
   805ba:	68bb      	ldr	r3, [r7, #8]
   805bc:	681b      	ldr	r3, [r3, #0]
   805be:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   805c0:	68bb      	ldr	r3, [r7, #8]
   805c2:	691a      	ldr	r2, [r3, #16]
   805c4:	687b      	ldr	r3, [r7, #4]
   805c6:	429a      	cmp	r2, r3
   805c8:	d202      	bcs.n	805d0 <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
   805ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   805ce:	e00b      	b.n	805e8 <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   805d0:	68bb      	ldr	r3, [r7, #8]
   805d2:	687a      	ldr	r2, [r7, #4]
   805d4:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   805d6:	68fa      	ldr	r2, [r7, #12]
   805d8:	697b      	ldr	r3, [r7, #20]
   805da:	015b      	lsls	r3, r3, #5
   805dc:	4413      	add	r3, r2
   805de:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805e2:	687a      	ldr	r2, [r7, #4]
   805e4:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
   805e6:	2300      	movs	r3, #0
}
   805e8:	4618      	mov	r0, r3
   805ea:	371c      	adds	r7, #28
   805ec:	46bd      	mov	sp, r7
   805ee:	bc80      	pop	{r7}
   805f0:	4770      	bx	lr

000805f2 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
   805f2:	b480      	push	{r7}
   805f4:	b083      	sub	sp, #12
   805f6:	af00      	add	r7, sp, #0
   805f8:	6078      	str	r0, [r7, #4]
   805fa:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
   805fc:	2201      	movs	r2, #1
   805fe:	683b      	ldr	r3, [r7, #0]
   80600:	fa02 f303 	lsl.w	r3, r2, r3
   80604:	461a      	mov	r2, r3
   80606:	687b      	ldr	r3, [r7, #4]
   80608:	605a      	str	r2, [r3, #4]
}
   8060a:	bf00      	nop
   8060c:	370c      	adds	r7, #12
   8060e:	46bd      	mov	sp, r7
   80610:	bc80      	pop	{r7}
   80612:	4770      	bx	lr

00080614 <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
   80614:	b480      	push	{r7}
   80616:	b083      	sub	sp, #12
   80618:	af00      	add	r7, sp, #0
   8061a:	6078      	str	r0, [r7, #4]
   8061c:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
   8061e:	2201      	movs	r2, #1
   80620:	683b      	ldr	r3, [r7, #0]
   80622:	fa02 f303 	lsl.w	r3, r2, r3
   80626:	461a      	mov	r2, r3
   80628:	687b      	ldr	r3, [r7, #4]
   8062a:	609a      	str	r2, [r3, #8]
}
   8062c:	bf00      	nop
   8062e:	370c      	adds	r7, #12
   80630:	46bd      	mov	sp, r7
   80632:	bc80      	pop	{r7}
   80634:	4770      	bx	lr

00080636 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   80636:	b480      	push	{r7}
   80638:	b083      	sub	sp, #12
   8063a:	af00      	add	r7, sp, #0
   8063c:	6078      	str	r0, [r7, #4]
   8063e:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   80640:	687b      	ldr	r3, [r7, #4]
   80642:	685b      	ldr	r3, [r3, #4]
   80644:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   80648:	687b      	ldr	r3, [r7, #4]
   8064a:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   8064c:	687b      	ldr	r3, [r7, #4]
   8064e:	685a      	ldr	r2, [r3, #4]
   80650:	683b      	ldr	r3, [r7, #0]
   80652:	041b      	lsls	r3, r3, #16
   80654:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80658:	431a      	orrs	r2, r3
   8065a:	687b      	ldr	r3, [r7, #4]
   8065c:	605a      	str	r2, [r3, #4]
}
   8065e:	bf00      	nop
   80660:	370c      	adds	r7, #12
   80662:	46bd      	mov	sp, r7
   80664:	bc80      	pop	{r7}
   80666:	4770      	bx	lr

00080668 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   80668:	b480      	push	{r7}
   8066a:	b085      	sub	sp, #20
   8066c:	af00      	add	r7, sp, #0
   8066e:	60f8      	str	r0, [r7, #12]
   80670:	60b9      	str	r1, [r7, #8]
   80672:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   80674:	687b      	ldr	r3, [r7, #4]
   80676:	2b00      	cmp	r3, #0
   80678:	d00c      	beq.n	80694 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   8067a:	68fb      	ldr	r3, [r7, #12]
   8067c:	68ba      	ldr	r2, [r7, #8]
   8067e:	320c      	adds	r2, #12
   80680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80684:	f043 0101 	orr.w	r1, r3, #1
   80688:	68fb      	ldr	r3, [r7, #12]
   8068a:	68ba      	ldr	r2, [r7, #8]
   8068c:	320c      	adds	r2, #12
   8068e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
   80692:	e00b      	b.n	806ac <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   80694:	68fb      	ldr	r3, [r7, #12]
   80696:	68ba      	ldr	r2, [r7, #8]
   80698:	320c      	adds	r2, #12
   8069a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8069e:	f023 0101 	bic.w	r1, r3, #1
   806a2:	68fb      	ldr	r3, [r7, #12]
   806a4:	68ba      	ldr	r2, [r7, #8]
   806a6:	320c      	adds	r2, #12
   806a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   806ac:	bf00      	nop
   806ae:	3714      	adds	r7, #20
   806b0:	46bd      	mov	sp, r7
   806b2:	bc80      	pop	{r7}
   806b4:	4770      	bx	lr

000806b6 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   806b6:	b480      	push	{r7}
   806b8:	b085      	sub	sp, #20
   806ba:	af00      	add	r7, sp, #0
   806bc:	60f8      	str	r0, [r7, #12]
   806be:	60b9      	str	r1, [r7, #8]
   806c0:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   806c2:	687b      	ldr	r3, [r7, #4]
   806c4:	2b00      	cmp	r3, #0
   806c6:	d00c      	beq.n	806e2 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   806c8:	68fb      	ldr	r3, [r7, #12]
   806ca:	68ba      	ldr	r2, [r7, #8]
   806cc:	320c      	adds	r2, #12
   806ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   806d2:	f043 0102 	orr.w	r1, r3, #2
   806d6:	68fb      	ldr	r3, [r7, #12]
   806d8:	68ba      	ldr	r2, [r7, #8]
   806da:	320c      	adds	r2, #12
   806dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
   806e0:	e00b      	b.n	806fa <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   806e2:	68fb      	ldr	r3, [r7, #12]
   806e4:	68ba      	ldr	r2, [r7, #8]
   806e6:	320c      	adds	r2, #12
   806e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   806ec:	f023 0102 	bic.w	r1, r3, #2
   806f0:	68fb      	ldr	r3, [r7, #12]
   806f2:	68ba      	ldr	r2, [r7, #8]
   806f4:	320c      	adds	r2, #12
   806f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   806fa:	bf00      	nop
   806fc:	3714      	adds	r7, #20
   806fe:	46bd      	mov	sp, r7
   80700:	bc80      	pop	{r7}
   80702:	4770      	bx	lr

00080704 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80704:	b480      	push	{r7}
   80706:	b085      	sub	sp, #20
   80708:	af00      	add	r7, sp, #0
   8070a:	60f8      	str	r0, [r7, #12]
   8070c:	60b9      	str	r1, [r7, #8]
   8070e:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   80710:	68fb      	ldr	r3, [r7, #12]
   80712:	68ba      	ldr	r2, [r7, #8]
   80714:	320c      	adds	r2, #12
   80716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8071a:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   8071e:	68fb      	ldr	r3, [r7, #12]
   80720:	68ba      	ldr	r2, [r7, #8]
   80722:	320c      	adds	r2, #12
   80724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80728:	68fb      	ldr	r3, [r7, #12]
   8072a:	68ba      	ldr	r2, [r7, #8]
   8072c:	320c      	adds	r2, #12
   8072e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   80732:	687b      	ldr	r3, [r7, #4]
   80734:	ea42 0103 	orr.w	r1, r2, r3
   80738:	68fb      	ldr	r3, [r7, #12]
   8073a:	68ba      	ldr	r2, [r7, #8]
   8073c:	320c      	adds	r2, #12
   8073e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80742:	bf00      	nop
   80744:	3714      	adds	r7, #20
   80746:	46bd      	mov	sp, r7
   80748:	bc80      	pop	{r7}
   8074a:	4770      	bx	lr

0008074c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   8074c:	b480      	push	{r7}
   8074e:	b087      	sub	sp, #28
   80750:	af00      	add	r7, sp, #0
   80752:	60f8      	str	r0, [r7, #12]
   80754:	60b9      	str	r1, [r7, #8]
   80756:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80758:	68fa      	ldr	r2, [r7, #12]
   8075a:	68bb      	ldr	r3, [r7, #8]
   8075c:	019b      	lsls	r3, r3, #6
   8075e:	4413      	add	r3, r2
   80760:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80762:	697b      	ldr	r3, [r7, #20]
   80764:	2202      	movs	r2, #2
   80766:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80768:	697b      	ldr	r3, [r7, #20]
   8076a:	f04f 32ff 	mov.w	r2, #4294967295
   8076e:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80770:	697b      	ldr	r3, [r7, #20]
   80772:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80774:	697b      	ldr	r3, [r7, #20]
   80776:	687a      	ldr	r2, [r7, #4]
   80778:	605a      	str	r2, [r3, #4]
}
   8077a:	bf00      	nop
   8077c:	371c      	adds	r7, #28
   8077e:	46bd      	mov	sp, r7
   80780:	bc80      	pop	{r7}
   80782:	4770      	bx	lr

00080784 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
   80784:	b480      	push	{r7}
   80786:	b083      	sub	sp, #12
   80788:	af00      	add	r7, sp, #0
   8078a:	6078      	str	r0, [r7, #4]
   8078c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8078e:	687a      	ldr	r2, [r7, #4]
   80790:	683b      	ldr	r3, [r7, #0]
   80792:	019b      	lsls	r3, r3, #6
   80794:	4413      	add	r3, r2
   80796:	2205      	movs	r2, #5
   80798:	601a      	str	r2, [r3, #0]
}
   8079a:	bf00      	nop
   8079c:	370c      	adds	r7, #12
   8079e:	46bd      	mov	sp, r7
   807a0:	bc80      	pop	{r7}
   807a2:	4770      	bx	lr

000807a4 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
   807a4:	b480      	push	{r7}
   807a6:	b085      	sub	sp, #20
   807a8:	af00      	add	r7, sp, #0
   807aa:	60f8      	str	r0, [r7, #12]
   807ac:	60b9      	str	r1, [r7, #8]
   807ae:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   807b0:	68fa      	ldr	r2, [r7, #12]
   807b2:	68bb      	ldr	r3, [r7, #8]
   807b4:	019b      	lsls	r3, r3, #6
   807b6:	4413      	add	r3, r2
   807b8:	331c      	adds	r3, #28
   807ba:	687a      	ldr	r2, [r7, #4]
   807bc:	601a      	str	r2, [r3, #0]
}
   807be:	bf00      	nop
   807c0:	3714      	adds	r7, #20
   807c2:	46bd      	mov	sp, r7
   807c4:	bc80      	pop	{r7}
   807c6:	4770      	bx	lr

000807c8 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
   807c8:	b480      	push	{r7}
   807ca:	b087      	sub	sp, #28
   807cc:	af00      	add	r7, sp, #0
   807ce:	60f8      	str	r0, [r7, #12]
   807d0:	60b9      	str	r1, [r7, #8]
   807d2:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   807d4:	68fa      	ldr	r2, [r7, #12]
   807d6:	68bb      	ldr	r3, [r7, #8]
   807d8:	019b      	lsls	r3, r3, #6
   807da:	4413      	add	r3, r2
   807dc:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   807de:	697b      	ldr	r3, [r7, #20]
   807e0:	687a      	ldr	r2, [r7, #4]
   807e2:	625a      	str	r2, [r3, #36]	; 0x24
}
   807e4:	bf00      	nop
   807e6:	371c      	adds	r7, #28
   807e8:	46bd      	mov	sp, r7
   807ea:	bc80      	pop	{r7}
   807ec:	4770      	bx	lr

000807ee <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
   807ee:	b480      	push	{r7}
   807f0:	b085      	sub	sp, #20
   807f2:	af00      	add	r7, sp, #0
   807f4:	6078      	str	r0, [r7, #4]
   807f6:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   807f8:	687a      	ldr	r2, [r7, #4]
   807fa:	683b      	ldr	r3, [r7, #0]
   807fc:	019b      	lsls	r3, r3, #6
   807fe:	4413      	add	r3, r2
   80800:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   80802:	68fb      	ldr	r3, [r7, #12]
   80804:	6a1b      	ldr	r3, [r3, #32]
}
   80806:	4618      	mov	r0, r3
   80808:	3714      	adds	r7, #20
   8080a:	46bd      	mov	sp, r7
   8080c:	bc80      	pop	{r7}
   8080e:	4770      	bx	lr

00080810 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   80810:	b480      	push	{r7}
   80812:	b087      	sub	sp, #28
   80814:	af00      	add	r7, sp, #0
   80816:	60f8      	str	r0, [r7, #12]
   80818:	60b9      	str	r1, [r7, #8]
   8081a:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   8081c:	68bb      	ldr	r3, [r7, #8]
   8081e:	085a      	lsrs	r2, r3, #1
   80820:	687b      	ldr	r3, [r7, #4]
   80822:	441a      	add	r2, r3
   80824:	68bb      	ldr	r3, [r7, #8]
   80826:	fbb2 f3f3 	udiv	r3, r2, r3
   8082a:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   8082c:	697b      	ldr	r3, [r7, #20]
   8082e:	2b03      	cmp	r3, #3
   80830:	d903      	bls.n	8083a <usart_set_spi_master_baudrate+0x2a>
   80832:	697b      	ldr	r3, [r7, #20]
   80834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   80838:	d301      	bcc.n	8083e <usart_set_spi_master_baudrate+0x2e>
		return 1;
   8083a:	2301      	movs	r3, #1
   8083c:	e003      	b.n	80846 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   8083e:	68fb      	ldr	r3, [r7, #12]
   80840:	697a      	ldr	r2, [r7, #20]
   80842:	621a      	str	r2, [r3, #32]

	return 0;
   80844:	2300      	movs	r3, #0
}
   80846:	4618      	mov	r0, r3
   80848:	371c      	adds	r7, #28
   8084a:	46bd      	mov	sp, r7
   8084c:	bc80      	pop	{r7}
   8084e:	4770      	bx	lr

00080850 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   80850:	b580      	push	{r7, lr}
   80852:	b082      	sub	sp, #8
   80854:	af00      	add	r7, sp, #0
   80856:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   80858:	6878      	ldr	r0, [r7, #4]
   8085a:	4b0d      	ldr	r3, [pc, #52]	; (80890 <usart_reset+0x40>)
   8085c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8085e:	687b      	ldr	r3, [r7, #4]
   80860:	2200      	movs	r2, #0
   80862:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   80864:	687b      	ldr	r3, [r7, #4]
   80866:	2200      	movs	r2, #0
   80868:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8086a:	687b      	ldr	r3, [r7, #4]
   8086c:	2200      	movs	r2, #0
   8086e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   80870:	6878      	ldr	r0, [r7, #4]
   80872:	4b08      	ldr	r3, [pc, #32]	; (80894 <usart_reset+0x44>)
   80874:	4798      	blx	r3
	usart_reset_rx(p_usart);
   80876:	6878      	ldr	r0, [r7, #4]
   80878:	4b07      	ldr	r3, [pc, #28]	; (80898 <usart_reset+0x48>)
   8087a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   8087c:	6878      	ldr	r0, [r7, #4]
   8087e:	4b07      	ldr	r3, [pc, #28]	; (8089c <usart_reset+0x4c>)
   80880:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   80882:	6878      	ldr	r0, [r7, #4]
   80884:	4b06      	ldr	r3, [pc, #24]	; (808a0 <usart_reset+0x50>)
   80886:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   80888:	bf00      	nop
   8088a:	3708      	adds	r7, #8
   8088c:	46bd      	mov	sp, r7
   8088e:	bd80      	pop	{r7, pc}
   80890:	00080aad 	.word	0x00080aad
   80894:	000809e5 	.word	0x000809e5
   80898:	00080a2d 	.word	0x00080a2d
   8089c:	00080a45 	.word	0x00080a45
   808a0:	00080a5f 	.word	0x00080a5f

000808a4 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   808a4:	b580      	push	{r7, lr}
   808a6:	b084      	sub	sp, #16
   808a8:	af00      	add	r7, sp, #0
   808aa:	60f8      	str	r0, [r7, #12]
   808ac:	60b9      	str	r1, [r7, #8]
   808ae:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   808b0:	68f8      	ldr	r0, [r7, #12]
   808b2:	4b3d      	ldr	r3, [pc, #244]	; (809a8 <usart_init_spi_master+0x104>)
   808b4:	4798      	blx	r3

	ul_reg_val = 0;
   808b6:	4b3d      	ldr	r3, [pc, #244]	; (809ac <usart_init_spi_master+0x108>)
   808b8:	2200      	movs	r2, #0
   808ba:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   808bc:	68bb      	ldr	r3, [r7, #8]
   808be:	2b00      	cmp	r3, #0
   808c0:	d00d      	beq.n	808de <usart_init_spi_master+0x3a>
   808c2:	68bb      	ldr	r3, [r7, #8]
   808c4:	689b      	ldr	r3, [r3, #8]
   808c6:	2b03      	cmp	r3, #3
   808c8:	d809      	bhi.n	808de <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   808ca:	68bb      	ldr	r3, [r7, #8]
   808cc:	681b      	ldr	r3, [r3, #0]
   808ce:	687a      	ldr	r2, [r7, #4]
   808d0:	4619      	mov	r1, r3
   808d2:	68f8      	ldr	r0, [r7, #12]
   808d4:	4b36      	ldr	r3, [pc, #216]	; (809b0 <usart_init_spi_master+0x10c>)
   808d6:	4798      	blx	r3
   808d8:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   808da:	2b00      	cmp	r3, #0
   808dc:	d001      	beq.n	808e2 <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   808de:	2301      	movs	r3, #1
   808e0:	e05d      	b.n	8099e <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   808e2:	68bb      	ldr	r3, [r7, #8]
   808e4:	685a      	ldr	r2, [r3, #4]
   808e6:	4b31      	ldr	r3, [pc, #196]	; (809ac <usart_init_spi_master+0x108>)
   808e8:	681b      	ldr	r3, [r3, #0]
   808ea:	4313      	orrs	r3, r2
   808ec:	4a2f      	ldr	r2, [pc, #188]	; (809ac <usart_init_spi_master+0x108>)
   808ee:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   808f0:	68bb      	ldr	r3, [r7, #8]
   808f2:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   808f4:	4b2d      	ldr	r3, [pc, #180]	; (809ac <usart_init_spi_master+0x108>)
   808f6:	681b      	ldr	r3, [r3, #0]
   808f8:	4313      	orrs	r3, r2
   808fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   808fe:	f043 030e 	orr.w	r3, r3, #14
   80902:	4a2a      	ldr	r2, [pc, #168]	; (809ac <usart_init_spi_master+0x108>)
   80904:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   80906:	68bb      	ldr	r3, [r7, #8]
   80908:	689b      	ldr	r3, [r3, #8]
   8090a:	2b03      	cmp	r3, #3
   8090c:	d83e      	bhi.n	8098c <usart_init_spi_master+0xe8>
   8090e:	a201      	add	r2, pc, #4	; (adr r2, 80914 <usart_init_spi_master+0x70>)
   80910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80914:	00080925 	.word	0x00080925
   80918:	0008093f 	.word	0x0008093f
   8091c:	00080959 	.word	0x00080959
   80920:	00080973 	.word	0x00080973
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   80924:	4b21      	ldr	r3, [pc, #132]	; (809ac <usart_init_spi_master+0x108>)
   80926:	681b      	ldr	r3, [r3, #0]
   80928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8092c:	4a1f      	ldr	r2, [pc, #124]	; (809ac <usart_init_spi_master+0x108>)
   8092e:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   80930:	4b1e      	ldr	r3, [pc, #120]	; (809ac <usart_init_spi_master+0x108>)
   80932:	681b      	ldr	r3, [r3, #0]
   80934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80938:	4a1c      	ldr	r2, [pc, #112]	; (809ac <usart_init_spi_master+0x108>)
   8093a:	6013      	str	r3, [r2, #0]
		break;
   8093c:	e027      	b.n	8098e <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8093e:	4b1b      	ldr	r3, [pc, #108]	; (809ac <usart_init_spi_master+0x108>)
   80940:	681b      	ldr	r3, [r3, #0]
   80942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80946:	4a19      	ldr	r2, [pc, #100]	; (809ac <usart_init_spi_master+0x108>)
   80948:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8094a:	4b18      	ldr	r3, [pc, #96]	; (809ac <usart_init_spi_master+0x108>)
   8094c:	681b      	ldr	r3, [r3, #0]
   8094e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80952:	4a16      	ldr	r2, [pc, #88]	; (809ac <usart_init_spi_master+0x108>)
   80954:	6013      	str	r3, [r2, #0]
		break;
   80956:	e01a      	b.n	8098e <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   80958:	4b14      	ldr	r3, [pc, #80]	; (809ac <usart_init_spi_master+0x108>)
   8095a:	681b      	ldr	r3, [r3, #0]
   8095c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80960:	4a12      	ldr	r2, [pc, #72]	; (809ac <usart_init_spi_master+0x108>)
   80962:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   80964:	4b11      	ldr	r3, [pc, #68]	; (809ac <usart_init_spi_master+0x108>)
   80966:	681b      	ldr	r3, [r3, #0]
   80968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8096c:	4a0f      	ldr	r2, [pc, #60]	; (809ac <usart_init_spi_master+0x108>)
   8096e:	6013      	str	r3, [r2, #0]
		break;
   80970:	e00d      	b.n	8098e <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   80972:	4b0e      	ldr	r3, [pc, #56]	; (809ac <usart_init_spi_master+0x108>)
   80974:	681b      	ldr	r3, [r3, #0]
   80976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8097a:	4a0c      	ldr	r2, [pc, #48]	; (809ac <usart_init_spi_master+0x108>)
   8097c:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8097e:	4b0b      	ldr	r3, [pc, #44]	; (809ac <usart_init_spi_master+0x108>)
   80980:	681b      	ldr	r3, [r3, #0]
   80982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80986:	4a09      	ldr	r2, [pc, #36]	; (809ac <usart_init_spi_master+0x108>)
   80988:	6013      	str	r3, [r2, #0]
		break;
   8098a:	e000      	b.n	8098e <usart_init_spi_master+0xea>

	default:
		break;
   8098c:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   8098e:	68fb      	ldr	r3, [r7, #12]
   80990:	685a      	ldr	r2, [r3, #4]
   80992:	4b06      	ldr	r3, [pc, #24]	; (809ac <usart_init_spi_master+0x108>)
   80994:	681b      	ldr	r3, [r3, #0]
   80996:	431a      	orrs	r2, r3
   80998:	68fb      	ldr	r3, [r7, #12]
   8099a:	605a      	str	r2, [r3, #4]

	return 0;
   8099c:	2300      	movs	r3, #0
}
   8099e:	4618      	mov	r0, r3
   809a0:	3710      	adds	r7, #16
   809a2:	46bd      	mov	sp, r7
   809a4:	bd80      	pop	{r7, pc}
   809a6:	bf00      	nop
   809a8:	00080851 	.word	0x00080851
   809ac:	20070b6c 	.word	0x20070b6c
   809b0:	00080811 	.word	0x00080811

000809b4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   809b4:	b480      	push	{r7}
   809b6:	b083      	sub	sp, #12
   809b8:	af00      	add	r7, sp, #0
   809ba:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   809bc:	687b      	ldr	r3, [r7, #4]
   809be:	2240      	movs	r2, #64	; 0x40
   809c0:	601a      	str	r2, [r3, #0]
}
   809c2:	bf00      	nop
   809c4:	370c      	adds	r7, #12
   809c6:	46bd      	mov	sp, r7
   809c8:	bc80      	pop	{r7}
   809ca:	4770      	bx	lr

000809cc <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   809cc:	b480      	push	{r7}
   809ce:	b083      	sub	sp, #12
   809d0:	af00      	add	r7, sp, #0
   809d2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   809d4:	687b      	ldr	r3, [r7, #4]
   809d6:	2280      	movs	r2, #128	; 0x80
   809d8:	601a      	str	r2, [r3, #0]
}
   809da:	bf00      	nop
   809dc:	370c      	adds	r7, #12
   809de:	46bd      	mov	sp, r7
   809e0:	bc80      	pop	{r7}
   809e2:	4770      	bx	lr

000809e4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   809e4:	b480      	push	{r7}
   809e6:	b083      	sub	sp, #12
   809e8:	af00      	add	r7, sp, #0
   809ea:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   809ec:	687b      	ldr	r3, [r7, #4]
   809ee:	2288      	movs	r2, #136	; 0x88
   809f0:	601a      	str	r2, [r3, #0]
}
   809f2:	bf00      	nop
   809f4:	370c      	adds	r7, #12
   809f6:	46bd      	mov	sp, r7
   809f8:	bc80      	pop	{r7}
   809fa:	4770      	bx	lr

000809fc <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   809fc:	b480      	push	{r7}
   809fe:	b083      	sub	sp, #12
   80a00:	af00      	add	r7, sp, #0
   80a02:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   80a04:	687b      	ldr	r3, [r7, #4]
   80a06:	2210      	movs	r2, #16
   80a08:	601a      	str	r2, [r3, #0]
}
   80a0a:	bf00      	nop
   80a0c:	370c      	adds	r7, #12
   80a0e:	46bd      	mov	sp, r7
   80a10:	bc80      	pop	{r7}
   80a12:	4770      	bx	lr

00080a14 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   80a14:	b480      	push	{r7}
   80a16:	b083      	sub	sp, #12
   80a18:	af00      	add	r7, sp, #0
   80a1a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   80a1c:	687b      	ldr	r3, [r7, #4]
   80a1e:	2220      	movs	r2, #32
   80a20:	601a      	str	r2, [r3, #0]
}
   80a22:	bf00      	nop
   80a24:	370c      	adds	r7, #12
   80a26:	46bd      	mov	sp, r7
   80a28:	bc80      	pop	{r7}
   80a2a:	4770      	bx	lr

00080a2c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   80a2c:	b480      	push	{r7}
   80a2e:	b083      	sub	sp, #12
   80a30:	af00      	add	r7, sp, #0
   80a32:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80a34:	687b      	ldr	r3, [r7, #4]
   80a36:	2224      	movs	r2, #36	; 0x24
   80a38:	601a      	str	r2, [r3, #0]
}
   80a3a:	bf00      	nop
   80a3c:	370c      	adds	r7, #12
   80a3e:	46bd      	mov	sp, r7
   80a40:	bc80      	pop	{r7}
   80a42:	4770      	bx	lr

00080a44 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   80a44:	b480      	push	{r7}
   80a46:	b083      	sub	sp, #12
   80a48:	af00      	add	r7, sp, #0
   80a4a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   80a4c:	687b      	ldr	r3, [r7, #4]
   80a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
   80a52:	601a      	str	r2, [r3, #0]
}
   80a54:	bf00      	nop
   80a56:	370c      	adds	r7, #12
   80a58:	46bd      	mov	sp, r7
   80a5a:	bc80      	pop	{r7}
   80a5c:	4770      	bx	lr

00080a5e <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   80a5e:	b480      	push	{r7}
   80a60:	b083      	sub	sp, #12
   80a62:	af00      	add	r7, sp, #0
   80a64:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   80a66:	687b      	ldr	r3, [r7, #4]
   80a68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80a6c:	601a      	str	r2, [r3, #0]
}
   80a6e:	bf00      	nop
   80a70:	370c      	adds	r7, #12
   80a72:	46bd      	mov	sp, r7
   80a74:	bc80      	pop	{r7}
   80a76:	4770      	bx	lr

00080a78 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
   80a78:	b480      	push	{r7}
   80a7a:	b083      	sub	sp, #12
   80a7c:	af00      	add	r7, sp, #0
   80a7e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
   80a80:	687b      	ldr	r3, [r7, #4]
   80a82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   80a86:	601a      	str	r2, [r3, #0]
}
   80a88:	bf00      	nop
   80a8a:	370c      	adds	r7, #12
   80a8c:	46bd      	mov	sp, r7
   80a8e:	bc80      	pop	{r7}
   80a90:	4770      	bx	lr

00080a92 <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   80a92:	b480      	push	{r7}
   80a94:	b083      	sub	sp, #12
   80a96:	af00      	add	r7, sp, #0
   80a98:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   80a9a:	687b      	ldr	r3, [r7, #4]
   80a9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80aa0:	601a      	str	r2, [r3, #0]
}
   80aa2:	bf00      	nop
   80aa4:	370c      	adds	r7, #12
   80aa6:	46bd      	mov	sp, r7
   80aa8:	bc80      	pop	{r7}
   80aaa:	4770      	bx	lr

00080aac <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   80aac:	b480      	push	{r7}
   80aae:	b083      	sub	sp, #12
   80ab0:	af00      	add	r7, sp, #0
   80ab2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   80ab4:	687b      	ldr	r3, [r7, #4]
   80ab6:	4a04      	ldr	r2, [pc, #16]	; (80ac8 <usart_disable_writeprotect+0x1c>)
   80ab8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   80abc:	bf00      	nop
   80abe:	370c      	adds	r7, #12
   80ac0:	46bd      	mov	sp, r7
   80ac2:	bc80      	pop	{r7}
   80ac4:	4770      	bx	lr
   80ac6:	bf00      	nop
   80ac8:	55534100 	.word	0x55534100

00080acc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80acc:	b480      	push	{r7}
   80ace:	b083      	sub	sp, #12
   80ad0:	af00      	add	r7, sp, #0
   80ad2:	4603      	mov	r3, r0
   80ad4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80ad6:	4908      	ldr	r1, [pc, #32]	; (80af8 <NVIC_EnableIRQ+0x2c>)
   80ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80adc:	095b      	lsrs	r3, r3, #5
   80ade:	79fa      	ldrb	r2, [r7, #7]
   80ae0:	f002 021f 	and.w	r2, r2, #31
   80ae4:	2001      	movs	r0, #1
   80ae6:	fa00 f202 	lsl.w	r2, r0, r2
   80aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80aee:	bf00      	nop
   80af0:	370c      	adds	r7, #12
   80af2:	46bd      	mov	sp, r7
   80af4:	bc80      	pop	{r7}
   80af6:	4770      	bx	lr
   80af8:	e000e100 	.word	0xe000e100

00080afc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80afc:	b480      	push	{r7}
   80afe:	b083      	sub	sp, #12
   80b00:	af00      	add	r7, sp, #0
   80b02:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80b04:	687b      	ldr	r3, [r7, #4]
   80b06:	2b07      	cmp	r3, #7
   80b08:	d825      	bhi.n	80b56 <osc_get_rate+0x5a>
   80b0a:	a201      	add	r2, pc, #4	; (adr r2, 80b10 <osc_get_rate+0x14>)
   80b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b10:	00080b31 	.word	0x00080b31
   80b14:	00080b37 	.word	0x00080b37
   80b18:	00080b3d 	.word	0x00080b3d
   80b1c:	00080b43 	.word	0x00080b43
   80b20:	00080b47 	.word	0x00080b47
   80b24:	00080b4b 	.word	0x00080b4b
   80b28:	00080b4f 	.word	0x00080b4f
   80b2c:	00080b53 	.word	0x00080b53
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80b30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80b34:	e010      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80b3a:	e00d      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80b40:	e00a      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80b42:	4b08      	ldr	r3, [pc, #32]	; (80b64 <osc_get_rate+0x68>)
   80b44:	e008      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80b46:	4b08      	ldr	r3, [pc, #32]	; (80b68 <osc_get_rate+0x6c>)
   80b48:	e006      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80b4a:	4b08      	ldr	r3, [pc, #32]	; (80b6c <osc_get_rate+0x70>)
   80b4c:	e004      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80b4e:	4b07      	ldr	r3, [pc, #28]	; (80b6c <osc_get_rate+0x70>)
   80b50:	e002      	b.n	80b58 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80b52:	4b06      	ldr	r3, [pc, #24]	; (80b6c <osc_get_rate+0x70>)
   80b54:	e000      	b.n	80b58 <osc_get_rate+0x5c>
	}

	return 0;
   80b56:	2300      	movs	r3, #0
}
   80b58:	4618      	mov	r0, r3
   80b5a:	370c      	adds	r7, #12
   80b5c:	46bd      	mov	sp, r7
   80b5e:	bc80      	pop	{r7}
   80b60:	4770      	bx	lr
   80b62:	bf00      	nop
   80b64:	003d0900 	.word	0x003d0900
   80b68:	007a1200 	.word	0x007a1200
   80b6c:	00b71b00 	.word	0x00b71b00

00080b70 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80b70:	b580      	push	{r7, lr}
   80b72:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80b74:	2006      	movs	r0, #6
   80b76:	4b04      	ldr	r3, [pc, #16]	; (80b88 <sysclk_get_main_hz+0x18>)
   80b78:	4798      	blx	r3
   80b7a:	4602      	mov	r2, r0
   80b7c:	4613      	mov	r3, r2
   80b7e:	00db      	lsls	r3, r3, #3
   80b80:	1a9b      	subs	r3, r3, r2
   80b82:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80b84:	4618      	mov	r0, r3
   80b86:	bd80      	pop	{r7, pc}
   80b88:	00080afd 	.word	0x00080afd

00080b8c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   80b8c:	b580      	push	{r7, lr}
   80b8e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80b90:	4b02      	ldr	r3, [pc, #8]	; (80b9c <sysclk_get_peripheral_hz+0x10>)
   80b92:	4798      	blx	r3
   80b94:	4603      	mov	r3, r0
   80b96:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80b98:	4618      	mov	r0, r3
   80b9a:	bd80      	pop	{r7, pc}
   80b9c:	00080b71 	.word	0x00080b71

00080ba0 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   80ba0:	b480      	push	{r7}
   80ba2:	b083      	sub	sp, #12
   80ba4:	af00      	add	r7, sp, #0
   80ba6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   80ba8:	687b      	ldr	r3, [r7, #4]
   80baa:	2280      	movs	r2, #128	; 0x80
   80bac:	601a      	str	r2, [r3, #0]
}
   80bae:	bf00      	nop
   80bb0:	370c      	adds	r7, #12
   80bb2:	46bd      	mov	sp, r7
   80bb4:	bc80      	pop	{r7}
   80bb6:	4770      	bx	lr

00080bb8 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   80bb8:	b480      	push	{r7}
   80bba:	b083      	sub	sp, #12
   80bbc:	af00      	add	r7, sp, #0
   80bbe:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80bc0:	687b      	ldr	r3, [r7, #4]
   80bc2:	2201      	movs	r2, #1
   80bc4:	601a      	str	r2, [r3, #0]
}
   80bc6:	bf00      	nop
   80bc8:	370c      	adds	r7, #12
   80bca:	46bd      	mov	sp, r7
   80bcc:	bc80      	pop	{r7}
   80bce:	4770      	bx	lr

00080bd0 <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
   80bd0:	b480      	push	{r7}
   80bd2:	b083      	sub	sp, #12
   80bd4:	af00      	add	r7, sp, #0
   80bd6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   80bd8:	687b      	ldr	r3, [r7, #4]
   80bda:	2202      	movs	r2, #2
   80bdc:	601a      	str	r2, [r3, #0]
}
   80bde:	bf00      	nop
   80be0:	370c      	adds	r7, #12
   80be2:	46bd      	mov	sp, r7
   80be4:	bc80      	pop	{r7}
   80be6:	4770      	bx	lr

00080be8 <spi_set_slave_mode>:
 * \brief Set SPI to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
   80be8:	b480      	push	{r7}
   80bea:	b083      	sub	sp, #12
   80bec:	af00      	add	r7, sp, #0
   80bee:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
   80bf0:	687b      	ldr	r3, [r7, #4]
   80bf2:	685b      	ldr	r3, [r3, #4]
   80bf4:	f023 0201 	bic.w	r2, r3, #1
   80bf8:	687b      	ldr	r3, [r7, #4]
   80bfa:	605a      	str	r2, [r3, #4]
}
   80bfc:	bf00      	nop
   80bfe:	370c      	adds	r7, #12
   80c00:	46bd      	mov	sp, r7
   80c02:	bc80      	pop	{r7}
   80c04:	4770      	bx	lr

00080c06 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   80c06:	b480      	push	{r7}
   80c08:	b083      	sub	sp, #12
   80c0a:	af00      	add	r7, sp, #0
   80c0c:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80c0e:	687b      	ldr	r3, [r7, #4]
   80c10:	685b      	ldr	r3, [r3, #4]
   80c12:	f043 0210 	orr.w	r2, r3, #16
   80c16:	687b      	ldr	r3, [r7, #4]
   80c18:	605a      	str	r2, [r3, #4]
}
   80c1a:	bf00      	nop
   80c1c:	370c      	adds	r7, #12
   80c1e:	46bd      	mov	sp, r7
   80c20:	bc80      	pop	{r7}
   80c22:	4770      	bx	lr

00080c24 <spi_init>:
uint8_t rpi_buf[sizeof(rtm)];

static Bool b_trigger = false;

void spi_init(void)
{
   80c24:	b580      	push	{r7, lr}
   80c26:	af00      	add	r7, sp, #0
    configure_dmac();
   80c28:	4b03      	ldr	r3, [pc, #12]	; (80c38 <spi_init+0x14>)
   80c2a:	4798      	blx	r3
    spi_master_initialize();
   80c2c:	4b03      	ldr	r3, [pc, #12]	; (80c3c <spi_init+0x18>)
   80c2e:	4798      	blx	r3
    spi_slave_initialize();
   80c30:	4b03      	ldr	r3, [pc, #12]	; (80c40 <spi_init+0x1c>)
   80c32:	4798      	blx	r3
}
   80c34:	bf00      	nop
   80c36:	bd80      	pop	{r7, pc}
   80c38:	00080ea5 	.word	0x00080ea5
   80c3c:	00080c45 	.word	0x00080c45
   80c40:	00080cb5 	.word	0x00080cb5

00080c44 <spi_master_initialize>:

void spi_master_initialize(void)
{
   80c44:	b590      	push	{r4, r7, lr}
   80c46:	b085      	sub	sp, #20
   80c48:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   80c4a:	2101      	movs	r1, #1
   80c4c:	4810      	ldr	r0, [pc, #64]	; (80c90 <spi_master_initialize+0x4c>)
   80c4e:	4b11      	ldr	r3, [pc, #68]	; (80c94 <spi_master_initialize+0x50>)
   80c50:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   80c52:	2100      	movs	r1, #0
   80c54:	480e      	ldr	r0, [pc, #56]	; (80c90 <spi_master_initialize+0x4c>)
   80c56:	4b0f      	ldr	r3, [pc, #60]	; (80c94 <spi_master_initialize+0x50>)
   80c58:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   80c5a:	2012      	movs	r0, #18
   80c5c:	4b0e      	ldr	r3, [pc, #56]	; (80c98 <spi_master_initialize+0x54>)
   80c5e:	4798      	blx	r3
    usart_spi_disable(USART1);
   80c60:	480e      	ldr	r0, [pc, #56]	; (80c9c <spi_master_initialize+0x58>)
   80c62:	4b0f      	ldr	r3, [pc, #60]	; (80ca0 <spi_master_initialize+0x5c>)
   80c64:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   80c66:	4b0f      	ldr	r3, [pc, #60]	; (80ca4 <spi_master_initialize+0x60>)
   80c68:	463c      	mov	r4, r7
   80c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   80c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   80c70:	4b0d      	ldr	r3, [pc, #52]	; (80ca8 <spi_master_initialize+0x64>)
   80c72:	4798      	blx	r3
   80c74:	4602      	mov	r2, r0
   80c76:	463b      	mov	r3, r7
   80c78:	4619      	mov	r1, r3
   80c7a:	4808      	ldr	r0, [pc, #32]	; (80c9c <spi_master_initialize+0x58>)
   80c7c:	4b0b      	ldr	r3, [pc, #44]	; (80cac <spi_master_initialize+0x68>)
   80c7e:	4798      	blx	r3
    usart_spi_enable(USART1);
   80c80:	4806      	ldr	r0, [pc, #24]	; (80c9c <spi_master_initialize+0x58>)
   80c82:	4b0b      	ldr	r3, [pc, #44]	; (80cb0 <spi_master_initialize+0x6c>)
   80c84:	4798      	blx	r3
}
   80c86:	bf00      	nop
   80c88:	3714      	adds	r7, #20
   80c8a:	46bd      	mov	sp, r7
   80c8c:	bd90      	pop	{r4, r7, pc}
   80c8e:	bf00      	nop
   80c90:	400c4000 	.word	0x400c4000
   80c94:	0008397f 	.word	0x0008397f
   80c98:	00083d3d 	.word	0x00083d3d
   80c9c:	4009c000 	.word	0x4009c000
   80ca0:	00080185 	.word	0x00080185
   80ca4:	00089a18 	.word	0x00089a18
   80ca8:	00080b8d 	.word	0x00080b8d
   80cac:	000808a5 	.word	0x000808a5
   80cb0:	00080161 	.word	0x00080161

00080cb4 <spi_slave_initialize>:

void spi_slave_initialize(void)
{
   80cb4:	b580      	push	{r7, lr}
   80cb6:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 4);
   80cb8:	2104      	movs	r1, #4
   80cba:	481b      	ldr	r0, [pc, #108]	; (80d28 <spi_slave_initialize+0x74>)
   80cbc:	4b1b      	ldr	r3, [pc, #108]	; (80d2c <spi_slave_initialize+0x78>)
   80cbe:	4798      	blx	r3
    dmac_channel_disable(DMAC, 2);
   80cc0:	2102      	movs	r1, #2
   80cc2:	4819      	ldr	r0, [pc, #100]	; (80d28 <spi_slave_initialize+0x74>)
   80cc4:	4b19      	ldr	r3, [pc, #100]	; (80d2c <spi_slave_initialize+0x78>)
   80cc6:	4798      	blx	r3
    pmc_enable_periph_clk(ID_SPI0);
   80cc8:	2018      	movs	r0, #24
   80cca:	4b19      	ldr	r3, [pc, #100]	; (80d30 <spi_slave_initialize+0x7c>)
   80ccc:	4798      	blx	r3
    spi_disable(SPI0);
   80cce:	4819      	ldr	r0, [pc, #100]	; (80d34 <spi_slave_initialize+0x80>)
   80cd0:	4b19      	ldr	r3, [pc, #100]	; (80d38 <spi_slave_initialize+0x84>)
   80cd2:	4798      	blx	r3
    spi_reset(SPI0);
   80cd4:	4817      	ldr	r0, [pc, #92]	; (80d34 <spi_slave_initialize+0x80>)
   80cd6:	4b19      	ldr	r3, [pc, #100]	; (80d3c <spi_slave_initialize+0x88>)
   80cd8:	4798      	blx	r3
    spi_set_slave_mode(SPI0);
   80cda:	4816      	ldr	r0, [pc, #88]	; (80d34 <spi_slave_initialize+0x80>)
   80cdc:	4b18      	ldr	r3, [pc, #96]	; (80d40 <spi_slave_initialize+0x8c>)
   80cde:	4798      	blx	r3
    spi_disable_mode_fault_detect(SPI0);
   80ce0:	4814      	ldr	r0, [pc, #80]	; (80d34 <spi_slave_initialize+0x80>)
   80ce2:	4b18      	ldr	r3, [pc, #96]	; (80d44 <spi_slave_initialize+0x90>)
   80ce4:	4798      	blx	r3
    spi_set_peripheral_chip_select_value(SPI0, spi_get_pcs(0));
   80ce6:	210e      	movs	r1, #14
   80ce8:	4812      	ldr	r0, [pc, #72]	; (80d34 <spi_slave_initialize+0x80>)
   80cea:	4b17      	ldr	r3, [pc, #92]	; (80d48 <spi_slave_initialize+0x94>)
   80cec:	4798      	blx	r3
    spi_set_clock_polarity(SPI0, 0, 0);
   80cee:	2200      	movs	r2, #0
   80cf0:	2100      	movs	r1, #0
   80cf2:	4810      	ldr	r0, [pc, #64]	; (80d34 <spi_slave_initialize+0x80>)
   80cf4:	4b15      	ldr	r3, [pc, #84]	; (80d4c <spi_slave_initialize+0x98>)
   80cf6:	4798      	blx	r3
    spi_set_clock_phase(SPI0, 0, 1);
   80cf8:	2201      	movs	r2, #1
   80cfa:	2100      	movs	r1, #0
   80cfc:	480d      	ldr	r0, [pc, #52]	; (80d34 <spi_slave_initialize+0x80>)
   80cfe:	4b14      	ldr	r3, [pc, #80]	; (80d50 <spi_slave_initialize+0x9c>)
   80d00:	4798      	blx	r3
    spi_set_bits_per_transfer(SPI0, 0, SPI_CSR_BITS_8_BIT);
   80d02:	2200      	movs	r2, #0
   80d04:	2100      	movs	r1, #0
   80d06:	480b      	ldr	r0, [pc, #44]	; (80d34 <spi_slave_initialize+0x80>)
   80d08:	4b12      	ldr	r3, [pc, #72]	; (80d54 <spi_slave_initialize+0xa0>)
   80d0a:	4798      	blx	r3
    spi_enable(SPI0);
   80d0c:	4809      	ldr	r0, [pc, #36]	; (80d34 <spi_slave_initialize+0x80>)
   80d0e:	4b12      	ldr	r3, [pc, #72]	; (80d58 <spi_slave_initialize+0xa4>)
   80d10:	4798      	blx	r3

    /* Start waiting command. */
    memcpy(&rpi_buf, &mtr, sizeof(mtr));
   80d12:	4b12      	ldr	r3, [pc, #72]	; (80d5c <spi_slave_initialize+0xa8>)
   80d14:	881b      	ldrh	r3, [r3, #0]
   80d16:	4a12      	ldr	r2, [pc, #72]	; (80d60 <spi_slave_initialize+0xac>)
   80d18:	8013      	strh	r3, [r2, #0]
    spi_slave_transfer(&rpi_buf, sizeof(rpi_buf));
   80d1a:	2102      	movs	r1, #2
   80d1c:	4810      	ldr	r0, [pc, #64]	; (80d60 <spi_slave_initialize+0xac>)
   80d1e:	4b11      	ldr	r3, [pc, #68]	; (80d64 <spi_slave_initialize+0xb0>)
   80d20:	4798      	blx	r3
}
   80d22:	bf00      	nop
   80d24:	bd80      	pop	{r7, pc}
   80d26:	bf00      	nop
   80d28:	400c4000 	.word	0x400c4000
   80d2c:	0008397f 	.word	0x0008397f
   80d30:	00083d3d 	.word	0x00083d3d
   80d34:	40008000 	.word	0x40008000
   80d38:	00080bd1 	.word	0x00080bd1
   80d3c:	00080ba1 	.word	0x00080ba1
   80d40:	00080be9 	.word	0x00080be9
   80d44:	00080c07 	.word	0x00080c07
   80d48:	00080637 	.word	0x00080637
   80d4c:	00080669 	.word	0x00080669
   80d50:	000806b7 	.word	0x000806b7
   80d54:	00080705 	.word	0x00080705
   80d58:	00080bb9 	.word	0x00080bb9
   80d5c:	20070e10 	.word	0x20070e10
   80d60:	20070e14 	.word	0x20070e14
   80d64:	00080e0d 	.word	0x00080e0d

00080d68 <spi_master_transfer>:

void spi_master_transfer(void *p_buf, uint32_t ul_size)
{
   80d68:	b580      	push	{r7, lr}
   80d6a:	b088      	sub	sp, #32
   80d6c:	af00      	add	r7, sp, #0
   80d6e:	6078      	str	r0, [r7, #4]
   80d70:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    usart_spi_force_chip_select(USART1);
   80d72:	481c      	ldr	r0, [pc, #112]	; (80de4 <spi_master_transfer+0x7c>)
   80d74:	4b1c      	ldr	r3, [pc, #112]	; (80de8 <spi_master_transfer+0x80>)
   80d76:	4798      	blx	r3

    dmac_channel_disable(DMAC, 1);
   80d78:	2101      	movs	r1, #1
   80d7a:	481c      	ldr	r0, [pc, #112]	; (80dec <spi_master_transfer+0x84>)
   80d7c:	4b1c      	ldr	r3, [pc, #112]	; (80df0 <spi_master_transfer+0x88>)
   80d7e:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   80d80:	687b      	ldr	r3, [r7, #4]
   80d82:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & USART1->US_THR;
   80d84:	4b1b      	ldr	r3, [pc, #108]	; (80df4 <spi_master_transfer+0x8c>)
   80d86:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80d88:	683b      	ldr	r3, [r7, #0]
   80d8a:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80d8c:	4b1a      	ldr	r3, [pc, #104]	; (80df8 <spi_master_transfer+0x90>)
   80d8e:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80d90:	2300      	movs	r3, #0
   80d92:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   80d94:	f107 030c 	add.w	r3, r7, #12
   80d98:	461a      	mov	r2, r3
   80d9a:	2101      	movs	r1, #1
   80d9c:	4813      	ldr	r0, [pc, #76]	; (80dec <spi_master_transfer+0x84>)
   80d9e:	4b17      	ldr	r3, [pc, #92]	; (80dfc <spi_master_transfer+0x94>)
   80da0:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   80da2:	2101      	movs	r1, #1
   80da4:	4811      	ldr	r0, [pc, #68]	; (80dec <spi_master_transfer+0x84>)
   80da6:	4b16      	ldr	r3, [pc, #88]	; (80e00 <spi_master_transfer+0x98>)
   80da8:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   80daa:	2100      	movs	r1, #0
   80dac:	480f      	ldr	r0, [pc, #60]	; (80dec <spi_master_transfer+0x84>)
   80dae:	4b10      	ldr	r3, [pc, #64]	; (80df0 <spi_master_transfer+0x88>)
   80db0:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & USART1->US_RHR;
   80db2:	4b14      	ldr	r3, [pc, #80]	; (80e04 <spi_master_transfer+0x9c>)
   80db4:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80db6:	687b      	ldr	r3, [r7, #4]
   80db8:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80dba:	683b      	ldr	r3, [r7, #0]
   80dbc:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   80dbe:	4b12      	ldr	r3, [pc, #72]	; (80e08 <spi_master_transfer+0xa0>)
   80dc0:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80dc2:	2300      	movs	r3, #0
   80dc4:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   80dc6:	f107 030c 	add.w	r3, r7, #12
   80dca:	461a      	mov	r2, r3
   80dcc:	2100      	movs	r1, #0
   80dce:	4807      	ldr	r0, [pc, #28]	; (80dec <spi_master_transfer+0x84>)
   80dd0:	4b0a      	ldr	r3, [pc, #40]	; (80dfc <spi_master_transfer+0x94>)
   80dd2:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   80dd4:	2100      	movs	r1, #0
   80dd6:	4805      	ldr	r0, [pc, #20]	; (80dec <spi_master_transfer+0x84>)
   80dd8:	4b09      	ldr	r3, [pc, #36]	; (80e00 <spi_master_transfer+0x98>)
   80dda:	4798      	blx	r3
}
   80ddc:	bf00      	nop
   80dde:	3720      	adds	r7, #32
   80de0:	46bd      	mov	sp, r7
   80de2:	bd80      	pop	{r7, pc}
   80de4:	4009c000 	.word	0x4009c000
   80de8:	00080a79 	.word	0x00080a79
   80dec:	400c4000 	.word	0x400c4000
   80df0:	0008397f 	.word	0x0008397f
   80df4:	4009c01c 	.word	0x4009c01c
   80df8:	20310000 	.word	0x20310000
   80dfc:	00083a99 	.word	0x00083a99
   80e00:	00083961 	.word	0x00083961
   80e04:	4009c018 	.word	0x4009c018
   80e08:	02510000 	.word	0x02510000

00080e0c <spi_slave_transfer>:

void spi_slave_transfer(void *p_buf, uint32_t ul_size)
{
   80e0c:	b580      	push	{r7, lr}
   80e0e:	b088      	sub	sp, #32
   80e10:	af00      	add	r7, sp, #0
   80e12:	6078      	str	r0, [r7, #4]
   80e14:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    dmac_channel_disable(DMAC, 4);
   80e16:	2104      	movs	r1, #4
   80e18:	481a      	ldr	r0, [pc, #104]	; (80e84 <spi_slave_transfer+0x78>)
   80e1a:	4b1b      	ldr	r3, [pc, #108]	; (80e88 <spi_slave_transfer+0x7c>)
   80e1c:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   80e1e:	687b      	ldr	r3, [r7, #4]
   80e20:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & SPI0->SPI_TDR;
   80e22:	4b1a      	ldr	r3, [pc, #104]	; (80e8c <spi_slave_transfer+0x80>)
   80e24:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80e26:	683b      	ldr	r3, [r7, #0]
   80e28:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80e2a:	4b19      	ldr	r3, [pc, #100]	; (80e90 <spi_slave_transfer+0x84>)
   80e2c:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80e2e:	2300      	movs	r3, #0
   80e30:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 4, &dmac_trans);
   80e32:	f107 030c 	add.w	r3, r7, #12
   80e36:	461a      	mov	r2, r3
   80e38:	2104      	movs	r1, #4
   80e3a:	4812      	ldr	r0, [pc, #72]	; (80e84 <spi_slave_transfer+0x78>)
   80e3c:	4b15      	ldr	r3, [pc, #84]	; (80e94 <spi_slave_transfer+0x88>)
   80e3e:	4798      	blx	r3
    dmac_channel_enable(DMAC, 4);
   80e40:	2104      	movs	r1, #4
   80e42:	4810      	ldr	r0, [pc, #64]	; (80e84 <spi_slave_transfer+0x78>)
   80e44:	4b14      	ldr	r3, [pc, #80]	; (80e98 <spi_slave_transfer+0x8c>)
   80e46:	4798      	blx	r3

    dmac_channel_disable(DMAC, 2);
   80e48:	2102      	movs	r1, #2
   80e4a:	480e      	ldr	r0, [pc, #56]	; (80e84 <spi_slave_transfer+0x78>)
   80e4c:	4b0e      	ldr	r3, [pc, #56]	; (80e88 <spi_slave_transfer+0x7c>)
   80e4e:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & SPI0->SPI_RDR;
   80e50:	4b12      	ldr	r3, [pc, #72]	; (80e9c <spi_slave_transfer+0x90>)
   80e52:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80e54:	687b      	ldr	r3, [r7, #4]
   80e56:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80e58:	683b      	ldr	r3, [r7, #0]
   80e5a:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   80e5c:	4b10      	ldr	r3, [pc, #64]	; (80ea0 <spi_slave_transfer+0x94>)
   80e5e:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80e60:	2300      	movs	r3, #0
   80e62:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 2, (dma_transfer_descriptor_t *) & dmac_trans);
   80e64:	f107 030c 	add.w	r3, r7, #12
   80e68:	461a      	mov	r2, r3
   80e6a:	2102      	movs	r1, #2
   80e6c:	4805      	ldr	r0, [pc, #20]	; (80e84 <spi_slave_transfer+0x78>)
   80e6e:	4b09      	ldr	r3, [pc, #36]	; (80e94 <spi_slave_transfer+0x88>)
   80e70:	4798      	blx	r3
    dmac_channel_enable(DMAC, 2);
   80e72:	2102      	movs	r1, #2
   80e74:	4803      	ldr	r0, [pc, #12]	; (80e84 <spi_slave_transfer+0x78>)
   80e76:	4b08      	ldr	r3, [pc, #32]	; (80e98 <spi_slave_transfer+0x8c>)
   80e78:	4798      	blx	r3
}
   80e7a:	bf00      	nop
   80e7c:	3720      	adds	r7, #32
   80e7e:	46bd      	mov	sp, r7
   80e80:	bd80      	pop	{r7, pc}
   80e82:	bf00      	nop
   80e84:	400c4000 	.word	0x400c4000
   80e88:	0008397f 	.word	0x0008397f
   80e8c:	4000800c 	.word	0x4000800c
   80e90:	20310000 	.word	0x20310000
   80e94:	00083a99 	.word	0x00083a99
   80e98:	00083961 	.word	0x00083961
   80e9c:	40008008 	.word	0x40008008
   80ea0:	02510000 	.word	0x02510000

00080ea4 <configure_dmac>:

void configure_dmac(void)
{
   80ea4:	b580      	push	{r7, lr}
   80ea6:	b082      	sub	sp, #8
   80ea8:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   80eaa:	2027      	movs	r0, #39	; 0x27
   80eac:	4b27      	ldr	r3, [pc, #156]	; (80f4c <configure_dmac+0xa8>)
   80eae:	4798      	blx	r3
    dmac_init(DMAC);
   80eb0:	4827      	ldr	r0, [pc, #156]	; (80f50 <configure_dmac+0xac>)
   80eb2:	4b28      	ldr	r3, [pc, #160]	; (80f54 <configure_dmac+0xb0>)
   80eb4:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   80eb6:	2110      	movs	r1, #16
   80eb8:	4825      	ldr	r0, [pc, #148]	; (80f50 <configure_dmac+0xac>)
   80eba:	4b27      	ldr	r3, [pc, #156]	; (80f58 <configure_dmac+0xb4>)
   80ebc:	4798      	blx	r3
    dmac_enable(DMAC);
   80ebe:	4824      	ldr	r0, [pc, #144]	; (80f50 <configure_dmac+0xac>)
   80ec0:	4b26      	ldr	r3, [pc, #152]	; (80f5c <configure_dmac+0xb8>)
   80ec2:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80ec4:	2300      	movs	r3, #0
   80ec6:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80ec8:	687b      	ldr	r3, [r7, #4]
   80eca:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80ece:	f043 030e 	orr.w	r3, r3, #14
   80ed2:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   80ed4:	687a      	ldr	r2, [r7, #4]
   80ed6:	2100      	movs	r1, #0
   80ed8:	481d      	ldr	r0, [pc, #116]	; (80f50 <configure_dmac+0xac>)
   80eda:	4b21      	ldr	r3, [pc, #132]	; (80f60 <configure_dmac+0xbc>)
   80edc:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80ede:	2300      	movs	r3, #0
   80ee0:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80ee2:	687b      	ldr	r3, [r7, #4]
   80ee4:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   80ee8:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   80eec:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   80eee:	687a      	ldr	r2, [r7, #4]
   80ef0:	2101      	movs	r1, #1
   80ef2:	4817      	ldr	r0, [pc, #92]	; (80f50 <configure_dmac+0xac>)
   80ef4:	4b1a      	ldr	r3, [pc, #104]	; (80f60 <configure_dmac+0xbc>)
   80ef6:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80ef8:	2300      	movs	r3, #0
   80efa:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(2) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80efc:	687b      	ldr	r3, [r7, #4]
   80efe:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80f02:	f043 0302 	orr.w	r3, r3, #2
   80f06:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 2, ul_cfg);
   80f08:	687a      	ldr	r2, [r7, #4]
   80f0a:	2102      	movs	r1, #2
   80f0c:	4810      	ldr	r0, [pc, #64]	; (80f50 <configure_dmac+0xac>)
   80f0e:	4b14      	ldr	r3, [pc, #80]	; (80f60 <configure_dmac+0xbc>)
   80f10:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80f12:	2300      	movs	r3, #0
   80f14:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80f16:	687b      	ldr	r3, [r7, #4]
   80f18:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   80f1c:	f043 0310 	orr.w	r3, r3, #16
   80f20:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
   80f22:	687a      	ldr	r2, [r7, #4]
   80f24:	2104      	movs	r1, #4
   80f26:	480a      	ldr	r0, [pc, #40]	; (80f50 <configure_dmac+0xac>)
   80f28:	4b0d      	ldr	r3, [pc, #52]	; (80f60 <configure_dmac+0xbc>)
   80f2a:	4798      	blx	r3

    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   80f2c:	2027      	movs	r0, #39	; 0x27
   80f2e:	4b0d      	ldr	r3, [pc, #52]	; (80f64 <configure_dmac+0xc0>)
   80f30:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   80f32:	2101      	movs	r1, #1
   80f34:	4806      	ldr	r0, [pc, #24]	; (80f50 <configure_dmac+0xac>)
   80f36:	4b0c      	ldr	r3, [pc, #48]	; (80f68 <configure_dmac+0xc4>)
   80f38:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 2));
   80f3a:	2104      	movs	r1, #4
   80f3c:	4804      	ldr	r0, [pc, #16]	; (80f50 <configure_dmac+0xac>)
   80f3e:	4b0a      	ldr	r3, [pc, #40]	; (80f68 <configure_dmac+0xc4>)
   80f40:	4798      	blx	r3
}
   80f42:	bf00      	nop
   80f44:	3708      	adds	r7, #8
   80f46:	46bd      	mov	sp, r7
   80f48:	bd80      	pop	{r7, pc}
   80f4a:	bf00      	nop
   80f4c:	00083d3d 	.word	0x00083d3d
   80f50:	400c4000 	.word	0x400c4000
   80f54:	000838b9 	.word	0x000838b9
   80f58:	000838d5 	.word	0x000838d5
   80f5c:	000838fb 	.word	0x000838fb
   80f60:	00083a6f 	.word	0x00083a6f
   80f64:	00080acd 	.word	0x00080acd
   80f68:	00083931 	.word	0x00083931

00080f6c <DMAC_Handler>:

void DMAC_Handler(void)
{
   80f6c:	b580      	push	{r7, lr}
   80f6e:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   80f70:	4812      	ldr	r0, [pc, #72]	; (80fbc <DMAC_Handler+0x50>)
   80f72:	4b13      	ldr	r3, [pc, #76]	; (80fc0 <DMAC_Handler+0x54>)
   80f74:	4798      	blx	r3
   80f76:	4602      	mov	r2, r0
   80f78:	4b12      	ldr	r3, [pc, #72]	; (80fc4 <DMAC_Handler+0x58>)
   80f7a:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   80f7c:	4b11      	ldr	r3, [pc, #68]	; (80fc4 <DMAC_Handler+0x58>)
   80f7e:	681b      	ldr	r3, [r3, #0]
   80f80:	f003 0301 	and.w	r3, r3, #1
   80f84:	2b00      	cmp	r3, #0
   80f86:	d008      	beq.n	80f9a <DMAC_Handler+0x2e>
    {
        usart_spi_release_chip_select(USART1);
   80f88:	480f      	ldr	r0, [pc, #60]	; (80fc8 <DMAC_Handler+0x5c>)
   80f8a:	4b10      	ldr	r3, [pc, #64]	; (80fcc <DMAC_Handler+0x60>)
   80f8c:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   80f8e:	4b10      	ldr	r3, [pc, #64]	; (80fd0 <DMAC_Handler+0x64>)
   80f90:	4a10      	ldr	r2, [pc, #64]	; (80fd4 <DMAC_Handler+0x68>)
   80f92:	8811      	ldrh	r1, [r2, #0]
   80f94:	7892      	ldrb	r2, [r2, #2]
   80f96:	8019      	strh	r1, [r3, #0]
   80f98:	709a      	strb	r2, [r3, #2]
    }
    
    if (ul_status & (1 << 2))
   80f9a:	4b0a      	ldr	r3, [pc, #40]	; (80fc4 <DMAC_Handler+0x58>)
   80f9c:	681b      	ldr	r3, [r3, #0]
   80f9e:	f003 0304 	and.w	r3, r3, #4
   80fa2:	2b00      	cmp	r3, #0
   80fa4:	d007      	beq.n	80fb6 <DMAC_Handler+0x4a>
    {
        memcpy(&rtm, &rpi_buf, sizeof(rtm));
   80fa6:	4b0c      	ldr	r3, [pc, #48]	; (80fd8 <DMAC_Handler+0x6c>)
   80fa8:	881b      	ldrh	r3, [r3, #0]
   80faa:	b29b      	uxth	r3, r3
   80fac:	4a0b      	ldr	r2, [pc, #44]	; (80fdc <DMAC_Handler+0x70>)
   80fae:	8013      	strh	r3, [r2, #0]
        b_trigger = true;
   80fb0:	4b0b      	ldr	r3, [pc, #44]	; (80fe0 <DMAC_Handler+0x74>)
   80fb2:	2201      	movs	r2, #1
   80fb4:	701a      	strb	r2, [r3, #0]
    }
}
   80fb6:	bf00      	nop
   80fb8:	bd80      	pop	{r7, pc}
   80fba:	bf00      	nop
   80fbc:	400c4000 	.word	0x400c4000
   80fc0:	0008394b 	.word	0x0008394b
   80fc4:	20070b74 	.word	0x20070b74
   80fc8:	4009c000 	.word	0x4009c000
   80fcc:	00080a93 	.word	0x00080a93
   80fd0:	20070e20 	.word	0x20070e20
   80fd4:	20070e0c 	.word	0x20070e0c
   80fd8:	20070e14 	.word	0x20070e14
   80fdc:	20070e18 	.word	0x20070e18
   80fe0:	20070b70 	.word	0x20070b70

00080fe4 <PrepareValuesToSend>:

void PrepareValuesToSend(void)
{
   80fe4:	b580      	push	{r7, lr}
   80fe6:	af00      	add	r7, sp, #0
    if (b_trigger)
   80fe8:	4b0a      	ldr	r3, [pc, #40]	; (81014 <PrepareValuesToSend+0x30>)
   80fea:	781b      	ldrb	r3, [r3, #0]
   80fec:	2b00      	cmp	r3, #0
   80fee:	d00e      	beq.n	8100e <PrepareValuesToSend+0x2a>
    {
        b_trigger = false;
   80ff0:	4b08      	ldr	r3, [pc, #32]	; (81014 <PrepareValuesToSend+0x30>)
   80ff2:	2200      	movs	r2, #0
   80ff4:	701a      	strb	r2, [r3, #0]
        
        mtr.rsvd = 1234;
   80ff6:	4b08      	ldr	r3, [pc, #32]	; (81018 <PrepareValuesToSend+0x34>)
   80ff8:	f240 42d2 	movw	r2, #1234	; 0x4d2
   80ffc:	801a      	strh	r2, [r3, #0]
        
        memcpy(&rpi_buf, &mtr, sizeof(mtr));
   80ffe:	4b06      	ldr	r3, [pc, #24]	; (81018 <PrepareValuesToSend+0x34>)
   81000:	881b      	ldrh	r3, [r3, #0]
   81002:	4a06      	ldr	r2, [pc, #24]	; (8101c <PrepareValuesToSend+0x38>)
   81004:	8013      	strh	r3, [r2, #0]
        spi_slave_transfer(&rpi_buf, sizeof(rpi_buf));
   81006:	2102      	movs	r1, #2
   81008:	4804      	ldr	r0, [pc, #16]	; (8101c <PrepareValuesToSend+0x38>)
   8100a:	4b05      	ldr	r3, [pc, #20]	; (81020 <PrepareValuesToSend+0x3c>)
   8100c:	4798      	blx	r3
    }
}
   8100e:	bf00      	nop
   81010:	bd80      	pop	{r7, pc}
   81012:	bf00      	nop
   81014:	20070b70 	.word	0x20070b70
   81018:	20070e10 	.word	0x20070e10
   8101c:	20070e14 	.word	0x20070e14
   81020:	00080e0d 	.word	0x00080e0d

00081024 <NVIC_EnableIRQ>:
{
   81024:	b480      	push	{r7}
   81026:	b083      	sub	sp, #12
   81028:	af00      	add	r7, sp, #0
   8102a:	4603      	mov	r3, r0
   8102c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8102e:	4908      	ldr	r1, [pc, #32]	; (81050 <NVIC_EnableIRQ+0x2c>)
   81030:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81034:	095b      	lsrs	r3, r3, #5
   81036:	79fa      	ldrb	r2, [r7, #7]
   81038:	f002 021f 	and.w	r2, r2, #31
   8103c:	2001      	movs	r0, #1
   8103e:	fa00 f202 	lsl.w	r2, r0, r2
   81042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81046:	bf00      	nop
   81048:	370c      	adds	r7, #12
   8104a:	46bd      	mov	sp, r7
   8104c:	bc80      	pop	{r7}
   8104e:	4770      	bx	lr
   81050:	e000e100 	.word	0xe000e100

00081054 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81054:	b480      	push	{r7}
   81056:	b083      	sub	sp, #12
   81058:	af00      	add	r7, sp, #0
   8105a:	4603      	mov	r3, r0
   8105c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8105e:	4909      	ldr	r1, [pc, #36]	; (81084 <NVIC_ClearPendingIRQ+0x30>)
   81060:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81064:	095b      	lsrs	r3, r3, #5
   81066:	79fa      	ldrb	r2, [r7, #7]
   81068:	f002 021f 	and.w	r2, r2, #31
   8106c:	2001      	movs	r0, #1
   8106e:	fa00 f202 	lsl.w	r2, r0, r2
   81072:	3360      	adds	r3, #96	; 0x60
   81074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81078:	bf00      	nop
   8107a:	370c      	adds	r7, #12
   8107c:	46bd      	mov	sp, r7
   8107e:	bc80      	pop	{r7}
   81080:	4770      	bx	lr
   81082:	bf00      	nop
   81084:	e000e100 	.word	0xe000e100

00081088 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   81088:	b480      	push	{r7}
   8108a:	b083      	sub	sp, #12
   8108c:	af00      	add	r7, sp, #0
   8108e:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   81090:	687b      	ldr	r3, [r7, #4]
   81092:	2208      	movs	r2, #8
   81094:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   81096:	687b      	ldr	r3, [r7, #4]
   81098:	2220      	movs	r2, #32
   8109a:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   8109c:	687b      	ldr	r3, [r7, #4]
   8109e:	2204      	movs	r2, #4
   810a0:	601a      	str	r2, [r3, #0]
}
   810a2:	bf00      	nop
   810a4:	370c      	adds	r7, #12
   810a6:	46bd      	mov	sp, r7
   810a8:	bc80      	pop	{r7}
   810aa:	4770      	bx	lr

000810ac <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   810ac:	b580      	push	{r7, lr}
   810ae:	b084      	sub	sp, #16
   810b0:	af00      	add	r7, sp, #0
   810b2:	6078      	str	r0, [r7, #4]
   810b4:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   810b6:	2300      	movs	r3, #0
   810b8:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   810ba:	687b      	ldr	r3, [r7, #4]
   810bc:	f04f 32ff 	mov.w	r2, #4294967295
   810c0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   810c2:	687b      	ldr	r3, [r7, #4]
   810c4:	6a1b      	ldr	r3, [r3, #32]

	twi_disable_interrupt(p_twi, MASK_ALL_INTERRUPTS);
   810c6:	f04f 31ff 	mov.w	r1, #4294967295
   810ca:	6878      	ldr	r0, [r7, #4]
   810cc:	4b14      	ldr	r3, [pc, #80]	; (81120 <twi_master_init+0x74>)
   810ce:	4798      	blx	r3

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   810d0:	6878      	ldr	r0, [r7, #4]
   810d2:	4b14      	ldr	r3, [pc, #80]	; (81124 <twi_master_init+0x78>)
   810d4:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   810d6:	6878      	ldr	r0, [r7, #4]
   810d8:	4b13      	ldr	r3, [pc, #76]	; (81128 <twi_master_init+0x7c>)
   810da:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   810dc:	683b      	ldr	r3, [r7, #0]
   810de:	6859      	ldr	r1, [r3, #4]
   810e0:	683b      	ldr	r3, [r7, #0]
   810e2:	681b      	ldr	r3, [r3, #0]
   810e4:	461a      	mov	r2, r3
   810e6:	6878      	ldr	r0, [r7, #4]
   810e8:	4b10      	ldr	r3, [pc, #64]	; (8112c <twi_master_init+0x80>)
   810ea:	4798      	blx	r3
   810ec:	4603      	mov	r3, r0
   810ee:	2b01      	cmp	r3, #1
   810f0:	d101      	bne.n	810f6 <twi_master_init+0x4a>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   810f2:	2301      	movs	r3, #1
   810f4:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   810f6:	683b      	ldr	r3, [r7, #0]
   810f8:	7a5b      	ldrb	r3, [r3, #9]
   810fa:	2b01      	cmp	r3, #1
   810fc:	d102      	bne.n	81104 <twi_master_init+0x58>
		p_twi->TWI_CR = TWI_CR_QUICK;
   810fe:	687b      	ldr	r3, [r7, #4]
   81100:	2240      	movs	r2, #64	; 0x40
   81102:	601a      	str	r2, [r3, #0]
	}
    
    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   81104:	f44f 7150 	mov.w	r1, #832	; 0x340
   81108:	6878      	ldr	r0, [r7, #4]
   8110a:	4b09      	ldr	r3, [pc, #36]	; (81130 <twi_master_init+0x84>)
   8110c:	4798      	blx	r3

    twiBusy = false;
   8110e:	4b09      	ldr	r3, [pc, #36]	; (81134 <twi_master_init+0x88>)
   81110:	2200      	movs	r2, #0
   81112:	701a      	strb	r2, [r3, #0]
    
	return status;
   81114:	68fb      	ldr	r3, [r7, #12]
}
   81116:	4618      	mov	r0, r3
   81118:	3710      	adds	r7, #16
   8111a:	46bd      	mov	sp, r7
   8111c:	bd80      	pop	{r7, pc}
   8111e:	bf00      	nop
   81120:	0008167f 	.word	0x0008167f
   81124:	000816e1 	.word	0x000816e1
   81128:	00081089 	.word	0x00081089
   8112c:	00081139 	.word	0x00081139
   81130:	00081665 	.word	0x00081665
   81134:	20070d98 	.word	0x20070d98

00081138 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   81138:	b480      	push	{r7}
   8113a:	b089      	sub	sp, #36	; 0x24
   8113c:	af00      	add	r7, sp, #0
   8113e:	60f8      	str	r0, [r7, #12]
   81140:	60b9      	str	r1, [r7, #8]
   81142:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   81144:	2300      	movs	r3, #0
   81146:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   81148:	68bb      	ldr	r3, [r7, #8]
   8114a:	4a34      	ldr	r2, [pc, #208]	; (8121c <twi_set_speed+0xe4>)
   8114c:	4293      	cmp	r3, r2
   8114e:	d901      	bls.n	81154 <twi_set_speed+0x1c>
		return FAIL;
   81150:	2301      	movs	r3, #1
   81152:	e05d      	b.n	81210 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   81154:	68bb      	ldr	r3, [r7, #8]
   81156:	4a32      	ldr	r2, [pc, #200]	; (81220 <twi_set_speed+0xe8>)
   81158:	4293      	cmp	r3, r2
   8115a:	d937      	bls.n	811cc <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8115c:	687b      	ldr	r3, [r7, #4]
   8115e:	4a31      	ldr	r2, [pc, #196]	; (81224 <twi_set_speed+0xec>)
   81160:	fba2 2303 	umull	r2, r3, r2, r3
   81164:	0b9b      	lsrs	r3, r3, #14
   81166:	3b04      	subs	r3, #4
   81168:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8116a:	68ba      	ldr	r2, [r7, #8]
   8116c:	4b2e      	ldr	r3, [pc, #184]	; (81228 <twi_set_speed+0xf0>)
   8116e:	4413      	add	r3, r2
   81170:	009b      	lsls	r3, r3, #2
   81172:	687a      	ldr	r2, [r7, #4]
   81174:	fbb2 f3f3 	udiv	r3, r2, r3
   81178:	3b04      	subs	r3, #4
   8117a:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8117c:	e005      	b.n	8118a <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   8117e:	69fb      	ldr	r3, [r7, #28]
   81180:	3301      	adds	r3, #1
   81182:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   81184:	697b      	ldr	r3, [r7, #20]
   81186:	085b      	lsrs	r3, r3, #1
   81188:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8118a:	697b      	ldr	r3, [r7, #20]
   8118c:	2bff      	cmp	r3, #255	; 0xff
   8118e:	d909      	bls.n	811a4 <twi_set_speed+0x6c>
   81190:	69fb      	ldr	r3, [r7, #28]
   81192:	2b06      	cmp	r3, #6
   81194:	d9f3      	bls.n	8117e <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81196:	e005      	b.n	811a4 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   81198:	69fb      	ldr	r3, [r7, #28]
   8119a:	3301      	adds	r3, #1
   8119c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   8119e:	693b      	ldr	r3, [r7, #16]
   811a0:	085b      	lsrs	r3, r3, #1
   811a2:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   811a4:	693b      	ldr	r3, [r7, #16]
   811a6:	2bff      	cmp	r3, #255	; 0xff
   811a8:	d902      	bls.n	811b0 <twi_set_speed+0x78>
   811aa:	69fb      	ldr	r3, [r7, #28]
   811ac:	2b06      	cmp	r3, #6
   811ae:	d9f3      	bls.n	81198 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   811b0:	697b      	ldr	r3, [r7, #20]
   811b2:	b2da      	uxtb	r2, r3
   811b4:	693b      	ldr	r3, [r7, #16]
   811b6:	021b      	lsls	r3, r3, #8
   811b8:	b29b      	uxth	r3, r3
   811ba:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   811bc:	69fb      	ldr	r3, [r7, #28]
   811be:	041b      	lsls	r3, r3, #16
   811c0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   811c4:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   811c6:	68fb      	ldr	r3, [r7, #12]
   811c8:	611a      	str	r2, [r3, #16]
   811ca:	e020      	b.n	8120e <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   811cc:	68bb      	ldr	r3, [r7, #8]
   811ce:	005b      	lsls	r3, r3, #1
   811d0:	687a      	ldr	r2, [r7, #4]
   811d2:	fbb2 f3f3 	udiv	r3, r2, r3
   811d6:	3b04      	subs	r3, #4
   811d8:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   811da:	e005      	b.n	811e8 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   811dc:	69fb      	ldr	r3, [r7, #28]
   811de:	3301      	adds	r3, #1
   811e0:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   811e2:	69bb      	ldr	r3, [r7, #24]
   811e4:	085b      	lsrs	r3, r3, #1
   811e6:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   811e8:	69bb      	ldr	r3, [r7, #24]
   811ea:	2bff      	cmp	r3, #255	; 0xff
   811ec:	d902      	bls.n	811f4 <twi_set_speed+0xbc>
   811ee:	69fb      	ldr	r3, [r7, #28]
   811f0:	2b06      	cmp	r3, #6
   811f2:	d9f3      	bls.n	811dc <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   811f4:	69bb      	ldr	r3, [r7, #24]
   811f6:	b2da      	uxtb	r2, r3
   811f8:	69bb      	ldr	r3, [r7, #24]
   811fa:	021b      	lsls	r3, r3, #8
   811fc:	b29b      	uxth	r3, r3
   811fe:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   81200:	69fb      	ldr	r3, [r7, #28]
   81202:	041b      	lsls	r3, r3, #16
   81204:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   81208:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   8120a:	68fb      	ldr	r3, [r7, #12]
   8120c:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   8120e:	2300      	movs	r3, #0
}
   81210:	4618      	mov	r0, r3
   81212:	3724      	adds	r7, #36	; 0x24
   81214:	46bd      	mov	sp, r7
   81216:	bc80      	pop	{r7}
   81218:	4770      	bx	lr
   8121a:	bf00      	nop
   8121c:	00061a80 	.word	0x00061a80
   81220:	0005dc00 	.word	0x0005dc00
   81224:	057619f1 	.word	0x057619f1
   81228:	3ffd1200 	.word	0x3ffd1200

0008122c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   8122c:	b480      	push	{r7}
   8122e:	b085      	sub	sp, #20
   81230:	af00      	add	r7, sp, #0
   81232:	6078      	str	r0, [r7, #4]
   81234:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   81236:	683b      	ldr	r3, [r7, #0]
   81238:	2b00      	cmp	r3, #0
   8123a:	d101      	bne.n	81240 <twi_mk_addr+0x14>
		return 0;
   8123c:	2300      	movs	r3, #0
   8123e:	e01d      	b.n	8127c <twi_mk_addr+0x50>

	val = addr[0];
   81240:	687b      	ldr	r3, [r7, #4]
   81242:	781b      	ldrb	r3, [r3, #0]
   81244:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   81246:	683b      	ldr	r3, [r7, #0]
   81248:	2b01      	cmp	r3, #1
   8124a:	dd09      	ble.n	81260 <twi_mk_addr+0x34>
		val <<= 8;
   8124c:	68fb      	ldr	r3, [r7, #12]
   8124e:	021b      	lsls	r3, r3, #8
   81250:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   81252:	687b      	ldr	r3, [r7, #4]
   81254:	3301      	adds	r3, #1
   81256:	781b      	ldrb	r3, [r3, #0]
   81258:	461a      	mov	r2, r3
   8125a:	68fb      	ldr	r3, [r7, #12]
   8125c:	4313      	orrs	r3, r2
   8125e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   81260:	683b      	ldr	r3, [r7, #0]
   81262:	2b02      	cmp	r3, #2
   81264:	dd09      	ble.n	8127a <twi_mk_addr+0x4e>
		val <<= 8;
   81266:	68fb      	ldr	r3, [r7, #12]
   81268:	021b      	lsls	r3, r3, #8
   8126a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   8126c:	687b      	ldr	r3, [r7, #4]
   8126e:	3302      	adds	r3, #2
   81270:	781b      	ldrb	r3, [r3, #0]
   81272:	461a      	mov	r2, r3
   81274:	68fb      	ldr	r3, [r7, #12]
   81276:	4313      	orrs	r3, r2
   81278:	60fb      	str	r3, [r7, #12]
	}
	return val;
   8127a:	68fb      	ldr	r3, [r7, #12]
}
   8127c:	4618      	mov	r0, r3
   8127e:	3714      	adds	r7, #20
   81280:	46bd      	mov	sp, r7
   81282:	bc80      	pop	{r7}
   81284:	4770      	bx	lr
	...

00081288 <twi_is_busy>:
	}
}
#endif
#if 1
uint8_t twi_is_busy(void)
{
   81288:	b480      	push	{r7}
   8128a:	af00      	add	r7, sp, #0
    return twiBusy;
   8128c:	4b02      	ldr	r3, [pc, #8]	; (81298 <twi_is_busy+0x10>)
   8128e:	781b      	ldrb	r3, [r3, #0]
}
   81290:	4618      	mov	r0, r3
   81292:	46bd      	mov	sp, r7
   81294:	bc80      	pop	{r7}
   81296:	4770      	bx	lr
   81298:	20070d98 	.word	0x20070d98

0008129c <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   8129c:	b480      	push	{r7}
   8129e:	af00      	add	r7, sp, #0
    return &txPacket;
   812a0:	4b02      	ldr	r3, [pc, #8]	; (812ac <twi_get_tx_packet+0x10>)
}
   812a2:	4618      	mov	r0, r3
   812a4:	46bd      	mov	sp, r7
   812a6:	bc80      	pop	{r7}
   812a8:	4770      	bx	lr
   812aa:	bf00      	nop
   812ac:	20070b78 	.word	0x20070b78

000812b0 <twi_get_rx_packet>:

twi_packet_t *twi_get_rx_packet(void)
{
   812b0:	b480      	push	{r7}
   812b2:	af00      	add	r7, sp, #0
    return &rxPacket;
   812b4:	4b02      	ldr	r3, [pc, #8]	; (812c0 <twi_get_rx_packet+0x10>)
}
   812b6:	4618      	mov	r0, r3
   812b8:	46bd      	mov	sp, r7
   812ba:	bc80      	pop	{r7}
   812bc:	4770      	bx	lr
   812be:	bf00      	nop
   812c0:	20070c88 	.word	0x20070c88

000812c4 <twi_pdc_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_pdc_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   812c4:	b580      	push	{r7, lr}
   812c6:	b084      	sub	sp, #16
   812c8:	af00      	add	r7, sp, #0
   812ca:	6078      	str	r0, [r7, #4]
   812cc:	6039      	str	r1, [r7, #0]
    pdc_packet_t rxPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   812ce:	683b      	ldr	r3, [r7, #0]
   812d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   812d4:	2b00      	cmp	r3, #0
   812d6:	d101      	bne.n	812dc <twi_pdc_master_read+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   812d8:	2301      	movs	r3, #1
   812da:	e047      	b.n	8136c <twi_pdc_master_read+0xa8>
    }
    
    twiBusy = true;
   812dc:	4b25      	ldr	r3, [pc, #148]	; (81374 <twi_pdc_master_read+0xb0>)
   812de:	2201      	movs	r2, #1
   812e0:	701a      	strb	r2, [r3, #0]

    // Ensure Rx is already empty
    twi_read_byte(TWI0);
   812e2:	4825      	ldr	r0, [pc, #148]	; (81378 <twi_pdc_master_read+0xb4>)
   812e4:	4b25      	ldr	r3, [pc, #148]	; (8137c <twi_pdc_master_read+0xb8>)
   812e6:	4798      	blx	r3

    // Set read mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   812e8:	687b      	ldr	r3, [r7, #4]
   812ea:	2200      	movs	r2, #0
   812ec:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   812ee:	683b      	ldr	r3, [r7, #0]
   812f0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   812f4:	041b      	lsls	r3, r3, #16
   812f6:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   812fa:	683b      	ldr	r3, [r7, #0]
   812fc:	685b      	ldr	r3, [r3, #4]
   812fe:	021b      	lsls	r3, r3, #8
   81300:	f403 7340 	and.w	r3, r3, #768	; 0x300
   81304:	4313      	orrs	r3, r2
   81306:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   8130a:	687b      	ldr	r3, [r7, #4]
   8130c:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   8130e:	687b      	ldr	r3, [r7, #4]
   81310:	2200      	movs	r2, #0
   81312:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   81314:	683a      	ldr	r2, [r7, #0]
   81316:	683b      	ldr	r3, [r7, #0]
   81318:	685b      	ldr	r3, [r3, #4]
   8131a:	4619      	mov	r1, r3
   8131c:	4610      	mov	r0, r2
   8131e:	4b18      	ldr	r3, [pc, #96]	; (81380 <twi_pdc_master_read+0xbc>)
   81320:	4798      	blx	r3
   81322:	4602      	mov	r2, r0
   81324:	687b      	ldr	r3, [r7, #4]
   81326:	60da      	str	r2, [r3, #12]
        twi_enable_interrupt(TWI0, IER_ERROR_INTERRUPTS);
    }
    else
    {
#endif
        rxPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   81328:	683b      	ldr	r3, [r7, #0]
   8132a:	3308      	adds	r3, #8
   8132c:	60bb      	str	r3, [r7, #8]
        rxPdcPacket.ul_size = p_packet->length - 1;
   8132e:	683b      	ldr	r3, [r7, #0]
   81330:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81334:	3b01      	subs	r3, #1
   81336:	60fb      	str	r3, [r7, #12]
        pdc_rx_init(PDC_TWI0, &rxPdcPacket, NULL);
   81338:	f107 0308 	add.w	r3, r7, #8
   8133c:	2200      	movs	r2, #0
   8133e:	4619      	mov	r1, r3
   81340:	4810      	ldr	r0, [pc, #64]	; (81384 <twi_pdc_master_read+0xc0>)
   81342:	4b11      	ldr	r3, [pc, #68]	; (81388 <twi_pdc_master_read+0xc4>)
   81344:	4798      	blx	r3

        pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_RXTEN);
   81346:	2101      	movs	r1, #1
   81348:	480e      	ldr	r0, [pc, #56]	; (81384 <twi_pdc_master_read+0xc0>)
   8134a:	4b10      	ldr	r3, [pc, #64]	; (8138c <twi_pdc_master_read+0xc8>)
   8134c:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_START;
   8134e:	4b0a      	ldr	r3, [pc, #40]	; (81378 <twi_pdc_master_read+0xb4>)
   81350:	2201      	movs	r2, #1
   81352:	601a      	str	r2, [r3, #0]

        twi_enable_interrupt(p_twi, TWI_IER_ENDRX);
   81354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81358:	6878      	ldr	r0, [r7, #4]
   8135a:	4b0d      	ldr	r3, [pc, #52]	; (81390 <twi_pdc_master_read+0xcc>)
   8135c:	4798      	blx	r3
        NVIC_ClearPendingIRQ(TWI0_IRQn);
   8135e:	2016      	movs	r0, #22
   81360:	4b0c      	ldr	r3, [pc, #48]	; (81394 <twi_pdc_master_read+0xd0>)
   81362:	4798      	blx	r3
        NVIC_EnableIRQ(TWI0_IRQn);
   81364:	2016      	movs	r0, #22
   81366:	4b0c      	ldr	r3, [pc, #48]	; (81398 <twi_pdc_master_read+0xd4>)
   81368:	4798      	blx	r3
//    }

    return TWI_SUCCESS;
   8136a:	2300      	movs	r3, #0
}
   8136c:	4618      	mov	r0, r3
   8136e:	3710      	adds	r7, #16
   81370:	46bd      	mov	sp, r7
   81372:	bd80      	pop	{r7, pc}
   81374:	20070d98 	.word	0x20070d98
   81378:	4008c000 	.word	0x4008c000
   8137c:	000816c9 	.word	0x000816c9
   81380:	0008122d 	.word	0x0008122d
   81384:	4008c100 	.word	0x4008c100
   81388:	000801eb 	.word	0x000801eb
   8138c:	0008022d 	.word	0x0008022d
   81390:	00081665 	.word	0x00081665
   81394:	00081055 	.word	0x00081055
   81398:	00081025 	.word	0x00081025

0008139c <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   8139c:	b580      	push	{r7, lr}
   8139e:	b084      	sub	sp, #16
   813a0:	af00      	add	r7, sp, #0
   813a2:	6078      	str	r0, [r7, #4]
   813a4:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   813a6:	683b      	ldr	r3, [r7, #0]
   813a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   813ac:	2b00      	cmp	r3, #0
   813ae:	d101      	bne.n	813b4 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   813b0:	2301      	movs	r3, #1
   813b2:	e040      	b.n	81436 <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   813b4:	4b22      	ldr	r3, [pc, #136]	; (81440 <twi_pdc_master_write+0xa4>)
   813b6:	2201      	movs	r2, #1
   813b8:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   813ba:	683b      	ldr	r3, [r7, #0]
   813bc:	3308      	adds	r3, #8
   813be:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   813c0:	683b      	ldr	r3, [r7, #0]
   813c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   813c6:	3b01      	subs	r3, #1
   813c8:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   813ca:	f107 0308 	add.w	r3, r7, #8
   813ce:	2200      	movs	r2, #0
   813d0:	4619      	mov	r1, r3
   813d2:	481c      	ldr	r0, [pc, #112]	; (81444 <twi_pdc_master_write+0xa8>)
   813d4:	4b1c      	ldr	r3, [pc, #112]	; (81448 <twi_pdc_master_write+0xac>)
   813d6:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   813d8:	687b      	ldr	r3, [r7, #4]
   813da:	2200      	movs	r2, #0
   813dc:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   813de:	683b      	ldr	r3, [r7, #0]
   813e0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   813e4:	041b      	lsls	r3, r3, #16
   813e6:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   813ea:	683b      	ldr	r3, [r7, #0]
   813ec:	685b      	ldr	r3, [r3, #4]
   813ee:	021b      	lsls	r3, r3, #8
   813f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
   813f4:	431a      	orrs	r2, r3
   813f6:	687b      	ldr	r3, [r7, #4]
   813f8:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   813fa:	687b      	ldr	r3, [r7, #4]
   813fc:	2200      	movs	r2, #0
   813fe:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   81400:	683a      	ldr	r2, [r7, #0]
   81402:	683b      	ldr	r3, [r7, #0]
   81404:	685b      	ldr	r3, [r3, #4]
   81406:	4619      	mov	r1, r3
   81408:	4610      	mov	r0, r2
   8140a:	4b10      	ldr	r3, [pc, #64]	; (8144c <twi_pdc_master_write+0xb0>)
   8140c:	4798      	blx	r3
   8140e:	4602      	mov	r2, r0
   81410:	687b      	ldr	r3, [r7, #4]
   81412:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   81414:	f44f 7180 	mov.w	r1, #256	; 0x100
   81418:	480a      	ldr	r0, [pc, #40]	; (81444 <twi_pdc_master_write+0xa8>)
   8141a:	4b0d      	ldr	r3, [pc, #52]	; (81450 <twi_pdc_master_write+0xb4>)
   8141c:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   8141e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81422:	6878      	ldr	r0, [r7, #4]
   81424:	4b0b      	ldr	r3, [pc, #44]	; (81454 <twi_pdc_master_write+0xb8>)
   81426:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   81428:	2016      	movs	r0, #22
   8142a:	4b0b      	ldr	r3, [pc, #44]	; (81458 <twi_pdc_master_write+0xbc>)
   8142c:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   8142e:	2016      	movs	r0, #22
   81430:	4b0a      	ldr	r3, [pc, #40]	; (8145c <twi_pdc_master_write+0xc0>)
   81432:	4798      	blx	r3

    return TWI_SUCCESS;
   81434:	2300      	movs	r3, #0
}
   81436:	4618      	mov	r0, r3
   81438:	3710      	adds	r7, #16
   8143a:	46bd      	mov	sp, r7
   8143c:	bd80      	pop	{r7, pc}
   8143e:	bf00      	nop
   81440:	20070d98 	.word	0x20070d98
   81444:	4008c100 	.word	0x4008c100
   81448:	000801a9 	.word	0x000801a9
   8144c:	0008122d 	.word	0x0008122d
   81450:	0008022d 	.word	0x0008022d
   81454:	00081665 	.word	0x00081665
   81458:	00081055 	.word	0x00081055
   8145c:	00081025 	.word	0x00081025

00081460 <twi_set_compass_rx_callback>:
 * \brief Callback function for TWI receive.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_rx_callback(void (*callback)(void))
{
   81460:	b480      	push	{r7}
   81462:	b083      	sub	sp, #12
   81464:	af00      	add	r7, sp, #0
   81466:	6078      	str	r0, [r7, #4]
    compassRxCallback = callback;
   81468:	4a03      	ldr	r2, [pc, #12]	; (81478 <twi_set_compass_rx_callback+0x18>)
   8146a:	687b      	ldr	r3, [r7, #4]
   8146c:	6013      	str	r3, [r2, #0]
}
   8146e:	bf00      	nop
   81470:	370c      	adds	r7, #12
   81472:	46bd      	mov	sp, r7
   81474:	bc80      	pop	{r7}
   81476:	4770      	bx	lr
   81478:	20070da4 	.word	0x20070da4

0008147c <twi_set_compass_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_tx_callback(void (*callback)(void))
{
   8147c:	b480      	push	{r7}
   8147e:	b083      	sub	sp, #12
   81480:	af00      	add	r7, sp, #0
   81482:	6078      	str	r0, [r7, #4]
    compassTxCallback = callback;
   81484:	4a03      	ldr	r2, [pc, #12]	; (81494 <twi_set_compass_tx_callback+0x18>)
   81486:	687b      	ldr	r3, [r7, #4]
   81488:	6013      	str	r3, [r2, #0]
}
   8148a:	bf00      	nop
   8148c:	370c      	adds	r7, #12
   8148e:	46bd      	mov	sp, r7
   81490:	bc80      	pop	{r7}
   81492:	4770      	bx	lr
   81494:	20070da0 	.word	0x20070da0

00081498 <twi_set_lcd_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_lcd_tx_callback(void (*callback)(void))
{
   81498:	b480      	push	{r7}
   8149a:	b083      	sub	sp, #12
   8149c:	af00      	add	r7, sp, #0
   8149e:	6078      	str	r0, [r7, #4]
    lcdTxCallback = callback;
   814a0:	4a03      	ldr	r2, [pc, #12]	; (814b0 <twi_set_lcd_tx_callback+0x18>)
   814a2:	687b      	ldr	r3, [r7, #4]
   814a4:	6013      	str	r3, [r2, #0]
}
   814a6:	bf00      	nop
   814a8:	370c      	adds	r7, #12
   814aa:	46bd      	mov	sp, r7
   814ac:	bc80      	pop	{r7}
   814ae:	4770      	bx	lr
   814b0:	20070d9c 	.word	0x20070d9c

000814b4 <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   814b4:	b590      	push	{r4, r7, lr}
   814b6:	b083      	sub	sp, #12
   814b8:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   814ba:	485d      	ldr	r0, [pc, #372]	; (81630 <TWI0_Handler+0x17c>)
   814bc:	4b5d      	ldr	r3, [pc, #372]	; (81634 <TWI0_Handler+0x180>)
   814be:	4798      	blx	r3
   814c0:	4604      	mov	r4, r0
   814c2:	485b      	ldr	r0, [pc, #364]	; (81630 <TWI0_Handler+0x17c>)
   814c4:	4b5c      	ldr	r3, [pc, #368]	; (81638 <TWI0_Handler+0x184>)
   814c6:	4798      	blx	r3
   814c8:	4603      	mov	r3, r0
   814ca:	4023      	ands	r3, r4
   814cc:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   814ce:	687b      	ldr	r3, [r7, #4]
   814d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   814d4:	2b00      	cmp	r3, #0
   814d6:	d014      	beq.n	81502 <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   814d8:	f44f 7100 	mov.w	r1, #512	; 0x200
   814dc:	4857      	ldr	r0, [pc, #348]	; (8163c <TWI0_Handler+0x188>)
   814de:	4b58      	ldr	r3, [pc, #352]	; (81640 <TWI0_Handler+0x18c>)
   814e0:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   814e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   814e6:	4852      	ldr	r0, [pc, #328]	; (81630 <TWI0_Handler+0x17c>)
   814e8:	4b56      	ldr	r3, [pc, #344]	; (81644 <TWI0_Handler+0x190>)
   814ea:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   814ec:	2104      	movs	r1, #4
   814ee:	4850      	ldr	r0, [pc, #320]	; (81630 <TWI0_Handler+0x17c>)
   814f0:	4b55      	ldr	r3, [pc, #340]	; (81648 <TWI0_Handler+0x194>)
   814f2:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   814f4:	484e      	ldr	r0, [pc, #312]	; (81630 <TWI0_Handler+0x17c>)
   814f6:	4b4f      	ldr	r3, [pc, #316]	; (81634 <TWI0_Handler+0x180>)
   814f8:	4798      	blx	r3
   814fa:	4602      	mov	r2, r0
   814fc:	687b      	ldr	r3, [r7, #4]
   814fe:	4313      	orrs	r3, r2
   81500:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   81502:	687b      	ldr	r3, [r7, #4]
   81504:	f003 0304 	and.w	r3, r3, #4
   81508:	2b00      	cmp	r3, #0
   8150a:	d01a      	beq.n	81542 <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   8150c:	2104      	movs	r1, #4
   8150e:	4848      	ldr	r0, [pc, #288]	; (81630 <TWI0_Handler+0x17c>)
   81510:	4b4c      	ldr	r3, [pc, #304]	; (81644 <TWI0_Handler+0x190>)
   81512:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   81514:	4b46      	ldr	r3, [pc, #280]	; (81630 <TWI0_Handler+0x17c>)
   81516:	2202      	movs	r2, #2
   81518:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   8151a:	4a45      	ldr	r2, [pc, #276]	; (81630 <TWI0_Handler+0x17c>)
   8151c:	4b4b      	ldr	r3, [pc, #300]	; (8164c <TWI0_Handler+0x198>)
   8151e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81522:	3b01      	subs	r3, #1
   81524:	4949      	ldr	r1, [pc, #292]	; (8164c <TWI0_Handler+0x198>)
   81526:	440b      	add	r3, r1
   81528:	7a1b      	ldrb	r3, [r3, #8]
   8152a:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   8152c:	2101      	movs	r1, #1
   8152e:	4840      	ldr	r0, [pc, #256]	; (81630 <TWI0_Handler+0x17c>)
   81530:	4b45      	ldr	r3, [pc, #276]	; (81648 <TWI0_Handler+0x194>)
   81532:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   81534:	483e      	ldr	r0, [pc, #248]	; (81630 <TWI0_Handler+0x17c>)
   81536:	4b3f      	ldr	r3, [pc, #252]	; (81634 <TWI0_Handler+0x180>)
   81538:	4798      	blx	r3
   8153a:	4602      	mov	r2, r0
   8153c:	687b      	ldr	r3, [r7, #4]
   8153e:	4313      	orrs	r3, r2
   81540:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   81542:	687b      	ldr	r3, [r7, #4]
   81544:	f003 0301 	and.w	r3, r3, #1
   81548:	2b00      	cmp	r3, #0
   8154a:	d014      	beq.n	81576 <TWI0_Handler+0xc2>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   8154c:	2101      	movs	r1, #1
   8154e:	4838      	ldr	r0, [pc, #224]	; (81630 <TWI0_Handler+0x17c>)
   81550:	4b3c      	ldr	r3, [pc, #240]	; (81644 <TWI0_Handler+0x190>)
   81552:	4798      	blx	r3

        // If defined, call the connected function.
        if(compassTxCallback != NULL)
   81554:	4b3e      	ldr	r3, [pc, #248]	; (81650 <TWI0_Handler+0x19c>)
   81556:	681b      	ldr	r3, [r3, #0]
   81558:	2b00      	cmp	r3, #0
   8155a:	d002      	beq.n	81562 <TWI0_Handler+0xae>
        {
            compassTxCallback();
   8155c:	4b3c      	ldr	r3, [pc, #240]	; (81650 <TWI0_Handler+0x19c>)
   8155e:	681b      	ldr	r3, [r3, #0]
   81560:	4798      	blx	r3
        }

        // If defined, call the connected function.
        if(lcdTxCallback != NULL)
   81562:	4b3c      	ldr	r3, [pc, #240]	; (81654 <TWI0_Handler+0x1a0>)
   81564:	681b      	ldr	r3, [r3, #0]
   81566:	2b00      	cmp	r3, #0
   81568:	d002      	beq.n	81570 <TWI0_Handler+0xbc>
        {
          lcdTxCallback();
   8156a:	4b3a      	ldr	r3, [pc, #232]	; (81654 <TWI0_Handler+0x1a0>)
   8156c:	681b      	ldr	r3, [r3, #0]
   8156e:	4798      	blx	r3
        }

        twiBusy = false;
   81570:	4b39      	ldr	r3, [pc, #228]	; (81658 <TWI0_Handler+0x1a4>)
   81572:	2200      	movs	r2, #0
   81574:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   81576:	687b      	ldr	r3, [r7, #4]
   81578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   8157c:	2b00      	cmp	r3, #0
   8157e:	d016      	beq.n	815ae <TWI0_Handler+0xfa>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   81580:	2102      	movs	r1, #2
   81582:	482e      	ldr	r0, [pc, #184]	; (8163c <TWI0_Handler+0x188>)
   81584:	4b2e      	ldr	r3, [pc, #184]	; (81640 <TWI0_Handler+0x18c>)
   81586:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   81588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8158c:	4828      	ldr	r0, [pc, #160]	; (81630 <TWI0_Handler+0x17c>)
   8158e:	4b2d      	ldr	r3, [pc, #180]	; (81644 <TWI0_Handler+0x190>)
   81590:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   81592:	2102      	movs	r1, #2
   81594:	4826      	ldr	r0, [pc, #152]	; (81630 <TWI0_Handler+0x17c>)
   81596:	4b2c      	ldr	r3, [pc, #176]	; (81648 <TWI0_Handler+0x194>)
   81598:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   8159a:	4b25      	ldr	r3, [pc, #148]	; (81630 <TWI0_Handler+0x17c>)
   8159c:	2202      	movs	r2, #2
   8159e:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   815a0:	4823      	ldr	r0, [pc, #140]	; (81630 <TWI0_Handler+0x17c>)
   815a2:	4b24      	ldr	r3, [pc, #144]	; (81634 <TWI0_Handler+0x180>)
   815a4:	4798      	blx	r3
   815a6:	4602      	mov	r2, r0
   815a8:	687b      	ldr	r3, [r7, #4]
   815aa:	4313      	orrs	r3, r2
   815ac:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   815ae:	687b      	ldr	r3, [r7, #4]
   815b0:	f003 0302 	and.w	r3, r3, #2
   815b4:	2b00      	cmp	r3, #0
   815b6:	d018      	beq.n	815ea <TWI0_Handler+0x136>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   815b8:	2102      	movs	r1, #2
   815ba:	481d      	ldr	r0, [pc, #116]	; (81630 <TWI0_Handler+0x17c>)
   815bc:	4b21      	ldr	r3, [pc, #132]	; (81644 <TWI0_Handler+0x190>)
   815be:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   815c0:	4b26      	ldr	r3, [pc, #152]	; (8165c <TWI0_Handler+0x1a8>)
   815c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   815c6:	3b01      	subs	r3, #1
   815c8:	4a19      	ldr	r2, [pc, #100]	; (81630 <TWI0_Handler+0x17c>)
   815ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
   815cc:	b2d1      	uxtb	r1, r2
   815ce:	4a23      	ldr	r2, [pc, #140]	; (8165c <TWI0_Handler+0x1a8>)
   815d0:	4413      	add	r3, r2
   815d2:	460a      	mov	r2, r1
   815d4:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(compassRxCallback != NULL)
   815d6:	4b22      	ldr	r3, [pc, #136]	; (81660 <TWI0_Handler+0x1ac>)
   815d8:	681b      	ldr	r3, [r3, #0]
   815da:	2b00      	cmp	r3, #0
   815dc:	d002      	beq.n	815e4 <TWI0_Handler+0x130>
        {
            compassRxCallback();
   815de:	4b20      	ldr	r3, [pc, #128]	; (81660 <TWI0_Handler+0x1ac>)
   815e0:	681b      	ldr	r3, [r3, #0]
   815e2:	4798      	blx	r3
        }

        twiBusy = false;
   815e4:	4b1c      	ldr	r3, [pc, #112]	; (81658 <TWI0_Handler+0x1a4>)
   815e6:	2200      	movs	r2, #0
   815e8:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   815ea:	687b      	ldr	r3, [r7, #4]
   815ec:	f403 7350 	and.w	r3, r3, #832	; 0x340
   815f0:	2b00      	cmp	r3, #0
   815f2:	d019      	beq.n	81628 <TWI0_Handler+0x174>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   815f4:	f240 2102 	movw	r1, #514	; 0x202
   815f8:	4810      	ldr	r0, [pc, #64]	; (8163c <TWI0_Handler+0x188>)
   815fa:	4b11      	ldr	r3, [pc, #68]	; (81640 <TWI0_Handler+0x18c>)
   815fc:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   815fe:	687b      	ldr	r3, [r7, #4]
   81600:	f403 7380 	and.w	r3, r3, #256	; 0x100
   81604:	2b00      	cmp	r3, #0
   81606:	d102      	bne.n	8160e <TWI0_Handler+0x15a>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   81608:	4b09      	ldr	r3, [pc, #36]	; (81630 <TWI0_Handler+0x17c>)
   8160a:	2202      	movs	r2, #2
   8160c:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   8160e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81612:	4807      	ldr	r0, [pc, #28]	; (81630 <TWI0_Handler+0x17c>)
   81614:	4b0b      	ldr	r3, [pc, #44]	; (81644 <TWI0_Handler+0x190>)
   81616:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   81618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8161c:	4804      	ldr	r0, [pc, #16]	; (81630 <TWI0_Handler+0x17c>)
   8161e:	4b09      	ldr	r3, [pc, #36]	; (81644 <TWI0_Handler+0x190>)
   81620:	4798      	blx	r3

        twiBusy = false;
   81622:	4b0d      	ldr	r3, [pc, #52]	; (81658 <TWI0_Handler+0x1a4>)
   81624:	2200      	movs	r2, #0
   81626:	701a      	strb	r2, [r3, #0]
	}
}
   81628:	bf00      	nop
   8162a:	370c      	adds	r7, #12
   8162c:	46bd      	mov	sp, r7
   8162e:	bd90      	pop	{r4, r7, pc}
   81630:	4008c000 	.word	0x4008c000
   81634:	0008169d 	.word	0x0008169d
   81638:	000816b3 	.word	0x000816b3
   8163c:	4008c100 	.word	0x4008c100
   81640:	0008024d 	.word	0x0008024d
   81644:	0008167f 	.word	0x0008167f
   81648:	00081665 	.word	0x00081665
   8164c:	20070b78 	.word	0x20070b78
   81650:	20070da0 	.word	0x20070da0
   81654:	20070d9c 	.word	0x20070d9c
   81658:	20070d98 	.word	0x20070d98
   8165c:	20070c88 	.word	0x20070c88
   81660:	20070da4 	.word	0x20070da4

00081664 <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   81664:	b480      	push	{r7}
   81666:	b083      	sub	sp, #12
   81668:	af00      	add	r7, sp, #0
   8166a:	6078      	str	r0, [r7, #4]
   8166c:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   8166e:	687b      	ldr	r3, [r7, #4]
   81670:	683a      	ldr	r2, [r7, #0]
   81672:	625a      	str	r2, [r3, #36]	; 0x24
}
   81674:	bf00      	nop
   81676:	370c      	adds	r7, #12
   81678:	46bd      	mov	sp, r7
   8167a:	bc80      	pop	{r7}
   8167c:	4770      	bx	lr

0008167e <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   8167e:	b480      	push	{r7}
   81680:	b083      	sub	sp, #12
   81682:	af00      	add	r7, sp, #0
   81684:	6078      	str	r0, [r7, #4]
   81686:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   81688:	687b      	ldr	r3, [r7, #4]
   8168a:	683a      	ldr	r2, [r7, #0]
   8168c:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   8168e:	687b      	ldr	r3, [r7, #4]
   81690:	6a1b      	ldr	r3, [r3, #32]
}
   81692:	bf00      	nop
   81694:	370c      	adds	r7, #12
   81696:	46bd      	mov	sp, r7
   81698:	bc80      	pop	{r7}
   8169a:	4770      	bx	lr

0008169c <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   8169c:	b480      	push	{r7}
   8169e:	b083      	sub	sp, #12
   816a0:	af00      	add	r7, sp, #0
   816a2:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   816a4:	687b      	ldr	r3, [r7, #4]
   816a6:	6a1b      	ldr	r3, [r3, #32]
}
   816a8:	4618      	mov	r0, r3
   816aa:	370c      	adds	r7, #12
   816ac:	46bd      	mov	sp, r7
   816ae:	bc80      	pop	{r7}
   816b0:	4770      	bx	lr

000816b2 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   816b2:	b480      	push	{r7}
   816b4:	b083      	sub	sp, #12
   816b6:	af00      	add	r7, sp, #0
   816b8:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   816ba:	687b      	ldr	r3, [r7, #4]
   816bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   816be:	4618      	mov	r0, r3
   816c0:	370c      	adds	r7, #12
   816c2:	46bd      	mov	sp, r7
   816c4:	bc80      	pop	{r7}
   816c6:	4770      	bx	lr

000816c8 <twi_read_byte>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The byte read.
 */
uint8_t twi_read_byte(Twi *p_twi)
{
   816c8:	b480      	push	{r7}
   816ca:	b083      	sub	sp, #12
   816cc:	af00      	add	r7, sp, #0
   816ce:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_RHR;
   816d0:	687b      	ldr	r3, [r7, #4]
   816d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   816d4:	b2db      	uxtb	r3, r3
}
   816d6:	4618      	mov	r0, r3
   816d8:	370c      	adds	r7, #12
   816da:	46bd      	mov	sp, r7
   816dc:	bc80      	pop	{r7}
   816de:	4770      	bx	lr

000816e0 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   816e0:	b480      	push	{r7}
   816e2:	b083      	sub	sp, #12
   816e4:	af00      	add	r7, sp, #0
   816e6:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   816e8:	687b      	ldr	r3, [r7, #4]
   816ea:	2280      	movs	r2, #128	; 0x80
   816ec:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   816ee:	687b      	ldr	r3, [r7, #4]
   816f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   816f2:	bf00      	nop
   816f4:	370c      	adds	r7, #12
   816f6:	46bd      	mov	sp, r7
   816f8:	bc80      	pop	{r7}
   816fa:	4770      	bx	lr

000816fc <compass_init>:

//local function
static void compass_callback(void);

void compass_init(void)
{
   816fc:	b580      	push	{r7, lr}
   816fe:	b082      	sub	sp, #8
   81700:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   81702:	4b0d      	ldr	r3, [pc, #52]	; (81738 <compass_init+0x3c>)
   81704:	4798      	blx	r3
   81706:	6078      	str	r0, [r7, #4]

    rx_packet->chip = 0x60;
   81708:	687b      	ldr	r3, [r7, #4]
   8170a:	2260      	movs	r2, #96	; 0x60
   8170c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    rx_packet->addr[0] = 0x02;
   81710:	687b      	ldr	r3, [r7, #4]
   81712:	2202      	movs	r2, #2
   81714:	701a      	strb	r2, [r3, #0]
    rx_packet->addr_length = 1;
   81716:	687b      	ldr	r3, [r7, #4]
   81718:	2201      	movs	r2, #1
   8171a:	605a      	str	r2, [r3, #4]
    rx_packet->length = sizeof(direction);
   8171c:	687b      	ldr	r3, [r7, #4]
   8171e:	2202      	movs	r2, #2
   81720:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    twi_set_compass_tx_callback(compass_callback);
   81724:	4805      	ldr	r0, [pc, #20]	; (8173c <compass_init+0x40>)
   81726:	4b06      	ldr	r3, [pc, #24]	; (81740 <compass_init+0x44>)
   81728:	4798      	blx	r3
    twi_set_compass_rx_callback(compass_callback);
   8172a:	4804      	ldr	r0, [pc, #16]	; (8173c <compass_init+0x40>)
   8172c:	4b05      	ldr	r3, [pc, #20]	; (81744 <compass_init+0x48>)
   8172e:	4798      	blx	r3
}
   81730:	bf00      	nop
   81732:	3708      	adds	r7, #8
   81734:	46bd      	mov	sp, r7
   81736:	bd80      	pop	{r7, pc}
   81738:	000812b1 	.word	0x000812b1
   8173c:	00081805 	.word	0x00081805
   81740:	0008147d 	.word	0x0008147d
   81744:	00081461 	.word	0x00081461

00081748 <update_compass>:

void update_compass(void)
{
   81748:	b580      	push	{r7, lr}
   8174a:	b082      	sub	sp, #8
   8174c:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   8174e:	4b1a      	ldr	r3, [pc, #104]	; (817b8 <update_compass+0x70>)
   81750:	4798      	blx	r3
   81752:	6078      	str	r0, [r7, #4]

    if ((getTicks() - ul_ticks_compass) > 100)
   81754:	4b19      	ldr	r3, [pc, #100]	; (817bc <update_compass+0x74>)
   81756:	4798      	blx	r3
   81758:	4602      	mov	r2, r0
   8175a:	4b19      	ldr	r3, [pc, #100]	; (817c0 <update_compass+0x78>)
   8175c:	681b      	ldr	r3, [r3, #0]
   8175e:	1ad3      	subs	r3, r2, r3
   81760:	2b64      	cmp	r3, #100	; 0x64
   81762:	d926      	bls.n	817b2 <update_compass+0x6a>
    {
        if(lcd_is_busy())
   81764:	4b17      	ldr	r3, [pc, #92]	; (817c4 <update_compass+0x7c>)
   81766:	4798      	blx	r3
   81768:	4603      	mov	r3, r0
   8176a:	2b00      	cmp	r3, #0
   8176c:	d120      	bne.n	817b0 <update_compass+0x68>
        {
            return;
        }

        ul_ticks_compass = getTicks();
   8176e:	4b13      	ldr	r3, [pc, #76]	; (817bc <update_compass+0x74>)
   81770:	4798      	blx	r3
   81772:	4602      	mov	r2, r0
   81774:	4b12      	ldr	r3, [pc, #72]	; (817c0 <update_compass+0x78>)
   81776:	601a      	str	r2, [r3, #0]
        
        compassIsBusy = true;
   81778:	4b13      	ldr	r3, [pc, #76]	; (817c8 <update_compass+0x80>)
   8177a:	2201      	movs	r2, #1
   8177c:	701a      	strb	r2, [r3, #0]
        if(twi_pdc_master_read(TWI0, rx_packet) == TWI_SUCCESS)
   8177e:	6879      	ldr	r1, [r7, #4]
   81780:	4812      	ldr	r0, [pc, #72]	; (817cc <update_compass+0x84>)
   81782:	4b13      	ldr	r3, [pc, #76]	; (817d0 <update_compass+0x88>)
   81784:	4798      	blx	r3
   81786:	4603      	mov	r3, r0
   81788:	2b00      	cmp	r3, #0
   8178a:	d104      	bne.n	81796 <update_compass+0x4e>
        {
            while(compassIsBusy);
   8178c:	bf00      	nop
   8178e:	4b0e      	ldr	r3, [pc, #56]	; (817c8 <update_compass+0x80>)
   81790:	781b      	ldrb	r3, [r3, #0]
   81792:	2b00      	cmp	r3, #0
   81794:	d1fb      	bne.n	8178e <update_compass+0x46>
        }
        direction = (rx_packet->buffer[0] << 8) | rx_packet->buffer[1];
   81796:	687b      	ldr	r3, [r7, #4]
   81798:	7a1b      	ldrb	r3, [r3, #8]
   8179a:	021b      	lsls	r3, r3, #8
   8179c:	b21a      	sxth	r2, r3
   8179e:	687b      	ldr	r3, [r7, #4]
   817a0:	7a5b      	ldrb	r3, [r3, #9]
   817a2:	b21b      	sxth	r3, r3
   817a4:	4313      	orrs	r3, r2
   817a6:	b21b      	sxth	r3, r3
   817a8:	b29a      	uxth	r2, r3
   817aa:	4b0a      	ldr	r3, [pc, #40]	; (817d4 <update_compass+0x8c>)
   817ac:	801a      	strh	r2, [r3, #0]
   817ae:	e000      	b.n	817b2 <update_compass+0x6a>
            return;
   817b0:	bf00      	nop
    }
}
   817b2:	3708      	adds	r7, #8
   817b4:	46bd      	mov	sp, r7
   817b6:	bd80      	pop	{r7, pc}
   817b8:	000812b1 	.word	0x000812b1
   817bc:	0008337d 	.word	0x0008337d
   817c0:	20070fcc 	.word	0x20070fcc
   817c4:	00081c4d 	.word	0x00081c4d
   817c8:	20070da8 	.word	0x20070da8
   817cc:	4008c000 	.word	0x4008c000
   817d0:	000812c5 	.word	0x000812c5
   817d4:	20070e2c 	.word	0x20070e2c

000817d8 <set_compass_is_busy>:

void set_compass_is_busy(void)
{
   817d8:	b480      	push	{r7}
   817da:	af00      	add	r7, sp, #0
    compassIsBusy = true;
   817dc:	4b03      	ldr	r3, [pc, #12]	; (817ec <set_compass_is_busy+0x14>)
   817de:	2201      	movs	r2, #1
   817e0:	701a      	strb	r2, [r3, #0]
}
   817e2:	bf00      	nop
   817e4:	46bd      	mov	sp, r7
   817e6:	bc80      	pop	{r7}
   817e8:	4770      	bx	lr
   817ea:	bf00      	nop
   817ec:	20070da8 	.word	0x20070da8

000817f0 <compass_is_busy>:

uint8_t compass_is_busy(void)
{
   817f0:	b480      	push	{r7}
   817f2:	af00      	add	r7, sp, #0
    return compassIsBusy;
   817f4:	4b02      	ldr	r3, [pc, #8]	; (81800 <compass_is_busy+0x10>)
   817f6:	781b      	ldrb	r3, [r3, #0]
}
   817f8:	4618      	mov	r0, r3
   817fa:	46bd      	mov	sp, r7
   817fc:	bc80      	pop	{r7}
   817fe:	4770      	bx	lr
   81800:	20070da8 	.word	0x20070da8

00081804 <compass_callback>:
    return tmp_corr;
}*/

//local function
static void compass_callback(void)
{
   81804:	b480      	push	{r7}
   81806:	af00      	add	r7, sp, #0
    compassIsBusy = false;
   81808:	4b03      	ldr	r3, [pc, #12]	; (81818 <compass_callback+0x14>)
   8180a:	2200      	movs	r2, #0
   8180c:	701a      	strb	r2, [r3, #0]
}
   8180e:	bf00      	nop
   81810:	46bd      	mov	sp, r7
   81812:	bc80      	pop	{r7}
   81814:	4770      	bx	lr
   81816:	bf00      	nop
   81818:	20070da8 	.word	0x20070da8

0008181c <osc_get_rate>:
{
   8181c:	b480      	push	{r7}
   8181e:	b083      	sub	sp, #12
   81820:	af00      	add	r7, sp, #0
   81822:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81824:	687b      	ldr	r3, [r7, #4]
   81826:	2b07      	cmp	r3, #7
   81828:	d825      	bhi.n	81876 <osc_get_rate+0x5a>
   8182a:	a201      	add	r2, pc, #4	; (adr r2, 81830 <osc_get_rate+0x14>)
   8182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81830:	00081851 	.word	0x00081851
   81834:	00081857 	.word	0x00081857
   81838:	0008185d 	.word	0x0008185d
   8183c:	00081863 	.word	0x00081863
   81840:	00081867 	.word	0x00081867
   81844:	0008186b 	.word	0x0008186b
   81848:	0008186f 	.word	0x0008186f
   8184c:	00081873 	.word	0x00081873
		return OSC_SLCK_32K_RC_HZ;
   81850:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81854:	e010      	b.n	81878 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   81856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8185a:	e00d      	b.n	81878 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   8185c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81860:	e00a      	b.n	81878 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   81862:	4b08      	ldr	r3, [pc, #32]	; (81884 <osc_get_rate+0x68>)
   81864:	e008      	b.n	81878 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   81866:	4b08      	ldr	r3, [pc, #32]	; (81888 <osc_get_rate+0x6c>)
   81868:	e006      	b.n	81878 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8186a:	4b08      	ldr	r3, [pc, #32]	; (8188c <osc_get_rate+0x70>)
   8186c:	e004      	b.n	81878 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8186e:	4b07      	ldr	r3, [pc, #28]	; (8188c <osc_get_rate+0x70>)
   81870:	e002      	b.n	81878 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   81872:	4b06      	ldr	r3, [pc, #24]	; (8188c <osc_get_rate+0x70>)
   81874:	e000      	b.n	81878 <osc_get_rate+0x5c>
	return 0;
   81876:	2300      	movs	r3, #0
}
   81878:	4618      	mov	r0, r3
   8187a:	370c      	adds	r7, #12
   8187c:	46bd      	mov	sp, r7
   8187e:	bc80      	pop	{r7}
   81880:	4770      	bx	lr
   81882:	bf00      	nop
   81884:	003d0900 	.word	0x003d0900
   81888:	007a1200 	.word	0x007a1200
   8188c:	00b71b00 	.word	0x00b71b00

00081890 <sysclk_get_main_hz>:
{
   81890:	b580      	push	{r7, lr}
   81892:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   81894:	2006      	movs	r0, #6
   81896:	4b04      	ldr	r3, [pc, #16]	; (818a8 <sysclk_get_main_hz+0x18>)
   81898:	4798      	blx	r3
   8189a:	4602      	mov	r2, r0
   8189c:	4613      	mov	r3, r2
   8189e:	00db      	lsls	r3, r3, #3
   818a0:	1a9b      	subs	r3, r3, r2
   818a2:	005b      	lsls	r3, r3, #1
}
   818a4:	4618      	mov	r0, r3
   818a6:	bd80      	pop	{r7, pc}
   818a8:	0008181d 	.word	0x0008181d

000818ac <sysclk_get_peripheral_hz>:
{
   818ac:	b580      	push	{r7, lr}
   818ae:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   818b0:	4b02      	ldr	r3, [pc, #8]	; (818bc <sysclk_get_peripheral_hz+0x10>)
   818b2:	4798      	blx	r3
   818b4:	4603      	mov	r3, r0
   818b6:	085b      	lsrs	r3, r3, #1
}
   818b8:	4618      	mov	r0, r3
   818ba:	bd80      	pop	{r7, pc}
   818bc:	00081891 	.word	0x00081891

000818c0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   818c0:	b580      	push	{r7, lr}
   818c2:	b082      	sub	sp, #8
   818c4:	af00      	add	r7, sp, #0
   818c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   818c8:	6878      	ldr	r0, [r7, #4]
   818ca:	4b03      	ldr	r3, [pc, #12]	; (818d8 <sysclk_enable_peripheral_clock+0x18>)
   818cc:	4798      	blx	r3
}
   818ce:	bf00      	nop
   818d0:	3708      	adds	r7, #8
   818d2:	46bd      	mov	sp, r7
   818d4:	bd80      	pop	{r7, pc}
   818d6:	bf00      	nop
   818d8:	00083d3d 	.word	0x00083d3d

000818dc <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   818dc:	b580      	push	{r7, lr}
   818de:	b082      	sub	sp, #8
   818e0:	af00      	add	r7, sp, #0
   818e2:	6078      	str	r0, [r7, #4]
   818e4:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   818e6:	4b10      	ldr	r3, [pc, #64]	; (81928 <twi_master_setup+0x4c>)
   818e8:	4798      	blx	r3
   818ea:	4602      	mov	r2, r0
   818ec:	683b      	ldr	r3, [r7, #0]
   818ee:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   818f0:	683b      	ldr	r3, [r7, #0]
   818f2:	2200      	movs	r2, #0
   818f4:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   818f6:	687b      	ldr	r3, [r7, #4]
   818f8:	4a0c      	ldr	r2, [pc, #48]	; (8192c <twi_master_setup+0x50>)
   818fa:	4293      	cmp	r3, r2
   818fc:	d103      	bne.n	81906 <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   818fe:	2016      	movs	r0, #22
   81900:	4b0b      	ldr	r3, [pc, #44]	; (81930 <twi_master_setup+0x54>)
   81902:	4798      	blx	r3
   81904:	e006      	b.n	81914 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   81906:	687b      	ldr	r3, [r7, #4]
   81908:	4a0a      	ldr	r2, [pc, #40]	; (81934 <twi_master_setup+0x58>)
   8190a:	4293      	cmp	r3, r2
   8190c:	d102      	bne.n	81914 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   8190e:	2017      	movs	r0, #23
   81910:	4b07      	ldr	r3, [pc, #28]	; (81930 <twi_master_setup+0x54>)
   81912:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   81914:	6839      	ldr	r1, [r7, #0]
   81916:	6878      	ldr	r0, [r7, #4]
   81918:	4b07      	ldr	r3, [pc, #28]	; (81938 <twi_master_setup+0x5c>)
   8191a:	4798      	blx	r3
   8191c:	4603      	mov	r3, r0
}
   8191e:	4618      	mov	r0, r3
   81920:	3708      	adds	r7, #8
   81922:	46bd      	mov	sp, r7
   81924:	bd80      	pop	{r7, pc}
   81926:	bf00      	nop
   81928:	000818ad 	.word	0x000818ad
   8192c:	4008c000 	.word	0x4008c000
   81930:	000818c1 	.word	0x000818c1
   81934:	40090000 	.word	0x40090000
   81938:	000810ad 	.word	0x000810ad

0008193c <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   8193c:	b580      	push	{r7, lr}
   8193e:	af00      	add	r7, sp, #0
    twi_set_lcd_tx_callback(lcd_callback);
   81940:	4821      	ldr	r0, [pc, #132]	; (819c8 <lcd_init+0x8c>)
   81942:	4b22      	ldr	r3, [pc, #136]	; (819cc <lcd_init+0x90>)
   81944:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   81946:	220c      	movs	r2, #12
   81948:	2100      	movs	r1, #0
   8194a:	4821      	ldr	r0, [pc, #132]	; (819d0 <lcd_init+0x94>)
   8194c:	4b21      	ldr	r3, [pc, #132]	; (819d4 <lcd_init+0x98>)
   8194e:	4798      	blx	r3
    twiConfig.speed = 100000;
   81950:	4b1f      	ldr	r3, [pc, #124]	; (819d0 <lcd_init+0x94>)
   81952:	4a21      	ldr	r2, [pc, #132]	; (819d8 <lcd_init+0x9c>)
   81954:	605a      	str	r2, [r3, #4]

    backlight = LCD_LIGHT_OFF;
   81956:	4b21      	ldr	r3, [pc, #132]	; (819dc <lcd_init+0xa0>)
   81958:	2200      	movs	r2, #0
   8195a:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   8195c:	2103      	movs	r1, #3
   8195e:	2000      	movs	r0, #0
   81960:	4b1f      	ldr	r3, [pc, #124]	; (819e0 <lcd_init+0xa4>)
   81962:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81964:	2006      	movs	r0, #6
   81966:	4b1f      	ldr	r3, [pc, #124]	; (819e4 <lcd_init+0xa8>)
   81968:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   8196a:	2103      	movs	r1, #3
   8196c:	2000      	movs	r0, #0
   8196e:	4b1c      	ldr	r3, [pc, #112]	; (819e0 <lcd_init+0xa4>)
   81970:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81972:	2006      	movs	r0, #6
   81974:	4b1b      	ldr	r3, [pc, #108]	; (819e4 <lcd_init+0xa8>)
   81976:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   81978:	2103      	movs	r1, #3
   8197a:	2000      	movs	r0, #0
   8197c:	4b18      	ldr	r3, [pc, #96]	; (819e0 <lcd_init+0xa4>)
   8197e:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81980:	2006      	movs	r0, #6
   81982:	4b18      	ldr	r3, [pc, #96]	; (819e4 <lcd_init+0xa8>)
   81984:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   81986:	2102      	movs	r1, #2
   81988:	2000      	movs	r0, #0
   8198a:	4b15      	ldr	r3, [pc, #84]	; (819e0 <lcd_init+0xa4>)
   8198c:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   8198e:	2128      	movs	r1, #40	; 0x28
   81990:	2000      	movs	r0, #0
   81992:	4b15      	ldr	r3, [pc, #84]	; (819e8 <lcd_init+0xac>)
   81994:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   81996:	2108      	movs	r1, #8
   81998:	2000      	movs	r0, #0
   8199a:	4b13      	ldr	r3, [pc, #76]	; (819e8 <lcd_init+0xac>)
   8199c:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   8199e:	2101      	movs	r1, #1
   819a0:	2000      	movs	r0, #0
   819a2:	4b11      	ldr	r3, [pc, #68]	; (819e8 <lcd_init+0xac>)
   819a4:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   819a6:	2003      	movs	r0, #3
   819a8:	4b0e      	ldr	r3, [pc, #56]	; (819e4 <lcd_init+0xa8>)
   819aa:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   819ac:	2106      	movs	r1, #6
   819ae:	2000      	movs	r0, #0
   819b0:	4b0d      	ldr	r3, [pc, #52]	; (819e8 <lcd_init+0xac>)
   819b2:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   819b4:	210c      	movs	r1, #12
   819b6:	2000      	movs	r0, #0
   819b8:	4b0b      	ldr	r3, [pc, #44]	; (819e8 <lcd_init+0xac>)
   819ba:	4798      	blx	r3

    backlight = LCD_LIGHT_ON;
   819bc:	4b07      	ldr	r3, [pc, #28]	; (819dc <lcd_init+0xa0>)
   819be:	2208      	movs	r2, #8
   819c0:	701a      	strb	r2, [r3, #0]
}
   819c2:	bf00      	nop
   819c4:	bd80      	pop	{r7, pc}
   819c6:	bf00      	nop
   819c8:	00081eb1 	.word	0x00081eb1
   819cc:	00081499 	.word	0x00081499
   819d0:	20070db4 	.word	0x20070db4
   819d4:	00085931 	.word	0x00085931
   819d8:	000186a0 	.word	0x000186a0
   819dc:	20070da9 	.word	0x20070da9
   819e0:	00081c61 	.word	0x00081c61
   819e4:	00083391 	.word	0x00083391
   819e8:	00081d71 	.word	0x00081d71

000819ec <lcd_set_backlight>:

void lcd_set_backlight(backlight_t state)
{
   819ec:	b480      	push	{r7}
   819ee:	b083      	sub	sp, #12
   819f0:	af00      	add	r7, sp, #0
   819f2:	4603      	mov	r3, r0
   819f4:	71fb      	strb	r3, [r7, #7]
    backlight = state;
   819f6:	4a04      	ldr	r2, [pc, #16]	; (81a08 <lcd_set_backlight+0x1c>)
   819f8:	79fb      	ldrb	r3, [r7, #7]
   819fa:	7013      	strb	r3, [r2, #0]
//    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
//    mdelay(LCD_CLEAR_WAIT_TIME);
}
   819fc:	bf00      	nop
   819fe:	370c      	adds	r7, #12
   81a00:	46bd      	mov	sp, r7
   81a02:	bc80      	pop	{r7}
   81a04:	4770      	bx	lr
   81a06:	bf00      	nop
   81a08:	20070da9 	.word	0x20070da9

00081a0c <lcd_clear>:

void lcd_clear(void)
{
   81a0c:	b580      	push	{r7, lr}
   81a0e:	af00      	add	r7, sp, #0
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   81a10:	2101      	movs	r1, #1
   81a12:	2000      	movs	r0, #0
   81a14:	4b03      	ldr	r3, [pc, #12]	; (81a24 <lcd_clear+0x18>)
   81a16:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   81a18:	2003      	movs	r0, #3
   81a1a:	4b03      	ldr	r3, [pc, #12]	; (81a28 <lcd_clear+0x1c>)
   81a1c:	4798      	blx	r3
}
   81a1e:	bf00      	nop
   81a20:	bd80      	pop	{r7, pc}
   81a22:	bf00      	nop
   81a24:	00081d71 	.word	0x00081d71
   81a28:	00083391 	.word	0x00083391

00081a2c <lcd_print_s>:
    sprintf(str, "%10lu", data);
    lcd_print_s(line, col, str);
}

void lcd_print_s(uint8_t line, uint8_t col, const char* str)
{
   81a2c:	b590      	push	{r4, r7, lr}
   81a2e:	b087      	sub	sp, #28
   81a30:	af00      	add	r7, sp, #0
   81a32:	4603      	mov	r3, r0
   81a34:	603a      	str	r2, [r7, #0]
   81a36:	71fb      	strb	r3, [r7, #7]
   81a38:	460b      	mov	r3, r1
   81a3a:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81a3c:	4b75      	ldr	r3, [pc, #468]	; (81c14 <lcd_print_s+0x1e8>)
   81a3e:	4798      	blx	r3
   81a40:	6138      	str	r0, [r7, #16]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    
    while(lcdIsBusy | twi_is_busy())
   81a42:	e019      	b.n	81a78 <lcd_print_s+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81a44:	4b74      	ldr	r3, [pc, #464]	; (81c18 <lcd_print_s+0x1ec>)
   81a46:	4798      	blx	r3
   81a48:	4602      	mov	r2, r0
   81a4a:	4b74      	ldr	r3, [pc, #464]	; (81c1c <lcd_print_s+0x1f0>)
   81a4c:	681b      	ldr	r3, [r3, #0]
   81a4e:	1ad3      	subs	r3, r2, r3
   81a50:	2b0a      	cmp	r3, #10
   81a52:	d911      	bls.n	81a78 <lcd_print_s+0x4c>
        {
            lcdIsBusy = false;
   81a54:	4b72      	ldr	r3, [pc, #456]	; (81c20 <lcd_print_s+0x1f4>)
   81a56:	2200      	movs	r2, #0
   81a58:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81a5a:	4b72      	ldr	r3, [pc, #456]	; (81c24 <lcd_print_s+0x1f8>)
   81a5c:	681b      	ldr	r3, [r3, #0]
   81a5e:	3301      	adds	r3, #1
   81a60:	4a70      	ldr	r2, [pc, #448]	; (81c24 <lcd_print_s+0x1f8>)
   81a62:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81a64:	f240 2102 	movw	r1, #514	; 0x202
   81a68:	486f      	ldr	r0, [pc, #444]	; (81c28 <lcd_print_s+0x1fc>)
   81a6a:	4b70      	ldr	r3, [pc, #448]	; (81c2c <lcd_print_s+0x200>)
   81a6c:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81a6e:	4970      	ldr	r1, [pc, #448]	; (81c30 <lcd_print_s+0x204>)
   81a70:	4870      	ldr	r0, [pc, #448]	; (81c34 <lcd_print_s+0x208>)
   81a72:	4b71      	ldr	r3, [pc, #452]	; (81c38 <lcd_print_s+0x20c>)
   81a74:	4798      	blx	r3
            break;
   81a76:	e009      	b.n	81a8c <lcd_print_s+0x60>
    while(lcdIsBusy | twi_is_busy())
   81a78:	4b70      	ldr	r3, [pc, #448]	; (81c3c <lcd_print_s+0x210>)
   81a7a:	4798      	blx	r3
   81a7c:	4603      	mov	r3, r0
   81a7e:	461a      	mov	r2, r3
   81a80:	4b67      	ldr	r3, [pc, #412]	; (81c20 <lcd_print_s+0x1f4>)
   81a82:	781b      	ldrb	r3, [r3, #0]
   81a84:	4313      	orrs	r3, r2
   81a86:	b2db      	uxtb	r3, r3
   81a88:	2b00      	cmp	r3, #0
   81a8a:	d1db      	bne.n	81a44 <lcd_print_s+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81a8c:	693b      	ldr	r3, [r7, #16]
   81a8e:	2227      	movs	r2, #39	; 0x27
   81a90:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81a94:	693b      	ldr	r3, [r7, #16]
   81a96:	2200      	movs	r2, #0
   81a98:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   81a9a:	693b      	ldr	r3, [r7, #16]
   81a9c:	2200      	movs	r2, #0
   81a9e:	605a      	str	r2, [r3, #4]
    
    // Calculate display address
    switch(line)
   81aa0:	79fb      	ldrb	r3, [r7, #7]
   81aa2:	2b03      	cmp	r3, #3
   81aa4:	d006      	beq.n	81ab4 <lcd_print_s+0x88>
   81aa6:	2b04      	cmp	r3, #4
   81aa8:	d007      	beq.n	81aba <lcd_print_s+0x8e>
   81aaa:	2b02      	cmp	r3, #2
   81aac:	d108      	bne.n	81ac0 <lcd_print_s+0x94>
    {
        case 2:
        addr = 0x80 | 0x40;   // set address to start of line 2
   81aae:	23c0      	movs	r3, #192	; 0xc0
   81ab0:	75fb      	strb	r3, [r7, #23]
        break;
   81ab2:	e008      	b.n	81ac6 <lcd_print_s+0x9a>
        case 3:
        addr = 0x80 | 0x14;   // set address to start of line 3
   81ab4:	2394      	movs	r3, #148	; 0x94
   81ab6:	75fb      	strb	r3, [r7, #23]
        break;
   81ab8:	e005      	b.n	81ac6 <lcd_print_s+0x9a>
        case 4:
        addr = 0x80 | 0x54;   // set address to start of line 4
   81aba:	23d4      	movs	r3, #212	; 0xd4
   81abc:	75fb      	strb	r3, [r7, #23]
        break;
   81abe:	e002      	b.n	81ac6 <lcd_print_s+0x9a>
        case 1:
        default:
        addr = 0x80;          // set address to start of line 1
   81ac0:	2380      	movs	r3, #128	; 0x80
   81ac2:	75fb      	strb	r3, [r7, #23]
        break;
   81ac4:	bf00      	nop
    }
    addr += col;  // set column in the selected line
   81ac6:	7dfa      	ldrb	r2, [r7, #23]
   81ac8:	79bb      	ldrb	r3, [r7, #6]
   81aca:	4413      	add	r3, r2
   81acc:	75fb      	strb	r3, [r7, #23]

    // Set cursor
    cmd = LCD_FUNTION_WRITE | backlight;
   81ace:	4b5c      	ldr	r3, [pc, #368]	; (81c40 <lcd_print_s+0x214>)
   81ad0:	781b      	ldrb	r3, [r3, #0]
   81ad2:	73fb      	strb	r3, [r7, #15]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   81ad4:	7dfb      	ldrb	r3, [r7, #23]
   81ad6:	f023 030f 	bic.w	r3, r3, #15
   81ada:	b2da      	uxtb	r2, r3
   81adc:	7bfb      	ldrb	r3, [r7, #15]
   81ade:	4313      	orrs	r3, r2
   81ae0:	b2db      	uxtb	r3, r3
   81ae2:	f043 0304 	orr.w	r3, r3, #4
   81ae6:	b2da      	uxtb	r2, r3
   81ae8:	693b      	ldr	r3, [r7, #16]
   81aea:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   81aec:	f997 3017 	ldrsb.w	r3, [r7, #23]
   81af0:	f023 030f 	bic.w	r3, r3, #15
   81af4:	b25a      	sxtb	r2, r3
   81af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
   81afa:	4313      	orrs	r3, r2
   81afc:	b25b      	sxtb	r3, r3
   81afe:	b2da      	uxtb	r2, r3
   81b00:	693b      	ldr	r3, [r7, #16]
   81b02:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   81b04:	7dfb      	ldrb	r3, [r7, #23]
   81b06:	011b      	lsls	r3, r3, #4
   81b08:	b2da      	uxtb	r2, r3
   81b0a:	7bfb      	ldrb	r3, [r7, #15]
   81b0c:	4313      	orrs	r3, r2
   81b0e:	b2db      	uxtb	r3, r3
   81b10:	f043 0304 	orr.w	r3, r3, #4
   81b14:	b2da      	uxtb	r2, r3
   81b16:	693b      	ldr	r3, [r7, #16]
   81b18:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   81b1a:	7dfb      	ldrb	r3, [r7, #23]
   81b1c:	011b      	lsls	r3, r3, #4
   81b1e:	b25a      	sxtb	r2, r3
   81b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
   81b24:	4313      	orrs	r3, r2
   81b26:	b25b      	sxtb	r3, r3
   81b28:	b2da      	uxtb	r2, r3
   81b2a:	693b      	ldr	r3, [r7, #16]
   81b2c:	72da      	strb	r2, [r3, #11]
    
    // write string ...
    cmd = LCD_WRITE_DDR | backlight;
   81b2e:	4b44      	ldr	r3, [pc, #272]	; (81c40 <lcd_print_s+0x214>)
   81b30:	781b      	ldrb	r3, [r3, #0]
   81b32:	f043 0301 	orr.w	r3, r3, #1
   81b36:	73fb      	strb	r3, [r7, #15]
    for(count = 0; count < strlen(str); count++)
   81b38:	2300      	movs	r3, #0
   81b3a:	75bb      	strb	r3, [r7, #22]
   81b3c:	e04b      	b.n	81bd6 <lcd_print_s+0x1aa>
    {
        byte = str[count];
   81b3e:	7dbb      	ldrb	r3, [r7, #22]
   81b40:	683a      	ldr	r2, [r7, #0]
   81b42:	4413      	add	r3, r2
   81b44:	781b      	ldrb	r3, [r3, #0]
   81b46:	73bb      	strb	r3, [r7, #14]
        tx_packet->buffer[4 + count * 4 + 0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   81b48:	7dbb      	ldrb	r3, [r7, #22]
   81b4a:	3301      	adds	r3, #1
   81b4c:	009b      	lsls	r3, r3, #2
   81b4e:	7bba      	ldrb	r2, [r7, #14]
   81b50:	f022 020f 	bic.w	r2, r2, #15
   81b54:	b2d1      	uxtb	r1, r2
   81b56:	7bfa      	ldrb	r2, [r7, #15]
   81b58:	430a      	orrs	r2, r1
   81b5a:	b2d2      	uxtb	r2, r2
   81b5c:	f042 0204 	orr.w	r2, r2, #4
   81b60:	b2d1      	uxtb	r1, r2
   81b62:	693a      	ldr	r2, [r7, #16]
   81b64:	4413      	add	r3, r2
   81b66:	460a      	mov	r2, r1
   81b68:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   81b6a:	7dbb      	ldrb	r3, [r7, #22]
   81b6c:	3301      	adds	r3, #1
   81b6e:	009b      	lsls	r3, r3, #2
   81b70:	3301      	adds	r3, #1
   81b72:	f997 200e 	ldrsb.w	r2, [r7, #14]
   81b76:	f022 020f 	bic.w	r2, r2, #15
   81b7a:	b251      	sxtb	r1, r2
   81b7c:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81b80:	430a      	orrs	r2, r1
   81b82:	b252      	sxtb	r2, r2
   81b84:	b2d1      	uxtb	r1, r2
   81b86:	693a      	ldr	r2, [r7, #16]
   81b88:	4413      	add	r3, r2
   81b8a:	460a      	mov	r2, r1
   81b8c:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81b8e:	7dbb      	ldrb	r3, [r7, #22]
   81b90:	3301      	adds	r3, #1
   81b92:	009b      	lsls	r3, r3, #2
   81b94:	3302      	adds	r3, #2
   81b96:	7bba      	ldrb	r2, [r7, #14]
   81b98:	0112      	lsls	r2, r2, #4
   81b9a:	b2d1      	uxtb	r1, r2
   81b9c:	7bfa      	ldrb	r2, [r7, #15]
   81b9e:	430a      	orrs	r2, r1
   81ba0:	b2d2      	uxtb	r2, r2
   81ba2:	f042 0204 	orr.w	r2, r2, #4
   81ba6:	b2d1      	uxtb	r1, r2
   81ba8:	693a      	ldr	r2, [r7, #16]
   81baa:	4413      	add	r3, r2
   81bac:	460a      	mov	r2, r1
   81bae:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81bb0:	7dbb      	ldrb	r3, [r7, #22]
   81bb2:	3301      	adds	r3, #1
   81bb4:	009b      	lsls	r3, r3, #2
   81bb6:	3303      	adds	r3, #3
   81bb8:	7bba      	ldrb	r2, [r7, #14]
   81bba:	0112      	lsls	r2, r2, #4
   81bbc:	b251      	sxtb	r1, r2
   81bbe:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81bc2:	430a      	orrs	r2, r1
   81bc4:	b252      	sxtb	r2, r2
   81bc6:	b2d1      	uxtb	r1, r2
   81bc8:	693a      	ldr	r2, [r7, #16]
   81bca:	4413      	add	r3, r2
   81bcc:	460a      	mov	r2, r1
   81bce:	721a      	strb	r2, [r3, #8]
    for(count = 0; count < strlen(str); count++)
   81bd0:	7dbb      	ldrb	r3, [r7, #22]
   81bd2:	3301      	adds	r3, #1
   81bd4:	75bb      	strb	r3, [r7, #22]
   81bd6:	7dbc      	ldrb	r4, [r7, #22]
   81bd8:	6838      	ldr	r0, [r7, #0]
   81bda:	4b1a      	ldr	r3, [pc, #104]	; (81c44 <lcd_print_s+0x218>)
   81bdc:	4798      	blx	r3
   81bde:	4603      	mov	r3, r0
   81be0:	429c      	cmp	r4, r3
   81be2:	d3ac      	bcc.n	81b3e <lcd_print_s+0x112>
    }
    tx_packet->length = 4 + count * 4;
   81be4:	7dbb      	ldrb	r3, [r7, #22]
   81be6:	3301      	adds	r3, #1
   81be8:	009b      	lsls	r3, r3, #2
   81bea:	461a      	mov	r2, r3
   81bec:	693b      	ldr	r3, [r7, #16]
   81bee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    lcdIsBusy = true;
   81bf2:	4b0b      	ldr	r3, [pc, #44]	; (81c20 <lcd_print_s+0x1f4>)
   81bf4:	2201      	movs	r2, #1
   81bf6:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81bf8:	6939      	ldr	r1, [r7, #16]
   81bfa:	480e      	ldr	r0, [pc, #56]	; (81c34 <lcd_print_s+0x208>)
   81bfc:	4b12      	ldr	r3, [pc, #72]	; (81c48 <lcd_print_s+0x21c>)
   81bfe:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81c00:	4b05      	ldr	r3, [pc, #20]	; (81c18 <lcd_print_s+0x1ec>)
   81c02:	4798      	blx	r3
   81c04:	4602      	mov	r2, r0
   81c06:	4b05      	ldr	r3, [pc, #20]	; (81c1c <lcd_print_s+0x1f0>)
   81c08:	601a      	str	r2, [r3, #0]
}
   81c0a:	bf00      	nop
   81c0c:	371c      	adds	r7, #28
   81c0e:	46bd      	mov	sp, r7
   81c10:	bd90      	pop	{r4, r7, pc}
   81c12:	bf00      	nop
   81c14:	0008129d 	.word	0x0008129d
   81c18:	0008337d 	.word	0x0008337d
   81c1c:	20070dac 	.word	0x20070dac
   81c20:	20070daa 	.word	0x20070daa
   81c24:	20070db0 	.word	0x20070db0
   81c28:	4008c100 	.word	0x4008c100
   81c2c:	0008024d 	.word	0x0008024d
   81c30:	20070db4 	.word	0x20070db4
   81c34:	4008c000 	.word	0x4008c000
   81c38:	000818dd 	.word	0x000818dd
   81c3c:	00081289 	.word	0x00081289
   81c40:	20070da9 	.word	0x20070da9
   81c44:	00085a19 	.word	0x00085a19
   81c48:	0008139d 	.word	0x0008139d

00081c4c <lcd_is_busy>:
    twi_pdc_master_write(TWI0, tx_packet);
    lcdStartTicks = getTicks();
}

uint8_t lcd_is_busy(void)
{
   81c4c:	b480      	push	{r7}
   81c4e:	af00      	add	r7, sp, #0
    return lcdIsBusy;
   81c50:	4b02      	ldr	r3, [pc, #8]	; (81c5c <lcd_is_busy+0x10>)
   81c52:	781b      	ldrb	r3, [r3, #0]
}
   81c54:	4618      	mov	r0, r3
   81c56:	46bd      	mov	sp, r7
   81c58:	bc80      	pop	{r7}
   81c5a:	4770      	bx	lr
   81c5c:	20070daa 	.word	0x20070daa

00081c60 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   81c60:	b580      	push	{r7, lr}
   81c62:	b084      	sub	sp, #16
   81c64:	af00      	add	r7, sp, #0
   81c66:	4603      	mov	r3, r0
   81c68:	460a      	mov	r2, r1
   81c6a:	71fb      	strb	r3, [r7, #7]
   81c6c:	4613      	mov	r3, r2
   81c6e:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81c70:	4b32      	ldr	r3, [pc, #200]	; (81d3c <send_nibble+0xdc>)
   81c72:	4798      	blx	r3
   81c74:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   81c76:	e019      	b.n	81cac <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81c78:	4b31      	ldr	r3, [pc, #196]	; (81d40 <send_nibble+0xe0>)
   81c7a:	4798      	blx	r3
   81c7c:	4602      	mov	r2, r0
   81c7e:	4b31      	ldr	r3, [pc, #196]	; (81d44 <send_nibble+0xe4>)
   81c80:	681b      	ldr	r3, [r3, #0]
   81c82:	1ad3      	subs	r3, r2, r3
   81c84:	2b0a      	cmp	r3, #10
   81c86:	d911      	bls.n	81cac <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   81c88:	4b2f      	ldr	r3, [pc, #188]	; (81d48 <send_nibble+0xe8>)
   81c8a:	2200      	movs	r2, #0
   81c8c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81c8e:	4b2f      	ldr	r3, [pc, #188]	; (81d4c <send_nibble+0xec>)
   81c90:	681b      	ldr	r3, [r3, #0]
   81c92:	3301      	adds	r3, #1
   81c94:	4a2d      	ldr	r2, [pc, #180]	; (81d4c <send_nibble+0xec>)
   81c96:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81c98:	f240 2102 	movw	r1, #514	; 0x202
   81c9c:	482c      	ldr	r0, [pc, #176]	; (81d50 <send_nibble+0xf0>)
   81c9e:	4b2d      	ldr	r3, [pc, #180]	; (81d54 <send_nibble+0xf4>)
   81ca0:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81ca2:	492d      	ldr	r1, [pc, #180]	; (81d58 <send_nibble+0xf8>)
   81ca4:	482d      	ldr	r0, [pc, #180]	; (81d5c <send_nibble+0xfc>)
   81ca6:	4b2e      	ldr	r3, [pc, #184]	; (81d60 <send_nibble+0x100>)
   81ca8:	4798      	blx	r3
            break;
   81caa:	e009      	b.n	81cc0 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   81cac:	4b2d      	ldr	r3, [pc, #180]	; (81d64 <send_nibble+0x104>)
   81cae:	4798      	blx	r3
   81cb0:	4603      	mov	r3, r0
   81cb2:	461a      	mov	r2, r3
   81cb4:	4b24      	ldr	r3, [pc, #144]	; (81d48 <send_nibble+0xe8>)
   81cb6:	781b      	ldrb	r3, [r3, #0]
   81cb8:	4313      	orrs	r3, r2
   81cba:	b2db      	uxtb	r3, r3
   81cbc:	2b00      	cmp	r3, #0
   81cbe:	d1db      	bne.n	81c78 <send_nibble+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81cc0:	68fb      	ldr	r3, [r7, #12]
   81cc2:	2227      	movs	r2, #39	; 0x27
   81cc4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81cc8:	68fb      	ldr	r3, [r7, #12]
   81cca:	2200      	movs	r2, #0
   81ccc:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   81cce:	68fb      	ldr	r3, [r7, #12]
   81cd0:	2200      	movs	r2, #0
   81cd2:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81cd8:	f003 030f 	and.w	r3, r3, #15
   81cdc:	b25a      	sxtb	r2, r3
   81cde:	4b22      	ldr	r3, [pc, #136]	; (81d68 <send_nibble+0x108>)
   81ce0:	781b      	ldrb	r3, [r3, #0]
   81ce2:	b25b      	sxtb	r3, r3
   81ce4:	4313      	orrs	r3, r2
   81ce6:	b25b      	sxtb	r3, r3
   81ce8:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81cea:	79bb      	ldrb	r3, [r7, #6]
   81cec:	011b      	lsls	r3, r3, #4
   81cee:	b2da      	uxtb	r2, r3
   81cf0:	79fb      	ldrb	r3, [r7, #7]
   81cf2:	4313      	orrs	r3, r2
   81cf4:	b2db      	uxtb	r3, r3
   81cf6:	f043 0304 	orr.w	r3, r3, #4
   81cfa:	b2da      	uxtb	r2, r3
   81cfc:	68fb      	ldr	r3, [r7, #12]
   81cfe:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81d00:	79bb      	ldrb	r3, [r7, #6]
   81d02:	011b      	lsls	r3, r3, #4
   81d04:	b25a      	sxtb	r2, r3
   81d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81d0a:	4313      	orrs	r3, r2
   81d0c:	b25b      	sxtb	r3, r3
   81d0e:	b2da      	uxtb	r2, r3
   81d10:	68fb      	ldr	r3, [r7, #12]
   81d12:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   81d14:	68fb      	ldr	r3, [r7, #12]
   81d16:	2202      	movs	r2, #2
   81d18:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   81d1c:	4b0a      	ldr	r3, [pc, #40]	; (81d48 <send_nibble+0xe8>)
   81d1e:	2201      	movs	r2, #1
   81d20:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81d22:	68f9      	ldr	r1, [r7, #12]
   81d24:	480d      	ldr	r0, [pc, #52]	; (81d5c <send_nibble+0xfc>)
   81d26:	4b11      	ldr	r3, [pc, #68]	; (81d6c <send_nibble+0x10c>)
   81d28:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81d2a:	4b05      	ldr	r3, [pc, #20]	; (81d40 <send_nibble+0xe0>)
   81d2c:	4798      	blx	r3
   81d2e:	4602      	mov	r2, r0
   81d30:	4b04      	ldr	r3, [pc, #16]	; (81d44 <send_nibble+0xe4>)
   81d32:	601a      	str	r2, [r3, #0]
}
   81d34:	bf00      	nop
   81d36:	3710      	adds	r7, #16
   81d38:	46bd      	mov	sp, r7
   81d3a:	bd80      	pop	{r7, pc}
   81d3c:	0008129d 	.word	0x0008129d
   81d40:	0008337d 	.word	0x0008337d
   81d44:	20070dac 	.word	0x20070dac
   81d48:	20070daa 	.word	0x20070daa
   81d4c:	20070db0 	.word	0x20070db0
   81d50:	4008c100 	.word	0x4008c100
   81d54:	0008024d 	.word	0x0008024d
   81d58:	20070db4 	.word	0x20070db4
   81d5c:	4008c000 	.word	0x4008c000
   81d60:	000818dd 	.word	0x000818dd
   81d64:	00081289 	.word	0x00081289
   81d68:	20070da9 	.word	0x20070da9
   81d6c:	0008139d 	.word	0x0008139d

00081d70 <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   81d70:	b580      	push	{r7, lr}
   81d72:	b084      	sub	sp, #16
   81d74:	af00      	add	r7, sp, #0
   81d76:	4603      	mov	r3, r0
   81d78:	460a      	mov	r2, r1
   81d7a:	71fb      	strb	r3, [r7, #7]
   81d7c:	4613      	mov	r3, r2
   81d7e:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81d80:	4b3e      	ldr	r3, [pc, #248]	; (81e7c <send_byte+0x10c>)
   81d82:	4798      	blx	r3
   81d84:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   81d86:	e019      	b.n	81dbc <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81d88:	4b3d      	ldr	r3, [pc, #244]	; (81e80 <send_byte+0x110>)
   81d8a:	4798      	blx	r3
   81d8c:	4602      	mov	r2, r0
   81d8e:	4b3d      	ldr	r3, [pc, #244]	; (81e84 <send_byte+0x114>)
   81d90:	681b      	ldr	r3, [r3, #0]
   81d92:	1ad3      	subs	r3, r2, r3
   81d94:	2b0a      	cmp	r3, #10
   81d96:	d911      	bls.n	81dbc <send_byte+0x4c>
        {
            lcdIsBusy = false;
   81d98:	4b3b      	ldr	r3, [pc, #236]	; (81e88 <send_byte+0x118>)
   81d9a:	2200      	movs	r2, #0
   81d9c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81d9e:	4b3b      	ldr	r3, [pc, #236]	; (81e8c <send_byte+0x11c>)
   81da0:	681b      	ldr	r3, [r3, #0]
   81da2:	3301      	adds	r3, #1
   81da4:	4a39      	ldr	r2, [pc, #228]	; (81e8c <send_byte+0x11c>)
   81da6:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81da8:	f240 2102 	movw	r1, #514	; 0x202
   81dac:	4838      	ldr	r0, [pc, #224]	; (81e90 <send_byte+0x120>)
   81dae:	4b39      	ldr	r3, [pc, #228]	; (81e94 <send_byte+0x124>)
   81db0:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81db2:	4939      	ldr	r1, [pc, #228]	; (81e98 <send_byte+0x128>)
   81db4:	4839      	ldr	r0, [pc, #228]	; (81e9c <send_byte+0x12c>)
   81db6:	4b3a      	ldr	r3, [pc, #232]	; (81ea0 <send_byte+0x130>)
   81db8:	4798      	blx	r3
            break;
   81dba:	e009      	b.n	81dd0 <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   81dbc:	4b39      	ldr	r3, [pc, #228]	; (81ea4 <send_byte+0x134>)
   81dbe:	4798      	blx	r3
   81dc0:	4603      	mov	r3, r0
   81dc2:	461a      	mov	r2, r3
   81dc4:	4b30      	ldr	r3, [pc, #192]	; (81e88 <send_byte+0x118>)
   81dc6:	781b      	ldrb	r3, [r3, #0]
   81dc8:	4313      	orrs	r3, r2
   81dca:	b2db      	uxtb	r3, r3
   81dcc:	2b00      	cmp	r3, #0
   81dce:	d1db      	bne.n	81d88 <send_byte+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81dd0:	68fb      	ldr	r3, [r7, #12]
   81dd2:	2227      	movs	r2, #39	; 0x27
   81dd4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81dd8:	68fb      	ldr	r3, [r7, #12]
   81dda:	2200      	movs	r2, #0
   81ddc:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   81dde:	68fb      	ldr	r3, [r7, #12]
   81de0:	2200      	movs	r2, #0
   81de2:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81de8:	f003 030f 	and.w	r3, r3, #15
   81dec:	b25a      	sxtb	r2, r3
   81dee:	4b2e      	ldr	r3, [pc, #184]	; (81ea8 <send_byte+0x138>)
   81df0:	781b      	ldrb	r3, [r3, #0]
   81df2:	b25b      	sxtb	r3, r3
   81df4:	4313      	orrs	r3, r2
   81df6:	b25b      	sxtb	r3, r3
   81df8:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   81dfa:	79bb      	ldrb	r3, [r7, #6]
   81dfc:	f023 030f 	bic.w	r3, r3, #15
   81e00:	b2da      	uxtb	r2, r3
   81e02:	79fb      	ldrb	r3, [r7, #7]
   81e04:	4313      	orrs	r3, r2
   81e06:	b2db      	uxtb	r3, r3
   81e08:	f043 0304 	orr.w	r3, r3, #4
   81e0c:	b2da      	uxtb	r2, r3
   81e0e:	68fb      	ldr	r3, [r7, #12]
   81e10:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   81e12:	f997 3006 	ldrsb.w	r3, [r7, #6]
   81e16:	f023 030f 	bic.w	r3, r3, #15
   81e1a:	b25a      	sxtb	r2, r3
   81e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81e20:	4313      	orrs	r3, r2
   81e22:	b25b      	sxtb	r3, r3
   81e24:	b2da      	uxtb	r2, r3
   81e26:	68fb      	ldr	r3, [r7, #12]
   81e28:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81e2a:	79bb      	ldrb	r3, [r7, #6]
   81e2c:	011b      	lsls	r3, r3, #4
   81e2e:	b2da      	uxtb	r2, r3
   81e30:	79fb      	ldrb	r3, [r7, #7]
   81e32:	4313      	orrs	r3, r2
   81e34:	b2db      	uxtb	r3, r3
   81e36:	f043 0304 	orr.w	r3, r3, #4
   81e3a:	b2da      	uxtb	r2, r3
   81e3c:	68fb      	ldr	r3, [r7, #12]
   81e3e:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81e40:	79bb      	ldrb	r3, [r7, #6]
   81e42:	011b      	lsls	r3, r3, #4
   81e44:	b25a      	sxtb	r2, r3
   81e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81e4a:	4313      	orrs	r3, r2
   81e4c:	b25b      	sxtb	r3, r3
   81e4e:	b2da      	uxtb	r2, r3
   81e50:	68fb      	ldr	r3, [r7, #12]
   81e52:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   81e54:	68fb      	ldr	r3, [r7, #12]
   81e56:	2204      	movs	r2, #4
   81e58:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   81e5c:	4b0a      	ldr	r3, [pc, #40]	; (81e88 <send_byte+0x118>)
   81e5e:	2201      	movs	r2, #1
   81e60:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81e62:	68f9      	ldr	r1, [r7, #12]
   81e64:	480d      	ldr	r0, [pc, #52]	; (81e9c <send_byte+0x12c>)
   81e66:	4b11      	ldr	r3, [pc, #68]	; (81eac <send_byte+0x13c>)
   81e68:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81e6a:	4b05      	ldr	r3, [pc, #20]	; (81e80 <send_byte+0x110>)
   81e6c:	4798      	blx	r3
   81e6e:	4602      	mov	r2, r0
   81e70:	4b04      	ldr	r3, [pc, #16]	; (81e84 <send_byte+0x114>)
   81e72:	601a      	str	r2, [r3, #0]
}
   81e74:	bf00      	nop
   81e76:	3710      	adds	r7, #16
   81e78:	46bd      	mov	sp, r7
   81e7a:	bd80      	pop	{r7, pc}
   81e7c:	0008129d 	.word	0x0008129d
   81e80:	0008337d 	.word	0x0008337d
   81e84:	20070dac 	.word	0x20070dac
   81e88:	20070daa 	.word	0x20070daa
   81e8c:	20070db0 	.word	0x20070db0
   81e90:	4008c100 	.word	0x4008c100
   81e94:	0008024d 	.word	0x0008024d
   81e98:	20070db4 	.word	0x20070db4
   81e9c:	4008c000 	.word	0x4008c000
   81ea0:	000818dd 	.word	0x000818dd
   81ea4:	00081289 	.word	0x00081289
   81ea8:	20070da9 	.word	0x20070da9
   81eac:	0008139d 	.word	0x0008139d

00081eb0 <lcd_callback>:

static void lcd_callback(void)
{
   81eb0:	b480      	push	{r7}
   81eb2:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   81eb4:	4b03      	ldr	r3, [pc, #12]	; (81ec4 <lcd_callback+0x14>)
   81eb6:	2200      	movs	r2, #0
   81eb8:	701a      	strb	r2, [r3, #0]
}
   81eba:	bf00      	nop
   81ebc:	46bd      	mov	sp, r7
   81ebe:	bc80      	pop	{r7}
   81ec0:	4770      	bx	lr
   81ec2:	bf00      	nop
   81ec4:	20070daa 	.word	0x20070daa

00081ec8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   81ec8:	b480      	push	{r7}
   81eca:	b08b      	sub	sp, #44	; 0x2c
   81ecc:	af00      	add	r7, sp, #0
   81ece:	6078      	str	r0, [r7, #4]
   81ed0:	460b      	mov	r3, r1
   81ed2:	70fb      	strb	r3, [r7, #3]
   81ed4:	687b      	ldr	r3, [r7, #4]
   81ed6:	627b      	str	r3, [r7, #36]	; 0x24
   81ed8:	78fb      	ldrb	r3, [r7, #3]
   81eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81ee0:	61fb      	str	r3, [r7, #28]
   81ee2:	69fb      	ldr	r3, [r7, #28]
   81ee4:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81ee6:	69bb      	ldr	r3, [r7, #24]
   81ee8:	095b      	lsrs	r3, r3, #5
   81eea:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81eec:	697b      	ldr	r3, [r7, #20]
   81eee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81ef2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81ef6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   81ef8:	613b      	str	r3, [r7, #16]

	if (level) {
   81efa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81efe:	2b00      	cmp	r3, #0
   81f00:	d009      	beq.n	81f16 <ioport_set_pin_level+0x4e>
   81f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f04:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81f06:	68fb      	ldr	r3, [r7, #12]
   81f08:	f003 031f 	and.w	r3, r3, #31
   81f0c:	2201      	movs	r2, #1
   81f0e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81f10:	693b      	ldr	r3, [r7, #16]
   81f12:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   81f14:	e008      	b.n	81f28 <ioport_set_pin_level+0x60>
   81f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f18:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   81f1a:	68bb      	ldr	r3, [r7, #8]
   81f1c:	f003 031f 	and.w	r3, r3, #31
   81f20:	2201      	movs	r2, #1
   81f22:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81f24:	693b      	ldr	r3, [r7, #16]
   81f26:	635a      	str	r2, [r3, #52]	; 0x34
   81f28:	bf00      	nop
   81f2a:	372c      	adds	r7, #44	; 0x2c
   81f2c:	46bd      	mov	sp, r7
   81f2e:	bc80      	pop	{r7}
   81f30:	4770      	bx	lr

00081f32 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   81f32:	b480      	push	{r7}
   81f34:	b089      	sub	sp, #36	; 0x24
   81f36:	af00      	add	r7, sp, #0
   81f38:	6078      	str	r0, [r7, #4]
   81f3a:	687b      	ldr	r3, [r7, #4]
   81f3c:	61fb      	str	r3, [r7, #28]
   81f3e:	69fb      	ldr	r3, [r7, #28]
   81f40:	61bb      	str	r3, [r7, #24]
   81f42:	69bb      	ldr	r3, [r7, #24]
   81f44:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   81f46:	697b      	ldr	r3, [r7, #20]
   81f48:	095b      	lsrs	r3, r3, #5
   81f4a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81f4c:	693b      	ldr	r3, [r7, #16]
   81f4e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81f52:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81f56:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   81f5a:	69fb      	ldr	r3, [r7, #28]
   81f5c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81f5e:	68fb      	ldr	r3, [r7, #12]
   81f60:	f003 031f 	and.w	r3, r3, #31
   81f64:	2101      	movs	r1, #1
   81f66:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81f6a:	4013      	ands	r3, r2
   81f6c:	2b00      	cmp	r3, #0
   81f6e:	bf14      	ite	ne
   81f70:	2301      	movne	r3, #1
   81f72:	2300      	moveq	r3, #0
   81f74:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   81f76:	4618      	mov	r0, r3
   81f78:	3724      	adds	r7, #36	; 0x24
   81f7a:	46bd      	mov	sp, r7
   81f7c:	bc80      	pop	{r7}
   81f7e:	4770      	bx	lr

00081f80 <menu>:
static void print_menu_sensors(void);
static void print_menu_settings(void);
static void print_cursor(menu_info_t *info);

void menu(event_t event1)
{
   81f80:	b580      	push	{r7, lr}
   81f82:	b082      	sub	sp, #8
   81f84:	af00      	add	r7, sp, #0
   81f86:	4603      	mov	r3, r0
   81f88:	71fb      	strb	r3, [r7, #7]
    switch (act_menu)
   81f8a:	4b28      	ldr	r3, [pc, #160]	; (8202c <menu+0xac>)
   81f8c:	781b      	ldrb	r3, [r3, #0]
   81f8e:	2b09      	cmp	r3, #9
   81f90:	d847      	bhi.n	82022 <menu+0xa2>
   81f92:	a201      	add	r2, pc, #4	; (adr r2, 81f98 <menu+0x18>)
   81f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81f98:	00081fc1 	.word	0x00081fc1
   81f9c:	00081fcb 	.word	0x00081fcb
   81fa0:	00081fd5 	.word	0x00081fd5
   81fa4:	00081fdf 	.word	0x00081fdf
   81fa8:	00081fe9 	.word	0x00081fe9
   81fac:	00082007 	.word	0x00082007
   81fb0:	00082011 	.word	0x00082011
   81fb4:	00081ff3 	.word	0x00081ff3
   81fb8:	00081ffd 	.word	0x00081ffd
   81fbc:	0008201b 	.word	0x0008201b
    {
        case MENU_MAIN:
            menu_main(event1);
   81fc0:	79fb      	ldrb	r3, [r7, #7]
   81fc2:	4618      	mov	r0, r3
   81fc4:	4b1a      	ldr	r3, [pc, #104]	; (82030 <menu+0xb0>)
   81fc6:	4798      	blx	r3
            break;
   81fc8:	e02c      	b.n	82024 <menu+0xa4>
        case MENU_MATCH:
            menu_match(event1);
   81fca:	79fb      	ldrb	r3, [r7, #7]
   81fcc:	4618      	mov	r0, r3
   81fce:	4b19      	ldr	r3, [pc, #100]	; (82034 <menu+0xb4>)
   81fd0:	4798      	blx	r3
            break;
   81fd2:	e027      	b.n	82024 <menu+0xa4>
        case MENU_SENSORS:
            menu_sensors(event1);
   81fd4:	79fb      	ldrb	r3, [r7, #7]
   81fd6:	4618      	mov	r0, r3
   81fd8:	4b17      	ldr	r3, [pc, #92]	; (82038 <menu+0xb8>)
   81fda:	4798      	blx	r3
            break;
   81fdc:	e022      	b.n	82024 <menu+0xa4>
        case MENU_SETTINGS:
            menu_settings(event1);
   81fde:	79fb      	ldrb	r3, [r7, #7]
   81fe0:	4618      	mov	r0, r3
   81fe2:	4b16      	ldr	r3, [pc, #88]	; (8203c <menu+0xbc>)
   81fe4:	4798      	blx	r3
            break;
   81fe6:	e01d      	b.n	82024 <menu+0xa4>
        case MENU_CAMERA:
            menu_camera(event1);
   81fe8:	79fb      	ldrb	r3, [r7, #7]
   81fea:	4618      	mov	r0, r3
   81fec:	4b14      	ldr	r3, [pc, #80]	; (82040 <menu+0xc0>)
   81fee:	4798      	blx	r3
            break;
   81ff0:	e018      	b.n	82024 <menu+0xa4>
        case MENU_COMPASS:
            menu_compass(event1);
   81ff2:	79fb      	ldrb	r3, [r7, #7]
   81ff4:	4618      	mov	r0, r3
   81ff6:	4b13      	ldr	r3, [pc, #76]	; (82044 <menu+0xc4>)
   81ff8:	4798      	blx	r3
            break;
   81ffa:	e013      	b.n	82024 <menu+0xa4>
        case MENU_COMPASS_CALIBRATION:
            menu_compass_calibration(event1);
   81ffc:	79fb      	ldrb	r3, [r7, #7]
   81ffe:	4618      	mov	r0, r3
   82000:	4b11      	ldr	r3, [pc, #68]	; (82048 <menu+0xc8>)
   82002:	4798      	blx	r3
            break;
   82004:	e00e      	b.n	82024 <menu+0xa4>
        case MENU_LINE:
            menu_line(event1);
   82006:	79fb      	ldrb	r3, [r7, #7]
   82008:	4618      	mov	r0, r3
   8200a:	4b10      	ldr	r3, [pc, #64]	; (8204c <menu+0xcc>)
   8200c:	4798      	blx	r3
            break;
   8200e:	e009      	b.n	82024 <menu+0xa4>
        case MENU_LINE_CALIBRATION:
            menu_line_calibration(event1);
   82010:	79fb      	ldrb	r3, [r7, #7]
   82012:	4618      	mov	r0, r3
   82014:	4b0e      	ldr	r3, [pc, #56]	; (82050 <menu+0xd0>)
   82016:	4798      	blx	r3
            break;
   82018:	e004      	b.n	82024 <menu+0xa4>
        case MENU_SHUTDOWN:
            menu_shutdown(event1);
   8201a:	79fb      	ldrb	r3, [r7, #7]
   8201c:	4618      	mov	r0, r3
   8201e:	4b0d      	ldr	r3, [pc, #52]	; (82054 <menu+0xd4>)
   82020:	4798      	blx	r3
        default:
            break;
   82022:	bf00      	nop
    }
}
   82024:	bf00      	nop
   82026:	3708      	adds	r7, #8
   82028:	46bd      	mov	sp, r7
   8202a:	bd80      	pop	{r7, pc}
   8202c:	20070dc0 	.word	0x20070dc0
   82030:	00082059 	.word	0x00082059
   82034:	00082181 	.word	0x00082181
   82038:	000821b1 	.word	0x000821b1
   8203c:	00082639 	.word	0x00082639
   82040:	000822d5 	.word	0x000822d5
   82044:	00082405 	.word	0x00082405
   82048:	000824d9 	.word	0x000824d9
   8204c:	000825d9 	.word	0x000825d9
   82050:	00082609 	.word	0x00082609
   82054:	0008271d 	.word	0x0008271d

00082058 <menu_main>:

static void menu_main(event_t event1)
{
   82058:	b580      	push	{r7, lr}
   8205a:	b082      	sub	sp, #8
   8205c:	af00      	add	r7, sp, #0
   8205e:	4603      	mov	r3, r0
   82060:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   82062:	4b41      	ldr	r3, [pc, #260]	; (82168 <menu_main+0x110>)
   82064:	781b      	ldrb	r3, [r3, #0]
   82066:	2b00      	cmp	r3, #0
   82068:	d004      	beq.n	82074 <menu_main+0x1c>
    {
        print_menu = 0;
   8206a:	4b3f      	ldr	r3, [pc, #252]	; (82168 <menu_main+0x110>)
   8206c:	2200      	movs	r2, #0
   8206e:	701a      	strb	r2, [r3, #0]
        print_menu_main();
   82070:	4b3e      	ldr	r3, [pc, #248]	; (8216c <menu_main+0x114>)
   82072:	4798      	blx	r3
    }
    
    update_battery(0);
   82074:	2000      	movs	r0, #0
   82076:	4b3e      	ldr	r3, [pc, #248]	; (82170 <menu_main+0x118>)
   82078:	4798      	blx	r3
    
    switch (event1)
   8207a:	79fb      	ldrb	r3, [r7, #7]
   8207c:	3b01      	subs	r3, #1
   8207e:	2b0f      	cmp	r3, #15
   82080:	d868      	bhi.n	82154 <menu_main+0xfc>
   82082:	a201      	add	r2, pc, #4	; (adr r2, 82088 <menu_main+0x30>)
   82084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82088:	000820c9 	.word	0x000820c9
   8208c:	00082155 	.word	0x00082155
   82090:	00082155 	.word	0x00082155
   82094:	00082155 	.word	0x00082155
   82098:	00082155 	.word	0x00082155
   8209c:	00082155 	.word	0x00082155
   820a0:	00082109 	.word	0x00082109
   820a4:	00082155 	.word	0x00082155
   820a8:	00082155 	.word	0x00082155
   820ac:	00082155 	.word	0x00082155
   820b0:	00082155 	.word	0x00082155
   820b4:	00082155 	.word	0x00082155
   820b8:	000820e9 	.word	0x000820e9
   820bc:	00082155 	.word	0x00082155
   820c0:	00082155 	.word	0x00082155
   820c4:	00082147 	.word	0x00082147
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.main.act_cursor_line > menu_info.main.min_cursor_line)
   820c8:	4b2a      	ldr	r3, [pc, #168]	; (82174 <menu_main+0x11c>)
   820ca:	781a      	ldrb	r2, [r3, #0]
   820cc:	4b29      	ldr	r3, [pc, #164]	; (82174 <menu_main+0x11c>)
   820ce:	789b      	ldrb	r3, [r3, #2]
   820d0:	429a      	cmp	r2, r3
   820d2:	d941      	bls.n	82158 <menu_main+0x100>
            {
                menu_info.main.act_cursor_line--;
   820d4:	4b27      	ldr	r3, [pc, #156]	; (82174 <menu_main+0x11c>)
   820d6:	781b      	ldrb	r3, [r3, #0]
   820d8:	3b01      	subs	r3, #1
   820da:	b2da      	uxtb	r2, r3
   820dc:	4b25      	ldr	r3, [pc, #148]	; (82174 <menu_main+0x11c>)
   820de:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   820e0:	4824      	ldr	r0, [pc, #144]	; (82174 <menu_main+0x11c>)
   820e2:	4b25      	ldr	r3, [pc, #148]	; (82178 <menu_main+0x120>)
   820e4:	4798      	blx	r3
            }
            break;
   820e6:	e037      	b.n	82158 <menu_main+0x100>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.main.act_cursor_line < menu_info.main.max_cursor_line)
   820e8:	4b22      	ldr	r3, [pc, #136]	; (82174 <menu_main+0x11c>)
   820ea:	781a      	ldrb	r2, [r3, #0]
   820ec:	4b21      	ldr	r3, [pc, #132]	; (82174 <menu_main+0x11c>)
   820ee:	78db      	ldrb	r3, [r3, #3]
   820f0:	429a      	cmp	r2, r3
   820f2:	d233      	bcs.n	8215c <menu_main+0x104>
            {
                menu_info.main.act_cursor_line++;
   820f4:	4b1f      	ldr	r3, [pc, #124]	; (82174 <menu_main+0x11c>)
   820f6:	781b      	ldrb	r3, [r3, #0]
   820f8:	3301      	adds	r3, #1
   820fa:	b2da      	uxtb	r2, r3
   820fc:	4b1d      	ldr	r3, [pc, #116]	; (82174 <menu_main+0x11c>)
   820fe:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   82100:	481c      	ldr	r0, [pc, #112]	; (82174 <menu_main+0x11c>)
   82102:	4b1d      	ldr	r3, [pc, #116]	; (82178 <menu_main+0x120>)
   82104:	4798      	blx	r3
            }
            break;
   82106:	e029      	b.n	8215c <menu_main+0x104>
        case EVENT_BUTTON_MID_P:
            {
                switch (menu_info.main.act_cursor_line)
   82108:	4b1a      	ldr	r3, [pc, #104]	; (82174 <menu_main+0x11c>)
   8210a:	781b      	ldrb	r3, [r3, #0]
   8210c:	2b03      	cmp	r3, #3
   8210e:	d00b      	beq.n	82128 <menu_main+0xd0>
   82110:	2b04      	cmp	r3, #4
   82112:	d010      	beq.n	82136 <menu_main+0xde>
   82114:	2b02      	cmp	r3, #2
   82116:	d000      	beq.n	8211a <menu_main+0xc2>
                    case 4:
                        act_menu = MENU_SETTINGS;
                        print_menu = 1;
                        break;
                    default:
                        break;
   82118:	e014      	b.n	82144 <menu_main+0xec>
                        act_menu = MENU_MATCH;
   8211a:	4b18      	ldr	r3, [pc, #96]	; (8217c <menu_main+0x124>)
   8211c:	2201      	movs	r2, #1
   8211e:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   82120:	4b11      	ldr	r3, [pc, #68]	; (82168 <menu_main+0x110>)
   82122:	2201      	movs	r2, #1
   82124:	701a      	strb	r2, [r3, #0]
                        break;
   82126:	e00d      	b.n	82144 <menu_main+0xec>
                        act_menu = MENU_SENSORS;
   82128:	4b14      	ldr	r3, [pc, #80]	; (8217c <menu_main+0x124>)
   8212a:	2202      	movs	r2, #2
   8212c:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   8212e:	4b0e      	ldr	r3, [pc, #56]	; (82168 <menu_main+0x110>)
   82130:	2201      	movs	r2, #1
   82132:	701a      	strb	r2, [r3, #0]
                        break;
   82134:	e006      	b.n	82144 <menu_main+0xec>
                        act_menu = MENU_SETTINGS;
   82136:	4b11      	ldr	r3, [pc, #68]	; (8217c <menu_main+0x124>)
   82138:	2203      	movs	r2, #3
   8213a:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   8213c:	4b0a      	ldr	r3, [pc, #40]	; (82168 <menu_main+0x110>)
   8213e:	2201      	movs	r2, #1
   82140:	701a      	strb	r2, [r3, #0]
                        break;
   82142:	bf00      	nop
                }
            }
            break;
   82144:	e00b      	b.n	8215e <menu_main+0x106>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SHUTDOWN;
   82146:	4b0d      	ldr	r3, [pc, #52]	; (8217c <menu_main+0x124>)
   82148:	2209      	movs	r2, #9
   8214a:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   8214c:	4b06      	ldr	r3, [pc, #24]	; (82168 <menu_main+0x110>)
   8214e:	2201      	movs	r2, #1
   82150:	701a      	strb	r2, [r3, #0]
            break;
   82152:	e004      	b.n	8215e <menu_main+0x106>
        default:
            break;
   82154:	bf00      	nop
   82156:	e002      	b.n	8215e <menu_main+0x106>
            break;
   82158:	bf00      	nop
   8215a:	e000      	b.n	8215e <menu_main+0x106>
            break;
   8215c:	bf00      	nop
    }
}
   8215e:	bf00      	nop
   82160:	3708      	adds	r7, #8
   82162:	46bd      	mov	sp, r7
   82164:	bd80      	pop	{r7, pc}
   82166:	bf00      	nop
   82168:	2007018c 	.word	0x2007018c
   8216c:	0008282d 	.word	0x0008282d
   82170:	00083405 	.word	0x00083405
   82174:	20070190 	.word	0x20070190
   82178:	0008296d 	.word	0x0008296d
   8217c:	20070dc0 	.word	0x20070dc0

00082180 <menu_match>:

static void menu_match(event_t event1)
{
   82180:	b480      	push	{r7}
   82182:	b083      	sub	sp, #12
   82184:	af00      	add	r7, sp, #0
   82186:	4603      	mov	r3, r0
   82188:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   8218a:	79fb      	ldrb	r3, [r7, #7]
   8218c:	2b10      	cmp	r3, #16
   8218e:	d105      	bne.n	8219c <menu_match+0x1c>
    {
        act_menu = MENU_MAIN;
   82190:	4b05      	ldr	r3, [pc, #20]	; (821a8 <menu_match+0x28>)
   82192:	2200      	movs	r2, #0
   82194:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   82196:	4b05      	ldr	r3, [pc, #20]	; (821ac <menu_match+0x2c>)
   82198:	2201      	movs	r2, #1
   8219a:	701a      	strb	r2, [r3, #0]
    }
}
   8219c:	bf00      	nop
   8219e:	370c      	adds	r7, #12
   821a0:	46bd      	mov	sp, r7
   821a2:	bc80      	pop	{r7}
   821a4:	4770      	bx	lr
   821a6:	bf00      	nop
   821a8:	20070dc0 	.word	0x20070dc0
   821ac:	2007018c 	.word	0x2007018c

000821b0 <menu_sensors>:

static void menu_sensors(event_t event1)
{
   821b0:	b580      	push	{r7, lr}
   821b2:	b082      	sub	sp, #8
   821b4:	af00      	add	r7, sp, #0
   821b6:	4603      	mov	r3, r0
   821b8:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   821ba:	4b40      	ldr	r3, [pc, #256]	; (822bc <menu_sensors+0x10c>)
   821bc:	781b      	ldrb	r3, [r3, #0]
   821be:	2b00      	cmp	r3, #0
   821c0:	d004      	beq.n	821cc <menu_sensors+0x1c>
    {
        print_menu = 0;
   821c2:	4b3e      	ldr	r3, [pc, #248]	; (822bc <menu_sensors+0x10c>)
   821c4:	2200      	movs	r2, #0
   821c6:	701a      	strb	r2, [r3, #0]
        print_menu_sensors();
   821c8:	4b3d      	ldr	r3, [pc, #244]	; (822c0 <menu_sensors+0x110>)
   821ca:	4798      	blx	r3
    }
    
    switch(event1)
   821cc:	79fb      	ldrb	r3, [r7, #7]
   821ce:	3b01      	subs	r3, #1
   821d0:	2b0f      	cmp	r3, #15
   821d2:	d869      	bhi.n	822a8 <menu_sensors+0xf8>
   821d4:	a201      	add	r2, pc, #4	; (adr r2, 821dc <menu_sensors+0x2c>)
   821d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   821da:	bf00      	nop
   821dc:	0008221d 	.word	0x0008221d
   821e0:	000822a9 	.word	0x000822a9
   821e4:	000822a9 	.word	0x000822a9
   821e8:	000822a9 	.word	0x000822a9
   821ec:	000822a9 	.word	0x000822a9
   821f0:	000822a9 	.word	0x000822a9
   821f4:	0008225d 	.word	0x0008225d
   821f8:	000822a9 	.word	0x000822a9
   821fc:	000822a9 	.word	0x000822a9
   82200:	000822a9 	.word	0x000822a9
   82204:	000822a9 	.word	0x000822a9
   82208:	000822a9 	.word	0x000822a9
   8220c:	0008223d 	.word	0x0008223d
   82210:	000822a9 	.word	0x000822a9
   82214:	000822a9 	.word	0x000822a9
   82218:	0008229b 	.word	0x0008229b
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.sensors.act_cursor_line > menu_info.sensors.min_cursor_line)
   8221c:	4b29      	ldr	r3, [pc, #164]	; (822c4 <menu_sensors+0x114>)
   8221e:	791a      	ldrb	r2, [r3, #4]
   82220:	4b28      	ldr	r3, [pc, #160]	; (822c4 <menu_sensors+0x114>)
   82222:	799b      	ldrb	r3, [r3, #6]
   82224:	429a      	cmp	r2, r3
   82226:	d941      	bls.n	822ac <menu_sensors+0xfc>
            {
                menu_info.sensors.act_cursor_line--;
   82228:	4b26      	ldr	r3, [pc, #152]	; (822c4 <menu_sensors+0x114>)
   8222a:	791b      	ldrb	r3, [r3, #4]
   8222c:	3b01      	subs	r3, #1
   8222e:	b2da      	uxtb	r2, r3
   82230:	4b24      	ldr	r3, [pc, #144]	; (822c4 <menu_sensors+0x114>)
   82232:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   82234:	4824      	ldr	r0, [pc, #144]	; (822c8 <menu_sensors+0x118>)
   82236:	4b25      	ldr	r3, [pc, #148]	; (822cc <menu_sensors+0x11c>)
   82238:	4798      	blx	r3
            }
            break;
   8223a:	e037      	b.n	822ac <menu_sensors+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.sensors.act_cursor_line < menu_info.sensors.max_cursor_line)
   8223c:	4b21      	ldr	r3, [pc, #132]	; (822c4 <menu_sensors+0x114>)
   8223e:	791a      	ldrb	r2, [r3, #4]
   82240:	4b20      	ldr	r3, [pc, #128]	; (822c4 <menu_sensors+0x114>)
   82242:	79db      	ldrb	r3, [r3, #7]
   82244:	429a      	cmp	r2, r3
   82246:	d233      	bcs.n	822b0 <menu_sensors+0x100>
            {
                menu_info.sensors.act_cursor_line++;
   82248:	4b1e      	ldr	r3, [pc, #120]	; (822c4 <menu_sensors+0x114>)
   8224a:	791b      	ldrb	r3, [r3, #4]
   8224c:	3301      	adds	r3, #1
   8224e:	b2da      	uxtb	r2, r3
   82250:	4b1c      	ldr	r3, [pc, #112]	; (822c4 <menu_sensors+0x114>)
   82252:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   82254:	481c      	ldr	r0, [pc, #112]	; (822c8 <menu_sensors+0x118>)
   82256:	4b1d      	ldr	r3, [pc, #116]	; (822cc <menu_sensors+0x11c>)
   82258:	4798      	blx	r3
            }
            break;
   8225a:	e029      	b.n	822b0 <menu_sensors+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.sensors.act_cursor_line)
   8225c:	4b19      	ldr	r3, [pc, #100]	; (822c4 <menu_sensors+0x114>)
   8225e:	791b      	ldrb	r3, [r3, #4]
   82260:	2b02      	cmp	r3, #2
   82262:	d00b      	beq.n	8227c <menu_sensors+0xcc>
   82264:	2b03      	cmp	r3, #3
   82266:	d010      	beq.n	8228a <menu_sensors+0xda>
   82268:	2b01      	cmp	r3, #1
   8226a:	d000      	beq.n	8226e <menu_sensors+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   8226c:	e014      	b.n	82298 <menu_sensors+0xe8>
                    act_menu = MENU_CAMERA;
   8226e:	4b18      	ldr	r3, [pc, #96]	; (822d0 <menu_sensors+0x120>)
   82270:	2204      	movs	r2, #4
   82272:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   82274:	4b11      	ldr	r3, [pc, #68]	; (822bc <menu_sensors+0x10c>)
   82276:	2201      	movs	r2, #1
   82278:	701a      	strb	r2, [r3, #0]
                    break;
   8227a:	e00d      	b.n	82298 <menu_sensors+0xe8>
                    act_menu = MENU_COMPASS;
   8227c:	4b14      	ldr	r3, [pc, #80]	; (822d0 <menu_sensors+0x120>)
   8227e:	2207      	movs	r2, #7
   82280:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   82282:	4b0e      	ldr	r3, [pc, #56]	; (822bc <menu_sensors+0x10c>)
   82284:	2201      	movs	r2, #1
   82286:	701a      	strb	r2, [r3, #0]
                    break;
   82288:	e006      	b.n	82298 <menu_sensors+0xe8>
                    act_menu = MENU_LINE;
   8228a:	4b11      	ldr	r3, [pc, #68]	; (822d0 <menu_sensors+0x120>)
   8228c:	2205      	movs	r2, #5
   8228e:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   82290:	4b0a      	ldr	r3, [pc, #40]	; (822bc <menu_sensors+0x10c>)
   82292:	2201      	movs	r2, #1
   82294:	701a      	strb	r2, [r3, #0]
                    break;
   82296:	bf00      	nop
            }
            break;
   82298:	e00b      	b.n	822b2 <menu_sensors+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   8229a:	4b0d      	ldr	r3, [pc, #52]	; (822d0 <menu_sensors+0x120>)
   8229c:	2200      	movs	r2, #0
   8229e:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   822a0:	4b06      	ldr	r3, [pc, #24]	; (822bc <menu_sensors+0x10c>)
   822a2:	2201      	movs	r2, #1
   822a4:	701a      	strb	r2, [r3, #0]
            break;
   822a6:	e004      	b.n	822b2 <menu_sensors+0x102>
        default:
            break;
   822a8:	bf00      	nop
   822aa:	e002      	b.n	822b2 <menu_sensors+0x102>
            break;
   822ac:	bf00      	nop
   822ae:	e000      	b.n	822b2 <menu_sensors+0x102>
            break;
   822b0:	bf00      	nop
    }
}
   822b2:	bf00      	nop
   822b4:	3708      	adds	r7, #8
   822b6:	46bd      	mov	sp, r7
   822b8:	bd80      	pop	{r7, pc}
   822ba:	bf00      	nop
   822bc:	2007018c 	.word	0x2007018c
   822c0:	0008289d 	.word	0x0008289d
   822c4:	20070190 	.word	0x20070190
   822c8:	20070194 	.word	0x20070194
   822cc:	0008296d 	.word	0x0008296d
   822d0:	20070dc0 	.word	0x20070dc0

000822d4 <menu_camera>:

static void menu_camera(event_t event1)
{
   822d4:	b580      	push	{r7, lr}
   822d6:	b082      	sub	sp, #8
   822d8:	af00      	add	r7, sp, #0
   822da:	4603      	mov	r3, r0
   822dc:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   822de:	4b3c      	ldr	r3, [pc, #240]	; (823d0 <menu_camera+0xfc>)
   822e0:	781b      	ldrb	r3, [r3, #0]
   822e2:	2b00      	cmp	r3, #0
   822e4:	d004      	beq.n	822f0 <menu_camera+0x1c>
    {
        print_menu = 0;
   822e6:	4b3a      	ldr	r3, [pc, #232]	; (823d0 <menu_camera+0xfc>)
   822e8:	2200      	movs	r2, #0
   822ea:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   822ec:	4b39      	ldr	r3, [pc, #228]	; (823d4 <menu_camera+0x100>)
   822ee:	4798      	blx	r3
    }
    
    if (rtm.ball.dir == 0)
   822f0:	4b39      	ldr	r3, [pc, #228]	; (823d8 <menu_camera+0x104>)
   822f2:	781b      	ldrb	r3, [r3, #0]
   822f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   822f8:	b2db      	uxtb	r3, r3
   822fa:	2b00      	cmp	r3, #0
   822fc:	d105      	bne.n	8230a <menu_camera+0x36>
    {
        lcd_print_s(1, 0, "RPi inactive ");
   822fe:	4a37      	ldr	r2, [pc, #220]	; (823dc <menu_camera+0x108>)
   82300:	2100      	movs	r1, #0
   82302:	2001      	movs	r0, #1
   82304:	4b36      	ldr	r3, [pc, #216]	; (823e0 <menu_camera+0x10c>)
   82306:	4798      	blx	r3
   82308:	e01c      	b.n	82344 <menu_camera+0x70>
    }
    else if (rtm.ball.see) //  && rtm.ball.dir != 0
   8230a:	4b33      	ldr	r3, [pc, #204]	; (823d8 <menu_camera+0x104>)
   8230c:	781b      	ldrb	r3, [r3, #0]
   8230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82312:	b2db      	uxtb	r3, r3
   82314:	2b00      	cmp	r3, #0
   82316:	d010      	beq.n	8233a <menu_camera+0x66>
    {
        sprintf(sprintf_buf, "Ball: %4d   ", rtm.ball.dir - 32);
   82318:	4b2f      	ldr	r3, [pc, #188]	; (823d8 <menu_camera+0x104>)
   8231a:	781b      	ldrb	r3, [r3, #0]
   8231c:	f3c3 0305 	ubfx	r3, r3, #0, #6
   82320:	b2db      	uxtb	r3, r3
   82322:	3b20      	subs	r3, #32
   82324:	461a      	mov	r2, r3
   82326:	492f      	ldr	r1, [pc, #188]	; (823e4 <menu_camera+0x110>)
   82328:	482f      	ldr	r0, [pc, #188]	; (823e8 <menu_camera+0x114>)
   8232a:	4b30      	ldr	r3, [pc, #192]	; (823ec <menu_camera+0x118>)
   8232c:	4798      	blx	r3
        lcd_print_s(1, 0, sprintf_buf);
   8232e:	4a2e      	ldr	r2, [pc, #184]	; (823e8 <menu_camera+0x114>)
   82330:	2100      	movs	r1, #0
   82332:	2001      	movs	r0, #1
   82334:	4b2a      	ldr	r3, [pc, #168]	; (823e0 <menu_camera+0x10c>)
   82336:	4798      	blx	r3
   82338:	e004      	b.n	82344 <menu_camera+0x70>
    }
    else
    {
        lcd_print_s(1, 0, "no ball found");
   8233a:	4a2d      	ldr	r2, [pc, #180]	; (823f0 <menu_camera+0x11c>)
   8233c:	2100      	movs	r1, #0
   8233e:	2001      	movs	r0, #1
   82340:	4b27      	ldr	r3, [pc, #156]	; (823e0 <menu_camera+0x10c>)
   82342:	4798      	blx	r3
    }
    
    if (rtm.goal.dir == 0)
   82344:	4b24      	ldr	r3, [pc, #144]	; (823d8 <menu_camera+0x104>)
   82346:	785b      	ldrb	r3, [r3, #1]
   82348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8234c:	b2db      	uxtb	r3, r3
   8234e:	2b00      	cmp	r3, #0
   82350:	d105      	bne.n	8235e <menu_camera+0x8a>
    {
        lcd_print_s(2, 0, "RPi inactive ");
   82352:	4a22      	ldr	r2, [pc, #136]	; (823dc <menu_camera+0x108>)
   82354:	2100      	movs	r1, #0
   82356:	2002      	movs	r0, #2
   82358:	4b21      	ldr	r3, [pc, #132]	; (823e0 <menu_camera+0x10c>)
   8235a:	4798      	blx	r3
   8235c:	e01c      	b.n	82398 <menu_camera+0xc4>
    }
    else if (rtm.goal.see)
   8235e:	4b1e      	ldr	r3, [pc, #120]	; (823d8 <menu_camera+0x104>)
   82360:	785b      	ldrb	r3, [r3, #1]
   82362:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82366:	b2db      	uxtb	r3, r3
   82368:	2b00      	cmp	r3, #0
   8236a:	d010      	beq.n	8238e <menu_camera+0xba>
    {
        sprintf(sprintf_buf, "Goal: %4d   ", rtm.goal.dir - 32);
   8236c:	4b1a      	ldr	r3, [pc, #104]	; (823d8 <menu_camera+0x104>)
   8236e:	785b      	ldrb	r3, [r3, #1]
   82370:	f3c3 0305 	ubfx	r3, r3, #0, #6
   82374:	b2db      	uxtb	r3, r3
   82376:	3b20      	subs	r3, #32
   82378:	461a      	mov	r2, r3
   8237a:	491e      	ldr	r1, [pc, #120]	; (823f4 <menu_camera+0x120>)
   8237c:	481a      	ldr	r0, [pc, #104]	; (823e8 <menu_camera+0x114>)
   8237e:	4b1b      	ldr	r3, [pc, #108]	; (823ec <menu_camera+0x118>)
   82380:	4798      	blx	r3
        lcd_print_s(2, 0, sprintf_buf);
   82382:	4a19      	ldr	r2, [pc, #100]	; (823e8 <menu_camera+0x114>)
   82384:	2100      	movs	r1, #0
   82386:	2002      	movs	r0, #2
   82388:	4b15      	ldr	r3, [pc, #84]	; (823e0 <menu_camera+0x10c>)
   8238a:	4798      	blx	r3
   8238c:	e004      	b.n	82398 <menu_camera+0xc4>
    }
    else
    {
        lcd_print_s(2, 0, "no goal found");
   8238e:	4a1a      	ldr	r2, [pc, #104]	; (823f8 <menu_camera+0x124>)
   82390:	2100      	movs	r1, #0
   82392:	2002      	movs	r0, #2
   82394:	4b12      	ldr	r3, [pc, #72]	; (823e0 <menu_camera+0x10c>)
   82396:	4798      	blx	r3
    }
    
    sprintf(sprintf_buf, "Having ball: %1d", rtm.ball.have);
   82398:	4b0f      	ldr	r3, [pc, #60]	; (823d8 <menu_camera+0x104>)
   8239a:	781b      	ldrb	r3, [r3, #0]
   8239c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   823a0:	b2db      	uxtb	r3, r3
   823a2:	461a      	mov	r2, r3
   823a4:	4915      	ldr	r1, [pc, #84]	; (823fc <menu_camera+0x128>)
   823a6:	4810      	ldr	r0, [pc, #64]	; (823e8 <menu_camera+0x114>)
   823a8:	4b10      	ldr	r3, [pc, #64]	; (823ec <menu_camera+0x118>)
   823aa:	4798      	blx	r3
    lcd_print_s(3, 0, sprintf_buf);
   823ac:	4a0e      	ldr	r2, [pc, #56]	; (823e8 <menu_camera+0x114>)
   823ae:	2100      	movs	r1, #0
   823b0:	2003      	movs	r0, #3
   823b2:	4b0b      	ldr	r3, [pc, #44]	; (823e0 <menu_camera+0x10c>)
   823b4:	4798      	blx	r3
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   823b6:	79fb      	ldrb	r3, [r7, #7]
   823b8:	2b10      	cmp	r3, #16
   823ba:	d105      	bne.n	823c8 <menu_camera+0xf4>
    {
        act_menu = MENU_SENSORS;
   823bc:	4b10      	ldr	r3, [pc, #64]	; (82400 <menu_camera+0x12c>)
   823be:	2202      	movs	r2, #2
   823c0:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   823c2:	4b03      	ldr	r3, [pc, #12]	; (823d0 <menu_camera+0xfc>)
   823c4:	2201      	movs	r2, #1
   823c6:	701a      	strb	r2, [r3, #0]
    }
}
   823c8:	bf00      	nop
   823ca:	3708      	adds	r7, #8
   823cc:	46bd      	mov	sp, r7
   823ce:	bd80      	pop	{r7, pc}
   823d0:	2007018c 	.word	0x2007018c
   823d4:	00081a0d 	.word	0x00081a0d
   823d8:	20070e18 	.word	0x20070e18
   823dc:	00089a28 	.word	0x00089a28
   823e0:	00081a2d 	.word	0x00081a2d
   823e4:	00089a38 	.word	0x00089a38
   823e8:	20070e5c 	.word	0x20070e5c
   823ec:	000859cd 	.word	0x000859cd
   823f0:	00089a48 	.word	0x00089a48
   823f4:	00089a58 	.word	0x00089a58
   823f8:	00089a68 	.word	0x00089a68
   823fc:	00089a78 	.word	0x00089a78
   82400:	20070dc0 	.word	0x20070dc0

00082404 <menu_compass>:

static void menu_compass(event_t event1)
{
   82404:	b590      	push	{r4, r7, lr}
   82406:	b083      	sub	sp, #12
   82408:	af00      	add	r7, sp, #0
   8240a:	4603      	mov	r3, r0
   8240c:	71fb      	strb	r3, [r7, #7]
    static uint16_t prev_direction = 0;
    
    if(print_menu)
   8240e:	4b24      	ldr	r3, [pc, #144]	; (824a0 <menu_compass+0x9c>)
   82410:	781b      	ldrb	r3, [r3, #0]
   82412:	2b00      	cmp	r3, #0
   82414:	d004      	beq.n	82420 <menu_compass+0x1c>
    {
        print_menu = 0;
   82416:	4b22      	ldr	r3, [pc, #136]	; (824a0 <menu_compass+0x9c>)
   82418:	2200      	movs	r2, #0
   8241a:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   8241c:	4b21      	ldr	r3, [pc, #132]	; (824a4 <menu_compass+0xa0>)
   8241e:	4798      	blx	r3
    }
    
    update_compass();
   82420:	4b21      	ldr	r3, [pc, #132]	; (824a8 <menu_compass+0xa4>)
   82422:	4798      	blx	r3
    if(direction != prev_direction)
   82424:	4b21      	ldr	r3, [pc, #132]	; (824ac <menu_compass+0xa8>)
   82426:	881a      	ldrh	r2, [r3, #0]
   82428:	4b21      	ldr	r3, [pc, #132]	; (824b0 <menu_compass+0xac>)
   8242a:	881b      	ldrh	r3, [r3, #0]
   8242c:	429a      	cmp	r2, r3
   8242e:	d01e      	beq.n	8246e <menu_compass+0x6a>
    {
        prev_direction = direction;
   82430:	4b1e      	ldr	r3, [pc, #120]	; (824ac <menu_compass+0xa8>)
   82432:	881a      	ldrh	r2, [r3, #0]
   82434:	4b1e      	ldr	r3, [pc, #120]	; (824b0 <menu_compass+0xac>)
   82436:	801a      	strh	r2, [r3, #0]
        sprintf(sprintf_buf, "  Direction: %3.1f  ", (float)direction / 10.0);
   82438:	4b1c      	ldr	r3, [pc, #112]	; (824ac <menu_compass+0xa8>)
   8243a:	881a      	ldrh	r2, [r3, #0]
   8243c:	4b1d      	ldr	r3, [pc, #116]	; (824b4 <menu_compass+0xb0>)
   8243e:	4610      	mov	r0, r2
   82440:	4798      	blx	r3
   82442:	4602      	mov	r2, r0
   82444:	4b1c      	ldr	r3, [pc, #112]	; (824b8 <menu_compass+0xb4>)
   82446:	4610      	mov	r0, r2
   82448:	4798      	blx	r3
   8244a:	4c1c      	ldr	r4, [pc, #112]	; (824bc <menu_compass+0xb8>)
   8244c:	f04f 0200 	mov.w	r2, #0
   82450:	4b1b      	ldr	r3, [pc, #108]	; (824c0 <menu_compass+0xbc>)
   82452:	47a0      	blx	r4
   82454:	4603      	mov	r3, r0
   82456:	460c      	mov	r4, r1
   82458:	461a      	mov	r2, r3
   8245a:	4623      	mov	r3, r4
   8245c:	4919      	ldr	r1, [pc, #100]	; (824c4 <menu_compass+0xc0>)
   8245e:	481a      	ldr	r0, [pc, #104]	; (824c8 <menu_compass+0xc4>)
   82460:	4c1a      	ldr	r4, [pc, #104]	; (824cc <menu_compass+0xc8>)
   82462:	47a0      	blx	r4
        lcd_print_s(2, 0, sprintf_buf);
   82464:	4a18      	ldr	r2, [pc, #96]	; (824c8 <menu_compass+0xc4>)
   82466:	2100      	movs	r1, #0
   82468:	2002      	movs	r0, #2
   8246a:	4b19      	ldr	r3, [pc, #100]	; (824d0 <menu_compass+0xcc>)
   8246c:	4798      	blx	r3
    }
    
    switch(event1)
   8246e:	79fb      	ldrb	r3, [r7, #7]
   82470:	2b07      	cmp	r3, #7
   82472:	d002      	beq.n	8247a <menu_compass+0x76>
   82474:	2b10      	cmp	r3, #16
   82476:	d007      	beq.n	82488 <menu_compass+0x84>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SENSORS;
            print_menu = 1;
            break;
        default:
            break;
   82478:	e00d      	b.n	82496 <menu_compass+0x92>
            act_menu = MENU_COMPASS_CALIBRATION;
   8247a:	4b16      	ldr	r3, [pc, #88]	; (824d4 <menu_compass+0xd0>)
   8247c:	2208      	movs	r2, #8
   8247e:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82480:	4b07      	ldr	r3, [pc, #28]	; (824a0 <menu_compass+0x9c>)
   82482:	2201      	movs	r2, #1
   82484:	701a      	strb	r2, [r3, #0]
            break;
   82486:	e006      	b.n	82496 <menu_compass+0x92>
            act_menu = MENU_SENSORS;
   82488:	4b12      	ldr	r3, [pc, #72]	; (824d4 <menu_compass+0xd0>)
   8248a:	2202      	movs	r2, #2
   8248c:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   8248e:	4b04      	ldr	r3, [pc, #16]	; (824a0 <menu_compass+0x9c>)
   82490:	2201      	movs	r2, #1
   82492:	701a      	strb	r2, [r3, #0]
            break;
   82494:	bf00      	nop
    }
}
   82496:	bf00      	nop
   82498:	370c      	adds	r7, #12
   8249a:	46bd      	mov	sp, r7
   8249c:	bd90      	pop	{r4, r7, pc}
   8249e:	bf00      	nop
   824a0:	2007018c 	.word	0x2007018c
   824a4:	00081a0d 	.word	0x00081a0d
   824a8:	00081749 	.word	0x00081749
   824ac:	20070e2c 	.word	0x20070e2c
   824b0:	20070dc4 	.word	0x20070dc4
   824b4:	00085459 	.word	0x00085459
   824b8:	00084e21 	.word	0x00084e21
   824bc:	0008511d 	.word	0x0008511d
   824c0:	40240000 	.word	0x40240000
   824c4:	00089a8c 	.word	0x00089a8c
   824c8:	20070e5c 	.word	0x20070e5c
   824cc:	000859cd 	.word	0x000859cd
   824d0:	00081a2d 	.word	0x00081a2d
   824d4:	20070dc0 	.word	0x20070dc0

000824d8 <menu_compass_calibration>:

static void menu_compass_calibration(event_t event1)
{
   824d8:	b580      	push	{r7, lr}
   824da:	b084      	sub	sp, #16
   824dc:	af00      	add	r7, sp, #0
   824de:	4603      	mov	r3, r0
   824e0:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   824e2:	4b2e      	ldr	r3, [pc, #184]	; (8259c <menu_compass_calibration+0xc4>)
   824e4:	781b      	ldrb	r3, [r3, #0]
   824e6:	2b00      	cmp	r3, #0
   824e8:	d016      	beq.n	82518 <menu_compass_calibration+0x40>
    {
        print_menu = 0;
   824ea:	4b2c      	ldr	r3, [pc, #176]	; (8259c <menu_compass_calibration+0xc4>)
   824ec:	2200      	movs	r2, #0
   824ee:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   824f0:	4b2b      	ldr	r3, [pc, #172]	; (825a0 <menu_compass_calibration+0xc8>)
   824f2:	4798      	blx	r3
        lcd_print_s(2, 1, "calibrate compass");
   824f4:	4a2b      	ldr	r2, [pc, #172]	; (825a4 <menu_compass_calibration+0xcc>)
   824f6:	2101      	movs	r1, #1
   824f8:	2002      	movs	r0, #2
   824fa:	4b2b      	ldr	r3, [pc, #172]	; (825a8 <menu_compass_calibration+0xd0>)
   824fc:	4798      	blx	r3
        sprintf(sprintf_buf, "  Direction: %1d  ", compass_cal_step + 1);
   824fe:	4b2b      	ldr	r3, [pc, #172]	; (825ac <menu_compass_calibration+0xd4>)
   82500:	781b      	ldrb	r3, [r3, #0]
   82502:	3301      	adds	r3, #1
   82504:	461a      	mov	r2, r3
   82506:	492a      	ldr	r1, [pc, #168]	; (825b0 <menu_compass_calibration+0xd8>)
   82508:	482a      	ldr	r0, [pc, #168]	; (825b4 <menu_compass_calibration+0xdc>)
   8250a:	4b2b      	ldr	r3, [pc, #172]	; (825b8 <menu_compass_calibration+0xe0>)
   8250c:	4798      	blx	r3
        lcd_print_s(3, 1, sprintf_buf);
   8250e:	4a29      	ldr	r2, [pc, #164]	; (825b4 <menu_compass_calibration+0xdc>)
   82510:	2101      	movs	r1, #1
   82512:	2003      	movs	r0, #3
   82514:	4b24      	ldr	r3, [pc, #144]	; (825a8 <menu_compass_calibration+0xd0>)
   82516:	4798      	blx	r3
    }
    
    if(event1 == EVENT_BUTTON_MID_P)
   82518:	79fb      	ldrb	r3, [r7, #7]
   8251a:	2b07      	cmp	r3, #7
   8251c:	d139      	bne.n	82592 <menu_compass_calibration+0xba>
    {
        twi_packet_t *tx_packet = twi_get_tx_packet();
   8251e:	4b27      	ldr	r3, [pc, #156]	; (825bc <menu_compass_calibration+0xe4>)
   82520:	4798      	blx	r3
   82522:	60f8      	str	r0, [r7, #12]
        
        tx_packet->chip = 0x60;
   82524:	68fb      	ldr	r3, [r7, #12]
   82526:	2260      	movs	r2, #96	; 0x60
   82528:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        tx_packet->addr[0] = 0x0f;
   8252c:	68fb      	ldr	r3, [r7, #12]
   8252e:	220f      	movs	r2, #15
   82530:	701a      	strb	r2, [r3, #0]
        tx_packet->addr_length = 1;
   82532:	68fb      	ldr	r3, [r7, #12]
   82534:	2201      	movs	r2, #1
   82536:	605a      	str	r2, [r3, #4]
        
        tx_packet->buffer[0] = 0xff;
   82538:	68fb      	ldr	r3, [r7, #12]
   8253a:	22ff      	movs	r2, #255	; 0xff
   8253c:	721a      	strb	r2, [r3, #8]
        tx_packet->length = 1;
   8253e:	68fb      	ldr	r3, [r7, #12]
   82540:	2201      	movs	r2, #1
   82542:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        
        set_compass_is_busy();
   82546:	4b1e      	ldr	r3, [pc, #120]	; (825c0 <menu_compass_calibration+0xe8>)
   82548:	4798      	blx	r3
        twi_pdc_master_write(TWI0, tx_packet);
   8254a:	68f9      	ldr	r1, [r7, #12]
   8254c:	481d      	ldr	r0, [pc, #116]	; (825c4 <menu_compass_calibration+0xec>)
   8254e:	4b1e      	ldr	r3, [pc, #120]	; (825c8 <menu_compass_calibration+0xf0>)
   82550:	4798      	blx	r3
        while(compass_is_busy());
   82552:	bf00      	nop
   82554:	4b1d      	ldr	r3, [pc, #116]	; (825cc <menu_compass_calibration+0xf4>)
   82556:	4798      	blx	r3
   82558:	4603      	mov	r3, r0
   8255a:	2b00      	cmp	r3, #0
   8255c:	d1fa      	bne.n	82554 <menu_compass_calibration+0x7c>
        mdelay(500);
   8255e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   82562:	4b1b      	ldr	r3, [pc, #108]	; (825d0 <menu_compass_calibration+0xf8>)
   82564:	4798      	blx	r3
        
        compass_cal_step++;
   82566:	4b11      	ldr	r3, [pc, #68]	; (825ac <menu_compass_calibration+0xd4>)
   82568:	781b      	ldrb	r3, [r3, #0]
   8256a:	3301      	adds	r3, #1
   8256c:	b2da      	uxtb	r2, r3
   8256e:	4b0f      	ldr	r3, [pc, #60]	; (825ac <menu_compass_calibration+0xd4>)
   82570:	701a      	strb	r2, [r3, #0]
        
        if(compass_cal_step == 4)
   82572:	4b0e      	ldr	r3, [pc, #56]	; (825ac <menu_compass_calibration+0xd4>)
   82574:	781b      	ldrb	r3, [r3, #0]
   82576:	2b04      	cmp	r3, #4
   82578:	d108      	bne.n	8258c <menu_compass_calibration+0xb4>
        {
            compass_cal_step = 0;
   8257a:	4b0c      	ldr	r3, [pc, #48]	; (825ac <menu_compass_calibration+0xd4>)
   8257c:	2200      	movs	r2, #0
   8257e:	701a      	strb	r2, [r3, #0]
            act_menu = MENU_COMPASS;
   82580:	4b14      	ldr	r3, [pc, #80]	; (825d4 <menu_compass_calibration+0xfc>)
   82582:	2207      	movs	r2, #7
   82584:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82586:	4b05      	ldr	r3, [pc, #20]	; (8259c <menu_compass_calibration+0xc4>)
   82588:	2201      	movs	r2, #1
   8258a:	701a      	strb	r2, [r3, #0]
        }
        print_menu = 1;
   8258c:	4b03      	ldr	r3, [pc, #12]	; (8259c <menu_compass_calibration+0xc4>)
   8258e:	2201      	movs	r2, #1
   82590:	701a      	strb	r2, [r3, #0]
    }
}
   82592:	bf00      	nop
   82594:	3710      	adds	r7, #16
   82596:	46bd      	mov	sp, r7
   82598:	bd80      	pop	{r7, pc}
   8259a:	bf00      	nop
   8259c:	2007018c 	.word	0x2007018c
   825a0:	00081a0d 	.word	0x00081a0d
   825a4:	00089aa4 	.word	0x00089aa4
   825a8:	00081a2d 	.word	0x00081a2d
   825ac:	20070dc1 	.word	0x20070dc1
   825b0:	00089ab8 	.word	0x00089ab8
   825b4:	20070e5c 	.word	0x20070e5c
   825b8:	000859cd 	.word	0x000859cd
   825bc:	0008129d 	.word	0x0008129d
   825c0:	000817d9 	.word	0x000817d9
   825c4:	4008c000 	.word	0x4008c000
   825c8:	0008139d 	.word	0x0008139d
   825cc:	000817f1 	.word	0x000817f1
   825d0:	00083391 	.word	0x00083391
   825d4:	20070dc0 	.word	0x20070dc0

000825d8 <menu_line>:

static void menu_line(event_t event1)
{
   825d8:	b480      	push	{r7}
   825da:	b083      	sub	sp, #12
   825dc:	af00      	add	r7, sp, #0
   825de:	4603      	mov	r3, r0
   825e0:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   825e2:	79fb      	ldrb	r3, [r7, #7]
   825e4:	2b10      	cmp	r3, #16
   825e6:	d105      	bne.n	825f4 <menu_line+0x1c>
    {
        act_menu = MENU_SENSORS;
   825e8:	4b05      	ldr	r3, [pc, #20]	; (82600 <menu_line+0x28>)
   825ea:	2202      	movs	r2, #2
   825ec:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   825ee:	4b05      	ldr	r3, [pc, #20]	; (82604 <menu_line+0x2c>)
   825f0:	2201      	movs	r2, #1
   825f2:	701a      	strb	r2, [r3, #0]
    }
}
   825f4:	bf00      	nop
   825f6:	370c      	adds	r7, #12
   825f8:	46bd      	mov	sp, r7
   825fa:	bc80      	pop	{r7}
   825fc:	4770      	bx	lr
   825fe:	bf00      	nop
   82600:	20070dc0 	.word	0x20070dc0
   82604:	2007018c 	.word	0x2007018c

00082608 <menu_line_calibration>:

static void menu_line_calibration(event_t event1)
{
   82608:	b480      	push	{r7}
   8260a:	b083      	sub	sp, #12
   8260c:	af00      	add	r7, sp, #0
   8260e:	4603      	mov	r3, r0
   82610:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   82612:	79fb      	ldrb	r3, [r7, #7]
   82614:	2b10      	cmp	r3, #16
   82616:	d105      	bne.n	82624 <menu_line_calibration+0x1c>
    {
        act_menu = MENU_LINE;
   82618:	4b05      	ldr	r3, [pc, #20]	; (82630 <menu_line_calibration+0x28>)
   8261a:	2205      	movs	r2, #5
   8261c:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   8261e:	4b05      	ldr	r3, [pc, #20]	; (82634 <menu_line_calibration+0x2c>)
   82620:	2201      	movs	r2, #1
   82622:	701a      	strb	r2, [r3, #0]
    }
}
   82624:	bf00      	nop
   82626:	370c      	adds	r7, #12
   82628:	46bd      	mov	sp, r7
   8262a:	bc80      	pop	{r7}
   8262c:	4770      	bx	lr
   8262e:	bf00      	nop
   82630:	20070dc0 	.word	0x20070dc0
   82634:	2007018c 	.word	0x2007018c

00082638 <menu_settings>:

static void menu_settings(event_t event1)
{
   82638:	b580      	push	{r7, lr}
   8263a:	b082      	sub	sp, #8
   8263c:	af00      	add	r7, sp, #0
   8263e:	4603      	mov	r3, r0
   82640:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   82642:	4b30      	ldr	r3, [pc, #192]	; (82704 <menu_settings+0xcc>)
   82644:	781b      	ldrb	r3, [r3, #0]
   82646:	2b00      	cmp	r3, #0
   82648:	d004      	beq.n	82654 <menu_settings+0x1c>
    {
        print_menu = 0;
   8264a:	4b2e      	ldr	r3, [pc, #184]	; (82704 <menu_settings+0xcc>)
   8264c:	2200      	movs	r2, #0
   8264e:	701a      	strb	r2, [r3, #0]
        print_menu_settings();
   82650:	4b2d      	ldr	r3, [pc, #180]	; (82708 <menu_settings+0xd0>)
   82652:	4798      	blx	r3
    }
    
    switch(event1)
   82654:	79fb      	ldrb	r3, [r7, #7]
   82656:	3b01      	subs	r3, #1
   82658:	2b0f      	cmp	r3, #15
   8265a:	d84a      	bhi.n	826f2 <menu_settings+0xba>
   8265c:	a201      	add	r2, pc, #4	; (adr r2, 82664 <menu_settings+0x2c>)
   8265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82662:	bf00      	nop
   82664:	000826a5 	.word	0x000826a5
   82668:	000826f3 	.word	0x000826f3
   8266c:	000826f3 	.word	0x000826f3
   82670:	000826f3 	.word	0x000826f3
   82674:	000826f3 	.word	0x000826f3
   82678:	000826f3 	.word	0x000826f3
   8267c:	000826f3 	.word	0x000826f3
   82680:	000826f3 	.word	0x000826f3
   82684:	000826f3 	.word	0x000826f3
   82688:	000826f3 	.word	0x000826f3
   8268c:	000826f3 	.word	0x000826f3
   82690:	000826f3 	.word	0x000826f3
   82694:	000826c5 	.word	0x000826c5
   82698:	000826f3 	.word	0x000826f3
   8269c:	000826f3 	.word	0x000826f3
   826a0:	000826e5 	.word	0x000826e5
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.settings.act_cursor_line > menu_info.settings.min_cursor_line)
   826a4:	4b19      	ldr	r3, [pc, #100]	; (8270c <menu_settings+0xd4>)
   826a6:	7a1a      	ldrb	r2, [r3, #8]
   826a8:	4b18      	ldr	r3, [pc, #96]	; (8270c <menu_settings+0xd4>)
   826aa:	7a9b      	ldrb	r3, [r3, #10]
   826ac:	429a      	cmp	r2, r3
   826ae:	d922      	bls.n	826f6 <menu_settings+0xbe>
            {
                menu_info.settings.act_cursor_line--;
   826b0:	4b16      	ldr	r3, [pc, #88]	; (8270c <menu_settings+0xd4>)
   826b2:	7a1b      	ldrb	r3, [r3, #8]
   826b4:	3b01      	subs	r3, #1
   826b6:	b2da      	uxtb	r2, r3
   826b8:	4b14      	ldr	r3, [pc, #80]	; (8270c <menu_settings+0xd4>)
   826ba:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   826bc:	4814      	ldr	r0, [pc, #80]	; (82710 <menu_settings+0xd8>)
   826be:	4b15      	ldr	r3, [pc, #84]	; (82714 <menu_settings+0xdc>)
   826c0:	4798      	blx	r3
            }
            break;
   826c2:	e018      	b.n	826f6 <menu_settings+0xbe>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.settings.act_cursor_line < menu_info.settings.max_cursor_line)
   826c4:	4b11      	ldr	r3, [pc, #68]	; (8270c <menu_settings+0xd4>)
   826c6:	7a1a      	ldrb	r2, [r3, #8]
   826c8:	4b10      	ldr	r3, [pc, #64]	; (8270c <menu_settings+0xd4>)
   826ca:	7adb      	ldrb	r3, [r3, #11]
   826cc:	429a      	cmp	r2, r3
   826ce:	d214      	bcs.n	826fa <menu_settings+0xc2>
            {
                menu_info.settings.act_cursor_line++;
   826d0:	4b0e      	ldr	r3, [pc, #56]	; (8270c <menu_settings+0xd4>)
   826d2:	7a1b      	ldrb	r3, [r3, #8]
   826d4:	3301      	adds	r3, #1
   826d6:	b2da      	uxtb	r2, r3
   826d8:	4b0c      	ldr	r3, [pc, #48]	; (8270c <menu_settings+0xd4>)
   826da:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   826dc:	480c      	ldr	r0, [pc, #48]	; (82710 <menu_settings+0xd8>)
   826de:	4b0d      	ldr	r3, [pc, #52]	; (82714 <menu_settings+0xdc>)
   826e0:	4798      	blx	r3
            }
            break;
   826e2:	e00a      	b.n	826fa <menu_settings+0xc2>
                default:
                    break;
            }*/
            break;
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   826e4:	4b0c      	ldr	r3, [pc, #48]	; (82718 <menu_settings+0xe0>)
   826e6:	2200      	movs	r2, #0
   826e8:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   826ea:	4b06      	ldr	r3, [pc, #24]	; (82704 <menu_settings+0xcc>)
   826ec:	2201      	movs	r2, #1
   826ee:	701a      	strb	r2, [r3, #0]
            break;
   826f0:	e004      	b.n	826fc <menu_settings+0xc4>
        default:
            break;
   826f2:	bf00      	nop
   826f4:	e002      	b.n	826fc <menu_settings+0xc4>
            break;
   826f6:	bf00      	nop
   826f8:	e000      	b.n	826fc <menu_settings+0xc4>
            break;
   826fa:	bf00      	nop
    }
}
   826fc:	bf00      	nop
   826fe:	3708      	adds	r7, #8
   82700:	46bd      	mov	sp, r7
   82702:	bd80      	pop	{r7, pc}
   82704:	2007018c 	.word	0x2007018c
   82708:	00082905 	.word	0x00082905
   8270c:	20070190 	.word	0x20070190
   82710:	20070198 	.word	0x20070198
   82714:	0008296d 	.word	0x0008296d
   82718:	20070dc0 	.word	0x20070dc0

0008271c <menu_shutdown>:

static void menu_shutdown(event_t event1)
{
   8271c:	b580      	push	{r7, lr}
   8271e:	b082      	sub	sp, #8
   82720:	af00      	add	r7, sp, #0
   82722:	4603      	mov	r3, r0
   82724:	71fb      	strb	r3, [r7, #7]
    if(shutdown_confirmed)
   82726:	4b35      	ldr	r3, [pc, #212]	; (827fc <menu_shutdown+0xe0>)
   82728:	781b      	ldrb	r3, [r3, #0]
   8272a:	2b00      	cmp	r3, #0
   8272c:	d043      	beq.n	827b6 <menu_shutdown+0x9a>
    {
        lcd_clear();
   8272e:	4b34      	ldr	r3, [pc, #208]	; (82800 <menu_shutdown+0xe4>)
   82730:	4798      	blx	r3
        lcd_print_s(2, 2, "shutting down...");
   82732:	4a34      	ldr	r2, [pc, #208]	; (82804 <menu_shutdown+0xe8>)
   82734:	2102      	movs	r1, #2
   82736:	2002      	movs	r0, #2
   82738:	4b33      	ldr	r3, [pc, #204]	; (82808 <menu_shutdown+0xec>)
   8273a:	4798      	blx	r3
        
        ioport_set_pin_level(LED_ONBOARD, 0);
   8273c:	2100      	movs	r1, #0
   8273e:	206a      	movs	r0, #106	; 0x6a
   82740:	4b32      	ldr	r3, [pc, #200]	; (8280c <menu_shutdown+0xf0>)
   82742:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   82744:	2100      	movs	r1, #0
   82746:	2066      	movs	r0, #102	; 0x66
   82748:	4b30      	ldr	r3, [pc, #192]	; (8280c <menu_shutdown+0xf0>)
   8274a:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   8274c:	2100      	movs	r1, #0
   8274e:	2067      	movs	r0, #103	; 0x67
   82750:	4b2e      	ldr	r3, [pc, #184]	; (8280c <menu_shutdown+0xf0>)
   82752:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   82754:	2100      	movs	r1, #0
   82756:	2068      	movs	r0, #104	; 0x68
   82758:	4b2c      	ldr	r3, [pc, #176]	; (8280c <menu_shutdown+0xf0>)
   8275a:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   8275c:	2100      	movs	r1, #0
   8275e:	2069      	movs	r0, #105	; 0x69
   82760:	4b2a      	ldr	r3, [pc, #168]	; (8280c <menu_shutdown+0xf0>)
   82762:	4798      	blx	r3
        pwm_channel_disable(PWM, MREAR);
        
        pwm_channel_disable(PWM, ENC_CLK);
        
        sensor_parameters.ibit.sleep_mode = 1;*/
        update_comm();
   82764:	4b2a      	ldr	r3, [pc, #168]	; (82810 <menu_shutdown+0xf4>)
   82766:	4798      	blx	r3
        
        ioport_set_pin_level(RPI1, 0);
   82768:	2100      	movs	r1, #0
   8276a:	2001      	movs	r0, #1
   8276c:	4b27      	ldr	r3, [pc, #156]	; (8280c <menu_shutdown+0xf0>)
   8276e:	4798      	blx	r3
        while (ioport_get_pin_level(RPI2) == 1);
   82770:	bf00      	nop
   82772:	2008      	movs	r0, #8
   82774:	4b27      	ldr	r3, [pc, #156]	; (82814 <menu_shutdown+0xf8>)
   82776:	4798      	blx	r3
   82778:	4603      	mov	r3, r0
   8277a:	2b00      	cmp	r3, #0
   8277c:	d1f9      	bne.n	82772 <menu_shutdown+0x56>
        mdelay(7500);
   8277e:	f641 504c 	movw	r0, #7500	; 0x1d4c
   82782:	4b25      	ldr	r3, [pc, #148]	; (82818 <menu_shutdown+0xfc>)
   82784:	4798      	blx	r3
        
        lcd_set_backlight(LCD_LIGHT_OFF);
   82786:	2000      	movs	r0, #0
   82788:	4b24      	ldr	r3, [pc, #144]	; (8281c <menu_shutdown+0x100>)
   8278a:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   8278c:	4b1c      	ldr	r3, [pc, #112]	; (82800 <menu_shutdown+0xe4>)
   8278e:	4798      	blx	r3
        mdelay(100);
   82790:	2064      	movs	r0, #100	; 0x64
   82792:	4b21      	ldr	r3, [pc, #132]	; (82818 <menu_shutdown+0xfc>)
   82794:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_ON);
   82796:	2008      	movs	r0, #8
   82798:	4b20      	ldr	r3, [pc, #128]	; (8281c <menu_shutdown+0x100>)
   8279a:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   8279c:	4b18      	ldr	r3, [pc, #96]	; (82800 <menu_shutdown+0xe4>)
   8279e:	4798      	blx	r3
        mdelay(100);
   827a0:	2064      	movs	r0, #100	; 0x64
   827a2:	4b1d      	ldr	r3, [pc, #116]	; (82818 <menu_shutdown+0xfc>)
   827a4:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_OFF);
   827a6:	2000      	movs	r0, #0
   827a8:	4b1c      	ldr	r3, [pc, #112]	; (8281c <menu_shutdown+0x100>)
   827aa:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   827ac:	4b14      	ldr	r3, [pc, #80]	; (82800 <menu_shutdown+0xe4>)
   827ae:	4798      	blx	r3
        
        while(1)
        {
            update_comm();
   827b0:	4b17      	ldr	r3, [pc, #92]	; (82810 <menu_shutdown+0xf4>)
   827b2:	4798      	blx	r3
   827b4:	e7fc      	b.n	827b0 <menu_shutdown+0x94>
            //check_bat();
        }
    }
    else
    {
        if(print_menu)
   827b6:	4b1a      	ldr	r3, [pc, #104]	; (82820 <menu_shutdown+0x104>)
   827b8:	781b      	ldrb	r3, [r3, #0]
   827ba:	2b00      	cmp	r3, #0
   827bc:	d009      	beq.n	827d2 <menu_shutdown+0xb6>
        {
            print_menu = 0;
   827be:	4b18      	ldr	r3, [pc, #96]	; (82820 <menu_shutdown+0x104>)
   827c0:	2200      	movs	r2, #0
   827c2:	701a      	strb	r2, [r3, #0]
            lcd_clear();
   827c4:	4b0e      	ldr	r3, [pc, #56]	; (82800 <menu_shutdown+0xe4>)
   827c6:	4798      	blx	r3
            lcd_print_s(2, 1, "confirm shutdown?");
   827c8:	4a16      	ldr	r2, [pc, #88]	; (82824 <menu_shutdown+0x108>)
   827ca:	2101      	movs	r1, #1
   827cc:	2002      	movs	r0, #2
   827ce:	4b0e      	ldr	r3, [pc, #56]	; (82808 <menu_shutdown+0xec>)
   827d0:	4798      	blx	r3
        }
    }
    
    switch (event1)
   827d2:	79fb      	ldrb	r3, [r7, #7]
   827d4:	2b07      	cmp	r3, #7
   827d6:	d002      	beq.n	827de <menu_shutdown+0xc2>
   827d8:	2b10      	cmp	r3, #16
   827da:	d004      	beq.n	827e6 <menu_shutdown+0xca>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
            print_menu = 1;
            break;
        default:
            break;
   827dc:	e00a      	b.n	827f4 <menu_shutdown+0xd8>
            shutdown_confirmed = 1;
   827de:	4b07      	ldr	r3, [pc, #28]	; (827fc <menu_shutdown+0xe0>)
   827e0:	2201      	movs	r2, #1
   827e2:	701a      	strb	r2, [r3, #0]
            break;
   827e4:	e006      	b.n	827f4 <menu_shutdown+0xd8>
            act_menu = MENU_MAIN;
   827e6:	4b10      	ldr	r3, [pc, #64]	; (82828 <menu_shutdown+0x10c>)
   827e8:	2200      	movs	r2, #0
   827ea:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   827ec:	4b0c      	ldr	r3, [pc, #48]	; (82820 <menu_shutdown+0x104>)
   827ee:	2201      	movs	r2, #1
   827f0:	701a      	strb	r2, [r3, #0]
            break;
   827f2:	bf00      	nop
    }
}
   827f4:	bf00      	nop
   827f6:	3708      	adds	r7, #8
   827f8:	46bd      	mov	sp, r7
   827fa:	bd80      	pop	{r7, pc}
   827fc:	20070dc2 	.word	0x20070dc2
   82800:	00081a0d 	.word	0x00081a0d
   82804:	00089acc 	.word	0x00089acc
   82808:	00081a2d 	.word	0x00081a2d
   8280c:	00081ec9 	.word	0x00081ec9
   82810:	000833bd 	.word	0x000833bd
   82814:	00081f33 	.word	0x00081f33
   82818:	00083391 	.word	0x00083391
   8281c:	000819ed 	.word	0x000819ed
   82820:	2007018c 	.word	0x2007018c
   82824:	00089ae0 	.word	0x00089ae0
   82828:	20070dc0 	.word	0x20070dc0

0008282c <print_menu_main>:

static void print_menu_main(void)
{
   8282c:	b590      	push	{r4, r7, lr}
   8282e:	b085      	sub	sp, #20
   82830:	af00      	add	r7, sp, #0
    const char *text[4] = {"    noOS ONE", " Match", " Sensors", " Settings"};
   82832:	4b14      	ldr	r3, [pc, #80]	; (82884 <print_menu_main+0x58>)
   82834:	463c      	mov	r4, r7
   82836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   82838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   8283c:	4b12      	ldr	r3, [pc, #72]	; (82888 <print_menu_main+0x5c>)
   8283e:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   82840:	683b      	ldr	r3, [r7, #0]
   82842:	461a      	mov	r2, r3
   82844:	2100      	movs	r1, #0
   82846:	2001      	movs	r0, #1
   82848:	4b10      	ldr	r3, [pc, #64]	; (8288c <print_menu_main+0x60>)
   8284a:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   8284c:	687b      	ldr	r3, [r7, #4]
   8284e:	461a      	mov	r2, r3
   82850:	2100      	movs	r1, #0
   82852:	2002      	movs	r0, #2
   82854:	4b0d      	ldr	r3, [pc, #52]	; (8288c <print_menu_main+0x60>)
   82856:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82858:	68bb      	ldr	r3, [r7, #8]
   8285a:	461a      	mov	r2, r3
   8285c:	2100      	movs	r1, #0
   8285e:	2003      	movs	r0, #3
   82860:	4b0a      	ldr	r3, [pc, #40]	; (8288c <print_menu_main+0x60>)
   82862:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   82864:	68fb      	ldr	r3, [r7, #12]
   82866:	461a      	mov	r2, r3
   82868:	2100      	movs	r1, #0
   8286a:	2004      	movs	r0, #4
   8286c:	4b07      	ldr	r3, [pc, #28]	; (8288c <print_menu_main+0x60>)
   8286e:	4798      	blx	r3
    print_cursor(&menu_info.main);
   82870:	4807      	ldr	r0, [pc, #28]	; (82890 <print_menu_main+0x64>)
   82872:	4b08      	ldr	r3, [pc, #32]	; (82894 <print_menu_main+0x68>)
   82874:	4798      	blx	r3
    update_battery(1);
   82876:	2001      	movs	r0, #1
   82878:	4b07      	ldr	r3, [pc, #28]	; (82898 <print_menu_main+0x6c>)
   8287a:	4798      	blx	r3
}
   8287c:	bf00      	nop
   8287e:	3714      	adds	r7, #20
   82880:	46bd      	mov	sp, r7
   82882:	bd90      	pop	{r4, r7, pc}
   82884:	00089b24 	.word	0x00089b24
   82888:	00081a0d 	.word	0x00081a0d
   8288c:	00081a2d 	.word	0x00081a2d
   82890:	20070190 	.word	0x20070190
   82894:	0008296d 	.word	0x0008296d
   82898:	00083405 	.word	0x00083405

0008289c <print_menu_sensors>:

static void print_menu_sensors(void)
{
   8289c:	b590      	push	{r4, r7, lr}
   8289e:	b085      	sub	sp, #20
   828a0:	af00      	add	r7, sp, #0
    const char *text[4] = {" Ball", " Compass", " Line", " "};
   828a2:	4b13      	ldr	r3, [pc, #76]	; (828f0 <print_menu_sensors+0x54>)
   828a4:	463c      	mov	r4, r7
   828a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   828a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   828ac:	4b11      	ldr	r3, [pc, #68]	; (828f4 <print_menu_sensors+0x58>)
   828ae:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   828b0:	683b      	ldr	r3, [r7, #0]
   828b2:	461a      	mov	r2, r3
   828b4:	2100      	movs	r1, #0
   828b6:	2001      	movs	r0, #1
   828b8:	4b0f      	ldr	r3, [pc, #60]	; (828f8 <print_menu_sensors+0x5c>)
   828ba:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   828bc:	687b      	ldr	r3, [r7, #4]
   828be:	461a      	mov	r2, r3
   828c0:	2100      	movs	r1, #0
   828c2:	2002      	movs	r0, #2
   828c4:	4b0c      	ldr	r3, [pc, #48]	; (828f8 <print_menu_sensors+0x5c>)
   828c6:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   828c8:	68bb      	ldr	r3, [r7, #8]
   828ca:	461a      	mov	r2, r3
   828cc:	2100      	movs	r1, #0
   828ce:	2003      	movs	r0, #3
   828d0:	4b09      	ldr	r3, [pc, #36]	; (828f8 <print_menu_sensors+0x5c>)
   828d2:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   828d4:	68fb      	ldr	r3, [r7, #12]
   828d6:	461a      	mov	r2, r3
   828d8:	2100      	movs	r1, #0
   828da:	2004      	movs	r0, #4
   828dc:	4b06      	ldr	r3, [pc, #24]	; (828f8 <print_menu_sensors+0x5c>)
   828de:	4798      	blx	r3
    print_cursor(&menu_info.sensors);
   828e0:	4806      	ldr	r0, [pc, #24]	; (828fc <print_menu_sensors+0x60>)
   828e2:	4b07      	ldr	r3, [pc, #28]	; (82900 <print_menu_sensors+0x64>)
   828e4:	4798      	blx	r3
}
   828e6:	bf00      	nop
   828e8:	3714      	adds	r7, #20
   828ea:	46bd      	mov	sp, r7
   828ec:	bd90      	pop	{r4, r7, pc}
   828ee:	bf00      	nop
   828f0:	00089b54 	.word	0x00089b54
   828f4:	00081a0d 	.word	0x00081a0d
   828f8:	00081a2d 	.word	0x00081a2d
   828fc:	20070194 	.word	0x20070194
   82900:	0008296d 	.word	0x0008296d

00082904 <print_menu_settings>:

static void print_menu_settings(void)
{
   82904:	b590      	push	{r4, r7, lr}
   82906:	b085      	sub	sp, #20
   82908:	af00      	add	r7, sp, #0
    const char *text[4] = {" ", " ", " ", " "};
   8290a:	4b13      	ldr	r3, [pc, #76]	; (82958 <print_menu_settings+0x54>)
   8290c:	463c      	mov	r4, r7
   8290e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   82910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   82914:	4b11      	ldr	r3, [pc, #68]	; (8295c <print_menu_settings+0x58>)
   82916:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   82918:	683b      	ldr	r3, [r7, #0]
   8291a:	461a      	mov	r2, r3
   8291c:	2100      	movs	r1, #0
   8291e:	2001      	movs	r0, #1
   82920:	4b0f      	ldr	r3, [pc, #60]	; (82960 <print_menu_settings+0x5c>)
   82922:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   82924:	687b      	ldr	r3, [r7, #4]
   82926:	461a      	mov	r2, r3
   82928:	2100      	movs	r1, #0
   8292a:	2002      	movs	r0, #2
   8292c:	4b0c      	ldr	r3, [pc, #48]	; (82960 <print_menu_settings+0x5c>)
   8292e:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82930:	68bb      	ldr	r3, [r7, #8]
   82932:	461a      	mov	r2, r3
   82934:	2100      	movs	r1, #0
   82936:	2003      	movs	r0, #3
   82938:	4b09      	ldr	r3, [pc, #36]	; (82960 <print_menu_settings+0x5c>)
   8293a:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   8293c:	68fb      	ldr	r3, [r7, #12]
   8293e:	461a      	mov	r2, r3
   82940:	2100      	movs	r1, #0
   82942:	2004      	movs	r0, #4
   82944:	4b06      	ldr	r3, [pc, #24]	; (82960 <print_menu_settings+0x5c>)
   82946:	4798      	blx	r3
    print_cursor(&menu_info.settings);
   82948:	4806      	ldr	r0, [pc, #24]	; (82964 <print_menu_settings+0x60>)
   8294a:	4b07      	ldr	r3, [pc, #28]	; (82968 <print_menu_settings+0x64>)
   8294c:	4798      	blx	r3
}
   8294e:	bf00      	nop
   82950:	3714      	adds	r7, #20
   82952:	46bd      	mov	sp, r7
   82954:	bd90      	pop	{r4, r7, pc}
   82956:	bf00      	nop
   82958:	00089b64 	.word	0x00089b64
   8295c:	00081a0d 	.word	0x00081a0d
   82960:	00081a2d 	.word	0x00081a2d
   82964:	20070198 	.word	0x20070198
   82968:	0008296d 	.word	0x0008296d

0008296c <print_cursor>:

static void print_cursor(menu_info_t *info)
{
   8296c:	b580      	push	{r7, lr}
   8296e:	b082      	sub	sp, #8
   82970:	af00      	add	r7, sp, #0
   82972:	6078      	str	r0, [r7, #4]
    lcd_print_s(info->prev_cursor_line, 0, " ");
   82974:	687b      	ldr	r3, [r7, #4]
   82976:	785b      	ldrb	r3, [r3, #1]
   82978:	4a09      	ldr	r2, [pc, #36]	; (829a0 <print_cursor+0x34>)
   8297a:	2100      	movs	r1, #0
   8297c:	4618      	mov	r0, r3
   8297e:	4b09      	ldr	r3, [pc, #36]	; (829a4 <print_cursor+0x38>)
   82980:	4798      	blx	r3
    lcd_print_s(info->act_cursor_line, 0, ">");
   82982:	687b      	ldr	r3, [r7, #4]
   82984:	781b      	ldrb	r3, [r3, #0]
   82986:	4a08      	ldr	r2, [pc, #32]	; (829a8 <print_cursor+0x3c>)
   82988:	2100      	movs	r1, #0
   8298a:	4618      	mov	r0, r3
   8298c:	4b05      	ldr	r3, [pc, #20]	; (829a4 <print_cursor+0x38>)
   8298e:	4798      	blx	r3
    
    info->prev_cursor_line = info->act_cursor_line;
   82990:	687b      	ldr	r3, [r7, #4]
   82992:	781a      	ldrb	r2, [r3, #0]
   82994:	687b      	ldr	r3, [r7, #4]
   82996:	705a      	strb	r2, [r3, #1]
}
   82998:	bf00      	nop
   8299a:	3708      	adds	r7, #8
   8299c:	46bd      	mov	sp, r7
   8299e:	bd80      	pop	{r7, pc}
   829a0:	00089b50 	.word	0x00089b50
   829a4:	00081a2d 	.word	0x00081a2d
   829a8:	00089b74 	.word	0x00089b74

000829ac <button_events>:

event_t button_events(void)
{
   829ac:	b580      	push	{r7, lr}
   829ae:	b082      	sub	sp, #8
   829b0:	af00      	add	r7, sp, #0
    event_t nextEvent = EVENT_NO_EVENT;
   829b2:	2300      	movs	r3, #0
   829b4:	71fb      	strb	r3, [r7, #7]

    if (getTicks() >= (ticks_button_update + 30))
   829b6:	4b75      	ldr	r3, [pc, #468]	; (82b8c <button_events+0x1e0>)
   829b8:	4798      	blx	r3
   829ba:	4602      	mov	r2, r0
   829bc:	4b74      	ldr	r3, [pc, #464]	; (82b90 <button_events+0x1e4>)
   829be:	681b      	ldr	r3, [r3, #0]
   829c0:	331e      	adds	r3, #30
   829c2:	429a      	cmp	r2, r3
   829c4:	f0c0 80dd 	bcc.w	82b82 <button_events+0x1d6>
    {
        ticks_button_update = getTicks();
   829c8:	4b70      	ldr	r3, [pc, #448]	; (82b8c <button_events+0x1e0>)
   829ca:	4798      	blx	r3
   829cc:	4602      	mov	r2, r0
   829ce:	4b70      	ldr	r3, [pc, #448]	; (82b90 <button_events+0x1e4>)
   829d0:	601a      	str	r2, [r3, #0]
        
        pb_up_act = ioport_get_pin_level(PB_UP);
   829d2:	2060      	movs	r0, #96	; 0x60
   829d4:	4b6f      	ldr	r3, [pc, #444]	; (82b94 <button_events+0x1e8>)
   829d6:	4798      	blx	r3
   829d8:	4603      	mov	r3, r0
   829da:	461a      	mov	r2, r3
   829dc:	4b6e      	ldr	r3, [pc, #440]	; (82b98 <button_events+0x1ec>)
   829de:	701a      	strb	r2, [r3, #0]
        pb_left_act = ioport_get_pin_level(PB_LEFT);
   829e0:	2061      	movs	r0, #97	; 0x61
   829e2:	4b6c      	ldr	r3, [pc, #432]	; (82b94 <button_events+0x1e8>)
   829e4:	4798      	blx	r3
   829e6:	4603      	mov	r3, r0
   829e8:	461a      	mov	r2, r3
   829ea:	4b6c      	ldr	r3, [pc, #432]	; (82b9c <button_events+0x1f0>)
   829ec:	701a      	strb	r2, [r3, #0]
        pb_mid_act = ioport_get_pin_level(PB_MID);
   829ee:	2062      	movs	r0, #98	; 0x62
   829f0:	4b68      	ldr	r3, [pc, #416]	; (82b94 <button_events+0x1e8>)
   829f2:	4798      	blx	r3
   829f4:	4603      	mov	r3, r0
   829f6:	461a      	mov	r2, r3
   829f8:	4b69      	ldr	r3, [pc, #420]	; (82ba0 <button_events+0x1f4>)
   829fa:	701a      	strb	r2, [r3, #0]
        pb_right_act = ioport_get_pin_level(PB_RIGHT);
   829fc:	2063      	movs	r0, #99	; 0x63
   829fe:	4b65      	ldr	r3, [pc, #404]	; (82b94 <button_events+0x1e8>)
   82a00:	4798      	blx	r3
   82a02:	4603      	mov	r3, r0
   82a04:	461a      	mov	r2, r3
   82a06:	4b67      	ldr	r3, [pc, #412]	; (82ba4 <button_events+0x1f8>)
   82a08:	701a      	strb	r2, [r3, #0]
        pb_down_act = ioport_get_pin_level(PB_DOWN);
   82a0a:	2064      	movs	r0, #100	; 0x64
   82a0c:	4b61      	ldr	r3, [pc, #388]	; (82b94 <button_events+0x1e8>)
   82a0e:	4798      	blx	r3
   82a10:	4603      	mov	r3, r0
   82a12:	461a      	mov	r2, r3
   82a14:	4b64      	ldr	r3, [pc, #400]	; (82ba8 <button_events+0x1fc>)
   82a16:	701a      	strb	r2, [r3, #0]
        pb_return_act = ioport_get_pin_level(PB_RETURN);
   82a18:	2065      	movs	r0, #101	; 0x65
   82a1a:	4b5e      	ldr	r3, [pc, #376]	; (82b94 <button_events+0x1e8>)
   82a1c:	4798      	blx	r3
   82a1e:	4603      	mov	r3, r0
   82a20:	461a      	mov	r2, r3
   82a22:	4b62      	ldr	r3, [pc, #392]	; (82bac <button_events+0x200>)
   82a24:	701a      	strb	r2, [r3, #0]
        
        if (pb_up_act != pb_up_prev && pb_up_act == 0)
   82a26:	4b5c      	ldr	r3, [pc, #368]	; (82b98 <button_events+0x1ec>)
   82a28:	781a      	ldrb	r2, [r3, #0]
   82a2a:	4b61      	ldr	r3, [pc, #388]	; (82bb0 <button_events+0x204>)
   82a2c:	781b      	ldrb	r3, [r3, #0]
   82a2e:	429a      	cmp	r2, r3
   82a30:	d006      	beq.n	82a40 <button_events+0x94>
   82a32:	4b59      	ldr	r3, [pc, #356]	; (82b98 <button_events+0x1ec>)
   82a34:	781b      	ldrb	r3, [r3, #0]
   82a36:	2b00      	cmp	r3, #0
   82a38:	d102      	bne.n	82a40 <button_events+0x94>
        {
            nextEvent = EVENT_BUTTON_UP_P;
   82a3a:	2301      	movs	r3, #1
   82a3c:	71fb      	strb	r3, [r7, #7]
   82a3e:	e00b      	b.n	82a58 <button_events+0xac>
        }
        else if (pb_up_act != pb_up_prev && pb_up_act == 1)
   82a40:	4b55      	ldr	r3, [pc, #340]	; (82b98 <button_events+0x1ec>)
   82a42:	781a      	ldrb	r2, [r3, #0]
   82a44:	4b5a      	ldr	r3, [pc, #360]	; (82bb0 <button_events+0x204>)
   82a46:	781b      	ldrb	r3, [r3, #0]
   82a48:	429a      	cmp	r2, r3
   82a4a:	d005      	beq.n	82a58 <button_events+0xac>
   82a4c:	4b52      	ldr	r3, [pc, #328]	; (82b98 <button_events+0x1ec>)
   82a4e:	781b      	ldrb	r3, [r3, #0]
   82a50:	2b01      	cmp	r3, #1
   82a52:	d101      	bne.n	82a58 <button_events+0xac>
        {
            nextEvent = EVENT_BUTTON_UP_R;
   82a54:	2303      	movs	r3, #3
   82a56:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_up_act == pb_up_prev && pb_up_act == 0)
        {
            nextEvent = EVENT_BUTTON_UP_H;
        }*/
        
        if (pb_left_act != pb_left_prev && pb_left_act == 0)
   82a58:	4b50      	ldr	r3, [pc, #320]	; (82b9c <button_events+0x1f0>)
   82a5a:	781a      	ldrb	r2, [r3, #0]
   82a5c:	4b55      	ldr	r3, [pc, #340]	; (82bb4 <button_events+0x208>)
   82a5e:	781b      	ldrb	r3, [r3, #0]
   82a60:	429a      	cmp	r2, r3
   82a62:	d006      	beq.n	82a72 <button_events+0xc6>
   82a64:	4b4d      	ldr	r3, [pc, #308]	; (82b9c <button_events+0x1f0>)
   82a66:	781b      	ldrb	r3, [r3, #0]
   82a68:	2b00      	cmp	r3, #0
   82a6a:	d102      	bne.n	82a72 <button_events+0xc6>
        {
            nextEvent = EVENT_BUTTON_LEFT_P;
   82a6c:	2304      	movs	r3, #4
   82a6e:	71fb      	strb	r3, [r7, #7]
   82a70:	e00b      	b.n	82a8a <button_events+0xde>
        }
        else if (pb_left_act != pb_left_prev && pb_left_act == 1)
   82a72:	4b4a      	ldr	r3, [pc, #296]	; (82b9c <button_events+0x1f0>)
   82a74:	781a      	ldrb	r2, [r3, #0]
   82a76:	4b4f      	ldr	r3, [pc, #316]	; (82bb4 <button_events+0x208>)
   82a78:	781b      	ldrb	r3, [r3, #0]
   82a7a:	429a      	cmp	r2, r3
   82a7c:	d005      	beq.n	82a8a <button_events+0xde>
   82a7e:	4b47      	ldr	r3, [pc, #284]	; (82b9c <button_events+0x1f0>)
   82a80:	781b      	ldrb	r3, [r3, #0]
   82a82:	2b01      	cmp	r3, #1
   82a84:	d101      	bne.n	82a8a <button_events+0xde>
        {
            nextEvent = EVENT_BUTTON_LEFT_R;
   82a86:	2306      	movs	r3, #6
   82a88:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_left_act == pb_left_prev && pb_left_act == 0)
        {
            nextEvent = EVENT_BUTTON_LEFT_H;
        }*/
        
        if (pb_mid_act != pb_mid_prev && pb_mid_act == 0)
   82a8a:	4b45      	ldr	r3, [pc, #276]	; (82ba0 <button_events+0x1f4>)
   82a8c:	781a      	ldrb	r2, [r3, #0]
   82a8e:	4b4a      	ldr	r3, [pc, #296]	; (82bb8 <button_events+0x20c>)
   82a90:	781b      	ldrb	r3, [r3, #0]
   82a92:	429a      	cmp	r2, r3
   82a94:	d006      	beq.n	82aa4 <button_events+0xf8>
   82a96:	4b42      	ldr	r3, [pc, #264]	; (82ba0 <button_events+0x1f4>)
   82a98:	781b      	ldrb	r3, [r3, #0]
   82a9a:	2b00      	cmp	r3, #0
   82a9c:	d102      	bne.n	82aa4 <button_events+0xf8>
        {
            nextEvent = EVENT_BUTTON_MID_P;
   82a9e:	2307      	movs	r3, #7
   82aa0:	71fb      	strb	r3, [r7, #7]
   82aa2:	e00b      	b.n	82abc <button_events+0x110>
        }
        else if (pb_mid_act != pb_mid_prev && pb_mid_act == 1)
   82aa4:	4b3e      	ldr	r3, [pc, #248]	; (82ba0 <button_events+0x1f4>)
   82aa6:	781a      	ldrb	r2, [r3, #0]
   82aa8:	4b43      	ldr	r3, [pc, #268]	; (82bb8 <button_events+0x20c>)
   82aaa:	781b      	ldrb	r3, [r3, #0]
   82aac:	429a      	cmp	r2, r3
   82aae:	d005      	beq.n	82abc <button_events+0x110>
   82ab0:	4b3b      	ldr	r3, [pc, #236]	; (82ba0 <button_events+0x1f4>)
   82ab2:	781b      	ldrb	r3, [r3, #0]
   82ab4:	2b01      	cmp	r3, #1
   82ab6:	d101      	bne.n	82abc <button_events+0x110>
        {
            nextEvent = EVENT_BUTTON_MID_R;
   82ab8:	2309      	movs	r3, #9
   82aba:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_mid_act == pb_mid_prev && pb_mid_act == 0)
        {
            nextEvent = EVENT_BUTTON_MID_H;
        }*/
        
        if (pb_right_act != pb_right_prev && pb_right_act == 0)
   82abc:	4b39      	ldr	r3, [pc, #228]	; (82ba4 <button_events+0x1f8>)
   82abe:	781a      	ldrb	r2, [r3, #0]
   82ac0:	4b3e      	ldr	r3, [pc, #248]	; (82bbc <button_events+0x210>)
   82ac2:	781b      	ldrb	r3, [r3, #0]
   82ac4:	429a      	cmp	r2, r3
   82ac6:	d006      	beq.n	82ad6 <button_events+0x12a>
   82ac8:	4b36      	ldr	r3, [pc, #216]	; (82ba4 <button_events+0x1f8>)
   82aca:	781b      	ldrb	r3, [r3, #0]
   82acc:	2b00      	cmp	r3, #0
   82ace:	d102      	bne.n	82ad6 <button_events+0x12a>
        {
            nextEvent = EVENT_BUTTON_RIGHT_P;
   82ad0:	230a      	movs	r3, #10
   82ad2:	71fb      	strb	r3, [r7, #7]
   82ad4:	e00b      	b.n	82aee <button_events+0x142>
        }
        else if (pb_right_act != pb_right_prev && pb_right_act == 1)
   82ad6:	4b33      	ldr	r3, [pc, #204]	; (82ba4 <button_events+0x1f8>)
   82ad8:	781a      	ldrb	r2, [r3, #0]
   82ada:	4b38      	ldr	r3, [pc, #224]	; (82bbc <button_events+0x210>)
   82adc:	781b      	ldrb	r3, [r3, #0]
   82ade:	429a      	cmp	r2, r3
   82ae0:	d005      	beq.n	82aee <button_events+0x142>
   82ae2:	4b30      	ldr	r3, [pc, #192]	; (82ba4 <button_events+0x1f8>)
   82ae4:	781b      	ldrb	r3, [r3, #0]
   82ae6:	2b01      	cmp	r3, #1
   82ae8:	d101      	bne.n	82aee <button_events+0x142>
        {
            nextEvent = EVENT_BUTTON_RIGHT_R;
   82aea:	230c      	movs	r3, #12
   82aec:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_right_act == pb_right_prev && pb_right_act == 0)
        {
            nextEvent = EVENT_BUTTON_RIGHT_H;
        }*/
        
        if (pb_down_act != pb_down_prev && pb_down_act == 0)
   82aee:	4b2e      	ldr	r3, [pc, #184]	; (82ba8 <button_events+0x1fc>)
   82af0:	781a      	ldrb	r2, [r3, #0]
   82af2:	4b33      	ldr	r3, [pc, #204]	; (82bc0 <button_events+0x214>)
   82af4:	781b      	ldrb	r3, [r3, #0]
   82af6:	429a      	cmp	r2, r3
   82af8:	d006      	beq.n	82b08 <button_events+0x15c>
   82afa:	4b2b      	ldr	r3, [pc, #172]	; (82ba8 <button_events+0x1fc>)
   82afc:	781b      	ldrb	r3, [r3, #0]
   82afe:	2b00      	cmp	r3, #0
   82b00:	d102      	bne.n	82b08 <button_events+0x15c>
        {
            nextEvent = EVENT_BUTTON_DOWN_P;
   82b02:	230d      	movs	r3, #13
   82b04:	71fb      	strb	r3, [r7, #7]
   82b06:	e00b      	b.n	82b20 <button_events+0x174>
        }
        else if (pb_down_act != pb_down_prev && pb_down_act == 1)
   82b08:	4b27      	ldr	r3, [pc, #156]	; (82ba8 <button_events+0x1fc>)
   82b0a:	781a      	ldrb	r2, [r3, #0]
   82b0c:	4b2c      	ldr	r3, [pc, #176]	; (82bc0 <button_events+0x214>)
   82b0e:	781b      	ldrb	r3, [r3, #0]
   82b10:	429a      	cmp	r2, r3
   82b12:	d005      	beq.n	82b20 <button_events+0x174>
   82b14:	4b24      	ldr	r3, [pc, #144]	; (82ba8 <button_events+0x1fc>)
   82b16:	781b      	ldrb	r3, [r3, #0]
   82b18:	2b01      	cmp	r3, #1
   82b1a:	d101      	bne.n	82b20 <button_events+0x174>
        {
            nextEvent = EVENT_BUTTON_DOWN_R;
   82b1c:	230f      	movs	r3, #15
   82b1e:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_down_act == pb_down_prev && pb_down_act == 0)
        {
            nextEvent = EVENT_BUTTON_DOWN_H;
        }*/
        
        if (pb_return_act != pb_return_prev && pb_return_act == 0)
   82b20:	4b22      	ldr	r3, [pc, #136]	; (82bac <button_events+0x200>)
   82b22:	781a      	ldrb	r2, [r3, #0]
   82b24:	4b27      	ldr	r3, [pc, #156]	; (82bc4 <button_events+0x218>)
   82b26:	781b      	ldrb	r3, [r3, #0]
   82b28:	429a      	cmp	r2, r3
   82b2a:	d006      	beq.n	82b3a <button_events+0x18e>
   82b2c:	4b1f      	ldr	r3, [pc, #124]	; (82bac <button_events+0x200>)
   82b2e:	781b      	ldrb	r3, [r3, #0]
   82b30:	2b00      	cmp	r3, #0
   82b32:	d102      	bne.n	82b3a <button_events+0x18e>
        {
            nextEvent = EVENT_BUTTON_RETURN_P;
   82b34:	2310      	movs	r3, #16
   82b36:	71fb      	strb	r3, [r7, #7]
   82b38:	e00b      	b.n	82b52 <button_events+0x1a6>
        }
        else if (pb_return_act != pb_return_prev && pb_return_act == 1)
   82b3a:	4b1c      	ldr	r3, [pc, #112]	; (82bac <button_events+0x200>)
   82b3c:	781a      	ldrb	r2, [r3, #0]
   82b3e:	4b21      	ldr	r3, [pc, #132]	; (82bc4 <button_events+0x218>)
   82b40:	781b      	ldrb	r3, [r3, #0]
   82b42:	429a      	cmp	r2, r3
   82b44:	d005      	beq.n	82b52 <button_events+0x1a6>
   82b46:	4b19      	ldr	r3, [pc, #100]	; (82bac <button_events+0x200>)
   82b48:	781b      	ldrb	r3, [r3, #0]
   82b4a:	2b01      	cmp	r3, #1
   82b4c:	d101      	bne.n	82b52 <button_events+0x1a6>
        {
            nextEvent = EVENT_BUTTON_RETURN_R;
   82b4e:	2312      	movs	r3, #18
   82b50:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_return_act == pb_up_prev && pb_return_act == 0)
        {
            nextEvent = EVENT_BUTTON_RETURN_H;
        }*/
        
        pb_up_prev = pb_up_act;
   82b52:	4b11      	ldr	r3, [pc, #68]	; (82b98 <button_events+0x1ec>)
   82b54:	781a      	ldrb	r2, [r3, #0]
   82b56:	4b16      	ldr	r3, [pc, #88]	; (82bb0 <button_events+0x204>)
   82b58:	701a      	strb	r2, [r3, #0]
        pb_left_prev = pb_left_act;
   82b5a:	4b10      	ldr	r3, [pc, #64]	; (82b9c <button_events+0x1f0>)
   82b5c:	781a      	ldrb	r2, [r3, #0]
   82b5e:	4b15      	ldr	r3, [pc, #84]	; (82bb4 <button_events+0x208>)
   82b60:	701a      	strb	r2, [r3, #0]
        pb_mid_prev = pb_mid_act;
   82b62:	4b0f      	ldr	r3, [pc, #60]	; (82ba0 <button_events+0x1f4>)
   82b64:	781a      	ldrb	r2, [r3, #0]
   82b66:	4b14      	ldr	r3, [pc, #80]	; (82bb8 <button_events+0x20c>)
   82b68:	701a      	strb	r2, [r3, #0]
        pb_right_prev = pb_right_act;
   82b6a:	4b0e      	ldr	r3, [pc, #56]	; (82ba4 <button_events+0x1f8>)
   82b6c:	781a      	ldrb	r2, [r3, #0]
   82b6e:	4b13      	ldr	r3, [pc, #76]	; (82bbc <button_events+0x210>)
   82b70:	701a      	strb	r2, [r3, #0]
        pb_down_prev = pb_down_act;
   82b72:	4b0d      	ldr	r3, [pc, #52]	; (82ba8 <button_events+0x1fc>)
   82b74:	781a      	ldrb	r2, [r3, #0]
   82b76:	4b12      	ldr	r3, [pc, #72]	; (82bc0 <button_events+0x214>)
   82b78:	701a      	strb	r2, [r3, #0]
        pb_return_prev = pb_return_act;
   82b7a:	4b0c      	ldr	r3, [pc, #48]	; (82bac <button_events+0x200>)
   82b7c:	781a      	ldrb	r2, [r3, #0]
   82b7e:	4b11      	ldr	r3, [pc, #68]	; (82bc4 <button_events+0x218>)
   82b80:	701a      	strb	r2, [r3, #0]
    }

    return nextEvent;
   82b82:	79fb      	ldrb	r3, [r7, #7]
}
   82b84:	4618      	mov	r0, r3
   82b86:	3708      	adds	r7, #8
   82b88:	46bd      	mov	sp, r7
   82b8a:	bd80      	pop	{r7, pc}
   82b8c:	0008337d 	.word	0x0008337d
   82b90:	20070e30 	.word	0x20070e30
   82b94:	00081f33 	.word	0x00081f33
   82b98:	20070e59 	.word	0x20070e59
   82b9c:	20070e40 	.word	0x20070e40
   82ba0:	20070e58 	.word	0x20070e58
   82ba4:	20070e5a 	.word	0x20070e5a
   82ba8:	20070e3c 	.word	0x20070e3c
   82bac:	20070e38 	.word	0x20070e38
   82bb0:	20070e3d 	.word	0x20070e3d
   82bb4:	20070e3b 	.word	0x20070e3b
   82bb8:	20070e39 	.word	0x20070e39
   82bbc:	20070e3e 	.word	0x20070e3e
   82bc0:	20070e3a 	.word	0x20070e3a
   82bc4:	20070e3f 	.word	0x20070e3f

00082bc8 <NVIC_EnableIRQ>:
{
   82bc8:	b480      	push	{r7}
   82bca:	b083      	sub	sp, #12
   82bcc:	af00      	add	r7, sp, #0
   82bce:	4603      	mov	r3, r0
   82bd0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82bd2:	4908      	ldr	r1, [pc, #32]	; (82bf4 <NVIC_EnableIRQ+0x2c>)
   82bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82bd8:	095b      	lsrs	r3, r3, #5
   82bda:	79fa      	ldrb	r2, [r7, #7]
   82bdc:	f002 021f 	and.w	r2, r2, #31
   82be0:	2001      	movs	r0, #1
   82be2:	fa00 f202 	lsl.w	r2, r0, r2
   82be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82bea:	bf00      	nop
   82bec:	370c      	adds	r7, #12
   82bee:	46bd      	mov	sp, r7
   82bf0:	bc80      	pop	{r7}
   82bf2:	4770      	bx	lr
   82bf4:	e000e100 	.word	0xe000e100

00082bf8 <NVIC_DisableIRQ>:
{
   82bf8:	b480      	push	{r7}
   82bfa:	b083      	sub	sp, #12
   82bfc:	af00      	add	r7, sp, #0
   82bfe:	4603      	mov	r3, r0
   82c00:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82c02:	4909      	ldr	r1, [pc, #36]	; (82c28 <NVIC_DisableIRQ+0x30>)
   82c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82c08:	095b      	lsrs	r3, r3, #5
   82c0a:	79fa      	ldrb	r2, [r7, #7]
   82c0c:	f002 021f 	and.w	r2, r2, #31
   82c10:	2001      	movs	r0, #1
   82c12:	fa00 f202 	lsl.w	r2, r0, r2
   82c16:	3320      	adds	r3, #32
   82c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82c1c:	bf00      	nop
   82c1e:	370c      	adds	r7, #12
   82c20:	46bd      	mov	sp, r7
   82c22:	bc80      	pop	{r7}
   82c24:	4770      	bx	lr
   82c26:	bf00      	nop
   82c28:	e000e100 	.word	0xe000e100

00082c2c <NVIC_ClearPendingIRQ>:
{
   82c2c:	b480      	push	{r7}
   82c2e:	b083      	sub	sp, #12
   82c30:	af00      	add	r7, sp, #0
   82c32:	4603      	mov	r3, r0
   82c34:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82c36:	4909      	ldr	r1, [pc, #36]	; (82c5c <NVIC_ClearPendingIRQ+0x30>)
   82c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82c3c:	095b      	lsrs	r3, r3, #5
   82c3e:	79fa      	ldrb	r2, [r7, #7]
   82c40:	f002 021f 	and.w	r2, r2, #31
   82c44:	2001      	movs	r0, #1
   82c46:	fa00 f202 	lsl.w	r2, r0, r2
   82c4a:	3360      	adds	r3, #96	; 0x60
   82c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82c50:	bf00      	nop
   82c52:	370c      	adds	r7, #12
   82c54:	46bd      	mov	sp, r7
   82c56:	bc80      	pop	{r7}
   82c58:	4770      	bx	lr
   82c5a:	bf00      	nop
   82c5c:	e000e100 	.word	0xe000e100

00082c60 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   82c60:	b480      	push	{r7}
   82c62:	b083      	sub	sp, #12
   82c64:	af00      	add	r7, sp, #0
   82c66:	4603      	mov	r3, r0
   82c68:	6039      	str	r1, [r7, #0]
   82c6a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   82c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82c70:	2b00      	cmp	r3, #0
   82c72:	da0b      	bge.n	82c8c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   82c74:	490d      	ldr	r1, [pc, #52]	; (82cac <NVIC_SetPriority+0x4c>)
   82c76:	79fb      	ldrb	r3, [r7, #7]
   82c78:	f003 030f 	and.w	r3, r3, #15
   82c7c:	3b04      	subs	r3, #4
   82c7e:	683a      	ldr	r2, [r7, #0]
   82c80:	b2d2      	uxtb	r2, r2
   82c82:	0112      	lsls	r2, r2, #4
   82c84:	b2d2      	uxtb	r2, r2
   82c86:	440b      	add	r3, r1
   82c88:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   82c8a:	e009      	b.n	82ca0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82c8c:	4908      	ldr	r1, [pc, #32]	; (82cb0 <NVIC_SetPriority+0x50>)
   82c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82c92:	683a      	ldr	r2, [r7, #0]
   82c94:	b2d2      	uxtb	r2, r2
   82c96:	0112      	lsls	r2, r2, #4
   82c98:	b2d2      	uxtb	r2, r2
   82c9a:	440b      	add	r3, r1
   82c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   82ca0:	bf00      	nop
   82ca2:	370c      	adds	r7, #12
   82ca4:	46bd      	mov	sp, r7
   82ca6:	bc80      	pop	{r7}
   82ca8:	4770      	bx	lr
   82caa:	bf00      	nop
   82cac:	e000ed00 	.word	0xe000ed00
   82cb0:	e000e100 	.word	0xe000e100

00082cb4 <sysclk_enable_peripheral_clock>:
{
   82cb4:	b580      	push	{r7, lr}
   82cb6:	b082      	sub	sp, #8
   82cb8:	af00      	add	r7, sp, #0
   82cba:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82cbc:	6878      	ldr	r0, [r7, #4]
   82cbe:	4b03      	ldr	r3, [pc, #12]	; (82ccc <sysclk_enable_peripheral_clock+0x18>)
   82cc0:	4798      	blx	r3
}
   82cc2:	bf00      	nop
   82cc4:	3708      	adds	r7, #8
   82cc6:	46bd      	mov	sp, r7
   82cc8:	bd80      	pop	{r7, pc}
   82cca:	bf00      	nop
   82ccc:	00083d3d 	.word	0x00083d3d

00082cd0 <ioport_set_pin_level>:
{
   82cd0:	b480      	push	{r7}
   82cd2:	b08b      	sub	sp, #44	; 0x2c
   82cd4:	af00      	add	r7, sp, #0
   82cd6:	6078      	str	r0, [r7, #4]
   82cd8:	460b      	mov	r3, r1
   82cda:	70fb      	strb	r3, [r7, #3]
   82cdc:	687b      	ldr	r3, [r7, #4]
   82cde:	627b      	str	r3, [r7, #36]	; 0x24
   82ce0:	78fb      	ldrb	r3, [r7, #3]
   82ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82ce8:	61fb      	str	r3, [r7, #28]
   82cea:	69fb      	ldr	r3, [r7, #28]
   82cec:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82cee:	69bb      	ldr	r3, [r7, #24]
   82cf0:	095b      	lsrs	r3, r3, #5
   82cf2:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82cf4:	697b      	ldr	r3, [r7, #20]
   82cf6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82cfa:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82cfe:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82d00:	613b      	str	r3, [r7, #16]
	if (level) {
   82d02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82d06:	2b00      	cmp	r3, #0
   82d08:	d009      	beq.n	82d1e <ioport_set_pin_level+0x4e>
   82d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82d0c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82d0e:	68fb      	ldr	r3, [r7, #12]
   82d10:	f003 031f 	and.w	r3, r3, #31
   82d14:	2201      	movs	r2, #1
   82d16:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82d18:	693b      	ldr	r3, [r7, #16]
   82d1a:	631a      	str	r2, [r3, #48]	; 0x30
}
   82d1c:	e008      	b.n	82d30 <ioport_set_pin_level+0x60>
   82d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82d20:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   82d22:	68bb      	ldr	r3, [r7, #8]
   82d24:	f003 031f 	and.w	r3, r3, #31
   82d28:	2201      	movs	r2, #1
   82d2a:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82d2c:	693b      	ldr	r3, [r7, #16]
   82d2e:	635a      	str	r2, [r3, #52]	; 0x34
   82d30:	bf00      	nop
   82d32:	372c      	adds	r7, #44	; 0x2c
   82d34:	46bd      	mov	sp, r7
   82d36:	bc80      	pop	{r7}
   82d38:	4770      	bx	lr

00082d3a <ioport_get_port_level>:
 * \return Logical levels of the specified pins from the read port, returned as
 * a mask.
 */
static inline ioport_port_mask_t ioport_get_port_level(ioport_pin_t port,
		ioport_port_mask_t mask)
{
   82d3a:	b480      	push	{r7}
   82d3c:	b087      	sub	sp, #28
   82d3e:	af00      	add	r7, sp, #0
   82d40:	6078      	str	r0, [r7, #4]
   82d42:	6039      	str	r1, [r7, #0]
   82d44:	687b      	ldr	r3, [r7, #4]
   82d46:	617b      	str	r3, [r7, #20]
   82d48:	683b      	ldr	r3, [r7, #0]
   82d4a:	613b      	str	r3, [r7, #16]
   82d4c:	697b      	ldr	r3, [r7, #20]
   82d4e:	60fb      	str	r3, [r7, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82d50:	68fb      	ldr	r3, [r7, #12]
   82d52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82d56:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82d5a:	025b      	lsls	r3, r3, #9
}

__always_inline static ioport_port_mask_t arch_ioport_get_port_level(
		ioport_port_t port, ioport_port_mask_t mask)
{
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
   82d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   82d5e:	693b      	ldr	r3, [r7, #16]
   82d60:	4013      	ands	r3, r2
	return arch_ioport_get_port_level(port, mask);
   82d62:	bf00      	nop
}
   82d64:	4618      	mov	r0, r3
   82d66:	371c      	adds	r7, #28
   82d68:	46bd      	mov	sp, r7
   82d6a:	bc80      	pop	{r7}
   82d6c:	4770      	bx	lr
	...

00082d70 <motor_init>:
float CosinMA1 = -0.866025404f;
float CosinMA2 = 0.866025404f;
float CosinMA3 = 0.0f;

void motor_init(void)
{
   82d70:	b5b0      	push	{r4, r5, r7, lr}
   82d72:	af00      	add	r7, sp, #0
    /* Initialize PWM channel for MLeft */
    /* Period is left-aligned */
    g_pwm_channel_MLeft.alignment = PWM_ALIGN_LEFT;
   82d74:	4b5e      	ldr	r3, [pc, #376]	; (82ef0 <motor_init+0x180>)
   82d76:	2200      	movs	r2, #0
   82d78:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MLeft.polarity = PWM_LOW;
   82d7a:	4b5d      	ldr	r3, [pc, #372]	; (82ef0 <motor_init+0x180>)
   82d7c:	2200      	movs	r2, #0
   82d7e:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MLeft.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82d80:	4b5b      	ldr	r3, [pc, #364]	; (82ef0 <motor_init+0x180>)
   82d82:	220b      	movs	r2, #11
   82d84:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MLeft.ul_period = PERIOD_VALUE;
   82d86:	4b5a      	ldr	r3, [pc, #360]	; (82ef0 <motor_init+0x180>)
   82d88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82d8c:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MLeft.ul_duty = INIT_DUTY_VALUE;
   82d8e:	4b58      	ldr	r3, [pc, #352]	; (82ef0 <motor_init+0x180>)
   82d90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82d94:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MLeft.channel = MOTOR_LEFT;
   82d96:	4b56      	ldr	r3, [pc, #344]	; (82ef0 <motor_init+0x180>)
   82d98:	2200      	movs	r2, #0
   82d9a:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MLeft);
   82d9c:	4954      	ldr	r1, [pc, #336]	; (82ef0 <motor_init+0x180>)
   82d9e:	4855      	ldr	r0, [pc, #340]	; (82ef4 <motor_init+0x184>)
   82da0:	4b55      	ldr	r3, [pc, #340]	; (82ef8 <motor_init+0x188>)
   82da2:	4798      	blx	r3


    /* Initialize PWM channel for MRight */
    /* Period is left-aligned */
    g_pwm_channel_MRight.alignment = PWM_ALIGN_LEFT;
   82da4:	4b55      	ldr	r3, [pc, #340]	; (82efc <motor_init+0x18c>)
   82da6:	2200      	movs	r2, #0
   82da8:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MRight.polarity = PWM_LOW;
   82daa:	4b54      	ldr	r3, [pc, #336]	; (82efc <motor_init+0x18c>)
   82dac:	2200      	movs	r2, #0
   82dae:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MRight.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82db0:	4b52      	ldr	r3, [pc, #328]	; (82efc <motor_init+0x18c>)
   82db2:	220b      	movs	r2, #11
   82db4:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MRight.ul_period = PERIOD_VALUE;
   82db6:	4b51      	ldr	r3, [pc, #324]	; (82efc <motor_init+0x18c>)
   82db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82dbc:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MRight.ul_duty = INIT_DUTY_VALUE;
   82dbe:	4b4f      	ldr	r3, [pc, #316]	; (82efc <motor_init+0x18c>)
   82dc0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82dc4:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MRight.channel = MOTOR_RIGHT;
   82dc6:	4b4d      	ldr	r3, [pc, #308]	; (82efc <motor_init+0x18c>)
   82dc8:	2201      	movs	r2, #1
   82dca:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MRight);
   82dcc:	494b      	ldr	r1, [pc, #300]	; (82efc <motor_init+0x18c>)
   82dce:	4849      	ldr	r0, [pc, #292]	; (82ef4 <motor_init+0x184>)
   82dd0:	4b49      	ldr	r3, [pc, #292]	; (82ef8 <motor_init+0x188>)
   82dd2:	4798      	blx	r3


    /* Initialize PWM channel for MBack */
    /* Period is left-aligned */
    g_pwm_channel_MRear.alignment = PWM_ALIGN_LEFT;
   82dd4:	4b4a      	ldr	r3, [pc, #296]	; (82f00 <motor_init+0x190>)
   82dd6:	2200      	movs	r2, #0
   82dd8:	811a      	strh	r2, [r3, #8]
    /* Output waveform starts at a low level */
    g_pwm_channel_MRear.polarity = PWM_LOW;
   82dda:	4b49      	ldr	r3, [pc, #292]	; (82f00 <motor_init+0x190>)
   82ddc:	2200      	movs	r2, #0
   82dde:	729a      	strb	r2, [r3, #10]
    /* Use PWM clock A as source clock */
    g_pwm_channel_MRear.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82de0:	4b47      	ldr	r3, [pc, #284]	; (82f00 <motor_init+0x190>)
   82de2:	220b      	movs	r2, #11
   82de4:	605a      	str	r2, [r3, #4]
    /* Period value of output waveform */
    g_pwm_channel_MRear.ul_period = PERIOD_VALUE;
   82de6:	4b46      	ldr	r3, [pc, #280]	; (82f00 <motor_init+0x190>)
   82de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82dec:	611a      	str	r2, [r3, #16]
    /* Duty cycle value of output waveform */
    g_pwm_channel_MRear.ul_duty = INIT_DUTY_VALUE;
   82dee:	4b44      	ldr	r3, [pc, #272]	; (82f00 <motor_init+0x190>)
   82df0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82df4:	60da      	str	r2, [r3, #12]
    g_pwm_channel_MRear.channel = MOTOR_REAR;
   82df6:	4b42      	ldr	r3, [pc, #264]	; (82f00 <motor_init+0x190>)
   82df8:	2202      	movs	r2, #2
   82dfa:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_MRear);
   82dfc:	4940      	ldr	r1, [pc, #256]	; (82f00 <motor_init+0x190>)
   82dfe:	483d      	ldr	r0, [pc, #244]	; (82ef4 <motor_init+0x184>)
   82e00:	4b3d      	ldr	r3, [pc, #244]	; (82ef8 <motor_init+0x188>)
   82e02:	4798      	blx	r3

    pwm_channel_disable(PWM, MOTOR_LEFT);
   82e04:	2100      	movs	r1, #0
   82e06:	483b      	ldr	r0, [pc, #236]	; (82ef4 <motor_init+0x184>)
   82e08:	4b3e      	ldr	r3, [pc, #248]	; (82f04 <motor_init+0x194>)
   82e0a:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_RIGHT);
   82e0c:	2101      	movs	r1, #1
   82e0e:	4839      	ldr	r0, [pc, #228]	; (82ef4 <motor_init+0x184>)
   82e10:	4b3c      	ldr	r3, [pc, #240]	; (82f04 <motor_init+0x194>)
   82e12:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_REAR);
   82e14:	2102      	movs	r1, #2
   82e16:	4837      	ldr	r0, [pc, #220]	; (82ef4 <motor_init+0x184>)
   82e18:	4b3a      	ldr	r3, [pc, #232]	; (82f04 <motor_init+0x194>)
   82e1a:	4798      	blx	r3

    g_pwm_channel_ENC.alignment = PWM_ALIGN_LEFT;
   82e1c:	4b3a      	ldr	r3, [pc, #232]	; (82f08 <motor_init+0x198>)
   82e1e:	2200      	movs	r2, #0
   82e20:	811a      	strh	r2, [r3, #8]
    g_pwm_channel_ENC.polarity = PWM_LOW;
   82e22:	4b39      	ldr	r3, [pc, #228]	; (82f08 <motor_init+0x198>)
   82e24:	2200      	movs	r2, #0
   82e26:	729a      	strb	r2, [r3, #10]
    g_pwm_channel_ENC.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82e28:	4b37      	ldr	r3, [pc, #220]	; (82f08 <motor_init+0x198>)
   82e2a:	220b      	movs	r2, #11
   82e2c:	605a      	str	r2, [r3, #4]
    g_pwm_channel_ENC.ul_period = 330;
   82e2e:	4b36      	ldr	r3, [pc, #216]	; (82f08 <motor_init+0x198>)
   82e30:	f44f 72a5 	mov.w	r2, #330	; 0x14a
   82e34:	611a      	str	r2, [r3, #16]
    g_pwm_channel_ENC.ul_duty = 165;
   82e36:	4b34      	ldr	r3, [pc, #208]	; (82f08 <motor_init+0x198>)
   82e38:	22a5      	movs	r2, #165	; 0xa5
   82e3a:	60da      	str	r2, [r3, #12]
    g_pwm_channel_ENC.channel = ENC_CLK;
   82e3c:	4b32      	ldr	r3, [pc, #200]	; (82f08 <motor_init+0x198>)
   82e3e:	2204      	movs	r2, #4
   82e40:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &g_pwm_channel_ENC);
   82e42:	4931      	ldr	r1, [pc, #196]	; (82f08 <motor_init+0x198>)
   82e44:	482b      	ldr	r0, [pc, #172]	; (82ef4 <motor_init+0x184>)
   82e46:	4b2c      	ldr	r3, [pc, #176]	; (82ef8 <motor_init+0x188>)
   82e48:	4798      	blx	r3
    pwm_channel_enable(PWM, ENC_CLK);
   82e4a:	2104      	movs	r1, #4
   82e4c:	4829      	ldr	r0, [pc, #164]	; (82ef4 <motor_init+0x184>)
   82e4e:	4b2f      	ldr	r3, [pc, #188]	; (82f0c <motor_init+0x19c>)
   82e50:	4798      	blx	r3

    sysclk_enable_peripheral_clock(ID_TC1);
   82e52:	201c      	movs	r0, #28
   82e54:	4b2e      	ldr	r3, [pc, #184]	; (82f10 <motor_init+0x1a0>)
   82e56:	4798      	blx	r3
    tc_init(TC0, 1, TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_CPCTRG);
   82e58:	f244 0203 	movw	r2, #16387	; 0x4003
   82e5c:	2101      	movs	r1, #1
   82e5e:	482d      	ldr	r0, [pc, #180]	; (82f14 <motor_init+0x1a4>)
   82e60:	4b2d      	ldr	r3, [pc, #180]	; (82f18 <motor_init+0x1a8>)
   82e62:	4798      	blx	r3
    tc_write_rc(TC0, 1, 5249);  //MCLK / 128 * 0,008
   82e64:	f241 4281 	movw	r2, #5249	; 0x1481
   82e68:	2101      	movs	r1, #1
   82e6a:	482a      	ldr	r0, [pc, #168]	; (82f14 <motor_init+0x1a4>)
   82e6c:	4b2b      	ldr	r3, [pc, #172]	; (82f1c <motor_init+0x1ac>)
   82e6e:	4798      	blx	r3
    NVIC_DisableIRQ(TC1_IRQn);
   82e70:	201c      	movs	r0, #28
   82e72:	4b2b      	ldr	r3, [pc, #172]	; (82f20 <motor_init+0x1b0>)
   82e74:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TC1_IRQn);
   82e76:	201c      	movs	r0, #28
   82e78:	4b2a      	ldr	r3, [pc, #168]	; (82f24 <motor_init+0x1b4>)
   82e7a:	4798      	blx	r3
    NVIC_SetPriority(TC1_IRQn, 0);
   82e7c:	2100      	movs	r1, #0
   82e7e:	201c      	movs	r0, #28
   82e80:	4b29      	ldr	r3, [pc, #164]	; (82f28 <motor_init+0x1b8>)
   82e82:	4798      	blx	r3
    NVIC_EnableIRQ(TC1_IRQn);
   82e84:	201c      	movs	r0, #28
   82e86:	4b29      	ldr	r3, [pc, #164]	; (82f2c <motor_init+0x1bc>)
   82e88:	4798      	blx	r3
    tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82e8a:	2210      	movs	r2, #16
   82e8c:	2101      	movs	r1, #1
   82e8e:	4821      	ldr	r0, [pc, #132]	; (82f14 <motor_init+0x1a4>)
   82e90:	4b27      	ldr	r3, [pc, #156]	; (82f30 <motor_init+0x1c0>)
   82e92:	4798      	blx	r3
    tc_start(TC0, 1);
   82e94:	2101      	movs	r1, #1
   82e96:	481f      	ldr	r0, [pc, #124]	; (82f14 <motor_init+0x1a4>)
   82e98:	4b26      	ldr	r3, [pc, #152]	; (82f34 <motor_init+0x1c4>)
   82e9a:	4798      	blx	r3

    mleft_pid_reg.kp = 15.0f;
   82e9c:	4b26      	ldr	r3, [pc, #152]	; (82f38 <motor_init+0x1c8>)
   82e9e:	4a27      	ldr	r2, [pc, #156]	; (82f3c <motor_init+0x1cc>)
   82ea0:	601a      	str	r2, [r3, #0]
    mleft_pid_reg.ki = 10.0f;
   82ea2:	4b25      	ldr	r3, [pc, #148]	; (82f38 <motor_init+0x1c8>)
   82ea4:	4a26      	ldr	r2, [pc, #152]	; (82f40 <motor_init+0x1d0>)
   82ea6:	605a      	str	r2, [r3, #4]
    mleft_pid_reg.kc = 1.0f;
   82ea8:	4b23      	ldr	r3, [pc, #140]	; (82f38 <motor_init+0x1c8>)
   82eaa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   82eae:	609a      	str	r2, [r3, #8]
    mleft_pid_reg.kd = 5.0f;
   82eb0:	4b21      	ldr	r3, [pc, #132]	; (82f38 <motor_init+0x1c8>)
   82eb2:	4a24      	ldr	r2, [pc, #144]	; (82f44 <motor_init+0x1d4>)
   82eb4:	60da      	str	r2, [r3, #12]
    mleft_pid_reg.outMin = -500.0f;
   82eb6:	4b20      	ldr	r3, [pc, #128]	; (82f38 <motor_init+0x1c8>)
   82eb8:	4a23      	ldr	r2, [pc, #140]	; (82f48 <motor_init+0x1d8>)
   82eba:	619a      	str	r2, [r3, #24]
    mleft_pid_reg.outMax = 500.0f;
   82ebc:	4b1e      	ldr	r3, [pc, #120]	; (82f38 <motor_init+0x1c8>)
   82ebe:	4a23      	ldr	r2, [pc, #140]	; (82f4c <motor_init+0x1dc>)
   82ec0:	615a      	str	r2, [r3, #20]

    mright_pid_reg = mleft_pid_reg;
   82ec2:	4a23      	ldr	r2, [pc, #140]	; (82f50 <motor_init+0x1e0>)
   82ec4:	4b1c      	ldr	r3, [pc, #112]	; (82f38 <motor_init+0x1c8>)
   82ec6:	4614      	mov	r4, r2
   82ec8:	461d      	mov	r5, r3
   82eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82ed2:	682b      	ldr	r3, [r5, #0]
   82ed4:	6023      	str	r3, [r4, #0]
    mrear_pid_reg = mleft_pid_reg;
   82ed6:	4a1f      	ldr	r2, [pc, #124]	; (82f54 <motor_init+0x1e4>)
   82ed8:	4b17      	ldr	r3, [pc, #92]	; (82f38 <motor_init+0x1c8>)
   82eda:	4614      	mov	r4, r2
   82edc:	461d      	mov	r5, r3
   82ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82ee6:	682b      	ldr	r3, [r5, #0]
   82ee8:	6023      	str	r3, [r4, #0]
}
   82eea:	bf00      	nop
   82eec:	bdb0      	pop	{r4, r5, r7, pc}
   82eee:	bf00      	nop
   82ef0:	20070e74 	.word	0x20070e74
   82ef4:	40094000 	.word	0x40094000
   82ef8:	00080369 	.word	0x00080369
   82efc:	20070f44 	.word	0x20070f44
   82f00:	20070eec 	.word	0x20070eec
   82f04:	00080615 	.word	0x00080615
   82f08:	20070e9c 	.word	0x20070e9c
   82f0c:	000805f3 	.word	0x000805f3
   82f10:	00082cb5 	.word	0x00082cb5
   82f14:	40080000 	.word	0x40080000
   82f18:	0008074d 	.word	0x0008074d
   82f1c:	000807a5 	.word	0x000807a5
   82f20:	00082bf9 	.word	0x00082bf9
   82f24:	00082c2d 	.word	0x00082c2d
   82f28:	00082c61 	.word	0x00082c61
   82f2c:	00082bc9 	.word	0x00082bc9
   82f30:	000807c9 	.word	0x000807c9
   82f34:	00080785 	.word	0x00080785
   82f38:	20070f6c 	.word	0x20070f6c
   82f3c:	41700000 	.word	0x41700000
   82f40:	41200000 	.word	0x41200000
   82f44:	40a00000 	.word	0x40a00000
   82f48:	c3fa0000 	.word	0xc3fa0000
   82f4c:	43fa0000 	.word	0x43fa0000
   82f50:	20070ec4 	.word	0x20070ec4
   82f54:	20070f14 	.word	0x20070f14

00082f58 <enable_motor>:

void enable_motor(void)
{
   82f58:	b580      	push	{r7, lr}
   82f5a:	af00      	add	r7, sp, #0
    pwm_channel_enable(PWM, MOTOR_LEFT);
   82f5c:	2100      	movs	r1, #0
   82f5e:	480d      	ldr	r0, [pc, #52]	; (82f94 <enable_motor+0x3c>)
   82f60:	4b0d      	ldr	r3, [pc, #52]	; (82f98 <enable_motor+0x40>)
   82f62:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_RIGHT);
   82f64:	2101      	movs	r1, #1
   82f66:	480b      	ldr	r0, [pc, #44]	; (82f94 <enable_motor+0x3c>)
   82f68:	4b0b      	ldr	r3, [pc, #44]	; (82f98 <enable_motor+0x40>)
   82f6a:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_REAR);
   82f6c:	2102      	movs	r1, #2
   82f6e:	4809      	ldr	r0, [pc, #36]	; (82f94 <enable_motor+0x3c>)
   82f70:	4b09      	ldr	r3, [pc, #36]	; (82f98 <enable_motor+0x40>)
   82f72:	4798      	blx	r3

    ioport_set_pin_level(ENC_LOAD, 0);
   82f74:	2100      	movs	r1, #0
   82f76:	2020      	movs	r0, #32
   82f78:	4b08      	ldr	r3, [pc, #32]	; (82f9c <enable_motor+0x44>)
   82f7a:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   82f7c:	2101      	movs	r1, #1
   82f7e:	2020      	movs	r0, #32
   82f80:	4b06      	ldr	r3, [pc, #24]	; (82f9c <enable_motor+0x44>)
   82f82:	4798      	blx	r3

    tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82f84:	2210      	movs	r2, #16
   82f86:	2101      	movs	r1, #1
   82f88:	4805      	ldr	r0, [pc, #20]	; (82fa0 <enable_motor+0x48>)
   82f8a:	4b06      	ldr	r3, [pc, #24]	; (82fa4 <enable_motor+0x4c>)
   82f8c:	4798      	blx	r3
}
   82f8e:	bf00      	nop
   82f90:	bd80      	pop	{r7, pc}
   82f92:	bf00      	nop
   82f94:	40094000 	.word	0x40094000
   82f98:	000805f3 	.word	0x000805f3
   82f9c:	00082cd1 	.word	0x00082cd1
   82fa0:	40080000 	.word	0x40080000
   82fa4:	000807c9 	.word	0x000807c9

00082fa8 <motor_speed>:
        pwm_channel_enable(PWM, ENC_CLK);
    }*/ 
}

void motor_speed(uint8_t motor, int16_t ispeed)
{
   82fa8:	b580      	push	{r7, lr}
   82faa:	b084      	sub	sp, #16
   82fac:	af00      	add	r7, sp, #0
   82fae:	4603      	mov	r3, r0
   82fb0:	460a      	mov	r2, r1
   82fb2:	71fb      	strb	r3, [r7, #7]
   82fb4:	4613      	mov	r3, r2
   82fb6:	80bb      	strh	r3, [r7, #4]
    if (ispeed > 500)
   82fb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82fbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82fc0:	dd02      	ble.n	82fc8 <motor_speed+0x20>
    {
        ispeed = 500;
   82fc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82fc6:	80bb      	strh	r3, [r7, #4]
    }

    if (ispeed < -500)
   82fc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82fcc:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
   82fd0:	da02      	bge.n	82fd8 <motor_speed+0x30>
    {
        ispeed = -500;
   82fd2:	f64f 630c 	movw	r3, #65036	; 0xfe0c
   82fd6:	80bb      	strh	r3, [r7, #4]
    }

    uint16_t duty_cycle = (uint16_t)(ispeed + (int16_t)INIT_DUTY_VALUE);
   82fd8:	88bb      	ldrh	r3, [r7, #4]
   82fda:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   82fde:	81fb      	strh	r3, [r7, #14]

    if (duty_cycle < 10)
   82fe0:	89fb      	ldrh	r3, [r7, #14]
   82fe2:	2b09      	cmp	r3, #9
   82fe4:	d801      	bhi.n	82fea <motor_speed+0x42>
    {
        duty_cycle = 10;
   82fe6:	230a      	movs	r3, #10
   82fe8:	81fb      	strh	r3, [r7, #14]
    }

    if (duty_cycle > 990)
   82fea:	89fb      	ldrh	r3, [r7, #14]
   82fec:	f240 32de 	movw	r2, #990	; 0x3de
   82ff0:	4293      	cmp	r3, r2
   82ff2:	d902      	bls.n	82ffa <motor_speed+0x52>
    {
        duty_cycle = 990;
   82ff4:	f240 33de 	movw	r3, #990	; 0x3de
   82ff8:	81fb      	strh	r3, [r7, #14]
    }

    switch(motor)
   82ffa:	79fb      	ldrb	r3, [r7, #7]
   82ffc:	2b01      	cmp	r3, #1
   82ffe:	d00b      	beq.n	83018 <motor_speed+0x70>
   83000:	2b02      	cmp	r3, #2
   83002:	d010      	beq.n	83026 <motor_speed+0x7e>
   83004:	2b00      	cmp	r3, #0
   83006:	d000      	beq.n	8300a <motor_speed+0x62>
            break;
        case MOTOR_REAR:
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
            break;
        default:
            break;
   83008:	e014      	b.n	83034 <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MLeft, duty_cycle);
   8300a:	89fb      	ldrh	r3, [r7, #14]
   8300c:	461a      	mov	r2, r3
   8300e:	490b      	ldr	r1, [pc, #44]	; (8303c <motor_speed+0x94>)
   83010:	480b      	ldr	r0, [pc, #44]	; (83040 <motor_speed+0x98>)
   83012:	4b0c      	ldr	r3, [pc, #48]	; (83044 <motor_speed+0x9c>)
   83014:	4798      	blx	r3
            break;
   83016:	e00d      	b.n	83034 <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRight, duty_cycle);
   83018:	89fb      	ldrh	r3, [r7, #14]
   8301a:	461a      	mov	r2, r3
   8301c:	490a      	ldr	r1, [pc, #40]	; (83048 <motor_speed+0xa0>)
   8301e:	4808      	ldr	r0, [pc, #32]	; (83040 <motor_speed+0x98>)
   83020:	4b08      	ldr	r3, [pc, #32]	; (83044 <motor_speed+0x9c>)
   83022:	4798      	blx	r3
            break;
   83024:	e006      	b.n	83034 <motor_speed+0x8c>
            pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
   83026:	89fb      	ldrh	r3, [r7, #14]
   83028:	461a      	mov	r2, r3
   8302a:	4908      	ldr	r1, [pc, #32]	; (8304c <motor_speed+0xa4>)
   8302c:	4804      	ldr	r0, [pc, #16]	; (83040 <motor_speed+0x98>)
   8302e:	4b05      	ldr	r3, [pc, #20]	; (83044 <motor_speed+0x9c>)
   83030:	4798      	blx	r3
            break;
   83032:	bf00      	nop
    }
}
   83034:	bf00      	nop
   83036:	3710      	adds	r7, #16
   83038:	46bd      	mov	sp, r7
   8303a:	bd80      	pop	{r7, pc}
   8303c:	20070e74 	.word	0x20070e74
   83040:	40094000 	.word	0x40094000
   83044:	000805af 	.word	0x000805af
   83048:	20070f44 	.word	0x20070f44
   8304c:	20070eec 	.word	0x20070eec

00083050 <TC1_Handler>:

void TC1_Handler(void)
{
   83050:	b590      	push	{r4, r7, lr}
   83052:	b085      	sub	sp, #20
   83054:	af00      	add	r7, sp, #0
    uint32_t PIOC_value;
    int32_t eleft_counts;
    int32_t eright_counts;
    int32_t erear_counts;

    ioport_set_pin_level(LED_M3, 1);
   83056:	2101      	movs	r1, #1
   83058:	2069      	movs	r0, #105	; 0x69
   8305a:	4b50      	ldr	r3, [pc, #320]	; (8319c <TC1_Handler+0x14c>)
   8305c:	4798      	blx	r3

    if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   8305e:	2101      	movs	r1, #1
   83060:	484f      	ldr	r0, [pc, #316]	; (831a0 <TC1_Handler+0x150>)
   83062:	4b50      	ldr	r3, [pc, #320]	; (831a4 <TC1_Handler+0x154>)
   83064:	4798      	blx	r3
   83066:	4603      	mov	r3, r0
   83068:	f003 0310 	and.w	r3, r3, #16
   8306c:	2b10      	cmp	r3, #16
   8306e:	f040 808c 	bne.w	8318a <TC1_Handler+0x13a>
    {
        pwm_channel_disable(PWM, ENC_CLK);
   83072:	2104      	movs	r1, #4
   83074:	484c      	ldr	r0, [pc, #304]	; (831a8 <TC1_Handler+0x158>)
   83076:	4b4d      	ldr	r3, [pc, #308]	; (831ac <TC1_Handler+0x15c>)
   83078:	4798      	blx	r3
        PIOC_value = ioport_get_port_level(IOPORT_PIOC, 0xFFFFFFFF);
   8307a:	f04f 31ff 	mov.w	r1, #4294967295
   8307e:	2002      	movs	r0, #2
   83080:	4b4b      	ldr	r3, [pc, #300]	; (831b0 <TC1_Handler+0x160>)
   83082:	4798      	blx	r3
   83084:	60f8      	str	r0, [r7, #12]
        ioport_set_pin_level(ENC_LOAD, 0);
   83086:	2100      	movs	r1, #0
   83088:	2020      	movs	r0, #32
   8308a:	4b44      	ldr	r3, [pc, #272]	; (8319c <TC1_Handler+0x14c>)
   8308c:	4798      	blx	r3
        ioport_set_pin_level(ENC_LOAD, 1);
   8308e:	2101      	movs	r1, #1
   83090:	2020      	movs	r0, #32
   83092:	4b42      	ldr	r3, [pc, #264]	; (8319c <TC1_Handler+0x14c>)
   83094:	4798      	blx	r3
        pwm_channel_enable(PWM, ENC_CLK);
   83096:	2104      	movs	r1, #4
   83098:	4843      	ldr	r0, [pc, #268]	; (831a8 <TC1_Handler+0x158>)
   8309a:	4b46      	ldr	r3, [pc, #280]	; (831b4 <TC1_Handler+0x164>)
   8309c:	4798      	blx	r3

        eleft_counts = (PIOC_value & 0x7F000000) >> 24;
   8309e:	68fb      	ldr	r3, [r7, #12]
   830a0:	0e1b      	lsrs	r3, r3, #24
   830a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   830a6:	60bb      	str	r3, [r7, #8]
        eleft_counts = (eleft_counts & 0x00000040) ? eleft_counts - 128 : eleft_counts;
   830a8:	68bb      	ldr	r3, [r7, #8]
   830aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
   830ae:	2b00      	cmp	r3, #0
   830b0:	d002      	beq.n	830b8 <TC1_Handler+0x68>
   830b2:	68bb      	ldr	r3, [r7, #8]
   830b4:	3b80      	subs	r3, #128	; 0x80
   830b6:	e000      	b.n	830ba <TC1_Handler+0x6a>
   830b8:	68bb      	ldr	r3, [r7, #8]
   830ba:	60bb      	str	r3, [r7, #8]
        eright_counts = ((PIOC_value & 0x00C00000) >> 17) | ((PIOC_value & 0x001F0000) >> 16);
   830bc:	68fb      	ldr	r3, [r7, #12]
   830be:	0c5b      	lsrs	r3, r3, #17
   830c0:	f003 0260 	and.w	r2, r3, #96	; 0x60
   830c4:	68fb      	ldr	r3, [r7, #12]
   830c6:	0c1b      	lsrs	r3, r3, #16
   830c8:	f003 031f 	and.w	r3, r3, #31
   830cc:	4313      	orrs	r3, r2
   830ce:	607b      	str	r3, [r7, #4]
        eright_counts = (eright_counts & 0x00000040) ? eright_counts - 128 : eright_counts;
   830d0:	687b      	ldr	r3, [r7, #4]
   830d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   830d6:	2b00      	cmp	r3, #0
   830d8:	d002      	beq.n	830e0 <TC1_Handler+0x90>
   830da:	687b      	ldr	r3, [r7, #4]
   830dc:	3b80      	subs	r3, #128	; 0x80
   830de:	e000      	b.n	830e2 <TC1_Handler+0x92>
   830e0:	687b      	ldr	r3, [r7, #4]
   830e2:	607b      	str	r3, [r7, #4]
        erear_counts = ((PIOC_value & 0x0000FC00) >> 9) | ((PIOC_value & 0x00000002) >> 1);
   830e4:	68fb      	ldr	r3, [r7, #12]
   830e6:	0a5b      	lsrs	r3, r3, #9
   830e8:	f003 027e 	and.w	r2, r3, #126	; 0x7e
   830ec:	68fb      	ldr	r3, [r7, #12]
   830ee:	085b      	lsrs	r3, r3, #1
   830f0:	f003 0301 	and.w	r3, r3, #1
   830f4:	4313      	orrs	r3, r2
   830f6:	603b      	str	r3, [r7, #0]
        erear_counts = (erear_counts & 0x00000040) ? erear_counts - 128 : erear_counts;
   830f8:	683b      	ldr	r3, [r7, #0]
   830fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
   830fe:	2b00      	cmp	r3, #0
   83100:	d002      	beq.n	83108 <TC1_Handler+0xb8>
   83102:	683b      	ldr	r3, [r7, #0]
   83104:	3b80      	subs	r3, #128	; 0x80
   83106:	e000      	b.n	8310a <TC1_Handler+0xba>
   83108:	683b      	ldr	r3, [r7, #0]
   8310a:	603b      	str	r3, [r7, #0]

        motor_speed(MOTOR_LEFT, pidReg(&mleft_pid_reg, speed_mleft, (float)eleft_counts));
   8310c:	4b2a      	ldr	r3, [pc, #168]	; (831b8 <TC1_Handler+0x168>)
   8310e:	681c      	ldr	r4, [r3, #0]
   83110:	4b2a      	ldr	r3, [pc, #168]	; (831bc <TC1_Handler+0x16c>)
   83112:	68b8      	ldr	r0, [r7, #8]
   83114:	4798      	blx	r3
   83116:	4603      	mov	r3, r0
   83118:	461a      	mov	r2, r3
   8311a:	4621      	mov	r1, r4
   8311c:	4828      	ldr	r0, [pc, #160]	; (831c0 <TC1_Handler+0x170>)
   8311e:	4b29      	ldr	r3, [pc, #164]	; (831c4 <TC1_Handler+0x174>)
   83120:	4798      	blx	r3
   83122:	4602      	mov	r2, r0
   83124:	4b28      	ldr	r3, [pc, #160]	; (831c8 <TC1_Handler+0x178>)
   83126:	4610      	mov	r0, r2
   83128:	4798      	blx	r3
   8312a:	4603      	mov	r3, r0
   8312c:	b21b      	sxth	r3, r3
   8312e:	4619      	mov	r1, r3
   83130:	2000      	movs	r0, #0
   83132:	4b26      	ldr	r3, [pc, #152]	; (831cc <TC1_Handler+0x17c>)
   83134:	4798      	blx	r3
        motor_speed(MOTOR_RIGHT, pidReg(&mright_pid_reg, speed_mright, (float)eright_counts));
   83136:	4b26      	ldr	r3, [pc, #152]	; (831d0 <TC1_Handler+0x180>)
   83138:	681c      	ldr	r4, [r3, #0]
   8313a:	4b20      	ldr	r3, [pc, #128]	; (831bc <TC1_Handler+0x16c>)
   8313c:	6878      	ldr	r0, [r7, #4]
   8313e:	4798      	blx	r3
   83140:	4603      	mov	r3, r0
   83142:	461a      	mov	r2, r3
   83144:	4621      	mov	r1, r4
   83146:	4823      	ldr	r0, [pc, #140]	; (831d4 <TC1_Handler+0x184>)
   83148:	4b1e      	ldr	r3, [pc, #120]	; (831c4 <TC1_Handler+0x174>)
   8314a:	4798      	blx	r3
   8314c:	4602      	mov	r2, r0
   8314e:	4b1e      	ldr	r3, [pc, #120]	; (831c8 <TC1_Handler+0x178>)
   83150:	4610      	mov	r0, r2
   83152:	4798      	blx	r3
   83154:	4603      	mov	r3, r0
   83156:	b21b      	sxth	r3, r3
   83158:	4619      	mov	r1, r3
   8315a:	2001      	movs	r0, #1
   8315c:	4b1b      	ldr	r3, [pc, #108]	; (831cc <TC1_Handler+0x17c>)
   8315e:	4798      	blx	r3
        motor_speed(MOTOR_REAR, pidReg(&mrear_pid_reg, speed_mrear, (float)erear_counts));
   83160:	4b1d      	ldr	r3, [pc, #116]	; (831d8 <TC1_Handler+0x188>)
   83162:	681c      	ldr	r4, [r3, #0]
   83164:	4b15      	ldr	r3, [pc, #84]	; (831bc <TC1_Handler+0x16c>)
   83166:	6838      	ldr	r0, [r7, #0]
   83168:	4798      	blx	r3
   8316a:	4603      	mov	r3, r0
   8316c:	461a      	mov	r2, r3
   8316e:	4621      	mov	r1, r4
   83170:	481a      	ldr	r0, [pc, #104]	; (831dc <TC1_Handler+0x18c>)
   83172:	4b14      	ldr	r3, [pc, #80]	; (831c4 <TC1_Handler+0x174>)
   83174:	4798      	blx	r3
   83176:	4602      	mov	r2, r0
   83178:	4b13      	ldr	r3, [pc, #76]	; (831c8 <TC1_Handler+0x178>)
   8317a:	4610      	mov	r0, r2
   8317c:	4798      	blx	r3
   8317e:	4603      	mov	r3, r0
   83180:	b21b      	sxth	r3, r3
   83182:	4619      	mov	r1, r3
   83184:	2002      	movs	r0, #2
   83186:	4b11      	ldr	r3, [pc, #68]	; (831cc <TC1_Handler+0x17c>)
   83188:	4798      	blx	r3

        //pwm_channel_enable(PWM, ENC_CLK);
    }

    ioport_set_pin_level(LED_M3, 0);
   8318a:	2100      	movs	r1, #0
   8318c:	2069      	movs	r0, #105	; 0x69
   8318e:	4b03      	ldr	r3, [pc, #12]	; (8319c <TC1_Handler+0x14c>)
   83190:	4798      	blx	r3
}
   83192:	bf00      	nop
   83194:	3714      	adds	r7, #20
   83196:	46bd      	mov	sp, r7
   83198:	bd90      	pop	{r4, r7, pc}
   8319a:	bf00      	nop
   8319c:	00082cd1 	.word	0x00082cd1
   831a0:	40080000 	.word	0x40080000
   831a4:	000807ef 	.word	0x000807ef
   831a8:	40094000 	.word	0x40094000
   831ac:	00080615 	.word	0x00080615
   831b0:	00082d3b 	.word	0x00082d3b
   831b4:	000805f3 	.word	0x000805f3
   831b8:	20070f3c 	.word	0x20070f3c
   831bc:	00085461 	.word	0x00085461
   831c0:	20070f6c 	.word	0x20070f6c
   831c4:	000831e1 	.word	0x000831e1
   831c8:	00085895 	.word	0x00085895
   831cc:	00082fa9 	.word	0x00082fa9
   831d0:	20070ee8 	.word	0x20070ee8
   831d4:	20070ec4 	.word	0x20070ec4
   831d8:	20070fc4 	.word	0x20070fc4
   831dc:	20070f14 	.word	0x20070f14

000831e0 <pidReg>:
/************************************************************************/

#include "pid.h"

float pidReg(pidReg_t* reg, float refer, float act)
{
   831e0:	b590      	push	{r4, r7, lr}
   831e2:	b08b      	sub	sp, #44	; 0x2c
   831e4:	af00      	add	r7, sp, #0
   831e6:	60f8      	str	r0, [r7, #12]
   831e8:	60b9      	str	r1, [r7, #8]
   831ea:	607a      	str	r2, [r7, #4]
    float diff;
    float outPreSat;
    float out;

    // Compute the error
    err = refer - act;
   831ec:	4b3c      	ldr	r3, [pc, #240]	; (832e0 <pidReg+0x100>)
   831ee:	6879      	ldr	r1, [r7, #4]
   831f0:	68b8      	ldr	r0, [r7, #8]
   831f2:	4798      	blx	r3
   831f4:	4603      	mov	r3, r0
   831f6:	623b      	str	r3, [r7, #32]

    // Compute the proportional output
    prop = reg->kp * err;
   831f8:	68fb      	ldr	r3, [r7, #12]
   831fa:	681a      	ldr	r2, [r3, #0]
   831fc:	4b39      	ldr	r3, [pc, #228]	; (832e4 <pidReg+0x104>)
   831fe:	6a39      	ldr	r1, [r7, #32]
   83200:	4610      	mov	r0, r2
   83202:	4798      	blx	r3
   83204:	4603      	mov	r3, r0
   83206:	61fb      	str	r3, [r7, #28]

    // Compute the integral output
    reg->intg = reg->intg + reg->ki * err + reg->kc * reg->satErr;
   83208:	68fb      	ldr	r3, [r7, #12]
   8320a:	691c      	ldr	r4, [r3, #16]
   8320c:	68fb      	ldr	r3, [r7, #12]
   8320e:	685a      	ldr	r2, [r3, #4]
   83210:	4b34      	ldr	r3, [pc, #208]	; (832e4 <pidReg+0x104>)
   83212:	6a39      	ldr	r1, [r7, #32]
   83214:	4610      	mov	r0, r2
   83216:	4798      	blx	r3
   83218:	4603      	mov	r3, r0
   8321a:	461a      	mov	r2, r3
   8321c:	4b32      	ldr	r3, [pc, #200]	; (832e8 <pidReg+0x108>)
   8321e:	4611      	mov	r1, r2
   83220:	4620      	mov	r0, r4
   83222:	4798      	blx	r3
   83224:	4603      	mov	r3, r0
   83226:	461c      	mov	r4, r3
   83228:	68fb      	ldr	r3, [r7, #12]
   8322a:	689a      	ldr	r2, [r3, #8]
   8322c:	68fb      	ldr	r3, [r7, #12]
   8322e:	69d9      	ldr	r1, [r3, #28]
   83230:	4b2c      	ldr	r3, [pc, #176]	; (832e4 <pidReg+0x104>)
   83232:	4610      	mov	r0, r2
   83234:	4798      	blx	r3
   83236:	4603      	mov	r3, r0
   83238:	461a      	mov	r2, r3
   8323a:	4b2b      	ldr	r3, [pc, #172]	; (832e8 <pidReg+0x108>)
   8323c:	4611      	mov	r1, r2
   8323e:	4620      	mov	r0, r4
   83240:	4798      	blx	r3
   83242:	4603      	mov	r3, r0
   83244:	461a      	mov	r2, r3
   83246:	68fb      	ldr	r3, [r7, #12]
   83248:	611a      	str	r2, [r3, #16]

    // Compute the derivative output
    diff = reg->kd * (err - reg->prevErr);
   8324a:	68fb      	ldr	r3, [r7, #12]
   8324c:	68dc      	ldr	r4, [r3, #12]
   8324e:	68fb      	ldr	r3, [r7, #12]
   83250:	6a1a      	ldr	r2, [r3, #32]
   83252:	4b23      	ldr	r3, [pc, #140]	; (832e0 <pidReg+0x100>)
   83254:	4611      	mov	r1, r2
   83256:	6a38      	ldr	r0, [r7, #32]
   83258:	4798      	blx	r3
   8325a:	4603      	mov	r3, r0
   8325c:	461a      	mov	r2, r3
   8325e:	4b21      	ldr	r3, [pc, #132]	; (832e4 <pidReg+0x104>)
   83260:	4611      	mov	r1, r2
   83262:	4620      	mov	r0, r4
   83264:	4798      	blx	r3
   83266:	4603      	mov	r3, r0
   83268:	61bb      	str	r3, [r7, #24]

    // Compute the pre-saturated output
    outPreSat = prop + reg->intg + diff;
   8326a:	68fb      	ldr	r3, [r7, #12]
   8326c:	691a      	ldr	r2, [r3, #16]
   8326e:	4b1e      	ldr	r3, [pc, #120]	; (832e8 <pidReg+0x108>)
   83270:	69f9      	ldr	r1, [r7, #28]
   83272:	4610      	mov	r0, r2
   83274:	4798      	blx	r3
   83276:	4603      	mov	r3, r0
   83278:	461a      	mov	r2, r3
   8327a:	4b1b      	ldr	r3, [pc, #108]	; (832e8 <pidReg+0x108>)
   8327c:	69b9      	ldr	r1, [r7, #24]
   8327e:	4610      	mov	r0, r2
   83280:	4798      	blx	r3
   83282:	4603      	mov	r3, r0
   83284:	617b      	str	r3, [r7, #20]

    // Saturate the output
    if (outPreSat > reg->outMax)
   83286:	68fb      	ldr	r3, [r7, #12]
   83288:	695a      	ldr	r2, [r3, #20]
   8328a:	4b18      	ldr	r3, [pc, #96]	; (832ec <pidReg+0x10c>)
   8328c:	6979      	ldr	r1, [r7, #20]
   8328e:	4610      	mov	r0, r2
   83290:	4798      	blx	r3
   83292:	4603      	mov	r3, r0
   83294:	2b00      	cmp	r3, #0
   83296:	d003      	beq.n	832a0 <pidReg+0xc0>
    {
        out = reg->outMax;
   83298:	68fb      	ldr	r3, [r7, #12]
   8329a:	695b      	ldr	r3, [r3, #20]
   8329c:	627b      	str	r3, [r7, #36]	; 0x24
   8329e:	e00e      	b.n	832be <pidReg+0xde>
    }
    else if (outPreSat < reg->outMin)
   832a0:	68fb      	ldr	r3, [r7, #12]
   832a2:	699a      	ldr	r2, [r3, #24]
   832a4:	4b12      	ldr	r3, [pc, #72]	; (832f0 <pidReg+0x110>)
   832a6:	6979      	ldr	r1, [r7, #20]
   832a8:	4610      	mov	r0, r2
   832aa:	4798      	blx	r3
   832ac:	4603      	mov	r3, r0
   832ae:	2b00      	cmp	r3, #0
   832b0:	d003      	beq.n	832ba <pidReg+0xda>
    {
        out = reg->outMin;
   832b2:	68fb      	ldr	r3, [r7, #12]
   832b4:	699b      	ldr	r3, [r3, #24]
   832b6:	627b      	str	r3, [r7, #36]	; 0x24
   832b8:	e001      	b.n	832be <pidReg+0xde>
    }
    else
    {
        out = outPreSat;
   832ba:	697b      	ldr	r3, [r7, #20]
   832bc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Compute the saturate difference
    reg->satErr = out - outPreSat;
   832be:	4b08      	ldr	r3, [pc, #32]	; (832e0 <pidReg+0x100>)
   832c0:	6979      	ldr	r1, [r7, #20]
   832c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
   832c4:	4798      	blx	r3
   832c6:	4603      	mov	r3, r0
   832c8:	461a      	mov	r2, r3
   832ca:	68fb      	ldr	r3, [r7, #12]
   832cc:	61da      	str	r2, [r3, #28]

    // Keep error for next iteration
    reg->prevErr = err;
   832ce:	68fb      	ldr	r3, [r7, #12]
   832d0:	6a3a      	ldr	r2, [r7, #32]
   832d2:	621a      	str	r2, [r3, #32]

    return out;
   832d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   832d6:	4618      	mov	r0, r3
   832d8:	372c      	adds	r7, #44	; 0x2c
   832da:	46bd      	mov	sp, r7
   832dc:	bd90      	pop	{r4, r7, pc}
   832de:	bf00      	nop
   832e0:	000852f5 	.word	0x000852f5
   832e4:	00085509 	.word	0x00085509
   832e8:	000852f9 	.word	0x000852f9
   832ec:	00085845 	.word	0x00085845
   832f0:	00085881 	.word	0x00085881

000832f4 <ioport_set_pin_level>:
{
   832f4:	b480      	push	{r7}
   832f6:	b08b      	sub	sp, #44	; 0x2c
   832f8:	af00      	add	r7, sp, #0
   832fa:	6078      	str	r0, [r7, #4]
   832fc:	460b      	mov	r3, r1
   832fe:	70fb      	strb	r3, [r7, #3]
   83300:	687b      	ldr	r3, [r7, #4]
   83302:	627b      	str	r3, [r7, #36]	; 0x24
   83304:	78fb      	ldrb	r3, [r7, #3]
   83306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   8330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8330c:	61fb      	str	r3, [r7, #28]
   8330e:	69fb      	ldr	r3, [r7, #28]
   83310:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83312:	69bb      	ldr	r3, [r7, #24]
   83314:	095b      	lsrs	r3, r3, #5
   83316:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83318:	697b      	ldr	r3, [r7, #20]
   8331a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8331e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83322:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83324:	613b      	str	r3, [r7, #16]
	if (level) {
   83326:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8332a:	2b00      	cmp	r3, #0
   8332c:	d009      	beq.n	83342 <ioport_set_pin_level+0x4e>
   8332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83330:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83332:	68fb      	ldr	r3, [r7, #12]
   83334:	f003 031f 	and.w	r3, r3, #31
   83338:	2201      	movs	r2, #1
   8333a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8333c:	693b      	ldr	r3, [r7, #16]
   8333e:	631a      	str	r2, [r3, #48]	; 0x30
}
   83340:	e008      	b.n	83354 <ioport_set_pin_level+0x60>
   83342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83344:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   83346:	68bb      	ldr	r3, [r7, #8]
   83348:	f003 031f 	and.w	r3, r3, #31
   8334c:	2201      	movs	r2, #1
   8334e:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83350:	693b      	ldr	r3, [r7, #16]
   83352:	635a      	str	r2, [r3, #52]	; 0x34
   83354:	bf00      	nop
   83356:	372c      	adds	r7, #44	; 0x2c
   83358:	46bd      	mov	sp, r7
   8335a:	bc80      	pop	{r7}
   8335c:	4770      	bx	lr
	...

00083360 <SysTick_Handler>:
//float battery_voltage = 0;
uint8_t battery_percentage;
uint8_t prev_battery_percentage = 0;

void SysTick_Handler(void)
{
   83360:	b480      	push	{r7}
   83362:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   83364:	4b04      	ldr	r3, [pc, #16]	; (83378 <SysTick_Handler+0x18>)
   83366:	681b      	ldr	r3, [r3, #0]
   83368:	3301      	adds	r3, #1
   8336a:	4a03      	ldr	r2, [pc, #12]	; (83378 <SysTick_Handler+0x18>)
   8336c:	6013      	str	r3, [r2, #0]
}
   8336e:	bf00      	nop
   83370:	46bd      	mov	sp, r7
   83372:	bc80      	pop	{r7}
   83374:	4770      	bx	lr
   83376:	bf00      	nop
   83378:	20070dc8 	.word	0x20070dc8

0008337c <getTicks>:

uint32_t getTicks(void)
{
   8337c:	b480      	push	{r7}
   8337e:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   83380:	4b02      	ldr	r3, [pc, #8]	; (8338c <getTicks+0x10>)
   83382:	681b      	ldr	r3, [r3, #0]
}
   83384:	4618      	mov	r0, r3
   83386:	46bd      	mov	sp, r7
   83388:	bc80      	pop	{r7}
   8338a:	4770      	bx	lr
   8338c:	20070dc8 	.word	0x20070dc8

00083390 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   83390:	b480      	push	{r7}
   83392:	b085      	sub	sp, #20
   83394:	af00      	add	r7, sp, #0
   83396:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   83398:	4b07      	ldr	r3, [pc, #28]	; (833b8 <mdelay+0x28>)
   8339a:	681b      	ldr	r3, [r3, #0]
   8339c:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   8339e:	bf00      	nop
   833a0:	4b05      	ldr	r3, [pc, #20]	; (833b8 <mdelay+0x28>)
   833a2:	681a      	ldr	r2, [r3, #0]
   833a4:	68fb      	ldr	r3, [r7, #12]
   833a6:	1ad2      	subs	r2, r2, r3
   833a8:	687b      	ldr	r3, [r7, #4]
   833aa:	429a      	cmp	r2, r3
   833ac:	d3f8      	bcc.n	833a0 <mdelay+0x10>
}
   833ae:	bf00      	nop
   833b0:	3714      	adds	r7, #20
   833b2:	46bd      	mov	sp, r7
   833b4:	bc80      	pop	{r7}
   833b6:	4770      	bx	lr
   833b8:	20070dc8 	.word	0x20070dc8

000833bc <update_comm>:

void update_comm(void)
{
   833bc:	b580      	push	{r7, lr}
   833be:	af00      	add	r7, sp, #0
    if ((getTicks() - ticks_comm) > 5)
   833c0:	4b0b      	ldr	r3, [pc, #44]	; (833f0 <update_comm+0x34>)
   833c2:	4798      	blx	r3
   833c4:	4602      	mov	r2, r0
   833c6:	4b0b      	ldr	r3, [pc, #44]	; (833f4 <update_comm+0x38>)
   833c8:	681b      	ldr	r3, [r3, #0]
   833ca:	1ad3      	subs	r3, r2, r3
   833cc:	2b05      	cmp	r3, #5
   833ce:	d90d      	bls.n	833ec <update_comm+0x30>
    {
        ticks_comm = getTicks();
   833d0:	4b07      	ldr	r3, [pc, #28]	; (833f0 <update_comm+0x34>)
   833d2:	4798      	blx	r3
   833d4:	4602      	mov	r2, r0
   833d6:	4b07      	ldr	r3, [pc, #28]	; (833f4 <update_comm+0x38>)
   833d8:	601a      	str	r2, [r3, #0]
        
        memcpy(&sens_buf, &mts, sizeof(mts));
   833da:	4b07      	ldr	r3, [pc, #28]	; (833f8 <update_comm+0x3c>)
   833dc:	681b      	ldr	r3, [r3, #0]
   833de:	461a      	mov	r2, r3
   833e0:	4b06      	ldr	r3, [pc, #24]	; (833fc <update_comm+0x40>)
   833e2:	601a      	str	r2, [r3, #0]
        spi_master_transfer(&sens_buf, sizeof(sens_buf));
   833e4:	2103      	movs	r1, #3
   833e6:	4805      	ldr	r0, [pc, #20]	; (833fc <update_comm+0x40>)
   833e8:	4b05      	ldr	r3, [pc, #20]	; (83400 <update_comm+0x44>)
   833ea:	4798      	blx	r3
    }
}
   833ec:	bf00      	nop
   833ee:	bd80      	pop	{r7, pc}
   833f0:	0008337d 	.word	0x0008337d
   833f4:	20070e28 	.word	0x20070e28
   833f8:	20070e1c 	.word	0x20070e1c
   833fc:	20070e0c 	.word	0x20070e0c
   83400:	00080d69 	.word	0x00080d69

00083404 <update_battery>:

void update_battery(Bool update_forced)
{
   83404:	b580      	push	{r7, lr}
   83406:	b084      	sub	sp, #16
   83408:	af00      	add	r7, sp, #0
   8340a:	4603      	mov	r3, r0
   8340c:	71fb      	strb	r3, [r7, #7]
    char tmp[6];
    battery_percentage = stm.bat_percentage;
   8340e:	4b20      	ldr	r3, [pc, #128]	; (83490 <update_battery+0x8c>)
   83410:	789a      	ldrb	r2, [r3, #2]
   83412:	4b20      	ldr	r3, [pc, #128]	; (83494 <update_battery+0x90>)
   83414:	701a      	strb	r2, [r3, #0]
    
    if (update_forced || prev_battery_percentage != battery_percentage)
   83416:	79fb      	ldrb	r3, [r7, #7]
   83418:	2b00      	cmp	r3, #0
   8341a:	d105      	bne.n	83428 <update_battery+0x24>
   8341c:	4b1e      	ldr	r3, [pc, #120]	; (83498 <update_battery+0x94>)
   8341e:	781a      	ldrb	r2, [r3, #0]
   83420:	4b1c      	ldr	r3, [pc, #112]	; (83494 <update_battery+0x90>)
   83422:	781b      	ldrb	r3, [r3, #0]
   83424:	429a      	cmp	r2, r3
   83426:	d02f      	beq.n	83488 <update_battery+0x84>
    {
        if (battery_percentage >= 100)
   83428:	4b1a      	ldr	r3, [pc, #104]	; (83494 <update_battery+0x90>)
   8342a:	781b      	ldrb	r3, [r3, #0]
   8342c:	2b63      	cmp	r3, #99	; 0x63
   8342e:	d909      	bls.n	83444 <update_battery+0x40>
        {
            sprintf(tmp, "%3u%%", battery_percentage);
   83430:	4b18      	ldr	r3, [pc, #96]	; (83494 <update_battery+0x90>)
   83432:	781b      	ldrb	r3, [r3, #0]
   83434:	461a      	mov	r2, r3
   83436:	f107 0308 	add.w	r3, r7, #8
   8343a:	4918      	ldr	r1, [pc, #96]	; (8349c <update_battery+0x98>)
   8343c:	4618      	mov	r0, r3
   8343e:	4b18      	ldr	r3, [pc, #96]	; (834a0 <update_battery+0x9c>)
   83440:	4798      	blx	r3
   83442:	e016      	b.n	83472 <update_battery+0x6e>
        }
        else if (battery_percentage >= 10)
   83444:	4b13      	ldr	r3, [pc, #76]	; (83494 <update_battery+0x90>)
   83446:	781b      	ldrb	r3, [r3, #0]
   83448:	2b09      	cmp	r3, #9
   8344a:	d909      	bls.n	83460 <update_battery+0x5c>
        {
            sprintf(tmp, " %2u%%", battery_percentage);
   8344c:	4b11      	ldr	r3, [pc, #68]	; (83494 <update_battery+0x90>)
   8344e:	781b      	ldrb	r3, [r3, #0]
   83450:	461a      	mov	r2, r3
   83452:	f107 0308 	add.w	r3, r7, #8
   83456:	4913      	ldr	r1, [pc, #76]	; (834a4 <update_battery+0xa0>)
   83458:	4618      	mov	r0, r3
   8345a:	4b11      	ldr	r3, [pc, #68]	; (834a0 <update_battery+0x9c>)
   8345c:	4798      	blx	r3
   8345e:	e008      	b.n	83472 <update_battery+0x6e>
        }
        else
        {
            sprintf(tmp, "  %1u%%", battery_percentage);
   83460:	4b0c      	ldr	r3, [pc, #48]	; (83494 <update_battery+0x90>)
   83462:	781b      	ldrb	r3, [r3, #0]
   83464:	461a      	mov	r2, r3
   83466:	f107 0308 	add.w	r3, r7, #8
   8346a:	490f      	ldr	r1, [pc, #60]	; (834a8 <update_battery+0xa4>)
   8346c:	4618      	mov	r0, r3
   8346e:	4b0c      	ldr	r3, [pc, #48]	; (834a0 <update_battery+0x9c>)
   83470:	4798      	blx	r3
        }
            
        lcd_print_s(1, 16, tmp);
   83472:	f107 0308 	add.w	r3, r7, #8
   83476:	461a      	mov	r2, r3
   83478:	2110      	movs	r1, #16
   8347a:	2001      	movs	r0, #1
   8347c:	4b0b      	ldr	r3, [pc, #44]	; (834ac <update_battery+0xa8>)
   8347e:	4798      	blx	r3
        prev_battery_percentage = battery_percentage;
   83480:	4b04      	ldr	r3, [pc, #16]	; (83494 <update_battery+0x90>)
   83482:	781a      	ldrb	r2, [r3, #0]
   83484:	4b04      	ldr	r3, [pc, #16]	; (83498 <update_battery+0x94>)
   83486:	701a      	strb	r2, [r3, #0]
    }
}
   83488:	bf00      	nop
   8348a:	3710      	adds	r7, #16
   8348c:	46bd      	mov	sp, r7
   8348e:	bd80      	pop	{r7, pc}
   83490:	20070e20 	.word	0x20070e20
   83494:	20070fc8 	.word	0x20070fc8
   83498:	20070dcc 	.word	0x20070dcc
   8349c:	00089b78 	.word	0x00089b78
   834a0:	000859cd 	.word	0x000859cd
   834a4:	00089b80 	.word	0x00089b80
   834a8:	00089b88 	.word	0x00089b88
   834ac:	00081a2d 	.word	0x00081a2d

000834b0 <update_heartbeat>:

void update_heartbeat(void)
{
   834b0:	b580      	push	{r7, lr}
   834b2:	af00      	add	r7, sp, #0
    if (heart_state)
   834b4:	4b20      	ldr	r3, [pc, #128]	; (83538 <update_heartbeat+0x88>)
   834b6:	781b      	ldrb	r3, [r3, #0]
   834b8:	2b00      	cmp	r3, #0
   834ba:	d01d      	beq.n	834f8 <update_heartbeat+0x48>
    {
        if (getTicks() >= (ticks_heartbeat + 100))
   834bc:	4b1f      	ldr	r3, [pc, #124]	; (8353c <update_heartbeat+0x8c>)
   834be:	4798      	blx	r3
   834c0:	4602      	mov	r2, r0
   834c2:	4b1f      	ldr	r3, [pc, #124]	; (83540 <update_heartbeat+0x90>)
   834c4:	681b      	ldr	r3, [r3, #0]
   834c6:	3364      	adds	r3, #100	; 0x64
   834c8:	429a      	cmp	r2, r3
   834ca:	d333      	bcc.n	83534 <update_heartbeat+0x84>
        {
            ticks_heartbeat = getTicks();
   834cc:	4b1b      	ldr	r3, [pc, #108]	; (8353c <update_heartbeat+0x8c>)
   834ce:	4798      	blx	r3
   834d0:	4602      	mov	r2, r0
   834d2:	4b1b      	ldr	r3, [pc, #108]	; (83540 <update_heartbeat+0x90>)
   834d4:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 0);
   834d6:	2100      	movs	r1, #0
   834d8:	206a      	movs	r0, #106	; 0x6a
   834da:	4b1a      	ldr	r3, [pc, #104]	; (83544 <update_heartbeat+0x94>)
   834dc:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 0);
   834de:	2100      	movs	r1, #0
   834e0:	2067      	movs	r0, #103	; 0x67
   834e2:	4b18      	ldr	r3, [pc, #96]	; (83544 <update_heartbeat+0x94>)
   834e4:	4798      	blx	r3
            mts.ibit.heartbeat = 0;
   834e6:	4a18      	ldr	r2, [pc, #96]	; (83548 <update_heartbeat+0x98>)
   834e8:	7813      	ldrb	r3, [r2, #0]
   834ea:	f36f 0300 	bfc	r3, #0, #1
   834ee:	7013      	strb	r3, [r2, #0]
            heart_state = 0;
   834f0:	4b11      	ldr	r3, [pc, #68]	; (83538 <update_heartbeat+0x88>)
   834f2:	2200      	movs	r2, #0
   834f4:	701a      	strb	r2, [r3, #0]
            ioport_set_pin_level(LED_M1, 1);
            mts.ibit.heartbeat = 1;
            heart_state = 1;
        }
    }
}
   834f6:	e01d      	b.n	83534 <update_heartbeat+0x84>
        if (getTicks() >= (ticks_heartbeat + 900))
   834f8:	4b10      	ldr	r3, [pc, #64]	; (8353c <update_heartbeat+0x8c>)
   834fa:	4798      	blx	r3
   834fc:	4602      	mov	r2, r0
   834fe:	4b10      	ldr	r3, [pc, #64]	; (83540 <update_heartbeat+0x90>)
   83500:	681b      	ldr	r3, [r3, #0]
   83502:	f503 7361 	add.w	r3, r3, #900	; 0x384
   83506:	429a      	cmp	r2, r3
   83508:	d314      	bcc.n	83534 <update_heartbeat+0x84>
            ticks_heartbeat = getTicks();
   8350a:	4b0c      	ldr	r3, [pc, #48]	; (8353c <update_heartbeat+0x8c>)
   8350c:	4798      	blx	r3
   8350e:	4602      	mov	r2, r0
   83510:	4b0b      	ldr	r3, [pc, #44]	; (83540 <update_heartbeat+0x90>)
   83512:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 1);
   83514:	2101      	movs	r1, #1
   83516:	206a      	movs	r0, #106	; 0x6a
   83518:	4b0a      	ldr	r3, [pc, #40]	; (83544 <update_heartbeat+0x94>)
   8351a:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 1);
   8351c:	2101      	movs	r1, #1
   8351e:	2067      	movs	r0, #103	; 0x67
   83520:	4b08      	ldr	r3, [pc, #32]	; (83544 <update_heartbeat+0x94>)
   83522:	4798      	blx	r3
            mts.ibit.heartbeat = 1;
   83524:	4a08      	ldr	r2, [pc, #32]	; (83548 <update_heartbeat+0x98>)
   83526:	7813      	ldrb	r3, [r2, #0]
   83528:	f043 0301 	orr.w	r3, r3, #1
   8352c:	7013      	strb	r3, [r2, #0]
            heart_state = 1;
   8352e:	4b02      	ldr	r3, [pc, #8]	; (83538 <update_heartbeat+0x88>)
   83530:	2201      	movs	r2, #1
   83532:	701a      	strb	r2, [r3, #0]
}
   83534:	bf00      	nop
   83536:	bd80      	pop	{r7, pc}
   83538:	20070e24 	.word	0x20070e24
   8353c:	0008337d 	.word	0x0008337d
   83540:	20070e34 	.word	0x20070e34
   83544:	000832f5 	.word	0x000832f5
   83548:	20070e1c 	.word	0x20070e1c

0008354c <osc_enable>:
{
   8354c:	b580      	push	{r7, lr}
   8354e:	b082      	sub	sp, #8
   83550:	af00      	add	r7, sp, #0
   83552:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83554:	687b      	ldr	r3, [r7, #4]
   83556:	2b07      	cmp	r3, #7
   83558:	d831      	bhi.n	835be <osc_enable+0x72>
   8355a:	a201      	add	r2, pc, #4	; (adr r2, 83560 <osc_enable+0x14>)
   8355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83560:	000835bd 	.word	0x000835bd
   83564:	00083581 	.word	0x00083581
   83568:	00083589 	.word	0x00083589
   8356c:	00083591 	.word	0x00083591
   83570:	00083599 	.word	0x00083599
   83574:	000835a1 	.word	0x000835a1
   83578:	000835a9 	.word	0x000835a9
   8357c:	000835b3 	.word	0x000835b3
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83580:	2000      	movs	r0, #0
   83582:	4b11      	ldr	r3, [pc, #68]	; (835c8 <osc_enable+0x7c>)
   83584:	4798      	blx	r3
		break;
   83586:	e01a      	b.n	835be <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   83588:	2001      	movs	r0, #1
   8358a:	4b0f      	ldr	r3, [pc, #60]	; (835c8 <osc_enable+0x7c>)
   8358c:	4798      	blx	r3
		break;
   8358e:	e016      	b.n	835be <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83590:	2000      	movs	r0, #0
   83592:	4b0e      	ldr	r3, [pc, #56]	; (835cc <osc_enable+0x80>)
   83594:	4798      	blx	r3
		break;
   83596:	e012      	b.n	835be <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83598:	2010      	movs	r0, #16
   8359a:	4b0c      	ldr	r3, [pc, #48]	; (835cc <osc_enable+0x80>)
   8359c:	4798      	blx	r3
		break;
   8359e:	e00e      	b.n	835be <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   835a0:	2020      	movs	r0, #32
   835a2:	4b0a      	ldr	r3, [pc, #40]	; (835cc <osc_enable+0x80>)
   835a4:	4798      	blx	r3
		break;
   835a6:	e00a      	b.n	835be <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   835a8:	213e      	movs	r1, #62	; 0x3e
   835aa:	2000      	movs	r0, #0
   835ac:	4b08      	ldr	r3, [pc, #32]	; (835d0 <osc_enable+0x84>)
   835ae:	4798      	blx	r3
		break;
   835b0:	e005      	b.n	835be <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   835b2:	213e      	movs	r1, #62	; 0x3e
   835b4:	2001      	movs	r0, #1
   835b6:	4b06      	ldr	r3, [pc, #24]	; (835d0 <osc_enable+0x84>)
   835b8:	4798      	blx	r3
		break;
   835ba:	e000      	b.n	835be <osc_enable+0x72>
		break;
   835bc:	bf00      	nop
}
   835be:	bf00      	nop
   835c0:	3708      	adds	r7, #8
   835c2:	46bd      	mov	sp, r7
   835c4:	bd80      	pop	{r7, pc}
   835c6:	bf00      	nop
   835c8:	00083b89 	.word	0x00083b89
   835cc:	00083bf5 	.word	0x00083bf5
   835d0:	00083c65 	.word	0x00083c65

000835d4 <osc_is_ready>:
{
   835d4:	b580      	push	{r7, lr}
   835d6:	b082      	sub	sp, #8
   835d8:	af00      	add	r7, sp, #0
   835da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   835dc:	687b      	ldr	r3, [r7, #4]
   835de:	2b07      	cmp	r3, #7
   835e0:	d826      	bhi.n	83630 <osc_is_ready+0x5c>
   835e2:	a201      	add	r2, pc, #4	; (adr r2, 835e8 <osc_is_ready+0x14>)
   835e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   835e8:	00083609 	.word	0x00083609
   835ec:	0008360d 	.word	0x0008360d
   835f0:	0008360d 	.word	0x0008360d
   835f4:	0008361f 	.word	0x0008361f
   835f8:	0008361f 	.word	0x0008361f
   835fc:	0008361f 	.word	0x0008361f
   83600:	0008361f 	.word	0x0008361f
   83604:	0008361f 	.word	0x0008361f
		return 1;
   83608:	2301      	movs	r3, #1
   8360a:	e012      	b.n	83632 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   8360c:	4b0b      	ldr	r3, [pc, #44]	; (8363c <osc_is_ready+0x68>)
   8360e:	4798      	blx	r3
   83610:	4603      	mov	r3, r0
   83612:	2b00      	cmp	r3, #0
   83614:	bf14      	ite	ne
   83616:	2301      	movne	r3, #1
   83618:	2300      	moveq	r3, #0
   8361a:	b2db      	uxtb	r3, r3
   8361c:	e009      	b.n	83632 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   8361e:	4b08      	ldr	r3, [pc, #32]	; (83640 <osc_is_ready+0x6c>)
   83620:	4798      	blx	r3
   83622:	4603      	mov	r3, r0
   83624:	2b00      	cmp	r3, #0
   83626:	bf14      	ite	ne
   83628:	2301      	movne	r3, #1
   8362a:	2300      	moveq	r3, #0
   8362c:	b2db      	uxtb	r3, r3
   8362e:	e000      	b.n	83632 <osc_is_ready+0x5e>
	return 0;
   83630:	2300      	movs	r3, #0
}
   83632:	4618      	mov	r0, r3
   83634:	3708      	adds	r7, #8
   83636:	46bd      	mov	sp, r7
   83638:	bd80      	pop	{r7, pc}
   8363a:	bf00      	nop
   8363c:	00083bc1 	.word	0x00083bc1
   83640:	00083cdd 	.word	0x00083cdd

00083644 <osc_get_rate>:
{
   83644:	b480      	push	{r7}
   83646:	b083      	sub	sp, #12
   83648:	af00      	add	r7, sp, #0
   8364a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8364c:	687b      	ldr	r3, [r7, #4]
   8364e:	2b07      	cmp	r3, #7
   83650:	d825      	bhi.n	8369e <osc_get_rate+0x5a>
   83652:	a201      	add	r2, pc, #4	; (adr r2, 83658 <osc_get_rate+0x14>)
   83654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83658:	00083679 	.word	0x00083679
   8365c:	0008367f 	.word	0x0008367f
   83660:	00083685 	.word	0x00083685
   83664:	0008368b 	.word	0x0008368b
   83668:	0008368f 	.word	0x0008368f
   8366c:	00083693 	.word	0x00083693
   83670:	00083697 	.word	0x00083697
   83674:	0008369b 	.word	0x0008369b
		return OSC_SLCK_32K_RC_HZ;
   83678:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8367c:	e010      	b.n	836a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8367e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83682:	e00d      	b.n	836a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   83684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83688:	e00a      	b.n	836a0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   8368a:	4b08      	ldr	r3, [pc, #32]	; (836ac <osc_get_rate+0x68>)
   8368c:	e008      	b.n	836a0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8368e:	4b08      	ldr	r3, [pc, #32]	; (836b0 <osc_get_rate+0x6c>)
   83690:	e006      	b.n	836a0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   83692:	4b08      	ldr	r3, [pc, #32]	; (836b4 <osc_get_rate+0x70>)
   83694:	e004      	b.n	836a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   83696:	4b07      	ldr	r3, [pc, #28]	; (836b4 <osc_get_rate+0x70>)
   83698:	e002      	b.n	836a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   8369a:	4b06      	ldr	r3, [pc, #24]	; (836b4 <osc_get_rate+0x70>)
   8369c:	e000      	b.n	836a0 <osc_get_rate+0x5c>
	return 0;
   8369e:	2300      	movs	r3, #0
}
   836a0:	4618      	mov	r0, r3
   836a2:	370c      	adds	r7, #12
   836a4:	46bd      	mov	sp, r7
   836a6:	bc80      	pop	{r7}
   836a8:	4770      	bx	lr
   836aa:	bf00      	nop
   836ac:	003d0900 	.word	0x003d0900
   836b0:	007a1200 	.word	0x007a1200
   836b4:	00b71b00 	.word	0x00b71b00

000836b8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   836b8:	b580      	push	{r7, lr}
   836ba:	b082      	sub	sp, #8
   836bc:	af00      	add	r7, sp, #0
   836be:	4603      	mov	r3, r0
   836c0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   836c2:	bf00      	nop
   836c4:	79fb      	ldrb	r3, [r7, #7]
   836c6:	4618      	mov	r0, r3
   836c8:	4b05      	ldr	r3, [pc, #20]	; (836e0 <osc_wait_ready+0x28>)
   836ca:	4798      	blx	r3
   836cc:	4603      	mov	r3, r0
   836ce:	f083 0301 	eor.w	r3, r3, #1
   836d2:	b2db      	uxtb	r3, r3
   836d4:	2b00      	cmp	r3, #0
   836d6:	d1f5      	bne.n	836c4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   836d8:	bf00      	nop
   836da:	3708      	adds	r7, #8
   836dc:	46bd      	mov	sp, r7
   836de:	bd80      	pop	{r7, pc}
   836e0:	000835d5 	.word	0x000835d5

000836e4 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   836e4:	b580      	push	{r7, lr}
   836e6:	b086      	sub	sp, #24
   836e8:	af00      	add	r7, sp, #0
   836ea:	60f8      	str	r0, [r7, #12]
   836ec:	607a      	str	r2, [r7, #4]
   836ee:	603b      	str	r3, [r7, #0]
   836f0:	460b      	mov	r3, r1
   836f2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   836f4:	687b      	ldr	r3, [r7, #4]
   836f6:	2b00      	cmp	r3, #0
   836f8:	d107      	bne.n	8370a <pll_config_init+0x26>
   836fa:	683b      	ldr	r3, [r7, #0]
   836fc:	2b00      	cmp	r3, #0
   836fe:	d104      	bne.n	8370a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   83700:	68fb      	ldr	r3, [r7, #12]
   83702:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   83706:	601a      	str	r2, [r3, #0]
   83708:	e019      	b.n	8373e <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8370a:	7afb      	ldrb	r3, [r7, #11]
   8370c:	4618      	mov	r0, r3
   8370e:	4b0e      	ldr	r3, [pc, #56]	; (83748 <pll_config_init+0x64>)
   83710:	4798      	blx	r3
   83712:	4602      	mov	r2, r0
   83714:	687b      	ldr	r3, [r7, #4]
   83716:	fbb2 f3f3 	udiv	r3, r2, r3
   8371a:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   8371c:	697b      	ldr	r3, [r7, #20]
   8371e:	683a      	ldr	r2, [r7, #0]
   83720:	fb02 f303 	mul.w	r3, r2, r3
   83724:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   83726:	683b      	ldr	r3, [r7, #0]
   83728:	3b01      	subs	r3, #1
   8372a:	041a      	lsls	r2, r3, #16
   8372c:	4b07      	ldr	r3, [pc, #28]	; (8374c <pll_config_init+0x68>)
   8372e:	4013      	ands	r3, r2
   83730:	687a      	ldr	r2, [r7, #4]
   83732:	b2d2      	uxtb	r2, r2
   83734:	4313      	orrs	r3, r2
   83736:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8373a:	68fb      	ldr	r3, [r7, #12]
   8373c:	601a      	str	r2, [r3, #0]
	}
}
   8373e:	bf00      	nop
   83740:	3718      	adds	r7, #24
   83742:	46bd      	mov	sp, r7
   83744:	bd80      	pop	{r7, pc}
   83746:	bf00      	nop
   83748:	00083645 	.word	0x00083645
   8374c:	07ff0000 	.word	0x07ff0000

00083750 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   83750:	b580      	push	{r7, lr}
   83752:	b082      	sub	sp, #8
   83754:	af00      	add	r7, sp, #0
   83756:	6078      	str	r0, [r7, #4]
   83758:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8375a:	683b      	ldr	r3, [r7, #0]
   8375c:	2b00      	cmp	r3, #0
   8375e:	d108      	bne.n	83772 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83760:	4b09      	ldr	r3, [pc, #36]	; (83788 <pll_enable+0x38>)
   83762:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83764:	4a09      	ldr	r2, [pc, #36]	; (8378c <pll_enable+0x3c>)
   83766:	687b      	ldr	r3, [r7, #4]
   83768:	681b      	ldr	r3, [r3, #0]
   8376a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8376e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   83770:	e005      	b.n	8377e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   83772:	4a06      	ldr	r2, [pc, #24]	; (8378c <pll_enable+0x3c>)
   83774:	687b      	ldr	r3, [r7, #4]
   83776:	681b      	ldr	r3, [r3, #0]
   83778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8377c:	61d3      	str	r3, [r2, #28]
}
   8377e:	bf00      	nop
   83780:	3708      	adds	r7, #8
   83782:	46bd      	mov	sp, r7
   83784:	bd80      	pop	{r7, pc}
   83786:	bf00      	nop
   83788:	00083cf5 	.word	0x00083cf5
   8378c:	400e0600 	.word	0x400e0600

00083790 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   83790:	b580      	push	{r7, lr}
   83792:	b082      	sub	sp, #8
   83794:	af00      	add	r7, sp, #0
   83796:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   83798:	687b      	ldr	r3, [r7, #4]
   8379a:	2b00      	cmp	r3, #0
   8379c:	d103      	bne.n	837a6 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8379e:	4b05      	ldr	r3, [pc, #20]	; (837b4 <pll_is_locked+0x24>)
   837a0:	4798      	blx	r3
   837a2:	4603      	mov	r3, r0
   837a4:	e002      	b.n	837ac <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   837a6:	4b04      	ldr	r3, [pc, #16]	; (837b8 <pll_is_locked+0x28>)
   837a8:	4798      	blx	r3
   837aa:	4603      	mov	r3, r0
	}
}
   837ac:	4618      	mov	r0, r3
   837ae:	3708      	adds	r7, #8
   837b0:	46bd      	mov	sp, r7
   837b2:	bd80      	pop	{r7, pc}
   837b4:	00083d0d 	.word	0x00083d0d
   837b8:	00083d25 	.word	0x00083d25

000837bc <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   837bc:	b580      	push	{r7, lr}
   837be:	b082      	sub	sp, #8
   837c0:	af00      	add	r7, sp, #0
   837c2:	4603      	mov	r3, r0
   837c4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   837c6:	79fb      	ldrb	r3, [r7, #7]
   837c8:	3b03      	subs	r3, #3
   837ca:	2b04      	cmp	r3, #4
   837cc:	d808      	bhi.n	837e0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   837ce:	79fb      	ldrb	r3, [r7, #7]
   837d0:	4618      	mov	r0, r3
   837d2:	4b06      	ldr	r3, [pc, #24]	; (837ec <pll_enable_source+0x30>)
   837d4:	4798      	blx	r3
		osc_wait_ready(e_src);
   837d6:	79fb      	ldrb	r3, [r7, #7]
   837d8:	4618      	mov	r0, r3
   837da:	4b05      	ldr	r3, [pc, #20]	; (837f0 <pll_enable_source+0x34>)
   837dc:	4798      	blx	r3
		break;
   837de:	e000      	b.n	837e2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   837e0:	bf00      	nop
	}
}
   837e2:	bf00      	nop
   837e4:	3708      	adds	r7, #8
   837e6:	46bd      	mov	sp, r7
   837e8:	bd80      	pop	{r7, pc}
   837ea:	bf00      	nop
   837ec:	0008354d 	.word	0x0008354d
   837f0:	000836b9 	.word	0x000836b9

000837f4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   837f4:	b580      	push	{r7, lr}
   837f6:	b082      	sub	sp, #8
   837f8:	af00      	add	r7, sp, #0
   837fa:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   837fc:	bf00      	nop
   837fe:	6878      	ldr	r0, [r7, #4]
   83800:	4b04      	ldr	r3, [pc, #16]	; (83814 <pll_wait_for_lock+0x20>)
   83802:	4798      	blx	r3
   83804:	4603      	mov	r3, r0
   83806:	2b00      	cmp	r3, #0
   83808:	d0f9      	beq.n	837fe <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8380a:	2300      	movs	r3, #0
}
   8380c:	4618      	mov	r0, r3
   8380e:	3708      	adds	r7, #8
   83810:	46bd      	mov	sp, r7
   83812:	bd80      	pop	{r7, pc}
   83814:	00083791 	.word	0x00083791

00083818 <sysclk_get_main_hz>:
{
   83818:	b580      	push	{r7, lr}
   8381a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   8381c:	2006      	movs	r0, #6
   8381e:	4b04      	ldr	r3, [pc, #16]	; (83830 <sysclk_get_main_hz+0x18>)
   83820:	4798      	blx	r3
   83822:	4602      	mov	r2, r0
   83824:	4613      	mov	r3, r2
   83826:	00db      	lsls	r3, r3, #3
   83828:	1a9b      	subs	r3, r3, r2
   8382a:	005b      	lsls	r3, r3, #1
}
   8382c:	4618      	mov	r0, r3
   8382e:	bd80      	pop	{r7, pc}
   83830:	00083645 	.word	0x00083645

00083834 <sysclk_get_cpu_hz>:
{
   83834:	b580      	push	{r7, lr}
   83836:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83838:	4b02      	ldr	r3, [pc, #8]	; (83844 <sysclk_get_cpu_hz+0x10>)
   8383a:	4798      	blx	r3
   8383c:	4603      	mov	r3, r0
   8383e:	085b      	lsrs	r3, r3, #1
}
   83840:	4618      	mov	r0, r3
   83842:	bd80      	pop	{r7, pc}
   83844:	00083819 	.word	0x00083819

00083848 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   83848:	b590      	push	{r4, r7, lr}
   8384a:	b083      	sub	sp, #12
   8384c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8384e:	4811      	ldr	r0, [pc, #68]	; (83894 <sysclk_init+0x4c>)
   83850:	4b11      	ldr	r3, [pc, #68]	; (83898 <sysclk_init+0x50>)
   83852:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83854:	2006      	movs	r0, #6
   83856:	4b11      	ldr	r3, [pc, #68]	; (8389c <sysclk_init+0x54>)
   83858:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   8385a:	1d38      	adds	r0, r7, #4
   8385c:	230e      	movs	r3, #14
   8385e:	2201      	movs	r2, #1
   83860:	2106      	movs	r1, #6
   83862:	4c0f      	ldr	r4, [pc, #60]	; (838a0 <sysclk_init+0x58>)
   83864:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83866:	1d3b      	adds	r3, r7, #4
   83868:	2100      	movs	r1, #0
   8386a:	4618      	mov	r0, r3
   8386c:	4b0d      	ldr	r3, [pc, #52]	; (838a4 <sysclk_init+0x5c>)
   8386e:	4798      	blx	r3
		pll_wait_for_lock(0);
   83870:	2000      	movs	r0, #0
   83872:	4b0d      	ldr	r3, [pc, #52]	; (838a8 <sysclk_init+0x60>)
   83874:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83876:	2010      	movs	r0, #16
   83878:	4b0c      	ldr	r3, [pc, #48]	; (838ac <sysclk_init+0x64>)
   8387a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8387c:	4b0c      	ldr	r3, [pc, #48]	; (838b0 <sysclk_init+0x68>)
   8387e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83880:	4b0c      	ldr	r3, [pc, #48]	; (838b4 <sysclk_init+0x6c>)
   83882:	4798      	blx	r3
   83884:	4603      	mov	r3, r0
   83886:	4618      	mov	r0, r3
   83888:	4b03      	ldr	r3, [pc, #12]	; (83898 <sysclk_init+0x50>)
   8388a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8388c:	bf00      	nop
   8388e:	370c      	adds	r7, #12
   83890:	46bd      	mov	sp, r7
   83892:	bd90      	pop	{r4, r7, pc}
   83894:	0501bd00 	.word	0x0501bd00
   83898:	200700d1 	.word	0x200700d1
   8389c:	000837bd 	.word	0x000837bd
   838a0:	000836e5 	.word	0x000836e5
   838a4:	00083751 	.word	0x00083751
   838a8:	000837f5 	.word	0x000837f5
   838ac:	00083b09 	.word	0x00083b09
   838b0:	000844d1 	.word	0x000844d1
   838b4:	00083835 	.word	0x00083835

000838b8 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   838b8:	b580      	push	{r7, lr}
   838ba:	b082      	sub	sp, #8
   838bc:	af00      	add	r7, sp, #0
   838be:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   838c0:	6878      	ldr	r0, [r7, #4]
   838c2:	4b03      	ldr	r3, [pc, #12]	; (838d0 <dmac_init+0x18>)
   838c4:	4798      	blx	r3
}
   838c6:	bf00      	nop
   838c8:	3708      	adds	r7, #8
   838ca:	46bd      	mov	sp, r7
   838cc:	bd80      	pop	{r7, pc}
   838ce:	bf00      	nop
   838d0:	00083913 	.word	0x00083913

000838d4 <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   838d4:	b480      	push	{r7}
   838d6:	b083      	sub	sp, #12
   838d8:	af00      	add	r7, sp, #0
   838da:	6078      	str	r0, [r7, #4]
   838dc:	460b      	mov	r3, r1
   838de:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   838e0:	687b      	ldr	r3, [r7, #4]
   838e2:	681b      	ldr	r3, [r3, #0]
   838e4:	f023 0210 	bic.w	r2, r3, #16
   838e8:	78fb      	ldrb	r3, [r7, #3]
   838ea:	431a      	orrs	r2, r3
   838ec:	687b      	ldr	r3, [r7, #4]
   838ee:	601a      	str	r2, [r3, #0]
}
   838f0:	bf00      	nop
   838f2:	370c      	adds	r7, #12
   838f4:	46bd      	mov	sp, r7
   838f6:	bc80      	pop	{r7}
   838f8:	4770      	bx	lr

000838fa <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   838fa:	b480      	push	{r7}
   838fc:	b083      	sub	sp, #12
   838fe:	af00      	add	r7, sp, #0
   83900:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   83902:	687b      	ldr	r3, [r7, #4]
   83904:	2201      	movs	r2, #1
   83906:	605a      	str	r2, [r3, #4]
}
   83908:	bf00      	nop
   8390a:	370c      	adds	r7, #12
   8390c:	46bd      	mov	sp, r7
   8390e:	bc80      	pop	{r7}
   83910:	4770      	bx	lr

00083912 <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   83912:	b480      	push	{r7}
   83914:	b083      	sub	sp, #12
   83916:	af00      	add	r7, sp, #0
   83918:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   8391a:	687b      	ldr	r3, [r7, #4]
   8391c:	685b      	ldr	r3, [r3, #4]
   8391e:	f023 0201 	bic.w	r2, r3, #1
   83922:	687b      	ldr	r3, [r7, #4]
   83924:	605a      	str	r2, [r3, #4]
}
   83926:	bf00      	nop
   83928:	370c      	adds	r7, #12
   8392a:	46bd      	mov	sp, r7
   8392c:	bc80      	pop	{r7}
   8392e:	4770      	bx	lr

00083930 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   83930:	b480      	push	{r7}
   83932:	b083      	sub	sp, #12
   83934:	af00      	add	r7, sp, #0
   83936:	6078      	str	r0, [r7, #4]
   83938:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   8393a:	687b      	ldr	r3, [r7, #4]
   8393c:	683a      	ldr	r2, [r7, #0]
   8393e:	619a      	str	r2, [r3, #24]
}
   83940:	bf00      	nop
   83942:	370c      	adds	r7, #12
   83944:	46bd      	mov	sp, r7
   83946:	bc80      	pop	{r7}
   83948:	4770      	bx	lr

0008394a <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   8394a:	b480      	push	{r7}
   8394c:	b083      	sub	sp, #12
   8394e:	af00      	add	r7, sp, #0
   83950:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   83952:	687b      	ldr	r3, [r7, #4]
   83954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   83956:	4618      	mov	r0, r3
   83958:	370c      	adds	r7, #12
   8395a:	46bd      	mov	sp, r7
   8395c:	bc80      	pop	{r7}
   8395e:	4770      	bx	lr

00083960 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   83960:	b480      	push	{r7}
   83962:	b083      	sub	sp, #12
   83964:	af00      	add	r7, sp, #0
   83966:	6078      	str	r0, [r7, #4]
   83968:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   8396a:	2201      	movs	r2, #1
   8396c:	683b      	ldr	r3, [r7, #0]
   8396e:	409a      	lsls	r2, r3
   83970:	687b      	ldr	r3, [r7, #4]
   83972:	629a      	str	r2, [r3, #40]	; 0x28
}
   83974:	bf00      	nop
   83976:	370c      	adds	r7, #12
   83978:	46bd      	mov	sp, r7
   8397a:	bc80      	pop	{r7}
   8397c:	4770      	bx	lr

0008397e <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   8397e:	b480      	push	{r7}
   83980:	b083      	sub	sp, #12
   83982:	af00      	add	r7, sp, #0
   83984:	6078      	str	r0, [r7, #4]
   83986:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   83988:	2201      	movs	r2, #1
   8398a:	683b      	ldr	r3, [r7, #0]
   8398c:	409a      	lsls	r2, r3
   8398e:	687b      	ldr	r3, [r7, #4]
   83990:	62da      	str	r2, [r3, #44]	; 0x2c
}
   83992:	bf00      	nop
   83994:	370c      	adds	r7, #12
   83996:	46bd      	mov	sp, r7
   83998:	bc80      	pop	{r7}
   8399a:	4770      	bx	lr

0008399c <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   8399c:	b480      	push	{r7}
   8399e:	b085      	sub	sp, #20
   839a0:	af00      	add	r7, sp, #0
   839a2:	60f8      	str	r0, [r7, #12]
   839a4:	60b9      	str	r1, [r7, #8]
   839a6:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   839a8:	68f9      	ldr	r1, [r7, #12]
   839aa:	68ba      	ldr	r2, [r7, #8]
   839ac:	4613      	mov	r3, r2
   839ae:	009b      	lsls	r3, r3, #2
   839b0:	4413      	add	r3, r2
   839b2:	00db      	lsls	r3, r3, #3
   839b4:	440b      	add	r3, r1
   839b6:	333c      	adds	r3, #60	; 0x3c
   839b8:	687a      	ldr	r2, [r7, #4]
   839ba:	601a      	str	r2, [r3, #0]
}
   839bc:	bf00      	nop
   839be:	3714      	adds	r7, #20
   839c0:	46bd      	mov	sp, r7
   839c2:	bc80      	pop	{r7}
   839c4:	4770      	bx	lr

000839c6 <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   839c6:	b480      	push	{r7}
   839c8:	b085      	sub	sp, #20
   839ca:	af00      	add	r7, sp, #0
   839cc:	60f8      	str	r0, [r7, #12]
   839ce:	60b9      	str	r1, [r7, #8]
   839d0:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   839d2:	68f9      	ldr	r1, [r7, #12]
   839d4:	68ba      	ldr	r2, [r7, #8]
   839d6:	4613      	mov	r3, r2
   839d8:	009b      	lsls	r3, r3, #2
   839da:	4413      	add	r3, r2
   839dc:	00db      	lsls	r3, r3, #3
   839de:	440b      	add	r3, r1
   839e0:	3340      	adds	r3, #64	; 0x40
   839e2:	687a      	ldr	r2, [r7, #4]
   839e4:	601a      	str	r2, [r3, #0]
}
   839e6:	bf00      	nop
   839e8:	3714      	adds	r7, #20
   839ea:	46bd      	mov	sp, r7
   839ec:	bc80      	pop	{r7}
   839ee:	4770      	bx	lr

000839f0 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   839f0:	b480      	push	{r7}
   839f2:	b085      	sub	sp, #20
   839f4:	af00      	add	r7, sp, #0
   839f6:	60f8      	str	r0, [r7, #12]
   839f8:	60b9      	str	r1, [r7, #8]
   839fa:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   839fc:	68f9      	ldr	r1, [r7, #12]
   839fe:	68ba      	ldr	r2, [r7, #8]
   83a00:	4613      	mov	r3, r2
   83a02:	009b      	lsls	r3, r3, #2
   83a04:	4413      	add	r3, r2
   83a06:	00db      	lsls	r3, r3, #3
   83a08:	440b      	add	r3, r1
   83a0a:	3344      	adds	r3, #68	; 0x44
   83a0c:	687a      	ldr	r2, [r7, #4]
   83a0e:	601a      	str	r2, [r3, #0]
}
   83a10:	bf00      	nop
   83a12:	3714      	adds	r7, #20
   83a14:	46bd      	mov	sp, r7
   83a16:	bc80      	pop	{r7}
   83a18:	4770      	bx	lr

00083a1a <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   83a1a:	b480      	push	{r7}
   83a1c:	b085      	sub	sp, #20
   83a1e:	af00      	add	r7, sp, #0
   83a20:	60f8      	str	r0, [r7, #12]
   83a22:	60b9      	str	r1, [r7, #8]
   83a24:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   83a26:	68f9      	ldr	r1, [r7, #12]
   83a28:	68ba      	ldr	r2, [r7, #8]
   83a2a:	4613      	mov	r3, r2
   83a2c:	009b      	lsls	r3, r3, #2
   83a2e:	4413      	add	r3, r2
   83a30:	00db      	lsls	r3, r3, #3
   83a32:	440b      	add	r3, r1
   83a34:	3348      	adds	r3, #72	; 0x48
   83a36:	687a      	ldr	r2, [r7, #4]
   83a38:	601a      	str	r2, [r3, #0]
}
   83a3a:	bf00      	nop
   83a3c:	3714      	adds	r7, #20
   83a3e:	46bd      	mov	sp, r7
   83a40:	bc80      	pop	{r7}
   83a42:	4770      	bx	lr

00083a44 <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   83a44:	b480      	push	{r7}
   83a46:	b085      	sub	sp, #20
   83a48:	af00      	add	r7, sp, #0
   83a4a:	60f8      	str	r0, [r7, #12]
   83a4c:	60b9      	str	r1, [r7, #8]
   83a4e:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   83a50:	68f9      	ldr	r1, [r7, #12]
   83a52:	68ba      	ldr	r2, [r7, #8]
   83a54:	4613      	mov	r3, r2
   83a56:	009b      	lsls	r3, r3, #2
   83a58:	4413      	add	r3, r2
   83a5a:	00db      	lsls	r3, r3, #3
   83a5c:	440b      	add	r3, r1
   83a5e:	334c      	adds	r3, #76	; 0x4c
   83a60:	687a      	ldr	r2, [r7, #4]
   83a62:	601a      	str	r2, [r3, #0]
}
   83a64:	bf00      	nop
   83a66:	3714      	adds	r7, #20
   83a68:	46bd      	mov	sp, r7
   83a6a:	bc80      	pop	{r7}
   83a6c:	4770      	bx	lr

00083a6e <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   83a6e:	b480      	push	{r7}
   83a70:	b085      	sub	sp, #20
   83a72:	af00      	add	r7, sp, #0
   83a74:	60f8      	str	r0, [r7, #12]
   83a76:	60b9      	str	r1, [r7, #8]
   83a78:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   83a7a:	68f9      	ldr	r1, [r7, #12]
   83a7c:	68ba      	ldr	r2, [r7, #8]
   83a7e:	4613      	mov	r3, r2
   83a80:	009b      	lsls	r3, r3, #2
   83a82:	4413      	add	r3, r2
   83a84:	00db      	lsls	r3, r3, #3
   83a86:	440b      	add	r3, r1
   83a88:	3350      	adds	r3, #80	; 0x50
   83a8a:	687a      	ldr	r2, [r7, #4]
   83a8c:	601a      	str	r2, [r3, #0]
}
   83a8e:	bf00      	nop
   83a90:	3714      	adds	r7, #20
   83a92:	46bd      	mov	sp, r7
   83a94:	bc80      	pop	{r7}
   83a96:	4770      	bx	lr

00083a98 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   83a98:	b580      	push	{r7, lr}
   83a9a:	b084      	sub	sp, #16
   83a9c:	af00      	add	r7, sp, #0
   83a9e:	60f8      	str	r0, [r7, #12]
   83aa0:	60b9      	str	r1, [r7, #8]
   83aa2:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   83aa4:	68fb      	ldr	r3, [r7, #12]
   83aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   83aa8:	687b      	ldr	r3, [r7, #4]
   83aaa:	681b      	ldr	r3, [r3, #0]
   83aac:	461a      	mov	r2, r3
   83aae:	68b9      	ldr	r1, [r7, #8]
   83ab0:	68f8      	ldr	r0, [r7, #12]
   83ab2:	4b10      	ldr	r3, [pc, #64]	; (83af4 <dmac_channel_single_buf_transfer_init+0x5c>)
   83ab4:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   83ab6:	687b      	ldr	r3, [r7, #4]
   83ab8:	685b      	ldr	r3, [r3, #4]
   83aba:	461a      	mov	r2, r3
   83abc:	68b9      	ldr	r1, [r7, #8]
   83abe:	68f8      	ldr	r0, [r7, #12]
   83ac0:	4b0d      	ldr	r3, [pc, #52]	; (83af8 <dmac_channel_single_buf_transfer_init+0x60>)
   83ac2:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   83ac4:	2200      	movs	r2, #0
   83ac6:	68b9      	ldr	r1, [r7, #8]
   83ac8:	68f8      	ldr	r0, [r7, #12]
   83aca:	4b0c      	ldr	r3, [pc, #48]	; (83afc <dmac_channel_single_buf_transfer_init+0x64>)
   83acc:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   83ace:	687b      	ldr	r3, [r7, #4]
   83ad0:	689b      	ldr	r3, [r3, #8]
   83ad2:	461a      	mov	r2, r3
   83ad4:	68b9      	ldr	r1, [r7, #8]
   83ad6:	68f8      	ldr	r0, [r7, #12]
   83ad8:	4b09      	ldr	r3, [pc, #36]	; (83b00 <dmac_channel_single_buf_transfer_init+0x68>)
   83ada:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   83adc:	687b      	ldr	r3, [r7, #4]
   83ade:	68db      	ldr	r3, [r3, #12]
   83ae0:	461a      	mov	r2, r3
   83ae2:	68b9      	ldr	r1, [r7, #8]
   83ae4:	68f8      	ldr	r0, [r7, #12]
   83ae6:	4b07      	ldr	r3, [pc, #28]	; (83b04 <dmac_channel_single_buf_transfer_init+0x6c>)
   83ae8:	4798      	blx	r3
}
   83aea:	bf00      	nop
   83aec:	3710      	adds	r7, #16
   83aee:	46bd      	mov	sp, r7
   83af0:	bd80      	pop	{r7, pc}
   83af2:	bf00      	nop
   83af4:	0008399d 	.word	0x0008399d
   83af8:	000839c7 	.word	0x000839c7
   83afc:	000839f1 	.word	0x000839f1
   83b00:	00083a1b 	.word	0x00083a1b
   83b04:	00083a45 	.word	0x00083a45

00083b08 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83b08:	b480      	push	{r7}
   83b0a:	b085      	sub	sp, #20
   83b0c:	af00      	add	r7, sp, #0
   83b0e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83b10:	491c      	ldr	r1, [pc, #112]	; (83b84 <pmc_switch_mck_to_pllack+0x7c>)
   83b12:	4b1c      	ldr	r3, [pc, #112]	; (83b84 <pmc_switch_mck_to_pllack+0x7c>)
   83b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83b1a:	687b      	ldr	r3, [r7, #4]
   83b1c:	4313      	orrs	r3, r2
   83b1e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b20:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83b24:	60fb      	str	r3, [r7, #12]
   83b26:	e007      	b.n	83b38 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83b28:	68fb      	ldr	r3, [r7, #12]
   83b2a:	2b00      	cmp	r3, #0
   83b2c:	d101      	bne.n	83b32 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83b2e:	2301      	movs	r3, #1
   83b30:	e023      	b.n	83b7a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83b32:	68fb      	ldr	r3, [r7, #12]
   83b34:	3b01      	subs	r3, #1
   83b36:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b38:	4b12      	ldr	r3, [pc, #72]	; (83b84 <pmc_switch_mck_to_pllack+0x7c>)
   83b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83b3c:	f003 0308 	and.w	r3, r3, #8
   83b40:	2b00      	cmp	r3, #0
   83b42:	d0f1      	beq.n	83b28 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83b44:	4a0f      	ldr	r2, [pc, #60]	; (83b84 <pmc_switch_mck_to_pllack+0x7c>)
   83b46:	4b0f      	ldr	r3, [pc, #60]	; (83b84 <pmc_switch_mck_to_pllack+0x7c>)
   83b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b4a:	f023 0303 	bic.w	r3, r3, #3
   83b4e:	f043 0302 	orr.w	r3, r3, #2
   83b52:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b54:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83b58:	60fb      	str	r3, [r7, #12]
   83b5a:	e007      	b.n	83b6c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83b5c:	68fb      	ldr	r3, [r7, #12]
   83b5e:	2b00      	cmp	r3, #0
   83b60:	d101      	bne.n	83b66 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   83b62:	2301      	movs	r3, #1
   83b64:	e009      	b.n	83b7a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83b66:	68fb      	ldr	r3, [r7, #12]
   83b68:	3b01      	subs	r3, #1
   83b6a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b6c:	4b05      	ldr	r3, [pc, #20]	; (83b84 <pmc_switch_mck_to_pllack+0x7c>)
   83b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83b70:	f003 0308 	and.w	r3, r3, #8
   83b74:	2b00      	cmp	r3, #0
   83b76:	d0f1      	beq.n	83b5c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   83b78:	2300      	movs	r3, #0
}
   83b7a:	4618      	mov	r0, r3
   83b7c:	3714      	adds	r7, #20
   83b7e:	46bd      	mov	sp, r7
   83b80:	bc80      	pop	{r7}
   83b82:	4770      	bx	lr
   83b84:	400e0600 	.word	0x400e0600

00083b88 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   83b88:	b480      	push	{r7}
   83b8a:	b083      	sub	sp, #12
   83b8c:	af00      	add	r7, sp, #0
   83b8e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83b90:	687b      	ldr	r3, [r7, #4]
   83b92:	2b01      	cmp	r3, #1
   83b94:	d107      	bne.n	83ba6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   83b96:	4a08      	ldr	r2, [pc, #32]	; (83bb8 <pmc_switch_sclk_to_32kxtal+0x30>)
   83b98:	4b07      	ldr	r3, [pc, #28]	; (83bb8 <pmc_switch_sclk_to_32kxtal+0x30>)
   83b9a:	689b      	ldr	r3, [r3, #8]
   83b9c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83ba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83ba4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   83ba6:	4b04      	ldr	r3, [pc, #16]	; (83bb8 <pmc_switch_sclk_to_32kxtal+0x30>)
   83ba8:	4a04      	ldr	r2, [pc, #16]	; (83bbc <pmc_switch_sclk_to_32kxtal+0x34>)
   83baa:	601a      	str	r2, [r3, #0]
}
   83bac:	bf00      	nop
   83bae:	370c      	adds	r7, #12
   83bb0:	46bd      	mov	sp, r7
   83bb2:	bc80      	pop	{r7}
   83bb4:	4770      	bx	lr
   83bb6:	bf00      	nop
   83bb8:	400e1a10 	.word	0x400e1a10
   83bbc:	a5000008 	.word	0xa5000008

00083bc0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83bc0:	b480      	push	{r7}
   83bc2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83bc4:	4b09      	ldr	r3, [pc, #36]	; (83bec <pmc_osc_is_ready_32kxtal+0x2c>)
   83bc6:	695b      	ldr	r3, [r3, #20]
   83bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83bcc:	2b00      	cmp	r3, #0
   83bce:	d007      	beq.n	83be0 <pmc_osc_is_ready_32kxtal+0x20>
   83bd0:	4b07      	ldr	r3, [pc, #28]	; (83bf0 <pmc_osc_is_ready_32kxtal+0x30>)
   83bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83bd8:	2b00      	cmp	r3, #0
   83bda:	d001      	beq.n	83be0 <pmc_osc_is_ready_32kxtal+0x20>
   83bdc:	2301      	movs	r3, #1
   83bde:	e000      	b.n	83be2 <pmc_osc_is_ready_32kxtal+0x22>
   83be0:	2300      	movs	r3, #0
}
   83be2:	4618      	mov	r0, r3
   83be4:	46bd      	mov	sp, r7
   83be6:	bc80      	pop	{r7}
   83be8:	4770      	bx	lr
   83bea:	bf00      	nop
   83bec:	400e1a10 	.word	0x400e1a10
   83bf0:	400e0600 	.word	0x400e0600

00083bf4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   83bf4:	b480      	push	{r7}
   83bf6:	b083      	sub	sp, #12
   83bf8:	af00      	add	r7, sp, #0
   83bfa:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   83bfc:	4a18      	ldr	r2, [pc, #96]	; (83c60 <pmc_switch_mainck_to_fastrc+0x6c>)
   83bfe:	4b18      	ldr	r3, [pc, #96]	; (83c60 <pmc_switch_mainck_to_fastrc+0x6c>)
   83c00:	6a1b      	ldr	r3, [r3, #32]
   83c02:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83c06:	f043 0308 	orr.w	r3, r3, #8
   83c0a:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83c0c:	bf00      	nop
   83c0e:	4b14      	ldr	r3, [pc, #80]	; (83c60 <pmc_switch_mainck_to_fastrc+0x6c>)
   83c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83c16:	2b00      	cmp	r3, #0
   83c18:	d0f9      	beq.n	83c0e <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83c1a:	4911      	ldr	r1, [pc, #68]	; (83c60 <pmc_switch_mainck_to_fastrc+0x6c>)
   83c1c:	4b10      	ldr	r3, [pc, #64]	; (83c60 <pmc_switch_mainck_to_fastrc+0x6c>)
   83c1e:	6a1b      	ldr	r3, [r3, #32]
   83c20:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   83c28:	687a      	ldr	r2, [r7, #4]
   83c2a:	4313      	orrs	r3, r2
   83c2c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83c30:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83c32:	bf00      	nop
   83c34:	4b0a      	ldr	r3, [pc, #40]	; (83c60 <pmc_switch_mainck_to_fastrc+0x6c>)
   83c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83c3c:	2b00      	cmp	r3, #0
   83c3e:	d0f9      	beq.n	83c34 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   83c40:	4a07      	ldr	r2, [pc, #28]	; (83c60 <pmc_switch_mainck_to_fastrc+0x6c>)
   83c42:	4b07      	ldr	r3, [pc, #28]	; (83c60 <pmc_switch_mainck_to_fastrc+0x6c>)
   83c44:	6a1b      	ldr	r3, [r3, #32]
   83c46:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   83c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83c4e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83c52:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   83c54:	bf00      	nop
   83c56:	370c      	adds	r7, #12
   83c58:	46bd      	mov	sp, r7
   83c5a:	bc80      	pop	{r7}
   83c5c:	4770      	bx	lr
   83c5e:	bf00      	nop
   83c60:	400e0600 	.word	0x400e0600

00083c64 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   83c64:	b480      	push	{r7}
   83c66:	b083      	sub	sp, #12
   83c68:	af00      	add	r7, sp, #0
   83c6a:	6078      	str	r0, [r7, #4]
   83c6c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83c6e:	687b      	ldr	r3, [r7, #4]
   83c70:	2b00      	cmp	r3, #0
   83c72:	d008      	beq.n	83c86 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83c74:	4916      	ldr	r1, [pc, #88]	; (83cd0 <pmc_switch_mainck_to_xtal+0x6c>)
   83c76:	4b16      	ldr	r3, [pc, #88]	; (83cd0 <pmc_switch_mainck_to_xtal+0x6c>)
   83c78:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83c7a:	4a16      	ldr	r2, [pc, #88]	; (83cd4 <pmc_switch_mainck_to_xtal+0x70>)
   83c7c:	401a      	ands	r2, r3
   83c7e:	4b16      	ldr	r3, [pc, #88]	; (83cd8 <pmc_switch_mainck_to_xtal+0x74>)
   83c80:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83c82:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   83c84:	e01e      	b.n	83cc4 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83c86:	4912      	ldr	r1, [pc, #72]	; (83cd0 <pmc_switch_mainck_to_xtal+0x6c>)
   83c88:	4b11      	ldr	r3, [pc, #68]	; (83cd0 <pmc_switch_mainck_to_xtal+0x6c>)
   83c8a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83c8c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83c90:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83c94:	683a      	ldr	r2, [r7, #0]
   83c96:	0212      	lsls	r2, r2, #8
   83c98:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83c9a:	4313      	orrs	r3, r2
   83c9c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83ca0:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83ca4:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83ca6:	bf00      	nop
   83ca8:	4b09      	ldr	r3, [pc, #36]	; (83cd0 <pmc_switch_mainck_to_xtal+0x6c>)
   83caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83cac:	f003 0301 	and.w	r3, r3, #1
   83cb0:	2b00      	cmp	r3, #0
   83cb2:	d0f9      	beq.n	83ca8 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83cb4:	4a06      	ldr	r2, [pc, #24]	; (83cd0 <pmc_switch_mainck_to_xtal+0x6c>)
   83cb6:	4b06      	ldr	r3, [pc, #24]	; (83cd0 <pmc_switch_mainck_to_xtal+0x6c>)
   83cb8:	6a1b      	ldr	r3, [r3, #32]
   83cba:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83cc2:	6213      	str	r3, [r2, #32]
}
   83cc4:	bf00      	nop
   83cc6:	370c      	adds	r7, #12
   83cc8:	46bd      	mov	sp, r7
   83cca:	bc80      	pop	{r7}
   83ccc:	4770      	bx	lr
   83cce:	bf00      	nop
   83cd0:	400e0600 	.word	0x400e0600
   83cd4:	fec8fffc 	.word	0xfec8fffc
   83cd8:	01370002 	.word	0x01370002

00083cdc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83cdc:	b480      	push	{r7}
   83cde:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83ce0:	4b03      	ldr	r3, [pc, #12]	; (83cf0 <pmc_osc_is_ready_mainck+0x14>)
   83ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83ce8:	4618      	mov	r0, r3
   83cea:	46bd      	mov	sp, r7
   83cec:	bc80      	pop	{r7}
   83cee:	4770      	bx	lr
   83cf0:	400e0600 	.word	0x400e0600

00083cf4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83cf4:	b480      	push	{r7}
   83cf6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83cf8:	4b03      	ldr	r3, [pc, #12]	; (83d08 <pmc_disable_pllack+0x14>)
   83cfa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83cfe:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83d00:	bf00      	nop
   83d02:	46bd      	mov	sp, r7
   83d04:	bc80      	pop	{r7}
   83d06:	4770      	bx	lr
   83d08:	400e0600 	.word	0x400e0600

00083d0c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83d0c:	b480      	push	{r7}
   83d0e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83d10:	4b03      	ldr	r3, [pc, #12]	; (83d20 <pmc_is_locked_pllack+0x14>)
   83d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d14:	f003 0302 	and.w	r3, r3, #2
}
   83d18:	4618      	mov	r0, r3
   83d1a:	46bd      	mov	sp, r7
   83d1c:	bc80      	pop	{r7}
   83d1e:	4770      	bx	lr
   83d20:	400e0600 	.word	0x400e0600

00083d24 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83d24:	b480      	push	{r7}
   83d26:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83d28:	4b03      	ldr	r3, [pc, #12]	; (83d38 <pmc_is_locked_upll+0x14>)
   83d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83d30:	4618      	mov	r0, r3
   83d32:	46bd      	mov	sp, r7
   83d34:	bc80      	pop	{r7}
   83d36:	4770      	bx	lr
   83d38:	400e0600 	.word	0x400e0600

00083d3c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83d3c:	b480      	push	{r7}
   83d3e:	b083      	sub	sp, #12
   83d40:	af00      	add	r7, sp, #0
   83d42:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83d44:	687b      	ldr	r3, [r7, #4]
   83d46:	2b2c      	cmp	r3, #44	; 0x2c
   83d48:	d901      	bls.n	83d4e <pmc_enable_periph_clk+0x12>
		return 1;
   83d4a:	2301      	movs	r3, #1
   83d4c:	e02f      	b.n	83dae <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   83d4e:	687b      	ldr	r3, [r7, #4]
   83d50:	2b1f      	cmp	r3, #31
   83d52:	d813      	bhi.n	83d7c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83d54:	4b18      	ldr	r3, [pc, #96]	; (83db8 <pmc_enable_periph_clk+0x7c>)
   83d56:	699a      	ldr	r2, [r3, #24]
   83d58:	2101      	movs	r1, #1
   83d5a:	687b      	ldr	r3, [r7, #4]
   83d5c:	fa01 f303 	lsl.w	r3, r1, r3
   83d60:	401a      	ands	r2, r3
   83d62:	2101      	movs	r1, #1
   83d64:	687b      	ldr	r3, [r7, #4]
   83d66:	fa01 f303 	lsl.w	r3, r1, r3
   83d6a:	429a      	cmp	r2, r3
   83d6c:	d01e      	beq.n	83dac <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   83d6e:	4a12      	ldr	r2, [pc, #72]	; (83db8 <pmc_enable_periph_clk+0x7c>)
   83d70:	2101      	movs	r1, #1
   83d72:	687b      	ldr	r3, [r7, #4]
   83d74:	fa01 f303 	lsl.w	r3, r1, r3
   83d78:	6113      	str	r3, [r2, #16]
   83d7a:	e017      	b.n	83dac <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   83d7c:	687b      	ldr	r3, [r7, #4]
   83d7e:	3b20      	subs	r3, #32
   83d80:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83d82:	4b0d      	ldr	r3, [pc, #52]	; (83db8 <pmc_enable_periph_clk+0x7c>)
   83d84:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83d88:	2101      	movs	r1, #1
   83d8a:	687b      	ldr	r3, [r7, #4]
   83d8c:	fa01 f303 	lsl.w	r3, r1, r3
   83d90:	401a      	ands	r2, r3
   83d92:	2101      	movs	r1, #1
   83d94:	687b      	ldr	r3, [r7, #4]
   83d96:	fa01 f303 	lsl.w	r3, r1, r3
   83d9a:	429a      	cmp	r2, r3
   83d9c:	d006      	beq.n	83dac <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   83d9e:	4a06      	ldr	r2, [pc, #24]	; (83db8 <pmc_enable_periph_clk+0x7c>)
   83da0:	2101      	movs	r1, #1
   83da2:	687b      	ldr	r3, [r7, #4]
   83da4:	fa01 f303 	lsl.w	r3, r1, r3
   83da8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   83dac:	2300      	movs	r3, #0
}
   83dae:	4618      	mov	r0, r3
   83db0:	370c      	adds	r7, #12
   83db2:	46bd      	mov	sp, r7
   83db4:	bc80      	pop	{r7}
   83db6:	4770      	bx	lr
   83db8:	400e0600 	.word	0x400e0600

00083dbc <osc_get_rate>:
{
   83dbc:	b480      	push	{r7}
   83dbe:	b083      	sub	sp, #12
   83dc0:	af00      	add	r7, sp, #0
   83dc2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83dc4:	687b      	ldr	r3, [r7, #4]
   83dc6:	2b07      	cmp	r3, #7
   83dc8:	d825      	bhi.n	83e16 <osc_get_rate+0x5a>
   83dca:	a201      	add	r2, pc, #4	; (adr r2, 83dd0 <osc_get_rate+0x14>)
   83dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83dd0:	00083df1 	.word	0x00083df1
   83dd4:	00083df7 	.word	0x00083df7
   83dd8:	00083dfd 	.word	0x00083dfd
   83ddc:	00083e03 	.word	0x00083e03
   83de0:	00083e07 	.word	0x00083e07
   83de4:	00083e0b 	.word	0x00083e0b
   83de8:	00083e0f 	.word	0x00083e0f
   83dec:	00083e13 	.word	0x00083e13
		return OSC_SLCK_32K_RC_HZ;
   83df0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83df4:	e010      	b.n	83e18 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   83df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83dfa:	e00d      	b.n	83e18 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   83dfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83e00:	e00a      	b.n	83e18 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   83e02:	4b08      	ldr	r3, [pc, #32]	; (83e24 <osc_get_rate+0x68>)
   83e04:	e008      	b.n	83e18 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   83e06:	4b08      	ldr	r3, [pc, #32]	; (83e28 <osc_get_rate+0x6c>)
   83e08:	e006      	b.n	83e18 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   83e0a:	4b08      	ldr	r3, [pc, #32]	; (83e2c <osc_get_rate+0x70>)
   83e0c:	e004      	b.n	83e18 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   83e0e:	4b07      	ldr	r3, [pc, #28]	; (83e2c <osc_get_rate+0x70>)
   83e10:	e002      	b.n	83e18 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   83e12:	4b06      	ldr	r3, [pc, #24]	; (83e2c <osc_get_rate+0x70>)
   83e14:	e000      	b.n	83e18 <osc_get_rate+0x5c>
	return 0;
   83e16:	2300      	movs	r3, #0
}
   83e18:	4618      	mov	r0, r3
   83e1a:	370c      	adds	r7, #12
   83e1c:	46bd      	mov	sp, r7
   83e1e:	bc80      	pop	{r7}
   83e20:	4770      	bx	lr
   83e22:	bf00      	nop
   83e24:	003d0900 	.word	0x003d0900
   83e28:	007a1200 	.word	0x007a1200
   83e2c:	00b71b00 	.word	0x00b71b00

00083e30 <sysclk_get_main_hz>:
{
   83e30:	b580      	push	{r7, lr}
   83e32:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83e34:	2006      	movs	r0, #6
   83e36:	4b04      	ldr	r3, [pc, #16]	; (83e48 <sysclk_get_main_hz+0x18>)
   83e38:	4798      	blx	r3
   83e3a:	4602      	mov	r2, r0
   83e3c:	4613      	mov	r3, r2
   83e3e:	00db      	lsls	r3, r3, #3
   83e40:	1a9b      	subs	r3, r3, r2
   83e42:	005b      	lsls	r3, r3, #1
}
   83e44:	4618      	mov	r0, r3
   83e46:	bd80      	pop	{r7, pc}
   83e48:	00083dbd 	.word	0x00083dbd

00083e4c <sysclk_get_cpu_hz>:
{
   83e4c:	b580      	push	{r7, lr}
   83e4e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83e50:	4b02      	ldr	r3, [pc, #8]	; (83e5c <sysclk_get_cpu_hz+0x10>)
   83e52:	4798      	blx	r3
   83e54:	4603      	mov	r3, r0
   83e56:	085b      	lsrs	r3, r3, #1
}
   83e58:	4618      	mov	r0, r3
   83e5a:	bd80      	pop	{r7, pc}
   83e5c:	00083e31 	.word	0x00083e31

00083e60 <sysclk_enable_peripheral_clock>:
{
   83e60:	b580      	push	{r7, lr}
   83e62:	b082      	sub	sp, #8
   83e64:	af00      	add	r7, sp, #0
   83e66:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   83e68:	6878      	ldr	r0, [r7, #4]
   83e6a:	4b03      	ldr	r3, [pc, #12]	; (83e78 <sysclk_enable_peripheral_clock+0x18>)
   83e6c:	4798      	blx	r3
}
   83e6e:	bf00      	nop
   83e70:	3708      	adds	r7, #8
   83e72:	46bd      	mov	sp, r7
   83e74:	bd80      	pop	{r7, pc}
   83e76:	bf00      	nop
   83e78:	00083d3d 	.word	0x00083d3d

00083e7c <ioport_init>:
{
   83e7c:	b580      	push	{r7, lr}
   83e7e:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   83e80:	200b      	movs	r0, #11
   83e82:	4b06      	ldr	r3, [pc, #24]	; (83e9c <ioport_init+0x20>)
   83e84:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   83e86:	200c      	movs	r0, #12
   83e88:	4b04      	ldr	r3, [pc, #16]	; (83e9c <ioport_init+0x20>)
   83e8a:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   83e8c:	200d      	movs	r0, #13
   83e8e:	4b03      	ldr	r3, [pc, #12]	; (83e9c <ioport_init+0x20>)
   83e90:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   83e92:	200e      	movs	r0, #14
   83e94:	4b01      	ldr	r3, [pc, #4]	; (83e9c <ioport_init+0x20>)
   83e96:	4798      	blx	r3
}
   83e98:	bf00      	nop
   83e9a:	bd80      	pop	{r7, pc}
   83e9c:	00083e61 	.word	0x00083e61

00083ea0 <ioport_disable_pin>:
{
   83ea0:	b480      	push	{r7}
   83ea2:	b089      	sub	sp, #36	; 0x24
   83ea4:	af00      	add	r7, sp, #0
   83ea6:	6078      	str	r0, [r7, #4]
   83ea8:	687b      	ldr	r3, [r7, #4]
   83eaa:	61fb      	str	r3, [r7, #28]
   83eac:	69fb      	ldr	r3, [r7, #28]
   83eae:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83eb0:	69bb      	ldr	r3, [r7, #24]
   83eb2:	095a      	lsrs	r2, r3, #5
   83eb4:	69fb      	ldr	r3, [r7, #28]
   83eb6:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   83eb8:	697b      	ldr	r3, [r7, #20]
   83eba:	f003 031f 	and.w	r3, r3, #31
   83ebe:	2101      	movs	r1, #1
   83ec0:	fa01 f303 	lsl.w	r3, r1, r3
   83ec4:	613a      	str	r2, [r7, #16]
   83ec6:	60fb      	str	r3, [r7, #12]
   83ec8:	693b      	ldr	r3, [r7, #16]
   83eca:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83ecc:	68bb      	ldr	r3, [r7, #8]
   83ece:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83ed2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83ed6:	025b      	lsls	r3, r3, #9
   83ed8:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   83eda:	68fb      	ldr	r3, [r7, #12]
   83edc:	6053      	str	r3, [r2, #4]
}
   83ede:	bf00      	nop
   83ee0:	3724      	adds	r7, #36	; 0x24
   83ee2:	46bd      	mov	sp, r7
   83ee4:	bc80      	pop	{r7}
   83ee6:	4770      	bx	lr

00083ee8 <ioport_set_pin_mode>:
{
   83ee8:	b480      	push	{r7}
   83eea:	b08d      	sub	sp, #52	; 0x34
   83eec:	af00      	add	r7, sp, #0
   83eee:	6078      	str	r0, [r7, #4]
   83ef0:	6039      	str	r1, [r7, #0]
   83ef2:	687b      	ldr	r3, [r7, #4]
   83ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   83ef6:	683b      	ldr	r3, [r7, #0]
   83ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   83efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83efc:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   83efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83f00:	095a      	lsrs	r2, r3, #5
   83f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83f04:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   83f06:	6a3b      	ldr	r3, [r7, #32]
   83f08:	f003 031f 	and.w	r3, r3, #31
   83f0c:	2101      	movs	r1, #1
   83f0e:	fa01 f303 	lsl.w	r3, r1, r3
   83f12:	61fa      	str	r2, [r7, #28]
   83f14:	61bb      	str	r3, [r7, #24]
   83f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   83f18:	617b      	str	r3, [r7, #20]
   83f1a:	69fb      	ldr	r3, [r7, #28]
   83f1c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83f1e:	693b      	ldr	r3, [r7, #16]
   83f20:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83f24:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83f28:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   83f2a:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   83f2c:	697b      	ldr	r3, [r7, #20]
   83f2e:	f003 0308 	and.w	r3, r3, #8
   83f32:	2b00      	cmp	r3, #0
   83f34:	d003      	beq.n	83f3e <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   83f36:	68fb      	ldr	r3, [r7, #12]
   83f38:	69ba      	ldr	r2, [r7, #24]
   83f3a:	665a      	str	r2, [r3, #100]	; 0x64
   83f3c:	e002      	b.n	83f44 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   83f3e:	68fb      	ldr	r3, [r7, #12]
   83f40:	69ba      	ldr	r2, [r7, #24]
   83f42:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   83f44:	697b      	ldr	r3, [r7, #20]
   83f46:	f003 0320 	and.w	r3, r3, #32
   83f4a:	2b00      	cmp	r3, #0
   83f4c:	d003      	beq.n	83f56 <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   83f4e:	68fb      	ldr	r3, [r7, #12]
   83f50:	69ba      	ldr	r2, [r7, #24]
   83f52:	651a      	str	r2, [r3, #80]	; 0x50
   83f54:	e002      	b.n	83f5c <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   83f56:	68fb      	ldr	r3, [r7, #12]
   83f58:	69ba      	ldr	r2, [r7, #24]
   83f5a:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   83f5c:	697b      	ldr	r3, [r7, #20]
   83f5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   83f62:	2b00      	cmp	r3, #0
   83f64:	d003      	beq.n	83f6e <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   83f66:	68fb      	ldr	r3, [r7, #12]
   83f68:	69ba      	ldr	r2, [r7, #24]
   83f6a:	621a      	str	r2, [r3, #32]
   83f6c:	e002      	b.n	83f74 <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   83f6e:	68fb      	ldr	r3, [r7, #12]
   83f70:	69ba      	ldr	r2, [r7, #24]
   83f72:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   83f74:	697b      	ldr	r3, [r7, #20]
   83f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83f7a:	2b00      	cmp	r3, #0
   83f7c:	d004      	beq.n	83f88 <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   83f7e:	68fb      	ldr	r3, [r7, #12]
   83f80:	69ba      	ldr	r2, [r7, #24]
   83f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   83f86:	e003      	b.n	83f90 <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   83f88:	68fb      	ldr	r3, [r7, #12]
   83f8a:	69ba      	ldr	r2, [r7, #24]
   83f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   83f90:	697b      	ldr	r3, [r7, #20]
   83f92:	f003 0301 	and.w	r3, r3, #1
   83f96:	2b00      	cmp	r3, #0
   83f98:	d006      	beq.n	83fa8 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   83f9a:	68fb      	ldr	r3, [r7, #12]
   83f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83f9e:	69bb      	ldr	r3, [r7, #24]
   83fa0:	431a      	orrs	r2, r3
   83fa2:	68fb      	ldr	r3, [r7, #12]
   83fa4:	671a      	str	r2, [r3, #112]	; 0x70
}
   83fa6:	e006      	b.n	83fb6 <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   83fa8:	68fb      	ldr	r3, [r7, #12]
   83faa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83fac:	69bb      	ldr	r3, [r7, #24]
   83fae:	43db      	mvns	r3, r3
   83fb0:	401a      	ands	r2, r3
   83fb2:	68fb      	ldr	r3, [r7, #12]
   83fb4:	671a      	str	r2, [r3, #112]	; 0x70
   83fb6:	bf00      	nop
   83fb8:	3734      	adds	r7, #52	; 0x34
   83fba:	46bd      	mov	sp, r7
   83fbc:	bc80      	pop	{r7}
   83fbe:	4770      	bx	lr

00083fc0 <ioport_set_pin_dir>:
{
   83fc0:	b480      	push	{r7}
   83fc2:	b08d      	sub	sp, #52	; 0x34
   83fc4:	af00      	add	r7, sp, #0
   83fc6:	6078      	str	r0, [r7, #4]
   83fc8:	460b      	mov	r3, r1
   83fca:	70fb      	strb	r3, [r7, #3]
   83fcc:	687b      	ldr	r3, [r7, #4]
   83fce:	62fb      	str	r3, [r7, #44]	; 0x2c
   83fd0:	78fb      	ldrb	r3, [r7, #3]
   83fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   83fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83fd8:	627b      	str	r3, [r7, #36]	; 0x24
   83fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83fdc:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   83fde:	6a3b      	ldr	r3, [r7, #32]
   83fe0:	095b      	lsrs	r3, r3, #5
   83fe2:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83fe4:	69fb      	ldr	r3, [r7, #28]
   83fe6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83fea:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83fee:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83ff0:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   83ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83ff6:	2b01      	cmp	r3, #1
   83ff8:	d109      	bne.n	8400e <ioport_set_pin_dir+0x4e>
   83ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83ffc:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   83ffe:	697b      	ldr	r3, [r7, #20]
   84000:	f003 031f 	and.w	r3, r3, #31
   84004:	2201      	movs	r2, #1
   84006:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   84008:	69bb      	ldr	r3, [r7, #24]
   8400a:	611a      	str	r2, [r3, #16]
   8400c:	e00c      	b.n	84028 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   8400e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   84012:	2b00      	cmp	r3, #0
   84014:	d108      	bne.n	84028 <ioport_set_pin_dir+0x68>
   84016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   84018:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   8401a:	693b      	ldr	r3, [r7, #16]
   8401c:	f003 031f 	and.w	r3, r3, #31
   84020:	2201      	movs	r2, #1
   84022:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   84024:	69bb      	ldr	r3, [r7, #24]
   84026:	615a      	str	r2, [r3, #20]
   84028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8402a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8402c:	68fb      	ldr	r3, [r7, #12]
   8402e:	f003 031f 	and.w	r3, r3, #31
   84032:	2201      	movs	r2, #1
   84034:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   84036:	69bb      	ldr	r3, [r7, #24]
   84038:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   8403c:	bf00      	nop
   8403e:	3734      	adds	r7, #52	; 0x34
   84040:	46bd      	mov	sp, r7
   84042:	bc80      	pop	{r7}
   84044:	4770      	bx	lr

00084046 <ioport_set_pin_level>:
{
   84046:	b480      	push	{r7}
   84048:	b08b      	sub	sp, #44	; 0x2c
   8404a:	af00      	add	r7, sp, #0
   8404c:	6078      	str	r0, [r7, #4]
   8404e:	460b      	mov	r3, r1
   84050:	70fb      	strb	r3, [r7, #3]
   84052:	687b      	ldr	r3, [r7, #4]
   84054:	627b      	str	r3, [r7, #36]	; 0x24
   84056:	78fb      	ldrb	r3, [r7, #3]
   84058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   8405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8405e:	61fb      	str	r3, [r7, #28]
   84060:	69fb      	ldr	r3, [r7, #28]
   84062:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   84064:	69bb      	ldr	r3, [r7, #24]
   84066:	095b      	lsrs	r3, r3, #5
   84068:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8406a:	697b      	ldr	r3, [r7, #20]
   8406c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84070:	f203 7307 	addw	r3, r3, #1799	; 0x707
   84074:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   84076:	613b      	str	r3, [r7, #16]
	if (level) {
   84078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8407c:	2b00      	cmp	r3, #0
   8407e:	d009      	beq.n	84094 <ioport_set_pin_level+0x4e>
   84080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84082:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   84084:	68fb      	ldr	r3, [r7, #12]
   84086:	f003 031f 	and.w	r3, r3, #31
   8408a:	2201      	movs	r2, #1
   8408c:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8408e:	693b      	ldr	r3, [r7, #16]
   84090:	631a      	str	r2, [r3, #48]	; 0x30
}
   84092:	e008      	b.n	840a6 <ioport_set_pin_level+0x60>
   84094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84096:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   84098:	68bb      	ldr	r3, [r7, #8]
   8409a:	f003 031f 	and.w	r3, r3, #31
   8409e:	2201      	movs	r2, #1
   840a0:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   840a2:	693b      	ldr	r3, [r7, #16]
   840a4:	635a      	str	r2, [r3, #52]	; 0x34
   840a6:	bf00      	nop
   840a8:	372c      	adds	r7, #44	; 0x2c
   840aa:	46bd      	mov	sp, r7
   840ac:	bc80      	pop	{r7}
   840ae:	4770      	bx	lr

000840b0 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   840b0:	b580      	push	{r7, lr}
   840b2:	b084      	sub	sp, #16
   840b4:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   840b6:	4ba6      	ldr	r3, [pc, #664]	; (84350 <board_init+0x2a0>)
   840b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   840bc:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   840be:	4ba5      	ldr	r3, [pc, #660]	; (84354 <board_init+0x2a4>)
   840c0:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   840c2:	2101      	movs	r1, #1
   840c4:	206a      	movs	r0, #106	; 0x6a
   840c6:	4ba4      	ldr	r3, [pc, #656]	; (84358 <board_init+0x2a8>)
   840c8:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   840ca:	2100      	movs	r1, #0
   840cc:	206a      	movs	r0, #106	; 0x6a
   840ce:	4ba3      	ldr	r3, [pc, #652]	; (8435c <board_init+0x2ac>)
   840d0:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   840d2:	2101      	movs	r1, #1
   840d4:	2067      	movs	r0, #103	; 0x67
   840d6:	4ba0      	ldr	r3, [pc, #640]	; (84358 <board_init+0x2a8>)
   840d8:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   840da:	2100      	movs	r1, #0
   840dc:	2067      	movs	r0, #103	; 0x67
   840de:	4b9f      	ldr	r3, [pc, #636]	; (8435c <board_init+0x2ac>)
   840e0:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   840e2:	2101      	movs	r1, #1
   840e4:	2068      	movs	r0, #104	; 0x68
   840e6:	4b9c      	ldr	r3, [pc, #624]	; (84358 <board_init+0x2a8>)
   840e8:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   840ea:	2100      	movs	r1, #0
   840ec:	2068      	movs	r0, #104	; 0x68
   840ee:	4b9b      	ldr	r3, [pc, #620]	; (8435c <board_init+0x2ac>)
   840f0:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   840f2:	2101      	movs	r1, #1
   840f4:	2069      	movs	r0, #105	; 0x69
   840f6:	4b98      	ldr	r3, [pc, #608]	; (84358 <board_init+0x2a8>)
   840f8:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   840fa:	2100      	movs	r1, #0
   840fc:	2069      	movs	r0, #105	; 0x69
   840fe:	4b97      	ldr	r3, [pc, #604]	; (8435c <board_init+0x2ac>)
   84100:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   84102:	2101      	movs	r1, #1
   84104:	2066      	movs	r0, #102	; 0x66
   84106:	4b94      	ldr	r3, [pc, #592]	; (84358 <board_init+0x2a8>)
   84108:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   8410a:	2100      	movs	r1, #0
   8410c:	2066      	movs	r0, #102	; 0x66
   8410e:	4b93      	ldr	r3, [pc, #588]	; (8435c <board_init+0x2ac>)
   84110:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   84112:	2100      	movs	r1, #0
   84114:	2060      	movs	r0, #96	; 0x60
   84116:	4b90      	ldr	r3, [pc, #576]	; (84358 <board_init+0x2a8>)
   84118:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   8411a:	2188      	movs	r1, #136	; 0x88
   8411c:	2060      	movs	r0, #96	; 0x60
   8411e:	4b90      	ldr	r3, [pc, #576]	; (84360 <board_init+0x2b0>)
   84120:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   84122:	2100      	movs	r1, #0
   84124:	2061      	movs	r0, #97	; 0x61
   84126:	4b8c      	ldr	r3, [pc, #560]	; (84358 <board_init+0x2a8>)
   84128:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   8412a:	2188      	movs	r1, #136	; 0x88
   8412c:	2061      	movs	r0, #97	; 0x61
   8412e:	4b8c      	ldr	r3, [pc, #560]	; (84360 <board_init+0x2b0>)
   84130:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   84132:	2100      	movs	r1, #0
   84134:	2062      	movs	r0, #98	; 0x62
   84136:	4b88      	ldr	r3, [pc, #544]	; (84358 <board_init+0x2a8>)
   84138:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   8413a:	2188      	movs	r1, #136	; 0x88
   8413c:	2062      	movs	r0, #98	; 0x62
   8413e:	4b88      	ldr	r3, [pc, #544]	; (84360 <board_init+0x2b0>)
   84140:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   84142:	2100      	movs	r1, #0
   84144:	2063      	movs	r0, #99	; 0x63
   84146:	4b84      	ldr	r3, [pc, #528]	; (84358 <board_init+0x2a8>)
   84148:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   8414a:	2188      	movs	r1, #136	; 0x88
   8414c:	2063      	movs	r0, #99	; 0x63
   8414e:	4b84      	ldr	r3, [pc, #528]	; (84360 <board_init+0x2b0>)
   84150:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   84152:	2100      	movs	r1, #0
   84154:	2064      	movs	r0, #100	; 0x64
   84156:	4b80      	ldr	r3, [pc, #512]	; (84358 <board_init+0x2a8>)
   84158:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   8415a:	2188      	movs	r1, #136	; 0x88
   8415c:	2064      	movs	r0, #100	; 0x64
   8415e:	4b80      	ldr	r3, [pc, #512]	; (84360 <board_init+0x2b0>)
   84160:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   84162:	2100      	movs	r1, #0
   84164:	2065      	movs	r0, #101	; 0x65
   84166:	4b7c      	ldr	r3, [pc, #496]	; (84358 <board_init+0x2a8>)
   84168:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   8416a:	2188      	movs	r1, #136	; 0x88
   8416c:	2065      	movs	r0, #101	; 0x65
   8416e:	4b7c      	ldr	r3, [pc, #496]	; (84360 <board_init+0x2b0>)
   84170:	4798      	blx	r3
  
    /* Configure Motor pins */
    ioport_set_pin_mode(MOTOR_LEFT_L, IOPORT_MODE_MUX_B);
   84172:	2101      	movs	r1, #1
   84174:	2042      	movs	r0, #66	; 0x42
   84176:	4b7a      	ldr	r3, [pc, #488]	; (84360 <board_init+0x2b0>)
   84178:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_L);
   8417a:	2042      	movs	r0, #66	; 0x42
   8417c:	4b79      	ldr	r3, [pc, #484]	; (84364 <board_init+0x2b4>)
   8417e:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_LEFT_H, IOPORT_MODE_MUX_B);
   84180:	2101      	movs	r1, #1
   84182:	2043      	movs	r0, #67	; 0x43
   84184:	4b76      	ldr	r3, [pc, #472]	; (84360 <board_init+0x2b0>)
   84186:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_H);
   84188:	2043      	movs	r0, #67	; 0x43
   8418a:	4b76      	ldr	r3, [pc, #472]	; (84364 <board_init+0x2b4>)
   8418c:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_L, IOPORT_MODE_MUX_B);
   8418e:	2101      	movs	r1, #1
   84190:	2044      	movs	r0, #68	; 0x44
   84192:	4b73      	ldr	r3, [pc, #460]	; (84360 <board_init+0x2b0>)
   84194:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_L);
   84196:	2044      	movs	r0, #68	; 0x44
   84198:	4b72      	ldr	r3, [pc, #456]	; (84364 <board_init+0x2b4>)
   8419a:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_H, IOPORT_MODE_MUX_B);
   8419c:	2101      	movs	r1, #1
   8419e:	2045      	movs	r0, #69	; 0x45
   841a0:	4b6f      	ldr	r3, [pc, #444]	; (84360 <board_init+0x2b0>)
   841a2:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_H);
   841a4:	2045      	movs	r0, #69	; 0x45
   841a6:	4b6f      	ldr	r3, [pc, #444]	; (84364 <board_init+0x2b4>)
   841a8:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_L, IOPORT_MODE_MUX_B);
   841aa:	2101      	movs	r1, #1
   841ac:	2046      	movs	r0, #70	; 0x46
   841ae:	4b6c      	ldr	r3, [pc, #432]	; (84360 <board_init+0x2b0>)
   841b0:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_L);
   841b2:	2046      	movs	r0, #70	; 0x46
   841b4:	4b6b      	ldr	r3, [pc, #428]	; (84364 <board_init+0x2b4>)
   841b6:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_H, IOPORT_MODE_MUX_B);
   841b8:	2101      	movs	r1, #1
   841ba:	2047      	movs	r0, #71	; 0x47
   841bc:	4b68      	ldr	r3, [pc, #416]	; (84360 <board_init+0x2b0>)
   841be:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_H);
   841c0:	2047      	movs	r0, #71	; 0x47
   841c2:	4b68      	ldr	r3, [pc, #416]	; (84364 <board_init+0x2b4>)
   841c4:	4798      	blx	r3

    /* Configure Encoder pins */
    ioport_set_pin_mode(ENC_CLK_PIN, IOPORT_MODE_MUX_B);
   841c6:	2101      	movs	r1, #1
   841c8:	2055      	movs	r0, #85	; 0x55
   841ca:	4b65      	ldr	r3, [pc, #404]	; (84360 <board_init+0x2b0>)
   841cc:	4798      	blx	r3
    ioport_disable_pin(ENC_CLK_PIN);
   841ce:	2055      	movs	r0, #85	; 0x55
   841d0:	4b64      	ldr	r3, [pc, #400]	; (84364 <board_init+0x2b4>)
   841d2:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LOAD, IOPORT_DIR_OUTPUT);
   841d4:	2101      	movs	r1, #1
   841d6:	2020      	movs	r0, #32
   841d8:	4b5f      	ldr	r3, [pc, #380]	; (84358 <board_init+0x2a8>)
   841da:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   841dc:	2101      	movs	r1, #1
   841de:	2020      	movs	r0, #32
   841e0:	4b5e      	ldr	r3, [pc, #376]	; (8435c <board_init+0x2ac>)
   841e2:	4798      	blx	r3

    ioport_set_pin_dir(ENC_LEFT_A, IOPORT_DIR_INPUT);
   841e4:	2100      	movs	r1, #0
   841e6:	2058      	movs	r0, #88	; 0x58
   841e8:	4b5b      	ldr	r3, [pc, #364]	; (84358 <board_init+0x2a8>)
   841ea:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_B, IOPORT_DIR_INPUT);
   841ec:	2100      	movs	r1, #0
   841ee:	2059      	movs	r0, #89	; 0x59
   841f0:	4b59      	ldr	r3, [pc, #356]	; (84358 <board_init+0x2a8>)
   841f2:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_C, IOPORT_DIR_INPUT);
   841f4:	2100      	movs	r1, #0
   841f6:	205a      	movs	r0, #90	; 0x5a
   841f8:	4b57      	ldr	r3, [pc, #348]	; (84358 <board_init+0x2a8>)
   841fa:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_D, IOPORT_DIR_INPUT);
   841fc:	2100      	movs	r1, #0
   841fe:	205b      	movs	r0, #91	; 0x5b
   84200:	4b55      	ldr	r3, [pc, #340]	; (84358 <board_init+0x2a8>)
   84202:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_E, IOPORT_DIR_INPUT);
   84204:	2100      	movs	r1, #0
   84206:	205c      	movs	r0, #92	; 0x5c
   84208:	4b53      	ldr	r3, [pc, #332]	; (84358 <board_init+0x2a8>)
   8420a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_F, IOPORT_DIR_INPUT);
   8420c:	2100      	movs	r1, #0
   8420e:	205d      	movs	r0, #93	; 0x5d
   84210:	4b51      	ldr	r3, [pc, #324]	; (84358 <board_init+0x2a8>)
   84212:	4798      	blx	r3
    ioport_set_pin_dir(ENC_LEFT_G, IOPORT_DIR_INPUT);
   84214:	2100      	movs	r1, #0
   84216:	205e      	movs	r0, #94	; 0x5e
   84218:	4b4f      	ldr	r3, [pc, #316]	; (84358 <board_init+0x2a8>)
   8421a:	4798      	blx	r3
    
    ioport_set_pin_dir(ENC_RIGHT_A, IOPORT_DIR_INPUT);
   8421c:	2100      	movs	r1, #0
   8421e:	2050      	movs	r0, #80	; 0x50
   84220:	4b4d      	ldr	r3, [pc, #308]	; (84358 <board_init+0x2a8>)
   84222:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_B, IOPORT_DIR_INPUT);
   84224:	2100      	movs	r1, #0
   84226:	2051      	movs	r0, #81	; 0x51
   84228:	4b4b      	ldr	r3, [pc, #300]	; (84358 <board_init+0x2a8>)
   8422a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_C, IOPORT_DIR_INPUT);
   8422c:	2100      	movs	r1, #0
   8422e:	2052      	movs	r0, #82	; 0x52
   84230:	4b49      	ldr	r3, [pc, #292]	; (84358 <board_init+0x2a8>)
   84232:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_D, IOPORT_DIR_INPUT);
   84234:	2100      	movs	r1, #0
   84236:	2053      	movs	r0, #83	; 0x53
   84238:	4b47      	ldr	r3, [pc, #284]	; (84358 <board_init+0x2a8>)
   8423a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_E, IOPORT_DIR_INPUT);
   8423c:	2100      	movs	r1, #0
   8423e:	2054      	movs	r0, #84	; 0x54
   84240:	4b45      	ldr	r3, [pc, #276]	; (84358 <board_init+0x2a8>)
   84242:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_F, IOPORT_DIR_INPUT);
   84244:	2100      	movs	r1, #0
   84246:	2056      	movs	r0, #86	; 0x56
   84248:	4b43      	ldr	r3, [pc, #268]	; (84358 <board_init+0x2a8>)
   8424a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_RIGHT_G, IOPORT_DIR_INPUT);
   8424c:	2100      	movs	r1, #0
   8424e:	2057      	movs	r0, #87	; 0x57
   84250:	4b41      	ldr	r3, [pc, #260]	; (84358 <board_init+0x2a8>)
   84252:	4798      	blx	r3
    
    ioport_set_pin_dir(ENC_REAR_A, IOPORT_DIR_INPUT);
   84254:	2100      	movs	r1, #0
   84256:	2041      	movs	r0, #65	; 0x41
   84258:	4b3f      	ldr	r3, [pc, #252]	; (84358 <board_init+0x2a8>)
   8425a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_B, IOPORT_DIR_INPUT);
   8425c:	2100      	movs	r1, #0
   8425e:	204a      	movs	r0, #74	; 0x4a
   84260:	4b3d      	ldr	r3, [pc, #244]	; (84358 <board_init+0x2a8>)
   84262:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_C, IOPORT_DIR_INPUT);
   84264:	2100      	movs	r1, #0
   84266:	204b      	movs	r0, #75	; 0x4b
   84268:	4b3b      	ldr	r3, [pc, #236]	; (84358 <board_init+0x2a8>)
   8426a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_D, IOPORT_DIR_INPUT);
   8426c:	2100      	movs	r1, #0
   8426e:	204c      	movs	r0, #76	; 0x4c
   84270:	4b39      	ldr	r3, [pc, #228]	; (84358 <board_init+0x2a8>)
   84272:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_E, IOPORT_DIR_INPUT);
   84274:	2100      	movs	r1, #0
   84276:	204d      	movs	r0, #77	; 0x4d
   84278:	4b37      	ldr	r3, [pc, #220]	; (84358 <board_init+0x2a8>)
   8427a:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_F, IOPORT_DIR_INPUT);
   8427c:	2100      	movs	r1, #0
   8427e:	204e      	movs	r0, #78	; 0x4e
   84280:	4b35      	ldr	r3, [pc, #212]	; (84358 <board_init+0x2a8>)
   84282:	4798      	blx	r3
    ioport_set_pin_dir(ENC_REAR_G, IOPORT_DIR_INPUT);
   84284:	2100      	movs	r1, #0
   84286:	204f      	movs	r0, #79	; 0x4f
   84288:	4b33      	ldr	r3, [pc, #204]	; (84358 <board_init+0x2a8>)
   8428a:	4798      	blx	r3
  
    /* Configure Raspberry Pi GPIO pins */
    ioport_set_pin_dir(RPI1, IOPORT_DIR_OUTPUT);
   8428c:	2101      	movs	r1, #1
   8428e:	2001      	movs	r0, #1
   84290:	4b31      	ldr	r3, [pc, #196]	; (84358 <board_init+0x2a8>)
   84292:	4798      	blx	r3
    ioport_set_pin_level(RPI1, 1);
   84294:	2101      	movs	r1, #1
   84296:	2001      	movs	r0, #1
   84298:	4b30      	ldr	r3, [pc, #192]	; (8435c <board_init+0x2ac>)
   8429a:	4798      	blx	r3
    ioport_set_pin_dir(RPI2, IOPORT_DIR_INPUT);
   8429c:	2100      	movs	r1, #0
   8429e:	2008      	movs	r0, #8
   842a0:	4b2d      	ldr	r3, [pc, #180]	; (84358 <board_init+0x2a8>)
   842a2:	4798      	blx	r3
    ioport_set_pin_dir(RPI3, IOPORT_DIR_INPUT);
   842a4:	2100      	movs	r1, #0
   842a6:	2009      	movs	r0, #9
   842a8:	4b2b      	ldr	r3, [pc, #172]	; (84358 <board_init+0x2a8>)
   842aa:	4798      	blx	r3
    ioport_set_pin_dir(RPI4, IOPORT_DIR_INPUT);
   842ac:	2100      	movs	r1, #0
   842ae:	2007      	movs	r0, #7
   842b0:	4b29      	ldr	r3, [pc, #164]	; (84358 <board_init+0x2a8>)
   842b2:	4798      	blx	r3
    ioport_set_pin_dir(RPI5, IOPORT_DIR_INPUT);
   842b4:	2100      	movs	r1, #0
   842b6:	2005      	movs	r0, #5
   842b8:	4b27      	ldr	r3, [pc, #156]	; (84358 <board_init+0x2a8>)
   842ba:	4798      	blx	r3
    ioport_set_pin_dir(RPI6, IOPORT_DIR_INPUT);
   842bc:	2100      	movs	r1, #0
   842be:	2000      	movs	r0, #0
   842c0:	4b25      	ldr	r3, [pc, #148]	; (84358 <board_init+0x2a8>)
   842c2:	4798      	blx	r3
  
    /* Configure I2C pins */
    ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   842c4:	2100      	movs	r1, #0
   842c6:	2011      	movs	r0, #17
   842c8:	4b25      	ldr	r3, [pc, #148]	; (84360 <board_init+0x2b0>)
   842ca:	4798      	blx	r3
    ioport_disable_pin(I2C0_DATA);
   842cc:	2011      	movs	r0, #17
   842ce:	4b25      	ldr	r3, [pc, #148]	; (84364 <board_init+0x2b4>)
   842d0:	4798      	blx	r3
    ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   842d2:	2100      	movs	r1, #0
   842d4:	2012      	movs	r0, #18
   842d6:	4b22      	ldr	r3, [pc, #136]	; (84360 <board_init+0x2b0>)
   842d8:	4798      	blx	r3
    ioport_disable_pin(I2C0_CLK);
   842da:	2012      	movs	r0, #18
   842dc:	4b21      	ldr	r3, [pc, #132]	; (84364 <board_init+0x2b4>)
   842de:	4798      	blx	r3
	
    /* Configure SPI0 pins */
    ioport_set_pin_mode(SPI0_MISO, IOPORT_MODE_MUX_A);
   842e0:	2100      	movs	r1, #0
   842e2:	2019      	movs	r0, #25
   842e4:	4b1e      	ldr	r3, [pc, #120]	; (84360 <board_init+0x2b0>)
   842e6:	4798      	blx	r3
    ioport_disable_pin(SPI0_MISO);
   842e8:	2019      	movs	r0, #25
   842ea:	4b1e      	ldr	r3, [pc, #120]	; (84364 <board_init+0x2b4>)
   842ec:	4798      	blx	r3
    ioport_set_pin_mode(SPI0_MOSI, IOPORT_MODE_MUX_A);
   842ee:	2100      	movs	r1, #0
   842f0:	201a      	movs	r0, #26
   842f2:	4b1b      	ldr	r3, [pc, #108]	; (84360 <board_init+0x2b0>)
   842f4:	4798      	blx	r3
    ioport_disable_pin(SPI0_MOSI);
   842f6:	201a      	movs	r0, #26
   842f8:	4b1a      	ldr	r3, [pc, #104]	; (84364 <board_init+0x2b4>)
   842fa:	4798      	blx	r3
    ioport_set_pin_mode(SPI0_SPCK, IOPORT_MODE_MUX_A);
   842fc:	2100      	movs	r1, #0
   842fe:	201b      	movs	r0, #27
   84300:	4b17      	ldr	r3, [pc, #92]	; (84360 <board_init+0x2b0>)
   84302:	4798      	blx	r3
    ioport_disable_pin(SPI0_SPCK);
   84304:	201b      	movs	r0, #27
   84306:	4b17      	ldr	r3, [pc, #92]	; (84364 <board_init+0x2b4>)
   84308:	4798      	blx	r3
    ioport_set_pin_mode(SPI0_NPCS0, IOPORT_MODE_MUX_A);
   8430a:	2100      	movs	r1, #0
   8430c:	201c      	movs	r0, #28
   8430e:	4b14      	ldr	r3, [pc, #80]	; (84360 <board_init+0x2b0>)
   84310:	4798      	blx	r3
    ioport_disable_pin(SPI0_NPCS0);
   84312:	201c      	movs	r0, #28
   84314:	4b13      	ldr	r3, [pc, #76]	; (84364 <board_init+0x2b4>)
   84316:	4798      	blx	r3

	/* Configure SPI1 pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   84318:	2100      	movs	r1, #0
   8431a:	200c      	movs	r0, #12
   8431c:	4b10      	ldr	r3, [pc, #64]	; (84360 <board_init+0x2b0>)
   8431e:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   84320:	200c      	movs	r0, #12
   84322:	4b10      	ldr	r3, [pc, #64]	; (84364 <board_init+0x2b4>)
   84324:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   84326:	2100      	movs	r1, #0
   84328:	200d      	movs	r0, #13
   8432a:	4b0d      	ldr	r3, [pc, #52]	; (84360 <board_init+0x2b0>)
   8432c:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   8432e:	200d      	movs	r0, #13
   84330:	4b0c      	ldr	r3, [pc, #48]	; (84364 <board_init+0x2b4>)
   84332:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   84334:	2100      	movs	r1, #0
   84336:	2010      	movs	r0, #16
   84338:	4b09      	ldr	r3, [pc, #36]	; (84360 <board_init+0x2b0>)
   8433a:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   8433c:	2010      	movs	r0, #16
   8433e:	4b09      	ldr	r3, [pc, #36]	; (84364 <board_init+0x2b4>)
   84340:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   84342:	2100      	movs	r1, #0
   84344:	200e      	movs	r0, #14
   84346:	4b06      	ldr	r3, [pc, #24]	; (84360 <board_init+0x2b0>)
   84348:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   8434a:	200e      	movs	r0, #14
   8434c:	e00c      	b.n	84368 <board_init+0x2b8>
   8434e:	bf00      	nop
   84350:	400e1a50 	.word	0x400e1a50
   84354:	00083e7d 	.word	0x00083e7d
   84358:	00083fc1 	.word	0x00083fc1
   8435c:	00084047 	.word	0x00084047
   84360:	00083ee9 	.word	0x00083ee9
   84364:	00083ea1 	.word	0x00083ea1
   84368:	4b25      	ldr	r3, [pc, #148]	; (84400 <board_init+0x350>)
   8436a:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   8436c:	2100      	movs	r1, #0
   8436e:	2014      	movs	r0, #20
   84370:	4b24      	ldr	r3, [pc, #144]	; (84404 <board_init+0x354>)
   84372:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   84374:	2014      	movs	r0, #20
   84376:	4b22      	ldr	r3, [pc, #136]	; (84400 <board_init+0x350>)
   84378:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   8437a:	2100      	movs	r1, #0
   8437c:	2013      	movs	r0, #19
   8437e:	4b21      	ldr	r3, [pc, #132]	; (84404 <board_init+0x354>)
   84380:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   84382:	2013      	movs	r0, #19
   84384:	4b1e      	ldr	r3, [pc, #120]	; (84400 <board_init+0x350>)
   84386:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   84388:	2100      	movs	r1, #0
   8438a:	2015      	movs	r0, #21
   8438c:	4b1d      	ldr	r3, [pc, #116]	; (84404 <board_init+0x354>)
   8438e:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   84390:	2015      	movs	r0, #21
   84392:	4b1b      	ldr	r3, [pc, #108]	; (84400 <board_init+0x350>)
   84394:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   84396:	2100      	movs	r1, #0
   84398:	2016      	movs	r0, #22
   8439a:	4b1a      	ldr	r3, [pc, #104]	; (84404 <board_init+0x354>)
   8439c:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   8439e:	2016      	movs	r0, #22
   843a0:	4b17      	ldr	r3, [pc, #92]	; (84400 <board_init+0x350>)
   843a2:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   843a4:	2100      	movs	r1, #0
   843a6:	2017      	movs	r0, #23
   843a8:	4b16      	ldr	r3, [pc, #88]	; (84404 <board_init+0x354>)
   843aa:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   843ac:	2017      	movs	r0, #23
   843ae:	4b14      	ldr	r3, [pc, #80]	; (84400 <board_init+0x350>)
   843b0:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   843b2:	2100      	movs	r1, #0
   843b4:	2018      	movs	r0, #24
   843b6:	4b13      	ldr	r3, [pc, #76]	; (84404 <board_init+0x354>)
   843b8:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   843ba:	2018      	movs	r0, #24
   843bc:	4b10      	ldr	r3, [pc, #64]	; (84400 <board_init+0x350>)
   843be:	4798      	blx	r3


    /* Init PWM */
    pmc_enable_periph_clk(ID_PWM);
   843c0:	2024      	movs	r0, #36	; 0x24
   843c2:	4b11      	ldr	r3, [pc, #68]	; (84408 <board_init+0x358>)
   843c4:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_LEFT);
   843c6:	2100      	movs	r1, #0
   843c8:	4810      	ldr	r0, [pc, #64]	; (8440c <board_init+0x35c>)
   843ca:	4b11      	ldr	r3, [pc, #68]	; (84410 <board_init+0x360>)
   843cc:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_RIGHT);
   843ce:	2101      	movs	r1, #1
   843d0:	480e      	ldr	r0, [pc, #56]	; (8440c <board_init+0x35c>)
   843d2:	4b0f      	ldr	r3, [pc, #60]	; (84410 <board_init+0x360>)
   843d4:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_REAR);
   843d6:	2102      	movs	r1, #2
   843d8:	480c      	ldr	r0, [pc, #48]	; (8440c <board_init+0x35c>)
   843da:	4b0d      	ldr	r3, [pc, #52]	; (84410 <board_init+0x360>)
   843dc:	4798      	blx	r3
    pwm_clock_t clock_setting =
   843de:	4b0d      	ldr	r3, [pc, #52]	; (84414 <board_init+0x364>)
   843e0:	607b      	str	r3, [r7, #4]
   843e2:	2300      	movs	r3, #0
   843e4:	60bb      	str	r3, [r7, #8]
    {
        .ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
        .ul_clkb = 0,
        .ul_mck = sysclk_get_cpu_hz()
   843e6:	4b0c      	ldr	r3, [pc, #48]	; (84418 <board_init+0x368>)
   843e8:	4798      	blx	r3
   843ea:	4603      	mov	r3, r0
    pwm_clock_t clock_setting =
   843ec:	60fb      	str	r3, [r7, #12]
    };
    pwm_init(PWM, &clock_setting);
   843ee:	1d3b      	adds	r3, r7, #4
   843f0:	4619      	mov	r1, r3
   843f2:	4806      	ldr	r0, [pc, #24]	; (8440c <board_init+0x35c>)
   843f4:	4b09      	ldr	r3, [pc, #36]	; (8441c <board_init+0x36c>)
   843f6:	4798      	blx	r3
}
   843f8:	bf00      	nop
   843fa:	3710      	adds	r7, #16
   843fc:	46bd      	mov	sp, r7
   843fe:	bd80      	pop	{r7, pc}
   84400:	00083ea1 	.word	0x00083ea1
   84404:	00083ee9 	.word	0x00083ee9
   84408:	00083d3d 	.word	0x00083d3d
   8440c:	40094000 	.word	0x40094000
   84410:	00080615 	.word	0x00080615
   84414:	01312d00 	.word	0x01312d00
   84418:	00083e4d 	.word	0x00083e4d
   8441c:	000802e9 	.word	0x000802e9

00084420 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   84420:	b480      	push	{r7}
   84422:	af00      	add	r7, sp, #0
	while (1) {
   84424:	e7fe      	b.n	84424 <Dummy_Handler+0x4>
	...

00084428 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   84428:	b580      	push	{r7, lr}
   8442a:	b082      	sub	sp, #8
   8442c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   8442e:	4b1e      	ldr	r3, [pc, #120]	; (844a8 <Reset_Handler+0x80>)
   84430:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   84432:	4b1e      	ldr	r3, [pc, #120]	; (844ac <Reset_Handler+0x84>)
   84434:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   84436:	687a      	ldr	r2, [r7, #4]
   84438:	683b      	ldr	r3, [r7, #0]
   8443a:	429a      	cmp	r2, r3
   8443c:	d00c      	beq.n	84458 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   8443e:	e007      	b.n	84450 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   84440:	683b      	ldr	r3, [r7, #0]
   84442:	1d1a      	adds	r2, r3, #4
   84444:	603a      	str	r2, [r7, #0]
   84446:	687a      	ldr	r2, [r7, #4]
   84448:	1d11      	adds	r1, r2, #4
   8444a:	6079      	str	r1, [r7, #4]
   8444c:	6812      	ldr	r2, [r2, #0]
   8444e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   84450:	683b      	ldr	r3, [r7, #0]
   84452:	4a17      	ldr	r2, [pc, #92]	; (844b0 <Reset_Handler+0x88>)
   84454:	4293      	cmp	r3, r2
   84456:	d3f3      	bcc.n	84440 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   84458:	4b16      	ldr	r3, [pc, #88]	; (844b4 <Reset_Handler+0x8c>)
   8445a:	603b      	str	r3, [r7, #0]
   8445c:	e004      	b.n	84468 <Reset_Handler+0x40>
		*pDest++ = 0;
   8445e:	683b      	ldr	r3, [r7, #0]
   84460:	1d1a      	adds	r2, r3, #4
   84462:	603a      	str	r2, [r7, #0]
   84464:	2200      	movs	r2, #0
   84466:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   84468:	683b      	ldr	r3, [r7, #0]
   8446a:	4a13      	ldr	r2, [pc, #76]	; (844b8 <Reset_Handler+0x90>)
   8446c:	4293      	cmp	r3, r2
   8446e:	d3f6      	bcc.n	8445e <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   84470:	4b12      	ldr	r3, [pc, #72]	; (844bc <Reset_Handler+0x94>)
   84472:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   84474:	4a12      	ldr	r2, [pc, #72]	; (844c0 <Reset_Handler+0x98>)
   84476:	687b      	ldr	r3, [r7, #4]
   84478:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8447c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   84480:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   84482:	687b      	ldr	r3, [r7, #4]
   84484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   84488:	d309      	bcc.n	8449e <Reset_Handler+0x76>
   8448a:	687b      	ldr	r3, [r7, #4]
   8448c:	4a0d      	ldr	r2, [pc, #52]	; (844c4 <Reset_Handler+0x9c>)
   8448e:	4293      	cmp	r3, r2
   84490:	d805      	bhi.n	8449e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   84492:	4a0b      	ldr	r2, [pc, #44]	; (844c0 <Reset_Handler+0x98>)
   84494:	4b0a      	ldr	r3, [pc, #40]	; (844c0 <Reset_Handler+0x98>)
   84496:	689b      	ldr	r3, [r3, #8]
   84498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8449c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8449e:	4b0a      	ldr	r3, [pc, #40]	; (844c8 <Reset_Handler+0xa0>)
   844a0:	4798      	blx	r3

	/* Branch to main function */
	main();
   844a2:	4b0a      	ldr	r3, [pc, #40]	; (844cc <Reset_Handler+0xa4>)
   844a4:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   844a6:	e7fe      	b.n	844a6 <Reset_Handler+0x7e>
   844a8:	00089e5c 	.word	0x00089e5c
   844ac:	20070000 	.word	0x20070000
   844b0:	20070b50 	.word	0x20070b50
   844b4:	20070b50 	.word	0x20070b50
   844b8:	20071004 	.word	0x20071004
   844bc:	00080000 	.word	0x00080000
   844c0:	e000ed00 	.word	0xe000ed00
   844c4:	200fffff 	.word	0x200fffff
   844c8:	000858e1 	.word	0x000858e1
   844cc:	000848a1 	.word	0x000848a1

000844d0 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   844d0:	b480      	push	{r7}
   844d2:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   844d4:	4b57      	ldr	r3, [pc, #348]	; (84634 <SystemCoreClockUpdate+0x164>)
   844d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   844d8:	f003 0303 	and.w	r3, r3, #3
   844dc:	2b03      	cmp	r3, #3
   844de:	f200 808a 	bhi.w	845f6 <SystemCoreClockUpdate+0x126>
   844e2:	a201      	add	r2, pc, #4	; (adr r2, 844e8 <SystemCoreClockUpdate+0x18>)
   844e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   844e8:	000844f9 	.word	0x000844f9
   844ec:	00084519 	.word	0x00084519
   844f0:	00084569 	.word	0x00084569
   844f4:	00084569 	.word	0x00084569
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   844f8:	4b4f      	ldr	r3, [pc, #316]	; (84638 <SystemCoreClockUpdate+0x168>)
   844fa:	695b      	ldr	r3, [r3, #20]
   844fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   84500:	2b00      	cmp	r3, #0
   84502:	d004      	beq.n	8450e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   84504:	4b4d      	ldr	r3, [pc, #308]	; (8463c <SystemCoreClockUpdate+0x16c>)
   84506:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8450a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   8450c:	e073      	b.n	845f6 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8450e:	4b4b      	ldr	r3, [pc, #300]	; (8463c <SystemCoreClockUpdate+0x16c>)
   84510:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   84514:	601a      	str	r2, [r3, #0]
		break;
   84516:	e06e      	b.n	845f6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84518:	4b46      	ldr	r3, [pc, #280]	; (84634 <SystemCoreClockUpdate+0x164>)
   8451a:	6a1b      	ldr	r3, [r3, #32]
   8451c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   84520:	2b00      	cmp	r3, #0
   84522:	d003      	beq.n	8452c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84524:	4b45      	ldr	r3, [pc, #276]	; (8463c <SystemCoreClockUpdate+0x16c>)
   84526:	4a46      	ldr	r2, [pc, #280]	; (84640 <SystemCoreClockUpdate+0x170>)
   84528:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   8452a:	e064      	b.n	845f6 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8452c:	4b43      	ldr	r3, [pc, #268]	; (8463c <SystemCoreClockUpdate+0x16c>)
   8452e:	4a45      	ldr	r2, [pc, #276]	; (84644 <SystemCoreClockUpdate+0x174>)
   84530:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84532:	4b40      	ldr	r3, [pc, #256]	; (84634 <SystemCoreClockUpdate+0x164>)
   84534:	6a1b      	ldr	r3, [r3, #32]
   84536:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8453a:	2b10      	cmp	r3, #16
   8453c:	d004      	beq.n	84548 <SystemCoreClockUpdate+0x78>
   8453e:	2b20      	cmp	r3, #32
   84540:	d008      	beq.n	84554 <SystemCoreClockUpdate+0x84>
   84542:	2b00      	cmp	r3, #0
   84544:	d00e      	beq.n	84564 <SystemCoreClockUpdate+0x94>
				break;
   84546:	e00e      	b.n	84566 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   84548:	4b3c      	ldr	r3, [pc, #240]	; (8463c <SystemCoreClockUpdate+0x16c>)
   8454a:	681b      	ldr	r3, [r3, #0]
   8454c:	005b      	lsls	r3, r3, #1
   8454e:	4a3b      	ldr	r2, [pc, #236]	; (8463c <SystemCoreClockUpdate+0x16c>)
   84550:	6013      	str	r3, [r2, #0]
				break;
   84552:	e008      	b.n	84566 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   84554:	4b39      	ldr	r3, [pc, #228]	; (8463c <SystemCoreClockUpdate+0x16c>)
   84556:	681a      	ldr	r2, [r3, #0]
   84558:	4613      	mov	r3, r2
   8455a:	005b      	lsls	r3, r3, #1
   8455c:	4413      	add	r3, r2
   8455e:	4a37      	ldr	r2, [pc, #220]	; (8463c <SystemCoreClockUpdate+0x16c>)
   84560:	6013      	str	r3, [r2, #0]
				break;
   84562:	e000      	b.n	84566 <SystemCoreClockUpdate+0x96>
				break;
   84564:	bf00      	nop
		break;
   84566:	e046      	b.n	845f6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84568:	4b32      	ldr	r3, [pc, #200]	; (84634 <SystemCoreClockUpdate+0x164>)
   8456a:	6a1b      	ldr	r3, [r3, #32]
   8456c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   84570:	2b00      	cmp	r3, #0
   84572:	d003      	beq.n	8457c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84574:	4b31      	ldr	r3, [pc, #196]	; (8463c <SystemCoreClockUpdate+0x16c>)
   84576:	4a32      	ldr	r2, [pc, #200]	; (84640 <SystemCoreClockUpdate+0x170>)
   84578:	601a      	str	r2, [r3, #0]
   8457a:	e01c      	b.n	845b6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8457c:	4b2f      	ldr	r3, [pc, #188]	; (8463c <SystemCoreClockUpdate+0x16c>)
   8457e:	4a31      	ldr	r2, [pc, #196]	; (84644 <SystemCoreClockUpdate+0x174>)
   84580:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84582:	4b2c      	ldr	r3, [pc, #176]	; (84634 <SystemCoreClockUpdate+0x164>)
   84584:	6a1b      	ldr	r3, [r3, #32]
   84586:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8458a:	2b10      	cmp	r3, #16
   8458c:	d004      	beq.n	84598 <SystemCoreClockUpdate+0xc8>
   8458e:	2b20      	cmp	r3, #32
   84590:	d008      	beq.n	845a4 <SystemCoreClockUpdate+0xd4>
   84592:	2b00      	cmp	r3, #0
   84594:	d00e      	beq.n	845b4 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   84596:	e00e      	b.n	845b6 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   84598:	4b28      	ldr	r3, [pc, #160]	; (8463c <SystemCoreClockUpdate+0x16c>)
   8459a:	681b      	ldr	r3, [r3, #0]
   8459c:	005b      	lsls	r3, r3, #1
   8459e:	4a27      	ldr	r2, [pc, #156]	; (8463c <SystemCoreClockUpdate+0x16c>)
   845a0:	6013      	str	r3, [r2, #0]
				break;
   845a2:	e008      	b.n	845b6 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   845a4:	4b25      	ldr	r3, [pc, #148]	; (8463c <SystemCoreClockUpdate+0x16c>)
   845a6:	681a      	ldr	r2, [r3, #0]
   845a8:	4613      	mov	r3, r2
   845aa:	005b      	lsls	r3, r3, #1
   845ac:	4413      	add	r3, r2
   845ae:	4a23      	ldr	r2, [pc, #140]	; (8463c <SystemCoreClockUpdate+0x16c>)
   845b0:	6013      	str	r3, [r2, #0]
				break;
   845b2:	e000      	b.n	845b6 <SystemCoreClockUpdate+0xe6>
				break;
   845b4:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   845b6:	4b1f      	ldr	r3, [pc, #124]	; (84634 <SystemCoreClockUpdate+0x164>)
   845b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   845ba:	f003 0303 	and.w	r3, r3, #3
   845be:	2b02      	cmp	r3, #2
   845c0:	d115      	bne.n	845ee <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   845c2:	4b1c      	ldr	r3, [pc, #112]	; (84634 <SystemCoreClockUpdate+0x164>)
   845c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   845c6:	0c1b      	lsrs	r3, r3, #16
   845c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   845cc:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   845ce:	4a1b      	ldr	r2, [pc, #108]	; (8463c <SystemCoreClockUpdate+0x16c>)
   845d0:	6812      	ldr	r2, [r2, #0]
   845d2:	fb02 f303 	mul.w	r3, r2, r3
   845d6:	4a19      	ldr	r2, [pc, #100]	; (8463c <SystemCoreClockUpdate+0x16c>)
   845d8:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   845da:	4b16      	ldr	r3, [pc, #88]	; (84634 <SystemCoreClockUpdate+0x164>)
   845dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   845de:	b2db      	uxtb	r3, r3
   845e0:	4a16      	ldr	r2, [pc, #88]	; (8463c <SystemCoreClockUpdate+0x16c>)
   845e2:	6812      	ldr	r2, [r2, #0]
   845e4:	fbb2 f3f3 	udiv	r3, r2, r3
   845e8:	4a14      	ldr	r2, [pc, #80]	; (8463c <SystemCoreClockUpdate+0x16c>)
   845ea:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   845ec:	e002      	b.n	845f4 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   845ee:	4b13      	ldr	r3, [pc, #76]	; (8463c <SystemCoreClockUpdate+0x16c>)
   845f0:	4a15      	ldr	r2, [pc, #84]	; (84648 <SystemCoreClockUpdate+0x178>)
   845f2:	601a      	str	r2, [r3, #0]
		break;
   845f4:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   845f6:	4b0f      	ldr	r3, [pc, #60]	; (84634 <SystemCoreClockUpdate+0x164>)
   845f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   845fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   845fe:	2b70      	cmp	r3, #112	; 0x70
   84600:	d108      	bne.n	84614 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   84602:	4b0e      	ldr	r3, [pc, #56]	; (8463c <SystemCoreClockUpdate+0x16c>)
   84604:	681b      	ldr	r3, [r3, #0]
   84606:	4a11      	ldr	r2, [pc, #68]	; (8464c <SystemCoreClockUpdate+0x17c>)
   84608:	fba2 2303 	umull	r2, r3, r2, r3
   8460c:	085b      	lsrs	r3, r3, #1
   8460e:	4a0b      	ldr	r2, [pc, #44]	; (8463c <SystemCoreClockUpdate+0x16c>)
   84610:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   84612:	e00a      	b.n	8462a <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   84614:	4b07      	ldr	r3, [pc, #28]	; (84634 <SystemCoreClockUpdate+0x164>)
   84616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84618:	091b      	lsrs	r3, r3, #4
   8461a:	f003 0307 	and.w	r3, r3, #7
   8461e:	4a07      	ldr	r2, [pc, #28]	; (8463c <SystemCoreClockUpdate+0x16c>)
   84620:	6812      	ldr	r2, [r2, #0]
   84622:	fa22 f303 	lsr.w	r3, r2, r3
   84626:	4a05      	ldr	r2, [pc, #20]	; (8463c <SystemCoreClockUpdate+0x16c>)
   84628:	6013      	str	r3, [r2, #0]
}
   8462a:	bf00      	nop
   8462c:	46bd      	mov	sp, r7
   8462e:	bc80      	pop	{r7}
   84630:	4770      	bx	lr
   84632:	bf00      	nop
   84634:	400e0600 	.word	0x400e0600
   84638:	400e1a10 	.word	0x400e1a10
   8463c:	2007019c 	.word	0x2007019c
   84640:	00b71b00 	.word	0x00b71b00
   84644:	003d0900 	.word	0x003d0900
   84648:	0e4e1c00 	.word	0x0e4e1c00
   8464c:	aaaaaaab 	.word	0xaaaaaaab

00084650 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   84650:	b480      	push	{r7}
   84652:	b085      	sub	sp, #20
   84654:	af00      	add	r7, sp, #0
   84656:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   84658:	4b10      	ldr	r3, [pc, #64]	; (8469c <_sbrk+0x4c>)
   8465a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   8465c:	4b10      	ldr	r3, [pc, #64]	; (846a0 <_sbrk+0x50>)
   8465e:	681b      	ldr	r3, [r3, #0]
   84660:	2b00      	cmp	r3, #0
   84662:	d102      	bne.n	8466a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   84664:	4b0e      	ldr	r3, [pc, #56]	; (846a0 <_sbrk+0x50>)
   84666:	4a0f      	ldr	r2, [pc, #60]	; (846a4 <_sbrk+0x54>)
   84668:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8466a:	4b0d      	ldr	r3, [pc, #52]	; (846a0 <_sbrk+0x50>)
   8466c:	681b      	ldr	r3, [r3, #0]
   8466e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   84670:	68ba      	ldr	r2, [r7, #8]
   84672:	687b      	ldr	r3, [r7, #4]
   84674:	441a      	add	r2, r3
   84676:	68fb      	ldr	r3, [r7, #12]
   84678:	429a      	cmp	r2, r3
   8467a:	dd02      	ble.n	84682 <_sbrk+0x32>
		return (caddr_t) -1;	
   8467c:	f04f 33ff 	mov.w	r3, #4294967295
   84680:	e006      	b.n	84690 <_sbrk+0x40>
	}

	heap += incr;
   84682:	4b07      	ldr	r3, [pc, #28]	; (846a0 <_sbrk+0x50>)
   84684:	681a      	ldr	r2, [r3, #0]
   84686:	687b      	ldr	r3, [r7, #4]
   84688:	4413      	add	r3, r2
   8468a:	4a05      	ldr	r2, [pc, #20]	; (846a0 <_sbrk+0x50>)
   8468c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8468e:	68bb      	ldr	r3, [r7, #8]
}
   84690:	4618      	mov	r0, r3
   84692:	3714      	adds	r7, #20
   84694:	46bd      	mov	sp, r7
   84696:	bc80      	pop	{r7}
   84698:	4770      	bx	lr
   8469a:	bf00      	nop
   8469c:	20087ffc 	.word	0x20087ffc
   846a0:	20070dd0 	.word	0x20070dd0
   846a4:	20073008 	.word	0x20073008

000846a8 <NVIC_SetPriority>:
{
   846a8:	b480      	push	{r7}
   846aa:	b083      	sub	sp, #12
   846ac:	af00      	add	r7, sp, #0
   846ae:	4603      	mov	r3, r0
   846b0:	6039      	str	r1, [r7, #0]
   846b2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   846b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   846b8:	2b00      	cmp	r3, #0
   846ba:	da0b      	bge.n	846d4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   846bc:	490d      	ldr	r1, [pc, #52]	; (846f4 <NVIC_SetPriority+0x4c>)
   846be:	79fb      	ldrb	r3, [r7, #7]
   846c0:	f003 030f 	and.w	r3, r3, #15
   846c4:	3b04      	subs	r3, #4
   846c6:	683a      	ldr	r2, [r7, #0]
   846c8:	b2d2      	uxtb	r2, r2
   846ca:	0112      	lsls	r2, r2, #4
   846cc:	b2d2      	uxtb	r2, r2
   846ce:	440b      	add	r3, r1
   846d0:	761a      	strb	r2, [r3, #24]
}
   846d2:	e009      	b.n	846e8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   846d4:	4908      	ldr	r1, [pc, #32]	; (846f8 <NVIC_SetPriority+0x50>)
   846d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   846da:	683a      	ldr	r2, [r7, #0]
   846dc:	b2d2      	uxtb	r2, r2
   846de:	0112      	lsls	r2, r2, #4
   846e0:	b2d2      	uxtb	r2, r2
   846e2:	440b      	add	r3, r1
   846e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   846e8:	bf00      	nop
   846ea:	370c      	adds	r7, #12
   846ec:	46bd      	mov	sp, r7
   846ee:	bc80      	pop	{r7}
   846f0:	4770      	bx	lr
   846f2:	bf00      	nop
   846f4:	e000ed00 	.word	0xe000ed00
   846f8:	e000e100 	.word	0xe000e100

000846fc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   846fc:	b580      	push	{r7, lr}
   846fe:	b082      	sub	sp, #8
   84700:	af00      	add	r7, sp, #0
   84702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   84704:	687b      	ldr	r3, [r7, #4]
   84706:	3b01      	subs	r3, #1
   84708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   8470c:	d301      	bcc.n	84712 <SysTick_Config+0x16>
   8470e:	2301      	movs	r3, #1
   84710:	e00f      	b.n	84732 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   84712:	4a0a      	ldr	r2, [pc, #40]	; (8473c <SysTick_Config+0x40>)
   84714:	687b      	ldr	r3, [r7, #4]
   84716:	3b01      	subs	r3, #1
   84718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   8471a:	210f      	movs	r1, #15
   8471c:	f04f 30ff 	mov.w	r0, #4294967295
   84720:	4b07      	ldr	r3, [pc, #28]	; (84740 <SysTick_Config+0x44>)
   84722:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   84724:	4b05      	ldr	r3, [pc, #20]	; (8473c <SysTick_Config+0x40>)
   84726:	2200      	movs	r2, #0
   84728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   8472a:	4b04      	ldr	r3, [pc, #16]	; (8473c <SysTick_Config+0x40>)
   8472c:	2207      	movs	r2, #7
   8472e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   84730:	2300      	movs	r3, #0
}
   84732:	4618      	mov	r0, r3
   84734:	3708      	adds	r7, #8
   84736:	46bd      	mov	sp, r7
   84738:	bd80      	pop	{r7, pc}
   8473a:	bf00      	nop
   8473c:	e000e010 	.word	0xe000e010
   84740:	000846a9 	.word	0x000846a9

00084744 <osc_get_rate>:
{
   84744:	b480      	push	{r7}
   84746:	b083      	sub	sp, #12
   84748:	af00      	add	r7, sp, #0
   8474a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8474c:	687b      	ldr	r3, [r7, #4]
   8474e:	2b07      	cmp	r3, #7
   84750:	d825      	bhi.n	8479e <osc_get_rate+0x5a>
   84752:	a201      	add	r2, pc, #4	; (adr r2, 84758 <osc_get_rate+0x14>)
   84754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84758:	00084779 	.word	0x00084779
   8475c:	0008477f 	.word	0x0008477f
   84760:	00084785 	.word	0x00084785
   84764:	0008478b 	.word	0x0008478b
   84768:	0008478f 	.word	0x0008478f
   8476c:	00084793 	.word	0x00084793
   84770:	00084797 	.word	0x00084797
   84774:	0008479b 	.word	0x0008479b
		return OSC_SLCK_32K_RC_HZ;
   84778:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8477c:	e010      	b.n	847a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8477e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84782:	e00d      	b.n	847a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   84784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84788:	e00a      	b.n	847a0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   8478a:	4b08      	ldr	r3, [pc, #32]	; (847ac <osc_get_rate+0x68>)
   8478c:	e008      	b.n	847a0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8478e:	4b08      	ldr	r3, [pc, #32]	; (847b0 <osc_get_rate+0x6c>)
   84790:	e006      	b.n	847a0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   84792:	4b08      	ldr	r3, [pc, #32]	; (847b4 <osc_get_rate+0x70>)
   84794:	e004      	b.n	847a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   84796:	4b07      	ldr	r3, [pc, #28]	; (847b4 <osc_get_rate+0x70>)
   84798:	e002      	b.n	847a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   8479a:	4b06      	ldr	r3, [pc, #24]	; (847b4 <osc_get_rate+0x70>)
   8479c:	e000      	b.n	847a0 <osc_get_rate+0x5c>
	return 0;
   8479e:	2300      	movs	r3, #0
}
   847a0:	4618      	mov	r0, r3
   847a2:	370c      	adds	r7, #12
   847a4:	46bd      	mov	sp, r7
   847a6:	bc80      	pop	{r7}
   847a8:	4770      	bx	lr
   847aa:	bf00      	nop
   847ac:	003d0900 	.word	0x003d0900
   847b0:	007a1200 	.word	0x007a1200
   847b4:	00b71b00 	.word	0x00b71b00

000847b8 <sysclk_get_main_hz>:
{
   847b8:	b580      	push	{r7, lr}
   847ba:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   847bc:	2006      	movs	r0, #6
   847be:	4b04      	ldr	r3, [pc, #16]	; (847d0 <sysclk_get_main_hz+0x18>)
   847c0:	4798      	blx	r3
   847c2:	4602      	mov	r2, r0
   847c4:	4613      	mov	r3, r2
   847c6:	00db      	lsls	r3, r3, #3
   847c8:	1a9b      	subs	r3, r3, r2
   847ca:	005b      	lsls	r3, r3, #1
}
   847cc:	4618      	mov	r0, r3
   847ce:	bd80      	pop	{r7, pc}
   847d0:	00084745 	.word	0x00084745

000847d4 <sysclk_get_cpu_hz>:
{
   847d4:	b580      	push	{r7, lr}
   847d6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   847d8:	4b02      	ldr	r3, [pc, #8]	; (847e4 <sysclk_get_cpu_hz+0x10>)
   847da:	4798      	blx	r3
   847dc:	4603      	mov	r3, r0
   847de:	085b      	lsrs	r3, r3, #1
}
   847e0:	4618      	mov	r0, r3
   847e2:	bd80      	pop	{r7, pc}
   847e4:	000847b9 	.word	0x000847b9

000847e8 <ioport_set_pin_level>:
{
   847e8:	b480      	push	{r7}
   847ea:	b08b      	sub	sp, #44	; 0x2c
   847ec:	af00      	add	r7, sp, #0
   847ee:	6078      	str	r0, [r7, #4]
   847f0:	460b      	mov	r3, r1
   847f2:	70fb      	strb	r3, [r7, #3]
   847f4:	687b      	ldr	r3, [r7, #4]
   847f6:	627b      	str	r3, [r7, #36]	; 0x24
   847f8:	78fb      	ldrb	r3, [r7, #3]
   847fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   847fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84800:	61fb      	str	r3, [r7, #28]
   84802:	69fb      	ldr	r3, [r7, #28]
   84804:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   84806:	69bb      	ldr	r3, [r7, #24]
   84808:	095b      	lsrs	r3, r3, #5
   8480a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8480c:	697b      	ldr	r3, [r7, #20]
   8480e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84812:	f203 7307 	addw	r3, r3, #1799	; 0x707
   84816:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   84818:	613b      	str	r3, [r7, #16]
	if (level) {
   8481a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8481e:	2b00      	cmp	r3, #0
   84820:	d009      	beq.n	84836 <ioport_set_pin_level+0x4e>
   84822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84824:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   84826:	68fb      	ldr	r3, [r7, #12]
   84828:	f003 031f 	and.w	r3, r3, #31
   8482c:	2201      	movs	r2, #1
   8482e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   84830:	693b      	ldr	r3, [r7, #16]
   84832:	631a      	str	r2, [r3, #48]	; 0x30
}
   84834:	e008      	b.n	84848 <ioport_set_pin_level+0x60>
   84836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84838:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   8483a:	68bb      	ldr	r3, [r7, #8]
   8483c:	f003 031f 	and.w	r3, r3, #31
   84840:	2201      	movs	r2, #1
   84842:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   84844:	693b      	ldr	r3, [r7, #16]
   84846:	635a      	str	r2, [r3, #52]	; 0x34
   84848:	bf00      	nop
   8484a:	372c      	adds	r7, #44	; 0x2c
   8484c:	46bd      	mov	sp, r7
   8484e:	bc80      	pop	{r7}
   84850:	4770      	bx	lr

00084852 <ioport_get_pin_level>:
{
   84852:	b480      	push	{r7}
   84854:	b089      	sub	sp, #36	; 0x24
   84856:	af00      	add	r7, sp, #0
   84858:	6078      	str	r0, [r7, #4]
   8485a:	687b      	ldr	r3, [r7, #4]
   8485c:	61fb      	str	r3, [r7, #28]
   8485e:	69fb      	ldr	r3, [r7, #28]
   84860:	61bb      	str	r3, [r7, #24]
   84862:	69bb      	ldr	r3, [r7, #24]
   84864:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   84866:	697b      	ldr	r3, [r7, #20]
   84868:	095b      	lsrs	r3, r3, #5
   8486a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8486c:	693b      	ldr	r3, [r7, #16]
   8486e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84872:	f203 7307 	addw	r3, r3, #1799	; 0x707
   84876:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   84878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   8487a:	69fb      	ldr	r3, [r7, #28]
   8487c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8487e:	68fb      	ldr	r3, [r7, #12]
   84880:	f003 031f 	and.w	r3, r3, #31
   84884:	2101      	movs	r1, #1
   84886:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8488a:	4013      	ands	r3, r2
   8488c:	2b00      	cmp	r3, #0
   8488e:	bf14      	ite	ne
   84890:	2301      	movne	r3, #1
   84892:	2300      	moveq	r3, #0
   84894:	b2db      	uxtb	r3, r3
}
   84896:	4618      	mov	r0, r3
   84898:	3724      	adds	r7, #36	; 0x24
   8489a:	46bd      	mov	sp, r7
   8489c:	bc80      	pop	{r7}
   8489e:	4770      	bx	lr

000848a0 <main>:

void noOS_bootup_sequence(void);
void set_led(ioport_pin_t pin, Bool level);

int main(void)
{
   848a0:	b580      	push	{r7, lr}
   848a2:	b082      	sub	sp, #8
   848a4:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   848a6:	4b1c      	ldr	r3, [pc, #112]	; (84918 <main+0x78>)
   848a8:	4798      	blx	r3
    board_init();
   848aa:	4b1c      	ldr	r3, [pc, #112]	; (8491c <main+0x7c>)
   848ac:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   848ae:	4b1c      	ldr	r3, [pc, #112]	; (84920 <main+0x80>)
   848b0:	4798      	blx	r3
   848b2:	4602      	mov	r2, r0
   848b4:	4b1b      	ldr	r3, [pc, #108]	; (84924 <main+0x84>)
   848b6:	fba3 2302 	umull	r2, r3, r3, r2
   848ba:	099b      	lsrs	r3, r3, #6
   848bc:	4618      	mov	r0, r3
   848be:	4b1a      	ldr	r3, [pc, #104]	; (84928 <main+0x88>)
   848c0:	4798      	blx	r3
    
    motor_init();
   848c2:	4b1a      	ldr	r3, [pc, #104]	; (8492c <main+0x8c>)
   848c4:	4798      	blx	r3

    spi_init();
   848c6:	4b1a      	ldr	r3, [pc, #104]	; (84930 <main+0x90>)
   848c8:	4798      	blx	r3
    
    compass_init();
   848ca:	4b1a      	ldr	r3, [pc, #104]	; (84934 <main+0x94>)
   848cc:	4798      	blx	r3
    lcd_init();
   848ce:	4b1a      	ldr	r3, [pc, #104]	; (84938 <main+0x98>)
   848d0:	4798      	blx	r3
    
    noOS_bootup_sequence();
   848d2:	4b1a      	ldr	r3, [pc, #104]	; (8493c <main+0x9c>)
   848d4:	4798      	blx	r3

    enable_motor();
   848d6:	4b1a      	ldr	r3, [pc, #104]	; (84940 <main+0xa0>)
   848d8:	4798      	blx	r3

    while (1)
    {
        update_comm();
   848da:	4b1a      	ldr	r3, [pc, #104]	; (84944 <main+0xa4>)
   848dc:	4798      	blx	r3
        update_heartbeat();
   848de:	4b1a      	ldr	r3, [pc, #104]	; (84948 <main+0xa8>)
   848e0:	4798      	blx	r3
        //check_battery();
        
        if (stm.ibit.heartbeat)
   848e2:	4b1a      	ldr	r3, [pc, #104]	; (8494c <main+0xac>)
   848e4:	781b      	ldrb	r3, [r3, #0]
   848e6:	f003 0301 	and.w	r3, r3, #1
   848ea:	b2db      	uxtb	r3, r3
   848ec:	2b00      	cmp	r3, #0
   848ee:	d004      	beq.n	848fa <main+0x5a>
        {
            set_led(LED_M2, 1);
   848f0:	2101      	movs	r1, #1
   848f2:	2068      	movs	r0, #104	; 0x68
   848f4:	4b16      	ldr	r3, [pc, #88]	; (84950 <main+0xb0>)
   848f6:	4798      	blx	r3
   848f8:	e003      	b.n	84902 <main+0x62>
        }
        else
        {
            set_led(LED_M2, 0);
   848fa:	2100      	movs	r1, #0
   848fc:	2068      	movs	r0, #104	; 0x68
   848fe:	4b14      	ldr	r3, [pc, #80]	; (84950 <main+0xb0>)
   84900:	4798      	blx	r3
        }

        //update_motor(1, 1, 0);
        
        PrepareValuesToSend();
   84902:	4b14      	ldr	r3, [pc, #80]	; (84954 <main+0xb4>)
   84904:	4798      	blx	r3

        act_event = button_events();
   84906:	4b14      	ldr	r3, [pc, #80]	; (84958 <main+0xb8>)
   84908:	4798      	blx	r3
   8490a:	4603      	mov	r3, r0
   8490c:	71fb      	strb	r3, [r7, #7]
        menu(act_event);
   8490e:	79fb      	ldrb	r3, [r7, #7]
   84910:	4618      	mov	r0, r3
   84912:	4b12      	ldr	r3, [pc, #72]	; (8495c <main+0xbc>)
   84914:	4798      	blx	r3
        update_comm();
   84916:	e7e0      	b.n	848da <main+0x3a>
   84918:	00083849 	.word	0x00083849
   8491c:	000840b1 	.word	0x000840b1
   84920:	000847d5 	.word	0x000847d5
   84924:	10624dd3 	.word	0x10624dd3
   84928:	000846fd 	.word	0x000846fd
   8492c:	00082d71 	.word	0x00082d71
   84930:	00080c25 	.word	0x00080c25
   84934:	000816fd 	.word	0x000816fd
   84938:	0008193d 	.word	0x0008193d
   8493c:	00084961 	.word	0x00084961
   84940:	00082f59 	.word	0x00082f59
   84944:	000833bd 	.word	0x000833bd
   84948:	000834b1 	.word	0x000834b1
   8494c:	20070e20 	.word	0x20070e20
   84950:	00084b15 	.word	0x00084b15
   84954:	00080fe5 	.word	0x00080fe5
   84958:	000829ad 	.word	0x000829ad
   8495c:	00081f81 	.word	0x00081f81

00084960 <noOS_bootup_sequence>:
    }
}

void noOS_bootup_sequence(void)
{
   84960:	b580      	push	{r7, lr}
   84962:	b082      	sub	sp, #8
   84964:	af00      	add	r7, sp, #0
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   84966:	e072      	b.n	84a4e <noOS_bootup_sequence+0xee>
    {
        if (getTicks() >= (ticks_blink_update + 800))
   84968:	4b5e      	ldr	r3, [pc, #376]	; (84ae4 <noOS_bootup_sequence+0x184>)
   8496a:	4798      	blx	r3
   8496c:	4602      	mov	r2, r0
   8496e:	4b5e      	ldr	r3, [pc, #376]	; (84ae8 <noOS_bootup_sequence+0x188>)
   84970:	681b      	ldr	r3, [r3, #0]
   84972:	f503 7348 	add.w	r3, r3, #800	; 0x320
   84976:	429a      	cmp	r2, r3
   84978:	d31a      	bcc.n	849b0 <noOS_bootup_sequence+0x50>
        {
            ticks_blink_update = getTicks();
   8497a:	4b5a      	ldr	r3, [pc, #360]	; (84ae4 <noOS_bootup_sequence+0x184>)
   8497c:	4798      	blx	r3
   8497e:	4602      	mov	r2, r0
   84980:	4b59      	ldr	r3, [pc, #356]	; (84ae8 <noOS_bootup_sequence+0x188>)
   84982:	601a      	str	r2, [r3, #0]
            
            if (blink_level)
   84984:	4b59      	ldr	r3, [pc, #356]	; (84aec <noOS_bootup_sequence+0x18c>)
   84986:	781b      	ldrb	r3, [r3, #0]
   84988:	2b00      	cmp	r3, #0
   8498a:	d003      	beq.n	84994 <noOS_bootup_sequence+0x34>
            {
                blink_level = 0;
   8498c:	4b57      	ldr	r3, [pc, #348]	; (84aec <noOS_bootup_sequence+0x18c>)
   8498e:	2200      	movs	r2, #0
   84990:	701a      	strb	r2, [r3, #0]
   84992:	e002      	b.n	8499a <noOS_bootup_sequence+0x3a>
            }
            else
            {
                blink_level = 1;
   84994:	4b55      	ldr	r3, [pc, #340]	; (84aec <noOS_bootup_sequence+0x18c>)
   84996:	2201      	movs	r2, #1
   84998:	701a      	strb	r2, [r3, #0]
            }
            
            ioport_set_pin_level(LED_BAT, blink_level);
   8499a:	4b54      	ldr	r3, [pc, #336]	; (84aec <noOS_bootup_sequence+0x18c>)
   8499c:	781b      	ldrb	r3, [r3, #0]
   8499e:	2b00      	cmp	r3, #0
   849a0:	bf14      	ite	ne
   849a2:	2301      	movne	r3, #1
   849a4:	2300      	moveq	r3, #0
   849a6:	b2db      	uxtb	r3, r3
   849a8:	4619      	mov	r1, r3
   849aa:	2066      	movs	r0, #102	; 0x66
   849ac:	4b50      	ldr	r3, [pc, #320]	; (84af0 <noOS_bootup_sequence+0x190>)
   849ae:	4798      	blx	r3
        }
        
        if (getTicks() >= (ticks_dot_update + 500))
   849b0:	4b4c      	ldr	r3, [pc, #304]	; (84ae4 <noOS_bootup_sequence+0x184>)
   849b2:	4798      	blx	r3
   849b4:	4602      	mov	r2, r0
   849b6:	4b4f      	ldr	r3, [pc, #316]	; (84af4 <noOS_bootup_sequence+0x194>)
   849b8:	681b      	ldr	r3, [r3, #0]
   849ba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   849be:	429a      	cmp	r2, r3
   849c0:	d315      	bcc.n	849ee <noOS_bootup_sequence+0x8e>
        {
            ticks_dot_update = getTicks();
   849c2:	4b48      	ldr	r3, [pc, #288]	; (84ae4 <noOS_bootup_sequence+0x184>)
   849c4:	4798      	blx	r3
   849c6:	4602      	mov	r2, r0
   849c8:	4b4a      	ldr	r3, [pc, #296]	; (84af4 <noOS_bootup_sequence+0x194>)
   849ca:	601a      	str	r2, [r3, #0]
            
            if (dots < 3)
   849cc:	4b4a      	ldr	r3, [pc, #296]	; (84af8 <noOS_bootup_sequence+0x198>)
   849ce:	781b      	ldrb	r3, [r3, #0]
   849d0:	2b02      	cmp	r3, #2
   849d2:	d806      	bhi.n	849e2 <noOS_bootup_sequence+0x82>
            {
                dots++;
   849d4:	4b48      	ldr	r3, [pc, #288]	; (84af8 <noOS_bootup_sequence+0x198>)
   849d6:	781b      	ldrb	r3, [r3, #0]
   849d8:	3301      	adds	r3, #1
   849da:	b2da      	uxtb	r2, r3
   849dc:	4b46      	ldr	r3, [pc, #280]	; (84af8 <noOS_bootup_sequence+0x198>)
   849de:	701a      	strb	r2, [r3, #0]
   849e0:	e002      	b.n	849e8 <noOS_bootup_sequence+0x88>
            }
            else
            {
                dots = 0;
   849e2:	4b45      	ldr	r3, [pc, #276]	; (84af8 <noOS_bootup_sequence+0x198>)
   849e4:	2200      	movs	r2, #0
   849e6:	701a      	strb	r2, [r3, #0]
            }
            
            update_dots = 1;
   849e8:	4b44      	ldr	r3, [pc, #272]	; (84afc <noOS_bootup_sequence+0x19c>)
   849ea:	2201      	movs	r2, #1
   849ec:	701a      	strb	r2, [r3, #0]
        }
        
        if (update_dots)
   849ee:	4b43      	ldr	r3, [pc, #268]	; (84afc <noOS_bootup_sequence+0x19c>)
   849f0:	781b      	ldrb	r3, [r3, #0]
   849f2:	2b00      	cmp	r3, #0
   849f4:	d02b      	beq.n	84a4e <noOS_bootup_sequence+0xee>
        {
            update_dots = 0;
   849f6:	4b41      	ldr	r3, [pc, #260]	; (84afc <noOS_bootup_sequence+0x19c>)
   849f8:	2200      	movs	r2, #0
   849fa:	701a      	strb	r2, [r3, #0]
            
            switch (dots)
   849fc:	4b3e      	ldr	r3, [pc, #248]	; (84af8 <noOS_bootup_sequence+0x198>)
   849fe:	781b      	ldrb	r3, [r3, #0]
   84a00:	2b03      	cmp	r3, #3
   84a02:	d823      	bhi.n	84a4c <noOS_bootup_sequence+0xec>
   84a04:	a201      	add	r2, pc, #4	; (adr r2, 84a0c <noOS_bootup_sequence+0xac>)
   84a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84a0a:	bf00      	nop
   84a0c:	00084a1d 	.word	0x00084a1d
   84a10:	00084a29 	.word	0x00084a29
   84a14:	00084a35 	.word	0x00084a35
   84a18:	00084a41 	.word	0x00084a41
            {
                case 0:
                lcd_print_s(2, 2, "booting noOS   ");
   84a1c:	4a38      	ldr	r2, [pc, #224]	; (84b00 <noOS_bootup_sequence+0x1a0>)
   84a1e:	2102      	movs	r1, #2
   84a20:	2002      	movs	r0, #2
   84a22:	4b38      	ldr	r3, [pc, #224]	; (84b04 <noOS_bootup_sequence+0x1a4>)
   84a24:	4798      	blx	r3
                break;
   84a26:	e012      	b.n	84a4e <noOS_bootup_sequence+0xee>
                case 1:
                lcd_print_s(2, 14, ".");
   84a28:	4a37      	ldr	r2, [pc, #220]	; (84b08 <noOS_bootup_sequence+0x1a8>)
   84a2a:	210e      	movs	r1, #14
   84a2c:	2002      	movs	r0, #2
   84a2e:	4b35      	ldr	r3, [pc, #212]	; (84b04 <noOS_bootup_sequence+0x1a4>)
   84a30:	4798      	blx	r3
                break;
   84a32:	e00c      	b.n	84a4e <noOS_bootup_sequence+0xee>
                case 2:
                lcd_print_s(2, 15, ".");
   84a34:	4a34      	ldr	r2, [pc, #208]	; (84b08 <noOS_bootup_sequence+0x1a8>)
   84a36:	210f      	movs	r1, #15
   84a38:	2002      	movs	r0, #2
   84a3a:	4b32      	ldr	r3, [pc, #200]	; (84b04 <noOS_bootup_sequence+0x1a4>)
   84a3c:	4798      	blx	r3
                break;
   84a3e:	e006      	b.n	84a4e <noOS_bootup_sequence+0xee>
                case 3:
                lcd_print_s(2, 16, ".");
   84a40:	4a31      	ldr	r2, [pc, #196]	; (84b08 <noOS_bootup_sequence+0x1a8>)
   84a42:	2110      	movs	r1, #16
   84a44:	2002      	movs	r0, #2
   84a46:	4b2f      	ldr	r3, [pc, #188]	; (84b04 <noOS_bootup_sequence+0x1a4>)
   84a48:	4798      	blx	r3
                break;
   84a4a:	e000      	b.n	84a4e <noOS_bootup_sequence+0xee>
                default:
                break;
   84a4c:	bf00      	nop
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   84a4e:	2008      	movs	r0, #8
   84a50:	4b2e      	ldr	r3, [pc, #184]	; (84b0c <noOS_bootup_sequence+0x1ac>)
   84a52:	4798      	blx	r3
   84a54:	4603      	mov	r3, r0
   84a56:	f083 0301 	eor.w	r3, r3, #1
   84a5a:	b2db      	uxtb	r3, r3
   84a5c:	2b00      	cmp	r3, #0
   84a5e:	d006      	beq.n	84a6e <noOS_bootup_sequence+0x10e>
   84a60:	2062      	movs	r0, #98	; 0x62
   84a62:	4b2a      	ldr	r3, [pc, #168]	; (84b0c <noOS_bootup_sequence+0x1ac>)
   84a64:	4798      	blx	r3
   84a66:	4603      	mov	r3, r0
   84a68:	2b00      	cmp	r3, #0
   84a6a:	f47f af7d 	bne.w	84968 <noOS_bootup_sequence+0x8>
            }
        }
    }
    
    for(int i = 0; i< 3; i++)
   84a6e:	2300      	movs	r3, #0
   84a70:	607b      	str	r3, [r7, #4]
   84a72:	e030      	b.n	84ad6 <noOS_bootup_sequence+0x176>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   84a74:	2101      	movs	r1, #1
   84a76:	206a      	movs	r0, #106	; 0x6a
   84a78:	4b1d      	ldr	r3, [pc, #116]	; (84af0 <noOS_bootup_sequence+0x190>)
   84a7a:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 1);
   84a7c:	2101      	movs	r1, #1
   84a7e:	2066      	movs	r0, #102	; 0x66
   84a80:	4b1b      	ldr	r3, [pc, #108]	; (84af0 <noOS_bootup_sequence+0x190>)
   84a82:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 1);
   84a84:	2101      	movs	r1, #1
   84a86:	2067      	movs	r0, #103	; 0x67
   84a88:	4b19      	ldr	r3, [pc, #100]	; (84af0 <noOS_bootup_sequence+0x190>)
   84a8a:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 1);
   84a8c:	2101      	movs	r1, #1
   84a8e:	2068      	movs	r0, #104	; 0x68
   84a90:	4b17      	ldr	r3, [pc, #92]	; (84af0 <noOS_bootup_sequence+0x190>)
   84a92:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 1);
   84a94:	2101      	movs	r1, #1
   84a96:	2069      	movs	r0, #105	; 0x69
   84a98:	4b15      	ldr	r3, [pc, #84]	; (84af0 <noOS_bootup_sequence+0x190>)
   84a9a:	4798      	blx	r3
        mdelay(100);
   84a9c:	2064      	movs	r0, #100	; 0x64
   84a9e:	4b1c      	ldr	r3, [pc, #112]	; (84b10 <noOS_bootup_sequence+0x1b0>)
   84aa0:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   84aa2:	2100      	movs	r1, #0
   84aa4:	206a      	movs	r0, #106	; 0x6a
   84aa6:	4b12      	ldr	r3, [pc, #72]	; (84af0 <noOS_bootup_sequence+0x190>)
   84aa8:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   84aaa:	2100      	movs	r1, #0
   84aac:	2066      	movs	r0, #102	; 0x66
   84aae:	4b10      	ldr	r3, [pc, #64]	; (84af0 <noOS_bootup_sequence+0x190>)
   84ab0:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   84ab2:	2100      	movs	r1, #0
   84ab4:	2067      	movs	r0, #103	; 0x67
   84ab6:	4b0e      	ldr	r3, [pc, #56]	; (84af0 <noOS_bootup_sequence+0x190>)
   84ab8:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   84aba:	2100      	movs	r1, #0
   84abc:	2068      	movs	r0, #104	; 0x68
   84abe:	4b0c      	ldr	r3, [pc, #48]	; (84af0 <noOS_bootup_sequence+0x190>)
   84ac0:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   84ac2:	2100      	movs	r1, #0
   84ac4:	2069      	movs	r0, #105	; 0x69
   84ac6:	4b0a      	ldr	r3, [pc, #40]	; (84af0 <noOS_bootup_sequence+0x190>)
   84ac8:	4798      	blx	r3
        mdelay(100);
   84aca:	2064      	movs	r0, #100	; 0x64
   84acc:	4b10      	ldr	r3, [pc, #64]	; (84b10 <noOS_bootup_sequence+0x1b0>)
   84ace:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   84ad0:	687b      	ldr	r3, [r7, #4]
   84ad2:	3301      	adds	r3, #1
   84ad4:	607b      	str	r3, [r7, #4]
   84ad6:	687b      	ldr	r3, [r7, #4]
   84ad8:	2b02      	cmp	r3, #2
   84ada:	ddcb      	ble.n	84a74 <noOS_bootup_sequence+0x114>
    }
}
   84adc:	bf00      	nop
   84ade:	3708      	adds	r7, #8
   84ae0:	46bd      	mov	sp, r7
   84ae2:	bd80      	pop	{r7, pc}
   84ae4:	0008337d 	.word	0x0008337d
   84ae8:	20070fd4 	.word	0x20070fd4
   84aec:	20070fd0 	.word	0x20070fd0
   84af0:	000847e9 	.word	0x000847e9
   84af4:	20070fd8 	.word	0x20070fd8
   84af8:	20070dd4 	.word	0x20070dd4
   84afc:	200701a0 	.word	0x200701a0
   84b00:	00089b90 	.word	0x00089b90
   84b04:	00081a2d 	.word	0x00081a2d
   84b08:	00089ba0 	.word	0x00089ba0
   84b0c:	00084853 	.word	0x00084853
   84b10:	00083391 	.word	0x00083391

00084b14 <set_led>:

void set_led(ioport_pin_t pin, Bool level)
{
   84b14:	b580      	push	{r7, lr}
   84b16:	b082      	sub	sp, #8
   84b18:	af00      	add	r7, sp, #0
   84b1a:	6078      	str	r0, [r7, #4]
   84b1c:	460b      	mov	r3, r1
   84b1e:	70fb      	strb	r3, [r7, #3]
    if (allow_leds)
   84b20:	4b0b      	ldr	r3, [pc, #44]	; (84b50 <set_led+0x3c>)
   84b22:	781b      	ldrb	r3, [r3, #0]
   84b24:	2b00      	cmp	r3, #0
   84b26:	d00a      	beq.n	84b3e <set_led+0x2a>
    {
        ioport_set_pin_level(pin, level);
   84b28:	78fb      	ldrb	r3, [r7, #3]
   84b2a:	2b00      	cmp	r3, #0
   84b2c:	bf14      	ite	ne
   84b2e:	2301      	movne	r3, #1
   84b30:	2300      	moveq	r3, #0
   84b32:	b2db      	uxtb	r3, r3
   84b34:	4619      	mov	r1, r3
   84b36:	6878      	ldr	r0, [r7, #4]
   84b38:	4b06      	ldr	r3, [pc, #24]	; (84b54 <set_led+0x40>)
   84b3a:	4798      	blx	r3
    }
    else
    {
        ioport_set_pin_level(pin, 0);
    }
}
   84b3c:	e003      	b.n	84b46 <set_led+0x32>
        ioport_set_pin_level(pin, 0);
   84b3e:	2100      	movs	r1, #0
   84b40:	6878      	ldr	r0, [r7, #4]
   84b42:	4b04      	ldr	r3, [pc, #16]	; (84b54 <set_led+0x40>)
   84b44:	4798      	blx	r3
}
   84b46:	bf00      	nop
   84b48:	3708      	adds	r7, #8
   84b4a:	46bd      	mov	sp, r7
   84b4c:	bd80      	pop	{r7, pc}
   84b4e:	bf00      	nop
   84b50:	2007018d 	.word	0x2007018d
   84b54:	000847e9 	.word	0x000847e9

00084b58 <__aeabi_drsub>:
   84b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   84b5c:	e002      	b.n	84b64 <__adddf3>
   84b5e:	bf00      	nop

00084b60 <__aeabi_dsub>:
   84b60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00084b64 <__adddf3>:
   84b64:	b530      	push	{r4, r5, lr}
   84b66:	ea4f 0441 	mov.w	r4, r1, lsl #1
   84b6a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   84b6e:	ea94 0f05 	teq	r4, r5
   84b72:	bf08      	it	eq
   84b74:	ea90 0f02 	teqeq	r0, r2
   84b78:	bf1f      	itttt	ne
   84b7a:	ea54 0c00 	orrsne.w	ip, r4, r0
   84b7e:	ea55 0c02 	orrsne.w	ip, r5, r2
   84b82:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   84b86:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   84b8a:	f000 80e2 	beq.w	84d52 <__adddf3+0x1ee>
   84b8e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   84b92:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   84b96:	bfb8      	it	lt
   84b98:	426d      	neglt	r5, r5
   84b9a:	dd0c      	ble.n	84bb6 <__adddf3+0x52>
   84b9c:	442c      	add	r4, r5
   84b9e:	ea80 0202 	eor.w	r2, r0, r2
   84ba2:	ea81 0303 	eor.w	r3, r1, r3
   84ba6:	ea82 0000 	eor.w	r0, r2, r0
   84baa:	ea83 0101 	eor.w	r1, r3, r1
   84bae:	ea80 0202 	eor.w	r2, r0, r2
   84bb2:	ea81 0303 	eor.w	r3, r1, r3
   84bb6:	2d36      	cmp	r5, #54	; 0x36
   84bb8:	bf88      	it	hi
   84bba:	bd30      	pophi	{r4, r5, pc}
   84bbc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   84bc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84bc4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   84bc8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   84bcc:	d002      	beq.n	84bd4 <__adddf3+0x70>
   84bce:	4240      	negs	r0, r0
   84bd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84bd4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   84bd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   84bdc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   84be0:	d002      	beq.n	84be8 <__adddf3+0x84>
   84be2:	4252      	negs	r2, r2
   84be4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84be8:	ea94 0f05 	teq	r4, r5
   84bec:	f000 80a7 	beq.w	84d3e <__adddf3+0x1da>
   84bf0:	f1a4 0401 	sub.w	r4, r4, #1
   84bf4:	f1d5 0e20 	rsbs	lr, r5, #32
   84bf8:	db0d      	blt.n	84c16 <__adddf3+0xb2>
   84bfa:	fa02 fc0e 	lsl.w	ip, r2, lr
   84bfe:	fa22 f205 	lsr.w	r2, r2, r5
   84c02:	1880      	adds	r0, r0, r2
   84c04:	f141 0100 	adc.w	r1, r1, #0
   84c08:	fa03 f20e 	lsl.w	r2, r3, lr
   84c0c:	1880      	adds	r0, r0, r2
   84c0e:	fa43 f305 	asr.w	r3, r3, r5
   84c12:	4159      	adcs	r1, r3
   84c14:	e00e      	b.n	84c34 <__adddf3+0xd0>
   84c16:	f1a5 0520 	sub.w	r5, r5, #32
   84c1a:	f10e 0e20 	add.w	lr, lr, #32
   84c1e:	2a01      	cmp	r2, #1
   84c20:	fa03 fc0e 	lsl.w	ip, r3, lr
   84c24:	bf28      	it	cs
   84c26:	f04c 0c02 	orrcs.w	ip, ip, #2
   84c2a:	fa43 f305 	asr.w	r3, r3, r5
   84c2e:	18c0      	adds	r0, r0, r3
   84c30:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   84c34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84c38:	d507      	bpl.n	84c4a <__adddf3+0xe6>
   84c3a:	f04f 0e00 	mov.w	lr, #0
   84c3e:	f1dc 0c00 	rsbs	ip, ip, #0
   84c42:	eb7e 0000 	sbcs.w	r0, lr, r0
   84c46:	eb6e 0101 	sbc.w	r1, lr, r1
   84c4a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   84c4e:	d31b      	bcc.n	84c88 <__adddf3+0x124>
   84c50:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   84c54:	d30c      	bcc.n	84c70 <__adddf3+0x10c>
   84c56:	0849      	lsrs	r1, r1, #1
   84c58:	ea5f 0030 	movs.w	r0, r0, rrx
   84c5c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   84c60:	f104 0401 	add.w	r4, r4, #1
   84c64:	ea4f 5244 	mov.w	r2, r4, lsl #21
   84c68:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   84c6c:	f080 809a 	bcs.w	84da4 <__adddf3+0x240>
   84c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84c74:	bf08      	it	eq
   84c76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   84c7a:	f150 0000 	adcs.w	r0, r0, #0
   84c7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84c82:	ea41 0105 	orr.w	r1, r1, r5
   84c86:	bd30      	pop	{r4, r5, pc}
   84c88:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   84c8c:	4140      	adcs	r0, r0
   84c8e:	eb41 0101 	adc.w	r1, r1, r1
   84c92:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84c96:	f1a4 0401 	sub.w	r4, r4, #1
   84c9a:	d1e9      	bne.n	84c70 <__adddf3+0x10c>
   84c9c:	f091 0f00 	teq	r1, #0
   84ca0:	bf04      	itt	eq
   84ca2:	4601      	moveq	r1, r0
   84ca4:	2000      	moveq	r0, #0
   84ca6:	fab1 f381 	clz	r3, r1
   84caa:	bf08      	it	eq
   84cac:	3320      	addeq	r3, #32
   84cae:	f1a3 030b 	sub.w	r3, r3, #11
   84cb2:	f1b3 0220 	subs.w	r2, r3, #32
   84cb6:	da0c      	bge.n	84cd2 <__adddf3+0x16e>
   84cb8:	320c      	adds	r2, #12
   84cba:	dd08      	ble.n	84cce <__adddf3+0x16a>
   84cbc:	f102 0c14 	add.w	ip, r2, #20
   84cc0:	f1c2 020c 	rsb	r2, r2, #12
   84cc4:	fa01 f00c 	lsl.w	r0, r1, ip
   84cc8:	fa21 f102 	lsr.w	r1, r1, r2
   84ccc:	e00c      	b.n	84ce8 <__adddf3+0x184>
   84cce:	f102 0214 	add.w	r2, r2, #20
   84cd2:	bfd8      	it	le
   84cd4:	f1c2 0c20 	rsble	ip, r2, #32
   84cd8:	fa01 f102 	lsl.w	r1, r1, r2
   84cdc:	fa20 fc0c 	lsr.w	ip, r0, ip
   84ce0:	bfdc      	itt	le
   84ce2:	ea41 010c 	orrle.w	r1, r1, ip
   84ce6:	4090      	lslle	r0, r2
   84ce8:	1ae4      	subs	r4, r4, r3
   84cea:	bfa2      	ittt	ge
   84cec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   84cf0:	4329      	orrge	r1, r5
   84cf2:	bd30      	popge	{r4, r5, pc}
   84cf4:	ea6f 0404 	mvn.w	r4, r4
   84cf8:	3c1f      	subs	r4, #31
   84cfa:	da1c      	bge.n	84d36 <__adddf3+0x1d2>
   84cfc:	340c      	adds	r4, #12
   84cfe:	dc0e      	bgt.n	84d1e <__adddf3+0x1ba>
   84d00:	f104 0414 	add.w	r4, r4, #20
   84d04:	f1c4 0220 	rsb	r2, r4, #32
   84d08:	fa20 f004 	lsr.w	r0, r0, r4
   84d0c:	fa01 f302 	lsl.w	r3, r1, r2
   84d10:	ea40 0003 	orr.w	r0, r0, r3
   84d14:	fa21 f304 	lsr.w	r3, r1, r4
   84d18:	ea45 0103 	orr.w	r1, r5, r3
   84d1c:	bd30      	pop	{r4, r5, pc}
   84d1e:	f1c4 040c 	rsb	r4, r4, #12
   84d22:	f1c4 0220 	rsb	r2, r4, #32
   84d26:	fa20 f002 	lsr.w	r0, r0, r2
   84d2a:	fa01 f304 	lsl.w	r3, r1, r4
   84d2e:	ea40 0003 	orr.w	r0, r0, r3
   84d32:	4629      	mov	r1, r5
   84d34:	bd30      	pop	{r4, r5, pc}
   84d36:	fa21 f004 	lsr.w	r0, r1, r4
   84d3a:	4629      	mov	r1, r5
   84d3c:	bd30      	pop	{r4, r5, pc}
   84d3e:	f094 0f00 	teq	r4, #0
   84d42:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   84d46:	bf06      	itte	eq
   84d48:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   84d4c:	3401      	addeq	r4, #1
   84d4e:	3d01      	subne	r5, #1
   84d50:	e74e      	b.n	84bf0 <__adddf3+0x8c>
   84d52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84d56:	bf18      	it	ne
   84d58:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   84d5c:	d029      	beq.n	84db2 <__adddf3+0x24e>
   84d5e:	ea94 0f05 	teq	r4, r5
   84d62:	bf08      	it	eq
   84d64:	ea90 0f02 	teqeq	r0, r2
   84d68:	d005      	beq.n	84d76 <__adddf3+0x212>
   84d6a:	ea54 0c00 	orrs.w	ip, r4, r0
   84d6e:	bf04      	itt	eq
   84d70:	4619      	moveq	r1, r3
   84d72:	4610      	moveq	r0, r2
   84d74:	bd30      	pop	{r4, r5, pc}
   84d76:	ea91 0f03 	teq	r1, r3
   84d7a:	bf1e      	ittt	ne
   84d7c:	2100      	movne	r1, #0
   84d7e:	2000      	movne	r0, #0
   84d80:	bd30      	popne	{r4, r5, pc}
   84d82:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   84d86:	d105      	bne.n	84d94 <__adddf3+0x230>
   84d88:	0040      	lsls	r0, r0, #1
   84d8a:	4149      	adcs	r1, r1
   84d8c:	bf28      	it	cs
   84d8e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   84d92:	bd30      	pop	{r4, r5, pc}
   84d94:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   84d98:	bf3c      	itt	cc
   84d9a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   84d9e:	bd30      	popcc	{r4, r5, pc}
   84da0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84da4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   84da8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84dac:	f04f 0000 	mov.w	r0, #0
   84db0:	bd30      	pop	{r4, r5, pc}
   84db2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84db6:	bf1a      	itte	ne
   84db8:	4619      	movne	r1, r3
   84dba:	4610      	movne	r0, r2
   84dbc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   84dc0:	bf1c      	itt	ne
   84dc2:	460b      	movne	r3, r1
   84dc4:	4602      	movne	r2, r0
   84dc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   84dca:	bf06      	itte	eq
   84dcc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   84dd0:	ea91 0f03 	teqeq	r1, r3
   84dd4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   84dd8:	bd30      	pop	{r4, r5, pc}
   84dda:	bf00      	nop

00084ddc <__aeabi_ui2d>:
   84ddc:	f090 0f00 	teq	r0, #0
   84de0:	bf04      	itt	eq
   84de2:	2100      	moveq	r1, #0
   84de4:	4770      	bxeq	lr
   84de6:	b530      	push	{r4, r5, lr}
   84de8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84dec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84df0:	f04f 0500 	mov.w	r5, #0
   84df4:	f04f 0100 	mov.w	r1, #0
   84df8:	e750      	b.n	84c9c <__adddf3+0x138>
   84dfa:	bf00      	nop

00084dfc <__aeabi_i2d>:
   84dfc:	f090 0f00 	teq	r0, #0
   84e00:	bf04      	itt	eq
   84e02:	2100      	moveq	r1, #0
   84e04:	4770      	bxeq	lr
   84e06:	b530      	push	{r4, r5, lr}
   84e08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84e0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84e10:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   84e14:	bf48      	it	mi
   84e16:	4240      	negmi	r0, r0
   84e18:	f04f 0100 	mov.w	r1, #0
   84e1c:	e73e      	b.n	84c9c <__adddf3+0x138>
   84e1e:	bf00      	nop

00084e20 <__aeabi_f2d>:
   84e20:	0042      	lsls	r2, r0, #1
   84e22:	ea4f 01e2 	mov.w	r1, r2, asr #3
   84e26:	ea4f 0131 	mov.w	r1, r1, rrx
   84e2a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   84e2e:	bf1f      	itttt	ne
   84e30:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   84e34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84e38:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   84e3c:	4770      	bxne	lr
   84e3e:	f092 0f00 	teq	r2, #0
   84e42:	bf14      	ite	ne
   84e44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84e48:	4770      	bxeq	lr
   84e4a:	b530      	push	{r4, r5, lr}
   84e4c:	f44f 7460 	mov.w	r4, #896	; 0x380
   84e50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84e54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84e58:	e720      	b.n	84c9c <__adddf3+0x138>
   84e5a:	bf00      	nop

00084e5c <__aeabi_ul2d>:
   84e5c:	ea50 0201 	orrs.w	r2, r0, r1
   84e60:	bf08      	it	eq
   84e62:	4770      	bxeq	lr
   84e64:	b530      	push	{r4, r5, lr}
   84e66:	f04f 0500 	mov.w	r5, #0
   84e6a:	e00a      	b.n	84e82 <__aeabi_l2d+0x16>

00084e6c <__aeabi_l2d>:
   84e6c:	ea50 0201 	orrs.w	r2, r0, r1
   84e70:	bf08      	it	eq
   84e72:	4770      	bxeq	lr
   84e74:	b530      	push	{r4, r5, lr}
   84e76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   84e7a:	d502      	bpl.n	84e82 <__aeabi_l2d+0x16>
   84e7c:	4240      	negs	r0, r0
   84e7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84e82:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84e86:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84e8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   84e8e:	f43f aedc 	beq.w	84c4a <__adddf3+0xe6>
   84e92:	f04f 0203 	mov.w	r2, #3
   84e96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84e9a:	bf18      	it	ne
   84e9c:	3203      	addne	r2, #3
   84e9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84ea2:	bf18      	it	ne
   84ea4:	3203      	addne	r2, #3
   84ea6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   84eaa:	f1c2 0320 	rsb	r3, r2, #32
   84eae:	fa00 fc03 	lsl.w	ip, r0, r3
   84eb2:	fa20 f002 	lsr.w	r0, r0, r2
   84eb6:	fa01 fe03 	lsl.w	lr, r1, r3
   84eba:	ea40 000e 	orr.w	r0, r0, lr
   84ebe:	fa21 f102 	lsr.w	r1, r1, r2
   84ec2:	4414      	add	r4, r2
   84ec4:	e6c1      	b.n	84c4a <__adddf3+0xe6>
   84ec6:	bf00      	nop

00084ec8 <__aeabi_dmul>:
   84ec8:	b570      	push	{r4, r5, r6, lr}
   84eca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84ece:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   84ed2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   84ed6:	bf1d      	ittte	ne
   84ed8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84edc:	ea94 0f0c 	teqne	r4, ip
   84ee0:	ea95 0f0c 	teqne	r5, ip
   84ee4:	f000 f8de 	bleq	850a4 <__aeabi_dmul+0x1dc>
   84ee8:	442c      	add	r4, r5
   84eea:	ea81 0603 	eor.w	r6, r1, r3
   84eee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   84ef2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   84ef6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   84efa:	bf18      	it	ne
   84efc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   84f00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   84f08:	d038      	beq.n	84f7c <__aeabi_dmul+0xb4>
   84f0a:	fba0 ce02 	umull	ip, lr, r0, r2
   84f0e:	f04f 0500 	mov.w	r5, #0
   84f12:	fbe1 e502 	umlal	lr, r5, r1, r2
   84f16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   84f1a:	fbe0 e503 	umlal	lr, r5, r0, r3
   84f1e:	f04f 0600 	mov.w	r6, #0
   84f22:	fbe1 5603 	umlal	r5, r6, r1, r3
   84f26:	f09c 0f00 	teq	ip, #0
   84f2a:	bf18      	it	ne
   84f2c:	f04e 0e01 	orrne.w	lr, lr, #1
   84f30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   84f34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   84f38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   84f3c:	d204      	bcs.n	84f48 <__aeabi_dmul+0x80>
   84f3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   84f42:	416d      	adcs	r5, r5
   84f44:	eb46 0606 	adc.w	r6, r6, r6
   84f48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   84f4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   84f50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   84f54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   84f58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   84f5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84f60:	bf88      	it	hi
   84f62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   84f66:	d81e      	bhi.n	84fa6 <__aeabi_dmul+0xde>
   84f68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   84f6c:	bf08      	it	eq
   84f6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   84f72:	f150 0000 	adcs.w	r0, r0, #0
   84f76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84f7a:	bd70      	pop	{r4, r5, r6, pc}
   84f7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   84f80:	ea46 0101 	orr.w	r1, r6, r1
   84f84:	ea40 0002 	orr.w	r0, r0, r2
   84f88:	ea81 0103 	eor.w	r1, r1, r3
   84f8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   84f90:	bfc2      	ittt	gt
   84f92:	ebd4 050c 	rsbsgt	r5, r4, ip
   84f96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84f9a:	bd70      	popgt	{r4, r5, r6, pc}
   84f9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84fa0:	f04f 0e00 	mov.w	lr, #0
   84fa4:	3c01      	subs	r4, #1
   84fa6:	f300 80ab 	bgt.w	85100 <__aeabi_dmul+0x238>
   84faa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   84fae:	bfde      	ittt	le
   84fb0:	2000      	movle	r0, #0
   84fb2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   84fb6:	bd70      	pople	{r4, r5, r6, pc}
   84fb8:	f1c4 0400 	rsb	r4, r4, #0
   84fbc:	3c20      	subs	r4, #32
   84fbe:	da35      	bge.n	8502c <__aeabi_dmul+0x164>
   84fc0:	340c      	adds	r4, #12
   84fc2:	dc1b      	bgt.n	84ffc <__aeabi_dmul+0x134>
   84fc4:	f104 0414 	add.w	r4, r4, #20
   84fc8:	f1c4 0520 	rsb	r5, r4, #32
   84fcc:	fa00 f305 	lsl.w	r3, r0, r5
   84fd0:	fa20 f004 	lsr.w	r0, r0, r4
   84fd4:	fa01 f205 	lsl.w	r2, r1, r5
   84fd8:	ea40 0002 	orr.w	r0, r0, r2
   84fdc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   84fe0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84fe4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84fe8:	fa21 f604 	lsr.w	r6, r1, r4
   84fec:	eb42 0106 	adc.w	r1, r2, r6
   84ff0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84ff4:	bf08      	it	eq
   84ff6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84ffa:	bd70      	pop	{r4, r5, r6, pc}
   84ffc:	f1c4 040c 	rsb	r4, r4, #12
   85000:	f1c4 0520 	rsb	r5, r4, #32
   85004:	fa00 f304 	lsl.w	r3, r0, r4
   85008:	fa20 f005 	lsr.w	r0, r0, r5
   8500c:	fa01 f204 	lsl.w	r2, r1, r4
   85010:	ea40 0002 	orr.w	r0, r0, r2
   85014:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   85018:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8501c:	f141 0100 	adc.w	r1, r1, #0
   85020:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   85024:	bf08      	it	eq
   85026:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8502a:	bd70      	pop	{r4, r5, r6, pc}
   8502c:	f1c4 0520 	rsb	r5, r4, #32
   85030:	fa00 f205 	lsl.w	r2, r0, r5
   85034:	ea4e 0e02 	orr.w	lr, lr, r2
   85038:	fa20 f304 	lsr.w	r3, r0, r4
   8503c:	fa01 f205 	lsl.w	r2, r1, r5
   85040:	ea43 0302 	orr.w	r3, r3, r2
   85044:	fa21 f004 	lsr.w	r0, r1, r4
   85048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8504c:	fa21 f204 	lsr.w	r2, r1, r4
   85050:	ea20 0002 	bic.w	r0, r0, r2
   85054:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   85058:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8505c:	bf08      	it	eq
   8505e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   85062:	bd70      	pop	{r4, r5, r6, pc}
   85064:	f094 0f00 	teq	r4, #0
   85068:	d10f      	bne.n	8508a <__aeabi_dmul+0x1c2>
   8506a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8506e:	0040      	lsls	r0, r0, #1
   85070:	eb41 0101 	adc.w	r1, r1, r1
   85074:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85078:	bf08      	it	eq
   8507a:	3c01      	subeq	r4, #1
   8507c:	d0f7      	beq.n	8506e <__aeabi_dmul+0x1a6>
   8507e:	ea41 0106 	orr.w	r1, r1, r6
   85082:	f095 0f00 	teq	r5, #0
   85086:	bf18      	it	ne
   85088:	4770      	bxne	lr
   8508a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8508e:	0052      	lsls	r2, r2, #1
   85090:	eb43 0303 	adc.w	r3, r3, r3
   85094:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   85098:	bf08      	it	eq
   8509a:	3d01      	subeq	r5, #1
   8509c:	d0f7      	beq.n	8508e <__aeabi_dmul+0x1c6>
   8509e:	ea43 0306 	orr.w	r3, r3, r6
   850a2:	4770      	bx	lr
   850a4:	ea94 0f0c 	teq	r4, ip
   850a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   850ac:	bf18      	it	ne
   850ae:	ea95 0f0c 	teqne	r5, ip
   850b2:	d00c      	beq.n	850ce <__aeabi_dmul+0x206>
   850b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   850b8:	bf18      	it	ne
   850ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   850be:	d1d1      	bne.n	85064 <__aeabi_dmul+0x19c>
   850c0:	ea81 0103 	eor.w	r1, r1, r3
   850c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   850c8:	f04f 0000 	mov.w	r0, #0
   850cc:	bd70      	pop	{r4, r5, r6, pc}
   850ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   850d2:	bf06      	itte	eq
   850d4:	4610      	moveq	r0, r2
   850d6:	4619      	moveq	r1, r3
   850d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   850dc:	d019      	beq.n	85112 <__aeabi_dmul+0x24a>
   850de:	ea94 0f0c 	teq	r4, ip
   850e2:	d102      	bne.n	850ea <__aeabi_dmul+0x222>
   850e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   850e8:	d113      	bne.n	85112 <__aeabi_dmul+0x24a>
   850ea:	ea95 0f0c 	teq	r5, ip
   850ee:	d105      	bne.n	850fc <__aeabi_dmul+0x234>
   850f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   850f4:	bf1c      	itt	ne
   850f6:	4610      	movne	r0, r2
   850f8:	4619      	movne	r1, r3
   850fa:	d10a      	bne.n	85112 <__aeabi_dmul+0x24a>
   850fc:	ea81 0103 	eor.w	r1, r1, r3
   85100:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   85104:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   85108:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8510c:	f04f 0000 	mov.w	r0, #0
   85110:	bd70      	pop	{r4, r5, r6, pc}
   85112:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   85116:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8511a:	bd70      	pop	{r4, r5, r6, pc}

0008511c <__aeabi_ddiv>:
   8511c:	b570      	push	{r4, r5, r6, lr}
   8511e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85122:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   85126:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8512a:	bf1d      	ittte	ne
   8512c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   85130:	ea94 0f0c 	teqne	r4, ip
   85134:	ea95 0f0c 	teqne	r5, ip
   85138:	f000 f8a7 	bleq	8528a <__aeabi_ddiv+0x16e>
   8513c:	eba4 0405 	sub.w	r4, r4, r5
   85140:	ea81 0e03 	eor.w	lr, r1, r3
   85144:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   85148:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8514c:	f000 8088 	beq.w	85260 <__aeabi_ddiv+0x144>
   85150:	ea4f 3303 	mov.w	r3, r3, lsl #12
   85154:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   85158:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8515c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   85160:	ea4f 2202 	mov.w	r2, r2, lsl #8
   85164:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   85168:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8516c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   85170:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   85174:	429d      	cmp	r5, r3
   85176:	bf08      	it	eq
   85178:	4296      	cmpeq	r6, r2
   8517a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8517e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   85182:	d202      	bcs.n	8518a <__aeabi_ddiv+0x6e>
   85184:	085b      	lsrs	r3, r3, #1
   85186:	ea4f 0232 	mov.w	r2, r2, rrx
   8518a:	1ab6      	subs	r6, r6, r2
   8518c:	eb65 0503 	sbc.w	r5, r5, r3
   85190:	085b      	lsrs	r3, r3, #1
   85192:	ea4f 0232 	mov.w	r2, r2, rrx
   85196:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8519a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8519e:	ebb6 0e02 	subs.w	lr, r6, r2
   851a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   851a6:	bf22      	ittt	cs
   851a8:	1ab6      	subcs	r6, r6, r2
   851aa:	4675      	movcs	r5, lr
   851ac:	ea40 000c 	orrcs.w	r0, r0, ip
   851b0:	085b      	lsrs	r3, r3, #1
   851b2:	ea4f 0232 	mov.w	r2, r2, rrx
   851b6:	ebb6 0e02 	subs.w	lr, r6, r2
   851ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   851be:	bf22      	ittt	cs
   851c0:	1ab6      	subcs	r6, r6, r2
   851c2:	4675      	movcs	r5, lr
   851c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   851c8:	085b      	lsrs	r3, r3, #1
   851ca:	ea4f 0232 	mov.w	r2, r2, rrx
   851ce:	ebb6 0e02 	subs.w	lr, r6, r2
   851d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   851d6:	bf22      	ittt	cs
   851d8:	1ab6      	subcs	r6, r6, r2
   851da:	4675      	movcs	r5, lr
   851dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   851e0:	085b      	lsrs	r3, r3, #1
   851e2:	ea4f 0232 	mov.w	r2, r2, rrx
   851e6:	ebb6 0e02 	subs.w	lr, r6, r2
   851ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   851ee:	bf22      	ittt	cs
   851f0:	1ab6      	subcs	r6, r6, r2
   851f2:	4675      	movcs	r5, lr
   851f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   851f8:	ea55 0e06 	orrs.w	lr, r5, r6
   851fc:	d018      	beq.n	85230 <__aeabi_ddiv+0x114>
   851fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   85202:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   85206:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8520a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8520e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   85212:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   85216:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8521a:	d1c0      	bne.n	8519e <__aeabi_ddiv+0x82>
   8521c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85220:	d10b      	bne.n	8523a <__aeabi_ddiv+0x11e>
   85222:	ea41 0100 	orr.w	r1, r1, r0
   85226:	f04f 0000 	mov.w	r0, #0
   8522a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8522e:	e7b6      	b.n	8519e <__aeabi_ddiv+0x82>
   85230:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85234:	bf04      	itt	eq
   85236:	4301      	orreq	r1, r0
   85238:	2000      	moveq	r0, #0
   8523a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8523e:	bf88      	it	hi
   85240:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   85244:	f63f aeaf 	bhi.w	84fa6 <__aeabi_dmul+0xde>
   85248:	ebb5 0c03 	subs.w	ip, r5, r3
   8524c:	bf04      	itt	eq
   8524e:	ebb6 0c02 	subseq.w	ip, r6, r2
   85252:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   85256:	f150 0000 	adcs.w	r0, r0, #0
   8525a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8525e:	bd70      	pop	{r4, r5, r6, pc}
   85260:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   85264:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   85268:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8526c:	bfc2      	ittt	gt
   8526e:	ebd4 050c 	rsbsgt	r5, r4, ip
   85272:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   85276:	bd70      	popgt	{r4, r5, r6, pc}
   85278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8527c:	f04f 0e00 	mov.w	lr, #0
   85280:	3c01      	subs	r4, #1
   85282:	e690      	b.n	84fa6 <__aeabi_dmul+0xde>
   85284:	ea45 0e06 	orr.w	lr, r5, r6
   85288:	e68d      	b.n	84fa6 <__aeabi_dmul+0xde>
   8528a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8528e:	ea94 0f0c 	teq	r4, ip
   85292:	bf08      	it	eq
   85294:	ea95 0f0c 	teqeq	r5, ip
   85298:	f43f af3b 	beq.w	85112 <__aeabi_dmul+0x24a>
   8529c:	ea94 0f0c 	teq	r4, ip
   852a0:	d10a      	bne.n	852b8 <__aeabi_ddiv+0x19c>
   852a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   852a6:	f47f af34 	bne.w	85112 <__aeabi_dmul+0x24a>
   852aa:	ea95 0f0c 	teq	r5, ip
   852ae:	f47f af25 	bne.w	850fc <__aeabi_dmul+0x234>
   852b2:	4610      	mov	r0, r2
   852b4:	4619      	mov	r1, r3
   852b6:	e72c      	b.n	85112 <__aeabi_dmul+0x24a>
   852b8:	ea95 0f0c 	teq	r5, ip
   852bc:	d106      	bne.n	852cc <__aeabi_ddiv+0x1b0>
   852be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   852c2:	f43f aefd 	beq.w	850c0 <__aeabi_dmul+0x1f8>
   852c6:	4610      	mov	r0, r2
   852c8:	4619      	mov	r1, r3
   852ca:	e722      	b.n	85112 <__aeabi_dmul+0x24a>
   852cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   852d0:	bf18      	it	ne
   852d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   852d6:	f47f aec5 	bne.w	85064 <__aeabi_dmul+0x19c>
   852da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   852de:	f47f af0d 	bne.w	850fc <__aeabi_dmul+0x234>
   852e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   852e6:	f47f aeeb 	bne.w	850c0 <__aeabi_dmul+0x1f8>
   852ea:	e712      	b.n	85112 <__aeabi_dmul+0x24a>

000852ec <__aeabi_frsub>:
   852ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   852f0:	e002      	b.n	852f8 <__addsf3>
   852f2:	bf00      	nop

000852f4 <__aeabi_fsub>:
   852f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000852f8 <__addsf3>:
   852f8:	0042      	lsls	r2, r0, #1
   852fa:	bf1f      	itttt	ne
   852fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   85300:	ea92 0f03 	teqne	r2, r3
   85304:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   85308:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8530c:	d06a      	beq.n	853e4 <__addsf3+0xec>
   8530e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   85312:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   85316:	bfc1      	itttt	gt
   85318:	18d2      	addgt	r2, r2, r3
   8531a:	4041      	eorgt	r1, r0
   8531c:	4048      	eorgt	r0, r1
   8531e:	4041      	eorgt	r1, r0
   85320:	bfb8      	it	lt
   85322:	425b      	neglt	r3, r3
   85324:	2b19      	cmp	r3, #25
   85326:	bf88      	it	hi
   85328:	4770      	bxhi	lr
   8532a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8532e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85332:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   85336:	bf18      	it	ne
   85338:	4240      	negne	r0, r0
   8533a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8533e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   85342:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   85346:	bf18      	it	ne
   85348:	4249      	negne	r1, r1
   8534a:	ea92 0f03 	teq	r2, r3
   8534e:	d03f      	beq.n	853d0 <__addsf3+0xd8>
   85350:	f1a2 0201 	sub.w	r2, r2, #1
   85354:	fa41 fc03 	asr.w	ip, r1, r3
   85358:	eb10 000c 	adds.w	r0, r0, ip
   8535c:	f1c3 0320 	rsb	r3, r3, #32
   85360:	fa01 f103 	lsl.w	r1, r1, r3
   85364:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   85368:	d502      	bpl.n	85370 <__addsf3+0x78>
   8536a:	4249      	negs	r1, r1
   8536c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   85370:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   85374:	d313      	bcc.n	8539e <__addsf3+0xa6>
   85376:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8537a:	d306      	bcc.n	8538a <__addsf3+0x92>
   8537c:	0840      	lsrs	r0, r0, #1
   8537e:	ea4f 0131 	mov.w	r1, r1, rrx
   85382:	f102 0201 	add.w	r2, r2, #1
   85386:	2afe      	cmp	r2, #254	; 0xfe
   85388:	d251      	bcs.n	8542e <__addsf3+0x136>
   8538a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8538e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85392:	bf08      	it	eq
   85394:	f020 0001 	biceq.w	r0, r0, #1
   85398:	ea40 0003 	orr.w	r0, r0, r3
   8539c:	4770      	bx	lr
   8539e:	0049      	lsls	r1, r1, #1
   853a0:	eb40 0000 	adc.w	r0, r0, r0
   853a4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   853a8:	f1a2 0201 	sub.w	r2, r2, #1
   853ac:	d1ed      	bne.n	8538a <__addsf3+0x92>
   853ae:	fab0 fc80 	clz	ip, r0
   853b2:	f1ac 0c08 	sub.w	ip, ip, #8
   853b6:	ebb2 020c 	subs.w	r2, r2, ip
   853ba:	fa00 f00c 	lsl.w	r0, r0, ip
   853be:	bfaa      	itet	ge
   853c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   853c4:	4252      	neglt	r2, r2
   853c6:	4318      	orrge	r0, r3
   853c8:	bfbc      	itt	lt
   853ca:	40d0      	lsrlt	r0, r2
   853cc:	4318      	orrlt	r0, r3
   853ce:	4770      	bx	lr
   853d0:	f092 0f00 	teq	r2, #0
   853d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   853d8:	bf06      	itte	eq
   853da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   853de:	3201      	addeq	r2, #1
   853e0:	3b01      	subne	r3, #1
   853e2:	e7b5      	b.n	85350 <__addsf3+0x58>
   853e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   853e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   853ec:	bf18      	it	ne
   853ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   853f2:	d021      	beq.n	85438 <__addsf3+0x140>
   853f4:	ea92 0f03 	teq	r2, r3
   853f8:	d004      	beq.n	85404 <__addsf3+0x10c>
   853fa:	f092 0f00 	teq	r2, #0
   853fe:	bf08      	it	eq
   85400:	4608      	moveq	r0, r1
   85402:	4770      	bx	lr
   85404:	ea90 0f01 	teq	r0, r1
   85408:	bf1c      	itt	ne
   8540a:	2000      	movne	r0, #0
   8540c:	4770      	bxne	lr
   8540e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   85412:	d104      	bne.n	8541e <__addsf3+0x126>
   85414:	0040      	lsls	r0, r0, #1
   85416:	bf28      	it	cs
   85418:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   8541c:	4770      	bx	lr
   8541e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   85422:	bf3c      	itt	cc
   85424:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   85428:	4770      	bxcc	lr
   8542a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8542e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   85432:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85436:	4770      	bx	lr
   85438:	ea7f 6222 	mvns.w	r2, r2, asr #24
   8543c:	bf16      	itet	ne
   8543e:	4608      	movne	r0, r1
   85440:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   85444:	4601      	movne	r1, r0
   85446:	0242      	lsls	r2, r0, #9
   85448:	bf06      	itte	eq
   8544a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   8544e:	ea90 0f01 	teqeq	r0, r1
   85452:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   85456:	4770      	bx	lr

00085458 <__aeabi_ui2f>:
   85458:	f04f 0300 	mov.w	r3, #0
   8545c:	e004      	b.n	85468 <__aeabi_i2f+0x8>
   8545e:	bf00      	nop

00085460 <__aeabi_i2f>:
   85460:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   85464:	bf48      	it	mi
   85466:	4240      	negmi	r0, r0
   85468:	ea5f 0c00 	movs.w	ip, r0
   8546c:	bf08      	it	eq
   8546e:	4770      	bxeq	lr
   85470:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   85474:	4601      	mov	r1, r0
   85476:	f04f 0000 	mov.w	r0, #0
   8547a:	e01c      	b.n	854b6 <__aeabi_l2f+0x2a>

0008547c <__aeabi_ul2f>:
   8547c:	ea50 0201 	orrs.w	r2, r0, r1
   85480:	bf08      	it	eq
   85482:	4770      	bxeq	lr
   85484:	f04f 0300 	mov.w	r3, #0
   85488:	e00a      	b.n	854a0 <__aeabi_l2f+0x14>
   8548a:	bf00      	nop

0008548c <__aeabi_l2f>:
   8548c:	ea50 0201 	orrs.w	r2, r0, r1
   85490:	bf08      	it	eq
   85492:	4770      	bxeq	lr
   85494:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   85498:	d502      	bpl.n	854a0 <__aeabi_l2f+0x14>
   8549a:	4240      	negs	r0, r0
   8549c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   854a0:	ea5f 0c01 	movs.w	ip, r1
   854a4:	bf02      	ittt	eq
   854a6:	4684      	moveq	ip, r0
   854a8:	4601      	moveq	r1, r0
   854aa:	2000      	moveq	r0, #0
   854ac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   854b0:	bf08      	it	eq
   854b2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   854b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   854ba:	fabc f28c 	clz	r2, ip
   854be:	3a08      	subs	r2, #8
   854c0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   854c4:	db10      	blt.n	854e8 <__aeabi_l2f+0x5c>
   854c6:	fa01 fc02 	lsl.w	ip, r1, r2
   854ca:	4463      	add	r3, ip
   854cc:	fa00 fc02 	lsl.w	ip, r0, r2
   854d0:	f1c2 0220 	rsb	r2, r2, #32
   854d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   854d8:	fa20 f202 	lsr.w	r2, r0, r2
   854dc:	eb43 0002 	adc.w	r0, r3, r2
   854e0:	bf08      	it	eq
   854e2:	f020 0001 	biceq.w	r0, r0, #1
   854e6:	4770      	bx	lr
   854e8:	f102 0220 	add.w	r2, r2, #32
   854ec:	fa01 fc02 	lsl.w	ip, r1, r2
   854f0:	f1c2 0220 	rsb	r2, r2, #32
   854f4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   854f8:	fa21 f202 	lsr.w	r2, r1, r2
   854fc:	eb43 0002 	adc.w	r0, r3, r2
   85500:	bf08      	it	eq
   85502:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   85506:	4770      	bx	lr

00085508 <__aeabi_fmul>:
   85508:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8550c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   85510:	bf1e      	ittt	ne
   85512:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   85516:	ea92 0f0c 	teqne	r2, ip
   8551a:	ea93 0f0c 	teqne	r3, ip
   8551e:	d06f      	beq.n	85600 <__aeabi_fmul+0xf8>
   85520:	441a      	add	r2, r3
   85522:	ea80 0c01 	eor.w	ip, r0, r1
   85526:	0240      	lsls	r0, r0, #9
   85528:	bf18      	it	ne
   8552a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   8552e:	d01e      	beq.n	8556e <__aeabi_fmul+0x66>
   85530:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   85534:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   85538:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   8553c:	fba0 3101 	umull	r3, r1, r0, r1
   85540:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   85544:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   85548:	bf3e      	ittt	cc
   8554a:	0049      	lslcc	r1, r1, #1
   8554c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   85550:	005b      	lslcc	r3, r3, #1
   85552:	ea40 0001 	orr.w	r0, r0, r1
   85556:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   8555a:	2afd      	cmp	r2, #253	; 0xfd
   8555c:	d81d      	bhi.n	8559a <__aeabi_fmul+0x92>
   8555e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   85562:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85566:	bf08      	it	eq
   85568:	f020 0001 	biceq.w	r0, r0, #1
   8556c:	4770      	bx	lr
   8556e:	f090 0f00 	teq	r0, #0
   85572:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   85576:	bf08      	it	eq
   85578:	0249      	lsleq	r1, r1, #9
   8557a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8557e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   85582:	3a7f      	subs	r2, #127	; 0x7f
   85584:	bfc2      	ittt	gt
   85586:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8558a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8558e:	4770      	bxgt	lr
   85590:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85594:	f04f 0300 	mov.w	r3, #0
   85598:	3a01      	subs	r2, #1
   8559a:	dc5d      	bgt.n	85658 <__aeabi_fmul+0x150>
   8559c:	f112 0f19 	cmn.w	r2, #25
   855a0:	bfdc      	itt	le
   855a2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   855a6:	4770      	bxle	lr
   855a8:	f1c2 0200 	rsb	r2, r2, #0
   855ac:	0041      	lsls	r1, r0, #1
   855ae:	fa21 f102 	lsr.w	r1, r1, r2
   855b2:	f1c2 0220 	rsb	r2, r2, #32
   855b6:	fa00 fc02 	lsl.w	ip, r0, r2
   855ba:	ea5f 0031 	movs.w	r0, r1, rrx
   855be:	f140 0000 	adc.w	r0, r0, #0
   855c2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   855c6:	bf08      	it	eq
   855c8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   855cc:	4770      	bx	lr
   855ce:	f092 0f00 	teq	r2, #0
   855d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   855d6:	bf02      	ittt	eq
   855d8:	0040      	lsleq	r0, r0, #1
   855da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   855de:	3a01      	subeq	r2, #1
   855e0:	d0f9      	beq.n	855d6 <__aeabi_fmul+0xce>
   855e2:	ea40 000c 	orr.w	r0, r0, ip
   855e6:	f093 0f00 	teq	r3, #0
   855ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   855ee:	bf02      	ittt	eq
   855f0:	0049      	lsleq	r1, r1, #1
   855f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   855f6:	3b01      	subeq	r3, #1
   855f8:	d0f9      	beq.n	855ee <__aeabi_fmul+0xe6>
   855fa:	ea41 010c 	orr.w	r1, r1, ip
   855fe:	e78f      	b.n	85520 <__aeabi_fmul+0x18>
   85600:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   85604:	ea92 0f0c 	teq	r2, ip
   85608:	bf18      	it	ne
   8560a:	ea93 0f0c 	teqne	r3, ip
   8560e:	d00a      	beq.n	85626 <__aeabi_fmul+0x11e>
   85610:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   85614:	bf18      	it	ne
   85616:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8561a:	d1d8      	bne.n	855ce <__aeabi_fmul+0xc6>
   8561c:	ea80 0001 	eor.w	r0, r0, r1
   85620:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   85624:	4770      	bx	lr
   85626:	f090 0f00 	teq	r0, #0
   8562a:	bf17      	itett	ne
   8562c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   85630:	4608      	moveq	r0, r1
   85632:	f091 0f00 	teqne	r1, #0
   85636:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   8563a:	d014      	beq.n	85666 <__aeabi_fmul+0x15e>
   8563c:	ea92 0f0c 	teq	r2, ip
   85640:	d101      	bne.n	85646 <__aeabi_fmul+0x13e>
   85642:	0242      	lsls	r2, r0, #9
   85644:	d10f      	bne.n	85666 <__aeabi_fmul+0x15e>
   85646:	ea93 0f0c 	teq	r3, ip
   8564a:	d103      	bne.n	85654 <__aeabi_fmul+0x14c>
   8564c:	024b      	lsls	r3, r1, #9
   8564e:	bf18      	it	ne
   85650:	4608      	movne	r0, r1
   85652:	d108      	bne.n	85666 <__aeabi_fmul+0x15e>
   85654:	ea80 0001 	eor.w	r0, r0, r1
   85658:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8565c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   85660:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85664:	4770      	bx	lr
   85666:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8566a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   8566e:	4770      	bx	lr

00085670 <__aeabi_fdiv>:
   85670:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85674:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   85678:	bf1e      	ittt	ne
   8567a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8567e:	ea92 0f0c 	teqne	r2, ip
   85682:	ea93 0f0c 	teqne	r3, ip
   85686:	d069      	beq.n	8575c <__aeabi_fdiv+0xec>
   85688:	eba2 0203 	sub.w	r2, r2, r3
   8568c:	ea80 0c01 	eor.w	ip, r0, r1
   85690:	0249      	lsls	r1, r1, #9
   85692:	ea4f 2040 	mov.w	r0, r0, lsl #9
   85696:	d037      	beq.n	85708 <__aeabi_fdiv+0x98>
   85698:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8569c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   856a0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   856a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   856a8:	428b      	cmp	r3, r1
   856aa:	bf38      	it	cc
   856ac:	005b      	lslcc	r3, r3, #1
   856ae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   856b2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   856b6:	428b      	cmp	r3, r1
   856b8:	bf24      	itt	cs
   856ba:	1a5b      	subcs	r3, r3, r1
   856bc:	ea40 000c 	orrcs.w	r0, r0, ip
   856c0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   856c4:	bf24      	itt	cs
   856c6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   856ca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   856ce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   856d2:	bf24      	itt	cs
   856d4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   856d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   856dc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   856e0:	bf24      	itt	cs
   856e2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   856e6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   856ea:	011b      	lsls	r3, r3, #4
   856ec:	bf18      	it	ne
   856ee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   856f2:	d1e0      	bne.n	856b6 <__aeabi_fdiv+0x46>
   856f4:	2afd      	cmp	r2, #253	; 0xfd
   856f6:	f63f af50 	bhi.w	8559a <__aeabi_fmul+0x92>
   856fa:	428b      	cmp	r3, r1
   856fc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85700:	bf08      	it	eq
   85702:	f020 0001 	biceq.w	r0, r0, #1
   85706:	4770      	bx	lr
   85708:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8570c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   85710:	327f      	adds	r2, #127	; 0x7f
   85712:	bfc2      	ittt	gt
   85714:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   85718:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8571c:	4770      	bxgt	lr
   8571e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85722:	f04f 0300 	mov.w	r3, #0
   85726:	3a01      	subs	r2, #1
   85728:	e737      	b.n	8559a <__aeabi_fmul+0x92>
   8572a:	f092 0f00 	teq	r2, #0
   8572e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   85732:	bf02      	ittt	eq
   85734:	0040      	lsleq	r0, r0, #1
   85736:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8573a:	3a01      	subeq	r2, #1
   8573c:	d0f9      	beq.n	85732 <__aeabi_fdiv+0xc2>
   8573e:	ea40 000c 	orr.w	r0, r0, ip
   85742:	f093 0f00 	teq	r3, #0
   85746:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8574a:	bf02      	ittt	eq
   8574c:	0049      	lsleq	r1, r1, #1
   8574e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   85752:	3b01      	subeq	r3, #1
   85754:	d0f9      	beq.n	8574a <__aeabi_fdiv+0xda>
   85756:	ea41 010c 	orr.w	r1, r1, ip
   8575a:	e795      	b.n	85688 <__aeabi_fdiv+0x18>
   8575c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   85760:	ea92 0f0c 	teq	r2, ip
   85764:	d108      	bne.n	85778 <__aeabi_fdiv+0x108>
   85766:	0242      	lsls	r2, r0, #9
   85768:	f47f af7d 	bne.w	85666 <__aeabi_fmul+0x15e>
   8576c:	ea93 0f0c 	teq	r3, ip
   85770:	f47f af70 	bne.w	85654 <__aeabi_fmul+0x14c>
   85774:	4608      	mov	r0, r1
   85776:	e776      	b.n	85666 <__aeabi_fmul+0x15e>
   85778:	ea93 0f0c 	teq	r3, ip
   8577c:	d104      	bne.n	85788 <__aeabi_fdiv+0x118>
   8577e:	024b      	lsls	r3, r1, #9
   85780:	f43f af4c 	beq.w	8561c <__aeabi_fmul+0x114>
   85784:	4608      	mov	r0, r1
   85786:	e76e      	b.n	85666 <__aeabi_fmul+0x15e>
   85788:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8578c:	bf18      	it	ne
   8578e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   85792:	d1ca      	bne.n	8572a <__aeabi_fdiv+0xba>
   85794:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   85798:	f47f af5c 	bne.w	85654 <__aeabi_fmul+0x14c>
   8579c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   857a0:	f47f af3c 	bne.w	8561c <__aeabi_fmul+0x114>
   857a4:	e75f      	b.n	85666 <__aeabi_fmul+0x15e>
   857a6:	bf00      	nop

000857a8 <__gesf2>:
   857a8:	f04f 3cff 	mov.w	ip, #4294967295
   857ac:	e006      	b.n	857bc <__cmpsf2+0x4>
   857ae:	bf00      	nop

000857b0 <__lesf2>:
   857b0:	f04f 0c01 	mov.w	ip, #1
   857b4:	e002      	b.n	857bc <__cmpsf2+0x4>
   857b6:	bf00      	nop

000857b8 <__cmpsf2>:
   857b8:	f04f 0c01 	mov.w	ip, #1
   857bc:	f84d cd04 	str.w	ip, [sp, #-4]!
   857c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   857c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   857c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   857cc:	bf18      	it	ne
   857ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   857d2:	d011      	beq.n	857f8 <__cmpsf2+0x40>
   857d4:	b001      	add	sp, #4
   857d6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   857da:	bf18      	it	ne
   857dc:	ea90 0f01 	teqne	r0, r1
   857e0:	bf58      	it	pl
   857e2:	ebb2 0003 	subspl.w	r0, r2, r3
   857e6:	bf88      	it	hi
   857e8:	17c8      	asrhi	r0, r1, #31
   857ea:	bf38      	it	cc
   857ec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   857f0:	bf18      	it	ne
   857f2:	f040 0001 	orrne.w	r0, r0, #1
   857f6:	4770      	bx	lr
   857f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   857fc:	d102      	bne.n	85804 <__cmpsf2+0x4c>
   857fe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   85802:	d105      	bne.n	85810 <__cmpsf2+0x58>
   85804:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   85808:	d1e4      	bne.n	857d4 <__cmpsf2+0x1c>
   8580a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   8580e:	d0e1      	beq.n	857d4 <__cmpsf2+0x1c>
   85810:	f85d 0b04 	ldr.w	r0, [sp], #4
   85814:	4770      	bx	lr
   85816:	bf00      	nop

00085818 <__aeabi_cfrcmple>:
   85818:	4684      	mov	ip, r0
   8581a:	4608      	mov	r0, r1
   8581c:	4661      	mov	r1, ip
   8581e:	e7ff      	b.n	85820 <__aeabi_cfcmpeq>

00085820 <__aeabi_cfcmpeq>:
   85820:	b50f      	push	{r0, r1, r2, r3, lr}
   85822:	f7ff ffc9 	bl	857b8 <__cmpsf2>
   85826:	2800      	cmp	r0, #0
   85828:	bf48      	it	mi
   8582a:	f110 0f00 	cmnmi.w	r0, #0
   8582e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00085830 <__aeabi_fcmpeq>:
   85830:	f84d ed08 	str.w	lr, [sp, #-8]!
   85834:	f7ff fff4 	bl	85820 <__aeabi_cfcmpeq>
   85838:	bf0c      	ite	eq
   8583a:	2001      	moveq	r0, #1
   8583c:	2000      	movne	r0, #0
   8583e:	f85d fb08 	ldr.w	pc, [sp], #8
   85842:	bf00      	nop

00085844 <__aeabi_fcmplt>:
   85844:	f84d ed08 	str.w	lr, [sp, #-8]!
   85848:	f7ff ffea 	bl	85820 <__aeabi_cfcmpeq>
   8584c:	bf34      	ite	cc
   8584e:	2001      	movcc	r0, #1
   85850:	2000      	movcs	r0, #0
   85852:	f85d fb08 	ldr.w	pc, [sp], #8
   85856:	bf00      	nop

00085858 <__aeabi_fcmple>:
   85858:	f84d ed08 	str.w	lr, [sp, #-8]!
   8585c:	f7ff ffe0 	bl	85820 <__aeabi_cfcmpeq>
   85860:	bf94      	ite	ls
   85862:	2001      	movls	r0, #1
   85864:	2000      	movhi	r0, #0
   85866:	f85d fb08 	ldr.w	pc, [sp], #8
   8586a:	bf00      	nop

0008586c <__aeabi_fcmpge>:
   8586c:	f84d ed08 	str.w	lr, [sp, #-8]!
   85870:	f7ff ffd2 	bl	85818 <__aeabi_cfrcmple>
   85874:	bf94      	ite	ls
   85876:	2001      	movls	r0, #1
   85878:	2000      	movhi	r0, #0
   8587a:	f85d fb08 	ldr.w	pc, [sp], #8
   8587e:	bf00      	nop

00085880 <__aeabi_fcmpgt>:
   85880:	f84d ed08 	str.w	lr, [sp, #-8]!
   85884:	f7ff ffc8 	bl	85818 <__aeabi_cfrcmple>
   85888:	bf34      	ite	cc
   8588a:	2001      	movcc	r0, #1
   8588c:	2000      	movcs	r0, #0
   8588e:	f85d fb08 	ldr.w	pc, [sp], #8
   85892:	bf00      	nop

00085894 <__aeabi_f2iz>:
   85894:	ea4f 0240 	mov.w	r2, r0, lsl #1
   85898:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   8589c:	d30f      	bcc.n	858be <__aeabi_f2iz+0x2a>
   8589e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   858a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   858a6:	d90d      	bls.n	858c4 <__aeabi_f2iz+0x30>
   858a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   858ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   858b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   858b4:	fa23 f002 	lsr.w	r0, r3, r2
   858b8:	bf18      	it	ne
   858ba:	4240      	negne	r0, r0
   858bc:	4770      	bx	lr
   858be:	f04f 0000 	mov.w	r0, #0
   858c2:	4770      	bx	lr
   858c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   858c8:	d101      	bne.n	858ce <__aeabi_f2iz+0x3a>
   858ca:	0242      	lsls	r2, r0, #9
   858cc:	d105      	bne.n	858da <__aeabi_f2iz+0x46>
   858ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   858d2:	bf08      	it	eq
   858d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   858d8:	4770      	bx	lr
   858da:	f04f 0000 	mov.w	r0, #0
   858de:	4770      	bx	lr

000858e0 <__libc_init_array>:
   858e0:	b570      	push	{r4, r5, r6, lr}
   858e2:	4e0f      	ldr	r6, [pc, #60]	; (85920 <__libc_init_array+0x40>)
   858e4:	4d0f      	ldr	r5, [pc, #60]	; (85924 <__libc_init_array+0x44>)
   858e6:	1b76      	subs	r6, r6, r5
   858e8:	10b6      	asrs	r6, r6, #2
   858ea:	bf18      	it	ne
   858ec:	2400      	movne	r4, #0
   858ee:	d005      	beq.n	858fc <__libc_init_array+0x1c>
   858f0:	3401      	adds	r4, #1
   858f2:	f855 3b04 	ldr.w	r3, [r5], #4
   858f6:	4798      	blx	r3
   858f8:	42a6      	cmp	r6, r4
   858fa:	d1f9      	bne.n	858f0 <__libc_init_array+0x10>
   858fc:	4e0a      	ldr	r6, [pc, #40]	; (85928 <__libc_init_array+0x48>)
   858fe:	4d0b      	ldr	r5, [pc, #44]	; (8592c <__libc_init_array+0x4c>)
   85900:	f004 fa96 	bl	89e30 <_init>
   85904:	1b76      	subs	r6, r6, r5
   85906:	10b6      	asrs	r6, r6, #2
   85908:	bf18      	it	ne
   8590a:	2400      	movne	r4, #0
   8590c:	d006      	beq.n	8591c <__libc_init_array+0x3c>
   8590e:	3401      	adds	r4, #1
   85910:	f855 3b04 	ldr.w	r3, [r5], #4
   85914:	4798      	blx	r3
   85916:	42a6      	cmp	r6, r4
   85918:	d1f9      	bne.n	8590e <__libc_init_array+0x2e>
   8591a:	bd70      	pop	{r4, r5, r6, pc}
   8591c:	bd70      	pop	{r4, r5, r6, pc}
   8591e:	bf00      	nop
   85920:	00089e3c 	.word	0x00089e3c
   85924:	00089e3c 	.word	0x00089e3c
   85928:	00089e44 	.word	0x00089e44
   8592c:	00089e3c 	.word	0x00089e3c

00085930 <memset>:
   85930:	b470      	push	{r4, r5, r6}
   85932:	0786      	lsls	r6, r0, #30
   85934:	d046      	beq.n	859c4 <memset+0x94>
   85936:	1e54      	subs	r4, r2, #1
   85938:	2a00      	cmp	r2, #0
   8593a:	d041      	beq.n	859c0 <memset+0x90>
   8593c:	b2ca      	uxtb	r2, r1
   8593e:	4603      	mov	r3, r0
   85940:	e002      	b.n	85948 <memset+0x18>
   85942:	f114 34ff 	adds.w	r4, r4, #4294967295
   85946:	d33b      	bcc.n	859c0 <memset+0x90>
   85948:	f803 2b01 	strb.w	r2, [r3], #1
   8594c:	079d      	lsls	r5, r3, #30
   8594e:	d1f8      	bne.n	85942 <memset+0x12>
   85950:	2c03      	cmp	r4, #3
   85952:	d92e      	bls.n	859b2 <memset+0x82>
   85954:	b2cd      	uxtb	r5, r1
   85956:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8595a:	2c0f      	cmp	r4, #15
   8595c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85960:	d919      	bls.n	85996 <memset+0x66>
   85962:	4626      	mov	r6, r4
   85964:	f103 0210 	add.w	r2, r3, #16
   85968:	3e10      	subs	r6, #16
   8596a:	2e0f      	cmp	r6, #15
   8596c:	f842 5c10 	str.w	r5, [r2, #-16]
   85970:	f842 5c0c 	str.w	r5, [r2, #-12]
   85974:	f842 5c08 	str.w	r5, [r2, #-8]
   85978:	f842 5c04 	str.w	r5, [r2, #-4]
   8597c:	f102 0210 	add.w	r2, r2, #16
   85980:	d8f2      	bhi.n	85968 <memset+0x38>
   85982:	f1a4 0210 	sub.w	r2, r4, #16
   85986:	f022 020f 	bic.w	r2, r2, #15
   8598a:	f004 040f 	and.w	r4, r4, #15
   8598e:	3210      	adds	r2, #16
   85990:	2c03      	cmp	r4, #3
   85992:	4413      	add	r3, r2
   85994:	d90d      	bls.n	859b2 <memset+0x82>
   85996:	461e      	mov	r6, r3
   85998:	4622      	mov	r2, r4
   8599a:	3a04      	subs	r2, #4
   8599c:	2a03      	cmp	r2, #3
   8599e:	f846 5b04 	str.w	r5, [r6], #4
   859a2:	d8fa      	bhi.n	8599a <memset+0x6a>
   859a4:	1f22      	subs	r2, r4, #4
   859a6:	f022 0203 	bic.w	r2, r2, #3
   859aa:	3204      	adds	r2, #4
   859ac:	4413      	add	r3, r2
   859ae:	f004 0403 	and.w	r4, r4, #3
   859b2:	b12c      	cbz	r4, 859c0 <memset+0x90>
   859b4:	b2c9      	uxtb	r1, r1
   859b6:	441c      	add	r4, r3
   859b8:	f803 1b01 	strb.w	r1, [r3], #1
   859bc:	429c      	cmp	r4, r3
   859be:	d1fb      	bne.n	859b8 <memset+0x88>
   859c0:	bc70      	pop	{r4, r5, r6}
   859c2:	4770      	bx	lr
   859c4:	4614      	mov	r4, r2
   859c6:	4603      	mov	r3, r0
   859c8:	e7c2      	b.n	85950 <memset+0x20>
   859ca:	bf00      	nop

000859cc <sprintf>:
   859cc:	b40e      	push	{r1, r2, r3}
   859ce:	4601      	mov	r1, r0
   859d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   859d2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   859d6:	f44f 7702 	mov.w	r7, #520	; 0x208
   859da:	f64f 76ff 	movw	r6, #65535	; 0xffff
   859de:	b09c      	sub	sp, #112	; 0x70
   859e0:	ac21      	add	r4, sp, #132	; 0x84
   859e2:	f854 2b04 	ldr.w	r2, [r4], #4
   859e6:	4b0b      	ldr	r3, [pc, #44]	; (85a14 <sprintf+0x48>)
   859e8:	9102      	str	r1, [sp, #8]
   859ea:	9106      	str	r1, [sp, #24]
   859ec:	6818      	ldr	r0, [r3, #0]
   859ee:	a902      	add	r1, sp, #8
   859f0:	4623      	mov	r3, r4
   859f2:	9401      	str	r4, [sp, #4]
   859f4:	f8ad 7014 	strh.w	r7, [sp, #20]
   859f8:	9504      	str	r5, [sp, #16]
   859fa:	9507      	str	r5, [sp, #28]
   859fc:	f8ad 6016 	strh.w	r6, [sp, #22]
   85a00:	f000 f838 	bl	85a74 <_svfprintf_r>
   85a04:	2200      	movs	r2, #0
   85a06:	9b02      	ldr	r3, [sp, #8]
   85a08:	701a      	strb	r2, [r3, #0]
   85a0a:	b01c      	add	sp, #112	; 0x70
   85a0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   85a10:	b003      	add	sp, #12
   85a12:	4770      	bx	lr
   85a14:	200701a4 	.word	0x200701a4

00085a18 <strlen>:
   85a18:	f020 0103 	bic.w	r1, r0, #3
   85a1c:	f010 0003 	ands.w	r0, r0, #3
   85a20:	f1c0 0000 	rsb	r0, r0, #0
   85a24:	f851 3b04 	ldr.w	r3, [r1], #4
   85a28:	f100 0c04 	add.w	ip, r0, #4
   85a2c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   85a30:	f06f 0200 	mvn.w	r2, #0
   85a34:	bf1c      	itt	ne
   85a36:	fa22 f20c 	lsrne.w	r2, r2, ip
   85a3a:	4313      	orrne	r3, r2
   85a3c:	f04f 0c01 	mov.w	ip, #1
   85a40:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   85a44:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   85a48:	eba3 020c 	sub.w	r2, r3, ip
   85a4c:	ea22 0203 	bic.w	r2, r2, r3
   85a50:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   85a54:	bf04      	itt	eq
   85a56:	f851 3b04 	ldreq.w	r3, [r1], #4
   85a5a:	3004      	addeq	r0, #4
   85a5c:	d0f4      	beq.n	85a48 <strlen+0x30>
   85a5e:	f1c2 0100 	rsb	r1, r2, #0
   85a62:	ea02 0201 	and.w	r2, r2, r1
   85a66:	fab2 f282 	clz	r2, r2
   85a6a:	f1c2 021f 	rsb	r2, r2, #31
   85a6e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   85a72:	4770      	bx	lr

00085a74 <_svfprintf_r>:
   85a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85a78:	b0c3      	sub	sp, #268	; 0x10c
   85a7a:	460c      	mov	r4, r1
   85a7c:	910b      	str	r1, [sp, #44]	; 0x2c
   85a7e:	4692      	mov	sl, r2
   85a80:	930f      	str	r3, [sp, #60]	; 0x3c
   85a82:	900c      	str	r0, [sp, #48]	; 0x30
   85a84:	f002 fa58 	bl	87f38 <_localeconv_r>
   85a88:	6803      	ldr	r3, [r0, #0]
   85a8a:	4618      	mov	r0, r3
   85a8c:	931a      	str	r3, [sp, #104]	; 0x68
   85a8e:	f7ff ffc3 	bl	85a18 <strlen>
   85a92:	89a3      	ldrh	r3, [r4, #12]
   85a94:	9019      	str	r0, [sp, #100]	; 0x64
   85a96:	0619      	lsls	r1, r3, #24
   85a98:	d503      	bpl.n	85aa2 <_svfprintf_r+0x2e>
   85a9a:	6923      	ldr	r3, [r4, #16]
   85a9c:	2b00      	cmp	r3, #0
   85a9e:	f001 8035 	beq.w	86b0c <_svfprintf_r+0x1098>
   85aa2:	2300      	movs	r3, #0
   85aa4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   85aa8:	46c8      	mov	r8, r9
   85aaa:	9315      	str	r3, [sp, #84]	; 0x54
   85aac:	9313      	str	r3, [sp, #76]	; 0x4c
   85aae:	9314      	str	r3, [sp, #80]	; 0x50
   85ab0:	9318      	str	r3, [sp, #96]	; 0x60
   85ab2:	931b      	str	r3, [sp, #108]	; 0x6c
   85ab4:	9309      	str	r3, [sp, #36]	; 0x24
   85ab6:	9316      	str	r3, [sp, #88]	; 0x58
   85ab8:	9317      	str	r3, [sp, #92]	; 0x5c
   85aba:	9327      	str	r3, [sp, #156]	; 0x9c
   85abc:	9326      	str	r3, [sp, #152]	; 0x98
   85abe:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   85ac2:	f89a 3000 	ldrb.w	r3, [sl]
   85ac6:	4654      	mov	r4, sl
   85ac8:	b1eb      	cbz	r3, 85b06 <_svfprintf_r+0x92>
   85aca:	2b25      	cmp	r3, #37	; 0x25
   85acc:	d102      	bne.n	85ad4 <_svfprintf_r+0x60>
   85ace:	e01a      	b.n	85b06 <_svfprintf_r+0x92>
   85ad0:	2b25      	cmp	r3, #37	; 0x25
   85ad2:	d003      	beq.n	85adc <_svfprintf_r+0x68>
   85ad4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   85ad8:	2b00      	cmp	r3, #0
   85ada:	d1f9      	bne.n	85ad0 <_svfprintf_r+0x5c>
   85adc:	eba4 050a 	sub.w	r5, r4, sl
   85ae0:	b18d      	cbz	r5, 85b06 <_svfprintf_r+0x92>
   85ae2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85ae4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85ae6:	3301      	adds	r3, #1
   85ae8:	442a      	add	r2, r5
   85aea:	2b07      	cmp	r3, #7
   85aec:	f8c8 a000 	str.w	sl, [r8]
   85af0:	f8c8 5004 	str.w	r5, [r8, #4]
   85af4:	9227      	str	r2, [sp, #156]	; 0x9c
   85af6:	9326      	str	r3, [sp, #152]	; 0x98
   85af8:	f300 808a 	bgt.w	85c10 <_svfprintf_r+0x19c>
   85afc:	f108 0808 	add.w	r8, r8, #8
   85b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85b02:	442b      	add	r3, r5
   85b04:	9309      	str	r3, [sp, #36]	; 0x24
   85b06:	7823      	ldrb	r3, [r4, #0]
   85b08:	2b00      	cmp	r3, #0
   85b0a:	f000 8089 	beq.w	85c20 <_svfprintf_r+0x1ac>
   85b0e:	2300      	movs	r3, #0
   85b10:	f04f 30ff 	mov.w	r0, #4294967295
   85b14:	461a      	mov	r2, r3
   85b16:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85b1a:	4619      	mov	r1, r3
   85b1c:	930d      	str	r3, [sp, #52]	; 0x34
   85b1e:	469b      	mov	fp, r3
   85b20:	7863      	ldrb	r3, [r4, #1]
   85b22:	f104 0a01 	add.w	sl, r4, #1
   85b26:	900a      	str	r0, [sp, #40]	; 0x28
   85b28:	f10a 0a01 	add.w	sl, sl, #1
   85b2c:	f1a3 0020 	sub.w	r0, r3, #32
   85b30:	2858      	cmp	r0, #88	; 0x58
   85b32:	f200 83b7 	bhi.w	862a4 <_svfprintf_r+0x830>
   85b36:	e8df f010 	tbh	[pc, r0, lsl #1]
   85b3a:	034c      	.short	0x034c
   85b3c:	03b503b5 	.word	0x03b503b5
   85b40:	03b50354 	.word	0x03b50354
   85b44:	03b503b5 	.word	0x03b503b5
   85b48:	03b503b5 	.word	0x03b503b5
   85b4c:	005903b5 	.word	0x005903b5
   85b50:	03b50359 	.word	0x03b50359
   85b54:	02140066 	.word	0x02140066
   85b58:	022f03b5 	.word	0x022f03b5
   85b5c:	03a503a5 	.word	0x03a503a5
   85b60:	03a503a5 	.word	0x03a503a5
   85b64:	03a503a5 	.word	0x03a503a5
   85b68:	03a503a5 	.word	0x03a503a5
   85b6c:	03b503a5 	.word	0x03b503a5
   85b70:	03b503b5 	.word	0x03b503b5
   85b74:	03b503b5 	.word	0x03b503b5
   85b78:	03b503b5 	.word	0x03b503b5
   85b7c:	03b503b5 	.word	0x03b503b5
   85b80:	028b03b5 	.word	0x028b03b5
   85b84:	03b502d3 	.word	0x03b502d3
   85b88:	03b502d3 	.word	0x03b502d3
   85b8c:	03b503b5 	.word	0x03b503b5
   85b90:	031b03b5 	.word	0x031b03b5
   85b94:	03b503b5 	.word	0x03b503b5
   85b98:	03b50320 	.word	0x03b50320
   85b9c:	03b503b5 	.word	0x03b503b5
   85ba0:	03b503b5 	.word	0x03b503b5
   85ba4:	03b50234 	.word	0x03b50234
   85ba8:	024b03b5 	.word	0x024b03b5
   85bac:	03b503b5 	.word	0x03b503b5
   85bb0:	03b503b5 	.word	0x03b503b5
   85bb4:	03b503b5 	.word	0x03b503b5
   85bb8:	03b503b5 	.word	0x03b503b5
   85bbc:	03b503b5 	.word	0x03b503b5
   85bc0:	039e0276 	.word	0x039e0276
   85bc4:	02d302d3 	.word	0x02d302d3
   85bc8:	036302d3 	.word	0x036302d3
   85bcc:	03b5039e 	.word	0x03b5039e
   85bd0:	036803b5 	.word	0x036803b5
   85bd4:	037503b5 	.word	0x037503b5
   85bd8:	038c01dd 	.word	0x038c01dd
   85bdc:	03b5035e 	.word	0x03b5035e
   85be0:	03b501f2 	.word	0x03b501f2
   85be4:	03b50087 	.word	0x03b50087
   85be8:	033203b5 	.word	0x033203b5
   85bec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85bee:	6823      	ldr	r3, [r4, #0]
   85bf0:	4618      	mov	r0, r3
   85bf2:	930d      	str	r3, [sp, #52]	; 0x34
   85bf4:	4623      	mov	r3, r4
   85bf6:	2800      	cmp	r0, #0
   85bf8:	f103 0304 	add.w	r3, r3, #4
   85bfc:	930f      	str	r3, [sp, #60]	; 0x3c
   85bfe:	da04      	bge.n	85c0a <_svfprintf_r+0x196>
   85c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85c02:	425b      	negs	r3, r3
   85c04:	930d      	str	r3, [sp, #52]	; 0x34
   85c06:	f04b 0b04 	orr.w	fp, fp, #4
   85c0a:	f89a 3000 	ldrb.w	r3, [sl]
   85c0e:	e78b      	b.n	85b28 <_svfprintf_r+0xb4>
   85c10:	aa25      	add	r2, sp, #148	; 0x94
   85c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85c14:	980c      	ldr	r0, [sp, #48]	; 0x30
   85c16:	f003 f819 	bl	88c4c <__ssprint_r>
   85c1a:	b940      	cbnz	r0, 85c2e <_svfprintf_r+0x1ba>
   85c1c:	46c8      	mov	r8, r9
   85c1e:	e76f      	b.n	85b00 <_svfprintf_r+0x8c>
   85c20:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   85c22:	b123      	cbz	r3, 85c2e <_svfprintf_r+0x1ba>
   85c24:	980c      	ldr	r0, [sp, #48]	; 0x30
   85c26:	aa25      	add	r2, sp, #148	; 0x94
   85c28:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85c2a:	f003 f80f 	bl	88c4c <__ssprint_r>
   85c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85c30:	899b      	ldrh	r3, [r3, #12]
   85c32:	f013 0f40 	tst.w	r3, #64	; 0x40
   85c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85c38:	bf18      	it	ne
   85c3a:	f04f 33ff 	movne.w	r3, #4294967295
   85c3e:	9309      	str	r3, [sp, #36]	; 0x24
   85c40:	9809      	ldr	r0, [sp, #36]	; 0x24
   85c42:	b043      	add	sp, #268	; 0x10c
   85c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c48:	f01b 0f20 	tst.w	fp, #32
   85c4c:	9311      	str	r3, [sp, #68]	; 0x44
   85c4e:	f040 81af 	bne.w	85fb0 <_svfprintf_r+0x53c>
   85c52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85c54:	f01b 0f10 	tst.w	fp, #16
   85c58:	4613      	mov	r3, r2
   85c5a:	f040 859a 	bne.w	86792 <_svfprintf_r+0xd1e>
   85c5e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85c62:	f000 8596 	beq.w	86792 <_svfprintf_r+0xd1e>
   85c66:	2500      	movs	r5, #0
   85c68:	2301      	movs	r3, #1
   85c6a:	8814      	ldrh	r4, [r2, #0]
   85c6c:	3204      	adds	r2, #4
   85c6e:	920f      	str	r2, [sp, #60]	; 0x3c
   85c70:	2200      	movs	r2, #0
   85c72:	4617      	mov	r7, r2
   85c74:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   85c78:	990a      	ldr	r1, [sp, #40]	; 0x28
   85c7a:	1c4a      	adds	r2, r1, #1
   85c7c:	f000 8210 	beq.w	860a0 <_svfprintf_r+0x62c>
   85c80:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   85c84:	9207      	str	r2, [sp, #28]
   85c86:	ea54 0205 	orrs.w	r2, r4, r5
   85c8a:	f040 820f 	bne.w	860ac <_svfprintf_r+0x638>
   85c8e:	2900      	cmp	r1, #0
   85c90:	f040 8431 	bne.w	864f6 <_svfprintf_r+0xa82>
   85c94:	2b00      	cmp	r3, #0
   85c96:	f040 8539 	bne.w	8670c <_svfprintf_r+0xc98>
   85c9a:	f01b 0301 	ands.w	r3, fp, #1
   85c9e:	930e      	str	r3, [sp, #56]	; 0x38
   85ca0:	f000 8662 	beq.w	86968 <_svfprintf_r+0xef4>
   85ca4:	2330      	movs	r3, #48	; 0x30
   85ca6:	ae42      	add	r6, sp, #264	; 0x108
   85ca8:	f806 3d41 	strb.w	r3, [r6, #-65]!
   85cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85cb0:	4293      	cmp	r3, r2
   85cb2:	bfb8      	it	lt
   85cb4:	4613      	movlt	r3, r2
   85cb6:	9308      	str	r3, [sp, #32]
   85cb8:	2300      	movs	r3, #0
   85cba:	9312      	str	r3, [sp, #72]	; 0x48
   85cbc:	b117      	cbz	r7, 85cc4 <_svfprintf_r+0x250>
   85cbe:	9b08      	ldr	r3, [sp, #32]
   85cc0:	3301      	adds	r3, #1
   85cc2:	9308      	str	r3, [sp, #32]
   85cc4:	9b07      	ldr	r3, [sp, #28]
   85cc6:	f013 0302 	ands.w	r3, r3, #2
   85cca:	9310      	str	r3, [sp, #64]	; 0x40
   85ccc:	d002      	beq.n	85cd4 <_svfprintf_r+0x260>
   85cce:	9b08      	ldr	r3, [sp, #32]
   85cd0:	3302      	adds	r3, #2
   85cd2:	9308      	str	r3, [sp, #32]
   85cd4:	9b07      	ldr	r3, [sp, #28]
   85cd6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   85cda:	f040 8310 	bne.w	862fe <_svfprintf_r+0x88a>
   85cde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85ce0:	9a08      	ldr	r2, [sp, #32]
   85ce2:	eba3 0b02 	sub.w	fp, r3, r2
   85ce6:	f1bb 0f00 	cmp.w	fp, #0
   85cea:	f340 8308 	ble.w	862fe <_svfprintf_r+0x88a>
   85cee:	f1bb 0f10 	cmp.w	fp, #16
   85cf2:	f340 87b2 	ble.w	86c5a <_svfprintf_r+0x11e6>
   85cf6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85cf8:	4643      	mov	r3, r8
   85cfa:	4621      	mov	r1, r4
   85cfc:	46a8      	mov	r8, r5
   85cfe:	2710      	movs	r7, #16
   85d00:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85d02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85d04:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85d06:	e006      	b.n	85d16 <_svfprintf_r+0x2a2>
   85d08:	f1ab 0b10 	sub.w	fp, fp, #16
   85d0c:	f1bb 0f10 	cmp.w	fp, #16
   85d10:	f103 0308 	add.w	r3, r3, #8
   85d14:	dd18      	ble.n	85d48 <_svfprintf_r+0x2d4>
   85d16:	3201      	adds	r2, #1
   85d18:	48ab      	ldr	r0, [pc, #684]	; (85fc8 <_svfprintf_r+0x554>)
   85d1a:	3110      	adds	r1, #16
   85d1c:	2a07      	cmp	r2, #7
   85d1e:	9127      	str	r1, [sp, #156]	; 0x9c
   85d20:	9226      	str	r2, [sp, #152]	; 0x98
   85d22:	e883 0081 	stmia.w	r3, {r0, r7}
   85d26:	ddef      	ble.n	85d08 <_svfprintf_r+0x294>
   85d28:	aa25      	add	r2, sp, #148	; 0x94
   85d2a:	4629      	mov	r1, r5
   85d2c:	4620      	mov	r0, r4
   85d2e:	f002 ff8d 	bl	88c4c <__ssprint_r>
   85d32:	2800      	cmp	r0, #0
   85d34:	f47f af7b 	bne.w	85c2e <_svfprintf_r+0x1ba>
   85d38:	f1ab 0b10 	sub.w	fp, fp, #16
   85d3c:	f1bb 0f10 	cmp.w	fp, #16
   85d40:	464b      	mov	r3, r9
   85d42:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85d44:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85d46:	dce6      	bgt.n	85d16 <_svfprintf_r+0x2a2>
   85d48:	4645      	mov	r5, r8
   85d4a:	460c      	mov	r4, r1
   85d4c:	4698      	mov	r8, r3
   85d4e:	3201      	adds	r2, #1
   85d50:	4b9d      	ldr	r3, [pc, #628]	; (85fc8 <_svfprintf_r+0x554>)
   85d52:	445c      	add	r4, fp
   85d54:	2a07      	cmp	r2, #7
   85d56:	9427      	str	r4, [sp, #156]	; 0x9c
   85d58:	9226      	str	r2, [sp, #152]	; 0x98
   85d5a:	e888 0808 	stmia.w	r8, {r3, fp}
   85d5e:	f300 82c3 	bgt.w	862e8 <_svfprintf_r+0x874>
   85d62:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85d66:	f108 0808 	add.w	r8, r8, #8
   85d6a:	b187      	cbz	r7, 85d8e <_svfprintf_r+0x31a>
   85d6c:	2101      	movs	r1, #1
   85d6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85d70:	440c      	add	r4, r1
   85d72:	440b      	add	r3, r1
   85d74:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   85d78:	2b07      	cmp	r3, #7
   85d7a:	9427      	str	r4, [sp, #156]	; 0x9c
   85d7c:	9326      	str	r3, [sp, #152]	; 0x98
   85d7e:	f8c8 1004 	str.w	r1, [r8, #4]
   85d82:	f8c8 2000 	str.w	r2, [r8]
   85d86:	f300 83cd 	bgt.w	86524 <_svfprintf_r+0xab0>
   85d8a:	f108 0808 	add.w	r8, r8, #8
   85d8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85d90:	b17b      	cbz	r3, 85db2 <_svfprintf_r+0x33e>
   85d92:	2102      	movs	r1, #2
   85d94:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85d96:	440c      	add	r4, r1
   85d98:	3301      	adds	r3, #1
   85d9a:	aa1e      	add	r2, sp, #120	; 0x78
   85d9c:	2b07      	cmp	r3, #7
   85d9e:	9427      	str	r4, [sp, #156]	; 0x9c
   85da0:	9326      	str	r3, [sp, #152]	; 0x98
   85da2:	f8c8 1004 	str.w	r1, [r8, #4]
   85da6:	f8c8 2000 	str.w	r2, [r8]
   85daa:	f300 8411 	bgt.w	865d0 <_svfprintf_r+0xb5c>
   85dae:	f108 0808 	add.w	r8, r8, #8
   85db2:	2d80      	cmp	r5, #128	; 0x80
   85db4:	f000 8304 	beq.w	863c0 <_svfprintf_r+0x94c>
   85db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85dbc:	1a9f      	subs	r7, r3, r2
   85dbe:	2f00      	cmp	r7, #0
   85dc0:	dd37      	ble.n	85e32 <_svfprintf_r+0x3be>
   85dc2:	2f10      	cmp	r7, #16
   85dc4:	f340 8679 	ble.w	86aba <_svfprintf_r+0x1046>
   85dc8:	4d80      	ldr	r5, [pc, #512]	; (85fcc <_svfprintf_r+0x558>)
   85dca:	4642      	mov	r2, r8
   85dcc:	4621      	mov	r1, r4
   85dce:	46b0      	mov	r8, r6
   85dd0:	f04f 0b10 	mov.w	fp, #16
   85dd4:	462e      	mov	r6, r5
   85dd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85dd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85dda:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85ddc:	e004      	b.n	85de8 <_svfprintf_r+0x374>
   85dde:	3f10      	subs	r7, #16
   85de0:	2f10      	cmp	r7, #16
   85de2:	f102 0208 	add.w	r2, r2, #8
   85de6:	dd15      	ble.n	85e14 <_svfprintf_r+0x3a0>
   85de8:	3301      	adds	r3, #1
   85dea:	3110      	adds	r1, #16
   85dec:	2b07      	cmp	r3, #7
   85dee:	9127      	str	r1, [sp, #156]	; 0x9c
   85df0:	9326      	str	r3, [sp, #152]	; 0x98
   85df2:	e882 0840 	stmia.w	r2, {r6, fp}
   85df6:	ddf2      	ble.n	85dde <_svfprintf_r+0x36a>
   85df8:	aa25      	add	r2, sp, #148	; 0x94
   85dfa:	4629      	mov	r1, r5
   85dfc:	4620      	mov	r0, r4
   85dfe:	f002 ff25 	bl	88c4c <__ssprint_r>
   85e02:	2800      	cmp	r0, #0
   85e04:	f47f af13 	bne.w	85c2e <_svfprintf_r+0x1ba>
   85e08:	3f10      	subs	r7, #16
   85e0a:	2f10      	cmp	r7, #16
   85e0c:	464a      	mov	r2, r9
   85e0e:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85e10:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e12:	dce9      	bgt.n	85de8 <_svfprintf_r+0x374>
   85e14:	4635      	mov	r5, r6
   85e16:	460c      	mov	r4, r1
   85e18:	4646      	mov	r6, r8
   85e1a:	4690      	mov	r8, r2
   85e1c:	3301      	adds	r3, #1
   85e1e:	443c      	add	r4, r7
   85e20:	2b07      	cmp	r3, #7
   85e22:	9427      	str	r4, [sp, #156]	; 0x9c
   85e24:	9326      	str	r3, [sp, #152]	; 0x98
   85e26:	e888 00a0 	stmia.w	r8, {r5, r7}
   85e2a:	f300 8370 	bgt.w	8650e <_svfprintf_r+0xa9a>
   85e2e:	f108 0808 	add.w	r8, r8, #8
   85e32:	9b07      	ldr	r3, [sp, #28]
   85e34:	05df      	lsls	r7, r3, #23
   85e36:	f100 8264 	bmi.w	86302 <_svfprintf_r+0x88e>
   85e3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e3c:	990e      	ldr	r1, [sp, #56]	; 0x38
   85e3e:	3301      	adds	r3, #1
   85e40:	440c      	add	r4, r1
   85e42:	2b07      	cmp	r3, #7
   85e44:	9427      	str	r4, [sp, #156]	; 0x9c
   85e46:	f8c8 6000 	str.w	r6, [r8]
   85e4a:	f8c8 1004 	str.w	r1, [r8, #4]
   85e4e:	9326      	str	r3, [sp, #152]	; 0x98
   85e50:	f300 83b3 	bgt.w	865ba <_svfprintf_r+0xb46>
   85e54:	f108 0808 	add.w	r8, r8, #8
   85e58:	9b07      	ldr	r3, [sp, #28]
   85e5a:	075b      	lsls	r3, r3, #29
   85e5c:	d53b      	bpl.n	85ed6 <_svfprintf_r+0x462>
   85e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85e60:	9a08      	ldr	r2, [sp, #32]
   85e62:	1a9d      	subs	r5, r3, r2
   85e64:	2d00      	cmp	r5, #0
   85e66:	dd36      	ble.n	85ed6 <_svfprintf_r+0x462>
   85e68:	2d10      	cmp	r5, #16
   85e6a:	f340 8721 	ble.w	86cb0 <_svfprintf_r+0x123c>
   85e6e:	2610      	movs	r6, #16
   85e70:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e72:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85e74:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   85e78:	e004      	b.n	85e84 <_svfprintf_r+0x410>
   85e7a:	3d10      	subs	r5, #16
   85e7c:	2d10      	cmp	r5, #16
   85e7e:	f108 0808 	add.w	r8, r8, #8
   85e82:	dd16      	ble.n	85eb2 <_svfprintf_r+0x43e>
   85e84:	3301      	adds	r3, #1
   85e86:	4a50      	ldr	r2, [pc, #320]	; (85fc8 <_svfprintf_r+0x554>)
   85e88:	3410      	adds	r4, #16
   85e8a:	2b07      	cmp	r3, #7
   85e8c:	9427      	str	r4, [sp, #156]	; 0x9c
   85e8e:	9326      	str	r3, [sp, #152]	; 0x98
   85e90:	e888 0044 	stmia.w	r8, {r2, r6}
   85e94:	ddf1      	ble.n	85e7a <_svfprintf_r+0x406>
   85e96:	aa25      	add	r2, sp, #148	; 0x94
   85e98:	4659      	mov	r1, fp
   85e9a:	4638      	mov	r0, r7
   85e9c:	f002 fed6 	bl	88c4c <__ssprint_r>
   85ea0:	2800      	cmp	r0, #0
   85ea2:	f47f aec4 	bne.w	85c2e <_svfprintf_r+0x1ba>
   85ea6:	3d10      	subs	r5, #16
   85ea8:	2d10      	cmp	r5, #16
   85eaa:	46c8      	mov	r8, r9
   85eac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85eae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85eb0:	dce8      	bgt.n	85e84 <_svfprintf_r+0x410>
   85eb2:	3301      	adds	r3, #1
   85eb4:	4a44      	ldr	r2, [pc, #272]	; (85fc8 <_svfprintf_r+0x554>)
   85eb6:	442c      	add	r4, r5
   85eb8:	2b07      	cmp	r3, #7
   85eba:	9427      	str	r4, [sp, #156]	; 0x9c
   85ebc:	9326      	str	r3, [sp, #152]	; 0x98
   85ebe:	e888 0024 	stmia.w	r8, {r2, r5}
   85ec2:	dd08      	ble.n	85ed6 <_svfprintf_r+0x462>
   85ec4:	aa25      	add	r2, sp, #148	; 0x94
   85ec6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85ec8:	980c      	ldr	r0, [sp, #48]	; 0x30
   85eca:	f002 febf 	bl	88c4c <__ssprint_r>
   85ece:	2800      	cmp	r0, #0
   85ed0:	f47f aead 	bne.w	85c2e <_svfprintf_r+0x1ba>
   85ed4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85eda:	9908      	ldr	r1, [sp, #32]
   85edc:	428a      	cmp	r2, r1
   85ede:	bfac      	ite	ge
   85ee0:	189b      	addge	r3, r3, r2
   85ee2:	185b      	addlt	r3, r3, r1
   85ee4:	9309      	str	r3, [sp, #36]	; 0x24
   85ee6:	2c00      	cmp	r4, #0
   85ee8:	f040 82fb 	bne.w	864e2 <_svfprintf_r+0xa6e>
   85eec:	2300      	movs	r3, #0
   85eee:	46c8      	mov	r8, r9
   85ef0:	9326      	str	r3, [sp, #152]	; 0x98
   85ef2:	e5e6      	b.n	85ac2 <_svfprintf_r+0x4e>
   85ef4:	9311      	str	r3, [sp, #68]	; 0x44
   85ef6:	f01b 0320 	ands.w	r3, fp, #32
   85efa:	f040 8145 	bne.w	86188 <_svfprintf_r+0x714>
   85efe:	f01b 0210 	ands.w	r2, fp, #16
   85f02:	f040 8466 	bne.w	867d2 <_svfprintf_r+0xd5e>
   85f06:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   85f0a:	f000 8462 	beq.w	867d2 <_svfprintf_r+0xd5e>
   85f0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   85f10:	4613      	mov	r3, r2
   85f12:	460a      	mov	r2, r1
   85f14:	3204      	adds	r2, #4
   85f16:	880c      	ldrh	r4, [r1, #0]
   85f18:	2500      	movs	r5, #0
   85f1a:	920f      	str	r2, [sp, #60]	; 0x3c
   85f1c:	e6a8      	b.n	85c70 <_svfprintf_r+0x1fc>
   85f1e:	2500      	movs	r5, #0
   85f20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85f22:	9311      	str	r3, [sp, #68]	; 0x44
   85f24:	6816      	ldr	r6, [r2, #0]
   85f26:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   85f2a:	1d14      	adds	r4, r2, #4
   85f2c:	2e00      	cmp	r6, #0
   85f2e:	f000 86cd 	beq.w	86ccc <_svfprintf_r+0x1258>
   85f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85f34:	1c53      	adds	r3, r2, #1
   85f36:	f000 861b 	beq.w	86b70 <_svfprintf_r+0x10fc>
   85f3a:	4629      	mov	r1, r5
   85f3c:	4630      	mov	r0, r6
   85f3e:	f002 faaf 	bl	884a0 <memchr>
   85f42:	2800      	cmp	r0, #0
   85f44:	f000 870d 	beq.w	86d62 <_svfprintf_r+0x12ee>
   85f48:	1b83      	subs	r3, r0, r6
   85f4a:	950a      	str	r5, [sp, #40]	; 0x28
   85f4c:	930e      	str	r3, [sp, #56]	; 0x38
   85f4e:	940f      	str	r4, [sp, #60]	; 0x3c
   85f50:	f8cd b01c 	str.w	fp, [sp, #28]
   85f54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85f58:	9308      	str	r3, [sp, #32]
   85f5a:	9512      	str	r5, [sp, #72]	; 0x48
   85f5c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85f60:	e6ac      	b.n	85cbc <_svfprintf_r+0x248>
   85f62:	f89a 3000 	ldrb.w	r3, [sl]
   85f66:	f10a 0401 	add.w	r4, sl, #1
   85f6a:	2b2a      	cmp	r3, #42	; 0x2a
   85f6c:	f000 87c2 	beq.w	86ef4 <_svfprintf_r+0x1480>
   85f70:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85f74:	2809      	cmp	r0, #9
   85f76:	46a2      	mov	sl, r4
   85f78:	f200 8718 	bhi.w	86dac <_svfprintf_r+0x1338>
   85f7c:	2300      	movs	r3, #0
   85f7e:	461c      	mov	r4, r3
   85f80:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85f84:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   85f88:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   85f8c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85f90:	2809      	cmp	r0, #9
   85f92:	d9f5      	bls.n	85f80 <_svfprintf_r+0x50c>
   85f94:	940a      	str	r4, [sp, #40]	; 0x28
   85f96:	e5c9      	b.n	85b2c <_svfprintf_r+0xb8>
   85f98:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   85f9c:	f89a 3000 	ldrb.w	r3, [sl]
   85fa0:	e5c2      	b.n	85b28 <_svfprintf_r+0xb4>
   85fa2:	f04b 0b10 	orr.w	fp, fp, #16
   85fa6:	f01b 0f20 	tst.w	fp, #32
   85faa:	9311      	str	r3, [sp, #68]	; 0x44
   85fac:	f43f ae51 	beq.w	85c52 <_svfprintf_r+0x1de>
   85fb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85fb2:	3407      	adds	r4, #7
   85fb4:	f024 0307 	bic.w	r3, r4, #7
   85fb8:	f103 0208 	add.w	r2, r3, #8
   85fbc:	e9d3 4500 	ldrd	r4, r5, [r3]
   85fc0:	920f      	str	r2, [sp, #60]	; 0x3c
   85fc2:	2301      	movs	r3, #1
   85fc4:	e654      	b.n	85c70 <_svfprintf_r+0x1fc>
   85fc6:	bf00      	nop
   85fc8:	00089bec 	.word	0x00089bec
   85fcc:	00089bfc 	.word	0x00089bfc
   85fd0:	9311      	str	r3, [sp, #68]	; 0x44
   85fd2:	2a00      	cmp	r2, #0
   85fd4:	f040 87ad 	bne.w	86f32 <_svfprintf_r+0x14be>
   85fd8:	4bbe      	ldr	r3, [pc, #760]	; (862d4 <_svfprintf_r+0x860>)
   85fda:	f01b 0f20 	tst.w	fp, #32
   85fde:	9318      	str	r3, [sp, #96]	; 0x60
   85fe0:	f040 80e7 	bne.w	861b2 <_svfprintf_r+0x73e>
   85fe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85fe6:	f01b 0f10 	tst.w	fp, #16
   85fea:	4613      	mov	r3, r2
   85fec:	f040 83d8 	bne.w	867a0 <_svfprintf_r+0xd2c>
   85ff0:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85ff4:	f000 83d4 	beq.w	867a0 <_svfprintf_r+0xd2c>
   85ff8:	2500      	movs	r5, #0
   85ffa:	3304      	adds	r3, #4
   85ffc:	8814      	ldrh	r4, [r2, #0]
   85ffe:	930f      	str	r3, [sp, #60]	; 0x3c
   86000:	f01b 0f01 	tst.w	fp, #1
   86004:	f000 80e3 	beq.w	861ce <_svfprintf_r+0x75a>
   86008:	ea54 0305 	orrs.w	r3, r4, r5
   8600c:	f000 80df 	beq.w	861ce <_svfprintf_r+0x75a>
   86010:	2330      	movs	r3, #48	; 0x30
   86012:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   86016:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   8601a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   8601e:	f04b 0b02 	orr.w	fp, fp, #2
   86022:	2302      	movs	r3, #2
   86024:	e624      	b.n	85c70 <_svfprintf_r+0x1fc>
   86026:	2201      	movs	r2, #1
   86028:	9311      	str	r3, [sp, #68]	; 0x44
   8602a:	2300      	movs	r3, #0
   8602c:	4611      	mov	r1, r2
   8602e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   86030:	9208      	str	r2, [sp, #32]
   86032:	6802      	ldr	r2, [r0, #0]
   86034:	461f      	mov	r7, r3
   86036:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8603a:	930a      	str	r3, [sp, #40]	; 0x28
   8603c:	9312      	str	r3, [sp, #72]	; 0x48
   8603e:	1d03      	adds	r3, r0, #4
   86040:	f8cd b01c 	str.w	fp, [sp, #28]
   86044:	910e      	str	r1, [sp, #56]	; 0x38
   86046:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   8604a:	930f      	str	r3, [sp, #60]	; 0x3c
   8604c:	ae28      	add	r6, sp, #160	; 0xa0
   8604e:	e639      	b.n	85cc4 <_svfprintf_r+0x250>
   86050:	9311      	str	r3, [sp, #68]	; 0x44
   86052:	2a00      	cmp	r2, #0
   86054:	f040 8784 	bne.w	86f60 <_svfprintf_r+0x14ec>
   86058:	f04b 0b10 	orr.w	fp, fp, #16
   8605c:	f01b 0f20 	tst.w	fp, #32
   86060:	f040 8475 	bne.w	8694e <_svfprintf_r+0xeda>
   86064:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86066:	f01b 0f10 	tst.w	fp, #16
   8606a:	4613      	mov	r3, r2
   8606c:	f040 839d 	bne.w	867aa <_svfprintf_r+0xd36>
   86070:	f01b 0f40 	tst.w	fp, #64	; 0x40
   86074:	f000 8399 	beq.w	867aa <_svfprintf_r+0xd36>
   86078:	f9b2 4000 	ldrsh.w	r4, [r2]
   8607c:	3304      	adds	r3, #4
   8607e:	17e5      	asrs	r5, r4, #31
   86080:	930f      	str	r3, [sp, #60]	; 0x3c
   86082:	4622      	mov	r2, r4
   86084:	462b      	mov	r3, r5
   86086:	2a00      	cmp	r2, #0
   86088:	f173 0300 	sbcs.w	r3, r3, #0
   8608c:	f2c0 8398 	blt.w	867c0 <_svfprintf_r+0xd4c>
   86090:	990a      	ldr	r1, [sp, #40]	; 0x28
   86092:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86096:	1c4a      	adds	r2, r1, #1
   86098:	f04f 0301 	mov.w	r3, #1
   8609c:	f47f adf0 	bne.w	85c80 <_svfprintf_r+0x20c>
   860a0:	ea54 0205 	orrs.w	r2, r4, r5
   860a4:	f000 8229 	beq.w	864fa <_svfprintf_r+0xa86>
   860a8:	f8cd b01c 	str.w	fp, [sp, #28]
   860ac:	2b01      	cmp	r3, #1
   860ae:	f000 830e 	beq.w	866ce <_svfprintf_r+0xc5a>
   860b2:	2b02      	cmp	r3, #2
   860b4:	f040 829c 	bne.w	865f0 <_svfprintf_r+0xb7c>
   860b8:	464e      	mov	r6, r9
   860ba:	9818      	ldr	r0, [sp, #96]	; 0x60
   860bc:	0923      	lsrs	r3, r4, #4
   860be:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   860c2:	0929      	lsrs	r1, r5, #4
   860c4:	f004 020f 	and.w	r2, r4, #15
   860c8:	460d      	mov	r5, r1
   860ca:	461c      	mov	r4, r3
   860cc:	5c83      	ldrb	r3, [r0, r2]
   860ce:	f806 3d01 	strb.w	r3, [r6, #-1]!
   860d2:	ea54 0305 	orrs.w	r3, r4, r5
   860d6:	d1f1      	bne.n	860bc <_svfprintf_r+0x648>
   860d8:	eba9 0306 	sub.w	r3, r9, r6
   860dc:	930e      	str	r3, [sp, #56]	; 0x38
   860de:	e5e5      	b.n	85cac <_svfprintf_r+0x238>
   860e0:	9311      	str	r3, [sp, #68]	; 0x44
   860e2:	2a00      	cmp	r2, #0
   860e4:	f040 8738 	bne.w	86f58 <_svfprintf_r+0x14e4>
   860e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   860ea:	f01b 0f08 	tst.w	fp, #8
   860ee:	f104 0407 	add.w	r4, r4, #7
   860f2:	f000 84cf 	beq.w	86a94 <_svfprintf_r+0x1020>
   860f6:	f024 0307 	bic.w	r3, r4, #7
   860fa:	f103 0208 	add.w	r2, r3, #8
   860fe:	920f      	str	r2, [sp, #60]	; 0x3c
   86100:	681a      	ldr	r2, [r3, #0]
   86102:	685b      	ldr	r3, [r3, #4]
   86104:	9215      	str	r2, [sp, #84]	; 0x54
   86106:	9314      	str	r3, [sp, #80]	; 0x50
   86108:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8610a:	9d15      	ldr	r5, [sp, #84]	; 0x54
   8610c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   86110:	4628      	mov	r0, r5
   86112:	4621      	mov	r1, r4
   86114:	f04f 32ff 	mov.w	r2, #4294967295
   86118:	4b6f      	ldr	r3, [pc, #444]	; (862d8 <_svfprintf_r+0x864>)
   8611a:	f003 faa1 	bl	89660 <__aeabi_dcmpun>
   8611e:	2800      	cmp	r0, #0
   86120:	f040 8434 	bne.w	8698c <_svfprintf_r+0xf18>
   86124:	4628      	mov	r0, r5
   86126:	4621      	mov	r1, r4
   86128:	f04f 32ff 	mov.w	r2, #4294967295
   8612c:	4b6a      	ldr	r3, [pc, #424]	; (862d8 <_svfprintf_r+0x864>)
   8612e:	f003 fa79 	bl	89624 <__aeabi_dcmple>
   86132:	2800      	cmp	r0, #0
   86134:	f040 842a 	bne.w	8698c <_svfprintf_r+0xf18>
   86138:	a815      	add	r0, sp, #84	; 0x54
   8613a:	c80d      	ldmia	r0, {r0, r2, r3}
   8613c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8613e:	f003 fa67 	bl	89610 <__aeabi_dcmplt>
   86142:	2800      	cmp	r0, #0
   86144:	f040 85d4 	bne.w	86cf0 <_svfprintf_r+0x127c>
   86148:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8614c:	2303      	movs	r3, #3
   8614e:	461a      	mov	r2, r3
   86150:	9308      	str	r3, [sp, #32]
   86152:	2300      	movs	r3, #0
   86154:	4e61      	ldr	r6, [pc, #388]	; (862dc <_svfprintf_r+0x868>)
   86156:	4619      	mov	r1, r3
   86158:	930a      	str	r3, [sp, #40]	; 0x28
   8615a:	4b61      	ldr	r3, [pc, #388]	; (862e0 <_svfprintf_r+0x86c>)
   8615c:	920e      	str	r2, [sp, #56]	; 0x38
   8615e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   86160:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   86164:	9007      	str	r0, [sp, #28]
   86166:	9112      	str	r1, [sp, #72]	; 0x48
   86168:	2a47      	cmp	r2, #71	; 0x47
   8616a:	bfd8      	it	le
   8616c:	461e      	movle	r6, r3
   8616e:	e5a5      	b.n	85cbc <_svfprintf_r+0x248>
   86170:	f04b 0b08 	orr.w	fp, fp, #8
   86174:	f89a 3000 	ldrb.w	r3, [sl]
   86178:	e4d6      	b.n	85b28 <_svfprintf_r+0xb4>
   8617a:	f04b 0b10 	orr.w	fp, fp, #16
   8617e:	9311      	str	r3, [sp, #68]	; 0x44
   86180:	f01b 0320 	ands.w	r3, fp, #32
   86184:	f43f aebb 	beq.w	85efe <_svfprintf_r+0x48a>
   86188:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8618a:	3407      	adds	r4, #7
   8618c:	f024 0307 	bic.w	r3, r4, #7
   86190:	f103 0208 	add.w	r2, r3, #8
   86194:	e9d3 4500 	ldrd	r4, r5, [r3]
   86198:	920f      	str	r2, [sp, #60]	; 0x3c
   8619a:	2300      	movs	r3, #0
   8619c:	e568      	b.n	85c70 <_svfprintf_r+0x1fc>
   8619e:	9311      	str	r3, [sp, #68]	; 0x44
   861a0:	2a00      	cmp	r2, #0
   861a2:	f040 86c2 	bne.w	86f2a <_svfprintf_r+0x14b6>
   861a6:	4b4f      	ldr	r3, [pc, #316]	; (862e4 <_svfprintf_r+0x870>)
   861a8:	f01b 0f20 	tst.w	fp, #32
   861ac:	9318      	str	r3, [sp, #96]	; 0x60
   861ae:	f43f af19 	beq.w	85fe4 <_svfprintf_r+0x570>
   861b2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   861b4:	f01b 0f01 	tst.w	fp, #1
   861b8:	f104 0407 	add.w	r4, r4, #7
   861bc:	f024 0307 	bic.w	r3, r4, #7
   861c0:	f103 0208 	add.w	r2, r3, #8
   861c4:	920f      	str	r2, [sp, #60]	; 0x3c
   861c6:	e9d3 4500 	ldrd	r4, r5, [r3]
   861ca:	f47f af1d 	bne.w	86008 <_svfprintf_r+0x594>
   861ce:	2302      	movs	r3, #2
   861d0:	e54e      	b.n	85c70 <_svfprintf_r+0x1fc>
   861d2:	f89a 3000 	ldrb.w	r3, [sl]
   861d6:	2900      	cmp	r1, #0
   861d8:	f47f aca6 	bne.w	85b28 <_svfprintf_r+0xb4>
   861dc:	2201      	movs	r2, #1
   861de:	2120      	movs	r1, #32
   861e0:	e4a2      	b.n	85b28 <_svfprintf_r+0xb4>
   861e2:	f04b 0b01 	orr.w	fp, fp, #1
   861e6:	f89a 3000 	ldrb.w	r3, [sl]
   861ea:	e49d      	b.n	85b28 <_svfprintf_r+0xb4>
   861ec:	f89a 3000 	ldrb.w	r3, [sl]
   861f0:	2201      	movs	r2, #1
   861f2:	212b      	movs	r1, #43	; 0x2b
   861f4:	e498      	b.n	85b28 <_svfprintf_r+0xb4>
   861f6:	f04b 0b20 	orr.w	fp, fp, #32
   861fa:	f89a 3000 	ldrb.w	r3, [sl]
   861fe:	e493      	b.n	85b28 <_svfprintf_r+0xb4>
   86200:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   86204:	f89a 3000 	ldrb.w	r3, [sl]
   86208:	e48e      	b.n	85b28 <_svfprintf_r+0xb4>
   8620a:	f89a 3000 	ldrb.w	r3, [sl]
   8620e:	2b6c      	cmp	r3, #108	; 0x6c
   86210:	bf03      	ittte	eq
   86212:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   86216:	f04b 0b20 	orreq.w	fp, fp, #32
   8621a:	f10a 0a01 	addeq.w	sl, sl, #1
   8621e:	f04b 0b10 	orrne.w	fp, fp, #16
   86222:	e481      	b.n	85b28 <_svfprintf_r+0xb4>
   86224:	2a00      	cmp	r2, #0
   86226:	f040 867c 	bne.w	86f22 <_svfprintf_r+0x14ae>
   8622a:	f01b 0f20 	tst.w	fp, #32
   8622e:	f040 8452 	bne.w	86ad6 <_svfprintf_r+0x1062>
   86232:	f01b 0f10 	tst.w	fp, #16
   86236:	f040 8438 	bne.w	86aaa <_svfprintf_r+0x1036>
   8623a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8623e:	f000 8434 	beq.w	86aaa <_svfprintf_r+0x1036>
   86242:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86244:	6813      	ldr	r3, [r2, #0]
   86246:	3204      	adds	r2, #4
   86248:	920f      	str	r2, [sp, #60]	; 0x3c
   8624a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   8624e:	801a      	strh	r2, [r3, #0]
   86250:	e437      	b.n	85ac2 <_svfprintf_r+0x4e>
   86252:	2378      	movs	r3, #120	; 0x78
   86254:	2230      	movs	r2, #48	; 0x30
   86256:	980f      	ldr	r0, [sp, #60]	; 0x3c
   86258:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   8625c:	9311      	str	r3, [sp, #68]	; 0x44
   8625e:	1d03      	adds	r3, r0, #4
   86260:	930f      	str	r3, [sp, #60]	; 0x3c
   86262:	4b20      	ldr	r3, [pc, #128]	; (862e4 <_svfprintf_r+0x870>)
   86264:	6804      	ldr	r4, [r0, #0]
   86266:	9318      	str	r3, [sp, #96]	; 0x60
   86268:	f04b 0b02 	orr.w	fp, fp, #2
   8626c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   86270:	2500      	movs	r5, #0
   86272:	2302      	movs	r3, #2
   86274:	e4fc      	b.n	85c70 <_svfprintf_r+0x1fc>
   86276:	9311      	str	r3, [sp, #68]	; 0x44
   86278:	2a00      	cmp	r2, #0
   8627a:	f43f aeef 	beq.w	8605c <_svfprintf_r+0x5e8>
   8627e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86282:	e6eb      	b.n	8605c <_svfprintf_r+0x5e8>
   86284:	2000      	movs	r0, #0
   86286:	4604      	mov	r4, r0
   86288:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8628c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   86290:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   86294:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   86298:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8629c:	2809      	cmp	r0, #9
   8629e:	d9f5      	bls.n	8628c <_svfprintf_r+0x818>
   862a0:	940d      	str	r4, [sp, #52]	; 0x34
   862a2:	e443      	b.n	85b2c <_svfprintf_r+0xb8>
   862a4:	9311      	str	r3, [sp, #68]	; 0x44
   862a6:	2a00      	cmp	r2, #0
   862a8:	f040 864a 	bne.w	86f40 <_svfprintf_r+0x14cc>
   862ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
   862ae:	2a00      	cmp	r2, #0
   862b0:	f43f acb6 	beq.w	85c20 <_svfprintf_r+0x1ac>
   862b4:	2300      	movs	r3, #0
   862b6:	2101      	movs	r1, #1
   862b8:	461f      	mov	r7, r3
   862ba:	9108      	str	r1, [sp, #32]
   862bc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   862c0:	f8cd b01c 	str.w	fp, [sp, #28]
   862c4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   862c8:	930a      	str	r3, [sp, #40]	; 0x28
   862ca:	9312      	str	r3, [sp, #72]	; 0x48
   862cc:	910e      	str	r1, [sp, #56]	; 0x38
   862ce:	ae28      	add	r6, sp, #160	; 0xa0
   862d0:	e4f8      	b.n	85cc4 <_svfprintf_r+0x250>
   862d2:	bf00      	nop
   862d4:	00089bb8 	.word	0x00089bb8
   862d8:	7fefffff 	.word	0x7fefffff
   862dc:	00089bac 	.word	0x00089bac
   862e0:	00089ba8 	.word	0x00089ba8
   862e4:	00089bcc 	.word	0x00089bcc
   862e8:	aa25      	add	r2, sp, #148	; 0x94
   862ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
   862ec:	980c      	ldr	r0, [sp, #48]	; 0x30
   862ee:	f002 fcad 	bl	88c4c <__ssprint_r>
   862f2:	2800      	cmp	r0, #0
   862f4:	f47f ac9b 	bne.w	85c2e <_svfprintf_r+0x1ba>
   862f8:	46c8      	mov	r8, r9
   862fa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   862fe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86300:	e533      	b.n	85d6a <_svfprintf_r+0x2f6>
   86302:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86304:	2b65      	cmp	r3, #101	; 0x65
   86306:	f340 809a 	ble.w	8643e <_svfprintf_r+0x9ca>
   8630a:	a815      	add	r0, sp, #84	; 0x54
   8630c:	c80d      	ldmia	r0, {r0, r2, r3}
   8630e:	9914      	ldr	r1, [sp, #80]	; 0x50
   86310:	f003 f974 	bl	895fc <__aeabi_dcmpeq>
   86314:	2800      	cmp	r0, #0
   86316:	f000 8193 	beq.w	86640 <_svfprintf_r+0xbcc>
   8631a:	2101      	movs	r1, #1
   8631c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8631e:	4ab5      	ldr	r2, [pc, #724]	; (865f4 <_svfprintf_r+0xb80>)
   86320:	440b      	add	r3, r1
   86322:	440c      	add	r4, r1
   86324:	2b07      	cmp	r3, #7
   86326:	9427      	str	r4, [sp, #156]	; 0x9c
   86328:	9326      	str	r3, [sp, #152]	; 0x98
   8632a:	f8c8 1004 	str.w	r1, [r8, #4]
   8632e:	f8c8 2000 	str.w	r2, [r8]
   86332:	f300 83c6 	bgt.w	86ac2 <_svfprintf_r+0x104e>
   86336:	f108 0808 	add.w	r8, r8, #8
   8633a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8633c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8633e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86340:	4293      	cmp	r3, r2
   86342:	db03      	blt.n	8634c <_svfprintf_r+0x8d8>
   86344:	9b07      	ldr	r3, [sp, #28]
   86346:	07dd      	lsls	r5, r3, #31
   86348:	f57f ad86 	bpl.w	85e58 <_svfprintf_r+0x3e4>
   8634c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8634e:	9919      	ldr	r1, [sp, #100]	; 0x64
   86350:	3301      	adds	r3, #1
   86352:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   86354:	440c      	add	r4, r1
   86356:	2b07      	cmp	r3, #7
   86358:	f8c8 2000 	str.w	r2, [r8]
   8635c:	f8c8 1004 	str.w	r1, [r8, #4]
   86360:	9427      	str	r4, [sp, #156]	; 0x9c
   86362:	9326      	str	r3, [sp, #152]	; 0x98
   86364:	f300 83c4 	bgt.w	86af0 <_svfprintf_r+0x107c>
   86368:	f108 0808 	add.w	r8, r8, #8
   8636c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8636e:	1e5e      	subs	r6, r3, #1
   86370:	2e00      	cmp	r6, #0
   86372:	f77f ad71 	ble.w	85e58 <_svfprintf_r+0x3e4>
   86376:	2e10      	cmp	r6, #16
   86378:	f340 8575 	ble.w	86e66 <_svfprintf_r+0x13f2>
   8637c:	4622      	mov	r2, r4
   8637e:	2710      	movs	r7, #16
   86380:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86382:	4d9d      	ldr	r5, [pc, #628]	; (865f8 <_svfprintf_r+0xb84>)
   86384:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86388:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8638a:	e005      	b.n	86398 <_svfprintf_r+0x924>
   8638c:	f108 0808 	add.w	r8, r8, #8
   86390:	3e10      	subs	r6, #16
   86392:	2e10      	cmp	r6, #16
   86394:	f340 8225 	ble.w	867e2 <_svfprintf_r+0xd6e>
   86398:	3301      	adds	r3, #1
   8639a:	3210      	adds	r2, #16
   8639c:	2b07      	cmp	r3, #7
   8639e:	9227      	str	r2, [sp, #156]	; 0x9c
   863a0:	9326      	str	r3, [sp, #152]	; 0x98
   863a2:	e888 00a0 	stmia.w	r8, {r5, r7}
   863a6:	ddf1      	ble.n	8638c <_svfprintf_r+0x918>
   863a8:	aa25      	add	r2, sp, #148	; 0x94
   863aa:	4621      	mov	r1, r4
   863ac:	4658      	mov	r0, fp
   863ae:	f002 fc4d 	bl	88c4c <__ssprint_r>
   863b2:	2800      	cmp	r0, #0
   863b4:	f47f ac3b 	bne.w	85c2e <_svfprintf_r+0x1ba>
   863b8:	46c8      	mov	r8, r9
   863ba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   863bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   863be:	e7e7      	b.n	86390 <_svfprintf_r+0x91c>
   863c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   863c2:	9a08      	ldr	r2, [sp, #32]
   863c4:	1a9f      	subs	r7, r3, r2
   863c6:	2f00      	cmp	r7, #0
   863c8:	f77f acf6 	ble.w	85db8 <_svfprintf_r+0x344>
   863cc:	2f10      	cmp	r7, #16
   863ce:	f340 84a8 	ble.w	86d22 <_svfprintf_r+0x12ae>
   863d2:	4d89      	ldr	r5, [pc, #548]	; (865f8 <_svfprintf_r+0xb84>)
   863d4:	4642      	mov	r2, r8
   863d6:	4621      	mov	r1, r4
   863d8:	46b0      	mov	r8, r6
   863da:	f04f 0b10 	mov.w	fp, #16
   863de:	462e      	mov	r6, r5
   863e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   863e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   863e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   863e6:	e004      	b.n	863f2 <_svfprintf_r+0x97e>
   863e8:	3f10      	subs	r7, #16
   863ea:	2f10      	cmp	r7, #16
   863ec:	f102 0208 	add.w	r2, r2, #8
   863f0:	dd15      	ble.n	8641e <_svfprintf_r+0x9aa>
   863f2:	3301      	adds	r3, #1
   863f4:	3110      	adds	r1, #16
   863f6:	2b07      	cmp	r3, #7
   863f8:	9127      	str	r1, [sp, #156]	; 0x9c
   863fa:	9326      	str	r3, [sp, #152]	; 0x98
   863fc:	e882 0840 	stmia.w	r2, {r6, fp}
   86400:	ddf2      	ble.n	863e8 <_svfprintf_r+0x974>
   86402:	aa25      	add	r2, sp, #148	; 0x94
   86404:	4629      	mov	r1, r5
   86406:	4620      	mov	r0, r4
   86408:	f002 fc20 	bl	88c4c <__ssprint_r>
   8640c:	2800      	cmp	r0, #0
   8640e:	f47f ac0e 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86412:	3f10      	subs	r7, #16
   86414:	2f10      	cmp	r7, #16
   86416:	464a      	mov	r2, r9
   86418:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8641a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8641c:	dce9      	bgt.n	863f2 <_svfprintf_r+0x97e>
   8641e:	4635      	mov	r5, r6
   86420:	460c      	mov	r4, r1
   86422:	4646      	mov	r6, r8
   86424:	4690      	mov	r8, r2
   86426:	3301      	adds	r3, #1
   86428:	443c      	add	r4, r7
   8642a:	2b07      	cmp	r3, #7
   8642c:	9427      	str	r4, [sp, #156]	; 0x9c
   8642e:	9326      	str	r3, [sp, #152]	; 0x98
   86430:	e888 00a0 	stmia.w	r8, {r5, r7}
   86434:	f300 829e 	bgt.w	86974 <_svfprintf_r+0xf00>
   86438:	f108 0808 	add.w	r8, r8, #8
   8643c:	e4bc      	b.n	85db8 <_svfprintf_r+0x344>
   8643e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86440:	2b01      	cmp	r3, #1
   86442:	f340 824f 	ble.w	868e4 <_svfprintf_r+0xe70>
   86446:	2301      	movs	r3, #1
   86448:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8644a:	441c      	add	r4, r3
   8644c:	441f      	add	r7, r3
   8644e:	2f07      	cmp	r7, #7
   86450:	9427      	str	r4, [sp, #156]	; 0x9c
   86452:	f8c8 6000 	str.w	r6, [r8]
   86456:	9726      	str	r7, [sp, #152]	; 0x98
   86458:	f8c8 3004 	str.w	r3, [r8, #4]
   8645c:	f300 825f 	bgt.w	8691e <_svfprintf_r+0xeaa>
   86460:	f108 0808 	add.w	r8, r8, #8
   86464:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86466:	3701      	adds	r7, #1
   86468:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8646a:	4414      	add	r4, r2
   8646c:	2f07      	cmp	r7, #7
   8646e:	9427      	str	r4, [sp, #156]	; 0x9c
   86470:	9726      	str	r7, [sp, #152]	; 0x98
   86472:	f8c8 3000 	str.w	r3, [r8]
   86476:	f8c8 2004 	str.w	r2, [r8, #4]
   8647a:	f300 825c 	bgt.w	86936 <_svfprintf_r+0xec2>
   8647e:	f108 0808 	add.w	r8, r8, #8
   86482:	a815      	add	r0, sp, #84	; 0x54
   86484:	c80d      	ldmia	r0, {r0, r2, r3}
   86486:	9914      	ldr	r1, [sp, #80]	; 0x50
   86488:	f003 f8b8 	bl	895fc <__aeabi_dcmpeq>
   8648c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8648e:	2800      	cmp	r0, #0
   86490:	f040 8141 	bne.w	86716 <_svfprintf_r+0xca2>
   86494:	3b01      	subs	r3, #1
   86496:	3701      	adds	r7, #1
   86498:	3601      	adds	r6, #1
   8649a:	441c      	add	r4, r3
   8649c:	2f07      	cmp	r7, #7
   8649e:	f8c8 6000 	str.w	r6, [r8]
   864a2:	9726      	str	r7, [sp, #152]	; 0x98
   864a4:	9427      	str	r4, [sp, #156]	; 0x9c
   864a6:	f8c8 3004 	str.w	r3, [r8, #4]
   864aa:	f300 8166 	bgt.w	8677a <_svfprintf_r+0xd06>
   864ae:	f108 0808 	add.w	r8, r8, #8
   864b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   864b4:	3701      	adds	r7, #1
   864b6:	4414      	add	r4, r2
   864b8:	ab21      	add	r3, sp, #132	; 0x84
   864ba:	2f07      	cmp	r7, #7
   864bc:	9427      	str	r4, [sp, #156]	; 0x9c
   864be:	9726      	str	r7, [sp, #152]	; 0x98
   864c0:	f8c8 2004 	str.w	r2, [r8, #4]
   864c4:	f8c8 3000 	str.w	r3, [r8]
   864c8:	f77f acc4 	ble.w	85e54 <_svfprintf_r+0x3e0>
   864cc:	aa25      	add	r2, sp, #148	; 0x94
   864ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   864d0:	980c      	ldr	r0, [sp, #48]	; 0x30
   864d2:	f002 fbbb 	bl	88c4c <__ssprint_r>
   864d6:	2800      	cmp	r0, #0
   864d8:	f47f aba9 	bne.w	85c2e <_svfprintf_r+0x1ba>
   864dc:	46c8      	mov	r8, r9
   864de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   864e0:	e4ba      	b.n	85e58 <_svfprintf_r+0x3e4>
   864e2:	aa25      	add	r2, sp, #148	; 0x94
   864e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   864e6:	980c      	ldr	r0, [sp, #48]	; 0x30
   864e8:	f002 fbb0 	bl	88c4c <__ssprint_r>
   864ec:	2800      	cmp	r0, #0
   864ee:	f43f acfd 	beq.w	85eec <_svfprintf_r+0x478>
   864f2:	f7ff bb9c 	b.w	85c2e <_svfprintf_r+0x1ba>
   864f6:	f8dd b01c 	ldr.w	fp, [sp, #28]
   864fa:	2b01      	cmp	r3, #1
   864fc:	f000 817e 	beq.w	867fc <_svfprintf_r+0xd88>
   86500:	2b02      	cmp	r3, #2
   86502:	d171      	bne.n	865e8 <_svfprintf_r+0xb74>
   86504:	f8cd b01c 	str.w	fp, [sp, #28]
   86508:	2400      	movs	r4, #0
   8650a:	2500      	movs	r5, #0
   8650c:	e5d4      	b.n	860b8 <_svfprintf_r+0x644>
   8650e:	aa25      	add	r2, sp, #148	; 0x94
   86510:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86512:	980c      	ldr	r0, [sp, #48]	; 0x30
   86514:	f002 fb9a 	bl	88c4c <__ssprint_r>
   86518:	2800      	cmp	r0, #0
   8651a:	f47f ab88 	bne.w	85c2e <_svfprintf_r+0x1ba>
   8651e:	46c8      	mov	r8, r9
   86520:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86522:	e486      	b.n	85e32 <_svfprintf_r+0x3be>
   86524:	aa25      	add	r2, sp, #148	; 0x94
   86526:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86528:	980c      	ldr	r0, [sp, #48]	; 0x30
   8652a:	f002 fb8f 	bl	88c4c <__ssprint_r>
   8652e:	2800      	cmp	r0, #0
   86530:	f47f ab7d 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86534:	46c8      	mov	r8, r9
   86536:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86538:	e429      	b.n	85d8e <_svfprintf_r+0x31a>
   8653a:	2001      	movs	r0, #1
   8653c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8653e:	4a2d      	ldr	r2, [pc, #180]	; (865f4 <_svfprintf_r+0xb80>)
   86540:	4403      	add	r3, r0
   86542:	4404      	add	r4, r0
   86544:	2b07      	cmp	r3, #7
   86546:	9427      	str	r4, [sp, #156]	; 0x9c
   86548:	9326      	str	r3, [sp, #152]	; 0x98
   8654a:	f8c8 0004 	str.w	r0, [r8, #4]
   8654e:	f8c8 2000 	str.w	r2, [r8]
   86552:	f340 82d8 	ble.w	86b06 <_svfprintf_r+0x1092>
   86556:	aa25      	add	r2, sp, #148	; 0x94
   86558:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8655a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8655c:	f002 fb76 	bl	88c4c <__ssprint_r>
   86560:	2800      	cmp	r0, #0
   86562:	f47f ab64 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86566:	46c8      	mov	r8, r9
   86568:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8656a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8656c:	b929      	cbnz	r1, 8657a <_svfprintf_r+0xb06>
   8656e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86570:	b91b      	cbnz	r3, 8657a <_svfprintf_r+0xb06>
   86572:	9b07      	ldr	r3, [sp, #28]
   86574:	07d8      	lsls	r0, r3, #31
   86576:	f57f ac6f 	bpl.w	85e58 <_svfprintf_r+0x3e4>
   8657a:	9819      	ldr	r0, [sp, #100]	; 0x64
   8657c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8657e:	4602      	mov	r2, r0
   86580:	3301      	adds	r3, #1
   86582:	4422      	add	r2, r4
   86584:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   86586:	2b07      	cmp	r3, #7
   86588:	9227      	str	r2, [sp, #156]	; 0x9c
   8658a:	f8c8 4000 	str.w	r4, [r8]
   8658e:	f8c8 0004 	str.w	r0, [r8, #4]
   86592:	9326      	str	r3, [sp, #152]	; 0x98
   86594:	f300 8431 	bgt.w	86dfa <_svfprintf_r+0x1386>
   86598:	f108 0808 	add.w	r8, r8, #8
   8659c:	2900      	cmp	r1, #0
   8659e:	f2c0 8409 	blt.w	86db4 <_svfprintf_r+0x1340>
   865a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   865a4:	3301      	adds	r3, #1
   865a6:	188c      	adds	r4, r1, r2
   865a8:	2b07      	cmp	r3, #7
   865aa:	9427      	str	r4, [sp, #156]	; 0x9c
   865ac:	9326      	str	r3, [sp, #152]	; 0x98
   865ae:	f8c8 6000 	str.w	r6, [r8]
   865b2:	f8c8 1004 	str.w	r1, [r8, #4]
   865b6:	f77f ac4d 	ble.w	85e54 <_svfprintf_r+0x3e0>
   865ba:	aa25      	add	r2, sp, #148	; 0x94
   865bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   865be:	980c      	ldr	r0, [sp, #48]	; 0x30
   865c0:	f002 fb44 	bl	88c4c <__ssprint_r>
   865c4:	2800      	cmp	r0, #0
   865c6:	f47f ab32 	bne.w	85c2e <_svfprintf_r+0x1ba>
   865ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   865cc:	46c8      	mov	r8, r9
   865ce:	e443      	b.n	85e58 <_svfprintf_r+0x3e4>
   865d0:	aa25      	add	r2, sp, #148	; 0x94
   865d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   865d4:	980c      	ldr	r0, [sp, #48]	; 0x30
   865d6:	f002 fb39 	bl	88c4c <__ssprint_r>
   865da:	2800      	cmp	r0, #0
   865dc:	f47f ab27 	bne.w	85c2e <_svfprintf_r+0x1ba>
   865e0:	46c8      	mov	r8, r9
   865e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   865e4:	f7ff bbe5 	b.w	85db2 <_svfprintf_r+0x33e>
   865e8:	2400      	movs	r4, #0
   865ea:	2500      	movs	r5, #0
   865ec:	f8cd b01c 	str.w	fp, [sp, #28]
   865f0:	4649      	mov	r1, r9
   865f2:	e004      	b.n	865fe <_svfprintf_r+0xb8a>
   865f4:	00089be8 	.word	0x00089be8
   865f8:	00089bfc 	.word	0x00089bfc
   865fc:	4631      	mov	r1, r6
   865fe:	08e2      	lsrs	r2, r4, #3
   86600:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   86604:	08e8      	lsrs	r0, r5, #3
   86606:	f004 0307 	and.w	r3, r4, #7
   8660a:	4605      	mov	r5, r0
   8660c:	4614      	mov	r4, r2
   8660e:	3330      	adds	r3, #48	; 0x30
   86610:	ea54 0205 	orrs.w	r2, r4, r5
   86614:	f801 3c01 	strb.w	r3, [r1, #-1]
   86618:	f101 36ff 	add.w	r6, r1, #4294967295
   8661c:	d1ee      	bne.n	865fc <_svfprintf_r+0xb88>
   8661e:	9a07      	ldr	r2, [sp, #28]
   86620:	07d2      	lsls	r2, r2, #31
   86622:	f57f ad59 	bpl.w	860d8 <_svfprintf_r+0x664>
   86626:	2b30      	cmp	r3, #48	; 0x30
   86628:	f43f ad56 	beq.w	860d8 <_svfprintf_r+0x664>
   8662c:	2330      	movs	r3, #48	; 0x30
   8662e:	3902      	subs	r1, #2
   86630:	f806 3c01 	strb.w	r3, [r6, #-1]
   86634:	eba9 0301 	sub.w	r3, r9, r1
   86638:	930e      	str	r3, [sp, #56]	; 0x38
   8663a:	460e      	mov	r6, r1
   8663c:	f7ff bb36 	b.w	85cac <_svfprintf_r+0x238>
   86640:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86642:	2900      	cmp	r1, #0
   86644:	f77f af79 	ble.w	8653a <_svfprintf_r+0xac6>
   86648:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8664a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8664c:	4293      	cmp	r3, r2
   8664e:	bfa8      	it	ge
   86650:	4613      	movge	r3, r2
   86652:	2b00      	cmp	r3, #0
   86654:	461f      	mov	r7, r3
   86656:	dd0b      	ble.n	86670 <_svfprintf_r+0xbfc>
   86658:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8665a:	443c      	add	r4, r7
   8665c:	3301      	adds	r3, #1
   8665e:	2b07      	cmp	r3, #7
   86660:	9427      	str	r4, [sp, #156]	; 0x9c
   86662:	e888 00c0 	stmia.w	r8, {r6, r7}
   86666:	9326      	str	r3, [sp, #152]	; 0x98
   86668:	f300 82fb 	bgt.w	86c62 <_svfprintf_r+0x11ee>
   8666c:	f108 0808 	add.w	r8, r8, #8
   86670:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86672:	2f00      	cmp	r7, #0
   86674:	bfa8      	it	ge
   86676:	1bdb      	subge	r3, r3, r7
   86678:	2b00      	cmp	r3, #0
   8667a:	461f      	mov	r7, r3
   8667c:	f340 80d7 	ble.w	8682e <_svfprintf_r+0xdba>
   86680:	2b10      	cmp	r3, #16
   86682:	f340 8434 	ble.w	86eee <_svfprintf_r+0x147a>
   86686:	4dba      	ldr	r5, [pc, #744]	; (86970 <_svfprintf_r+0xefc>)
   86688:	4642      	mov	r2, r8
   8668a:	4621      	mov	r1, r4
   8668c:	46b0      	mov	r8, r6
   8668e:	f04f 0b10 	mov.w	fp, #16
   86692:	462e      	mov	r6, r5
   86694:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86696:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86698:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8669a:	e004      	b.n	866a6 <_svfprintf_r+0xc32>
   8669c:	3208      	adds	r2, #8
   8669e:	3f10      	subs	r7, #16
   866a0:	2f10      	cmp	r7, #16
   866a2:	f340 80b5 	ble.w	86810 <_svfprintf_r+0xd9c>
   866a6:	3301      	adds	r3, #1
   866a8:	3110      	adds	r1, #16
   866aa:	2b07      	cmp	r3, #7
   866ac:	9127      	str	r1, [sp, #156]	; 0x9c
   866ae:	9326      	str	r3, [sp, #152]	; 0x98
   866b0:	e882 0840 	stmia.w	r2, {r6, fp}
   866b4:	ddf2      	ble.n	8669c <_svfprintf_r+0xc28>
   866b6:	aa25      	add	r2, sp, #148	; 0x94
   866b8:	4629      	mov	r1, r5
   866ba:	4620      	mov	r0, r4
   866bc:	f002 fac6 	bl	88c4c <__ssprint_r>
   866c0:	2800      	cmp	r0, #0
   866c2:	f47f aab4 	bne.w	85c2e <_svfprintf_r+0x1ba>
   866c6:	464a      	mov	r2, r9
   866c8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   866ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   866cc:	e7e7      	b.n	8669e <_svfprintf_r+0xc2a>
   866ce:	2d00      	cmp	r5, #0
   866d0:	bf08      	it	eq
   866d2:	2c0a      	cmpeq	r4, #10
   866d4:	f0c0 8090 	bcc.w	867f8 <_svfprintf_r+0xd84>
   866d8:	464e      	mov	r6, r9
   866da:	4620      	mov	r0, r4
   866dc:	4629      	mov	r1, r5
   866de:	220a      	movs	r2, #10
   866e0:	2300      	movs	r3, #0
   866e2:	f002 fffb 	bl	896dc <__aeabi_uldivmod>
   866e6:	3230      	adds	r2, #48	; 0x30
   866e8:	f806 2d01 	strb.w	r2, [r6, #-1]!
   866ec:	4620      	mov	r0, r4
   866ee:	4629      	mov	r1, r5
   866f0:	2300      	movs	r3, #0
   866f2:	220a      	movs	r2, #10
   866f4:	f002 fff2 	bl	896dc <__aeabi_uldivmod>
   866f8:	4604      	mov	r4, r0
   866fa:	460d      	mov	r5, r1
   866fc:	ea54 0305 	orrs.w	r3, r4, r5
   86700:	d1eb      	bne.n	866da <_svfprintf_r+0xc66>
   86702:	eba9 0306 	sub.w	r3, r9, r6
   86706:	930e      	str	r3, [sp, #56]	; 0x38
   86708:	f7ff bad0 	b.w	85cac <_svfprintf_r+0x238>
   8670c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8670e:	464e      	mov	r6, r9
   86710:	930e      	str	r3, [sp, #56]	; 0x38
   86712:	f7ff bacb 	b.w	85cac <_svfprintf_r+0x238>
   86716:	1e5e      	subs	r6, r3, #1
   86718:	2e00      	cmp	r6, #0
   8671a:	f77f aeca 	ble.w	864b2 <_svfprintf_r+0xa3e>
   8671e:	2e10      	cmp	r6, #16
   86720:	f340 83e3 	ble.w	86eea <_svfprintf_r+0x1476>
   86724:	4622      	mov	r2, r4
   86726:	f04f 0b10 	mov.w	fp, #16
   8672a:	4d91      	ldr	r5, [pc, #580]	; (86970 <_svfprintf_r+0xefc>)
   8672c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8672e:	e004      	b.n	8673a <_svfprintf_r+0xcc6>
   86730:	3e10      	subs	r6, #16
   86732:	2e10      	cmp	r6, #16
   86734:	f108 0808 	add.w	r8, r8, #8
   86738:	dd15      	ble.n	86766 <_svfprintf_r+0xcf2>
   8673a:	3701      	adds	r7, #1
   8673c:	3210      	adds	r2, #16
   8673e:	2f07      	cmp	r7, #7
   86740:	9227      	str	r2, [sp, #156]	; 0x9c
   86742:	9726      	str	r7, [sp, #152]	; 0x98
   86744:	e888 0820 	stmia.w	r8, {r5, fp}
   86748:	ddf2      	ble.n	86730 <_svfprintf_r+0xcbc>
   8674a:	aa25      	add	r2, sp, #148	; 0x94
   8674c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8674e:	4620      	mov	r0, r4
   86750:	f002 fa7c 	bl	88c4c <__ssprint_r>
   86754:	2800      	cmp	r0, #0
   86756:	f47f aa6a 	bne.w	85c2e <_svfprintf_r+0x1ba>
   8675a:	3e10      	subs	r6, #16
   8675c:	2e10      	cmp	r6, #16
   8675e:	46c8      	mov	r8, r9
   86760:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86762:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86764:	dce9      	bgt.n	8673a <_svfprintf_r+0xcc6>
   86766:	4614      	mov	r4, r2
   86768:	3701      	adds	r7, #1
   8676a:	4434      	add	r4, r6
   8676c:	2f07      	cmp	r7, #7
   8676e:	9427      	str	r4, [sp, #156]	; 0x9c
   86770:	9726      	str	r7, [sp, #152]	; 0x98
   86772:	e888 0060 	stmia.w	r8, {r5, r6}
   86776:	f77f ae9a 	ble.w	864ae <_svfprintf_r+0xa3a>
   8677a:	aa25      	add	r2, sp, #148	; 0x94
   8677c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8677e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86780:	f002 fa64 	bl	88c4c <__ssprint_r>
   86784:	2800      	cmp	r0, #0
   86786:	f47f aa52 	bne.w	85c2e <_svfprintf_r+0x1ba>
   8678a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8678c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8678e:	46c8      	mov	r8, r9
   86790:	e68f      	b.n	864b2 <_svfprintf_r+0xa3e>
   86792:	3204      	adds	r2, #4
   86794:	681c      	ldr	r4, [r3, #0]
   86796:	2500      	movs	r5, #0
   86798:	2301      	movs	r3, #1
   8679a:	920f      	str	r2, [sp, #60]	; 0x3c
   8679c:	f7ff ba68 	b.w	85c70 <_svfprintf_r+0x1fc>
   867a0:	681c      	ldr	r4, [r3, #0]
   867a2:	3304      	adds	r3, #4
   867a4:	930f      	str	r3, [sp, #60]	; 0x3c
   867a6:	2500      	movs	r5, #0
   867a8:	e42a      	b.n	86000 <_svfprintf_r+0x58c>
   867aa:	681c      	ldr	r4, [r3, #0]
   867ac:	3304      	adds	r3, #4
   867ae:	17e5      	asrs	r5, r4, #31
   867b0:	4622      	mov	r2, r4
   867b2:	930f      	str	r3, [sp, #60]	; 0x3c
   867b4:	462b      	mov	r3, r5
   867b6:	2a00      	cmp	r2, #0
   867b8:	f173 0300 	sbcs.w	r3, r3, #0
   867bc:	f6bf ac68 	bge.w	86090 <_svfprintf_r+0x61c>
   867c0:	272d      	movs	r7, #45	; 0x2d
   867c2:	4264      	negs	r4, r4
   867c4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   867c8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   867cc:	2301      	movs	r3, #1
   867ce:	f7ff ba53 	b.w	85c78 <_svfprintf_r+0x204>
   867d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   867d4:	2500      	movs	r5, #0
   867d6:	460a      	mov	r2, r1
   867d8:	3204      	adds	r2, #4
   867da:	680c      	ldr	r4, [r1, #0]
   867dc:	920f      	str	r2, [sp, #60]	; 0x3c
   867de:	f7ff ba47 	b.w	85c70 <_svfprintf_r+0x1fc>
   867e2:	4614      	mov	r4, r2
   867e4:	3301      	adds	r3, #1
   867e6:	4434      	add	r4, r6
   867e8:	2b07      	cmp	r3, #7
   867ea:	9427      	str	r4, [sp, #156]	; 0x9c
   867ec:	9326      	str	r3, [sp, #152]	; 0x98
   867ee:	e888 0060 	stmia.w	r8, {r5, r6}
   867f2:	f77f ab2f 	ble.w	85e54 <_svfprintf_r+0x3e0>
   867f6:	e6e0      	b.n	865ba <_svfprintf_r+0xb46>
   867f8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   867fc:	2301      	movs	r3, #1
   867fe:	ae42      	add	r6, sp, #264	; 0x108
   86800:	3430      	adds	r4, #48	; 0x30
   86802:	f8cd b01c 	str.w	fp, [sp, #28]
   86806:	f806 4d41 	strb.w	r4, [r6, #-65]!
   8680a:	930e      	str	r3, [sp, #56]	; 0x38
   8680c:	f7ff ba4e 	b.w	85cac <_svfprintf_r+0x238>
   86810:	4635      	mov	r5, r6
   86812:	460c      	mov	r4, r1
   86814:	4646      	mov	r6, r8
   86816:	4690      	mov	r8, r2
   86818:	3301      	adds	r3, #1
   8681a:	443c      	add	r4, r7
   8681c:	2b07      	cmp	r3, #7
   8681e:	9427      	str	r4, [sp, #156]	; 0x9c
   86820:	9326      	str	r3, [sp, #152]	; 0x98
   86822:	e888 00a0 	stmia.w	r8, {r5, r7}
   86826:	f300 8246 	bgt.w	86cb6 <_svfprintf_r+0x1242>
   8682a:	f108 0808 	add.w	r8, r8, #8
   8682e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86832:	429a      	cmp	r2, r3
   86834:	db45      	blt.n	868c2 <_svfprintf_r+0xe4e>
   86836:	9b07      	ldr	r3, [sp, #28]
   86838:	07d9      	lsls	r1, r3, #31
   8683a:	d442      	bmi.n	868c2 <_svfprintf_r+0xe4e>
   8683c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8683e:	9812      	ldr	r0, [sp, #72]	; 0x48
   86840:	1a9a      	subs	r2, r3, r2
   86842:	1a1d      	subs	r5, r3, r0
   86844:	4295      	cmp	r5, r2
   86846:	bfa8      	it	ge
   86848:	4615      	movge	r5, r2
   8684a:	2d00      	cmp	r5, #0
   8684c:	dd0e      	ble.n	8686c <_svfprintf_r+0xdf8>
   8684e:	9926      	ldr	r1, [sp, #152]	; 0x98
   86850:	4406      	add	r6, r0
   86852:	3101      	adds	r1, #1
   86854:	442c      	add	r4, r5
   86856:	2907      	cmp	r1, #7
   86858:	f8c8 6000 	str.w	r6, [r8]
   8685c:	9427      	str	r4, [sp, #156]	; 0x9c
   8685e:	f8c8 5004 	str.w	r5, [r8, #4]
   86862:	9126      	str	r1, [sp, #152]	; 0x98
   86864:	f300 8216 	bgt.w	86c94 <_svfprintf_r+0x1220>
   86868:	f108 0808 	add.w	r8, r8, #8
   8686c:	2d00      	cmp	r5, #0
   8686e:	bfb4      	ite	lt
   86870:	4616      	movlt	r6, r2
   86872:	1b56      	subge	r6, r2, r5
   86874:	2e00      	cmp	r6, #0
   86876:	f77f aaef 	ble.w	85e58 <_svfprintf_r+0x3e4>
   8687a:	2e10      	cmp	r6, #16
   8687c:	f340 82f3 	ble.w	86e66 <_svfprintf_r+0x13f2>
   86880:	4622      	mov	r2, r4
   86882:	2710      	movs	r7, #16
   86884:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86886:	4d3a      	ldr	r5, [pc, #232]	; (86970 <_svfprintf_r+0xefc>)
   86888:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8688c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8688e:	e004      	b.n	8689a <_svfprintf_r+0xe26>
   86890:	f108 0808 	add.w	r8, r8, #8
   86894:	3e10      	subs	r6, #16
   86896:	2e10      	cmp	r6, #16
   86898:	dda3      	ble.n	867e2 <_svfprintf_r+0xd6e>
   8689a:	3301      	adds	r3, #1
   8689c:	3210      	adds	r2, #16
   8689e:	2b07      	cmp	r3, #7
   868a0:	9227      	str	r2, [sp, #156]	; 0x9c
   868a2:	9326      	str	r3, [sp, #152]	; 0x98
   868a4:	e888 00a0 	stmia.w	r8, {r5, r7}
   868a8:	ddf2      	ble.n	86890 <_svfprintf_r+0xe1c>
   868aa:	aa25      	add	r2, sp, #148	; 0x94
   868ac:	4621      	mov	r1, r4
   868ae:	4658      	mov	r0, fp
   868b0:	f002 f9cc 	bl	88c4c <__ssprint_r>
   868b4:	2800      	cmp	r0, #0
   868b6:	f47f a9ba 	bne.w	85c2e <_svfprintf_r+0x1ba>
   868ba:	46c8      	mov	r8, r9
   868bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   868be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   868c0:	e7e8      	b.n	86894 <_svfprintf_r+0xe20>
   868c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   868c4:	9819      	ldr	r0, [sp, #100]	; 0x64
   868c6:	3301      	adds	r3, #1
   868c8:	991a      	ldr	r1, [sp, #104]	; 0x68
   868ca:	4404      	add	r4, r0
   868cc:	2b07      	cmp	r3, #7
   868ce:	9427      	str	r4, [sp, #156]	; 0x9c
   868d0:	f8c8 1000 	str.w	r1, [r8]
   868d4:	f8c8 0004 	str.w	r0, [r8, #4]
   868d8:	9326      	str	r3, [sp, #152]	; 0x98
   868da:	f300 81cf 	bgt.w	86c7c <_svfprintf_r+0x1208>
   868de:	f108 0808 	add.w	r8, r8, #8
   868e2:	e7ab      	b.n	8683c <_svfprintf_r+0xdc8>
   868e4:	9b07      	ldr	r3, [sp, #28]
   868e6:	07da      	lsls	r2, r3, #31
   868e8:	f53f adad 	bmi.w	86446 <_svfprintf_r+0x9d2>
   868ec:	2301      	movs	r3, #1
   868ee:	9f26      	ldr	r7, [sp, #152]	; 0x98
   868f0:	441c      	add	r4, r3
   868f2:	441f      	add	r7, r3
   868f4:	2f07      	cmp	r7, #7
   868f6:	9427      	str	r4, [sp, #156]	; 0x9c
   868f8:	f8c8 6000 	str.w	r6, [r8]
   868fc:	9726      	str	r7, [sp, #152]	; 0x98
   868fe:	f8c8 3004 	str.w	r3, [r8, #4]
   86902:	f77f add4 	ble.w	864ae <_svfprintf_r+0xa3a>
   86906:	aa25      	add	r2, sp, #148	; 0x94
   86908:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8690a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8690c:	f002 f99e 	bl	88c4c <__ssprint_r>
   86910:	2800      	cmp	r0, #0
   86912:	f47f a98c 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86916:	46c8      	mov	r8, r9
   86918:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8691a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8691c:	e5c9      	b.n	864b2 <_svfprintf_r+0xa3e>
   8691e:	aa25      	add	r2, sp, #148	; 0x94
   86920:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86922:	980c      	ldr	r0, [sp, #48]	; 0x30
   86924:	f002 f992 	bl	88c4c <__ssprint_r>
   86928:	2800      	cmp	r0, #0
   8692a:	f47f a980 	bne.w	85c2e <_svfprintf_r+0x1ba>
   8692e:	46c8      	mov	r8, r9
   86930:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86932:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86934:	e596      	b.n	86464 <_svfprintf_r+0x9f0>
   86936:	aa25      	add	r2, sp, #148	; 0x94
   86938:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8693a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8693c:	f002 f986 	bl	88c4c <__ssprint_r>
   86940:	2800      	cmp	r0, #0
   86942:	f47f a974 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86946:	46c8      	mov	r8, r9
   86948:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8694a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8694c:	e599      	b.n	86482 <_svfprintf_r+0xa0e>
   8694e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86950:	3407      	adds	r4, #7
   86952:	f024 0407 	bic.w	r4, r4, #7
   86956:	f104 0108 	add.w	r1, r4, #8
   8695a:	e9d4 2300 	ldrd	r2, r3, [r4]
   8695e:	910f      	str	r1, [sp, #60]	; 0x3c
   86960:	4614      	mov	r4, r2
   86962:	461d      	mov	r5, r3
   86964:	f7ff bb8f 	b.w	86086 <_svfprintf_r+0x612>
   86968:	464e      	mov	r6, r9
   8696a:	f7ff b99f 	b.w	85cac <_svfprintf_r+0x238>
   8696e:	bf00      	nop
   86970:	00089bfc 	.word	0x00089bfc
   86974:	aa25      	add	r2, sp, #148	; 0x94
   86976:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86978:	980c      	ldr	r0, [sp, #48]	; 0x30
   8697a:	f002 f967 	bl	88c4c <__ssprint_r>
   8697e:	2800      	cmp	r0, #0
   86980:	f47f a955 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86984:	46c8      	mov	r8, r9
   86986:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86988:	f7ff ba16 	b.w	85db8 <_svfprintf_r+0x344>
   8698c:	9c15      	ldr	r4, [sp, #84]	; 0x54
   8698e:	4622      	mov	r2, r4
   86990:	4620      	mov	r0, r4
   86992:	9c14      	ldr	r4, [sp, #80]	; 0x50
   86994:	4623      	mov	r3, r4
   86996:	4621      	mov	r1, r4
   86998:	f002 fe62 	bl	89660 <__aeabi_dcmpun>
   8699c:	2800      	cmp	r0, #0
   8699e:	f040 8273 	bne.w	86e88 <_svfprintf_r+0x1414>
   869a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   869a4:	3301      	adds	r3, #1
   869a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   869a8:	f023 0320 	bic.w	r3, r3, #32
   869ac:	930e      	str	r3, [sp, #56]	; 0x38
   869ae:	f000 819c 	beq.w	86cea <_svfprintf_r+0x1276>
   869b2:	2b47      	cmp	r3, #71	; 0x47
   869b4:	f000 80d6 	beq.w	86b64 <_svfprintf_r+0x10f0>
   869b8:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   869bc:	9307      	str	r3, [sp, #28]
   869be:	9b14      	ldr	r3, [sp, #80]	; 0x50
   869c0:	1e1f      	subs	r7, r3, #0
   869c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   869c4:	9308      	str	r3, [sp, #32]
   869c6:	bfb7      	itett	lt
   869c8:	463b      	movlt	r3, r7
   869ca:	2300      	movge	r3, #0
   869cc:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   869d0:	232d      	movlt	r3, #45	; 0x2d
   869d2:	9310      	str	r3, [sp, #64]	; 0x40
   869d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   869d6:	2b66      	cmp	r3, #102	; 0x66
   869d8:	f000 8190 	beq.w	86cfc <_svfprintf_r+0x1288>
   869dc:	2b46      	cmp	r3, #70	; 0x46
   869de:	f000 80a4 	beq.w	86b2a <_svfprintf_r+0x10b6>
   869e2:	2002      	movs	r0, #2
   869e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   869e6:	a923      	add	r1, sp, #140	; 0x8c
   869e8:	2b45      	cmp	r3, #69	; 0x45
   869ea:	bf0a      	itet	eq
   869ec:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   869ee:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   869f0:	1c5d      	addeq	r5, r3, #1
   869f2:	e88d 0021 	stmia.w	sp, {r0, r5}
   869f6:	9104      	str	r1, [sp, #16]
   869f8:	a820      	add	r0, sp, #128	; 0x80
   869fa:	a91f      	add	r1, sp, #124	; 0x7c
   869fc:	463b      	mov	r3, r7
   869fe:	9003      	str	r0, [sp, #12]
   86a00:	9a08      	ldr	r2, [sp, #32]
   86a02:	9102      	str	r1, [sp, #8]
   86a04:	980c      	ldr	r0, [sp, #48]	; 0x30
   86a06:	f000 fb5b 	bl	870c0 <_dtoa_r>
   86a0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86a0c:	4606      	mov	r6, r0
   86a0e:	2b67      	cmp	r3, #103	; 0x67
   86a10:	f040 81ba 	bne.w	86d88 <_svfprintf_r+0x1314>
   86a14:	f01b 0f01 	tst.w	fp, #1
   86a18:	f000 8223 	beq.w	86e62 <_svfprintf_r+0x13ee>
   86a1c:	1974      	adds	r4, r6, r5
   86a1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86a20:	9808      	ldr	r0, [sp, #32]
   86a22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86a24:	4639      	mov	r1, r7
   86a26:	f002 fde9 	bl	895fc <__aeabi_dcmpeq>
   86a2a:	2800      	cmp	r0, #0
   86a2c:	f040 8124 	bne.w	86c78 <_svfprintf_r+0x1204>
   86a30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86a32:	42a3      	cmp	r3, r4
   86a34:	d206      	bcs.n	86a44 <_svfprintf_r+0xfd0>
   86a36:	2130      	movs	r1, #48	; 0x30
   86a38:	1c5a      	adds	r2, r3, #1
   86a3a:	9223      	str	r2, [sp, #140]	; 0x8c
   86a3c:	7019      	strb	r1, [r3, #0]
   86a3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86a40:	429c      	cmp	r4, r3
   86a42:	d8f9      	bhi.n	86a38 <_svfprintf_r+0xfc4>
   86a44:	1b9b      	subs	r3, r3, r6
   86a46:	9313      	str	r3, [sp, #76]	; 0x4c
   86a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a4a:	2b47      	cmp	r3, #71	; 0x47
   86a4c:	f000 80a2 	beq.w	86b94 <_svfprintf_r+0x1120>
   86a50:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86a52:	2b65      	cmp	r3, #101	; 0x65
   86a54:	f340 81a7 	ble.w	86da6 <_svfprintf_r+0x1332>
   86a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86a5a:	2b66      	cmp	r3, #102	; 0x66
   86a5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86a5e:	9312      	str	r3, [sp, #72]	; 0x48
   86a60:	f000 8171 	beq.w	86d46 <_svfprintf_r+0x12d2>
   86a64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86a66:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86a68:	4619      	mov	r1, r3
   86a6a:	4291      	cmp	r1, r2
   86a6c:	f300 815d 	bgt.w	86d2a <_svfprintf_r+0x12b6>
   86a70:	f01b 0f01 	tst.w	fp, #1
   86a74:	f040 81f0 	bne.w	86e58 <_svfprintf_r+0x13e4>
   86a78:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86a7c:	9308      	str	r3, [sp, #32]
   86a7e:	2367      	movs	r3, #103	; 0x67
   86a80:	920e      	str	r2, [sp, #56]	; 0x38
   86a82:	9311      	str	r3, [sp, #68]	; 0x44
   86a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86a86:	2b00      	cmp	r3, #0
   86a88:	d17d      	bne.n	86b86 <_svfprintf_r+0x1112>
   86a8a:	930a      	str	r3, [sp, #40]	; 0x28
   86a8c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86a90:	f7ff b914 	b.w	85cbc <_svfprintf_r+0x248>
   86a94:	f024 0407 	bic.w	r4, r4, #7
   86a98:	6823      	ldr	r3, [r4, #0]
   86a9a:	9315      	str	r3, [sp, #84]	; 0x54
   86a9c:	6863      	ldr	r3, [r4, #4]
   86a9e:	9314      	str	r3, [sp, #80]	; 0x50
   86aa0:	f104 0308 	add.w	r3, r4, #8
   86aa4:	930f      	str	r3, [sp, #60]	; 0x3c
   86aa6:	f7ff bb2f 	b.w	86108 <_svfprintf_r+0x694>
   86aaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86aac:	6813      	ldr	r3, [r2, #0]
   86aae:	3204      	adds	r2, #4
   86ab0:	920f      	str	r2, [sp, #60]	; 0x3c
   86ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86ab4:	601a      	str	r2, [r3, #0]
   86ab6:	f7ff b804 	b.w	85ac2 <_svfprintf_r+0x4e>
   86aba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86abc:	4daf      	ldr	r5, [pc, #700]	; (86d7c <_svfprintf_r+0x1308>)
   86abe:	f7ff b9ad 	b.w	85e1c <_svfprintf_r+0x3a8>
   86ac2:	aa25      	add	r2, sp, #148	; 0x94
   86ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86ac6:	980c      	ldr	r0, [sp, #48]	; 0x30
   86ac8:	f002 f8c0 	bl	88c4c <__ssprint_r>
   86acc:	2800      	cmp	r0, #0
   86ace:	f47f a8ae 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86ad2:	46c8      	mov	r8, r9
   86ad4:	e431      	b.n	8633a <_svfprintf_r+0x8c6>
   86ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86ad8:	4613      	mov	r3, r2
   86ada:	3304      	adds	r3, #4
   86adc:	930f      	str	r3, [sp, #60]	; 0x3c
   86ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86ae0:	6811      	ldr	r1, [r2, #0]
   86ae2:	17dd      	asrs	r5, r3, #31
   86ae4:	461a      	mov	r2, r3
   86ae6:	462b      	mov	r3, r5
   86ae8:	e9c1 2300 	strd	r2, r3, [r1]
   86aec:	f7fe bfe9 	b.w	85ac2 <_svfprintf_r+0x4e>
   86af0:	aa25      	add	r2, sp, #148	; 0x94
   86af2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86af4:	980c      	ldr	r0, [sp, #48]	; 0x30
   86af6:	f002 f8a9 	bl	88c4c <__ssprint_r>
   86afa:	2800      	cmp	r0, #0
   86afc:	f47f a897 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86b00:	46c8      	mov	r8, r9
   86b02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86b04:	e432      	b.n	8636c <_svfprintf_r+0x8f8>
   86b06:	f108 0808 	add.w	r8, r8, #8
   86b0a:	e52f      	b.n	8656c <_svfprintf_r+0xaf8>
   86b0c:	2140      	movs	r1, #64	; 0x40
   86b0e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86b10:	f001 fa24 	bl	87f5c <_malloc_r>
   86b14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86b16:	6010      	str	r0, [r2, #0]
   86b18:	6110      	str	r0, [r2, #16]
   86b1a:	2800      	cmp	r0, #0
   86b1c:	f000 8214 	beq.w	86f48 <_svfprintf_r+0x14d4>
   86b20:	2340      	movs	r3, #64	; 0x40
   86b22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86b24:	6153      	str	r3, [r2, #20]
   86b26:	f7fe bfbc 	b.w	85aa2 <_svfprintf_r+0x2e>
   86b2a:	2003      	movs	r0, #3
   86b2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86b2e:	a923      	add	r1, sp, #140	; 0x8c
   86b30:	e88d 0011 	stmia.w	sp, {r0, r4}
   86b34:	9104      	str	r1, [sp, #16]
   86b36:	a820      	add	r0, sp, #128	; 0x80
   86b38:	a91f      	add	r1, sp, #124	; 0x7c
   86b3a:	9003      	str	r0, [sp, #12]
   86b3c:	9a08      	ldr	r2, [sp, #32]
   86b3e:	463b      	mov	r3, r7
   86b40:	9102      	str	r1, [sp, #8]
   86b42:	980c      	ldr	r0, [sp, #48]	; 0x30
   86b44:	f000 fabc 	bl	870c0 <_dtoa_r>
   86b48:	4625      	mov	r5, r4
   86b4a:	4606      	mov	r6, r0
   86b4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86b4e:	1974      	adds	r4, r6, r5
   86b50:	2b46      	cmp	r3, #70	; 0x46
   86b52:	f47f af64 	bne.w	86a1e <_svfprintf_r+0xfaa>
   86b56:	7833      	ldrb	r3, [r6, #0]
   86b58:	2b30      	cmp	r3, #48	; 0x30
   86b5a:	f000 8187 	beq.w	86e6c <_svfprintf_r+0x13f8>
   86b5e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   86b60:	442c      	add	r4, r5
   86b62:	e75c      	b.n	86a1e <_svfprintf_r+0xfaa>
   86b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86b66:	2b00      	cmp	r3, #0
   86b68:	bf08      	it	eq
   86b6a:	2301      	moveq	r3, #1
   86b6c:	930a      	str	r3, [sp, #40]	; 0x28
   86b6e:	e723      	b.n	869b8 <_svfprintf_r+0xf44>
   86b70:	4630      	mov	r0, r6
   86b72:	950a      	str	r5, [sp, #40]	; 0x28
   86b74:	f7fe ff50 	bl	85a18 <strlen>
   86b78:	940f      	str	r4, [sp, #60]	; 0x3c
   86b7a:	900e      	str	r0, [sp, #56]	; 0x38
   86b7c:	f8cd b01c 	str.w	fp, [sp, #28]
   86b80:	4603      	mov	r3, r0
   86b82:	f7ff b9e7 	b.w	85f54 <_svfprintf_r+0x4e0>
   86b86:	272d      	movs	r7, #45	; 0x2d
   86b88:	2300      	movs	r3, #0
   86b8a:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   86b8e:	930a      	str	r3, [sp, #40]	; 0x28
   86b90:	f7ff b895 	b.w	85cbe <_svfprintf_r+0x24a>
   86b94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86b96:	461a      	mov	r2, r3
   86b98:	9312      	str	r3, [sp, #72]	; 0x48
   86b9a:	3303      	adds	r3, #3
   86b9c:	db04      	blt.n	86ba8 <_svfprintf_r+0x1134>
   86b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86ba0:	4619      	mov	r1, r3
   86ba2:	4291      	cmp	r1, r2
   86ba4:	f6bf af5e 	bge.w	86a64 <_svfprintf_r+0xff0>
   86ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86baa:	3b02      	subs	r3, #2
   86bac:	9311      	str	r3, [sp, #68]	; 0x44
   86bae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86bb0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   86bb4:	3b01      	subs	r3, #1
   86bb6:	2b00      	cmp	r3, #0
   86bb8:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   86bbc:	bfb4      	ite	lt
   86bbe:	222d      	movlt	r2, #45	; 0x2d
   86bc0:	222b      	movge	r2, #43	; 0x2b
   86bc2:	931f      	str	r3, [sp, #124]	; 0x7c
   86bc4:	bfb8      	it	lt
   86bc6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   86bc8:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   86bcc:	bfb8      	it	lt
   86bce:	f1c3 0301 	rsblt	r3, r3, #1
   86bd2:	2b09      	cmp	r3, #9
   86bd4:	f340 811f 	ble.w	86e16 <_svfprintf_r+0x13a2>
   86bd8:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   86bdc:	4601      	mov	r1, r0
   86bde:	4c68      	ldr	r4, [pc, #416]	; (86d80 <_svfprintf_r+0x130c>)
   86be0:	e000      	b.n	86be4 <_svfprintf_r+0x1170>
   86be2:	4611      	mov	r1, r2
   86be4:	fb84 5203 	smull	r5, r2, r4, r3
   86be8:	17dd      	asrs	r5, r3, #31
   86bea:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   86bee:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   86bf2:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   86bf6:	3230      	adds	r2, #48	; 0x30
   86bf8:	2d09      	cmp	r5, #9
   86bfa:	f801 2c01 	strb.w	r2, [r1, #-1]
   86bfe:	462b      	mov	r3, r5
   86c00:	f101 32ff 	add.w	r2, r1, #4294967295
   86c04:	dced      	bgt.n	86be2 <_svfprintf_r+0x116e>
   86c06:	3330      	adds	r3, #48	; 0x30
   86c08:	3902      	subs	r1, #2
   86c0a:	b2dc      	uxtb	r4, r3
   86c0c:	4288      	cmp	r0, r1
   86c0e:	f802 4c01 	strb.w	r4, [r2, #-1]
   86c12:	f240 8192 	bls.w	86f3a <_svfprintf_r+0x14c6>
   86c16:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   86c1a:	4613      	mov	r3, r2
   86c1c:	e001      	b.n	86c22 <_svfprintf_r+0x11ae>
   86c1e:	f813 4b01 	ldrb.w	r4, [r3], #1
   86c22:	4283      	cmp	r3, r0
   86c24:	f801 4b01 	strb.w	r4, [r1], #1
   86c28:	d1f9      	bne.n	86c1e <_svfprintf_r+0x11aa>
   86c2a:	3301      	adds	r3, #1
   86c2c:	1a9b      	subs	r3, r3, r2
   86c2e:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   86c32:	4413      	add	r3, r2
   86c34:	aa21      	add	r2, sp, #132	; 0x84
   86c36:	1a9b      	subs	r3, r3, r2
   86c38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86c3a:	931b      	str	r3, [sp, #108]	; 0x6c
   86c3c:	2a01      	cmp	r2, #1
   86c3e:	4413      	add	r3, r2
   86c40:	930e      	str	r3, [sp, #56]	; 0x38
   86c42:	f340 8148 	ble.w	86ed6 <_svfprintf_r+0x1462>
   86c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86c48:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86c4a:	4413      	add	r3, r2
   86c4c:	930e      	str	r3, [sp, #56]	; 0x38
   86c4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86c52:	9308      	str	r3, [sp, #32]
   86c54:	2300      	movs	r3, #0
   86c56:	9312      	str	r3, [sp, #72]	; 0x48
   86c58:	e714      	b.n	86a84 <_svfprintf_r+0x1010>
   86c5a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86c5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86c5e:	f7ff b876 	b.w	85d4e <_svfprintf_r+0x2da>
   86c62:	aa25      	add	r2, sp, #148	; 0x94
   86c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c66:	980c      	ldr	r0, [sp, #48]	; 0x30
   86c68:	f001 fff0 	bl	88c4c <__ssprint_r>
   86c6c:	2800      	cmp	r0, #0
   86c6e:	f47e afde 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86c72:	46c8      	mov	r8, r9
   86c74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86c76:	e4fb      	b.n	86670 <_svfprintf_r+0xbfc>
   86c78:	4623      	mov	r3, r4
   86c7a:	e6e3      	b.n	86a44 <_svfprintf_r+0xfd0>
   86c7c:	aa25      	add	r2, sp, #148	; 0x94
   86c7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c80:	980c      	ldr	r0, [sp, #48]	; 0x30
   86c82:	f001 ffe3 	bl	88c4c <__ssprint_r>
   86c86:	2800      	cmp	r0, #0
   86c88:	f47e afd1 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86c8c:	46c8      	mov	r8, r9
   86c8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86c90:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86c92:	e5d3      	b.n	8683c <_svfprintf_r+0xdc8>
   86c94:	aa25      	add	r2, sp, #148	; 0x94
   86c96:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c98:	980c      	ldr	r0, [sp, #48]	; 0x30
   86c9a:	f001 ffd7 	bl	88c4c <__ssprint_r>
   86c9e:	2800      	cmp	r0, #0
   86ca0:	f47e afc5 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86ca4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86ca6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86ca8:	46c8      	mov	r8, r9
   86caa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86cac:	1a9a      	subs	r2, r3, r2
   86cae:	e5dd      	b.n	8686c <_svfprintf_r+0xdf8>
   86cb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86cb2:	f7ff b8fe 	b.w	85eb2 <_svfprintf_r+0x43e>
   86cb6:	aa25      	add	r2, sp, #148	; 0x94
   86cb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86cba:	980c      	ldr	r0, [sp, #48]	; 0x30
   86cbc:	f001 ffc6 	bl	88c4c <__ssprint_r>
   86cc0:	2800      	cmp	r0, #0
   86cc2:	f47e afb4 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86cc6:	46c8      	mov	r8, r9
   86cc8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86cca:	e5b0      	b.n	8682e <_svfprintf_r+0xdba>
   86ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86cce:	4637      	mov	r7, r6
   86cd0:	2b06      	cmp	r3, #6
   86cd2:	bf28      	it	cs
   86cd4:	2306      	movcs	r3, #6
   86cd6:	960a      	str	r6, [sp, #40]	; 0x28
   86cd8:	9612      	str	r6, [sp, #72]	; 0x48
   86cda:	9308      	str	r3, [sp, #32]
   86cdc:	940f      	str	r4, [sp, #60]	; 0x3c
   86cde:	f8cd b01c 	str.w	fp, [sp, #28]
   86ce2:	930e      	str	r3, [sp, #56]	; 0x38
   86ce4:	4e27      	ldr	r6, [pc, #156]	; (86d84 <_svfprintf_r+0x1310>)
   86ce6:	f7fe bfe9 	b.w	85cbc <_svfprintf_r+0x248>
   86cea:	2306      	movs	r3, #6
   86cec:	930a      	str	r3, [sp, #40]	; 0x28
   86cee:	e663      	b.n	869b8 <_svfprintf_r+0xf44>
   86cf0:	232d      	movs	r3, #45	; 0x2d
   86cf2:	461f      	mov	r7, r3
   86cf4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   86cf8:	f7ff ba28 	b.w	8614c <_svfprintf_r+0x6d8>
   86cfc:	2003      	movs	r0, #3
   86cfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86d00:	a923      	add	r1, sp, #140	; 0x8c
   86d02:	e88d 0011 	stmia.w	sp, {r0, r4}
   86d06:	9104      	str	r1, [sp, #16]
   86d08:	a820      	add	r0, sp, #128	; 0x80
   86d0a:	a91f      	add	r1, sp, #124	; 0x7c
   86d0c:	9003      	str	r0, [sp, #12]
   86d0e:	9a08      	ldr	r2, [sp, #32]
   86d10:	463b      	mov	r3, r7
   86d12:	9102      	str	r1, [sp, #8]
   86d14:	980c      	ldr	r0, [sp, #48]	; 0x30
   86d16:	f000 f9d3 	bl	870c0 <_dtoa_r>
   86d1a:	4625      	mov	r5, r4
   86d1c:	4606      	mov	r6, r0
   86d1e:	1904      	adds	r4, r0, r4
   86d20:	e719      	b.n	86b56 <_svfprintf_r+0x10e2>
   86d22:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d24:	4d15      	ldr	r5, [pc, #84]	; (86d7c <_svfprintf_r+0x1308>)
   86d26:	f7ff bb7e 	b.w	86426 <_svfprintf_r+0x9b2>
   86d2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86d2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86d2e:	4413      	add	r3, r2
   86d30:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86d32:	930e      	str	r3, [sp, #56]	; 0x38
   86d34:	2a00      	cmp	r2, #0
   86d36:	f340 80c7 	ble.w	86ec8 <_svfprintf_r+0x1454>
   86d3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86d3e:	9308      	str	r3, [sp, #32]
   86d40:	2367      	movs	r3, #103	; 0x67
   86d42:	9311      	str	r3, [sp, #68]	; 0x44
   86d44:	e69e      	b.n	86a84 <_svfprintf_r+0x1010>
   86d46:	2b00      	cmp	r3, #0
   86d48:	f340 80e1 	ble.w	86f0e <_svfprintf_r+0x149a>
   86d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86d4e:	2a00      	cmp	r2, #0
   86d50:	f040 80b0 	bne.w	86eb4 <_svfprintf_r+0x1440>
   86d54:	f01b 0f01 	tst.w	fp, #1
   86d58:	f040 80ac 	bne.w	86eb4 <_svfprintf_r+0x1440>
   86d5c:	9308      	str	r3, [sp, #32]
   86d5e:	930e      	str	r3, [sp, #56]	; 0x38
   86d60:	e690      	b.n	86a84 <_svfprintf_r+0x1010>
   86d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86d64:	940f      	str	r4, [sp, #60]	; 0x3c
   86d66:	9308      	str	r3, [sp, #32]
   86d68:	930e      	str	r3, [sp, #56]	; 0x38
   86d6a:	900a      	str	r0, [sp, #40]	; 0x28
   86d6c:	f8cd b01c 	str.w	fp, [sp, #28]
   86d70:	9012      	str	r0, [sp, #72]	; 0x48
   86d72:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86d76:	f7fe bfa1 	b.w	85cbc <_svfprintf_r+0x248>
   86d7a:	bf00      	nop
   86d7c:	00089bfc 	.word	0x00089bfc
   86d80:	66666667 	.word	0x66666667
   86d84:	00089be0 	.word	0x00089be0
   86d88:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86d8a:	2b47      	cmp	r3, #71	; 0x47
   86d8c:	f47f ae46 	bne.w	86a1c <_svfprintf_r+0xfa8>
   86d90:	f01b 0f01 	tst.w	fp, #1
   86d94:	f47f aeda 	bne.w	86b4c <_svfprintf_r+0x10d8>
   86d98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86d9a:	1b9b      	subs	r3, r3, r6
   86d9c:	9313      	str	r3, [sp, #76]	; 0x4c
   86d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86da0:	2b47      	cmp	r3, #71	; 0x47
   86da2:	f43f aef7 	beq.w	86b94 <_svfprintf_r+0x1120>
   86da6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86da8:	9312      	str	r3, [sp, #72]	; 0x48
   86daa:	e700      	b.n	86bae <_svfprintf_r+0x113a>
   86dac:	2000      	movs	r0, #0
   86dae:	900a      	str	r0, [sp, #40]	; 0x28
   86db0:	f7fe bebc 	b.w	85b2c <_svfprintf_r+0xb8>
   86db4:	424f      	negs	r7, r1
   86db6:	3110      	adds	r1, #16
   86db8:	da35      	bge.n	86e26 <_svfprintf_r+0x13b2>
   86dba:	2410      	movs	r4, #16
   86dbc:	4d6a      	ldr	r5, [pc, #424]	; (86f68 <_svfprintf_r+0x14f4>)
   86dbe:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86dc2:	e004      	b.n	86dce <_svfprintf_r+0x135a>
   86dc4:	f108 0808 	add.w	r8, r8, #8
   86dc8:	3f10      	subs	r7, #16
   86dca:	2f10      	cmp	r7, #16
   86dcc:	dd2c      	ble.n	86e28 <_svfprintf_r+0x13b4>
   86dce:	3301      	adds	r3, #1
   86dd0:	3210      	adds	r2, #16
   86dd2:	2b07      	cmp	r3, #7
   86dd4:	9227      	str	r2, [sp, #156]	; 0x9c
   86dd6:	9326      	str	r3, [sp, #152]	; 0x98
   86dd8:	f8c8 5000 	str.w	r5, [r8]
   86ddc:	f8c8 4004 	str.w	r4, [r8, #4]
   86de0:	ddf0      	ble.n	86dc4 <_svfprintf_r+0x1350>
   86de2:	aa25      	add	r2, sp, #148	; 0x94
   86de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86de6:	4658      	mov	r0, fp
   86de8:	f001 ff30 	bl	88c4c <__ssprint_r>
   86dec:	2800      	cmp	r0, #0
   86dee:	f47e af1e 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86df2:	46c8      	mov	r8, r9
   86df4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86df6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86df8:	e7e6      	b.n	86dc8 <_svfprintf_r+0x1354>
   86dfa:	aa25      	add	r2, sp, #148	; 0x94
   86dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86dfe:	980c      	ldr	r0, [sp, #48]	; 0x30
   86e00:	f001 ff24 	bl	88c4c <__ssprint_r>
   86e04:	2800      	cmp	r0, #0
   86e06:	f47e af12 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86e0a:	46c8      	mov	r8, r9
   86e0c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86e0e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86e10:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86e12:	f7ff bbc3 	b.w	8659c <_svfprintf_r+0xb28>
   86e16:	2230      	movs	r2, #48	; 0x30
   86e18:	4413      	add	r3, r2
   86e1a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   86e1e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   86e22:	ab22      	add	r3, sp, #136	; 0x88
   86e24:	e706      	b.n	86c34 <_svfprintf_r+0x11c0>
   86e26:	4d50      	ldr	r5, [pc, #320]	; (86f68 <_svfprintf_r+0x14f4>)
   86e28:	3301      	adds	r3, #1
   86e2a:	443a      	add	r2, r7
   86e2c:	2b07      	cmp	r3, #7
   86e2e:	e888 00a0 	stmia.w	r8, {r5, r7}
   86e32:	9227      	str	r2, [sp, #156]	; 0x9c
   86e34:	9326      	str	r3, [sp, #152]	; 0x98
   86e36:	f108 0808 	add.w	r8, r8, #8
   86e3a:	f77f abb2 	ble.w	865a2 <_svfprintf_r+0xb2e>
   86e3e:	aa25      	add	r2, sp, #148	; 0x94
   86e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86e42:	980c      	ldr	r0, [sp, #48]	; 0x30
   86e44:	f001 ff02 	bl	88c4c <__ssprint_r>
   86e48:	2800      	cmp	r0, #0
   86e4a:	f47e aef0 	bne.w	85c2e <_svfprintf_r+0x1ba>
   86e4e:	46c8      	mov	r8, r9
   86e50:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86e52:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86e54:	f7ff bba5 	b.w	865a2 <_svfprintf_r+0xb2e>
   86e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86e5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86e5c:	4413      	add	r3, r2
   86e5e:	930e      	str	r3, [sp, #56]	; 0x38
   86e60:	e76b      	b.n	86d3a <_svfprintf_r+0x12c6>
   86e62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86e64:	e5ee      	b.n	86a44 <_svfprintf_r+0xfd0>
   86e66:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86e68:	4d3f      	ldr	r5, [pc, #252]	; (86f68 <_svfprintf_r+0x14f4>)
   86e6a:	e4bb      	b.n	867e4 <_svfprintf_r+0xd70>
   86e6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86e6e:	9808      	ldr	r0, [sp, #32]
   86e70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86e72:	4639      	mov	r1, r7
   86e74:	f002 fbc2 	bl	895fc <__aeabi_dcmpeq>
   86e78:	2800      	cmp	r0, #0
   86e7a:	f47f ae70 	bne.w	86b5e <_svfprintf_r+0x10ea>
   86e7e:	f1c5 0501 	rsb	r5, r5, #1
   86e82:	951f      	str	r5, [sp, #124]	; 0x7c
   86e84:	442c      	add	r4, r5
   86e86:	e5ca      	b.n	86a1e <_svfprintf_r+0xfaa>
   86e88:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86e8a:	4e38      	ldr	r6, [pc, #224]	; (86f6c <_svfprintf_r+0x14f8>)
   86e8c:	2b00      	cmp	r3, #0
   86e8e:	bfbe      	ittt	lt
   86e90:	232d      	movlt	r3, #45	; 0x2d
   86e92:	461f      	movlt	r7, r3
   86e94:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   86e98:	f04f 0303 	mov.w	r3, #3
   86e9c:	461a      	mov	r2, r3
   86e9e:	9308      	str	r3, [sp, #32]
   86ea0:	f04f 0300 	mov.w	r3, #0
   86ea4:	bfa8      	it	ge
   86ea6:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   86eaa:	4619      	mov	r1, r3
   86eac:	930a      	str	r3, [sp, #40]	; 0x28
   86eae:	4b30      	ldr	r3, [pc, #192]	; (86f70 <_svfprintf_r+0x14fc>)
   86eb0:	f7ff b954 	b.w	8615c <_svfprintf_r+0x6e8>
   86eb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86eb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86eb8:	4413      	add	r3, r2
   86eba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86ebc:	441a      	add	r2, r3
   86ebe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86ec2:	920e      	str	r2, [sp, #56]	; 0x38
   86ec4:	9308      	str	r3, [sp, #32]
   86ec6:	e5dd      	b.n	86a84 <_svfprintf_r+0x1010>
   86ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86eca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86ecc:	f1c3 0301 	rsb	r3, r3, #1
   86ed0:	441a      	add	r2, r3
   86ed2:	4613      	mov	r3, r2
   86ed4:	e7c3      	b.n	86e5e <_svfprintf_r+0x13ea>
   86ed6:	f01b 0301 	ands.w	r3, fp, #1
   86eda:	9312      	str	r3, [sp, #72]	; 0x48
   86edc:	f47f aeb3 	bne.w	86c46 <_svfprintf_r+0x11d2>
   86ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86ee2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86ee6:	9308      	str	r3, [sp, #32]
   86ee8:	e5cc      	b.n	86a84 <_svfprintf_r+0x1010>
   86eea:	4d1f      	ldr	r5, [pc, #124]	; (86f68 <_svfprintf_r+0x14f4>)
   86eec:	e43c      	b.n	86768 <_svfprintf_r+0xcf4>
   86eee:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86ef0:	4d1d      	ldr	r5, [pc, #116]	; (86f68 <_svfprintf_r+0x14f4>)
   86ef2:	e491      	b.n	86818 <_svfprintf_r+0xda4>
   86ef4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   86ef6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   86efa:	6828      	ldr	r0, [r5, #0]
   86efc:	46a2      	mov	sl, r4
   86efe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   86f02:	900a      	str	r0, [sp, #40]	; 0x28
   86f04:	4628      	mov	r0, r5
   86f06:	3004      	adds	r0, #4
   86f08:	900f      	str	r0, [sp, #60]	; 0x3c
   86f0a:	f7fe be0d 	b.w	85b28 <_svfprintf_r+0xb4>
   86f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86f10:	b913      	cbnz	r3, 86f18 <_svfprintf_r+0x14a4>
   86f12:	f01b 0f01 	tst.w	fp, #1
   86f16:	d002      	beq.n	86f1e <_svfprintf_r+0x14aa>
   86f18:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86f1a:	3301      	adds	r3, #1
   86f1c:	e7cd      	b.n	86eba <_svfprintf_r+0x1446>
   86f1e:	2301      	movs	r3, #1
   86f20:	e71c      	b.n	86d5c <_svfprintf_r+0x12e8>
   86f22:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86f26:	f7ff b980 	b.w	8622a <_svfprintf_r+0x7b6>
   86f2a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86f2e:	f7ff b93a 	b.w	861a6 <_svfprintf_r+0x732>
   86f32:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86f36:	f7ff b84f 	b.w	85fd8 <_svfprintf_r+0x564>
   86f3a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   86f3e:	e679      	b.n	86c34 <_svfprintf_r+0x11c0>
   86f40:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86f44:	f7ff b9b2 	b.w	862ac <_svfprintf_r+0x838>
   86f48:	f04f 32ff 	mov.w	r2, #4294967295
   86f4c:	230c      	movs	r3, #12
   86f4e:	9209      	str	r2, [sp, #36]	; 0x24
   86f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86f52:	6013      	str	r3, [r2, #0]
   86f54:	f7fe be74 	b.w	85c40 <_svfprintf_r+0x1cc>
   86f58:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86f5c:	f7ff b8c4 	b.w	860e8 <_svfprintf_r+0x674>
   86f60:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86f64:	f7ff b878 	b.w	86058 <_svfprintf_r+0x5e4>
   86f68:	00089bfc 	.word	0x00089bfc
   86f6c:	00089bb4 	.word	0x00089bb4
   86f70:	00089bb0 	.word	0x00089bb0

00086f74 <register_fini>:
   86f74:	4b02      	ldr	r3, [pc, #8]	; (86f80 <register_fini+0xc>)
   86f76:	b113      	cbz	r3, 86f7e <register_fini+0xa>
   86f78:	4802      	ldr	r0, [pc, #8]	; (86f84 <register_fini+0x10>)
   86f7a:	f000 b805 	b.w	86f88 <atexit>
   86f7e:	4770      	bx	lr
   86f80:	00000000 	.word	0x00000000
   86f84:	00087f05 	.word	0x00087f05

00086f88 <atexit>:
   86f88:	2300      	movs	r3, #0
   86f8a:	4601      	mov	r1, r0
   86f8c:	461a      	mov	r2, r3
   86f8e:	4618      	mov	r0, r3
   86f90:	f001 beda 	b.w	88d48 <__register_exitproc>

00086f94 <quorem>:
   86f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86f98:	6903      	ldr	r3, [r0, #16]
   86f9a:	690f      	ldr	r7, [r1, #16]
   86f9c:	b083      	sub	sp, #12
   86f9e:	429f      	cmp	r7, r3
   86fa0:	f300 8088 	bgt.w	870b4 <quorem+0x120>
   86fa4:	3f01      	subs	r7, #1
   86fa6:	f101 0614 	add.w	r6, r1, #20
   86faa:	f100 0a14 	add.w	sl, r0, #20
   86fae:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   86fb2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   86fb6:	3301      	adds	r3, #1
   86fb8:	fbb2 f8f3 	udiv	r8, r2, r3
   86fbc:	00bb      	lsls	r3, r7, #2
   86fbe:	9300      	str	r3, [sp, #0]
   86fc0:	eb06 0903 	add.w	r9, r6, r3
   86fc4:	4453      	add	r3, sl
   86fc6:	9301      	str	r3, [sp, #4]
   86fc8:	f1b8 0f00 	cmp.w	r8, #0
   86fcc:	d03b      	beq.n	87046 <quorem+0xb2>
   86fce:	2300      	movs	r3, #0
   86fd0:	46b4      	mov	ip, r6
   86fd2:	461c      	mov	r4, r3
   86fd4:	46d6      	mov	lr, sl
   86fd6:	f85c 2b04 	ldr.w	r2, [ip], #4
   86fda:	f8de 5000 	ldr.w	r5, [lr]
   86fde:	fa1f fb82 	uxth.w	fp, r2
   86fe2:	fb08 330b 	mla	r3, r8, fp, r3
   86fe6:	0c12      	lsrs	r2, r2, #16
   86fe8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   86fec:	fb08 bb02 	mla	fp, r8, r2, fp
   86ff0:	b29a      	uxth	r2, r3
   86ff2:	1aa2      	subs	r2, r4, r2
   86ff4:	b2ab      	uxth	r3, r5
   86ff6:	fa1f f48b 	uxth.w	r4, fp
   86ffa:	441a      	add	r2, r3
   86ffc:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   87000:	eb04 4422 	add.w	r4, r4, r2, asr #16
   87004:	b292      	uxth	r2, r2
   87006:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   8700a:	45e1      	cmp	r9, ip
   8700c:	f84e 2b04 	str.w	r2, [lr], #4
   87010:	ea4f 4424 	mov.w	r4, r4, asr #16
   87014:	ea4f 431b 	mov.w	r3, fp, lsr #16
   87018:	d2dd      	bcs.n	86fd6 <quorem+0x42>
   8701a:	9b00      	ldr	r3, [sp, #0]
   8701c:	f85a 3003 	ldr.w	r3, [sl, r3]
   87020:	b98b      	cbnz	r3, 87046 <quorem+0xb2>
   87022:	9c01      	ldr	r4, [sp, #4]
   87024:	1f23      	subs	r3, r4, #4
   87026:	459a      	cmp	sl, r3
   87028:	d20c      	bcs.n	87044 <quorem+0xb0>
   8702a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8702e:	b94b      	cbnz	r3, 87044 <quorem+0xb0>
   87030:	f1a4 0308 	sub.w	r3, r4, #8
   87034:	e002      	b.n	8703c <quorem+0xa8>
   87036:	681a      	ldr	r2, [r3, #0]
   87038:	3b04      	subs	r3, #4
   8703a:	b91a      	cbnz	r2, 87044 <quorem+0xb0>
   8703c:	459a      	cmp	sl, r3
   8703e:	f107 37ff 	add.w	r7, r7, #4294967295
   87042:	d3f8      	bcc.n	87036 <quorem+0xa2>
   87044:	6107      	str	r7, [r0, #16]
   87046:	4604      	mov	r4, r0
   87048:	f001 fcf0 	bl	88a2c <__mcmp>
   8704c:	2800      	cmp	r0, #0
   8704e:	db2d      	blt.n	870ac <quorem+0x118>
   87050:	4655      	mov	r5, sl
   87052:	2300      	movs	r3, #0
   87054:	f108 0801 	add.w	r8, r8, #1
   87058:	f856 1b04 	ldr.w	r1, [r6], #4
   8705c:	6828      	ldr	r0, [r5, #0]
   8705e:	b28a      	uxth	r2, r1
   87060:	1a9a      	subs	r2, r3, r2
   87062:	0c0b      	lsrs	r3, r1, #16
   87064:	b281      	uxth	r1, r0
   87066:	440a      	add	r2, r1
   87068:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   8706c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   87070:	b292      	uxth	r2, r2
   87072:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   87076:	45b1      	cmp	r9, r6
   87078:	f845 2b04 	str.w	r2, [r5], #4
   8707c:	ea4f 4323 	mov.w	r3, r3, asr #16
   87080:	d2ea      	bcs.n	87058 <quorem+0xc4>
   87082:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   87086:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   8708a:	b97a      	cbnz	r2, 870ac <quorem+0x118>
   8708c:	1f1a      	subs	r2, r3, #4
   8708e:	4592      	cmp	sl, r2
   87090:	d20b      	bcs.n	870aa <quorem+0x116>
   87092:	f853 2c04 	ldr.w	r2, [r3, #-4]
   87096:	b942      	cbnz	r2, 870aa <quorem+0x116>
   87098:	3b08      	subs	r3, #8
   8709a:	e002      	b.n	870a2 <quorem+0x10e>
   8709c:	681a      	ldr	r2, [r3, #0]
   8709e:	3b04      	subs	r3, #4
   870a0:	b91a      	cbnz	r2, 870aa <quorem+0x116>
   870a2:	459a      	cmp	sl, r3
   870a4:	f107 37ff 	add.w	r7, r7, #4294967295
   870a8:	d3f8      	bcc.n	8709c <quorem+0x108>
   870aa:	6127      	str	r7, [r4, #16]
   870ac:	4640      	mov	r0, r8
   870ae:	b003      	add	sp, #12
   870b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   870b4:	2000      	movs	r0, #0
   870b6:	b003      	add	sp, #12
   870b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   870bc:	0000      	movs	r0, r0
	...

000870c0 <_dtoa_r>:
   870c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   870c4:	6c05      	ldr	r5, [r0, #64]	; 0x40
   870c6:	b09b      	sub	sp, #108	; 0x6c
   870c8:	4604      	mov	r4, r0
   870ca:	4692      	mov	sl, r2
   870cc:	469b      	mov	fp, r3
   870ce:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   870d0:	b14d      	cbz	r5, 870e6 <_dtoa_r+0x26>
   870d2:	2301      	movs	r3, #1
   870d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   870d6:	4629      	mov	r1, r5
   870d8:	4093      	lsls	r3, r2
   870da:	60ab      	str	r3, [r5, #8]
   870dc:	606a      	str	r2, [r5, #4]
   870de:	f001 facd 	bl	8867c <_Bfree>
   870e2:	2300      	movs	r3, #0
   870e4:	6423      	str	r3, [r4, #64]	; 0x40
   870e6:	f1bb 0f00 	cmp.w	fp, #0
   870ea:	465d      	mov	r5, fp
   870ec:	db35      	blt.n	8715a <_dtoa_r+0x9a>
   870ee:	2300      	movs	r3, #0
   870f0:	6033      	str	r3, [r6, #0]
   870f2:	4b9d      	ldr	r3, [pc, #628]	; (87368 <_dtoa_r+0x2a8>)
   870f4:	43ab      	bics	r3, r5
   870f6:	d015      	beq.n	87124 <_dtoa_r+0x64>
   870f8:	2200      	movs	r2, #0
   870fa:	2300      	movs	r3, #0
   870fc:	4650      	mov	r0, sl
   870fe:	4659      	mov	r1, fp
   87100:	f002 fa7c 	bl	895fc <__aeabi_dcmpeq>
   87104:	4680      	mov	r8, r0
   87106:	2800      	cmp	r0, #0
   87108:	d02d      	beq.n	87166 <_dtoa_r+0xa6>
   8710a:	2301      	movs	r3, #1
   8710c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8710e:	6013      	str	r3, [r2, #0]
   87110:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87112:	2b00      	cmp	r3, #0
   87114:	f000 80bd 	beq.w	87292 <_dtoa_r+0x1d2>
   87118:	4894      	ldr	r0, [pc, #592]	; (8736c <_dtoa_r+0x2ac>)
   8711a:	6018      	str	r0, [r3, #0]
   8711c:	3801      	subs	r0, #1
   8711e:	b01b      	add	sp, #108	; 0x6c
   87120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87124:	f242 730f 	movw	r3, #9999	; 0x270f
   87128:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8712a:	6013      	str	r3, [r2, #0]
   8712c:	f1ba 0f00 	cmp.w	sl, #0
   87130:	d10d      	bne.n	8714e <_dtoa_r+0x8e>
   87132:	f3c5 0513 	ubfx	r5, r5, #0, #20
   87136:	b955      	cbnz	r5, 8714e <_dtoa_r+0x8e>
   87138:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8713a:	488d      	ldr	r0, [pc, #564]	; (87370 <_dtoa_r+0x2b0>)
   8713c:	2b00      	cmp	r3, #0
   8713e:	d0ee      	beq.n	8711e <_dtoa_r+0x5e>
   87140:	f100 0308 	add.w	r3, r0, #8
   87144:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   87146:	6013      	str	r3, [r2, #0]
   87148:	b01b      	add	sp, #108	; 0x6c
   8714a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8714e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87150:	4888      	ldr	r0, [pc, #544]	; (87374 <_dtoa_r+0x2b4>)
   87152:	2b00      	cmp	r3, #0
   87154:	d0e3      	beq.n	8711e <_dtoa_r+0x5e>
   87156:	1cc3      	adds	r3, r0, #3
   87158:	e7f4      	b.n	87144 <_dtoa_r+0x84>
   8715a:	2301      	movs	r3, #1
   8715c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   87160:	6033      	str	r3, [r6, #0]
   87162:	46ab      	mov	fp, r5
   87164:	e7c5      	b.n	870f2 <_dtoa_r+0x32>
   87166:	aa18      	add	r2, sp, #96	; 0x60
   87168:	ab19      	add	r3, sp, #100	; 0x64
   8716a:	9201      	str	r2, [sp, #4]
   8716c:	9300      	str	r3, [sp, #0]
   8716e:	4652      	mov	r2, sl
   87170:	465b      	mov	r3, fp
   87172:	4620      	mov	r0, r4
   87174:	f001 fd04 	bl	88b80 <__d2b>
   87178:	0d2b      	lsrs	r3, r5, #20
   8717a:	4681      	mov	r9, r0
   8717c:	d071      	beq.n	87262 <_dtoa_r+0x1a2>
   8717e:	4650      	mov	r0, sl
   87180:	f3cb 0213 	ubfx	r2, fp, #0, #20
   87184:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   87188:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8718a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   8718e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   87192:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   87196:	2200      	movs	r2, #0
   87198:	4b77      	ldr	r3, [pc, #476]	; (87378 <_dtoa_r+0x2b8>)
   8719a:	f7fd fce1 	bl	84b60 <__aeabi_dsub>
   8719e:	a36c      	add	r3, pc, #432	; (adr r3, 87350 <_dtoa_r+0x290>)
   871a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   871a4:	f7fd fe90 	bl	84ec8 <__aeabi_dmul>
   871a8:	a36b      	add	r3, pc, #428	; (adr r3, 87358 <_dtoa_r+0x298>)
   871aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   871ae:	f7fd fcd9 	bl	84b64 <__adddf3>
   871b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   871b6:	4630      	mov	r0, r6
   871b8:	f7fd fe20 	bl	84dfc <__aeabi_i2d>
   871bc:	a368      	add	r3, pc, #416	; (adr r3, 87360 <_dtoa_r+0x2a0>)
   871be:	e9d3 2300 	ldrd	r2, r3, [r3]
   871c2:	f7fd fe81 	bl	84ec8 <__aeabi_dmul>
   871c6:	4602      	mov	r2, r0
   871c8:	460b      	mov	r3, r1
   871ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   871ce:	f7fd fcc9 	bl	84b64 <__adddf3>
   871d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   871d6:	f002 fa59 	bl	8968c <__aeabi_d2iz>
   871da:	2200      	movs	r2, #0
   871dc:	9002      	str	r0, [sp, #8]
   871de:	2300      	movs	r3, #0
   871e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   871e4:	f002 fa14 	bl	89610 <__aeabi_dcmplt>
   871e8:	2800      	cmp	r0, #0
   871ea:	f040 816d 	bne.w	874c8 <_dtoa_r+0x408>
   871ee:	9d02      	ldr	r5, [sp, #8]
   871f0:	2d16      	cmp	r5, #22
   871f2:	f200 8157 	bhi.w	874a4 <_dtoa_r+0x3e4>
   871f6:	4961      	ldr	r1, [pc, #388]	; (8737c <_dtoa_r+0x2bc>)
   871f8:	4652      	mov	r2, sl
   871fa:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   871fe:	465b      	mov	r3, fp
   87200:	e9d1 0100 	ldrd	r0, r1, [r1]
   87204:	f002 fa22 	bl	8964c <__aeabi_dcmpgt>
   87208:	2800      	cmp	r0, #0
   8720a:	f000 81be 	beq.w	8758a <_dtoa_r+0x4ca>
   8720e:	1e6b      	subs	r3, r5, #1
   87210:	9302      	str	r3, [sp, #8]
   87212:	2300      	movs	r3, #0
   87214:	930e      	str	r3, [sp, #56]	; 0x38
   87216:	1bbf      	subs	r7, r7, r6
   87218:	1e7b      	subs	r3, r7, #1
   8721a:	9308      	str	r3, [sp, #32]
   8721c:	f100 814e 	bmi.w	874bc <_dtoa_r+0x3fc>
   87220:	2300      	movs	r3, #0
   87222:	930a      	str	r3, [sp, #40]	; 0x28
   87224:	9b02      	ldr	r3, [sp, #8]
   87226:	2b00      	cmp	r3, #0
   87228:	f2c0 813f 	blt.w	874aa <_dtoa_r+0x3ea>
   8722c:	9a08      	ldr	r2, [sp, #32]
   8722e:	930d      	str	r3, [sp, #52]	; 0x34
   87230:	4611      	mov	r1, r2
   87232:	4419      	add	r1, r3
   87234:	2300      	movs	r3, #0
   87236:	9108      	str	r1, [sp, #32]
   87238:	930c      	str	r3, [sp, #48]	; 0x30
   8723a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8723c:	2b09      	cmp	r3, #9
   8723e:	d82a      	bhi.n	87296 <_dtoa_r+0x1d6>
   87240:	2b05      	cmp	r3, #5
   87242:	f340 8658 	ble.w	87ef6 <_dtoa_r+0xe36>
   87246:	2500      	movs	r5, #0
   87248:	3b04      	subs	r3, #4
   8724a:	9324      	str	r3, [sp, #144]	; 0x90
   8724c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8724e:	3b02      	subs	r3, #2
   87250:	2b03      	cmp	r3, #3
   87252:	f200 863f 	bhi.w	87ed4 <_dtoa_r+0xe14>
   87256:	e8df f013 	tbh	[pc, r3, lsl #1]
   8725a:	03ce      	.short	0x03ce
   8725c:	03d902c3 	.word	0x03d902c3
   87260:	045b      	.short	0x045b
   87262:	9f18      	ldr	r7, [sp, #96]	; 0x60
   87264:	9e19      	ldr	r6, [sp, #100]	; 0x64
   87266:	443e      	add	r6, r7
   87268:	f206 4332 	addw	r3, r6, #1074	; 0x432
   8726c:	2b20      	cmp	r3, #32
   8726e:	f340 8187 	ble.w	87580 <_dtoa_r+0x4c0>
   87272:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   87276:	f206 4012 	addw	r0, r6, #1042	; 0x412
   8727a:	409d      	lsls	r5, r3
   8727c:	fa2a f000 	lsr.w	r0, sl, r0
   87280:	4328      	orrs	r0, r5
   87282:	f7fd fdab 	bl	84ddc <__aeabi_ui2d>
   87286:	2301      	movs	r3, #1
   87288:	3e01      	subs	r6, #1
   8728a:	9314      	str	r3, [sp, #80]	; 0x50
   8728c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   87290:	e781      	b.n	87196 <_dtoa_r+0xd6>
   87292:	483b      	ldr	r0, [pc, #236]	; (87380 <_dtoa_r+0x2c0>)
   87294:	e743      	b.n	8711e <_dtoa_r+0x5e>
   87296:	2100      	movs	r1, #0
   87298:	4620      	mov	r0, r4
   8729a:	6461      	str	r1, [r4, #68]	; 0x44
   8729c:	9125      	str	r1, [sp, #148]	; 0x94
   8729e:	f001 f9c7 	bl	88630 <_Balloc>
   872a2:	f04f 33ff 	mov.w	r3, #4294967295
   872a6:	9307      	str	r3, [sp, #28]
   872a8:	930f      	str	r3, [sp, #60]	; 0x3c
   872aa:	2301      	movs	r3, #1
   872ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
   872ae:	9004      	str	r0, [sp, #16]
   872b0:	6420      	str	r0, [r4, #64]	; 0x40
   872b2:	9224      	str	r2, [sp, #144]	; 0x90
   872b4:	930b      	str	r3, [sp, #44]	; 0x2c
   872b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   872b8:	2b00      	cmp	r3, #0
   872ba:	f2c0 80d3 	blt.w	87464 <_dtoa_r+0x3a4>
   872be:	9a02      	ldr	r2, [sp, #8]
   872c0:	2a0e      	cmp	r2, #14
   872c2:	f300 80cf 	bgt.w	87464 <_dtoa_r+0x3a4>
   872c6:	4b2d      	ldr	r3, [pc, #180]	; (8737c <_dtoa_r+0x2bc>)
   872c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   872cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   872d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   872d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   872d6:	2b00      	cmp	r3, #0
   872d8:	f2c0 83b4 	blt.w	87a44 <_dtoa_r+0x984>
   872dc:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   872e0:	4650      	mov	r0, sl
   872e2:	462a      	mov	r2, r5
   872e4:	4633      	mov	r3, r6
   872e6:	4659      	mov	r1, fp
   872e8:	f7fd ff18 	bl	8511c <__aeabi_ddiv>
   872ec:	f002 f9ce 	bl	8968c <__aeabi_d2iz>
   872f0:	4680      	mov	r8, r0
   872f2:	f7fd fd83 	bl	84dfc <__aeabi_i2d>
   872f6:	462a      	mov	r2, r5
   872f8:	4633      	mov	r3, r6
   872fa:	f7fd fde5 	bl	84ec8 <__aeabi_dmul>
   872fe:	4602      	mov	r2, r0
   87300:	460b      	mov	r3, r1
   87302:	4650      	mov	r0, sl
   87304:	4659      	mov	r1, fp
   87306:	f7fd fc2b 	bl	84b60 <__aeabi_dsub>
   8730a:	9e07      	ldr	r6, [sp, #28]
   8730c:	9f04      	ldr	r7, [sp, #16]
   8730e:	f108 0530 	add.w	r5, r8, #48	; 0x30
   87312:	2e01      	cmp	r6, #1
   87314:	703d      	strb	r5, [r7, #0]
   87316:	4602      	mov	r2, r0
   87318:	460b      	mov	r3, r1
   8731a:	f107 0501 	add.w	r5, r7, #1
   8731e:	d064      	beq.n	873ea <_dtoa_r+0x32a>
   87320:	2200      	movs	r2, #0
   87322:	4b18      	ldr	r3, [pc, #96]	; (87384 <_dtoa_r+0x2c4>)
   87324:	f7fd fdd0 	bl	84ec8 <__aeabi_dmul>
   87328:	2200      	movs	r2, #0
   8732a:	2300      	movs	r3, #0
   8732c:	4606      	mov	r6, r0
   8732e:	460f      	mov	r7, r1
   87330:	f002 f964 	bl	895fc <__aeabi_dcmpeq>
   87334:	2800      	cmp	r0, #0
   87336:	f040 8082 	bne.w	8743e <_dtoa_r+0x37e>
   8733a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8733e:	f04f 0a00 	mov.w	sl, #0
   87342:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   87346:	f04f 0b00 	mov.w	fp, #0
   8734a:	940b      	str	r4, [sp, #44]	; 0x2c
   8734c:	e029      	b.n	873a2 <_dtoa_r+0x2e2>
   8734e:	bf00      	nop
   87350:	636f4361 	.word	0x636f4361
   87354:	3fd287a7 	.word	0x3fd287a7
   87358:	8b60c8b3 	.word	0x8b60c8b3
   8735c:	3fc68a28 	.word	0x3fc68a28
   87360:	509f79fb 	.word	0x509f79fb
   87364:	3fd34413 	.word	0x3fd34413
   87368:	7ff00000 	.word	0x7ff00000
   8736c:	00089be9 	.word	0x00089be9
   87370:	00089c0c 	.word	0x00089c0c
   87374:	00089c18 	.word	0x00089c18
   87378:	3ff80000 	.word	0x3ff80000
   8737c:	00089c48 	.word	0x00089c48
   87380:	00089be8 	.word	0x00089be8
   87384:	40240000 	.word	0x40240000
   87388:	2200      	movs	r2, #0
   8738a:	4b81      	ldr	r3, [pc, #516]	; (87590 <_dtoa_r+0x4d0>)
   8738c:	f7fd fd9c 	bl	84ec8 <__aeabi_dmul>
   87390:	4652      	mov	r2, sl
   87392:	465b      	mov	r3, fp
   87394:	4606      	mov	r6, r0
   87396:	460f      	mov	r7, r1
   87398:	f002 f930 	bl	895fc <__aeabi_dcmpeq>
   8739c:	2800      	cmp	r0, #0
   8739e:	f040 83ba 	bne.w	87b16 <_dtoa_r+0xa56>
   873a2:	4642      	mov	r2, r8
   873a4:	464b      	mov	r3, r9
   873a6:	4630      	mov	r0, r6
   873a8:	4639      	mov	r1, r7
   873aa:	f7fd feb7 	bl	8511c <__aeabi_ddiv>
   873ae:	f002 f96d 	bl	8968c <__aeabi_d2iz>
   873b2:	4604      	mov	r4, r0
   873b4:	f7fd fd22 	bl	84dfc <__aeabi_i2d>
   873b8:	4642      	mov	r2, r8
   873ba:	464b      	mov	r3, r9
   873bc:	f7fd fd84 	bl	84ec8 <__aeabi_dmul>
   873c0:	4602      	mov	r2, r0
   873c2:	460b      	mov	r3, r1
   873c4:	4630      	mov	r0, r6
   873c6:	4639      	mov	r1, r7
   873c8:	f7fd fbca 	bl	84b60 <__aeabi_dsub>
   873cc:	f104 0630 	add.w	r6, r4, #48	; 0x30
   873d0:	f805 6b01 	strb.w	r6, [r5], #1
   873d4:	9e04      	ldr	r6, [sp, #16]
   873d6:	9f07      	ldr	r7, [sp, #28]
   873d8:	1bae      	subs	r6, r5, r6
   873da:	42be      	cmp	r6, r7
   873dc:	4602      	mov	r2, r0
   873de:	460b      	mov	r3, r1
   873e0:	d1d2      	bne.n	87388 <_dtoa_r+0x2c8>
   873e2:	46a0      	mov	r8, r4
   873e4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   873e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   873ea:	4610      	mov	r0, r2
   873ec:	4619      	mov	r1, r3
   873ee:	f7fd fbb9 	bl	84b64 <__adddf3>
   873f2:	4606      	mov	r6, r0
   873f4:	460f      	mov	r7, r1
   873f6:	4602      	mov	r2, r0
   873f8:	460b      	mov	r3, r1
   873fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   873fe:	f002 f907 	bl	89610 <__aeabi_dcmplt>
   87402:	b948      	cbnz	r0, 87418 <_dtoa_r+0x358>
   87404:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87408:	4632      	mov	r2, r6
   8740a:	463b      	mov	r3, r7
   8740c:	f002 f8f6 	bl	895fc <__aeabi_dcmpeq>
   87410:	b1a8      	cbz	r0, 8743e <_dtoa_r+0x37e>
   87412:	f018 0f01 	tst.w	r8, #1
   87416:	d012      	beq.n	8743e <_dtoa_r+0x37e>
   87418:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8741c:	1e6b      	subs	r3, r5, #1
   8741e:	9a04      	ldr	r2, [sp, #16]
   87420:	e004      	b.n	8742c <_dtoa_r+0x36c>
   87422:	429a      	cmp	r2, r3
   87424:	f000 8402 	beq.w	87c2c <_dtoa_r+0xb6c>
   87428:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   8742c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   87430:	f103 0501 	add.w	r5, r3, #1
   87434:	d0f5      	beq.n	87422 <_dtoa_r+0x362>
   87436:	f108 0801 	add.w	r8, r8, #1
   8743a:	f883 8000 	strb.w	r8, [r3]
   8743e:	4649      	mov	r1, r9
   87440:	4620      	mov	r0, r4
   87442:	f001 f91b 	bl	8867c <_Bfree>
   87446:	2200      	movs	r2, #0
   87448:	9b02      	ldr	r3, [sp, #8]
   8744a:	702a      	strb	r2, [r5, #0]
   8744c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8744e:	3301      	adds	r3, #1
   87450:	6013      	str	r3, [r2, #0]
   87452:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87454:	2b00      	cmp	r3, #0
   87456:	f000 839f 	beq.w	87b98 <_dtoa_r+0xad8>
   8745a:	9804      	ldr	r0, [sp, #16]
   8745c:	601d      	str	r5, [r3, #0]
   8745e:	b01b      	add	sp, #108	; 0x6c
   87460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87464:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87466:	2a00      	cmp	r2, #0
   87468:	d03e      	beq.n	874e8 <_dtoa_r+0x428>
   8746a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8746c:	2a01      	cmp	r2, #1
   8746e:	f340 8311 	ble.w	87a94 <_dtoa_r+0x9d4>
   87472:	9b07      	ldr	r3, [sp, #28]
   87474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87476:	1e5f      	subs	r7, r3, #1
   87478:	42ba      	cmp	r2, r7
   8747a:	f2c0 8390 	blt.w	87b9e <_dtoa_r+0xade>
   8747e:	1bd7      	subs	r7, r2, r7
   87480:	9b07      	ldr	r3, [sp, #28]
   87482:	2b00      	cmp	r3, #0
   87484:	f2c0 848c 	blt.w	87da0 <_dtoa_r+0xce0>
   87488:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8748a:	9b07      	ldr	r3, [sp, #28]
   8748c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8748e:	2101      	movs	r1, #1
   87490:	441a      	add	r2, r3
   87492:	920a      	str	r2, [sp, #40]	; 0x28
   87494:	9a08      	ldr	r2, [sp, #32]
   87496:	4620      	mov	r0, r4
   87498:	441a      	add	r2, r3
   8749a:	9208      	str	r2, [sp, #32]
   8749c:	f001 f98a 	bl	887b4 <__i2b>
   874a0:	4606      	mov	r6, r0
   874a2:	e023      	b.n	874ec <_dtoa_r+0x42c>
   874a4:	2301      	movs	r3, #1
   874a6:	930e      	str	r3, [sp, #56]	; 0x38
   874a8:	e6b5      	b.n	87216 <_dtoa_r+0x156>
   874aa:	2300      	movs	r3, #0
   874ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   874ae:	930d      	str	r3, [sp, #52]	; 0x34
   874b0:	9b02      	ldr	r3, [sp, #8]
   874b2:	1ad2      	subs	r2, r2, r3
   874b4:	425b      	negs	r3, r3
   874b6:	920a      	str	r2, [sp, #40]	; 0x28
   874b8:	930c      	str	r3, [sp, #48]	; 0x30
   874ba:	e6be      	b.n	8723a <_dtoa_r+0x17a>
   874bc:	f1c7 0301 	rsb	r3, r7, #1
   874c0:	930a      	str	r3, [sp, #40]	; 0x28
   874c2:	2300      	movs	r3, #0
   874c4:	9308      	str	r3, [sp, #32]
   874c6:	e6ad      	b.n	87224 <_dtoa_r+0x164>
   874c8:	9d02      	ldr	r5, [sp, #8]
   874ca:	4628      	mov	r0, r5
   874cc:	f7fd fc96 	bl	84dfc <__aeabi_i2d>
   874d0:	4602      	mov	r2, r0
   874d2:	460b      	mov	r3, r1
   874d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   874d8:	f002 f890 	bl	895fc <__aeabi_dcmpeq>
   874dc:	2800      	cmp	r0, #0
   874de:	f47f ae86 	bne.w	871ee <_dtoa_r+0x12e>
   874e2:	1e6b      	subs	r3, r5, #1
   874e4:	9302      	str	r3, [sp, #8]
   874e6:	e682      	b.n	871ee <_dtoa_r+0x12e>
   874e8:	ad0a      	add	r5, sp, #40	; 0x28
   874ea:	cde0      	ldmia	r5, {r5, r6, r7}
   874ec:	2d00      	cmp	r5, #0
   874ee:	dd0c      	ble.n	8750a <_dtoa_r+0x44a>
   874f0:	9908      	ldr	r1, [sp, #32]
   874f2:	2900      	cmp	r1, #0
   874f4:	460b      	mov	r3, r1
   874f6:	dd08      	ble.n	8750a <_dtoa_r+0x44a>
   874f8:	42a9      	cmp	r1, r5
   874fa:	bfa8      	it	ge
   874fc:	462b      	movge	r3, r5
   874fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87500:	1aed      	subs	r5, r5, r3
   87502:	1ad2      	subs	r2, r2, r3
   87504:	1acb      	subs	r3, r1, r3
   87506:	920a      	str	r2, [sp, #40]	; 0x28
   87508:	9308      	str	r3, [sp, #32]
   8750a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8750c:	b1d3      	cbz	r3, 87544 <_dtoa_r+0x484>
   8750e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87510:	2b00      	cmp	r3, #0
   87512:	f000 82b8 	beq.w	87a86 <_dtoa_r+0x9c6>
   87516:	2f00      	cmp	r7, #0
   87518:	dd10      	ble.n	8753c <_dtoa_r+0x47c>
   8751a:	4631      	mov	r1, r6
   8751c:	463a      	mov	r2, r7
   8751e:	4620      	mov	r0, r4
   87520:	f001 f9e4 	bl	888ec <__pow5mult>
   87524:	464a      	mov	r2, r9
   87526:	4601      	mov	r1, r0
   87528:	4606      	mov	r6, r0
   8752a:	4620      	mov	r0, r4
   8752c:	f001 f94c 	bl	887c8 <__multiply>
   87530:	4603      	mov	r3, r0
   87532:	4649      	mov	r1, r9
   87534:	4620      	mov	r0, r4
   87536:	4699      	mov	r9, r3
   87538:	f001 f8a0 	bl	8867c <_Bfree>
   8753c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8753e:	1bda      	subs	r2, r3, r7
   87540:	f040 82a2 	bne.w	87a88 <_dtoa_r+0x9c8>
   87544:	2101      	movs	r1, #1
   87546:	4620      	mov	r0, r4
   87548:	f001 f934 	bl	887b4 <__i2b>
   8754c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8754e:	4680      	mov	r8, r0
   87550:	2b00      	cmp	r3, #0
   87552:	dd1f      	ble.n	87594 <_dtoa_r+0x4d4>
   87554:	4601      	mov	r1, r0
   87556:	461a      	mov	r2, r3
   87558:	4620      	mov	r0, r4
   8755a:	f001 f9c7 	bl	888ec <__pow5mult>
   8755e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87560:	4680      	mov	r8, r0
   87562:	2b01      	cmp	r3, #1
   87564:	f340 8255 	ble.w	87a12 <_dtoa_r+0x952>
   87568:	2300      	movs	r3, #0
   8756a:	930c      	str	r3, [sp, #48]	; 0x30
   8756c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   87570:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   87574:	6918      	ldr	r0, [r3, #16]
   87576:	f001 f8cd 	bl	88714 <__hi0bits>
   8757a:	f1c0 0020 	rsb	r0, r0, #32
   8757e:	e013      	b.n	875a8 <_dtoa_r+0x4e8>
   87580:	f1c3 0520 	rsb	r5, r3, #32
   87584:	fa0a f005 	lsl.w	r0, sl, r5
   87588:	e67b      	b.n	87282 <_dtoa_r+0x1c2>
   8758a:	900e      	str	r0, [sp, #56]	; 0x38
   8758c:	e643      	b.n	87216 <_dtoa_r+0x156>
   8758e:	bf00      	nop
   87590:	40240000 	.word	0x40240000
   87594:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87596:	2b01      	cmp	r3, #1
   87598:	f340 8285 	ble.w	87aa6 <_dtoa_r+0x9e6>
   8759c:	2300      	movs	r3, #0
   8759e:	930c      	str	r3, [sp, #48]	; 0x30
   875a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   875a2:	2001      	movs	r0, #1
   875a4:	2b00      	cmp	r3, #0
   875a6:	d1e1      	bne.n	8756c <_dtoa_r+0x4ac>
   875a8:	9a08      	ldr	r2, [sp, #32]
   875aa:	4410      	add	r0, r2
   875ac:	f010 001f 	ands.w	r0, r0, #31
   875b0:	f000 80a1 	beq.w	876f6 <_dtoa_r+0x636>
   875b4:	f1c0 0320 	rsb	r3, r0, #32
   875b8:	2b04      	cmp	r3, #4
   875ba:	f340 8486 	ble.w	87eca <_dtoa_r+0xe0a>
   875be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   875c0:	f1c0 001c 	rsb	r0, r0, #28
   875c4:	4403      	add	r3, r0
   875c6:	930a      	str	r3, [sp, #40]	; 0x28
   875c8:	4613      	mov	r3, r2
   875ca:	4403      	add	r3, r0
   875cc:	4405      	add	r5, r0
   875ce:	9308      	str	r3, [sp, #32]
   875d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   875d2:	2b00      	cmp	r3, #0
   875d4:	dd05      	ble.n	875e2 <_dtoa_r+0x522>
   875d6:	4649      	mov	r1, r9
   875d8:	461a      	mov	r2, r3
   875da:	4620      	mov	r0, r4
   875dc:	f001 f9d6 	bl	8898c <__lshift>
   875e0:	4681      	mov	r9, r0
   875e2:	9b08      	ldr	r3, [sp, #32]
   875e4:	2b00      	cmp	r3, #0
   875e6:	dd05      	ble.n	875f4 <_dtoa_r+0x534>
   875e8:	4641      	mov	r1, r8
   875ea:	461a      	mov	r2, r3
   875ec:	4620      	mov	r0, r4
   875ee:	f001 f9cd 	bl	8898c <__lshift>
   875f2:	4680      	mov	r8, r0
   875f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   875f6:	2b00      	cmp	r3, #0
   875f8:	f040 8086 	bne.w	87708 <_dtoa_r+0x648>
   875fc:	9b07      	ldr	r3, [sp, #28]
   875fe:	2b00      	cmp	r3, #0
   87600:	f340 8264 	ble.w	87acc <_dtoa_r+0xa0c>
   87604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87606:	2b00      	cmp	r3, #0
   87608:	f000 8098 	beq.w	8773c <_dtoa_r+0x67c>
   8760c:	2d00      	cmp	r5, #0
   8760e:	dd05      	ble.n	8761c <_dtoa_r+0x55c>
   87610:	4631      	mov	r1, r6
   87612:	462a      	mov	r2, r5
   87614:	4620      	mov	r0, r4
   87616:	f001 f9b9 	bl	8898c <__lshift>
   8761a:	4606      	mov	r6, r0
   8761c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8761e:	2b00      	cmp	r3, #0
   87620:	f040 8336 	bne.w	87c90 <_dtoa_r+0xbd0>
   87624:	9608      	str	r6, [sp, #32]
   87626:	9b07      	ldr	r3, [sp, #28]
   87628:	9a04      	ldr	r2, [sp, #16]
   8762a:	3b01      	subs	r3, #1
   8762c:	18d3      	adds	r3, r2, r3
   8762e:	930b      	str	r3, [sp, #44]	; 0x2c
   87630:	4617      	mov	r7, r2
   87632:	f00a 0301 	and.w	r3, sl, #1
   87636:	46c2      	mov	sl, r8
   87638:	f8dd b020 	ldr.w	fp, [sp, #32]
   8763c:	930c      	str	r3, [sp, #48]	; 0x30
   8763e:	4651      	mov	r1, sl
   87640:	4648      	mov	r0, r9
   87642:	f7ff fca7 	bl	86f94 <quorem>
   87646:	4631      	mov	r1, r6
   87648:	4605      	mov	r5, r0
   8764a:	4648      	mov	r0, r9
   8764c:	f001 f9ee 	bl	88a2c <__mcmp>
   87650:	465a      	mov	r2, fp
   87652:	9007      	str	r0, [sp, #28]
   87654:	4651      	mov	r1, sl
   87656:	4620      	mov	r0, r4
   87658:	f001 fa04 	bl	88a64 <__mdiff>
   8765c:	68c2      	ldr	r2, [r0, #12]
   8765e:	4680      	mov	r8, r0
   87660:	f105 0330 	add.w	r3, r5, #48	; 0x30
   87664:	2a00      	cmp	r2, #0
   87666:	f040 8229 	bne.w	87abc <_dtoa_r+0x9fc>
   8766a:	4601      	mov	r1, r0
   8766c:	4648      	mov	r0, r9
   8766e:	930a      	str	r3, [sp, #40]	; 0x28
   87670:	f001 f9dc 	bl	88a2c <__mcmp>
   87674:	4641      	mov	r1, r8
   87676:	9008      	str	r0, [sp, #32]
   87678:	4620      	mov	r0, r4
   8767a:	f000 ffff 	bl	8867c <_Bfree>
   8767e:	9a08      	ldr	r2, [sp, #32]
   87680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87682:	b932      	cbnz	r2, 87692 <_dtoa_r+0x5d2>
   87684:	9924      	ldr	r1, [sp, #144]	; 0x90
   87686:	b921      	cbnz	r1, 87692 <_dtoa_r+0x5d2>
   87688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8768a:	2a00      	cmp	r2, #0
   8768c:	f000 83ee 	beq.w	87e6c <_dtoa_r+0xdac>
   87690:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87692:	9907      	ldr	r1, [sp, #28]
   87694:	2900      	cmp	r1, #0
   87696:	f2c0 829f 	blt.w	87bd8 <_dtoa_r+0xb18>
   8769a:	d105      	bne.n	876a8 <_dtoa_r+0x5e8>
   8769c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8769e:	b919      	cbnz	r1, 876a8 <_dtoa_r+0x5e8>
   876a0:	990c      	ldr	r1, [sp, #48]	; 0x30
   876a2:	2900      	cmp	r1, #0
   876a4:	f000 8298 	beq.w	87bd8 <_dtoa_r+0xb18>
   876a8:	2a00      	cmp	r2, #0
   876aa:	f300 8305 	bgt.w	87cb8 <_dtoa_r+0xbf8>
   876ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   876b0:	f107 0801 	add.w	r8, r7, #1
   876b4:	4297      	cmp	r7, r2
   876b6:	703b      	strb	r3, [r7, #0]
   876b8:	4645      	mov	r5, r8
   876ba:	f000 830b 	beq.w	87cd4 <_dtoa_r+0xc14>
   876be:	4649      	mov	r1, r9
   876c0:	2300      	movs	r3, #0
   876c2:	220a      	movs	r2, #10
   876c4:	4620      	mov	r0, r4
   876c6:	f000 ffe3 	bl	88690 <__multadd>
   876ca:	455e      	cmp	r6, fp
   876cc:	4681      	mov	r9, r0
   876ce:	4631      	mov	r1, r6
   876d0:	f04f 0300 	mov.w	r3, #0
   876d4:	f04f 020a 	mov.w	r2, #10
   876d8:	4620      	mov	r0, r4
   876da:	f000 81e9 	beq.w	87ab0 <_dtoa_r+0x9f0>
   876de:	f000 ffd7 	bl	88690 <__multadd>
   876e2:	4659      	mov	r1, fp
   876e4:	4606      	mov	r6, r0
   876e6:	2300      	movs	r3, #0
   876e8:	220a      	movs	r2, #10
   876ea:	4620      	mov	r0, r4
   876ec:	f000 ffd0 	bl	88690 <__multadd>
   876f0:	4647      	mov	r7, r8
   876f2:	4683      	mov	fp, r0
   876f4:	e7a3      	b.n	8763e <_dtoa_r+0x57e>
   876f6:	201c      	movs	r0, #28
   876f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   876fa:	4405      	add	r5, r0
   876fc:	4403      	add	r3, r0
   876fe:	930a      	str	r3, [sp, #40]	; 0x28
   87700:	9b08      	ldr	r3, [sp, #32]
   87702:	4403      	add	r3, r0
   87704:	9308      	str	r3, [sp, #32]
   87706:	e763      	b.n	875d0 <_dtoa_r+0x510>
   87708:	4641      	mov	r1, r8
   8770a:	4648      	mov	r0, r9
   8770c:	f001 f98e 	bl	88a2c <__mcmp>
   87710:	2800      	cmp	r0, #0
   87712:	f6bf af73 	bge.w	875fc <_dtoa_r+0x53c>
   87716:	9f02      	ldr	r7, [sp, #8]
   87718:	4649      	mov	r1, r9
   8771a:	2300      	movs	r3, #0
   8771c:	220a      	movs	r2, #10
   8771e:	4620      	mov	r0, r4
   87720:	3f01      	subs	r7, #1
   87722:	9702      	str	r7, [sp, #8]
   87724:	f000 ffb4 	bl	88690 <__multadd>
   87728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8772a:	4681      	mov	r9, r0
   8772c:	2b00      	cmp	r3, #0
   8772e:	f040 83b5 	bne.w	87e9c <_dtoa_r+0xddc>
   87732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87734:	2b00      	cmp	r3, #0
   87736:	f340 83be 	ble.w	87eb6 <_dtoa_r+0xdf6>
   8773a:	9307      	str	r3, [sp, #28]
   8773c:	f8dd a010 	ldr.w	sl, [sp, #16]
   87740:	9f07      	ldr	r7, [sp, #28]
   87742:	4655      	mov	r5, sl
   87744:	e006      	b.n	87754 <_dtoa_r+0x694>
   87746:	4649      	mov	r1, r9
   87748:	2300      	movs	r3, #0
   8774a:	220a      	movs	r2, #10
   8774c:	4620      	mov	r0, r4
   8774e:	f000 ff9f 	bl	88690 <__multadd>
   87752:	4681      	mov	r9, r0
   87754:	4641      	mov	r1, r8
   87756:	4648      	mov	r0, r9
   87758:	f7ff fc1c 	bl	86f94 <quorem>
   8775c:	3030      	adds	r0, #48	; 0x30
   8775e:	f805 0b01 	strb.w	r0, [r5], #1
   87762:	eba5 030a 	sub.w	r3, r5, sl
   87766:	42bb      	cmp	r3, r7
   87768:	dbed      	blt.n	87746 <_dtoa_r+0x686>
   8776a:	9b04      	ldr	r3, [sp, #16]
   8776c:	9a07      	ldr	r2, [sp, #28]
   8776e:	4682      	mov	sl, r0
   87770:	2a01      	cmp	r2, #1
   87772:	bfac      	ite	ge
   87774:	189b      	addge	r3, r3, r2
   87776:	3301      	addlt	r3, #1
   87778:	f04f 0b00 	mov.w	fp, #0
   8777c:	461d      	mov	r5, r3
   8777e:	4649      	mov	r1, r9
   87780:	2201      	movs	r2, #1
   87782:	4620      	mov	r0, r4
   87784:	f001 f902 	bl	8898c <__lshift>
   87788:	4641      	mov	r1, r8
   8778a:	4681      	mov	r9, r0
   8778c:	f001 f94e 	bl	88a2c <__mcmp>
   87790:	2800      	cmp	r0, #0
   87792:	f340 823f 	ble.w	87c14 <_dtoa_r+0xb54>
   87796:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   8779a:	1e6b      	subs	r3, r5, #1
   8779c:	9904      	ldr	r1, [sp, #16]
   8779e:	e004      	b.n	877aa <_dtoa_r+0x6ea>
   877a0:	428b      	cmp	r3, r1
   877a2:	f000 81ae 	beq.w	87b02 <_dtoa_r+0xa42>
   877a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   877aa:	2a39      	cmp	r2, #57	; 0x39
   877ac:	f103 0501 	add.w	r5, r3, #1
   877b0:	d0f6      	beq.n	877a0 <_dtoa_r+0x6e0>
   877b2:	3201      	adds	r2, #1
   877b4:	701a      	strb	r2, [r3, #0]
   877b6:	4641      	mov	r1, r8
   877b8:	4620      	mov	r0, r4
   877ba:	f000 ff5f 	bl	8867c <_Bfree>
   877be:	2e00      	cmp	r6, #0
   877c0:	f43f ae3d 	beq.w	8743e <_dtoa_r+0x37e>
   877c4:	f1bb 0f00 	cmp.w	fp, #0
   877c8:	d005      	beq.n	877d6 <_dtoa_r+0x716>
   877ca:	45b3      	cmp	fp, r6
   877cc:	d003      	beq.n	877d6 <_dtoa_r+0x716>
   877ce:	4659      	mov	r1, fp
   877d0:	4620      	mov	r0, r4
   877d2:	f000 ff53 	bl	8867c <_Bfree>
   877d6:	4631      	mov	r1, r6
   877d8:	4620      	mov	r0, r4
   877da:	f000 ff4f 	bl	8867c <_Bfree>
   877de:	e62e      	b.n	8743e <_dtoa_r+0x37e>
   877e0:	2300      	movs	r3, #0
   877e2:	930b      	str	r3, [sp, #44]	; 0x2c
   877e4:	9b02      	ldr	r3, [sp, #8]
   877e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   877e8:	4413      	add	r3, r2
   877ea:	930f      	str	r3, [sp, #60]	; 0x3c
   877ec:	3301      	adds	r3, #1
   877ee:	2b01      	cmp	r3, #1
   877f0:	461f      	mov	r7, r3
   877f2:	461e      	mov	r6, r3
   877f4:	bfb8      	it	lt
   877f6:	2701      	movlt	r7, #1
   877f8:	9307      	str	r3, [sp, #28]
   877fa:	2100      	movs	r1, #0
   877fc:	2f17      	cmp	r7, #23
   877fe:	6461      	str	r1, [r4, #68]	; 0x44
   87800:	d90a      	bls.n	87818 <_dtoa_r+0x758>
   87802:	2201      	movs	r2, #1
   87804:	2304      	movs	r3, #4
   87806:	005b      	lsls	r3, r3, #1
   87808:	f103 0014 	add.w	r0, r3, #20
   8780c:	4287      	cmp	r7, r0
   8780e:	4611      	mov	r1, r2
   87810:	f102 0201 	add.w	r2, r2, #1
   87814:	d2f7      	bcs.n	87806 <_dtoa_r+0x746>
   87816:	6461      	str	r1, [r4, #68]	; 0x44
   87818:	4620      	mov	r0, r4
   8781a:	f000 ff09 	bl	88630 <_Balloc>
   8781e:	2e0e      	cmp	r6, #14
   87820:	9004      	str	r0, [sp, #16]
   87822:	6420      	str	r0, [r4, #64]	; 0x40
   87824:	f63f ad47 	bhi.w	872b6 <_dtoa_r+0x1f6>
   87828:	2d00      	cmp	r5, #0
   8782a:	f43f ad44 	beq.w	872b6 <_dtoa_r+0x1f6>
   8782e:	9902      	ldr	r1, [sp, #8]
   87830:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   87834:	2900      	cmp	r1, #0
   87836:	f340 8203 	ble.w	87c40 <_dtoa_r+0xb80>
   8783a:	4bb9      	ldr	r3, [pc, #740]	; (87b20 <_dtoa_r+0xa60>)
   8783c:	f001 020f 	and.w	r2, r1, #15
   87840:	110d      	asrs	r5, r1, #4
   87842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87846:	06e9      	lsls	r1, r5, #27
   87848:	e9d3 6700 	ldrd	r6, r7, [r3]
   8784c:	f140 81af 	bpl.w	87bae <_dtoa_r+0xaee>
   87850:	4bb4      	ldr	r3, [pc, #720]	; (87b24 <_dtoa_r+0xa64>)
   87852:	4650      	mov	r0, sl
   87854:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   87858:	4659      	mov	r1, fp
   8785a:	f7fd fc5f 	bl	8511c <__aeabi_ddiv>
   8785e:	f04f 0a03 	mov.w	sl, #3
   87862:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   87866:	f005 050f 	and.w	r5, r5, #15
   8786a:	b18d      	cbz	r5, 87890 <_dtoa_r+0x7d0>
   8786c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 87b24 <_dtoa_r+0xa64>
   87870:	07ea      	lsls	r2, r5, #31
   87872:	d509      	bpl.n	87888 <_dtoa_r+0x7c8>
   87874:	e9d8 2300 	ldrd	r2, r3, [r8]
   87878:	4630      	mov	r0, r6
   8787a:	4639      	mov	r1, r7
   8787c:	f7fd fb24 	bl	84ec8 <__aeabi_dmul>
   87880:	4606      	mov	r6, r0
   87882:	460f      	mov	r7, r1
   87884:	f10a 0a01 	add.w	sl, sl, #1
   87888:	106d      	asrs	r5, r5, #1
   8788a:	f108 0808 	add.w	r8, r8, #8
   8788e:	d1ef      	bne.n	87870 <_dtoa_r+0x7b0>
   87890:	463b      	mov	r3, r7
   87892:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   87896:	4632      	mov	r2, r6
   87898:	f7fd fc40 	bl	8511c <__aeabi_ddiv>
   8789c:	4607      	mov	r7, r0
   8789e:	4688      	mov	r8, r1
   878a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   878a2:	b143      	cbz	r3, 878b6 <_dtoa_r+0x7f6>
   878a4:	2200      	movs	r2, #0
   878a6:	4ba0      	ldr	r3, [pc, #640]	; (87b28 <_dtoa_r+0xa68>)
   878a8:	4638      	mov	r0, r7
   878aa:	4641      	mov	r1, r8
   878ac:	f001 feb0 	bl	89610 <__aeabi_dcmplt>
   878b0:	2800      	cmp	r0, #0
   878b2:	f040 8287 	bne.w	87dc4 <_dtoa_r+0xd04>
   878b6:	4650      	mov	r0, sl
   878b8:	f7fd faa0 	bl	84dfc <__aeabi_i2d>
   878bc:	463a      	mov	r2, r7
   878be:	4643      	mov	r3, r8
   878c0:	f7fd fb02 	bl	84ec8 <__aeabi_dmul>
   878c4:	4b99      	ldr	r3, [pc, #612]	; (87b2c <_dtoa_r+0xa6c>)
   878c6:	2200      	movs	r2, #0
   878c8:	f7fd f94c 	bl	84b64 <__adddf3>
   878cc:	9b07      	ldr	r3, [sp, #28]
   878ce:	4605      	mov	r5, r0
   878d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   878d4:	2b00      	cmp	r3, #0
   878d6:	f000 813f 	beq.w	87b58 <_dtoa_r+0xa98>
   878da:	9b02      	ldr	r3, [sp, #8]
   878dc:	9315      	str	r3, [sp, #84]	; 0x54
   878de:	9b07      	ldr	r3, [sp, #28]
   878e0:	9312      	str	r3, [sp, #72]	; 0x48
   878e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   878e4:	2b00      	cmp	r3, #0
   878e6:	f000 81fb 	beq.w	87ce0 <_dtoa_r+0xc20>
   878ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   878ec:	4b8c      	ldr	r3, [pc, #560]	; (87b20 <_dtoa_r+0xa60>)
   878ee:	2000      	movs	r0, #0
   878f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   878f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   878f8:	498d      	ldr	r1, [pc, #564]	; (87b30 <_dtoa_r+0xa70>)
   878fa:	f7fd fc0f 	bl	8511c <__aeabi_ddiv>
   878fe:	462a      	mov	r2, r5
   87900:	4633      	mov	r3, r6
   87902:	f7fd f92d 	bl	84b60 <__aeabi_dsub>
   87906:	4682      	mov	sl, r0
   87908:	468b      	mov	fp, r1
   8790a:	4638      	mov	r0, r7
   8790c:	4641      	mov	r1, r8
   8790e:	f001 febd 	bl	8968c <__aeabi_d2iz>
   87912:	4605      	mov	r5, r0
   87914:	f7fd fa72 	bl	84dfc <__aeabi_i2d>
   87918:	4602      	mov	r2, r0
   8791a:	460b      	mov	r3, r1
   8791c:	4638      	mov	r0, r7
   8791e:	4641      	mov	r1, r8
   87920:	f7fd f91e 	bl	84b60 <__aeabi_dsub>
   87924:	3530      	adds	r5, #48	; 0x30
   87926:	fa5f f885 	uxtb.w	r8, r5
   8792a:	9d04      	ldr	r5, [sp, #16]
   8792c:	4606      	mov	r6, r0
   8792e:	460f      	mov	r7, r1
   87930:	f885 8000 	strb.w	r8, [r5]
   87934:	4602      	mov	r2, r0
   87936:	460b      	mov	r3, r1
   87938:	4650      	mov	r0, sl
   8793a:	4659      	mov	r1, fp
   8793c:	3501      	adds	r5, #1
   8793e:	f001 fe85 	bl	8964c <__aeabi_dcmpgt>
   87942:	2800      	cmp	r0, #0
   87944:	d154      	bne.n	879f0 <_dtoa_r+0x930>
   87946:	4632      	mov	r2, r6
   87948:	463b      	mov	r3, r7
   8794a:	2000      	movs	r0, #0
   8794c:	4976      	ldr	r1, [pc, #472]	; (87b28 <_dtoa_r+0xa68>)
   8794e:	f7fd f907 	bl	84b60 <__aeabi_dsub>
   87952:	4602      	mov	r2, r0
   87954:	460b      	mov	r3, r1
   87956:	4650      	mov	r0, sl
   87958:	4659      	mov	r1, fp
   8795a:	f001 fe77 	bl	8964c <__aeabi_dcmpgt>
   8795e:	2800      	cmp	r0, #0
   87960:	f040 8270 	bne.w	87e44 <_dtoa_r+0xd84>
   87964:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87966:	2a01      	cmp	r2, #1
   87968:	f000 8112 	beq.w	87b90 <_dtoa_r+0xad0>
   8796c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8796e:	9a04      	ldr	r2, [sp, #16]
   87970:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   87974:	4413      	add	r3, r2
   87976:	4699      	mov	r9, r3
   87978:	e00f      	b.n	8799a <_dtoa_r+0x8da>
   8797a:	4632      	mov	r2, r6
   8797c:	463b      	mov	r3, r7
   8797e:	2000      	movs	r0, #0
   87980:	4969      	ldr	r1, [pc, #420]	; (87b28 <_dtoa_r+0xa68>)
   87982:	f7fd f8ed 	bl	84b60 <__aeabi_dsub>
   87986:	4652      	mov	r2, sl
   87988:	465b      	mov	r3, fp
   8798a:	f001 fe41 	bl	89610 <__aeabi_dcmplt>
   8798e:	2800      	cmp	r0, #0
   87990:	f040 8256 	bne.w	87e40 <_dtoa_r+0xd80>
   87994:	454d      	cmp	r5, r9
   87996:	f000 80f9 	beq.w	87b8c <_dtoa_r+0xacc>
   8799a:	4650      	mov	r0, sl
   8799c:	4659      	mov	r1, fp
   8799e:	2200      	movs	r2, #0
   879a0:	4b64      	ldr	r3, [pc, #400]	; (87b34 <_dtoa_r+0xa74>)
   879a2:	f7fd fa91 	bl	84ec8 <__aeabi_dmul>
   879a6:	2200      	movs	r2, #0
   879a8:	4b62      	ldr	r3, [pc, #392]	; (87b34 <_dtoa_r+0xa74>)
   879aa:	4682      	mov	sl, r0
   879ac:	468b      	mov	fp, r1
   879ae:	4630      	mov	r0, r6
   879b0:	4639      	mov	r1, r7
   879b2:	f7fd fa89 	bl	84ec8 <__aeabi_dmul>
   879b6:	460f      	mov	r7, r1
   879b8:	4606      	mov	r6, r0
   879ba:	f001 fe67 	bl	8968c <__aeabi_d2iz>
   879be:	4680      	mov	r8, r0
   879c0:	f7fd fa1c 	bl	84dfc <__aeabi_i2d>
   879c4:	4602      	mov	r2, r0
   879c6:	460b      	mov	r3, r1
   879c8:	4630      	mov	r0, r6
   879ca:	4639      	mov	r1, r7
   879cc:	f7fd f8c8 	bl	84b60 <__aeabi_dsub>
   879d0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   879d4:	fa5f f888 	uxtb.w	r8, r8
   879d8:	f805 8b01 	strb.w	r8, [r5], #1
   879dc:	4652      	mov	r2, sl
   879de:	465b      	mov	r3, fp
   879e0:	4606      	mov	r6, r0
   879e2:	460f      	mov	r7, r1
   879e4:	f001 fe14 	bl	89610 <__aeabi_dcmplt>
   879e8:	2800      	cmp	r0, #0
   879ea:	d0c6      	beq.n	8797a <_dtoa_r+0x8ba>
   879ec:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   879f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   879f2:	9302      	str	r3, [sp, #8]
   879f4:	e523      	b.n	8743e <_dtoa_r+0x37e>
   879f6:	2300      	movs	r3, #0
   879f8:	930b      	str	r3, [sp, #44]	; 0x2c
   879fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   879fc:	2b00      	cmp	r3, #0
   879fe:	f340 80dd 	ble.w	87bbc <_dtoa_r+0xafc>
   87a02:	461f      	mov	r7, r3
   87a04:	461e      	mov	r6, r3
   87a06:	930f      	str	r3, [sp, #60]	; 0x3c
   87a08:	9307      	str	r3, [sp, #28]
   87a0a:	e6f6      	b.n	877fa <_dtoa_r+0x73a>
   87a0c:	2301      	movs	r3, #1
   87a0e:	930b      	str	r3, [sp, #44]	; 0x2c
   87a10:	e7f3      	b.n	879fa <_dtoa_r+0x93a>
   87a12:	f1ba 0f00 	cmp.w	sl, #0
   87a16:	f47f ada7 	bne.w	87568 <_dtoa_r+0x4a8>
   87a1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   87a1e:	2b00      	cmp	r3, #0
   87a20:	f47f adbc 	bne.w	8759c <_dtoa_r+0x4dc>
   87a24:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   87a28:	0d3f      	lsrs	r7, r7, #20
   87a2a:	053f      	lsls	r7, r7, #20
   87a2c:	2f00      	cmp	r7, #0
   87a2e:	f000 820d 	beq.w	87e4c <_dtoa_r+0xd8c>
   87a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87a34:	3301      	adds	r3, #1
   87a36:	930a      	str	r3, [sp, #40]	; 0x28
   87a38:	9b08      	ldr	r3, [sp, #32]
   87a3a:	3301      	adds	r3, #1
   87a3c:	9308      	str	r3, [sp, #32]
   87a3e:	2301      	movs	r3, #1
   87a40:	930c      	str	r3, [sp, #48]	; 0x30
   87a42:	e5ad      	b.n	875a0 <_dtoa_r+0x4e0>
   87a44:	9b07      	ldr	r3, [sp, #28]
   87a46:	2b00      	cmp	r3, #0
   87a48:	f73f ac48 	bgt.w	872dc <_dtoa_r+0x21c>
   87a4c:	f040 8222 	bne.w	87e94 <_dtoa_r+0xdd4>
   87a50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87a54:	2200      	movs	r2, #0
   87a56:	4b38      	ldr	r3, [pc, #224]	; (87b38 <_dtoa_r+0xa78>)
   87a58:	f7fd fa36 	bl	84ec8 <__aeabi_dmul>
   87a5c:	4652      	mov	r2, sl
   87a5e:	465b      	mov	r3, fp
   87a60:	f001 fdea 	bl	89638 <__aeabi_dcmpge>
   87a64:	f8dd 801c 	ldr.w	r8, [sp, #28]
   87a68:	4646      	mov	r6, r8
   87a6a:	2800      	cmp	r0, #0
   87a6c:	d041      	beq.n	87af2 <_dtoa_r+0xa32>
   87a6e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87a70:	9d04      	ldr	r5, [sp, #16]
   87a72:	43db      	mvns	r3, r3
   87a74:	9302      	str	r3, [sp, #8]
   87a76:	4641      	mov	r1, r8
   87a78:	4620      	mov	r0, r4
   87a7a:	f000 fdff 	bl	8867c <_Bfree>
   87a7e:	2e00      	cmp	r6, #0
   87a80:	f43f acdd 	beq.w	8743e <_dtoa_r+0x37e>
   87a84:	e6a7      	b.n	877d6 <_dtoa_r+0x716>
   87a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87a88:	4649      	mov	r1, r9
   87a8a:	4620      	mov	r0, r4
   87a8c:	f000 ff2e 	bl	888ec <__pow5mult>
   87a90:	4681      	mov	r9, r0
   87a92:	e557      	b.n	87544 <_dtoa_r+0x484>
   87a94:	9a14      	ldr	r2, [sp, #80]	; 0x50
   87a96:	2a00      	cmp	r2, #0
   87a98:	f000 8188 	beq.w	87dac <_dtoa_r+0xcec>
   87a9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   87aa0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87aa2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87aa4:	e4f2      	b.n	8748c <_dtoa_r+0x3cc>
   87aa6:	f1ba 0f00 	cmp.w	sl, #0
   87aaa:	f47f ad77 	bne.w	8759c <_dtoa_r+0x4dc>
   87aae:	e7b4      	b.n	87a1a <_dtoa_r+0x95a>
   87ab0:	f000 fdee 	bl	88690 <__multadd>
   87ab4:	4647      	mov	r7, r8
   87ab6:	4606      	mov	r6, r0
   87ab8:	4683      	mov	fp, r0
   87aba:	e5c0      	b.n	8763e <_dtoa_r+0x57e>
   87abc:	4601      	mov	r1, r0
   87abe:	4620      	mov	r0, r4
   87ac0:	9308      	str	r3, [sp, #32]
   87ac2:	f000 fddb 	bl	8867c <_Bfree>
   87ac6:	2201      	movs	r2, #1
   87ac8:	9b08      	ldr	r3, [sp, #32]
   87aca:	e5e2      	b.n	87692 <_dtoa_r+0x5d2>
   87acc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87ace:	2b02      	cmp	r3, #2
   87ad0:	f77f ad98 	ble.w	87604 <_dtoa_r+0x544>
   87ad4:	9b07      	ldr	r3, [sp, #28]
   87ad6:	2b00      	cmp	r3, #0
   87ad8:	d1c9      	bne.n	87a6e <_dtoa_r+0x9ae>
   87ada:	4641      	mov	r1, r8
   87adc:	2205      	movs	r2, #5
   87ade:	4620      	mov	r0, r4
   87ae0:	f000 fdd6 	bl	88690 <__multadd>
   87ae4:	4601      	mov	r1, r0
   87ae6:	4680      	mov	r8, r0
   87ae8:	4648      	mov	r0, r9
   87aea:	f000 ff9f 	bl	88a2c <__mcmp>
   87aee:	2800      	cmp	r0, #0
   87af0:	ddbd      	ble.n	87a6e <_dtoa_r+0x9ae>
   87af2:	2331      	movs	r3, #49	; 0x31
   87af4:	9a02      	ldr	r2, [sp, #8]
   87af6:	9904      	ldr	r1, [sp, #16]
   87af8:	3201      	adds	r2, #1
   87afa:	9202      	str	r2, [sp, #8]
   87afc:	700b      	strb	r3, [r1, #0]
   87afe:	1c4d      	adds	r5, r1, #1
   87b00:	e7b9      	b.n	87a76 <_dtoa_r+0x9b6>
   87b02:	2331      	movs	r3, #49	; 0x31
   87b04:	9a02      	ldr	r2, [sp, #8]
   87b06:	3201      	adds	r2, #1
   87b08:	9202      	str	r2, [sp, #8]
   87b0a:	9a04      	ldr	r2, [sp, #16]
   87b0c:	7013      	strb	r3, [r2, #0]
   87b0e:	e652      	b.n	877b6 <_dtoa_r+0x6f6>
   87b10:	2301      	movs	r3, #1
   87b12:	930b      	str	r3, [sp, #44]	; 0x2c
   87b14:	e666      	b.n	877e4 <_dtoa_r+0x724>
   87b16:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   87b1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   87b1c:	e48f      	b.n	8743e <_dtoa_r+0x37e>
   87b1e:	bf00      	nop
   87b20:	00089c48 	.word	0x00089c48
   87b24:	00089c20 	.word	0x00089c20
   87b28:	3ff00000 	.word	0x3ff00000
   87b2c:	401c0000 	.word	0x401c0000
   87b30:	3fe00000 	.word	0x3fe00000
   87b34:	40240000 	.word	0x40240000
   87b38:	40140000 	.word	0x40140000
   87b3c:	4650      	mov	r0, sl
   87b3e:	f7fd f95d 	bl	84dfc <__aeabi_i2d>
   87b42:	463a      	mov	r2, r7
   87b44:	4643      	mov	r3, r8
   87b46:	f7fd f9bf 	bl	84ec8 <__aeabi_dmul>
   87b4a:	2200      	movs	r2, #0
   87b4c:	4bc1      	ldr	r3, [pc, #772]	; (87e54 <_dtoa_r+0xd94>)
   87b4e:	f7fd f809 	bl	84b64 <__adddf3>
   87b52:	4605      	mov	r5, r0
   87b54:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87b58:	4641      	mov	r1, r8
   87b5a:	2200      	movs	r2, #0
   87b5c:	4bbe      	ldr	r3, [pc, #760]	; (87e58 <_dtoa_r+0xd98>)
   87b5e:	4638      	mov	r0, r7
   87b60:	f7fc fffe 	bl	84b60 <__aeabi_dsub>
   87b64:	462a      	mov	r2, r5
   87b66:	4633      	mov	r3, r6
   87b68:	4682      	mov	sl, r0
   87b6a:	468b      	mov	fp, r1
   87b6c:	f001 fd6e 	bl	8964c <__aeabi_dcmpgt>
   87b70:	4680      	mov	r8, r0
   87b72:	2800      	cmp	r0, #0
   87b74:	f040 8110 	bne.w	87d98 <_dtoa_r+0xcd8>
   87b78:	462a      	mov	r2, r5
   87b7a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   87b7e:	4650      	mov	r0, sl
   87b80:	4659      	mov	r1, fp
   87b82:	f001 fd45 	bl	89610 <__aeabi_dcmplt>
   87b86:	b118      	cbz	r0, 87b90 <_dtoa_r+0xad0>
   87b88:	4646      	mov	r6, r8
   87b8a:	e770      	b.n	87a6e <_dtoa_r+0x9ae>
   87b8c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87b90:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   87b94:	f7ff bb8f 	b.w	872b6 <_dtoa_r+0x1f6>
   87b98:	9804      	ldr	r0, [sp, #16]
   87b9a:	f7ff bac0 	b.w	8711e <_dtoa_r+0x5e>
   87b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87ba2:	1afb      	subs	r3, r7, r3
   87ba4:	441a      	add	r2, r3
   87ba6:	970c      	str	r7, [sp, #48]	; 0x30
   87ba8:	920d      	str	r2, [sp, #52]	; 0x34
   87baa:	2700      	movs	r7, #0
   87bac:	e468      	b.n	87480 <_dtoa_r+0x3c0>
   87bae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   87bb2:	f04f 0a02 	mov.w	sl, #2
   87bb6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   87bba:	e656      	b.n	8786a <_dtoa_r+0x7aa>
   87bbc:	2100      	movs	r1, #0
   87bbe:	2301      	movs	r3, #1
   87bc0:	4620      	mov	r0, r4
   87bc2:	6461      	str	r1, [r4, #68]	; 0x44
   87bc4:	9325      	str	r3, [sp, #148]	; 0x94
   87bc6:	f000 fd33 	bl	88630 <_Balloc>
   87bca:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87bcc:	9004      	str	r0, [sp, #16]
   87bce:	9307      	str	r3, [sp, #28]
   87bd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87bd2:	6420      	str	r0, [r4, #64]	; 0x40
   87bd4:	930f      	str	r3, [sp, #60]	; 0x3c
   87bd6:	e627      	b.n	87828 <_dtoa_r+0x768>
   87bd8:	2a00      	cmp	r2, #0
   87bda:	46d0      	mov	r8, sl
   87bdc:	f8cd b020 	str.w	fp, [sp, #32]
   87be0:	469a      	mov	sl, r3
   87be2:	dd11      	ble.n	87c08 <_dtoa_r+0xb48>
   87be4:	4649      	mov	r1, r9
   87be6:	2201      	movs	r2, #1
   87be8:	4620      	mov	r0, r4
   87bea:	f000 fecf 	bl	8898c <__lshift>
   87bee:	4641      	mov	r1, r8
   87bf0:	4681      	mov	r9, r0
   87bf2:	f000 ff1b 	bl	88a2c <__mcmp>
   87bf6:	2800      	cmp	r0, #0
   87bf8:	f340 8145 	ble.w	87e86 <_dtoa_r+0xdc6>
   87bfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   87c00:	f000 8105 	beq.w	87e0e <_dtoa_r+0xd4e>
   87c04:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   87c08:	46b3      	mov	fp, r6
   87c0a:	f887 a000 	strb.w	sl, [r7]
   87c0e:	1c7d      	adds	r5, r7, #1
   87c10:	9e08      	ldr	r6, [sp, #32]
   87c12:	e5d0      	b.n	877b6 <_dtoa_r+0x6f6>
   87c14:	d104      	bne.n	87c20 <_dtoa_r+0xb60>
   87c16:	f01a 0f01 	tst.w	sl, #1
   87c1a:	d001      	beq.n	87c20 <_dtoa_r+0xb60>
   87c1c:	e5bb      	b.n	87796 <_dtoa_r+0x6d6>
   87c1e:	4615      	mov	r5, r2
   87c20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87c24:	1e6a      	subs	r2, r5, #1
   87c26:	2b30      	cmp	r3, #48	; 0x30
   87c28:	d0f9      	beq.n	87c1e <_dtoa_r+0xb5e>
   87c2a:	e5c4      	b.n	877b6 <_dtoa_r+0x6f6>
   87c2c:	2230      	movs	r2, #48	; 0x30
   87c2e:	9904      	ldr	r1, [sp, #16]
   87c30:	700a      	strb	r2, [r1, #0]
   87c32:	9a02      	ldr	r2, [sp, #8]
   87c34:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87c38:	3201      	adds	r2, #1
   87c3a:	9202      	str	r2, [sp, #8]
   87c3c:	f7ff bbfb 	b.w	87436 <_dtoa_r+0x376>
   87c40:	f000 80bb 	beq.w	87dba <_dtoa_r+0xcfa>
   87c44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87c48:	9b02      	ldr	r3, [sp, #8]
   87c4a:	f04f 0a02 	mov.w	sl, #2
   87c4e:	425d      	negs	r5, r3
   87c50:	4b82      	ldr	r3, [pc, #520]	; (87e5c <_dtoa_r+0xd9c>)
   87c52:	f005 020f 	and.w	r2, r5, #15
   87c56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   87c5e:	f7fd f933 	bl	84ec8 <__aeabi_dmul>
   87c62:	112d      	asrs	r5, r5, #4
   87c64:	4607      	mov	r7, r0
   87c66:	4688      	mov	r8, r1
   87c68:	f43f ae1a 	beq.w	878a0 <_dtoa_r+0x7e0>
   87c6c:	4e7c      	ldr	r6, [pc, #496]	; (87e60 <_dtoa_r+0xda0>)
   87c6e:	07eb      	lsls	r3, r5, #31
   87c70:	d509      	bpl.n	87c86 <_dtoa_r+0xbc6>
   87c72:	e9d6 2300 	ldrd	r2, r3, [r6]
   87c76:	4638      	mov	r0, r7
   87c78:	4641      	mov	r1, r8
   87c7a:	f7fd f925 	bl	84ec8 <__aeabi_dmul>
   87c7e:	4607      	mov	r7, r0
   87c80:	4688      	mov	r8, r1
   87c82:	f10a 0a01 	add.w	sl, sl, #1
   87c86:	106d      	asrs	r5, r5, #1
   87c88:	f106 0608 	add.w	r6, r6, #8
   87c8c:	d1ef      	bne.n	87c6e <_dtoa_r+0xbae>
   87c8e:	e607      	b.n	878a0 <_dtoa_r+0x7e0>
   87c90:	6871      	ldr	r1, [r6, #4]
   87c92:	4620      	mov	r0, r4
   87c94:	f000 fccc 	bl	88630 <_Balloc>
   87c98:	4605      	mov	r5, r0
   87c9a:	6933      	ldr	r3, [r6, #16]
   87c9c:	f106 010c 	add.w	r1, r6, #12
   87ca0:	3302      	adds	r3, #2
   87ca2:	009a      	lsls	r2, r3, #2
   87ca4:	300c      	adds	r0, #12
   87ca6:	f000 fc41 	bl	8852c <memcpy>
   87caa:	4629      	mov	r1, r5
   87cac:	2201      	movs	r2, #1
   87cae:	4620      	mov	r0, r4
   87cb0:	f000 fe6c 	bl	8898c <__lshift>
   87cb4:	9008      	str	r0, [sp, #32]
   87cb6:	e4b6      	b.n	87626 <_dtoa_r+0x566>
   87cb8:	2b39      	cmp	r3, #57	; 0x39
   87cba:	f8cd b020 	str.w	fp, [sp, #32]
   87cbe:	46d0      	mov	r8, sl
   87cc0:	f000 80a5 	beq.w	87e0e <_dtoa_r+0xd4e>
   87cc4:	f103 0a01 	add.w	sl, r3, #1
   87cc8:	46b3      	mov	fp, r6
   87cca:	f887 a000 	strb.w	sl, [r7]
   87cce:	1c7d      	adds	r5, r7, #1
   87cd0:	9e08      	ldr	r6, [sp, #32]
   87cd2:	e570      	b.n	877b6 <_dtoa_r+0x6f6>
   87cd4:	465a      	mov	r2, fp
   87cd6:	46d0      	mov	r8, sl
   87cd8:	46b3      	mov	fp, r6
   87cda:	469a      	mov	sl, r3
   87cdc:	4616      	mov	r6, r2
   87cde:	e54e      	b.n	8777e <_dtoa_r+0x6be>
   87ce0:	9812      	ldr	r0, [sp, #72]	; 0x48
   87ce2:	495e      	ldr	r1, [pc, #376]	; (87e5c <_dtoa_r+0xd9c>)
   87ce4:	462a      	mov	r2, r5
   87ce6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   87cea:	4633      	mov	r3, r6
   87cec:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   87cf0:	f7fd f8ea 	bl	84ec8 <__aeabi_dmul>
   87cf4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   87cf8:	4638      	mov	r0, r7
   87cfa:	4641      	mov	r1, r8
   87cfc:	f001 fcc6 	bl	8968c <__aeabi_d2iz>
   87d00:	4605      	mov	r5, r0
   87d02:	f7fd f87b 	bl	84dfc <__aeabi_i2d>
   87d06:	4602      	mov	r2, r0
   87d08:	460b      	mov	r3, r1
   87d0a:	4638      	mov	r0, r7
   87d0c:	4641      	mov	r1, r8
   87d0e:	f7fc ff27 	bl	84b60 <__aeabi_dsub>
   87d12:	4606      	mov	r6, r0
   87d14:	9812      	ldr	r0, [sp, #72]	; 0x48
   87d16:	9a04      	ldr	r2, [sp, #16]
   87d18:	3530      	adds	r5, #48	; 0x30
   87d1a:	2801      	cmp	r0, #1
   87d1c:	7015      	strb	r5, [r2, #0]
   87d1e:	460f      	mov	r7, r1
   87d20:	f102 0501 	add.w	r5, r2, #1
   87d24:	d026      	beq.n	87d74 <_dtoa_r+0xcb4>
   87d26:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87d28:	9a04      	ldr	r2, [sp, #16]
   87d2a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   87d2e:	4413      	add	r3, r2
   87d30:	f04f 0a00 	mov.w	sl, #0
   87d34:	4699      	mov	r9, r3
   87d36:	f8df b130 	ldr.w	fp, [pc, #304]	; 87e68 <_dtoa_r+0xda8>
   87d3a:	4652      	mov	r2, sl
   87d3c:	465b      	mov	r3, fp
   87d3e:	4630      	mov	r0, r6
   87d40:	4639      	mov	r1, r7
   87d42:	f7fd f8c1 	bl	84ec8 <__aeabi_dmul>
   87d46:	460f      	mov	r7, r1
   87d48:	4606      	mov	r6, r0
   87d4a:	f001 fc9f 	bl	8968c <__aeabi_d2iz>
   87d4e:	4680      	mov	r8, r0
   87d50:	f7fd f854 	bl	84dfc <__aeabi_i2d>
   87d54:	4602      	mov	r2, r0
   87d56:	460b      	mov	r3, r1
   87d58:	4630      	mov	r0, r6
   87d5a:	4639      	mov	r1, r7
   87d5c:	f7fc ff00 	bl	84b60 <__aeabi_dsub>
   87d60:	f108 0830 	add.w	r8, r8, #48	; 0x30
   87d64:	f805 8b01 	strb.w	r8, [r5], #1
   87d68:	454d      	cmp	r5, r9
   87d6a:	4606      	mov	r6, r0
   87d6c:	460f      	mov	r7, r1
   87d6e:	d1e4      	bne.n	87d3a <_dtoa_r+0xc7a>
   87d70:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87d74:	2200      	movs	r2, #0
   87d76:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   87d7a:	4b3a      	ldr	r3, [pc, #232]	; (87e64 <_dtoa_r+0xda4>)
   87d7c:	f7fc fef2 	bl	84b64 <__adddf3>
   87d80:	4632      	mov	r2, r6
   87d82:	463b      	mov	r3, r7
   87d84:	f001 fc44 	bl	89610 <__aeabi_dcmplt>
   87d88:	2800      	cmp	r0, #0
   87d8a:	d046      	beq.n	87e1a <_dtoa_r+0xd5a>
   87d8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87d8e:	9302      	str	r3, [sp, #8]
   87d90:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87d94:	f7ff bb42 	b.w	8741c <_dtoa_r+0x35c>
   87d98:	f04f 0800 	mov.w	r8, #0
   87d9c:	4646      	mov	r6, r8
   87d9e:	e6a8      	b.n	87af2 <_dtoa_r+0xa32>
   87da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87da2:	9a07      	ldr	r2, [sp, #28]
   87da4:	1a9d      	subs	r5, r3, r2
   87da6:	2300      	movs	r3, #0
   87da8:	f7ff bb70 	b.w	8748c <_dtoa_r+0x3cc>
   87dac:	9b18      	ldr	r3, [sp, #96]	; 0x60
   87dae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87db0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   87db4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87db6:	f7ff bb69 	b.w	8748c <_dtoa_r+0x3cc>
   87dba:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   87dbe:	f04f 0a02 	mov.w	sl, #2
   87dc2:	e56d      	b.n	878a0 <_dtoa_r+0x7e0>
   87dc4:	9b07      	ldr	r3, [sp, #28]
   87dc6:	2b00      	cmp	r3, #0
   87dc8:	f43f aeb8 	beq.w	87b3c <_dtoa_r+0xa7c>
   87dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87dce:	2b00      	cmp	r3, #0
   87dd0:	f77f aede 	ble.w	87b90 <_dtoa_r+0xad0>
   87dd4:	2200      	movs	r2, #0
   87dd6:	4b24      	ldr	r3, [pc, #144]	; (87e68 <_dtoa_r+0xda8>)
   87dd8:	4638      	mov	r0, r7
   87dda:	4641      	mov	r1, r8
   87ddc:	f7fd f874 	bl	84ec8 <__aeabi_dmul>
   87de0:	4607      	mov	r7, r0
   87de2:	4688      	mov	r8, r1
   87de4:	f10a 0001 	add.w	r0, sl, #1
   87de8:	f7fd f808 	bl	84dfc <__aeabi_i2d>
   87dec:	463a      	mov	r2, r7
   87dee:	4643      	mov	r3, r8
   87df0:	f7fd f86a 	bl	84ec8 <__aeabi_dmul>
   87df4:	2200      	movs	r2, #0
   87df6:	4b17      	ldr	r3, [pc, #92]	; (87e54 <_dtoa_r+0xd94>)
   87df8:	f7fc feb4 	bl	84b64 <__adddf3>
   87dfc:	9a02      	ldr	r2, [sp, #8]
   87dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87e00:	3a01      	subs	r2, #1
   87e02:	4605      	mov	r5, r0
   87e04:	9215      	str	r2, [sp, #84]	; 0x54
   87e06:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87e0a:	9312      	str	r3, [sp, #72]	; 0x48
   87e0c:	e569      	b.n	878e2 <_dtoa_r+0x822>
   87e0e:	2239      	movs	r2, #57	; 0x39
   87e10:	46b3      	mov	fp, r6
   87e12:	703a      	strb	r2, [r7, #0]
   87e14:	9e08      	ldr	r6, [sp, #32]
   87e16:	1c7d      	adds	r5, r7, #1
   87e18:	e4bf      	b.n	8779a <_dtoa_r+0x6da>
   87e1a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   87e1e:	2000      	movs	r0, #0
   87e20:	4910      	ldr	r1, [pc, #64]	; (87e64 <_dtoa_r+0xda4>)
   87e22:	f7fc fe9d 	bl	84b60 <__aeabi_dsub>
   87e26:	4632      	mov	r2, r6
   87e28:	463b      	mov	r3, r7
   87e2a:	f001 fc0f 	bl	8964c <__aeabi_dcmpgt>
   87e2e:	b908      	cbnz	r0, 87e34 <_dtoa_r+0xd74>
   87e30:	e6ae      	b.n	87b90 <_dtoa_r+0xad0>
   87e32:	4615      	mov	r5, r2
   87e34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87e38:	1e6a      	subs	r2, r5, #1
   87e3a:	2b30      	cmp	r3, #48	; 0x30
   87e3c:	d0f9      	beq.n	87e32 <_dtoa_r+0xd72>
   87e3e:	e5d7      	b.n	879f0 <_dtoa_r+0x930>
   87e40:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87e46:	9302      	str	r3, [sp, #8]
   87e48:	f7ff bae8 	b.w	8741c <_dtoa_r+0x35c>
   87e4c:	970c      	str	r7, [sp, #48]	; 0x30
   87e4e:	f7ff bba7 	b.w	875a0 <_dtoa_r+0x4e0>
   87e52:	bf00      	nop
   87e54:	401c0000 	.word	0x401c0000
   87e58:	40140000 	.word	0x40140000
   87e5c:	00089c48 	.word	0x00089c48
   87e60:	00089c20 	.word	0x00089c20
   87e64:	3fe00000 	.word	0x3fe00000
   87e68:	40240000 	.word	0x40240000
   87e6c:	2b39      	cmp	r3, #57	; 0x39
   87e6e:	f8cd b020 	str.w	fp, [sp, #32]
   87e72:	46d0      	mov	r8, sl
   87e74:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87e78:	469a      	mov	sl, r3
   87e7a:	d0c8      	beq.n	87e0e <_dtoa_r+0xd4e>
   87e7c:	f1bb 0f00 	cmp.w	fp, #0
   87e80:	f73f aec0 	bgt.w	87c04 <_dtoa_r+0xb44>
   87e84:	e6c0      	b.n	87c08 <_dtoa_r+0xb48>
   87e86:	f47f aebf 	bne.w	87c08 <_dtoa_r+0xb48>
   87e8a:	f01a 0f01 	tst.w	sl, #1
   87e8e:	f43f aebb 	beq.w	87c08 <_dtoa_r+0xb48>
   87e92:	e6b3      	b.n	87bfc <_dtoa_r+0xb3c>
   87e94:	f04f 0800 	mov.w	r8, #0
   87e98:	4646      	mov	r6, r8
   87e9a:	e5e8      	b.n	87a6e <_dtoa_r+0x9ae>
   87e9c:	4631      	mov	r1, r6
   87e9e:	2300      	movs	r3, #0
   87ea0:	220a      	movs	r2, #10
   87ea2:	4620      	mov	r0, r4
   87ea4:	f000 fbf4 	bl	88690 <__multadd>
   87ea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87eaa:	4606      	mov	r6, r0
   87eac:	2b00      	cmp	r3, #0
   87eae:	dd07      	ble.n	87ec0 <_dtoa_r+0xe00>
   87eb0:	9307      	str	r3, [sp, #28]
   87eb2:	f7ff bbab 	b.w	8760c <_dtoa_r+0x54c>
   87eb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87eb8:	2b02      	cmp	r3, #2
   87eba:	dc1f      	bgt.n	87efc <_dtoa_r+0xe3c>
   87ebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87ebe:	e43c      	b.n	8773a <_dtoa_r+0x67a>
   87ec0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87ec2:	2b02      	cmp	r3, #2
   87ec4:	dc1a      	bgt.n	87efc <_dtoa_r+0xe3c>
   87ec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87ec8:	e7f2      	b.n	87eb0 <_dtoa_r+0xdf0>
   87eca:	f43f ab81 	beq.w	875d0 <_dtoa_r+0x510>
   87ece:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   87ed2:	e411      	b.n	876f8 <_dtoa_r+0x638>
   87ed4:	2500      	movs	r5, #0
   87ed6:	4620      	mov	r0, r4
   87ed8:	6465      	str	r5, [r4, #68]	; 0x44
   87eda:	4629      	mov	r1, r5
   87edc:	f000 fba8 	bl	88630 <_Balloc>
   87ee0:	f04f 33ff 	mov.w	r3, #4294967295
   87ee4:	9307      	str	r3, [sp, #28]
   87ee6:	930f      	str	r3, [sp, #60]	; 0x3c
   87ee8:	2301      	movs	r3, #1
   87eea:	9004      	str	r0, [sp, #16]
   87eec:	9525      	str	r5, [sp, #148]	; 0x94
   87eee:	6420      	str	r0, [r4, #64]	; 0x40
   87ef0:	930b      	str	r3, [sp, #44]	; 0x2c
   87ef2:	f7ff b9e0 	b.w	872b6 <_dtoa_r+0x1f6>
   87ef6:	2501      	movs	r5, #1
   87ef8:	f7ff b9a8 	b.w	8724c <_dtoa_r+0x18c>
   87efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87efe:	9307      	str	r3, [sp, #28]
   87f00:	e5e8      	b.n	87ad4 <_dtoa_r+0xa14>
   87f02:	bf00      	nop

00087f04 <__libc_fini_array>:
   87f04:	b538      	push	{r3, r4, r5, lr}
   87f06:	4c0a      	ldr	r4, [pc, #40]	; (87f30 <__libc_fini_array+0x2c>)
   87f08:	4d0a      	ldr	r5, [pc, #40]	; (87f34 <__libc_fini_array+0x30>)
   87f0a:	1b64      	subs	r4, r4, r5
   87f0c:	10a4      	asrs	r4, r4, #2
   87f0e:	d00a      	beq.n	87f26 <__libc_fini_array+0x22>
   87f10:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   87f14:	3b01      	subs	r3, #1
   87f16:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   87f1a:	3c01      	subs	r4, #1
   87f1c:	f855 3904 	ldr.w	r3, [r5], #-4
   87f20:	4798      	blx	r3
   87f22:	2c00      	cmp	r4, #0
   87f24:	d1f9      	bne.n	87f1a <__libc_fini_array+0x16>
   87f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   87f2a:	f001 bf8b 	b.w	89e44 <_fini>
   87f2e:	bf00      	nop
   87f30:	00089e54 	.word	0x00089e54
   87f34:	00089e50 	.word	0x00089e50

00087f38 <_localeconv_r>:
   87f38:	4a04      	ldr	r2, [pc, #16]	; (87f4c <_localeconv_r+0x14>)
   87f3a:	4b05      	ldr	r3, [pc, #20]	; (87f50 <_localeconv_r+0x18>)
   87f3c:	6812      	ldr	r2, [r2, #0]
   87f3e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   87f40:	2800      	cmp	r0, #0
   87f42:	bf08      	it	eq
   87f44:	4618      	moveq	r0, r3
   87f46:	30f0      	adds	r0, #240	; 0xf0
   87f48:	4770      	bx	lr
   87f4a:	bf00      	nop
   87f4c:	200701a4 	.word	0x200701a4
   87f50:	200709e4 	.word	0x200709e4

00087f54 <__retarget_lock_acquire_recursive>:
   87f54:	4770      	bx	lr
   87f56:	bf00      	nop

00087f58 <__retarget_lock_release_recursive>:
   87f58:	4770      	bx	lr
   87f5a:	bf00      	nop

00087f5c <_malloc_r>:
   87f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87f60:	f101 060b 	add.w	r6, r1, #11
   87f64:	2e16      	cmp	r6, #22
   87f66:	b083      	sub	sp, #12
   87f68:	4605      	mov	r5, r0
   87f6a:	f240 809e 	bls.w	880aa <_malloc_r+0x14e>
   87f6e:	f036 0607 	bics.w	r6, r6, #7
   87f72:	f100 80bd 	bmi.w	880f0 <_malloc_r+0x194>
   87f76:	42b1      	cmp	r1, r6
   87f78:	f200 80ba 	bhi.w	880f0 <_malloc_r+0x194>
   87f7c:	f000 fb4c 	bl	88618 <__malloc_lock>
   87f80:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   87f84:	f0c0 8285 	bcc.w	88492 <_malloc_r+0x536>
   87f88:	0a73      	lsrs	r3, r6, #9
   87f8a:	f000 80b8 	beq.w	880fe <_malloc_r+0x1a2>
   87f8e:	2b04      	cmp	r3, #4
   87f90:	f200 816c 	bhi.w	8826c <_malloc_r+0x310>
   87f94:	09b3      	lsrs	r3, r6, #6
   87f96:	f103 0039 	add.w	r0, r3, #57	; 0x39
   87f9a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   87f9e:	00c1      	lsls	r1, r0, #3
   87fa0:	4fb8      	ldr	r7, [pc, #736]	; (88284 <_malloc_r+0x328>)
   87fa2:	4439      	add	r1, r7
   87fa4:	684c      	ldr	r4, [r1, #4]
   87fa6:	3908      	subs	r1, #8
   87fa8:	42a1      	cmp	r1, r4
   87faa:	d106      	bne.n	87fba <_malloc_r+0x5e>
   87fac:	e00c      	b.n	87fc8 <_malloc_r+0x6c>
   87fae:	2a00      	cmp	r2, #0
   87fb0:	f280 80ab 	bge.w	8810a <_malloc_r+0x1ae>
   87fb4:	68e4      	ldr	r4, [r4, #12]
   87fb6:	42a1      	cmp	r1, r4
   87fb8:	d006      	beq.n	87fc8 <_malloc_r+0x6c>
   87fba:	6863      	ldr	r3, [r4, #4]
   87fbc:	f023 0303 	bic.w	r3, r3, #3
   87fc0:	1b9a      	subs	r2, r3, r6
   87fc2:	2a0f      	cmp	r2, #15
   87fc4:	ddf3      	ble.n	87fae <_malloc_r+0x52>
   87fc6:	4670      	mov	r0, lr
   87fc8:	693c      	ldr	r4, [r7, #16]
   87fca:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 88298 <_malloc_r+0x33c>
   87fce:	4574      	cmp	r4, lr
   87fd0:	f000 819e 	beq.w	88310 <_malloc_r+0x3b4>
   87fd4:	6863      	ldr	r3, [r4, #4]
   87fd6:	f023 0303 	bic.w	r3, r3, #3
   87fda:	1b9a      	subs	r2, r3, r6
   87fdc:	2a0f      	cmp	r2, #15
   87fde:	f300 8183 	bgt.w	882e8 <_malloc_r+0x38c>
   87fe2:	2a00      	cmp	r2, #0
   87fe4:	f8c7 e014 	str.w	lr, [r7, #20]
   87fe8:	f8c7 e010 	str.w	lr, [r7, #16]
   87fec:	f280 8091 	bge.w	88112 <_malloc_r+0x1b6>
   87ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   87ff4:	f080 8154 	bcs.w	882a0 <_malloc_r+0x344>
   87ff8:	2201      	movs	r2, #1
   87ffa:	08db      	lsrs	r3, r3, #3
   87ffc:	6879      	ldr	r1, [r7, #4]
   87ffe:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   88002:	4413      	add	r3, r2
   88004:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   88008:	fa02 f20c 	lsl.w	r2, r2, ip
   8800c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   88010:	430a      	orrs	r2, r1
   88012:	f1ac 0108 	sub.w	r1, ip, #8
   88016:	60e1      	str	r1, [r4, #12]
   88018:	f8c4 8008 	str.w	r8, [r4, #8]
   8801c:	607a      	str	r2, [r7, #4]
   8801e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   88022:	f8c8 400c 	str.w	r4, [r8, #12]
   88026:	2401      	movs	r4, #1
   88028:	1083      	asrs	r3, r0, #2
   8802a:	409c      	lsls	r4, r3
   8802c:	4294      	cmp	r4, r2
   8802e:	d87d      	bhi.n	8812c <_malloc_r+0x1d0>
   88030:	4214      	tst	r4, r2
   88032:	d106      	bne.n	88042 <_malloc_r+0xe6>
   88034:	f020 0003 	bic.w	r0, r0, #3
   88038:	0064      	lsls	r4, r4, #1
   8803a:	4214      	tst	r4, r2
   8803c:	f100 0004 	add.w	r0, r0, #4
   88040:	d0fa      	beq.n	88038 <_malloc_r+0xdc>
   88042:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   88046:	46cc      	mov	ip, r9
   88048:	4680      	mov	r8, r0
   8804a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8804e:	459c      	cmp	ip, r3
   88050:	d107      	bne.n	88062 <_malloc_r+0x106>
   88052:	e15f      	b.n	88314 <_malloc_r+0x3b8>
   88054:	2a00      	cmp	r2, #0
   88056:	f280 816d 	bge.w	88334 <_malloc_r+0x3d8>
   8805a:	68db      	ldr	r3, [r3, #12]
   8805c:	459c      	cmp	ip, r3
   8805e:	f000 8159 	beq.w	88314 <_malloc_r+0x3b8>
   88062:	6859      	ldr	r1, [r3, #4]
   88064:	f021 0103 	bic.w	r1, r1, #3
   88068:	1b8a      	subs	r2, r1, r6
   8806a:	2a0f      	cmp	r2, #15
   8806c:	ddf2      	ble.n	88054 <_malloc_r+0xf8>
   8806e:	68dc      	ldr	r4, [r3, #12]
   88070:	f8d3 c008 	ldr.w	ip, [r3, #8]
   88074:	f046 0801 	orr.w	r8, r6, #1
   88078:	4628      	mov	r0, r5
   8807a:	441e      	add	r6, r3
   8807c:	f042 0501 	orr.w	r5, r2, #1
   88080:	f8c3 8004 	str.w	r8, [r3, #4]
   88084:	f8cc 400c 	str.w	r4, [ip, #12]
   88088:	f8c4 c008 	str.w	ip, [r4, #8]
   8808c:	617e      	str	r6, [r7, #20]
   8808e:	613e      	str	r6, [r7, #16]
   88090:	f8c6 e00c 	str.w	lr, [r6, #12]
   88094:	f8c6 e008 	str.w	lr, [r6, #8]
   88098:	6075      	str	r5, [r6, #4]
   8809a:	505a      	str	r2, [r3, r1]
   8809c:	9300      	str	r3, [sp, #0]
   8809e:	f000 fac1 	bl	88624 <__malloc_unlock>
   880a2:	9b00      	ldr	r3, [sp, #0]
   880a4:	f103 0408 	add.w	r4, r3, #8
   880a8:	e01e      	b.n	880e8 <_malloc_r+0x18c>
   880aa:	2910      	cmp	r1, #16
   880ac:	d820      	bhi.n	880f0 <_malloc_r+0x194>
   880ae:	f000 fab3 	bl	88618 <__malloc_lock>
   880b2:	2610      	movs	r6, #16
   880b4:	2318      	movs	r3, #24
   880b6:	2002      	movs	r0, #2
   880b8:	4f72      	ldr	r7, [pc, #456]	; (88284 <_malloc_r+0x328>)
   880ba:	443b      	add	r3, r7
   880bc:	685c      	ldr	r4, [r3, #4]
   880be:	f1a3 0208 	sub.w	r2, r3, #8
   880c2:	4294      	cmp	r4, r2
   880c4:	f000 812f 	beq.w	88326 <_malloc_r+0x3ca>
   880c8:	6863      	ldr	r3, [r4, #4]
   880ca:	68e1      	ldr	r1, [r4, #12]
   880cc:	f023 0303 	bic.w	r3, r3, #3
   880d0:	4423      	add	r3, r4
   880d2:	685a      	ldr	r2, [r3, #4]
   880d4:	68a6      	ldr	r6, [r4, #8]
   880d6:	f042 0201 	orr.w	r2, r2, #1
   880da:	60f1      	str	r1, [r6, #12]
   880dc:	4628      	mov	r0, r5
   880de:	608e      	str	r6, [r1, #8]
   880e0:	605a      	str	r2, [r3, #4]
   880e2:	f000 fa9f 	bl	88624 <__malloc_unlock>
   880e6:	3408      	adds	r4, #8
   880e8:	4620      	mov	r0, r4
   880ea:	b003      	add	sp, #12
   880ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   880f0:	2400      	movs	r4, #0
   880f2:	230c      	movs	r3, #12
   880f4:	4620      	mov	r0, r4
   880f6:	602b      	str	r3, [r5, #0]
   880f8:	b003      	add	sp, #12
   880fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   880fe:	2040      	movs	r0, #64	; 0x40
   88100:	f44f 7100 	mov.w	r1, #512	; 0x200
   88104:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   88108:	e74a      	b.n	87fa0 <_malloc_r+0x44>
   8810a:	4423      	add	r3, r4
   8810c:	685a      	ldr	r2, [r3, #4]
   8810e:	68e1      	ldr	r1, [r4, #12]
   88110:	e7e0      	b.n	880d4 <_malloc_r+0x178>
   88112:	4423      	add	r3, r4
   88114:	685a      	ldr	r2, [r3, #4]
   88116:	4628      	mov	r0, r5
   88118:	f042 0201 	orr.w	r2, r2, #1
   8811c:	605a      	str	r2, [r3, #4]
   8811e:	3408      	adds	r4, #8
   88120:	f000 fa80 	bl	88624 <__malloc_unlock>
   88124:	4620      	mov	r0, r4
   88126:	b003      	add	sp, #12
   88128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8812c:	68bc      	ldr	r4, [r7, #8]
   8812e:	6863      	ldr	r3, [r4, #4]
   88130:	f023 0803 	bic.w	r8, r3, #3
   88134:	45b0      	cmp	r8, r6
   88136:	d304      	bcc.n	88142 <_malloc_r+0x1e6>
   88138:	eba8 0306 	sub.w	r3, r8, r6
   8813c:	2b0f      	cmp	r3, #15
   8813e:	f300 8085 	bgt.w	8824c <_malloc_r+0x2f0>
   88142:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8829c <_malloc_r+0x340>
   88146:	4b50      	ldr	r3, [pc, #320]	; (88288 <_malloc_r+0x32c>)
   88148:	f8d9 2000 	ldr.w	r2, [r9]
   8814c:	681b      	ldr	r3, [r3, #0]
   8814e:	3201      	adds	r2, #1
   88150:	4433      	add	r3, r6
   88152:	eb04 0a08 	add.w	sl, r4, r8
   88156:	f000 8154 	beq.w	88402 <_malloc_r+0x4a6>
   8815a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8815e:	330f      	adds	r3, #15
   88160:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   88164:	f02b 0b0f 	bic.w	fp, fp, #15
   88168:	4659      	mov	r1, fp
   8816a:	4628      	mov	r0, r5
   8816c:	f000 fd5c 	bl	88c28 <_sbrk_r>
   88170:	1c41      	adds	r1, r0, #1
   88172:	4602      	mov	r2, r0
   88174:	f000 80fb 	beq.w	8836e <_malloc_r+0x412>
   88178:	4582      	cmp	sl, r0
   8817a:	f200 80f6 	bhi.w	8836a <_malloc_r+0x40e>
   8817e:	4b43      	ldr	r3, [pc, #268]	; (8828c <_malloc_r+0x330>)
   88180:	6819      	ldr	r1, [r3, #0]
   88182:	4459      	add	r1, fp
   88184:	6019      	str	r1, [r3, #0]
   88186:	f000 814c 	beq.w	88422 <_malloc_r+0x4c6>
   8818a:	f8d9 0000 	ldr.w	r0, [r9]
   8818e:	3001      	adds	r0, #1
   88190:	bf1b      	ittet	ne
   88192:	eba2 0a0a 	subne.w	sl, r2, sl
   88196:	4451      	addne	r1, sl
   88198:	f8c9 2000 	streq.w	r2, [r9]
   8819c:	6019      	strne	r1, [r3, #0]
   8819e:	f012 0107 	ands.w	r1, r2, #7
   881a2:	f000 8114 	beq.w	883ce <_malloc_r+0x472>
   881a6:	f1c1 0008 	rsb	r0, r1, #8
   881aa:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   881ae:	4402      	add	r2, r0
   881b0:	3108      	adds	r1, #8
   881b2:	eb02 090b 	add.w	r9, r2, fp
   881b6:	f3c9 090b 	ubfx	r9, r9, #0, #12
   881ba:	eba1 0909 	sub.w	r9, r1, r9
   881be:	4649      	mov	r1, r9
   881c0:	4628      	mov	r0, r5
   881c2:	9301      	str	r3, [sp, #4]
   881c4:	9200      	str	r2, [sp, #0]
   881c6:	f000 fd2f 	bl	88c28 <_sbrk_r>
   881ca:	1c43      	adds	r3, r0, #1
   881cc:	e89d 000c 	ldmia.w	sp, {r2, r3}
   881d0:	f000 8142 	beq.w	88458 <_malloc_r+0x4fc>
   881d4:	1a80      	subs	r0, r0, r2
   881d6:	4448      	add	r0, r9
   881d8:	f040 0001 	orr.w	r0, r0, #1
   881dc:	6819      	ldr	r1, [r3, #0]
   881de:	42bc      	cmp	r4, r7
   881e0:	4449      	add	r1, r9
   881e2:	60ba      	str	r2, [r7, #8]
   881e4:	6019      	str	r1, [r3, #0]
   881e6:	6050      	str	r0, [r2, #4]
   881e8:	d017      	beq.n	8821a <_malloc_r+0x2be>
   881ea:	f1b8 0f0f 	cmp.w	r8, #15
   881ee:	f240 80fa 	bls.w	883e6 <_malloc_r+0x48a>
   881f2:	f04f 0c05 	mov.w	ip, #5
   881f6:	6862      	ldr	r2, [r4, #4]
   881f8:	f1a8 000c 	sub.w	r0, r8, #12
   881fc:	f020 0007 	bic.w	r0, r0, #7
   88200:	f002 0201 	and.w	r2, r2, #1
   88204:	eb04 0e00 	add.w	lr, r4, r0
   88208:	4302      	orrs	r2, r0
   8820a:	280f      	cmp	r0, #15
   8820c:	6062      	str	r2, [r4, #4]
   8820e:	f8ce c004 	str.w	ip, [lr, #4]
   88212:	f8ce c008 	str.w	ip, [lr, #8]
   88216:	f200 8116 	bhi.w	88446 <_malloc_r+0x4ea>
   8821a:	4b1d      	ldr	r3, [pc, #116]	; (88290 <_malloc_r+0x334>)
   8821c:	68bc      	ldr	r4, [r7, #8]
   8821e:	681a      	ldr	r2, [r3, #0]
   88220:	4291      	cmp	r1, r2
   88222:	bf88      	it	hi
   88224:	6019      	strhi	r1, [r3, #0]
   88226:	4b1b      	ldr	r3, [pc, #108]	; (88294 <_malloc_r+0x338>)
   88228:	681a      	ldr	r2, [r3, #0]
   8822a:	4291      	cmp	r1, r2
   8822c:	6862      	ldr	r2, [r4, #4]
   8822e:	bf88      	it	hi
   88230:	6019      	strhi	r1, [r3, #0]
   88232:	f022 0203 	bic.w	r2, r2, #3
   88236:	4296      	cmp	r6, r2
   88238:	eba2 0306 	sub.w	r3, r2, r6
   8823c:	d801      	bhi.n	88242 <_malloc_r+0x2e6>
   8823e:	2b0f      	cmp	r3, #15
   88240:	dc04      	bgt.n	8824c <_malloc_r+0x2f0>
   88242:	4628      	mov	r0, r5
   88244:	f000 f9ee 	bl	88624 <__malloc_unlock>
   88248:	2400      	movs	r4, #0
   8824a:	e74d      	b.n	880e8 <_malloc_r+0x18c>
   8824c:	f046 0201 	orr.w	r2, r6, #1
   88250:	f043 0301 	orr.w	r3, r3, #1
   88254:	4426      	add	r6, r4
   88256:	6062      	str	r2, [r4, #4]
   88258:	4628      	mov	r0, r5
   8825a:	60be      	str	r6, [r7, #8]
   8825c:	3408      	adds	r4, #8
   8825e:	6073      	str	r3, [r6, #4]
   88260:	f000 f9e0 	bl	88624 <__malloc_unlock>
   88264:	4620      	mov	r0, r4
   88266:	b003      	add	sp, #12
   88268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8826c:	2b14      	cmp	r3, #20
   8826e:	d970      	bls.n	88352 <_malloc_r+0x3f6>
   88270:	2b54      	cmp	r3, #84	; 0x54
   88272:	f200 80a2 	bhi.w	883ba <_malloc_r+0x45e>
   88276:	0b33      	lsrs	r3, r6, #12
   88278:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8827c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   88280:	00c1      	lsls	r1, r0, #3
   88282:	e68d      	b.n	87fa0 <_malloc_r+0x44>
   88284:	200705d4 	.word	0x200705d4
   88288:	20070e08 	.word	0x20070e08
   8828c:	20070dd8 	.word	0x20070dd8
   88290:	20070e00 	.word	0x20070e00
   88294:	20070e04 	.word	0x20070e04
   88298:	200705dc 	.word	0x200705dc
   8829c:	200709dc 	.word	0x200709dc
   882a0:	0a5a      	lsrs	r2, r3, #9
   882a2:	2a04      	cmp	r2, #4
   882a4:	d95b      	bls.n	8835e <_malloc_r+0x402>
   882a6:	2a14      	cmp	r2, #20
   882a8:	f200 80ae 	bhi.w	88408 <_malloc_r+0x4ac>
   882ac:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   882b0:	00c9      	lsls	r1, r1, #3
   882b2:	325b      	adds	r2, #91	; 0x5b
   882b4:	eb07 0c01 	add.w	ip, r7, r1
   882b8:	5879      	ldr	r1, [r7, r1]
   882ba:	f1ac 0c08 	sub.w	ip, ip, #8
   882be:	458c      	cmp	ip, r1
   882c0:	f000 8088 	beq.w	883d4 <_malloc_r+0x478>
   882c4:	684a      	ldr	r2, [r1, #4]
   882c6:	f022 0203 	bic.w	r2, r2, #3
   882ca:	4293      	cmp	r3, r2
   882cc:	d273      	bcs.n	883b6 <_malloc_r+0x45a>
   882ce:	6889      	ldr	r1, [r1, #8]
   882d0:	458c      	cmp	ip, r1
   882d2:	d1f7      	bne.n	882c4 <_malloc_r+0x368>
   882d4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   882d8:	687a      	ldr	r2, [r7, #4]
   882da:	60e3      	str	r3, [r4, #12]
   882dc:	f8c4 c008 	str.w	ip, [r4, #8]
   882e0:	609c      	str	r4, [r3, #8]
   882e2:	f8cc 400c 	str.w	r4, [ip, #12]
   882e6:	e69e      	b.n	88026 <_malloc_r+0xca>
   882e8:	f046 0c01 	orr.w	ip, r6, #1
   882ec:	f042 0101 	orr.w	r1, r2, #1
   882f0:	4426      	add	r6, r4
   882f2:	f8c4 c004 	str.w	ip, [r4, #4]
   882f6:	4628      	mov	r0, r5
   882f8:	617e      	str	r6, [r7, #20]
   882fa:	613e      	str	r6, [r7, #16]
   882fc:	f8c6 e00c 	str.w	lr, [r6, #12]
   88300:	f8c6 e008 	str.w	lr, [r6, #8]
   88304:	6071      	str	r1, [r6, #4]
   88306:	50e2      	str	r2, [r4, r3]
   88308:	f000 f98c 	bl	88624 <__malloc_unlock>
   8830c:	3408      	adds	r4, #8
   8830e:	e6eb      	b.n	880e8 <_malloc_r+0x18c>
   88310:	687a      	ldr	r2, [r7, #4]
   88312:	e688      	b.n	88026 <_malloc_r+0xca>
   88314:	f108 0801 	add.w	r8, r8, #1
   88318:	f018 0f03 	tst.w	r8, #3
   8831c:	f10c 0c08 	add.w	ip, ip, #8
   88320:	f47f ae93 	bne.w	8804a <_malloc_r+0xee>
   88324:	e02d      	b.n	88382 <_malloc_r+0x426>
   88326:	68dc      	ldr	r4, [r3, #12]
   88328:	42a3      	cmp	r3, r4
   8832a:	bf08      	it	eq
   8832c:	3002      	addeq	r0, #2
   8832e:	f43f ae4b 	beq.w	87fc8 <_malloc_r+0x6c>
   88332:	e6c9      	b.n	880c8 <_malloc_r+0x16c>
   88334:	461c      	mov	r4, r3
   88336:	4419      	add	r1, r3
   88338:	684a      	ldr	r2, [r1, #4]
   8833a:	68db      	ldr	r3, [r3, #12]
   8833c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   88340:	f042 0201 	orr.w	r2, r2, #1
   88344:	604a      	str	r2, [r1, #4]
   88346:	4628      	mov	r0, r5
   88348:	60f3      	str	r3, [r6, #12]
   8834a:	609e      	str	r6, [r3, #8]
   8834c:	f000 f96a 	bl	88624 <__malloc_unlock>
   88350:	e6ca      	b.n	880e8 <_malloc_r+0x18c>
   88352:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   88356:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8835a:	00c1      	lsls	r1, r0, #3
   8835c:	e620      	b.n	87fa0 <_malloc_r+0x44>
   8835e:	099a      	lsrs	r2, r3, #6
   88360:	f102 0139 	add.w	r1, r2, #57	; 0x39
   88364:	00c9      	lsls	r1, r1, #3
   88366:	3238      	adds	r2, #56	; 0x38
   88368:	e7a4      	b.n	882b4 <_malloc_r+0x358>
   8836a:	42bc      	cmp	r4, r7
   8836c:	d054      	beq.n	88418 <_malloc_r+0x4bc>
   8836e:	68bc      	ldr	r4, [r7, #8]
   88370:	6862      	ldr	r2, [r4, #4]
   88372:	f022 0203 	bic.w	r2, r2, #3
   88376:	e75e      	b.n	88236 <_malloc_r+0x2da>
   88378:	f859 3908 	ldr.w	r3, [r9], #-8
   8837c:	4599      	cmp	r9, r3
   8837e:	f040 8086 	bne.w	8848e <_malloc_r+0x532>
   88382:	f010 0f03 	tst.w	r0, #3
   88386:	f100 30ff 	add.w	r0, r0, #4294967295
   8838a:	d1f5      	bne.n	88378 <_malloc_r+0x41c>
   8838c:	687b      	ldr	r3, [r7, #4]
   8838e:	ea23 0304 	bic.w	r3, r3, r4
   88392:	607b      	str	r3, [r7, #4]
   88394:	0064      	lsls	r4, r4, #1
   88396:	429c      	cmp	r4, r3
   88398:	f63f aec8 	bhi.w	8812c <_malloc_r+0x1d0>
   8839c:	2c00      	cmp	r4, #0
   8839e:	f43f aec5 	beq.w	8812c <_malloc_r+0x1d0>
   883a2:	421c      	tst	r4, r3
   883a4:	4640      	mov	r0, r8
   883a6:	f47f ae4c 	bne.w	88042 <_malloc_r+0xe6>
   883aa:	0064      	lsls	r4, r4, #1
   883ac:	421c      	tst	r4, r3
   883ae:	f100 0004 	add.w	r0, r0, #4
   883b2:	d0fa      	beq.n	883aa <_malloc_r+0x44e>
   883b4:	e645      	b.n	88042 <_malloc_r+0xe6>
   883b6:	468c      	mov	ip, r1
   883b8:	e78c      	b.n	882d4 <_malloc_r+0x378>
   883ba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   883be:	d815      	bhi.n	883ec <_malloc_r+0x490>
   883c0:	0bf3      	lsrs	r3, r6, #15
   883c2:	f103 0078 	add.w	r0, r3, #120	; 0x78
   883c6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   883ca:	00c1      	lsls	r1, r0, #3
   883cc:	e5e8      	b.n	87fa0 <_malloc_r+0x44>
   883ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   883d2:	e6ee      	b.n	881b2 <_malloc_r+0x256>
   883d4:	2101      	movs	r1, #1
   883d6:	687b      	ldr	r3, [r7, #4]
   883d8:	1092      	asrs	r2, r2, #2
   883da:	fa01 f202 	lsl.w	r2, r1, r2
   883de:	431a      	orrs	r2, r3
   883e0:	607a      	str	r2, [r7, #4]
   883e2:	4663      	mov	r3, ip
   883e4:	e779      	b.n	882da <_malloc_r+0x37e>
   883e6:	2301      	movs	r3, #1
   883e8:	6053      	str	r3, [r2, #4]
   883ea:	e72a      	b.n	88242 <_malloc_r+0x2e6>
   883ec:	f240 5254 	movw	r2, #1364	; 0x554
   883f0:	4293      	cmp	r3, r2
   883f2:	d822      	bhi.n	8843a <_malloc_r+0x4de>
   883f4:	0cb3      	lsrs	r3, r6, #18
   883f6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   883fa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   883fe:	00c1      	lsls	r1, r0, #3
   88400:	e5ce      	b.n	87fa0 <_malloc_r+0x44>
   88402:	f103 0b10 	add.w	fp, r3, #16
   88406:	e6af      	b.n	88168 <_malloc_r+0x20c>
   88408:	2a54      	cmp	r2, #84	; 0x54
   8840a:	d829      	bhi.n	88460 <_malloc_r+0x504>
   8840c:	0b1a      	lsrs	r2, r3, #12
   8840e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   88412:	00c9      	lsls	r1, r1, #3
   88414:	326e      	adds	r2, #110	; 0x6e
   88416:	e74d      	b.n	882b4 <_malloc_r+0x358>
   88418:	4b20      	ldr	r3, [pc, #128]	; (8849c <_malloc_r+0x540>)
   8841a:	6819      	ldr	r1, [r3, #0]
   8841c:	4459      	add	r1, fp
   8841e:	6019      	str	r1, [r3, #0]
   88420:	e6b3      	b.n	8818a <_malloc_r+0x22e>
   88422:	f3ca 000b 	ubfx	r0, sl, #0, #12
   88426:	2800      	cmp	r0, #0
   88428:	f47f aeaf 	bne.w	8818a <_malloc_r+0x22e>
   8842c:	eb08 030b 	add.w	r3, r8, fp
   88430:	68ba      	ldr	r2, [r7, #8]
   88432:	f043 0301 	orr.w	r3, r3, #1
   88436:	6053      	str	r3, [r2, #4]
   88438:	e6ef      	b.n	8821a <_malloc_r+0x2be>
   8843a:	207f      	movs	r0, #127	; 0x7f
   8843c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   88440:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   88444:	e5ac      	b.n	87fa0 <_malloc_r+0x44>
   88446:	f104 0108 	add.w	r1, r4, #8
   8844a:	4628      	mov	r0, r5
   8844c:	9300      	str	r3, [sp, #0]
   8844e:	f000 fd5d 	bl	88f0c <_free_r>
   88452:	9b00      	ldr	r3, [sp, #0]
   88454:	6819      	ldr	r1, [r3, #0]
   88456:	e6e0      	b.n	8821a <_malloc_r+0x2be>
   88458:	2001      	movs	r0, #1
   8845a:	f04f 0900 	mov.w	r9, #0
   8845e:	e6bd      	b.n	881dc <_malloc_r+0x280>
   88460:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   88464:	d805      	bhi.n	88472 <_malloc_r+0x516>
   88466:	0bda      	lsrs	r2, r3, #15
   88468:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8846c:	00c9      	lsls	r1, r1, #3
   8846e:	3277      	adds	r2, #119	; 0x77
   88470:	e720      	b.n	882b4 <_malloc_r+0x358>
   88472:	f240 5154 	movw	r1, #1364	; 0x554
   88476:	428a      	cmp	r2, r1
   88478:	d805      	bhi.n	88486 <_malloc_r+0x52a>
   8847a:	0c9a      	lsrs	r2, r3, #18
   8847c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   88480:	00c9      	lsls	r1, r1, #3
   88482:	327c      	adds	r2, #124	; 0x7c
   88484:	e716      	b.n	882b4 <_malloc_r+0x358>
   88486:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8848a:	227e      	movs	r2, #126	; 0x7e
   8848c:	e712      	b.n	882b4 <_malloc_r+0x358>
   8848e:	687b      	ldr	r3, [r7, #4]
   88490:	e780      	b.n	88394 <_malloc_r+0x438>
   88492:	08f0      	lsrs	r0, r6, #3
   88494:	f106 0308 	add.w	r3, r6, #8
   88498:	e60e      	b.n	880b8 <_malloc_r+0x15c>
   8849a:	bf00      	nop
   8849c:	20070dd8 	.word	0x20070dd8

000884a0 <memchr>:
   884a0:	0783      	lsls	r3, r0, #30
   884a2:	b470      	push	{r4, r5, r6}
   884a4:	b2cd      	uxtb	r5, r1
   884a6:	d03d      	beq.n	88524 <memchr+0x84>
   884a8:	1e54      	subs	r4, r2, #1
   884aa:	b30a      	cbz	r2, 884f0 <memchr+0x50>
   884ac:	7803      	ldrb	r3, [r0, #0]
   884ae:	42ab      	cmp	r3, r5
   884b0:	d01f      	beq.n	884f2 <memchr+0x52>
   884b2:	1c43      	adds	r3, r0, #1
   884b4:	e005      	b.n	884c2 <memchr+0x22>
   884b6:	f114 34ff 	adds.w	r4, r4, #4294967295
   884ba:	d319      	bcc.n	884f0 <memchr+0x50>
   884bc:	7802      	ldrb	r2, [r0, #0]
   884be:	42aa      	cmp	r2, r5
   884c0:	d017      	beq.n	884f2 <memchr+0x52>
   884c2:	f013 0f03 	tst.w	r3, #3
   884c6:	4618      	mov	r0, r3
   884c8:	f103 0301 	add.w	r3, r3, #1
   884cc:	d1f3      	bne.n	884b6 <memchr+0x16>
   884ce:	2c03      	cmp	r4, #3
   884d0:	d811      	bhi.n	884f6 <memchr+0x56>
   884d2:	b34c      	cbz	r4, 88528 <memchr+0x88>
   884d4:	7803      	ldrb	r3, [r0, #0]
   884d6:	42ab      	cmp	r3, r5
   884d8:	d00b      	beq.n	884f2 <memchr+0x52>
   884da:	4404      	add	r4, r0
   884dc:	1c43      	adds	r3, r0, #1
   884de:	e002      	b.n	884e6 <memchr+0x46>
   884e0:	7802      	ldrb	r2, [r0, #0]
   884e2:	42aa      	cmp	r2, r5
   884e4:	d005      	beq.n	884f2 <memchr+0x52>
   884e6:	429c      	cmp	r4, r3
   884e8:	4618      	mov	r0, r3
   884ea:	f103 0301 	add.w	r3, r3, #1
   884ee:	d1f7      	bne.n	884e0 <memchr+0x40>
   884f0:	2000      	movs	r0, #0
   884f2:	bc70      	pop	{r4, r5, r6}
   884f4:	4770      	bx	lr
   884f6:	0209      	lsls	r1, r1, #8
   884f8:	b289      	uxth	r1, r1
   884fa:	4329      	orrs	r1, r5
   884fc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   88500:	6803      	ldr	r3, [r0, #0]
   88502:	4606      	mov	r6, r0
   88504:	404b      	eors	r3, r1
   88506:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8850a:	ea22 0303 	bic.w	r3, r2, r3
   8850e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   88512:	f100 0004 	add.w	r0, r0, #4
   88516:	d103      	bne.n	88520 <memchr+0x80>
   88518:	3c04      	subs	r4, #4
   8851a:	2c03      	cmp	r4, #3
   8851c:	d8f0      	bhi.n	88500 <memchr+0x60>
   8851e:	e7d8      	b.n	884d2 <memchr+0x32>
   88520:	4630      	mov	r0, r6
   88522:	e7d7      	b.n	884d4 <memchr+0x34>
   88524:	4614      	mov	r4, r2
   88526:	e7d2      	b.n	884ce <memchr+0x2e>
   88528:	4620      	mov	r0, r4
   8852a:	e7e2      	b.n	884f2 <memchr+0x52>

0008852c <memcpy>:
   8852c:	4684      	mov	ip, r0
   8852e:	ea41 0300 	orr.w	r3, r1, r0
   88532:	f013 0303 	ands.w	r3, r3, #3
   88536:	d149      	bne.n	885cc <memcpy+0xa0>
   88538:	3a40      	subs	r2, #64	; 0x40
   8853a:	d323      	bcc.n	88584 <memcpy+0x58>
   8853c:	680b      	ldr	r3, [r1, #0]
   8853e:	6003      	str	r3, [r0, #0]
   88540:	684b      	ldr	r3, [r1, #4]
   88542:	6043      	str	r3, [r0, #4]
   88544:	688b      	ldr	r3, [r1, #8]
   88546:	6083      	str	r3, [r0, #8]
   88548:	68cb      	ldr	r3, [r1, #12]
   8854a:	60c3      	str	r3, [r0, #12]
   8854c:	690b      	ldr	r3, [r1, #16]
   8854e:	6103      	str	r3, [r0, #16]
   88550:	694b      	ldr	r3, [r1, #20]
   88552:	6143      	str	r3, [r0, #20]
   88554:	698b      	ldr	r3, [r1, #24]
   88556:	6183      	str	r3, [r0, #24]
   88558:	69cb      	ldr	r3, [r1, #28]
   8855a:	61c3      	str	r3, [r0, #28]
   8855c:	6a0b      	ldr	r3, [r1, #32]
   8855e:	6203      	str	r3, [r0, #32]
   88560:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   88562:	6243      	str	r3, [r0, #36]	; 0x24
   88564:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   88566:	6283      	str	r3, [r0, #40]	; 0x28
   88568:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8856a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8856c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8856e:	6303      	str	r3, [r0, #48]	; 0x30
   88570:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   88572:	6343      	str	r3, [r0, #52]	; 0x34
   88574:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   88576:	6383      	str	r3, [r0, #56]	; 0x38
   88578:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8857a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8857c:	3040      	adds	r0, #64	; 0x40
   8857e:	3140      	adds	r1, #64	; 0x40
   88580:	3a40      	subs	r2, #64	; 0x40
   88582:	d2db      	bcs.n	8853c <memcpy+0x10>
   88584:	3230      	adds	r2, #48	; 0x30
   88586:	d30b      	bcc.n	885a0 <memcpy+0x74>
   88588:	680b      	ldr	r3, [r1, #0]
   8858a:	6003      	str	r3, [r0, #0]
   8858c:	684b      	ldr	r3, [r1, #4]
   8858e:	6043      	str	r3, [r0, #4]
   88590:	688b      	ldr	r3, [r1, #8]
   88592:	6083      	str	r3, [r0, #8]
   88594:	68cb      	ldr	r3, [r1, #12]
   88596:	60c3      	str	r3, [r0, #12]
   88598:	3010      	adds	r0, #16
   8859a:	3110      	adds	r1, #16
   8859c:	3a10      	subs	r2, #16
   8859e:	d2f3      	bcs.n	88588 <memcpy+0x5c>
   885a0:	320c      	adds	r2, #12
   885a2:	d305      	bcc.n	885b0 <memcpy+0x84>
   885a4:	f851 3b04 	ldr.w	r3, [r1], #4
   885a8:	f840 3b04 	str.w	r3, [r0], #4
   885ac:	3a04      	subs	r2, #4
   885ae:	d2f9      	bcs.n	885a4 <memcpy+0x78>
   885b0:	3204      	adds	r2, #4
   885b2:	d008      	beq.n	885c6 <memcpy+0x9a>
   885b4:	07d2      	lsls	r2, r2, #31
   885b6:	bf1c      	itt	ne
   885b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   885bc:	f800 3b01 	strbne.w	r3, [r0], #1
   885c0:	d301      	bcc.n	885c6 <memcpy+0x9a>
   885c2:	880b      	ldrh	r3, [r1, #0]
   885c4:	8003      	strh	r3, [r0, #0]
   885c6:	4660      	mov	r0, ip
   885c8:	4770      	bx	lr
   885ca:	bf00      	nop
   885cc:	2a08      	cmp	r2, #8
   885ce:	d313      	bcc.n	885f8 <memcpy+0xcc>
   885d0:	078b      	lsls	r3, r1, #30
   885d2:	d0b1      	beq.n	88538 <memcpy+0xc>
   885d4:	f010 0303 	ands.w	r3, r0, #3
   885d8:	d0ae      	beq.n	88538 <memcpy+0xc>
   885da:	f1c3 0304 	rsb	r3, r3, #4
   885de:	1ad2      	subs	r2, r2, r3
   885e0:	07db      	lsls	r3, r3, #31
   885e2:	bf1c      	itt	ne
   885e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   885e8:	f800 3b01 	strbne.w	r3, [r0], #1
   885ec:	d3a4      	bcc.n	88538 <memcpy+0xc>
   885ee:	f831 3b02 	ldrh.w	r3, [r1], #2
   885f2:	f820 3b02 	strh.w	r3, [r0], #2
   885f6:	e79f      	b.n	88538 <memcpy+0xc>
   885f8:	3a04      	subs	r2, #4
   885fa:	d3d9      	bcc.n	885b0 <memcpy+0x84>
   885fc:	3a01      	subs	r2, #1
   885fe:	f811 3b01 	ldrb.w	r3, [r1], #1
   88602:	f800 3b01 	strb.w	r3, [r0], #1
   88606:	d2f9      	bcs.n	885fc <memcpy+0xd0>
   88608:	780b      	ldrb	r3, [r1, #0]
   8860a:	7003      	strb	r3, [r0, #0]
   8860c:	784b      	ldrb	r3, [r1, #1]
   8860e:	7043      	strb	r3, [r0, #1]
   88610:	788b      	ldrb	r3, [r1, #2]
   88612:	7083      	strb	r3, [r0, #2]
   88614:	4660      	mov	r0, ip
   88616:	4770      	bx	lr

00088618 <__malloc_lock>:
   88618:	4801      	ldr	r0, [pc, #4]	; (88620 <__malloc_lock+0x8>)
   8861a:	f7ff bc9b 	b.w	87f54 <__retarget_lock_acquire_recursive>
   8861e:	bf00      	nop
   88620:	20070fec 	.word	0x20070fec

00088624 <__malloc_unlock>:
   88624:	4801      	ldr	r0, [pc, #4]	; (8862c <__malloc_unlock+0x8>)
   88626:	f7ff bc97 	b.w	87f58 <__retarget_lock_release_recursive>
   8862a:	bf00      	nop
   8862c:	20070fec 	.word	0x20070fec

00088630 <_Balloc>:
   88630:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88632:	b570      	push	{r4, r5, r6, lr}
   88634:	4605      	mov	r5, r0
   88636:	460c      	mov	r4, r1
   88638:	b14b      	cbz	r3, 8864e <_Balloc+0x1e>
   8863a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8863e:	b180      	cbz	r0, 88662 <_Balloc+0x32>
   88640:	6802      	ldr	r2, [r0, #0]
   88642:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   88646:	2300      	movs	r3, #0
   88648:	6103      	str	r3, [r0, #16]
   8864a:	60c3      	str	r3, [r0, #12]
   8864c:	bd70      	pop	{r4, r5, r6, pc}
   8864e:	2221      	movs	r2, #33	; 0x21
   88650:	2104      	movs	r1, #4
   88652:	f000 fbdb 	bl	88e0c <_calloc_r>
   88656:	64e8      	str	r0, [r5, #76]	; 0x4c
   88658:	4603      	mov	r3, r0
   8865a:	2800      	cmp	r0, #0
   8865c:	d1ed      	bne.n	8863a <_Balloc+0xa>
   8865e:	2000      	movs	r0, #0
   88660:	bd70      	pop	{r4, r5, r6, pc}
   88662:	2101      	movs	r1, #1
   88664:	fa01 f604 	lsl.w	r6, r1, r4
   88668:	1d72      	adds	r2, r6, #5
   8866a:	4628      	mov	r0, r5
   8866c:	0092      	lsls	r2, r2, #2
   8866e:	f000 fbcd 	bl	88e0c <_calloc_r>
   88672:	2800      	cmp	r0, #0
   88674:	d0f3      	beq.n	8865e <_Balloc+0x2e>
   88676:	6044      	str	r4, [r0, #4]
   88678:	6086      	str	r6, [r0, #8]
   8867a:	e7e4      	b.n	88646 <_Balloc+0x16>

0008867c <_Bfree>:
   8867c:	b131      	cbz	r1, 8868c <_Bfree+0x10>
   8867e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88680:	684a      	ldr	r2, [r1, #4]
   88682:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   88686:	6008      	str	r0, [r1, #0]
   88688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8868c:	4770      	bx	lr
   8868e:	bf00      	nop

00088690 <__multadd>:
   88690:	b5f0      	push	{r4, r5, r6, r7, lr}
   88692:	460c      	mov	r4, r1
   88694:	4605      	mov	r5, r0
   88696:	f04f 0e00 	mov.w	lr, #0
   8869a:	690e      	ldr	r6, [r1, #16]
   8869c:	b083      	sub	sp, #12
   8869e:	f101 0714 	add.w	r7, r1, #20
   886a2:	6838      	ldr	r0, [r7, #0]
   886a4:	f10e 0e01 	add.w	lr, lr, #1
   886a8:	b281      	uxth	r1, r0
   886aa:	fb02 3301 	mla	r3, r2, r1, r3
   886ae:	0c01      	lsrs	r1, r0, #16
   886b0:	0c18      	lsrs	r0, r3, #16
   886b2:	fb02 0101 	mla	r1, r2, r1, r0
   886b6:	b29b      	uxth	r3, r3
   886b8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   886bc:	4576      	cmp	r6, lr
   886be:	f847 3b04 	str.w	r3, [r7], #4
   886c2:	ea4f 4311 	mov.w	r3, r1, lsr #16
   886c6:	dcec      	bgt.n	886a2 <__multadd+0x12>
   886c8:	b13b      	cbz	r3, 886da <__multadd+0x4a>
   886ca:	68a2      	ldr	r2, [r4, #8]
   886cc:	4296      	cmp	r6, r2
   886ce:	da07      	bge.n	886e0 <__multadd+0x50>
   886d0:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   886d4:	3601      	adds	r6, #1
   886d6:	6153      	str	r3, [r2, #20]
   886d8:	6126      	str	r6, [r4, #16]
   886da:	4620      	mov	r0, r4
   886dc:	b003      	add	sp, #12
   886de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   886e0:	6861      	ldr	r1, [r4, #4]
   886e2:	4628      	mov	r0, r5
   886e4:	3101      	adds	r1, #1
   886e6:	9301      	str	r3, [sp, #4]
   886e8:	f7ff ffa2 	bl	88630 <_Balloc>
   886ec:	4607      	mov	r7, r0
   886ee:	6922      	ldr	r2, [r4, #16]
   886f0:	f104 010c 	add.w	r1, r4, #12
   886f4:	3202      	adds	r2, #2
   886f6:	0092      	lsls	r2, r2, #2
   886f8:	300c      	adds	r0, #12
   886fa:	f7ff ff17 	bl	8852c <memcpy>
   886fe:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   88700:	6861      	ldr	r1, [r4, #4]
   88702:	9b01      	ldr	r3, [sp, #4]
   88704:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   88708:	6020      	str	r0, [r4, #0]
   8870a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   8870e:	463c      	mov	r4, r7
   88710:	e7de      	b.n	886d0 <__multadd+0x40>
   88712:	bf00      	nop

00088714 <__hi0bits>:
   88714:	0c02      	lsrs	r2, r0, #16
   88716:	0412      	lsls	r2, r2, #16
   88718:	4603      	mov	r3, r0
   8871a:	b9b2      	cbnz	r2, 8874a <__hi0bits+0x36>
   8871c:	0403      	lsls	r3, r0, #16
   8871e:	2010      	movs	r0, #16
   88720:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   88724:	bf04      	itt	eq
   88726:	021b      	lsleq	r3, r3, #8
   88728:	3008      	addeq	r0, #8
   8872a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8872e:	bf04      	itt	eq
   88730:	011b      	lsleq	r3, r3, #4
   88732:	3004      	addeq	r0, #4
   88734:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   88738:	bf04      	itt	eq
   8873a:	009b      	lsleq	r3, r3, #2
   8873c:	3002      	addeq	r0, #2
   8873e:	2b00      	cmp	r3, #0
   88740:	db02      	blt.n	88748 <__hi0bits+0x34>
   88742:	005b      	lsls	r3, r3, #1
   88744:	d403      	bmi.n	8874e <__hi0bits+0x3a>
   88746:	2020      	movs	r0, #32
   88748:	4770      	bx	lr
   8874a:	2000      	movs	r0, #0
   8874c:	e7e8      	b.n	88720 <__hi0bits+0xc>
   8874e:	3001      	adds	r0, #1
   88750:	4770      	bx	lr
   88752:	bf00      	nop

00088754 <__lo0bits>:
   88754:	6803      	ldr	r3, [r0, #0]
   88756:	4601      	mov	r1, r0
   88758:	f013 0207 	ands.w	r2, r3, #7
   8875c:	d007      	beq.n	8876e <__lo0bits+0x1a>
   8875e:	07da      	lsls	r2, r3, #31
   88760:	d421      	bmi.n	887a6 <__lo0bits+0x52>
   88762:	0798      	lsls	r0, r3, #30
   88764:	d421      	bmi.n	887aa <__lo0bits+0x56>
   88766:	089b      	lsrs	r3, r3, #2
   88768:	600b      	str	r3, [r1, #0]
   8876a:	2002      	movs	r0, #2
   8876c:	4770      	bx	lr
   8876e:	b298      	uxth	r0, r3
   88770:	b198      	cbz	r0, 8879a <__lo0bits+0x46>
   88772:	4610      	mov	r0, r2
   88774:	f013 0fff 	tst.w	r3, #255	; 0xff
   88778:	bf04      	itt	eq
   8877a:	0a1b      	lsreq	r3, r3, #8
   8877c:	3008      	addeq	r0, #8
   8877e:	071a      	lsls	r2, r3, #28
   88780:	bf04      	itt	eq
   88782:	091b      	lsreq	r3, r3, #4
   88784:	3004      	addeq	r0, #4
   88786:	079a      	lsls	r2, r3, #30
   88788:	bf04      	itt	eq
   8878a:	089b      	lsreq	r3, r3, #2
   8878c:	3002      	addeq	r0, #2
   8878e:	07da      	lsls	r2, r3, #31
   88790:	d407      	bmi.n	887a2 <__lo0bits+0x4e>
   88792:	085b      	lsrs	r3, r3, #1
   88794:	d104      	bne.n	887a0 <__lo0bits+0x4c>
   88796:	2020      	movs	r0, #32
   88798:	4770      	bx	lr
   8879a:	0c1b      	lsrs	r3, r3, #16
   8879c:	2010      	movs	r0, #16
   8879e:	e7e9      	b.n	88774 <__lo0bits+0x20>
   887a0:	3001      	adds	r0, #1
   887a2:	600b      	str	r3, [r1, #0]
   887a4:	4770      	bx	lr
   887a6:	2000      	movs	r0, #0
   887a8:	4770      	bx	lr
   887aa:	085b      	lsrs	r3, r3, #1
   887ac:	600b      	str	r3, [r1, #0]
   887ae:	2001      	movs	r0, #1
   887b0:	4770      	bx	lr
   887b2:	bf00      	nop

000887b4 <__i2b>:
   887b4:	b510      	push	{r4, lr}
   887b6:	460c      	mov	r4, r1
   887b8:	2101      	movs	r1, #1
   887ba:	f7ff ff39 	bl	88630 <_Balloc>
   887be:	2201      	movs	r2, #1
   887c0:	6144      	str	r4, [r0, #20]
   887c2:	6102      	str	r2, [r0, #16]
   887c4:	bd10      	pop	{r4, pc}
   887c6:	bf00      	nop

000887c8 <__multiply>:
   887c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   887cc:	690c      	ldr	r4, [r1, #16]
   887ce:	6915      	ldr	r5, [r2, #16]
   887d0:	b083      	sub	sp, #12
   887d2:	42ac      	cmp	r4, r5
   887d4:	468b      	mov	fp, r1
   887d6:	4616      	mov	r6, r2
   887d8:	da04      	bge.n	887e4 <__multiply+0x1c>
   887da:	4622      	mov	r2, r4
   887dc:	46b3      	mov	fp, r6
   887de:	462c      	mov	r4, r5
   887e0:	460e      	mov	r6, r1
   887e2:	4615      	mov	r5, r2
   887e4:	f8db 3008 	ldr.w	r3, [fp, #8]
   887e8:	eb04 0805 	add.w	r8, r4, r5
   887ec:	f8db 1004 	ldr.w	r1, [fp, #4]
   887f0:	4598      	cmp	r8, r3
   887f2:	bfc8      	it	gt
   887f4:	3101      	addgt	r1, #1
   887f6:	f7ff ff1b 	bl	88630 <_Balloc>
   887fa:	f100 0914 	add.w	r9, r0, #20
   887fe:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   88802:	45d1      	cmp	r9, sl
   88804:	9000      	str	r0, [sp, #0]
   88806:	d205      	bcs.n	88814 <__multiply+0x4c>
   88808:	464b      	mov	r3, r9
   8880a:	2100      	movs	r1, #0
   8880c:	f843 1b04 	str.w	r1, [r3], #4
   88810:	459a      	cmp	sl, r3
   88812:	d8fb      	bhi.n	8880c <__multiply+0x44>
   88814:	f106 0c14 	add.w	ip, r6, #20
   88818:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   8881c:	f10b 0b14 	add.w	fp, fp, #20
   88820:	459c      	cmp	ip, r3
   88822:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   88826:	d24b      	bcs.n	888c0 <__multiply+0xf8>
   88828:	f8cd a004 	str.w	sl, [sp, #4]
   8882c:	469a      	mov	sl, r3
   8882e:	f8dc 5000 	ldr.w	r5, [ip]
   88832:	b2af      	uxth	r7, r5
   88834:	b1e7      	cbz	r7, 88870 <__multiply+0xa8>
   88836:	464d      	mov	r5, r9
   88838:	465e      	mov	r6, fp
   8883a:	2100      	movs	r1, #0
   8883c:	f856 2b04 	ldr.w	r2, [r6], #4
   88840:	6828      	ldr	r0, [r5, #0]
   88842:	b293      	uxth	r3, r2
   88844:	b284      	uxth	r4, r0
   88846:	0c12      	lsrs	r2, r2, #16
   88848:	fb07 4303 	mla	r3, r7, r3, r4
   8884c:	0c00      	lsrs	r0, r0, #16
   8884e:	fb07 0202 	mla	r2, r7, r2, r0
   88852:	440b      	add	r3, r1
   88854:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   88858:	b29b      	uxth	r3, r3
   8885a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8885e:	45b6      	cmp	lr, r6
   88860:	f845 3b04 	str.w	r3, [r5], #4
   88864:	ea4f 4111 	mov.w	r1, r1, lsr #16
   88868:	d8e8      	bhi.n	8883c <__multiply+0x74>
   8886a:	6029      	str	r1, [r5, #0]
   8886c:	f8dc 5000 	ldr.w	r5, [ip]
   88870:	0c2d      	lsrs	r5, r5, #16
   88872:	d01d      	beq.n	888b0 <__multiply+0xe8>
   88874:	f8d9 3000 	ldr.w	r3, [r9]
   88878:	4648      	mov	r0, r9
   8887a:	461c      	mov	r4, r3
   8887c:	4659      	mov	r1, fp
   8887e:	2200      	movs	r2, #0
   88880:	880e      	ldrh	r6, [r1, #0]
   88882:	0c24      	lsrs	r4, r4, #16
   88884:	fb05 4406 	mla	r4, r5, r6, r4
   88888:	b29b      	uxth	r3, r3
   8888a:	4422      	add	r2, r4
   8888c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88890:	f840 3b04 	str.w	r3, [r0], #4
   88894:	f851 3b04 	ldr.w	r3, [r1], #4
   88898:	6804      	ldr	r4, [r0, #0]
   8889a:	0c1b      	lsrs	r3, r3, #16
   8889c:	b2a6      	uxth	r6, r4
   8889e:	fb05 6303 	mla	r3, r5, r3, r6
   888a2:	458e      	cmp	lr, r1
   888a4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   888a8:	ea4f 4213 	mov.w	r2, r3, lsr #16
   888ac:	d8e8      	bhi.n	88880 <__multiply+0xb8>
   888ae:	6003      	str	r3, [r0, #0]
   888b0:	f10c 0c04 	add.w	ip, ip, #4
   888b4:	45e2      	cmp	sl, ip
   888b6:	f109 0904 	add.w	r9, r9, #4
   888ba:	d8b8      	bhi.n	8882e <__multiply+0x66>
   888bc:	f8dd a004 	ldr.w	sl, [sp, #4]
   888c0:	f1b8 0f00 	cmp.w	r8, #0
   888c4:	dd0b      	ble.n	888de <__multiply+0x116>
   888c6:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   888ca:	f1aa 0a04 	sub.w	sl, sl, #4
   888ce:	b11b      	cbz	r3, 888d8 <__multiply+0x110>
   888d0:	e005      	b.n	888de <__multiply+0x116>
   888d2:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   888d6:	b913      	cbnz	r3, 888de <__multiply+0x116>
   888d8:	f1b8 0801 	subs.w	r8, r8, #1
   888dc:	d1f9      	bne.n	888d2 <__multiply+0x10a>
   888de:	9800      	ldr	r0, [sp, #0]
   888e0:	f8c0 8010 	str.w	r8, [r0, #16]
   888e4:	b003      	add	sp, #12
   888e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   888ea:	bf00      	nop

000888ec <__pow5mult>:
   888ec:	f012 0303 	ands.w	r3, r2, #3
   888f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   888f4:	4614      	mov	r4, r2
   888f6:	4607      	mov	r7, r0
   888f8:	d12e      	bne.n	88958 <__pow5mult+0x6c>
   888fa:	460d      	mov	r5, r1
   888fc:	10a4      	asrs	r4, r4, #2
   888fe:	d01c      	beq.n	8893a <__pow5mult+0x4e>
   88900:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   88902:	b396      	cbz	r6, 8896a <__pow5mult+0x7e>
   88904:	07e3      	lsls	r3, r4, #31
   88906:	f04f 0800 	mov.w	r8, #0
   8890a:	d406      	bmi.n	8891a <__pow5mult+0x2e>
   8890c:	1064      	asrs	r4, r4, #1
   8890e:	d014      	beq.n	8893a <__pow5mult+0x4e>
   88910:	6830      	ldr	r0, [r6, #0]
   88912:	b1a8      	cbz	r0, 88940 <__pow5mult+0x54>
   88914:	4606      	mov	r6, r0
   88916:	07e3      	lsls	r3, r4, #31
   88918:	d5f8      	bpl.n	8890c <__pow5mult+0x20>
   8891a:	4632      	mov	r2, r6
   8891c:	4629      	mov	r1, r5
   8891e:	4638      	mov	r0, r7
   88920:	f7ff ff52 	bl	887c8 <__multiply>
   88924:	b1b5      	cbz	r5, 88954 <__pow5mult+0x68>
   88926:	686a      	ldr	r2, [r5, #4]
   88928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8892a:	1064      	asrs	r4, r4, #1
   8892c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88930:	6029      	str	r1, [r5, #0]
   88932:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   88936:	4605      	mov	r5, r0
   88938:	d1ea      	bne.n	88910 <__pow5mult+0x24>
   8893a:	4628      	mov	r0, r5
   8893c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88940:	4632      	mov	r2, r6
   88942:	4631      	mov	r1, r6
   88944:	4638      	mov	r0, r7
   88946:	f7ff ff3f 	bl	887c8 <__multiply>
   8894a:	6030      	str	r0, [r6, #0]
   8894c:	f8c0 8000 	str.w	r8, [r0]
   88950:	4606      	mov	r6, r0
   88952:	e7e0      	b.n	88916 <__pow5mult+0x2a>
   88954:	4605      	mov	r5, r0
   88956:	e7d9      	b.n	8890c <__pow5mult+0x20>
   88958:	4a0b      	ldr	r2, [pc, #44]	; (88988 <__pow5mult+0x9c>)
   8895a:	3b01      	subs	r3, #1
   8895c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   88960:	2300      	movs	r3, #0
   88962:	f7ff fe95 	bl	88690 <__multadd>
   88966:	4605      	mov	r5, r0
   88968:	e7c8      	b.n	888fc <__pow5mult+0x10>
   8896a:	2101      	movs	r1, #1
   8896c:	4638      	mov	r0, r7
   8896e:	f7ff fe5f 	bl	88630 <_Balloc>
   88972:	f240 2171 	movw	r1, #625	; 0x271
   88976:	2201      	movs	r2, #1
   88978:	2300      	movs	r3, #0
   8897a:	6141      	str	r1, [r0, #20]
   8897c:	6102      	str	r2, [r0, #16]
   8897e:	4606      	mov	r6, r0
   88980:	64b8      	str	r0, [r7, #72]	; 0x48
   88982:	6003      	str	r3, [r0, #0]
   88984:	e7be      	b.n	88904 <__pow5mult+0x18>
   88986:	bf00      	nop
   88988:	00089d10 	.word	0x00089d10

0008898c <__lshift>:
   8898c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88990:	690b      	ldr	r3, [r1, #16]
   88992:	1154      	asrs	r4, r2, #5
   88994:	eb04 0803 	add.w	r8, r4, r3
   88998:	688b      	ldr	r3, [r1, #8]
   8899a:	f108 0501 	add.w	r5, r8, #1
   8899e:	429d      	cmp	r5, r3
   889a0:	460e      	mov	r6, r1
   889a2:	4691      	mov	r9, r2
   889a4:	4607      	mov	r7, r0
   889a6:	6849      	ldr	r1, [r1, #4]
   889a8:	dd04      	ble.n	889b4 <__lshift+0x28>
   889aa:	005b      	lsls	r3, r3, #1
   889ac:	429d      	cmp	r5, r3
   889ae:	f101 0101 	add.w	r1, r1, #1
   889b2:	dcfa      	bgt.n	889aa <__lshift+0x1e>
   889b4:	4638      	mov	r0, r7
   889b6:	f7ff fe3b 	bl	88630 <_Balloc>
   889ba:	2c00      	cmp	r4, #0
   889bc:	f100 0314 	add.w	r3, r0, #20
   889c0:	dd06      	ble.n	889d0 <__lshift+0x44>
   889c2:	2100      	movs	r1, #0
   889c4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   889c8:	f843 1b04 	str.w	r1, [r3], #4
   889cc:	429a      	cmp	r2, r3
   889ce:	d1fb      	bne.n	889c8 <__lshift+0x3c>
   889d0:	6934      	ldr	r4, [r6, #16]
   889d2:	f106 0114 	add.w	r1, r6, #20
   889d6:	f019 091f 	ands.w	r9, r9, #31
   889da:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   889de:	d01d      	beq.n	88a1c <__lshift+0x90>
   889e0:	2200      	movs	r2, #0
   889e2:	f1c9 0c20 	rsb	ip, r9, #32
   889e6:	680c      	ldr	r4, [r1, #0]
   889e8:	fa04 f409 	lsl.w	r4, r4, r9
   889ec:	4314      	orrs	r4, r2
   889ee:	f843 4b04 	str.w	r4, [r3], #4
   889f2:	f851 2b04 	ldr.w	r2, [r1], #4
   889f6:	458e      	cmp	lr, r1
   889f8:	fa22 f20c 	lsr.w	r2, r2, ip
   889fc:	d8f3      	bhi.n	889e6 <__lshift+0x5a>
   889fe:	601a      	str	r2, [r3, #0]
   88a00:	b10a      	cbz	r2, 88a06 <__lshift+0x7a>
   88a02:	f108 0502 	add.w	r5, r8, #2
   88a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   88a08:	6872      	ldr	r2, [r6, #4]
   88a0a:	3d01      	subs	r5, #1
   88a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88a10:	6105      	str	r5, [r0, #16]
   88a12:	6031      	str	r1, [r6, #0]
   88a14:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   88a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88a1c:	3b04      	subs	r3, #4
   88a1e:	f851 2b04 	ldr.w	r2, [r1], #4
   88a22:	458e      	cmp	lr, r1
   88a24:	f843 2f04 	str.w	r2, [r3, #4]!
   88a28:	d8f9      	bhi.n	88a1e <__lshift+0x92>
   88a2a:	e7ec      	b.n	88a06 <__lshift+0x7a>

00088a2c <__mcmp>:
   88a2c:	b430      	push	{r4, r5}
   88a2e:	690b      	ldr	r3, [r1, #16]
   88a30:	4605      	mov	r5, r0
   88a32:	6900      	ldr	r0, [r0, #16]
   88a34:	1ac0      	subs	r0, r0, r3
   88a36:	d10f      	bne.n	88a58 <__mcmp+0x2c>
   88a38:	009b      	lsls	r3, r3, #2
   88a3a:	3514      	adds	r5, #20
   88a3c:	3114      	adds	r1, #20
   88a3e:	4419      	add	r1, r3
   88a40:	442b      	add	r3, r5
   88a42:	e001      	b.n	88a48 <__mcmp+0x1c>
   88a44:	429d      	cmp	r5, r3
   88a46:	d207      	bcs.n	88a58 <__mcmp+0x2c>
   88a48:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   88a4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88a50:	4294      	cmp	r4, r2
   88a52:	d0f7      	beq.n	88a44 <__mcmp+0x18>
   88a54:	d302      	bcc.n	88a5c <__mcmp+0x30>
   88a56:	2001      	movs	r0, #1
   88a58:	bc30      	pop	{r4, r5}
   88a5a:	4770      	bx	lr
   88a5c:	f04f 30ff 	mov.w	r0, #4294967295
   88a60:	e7fa      	b.n	88a58 <__mcmp+0x2c>
   88a62:	bf00      	nop

00088a64 <__mdiff>:
   88a64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88a68:	690c      	ldr	r4, [r1, #16]
   88a6a:	4689      	mov	r9, r1
   88a6c:	6911      	ldr	r1, [r2, #16]
   88a6e:	4692      	mov	sl, r2
   88a70:	1a64      	subs	r4, r4, r1
   88a72:	2c00      	cmp	r4, #0
   88a74:	d117      	bne.n	88aa6 <__mdiff+0x42>
   88a76:	0089      	lsls	r1, r1, #2
   88a78:	f109 0714 	add.w	r7, r9, #20
   88a7c:	f102 0614 	add.w	r6, r2, #20
   88a80:	187b      	adds	r3, r7, r1
   88a82:	4431      	add	r1, r6
   88a84:	e001      	b.n	88a8a <__mdiff+0x26>
   88a86:	429f      	cmp	r7, r3
   88a88:	d265      	bcs.n	88b56 <__mdiff+0xf2>
   88a8a:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   88a8e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88a92:	4295      	cmp	r5, r2
   88a94:	d0f7      	beq.n	88a86 <__mdiff+0x22>
   88a96:	d267      	bcs.n	88b68 <__mdiff+0x104>
   88a98:	464b      	mov	r3, r9
   88a9a:	46bb      	mov	fp, r7
   88a9c:	46d1      	mov	r9, sl
   88a9e:	4637      	mov	r7, r6
   88aa0:	469a      	mov	sl, r3
   88aa2:	2401      	movs	r4, #1
   88aa4:	e005      	b.n	88ab2 <__mdiff+0x4e>
   88aa6:	db61      	blt.n	88b6c <__mdiff+0x108>
   88aa8:	2400      	movs	r4, #0
   88aaa:	f109 0714 	add.w	r7, r9, #20
   88aae:	f10a 0b14 	add.w	fp, sl, #20
   88ab2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   88ab6:	f7ff fdbb 	bl	88630 <_Balloc>
   88aba:	465d      	mov	r5, fp
   88abc:	f04f 0800 	mov.w	r8, #0
   88ac0:	f8d9 e010 	ldr.w	lr, [r9, #16]
   88ac4:	f8da 3010 	ldr.w	r3, [sl, #16]
   88ac8:	463e      	mov	r6, r7
   88aca:	60c4      	str	r4, [r0, #12]
   88acc:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   88ad0:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   88ad4:	f100 0414 	add.w	r4, r0, #20
   88ad8:	f856 9b04 	ldr.w	r9, [r6], #4
   88adc:	f855 2b04 	ldr.w	r2, [r5], #4
   88ae0:	fa1f f389 	uxth.w	r3, r9
   88ae4:	4443      	add	r3, r8
   88ae6:	fa1f f882 	uxth.w	r8, r2
   88aea:	0c12      	lsrs	r2, r2, #16
   88aec:	eba3 0308 	sub.w	r3, r3, r8
   88af0:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   88af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   88af8:	b29b      	uxth	r3, r3
   88afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88afe:	45ac      	cmp	ip, r5
   88b00:	f844 3b04 	str.w	r3, [r4], #4
   88b04:	ea4f 4822 	mov.w	r8, r2, asr #16
   88b08:	d8e6      	bhi.n	88ad8 <__mdiff+0x74>
   88b0a:	42b7      	cmp	r7, r6
   88b0c:	d917      	bls.n	88b3e <__mdiff+0xda>
   88b0e:	46a4      	mov	ip, r4
   88b10:	4635      	mov	r5, r6
   88b12:	f855 3b04 	ldr.w	r3, [r5], #4
   88b16:	b299      	uxth	r1, r3
   88b18:	4441      	add	r1, r8
   88b1a:	140a      	asrs	r2, r1, #16
   88b1c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   88b20:	b289      	uxth	r1, r1
   88b22:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   88b26:	42af      	cmp	r7, r5
   88b28:	f84c 3b04 	str.w	r3, [ip], #4
   88b2c:	ea4f 4822 	mov.w	r8, r2, asr #16
   88b30:	d8ef      	bhi.n	88b12 <__mdiff+0xae>
   88b32:	43f6      	mvns	r6, r6
   88b34:	4437      	add	r7, r6
   88b36:	f027 0703 	bic.w	r7, r7, #3
   88b3a:	3704      	adds	r7, #4
   88b3c:	443c      	add	r4, r7
   88b3e:	3c04      	subs	r4, #4
   88b40:	b92b      	cbnz	r3, 88b4e <__mdiff+0xea>
   88b42:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   88b46:	f10e 3eff 	add.w	lr, lr, #4294967295
   88b4a:	2b00      	cmp	r3, #0
   88b4c:	d0f9      	beq.n	88b42 <__mdiff+0xde>
   88b4e:	f8c0 e010 	str.w	lr, [r0, #16]
   88b52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88b56:	2100      	movs	r1, #0
   88b58:	f7ff fd6a 	bl	88630 <_Balloc>
   88b5c:	2201      	movs	r2, #1
   88b5e:	2300      	movs	r3, #0
   88b60:	6102      	str	r2, [r0, #16]
   88b62:	6143      	str	r3, [r0, #20]
   88b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88b68:	46b3      	mov	fp, r6
   88b6a:	e7a2      	b.n	88ab2 <__mdiff+0x4e>
   88b6c:	464b      	mov	r3, r9
   88b6e:	f109 0b14 	add.w	fp, r9, #20
   88b72:	f102 0714 	add.w	r7, r2, #20
   88b76:	4691      	mov	r9, r2
   88b78:	2401      	movs	r4, #1
   88b7a:	469a      	mov	sl, r3
   88b7c:	e799      	b.n	88ab2 <__mdiff+0x4e>
   88b7e:	bf00      	nop

00088b80 <__d2b>:
   88b80:	b5f0      	push	{r4, r5, r6, r7, lr}
   88b82:	2101      	movs	r1, #1
   88b84:	b083      	sub	sp, #12
   88b86:	461c      	mov	r4, r3
   88b88:	f3c3 550a 	ubfx	r5, r3, #20, #11
   88b8c:	4616      	mov	r6, r2
   88b8e:	f7ff fd4f 	bl	88630 <_Balloc>
   88b92:	f3c4 0413 	ubfx	r4, r4, #0, #20
   88b96:	4607      	mov	r7, r0
   88b98:	b10d      	cbz	r5, 88b9e <__d2b+0x1e>
   88b9a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   88b9e:	9401      	str	r4, [sp, #4]
   88ba0:	b306      	cbz	r6, 88be4 <__d2b+0x64>
   88ba2:	a802      	add	r0, sp, #8
   88ba4:	f840 6d08 	str.w	r6, [r0, #-8]!
   88ba8:	f7ff fdd4 	bl	88754 <__lo0bits>
   88bac:	2800      	cmp	r0, #0
   88bae:	d130      	bne.n	88c12 <__d2b+0x92>
   88bb0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   88bb4:	617a      	str	r2, [r7, #20]
   88bb6:	2b00      	cmp	r3, #0
   88bb8:	bf0c      	ite	eq
   88bba:	2101      	moveq	r1, #1
   88bbc:	2102      	movne	r1, #2
   88bbe:	61bb      	str	r3, [r7, #24]
   88bc0:	6139      	str	r1, [r7, #16]
   88bc2:	b9d5      	cbnz	r5, 88bfa <__d2b+0x7a>
   88bc4:	9a08      	ldr	r2, [sp, #32]
   88bc6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   88bca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   88bce:	6010      	str	r0, [r2, #0]
   88bd0:	6918      	ldr	r0, [r3, #16]
   88bd2:	f7ff fd9f 	bl	88714 <__hi0bits>
   88bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88bd8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   88bdc:	6018      	str	r0, [r3, #0]
   88bde:	4638      	mov	r0, r7
   88be0:	b003      	add	sp, #12
   88be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88be4:	a801      	add	r0, sp, #4
   88be6:	f7ff fdb5 	bl	88754 <__lo0bits>
   88bea:	2201      	movs	r2, #1
   88bec:	9b01      	ldr	r3, [sp, #4]
   88bee:	4611      	mov	r1, r2
   88bf0:	3020      	adds	r0, #32
   88bf2:	613a      	str	r2, [r7, #16]
   88bf4:	617b      	str	r3, [r7, #20]
   88bf6:	2d00      	cmp	r5, #0
   88bf8:	d0e4      	beq.n	88bc4 <__d2b+0x44>
   88bfa:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   88bfe:	9a08      	ldr	r2, [sp, #32]
   88c00:	4403      	add	r3, r0
   88c02:	6013      	str	r3, [r2, #0]
   88c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88c06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   88c0a:	6018      	str	r0, [r3, #0]
   88c0c:	4638      	mov	r0, r7
   88c0e:	b003      	add	sp, #12
   88c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88c12:	9b01      	ldr	r3, [sp, #4]
   88c14:	f1c0 0220 	rsb	r2, r0, #32
   88c18:	9900      	ldr	r1, [sp, #0]
   88c1a:	fa03 f202 	lsl.w	r2, r3, r2
   88c1e:	430a      	orrs	r2, r1
   88c20:	40c3      	lsrs	r3, r0
   88c22:	9301      	str	r3, [sp, #4]
   88c24:	617a      	str	r2, [r7, #20]
   88c26:	e7c6      	b.n	88bb6 <__d2b+0x36>

00088c28 <_sbrk_r>:
   88c28:	b538      	push	{r3, r4, r5, lr}
   88c2a:	2300      	movs	r3, #0
   88c2c:	4c06      	ldr	r4, [pc, #24]	; (88c48 <_sbrk_r+0x20>)
   88c2e:	4605      	mov	r5, r0
   88c30:	4608      	mov	r0, r1
   88c32:	6023      	str	r3, [r4, #0]
   88c34:	f7fb fd0c 	bl	84650 <_sbrk>
   88c38:	1c43      	adds	r3, r0, #1
   88c3a:	d000      	beq.n	88c3e <_sbrk_r+0x16>
   88c3c:	bd38      	pop	{r3, r4, r5, pc}
   88c3e:	6823      	ldr	r3, [r4, #0]
   88c40:	2b00      	cmp	r3, #0
   88c42:	d0fb      	beq.n	88c3c <_sbrk_r+0x14>
   88c44:	602b      	str	r3, [r5, #0]
   88c46:	bd38      	pop	{r3, r4, r5, pc}
   88c48:	20071000 	.word	0x20071000

00088c4c <__ssprint_r>:
   88c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88c50:	6893      	ldr	r3, [r2, #8]
   88c52:	b083      	sub	sp, #12
   88c54:	4690      	mov	r8, r2
   88c56:	2b00      	cmp	r3, #0
   88c58:	d070      	beq.n	88d3c <__ssprint_r+0xf0>
   88c5a:	4682      	mov	sl, r0
   88c5c:	460c      	mov	r4, r1
   88c5e:	6817      	ldr	r7, [r2, #0]
   88c60:	688d      	ldr	r5, [r1, #8]
   88c62:	6808      	ldr	r0, [r1, #0]
   88c64:	e042      	b.n	88cec <__ssprint_r+0xa0>
   88c66:	89a3      	ldrh	r3, [r4, #12]
   88c68:	f413 6f90 	tst.w	r3, #1152	; 0x480
   88c6c:	d02e      	beq.n	88ccc <__ssprint_r+0x80>
   88c6e:	6965      	ldr	r5, [r4, #20]
   88c70:	6921      	ldr	r1, [r4, #16]
   88c72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   88c76:	eba0 0b01 	sub.w	fp, r0, r1
   88c7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   88c7e:	f10b 0001 	add.w	r0, fp, #1
   88c82:	106d      	asrs	r5, r5, #1
   88c84:	4430      	add	r0, r6
   88c86:	42a8      	cmp	r0, r5
   88c88:	462a      	mov	r2, r5
   88c8a:	bf84      	itt	hi
   88c8c:	4605      	movhi	r5, r0
   88c8e:	462a      	movhi	r2, r5
   88c90:	055b      	lsls	r3, r3, #21
   88c92:	d538      	bpl.n	88d06 <__ssprint_r+0xba>
   88c94:	4611      	mov	r1, r2
   88c96:	4650      	mov	r0, sl
   88c98:	f7ff f960 	bl	87f5c <_malloc_r>
   88c9c:	2800      	cmp	r0, #0
   88c9e:	d03c      	beq.n	88d1a <__ssprint_r+0xce>
   88ca0:	465a      	mov	r2, fp
   88ca2:	6921      	ldr	r1, [r4, #16]
   88ca4:	9001      	str	r0, [sp, #4]
   88ca6:	f7ff fc41 	bl	8852c <memcpy>
   88caa:	89a2      	ldrh	r2, [r4, #12]
   88cac:	9b01      	ldr	r3, [sp, #4]
   88cae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   88cb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   88cb6:	81a2      	strh	r2, [r4, #12]
   88cb8:	eba5 020b 	sub.w	r2, r5, fp
   88cbc:	eb03 000b 	add.w	r0, r3, fp
   88cc0:	6165      	str	r5, [r4, #20]
   88cc2:	46b3      	mov	fp, r6
   88cc4:	4635      	mov	r5, r6
   88cc6:	6123      	str	r3, [r4, #16]
   88cc8:	6020      	str	r0, [r4, #0]
   88cca:	60a2      	str	r2, [r4, #8]
   88ccc:	465a      	mov	r2, fp
   88cce:	4649      	mov	r1, r9
   88cd0:	f000 fa18 	bl	89104 <memmove>
   88cd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88cd8:	68a2      	ldr	r2, [r4, #8]
   88cda:	6820      	ldr	r0, [r4, #0]
   88cdc:	1b55      	subs	r5, r2, r5
   88cde:	4458      	add	r0, fp
   88ce0:	1b9e      	subs	r6, r3, r6
   88ce2:	60a5      	str	r5, [r4, #8]
   88ce4:	6020      	str	r0, [r4, #0]
   88ce6:	f8c8 6008 	str.w	r6, [r8, #8]
   88cea:	b33e      	cbz	r6, 88d3c <__ssprint_r+0xf0>
   88cec:	687e      	ldr	r6, [r7, #4]
   88cee:	463b      	mov	r3, r7
   88cf0:	3708      	adds	r7, #8
   88cf2:	2e00      	cmp	r6, #0
   88cf4:	d0fa      	beq.n	88cec <__ssprint_r+0xa0>
   88cf6:	42ae      	cmp	r6, r5
   88cf8:	f8d3 9000 	ldr.w	r9, [r3]
   88cfc:	46ab      	mov	fp, r5
   88cfe:	d2b2      	bcs.n	88c66 <__ssprint_r+0x1a>
   88d00:	4635      	mov	r5, r6
   88d02:	46b3      	mov	fp, r6
   88d04:	e7e2      	b.n	88ccc <__ssprint_r+0x80>
   88d06:	4650      	mov	r0, sl
   88d08:	f000 fa60 	bl	891cc <_realloc_r>
   88d0c:	4603      	mov	r3, r0
   88d0e:	2800      	cmp	r0, #0
   88d10:	d1d2      	bne.n	88cb8 <__ssprint_r+0x6c>
   88d12:	6921      	ldr	r1, [r4, #16]
   88d14:	4650      	mov	r0, sl
   88d16:	f000 f8f9 	bl	88f0c <_free_r>
   88d1a:	230c      	movs	r3, #12
   88d1c:	2200      	movs	r2, #0
   88d1e:	f04f 30ff 	mov.w	r0, #4294967295
   88d22:	f8ca 3000 	str.w	r3, [sl]
   88d26:	89a3      	ldrh	r3, [r4, #12]
   88d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88d2c:	81a3      	strh	r3, [r4, #12]
   88d2e:	f8c8 2008 	str.w	r2, [r8, #8]
   88d32:	f8c8 2004 	str.w	r2, [r8, #4]
   88d36:	b003      	add	sp, #12
   88d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88d3c:	2000      	movs	r0, #0
   88d3e:	f8c8 0004 	str.w	r0, [r8, #4]
   88d42:	b003      	add	sp, #12
   88d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00088d48 <__register_exitproc>:
   88d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88d4c:	4d2c      	ldr	r5, [pc, #176]	; (88e00 <__register_exitproc+0xb8>)
   88d4e:	4606      	mov	r6, r0
   88d50:	6828      	ldr	r0, [r5, #0]
   88d52:	4698      	mov	r8, r3
   88d54:	460f      	mov	r7, r1
   88d56:	4691      	mov	r9, r2
   88d58:	f7ff f8fc 	bl	87f54 <__retarget_lock_acquire_recursive>
   88d5c:	4b29      	ldr	r3, [pc, #164]	; (88e04 <__register_exitproc+0xbc>)
   88d5e:	681c      	ldr	r4, [r3, #0]
   88d60:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   88d64:	2b00      	cmp	r3, #0
   88d66:	d03e      	beq.n	88de6 <__register_exitproc+0x9e>
   88d68:	685a      	ldr	r2, [r3, #4]
   88d6a:	2a1f      	cmp	r2, #31
   88d6c:	dc1c      	bgt.n	88da8 <__register_exitproc+0x60>
   88d6e:	f102 0e01 	add.w	lr, r2, #1
   88d72:	b176      	cbz	r6, 88d92 <__register_exitproc+0x4a>
   88d74:	2101      	movs	r1, #1
   88d76:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   88d7a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   88d7e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   88d82:	4091      	lsls	r1, r2
   88d84:	4308      	orrs	r0, r1
   88d86:	2e02      	cmp	r6, #2
   88d88:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   88d8c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   88d90:	d023      	beq.n	88dda <__register_exitproc+0x92>
   88d92:	3202      	adds	r2, #2
   88d94:	f8c3 e004 	str.w	lr, [r3, #4]
   88d98:	6828      	ldr	r0, [r5, #0]
   88d9a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   88d9e:	f7ff f8db 	bl	87f58 <__retarget_lock_release_recursive>
   88da2:	2000      	movs	r0, #0
   88da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88da8:	4b17      	ldr	r3, [pc, #92]	; (88e08 <__register_exitproc+0xc0>)
   88daa:	b30b      	cbz	r3, 88df0 <__register_exitproc+0xa8>
   88dac:	f44f 70c8 	mov.w	r0, #400	; 0x190
   88db0:	f3af 8000 	nop.w
   88db4:	4603      	mov	r3, r0
   88db6:	b1d8      	cbz	r0, 88df0 <__register_exitproc+0xa8>
   88db8:	2000      	movs	r0, #0
   88dba:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   88dbe:	f04f 0e01 	mov.w	lr, #1
   88dc2:	6058      	str	r0, [r3, #4]
   88dc4:	6019      	str	r1, [r3, #0]
   88dc6:	4602      	mov	r2, r0
   88dc8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   88dcc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   88dd0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   88dd4:	2e00      	cmp	r6, #0
   88dd6:	d0dc      	beq.n	88d92 <__register_exitproc+0x4a>
   88dd8:	e7cc      	b.n	88d74 <__register_exitproc+0x2c>
   88dda:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   88dde:	4301      	orrs	r1, r0
   88de0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   88de4:	e7d5      	b.n	88d92 <__register_exitproc+0x4a>
   88de6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   88dea:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   88dee:	e7bb      	b.n	88d68 <__register_exitproc+0x20>
   88df0:	6828      	ldr	r0, [r5, #0]
   88df2:	f7ff f8b1 	bl	87f58 <__retarget_lock_release_recursive>
   88df6:	f04f 30ff 	mov.w	r0, #4294967295
   88dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88dfe:	bf00      	nop
   88e00:	200705d0 	.word	0x200705d0
   88e04:	00089ba4 	.word	0x00089ba4
   88e08:	00000000 	.word	0x00000000

00088e0c <_calloc_r>:
   88e0c:	b510      	push	{r4, lr}
   88e0e:	fb02 f101 	mul.w	r1, r2, r1
   88e12:	f7ff f8a3 	bl	87f5c <_malloc_r>
   88e16:	4604      	mov	r4, r0
   88e18:	b1d8      	cbz	r0, 88e52 <_calloc_r+0x46>
   88e1a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   88e1e:	f022 0203 	bic.w	r2, r2, #3
   88e22:	3a04      	subs	r2, #4
   88e24:	2a24      	cmp	r2, #36	; 0x24
   88e26:	d818      	bhi.n	88e5a <_calloc_r+0x4e>
   88e28:	2a13      	cmp	r2, #19
   88e2a:	d914      	bls.n	88e56 <_calloc_r+0x4a>
   88e2c:	2300      	movs	r3, #0
   88e2e:	2a1b      	cmp	r2, #27
   88e30:	6003      	str	r3, [r0, #0]
   88e32:	6043      	str	r3, [r0, #4]
   88e34:	d916      	bls.n	88e64 <_calloc_r+0x58>
   88e36:	2a24      	cmp	r2, #36	; 0x24
   88e38:	6083      	str	r3, [r0, #8]
   88e3a:	60c3      	str	r3, [r0, #12]
   88e3c:	bf11      	iteee	ne
   88e3e:	f100 0210 	addne.w	r2, r0, #16
   88e42:	6103      	streq	r3, [r0, #16]
   88e44:	6143      	streq	r3, [r0, #20]
   88e46:	f100 0218 	addeq.w	r2, r0, #24
   88e4a:	2300      	movs	r3, #0
   88e4c:	6013      	str	r3, [r2, #0]
   88e4e:	6053      	str	r3, [r2, #4]
   88e50:	6093      	str	r3, [r2, #8]
   88e52:	4620      	mov	r0, r4
   88e54:	bd10      	pop	{r4, pc}
   88e56:	4602      	mov	r2, r0
   88e58:	e7f7      	b.n	88e4a <_calloc_r+0x3e>
   88e5a:	2100      	movs	r1, #0
   88e5c:	f7fc fd68 	bl	85930 <memset>
   88e60:	4620      	mov	r0, r4
   88e62:	bd10      	pop	{r4, pc}
   88e64:	f100 0208 	add.w	r2, r0, #8
   88e68:	e7ef      	b.n	88e4a <_calloc_r+0x3e>
   88e6a:	bf00      	nop

00088e6c <_malloc_trim_r>:
   88e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88e6e:	460c      	mov	r4, r1
   88e70:	4f23      	ldr	r7, [pc, #140]	; (88f00 <_malloc_trim_r+0x94>)
   88e72:	4606      	mov	r6, r0
   88e74:	f7ff fbd0 	bl	88618 <__malloc_lock>
   88e78:	68bb      	ldr	r3, [r7, #8]
   88e7a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   88e7e:	685d      	ldr	r5, [r3, #4]
   88e80:	310f      	adds	r1, #15
   88e82:	f025 0503 	bic.w	r5, r5, #3
   88e86:	4429      	add	r1, r5
   88e88:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   88e8c:	f021 010f 	bic.w	r1, r1, #15
   88e90:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   88e94:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   88e98:	db07      	blt.n	88eaa <_malloc_trim_r+0x3e>
   88e9a:	2100      	movs	r1, #0
   88e9c:	4630      	mov	r0, r6
   88e9e:	f7ff fec3 	bl	88c28 <_sbrk_r>
   88ea2:	68bb      	ldr	r3, [r7, #8]
   88ea4:	442b      	add	r3, r5
   88ea6:	4298      	cmp	r0, r3
   88ea8:	d004      	beq.n	88eb4 <_malloc_trim_r+0x48>
   88eaa:	4630      	mov	r0, r6
   88eac:	f7ff fbba 	bl	88624 <__malloc_unlock>
   88eb0:	2000      	movs	r0, #0
   88eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88eb4:	4261      	negs	r1, r4
   88eb6:	4630      	mov	r0, r6
   88eb8:	f7ff feb6 	bl	88c28 <_sbrk_r>
   88ebc:	3001      	adds	r0, #1
   88ebe:	d00d      	beq.n	88edc <_malloc_trim_r+0x70>
   88ec0:	4b10      	ldr	r3, [pc, #64]	; (88f04 <_malloc_trim_r+0x98>)
   88ec2:	68ba      	ldr	r2, [r7, #8]
   88ec4:	6819      	ldr	r1, [r3, #0]
   88ec6:	1b2d      	subs	r5, r5, r4
   88ec8:	f045 0501 	orr.w	r5, r5, #1
   88ecc:	4630      	mov	r0, r6
   88ece:	1b09      	subs	r1, r1, r4
   88ed0:	6055      	str	r5, [r2, #4]
   88ed2:	6019      	str	r1, [r3, #0]
   88ed4:	f7ff fba6 	bl	88624 <__malloc_unlock>
   88ed8:	2001      	movs	r0, #1
   88eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88edc:	2100      	movs	r1, #0
   88ede:	4630      	mov	r0, r6
   88ee0:	f7ff fea2 	bl	88c28 <_sbrk_r>
   88ee4:	68ba      	ldr	r2, [r7, #8]
   88ee6:	1a83      	subs	r3, r0, r2
   88ee8:	2b0f      	cmp	r3, #15
   88eea:	ddde      	ble.n	88eaa <_malloc_trim_r+0x3e>
   88eec:	4c06      	ldr	r4, [pc, #24]	; (88f08 <_malloc_trim_r+0x9c>)
   88eee:	4905      	ldr	r1, [pc, #20]	; (88f04 <_malloc_trim_r+0x98>)
   88ef0:	6824      	ldr	r4, [r4, #0]
   88ef2:	f043 0301 	orr.w	r3, r3, #1
   88ef6:	1b00      	subs	r0, r0, r4
   88ef8:	6053      	str	r3, [r2, #4]
   88efa:	6008      	str	r0, [r1, #0]
   88efc:	e7d5      	b.n	88eaa <_malloc_trim_r+0x3e>
   88efe:	bf00      	nop
   88f00:	200705d4 	.word	0x200705d4
   88f04:	20070dd8 	.word	0x20070dd8
   88f08:	200709dc 	.word	0x200709dc

00088f0c <_free_r>:
   88f0c:	2900      	cmp	r1, #0
   88f0e:	d044      	beq.n	88f9a <_free_r+0x8e>
   88f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88f14:	460d      	mov	r5, r1
   88f16:	4680      	mov	r8, r0
   88f18:	f7ff fb7e 	bl	88618 <__malloc_lock>
   88f1c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   88f20:	4969      	ldr	r1, [pc, #420]	; (890c8 <_free_r+0x1bc>)
   88f22:	f1a5 0408 	sub.w	r4, r5, #8
   88f26:	f027 0301 	bic.w	r3, r7, #1
   88f2a:	18e2      	adds	r2, r4, r3
   88f2c:	688e      	ldr	r6, [r1, #8]
   88f2e:	6850      	ldr	r0, [r2, #4]
   88f30:	42b2      	cmp	r2, r6
   88f32:	f020 0003 	bic.w	r0, r0, #3
   88f36:	d05e      	beq.n	88ff6 <_free_r+0xea>
   88f38:	07fe      	lsls	r6, r7, #31
   88f3a:	6050      	str	r0, [r2, #4]
   88f3c:	d40b      	bmi.n	88f56 <_free_r+0x4a>
   88f3e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   88f42:	f101 0e08 	add.w	lr, r1, #8
   88f46:	1be4      	subs	r4, r4, r7
   88f48:	68a5      	ldr	r5, [r4, #8]
   88f4a:	443b      	add	r3, r7
   88f4c:	4575      	cmp	r5, lr
   88f4e:	d06d      	beq.n	8902c <_free_r+0x120>
   88f50:	68e7      	ldr	r7, [r4, #12]
   88f52:	60ef      	str	r7, [r5, #12]
   88f54:	60bd      	str	r5, [r7, #8]
   88f56:	1815      	adds	r5, r2, r0
   88f58:	686d      	ldr	r5, [r5, #4]
   88f5a:	07ed      	lsls	r5, r5, #31
   88f5c:	d53e      	bpl.n	88fdc <_free_r+0xd0>
   88f5e:	f043 0201 	orr.w	r2, r3, #1
   88f62:	6062      	str	r2, [r4, #4]
   88f64:	50e3      	str	r3, [r4, r3]
   88f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   88f6a:	d217      	bcs.n	88f9c <_free_r+0x90>
   88f6c:	2201      	movs	r2, #1
   88f6e:	08db      	lsrs	r3, r3, #3
   88f70:	1098      	asrs	r0, r3, #2
   88f72:	684d      	ldr	r5, [r1, #4]
   88f74:	4413      	add	r3, r2
   88f76:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   88f7a:	4082      	lsls	r2, r0
   88f7c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   88f80:	432a      	orrs	r2, r5
   88f82:	3808      	subs	r0, #8
   88f84:	60e0      	str	r0, [r4, #12]
   88f86:	60a7      	str	r7, [r4, #8]
   88f88:	604a      	str	r2, [r1, #4]
   88f8a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   88f8e:	60fc      	str	r4, [r7, #12]
   88f90:	4640      	mov	r0, r8
   88f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88f96:	f7ff bb45 	b.w	88624 <__malloc_unlock>
   88f9a:	4770      	bx	lr
   88f9c:	0a5a      	lsrs	r2, r3, #9
   88f9e:	2a04      	cmp	r2, #4
   88fa0:	d852      	bhi.n	89048 <_free_r+0x13c>
   88fa2:	099a      	lsrs	r2, r3, #6
   88fa4:	f102 0739 	add.w	r7, r2, #57	; 0x39
   88fa8:	00ff      	lsls	r7, r7, #3
   88faa:	f102 0538 	add.w	r5, r2, #56	; 0x38
   88fae:	19c8      	adds	r0, r1, r7
   88fb0:	59ca      	ldr	r2, [r1, r7]
   88fb2:	3808      	subs	r0, #8
   88fb4:	4290      	cmp	r0, r2
   88fb6:	d04f      	beq.n	89058 <_free_r+0x14c>
   88fb8:	6851      	ldr	r1, [r2, #4]
   88fba:	f021 0103 	bic.w	r1, r1, #3
   88fbe:	428b      	cmp	r3, r1
   88fc0:	d232      	bcs.n	89028 <_free_r+0x11c>
   88fc2:	6892      	ldr	r2, [r2, #8]
   88fc4:	4290      	cmp	r0, r2
   88fc6:	d1f7      	bne.n	88fb8 <_free_r+0xac>
   88fc8:	68c3      	ldr	r3, [r0, #12]
   88fca:	60a0      	str	r0, [r4, #8]
   88fcc:	60e3      	str	r3, [r4, #12]
   88fce:	609c      	str	r4, [r3, #8]
   88fd0:	60c4      	str	r4, [r0, #12]
   88fd2:	4640      	mov	r0, r8
   88fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88fd8:	f7ff bb24 	b.w	88624 <__malloc_unlock>
   88fdc:	6895      	ldr	r5, [r2, #8]
   88fde:	4f3b      	ldr	r7, [pc, #236]	; (890cc <_free_r+0x1c0>)
   88fe0:	4403      	add	r3, r0
   88fe2:	42bd      	cmp	r5, r7
   88fe4:	d040      	beq.n	89068 <_free_r+0x15c>
   88fe6:	68d0      	ldr	r0, [r2, #12]
   88fe8:	f043 0201 	orr.w	r2, r3, #1
   88fec:	60e8      	str	r0, [r5, #12]
   88fee:	6085      	str	r5, [r0, #8]
   88ff0:	6062      	str	r2, [r4, #4]
   88ff2:	50e3      	str	r3, [r4, r3]
   88ff4:	e7b7      	b.n	88f66 <_free_r+0x5a>
   88ff6:	07ff      	lsls	r7, r7, #31
   88ff8:	4403      	add	r3, r0
   88ffa:	d407      	bmi.n	8900c <_free_r+0x100>
   88ffc:	f855 5c08 	ldr.w	r5, [r5, #-8]
   89000:	1b64      	subs	r4, r4, r5
   89002:	68e2      	ldr	r2, [r4, #12]
   89004:	68a0      	ldr	r0, [r4, #8]
   89006:	442b      	add	r3, r5
   89008:	60c2      	str	r2, [r0, #12]
   8900a:	6090      	str	r0, [r2, #8]
   8900c:	4a30      	ldr	r2, [pc, #192]	; (890d0 <_free_r+0x1c4>)
   8900e:	f043 0001 	orr.w	r0, r3, #1
   89012:	6812      	ldr	r2, [r2, #0]
   89014:	6060      	str	r0, [r4, #4]
   89016:	4293      	cmp	r3, r2
   89018:	608c      	str	r4, [r1, #8]
   8901a:	d3b9      	bcc.n	88f90 <_free_r+0x84>
   8901c:	4b2d      	ldr	r3, [pc, #180]	; (890d4 <_free_r+0x1c8>)
   8901e:	4640      	mov	r0, r8
   89020:	6819      	ldr	r1, [r3, #0]
   89022:	f7ff ff23 	bl	88e6c <_malloc_trim_r>
   89026:	e7b3      	b.n	88f90 <_free_r+0x84>
   89028:	4610      	mov	r0, r2
   8902a:	e7cd      	b.n	88fc8 <_free_r+0xbc>
   8902c:	1811      	adds	r1, r2, r0
   8902e:	6849      	ldr	r1, [r1, #4]
   89030:	07c9      	lsls	r1, r1, #31
   89032:	d444      	bmi.n	890be <_free_r+0x1b2>
   89034:	6891      	ldr	r1, [r2, #8]
   89036:	4403      	add	r3, r0
   89038:	68d2      	ldr	r2, [r2, #12]
   8903a:	f043 0001 	orr.w	r0, r3, #1
   8903e:	60ca      	str	r2, [r1, #12]
   89040:	6091      	str	r1, [r2, #8]
   89042:	6060      	str	r0, [r4, #4]
   89044:	50e3      	str	r3, [r4, r3]
   89046:	e7a3      	b.n	88f90 <_free_r+0x84>
   89048:	2a14      	cmp	r2, #20
   8904a:	d816      	bhi.n	8907a <_free_r+0x16e>
   8904c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   89050:	00ff      	lsls	r7, r7, #3
   89052:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   89056:	e7aa      	b.n	88fae <_free_r+0xa2>
   89058:	2301      	movs	r3, #1
   8905a:	10aa      	asrs	r2, r5, #2
   8905c:	684d      	ldr	r5, [r1, #4]
   8905e:	4093      	lsls	r3, r2
   89060:	432b      	orrs	r3, r5
   89062:	604b      	str	r3, [r1, #4]
   89064:	4603      	mov	r3, r0
   89066:	e7b0      	b.n	88fca <_free_r+0xbe>
   89068:	f043 0201 	orr.w	r2, r3, #1
   8906c:	614c      	str	r4, [r1, #20]
   8906e:	610c      	str	r4, [r1, #16]
   89070:	60e5      	str	r5, [r4, #12]
   89072:	60a5      	str	r5, [r4, #8]
   89074:	6062      	str	r2, [r4, #4]
   89076:	50e3      	str	r3, [r4, r3]
   89078:	e78a      	b.n	88f90 <_free_r+0x84>
   8907a:	2a54      	cmp	r2, #84	; 0x54
   8907c:	d806      	bhi.n	8908c <_free_r+0x180>
   8907e:	0b1a      	lsrs	r2, r3, #12
   89080:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   89084:	00ff      	lsls	r7, r7, #3
   89086:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8908a:	e790      	b.n	88fae <_free_r+0xa2>
   8908c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   89090:	d806      	bhi.n	890a0 <_free_r+0x194>
   89092:	0bda      	lsrs	r2, r3, #15
   89094:	f102 0778 	add.w	r7, r2, #120	; 0x78
   89098:	00ff      	lsls	r7, r7, #3
   8909a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8909e:	e786      	b.n	88fae <_free_r+0xa2>
   890a0:	f240 5054 	movw	r0, #1364	; 0x554
   890a4:	4282      	cmp	r2, r0
   890a6:	d806      	bhi.n	890b6 <_free_r+0x1aa>
   890a8:	0c9a      	lsrs	r2, r3, #18
   890aa:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   890ae:	00ff      	lsls	r7, r7, #3
   890b0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   890b4:	e77b      	b.n	88fae <_free_r+0xa2>
   890b6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   890ba:	257e      	movs	r5, #126	; 0x7e
   890bc:	e777      	b.n	88fae <_free_r+0xa2>
   890be:	f043 0101 	orr.w	r1, r3, #1
   890c2:	6061      	str	r1, [r4, #4]
   890c4:	6013      	str	r3, [r2, #0]
   890c6:	e763      	b.n	88f90 <_free_r+0x84>
   890c8:	200705d4 	.word	0x200705d4
   890cc:	200705dc 	.word	0x200705dc
   890d0:	200709e0 	.word	0x200709e0
   890d4:	20070e08 	.word	0x20070e08

000890d8 <__ascii_mbtowc>:
   890d8:	b082      	sub	sp, #8
   890da:	b149      	cbz	r1, 890f0 <__ascii_mbtowc+0x18>
   890dc:	b15a      	cbz	r2, 890f6 <__ascii_mbtowc+0x1e>
   890de:	b16b      	cbz	r3, 890fc <__ascii_mbtowc+0x24>
   890e0:	7813      	ldrb	r3, [r2, #0]
   890e2:	600b      	str	r3, [r1, #0]
   890e4:	7812      	ldrb	r2, [r2, #0]
   890e6:	1c10      	adds	r0, r2, #0
   890e8:	bf18      	it	ne
   890ea:	2001      	movne	r0, #1
   890ec:	b002      	add	sp, #8
   890ee:	4770      	bx	lr
   890f0:	a901      	add	r1, sp, #4
   890f2:	2a00      	cmp	r2, #0
   890f4:	d1f3      	bne.n	890de <__ascii_mbtowc+0x6>
   890f6:	4610      	mov	r0, r2
   890f8:	b002      	add	sp, #8
   890fa:	4770      	bx	lr
   890fc:	f06f 0001 	mvn.w	r0, #1
   89100:	e7f4      	b.n	890ec <__ascii_mbtowc+0x14>
   89102:	bf00      	nop

00089104 <memmove>:
   89104:	4288      	cmp	r0, r1
   89106:	b5f0      	push	{r4, r5, r6, r7, lr}
   89108:	d90d      	bls.n	89126 <memmove+0x22>
   8910a:	188b      	adds	r3, r1, r2
   8910c:	4298      	cmp	r0, r3
   8910e:	d20a      	bcs.n	89126 <memmove+0x22>
   89110:	1884      	adds	r4, r0, r2
   89112:	2a00      	cmp	r2, #0
   89114:	d051      	beq.n	891ba <memmove+0xb6>
   89116:	4622      	mov	r2, r4
   89118:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8911c:	4299      	cmp	r1, r3
   8911e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   89122:	d1f9      	bne.n	89118 <memmove+0x14>
   89124:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89126:	2a0f      	cmp	r2, #15
   89128:	d948      	bls.n	891bc <memmove+0xb8>
   8912a:	ea41 0300 	orr.w	r3, r1, r0
   8912e:	079b      	lsls	r3, r3, #30
   89130:	d146      	bne.n	891c0 <memmove+0xbc>
   89132:	4615      	mov	r5, r2
   89134:	f100 0410 	add.w	r4, r0, #16
   89138:	f101 0310 	add.w	r3, r1, #16
   8913c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   89140:	3d10      	subs	r5, #16
   89142:	f844 6c10 	str.w	r6, [r4, #-16]
   89146:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8914a:	2d0f      	cmp	r5, #15
   8914c:	f844 6c0c 	str.w	r6, [r4, #-12]
   89150:	f853 6c08 	ldr.w	r6, [r3, #-8]
   89154:	f104 0410 	add.w	r4, r4, #16
   89158:	f844 6c18 	str.w	r6, [r4, #-24]
   8915c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   89160:	f103 0310 	add.w	r3, r3, #16
   89164:	f844 6c14 	str.w	r6, [r4, #-20]
   89168:	d8e8      	bhi.n	8913c <memmove+0x38>
   8916a:	f1a2 0310 	sub.w	r3, r2, #16
   8916e:	f023 030f 	bic.w	r3, r3, #15
   89172:	f002 0e0f 	and.w	lr, r2, #15
   89176:	3310      	adds	r3, #16
   89178:	f1be 0f03 	cmp.w	lr, #3
   8917c:	4419      	add	r1, r3
   8917e:	4403      	add	r3, r0
   89180:	d921      	bls.n	891c6 <memmove+0xc2>
   89182:	460e      	mov	r6, r1
   89184:	4674      	mov	r4, lr
   89186:	1f1d      	subs	r5, r3, #4
   89188:	f856 7b04 	ldr.w	r7, [r6], #4
   8918c:	3c04      	subs	r4, #4
   8918e:	2c03      	cmp	r4, #3
   89190:	f845 7f04 	str.w	r7, [r5, #4]!
   89194:	d8f8      	bhi.n	89188 <memmove+0x84>
   89196:	f1ae 0404 	sub.w	r4, lr, #4
   8919a:	f024 0403 	bic.w	r4, r4, #3
   8919e:	3404      	adds	r4, #4
   891a0:	4421      	add	r1, r4
   891a2:	4423      	add	r3, r4
   891a4:	f002 0203 	and.w	r2, r2, #3
   891a8:	b162      	cbz	r2, 891c4 <memmove+0xc0>
   891aa:	3b01      	subs	r3, #1
   891ac:	440a      	add	r2, r1
   891ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   891b2:	428a      	cmp	r2, r1
   891b4:	f803 4f01 	strb.w	r4, [r3, #1]!
   891b8:	d1f9      	bne.n	891ae <memmove+0xaa>
   891ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   891bc:	4603      	mov	r3, r0
   891be:	e7f3      	b.n	891a8 <memmove+0xa4>
   891c0:	4603      	mov	r3, r0
   891c2:	e7f2      	b.n	891aa <memmove+0xa6>
   891c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   891c6:	4672      	mov	r2, lr
   891c8:	e7ee      	b.n	891a8 <memmove+0xa4>
   891ca:	bf00      	nop

000891cc <_realloc_r>:
   891cc:	2900      	cmp	r1, #0
   891ce:	f000 8094 	beq.w	892fa <_realloc_r+0x12e>
   891d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   891d6:	460c      	mov	r4, r1
   891d8:	4615      	mov	r5, r2
   891da:	b083      	sub	sp, #12
   891dc:	4680      	mov	r8, r0
   891de:	f105 060b 	add.w	r6, r5, #11
   891e2:	f7ff fa19 	bl	88618 <__malloc_lock>
   891e6:	f854 ec04 	ldr.w	lr, [r4, #-4]
   891ea:	2e16      	cmp	r6, #22
   891ec:	f02e 0703 	bic.w	r7, lr, #3
   891f0:	f1a4 0908 	sub.w	r9, r4, #8
   891f4:	d83c      	bhi.n	89270 <_realloc_r+0xa4>
   891f6:	2210      	movs	r2, #16
   891f8:	4616      	mov	r6, r2
   891fa:	42b5      	cmp	r5, r6
   891fc:	d83d      	bhi.n	8927a <_realloc_r+0xae>
   891fe:	4297      	cmp	r7, r2
   89200:	da43      	bge.n	8928a <_realloc_r+0xbe>
   89202:	4bc6      	ldr	r3, [pc, #792]	; (8951c <_realloc_r+0x350>)
   89204:	eb09 0007 	add.w	r0, r9, r7
   89208:	6899      	ldr	r1, [r3, #8]
   8920a:	4288      	cmp	r0, r1
   8920c:	f000 80c3 	beq.w	89396 <_realloc_r+0x1ca>
   89210:	6843      	ldr	r3, [r0, #4]
   89212:	f023 0101 	bic.w	r1, r3, #1
   89216:	4401      	add	r1, r0
   89218:	6849      	ldr	r1, [r1, #4]
   8921a:	07c9      	lsls	r1, r1, #31
   8921c:	d54d      	bpl.n	892ba <_realloc_r+0xee>
   8921e:	f01e 0f01 	tst.w	lr, #1
   89222:	f000 809b 	beq.w	8935c <_realloc_r+0x190>
   89226:	4629      	mov	r1, r5
   89228:	4640      	mov	r0, r8
   8922a:	f7fe fe97 	bl	87f5c <_malloc_r>
   8922e:	4605      	mov	r5, r0
   89230:	2800      	cmp	r0, #0
   89232:	d03b      	beq.n	892ac <_realloc_r+0xe0>
   89234:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89238:	f1a0 0208 	sub.w	r2, r0, #8
   8923c:	f023 0301 	bic.w	r3, r3, #1
   89240:	444b      	add	r3, r9
   89242:	429a      	cmp	r2, r3
   89244:	f000 812b 	beq.w	8949e <_realloc_r+0x2d2>
   89248:	1f3a      	subs	r2, r7, #4
   8924a:	2a24      	cmp	r2, #36	; 0x24
   8924c:	f200 8118 	bhi.w	89480 <_realloc_r+0x2b4>
   89250:	2a13      	cmp	r2, #19
   89252:	f200 80eb 	bhi.w	8942c <_realloc_r+0x260>
   89256:	4603      	mov	r3, r0
   89258:	4622      	mov	r2, r4
   8925a:	6811      	ldr	r1, [r2, #0]
   8925c:	6019      	str	r1, [r3, #0]
   8925e:	6851      	ldr	r1, [r2, #4]
   89260:	6059      	str	r1, [r3, #4]
   89262:	6892      	ldr	r2, [r2, #8]
   89264:	609a      	str	r2, [r3, #8]
   89266:	4621      	mov	r1, r4
   89268:	4640      	mov	r0, r8
   8926a:	f7ff fe4f 	bl	88f0c <_free_r>
   8926e:	e01d      	b.n	892ac <_realloc_r+0xe0>
   89270:	f026 0607 	bic.w	r6, r6, #7
   89274:	2e00      	cmp	r6, #0
   89276:	4632      	mov	r2, r6
   89278:	dabf      	bge.n	891fa <_realloc_r+0x2e>
   8927a:	2500      	movs	r5, #0
   8927c:	230c      	movs	r3, #12
   8927e:	4628      	mov	r0, r5
   89280:	f8c8 3000 	str.w	r3, [r8]
   89284:	b003      	add	sp, #12
   89286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8928a:	4625      	mov	r5, r4
   8928c:	1bbb      	subs	r3, r7, r6
   8928e:	2b0f      	cmp	r3, #15
   89290:	f8d9 2004 	ldr.w	r2, [r9, #4]
   89294:	d81d      	bhi.n	892d2 <_realloc_r+0x106>
   89296:	f002 0201 	and.w	r2, r2, #1
   8929a:	433a      	orrs	r2, r7
   8929c:	eb09 0107 	add.w	r1, r9, r7
   892a0:	f8c9 2004 	str.w	r2, [r9, #4]
   892a4:	684b      	ldr	r3, [r1, #4]
   892a6:	f043 0301 	orr.w	r3, r3, #1
   892aa:	604b      	str	r3, [r1, #4]
   892ac:	4640      	mov	r0, r8
   892ae:	f7ff f9b9 	bl	88624 <__malloc_unlock>
   892b2:	4628      	mov	r0, r5
   892b4:	b003      	add	sp, #12
   892b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   892ba:	f023 0303 	bic.w	r3, r3, #3
   892be:	18f9      	adds	r1, r7, r3
   892c0:	4291      	cmp	r1, r2
   892c2:	db1d      	blt.n	89300 <_realloc_r+0x134>
   892c4:	68c3      	ldr	r3, [r0, #12]
   892c6:	6882      	ldr	r2, [r0, #8]
   892c8:	4625      	mov	r5, r4
   892ca:	60d3      	str	r3, [r2, #12]
   892cc:	460f      	mov	r7, r1
   892ce:	609a      	str	r2, [r3, #8]
   892d0:	e7dc      	b.n	8928c <_realloc_r+0xc0>
   892d2:	f002 0201 	and.w	r2, r2, #1
   892d6:	eb09 0106 	add.w	r1, r9, r6
   892da:	f043 0301 	orr.w	r3, r3, #1
   892de:	4332      	orrs	r2, r6
   892e0:	f8c9 2004 	str.w	r2, [r9, #4]
   892e4:	444f      	add	r7, r9
   892e6:	604b      	str	r3, [r1, #4]
   892e8:	687b      	ldr	r3, [r7, #4]
   892ea:	3108      	adds	r1, #8
   892ec:	f043 0301 	orr.w	r3, r3, #1
   892f0:	607b      	str	r3, [r7, #4]
   892f2:	4640      	mov	r0, r8
   892f4:	f7ff fe0a 	bl	88f0c <_free_r>
   892f8:	e7d8      	b.n	892ac <_realloc_r+0xe0>
   892fa:	4611      	mov	r1, r2
   892fc:	f7fe be2e 	b.w	87f5c <_malloc_r>
   89300:	f01e 0f01 	tst.w	lr, #1
   89304:	d18f      	bne.n	89226 <_realloc_r+0x5a>
   89306:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8930a:	eba9 0a01 	sub.w	sl, r9, r1
   8930e:	f8da 1004 	ldr.w	r1, [sl, #4]
   89312:	f021 0103 	bic.w	r1, r1, #3
   89316:	440b      	add	r3, r1
   89318:	443b      	add	r3, r7
   8931a:	4293      	cmp	r3, r2
   8931c:	db26      	blt.n	8936c <_realloc_r+0x1a0>
   8931e:	4655      	mov	r5, sl
   89320:	68c1      	ldr	r1, [r0, #12]
   89322:	6880      	ldr	r0, [r0, #8]
   89324:	1f3a      	subs	r2, r7, #4
   89326:	60c1      	str	r1, [r0, #12]
   89328:	6088      	str	r0, [r1, #8]
   8932a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8932e:	f8da 100c 	ldr.w	r1, [sl, #12]
   89332:	2a24      	cmp	r2, #36	; 0x24
   89334:	60c1      	str	r1, [r0, #12]
   89336:	6088      	str	r0, [r1, #8]
   89338:	d826      	bhi.n	89388 <_realloc_r+0x1bc>
   8933a:	2a13      	cmp	r2, #19
   8933c:	f240 8081 	bls.w	89442 <_realloc_r+0x276>
   89340:	6821      	ldr	r1, [r4, #0]
   89342:	2a1b      	cmp	r2, #27
   89344:	f8ca 1008 	str.w	r1, [sl, #8]
   89348:	6861      	ldr	r1, [r4, #4]
   8934a:	f8ca 100c 	str.w	r1, [sl, #12]
   8934e:	f200 80ad 	bhi.w	894ac <_realloc_r+0x2e0>
   89352:	f104 0008 	add.w	r0, r4, #8
   89356:	f10a 0210 	add.w	r2, sl, #16
   8935a:	e074      	b.n	89446 <_realloc_r+0x27a>
   8935c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   89360:	eba9 0a03 	sub.w	sl, r9, r3
   89364:	f8da 1004 	ldr.w	r1, [sl, #4]
   89368:	f021 0103 	bic.w	r1, r1, #3
   8936c:	187b      	adds	r3, r7, r1
   8936e:	4293      	cmp	r3, r2
   89370:	f6ff af59 	blt.w	89226 <_realloc_r+0x5a>
   89374:	4655      	mov	r5, sl
   89376:	f8da 100c 	ldr.w	r1, [sl, #12]
   8937a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8937e:	1f3a      	subs	r2, r7, #4
   89380:	2a24      	cmp	r2, #36	; 0x24
   89382:	60c1      	str	r1, [r0, #12]
   89384:	6088      	str	r0, [r1, #8]
   89386:	d9d8      	bls.n	8933a <_realloc_r+0x16e>
   89388:	4621      	mov	r1, r4
   8938a:	4628      	mov	r0, r5
   8938c:	461f      	mov	r7, r3
   8938e:	46d1      	mov	r9, sl
   89390:	f7ff feb8 	bl	89104 <memmove>
   89394:	e77a      	b.n	8928c <_realloc_r+0xc0>
   89396:	6841      	ldr	r1, [r0, #4]
   89398:	f106 0010 	add.w	r0, r6, #16
   8939c:	f021 0b03 	bic.w	fp, r1, #3
   893a0:	44bb      	add	fp, r7
   893a2:	4583      	cmp	fp, r0
   893a4:	da58      	bge.n	89458 <_realloc_r+0x28c>
   893a6:	f01e 0f01 	tst.w	lr, #1
   893aa:	f47f af3c 	bne.w	89226 <_realloc_r+0x5a>
   893ae:	f854 1c08 	ldr.w	r1, [r4, #-8]
   893b2:	eba9 0a01 	sub.w	sl, r9, r1
   893b6:	f8da 1004 	ldr.w	r1, [sl, #4]
   893ba:	f021 0103 	bic.w	r1, r1, #3
   893be:	448b      	add	fp, r1
   893c0:	4558      	cmp	r0, fp
   893c2:	dcd3      	bgt.n	8936c <_realloc_r+0x1a0>
   893c4:	4655      	mov	r5, sl
   893c6:	f8da 100c 	ldr.w	r1, [sl, #12]
   893ca:	f855 0f08 	ldr.w	r0, [r5, #8]!
   893ce:	1f3a      	subs	r2, r7, #4
   893d0:	2a24      	cmp	r2, #36	; 0x24
   893d2:	60c1      	str	r1, [r0, #12]
   893d4:	6088      	str	r0, [r1, #8]
   893d6:	f200 808d 	bhi.w	894f4 <_realloc_r+0x328>
   893da:	2a13      	cmp	r2, #19
   893dc:	f240 8087 	bls.w	894ee <_realloc_r+0x322>
   893e0:	6821      	ldr	r1, [r4, #0]
   893e2:	2a1b      	cmp	r2, #27
   893e4:	f8ca 1008 	str.w	r1, [sl, #8]
   893e8:	6861      	ldr	r1, [r4, #4]
   893ea:	f8ca 100c 	str.w	r1, [sl, #12]
   893ee:	f200 8088 	bhi.w	89502 <_realloc_r+0x336>
   893f2:	f104 0108 	add.w	r1, r4, #8
   893f6:	f10a 0210 	add.w	r2, sl, #16
   893fa:	6808      	ldr	r0, [r1, #0]
   893fc:	6010      	str	r0, [r2, #0]
   893fe:	6848      	ldr	r0, [r1, #4]
   89400:	6050      	str	r0, [r2, #4]
   89402:	6889      	ldr	r1, [r1, #8]
   89404:	6091      	str	r1, [r2, #8]
   89406:	ebab 0206 	sub.w	r2, fp, r6
   8940a:	eb0a 0106 	add.w	r1, sl, r6
   8940e:	f042 0201 	orr.w	r2, r2, #1
   89412:	6099      	str	r1, [r3, #8]
   89414:	604a      	str	r2, [r1, #4]
   89416:	f8da 3004 	ldr.w	r3, [sl, #4]
   8941a:	4640      	mov	r0, r8
   8941c:	f003 0301 	and.w	r3, r3, #1
   89420:	431e      	orrs	r6, r3
   89422:	f8ca 6004 	str.w	r6, [sl, #4]
   89426:	f7ff f8fd 	bl	88624 <__malloc_unlock>
   8942a:	e742      	b.n	892b2 <_realloc_r+0xe6>
   8942c:	6823      	ldr	r3, [r4, #0]
   8942e:	2a1b      	cmp	r2, #27
   89430:	6003      	str	r3, [r0, #0]
   89432:	6863      	ldr	r3, [r4, #4]
   89434:	6043      	str	r3, [r0, #4]
   89436:	d827      	bhi.n	89488 <_realloc_r+0x2bc>
   89438:	f100 0308 	add.w	r3, r0, #8
   8943c:	f104 0208 	add.w	r2, r4, #8
   89440:	e70b      	b.n	8925a <_realloc_r+0x8e>
   89442:	4620      	mov	r0, r4
   89444:	462a      	mov	r2, r5
   89446:	6801      	ldr	r1, [r0, #0]
   89448:	461f      	mov	r7, r3
   8944a:	6011      	str	r1, [r2, #0]
   8944c:	6841      	ldr	r1, [r0, #4]
   8944e:	46d1      	mov	r9, sl
   89450:	6051      	str	r1, [r2, #4]
   89452:	6883      	ldr	r3, [r0, #8]
   89454:	6093      	str	r3, [r2, #8]
   89456:	e719      	b.n	8928c <_realloc_r+0xc0>
   89458:	ebab 0b06 	sub.w	fp, fp, r6
   8945c:	eb09 0106 	add.w	r1, r9, r6
   89460:	f04b 0201 	orr.w	r2, fp, #1
   89464:	6099      	str	r1, [r3, #8]
   89466:	604a      	str	r2, [r1, #4]
   89468:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8946c:	4640      	mov	r0, r8
   8946e:	f003 0301 	and.w	r3, r3, #1
   89472:	431e      	orrs	r6, r3
   89474:	f844 6c04 	str.w	r6, [r4, #-4]
   89478:	f7ff f8d4 	bl	88624 <__malloc_unlock>
   8947c:	4625      	mov	r5, r4
   8947e:	e718      	b.n	892b2 <_realloc_r+0xe6>
   89480:	4621      	mov	r1, r4
   89482:	f7ff fe3f 	bl	89104 <memmove>
   89486:	e6ee      	b.n	89266 <_realloc_r+0x9a>
   89488:	68a3      	ldr	r3, [r4, #8]
   8948a:	2a24      	cmp	r2, #36	; 0x24
   8948c:	6083      	str	r3, [r0, #8]
   8948e:	68e3      	ldr	r3, [r4, #12]
   89490:	60c3      	str	r3, [r0, #12]
   89492:	d018      	beq.n	894c6 <_realloc_r+0x2fa>
   89494:	f100 0310 	add.w	r3, r0, #16
   89498:	f104 0210 	add.w	r2, r4, #16
   8949c:	e6dd      	b.n	8925a <_realloc_r+0x8e>
   8949e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   894a2:	4625      	mov	r5, r4
   894a4:	f023 0303 	bic.w	r3, r3, #3
   894a8:	441f      	add	r7, r3
   894aa:	e6ef      	b.n	8928c <_realloc_r+0xc0>
   894ac:	68a1      	ldr	r1, [r4, #8]
   894ae:	2a24      	cmp	r2, #36	; 0x24
   894b0:	f8ca 1010 	str.w	r1, [sl, #16]
   894b4:	68e1      	ldr	r1, [r4, #12]
   894b6:	f8ca 1014 	str.w	r1, [sl, #20]
   894ba:	d00d      	beq.n	894d8 <_realloc_r+0x30c>
   894bc:	f104 0010 	add.w	r0, r4, #16
   894c0:	f10a 0218 	add.w	r2, sl, #24
   894c4:	e7bf      	b.n	89446 <_realloc_r+0x27a>
   894c6:	6922      	ldr	r2, [r4, #16]
   894c8:	f100 0318 	add.w	r3, r0, #24
   894cc:	6102      	str	r2, [r0, #16]
   894ce:	6961      	ldr	r1, [r4, #20]
   894d0:	f104 0218 	add.w	r2, r4, #24
   894d4:	6141      	str	r1, [r0, #20]
   894d6:	e6c0      	b.n	8925a <_realloc_r+0x8e>
   894d8:	6922      	ldr	r2, [r4, #16]
   894da:	f104 0018 	add.w	r0, r4, #24
   894de:	f8ca 2018 	str.w	r2, [sl, #24]
   894e2:	6961      	ldr	r1, [r4, #20]
   894e4:	f10a 0220 	add.w	r2, sl, #32
   894e8:	f8ca 101c 	str.w	r1, [sl, #28]
   894ec:	e7ab      	b.n	89446 <_realloc_r+0x27a>
   894ee:	4621      	mov	r1, r4
   894f0:	462a      	mov	r2, r5
   894f2:	e782      	b.n	893fa <_realloc_r+0x22e>
   894f4:	4621      	mov	r1, r4
   894f6:	4628      	mov	r0, r5
   894f8:	9301      	str	r3, [sp, #4]
   894fa:	f7ff fe03 	bl	89104 <memmove>
   894fe:	9b01      	ldr	r3, [sp, #4]
   89500:	e781      	b.n	89406 <_realloc_r+0x23a>
   89502:	68a1      	ldr	r1, [r4, #8]
   89504:	2a24      	cmp	r2, #36	; 0x24
   89506:	f8ca 1010 	str.w	r1, [sl, #16]
   8950a:	68e1      	ldr	r1, [r4, #12]
   8950c:	f8ca 1014 	str.w	r1, [sl, #20]
   89510:	d006      	beq.n	89520 <_realloc_r+0x354>
   89512:	f104 0110 	add.w	r1, r4, #16
   89516:	f10a 0218 	add.w	r2, sl, #24
   8951a:	e76e      	b.n	893fa <_realloc_r+0x22e>
   8951c:	200705d4 	.word	0x200705d4
   89520:	6922      	ldr	r2, [r4, #16]
   89522:	f104 0118 	add.w	r1, r4, #24
   89526:	f8ca 2018 	str.w	r2, [sl, #24]
   8952a:	6960      	ldr	r0, [r4, #20]
   8952c:	f10a 0220 	add.w	r2, sl, #32
   89530:	f8ca 001c 	str.w	r0, [sl, #28]
   89534:	e761      	b.n	893fa <_realloc_r+0x22e>
   89536:	bf00      	nop

00089538 <__ascii_wctomb>:
   89538:	b119      	cbz	r1, 89542 <__ascii_wctomb+0xa>
   8953a:	2aff      	cmp	r2, #255	; 0xff
   8953c:	d803      	bhi.n	89546 <__ascii_wctomb+0xe>
   8953e:	700a      	strb	r2, [r1, #0]
   89540:	2101      	movs	r1, #1
   89542:	4608      	mov	r0, r1
   89544:	4770      	bx	lr
   89546:	238a      	movs	r3, #138	; 0x8a
   89548:	f04f 31ff 	mov.w	r1, #4294967295
   8954c:	6003      	str	r3, [r0, #0]
   8954e:	e7f8      	b.n	89542 <__ascii_wctomb+0xa>

00089550 <__gedf2>:
   89550:	f04f 3cff 	mov.w	ip, #4294967295
   89554:	e006      	b.n	89564 <__cmpdf2+0x4>
   89556:	bf00      	nop

00089558 <__ledf2>:
   89558:	f04f 0c01 	mov.w	ip, #1
   8955c:	e002      	b.n	89564 <__cmpdf2+0x4>
   8955e:	bf00      	nop

00089560 <__cmpdf2>:
   89560:	f04f 0c01 	mov.w	ip, #1
   89564:	f84d cd04 	str.w	ip, [sp, #-4]!
   89568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8956c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89574:	bf18      	it	ne
   89576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8957a:	d01b      	beq.n	895b4 <__cmpdf2+0x54>
   8957c:	b001      	add	sp, #4
   8957e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   89582:	bf0c      	ite	eq
   89584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   89588:	ea91 0f03 	teqne	r1, r3
   8958c:	bf02      	ittt	eq
   8958e:	ea90 0f02 	teqeq	r0, r2
   89592:	2000      	moveq	r0, #0
   89594:	4770      	bxeq	lr
   89596:	f110 0f00 	cmn.w	r0, #0
   8959a:	ea91 0f03 	teq	r1, r3
   8959e:	bf58      	it	pl
   895a0:	4299      	cmppl	r1, r3
   895a2:	bf08      	it	eq
   895a4:	4290      	cmpeq	r0, r2
   895a6:	bf2c      	ite	cs
   895a8:	17d8      	asrcs	r0, r3, #31
   895aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   895ae:	f040 0001 	orr.w	r0, r0, #1
   895b2:	4770      	bx	lr
   895b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   895b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   895bc:	d102      	bne.n	895c4 <__cmpdf2+0x64>
   895be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   895c2:	d107      	bne.n	895d4 <__cmpdf2+0x74>
   895c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   895c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   895cc:	d1d6      	bne.n	8957c <__cmpdf2+0x1c>
   895ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   895d2:	d0d3      	beq.n	8957c <__cmpdf2+0x1c>
   895d4:	f85d 0b04 	ldr.w	r0, [sp], #4
   895d8:	4770      	bx	lr
   895da:	bf00      	nop

000895dc <__aeabi_cdrcmple>:
   895dc:	4684      	mov	ip, r0
   895de:	4610      	mov	r0, r2
   895e0:	4662      	mov	r2, ip
   895e2:	468c      	mov	ip, r1
   895e4:	4619      	mov	r1, r3
   895e6:	4663      	mov	r3, ip
   895e8:	e000      	b.n	895ec <__aeabi_cdcmpeq>
   895ea:	bf00      	nop

000895ec <__aeabi_cdcmpeq>:
   895ec:	b501      	push	{r0, lr}
   895ee:	f7ff ffb7 	bl	89560 <__cmpdf2>
   895f2:	2800      	cmp	r0, #0
   895f4:	bf48      	it	mi
   895f6:	f110 0f00 	cmnmi.w	r0, #0
   895fa:	bd01      	pop	{r0, pc}

000895fc <__aeabi_dcmpeq>:
   895fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   89600:	f7ff fff4 	bl	895ec <__aeabi_cdcmpeq>
   89604:	bf0c      	ite	eq
   89606:	2001      	moveq	r0, #1
   89608:	2000      	movne	r0, #0
   8960a:	f85d fb08 	ldr.w	pc, [sp], #8
   8960e:	bf00      	nop

00089610 <__aeabi_dcmplt>:
   89610:	f84d ed08 	str.w	lr, [sp, #-8]!
   89614:	f7ff ffea 	bl	895ec <__aeabi_cdcmpeq>
   89618:	bf34      	ite	cc
   8961a:	2001      	movcc	r0, #1
   8961c:	2000      	movcs	r0, #0
   8961e:	f85d fb08 	ldr.w	pc, [sp], #8
   89622:	bf00      	nop

00089624 <__aeabi_dcmple>:
   89624:	f84d ed08 	str.w	lr, [sp, #-8]!
   89628:	f7ff ffe0 	bl	895ec <__aeabi_cdcmpeq>
   8962c:	bf94      	ite	ls
   8962e:	2001      	movls	r0, #1
   89630:	2000      	movhi	r0, #0
   89632:	f85d fb08 	ldr.w	pc, [sp], #8
   89636:	bf00      	nop

00089638 <__aeabi_dcmpge>:
   89638:	f84d ed08 	str.w	lr, [sp, #-8]!
   8963c:	f7ff ffce 	bl	895dc <__aeabi_cdrcmple>
   89640:	bf94      	ite	ls
   89642:	2001      	movls	r0, #1
   89644:	2000      	movhi	r0, #0
   89646:	f85d fb08 	ldr.w	pc, [sp], #8
   8964a:	bf00      	nop

0008964c <__aeabi_dcmpgt>:
   8964c:	f84d ed08 	str.w	lr, [sp, #-8]!
   89650:	f7ff ffc4 	bl	895dc <__aeabi_cdrcmple>
   89654:	bf34      	ite	cc
   89656:	2001      	movcc	r0, #1
   89658:	2000      	movcs	r0, #0
   8965a:	f85d fb08 	ldr.w	pc, [sp], #8
   8965e:	bf00      	nop

00089660 <__aeabi_dcmpun>:
   89660:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89668:	d102      	bne.n	89670 <__aeabi_dcmpun+0x10>
   8966a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8966e:	d10a      	bne.n	89686 <__aeabi_dcmpun+0x26>
   89670:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89674:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89678:	d102      	bne.n	89680 <__aeabi_dcmpun+0x20>
   8967a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8967e:	d102      	bne.n	89686 <__aeabi_dcmpun+0x26>
   89680:	f04f 0000 	mov.w	r0, #0
   89684:	4770      	bx	lr
   89686:	f04f 0001 	mov.w	r0, #1
   8968a:	4770      	bx	lr

0008968c <__aeabi_d2iz>:
   8968c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   89690:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   89694:	d215      	bcs.n	896c2 <__aeabi_d2iz+0x36>
   89696:	d511      	bpl.n	896bc <__aeabi_d2iz+0x30>
   89698:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8969c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   896a0:	d912      	bls.n	896c8 <__aeabi_d2iz+0x3c>
   896a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   896a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   896aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   896ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   896b2:	fa23 f002 	lsr.w	r0, r3, r2
   896b6:	bf18      	it	ne
   896b8:	4240      	negne	r0, r0
   896ba:	4770      	bx	lr
   896bc:	f04f 0000 	mov.w	r0, #0
   896c0:	4770      	bx	lr
   896c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   896c6:	d105      	bne.n	896d4 <__aeabi_d2iz+0x48>
   896c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   896cc:	bf08      	it	eq
   896ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   896d2:	4770      	bx	lr
   896d4:	f04f 0000 	mov.w	r0, #0
   896d8:	4770      	bx	lr
   896da:	bf00      	nop

000896dc <__aeabi_uldivmod>:
   896dc:	b953      	cbnz	r3, 896f4 <__aeabi_uldivmod+0x18>
   896de:	b94a      	cbnz	r2, 896f4 <__aeabi_uldivmod+0x18>
   896e0:	2900      	cmp	r1, #0
   896e2:	bf08      	it	eq
   896e4:	2800      	cmpeq	r0, #0
   896e6:	bf1c      	itt	ne
   896e8:	f04f 31ff 	movne.w	r1, #4294967295
   896ec:	f04f 30ff 	movne.w	r0, #4294967295
   896f0:	f000 b97a 	b.w	899e8 <__aeabi_idiv0>
   896f4:	f1ad 0c08 	sub.w	ip, sp, #8
   896f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   896fc:	f000 f806 	bl	8970c <__udivmoddi4>
   89700:	f8dd e004 	ldr.w	lr, [sp, #4]
   89704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   89708:	b004      	add	sp, #16
   8970a:	4770      	bx	lr

0008970c <__udivmoddi4>:
   8970c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89710:	468c      	mov	ip, r1
   89712:	460e      	mov	r6, r1
   89714:	4604      	mov	r4, r0
   89716:	9d08      	ldr	r5, [sp, #32]
   89718:	2b00      	cmp	r3, #0
   8971a:	d150      	bne.n	897be <__udivmoddi4+0xb2>
   8971c:	428a      	cmp	r2, r1
   8971e:	4617      	mov	r7, r2
   89720:	d96c      	bls.n	897fc <__udivmoddi4+0xf0>
   89722:	fab2 fe82 	clz	lr, r2
   89726:	f1be 0f00 	cmp.w	lr, #0
   8972a:	d00b      	beq.n	89744 <__udivmoddi4+0x38>
   8972c:	f1ce 0c20 	rsb	ip, lr, #32
   89730:	fa01 f60e 	lsl.w	r6, r1, lr
   89734:	fa20 fc0c 	lsr.w	ip, r0, ip
   89738:	fa02 f70e 	lsl.w	r7, r2, lr
   8973c:	ea4c 0c06 	orr.w	ip, ip, r6
   89740:	fa00 f40e 	lsl.w	r4, r0, lr
   89744:	0c3a      	lsrs	r2, r7, #16
   89746:	fbbc f9f2 	udiv	r9, ip, r2
   8974a:	b2bb      	uxth	r3, r7
   8974c:	fb02 cc19 	mls	ip, r2, r9, ip
   89750:	fb09 fa03 	mul.w	sl, r9, r3
   89754:	ea4f 4814 	mov.w	r8, r4, lsr #16
   89758:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   8975c:	45b2      	cmp	sl, r6
   8975e:	d90a      	bls.n	89776 <__udivmoddi4+0x6a>
   89760:	19f6      	adds	r6, r6, r7
   89762:	f109 31ff 	add.w	r1, r9, #4294967295
   89766:	f080 8125 	bcs.w	899b4 <__udivmoddi4+0x2a8>
   8976a:	45b2      	cmp	sl, r6
   8976c:	f240 8122 	bls.w	899b4 <__udivmoddi4+0x2a8>
   89770:	f1a9 0902 	sub.w	r9, r9, #2
   89774:	443e      	add	r6, r7
   89776:	eba6 060a 	sub.w	r6, r6, sl
   8977a:	fbb6 f0f2 	udiv	r0, r6, r2
   8977e:	fb02 6610 	mls	r6, r2, r0, r6
   89782:	fb00 f303 	mul.w	r3, r0, r3
   89786:	b2a4      	uxth	r4, r4
   89788:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8978c:	42a3      	cmp	r3, r4
   8978e:	d909      	bls.n	897a4 <__udivmoddi4+0x98>
   89790:	19e4      	adds	r4, r4, r7
   89792:	f100 32ff 	add.w	r2, r0, #4294967295
   89796:	f080 810b 	bcs.w	899b0 <__udivmoddi4+0x2a4>
   8979a:	42a3      	cmp	r3, r4
   8979c:	f240 8108 	bls.w	899b0 <__udivmoddi4+0x2a4>
   897a0:	3802      	subs	r0, #2
   897a2:	443c      	add	r4, r7
   897a4:	2100      	movs	r1, #0
   897a6:	1ae4      	subs	r4, r4, r3
   897a8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   897ac:	2d00      	cmp	r5, #0
   897ae:	d062      	beq.n	89876 <__udivmoddi4+0x16a>
   897b0:	2300      	movs	r3, #0
   897b2:	fa24 f40e 	lsr.w	r4, r4, lr
   897b6:	602c      	str	r4, [r5, #0]
   897b8:	606b      	str	r3, [r5, #4]
   897ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   897be:	428b      	cmp	r3, r1
   897c0:	d907      	bls.n	897d2 <__udivmoddi4+0xc6>
   897c2:	2d00      	cmp	r5, #0
   897c4:	d055      	beq.n	89872 <__udivmoddi4+0x166>
   897c6:	2100      	movs	r1, #0
   897c8:	e885 0041 	stmia.w	r5, {r0, r6}
   897cc:	4608      	mov	r0, r1
   897ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   897d2:	fab3 f183 	clz	r1, r3
   897d6:	2900      	cmp	r1, #0
   897d8:	f040 808f 	bne.w	898fa <__udivmoddi4+0x1ee>
   897dc:	42b3      	cmp	r3, r6
   897de:	d302      	bcc.n	897e6 <__udivmoddi4+0xda>
   897e0:	4282      	cmp	r2, r0
   897e2:	f200 80fc 	bhi.w	899de <__udivmoddi4+0x2d2>
   897e6:	1a84      	subs	r4, r0, r2
   897e8:	eb66 0603 	sbc.w	r6, r6, r3
   897ec:	2001      	movs	r0, #1
   897ee:	46b4      	mov	ip, r6
   897f0:	2d00      	cmp	r5, #0
   897f2:	d040      	beq.n	89876 <__udivmoddi4+0x16a>
   897f4:	e885 1010 	stmia.w	r5, {r4, ip}
   897f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   897fc:	b912      	cbnz	r2, 89804 <__udivmoddi4+0xf8>
   897fe:	2701      	movs	r7, #1
   89800:	fbb7 f7f2 	udiv	r7, r7, r2
   89804:	fab7 fe87 	clz	lr, r7
   89808:	f1be 0f00 	cmp.w	lr, #0
   8980c:	d135      	bne.n	8987a <__udivmoddi4+0x16e>
   8980e:	2101      	movs	r1, #1
   89810:	1bf6      	subs	r6, r6, r7
   89812:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   89816:	fa1f f887 	uxth.w	r8, r7
   8981a:	fbb6 f2fc 	udiv	r2, r6, ip
   8981e:	fb0c 6612 	mls	r6, ip, r2, r6
   89822:	fb08 f002 	mul.w	r0, r8, r2
   89826:	0c23      	lsrs	r3, r4, #16
   89828:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   8982c:	42b0      	cmp	r0, r6
   8982e:	d907      	bls.n	89840 <__udivmoddi4+0x134>
   89830:	19f6      	adds	r6, r6, r7
   89832:	f102 33ff 	add.w	r3, r2, #4294967295
   89836:	d202      	bcs.n	8983e <__udivmoddi4+0x132>
   89838:	42b0      	cmp	r0, r6
   8983a:	f200 80d2 	bhi.w	899e2 <__udivmoddi4+0x2d6>
   8983e:	461a      	mov	r2, r3
   89840:	1a36      	subs	r6, r6, r0
   89842:	fbb6 f0fc 	udiv	r0, r6, ip
   89846:	fb0c 6610 	mls	r6, ip, r0, r6
   8984a:	fb08 f800 	mul.w	r8, r8, r0
   8984e:	b2a3      	uxth	r3, r4
   89850:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   89854:	45a0      	cmp	r8, r4
   89856:	d907      	bls.n	89868 <__udivmoddi4+0x15c>
   89858:	19e4      	adds	r4, r4, r7
   8985a:	f100 33ff 	add.w	r3, r0, #4294967295
   8985e:	d202      	bcs.n	89866 <__udivmoddi4+0x15a>
   89860:	45a0      	cmp	r8, r4
   89862:	f200 80b9 	bhi.w	899d8 <__udivmoddi4+0x2cc>
   89866:	4618      	mov	r0, r3
   89868:	eba4 0408 	sub.w	r4, r4, r8
   8986c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   89870:	e79c      	b.n	897ac <__udivmoddi4+0xa0>
   89872:	4629      	mov	r1, r5
   89874:	4628      	mov	r0, r5
   89876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8987a:	fa07 f70e 	lsl.w	r7, r7, lr
   8987e:	f1ce 0320 	rsb	r3, lr, #32
   89882:	fa26 f203 	lsr.w	r2, r6, r3
   89886:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8988a:	fbb2 f1fc 	udiv	r1, r2, ip
   8988e:	fa1f f887 	uxth.w	r8, r7
   89892:	fb0c 2211 	mls	r2, ip, r1, r2
   89896:	fa06 f60e 	lsl.w	r6, r6, lr
   8989a:	fa20 f303 	lsr.w	r3, r0, r3
   8989e:	fb01 f908 	mul.w	r9, r1, r8
   898a2:	4333      	orrs	r3, r6
   898a4:	0c1e      	lsrs	r6, r3, #16
   898a6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   898aa:	45b1      	cmp	r9, r6
   898ac:	fa00 f40e 	lsl.w	r4, r0, lr
   898b0:	d909      	bls.n	898c6 <__udivmoddi4+0x1ba>
   898b2:	19f6      	adds	r6, r6, r7
   898b4:	f101 32ff 	add.w	r2, r1, #4294967295
   898b8:	f080 808c 	bcs.w	899d4 <__udivmoddi4+0x2c8>
   898bc:	45b1      	cmp	r9, r6
   898be:	f240 8089 	bls.w	899d4 <__udivmoddi4+0x2c8>
   898c2:	3902      	subs	r1, #2
   898c4:	443e      	add	r6, r7
   898c6:	eba6 0609 	sub.w	r6, r6, r9
   898ca:	fbb6 f0fc 	udiv	r0, r6, ip
   898ce:	fb0c 6210 	mls	r2, ip, r0, r6
   898d2:	fb00 f908 	mul.w	r9, r0, r8
   898d6:	b29e      	uxth	r6, r3
   898d8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   898dc:	45b1      	cmp	r9, r6
   898de:	d907      	bls.n	898f0 <__udivmoddi4+0x1e4>
   898e0:	19f6      	adds	r6, r6, r7
   898e2:	f100 33ff 	add.w	r3, r0, #4294967295
   898e6:	d271      	bcs.n	899cc <__udivmoddi4+0x2c0>
   898e8:	45b1      	cmp	r9, r6
   898ea:	d96f      	bls.n	899cc <__udivmoddi4+0x2c0>
   898ec:	3802      	subs	r0, #2
   898ee:	443e      	add	r6, r7
   898f0:	eba6 0609 	sub.w	r6, r6, r9
   898f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   898f8:	e78f      	b.n	8981a <__udivmoddi4+0x10e>
   898fa:	f1c1 0720 	rsb	r7, r1, #32
   898fe:	fa22 f807 	lsr.w	r8, r2, r7
   89902:	408b      	lsls	r3, r1
   89904:	ea48 0303 	orr.w	r3, r8, r3
   89908:	fa26 f407 	lsr.w	r4, r6, r7
   8990c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   89910:	fbb4 f9fe 	udiv	r9, r4, lr
   89914:	fa1f fc83 	uxth.w	ip, r3
   89918:	fb0e 4419 	mls	r4, lr, r9, r4
   8991c:	408e      	lsls	r6, r1
   8991e:	fa20 f807 	lsr.w	r8, r0, r7
   89922:	fb09 fa0c 	mul.w	sl, r9, ip
   89926:	ea48 0806 	orr.w	r8, r8, r6
   8992a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8992e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   89932:	45a2      	cmp	sl, r4
   89934:	fa02 f201 	lsl.w	r2, r2, r1
   89938:	fa00 f601 	lsl.w	r6, r0, r1
   8993c:	d908      	bls.n	89950 <__udivmoddi4+0x244>
   8993e:	18e4      	adds	r4, r4, r3
   89940:	f109 30ff 	add.w	r0, r9, #4294967295
   89944:	d244      	bcs.n	899d0 <__udivmoddi4+0x2c4>
   89946:	45a2      	cmp	sl, r4
   89948:	d942      	bls.n	899d0 <__udivmoddi4+0x2c4>
   8994a:	f1a9 0902 	sub.w	r9, r9, #2
   8994e:	441c      	add	r4, r3
   89950:	eba4 040a 	sub.w	r4, r4, sl
   89954:	fbb4 f0fe 	udiv	r0, r4, lr
   89958:	fb0e 4410 	mls	r4, lr, r0, r4
   8995c:	fb00 fc0c 	mul.w	ip, r0, ip
   89960:	fa1f f888 	uxth.w	r8, r8
   89964:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   89968:	45a4      	cmp	ip, r4
   8996a:	d907      	bls.n	8997c <__udivmoddi4+0x270>
   8996c:	18e4      	adds	r4, r4, r3
   8996e:	f100 3eff 	add.w	lr, r0, #4294967295
   89972:	d229      	bcs.n	899c8 <__udivmoddi4+0x2bc>
   89974:	45a4      	cmp	ip, r4
   89976:	d927      	bls.n	899c8 <__udivmoddi4+0x2bc>
   89978:	3802      	subs	r0, #2
   8997a:	441c      	add	r4, r3
   8997c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89980:	fba0 8902 	umull	r8, r9, r0, r2
   89984:	eba4 0c0c 	sub.w	ip, r4, ip
   89988:	45cc      	cmp	ip, r9
   8998a:	46c2      	mov	sl, r8
   8998c:	46ce      	mov	lr, r9
   8998e:	d315      	bcc.n	899bc <__udivmoddi4+0x2b0>
   89990:	d012      	beq.n	899b8 <__udivmoddi4+0x2ac>
   89992:	b155      	cbz	r5, 899aa <__udivmoddi4+0x29e>
   89994:	ebb6 030a 	subs.w	r3, r6, sl
   89998:	eb6c 060e 	sbc.w	r6, ip, lr
   8999c:	fa06 f707 	lsl.w	r7, r6, r7
   899a0:	40cb      	lsrs	r3, r1
   899a2:	431f      	orrs	r7, r3
   899a4:	40ce      	lsrs	r6, r1
   899a6:	602f      	str	r7, [r5, #0]
   899a8:	606e      	str	r6, [r5, #4]
   899aa:	2100      	movs	r1, #0
   899ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   899b0:	4610      	mov	r0, r2
   899b2:	e6f7      	b.n	897a4 <__udivmoddi4+0x98>
   899b4:	4689      	mov	r9, r1
   899b6:	e6de      	b.n	89776 <__udivmoddi4+0x6a>
   899b8:	4546      	cmp	r6, r8
   899ba:	d2ea      	bcs.n	89992 <__udivmoddi4+0x286>
   899bc:	ebb8 0a02 	subs.w	sl, r8, r2
   899c0:	eb69 0e03 	sbc.w	lr, r9, r3
   899c4:	3801      	subs	r0, #1
   899c6:	e7e4      	b.n	89992 <__udivmoddi4+0x286>
   899c8:	4670      	mov	r0, lr
   899ca:	e7d7      	b.n	8997c <__udivmoddi4+0x270>
   899cc:	4618      	mov	r0, r3
   899ce:	e78f      	b.n	898f0 <__udivmoddi4+0x1e4>
   899d0:	4681      	mov	r9, r0
   899d2:	e7bd      	b.n	89950 <__udivmoddi4+0x244>
   899d4:	4611      	mov	r1, r2
   899d6:	e776      	b.n	898c6 <__udivmoddi4+0x1ba>
   899d8:	3802      	subs	r0, #2
   899da:	443c      	add	r4, r7
   899dc:	e744      	b.n	89868 <__udivmoddi4+0x15c>
   899de:	4608      	mov	r0, r1
   899e0:	e706      	b.n	897f0 <__udivmoddi4+0xe4>
   899e2:	3a02      	subs	r2, #2
   899e4:	443e      	add	r6, r7
   899e6:	e72b      	b.n	89840 <__udivmoddi4+0x134>

000899e8 <__aeabi_idiv0>:
   899e8:	4770      	bx	lr
   899ea:	bf00      	nop
   899ec:	00000001 	.word	0x00000001
   899f0:	00000002 	.word	0x00000002
   899f4:	00000004 	.word	0x00000004
   899f8:	00000008 	.word	0x00000008
   899fc:	00000010 	.word	0x00000010
   89a00:	00000020 	.word	0x00000020
   89a04:	00000040 	.word	0x00000040
   89a08:	00000080 	.word	0x00000080
   89a0c:	00000100 	.word	0x00000100
   89a10:	00000200 	.word	0x00000200
   89a14:	00000400 	.word	0x00000400
   89a18:	000f4240 	.word	0x000f4240
   89a1c:	000000c0 	.word	0x000000c0
	...
   89a28:	20695052 	.word	0x20695052
   89a2c:	63616e69 	.word	0x63616e69
   89a30:	65766974 	.word	0x65766974
   89a34:	00000020 	.word	0x00000020
   89a38:	6c6c6142 	.word	0x6c6c6142
   89a3c:	3425203a 	.word	0x3425203a
   89a40:	20202064 	.word	0x20202064
   89a44:	00000000 	.word	0x00000000
   89a48:	62206f6e 	.word	0x62206f6e
   89a4c:	206c6c61 	.word	0x206c6c61
   89a50:	6e756f66 	.word	0x6e756f66
   89a54:	00000064 	.word	0x00000064
   89a58:	6c616f47 	.word	0x6c616f47
   89a5c:	3425203a 	.word	0x3425203a
   89a60:	20202064 	.word	0x20202064
   89a64:	00000000 	.word	0x00000000
   89a68:	67206f6e 	.word	0x67206f6e
   89a6c:	206c616f 	.word	0x206c616f
   89a70:	6e756f66 	.word	0x6e756f66
   89a74:	00000064 	.word	0x00000064
   89a78:	69766148 	.word	0x69766148
   89a7c:	6220676e 	.word	0x6220676e
   89a80:	3a6c6c61 	.word	0x3a6c6c61
   89a84:	64312520 	.word	0x64312520
   89a88:	00000000 	.word	0x00000000
   89a8c:	69442020 	.word	0x69442020
   89a90:	74636572 	.word	0x74636572
   89a94:	3a6e6f69 	.word	0x3a6e6f69
   89a98:	2e332520 	.word	0x2e332520
   89a9c:	20206631 	.word	0x20206631
   89aa0:	00000000 	.word	0x00000000
   89aa4:	696c6163 	.word	0x696c6163
   89aa8:	74617262 	.word	0x74617262
   89aac:	6f632065 	.word	0x6f632065
   89ab0:	7361706d 	.word	0x7361706d
   89ab4:	00000073 	.word	0x00000073
   89ab8:	69442020 	.word	0x69442020
   89abc:	74636572 	.word	0x74636572
   89ac0:	3a6e6f69 	.word	0x3a6e6f69
   89ac4:	64312520 	.word	0x64312520
   89ac8:	00002020 	.word	0x00002020
   89acc:	74756873 	.word	0x74756873
   89ad0:	676e6974 	.word	0x676e6974
   89ad4:	776f6420 	.word	0x776f6420
   89ad8:	2e2e2e6e 	.word	0x2e2e2e6e
   89adc:	00000000 	.word	0x00000000
   89ae0:	666e6f63 	.word	0x666e6f63
   89ae4:	206d7269 	.word	0x206d7269
   89ae8:	74756873 	.word	0x74756873
   89aec:	6e776f64 	.word	0x6e776f64
   89af0:	0000003f 	.word	0x0000003f
   89af4:	20202020 	.word	0x20202020
   89af8:	534f6f6e 	.word	0x534f6f6e
   89afc:	454e4f20 	.word	0x454e4f20
   89b00:	00000000 	.word	0x00000000
   89b04:	74614d20 	.word	0x74614d20
   89b08:	00006863 	.word	0x00006863
   89b0c:	6e655320 	.word	0x6e655320
   89b10:	73726f73 	.word	0x73726f73
   89b14:	00000000 	.word	0x00000000
   89b18:	74655320 	.word	0x74655320
   89b1c:	676e6974 	.word	0x676e6974
   89b20:	00000073 	.word	0x00000073
   89b24:	00089af4 	.word	0x00089af4
   89b28:	00089b04 	.word	0x00089b04
   89b2c:	00089b0c 	.word	0x00089b0c
   89b30:	00089b18 	.word	0x00089b18
   89b34:	6c614220 	.word	0x6c614220
   89b38:	0000006c 	.word	0x0000006c
   89b3c:	6d6f4320 	.word	0x6d6f4320
   89b40:	73736170 	.word	0x73736170
   89b44:	00000000 	.word	0x00000000
   89b48:	6e694c20 	.word	0x6e694c20
   89b4c:	00000065 	.word	0x00000065
   89b50:	00000020 	.word	0x00000020
   89b54:	00089b34 	.word	0x00089b34
   89b58:	00089b3c 	.word	0x00089b3c
   89b5c:	00089b48 	.word	0x00089b48
   89b60:	00089b50 	.word	0x00089b50
   89b64:	00089b50 	.word	0x00089b50
   89b68:	00089b50 	.word	0x00089b50
   89b6c:	00089b50 	.word	0x00089b50
   89b70:	00089b50 	.word	0x00089b50
   89b74:	0000003e 	.word	0x0000003e
   89b78:	25753325 	.word	0x25753325
   89b7c:	00000025 	.word	0x00000025
   89b80:	75322520 	.word	0x75322520
   89b84:	00002525 	.word	0x00002525
   89b88:	31252020 	.word	0x31252020
   89b8c:	00252575 	.word	0x00252575
   89b90:	746f6f62 	.word	0x746f6f62
   89b94:	20676e69 	.word	0x20676e69
   89b98:	534f6f6e 	.word	0x534f6f6e
   89b9c:	00202020 	.word	0x00202020
   89ba0:	0000002e 	.word	0x0000002e

00089ba4 <_global_impure_ptr>:
   89ba4:	200701a8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   89bb4:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   89bc4:	46454443 00000000 33323130 37363534     CDEF....01234567
   89bd4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   89be4:	0000296c 00000030                       l)..0...

00089bec <blanks.7223>:
   89bec:	20202020 20202020 20202020 20202020                     

00089bfc <zeroes.7224>:
   89bfc:	30303030 30303030 30303030 30303030     0000000000000000
   89c0c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   89c1c:	00000000                                ....

00089c20 <__mprec_bigtens>:
   89c20:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   89c30:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   89c40:	7f73bf3c 75154fdd                       <.s..O.u

00089c48 <__mprec_tens>:
   89c48:	00000000 3ff00000 00000000 40240000     .......?......$@
   89c58:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   89c68:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   89c78:	00000000 412e8480 00000000 416312d0     .......A......cA
   89c88:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   89c98:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   89ca8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   89cb8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   89cc8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   89cd8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   89ce8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   89cf8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   89d08:	79d99db4 44ea7843                       ...yCx.D

00089d10 <p05.6055>:
   89d10:	00000005 00000019 0000007d 00000043     ........}...C...
   89d20:	49534f50 00000058 0000002e              POSIX.......

00089d2c <_ctype_>:
   89d2c:	20202000 20202020 28282020 20282828     .         ((((( 
   89d3c:	20202020 20202020 20202020 20202020                     
   89d4c:	10108820 10101010 10101010 10101010      ...............
   89d5c:	04040410 04040404 10040404 10101010     ................
   89d6c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   89d7c:	01010101 01010101 01010101 10101010     ................
   89d8c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   89d9c:	02020202 02020202 02020202 10101010     ................
   89dac:	00000020 00000000 00000000 00000000      ...............
	...

00089e30 <_init>:
   89e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89e32:	bf00      	nop
   89e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89e36:	bc08      	pop	{r3}
   89e38:	469e      	mov	lr, r3
   89e3a:	4770      	bx	lr

00089e3c <__init_array_start>:
   89e3c:	00086f75 	.word	0x00086f75

00089e40 <__frame_dummy_init_array_entry>:
   89e40:	00080119                                ....

00089e44 <_fini>:
   89e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89e46:	bf00      	nop
   89e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89e4a:	bc08      	pop	{r3}
   89e4c:	469e      	mov	lr, r3
   89e4e:	4770      	bx	lr

00089e50 <__fini_array_start>:
   89e50:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007019c 	.word	0x2007019c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <print_menu>:
2007018c:	00000101                                         .

2007018d <allow_leds>:
2007018d:	02000001                                         ...

20070190 <menu_info>:
20070190:	04020202 03010101 01010101              ............

2007019c <SystemCoreClock>:
2007019c:	003d0900                                ..=.

200701a0 <update_dots>:
200701a0:	00000001                                ....

200701a4 <_impure_ptr>:
200701a4:	200701a8                                ... 

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	20070fdc                                ... 

200705d4 <__malloc_av_>:
	...
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 

200709dc <__malloc_sbrk_base>:
200709dc:	ffffffff                                ....

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__global_locale>:
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00000043 00000000 00000000 00000000     C...............
	...
20070ac4:	00089539 000890d9 00000000 00089d2c     9...........,...
20070ad4:	00089d28 00089bc8 00089bc8 00089bc8     (...............
20070ae4:	00089bc8 00089bc8 00089bc8 00089bc8     ................
20070af4:	00089bc8 00089bc8 ffffffff ffffffff     ................
20070b04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
