
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008254  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00088254  00088254  00018254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b50  20070000  0008825c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000510  20070b50  00088dac  00020b50  2**2
                  ALLOC
  4 .stack        00002000  20071060  000892bc  00020b50  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b79  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015b3a  00000000  00000000  00020bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e88  00000000  00000000  0003670c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006ac0  00000000  00000000  00039594  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000bd0  00000000  00000000  00040054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b38  00000000  00000000  00040c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006c02  00000000  00000000  0004175c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fdd7  00000000  00000000  0004835e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00067eed  00000000  00000000  00058135  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003d38  00000000  00000000  000c0024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	60 30 07 20 59 2e 08 00 51 2e 08 00 51 2e 08 00     `0. Y...Q...Q...
   80010:	51 2e 08 00 51 2e 08 00 51 2e 08 00 00 00 00 00     Q...Q...Q.......
	...
   8002c:	51 2e 08 00 51 2e 08 00 00 00 00 00 51 2e 08 00     Q...Q.......Q...
   8003c:	55 1f 08 00 51 2e 08 00 51 2e 08 00 51 2e 08 00     U...Q...Q...Q...
   8004c:	51 2e 08 00 51 2e 08 00 51 2e 08 00 51 2e 08 00     Q...Q...Q...Q...
   8005c:	51 2e 08 00 51 2e 08 00 51 2e 08 00 00 00 00 00     Q...Q...Q.......
   8006c:	51 2e 08 00 51 2e 08 00 51 2e 08 00 51 2e 08 00     Q...Q...Q...Q...
	...
   80084:	51 2e 08 00 51 2e 08 00 51 2e 08 00 51 2e 08 00     Q...Q...Q...Q...
   80094:	51 2e 08 00 21 0b 08 00 51 2e 08 00 51 2e 08 00     Q...!...Q...Q...
   800a4:	00 00 00 00 51 2e 08 00 51 2e 08 00 51 2e 08 00     ....Q...Q...Q...
   800b4:	51 2e 08 00 51 2e 08 00 51 2e 08 00 51 2e 08 00     Q...Q...Q...Q...
   800c4:	51 2e 08 00 51 2e 08 00 51 2e 08 00 51 2e 08 00     Q...Q...Q...Q...
   800d4:	51 2e 08 00 51 2e 08 00 75 07 08 00 51 2e 08 00     Q...Q...u...Q...
   800e4:	51 2e 08 00 51 2e 08 00 51 2e 08 00 51 2e 08 00     Q...Q...Q...Q...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b50 	.word	0x20070b50
   80110:	00000000 	.word	0x00000000
   80114:	0008825c 	.word	0x0008825c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008825c 	.word	0x0008825c
   80154:	20070b54 	.word	0x20070b54
   80158:	0008825c 	.word	0x0008825c
   8015c:	00000000 	.word	0x00000000

00080160 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   80160:	b580      	push	{r7, lr}
   80162:	b082      	sub	sp, #8
   80164:	af00      	add	r7, sp, #0
   80166:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   80168:	6878      	ldr	r0, [r7, #4]
   8016a:	4b04      	ldr	r3, [pc, #16]	; (8017c <usart_spi_enable+0x1c>)
   8016c:	4798      	blx	r3
	usart_enable_rx(p_usart);
   8016e:	6878      	ldr	r0, [r7, #4]
   80170:	4b03      	ldr	r3, [pc, #12]	; (80180 <usart_spi_enable+0x20>)
   80172:	4798      	blx	r3
}
   80174:	bf00      	nop
   80176:	3708      	adds	r7, #8
   80178:	46bd      	mov	sp, r7
   8017a:	bd80      	pop	{r7, pc}
   8017c:	000803d1 	.word	0x000803d1
   80180:	00080419 	.word	0x00080419

00080184 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   80184:	b580      	push	{r7, lr}
   80186:	b082      	sub	sp, #8
   80188:	af00      	add	r7, sp, #0
   8018a:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   8018c:	6878      	ldr	r0, [r7, #4]
   8018e:	4b04      	ldr	r3, [pc, #16]	; (801a0 <usart_spi_disable+0x1c>)
   80190:	4798      	blx	r3
	usart_disable_rx(p_usart);
   80192:	6878      	ldr	r0, [r7, #4]
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <usart_spi_disable+0x20>)
   80196:	4798      	blx	r3
}
   80198:	bf00      	nop
   8019a:	3708      	adds	r7, #8
   8019c:	46bd      	mov	sp, r7
   8019e:	bd80      	pop	{r7, pc}
   801a0:	000803e9 	.word	0x000803e9
   801a4:	00080431 	.word	0x00080431

000801a8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801a8:	b480      	push	{r7}
   801aa:	b085      	sub	sp, #20
   801ac:	af00      	add	r7, sp, #0
   801ae:	60f8      	str	r0, [r7, #12]
   801b0:	60b9      	str	r1, [r7, #8]
   801b2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801b4:	68bb      	ldr	r3, [r7, #8]
   801b6:	2b00      	cmp	r3, #0
   801b8:	d007      	beq.n	801ca <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   801ba:	68bb      	ldr	r3, [r7, #8]
   801bc:	681a      	ldr	r2, [r3, #0]
   801be:	68fb      	ldr	r3, [r7, #12]
   801c0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   801c2:	68bb      	ldr	r3, [r7, #8]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	68fb      	ldr	r3, [r7, #12]
   801c8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   801ca:	687b      	ldr	r3, [r7, #4]
   801cc:	2b00      	cmp	r3, #0
   801ce:	d007      	beq.n	801e0 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	681a      	ldr	r2, [r3, #0]
   801d4:	68fb      	ldr	r3, [r7, #12]
   801d6:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   801d8:	687b      	ldr	r3, [r7, #4]
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	68fb      	ldr	r3, [r7, #12]
   801de:	61da      	str	r2, [r3, #28]
	}
}
   801e0:	bf00      	nop
   801e2:	3714      	adds	r7, #20
   801e4:	46bd      	mov	sp, r7
   801e6:	bc80      	pop	{r7}
   801e8:	4770      	bx	lr

000801ea <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   801ea:	b480      	push	{r7}
   801ec:	b083      	sub	sp, #12
   801ee:	af00      	add	r7, sp, #0
   801f0:	6078      	str	r0, [r7, #4]
   801f2:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   801f4:	683a      	ldr	r2, [r7, #0]
   801f6:	f240 1301 	movw	r3, #257	; 0x101
   801fa:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   801fc:	687a      	ldr	r2, [r7, #4]
   801fe:	6213      	str	r3, [r2, #32]
}
   80200:	bf00      	nop
   80202:	370c      	adds	r7, #12
   80204:	46bd      	mov	sp, r7
   80206:	bc80      	pop	{r7}
   80208:	4770      	bx	lr

0008020a <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8020a:	b480      	push	{r7}
   8020c:	b083      	sub	sp, #12
   8020e:	af00      	add	r7, sp, #0
   80210:	6078      	str	r0, [r7, #4]
   80212:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   80214:	683a      	ldr	r2, [r7, #0]
   80216:	f240 2302 	movw	r3, #514	; 0x202
   8021a:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8021c:	687a      	ldr	r2, [r7, #4]
   8021e:	6213      	str	r3, [r2, #32]
}
   80220:	bf00      	nop
   80222:	370c      	adds	r7, #12
   80224:	46bd      	mov	sp, r7
   80226:	bc80      	pop	{r7}
   80228:	4770      	bx	lr

0008022a <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8022a:	b480      	push	{r7}
   8022c:	b087      	sub	sp, #28
   8022e:	af00      	add	r7, sp, #0
   80230:	60f8      	str	r0, [r7, #12]
   80232:	60b9      	str	r1, [r7, #8]
   80234:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   80236:	68bb      	ldr	r3, [r7, #8]
   80238:	085a      	lsrs	r2, r3, #1
   8023a:	687b      	ldr	r3, [r7, #4]
   8023c:	441a      	add	r2, r3
   8023e:	68bb      	ldr	r3, [r7, #8]
   80240:	fbb2 f3f3 	udiv	r3, r2, r3
   80244:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   80246:	697b      	ldr	r3, [r7, #20]
   80248:	2b03      	cmp	r3, #3
   8024a:	d903      	bls.n	80254 <usart_set_spi_master_baudrate+0x2a>
   8024c:	697b      	ldr	r3, [r7, #20]
   8024e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   80252:	d301      	bcc.n	80258 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   80254:	2301      	movs	r3, #1
   80256:	e003      	b.n	80260 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   80258:	68fb      	ldr	r3, [r7, #12]
   8025a:	697a      	ldr	r2, [r7, #20]
   8025c:	621a      	str	r2, [r3, #32]

	return 0;
   8025e:	2300      	movs	r3, #0
}
   80260:	4618      	mov	r0, r3
   80262:	371c      	adds	r7, #28
   80264:	46bd      	mov	sp, r7
   80266:	bc80      	pop	{r7}
   80268:	4770      	bx	lr
	...

0008026c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8026c:	b580      	push	{r7, lr}
   8026e:	b082      	sub	sp, #8
   80270:	af00      	add	r7, sp, #0
   80272:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   80274:	6878      	ldr	r0, [r7, #4]
   80276:	4b0d      	ldr	r3, [pc, #52]	; (802ac <usart_reset+0x40>)
   80278:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8027a:	687b      	ldr	r3, [r7, #4]
   8027c:	2200      	movs	r2, #0
   8027e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   80280:	687b      	ldr	r3, [r7, #4]
   80282:	2200      	movs	r2, #0
   80284:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80286:	687b      	ldr	r3, [r7, #4]
   80288:	2200      	movs	r2, #0
   8028a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8028c:	6878      	ldr	r0, [r7, #4]
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <usart_reset+0x44>)
   80290:	4798      	blx	r3
	usart_reset_rx(p_usart);
   80292:	6878      	ldr	r0, [r7, #4]
   80294:	4b07      	ldr	r3, [pc, #28]	; (802b4 <usart_reset+0x48>)
   80296:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   80298:	6878      	ldr	r0, [r7, #4]
   8029a:	4b07      	ldr	r3, [pc, #28]	; (802b8 <usart_reset+0x4c>)
   8029c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8029e:	6878      	ldr	r0, [r7, #4]
   802a0:	4b06      	ldr	r3, [pc, #24]	; (802bc <usart_reset+0x50>)
   802a2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   802a4:	bf00      	nop
   802a6:	3708      	adds	r7, #8
   802a8:	46bd      	mov	sp, r7
   802aa:	bd80      	pop	{r7, pc}
   802ac:	000804c9 	.word	0x000804c9
   802b0:	00080401 	.word	0x00080401
   802b4:	00080449 	.word	0x00080449
   802b8:	00080461 	.word	0x00080461
   802bc:	0008047b 	.word	0x0008047b

000802c0 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   802c0:	b580      	push	{r7, lr}
   802c2:	b084      	sub	sp, #16
   802c4:	af00      	add	r7, sp, #0
   802c6:	60f8      	str	r0, [r7, #12]
   802c8:	60b9      	str	r1, [r7, #8]
   802ca:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   802cc:	68f8      	ldr	r0, [r7, #12]
   802ce:	4b3d      	ldr	r3, [pc, #244]	; (803c4 <usart_init_spi_master+0x104>)
   802d0:	4798      	blx	r3

	ul_reg_val = 0;
   802d2:	4b3d      	ldr	r3, [pc, #244]	; (803c8 <usart_init_spi_master+0x108>)
   802d4:	2200      	movs	r2, #0
   802d6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   802d8:	68bb      	ldr	r3, [r7, #8]
   802da:	2b00      	cmp	r3, #0
   802dc:	d00d      	beq.n	802fa <usart_init_spi_master+0x3a>
   802de:	68bb      	ldr	r3, [r7, #8]
   802e0:	689b      	ldr	r3, [r3, #8]
   802e2:	2b03      	cmp	r3, #3
   802e4:	d809      	bhi.n	802fa <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   802e6:	68bb      	ldr	r3, [r7, #8]
   802e8:	681b      	ldr	r3, [r3, #0]
   802ea:	687a      	ldr	r2, [r7, #4]
   802ec:	4619      	mov	r1, r3
   802ee:	68f8      	ldr	r0, [r7, #12]
   802f0:	4b36      	ldr	r3, [pc, #216]	; (803cc <usart_init_spi_master+0x10c>)
   802f2:	4798      	blx	r3
   802f4:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   802f6:	2b00      	cmp	r3, #0
   802f8:	d001      	beq.n	802fe <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   802fa:	2301      	movs	r3, #1
   802fc:	e05d      	b.n	803ba <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   802fe:	68bb      	ldr	r3, [r7, #8]
   80300:	685a      	ldr	r2, [r3, #4]
   80302:	4b31      	ldr	r3, [pc, #196]	; (803c8 <usart_init_spi_master+0x108>)
   80304:	681b      	ldr	r3, [r3, #0]
   80306:	4313      	orrs	r3, r2
   80308:	4a2f      	ldr	r2, [pc, #188]	; (803c8 <usart_init_spi_master+0x108>)
   8030a:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   8030c:	68bb      	ldr	r3, [r7, #8]
   8030e:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   80310:	4b2d      	ldr	r3, [pc, #180]	; (803c8 <usart_init_spi_master+0x108>)
   80312:	681b      	ldr	r3, [r3, #0]
   80314:	4313      	orrs	r3, r2
   80316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   8031a:	f043 030e 	orr.w	r3, r3, #14
   8031e:	4a2a      	ldr	r2, [pc, #168]	; (803c8 <usart_init_spi_master+0x108>)
   80320:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   80322:	68bb      	ldr	r3, [r7, #8]
   80324:	689b      	ldr	r3, [r3, #8]
   80326:	2b03      	cmp	r3, #3
   80328:	d83e      	bhi.n	803a8 <usart_init_spi_master+0xe8>
   8032a:	a201      	add	r2, pc, #4	; (adr r2, 80330 <usart_init_spi_master+0x70>)
   8032c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80330:	00080341 	.word	0x00080341
   80334:	0008035b 	.word	0x0008035b
   80338:	00080375 	.word	0x00080375
   8033c:	0008038f 	.word	0x0008038f
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   80340:	4b21      	ldr	r3, [pc, #132]	; (803c8 <usart_init_spi_master+0x108>)
   80342:	681b      	ldr	r3, [r3, #0]
   80344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80348:	4a1f      	ldr	r2, [pc, #124]	; (803c8 <usart_init_spi_master+0x108>)
   8034a:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8034c:	4b1e      	ldr	r3, [pc, #120]	; (803c8 <usart_init_spi_master+0x108>)
   8034e:	681b      	ldr	r3, [r3, #0]
   80350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80354:	4a1c      	ldr	r2, [pc, #112]	; (803c8 <usart_init_spi_master+0x108>)
   80356:	6013      	str	r3, [r2, #0]
		break;
   80358:	e027      	b.n	803aa <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8035a:	4b1b      	ldr	r3, [pc, #108]	; (803c8 <usart_init_spi_master+0x108>)
   8035c:	681b      	ldr	r3, [r3, #0]
   8035e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80362:	4a19      	ldr	r2, [pc, #100]	; (803c8 <usart_init_spi_master+0x108>)
   80364:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   80366:	4b18      	ldr	r3, [pc, #96]	; (803c8 <usart_init_spi_master+0x108>)
   80368:	681b      	ldr	r3, [r3, #0]
   8036a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8036e:	4a16      	ldr	r2, [pc, #88]	; (803c8 <usart_init_spi_master+0x108>)
   80370:	6013      	str	r3, [r2, #0]
		break;
   80372:	e01a      	b.n	803aa <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   80374:	4b14      	ldr	r3, [pc, #80]	; (803c8 <usart_init_spi_master+0x108>)
   80376:	681b      	ldr	r3, [r3, #0]
   80378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8037c:	4a12      	ldr	r2, [pc, #72]	; (803c8 <usart_init_spi_master+0x108>)
   8037e:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   80380:	4b11      	ldr	r3, [pc, #68]	; (803c8 <usart_init_spi_master+0x108>)
   80382:	681b      	ldr	r3, [r3, #0]
   80384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80388:	4a0f      	ldr	r2, [pc, #60]	; (803c8 <usart_init_spi_master+0x108>)
   8038a:	6013      	str	r3, [r2, #0]
		break;
   8038c:	e00d      	b.n	803aa <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8038e:	4b0e      	ldr	r3, [pc, #56]	; (803c8 <usart_init_spi_master+0x108>)
   80390:	681b      	ldr	r3, [r3, #0]
   80392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80396:	4a0c      	ldr	r2, [pc, #48]	; (803c8 <usart_init_spi_master+0x108>)
   80398:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8039a:	4b0b      	ldr	r3, [pc, #44]	; (803c8 <usart_init_spi_master+0x108>)
   8039c:	681b      	ldr	r3, [r3, #0]
   8039e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   803a2:	4a09      	ldr	r2, [pc, #36]	; (803c8 <usart_init_spi_master+0x108>)
   803a4:	6013      	str	r3, [r2, #0]
		break;
   803a6:	e000      	b.n	803aa <usart_init_spi_master+0xea>

	default:
		break;
   803a8:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   803aa:	68fb      	ldr	r3, [r7, #12]
   803ac:	685a      	ldr	r2, [r3, #4]
   803ae:	4b06      	ldr	r3, [pc, #24]	; (803c8 <usart_init_spi_master+0x108>)
   803b0:	681b      	ldr	r3, [r3, #0]
   803b2:	431a      	orrs	r2, r3
   803b4:	68fb      	ldr	r3, [r7, #12]
   803b6:	605a      	str	r2, [r3, #4]

	return 0;
   803b8:	2300      	movs	r3, #0
}
   803ba:	4618      	mov	r0, r3
   803bc:	3710      	adds	r7, #16
   803be:	46bd      	mov	sp, r7
   803c0:	bd80      	pop	{r7, pc}
   803c2:	bf00      	nop
   803c4:	0008026d 	.word	0x0008026d
   803c8:	20070b6c 	.word	0x20070b6c
   803cc:	0008022b 	.word	0x0008022b

000803d0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   803d0:	b480      	push	{r7}
   803d2:	b083      	sub	sp, #12
   803d4:	af00      	add	r7, sp, #0
   803d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   803d8:	687b      	ldr	r3, [r7, #4]
   803da:	2240      	movs	r2, #64	; 0x40
   803dc:	601a      	str	r2, [r3, #0]
}
   803de:	bf00      	nop
   803e0:	370c      	adds	r7, #12
   803e2:	46bd      	mov	sp, r7
   803e4:	bc80      	pop	{r7}
   803e6:	4770      	bx	lr

000803e8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   803e8:	b480      	push	{r7}
   803ea:	b083      	sub	sp, #12
   803ec:	af00      	add	r7, sp, #0
   803ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   803f0:	687b      	ldr	r3, [r7, #4]
   803f2:	2280      	movs	r2, #128	; 0x80
   803f4:	601a      	str	r2, [r3, #0]
}
   803f6:	bf00      	nop
   803f8:	370c      	adds	r7, #12
   803fa:	46bd      	mov	sp, r7
   803fc:	bc80      	pop	{r7}
   803fe:	4770      	bx	lr

00080400 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   80400:	b480      	push	{r7}
   80402:	b083      	sub	sp, #12
   80404:	af00      	add	r7, sp, #0
   80406:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80408:	687b      	ldr	r3, [r7, #4]
   8040a:	2288      	movs	r2, #136	; 0x88
   8040c:	601a      	str	r2, [r3, #0]
}
   8040e:	bf00      	nop
   80410:	370c      	adds	r7, #12
   80412:	46bd      	mov	sp, r7
   80414:	bc80      	pop	{r7}
   80416:	4770      	bx	lr

00080418 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   80418:	b480      	push	{r7}
   8041a:	b083      	sub	sp, #12
   8041c:	af00      	add	r7, sp, #0
   8041e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   80420:	687b      	ldr	r3, [r7, #4]
   80422:	2210      	movs	r2, #16
   80424:	601a      	str	r2, [r3, #0]
}
   80426:	bf00      	nop
   80428:	370c      	adds	r7, #12
   8042a:	46bd      	mov	sp, r7
   8042c:	bc80      	pop	{r7}
   8042e:	4770      	bx	lr

00080430 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   80430:	b480      	push	{r7}
   80432:	b083      	sub	sp, #12
   80434:	af00      	add	r7, sp, #0
   80436:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   80438:	687b      	ldr	r3, [r7, #4]
   8043a:	2220      	movs	r2, #32
   8043c:	601a      	str	r2, [r3, #0]
}
   8043e:	bf00      	nop
   80440:	370c      	adds	r7, #12
   80442:	46bd      	mov	sp, r7
   80444:	bc80      	pop	{r7}
   80446:	4770      	bx	lr

00080448 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   80448:	b480      	push	{r7}
   8044a:	b083      	sub	sp, #12
   8044c:	af00      	add	r7, sp, #0
   8044e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80450:	687b      	ldr	r3, [r7, #4]
   80452:	2224      	movs	r2, #36	; 0x24
   80454:	601a      	str	r2, [r3, #0]
}
   80456:	bf00      	nop
   80458:	370c      	adds	r7, #12
   8045a:	46bd      	mov	sp, r7
   8045c:	bc80      	pop	{r7}
   8045e:	4770      	bx	lr

00080460 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   80460:	b480      	push	{r7}
   80462:	b083      	sub	sp, #12
   80464:	af00      	add	r7, sp, #0
   80466:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   80468:	687b      	ldr	r3, [r7, #4]
   8046a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8046e:	601a      	str	r2, [r3, #0]
}
   80470:	bf00      	nop
   80472:	370c      	adds	r7, #12
   80474:	46bd      	mov	sp, r7
   80476:	bc80      	pop	{r7}
   80478:	4770      	bx	lr

0008047a <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   8047a:	b480      	push	{r7}
   8047c:	b083      	sub	sp, #12
   8047e:	af00      	add	r7, sp, #0
   80480:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   80482:	687b      	ldr	r3, [r7, #4]
   80484:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80488:	601a      	str	r2, [r3, #0]
}
   8048a:	bf00      	nop
   8048c:	370c      	adds	r7, #12
   8048e:	46bd      	mov	sp, r7
   80490:	bc80      	pop	{r7}
   80492:	4770      	bx	lr

00080494 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
   80494:	b480      	push	{r7}
   80496:	b083      	sub	sp, #12
   80498:	af00      	add	r7, sp, #0
   8049a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
   8049c:	687b      	ldr	r3, [r7, #4]
   8049e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   804a2:	601a      	str	r2, [r3, #0]
}
   804a4:	bf00      	nop
   804a6:	370c      	adds	r7, #12
   804a8:	46bd      	mov	sp, r7
   804aa:	bc80      	pop	{r7}
   804ac:	4770      	bx	lr

000804ae <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   804ae:	b480      	push	{r7}
   804b0:	b083      	sub	sp, #12
   804b2:	af00      	add	r7, sp, #0
   804b4:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   804b6:	687b      	ldr	r3, [r7, #4]
   804b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   804bc:	601a      	str	r2, [r3, #0]
}
   804be:	bf00      	nop
   804c0:	370c      	adds	r7, #12
   804c2:	46bd      	mov	sp, r7
   804c4:	bc80      	pop	{r7}
   804c6:	4770      	bx	lr

000804c8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   804c8:	b480      	push	{r7}
   804ca:	b083      	sub	sp, #12
   804cc:	af00      	add	r7, sp, #0
   804ce:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   804d0:	687b      	ldr	r3, [r7, #4]
   804d2:	4a04      	ldr	r2, [pc, #16]	; (804e4 <usart_disable_writeprotect+0x1c>)
   804d4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   804d8:	bf00      	nop
   804da:	370c      	adds	r7, #12
   804dc:	46bd      	mov	sp, r7
   804de:	bc80      	pop	{r7}
   804e0:	4770      	bx	lr
   804e2:	bf00      	nop
   804e4:	55534100 	.word	0x55534100

000804e8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   804e8:	b480      	push	{r7}
   804ea:	b083      	sub	sp, #12
   804ec:	af00      	add	r7, sp, #0
   804ee:	4603      	mov	r3, r0
   804f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   804f2:	4908      	ldr	r1, [pc, #32]	; (80514 <NVIC_EnableIRQ+0x2c>)
   804f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   804f8:	095b      	lsrs	r3, r3, #5
   804fa:	79fa      	ldrb	r2, [r7, #7]
   804fc:	f002 021f 	and.w	r2, r2, #31
   80500:	2001      	movs	r0, #1
   80502:	fa00 f202 	lsl.w	r2, r0, r2
   80506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8050a:	bf00      	nop
   8050c:	370c      	adds	r7, #12
   8050e:	46bd      	mov	sp, r7
   80510:	bc80      	pop	{r7}
   80512:	4770      	bx	lr
   80514:	e000e100 	.word	0xe000e100

00080518 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80518:	b480      	push	{r7}
   8051a:	b083      	sub	sp, #12
   8051c:	af00      	add	r7, sp, #0
   8051e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80520:	687b      	ldr	r3, [r7, #4]
   80522:	2b07      	cmp	r3, #7
   80524:	d825      	bhi.n	80572 <osc_get_rate+0x5a>
   80526:	a201      	add	r2, pc, #4	; (adr r2, 8052c <osc_get_rate+0x14>)
   80528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8052c:	0008054d 	.word	0x0008054d
   80530:	00080553 	.word	0x00080553
   80534:	00080559 	.word	0x00080559
   80538:	0008055f 	.word	0x0008055f
   8053c:	00080563 	.word	0x00080563
   80540:	00080567 	.word	0x00080567
   80544:	0008056b 	.word	0x0008056b
   80548:	0008056f 	.word	0x0008056f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8054c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80550:	e010      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80556:	e00d      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8055c:	e00a      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8055e:	4b08      	ldr	r3, [pc, #32]	; (80580 <osc_get_rate+0x68>)
   80560:	e008      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80562:	4b08      	ldr	r3, [pc, #32]	; (80584 <osc_get_rate+0x6c>)
   80564:	e006      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80566:	4b08      	ldr	r3, [pc, #32]	; (80588 <osc_get_rate+0x70>)
   80568:	e004      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8056a:	4b07      	ldr	r3, [pc, #28]	; (80588 <osc_get_rate+0x70>)
   8056c:	e002      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8056e:	4b06      	ldr	r3, [pc, #24]	; (80588 <osc_get_rate+0x70>)
   80570:	e000      	b.n	80574 <osc_get_rate+0x5c>
	}

	return 0;
   80572:	2300      	movs	r3, #0
}
   80574:	4618      	mov	r0, r3
   80576:	370c      	adds	r7, #12
   80578:	46bd      	mov	sp, r7
   8057a:	bc80      	pop	{r7}
   8057c:	4770      	bx	lr
   8057e:	bf00      	nop
   80580:	003d0900 	.word	0x003d0900
   80584:	007a1200 	.word	0x007a1200
   80588:	00b71b00 	.word	0x00b71b00

0008058c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8058c:	b580      	push	{r7, lr}
   8058e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80590:	2006      	movs	r0, #6
   80592:	4b04      	ldr	r3, [pc, #16]	; (805a4 <sysclk_get_main_hz+0x18>)
   80594:	4798      	blx	r3
   80596:	4602      	mov	r2, r0
   80598:	4613      	mov	r3, r2
   8059a:	00db      	lsls	r3, r3, #3
   8059c:	1a9b      	subs	r3, r3, r2
   8059e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   805a0:	4618      	mov	r0, r3
   805a2:	bd80      	pop	{r7, pc}
   805a4:	00080519 	.word	0x00080519

000805a8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   805a8:	b580      	push	{r7, lr}
   805aa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   805ac:	4b02      	ldr	r3, [pc, #8]	; (805b8 <sysclk_get_peripheral_hz+0x10>)
   805ae:	4798      	blx	r3
   805b0:	4603      	mov	r3, r0
   805b2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   805b4:	4618      	mov	r0, r3
   805b6:	bd80      	pop	{r7, pc}
   805b8:	0008058d 	.word	0x0008058d

000805bc <spi_init>:
sensor_to_motor_t stm;

uint8_t sens_buf[sizeof(stm)];

void spi_init(void)
{
   805bc:	b580      	push	{r7, lr}
   805be:	af00      	add	r7, sp, #0
    configure_dmac();
   805c0:	4b02      	ldr	r3, [pc, #8]	; (805cc <spi_init+0x10>)
   805c2:	4798      	blx	r3
    spi_master_initialize();
   805c4:	4b02      	ldr	r3, [pc, #8]	; (805d0 <spi_init+0x14>)
   805c6:	4798      	blx	r3
}
   805c8:	bf00      	nop
   805ca:	bd80      	pop	{r7, pc}
   805cc:	000806e9 	.word	0x000806e9
   805d0:	000805d5 	.word	0x000805d5

000805d4 <spi_master_initialize>:

void spi_master_initialize(void)
{
   805d4:	b590      	push	{r4, r7, lr}
   805d6:	b085      	sub	sp, #20
   805d8:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   805da:	2101      	movs	r1, #1
   805dc:	4810      	ldr	r0, [pc, #64]	; (80620 <spi_master_initialize+0x4c>)
   805de:	4b11      	ldr	r3, [pc, #68]	; (80624 <spi_master_initialize+0x50>)
   805e0:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   805e2:	2100      	movs	r1, #0
   805e4:	480e      	ldr	r0, [pc, #56]	; (80620 <spi_master_initialize+0x4c>)
   805e6:	4b0f      	ldr	r3, [pc, #60]	; (80624 <spi_master_initialize+0x50>)
   805e8:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   805ea:	2012      	movs	r0, #18
   805ec:	4b0e      	ldr	r3, [pc, #56]	; (80628 <spi_master_initialize+0x54>)
   805ee:	4798      	blx	r3
    usart_spi_disable(USART1);
   805f0:	480e      	ldr	r0, [pc, #56]	; (8062c <spi_master_initialize+0x58>)
   805f2:	4b0f      	ldr	r3, [pc, #60]	; (80630 <spi_master_initialize+0x5c>)
   805f4:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   805f6:	4b0f      	ldr	r3, [pc, #60]	; (80634 <spi_master_initialize+0x60>)
   805f8:	463c      	mov	r4, r7
   805fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   805fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   80600:	4b0d      	ldr	r3, [pc, #52]	; (80638 <spi_master_initialize+0x64>)
   80602:	4798      	blx	r3
   80604:	4602      	mov	r2, r0
   80606:	463b      	mov	r3, r7
   80608:	4619      	mov	r1, r3
   8060a:	4808      	ldr	r0, [pc, #32]	; (8062c <spi_master_initialize+0x58>)
   8060c:	4b0b      	ldr	r3, [pc, #44]	; (8063c <spi_master_initialize+0x68>)
   8060e:	4798      	blx	r3
    usart_spi_enable(USART1);
   80610:	4806      	ldr	r0, [pc, #24]	; (8062c <spi_master_initialize+0x58>)
   80612:	4b0b      	ldr	r3, [pc, #44]	; (80640 <spi_master_initialize+0x6c>)
   80614:	4798      	blx	r3
}
   80616:	bf00      	nop
   80618:	3714      	adds	r7, #20
   8061a:	46bd      	mov	sp, r7
   8061c:	bd90      	pop	{r4, r7, pc}
   8061e:	bf00      	nop
   80620:	400c4000 	.word	0x400c4000
   80624:	0008263f 	.word	0x0008263f
   80628:	000829fd 	.word	0x000829fd
   8062c:	4009c000 	.word	0x4009c000
   80630:	00080185 	.word	0x00080185
   80634:	00087dfc 	.word	0x00087dfc
   80638:	000805a9 	.word	0x000805a9
   8063c:	000802c1 	.word	0x000802c1
   80640:	00080161 	.word	0x00080161

00080644 <spi_master_transfer>:

void spi_master_transfer(void *p_buf, uint32_t ul_size)
{
   80644:	b580      	push	{r7, lr}
   80646:	b088      	sub	sp, #32
   80648:	af00      	add	r7, sp, #0
   8064a:	6078      	str	r0, [r7, #4]
   8064c:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    usart_spi_force_chip_select(USART1);
   8064e:	481c      	ldr	r0, [pc, #112]	; (806c0 <spi_master_transfer+0x7c>)
   80650:	4b1c      	ldr	r3, [pc, #112]	; (806c4 <spi_master_transfer+0x80>)
   80652:	4798      	blx	r3

    dmac_channel_disable(DMAC, 1);
   80654:	2101      	movs	r1, #1
   80656:	481c      	ldr	r0, [pc, #112]	; (806c8 <spi_master_transfer+0x84>)
   80658:	4b1c      	ldr	r3, [pc, #112]	; (806cc <spi_master_transfer+0x88>)
   8065a:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   8065c:	687b      	ldr	r3, [r7, #4]
   8065e:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & USART1->US_THR;
   80660:	4b1b      	ldr	r3, [pc, #108]	; (806d0 <spi_master_transfer+0x8c>)
   80662:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80664:	683b      	ldr	r3, [r7, #0]
   80666:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80668:	4b1a      	ldr	r3, [pc, #104]	; (806d4 <spi_master_transfer+0x90>)
   8066a:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   8066c:	2300      	movs	r3, #0
   8066e:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   80670:	f107 030c 	add.w	r3, r7, #12
   80674:	461a      	mov	r2, r3
   80676:	2101      	movs	r1, #1
   80678:	4813      	ldr	r0, [pc, #76]	; (806c8 <spi_master_transfer+0x84>)
   8067a:	4b17      	ldr	r3, [pc, #92]	; (806d8 <spi_master_transfer+0x94>)
   8067c:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   8067e:	2101      	movs	r1, #1
   80680:	4811      	ldr	r0, [pc, #68]	; (806c8 <spi_master_transfer+0x84>)
   80682:	4b16      	ldr	r3, [pc, #88]	; (806dc <spi_master_transfer+0x98>)
   80684:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   80686:	2100      	movs	r1, #0
   80688:	480f      	ldr	r0, [pc, #60]	; (806c8 <spi_master_transfer+0x84>)
   8068a:	4b10      	ldr	r3, [pc, #64]	; (806cc <spi_master_transfer+0x88>)
   8068c:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & USART1->US_RHR;
   8068e:	4b14      	ldr	r3, [pc, #80]	; (806e0 <spi_master_transfer+0x9c>)
   80690:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80692:	687b      	ldr	r3, [r7, #4]
   80694:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80696:	683b      	ldr	r3, [r7, #0]
   80698:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   8069a:	4b12      	ldr	r3, [pc, #72]	; (806e4 <spi_master_transfer+0xa0>)
   8069c:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   8069e:	2300      	movs	r3, #0
   806a0:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   806a2:	f107 030c 	add.w	r3, r7, #12
   806a6:	461a      	mov	r2, r3
   806a8:	2100      	movs	r1, #0
   806aa:	4807      	ldr	r0, [pc, #28]	; (806c8 <spi_master_transfer+0x84>)
   806ac:	4b0a      	ldr	r3, [pc, #40]	; (806d8 <spi_master_transfer+0x94>)
   806ae:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   806b0:	2100      	movs	r1, #0
   806b2:	4805      	ldr	r0, [pc, #20]	; (806c8 <spi_master_transfer+0x84>)
   806b4:	4b09      	ldr	r3, [pc, #36]	; (806dc <spi_master_transfer+0x98>)
   806b6:	4798      	blx	r3
}
   806b8:	bf00      	nop
   806ba:	3720      	adds	r7, #32
   806bc:	46bd      	mov	sp, r7
   806be:	bd80      	pop	{r7, pc}
   806c0:	4009c000 	.word	0x4009c000
   806c4:	00080495 	.word	0x00080495
   806c8:	400c4000 	.word	0x400c4000
   806cc:	0008263f 	.word	0x0008263f
   806d0:	4009c01c 	.word	0x4009c01c
   806d4:	20310000 	.word	0x20310000
   806d8:	00082759 	.word	0x00082759
   806dc:	00082621 	.word	0x00082621
   806e0:	4009c018 	.word	0x4009c018
   806e4:	02510000 	.word	0x02510000

000806e8 <configure_dmac>:

void configure_dmac(void)
{
   806e8:	b580      	push	{r7, lr}
   806ea:	b082      	sub	sp, #8
   806ec:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   806ee:	2027      	movs	r0, #39	; 0x27
   806f0:	4b18      	ldr	r3, [pc, #96]	; (80754 <configure_dmac+0x6c>)
   806f2:	4798      	blx	r3
    dmac_init(DMAC);
   806f4:	4818      	ldr	r0, [pc, #96]	; (80758 <configure_dmac+0x70>)
   806f6:	4b19      	ldr	r3, [pc, #100]	; (8075c <configure_dmac+0x74>)
   806f8:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   806fa:	2110      	movs	r1, #16
   806fc:	4816      	ldr	r0, [pc, #88]	; (80758 <configure_dmac+0x70>)
   806fe:	4b18      	ldr	r3, [pc, #96]	; (80760 <configure_dmac+0x78>)
   80700:	4798      	blx	r3
    dmac_enable(DMAC);
   80702:	4815      	ldr	r0, [pc, #84]	; (80758 <configure_dmac+0x70>)
   80704:	4b17      	ldr	r3, [pc, #92]	; (80764 <configure_dmac+0x7c>)
   80706:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80708:	2300      	movs	r3, #0
   8070a:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   8070c:	687b      	ldr	r3, [r7, #4]
   8070e:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80712:	f043 030e 	orr.w	r3, r3, #14
   80716:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   80718:	687a      	ldr	r2, [r7, #4]
   8071a:	2100      	movs	r1, #0
   8071c:	480e      	ldr	r0, [pc, #56]	; (80758 <configure_dmac+0x70>)
   8071e:	4b12      	ldr	r3, [pc, #72]	; (80768 <configure_dmac+0x80>)
   80720:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80722:	2300      	movs	r3, #0
   80724:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80726:	687b      	ldr	r3, [r7, #4]
   80728:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   8072c:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   80730:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   80732:	687a      	ldr	r2, [r7, #4]
   80734:	2101      	movs	r1, #1
   80736:	4808      	ldr	r0, [pc, #32]	; (80758 <configure_dmac+0x70>)
   80738:	4b0b      	ldr	r3, [pc, #44]	; (80768 <configure_dmac+0x80>)
   8073a:	4798      	blx	r3
    ul_cfg = 0;
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
    #endif
    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   8073c:	2027      	movs	r0, #39	; 0x27
   8073e:	4b0b      	ldr	r3, [pc, #44]	; (8076c <configure_dmac+0x84>)
   80740:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   80742:	2101      	movs	r1, #1
   80744:	4804      	ldr	r0, [pc, #16]	; (80758 <configure_dmac+0x70>)
   80746:	4b0a      	ldr	r3, [pc, #40]	; (80770 <configure_dmac+0x88>)
   80748:	4798      	blx	r3
}
   8074a:	bf00      	nop
   8074c:	3708      	adds	r7, #8
   8074e:	46bd      	mov	sp, r7
   80750:	bd80      	pop	{r7, pc}
   80752:	bf00      	nop
   80754:	000829fd 	.word	0x000829fd
   80758:	400c4000 	.word	0x400c4000
   8075c:	00082579 	.word	0x00082579
   80760:	00082595 	.word	0x00082595
   80764:	000825bb 	.word	0x000825bb
   80768:	0008272f 	.word	0x0008272f
   8076c:	000804e9 	.word	0x000804e9
   80770:	000825f1 	.word	0x000825f1

00080774 <DMAC_Handler>:

void DMAC_Handler(void)
{
   80774:	b580      	push	{r7, lr}
   80776:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   80778:	480b      	ldr	r0, [pc, #44]	; (807a8 <DMAC_Handler+0x34>)
   8077a:	4b0c      	ldr	r3, [pc, #48]	; (807ac <DMAC_Handler+0x38>)
   8077c:	4798      	blx	r3
   8077e:	4602      	mov	r2, r0
   80780:	4b0b      	ldr	r3, [pc, #44]	; (807b0 <DMAC_Handler+0x3c>)
   80782:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   80784:	4b0a      	ldr	r3, [pc, #40]	; (807b0 <DMAC_Handler+0x3c>)
   80786:	681b      	ldr	r3, [r3, #0]
   80788:	f003 0301 	and.w	r3, r3, #1
   8078c:	2b00      	cmp	r3, #0
   8078e:	d008      	beq.n	807a2 <DMAC_Handler+0x2e>
    {
        usart_spi_release_chip_select(USART1);
   80790:	4808      	ldr	r0, [pc, #32]	; (807b4 <DMAC_Handler+0x40>)
   80792:	4b09      	ldr	r3, [pc, #36]	; (807b8 <DMAC_Handler+0x44>)
   80794:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   80796:	4b09      	ldr	r3, [pc, #36]	; (807bc <DMAC_Handler+0x48>)
   80798:	4a09      	ldr	r2, [pc, #36]	; (807c0 <DMAC_Handler+0x4c>)
   8079a:	8811      	ldrh	r1, [r2, #0]
   8079c:	7892      	ldrb	r2, [r2, #2]
   8079e:	8019      	strh	r1, [r3, #0]
   807a0:	709a      	strb	r2, [r3, #2]
    }
}
   807a2:	bf00      	nop
   807a4:	bd80      	pop	{r7, pc}
   807a6:	bf00      	nop
   807a8:	400c4000 	.word	0x400c4000
   807ac:	0008260b 	.word	0x0008260b
   807b0:	20070b70 	.word	0x20070b70
   807b4:	4009c000 	.word	0x4009c000
   807b8:	000804af 	.word	0x000804af
   807bc:	20070ff0 	.word	0x20070ff0
   807c0:	20070fe8 	.word	0x20070fe8

000807c4 <NVIC_EnableIRQ>:
{
   807c4:	b480      	push	{r7}
   807c6:	b083      	sub	sp, #12
   807c8:	af00      	add	r7, sp, #0
   807ca:	4603      	mov	r3, r0
   807cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   807ce:	4908      	ldr	r1, [pc, #32]	; (807f0 <NVIC_EnableIRQ+0x2c>)
   807d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   807d4:	095b      	lsrs	r3, r3, #5
   807d6:	79fa      	ldrb	r2, [r7, #7]
   807d8:	f002 021f 	and.w	r2, r2, #31
   807dc:	2001      	movs	r0, #1
   807de:	fa00 f202 	lsl.w	r2, r0, r2
   807e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   807e6:	bf00      	nop
   807e8:	370c      	adds	r7, #12
   807ea:	46bd      	mov	sp, r7
   807ec:	bc80      	pop	{r7}
   807ee:	4770      	bx	lr
   807f0:	e000e100 	.word	0xe000e100

000807f4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   807f4:	b480      	push	{r7}
   807f6:	b083      	sub	sp, #12
   807f8:	af00      	add	r7, sp, #0
   807fa:	4603      	mov	r3, r0
   807fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   807fe:	4909      	ldr	r1, [pc, #36]	; (80824 <NVIC_ClearPendingIRQ+0x30>)
   80800:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80804:	095b      	lsrs	r3, r3, #5
   80806:	79fa      	ldrb	r2, [r7, #7]
   80808:	f002 021f 	and.w	r2, r2, #31
   8080c:	2001      	movs	r0, #1
   8080e:	fa00 f202 	lsl.w	r2, r0, r2
   80812:	3360      	adds	r3, #96	; 0x60
   80814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80818:	bf00      	nop
   8081a:	370c      	adds	r7, #12
   8081c:	46bd      	mov	sp, r7
   8081e:	bc80      	pop	{r7}
   80820:	4770      	bx	lr
   80822:	bf00      	nop
   80824:	e000e100 	.word	0xe000e100

00080828 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80828:	b480      	push	{r7}
   8082a:	b083      	sub	sp, #12
   8082c:	af00      	add	r7, sp, #0
   8082e:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80830:	687b      	ldr	r3, [r7, #4]
   80832:	2208      	movs	r2, #8
   80834:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80836:	687b      	ldr	r3, [r7, #4]
   80838:	2220      	movs	r2, #32
   8083a:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   8083c:	687b      	ldr	r3, [r7, #4]
   8083e:	2204      	movs	r2, #4
   80840:	601a      	str	r2, [r3, #0]
}
   80842:	bf00      	nop
   80844:	370c      	adds	r7, #12
   80846:	46bd      	mov	sp, r7
   80848:	bc80      	pop	{r7}
   8084a:	4770      	bx	lr

0008084c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   8084c:	b580      	push	{r7, lr}
   8084e:	b084      	sub	sp, #16
   80850:	af00      	add	r7, sp, #0
   80852:	6078      	str	r0, [r7, #4]
   80854:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80856:	2300      	movs	r3, #0
   80858:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   8085a:	687b      	ldr	r3, [r7, #4]
   8085c:	f04f 32ff 	mov.w	r2, #4294967295
   80860:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   80862:	687b      	ldr	r3, [r7, #4]
   80864:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80866:	6878      	ldr	r0, [r7, #4]
   80868:	4b12      	ldr	r3, [pc, #72]	; (808b4 <twi_master_init+0x68>)
   8086a:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   8086c:	6878      	ldr	r0, [r7, #4]
   8086e:	4b12      	ldr	r3, [pc, #72]	; (808b8 <twi_master_init+0x6c>)
   80870:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80872:	683b      	ldr	r3, [r7, #0]
   80874:	6859      	ldr	r1, [r3, #4]
   80876:	683b      	ldr	r3, [r7, #0]
   80878:	681b      	ldr	r3, [r3, #0]
   8087a:	461a      	mov	r2, r3
   8087c:	6878      	ldr	r0, [r7, #4]
   8087e:	4b0f      	ldr	r3, [pc, #60]	; (808bc <twi_master_init+0x70>)
   80880:	4798      	blx	r3
   80882:	4603      	mov	r3, r0
   80884:	2b01      	cmp	r3, #1
   80886:	d101      	bne.n	8088c <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80888:	2301      	movs	r3, #1
   8088a:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   8088c:	683b      	ldr	r3, [r7, #0]
   8088e:	7a5b      	ldrb	r3, [r3, #9]
   80890:	2b01      	cmp	r3, #1
   80892:	d102      	bne.n	8089a <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80894:	687b      	ldr	r3, [r7, #4]
   80896:	2240      	movs	r2, #64	; 0x40
   80898:	601a      	str	r2, [r3, #0]
	}

    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   8089a:	f44f 7150 	mov.w	r1, #832	; 0x340
   8089e:	6878      	ldr	r0, [r7, #4]
   808a0:	4b07      	ldr	r3, [pc, #28]	; (808c0 <twi_master_init+0x74>)
   808a2:	4798      	blx	r3

    twiBusy = false;
   808a4:	4b07      	ldr	r3, [pc, #28]	; (808c4 <twi_master_init+0x78>)
   808a6:	2200      	movs	r2, #0
   808a8:	701a      	strb	r2, [r3, #0]

	return status;
   808aa:	68fb      	ldr	r3, [r7, #12]
}
   808ac:	4618      	mov	r0, r3
   808ae:	3710      	adds	r7, #16
   808b0:	46bd      	mov	sp, r7
   808b2:	bd80      	pop	{r7, pc}
   808b4:	00080d25 	.word	0x00080d25
   808b8:	00080829 	.word	0x00080829
   808bc:	000808c9 	.word	0x000808c9
   808c0:	00080cc1 	.word	0x00080cc1
   808c4:	20070f7c 	.word	0x20070f7c

000808c8 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   808c8:	b480      	push	{r7}
   808ca:	b089      	sub	sp, #36	; 0x24
   808cc:	af00      	add	r7, sp, #0
   808ce:	60f8      	str	r0, [r7, #12]
   808d0:	60b9      	str	r1, [r7, #8]
   808d2:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   808d4:	2300      	movs	r3, #0
   808d6:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   808d8:	68bb      	ldr	r3, [r7, #8]
   808da:	4a34      	ldr	r2, [pc, #208]	; (809ac <twi_set_speed+0xe4>)
   808dc:	4293      	cmp	r3, r2
   808de:	d901      	bls.n	808e4 <twi_set_speed+0x1c>
		return FAIL;
   808e0:	2301      	movs	r3, #1
   808e2:	e05d      	b.n	809a0 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   808e4:	68bb      	ldr	r3, [r7, #8]
   808e6:	4a32      	ldr	r2, [pc, #200]	; (809b0 <twi_set_speed+0xe8>)
   808e8:	4293      	cmp	r3, r2
   808ea:	d937      	bls.n	8095c <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   808ec:	687b      	ldr	r3, [r7, #4]
   808ee:	4a31      	ldr	r2, [pc, #196]	; (809b4 <twi_set_speed+0xec>)
   808f0:	fba2 2303 	umull	r2, r3, r2, r3
   808f4:	0b9b      	lsrs	r3, r3, #14
   808f6:	3b04      	subs	r3, #4
   808f8:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   808fa:	68ba      	ldr	r2, [r7, #8]
   808fc:	4b2e      	ldr	r3, [pc, #184]	; (809b8 <twi_set_speed+0xf0>)
   808fe:	4413      	add	r3, r2
   80900:	009b      	lsls	r3, r3, #2
   80902:	687a      	ldr	r2, [r7, #4]
   80904:	fbb2 f3f3 	udiv	r3, r2, r3
   80908:	3b04      	subs	r3, #4
   8090a:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8090c:	e005      	b.n	8091a <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   8090e:	69fb      	ldr	r3, [r7, #28]
   80910:	3301      	adds	r3, #1
   80912:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   80914:	697b      	ldr	r3, [r7, #20]
   80916:	085b      	lsrs	r3, r3, #1
   80918:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8091a:	697b      	ldr	r3, [r7, #20]
   8091c:	2bff      	cmp	r3, #255	; 0xff
   8091e:	d909      	bls.n	80934 <twi_set_speed+0x6c>
   80920:	69fb      	ldr	r3, [r7, #28]
   80922:	2b06      	cmp	r3, #6
   80924:	d9f3      	bls.n	8090e <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80926:	e005      	b.n	80934 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   80928:	69fb      	ldr	r3, [r7, #28]
   8092a:	3301      	adds	r3, #1
   8092c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   8092e:	693b      	ldr	r3, [r7, #16]
   80930:	085b      	lsrs	r3, r3, #1
   80932:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80934:	693b      	ldr	r3, [r7, #16]
   80936:	2bff      	cmp	r3, #255	; 0xff
   80938:	d902      	bls.n	80940 <twi_set_speed+0x78>
   8093a:	69fb      	ldr	r3, [r7, #28]
   8093c:	2b06      	cmp	r3, #6
   8093e:	d9f3      	bls.n	80928 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80940:	697b      	ldr	r3, [r7, #20]
   80942:	b2da      	uxtb	r2, r3
   80944:	693b      	ldr	r3, [r7, #16]
   80946:	021b      	lsls	r3, r3, #8
   80948:	b29b      	uxth	r3, r3
   8094a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   8094c:	69fb      	ldr	r3, [r7, #28]
   8094e:	041b      	lsls	r3, r3, #16
   80950:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80954:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80956:	68fb      	ldr	r3, [r7, #12]
   80958:	611a      	str	r2, [r3, #16]
   8095a:	e020      	b.n	8099e <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8095c:	68bb      	ldr	r3, [r7, #8]
   8095e:	005b      	lsls	r3, r3, #1
   80960:	687a      	ldr	r2, [r7, #4]
   80962:	fbb2 f3f3 	udiv	r3, r2, r3
   80966:	3b04      	subs	r3, #4
   80968:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8096a:	e005      	b.n	80978 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   8096c:	69fb      	ldr	r3, [r7, #28]
   8096e:	3301      	adds	r3, #1
   80970:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   80972:	69bb      	ldr	r3, [r7, #24]
   80974:	085b      	lsrs	r3, r3, #1
   80976:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80978:	69bb      	ldr	r3, [r7, #24]
   8097a:	2bff      	cmp	r3, #255	; 0xff
   8097c:	d902      	bls.n	80984 <twi_set_speed+0xbc>
   8097e:	69fb      	ldr	r3, [r7, #28]
   80980:	2b06      	cmp	r3, #6
   80982:	d9f3      	bls.n	8096c <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80984:	69bb      	ldr	r3, [r7, #24]
   80986:	b2da      	uxtb	r2, r3
   80988:	69bb      	ldr	r3, [r7, #24]
   8098a:	021b      	lsls	r3, r3, #8
   8098c:	b29b      	uxth	r3, r3
   8098e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   80990:	69fb      	ldr	r3, [r7, #28]
   80992:	041b      	lsls	r3, r3, #16
   80994:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80998:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   8099a:	68fb      	ldr	r3, [r7, #12]
   8099c:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   8099e:	2300      	movs	r3, #0
}
   809a0:	4618      	mov	r0, r3
   809a2:	3724      	adds	r7, #36	; 0x24
   809a4:	46bd      	mov	sp, r7
   809a6:	bc80      	pop	{r7}
   809a8:	4770      	bx	lr
   809aa:	bf00      	nop
   809ac:	00061a80 	.word	0x00061a80
   809b0:	0005dc00 	.word	0x0005dc00
   809b4:	057619f1 	.word	0x057619f1
   809b8:	3ffd1200 	.word	0x3ffd1200

000809bc <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   809bc:	b480      	push	{r7}
   809be:	b085      	sub	sp, #20
   809c0:	af00      	add	r7, sp, #0
   809c2:	6078      	str	r0, [r7, #4]
   809c4:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   809c6:	683b      	ldr	r3, [r7, #0]
   809c8:	2b00      	cmp	r3, #0
   809ca:	d101      	bne.n	809d0 <twi_mk_addr+0x14>
		return 0;
   809cc:	2300      	movs	r3, #0
   809ce:	e01d      	b.n	80a0c <twi_mk_addr+0x50>

	val = addr[0];
   809d0:	687b      	ldr	r3, [r7, #4]
   809d2:	781b      	ldrb	r3, [r3, #0]
   809d4:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   809d6:	683b      	ldr	r3, [r7, #0]
   809d8:	2b01      	cmp	r3, #1
   809da:	dd09      	ble.n	809f0 <twi_mk_addr+0x34>
		val <<= 8;
   809dc:	68fb      	ldr	r3, [r7, #12]
   809de:	021b      	lsls	r3, r3, #8
   809e0:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   809e2:	687b      	ldr	r3, [r7, #4]
   809e4:	3301      	adds	r3, #1
   809e6:	781b      	ldrb	r3, [r3, #0]
   809e8:	461a      	mov	r2, r3
   809ea:	68fb      	ldr	r3, [r7, #12]
   809ec:	4313      	orrs	r3, r2
   809ee:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   809f0:	683b      	ldr	r3, [r7, #0]
   809f2:	2b02      	cmp	r3, #2
   809f4:	dd09      	ble.n	80a0a <twi_mk_addr+0x4e>
		val <<= 8;
   809f6:	68fb      	ldr	r3, [r7, #12]
   809f8:	021b      	lsls	r3, r3, #8
   809fa:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   809fc:	687b      	ldr	r3, [r7, #4]
   809fe:	3302      	adds	r3, #2
   80a00:	781b      	ldrb	r3, [r3, #0]
   80a02:	461a      	mov	r2, r3
   80a04:	68fb      	ldr	r3, [r7, #12]
   80a06:	4313      	orrs	r3, r2
   80a08:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80a0a:	68fb      	ldr	r3, [r7, #12]
}
   80a0c:	4618      	mov	r0, r3
   80a0e:	3714      	adds	r7, #20
   80a10:	46bd      	mov	sp, r7
   80a12:	bc80      	pop	{r7}
   80a14:	4770      	bx	lr
	...

00080a18 <twi_is_busy>:

	return TWI_SUCCESS;
}

uint8_t twi_is_busy(void)
{
   80a18:	b480      	push	{r7}
   80a1a:	af00      	add	r7, sp, #0
    return twiBusy;
   80a1c:	4b02      	ldr	r3, [pc, #8]	; (80a28 <twi_is_busy+0x10>)
   80a1e:	781b      	ldrb	r3, [r3, #0]
}
   80a20:	4618      	mov	r0, r3
   80a22:	46bd      	mov	sp, r7
   80a24:	bc80      	pop	{r7}
   80a26:	4770      	bx	lr
   80a28:	20070f7c 	.word	0x20070f7c

00080a2c <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   80a2c:	b480      	push	{r7}
   80a2e:	af00      	add	r7, sp, #0
    return &txPacket;
   80a30:	4b02      	ldr	r3, [pc, #8]	; (80a3c <twi_get_tx_packet+0x10>)
}
   80a32:	4618      	mov	r0, r3
   80a34:	46bd      	mov	sp, r7
   80a36:	bc80      	pop	{r7}
   80a38:	4770      	bx	lr
   80a3a:	bf00      	nop
   80a3c:	20070b74 	.word	0x20070b74

00080a40 <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   80a40:	b580      	push	{r7, lr}
   80a42:	b084      	sub	sp, #16
   80a44:	af00      	add	r7, sp, #0
   80a46:	6078      	str	r0, [r7, #4]
   80a48:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   80a4a:	683b      	ldr	r3, [r7, #0]
   80a4c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80a50:	2b00      	cmp	r3, #0
   80a52:	d101      	bne.n	80a58 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   80a54:	2301      	movs	r3, #1
   80a56:	e040      	b.n	80ada <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   80a58:	4b22      	ldr	r3, [pc, #136]	; (80ae4 <twi_pdc_master_write+0xa4>)
   80a5a:	2201      	movs	r2, #1
   80a5c:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   80a5e:	683b      	ldr	r3, [r7, #0]
   80a60:	3308      	adds	r3, #8
   80a62:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   80a64:	683b      	ldr	r3, [r7, #0]
   80a66:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80a6a:	3b01      	subs	r3, #1
   80a6c:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   80a6e:	f107 0308 	add.w	r3, r7, #8
   80a72:	2200      	movs	r2, #0
   80a74:	4619      	mov	r1, r3
   80a76:	481c      	ldr	r0, [pc, #112]	; (80ae8 <twi_pdc_master_write+0xa8>)
   80a78:	4b1c      	ldr	r3, [pc, #112]	; (80aec <twi_pdc_master_write+0xac>)
   80a7a:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   80a7c:	687b      	ldr	r3, [r7, #4]
   80a7e:	2200      	movs	r2, #0
   80a80:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   80a82:	683b      	ldr	r3, [r7, #0]
   80a84:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
   80a88:	041b      	lsls	r3, r3, #16
   80a8a:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   80a8e:	683b      	ldr	r3, [r7, #0]
   80a90:	685b      	ldr	r3, [r3, #4]
   80a92:	021b      	lsls	r3, r3, #8
   80a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
   80a98:	431a      	orrs	r2, r3
   80a9a:	687b      	ldr	r3, [r7, #4]
   80a9c:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   80a9e:	687b      	ldr	r3, [r7, #4]
   80aa0:	2200      	movs	r2, #0
   80aa2:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80aa4:	683a      	ldr	r2, [r7, #0]
   80aa6:	683b      	ldr	r3, [r7, #0]
   80aa8:	685b      	ldr	r3, [r3, #4]
   80aaa:	4619      	mov	r1, r3
   80aac:	4610      	mov	r0, r2
   80aae:	4b10      	ldr	r3, [pc, #64]	; (80af0 <twi_pdc_master_write+0xb0>)
   80ab0:	4798      	blx	r3
   80ab2:	4602      	mov	r2, r0
   80ab4:	687b      	ldr	r3, [r7, #4]
   80ab6:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   80ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
   80abc:	480a      	ldr	r0, [pc, #40]	; (80ae8 <twi_pdc_master_write+0xa8>)
   80abe:	4b0d      	ldr	r3, [pc, #52]	; (80af4 <twi_pdc_master_write+0xb4>)
   80ac0:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   80ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80ac6:	6878      	ldr	r0, [r7, #4]
   80ac8:	4b0b      	ldr	r3, [pc, #44]	; (80af8 <twi_pdc_master_write+0xb8>)
   80aca:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   80acc:	2016      	movs	r0, #22
   80ace:	4b0b      	ldr	r3, [pc, #44]	; (80afc <twi_pdc_master_write+0xbc>)
   80ad0:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   80ad2:	2016      	movs	r0, #22
   80ad4:	4b0a      	ldr	r3, [pc, #40]	; (80b00 <twi_pdc_master_write+0xc0>)
   80ad6:	4798      	blx	r3

    return TWI_SUCCESS;
   80ad8:	2300      	movs	r3, #0
}
   80ada:	4618      	mov	r0, r3
   80adc:	3710      	adds	r7, #16
   80ade:	46bd      	mov	sp, r7
   80ae0:	bd80      	pop	{r7, pc}
   80ae2:	bf00      	nop
   80ae4:	20070f7c 	.word	0x20070f7c
   80ae8:	4008c100 	.word	0x4008c100
   80aec:	000801a9 	.word	0x000801a9
   80af0:	000809bd 	.word	0x000809bd
   80af4:	000801eb 	.word	0x000801eb
   80af8:	00080cc1 	.word	0x00080cc1
   80afc:	000807f5 	.word	0x000807f5
   80b00:	000807c5 	.word	0x000807c5

00080b04 <twi_set_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_tx_callback(void (*callback)(void))
{
   80b04:	b480      	push	{r7}
   80b06:	b083      	sub	sp, #12
   80b08:	af00      	add	r7, sp, #0
   80b0a:	6078      	str	r0, [r7, #4]
    txCallback = callback;
   80b0c:	4a03      	ldr	r2, [pc, #12]	; (80b1c <twi_set_tx_callback+0x18>)
   80b0e:	687b      	ldr	r3, [r7, #4]
   80b10:	6013      	str	r3, [r2, #0]
}
   80b12:	bf00      	nop
   80b14:	370c      	adds	r7, #12
   80b16:	46bd      	mov	sp, r7
   80b18:	bc80      	pop	{r7}
   80b1a:	4770      	bx	lr
   80b1c:	20070f80 	.word	0x20070f80

00080b20 <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   80b20:	b590      	push	{r4, r7, lr}
   80b22:	b083      	sub	sp, #12
   80b24:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   80b26:	485a      	ldr	r0, [pc, #360]	; (80c90 <TWI0_Handler+0x170>)
   80b28:	4b5a      	ldr	r3, [pc, #360]	; (80c94 <TWI0_Handler+0x174>)
   80b2a:	4798      	blx	r3
   80b2c:	4604      	mov	r4, r0
   80b2e:	4858      	ldr	r0, [pc, #352]	; (80c90 <TWI0_Handler+0x170>)
   80b30:	4b59      	ldr	r3, [pc, #356]	; (80c98 <TWI0_Handler+0x178>)
   80b32:	4798      	blx	r3
   80b34:	4603      	mov	r3, r0
   80b36:	4023      	ands	r3, r4
   80b38:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   80b3a:	687b      	ldr	r3, [r7, #4]
   80b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   80b40:	2b00      	cmp	r3, #0
   80b42:	d014      	beq.n	80b6e <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   80b44:	f44f 7100 	mov.w	r1, #512	; 0x200
   80b48:	4854      	ldr	r0, [pc, #336]	; (80c9c <TWI0_Handler+0x17c>)
   80b4a:	4b55      	ldr	r3, [pc, #340]	; (80ca0 <TWI0_Handler+0x180>)
   80b4c:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   80b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80b52:	484f      	ldr	r0, [pc, #316]	; (80c90 <TWI0_Handler+0x170>)
   80b54:	4b53      	ldr	r3, [pc, #332]	; (80ca4 <TWI0_Handler+0x184>)
   80b56:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   80b58:	2104      	movs	r1, #4
   80b5a:	484d      	ldr	r0, [pc, #308]	; (80c90 <TWI0_Handler+0x170>)
   80b5c:	4b52      	ldr	r3, [pc, #328]	; (80ca8 <TWI0_Handler+0x188>)
   80b5e:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   80b60:	484b      	ldr	r0, [pc, #300]	; (80c90 <TWI0_Handler+0x170>)
   80b62:	4b4c      	ldr	r3, [pc, #304]	; (80c94 <TWI0_Handler+0x174>)
   80b64:	4798      	blx	r3
   80b66:	4602      	mov	r2, r0
   80b68:	687b      	ldr	r3, [r7, #4]
   80b6a:	4313      	orrs	r3, r2
   80b6c:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   80b6e:	687b      	ldr	r3, [r7, #4]
   80b70:	f003 0304 	and.w	r3, r3, #4
   80b74:	2b00      	cmp	r3, #0
   80b76:	d01a      	beq.n	80bae <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   80b78:	2104      	movs	r1, #4
   80b7a:	4845      	ldr	r0, [pc, #276]	; (80c90 <TWI0_Handler+0x170>)
   80b7c:	4b49      	ldr	r3, [pc, #292]	; (80ca4 <TWI0_Handler+0x184>)
   80b7e:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   80b80:	4b43      	ldr	r3, [pc, #268]	; (80c90 <TWI0_Handler+0x170>)
   80b82:	2202      	movs	r2, #2
   80b84:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   80b86:	4a42      	ldr	r2, [pc, #264]	; (80c90 <TWI0_Handler+0x170>)
   80b88:	4b48      	ldr	r3, [pc, #288]	; (80cac <TWI0_Handler+0x18c>)
   80b8a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80b8e:	3b01      	subs	r3, #1
   80b90:	4946      	ldr	r1, [pc, #280]	; (80cac <TWI0_Handler+0x18c>)
   80b92:	440b      	add	r3, r1
   80b94:	7a1b      	ldrb	r3, [r3, #8]
   80b96:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   80b98:	2101      	movs	r1, #1
   80b9a:	483d      	ldr	r0, [pc, #244]	; (80c90 <TWI0_Handler+0x170>)
   80b9c:	4b42      	ldr	r3, [pc, #264]	; (80ca8 <TWI0_Handler+0x188>)
   80b9e:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   80ba0:	483b      	ldr	r0, [pc, #236]	; (80c90 <TWI0_Handler+0x170>)
   80ba2:	4b3c      	ldr	r3, [pc, #240]	; (80c94 <TWI0_Handler+0x174>)
   80ba4:	4798      	blx	r3
   80ba6:	4602      	mov	r2, r0
   80ba8:	687b      	ldr	r3, [r7, #4]
   80baa:	4313      	orrs	r3, r2
   80bac:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   80bae:	687b      	ldr	r3, [r7, #4]
   80bb0:	f003 0301 	and.w	r3, r3, #1
   80bb4:	2b00      	cmp	r3, #0
   80bb6:	d00d      	beq.n	80bd4 <TWI0_Handler+0xb4>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   80bb8:	2101      	movs	r1, #1
   80bba:	4835      	ldr	r0, [pc, #212]	; (80c90 <TWI0_Handler+0x170>)
   80bbc:	4b39      	ldr	r3, [pc, #228]	; (80ca4 <TWI0_Handler+0x184>)
   80bbe:	4798      	blx	r3

        // If defined, call the connected function.
        if(txCallback != NULL)
   80bc0:	4b3b      	ldr	r3, [pc, #236]	; (80cb0 <TWI0_Handler+0x190>)
   80bc2:	681b      	ldr	r3, [r3, #0]
   80bc4:	2b00      	cmp	r3, #0
   80bc6:	d002      	beq.n	80bce <TWI0_Handler+0xae>
        {
            txCallback();
   80bc8:	4b39      	ldr	r3, [pc, #228]	; (80cb0 <TWI0_Handler+0x190>)
   80bca:	681b      	ldr	r3, [r3, #0]
   80bcc:	4798      	blx	r3
        }

        twiBusy = false;
   80bce:	4b39      	ldr	r3, [pc, #228]	; (80cb4 <TWI0_Handler+0x194>)
   80bd0:	2200      	movs	r2, #0
   80bd2:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   80bd4:	687b      	ldr	r3, [r7, #4]
   80bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   80bda:	2b00      	cmp	r3, #0
   80bdc:	d016      	beq.n	80c0c <TWI0_Handler+0xec>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   80bde:	2102      	movs	r1, #2
   80be0:	482e      	ldr	r0, [pc, #184]	; (80c9c <TWI0_Handler+0x17c>)
   80be2:	4b2f      	ldr	r3, [pc, #188]	; (80ca0 <TWI0_Handler+0x180>)
   80be4:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   80be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80bea:	4829      	ldr	r0, [pc, #164]	; (80c90 <TWI0_Handler+0x170>)
   80bec:	4b2d      	ldr	r3, [pc, #180]	; (80ca4 <TWI0_Handler+0x184>)
   80bee:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   80bf0:	2102      	movs	r1, #2
   80bf2:	4827      	ldr	r0, [pc, #156]	; (80c90 <TWI0_Handler+0x170>)
   80bf4:	4b2c      	ldr	r3, [pc, #176]	; (80ca8 <TWI0_Handler+0x188>)
   80bf6:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   80bf8:	4b25      	ldr	r3, [pc, #148]	; (80c90 <TWI0_Handler+0x170>)
   80bfa:	2202      	movs	r2, #2
   80bfc:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   80bfe:	4824      	ldr	r0, [pc, #144]	; (80c90 <TWI0_Handler+0x170>)
   80c00:	4b24      	ldr	r3, [pc, #144]	; (80c94 <TWI0_Handler+0x174>)
   80c02:	4798      	blx	r3
   80c04:	4602      	mov	r2, r0
   80c06:	687b      	ldr	r3, [r7, #4]
   80c08:	4313      	orrs	r3, r2
   80c0a:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   80c0c:	687b      	ldr	r3, [r7, #4]
   80c0e:	f003 0302 	and.w	r3, r3, #2
   80c12:	2b00      	cmp	r3, #0
   80c14:	d018      	beq.n	80c48 <TWI0_Handler+0x128>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   80c16:	2102      	movs	r1, #2
   80c18:	481d      	ldr	r0, [pc, #116]	; (80c90 <TWI0_Handler+0x170>)
   80c1a:	4b22      	ldr	r3, [pc, #136]	; (80ca4 <TWI0_Handler+0x184>)
   80c1c:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   80c1e:	4b26      	ldr	r3, [pc, #152]	; (80cb8 <TWI0_Handler+0x198>)
   80c20:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80c24:	3b01      	subs	r3, #1
   80c26:	4a1a      	ldr	r2, [pc, #104]	; (80c90 <TWI0_Handler+0x170>)
   80c28:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80c2a:	b2d1      	uxtb	r1, r2
   80c2c:	4a22      	ldr	r2, [pc, #136]	; (80cb8 <TWI0_Handler+0x198>)
   80c2e:	4413      	add	r3, r2
   80c30:	460a      	mov	r2, r1
   80c32:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(rxCallback != NULL)
   80c34:	4b21      	ldr	r3, [pc, #132]	; (80cbc <TWI0_Handler+0x19c>)
   80c36:	681b      	ldr	r3, [r3, #0]
   80c38:	2b00      	cmp	r3, #0
   80c3a:	d002      	beq.n	80c42 <TWI0_Handler+0x122>
        {
            rxCallback();
   80c3c:	4b1f      	ldr	r3, [pc, #124]	; (80cbc <TWI0_Handler+0x19c>)
   80c3e:	681b      	ldr	r3, [r3, #0]
   80c40:	4798      	blx	r3
        }

        twiBusy = false;
   80c42:	4b1c      	ldr	r3, [pc, #112]	; (80cb4 <TWI0_Handler+0x194>)
   80c44:	2200      	movs	r2, #0
   80c46:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   80c48:	687b      	ldr	r3, [r7, #4]
   80c4a:	f403 7350 	and.w	r3, r3, #832	; 0x340
   80c4e:	2b00      	cmp	r3, #0
   80c50:	d019      	beq.n	80c86 <TWI0_Handler+0x166>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   80c52:	f240 2102 	movw	r1, #514	; 0x202
   80c56:	4811      	ldr	r0, [pc, #68]	; (80c9c <TWI0_Handler+0x17c>)
   80c58:	4b11      	ldr	r3, [pc, #68]	; (80ca0 <TWI0_Handler+0x180>)
   80c5a:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   80c5c:	687b      	ldr	r3, [r7, #4]
   80c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   80c62:	2b00      	cmp	r3, #0
   80c64:	d102      	bne.n	80c6c <TWI0_Handler+0x14c>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   80c66:	4b0a      	ldr	r3, [pc, #40]	; (80c90 <TWI0_Handler+0x170>)
   80c68:	2202      	movs	r2, #2
   80c6a:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   80c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80c70:	4807      	ldr	r0, [pc, #28]	; (80c90 <TWI0_Handler+0x170>)
   80c72:	4b0c      	ldr	r3, [pc, #48]	; (80ca4 <TWI0_Handler+0x184>)
   80c74:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   80c76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80c7a:	4805      	ldr	r0, [pc, #20]	; (80c90 <TWI0_Handler+0x170>)
   80c7c:	4b09      	ldr	r3, [pc, #36]	; (80ca4 <TWI0_Handler+0x184>)
   80c7e:	4798      	blx	r3

        twiBusy = false;
   80c80:	4b0c      	ldr	r3, [pc, #48]	; (80cb4 <TWI0_Handler+0x194>)
   80c82:	2200      	movs	r2, #0
   80c84:	701a      	strb	r2, [r3, #0]
	}
}
   80c86:	bf00      	nop
   80c88:	370c      	adds	r7, #12
   80c8a:	46bd      	mov	sp, r7
   80c8c:	bd90      	pop	{r4, r7, pc}
   80c8e:	bf00      	nop
   80c90:	4008c000 	.word	0x4008c000
   80c94:	00080cf9 	.word	0x00080cf9
   80c98:	00080d0f 	.word	0x00080d0f
   80c9c:	4008c100 	.word	0x4008c100
   80ca0:	0008020b 	.word	0x0008020b
   80ca4:	00080cdb 	.word	0x00080cdb
   80ca8:	00080cc1 	.word	0x00080cc1
   80cac:	20070b74 	.word	0x20070b74
   80cb0:	20070f80 	.word	0x20070f80
   80cb4:	20070f7c 	.word	0x20070f7c
   80cb8:	20070d78 	.word	0x20070d78
   80cbc:	20070f84 	.word	0x20070f84

00080cc0 <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   80cc0:	b480      	push	{r7}
   80cc2:	b083      	sub	sp, #12
   80cc4:	af00      	add	r7, sp, #0
   80cc6:	6078      	str	r0, [r7, #4]
   80cc8:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   80cca:	687b      	ldr	r3, [r7, #4]
   80ccc:	683a      	ldr	r2, [r7, #0]
   80cce:	625a      	str	r2, [r3, #36]	; 0x24
}
   80cd0:	bf00      	nop
   80cd2:	370c      	adds	r7, #12
   80cd4:	46bd      	mov	sp, r7
   80cd6:	bc80      	pop	{r7}
   80cd8:	4770      	bx	lr

00080cda <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   80cda:	b480      	push	{r7}
   80cdc:	b083      	sub	sp, #12
   80cde:	af00      	add	r7, sp, #0
   80ce0:	6078      	str	r0, [r7, #4]
   80ce2:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   80ce4:	687b      	ldr	r3, [r7, #4]
   80ce6:	683a      	ldr	r2, [r7, #0]
   80ce8:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   80cea:	687b      	ldr	r3, [r7, #4]
   80cec:	6a1b      	ldr	r3, [r3, #32]
}
   80cee:	bf00      	nop
   80cf0:	370c      	adds	r7, #12
   80cf2:	46bd      	mov	sp, r7
   80cf4:	bc80      	pop	{r7}
   80cf6:	4770      	bx	lr

00080cf8 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   80cf8:	b480      	push	{r7}
   80cfa:	b083      	sub	sp, #12
   80cfc:	af00      	add	r7, sp, #0
   80cfe:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   80d00:	687b      	ldr	r3, [r7, #4]
   80d02:	6a1b      	ldr	r3, [r3, #32]
}
   80d04:	4618      	mov	r0, r3
   80d06:	370c      	adds	r7, #12
   80d08:	46bd      	mov	sp, r7
   80d0a:	bc80      	pop	{r7}
   80d0c:	4770      	bx	lr

00080d0e <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   80d0e:	b480      	push	{r7}
   80d10:	b083      	sub	sp, #12
   80d12:	af00      	add	r7, sp, #0
   80d14:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   80d16:	687b      	ldr	r3, [r7, #4]
   80d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   80d1a:	4618      	mov	r0, r3
   80d1c:	370c      	adds	r7, #12
   80d1e:	46bd      	mov	sp, r7
   80d20:	bc80      	pop	{r7}
   80d22:	4770      	bx	lr

00080d24 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   80d24:	b480      	push	{r7}
   80d26:	b083      	sub	sp, #12
   80d28:	af00      	add	r7, sp, #0
   80d2a:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80d2c:	687b      	ldr	r3, [r7, #4]
   80d2e:	2280      	movs	r2, #128	; 0x80
   80d30:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   80d32:	687b      	ldr	r3, [r7, #4]
   80d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   80d36:	bf00      	nop
   80d38:	370c      	adds	r7, #12
   80d3a:	46bd      	mov	sp, r7
   80d3c:	bc80      	pop	{r7}
   80d3e:	4770      	bx	lr

00080d40 <osc_get_rate>:
{
   80d40:	b480      	push	{r7}
   80d42:	b083      	sub	sp, #12
   80d44:	af00      	add	r7, sp, #0
   80d46:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80d48:	687b      	ldr	r3, [r7, #4]
   80d4a:	2b07      	cmp	r3, #7
   80d4c:	d825      	bhi.n	80d9a <osc_get_rate+0x5a>
   80d4e:	a201      	add	r2, pc, #4	; (adr r2, 80d54 <osc_get_rate+0x14>)
   80d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d54:	00080d75 	.word	0x00080d75
   80d58:	00080d7b 	.word	0x00080d7b
   80d5c:	00080d81 	.word	0x00080d81
   80d60:	00080d87 	.word	0x00080d87
   80d64:	00080d8b 	.word	0x00080d8b
   80d68:	00080d8f 	.word	0x00080d8f
   80d6c:	00080d93 	.word	0x00080d93
   80d70:	00080d97 	.word	0x00080d97
		return OSC_SLCK_32K_RC_HZ;
   80d74:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80d78:	e010      	b.n	80d9c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   80d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80d7e:	e00d      	b.n	80d9c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   80d80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80d84:	e00a      	b.n	80d9c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   80d86:	4b08      	ldr	r3, [pc, #32]	; (80da8 <osc_get_rate+0x68>)
   80d88:	e008      	b.n	80d9c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   80d8a:	4b08      	ldr	r3, [pc, #32]	; (80dac <osc_get_rate+0x6c>)
   80d8c:	e006      	b.n	80d9c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   80d8e:	4b08      	ldr	r3, [pc, #32]	; (80db0 <osc_get_rate+0x70>)
   80d90:	e004      	b.n	80d9c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   80d92:	4b07      	ldr	r3, [pc, #28]	; (80db0 <osc_get_rate+0x70>)
   80d94:	e002      	b.n	80d9c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   80d96:	4b06      	ldr	r3, [pc, #24]	; (80db0 <osc_get_rate+0x70>)
   80d98:	e000      	b.n	80d9c <osc_get_rate+0x5c>
	return 0;
   80d9a:	2300      	movs	r3, #0
}
   80d9c:	4618      	mov	r0, r3
   80d9e:	370c      	adds	r7, #12
   80da0:	46bd      	mov	sp, r7
   80da2:	bc80      	pop	{r7}
   80da4:	4770      	bx	lr
   80da6:	bf00      	nop
   80da8:	003d0900 	.word	0x003d0900
   80dac:	007a1200 	.word	0x007a1200
   80db0:	00b71b00 	.word	0x00b71b00

00080db4 <sysclk_get_main_hz>:
{
   80db4:	b580      	push	{r7, lr}
   80db6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   80db8:	2006      	movs	r0, #6
   80dba:	4b04      	ldr	r3, [pc, #16]	; (80dcc <sysclk_get_main_hz+0x18>)
   80dbc:	4798      	blx	r3
   80dbe:	4602      	mov	r2, r0
   80dc0:	4613      	mov	r3, r2
   80dc2:	00db      	lsls	r3, r3, #3
   80dc4:	1a9b      	subs	r3, r3, r2
   80dc6:	005b      	lsls	r3, r3, #1
}
   80dc8:	4618      	mov	r0, r3
   80dca:	bd80      	pop	{r7, pc}
   80dcc:	00080d41 	.word	0x00080d41

00080dd0 <sysclk_get_peripheral_hz>:
{
   80dd0:	b580      	push	{r7, lr}
   80dd2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   80dd4:	4b02      	ldr	r3, [pc, #8]	; (80de0 <sysclk_get_peripheral_hz+0x10>)
   80dd6:	4798      	blx	r3
   80dd8:	4603      	mov	r3, r0
   80dda:	085b      	lsrs	r3, r3, #1
}
   80ddc:	4618      	mov	r0, r3
   80dde:	bd80      	pop	{r7, pc}
   80de0:	00080db5 	.word	0x00080db5

00080de4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80de4:	b580      	push	{r7, lr}
   80de6:	b082      	sub	sp, #8
   80de8:	af00      	add	r7, sp, #0
   80dea:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80dec:	6878      	ldr	r0, [r7, #4]
   80dee:	4b03      	ldr	r3, [pc, #12]	; (80dfc <sysclk_enable_peripheral_clock+0x18>)
   80df0:	4798      	blx	r3
}
   80df2:	bf00      	nop
   80df4:	3708      	adds	r7, #8
   80df6:	46bd      	mov	sp, r7
   80df8:	bd80      	pop	{r7, pc}
   80dfa:	bf00      	nop
   80dfc:	000829fd 	.word	0x000829fd

00080e00 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   80e00:	b580      	push	{r7, lr}
   80e02:	b082      	sub	sp, #8
   80e04:	af00      	add	r7, sp, #0
   80e06:	6078      	str	r0, [r7, #4]
   80e08:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   80e0a:	4b10      	ldr	r3, [pc, #64]	; (80e4c <twi_master_setup+0x4c>)
   80e0c:	4798      	blx	r3
   80e0e:	4602      	mov	r2, r0
   80e10:	683b      	ldr	r3, [r7, #0]
   80e12:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   80e14:	683b      	ldr	r3, [r7, #0]
   80e16:	2200      	movs	r2, #0
   80e18:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   80e1a:	687b      	ldr	r3, [r7, #4]
   80e1c:	4a0c      	ldr	r2, [pc, #48]	; (80e50 <twi_master_setup+0x50>)
   80e1e:	4293      	cmp	r3, r2
   80e20:	d103      	bne.n	80e2a <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   80e22:	2016      	movs	r0, #22
   80e24:	4b0b      	ldr	r3, [pc, #44]	; (80e54 <twi_master_setup+0x54>)
   80e26:	4798      	blx	r3
   80e28:	e006      	b.n	80e38 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   80e2a:	687b      	ldr	r3, [r7, #4]
   80e2c:	4a0a      	ldr	r2, [pc, #40]	; (80e58 <twi_master_setup+0x58>)
   80e2e:	4293      	cmp	r3, r2
   80e30:	d102      	bne.n	80e38 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   80e32:	2017      	movs	r0, #23
   80e34:	4b07      	ldr	r3, [pc, #28]	; (80e54 <twi_master_setup+0x54>)
   80e36:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80e38:	6839      	ldr	r1, [r7, #0]
   80e3a:	6878      	ldr	r0, [r7, #4]
   80e3c:	4b07      	ldr	r3, [pc, #28]	; (80e5c <twi_master_setup+0x5c>)
   80e3e:	4798      	blx	r3
   80e40:	4603      	mov	r3, r0
}
   80e42:	4618      	mov	r0, r3
   80e44:	3708      	adds	r7, #8
   80e46:	46bd      	mov	sp, r7
   80e48:	bd80      	pop	{r7, pc}
   80e4a:	bf00      	nop
   80e4c:	00080dd1 	.word	0x00080dd1
   80e50:	4008c000 	.word	0x4008c000
   80e54:	00080de5 	.word	0x00080de5
   80e58:	40090000 	.word	0x40090000
   80e5c:	0008084d 	.word	0x0008084d

00080e60 <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   80e60:	b580      	push	{r7, lr}
   80e62:	b082      	sub	sp, #8
   80e64:	af00      	add	r7, sp, #0
    twi_package_t *tx_packet = twi_get_tx_packet();
   80e66:	4b29      	ldr	r3, [pc, #164]	; (80f0c <lcd_init+0xac>)
   80e68:	4798      	blx	r3
   80e6a:	6078      	str	r0, [r7, #4]

    tx_packet->chip = 0x27;
   80e6c:	687b      	ldr	r3, [r7, #4]
   80e6e:	2227      	movs	r2, #39	; 0x27
   80e70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
    tx_packet->addr[0] = 0x00;
   80e74:	687b      	ldr	r3, [r7, #4]
   80e76:	2200      	movs	r2, #0
   80e78:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   80e7a:	687b      	ldr	r3, [r7, #4]
   80e7c:	2200      	movs	r2, #0
   80e7e:	605a      	str	r2, [r3, #4]
    
    twi_set_tx_callback(lcd_callback);
   80e80:	4823      	ldr	r0, [pc, #140]	; (80f10 <lcd_init+0xb0>)
   80e82:	4b24      	ldr	r3, [pc, #144]	; (80f14 <lcd_init+0xb4>)
   80e84:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   80e86:	220c      	movs	r2, #12
   80e88:	2100      	movs	r1, #0
   80e8a:	4823      	ldr	r0, [pc, #140]	; (80f18 <lcd_init+0xb8>)
   80e8c:	4b23      	ldr	r3, [pc, #140]	; (80f1c <lcd_init+0xbc>)
   80e8e:	4798      	blx	r3
    twiConfig.speed = 100000;
   80e90:	4b21      	ldr	r3, [pc, #132]	; (80f18 <lcd_init+0xb8>)
   80e92:	4a23      	ldr	r2, [pc, #140]	; (80f20 <lcd_init+0xc0>)
   80e94:	605a      	str	r2, [r3, #4]
    twi_master_setup(TWI0, &twiConfig);
   80e96:	4920      	ldr	r1, [pc, #128]	; (80f18 <lcd_init+0xb8>)
   80e98:	4822      	ldr	r0, [pc, #136]	; (80f24 <lcd_init+0xc4>)
   80e9a:	4b23      	ldr	r3, [pc, #140]	; (80f28 <lcd_init+0xc8>)
   80e9c:	4798      	blx	r3

    backlight = LCD_LIGHT_OFF;
   80e9e:	4b23      	ldr	r3, [pc, #140]	; (80f2c <lcd_init+0xcc>)
   80ea0:	2200      	movs	r2, #0
   80ea2:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   80ea4:	2103      	movs	r1, #3
   80ea6:	2000      	movs	r0, #0
   80ea8:	4b21      	ldr	r3, [pc, #132]	; (80f30 <lcd_init+0xd0>)
   80eaa:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   80eac:	2006      	movs	r0, #6
   80eae:	4b21      	ldr	r3, [pc, #132]	; (80f34 <lcd_init+0xd4>)
   80eb0:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   80eb2:	2103      	movs	r1, #3
   80eb4:	2000      	movs	r0, #0
   80eb6:	4b1e      	ldr	r3, [pc, #120]	; (80f30 <lcd_init+0xd0>)
   80eb8:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   80eba:	2006      	movs	r0, #6
   80ebc:	4b1d      	ldr	r3, [pc, #116]	; (80f34 <lcd_init+0xd4>)
   80ebe:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   80ec0:	2103      	movs	r1, #3
   80ec2:	2000      	movs	r0, #0
   80ec4:	4b1a      	ldr	r3, [pc, #104]	; (80f30 <lcd_init+0xd0>)
   80ec6:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   80ec8:	2006      	movs	r0, #6
   80eca:	4b1a      	ldr	r3, [pc, #104]	; (80f34 <lcd_init+0xd4>)
   80ecc:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   80ece:	2102      	movs	r1, #2
   80ed0:	2000      	movs	r0, #0
   80ed2:	4b17      	ldr	r3, [pc, #92]	; (80f30 <lcd_init+0xd0>)
   80ed4:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   80ed6:	2128      	movs	r1, #40	; 0x28
   80ed8:	2000      	movs	r0, #0
   80eda:	4b17      	ldr	r3, [pc, #92]	; (80f38 <lcd_init+0xd8>)
   80edc:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   80ede:	2108      	movs	r1, #8
   80ee0:	2000      	movs	r0, #0
   80ee2:	4b15      	ldr	r3, [pc, #84]	; (80f38 <lcd_init+0xd8>)
   80ee4:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   80ee6:	2101      	movs	r1, #1
   80ee8:	2000      	movs	r0, #0
   80eea:	4b13      	ldr	r3, [pc, #76]	; (80f38 <lcd_init+0xd8>)
   80eec:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   80eee:	2003      	movs	r0, #3
   80ef0:	4b10      	ldr	r3, [pc, #64]	; (80f34 <lcd_init+0xd4>)
   80ef2:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   80ef4:	2106      	movs	r1, #6
   80ef6:	2000      	movs	r0, #0
   80ef8:	4b0f      	ldr	r3, [pc, #60]	; (80f38 <lcd_init+0xd8>)
   80efa:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   80efc:	210c      	movs	r1, #12
   80efe:	2000      	movs	r0, #0
   80f00:	4b0d      	ldr	r3, [pc, #52]	; (80f38 <lcd_init+0xd8>)
   80f02:	4798      	blx	r3
}
   80f04:	bf00      	nop
   80f06:	3708      	adds	r7, #8
   80f08:	46bd      	mov	sp, r7
   80f0a:	bd80      	pop	{r7, pc}
   80f0c:	00080a2d 	.word	0x00080a2d
   80f10:	0008161d 	.word	0x0008161d
   80f14:	00080b05 	.word	0x00080b05
   80f18:	20070f94 	.word	0x20070f94
   80f1c:	00083699 	.word	0x00083699
   80f20:	000186a0 	.word	0x000186a0
   80f24:	4008c000 	.word	0x4008c000
   80f28:	00080e01 	.word	0x00080e01
   80f2c:	20070f88 	.word	0x20070f88
   80f30:	000813f5 	.word	0x000813f5
   80f34:	00081f85 	.word	0x00081f85
   80f38:	000814f1 	.word	0x000814f1

00080f3c <lcd_set_backlight>:

void lcd_set_backlight(backlight_t state)
{
   80f3c:	b580      	push	{r7, lr}
   80f3e:	b082      	sub	sp, #8
   80f40:	af00      	add	r7, sp, #0
   80f42:	4603      	mov	r3, r0
   80f44:	71fb      	strb	r3, [r7, #7]
    backlight = state;
   80f46:	4a07      	ldr	r2, [pc, #28]	; (80f64 <lcd_set_backlight+0x28>)
   80f48:	79fb      	ldrb	r3, [r7, #7]
   80f4a:	7013      	strb	r3, [r2, #0]
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   80f4c:	2101      	movs	r1, #1
   80f4e:	2000      	movs	r0, #0
   80f50:	4b05      	ldr	r3, [pc, #20]	; (80f68 <lcd_set_backlight+0x2c>)
   80f52:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   80f54:	2003      	movs	r0, #3
   80f56:	4b05      	ldr	r3, [pc, #20]	; (80f6c <lcd_set_backlight+0x30>)
   80f58:	4798      	blx	r3
}
   80f5a:	bf00      	nop
   80f5c:	3708      	adds	r7, #8
   80f5e:	46bd      	mov	sp, r7
   80f60:	bd80      	pop	{r7, pc}
   80f62:	bf00      	nop
   80f64:	20070f88 	.word	0x20070f88
   80f68:	000814f1 	.word	0x000814f1
   80f6c:	00081f85 	.word	0x00081f85

00080f70 <lcd_clear>:

void lcd_clear(void)
{
   80f70:	b580      	push	{r7, lr}
   80f72:	af00      	add	r7, sp, #0
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   80f74:	2101      	movs	r1, #1
   80f76:	2000      	movs	r0, #0
   80f78:	4b03      	ldr	r3, [pc, #12]	; (80f88 <lcd_clear+0x18>)
   80f7a:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   80f7c:	2003      	movs	r0, #3
   80f7e:	4b03      	ldr	r3, [pc, #12]	; (80f8c <lcd_clear+0x1c>)
   80f80:	4798      	blx	r3
}
   80f82:	bf00      	nop
   80f84:	bd80      	pop	{r7, pc}
   80f86:	bf00      	nop
   80f88:	000814f1 	.word	0x000814f1
   80f8c:	00081f85 	.word	0x00081f85

00080f90 <lcd_print_s>:
    sprintf(str, "%10lu", data);
    lcd_print_s(line, col, str);
}

void lcd_print_s(int8_t line, uint8_t col, const char* str)
{
   80f90:	b590      	push	{r4, r7, lr}
   80f92:	b087      	sub	sp, #28
   80f94:	af00      	add	r7, sp, #0
   80f96:	4603      	mov	r3, r0
   80f98:	603a      	str	r2, [r7, #0]
   80f9a:	71fb      	strb	r3, [r7, #7]
   80f9c:	460b      	mov	r3, r1
   80f9e:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   80fa0:	4b76      	ldr	r3, [pc, #472]	; (8117c <lcd_print_s+0x1ec>)
   80fa2:	4798      	blx	r3
   80fa4:	6138      	str	r0, [r7, #16]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    
    while(lcdIsBusy | twi_is_busy())
   80fa6:	e019      	b.n	80fdc <lcd_print_s+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   80fa8:	4b75      	ldr	r3, [pc, #468]	; (81180 <lcd_print_s+0x1f0>)
   80faa:	4798      	blx	r3
   80fac:	4602      	mov	r2, r0
   80fae:	4b75      	ldr	r3, [pc, #468]	; (81184 <lcd_print_s+0x1f4>)
   80fb0:	681b      	ldr	r3, [r3, #0]
   80fb2:	1ad3      	subs	r3, r2, r3
   80fb4:	2b64      	cmp	r3, #100	; 0x64
   80fb6:	d911      	bls.n	80fdc <lcd_print_s+0x4c>
        {
            lcdIsBusy = false;
   80fb8:	4b73      	ldr	r3, [pc, #460]	; (81188 <lcd_print_s+0x1f8>)
   80fba:	2200      	movs	r2, #0
   80fbc:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   80fbe:	4b73      	ldr	r3, [pc, #460]	; (8118c <lcd_print_s+0x1fc>)
   80fc0:	681b      	ldr	r3, [r3, #0]
   80fc2:	3301      	adds	r3, #1
   80fc4:	4a71      	ldr	r2, [pc, #452]	; (8118c <lcd_print_s+0x1fc>)
   80fc6:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   80fc8:	f240 2102 	movw	r1, #514	; 0x202
   80fcc:	4870      	ldr	r0, [pc, #448]	; (81190 <lcd_print_s+0x200>)
   80fce:	4b71      	ldr	r3, [pc, #452]	; (81194 <lcd_print_s+0x204>)
   80fd0:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   80fd2:	4971      	ldr	r1, [pc, #452]	; (81198 <lcd_print_s+0x208>)
   80fd4:	4871      	ldr	r0, [pc, #452]	; (8119c <lcd_print_s+0x20c>)
   80fd6:	4b72      	ldr	r3, [pc, #456]	; (811a0 <lcd_print_s+0x210>)
   80fd8:	4798      	blx	r3
            break;
   80fda:	e009      	b.n	80ff0 <lcd_print_s+0x60>
    while(lcdIsBusy | twi_is_busy())
   80fdc:	4b71      	ldr	r3, [pc, #452]	; (811a4 <lcd_print_s+0x214>)
   80fde:	4798      	blx	r3
   80fe0:	4603      	mov	r3, r0
   80fe2:	461a      	mov	r2, r3
   80fe4:	4b68      	ldr	r3, [pc, #416]	; (81188 <lcd_print_s+0x1f8>)
   80fe6:	781b      	ldrb	r3, [r3, #0]
   80fe8:	4313      	orrs	r3, r2
   80fea:	b2db      	uxtb	r3, r3
   80fec:	2b00      	cmp	r3, #0
   80fee:	d1db      	bne.n	80fa8 <lcd_print_s+0x18>
        }
    }
    
    // Calculate display address
    switch(line)
   80ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80ff4:	3b01      	subs	r3, #1
   80ff6:	2b03      	cmp	r3, #3
   80ff8:	f200 80bb 	bhi.w	81172 <lcd_print_s+0x1e2>
   80ffc:	a201      	add	r2, pc, #4	; (adr r2, 81004 <lcd_print_s+0x74>)
   80ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81002:	bf00      	nop
   81004:	00081015 	.word	0x00081015
   81008:	0008101b 	.word	0x0008101b
   8100c:	00081021 	.word	0x00081021
   81010:	00081027 	.word	0x00081027
    {
        case 1:
            addr = 0x80;          // set address to start of line 1
   81014:	2380      	movs	r3, #128	; 0x80
   81016:	75fb      	strb	r3, [r7, #23]
            break;
   81018:	e008      	b.n	8102c <lcd_print_s+0x9c>
        case 2:
            addr = 0x80 | 0x40;   // set address to start of line 2
   8101a:	23c0      	movs	r3, #192	; 0xc0
   8101c:	75fb      	strb	r3, [r7, #23]
            break;
   8101e:	e005      	b.n	8102c <lcd_print_s+0x9c>
        case 3:
            addr = 0x80 | 0x14;   // set address to start of line 3
   81020:	2394      	movs	r3, #148	; 0x94
   81022:	75fb      	strb	r3, [r7, #23]
            break;
   81024:	e002      	b.n	8102c <lcd_print_s+0x9c>
        case 4:
            addr = 0x80 | 0x54;   // set address to start of line 4
   81026:	23d4      	movs	r3, #212	; 0xd4
   81028:	75fb      	strb	r3, [r7, #23]
            break;
   8102a:	bf00      	nop
        default:
            return;               // return immediately, if value is out of range
            break;
    }
    addr += col;  // set column in the selected line
   8102c:	7dfa      	ldrb	r2, [r7, #23]
   8102e:	79bb      	ldrb	r3, [r7, #6]
   81030:	4413      	add	r3, r2
   81032:	75fb      	strb	r3, [r7, #23]

    // Set cursor
    cmd = LCD_FUNTION_WRITE | backlight;
   81034:	4b5c      	ldr	r3, [pc, #368]	; (811a8 <lcd_print_s+0x218>)
   81036:	781b      	ldrb	r3, [r3, #0]
   81038:	73fb      	strb	r3, [r7, #15]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   8103a:	7dfb      	ldrb	r3, [r7, #23]
   8103c:	f023 030f 	bic.w	r3, r3, #15
   81040:	b2da      	uxtb	r2, r3
   81042:	7bfb      	ldrb	r3, [r7, #15]
   81044:	4313      	orrs	r3, r2
   81046:	b2db      	uxtb	r3, r3
   81048:	f043 0304 	orr.w	r3, r3, #4
   8104c:	b2da      	uxtb	r2, r3
   8104e:	693b      	ldr	r3, [r7, #16]
   81050:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   81052:	f997 3017 	ldrsb.w	r3, [r7, #23]
   81056:	f023 030f 	bic.w	r3, r3, #15
   8105a:	b25a      	sxtb	r2, r3
   8105c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   81060:	4313      	orrs	r3, r2
   81062:	b25b      	sxtb	r3, r3
   81064:	b2da      	uxtb	r2, r3
   81066:	693b      	ldr	r3, [r7, #16]
   81068:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   8106a:	7dfb      	ldrb	r3, [r7, #23]
   8106c:	011b      	lsls	r3, r3, #4
   8106e:	b2da      	uxtb	r2, r3
   81070:	7bfb      	ldrb	r3, [r7, #15]
   81072:	4313      	orrs	r3, r2
   81074:	b2db      	uxtb	r3, r3
   81076:	f043 0304 	orr.w	r3, r3, #4
   8107a:	b2da      	uxtb	r2, r3
   8107c:	693b      	ldr	r3, [r7, #16]
   8107e:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   81080:	7dfb      	ldrb	r3, [r7, #23]
   81082:	011b      	lsls	r3, r3, #4
   81084:	b25a      	sxtb	r2, r3
   81086:	f997 300f 	ldrsb.w	r3, [r7, #15]
   8108a:	4313      	orrs	r3, r2
   8108c:	b25b      	sxtb	r3, r3
   8108e:	b2da      	uxtb	r2, r3
   81090:	693b      	ldr	r3, [r7, #16]
   81092:	72da      	strb	r2, [r3, #11]
    
    // write string ...
    cmd = LCD_WRITE_DDR | backlight;
   81094:	4b44      	ldr	r3, [pc, #272]	; (811a8 <lcd_print_s+0x218>)
   81096:	781b      	ldrb	r3, [r3, #0]
   81098:	f043 0301 	orr.w	r3, r3, #1
   8109c:	73fb      	strb	r3, [r7, #15]
    for(count = 0; count < strlen(str); count++)
   8109e:	2300      	movs	r3, #0
   810a0:	75bb      	strb	r3, [r7, #22]
   810a2:	e04b      	b.n	8113c <lcd_print_s+0x1ac>
    {
        byte = str[count];
   810a4:	7dbb      	ldrb	r3, [r7, #22]
   810a6:	683a      	ldr	r2, [r7, #0]
   810a8:	4413      	add	r3, r2
   810aa:	781b      	ldrb	r3, [r3, #0]
   810ac:	73bb      	strb	r3, [r7, #14]
        tx_packet->buffer[4 + count * 4 + 0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   810ae:	7dbb      	ldrb	r3, [r7, #22]
   810b0:	3301      	adds	r3, #1
   810b2:	009b      	lsls	r3, r3, #2
   810b4:	7bba      	ldrb	r2, [r7, #14]
   810b6:	f022 020f 	bic.w	r2, r2, #15
   810ba:	b2d1      	uxtb	r1, r2
   810bc:	7bfa      	ldrb	r2, [r7, #15]
   810be:	430a      	orrs	r2, r1
   810c0:	b2d2      	uxtb	r2, r2
   810c2:	f042 0204 	orr.w	r2, r2, #4
   810c6:	b2d1      	uxtb	r1, r2
   810c8:	693a      	ldr	r2, [r7, #16]
   810ca:	4413      	add	r3, r2
   810cc:	460a      	mov	r2, r1
   810ce:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   810d0:	7dbb      	ldrb	r3, [r7, #22]
   810d2:	3301      	adds	r3, #1
   810d4:	009b      	lsls	r3, r3, #2
   810d6:	3301      	adds	r3, #1
   810d8:	f997 200e 	ldrsb.w	r2, [r7, #14]
   810dc:	f022 020f 	bic.w	r2, r2, #15
   810e0:	b251      	sxtb	r1, r2
   810e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
   810e6:	430a      	orrs	r2, r1
   810e8:	b252      	sxtb	r2, r2
   810ea:	b2d1      	uxtb	r1, r2
   810ec:	693a      	ldr	r2, [r7, #16]
   810ee:	4413      	add	r3, r2
   810f0:	460a      	mov	r2, r1
   810f2:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   810f4:	7dbb      	ldrb	r3, [r7, #22]
   810f6:	3301      	adds	r3, #1
   810f8:	009b      	lsls	r3, r3, #2
   810fa:	3302      	adds	r3, #2
   810fc:	7bba      	ldrb	r2, [r7, #14]
   810fe:	0112      	lsls	r2, r2, #4
   81100:	b2d1      	uxtb	r1, r2
   81102:	7bfa      	ldrb	r2, [r7, #15]
   81104:	430a      	orrs	r2, r1
   81106:	b2d2      	uxtb	r2, r2
   81108:	f042 0204 	orr.w	r2, r2, #4
   8110c:	b2d1      	uxtb	r1, r2
   8110e:	693a      	ldr	r2, [r7, #16]
   81110:	4413      	add	r3, r2
   81112:	460a      	mov	r2, r1
   81114:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81116:	7dbb      	ldrb	r3, [r7, #22]
   81118:	3301      	adds	r3, #1
   8111a:	009b      	lsls	r3, r3, #2
   8111c:	3303      	adds	r3, #3
   8111e:	7bba      	ldrb	r2, [r7, #14]
   81120:	0112      	lsls	r2, r2, #4
   81122:	b251      	sxtb	r1, r2
   81124:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81128:	430a      	orrs	r2, r1
   8112a:	b252      	sxtb	r2, r2
   8112c:	b2d1      	uxtb	r1, r2
   8112e:	693a      	ldr	r2, [r7, #16]
   81130:	4413      	add	r3, r2
   81132:	460a      	mov	r2, r1
   81134:	721a      	strb	r2, [r3, #8]
    for(count = 0; count < strlen(str); count++)
   81136:	7dbb      	ldrb	r3, [r7, #22]
   81138:	3301      	adds	r3, #1
   8113a:	75bb      	strb	r3, [r7, #22]
   8113c:	7dbc      	ldrb	r4, [r7, #22]
   8113e:	6838      	ldr	r0, [r7, #0]
   81140:	4b1a      	ldr	r3, [pc, #104]	; (811ac <lcd_print_s+0x21c>)
   81142:	4798      	blx	r3
   81144:	4603      	mov	r3, r0
   81146:	429c      	cmp	r4, r3
   81148:	d3ac      	bcc.n	810a4 <lcd_print_s+0x114>
    }
    tx_packet->length = 4 + count * 4;
   8114a:	7dbb      	ldrb	r3, [r7, #22]
   8114c:	3301      	adds	r3, #1
   8114e:	009b      	lsls	r3, r3, #2
   81150:	461a      	mov	r2, r3
   81152:	693b      	ldr	r3, [r7, #16]
   81154:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

    lcdIsBusy = true;
   81158:	4b0b      	ldr	r3, [pc, #44]	; (81188 <lcd_print_s+0x1f8>)
   8115a:	2201      	movs	r2, #1
   8115c:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   8115e:	6939      	ldr	r1, [r7, #16]
   81160:	480e      	ldr	r0, [pc, #56]	; (8119c <lcd_print_s+0x20c>)
   81162:	4b13      	ldr	r3, [pc, #76]	; (811b0 <lcd_print_s+0x220>)
   81164:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81166:	4b06      	ldr	r3, [pc, #24]	; (81180 <lcd_print_s+0x1f0>)
   81168:	4798      	blx	r3
   8116a:	4602      	mov	r2, r0
   8116c:	4b05      	ldr	r3, [pc, #20]	; (81184 <lcd_print_s+0x1f4>)
   8116e:	601a      	str	r2, [r3, #0]
   81170:	e000      	b.n	81174 <lcd_print_s+0x1e4>
            return;               // return immediately, if value is out of range
   81172:	bf00      	nop
}
   81174:	371c      	adds	r7, #28
   81176:	46bd      	mov	sp, r7
   81178:	bd90      	pop	{r4, r7, pc}
   8117a:	bf00      	nop
   8117c:	00080a2d 	.word	0x00080a2d
   81180:	00081f71 	.word	0x00081f71
   81184:	20070f8c 	.word	0x20070f8c
   81188:	20070f89 	.word	0x20070f89
   8118c:	20070f90 	.word	0x20070f90
   81190:	4008c100 	.word	0x4008c100
   81194:	0008020b 	.word	0x0008020b
   81198:	20070f94 	.word	0x20070f94
   8119c:	4008c000 	.word	0x4008c000
   811a0:	00080e01 	.word	0x00080e01
   811a4:	00080a19 	.word	0x00080a19
   811a8:	20070f88 	.word	0x20070f88
   811ac:	00083781 	.word	0x00083781
   811b0:	00080a41 	.word	0x00080a41

000811b4 <lcd_print_m>:

void lcd_print_m(char* str[])
{
   811b4:	b590      	push	{r4, r7, lr}
   811b6:	b087      	sub	sp, #28
   811b8:	af00      	add	r7, sp, #0
   811ba:	6078      	str	r0, [r7, #4]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   811bc:	4b7f      	ldr	r3, [pc, #508]	; (813bc <lcd_print_m+0x208>)
   811be:	4798      	blx	r3
   811c0:	60f8      	str	r0, [r7, #12]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    uint8_t line;
    uint16_t index = 0;
   811c2:	2300      	movs	r3, #0
   811c4:	827b      	strh	r3, [r7, #18]
    
    while(lcdIsBusy | twi_is_busy())
   811c6:	e019      	b.n	811fc <lcd_print_m+0x48>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   811c8:	4b7d      	ldr	r3, [pc, #500]	; (813c0 <lcd_print_m+0x20c>)
   811ca:	4798      	blx	r3
   811cc:	4602      	mov	r2, r0
   811ce:	4b7d      	ldr	r3, [pc, #500]	; (813c4 <lcd_print_m+0x210>)
   811d0:	681b      	ldr	r3, [r3, #0]
   811d2:	1ad3      	subs	r3, r2, r3
   811d4:	2b64      	cmp	r3, #100	; 0x64
   811d6:	d911      	bls.n	811fc <lcd_print_m+0x48>
        {
            lcdIsBusy = false;
   811d8:	4b7b      	ldr	r3, [pc, #492]	; (813c8 <lcd_print_m+0x214>)
   811da:	2200      	movs	r2, #0
   811dc:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   811de:	4b7b      	ldr	r3, [pc, #492]	; (813cc <lcd_print_m+0x218>)
   811e0:	681b      	ldr	r3, [r3, #0]
   811e2:	3301      	adds	r3, #1
   811e4:	4a79      	ldr	r2, [pc, #484]	; (813cc <lcd_print_m+0x218>)
   811e6:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   811e8:	f240 2102 	movw	r1, #514	; 0x202
   811ec:	4878      	ldr	r0, [pc, #480]	; (813d0 <lcd_print_m+0x21c>)
   811ee:	4b79      	ldr	r3, [pc, #484]	; (813d4 <lcd_print_m+0x220>)
   811f0:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   811f2:	4979      	ldr	r1, [pc, #484]	; (813d8 <lcd_print_m+0x224>)
   811f4:	4879      	ldr	r0, [pc, #484]	; (813dc <lcd_print_m+0x228>)
   811f6:	4b7a      	ldr	r3, [pc, #488]	; (813e0 <lcd_print_m+0x22c>)
   811f8:	4798      	blx	r3
            break;
   811fa:	e009      	b.n	81210 <lcd_print_m+0x5c>
    while(lcdIsBusy | twi_is_busy())
   811fc:	4b79      	ldr	r3, [pc, #484]	; (813e4 <lcd_print_m+0x230>)
   811fe:	4798      	blx	r3
   81200:	4603      	mov	r3, r0
   81202:	461a      	mov	r2, r3
   81204:	4b70      	ldr	r3, [pc, #448]	; (813c8 <lcd_print_m+0x214>)
   81206:	781b      	ldrb	r3, [r3, #0]
   81208:	4313      	orrs	r3, r2
   8120a:	b2db      	uxtb	r3, r3
   8120c:	2b00      	cmp	r3, #0
   8120e:	d1db      	bne.n	811c8 <lcd_print_m+0x14>
        }
    }

    for(line = 0; line < 4; line++)
   81210:	2300      	movs	r3, #0
   81212:	757b      	strb	r3, [r7, #21]
   81214:	e0ba      	b.n	8138c <lcd_print_m+0x1d8>
    {
        // Calculate display address
        switch(line)
   81216:	7d7b      	ldrb	r3, [r7, #21]
   81218:	2b02      	cmp	r3, #2
   8121a:	d006      	beq.n	8122a <lcd_print_m+0x76>
   8121c:	2b03      	cmp	r3, #3
   8121e:	d007      	beq.n	81230 <lcd_print_m+0x7c>
   81220:	2b01      	cmp	r3, #1
   81222:	d108      	bne.n	81236 <lcd_print_m+0x82>
        {
            case 1:
                addr = 0x80 | 0x40;   // set address to start of line 2
   81224:	23c0      	movs	r3, #192	; 0xc0
   81226:	75fb      	strb	r3, [r7, #23]
                break;
   81228:	e008      	b.n	8123c <lcd_print_m+0x88>
            case 2:
                addr = 0x80 | 0x14;   // set address to start of line 3
   8122a:	2394      	movs	r3, #148	; 0x94
   8122c:	75fb      	strb	r3, [r7, #23]
                break;
   8122e:	e005      	b.n	8123c <lcd_print_m+0x88>
            case 3:
                addr = 0x80 | 0x54;   // set address to start of line 4
   81230:	23d4      	movs	r3, #212	; 0xd4
   81232:	75fb      	strb	r3, [r7, #23]
                break;
   81234:	e002      	b.n	8123c <lcd_print_m+0x88>
            case 0:
            default:
                addr = 0x80;          // set address to start of line 1
   81236:	2380      	movs	r3, #128	; 0x80
   81238:	75fb      	strb	r3, [r7, #23]
                break;
   8123a:	bf00      	nop
        }

        // Set cursor
        cmd = LCD_FUNTION_WRITE | backlight;
   8123c:	4b6a      	ldr	r3, [pc, #424]	; (813e8 <lcd_print_m+0x234>)
   8123e:	781b      	ldrb	r3, [r3, #0]
   81240:	72fb      	strb	r3, [r7, #11]
        tx_packet->buffer[index++] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   81242:	8a7b      	ldrh	r3, [r7, #18]
   81244:	1c5a      	adds	r2, r3, #1
   81246:	827a      	strh	r2, [r7, #18]
   81248:	4619      	mov	r1, r3
   8124a:	7dfb      	ldrb	r3, [r7, #23]
   8124c:	f023 030f 	bic.w	r3, r3, #15
   81250:	b2da      	uxtb	r2, r3
   81252:	7afb      	ldrb	r3, [r7, #11]
   81254:	4313      	orrs	r3, r2
   81256:	b2db      	uxtb	r3, r3
   81258:	f043 0304 	orr.w	r3, r3, #4
   8125c:	b2da      	uxtb	r2, r3
   8125e:	68fb      	ldr	r3, [r7, #12]
   81260:	440b      	add	r3, r1
   81262:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[index++] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   81264:	8a7b      	ldrh	r3, [r7, #18]
   81266:	1c5a      	adds	r2, r3, #1
   81268:	827a      	strh	r2, [r7, #18]
   8126a:	4619      	mov	r1, r3
   8126c:	f997 3017 	ldrsb.w	r3, [r7, #23]
   81270:	f023 030f 	bic.w	r3, r3, #15
   81274:	b25a      	sxtb	r2, r3
   81276:	f997 300b 	ldrsb.w	r3, [r7, #11]
   8127a:	4313      	orrs	r3, r2
   8127c:	b25b      	sxtb	r3, r3
   8127e:	b2da      	uxtb	r2, r3
   81280:	68fb      	ldr	r3, [r7, #12]
   81282:	440b      	add	r3, r1
   81284:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[index++] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   81286:	8a7b      	ldrh	r3, [r7, #18]
   81288:	1c5a      	adds	r2, r3, #1
   8128a:	827a      	strh	r2, [r7, #18]
   8128c:	4619      	mov	r1, r3
   8128e:	7dfb      	ldrb	r3, [r7, #23]
   81290:	011b      	lsls	r3, r3, #4
   81292:	b2da      	uxtb	r2, r3
   81294:	7afb      	ldrb	r3, [r7, #11]
   81296:	4313      	orrs	r3, r2
   81298:	b2db      	uxtb	r3, r3
   8129a:	f043 0304 	orr.w	r3, r3, #4
   8129e:	b2da      	uxtb	r2, r3
   812a0:	68fb      	ldr	r3, [r7, #12]
   812a2:	440b      	add	r3, r1
   812a4:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[index++] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   812a6:	8a7b      	ldrh	r3, [r7, #18]
   812a8:	1c5a      	adds	r2, r3, #1
   812aa:	827a      	strh	r2, [r7, #18]
   812ac:	4619      	mov	r1, r3
   812ae:	7dfb      	ldrb	r3, [r7, #23]
   812b0:	011b      	lsls	r3, r3, #4
   812b2:	b25a      	sxtb	r2, r3
   812b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
   812b8:	4313      	orrs	r3, r2
   812ba:	b25b      	sxtb	r3, r3
   812bc:	b2da      	uxtb	r2, r3
   812be:	68fb      	ldr	r3, [r7, #12]
   812c0:	440b      	add	r3, r1
   812c2:	721a      	strb	r2, [r3, #8]
    
        // write string ...
        cmd = LCD_WRITE_DDR | backlight;
   812c4:	4b48      	ldr	r3, [pc, #288]	; (813e8 <lcd_print_m+0x234>)
   812c6:	781b      	ldrb	r3, [r3, #0]
   812c8:	f043 0301 	orr.w	r3, r3, #1
   812cc:	72fb      	strb	r3, [r7, #11]
        for(count = 0; count < strlen(str[line]); count++)
   812ce:	2300      	movs	r3, #0
   812d0:	75bb      	strb	r3, [r7, #22]
   812d2:	e04c      	b.n	8136e <lcd_print_m+0x1ba>
        {
            byte = str[line][count];
   812d4:	7d7b      	ldrb	r3, [r7, #21]
   812d6:	009b      	lsls	r3, r3, #2
   812d8:	687a      	ldr	r2, [r7, #4]
   812da:	4413      	add	r3, r2
   812dc:	681a      	ldr	r2, [r3, #0]
   812de:	7dbb      	ldrb	r3, [r7, #22]
   812e0:	4413      	add	r3, r2
   812e2:	781b      	ldrb	r3, [r3, #0]
   812e4:	72bb      	strb	r3, [r7, #10]
            tx_packet->buffer[index++] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   812e6:	8a7b      	ldrh	r3, [r7, #18]
   812e8:	1c5a      	adds	r2, r3, #1
   812ea:	827a      	strh	r2, [r7, #18]
   812ec:	4619      	mov	r1, r3
   812ee:	7abb      	ldrb	r3, [r7, #10]
   812f0:	f023 030f 	bic.w	r3, r3, #15
   812f4:	b2da      	uxtb	r2, r3
   812f6:	7afb      	ldrb	r3, [r7, #11]
   812f8:	4313      	orrs	r3, r2
   812fa:	b2db      	uxtb	r3, r3
   812fc:	f043 0304 	orr.w	r3, r3, #4
   81300:	b2da      	uxtb	r2, r3
   81302:	68fb      	ldr	r3, [r7, #12]
   81304:	440b      	add	r3, r1
   81306:	721a      	strb	r2, [r3, #8]
            tx_packet->buffer[index++] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   81308:	8a7b      	ldrh	r3, [r7, #18]
   8130a:	1c5a      	adds	r2, r3, #1
   8130c:	827a      	strh	r2, [r7, #18]
   8130e:	4619      	mov	r1, r3
   81310:	f997 300a 	ldrsb.w	r3, [r7, #10]
   81314:	f023 030f 	bic.w	r3, r3, #15
   81318:	b25a      	sxtb	r2, r3
   8131a:	f997 300b 	ldrsb.w	r3, [r7, #11]
   8131e:	4313      	orrs	r3, r2
   81320:	b25b      	sxtb	r3, r3
   81322:	b2da      	uxtb	r2, r3
   81324:	68fb      	ldr	r3, [r7, #12]
   81326:	440b      	add	r3, r1
   81328:	721a      	strb	r2, [r3, #8]
            tx_packet->buffer[index++] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   8132a:	8a7b      	ldrh	r3, [r7, #18]
   8132c:	1c5a      	adds	r2, r3, #1
   8132e:	827a      	strh	r2, [r7, #18]
   81330:	4619      	mov	r1, r3
   81332:	7abb      	ldrb	r3, [r7, #10]
   81334:	011b      	lsls	r3, r3, #4
   81336:	b2da      	uxtb	r2, r3
   81338:	7afb      	ldrb	r3, [r7, #11]
   8133a:	4313      	orrs	r3, r2
   8133c:	b2db      	uxtb	r3, r3
   8133e:	f043 0304 	orr.w	r3, r3, #4
   81342:	b2da      	uxtb	r2, r3
   81344:	68fb      	ldr	r3, [r7, #12]
   81346:	440b      	add	r3, r1
   81348:	721a      	strb	r2, [r3, #8]
            tx_packet->buffer[index++] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   8134a:	8a7b      	ldrh	r3, [r7, #18]
   8134c:	1c5a      	adds	r2, r3, #1
   8134e:	827a      	strh	r2, [r7, #18]
   81350:	4619      	mov	r1, r3
   81352:	7abb      	ldrb	r3, [r7, #10]
   81354:	011b      	lsls	r3, r3, #4
   81356:	b25a      	sxtb	r2, r3
   81358:	f997 300b 	ldrsb.w	r3, [r7, #11]
   8135c:	4313      	orrs	r3, r2
   8135e:	b25b      	sxtb	r3, r3
   81360:	b2da      	uxtb	r2, r3
   81362:	68fb      	ldr	r3, [r7, #12]
   81364:	440b      	add	r3, r1
   81366:	721a      	strb	r2, [r3, #8]
        for(count = 0; count < strlen(str[line]); count++)
   81368:	7dbb      	ldrb	r3, [r7, #22]
   8136a:	3301      	adds	r3, #1
   8136c:	75bb      	strb	r3, [r7, #22]
   8136e:	7dbc      	ldrb	r4, [r7, #22]
   81370:	7d7b      	ldrb	r3, [r7, #21]
   81372:	009b      	lsls	r3, r3, #2
   81374:	687a      	ldr	r2, [r7, #4]
   81376:	4413      	add	r3, r2
   81378:	681b      	ldr	r3, [r3, #0]
   8137a:	4618      	mov	r0, r3
   8137c:	4b1b      	ldr	r3, [pc, #108]	; (813ec <lcd_print_m+0x238>)
   8137e:	4798      	blx	r3
   81380:	4603      	mov	r3, r0
   81382:	429c      	cmp	r4, r3
   81384:	d3a6      	bcc.n	812d4 <lcd_print_m+0x120>
    for(line = 0; line < 4; line++)
   81386:	7d7b      	ldrb	r3, [r7, #21]
   81388:	3301      	adds	r3, #1
   8138a:	757b      	strb	r3, [r7, #21]
   8138c:	7d7b      	ldrb	r3, [r7, #21]
   8138e:	2b03      	cmp	r3, #3
   81390:	f67f af41 	bls.w	81216 <lcd_print_m+0x62>
        }
    }
    tx_packet->length = index;
   81394:	8a7a      	ldrh	r2, [r7, #18]
   81396:	68fb      	ldr	r3, [r7, #12]
   81398:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

    lcdIsBusy = true;
   8139c:	4b0a      	ldr	r3, [pc, #40]	; (813c8 <lcd_print_m+0x214>)
   8139e:	2201      	movs	r2, #1
   813a0:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   813a2:	68f9      	ldr	r1, [r7, #12]
   813a4:	480d      	ldr	r0, [pc, #52]	; (813dc <lcd_print_m+0x228>)
   813a6:	4b12      	ldr	r3, [pc, #72]	; (813f0 <lcd_print_m+0x23c>)
   813a8:	4798      	blx	r3
    lcdStartTicks = getTicks();
   813aa:	4b05      	ldr	r3, [pc, #20]	; (813c0 <lcd_print_m+0x20c>)
   813ac:	4798      	blx	r3
   813ae:	4602      	mov	r2, r0
   813b0:	4b04      	ldr	r3, [pc, #16]	; (813c4 <lcd_print_m+0x210>)
   813b2:	601a      	str	r2, [r3, #0]
}
   813b4:	bf00      	nop
   813b6:	371c      	adds	r7, #28
   813b8:	46bd      	mov	sp, r7
   813ba:	bd90      	pop	{r4, r7, pc}
   813bc:	00080a2d 	.word	0x00080a2d
   813c0:	00081f71 	.word	0x00081f71
   813c4:	20070f8c 	.word	0x20070f8c
   813c8:	20070f89 	.word	0x20070f89
   813cc:	20070f90 	.word	0x20070f90
   813d0:	4008c100 	.word	0x4008c100
   813d4:	0008020b 	.word	0x0008020b
   813d8:	20070f94 	.word	0x20070f94
   813dc:	4008c000 	.word	0x4008c000
   813e0:	00080e01 	.word	0x00080e01
   813e4:	00080a19 	.word	0x00080a19
   813e8:	20070f88 	.word	0x20070f88
   813ec:	00083781 	.word	0x00083781
   813f0:	00080a41 	.word	0x00080a41

000813f4 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   813f4:	b580      	push	{r7, lr}
   813f6:	b084      	sub	sp, #16
   813f8:	af00      	add	r7, sp, #0
   813fa:	4603      	mov	r3, r0
   813fc:	460a      	mov	r2, r1
   813fe:	71fb      	strb	r3, [r7, #7]
   81400:	4613      	mov	r3, r2
   81402:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81404:	4b2d      	ldr	r3, [pc, #180]	; (814bc <send_nibble+0xc8>)
   81406:	4798      	blx	r3
   81408:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   8140a:	e019      	b.n	81440 <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   8140c:	4b2c      	ldr	r3, [pc, #176]	; (814c0 <send_nibble+0xcc>)
   8140e:	4798      	blx	r3
   81410:	4602      	mov	r2, r0
   81412:	4b2c      	ldr	r3, [pc, #176]	; (814c4 <send_nibble+0xd0>)
   81414:	681b      	ldr	r3, [r3, #0]
   81416:	1ad3      	subs	r3, r2, r3
   81418:	2b64      	cmp	r3, #100	; 0x64
   8141a:	d911      	bls.n	81440 <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   8141c:	4b2a      	ldr	r3, [pc, #168]	; (814c8 <send_nibble+0xd4>)
   8141e:	2200      	movs	r2, #0
   81420:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81422:	4b2a      	ldr	r3, [pc, #168]	; (814cc <send_nibble+0xd8>)
   81424:	681b      	ldr	r3, [r3, #0]
   81426:	3301      	adds	r3, #1
   81428:	4a28      	ldr	r2, [pc, #160]	; (814cc <send_nibble+0xd8>)
   8142a:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   8142c:	f240 2102 	movw	r1, #514	; 0x202
   81430:	4827      	ldr	r0, [pc, #156]	; (814d0 <send_nibble+0xdc>)
   81432:	4b28      	ldr	r3, [pc, #160]	; (814d4 <send_nibble+0xe0>)
   81434:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81436:	4928      	ldr	r1, [pc, #160]	; (814d8 <send_nibble+0xe4>)
   81438:	4828      	ldr	r0, [pc, #160]	; (814dc <send_nibble+0xe8>)
   8143a:	4b29      	ldr	r3, [pc, #164]	; (814e0 <send_nibble+0xec>)
   8143c:	4798      	blx	r3
            break;
   8143e:	e009      	b.n	81454 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   81440:	4b28      	ldr	r3, [pc, #160]	; (814e4 <send_nibble+0xf0>)
   81442:	4798      	blx	r3
   81444:	4603      	mov	r3, r0
   81446:	461a      	mov	r2, r3
   81448:	4b1f      	ldr	r3, [pc, #124]	; (814c8 <send_nibble+0xd4>)
   8144a:	781b      	ldrb	r3, [r3, #0]
   8144c:	4313      	orrs	r3, r2
   8144e:	b2db      	uxtb	r3, r3
   81450:	2b00      	cmp	r3, #0
   81452:	d1db      	bne.n	8140c <send_nibble+0x18>
        }
    }

    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81454:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81458:	f003 030f 	and.w	r3, r3, #15
   8145c:	b25a      	sxtb	r2, r3
   8145e:	4b22      	ldr	r3, [pc, #136]	; (814e8 <send_nibble+0xf4>)
   81460:	781b      	ldrb	r3, [r3, #0]
   81462:	b25b      	sxtb	r3, r3
   81464:	4313      	orrs	r3, r2
   81466:	b25b      	sxtb	r3, r3
   81468:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   8146a:	79bb      	ldrb	r3, [r7, #6]
   8146c:	011b      	lsls	r3, r3, #4
   8146e:	b2da      	uxtb	r2, r3
   81470:	79fb      	ldrb	r3, [r7, #7]
   81472:	4313      	orrs	r3, r2
   81474:	b2db      	uxtb	r3, r3
   81476:	f043 0304 	orr.w	r3, r3, #4
   8147a:	b2da      	uxtb	r2, r3
   8147c:	68fb      	ldr	r3, [r7, #12]
   8147e:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81480:	79bb      	ldrb	r3, [r7, #6]
   81482:	011b      	lsls	r3, r3, #4
   81484:	b25a      	sxtb	r2, r3
   81486:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8148a:	4313      	orrs	r3, r2
   8148c:	b25b      	sxtb	r3, r3
   8148e:	b2da      	uxtb	r2, r3
   81490:	68fb      	ldr	r3, [r7, #12]
   81492:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   81494:	68fb      	ldr	r3, [r7, #12]
   81496:	2202      	movs	r2, #2
   81498:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    
    lcdIsBusy = true;
   8149c:	4b0a      	ldr	r3, [pc, #40]	; (814c8 <send_nibble+0xd4>)
   8149e:	2201      	movs	r2, #1
   814a0:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   814a2:	68f9      	ldr	r1, [r7, #12]
   814a4:	480d      	ldr	r0, [pc, #52]	; (814dc <send_nibble+0xe8>)
   814a6:	4b11      	ldr	r3, [pc, #68]	; (814ec <send_nibble+0xf8>)
   814a8:	4798      	blx	r3
    lcdStartTicks = getTicks();
   814aa:	4b05      	ldr	r3, [pc, #20]	; (814c0 <send_nibble+0xcc>)
   814ac:	4798      	blx	r3
   814ae:	4602      	mov	r2, r0
   814b0:	4b04      	ldr	r3, [pc, #16]	; (814c4 <send_nibble+0xd0>)
   814b2:	601a      	str	r2, [r3, #0]
}
   814b4:	bf00      	nop
   814b6:	3710      	adds	r7, #16
   814b8:	46bd      	mov	sp, r7
   814ba:	bd80      	pop	{r7, pc}
   814bc:	00080a2d 	.word	0x00080a2d
   814c0:	00081f71 	.word	0x00081f71
   814c4:	20070f8c 	.word	0x20070f8c
   814c8:	20070f89 	.word	0x20070f89
   814cc:	20070f90 	.word	0x20070f90
   814d0:	4008c100 	.word	0x4008c100
   814d4:	0008020b 	.word	0x0008020b
   814d8:	20070f94 	.word	0x20070f94
   814dc:	4008c000 	.word	0x4008c000
   814e0:	00080e01 	.word	0x00080e01
   814e4:	00080a19 	.word	0x00080a19
   814e8:	20070f88 	.word	0x20070f88
   814ec:	00080a41 	.word	0x00080a41

000814f0 <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   814f0:	b580      	push	{r7, lr}
   814f2:	b084      	sub	sp, #16
   814f4:	af00      	add	r7, sp, #0
   814f6:	4603      	mov	r3, r0
   814f8:	460a      	mov	r2, r1
   814fa:	71fb      	strb	r3, [r7, #7]
   814fc:	4613      	mov	r3, r2
   814fe:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81500:	4b39      	ldr	r3, [pc, #228]	; (815e8 <send_byte+0xf8>)
   81502:	4798      	blx	r3
   81504:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   81506:	e019      	b.n	8153c <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81508:	4b38      	ldr	r3, [pc, #224]	; (815ec <send_byte+0xfc>)
   8150a:	4798      	blx	r3
   8150c:	4602      	mov	r2, r0
   8150e:	4b38      	ldr	r3, [pc, #224]	; (815f0 <send_byte+0x100>)
   81510:	681b      	ldr	r3, [r3, #0]
   81512:	1ad3      	subs	r3, r2, r3
   81514:	2b64      	cmp	r3, #100	; 0x64
   81516:	d911      	bls.n	8153c <send_byte+0x4c>
        {
            lcdIsBusy = false;
   81518:	4b36      	ldr	r3, [pc, #216]	; (815f4 <send_byte+0x104>)
   8151a:	2200      	movs	r2, #0
   8151c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   8151e:	4b36      	ldr	r3, [pc, #216]	; (815f8 <send_byte+0x108>)
   81520:	681b      	ldr	r3, [r3, #0]
   81522:	3301      	adds	r3, #1
   81524:	4a34      	ldr	r2, [pc, #208]	; (815f8 <send_byte+0x108>)
   81526:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81528:	f240 2102 	movw	r1, #514	; 0x202
   8152c:	4833      	ldr	r0, [pc, #204]	; (815fc <send_byte+0x10c>)
   8152e:	4b34      	ldr	r3, [pc, #208]	; (81600 <send_byte+0x110>)
   81530:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81532:	4934      	ldr	r1, [pc, #208]	; (81604 <send_byte+0x114>)
   81534:	4834      	ldr	r0, [pc, #208]	; (81608 <send_byte+0x118>)
   81536:	4b35      	ldr	r3, [pc, #212]	; (8160c <send_byte+0x11c>)
   81538:	4798      	blx	r3
            break;
   8153a:	e009      	b.n	81550 <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   8153c:	4b34      	ldr	r3, [pc, #208]	; (81610 <send_byte+0x120>)
   8153e:	4798      	blx	r3
   81540:	4603      	mov	r3, r0
   81542:	461a      	mov	r2, r3
   81544:	4b2b      	ldr	r3, [pc, #172]	; (815f4 <send_byte+0x104>)
   81546:	781b      	ldrb	r3, [r3, #0]
   81548:	4313      	orrs	r3, r2
   8154a:	b2db      	uxtb	r3, r3
   8154c:	2b00      	cmp	r3, #0
   8154e:	d1db      	bne.n	81508 <send_byte+0x18>
        }
    }

    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81550:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81554:	f003 030f 	and.w	r3, r3, #15
   81558:	b25a      	sxtb	r2, r3
   8155a:	4b2e      	ldr	r3, [pc, #184]	; (81614 <send_byte+0x124>)
   8155c:	781b      	ldrb	r3, [r3, #0]
   8155e:	b25b      	sxtb	r3, r3
   81560:	4313      	orrs	r3, r2
   81562:	b25b      	sxtb	r3, r3
   81564:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   81566:	79bb      	ldrb	r3, [r7, #6]
   81568:	f023 030f 	bic.w	r3, r3, #15
   8156c:	b2da      	uxtb	r2, r3
   8156e:	79fb      	ldrb	r3, [r7, #7]
   81570:	4313      	orrs	r3, r2
   81572:	b2db      	uxtb	r3, r3
   81574:	f043 0304 	orr.w	r3, r3, #4
   81578:	b2da      	uxtb	r2, r3
   8157a:	68fb      	ldr	r3, [r7, #12]
   8157c:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   8157e:	f997 3006 	ldrsb.w	r3, [r7, #6]
   81582:	f023 030f 	bic.w	r3, r3, #15
   81586:	b25a      	sxtb	r2, r3
   81588:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8158c:	4313      	orrs	r3, r2
   8158e:	b25b      	sxtb	r3, r3
   81590:	b2da      	uxtb	r2, r3
   81592:	68fb      	ldr	r3, [r7, #12]
   81594:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81596:	79bb      	ldrb	r3, [r7, #6]
   81598:	011b      	lsls	r3, r3, #4
   8159a:	b2da      	uxtb	r2, r3
   8159c:	79fb      	ldrb	r3, [r7, #7]
   8159e:	4313      	orrs	r3, r2
   815a0:	b2db      	uxtb	r3, r3
   815a2:	f043 0304 	orr.w	r3, r3, #4
   815a6:	b2da      	uxtb	r2, r3
   815a8:	68fb      	ldr	r3, [r7, #12]
   815aa:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   815ac:	79bb      	ldrb	r3, [r7, #6]
   815ae:	011b      	lsls	r3, r3, #4
   815b0:	b25a      	sxtb	r2, r3
   815b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   815b6:	4313      	orrs	r3, r2
   815b8:	b25b      	sxtb	r3, r3
   815ba:	b2da      	uxtb	r2, r3
   815bc:	68fb      	ldr	r3, [r7, #12]
   815be:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   815c0:	68fb      	ldr	r3, [r7, #12]
   815c2:	2204      	movs	r2, #4
   815c4:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    
    lcdIsBusy = true;
   815c8:	4b0a      	ldr	r3, [pc, #40]	; (815f4 <send_byte+0x104>)
   815ca:	2201      	movs	r2, #1
   815cc:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   815ce:	68f9      	ldr	r1, [r7, #12]
   815d0:	480d      	ldr	r0, [pc, #52]	; (81608 <send_byte+0x118>)
   815d2:	4b11      	ldr	r3, [pc, #68]	; (81618 <send_byte+0x128>)
   815d4:	4798      	blx	r3
    lcdStartTicks = getTicks();
   815d6:	4b05      	ldr	r3, [pc, #20]	; (815ec <send_byte+0xfc>)
   815d8:	4798      	blx	r3
   815da:	4602      	mov	r2, r0
   815dc:	4b04      	ldr	r3, [pc, #16]	; (815f0 <send_byte+0x100>)
   815de:	601a      	str	r2, [r3, #0]
}
   815e0:	bf00      	nop
   815e2:	3710      	adds	r7, #16
   815e4:	46bd      	mov	sp, r7
   815e6:	bd80      	pop	{r7, pc}
   815e8:	00080a2d 	.word	0x00080a2d
   815ec:	00081f71 	.word	0x00081f71
   815f0:	20070f8c 	.word	0x20070f8c
   815f4:	20070f89 	.word	0x20070f89
   815f8:	20070f90 	.word	0x20070f90
   815fc:	4008c100 	.word	0x4008c100
   81600:	0008020b 	.word	0x0008020b
   81604:	20070f94 	.word	0x20070f94
   81608:	4008c000 	.word	0x4008c000
   8160c:	00080e01 	.word	0x00080e01
   81610:	00080a19 	.word	0x00080a19
   81614:	20070f88 	.word	0x20070f88
   81618:	00080a41 	.word	0x00080a41

0008161c <lcd_callback>:

static void lcd_callback(void)
{
   8161c:	b480      	push	{r7}
   8161e:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   81620:	4b03      	ldr	r3, [pc, #12]	; (81630 <lcd_callback+0x14>)
   81622:	2200      	movs	r2, #0
   81624:	701a      	strb	r2, [r3, #0]
}
   81626:	bf00      	nop
   81628:	46bd      	mov	sp, r7
   8162a:	bc80      	pop	{r7}
   8162c:	4770      	bx	lr
   8162e:	bf00      	nop
   81630:	20070f89 	.word	0x20070f89

00081634 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   81634:	b480      	push	{r7}
   81636:	b089      	sub	sp, #36	; 0x24
   81638:	af00      	add	r7, sp, #0
   8163a:	6078      	str	r0, [r7, #4]
   8163c:	687b      	ldr	r3, [r7, #4]
   8163e:	61fb      	str	r3, [r7, #28]
   81640:	69fb      	ldr	r3, [r7, #28]
   81642:	61bb      	str	r3, [r7, #24]
   81644:	69bb      	ldr	r3, [r7, #24]
   81646:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81648:	697b      	ldr	r3, [r7, #20]
   8164a:	095b      	lsrs	r3, r3, #5
   8164c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8164e:	693b      	ldr	r3, [r7, #16]
   81650:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81654:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81658:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8165a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   8165c:	69fb      	ldr	r3, [r7, #28]
   8165e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81660:	68fb      	ldr	r3, [r7, #12]
   81662:	f003 031f 	and.w	r3, r3, #31
   81666:	2101      	movs	r1, #1
   81668:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8166c:	4013      	ands	r3, r2
   8166e:	2b00      	cmp	r3, #0
   81670:	bf14      	ite	ne
   81672:	2301      	movne	r3, #1
   81674:	2300      	moveq	r3, #0
   81676:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   81678:	4618      	mov	r0, r3
   8167a:	3724      	adds	r7, #36	; 0x24
   8167c:	46bd      	mov	sp, r7
   8167e:	bc80      	pop	{r7}
   81680:	4770      	bx	lr
	...

00081684 <menu>:

uint32_t cnt = 0;


void menu(event_t event1)
{
   81684:	b580      	push	{r7, lr}
   81686:	b082      	sub	sp, #8
   81688:	af00      	add	r7, sp, #0
   8168a:	4603      	mov	r3, r0
   8168c:	71fb      	strb	r3, [r7, #7]
    switch (event1)
   8168e:	79fb      	ldrb	r3, [r7, #7]
   81690:	2b01      	cmp	r3, #1
   81692:	d002      	beq.n	8169a <menu+0x16>
   81694:	2b0d      	cmp	r3, #13
   81696:	d026      	beq.n	816e6 <menu+0x62>
                    print_cursor();
                }
            }
            break;
        default:
            break;
   81698:	e04e      	b.n	81738 <menu+0xb4>
            if (act_cursor_line > min_cursor_line)
   8169a:	4b31      	ldr	r3, [pc, #196]	; (81760 <menu+0xdc>)
   8169c:	781a      	ldrb	r2, [r3, #0]
   8169e:	4b31      	ldr	r3, [pc, #196]	; (81764 <menu+0xe0>)
   816a0:	781b      	ldrb	r3, [r3, #0]
   816a2:	429a      	cmp	r2, r3
   816a4:	d945      	bls.n	81732 <menu+0xae>
                act_cursor_line--;
   816a6:	4b2e      	ldr	r3, [pc, #184]	; (81760 <menu+0xdc>)
   816a8:	781b      	ldrb	r3, [r3, #0]
   816aa:	3b01      	subs	r3, #1
   816ac:	b2da      	uxtb	r2, r3
   816ae:	4b2c      	ldr	r3, [pc, #176]	; (81760 <menu+0xdc>)
   816b0:	701a      	strb	r2, [r3, #0]
                if (act_cursor_line_on_lcd == 1)
   816b2:	4b2d      	ldr	r3, [pc, #180]	; (81768 <menu+0xe4>)
   816b4:	781b      	ldrb	r3, [r3, #0]
   816b6:	2b01      	cmp	r3, #1
   816b8:	d10c      	bne.n	816d4 <menu+0x50>
                    if (act_menu == MENU_MAIN)
   816ba:	4b2c      	ldr	r3, [pc, #176]	; (8176c <menu+0xe8>)
   816bc:	781b      	ldrb	r3, [r3, #0]
   816be:	2b00      	cmp	r3, #0
   816c0:	d137      	bne.n	81732 <menu+0xae>
                        menu_main_scroll--;
   816c2:	4b2b      	ldr	r3, [pc, #172]	; (81770 <menu+0xec>)
   816c4:	781b      	ldrb	r3, [r3, #0]
   816c6:	3b01      	subs	r3, #1
   816c8:	b2da      	uxtb	r2, r3
   816ca:	4b29      	ldr	r3, [pc, #164]	; (81770 <menu+0xec>)
   816cc:	701a      	strb	r2, [r3, #0]
                        print_menu_main();
   816ce:	4b29      	ldr	r3, [pc, #164]	; (81774 <menu+0xf0>)
   816d0:	4798      	blx	r3
            break;
   816d2:	e02e      	b.n	81732 <menu+0xae>
                    act_cursor_line_on_lcd--;
   816d4:	4b24      	ldr	r3, [pc, #144]	; (81768 <menu+0xe4>)
   816d6:	781b      	ldrb	r3, [r3, #0]
   816d8:	3b01      	subs	r3, #1
   816da:	b2da      	uxtb	r2, r3
   816dc:	4b22      	ldr	r3, [pc, #136]	; (81768 <menu+0xe4>)
   816de:	701a      	strb	r2, [r3, #0]
                    print_cursor();
   816e0:	4b25      	ldr	r3, [pc, #148]	; (81778 <menu+0xf4>)
   816e2:	4798      	blx	r3
            break;
   816e4:	e025      	b.n	81732 <menu+0xae>
            if (act_cursor_line < max_cursor_line)
   816e6:	4b1e      	ldr	r3, [pc, #120]	; (81760 <menu+0xdc>)
   816e8:	781a      	ldrb	r2, [r3, #0]
   816ea:	4b24      	ldr	r3, [pc, #144]	; (8177c <menu+0xf8>)
   816ec:	781b      	ldrb	r3, [r3, #0]
   816ee:	429a      	cmp	r2, r3
   816f0:	d221      	bcs.n	81736 <menu+0xb2>
                act_cursor_line++;
   816f2:	4b1b      	ldr	r3, [pc, #108]	; (81760 <menu+0xdc>)
   816f4:	781b      	ldrb	r3, [r3, #0]
   816f6:	3301      	adds	r3, #1
   816f8:	b2da      	uxtb	r2, r3
   816fa:	4b19      	ldr	r3, [pc, #100]	; (81760 <menu+0xdc>)
   816fc:	701a      	strb	r2, [r3, #0]
                if (act_cursor_line_on_lcd == 4)
   816fe:	4b1a      	ldr	r3, [pc, #104]	; (81768 <menu+0xe4>)
   81700:	781b      	ldrb	r3, [r3, #0]
   81702:	2b04      	cmp	r3, #4
   81704:	d10c      	bne.n	81720 <menu+0x9c>
                    if (act_menu == MENU_MAIN)
   81706:	4b19      	ldr	r3, [pc, #100]	; (8176c <menu+0xe8>)
   81708:	781b      	ldrb	r3, [r3, #0]
   8170a:	2b00      	cmp	r3, #0
   8170c:	d113      	bne.n	81736 <menu+0xb2>
                        menu_main_scroll++;
   8170e:	4b18      	ldr	r3, [pc, #96]	; (81770 <menu+0xec>)
   81710:	781b      	ldrb	r3, [r3, #0]
   81712:	3301      	adds	r3, #1
   81714:	b2da      	uxtb	r2, r3
   81716:	4b16      	ldr	r3, [pc, #88]	; (81770 <menu+0xec>)
   81718:	701a      	strb	r2, [r3, #0]
                        print_menu_main();
   8171a:	4b16      	ldr	r3, [pc, #88]	; (81774 <menu+0xf0>)
   8171c:	4798      	blx	r3
            break;
   8171e:	e00a      	b.n	81736 <menu+0xb2>
                    act_cursor_line_on_lcd++;
   81720:	4b11      	ldr	r3, [pc, #68]	; (81768 <menu+0xe4>)
   81722:	781b      	ldrb	r3, [r3, #0]
   81724:	3301      	adds	r3, #1
   81726:	b2da      	uxtb	r2, r3
   81728:	4b0f      	ldr	r3, [pc, #60]	; (81768 <menu+0xe4>)
   8172a:	701a      	strb	r2, [r3, #0]
                    print_cursor();
   8172c:	4b12      	ldr	r3, [pc, #72]	; (81778 <menu+0xf4>)
   8172e:	4798      	blx	r3
            break;
   81730:	e001      	b.n	81736 <menu+0xb2>
            break;
   81732:	bf00      	nop
   81734:	e000      	b.n	81738 <menu+0xb4>
            break;
   81736:	bf00      	nop
    }
	
    switch (act_menu)
   81738:	4b0c      	ldr	r3, [pc, #48]	; (8176c <menu+0xe8>)
   8173a:	781b      	ldrb	r3, [r3, #0]
   8173c:	2b00      	cmp	r3, #0
   8173e:	d002      	beq.n	81746 <menu+0xc2>
   81740:	2b01      	cmp	r3, #1
   81742:	d005      	beq.n	81750 <menu+0xcc>
            break;
        case MENU_SENS_VALUES:
            menu_sens_values();
            break;
        default:
            break;
   81744:	e007      	b.n	81756 <menu+0xd2>
            menu_main(event1);
   81746:	79fb      	ldrb	r3, [r7, #7]
   81748:	4618      	mov	r0, r3
   8174a:	4b0d      	ldr	r3, [pc, #52]	; (81780 <menu+0xfc>)
   8174c:	4798      	blx	r3
            break;
   8174e:	e002      	b.n	81756 <menu+0xd2>
            menu_sens_values();
   81750:	4b0c      	ldr	r3, [pc, #48]	; (81784 <menu+0x100>)
   81752:	4798      	blx	r3
            break;
   81754:	bf00      	nop
    }
}
   81756:	bf00      	nop
   81758:	3708      	adds	r7, #8
   8175a:	46bd      	mov	sp, r7
   8175c:	bd80      	pop	{r7, pc}
   8175e:	bf00      	nop
   81760:	20070191 	.word	0x20070191
   81764:	20070193 	.word	0x20070193
   81768:	2007018f 	.word	0x2007018f
   8176c:	20070fa0 	.word	0x20070fa0
   81770:	20070fa1 	.word	0x20070fa1
   81774:	0008197d 	.word	0x0008197d
   81778:	00081ae5 	.word	0x00081ae5
   8177c:	20070194 	.word	0x20070194
   81780:	00081789 	.word	0x00081789
   81784:	00081971 	.word	0x00081971

00081788 <menu_main>:

void menu_main(event_t event1)
{
   81788:	b580      	push	{r7, lr}
   8178a:	b082      	sub	sp, #8
   8178c:	af00      	add	r7, sp, #0
   8178e:	4603      	mov	r3, r0
   81790:	71fb      	strb	r3, [r7, #7]
    switch (event1)
   81792:	79fb      	ldrb	r3, [r7, #7]
   81794:	2b07      	cmp	r3, #7
   81796:	d005      	beq.n	817a4 <menu_main+0x1c>
   81798:	2b0a      	cmp	r3, #10
   8179a:	f000 8095 	beq.w	818c8 <menu_main+0x140>
   8179e:	2b04      	cmp	r3, #4
   817a0:	d053      	beq.n	8184a <menu_main+0xc2>
                default:
                    break;
            }
            break;
        default:
            break;
   817a2:	e0cc      	b.n	8193e <menu_main+0x1b6>
            switch (menu_main_column)
   817a4:	4b6c      	ldr	r3, [pc, #432]	; (81958 <menu_main+0x1d0>)
   817a6:	781b      	ldrb	r3, [r3, #0]
   817a8:	2b01      	cmp	r3, #1
   817aa:	d01d      	beq.n	817e8 <menu_main+0x60>
   817ac:	2b02      	cmp	r3, #2
   817ae:	d033      	beq.n	81818 <menu_main+0x90>
   817b0:	2b00      	cmp	r3, #0
   817b2:	d000      	beq.n	817b6 <menu_main+0x2e>
            break;
   817b4:	e0c3      	b.n	8193e <menu_main+0x1b6>
                    switch (act_cursor_line)
   817b6:	4b69      	ldr	r3, [pc, #420]	; (8195c <menu_main+0x1d4>)
   817b8:	781b      	ldrb	r3, [r3, #0]
   817ba:	3b02      	subs	r3, #2
   817bc:	2b06      	cmp	r3, #6
   817be:	d811      	bhi.n	817e4 <menu_main+0x5c>
   817c0:	a201      	add	r2, pc, #4	; (adr r2, 817c8 <menu_main+0x40>)
   817c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   817c6:	bf00      	nop
   817c8:	000817e5 	.word	0x000817e5
   817cc:	000817e5 	.word	0x000817e5
   817d0:	000817e5 	.word	0x000817e5
   817d4:	000817e5 	.word	0x000817e5
   817d8:	000817e5 	.word	0x000817e5
   817dc:	000817e5 	.word	0x000817e5
   817e0:	000817e5 	.word	0x000817e5
                            break;
   817e4:	bf00      	nop
                    break;
   817e6:	e02f      	b.n	81848 <menu_main+0xc0>
                    switch (act_cursor_line)
   817e8:	4b5c      	ldr	r3, [pc, #368]	; (8195c <menu_main+0x1d4>)
   817ea:	781b      	ldrb	r3, [r3, #0]
   817ec:	3b02      	subs	r3, #2
   817ee:	2b06      	cmp	r3, #6
   817f0:	d810      	bhi.n	81814 <menu_main+0x8c>
   817f2:	a201      	add	r2, pc, #4	; (adr r2, 817f8 <menu_main+0x70>)
   817f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   817f8:	00081815 	.word	0x00081815
   817fc:	00081815 	.word	0x00081815
   81800:	00081815 	.word	0x00081815
   81804:	00081815 	.word	0x00081815
   81808:	00081815 	.word	0x00081815
   8180c:	00081815 	.word	0x00081815
   81810:	00081815 	.word	0x00081815
                            break;
   81814:	bf00      	nop
                    break;
   81816:	e017      	b.n	81848 <menu_main+0xc0>
                    switch (act_cursor_line)
   81818:	4b50      	ldr	r3, [pc, #320]	; (8195c <menu_main+0x1d4>)
   8181a:	781b      	ldrb	r3, [r3, #0]
   8181c:	3b02      	subs	r3, #2
   8181e:	2b06      	cmp	r3, #6
   81820:	d810      	bhi.n	81844 <menu_main+0xbc>
   81822:	a201      	add	r2, pc, #4	; (adr r2, 81828 <menu_main+0xa0>)
   81824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81828:	00081845 	.word	0x00081845
   8182c:	00081845 	.word	0x00081845
   81830:	00081845 	.word	0x00081845
   81834:	00081845 	.word	0x00081845
   81838:	00081845 	.word	0x00081845
   8183c:	00081845 	.word	0x00081845
   81840:	00081845 	.word	0x00081845
                            break;
   81844:	bf00      	nop
                    break;
   81846:	bf00      	nop
            break;
   81848:	e079      	b.n	8193e <menu_main+0x1b6>
            if (act_cursor_line == 1)
   8184a:	4b44      	ldr	r3, [pc, #272]	; (8195c <menu_main+0x1d4>)
   8184c:	781b      	ldrb	r3, [r3, #0]
   8184e:	2b01      	cmp	r3, #1
   81850:	d10c      	bne.n	8186c <menu_main+0xe4>
                if (menu_main_column >= 1)
   81852:	4b41      	ldr	r3, [pc, #260]	; (81958 <menu_main+0x1d0>)
   81854:	781b      	ldrb	r3, [r3, #0]
   81856:	2b00      	cmp	r3, #0
   81858:	d008      	beq.n	8186c <menu_main+0xe4>
                    menu_main_column--;
   8185a:	4b3f      	ldr	r3, [pc, #252]	; (81958 <menu_main+0x1d0>)
   8185c:	781b      	ldrb	r3, [r3, #0]
   8185e:	3b01      	subs	r3, #1
   81860:	b2da      	uxtb	r2, r3
   81862:	4b3d      	ldr	r3, [pc, #244]	; (81958 <menu_main+0x1d0>)
   81864:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81866:	4b3e      	ldr	r3, [pc, #248]	; (81960 <menu_main+0x1d8>)
   81868:	2201      	movs	r2, #1
   8186a:	701a      	strb	r2, [r3, #0]
            switch (menu_main_column)
   8186c:	4b3a      	ldr	r3, [pc, #232]	; (81958 <menu_main+0x1d0>)
   8186e:	781b      	ldrb	r3, [r3, #0]
   81870:	2b00      	cmp	r3, #0
   81872:	d000      	beq.n	81876 <menu_main+0xee>
                    break;
   81874:	e027      	b.n	818c6 <menu_main+0x13e>
                    switch (act_cursor_line)
   81876:	4b39      	ldr	r3, [pc, #228]	; (8195c <menu_main+0x1d4>)
   81878:	781b      	ldrb	r3, [r3, #0]
   8187a:	2b03      	cmp	r3, #3
   8187c:	d00f      	beq.n	8189e <menu_main+0x116>
   8187e:	2b04      	cmp	r3, #4
   81880:	d01b      	beq.n	818ba <menu_main+0x132>
   81882:	2b02      	cmp	r3, #2
   81884:	d000      	beq.n	81888 <menu_main+0x100>
                            break;
   81886:	e01d      	b.n	818c4 <menu_main+0x13c>
                            if (rbt_id == 2)
   81888:	4b36      	ldr	r3, [pc, #216]	; (81964 <menu_main+0x1dc>)
   8188a:	781b      	ldrb	r3, [r3, #0]
   8188c:	2b02      	cmp	r3, #2
   8188e:	d116      	bne.n	818be <menu_main+0x136>
                                rbt_id = 1;
   81890:	4b34      	ldr	r3, [pc, #208]	; (81964 <menu_main+0x1dc>)
   81892:	2201      	movs	r2, #1
   81894:	701a      	strb	r2, [r3, #0]
                                print_menu = 1;
   81896:	4b32      	ldr	r3, [pc, #200]	; (81960 <menu_main+0x1d8>)
   81898:	2201      	movs	r2, #1
   8189a:	701a      	strb	r2, [r3, #0]
                    	    break;
   8189c:	e00f      	b.n	818be <menu_main+0x136>
                            if (speed_preset > 0)
   8189e:	4b32      	ldr	r3, [pc, #200]	; (81968 <menu_main+0x1e0>)
   818a0:	781b      	ldrb	r3, [r3, #0]
   818a2:	2b00      	cmp	r3, #0
   818a4:	d00d      	beq.n	818c2 <menu_main+0x13a>
                                speed_preset -= 1;
   818a6:	4b30      	ldr	r3, [pc, #192]	; (81968 <menu_main+0x1e0>)
   818a8:	781b      	ldrb	r3, [r3, #0]
   818aa:	3b01      	subs	r3, #1
   818ac:	b2da      	uxtb	r2, r3
   818ae:	4b2e      	ldr	r3, [pc, #184]	; (81968 <menu_main+0x1e0>)
   818b0:	701a      	strb	r2, [r3, #0]
                                print_menu = 1;
   818b2:	4b2b      	ldr	r3, [pc, #172]	; (81960 <menu_main+0x1d8>)
   818b4:	2201      	movs	r2, #1
   818b6:	701a      	strb	r2, [r3, #0]
                            break;
   818b8:	e003      	b.n	818c2 <menu_main+0x13a>
                            break;
   818ba:	bf00      	nop
   818bc:	e002      	b.n	818c4 <menu_main+0x13c>
                    	    break;
   818be:	bf00      	nop
   818c0:	e000      	b.n	818c4 <menu_main+0x13c>
                            break;
   818c2:	bf00      	nop
            	    break;
   818c4:	bf00      	nop
            break;
   818c6:	e03a      	b.n	8193e <menu_main+0x1b6>
            if (act_cursor_line == 1)
   818c8:	4b24      	ldr	r3, [pc, #144]	; (8195c <menu_main+0x1d4>)
   818ca:	781b      	ldrb	r3, [r3, #0]
   818cc:	2b01      	cmp	r3, #1
   818ce:	d10c      	bne.n	818ea <menu_main+0x162>
                if (menu_main_column <= 1)
   818d0:	4b21      	ldr	r3, [pc, #132]	; (81958 <menu_main+0x1d0>)
   818d2:	781b      	ldrb	r3, [r3, #0]
   818d4:	2b01      	cmp	r3, #1
   818d6:	d808      	bhi.n	818ea <menu_main+0x162>
                    menu_main_column++;
   818d8:	4b1f      	ldr	r3, [pc, #124]	; (81958 <menu_main+0x1d0>)
   818da:	781b      	ldrb	r3, [r3, #0]
   818dc:	3301      	adds	r3, #1
   818de:	b2da      	uxtb	r2, r3
   818e0:	4b1d      	ldr	r3, [pc, #116]	; (81958 <menu_main+0x1d0>)
   818e2:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   818e4:	4b1e      	ldr	r3, [pc, #120]	; (81960 <menu_main+0x1d8>)
   818e6:	2201      	movs	r2, #1
   818e8:	701a      	strb	r2, [r3, #0]
            switch (menu_main_column)
   818ea:	4b1b      	ldr	r3, [pc, #108]	; (81958 <menu_main+0x1d0>)
   818ec:	781b      	ldrb	r3, [r3, #0]
   818ee:	2b00      	cmp	r3, #0
   818f0:	d000      	beq.n	818f4 <menu_main+0x16c>
                    break;
   818f2:	e023      	b.n	8193c <menu_main+0x1b4>
                    switch (act_cursor_line)
   818f4:	4b19      	ldr	r3, [pc, #100]	; (8195c <menu_main+0x1d4>)
   818f6:	781b      	ldrb	r3, [r3, #0]
   818f8:	2b02      	cmp	r3, #2
   818fa:	d002      	beq.n	81902 <menu_main+0x17a>
   818fc:	2b03      	cmp	r3, #3
   818fe:	d00b      	beq.n	81918 <menu_main+0x190>
                            break;
   81900:	e01b      	b.n	8193a <menu_main+0x1b2>
                            if (rbt_id == 1)
   81902:	4b18      	ldr	r3, [pc, #96]	; (81964 <menu_main+0x1dc>)
   81904:	781b      	ldrb	r3, [r3, #0]
   81906:	2b01      	cmp	r3, #1
   81908:	d114      	bne.n	81934 <menu_main+0x1ac>
                                rbt_id = 2;
   8190a:	4b16      	ldr	r3, [pc, #88]	; (81964 <menu_main+0x1dc>)
   8190c:	2202      	movs	r2, #2
   8190e:	701a      	strb	r2, [r3, #0]
                                print_menu = 1;
   81910:	4b13      	ldr	r3, [pc, #76]	; (81960 <menu_main+0x1d8>)
   81912:	2201      	movs	r2, #1
   81914:	701a      	strb	r2, [r3, #0]
                            break;
   81916:	e00d      	b.n	81934 <menu_main+0x1ac>
                            if (speed_preset < 20)
   81918:	4b13      	ldr	r3, [pc, #76]	; (81968 <menu_main+0x1e0>)
   8191a:	781b      	ldrb	r3, [r3, #0]
   8191c:	2b13      	cmp	r3, #19
   8191e:	d80b      	bhi.n	81938 <menu_main+0x1b0>
                                speed_preset += 1;
   81920:	4b11      	ldr	r3, [pc, #68]	; (81968 <menu_main+0x1e0>)
   81922:	781b      	ldrb	r3, [r3, #0]
   81924:	3301      	adds	r3, #1
   81926:	b2da      	uxtb	r2, r3
   81928:	4b0f      	ldr	r3, [pc, #60]	; (81968 <menu_main+0x1e0>)
   8192a:	701a      	strb	r2, [r3, #0]
                                print_menu = 1;
   8192c:	4b0c      	ldr	r3, [pc, #48]	; (81960 <menu_main+0x1d8>)
   8192e:	2201      	movs	r2, #1
   81930:	701a      	strb	r2, [r3, #0]
                            break;
   81932:	e001      	b.n	81938 <menu_main+0x1b0>
                            break;
   81934:	bf00      	nop
   81936:	e000      	b.n	8193a <menu_main+0x1b2>
                            break;
   81938:	bf00      	nop
                    break;
   8193a:	bf00      	nop
            break;
   8193c:	bf00      	nop
    }
	
    if (print_menu)
   8193e:	4b08      	ldr	r3, [pc, #32]	; (81960 <menu_main+0x1d8>)
   81940:	781b      	ldrb	r3, [r3, #0]
   81942:	2b00      	cmp	r3, #0
   81944:	d004      	beq.n	81950 <menu_main+0x1c8>
    {
        print_menu = 0;
   81946:	4b06      	ldr	r3, [pc, #24]	; (81960 <menu_main+0x1d8>)
   81948:	2200      	movs	r2, #0
   8194a:	701a      	strb	r2, [r3, #0]
        print_menu_main();
   8194c:	4b07      	ldr	r3, [pc, #28]	; (8196c <menu_main+0x1e4>)
   8194e:	4798      	blx	r3
    }
}
   81950:	bf00      	nop
   81952:	3708      	adds	r7, #8
   81954:	46bd      	mov	sp, r7
   81956:	bd80      	pop	{r7, pc}
   81958:	20070195 	.word	0x20070195
   8195c:	20070191 	.word	0x20070191
   81960:	2007018c 	.word	0x2007018c
   81964:	2007018d 	.word	0x2007018d
   81968:	2007018e 	.word	0x2007018e
   8196c:	0008197d 	.word	0x0008197d

00081970 <menu_sens_values>:

void menu_sens_values(void)
{
   81970:	b480      	push	{r7}
   81972:	af00      	add	r7, sp, #0
    
}
   81974:	bf00      	nop
   81976:	46bd      	mov	sp, r7
   81978:	bc80      	pop	{r7}
   8197a:	4770      	bx	lr

0008197c <print_menu_main>:

void print_menu_main(void)
{
   8197c:	b580      	push	{r7, lr}
   8197e:	b09c      	sub	sp, #112	; 0x70
   81980:	af00      	add	r7, sp, #0
    const char *menu_text[3][8] =
   81982:	4a49      	ldr	r2, [pc, #292]	; (81aa8 <print_menu_main+0x12c>)
   81984:	f107 0310 	add.w	r3, r7, #16
   81988:	4611      	mov	r1, r2
   8198a:	2260      	movs	r2, #96	; 0x60
   8198c:	4618      	mov	r0, r3
   8198e:	4b47      	ldr	r3, [pc, #284]	; (81aac <print_menu_main+0x130>)
   81990:	4798      	blx	r3
        {"     Match  ", " Start match", " Sensor values", " Drive angle pid", "", "", "", ""},
        {"     Tests", " Turn to start", " Move to middle", " Move to ball", " RPI", " Stop on line", " Encoder test", ""}
    };
    char *menu_display[4];

    lcd_clear();
   81992:	4b47      	ldr	r3, [pc, #284]	; (81ab0 <print_menu_main+0x134>)
   81994:	4798      	blx	r3

    menu_display[0] = (char *)menu_text[menu_main_column][menu_main_scroll + 0];
   81996:	4b47      	ldr	r3, [pc, #284]	; (81ab4 <print_menu_main+0x138>)
   81998:	781b      	ldrb	r3, [r3, #0]
   8199a:	4619      	mov	r1, r3
   8199c:	4b46      	ldr	r3, [pc, #280]	; (81ab8 <print_menu_main+0x13c>)
   8199e:	781b      	ldrb	r3, [r3, #0]
   819a0:	461a      	mov	r2, r3
   819a2:	00cb      	lsls	r3, r1, #3
   819a4:	4413      	add	r3, r2
   819a6:	009b      	lsls	r3, r3, #2
   819a8:	f107 0270 	add.w	r2, r7, #112	; 0x70
   819ac:	4413      	add	r3, r2
   819ae:	f853 3c60 	ldr.w	r3, [r3, #-96]
   819b2:	603b      	str	r3, [r7, #0]
    menu_display[1] = (char *)menu_text[menu_main_column][menu_main_scroll + 1];
   819b4:	4b3f      	ldr	r3, [pc, #252]	; (81ab4 <print_menu_main+0x138>)
   819b6:	781b      	ldrb	r3, [r3, #0]
   819b8:	461a      	mov	r2, r3
   819ba:	4b3f      	ldr	r3, [pc, #252]	; (81ab8 <print_menu_main+0x13c>)
   819bc:	781b      	ldrb	r3, [r3, #0]
   819be:	3301      	adds	r3, #1
   819c0:	00d2      	lsls	r2, r2, #3
   819c2:	4413      	add	r3, r2
   819c4:	009b      	lsls	r3, r3, #2
   819c6:	f107 0270 	add.w	r2, r7, #112	; 0x70
   819ca:	4413      	add	r3, r2
   819cc:	f853 3c60 	ldr.w	r3, [r3, #-96]
   819d0:	607b      	str	r3, [r7, #4]
    menu_display[2] = (char *)menu_text[menu_main_column][menu_main_scroll + 2];
   819d2:	4b38      	ldr	r3, [pc, #224]	; (81ab4 <print_menu_main+0x138>)
   819d4:	781b      	ldrb	r3, [r3, #0]
   819d6:	461a      	mov	r2, r3
   819d8:	4b37      	ldr	r3, [pc, #220]	; (81ab8 <print_menu_main+0x13c>)
   819da:	781b      	ldrb	r3, [r3, #0]
   819dc:	3302      	adds	r3, #2
   819de:	00d2      	lsls	r2, r2, #3
   819e0:	4413      	add	r3, r2
   819e2:	009b      	lsls	r3, r3, #2
   819e4:	f107 0270 	add.w	r2, r7, #112	; 0x70
   819e8:	4413      	add	r3, r2
   819ea:	f853 3c60 	ldr.w	r3, [r3, #-96]
   819ee:	60bb      	str	r3, [r7, #8]
    menu_display[3] = (char *)menu_text[menu_main_column][menu_main_scroll + 3];
   819f0:	4b30      	ldr	r3, [pc, #192]	; (81ab4 <print_menu_main+0x138>)
   819f2:	781b      	ldrb	r3, [r3, #0]
   819f4:	461a      	mov	r2, r3
   819f6:	4b30      	ldr	r3, [pc, #192]	; (81ab8 <print_menu_main+0x13c>)
   819f8:	781b      	ldrb	r3, [r3, #0]
   819fa:	3303      	adds	r3, #3
   819fc:	00d2      	lsls	r2, r2, #3
   819fe:	4413      	add	r3, r2
   81a00:	009b      	lsls	r3, r3, #2
   81a02:	f107 0270 	add.w	r2, r7, #112	; 0x70
   81a06:	4413      	add	r3, r2
   81a08:	f853 3c60 	ldr.w	r3, [r3, #-96]
   81a0c:	60fb      	str	r3, [r7, #12]
    lcd_print_m(menu_display);
   81a0e:	463b      	mov	r3, r7
   81a10:	4618      	mov	r0, r3
   81a12:	4b2a      	ldr	r3, [pc, #168]	; (81abc <print_menu_main+0x140>)
   81a14:	4798      	blx	r3

    switch(menu_main_column)
   81a16:	4b27      	ldr	r3, [pc, #156]	; (81ab4 <print_menu_main+0x138>)
   81a18:	781b      	ldrb	r3, [r3, #0]
   81a1a:	2b01      	cmp	r3, #1
   81a1c:	d038      	beq.n	81a90 <print_menu_main+0x114>
   81a1e:	2b02      	cmp	r3, #2
   81a20:	d038      	beq.n	81a94 <print_menu_main+0x118>
   81a22:	2b00      	cmp	r3, #0
   81a24:	d137      	bne.n	81a96 <print_menu_main+0x11a>
    {
        case 0:
            sprintf(sprintf_cache, "%1d", rbt_id);
   81a26:	4b26      	ldr	r3, [pc, #152]	; (81ac0 <print_menu_main+0x144>)
   81a28:	781b      	ldrb	r3, [r3, #0]
   81a2a:	461a      	mov	r2, r3
   81a2c:	4925      	ldr	r1, [pc, #148]	; (81ac4 <print_menu_main+0x148>)
   81a2e:	4826      	ldr	r0, [pc, #152]	; (81ac8 <print_menu_main+0x14c>)
   81a30:	4b26      	ldr	r3, [pc, #152]	; (81acc <print_menu_main+0x150>)
   81a32:	4798      	blx	r3
            lcd_print_s(2 - menu_main_scroll, 11, sprintf_cache);
   81a34:	4b20      	ldr	r3, [pc, #128]	; (81ab8 <print_menu_main+0x13c>)
   81a36:	781b      	ldrb	r3, [r3, #0]
   81a38:	f1c3 0302 	rsb	r3, r3, #2
   81a3c:	b2db      	uxtb	r3, r3
   81a3e:	b25b      	sxtb	r3, r3
   81a40:	4a21      	ldr	r2, [pc, #132]	; (81ac8 <print_menu_main+0x14c>)
   81a42:	210b      	movs	r1, #11
   81a44:	4618      	mov	r0, r3
   81a46:	4b22      	ldr	r3, [pc, #136]	; (81ad0 <print_menu_main+0x154>)
   81a48:	4798      	blx	r3
            sprintf(sprintf_cache, "%2d", speed_preset);
   81a4a:	4b22      	ldr	r3, [pc, #136]	; (81ad4 <print_menu_main+0x158>)
   81a4c:	781b      	ldrb	r3, [r3, #0]
   81a4e:	461a      	mov	r2, r3
   81a50:	4921      	ldr	r1, [pc, #132]	; (81ad8 <print_menu_main+0x15c>)
   81a52:	481d      	ldr	r0, [pc, #116]	; (81ac8 <print_menu_main+0x14c>)
   81a54:	4b1d      	ldr	r3, [pc, #116]	; (81acc <print_menu_main+0x150>)
   81a56:	4798      	blx	r3
            lcd_print_s(3 - menu_main_scroll, 8, sprintf_cache);
   81a58:	4b17      	ldr	r3, [pc, #92]	; (81ab8 <print_menu_main+0x13c>)
   81a5a:	781b      	ldrb	r3, [r3, #0]
   81a5c:	f1c3 0303 	rsb	r3, r3, #3
   81a60:	b2db      	uxtb	r3, r3
   81a62:	b25b      	sxtb	r3, r3
   81a64:	4a18      	ldr	r2, [pc, #96]	; (81ac8 <print_menu_main+0x14c>)
   81a66:	2108      	movs	r1, #8
   81a68:	4618      	mov	r0, r3
   81a6a:	4b19      	ldr	r3, [pc, #100]	; (81ad0 <print_menu_main+0x154>)
   81a6c:	4798      	blx	r3
            sprintf(sprintf_cache, "%1d", 1);	//rpi_tx.info.wifi
   81a6e:	2201      	movs	r2, #1
   81a70:	4914      	ldr	r1, [pc, #80]	; (81ac4 <print_menu_main+0x148>)
   81a72:	4815      	ldr	r0, [pc, #84]	; (81ac8 <print_menu_main+0x14c>)
   81a74:	4b15      	ldr	r3, [pc, #84]	; (81acc <print_menu_main+0x150>)
   81a76:	4798      	blx	r3
            lcd_print_s(4 - menu_main_scroll, 7, sprintf_cache);
   81a78:	4b0f      	ldr	r3, [pc, #60]	; (81ab8 <print_menu_main+0x13c>)
   81a7a:	781b      	ldrb	r3, [r3, #0]
   81a7c:	f1c3 0304 	rsb	r3, r3, #4
   81a80:	b2db      	uxtb	r3, r3
   81a82:	b25b      	sxtb	r3, r3
   81a84:	4a10      	ldr	r2, [pc, #64]	; (81ac8 <print_menu_main+0x14c>)
   81a86:	2107      	movs	r1, #7
   81a88:	4618      	mov	r0, r3
   81a8a:	4b11      	ldr	r3, [pc, #68]	; (81ad0 <print_menu_main+0x154>)
   81a8c:	4798      	blx	r3
            break;
   81a8e:	e002      	b.n	81a96 <print_menu_main+0x11a>
        case 1:
            break;
   81a90:	bf00      	nop
   81a92:	e000      	b.n	81a96 <print_menu_main+0x11a>
        case 2:
            break;
   81a94:	bf00      	nop
    }
    
    print_cursor();
   81a96:	4b11      	ldr	r3, [pc, #68]	; (81adc <print_menu_main+0x160>)
   81a98:	4798      	blx	r3
    update_battery(1);
   81a9a:	2001      	movs	r0, #1
   81a9c:	4b10      	ldr	r3, [pc, #64]	; (81ae0 <print_menu_main+0x164>)
   81a9e:	4798      	blx	r3
}
   81aa0:	bf00      	nop
   81aa2:	3770      	adds	r7, #112	; 0x70
   81aa4:	46bd      	mov	sp, r7
   81aa6:	bd80      	pop	{r7, pc}
   81aa8:	00087f0c 	.word	0x00087f0c
   81aac:	000835ad 	.word	0x000835ad
   81ab0:	00080f71 	.word	0x00080f71
   81ab4:	20070195 	.word	0x20070195
   81ab8:	20070fa1 	.word	0x20070fa1
   81abc:	000811b5 	.word	0x000811b5
   81ac0:	2007018d 	.word	0x2007018d
   81ac4:	00087e0c 	.word	0x00087e0c
   81ac8:	20071014 	.word	0x20071014
   81acc:	00083735 	.word	0x00083735
   81ad0:	00080f91 	.word	0x00080f91
   81ad4:	2007018e 	.word	0x2007018e
   81ad8:	00087e10 	.word	0x00087e10
   81adc:	00081ae5 	.word	0x00081ae5
   81ae0:	00081ff9 	.word	0x00081ff9

00081ae4 <print_cursor>:

void print_cursor(void)
{
   81ae4:	b580      	push	{r7, lr}
   81ae6:	af00      	add	r7, sp, #0
    if (act_menu == MENU_MAIN && act_cursor_line == 1)
   81ae8:	4b3a      	ldr	r3, [pc, #232]	; (81bd4 <print_cursor+0xf0>)
   81aea:	781b      	ldrb	r3, [r3, #0]
   81aec:	2b00      	cmp	r3, #0
   81aee:	d133      	bne.n	81b58 <print_cursor+0x74>
   81af0:	4b39      	ldr	r3, [pc, #228]	; (81bd8 <print_cursor+0xf4>)
   81af2:	781b      	ldrb	r3, [r3, #0]
   81af4:	2b01      	cmp	r3, #1
   81af6:	d12f      	bne.n	81b58 <print_cursor+0x74>
    {
        switch (menu_main_column)
   81af8:	4b38      	ldr	r3, [pc, #224]	; (81bdc <print_cursor+0xf8>)
   81afa:	781b      	ldrb	r3, [r3, #0]
   81afc:	2b01      	cmp	r3, #1
   81afe:	d00f      	beq.n	81b20 <print_cursor+0x3c>
   81b00:	2b02      	cmp	r3, #2
   81b02:	d01d      	beq.n	81b40 <print_cursor+0x5c>
   81b04:	2b00      	cmp	r3, #0
   81b06:	d000      	beq.n	81b0a <print_cursor+0x26>
            case 2:
                lcd_print_s(1, 3, "<");
                lcd_print_s(2, 0, " ");
                break;
            default:
                break;
   81b08:	e025      	b.n	81b56 <print_cursor+0x72>
                lcd_print_s(1, 12, ">");
   81b0a:	4a35      	ldr	r2, [pc, #212]	; (81be0 <print_cursor+0xfc>)
   81b0c:	210c      	movs	r1, #12
   81b0e:	2001      	movs	r0, #1
   81b10:	4b34      	ldr	r3, [pc, #208]	; (81be4 <print_cursor+0x100>)
   81b12:	4798      	blx	r3
                lcd_print_s(2, 0, " ");
   81b14:	4a34      	ldr	r2, [pc, #208]	; (81be8 <print_cursor+0x104>)
   81b16:	2100      	movs	r1, #0
   81b18:	2002      	movs	r0, #2
   81b1a:	4b32      	ldr	r3, [pc, #200]	; (81be4 <print_cursor+0x100>)
   81b1c:	4798      	blx	r3
                break;
   81b1e:	e01a      	b.n	81b56 <print_cursor+0x72>
                lcd_print_s(1, 3, "<");
   81b20:	4a32      	ldr	r2, [pc, #200]	; (81bec <print_cursor+0x108>)
   81b22:	2103      	movs	r1, #3
   81b24:	2001      	movs	r0, #1
   81b26:	4b2f      	ldr	r3, [pc, #188]	; (81be4 <print_cursor+0x100>)
   81b28:	4798      	blx	r3
                lcd_print_s(1, 11, ">");
   81b2a:	4a2d      	ldr	r2, [pc, #180]	; (81be0 <print_cursor+0xfc>)
   81b2c:	210b      	movs	r1, #11
   81b2e:	2001      	movs	r0, #1
   81b30:	4b2c      	ldr	r3, [pc, #176]	; (81be4 <print_cursor+0x100>)
   81b32:	4798      	blx	r3
                lcd_print_s(2, 0, " ");
   81b34:	4a2c      	ldr	r2, [pc, #176]	; (81be8 <print_cursor+0x104>)
   81b36:	2100      	movs	r1, #0
   81b38:	2002      	movs	r0, #2
   81b3a:	4b2a      	ldr	r3, [pc, #168]	; (81be4 <print_cursor+0x100>)
   81b3c:	4798      	blx	r3
                break;
   81b3e:	e00a      	b.n	81b56 <print_cursor+0x72>
                lcd_print_s(1, 3, "<");
   81b40:	4a2a      	ldr	r2, [pc, #168]	; (81bec <print_cursor+0x108>)
   81b42:	2103      	movs	r1, #3
   81b44:	2001      	movs	r0, #1
   81b46:	4b27      	ldr	r3, [pc, #156]	; (81be4 <print_cursor+0x100>)
   81b48:	4798      	blx	r3
                lcd_print_s(2, 0, " ");
   81b4a:	4a27      	ldr	r2, [pc, #156]	; (81be8 <print_cursor+0x104>)
   81b4c:	2100      	movs	r1, #0
   81b4e:	2002      	movs	r0, #2
   81b50:	4b24      	ldr	r3, [pc, #144]	; (81be4 <print_cursor+0x100>)
   81b52:	4798      	blx	r3
                break;
   81b54:	bf00      	nop
        }
    }
   81b56:	e033      	b.n	81bc0 <print_cursor+0xdc>
    else
    {
        if (prev_cursor_line == 1)
   81b58:	4b25      	ldr	r3, [pc, #148]	; (81bf0 <print_cursor+0x10c>)
   81b5a:	781b      	ldrb	r3, [r3, #0]
   81b5c:	2b01      	cmp	r3, #1
   81b5e:	d11f      	bne.n	81ba0 <print_cursor+0xbc>
        {
            switch (menu_main_column)
   81b60:	4b1e      	ldr	r3, [pc, #120]	; (81bdc <print_cursor+0xf8>)
   81b62:	781b      	ldrb	r3, [r3, #0]
   81b64:	2b01      	cmp	r3, #1
   81b66:	d00a      	beq.n	81b7e <print_cursor+0x9a>
   81b68:	2b02      	cmp	r3, #2
   81b6a:	d013      	beq.n	81b94 <print_cursor+0xb0>
   81b6c:	2b00      	cmp	r3, #0
   81b6e:	d000      	beq.n	81b72 <print_cursor+0x8e>
                    break;
                case 2:
                    lcd_print_s(1, 3, " ");
                    break;
                default:
                    break;
   81b70:	e016      	b.n	81ba0 <print_cursor+0xbc>
                    lcd_print_s(1, 12, " ");
   81b72:	4a1d      	ldr	r2, [pc, #116]	; (81be8 <print_cursor+0x104>)
   81b74:	210c      	movs	r1, #12
   81b76:	2001      	movs	r0, #1
   81b78:	4b1a      	ldr	r3, [pc, #104]	; (81be4 <print_cursor+0x100>)
   81b7a:	4798      	blx	r3
                    break;
   81b7c:	e010      	b.n	81ba0 <print_cursor+0xbc>
                    lcd_print_s(1, 3, " ");
   81b7e:	4a1a      	ldr	r2, [pc, #104]	; (81be8 <print_cursor+0x104>)
   81b80:	2103      	movs	r1, #3
   81b82:	2001      	movs	r0, #1
   81b84:	4b17      	ldr	r3, [pc, #92]	; (81be4 <print_cursor+0x100>)
   81b86:	4798      	blx	r3
                    lcd_print_s(1, 11, " ");
   81b88:	4a17      	ldr	r2, [pc, #92]	; (81be8 <print_cursor+0x104>)
   81b8a:	210b      	movs	r1, #11
   81b8c:	2001      	movs	r0, #1
   81b8e:	4b15      	ldr	r3, [pc, #84]	; (81be4 <print_cursor+0x100>)
   81b90:	4798      	blx	r3
                    break;
   81b92:	e005      	b.n	81ba0 <print_cursor+0xbc>
                    lcd_print_s(1, 3, " ");
   81b94:	4a14      	ldr	r2, [pc, #80]	; (81be8 <print_cursor+0x104>)
   81b96:	2103      	movs	r1, #3
   81b98:	2001      	movs	r0, #1
   81b9a:	4b12      	ldr	r3, [pc, #72]	; (81be4 <print_cursor+0x100>)
   81b9c:	4798      	blx	r3
                    break;
   81b9e:	bf00      	nop
            }
        }
        
        lcd_print_s(prev_cursor_line_on_lcd, 0, " ");
   81ba0:	4b14      	ldr	r3, [pc, #80]	; (81bf4 <print_cursor+0x110>)
   81ba2:	781b      	ldrb	r3, [r3, #0]
   81ba4:	b25b      	sxtb	r3, r3
   81ba6:	4a10      	ldr	r2, [pc, #64]	; (81be8 <print_cursor+0x104>)
   81ba8:	2100      	movs	r1, #0
   81baa:	4618      	mov	r0, r3
   81bac:	4b0d      	ldr	r3, [pc, #52]	; (81be4 <print_cursor+0x100>)
   81bae:	4798      	blx	r3
        lcd_print_s(act_cursor_line_on_lcd, 0, ">");
   81bb0:	4b11      	ldr	r3, [pc, #68]	; (81bf8 <print_cursor+0x114>)
   81bb2:	781b      	ldrb	r3, [r3, #0]
   81bb4:	b25b      	sxtb	r3, r3
   81bb6:	4a0a      	ldr	r2, [pc, #40]	; (81be0 <print_cursor+0xfc>)
   81bb8:	2100      	movs	r1, #0
   81bba:	4618      	mov	r0, r3
   81bbc:	4b09      	ldr	r3, [pc, #36]	; (81be4 <print_cursor+0x100>)
   81bbe:	4798      	blx	r3
    }
    
    prev_cursor_line = act_cursor_line;
   81bc0:	4b05      	ldr	r3, [pc, #20]	; (81bd8 <print_cursor+0xf4>)
   81bc2:	781a      	ldrb	r2, [r3, #0]
   81bc4:	4b0a      	ldr	r3, [pc, #40]	; (81bf0 <print_cursor+0x10c>)
   81bc6:	701a      	strb	r2, [r3, #0]
    prev_cursor_line_on_lcd = act_cursor_line_on_lcd;
   81bc8:	4b0b      	ldr	r3, [pc, #44]	; (81bf8 <print_cursor+0x114>)
   81bca:	781a      	ldrb	r2, [r3, #0]
   81bcc:	4b09      	ldr	r3, [pc, #36]	; (81bf4 <print_cursor+0x110>)
   81bce:	701a      	strb	r2, [r3, #0]
}
   81bd0:	bf00      	nop
   81bd2:	bd80      	pop	{r7, pc}
   81bd4:	20070fa0 	.word	0x20070fa0
   81bd8:	20070191 	.word	0x20070191
   81bdc:	20070195 	.word	0x20070195
   81be0:	00087f6c 	.word	0x00087f6c
   81be4:	00080f91 	.word	0x00080f91
   81be8:	00087f70 	.word	0x00087f70
   81bec:	00087f74 	.word	0x00087f74
   81bf0:	20070192 	.word	0x20070192
   81bf4:	20070190 	.word	0x20070190
   81bf8:	2007018f 	.word	0x2007018f

00081bfc <button_events>:

event_t button_events(void)
{
   81bfc:	b580      	push	{r7, lr}
   81bfe:	b082      	sub	sp, #8
   81c00:	af00      	add	r7, sp, #0
    event_t nextEvent = EVENT_NO_EVENT;
   81c02:	2300      	movs	r3, #0
   81c04:	71fb      	strb	r3, [r7, #7]

    if (getTicks() >= (ticks_button_update + 30))
   81c06:	4b88      	ldr	r3, [pc, #544]	; (81e28 <button_events+0x22c>)
   81c08:	4798      	blx	r3
   81c0a:	4602      	mov	r2, r0
   81c0c:	4b87      	ldr	r3, [pc, #540]	; (81e2c <button_events+0x230>)
   81c0e:	681b      	ldr	r3, [r3, #0]
   81c10:	331e      	adds	r3, #30
   81c12:	429a      	cmp	r2, r3
   81c14:	f0c0 814a 	bcc.w	81eac <button_events+0x2b0>
    {
        ticks_button_update = getTicks();
   81c18:	4b83      	ldr	r3, [pc, #524]	; (81e28 <button_events+0x22c>)
   81c1a:	4798      	blx	r3
   81c1c:	4602      	mov	r2, r0
   81c1e:	4b83      	ldr	r3, [pc, #524]	; (81e2c <button_events+0x230>)
   81c20:	601a      	str	r2, [r3, #0]
        
        pb_up_act = ioport_get_pin_level(PB_UP);
   81c22:	2060      	movs	r0, #96	; 0x60
   81c24:	4b82      	ldr	r3, [pc, #520]	; (81e30 <button_events+0x234>)
   81c26:	4798      	blx	r3
   81c28:	4603      	mov	r3, r0
   81c2a:	461a      	mov	r2, r3
   81c2c:	4b81      	ldr	r3, [pc, #516]	; (81e34 <button_events+0x238>)
   81c2e:	701a      	strb	r2, [r3, #0]
        pb_left_act = ioport_get_pin_level(PB_LEFT);
   81c30:	2061      	movs	r0, #97	; 0x61
   81c32:	4b7f      	ldr	r3, [pc, #508]	; (81e30 <button_events+0x234>)
   81c34:	4798      	blx	r3
   81c36:	4603      	mov	r3, r0
   81c38:	461a      	mov	r2, r3
   81c3a:	4b7f      	ldr	r3, [pc, #508]	; (81e38 <button_events+0x23c>)
   81c3c:	701a      	strb	r2, [r3, #0]
        pb_mid_act = ioport_get_pin_level(PB_MID);
   81c3e:	2062      	movs	r0, #98	; 0x62
   81c40:	4b7b      	ldr	r3, [pc, #492]	; (81e30 <button_events+0x234>)
   81c42:	4798      	blx	r3
   81c44:	4603      	mov	r3, r0
   81c46:	461a      	mov	r2, r3
   81c48:	4b7c      	ldr	r3, [pc, #496]	; (81e3c <button_events+0x240>)
   81c4a:	701a      	strb	r2, [r3, #0]
        pb_right_act = ioport_get_pin_level(PB_RIGHT);
   81c4c:	2063      	movs	r0, #99	; 0x63
   81c4e:	4b78      	ldr	r3, [pc, #480]	; (81e30 <button_events+0x234>)
   81c50:	4798      	blx	r3
   81c52:	4603      	mov	r3, r0
   81c54:	461a      	mov	r2, r3
   81c56:	4b7a      	ldr	r3, [pc, #488]	; (81e40 <button_events+0x244>)
   81c58:	701a      	strb	r2, [r3, #0]
        pb_down_act = ioport_get_pin_level(PB_DOWN);
   81c5a:	2064      	movs	r0, #100	; 0x64
   81c5c:	4b74      	ldr	r3, [pc, #464]	; (81e30 <button_events+0x234>)
   81c5e:	4798      	blx	r3
   81c60:	4603      	mov	r3, r0
   81c62:	461a      	mov	r2, r3
   81c64:	4b77      	ldr	r3, [pc, #476]	; (81e44 <button_events+0x248>)
   81c66:	701a      	strb	r2, [r3, #0]
        pb_return_act = ioport_get_pin_level(PB_RETURN);
   81c68:	2065      	movs	r0, #101	; 0x65
   81c6a:	4b71      	ldr	r3, [pc, #452]	; (81e30 <button_events+0x234>)
   81c6c:	4798      	blx	r3
   81c6e:	4603      	mov	r3, r0
   81c70:	461a      	mov	r2, r3
   81c72:	4b75      	ldr	r3, [pc, #468]	; (81e48 <button_events+0x24c>)
   81c74:	701a      	strb	r2, [r3, #0]
        
        if (pb_up_act != pb_up_prev && pb_up_act == 0)
   81c76:	4b6f      	ldr	r3, [pc, #444]	; (81e34 <button_events+0x238>)
   81c78:	781a      	ldrb	r2, [r3, #0]
   81c7a:	4b74      	ldr	r3, [pc, #464]	; (81e4c <button_events+0x250>)
   81c7c:	781b      	ldrb	r3, [r3, #0]
   81c7e:	429a      	cmp	r2, r3
   81c80:	d006      	beq.n	81c90 <button_events+0x94>
   81c82:	4b6c      	ldr	r3, [pc, #432]	; (81e34 <button_events+0x238>)
   81c84:	781b      	ldrb	r3, [r3, #0]
   81c86:	2b00      	cmp	r3, #0
   81c88:	d102      	bne.n	81c90 <button_events+0x94>
        {
            nextEvent = EVENT_BUTTON_UP_P;
   81c8a:	2301      	movs	r3, #1
   81c8c:	71fb      	strb	r3, [r7, #7]
   81c8e:	e018      	b.n	81cc2 <button_events+0xc6>
        }
        else if (pb_up_act != pb_up_prev && pb_up_act == 1)
   81c90:	4b68      	ldr	r3, [pc, #416]	; (81e34 <button_events+0x238>)
   81c92:	781a      	ldrb	r2, [r3, #0]
   81c94:	4b6d      	ldr	r3, [pc, #436]	; (81e4c <button_events+0x250>)
   81c96:	781b      	ldrb	r3, [r3, #0]
   81c98:	429a      	cmp	r2, r3
   81c9a:	d006      	beq.n	81caa <button_events+0xae>
   81c9c:	4b65      	ldr	r3, [pc, #404]	; (81e34 <button_events+0x238>)
   81c9e:	781b      	ldrb	r3, [r3, #0]
   81ca0:	2b01      	cmp	r3, #1
   81ca2:	d102      	bne.n	81caa <button_events+0xae>
        {
            nextEvent = EVENT_BUTTON_UP_R;
   81ca4:	2303      	movs	r3, #3
   81ca6:	71fb      	strb	r3, [r7, #7]
   81ca8:	e00b      	b.n	81cc2 <button_events+0xc6>
        }
        else if (pb_up_act == pb_up_prev && pb_up_act == 0)
   81caa:	4b62      	ldr	r3, [pc, #392]	; (81e34 <button_events+0x238>)
   81cac:	781a      	ldrb	r2, [r3, #0]
   81cae:	4b67      	ldr	r3, [pc, #412]	; (81e4c <button_events+0x250>)
   81cb0:	781b      	ldrb	r3, [r3, #0]
   81cb2:	429a      	cmp	r2, r3
   81cb4:	d105      	bne.n	81cc2 <button_events+0xc6>
   81cb6:	4b5f      	ldr	r3, [pc, #380]	; (81e34 <button_events+0x238>)
   81cb8:	781b      	ldrb	r3, [r3, #0]
   81cba:	2b00      	cmp	r3, #0
   81cbc:	d101      	bne.n	81cc2 <button_events+0xc6>
        {
            nextEvent = EVENT_BUTTON_UP_H;
   81cbe:	2302      	movs	r3, #2
   81cc0:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_left_act != pb_left_prev && pb_left_act == 0)
   81cc2:	4b5d      	ldr	r3, [pc, #372]	; (81e38 <button_events+0x23c>)
   81cc4:	781a      	ldrb	r2, [r3, #0]
   81cc6:	4b62      	ldr	r3, [pc, #392]	; (81e50 <button_events+0x254>)
   81cc8:	781b      	ldrb	r3, [r3, #0]
   81cca:	429a      	cmp	r2, r3
   81ccc:	d006      	beq.n	81cdc <button_events+0xe0>
   81cce:	4b5a      	ldr	r3, [pc, #360]	; (81e38 <button_events+0x23c>)
   81cd0:	781b      	ldrb	r3, [r3, #0]
   81cd2:	2b00      	cmp	r3, #0
   81cd4:	d102      	bne.n	81cdc <button_events+0xe0>
        {
            nextEvent = EVENT_BUTTON_LEFT_P;
   81cd6:	2304      	movs	r3, #4
   81cd8:	71fb      	strb	r3, [r7, #7]
   81cda:	e018      	b.n	81d0e <button_events+0x112>
        }
        else if (pb_left_act != pb_left_prev && pb_left_act == 1)
   81cdc:	4b56      	ldr	r3, [pc, #344]	; (81e38 <button_events+0x23c>)
   81cde:	781a      	ldrb	r2, [r3, #0]
   81ce0:	4b5b      	ldr	r3, [pc, #364]	; (81e50 <button_events+0x254>)
   81ce2:	781b      	ldrb	r3, [r3, #0]
   81ce4:	429a      	cmp	r2, r3
   81ce6:	d006      	beq.n	81cf6 <button_events+0xfa>
   81ce8:	4b53      	ldr	r3, [pc, #332]	; (81e38 <button_events+0x23c>)
   81cea:	781b      	ldrb	r3, [r3, #0]
   81cec:	2b01      	cmp	r3, #1
   81cee:	d102      	bne.n	81cf6 <button_events+0xfa>
        {
            nextEvent = EVENT_BUTTON_LEFT_R;
   81cf0:	2306      	movs	r3, #6
   81cf2:	71fb      	strb	r3, [r7, #7]
   81cf4:	e00b      	b.n	81d0e <button_events+0x112>
        }
        else if (pb_left_act == pb_left_prev && pb_left_act == 0)
   81cf6:	4b50      	ldr	r3, [pc, #320]	; (81e38 <button_events+0x23c>)
   81cf8:	781a      	ldrb	r2, [r3, #0]
   81cfa:	4b55      	ldr	r3, [pc, #340]	; (81e50 <button_events+0x254>)
   81cfc:	781b      	ldrb	r3, [r3, #0]
   81cfe:	429a      	cmp	r2, r3
   81d00:	d105      	bne.n	81d0e <button_events+0x112>
   81d02:	4b4d      	ldr	r3, [pc, #308]	; (81e38 <button_events+0x23c>)
   81d04:	781b      	ldrb	r3, [r3, #0]
   81d06:	2b00      	cmp	r3, #0
   81d08:	d101      	bne.n	81d0e <button_events+0x112>
        {
            nextEvent = EVENT_BUTTON_LEFT_H;
   81d0a:	2305      	movs	r3, #5
   81d0c:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_mid_act != pb_mid_prev && pb_mid_act == 0)
   81d0e:	4b4b      	ldr	r3, [pc, #300]	; (81e3c <button_events+0x240>)
   81d10:	781a      	ldrb	r2, [r3, #0]
   81d12:	4b50      	ldr	r3, [pc, #320]	; (81e54 <button_events+0x258>)
   81d14:	781b      	ldrb	r3, [r3, #0]
   81d16:	429a      	cmp	r2, r3
   81d18:	d006      	beq.n	81d28 <button_events+0x12c>
   81d1a:	4b48      	ldr	r3, [pc, #288]	; (81e3c <button_events+0x240>)
   81d1c:	781b      	ldrb	r3, [r3, #0]
   81d1e:	2b00      	cmp	r3, #0
   81d20:	d102      	bne.n	81d28 <button_events+0x12c>
        {
            nextEvent = EVENT_BUTTON_MID_P;
   81d22:	2307      	movs	r3, #7
   81d24:	71fb      	strb	r3, [r7, #7]
   81d26:	e018      	b.n	81d5a <button_events+0x15e>
        }
        else if (pb_mid_act != pb_mid_prev && pb_mid_act == 1)
   81d28:	4b44      	ldr	r3, [pc, #272]	; (81e3c <button_events+0x240>)
   81d2a:	781a      	ldrb	r2, [r3, #0]
   81d2c:	4b49      	ldr	r3, [pc, #292]	; (81e54 <button_events+0x258>)
   81d2e:	781b      	ldrb	r3, [r3, #0]
   81d30:	429a      	cmp	r2, r3
   81d32:	d006      	beq.n	81d42 <button_events+0x146>
   81d34:	4b41      	ldr	r3, [pc, #260]	; (81e3c <button_events+0x240>)
   81d36:	781b      	ldrb	r3, [r3, #0]
   81d38:	2b01      	cmp	r3, #1
   81d3a:	d102      	bne.n	81d42 <button_events+0x146>
        {
            nextEvent = EVENT_BUTTON_MID_R;
   81d3c:	2309      	movs	r3, #9
   81d3e:	71fb      	strb	r3, [r7, #7]
   81d40:	e00b      	b.n	81d5a <button_events+0x15e>
        }
        else if (pb_mid_act == pb_mid_prev && pb_mid_act == 0)
   81d42:	4b3e      	ldr	r3, [pc, #248]	; (81e3c <button_events+0x240>)
   81d44:	781a      	ldrb	r2, [r3, #0]
   81d46:	4b43      	ldr	r3, [pc, #268]	; (81e54 <button_events+0x258>)
   81d48:	781b      	ldrb	r3, [r3, #0]
   81d4a:	429a      	cmp	r2, r3
   81d4c:	d105      	bne.n	81d5a <button_events+0x15e>
   81d4e:	4b3b      	ldr	r3, [pc, #236]	; (81e3c <button_events+0x240>)
   81d50:	781b      	ldrb	r3, [r3, #0]
   81d52:	2b00      	cmp	r3, #0
   81d54:	d101      	bne.n	81d5a <button_events+0x15e>
        {
            nextEvent = EVENT_BUTTON_MID_H;
   81d56:	2308      	movs	r3, #8
   81d58:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_right_act != pb_right_prev && pb_right_act == 0)
   81d5a:	4b39      	ldr	r3, [pc, #228]	; (81e40 <button_events+0x244>)
   81d5c:	781a      	ldrb	r2, [r3, #0]
   81d5e:	4b3e      	ldr	r3, [pc, #248]	; (81e58 <button_events+0x25c>)
   81d60:	781b      	ldrb	r3, [r3, #0]
   81d62:	429a      	cmp	r2, r3
   81d64:	d006      	beq.n	81d74 <button_events+0x178>
   81d66:	4b36      	ldr	r3, [pc, #216]	; (81e40 <button_events+0x244>)
   81d68:	781b      	ldrb	r3, [r3, #0]
   81d6a:	2b00      	cmp	r3, #0
   81d6c:	d102      	bne.n	81d74 <button_events+0x178>
        {
            nextEvent = EVENT_BUTTON_RIGHT_P;
   81d6e:	230a      	movs	r3, #10
   81d70:	71fb      	strb	r3, [r7, #7]
   81d72:	e018      	b.n	81da6 <button_events+0x1aa>
        }
        else if (pb_right_act != pb_right_prev && pb_right_act == 1)
   81d74:	4b32      	ldr	r3, [pc, #200]	; (81e40 <button_events+0x244>)
   81d76:	781a      	ldrb	r2, [r3, #0]
   81d78:	4b37      	ldr	r3, [pc, #220]	; (81e58 <button_events+0x25c>)
   81d7a:	781b      	ldrb	r3, [r3, #0]
   81d7c:	429a      	cmp	r2, r3
   81d7e:	d006      	beq.n	81d8e <button_events+0x192>
   81d80:	4b2f      	ldr	r3, [pc, #188]	; (81e40 <button_events+0x244>)
   81d82:	781b      	ldrb	r3, [r3, #0]
   81d84:	2b01      	cmp	r3, #1
   81d86:	d102      	bne.n	81d8e <button_events+0x192>
        {
            nextEvent = EVENT_BUTTON_RIGHT_R;
   81d88:	230c      	movs	r3, #12
   81d8a:	71fb      	strb	r3, [r7, #7]
   81d8c:	e00b      	b.n	81da6 <button_events+0x1aa>
        }
        else if (pb_right_act == pb_right_prev && pb_right_act == 0)
   81d8e:	4b2c      	ldr	r3, [pc, #176]	; (81e40 <button_events+0x244>)
   81d90:	781a      	ldrb	r2, [r3, #0]
   81d92:	4b31      	ldr	r3, [pc, #196]	; (81e58 <button_events+0x25c>)
   81d94:	781b      	ldrb	r3, [r3, #0]
   81d96:	429a      	cmp	r2, r3
   81d98:	d105      	bne.n	81da6 <button_events+0x1aa>
   81d9a:	4b29      	ldr	r3, [pc, #164]	; (81e40 <button_events+0x244>)
   81d9c:	781b      	ldrb	r3, [r3, #0]
   81d9e:	2b00      	cmp	r3, #0
   81da0:	d101      	bne.n	81da6 <button_events+0x1aa>
        {
            nextEvent = EVENT_BUTTON_RIGHT_H;
   81da2:	230b      	movs	r3, #11
   81da4:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_down_act != pb_down_prev && pb_down_act == 0)
   81da6:	4b27      	ldr	r3, [pc, #156]	; (81e44 <button_events+0x248>)
   81da8:	781a      	ldrb	r2, [r3, #0]
   81daa:	4b2c      	ldr	r3, [pc, #176]	; (81e5c <button_events+0x260>)
   81dac:	781b      	ldrb	r3, [r3, #0]
   81dae:	429a      	cmp	r2, r3
   81db0:	d006      	beq.n	81dc0 <button_events+0x1c4>
   81db2:	4b24      	ldr	r3, [pc, #144]	; (81e44 <button_events+0x248>)
   81db4:	781b      	ldrb	r3, [r3, #0]
   81db6:	2b00      	cmp	r3, #0
   81db8:	d102      	bne.n	81dc0 <button_events+0x1c4>
        {
            nextEvent = EVENT_BUTTON_DOWN_P;
   81dba:	230d      	movs	r3, #13
   81dbc:	71fb      	strb	r3, [r7, #7]
   81dbe:	e018      	b.n	81df2 <button_events+0x1f6>
        }
        else if (pb_down_act != pb_down_prev && pb_down_act == 1)
   81dc0:	4b20      	ldr	r3, [pc, #128]	; (81e44 <button_events+0x248>)
   81dc2:	781a      	ldrb	r2, [r3, #0]
   81dc4:	4b25      	ldr	r3, [pc, #148]	; (81e5c <button_events+0x260>)
   81dc6:	781b      	ldrb	r3, [r3, #0]
   81dc8:	429a      	cmp	r2, r3
   81dca:	d006      	beq.n	81dda <button_events+0x1de>
   81dcc:	4b1d      	ldr	r3, [pc, #116]	; (81e44 <button_events+0x248>)
   81dce:	781b      	ldrb	r3, [r3, #0]
   81dd0:	2b01      	cmp	r3, #1
   81dd2:	d102      	bne.n	81dda <button_events+0x1de>
        {
            nextEvent = EVENT_BUTTON_DOWN_R;
   81dd4:	230f      	movs	r3, #15
   81dd6:	71fb      	strb	r3, [r7, #7]
   81dd8:	e00b      	b.n	81df2 <button_events+0x1f6>
        }
        else if (pb_down_act == pb_down_prev && pb_down_act == 0)
   81dda:	4b1a      	ldr	r3, [pc, #104]	; (81e44 <button_events+0x248>)
   81ddc:	781a      	ldrb	r2, [r3, #0]
   81dde:	4b1f      	ldr	r3, [pc, #124]	; (81e5c <button_events+0x260>)
   81de0:	781b      	ldrb	r3, [r3, #0]
   81de2:	429a      	cmp	r2, r3
   81de4:	d105      	bne.n	81df2 <button_events+0x1f6>
   81de6:	4b17      	ldr	r3, [pc, #92]	; (81e44 <button_events+0x248>)
   81de8:	781b      	ldrb	r3, [r3, #0]
   81dea:	2b00      	cmp	r3, #0
   81dec:	d101      	bne.n	81df2 <button_events+0x1f6>
        {
            nextEvent = EVENT_BUTTON_DOWN_H;
   81dee:	230e      	movs	r3, #14
   81df0:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_return_act != pb_return_prev && pb_return_act == 0)
   81df2:	4b15      	ldr	r3, [pc, #84]	; (81e48 <button_events+0x24c>)
   81df4:	781a      	ldrb	r2, [r3, #0]
   81df6:	4b1a      	ldr	r3, [pc, #104]	; (81e60 <button_events+0x264>)
   81df8:	781b      	ldrb	r3, [r3, #0]
   81dfa:	429a      	cmp	r2, r3
   81dfc:	d006      	beq.n	81e0c <button_events+0x210>
   81dfe:	4b12      	ldr	r3, [pc, #72]	; (81e48 <button_events+0x24c>)
   81e00:	781b      	ldrb	r3, [r3, #0]
   81e02:	2b00      	cmp	r3, #0
   81e04:	d102      	bne.n	81e0c <button_events+0x210>
        {
            nextEvent = EVENT_BUTTON_RETURN_P;
   81e06:	2310      	movs	r3, #16
   81e08:	71fb      	strb	r3, [r7, #7]
   81e0a:	e037      	b.n	81e7c <button_events+0x280>
        }
        else if (pb_return_act != pb_return_prev && pb_return_act == 1)
   81e0c:	4b0e      	ldr	r3, [pc, #56]	; (81e48 <button_events+0x24c>)
   81e0e:	781a      	ldrb	r2, [r3, #0]
   81e10:	4b13      	ldr	r3, [pc, #76]	; (81e60 <button_events+0x264>)
   81e12:	781b      	ldrb	r3, [r3, #0]
   81e14:	429a      	cmp	r2, r3
   81e16:	d025      	beq.n	81e64 <button_events+0x268>
   81e18:	4b0b      	ldr	r3, [pc, #44]	; (81e48 <button_events+0x24c>)
   81e1a:	781b      	ldrb	r3, [r3, #0]
   81e1c:	2b01      	cmp	r3, #1
   81e1e:	d121      	bne.n	81e64 <button_events+0x268>
        {
            nextEvent = EVENT_BUTTON_RETURN_R;
   81e20:	2312      	movs	r3, #18
   81e22:	71fb      	strb	r3, [r7, #7]
   81e24:	e02a      	b.n	81e7c <button_events+0x280>
   81e26:	bf00      	nop
   81e28:	00081f71 	.word	0x00081f71
   81e2c:	20070ffc 	.word	0x20070ffc
   81e30:	00081635 	.word	0x00081635
   81e34:	20071029 	.word	0x20071029
   81e38:	20071010 	.word	0x20071010
   81e3c:	20071028 	.word	0x20071028
   81e40:	2007102a 	.word	0x2007102a
   81e44:	2007100c 	.word	0x2007100c
   81e48:	20071008 	.word	0x20071008
   81e4c:	2007100d 	.word	0x2007100d
   81e50:	2007100b 	.word	0x2007100b
   81e54:	20071009 	.word	0x20071009
   81e58:	2007100e 	.word	0x2007100e
   81e5c:	2007100a 	.word	0x2007100a
   81e60:	2007100f 	.word	0x2007100f
        }
        else if (pb_return_act == pb_up_prev && pb_return_act == 0)
   81e64:	4b14      	ldr	r3, [pc, #80]	; (81eb8 <button_events+0x2bc>)
   81e66:	781a      	ldrb	r2, [r3, #0]
   81e68:	4b14      	ldr	r3, [pc, #80]	; (81ebc <button_events+0x2c0>)
   81e6a:	781b      	ldrb	r3, [r3, #0]
   81e6c:	429a      	cmp	r2, r3
   81e6e:	d105      	bne.n	81e7c <button_events+0x280>
   81e70:	4b11      	ldr	r3, [pc, #68]	; (81eb8 <button_events+0x2bc>)
   81e72:	781b      	ldrb	r3, [r3, #0]
   81e74:	2b00      	cmp	r3, #0
   81e76:	d101      	bne.n	81e7c <button_events+0x280>
        {
            nextEvent = EVENT_BUTTON_RETURN_H;
   81e78:	2311      	movs	r3, #17
   81e7a:	71fb      	strb	r3, [r7, #7]
        }
        
        pb_up_prev = pb_up_act;
   81e7c:	4b10      	ldr	r3, [pc, #64]	; (81ec0 <button_events+0x2c4>)
   81e7e:	781a      	ldrb	r2, [r3, #0]
   81e80:	4b0e      	ldr	r3, [pc, #56]	; (81ebc <button_events+0x2c0>)
   81e82:	701a      	strb	r2, [r3, #0]
        pb_left_prev = pb_left_act;
   81e84:	4b0f      	ldr	r3, [pc, #60]	; (81ec4 <button_events+0x2c8>)
   81e86:	781a      	ldrb	r2, [r3, #0]
   81e88:	4b0f      	ldr	r3, [pc, #60]	; (81ec8 <button_events+0x2cc>)
   81e8a:	701a      	strb	r2, [r3, #0]
        pb_mid_prev = pb_mid_act;
   81e8c:	4b0f      	ldr	r3, [pc, #60]	; (81ecc <button_events+0x2d0>)
   81e8e:	781a      	ldrb	r2, [r3, #0]
   81e90:	4b0f      	ldr	r3, [pc, #60]	; (81ed0 <button_events+0x2d4>)
   81e92:	701a      	strb	r2, [r3, #0]
        pb_right_prev = pb_right_act;
   81e94:	4b0f      	ldr	r3, [pc, #60]	; (81ed4 <button_events+0x2d8>)
   81e96:	781a      	ldrb	r2, [r3, #0]
   81e98:	4b0f      	ldr	r3, [pc, #60]	; (81ed8 <button_events+0x2dc>)
   81e9a:	701a      	strb	r2, [r3, #0]
        pb_down_prev = pb_down_act;
   81e9c:	4b0f      	ldr	r3, [pc, #60]	; (81edc <button_events+0x2e0>)
   81e9e:	781a      	ldrb	r2, [r3, #0]
   81ea0:	4b0f      	ldr	r3, [pc, #60]	; (81ee0 <button_events+0x2e4>)
   81ea2:	701a      	strb	r2, [r3, #0]
        pb_return_prev = pb_return_act;
   81ea4:	4b04      	ldr	r3, [pc, #16]	; (81eb8 <button_events+0x2bc>)
   81ea6:	781a      	ldrb	r2, [r3, #0]
   81ea8:	4b0e      	ldr	r3, [pc, #56]	; (81ee4 <button_events+0x2e8>)
   81eaa:	701a      	strb	r2, [r3, #0]
    }

    return nextEvent;
   81eac:	79fb      	ldrb	r3, [r7, #7]
}
   81eae:	4618      	mov	r0, r3
   81eb0:	3708      	adds	r7, #8
   81eb2:	46bd      	mov	sp, r7
   81eb4:	bd80      	pop	{r7, pc}
   81eb6:	bf00      	nop
   81eb8:	20071008 	.word	0x20071008
   81ebc:	2007100d 	.word	0x2007100d
   81ec0:	20071029 	.word	0x20071029
   81ec4:	20071010 	.word	0x20071010
   81ec8:	2007100b 	.word	0x2007100b
   81ecc:	20071028 	.word	0x20071028
   81ed0:	20071009 	.word	0x20071009
   81ed4:	2007102a 	.word	0x2007102a
   81ed8:	2007100e 	.word	0x2007100e
   81edc:	2007100c 	.word	0x2007100c
   81ee0:	2007100a 	.word	0x2007100a
   81ee4:	2007100f 	.word	0x2007100f

00081ee8 <ioport_set_pin_level>:
{
   81ee8:	b480      	push	{r7}
   81eea:	b08b      	sub	sp, #44	; 0x2c
   81eec:	af00      	add	r7, sp, #0
   81eee:	6078      	str	r0, [r7, #4]
   81ef0:	460b      	mov	r3, r1
   81ef2:	70fb      	strb	r3, [r7, #3]
   81ef4:	687b      	ldr	r3, [r7, #4]
   81ef6:	627b      	str	r3, [r7, #36]	; 0x24
   81ef8:	78fb      	ldrb	r3, [r7, #3]
   81efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f00:	61fb      	str	r3, [r7, #28]
   81f02:	69fb      	ldr	r3, [r7, #28]
   81f04:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   81f06:	69bb      	ldr	r3, [r7, #24]
   81f08:	095b      	lsrs	r3, r3, #5
   81f0a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81f0c:	697b      	ldr	r3, [r7, #20]
   81f0e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81f12:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81f16:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   81f18:	613b      	str	r3, [r7, #16]
	if (level) {
   81f1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81f1e:	2b00      	cmp	r3, #0
   81f20:	d009      	beq.n	81f36 <ioport_set_pin_level+0x4e>
   81f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f24:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81f26:	68fb      	ldr	r3, [r7, #12]
   81f28:	f003 031f 	and.w	r3, r3, #31
   81f2c:	2201      	movs	r2, #1
   81f2e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81f30:	693b      	ldr	r3, [r7, #16]
   81f32:	631a      	str	r2, [r3, #48]	; 0x30
}
   81f34:	e008      	b.n	81f48 <ioport_set_pin_level+0x60>
   81f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f38:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   81f3a:	68bb      	ldr	r3, [r7, #8]
   81f3c:	f003 031f 	and.w	r3, r3, #31
   81f40:	2201      	movs	r2, #1
   81f42:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81f44:	693b      	ldr	r3, [r7, #16]
   81f46:	635a      	str	r2, [r3, #52]	; 0x34
   81f48:	bf00      	nop
   81f4a:	372c      	adds	r7, #44	; 0x2c
   81f4c:	46bd      	mov	sp, r7
   81f4e:	bc80      	pop	{r7}
   81f50:	4770      	bx	lr
	...

00081f54 <SysTick_Handler>:
float battery_voltage = 0;
uint8_t battery_percentage;
uint8_t prev_battery_percentage = 0;

void SysTick_Handler(void)
{
   81f54:	b480      	push	{r7}
   81f56:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   81f58:	4b04      	ldr	r3, [pc, #16]	; (81f6c <SysTick_Handler+0x18>)
   81f5a:	681b      	ldr	r3, [r3, #0]
   81f5c:	3301      	adds	r3, #1
   81f5e:	4a03      	ldr	r2, [pc, #12]	; (81f6c <SysTick_Handler+0x18>)
   81f60:	6013      	str	r3, [r2, #0]
}
   81f62:	bf00      	nop
   81f64:	46bd      	mov	sp, r7
   81f66:	bc80      	pop	{r7}
   81f68:	4770      	bx	lr
   81f6a:	bf00      	nop
   81f6c:	20070fa4 	.word	0x20070fa4

00081f70 <getTicks>:

uint32_t getTicks(void)
{
   81f70:	b480      	push	{r7}
   81f72:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   81f74:	4b02      	ldr	r3, [pc, #8]	; (81f80 <getTicks+0x10>)
   81f76:	681b      	ldr	r3, [r3, #0]
}
   81f78:	4618      	mov	r0, r3
   81f7a:	46bd      	mov	sp, r7
   81f7c:	bc80      	pop	{r7}
   81f7e:	4770      	bx	lr
   81f80:	20070fa4 	.word	0x20070fa4

00081f84 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   81f84:	b480      	push	{r7}
   81f86:	b085      	sub	sp, #20
   81f88:	af00      	add	r7, sp, #0
   81f8a:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   81f8c:	4b07      	ldr	r3, [pc, #28]	; (81fac <mdelay+0x28>)
   81f8e:	681b      	ldr	r3, [r3, #0]
   81f90:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   81f92:	bf00      	nop
   81f94:	4b05      	ldr	r3, [pc, #20]	; (81fac <mdelay+0x28>)
   81f96:	681a      	ldr	r2, [r3, #0]
   81f98:	68fb      	ldr	r3, [r7, #12]
   81f9a:	1ad2      	subs	r2, r2, r3
   81f9c:	687b      	ldr	r3, [r7, #4]
   81f9e:	429a      	cmp	r2, r3
   81fa0:	d3f8      	bcc.n	81f94 <mdelay+0x10>
}
   81fa2:	bf00      	nop
   81fa4:	3714      	adds	r7, #20
   81fa6:	46bd      	mov	sp, r7
   81fa8:	bc80      	pop	{r7}
   81faa:	4770      	bx	lr
   81fac:	20070fa4 	.word	0x20070fa4

00081fb0 <update_comm>:

void update_comm(void)
{
   81fb0:	b580      	push	{r7, lr}
   81fb2:	af00      	add	r7, sp, #0
    if ((getTicks() - ticks_comm) > 5)
   81fb4:	4b0b      	ldr	r3, [pc, #44]	; (81fe4 <update_comm+0x34>)
   81fb6:	4798      	blx	r3
   81fb8:	4602      	mov	r2, r0
   81fba:	4b0b      	ldr	r3, [pc, #44]	; (81fe8 <update_comm+0x38>)
   81fbc:	681b      	ldr	r3, [r3, #0]
   81fbe:	1ad3      	subs	r3, r2, r3
   81fc0:	2b05      	cmp	r3, #5
   81fc2:	d90d      	bls.n	81fe0 <update_comm+0x30>
    {
        ticks_comm = getTicks();
   81fc4:	4b07      	ldr	r3, [pc, #28]	; (81fe4 <update_comm+0x34>)
   81fc6:	4798      	blx	r3
   81fc8:	4602      	mov	r2, r0
   81fca:	4b07      	ldr	r3, [pc, #28]	; (81fe8 <update_comm+0x38>)
   81fcc:	601a      	str	r2, [r3, #0]
        
        memcpy(&sens_buf, &mts, sizeof(mts));
   81fce:	4b07      	ldr	r3, [pc, #28]	; (81fec <update_comm+0x3c>)
   81fd0:	881b      	ldrh	r3, [r3, #0]
   81fd2:	b29b      	uxth	r3, r3
   81fd4:	4a06      	ldr	r2, [pc, #24]	; (81ff0 <update_comm+0x40>)
   81fd6:	8013      	strh	r3, [r2, #0]
        spi_master_transfer(&sens_buf, sizeof(sens_buf));
   81fd8:	2103      	movs	r1, #3
   81fda:	4805      	ldr	r0, [pc, #20]	; (81ff0 <update_comm+0x40>)
   81fdc:	4b05      	ldr	r3, [pc, #20]	; (81ff4 <update_comm+0x44>)
   81fde:	4798      	blx	r3
    }
}
   81fe0:	bf00      	nop
   81fe2:	bd80      	pop	{r7, pc}
   81fe4:	00081f71 	.word	0x00081f71
   81fe8:	20070ff8 	.word	0x20070ff8
   81fec:	20070fec 	.word	0x20070fec
   81ff0:	20070fe8 	.word	0x20070fe8
   81ff4:	00080645 	.word	0x00080645

00081ff8 <update_battery>:

void update_battery(Bool update_forced)
{
   81ff8:	b580      	push	{r7, lr}
   81ffa:	b084      	sub	sp, #16
   81ffc:	af00      	add	r7, sp, #0
   81ffe:	4603      	mov	r3, r0
   82000:	71fb      	strb	r3, [r7, #7]
    char tmp[4];
    
    if (menu_main_scroll == 0)
   82002:	4b51      	ldr	r3, [pc, #324]	; (82148 <update_battery+0x150>)
   82004:	781b      	ldrb	r3, [r3, #0]
   82006:	2b00      	cmp	r3, #0
   82008:	f040 8099 	bne.w	8213e <update_battery+0x146>
    {
        if (update_forced)
   8200c:	79fb      	ldrb	r3, [r7, #7]
   8200e:	2b00      	cmp	r3, #0
   82010:	d043      	beq.n	8209a <update_battery+0xa2>
        {
            ticks_battery = getTicks();
   82012:	4b4e      	ldr	r3, [pc, #312]	; (8214c <update_battery+0x154>)
   82014:	4798      	blx	r3
   82016:	4602      	mov	r2, r0
   82018:	4b4d      	ldr	r3, [pc, #308]	; (82150 <update_battery+0x158>)
   8201a:	601a      	str	r2, [r3, #0]
            
            if (stm.bat_percentage >= 100)
   8201c:	4b4d      	ldr	r3, [pc, #308]	; (82154 <update_battery+0x15c>)
   8201e:	789b      	ldrb	r3, [r3, #2]
   82020:	2b63      	cmp	r3, #99	; 0x63
   82022:	d910      	bls.n	82046 <update_battery+0x4e>
            {
                sprintf(tmp, "%3u%%", stm.bat_percentage);
   82024:	4b4b      	ldr	r3, [pc, #300]	; (82154 <update_battery+0x15c>)
   82026:	789b      	ldrb	r3, [r3, #2]
   82028:	461a      	mov	r2, r3
   8202a:	f107 030c 	add.w	r3, r7, #12
   8202e:	494a      	ldr	r1, [pc, #296]	; (82158 <update_battery+0x160>)
   82030:	4618      	mov	r0, r3
   82032:	4b4a      	ldr	r3, [pc, #296]	; (8215c <update_battery+0x164>)
   82034:	4798      	blx	r3
                lcd_print_s(1, 16, tmp);
   82036:	f107 030c 	add.w	r3, r7, #12
   8203a:	461a      	mov	r2, r3
   8203c:	2110      	movs	r1, #16
   8203e:	2001      	movs	r0, #1
   82040:	4b47      	ldr	r3, [pc, #284]	; (82160 <update_battery+0x168>)
   82042:	4798      	blx	r3
   82044:	e024      	b.n	82090 <update_battery+0x98>
            }
            else if (stm.bat_percentage >= 10)
   82046:	4b43      	ldr	r3, [pc, #268]	; (82154 <update_battery+0x15c>)
   82048:	789b      	ldrb	r3, [r3, #2]
   8204a:	2b09      	cmp	r3, #9
   8204c:	d910      	bls.n	82070 <update_battery+0x78>
            {
                sprintf(tmp, "%2u%%", stm.bat_percentage);
   8204e:	4b41      	ldr	r3, [pc, #260]	; (82154 <update_battery+0x15c>)
   82050:	789b      	ldrb	r3, [r3, #2]
   82052:	461a      	mov	r2, r3
   82054:	f107 030c 	add.w	r3, r7, #12
   82058:	4942      	ldr	r1, [pc, #264]	; (82164 <update_battery+0x16c>)
   8205a:	4618      	mov	r0, r3
   8205c:	4b3f      	ldr	r3, [pc, #252]	; (8215c <update_battery+0x164>)
   8205e:	4798      	blx	r3
                lcd_print_s(1, 17, tmp);
   82060:	f107 030c 	add.w	r3, r7, #12
   82064:	461a      	mov	r2, r3
   82066:	2111      	movs	r1, #17
   82068:	2001      	movs	r0, #1
   8206a:	4b3d      	ldr	r3, [pc, #244]	; (82160 <update_battery+0x168>)
   8206c:	4798      	blx	r3
   8206e:	e00f      	b.n	82090 <update_battery+0x98>
            }
            else
            {
                sprintf(tmp, "%1u%%", stm.bat_percentage);
   82070:	4b38      	ldr	r3, [pc, #224]	; (82154 <update_battery+0x15c>)
   82072:	789b      	ldrb	r3, [r3, #2]
   82074:	461a      	mov	r2, r3
   82076:	f107 030c 	add.w	r3, r7, #12
   8207a:	493b      	ldr	r1, [pc, #236]	; (82168 <update_battery+0x170>)
   8207c:	4618      	mov	r0, r3
   8207e:	4b37      	ldr	r3, [pc, #220]	; (8215c <update_battery+0x164>)
   82080:	4798      	blx	r3
                lcd_print_s(1, 18, tmp);
   82082:	f107 030c 	add.w	r3, r7, #12
   82086:	461a      	mov	r2, r3
   82088:	2112      	movs	r1, #18
   8208a:	2001      	movs	r0, #1
   8208c:	4b34      	ldr	r3, [pc, #208]	; (82160 <update_battery+0x168>)
   8208e:	4798      	blx	r3
            }
            
            prev_battery_percentage = stm.bat_percentage;
   82090:	4b30      	ldr	r3, [pc, #192]	; (82154 <update_battery+0x15c>)
   82092:	789a      	ldrb	r2, [r3, #2]
   82094:	4b35      	ldr	r3, [pc, #212]	; (8216c <update_battery+0x174>)
   82096:	701a      	strb	r2, [r3, #0]
                
                prev_battery_percentage = stm.bat_percentage;
            }          
        }
    }
}
   82098:	e051      	b.n	8213e <update_battery+0x146>
        else if ((getTicks() - ticks_battery) >= 500)
   8209a:	4b2c      	ldr	r3, [pc, #176]	; (8214c <update_battery+0x154>)
   8209c:	4798      	blx	r3
   8209e:	4602      	mov	r2, r0
   820a0:	4b2b      	ldr	r3, [pc, #172]	; (82150 <update_battery+0x158>)
   820a2:	681b      	ldr	r3, [r3, #0]
   820a4:	1ad3      	subs	r3, r2, r3
   820a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   820aa:	d348      	bcc.n	8213e <update_battery+0x146>
            ticks_battery = getTicks();
   820ac:	4b27      	ldr	r3, [pc, #156]	; (8214c <update_battery+0x154>)
   820ae:	4798      	blx	r3
   820b0:	4602      	mov	r2, r0
   820b2:	4b27      	ldr	r3, [pc, #156]	; (82150 <update_battery+0x158>)
   820b4:	601a      	str	r2, [r3, #0]
            if (stm.bat_percentage != prev_battery_percentage)
   820b6:	4b27      	ldr	r3, [pc, #156]	; (82154 <update_battery+0x15c>)
   820b8:	789a      	ldrb	r2, [r3, #2]
   820ba:	4b2c      	ldr	r3, [pc, #176]	; (8216c <update_battery+0x174>)
   820bc:	781b      	ldrb	r3, [r3, #0]
   820be:	429a      	cmp	r2, r3
   820c0:	d03d      	beq.n	8213e <update_battery+0x146>
                if (stm.bat_percentage >= 100)
   820c2:	4b24      	ldr	r3, [pc, #144]	; (82154 <update_battery+0x15c>)
   820c4:	789b      	ldrb	r3, [r3, #2]
   820c6:	2b63      	cmp	r3, #99	; 0x63
   820c8:	d910      	bls.n	820ec <update_battery+0xf4>
                    sprintf(tmp, "%3u%%", stm.bat_percentage);
   820ca:	4b22      	ldr	r3, [pc, #136]	; (82154 <update_battery+0x15c>)
   820cc:	789b      	ldrb	r3, [r3, #2]
   820ce:	461a      	mov	r2, r3
   820d0:	f107 030c 	add.w	r3, r7, #12
   820d4:	4920      	ldr	r1, [pc, #128]	; (82158 <update_battery+0x160>)
   820d6:	4618      	mov	r0, r3
   820d8:	4b20      	ldr	r3, [pc, #128]	; (8215c <update_battery+0x164>)
   820da:	4798      	blx	r3
                    lcd_print_s(1, 16, tmp);
   820dc:	f107 030c 	add.w	r3, r7, #12
   820e0:	461a      	mov	r2, r3
   820e2:	2110      	movs	r1, #16
   820e4:	2001      	movs	r0, #1
   820e6:	4b1e      	ldr	r3, [pc, #120]	; (82160 <update_battery+0x168>)
   820e8:	4798      	blx	r3
   820ea:	e024      	b.n	82136 <update_battery+0x13e>
                else if (stm.bat_percentage >= 10)
   820ec:	4b19      	ldr	r3, [pc, #100]	; (82154 <update_battery+0x15c>)
   820ee:	789b      	ldrb	r3, [r3, #2]
   820f0:	2b09      	cmp	r3, #9
   820f2:	d910      	bls.n	82116 <update_battery+0x11e>
                    sprintf(tmp, "%2u%%", stm.bat_percentage);
   820f4:	4b17      	ldr	r3, [pc, #92]	; (82154 <update_battery+0x15c>)
   820f6:	789b      	ldrb	r3, [r3, #2]
   820f8:	461a      	mov	r2, r3
   820fa:	f107 030c 	add.w	r3, r7, #12
   820fe:	4919      	ldr	r1, [pc, #100]	; (82164 <update_battery+0x16c>)
   82100:	4618      	mov	r0, r3
   82102:	4b16      	ldr	r3, [pc, #88]	; (8215c <update_battery+0x164>)
   82104:	4798      	blx	r3
                    lcd_print_s(1, 17, tmp);
   82106:	f107 030c 	add.w	r3, r7, #12
   8210a:	461a      	mov	r2, r3
   8210c:	2111      	movs	r1, #17
   8210e:	2001      	movs	r0, #1
   82110:	4b13      	ldr	r3, [pc, #76]	; (82160 <update_battery+0x168>)
   82112:	4798      	blx	r3
   82114:	e00f      	b.n	82136 <update_battery+0x13e>
                    sprintf(tmp, "%1u%%", stm.bat_percentage);
   82116:	4b0f      	ldr	r3, [pc, #60]	; (82154 <update_battery+0x15c>)
   82118:	789b      	ldrb	r3, [r3, #2]
   8211a:	461a      	mov	r2, r3
   8211c:	f107 030c 	add.w	r3, r7, #12
   82120:	4911      	ldr	r1, [pc, #68]	; (82168 <update_battery+0x170>)
   82122:	4618      	mov	r0, r3
   82124:	4b0d      	ldr	r3, [pc, #52]	; (8215c <update_battery+0x164>)
   82126:	4798      	blx	r3
                    lcd_print_s(1, 18, tmp);
   82128:	f107 030c 	add.w	r3, r7, #12
   8212c:	461a      	mov	r2, r3
   8212e:	2112      	movs	r1, #18
   82130:	2001      	movs	r0, #1
   82132:	4b0b      	ldr	r3, [pc, #44]	; (82160 <update_battery+0x168>)
   82134:	4798      	blx	r3
                prev_battery_percentage = stm.bat_percentage;
   82136:	4b07      	ldr	r3, [pc, #28]	; (82154 <update_battery+0x15c>)
   82138:	789a      	ldrb	r2, [r3, #2]
   8213a:	4b0c      	ldr	r3, [pc, #48]	; (8216c <update_battery+0x174>)
   8213c:	701a      	strb	r2, [r3, #0]
}
   8213e:	bf00      	nop
   82140:	3710      	adds	r7, #16
   82142:	46bd      	mov	sp, r7
   82144:	bd80      	pop	{r7, pc}
   82146:	bf00      	nop
   82148:	20070fa1 	.word	0x20070fa1
   8214c:	00081f71 	.word	0x00081f71
   82150:	20071000 	.word	0x20071000
   82154:	20070ff0 	.word	0x20070ff0
   82158:	00087f78 	.word	0x00087f78
   8215c:	00083735 	.word	0x00083735
   82160:	00080f91 	.word	0x00080f91
   82164:	00087f80 	.word	0x00087f80
   82168:	00087f88 	.word	0x00087f88
   8216c:	20070fa8 	.word	0x20070fa8

00082170 <update_heartbeat>:

void update_heartbeat(void)
{
   82170:	b580      	push	{r7, lr}
   82172:	af00      	add	r7, sp, #0
    if (heart_state)
   82174:	4b20      	ldr	r3, [pc, #128]	; (821f8 <update_heartbeat+0x88>)
   82176:	781b      	ldrb	r3, [r3, #0]
   82178:	2b00      	cmp	r3, #0
   8217a:	d01d      	beq.n	821b8 <update_heartbeat+0x48>
    {
        if (getTicks() >= (ticks_heartbeat + 100))
   8217c:	4b1f      	ldr	r3, [pc, #124]	; (821fc <update_heartbeat+0x8c>)
   8217e:	4798      	blx	r3
   82180:	4602      	mov	r2, r0
   82182:	4b1f      	ldr	r3, [pc, #124]	; (82200 <update_heartbeat+0x90>)
   82184:	681b      	ldr	r3, [r3, #0]
   82186:	3364      	adds	r3, #100	; 0x64
   82188:	429a      	cmp	r2, r3
   8218a:	d333      	bcc.n	821f4 <update_heartbeat+0x84>
        {
            ticks_heartbeat = getTicks();
   8218c:	4b1b      	ldr	r3, [pc, #108]	; (821fc <update_heartbeat+0x8c>)
   8218e:	4798      	blx	r3
   82190:	4602      	mov	r2, r0
   82192:	4b1b      	ldr	r3, [pc, #108]	; (82200 <update_heartbeat+0x90>)
   82194:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 0);
   82196:	2100      	movs	r1, #0
   82198:	206a      	movs	r0, #106	; 0x6a
   8219a:	4b1a      	ldr	r3, [pc, #104]	; (82204 <update_heartbeat+0x94>)
   8219c:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 0);
   8219e:	2100      	movs	r1, #0
   821a0:	2067      	movs	r0, #103	; 0x67
   821a2:	4b18      	ldr	r3, [pc, #96]	; (82204 <update_heartbeat+0x94>)
   821a4:	4798      	blx	r3
            mts.ibit.heartbeat = 0;
   821a6:	4a18      	ldr	r2, [pc, #96]	; (82208 <update_heartbeat+0x98>)
   821a8:	7813      	ldrb	r3, [r2, #0]
   821aa:	f36f 0300 	bfc	r3, #0, #1
   821ae:	7013      	strb	r3, [r2, #0]
            heart_state = 0;
   821b0:	4b11      	ldr	r3, [pc, #68]	; (821f8 <update_heartbeat+0x88>)
   821b2:	2200      	movs	r2, #0
   821b4:	701a      	strb	r2, [r3, #0]
            ioport_set_pin_level(LED_M1, 1);
            mts.ibit.heartbeat = 1;
            heart_state = 1;
        }
    }
}
   821b6:	e01d      	b.n	821f4 <update_heartbeat+0x84>
        if (getTicks() >= (ticks_heartbeat + 900))
   821b8:	4b10      	ldr	r3, [pc, #64]	; (821fc <update_heartbeat+0x8c>)
   821ba:	4798      	blx	r3
   821bc:	4602      	mov	r2, r0
   821be:	4b10      	ldr	r3, [pc, #64]	; (82200 <update_heartbeat+0x90>)
   821c0:	681b      	ldr	r3, [r3, #0]
   821c2:	f503 7361 	add.w	r3, r3, #900	; 0x384
   821c6:	429a      	cmp	r2, r3
   821c8:	d314      	bcc.n	821f4 <update_heartbeat+0x84>
            ticks_heartbeat = getTicks();
   821ca:	4b0c      	ldr	r3, [pc, #48]	; (821fc <update_heartbeat+0x8c>)
   821cc:	4798      	blx	r3
   821ce:	4602      	mov	r2, r0
   821d0:	4b0b      	ldr	r3, [pc, #44]	; (82200 <update_heartbeat+0x90>)
   821d2:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 1);
   821d4:	2101      	movs	r1, #1
   821d6:	206a      	movs	r0, #106	; 0x6a
   821d8:	4b0a      	ldr	r3, [pc, #40]	; (82204 <update_heartbeat+0x94>)
   821da:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 1);
   821dc:	2101      	movs	r1, #1
   821de:	2067      	movs	r0, #103	; 0x67
   821e0:	4b08      	ldr	r3, [pc, #32]	; (82204 <update_heartbeat+0x94>)
   821e2:	4798      	blx	r3
            mts.ibit.heartbeat = 1;
   821e4:	4a08      	ldr	r2, [pc, #32]	; (82208 <update_heartbeat+0x98>)
   821e6:	7813      	ldrb	r3, [r2, #0]
   821e8:	f043 0301 	orr.w	r3, r3, #1
   821ec:	7013      	strb	r3, [r2, #0]
            heart_state = 1;
   821ee:	4b02      	ldr	r3, [pc, #8]	; (821f8 <update_heartbeat+0x88>)
   821f0:	2201      	movs	r2, #1
   821f2:	701a      	strb	r2, [r3, #0]
}
   821f4:	bf00      	nop
   821f6:	bd80      	pop	{r7, pc}
   821f8:	20070ff4 	.word	0x20070ff4
   821fc:	00081f71 	.word	0x00081f71
   82200:	20071004 	.word	0x20071004
   82204:	00081ee9 	.word	0x00081ee9
   82208:	20070fec 	.word	0x20070fec

0008220c <osc_enable>:
{
   8220c:	b580      	push	{r7, lr}
   8220e:	b082      	sub	sp, #8
   82210:	af00      	add	r7, sp, #0
   82212:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82214:	687b      	ldr	r3, [r7, #4]
   82216:	2b07      	cmp	r3, #7
   82218:	d831      	bhi.n	8227e <osc_enable+0x72>
   8221a:	a201      	add	r2, pc, #4	; (adr r2, 82220 <osc_enable+0x14>)
   8221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82220:	0008227d 	.word	0x0008227d
   82224:	00082241 	.word	0x00082241
   82228:	00082249 	.word	0x00082249
   8222c:	00082251 	.word	0x00082251
   82230:	00082259 	.word	0x00082259
   82234:	00082261 	.word	0x00082261
   82238:	00082269 	.word	0x00082269
   8223c:	00082273 	.word	0x00082273
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82240:	2000      	movs	r0, #0
   82242:	4b11      	ldr	r3, [pc, #68]	; (82288 <osc_enable+0x7c>)
   82244:	4798      	blx	r3
		break;
   82246:	e01a      	b.n	8227e <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   82248:	2001      	movs	r0, #1
   8224a:	4b0f      	ldr	r3, [pc, #60]	; (82288 <osc_enable+0x7c>)
   8224c:	4798      	blx	r3
		break;
   8224e:	e016      	b.n	8227e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   82250:	2000      	movs	r0, #0
   82252:	4b0e      	ldr	r3, [pc, #56]	; (8228c <osc_enable+0x80>)
   82254:	4798      	blx	r3
		break;
   82256:	e012      	b.n	8227e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   82258:	2010      	movs	r0, #16
   8225a:	4b0c      	ldr	r3, [pc, #48]	; (8228c <osc_enable+0x80>)
   8225c:	4798      	blx	r3
		break;
   8225e:	e00e      	b.n	8227e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   82260:	2020      	movs	r0, #32
   82262:	4b0a      	ldr	r3, [pc, #40]	; (8228c <osc_enable+0x80>)
   82264:	4798      	blx	r3
		break;
   82266:	e00a      	b.n	8227e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82268:	213e      	movs	r1, #62	; 0x3e
   8226a:	2000      	movs	r0, #0
   8226c:	4b08      	ldr	r3, [pc, #32]	; (82290 <osc_enable+0x84>)
   8226e:	4798      	blx	r3
		break;
   82270:	e005      	b.n	8227e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   82272:	213e      	movs	r1, #62	; 0x3e
   82274:	2001      	movs	r0, #1
   82276:	4b06      	ldr	r3, [pc, #24]	; (82290 <osc_enable+0x84>)
   82278:	4798      	blx	r3
		break;
   8227a:	e000      	b.n	8227e <osc_enable+0x72>
		break;
   8227c:	bf00      	nop
}
   8227e:	bf00      	nop
   82280:	3708      	adds	r7, #8
   82282:	46bd      	mov	sp, r7
   82284:	bd80      	pop	{r7, pc}
   82286:	bf00      	nop
   82288:	00082849 	.word	0x00082849
   8228c:	000828b5 	.word	0x000828b5
   82290:	00082925 	.word	0x00082925

00082294 <osc_is_ready>:
{
   82294:	b580      	push	{r7, lr}
   82296:	b082      	sub	sp, #8
   82298:	af00      	add	r7, sp, #0
   8229a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8229c:	687b      	ldr	r3, [r7, #4]
   8229e:	2b07      	cmp	r3, #7
   822a0:	d826      	bhi.n	822f0 <osc_is_ready+0x5c>
   822a2:	a201      	add	r2, pc, #4	; (adr r2, 822a8 <osc_is_ready+0x14>)
   822a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   822a8:	000822c9 	.word	0x000822c9
   822ac:	000822cd 	.word	0x000822cd
   822b0:	000822cd 	.word	0x000822cd
   822b4:	000822df 	.word	0x000822df
   822b8:	000822df 	.word	0x000822df
   822bc:	000822df 	.word	0x000822df
   822c0:	000822df 	.word	0x000822df
   822c4:	000822df 	.word	0x000822df
		return 1;
   822c8:	2301      	movs	r3, #1
   822ca:	e012      	b.n	822f2 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   822cc:	4b0b      	ldr	r3, [pc, #44]	; (822fc <osc_is_ready+0x68>)
   822ce:	4798      	blx	r3
   822d0:	4603      	mov	r3, r0
   822d2:	2b00      	cmp	r3, #0
   822d4:	bf14      	ite	ne
   822d6:	2301      	movne	r3, #1
   822d8:	2300      	moveq	r3, #0
   822da:	b2db      	uxtb	r3, r3
   822dc:	e009      	b.n	822f2 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   822de:	4b08      	ldr	r3, [pc, #32]	; (82300 <osc_is_ready+0x6c>)
   822e0:	4798      	blx	r3
   822e2:	4603      	mov	r3, r0
   822e4:	2b00      	cmp	r3, #0
   822e6:	bf14      	ite	ne
   822e8:	2301      	movne	r3, #1
   822ea:	2300      	moveq	r3, #0
   822ec:	b2db      	uxtb	r3, r3
   822ee:	e000      	b.n	822f2 <osc_is_ready+0x5e>
	return 0;
   822f0:	2300      	movs	r3, #0
}
   822f2:	4618      	mov	r0, r3
   822f4:	3708      	adds	r7, #8
   822f6:	46bd      	mov	sp, r7
   822f8:	bd80      	pop	{r7, pc}
   822fa:	bf00      	nop
   822fc:	00082881 	.word	0x00082881
   82300:	0008299d 	.word	0x0008299d

00082304 <osc_get_rate>:
{
   82304:	b480      	push	{r7}
   82306:	b083      	sub	sp, #12
   82308:	af00      	add	r7, sp, #0
   8230a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8230c:	687b      	ldr	r3, [r7, #4]
   8230e:	2b07      	cmp	r3, #7
   82310:	d825      	bhi.n	8235e <osc_get_rate+0x5a>
   82312:	a201      	add	r2, pc, #4	; (adr r2, 82318 <osc_get_rate+0x14>)
   82314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82318:	00082339 	.word	0x00082339
   8231c:	0008233f 	.word	0x0008233f
   82320:	00082345 	.word	0x00082345
   82324:	0008234b 	.word	0x0008234b
   82328:	0008234f 	.word	0x0008234f
   8232c:	00082353 	.word	0x00082353
   82330:	00082357 	.word	0x00082357
   82334:	0008235b 	.word	0x0008235b
		return OSC_SLCK_32K_RC_HZ;
   82338:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8233c:	e010      	b.n	82360 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8233e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82342:	e00d      	b.n	82360 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   82344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82348:	e00a      	b.n	82360 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   8234a:	4b08      	ldr	r3, [pc, #32]	; (8236c <osc_get_rate+0x68>)
   8234c:	e008      	b.n	82360 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8234e:	4b08      	ldr	r3, [pc, #32]	; (82370 <osc_get_rate+0x6c>)
   82350:	e006      	b.n	82360 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   82352:	4b08      	ldr	r3, [pc, #32]	; (82374 <osc_get_rate+0x70>)
   82354:	e004      	b.n	82360 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   82356:	4b07      	ldr	r3, [pc, #28]	; (82374 <osc_get_rate+0x70>)
   82358:	e002      	b.n	82360 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   8235a:	4b06      	ldr	r3, [pc, #24]	; (82374 <osc_get_rate+0x70>)
   8235c:	e000      	b.n	82360 <osc_get_rate+0x5c>
	return 0;
   8235e:	2300      	movs	r3, #0
}
   82360:	4618      	mov	r0, r3
   82362:	370c      	adds	r7, #12
   82364:	46bd      	mov	sp, r7
   82366:	bc80      	pop	{r7}
   82368:	4770      	bx	lr
   8236a:	bf00      	nop
   8236c:	003d0900 	.word	0x003d0900
   82370:	007a1200 	.word	0x007a1200
   82374:	00b71b00 	.word	0x00b71b00

00082378 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   82378:	b580      	push	{r7, lr}
   8237a:	b082      	sub	sp, #8
   8237c:	af00      	add	r7, sp, #0
   8237e:	4603      	mov	r3, r0
   82380:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   82382:	bf00      	nop
   82384:	79fb      	ldrb	r3, [r7, #7]
   82386:	4618      	mov	r0, r3
   82388:	4b05      	ldr	r3, [pc, #20]	; (823a0 <osc_wait_ready+0x28>)
   8238a:	4798      	blx	r3
   8238c:	4603      	mov	r3, r0
   8238e:	f083 0301 	eor.w	r3, r3, #1
   82392:	b2db      	uxtb	r3, r3
   82394:	2b00      	cmp	r3, #0
   82396:	d1f5      	bne.n	82384 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   82398:	bf00      	nop
   8239a:	3708      	adds	r7, #8
   8239c:	46bd      	mov	sp, r7
   8239e:	bd80      	pop	{r7, pc}
   823a0:	00082295 	.word	0x00082295

000823a4 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   823a4:	b580      	push	{r7, lr}
   823a6:	b086      	sub	sp, #24
   823a8:	af00      	add	r7, sp, #0
   823aa:	60f8      	str	r0, [r7, #12]
   823ac:	607a      	str	r2, [r7, #4]
   823ae:	603b      	str	r3, [r7, #0]
   823b0:	460b      	mov	r3, r1
   823b2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   823b4:	687b      	ldr	r3, [r7, #4]
   823b6:	2b00      	cmp	r3, #0
   823b8:	d107      	bne.n	823ca <pll_config_init+0x26>
   823ba:	683b      	ldr	r3, [r7, #0]
   823bc:	2b00      	cmp	r3, #0
   823be:	d104      	bne.n	823ca <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   823c0:	68fb      	ldr	r3, [r7, #12]
   823c2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   823c6:	601a      	str	r2, [r3, #0]
   823c8:	e019      	b.n	823fe <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   823ca:	7afb      	ldrb	r3, [r7, #11]
   823cc:	4618      	mov	r0, r3
   823ce:	4b0e      	ldr	r3, [pc, #56]	; (82408 <pll_config_init+0x64>)
   823d0:	4798      	blx	r3
   823d2:	4602      	mov	r2, r0
   823d4:	687b      	ldr	r3, [r7, #4]
   823d6:	fbb2 f3f3 	udiv	r3, r2, r3
   823da:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   823dc:	697b      	ldr	r3, [r7, #20]
   823de:	683a      	ldr	r2, [r7, #0]
   823e0:	fb02 f303 	mul.w	r3, r2, r3
   823e4:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   823e6:	683b      	ldr	r3, [r7, #0]
   823e8:	3b01      	subs	r3, #1
   823ea:	041a      	lsls	r2, r3, #16
   823ec:	4b07      	ldr	r3, [pc, #28]	; (8240c <pll_config_init+0x68>)
   823ee:	4013      	ands	r3, r2
   823f0:	687a      	ldr	r2, [r7, #4]
   823f2:	b2d2      	uxtb	r2, r2
   823f4:	4313      	orrs	r3, r2
   823f6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   823fa:	68fb      	ldr	r3, [r7, #12]
   823fc:	601a      	str	r2, [r3, #0]
	}
}
   823fe:	bf00      	nop
   82400:	3718      	adds	r7, #24
   82402:	46bd      	mov	sp, r7
   82404:	bd80      	pop	{r7, pc}
   82406:	bf00      	nop
   82408:	00082305 	.word	0x00082305
   8240c:	07ff0000 	.word	0x07ff0000

00082410 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   82410:	b580      	push	{r7, lr}
   82412:	b082      	sub	sp, #8
   82414:	af00      	add	r7, sp, #0
   82416:	6078      	str	r0, [r7, #4]
   82418:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8241a:	683b      	ldr	r3, [r7, #0]
   8241c:	2b00      	cmp	r3, #0
   8241e:	d108      	bne.n	82432 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82420:	4b09      	ldr	r3, [pc, #36]	; (82448 <pll_enable+0x38>)
   82422:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82424:	4a09      	ldr	r2, [pc, #36]	; (8244c <pll_enable+0x3c>)
   82426:	687b      	ldr	r3, [r7, #4]
   82428:	681b      	ldr	r3, [r3, #0]
   8242a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8242e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   82430:	e005      	b.n	8243e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82432:	4a06      	ldr	r2, [pc, #24]	; (8244c <pll_enable+0x3c>)
   82434:	687b      	ldr	r3, [r7, #4]
   82436:	681b      	ldr	r3, [r3, #0]
   82438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8243c:	61d3      	str	r3, [r2, #28]
}
   8243e:	bf00      	nop
   82440:	3708      	adds	r7, #8
   82442:	46bd      	mov	sp, r7
   82444:	bd80      	pop	{r7, pc}
   82446:	bf00      	nop
   82448:	000829b5 	.word	0x000829b5
   8244c:	400e0600 	.word	0x400e0600

00082450 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   82450:	b580      	push	{r7, lr}
   82452:	b082      	sub	sp, #8
   82454:	af00      	add	r7, sp, #0
   82456:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82458:	687b      	ldr	r3, [r7, #4]
   8245a:	2b00      	cmp	r3, #0
   8245c:	d103      	bne.n	82466 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8245e:	4b05      	ldr	r3, [pc, #20]	; (82474 <pll_is_locked+0x24>)
   82460:	4798      	blx	r3
   82462:	4603      	mov	r3, r0
   82464:	e002      	b.n	8246c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   82466:	4b04      	ldr	r3, [pc, #16]	; (82478 <pll_is_locked+0x28>)
   82468:	4798      	blx	r3
   8246a:	4603      	mov	r3, r0
	}
}
   8246c:	4618      	mov	r0, r3
   8246e:	3708      	adds	r7, #8
   82470:	46bd      	mov	sp, r7
   82472:	bd80      	pop	{r7, pc}
   82474:	000829cd 	.word	0x000829cd
   82478:	000829e5 	.word	0x000829e5

0008247c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8247c:	b580      	push	{r7, lr}
   8247e:	b082      	sub	sp, #8
   82480:	af00      	add	r7, sp, #0
   82482:	4603      	mov	r3, r0
   82484:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   82486:	79fb      	ldrb	r3, [r7, #7]
   82488:	3b03      	subs	r3, #3
   8248a:	2b04      	cmp	r3, #4
   8248c:	d808      	bhi.n	824a0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8248e:	79fb      	ldrb	r3, [r7, #7]
   82490:	4618      	mov	r0, r3
   82492:	4b06      	ldr	r3, [pc, #24]	; (824ac <pll_enable_source+0x30>)
   82494:	4798      	blx	r3
		osc_wait_ready(e_src);
   82496:	79fb      	ldrb	r3, [r7, #7]
   82498:	4618      	mov	r0, r3
   8249a:	4b05      	ldr	r3, [pc, #20]	; (824b0 <pll_enable_source+0x34>)
   8249c:	4798      	blx	r3
		break;
   8249e:	e000      	b.n	824a2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   824a0:	bf00      	nop
	}
}
   824a2:	bf00      	nop
   824a4:	3708      	adds	r7, #8
   824a6:	46bd      	mov	sp, r7
   824a8:	bd80      	pop	{r7, pc}
   824aa:	bf00      	nop
   824ac:	0008220d 	.word	0x0008220d
   824b0:	00082379 	.word	0x00082379

000824b4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   824b4:	b580      	push	{r7, lr}
   824b6:	b082      	sub	sp, #8
   824b8:	af00      	add	r7, sp, #0
   824ba:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   824bc:	bf00      	nop
   824be:	6878      	ldr	r0, [r7, #4]
   824c0:	4b04      	ldr	r3, [pc, #16]	; (824d4 <pll_wait_for_lock+0x20>)
   824c2:	4798      	blx	r3
   824c4:	4603      	mov	r3, r0
   824c6:	2b00      	cmp	r3, #0
   824c8:	d0f9      	beq.n	824be <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   824ca:	2300      	movs	r3, #0
}
   824cc:	4618      	mov	r0, r3
   824ce:	3708      	adds	r7, #8
   824d0:	46bd      	mov	sp, r7
   824d2:	bd80      	pop	{r7, pc}
   824d4:	00082451 	.word	0x00082451

000824d8 <sysclk_get_main_hz>:
{
   824d8:	b580      	push	{r7, lr}
   824da:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   824dc:	2006      	movs	r0, #6
   824de:	4b04      	ldr	r3, [pc, #16]	; (824f0 <sysclk_get_main_hz+0x18>)
   824e0:	4798      	blx	r3
   824e2:	4602      	mov	r2, r0
   824e4:	4613      	mov	r3, r2
   824e6:	00db      	lsls	r3, r3, #3
   824e8:	1a9b      	subs	r3, r3, r2
   824ea:	005b      	lsls	r3, r3, #1
}
   824ec:	4618      	mov	r0, r3
   824ee:	bd80      	pop	{r7, pc}
   824f0:	00082305 	.word	0x00082305

000824f4 <sysclk_get_cpu_hz>:
{
   824f4:	b580      	push	{r7, lr}
   824f6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   824f8:	4b02      	ldr	r3, [pc, #8]	; (82504 <sysclk_get_cpu_hz+0x10>)
   824fa:	4798      	blx	r3
   824fc:	4603      	mov	r3, r0
   824fe:	085b      	lsrs	r3, r3, #1
}
   82500:	4618      	mov	r0, r3
   82502:	bd80      	pop	{r7, pc}
   82504:	000824d9 	.word	0x000824d9

00082508 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82508:	b590      	push	{r4, r7, lr}
   8250a:	b083      	sub	sp, #12
   8250c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8250e:	4811      	ldr	r0, [pc, #68]	; (82554 <sysclk_init+0x4c>)
   82510:	4b11      	ldr	r3, [pc, #68]	; (82558 <sysclk_init+0x50>)
   82512:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   82514:	2006      	movs	r0, #6
   82516:	4b11      	ldr	r3, [pc, #68]	; (8255c <sysclk_init+0x54>)
   82518:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   8251a:	1d38      	adds	r0, r7, #4
   8251c:	230e      	movs	r3, #14
   8251e:	2201      	movs	r2, #1
   82520:	2106      	movs	r1, #6
   82522:	4c0f      	ldr	r4, [pc, #60]	; (82560 <sysclk_init+0x58>)
   82524:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   82526:	1d3b      	adds	r3, r7, #4
   82528:	2100      	movs	r1, #0
   8252a:	4618      	mov	r0, r3
   8252c:	4b0d      	ldr	r3, [pc, #52]	; (82564 <sysclk_init+0x5c>)
   8252e:	4798      	blx	r3
		pll_wait_for_lock(0);
   82530:	2000      	movs	r0, #0
   82532:	4b0d      	ldr	r3, [pc, #52]	; (82568 <sysclk_init+0x60>)
   82534:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82536:	2010      	movs	r0, #16
   82538:	4b0c      	ldr	r3, [pc, #48]	; (8256c <sysclk_init+0x64>)
   8253a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8253c:	4b0c      	ldr	r3, [pc, #48]	; (82570 <sysclk_init+0x68>)
   8253e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82540:	4b0c      	ldr	r3, [pc, #48]	; (82574 <sysclk_init+0x6c>)
   82542:	4798      	blx	r3
   82544:	4603      	mov	r3, r0
   82546:	4618      	mov	r0, r3
   82548:	4b03      	ldr	r3, [pc, #12]	; (82558 <sysclk_init+0x50>)
   8254a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8254c:	bf00      	nop
   8254e:	370c      	adds	r7, #12
   82550:	46bd      	mov	sp, r7
   82552:	bd90      	pop	{r4, r7, pc}
   82554:	0501bd00 	.word	0x0501bd00
   82558:	200700d1 	.word	0x200700d1
   8255c:	0008247d 	.word	0x0008247d
   82560:	000823a5 	.word	0x000823a5
   82564:	00082411 	.word	0x00082411
   82568:	000824b5 	.word	0x000824b5
   8256c:	000827c9 	.word	0x000827c9
   82570:	00082f01 	.word	0x00082f01
   82574:	000824f5 	.word	0x000824f5

00082578 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   82578:	b580      	push	{r7, lr}
   8257a:	b082      	sub	sp, #8
   8257c:	af00      	add	r7, sp, #0
   8257e:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   82580:	6878      	ldr	r0, [r7, #4]
   82582:	4b03      	ldr	r3, [pc, #12]	; (82590 <dmac_init+0x18>)
   82584:	4798      	blx	r3
}
   82586:	bf00      	nop
   82588:	3708      	adds	r7, #8
   8258a:	46bd      	mov	sp, r7
   8258c:	bd80      	pop	{r7, pc}
   8258e:	bf00      	nop
   82590:	000825d3 	.word	0x000825d3

00082594 <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   82594:	b480      	push	{r7}
   82596:	b083      	sub	sp, #12
   82598:	af00      	add	r7, sp, #0
   8259a:	6078      	str	r0, [r7, #4]
   8259c:	460b      	mov	r3, r1
   8259e:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   825a0:	687b      	ldr	r3, [r7, #4]
   825a2:	681b      	ldr	r3, [r3, #0]
   825a4:	f023 0210 	bic.w	r2, r3, #16
   825a8:	78fb      	ldrb	r3, [r7, #3]
   825aa:	431a      	orrs	r2, r3
   825ac:	687b      	ldr	r3, [r7, #4]
   825ae:	601a      	str	r2, [r3, #0]
}
   825b0:	bf00      	nop
   825b2:	370c      	adds	r7, #12
   825b4:	46bd      	mov	sp, r7
   825b6:	bc80      	pop	{r7}
   825b8:	4770      	bx	lr

000825ba <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   825ba:	b480      	push	{r7}
   825bc:	b083      	sub	sp, #12
   825be:	af00      	add	r7, sp, #0
   825c0:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   825c2:	687b      	ldr	r3, [r7, #4]
   825c4:	2201      	movs	r2, #1
   825c6:	605a      	str	r2, [r3, #4]
}
   825c8:	bf00      	nop
   825ca:	370c      	adds	r7, #12
   825cc:	46bd      	mov	sp, r7
   825ce:	bc80      	pop	{r7}
   825d0:	4770      	bx	lr

000825d2 <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   825d2:	b480      	push	{r7}
   825d4:	b083      	sub	sp, #12
   825d6:	af00      	add	r7, sp, #0
   825d8:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   825da:	687b      	ldr	r3, [r7, #4]
   825dc:	685b      	ldr	r3, [r3, #4]
   825de:	f023 0201 	bic.w	r2, r3, #1
   825e2:	687b      	ldr	r3, [r7, #4]
   825e4:	605a      	str	r2, [r3, #4]
}
   825e6:	bf00      	nop
   825e8:	370c      	adds	r7, #12
   825ea:	46bd      	mov	sp, r7
   825ec:	bc80      	pop	{r7}
   825ee:	4770      	bx	lr

000825f0 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   825f0:	b480      	push	{r7}
   825f2:	b083      	sub	sp, #12
   825f4:	af00      	add	r7, sp, #0
   825f6:	6078      	str	r0, [r7, #4]
   825f8:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   825fa:	687b      	ldr	r3, [r7, #4]
   825fc:	683a      	ldr	r2, [r7, #0]
   825fe:	619a      	str	r2, [r3, #24]
}
   82600:	bf00      	nop
   82602:	370c      	adds	r7, #12
   82604:	46bd      	mov	sp, r7
   82606:	bc80      	pop	{r7}
   82608:	4770      	bx	lr

0008260a <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   8260a:	b480      	push	{r7}
   8260c:	b083      	sub	sp, #12
   8260e:	af00      	add	r7, sp, #0
   82610:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   82612:	687b      	ldr	r3, [r7, #4]
   82614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   82616:	4618      	mov	r0, r3
   82618:	370c      	adds	r7, #12
   8261a:	46bd      	mov	sp, r7
   8261c:	bc80      	pop	{r7}
   8261e:	4770      	bx	lr

00082620 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   82620:	b480      	push	{r7}
   82622:	b083      	sub	sp, #12
   82624:	af00      	add	r7, sp, #0
   82626:	6078      	str	r0, [r7, #4]
   82628:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   8262a:	2201      	movs	r2, #1
   8262c:	683b      	ldr	r3, [r7, #0]
   8262e:	409a      	lsls	r2, r3
   82630:	687b      	ldr	r3, [r7, #4]
   82632:	629a      	str	r2, [r3, #40]	; 0x28
}
   82634:	bf00      	nop
   82636:	370c      	adds	r7, #12
   82638:	46bd      	mov	sp, r7
   8263a:	bc80      	pop	{r7}
   8263c:	4770      	bx	lr

0008263e <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   8263e:	b480      	push	{r7}
   82640:	b083      	sub	sp, #12
   82642:	af00      	add	r7, sp, #0
   82644:	6078      	str	r0, [r7, #4]
   82646:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   82648:	2201      	movs	r2, #1
   8264a:	683b      	ldr	r3, [r7, #0]
   8264c:	409a      	lsls	r2, r3
   8264e:	687b      	ldr	r3, [r7, #4]
   82650:	62da      	str	r2, [r3, #44]	; 0x2c
}
   82652:	bf00      	nop
   82654:	370c      	adds	r7, #12
   82656:	46bd      	mov	sp, r7
   82658:	bc80      	pop	{r7}
   8265a:	4770      	bx	lr

0008265c <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   8265c:	b480      	push	{r7}
   8265e:	b085      	sub	sp, #20
   82660:	af00      	add	r7, sp, #0
   82662:	60f8      	str	r0, [r7, #12]
   82664:	60b9      	str	r1, [r7, #8]
   82666:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   82668:	68f9      	ldr	r1, [r7, #12]
   8266a:	68ba      	ldr	r2, [r7, #8]
   8266c:	4613      	mov	r3, r2
   8266e:	009b      	lsls	r3, r3, #2
   82670:	4413      	add	r3, r2
   82672:	00db      	lsls	r3, r3, #3
   82674:	440b      	add	r3, r1
   82676:	333c      	adds	r3, #60	; 0x3c
   82678:	687a      	ldr	r2, [r7, #4]
   8267a:	601a      	str	r2, [r3, #0]
}
   8267c:	bf00      	nop
   8267e:	3714      	adds	r7, #20
   82680:	46bd      	mov	sp, r7
   82682:	bc80      	pop	{r7}
   82684:	4770      	bx	lr

00082686 <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   82686:	b480      	push	{r7}
   82688:	b085      	sub	sp, #20
   8268a:	af00      	add	r7, sp, #0
   8268c:	60f8      	str	r0, [r7, #12]
   8268e:	60b9      	str	r1, [r7, #8]
   82690:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   82692:	68f9      	ldr	r1, [r7, #12]
   82694:	68ba      	ldr	r2, [r7, #8]
   82696:	4613      	mov	r3, r2
   82698:	009b      	lsls	r3, r3, #2
   8269a:	4413      	add	r3, r2
   8269c:	00db      	lsls	r3, r3, #3
   8269e:	440b      	add	r3, r1
   826a0:	3340      	adds	r3, #64	; 0x40
   826a2:	687a      	ldr	r2, [r7, #4]
   826a4:	601a      	str	r2, [r3, #0]
}
   826a6:	bf00      	nop
   826a8:	3714      	adds	r7, #20
   826aa:	46bd      	mov	sp, r7
   826ac:	bc80      	pop	{r7}
   826ae:	4770      	bx	lr

000826b0 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   826b0:	b480      	push	{r7}
   826b2:	b085      	sub	sp, #20
   826b4:	af00      	add	r7, sp, #0
   826b6:	60f8      	str	r0, [r7, #12]
   826b8:	60b9      	str	r1, [r7, #8]
   826ba:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   826bc:	68f9      	ldr	r1, [r7, #12]
   826be:	68ba      	ldr	r2, [r7, #8]
   826c0:	4613      	mov	r3, r2
   826c2:	009b      	lsls	r3, r3, #2
   826c4:	4413      	add	r3, r2
   826c6:	00db      	lsls	r3, r3, #3
   826c8:	440b      	add	r3, r1
   826ca:	3344      	adds	r3, #68	; 0x44
   826cc:	687a      	ldr	r2, [r7, #4]
   826ce:	601a      	str	r2, [r3, #0]
}
   826d0:	bf00      	nop
   826d2:	3714      	adds	r7, #20
   826d4:	46bd      	mov	sp, r7
   826d6:	bc80      	pop	{r7}
   826d8:	4770      	bx	lr

000826da <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   826da:	b480      	push	{r7}
   826dc:	b085      	sub	sp, #20
   826de:	af00      	add	r7, sp, #0
   826e0:	60f8      	str	r0, [r7, #12]
   826e2:	60b9      	str	r1, [r7, #8]
   826e4:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   826e6:	68f9      	ldr	r1, [r7, #12]
   826e8:	68ba      	ldr	r2, [r7, #8]
   826ea:	4613      	mov	r3, r2
   826ec:	009b      	lsls	r3, r3, #2
   826ee:	4413      	add	r3, r2
   826f0:	00db      	lsls	r3, r3, #3
   826f2:	440b      	add	r3, r1
   826f4:	3348      	adds	r3, #72	; 0x48
   826f6:	687a      	ldr	r2, [r7, #4]
   826f8:	601a      	str	r2, [r3, #0]
}
   826fa:	bf00      	nop
   826fc:	3714      	adds	r7, #20
   826fe:	46bd      	mov	sp, r7
   82700:	bc80      	pop	{r7}
   82702:	4770      	bx	lr

00082704 <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   82704:	b480      	push	{r7}
   82706:	b085      	sub	sp, #20
   82708:	af00      	add	r7, sp, #0
   8270a:	60f8      	str	r0, [r7, #12]
   8270c:	60b9      	str	r1, [r7, #8]
   8270e:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   82710:	68f9      	ldr	r1, [r7, #12]
   82712:	68ba      	ldr	r2, [r7, #8]
   82714:	4613      	mov	r3, r2
   82716:	009b      	lsls	r3, r3, #2
   82718:	4413      	add	r3, r2
   8271a:	00db      	lsls	r3, r3, #3
   8271c:	440b      	add	r3, r1
   8271e:	334c      	adds	r3, #76	; 0x4c
   82720:	687a      	ldr	r2, [r7, #4]
   82722:	601a      	str	r2, [r3, #0]
}
   82724:	bf00      	nop
   82726:	3714      	adds	r7, #20
   82728:	46bd      	mov	sp, r7
   8272a:	bc80      	pop	{r7}
   8272c:	4770      	bx	lr

0008272e <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   8272e:	b480      	push	{r7}
   82730:	b085      	sub	sp, #20
   82732:	af00      	add	r7, sp, #0
   82734:	60f8      	str	r0, [r7, #12]
   82736:	60b9      	str	r1, [r7, #8]
   82738:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   8273a:	68f9      	ldr	r1, [r7, #12]
   8273c:	68ba      	ldr	r2, [r7, #8]
   8273e:	4613      	mov	r3, r2
   82740:	009b      	lsls	r3, r3, #2
   82742:	4413      	add	r3, r2
   82744:	00db      	lsls	r3, r3, #3
   82746:	440b      	add	r3, r1
   82748:	3350      	adds	r3, #80	; 0x50
   8274a:	687a      	ldr	r2, [r7, #4]
   8274c:	601a      	str	r2, [r3, #0]
}
   8274e:	bf00      	nop
   82750:	3714      	adds	r7, #20
   82752:	46bd      	mov	sp, r7
   82754:	bc80      	pop	{r7}
   82756:	4770      	bx	lr

00082758 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   82758:	b580      	push	{r7, lr}
   8275a:	b084      	sub	sp, #16
   8275c:	af00      	add	r7, sp, #0
   8275e:	60f8      	str	r0, [r7, #12]
   82760:	60b9      	str	r1, [r7, #8]
   82762:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   82764:	68fb      	ldr	r3, [r7, #12]
   82766:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   82768:	687b      	ldr	r3, [r7, #4]
   8276a:	681b      	ldr	r3, [r3, #0]
   8276c:	461a      	mov	r2, r3
   8276e:	68b9      	ldr	r1, [r7, #8]
   82770:	68f8      	ldr	r0, [r7, #12]
   82772:	4b10      	ldr	r3, [pc, #64]	; (827b4 <dmac_channel_single_buf_transfer_init+0x5c>)
   82774:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   82776:	687b      	ldr	r3, [r7, #4]
   82778:	685b      	ldr	r3, [r3, #4]
   8277a:	461a      	mov	r2, r3
   8277c:	68b9      	ldr	r1, [r7, #8]
   8277e:	68f8      	ldr	r0, [r7, #12]
   82780:	4b0d      	ldr	r3, [pc, #52]	; (827b8 <dmac_channel_single_buf_transfer_init+0x60>)
   82782:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   82784:	2200      	movs	r2, #0
   82786:	68b9      	ldr	r1, [r7, #8]
   82788:	68f8      	ldr	r0, [r7, #12]
   8278a:	4b0c      	ldr	r3, [pc, #48]	; (827bc <dmac_channel_single_buf_transfer_init+0x64>)
   8278c:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   8278e:	687b      	ldr	r3, [r7, #4]
   82790:	689b      	ldr	r3, [r3, #8]
   82792:	461a      	mov	r2, r3
   82794:	68b9      	ldr	r1, [r7, #8]
   82796:	68f8      	ldr	r0, [r7, #12]
   82798:	4b09      	ldr	r3, [pc, #36]	; (827c0 <dmac_channel_single_buf_transfer_init+0x68>)
   8279a:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   8279c:	687b      	ldr	r3, [r7, #4]
   8279e:	68db      	ldr	r3, [r3, #12]
   827a0:	461a      	mov	r2, r3
   827a2:	68b9      	ldr	r1, [r7, #8]
   827a4:	68f8      	ldr	r0, [r7, #12]
   827a6:	4b07      	ldr	r3, [pc, #28]	; (827c4 <dmac_channel_single_buf_transfer_init+0x6c>)
   827a8:	4798      	blx	r3
}
   827aa:	bf00      	nop
   827ac:	3710      	adds	r7, #16
   827ae:	46bd      	mov	sp, r7
   827b0:	bd80      	pop	{r7, pc}
   827b2:	bf00      	nop
   827b4:	0008265d 	.word	0x0008265d
   827b8:	00082687 	.word	0x00082687
   827bc:	000826b1 	.word	0x000826b1
   827c0:	000826db 	.word	0x000826db
   827c4:	00082705 	.word	0x00082705

000827c8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   827c8:	b480      	push	{r7}
   827ca:	b085      	sub	sp, #20
   827cc:	af00      	add	r7, sp, #0
   827ce:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   827d0:	491c      	ldr	r1, [pc, #112]	; (82844 <pmc_switch_mck_to_pllack+0x7c>)
   827d2:	4b1c      	ldr	r3, [pc, #112]	; (82844 <pmc_switch_mck_to_pllack+0x7c>)
   827d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   827d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   827da:	687b      	ldr	r3, [r7, #4]
   827dc:	4313      	orrs	r3, r2
   827de:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   827e4:	60fb      	str	r3, [r7, #12]
   827e6:	e007      	b.n	827f8 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   827e8:	68fb      	ldr	r3, [r7, #12]
   827ea:	2b00      	cmp	r3, #0
   827ec:	d101      	bne.n	827f2 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   827ee:	2301      	movs	r3, #1
   827f0:	e023      	b.n	8283a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   827f2:	68fb      	ldr	r3, [r7, #12]
   827f4:	3b01      	subs	r3, #1
   827f6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827f8:	4b12      	ldr	r3, [pc, #72]	; (82844 <pmc_switch_mck_to_pllack+0x7c>)
   827fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   827fc:	f003 0308 	and.w	r3, r3, #8
   82800:	2b00      	cmp	r3, #0
   82802:	d0f1      	beq.n	827e8 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82804:	4a0f      	ldr	r2, [pc, #60]	; (82844 <pmc_switch_mck_to_pllack+0x7c>)
   82806:	4b0f      	ldr	r3, [pc, #60]	; (82844 <pmc_switch_mck_to_pllack+0x7c>)
   82808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8280a:	f023 0303 	bic.w	r3, r3, #3
   8280e:	f043 0302 	orr.w	r3, r3, #2
   82812:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82814:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82818:	60fb      	str	r3, [r7, #12]
   8281a:	e007      	b.n	8282c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8281c:	68fb      	ldr	r3, [r7, #12]
   8281e:	2b00      	cmp	r3, #0
   82820:	d101      	bne.n	82826 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   82822:	2301      	movs	r3, #1
   82824:	e009      	b.n	8283a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   82826:	68fb      	ldr	r3, [r7, #12]
   82828:	3b01      	subs	r3, #1
   8282a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8282c:	4b05      	ldr	r3, [pc, #20]	; (82844 <pmc_switch_mck_to_pllack+0x7c>)
   8282e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82830:	f003 0308 	and.w	r3, r3, #8
   82834:	2b00      	cmp	r3, #0
   82836:	d0f1      	beq.n	8281c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   82838:	2300      	movs	r3, #0
}
   8283a:	4618      	mov	r0, r3
   8283c:	3714      	adds	r7, #20
   8283e:	46bd      	mov	sp, r7
   82840:	bc80      	pop	{r7}
   82842:	4770      	bx	lr
   82844:	400e0600 	.word	0x400e0600

00082848 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   82848:	b480      	push	{r7}
   8284a:	b083      	sub	sp, #12
   8284c:	af00      	add	r7, sp, #0
   8284e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82850:	687b      	ldr	r3, [r7, #4]
   82852:	2b01      	cmp	r3, #1
   82854:	d107      	bne.n	82866 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   82856:	4a08      	ldr	r2, [pc, #32]	; (82878 <pmc_switch_sclk_to_32kxtal+0x30>)
   82858:	4b07      	ldr	r3, [pc, #28]	; (82878 <pmc_switch_sclk_to_32kxtal+0x30>)
   8285a:	689b      	ldr	r3, [r3, #8]
   8285c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82864:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   82866:	4b04      	ldr	r3, [pc, #16]	; (82878 <pmc_switch_sclk_to_32kxtal+0x30>)
   82868:	4a04      	ldr	r2, [pc, #16]	; (8287c <pmc_switch_sclk_to_32kxtal+0x34>)
   8286a:	601a      	str	r2, [r3, #0]
}
   8286c:	bf00      	nop
   8286e:	370c      	adds	r7, #12
   82870:	46bd      	mov	sp, r7
   82872:	bc80      	pop	{r7}
   82874:	4770      	bx	lr
   82876:	bf00      	nop
   82878:	400e1a10 	.word	0x400e1a10
   8287c:	a5000008 	.word	0xa5000008

00082880 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   82880:	b480      	push	{r7}
   82882:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82884:	4b09      	ldr	r3, [pc, #36]	; (828ac <pmc_osc_is_ready_32kxtal+0x2c>)
   82886:	695b      	ldr	r3, [r3, #20]
   82888:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   8288c:	2b00      	cmp	r3, #0
   8288e:	d007      	beq.n	828a0 <pmc_osc_is_ready_32kxtal+0x20>
   82890:	4b07      	ldr	r3, [pc, #28]	; (828b0 <pmc_osc_is_ready_32kxtal+0x30>)
   82892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82894:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82898:	2b00      	cmp	r3, #0
   8289a:	d001      	beq.n	828a0 <pmc_osc_is_ready_32kxtal+0x20>
   8289c:	2301      	movs	r3, #1
   8289e:	e000      	b.n	828a2 <pmc_osc_is_ready_32kxtal+0x22>
   828a0:	2300      	movs	r3, #0
}
   828a2:	4618      	mov	r0, r3
   828a4:	46bd      	mov	sp, r7
   828a6:	bc80      	pop	{r7}
   828a8:	4770      	bx	lr
   828aa:	bf00      	nop
   828ac:	400e1a10 	.word	0x400e1a10
   828b0:	400e0600 	.word	0x400e0600

000828b4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   828b4:	b480      	push	{r7}
   828b6:	b083      	sub	sp, #12
   828b8:	af00      	add	r7, sp, #0
   828ba:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   828bc:	4a18      	ldr	r2, [pc, #96]	; (82920 <pmc_switch_mainck_to_fastrc+0x6c>)
   828be:	4b18      	ldr	r3, [pc, #96]	; (82920 <pmc_switch_mainck_to_fastrc+0x6c>)
   828c0:	6a1b      	ldr	r3, [r3, #32]
   828c2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   828c6:	f043 0308 	orr.w	r3, r3, #8
   828ca:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   828cc:	bf00      	nop
   828ce:	4b14      	ldr	r3, [pc, #80]	; (82920 <pmc_switch_mainck_to_fastrc+0x6c>)
   828d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   828d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   828d6:	2b00      	cmp	r3, #0
   828d8:	d0f9      	beq.n	828ce <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   828da:	4911      	ldr	r1, [pc, #68]	; (82920 <pmc_switch_mainck_to_fastrc+0x6c>)
   828dc:	4b10      	ldr	r3, [pc, #64]	; (82920 <pmc_switch_mainck_to_fastrc+0x6c>)
   828de:	6a1b      	ldr	r3, [r3, #32]
   828e0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   828e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   828e8:	687a      	ldr	r2, [r7, #4]
   828ea:	4313      	orrs	r3, r2
   828ec:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   828f0:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   828f2:	bf00      	nop
   828f4:	4b0a      	ldr	r3, [pc, #40]	; (82920 <pmc_switch_mainck_to_fastrc+0x6c>)
   828f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   828f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   828fc:	2b00      	cmp	r3, #0
   828fe:	d0f9      	beq.n	828f4 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   82900:	4a07      	ldr	r2, [pc, #28]	; (82920 <pmc_switch_mainck_to_fastrc+0x6c>)
   82902:	4b07      	ldr	r3, [pc, #28]	; (82920 <pmc_switch_mainck_to_fastrc+0x6c>)
   82904:	6a1b      	ldr	r3, [r3, #32]
   82906:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8290a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8290e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82912:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   82914:	bf00      	nop
   82916:	370c      	adds	r7, #12
   82918:	46bd      	mov	sp, r7
   8291a:	bc80      	pop	{r7}
   8291c:	4770      	bx	lr
   8291e:	bf00      	nop
   82920:	400e0600 	.word	0x400e0600

00082924 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   82924:	b480      	push	{r7}
   82926:	b083      	sub	sp, #12
   82928:	af00      	add	r7, sp, #0
   8292a:	6078      	str	r0, [r7, #4]
   8292c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8292e:	687b      	ldr	r3, [r7, #4]
   82930:	2b00      	cmp	r3, #0
   82932:	d008      	beq.n	82946 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82934:	4916      	ldr	r1, [pc, #88]	; (82990 <pmc_switch_mainck_to_xtal+0x6c>)
   82936:	4b16      	ldr	r3, [pc, #88]	; (82990 <pmc_switch_mainck_to_xtal+0x6c>)
   82938:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8293a:	4a16      	ldr	r2, [pc, #88]	; (82994 <pmc_switch_mainck_to_xtal+0x70>)
   8293c:	401a      	ands	r2, r3
   8293e:	4b16      	ldr	r3, [pc, #88]	; (82998 <pmc_switch_mainck_to_xtal+0x74>)
   82940:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82942:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   82944:	e01e      	b.n	82984 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82946:	4912      	ldr	r1, [pc, #72]	; (82990 <pmc_switch_mainck_to_xtal+0x6c>)
   82948:	4b11      	ldr	r3, [pc, #68]	; (82990 <pmc_switch_mainck_to_xtal+0x6c>)
   8294a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8294c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82950:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82954:	683a      	ldr	r2, [r7, #0]
   82956:	0212      	lsls	r2, r2, #8
   82958:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8295a:	4313      	orrs	r3, r2
   8295c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82960:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82964:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82966:	bf00      	nop
   82968:	4b09      	ldr	r3, [pc, #36]	; (82990 <pmc_switch_mainck_to_xtal+0x6c>)
   8296a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8296c:	f003 0301 	and.w	r3, r3, #1
   82970:	2b00      	cmp	r3, #0
   82972:	d0f9      	beq.n	82968 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82974:	4a06      	ldr	r2, [pc, #24]	; (82990 <pmc_switch_mainck_to_xtal+0x6c>)
   82976:	4b06      	ldr	r3, [pc, #24]	; (82990 <pmc_switch_mainck_to_xtal+0x6c>)
   82978:	6a1b      	ldr	r3, [r3, #32]
   8297a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8297e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82982:	6213      	str	r3, [r2, #32]
}
   82984:	bf00      	nop
   82986:	370c      	adds	r7, #12
   82988:	46bd      	mov	sp, r7
   8298a:	bc80      	pop	{r7}
   8298c:	4770      	bx	lr
   8298e:	bf00      	nop
   82990:	400e0600 	.word	0x400e0600
   82994:	fec8fffc 	.word	0xfec8fffc
   82998:	01370002 	.word	0x01370002

0008299c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   8299c:	b480      	push	{r7}
   8299e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   829a0:	4b03      	ldr	r3, [pc, #12]	; (829b0 <pmc_osc_is_ready_mainck+0x14>)
   829a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   829a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   829a8:	4618      	mov	r0, r3
   829aa:	46bd      	mov	sp, r7
   829ac:	bc80      	pop	{r7}
   829ae:	4770      	bx	lr
   829b0:	400e0600 	.word	0x400e0600

000829b4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   829b4:	b480      	push	{r7}
   829b6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   829b8:	4b03      	ldr	r3, [pc, #12]	; (829c8 <pmc_disable_pllack+0x14>)
   829ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   829be:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   829c0:	bf00      	nop
   829c2:	46bd      	mov	sp, r7
   829c4:	bc80      	pop	{r7}
   829c6:	4770      	bx	lr
   829c8:	400e0600 	.word	0x400e0600

000829cc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   829cc:	b480      	push	{r7}
   829ce:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   829d0:	4b03      	ldr	r3, [pc, #12]	; (829e0 <pmc_is_locked_pllack+0x14>)
   829d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   829d4:	f003 0302 	and.w	r3, r3, #2
}
   829d8:	4618      	mov	r0, r3
   829da:	46bd      	mov	sp, r7
   829dc:	bc80      	pop	{r7}
   829de:	4770      	bx	lr
   829e0:	400e0600 	.word	0x400e0600

000829e4 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   829e4:	b480      	push	{r7}
   829e6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   829e8:	4b03      	ldr	r3, [pc, #12]	; (829f8 <pmc_is_locked_upll+0x14>)
   829ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   829ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   829f0:	4618      	mov	r0, r3
   829f2:	46bd      	mov	sp, r7
   829f4:	bc80      	pop	{r7}
   829f6:	4770      	bx	lr
   829f8:	400e0600 	.word	0x400e0600

000829fc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   829fc:	b480      	push	{r7}
   829fe:	b083      	sub	sp, #12
   82a00:	af00      	add	r7, sp, #0
   82a02:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82a04:	687b      	ldr	r3, [r7, #4]
   82a06:	2b2c      	cmp	r3, #44	; 0x2c
   82a08:	d901      	bls.n	82a0e <pmc_enable_periph_clk+0x12>
		return 1;
   82a0a:	2301      	movs	r3, #1
   82a0c:	e02f      	b.n	82a6e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   82a0e:	687b      	ldr	r3, [r7, #4]
   82a10:	2b1f      	cmp	r3, #31
   82a12:	d813      	bhi.n	82a3c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82a14:	4b18      	ldr	r3, [pc, #96]	; (82a78 <pmc_enable_periph_clk+0x7c>)
   82a16:	699a      	ldr	r2, [r3, #24]
   82a18:	2101      	movs	r1, #1
   82a1a:	687b      	ldr	r3, [r7, #4]
   82a1c:	fa01 f303 	lsl.w	r3, r1, r3
   82a20:	401a      	ands	r2, r3
   82a22:	2101      	movs	r1, #1
   82a24:	687b      	ldr	r3, [r7, #4]
   82a26:	fa01 f303 	lsl.w	r3, r1, r3
   82a2a:	429a      	cmp	r2, r3
   82a2c:	d01e      	beq.n	82a6c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   82a2e:	4a12      	ldr	r2, [pc, #72]	; (82a78 <pmc_enable_periph_clk+0x7c>)
   82a30:	2101      	movs	r1, #1
   82a32:	687b      	ldr	r3, [r7, #4]
   82a34:	fa01 f303 	lsl.w	r3, r1, r3
   82a38:	6113      	str	r3, [r2, #16]
   82a3a:	e017      	b.n	82a6c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   82a3c:	687b      	ldr	r3, [r7, #4]
   82a3e:	3b20      	subs	r3, #32
   82a40:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82a42:	4b0d      	ldr	r3, [pc, #52]	; (82a78 <pmc_enable_periph_clk+0x7c>)
   82a44:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82a48:	2101      	movs	r1, #1
   82a4a:	687b      	ldr	r3, [r7, #4]
   82a4c:	fa01 f303 	lsl.w	r3, r1, r3
   82a50:	401a      	ands	r2, r3
   82a52:	2101      	movs	r1, #1
   82a54:	687b      	ldr	r3, [r7, #4]
   82a56:	fa01 f303 	lsl.w	r3, r1, r3
   82a5a:	429a      	cmp	r2, r3
   82a5c:	d006      	beq.n	82a6c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   82a5e:	4a06      	ldr	r2, [pc, #24]	; (82a78 <pmc_enable_periph_clk+0x7c>)
   82a60:	2101      	movs	r1, #1
   82a62:	687b      	ldr	r3, [r7, #4]
   82a64:	fa01 f303 	lsl.w	r3, r1, r3
   82a68:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   82a6c:	2300      	movs	r3, #0
}
   82a6e:	4618      	mov	r0, r3
   82a70:	370c      	adds	r7, #12
   82a72:	46bd      	mov	sp, r7
   82a74:	bc80      	pop	{r7}
   82a76:	4770      	bx	lr
   82a78:	400e0600 	.word	0x400e0600

00082a7c <sysclk_enable_peripheral_clock>:
{
   82a7c:	b580      	push	{r7, lr}
   82a7e:	b082      	sub	sp, #8
   82a80:	af00      	add	r7, sp, #0
   82a82:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82a84:	6878      	ldr	r0, [r7, #4]
   82a86:	4b03      	ldr	r3, [pc, #12]	; (82a94 <sysclk_enable_peripheral_clock+0x18>)
   82a88:	4798      	blx	r3
}
   82a8a:	bf00      	nop
   82a8c:	3708      	adds	r7, #8
   82a8e:	46bd      	mov	sp, r7
   82a90:	bd80      	pop	{r7, pc}
   82a92:	bf00      	nop
   82a94:	000829fd 	.word	0x000829fd

00082a98 <ioport_init>:
{
   82a98:	b580      	push	{r7, lr}
   82a9a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   82a9c:	200b      	movs	r0, #11
   82a9e:	4b06      	ldr	r3, [pc, #24]	; (82ab8 <ioport_init+0x20>)
   82aa0:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   82aa2:	200c      	movs	r0, #12
   82aa4:	4b04      	ldr	r3, [pc, #16]	; (82ab8 <ioport_init+0x20>)
   82aa6:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   82aa8:	200d      	movs	r0, #13
   82aaa:	4b03      	ldr	r3, [pc, #12]	; (82ab8 <ioport_init+0x20>)
   82aac:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   82aae:	200e      	movs	r0, #14
   82ab0:	4b01      	ldr	r3, [pc, #4]	; (82ab8 <ioport_init+0x20>)
   82ab2:	4798      	blx	r3
}
   82ab4:	bf00      	nop
   82ab6:	bd80      	pop	{r7, pc}
   82ab8:	00082a7d 	.word	0x00082a7d

00082abc <ioport_disable_pin>:
{
   82abc:	b480      	push	{r7}
   82abe:	b089      	sub	sp, #36	; 0x24
   82ac0:	af00      	add	r7, sp, #0
   82ac2:	6078      	str	r0, [r7, #4]
   82ac4:	687b      	ldr	r3, [r7, #4]
   82ac6:	61fb      	str	r3, [r7, #28]
   82ac8:	69fb      	ldr	r3, [r7, #28]
   82aca:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82acc:	69bb      	ldr	r3, [r7, #24]
   82ace:	095a      	lsrs	r2, r3, #5
   82ad0:	69fb      	ldr	r3, [r7, #28]
   82ad2:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   82ad4:	697b      	ldr	r3, [r7, #20]
   82ad6:	f003 031f 	and.w	r3, r3, #31
   82ada:	2101      	movs	r1, #1
   82adc:	fa01 f303 	lsl.w	r3, r1, r3
   82ae0:	613a      	str	r2, [r7, #16]
   82ae2:	60fb      	str	r3, [r7, #12]
   82ae4:	693b      	ldr	r3, [r7, #16]
   82ae6:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82ae8:	68bb      	ldr	r3, [r7, #8]
   82aea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82aee:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82af2:	025b      	lsls	r3, r3, #9
   82af4:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   82af6:	68fb      	ldr	r3, [r7, #12]
   82af8:	6053      	str	r3, [r2, #4]
}
   82afa:	bf00      	nop
   82afc:	3724      	adds	r7, #36	; 0x24
   82afe:	46bd      	mov	sp, r7
   82b00:	bc80      	pop	{r7}
   82b02:	4770      	bx	lr

00082b04 <ioport_set_pin_mode>:
{
   82b04:	b480      	push	{r7}
   82b06:	b08d      	sub	sp, #52	; 0x34
   82b08:	af00      	add	r7, sp, #0
   82b0a:	6078      	str	r0, [r7, #4]
   82b0c:	6039      	str	r1, [r7, #0]
   82b0e:	687b      	ldr	r3, [r7, #4]
   82b10:	62fb      	str	r3, [r7, #44]	; 0x2c
   82b12:	683b      	ldr	r3, [r7, #0]
   82b14:	62bb      	str	r3, [r7, #40]	; 0x28
   82b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82b18:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   82b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82b1c:	095a      	lsrs	r2, r3, #5
   82b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82b20:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   82b22:	6a3b      	ldr	r3, [r7, #32]
   82b24:	f003 031f 	and.w	r3, r3, #31
   82b28:	2101      	movs	r1, #1
   82b2a:	fa01 f303 	lsl.w	r3, r1, r3
   82b2e:	61fa      	str	r2, [r7, #28]
   82b30:	61bb      	str	r3, [r7, #24]
   82b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   82b34:	617b      	str	r3, [r7, #20]
   82b36:	69fb      	ldr	r3, [r7, #28]
   82b38:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82b3a:	693b      	ldr	r3, [r7, #16]
   82b3c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82b40:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82b44:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   82b46:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   82b48:	697b      	ldr	r3, [r7, #20]
   82b4a:	f003 0308 	and.w	r3, r3, #8
   82b4e:	2b00      	cmp	r3, #0
   82b50:	d003      	beq.n	82b5a <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   82b52:	68fb      	ldr	r3, [r7, #12]
   82b54:	69ba      	ldr	r2, [r7, #24]
   82b56:	665a      	str	r2, [r3, #100]	; 0x64
   82b58:	e002      	b.n	82b60 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   82b5a:	68fb      	ldr	r3, [r7, #12]
   82b5c:	69ba      	ldr	r2, [r7, #24]
   82b5e:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   82b60:	697b      	ldr	r3, [r7, #20]
   82b62:	f003 0320 	and.w	r3, r3, #32
   82b66:	2b00      	cmp	r3, #0
   82b68:	d003      	beq.n	82b72 <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   82b6a:	68fb      	ldr	r3, [r7, #12]
   82b6c:	69ba      	ldr	r2, [r7, #24]
   82b6e:	651a      	str	r2, [r3, #80]	; 0x50
   82b70:	e002      	b.n	82b78 <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   82b72:	68fb      	ldr	r3, [r7, #12]
   82b74:	69ba      	ldr	r2, [r7, #24]
   82b76:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   82b78:	697b      	ldr	r3, [r7, #20]
   82b7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   82b7e:	2b00      	cmp	r3, #0
   82b80:	d003      	beq.n	82b8a <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   82b82:	68fb      	ldr	r3, [r7, #12]
   82b84:	69ba      	ldr	r2, [r7, #24]
   82b86:	621a      	str	r2, [r3, #32]
   82b88:	e002      	b.n	82b90 <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   82b8a:	68fb      	ldr	r3, [r7, #12]
   82b8c:	69ba      	ldr	r2, [r7, #24]
   82b8e:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   82b90:	697b      	ldr	r3, [r7, #20]
   82b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82b96:	2b00      	cmp	r3, #0
   82b98:	d004      	beq.n	82ba4 <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   82b9a:	68fb      	ldr	r3, [r7, #12]
   82b9c:	69ba      	ldr	r2, [r7, #24]
   82b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   82ba2:	e003      	b.n	82bac <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   82ba4:	68fb      	ldr	r3, [r7, #12]
   82ba6:	69ba      	ldr	r2, [r7, #24]
   82ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   82bac:	697b      	ldr	r3, [r7, #20]
   82bae:	f003 0301 	and.w	r3, r3, #1
   82bb2:	2b00      	cmp	r3, #0
   82bb4:	d006      	beq.n	82bc4 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   82bb6:	68fb      	ldr	r3, [r7, #12]
   82bb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82bba:	69bb      	ldr	r3, [r7, #24]
   82bbc:	431a      	orrs	r2, r3
   82bbe:	68fb      	ldr	r3, [r7, #12]
   82bc0:	671a      	str	r2, [r3, #112]	; 0x70
}
   82bc2:	e006      	b.n	82bd2 <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   82bc4:	68fb      	ldr	r3, [r7, #12]
   82bc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82bc8:	69bb      	ldr	r3, [r7, #24]
   82bca:	43db      	mvns	r3, r3
   82bcc:	401a      	ands	r2, r3
   82bce:	68fb      	ldr	r3, [r7, #12]
   82bd0:	671a      	str	r2, [r3, #112]	; 0x70
   82bd2:	bf00      	nop
   82bd4:	3734      	adds	r7, #52	; 0x34
   82bd6:	46bd      	mov	sp, r7
   82bd8:	bc80      	pop	{r7}
   82bda:	4770      	bx	lr

00082bdc <ioport_set_pin_dir>:
{
   82bdc:	b480      	push	{r7}
   82bde:	b08d      	sub	sp, #52	; 0x34
   82be0:	af00      	add	r7, sp, #0
   82be2:	6078      	str	r0, [r7, #4]
   82be4:	460b      	mov	r3, r1
   82be6:	70fb      	strb	r3, [r7, #3]
   82be8:	687b      	ldr	r3, [r7, #4]
   82bea:	62fb      	str	r3, [r7, #44]	; 0x2c
   82bec:	78fb      	ldrb	r3, [r7, #3]
   82bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   82bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82bf4:	627b      	str	r3, [r7, #36]	; 0x24
   82bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82bf8:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   82bfa:	6a3b      	ldr	r3, [r7, #32]
   82bfc:	095b      	lsrs	r3, r3, #5
   82bfe:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82c00:	69fb      	ldr	r3, [r7, #28]
   82c02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82c06:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82c0a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82c0c:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   82c0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   82c12:	2b01      	cmp	r3, #1
   82c14:	d109      	bne.n	82c2a <ioport_set_pin_dir+0x4e>
   82c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82c18:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   82c1a:	697b      	ldr	r3, [r7, #20]
   82c1c:	f003 031f 	and.w	r3, r3, #31
   82c20:	2201      	movs	r2, #1
   82c22:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82c24:	69bb      	ldr	r3, [r7, #24]
   82c26:	611a      	str	r2, [r3, #16]
   82c28:	e00c      	b.n	82c44 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   82c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   82c2e:	2b00      	cmp	r3, #0
   82c30:	d108      	bne.n	82c44 <ioport_set_pin_dir+0x68>
   82c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82c34:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   82c36:	693b      	ldr	r3, [r7, #16]
   82c38:	f003 031f 	and.w	r3, r3, #31
   82c3c:	2201      	movs	r2, #1
   82c3e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   82c40:	69bb      	ldr	r3, [r7, #24]
   82c42:	615a      	str	r2, [r3, #20]
   82c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82c46:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82c48:	68fb      	ldr	r3, [r7, #12]
   82c4a:	f003 031f 	and.w	r3, r3, #31
   82c4e:	2201      	movs	r2, #1
   82c50:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82c52:	69bb      	ldr	r3, [r7, #24]
   82c54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   82c58:	bf00      	nop
   82c5a:	3734      	adds	r7, #52	; 0x34
   82c5c:	46bd      	mov	sp, r7
   82c5e:	bc80      	pop	{r7}
   82c60:	4770      	bx	lr

00082c62 <ioport_set_pin_level>:
{
   82c62:	b480      	push	{r7}
   82c64:	b08b      	sub	sp, #44	; 0x2c
   82c66:	af00      	add	r7, sp, #0
   82c68:	6078      	str	r0, [r7, #4]
   82c6a:	460b      	mov	r3, r1
   82c6c:	70fb      	strb	r3, [r7, #3]
   82c6e:	687b      	ldr	r3, [r7, #4]
   82c70:	627b      	str	r3, [r7, #36]	; 0x24
   82c72:	78fb      	ldrb	r3, [r7, #3]
   82c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82c7a:	61fb      	str	r3, [r7, #28]
   82c7c:	69fb      	ldr	r3, [r7, #28]
   82c7e:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82c80:	69bb      	ldr	r3, [r7, #24]
   82c82:	095b      	lsrs	r3, r3, #5
   82c84:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82c86:	697b      	ldr	r3, [r7, #20]
   82c88:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82c8c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82c90:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82c92:	613b      	str	r3, [r7, #16]
	if (level) {
   82c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82c98:	2b00      	cmp	r3, #0
   82c9a:	d009      	beq.n	82cb0 <ioport_set_pin_level+0x4e>
   82c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82c9e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82ca0:	68fb      	ldr	r3, [r7, #12]
   82ca2:	f003 031f 	and.w	r3, r3, #31
   82ca6:	2201      	movs	r2, #1
   82ca8:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82caa:	693b      	ldr	r3, [r7, #16]
   82cac:	631a      	str	r2, [r3, #48]	; 0x30
}
   82cae:	e008      	b.n	82cc2 <ioport_set_pin_level+0x60>
   82cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82cb2:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   82cb4:	68bb      	ldr	r3, [r7, #8]
   82cb6:	f003 031f 	and.w	r3, r3, #31
   82cba:	2201      	movs	r2, #1
   82cbc:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82cbe:	693b      	ldr	r3, [r7, #16]
   82cc0:	635a      	str	r2, [r3, #52]	; 0x34
   82cc2:	bf00      	nop
   82cc4:	372c      	adds	r7, #44	; 0x2c
   82cc6:	46bd      	mov	sp, r7
   82cc8:	bc80      	pop	{r7}
   82cca:	4770      	bx	lr

00082ccc <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   82ccc:	b580      	push	{r7, lr}
   82cce:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82cd0:	4b59      	ldr	r3, [pc, #356]	; (82e38 <board_init+0x16c>)
   82cd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82cd6:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   82cd8:	4b58      	ldr	r3, [pc, #352]	; (82e3c <board_init+0x170>)
   82cda:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   82cdc:	2101      	movs	r1, #1
   82cde:	206a      	movs	r0, #106	; 0x6a
   82ce0:	4b57      	ldr	r3, [pc, #348]	; (82e40 <board_init+0x174>)
   82ce2:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   82ce4:	2100      	movs	r1, #0
   82ce6:	206a      	movs	r0, #106	; 0x6a
   82ce8:	4b56      	ldr	r3, [pc, #344]	; (82e44 <board_init+0x178>)
   82cea:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   82cec:	2101      	movs	r1, #1
   82cee:	2067      	movs	r0, #103	; 0x67
   82cf0:	4b53      	ldr	r3, [pc, #332]	; (82e40 <board_init+0x174>)
   82cf2:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   82cf4:	2100      	movs	r1, #0
   82cf6:	2067      	movs	r0, #103	; 0x67
   82cf8:	4b52      	ldr	r3, [pc, #328]	; (82e44 <board_init+0x178>)
   82cfa:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   82cfc:	2101      	movs	r1, #1
   82cfe:	2068      	movs	r0, #104	; 0x68
   82d00:	4b4f      	ldr	r3, [pc, #316]	; (82e40 <board_init+0x174>)
   82d02:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   82d04:	2100      	movs	r1, #0
   82d06:	2068      	movs	r0, #104	; 0x68
   82d08:	4b4e      	ldr	r3, [pc, #312]	; (82e44 <board_init+0x178>)
   82d0a:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   82d0c:	2101      	movs	r1, #1
   82d0e:	2069      	movs	r0, #105	; 0x69
   82d10:	4b4b      	ldr	r3, [pc, #300]	; (82e40 <board_init+0x174>)
   82d12:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   82d14:	2100      	movs	r1, #0
   82d16:	2069      	movs	r0, #105	; 0x69
   82d18:	4b4a      	ldr	r3, [pc, #296]	; (82e44 <board_init+0x178>)
   82d1a:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   82d1c:	2101      	movs	r1, #1
   82d1e:	2066      	movs	r0, #102	; 0x66
   82d20:	4b47      	ldr	r3, [pc, #284]	; (82e40 <board_init+0x174>)
   82d22:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   82d24:	2100      	movs	r1, #0
   82d26:	2066      	movs	r0, #102	; 0x66
   82d28:	4b46      	ldr	r3, [pc, #280]	; (82e44 <board_init+0x178>)
   82d2a:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   82d2c:	2100      	movs	r1, #0
   82d2e:	2060      	movs	r0, #96	; 0x60
   82d30:	4b43      	ldr	r3, [pc, #268]	; (82e40 <board_init+0x174>)
   82d32:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82d34:	2188      	movs	r1, #136	; 0x88
   82d36:	2060      	movs	r0, #96	; 0x60
   82d38:	4b43      	ldr	r3, [pc, #268]	; (82e48 <board_init+0x17c>)
   82d3a:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   82d3c:	2100      	movs	r1, #0
   82d3e:	2061      	movs	r0, #97	; 0x61
   82d40:	4b3f      	ldr	r3, [pc, #252]	; (82e40 <board_init+0x174>)
   82d42:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82d44:	2188      	movs	r1, #136	; 0x88
   82d46:	2061      	movs	r0, #97	; 0x61
   82d48:	4b3f      	ldr	r3, [pc, #252]	; (82e48 <board_init+0x17c>)
   82d4a:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   82d4c:	2100      	movs	r1, #0
   82d4e:	2062      	movs	r0, #98	; 0x62
   82d50:	4b3b      	ldr	r3, [pc, #236]	; (82e40 <board_init+0x174>)
   82d52:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82d54:	2188      	movs	r1, #136	; 0x88
   82d56:	2062      	movs	r0, #98	; 0x62
   82d58:	4b3b      	ldr	r3, [pc, #236]	; (82e48 <board_init+0x17c>)
   82d5a:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   82d5c:	2100      	movs	r1, #0
   82d5e:	2063      	movs	r0, #99	; 0x63
   82d60:	4b37      	ldr	r3, [pc, #220]	; (82e40 <board_init+0x174>)
   82d62:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82d64:	2188      	movs	r1, #136	; 0x88
   82d66:	2063      	movs	r0, #99	; 0x63
   82d68:	4b37      	ldr	r3, [pc, #220]	; (82e48 <board_init+0x17c>)
   82d6a:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   82d6c:	2100      	movs	r1, #0
   82d6e:	2064      	movs	r0, #100	; 0x64
   82d70:	4b33      	ldr	r3, [pc, #204]	; (82e40 <board_init+0x174>)
   82d72:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82d74:	2188      	movs	r1, #136	; 0x88
   82d76:	2064      	movs	r0, #100	; 0x64
   82d78:	4b33      	ldr	r3, [pc, #204]	; (82e48 <board_init+0x17c>)
   82d7a:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   82d7c:	2100      	movs	r1, #0
   82d7e:	2065      	movs	r0, #101	; 0x65
   82d80:	4b2f      	ldr	r3, [pc, #188]	; (82e40 <board_init+0x174>)
   82d82:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82d84:	2188      	movs	r1, #136	; 0x88
   82d86:	2065      	movs	r0, #101	; 0x65
   82d88:	4b2f      	ldr	r3, [pc, #188]	; (82e48 <board_init+0x17c>)
   82d8a:	4798      	blx	r3
	
	/* Configure I2C pins */
	ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   82d8c:	2100      	movs	r1, #0
   82d8e:	2011      	movs	r0, #17
   82d90:	4b2d      	ldr	r3, [pc, #180]	; (82e48 <board_init+0x17c>)
   82d92:	4798      	blx	r3
	ioport_disable_pin(I2C0_DATA);
   82d94:	2011      	movs	r0, #17
   82d96:	4b2d      	ldr	r3, [pc, #180]	; (82e4c <board_init+0x180>)
   82d98:	4798      	blx	r3
	ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   82d9a:	2100      	movs	r1, #0
   82d9c:	2012      	movs	r0, #18
   82d9e:	4b2a      	ldr	r3, [pc, #168]	; (82e48 <board_init+0x17c>)
   82da0:	4798      	blx	r3
	ioport_disable_pin(I2C0_CLK);
   82da2:	2012      	movs	r0, #18
   82da4:	4b29      	ldr	r3, [pc, #164]	; (82e4c <board_init+0x180>)
   82da6:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   82da8:	2100      	movs	r1, #0
   82daa:	200c      	movs	r0, #12
   82dac:	4b26      	ldr	r3, [pc, #152]	; (82e48 <board_init+0x17c>)
   82dae:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   82db0:	200c      	movs	r0, #12
   82db2:	4b26      	ldr	r3, [pc, #152]	; (82e4c <board_init+0x180>)
   82db4:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   82db6:	2100      	movs	r1, #0
   82db8:	200d      	movs	r0, #13
   82dba:	4b23      	ldr	r3, [pc, #140]	; (82e48 <board_init+0x17c>)
   82dbc:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   82dbe:	200d      	movs	r0, #13
   82dc0:	4b22      	ldr	r3, [pc, #136]	; (82e4c <board_init+0x180>)
   82dc2:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   82dc4:	2100      	movs	r1, #0
   82dc6:	2010      	movs	r0, #16
   82dc8:	4b1f      	ldr	r3, [pc, #124]	; (82e48 <board_init+0x17c>)
   82dca:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   82dcc:	2010      	movs	r0, #16
   82dce:	4b1f      	ldr	r3, [pc, #124]	; (82e4c <board_init+0x180>)
   82dd0:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   82dd2:	2100      	movs	r1, #0
   82dd4:	200e      	movs	r0, #14
   82dd6:	4b1c      	ldr	r3, [pc, #112]	; (82e48 <board_init+0x17c>)
   82dd8:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   82dda:	200e      	movs	r0, #14
   82ddc:	4b1b      	ldr	r3, [pc, #108]	; (82e4c <board_init+0x180>)
   82dde:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   82de0:	2100      	movs	r1, #0
   82de2:	2014      	movs	r0, #20
   82de4:	4b18      	ldr	r3, [pc, #96]	; (82e48 <board_init+0x17c>)
   82de6:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   82de8:	2014      	movs	r0, #20
   82dea:	4b18      	ldr	r3, [pc, #96]	; (82e4c <board_init+0x180>)
   82dec:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   82dee:	2100      	movs	r1, #0
   82df0:	2013      	movs	r0, #19
   82df2:	4b15      	ldr	r3, [pc, #84]	; (82e48 <board_init+0x17c>)
   82df4:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   82df6:	2013      	movs	r0, #19
   82df8:	4b14      	ldr	r3, [pc, #80]	; (82e4c <board_init+0x180>)
   82dfa:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   82dfc:	2100      	movs	r1, #0
   82dfe:	2015      	movs	r0, #21
   82e00:	4b11      	ldr	r3, [pc, #68]	; (82e48 <board_init+0x17c>)
   82e02:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   82e04:	2015      	movs	r0, #21
   82e06:	4b11      	ldr	r3, [pc, #68]	; (82e4c <board_init+0x180>)
   82e08:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   82e0a:	2100      	movs	r1, #0
   82e0c:	2016      	movs	r0, #22
   82e0e:	4b0e      	ldr	r3, [pc, #56]	; (82e48 <board_init+0x17c>)
   82e10:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   82e12:	2016      	movs	r0, #22
   82e14:	4b0d      	ldr	r3, [pc, #52]	; (82e4c <board_init+0x180>)
   82e16:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   82e18:	2100      	movs	r1, #0
   82e1a:	2017      	movs	r0, #23
   82e1c:	4b0a      	ldr	r3, [pc, #40]	; (82e48 <board_init+0x17c>)
   82e1e:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   82e20:	2017      	movs	r0, #23
   82e22:	4b0a      	ldr	r3, [pc, #40]	; (82e4c <board_init+0x180>)
   82e24:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   82e26:	2100      	movs	r1, #0
   82e28:	2018      	movs	r0, #24
   82e2a:	4b07      	ldr	r3, [pc, #28]	; (82e48 <board_init+0x17c>)
   82e2c:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   82e2e:	2018      	movs	r0, #24
   82e30:	4b06      	ldr	r3, [pc, #24]	; (82e4c <board_init+0x180>)
   82e32:	4798      	blx	r3
}
   82e34:	bf00      	nop
   82e36:	bd80      	pop	{r7, pc}
   82e38:	400e1a50 	.word	0x400e1a50
   82e3c:	00082a99 	.word	0x00082a99
   82e40:	00082bdd 	.word	0x00082bdd
   82e44:	00082c63 	.word	0x00082c63
   82e48:	00082b05 	.word	0x00082b05
   82e4c:	00082abd 	.word	0x00082abd

00082e50 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82e50:	b480      	push	{r7}
   82e52:	af00      	add	r7, sp, #0
	while (1) {
   82e54:	e7fe      	b.n	82e54 <Dummy_Handler+0x4>
	...

00082e58 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82e58:	b580      	push	{r7, lr}
   82e5a:	b082      	sub	sp, #8
   82e5c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   82e5e:	4b1e      	ldr	r3, [pc, #120]	; (82ed8 <Reset_Handler+0x80>)
   82e60:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   82e62:	4b1e      	ldr	r3, [pc, #120]	; (82edc <Reset_Handler+0x84>)
   82e64:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   82e66:	687a      	ldr	r2, [r7, #4]
   82e68:	683b      	ldr	r3, [r7, #0]
   82e6a:	429a      	cmp	r2, r3
   82e6c:	d00c      	beq.n	82e88 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   82e6e:	e007      	b.n	82e80 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   82e70:	683b      	ldr	r3, [r7, #0]
   82e72:	1d1a      	adds	r2, r3, #4
   82e74:	603a      	str	r2, [r7, #0]
   82e76:	687a      	ldr	r2, [r7, #4]
   82e78:	1d11      	adds	r1, r2, #4
   82e7a:	6079      	str	r1, [r7, #4]
   82e7c:	6812      	ldr	r2, [r2, #0]
   82e7e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   82e80:	683b      	ldr	r3, [r7, #0]
   82e82:	4a17      	ldr	r2, [pc, #92]	; (82ee0 <Reset_Handler+0x88>)
   82e84:	4293      	cmp	r3, r2
   82e86:	d3f3      	bcc.n	82e70 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82e88:	4b16      	ldr	r3, [pc, #88]	; (82ee4 <Reset_Handler+0x8c>)
   82e8a:	603b      	str	r3, [r7, #0]
   82e8c:	e004      	b.n	82e98 <Reset_Handler+0x40>
		*pDest++ = 0;
   82e8e:	683b      	ldr	r3, [r7, #0]
   82e90:	1d1a      	adds	r2, r3, #4
   82e92:	603a      	str	r2, [r7, #0]
   82e94:	2200      	movs	r2, #0
   82e96:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   82e98:	683b      	ldr	r3, [r7, #0]
   82e9a:	4a13      	ldr	r2, [pc, #76]	; (82ee8 <Reset_Handler+0x90>)
   82e9c:	4293      	cmp	r3, r2
   82e9e:	d3f6      	bcc.n	82e8e <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   82ea0:	4b12      	ldr	r3, [pc, #72]	; (82eec <Reset_Handler+0x94>)
   82ea2:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82ea4:	4a12      	ldr	r2, [pc, #72]	; (82ef0 <Reset_Handler+0x98>)
   82ea6:	687b      	ldr	r3, [r7, #4]
   82ea8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82eac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82eb0:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82eb2:	687b      	ldr	r3, [r7, #4]
   82eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82eb8:	d309      	bcc.n	82ece <Reset_Handler+0x76>
   82eba:	687b      	ldr	r3, [r7, #4]
   82ebc:	4a0d      	ldr	r2, [pc, #52]	; (82ef4 <Reset_Handler+0x9c>)
   82ebe:	4293      	cmp	r3, r2
   82ec0:	d805      	bhi.n	82ece <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82ec2:	4a0b      	ldr	r2, [pc, #44]	; (82ef0 <Reset_Handler+0x98>)
   82ec4:	4b0a      	ldr	r3, [pc, #40]	; (82ef0 <Reset_Handler+0x98>)
   82ec6:	689b      	ldr	r3, [r3, #8]
   82ec8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82ecc:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82ece:	4b0a      	ldr	r3, [pc, #40]	; (82ef8 <Reset_Handler+0xa0>)
   82ed0:	4798      	blx	r3

	/* Branch to main function */
	main();
   82ed2:	4b0a      	ldr	r3, [pc, #40]	; (82efc <Reset_Handler+0xa4>)
   82ed4:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82ed6:	e7fe      	b.n	82ed6 <Reset_Handler+0x7e>
   82ed8:	0008825c 	.word	0x0008825c
   82edc:	20070000 	.word	0x20070000
   82ee0:	20070b50 	.word	0x20070b50
   82ee4:	20070b50 	.word	0x20070b50
   82ee8:	20071060 	.word	0x20071060
   82eec:	00080000 	.word	0x00080000
   82ef0:	e000ed00 	.word	0xe000ed00
   82ef4:	200fffff 	.word	0x200fffff
   82ef8:	0008355d 	.word	0x0008355d
   82efc:	000832d1 	.word	0x000832d1

00082f00 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   82f00:	b480      	push	{r7}
   82f02:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82f04:	4b57      	ldr	r3, [pc, #348]	; (83064 <SystemCoreClockUpdate+0x164>)
   82f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82f08:	f003 0303 	and.w	r3, r3, #3
   82f0c:	2b03      	cmp	r3, #3
   82f0e:	f200 808a 	bhi.w	83026 <SystemCoreClockUpdate+0x126>
   82f12:	a201      	add	r2, pc, #4	; (adr r2, 82f18 <SystemCoreClockUpdate+0x18>)
   82f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82f18:	00082f29 	.word	0x00082f29
   82f1c:	00082f49 	.word	0x00082f49
   82f20:	00082f99 	.word	0x00082f99
   82f24:	00082f99 	.word	0x00082f99
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82f28:	4b4f      	ldr	r3, [pc, #316]	; (83068 <SystemCoreClockUpdate+0x168>)
   82f2a:	695b      	ldr	r3, [r3, #20]
   82f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82f30:	2b00      	cmp	r3, #0
   82f32:	d004      	beq.n	82f3e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82f34:	4b4d      	ldr	r3, [pc, #308]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82f36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82f3a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   82f3c:	e073      	b.n	83026 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82f3e:	4b4b      	ldr	r3, [pc, #300]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82f40:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82f44:	601a      	str	r2, [r3, #0]
		break;
   82f46:	e06e      	b.n	83026 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82f48:	4b46      	ldr	r3, [pc, #280]	; (83064 <SystemCoreClockUpdate+0x164>)
   82f4a:	6a1b      	ldr	r3, [r3, #32]
   82f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82f50:	2b00      	cmp	r3, #0
   82f52:	d003      	beq.n	82f5c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82f54:	4b45      	ldr	r3, [pc, #276]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82f56:	4a46      	ldr	r2, [pc, #280]	; (83070 <SystemCoreClockUpdate+0x170>)
   82f58:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   82f5a:	e064      	b.n	83026 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82f5c:	4b43      	ldr	r3, [pc, #268]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82f5e:	4a45      	ldr	r2, [pc, #276]	; (83074 <SystemCoreClockUpdate+0x174>)
   82f60:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82f62:	4b40      	ldr	r3, [pc, #256]	; (83064 <SystemCoreClockUpdate+0x164>)
   82f64:	6a1b      	ldr	r3, [r3, #32]
   82f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82f6a:	2b10      	cmp	r3, #16
   82f6c:	d004      	beq.n	82f78 <SystemCoreClockUpdate+0x78>
   82f6e:	2b20      	cmp	r3, #32
   82f70:	d008      	beq.n	82f84 <SystemCoreClockUpdate+0x84>
   82f72:	2b00      	cmp	r3, #0
   82f74:	d00e      	beq.n	82f94 <SystemCoreClockUpdate+0x94>
				break;
   82f76:	e00e      	b.n	82f96 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   82f78:	4b3c      	ldr	r3, [pc, #240]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82f7a:	681b      	ldr	r3, [r3, #0]
   82f7c:	005b      	lsls	r3, r3, #1
   82f7e:	4a3b      	ldr	r2, [pc, #236]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82f80:	6013      	str	r3, [r2, #0]
				break;
   82f82:	e008      	b.n	82f96 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   82f84:	4b39      	ldr	r3, [pc, #228]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82f86:	681a      	ldr	r2, [r3, #0]
   82f88:	4613      	mov	r3, r2
   82f8a:	005b      	lsls	r3, r3, #1
   82f8c:	4413      	add	r3, r2
   82f8e:	4a37      	ldr	r2, [pc, #220]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82f90:	6013      	str	r3, [r2, #0]
				break;
   82f92:	e000      	b.n	82f96 <SystemCoreClockUpdate+0x96>
				break;
   82f94:	bf00      	nop
		break;
   82f96:	e046      	b.n	83026 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82f98:	4b32      	ldr	r3, [pc, #200]	; (83064 <SystemCoreClockUpdate+0x164>)
   82f9a:	6a1b      	ldr	r3, [r3, #32]
   82f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82fa0:	2b00      	cmp	r3, #0
   82fa2:	d003      	beq.n	82fac <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82fa4:	4b31      	ldr	r3, [pc, #196]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82fa6:	4a32      	ldr	r2, [pc, #200]	; (83070 <SystemCoreClockUpdate+0x170>)
   82fa8:	601a      	str	r2, [r3, #0]
   82faa:	e01c      	b.n	82fe6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82fac:	4b2f      	ldr	r3, [pc, #188]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82fae:	4a31      	ldr	r2, [pc, #196]	; (83074 <SystemCoreClockUpdate+0x174>)
   82fb0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82fb2:	4b2c      	ldr	r3, [pc, #176]	; (83064 <SystemCoreClockUpdate+0x164>)
   82fb4:	6a1b      	ldr	r3, [r3, #32]
   82fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82fba:	2b10      	cmp	r3, #16
   82fbc:	d004      	beq.n	82fc8 <SystemCoreClockUpdate+0xc8>
   82fbe:	2b20      	cmp	r3, #32
   82fc0:	d008      	beq.n	82fd4 <SystemCoreClockUpdate+0xd4>
   82fc2:	2b00      	cmp	r3, #0
   82fc4:	d00e      	beq.n	82fe4 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82fc6:	e00e      	b.n	82fe6 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   82fc8:	4b28      	ldr	r3, [pc, #160]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82fca:	681b      	ldr	r3, [r3, #0]
   82fcc:	005b      	lsls	r3, r3, #1
   82fce:	4a27      	ldr	r2, [pc, #156]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82fd0:	6013      	str	r3, [r2, #0]
				break;
   82fd2:	e008      	b.n	82fe6 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   82fd4:	4b25      	ldr	r3, [pc, #148]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82fd6:	681a      	ldr	r2, [r3, #0]
   82fd8:	4613      	mov	r3, r2
   82fda:	005b      	lsls	r3, r3, #1
   82fdc:	4413      	add	r3, r2
   82fde:	4a23      	ldr	r2, [pc, #140]	; (8306c <SystemCoreClockUpdate+0x16c>)
   82fe0:	6013      	str	r3, [r2, #0]
				break;
   82fe2:	e000      	b.n	82fe6 <SystemCoreClockUpdate+0xe6>
				break;
   82fe4:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82fe6:	4b1f      	ldr	r3, [pc, #124]	; (83064 <SystemCoreClockUpdate+0x164>)
   82fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82fea:	f003 0303 	and.w	r3, r3, #3
   82fee:	2b02      	cmp	r3, #2
   82ff0:	d115      	bne.n	8301e <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82ff2:	4b1c      	ldr	r3, [pc, #112]	; (83064 <SystemCoreClockUpdate+0x164>)
   82ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82ff6:	0c1b      	lsrs	r3, r3, #16
   82ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   82ffc:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82ffe:	4a1b      	ldr	r2, [pc, #108]	; (8306c <SystemCoreClockUpdate+0x16c>)
   83000:	6812      	ldr	r2, [r2, #0]
   83002:	fb02 f303 	mul.w	r3, r2, r3
   83006:	4a19      	ldr	r2, [pc, #100]	; (8306c <SystemCoreClockUpdate+0x16c>)
   83008:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8300a:	4b16      	ldr	r3, [pc, #88]	; (83064 <SystemCoreClockUpdate+0x164>)
   8300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8300e:	b2db      	uxtb	r3, r3
   83010:	4a16      	ldr	r2, [pc, #88]	; (8306c <SystemCoreClockUpdate+0x16c>)
   83012:	6812      	ldr	r2, [r2, #0]
   83014:	fbb2 f3f3 	udiv	r3, r2, r3
   83018:	4a14      	ldr	r2, [pc, #80]	; (8306c <SystemCoreClockUpdate+0x16c>)
   8301a:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   8301c:	e002      	b.n	83024 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8301e:	4b13      	ldr	r3, [pc, #76]	; (8306c <SystemCoreClockUpdate+0x16c>)
   83020:	4a15      	ldr	r2, [pc, #84]	; (83078 <SystemCoreClockUpdate+0x178>)
   83022:	601a      	str	r2, [r3, #0]
		break;
   83024:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83026:	4b0f      	ldr	r3, [pc, #60]	; (83064 <SystemCoreClockUpdate+0x164>)
   83028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8302a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8302e:	2b70      	cmp	r3, #112	; 0x70
   83030:	d108      	bne.n	83044 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   83032:	4b0e      	ldr	r3, [pc, #56]	; (8306c <SystemCoreClockUpdate+0x16c>)
   83034:	681b      	ldr	r3, [r3, #0]
   83036:	4a11      	ldr	r2, [pc, #68]	; (8307c <SystemCoreClockUpdate+0x17c>)
   83038:	fba2 2303 	umull	r2, r3, r2, r3
   8303c:	085b      	lsrs	r3, r3, #1
   8303e:	4a0b      	ldr	r2, [pc, #44]	; (8306c <SystemCoreClockUpdate+0x16c>)
   83040:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   83042:	e00a      	b.n	8305a <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83044:	4b07      	ldr	r3, [pc, #28]	; (83064 <SystemCoreClockUpdate+0x164>)
   83046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83048:	091b      	lsrs	r3, r3, #4
   8304a:	f003 0307 	and.w	r3, r3, #7
   8304e:	4a07      	ldr	r2, [pc, #28]	; (8306c <SystemCoreClockUpdate+0x16c>)
   83050:	6812      	ldr	r2, [r2, #0]
   83052:	fa22 f303 	lsr.w	r3, r2, r3
   83056:	4a05      	ldr	r2, [pc, #20]	; (8306c <SystemCoreClockUpdate+0x16c>)
   83058:	6013      	str	r3, [r2, #0]
}
   8305a:	bf00      	nop
   8305c:	46bd      	mov	sp, r7
   8305e:	bc80      	pop	{r7}
   83060:	4770      	bx	lr
   83062:	bf00      	nop
   83064:	400e0600 	.word	0x400e0600
   83068:	400e1a10 	.word	0x400e1a10
   8306c:	20070198 	.word	0x20070198
   83070:	00b71b00 	.word	0x00b71b00
   83074:	003d0900 	.word	0x003d0900
   83078:	0e4e1c00 	.word	0x0e4e1c00
   8307c:	aaaaaaab 	.word	0xaaaaaaab

00083080 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   83080:	b480      	push	{r7}
   83082:	b085      	sub	sp, #20
   83084:	af00      	add	r7, sp, #0
   83086:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   83088:	4b10      	ldr	r3, [pc, #64]	; (830cc <_sbrk+0x4c>)
   8308a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   8308c:	4b10      	ldr	r3, [pc, #64]	; (830d0 <_sbrk+0x50>)
   8308e:	681b      	ldr	r3, [r3, #0]
   83090:	2b00      	cmp	r3, #0
   83092:	d102      	bne.n	8309a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   83094:	4b0e      	ldr	r3, [pc, #56]	; (830d0 <_sbrk+0x50>)
   83096:	4a0f      	ldr	r2, [pc, #60]	; (830d4 <_sbrk+0x54>)
   83098:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8309a:	4b0d      	ldr	r3, [pc, #52]	; (830d0 <_sbrk+0x50>)
   8309c:	681b      	ldr	r3, [r3, #0]
   8309e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   830a0:	68ba      	ldr	r2, [r7, #8]
   830a2:	687b      	ldr	r3, [r7, #4]
   830a4:	441a      	add	r2, r3
   830a6:	68fb      	ldr	r3, [r7, #12]
   830a8:	429a      	cmp	r2, r3
   830aa:	dd02      	ble.n	830b2 <_sbrk+0x32>
		return (caddr_t) -1;	
   830ac:	f04f 33ff 	mov.w	r3, #4294967295
   830b0:	e006      	b.n	830c0 <_sbrk+0x40>
	}

	heap += incr;
   830b2:	4b07      	ldr	r3, [pc, #28]	; (830d0 <_sbrk+0x50>)
   830b4:	681a      	ldr	r2, [r3, #0]
   830b6:	687b      	ldr	r3, [r7, #4]
   830b8:	4413      	add	r3, r2
   830ba:	4a05      	ldr	r2, [pc, #20]	; (830d0 <_sbrk+0x50>)
   830bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   830be:	68bb      	ldr	r3, [r7, #8]
}
   830c0:	4618      	mov	r0, r3
   830c2:	3714      	adds	r7, #20
   830c4:	46bd      	mov	sp, r7
   830c6:	bc80      	pop	{r7}
   830c8:	4770      	bx	lr
   830ca:	bf00      	nop
   830cc:	20087ffc 	.word	0x20087ffc
   830d0:	20070fac 	.word	0x20070fac
   830d4:	20073060 	.word	0x20073060

000830d8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   830d8:	b480      	push	{r7}
   830da:	b083      	sub	sp, #12
   830dc:	af00      	add	r7, sp, #0
   830de:	4603      	mov	r3, r0
   830e0:	6039      	str	r1, [r7, #0]
   830e2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   830e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   830e8:	2b00      	cmp	r3, #0
   830ea:	da0b      	bge.n	83104 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   830ec:	490d      	ldr	r1, [pc, #52]	; (83124 <NVIC_SetPriority+0x4c>)
   830ee:	79fb      	ldrb	r3, [r7, #7]
   830f0:	f003 030f 	and.w	r3, r3, #15
   830f4:	3b04      	subs	r3, #4
   830f6:	683a      	ldr	r2, [r7, #0]
   830f8:	b2d2      	uxtb	r2, r2
   830fa:	0112      	lsls	r2, r2, #4
   830fc:	b2d2      	uxtb	r2, r2
   830fe:	440b      	add	r3, r1
   83100:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   83102:	e009      	b.n	83118 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83104:	4908      	ldr	r1, [pc, #32]	; (83128 <NVIC_SetPriority+0x50>)
   83106:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8310a:	683a      	ldr	r2, [r7, #0]
   8310c:	b2d2      	uxtb	r2, r2
   8310e:	0112      	lsls	r2, r2, #4
   83110:	b2d2      	uxtb	r2, r2
   83112:	440b      	add	r3, r1
   83114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   83118:	bf00      	nop
   8311a:	370c      	adds	r7, #12
   8311c:	46bd      	mov	sp, r7
   8311e:	bc80      	pop	{r7}
   83120:	4770      	bx	lr
   83122:	bf00      	nop
   83124:	e000ed00 	.word	0xe000ed00
   83128:	e000e100 	.word	0xe000e100

0008312c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   8312c:	b580      	push	{r7, lr}
   8312e:	b082      	sub	sp, #8
   83130:	af00      	add	r7, sp, #0
   83132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   83134:	687b      	ldr	r3, [r7, #4]
   83136:	3b01      	subs	r3, #1
   83138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   8313c:	d301      	bcc.n	83142 <SysTick_Config+0x16>
   8313e:	2301      	movs	r3, #1
   83140:	e00f      	b.n	83162 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   83142:	4a0a      	ldr	r2, [pc, #40]	; (8316c <SysTick_Config+0x40>)
   83144:	687b      	ldr	r3, [r7, #4]
   83146:	3b01      	subs	r3, #1
   83148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   8314a:	210f      	movs	r1, #15
   8314c:	f04f 30ff 	mov.w	r0, #4294967295
   83150:	4b07      	ldr	r3, [pc, #28]	; (83170 <SysTick_Config+0x44>)
   83152:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   83154:	4b05      	ldr	r3, [pc, #20]	; (8316c <SysTick_Config+0x40>)
   83156:	2200      	movs	r2, #0
   83158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   8315a:	4b04      	ldr	r3, [pc, #16]	; (8316c <SysTick_Config+0x40>)
   8315c:	2207      	movs	r2, #7
   8315e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   83160:	2300      	movs	r3, #0
}
   83162:	4618      	mov	r0, r3
   83164:	3708      	adds	r7, #8
   83166:	46bd      	mov	sp, r7
   83168:	bd80      	pop	{r7, pc}
   8316a:	bf00      	nop
   8316c:	e000e010 	.word	0xe000e010
   83170:	000830d9 	.word	0x000830d9

00083174 <osc_get_rate>:
{
   83174:	b480      	push	{r7}
   83176:	b083      	sub	sp, #12
   83178:	af00      	add	r7, sp, #0
   8317a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8317c:	687b      	ldr	r3, [r7, #4]
   8317e:	2b07      	cmp	r3, #7
   83180:	d825      	bhi.n	831ce <osc_get_rate+0x5a>
   83182:	a201      	add	r2, pc, #4	; (adr r2, 83188 <osc_get_rate+0x14>)
   83184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83188:	000831a9 	.word	0x000831a9
   8318c:	000831af 	.word	0x000831af
   83190:	000831b5 	.word	0x000831b5
   83194:	000831bb 	.word	0x000831bb
   83198:	000831bf 	.word	0x000831bf
   8319c:	000831c3 	.word	0x000831c3
   831a0:	000831c7 	.word	0x000831c7
   831a4:	000831cb 	.word	0x000831cb
		return OSC_SLCK_32K_RC_HZ;
   831a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   831ac:	e010      	b.n	831d0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   831ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   831b2:	e00d      	b.n	831d0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   831b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   831b8:	e00a      	b.n	831d0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   831ba:	4b08      	ldr	r3, [pc, #32]	; (831dc <osc_get_rate+0x68>)
   831bc:	e008      	b.n	831d0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   831be:	4b08      	ldr	r3, [pc, #32]	; (831e0 <osc_get_rate+0x6c>)
   831c0:	e006      	b.n	831d0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   831c2:	4b08      	ldr	r3, [pc, #32]	; (831e4 <osc_get_rate+0x70>)
   831c4:	e004      	b.n	831d0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   831c6:	4b07      	ldr	r3, [pc, #28]	; (831e4 <osc_get_rate+0x70>)
   831c8:	e002      	b.n	831d0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   831ca:	4b06      	ldr	r3, [pc, #24]	; (831e4 <osc_get_rate+0x70>)
   831cc:	e000      	b.n	831d0 <osc_get_rate+0x5c>
	return 0;
   831ce:	2300      	movs	r3, #0
}
   831d0:	4618      	mov	r0, r3
   831d2:	370c      	adds	r7, #12
   831d4:	46bd      	mov	sp, r7
   831d6:	bc80      	pop	{r7}
   831d8:	4770      	bx	lr
   831da:	bf00      	nop
   831dc:	003d0900 	.word	0x003d0900
   831e0:	007a1200 	.word	0x007a1200
   831e4:	00b71b00 	.word	0x00b71b00

000831e8 <sysclk_get_main_hz>:
{
   831e8:	b580      	push	{r7, lr}
   831ea:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   831ec:	2006      	movs	r0, #6
   831ee:	4b04      	ldr	r3, [pc, #16]	; (83200 <sysclk_get_main_hz+0x18>)
   831f0:	4798      	blx	r3
   831f2:	4602      	mov	r2, r0
   831f4:	4613      	mov	r3, r2
   831f6:	00db      	lsls	r3, r3, #3
   831f8:	1a9b      	subs	r3, r3, r2
   831fa:	005b      	lsls	r3, r3, #1
}
   831fc:	4618      	mov	r0, r3
   831fe:	bd80      	pop	{r7, pc}
   83200:	00083175 	.word	0x00083175

00083204 <sysclk_get_cpu_hz>:
{
   83204:	b580      	push	{r7, lr}
   83206:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83208:	4b02      	ldr	r3, [pc, #8]	; (83214 <sysclk_get_cpu_hz+0x10>)
   8320a:	4798      	blx	r3
   8320c:	4603      	mov	r3, r0
   8320e:	085b      	lsrs	r3, r3, #1
}
   83210:	4618      	mov	r0, r3
   83212:	bd80      	pop	{r7, pc}
   83214:	000831e9 	.word	0x000831e9

00083218 <ioport_set_pin_level>:
{
   83218:	b480      	push	{r7}
   8321a:	b08b      	sub	sp, #44	; 0x2c
   8321c:	af00      	add	r7, sp, #0
   8321e:	6078      	str	r0, [r7, #4]
   83220:	460b      	mov	r3, r1
   83222:	70fb      	strb	r3, [r7, #3]
   83224:	687b      	ldr	r3, [r7, #4]
   83226:	627b      	str	r3, [r7, #36]	; 0x24
   83228:	78fb      	ldrb	r3, [r7, #3]
   8322a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   8322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83230:	61fb      	str	r3, [r7, #28]
   83232:	69fb      	ldr	r3, [r7, #28]
   83234:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83236:	69bb      	ldr	r3, [r7, #24]
   83238:	095b      	lsrs	r3, r3, #5
   8323a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8323c:	697b      	ldr	r3, [r7, #20]
   8323e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83242:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83246:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83248:	613b      	str	r3, [r7, #16]
	if (level) {
   8324a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8324e:	2b00      	cmp	r3, #0
   83250:	d009      	beq.n	83266 <ioport_set_pin_level+0x4e>
   83252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83254:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83256:	68fb      	ldr	r3, [r7, #12]
   83258:	f003 031f 	and.w	r3, r3, #31
   8325c:	2201      	movs	r2, #1
   8325e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   83260:	693b      	ldr	r3, [r7, #16]
   83262:	631a      	str	r2, [r3, #48]	; 0x30
}
   83264:	e008      	b.n	83278 <ioport_set_pin_level+0x60>
   83266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83268:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   8326a:	68bb      	ldr	r3, [r7, #8]
   8326c:	f003 031f 	and.w	r3, r3, #31
   83270:	2201      	movs	r2, #1
   83272:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83274:	693b      	ldr	r3, [r7, #16]
   83276:	635a      	str	r2, [r3, #52]	; 0x34
   83278:	bf00      	nop
   8327a:	372c      	adds	r7, #44	; 0x2c
   8327c:	46bd      	mov	sp, r7
   8327e:	bc80      	pop	{r7}
   83280:	4770      	bx	lr

00083282 <ioport_get_pin_level>:
{
   83282:	b480      	push	{r7}
   83284:	b089      	sub	sp, #36	; 0x24
   83286:	af00      	add	r7, sp, #0
   83288:	6078      	str	r0, [r7, #4]
   8328a:	687b      	ldr	r3, [r7, #4]
   8328c:	61fb      	str	r3, [r7, #28]
   8328e:	69fb      	ldr	r3, [r7, #28]
   83290:	61bb      	str	r3, [r7, #24]
   83292:	69bb      	ldr	r3, [r7, #24]
   83294:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   83296:	697b      	ldr	r3, [r7, #20]
   83298:	095b      	lsrs	r3, r3, #5
   8329a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8329c:	693b      	ldr	r3, [r7, #16]
   8329e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   832a2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   832a6:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   832a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   832aa:	69fb      	ldr	r3, [r7, #28]
   832ac:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   832ae:	68fb      	ldr	r3, [r7, #12]
   832b0:	f003 031f 	and.w	r3, r3, #31
   832b4:	2101      	movs	r1, #1
   832b6:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   832ba:	4013      	ands	r3, r2
   832bc:	2b00      	cmp	r3, #0
   832be:	bf14      	ite	ne
   832c0:	2301      	movne	r3, #1
   832c2:	2300      	moveq	r3, #0
   832c4:	b2db      	uxtb	r3, r3
}
   832c6:	4618      	mov	r0, r3
   832c8:	3724      	adds	r7, #36	; 0x24
   832ca:	46bd      	mov	sp, r7
   832cc:	bc80      	pop	{r7}
   832ce:	4770      	bx	lr

000832d0 <main>:
FIL file_object;*/

void noOS_bootup_sequence(void);

int main(void)
{
   832d0:	b580      	push	{r7, lr}
   832d2:	b082      	sub	sp, #8
   832d4:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   832d6:	4b26      	ldr	r3, [pc, #152]	; (83370 <main+0xa0>)
   832d8:	4798      	blx	r3
    board_init();
   832da:	4b26      	ldr	r3, [pc, #152]	; (83374 <main+0xa4>)
   832dc:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   832de:	4b26      	ldr	r3, [pc, #152]	; (83378 <main+0xa8>)
   832e0:	4798      	blx	r3
   832e2:	4602      	mov	r2, r0
   832e4:	4b25      	ldr	r3, [pc, #148]	; (8337c <main+0xac>)
   832e6:	fba3 2302 	umull	r2, r3, r3, r2
   832ea:	099b      	lsrs	r3, r3, #6
   832ec:	4618      	mov	r0, r3
   832ee:	4b24      	ldr	r3, [pc, #144]	; (83380 <main+0xb0>)
   832f0:	4798      	blx	r3
    
    //sd_mmc_init();
    
    spi_init();
   832f2:	4b24      	ldr	r3, [pc, #144]	; (83384 <main+0xb4>)
   832f4:	4798      	blx	r3
    
    lcd_init();
   832f6:	4b24      	ldr	r3, [pc, #144]	; (83388 <main+0xb8>)
   832f8:	4798      	blx	r3
    bl_state = LCD_LIGHT_ON;
   832fa:	4b24      	ldr	r3, [pc, #144]	; (8338c <main+0xbc>)
   832fc:	2208      	movs	r2, #8
   832fe:	701a      	strb	r2, [r3, #0]
    lcd_set_backlight(bl_state);
   83300:	4b22      	ldr	r3, [pc, #136]	; (8338c <main+0xbc>)
   83302:	781b      	ldrb	r3, [r3, #0]
   83304:	4618      	mov	r0, r3
   83306:	4b22      	ldr	r3, [pc, #136]	; (83390 <main+0xc0>)
   83308:	4798      	blx	r3
main_end_of_test:
        //printf("Please unplug the card.\n\r");
        //while (CTRL_NO_PRESENT != sd_mmc_check(0));
//    }*/
    
    noOS_bootup_sequence();
   8330a:	4b22      	ldr	r3, [pc, #136]	; (83394 <main+0xc4>)
   8330c:	4798      	blx	r3
    
    lcd_clear();
   8330e:	4b22      	ldr	r3, [pc, #136]	; (83398 <main+0xc8>)
   83310:	4798      	blx	r3
    
    while (1)
    {
        update_comm();
   83312:	4b22      	ldr	r3, [pc, #136]	; (8339c <main+0xcc>)
   83314:	4798      	blx	r3
        update_heartbeat();
   83316:	4b22      	ldr	r3, [pc, #136]	; (833a0 <main+0xd0>)
   83318:	4798      	blx	r3
        update_battery(0);
   8331a:	2000      	movs	r0, #0
   8331c:	4b21      	ldr	r3, [pc, #132]	; (833a4 <main+0xd4>)
   8331e:	4798      	blx	r3
        
        if (stm.ibit.heartbeat)
   83320:	4b21      	ldr	r3, [pc, #132]	; (833a8 <main+0xd8>)
   83322:	781b      	ldrb	r3, [r3, #0]
   83324:	f003 0301 	and.w	r3, r3, #1
   83328:	b2db      	uxtb	r3, r3
   8332a:	2b00      	cmp	r3, #0
   8332c:	d004      	beq.n	83338 <main+0x68>
        {
            ioport_set_pin_level(LED_M2, 1);
   8332e:	2101      	movs	r1, #1
   83330:	2068      	movs	r0, #104	; 0x68
   83332:	4b1e      	ldr	r3, [pc, #120]	; (833ac <main+0xdc>)
   83334:	4798      	blx	r3
   83336:	e003      	b.n	83340 <main+0x70>
        }
        else
        {
            ioport_set_pin_level(LED_M2, 0);
   83338:	2100      	movs	r1, #0
   8333a:	2068      	movs	r0, #104	; 0x68
   8333c:	4b1b      	ldr	r3, [pc, #108]	; (833ac <main+0xdc>)
   8333e:	4798      	blx	r3
        }
        
        act_event = button_events();
   83340:	4b1b      	ldr	r3, [pc, #108]	; (833b0 <main+0xe0>)
   83342:	4798      	blx	r3
   83344:	4603      	mov	r3, r0
   83346:	71fb      	strb	r3, [r7, #7]
        
        menu(act_event);
   83348:	79fb      	ldrb	r3, [r7, #7]
   8334a:	4618      	mov	r0, r3
   8334c:	4b19      	ldr	r3, [pc, #100]	; (833b4 <main+0xe4>)
   8334e:	4798      	blx	r3
        
        if (act_event == EVENT_BUTTON_MID_H)
   83350:	79fb      	ldrb	r3, [r7, #7]
   83352:	2b08      	cmp	r3, #8
   83354:	d105      	bne.n	83362 <main+0x92>
        {
            mts.ibit.button = 1;
   83356:	4a18      	ldr	r2, [pc, #96]	; (833b8 <main+0xe8>)
   83358:	7813      	ldrb	r3, [r2, #0]
   8335a:	f043 0302 	orr.w	r3, r3, #2
   8335e:	7013      	strb	r3, [r2, #0]
   83360:	e7d7      	b.n	83312 <main+0x42>
        }
        else
        {
            mts.ibit.button = 0;
   83362:	4a15      	ldr	r2, [pc, #84]	; (833b8 <main+0xe8>)
   83364:	7813      	ldrb	r3, [r2, #0]
   83366:	f36f 0341 	bfc	r3, #1, #1
   8336a:	7013      	strb	r3, [r2, #0]
        update_comm();
   8336c:	e7d1      	b.n	83312 <main+0x42>
   8336e:	bf00      	nop
   83370:	00082509 	.word	0x00082509
   83374:	00082ccd 	.word	0x00082ccd
   83378:	00083205 	.word	0x00083205
   8337c:	10624dd3 	.word	0x10624dd3
   83380:	0008312d 	.word	0x0008312d
   83384:	000805bd 	.word	0x000805bd
   83388:	00080e61 	.word	0x00080e61
   8338c:	20070fb0 	.word	0x20070fb0
   83390:	00080f3d 	.word	0x00080f3d
   83394:	000833bd 	.word	0x000833bd
   83398:	00080f71 	.word	0x00080f71
   8339c:	00081fb1 	.word	0x00081fb1
   833a0:	00082171 	.word	0x00082171
   833a4:	00081ff9 	.word	0x00081ff9
   833a8:	20070ff0 	.word	0x20070ff0
   833ac:	00083219 	.word	0x00083219
   833b0:	00081bfd 	.word	0x00081bfd
   833b4:	00081685 	.word	0x00081685
   833b8:	20070fec 	.word	0x20070fec

000833bc <noOS_bootup_sequence>:
        }  
    }
}

void noOS_bootup_sequence(void)
{
   833bc:	b580      	push	{r7, lr}
   833be:	b082      	sub	sp, #8
   833c0:	af00      	add	r7, sp, #0
    while (ioport_get_pin_level(PB_MID))
   833c2:	e072      	b.n	834aa <noOS_bootup_sequence+0xee>
    {
        if (getTicks() >= (ticks_blink_update + 800))
   833c4:	4b59      	ldr	r3, [pc, #356]	; (8352c <noOS_bootup_sequence+0x170>)
   833c6:	4798      	blx	r3
   833c8:	4602      	mov	r2, r0
   833ca:	4b59      	ldr	r3, [pc, #356]	; (83530 <noOS_bootup_sequence+0x174>)
   833cc:	681b      	ldr	r3, [r3, #0]
   833ce:	f503 7348 	add.w	r3, r3, #800	; 0x320
   833d2:	429a      	cmp	r2, r3
   833d4:	d31a      	bcc.n	8340c <noOS_bootup_sequence+0x50>
        {
            ticks_blink_update = getTicks();
   833d6:	4b55      	ldr	r3, [pc, #340]	; (8352c <noOS_bootup_sequence+0x170>)
   833d8:	4798      	blx	r3
   833da:	4602      	mov	r2, r0
   833dc:	4b54      	ldr	r3, [pc, #336]	; (83530 <noOS_bootup_sequence+0x174>)
   833de:	601a      	str	r2, [r3, #0]
            
            if (blink_level)
   833e0:	4b54      	ldr	r3, [pc, #336]	; (83534 <noOS_bootup_sequence+0x178>)
   833e2:	781b      	ldrb	r3, [r3, #0]
   833e4:	2b00      	cmp	r3, #0
   833e6:	d003      	beq.n	833f0 <noOS_bootup_sequence+0x34>
            {
                blink_level = 0;
   833e8:	4b52      	ldr	r3, [pc, #328]	; (83534 <noOS_bootup_sequence+0x178>)
   833ea:	2200      	movs	r2, #0
   833ec:	701a      	strb	r2, [r3, #0]
   833ee:	e002      	b.n	833f6 <noOS_bootup_sequence+0x3a>
            }
            else
            {
                blink_level = 1;
   833f0:	4b50      	ldr	r3, [pc, #320]	; (83534 <noOS_bootup_sequence+0x178>)
   833f2:	2201      	movs	r2, #1
   833f4:	701a      	strb	r2, [r3, #0]
            }
            
            ioport_set_pin_level(LED_BAT, blink_level);
   833f6:	4b4f      	ldr	r3, [pc, #316]	; (83534 <noOS_bootup_sequence+0x178>)
   833f8:	781b      	ldrb	r3, [r3, #0]
   833fa:	2b00      	cmp	r3, #0
   833fc:	bf14      	ite	ne
   833fe:	2301      	movne	r3, #1
   83400:	2300      	moveq	r3, #0
   83402:	b2db      	uxtb	r3, r3
   83404:	4619      	mov	r1, r3
   83406:	2066      	movs	r0, #102	; 0x66
   83408:	4b4b      	ldr	r3, [pc, #300]	; (83538 <noOS_bootup_sequence+0x17c>)
   8340a:	4798      	blx	r3
        }
        
        if (getTicks() >= (ticks_dot_update + 500))
   8340c:	4b47      	ldr	r3, [pc, #284]	; (8352c <noOS_bootup_sequence+0x170>)
   8340e:	4798      	blx	r3
   83410:	4602      	mov	r2, r0
   83412:	4b4a      	ldr	r3, [pc, #296]	; (8353c <noOS_bootup_sequence+0x180>)
   83414:	681b      	ldr	r3, [r3, #0]
   83416:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   8341a:	429a      	cmp	r2, r3
   8341c:	d315      	bcc.n	8344a <noOS_bootup_sequence+0x8e>
        {
            ticks_dot_update = getTicks();
   8341e:	4b43      	ldr	r3, [pc, #268]	; (8352c <noOS_bootup_sequence+0x170>)
   83420:	4798      	blx	r3
   83422:	4602      	mov	r2, r0
   83424:	4b45      	ldr	r3, [pc, #276]	; (8353c <noOS_bootup_sequence+0x180>)
   83426:	601a      	str	r2, [r3, #0]
            
            if (dots < 3)
   83428:	4b45      	ldr	r3, [pc, #276]	; (83540 <noOS_bootup_sequence+0x184>)
   8342a:	781b      	ldrb	r3, [r3, #0]
   8342c:	2b02      	cmp	r3, #2
   8342e:	d806      	bhi.n	8343e <noOS_bootup_sequence+0x82>
            {
                dots++;
   83430:	4b43      	ldr	r3, [pc, #268]	; (83540 <noOS_bootup_sequence+0x184>)
   83432:	781b      	ldrb	r3, [r3, #0]
   83434:	3301      	adds	r3, #1
   83436:	b2da      	uxtb	r2, r3
   83438:	4b41      	ldr	r3, [pc, #260]	; (83540 <noOS_bootup_sequence+0x184>)
   8343a:	701a      	strb	r2, [r3, #0]
   8343c:	e002      	b.n	83444 <noOS_bootup_sequence+0x88>
            }
            else
            {
                dots = 0;
   8343e:	4b40      	ldr	r3, [pc, #256]	; (83540 <noOS_bootup_sequence+0x184>)
   83440:	2200      	movs	r2, #0
   83442:	701a      	strb	r2, [r3, #0]
            }
            
            update_dots = 1;
   83444:	4b3f      	ldr	r3, [pc, #252]	; (83544 <noOS_bootup_sequence+0x188>)
   83446:	2201      	movs	r2, #1
   83448:	701a      	strb	r2, [r3, #0]
        }
        
        if (update_dots)
   8344a:	4b3e      	ldr	r3, [pc, #248]	; (83544 <noOS_bootup_sequence+0x188>)
   8344c:	781b      	ldrb	r3, [r3, #0]
   8344e:	2b00      	cmp	r3, #0
   83450:	d02b      	beq.n	834aa <noOS_bootup_sequence+0xee>
        {
            update_dots = 0;
   83452:	4b3c      	ldr	r3, [pc, #240]	; (83544 <noOS_bootup_sequence+0x188>)
   83454:	2200      	movs	r2, #0
   83456:	701a      	strb	r2, [r3, #0]
            
            switch (dots)
   83458:	4b39      	ldr	r3, [pc, #228]	; (83540 <noOS_bootup_sequence+0x184>)
   8345a:	781b      	ldrb	r3, [r3, #0]
   8345c:	2b03      	cmp	r3, #3
   8345e:	d823      	bhi.n	834a8 <noOS_bootup_sequence+0xec>
   83460:	a201      	add	r2, pc, #4	; (adr r2, 83468 <noOS_bootup_sequence+0xac>)
   83462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83466:	bf00      	nop
   83468:	00083479 	.word	0x00083479
   8346c:	00083485 	.word	0x00083485
   83470:	00083491 	.word	0x00083491
   83474:	0008349d 	.word	0x0008349d
            {
                case 0:
                lcd_print_s(2, 2, "booting noOS   ");
   83478:	4a33      	ldr	r2, [pc, #204]	; (83548 <noOS_bootup_sequence+0x18c>)
   8347a:	2102      	movs	r1, #2
   8347c:	2002      	movs	r0, #2
   8347e:	4b33      	ldr	r3, [pc, #204]	; (8354c <noOS_bootup_sequence+0x190>)
   83480:	4798      	blx	r3
                break;
   83482:	e012      	b.n	834aa <noOS_bootup_sequence+0xee>
                case 1:
                lcd_print_s(2, 14, ".");
   83484:	4a32      	ldr	r2, [pc, #200]	; (83550 <noOS_bootup_sequence+0x194>)
   83486:	210e      	movs	r1, #14
   83488:	2002      	movs	r0, #2
   8348a:	4b30      	ldr	r3, [pc, #192]	; (8354c <noOS_bootup_sequence+0x190>)
   8348c:	4798      	blx	r3
                break;
   8348e:	e00c      	b.n	834aa <noOS_bootup_sequence+0xee>
                case 2:
                lcd_print_s(2, 15, ".");
   83490:	4a2f      	ldr	r2, [pc, #188]	; (83550 <noOS_bootup_sequence+0x194>)
   83492:	210f      	movs	r1, #15
   83494:	2002      	movs	r0, #2
   83496:	4b2d      	ldr	r3, [pc, #180]	; (8354c <noOS_bootup_sequence+0x190>)
   83498:	4798      	blx	r3
                break;
   8349a:	e006      	b.n	834aa <noOS_bootup_sequence+0xee>
                case 3:
                lcd_print_s(2, 16, ".");
   8349c:	4a2c      	ldr	r2, [pc, #176]	; (83550 <noOS_bootup_sequence+0x194>)
   8349e:	2110      	movs	r1, #16
   834a0:	2002      	movs	r0, #2
   834a2:	4b2a      	ldr	r3, [pc, #168]	; (8354c <noOS_bootup_sequence+0x190>)
   834a4:	4798      	blx	r3
                break;
   834a6:	e000      	b.n	834aa <noOS_bootup_sequence+0xee>
                default:
                break;
   834a8:	bf00      	nop
    while (ioport_get_pin_level(PB_MID))
   834aa:	2062      	movs	r0, #98	; 0x62
   834ac:	4b29      	ldr	r3, [pc, #164]	; (83554 <noOS_bootup_sequence+0x198>)
   834ae:	4798      	blx	r3
   834b0:	4603      	mov	r3, r0
   834b2:	2b00      	cmp	r3, #0
   834b4:	d186      	bne.n	833c4 <noOS_bootup_sequence+0x8>
            }
        }
    }
    
    for(int i = 0; i< 3; i++)
   834b6:	2300      	movs	r3, #0
   834b8:	607b      	str	r3, [r7, #4]
   834ba:	e030      	b.n	8351e <noOS_bootup_sequence+0x162>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   834bc:	2101      	movs	r1, #1
   834be:	206a      	movs	r0, #106	; 0x6a
   834c0:	4b1d      	ldr	r3, [pc, #116]	; (83538 <noOS_bootup_sequence+0x17c>)
   834c2:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 1);
   834c4:	2101      	movs	r1, #1
   834c6:	2066      	movs	r0, #102	; 0x66
   834c8:	4b1b      	ldr	r3, [pc, #108]	; (83538 <noOS_bootup_sequence+0x17c>)
   834ca:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 1);
   834cc:	2101      	movs	r1, #1
   834ce:	2067      	movs	r0, #103	; 0x67
   834d0:	4b19      	ldr	r3, [pc, #100]	; (83538 <noOS_bootup_sequence+0x17c>)
   834d2:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 1);
   834d4:	2101      	movs	r1, #1
   834d6:	2068      	movs	r0, #104	; 0x68
   834d8:	4b17      	ldr	r3, [pc, #92]	; (83538 <noOS_bootup_sequence+0x17c>)
   834da:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 1);
   834dc:	2101      	movs	r1, #1
   834de:	2069      	movs	r0, #105	; 0x69
   834e0:	4b15      	ldr	r3, [pc, #84]	; (83538 <noOS_bootup_sequence+0x17c>)
   834e2:	4798      	blx	r3
        mdelay(100);
   834e4:	2064      	movs	r0, #100	; 0x64
   834e6:	4b1c      	ldr	r3, [pc, #112]	; (83558 <noOS_bootup_sequence+0x19c>)
   834e8:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   834ea:	2100      	movs	r1, #0
   834ec:	206a      	movs	r0, #106	; 0x6a
   834ee:	4b12      	ldr	r3, [pc, #72]	; (83538 <noOS_bootup_sequence+0x17c>)
   834f0:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   834f2:	2100      	movs	r1, #0
   834f4:	2066      	movs	r0, #102	; 0x66
   834f6:	4b10      	ldr	r3, [pc, #64]	; (83538 <noOS_bootup_sequence+0x17c>)
   834f8:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   834fa:	2100      	movs	r1, #0
   834fc:	2067      	movs	r0, #103	; 0x67
   834fe:	4b0e      	ldr	r3, [pc, #56]	; (83538 <noOS_bootup_sequence+0x17c>)
   83500:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   83502:	2100      	movs	r1, #0
   83504:	2068      	movs	r0, #104	; 0x68
   83506:	4b0c      	ldr	r3, [pc, #48]	; (83538 <noOS_bootup_sequence+0x17c>)
   83508:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   8350a:	2100      	movs	r1, #0
   8350c:	2069      	movs	r0, #105	; 0x69
   8350e:	4b0a      	ldr	r3, [pc, #40]	; (83538 <noOS_bootup_sequence+0x17c>)
   83510:	4798      	blx	r3
        mdelay(100);
   83512:	2064      	movs	r0, #100	; 0x64
   83514:	4b10      	ldr	r3, [pc, #64]	; (83558 <noOS_bootup_sequence+0x19c>)
   83516:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   83518:	687b      	ldr	r3, [r7, #4]
   8351a:	3301      	adds	r3, #1
   8351c:	607b      	str	r3, [r7, #4]
   8351e:	687b      	ldr	r3, [r7, #4]
   83520:	2b02      	cmp	r3, #2
   83522:	ddcb      	ble.n	834bc <noOS_bootup_sequence+0x100>
    }
}
   83524:	bf00      	nop
   83526:	3708      	adds	r7, #8
   83528:	46bd      	mov	sp, r7
   8352a:	bd80      	pop	{r7, pc}
   8352c:	00081f71 	.word	0x00081f71
   83530:	20071030 	.word	0x20071030
   83534:	2007102c 	.word	0x2007102c
   83538:	00083219 	.word	0x00083219
   8353c:	20071034 	.word	0x20071034
   83540:	20070fb1 	.word	0x20070fb1
   83544:	2007019c 	.word	0x2007019c
   83548:	00087f90 	.word	0x00087f90
   8354c:	00080f91 	.word	0x00080f91
   83550:	00087fa0 	.word	0x00087fa0
   83554:	00083283 	.word	0x00083283
   83558:	00081f85 	.word	0x00081f85

0008355c <__libc_init_array>:
   8355c:	b570      	push	{r4, r5, r6, lr}
   8355e:	4e0f      	ldr	r6, [pc, #60]	; (8359c <__libc_init_array+0x40>)
   83560:	4d0f      	ldr	r5, [pc, #60]	; (835a0 <__libc_init_array+0x44>)
   83562:	1b76      	subs	r6, r6, r5
   83564:	10b6      	asrs	r6, r6, #2
   83566:	bf18      	it	ne
   83568:	2400      	movne	r4, #0
   8356a:	d005      	beq.n	83578 <__libc_init_array+0x1c>
   8356c:	3401      	adds	r4, #1
   8356e:	f855 3b04 	ldr.w	r3, [r5], #4
   83572:	4798      	blx	r3
   83574:	42a6      	cmp	r6, r4
   83576:	d1f9      	bne.n	8356c <__libc_init_array+0x10>
   83578:	4e0a      	ldr	r6, [pc, #40]	; (835a4 <__libc_init_array+0x48>)
   8357a:	4d0b      	ldr	r5, [pc, #44]	; (835a8 <__libc_init_array+0x4c>)
   8357c:	f004 fe58 	bl	88230 <_init>
   83580:	1b76      	subs	r6, r6, r5
   83582:	10b6      	asrs	r6, r6, #2
   83584:	bf18      	it	ne
   83586:	2400      	movne	r4, #0
   83588:	d006      	beq.n	83598 <__libc_init_array+0x3c>
   8358a:	3401      	adds	r4, #1
   8358c:	f855 3b04 	ldr.w	r3, [r5], #4
   83590:	4798      	blx	r3
   83592:	42a6      	cmp	r6, r4
   83594:	d1f9      	bne.n	8358a <__libc_init_array+0x2e>
   83596:	bd70      	pop	{r4, r5, r6, pc}
   83598:	bd70      	pop	{r4, r5, r6, pc}
   8359a:	bf00      	nop
   8359c:	0008823c 	.word	0x0008823c
   835a0:	0008823c 	.word	0x0008823c
   835a4:	00088244 	.word	0x00088244
   835a8:	0008823c 	.word	0x0008823c

000835ac <memcpy>:
   835ac:	4684      	mov	ip, r0
   835ae:	ea41 0300 	orr.w	r3, r1, r0
   835b2:	f013 0303 	ands.w	r3, r3, #3
   835b6:	d149      	bne.n	8364c <memcpy+0xa0>
   835b8:	3a40      	subs	r2, #64	; 0x40
   835ba:	d323      	bcc.n	83604 <memcpy+0x58>
   835bc:	680b      	ldr	r3, [r1, #0]
   835be:	6003      	str	r3, [r0, #0]
   835c0:	684b      	ldr	r3, [r1, #4]
   835c2:	6043      	str	r3, [r0, #4]
   835c4:	688b      	ldr	r3, [r1, #8]
   835c6:	6083      	str	r3, [r0, #8]
   835c8:	68cb      	ldr	r3, [r1, #12]
   835ca:	60c3      	str	r3, [r0, #12]
   835cc:	690b      	ldr	r3, [r1, #16]
   835ce:	6103      	str	r3, [r0, #16]
   835d0:	694b      	ldr	r3, [r1, #20]
   835d2:	6143      	str	r3, [r0, #20]
   835d4:	698b      	ldr	r3, [r1, #24]
   835d6:	6183      	str	r3, [r0, #24]
   835d8:	69cb      	ldr	r3, [r1, #28]
   835da:	61c3      	str	r3, [r0, #28]
   835dc:	6a0b      	ldr	r3, [r1, #32]
   835de:	6203      	str	r3, [r0, #32]
   835e0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   835e2:	6243      	str	r3, [r0, #36]	; 0x24
   835e4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   835e6:	6283      	str	r3, [r0, #40]	; 0x28
   835e8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   835ea:	62c3      	str	r3, [r0, #44]	; 0x2c
   835ec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   835ee:	6303      	str	r3, [r0, #48]	; 0x30
   835f0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   835f2:	6343      	str	r3, [r0, #52]	; 0x34
   835f4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   835f6:	6383      	str	r3, [r0, #56]	; 0x38
   835f8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   835fa:	63c3      	str	r3, [r0, #60]	; 0x3c
   835fc:	3040      	adds	r0, #64	; 0x40
   835fe:	3140      	adds	r1, #64	; 0x40
   83600:	3a40      	subs	r2, #64	; 0x40
   83602:	d2db      	bcs.n	835bc <memcpy+0x10>
   83604:	3230      	adds	r2, #48	; 0x30
   83606:	d30b      	bcc.n	83620 <memcpy+0x74>
   83608:	680b      	ldr	r3, [r1, #0]
   8360a:	6003      	str	r3, [r0, #0]
   8360c:	684b      	ldr	r3, [r1, #4]
   8360e:	6043      	str	r3, [r0, #4]
   83610:	688b      	ldr	r3, [r1, #8]
   83612:	6083      	str	r3, [r0, #8]
   83614:	68cb      	ldr	r3, [r1, #12]
   83616:	60c3      	str	r3, [r0, #12]
   83618:	3010      	adds	r0, #16
   8361a:	3110      	adds	r1, #16
   8361c:	3a10      	subs	r2, #16
   8361e:	d2f3      	bcs.n	83608 <memcpy+0x5c>
   83620:	320c      	adds	r2, #12
   83622:	d305      	bcc.n	83630 <memcpy+0x84>
   83624:	f851 3b04 	ldr.w	r3, [r1], #4
   83628:	f840 3b04 	str.w	r3, [r0], #4
   8362c:	3a04      	subs	r2, #4
   8362e:	d2f9      	bcs.n	83624 <memcpy+0x78>
   83630:	3204      	adds	r2, #4
   83632:	d008      	beq.n	83646 <memcpy+0x9a>
   83634:	07d2      	lsls	r2, r2, #31
   83636:	bf1c      	itt	ne
   83638:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8363c:	f800 3b01 	strbne.w	r3, [r0], #1
   83640:	d301      	bcc.n	83646 <memcpy+0x9a>
   83642:	880b      	ldrh	r3, [r1, #0]
   83644:	8003      	strh	r3, [r0, #0]
   83646:	4660      	mov	r0, ip
   83648:	4770      	bx	lr
   8364a:	bf00      	nop
   8364c:	2a08      	cmp	r2, #8
   8364e:	d313      	bcc.n	83678 <memcpy+0xcc>
   83650:	078b      	lsls	r3, r1, #30
   83652:	d0b1      	beq.n	835b8 <memcpy+0xc>
   83654:	f010 0303 	ands.w	r3, r0, #3
   83658:	d0ae      	beq.n	835b8 <memcpy+0xc>
   8365a:	f1c3 0304 	rsb	r3, r3, #4
   8365e:	1ad2      	subs	r2, r2, r3
   83660:	07db      	lsls	r3, r3, #31
   83662:	bf1c      	itt	ne
   83664:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83668:	f800 3b01 	strbne.w	r3, [r0], #1
   8366c:	d3a4      	bcc.n	835b8 <memcpy+0xc>
   8366e:	f831 3b02 	ldrh.w	r3, [r1], #2
   83672:	f820 3b02 	strh.w	r3, [r0], #2
   83676:	e79f      	b.n	835b8 <memcpy+0xc>
   83678:	3a04      	subs	r2, #4
   8367a:	d3d9      	bcc.n	83630 <memcpy+0x84>
   8367c:	3a01      	subs	r2, #1
   8367e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83682:	f800 3b01 	strb.w	r3, [r0], #1
   83686:	d2f9      	bcs.n	8367c <memcpy+0xd0>
   83688:	780b      	ldrb	r3, [r1, #0]
   8368a:	7003      	strb	r3, [r0, #0]
   8368c:	784b      	ldrb	r3, [r1, #1]
   8368e:	7043      	strb	r3, [r0, #1]
   83690:	788b      	ldrb	r3, [r1, #2]
   83692:	7083      	strb	r3, [r0, #2]
   83694:	4660      	mov	r0, ip
   83696:	4770      	bx	lr

00083698 <memset>:
   83698:	b470      	push	{r4, r5, r6}
   8369a:	0786      	lsls	r6, r0, #30
   8369c:	d046      	beq.n	8372c <memset+0x94>
   8369e:	1e54      	subs	r4, r2, #1
   836a0:	2a00      	cmp	r2, #0
   836a2:	d041      	beq.n	83728 <memset+0x90>
   836a4:	b2ca      	uxtb	r2, r1
   836a6:	4603      	mov	r3, r0
   836a8:	e002      	b.n	836b0 <memset+0x18>
   836aa:	f114 34ff 	adds.w	r4, r4, #4294967295
   836ae:	d33b      	bcc.n	83728 <memset+0x90>
   836b0:	f803 2b01 	strb.w	r2, [r3], #1
   836b4:	079d      	lsls	r5, r3, #30
   836b6:	d1f8      	bne.n	836aa <memset+0x12>
   836b8:	2c03      	cmp	r4, #3
   836ba:	d92e      	bls.n	8371a <memset+0x82>
   836bc:	b2cd      	uxtb	r5, r1
   836be:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   836c2:	2c0f      	cmp	r4, #15
   836c4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   836c8:	d919      	bls.n	836fe <memset+0x66>
   836ca:	4626      	mov	r6, r4
   836cc:	f103 0210 	add.w	r2, r3, #16
   836d0:	3e10      	subs	r6, #16
   836d2:	2e0f      	cmp	r6, #15
   836d4:	f842 5c10 	str.w	r5, [r2, #-16]
   836d8:	f842 5c0c 	str.w	r5, [r2, #-12]
   836dc:	f842 5c08 	str.w	r5, [r2, #-8]
   836e0:	f842 5c04 	str.w	r5, [r2, #-4]
   836e4:	f102 0210 	add.w	r2, r2, #16
   836e8:	d8f2      	bhi.n	836d0 <memset+0x38>
   836ea:	f1a4 0210 	sub.w	r2, r4, #16
   836ee:	f022 020f 	bic.w	r2, r2, #15
   836f2:	f004 040f 	and.w	r4, r4, #15
   836f6:	3210      	adds	r2, #16
   836f8:	2c03      	cmp	r4, #3
   836fa:	4413      	add	r3, r2
   836fc:	d90d      	bls.n	8371a <memset+0x82>
   836fe:	461e      	mov	r6, r3
   83700:	4622      	mov	r2, r4
   83702:	3a04      	subs	r2, #4
   83704:	2a03      	cmp	r2, #3
   83706:	f846 5b04 	str.w	r5, [r6], #4
   8370a:	d8fa      	bhi.n	83702 <memset+0x6a>
   8370c:	1f22      	subs	r2, r4, #4
   8370e:	f022 0203 	bic.w	r2, r2, #3
   83712:	3204      	adds	r2, #4
   83714:	4413      	add	r3, r2
   83716:	f004 0403 	and.w	r4, r4, #3
   8371a:	b12c      	cbz	r4, 83728 <memset+0x90>
   8371c:	b2c9      	uxtb	r1, r1
   8371e:	441c      	add	r4, r3
   83720:	f803 1b01 	strb.w	r1, [r3], #1
   83724:	429c      	cmp	r4, r3
   83726:	d1fb      	bne.n	83720 <memset+0x88>
   83728:	bc70      	pop	{r4, r5, r6}
   8372a:	4770      	bx	lr
   8372c:	4614      	mov	r4, r2
   8372e:	4603      	mov	r3, r0
   83730:	e7c2      	b.n	836b8 <memset+0x20>
   83732:	bf00      	nop

00083734 <sprintf>:
   83734:	b40e      	push	{r1, r2, r3}
   83736:	4601      	mov	r1, r0
   83738:	b5f0      	push	{r4, r5, r6, r7, lr}
   8373a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   8373e:	f44f 7702 	mov.w	r7, #520	; 0x208
   83742:	f64f 76ff 	movw	r6, #65535	; 0xffff
   83746:	b09c      	sub	sp, #112	; 0x70
   83748:	ac21      	add	r4, sp, #132	; 0x84
   8374a:	f854 2b04 	ldr.w	r2, [r4], #4
   8374e:	4b0b      	ldr	r3, [pc, #44]	; (8377c <sprintf+0x48>)
   83750:	9102      	str	r1, [sp, #8]
   83752:	9106      	str	r1, [sp, #24]
   83754:	6818      	ldr	r0, [r3, #0]
   83756:	a902      	add	r1, sp, #8
   83758:	4623      	mov	r3, r4
   8375a:	9401      	str	r4, [sp, #4]
   8375c:	f8ad 7014 	strh.w	r7, [sp, #20]
   83760:	9504      	str	r5, [sp, #16]
   83762:	9507      	str	r5, [sp, #28]
   83764:	f8ad 6016 	strh.w	r6, [sp, #22]
   83768:	f000 f838 	bl	837dc <_svfprintf_r>
   8376c:	2200      	movs	r2, #0
   8376e:	9b02      	ldr	r3, [sp, #8]
   83770:	701a      	strb	r2, [r3, #0]
   83772:	b01c      	add	sp, #112	; 0x70
   83774:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   83778:	b003      	add	sp, #12
   8377a:	4770      	bx	lr
   8377c:	200701a0 	.word	0x200701a0

00083780 <strlen>:
   83780:	f020 0103 	bic.w	r1, r0, #3
   83784:	f010 0003 	ands.w	r0, r0, #3
   83788:	f1c0 0000 	rsb	r0, r0, #0
   8378c:	f851 3b04 	ldr.w	r3, [r1], #4
   83790:	f100 0c04 	add.w	ip, r0, #4
   83794:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83798:	f06f 0200 	mvn.w	r2, #0
   8379c:	bf1c      	itt	ne
   8379e:	fa22 f20c 	lsrne.w	r2, r2, ip
   837a2:	4313      	orrne	r3, r2
   837a4:	f04f 0c01 	mov.w	ip, #1
   837a8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   837ac:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   837b0:	eba3 020c 	sub.w	r2, r3, ip
   837b4:	ea22 0203 	bic.w	r2, r2, r3
   837b8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   837bc:	bf04      	itt	eq
   837be:	f851 3b04 	ldreq.w	r3, [r1], #4
   837c2:	3004      	addeq	r0, #4
   837c4:	d0f4      	beq.n	837b0 <strlen+0x30>
   837c6:	f1c2 0100 	rsb	r1, r2, #0
   837ca:	ea02 0201 	and.w	r2, r2, r1
   837ce:	fab2 f282 	clz	r2, r2
   837d2:	f1c2 021f 	rsb	r2, r2, #31
   837d6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   837da:	4770      	bx	lr

000837dc <_svfprintf_r>:
   837dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   837e0:	b0c3      	sub	sp, #268	; 0x10c
   837e2:	460c      	mov	r4, r1
   837e4:	910b      	str	r1, [sp, #44]	; 0x2c
   837e6:	4692      	mov	sl, r2
   837e8:	930f      	str	r3, [sp, #60]	; 0x3c
   837ea:	900c      	str	r0, [sp, #48]	; 0x30
   837ec:	f002 fa58 	bl	85ca0 <_localeconv_r>
   837f0:	6803      	ldr	r3, [r0, #0]
   837f2:	4618      	mov	r0, r3
   837f4:	931a      	str	r3, [sp, #104]	; 0x68
   837f6:	f7ff ffc3 	bl	83780 <strlen>
   837fa:	89a3      	ldrh	r3, [r4, #12]
   837fc:	9019      	str	r0, [sp, #100]	; 0x64
   837fe:	0619      	lsls	r1, r3, #24
   83800:	d503      	bpl.n	8380a <_svfprintf_r+0x2e>
   83802:	6923      	ldr	r3, [r4, #16]
   83804:	2b00      	cmp	r3, #0
   83806:	f001 8035 	beq.w	84874 <_svfprintf_r+0x1098>
   8380a:	2300      	movs	r3, #0
   8380c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   83810:	46c8      	mov	r8, r9
   83812:	9315      	str	r3, [sp, #84]	; 0x54
   83814:	9313      	str	r3, [sp, #76]	; 0x4c
   83816:	9314      	str	r3, [sp, #80]	; 0x50
   83818:	9318      	str	r3, [sp, #96]	; 0x60
   8381a:	931b      	str	r3, [sp, #108]	; 0x6c
   8381c:	9309      	str	r3, [sp, #36]	; 0x24
   8381e:	9316      	str	r3, [sp, #88]	; 0x58
   83820:	9317      	str	r3, [sp, #92]	; 0x5c
   83822:	9327      	str	r3, [sp, #156]	; 0x9c
   83824:	9326      	str	r3, [sp, #152]	; 0x98
   83826:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   8382a:	f89a 3000 	ldrb.w	r3, [sl]
   8382e:	4654      	mov	r4, sl
   83830:	b1eb      	cbz	r3, 8386e <_svfprintf_r+0x92>
   83832:	2b25      	cmp	r3, #37	; 0x25
   83834:	d102      	bne.n	8383c <_svfprintf_r+0x60>
   83836:	e01a      	b.n	8386e <_svfprintf_r+0x92>
   83838:	2b25      	cmp	r3, #37	; 0x25
   8383a:	d003      	beq.n	83844 <_svfprintf_r+0x68>
   8383c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   83840:	2b00      	cmp	r3, #0
   83842:	d1f9      	bne.n	83838 <_svfprintf_r+0x5c>
   83844:	eba4 050a 	sub.w	r5, r4, sl
   83848:	b18d      	cbz	r5, 8386e <_svfprintf_r+0x92>
   8384a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8384c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8384e:	3301      	adds	r3, #1
   83850:	442a      	add	r2, r5
   83852:	2b07      	cmp	r3, #7
   83854:	f8c8 a000 	str.w	sl, [r8]
   83858:	f8c8 5004 	str.w	r5, [r8, #4]
   8385c:	9227      	str	r2, [sp, #156]	; 0x9c
   8385e:	9326      	str	r3, [sp, #152]	; 0x98
   83860:	f300 808a 	bgt.w	83978 <_svfprintf_r+0x19c>
   83864:	f108 0808 	add.w	r8, r8, #8
   83868:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8386a:	442b      	add	r3, r5
   8386c:	9309      	str	r3, [sp, #36]	; 0x24
   8386e:	7823      	ldrb	r3, [r4, #0]
   83870:	2b00      	cmp	r3, #0
   83872:	f000 8089 	beq.w	83988 <_svfprintf_r+0x1ac>
   83876:	2300      	movs	r3, #0
   83878:	f04f 30ff 	mov.w	r0, #4294967295
   8387c:	461a      	mov	r2, r3
   8387e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   83882:	4619      	mov	r1, r3
   83884:	930d      	str	r3, [sp, #52]	; 0x34
   83886:	469b      	mov	fp, r3
   83888:	7863      	ldrb	r3, [r4, #1]
   8388a:	f104 0a01 	add.w	sl, r4, #1
   8388e:	900a      	str	r0, [sp, #40]	; 0x28
   83890:	f10a 0a01 	add.w	sl, sl, #1
   83894:	f1a3 0020 	sub.w	r0, r3, #32
   83898:	2858      	cmp	r0, #88	; 0x58
   8389a:	f200 83b7 	bhi.w	8400c <_svfprintf_r+0x830>
   8389e:	e8df f010 	tbh	[pc, r0, lsl #1]
   838a2:	034c      	.short	0x034c
   838a4:	03b503b5 	.word	0x03b503b5
   838a8:	03b50354 	.word	0x03b50354
   838ac:	03b503b5 	.word	0x03b503b5
   838b0:	03b503b5 	.word	0x03b503b5
   838b4:	005903b5 	.word	0x005903b5
   838b8:	03b50359 	.word	0x03b50359
   838bc:	02140066 	.word	0x02140066
   838c0:	022f03b5 	.word	0x022f03b5
   838c4:	03a503a5 	.word	0x03a503a5
   838c8:	03a503a5 	.word	0x03a503a5
   838cc:	03a503a5 	.word	0x03a503a5
   838d0:	03a503a5 	.word	0x03a503a5
   838d4:	03b503a5 	.word	0x03b503a5
   838d8:	03b503b5 	.word	0x03b503b5
   838dc:	03b503b5 	.word	0x03b503b5
   838e0:	03b503b5 	.word	0x03b503b5
   838e4:	03b503b5 	.word	0x03b503b5
   838e8:	028b03b5 	.word	0x028b03b5
   838ec:	03b502d3 	.word	0x03b502d3
   838f0:	03b502d3 	.word	0x03b502d3
   838f4:	03b503b5 	.word	0x03b503b5
   838f8:	031b03b5 	.word	0x031b03b5
   838fc:	03b503b5 	.word	0x03b503b5
   83900:	03b50320 	.word	0x03b50320
   83904:	03b503b5 	.word	0x03b503b5
   83908:	03b503b5 	.word	0x03b503b5
   8390c:	03b50234 	.word	0x03b50234
   83910:	024b03b5 	.word	0x024b03b5
   83914:	03b503b5 	.word	0x03b503b5
   83918:	03b503b5 	.word	0x03b503b5
   8391c:	03b503b5 	.word	0x03b503b5
   83920:	03b503b5 	.word	0x03b503b5
   83924:	03b503b5 	.word	0x03b503b5
   83928:	039e0276 	.word	0x039e0276
   8392c:	02d302d3 	.word	0x02d302d3
   83930:	036302d3 	.word	0x036302d3
   83934:	03b5039e 	.word	0x03b5039e
   83938:	036803b5 	.word	0x036803b5
   8393c:	037503b5 	.word	0x037503b5
   83940:	038c01dd 	.word	0x038c01dd
   83944:	03b5035e 	.word	0x03b5035e
   83948:	03b501f2 	.word	0x03b501f2
   8394c:	03b50087 	.word	0x03b50087
   83950:	033203b5 	.word	0x033203b5
   83954:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83956:	6823      	ldr	r3, [r4, #0]
   83958:	4618      	mov	r0, r3
   8395a:	930d      	str	r3, [sp, #52]	; 0x34
   8395c:	4623      	mov	r3, r4
   8395e:	2800      	cmp	r0, #0
   83960:	f103 0304 	add.w	r3, r3, #4
   83964:	930f      	str	r3, [sp, #60]	; 0x3c
   83966:	da04      	bge.n	83972 <_svfprintf_r+0x196>
   83968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8396a:	425b      	negs	r3, r3
   8396c:	930d      	str	r3, [sp, #52]	; 0x34
   8396e:	f04b 0b04 	orr.w	fp, fp, #4
   83972:	f89a 3000 	ldrb.w	r3, [sl]
   83976:	e78b      	b.n	83890 <_svfprintf_r+0xb4>
   83978:	aa25      	add	r2, sp, #148	; 0x94
   8397a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8397c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8397e:	f002 ffa3 	bl	868c8 <__ssprint_r>
   83982:	b940      	cbnz	r0, 83996 <_svfprintf_r+0x1ba>
   83984:	46c8      	mov	r8, r9
   83986:	e76f      	b.n	83868 <_svfprintf_r+0x8c>
   83988:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8398a:	b123      	cbz	r3, 83996 <_svfprintf_r+0x1ba>
   8398c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8398e:	aa25      	add	r2, sp, #148	; 0x94
   83990:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83992:	f002 ff99 	bl	868c8 <__ssprint_r>
   83996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83998:	899b      	ldrh	r3, [r3, #12]
   8399a:	f013 0f40 	tst.w	r3, #64	; 0x40
   8399e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   839a0:	bf18      	it	ne
   839a2:	f04f 33ff 	movne.w	r3, #4294967295
   839a6:	9309      	str	r3, [sp, #36]	; 0x24
   839a8:	9809      	ldr	r0, [sp, #36]	; 0x24
   839aa:	b043      	add	sp, #268	; 0x10c
   839ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   839b0:	f01b 0f20 	tst.w	fp, #32
   839b4:	9311      	str	r3, [sp, #68]	; 0x44
   839b6:	f040 81af 	bne.w	83d18 <_svfprintf_r+0x53c>
   839ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   839bc:	f01b 0f10 	tst.w	fp, #16
   839c0:	4613      	mov	r3, r2
   839c2:	f040 859a 	bne.w	844fa <_svfprintf_r+0xd1e>
   839c6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   839ca:	f000 8596 	beq.w	844fa <_svfprintf_r+0xd1e>
   839ce:	2500      	movs	r5, #0
   839d0:	2301      	movs	r3, #1
   839d2:	8814      	ldrh	r4, [r2, #0]
   839d4:	3204      	adds	r2, #4
   839d6:	920f      	str	r2, [sp, #60]	; 0x3c
   839d8:	2200      	movs	r2, #0
   839da:	4617      	mov	r7, r2
   839dc:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   839e0:	990a      	ldr	r1, [sp, #40]	; 0x28
   839e2:	1c4a      	adds	r2, r1, #1
   839e4:	f000 8210 	beq.w	83e08 <_svfprintf_r+0x62c>
   839e8:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   839ec:	9207      	str	r2, [sp, #28]
   839ee:	ea54 0205 	orrs.w	r2, r4, r5
   839f2:	f040 820f 	bne.w	83e14 <_svfprintf_r+0x638>
   839f6:	2900      	cmp	r1, #0
   839f8:	f040 8431 	bne.w	8425e <_svfprintf_r+0xa82>
   839fc:	2b00      	cmp	r3, #0
   839fe:	f040 8539 	bne.w	84474 <_svfprintf_r+0xc98>
   83a02:	f01b 0301 	ands.w	r3, fp, #1
   83a06:	930e      	str	r3, [sp, #56]	; 0x38
   83a08:	f000 8662 	beq.w	846d0 <_svfprintf_r+0xef4>
   83a0c:	2330      	movs	r3, #48	; 0x30
   83a0e:	ae42      	add	r6, sp, #264	; 0x108
   83a10:	f806 3d41 	strb.w	r3, [r6, #-65]!
   83a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83a18:	4293      	cmp	r3, r2
   83a1a:	bfb8      	it	lt
   83a1c:	4613      	movlt	r3, r2
   83a1e:	9308      	str	r3, [sp, #32]
   83a20:	2300      	movs	r3, #0
   83a22:	9312      	str	r3, [sp, #72]	; 0x48
   83a24:	b117      	cbz	r7, 83a2c <_svfprintf_r+0x250>
   83a26:	9b08      	ldr	r3, [sp, #32]
   83a28:	3301      	adds	r3, #1
   83a2a:	9308      	str	r3, [sp, #32]
   83a2c:	9b07      	ldr	r3, [sp, #28]
   83a2e:	f013 0302 	ands.w	r3, r3, #2
   83a32:	9310      	str	r3, [sp, #64]	; 0x40
   83a34:	d002      	beq.n	83a3c <_svfprintf_r+0x260>
   83a36:	9b08      	ldr	r3, [sp, #32]
   83a38:	3302      	adds	r3, #2
   83a3a:	9308      	str	r3, [sp, #32]
   83a3c:	9b07      	ldr	r3, [sp, #28]
   83a3e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   83a42:	f040 8310 	bne.w	84066 <_svfprintf_r+0x88a>
   83a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83a48:	9a08      	ldr	r2, [sp, #32]
   83a4a:	eba3 0b02 	sub.w	fp, r3, r2
   83a4e:	f1bb 0f00 	cmp.w	fp, #0
   83a52:	f340 8308 	ble.w	84066 <_svfprintf_r+0x88a>
   83a56:	f1bb 0f10 	cmp.w	fp, #16
   83a5a:	f340 87b2 	ble.w	849c2 <_svfprintf_r+0x11e6>
   83a5e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83a60:	4643      	mov	r3, r8
   83a62:	4621      	mov	r1, r4
   83a64:	46a8      	mov	r8, r5
   83a66:	2710      	movs	r7, #16
   83a68:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83a6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   83a6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   83a6e:	e006      	b.n	83a7e <_svfprintf_r+0x2a2>
   83a70:	f1ab 0b10 	sub.w	fp, fp, #16
   83a74:	f1bb 0f10 	cmp.w	fp, #16
   83a78:	f103 0308 	add.w	r3, r3, #8
   83a7c:	dd18      	ble.n	83ab0 <_svfprintf_r+0x2d4>
   83a7e:	3201      	adds	r2, #1
   83a80:	48ab      	ldr	r0, [pc, #684]	; (83d30 <_svfprintf_r+0x554>)
   83a82:	3110      	adds	r1, #16
   83a84:	2a07      	cmp	r2, #7
   83a86:	9127      	str	r1, [sp, #156]	; 0x9c
   83a88:	9226      	str	r2, [sp, #152]	; 0x98
   83a8a:	e883 0081 	stmia.w	r3, {r0, r7}
   83a8e:	ddef      	ble.n	83a70 <_svfprintf_r+0x294>
   83a90:	aa25      	add	r2, sp, #148	; 0x94
   83a92:	4629      	mov	r1, r5
   83a94:	4620      	mov	r0, r4
   83a96:	f002 ff17 	bl	868c8 <__ssprint_r>
   83a9a:	2800      	cmp	r0, #0
   83a9c:	f47f af7b 	bne.w	83996 <_svfprintf_r+0x1ba>
   83aa0:	f1ab 0b10 	sub.w	fp, fp, #16
   83aa4:	f1bb 0f10 	cmp.w	fp, #16
   83aa8:	464b      	mov	r3, r9
   83aaa:	9927      	ldr	r1, [sp, #156]	; 0x9c
   83aac:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83aae:	dce6      	bgt.n	83a7e <_svfprintf_r+0x2a2>
   83ab0:	4645      	mov	r5, r8
   83ab2:	460c      	mov	r4, r1
   83ab4:	4698      	mov	r8, r3
   83ab6:	3201      	adds	r2, #1
   83ab8:	4b9d      	ldr	r3, [pc, #628]	; (83d30 <_svfprintf_r+0x554>)
   83aba:	445c      	add	r4, fp
   83abc:	2a07      	cmp	r2, #7
   83abe:	9427      	str	r4, [sp, #156]	; 0x9c
   83ac0:	9226      	str	r2, [sp, #152]	; 0x98
   83ac2:	e888 0808 	stmia.w	r8, {r3, fp}
   83ac6:	f300 82c3 	bgt.w	84050 <_svfprintf_r+0x874>
   83aca:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83ace:	f108 0808 	add.w	r8, r8, #8
   83ad2:	b187      	cbz	r7, 83af6 <_svfprintf_r+0x31a>
   83ad4:	2101      	movs	r1, #1
   83ad6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83ad8:	440c      	add	r4, r1
   83ada:	440b      	add	r3, r1
   83adc:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   83ae0:	2b07      	cmp	r3, #7
   83ae2:	9427      	str	r4, [sp, #156]	; 0x9c
   83ae4:	9326      	str	r3, [sp, #152]	; 0x98
   83ae6:	f8c8 1004 	str.w	r1, [r8, #4]
   83aea:	f8c8 2000 	str.w	r2, [r8]
   83aee:	f300 83cd 	bgt.w	8428c <_svfprintf_r+0xab0>
   83af2:	f108 0808 	add.w	r8, r8, #8
   83af6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83af8:	b17b      	cbz	r3, 83b1a <_svfprintf_r+0x33e>
   83afa:	2102      	movs	r1, #2
   83afc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83afe:	440c      	add	r4, r1
   83b00:	3301      	adds	r3, #1
   83b02:	aa1e      	add	r2, sp, #120	; 0x78
   83b04:	2b07      	cmp	r3, #7
   83b06:	9427      	str	r4, [sp, #156]	; 0x9c
   83b08:	9326      	str	r3, [sp, #152]	; 0x98
   83b0a:	f8c8 1004 	str.w	r1, [r8, #4]
   83b0e:	f8c8 2000 	str.w	r2, [r8]
   83b12:	f300 8411 	bgt.w	84338 <_svfprintf_r+0xb5c>
   83b16:	f108 0808 	add.w	r8, r8, #8
   83b1a:	2d80      	cmp	r5, #128	; 0x80
   83b1c:	f000 8304 	beq.w	84128 <_svfprintf_r+0x94c>
   83b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83b22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83b24:	1a9f      	subs	r7, r3, r2
   83b26:	2f00      	cmp	r7, #0
   83b28:	dd37      	ble.n	83b9a <_svfprintf_r+0x3be>
   83b2a:	2f10      	cmp	r7, #16
   83b2c:	f340 8679 	ble.w	84822 <_svfprintf_r+0x1046>
   83b30:	4d80      	ldr	r5, [pc, #512]	; (83d34 <_svfprintf_r+0x558>)
   83b32:	4642      	mov	r2, r8
   83b34:	4621      	mov	r1, r4
   83b36:	46b0      	mov	r8, r6
   83b38:	f04f 0b10 	mov.w	fp, #16
   83b3c:	462e      	mov	r6, r5
   83b3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83b40:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   83b42:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   83b44:	e004      	b.n	83b50 <_svfprintf_r+0x374>
   83b46:	3f10      	subs	r7, #16
   83b48:	2f10      	cmp	r7, #16
   83b4a:	f102 0208 	add.w	r2, r2, #8
   83b4e:	dd15      	ble.n	83b7c <_svfprintf_r+0x3a0>
   83b50:	3301      	adds	r3, #1
   83b52:	3110      	adds	r1, #16
   83b54:	2b07      	cmp	r3, #7
   83b56:	9127      	str	r1, [sp, #156]	; 0x9c
   83b58:	9326      	str	r3, [sp, #152]	; 0x98
   83b5a:	e882 0840 	stmia.w	r2, {r6, fp}
   83b5e:	ddf2      	ble.n	83b46 <_svfprintf_r+0x36a>
   83b60:	aa25      	add	r2, sp, #148	; 0x94
   83b62:	4629      	mov	r1, r5
   83b64:	4620      	mov	r0, r4
   83b66:	f002 feaf 	bl	868c8 <__ssprint_r>
   83b6a:	2800      	cmp	r0, #0
   83b6c:	f47f af13 	bne.w	83996 <_svfprintf_r+0x1ba>
   83b70:	3f10      	subs	r7, #16
   83b72:	2f10      	cmp	r7, #16
   83b74:	464a      	mov	r2, r9
   83b76:	9927      	ldr	r1, [sp, #156]	; 0x9c
   83b78:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83b7a:	dce9      	bgt.n	83b50 <_svfprintf_r+0x374>
   83b7c:	4635      	mov	r5, r6
   83b7e:	460c      	mov	r4, r1
   83b80:	4646      	mov	r6, r8
   83b82:	4690      	mov	r8, r2
   83b84:	3301      	adds	r3, #1
   83b86:	443c      	add	r4, r7
   83b88:	2b07      	cmp	r3, #7
   83b8a:	9427      	str	r4, [sp, #156]	; 0x9c
   83b8c:	9326      	str	r3, [sp, #152]	; 0x98
   83b8e:	e888 00a0 	stmia.w	r8, {r5, r7}
   83b92:	f300 8370 	bgt.w	84276 <_svfprintf_r+0xa9a>
   83b96:	f108 0808 	add.w	r8, r8, #8
   83b9a:	9b07      	ldr	r3, [sp, #28]
   83b9c:	05df      	lsls	r7, r3, #23
   83b9e:	f100 8264 	bmi.w	8406a <_svfprintf_r+0x88e>
   83ba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83ba4:	990e      	ldr	r1, [sp, #56]	; 0x38
   83ba6:	3301      	adds	r3, #1
   83ba8:	440c      	add	r4, r1
   83baa:	2b07      	cmp	r3, #7
   83bac:	9427      	str	r4, [sp, #156]	; 0x9c
   83bae:	f8c8 6000 	str.w	r6, [r8]
   83bb2:	f8c8 1004 	str.w	r1, [r8, #4]
   83bb6:	9326      	str	r3, [sp, #152]	; 0x98
   83bb8:	f300 83b3 	bgt.w	84322 <_svfprintf_r+0xb46>
   83bbc:	f108 0808 	add.w	r8, r8, #8
   83bc0:	9b07      	ldr	r3, [sp, #28]
   83bc2:	075b      	lsls	r3, r3, #29
   83bc4:	d53b      	bpl.n	83c3e <_svfprintf_r+0x462>
   83bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83bc8:	9a08      	ldr	r2, [sp, #32]
   83bca:	1a9d      	subs	r5, r3, r2
   83bcc:	2d00      	cmp	r5, #0
   83bce:	dd36      	ble.n	83c3e <_svfprintf_r+0x462>
   83bd0:	2d10      	cmp	r5, #16
   83bd2:	f340 8721 	ble.w	84a18 <_svfprintf_r+0x123c>
   83bd6:	2610      	movs	r6, #16
   83bd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83bda:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   83bdc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   83be0:	e004      	b.n	83bec <_svfprintf_r+0x410>
   83be2:	3d10      	subs	r5, #16
   83be4:	2d10      	cmp	r5, #16
   83be6:	f108 0808 	add.w	r8, r8, #8
   83bea:	dd16      	ble.n	83c1a <_svfprintf_r+0x43e>
   83bec:	3301      	adds	r3, #1
   83bee:	4a50      	ldr	r2, [pc, #320]	; (83d30 <_svfprintf_r+0x554>)
   83bf0:	3410      	adds	r4, #16
   83bf2:	2b07      	cmp	r3, #7
   83bf4:	9427      	str	r4, [sp, #156]	; 0x9c
   83bf6:	9326      	str	r3, [sp, #152]	; 0x98
   83bf8:	e888 0044 	stmia.w	r8, {r2, r6}
   83bfc:	ddf1      	ble.n	83be2 <_svfprintf_r+0x406>
   83bfe:	aa25      	add	r2, sp, #148	; 0x94
   83c00:	4659      	mov	r1, fp
   83c02:	4638      	mov	r0, r7
   83c04:	f002 fe60 	bl	868c8 <__ssprint_r>
   83c08:	2800      	cmp	r0, #0
   83c0a:	f47f aec4 	bne.w	83996 <_svfprintf_r+0x1ba>
   83c0e:	3d10      	subs	r5, #16
   83c10:	2d10      	cmp	r5, #16
   83c12:	46c8      	mov	r8, r9
   83c14:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83c16:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83c18:	dce8      	bgt.n	83bec <_svfprintf_r+0x410>
   83c1a:	3301      	adds	r3, #1
   83c1c:	4a44      	ldr	r2, [pc, #272]	; (83d30 <_svfprintf_r+0x554>)
   83c1e:	442c      	add	r4, r5
   83c20:	2b07      	cmp	r3, #7
   83c22:	9427      	str	r4, [sp, #156]	; 0x9c
   83c24:	9326      	str	r3, [sp, #152]	; 0x98
   83c26:	e888 0024 	stmia.w	r8, {r2, r5}
   83c2a:	dd08      	ble.n	83c3e <_svfprintf_r+0x462>
   83c2c:	aa25      	add	r2, sp, #148	; 0x94
   83c2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83c30:	980c      	ldr	r0, [sp, #48]	; 0x30
   83c32:	f002 fe49 	bl	868c8 <__ssprint_r>
   83c36:	2800      	cmp	r0, #0
   83c38:	f47f aead 	bne.w	83996 <_svfprintf_r+0x1ba>
   83c3c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83c40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   83c42:	9908      	ldr	r1, [sp, #32]
   83c44:	428a      	cmp	r2, r1
   83c46:	bfac      	ite	ge
   83c48:	189b      	addge	r3, r3, r2
   83c4a:	185b      	addlt	r3, r3, r1
   83c4c:	9309      	str	r3, [sp, #36]	; 0x24
   83c4e:	2c00      	cmp	r4, #0
   83c50:	f040 82fb 	bne.w	8424a <_svfprintf_r+0xa6e>
   83c54:	2300      	movs	r3, #0
   83c56:	46c8      	mov	r8, r9
   83c58:	9326      	str	r3, [sp, #152]	; 0x98
   83c5a:	e5e6      	b.n	8382a <_svfprintf_r+0x4e>
   83c5c:	9311      	str	r3, [sp, #68]	; 0x44
   83c5e:	f01b 0320 	ands.w	r3, fp, #32
   83c62:	f040 8145 	bne.w	83ef0 <_svfprintf_r+0x714>
   83c66:	f01b 0210 	ands.w	r2, fp, #16
   83c6a:	f040 8466 	bne.w	8453a <_svfprintf_r+0xd5e>
   83c6e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   83c72:	f000 8462 	beq.w	8453a <_svfprintf_r+0xd5e>
   83c76:	990f      	ldr	r1, [sp, #60]	; 0x3c
   83c78:	4613      	mov	r3, r2
   83c7a:	460a      	mov	r2, r1
   83c7c:	3204      	adds	r2, #4
   83c7e:	880c      	ldrh	r4, [r1, #0]
   83c80:	2500      	movs	r5, #0
   83c82:	920f      	str	r2, [sp, #60]	; 0x3c
   83c84:	e6a8      	b.n	839d8 <_svfprintf_r+0x1fc>
   83c86:	2500      	movs	r5, #0
   83c88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83c8a:	9311      	str	r3, [sp, #68]	; 0x44
   83c8c:	6816      	ldr	r6, [r2, #0]
   83c8e:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   83c92:	1d14      	adds	r4, r2, #4
   83c94:	2e00      	cmp	r6, #0
   83c96:	f000 86cd 	beq.w	84a34 <_svfprintf_r+0x1258>
   83c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83c9c:	1c53      	adds	r3, r2, #1
   83c9e:	f000 861b 	beq.w	848d8 <_svfprintf_r+0x10fc>
   83ca2:	4629      	mov	r1, r5
   83ca4:	4630      	mov	r0, r6
   83ca6:	f002 faaf 	bl	86208 <memchr>
   83caa:	2800      	cmp	r0, #0
   83cac:	f000 870d 	beq.w	84aca <_svfprintf_r+0x12ee>
   83cb0:	1b83      	subs	r3, r0, r6
   83cb2:	950a      	str	r5, [sp, #40]	; 0x28
   83cb4:	930e      	str	r3, [sp, #56]	; 0x38
   83cb6:	940f      	str	r4, [sp, #60]	; 0x3c
   83cb8:	f8cd b01c 	str.w	fp, [sp, #28]
   83cbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   83cc0:	9308      	str	r3, [sp, #32]
   83cc2:	9512      	str	r5, [sp, #72]	; 0x48
   83cc4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83cc8:	e6ac      	b.n	83a24 <_svfprintf_r+0x248>
   83cca:	f89a 3000 	ldrb.w	r3, [sl]
   83cce:	f10a 0401 	add.w	r4, sl, #1
   83cd2:	2b2a      	cmp	r3, #42	; 0x2a
   83cd4:	f000 87c2 	beq.w	84c5c <_svfprintf_r+0x1480>
   83cd8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83cdc:	2809      	cmp	r0, #9
   83cde:	46a2      	mov	sl, r4
   83ce0:	f200 8718 	bhi.w	84b14 <_svfprintf_r+0x1338>
   83ce4:	2300      	movs	r3, #0
   83ce6:	461c      	mov	r4, r3
   83ce8:	f81a 3b01 	ldrb.w	r3, [sl], #1
   83cec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   83cf0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   83cf4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83cf8:	2809      	cmp	r0, #9
   83cfa:	d9f5      	bls.n	83ce8 <_svfprintf_r+0x50c>
   83cfc:	940a      	str	r4, [sp, #40]	; 0x28
   83cfe:	e5c9      	b.n	83894 <_svfprintf_r+0xb8>
   83d00:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   83d04:	f89a 3000 	ldrb.w	r3, [sl]
   83d08:	e5c2      	b.n	83890 <_svfprintf_r+0xb4>
   83d0a:	f04b 0b10 	orr.w	fp, fp, #16
   83d0e:	f01b 0f20 	tst.w	fp, #32
   83d12:	9311      	str	r3, [sp, #68]	; 0x44
   83d14:	f43f ae51 	beq.w	839ba <_svfprintf_r+0x1de>
   83d18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83d1a:	3407      	adds	r4, #7
   83d1c:	f024 0307 	bic.w	r3, r4, #7
   83d20:	f103 0208 	add.w	r2, r3, #8
   83d24:	e9d3 4500 	ldrd	r4, r5, [r3]
   83d28:	920f      	str	r2, [sp, #60]	; 0x3c
   83d2a:	2301      	movs	r3, #1
   83d2c:	e654      	b.n	839d8 <_svfprintf_r+0x1fc>
   83d2e:	bf00      	nop
   83d30:	00087fec 	.word	0x00087fec
   83d34:	00087ffc 	.word	0x00087ffc
   83d38:	9311      	str	r3, [sp, #68]	; 0x44
   83d3a:	2a00      	cmp	r2, #0
   83d3c:	f040 87ad 	bne.w	84c9a <_svfprintf_r+0x14be>
   83d40:	4bbe      	ldr	r3, [pc, #760]	; (8403c <_svfprintf_r+0x860>)
   83d42:	f01b 0f20 	tst.w	fp, #32
   83d46:	9318      	str	r3, [sp, #96]	; 0x60
   83d48:	f040 80e7 	bne.w	83f1a <_svfprintf_r+0x73e>
   83d4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83d4e:	f01b 0f10 	tst.w	fp, #16
   83d52:	4613      	mov	r3, r2
   83d54:	f040 83d8 	bne.w	84508 <_svfprintf_r+0xd2c>
   83d58:	f01b 0f40 	tst.w	fp, #64	; 0x40
   83d5c:	f000 83d4 	beq.w	84508 <_svfprintf_r+0xd2c>
   83d60:	2500      	movs	r5, #0
   83d62:	3304      	adds	r3, #4
   83d64:	8814      	ldrh	r4, [r2, #0]
   83d66:	930f      	str	r3, [sp, #60]	; 0x3c
   83d68:	f01b 0f01 	tst.w	fp, #1
   83d6c:	f000 80e3 	beq.w	83f36 <_svfprintf_r+0x75a>
   83d70:	ea54 0305 	orrs.w	r3, r4, r5
   83d74:	f000 80df 	beq.w	83f36 <_svfprintf_r+0x75a>
   83d78:	2330      	movs	r3, #48	; 0x30
   83d7a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   83d7e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   83d82:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   83d86:	f04b 0b02 	orr.w	fp, fp, #2
   83d8a:	2302      	movs	r3, #2
   83d8c:	e624      	b.n	839d8 <_svfprintf_r+0x1fc>
   83d8e:	2201      	movs	r2, #1
   83d90:	9311      	str	r3, [sp, #68]	; 0x44
   83d92:	2300      	movs	r3, #0
   83d94:	4611      	mov	r1, r2
   83d96:	980f      	ldr	r0, [sp, #60]	; 0x3c
   83d98:	9208      	str	r2, [sp, #32]
   83d9a:	6802      	ldr	r2, [r0, #0]
   83d9c:	461f      	mov	r7, r3
   83d9e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   83da2:	930a      	str	r3, [sp, #40]	; 0x28
   83da4:	9312      	str	r3, [sp, #72]	; 0x48
   83da6:	1d03      	adds	r3, r0, #4
   83da8:	f8cd b01c 	str.w	fp, [sp, #28]
   83dac:	910e      	str	r1, [sp, #56]	; 0x38
   83dae:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   83db2:	930f      	str	r3, [sp, #60]	; 0x3c
   83db4:	ae28      	add	r6, sp, #160	; 0xa0
   83db6:	e639      	b.n	83a2c <_svfprintf_r+0x250>
   83db8:	9311      	str	r3, [sp, #68]	; 0x44
   83dba:	2a00      	cmp	r2, #0
   83dbc:	f040 8784 	bne.w	84cc8 <_svfprintf_r+0x14ec>
   83dc0:	f04b 0b10 	orr.w	fp, fp, #16
   83dc4:	f01b 0f20 	tst.w	fp, #32
   83dc8:	f040 8475 	bne.w	846b6 <_svfprintf_r+0xeda>
   83dcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83dce:	f01b 0f10 	tst.w	fp, #16
   83dd2:	4613      	mov	r3, r2
   83dd4:	f040 839d 	bne.w	84512 <_svfprintf_r+0xd36>
   83dd8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   83ddc:	f000 8399 	beq.w	84512 <_svfprintf_r+0xd36>
   83de0:	f9b2 4000 	ldrsh.w	r4, [r2]
   83de4:	3304      	adds	r3, #4
   83de6:	17e5      	asrs	r5, r4, #31
   83de8:	930f      	str	r3, [sp, #60]	; 0x3c
   83dea:	4622      	mov	r2, r4
   83dec:	462b      	mov	r3, r5
   83dee:	2a00      	cmp	r2, #0
   83df0:	f173 0300 	sbcs.w	r3, r3, #0
   83df4:	f2c0 8398 	blt.w	84528 <_svfprintf_r+0xd4c>
   83df8:	990a      	ldr	r1, [sp, #40]	; 0x28
   83dfa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83dfe:	1c4a      	adds	r2, r1, #1
   83e00:	f04f 0301 	mov.w	r3, #1
   83e04:	f47f adf0 	bne.w	839e8 <_svfprintf_r+0x20c>
   83e08:	ea54 0205 	orrs.w	r2, r4, r5
   83e0c:	f000 8229 	beq.w	84262 <_svfprintf_r+0xa86>
   83e10:	f8cd b01c 	str.w	fp, [sp, #28]
   83e14:	2b01      	cmp	r3, #1
   83e16:	f000 830e 	beq.w	84436 <_svfprintf_r+0xc5a>
   83e1a:	2b02      	cmp	r3, #2
   83e1c:	f040 829c 	bne.w	84358 <_svfprintf_r+0xb7c>
   83e20:	464e      	mov	r6, r9
   83e22:	9818      	ldr	r0, [sp, #96]	; 0x60
   83e24:	0923      	lsrs	r3, r4, #4
   83e26:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   83e2a:	0929      	lsrs	r1, r5, #4
   83e2c:	f004 020f 	and.w	r2, r4, #15
   83e30:	460d      	mov	r5, r1
   83e32:	461c      	mov	r4, r3
   83e34:	5c83      	ldrb	r3, [r0, r2]
   83e36:	f806 3d01 	strb.w	r3, [r6, #-1]!
   83e3a:	ea54 0305 	orrs.w	r3, r4, r5
   83e3e:	d1f1      	bne.n	83e24 <_svfprintf_r+0x648>
   83e40:	eba9 0306 	sub.w	r3, r9, r6
   83e44:	930e      	str	r3, [sp, #56]	; 0x38
   83e46:	e5e5      	b.n	83a14 <_svfprintf_r+0x238>
   83e48:	9311      	str	r3, [sp, #68]	; 0x44
   83e4a:	2a00      	cmp	r2, #0
   83e4c:	f040 8738 	bne.w	84cc0 <_svfprintf_r+0x14e4>
   83e50:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83e52:	f01b 0f08 	tst.w	fp, #8
   83e56:	f104 0407 	add.w	r4, r4, #7
   83e5a:	f000 84cf 	beq.w	847fc <_svfprintf_r+0x1020>
   83e5e:	f024 0307 	bic.w	r3, r4, #7
   83e62:	f103 0208 	add.w	r2, r3, #8
   83e66:	920f      	str	r2, [sp, #60]	; 0x3c
   83e68:	681a      	ldr	r2, [r3, #0]
   83e6a:	685b      	ldr	r3, [r3, #4]
   83e6c:	9215      	str	r2, [sp, #84]	; 0x54
   83e6e:	9314      	str	r3, [sp, #80]	; 0x50
   83e70:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83e72:	9d15      	ldr	r5, [sp, #84]	; 0x54
   83e74:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   83e78:	4628      	mov	r0, r5
   83e7a:	4621      	mov	r1, r4
   83e7c:	f04f 32ff 	mov.w	r2, #4294967295
   83e80:	4b6f      	ldr	r3, [pc, #444]	; (84040 <_svfprintf_r+0x864>)
   83e82:	f003 fdf5 	bl	87a70 <__aeabi_dcmpun>
   83e86:	2800      	cmp	r0, #0
   83e88:	f040 8434 	bne.w	846f4 <_svfprintf_r+0xf18>
   83e8c:	4628      	mov	r0, r5
   83e8e:	4621      	mov	r1, r4
   83e90:	f04f 32ff 	mov.w	r2, #4294967295
   83e94:	4b6a      	ldr	r3, [pc, #424]	; (84040 <_svfprintf_r+0x864>)
   83e96:	f003 fdcd 	bl	87a34 <__aeabi_dcmple>
   83e9a:	2800      	cmp	r0, #0
   83e9c:	f040 842a 	bne.w	846f4 <_svfprintf_r+0xf18>
   83ea0:	a815      	add	r0, sp, #84	; 0x54
   83ea2:	c80d      	ldmia	r0, {r0, r2, r3}
   83ea4:	9914      	ldr	r1, [sp, #80]	; 0x50
   83ea6:	f003 fdbb 	bl	87a20 <__aeabi_dcmplt>
   83eaa:	2800      	cmp	r0, #0
   83eac:	f040 85d4 	bne.w	84a58 <_svfprintf_r+0x127c>
   83eb0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83eb4:	2303      	movs	r3, #3
   83eb6:	461a      	mov	r2, r3
   83eb8:	9308      	str	r3, [sp, #32]
   83eba:	2300      	movs	r3, #0
   83ebc:	4e61      	ldr	r6, [pc, #388]	; (84044 <_svfprintf_r+0x868>)
   83ebe:	4619      	mov	r1, r3
   83ec0:	930a      	str	r3, [sp, #40]	; 0x28
   83ec2:	4b61      	ldr	r3, [pc, #388]	; (84048 <_svfprintf_r+0x86c>)
   83ec4:	920e      	str	r2, [sp, #56]	; 0x38
   83ec6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83ec8:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   83ecc:	9007      	str	r0, [sp, #28]
   83ece:	9112      	str	r1, [sp, #72]	; 0x48
   83ed0:	2a47      	cmp	r2, #71	; 0x47
   83ed2:	bfd8      	it	le
   83ed4:	461e      	movle	r6, r3
   83ed6:	e5a5      	b.n	83a24 <_svfprintf_r+0x248>
   83ed8:	f04b 0b08 	orr.w	fp, fp, #8
   83edc:	f89a 3000 	ldrb.w	r3, [sl]
   83ee0:	e4d6      	b.n	83890 <_svfprintf_r+0xb4>
   83ee2:	f04b 0b10 	orr.w	fp, fp, #16
   83ee6:	9311      	str	r3, [sp, #68]	; 0x44
   83ee8:	f01b 0320 	ands.w	r3, fp, #32
   83eec:	f43f aebb 	beq.w	83c66 <_svfprintf_r+0x48a>
   83ef0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83ef2:	3407      	adds	r4, #7
   83ef4:	f024 0307 	bic.w	r3, r4, #7
   83ef8:	f103 0208 	add.w	r2, r3, #8
   83efc:	e9d3 4500 	ldrd	r4, r5, [r3]
   83f00:	920f      	str	r2, [sp, #60]	; 0x3c
   83f02:	2300      	movs	r3, #0
   83f04:	e568      	b.n	839d8 <_svfprintf_r+0x1fc>
   83f06:	9311      	str	r3, [sp, #68]	; 0x44
   83f08:	2a00      	cmp	r2, #0
   83f0a:	f040 86c2 	bne.w	84c92 <_svfprintf_r+0x14b6>
   83f0e:	4b4f      	ldr	r3, [pc, #316]	; (8404c <_svfprintf_r+0x870>)
   83f10:	f01b 0f20 	tst.w	fp, #32
   83f14:	9318      	str	r3, [sp, #96]	; 0x60
   83f16:	f43f af19 	beq.w	83d4c <_svfprintf_r+0x570>
   83f1a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83f1c:	f01b 0f01 	tst.w	fp, #1
   83f20:	f104 0407 	add.w	r4, r4, #7
   83f24:	f024 0307 	bic.w	r3, r4, #7
   83f28:	f103 0208 	add.w	r2, r3, #8
   83f2c:	920f      	str	r2, [sp, #60]	; 0x3c
   83f2e:	e9d3 4500 	ldrd	r4, r5, [r3]
   83f32:	f47f af1d 	bne.w	83d70 <_svfprintf_r+0x594>
   83f36:	2302      	movs	r3, #2
   83f38:	e54e      	b.n	839d8 <_svfprintf_r+0x1fc>
   83f3a:	f89a 3000 	ldrb.w	r3, [sl]
   83f3e:	2900      	cmp	r1, #0
   83f40:	f47f aca6 	bne.w	83890 <_svfprintf_r+0xb4>
   83f44:	2201      	movs	r2, #1
   83f46:	2120      	movs	r1, #32
   83f48:	e4a2      	b.n	83890 <_svfprintf_r+0xb4>
   83f4a:	f04b 0b01 	orr.w	fp, fp, #1
   83f4e:	f89a 3000 	ldrb.w	r3, [sl]
   83f52:	e49d      	b.n	83890 <_svfprintf_r+0xb4>
   83f54:	f89a 3000 	ldrb.w	r3, [sl]
   83f58:	2201      	movs	r2, #1
   83f5a:	212b      	movs	r1, #43	; 0x2b
   83f5c:	e498      	b.n	83890 <_svfprintf_r+0xb4>
   83f5e:	f04b 0b20 	orr.w	fp, fp, #32
   83f62:	f89a 3000 	ldrb.w	r3, [sl]
   83f66:	e493      	b.n	83890 <_svfprintf_r+0xb4>
   83f68:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   83f6c:	f89a 3000 	ldrb.w	r3, [sl]
   83f70:	e48e      	b.n	83890 <_svfprintf_r+0xb4>
   83f72:	f89a 3000 	ldrb.w	r3, [sl]
   83f76:	2b6c      	cmp	r3, #108	; 0x6c
   83f78:	bf03      	ittte	eq
   83f7a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   83f7e:	f04b 0b20 	orreq.w	fp, fp, #32
   83f82:	f10a 0a01 	addeq.w	sl, sl, #1
   83f86:	f04b 0b10 	orrne.w	fp, fp, #16
   83f8a:	e481      	b.n	83890 <_svfprintf_r+0xb4>
   83f8c:	2a00      	cmp	r2, #0
   83f8e:	f040 867c 	bne.w	84c8a <_svfprintf_r+0x14ae>
   83f92:	f01b 0f20 	tst.w	fp, #32
   83f96:	f040 8452 	bne.w	8483e <_svfprintf_r+0x1062>
   83f9a:	f01b 0f10 	tst.w	fp, #16
   83f9e:	f040 8438 	bne.w	84812 <_svfprintf_r+0x1036>
   83fa2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   83fa6:	f000 8434 	beq.w	84812 <_svfprintf_r+0x1036>
   83faa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83fac:	6813      	ldr	r3, [r2, #0]
   83fae:	3204      	adds	r2, #4
   83fb0:	920f      	str	r2, [sp, #60]	; 0x3c
   83fb2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   83fb6:	801a      	strh	r2, [r3, #0]
   83fb8:	e437      	b.n	8382a <_svfprintf_r+0x4e>
   83fba:	2378      	movs	r3, #120	; 0x78
   83fbc:	2230      	movs	r2, #48	; 0x30
   83fbe:	980f      	ldr	r0, [sp, #60]	; 0x3c
   83fc0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   83fc4:	9311      	str	r3, [sp, #68]	; 0x44
   83fc6:	1d03      	adds	r3, r0, #4
   83fc8:	930f      	str	r3, [sp, #60]	; 0x3c
   83fca:	4b20      	ldr	r3, [pc, #128]	; (8404c <_svfprintf_r+0x870>)
   83fcc:	6804      	ldr	r4, [r0, #0]
   83fce:	9318      	str	r3, [sp, #96]	; 0x60
   83fd0:	f04b 0b02 	orr.w	fp, fp, #2
   83fd4:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   83fd8:	2500      	movs	r5, #0
   83fda:	2302      	movs	r3, #2
   83fdc:	e4fc      	b.n	839d8 <_svfprintf_r+0x1fc>
   83fde:	9311      	str	r3, [sp, #68]	; 0x44
   83fe0:	2a00      	cmp	r2, #0
   83fe2:	f43f aeef 	beq.w	83dc4 <_svfprintf_r+0x5e8>
   83fe6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83fea:	e6eb      	b.n	83dc4 <_svfprintf_r+0x5e8>
   83fec:	2000      	movs	r0, #0
   83fee:	4604      	mov	r4, r0
   83ff0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83ff4:	f81a 3b01 	ldrb.w	r3, [sl], #1
   83ff8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   83ffc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   84000:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84004:	2809      	cmp	r0, #9
   84006:	d9f5      	bls.n	83ff4 <_svfprintf_r+0x818>
   84008:	940d      	str	r4, [sp, #52]	; 0x34
   8400a:	e443      	b.n	83894 <_svfprintf_r+0xb8>
   8400c:	9311      	str	r3, [sp, #68]	; 0x44
   8400e:	2a00      	cmp	r2, #0
   84010:	f040 864a 	bne.w	84ca8 <_svfprintf_r+0x14cc>
   84014:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84016:	2a00      	cmp	r2, #0
   84018:	f43f acb6 	beq.w	83988 <_svfprintf_r+0x1ac>
   8401c:	2300      	movs	r3, #0
   8401e:	2101      	movs	r1, #1
   84020:	461f      	mov	r7, r3
   84022:	9108      	str	r1, [sp, #32]
   84024:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   84028:	f8cd b01c 	str.w	fp, [sp, #28]
   8402c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84030:	930a      	str	r3, [sp, #40]	; 0x28
   84032:	9312      	str	r3, [sp, #72]	; 0x48
   84034:	910e      	str	r1, [sp, #56]	; 0x38
   84036:	ae28      	add	r6, sp, #160	; 0xa0
   84038:	e4f8      	b.n	83a2c <_svfprintf_r+0x250>
   8403a:	bf00      	nop
   8403c:	00087fb8 	.word	0x00087fb8
   84040:	7fefffff 	.word	0x7fefffff
   84044:	00087fac 	.word	0x00087fac
   84048:	00087fa8 	.word	0x00087fa8
   8404c:	00087fcc 	.word	0x00087fcc
   84050:	aa25      	add	r2, sp, #148	; 0x94
   84052:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84054:	980c      	ldr	r0, [sp, #48]	; 0x30
   84056:	f002 fc37 	bl	868c8 <__ssprint_r>
   8405a:	2800      	cmp	r0, #0
   8405c:	f47f ac9b 	bne.w	83996 <_svfprintf_r+0x1ba>
   84060:	46c8      	mov	r8, r9
   84062:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84066:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84068:	e533      	b.n	83ad2 <_svfprintf_r+0x2f6>
   8406a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8406c:	2b65      	cmp	r3, #101	; 0x65
   8406e:	f340 809a 	ble.w	841a6 <_svfprintf_r+0x9ca>
   84072:	a815      	add	r0, sp, #84	; 0x54
   84074:	c80d      	ldmia	r0, {r0, r2, r3}
   84076:	9914      	ldr	r1, [sp, #80]	; 0x50
   84078:	f003 fcc8 	bl	87a0c <__aeabi_dcmpeq>
   8407c:	2800      	cmp	r0, #0
   8407e:	f000 8193 	beq.w	843a8 <_svfprintf_r+0xbcc>
   84082:	2101      	movs	r1, #1
   84084:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84086:	4ab5      	ldr	r2, [pc, #724]	; (8435c <_svfprintf_r+0xb80>)
   84088:	440b      	add	r3, r1
   8408a:	440c      	add	r4, r1
   8408c:	2b07      	cmp	r3, #7
   8408e:	9427      	str	r4, [sp, #156]	; 0x9c
   84090:	9326      	str	r3, [sp, #152]	; 0x98
   84092:	f8c8 1004 	str.w	r1, [r8, #4]
   84096:	f8c8 2000 	str.w	r2, [r8]
   8409a:	f300 83c6 	bgt.w	8482a <_svfprintf_r+0x104e>
   8409e:	f108 0808 	add.w	r8, r8, #8
   840a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   840a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   840a6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   840a8:	4293      	cmp	r3, r2
   840aa:	db03      	blt.n	840b4 <_svfprintf_r+0x8d8>
   840ac:	9b07      	ldr	r3, [sp, #28]
   840ae:	07dd      	lsls	r5, r3, #31
   840b0:	f57f ad86 	bpl.w	83bc0 <_svfprintf_r+0x3e4>
   840b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   840b6:	9919      	ldr	r1, [sp, #100]	; 0x64
   840b8:	3301      	adds	r3, #1
   840ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   840bc:	440c      	add	r4, r1
   840be:	2b07      	cmp	r3, #7
   840c0:	f8c8 2000 	str.w	r2, [r8]
   840c4:	f8c8 1004 	str.w	r1, [r8, #4]
   840c8:	9427      	str	r4, [sp, #156]	; 0x9c
   840ca:	9326      	str	r3, [sp, #152]	; 0x98
   840cc:	f300 83c4 	bgt.w	84858 <_svfprintf_r+0x107c>
   840d0:	f108 0808 	add.w	r8, r8, #8
   840d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   840d6:	1e5e      	subs	r6, r3, #1
   840d8:	2e00      	cmp	r6, #0
   840da:	f77f ad71 	ble.w	83bc0 <_svfprintf_r+0x3e4>
   840de:	2e10      	cmp	r6, #16
   840e0:	f340 8575 	ble.w	84bce <_svfprintf_r+0x13f2>
   840e4:	4622      	mov	r2, r4
   840e6:	2710      	movs	r7, #16
   840e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   840ea:	4d9d      	ldr	r5, [pc, #628]	; (84360 <_svfprintf_r+0xb84>)
   840ec:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   840f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   840f2:	e005      	b.n	84100 <_svfprintf_r+0x924>
   840f4:	f108 0808 	add.w	r8, r8, #8
   840f8:	3e10      	subs	r6, #16
   840fa:	2e10      	cmp	r6, #16
   840fc:	f340 8225 	ble.w	8454a <_svfprintf_r+0xd6e>
   84100:	3301      	adds	r3, #1
   84102:	3210      	adds	r2, #16
   84104:	2b07      	cmp	r3, #7
   84106:	9227      	str	r2, [sp, #156]	; 0x9c
   84108:	9326      	str	r3, [sp, #152]	; 0x98
   8410a:	e888 00a0 	stmia.w	r8, {r5, r7}
   8410e:	ddf1      	ble.n	840f4 <_svfprintf_r+0x918>
   84110:	aa25      	add	r2, sp, #148	; 0x94
   84112:	4621      	mov	r1, r4
   84114:	4658      	mov	r0, fp
   84116:	f002 fbd7 	bl	868c8 <__ssprint_r>
   8411a:	2800      	cmp	r0, #0
   8411c:	f47f ac3b 	bne.w	83996 <_svfprintf_r+0x1ba>
   84120:	46c8      	mov	r8, r9
   84122:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84124:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84126:	e7e7      	b.n	840f8 <_svfprintf_r+0x91c>
   84128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8412a:	9a08      	ldr	r2, [sp, #32]
   8412c:	1a9f      	subs	r7, r3, r2
   8412e:	2f00      	cmp	r7, #0
   84130:	f77f acf6 	ble.w	83b20 <_svfprintf_r+0x344>
   84134:	2f10      	cmp	r7, #16
   84136:	f340 84a8 	ble.w	84a8a <_svfprintf_r+0x12ae>
   8413a:	4d89      	ldr	r5, [pc, #548]	; (84360 <_svfprintf_r+0xb84>)
   8413c:	4642      	mov	r2, r8
   8413e:	4621      	mov	r1, r4
   84140:	46b0      	mov	r8, r6
   84142:	f04f 0b10 	mov.w	fp, #16
   84146:	462e      	mov	r6, r5
   84148:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8414a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8414c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8414e:	e004      	b.n	8415a <_svfprintf_r+0x97e>
   84150:	3f10      	subs	r7, #16
   84152:	2f10      	cmp	r7, #16
   84154:	f102 0208 	add.w	r2, r2, #8
   84158:	dd15      	ble.n	84186 <_svfprintf_r+0x9aa>
   8415a:	3301      	adds	r3, #1
   8415c:	3110      	adds	r1, #16
   8415e:	2b07      	cmp	r3, #7
   84160:	9127      	str	r1, [sp, #156]	; 0x9c
   84162:	9326      	str	r3, [sp, #152]	; 0x98
   84164:	e882 0840 	stmia.w	r2, {r6, fp}
   84168:	ddf2      	ble.n	84150 <_svfprintf_r+0x974>
   8416a:	aa25      	add	r2, sp, #148	; 0x94
   8416c:	4629      	mov	r1, r5
   8416e:	4620      	mov	r0, r4
   84170:	f002 fbaa 	bl	868c8 <__ssprint_r>
   84174:	2800      	cmp	r0, #0
   84176:	f47f ac0e 	bne.w	83996 <_svfprintf_r+0x1ba>
   8417a:	3f10      	subs	r7, #16
   8417c:	2f10      	cmp	r7, #16
   8417e:	464a      	mov	r2, r9
   84180:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84182:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84184:	dce9      	bgt.n	8415a <_svfprintf_r+0x97e>
   84186:	4635      	mov	r5, r6
   84188:	460c      	mov	r4, r1
   8418a:	4646      	mov	r6, r8
   8418c:	4690      	mov	r8, r2
   8418e:	3301      	adds	r3, #1
   84190:	443c      	add	r4, r7
   84192:	2b07      	cmp	r3, #7
   84194:	9427      	str	r4, [sp, #156]	; 0x9c
   84196:	9326      	str	r3, [sp, #152]	; 0x98
   84198:	e888 00a0 	stmia.w	r8, {r5, r7}
   8419c:	f300 829e 	bgt.w	846dc <_svfprintf_r+0xf00>
   841a0:	f108 0808 	add.w	r8, r8, #8
   841a4:	e4bc      	b.n	83b20 <_svfprintf_r+0x344>
   841a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   841a8:	2b01      	cmp	r3, #1
   841aa:	f340 824f 	ble.w	8464c <_svfprintf_r+0xe70>
   841ae:	2301      	movs	r3, #1
   841b0:	9f26      	ldr	r7, [sp, #152]	; 0x98
   841b2:	441c      	add	r4, r3
   841b4:	441f      	add	r7, r3
   841b6:	2f07      	cmp	r7, #7
   841b8:	9427      	str	r4, [sp, #156]	; 0x9c
   841ba:	f8c8 6000 	str.w	r6, [r8]
   841be:	9726      	str	r7, [sp, #152]	; 0x98
   841c0:	f8c8 3004 	str.w	r3, [r8, #4]
   841c4:	f300 825f 	bgt.w	84686 <_svfprintf_r+0xeaa>
   841c8:	f108 0808 	add.w	r8, r8, #8
   841cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   841ce:	3701      	adds	r7, #1
   841d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   841d2:	4414      	add	r4, r2
   841d4:	2f07      	cmp	r7, #7
   841d6:	9427      	str	r4, [sp, #156]	; 0x9c
   841d8:	9726      	str	r7, [sp, #152]	; 0x98
   841da:	f8c8 3000 	str.w	r3, [r8]
   841de:	f8c8 2004 	str.w	r2, [r8, #4]
   841e2:	f300 825c 	bgt.w	8469e <_svfprintf_r+0xec2>
   841e6:	f108 0808 	add.w	r8, r8, #8
   841ea:	a815      	add	r0, sp, #84	; 0x54
   841ec:	c80d      	ldmia	r0, {r0, r2, r3}
   841ee:	9914      	ldr	r1, [sp, #80]	; 0x50
   841f0:	f003 fc0c 	bl	87a0c <__aeabi_dcmpeq>
   841f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   841f6:	2800      	cmp	r0, #0
   841f8:	f040 8141 	bne.w	8447e <_svfprintf_r+0xca2>
   841fc:	3b01      	subs	r3, #1
   841fe:	3701      	adds	r7, #1
   84200:	3601      	adds	r6, #1
   84202:	441c      	add	r4, r3
   84204:	2f07      	cmp	r7, #7
   84206:	f8c8 6000 	str.w	r6, [r8]
   8420a:	9726      	str	r7, [sp, #152]	; 0x98
   8420c:	9427      	str	r4, [sp, #156]	; 0x9c
   8420e:	f8c8 3004 	str.w	r3, [r8, #4]
   84212:	f300 8166 	bgt.w	844e2 <_svfprintf_r+0xd06>
   84216:	f108 0808 	add.w	r8, r8, #8
   8421a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   8421c:	3701      	adds	r7, #1
   8421e:	4414      	add	r4, r2
   84220:	ab21      	add	r3, sp, #132	; 0x84
   84222:	2f07      	cmp	r7, #7
   84224:	9427      	str	r4, [sp, #156]	; 0x9c
   84226:	9726      	str	r7, [sp, #152]	; 0x98
   84228:	f8c8 2004 	str.w	r2, [r8, #4]
   8422c:	f8c8 3000 	str.w	r3, [r8]
   84230:	f77f acc4 	ble.w	83bbc <_svfprintf_r+0x3e0>
   84234:	aa25      	add	r2, sp, #148	; 0x94
   84236:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84238:	980c      	ldr	r0, [sp, #48]	; 0x30
   8423a:	f002 fb45 	bl	868c8 <__ssprint_r>
   8423e:	2800      	cmp	r0, #0
   84240:	f47f aba9 	bne.w	83996 <_svfprintf_r+0x1ba>
   84244:	46c8      	mov	r8, r9
   84246:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84248:	e4ba      	b.n	83bc0 <_svfprintf_r+0x3e4>
   8424a:	aa25      	add	r2, sp, #148	; 0x94
   8424c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8424e:	980c      	ldr	r0, [sp, #48]	; 0x30
   84250:	f002 fb3a 	bl	868c8 <__ssprint_r>
   84254:	2800      	cmp	r0, #0
   84256:	f43f acfd 	beq.w	83c54 <_svfprintf_r+0x478>
   8425a:	f7ff bb9c 	b.w	83996 <_svfprintf_r+0x1ba>
   8425e:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84262:	2b01      	cmp	r3, #1
   84264:	f000 817e 	beq.w	84564 <_svfprintf_r+0xd88>
   84268:	2b02      	cmp	r3, #2
   8426a:	d171      	bne.n	84350 <_svfprintf_r+0xb74>
   8426c:	f8cd b01c 	str.w	fp, [sp, #28]
   84270:	2400      	movs	r4, #0
   84272:	2500      	movs	r5, #0
   84274:	e5d4      	b.n	83e20 <_svfprintf_r+0x644>
   84276:	aa25      	add	r2, sp, #148	; 0x94
   84278:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8427a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8427c:	f002 fb24 	bl	868c8 <__ssprint_r>
   84280:	2800      	cmp	r0, #0
   84282:	f47f ab88 	bne.w	83996 <_svfprintf_r+0x1ba>
   84286:	46c8      	mov	r8, r9
   84288:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8428a:	e486      	b.n	83b9a <_svfprintf_r+0x3be>
   8428c:	aa25      	add	r2, sp, #148	; 0x94
   8428e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84290:	980c      	ldr	r0, [sp, #48]	; 0x30
   84292:	f002 fb19 	bl	868c8 <__ssprint_r>
   84296:	2800      	cmp	r0, #0
   84298:	f47f ab7d 	bne.w	83996 <_svfprintf_r+0x1ba>
   8429c:	46c8      	mov	r8, r9
   8429e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   842a0:	e429      	b.n	83af6 <_svfprintf_r+0x31a>
   842a2:	2001      	movs	r0, #1
   842a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   842a6:	4a2d      	ldr	r2, [pc, #180]	; (8435c <_svfprintf_r+0xb80>)
   842a8:	4403      	add	r3, r0
   842aa:	4404      	add	r4, r0
   842ac:	2b07      	cmp	r3, #7
   842ae:	9427      	str	r4, [sp, #156]	; 0x9c
   842b0:	9326      	str	r3, [sp, #152]	; 0x98
   842b2:	f8c8 0004 	str.w	r0, [r8, #4]
   842b6:	f8c8 2000 	str.w	r2, [r8]
   842ba:	f340 82d8 	ble.w	8486e <_svfprintf_r+0x1092>
   842be:	aa25      	add	r2, sp, #148	; 0x94
   842c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   842c2:	980c      	ldr	r0, [sp, #48]	; 0x30
   842c4:	f002 fb00 	bl	868c8 <__ssprint_r>
   842c8:	2800      	cmp	r0, #0
   842ca:	f47f ab64 	bne.w	83996 <_svfprintf_r+0x1ba>
   842ce:	46c8      	mov	r8, r9
   842d0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   842d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   842d4:	b929      	cbnz	r1, 842e2 <_svfprintf_r+0xb06>
   842d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   842d8:	b91b      	cbnz	r3, 842e2 <_svfprintf_r+0xb06>
   842da:	9b07      	ldr	r3, [sp, #28]
   842dc:	07d8      	lsls	r0, r3, #31
   842de:	f57f ac6f 	bpl.w	83bc0 <_svfprintf_r+0x3e4>
   842e2:	9819      	ldr	r0, [sp, #100]	; 0x64
   842e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   842e6:	4602      	mov	r2, r0
   842e8:	3301      	adds	r3, #1
   842ea:	4422      	add	r2, r4
   842ec:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   842ee:	2b07      	cmp	r3, #7
   842f0:	9227      	str	r2, [sp, #156]	; 0x9c
   842f2:	f8c8 4000 	str.w	r4, [r8]
   842f6:	f8c8 0004 	str.w	r0, [r8, #4]
   842fa:	9326      	str	r3, [sp, #152]	; 0x98
   842fc:	f300 8431 	bgt.w	84b62 <_svfprintf_r+0x1386>
   84300:	f108 0808 	add.w	r8, r8, #8
   84304:	2900      	cmp	r1, #0
   84306:	f2c0 8409 	blt.w	84b1c <_svfprintf_r+0x1340>
   8430a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8430c:	3301      	adds	r3, #1
   8430e:	188c      	adds	r4, r1, r2
   84310:	2b07      	cmp	r3, #7
   84312:	9427      	str	r4, [sp, #156]	; 0x9c
   84314:	9326      	str	r3, [sp, #152]	; 0x98
   84316:	f8c8 6000 	str.w	r6, [r8]
   8431a:	f8c8 1004 	str.w	r1, [r8, #4]
   8431e:	f77f ac4d 	ble.w	83bbc <_svfprintf_r+0x3e0>
   84322:	aa25      	add	r2, sp, #148	; 0x94
   84324:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84326:	980c      	ldr	r0, [sp, #48]	; 0x30
   84328:	f002 face 	bl	868c8 <__ssprint_r>
   8432c:	2800      	cmp	r0, #0
   8432e:	f47f ab32 	bne.w	83996 <_svfprintf_r+0x1ba>
   84332:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84334:	46c8      	mov	r8, r9
   84336:	e443      	b.n	83bc0 <_svfprintf_r+0x3e4>
   84338:	aa25      	add	r2, sp, #148	; 0x94
   8433a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8433c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8433e:	f002 fac3 	bl	868c8 <__ssprint_r>
   84342:	2800      	cmp	r0, #0
   84344:	f47f ab27 	bne.w	83996 <_svfprintf_r+0x1ba>
   84348:	46c8      	mov	r8, r9
   8434a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8434c:	f7ff bbe5 	b.w	83b1a <_svfprintf_r+0x33e>
   84350:	2400      	movs	r4, #0
   84352:	2500      	movs	r5, #0
   84354:	f8cd b01c 	str.w	fp, [sp, #28]
   84358:	4649      	mov	r1, r9
   8435a:	e004      	b.n	84366 <_svfprintf_r+0xb8a>
   8435c:	00087fe8 	.word	0x00087fe8
   84360:	00087ffc 	.word	0x00087ffc
   84364:	4631      	mov	r1, r6
   84366:	08e2      	lsrs	r2, r4, #3
   84368:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   8436c:	08e8      	lsrs	r0, r5, #3
   8436e:	f004 0307 	and.w	r3, r4, #7
   84372:	4605      	mov	r5, r0
   84374:	4614      	mov	r4, r2
   84376:	3330      	adds	r3, #48	; 0x30
   84378:	ea54 0205 	orrs.w	r2, r4, r5
   8437c:	f801 3c01 	strb.w	r3, [r1, #-1]
   84380:	f101 36ff 	add.w	r6, r1, #4294967295
   84384:	d1ee      	bne.n	84364 <_svfprintf_r+0xb88>
   84386:	9a07      	ldr	r2, [sp, #28]
   84388:	07d2      	lsls	r2, r2, #31
   8438a:	f57f ad59 	bpl.w	83e40 <_svfprintf_r+0x664>
   8438e:	2b30      	cmp	r3, #48	; 0x30
   84390:	f43f ad56 	beq.w	83e40 <_svfprintf_r+0x664>
   84394:	2330      	movs	r3, #48	; 0x30
   84396:	3902      	subs	r1, #2
   84398:	f806 3c01 	strb.w	r3, [r6, #-1]
   8439c:	eba9 0301 	sub.w	r3, r9, r1
   843a0:	930e      	str	r3, [sp, #56]	; 0x38
   843a2:	460e      	mov	r6, r1
   843a4:	f7ff bb36 	b.w	83a14 <_svfprintf_r+0x238>
   843a8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   843aa:	2900      	cmp	r1, #0
   843ac:	f77f af79 	ble.w	842a2 <_svfprintf_r+0xac6>
   843b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   843b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   843b4:	4293      	cmp	r3, r2
   843b6:	bfa8      	it	ge
   843b8:	4613      	movge	r3, r2
   843ba:	2b00      	cmp	r3, #0
   843bc:	461f      	mov	r7, r3
   843be:	dd0b      	ble.n	843d8 <_svfprintf_r+0xbfc>
   843c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   843c2:	443c      	add	r4, r7
   843c4:	3301      	adds	r3, #1
   843c6:	2b07      	cmp	r3, #7
   843c8:	9427      	str	r4, [sp, #156]	; 0x9c
   843ca:	e888 00c0 	stmia.w	r8, {r6, r7}
   843ce:	9326      	str	r3, [sp, #152]	; 0x98
   843d0:	f300 82fb 	bgt.w	849ca <_svfprintf_r+0x11ee>
   843d4:	f108 0808 	add.w	r8, r8, #8
   843d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   843da:	2f00      	cmp	r7, #0
   843dc:	bfa8      	it	ge
   843de:	1bdb      	subge	r3, r3, r7
   843e0:	2b00      	cmp	r3, #0
   843e2:	461f      	mov	r7, r3
   843e4:	f340 80d7 	ble.w	84596 <_svfprintf_r+0xdba>
   843e8:	2b10      	cmp	r3, #16
   843ea:	f340 8434 	ble.w	84c56 <_svfprintf_r+0x147a>
   843ee:	4dba      	ldr	r5, [pc, #744]	; (846d8 <_svfprintf_r+0xefc>)
   843f0:	4642      	mov	r2, r8
   843f2:	4621      	mov	r1, r4
   843f4:	46b0      	mov	r8, r6
   843f6:	f04f 0b10 	mov.w	fp, #16
   843fa:	462e      	mov	r6, r5
   843fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   843fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84400:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84402:	e004      	b.n	8440e <_svfprintf_r+0xc32>
   84404:	3208      	adds	r2, #8
   84406:	3f10      	subs	r7, #16
   84408:	2f10      	cmp	r7, #16
   8440a:	f340 80b5 	ble.w	84578 <_svfprintf_r+0xd9c>
   8440e:	3301      	adds	r3, #1
   84410:	3110      	adds	r1, #16
   84412:	2b07      	cmp	r3, #7
   84414:	9127      	str	r1, [sp, #156]	; 0x9c
   84416:	9326      	str	r3, [sp, #152]	; 0x98
   84418:	e882 0840 	stmia.w	r2, {r6, fp}
   8441c:	ddf2      	ble.n	84404 <_svfprintf_r+0xc28>
   8441e:	aa25      	add	r2, sp, #148	; 0x94
   84420:	4629      	mov	r1, r5
   84422:	4620      	mov	r0, r4
   84424:	f002 fa50 	bl	868c8 <__ssprint_r>
   84428:	2800      	cmp	r0, #0
   8442a:	f47f aab4 	bne.w	83996 <_svfprintf_r+0x1ba>
   8442e:	464a      	mov	r2, r9
   84430:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84432:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84434:	e7e7      	b.n	84406 <_svfprintf_r+0xc2a>
   84436:	2d00      	cmp	r5, #0
   84438:	bf08      	it	eq
   8443a:	2c0a      	cmpeq	r4, #10
   8443c:	f0c0 8090 	bcc.w	84560 <_svfprintf_r+0xd84>
   84440:	464e      	mov	r6, r9
   84442:	4620      	mov	r0, r4
   84444:	4629      	mov	r1, r5
   84446:	220a      	movs	r2, #10
   84448:	2300      	movs	r3, #0
   8444a:	f003 fb4f 	bl	87aec <__aeabi_uldivmod>
   8444e:	3230      	adds	r2, #48	; 0x30
   84450:	f806 2d01 	strb.w	r2, [r6, #-1]!
   84454:	4620      	mov	r0, r4
   84456:	4629      	mov	r1, r5
   84458:	2300      	movs	r3, #0
   8445a:	220a      	movs	r2, #10
   8445c:	f003 fb46 	bl	87aec <__aeabi_uldivmod>
   84460:	4604      	mov	r4, r0
   84462:	460d      	mov	r5, r1
   84464:	ea54 0305 	orrs.w	r3, r4, r5
   84468:	d1eb      	bne.n	84442 <_svfprintf_r+0xc66>
   8446a:	eba9 0306 	sub.w	r3, r9, r6
   8446e:	930e      	str	r3, [sp, #56]	; 0x38
   84470:	f7ff bad0 	b.w	83a14 <_svfprintf_r+0x238>
   84474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84476:	464e      	mov	r6, r9
   84478:	930e      	str	r3, [sp, #56]	; 0x38
   8447a:	f7ff bacb 	b.w	83a14 <_svfprintf_r+0x238>
   8447e:	1e5e      	subs	r6, r3, #1
   84480:	2e00      	cmp	r6, #0
   84482:	f77f aeca 	ble.w	8421a <_svfprintf_r+0xa3e>
   84486:	2e10      	cmp	r6, #16
   84488:	f340 83e3 	ble.w	84c52 <_svfprintf_r+0x1476>
   8448c:	4622      	mov	r2, r4
   8448e:	f04f 0b10 	mov.w	fp, #16
   84492:	4d91      	ldr	r5, [pc, #580]	; (846d8 <_svfprintf_r+0xefc>)
   84494:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84496:	e004      	b.n	844a2 <_svfprintf_r+0xcc6>
   84498:	3e10      	subs	r6, #16
   8449a:	2e10      	cmp	r6, #16
   8449c:	f108 0808 	add.w	r8, r8, #8
   844a0:	dd15      	ble.n	844ce <_svfprintf_r+0xcf2>
   844a2:	3701      	adds	r7, #1
   844a4:	3210      	adds	r2, #16
   844a6:	2f07      	cmp	r7, #7
   844a8:	9227      	str	r2, [sp, #156]	; 0x9c
   844aa:	9726      	str	r7, [sp, #152]	; 0x98
   844ac:	e888 0820 	stmia.w	r8, {r5, fp}
   844b0:	ddf2      	ble.n	84498 <_svfprintf_r+0xcbc>
   844b2:	aa25      	add	r2, sp, #148	; 0x94
   844b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   844b6:	4620      	mov	r0, r4
   844b8:	f002 fa06 	bl	868c8 <__ssprint_r>
   844bc:	2800      	cmp	r0, #0
   844be:	f47f aa6a 	bne.w	83996 <_svfprintf_r+0x1ba>
   844c2:	3e10      	subs	r6, #16
   844c4:	2e10      	cmp	r6, #16
   844c6:	46c8      	mov	r8, r9
   844c8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   844ca:	9f26      	ldr	r7, [sp, #152]	; 0x98
   844cc:	dce9      	bgt.n	844a2 <_svfprintf_r+0xcc6>
   844ce:	4614      	mov	r4, r2
   844d0:	3701      	adds	r7, #1
   844d2:	4434      	add	r4, r6
   844d4:	2f07      	cmp	r7, #7
   844d6:	9427      	str	r4, [sp, #156]	; 0x9c
   844d8:	9726      	str	r7, [sp, #152]	; 0x98
   844da:	e888 0060 	stmia.w	r8, {r5, r6}
   844de:	f77f ae9a 	ble.w	84216 <_svfprintf_r+0xa3a>
   844e2:	aa25      	add	r2, sp, #148	; 0x94
   844e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   844e6:	980c      	ldr	r0, [sp, #48]	; 0x30
   844e8:	f002 f9ee 	bl	868c8 <__ssprint_r>
   844ec:	2800      	cmp	r0, #0
   844ee:	f47f aa52 	bne.w	83996 <_svfprintf_r+0x1ba>
   844f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   844f4:	9f26      	ldr	r7, [sp, #152]	; 0x98
   844f6:	46c8      	mov	r8, r9
   844f8:	e68f      	b.n	8421a <_svfprintf_r+0xa3e>
   844fa:	3204      	adds	r2, #4
   844fc:	681c      	ldr	r4, [r3, #0]
   844fe:	2500      	movs	r5, #0
   84500:	2301      	movs	r3, #1
   84502:	920f      	str	r2, [sp, #60]	; 0x3c
   84504:	f7ff ba68 	b.w	839d8 <_svfprintf_r+0x1fc>
   84508:	681c      	ldr	r4, [r3, #0]
   8450a:	3304      	adds	r3, #4
   8450c:	930f      	str	r3, [sp, #60]	; 0x3c
   8450e:	2500      	movs	r5, #0
   84510:	e42a      	b.n	83d68 <_svfprintf_r+0x58c>
   84512:	681c      	ldr	r4, [r3, #0]
   84514:	3304      	adds	r3, #4
   84516:	17e5      	asrs	r5, r4, #31
   84518:	4622      	mov	r2, r4
   8451a:	930f      	str	r3, [sp, #60]	; 0x3c
   8451c:	462b      	mov	r3, r5
   8451e:	2a00      	cmp	r2, #0
   84520:	f173 0300 	sbcs.w	r3, r3, #0
   84524:	f6bf ac68 	bge.w	83df8 <_svfprintf_r+0x61c>
   84528:	272d      	movs	r7, #45	; 0x2d
   8452a:	4264      	negs	r4, r4
   8452c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84530:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   84534:	2301      	movs	r3, #1
   84536:	f7ff ba53 	b.w	839e0 <_svfprintf_r+0x204>
   8453a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8453c:	2500      	movs	r5, #0
   8453e:	460a      	mov	r2, r1
   84540:	3204      	adds	r2, #4
   84542:	680c      	ldr	r4, [r1, #0]
   84544:	920f      	str	r2, [sp, #60]	; 0x3c
   84546:	f7ff ba47 	b.w	839d8 <_svfprintf_r+0x1fc>
   8454a:	4614      	mov	r4, r2
   8454c:	3301      	adds	r3, #1
   8454e:	4434      	add	r4, r6
   84550:	2b07      	cmp	r3, #7
   84552:	9427      	str	r4, [sp, #156]	; 0x9c
   84554:	9326      	str	r3, [sp, #152]	; 0x98
   84556:	e888 0060 	stmia.w	r8, {r5, r6}
   8455a:	f77f ab2f 	ble.w	83bbc <_svfprintf_r+0x3e0>
   8455e:	e6e0      	b.n	84322 <_svfprintf_r+0xb46>
   84560:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84564:	2301      	movs	r3, #1
   84566:	ae42      	add	r6, sp, #264	; 0x108
   84568:	3430      	adds	r4, #48	; 0x30
   8456a:	f8cd b01c 	str.w	fp, [sp, #28]
   8456e:	f806 4d41 	strb.w	r4, [r6, #-65]!
   84572:	930e      	str	r3, [sp, #56]	; 0x38
   84574:	f7ff ba4e 	b.w	83a14 <_svfprintf_r+0x238>
   84578:	4635      	mov	r5, r6
   8457a:	460c      	mov	r4, r1
   8457c:	4646      	mov	r6, r8
   8457e:	4690      	mov	r8, r2
   84580:	3301      	adds	r3, #1
   84582:	443c      	add	r4, r7
   84584:	2b07      	cmp	r3, #7
   84586:	9427      	str	r4, [sp, #156]	; 0x9c
   84588:	9326      	str	r3, [sp, #152]	; 0x98
   8458a:	e888 00a0 	stmia.w	r8, {r5, r7}
   8458e:	f300 8246 	bgt.w	84a1e <_svfprintf_r+0x1242>
   84592:	f108 0808 	add.w	r8, r8, #8
   84596:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84598:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8459a:	429a      	cmp	r2, r3
   8459c:	db45      	blt.n	8462a <_svfprintf_r+0xe4e>
   8459e:	9b07      	ldr	r3, [sp, #28]
   845a0:	07d9      	lsls	r1, r3, #31
   845a2:	d442      	bmi.n	8462a <_svfprintf_r+0xe4e>
   845a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   845a6:	9812      	ldr	r0, [sp, #72]	; 0x48
   845a8:	1a9a      	subs	r2, r3, r2
   845aa:	1a1d      	subs	r5, r3, r0
   845ac:	4295      	cmp	r5, r2
   845ae:	bfa8      	it	ge
   845b0:	4615      	movge	r5, r2
   845b2:	2d00      	cmp	r5, #0
   845b4:	dd0e      	ble.n	845d4 <_svfprintf_r+0xdf8>
   845b6:	9926      	ldr	r1, [sp, #152]	; 0x98
   845b8:	4406      	add	r6, r0
   845ba:	3101      	adds	r1, #1
   845bc:	442c      	add	r4, r5
   845be:	2907      	cmp	r1, #7
   845c0:	f8c8 6000 	str.w	r6, [r8]
   845c4:	9427      	str	r4, [sp, #156]	; 0x9c
   845c6:	f8c8 5004 	str.w	r5, [r8, #4]
   845ca:	9126      	str	r1, [sp, #152]	; 0x98
   845cc:	f300 8216 	bgt.w	849fc <_svfprintf_r+0x1220>
   845d0:	f108 0808 	add.w	r8, r8, #8
   845d4:	2d00      	cmp	r5, #0
   845d6:	bfb4      	ite	lt
   845d8:	4616      	movlt	r6, r2
   845da:	1b56      	subge	r6, r2, r5
   845dc:	2e00      	cmp	r6, #0
   845de:	f77f aaef 	ble.w	83bc0 <_svfprintf_r+0x3e4>
   845e2:	2e10      	cmp	r6, #16
   845e4:	f340 82f3 	ble.w	84bce <_svfprintf_r+0x13f2>
   845e8:	4622      	mov	r2, r4
   845ea:	2710      	movs	r7, #16
   845ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
   845ee:	4d3a      	ldr	r5, [pc, #232]	; (846d8 <_svfprintf_r+0xefc>)
   845f0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   845f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   845f6:	e004      	b.n	84602 <_svfprintf_r+0xe26>
   845f8:	f108 0808 	add.w	r8, r8, #8
   845fc:	3e10      	subs	r6, #16
   845fe:	2e10      	cmp	r6, #16
   84600:	dda3      	ble.n	8454a <_svfprintf_r+0xd6e>
   84602:	3301      	adds	r3, #1
   84604:	3210      	adds	r2, #16
   84606:	2b07      	cmp	r3, #7
   84608:	9227      	str	r2, [sp, #156]	; 0x9c
   8460a:	9326      	str	r3, [sp, #152]	; 0x98
   8460c:	e888 00a0 	stmia.w	r8, {r5, r7}
   84610:	ddf2      	ble.n	845f8 <_svfprintf_r+0xe1c>
   84612:	aa25      	add	r2, sp, #148	; 0x94
   84614:	4621      	mov	r1, r4
   84616:	4658      	mov	r0, fp
   84618:	f002 f956 	bl	868c8 <__ssprint_r>
   8461c:	2800      	cmp	r0, #0
   8461e:	f47f a9ba 	bne.w	83996 <_svfprintf_r+0x1ba>
   84622:	46c8      	mov	r8, r9
   84624:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84626:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84628:	e7e8      	b.n	845fc <_svfprintf_r+0xe20>
   8462a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8462c:	9819      	ldr	r0, [sp, #100]	; 0x64
   8462e:	3301      	adds	r3, #1
   84630:	991a      	ldr	r1, [sp, #104]	; 0x68
   84632:	4404      	add	r4, r0
   84634:	2b07      	cmp	r3, #7
   84636:	9427      	str	r4, [sp, #156]	; 0x9c
   84638:	f8c8 1000 	str.w	r1, [r8]
   8463c:	f8c8 0004 	str.w	r0, [r8, #4]
   84640:	9326      	str	r3, [sp, #152]	; 0x98
   84642:	f300 81cf 	bgt.w	849e4 <_svfprintf_r+0x1208>
   84646:	f108 0808 	add.w	r8, r8, #8
   8464a:	e7ab      	b.n	845a4 <_svfprintf_r+0xdc8>
   8464c:	9b07      	ldr	r3, [sp, #28]
   8464e:	07da      	lsls	r2, r3, #31
   84650:	f53f adad 	bmi.w	841ae <_svfprintf_r+0x9d2>
   84654:	2301      	movs	r3, #1
   84656:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84658:	441c      	add	r4, r3
   8465a:	441f      	add	r7, r3
   8465c:	2f07      	cmp	r7, #7
   8465e:	9427      	str	r4, [sp, #156]	; 0x9c
   84660:	f8c8 6000 	str.w	r6, [r8]
   84664:	9726      	str	r7, [sp, #152]	; 0x98
   84666:	f8c8 3004 	str.w	r3, [r8, #4]
   8466a:	f77f add4 	ble.w	84216 <_svfprintf_r+0xa3a>
   8466e:	aa25      	add	r2, sp, #148	; 0x94
   84670:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84672:	980c      	ldr	r0, [sp, #48]	; 0x30
   84674:	f002 f928 	bl	868c8 <__ssprint_r>
   84678:	2800      	cmp	r0, #0
   8467a:	f47f a98c 	bne.w	83996 <_svfprintf_r+0x1ba>
   8467e:	46c8      	mov	r8, r9
   84680:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84682:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84684:	e5c9      	b.n	8421a <_svfprintf_r+0xa3e>
   84686:	aa25      	add	r2, sp, #148	; 0x94
   84688:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8468a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8468c:	f002 f91c 	bl	868c8 <__ssprint_r>
   84690:	2800      	cmp	r0, #0
   84692:	f47f a980 	bne.w	83996 <_svfprintf_r+0x1ba>
   84696:	46c8      	mov	r8, r9
   84698:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8469a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8469c:	e596      	b.n	841cc <_svfprintf_r+0x9f0>
   8469e:	aa25      	add	r2, sp, #148	; 0x94
   846a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   846a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   846a4:	f002 f910 	bl	868c8 <__ssprint_r>
   846a8:	2800      	cmp	r0, #0
   846aa:	f47f a974 	bne.w	83996 <_svfprintf_r+0x1ba>
   846ae:	46c8      	mov	r8, r9
   846b0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   846b2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   846b4:	e599      	b.n	841ea <_svfprintf_r+0xa0e>
   846b6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   846b8:	3407      	adds	r4, #7
   846ba:	f024 0407 	bic.w	r4, r4, #7
   846be:	f104 0108 	add.w	r1, r4, #8
   846c2:	e9d4 2300 	ldrd	r2, r3, [r4]
   846c6:	910f      	str	r1, [sp, #60]	; 0x3c
   846c8:	4614      	mov	r4, r2
   846ca:	461d      	mov	r5, r3
   846cc:	f7ff bb8f 	b.w	83dee <_svfprintf_r+0x612>
   846d0:	464e      	mov	r6, r9
   846d2:	f7ff b99f 	b.w	83a14 <_svfprintf_r+0x238>
   846d6:	bf00      	nop
   846d8:	00087ffc 	.word	0x00087ffc
   846dc:	aa25      	add	r2, sp, #148	; 0x94
   846de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   846e0:	980c      	ldr	r0, [sp, #48]	; 0x30
   846e2:	f002 f8f1 	bl	868c8 <__ssprint_r>
   846e6:	2800      	cmp	r0, #0
   846e8:	f47f a955 	bne.w	83996 <_svfprintf_r+0x1ba>
   846ec:	46c8      	mov	r8, r9
   846ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   846f0:	f7ff ba16 	b.w	83b20 <_svfprintf_r+0x344>
   846f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
   846f6:	4622      	mov	r2, r4
   846f8:	4620      	mov	r0, r4
   846fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
   846fc:	4623      	mov	r3, r4
   846fe:	4621      	mov	r1, r4
   84700:	f003 f9b6 	bl	87a70 <__aeabi_dcmpun>
   84704:	2800      	cmp	r0, #0
   84706:	f040 8273 	bne.w	84bf0 <_svfprintf_r+0x1414>
   8470a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8470c:	3301      	adds	r3, #1
   8470e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84710:	f023 0320 	bic.w	r3, r3, #32
   84714:	930e      	str	r3, [sp, #56]	; 0x38
   84716:	f000 819c 	beq.w	84a52 <_svfprintf_r+0x1276>
   8471a:	2b47      	cmp	r3, #71	; 0x47
   8471c:	f000 80d6 	beq.w	848cc <_svfprintf_r+0x10f0>
   84720:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   84724:	9307      	str	r3, [sp, #28]
   84726:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84728:	1e1f      	subs	r7, r3, #0
   8472a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8472c:	9308      	str	r3, [sp, #32]
   8472e:	bfb7      	itett	lt
   84730:	463b      	movlt	r3, r7
   84732:	2300      	movge	r3, #0
   84734:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   84738:	232d      	movlt	r3, #45	; 0x2d
   8473a:	9310      	str	r3, [sp, #64]	; 0x40
   8473c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8473e:	2b66      	cmp	r3, #102	; 0x66
   84740:	f000 8190 	beq.w	84a64 <_svfprintf_r+0x1288>
   84744:	2b46      	cmp	r3, #70	; 0x46
   84746:	f000 80a4 	beq.w	84892 <_svfprintf_r+0x10b6>
   8474a:	2002      	movs	r0, #2
   8474c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8474e:	a923      	add	r1, sp, #140	; 0x8c
   84750:	2b45      	cmp	r3, #69	; 0x45
   84752:	bf0a      	itet	eq
   84754:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   84756:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   84758:	1c5d      	addeq	r5, r3, #1
   8475a:	e88d 0021 	stmia.w	sp, {r0, r5}
   8475e:	9104      	str	r1, [sp, #16]
   84760:	a820      	add	r0, sp, #128	; 0x80
   84762:	a91f      	add	r1, sp, #124	; 0x7c
   84764:	463b      	mov	r3, r7
   84766:	9003      	str	r0, [sp, #12]
   84768:	9a08      	ldr	r2, [sp, #32]
   8476a:	9102      	str	r1, [sp, #8]
   8476c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8476e:	f000 fb5b 	bl	84e28 <_dtoa_r>
   84772:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84774:	4606      	mov	r6, r0
   84776:	2b67      	cmp	r3, #103	; 0x67
   84778:	f040 81ba 	bne.w	84af0 <_svfprintf_r+0x1314>
   8477c:	f01b 0f01 	tst.w	fp, #1
   84780:	f000 8223 	beq.w	84bca <_svfprintf_r+0x13ee>
   84784:	1974      	adds	r4, r6, r5
   84786:	9a16      	ldr	r2, [sp, #88]	; 0x58
   84788:	9808      	ldr	r0, [sp, #32]
   8478a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8478c:	4639      	mov	r1, r7
   8478e:	f003 f93d 	bl	87a0c <__aeabi_dcmpeq>
   84792:	2800      	cmp	r0, #0
   84794:	f040 8124 	bne.w	849e0 <_svfprintf_r+0x1204>
   84798:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8479a:	42a3      	cmp	r3, r4
   8479c:	d206      	bcs.n	847ac <_svfprintf_r+0xfd0>
   8479e:	2130      	movs	r1, #48	; 0x30
   847a0:	1c5a      	adds	r2, r3, #1
   847a2:	9223      	str	r2, [sp, #140]	; 0x8c
   847a4:	7019      	strb	r1, [r3, #0]
   847a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   847a8:	429c      	cmp	r4, r3
   847aa:	d8f9      	bhi.n	847a0 <_svfprintf_r+0xfc4>
   847ac:	1b9b      	subs	r3, r3, r6
   847ae:	9313      	str	r3, [sp, #76]	; 0x4c
   847b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   847b2:	2b47      	cmp	r3, #71	; 0x47
   847b4:	f000 80a2 	beq.w	848fc <_svfprintf_r+0x1120>
   847b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   847ba:	2b65      	cmp	r3, #101	; 0x65
   847bc:	f340 81a7 	ble.w	84b0e <_svfprintf_r+0x1332>
   847c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   847c2:	2b66      	cmp	r3, #102	; 0x66
   847c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   847c6:	9312      	str	r3, [sp, #72]	; 0x48
   847c8:	f000 8171 	beq.w	84aae <_svfprintf_r+0x12d2>
   847cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   847ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
   847d0:	4619      	mov	r1, r3
   847d2:	4291      	cmp	r1, r2
   847d4:	f300 815d 	bgt.w	84a92 <_svfprintf_r+0x12b6>
   847d8:	f01b 0f01 	tst.w	fp, #1
   847dc:	f040 81f0 	bne.w	84bc0 <_svfprintf_r+0x13e4>
   847e0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   847e4:	9308      	str	r3, [sp, #32]
   847e6:	2367      	movs	r3, #103	; 0x67
   847e8:	920e      	str	r2, [sp, #56]	; 0x38
   847ea:	9311      	str	r3, [sp, #68]	; 0x44
   847ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   847ee:	2b00      	cmp	r3, #0
   847f0:	d17d      	bne.n	848ee <_svfprintf_r+0x1112>
   847f2:	930a      	str	r3, [sp, #40]	; 0x28
   847f4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   847f8:	f7ff b914 	b.w	83a24 <_svfprintf_r+0x248>
   847fc:	f024 0407 	bic.w	r4, r4, #7
   84800:	6823      	ldr	r3, [r4, #0]
   84802:	9315      	str	r3, [sp, #84]	; 0x54
   84804:	6863      	ldr	r3, [r4, #4]
   84806:	9314      	str	r3, [sp, #80]	; 0x50
   84808:	f104 0308 	add.w	r3, r4, #8
   8480c:	930f      	str	r3, [sp, #60]	; 0x3c
   8480e:	f7ff bb2f 	b.w	83e70 <_svfprintf_r+0x694>
   84812:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84814:	6813      	ldr	r3, [r2, #0]
   84816:	3204      	adds	r2, #4
   84818:	920f      	str	r2, [sp, #60]	; 0x3c
   8481a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8481c:	601a      	str	r2, [r3, #0]
   8481e:	f7ff b804 	b.w	8382a <_svfprintf_r+0x4e>
   84822:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84824:	4daf      	ldr	r5, [pc, #700]	; (84ae4 <_svfprintf_r+0x1308>)
   84826:	f7ff b9ad 	b.w	83b84 <_svfprintf_r+0x3a8>
   8482a:	aa25      	add	r2, sp, #148	; 0x94
   8482c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8482e:	980c      	ldr	r0, [sp, #48]	; 0x30
   84830:	f002 f84a 	bl	868c8 <__ssprint_r>
   84834:	2800      	cmp	r0, #0
   84836:	f47f a8ae 	bne.w	83996 <_svfprintf_r+0x1ba>
   8483a:	46c8      	mov	r8, r9
   8483c:	e431      	b.n	840a2 <_svfprintf_r+0x8c6>
   8483e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84840:	4613      	mov	r3, r2
   84842:	3304      	adds	r3, #4
   84844:	930f      	str	r3, [sp, #60]	; 0x3c
   84846:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84848:	6811      	ldr	r1, [r2, #0]
   8484a:	17dd      	asrs	r5, r3, #31
   8484c:	461a      	mov	r2, r3
   8484e:	462b      	mov	r3, r5
   84850:	e9c1 2300 	strd	r2, r3, [r1]
   84854:	f7fe bfe9 	b.w	8382a <_svfprintf_r+0x4e>
   84858:	aa25      	add	r2, sp, #148	; 0x94
   8485a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8485c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8485e:	f002 f833 	bl	868c8 <__ssprint_r>
   84862:	2800      	cmp	r0, #0
   84864:	f47f a897 	bne.w	83996 <_svfprintf_r+0x1ba>
   84868:	46c8      	mov	r8, r9
   8486a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8486c:	e432      	b.n	840d4 <_svfprintf_r+0x8f8>
   8486e:	f108 0808 	add.w	r8, r8, #8
   84872:	e52f      	b.n	842d4 <_svfprintf_r+0xaf8>
   84874:	2140      	movs	r1, #64	; 0x40
   84876:	980c      	ldr	r0, [sp, #48]	; 0x30
   84878:	f001 fa24 	bl	85cc4 <_malloc_r>
   8487c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8487e:	6010      	str	r0, [r2, #0]
   84880:	6110      	str	r0, [r2, #16]
   84882:	2800      	cmp	r0, #0
   84884:	f000 8214 	beq.w	84cb0 <_svfprintf_r+0x14d4>
   84888:	2340      	movs	r3, #64	; 0x40
   8488a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8488c:	6153      	str	r3, [r2, #20]
   8488e:	f7fe bfbc 	b.w	8380a <_svfprintf_r+0x2e>
   84892:	2003      	movs	r0, #3
   84894:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84896:	a923      	add	r1, sp, #140	; 0x8c
   84898:	e88d 0011 	stmia.w	sp, {r0, r4}
   8489c:	9104      	str	r1, [sp, #16]
   8489e:	a820      	add	r0, sp, #128	; 0x80
   848a0:	a91f      	add	r1, sp, #124	; 0x7c
   848a2:	9003      	str	r0, [sp, #12]
   848a4:	9a08      	ldr	r2, [sp, #32]
   848a6:	463b      	mov	r3, r7
   848a8:	9102      	str	r1, [sp, #8]
   848aa:	980c      	ldr	r0, [sp, #48]	; 0x30
   848ac:	f000 fabc 	bl	84e28 <_dtoa_r>
   848b0:	4625      	mov	r5, r4
   848b2:	4606      	mov	r6, r0
   848b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   848b6:	1974      	adds	r4, r6, r5
   848b8:	2b46      	cmp	r3, #70	; 0x46
   848ba:	f47f af64 	bne.w	84786 <_svfprintf_r+0xfaa>
   848be:	7833      	ldrb	r3, [r6, #0]
   848c0:	2b30      	cmp	r3, #48	; 0x30
   848c2:	f000 8187 	beq.w	84bd4 <_svfprintf_r+0x13f8>
   848c6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   848c8:	442c      	add	r4, r5
   848ca:	e75c      	b.n	84786 <_svfprintf_r+0xfaa>
   848cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   848ce:	2b00      	cmp	r3, #0
   848d0:	bf08      	it	eq
   848d2:	2301      	moveq	r3, #1
   848d4:	930a      	str	r3, [sp, #40]	; 0x28
   848d6:	e723      	b.n	84720 <_svfprintf_r+0xf44>
   848d8:	4630      	mov	r0, r6
   848da:	950a      	str	r5, [sp, #40]	; 0x28
   848dc:	f7fe ff50 	bl	83780 <strlen>
   848e0:	940f      	str	r4, [sp, #60]	; 0x3c
   848e2:	900e      	str	r0, [sp, #56]	; 0x38
   848e4:	f8cd b01c 	str.w	fp, [sp, #28]
   848e8:	4603      	mov	r3, r0
   848ea:	f7ff b9e7 	b.w	83cbc <_svfprintf_r+0x4e0>
   848ee:	272d      	movs	r7, #45	; 0x2d
   848f0:	2300      	movs	r3, #0
   848f2:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   848f6:	930a      	str	r3, [sp, #40]	; 0x28
   848f8:	f7ff b895 	b.w	83a26 <_svfprintf_r+0x24a>
   848fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   848fe:	461a      	mov	r2, r3
   84900:	9312      	str	r3, [sp, #72]	; 0x48
   84902:	3303      	adds	r3, #3
   84904:	db04      	blt.n	84910 <_svfprintf_r+0x1134>
   84906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84908:	4619      	mov	r1, r3
   8490a:	4291      	cmp	r1, r2
   8490c:	f6bf af5e 	bge.w	847cc <_svfprintf_r+0xff0>
   84910:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84912:	3b02      	subs	r3, #2
   84914:	9311      	str	r3, [sp, #68]	; 0x44
   84916:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84918:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   8491c:	3b01      	subs	r3, #1
   8491e:	2b00      	cmp	r3, #0
   84920:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   84924:	bfb4      	ite	lt
   84926:	222d      	movlt	r2, #45	; 0x2d
   84928:	222b      	movge	r2, #43	; 0x2b
   8492a:	931f      	str	r3, [sp, #124]	; 0x7c
   8492c:	bfb8      	it	lt
   8492e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   84930:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   84934:	bfb8      	it	lt
   84936:	f1c3 0301 	rsblt	r3, r3, #1
   8493a:	2b09      	cmp	r3, #9
   8493c:	f340 811f 	ble.w	84b7e <_svfprintf_r+0x13a2>
   84940:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   84944:	4601      	mov	r1, r0
   84946:	4c68      	ldr	r4, [pc, #416]	; (84ae8 <_svfprintf_r+0x130c>)
   84948:	e000      	b.n	8494c <_svfprintf_r+0x1170>
   8494a:	4611      	mov	r1, r2
   8494c:	fb84 5203 	smull	r5, r2, r4, r3
   84950:	17dd      	asrs	r5, r3, #31
   84952:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   84956:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   8495a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   8495e:	3230      	adds	r2, #48	; 0x30
   84960:	2d09      	cmp	r5, #9
   84962:	f801 2c01 	strb.w	r2, [r1, #-1]
   84966:	462b      	mov	r3, r5
   84968:	f101 32ff 	add.w	r2, r1, #4294967295
   8496c:	dced      	bgt.n	8494a <_svfprintf_r+0x116e>
   8496e:	3330      	adds	r3, #48	; 0x30
   84970:	3902      	subs	r1, #2
   84972:	b2dc      	uxtb	r4, r3
   84974:	4288      	cmp	r0, r1
   84976:	f802 4c01 	strb.w	r4, [r2, #-1]
   8497a:	f240 8192 	bls.w	84ca2 <_svfprintf_r+0x14c6>
   8497e:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   84982:	4613      	mov	r3, r2
   84984:	e001      	b.n	8498a <_svfprintf_r+0x11ae>
   84986:	f813 4b01 	ldrb.w	r4, [r3], #1
   8498a:	4283      	cmp	r3, r0
   8498c:	f801 4b01 	strb.w	r4, [r1], #1
   84990:	d1f9      	bne.n	84986 <_svfprintf_r+0x11aa>
   84992:	3301      	adds	r3, #1
   84994:	1a9b      	subs	r3, r3, r2
   84996:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   8499a:	4413      	add	r3, r2
   8499c:	aa21      	add	r2, sp, #132	; 0x84
   8499e:	1a9b      	subs	r3, r3, r2
   849a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   849a2:	931b      	str	r3, [sp, #108]	; 0x6c
   849a4:	2a01      	cmp	r2, #1
   849a6:	4413      	add	r3, r2
   849a8:	930e      	str	r3, [sp, #56]	; 0x38
   849aa:	f340 8148 	ble.w	84c3e <_svfprintf_r+0x1462>
   849ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   849b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   849b2:	4413      	add	r3, r2
   849b4:	930e      	str	r3, [sp, #56]	; 0x38
   849b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   849ba:	9308      	str	r3, [sp, #32]
   849bc:	2300      	movs	r3, #0
   849be:	9312      	str	r3, [sp, #72]	; 0x48
   849c0:	e714      	b.n	847ec <_svfprintf_r+0x1010>
   849c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   849c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   849c6:	f7ff b876 	b.w	83ab6 <_svfprintf_r+0x2da>
   849ca:	aa25      	add	r2, sp, #148	; 0x94
   849cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   849ce:	980c      	ldr	r0, [sp, #48]	; 0x30
   849d0:	f001 ff7a 	bl	868c8 <__ssprint_r>
   849d4:	2800      	cmp	r0, #0
   849d6:	f47e afde 	bne.w	83996 <_svfprintf_r+0x1ba>
   849da:	46c8      	mov	r8, r9
   849dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   849de:	e4fb      	b.n	843d8 <_svfprintf_r+0xbfc>
   849e0:	4623      	mov	r3, r4
   849e2:	e6e3      	b.n	847ac <_svfprintf_r+0xfd0>
   849e4:	aa25      	add	r2, sp, #148	; 0x94
   849e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   849e8:	980c      	ldr	r0, [sp, #48]	; 0x30
   849ea:	f001 ff6d 	bl	868c8 <__ssprint_r>
   849ee:	2800      	cmp	r0, #0
   849f0:	f47e afd1 	bne.w	83996 <_svfprintf_r+0x1ba>
   849f4:	46c8      	mov	r8, r9
   849f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   849f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   849fa:	e5d3      	b.n	845a4 <_svfprintf_r+0xdc8>
   849fc:	aa25      	add	r2, sp, #148	; 0x94
   849fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84a00:	980c      	ldr	r0, [sp, #48]	; 0x30
   84a02:	f001 ff61 	bl	868c8 <__ssprint_r>
   84a06:	2800      	cmp	r0, #0
   84a08:	f47e afc5 	bne.w	83996 <_svfprintf_r+0x1ba>
   84a0c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84a0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84a10:	46c8      	mov	r8, r9
   84a12:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84a14:	1a9a      	subs	r2, r3, r2
   84a16:	e5dd      	b.n	845d4 <_svfprintf_r+0xdf8>
   84a18:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a1a:	f7ff b8fe 	b.w	83c1a <_svfprintf_r+0x43e>
   84a1e:	aa25      	add	r2, sp, #148	; 0x94
   84a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84a22:	980c      	ldr	r0, [sp, #48]	; 0x30
   84a24:	f001 ff50 	bl	868c8 <__ssprint_r>
   84a28:	2800      	cmp	r0, #0
   84a2a:	f47e afb4 	bne.w	83996 <_svfprintf_r+0x1ba>
   84a2e:	46c8      	mov	r8, r9
   84a30:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84a32:	e5b0      	b.n	84596 <_svfprintf_r+0xdba>
   84a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84a36:	4637      	mov	r7, r6
   84a38:	2b06      	cmp	r3, #6
   84a3a:	bf28      	it	cs
   84a3c:	2306      	movcs	r3, #6
   84a3e:	960a      	str	r6, [sp, #40]	; 0x28
   84a40:	9612      	str	r6, [sp, #72]	; 0x48
   84a42:	9308      	str	r3, [sp, #32]
   84a44:	940f      	str	r4, [sp, #60]	; 0x3c
   84a46:	f8cd b01c 	str.w	fp, [sp, #28]
   84a4a:	930e      	str	r3, [sp, #56]	; 0x38
   84a4c:	4e27      	ldr	r6, [pc, #156]	; (84aec <_svfprintf_r+0x1310>)
   84a4e:	f7fe bfe9 	b.w	83a24 <_svfprintf_r+0x248>
   84a52:	2306      	movs	r3, #6
   84a54:	930a      	str	r3, [sp, #40]	; 0x28
   84a56:	e663      	b.n	84720 <_svfprintf_r+0xf44>
   84a58:	232d      	movs	r3, #45	; 0x2d
   84a5a:	461f      	mov	r7, r3
   84a5c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84a60:	f7ff ba28 	b.w	83eb4 <_svfprintf_r+0x6d8>
   84a64:	2003      	movs	r0, #3
   84a66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84a68:	a923      	add	r1, sp, #140	; 0x8c
   84a6a:	e88d 0011 	stmia.w	sp, {r0, r4}
   84a6e:	9104      	str	r1, [sp, #16]
   84a70:	a820      	add	r0, sp, #128	; 0x80
   84a72:	a91f      	add	r1, sp, #124	; 0x7c
   84a74:	9003      	str	r0, [sp, #12]
   84a76:	9a08      	ldr	r2, [sp, #32]
   84a78:	463b      	mov	r3, r7
   84a7a:	9102      	str	r1, [sp, #8]
   84a7c:	980c      	ldr	r0, [sp, #48]	; 0x30
   84a7e:	f000 f9d3 	bl	84e28 <_dtoa_r>
   84a82:	4625      	mov	r5, r4
   84a84:	4606      	mov	r6, r0
   84a86:	1904      	adds	r4, r0, r4
   84a88:	e719      	b.n	848be <_svfprintf_r+0x10e2>
   84a8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a8c:	4d15      	ldr	r5, [pc, #84]	; (84ae4 <_svfprintf_r+0x1308>)
   84a8e:	f7ff bb7e 	b.w	8418e <_svfprintf_r+0x9b2>
   84a92:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84a94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84a96:	4413      	add	r3, r2
   84a98:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84a9a:	930e      	str	r3, [sp, #56]	; 0x38
   84a9c:	2a00      	cmp	r2, #0
   84a9e:	f340 80c7 	ble.w	84c30 <_svfprintf_r+0x1454>
   84aa2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   84aa6:	9308      	str	r3, [sp, #32]
   84aa8:	2367      	movs	r3, #103	; 0x67
   84aaa:	9311      	str	r3, [sp, #68]	; 0x44
   84aac:	e69e      	b.n	847ec <_svfprintf_r+0x1010>
   84aae:	2b00      	cmp	r3, #0
   84ab0:	f340 80e1 	ble.w	84c76 <_svfprintf_r+0x149a>
   84ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84ab6:	2a00      	cmp	r2, #0
   84ab8:	f040 80b0 	bne.w	84c1c <_svfprintf_r+0x1440>
   84abc:	f01b 0f01 	tst.w	fp, #1
   84ac0:	f040 80ac 	bne.w	84c1c <_svfprintf_r+0x1440>
   84ac4:	9308      	str	r3, [sp, #32]
   84ac6:	930e      	str	r3, [sp, #56]	; 0x38
   84ac8:	e690      	b.n	847ec <_svfprintf_r+0x1010>
   84aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84acc:	940f      	str	r4, [sp, #60]	; 0x3c
   84ace:	9308      	str	r3, [sp, #32]
   84ad0:	930e      	str	r3, [sp, #56]	; 0x38
   84ad2:	900a      	str	r0, [sp, #40]	; 0x28
   84ad4:	f8cd b01c 	str.w	fp, [sp, #28]
   84ad8:	9012      	str	r0, [sp, #72]	; 0x48
   84ada:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84ade:	f7fe bfa1 	b.w	83a24 <_svfprintf_r+0x248>
   84ae2:	bf00      	nop
   84ae4:	00087ffc 	.word	0x00087ffc
   84ae8:	66666667 	.word	0x66666667
   84aec:	00087fe0 	.word	0x00087fe0
   84af0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84af2:	2b47      	cmp	r3, #71	; 0x47
   84af4:	f47f ae46 	bne.w	84784 <_svfprintf_r+0xfa8>
   84af8:	f01b 0f01 	tst.w	fp, #1
   84afc:	f47f aeda 	bne.w	848b4 <_svfprintf_r+0x10d8>
   84b00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   84b02:	1b9b      	subs	r3, r3, r6
   84b04:	9313      	str	r3, [sp, #76]	; 0x4c
   84b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84b08:	2b47      	cmp	r3, #71	; 0x47
   84b0a:	f43f aef7 	beq.w	848fc <_svfprintf_r+0x1120>
   84b0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   84b10:	9312      	str	r3, [sp, #72]	; 0x48
   84b12:	e700      	b.n	84916 <_svfprintf_r+0x113a>
   84b14:	2000      	movs	r0, #0
   84b16:	900a      	str	r0, [sp, #40]	; 0x28
   84b18:	f7fe bebc 	b.w	83894 <_svfprintf_r+0xb8>
   84b1c:	424f      	negs	r7, r1
   84b1e:	3110      	adds	r1, #16
   84b20:	da35      	bge.n	84b8e <_svfprintf_r+0x13b2>
   84b22:	2410      	movs	r4, #16
   84b24:	4d6a      	ldr	r5, [pc, #424]	; (84cd0 <_svfprintf_r+0x14f4>)
   84b26:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   84b2a:	e004      	b.n	84b36 <_svfprintf_r+0x135a>
   84b2c:	f108 0808 	add.w	r8, r8, #8
   84b30:	3f10      	subs	r7, #16
   84b32:	2f10      	cmp	r7, #16
   84b34:	dd2c      	ble.n	84b90 <_svfprintf_r+0x13b4>
   84b36:	3301      	adds	r3, #1
   84b38:	3210      	adds	r2, #16
   84b3a:	2b07      	cmp	r3, #7
   84b3c:	9227      	str	r2, [sp, #156]	; 0x9c
   84b3e:	9326      	str	r3, [sp, #152]	; 0x98
   84b40:	f8c8 5000 	str.w	r5, [r8]
   84b44:	f8c8 4004 	str.w	r4, [r8, #4]
   84b48:	ddf0      	ble.n	84b2c <_svfprintf_r+0x1350>
   84b4a:	aa25      	add	r2, sp, #148	; 0x94
   84b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b4e:	4658      	mov	r0, fp
   84b50:	f001 feba 	bl	868c8 <__ssprint_r>
   84b54:	2800      	cmp	r0, #0
   84b56:	f47e af1e 	bne.w	83996 <_svfprintf_r+0x1ba>
   84b5a:	46c8      	mov	r8, r9
   84b5c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84b5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84b60:	e7e6      	b.n	84b30 <_svfprintf_r+0x1354>
   84b62:	aa25      	add	r2, sp, #148	; 0x94
   84b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b66:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b68:	f001 feae 	bl	868c8 <__ssprint_r>
   84b6c:	2800      	cmp	r0, #0
   84b6e:	f47e af12 	bne.w	83996 <_svfprintf_r+0x1ba>
   84b72:	46c8      	mov	r8, r9
   84b74:	991f      	ldr	r1, [sp, #124]	; 0x7c
   84b76:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84b78:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84b7a:	f7ff bbc3 	b.w	84304 <_svfprintf_r+0xb28>
   84b7e:	2230      	movs	r2, #48	; 0x30
   84b80:	4413      	add	r3, r2
   84b82:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   84b86:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   84b8a:	ab22      	add	r3, sp, #136	; 0x88
   84b8c:	e706      	b.n	8499c <_svfprintf_r+0x11c0>
   84b8e:	4d50      	ldr	r5, [pc, #320]	; (84cd0 <_svfprintf_r+0x14f4>)
   84b90:	3301      	adds	r3, #1
   84b92:	443a      	add	r2, r7
   84b94:	2b07      	cmp	r3, #7
   84b96:	e888 00a0 	stmia.w	r8, {r5, r7}
   84b9a:	9227      	str	r2, [sp, #156]	; 0x9c
   84b9c:	9326      	str	r3, [sp, #152]	; 0x98
   84b9e:	f108 0808 	add.w	r8, r8, #8
   84ba2:	f77f abb2 	ble.w	8430a <_svfprintf_r+0xb2e>
   84ba6:	aa25      	add	r2, sp, #148	; 0x94
   84ba8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84baa:	980c      	ldr	r0, [sp, #48]	; 0x30
   84bac:	f001 fe8c 	bl	868c8 <__ssprint_r>
   84bb0:	2800      	cmp	r0, #0
   84bb2:	f47e aef0 	bne.w	83996 <_svfprintf_r+0x1ba>
   84bb6:	46c8      	mov	r8, r9
   84bb8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84bba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84bbc:	f7ff bba5 	b.w	8430a <_svfprintf_r+0xb2e>
   84bc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84bc2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84bc4:	4413      	add	r3, r2
   84bc6:	930e      	str	r3, [sp, #56]	; 0x38
   84bc8:	e76b      	b.n	84aa2 <_svfprintf_r+0x12c6>
   84bca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   84bcc:	e5ee      	b.n	847ac <_svfprintf_r+0xfd0>
   84bce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84bd0:	4d3f      	ldr	r5, [pc, #252]	; (84cd0 <_svfprintf_r+0x14f4>)
   84bd2:	e4bb      	b.n	8454c <_svfprintf_r+0xd70>
   84bd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   84bd6:	9808      	ldr	r0, [sp, #32]
   84bd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   84bda:	4639      	mov	r1, r7
   84bdc:	f002 ff16 	bl	87a0c <__aeabi_dcmpeq>
   84be0:	2800      	cmp	r0, #0
   84be2:	f47f ae70 	bne.w	848c6 <_svfprintf_r+0x10ea>
   84be6:	f1c5 0501 	rsb	r5, r5, #1
   84bea:	951f      	str	r5, [sp, #124]	; 0x7c
   84bec:	442c      	add	r4, r5
   84bee:	e5ca      	b.n	84786 <_svfprintf_r+0xfaa>
   84bf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84bf2:	4e38      	ldr	r6, [pc, #224]	; (84cd4 <_svfprintf_r+0x14f8>)
   84bf4:	2b00      	cmp	r3, #0
   84bf6:	bfbe      	ittt	lt
   84bf8:	232d      	movlt	r3, #45	; 0x2d
   84bfa:	461f      	movlt	r7, r3
   84bfc:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   84c00:	f04f 0303 	mov.w	r3, #3
   84c04:	461a      	mov	r2, r3
   84c06:	9308      	str	r3, [sp, #32]
   84c08:	f04f 0300 	mov.w	r3, #0
   84c0c:	bfa8      	it	ge
   84c0e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   84c12:	4619      	mov	r1, r3
   84c14:	930a      	str	r3, [sp, #40]	; 0x28
   84c16:	4b30      	ldr	r3, [pc, #192]	; (84cd8 <_svfprintf_r+0x14fc>)
   84c18:	f7ff b954 	b.w	83ec4 <_svfprintf_r+0x6e8>
   84c1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84c1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84c20:	4413      	add	r3, r2
   84c22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84c24:	441a      	add	r2, r3
   84c26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   84c2a:	920e      	str	r2, [sp, #56]	; 0x38
   84c2c:	9308      	str	r3, [sp, #32]
   84c2e:	e5dd      	b.n	847ec <_svfprintf_r+0x1010>
   84c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84c32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   84c34:	f1c3 0301 	rsb	r3, r3, #1
   84c38:	441a      	add	r2, r3
   84c3a:	4613      	mov	r3, r2
   84c3c:	e7c3      	b.n	84bc6 <_svfprintf_r+0x13ea>
   84c3e:	f01b 0301 	ands.w	r3, fp, #1
   84c42:	9312      	str	r3, [sp, #72]	; 0x48
   84c44:	f47f aeb3 	bne.w	849ae <_svfprintf_r+0x11d2>
   84c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84c4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   84c4e:	9308      	str	r3, [sp, #32]
   84c50:	e5cc      	b.n	847ec <_svfprintf_r+0x1010>
   84c52:	4d1f      	ldr	r5, [pc, #124]	; (84cd0 <_svfprintf_r+0x14f4>)
   84c54:	e43c      	b.n	844d0 <_svfprintf_r+0xcf4>
   84c56:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84c58:	4d1d      	ldr	r5, [pc, #116]	; (84cd0 <_svfprintf_r+0x14f4>)
   84c5a:	e491      	b.n	84580 <_svfprintf_r+0xda4>
   84c5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   84c5e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   84c62:	6828      	ldr	r0, [r5, #0]
   84c64:	46a2      	mov	sl, r4
   84c66:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   84c6a:	900a      	str	r0, [sp, #40]	; 0x28
   84c6c:	4628      	mov	r0, r5
   84c6e:	3004      	adds	r0, #4
   84c70:	900f      	str	r0, [sp, #60]	; 0x3c
   84c72:	f7fe be0d 	b.w	83890 <_svfprintf_r+0xb4>
   84c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84c78:	b913      	cbnz	r3, 84c80 <_svfprintf_r+0x14a4>
   84c7a:	f01b 0f01 	tst.w	fp, #1
   84c7e:	d002      	beq.n	84c86 <_svfprintf_r+0x14aa>
   84c80:	9b19      	ldr	r3, [sp, #100]	; 0x64
   84c82:	3301      	adds	r3, #1
   84c84:	e7cd      	b.n	84c22 <_svfprintf_r+0x1446>
   84c86:	2301      	movs	r3, #1
   84c88:	e71c      	b.n	84ac4 <_svfprintf_r+0x12e8>
   84c8a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84c8e:	f7ff b980 	b.w	83f92 <_svfprintf_r+0x7b6>
   84c92:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84c96:	f7ff b93a 	b.w	83f0e <_svfprintf_r+0x732>
   84c9a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84c9e:	f7ff b84f 	b.w	83d40 <_svfprintf_r+0x564>
   84ca2:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   84ca6:	e679      	b.n	8499c <_svfprintf_r+0x11c0>
   84ca8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84cac:	f7ff b9b2 	b.w	84014 <_svfprintf_r+0x838>
   84cb0:	f04f 32ff 	mov.w	r2, #4294967295
   84cb4:	230c      	movs	r3, #12
   84cb6:	9209      	str	r2, [sp, #36]	; 0x24
   84cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84cba:	6013      	str	r3, [r2, #0]
   84cbc:	f7fe be74 	b.w	839a8 <_svfprintf_r+0x1cc>
   84cc0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84cc4:	f7ff b8c4 	b.w	83e50 <_svfprintf_r+0x674>
   84cc8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84ccc:	f7ff b878 	b.w	83dc0 <_svfprintf_r+0x5e4>
   84cd0:	00087ffc 	.word	0x00087ffc
   84cd4:	00087fb4 	.word	0x00087fb4
   84cd8:	00087fb0 	.word	0x00087fb0

00084cdc <register_fini>:
   84cdc:	4b02      	ldr	r3, [pc, #8]	; (84ce8 <register_fini+0xc>)
   84cde:	b113      	cbz	r3, 84ce6 <register_fini+0xa>
   84ce0:	4802      	ldr	r0, [pc, #8]	; (84cec <register_fini+0x10>)
   84ce2:	f000 b805 	b.w	84cf0 <atexit>
   84ce6:	4770      	bx	lr
   84ce8:	00000000 	.word	0x00000000
   84cec:	00085c6d 	.word	0x00085c6d

00084cf0 <atexit>:
   84cf0:	2300      	movs	r3, #0
   84cf2:	4601      	mov	r1, r0
   84cf4:	461a      	mov	r2, r3
   84cf6:	4618      	mov	r0, r3
   84cf8:	f001 be64 	b.w	869c4 <__register_exitproc>

00084cfc <quorem>:
   84cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84d00:	6903      	ldr	r3, [r0, #16]
   84d02:	690f      	ldr	r7, [r1, #16]
   84d04:	b083      	sub	sp, #12
   84d06:	429f      	cmp	r7, r3
   84d08:	f300 8088 	bgt.w	84e1c <quorem+0x120>
   84d0c:	3f01      	subs	r7, #1
   84d0e:	f101 0614 	add.w	r6, r1, #20
   84d12:	f100 0a14 	add.w	sl, r0, #20
   84d16:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   84d1a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   84d1e:	3301      	adds	r3, #1
   84d20:	fbb2 f8f3 	udiv	r8, r2, r3
   84d24:	00bb      	lsls	r3, r7, #2
   84d26:	9300      	str	r3, [sp, #0]
   84d28:	eb06 0903 	add.w	r9, r6, r3
   84d2c:	4453      	add	r3, sl
   84d2e:	9301      	str	r3, [sp, #4]
   84d30:	f1b8 0f00 	cmp.w	r8, #0
   84d34:	d03b      	beq.n	84dae <quorem+0xb2>
   84d36:	2300      	movs	r3, #0
   84d38:	46b4      	mov	ip, r6
   84d3a:	461c      	mov	r4, r3
   84d3c:	46d6      	mov	lr, sl
   84d3e:	f85c 2b04 	ldr.w	r2, [ip], #4
   84d42:	f8de 5000 	ldr.w	r5, [lr]
   84d46:	fa1f fb82 	uxth.w	fp, r2
   84d4a:	fb08 330b 	mla	r3, r8, fp, r3
   84d4e:	0c12      	lsrs	r2, r2, #16
   84d50:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   84d54:	fb08 bb02 	mla	fp, r8, r2, fp
   84d58:	b29a      	uxth	r2, r3
   84d5a:	1aa2      	subs	r2, r4, r2
   84d5c:	b2ab      	uxth	r3, r5
   84d5e:	fa1f f48b 	uxth.w	r4, fp
   84d62:	441a      	add	r2, r3
   84d64:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   84d68:	eb04 4422 	add.w	r4, r4, r2, asr #16
   84d6c:	b292      	uxth	r2, r2
   84d6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   84d72:	45e1      	cmp	r9, ip
   84d74:	f84e 2b04 	str.w	r2, [lr], #4
   84d78:	ea4f 4424 	mov.w	r4, r4, asr #16
   84d7c:	ea4f 431b 	mov.w	r3, fp, lsr #16
   84d80:	d2dd      	bcs.n	84d3e <quorem+0x42>
   84d82:	9b00      	ldr	r3, [sp, #0]
   84d84:	f85a 3003 	ldr.w	r3, [sl, r3]
   84d88:	b98b      	cbnz	r3, 84dae <quorem+0xb2>
   84d8a:	9c01      	ldr	r4, [sp, #4]
   84d8c:	1f23      	subs	r3, r4, #4
   84d8e:	459a      	cmp	sl, r3
   84d90:	d20c      	bcs.n	84dac <quorem+0xb0>
   84d92:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84d96:	b94b      	cbnz	r3, 84dac <quorem+0xb0>
   84d98:	f1a4 0308 	sub.w	r3, r4, #8
   84d9c:	e002      	b.n	84da4 <quorem+0xa8>
   84d9e:	681a      	ldr	r2, [r3, #0]
   84da0:	3b04      	subs	r3, #4
   84da2:	b91a      	cbnz	r2, 84dac <quorem+0xb0>
   84da4:	459a      	cmp	sl, r3
   84da6:	f107 37ff 	add.w	r7, r7, #4294967295
   84daa:	d3f8      	bcc.n	84d9e <quorem+0xa2>
   84dac:	6107      	str	r7, [r0, #16]
   84dae:	4604      	mov	r4, r0
   84db0:	f001 fc7a 	bl	866a8 <__mcmp>
   84db4:	2800      	cmp	r0, #0
   84db6:	db2d      	blt.n	84e14 <quorem+0x118>
   84db8:	4655      	mov	r5, sl
   84dba:	2300      	movs	r3, #0
   84dbc:	f108 0801 	add.w	r8, r8, #1
   84dc0:	f856 1b04 	ldr.w	r1, [r6], #4
   84dc4:	6828      	ldr	r0, [r5, #0]
   84dc6:	b28a      	uxth	r2, r1
   84dc8:	1a9a      	subs	r2, r3, r2
   84dca:	0c0b      	lsrs	r3, r1, #16
   84dcc:	b281      	uxth	r1, r0
   84dce:	440a      	add	r2, r1
   84dd0:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   84dd4:	eb03 4322 	add.w	r3, r3, r2, asr #16
   84dd8:	b292      	uxth	r2, r2
   84dda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   84dde:	45b1      	cmp	r9, r6
   84de0:	f845 2b04 	str.w	r2, [r5], #4
   84de4:	ea4f 4323 	mov.w	r3, r3, asr #16
   84de8:	d2ea      	bcs.n	84dc0 <quorem+0xc4>
   84dea:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   84dee:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   84df2:	b97a      	cbnz	r2, 84e14 <quorem+0x118>
   84df4:	1f1a      	subs	r2, r3, #4
   84df6:	4592      	cmp	sl, r2
   84df8:	d20b      	bcs.n	84e12 <quorem+0x116>
   84dfa:	f853 2c04 	ldr.w	r2, [r3, #-4]
   84dfe:	b942      	cbnz	r2, 84e12 <quorem+0x116>
   84e00:	3b08      	subs	r3, #8
   84e02:	e002      	b.n	84e0a <quorem+0x10e>
   84e04:	681a      	ldr	r2, [r3, #0]
   84e06:	3b04      	subs	r3, #4
   84e08:	b91a      	cbnz	r2, 84e12 <quorem+0x116>
   84e0a:	459a      	cmp	sl, r3
   84e0c:	f107 37ff 	add.w	r7, r7, #4294967295
   84e10:	d3f8      	bcc.n	84e04 <quorem+0x108>
   84e12:	6127      	str	r7, [r4, #16]
   84e14:	4640      	mov	r0, r8
   84e16:	b003      	add	sp, #12
   84e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84e1c:	2000      	movs	r0, #0
   84e1e:	b003      	add	sp, #12
   84e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84e24:	0000      	movs	r0, r0
	...

00084e28 <_dtoa_r>:
   84e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84e2c:	6c05      	ldr	r5, [r0, #64]	; 0x40
   84e2e:	b09b      	sub	sp, #108	; 0x6c
   84e30:	4604      	mov	r4, r0
   84e32:	4692      	mov	sl, r2
   84e34:	469b      	mov	fp, r3
   84e36:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   84e38:	b14d      	cbz	r5, 84e4e <_dtoa_r+0x26>
   84e3a:	2301      	movs	r3, #1
   84e3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   84e3e:	4629      	mov	r1, r5
   84e40:	4093      	lsls	r3, r2
   84e42:	60ab      	str	r3, [r5, #8]
   84e44:	606a      	str	r2, [r5, #4]
   84e46:	f001 fa57 	bl	862f8 <_Bfree>
   84e4a:	2300      	movs	r3, #0
   84e4c:	6423      	str	r3, [r4, #64]	; 0x40
   84e4e:	f1bb 0f00 	cmp.w	fp, #0
   84e52:	465d      	mov	r5, fp
   84e54:	db35      	blt.n	84ec2 <_dtoa_r+0x9a>
   84e56:	2300      	movs	r3, #0
   84e58:	6033      	str	r3, [r6, #0]
   84e5a:	4b9d      	ldr	r3, [pc, #628]	; (850d0 <_dtoa_r+0x2a8>)
   84e5c:	43ab      	bics	r3, r5
   84e5e:	d015      	beq.n	84e8c <_dtoa_r+0x64>
   84e60:	2200      	movs	r2, #0
   84e62:	2300      	movs	r3, #0
   84e64:	4650      	mov	r0, sl
   84e66:	4659      	mov	r1, fp
   84e68:	f002 fdd0 	bl	87a0c <__aeabi_dcmpeq>
   84e6c:	4680      	mov	r8, r0
   84e6e:	2800      	cmp	r0, #0
   84e70:	d02d      	beq.n	84ece <_dtoa_r+0xa6>
   84e72:	2301      	movs	r3, #1
   84e74:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84e76:	6013      	str	r3, [r2, #0]
   84e78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84e7a:	2b00      	cmp	r3, #0
   84e7c:	f000 80bd 	beq.w	84ffa <_dtoa_r+0x1d2>
   84e80:	4894      	ldr	r0, [pc, #592]	; (850d4 <_dtoa_r+0x2ac>)
   84e82:	6018      	str	r0, [r3, #0]
   84e84:	3801      	subs	r0, #1
   84e86:	b01b      	add	sp, #108	; 0x6c
   84e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84e8c:	f242 730f 	movw	r3, #9999	; 0x270f
   84e90:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84e92:	6013      	str	r3, [r2, #0]
   84e94:	f1ba 0f00 	cmp.w	sl, #0
   84e98:	d10d      	bne.n	84eb6 <_dtoa_r+0x8e>
   84e9a:	f3c5 0513 	ubfx	r5, r5, #0, #20
   84e9e:	b955      	cbnz	r5, 84eb6 <_dtoa_r+0x8e>
   84ea0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84ea2:	488d      	ldr	r0, [pc, #564]	; (850d8 <_dtoa_r+0x2b0>)
   84ea4:	2b00      	cmp	r3, #0
   84ea6:	d0ee      	beq.n	84e86 <_dtoa_r+0x5e>
   84ea8:	f100 0308 	add.w	r3, r0, #8
   84eac:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   84eae:	6013      	str	r3, [r2, #0]
   84eb0:	b01b      	add	sp, #108	; 0x6c
   84eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84eb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84eb8:	4888      	ldr	r0, [pc, #544]	; (850dc <_dtoa_r+0x2b4>)
   84eba:	2b00      	cmp	r3, #0
   84ebc:	d0e3      	beq.n	84e86 <_dtoa_r+0x5e>
   84ebe:	1cc3      	adds	r3, r0, #3
   84ec0:	e7f4      	b.n	84eac <_dtoa_r+0x84>
   84ec2:	2301      	movs	r3, #1
   84ec4:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   84ec8:	6033      	str	r3, [r6, #0]
   84eca:	46ab      	mov	fp, r5
   84ecc:	e7c5      	b.n	84e5a <_dtoa_r+0x32>
   84ece:	aa18      	add	r2, sp, #96	; 0x60
   84ed0:	ab19      	add	r3, sp, #100	; 0x64
   84ed2:	9201      	str	r2, [sp, #4]
   84ed4:	9300      	str	r3, [sp, #0]
   84ed6:	4652      	mov	r2, sl
   84ed8:	465b      	mov	r3, fp
   84eda:	4620      	mov	r0, r4
   84edc:	f001 fc8e 	bl	867fc <__d2b>
   84ee0:	0d2b      	lsrs	r3, r5, #20
   84ee2:	4681      	mov	r9, r0
   84ee4:	d071      	beq.n	84fca <_dtoa_r+0x1a2>
   84ee6:	4650      	mov	r0, sl
   84ee8:	f3cb 0213 	ubfx	r2, fp, #0, #20
   84eec:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   84ef0:	9f18      	ldr	r7, [sp, #96]	; 0x60
   84ef2:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   84ef6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   84efa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   84efe:	2200      	movs	r2, #0
   84f00:	4b77      	ldr	r3, [pc, #476]	; (850e0 <_dtoa_r+0x2b8>)
   84f02:	f002 f967 	bl	871d4 <__aeabi_dsub>
   84f06:	a36c      	add	r3, pc, #432	; (adr r3, 850b8 <_dtoa_r+0x290>)
   84f08:	e9d3 2300 	ldrd	r2, r3, [r3]
   84f0c:	f002 fb16 	bl	8753c <__aeabi_dmul>
   84f10:	a36b      	add	r3, pc, #428	; (adr r3, 850c0 <_dtoa_r+0x298>)
   84f12:	e9d3 2300 	ldrd	r2, r3, [r3]
   84f16:	f002 f95f 	bl	871d8 <__adddf3>
   84f1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   84f1e:	4630      	mov	r0, r6
   84f20:	f002 faa6 	bl	87470 <__aeabi_i2d>
   84f24:	a368      	add	r3, pc, #416	; (adr r3, 850c8 <_dtoa_r+0x2a0>)
   84f26:	e9d3 2300 	ldrd	r2, r3, [r3]
   84f2a:	f002 fb07 	bl	8753c <__aeabi_dmul>
   84f2e:	4602      	mov	r2, r0
   84f30:	460b      	mov	r3, r1
   84f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   84f36:	f002 f94f 	bl	871d8 <__adddf3>
   84f3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   84f3e:	f002 fdad 	bl	87a9c <__aeabi_d2iz>
   84f42:	2200      	movs	r2, #0
   84f44:	9002      	str	r0, [sp, #8]
   84f46:	2300      	movs	r3, #0
   84f48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   84f4c:	f002 fd68 	bl	87a20 <__aeabi_dcmplt>
   84f50:	2800      	cmp	r0, #0
   84f52:	f040 816d 	bne.w	85230 <_dtoa_r+0x408>
   84f56:	9d02      	ldr	r5, [sp, #8]
   84f58:	2d16      	cmp	r5, #22
   84f5a:	f200 8157 	bhi.w	8520c <_dtoa_r+0x3e4>
   84f5e:	4961      	ldr	r1, [pc, #388]	; (850e4 <_dtoa_r+0x2bc>)
   84f60:	4652      	mov	r2, sl
   84f62:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   84f66:	465b      	mov	r3, fp
   84f68:	e9d1 0100 	ldrd	r0, r1, [r1]
   84f6c:	f002 fd76 	bl	87a5c <__aeabi_dcmpgt>
   84f70:	2800      	cmp	r0, #0
   84f72:	f000 81be 	beq.w	852f2 <_dtoa_r+0x4ca>
   84f76:	1e6b      	subs	r3, r5, #1
   84f78:	9302      	str	r3, [sp, #8]
   84f7a:	2300      	movs	r3, #0
   84f7c:	930e      	str	r3, [sp, #56]	; 0x38
   84f7e:	1bbf      	subs	r7, r7, r6
   84f80:	1e7b      	subs	r3, r7, #1
   84f82:	9308      	str	r3, [sp, #32]
   84f84:	f100 814e 	bmi.w	85224 <_dtoa_r+0x3fc>
   84f88:	2300      	movs	r3, #0
   84f8a:	930a      	str	r3, [sp, #40]	; 0x28
   84f8c:	9b02      	ldr	r3, [sp, #8]
   84f8e:	2b00      	cmp	r3, #0
   84f90:	f2c0 813f 	blt.w	85212 <_dtoa_r+0x3ea>
   84f94:	9a08      	ldr	r2, [sp, #32]
   84f96:	930d      	str	r3, [sp, #52]	; 0x34
   84f98:	4611      	mov	r1, r2
   84f9a:	4419      	add	r1, r3
   84f9c:	2300      	movs	r3, #0
   84f9e:	9108      	str	r1, [sp, #32]
   84fa0:	930c      	str	r3, [sp, #48]	; 0x30
   84fa2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84fa4:	2b09      	cmp	r3, #9
   84fa6:	d82a      	bhi.n	84ffe <_dtoa_r+0x1d6>
   84fa8:	2b05      	cmp	r3, #5
   84faa:	f340 8658 	ble.w	85c5e <_dtoa_r+0xe36>
   84fae:	2500      	movs	r5, #0
   84fb0:	3b04      	subs	r3, #4
   84fb2:	9324      	str	r3, [sp, #144]	; 0x90
   84fb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84fb6:	3b02      	subs	r3, #2
   84fb8:	2b03      	cmp	r3, #3
   84fba:	f200 863f 	bhi.w	85c3c <_dtoa_r+0xe14>
   84fbe:	e8df f013 	tbh	[pc, r3, lsl #1]
   84fc2:	03ce      	.short	0x03ce
   84fc4:	03d902c3 	.word	0x03d902c3
   84fc8:	045b      	.short	0x045b
   84fca:	9f18      	ldr	r7, [sp, #96]	; 0x60
   84fcc:	9e19      	ldr	r6, [sp, #100]	; 0x64
   84fce:	443e      	add	r6, r7
   84fd0:	f206 4332 	addw	r3, r6, #1074	; 0x432
   84fd4:	2b20      	cmp	r3, #32
   84fd6:	f340 8187 	ble.w	852e8 <_dtoa_r+0x4c0>
   84fda:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   84fde:	f206 4012 	addw	r0, r6, #1042	; 0x412
   84fe2:	409d      	lsls	r5, r3
   84fe4:	fa2a f000 	lsr.w	r0, sl, r0
   84fe8:	4328      	orrs	r0, r5
   84fea:	f002 fa31 	bl	87450 <__aeabi_ui2d>
   84fee:	2301      	movs	r3, #1
   84ff0:	3e01      	subs	r6, #1
   84ff2:	9314      	str	r3, [sp, #80]	; 0x50
   84ff4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   84ff8:	e781      	b.n	84efe <_dtoa_r+0xd6>
   84ffa:	483b      	ldr	r0, [pc, #236]	; (850e8 <_dtoa_r+0x2c0>)
   84ffc:	e743      	b.n	84e86 <_dtoa_r+0x5e>
   84ffe:	2100      	movs	r1, #0
   85000:	4620      	mov	r0, r4
   85002:	6461      	str	r1, [r4, #68]	; 0x44
   85004:	9125      	str	r1, [sp, #148]	; 0x94
   85006:	f001 f951 	bl	862ac <_Balloc>
   8500a:	f04f 33ff 	mov.w	r3, #4294967295
   8500e:	9307      	str	r3, [sp, #28]
   85010:	930f      	str	r3, [sp, #60]	; 0x3c
   85012:	2301      	movs	r3, #1
   85014:	9a25      	ldr	r2, [sp, #148]	; 0x94
   85016:	9004      	str	r0, [sp, #16]
   85018:	6420      	str	r0, [r4, #64]	; 0x40
   8501a:	9224      	str	r2, [sp, #144]	; 0x90
   8501c:	930b      	str	r3, [sp, #44]	; 0x2c
   8501e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85020:	2b00      	cmp	r3, #0
   85022:	f2c0 80d3 	blt.w	851cc <_dtoa_r+0x3a4>
   85026:	9a02      	ldr	r2, [sp, #8]
   85028:	2a0e      	cmp	r2, #14
   8502a:	f300 80cf 	bgt.w	851cc <_dtoa_r+0x3a4>
   8502e:	4b2d      	ldr	r3, [pc, #180]	; (850e4 <_dtoa_r+0x2bc>)
   85030:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85034:	e9d3 2300 	ldrd	r2, r3, [r3]
   85038:	e9cd 2308 	strd	r2, r3, [sp, #32]
   8503c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8503e:	2b00      	cmp	r3, #0
   85040:	f2c0 83b4 	blt.w	857ac <_dtoa_r+0x984>
   85044:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   85048:	4650      	mov	r0, sl
   8504a:	462a      	mov	r2, r5
   8504c:	4633      	mov	r3, r6
   8504e:	4659      	mov	r1, fp
   85050:	f002 fb9e 	bl	87790 <__aeabi_ddiv>
   85054:	f002 fd22 	bl	87a9c <__aeabi_d2iz>
   85058:	4680      	mov	r8, r0
   8505a:	f002 fa09 	bl	87470 <__aeabi_i2d>
   8505e:	462a      	mov	r2, r5
   85060:	4633      	mov	r3, r6
   85062:	f002 fa6b 	bl	8753c <__aeabi_dmul>
   85066:	4602      	mov	r2, r0
   85068:	460b      	mov	r3, r1
   8506a:	4650      	mov	r0, sl
   8506c:	4659      	mov	r1, fp
   8506e:	f002 f8b1 	bl	871d4 <__aeabi_dsub>
   85072:	9e07      	ldr	r6, [sp, #28]
   85074:	9f04      	ldr	r7, [sp, #16]
   85076:	f108 0530 	add.w	r5, r8, #48	; 0x30
   8507a:	2e01      	cmp	r6, #1
   8507c:	703d      	strb	r5, [r7, #0]
   8507e:	4602      	mov	r2, r0
   85080:	460b      	mov	r3, r1
   85082:	f107 0501 	add.w	r5, r7, #1
   85086:	d064      	beq.n	85152 <_dtoa_r+0x32a>
   85088:	2200      	movs	r2, #0
   8508a:	4b18      	ldr	r3, [pc, #96]	; (850ec <_dtoa_r+0x2c4>)
   8508c:	f002 fa56 	bl	8753c <__aeabi_dmul>
   85090:	2200      	movs	r2, #0
   85092:	2300      	movs	r3, #0
   85094:	4606      	mov	r6, r0
   85096:	460f      	mov	r7, r1
   85098:	f002 fcb8 	bl	87a0c <__aeabi_dcmpeq>
   8509c:	2800      	cmp	r0, #0
   8509e:	f040 8082 	bne.w	851a6 <_dtoa_r+0x37e>
   850a2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   850a6:	f04f 0a00 	mov.w	sl, #0
   850aa:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   850ae:	f04f 0b00 	mov.w	fp, #0
   850b2:	940b      	str	r4, [sp, #44]	; 0x2c
   850b4:	e029      	b.n	8510a <_dtoa_r+0x2e2>
   850b6:	bf00      	nop
   850b8:	636f4361 	.word	0x636f4361
   850bc:	3fd287a7 	.word	0x3fd287a7
   850c0:	8b60c8b3 	.word	0x8b60c8b3
   850c4:	3fc68a28 	.word	0x3fc68a28
   850c8:	509f79fb 	.word	0x509f79fb
   850cc:	3fd34413 	.word	0x3fd34413
   850d0:	7ff00000 	.word	0x7ff00000
   850d4:	00087fe9 	.word	0x00087fe9
   850d8:	0008800c 	.word	0x0008800c
   850dc:	00088018 	.word	0x00088018
   850e0:	3ff80000 	.word	0x3ff80000
   850e4:	00088048 	.word	0x00088048
   850e8:	00087fe8 	.word	0x00087fe8
   850ec:	40240000 	.word	0x40240000
   850f0:	2200      	movs	r2, #0
   850f2:	4b81      	ldr	r3, [pc, #516]	; (852f8 <_dtoa_r+0x4d0>)
   850f4:	f002 fa22 	bl	8753c <__aeabi_dmul>
   850f8:	4652      	mov	r2, sl
   850fa:	465b      	mov	r3, fp
   850fc:	4606      	mov	r6, r0
   850fe:	460f      	mov	r7, r1
   85100:	f002 fc84 	bl	87a0c <__aeabi_dcmpeq>
   85104:	2800      	cmp	r0, #0
   85106:	f040 83ba 	bne.w	8587e <_dtoa_r+0xa56>
   8510a:	4642      	mov	r2, r8
   8510c:	464b      	mov	r3, r9
   8510e:	4630      	mov	r0, r6
   85110:	4639      	mov	r1, r7
   85112:	f002 fb3d 	bl	87790 <__aeabi_ddiv>
   85116:	f002 fcc1 	bl	87a9c <__aeabi_d2iz>
   8511a:	4604      	mov	r4, r0
   8511c:	f002 f9a8 	bl	87470 <__aeabi_i2d>
   85120:	4642      	mov	r2, r8
   85122:	464b      	mov	r3, r9
   85124:	f002 fa0a 	bl	8753c <__aeabi_dmul>
   85128:	4602      	mov	r2, r0
   8512a:	460b      	mov	r3, r1
   8512c:	4630      	mov	r0, r6
   8512e:	4639      	mov	r1, r7
   85130:	f002 f850 	bl	871d4 <__aeabi_dsub>
   85134:	f104 0630 	add.w	r6, r4, #48	; 0x30
   85138:	f805 6b01 	strb.w	r6, [r5], #1
   8513c:	9e04      	ldr	r6, [sp, #16]
   8513e:	9f07      	ldr	r7, [sp, #28]
   85140:	1bae      	subs	r6, r5, r6
   85142:	42be      	cmp	r6, r7
   85144:	4602      	mov	r2, r0
   85146:	460b      	mov	r3, r1
   85148:	d1d2      	bne.n	850f0 <_dtoa_r+0x2c8>
   8514a:	46a0      	mov	r8, r4
   8514c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85150:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85152:	4610      	mov	r0, r2
   85154:	4619      	mov	r1, r3
   85156:	f002 f83f 	bl	871d8 <__adddf3>
   8515a:	4606      	mov	r6, r0
   8515c:	460f      	mov	r7, r1
   8515e:	4602      	mov	r2, r0
   85160:	460b      	mov	r3, r1
   85162:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85166:	f002 fc5b 	bl	87a20 <__aeabi_dcmplt>
   8516a:	b948      	cbnz	r0, 85180 <_dtoa_r+0x358>
   8516c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85170:	4632      	mov	r2, r6
   85172:	463b      	mov	r3, r7
   85174:	f002 fc4a 	bl	87a0c <__aeabi_dcmpeq>
   85178:	b1a8      	cbz	r0, 851a6 <_dtoa_r+0x37e>
   8517a:	f018 0f01 	tst.w	r8, #1
   8517e:	d012      	beq.n	851a6 <_dtoa_r+0x37e>
   85180:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   85184:	1e6b      	subs	r3, r5, #1
   85186:	9a04      	ldr	r2, [sp, #16]
   85188:	e004      	b.n	85194 <_dtoa_r+0x36c>
   8518a:	429a      	cmp	r2, r3
   8518c:	f000 8402 	beq.w	85994 <_dtoa_r+0xb6c>
   85190:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   85194:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   85198:	f103 0501 	add.w	r5, r3, #1
   8519c:	d0f5      	beq.n	8518a <_dtoa_r+0x362>
   8519e:	f108 0801 	add.w	r8, r8, #1
   851a2:	f883 8000 	strb.w	r8, [r3]
   851a6:	4649      	mov	r1, r9
   851a8:	4620      	mov	r0, r4
   851aa:	f001 f8a5 	bl	862f8 <_Bfree>
   851ae:	2200      	movs	r2, #0
   851b0:	9b02      	ldr	r3, [sp, #8]
   851b2:	702a      	strb	r2, [r5, #0]
   851b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   851b6:	3301      	adds	r3, #1
   851b8:	6013      	str	r3, [r2, #0]
   851ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   851bc:	2b00      	cmp	r3, #0
   851be:	f000 839f 	beq.w	85900 <_dtoa_r+0xad8>
   851c2:	9804      	ldr	r0, [sp, #16]
   851c4:	601d      	str	r5, [r3, #0]
   851c6:	b01b      	add	sp, #108	; 0x6c
   851c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   851cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   851ce:	2a00      	cmp	r2, #0
   851d0:	d03e      	beq.n	85250 <_dtoa_r+0x428>
   851d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   851d4:	2a01      	cmp	r2, #1
   851d6:	f340 8311 	ble.w	857fc <_dtoa_r+0x9d4>
   851da:	9b07      	ldr	r3, [sp, #28]
   851dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   851de:	1e5f      	subs	r7, r3, #1
   851e0:	42ba      	cmp	r2, r7
   851e2:	f2c0 8390 	blt.w	85906 <_dtoa_r+0xade>
   851e6:	1bd7      	subs	r7, r2, r7
   851e8:	9b07      	ldr	r3, [sp, #28]
   851ea:	2b00      	cmp	r3, #0
   851ec:	f2c0 848c 	blt.w	85b08 <_dtoa_r+0xce0>
   851f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   851f2:	9b07      	ldr	r3, [sp, #28]
   851f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   851f6:	2101      	movs	r1, #1
   851f8:	441a      	add	r2, r3
   851fa:	920a      	str	r2, [sp, #40]	; 0x28
   851fc:	9a08      	ldr	r2, [sp, #32]
   851fe:	4620      	mov	r0, r4
   85200:	441a      	add	r2, r3
   85202:	9208      	str	r2, [sp, #32]
   85204:	f001 f914 	bl	86430 <__i2b>
   85208:	4606      	mov	r6, r0
   8520a:	e023      	b.n	85254 <_dtoa_r+0x42c>
   8520c:	2301      	movs	r3, #1
   8520e:	930e      	str	r3, [sp, #56]	; 0x38
   85210:	e6b5      	b.n	84f7e <_dtoa_r+0x156>
   85212:	2300      	movs	r3, #0
   85214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85216:	930d      	str	r3, [sp, #52]	; 0x34
   85218:	9b02      	ldr	r3, [sp, #8]
   8521a:	1ad2      	subs	r2, r2, r3
   8521c:	425b      	negs	r3, r3
   8521e:	920a      	str	r2, [sp, #40]	; 0x28
   85220:	930c      	str	r3, [sp, #48]	; 0x30
   85222:	e6be      	b.n	84fa2 <_dtoa_r+0x17a>
   85224:	f1c7 0301 	rsb	r3, r7, #1
   85228:	930a      	str	r3, [sp, #40]	; 0x28
   8522a:	2300      	movs	r3, #0
   8522c:	9308      	str	r3, [sp, #32]
   8522e:	e6ad      	b.n	84f8c <_dtoa_r+0x164>
   85230:	9d02      	ldr	r5, [sp, #8]
   85232:	4628      	mov	r0, r5
   85234:	f002 f91c 	bl	87470 <__aeabi_i2d>
   85238:	4602      	mov	r2, r0
   8523a:	460b      	mov	r3, r1
   8523c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   85240:	f002 fbe4 	bl	87a0c <__aeabi_dcmpeq>
   85244:	2800      	cmp	r0, #0
   85246:	f47f ae86 	bne.w	84f56 <_dtoa_r+0x12e>
   8524a:	1e6b      	subs	r3, r5, #1
   8524c:	9302      	str	r3, [sp, #8]
   8524e:	e682      	b.n	84f56 <_dtoa_r+0x12e>
   85250:	ad0a      	add	r5, sp, #40	; 0x28
   85252:	cde0      	ldmia	r5, {r5, r6, r7}
   85254:	2d00      	cmp	r5, #0
   85256:	dd0c      	ble.n	85272 <_dtoa_r+0x44a>
   85258:	9908      	ldr	r1, [sp, #32]
   8525a:	2900      	cmp	r1, #0
   8525c:	460b      	mov	r3, r1
   8525e:	dd08      	ble.n	85272 <_dtoa_r+0x44a>
   85260:	42a9      	cmp	r1, r5
   85262:	bfa8      	it	ge
   85264:	462b      	movge	r3, r5
   85266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85268:	1aed      	subs	r5, r5, r3
   8526a:	1ad2      	subs	r2, r2, r3
   8526c:	1acb      	subs	r3, r1, r3
   8526e:	920a      	str	r2, [sp, #40]	; 0x28
   85270:	9308      	str	r3, [sp, #32]
   85272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85274:	b1d3      	cbz	r3, 852ac <_dtoa_r+0x484>
   85276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85278:	2b00      	cmp	r3, #0
   8527a:	f000 82b8 	beq.w	857ee <_dtoa_r+0x9c6>
   8527e:	2f00      	cmp	r7, #0
   85280:	dd10      	ble.n	852a4 <_dtoa_r+0x47c>
   85282:	4631      	mov	r1, r6
   85284:	463a      	mov	r2, r7
   85286:	4620      	mov	r0, r4
   85288:	f001 f96e 	bl	86568 <__pow5mult>
   8528c:	464a      	mov	r2, r9
   8528e:	4601      	mov	r1, r0
   85290:	4606      	mov	r6, r0
   85292:	4620      	mov	r0, r4
   85294:	f001 f8d6 	bl	86444 <__multiply>
   85298:	4603      	mov	r3, r0
   8529a:	4649      	mov	r1, r9
   8529c:	4620      	mov	r0, r4
   8529e:	4699      	mov	r9, r3
   852a0:	f001 f82a 	bl	862f8 <_Bfree>
   852a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   852a6:	1bda      	subs	r2, r3, r7
   852a8:	f040 82a2 	bne.w	857f0 <_dtoa_r+0x9c8>
   852ac:	2101      	movs	r1, #1
   852ae:	4620      	mov	r0, r4
   852b0:	f001 f8be 	bl	86430 <__i2b>
   852b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   852b6:	4680      	mov	r8, r0
   852b8:	2b00      	cmp	r3, #0
   852ba:	dd1f      	ble.n	852fc <_dtoa_r+0x4d4>
   852bc:	4601      	mov	r1, r0
   852be:	461a      	mov	r2, r3
   852c0:	4620      	mov	r0, r4
   852c2:	f001 f951 	bl	86568 <__pow5mult>
   852c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   852c8:	4680      	mov	r8, r0
   852ca:	2b01      	cmp	r3, #1
   852cc:	f340 8255 	ble.w	8577a <_dtoa_r+0x952>
   852d0:	2300      	movs	r3, #0
   852d2:	930c      	str	r3, [sp, #48]	; 0x30
   852d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   852d8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   852dc:	6918      	ldr	r0, [r3, #16]
   852de:	f001 f857 	bl	86390 <__hi0bits>
   852e2:	f1c0 0020 	rsb	r0, r0, #32
   852e6:	e013      	b.n	85310 <_dtoa_r+0x4e8>
   852e8:	f1c3 0520 	rsb	r5, r3, #32
   852ec:	fa0a f005 	lsl.w	r0, sl, r5
   852f0:	e67b      	b.n	84fea <_dtoa_r+0x1c2>
   852f2:	900e      	str	r0, [sp, #56]	; 0x38
   852f4:	e643      	b.n	84f7e <_dtoa_r+0x156>
   852f6:	bf00      	nop
   852f8:	40240000 	.word	0x40240000
   852fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   852fe:	2b01      	cmp	r3, #1
   85300:	f340 8285 	ble.w	8580e <_dtoa_r+0x9e6>
   85304:	2300      	movs	r3, #0
   85306:	930c      	str	r3, [sp, #48]	; 0x30
   85308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8530a:	2001      	movs	r0, #1
   8530c:	2b00      	cmp	r3, #0
   8530e:	d1e1      	bne.n	852d4 <_dtoa_r+0x4ac>
   85310:	9a08      	ldr	r2, [sp, #32]
   85312:	4410      	add	r0, r2
   85314:	f010 001f 	ands.w	r0, r0, #31
   85318:	f000 80a1 	beq.w	8545e <_dtoa_r+0x636>
   8531c:	f1c0 0320 	rsb	r3, r0, #32
   85320:	2b04      	cmp	r3, #4
   85322:	f340 8486 	ble.w	85c32 <_dtoa_r+0xe0a>
   85326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85328:	f1c0 001c 	rsb	r0, r0, #28
   8532c:	4403      	add	r3, r0
   8532e:	930a      	str	r3, [sp, #40]	; 0x28
   85330:	4613      	mov	r3, r2
   85332:	4403      	add	r3, r0
   85334:	4405      	add	r5, r0
   85336:	9308      	str	r3, [sp, #32]
   85338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8533a:	2b00      	cmp	r3, #0
   8533c:	dd05      	ble.n	8534a <_dtoa_r+0x522>
   8533e:	4649      	mov	r1, r9
   85340:	461a      	mov	r2, r3
   85342:	4620      	mov	r0, r4
   85344:	f001 f960 	bl	86608 <__lshift>
   85348:	4681      	mov	r9, r0
   8534a:	9b08      	ldr	r3, [sp, #32]
   8534c:	2b00      	cmp	r3, #0
   8534e:	dd05      	ble.n	8535c <_dtoa_r+0x534>
   85350:	4641      	mov	r1, r8
   85352:	461a      	mov	r2, r3
   85354:	4620      	mov	r0, r4
   85356:	f001 f957 	bl	86608 <__lshift>
   8535a:	4680      	mov	r8, r0
   8535c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8535e:	2b00      	cmp	r3, #0
   85360:	f040 8086 	bne.w	85470 <_dtoa_r+0x648>
   85364:	9b07      	ldr	r3, [sp, #28]
   85366:	2b00      	cmp	r3, #0
   85368:	f340 8264 	ble.w	85834 <_dtoa_r+0xa0c>
   8536c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8536e:	2b00      	cmp	r3, #0
   85370:	f000 8098 	beq.w	854a4 <_dtoa_r+0x67c>
   85374:	2d00      	cmp	r5, #0
   85376:	dd05      	ble.n	85384 <_dtoa_r+0x55c>
   85378:	4631      	mov	r1, r6
   8537a:	462a      	mov	r2, r5
   8537c:	4620      	mov	r0, r4
   8537e:	f001 f943 	bl	86608 <__lshift>
   85382:	4606      	mov	r6, r0
   85384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85386:	2b00      	cmp	r3, #0
   85388:	f040 8336 	bne.w	859f8 <_dtoa_r+0xbd0>
   8538c:	9608      	str	r6, [sp, #32]
   8538e:	9b07      	ldr	r3, [sp, #28]
   85390:	9a04      	ldr	r2, [sp, #16]
   85392:	3b01      	subs	r3, #1
   85394:	18d3      	adds	r3, r2, r3
   85396:	930b      	str	r3, [sp, #44]	; 0x2c
   85398:	4617      	mov	r7, r2
   8539a:	f00a 0301 	and.w	r3, sl, #1
   8539e:	46c2      	mov	sl, r8
   853a0:	f8dd b020 	ldr.w	fp, [sp, #32]
   853a4:	930c      	str	r3, [sp, #48]	; 0x30
   853a6:	4651      	mov	r1, sl
   853a8:	4648      	mov	r0, r9
   853aa:	f7ff fca7 	bl	84cfc <quorem>
   853ae:	4631      	mov	r1, r6
   853b0:	4605      	mov	r5, r0
   853b2:	4648      	mov	r0, r9
   853b4:	f001 f978 	bl	866a8 <__mcmp>
   853b8:	465a      	mov	r2, fp
   853ba:	9007      	str	r0, [sp, #28]
   853bc:	4651      	mov	r1, sl
   853be:	4620      	mov	r0, r4
   853c0:	f001 f98e 	bl	866e0 <__mdiff>
   853c4:	68c2      	ldr	r2, [r0, #12]
   853c6:	4680      	mov	r8, r0
   853c8:	f105 0330 	add.w	r3, r5, #48	; 0x30
   853cc:	2a00      	cmp	r2, #0
   853ce:	f040 8229 	bne.w	85824 <_dtoa_r+0x9fc>
   853d2:	4601      	mov	r1, r0
   853d4:	4648      	mov	r0, r9
   853d6:	930a      	str	r3, [sp, #40]	; 0x28
   853d8:	f001 f966 	bl	866a8 <__mcmp>
   853dc:	4641      	mov	r1, r8
   853de:	9008      	str	r0, [sp, #32]
   853e0:	4620      	mov	r0, r4
   853e2:	f000 ff89 	bl	862f8 <_Bfree>
   853e6:	9a08      	ldr	r2, [sp, #32]
   853e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   853ea:	b932      	cbnz	r2, 853fa <_dtoa_r+0x5d2>
   853ec:	9924      	ldr	r1, [sp, #144]	; 0x90
   853ee:	b921      	cbnz	r1, 853fa <_dtoa_r+0x5d2>
   853f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   853f2:	2a00      	cmp	r2, #0
   853f4:	f000 83ee 	beq.w	85bd4 <_dtoa_r+0xdac>
   853f8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   853fa:	9907      	ldr	r1, [sp, #28]
   853fc:	2900      	cmp	r1, #0
   853fe:	f2c0 829f 	blt.w	85940 <_dtoa_r+0xb18>
   85402:	d105      	bne.n	85410 <_dtoa_r+0x5e8>
   85404:	9924      	ldr	r1, [sp, #144]	; 0x90
   85406:	b919      	cbnz	r1, 85410 <_dtoa_r+0x5e8>
   85408:	990c      	ldr	r1, [sp, #48]	; 0x30
   8540a:	2900      	cmp	r1, #0
   8540c:	f000 8298 	beq.w	85940 <_dtoa_r+0xb18>
   85410:	2a00      	cmp	r2, #0
   85412:	f300 8305 	bgt.w	85a20 <_dtoa_r+0xbf8>
   85416:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85418:	f107 0801 	add.w	r8, r7, #1
   8541c:	4297      	cmp	r7, r2
   8541e:	703b      	strb	r3, [r7, #0]
   85420:	4645      	mov	r5, r8
   85422:	f000 830b 	beq.w	85a3c <_dtoa_r+0xc14>
   85426:	4649      	mov	r1, r9
   85428:	2300      	movs	r3, #0
   8542a:	220a      	movs	r2, #10
   8542c:	4620      	mov	r0, r4
   8542e:	f000 ff6d 	bl	8630c <__multadd>
   85432:	455e      	cmp	r6, fp
   85434:	4681      	mov	r9, r0
   85436:	4631      	mov	r1, r6
   85438:	f04f 0300 	mov.w	r3, #0
   8543c:	f04f 020a 	mov.w	r2, #10
   85440:	4620      	mov	r0, r4
   85442:	f000 81e9 	beq.w	85818 <_dtoa_r+0x9f0>
   85446:	f000 ff61 	bl	8630c <__multadd>
   8544a:	4659      	mov	r1, fp
   8544c:	4606      	mov	r6, r0
   8544e:	2300      	movs	r3, #0
   85450:	220a      	movs	r2, #10
   85452:	4620      	mov	r0, r4
   85454:	f000 ff5a 	bl	8630c <__multadd>
   85458:	4647      	mov	r7, r8
   8545a:	4683      	mov	fp, r0
   8545c:	e7a3      	b.n	853a6 <_dtoa_r+0x57e>
   8545e:	201c      	movs	r0, #28
   85460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85462:	4405      	add	r5, r0
   85464:	4403      	add	r3, r0
   85466:	930a      	str	r3, [sp, #40]	; 0x28
   85468:	9b08      	ldr	r3, [sp, #32]
   8546a:	4403      	add	r3, r0
   8546c:	9308      	str	r3, [sp, #32]
   8546e:	e763      	b.n	85338 <_dtoa_r+0x510>
   85470:	4641      	mov	r1, r8
   85472:	4648      	mov	r0, r9
   85474:	f001 f918 	bl	866a8 <__mcmp>
   85478:	2800      	cmp	r0, #0
   8547a:	f6bf af73 	bge.w	85364 <_dtoa_r+0x53c>
   8547e:	9f02      	ldr	r7, [sp, #8]
   85480:	4649      	mov	r1, r9
   85482:	2300      	movs	r3, #0
   85484:	220a      	movs	r2, #10
   85486:	4620      	mov	r0, r4
   85488:	3f01      	subs	r7, #1
   8548a:	9702      	str	r7, [sp, #8]
   8548c:	f000 ff3e 	bl	8630c <__multadd>
   85490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85492:	4681      	mov	r9, r0
   85494:	2b00      	cmp	r3, #0
   85496:	f040 83b5 	bne.w	85c04 <_dtoa_r+0xddc>
   8549a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8549c:	2b00      	cmp	r3, #0
   8549e:	f340 83be 	ble.w	85c1e <_dtoa_r+0xdf6>
   854a2:	9307      	str	r3, [sp, #28]
   854a4:	f8dd a010 	ldr.w	sl, [sp, #16]
   854a8:	9f07      	ldr	r7, [sp, #28]
   854aa:	4655      	mov	r5, sl
   854ac:	e006      	b.n	854bc <_dtoa_r+0x694>
   854ae:	4649      	mov	r1, r9
   854b0:	2300      	movs	r3, #0
   854b2:	220a      	movs	r2, #10
   854b4:	4620      	mov	r0, r4
   854b6:	f000 ff29 	bl	8630c <__multadd>
   854ba:	4681      	mov	r9, r0
   854bc:	4641      	mov	r1, r8
   854be:	4648      	mov	r0, r9
   854c0:	f7ff fc1c 	bl	84cfc <quorem>
   854c4:	3030      	adds	r0, #48	; 0x30
   854c6:	f805 0b01 	strb.w	r0, [r5], #1
   854ca:	eba5 030a 	sub.w	r3, r5, sl
   854ce:	42bb      	cmp	r3, r7
   854d0:	dbed      	blt.n	854ae <_dtoa_r+0x686>
   854d2:	9b04      	ldr	r3, [sp, #16]
   854d4:	9a07      	ldr	r2, [sp, #28]
   854d6:	4682      	mov	sl, r0
   854d8:	2a01      	cmp	r2, #1
   854da:	bfac      	ite	ge
   854dc:	189b      	addge	r3, r3, r2
   854de:	3301      	addlt	r3, #1
   854e0:	f04f 0b00 	mov.w	fp, #0
   854e4:	461d      	mov	r5, r3
   854e6:	4649      	mov	r1, r9
   854e8:	2201      	movs	r2, #1
   854ea:	4620      	mov	r0, r4
   854ec:	f001 f88c 	bl	86608 <__lshift>
   854f0:	4641      	mov	r1, r8
   854f2:	4681      	mov	r9, r0
   854f4:	f001 f8d8 	bl	866a8 <__mcmp>
   854f8:	2800      	cmp	r0, #0
   854fa:	f340 823f 	ble.w	8597c <_dtoa_r+0xb54>
   854fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   85502:	1e6b      	subs	r3, r5, #1
   85504:	9904      	ldr	r1, [sp, #16]
   85506:	e004      	b.n	85512 <_dtoa_r+0x6ea>
   85508:	428b      	cmp	r3, r1
   8550a:	f000 81ae 	beq.w	8586a <_dtoa_r+0xa42>
   8550e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   85512:	2a39      	cmp	r2, #57	; 0x39
   85514:	f103 0501 	add.w	r5, r3, #1
   85518:	d0f6      	beq.n	85508 <_dtoa_r+0x6e0>
   8551a:	3201      	adds	r2, #1
   8551c:	701a      	strb	r2, [r3, #0]
   8551e:	4641      	mov	r1, r8
   85520:	4620      	mov	r0, r4
   85522:	f000 fee9 	bl	862f8 <_Bfree>
   85526:	2e00      	cmp	r6, #0
   85528:	f43f ae3d 	beq.w	851a6 <_dtoa_r+0x37e>
   8552c:	f1bb 0f00 	cmp.w	fp, #0
   85530:	d005      	beq.n	8553e <_dtoa_r+0x716>
   85532:	45b3      	cmp	fp, r6
   85534:	d003      	beq.n	8553e <_dtoa_r+0x716>
   85536:	4659      	mov	r1, fp
   85538:	4620      	mov	r0, r4
   8553a:	f000 fedd 	bl	862f8 <_Bfree>
   8553e:	4631      	mov	r1, r6
   85540:	4620      	mov	r0, r4
   85542:	f000 fed9 	bl	862f8 <_Bfree>
   85546:	e62e      	b.n	851a6 <_dtoa_r+0x37e>
   85548:	2300      	movs	r3, #0
   8554a:	930b      	str	r3, [sp, #44]	; 0x2c
   8554c:	9b02      	ldr	r3, [sp, #8]
   8554e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   85550:	4413      	add	r3, r2
   85552:	930f      	str	r3, [sp, #60]	; 0x3c
   85554:	3301      	adds	r3, #1
   85556:	2b01      	cmp	r3, #1
   85558:	461f      	mov	r7, r3
   8555a:	461e      	mov	r6, r3
   8555c:	bfb8      	it	lt
   8555e:	2701      	movlt	r7, #1
   85560:	9307      	str	r3, [sp, #28]
   85562:	2100      	movs	r1, #0
   85564:	2f17      	cmp	r7, #23
   85566:	6461      	str	r1, [r4, #68]	; 0x44
   85568:	d90a      	bls.n	85580 <_dtoa_r+0x758>
   8556a:	2201      	movs	r2, #1
   8556c:	2304      	movs	r3, #4
   8556e:	005b      	lsls	r3, r3, #1
   85570:	f103 0014 	add.w	r0, r3, #20
   85574:	4287      	cmp	r7, r0
   85576:	4611      	mov	r1, r2
   85578:	f102 0201 	add.w	r2, r2, #1
   8557c:	d2f7      	bcs.n	8556e <_dtoa_r+0x746>
   8557e:	6461      	str	r1, [r4, #68]	; 0x44
   85580:	4620      	mov	r0, r4
   85582:	f000 fe93 	bl	862ac <_Balloc>
   85586:	2e0e      	cmp	r6, #14
   85588:	9004      	str	r0, [sp, #16]
   8558a:	6420      	str	r0, [r4, #64]	; 0x40
   8558c:	f63f ad47 	bhi.w	8501e <_dtoa_r+0x1f6>
   85590:	2d00      	cmp	r5, #0
   85592:	f43f ad44 	beq.w	8501e <_dtoa_r+0x1f6>
   85596:	9902      	ldr	r1, [sp, #8]
   85598:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   8559c:	2900      	cmp	r1, #0
   8559e:	f340 8203 	ble.w	859a8 <_dtoa_r+0xb80>
   855a2:	4bb9      	ldr	r3, [pc, #740]	; (85888 <_dtoa_r+0xa60>)
   855a4:	f001 020f 	and.w	r2, r1, #15
   855a8:	110d      	asrs	r5, r1, #4
   855aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   855ae:	06e9      	lsls	r1, r5, #27
   855b0:	e9d3 6700 	ldrd	r6, r7, [r3]
   855b4:	f140 81af 	bpl.w	85916 <_dtoa_r+0xaee>
   855b8:	4bb4      	ldr	r3, [pc, #720]	; (8588c <_dtoa_r+0xa64>)
   855ba:	4650      	mov	r0, sl
   855bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   855c0:	4659      	mov	r1, fp
   855c2:	f002 f8e5 	bl	87790 <__aeabi_ddiv>
   855c6:	f04f 0a03 	mov.w	sl, #3
   855ca:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   855ce:	f005 050f 	and.w	r5, r5, #15
   855d2:	b18d      	cbz	r5, 855f8 <_dtoa_r+0x7d0>
   855d4:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8588c <_dtoa_r+0xa64>
   855d8:	07ea      	lsls	r2, r5, #31
   855da:	d509      	bpl.n	855f0 <_dtoa_r+0x7c8>
   855dc:	e9d8 2300 	ldrd	r2, r3, [r8]
   855e0:	4630      	mov	r0, r6
   855e2:	4639      	mov	r1, r7
   855e4:	f001 ffaa 	bl	8753c <__aeabi_dmul>
   855e8:	4606      	mov	r6, r0
   855ea:	460f      	mov	r7, r1
   855ec:	f10a 0a01 	add.w	sl, sl, #1
   855f0:	106d      	asrs	r5, r5, #1
   855f2:	f108 0808 	add.w	r8, r8, #8
   855f6:	d1ef      	bne.n	855d8 <_dtoa_r+0x7b0>
   855f8:	463b      	mov	r3, r7
   855fa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   855fe:	4632      	mov	r2, r6
   85600:	f002 f8c6 	bl	87790 <__aeabi_ddiv>
   85604:	4607      	mov	r7, r0
   85606:	4688      	mov	r8, r1
   85608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8560a:	b143      	cbz	r3, 8561e <_dtoa_r+0x7f6>
   8560c:	2200      	movs	r2, #0
   8560e:	4ba0      	ldr	r3, [pc, #640]	; (85890 <_dtoa_r+0xa68>)
   85610:	4638      	mov	r0, r7
   85612:	4641      	mov	r1, r8
   85614:	f002 fa04 	bl	87a20 <__aeabi_dcmplt>
   85618:	2800      	cmp	r0, #0
   8561a:	f040 8287 	bne.w	85b2c <_dtoa_r+0xd04>
   8561e:	4650      	mov	r0, sl
   85620:	f001 ff26 	bl	87470 <__aeabi_i2d>
   85624:	463a      	mov	r2, r7
   85626:	4643      	mov	r3, r8
   85628:	f001 ff88 	bl	8753c <__aeabi_dmul>
   8562c:	4b99      	ldr	r3, [pc, #612]	; (85894 <_dtoa_r+0xa6c>)
   8562e:	2200      	movs	r2, #0
   85630:	f001 fdd2 	bl	871d8 <__adddf3>
   85634:	9b07      	ldr	r3, [sp, #28]
   85636:	4605      	mov	r5, r0
   85638:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8563c:	2b00      	cmp	r3, #0
   8563e:	f000 813f 	beq.w	858c0 <_dtoa_r+0xa98>
   85642:	9b02      	ldr	r3, [sp, #8]
   85644:	9315      	str	r3, [sp, #84]	; 0x54
   85646:	9b07      	ldr	r3, [sp, #28]
   85648:	9312      	str	r3, [sp, #72]	; 0x48
   8564a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8564c:	2b00      	cmp	r3, #0
   8564e:	f000 81fb 	beq.w	85a48 <_dtoa_r+0xc20>
   85652:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85654:	4b8c      	ldr	r3, [pc, #560]	; (85888 <_dtoa_r+0xa60>)
   85656:	2000      	movs	r0, #0
   85658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8565c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   85660:	498d      	ldr	r1, [pc, #564]	; (85898 <_dtoa_r+0xa70>)
   85662:	f002 f895 	bl	87790 <__aeabi_ddiv>
   85666:	462a      	mov	r2, r5
   85668:	4633      	mov	r3, r6
   8566a:	f001 fdb3 	bl	871d4 <__aeabi_dsub>
   8566e:	4682      	mov	sl, r0
   85670:	468b      	mov	fp, r1
   85672:	4638      	mov	r0, r7
   85674:	4641      	mov	r1, r8
   85676:	f002 fa11 	bl	87a9c <__aeabi_d2iz>
   8567a:	4605      	mov	r5, r0
   8567c:	f001 fef8 	bl	87470 <__aeabi_i2d>
   85680:	4602      	mov	r2, r0
   85682:	460b      	mov	r3, r1
   85684:	4638      	mov	r0, r7
   85686:	4641      	mov	r1, r8
   85688:	f001 fda4 	bl	871d4 <__aeabi_dsub>
   8568c:	3530      	adds	r5, #48	; 0x30
   8568e:	fa5f f885 	uxtb.w	r8, r5
   85692:	9d04      	ldr	r5, [sp, #16]
   85694:	4606      	mov	r6, r0
   85696:	460f      	mov	r7, r1
   85698:	f885 8000 	strb.w	r8, [r5]
   8569c:	4602      	mov	r2, r0
   8569e:	460b      	mov	r3, r1
   856a0:	4650      	mov	r0, sl
   856a2:	4659      	mov	r1, fp
   856a4:	3501      	adds	r5, #1
   856a6:	f002 f9d9 	bl	87a5c <__aeabi_dcmpgt>
   856aa:	2800      	cmp	r0, #0
   856ac:	d154      	bne.n	85758 <_dtoa_r+0x930>
   856ae:	4632      	mov	r2, r6
   856b0:	463b      	mov	r3, r7
   856b2:	2000      	movs	r0, #0
   856b4:	4976      	ldr	r1, [pc, #472]	; (85890 <_dtoa_r+0xa68>)
   856b6:	f001 fd8d 	bl	871d4 <__aeabi_dsub>
   856ba:	4602      	mov	r2, r0
   856bc:	460b      	mov	r3, r1
   856be:	4650      	mov	r0, sl
   856c0:	4659      	mov	r1, fp
   856c2:	f002 f9cb 	bl	87a5c <__aeabi_dcmpgt>
   856c6:	2800      	cmp	r0, #0
   856c8:	f040 8270 	bne.w	85bac <_dtoa_r+0xd84>
   856cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   856ce:	2a01      	cmp	r2, #1
   856d0:	f000 8112 	beq.w	858f8 <_dtoa_r+0xad0>
   856d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   856d6:	9a04      	ldr	r2, [sp, #16]
   856d8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   856dc:	4413      	add	r3, r2
   856de:	4699      	mov	r9, r3
   856e0:	e00f      	b.n	85702 <_dtoa_r+0x8da>
   856e2:	4632      	mov	r2, r6
   856e4:	463b      	mov	r3, r7
   856e6:	2000      	movs	r0, #0
   856e8:	4969      	ldr	r1, [pc, #420]	; (85890 <_dtoa_r+0xa68>)
   856ea:	f001 fd73 	bl	871d4 <__aeabi_dsub>
   856ee:	4652      	mov	r2, sl
   856f0:	465b      	mov	r3, fp
   856f2:	f002 f995 	bl	87a20 <__aeabi_dcmplt>
   856f6:	2800      	cmp	r0, #0
   856f8:	f040 8256 	bne.w	85ba8 <_dtoa_r+0xd80>
   856fc:	454d      	cmp	r5, r9
   856fe:	f000 80f9 	beq.w	858f4 <_dtoa_r+0xacc>
   85702:	4650      	mov	r0, sl
   85704:	4659      	mov	r1, fp
   85706:	2200      	movs	r2, #0
   85708:	4b64      	ldr	r3, [pc, #400]	; (8589c <_dtoa_r+0xa74>)
   8570a:	f001 ff17 	bl	8753c <__aeabi_dmul>
   8570e:	2200      	movs	r2, #0
   85710:	4b62      	ldr	r3, [pc, #392]	; (8589c <_dtoa_r+0xa74>)
   85712:	4682      	mov	sl, r0
   85714:	468b      	mov	fp, r1
   85716:	4630      	mov	r0, r6
   85718:	4639      	mov	r1, r7
   8571a:	f001 ff0f 	bl	8753c <__aeabi_dmul>
   8571e:	460f      	mov	r7, r1
   85720:	4606      	mov	r6, r0
   85722:	f002 f9bb 	bl	87a9c <__aeabi_d2iz>
   85726:	4680      	mov	r8, r0
   85728:	f001 fea2 	bl	87470 <__aeabi_i2d>
   8572c:	4602      	mov	r2, r0
   8572e:	460b      	mov	r3, r1
   85730:	4630      	mov	r0, r6
   85732:	4639      	mov	r1, r7
   85734:	f001 fd4e 	bl	871d4 <__aeabi_dsub>
   85738:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8573c:	fa5f f888 	uxtb.w	r8, r8
   85740:	f805 8b01 	strb.w	r8, [r5], #1
   85744:	4652      	mov	r2, sl
   85746:	465b      	mov	r3, fp
   85748:	4606      	mov	r6, r0
   8574a:	460f      	mov	r7, r1
   8574c:	f002 f968 	bl	87a20 <__aeabi_dcmplt>
   85750:	2800      	cmp	r0, #0
   85752:	d0c6      	beq.n	856e2 <_dtoa_r+0x8ba>
   85754:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85758:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8575a:	9302      	str	r3, [sp, #8]
   8575c:	e523      	b.n	851a6 <_dtoa_r+0x37e>
   8575e:	2300      	movs	r3, #0
   85760:	930b      	str	r3, [sp, #44]	; 0x2c
   85762:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85764:	2b00      	cmp	r3, #0
   85766:	f340 80dd 	ble.w	85924 <_dtoa_r+0xafc>
   8576a:	461f      	mov	r7, r3
   8576c:	461e      	mov	r6, r3
   8576e:	930f      	str	r3, [sp, #60]	; 0x3c
   85770:	9307      	str	r3, [sp, #28]
   85772:	e6f6      	b.n	85562 <_dtoa_r+0x73a>
   85774:	2301      	movs	r3, #1
   85776:	930b      	str	r3, [sp, #44]	; 0x2c
   85778:	e7f3      	b.n	85762 <_dtoa_r+0x93a>
   8577a:	f1ba 0f00 	cmp.w	sl, #0
   8577e:	f47f ada7 	bne.w	852d0 <_dtoa_r+0x4a8>
   85782:	f3cb 0313 	ubfx	r3, fp, #0, #20
   85786:	2b00      	cmp	r3, #0
   85788:	f47f adbc 	bne.w	85304 <_dtoa_r+0x4dc>
   8578c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   85790:	0d3f      	lsrs	r7, r7, #20
   85792:	053f      	lsls	r7, r7, #20
   85794:	2f00      	cmp	r7, #0
   85796:	f000 820d 	beq.w	85bb4 <_dtoa_r+0xd8c>
   8579a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8579c:	3301      	adds	r3, #1
   8579e:	930a      	str	r3, [sp, #40]	; 0x28
   857a0:	9b08      	ldr	r3, [sp, #32]
   857a2:	3301      	adds	r3, #1
   857a4:	9308      	str	r3, [sp, #32]
   857a6:	2301      	movs	r3, #1
   857a8:	930c      	str	r3, [sp, #48]	; 0x30
   857aa:	e5ad      	b.n	85308 <_dtoa_r+0x4e0>
   857ac:	9b07      	ldr	r3, [sp, #28]
   857ae:	2b00      	cmp	r3, #0
   857b0:	f73f ac48 	bgt.w	85044 <_dtoa_r+0x21c>
   857b4:	f040 8222 	bne.w	85bfc <_dtoa_r+0xdd4>
   857b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   857bc:	2200      	movs	r2, #0
   857be:	4b38      	ldr	r3, [pc, #224]	; (858a0 <_dtoa_r+0xa78>)
   857c0:	f001 febc 	bl	8753c <__aeabi_dmul>
   857c4:	4652      	mov	r2, sl
   857c6:	465b      	mov	r3, fp
   857c8:	f002 f93e 	bl	87a48 <__aeabi_dcmpge>
   857cc:	f8dd 801c 	ldr.w	r8, [sp, #28]
   857d0:	4646      	mov	r6, r8
   857d2:	2800      	cmp	r0, #0
   857d4:	d041      	beq.n	8585a <_dtoa_r+0xa32>
   857d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   857d8:	9d04      	ldr	r5, [sp, #16]
   857da:	43db      	mvns	r3, r3
   857dc:	9302      	str	r3, [sp, #8]
   857de:	4641      	mov	r1, r8
   857e0:	4620      	mov	r0, r4
   857e2:	f000 fd89 	bl	862f8 <_Bfree>
   857e6:	2e00      	cmp	r6, #0
   857e8:	f43f acdd 	beq.w	851a6 <_dtoa_r+0x37e>
   857ec:	e6a7      	b.n	8553e <_dtoa_r+0x716>
   857ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   857f0:	4649      	mov	r1, r9
   857f2:	4620      	mov	r0, r4
   857f4:	f000 feb8 	bl	86568 <__pow5mult>
   857f8:	4681      	mov	r9, r0
   857fa:	e557      	b.n	852ac <_dtoa_r+0x484>
   857fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   857fe:	2a00      	cmp	r2, #0
   85800:	f000 8188 	beq.w	85b14 <_dtoa_r+0xcec>
   85804:	f203 4333 	addw	r3, r3, #1075	; 0x433
   85808:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8580a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8580c:	e4f2      	b.n	851f4 <_dtoa_r+0x3cc>
   8580e:	f1ba 0f00 	cmp.w	sl, #0
   85812:	f47f ad77 	bne.w	85304 <_dtoa_r+0x4dc>
   85816:	e7b4      	b.n	85782 <_dtoa_r+0x95a>
   85818:	f000 fd78 	bl	8630c <__multadd>
   8581c:	4647      	mov	r7, r8
   8581e:	4606      	mov	r6, r0
   85820:	4683      	mov	fp, r0
   85822:	e5c0      	b.n	853a6 <_dtoa_r+0x57e>
   85824:	4601      	mov	r1, r0
   85826:	4620      	mov	r0, r4
   85828:	9308      	str	r3, [sp, #32]
   8582a:	f000 fd65 	bl	862f8 <_Bfree>
   8582e:	2201      	movs	r2, #1
   85830:	9b08      	ldr	r3, [sp, #32]
   85832:	e5e2      	b.n	853fa <_dtoa_r+0x5d2>
   85834:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85836:	2b02      	cmp	r3, #2
   85838:	f77f ad98 	ble.w	8536c <_dtoa_r+0x544>
   8583c:	9b07      	ldr	r3, [sp, #28]
   8583e:	2b00      	cmp	r3, #0
   85840:	d1c9      	bne.n	857d6 <_dtoa_r+0x9ae>
   85842:	4641      	mov	r1, r8
   85844:	2205      	movs	r2, #5
   85846:	4620      	mov	r0, r4
   85848:	f000 fd60 	bl	8630c <__multadd>
   8584c:	4601      	mov	r1, r0
   8584e:	4680      	mov	r8, r0
   85850:	4648      	mov	r0, r9
   85852:	f000 ff29 	bl	866a8 <__mcmp>
   85856:	2800      	cmp	r0, #0
   85858:	ddbd      	ble.n	857d6 <_dtoa_r+0x9ae>
   8585a:	2331      	movs	r3, #49	; 0x31
   8585c:	9a02      	ldr	r2, [sp, #8]
   8585e:	9904      	ldr	r1, [sp, #16]
   85860:	3201      	adds	r2, #1
   85862:	9202      	str	r2, [sp, #8]
   85864:	700b      	strb	r3, [r1, #0]
   85866:	1c4d      	adds	r5, r1, #1
   85868:	e7b9      	b.n	857de <_dtoa_r+0x9b6>
   8586a:	2331      	movs	r3, #49	; 0x31
   8586c:	9a02      	ldr	r2, [sp, #8]
   8586e:	3201      	adds	r2, #1
   85870:	9202      	str	r2, [sp, #8]
   85872:	9a04      	ldr	r2, [sp, #16]
   85874:	7013      	strb	r3, [r2, #0]
   85876:	e652      	b.n	8551e <_dtoa_r+0x6f6>
   85878:	2301      	movs	r3, #1
   8587a:	930b      	str	r3, [sp, #44]	; 0x2c
   8587c:	e666      	b.n	8554c <_dtoa_r+0x724>
   8587e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85882:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85884:	e48f      	b.n	851a6 <_dtoa_r+0x37e>
   85886:	bf00      	nop
   85888:	00088048 	.word	0x00088048
   8588c:	00088020 	.word	0x00088020
   85890:	3ff00000 	.word	0x3ff00000
   85894:	401c0000 	.word	0x401c0000
   85898:	3fe00000 	.word	0x3fe00000
   8589c:	40240000 	.word	0x40240000
   858a0:	40140000 	.word	0x40140000
   858a4:	4650      	mov	r0, sl
   858a6:	f001 fde3 	bl	87470 <__aeabi_i2d>
   858aa:	463a      	mov	r2, r7
   858ac:	4643      	mov	r3, r8
   858ae:	f001 fe45 	bl	8753c <__aeabi_dmul>
   858b2:	2200      	movs	r2, #0
   858b4:	4bc1      	ldr	r3, [pc, #772]	; (85bbc <_dtoa_r+0xd94>)
   858b6:	f001 fc8f 	bl	871d8 <__adddf3>
   858ba:	4605      	mov	r5, r0
   858bc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   858c0:	4641      	mov	r1, r8
   858c2:	2200      	movs	r2, #0
   858c4:	4bbe      	ldr	r3, [pc, #760]	; (85bc0 <_dtoa_r+0xd98>)
   858c6:	4638      	mov	r0, r7
   858c8:	f001 fc84 	bl	871d4 <__aeabi_dsub>
   858cc:	462a      	mov	r2, r5
   858ce:	4633      	mov	r3, r6
   858d0:	4682      	mov	sl, r0
   858d2:	468b      	mov	fp, r1
   858d4:	f002 f8c2 	bl	87a5c <__aeabi_dcmpgt>
   858d8:	4680      	mov	r8, r0
   858da:	2800      	cmp	r0, #0
   858dc:	f040 8110 	bne.w	85b00 <_dtoa_r+0xcd8>
   858e0:	462a      	mov	r2, r5
   858e2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   858e6:	4650      	mov	r0, sl
   858e8:	4659      	mov	r1, fp
   858ea:	f002 f899 	bl	87a20 <__aeabi_dcmplt>
   858ee:	b118      	cbz	r0, 858f8 <_dtoa_r+0xad0>
   858f0:	4646      	mov	r6, r8
   858f2:	e770      	b.n	857d6 <_dtoa_r+0x9ae>
   858f4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   858f8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   858fc:	f7ff bb8f 	b.w	8501e <_dtoa_r+0x1f6>
   85900:	9804      	ldr	r0, [sp, #16]
   85902:	f7ff bac0 	b.w	84e86 <_dtoa_r+0x5e>
   85906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85908:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8590a:	1afb      	subs	r3, r7, r3
   8590c:	441a      	add	r2, r3
   8590e:	970c      	str	r7, [sp, #48]	; 0x30
   85910:	920d      	str	r2, [sp, #52]	; 0x34
   85912:	2700      	movs	r7, #0
   85914:	e468      	b.n	851e8 <_dtoa_r+0x3c0>
   85916:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8591a:	f04f 0a02 	mov.w	sl, #2
   8591e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   85922:	e656      	b.n	855d2 <_dtoa_r+0x7aa>
   85924:	2100      	movs	r1, #0
   85926:	2301      	movs	r3, #1
   85928:	4620      	mov	r0, r4
   8592a:	6461      	str	r1, [r4, #68]	; 0x44
   8592c:	9325      	str	r3, [sp, #148]	; 0x94
   8592e:	f000 fcbd 	bl	862ac <_Balloc>
   85932:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85934:	9004      	str	r0, [sp, #16]
   85936:	9307      	str	r3, [sp, #28]
   85938:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8593a:	6420      	str	r0, [r4, #64]	; 0x40
   8593c:	930f      	str	r3, [sp, #60]	; 0x3c
   8593e:	e627      	b.n	85590 <_dtoa_r+0x768>
   85940:	2a00      	cmp	r2, #0
   85942:	46d0      	mov	r8, sl
   85944:	f8cd b020 	str.w	fp, [sp, #32]
   85948:	469a      	mov	sl, r3
   8594a:	dd11      	ble.n	85970 <_dtoa_r+0xb48>
   8594c:	4649      	mov	r1, r9
   8594e:	2201      	movs	r2, #1
   85950:	4620      	mov	r0, r4
   85952:	f000 fe59 	bl	86608 <__lshift>
   85956:	4641      	mov	r1, r8
   85958:	4681      	mov	r9, r0
   8595a:	f000 fea5 	bl	866a8 <__mcmp>
   8595e:	2800      	cmp	r0, #0
   85960:	f340 8145 	ble.w	85bee <_dtoa_r+0xdc6>
   85964:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   85968:	f000 8105 	beq.w	85b76 <_dtoa_r+0xd4e>
   8596c:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   85970:	46b3      	mov	fp, r6
   85972:	f887 a000 	strb.w	sl, [r7]
   85976:	1c7d      	adds	r5, r7, #1
   85978:	9e08      	ldr	r6, [sp, #32]
   8597a:	e5d0      	b.n	8551e <_dtoa_r+0x6f6>
   8597c:	d104      	bne.n	85988 <_dtoa_r+0xb60>
   8597e:	f01a 0f01 	tst.w	sl, #1
   85982:	d001      	beq.n	85988 <_dtoa_r+0xb60>
   85984:	e5bb      	b.n	854fe <_dtoa_r+0x6d6>
   85986:	4615      	mov	r5, r2
   85988:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8598c:	1e6a      	subs	r2, r5, #1
   8598e:	2b30      	cmp	r3, #48	; 0x30
   85990:	d0f9      	beq.n	85986 <_dtoa_r+0xb5e>
   85992:	e5c4      	b.n	8551e <_dtoa_r+0x6f6>
   85994:	2230      	movs	r2, #48	; 0x30
   85996:	9904      	ldr	r1, [sp, #16]
   85998:	700a      	strb	r2, [r1, #0]
   8599a:	9a02      	ldr	r2, [sp, #8]
   8599c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   859a0:	3201      	adds	r2, #1
   859a2:	9202      	str	r2, [sp, #8]
   859a4:	f7ff bbfb 	b.w	8519e <_dtoa_r+0x376>
   859a8:	f000 80bb 	beq.w	85b22 <_dtoa_r+0xcfa>
   859ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   859b0:	9b02      	ldr	r3, [sp, #8]
   859b2:	f04f 0a02 	mov.w	sl, #2
   859b6:	425d      	negs	r5, r3
   859b8:	4b82      	ldr	r3, [pc, #520]	; (85bc4 <_dtoa_r+0xd9c>)
   859ba:	f005 020f 	and.w	r2, r5, #15
   859be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   859c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   859c6:	f001 fdb9 	bl	8753c <__aeabi_dmul>
   859ca:	112d      	asrs	r5, r5, #4
   859cc:	4607      	mov	r7, r0
   859ce:	4688      	mov	r8, r1
   859d0:	f43f ae1a 	beq.w	85608 <_dtoa_r+0x7e0>
   859d4:	4e7c      	ldr	r6, [pc, #496]	; (85bc8 <_dtoa_r+0xda0>)
   859d6:	07eb      	lsls	r3, r5, #31
   859d8:	d509      	bpl.n	859ee <_dtoa_r+0xbc6>
   859da:	e9d6 2300 	ldrd	r2, r3, [r6]
   859de:	4638      	mov	r0, r7
   859e0:	4641      	mov	r1, r8
   859e2:	f001 fdab 	bl	8753c <__aeabi_dmul>
   859e6:	4607      	mov	r7, r0
   859e8:	4688      	mov	r8, r1
   859ea:	f10a 0a01 	add.w	sl, sl, #1
   859ee:	106d      	asrs	r5, r5, #1
   859f0:	f106 0608 	add.w	r6, r6, #8
   859f4:	d1ef      	bne.n	859d6 <_dtoa_r+0xbae>
   859f6:	e607      	b.n	85608 <_dtoa_r+0x7e0>
   859f8:	6871      	ldr	r1, [r6, #4]
   859fa:	4620      	mov	r0, r4
   859fc:	f000 fc56 	bl	862ac <_Balloc>
   85a00:	4605      	mov	r5, r0
   85a02:	6933      	ldr	r3, [r6, #16]
   85a04:	f106 010c 	add.w	r1, r6, #12
   85a08:	3302      	adds	r3, #2
   85a0a:	009a      	lsls	r2, r3, #2
   85a0c:	300c      	adds	r0, #12
   85a0e:	f7fd fdcd 	bl	835ac <memcpy>
   85a12:	4629      	mov	r1, r5
   85a14:	2201      	movs	r2, #1
   85a16:	4620      	mov	r0, r4
   85a18:	f000 fdf6 	bl	86608 <__lshift>
   85a1c:	9008      	str	r0, [sp, #32]
   85a1e:	e4b6      	b.n	8538e <_dtoa_r+0x566>
   85a20:	2b39      	cmp	r3, #57	; 0x39
   85a22:	f8cd b020 	str.w	fp, [sp, #32]
   85a26:	46d0      	mov	r8, sl
   85a28:	f000 80a5 	beq.w	85b76 <_dtoa_r+0xd4e>
   85a2c:	f103 0a01 	add.w	sl, r3, #1
   85a30:	46b3      	mov	fp, r6
   85a32:	f887 a000 	strb.w	sl, [r7]
   85a36:	1c7d      	adds	r5, r7, #1
   85a38:	9e08      	ldr	r6, [sp, #32]
   85a3a:	e570      	b.n	8551e <_dtoa_r+0x6f6>
   85a3c:	465a      	mov	r2, fp
   85a3e:	46d0      	mov	r8, sl
   85a40:	46b3      	mov	fp, r6
   85a42:	469a      	mov	sl, r3
   85a44:	4616      	mov	r6, r2
   85a46:	e54e      	b.n	854e6 <_dtoa_r+0x6be>
   85a48:	9812      	ldr	r0, [sp, #72]	; 0x48
   85a4a:	495e      	ldr	r1, [pc, #376]	; (85bc4 <_dtoa_r+0xd9c>)
   85a4c:	462a      	mov	r2, r5
   85a4e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   85a52:	4633      	mov	r3, r6
   85a54:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   85a58:	f001 fd70 	bl	8753c <__aeabi_dmul>
   85a5c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   85a60:	4638      	mov	r0, r7
   85a62:	4641      	mov	r1, r8
   85a64:	f002 f81a 	bl	87a9c <__aeabi_d2iz>
   85a68:	4605      	mov	r5, r0
   85a6a:	f001 fd01 	bl	87470 <__aeabi_i2d>
   85a6e:	4602      	mov	r2, r0
   85a70:	460b      	mov	r3, r1
   85a72:	4638      	mov	r0, r7
   85a74:	4641      	mov	r1, r8
   85a76:	f001 fbad 	bl	871d4 <__aeabi_dsub>
   85a7a:	4606      	mov	r6, r0
   85a7c:	9812      	ldr	r0, [sp, #72]	; 0x48
   85a7e:	9a04      	ldr	r2, [sp, #16]
   85a80:	3530      	adds	r5, #48	; 0x30
   85a82:	2801      	cmp	r0, #1
   85a84:	7015      	strb	r5, [r2, #0]
   85a86:	460f      	mov	r7, r1
   85a88:	f102 0501 	add.w	r5, r2, #1
   85a8c:	d026      	beq.n	85adc <_dtoa_r+0xcb4>
   85a8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85a90:	9a04      	ldr	r2, [sp, #16]
   85a92:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   85a96:	4413      	add	r3, r2
   85a98:	f04f 0a00 	mov.w	sl, #0
   85a9c:	4699      	mov	r9, r3
   85a9e:	f8df b130 	ldr.w	fp, [pc, #304]	; 85bd0 <_dtoa_r+0xda8>
   85aa2:	4652      	mov	r2, sl
   85aa4:	465b      	mov	r3, fp
   85aa6:	4630      	mov	r0, r6
   85aa8:	4639      	mov	r1, r7
   85aaa:	f001 fd47 	bl	8753c <__aeabi_dmul>
   85aae:	460f      	mov	r7, r1
   85ab0:	4606      	mov	r6, r0
   85ab2:	f001 fff3 	bl	87a9c <__aeabi_d2iz>
   85ab6:	4680      	mov	r8, r0
   85ab8:	f001 fcda 	bl	87470 <__aeabi_i2d>
   85abc:	4602      	mov	r2, r0
   85abe:	460b      	mov	r3, r1
   85ac0:	4630      	mov	r0, r6
   85ac2:	4639      	mov	r1, r7
   85ac4:	f001 fb86 	bl	871d4 <__aeabi_dsub>
   85ac8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   85acc:	f805 8b01 	strb.w	r8, [r5], #1
   85ad0:	454d      	cmp	r5, r9
   85ad2:	4606      	mov	r6, r0
   85ad4:	460f      	mov	r7, r1
   85ad6:	d1e4      	bne.n	85aa2 <_dtoa_r+0xc7a>
   85ad8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85adc:	2200      	movs	r2, #0
   85ade:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   85ae2:	4b3a      	ldr	r3, [pc, #232]	; (85bcc <_dtoa_r+0xda4>)
   85ae4:	f001 fb78 	bl	871d8 <__adddf3>
   85ae8:	4632      	mov	r2, r6
   85aea:	463b      	mov	r3, r7
   85aec:	f001 ff98 	bl	87a20 <__aeabi_dcmplt>
   85af0:	2800      	cmp	r0, #0
   85af2:	d046      	beq.n	85b82 <_dtoa_r+0xd5a>
   85af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85af6:	9302      	str	r3, [sp, #8]
   85af8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   85afc:	f7ff bb42 	b.w	85184 <_dtoa_r+0x35c>
   85b00:	f04f 0800 	mov.w	r8, #0
   85b04:	4646      	mov	r6, r8
   85b06:	e6a8      	b.n	8585a <_dtoa_r+0xa32>
   85b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85b0a:	9a07      	ldr	r2, [sp, #28]
   85b0c:	1a9d      	subs	r5, r3, r2
   85b0e:	2300      	movs	r3, #0
   85b10:	f7ff bb70 	b.w	851f4 <_dtoa_r+0x3cc>
   85b14:	9b18      	ldr	r3, [sp, #96]	; 0x60
   85b16:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85b18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   85b1c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85b1e:	f7ff bb69 	b.w	851f4 <_dtoa_r+0x3cc>
   85b22:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   85b26:	f04f 0a02 	mov.w	sl, #2
   85b2a:	e56d      	b.n	85608 <_dtoa_r+0x7e0>
   85b2c:	9b07      	ldr	r3, [sp, #28]
   85b2e:	2b00      	cmp	r3, #0
   85b30:	f43f aeb8 	beq.w	858a4 <_dtoa_r+0xa7c>
   85b34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85b36:	2b00      	cmp	r3, #0
   85b38:	f77f aede 	ble.w	858f8 <_dtoa_r+0xad0>
   85b3c:	2200      	movs	r2, #0
   85b3e:	4b24      	ldr	r3, [pc, #144]	; (85bd0 <_dtoa_r+0xda8>)
   85b40:	4638      	mov	r0, r7
   85b42:	4641      	mov	r1, r8
   85b44:	f001 fcfa 	bl	8753c <__aeabi_dmul>
   85b48:	4607      	mov	r7, r0
   85b4a:	4688      	mov	r8, r1
   85b4c:	f10a 0001 	add.w	r0, sl, #1
   85b50:	f001 fc8e 	bl	87470 <__aeabi_i2d>
   85b54:	463a      	mov	r2, r7
   85b56:	4643      	mov	r3, r8
   85b58:	f001 fcf0 	bl	8753c <__aeabi_dmul>
   85b5c:	2200      	movs	r2, #0
   85b5e:	4b17      	ldr	r3, [pc, #92]	; (85bbc <_dtoa_r+0xd94>)
   85b60:	f001 fb3a 	bl	871d8 <__adddf3>
   85b64:	9a02      	ldr	r2, [sp, #8]
   85b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85b68:	3a01      	subs	r2, #1
   85b6a:	4605      	mov	r5, r0
   85b6c:	9215      	str	r2, [sp, #84]	; 0x54
   85b6e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   85b72:	9312      	str	r3, [sp, #72]	; 0x48
   85b74:	e569      	b.n	8564a <_dtoa_r+0x822>
   85b76:	2239      	movs	r2, #57	; 0x39
   85b78:	46b3      	mov	fp, r6
   85b7a:	703a      	strb	r2, [r7, #0]
   85b7c:	9e08      	ldr	r6, [sp, #32]
   85b7e:	1c7d      	adds	r5, r7, #1
   85b80:	e4bf      	b.n	85502 <_dtoa_r+0x6da>
   85b82:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   85b86:	2000      	movs	r0, #0
   85b88:	4910      	ldr	r1, [pc, #64]	; (85bcc <_dtoa_r+0xda4>)
   85b8a:	f001 fb23 	bl	871d4 <__aeabi_dsub>
   85b8e:	4632      	mov	r2, r6
   85b90:	463b      	mov	r3, r7
   85b92:	f001 ff63 	bl	87a5c <__aeabi_dcmpgt>
   85b96:	b908      	cbnz	r0, 85b9c <_dtoa_r+0xd74>
   85b98:	e6ae      	b.n	858f8 <_dtoa_r+0xad0>
   85b9a:	4615      	mov	r5, r2
   85b9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   85ba0:	1e6a      	subs	r2, r5, #1
   85ba2:	2b30      	cmp	r3, #48	; 0x30
   85ba4:	d0f9      	beq.n	85b9a <_dtoa_r+0xd72>
   85ba6:	e5d7      	b.n	85758 <_dtoa_r+0x930>
   85ba8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85bac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85bae:	9302      	str	r3, [sp, #8]
   85bb0:	f7ff bae8 	b.w	85184 <_dtoa_r+0x35c>
   85bb4:	970c      	str	r7, [sp, #48]	; 0x30
   85bb6:	f7ff bba7 	b.w	85308 <_dtoa_r+0x4e0>
   85bba:	bf00      	nop
   85bbc:	401c0000 	.word	0x401c0000
   85bc0:	40140000 	.word	0x40140000
   85bc4:	00088048 	.word	0x00088048
   85bc8:	00088020 	.word	0x00088020
   85bcc:	3fe00000 	.word	0x3fe00000
   85bd0:	40240000 	.word	0x40240000
   85bd4:	2b39      	cmp	r3, #57	; 0x39
   85bd6:	f8cd b020 	str.w	fp, [sp, #32]
   85bda:	46d0      	mov	r8, sl
   85bdc:	f8dd b01c 	ldr.w	fp, [sp, #28]
   85be0:	469a      	mov	sl, r3
   85be2:	d0c8      	beq.n	85b76 <_dtoa_r+0xd4e>
   85be4:	f1bb 0f00 	cmp.w	fp, #0
   85be8:	f73f aec0 	bgt.w	8596c <_dtoa_r+0xb44>
   85bec:	e6c0      	b.n	85970 <_dtoa_r+0xb48>
   85bee:	f47f aebf 	bne.w	85970 <_dtoa_r+0xb48>
   85bf2:	f01a 0f01 	tst.w	sl, #1
   85bf6:	f43f aebb 	beq.w	85970 <_dtoa_r+0xb48>
   85bfa:	e6b3      	b.n	85964 <_dtoa_r+0xb3c>
   85bfc:	f04f 0800 	mov.w	r8, #0
   85c00:	4646      	mov	r6, r8
   85c02:	e5e8      	b.n	857d6 <_dtoa_r+0x9ae>
   85c04:	4631      	mov	r1, r6
   85c06:	2300      	movs	r3, #0
   85c08:	220a      	movs	r2, #10
   85c0a:	4620      	mov	r0, r4
   85c0c:	f000 fb7e 	bl	8630c <__multadd>
   85c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85c12:	4606      	mov	r6, r0
   85c14:	2b00      	cmp	r3, #0
   85c16:	dd07      	ble.n	85c28 <_dtoa_r+0xe00>
   85c18:	9307      	str	r3, [sp, #28]
   85c1a:	f7ff bbab 	b.w	85374 <_dtoa_r+0x54c>
   85c1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85c20:	2b02      	cmp	r3, #2
   85c22:	dc1f      	bgt.n	85c64 <_dtoa_r+0xe3c>
   85c24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85c26:	e43c      	b.n	854a2 <_dtoa_r+0x67a>
   85c28:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85c2a:	2b02      	cmp	r3, #2
   85c2c:	dc1a      	bgt.n	85c64 <_dtoa_r+0xe3c>
   85c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85c30:	e7f2      	b.n	85c18 <_dtoa_r+0xdf0>
   85c32:	f43f ab81 	beq.w	85338 <_dtoa_r+0x510>
   85c36:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   85c3a:	e411      	b.n	85460 <_dtoa_r+0x638>
   85c3c:	2500      	movs	r5, #0
   85c3e:	4620      	mov	r0, r4
   85c40:	6465      	str	r5, [r4, #68]	; 0x44
   85c42:	4629      	mov	r1, r5
   85c44:	f000 fb32 	bl	862ac <_Balloc>
   85c48:	f04f 33ff 	mov.w	r3, #4294967295
   85c4c:	9307      	str	r3, [sp, #28]
   85c4e:	930f      	str	r3, [sp, #60]	; 0x3c
   85c50:	2301      	movs	r3, #1
   85c52:	9004      	str	r0, [sp, #16]
   85c54:	9525      	str	r5, [sp, #148]	; 0x94
   85c56:	6420      	str	r0, [r4, #64]	; 0x40
   85c58:	930b      	str	r3, [sp, #44]	; 0x2c
   85c5a:	f7ff b9e0 	b.w	8501e <_dtoa_r+0x1f6>
   85c5e:	2501      	movs	r5, #1
   85c60:	f7ff b9a8 	b.w	84fb4 <_dtoa_r+0x18c>
   85c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85c66:	9307      	str	r3, [sp, #28]
   85c68:	e5e8      	b.n	8583c <_dtoa_r+0xa14>
   85c6a:	bf00      	nop

00085c6c <__libc_fini_array>:
   85c6c:	b538      	push	{r3, r4, r5, lr}
   85c6e:	4c0a      	ldr	r4, [pc, #40]	; (85c98 <__libc_fini_array+0x2c>)
   85c70:	4d0a      	ldr	r5, [pc, #40]	; (85c9c <__libc_fini_array+0x30>)
   85c72:	1b64      	subs	r4, r4, r5
   85c74:	10a4      	asrs	r4, r4, #2
   85c76:	d00a      	beq.n	85c8e <__libc_fini_array+0x22>
   85c78:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   85c7c:	3b01      	subs	r3, #1
   85c7e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   85c82:	3c01      	subs	r4, #1
   85c84:	f855 3904 	ldr.w	r3, [r5], #-4
   85c88:	4798      	blx	r3
   85c8a:	2c00      	cmp	r4, #0
   85c8c:	d1f9      	bne.n	85c82 <__libc_fini_array+0x16>
   85c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85c92:	f002 bad7 	b.w	88244 <_fini>
   85c96:	bf00      	nop
   85c98:	00088254 	.word	0x00088254
   85c9c:	00088250 	.word	0x00088250

00085ca0 <_localeconv_r>:
   85ca0:	4a04      	ldr	r2, [pc, #16]	; (85cb4 <_localeconv_r+0x14>)
   85ca2:	4b05      	ldr	r3, [pc, #20]	; (85cb8 <_localeconv_r+0x18>)
   85ca4:	6812      	ldr	r2, [r2, #0]
   85ca6:	6b50      	ldr	r0, [r2, #52]	; 0x34
   85ca8:	2800      	cmp	r0, #0
   85caa:	bf08      	it	eq
   85cac:	4618      	moveq	r0, r3
   85cae:	30f0      	adds	r0, #240	; 0xf0
   85cb0:	4770      	bx	lr
   85cb2:	bf00      	nop
   85cb4:	200701a0 	.word	0x200701a0
   85cb8:	200709e4 	.word	0x200709e4

00085cbc <__retarget_lock_acquire_recursive>:
   85cbc:	4770      	bx	lr
   85cbe:	bf00      	nop

00085cc0 <__retarget_lock_release_recursive>:
   85cc0:	4770      	bx	lr
   85cc2:	bf00      	nop

00085cc4 <_malloc_r>:
   85cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85cc8:	f101 060b 	add.w	r6, r1, #11
   85ccc:	2e16      	cmp	r6, #22
   85cce:	b083      	sub	sp, #12
   85cd0:	4605      	mov	r5, r0
   85cd2:	f240 809e 	bls.w	85e12 <_malloc_r+0x14e>
   85cd6:	f036 0607 	bics.w	r6, r6, #7
   85cda:	f100 80bd 	bmi.w	85e58 <_malloc_r+0x194>
   85cde:	42b1      	cmp	r1, r6
   85ce0:	f200 80ba 	bhi.w	85e58 <_malloc_r+0x194>
   85ce4:	f000 fad6 	bl	86294 <__malloc_lock>
   85ce8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   85cec:	f0c0 8285 	bcc.w	861fa <_malloc_r+0x536>
   85cf0:	0a73      	lsrs	r3, r6, #9
   85cf2:	f000 80b8 	beq.w	85e66 <_malloc_r+0x1a2>
   85cf6:	2b04      	cmp	r3, #4
   85cf8:	f200 816c 	bhi.w	85fd4 <_malloc_r+0x310>
   85cfc:	09b3      	lsrs	r3, r6, #6
   85cfe:	f103 0039 	add.w	r0, r3, #57	; 0x39
   85d02:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   85d06:	00c1      	lsls	r1, r0, #3
   85d08:	4fb8      	ldr	r7, [pc, #736]	; (85fec <_malloc_r+0x328>)
   85d0a:	4439      	add	r1, r7
   85d0c:	684c      	ldr	r4, [r1, #4]
   85d0e:	3908      	subs	r1, #8
   85d10:	42a1      	cmp	r1, r4
   85d12:	d106      	bne.n	85d22 <_malloc_r+0x5e>
   85d14:	e00c      	b.n	85d30 <_malloc_r+0x6c>
   85d16:	2a00      	cmp	r2, #0
   85d18:	f280 80ab 	bge.w	85e72 <_malloc_r+0x1ae>
   85d1c:	68e4      	ldr	r4, [r4, #12]
   85d1e:	42a1      	cmp	r1, r4
   85d20:	d006      	beq.n	85d30 <_malloc_r+0x6c>
   85d22:	6863      	ldr	r3, [r4, #4]
   85d24:	f023 0303 	bic.w	r3, r3, #3
   85d28:	1b9a      	subs	r2, r3, r6
   85d2a:	2a0f      	cmp	r2, #15
   85d2c:	ddf3      	ble.n	85d16 <_malloc_r+0x52>
   85d2e:	4670      	mov	r0, lr
   85d30:	693c      	ldr	r4, [r7, #16]
   85d32:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 86000 <_malloc_r+0x33c>
   85d36:	4574      	cmp	r4, lr
   85d38:	f000 819e 	beq.w	86078 <_malloc_r+0x3b4>
   85d3c:	6863      	ldr	r3, [r4, #4]
   85d3e:	f023 0303 	bic.w	r3, r3, #3
   85d42:	1b9a      	subs	r2, r3, r6
   85d44:	2a0f      	cmp	r2, #15
   85d46:	f300 8183 	bgt.w	86050 <_malloc_r+0x38c>
   85d4a:	2a00      	cmp	r2, #0
   85d4c:	f8c7 e014 	str.w	lr, [r7, #20]
   85d50:	f8c7 e010 	str.w	lr, [r7, #16]
   85d54:	f280 8091 	bge.w	85e7a <_malloc_r+0x1b6>
   85d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85d5c:	f080 8154 	bcs.w	86008 <_malloc_r+0x344>
   85d60:	2201      	movs	r2, #1
   85d62:	08db      	lsrs	r3, r3, #3
   85d64:	6879      	ldr	r1, [r7, #4]
   85d66:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   85d6a:	4413      	add	r3, r2
   85d6c:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   85d70:	fa02 f20c 	lsl.w	r2, r2, ip
   85d74:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   85d78:	430a      	orrs	r2, r1
   85d7a:	f1ac 0108 	sub.w	r1, ip, #8
   85d7e:	60e1      	str	r1, [r4, #12]
   85d80:	f8c4 8008 	str.w	r8, [r4, #8]
   85d84:	607a      	str	r2, [r7, #4]
   85d86:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   85d8a:	f8c8 400c 	str.w	r4, [r8, #12]
   85d8e:	2401      	movs	r4, #1
   85d90:	1083      	asrs	r3, r0, #2
   85d92:	409c      	lsls	r4, r3
   85d94:	4294      	cmp	r4, r2
   85d96:	d87d      	bhi.n	85e94 <_malloc_r+0x1d0>
   85d98:	4214      	tst	r4, r2
   85d9a:	d106      	bne.n	85daa <_malloc_r+0xe6>
   85d9c:	f020 0003 	bic.w	r0, r0, #3
   85da0:	0064      	lsls	r4, r4, #1
   85da2:	4214      	tst	r4, r2
   85da4:	f100 0004 	add.w	r0, r0, #4
   85da8:	d0fa      	beq.n	85da0 <_malloc_r+0xdc>
   85daa:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   85dae:	46cc      	mov	ip, r9
   85db0:	4680      	mov	r8, r0
   85db2:	f8dc 300c 	ldr.w	r3, [ip, #12]
   85db6:	459c      	cmp	ip, r3
   85db8:	d107      	bne.n	85dca <_malloc_r+0x106>
   85dba:	e15f      	b.n	8607c <_malloc_r+0x3b8>
   85dbc:	2a00      	cmp	r2, #0
   85dbe:	f280 816d 	bge.w	8609c <_malloc_r+0x3d8>
   85dc2:	68db      	ldr	r3, [r3, #12]
   85dc4:	459c      	cmp	ip, r3
   85dc6:	f000 8159 	beq.w	8607c <_malloc_r+0x3b8>
   85dca:	6859      	ldr	r1, [r3, #4]
   85dcc:	f021 0103 	bic.w	r1, r1, #3
   85dd0:	1b8a      	subs	r2, r1, r6
   85dd2:	2a0f      	cmp	r2, #15
   85dd4:	ddf2      	ble.n	85dbc <_malloc_r+0xf8>
   85dd6:	68dc      	ldr	r4, [r3, #12]
   85dd8:	f8d3 c008 	ldr.w	ip, [r3, #8]
   85ddc:	f046 0801 	orr.w	r8, r6, #1
   85de0:	4628      	mov	r0, r5
   85de2:	441e      	add	r6, r3
   85de4:	f042 0501 	orr.w	r5, r2, #1
   85de8:	f8c3 8004 	str.w	r8, [r3, #4]
   85dec:	f8cc 400c 	str.w	r4, [ip, #12]
   85df0:	f8c4 c008 	str.w	ip, [r4, #8]
   85df4:	617e      	str	r6, [r7, #20]
   85df6:	613e      	str	r6, [r7, #16]
   85df8:	f8c6 e00c 	str.w	lr, [r6, #12]
   85dfc:	f8c6 e008 	str.w	lr, [r6, #8]
   85e00:	6075      	str	r5, [r6, #4]
   85e02:	505a      	str	r2, [r3, r1]
   85e04:	9300      	str	r3, [sp, #0]
   85e06:	f000 fa4b 	bl	862a0 <__malloc_unlock>
   85e0a:	9b00      	ldr	r3, [sp, #0]
   85e0c:	f103 0408 	add.w	r4, r3, #8
   85e10:	e01e      	b.n	85e50 <_malloc_r+0x18c>
   85e12:	2910      	cmp	r1, #16
   85e14:	d820      	bhi.n	85e58 <_malloc_r+0x194>
   85e16:	f000 fa3d 	bl	86294 <__malloc_lock>
   85e1a:	2610      	movs	r6, #16
   85e1c:	2318      	movs	r3, #24
   85e1e:	2002      	movs	r0, #2
   85e20:	4f72      	ldr	r7, [pc, #456]	; (85fec <_malloc_r+0x328>)
   85e22:	443b      	add	r3, r7
   85e24:	685c      	ldr	r4, [r3, #4]
   85e26:	f1a3 0208 	sub.w	r2, r3, #8
   85e2a:	4294      	cmp	r4, r2
   85e2c:	f000 812f 	beq.w	8608e <_malloc_r+0x3ca>
   85e30:	6863      	ldr	r3, [r4, #4]
   85e32:	68e1      	ldr	r1, [r4, #12]
   85e34:	f023 0303 	bic.w	r3, r3, #3
   85e38:	4423      	add	r3, r4
   85e3a:	685a      	ldr	r2, [r3, #4]
   85e3c:	68a6      	ldr	r6, [r4, #8]
   85e3e:	f042 0201 	orr.w	r2, r2, #1
   85e42:	60f1      	str	r1, [r6, #12]
   85e44:	4628      	mov	r0, r5
   85e46:	608e      	str	r6, [r1, #8]
   85e48:	605a      	str	r2, [r3, #4]
   85e4a:	f000 fa29 	bl	862a0 <__malloc_unlock>
   85e4e:	3408      	adds	r4, #8
   85e50:	4620      	mov	r0, r4
   85e52:	b003      	add	sp, #12
   85e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e58:	2400      	movs	r4, #0
   85e5a:	230c      	movs	r3, #12
   85e5c:	4620      	mov	r0, r4
   85e5e:	602b      	str	r3, [r5, #0]
   85e60:	b003      	add	sp, #12
   85e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e66:	2040      	movs	r0, #64	; 0x40
   85e68:	f44f 7100 	mov.w	r1, #512	; 0x200
   85e6c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   85e70:	e74a      	b.n	85d08 <_malloc_r+0x44>
   85e72:	4423      	add	r3, r4
   85e74:	685a      	ldr	r2, [r3, #4]
   85e76:	68e1      	ldr	r1, [r4, #12]
   85e78:	e7e0      	b.n	85e3c <_malloc_r+0x178>
   85e7a:	4423      	add	r3, r4
   85e7c:	685a      	ldr	r2, [r3, #4]
   85e7e:	4628      	mov	r0, r5
   85e80:	f042 0201 	orr.w	r2, r2, #1
   85e84:	605a      	str	r2, [r3, #4]
   85e86:	3408      	adds	r4, #8
   85e88:	f000 fa0a 	bl	862a0 <__malloc_unlock>
   85e8c:	4620      	mov	r0, r4
   85e8e:	b003      	add	sp, #12
   85e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e94:	68bc      	ldr	r4, [r7, #8]
   85e96:	6863      	ldr	r3, [r4, #4]
   85e98:	f023 0803 	bic.w	r8, r3, #3
   85e9c:	45b0      	cmp	r8, r6
   85e9e:	d304      	bcc.n	85eaa <_malloc_r+0x1e6>
   85ea0:	eba8 0306 	sub.w	r3, r8, r6
   85ea4:	2b0f      	cmp	r3, #15
   85ea6:	f300 8085 	bgt.w	85fb4 <_malloc_r+0x2f0>
   85eaa:	f8df 9158 	ldr.w	r9, [pc, #344]	; 86004 <_malloc_r+0x340>
   85eae:	4b50      	ldr	r3, [pc, #320]	; (85ff0 <_malloc_r+0x32c>)
   85eb0:	f8d9 2000 	ldr.w	r2, [r9]
   85eb4:	681b      	ldr	r3, [r3, #0]
   85eb6:	3201      	adds	r2, #1
   85eb8:	4433      	add	r3, r6
   85eba:	eb04 0a08 	add.w	sl, r4, r8
   85ebe:	f000 8154 	beq.w	8616a <_malloc_r+0x4a6>
   85ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   85ec6:	330f      	adds	r3, #15
   85ec8:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   85ecc:	f02b 0b0f 	bic.w	fp, fp, #15
   85ed0:	4659      	mov	r1, fp
   85ed2:	4628      	mov	r0, r5
   85ed4:	f000 fce6 	bl	868a4 <_sbrk_r>
   85ed8:	1c41      	adds	r1, r0, #1
   85eda:	4602      	mov	r2, r0
   85edc:	f000 80fb 	beq.w	860d6 <_malloc_r+0x412>
   85ee0:	4582      	cmp	sl, r0
   85ee2:	f200 80f6 	bhi.w	860d2 <_malloc_r+0x40e>
   85ee6:	4b43      	ldr	r3, [pc, #268]	; (85ff4 <_malloc_r+0x330>)
   85ee8:	6819      	ldr	r1, [r3, #0]
   85eea:	4459      	add	r1, fp
   85eec:	6019      	str	r1, [r3, #0]
   85eee:	f000 814c 	beq.w	8618a <_malloc_r+0x4c6>
   85ef2:	f8d9 0000 	ldr.w	r0, [r9]
   85ef6:	3001      	adds	r0, #1
   85ef8:	bf1b      	ittet	ne
   85efa:	eba2 0a0a 	subne.w	sl, r2, sl
   85efe:	4451      	addne	r1, sl
   85f00:	f8c9 2000 	streq.w	r2, [r9]
   85f04:	6019      	strne	r1, [r3, #0]
   85f06:	f012 0107 	ands.w	r1, r2, #7
   85f0a:	f000 8114 	beq.w	86136 <_malloc_r+0x472>
   85f0e:	f1c1 0008 	rsb	r0, r1, #8
   85f12:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   85f16:	4402      	add	r2, r0
   85f18:	3108      	adds	r1, #8
   85f1a:	eb02 090b 	add.w	r9, r2, fp
   85f1e:	f3c9 090b 	ubfx	r9, r9, #0, #12
   85f22:	eba1 0909 	sub.w	r9, r1, r9
   85f26:	4649      	mov	r1, r9
   85f28:	4628      	mov	r0, r5
   85f2a:	9301      	str	r3, [sp, #4]
   85f2c:	9200      	str	r2, [sp, #0]
   85f2e:	f000 fcb9 	bl	868a4 <_sbrk_r>
   85f32:	1c43      	adds	r3, r0, #1
   85f34:	e89d 000c 	ldmia.w	sp, {r2, r3}
   85f38:	f000 8142 	beq.w	861c0 <_malloc_r+0x4fc>
   85f3c:	1a80      	subs	r0, r0, r2
   85f3e:	4448      	add	r0, r9
   85f40:	f040 0001 	orr.w	r0, r0, #1
   85f44:	6819      	ldr	r1, [r3, #0]
   85f46:	42bc      	cmp	r4, r7
   85f48:	4449      	add	r1, r9
   85f4a:	60ba      	str	r2, [r7, #8]
   85f4c:	6019      	str	r1, [r3, #0]
   85f4e:	6050      	str	r0, [r2, #4]
   85f50:	d017      	beq.n	85f82 <_malloc_r+0x2be>
   85f52:	f1b8 0f0f 	cmp.w	r8, #15
   85f56:	f240 80fa 	bls.w	8614e <_malloc_r+0x48a>
   85f5a:	f04f 0c05 	mov.w	ip, #5
   85f5e:	6862      	ldr	r2, [r4, #4]
   85f60:	f1a8 000c 	sub.w	r0, r8, #12
   85f64:	f020 0007 	bic.w	r0, r0, #7
   85f68:	f002 0201 	and.w	r2, r2, #1
   85f6c:	eb04 0e00 	add.w	lr, r4, r0
   85f70:	4302      	orrs	r2, r0
   85f72:	280f      	cmp	r0, #15
   85f74:	6062      	str	r2, [r4, #4]
   85f76:	f8ce c004 	str.w	ip, [lr, #4]
   85f7a:	f8ce c008 	str.w	ip, [lr, #8]
   85f7e:	f200 8116 	bhi.w	861ae <_malloc_r+0x4ea>
   85f82:	4b1d      	ldr	r3, [pc, #116]	; (85ff8 <_malloc_r+0x334>)
   85f84:	68bc      	ldr	r4, [r7, #8]
   85f86:	681a      	ldr	r2, [r3, #0]
   85f88:	4291      	cmp	r1, r2
   85f8a:	bf88      	it	hi
   85f8c:	6019      	strhi	r1, [r3, #0]
   85f8e:	4b1b      	ldr	r3, [pc, #108]	; (85ffc <_malloc_r+0x338>)
   85f90:	681a      	ldr	r2, [r3, #0]
   85f92:	4291      	cmp	r1, r2
   85f94:	6862      	ldr	r2, [r4, #4]
   85f96:	bf88      	it	hi
   85f98:	6019      	strhi	r1, [r3, #0]
   85f9a:	f022 0203 	bic.w	r2, r2, #3
   85f9e:	4296      	cmp	r6, r2
   85fa0:	eba2 0306 	sub.w	r3, r2, r6
   85fa4:	d801      	bhi.n	85faa <_malloc_r+0x2e6>
   85fa6:	2b0f      	cmp	r3, #15
   85fa8:	dc04      	bgt.n	85fb4 <_malloc_r+0x2f0>
   85faa:	4628      	mov	r0, r5
   85fac:	f000 f978 	bl	862a0 <__malloc_unlock>
   85fb0:	2400      	movs	r4, #0
   85fb2:	e74d      	b.n	85e50 <_malloc_r+0x18c>
   85fb4:	f046 0201 	orr.w	r2, r6, #1
   85fb8:	f043 0301 	orr.w	r3, r3, #1
   85fbc:	4426      	add	r6, r4
   85fbe:	6062      	str	r2, [r4, #4]
   85fc0:	4628      	mov	r0, r5
   85fc2:	60be      	str	r6, [r7, #8]
   85fc4:	3408      	adds	r4, #8
   85fc6:	6073      	str	r3, [r6, #4]
   85fc8:	f000 f96a 	bl	862a0 <__malloc_unlock>
   85fcc:	4620      	mov	r0, r4
   85fce:	b003      	add	sp, #12
   85fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85fd4:	2b14      	cmp	r3, #20
   85fd6:	d970      	bls.n	860ba <_malloc_r+0x3f6>
   85fd8:	2b54      	cmp	r3, #84	; 0x54
   85fda:	f200 80a2 	bhi.w	86122 <_malloc_r+0x45e>
   85fde:	0b33      	lsrs	r3, r6, #12
   85fe0:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   85fe4:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   85fe8:	00c1      	lsls	r1, r0, #3
   85fea:	e68d      	b.n	85d08 <_malloc_r+0x44>
   85fec:	200705d4 	.word	0x200705d4
   85ff0:	20070fe4 	.word	0x20070fe4
   85ff4:	20070fb4 	.word	0x20070fb4
   85ff8:	20070fdc 	.word	0x20070fdc
   85ffc:	20070fe0 	.word	0x20070fe0
   86000:	200705dc 	.word	0x200705dc
   86004:	200709dc 	.word	0x200709dc
   86008:	0a5a      	lsrs	r2, r3, #9
   8600a:	2a04      	cmp	r2, #4
   8600c:	d95b      	bls.n	860c6 <_malloc_r+0x402>
   8600e:	2a14      	cmp	r2, #20
   86010:	f200 80ae 	bhi.w	86170 <_malloc_r+0x4ac>
   86014:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   86018:	00c9      	lsls	r1, r1, #3
   8601a:	325b      	adds	r2, #91	; 0x5b
   8601c:	eb07 0c01 	add.w	ip, r7, r1
   86020:	5879      	ldr	r1, [r7, r1]
   86022:	f1ac 0c08 	sub.w	ip, ip, #8
   86026:	458c      	cmp	ip, r1
   86028:	f000 8088 	beq.w	8613c <_malloc_r+0x478>
   8602c:	684a      	ldr	r2, [r1, #4]
   8602e:	f022 0203 	bic.w	r2, r2, #3
   86032:	4293      	cmp	r3, r2
   86034:	d273      	bcs.n	8611e <_malloc_r+0x45a>
   86036:	6889      	ldr	r1, [r1, #8]
   86038:	458c      	cmp	ip, r1
   8603a:	d1f7      	bne.n	8602c <_malloc_r+0x368>
   8603c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   86040:	687a      	ldr	r2, [r7, #4]
   86042:	60e3      	str	r3, [r4, #12]
   86044:	f8c4 c008 	str.w	ip, [r4, #8]
   86048:	609c      	str	r4, [r3, #8]
   8604a:	f8cc 400c 	str.w	r4, [ip, #12]
   8604e:	e69e      	b.n	85d8e <_malloc_r+0xca>
   86050:	f046 0c01 	orr.w	ip, r6, #1
   86054:	f042 0101 	orr.w	r1, r2, #1
   86058:	4426      	add	r6, r4
   8605a:	f8c4 c004 	str.w	ip, [r4, #4]
   8605e:	4628      	mov	r0, r5
   86060:	617e      	str	r6, [r7, #20]
   86062:	613e      	str	r6, [r7, #16]
   86064:	f8c6 e00c 	str.w	lr, [r6, #12]
   86068:	f8c6 e008 	str.w	lr, [r6, #8]
   8606c:	6071      	str	r1, [r6, #4]
   8606e:	50e2      	str	r2, [r4, r3]
   86070:	f000 f916 	bl	862a0 <__malloc_unlock>
   86074:	3408      	adds	r4, #8
   86076:	e6eb      	b.n	85e50 <_malloc_r+0x18c>
   86078:	687a      	ldr	r2, [r7, #4]
   8607a:	e688      	b.n	85d8e <_malloc_r+0xca>
   8607c:	f108 0801 	add.w	r8, r8, #1
   86080:	f018 0f03 	tst.w	r8, #3
   86084:	f10c 0c08 	add.w	ip, ip, #8
   86088:	f47f ae93 	bne.w	85db2 <_malloc_r+0xee>
   8608c:	e02d      	b.n	860ea <_malloc_r+0x426>
   8608e:	68dc      	ldr	r4, [r3, #12]
   86090:	42a3      	cmp	r3, r4
   86092:	bf08      	it	eq
   86094:	3002      	addeq	r0, #2
   86096:	f43f ae4b 	beq.w	85d30 <_malloc_r+0x6c>
   8609a:	e6c9      	b.n	85e30 <_malloc_r+0x16c>
   8609c:	461c      	mov	r4, r3
   8609e:	4419      	add	r1, r3
   860a0:	684a      	ldr	r2, [r1, #4]
   860a2:	68db      	ldr	r3, [r3, #12]
   860a4:	f854 6f08 	ldr.w	r6, [r4, #8]!
   860a8:	f042 0201 	orr.w	r2, r2, #1
   860ac:	604a      	str	r2, [r1, #4]
   860ae:	4628      	mov	r0, r5
   860b0:	60f3      	str	r3, [r6, #12]
   860b2:	609e      	str	r6, [r3, #8]
   860b4:	f000 f8f4 	bl	862a0 <__malloc_unlock>
   860b8:	e6ca      	b.n	85e50 <_malloc_r+0x18c>
   860ba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   860be:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   860c2:	00c1      	lsls	r1, r0, #3
   860c4:	e620      	b.n	85d08 <_malloc_r+0x44>
   860c6:	099a      	lsrs	r2, r3, #6
   860c8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   860cc:	00c9      	lsls	r1, r1, #3
   860ce:	3238      	adds	r2, #56	; 0x38
   860d0:	e7a4      	b.n	8601c <_malloc_r+0x358>
   860d2:	42bc      	cmp	r4, r7
   860d4:	d054      	beq.n	86180 <_malloc_r+0x4bc>
   860d6:	68bc      	ldr	r4, [r7, #8]
   860d8:	6862      	ldr	r2, [r4, #4]
   860da:	f022 0203 	bic.w	r2, r2, #3
   860de:	e75e      	b.n	85f9e <_malloc_r+0x2da>
   860e0:	f859 3908 	ldr.w	r3, [r9], #-8
   860e4:	4599      	cmp	r9, r3
   860e6:	f040 8086 	bne.w	861f6 <_malloc_r+0x532>
   860ea:	f010 0f03 	tst.w	r0, #3
   860ee:	f100 30ff 	add.w	r0, r0, #4294967295
   860f2:	d1f5      	bne.n	860e0 <_malloc_r+0x41c>
   860f4:	687b      	ldr	r3, [r7, #4]
   860f6:	ea23 0304 	bic.w	r3, r3, r4
   860fa:	607b      	str	r3, [r7, #4]
   860fc:	0064      	lsls	r4, r4, #1
   860fe:	429c      	cmp	r4, r3
   86100:	f63f aec8 	bhi.w	85e94 <_malloc_r+0x1d0>
   86104:	2c00      	cmp	r4, #0
   86106:	f43f aec5 	beq.w	85e94 <_malloc_r+0x1d0>
   8610a:	421c      	tst	r4, r3
   8610c:	4640      	mov	r0, r8
   8610e:	f47f ae4c 	bne.w	85daa <_malloc_r+0xe6>
   86112:	0064      	lsls	r4, r4, #1
   86114:	421c      	tst	r4, r3
   86116:	f100 0004 	add.w	r0, r0, #4
   8611a:	d0fa      	beq.n	86112 <_malloc_r+0x44e>
   8611c:	e645      	b.n	85daa <_malloc_r+0xe6>
   8611e:	468c      	mov	ip, r1
   86120:	e78c      	b.n	8603c <_malloc_r+0x378>
   86122:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86126:	d815      	bhi.n	86154 <_malloc_r+0x490>
   86128:	0bf3      	lsrs	r3, r6, #15
   8612a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8612e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   86132:	00c1      	lsls	r1, r0, #3
   86134:	e5e8      	b.n	85d08 <_malloc_r+0x44>
   86136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8613a:	e6ee      	b.n	85f1a <_malloc_r+0x256>
   8613c:	2101      	movs	r1, #1
   8613e:	687b      	ldr	r3, [r7, #4]
   86140:	1092      	asrs	r2, r2, #2
   86142:	fa01 f202 	lsl.w	r2, r1, r2
   86146:	431a      	orrs	r2, r3
   86148:	607a      	str	r2, [r7, #4]
   8614a:	4663      	mov	r3, ip
   8614c:	e779      	b.n	86042 <_malloc_r+0x37e>
   8614e:	2301      	movs	r3, #1
   86150:	6053      	str	r3, [r2, #4]
   86152:	e72a      	b.n	85faa <_malloc_r+0x2e6>
   86154:	f240 5254 	movw	r2, #1364	; 0x554
   86158:	4293      	cmp	r3, r2
   8615a:	d822      	bhi.n	861a2 <_malloc_r+0x4de>
   8615c:	0cb3      	lsrs	r3, r6, #18
   8615e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   86162:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   86166:	00c1      	lsls	r1, r0, #3
   86168:	e5ce      	b.n	85d08 <_malloc_r+0x44>
   8616a:	f103 0b10 	add.w	fp, r3, #16
   8616e:	e6af      	b.n	85ed0 <_malloc_r+0x20c>
   86170:	2a54      	cmp	r2, #84	; 0x54
   86172:	d829      	bhi.n	861c8 <_malloc_r+0x504>
   86174:	0b1a      	lsrs	r2, r3, #12
   86176:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8617a:	00c9      	lsls	r1, r1, #3
   8617c:	326e      	adds	r2, #110	; 0x6e
   8617e:	e74d      	b.n	8601c <_malloc_r+0x358>
   86180:	4b20      	ldr	r3, [pc, #128]	; (86204 <_malloc_r+0x540>)
   86182:	6819      	ldr	r1, [r3, #0]
   86184:	4459      	add	r1, fp
   86186:	6019      	str	r1, [r3, #0]
   86188:	e6b3      	b.n	85ef2 <_malloc_r+0x22e>
   8618a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8618e:	2800      	cmp	r0, #0
   86190:	f47f aeaf 	bne.w	85ef2 <_malloc_r+0x22e>
   86194:	eb08 030b 	add.w	r3, r8, fp
   86198:	68ba      	ldr	r2, [r7, #8]
   8619a:	f043 0301 	orr.w	r3, r3, #1
   8619e:	6053      	str	r3, [r2, #4]
   861a0:	e6ef      	b.n	85f82 <_malloc_r+0x2be>
   861a2:	207f      	movs	r0, #127	; 0x7f
   861a4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   861a8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   861ac:	e5ac      	b.n	85d08 <_malloc_r+0x44>
   861ae:	f104 0108 	add.w	r1, r4, #8
   861b2:	4628      	mov	r0, r5
   861b4:	9300      	str	r3, [sp, #0]
   861b6:	f000 fce7 	bl	86b88 <_free_r>
   861ba:	9b00      	ldr	r3, [sp, #0]
   861bc:	6819      	ldr	r1, [r3, #0]
   861be:	e6e0      	b.n	85f82 <_malloc_r+0x2be>
   861c0:	2001      	movs	r0, #1
   861c2:	f04f 0900 	mov.w	r9, #0
   861c6:	e6bd      	b.n	85f44 <_malloc_r+0x280>
   861c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   861cc:	d805      	bhi.n	861da <_malloc_r+0x516>
   861ce:	0bda      	lsrs	r2, r3, #15
   861d0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   861d4:	00c9      	lsls	r1, r1, #3
   861d6:	3277      	adds	r2, #119	; 0x77
   861d8:	e720      	b.n	8601c <_malloc_r+0x358>
   861da:	f240 5154 	movw	r1, #1364	; 0x554
   861de:	428a      	cmp	r2, r1
   861e0:	d805      	bhi.n	861ee <_malloc_r+0x52a>
   861e2:	0c9a      	lsrs	r2, r3, #18
   861e4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   861e8:	00c9      	lsls	r1, r1, #3
   861ea:	327c      	adds	r2, #124	; 0x7c
   861ec:	e716      	b.n	8601c <_malloc_r+0x358>
   861ee:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   861f2:	227e      	movs	r2, #126	; 0x7e
   861f4:	e712      	b.n	8601c <_malloc_r+0x358>
   861f6:	687b      	ldr	r3, [r7, #4]
   861f8:	e780      	b.n	860fc <_malloc_r+0x438>
   861fa:	08f0      	lsrs	r0, r6, #3
   861fc:	f106 0308 	add.w	r3, r6, #8
   86200:	e60e      	b.n	85e20 <_malloc_r+0x15c>
   86202:	bf00      	nop
   86204:	20070fb4 	.word	0x20070fb4

00086208 <memchr>:
   86208:	0783      	lsls	r3, r0, #30
   8620a:	b470      	push	{r4, r5, r6}
   8620c:	b2cd      	uxtb	r5, r1
   8620e:	d03d      	beq.n	8628c <memchr+0x84>
   86210:	1e54      	subs	r4, r2, #1
   86212:	b30a      	cbz	r2, 86258 <memchr+0x50>
   86214:	7803      	ldrb	r3, [r0, #0]
   86216:	42ab      	cmp	r3, r5
   86218:	d01f      	beq.n	8625a <memchr+0x52>
   8621a:	1c43      	adds	r3, r0, #1
   8621c:	e005      	b.n	8622a <memchr+0x22>
   8621e:	f114 34ff 	adds.w	r4, r4, #4294967295
   86222:	d319      	bcc.n	86258 <memchr+0x50>
   86224:	7802      	ldrb	r2, [r0, #0]
   86226:	42aa      	cmp	r2, r5
   86228:	d017      	beq.n	8625a <memchr+0x52>
   8622a:	f013 0f03 	tst.w	r3, #3
   8622e:	4618      	mov	r0, r3
   86230:	f103 0301 	add.w	r3, r3, #1
   86234:	d1f3      	bne.n	8621e <memchr+0x16>
   86236:	2c03      	cmp	r4, #3
   86238:	d811      	bhi.n	8625e <memchr+0x56>
   8623a:	b34c      	cbz	r4, 86290 <memchr+0x88>
   8623c:	7803      	ldrb	r3, [r0, #0]
   8623e:	42ab      	cmp	r3, r5
   86240:	d00b      	beq.n	8625a <memchr+0x52>
   86242:	4404      	add	r4, r0
   86244:	1c43      	adds	r3, r0, #1
   86246:	e002      	b.n	8624e <memchr+0x46>
   86248:	7802      	ldrb	r2, [r0, #0]
   8624a:	42aa      	cmp	r2, r5
   8624c:	d005      	beq.n	8625a <memchr+0x52>
   8624e:	429c      	cmp	r4, r3
   86250:	4618      	mov	r0, r3
   86252:	f103 0301 	add.w	r3, r3, #1
   86256:	d1f7      	bne.n	86248 <memchr+0x40>
   86258:	2000      	movs	r0, #0
   8625a:	bc70      	pop	{r4, r5, r6}
   8625c:	4770      	bx	lr
   8625e:	0209      	lsls	r1, r1, #8
   86260:	b289      	uxth	r1, r1
   86262:	4329      	orrs	r1, r5
   86264:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   86268:	6803      	ldr	r3, [r0, #0]
   8626a:	4606      	mov	r6, r0
   8626c:	404b      	eors	r3, r1
   8626e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   86272:	ea22 0303 	bic.w	r3, r2, r3
   86276:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8627a:	f100 0004 	add.w	r0, r0, #4
   8627e:	d103      	bne.n	86288 <memchr+0x80>
   86280:	3c04      	subs	r4, #4
   86282:	2c03      	cmp	r4, #3
   86284:	d8f0      	bhi.n	86268 <memchr+0x60>
   86286:	e7d8      	b.n	8623a <memchr+0x32>
   86288:	4630      	mov	r0, r6
   8628a:	e7d7      	b.n	8623c <memchr+0x34>
   8628c:	4614      	mov	r4, r2
   8628e:	e7d2      	b.n	86236 <memchr+0x2e>
   86290:	4620      	mov	r0, r4
   86292:	e7e2      	b.n	8625a <memchr+0x52>

00086294 <__malloc_lock>:
   86294:	4801      	ldr	r0, [pc, #4]	; (8629c <__malloc_lock+0x8>)
   86296:	f7ff bd11 	b.w	85cbc <__retarget_lock_acquire_recursive>
   8629a:	bf00      	nop
   8629c:	20071048 	.word	0x20071048

000862a0 <__malloc_unlock>:
   862a0:	4801      	ldr	r0, [pc, #4]	; (862a8 <__malloc_unlock+0x8>)
   862a2:	f7ff bd0d 	b.w	85cc0 <__retarget_lock_release_recursive>
   862a6:	bf00      	nop
   862a8:	20071048 	.word	0x20071048

000862ac <_Balloc>:
   862ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   862ae:	b570      	push	{r4, r5, r6, lr}
   862b0:	4605      	mov	r5, r0
   862b2:	460c      	mov	r4, r1
   862b4:	b14b      	cbz	r3, 862ca <_Balloc+0x1e>
   862b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   862ba:	b180      	cbz	r0, 862de <_Balloc+0x32>
   862bc:	6802      	ldr	r2, [r0, #0]
   862be:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   862c2:	2300      	movs	r3, #0
   862c4:	6103      	str	r3, [r0, #16]
   862c6:	60c3      	str	r3, [r0, #12]
   862c8:	bd70      	pop	{r4, r5, r6, pc}
   862ca:	2221      	movs	r2, #33	; 0x21
   862cc:	2104      	movs	r1, #4
   862ce:	f000 fbdb 	bl	86a88 <_calloc_r>
   862d2:	64e8      	str	r0, [r5, #76]	; 0x4c
   862d4:	4603      	mov	r3, r0
   862d6:	2800      	cmp	r0, #0
   862d8:	d1ed      	bne.n	862b6 <_Balloc+0xa>
   862da:	2000      	movs	r0, #0
   862dc:	bd70      	pop	{r4, r5, r6, pc}
   862de:	2101      	movs	r1, #1
   862e0:	fa01 f604 	lsl.w	r6, r1, r4
   862e4:	1d72      	adds	r2, r6, #5
   862e6:	4628      	mov	r0, r5
   862e8:	0092      	lsls	r2, r2, #2
   862ea:	f000 fbcd 	bl	86a88 <_calloc_r>
   862ee:	2800      	cmp	r0, #0
   862f0:	d0f3      	beq.n	862da <_Balloc+0x2e>
   862f2:	6044      	str	r4, [r0, #4]
   862f4:	6086      	str	r6, [r0, #8]
   862f6:	e7e4      	b.n	862c2 <_Balloc+0x16>

000862f8 <_Bfree>:
   862f8:	b131      	cbz	r1, 86308 <_Bfree+0x10>
   862fa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   862fc:	684a      	ldr	r2, [r1, #4]
   862fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   86302:	6008      	str	r0, [r1, #0]
   86304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   86308:	4770      	bx	lr
   8630a:	bf00      	nop

0008630c <__multadd>:
   8630c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8630e:	460c      	mov	r4, r1
   86310:	4605      	mov	r5, r0
   86312:	f04f 0e00 	mov.w	lr, #0
   86316:	690e      	ldr	r6, [r1, #16]
   86318:	b083      	sub	sp, #12
   8631a:	f101 0714 	add.w	r7, r1, #20
   8631e:	6838      	ldr	r0, [r7, #0]
   86320:	f10e 0e01 	add.w	lr, lr, #1
   86324:	b281      	uxth	r1, r0
   86326:	fb02 3301 	mla	r3, r2, r1, r3
   8632a:	0c01      	lsrs	r1, r0, #16
   8632c:	0c18      	lsrs	r0, r3, #16
   8632e:	fb02 0101 	mla	r1, r2, r1, r0
   86332:	b29b      	uxth	r3, r3
   86334:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   86338:	4576      	cmp	r6, lr
   8633a:	f847 3b04 	str.w	r3, [r7], #4
   8633e:	ea4f 4311 	mov.w	r3, r1, lsr #16
   86342:	dcec      	bgt.n	8631e <__multadd+0x12>
   86344:	b13b      	cbz	r3, 86356 <__multadd+0x4a>
   86346:	68a2      	ldr	r2, [r4, #8]
   86348:	4296      	cmp	r6, r2
   8634a:	da07      	bge.n	8635c <__multadd+0x50>
   8634c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   86350:	3601      	adds	r6, #1
   86352:	6153      	str	r3, [r2, #20]
   86354:	6126      	str	r6, [r4, #16]
   86356:	4620      	mov	r0, r4
   86358:	b003      	add	sp, #12
   8635a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8635c:	6861      	ldr	r1, [r4, #4]
   8635e:	4628      	mov	r0, r5
   86360:	3101      	adds	r1, #1
   86362:	9301      	str	r3, [sp, #4]
   86364:	f7ff ffa2 	bl	862ac <_Balloc>
   86368:	4607      	mov	r7, r0
   8636a:	6922      	ldr	r2, [r4, #16]
   8636c:	f104 010c 	add.w	r1, r4, #12
   86370:	3202      	adds	r2, #2
   86372:	0092      	lsls	r2, r2, #2
   86374:	300c      	adds	r0, #12
   86376:	f7fd f919 	bl	835ac <memcpy>
   8637a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   8637c:	6861      	ldr	r1, [r4, #4]
   8637e:	9b01      	ldr	r3, [sp, #4]
   86380:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   86384:	6020      	str	r0, [r4, #0]
   86386:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   8638a:	463c      	mov	r4, r7
   8638c:	e7de      	b.n	8634c <__multadd+0x40>
   8638e:	bf00      	nop

00086390 <__hi0bits>:
   86390:	0c02      	lsrs	r2, r0, #16
   86392:	0412      	lsls	r2, r2, #16
   86394:	4603      	mov	r3, r0
   86396:	b9b2      	cbnz	r2, 863c6 <__hi0bits+0x36>
   86398:	0403      	lsls	r3, r0, #16
   8639a:	2010      	movs	r0, #16
   8639c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   863a0:	bf04      	itt	eq
   863a2:	021b      	lsleq	r3, r3, #8
   863a4:	3008      	addeq	r0, #8
   863a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   863aa:	bf04      	itt	eq
   863ac:	011b      	lsleq	r3, r3, #4
   863ae:	3004      	addeq	r0, #4
   863b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   863b4:	bf04      	itt	eq
   863b6:	009b      	lsleq	r3, r3, #2
   863b8:	3002      	addeq	r0, #2
   863ba:	2b00      	cmp	r3, #0
   863bc:	db02      	blt.n	863c4 <__hi0bits+0x34>
   863be:	005b      	lsls	r3, r3, #1
   863c0:	d403      	bmi.n	863ca <__hi0bits+0x3a>
   863c2:	2020      	movs	r0, #32
   863c4:	4770      	bx	lr
   863c6:	2000      	movs	r0, #0
   863c8:	e7e8      	b.n	8639c <__hi0bits+0xc>
   863ca:	3001      	adds	r0, #1
   863cc:	4770      	bx	lr
   863ce:	bf00      	nop

000863d0 <__lo0bits>:
   863d0:	6803      	ldr	r3, [r0, #0]
   863d2:	4601      	mov	r1, r0
   863d4:	f013 0207 	ands.w	r2, r3, #7
   863d8:	d007      	beq.n	863ea <__lo0bits+0x1a>
   863da:	07da      	lsls	r2, r3, #31
   863dc:	d421      	bmi.n	86422 <__lo0bits+0x52>
   863de:	0798      	lsls	r0, r3, #30
   863e0:	d421      	bmi.n	86426 <__lo0bits+0x56>
   863e2:	089b      	lsrs	r3, r3, #2
   863e4:	600b      	str	r3, [r1, #0]
   863e6:	2002      	movs	r0, #2
   863e8:	4770      	bx	lr
   863ea:	b298      	uxth	r0, r3
   863ec:	b198      	cbz	r0, 86416 <__lo0bits+0x46>
   863ee:	4610      	mov	r0, r2
   863f0:	f013 0fff 	tst.w	r3, #255	; 0xff
   863f4:	bf04      	itt	eq
   863f6:	0a1b      	lsreq	r3, r3, #8
   863f8:	3008      	addeq	r0, #8
   863fa:	071a      	lsls	r2, r3, #28
   863fc:	bf04      	itt	eq
   863fe:	091b      	lsreq	r3, r3, #4
   86400:	3004      	addeq	r0, #4
   86402:	079a      	lsls	r2, r3, #30
   86404:	bf04      	itt	eq
   86406:	089b      	lsreq	r3, r3, #2
   86408:	3002      	addeq	r0, #2
   8640a:	07da      	lsls	r2, r3, #31
   8640c:	d407      	bmi.n	8641e <__lo0bits+0x4e>
   8640e:	085b      	lsrs	r3, r3, #1
   86410:	d104      	bne.n	8641c <__lo0bits+0x4c>
   86412:	2020      	movs	r0, #32
   86414:	4770      	bx	lr
   86416:	0c1b      	lsrs	r3, r3, #16
   86418:	2010      	movs	r0, #16
   8641a:	e7e9      	b.n	863f0 <__lo0bits+0x20>
   8641c:	3001      	adds	r0, #1
   8641e:	600b      	str	r3, [r1, #0]
   86420:	4770      	bx	lr
   86422:	2000      	movs	r0, #0
   86424:	4770      	bx	lr
   86426:	085b      	lsrs	r3, r3, #1
   86428:	600b      	str	r3, [r1, #0]
   8642a:	2001      	movs	r0, #1
   8642c:	4770      	bx	lr
   8642e:	bf00      	nop

00086430 <__i2b>:
   86430:	b510      	push	{r4, lr}
   86432:	460c      	mov	r4, r1
   86434:	2101      	movs	r1, #1
   86436:	f7ff ff39 	bl	862ac <_Balloc>
   8643a:	2201      	movs	r2, #1
   8643c:	6144      	str	r4, [r0, #20]
   8643e:	6102      	str	r2, [r0, #16]
   86440:	bd10      	pop	{r4, pc}
   86442:	bf00      	nop

00086444 <__multiply>:
   86444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86448:	690c      	ldr	r4, [r1, #16]
   8644a:	6915      	ldr	r5, [r2, #16]
   8644c:	b083      	sub	sp, #12
   8644e:	42ac      	cmp	r4, r5
   86450:	468b      	mov	fp, r1
   86452:	4616      	mov	r6, r2
   86454:	da04      	bge.n	86460 <__multiply+0x1c>
   86456:	4622      	mov	r2, r4
   86458:	46b3      	mov	fp, r6
   8645a:	462c      	mov	r4, r5
   8645c:	460e      	mov	r6, r1
   8645e:	4615      	mov	r5, r2
   86460:	f8db 3008 	ldr.w	r3, [fp, #8]
   86464:	eb04 0805 	add.w	r8, r4, r5
   86468:	f8db 1004 	ldr.w	r1, [fp, #4]
   8646c:	4598      	cmp	r8, r3
   8646e:	bfc8      	it	gt
   86470:	3101      	addgt	r1, #1
   86472:	f7ff ff1b 	bl	862ac <_Balloc>
   86476:	f100 0914 	add.w	r9, r0, #20
   8647a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8647e:	45d1      	cmp	r9, sl
   86480:	9000      	str	r0, [sp, #0]
   86482:	d205      	bcs.n	86490 <__multiply+0x4c>
   86484:	464b      	mov	r3, r9
   86486:	2100      	movs	r1, #0
   86488:	f843 1b04 	str.w	r1, [r3], #4
   8648c:	459a      	cmp	sl, r3
   8648e:	d8fb      	bhi.n	86488 <__multiply+0x44>
   86490:	f106 0c14 	add.w	ip, r6, #20
   86494:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   86498:	f10b 0b14 	add.w	fp, fp, #20
   8649c:	459c      	cmp	ip, r3
   8649e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   864a2:	d24b      	bcs.n	8653c <__multiply+0xf8>
   864a4:	f8cd a004 	str.w	sl, [sp, #4]
   864a8:	469a      	mov	sl, r3
   864aa:	f8dc 5000 	ldr.w	r5, [ip]
   864ae:	b2af      	uxth	r7, r5
   864b0:	b1e7      	cbz	r7, 864ec <__multiply+0xa8>
   864b2:	464d      	mov	r5, r9
   864b4:	465e      	mov	r6, fp
   864b6:	2100      	movs	r1, #0
   864b8:	f856 2b04 	ldr.w	r2, [r6], #4
   864bc:	6828      	ldr	r0, [r5, #0]
   864be:	b293      	uxth	r3, r2
   864c0:	b284      	uxth	r4, r0
   864c2:	0c12      	lsrs	r2, r2, #16
   864c4:	fb07 4303 	mla	r3, r7, r3, r4
   864c8:	0c00      	lsrs	r0, r0, #16
   864ca:	fb07 0202 	mla	r2, r7, r2, r0
   864ce:	440b      	add	r3, r1
   864d0:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   864d4:	b29b      	uxth	r3, r3
   864d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   864da:	45b6      	cmp	lr, r6
   864dc:	f845 3b04 	str.w	r3, [r5], #4
   864e0:	ea4f 4111 	mov.w	r1, r1, lsr #16
   864e4:	d8e8      	bhi.n	864b8 <__multiply+0x74>
   864e6:	6029      	str	r1, [r5, #0]
   864e8:	f8dc 5000 	ldr.w	r5, [ip]
   864ec:	0c2d      	lsrs	r5, r5, #16
   864ee:	d01d      	beq.n	8652c <__multiply+0xe8>
   864f0:	f8d9 3000 	ldr.w	r3, [r9]
   864f4:	4648      	mov	r0, r9
   864f6:	461c      	mov	r4, r3
   864f8:	4659      	mov	r1, fp
   864fa:	2200      	movs	r2, #0
   864fc:	880e      	ldrh	r6, [r1, #0]
   864fe:	0c24      	lsrs	r4, r4, #16
   86500:	fb05 4406 	mla	r4, r5, r6, r4
   86504:	b29b      	uxth	r3, r3
   86506:	4422      	add	r2, r4
   86508:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8650c:	f840 3b04 	str.w	r3, [r0], #4
   86510:	f851 3b04 	ldr.w	r3, [r1], #4
   86514:	6804      	ldr	r4, [r0, #0]
   86516:	0c1b      	lsrs	r3, r3, #16
   86518:	b2a6      	uxth	r6, r4
   8651a:	fb05 6303 	mla	r3, r5, r3, r6
   8651e:	458e      	cmp	lr, r1
   86520:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   86524:	ea4f 4213 	mov.w	r2, r3, lsr #16
   86528:	d8e8      	bhi.n	864fc <__multiply+0xb8>
   8652a:	6003      	str	r3, [r0, #0]
   8652c:	f10c 0c04 	add.w	ip, ip, #4
   86530:	45e2      	cmp	sl, ip
   86532:	f109 0904 	add.w	r9, r9, #4
   86536:	d8b8      	bhi.n	864aa <__multiply+0x66>
   86538:	f8dd a004 	ldr.w	sl, [sp, #4]
   8653c:	f1b8 0f00 	cmp.w	r8, #0
   86540:	dd0b      	ble.n	8655a <__multiply+0x116>
   86542:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   86546:	f1aa 0a04 	sub.w	sl, sl, #4
   8654a:	b11b      	cbz	r3, 86554 <__multiply+0x110>
   8654c:	e005      	b.n	8655a <__multiply+0x116>
   8654e:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   86552:	b913      	cbnz	r3, 8655a <__multiply+0x116>
   86554:	f1b8 0801 	subs.w	r8, r8, #1
   86558:	d1f9      	bne.n	8654e <__multiply+0x10a>
   8655a:	9800      	ldr	r0, [sp, #0]
   8655c:	f8c0 8010 	str.w	r8, [r0, #16]
   86560:	b003      	add	sp, #12
   86562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86566:	bf00      	nop

00086568 <__pow5mult>:
   86568:	f012 0303 	ands.w	r3, r2, #3
   8656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86570:	4614      	mov	r4, r2
   86572:	4607      	mov	r7, r0
   86574:	d12e      	bne.n	865d4 <__pow5mult+0x6c>
   86576:	460d      	mov	r5, r1
   86578:	10a4      	asrs	r4, r4, #2
   8657a:	d01c      	beq.n	865b6 <__pow5mult+0x4e>
   8657c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   8657e:	b396      	cbz	r6, 865e6 <__pow5mult+0x7e>
   86580:	07e3      	lsls	r3, r4, #31
   86582:	f04f 0800 	mov.w	r8, #0
   86586:	d406      	bmi.n	86596 <__pow5mult+0x2e>
   86588:	1064      	asrs	r4, r4, #1
   8658a:	d014      	beq.n	865b6 <__pow5mult+0x4e>
   8658c:	6830      	ldr	r0, [r6, #0]
   8658e:	b1a8      	cbz	r0, 865bc <__pow5mult+0x54>
   86590:	4606      	mov	r6, r0
   86592:	07e3      	lsls	r3, r4, #31
   86594:	d5f8      	bpl.n	86588 <__pow5mult+0x20>
   86596:	4632      	mov	r2, r6
   86598:	4629      	mov	r1, r5
   8659a:	4638      	mov	r0, r7
   8659c:	f7ff ff52 	bl	86444 <__multiply>
   865a0:	b1b5      	cbz	r5, 865d0 <__pow5mult+0x68>
   865a2:	686a      	ldr	r2, [r5, #4]
   865a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   865a6:	1064      	asrs	r4, r4, #1
   865a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   865ac:	6029      	str	r1, [r5, #0]
   865ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   865b2:	4605      	mov	r5, r0
   865b4:	d1ea      	bne.n	8658c <__pow5mult+0x24>
   865b6:	4628      	mov	r0, r5
   865b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   865bc:	4632      	mov	r2, r6
   865be:	4631      	mov	r1, r6
   865c0:	4638      	mov	r0, r7
   865c2:	f7ff ff3f 	bl	86444 <__multiply>
   865c6:	6030      	str	r0, [r6, #0]
   865c8:	f8c0 8000 	str.w	r8, [r0]
   865cc:	4606      	mov	r6, r0
   865ce:	e7e0      	b.n	86592 <__pow5mult+0x2a>
   865d0:	4605      	mov	r5, r0
   865d2:	e7d9      	b.n	86588 <__pow5mult+0x20>
   865d4:	4a0b      	ldr	r2, [pc, #44]	; (86604 <__pow5mult+0x9c>)
   865d6:	3b01      	subs	r3, #1
   865d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   865dc:	2300      	movs	r3, #0
   865de:	f7ff fe95 	bl	8630c <__multadd>
   865e2:	4605      	mov	r5, r0
   865e4:	e7c8      	b.n	86578 <__pow5mult+0x10>
   865e6:	2101      	movs	r1, #1
   865e8:	4638      	mov	r0, r7
   865ea:	f7ff fe5f 	bl	862ac <_Balloc>
   865ee:	f240 2171 	movw	r1, #625	; 0x271
   865f2:	2201      	movs	r2, #1
   865f4:	2300      	movs	r3, #0
   865f6:	6141      	str	r1, [r0, #20]
   865f8:	6102      	str	r2, [r0, #16]
   865fa:	4606      	mov	r6, r0
   865fc:	64b8      	str	r0, [r7, #72]	; 0x48
   865fe:	6003      	str	r3, [r0, #0]
   86600:	e7be      	b.n	86580 <__pow5mult+0x18>
   86602:	bf00      	nop
   86604:	00088110 	.word	0x00088110

00086608 <__lshift>:
   86608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8660c:	690b      	ldr	r3, [r1, #16]
   8660e:	1154      	asrs	r4, r2, #5
   86610:	eb04 0803 	add.w	r8, r4, r3
   86614:	688b      	ldr	r3, [r1, #8]
   86616:	f108 0501 	add.w	r5, r8, #1
   8661a:	429d      	cmp	r5, r3
   8661c:	460e      	mov	r6, r1
   8661e:	4691      	mov	r9, r2
   86620:	4607      	mov	r7, r0
   86622:	6849      	ldr	r1, [r1, #4]
   86624:	dd04      	ble.n	86630 <__lshift+0x28>
   86626:	005b      	lsls	r3, r3, #1
   86628:	429d      	cmp	r5, r3
   8662a:	f101 0101 	add.w	r1, r1, #1
   8662e:	dcfa      	bgt.n	86626 <__lshift+0x1e>
   86630:	4638      	mov	r0, r7
   86632:	f7ff fe3b 	bl	862ac <_Balloc>
   86636:	2c00      	cmp	r4, #0
   86638:	f100 0314 	add.w	r3, r0, #20
   8663c:	dd06      	ble.n	8664c <__lshift+0x44>
   8663e:	2100      	movs	r1, #0
   86640:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   86644:	f843 1b04 	str.w	r1, [r3], #4
   86648:	429a      	cmp	r2, r3
   8664a:	d1fb      	bne.n	86644 <__lshift+0x3c>
   8664c:	6934      	ldr	r4, [r6, #16]
   8664e:	f106 0114 	add.w	r1, r6, #20
   86652:	f019 091f 	ands.w	r9, r9, #31
   86656:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8665a:	d01d      	beq.n	86698 <__lshift+0x90>
   8665c:	2200      	movs	r2, #0
   8665e:	f1c9 0c20 	rsb	ip, r9, #32
   86662:	680c      	ldr	r4, [r1, #0]
   86664:	fa04 f409 	lsl.w	r4, r4, r9
   86668:	4314      	orrs	r4, r2
   8666a:	f843 4b04 	str.w	r4, [r3], #4
   8666e:	f851 2b04 	ldr.w	r2, [r1], #4
   86672:	458e      	cmp	lr, r1
   86674:	fa22 f20c 	lsr.w	r2, r2, ip
   86678:	d8f3      	bhi.n	86662 <__lshift+0x5a>
   8667a:	601a      	str	r2, [r3, #0]
   8667c:	b10a      	cbz	r2, 86682 <__lshift+0x7a>
   8667e:	f108 0502 	add.w	r5, r8, #2
   86682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86684:	6872      	ldr	r2, [r6, #4]
   86686:	3d01      	subs	r5, #1
   86688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8668c:	6105      	str	r5, [r0, #16]
   8668e:	6031      	str	r1, [r6, #0]
   86690:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   86694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86698:	3b04      	subs	r3, #4
   8669a:	f851 2b04 	ldr.w	r2, [r1], #4
   8669e:	458e      	cmp	lr, r1
   866a0:	f843 2f04 	str.w	r2, [r3, #4]!
   866a4:	d8f9      	bhi.n	8669a <__lshift+0x92>
   866a6:	e7ec      	b.n	86682 <__lshift+0x7a>

000866a8 <__mcmp>:
   866a8:	b430      	push	{r4, r5}
   866aa:	690b      	ldr	r3, [r1, #16]
   866ac:	4605      	mov	r5, r0
   866ae:	6900      	ldr	r0, [r0, #16]
   866b0:	1ac0      	subs	r0, r0, r3
   866b2:	d10f      	bne.n	866d4 <__mcmp+0x2c>
   866b4:	009b      	lsls	r3, r3, #2
   866b6:	3514      	adds	r5, #20
   866b8:	3114      	adds	r1, #20
   866ba:	4419      	add	r1, r3
   866bc:	442b      	add	r3, r5
   866be:	e001      	b.n	866c4 <__mcmp+0x1c>
   866c0:	429d      	cmp	r5, r3
   866c2:	d207      	bcs.n	866d4 <__mcmp+0x2c>
   866c4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   866c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   866cc:	4294      	cmp	r4, r2
   866ce:	d0f7      	beq.n	866c0 <__mcmp+0x18>
   866d0:	d302      	bcc.n	866d8 <__mcmp+0x30>
   866d2:	2001      	movs	r0, #1
   866d4:	bc30      	pop	{r4, r5}
   866d6:	4770      	bx	lr
   866d8:	f04f 30ff 	mov.w	r0, #4294967295
   866dc:	e7fa      	b.n	866d4 <__mcmp+0x2c>
   866de:	bf00      	nop

000866e0 <__mdiff>:
   866e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   866e4:	690c      	ldr	r4, [r1, #16]
   866e6:	4689      	mov	r9, r1
   866e8:	6911      	ldr	r1, [r2, #16]
   866ea:	4692      	mov	sl, r2
   866ec:	1a64      	subs	r4, r4, r1
   866ee:	2c00      	cmp	r4, #0
   866f0:	d117      	bne.n	86722 <__mdiff+0x42>
   866f2:	0089      	lsls	r1, r1, #2
   866f4:	f109 0714 	add.w	r7, r9, #20
   866f8:	f102 0614 	add.w	r6, r2, #20
   866fc:	187b      	adds	r3, r7, r1
   866fe:	4431      	add	r1, r6
   86700:	e001      	b.n	86706 <__mdiff+0x26>
   86702:	429f      	cmp	r7, r3
   86704:	d265      	bcs.n	867d2 <__mdiff+0xf2>
   86706:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8670a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8670e:	4295      	cmp	r5, r2
   86710:	d0f7      	beq.n	86702 <__mdiff+0x22>
   86712:	d267      	bcs.n	867e4 <__mdiff+0x104>
   86714:	464b      	mov	r3, r9
   86716:	46bb      	mov	fp, r7
   86718:	46d1      	mov	r9, sl
   8671a:	4637      	mov	r7, r6
   8671c:	469a      	mov	sl, r3
   8671e:	2401      	movs	r4, #1
   86720:	e005      	b.n	8672e <__mdiff+0x4e>
   86722:	db61      	blt.n	867e8 <__mdiff+0x108>
   86724:	2400      	movs	r4, #0
   86726:	f109 0714 	add.w	r7, r9, #20
   8672a:	f10a 0b14 	add.w	fp, sl, #20
   8672e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   86732:	f7ff fdbb 	bl	862ac <_Balloc>
   86736:	465d      	mov	r5, fp
   86738:	f04f 0800 	mov.w	r8, #0
   8673c:	f8d9 e010 	ldr.w	lr, [r9, #16]
   86740:	f8da 3010 	ldr.w	r3, [sl, #16]
   86744:	463e      	mov	r6, r7
   86746:	60c4      	str	r4, [r0, #12]
   86748:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8674c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   86750:	f100 0414 	add.w	r4, r0, #20
   86754:	f856 9b04 	ldr.w	r9, [r6], #4
   86758:	f855 2b04 	ldr.w	r2, [r5], #4
   8675c:	fa1f f389 	uxth.w	r3, r9
   86760:	4443      	add	r3, r8
   86762:	fa1f f882 	uxth.w	r8, r2
   86766:	0c12      	lsrs	r2, r2, #16
   86768:	eba3 0308 	sub.w	r3, r3, r8
   8676c:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   86770:	eb02 4223 	add.w	r2, r2, r3, asr #16
   86774:	b29b      	uxth	r3, r3
   86776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8677a:	45ac      	cmp	ip, r5
   8677c:	f844 3b04 	str.w	r3, [r4], #4
   86780:	ea4f 4822 	mov.w	r8, r2, asr #16
   86784:	d8e6      	bhi.n	86754 <__mdiff+0x74>
   86786:	42b7      	cmp	r7, r6
   86788:	d917      	bls.n	867ba <__mdiff+0xda>
   8678a:	46a4      	mov	ip, r4
   8678c:	4635      	mov	r5, r6
   8678e:	f855 3b04 	ldr.w	r3, [r5], #4
   86792:	b299      	uxth	r1, r3
   86794:	4441      	add	r1, r8
   86796:	140a      	asrs	r2, r1, #16
   86798:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8679c:	b289      	uxth	r1, r1
   8679e:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   867a2:	42af      	cmp	r7, r5
   867a4:	f84c 3b04 	str.w	r3, [ip], #4
   867a8:	ea4f 4822 	mov.w	r8, r2, asr #16
   867ac:	d8ef      	bhi.n	8678e <__mdiff+0xae>
   867ae:	43f6      	mvns	r6, r6
   867b0:	4437      	add	r7, r6
   867b2:	f027 0703 	bic.w	r7, r7, #3
   867b6:	3704      	adds	r7, #4
   867b8:	443c      	add	r4, r7
   867ba:	3c04      	subs	r4, #4
   867bc:	b92b      	cbnz	r3, 867ca <__mdiff+0xea>
   867be:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   867c2:	f10e 3eff 	add.w	lr, lr, #4294967295
   867c6:	2b00      	cmp	r3, #0
   867c8:	d0f9      	beq.n	867be <__mdiff+0xde>
   867ca:	f8c0 e010 	str.w	lr, [r0, #16]
   867ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   867d2:	2100      	movs	r1, #0
   867d4:	f7ff fd6a 	bl	862ac <_Balloc>
   867d8:	2201      	movs	r2, #1
   867da:	2300      	movs	r3, #0
   867dc:	6102      	str	r2, [r0, #16]
   867de:	6143      	str	r3, [r0, #20]
   867e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   867e4:	46b3      	mov	fp, r6
   867e6:	e7a2      	b.n	8672e <__mdiff+0x4e>
   867e8:	464b      	mov	r3, r9
   867ea:	f109 0b14 	add.w	fp, r9, #20
   867ee:	f102 0714 	add.w	r7, r2, #20
   867f2:	4691      	mov	r9, r2
   867f4:	2401      	movs	r4, #1
   867f6:	469a      	mov	sl, r3
   867f8:	e799      	b.n	8672e <__mdiff+0x4e>
   867fa:	bf00      	nop

000867fc <__d2b>:
   867fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   867fe:	2101      	movs	r1, #1
   86800:	b083      	sub	sp, #12
   86802:	461c      	mov	r4, r3
   86804:	f3c3 550a 	ubfx	r5, r3, #20, #11
   86808:	4616      	mov	r6, r2
   8680a:	f7ff fd4f 	bl	862ac <_Balloc>
   8680e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   86812:	4607      	mov	r7, r0
   86814:	b10d      	cbz	r5, 8681a <__d2b+0x1e>
   86816:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8681a:	9401      	str	r4, [sp, #4]
   8681c:	b306      	cbz	r6, 86860 <__d2b+0x64>
   8681e:	a802      	add	r0, sp, #8
   86820:	f840 6d08 	str.w	r6, [r0, #-8]!
   86824:	f7ff fdd4 	bl	863d0 <__lo0bits>
   86828:	2800      	cmp	r0, #0
   8682a:	d130      	bne.n	8688e <__d2b+0x92>
   8682c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   86830:	617a      	str	r2, [r7, #20]
   86832:	2b00      	cmp	r3, #0
   86834:	bf0c      	ite	eq
   86836:	2101      	moveq	r1, #1
   86838:	2102      	movne	r1, #2
   8683a:	61bb      	str	r3, [r7, #24]
   8683c:	6139      	str	r1, [r7, #16]
   8683e:	b9d5      	cbnz	r5, 86876 <__d2b+0x7a>
   86840:	9a08      	ldr	r2, [sp, #32]
   86842:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   86846:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8684a:	6010      	str	r0, [r2, #0]
   8684c:	6918      	ldr	r0, [r3, #16]
   8684e:	f7ff fd9f 	bl	86390 <__hi0bits>
   86852:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86854:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   86858:	6018      	str	r0, [r3, #0]
   8685a:	4638      	mov	r0, r7
   8685c:	b003      	add	sp, #12
   8685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86860:	a801      	add	r0, sp, #4
   86862:	f7ff fdb5 	bl	863d0 <__lo0bits>
   86866:	2201      	movs	r2, #1
   86868:	9b01      	ldr	r3, [sp, #4]
   8686a:	4611      	mov	r1, r2
   8686c:	3020      	adds	r0, #32
   8686e:	613a      	str	r2, [r7, #16]
   86870:	617b      	str	r3, [r7, #20]
   86872:	2d00      	cmp	r5, #0
   86874:	d0e4      	beq.n	86840 <__d2b+0x44>
   86876:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8687a:	9a08      	ldr	r2, [sp, #32]
   8687c:	4403      	add	r3, r0
   8687e:	6013      	str	r3, [r2, #0]
   86880:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86882:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   86886:	6018      	str	r0, [r3, #0]
   86888:	4638      	mov	r0, r7
   8688a:	b003      	add	sp, #12
   8688c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8688e:	9b01      	ldr	r3, [sp, #4]
   86890:	f1c0 0220 	rsb	r2, r0, #32
   86894:	9900      	ldr	r1, [sp, #0]
   86896:	fa03 f202 	lsl.w	r2, r3, r2
   8689a:	430a      	orrs	r2, r1
   8689c:	40c3      	lsrs	r3, r0
   8689e:	9301      	str	r3, [sp, #4]
   868a0:	617a      	str	r2, [r7, #20]
   868a2:	e7c6      	b.n	86832 <__d2b+0x36>

000868a4 <_sbrk_r>:
   868a4:	b538      	push	{r3, r4, r5, lr}
   868a6:	2300      	movs	r3, #0
   868a8:	4c06      	ldr	r4, [pc, #24]	; (868c4 <_sbrk_r+0x20>)
   868aa:	4605      	mov	r5, r0
   868ac:	4608      	mov	r0, r1
   868ae:	6023      	str	r3, [r4, #0]
   868b0:	f7fc fbe6 	bl	83080 <_sbrk>
   868b4:	1c43      	adds	r3, r0, #1
   868b6:	d000      	beq.n	868ba <_sbrk_r+0x16>
   868b8:	bd38      	pop	{r3, r4, r5, pc}
   868ba:	6823      	ldr	r3, [r4, #0]
   868bc:	2b00      	cmp	r3, #0
   868be:	d0fb      	beq.n	868b8 <_sbrk_r+0x14>
   868c0:	602b      	str	r3, [r5, #0]
   868c2:	bd38      	pop	{r3, r4, r5, pc}
   868c4:	2007105c 	.word	0x2007105c

000868c8 <__ssprint_r>:
   868c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   868cc:	6893      	ldr	r3, [r2, #8]
   868ce:	b083      	sub	sp, #12
   868d0:	4690      	mov	r8, r2
   868d2:	2b00      	cmp	r3, #0
   868d4:	d070      	beq.n	869b8 <__ssprint_r+0xf0>
   868d6:	4682      	mov	sl, r0
   868d8:	460c      	mov	r4, r1
   868da:	6817      	ldr	r7, [r2, #0]
   868dc:	688d      	ldr	r5, [r1, #8]
   868de:	6808      	ldr	r0, [r1, #0]
   868e0:	e042      	b.n	86968 <__ssprint_r+0xa0>
   868e2:	89a3      	ldrh	r3, [r4, #12]
   868e4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   868e8:	d02e      	beq.n	86948 <__ssprint_r+0x80>
   868ea:	6965      	ldr	r5, [r4, #20]
   868ec:	6921      	ldr	r1, [r4, #16]
   868ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   868f2:	eba0 0b01 	sub.w	fp, r0, r1
   868f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   868fa:	f10b 0001 	add.w	r0, fp, #1
   868fe:	106d      	asrs	r5, r5, #1
   86900:	4430      	add	r0, r6
   86902:	42a8      	cmp	r0, r5
   86904:	462a      	mov	r2, r5
   86906:	bf84      	itt	hi
   86908:	4605      	movhi	r5, r0
   8690a:	462a      	movhi	r2, r5
   8690c:	055b      	lsls	r3, r3, #21
   8690e:	d538      	bpl.n	86982 <__ssprint_r+0xba>
   86910:	4611      	mov	r1, r2
   86912:	4650      	mov	r0, sl
   86914:	f7ff f9d6 	bl	85cc4 <_malloc_r>
   86918:	2800      	cmp	r0, #0
   8691a:	d03c      	beq.n	86996 <__ssprint_r+0xce>
   8691c:	465a      	mov	r2, fp
   8691e:	6921      	ldr	r1, [r4, #16]
   86920:	9001      	str	r0, [sp, #4]
   86922:	f7fc fe43 	bl	835ac <memcpy>
   86926:	89a2      	ldrh	r2, [r4, #12]
   86928:	9b01      	ldr	r3, [sp, #4]
   8692a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8692e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   86932:	81a2      	strh	r2, [r4, #12]
   86934:	eba5 020b 	sub.w	r2, r5, fp
   86938:	eb03 000b 	add.w	r0, r3, fp
   8693c:	6165      	str	r5, [r4, #20]
   8693e:	46b3      	mov	fp, r6
   86940:	4635      	mov	r5, r6
   86942:	6123      	str	r3, [r4, #16]
   86944:	6020      	str	r0, [r4, #0]
   86946:	60a2      	str	r2, [r4, #8]
   86948:	465a      	mov	r2, fp
   8694a:	4649      	mov	r1, r9
   8694c:	f000 fa18 	bl	86d80 <memmove>
   86950:	f8d8 3008 	ldr.w	r3, [r8, #8]
   86954:	68a2      	ldr	r2, [r4, #8]
   86956:	6820      	ldr	r0, [r4, #0]
   86958:	1b55      	subs	r5, r2, r5
   8695a:	4458      	add	r0, fp
   8695c:	1b9e      	subs	r6, r3, r6
   8695e:	60a5      	str	r5, [r4, #8]
   86960:	6020      	str	r0, [r4, #0]
   86962:	f8c8 6008 	str.w	r6, [r8, #8]
   86966:	b33e      	cbz	r6, 869b8 <__ssprint_r+0xf0>
   86968:	687e      	ldr	r6, [r7, #4]
   8696a:	463b      	mov	r3, r7
   8696c:	3708      	adds	r7, #8
   8696e:	2e00      	cmp	r6, #0
   86970:	d0fa      	beq.n	86968 <__ssprint_r+0xa0>
   86972:	42ae      	cmp	r6, r5
   86974:	f8d3 9000 	ldr.w	r9, [r3]
   86978:	46ab      	mov	fp, r5
   8697a:	d2b2      	bcs.n	868e2 <__ssprint_r+0x1a>
   8697c:	4635      	mov	r5, r6
   8697e:	46b3      	mov	fp, r6
   86980:	e7e2      	b.n	86948 <__ssprint_r+0x80>
   86982:	4650      	mov	r0, sl
   86984:	f000 fa60 	bl	86e48 <_realloc_r>
   86988:	4603      	mov	r3, r0
   8698a:	2800      	cmp	r0, #0
   8698c:	d1d2      	bne.n	86934 <__ssprint_r+0x6c>
   8698e:	6921      	ldr	r1, [r4, #16]
   86990:	4650      	mov	r0, sl
   86992:	f000 f8f9 	bl	86b88 <_free_r>
   86996:	230c      	movs	r3, #12
   86998:	2200      	movs	r2, #0
   8699a:	f04f 30ff 	mov.w	r0, #4294967295
   8699e:	f8ca 3000 	str.w	r3, [sl]
   869a2:	89a3      	ldrh	r3, [r4, #12]
   869a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   869a8:	81a3      	strh	r3, [r4, #12]
   869aa:	f8c8 2008 	str.w	r2, [r8, #8]
   869ae:	f8c8 2004 	str.w	r2, [r8, #4]
   869b2:	b003      	add	sp, #12
   869b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   869b8:	2000      	movs	r0, #0
   869ba:	f8c8 0004 	str.w	r0, [r8, #4]
   869be:	b003      	add	sp, #12
   869c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000869c4 <__register_exitproc>:
   869c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   869c8:	4d2c      	ldr	r5, [pc, #176]	; (86a7c <__register_exitproc+0xb8>)
   869ca:	4606      	mov	r6, r0
   869cc:	6828      	ldr	r0, [r5, #0]
   869ce:	4698      	mov	r8, r3
   869d0:	460f      	mov	r7, r1
   869d2:	4691      	mov	r9, r2
   869d4:	f7ff f972 	bl	85cbc <__retarget_lock_acquire_recursive>
   869d8:	4b29      	ldr	r3, [pc, #164]	; (86a80 <__register_exitproc+0xbc>)
   869da:	681c      	ldr	r4, [r3, #0]
   869dc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   869e0:	2b00      	cmp	r3, #0
   869e2:	d03e      	beq.n	86a62 <__register_exitproc+0x9e>
   869e4:	685a      	ldr	r2, [r3, #4]
   869e6:	2a1f      	cmp	r2, #31
   869e8:	dc1c      	bgt.n	86a24 <__register_exitproc+0x60>
   869ea:	f102 0e01 	add.w	lr, r2, #1
   869ee:	b176      	cbz	r6, 86a0e <__register_exitproc+0x4a>
   869f0:	2101      	movs	r1, #1
   869f2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   869f6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   869fa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   869fe:	4091      	lsls	r1, r2
   86a00:	4308      	orrs	r0, r1
   86a02:	2e02      	cmp	r6, #2
   86a04:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   86a08:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   86a0c:	d023      	beq.n	86a56 <__register_exitproc+0x92>
   86a0e:	3202      	adds	r2, #2
   86a10:	f8c3 e004 	str.w	lr, [r3, #4]
   86a14:	6828      	ldr	r0, [r5, #0]
   86a16:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   86a1a:	f7ff f951 	bl	85cc0 <__retarget_lock_release_recursive>
   86a1e:	2000      	movs	r0, #0
   86a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86a24:	4b17      	ldr	r3, [pc, #92]	; (86a84 <__register_exitproc+0xc0>)
   86a26:	b30b      	cbz	r3, 86a6c <__register_exitproc+0xa8>
   86a28:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86a2c:	f3af 8000 	nop.w
   86a30:	4603      	mov	r3, r0
   86a32:	b1d8      	cbz	r0, 86a6c <__register_exitproc+0xa8>
   86a34:	2000      	movs	r0, #0
   86a36:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   86a3a:	f04f 0e01 	mov.w	lr, #1
   86a3e:	6058      	str	r0, [r3, #4]
   86a40:	6019      	str	r1, [r3, #0]
   86a42:	4602      	mov	r2, r0
   86a44:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   86a48:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   86a4c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   86a50:	2e00      	cmp	r6, #0
   86a52:	d0dc      	beq.n	86a0e <__register_exitproc+0x4a>
   86a54:	e7cc      	b.n	869f0 <__register_exitproc+0x2c>
   86a56:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   86a5a:	4301      	orrs	r1, r0
   86a5c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   86a60:	e7d5      	b.n	86a0e <__register_exitproc+0x4a>
   86a62:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   86a66:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   86a6a:	e7bb      	b.n	869e4 <__register_exitproc+0x20>
   86a6c:	6828      	ldr	r0, [r5, #0]
   86a6e:	f7ff f927 	bl	85cc0 <__retarget_lock_release_recursive>
   86a72:	f04f 30ff 	mov.w	r0, #4294967295
   86a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86a7a:	bf00      	nop
   86a7c:	200705d0 	.word	0x200705d0
   86a80:	00087fa4 	.word	0x00087fa4
   86a84:	00000000 	.word	0x00000000

00086a88 <_calloc_r>:
   86a88:	b510      	push	{r4, lr}
   86a8a:	fb02 f101 	mul.w	r1, r2, r1
   86a8e:	f7ff f919 	bl	85cc4 <_malloc_r>
   86a92:	4604      	mov	r4, r0
   86a94:	b1d8      	cbz	r0, 86ace <_calloc_r+0x46>
   86a96:	f850 2c04 	ldr.w	r2, [r0, #-4]
   86a9a:	f022 0203 	bic.w	r2, r2, #3
   86a9e:	3a04      	subs	r2, #4
   86aa0:	2a24      	cmp	r2, #36	; 0x24
   86aa2:	d818      	bhi.n	86ad6 <_calloc_r+0x4e>
   86aa4:	2a13      	cmp	r2, #19
   86aa6:	d914      	bls.n	86ad2 <_calloc_r+0x4a>
   86aa8:	2300      	movs	r3, #0
   86aaa:	2a1b      	cmp	r2, #27
   86aac:	6003      	str	r3, [r0, #0]
   86aae:	6043      	str	r3, [r0, #4]
   86ab0:	d916      	bls.n	86ae0 <_calloc_r+0x58>
   86ab2:	2a24      	cmp	r2, #36	; 0x24
   86ab4:	6083      	str	r3, [r0, #8]
   86ab6:	60c3      	str	r3, [r0, #12]
   86ab8:	bf11      	iteee	ne
   86aba:	f100 0210 	addne.w	r2, r0, #16
   86abe:	6103      	streq	r3, [r0, #16]
   86ac0:	6143      	streq	r3, [r0, #20]
   86ac2:	f100 0218 	addeq.w	r2, r0, #24
   86ac6:	2300      	movs	r3, #0
   86ac8:	6013      	str	r3, [r2, #0]
   86aca:	6053      	str	r3, [r2, #4]
   86acc:	6093      	str	r3, [r2, #8]
   86ace:	4620      	mov	r0, r4
   86ad0:	bd10      	pop	{r4, pc}
   86ad2:	4602      	mov	r2, r0
   86ad4:	e7f7      	b.n	86ac6 <_calloc_r+0x3e>
   86ad6:	2100      	movs	r1, #0
   86ad8:	f7fc fdde 	bl	83698 <memset>
   86adc:	4620      	mov	r0, r4
   86ade:	bd10      	pop	{r4, pc}
   86ae0:	f100 0208 	add.w	r2, r0, #8
   86ae4:	e7ef      	b.n	86ac6 <_calloc_r+0x3e>
   86ae6:	bf00      	nop

00086ae8 <_malloc_trim_r>:
   86ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86aea:	460c      	mov	r4, r1
   86aec:	4f23      	ldr	r7, [pc, #140]	; (86b7c <_malloc_trim_r+0x94>)
   86aee:	4606      	mov	r6, r0
   86af0:	f7ff fbd0 	bl	86294 <__malloc_lock>
   86af4:	68bb      	ldr	r3, [r7, #8]
   86af6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   86afa:	685d      	ldr	r5, [r3, #4]
   86afc:	310f      	adds	r1, #15
   86afe:	f025 0503 	bic.w	r5, r5, #3
   86b02:	4429      	add	r1, r5
   86b04:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   86b08:	f021 010f 	bic.w	r1, r1, #15
   86b0c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   86b10:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   86b14:	db07      	blt.n	86b26 <_malloc_trim_r+0x3e>
   86b16:	2100      	movs	r1, #0
   86b18:	4630      	mov	r0, r6
   86b1a:	f7ff fec3 	bl	868a4 <_sbrk_r>
   86b1e:	68bb      	ldr	r3, [r7, #8]
   86b20:	442b      	add	r3, r5
   86b22:	4298      	cmp	r0, r3
   86b24:	d004      	beq.n	86b30 <_malloc_trim_r+0x48>
   86b26:	4630      	mov	r0, r6
   86b28:	f7ff fbba 	bl	862a0 <__malloc_unlock>
   86b2c:	2000      	movs	r0, #0
   86b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86b30:	4261      	negs	r1, r4
   86b32:	4630      	mov	r0, r6
   86b34:	f7ff feb6 	bl	868a4 <_sbrk_r>
   86b38:	3001      	adds	r0, #1
   86b3a:	d00d      	beq.n	86b58 <_malloc_trim_r+0x70>
   86b3c:	4b10      	ldr	r3, [pc, #64]	; (86b80 <_malloc_trim_r+0x98>)
   86b3e:	68ba      	ldr	r2, [r7, #8]
   86b40:	6819      	ldr	r1, [r3, #0]
   86b42:	1b2d      	subs	r5, r5, r4
   86b44:	f045 0501 	orr.w	r5, r5, #1
   86b48:	4630      	mov	r0, r6
   86b4a:	1b09      	subs	r1, r1, r4
   86b4c:	6055      	str	r5, [r2, #4]
   86b4e:	6019      	str	r1, [r3, #0]
   86b50:	f7ff fba6 	bl	862a0 <__malloc_unlock>
   86b54:	2001      	movs	r0, #1
   86b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86b58:	2100      	movs	r1, #0
   86b5a:	4630      	mov	r0, r6
   86b5c:	f7ff fea2 	bl	868a4 <_sbrk_r>
   86b60:	68ba      	ldr	r2, [r7, #8]
   86b62:	1a83      	subs	r3, r0, r2
   86b64:	2b0f      	cmp	r3, #15
   86b66:	ddde      	ble.n	86b26 <_malloc_trim_r+0x3e>
   86b68:	4c06      	ldr	r4, [pc, #24]	; (86b84 <_malloc_trim_r+0x9c>)
   86b6a:	4905      	ldr	r1, [pc, #20]	; (86b80 <_malloc_trim_r+0x98>)
   86b6c:	6824      	ldr	r4, [r4, #0]
   86b6e:	f043 0301 	orr.w	r3, r3, #1
   86b72:	1b00      	subs	r0, r0, r4
   86b74:	6053      	str	r3, [r2, #4]
   86b76:	6008      	str	r0, [r1, #0]
   86b78:	e7d5      	b.n	86b26 <_malloc_trim_r+0x3e>
   86b7a:	bf00      	nop
   86b7c:	200705d4 	.word	0x200705d4
   86b80:	20070fb4 	.word	0x20070fb4
   86b84:	200709dc 	.word	0x200709dc

00086b88 <_free_r>:
   86b88:	2900      	cmp	r1, #0
   86b8a:	d044      	beq.n	86c16 <_free_r+0x8e>
   86b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86b90:	460d      	mov	r5, r1
   86b92:	4680      	mov	r8, r0
   86b94:	f7ff fb7e 	bl	86294 <__malloc_lock>
   86b98:	f855 7c04 	ldr.w	r7, [r5, #-4]
   86b9c:	4969      	ldr	r1, [pc, #420]	; (86d44 <_free_r+0x1bc>)
   86b9e:	f1a5 0408 	sub.w	r4, r5, #8
   86ba2:	f027 0301 	bic.w	r3, r7, #1
   86ba6:	18e2      	adds	r2, r4, r3
   86ba8:	688e      	ldr	r6, [r1, #8]
   86baa:	6850      	ldr	r0, [r2, #4]
   86bac:	42b2      	cmp	r2, r6
   86bae:	f020 0003 	bic.w	r0, r0, #3
   86bb2:	d05e      	beq.n	86c72 <_free_r+0xea>
   86bb4:	07fe      	lsls	r6, r7, #31
   86bb6:	6050      	str	r0, [r2, #4]
   86bb8:	d40b      	bmi.n	86bd2 <_free_r+0x4a>
   86bba:	f855 7c08 	ldr.w	r7, [r5, #-8]
   86bbe:	f101 0e08 	add.w	lr, r1, #8
   86bc2:	1be4      	subs	r4, r4, r7
   86bc4:	68a5      	ldr	r5, [r4, #8]
   86bc6:	443b      	add	r3, r7
   86bc8:	4575      	cmp	r5, lr
   86bca:	d06d      	beq.n	86ca8 <_free_r+0x120>
   86bcc:	68e7      	ldr	r7, [r4, #12]
   86bce:	60ef      	str	r7, [r5, #12]
   86bd0:	60bd      	str	r5, [r7, #8]
   86bd2:	1815      	adds	r5, r2, r0
   86bd4:	686d      	ldr	r5, [r5, #4]
   86bd6:	07ed      	lsls	r5, r5, #31
   86bd8:	d53e      	bpl.n	86c58 <_free_r+0xd0>
   86bda:	f043 0201 	orr.w	r2, r3, #1
   86bde:	6062      	str	r2, [r4, #4]
   86be0:	50e3      	str	r3, [r4, r3]
   86be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86be6:	d217      	bcs.n	86c18 <_free_r+0x90>
   86be8:	2201      	movs	r2, #1
   86bea:	08db      	lsrs	r3, r3, #3
   86bec:	1098      	asrs	r0, r3, #2
   86bee:	684d      	ldr	r5, [r1, #4]
   86bf0:	4413      	add	r3, r2
   86bf2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   86bf6:	4082      	lsls	r2, r0
   86bf8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   86bfc:	432a      	orrs	r2, r5
   86bfe:	3808      	subs	r0, #8
   86c00:	60e0      	str	r0, [r4, #12]
   86c02:	60a7      	str	r7, [r4, #8]
   86c04:	604a      	str	r2, [r1, #4]
   86c06:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   86c0a:	60fc      	str	r4, [r7, #12]
   86c0c:	4640      	mov	r0, r8
   86c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86c12:	f7ff bb45 	b.w	862a0 <__malloc_unlock>
   86c16:	4770      	bx	lr
   86c18:	0a5a      	lsrs	r2, r3, #9
   86c1a:	2a04      	cmp	r2, #4
   86c1c:	d852      	bhi.n	86cc4 <_free_r+0x13c>
   86c1e:	099a      	lsrs	r2, r3, #6
   86c20:	f102 0739 	add.w	r7, r2, #57	; 0x39
   86c24:	00ff      	lsls	r7, r7, #3
   86c26:	f102 0538 	add.w	r5, r2, #56	; 0x38
   86c2a:	19c8      	adds	r0, r1, r7
   86c2c:	59ca      	ldr	r2, [r1, r7]
   86c2e:	3808      	subs	r0, #8
   86c30:	4290      	cmp	r0, r2
   86c32:	d04f      	beq.n	86cd4 <_free_r+0x14c>
   86c34:	6851      	ldr	r1, [r2, #4]
   86c36:	f021 0103 	bic.w	r1, r1, #3
   86c3a:	428b      	cmp	r3, r1
   86c3c:	d232      	bcs.n	86ca4 <_free_r+0x11c>
   86c3e:	6892      	ldr	r2, [r2, #8]
   86c40:	4290      	cmp	r0, r2
   86c42:	d1f7      	bne.n	86c34 <_free_r+0xac>
   86c44:	68c3      	ldr	r3, [r0, #12]
   86c46:	60a0      	str	r0, [r4, #8]
   86c48:	60e3      	str	r3, [r4, #12]
   86c4a:	609c      	str	r4, [r3, #8]
   86c4c:	60c4      	str	r4, [r0, #12]
   86c4e:	4640      	mov	r0, r8
   86c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86c54:	f7ff bb24 	b.w	862a0 <__malloc_unlock>
   86c58:	6895      	ldr	r5, [r2, #8]
   86c5a:	4f3b      	ldr	r7, [pc, #236]	; (86d48 <_free_r+0x1c0>)
   86c5c:	4403      	add	r3, r0
   86c5e:	42bd      	cmp	r5, r7
   86c60:	d040      	beq.n	86ce4 <_free_r+0x15c>
   86c62:	68d0      	ldr	r0, [r2, #12]
   86c64:	f043 0201 	orr.w	r2, r3, #1
   86c68:	60e8      	str	r0, [r5, #12]
   86c6a:	6085      	str	r5, [r0, #8]
   86c6c:	6062      	str	r2, [r4, #4]
   86c6e:	50e3      	str	r3, [r4, r3]
   86c70:	e7b7      	b.n	86be2 <_free_r+0x5a>
   86c72:	07ff      	lsls	r7, r7, #31
   86c74:	4403      	add	r3, r0
   86c76:	d407      	bmi.n	86c88 <_free_r+0x100>
   86c78:	f855 5c08 	ldr.w	r5, [r5, #-8]
   86c7c:	1b64      	subs	r4, r4, r5
   86c7e:	68e2      	ldr	r2, [r4, #12]
   86c80:	68a0      	ldr	r0, [r4, #8]
   86c82:	442b      	add	r3, r5
   86c84:	60c2      	str	r2, [r0, #12]
   86c86:	6090      	str	r0, [r2, #8]
   86c88:	4a30      	ldr	r2, [pc, #192]	; (86d4c <_free_r+0x1c4>)
   86c8a:	f043 0001 	orr.w	r0, r3, #1
   86c8e:	6812      	ldr	r2, [r2, #0]
   86c90:	6060      	str	r0, [r4, #4]
   86c92:	4293      	cmp	r3, r2
   86c94:	608c      	str	r4, [r1, #8]
   86c96:	d3b9      	bcc.n	86c0c <_free_r+0x84>
   86c98:	4b2d      	ldr	r3, [pc, #180]	; (86d50 <_free_r+0x1c8>)
   86c9a:	4640      	mov	r0, r8
   86c9c:	6819      	ldr	r1, [r3, #0]
   86c9e:	f7ff ff23 	bl	86ae8 <_malloc_trim_r>
   86ca2:	e7b3      	b.n	86c0c <_free_r+0x84>
   86ca4:	4610      	mov	r0, r2
   86ca6:	e7cd      	b.n	86c44 <_free_r+0xbc>
   86ca8:	1811      	adds	r1, r2, r0
   86caa:	6849      	ldr	r1, [r1, #4]
   86cac:	07c9      	lsls	r1, r1, #31
   86cae:	d444      	bmi.n	86d3a <_free_r+0x1b2>
   86cb0:	6891      	ldr	r1, [r2, #8]
   86cb2:	4403      	add	r3, r0
   86cb4:	68d2      	ldr	r2, [r2, #12]
   86cb6:	f043 0001 	orr.w	r0, r3, #1
   86cba:	60ca      	str	r2, [r1, #12]
   86cbc:	6091      	str	r1, [r2, #8]
   86cbe:	6060      	str	r0, [r4, #4]
   86cc0:	50e3      	str	r3, [r4, r3]
   86cc2:	e7a3      	b.n	86c0c <_free_r+0x84>
   86cc4:	2a14      	cmp	r2, #20
   86cc6:	d816      	bhi.n	86cf6 <_free_r+0x16e>
   86cc8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   86ccc:	00ff      	lsls	r7, r7, #3
   86cce:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   86cd2:	e7aa      	b.n	86c2a <_free_r+0xa2>
   86cd4:	2301      	movs	r3, #1
   86cd6:	10aa      	asrs	r2, r5, #2
   86cd8:	684d      	ldr	r5, [r1, #4]
   86cda:	4093      	lsls	r3, r2
   86cdc:	432b      	orrs	r3, r5
   86cde:	604b      	str	r3, [r1, #4]
   86ce0:	4603      	mov	r3, r0
   86ce2:	e7b0      	b.n	86c46 <_free_r+0xbe>
   86ce4:	f043 0201 	orr.w	r2, r3, #1
   86ce8:	614c      	str	r4, [r1, #20]
   86cea:	610c      	str	r4, [r1, #16]
   86cec:	60e5      	str	r5, [r4, #12]
   86cee:	60a5      	str	r5, [r4, #8]
   86cf0:	6062      	str	r2, [r4, #4]
   86cf2:	50e3      	str	r3, [r4, r3]
   86cf4:	e78a      	b.n	86c0c <_free_r+0x84>
   86cf6:	2a54      	cmp	r2, #84	; 0x54
   86cf8:	d806      	bhi.n	86d08 <_free_r+0x180>
   86cfa:	0b1a      	lsrs	r2, r3, #12
   86cfc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   86d00:	00ff      	lsls	r7, r7, #3
   86d02:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   86d06:	e790      	b.n	86c2a <_free_r+0xa2>
   86d08:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86d0c:	d806      	bhi.n	86d1c <_free_r+0x194>
   86d0e:	0bda      	lsrs	r2, r3, #15
   86d10:	f102 0778 	add.w	r7, r2, #120	; 0x78
   86d14:	00ff      	lsls	r7, r7, #3
   86d16:	f102 0577 	add.w	r5, r2, #119	; 0x77
   86d1a:	e786      	b.n	86c2a <_free_r+0xa2>
   86d1c:	f240 5054 	movw	r0, #1364	; 0x554
   86d20:	4282      	cmp	r2, r0
   86d22:	d806      	bhi.n	86d32 <_free_r+0x1aa>
   86d24:	0c9a      	lsrs	r2, r3, #18
   86d26:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   86d2a:	00ff      	lsls	r7, r7, #3
   86d2c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   86d30:	e77b      	b.n	86c2a <_free_r+0xa2>
   86d32:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   86d36:	257e      	movs	r5, #126	; 0x7e
   86d38:	e777      	b.n	86c2a <_free_r+0xa2>
   86d3a:	f043 0101 	orr.w	r1, r3, #1
   86d3e:	6061      	str	r1, [r4, #4]
   86d40:	6013      	str	r3, [r2, #0]
   86d42:	e763      	b.n	86c0c <_free_r+0x84>
   86d44:	200705d4 	.word	0x200705d4
   86d48:	200705dc 	.word	0x200705dc
   86d4c:	200709e0 	.word	0x200709e0
   86d50:	20070fe4 	.word	0x20070fe4

00086d54 <__ascii_mbtowc>:
   86d54:	b082      	sub	sp, #8
   86d56:	b149      	cbz	r1, 86d6c <__ascii_mbtowc+0x18>
   86d58:	b15a      	cbz	r2, 86d72 <__ascii_mbtowc+0x1e>
   86d5a:	b16b      	cbz	r3, 86d78 <__ascii_mbtowc+0x24>
   86d5c:	7813      	ldrb	r3, [r2, #0]
   86d5e:	600b      	str	r3, [r1, #0]
   86d60:	7812      	ldrb	r2, [r2, #0]
   86d62:	1c10      	adds	r0, r2, #0
   86d64:	bf18      	it	ne
   86d66:	2001      	movne	r0, #1
   86d68:	b002      	add	sp, #8
   86d6a:	4770      	bx	lr
   86d6c:	a901      	add	r1, sp, #4
   86d6e:	2a00      	cmp	r2, #0
   86d70:	d1f3      	bne.n	86d5a <__ascii_mbtowc+0x6>
   86d72:	4610      	mov	r0, r2
   86d74:	b002      	add	sp, #8
   86d76:	4770      	bx	lr
   86d78:	f06f 0001 	mvn.w	r0, #1
   86d7c:	e7f4      	b.n	86d68 <__ascii_mbtowc+0x14>
   86d7e:	bf00      	nop

00086d80 <memmove>:
   86d80:	4288      	cmp	r0, r1
   86d82:	b5f0      	push	{r4, r5, r6, r7, lr}
   86d84:	d90d      	bls.n	86da2 <memmove+0x22>
   86d86:	188b      	adds	r3, r1, r2
   86d88:	4298      	cmp	r0, r3
   86d8a:	d20a      	bcs.n	86da2 <memmove+0x22>
   86d8c:	1884      	adds	r4, r0, r2
   86d8e:	2a00      	cmp	r2, #0
   86d90:	d051      	beq.n	86e36 <memmove+0xb6>
   86d92:	4622      	mov	r2, r4
   86d94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   86d98:	4299      	cmp	r1, r3
   86d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   86d9e:	d1f9      	bne.n	86d94 <memmove+0x14>
   86da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86da2:	2a0f      	cmp	r2, #15
   86da4:	d948      	bls.n	86e38 <memmove+0xb8>
   86da6:	ea41 0300 	orr.w	r3, r1, r0
   86daa:	079b      	lsls	r3, r3, #30
   86dac:	d146      	bne.n	86e3c <memmove+0xbc>
   86dae:	4615      	mov	r5, r2
   86db0:	f100 0410 	add.w	r4, r0, #16
   86db4:	f101 0310 	add.w	r3, r1, #16
   86db8:	f853 6c10 	ldr.w	r6, [r3, #-16]
   86dbc:	3d10      	subs	r5, #16
   86dbe:	f844 6c10 	str.w	r6, [r4, #-16]
   86dc2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   86dc6:	2d0f      	cmp	r5, #15
   86dc8:	f844 6c0c 	str.w	r6, [r4, #-12]
   86dcc:	f853 6c08 	ldr.w	r6, [r3, #-8]
   86dd0:	f104 0410 	add.w	r4, r4, #16
   86dd4:	f844 6c18 	str.w	r6, [r4, #-24]
   86dd8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   86ddc:	f103 0310 	add.w	r3, r3, #16
   86de0:	f844 6c14 	str.w	r6, [r4, #-20]
   86de4:	d8e8      	bhi.n	86db8 <memmove+0x38>
   86de6:	f1a2 0310 	sub.w	r3, r2, #16
   86dea:	f023 030f 	bic.w	r3, r3, #15
   86dee:	f002 0e0f 	and.w	lr, r2, #15
   86df2:	3310      	adds	r3, #16
   86df4:	f1be 0f03 	cmp.w	lr, #3
   86df8:	4419      	add	r1, r3
   86dfa:	4403      	add	r3, r0
   86dfc:	d921      	bls.n	86e42 <memmove+0xc2>
   86dfe:	460e      	mov	r6, r1
   86e00:	4674      	mov	r4, lr
   86e02:	1f1d      	subs	r5, r3, #4
   86e04:	f856 7b04 	ldr.w	r7, [r6], #4
   86e08:	3c04      	subs	r4, #4
   86e0a:	2c03      	cmp	r4, #3
   86e0c:	f845 7f04 	str.w	r7, [r5, #4]!
   86e10:	d8f8      	bhi.n	86e04 <memmove+0x84>
   86e12:	f1ae 0404 	sub.w	r4, lr, #4
   86e16:	f024 0403 	bic.w	r4, r4, #3
   86e1a:	3404      	adds	r4, #4
   86e1c:	4421      	add	r1, r4
   86e1e:	4423      	add	r3, r4
   86e20:	f002 0203 	and.w	r2, r2, #3
   86e24:	b162      	cbz	r2, 86e40 <memmove+0xc0>
   86e26:	3b01      	subs	r3, #1
   86e28:	440a      	add	r2, r1
   86e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
   86e2e:	428a      	cmp	r2, r1
   86e30:	f803 4f01 	strb.w	r4, [r3, #1]!
   86e34:	d1f9      	bne.n	86e2a <memmove+0xaa>
   86e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86e38:	4603      	mov	r3, r0
   86e3a:	e7f3      	b.n	86e24 <memmove+0xa4>
   86e3c:	4603      	mov	r3, r0
   86e3e:	e7f2      	b.n	86e26 <memmove+0xa6>
   86e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86e42:	4672      	mov	r2, lr
   86e44:	e7ee      	b.n	86e24 <memmove+0xa4>
   86e46:	bf00      	nop

00086e48 <_realloc_r>:
   86e48:	2900      	cmp	r1, #0
   86e4a:	f000 8094 	beq.w	86f76 <_realloc_r+0x12e>
   86e4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86e52:	460c      	mov	r4, r1
   86e54:	4615      	mov	r5, r2
   86e56:	b083      	sub	sp, #12
   86e58:	4680      	mov	r8, r0
   86e5a:	f105 060b 	add.w	r6, r5, #11
   86e5e:	f7ff fa19 	bl	86294 <__malloc_lock>
   86e62:	f854 ec04 	ldr.w	lr, [r4, #-4]
   86e66:	2e16      	cmp	r6, #22
   86e68:	f02e 0703 	bic.w	r7, lr, #3
   86e6c:	f1a4 0908 	sub.w	r9, r4, #8
   86e70:	d83c      	bhi.n	86eec <_realloc_r+0xa4>
   86e72:	2210      	movs	r2, #16
   86e74:	4616      	mov	r6, r2
   86e76:	42b5      	cmp	r5, r6
   86e78:	d83d      	bhi.n	86ef6 <_realloc_r+0xae>
   86e7a:	4297      	cmp	r7, r2
   86e7c:	da43      	bge.n	86f06 <_realloc_r+0xbe>
   86e7e:	4bc6      	ldr	r3, [pc, #792]	; (87198 <_realloc_r+0x350>)
   86e80:	eb09 0007 	add.w	r0, r9, r7
   86e84:	6899      	ldr	r1, [r3, #8]
   86e86:	4288      	cmp	r0, r1
   86e88:	f000 80c3 	beq.w	87012 <_realloc_r+0x1ca>
   86e8c:	6843      	ldr	r3, [r0, #4]
   86e8e:	f023 0101 	bic.w	r1, r3, #1
   86e92:	4401      	add	r1, r0
   86e94:	6849      	ldr	r1, [r1, #4]
   86e96:	07c9      	lsls	r1, r1, #31
   86e98:	d54d      	bpl.n	86f36 <_realloc_r+0xee>
   86e9a:	f01e 0f01 	tst.w	lr, #1
   86e9e:	f000 809b 	beq.w	86fd8 <_realloc_r+0x190>
   86ea2:	4629      	mov	r1, r5
   86ea4:	4640      	mov	r0, r8
   86ea6:	f7fe ff0d 	bl	85cc4 <_malloc_r>
   86eaa:	4605      	mov	r5, r0
   86eac:	2800      	cmp	r0, #0
   86eae:	d03b      	beq.n	86f28 <_realloc_r+0xe0>
   86eb0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86eb4:	f1a0 0208 	sub.w	r2, r0, #8
   86eb8:	f023 0301 	bic.w	r3, r3, #1
   86ebc:	444b      	add	r3, r9
   86ebe:	429a      	cmp	r2, r3
   86ec0:	f000 812b 	beq.w	8711a <_realloc_r+0x2d2>
   86ec4:	1f3a      	subs	r2, r7, #4
   86ec6:	2a24      	cmp	r2, #36	; 0x24
   86ec8:	f200 8118 	bhi.w	870fc <_realloc_r+0x2b4>
   86ecc:	2a13      	cmp	r2, #19
   86ece:	f200 80eb 	bhi.w	870a8 <_realloc_r+0x260>
   86ed2:	4603      	mov	r3, r0
   86ed4:	4622      	mov	r2, r4
   86ed6:	6811      	ldr	r1, [r2, #0]
   86ed8:	6019      	str	r1, [r3, #0]
   86eda:	6851      	ldr	r1, [r2, #4]
   86edc:	6059      	str	r1, [r3, #4]
   86ede:	6892      	ldr	r2, [r2, #8]
   86ee0:	609a      	str	r2, [r3, #8]
   86ee2:	4621      	mov	r1, r4
   86ee4:	4640      	mov	r0, r8
   86ee6:	f7ff fe4f 	bl	86b88 <_free_r>
   86eea:	e01d      	b.n	86f28 <_realloc_r+0xe0>
   86eec:	f026 0607 	bic.w	r6, r6, #7
   86ef0:	2e00      	cmp	r6, #0
   86ef2:	4632      	mov	r2, r6
   86ef4:	dabf      	bge.n	86e76 <_realloc_r+0x2e>
   86ef6:	2500      	movs	r5, #0
   86ef8:	230c      	movs	r3, #12
   86efa:	4628      	mov	r0, r5
   86efc:	f8c8 3000 	str.w	r3, [r8]
   86f00:	b003      	add	sp, #12
   86f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86f06:	4625      	mov	r5, r4
   86f08:	1bbb      	subs	r3, r7, r6
   86f0a:	2b0f      	cmp	r3, #15
   86f0c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   86f10:	d81d      	bhi.n	86f4e <_realloc_r+0x106>
   86f12:	f002 0201 	and.w	r2, r2, #1
   86f16:	433a      	orrs	r2, r7
   86f18:	eb09 0107 	add.w	r1, r9, r7
   86f1c:	f8c9 2004 	str.w	r2, [r9, #4]
   86f20:	684b      	ldr	r3, [r1, #4]
   86f22:	f043 0301 	orr.w	r3, r3, #1
   86f26:	604b      	str	r3, [r1, #4]
   86f28:	4640      	mov	r0, r8
   86f2a:	f7ff f9b9 	bl	862a0 <__malloc_unlock>
   86f2e:	4628      	mov	r0, r5
   86f30:	b003      	add	sp, #12
   86f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86f36:	f023 0303 	bic.w	r3, r3, #3
   86f3a:	18f9      	adds	r1, r7, r3
   86f3c:	4291      	cmp	r1, r2
   86f3e:	db1d      	blt.n	86f7c <_realloc_r+0x134>
   86f40:	68c3      	ldr	r3, [r0, #12]
   86f42:	6882      	ldr	r2, [r0, #8]
   86f44:	4625      	mov	r5, r4
   86f46:	60d3      	str	r3, [r2, #12]
   86f48:	460f      	mov	r7, r1
   86f4a:	609a      	str	r2, [r3, #8]
   86f4c:	e7dc      	b.n	86f08 <_realloc_r+0xc0>
   86f4e:	f002 0201 	and.w	r2, r2, #1
   86f52:	eb09 0106 	add.w	r1, r9, r6
   86f56:	f043 0301 	orr.w	r3, r3, #1
   86f5a:	4332      	orrs	r2, r6
   86f5c:	f8c9 2004 	str.w	r2, [r9, #4]
   86f60:	444f      	add	r7, r9
   86f62:	604b      	str	r3, [r1, #4]
   86f64:	687b      	ldr	r3, [r7, #4]
   86f66:	3108      	adds	r1, #8
   86f68:	f043 0301 	orr.w	r3, r3, #1
   86f6c:	607b      	str	r3, [r7, #4]
   86f6e:	4640      	mov	r0, r8
   86f70:	f7ff fe0a 	bl	86b88 <_free_r>
   86f74:	e7d8      	b.n	86f28 <_realloc_r+0xe0>
   86f76:	4611      	mov	r1, r2
   86f78:	f7fe bea4 	b.w	85cc4 <_malloc_r>
   86f7c:	f01e 0f01 	tst.w	lr, #1
   86f80:	d18f      	bne.n	86ea2 <_realloc_r+0x5a>
   86f82:	f854 1c08 	ldr.w	r1, [r4, #-8]
   86f86:	eba9 0a01 	sub.w	sl, r9, r1
   86f8a:	f8da 1004 	ldr.w	r1, [sl, #4]
   86f8e:	f021 0103 	bic.w	r1, r1, #3
   86f92:	440b      	add	r3, r1
   86f94:	443b      	add	r3, r7
   86f96:	4293      	cmp	r3, r2
   86f98:	db26      	blt.n	86fe8 <_realloc_r+0x1a0>
   86f9a:	4655      	mov	r5, sl
   86f9c:	68c1      	ldr	r1, [r0, #12]
   86f9e:	6880      	ldr	r0, [r0, #8]
   86fa0:	1f3a      	subs	r2, r7, #4
   86fa2:	60c1      	str	r1, [r0, #12]
   86fa4:	6088      	str	r0, [r1, #8]
   86fa6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   86faa:	f8da 100c 	ldr.w	r1, [sl, #12]
   86fae:	2a24      	cmp	r2, #36	; 0x24
   86fb0:	60c1      	str	r1, [r0, #12]
   86fb2:	6088      	str	r0, [r1, #8]
   86fb4:	d826      	bhi.n	87004 <_realloc_r+0x1bc>
   86fb6:	2a13      	cmp	r2, #19
   86fb8:	f240 8081 	bls.w	870be <_realloc_r+0x276>
   86fbc:	6821      	ldr	r1, [r4, #0]
   86fbe:	2a1b      	cmp	r2, #27
   86fc0:	f8ca 1008 	str.w	r1, [sl, #8]
   86fc4:	6861      	ldr	r1, [r4, #4]
   86fc6:	f8ca 100c 	str.w	r1, [sl, #12]
   86fca:	f200 80ad 	bhi.w	87128 <_realloc_r+0x2e0>
   86fce:	f104 0008 	add.w	r0, r4, #8
   86fd2:	f10a 0210 	add.w	r2, sl, #16
   86fd6:	e074      	b.n	870c2 <_realloc_r+0x27a>
   86fd8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   86fdc:	eba9 0a03 	sub.w	sl, r9, r3
   86fe0:	f8da 1004 	ldr.w	r1, [sl, #4]
   86fe4:	f021 0103 	bic.w	r1, r1, #3
   86fe8:	187b      	adds	r3, r7, r1
   86fea:	4293      	cmp	r3, r2
   86fec:	f6ff af59 	blt.w	86ea2 <_realloc_r+0x5a>
   86ff0:	4655      	mov	r5, sl
   86ff2:	f8da 100c 	ldr.w	r1, [sl, #12]
   86ff6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   86ffa:	1f3a      	subs	r2, r7, #4
   86ffc:	2a24      	cmp	r2, #36	; 0x24
   86ffe:	60c1      	str	r1, [r0, #12]
   87000:	6088      	str	r0, [r1, #8]
   87002:	d9d8      	bls.n	86fb6 <_realloc_r+0x16e>
   87004:	4621      	mov	r1, r4
   87006:	4628      	mov	r0, r5
   87008:	461f      	mov	r7, r3
   8700a:	46d1      	mov	r9, sl
   8700c:	f7ff feb8 	bl	86d80 <memmove>
   87010:	e77a      	b.n	86f08 <_realloc_r+0xc0>
   87012:	6841      	ldr	r1, [r0, #4]
   87014:	f106 0010 	add.w	r0, r6, #16
   87018:	f021 0b03 	bic.w	fp, r1, #3
   8701c:	44bb      	add	fp, r7
   8701e:	4583      	cmp	fp, r0
   87020:	da58      	bge.n	870d4 <_realloc_r+0x28c>
   87022:	f01e 0f01 	tst.w	lr, #1
   87026:	f47f af3c 	bne.w	86ea2 <_realloc_r+0x5a>
   8702a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8702e:	eba9 0a01 	sub.w	sl, r9, r1
   87032:	f8da 1004 	ldr.w	r1, [sl, #4]
   87036:	f021 0103 	bic.w	r1, r1, #3
   8703a:	448b      	add	fp, r1
   8703c:	4558      	cmp	r0, fp
   8703e:	dcd3      	bgt.n	86fe8 <_realloc_r+0x1a0>
   87040:	4655      	mov	r5, sl
   87042:	f8da 100c 	ldr.w	r1, [sl, #12]
   87046:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8704a:	1f3a      	subs	r2, r7, #4
   8704c:	2a24      	cmp	r2, #36	; 0x24
   8704e:	60c1      	str	r1, [r0, #12]
   87050:	6088      	str	r0, [r1, #8]
   87052:	f200 808d 	bhi.w	87170 <_realloc_r+0x328>
   87056:	2a13      	cmp	r2, #19
   87058:	f240 8087 	bls.w	8716a <_realloc_r+0x322>
   8705c:	6821      	ldr	r1, [r4, #0]
   8705e:	2a1b      	cmp	r2, #27
   87060:	f8ca 1008 	str.w	r1, [sl, #8]
   87064:	6861      	ldr	r1, [r4, #4]
   87066:	f8ca 100c 	str.w	r1, [sl, #12]
   8706a:	f200 8088 	bhi.w	8717e <_realloc_r+0x336>
   8706e:	f104 0108 	add.w	r1, r4, #8
   87072:	f10a 0210 	add.w	r2, sl, #16
   87076:	6808      	ldr	r0, [r1, #0]
   87078:	6010      	str	r0, [r2, #0]
   8707a:	6848      	ldr	r0, [r1, #4]
   8707c:	6050      	str	r0, [r2, #4]
   8707e:	6889      	ldr	r1, [r1, #8]
   87080:	6091      	str	r1, [r2, #8]
   87082:	ebab 0206 	sub.w	r2, fp, r6
   87086:	eb0a 0106 	add.w	r1, sl, r6
   8708a:	f042 0201 	orr.w	r2, r2, #1
   8708e:	6099      	str	r1, [r3, #8]
   87090:	604a      	str	r2, [r1, #4]
   87092:	f8da 3004 	ldr.w	r3, [sl, #4]
   87096:	4640      	mov	r0, r8
   87098:	f003 0301 	and.w	r3, r3, #1
   8709c:	431e      	orrs	r6, r3
   8709e:	f8ca 6004 	str.w	r6, [sl, #4]
   870a2:	f7ff f8fd 	bl	862a0 <__malloc_unlock>
   870a6:	e742      	b.n	86f2e <_realloc_r+0xe6>
   870a8:	6823      	ldr	r3, [r4, #0]
   870aa:	2a1b      	cmp	r2, #27
   870ac:	6003      	str	r3, [r0, #0]
   870ae:	6863      	ldr	r3, [r4, #4]
   870b0:	6043      	str	r3, [r0, #4]
   870b2:	d827      	bhi.n	87104 <_realloc_r+0x2bc>
   870b4:	f100 0308 	add.w	r3, r0, #8
   870b8:	f104 0208 	add.w	r2, r4, #8
   870bc:	e70b      	b.n	86ed6 <_realloc_r+0x8e>
   870be:	4620      	mov	r0, r4
   870c0:	462a      	mov	r2, r5
   870c2:	6801      	ldr	r1, [r0, #0]
   870c4:	461f      	mov	r7, r3
   870c6:	6011      	str	r1, [r2, #0]
   870c8:	6841      	ldr	r1, [r0, #4]
   870ca:	46d1      	mov	r9, sl
   870cc:	6051      	str	r1, [r2, #4]
   870ce:	6883      	ldr	r3, [r0, #8]
   870d0:	6093      	str	r3, [r2, #8]
   870d2:	e719      	b.n	86f08 <_realloc_r+0xc0>
   870d4:	ebab 0b06 	sub.w	fp, fp, r6
   870d8:	eb09 0106 	add.w	r1, r9, r6
   870dc:	f04b 0201 	orr.w	r2, fp, #1
   870e0:	6099      	str	r1, [r3, #8]
   870e2:	604a      	str	r2, [r1, #4]
   870e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   870e8:	4640      	mov	r0, r8
   870ea:	f003 0301 	and.w	r3, r3, #1
   870ee:	431e      	orrs	r6, r3
   870f0:	f844 6c04 	str.w	r6, [r4, #-4]
   870f4:	f7ff f8d4 	bl	862a0 <__malloc_unlock>
   870f8:	4625      	mov	r5, r4
   870fa:	e718      	b.n	86f2e <_realloc_r+0xe6>
   870fc:	4621      	mov	r1, r4
   870fe:	f7ff fe3f 	bl	86d80 <memmove>
   87102:	e6ee      	b.n	86ee2 <_realloc_r+0x9a>
   87104:	68a3      	ldr	r3, [r4, #8]
   87106:	2a24      	cmp	r2, #36	; 0x24
   87108:	6083      	str	r3, [r0, #8]
   8710a:	68e3      	ldr	r3, [r4, #12]
   8710c:	60c3      	str	r3, [r0, #12]
   8710e:	d018      	beq.n	87142 <_realloc_r+0x2fa>
   87110:	f100 0310 	add.w	r3, r0, #16
   87114:	f104 0210 	add.w	r2, r4, #16
   87118:	e6dd      	b.n	86ed6 <_realloc_r+0x8e>
   8711a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8711e:	4625      	mov	r5, r4
   87120:	f023 0303 	bic.w	r3, r3, #3
   87124:	441f      	add	r7, r3
   87126:	e6ef      	b.n	86f08 <_realloc_r+0xc0>
   87128:	68a1      	ldr	r1, [r4, #8]
   8712a:	2a24      	cmp	r2, #36	; 0x24
   8712c:	f8ca 1010 	str.w	r1, [sl, #16]
   87130:	68e1      	ldr	r1, [r4, #12]
   87132:	f8ca 1014 	str.w	r1, [sl, #20]
   87136:	d00d      	beq.n	87154 <_realloc_r+0x30c>
   87138:	f104 0010 	add.w	r0, r4, #16
   8713c:	f10a 0218 	add.w	r2, sl, #24
   87140:	e7bf      	b.n	870c2 <_realloc_r+0x27a>
   87142:	6922      	ldr	r2, [r4, #16]
   87144:	f100 0318 	add.w	r3, r0, #24
   87148:	6102      	str	r2, [r0, #16]
   8714a:	6961      	ldr	r1, [r4, #20]
   8714c:	f104 0218 	add.w	r2, r4, #24
   87150:	6141      	str	r1, [r0, #20]
   87152:	e6c0      	b.n	86ed6 <_realloc_r+0x8e>
   87154:	6922      	ldr	r2, [r4, #16]
   87156:	f104 0018 	add.w	r0, r4, #24
   8715a:	f8ca 2018 	str.w	r2, [sl, #24]
   8715e:	6961      	ldr	r1, [r4, #20]
   87160:	f10a 0220 	add.w	r2, sl, #32
   87164:	f8ca 101c 	str.w	r1, [sl, #28]
   87168:	e7ab      	b.n	870c2 <_realloc_r+0x27a>
   8716a:	4621      	mov	r1, r4
   8716c:	462a      	mov	r2, r5
   8716e:	e782      	b.n	87076 <_realloc_r+0x22e>
   87170:	4621      	mov	r1, r4
   87172:	4628      	mov	r0, r5
   87174:	9301      	str	r3, [sp, #4]
   87176:	f7ff fe03 	bl	86d80 <memmove>
   8717a:	9b01      	ldr	r3, [sp, #4]
   8717c:	e781      	b.n	87082 <_realloc_r+0x23a>
   8717e:	68a1      	ldr	r1, [r4, #8]
   87180:	2a24      	cmp	r2, #36	; 0x24
   87182:	f8ca 1010 	str.w	r1, [sl, #16]
   87186:	68e1      	ldr	r1, [r4, #12]
   87188:	f8ca 1014 	str.w	r1, [sl, #20]
   8718c:	d006      	beq.n	8719c <_realloc_r+0x354>
   8718e:	f104 0110 	add.w	r1, r4, #16
   87192:	f10a 0218 	add.w	r2, sl, #24
   87196:	e76e      	b.n	87076 <_realloc_r+0x22e>
   87198:	200705d4 	.word	0x200705d4
   8719c:	6922      	ldr	r2, [r4, #16]
   8719e:	f104 0118 	add.w	r1, r4, #24
   871a2:	f8ca 2018 	str.w	r2, [sl, #24]
   871a6:	6960      	ldr	r0, [r4, #20]
   871a8:	f10a 0220 	add.w	r2, sl, #32
   871ac:	f8ca 001c 	str.w	r0, [sl, #28]
   871b0:	e761      	b.n	87076 <_realloc_r+0x22e>
   871b2:	bf00      	nop

000871b4 <__ascii_wctomb>:
   871b4:	b119      	cbz	r1, 871be <__ascii_wctomb+0xa>
   871b6:	2aff      	cmp	r2, #255	; 0xff
   871b8:	d803      	bhi.n	871c2 <__ascii_wctomb+0xe>
   871ba:	700a      	strb	r2, [r1, #0]
   871bc:	2101      	movs	r1, #1
   871be:	4608      	mov	r0, r1
   871c0:	4770      	bx	lr
   871c2:	238a      	movs	r3, #138	; 0x8a
   871c4:	f04f 31ff 	mov.w	r1, #4294967295
   871c8:	6003      	str	r3, [r0, #0]
   871ca:	e7f8      	b.n	871be <__ascii_wctomb+0xa>

000871cc <__aeabi_drsub>:
   871cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   871d0:	e002      	b.n	871d8 <__adddf3>
   871d2:	bf00      	nop

000871d4 <__aeabi_dsub>:
   871d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000871d8 <__adddf3>:
   871d8:	b530      	push	{r4, r5, lr}
   871da:	ea4f 0441 	mov.w	r4, r1, lsl #1
   871de:	ea4f 0543 	mov.w	r5, r3, lsl #1
   871e2:	ea94 0f05 	teq	r4, r5
   871e6:	bf08      	it	eq
   871e8:	ea90 0f02 	teqeq	r0, r2
   871ec:	bf1f      	itttt	ne
   871ee:	ea54 0c00 	orrsne.w	ip, r4, r0
   871f2:	ea55 0c02 	orrsne.w	ip, r5, r2
   871f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   871fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   871fe:	f000 80e2 	beq.w	873c6 <__adddf3+0x1ee>
   87202:	ea4f 5454 	mov.w	r4, r4, lsr #21
   87206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8720a:	bfb8      	it	lt
   8720c:	426d      	neglt	r5, r5
   8720e:	dd0c      	ble.n	8722a <__adddf3+0x52>
   87210:	442c      	add	r4, r5
   87212:	ea80 0202 	eor.w	r2, r0, r2
   87216:	ea81 0303 	eor.w	r3, r1, r3
   8721a:	ea82 0000 	eor.w	r0, r2, r0
   8721e:	ea83 0101 	eor.w	r1, r3, r1
   87222:	ea80 0202 	eor.w	r2, r0, r2
   87226:	ea81 0303 	eor.w	r3, r1, r3
   8722a:	2d36      	cmp	r5, #54	; 0x36
   8722c:	bf88      	it	hi
   8722e:	bd30      	pophi	{r4, r5, pc}
   87230:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   87234:	ea4f 3101 	mov.w	r1, r1, lsl #12
   87238:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8723c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   87240:	d002      	beq.n	87248 <__adddf3+0x70>
   87242:	4240      	negs	r0, r0
   87244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87248:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8724c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   87250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   87254:	d002      	beq.n	8725c <__adddf3+0x84>
   87256:	4252      	negs	r2, r2
   87258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8725c:	ea94 0f05 	teq	r4, r5
   87260:	f000 80a7 	beq.w	873b2 <__adddf3+0x1da>
   87264:	f1a4 0401 	sub.w	r4, r4, #1
   87268:	f1d5 0e20 	rsbs	lr, r5, #32
   8726c:	db0d      	blt.n	8728a <__adddf3+0xb2>
   8726e:	fa02 fc0e 	lsl.w	ip, r2, lr
   87272:	fa22 f205 	lsr.w	r2, r2, r5
   87276:	1880      	adds	r0, r0, r2
   87278:	f141 0100 	adc.w	r1, r1, #0
   8727c:	fa03 f20e 	lsl.w	r2, r3, lr
   87280:	1880      	adds	r0, r0, r2
   87282:	fa43 f305 	asr.w	r3, r3, r5
   87286:	4159      	adcs	r1, r3
   87288:	e00e      	b.n	872a8 <__adddf3+0xd0>
   8728a:	f1a5 0520 	sub.w	r5, r5, #32
   8728e:	f10e 0e20 	add.w	lr, lr, #32
   87292:	2a01      	cmp	r2, #1
   87294:	fa03 fc0e 	lsl.w	ip, r3, lr
   87298:	bf28      	it	cs
   8729a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8729e:	fa43 f305 	asr.w	r3, r3, r5
   872a2:	18c0      	adds	r0, r0, r3
   872a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   872a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   872ac:	d507      	bpl.n	872be <__adddf3+0xe6>
   872ae:	f04f 0e00 	mov.w	lr, #0
   872b2:	f1dc 0c00 	rsbs	ip, ip, #0
   872b6:	eb7e 0000 	sbcs.w	r0, lr, r0
   872ba:	eb6e 0101 	sbc.w	r1, lr, r1
   872be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   872c2:	d31b      	bcc.n	872fc <__adddf3+0x124>
   872c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   872c8:	d30c      	bcc.n	872e4 <__adddf3+0x10c>
   872ca:	0849      	lsrs	r1, r1, #1
   872cc:	ea5f 0030 	movs.w	r0, r0, rrx
   872d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   872d4:	f104 0401 	add.w	r4, r4, #1
   872d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   872dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   872e0:	f080 809a 	bcs.w	87418 <__adddf3+0x240>
   872e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   872e8:	bf08      	it	eq
   872ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   872ee:	f150 0000 	adcs.w	r0, r0, #0
   872f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   872f6:	ea41 0105 	orr.w	r1, r1, r5
   872fa:	bd30      	pop	{r4, r5, pc}
   872fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   87300:	4140      	adcs	r0, r0
   87302:	eb41 0101 	adc.w	r1, r1, r1
   87306:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8730a:	f1a4 0401 	sub.w	r4, r4, #1
   8730e:	d1e9      	bne.n	872e4 <__adddf3+0x10c>
   87310:	f091 0f00 	teq	r1, #0
   87314:	bf04      	itt	eq
   87316:	4601      	moveq	r1, r0
   87318:	2000      	moveq	r0, #0
   8731a:	fab1 f381 	clz	r3, r1
   8731e:	bf08      	it	eq
   87320:	3320      	addeq	r3, #32
   87322:	f1a3 030b 	sub.w	r3, r3, #11
   87326:	f1b3 0220 	subs.w	r2, r3, #32
   8732a:	da0c      	bge.n	87346 <__adddf3+0x16e>
   8732c:	320c      	adds	r2, #12
   8732e:	dd08      	ble.n	87342 <__adddf3+0x16a>
   87330:	f102 0c14 	add.w	ip, r2, #20
   87334:	f1c2 020c 	rsb	r2, r2, #12
   87338:	fa01 f00c 	lsl.w	r0, r1, ip
   8733c:	fa21 f102 	lsr.w	r1, r1, r2
   87340:	e00c      	b.n	8735c <__adddf3+0x184>
   87342:	f102 0214 	add.w	r2, r2, #20
   87346:	bfd8      	it	le
   87348:	f1c2 0c20 	rsble	ip, r2, #32
   8734c:	fa01 f102 	lsl.w	r1, r1, r2
   87350:	fa20 fc0c 	lsr.w	ip, r0, ip
   87354:	bfdc      	itt	le
   87356:	ea41 010c 	orrle.w	r1, r1, ip
   8735a:	4090      	lslle	r0, r2
   8735c:	1ae4      	subs	r4, r4, r3
   8735e:	bfa2      	ittt	ge
   87360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   87364:	4329      	orrge	r1, r5
   87366:	bd30      	popge	{r4, r5, pc}
   87368:	ea6f 0404 	mvn.w	r4, r4
   8736c:	3c1f      	subs	r4, #31
   8736e:	da1c      	bge.n	873aa <__adddf3+0x1d2>
   87370:	340c      	adds	r4, #12
   87372:	dc0e      	bgt.n	87392 <__adddf3+0x1ba>
   87374:	f104 0414 	add.w	r4, r4, #20
   87378:	f1c4 0220 	rsb	r2, r4, #32
   8737c:	fa20 f004 	lsr.w	r0, r0, r4
   87380:	fa01 f302 	lsl.w	r3, r1, r2
   87384:	ea40 0003 	orr.w	r0, r0, r3
   87388:	fa21 f304 	lsr.w	r3, r1, r4
   8738c:	ea45 0103 	orr.w	r1, r5, r3
   87390:	bd30      	pop	{r4, r5, pc}
   87392:	f1c4 040c 	rsb	r4, r4, #12
   87396:	f1c4 0220 	rsb	r2, r4, #32
   8739a:	fa20 f002 	lsr.w	r0, r0, r2
   8739e:	fa01 f304 	lsl.w	r3, r1, r4
   873a2:	ea40 0003 	orr.w	r0, r0, r3
   873a6:	4629      	mov	r1, r5
   873a8:	bd30      	pop	{r4, r5, pc}
   873aa:	fa21 f004 	lsr.w	r0, r1, r4
   873ae:	4629      	mov	r1, r5
   873b0:	bd30      	pop	{r4, r5, pc}
   873b2:	f094 0f00 	teq	r4, #0
   873b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   873ba:	bf06      	itte	eq
   873bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   873c0:	3401      	addeq	r4, #1
   873c2:	3d01      	subne	r5, #1
   873c4:	e74e      	b.n	87264 <__adddf3+0x8c>
   873c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   873ca:	bf18      	it	ne
   873cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   873d0:	d029      	beq.n	87426 <__adddf3+0x24e>
   873d2:	ea94 0f05 	teq	r4, r5
   873d6:	bf08      	it	eq
   873d8:	ea90 0f02 	teqeq	r0, r2
   873dc:	d005      	beq.n	873ea <__adddf3+0x212>
   873de:	ea54 0c00 	orrs.w	ip, r4, r0
   873e2:	bf04      	itt	eq
   873e4:	4619      	moveq	r1, r3
   873e6:	4610      	moveq	r0, r2
   873e8:	bd30      	pop	{r4, r5, pc}
   873ea:	ea91 0f03 	teq	r1, r3
   873ee:	bf1e      	ittt	ne
   873f0:	2100      	movne	r1, #0
   873f2:	2000      	movne	r0, #0
   873f4:	bd30      	popne	{r4, r5, pc}
   873f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   873fa:	d105      	bne.n	87408 <__adddf3+0x230>
   873fc:	0040      	lsls	r0, r0, #1
   873fe:	4149      	adcs	r1, r1
   87400:	bf28      	it	cs
   87402:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   87406:	bd30      	pop	{r4, r5, pc}
   87408:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8740c:	bf3c      	itt	cc
   8740e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   87412:	bd30      	popcc	{r4, r5, pc}
   87414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87418:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8741c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87420:	f04f 0000 	mov.w	r0, #0
   87424:	bd30      	pop	{r4, r5, pc}
   87426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8742a:	bf1a      	itte	ne
   8742c:	4619      	movne	r1, r3
   8742e:	4610      	movne	r0, r2
   87430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   87434:	bf1c      	itt	ne
   87436:	460b      	movne	r3, r1
   87438:	4602      	movne	r2, r0
   8743a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8743e:	bf06      	itte	eq
   87440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   87444:	ea91 0f03 	teqeq	r1, r3
   87448:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8744c:	bd30      	pop	{r4, r5, pc}
   8744e:	bf00      	nop

00087450 <__aeabi_ui2d>:
   87450:	f090 0f00 	teq	r0, #0
   87454:	bf04      	itt	eq
   87456:	2100      	moveq	r1, #0
   87458:	4770      	bxeq	lr
   8745a:	b530      	push	{r4, r5, lr}
   8745c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87460:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87464:	f04f 0500 	mov.w	r5, #0
   87468:	f04f 0100 	mov.w	r1, #0
   8746c:	e750      	b.n	87310 <__adddf3+0x138>
   8746e:	bf00      	nop

00087470 <__aeabi_i2d>:
   87470:	f090 0f00 	teq	r0, #0
   87474:	bf04      	itt	eq
   87476:	2100      	moveq	r1, #0
   87478:	4770      	bxeq	lr
   8747a:	b530      	push	{r4, r5, lr}
   8747c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87480:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87484:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   87488:	bf48      	it	mi
   8748a:	4240      	negmi	r0, r0
   8748c:	f04f 0100 	mov.w	r1, #0
   87490:	e73e      	b.n	87310 <__adddf3+0x138>
   87492:	bf00      	nop

00087494 <__aeabi_f2d>:
   87494:	0042      	lsls	r2, r0, #1
   87496:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8749a:	ea4f 0131 	mov.w	r1, r1, rrx
   8749e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   874a2:	bf1f      	itttt	ne
   874a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   874a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   874ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   874b0:	4770      	bxne	lr
   874b2:	f092 0f00 	teq	r2, #0
   874b6:	bf14      	ite	ne
   874b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   874bc:	4770      	bxeq	lr
   874be:	b530      	push	{r4, r5, lr}
   874c0:	f44f 7460 	mov.w	r4, #896	; 0x380
   874c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   874c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   874cc:	e720      	b.n	87310 <__adddf3+0x138>
   874ce:	bf00      	nop

000874d0 <__aeabi_ul2d>:
   874d0:	ea50 0201 	orrs.w	r2, r0, r1
   874d4:	bf08      	it	eq
   874d6:	4770      	bxeq	lr
   874d8:	b530      	push	{r4, r5, lr}
   874da:	f04f 0500 	mov.w	r5, #0
   874de:	e00a      	b.n	874f6 <__aeabi_l2d+0x16>

000874e0 <__aeabi_l2d>:
   874e0:	ea50 0201 	orrs.w	r2, r0, r1
   874e4:	bf08      	it	eq
   874e6:	4770      	bxeq	lr
   874e8:	b530      	push	{r4, r5, lr}
   874ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   874ee:	d502      	bpl.n	874f6 <__aeabi_l2d+0x16>
   874f0:	4240      	negs	r0, r0
   874f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   874f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   874fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   874fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   87502:	f43f aedc 	beq.w	872be <__adddf3+0xe6>
   87506:	f04f 0203 	mov.w	r2, #3
   8750a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8750e:	bf18      	it	ne
   87510:	3203      	addne	r2, #3
   87512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87516:	bf18      	it	ne
   87518:	3203      	addne	r2, #3
   8751a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8751e:	f1c2 0320 	rsb	r3, r2, #32
   87522:	fa00 fc03 	lsl.w	ip, r0, r3
   87526:	fa20 f002 	lsr.w	r0, r0, r2
   8752a:	fa01 fe03 	lsl.w	lr, r1, r3
   8752e:	ea40 000e 	orr.w	r0, r0, lr
   87532:	fa21 f102 	lsr.w	r1, r1, r2
   87536:	4414      	add	r4, r2
   87538:	e6c1      	b.n	872be <__adddf3+0xe6>
   8753a:	bf00      	nop

0008753c <__aeabi_dmul>:
   8753c:	b570      	push	{r4, r5, r6, lr}
   8753e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87542:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87546:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8754a:	bf1d      	ittte	ne
   8754c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87550:	ea94 0f0c 	teqne	r4, ip
   87554:	ea95 0f0c 	teqne	r5, ip
   87558:	f000 f8de 	bleq	87718 <__aeabi_dmul+0x1dc>
   8755c:	442c      	add	r4, r5
   8755e:	ea81 0603 	eor.w	r6, r1, r3
   87562:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   87566:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8756a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8756e:	bf18      	it	ne
   87570:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   87574:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8757c:	d038      	beq.n	875f0 <__aeabi_dmul+0xb4>
   8757e:	fba0 ce02 	umull	ip, lr, r0, r2
   87582:	f04f 0500 	mov.w	r5, #0
   87586:	fbe1 e502 	umlal	lr, r5, r1, r2
   8758a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8758e:	fbe0 e503 	umlal	lr, r5, r0, r3
   87592:	f04f 0600 	mov.w	r6, #0
   87596:	fbe1 5603 	umlal	r5, r6, r1, r3
   8759a:	f09c 0f00 	teq	ip, #0
   8759e:	bf18      	it	ne
   875a0:	f04e 0e01 	orrne.w	lr, lr, #1
   875a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   875a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   875ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   875b0:	d204      	bcs.n	875bc <__aeabi_dmul+0x80>
   875b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   875b6:	416d      	adcs	r5, r5
   875b8:	eb46 0606 	adc.w	r6, r6, r6
   875bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   875c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   875c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   875c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   875cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   875d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   875d4:	bf88      	it	hi
   875d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   875da:	d81e      	bhi.n	8761a <__aeabi_dmul+0xde>
   875dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   875e0:	bf08      	it	eq
   875e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   875e6:	f150 0000 	adcs.w	r0, r0, #0
   875ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   875ee:	bd70      	pop	{r4, r5, r6, pc}
   875f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   875f4:	ea46 0101 	orr.w	r1, r6, r1
   875f8:	ea40 0002 	orr.w	r0, r0, r2
   875fc:	ea81 0103 	eor.w	r1, r1, r3
   87600:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   87604:	bfc2      	ittt	gt
   87606:	ebd4 050c 	rsbsgt	r5, r4, ip
   8760a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8760e:	bd70      	popgt	{r4, r5, r6, pc}
   87610:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87614:	f04f 0e00 	mov.w	lr, #0
   87618:	3c01      	subs	r4, #1
   8761a:	f300 80ab 	bgt.w	87774 <__aeabi_dmul+0x238>
   8761e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   87622:	bfde      	ittt	le
   87624:	2000      	movle	r0, #0
   87626:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8762a:	bd70      	pople	{r4, r5, r6, pc}
   8762c:	f1c4 0400 	rsb	r4, r4, #0
   87630:	3c20      	subs	r4, #32
   87632:	da35      	bge.n	876a0 <__aeabi_dmul+0x164>
   87634:	340c      	adds	r4, #12
   87636:	dc1b      	bgt.n	87670 <__aeabi_dmul+0x134>
   87638:	f104 0414 	add.w	r4, r4, #20
   8763c:	f1c4 0520 	rsb	r5, r4, #32
   87640:	fa00 f305 	lsl.w	r3, r0, r5
   87644:	fa20 f004 	lsr.w	r0, r0, r4
   87648:	fa01 f205 	lsl.w	r2, r1, r5
   8764c:	ea40 0002 	orr.w	r0, r0, r2
   87650:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   87654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8765c:	fa21 f604 	lsr.w	r6, r1, r4
   87660:	eb42 0106 	adc.w	r1, r2, r6
   87664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87668:	bf08      	it	eq
   8766a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8766e:	bd70      	pop	{r4, r5, r6, pc}
   87670:	f1c4 040c 	rsb	r4, r4, #12
   87674:	f1c4 0520 	rsb	r5, r4, #32
   87678:	fa00 f304 	lsl.w	r3, r0, r4
   8767c:	fa20 f005 	lsr.w	r0, r0, r5
   87680:	fa01 f204 	lsl.w	r2, r1, r4
   87684:	ea40 0002 	orr.w	r0, r0, r2
   87688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8768c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   87690:	f141 0100 	adc.w	r1, r1, #0
   87694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87698:	bf08      	it	eq
   8769a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8769e:	bd70      	pop	{r4, r5, r6, pc}
   876a0:	f1c4 0520 	rsb	r5, r4, #32
   876a4:	fa00 f205 	lsl.w	r2, r0, r5
   876a8:	ea4e 0e02 	orr.w	lr, lr, r2
   876ac:	fa20 f304 	lsr.w	r3, r0, r4
   876b0:	fa01 f205 	lsl.w	r2, r1, r5
   876b4:	ea43 0302 	orr.w	r3, r3, r2
   876b8:	fa21 f004 	lsr.w	r0, r1, r4
   876bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   876c0:	fa21 f204 	lsr.w	r2, r1, r4
   876c4:	ea20 0002 	bic.w	r0, r0, r2
   876c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   876cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   876d0:	bf08      	it	eq
   876d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   876d6:	bd70      	pop	{r4, r5, r6, pc}
   876d8:	f094 0f00 	teq	r4, #0
   876dc:	d10f      	bne.n	876fe <__aeabi_dmul+0x1c2>
   876de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   876e2:	0040      	lsls	r0, r0, #1
   876e4:	eb41 0101 	adc.w	r1, r1, r1
   876e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   876ec:	bf08      	it	eq
   876ee:	3c01      	subeq	r4, #1
   876f0:	d0f7      	beq.n	876e2 <__aeabi_dmul+0x1a6>
   876f2:	ea41 0106 	orr.w	r1, r1, r6
   876f6:	f095 0f00 	teq	r5, #0
   876fa:	bf18      	it	ne
   876fc:	4770      	bxne	lr
   876fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   87702:	0052      	lsls	r2, r2, #1
   87704:	eb43 0303 	adc.w	r3, r3, r3
   87708:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8770c:	bf08      	it	eq
   8770e:	3d01      	subeq	r5, #1
   87710:	d0f7      	beq.n	87702 <__aeabi_dmul+0x1c6>
   87712:	ea43 0306 	orr.w	r3, r3, r6
   87716:	4770      	bx	lr
   87718:	ea94 0f0c 	teq	r4, ip
   8771c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   87720:	bf18      	it	ne
   87722:	ea95 0f0c 	teqne	r5, ip
   87726:	d00c      	beq.n	87742 <__aeabi_dmul+0x206>
   87728:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8772c:	bf18      	it	ne
   8772e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87732:	d1d1      	bne.n	876d8 <__aeabi_dmul+0x19c>
   87734:	ea81 0103 	eor.w	r1, r1, r3
   87738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8773c:	f04f 0000 	mov.w	r0, #0
   87740:	bd70      	pop	{r4, r5, r6, pc}
   87742:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87746:	bf06      	itte	eq
   87748:	4610      	moveq	r0, r2
   8774a:	4619      	moveq	r1, r3
   8774c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87750:	d019      	beq.n	87786 <__aeabi_dmul+0x24a>
   87752:	ea94 0f0c 	teq	r4, ip
   87756:	d102      	bne.n	8775e <__aeabi_dmul+0x222>
   87758:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8775c:	d113      	bne.n	87786 <__aeabi_dmul+0x24a>
   8775e:	ea95 0f0c 	teq	r5, ip
   87762:	d105      	bne.n	87770 <__aeabi_dmul+0x234>
   87764:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   87768:	bf1c      	itt	ne
   8776a:	4610      	movne	r0, r2
   8776c:	4619      	movne	r1, r3
   8776e:	d10a      	bne.n	87786 <__aeabi_dmul+0x24a>
   87770:	ea81 0103 	eor.w	r1, r1, r3
   87774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87778:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8777c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87780:	f04f 0000 	mov.w	r0, #0
   87784:	bd70      	pop	{r4, r5, r6, pc}
   87786:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8778a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8778e:	bd70      	pop	{r4, r5, r6, pc}

00087790 <__aeabi_ddiv>:
   87790:	b570      	push	{r4, r5, r6, lr}
   87792:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87796:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8779a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8779e:	bf1d      	ittte	ne
   877a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   877a4:	ea94 0f0c 	teqne	r4, ip
   877a8:	ea95 0f0c 	teqne	r5, ip
   877ac:	f000 f8a7 	bleq	878fe <__aeabi_ddiv+0x16e>
   877b0:	eba4 0405 	sub.w	r4, r4, r5
   877b4:	ea81 0e03 	eor.w	lr, r1, r3
   877b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   877bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   877c0:	f000 8088 	beq.w	878d4 <__aeabi_ddiv+0x144>
   877c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   877c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   877cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   877d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   877d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   877d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   877dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   877e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   877e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   877e8:	429d      	cmp	r5, r3
   877ea:	bf08      	it	eq
   877ec:	4296      	cmpeq	r6, r2
   877ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   877f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   877f6:	d202      	bcs.n	877fe <__aeabi_ddiv+0x6e>
   877f8:	085b      	lsrs	r3, r3, #1
   877fa:	ea4f 0232 	mov.w	r2, r2, rrx
   877fe:	1ab6      	subs	r6, r6, r2
   87800:	eb65 0503 	sbc.w	r5, r5, r3
   87804:	085b      	lsrs	r3, r3, #1
   87806:	ea4f 0232 	mov.w	r2, r2, rrx
   8780a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8780e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   87812:	ebb6 0e02 	subs.w	lr, r6, r2
   87816:	eb75 0e03 	sbcs.w	lr, r5, r3
   8781a:	bf22      	ittt	cs
   8781c:	1ab6      	subcs	r6, r6, r2
   8781e:	4675      	movcs	r5, lr
   87820:	ea40 000c 	orrcs.w	r0, r0, ip
   87824:	085b      	lsrs	r3, r3, #1
   87826:	ea4f 0232 	mov.w	r2, r2, rrx
   8782a:	ebb6 0e02 	subs.w	lr, r6, r2
   8782e:	eb75 0e03 	sbcs.w	lr, r5, r3
   87832:	bf22      	ittt	cs
   87834:	1ab6      	subcs	r6, r6, r2
   87836:	4675      	movcs	r5, lr
   87838:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8783c:	085b      	lsrs	r3, r3, #1
   8783e:	ea4f 0232 	mov.w	r2, r2, rrx
   87842:	ebb6 0e02 	subs.w	lr, r6, r2
   87846:	eb75 0e03 	sbcs.w	lr, r5, r3
   8784a:	bf22      	ittt	cs
   8784c:	1ab6      	subcs	r6, r6, r2
   8784e:	4675      	movcs	r5, lr
   87850:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   87854:	085b      	lsrs	r3, r3, #1
   87856:	ea4f 0232 	mov.w	r2, r2, rrx
   8785a:	ebb6 0e02 	subs.w	lr, r6, r2
   8785e:	eb75 0e03 	sbcs.w	lr, r5, r3
   87862:	bf22      	ittt	cs
   87864:	1ab6      	subcs	r6, r6, r2
   87866:	4675      	movcs	r5, lr
   87868:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8786c:	ea55 0e06 	orrs.w	lr, r5, r6
   87870:	d018      	beq.n	878a4 <__aeabi_ddiv+0x114>
   87872:	ea4f 1505 	mov.w	r5, r5, lsl #4
   87876:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8787a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8787e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   87882:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   87886:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8788a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8788e:	d1c0      	bne.n	87812 <__aeabi_ddiv+0x82>
   87890:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87894:	d10b      	bne.n	878ae <__aeabi_ddiv+0x11e>
   87896:	ea41 0100 	orr.w	r1, r1, r0
   8789a:	f04f 0000 	mov.w	r0, #0
   8789e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   878a2:	e7b6      	b.n	87812 <__aeabi_ddiv+0x82>
   878a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   878a8:	bf04      	itt	eq
   878aa:	4301      	orreq	r1, r0
   878ac:	2000      	moveq	r0, #0
   878ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   878b2:	bf88      	it	hi
   878b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   878b8:	f63f aeaf 	bhi.w	8761a <__aeabi_dmul+0xde>
   878bc:	ebb5 0c03 	subs.w	ip, r5, r3
   878c0:	bf04      	itt	eq
   878c2:	ebb6 0c02 	subseq.w	ip, r6, r2
   878c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   878ca:	f150 0000 	adcs.w	r0, r0, #0
   878ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   878d2:	bd70      	pop	{r4, r5, r6, pc}
   878d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   878d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   878dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   878e0:	bfc2      	ittt	gt
   878e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   878e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   878ea:	bd70      	popgt	{r4, r5, r6, pc}
   878ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   878f0:	f04f 0e00 	mov.w	lr, #0
   878f4:	3c01      	subs	r4, #1
   878f6:	e690      	b.n	8761a <__aeabi_dmul+0xde>
   878f8:	ea45 0e06 	orr.w	lr, r5, r6
   878fc:	e68d      	b.n	8761a <__aeabi_dmul+0xde>
   878fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   87902:	ea94 0f0c 	teq	r4, ip
   87906:	bf08      	it	eq
   87908:	ea95 0f0c 	teqeq	r5, ip
   8790c:	f43f af3b 	beq.w	87786 <__aeabi_dmul+0x24a>
   87910:	ea94 0f0c 	teq	r4, ip
   87914:	d10a      	bne.n	8792c <__aeabi_ddiv+0x19c>
   87916:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8791a:	f47f af34 	bne.w	87786 <__aeabi_dmul+0x24a>
   8791e:	ea95 0f0c 	teq	r5, ip
   87922:	f47f af25 	bne.w	87770 <__aeabi_dmul+0x234>
   87926:	4610      	mov	r0, r2
   87928:	4619      	mov	r1, r3
   8792a:	e72c      	b.n	87786 <__aeabi_dmul+0x24a>
   8792c:	ea95 0f0c 	teq	r5, ip
   87930:	d106      	bne.n	87940 <__aeabi_ddiv+0x1b0>
   87932:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   87936:	f43f aefd 	beq.w	87734 <__aeabi_dmul+0x1f8>
   8793a:	4610      	mov	r0, r2
   8793c:	4619      	mov	r1, r3
   8793e:	e722      	b.n	87786 <__aeabi_dmul+0x24a>
   87940:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87944:	bf18      	it	ne
   87946:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8794a:	f47f aec5 	bne.w	876d8 <__aeabi_dmul+0x19c>
   8794e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   87952:	f47f af0d 	bne.w	87770 <__aeabi_dmul+0x234>
   87956:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8795a:	f47f aeeb 	bne.w	87734 <__aeabi_dmul+0x1f8>
   8795e:	e712      	b.n	87786 <__aeabi_dmul+0x24a>

00087960 <__gedf2>:
   87960:	f04f 3cff 	mov.w	ip, #4294967295
   87964:	e006      	b.n	87974 <__cmpdf2+0x4>
   87966:	bf00      	nop

00087968 <__ledf2>:
   87968:	f04f 0c01 	mov.w	ip, #1
   8796c:	e002      	b.n	87974 <__cmpdf2+0x4>
   8796e:	bf00      	nop

00087970 <__cmpdf2>:
   87970:	f04f 0c01 	mov.w	ip, #1
   87974:	f84d cd04 	str.w	ip, [sp, #-4]!
   87978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8797c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   87984:	bf18      	it	ne
   87986:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8798a:	d01b      	beq.n	879c4 <__cmpdf2+0x54>
   8798c:	b001      	add	sp, #4
   8798e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   87992:	bf0c      	ite	eq
   87994:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   87998:	ea91 0f03 	teqne	r1, r3
   8799c:	bf02      	ittt	eq
   8799e:	ea90 0f02 	teqeq	r0, r2
   879a2:	2000      	moveq	r0, #0
   879a4:	4770      	bxeq	lr
   879a6:	f110 0f00 	cmn.w	r0, #0
   879aa:	ea91 0f03 	teq	r1, r3
   879ae:	bf58      	it	pl
   879b0:	4299      	cmppl	r1, r3
   879b2:	bf08      	it	eq
   879b4:	4290      	cmpeq	r0, r2
   879b6:	bf2c      	ite	cs
   879b8:	17d8      	asrcs	r0, r3, #31
   879ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   879be:	f040 0001 	orr.w	r0, r0, #1
   879c2:	4770      	bx	lr
   879c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   879c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   879cc:	d102      	bne.n	879d4 <__cmpdf2+0x64>
   879ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   879d2:	d107      	bne.n	879e4 <__cmpdf2+0x74>
   879d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   879d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   879dc:	d1d6      	bne.n	8798c <__cmpdf2+0x1c>
   879de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   879e2:	d0d3      	beq.n	8798c <__cmpdf2+0x1c>
   879e4:	f85d 0b04 	ldr.w	r0, [sp], #4
   879e8:	4770      	bx	lr
   879ea:	bf00      	nop

000879ec <__aeabi_cdrcmple>:
   879ec:	4684      	mov	ip, r0
   879ee:	4610      	mov	r0, r2
   879f0:	4662      	mov	r2, ip
   879f2:	468c      	mov	ip, r1
   879f4:	4619      	mov	r1, r3
   879f6:	4663      	mov	r3, ip
   879f8:	e000      	b.n	879fc <__aeabi_cdcmpeq>
   879fa:	bf00      	nop

000879fc <__aeabi_cdcmpeq>:
   879fc:	b501      	push	{r0, lr}
   879fe:	f7ff ffb7 	bl	87970 <__cmpdf2>
   87a02:	2800      	cmp	r0, #0
   87a04:	bf48      	it	mi
   87a06:	f110 0f00 	cmnmi.w	r0, #0
   87a0a:	bd01      	pop	{r0, pc}

00087a0c <__aeabi_dcmpeq>:
   87a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   87a10:	f7ff fff4 	bl	879fc <__aeabi_cdcmpeq>
   87a14:	bf0c      	ite	eq
   87a16:	2001      	moveq	r0, #1
   87a18:	2000      	movne	r0, #0
   87a1a:	f85d fb08 	ldr.w	pc, [sp], #8
   87a1e:	bf00      	nop

00087a20 <__aeabi_dcmplt>:
   87a20:	f84d ed08 	str.w	lr, [sp, #-8]!
   87a24:	f7ff ffea 	bl	879fc <__aeabi_cdcmpeq>
   87a28:	bf34      	ite	cc
   87a2a:	2001      	movcc	r0, #1
   87a2c:	2000      	movcs	r0, #0
   87a2e:	f85d fb08 	ldr.w	pc, [sp], #8
   87a32:	bf00      	nop

00087a34 <__aeabi_dcmple>:
   87a34:	f84d ed08 	str.w	lr, [sp, #-8]!
   87a38:	f7ff ffe0 	bl	879fc <__aeabi_cdcmpeq>
   87a3c:	bf94      	ite	ls
   87a3e:	2001      	movls	r0, #1
   87a40:	2000      	movhi	r0, #0
   87a42:	f85d fb08 	ldr.w	pc, [sp], #8
   87a46:	bf00      	nop

00087a48 <__aeabi_dcmpge>:
   87a48:	f84d ed08 	str.w	lr, [sp, #-8]!
   87a4c:	f7ff ffce 	bl	879ec <__aeabi_cdrcmple>
   87a50:	bf94      	ite	ls
   87a52:	2001      	movls	r0, #1
   87a54:	2000      	movhi	r0, #0
   87a56:	f85d fb08 	ldr.w	pc, [sp], #8
   87a5a:	bf00      	nop

00087a5c <__aeabi_dcmpgt>:
   87a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   87a60:	f7ff ffc4 	bl	879ec <__aeabi_cdrcmple>
   87a64:	bf34      	ite	cc
   87a66:	2001      	movcc	r0, #1
   87a68:	2000      	movcs	r0, #0
   87a6a:	f85d fb08 	ldr.w	pc, [sp], #8
   87a6e:	bf00      	nop

00087a70 <__aeabi_dcmpun>:
   87a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   87a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87a78:	d102      	bne.n	87a80 <__aeabi_dcmpun+0x10>
   87a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   87a7e:	d10a      	bne.n	87a96 <__aeabi_dcmpun+0x26>
   87a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   87a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87a88:	d102      	bne.n	87a90 <__aeabi_dcmpun+0x20>
   87a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   87a8e:	d102      	bne.n	87a96 <__aeabi_dcmpun+0x26>
   87a90:	f04f 0000 	mov.w	r0, #0
   87a94:	4770      	bx	lr
   87a96:	f04f 0001 	mov.w	r0, #1
   87a9a:	4770      	bx	lr

00087a9c <__aeabi_d2iz>:
   87a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   87aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   87aa4:	d215      	bcs.n	87ad2 <__aeabi_d2iz+0x36>
   87aa6:	d511      	bpl.n	87acc <__aeabi_d2iz+0x30>
   87aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   87aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   87ab0:	d912      	bls.n	87ad8 <__aeabi_d2iz+0x3c>
   87ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   87ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   87aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   87abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   87ac2:	fa23 f002 	lsr.w	r0, r3, r2
   87ac6:	bf18      	it	ne
   87ac8:	4240      	negne	r0, r0
   87aca:	4770      	bx	lr
   87acc:	f04f 0000 	mov.w	r0, #0
   87ad0:	4770      	bx	lr
   87ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   87ad6:	d105      	bne.n	87ae4 <__aeabi_d2iz+0x48>
   87ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   87adc:	bf08      	it	eq
   87ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   87ae2:	4770      	bx	lr
   87ae4:	f04f 0000 	mov.w	r0, #0
   87ae8:	4770      	bx	lr
   87aea:	bf00      	nop

00087aec <__aeabi_uldivmod>:
   87aec:	b953      	cbnz	r3, 87b04 <__aeabi_uldivmod+0x18>
   87aee:	b94a      	cbnz	r2, 87b04 <__aeabi_uldivmod+0x18>
   87af0:	2900      	cmp	r1, #0
   87af2:	bf08      	it	eq
   87af4:	2800      	cmpeq	r0, #0
   87af6:	bf1c      	itt	ne
   87af8:	f04f 31ff 	movne.w	r1, #4294967295
   87afc:	f04f 30ff 	movne.w	r0, #4294967295
   87b00:	f000 b97a 	b.w	87df8 <__aeabi_idiv0>
   87b04:	f1ad 0c08 	sub.w	ip, sp, #8
   87b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   87b0c:	f000 f806 	bl	87b1c <__udivmoddi4>
   87b10:	f8dd e004 	ldr.w	lr, [sp, #4]
   87b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87b18:	b004      	add	sp, #16
   87b1a:	4770      	bx	lr

00087b1c <__udivmoddi4>:
   87b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87b20:	468c      	mov	ip, r1
   87b22:	460e      	mov	r6, r1
   87b24:	4604      	mov	r4, r0
   87b26:	9d08      	ldr	r5, [sp, #32]
   87b28:	2b00      	cmp	r3, #0
   87b2a:	d150      	bne.n	87bce <__udivmoddi4+0xb2>
   87b2c:	428a      	cmp	r2, r1
   87b2e:	4617      	mov	r7, r2
   87b30:	d96c      	bls.n	87c0c <__udivmoddi4+0xf0>
   87b32:	fab2 fe82 	clz	lr, r2
   87b36:	f1be 0f00 	cmp.w	lr, #0
   87b3a:	d00b      	beq.n	87b54 <__udivmoddi4+0x38>
   87b3c:	f1ce 0c20 	rsb	ip, lr, #32
   87b40:	fa01 f60e 	lsl.w	r6, r1, lr
   87b44:	fa20 fc0c 	lsr.w	ip, r0, ip
   87b48:	fa02 f70e 	lsl.w	r7, r2, lr
   87b4c:	ea4c 0c06 	orr.w	ip, ip, r6
   87b50:	fa00 f40e 	lsl.w	r4, r0, lr
   87b54:	0c3a      	lsrs	r2, r7, #16
   87b56:	fbbc f9f2 	udiv	r9, ip, r2
   87b5a:	b2bb      	uxth	r3, r7
   87b5c:	fb02 cc19 	mls	ip, r2, r9, ip
   87b60:	fb09 fa03 	mul.w	sl, r9, r3
   87b64:	ea4f 4814 	mov.w	r8, r4, lsr #16
   87b68:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   87b6c:	45b2      	cmp	sl, r6
   87b6e:	d90a      	bls.n	87b86 <__udivmoddi4+0x6a>
   87b70:	19f6      	adds	r6, r6, r7
   87b72:	f109 31ff 	add.w	r1, r9, #4294967295
   87b76:	f080 8125 	bcs.w	87dc4 <__udivmoddi4+0x2a8>
   87b7a:	45b2      	cmp	sl, r6
   87b7c:	f240 8122 	bls.w	87dc4 <__udivmoddi4+0x2a8>
   87b80:	f1a9 0902 	sub.w	r9, r9, #2
   87b84:	443e      	add	r6, r7
   87b86:	eba6 060a 	sub.w	r6, r6, sl
   87b8a:	fbb6 f0f2 	udiv	r0, r6, r2
   87b8e:	fb02 6610 	mls	r6, r2, r0, r6
   87b92:	fb00 f303 	mul.w	r3, r0, r3
   87b96:	b2a4      	uxth	r4, r4
   87b98:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   87b9c:	42a3      	cmp	r3, r4
   87b9e:	d909      	bls.n	87bb4 <__udivmoddi4+0x98>
   87ba0:	19e4      	adds	r4, r4, r7
   87ba2:	f100 32ff 	add.w	r2, r0, #4294967295
   87ba6:	f080 810b 	bcs.w	87dc0 <__udivmoddi4+0x2a4>
   87baa:	42a3      	cmp	r3, r4
   87bac:	f240 8108 	bls.w	87dc0 <__udivmoddi4+0x2a4>
   87bb0:	3802      	subs	r0, #2
   87bb2:	443c      	add	r4, r7
   87bb4:	2100      	movs	r1, #0
   87bb6:	1ae4      	subs	r4, r4, r3
   87bb8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   87bbc:	2d00      	cmp	r5, #0
   87bbe:	d062      	beq.n	87c86 <__udivmoddi4+0x16a>
   87bc0:	2300      	movs	r3, #0
   87bc2:	fa24 f40e 	lsr.w	r4, r4, lr
   87bc6:	602c      	str	r4, [r5, #0]
   87bc8:	606b      	str	r3, [r5, #4]
   87bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87bce:	428b      	cmp	r3, r1
   87bd0:	d907      	bls.n	87be2 <__udivmoddi4+0xc6>
   87bd2:	2d00      	cmp	r5, #0
   87bd4:	d055      	beq.n	87c82 <__udivmoddi4+0x166>
   87bd6:	2100      	movs	r1, #0
   87bd8:	e885 0041 	stmia.w	r5, {r0, r6}
   87bdc:	4608      	mov	r0, r1
   87bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87be2:	fab3 f183 	clz	r1, r3
   87be6:	2900      	cmp	r1, #0
   87be8:	f040 808f 	bne.w	87d0a <__udivmoddi4+0x1ee>
   87bec:	42b3      	cmp	r3, r6
   87bee:	d302      	bcc.n	87bf6 <__udivmoddi4+0xda>
   87bf0:	4282      	cmp	r2, r0
   87bf2:	f200 80fc 	bhi.w	87dee <__udivmoddi4+0x2d2>
   87bf6:	1a84      	subs	r4, r0, r2
   87bf8:	eb66 0603 	sbc.w	r6, r6, r3
   87bfc:	2001      	movs	r0, #1
   87bfe:	46b4      	mov	ip, r6
   87c00:	2d00      	cmp	r5, #0
   87c02:	d040      	beq.n	87c86 <__udivmoddi4+0x16a>
   87c04:	e885 1010 	stmia.w	r5, {r4, ip}
   87c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87c0c:	b912      	cbnz	r2, 87c14 <__udivmoddi4+0xf8>
   87c0e:	2701      	movs	r7, #1
   87c10:	fbb7 f7f2 	udiv	r7, r7, r2
   87c14:	fab7 fe87 	clz	lr, r7
   87c18:	f1be 0f00 	cmp.w	lr, #0
   87c1c:	d135      	bne.n	87c8a <__udivmoddi4+0x16e>
   87c1e:	2101      	movs	r1, #1
   87c20:	1bf6      	subs	r6, r6, r7
   87c22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   87c26:	fa1f f887 	uxth.w	r8, r7
   87c2a:	fbb6 f2fc 	udiv	r2, r6, ip
   87c2e:	fb0c 6612 	mls	r6, ip, r2, r6
   87c32:	fb08 f002 	mul.w	r0, r8, r2
   87c36:	0c23      	lsrs	r3, r4, #16
   87c38:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   87c3c:	42b0      	cmp	r0, r6
   87c3e:	d907      	bls.n	87c50 <__udivmoddi4+0x134>
   87c40:	19f6      	adds	r6, r6, r7
   87c42:	f102 33ff 	add.w	r3, r2, #4294967295
   87c46:	d202      	bcs.n	87c4e <__udivmoddi4+0x132>
   87c48:	42b0      	cmp	r0, r6
   87c4a:	f200 80d2 	bhi.w	87df2 <__udivmoddi4+0x2d6>
   87c4e:	461a      	mov	r2, r3
   87c50:	1a36      	subs	r6, r6, r0
   87c52:	fbb6 f0fc 	udiv	r0, r6, ip
   87c56:	fb0c 6610 	mls	r6, ip, r0, r6
   87c5a:	fb08 f800 	mul.w	r8, r8, r0
   87c5e:	b2a3      	uxth	r3, r4
   87c60:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   87c64:	45a0      	cmp	r8, r4
   87c66:	d907      	bls.n	87c78 <__udivmoddi4+0x15c>
   87c68:	19e4      	adds	r4, r4, r7
   87c6a:	f100 33ff 	add.w	r3, r0, #4294967295
   87c6e:	d202      	bcs.n	87c76 <__udivmoddi4+0x15a>
   87c70:	45a0      	cmp	r8, r4
   87c72:	f200 80b9 	bhi.w	87de8 <__udivmoddi4+0x2cc>
   87c76:	4618      	mov	r0, r3
   87c78:	eba4 0408 	sub.w	r4, r4, r8
   87c7c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   87c80:	e79c      	b.n	87bbc <__udivmoddi4+0xa0>
   87c82:	4629      	mov	r1, r5
   87c84:	4628      	mov	r0, r5
   87c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87c8a:	fa07 f70e 	lsl.w	r7, r7, lr
   87c8e:	f1ce 0320 	rsb	r3, lr, #32
   87c92:	fa26 f203 	lsr.w	r2, r6, r3
   87c96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   87c9a:	fbb2 f1fc 	udiv	r1, r2, ip
   87c9e:	fa1f f887 	uxth.w	r8, r7
   87ca2:	fb0c 2211 	mls	r2, ip, r1, r2
   87ca6:	fa06 f60e 	lsl.w	r6, r6, lr
   87caa:	fa20 f303 	lsr.w	r3, r0, r3
   87cae:	fb01 f908 	mul.w	r9, r1, r8
   87cb2:	4333      	orrs	r3, r6
   87cb4:	0c1e      	lsrs	r6, r3, #16
   87cb6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   87cba:	45b1      	cmp	r9, r6
   87cbc:	fa00 f40e 	lsl.w	r4, r0, lr
   87cc0:	d909      	bls.n	87cd6 <__udivmoddi4+0x1ba>
   87cc2:	19f6      	adds	r6, r6, r7
   87cc4:	f101 32ff 	add.w	r2, r1, #4294967295
   87cc8:	f080 808c 	bcs.w	87de4 <__udivmoddi4+0x2c8>
   87ccc:	45b1      	cmp	r9, r6
   87cce:	f240 8089 	bls.w	87de4 <__udivmoddi4+0x2c8>
   87cd2:	3902      	subs	r1, #2
   87cd4:	443e      	add	r6, r7
   87cd6:	eba6 0609 	sub.w	r6, r6, r9
   87cda:	fbb6 f0fc 	udiv	r0, r6, ip
   87cde:	fb0c 6210 	mls	r2, ip, r0, r6
   87ce2:	fb00 f908 	mul.w	r9, r0, r8
   87ce6:	b29e      	uxth	r6, r3
   87ce8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   87cec:	45b1      	cmp	r9, r6
   87cee:	d907      	bls.n	87d00 <__udivmoddi4+0x1e4>
   87cf0:	19f6      	adds	r6, r6, r7
   87cf2:	f100 33ff 	add.w	r3, r0, #4294967295
   87cf6:	d271      	bcs.n	87ddc <__udivmoddi4+0x2c0>
   87cf8:	45b1      	cmp	r9, r6
   87cfa:	d96f      	bls.n	87ddc <__udivmoddi4+0x2c0>
   87cfc:	3802      	subs	r0, #2
   87cfe:	443e      	add	r6, r7
   87d00:	eba6 0609 	sub.w	r6, r6, r9
   87d04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   87d08:	e78f      	b.n	87c2a <__udivmoddi4+0x10e>
   87d0a:	f1c1 0720 	rsb	r7, r1, #32
   87d0e:	fa22 f807 	lsr.w	r8, r2, r7
   87d12:	408b      	lsls	r3, r1
   87d14:	ea48 0303 	orr.w	r3, r8, r3
   87d18:	fa26 f407 	lsr.w	r4, r6, r7
   87d1c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   87d20:	fbb4 f9fe 	udiv	r9, r4, lr
   87d24:	fa1f fc83 	uxth.w	ip, r3
   87d28:	fb0e 4419 	mls	r4, lr, r9, r4
   87d2c:	408e      	lsls	r6, r1
   87d2e:	fa20 f807 	lsr.w	r8, r0, r7
   87d32:	fb09 fa0c 	mul.w	sl, r9, ip
   87d36:	ea48 0806 	orr.w	r8, r8, r6
   87d3a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   87d3e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   87d42:	45a2      	cmp	sl, r4
   87d44:	fa02 f201 	lsl.w	r2, r2, r1
   87d48:	fa00 f601 	lsl.w	r6, r0, r1
   87d4c:	d908      	bls.n	87d60 <__udivmoddi4+0x244>
   87d4e:	18e4      	adds	r4, r4, r3
   87d50:	f109 30ff 	add.w	r0, r9, #4294967295
   87d54:	d244      	bcs.n	87de0 <__udivmoddi4+0x2c4>
   87d56:	45a2      	cmp	sl, r4
   87d58:	d942      	bls.n	87de0 <__udivmoddi4+0x2c4>
   87d5a:	f1a9 0902 	sub.w	r9, r9, #2
   87d5e:	441c      	add	r4, r3
   87d60:	eba4 040a 	sub.w	r4, r4, sl
   87d64:	fbb4 f0fe 	udiv	r0, r4, lr
   87d68:	fb0e 4410 	mls	r4, lr, r0, r4
   87d6c:	fb00 fc0c 	mul.w	ip, r0, ip
   87d70:	fa1f f888 	uxth.w	r8, r8
   87d74:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   87d78:	45a4      	cmp	ip, r4
   87d7a:	d907      	bls.n	87d8c <__udivmoddi4+0x270>
   87d7c:	18e4      	adds	r4, r4, r3
   87d7e:	f100 3eff 	add.w	lr, r0, #4294967295
   87d82:	d229      	bcs.n	87dd8 <__udivmoddi4+0x2bc>
   87d84:	45a4      	cmp	ip, r4
   87d86:	d927      	bls.n	87dd8 <__udivmoddi4+0x2bc>
   87d88:	3802      	subs	r0, #2
   87d8a:	441c      	add	r4, r3
   87d8c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   87d90:	fba0 8902 	umull	r8, r9, r0, r2
   87d94:	eba4 0c0c 	sub.w	ip, r4, ip
   87d98:	45cc      	cmp	ip, r9
   87d9a:	46c2      	mov	sl, r8
   87d9c:	46ce      	mov	lr, r9
   87d9e:	d315      	bcc.n	87dcc <__udivmoddi4+0x2b0>
   87da0:	d012      	beq.n	87dc8 <__udivmoddi4+0x2ac>
   87da2:	b155      	cbz	r5, 87dba <__udivmoddi4+0x29e>
   87da4:	ebb6 030a 	subs.w	r3, r6, sl
   87da8:	eb6c 060e 	sbc.w	r6, ip, lr
   87dac:	fa06 f707 	lsl.w	r7, r6, r7
   87db0:	40cb      	lsrs	r3, r1
   87db2:	431f      	orrs	r7, r3
   87db4:	40ce      	lsrs	r6, r1
   87db6:	602f      	str	r7, [r5, #0]
   87db8:	606e      	str	r6, [r5, #4]
   87dba:	2100      	movs	r1, #0
   87dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87dc0:	4610      	mov	r0, r2
   87dc2:	e6f7      	b.n	87bb4 <__udivmoddi4+0x98>
   87dc4:	4689      	mov	r9, r1
   87dc6:	e6de      	b.n	87b86 <__udivmoddi4+0x6a>
   87dc8:	4546      	cmp	r6, r8
   87dca:	d2ea      	bcs.n	87da2 <__udivmoddi4+0x286>
   87dcc:	ebb8 0a02 	subs.w	sl, r8, r2
   87dd0:	eb69 0e03 	sbc.w	lr, r9, r3
   87dd4:	3801      	subs	r0, #1
   87dd6:	e7e4      	b.n	87da2 <__udivmoddi4+0x286>
   87dd8:	4670      	mov	r0, lr
   87dda:	e7d7      	b.n	87d8c <__udivmoddi4+0x270>
   87ddc:	4618      	mov	r0, r3
   87dde:	e78f      	b.n	87d00 <__udivmoddi4+0x1e4>
   87de0:	4681      	mov	r9, r0
   87de2:	e7bd      	b.n	87d60 <__udivmoddi4+0x244>
   87de4:	4611      	mov	r1, r2
   87de6:	e776      	b.n	87cd6 <__udivmoddi4+0x1ba>
   87de8:	3802      	subs	r0, #2
   87dea:	443c      	add	r4, r7
   87dec:	e744      	b.n	87c78 <__udivmoddi4+0x15c>
   87dee:	4608      	mov	r0, r1
   87df0:	e706      	b.n	87c00 <__udivmoddi4+0xe4>
   87df2:	3a02      	subs	r2, #2
   87df4:	443e      	add	r6, r7
   87df6:	e72b      	b.n	87c50 <__udivmoddi4+0x134>

00087df8 <__aeabi_idiv0>:
   87df8:	4770      	bx	lr
   87dfa:	bf00      	nop
   87dfc:	000f4240 	.word	0x000f4240
   87e00:	000000c0 	.word	0x000000c0
	...
   87e0c:	00643125 	.word	0x00643125
   87e10:	00643225 	.word	0x00643225
   87e14:	53202020 	.word	0x53202020
   87e18:	69747465 	.word	0x69747465
   87e1c:	2073676e 	.word	0x2073676e
   87e20:	00000020 	.word	0x00000020
   87e24:	626f5220 	.word	0x626f5220
   87e28:	4920746f 	.word	0x4920746f
   87e2c:	00003a44 	.word	0x00003a44
   87e30:	65705320 	.word	0x65705320
   87e34:	003a6465 	.word	0x003a6465
   87e38:	46495720 	.word	0x46495720
   87e3c:	00003a49 	.word	0x00003a49
   87e40:	6c614320 	.word	0x6c614320
   87e44:	61726269 	.word	0x61726269
   87e48:	00006574 	.word	0x00006574
   87e4c:	74655320 	.word	0x74655320
   87e50:	65696620 	.word	0x65696620
   87e54:	7320646c 	.word	0x7320646c
   87e58:	20657a69 	.word	0x20657a69
   87e5c:	00666572 	.word	0x00666572
   87e60:	00000000 	.word	0x00000000
   87e64:	20202020 	.word	0x20202020
   87e68:	74614d20 	.word	0x74614d20
   87e6c:	20206863 	.word	0x20206863
   87e70:	00000000 	.word	0x00000000
   87e74:	61745320 	.word	0x61745320
   87e78:	6d207472 	.word	0x6d207472
   87e7c:	68637461 	.word	0x68637461
   87e80:	00000000 	.word	0x00000000
   87e84:	6e655320 	.word	0x6e655320
   87e88:	20726f73 	.word	0x20726f73
   87e8c:	756c6176 	.word	0x756c6176
   87e90:	00007365 	.word	0x00007365
   87e94:	69724420 	.word	0x69724420
   87e98:	61206576 	.word	0x61206576
   87e9c:	656c676e 	.word	0x656c676e
   87ea0:	64697020 	.word	0x64697020
   87ea4:	00000000 	.word	0x00000000
   87ea8:	20202020 	.word	0x20202020
   87eac:	73655420 	.word	0x73655420
   87eb0:	00007374 	.word	0x00007374
   87eb4:	72755420 	.word	0x72755420
   87eb8:	6f74206e 	.word	0x6f74206e
   87ebc:	61747320 	.word	0x61747320
   87ec0:	00007472 	.word	0x00007472
   87ec4:	766f4d20 	.word	0x766f4d20
   87ec8:	6f742065 	.word	0x6f742065
   87ecc:	64696d20 	.word	0x64696d20
   87ed0:	00656c64 	.word	0x00656c64
   87ed4:	766f4d20 	.word	0x766f4d20
   87ed8:	6f742065 	.word	0x6f742065
   87edc:	6c616220 	.word	0x6c616220
   87ee0:	0000006c 	.word	0x0000006c
   87ee4:	49505220 	.word	0x49505220
   87ee8:	00000000 	.word	0x00000000
   87eec:	6f745320 	.word	0x6f745320
   87ef0:	6e6f2070 	.word	0x6e6f2070
   87ef4:	6e696c20 	.word	0x6e696c20
   87ef8:	00000065 	.word	0x00000065
   87efc:	636e4520 	.word	0x636e4520
   87f00:	7265646f 	.word	0x7265646f
   87f04:	73657420 	.word	0x73657420
   87f08:	00000074 	.word	0x00000074
   87f0c:	00087e14 	.word	0x00087e14
   87f10:	00087e24 	.word	0x00087e24
   87f14:	00087e30 	.word	0x00087e30
   87f18:	00087e38 	.word	0x00087e38
   87f1c:	00087e40 	.word	0x00087e40
   87f20:	00087e4c 	.word	0x00087e4c
   87f24:	00087e60 	.word	0x00087e60
   87f28:	00087e60 	.word	0x00087e60
   87f2c:	00087e64 	.word	0x00087e64
   87f30:	00087e74 	.word	0x00087e74
   87f34:	00087e84 	.word	0x00087e84
   87f38:	00087e94 	.word	0x00087e94
   87f3c:	00087e60 	.word	0x00087e60
   87f40:	00087e60 	.word	0x00087e60
   87f44:	00087e60 	.word	0x00087e60
   87f48:	00087e60 	.word	0x00087e60
   87f4c:	00087ea8 	.word	0x00087ea8
   87f50:	00087eb4 	.word	0x00087eb4
   87f54:	00087ec4 	.word	0x00087ec4
   87f58:	00087ed4 	.word	0x00087ed4
   87f5c:	00087ee4 	.word	0x00087ee4
   87f60:	00087eec 	.word	0x00087eec
   87f64:	00087efc 	.word	0x00087efc
   87f68:	00087e60 	.word	0x00087e60
   87f6c:	0000003e 	.word	0x0000003e
   87f70:	00000020 	.word	0x00000020
   87f74:	0000003c 	.word	0x0000003c
   87f78:	25753325 	.word	0x25753325
   87f7c:	00000025 	.word	0x00000025
   87f80:	25753225 	.word	0x25753225
   87f84:	00000025 	.word	0x00000025
   87f88:	25753125 	.word	0x25753125
   87f8c:	00000025 	.word	0x00000025
   87f90:	746f6f62 	.word	0x746f6f62
   87f94:	20676e69 	.word	0x20676e69
   87f98:	534f6f6e 	.word	0x534f6f6e
   87f9c:	00202020 	.word	0x00202020
   87fa0:	0000002e 	.word	0x0000002e

00087fa4 <_global_impure_ptr>:
   87fa4:	200701a8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   87fb4:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   87fc4:	46454443 00000000 33323130 37363534     CDEF....01234567
   87fd4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   87fe4:	0000296c 00000030                       l)..0...

00087fec <blanks.7223>:
   87fec:	20202020 20202020 20202020 20202020                     

00087ffc <zeroes.7224>:
   87ffc:	30303030 30303030 30303030 30303030     0000000000000000
   8800c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8801c:	00000000                                ....

00088020 <__mprec_bigtens>:
   88020:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   88030:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   88040:	7f73bf3c 75154fdd                       <.s..O.u

00088048 <__mprec_tens>:
   88048:	00000000 3ff00000 00000000 40240000     .......?......$@
   88058:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   88068:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   88078:	00000000 412e8480 00000000 416312d0     .......A......cA
   88088:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   88098:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   880a8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   880b8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   880c8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   880d8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   880e8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   880f8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   88108:	79d99db4 44ea7843                       ...yCx.D

00088110 <p05.6055>:
   88110:	00000005 00000019 0000007d 00000043     ........}...C...
   88120:	49534f50 00000058 0000002e              POSIX.......

0008812c <_ctype_>:
   8812c:	20202000 20202020 28282020 20282828     .         ((((( 
   8813c:	20202020 20202020 20202020 20202020                     
   8814c:	10108820 10101010 10101010 10101010      ...............
   8815c:	04040410 04040404 10040404 10101010     ................
   8816c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8817c:	01010101 01010101 01010101 10101010     ................
   8818c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8819c:	02020202 02020202 02020202 10101010     ................
   881ac:	00000020 00000000 00000000 00000000      ...............
	...

00088230 <_init>:
   88230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88232:	bf00      	nop
   88234:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88236:	bc08      	pop	{r3}
   88238:	469e      	mov	lr, r3
   8823a:	4770      	bx	lr

0008823c <__init_array_start>:
   8823c:	00084cdd 	.word	0x00084cdd

00088240 <__frame_dummy_init_array_entry>:
   88240:	00080119                                ....

00088244 <_fini>:
   88244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88246:	bf00      	nop
   88248:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8824a:	bc08      	pop	{r3}
   8824c:	469e      	mov	lr, r3
   8824e:	4770      	bx	lr

00088250 <__fini_array_start>:
   88250:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	20070198 	.word	0x20070198
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <print_menu>:
2007018c:	010f0101                                         .

2007018d <rbt_id>:
2007018d:	01010f01                                         .

2007018e <speed_preset>:
2007018e:	0101010f                                         .

2007018f <act_cursor_line_on_lcd>:
2007018f:	01010101                                         .

20070190 <prev_cursor_line_on_lcd>:
20070190:	01010101                                         .

20070191 <act_cursor_line>:
20070191:	08010101                                         .

20070192 <prev_cursor_line>:
20070192:	01080101                                         .

20070193 <min_cursor_line>:
20070193:	00010801                                         .

20070194 <max_cursor_line>:
20070194:	00000108                                         .

20070195 <menu_main_column>:
20070195:	00000001                                         ...

20070198 <SystemCoreClock>:
20070198:	003d0900                                ..=.

2007019c <update_dots>:
2007019c:	00000001                                ....

200701a0 <_impure_ptr>:
200701a0:	200701a8 00000000                       ... ....

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	20071038                                8.. 

200705d4 <__malloc_av_>:
	...
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 

200709dc <__malloc_sbrk_base>:
200709dc:	ffffffff                                ....

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__global_locale>:
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00000043 00000000 00000000 00000000     C...............
	...
20070ac4:	000871b5 00086d55 00000000 0008812c     .q..Um......,...
20070ad4:	00088128 00087fc8 00087fc8 00087fc8     (...............
20070ae4:	00087fc8 00087fc8 00087fc8 00087fc8     ................
20070af4:	00087fc8 00087fc8 ffffffff ffffffff     ................
20070b04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
