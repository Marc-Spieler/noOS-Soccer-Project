
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000088b4  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000888b4  000888b4  000188b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b50  20070000  000888bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000350  20070b50  0008940c  00020b50  2**2
                  ALLOC
  4 .stack        00002000  20070ea0  0008975c  00020b50  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b79  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001726f  00000000  00000000  00020bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003186  00000000  00000000  00037e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000708e  00000000  00000000  0003afc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c78  00000000  00000000  00042055  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000be8  00000000  00000000  00042ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000073a3  00000000  00000000  000438b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010398  00000000  00000000  0004ac58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062580  00000000  00000000  0005aff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004038  00000000  00000000  000bd570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	a0 2e 07 20 0d 33 08 00 05 33 08 00 05 33 08 00     ... .3...3...3..
   80010:	05 33 08 00 05 33 08 00 05 33 08 00 00 00 00 00     .3...3...3......
	...
   8002c:	05 33 08 00 05 33 08 00 00 00 00 00 05 33 08 00     .3...3.......3..
   8003c:	79 23 08 00 05 33 08 00 05 33 08 00 05 33 08 00     y#...3...3...3..
   8004c:	05 33 08 00 05 33 08 00 05 33 08 00 05 33 08 00     .3...3...3...3..
   8005c:	05 33 08 00 05 33 08 00 05 33 08 00 00 00 00 00     .3...3...3......
   8006c:	05 33 08 00 05 33 08 00 05 33 08 00 05 33 08 00     .3...3...3...3..
	...
   80084:	05 33 08 00 05 33 08 00 05 33 08 00 05 33 08 00     .3...3...3...3..
   80094:	05 33 08 00 95 0c 08 00 05 33 08 00 05 33 08 00     .3.......3...3..
   800a4:	00 00 00 00 05 33 08 00 05 33 08 00 05 33 08 00     .....3...3...3..
   800b4:	05 33 08 00 05 33 08 00 05 33 08 00 05 33 08 00     .3...3...3...3..
   800c4:	05 33 08 00 05 33 08 00 05 33 08 00 05 33 08 00     .3...3...3...3..
   800d4:	05 33 08 00 05 33 08 00 b5 07 08 00 05 33 08 00     .3...3.......3..
   800e4:	05 33 08 00 05 33 08 00 05 33 08 00 05 33 08 00     .3...3...3...3..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b50 	.word	0x20070b50
   80110:	00000000 	.word	0x00000000
   80114:	000888bc 	.word	0x000888bc

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000888bc 	.word	0x000888bc
   80154:	20070b54 	.word	0x20070b54
   80158:	000888bc 	.word	0x000888bc
   8015c:	00000000 	.word	0x00000000

00080160 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   80160:	b580      	push	{r7, lr}
   80162:	b082      	sub	sp, #8
   80164:	af00      	add	r7, sp, #0
   80166:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   80168:	6878      	ldr	r0, [r7, #4]
   8016a:	4b04      	ldr	r3, [pc, #16]	; (8017c <usart_spi_enable+0x1c>)
   8016c:	4798      	blx	r3
	usart_enable_rx(p_usart);
   8016e:	6878      	ldr	r0, [r7, #4]
   80170:	4b03      	ldr	r3, [pc, #12]	; (80180 <usart_spi_enable+0x20>)
   80172:	4798      	blx	r3
}
   80174:	bf00      	nop
   80176:	3708      	adds	r7, #8
   80178:	46bd      	mov	sp, r7
   8017a:	bd80      	pop	{r7, pc}
   8017c:	00080411 	.word	0x00080411
   80180:	00080459 	.word	0x00080459

00080184 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   80184:	b580      	push	{r7, lr}
   80186:	b082      	sub	sp, #8
   80188:	af00      	add	r7, sp, #0
   8018a:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   8018c:	6878      	ldr	r0, [r7, #4]
   8018e:	4b04      	ldr	r3, [pc, #16]	; (801a0 <usart_spi_disable+0x1c>)
   80190:	4798      	blx	r3
	usart_disable_rx(p_usart);
   80192:	6878      	ldr	r0, [r7, #4]
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <usart_spi_disable+0x20>)
   80196:	4798      	blx	r3
}
   80198:	bf00      	nop
   8019a:	3708      	adds	r7, #8
   8019c:	46bd      	mov	sp, r7
   8019e:	bd80      	pop	{r7, pc}
   801a0:	00080429 	.word	0x00080429
   801a4:	00080471 	.word	0x00080471

000801a8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801a8:	b480      	push	{r7}
   801aa:	b085      	sub	sp, #20
   801ac:	af00      	add	r7, sp, #0
   801ae:	60f8      	str	r0, [r7, #12]
   801b0:	60b9      	str	r1, [r7, #8]
   801b2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801b4:	68bb      	ldr	r3, [r7, #8]
   801b6:	2b00      	cmp	r3, #0
   801b8:	d007      	beq.n	801ca <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   801ba:	68bb      	ldr	r3, [r7, #8]
   801bc:	681a      	ldr	r2, [r3, #0]
   801be:	68fb      	ldr	r3, [r7, #12]
   801c0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   801c2:	68bb      	ldr	r3, [r7, #8]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	68fb      	ldr	r3, [r7, #12]
   801c8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   801ca:	687b      	ldr	r3, [r7, #4]
   801cc:	2b00      	cmp	r3, #0
   801ce:	d007      	beq.n	801e0 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	681a      	ldr	r2, [r3, #0]
   801d4:	68fb      	ldr	r3, [r7, #12]
   801d6:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   801d8:	687b      	ldr	r3, [r7, #4]
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	68fb      	ldr	r3, [r7, #12]
   801de:	61da      	str	r2, [r3, #28]
	}
}
   801e0:	bf00      	nop
   801e2:	3714      	adds	r7, #20
   801e4:	46bd      	mov	sp, r7
   801e6:	bc80      	pop	{r7}
   801e8:	4770      	bx	lr

000801ea <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801ea:	b480      	push	{r7}
   801ec:	b085      	sub	sp, #20
   801ee:	af00      	add	r7, sp, #0
   801f0:	60f8      	str	r0, [r7, #12]
   801f2:	60b9      	str	r1, [r7, #8]
   801f4:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801f6:	68bb      	ldr	r3, [r7, #8]
   801f8:	2b00      	cmp	r3, #0
   801fa:	d007      	beq.n	8020c <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   801fc:	68bb      	ldr	r3, [r7, #8]
   801fe:	681a      	ldr	r2, [r3, #0]
   80200:	68fb      	ldr	r3, [r7, #12]
   80202:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   80204:	68bb      	ldr	r3, [r7, #8]
   80206:	685a      	ldr	r2, [r3, #4]
   80208:	68fb      	ldr	r3, [r7, #12]
   8020a:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b00      	cmp	r3, #0
   80210:	d007      	beq.n	80222 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   80212:	687b      	ldr	r3, [r7, #4]
   80214:	681a      	ldr	r2, [r3, #0]
   80216:	68fb      	ldr	r3, [r7, #12]
   80218:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   8021a:	687b      	ldr	r3, [r7, #4]
   8021c:	685a      	ldr	r2, [r3, #4]
   8021e:	68fb      	ldr	r3, [r7, #12]
   80220:	615a      	str	r2, [r3, #20]
	}
}
   80222:	bf00      	nop
   80224:	3714      	adds	r7, #20
   80226:	46bd      	mov	sp, r7
   80228:	bc80      	pop	{r7}
   8022a:	4770      	bx	lr

0008022c <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8022c:	b480      	push	{r7}
   8022e:	b083      	sub	sp, #12
   80230:	af00      	add	r7, sp, #0
   80232:	6078      	str	r0, [r7, #4]
   80234:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   80236:	683a      	ldr	r2, [r7, #0]
   80238:	f240 1301 	movw	r3, #257	; 0x101
   8023c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8023e:	687a      	ldr	r2, [r7, #4]
   80240:	6213      	str	r3, [r2, #32]
}
   80242:	bf00      	nop
   80244:	370c      	adds	r7, #12
   80246:	46bd      	mov	sp, r7
   80248:	bc80      	pop	{r7}
   8024a:	4770      	bx	lr

0008024c <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8024c:	b480      	push	{r7}
   8024e:	b083      	sub	sp, #12
   80250:	af00      	add	r7, sp, #0
   80252:	6078      	str	r0, [r7, #4]
   80254:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   80256:	683a      	ldr	r2, [r7, #0]
   80258:	f240 2302 	movw	r3, #514	; 0x202
   8025c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8025e:	687a      	ldr	r2, [r7, #4]
   80260:	6213      	str	r3, [r2, #32]
}
   80262:	bf00      	nop
   80264:	370c      	adds	r7, #12
   80266:	46bd      	mov	sp, r7
   80268:	bc80      	pop	{r7}
   8026a:	4770      	bx	lr

0008026c <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8026c:	b480      	push	{r7}
   8026e:	b087      	sub	sp, #28
   80270:	af00      	add	r7, sp, #0
   80272:	60f8      	str	r0, [r7, #12]
   80274:	60b9      	str	r1, [r7, #8]
   80276:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   80278:	68bb      	ldr	r3, [r7, #8]
   8027a:	085a      	lsrs	r2, r3, #1
   8027c:	687b      	ldr	r3, [r7, #4]
   8027e:	441a      	add	r2, r3
   80280:	68bb      	ldr	r3, [r7, #8]
   80282:	fbb2 f3f3 	udiv	r3, r2, r3
   80286:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   80288:	697b      	ldr	r3, [r7, #20]
   8028a:	2b03      	cmp	r3, #3
   8028c:	d903      	bls.n	80296 <usart_set_spi_master_baudrate+0x2a>
   8028e:	697b      	ldr	r3, [r7, #20]
   80290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   80294:	d301      	bcc.n	8029a <usart_set_spi_master_baudrate+0x2e>
		return 1;
   80296:	2301      	movs	r3, #1
   80298:	e003      	b.n	802a2 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   8029a:	68fb      	ldr	r3, [r7, #12]
   8029c:	697a      	ldr	r2, [r7, #20]
   8029e:	621a      	str	r2, [r3, #32]

	return 0;
   802a0:	2300      	movs	r3, #0
}
   802a2:	4618      	mov	r0, r3
   802a4:	371c      	adds	r7, #28
   802a6:	46bd      	mov	sp, r7
   802a8:	bc80      	pop	{r7}
   802aa:	4770      	bx	lr

000802ac <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   802ac:	b580      	push	{r7, lr}
   802ae:	b082      	sub	sp, #8
   802b0:	af00      	add	r7, sp, #0
   802b2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   802b4:	6878      	ldr	r0, [r7, #4]
   802b6:	4b0d      	ldr	r3, [pc, #52]	; (802ec <usart_reset+0x40>)
   802b8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   802ba:	687b      	ldr	r3, [r7, #4]
   802bc:	2200      	movs	r2, #0
   802be:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   802c0:	687b      	ldr	r3, [r7, #4]
   802c2:	2200      	movs	r2, #0
   802c4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   802c6:	687b      	ldr	r3, [r7, #4]
   802c8:	2200      	movs	r2, #0
   802ca:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   802cc:	6878      	ldr	r0, [r7, #4]
   802ce:	4b08      	ldr	r3, [pc, #32]	; (802f0 <usart_reset+0x44>)
   802d0:	4798      	blx	r3
	usart_reset_rx(p_usart);
   802d2:	6878      	ldr	r0, [r7, #4]
   802d4:	4b07      	ldr	r3, [pc, #28]	; (802f4 <usart_reset+0x48>)
   802d6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   802d8:	6878      	ldr	r0, [r7, #4]
   802da:	4b07      	ldr	r3, [pc, #28]	; (802f8 <usart_reset+0x4c>)
   802dc:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   802de:	6878      	ldr	r0, [r7, #4]
   802e0:	4b06      	ldr	r3, [pc, #24]	; (802fc <usart_reset+0x50>)
   802e2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   802e4:	bf00      	nop
   802e6:	3708      	adds	r7, #8
   802e8:	46bd      	mov	sp, r7
   802ea:	bd80      	pop	{r7, pc}
   802ec:	00080509 	.word	0x00080509
   802f0:	00080441 	.word	0x00080441
   802f4:	00080489 	.word	0x00080489
   802f8:	000804a1 	.word	0x000804a1
   802fc:	000804bb 	.word	0x000804bb

00080300 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   80300:	b580      	push	{r7, lr}
   80302:	b084      	sub	sp, #16
   80304:	af00      	add	r7, sp, #0
   80306:	60f8      	str	r0, [r7, #12]
   80308:	60b9      	str	r1, [r7, #8]
   8030a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   8030c:	68f8      	ldr	r0, [r7, #12]
   8030e:	4b3d      	ldr	r3, [pc, #244]	; (80404 <usart_init_spi_master+0x104>)
   80310:	4798      	blx	r3

	ul_reg_val = 0;
   80312:	4b3d      	ldr	r3, [pc, #244]	; (80408 <usart_init_spi_master+0x108>)
   80314:	2200      	movs	r2, #0
   80316:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   80318:	68bb      	ldr	r3, [r7, #8]
   8031a:	2b00      	cmp	r3, #0
   8031c:	d00d      	beq.n	8033a <usart_init_spi_master+0x3a>
   8031e:	68bb      	ldr	r3, [r7, #8]
   80320:	689b      	ldr	r3, [r3, #8]
   80322:	2b03      	cmp	r3, #3
   80324:	d809      	bhi.n	8033a <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   80326:	68bb      	ldr	r3, [r7, #8]
   80328:	681b      	ldr	r3, [r3, #0]
   8032a:	687a      	ldr	r2, [r7, #4]
   8032c:	4619      	mov	r1, r3
   8032e:	68f8      	ldr	r0, [r7, #12]
   80330:	4b36      	ldr	r3, [pc, #216]	; (8040c <usart_init_spi_master+0x10c>)
   80332:	4798      	blx	r3
   80334:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   80336:	2b00      	cmp	r3, #0
   80338:	d001      	beq.n	8033e <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   8033a:	2301      	movs	r3, #1
   8033c:	e05d      	b.n	803fa <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   8033e:	68bb      	ldr	r3, [r7, #8]
   80340:	685a      	ldr	r2, [r3, #4]
   80342:	4b31      	ldr	r3, [pc, #196]	; (80408 <usart_init_spi_master+0x108>)
   80344:	681b      	ldr	r3, [r3, #0]
   80346:	4313      	orrs	r3, r2
   80348:	4a2f      	ldr	r2, [pc, #188]	; (80408 <usart_init_spi_master+0x108>)
   8034a:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   8034c:	68bb      	ldr	r3, [r7, #8]
   8034e:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   80350:	4b2d      	ldr	r3, [pc, #180]	; (80408 <usart_init_spi_master+0x108>)
   80352:	681b      	ldr	r3, [r3, #0]
   80354:	4313      	orrs	r3, r2
   80356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   8035a:	f043 030e 	orr.w	r3, r3, #14
   8035e:	4a2a      	ldr	r2, [pc, #168]	; (80408 <usart_init_spi_master+0x108>)
   80360:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   80362:	68bb      	ldr	r3, [r7, #8]
   80364:	689b      	ldr	r3, [r3, #8]
   80366:	2b03      	cmp	r3, #3
   80368:	d83e      	bhi.n	803e8 <usart_init_spi_master+0xe8>
   8036a:	a201      	add	r2, pc, #4	; (adr r2, 80370 <usart_init_spi_master+0x70>)
   8036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80370:	00080381 	.word	0x00080381
   80374:	0008039b 	.word	0x0008039b
   80378:	000803b5 	.word	0x000803b5
   8037c:	000803cf 	.word	0x000803cf
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   80380:	4b21      	ldr	r3, [pc, #132]	; (80408 <usart_init_spi_master+0x108>)
   80382:	681b      	ldr	r3, [r3, #0]
   80384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80388:	4a1f      	ldr	r2, [pc, #124]	; (80408 <usart_init_spi_master+0x108>)
   8038a:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8038c:	4b1e      	ldr	r3, [pc, #120]	; (80408 <usart_init_spi_master+0x108>)
   8038e:	681b      	ldr	r3, [r3, #0]
   80390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80394:	4a1c      	ldr	r2, [pc, #112]	; (80408 <usart_init_spi_master+0x108>)
   80396:	6013      	str	r3, [r2, #0]
		break;
   80398:	e027      	b.n	803ea <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8039a:	4b1b      	ldr	r3, [pc, #108]	; (80408 <usart_init_spi_master+0x108>)
   8039c:	681b      	ldr	r3, [r3, #0]
   8039e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   803a2:	4a19      	ldr	r2, [pc, #100]	; (80408 <usart_init_spi_master+0x108>)
   803a4:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   803a6:	4b18      	ldr	r3, [pc, #96]	; (80408 <usart_init_spi_master+0x108>)
   803a8:	681b      	ldr	r3, [r3, #0]
   803aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   803ae:	4a16      	ldr	r2, [pc, #88]	; (80408 <usart_init_spi_master+0x108>)
   803b0:	6013      	str	r3, [r2, #0]
		break;
   803b2:	e01a      	b.n	803ea <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   803b4:	4b14      	ldr	r3, [pc, #80]	; (80408 <usart_init_spi_master+0x108>)
   803b6:	681b      	ldr	r3, [r3, #0]
   803b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   803bc:	4a12      	ldr	r2, [pc, #72]	; (80408 <usart_init_spi_master+0x108>)
   803be:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   803c0:	4b11      	ldr	r3, [pc, #68]	; (80408 <usart_init_spi_master+0x108>)
   803c2:	681b      	ldr	r3, [r3, #0]
   803c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   803c8:	4a0f      	ldr	r2, [pc, #60]	; (80408 <usart_init_spi_master+0x108>)
   803ca:	6013      	str	r3, [r2, #0]
		break;
   803cc:	e00d      	b.n	803ea <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   803ce:	4b0e      	ldr	r3, [pc, #56]	; (80408 <usart_init_spi_master+0x108>)
   803d0:	681b      	ldr	r3, [r3, #0]
   803d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   803d6:	4a0c      	ldr	r2, [pc, #48]	; (80408 <usart_init_spi_master+0x108>)
   803d8:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   803da:	4b0b      	ldr	r3, [pc, #44]	; (80408 <usart_init_spi_master+0x108>)
   803dc:	681b      	ldr	r3, [r3, #0]
   803de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   803e2:	4a09      	ldr	r2, [pc, #36]	; (80408 <usart_init_spi_master+0x108>)
   803e4:	6013      	str	r3, [r2, #0]
		break;
   803e6:	e000      	b.n	803ea <usart_init_spi_master+0xea>

	default:
		break;
   803e8:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   803ea:	68fb      	ldr	r3, [r7, #12]
   803ec:	685a      	ldr	r2, [r3, #4]
   803ee:	4b06      	ldr	r3, [pc, #24]	; (80408 <usart_init_spi_master+0x108>)
   803f0:	681b      	ldr	r3, [r3, #0]
   803f2:	431a      	orrs	r2, r3
   803f4:	68fb      	ldr	r3, [r7, #12]
   803f6:	605a      	str	r2, [r3, #4]

	return 0;
   803f8:	2300      	movs	r3, #0
}
   803fa:	4618      	mov	r0, r3
   803fc:	3710      	adds	r7, #16
   803fe:	46bd      	mov	sp, r7
   80400:	bd80      	pop	{r7, pc}
   80402:	bf00      	nop
   80404:	000802ad 	.word	0x000802ad
   80408:	20070b6c 	.word	0x20070b6c
   8040c:	0008026d 	.word	0x0008026d

00080410 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   80410:	b480      	push	{r7}
   80412:	b083      	sub	sp, #12
   80414:	af00      	add	r7, sp, #0
   80416:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   80418:	687b      	ldr	r3, [r7, #4]
   8041a:	2240      	movs	r2, #64	; 0x40
   8041c:	601a      	str	r2, [r3, #0]
}
   8041e:	bf00      	nop
   80420:	370c      	adds	r7, #12
   80422:	46bd      	mov	sp, r7
   80424:	bc80      	pop	{r7}
   80426:	4770      	bx	lr

00080428 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   80428:	b480      	push	{r7}
   8042a:	b083      	sub	sp, #12
   8042c:	af00      	add	r7, sp, #0
   8042e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   80430:	687b      	ldr	r3, [r7, #4]
   80432:	2280      	movs	r2, #128	; 0x80
   80434:	601a      	str	r2, [r3, #0]
}
   80436:	bf00      	nop
   80438:	370c      	adds	r7, #12
   8043a:	46bd      	mov	sp, r7
   8043c:	bc80      	pop	{r7}
   8043e:	4770      	bx	lr

00080440 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   80440:	b480      	push	{r7}
   80442:	b083      	sub	sp, #12
   80444:	af00      	add	r7, sp, #0
   80446:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80448:	687b      	ldr	r3, [r7, #4]
   8044a:	2288      	movs	r2, #136	; 0x88
   8044c:	601a      	str	r2, [r3, #0]
}
   8044e:	bf00      	nop
   80450:	370c      	adds	r7, #12
   80452:	46bd      	mov	sp, r7
   80454:	bc80      	pop	{r7}
   80456:	4770      	bx	lr

00080458 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   80458:	b480      	push	{r7}
   8045a:	b083      	sub	sp, #12
   8045c:	af00      	add	r7, sp, #0
   8045e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   80460:	687b      	ldr	r3, [r7, #4]
   80462:	2210      	movs	r2, #16
   80464:	601a      	str	r2, [r3, #0]
}
   80466:	bf00      	nop
   80468:	370c      	adds	r7, #12
   8046a:	46bd      	mov	sp, r7
   8046c:	bc80      	pop	{r7}
   8046e:	4770      	bx	lr

00080470 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   80470:	b480      	push	{r7}
   80472:	b083      	sub	sp, #12
   80474:	af00      	add	r7, sp, #0
   80476:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   80478:	687b      	ldr	r3, [r7, #4]
   8047a:	2220      	movs	r2, #32
   8047c:	601a      	str	r2, [r3, #0]
}
   8047e:	bf00      	nop
   80480:	370c      	adds	r7, #12
   80482:	46bd      	mov	sp, r7
   80484:	bc80      	pop	{r7}
   80486:	4770      	bx	lr

00080488 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   80488:	b480      	push	{r7}
   8048a:	b083      	sub	sp, #12
   8048c:	af00      	add	r7, sp, #0
   8048e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80490:	687b      	ldr	r3, [r7, #4]
   80492:	2224      	movs	r2, #36	; 0x24
   80494:	601a      	str	r2, [r3, #0]
}
   80496:	bf00      	nop
   80498:	370c      	adds	r7, #12
   8049a:	46bd      	mov	sp, r7
   8049c:	bc80      	pop	{r7}
   8049e:	4770      	bx	lr

000804a0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   804a0:	b480      	push	{r7}
   804a2:	b083      	sub	sp, #12
   804a4:	af00      	add	r7, sp, #0
   804a6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   804a8:	687b      	ldr	r3, [r7, #4]
   804aa:	f44f 7280 	mov.w	r2, #256	; 0x100
   804ae:	601a      	str	r2, [r3, #0]
}
   804b0:	bf00      	nop
   804b2:	370c      	adds	r7, #12
   804b4:	46bd      	mov	sp, r7
   804b6:	bc80      	pop	{r7}
   804b8:	4770      	bx	lr

000804ba <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   804ba:	b480      	push	{r7}
   804bc:	b083      	sub	sp, #12
   804be:	af00      	add	r7, sp, #0
   804c0:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   804c2:	687b      	ldr	r3, [r7, #4]
   804c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   804c8:	601a      	str	r2, [r3, #0]
}
   804ca:	bf00      	nop
   804cc:	370c      	adds	r7, #12
   804ce:	46bd      	mov	sp, r7
   804d0:	bc80      	pop	{r7}
   804d2:	4770      	bx	lr

000804d4 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
   804d4:	b480      	push	{r7}
   804d6:	b083      	sub	sp, #12
   804d8:	af00      	add	r7, sp, #0
   804da:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
   804dc:	687b      	ldr	r3, [r7, #4]
   804de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   804e2:	601a      	str	r2, [r3, #0]
}
   804e4:	bf00      	nop
   804e6:	370c      	adds	r7, #12
   804e8:	46bd      	mov	sp, r7
   804ea:	bc80      	pop	{r7}
   804ec:	4770      	bx	lr

000804ee <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   804ee:	b480      	push	{r7}
   804f0:	b083      	sub	sp, #12
   804f2:	af00      	add	r7, sp, #0
   804f4:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   804f6:	687b      	ldr	r3, [r7, #4]
   804f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   804fc:	601a      	str	r2, [r3, #0]
}
   804fe:	bf00      	nop
   80500:	370c      	adds	r7, #12
   80502:	46bd      	mov	sp, r7
   80504:	bc80      	pop	{r7}
   80506:	4770      	bx	lr

00080508 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   80508:	b480      	push	{r7}
   8050a:	b083      	sub	sp, #12
   8050c:	af00      	add	r7, sp, #0
   8050e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   80510:	687b      	ldr	r3, [r7, #4]
   80512:	4a04      	ldr	r2, [pc, #16]	; (80524 <usart_disable_writeprotect+0x1c>)
   80514:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   80518:	bf00      	nop
   8051a:	370c      	adds	r7, #12
   8051c:	46bd      	mov	sp, r7
   8051e:	bc80      	pop	{r7}
   80520:	4770      	bx	lr
   80522:	bf00      	nop
   80524:	55534100 	.word	0x55534100

00080528 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80528:	b480      	push	{r7}
   8052a:	b083      	sub	sp, #12
   8052c:	af00      	add	r7, sp, #0
   8052e:	4603      	mov	r3, r0
   80530:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80532:	4908      	ldr	r1, [pc, #32]	; (80554 <NVIC_EnableIRQ+0x2c>)
   80534:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80538:	095b      	lsrs	r3, r3, #5
   8053a:	79fa      	ldrb	r2, [r7, #7]
   8053c:	f002 021f 	and.w	r2, r2, #31
   80540:	2001      	movs	r0, #1
   80542:	fa00 f202 	lsl.w	r2, r0, r2
   80546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8054a:	bf00      	nop
   8054c:	370c      	adds	r7, #12
   8054e:	46bd      	mov	sp, r7
   80550:	bc80      	pop	{r7}
   80552:	4770      	bx	lr
   80554:	e000e100 	.word	0xe000e100

00080558 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80558:	b480      	push	{r7}
   8055a:	b083      	sub	sp, #12
   8055c:	af00      	add	r7, sp, #0
   8055e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80560:	687b      	ldr	r3, [r7, #4]
   80562:	2b07      	cmp	r3, #7
   80564:	d825      	bhi.n	805b2 <osc_get_rate+0x5a>
   80566:	a201      	add	r2, pc, #4	; (adr r2, 8056c <osc_get_rate+0x14>)
   80568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8056c:	0008058d 	.word	0x0008058d
   80570:	00080593 	.word	0x00080593
   80574:	00080599 	.word	0x00080599
   80578:	0008059f 	.word	0x0008059f
   8057c:	000805a3 	.word	0x000805a3
   80580:	000805a7 	.word	0x000805a7
   80584:	000805ab 	.word	0x000805ab
   80588:	000805af 	.word	0x000805af
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8058c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80590:	e010      	b.n	805b4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80596:	e00d      	b.n	805b4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8059c:	e00a      	b.n	805b4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8059e:	4b08      	ldr	r3, [pc, #32]	; (805c0 <osc_get_rate+0x68>)
   805a0:	e008      	b.n	805b4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   805a2:	4b08      	ldr	r3, [pc, #32]	; (805c4 <osc_get_rate+0x6c>)
   805a4:	e006      	b.n	805b4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   805a6:	4b08      	ldr	r3, [pc, #32]	; (805c8 <osc_get_rate+0x70>)
   805a8:	e004      	b.n	805b4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   805aa:	4b07      	ldr	r3, [pc, #28]	; (805c8 <osc_get_rate+0x70>)
   805ac:	e002      	b.n	805b4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   805ae:	4b06      	ldr	r3, [pc, #24]	; (805c8 <osc_get_rate+0x70>)
   805b0:	e000      	b.n	805b4 <osc_get_rate+0x5c>
	}

	return 0;
   805b2:	2300      	movs	r3, #0
}
   805b4:	4618      	mov	r0, r3
   805b6:	370c      	adds	r7, #12
   805b8:	46bd      	mov	sp, r7
   805ba:	bc80      	pop	{r7}
   805bc:	4770      	bx	lr
   805be:	bf00      	nop
   805c0:	003d0900 	.word	0x003d0900
   805c4:	007a1200 	.word	0x007a1200
   805c8:	00b71b00 	.word	0x00b71b00

000805cc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   805cc:	b580      	push	{r7, lr}
   805ce:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   805d0:	2006      	movs	r0, #6
   805d2:	4b04      	ldr	r3, [pc, #16]	; (805e4 <sysclk_get_main_hz+0x18>)
   805d4:	4798      	blx	r3
   805d6:	4602      	mov	r2, r0
   805d8:	4613      	mov	r3, r2
   805da:	00db      	lsls	r3, r3, #3
   805dc:	1a9b      	subs	r3, r3, r2
   805de:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   805e0:	4618      	mov	r0, r3
   805e2:	bd80      	pop	{r7, pc}
   805e4:	00080559 	.word	0x00080559

000805e8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   805e8:	b580      	push	{r7, lr}
   805ea:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   805ec:	4b02      	ldr	r3, [pc, #8]	; (805f8 <sysclk_get_peripheral_hz+0x10>)
   805ee:	4798      	blx	r3
   805f0:	4603      	mov	r3, r0
   805f2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   805f4:	4618      	mov	r0, r3
   805f6:	bd80      	pop	{r7, pc}
   805f8:	000805cd 	.word	0x000805cd

000805fc <spi_init>:
sensor_to_motor_t stm;

uint8_t sens_buf[sizeof(stm)];

void spi_init(void)
{
   805fc:	b580      	push	{r7, lr}
   805fe:	af00      	add	r7, sp, #0
    configure_dmac();
   80600:	4b02      	ldr	r3, [pc, #8]	; (8060c <spi_init+0x10>)
   80602:	4798      	blx	r3
    spi_master_initialize();
   80604:	4b02      	ldr	r3, [pc, #8]	; (80610 <spi_init+0x14>)
   80606:	4798      	blx	r3
}
   80608:	bf00      	nop
   8060a:	bd80      	pop	{r7, pc}
   8060c:	00080729 	.word	0x00080729
   80610:	00080615 	.word	0x00080615

00080614 <spi_master_initialize>:

void spi_master_initialize(void)
{
   80614:	b590      	push	{r4, r7, lr}
   80616:	b085      	sub	sp, #20
   80618:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   8061a:	2101      	movs	r1, #1
   8061c:	4810      	ldr	r0, [pc, #64]	; (80660 <spi_master_initialize+0x4c>)
   8061e:	4b11      	ldr	r3, [pc, #68]	; (80664 <spi_master_initialize+0x50>)
   80620:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   80622:	2100      	movs	r1, #0
   80624:	480e      	ldr	r0, [pc, #56]	; (80660 <spi_master_initialize+0x4c>)
   80626:	4b0f      	ldr	r3, [pc, #60]	; (80664 <spi_master_initialize+0x50>)
   80628:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   8062a:	2012      	movs	r0, #18
   8062c:	4b0e      	ldr	r3, [pc, #56]	; (80668 <spi_master_initialize+0x54>)
   8062e:	4798      	blx	r3
    usart_spi_disable(USART1);
   80630:	480e      	ldr	r0, [pc, #56]	; (8066c <spi_master_initialize+0x58>)
   80632:	4b0f      	ldr	r3, [pc, #60]	; (80670 <spi_master_initialize+0x5c>)
   80634:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   80636:	4b0f      	ldr	r3, [pc, #60]	; (80674 <spi_master_initialize+0x60>)
   80638:	463c      	mov	r4, r7
   8063a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   8063c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   80640:	4b0d      	ldr	r3, [pc, #52]	; (80678 <spi_master_initialize+0x64>)
   80642:	4798      	blx	r3
   80644:	4602      	mov	r2, r0
   80646:	463b      	mov	r3, r7
   80648:	4619      	mov	r1, r3
   8064a:	4808      	ldr	r0, [pc, #32]	; (8066c <spi_master_initialize+0x58>)
   8064c:	4b0b      	ldr	r3, [pc, #44]	; (8067c <spi_master_initialize+0x68>)
   8064e:	4798      	blx	r3
    usart_spi_enable(USART1);
   80650:	4806      	ldr	r0, [pc, #24]	; (8066c <spi_master_initialize+0x58>)
   80652:	4b0b      	ldr	r3, [pc, #44]	; (80680 <spi_master_initialize+0x6c>)
   80654:	4798      	blx	r3
}
   80656:	bf00      	nop
   80658:	3714      	adds	r7, #20
   8065a:	46bd      	mov	sp, r7
   8065c:	bd90      	pop	{r4, r7, pc}
   8065e:	bf00      	nop
   80660:	400c4000 	.word	0x400c4000
   80664:	00082997 	.word	0x00082997
   80668:	00082d55 	.word	0x00082d55
   8066c:	4009c000 	.word	0x4009c000
   80670:	00080185 	.word	0x00080185
   80674:	000884dc 	.word	0x000884dc
   80678:	000805e9 	.word	0x000805e9
   8067c:	00080301 	.word	0x00080301
   80680:	00080161 	.word	0x00080161

00080684 <spi_master_transfer>:

void spi_master_transfer(void *p_buf, uint32_t ul_size)
{
   80684:	b580      	push	{r7, lr}
   80686:	b088      	sub	sp, #32
   80688:	af00      	add	r7, sp, #0
   8068a:	6078      	str	r0, [r7, #4]
   8068c:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    usart_spi_force_chip_select(USART1);
   8068e:	481c      	ldr	r0, [pc, #112]	; (80700 <spi_master_transfer+0x7c>)
   80690:	4b1c      	ldr	r3, [pc, #112]	; (80704 <spi_master_transfer+0x80>)
   80692:	4798      	blx	r3

    dmac_channel_disable(DMAC, 1);
   80694:	2101      	movs	r1, #1
   80696:	481c      	ldr	r0, [pc, #112]	; (80708 <spi_master_transfer+0x84>)
   80698:	4b1c      	ldr	r3, [pc, #112]	; (8070c <spi_master_transfer+0x88>)
   8069a:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   8069c:	687b      	ldr	r3, [r7, #4]
   8069e:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & USART1->US_THR;
   806a0:	4b1b      	ldr	r3, [pc, #108]	; (80710 <spi_master_transfer+0x8c>)
   806a2:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   806a4:	683b      	ldr	r3, [r7, #0]
   806a6:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   806a8:	4b1a      	ldr	r3, [pc, #104]	; (80714 <spi_master_transfer+0x90>)
   806aa:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   806ac:	2300      	movs	r3, #0
   806ae:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   806b0:	f107 030c 	add.w	r3, r7, #12
   806b4:	461a      	mov	r2, r3
   806b6:	2101      	movs	r1, #1
   806b8:	4813      	ldr	r0, [pc, #76]	; (80708 <spi_master_transfer+0x84>)
   806ba:	4b17      	ldr	r3, [pc, #92]	; (80718 <spi_master_transfer+0x94>)
   806bc:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   806be:	2101      	movs	r1, #1
   806c0:	4811      	ldr	r0, [pc, #68]	; (80708 <spi_master_transfer+0x84>)
   806c2:	4b16      	ldr	r3, [pc, #88]	; (8071c <spi_master_transfer+0x98>)
   806c4:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   806c6:	2100      	movs	r1, #0
   806c8:	480f      	ldr	r0, [pc, #60]	; (80708 <spi_master_transfer+0x84>)
   806ca:	4b10      	ldr	r3, [pc, #64]	; (8070c <spi_master_transfer+0x88>)
   806cc:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & USART1->US_RHR;
   806ce:	4b14      	ldr	r3, [pc, #80]	; (80720 <spi_master_transfer+0x9c>)
   806d0:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   806d2:	687b      	ldr	r3, [r7, #4]
   806d4:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   806d6:	683b      	ldr	r3, [r7, #0]
   806d8:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   806da:	4b12      	ldr	r3, [pc, #72]	; (80724 <spi_master_transfer+0xa0>)
   806dc:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   806de:	2300      	movs	r3, #0
   806e0:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   806e2:	f107 030c 	add.w	r3, r7, #12
   806e6:	461a      	mov	r2, r3
   806e8:	2100      	movs	r1, #0
   806ea:	4807      	ldr	r0, [pc, #28]	; (80708 <spi_master_transfer+0x84>)
   806ec:	4b0a      	ldr	r3, [pc, #40]	; (80718 <spi_master_transfer+0x94>)
   806ee:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   806f0:	2100      	movs	r1, #0
   806f2:	4805      	ldr	r0, [pc, #20]	; (80708 <spi_master_transfer+0x84>)
   806f4:	4b09      	ldr	r3, [pc, #36]	; (8071c <spi_master_transfer+0x98>)
   806f6:	4798      	blx	r3
}
   806f8:	bf00      	nop
   806fa:	3720      	adds	r7, #32
   806fc:	46bd      	mov	sp, r7
   806fe:	bd80      	pop	{r7, pc}
   80700:	4009c000 	.word	0x4009c000
   80704:	000804d5 	.word	0x000804d5
   80708:	400c4000 	.word	0x400c4000
   8070c:	00082997 	.word	0x00082997
   80710:	4009c01c 	.word	0x4009c01c
   80714:	20310000 	.word	0x20310000
   80718:	00082ab1 	.word	0x00082ab1
   8071c:	00082979 	.word	0x00082979
   80720:	4009c018 	.word	0x4009c018
   80724:	02510000 	.word	0x02510000

00080728 <configure_dmac>:

void configure_dmac(void)
{
   80728:	b580      	push	{r7, lr}
   8072a:	b082      	sub	sp, #8
   8072c:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   8072e:	2027      	movs	r0, #39	; 0x27
   80730:	4b18      	ldr	r3, [pc, #96]	; (80794 <configure_dmac+0x6c>)
   80732:	4798      	blx	r3
    dmac_init(DMAC);
   80734:	4818      	ldr	r0, [pc, #96]	; (80798 <configure_dmac+0x70>)
   80736:	4b19      	ldr	r3, [pc, #100]	; (8079c <configure_dmac+0x74>)
   80738:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   8073a:	2110      	movs	r1, #16
   8073c:	4816      	ldr	r0, [pc, #88]	; (80798 <configure_dmac+0x70>)
   8073e:	4b18      	ldr	r3, [pc, #96]	; (807a0 <configure_dmac+0x78>)
   80740:	4798      	blx	r3
    dmac_enable(DMAC);
   80742:	4815      	ldr	r0, [pc, #84]	; (80798 <configure_dmac+0x70>)
   80744:	4b17      	ldr	r3, [pc, #92]	; (807a4 <configure_dmac+0x7c>)
   80746:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80748:	2300      	movs	r3, #0
   8074a:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   8074c:	687b      	ldr	r3, [r7, #4]
   8074e:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80752:	f043 030e 	orr.w	r3, r3, #14
   80756:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   80758:	687a      	ldr	r2, [r7, #4]
   8075a:	2100      	movs	r1, #0
   8075c:	480e      	ldr	r0, [pc, #56]	; (80798 <configure_dmac+0x70>)
   8075e:	4b12      	ldr	r3, [pc, #72]	; (807a8 <configure_dmac+0x80>)
   80760:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80762:	2300      	movs	r3, #0
   80764:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80766:	687b      	ldr	r3, [r7, #4]
   80768:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   8076c:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   80770:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   80772:	687a      	ldr	r2, [r7, #4]
   80774:	2101      	movs	r1, #1
   80776:	4808      	ldr	r0, [pc, #32]	; (80798 <configure_dmac+0x70>)
   80778:	4b0b      	ldr	r3, [pc, #44]	; (807a8 <configure_dmac+0x80>)
   8077a:	4798      	blx	r3
    ul_cfg = 0;
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
    #endif
    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   8077c:	2027      	movs	r0, #39	; 0x27
   8077e:	4b0b      	ldr	r3, [pc, #44]	; (807ac <configure_dmac+0x84>)
   80780:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   80782:	2101      	movs	r1, #1
   80784:	4804      	ldr	r0, [pc, #16]	; (80798 <configure_dmac+0x70>)
   80786:	4b0a      	ldr	r3, [pc, #40]	; (807b0 <configure_dmac+0x88>)
   80788:	4798      	blx	r3
}
   8078a:	bf00      	nop
   8078c:	3708      	adds	r7, #8
   8078e:	46bd      	mov	sp, r7
   80790:	bd80      	pop	{r7, pc}
   80792:	bf00      	nop
   80794:	00082d55 	.word	0x00082d55
   80798:	400c4000 	.word	0x400c4000
   8079c:	000828d1 	.word	0x000828d1
   807a0:	000828ed 	.word	0x000828ed
   807a4:	00082913 	.word	0x00082913
   807a8:	00082a87 	.word	0x00082a87
   807ac:	00080529 	.word	0x00080529
   807b0:	00082949 	.word	0x00082949

000807b4 <DMAC_Handler>:

void DMAC_Handler(void)
{
   807b4:	b580      	push	{r7, lr}
   807b6:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   807b8:	480b      	ldr	r0, [pc, #44]	; (807e8 <DMAC_Handler+0x34>)
   807ba:	4b0c      	ldr	r3, [pc, #48]	; (807ec <DMAC_Handler+0x38>)
   807bc:	4798      	blx	r3
   807be:	4602      	mov	r2, r0
   807c0:	4b0b      	ldr	r3, [pc, #44]	; (807f0 <DMAC_Handler+0x3c>)
   807c2:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   807c4:	4b0a      	ldr	r3, [pc, #40]	; (807f0 <DMAC_Handler+0x3c>)
   807c6:	681b      	ldr	r3, [r3, #0]
   807c8:	f003 0301 	and.w	r3, r3, #1
   807cc:	2b00      	cmp	r3, #0
   807ce:	d008      	beq.n	807e2 <DMAC_Handler+0x2e>
    {
        usart_spi_release_chip_select(USART1);
   807d0:	4808      	ldr	r0, [pc, #32]	; (807f4 <DMAC_Handler+0x40>)
   807d2:	4b09      	ldr	r3, [pc, #36]	; (807f8 <DMAC_Handler+0x44>)
   807d4:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   807d6:	4b09      	ldr	r3, [pc, #36]	; (807fc <DMAC_Handler+0x48>)
   807d8:	4a09      	ldr	r2, [pc, #36]	; (80800 <DMAC_Handler+0x4c>)
   807da:	8811      	ldrh	r1, [r2, #0]
   807dc:	7892      	ldrb	r2, [r2, #2]
   807de:	8019      	strh	r1, [r3, #0]
   807e0:	709a      	strb	r2, [r3, #2]
    }
}
   807e2:	bf00      	nop
   807e4:	bd80      	pop	{r7, pc}
   807e6:	bf00      	nop
   807e8:	400c4000 	.word	0x400c4000
   807ec:	00082963 	.word	0x00082963
   807f0:	20070b70 	.word	0x20070b70
   807f4:	4009c000 	.word	0x4009c000
   807f8:	000804ef 	.word	0x000804ef
   807fc:	20070e10 	.word	0x20070e10
   80800:	20070e08 	.word	0x20070e08

00080804 <NVIC_EnableIRQ>:
{
   80804:	b480      	push	{r7}
   80806:	b083      	sub	sp, #12
   80808:	af00      	add	r7, sp, #0
   8080a:	4603      	mov	r3, r0
   8080c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8080e:	4908      	ldr	r1, [pc, #32]	; (80830 <NVIC_EnableIRQ+0x2c>)
   80810:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80814:	095b      	lsrs	r3, r3, #5
   80816:	79fa      	ldrb	r2, [r7, #7]
   80818:	f002 021f 	and.w	r2, r2, #31
   8081c:	2001      	movs	r0, #1
   8081e:	fa00 f202 	lsl.w	r2, r0, r2
   80822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80826:	bf00      	nop
   80828:	370c      	adds	r7, #12
   8082a:	46bd      	mov	sp, r7
   8082c:	bc80      	pop	{r7}
   8082e:	4770      	bx	lr
   80830:	e000e100 	.word	0xe000e100

00080834 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80834:	b480      	push	{r7}
   80836:	b083      	sub	sp, #12
   80838:	af00      	add	r7, sp, #0
   8083a:	4603      	mov	r3, r0
   8083c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8083e:	4909      	ldr	r1, [pc, #36]	; (80864 <NVIC_ClearPendingIRQ+0x30>)
   80840:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80844:	095b      	lsrs	r3, r3, #5
   80846:	79fa      	ldrb	r2, [r7, #7]
   80848:	f002 021f 	and.w	r2, r2, #31
   8084c:	2001      	movs	r0, #1
   8084e:	fa00 f202 	lsl.w	r2, r0, r2
   80852:	3360      	adds	r3, #96	; 0x60
   80854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80858:	bf00      	nop
   8085a:	370c      	adds	r7, #12
   8085c:	46bd      	mov	sp, r7
   8085e:	bc80      	pop	{r7}
   80860:	4770      	bx	lr
   80862:	bf00      	nop
   80864:	e000e100 	.word	0xe000e100

00080868 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80868:	b480      	push	{r7}
   8086a:	b083      	sub	sp, #12
   8086c:	af00      	add	r7, sp, #0
   8086e:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80870:	687b      	ldr	r3, [r7, #4]
   80872:	2208      	movs	r2, #8
   80874:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80876:	687b      	ldr	r3, [r7, #4]
   80878:	2220      	movs	r2, #32
   8087a:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   8087c:	687b      	ldr	r3, [r7, #4]
   8087e:	2204      	movs	r2, #4
   80880:	601a      	str	r2, [r3, #0]
}
   80882:	bf00      	nop
   80884:	370c      	adds	r7, #12
   80886:	46bd      	mov	sp, r7
   80888:	bc80      	pop	{r7}
   8088a:	4770      	bx	lr

0008088c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   8088c:	b580      	push	{r7, lr}
   8088e:	b084      	sub	sp, #16
   80890:	af00      	add	r7, sp, #0
   80892:	6078      	str	r0, [r7, #4]
   80894:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80896:	2300      	movs	r3, #0
   80898:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   8089a:	687b      	ldr	r3, [r7, #4]
   8089c:	f04f 32ff 	mov.w	r2, #4294967295
   808a0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   808a2:	687b      	ldr	r3, [r7, #4]
   808a4:	6a1b      	ldr	r3, [r3, #32]

	twi_disable_interrupt(p_twi, MASK_ALL_INTERRUPTS);
   808a6:	f04f 31ff 	mov.w	r1, #4294967295
   808aa:	6878      	ldr	r0, [r7, #4]
   808ac:	4b14      	ldr	r3, [pc, #80]	; (80900 <twi_master_init+0x74>)
   808ae:	4798      	blx	r3

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   808b0:	6878      	ldr	r0, [r7, #4]
   808b2:	4b14      	ldr	r3, [pc, #80]	; (80904 <twi_master_init+0x78>)
   808b4:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   808b6:	6878      	ldr	r0, [r7, #4]
   808b8:	4b13      	ldr	r3, [pc, #76]	; (80908 <twi_master_init+0x7c>)
   808ba:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   808bc:	683b      	ldr	r3, [r7, #0]
   808be:	6859      	ldr	r1, [r3, #4]
   808c0:	683b      	ldr	r3, [r7, #0]
   808c2:	681b      	ldr	r3, [r3, #0]
   808c4:	461a      	mov	r2, r3
   808c6:	6878      	ldr	r0, [r7, #4]
   808c8:	4b10      	ldr	r3, [pc, #64]	; (8090c <twi_master_init+0x80>)
   808ca:	4798      	blx	r3
   808cc:	4603      	mov	r3, r0
   808ce:	2b01      	cmp	r3, #1
   808d0:	d101      	bne.n	808d6 <twi_master_init+0x4a>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   808d2:	2301      	movs	r3, #1
   808d4:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   808d6:	683b      	ldr	r3, [r7, #0]
   808d8:	7a5b      	ldrb	r3, [r3, #9]
   808da:	2b01      	cmp	r3, #1
   808dc:	d102      	bne.n	808e4 <twi_master_init+0x58>
		p_twi->TWI_CR = TWI_CR_QUICK;
   808de:	687b      	ldr	r3, [r7, #4]
   808e0:	2240      	movs	r2, #64	; 0x40
   808e2:	601a      	str	r2, [r3, #0]
	}
    
    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   808e4:	f44f 7150 	mov.w	r1, #832	; 0x340
   808e8:	6878      	ldr	r0, [r7, #4]
   808ea:	4b09      	ldr	r3, [pc, #36]	; (80910 <twi_master_init+0x84>)
   808ec:	4798      	blx	r3

    twiBusy = false;
   808ee:	4b09      	ldr	r3, [pc, #36]	; (80914 <twi_master_init+0x88>)
   808f0:	2200      	movs	r2, #0
   808f2:	701a      	strb	r2, [r3, #0]
    
	return status;
   808f4:	68fb      	ldr	r3, [r7, #12]
}
   808f6:	4618      	mov	r0, r3
   808f8:	3710      	adds	r7, #16
   808fa:	46bd      	mov	sp, r7
   808fc:	bd80      	pop	{r7, pc}
   808fe:	bf00      	nop
   80900:	00080e5f 	.word	0x00080e5f
   80904:	00080ec1 	.word	0x00080ec1
   80908:	00080869 	.word	0x00080869
   8090c:	00080919 	.word	0x00080919
   80910:	00080e45 	.word	0x00080e45
   80914:	20070d94 	.word	0x20070d94

00080918 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   80918:	b480      	push	{r7}
   8091a:	b089      	sub	sp, #36	; 0x24
   8091c:	af00      	add	r7, sp, #0
   8091e:	60f8      	str	r0, [r7, #12]
   80920:	60b9      	str	r1, [r7, #8]
   80922:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80924:	2300      	movs	r3, #0
   80926:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80928:	68bb      	ldr	r3, [r7, #8]
   8092a:	4a34      	ldr	r2, [pc, #208]	; (809fc <twi_set_speed+0xe4>)
   8092c:	4293      	cmp	r3, r2
   8092e:	d901      	bls.n	80934 <twi_set_speed+0x1c>
		return FAIL;
   80930:	2301      	movs	r3, #1
   80932:	e05d      	b.n	809f0 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   80934:	68bb      	ldr	r3, [r7, #8]
   80936:	4a32      	ldr	r2, [pc, #200]	; (80a00 <twi_set_speed+0xe8>)
   80938:	4293      	cmp	r3, r2
   8093a:	d937      	bls.n	809ac <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8093c:	687b      	ldr	r3, [r7, #4]
   8093e:	4a31      	ldr	r2, [pc, #196]	; (80a04 <twi_set_speed+0xec>)
   80940:	fba2 2303 	umull	r2, r3, r2, r3
   80944:	0b9b      	lsrs	r3, r3, #14
   80946:	3b04      	subs	r3, #4
   80948:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8094a:	68ba      	ldr	r2, [r7, #8]
   8094c:	4b2e      	ldr	r3, [pc, #184]	; (80a08 <twi_set_speed+0xf0>)
   8094e:	4413      	add	r3, r2
   80950:	009b      	lsls	r3, r3, #2
   80952:	687a      	ldr	r2, [r7, #4]
   80954:	fbb2 f3f3 	udiv	r3, r2, r3
   80958:	3b04      	subs	r3, #4
   8095a:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8095c:	e005      	b.n	8096a <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   8095e:	69fb      	ldr	r3, [r7, #28]
   80960:	3301      	adds	r3, #1
   80962:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   80964:	697b      	ldr	r3, [r7, #20]
   80966:	085b      	lsrs	r3, r3, #1
   80968:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8096a:	697b      	ldr	r3, [r7, #20]
   8096c:	2bff      	cmp	r3, #255	; 0xff
   8096e:	d909      	bls.n	80984 <twi_set_speed+0x6c>
   80970:	69fb      	ldr	r3, [r7, #28]
   80972:	2b06      	cmp	r3, #6
   80974:	d9f3      	bls.n	8095e <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80976:	e005      	b.n	80984 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   80978:	69fb      	ldr	r3, [r7, #28]
   8097a:	3301      	adds	r3, #1
   8097c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   8097e:	693b      	ldr	r3, [r7, #16]
   80980:	085b      	lsrs	r3, r3, #1
   80982:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80984:	693b      	ldr	r3, [r7, #16]
   80986:	2bff      	cmp	r3, #255	; 0xff
   80988:	d902      	bls.n	80990 <twi_set_speed+0x78>
   8098a:	69fb      	ldr	r3, [r7, #28]
   8098c:	2b06      	cmp	r3, #6
   8098e:	d9f3      	bls.n	80978 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80990:	697b      	ldr	r3, [r7, #20]
   80992:	b2da      	uxtb	r2, r3
   80994:	693b      	ldr	r3, [r7, #16]
   80996:	021b      	lsls	r3, r3, #8
   80998:	b29b      	uxth	r3, r3
   8099a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   8099c:	69fb      	ldr	r3, [r7, #28]
   8099e:	041b      	lsls	r3, r3, #16
   809a0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   809a4:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   809a6:	68fb      	ldr	r3, [r7, #12]
   809a8:	611a      	str	r2, [r3, #16]
   809aa:	e020      	b.n	809ee <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   809ac:	68bb      	ldr	r3, [r7, #8]
   809ae:	005b      	lsls	r3, r3, #1
   809b0:	687a      	ldr	r2, [r7, #4]
   809b2:	fbb2 f3f3 	udiv	r3, r2, r3
   809b6:	3b04      	subs	r3, #4
   809b8:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   809ba:	e005      	b.n	809c8 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   809bc:	69fb      	ldr	r3, [r7, #28]
   809be:	3301      	adds	r3, #1
   809c0:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   809c2:	69bb      	ldr	r3, [r7, #24]
   809c4:	085b      	lsrs	r3, r3, #1
   809c6:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   809c8:	69bb      	ldr	r3, [r7, #24]
   809ca:	2bff      	cmp	r3, #255	; 0xff
   809cc:	d902      	bls.n	809d4 <twi_set_speed+0xbc>
   809ce:	69fb      	ldr	r3, [r7, #28]
   809d0:	2b06      	cmp	r3, #6
   809d2:	d9f3      	bls.n	809bc <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   809d4:	69bb      	ldr	r3, [r7, #24]
   809d6:	b2da      	uxtb	r2, r3
   809d8:	69bb      	ldr	r3, [r7, #24]
   809da:	021b      	lsls	r3, r3, #8
   809dc:	b29b      	uxth	r3, r3
   809de:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   809e0:	69fb      	ldr	r3, [r7, #28]
   809e2:	041b      	lsls	r3, r3, #16
   809e4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   809e8:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   809ea:	68fb      	ldr	r3, [r7, #12]
   809ec:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   809ee:	2300      	movs	r3, #0
}
   809f0:	4618      	mov	r0, r3
   809f2:	3724      	adds	r7, #36	; 0x24
   809f4:	46bd      	mov	sp, r7
   809f6:	bc80      	pop	{r7}
   809f8:	4770      	bx	lr
   809fa:	bf00      	nop
   809fc:	00061a80 	.word	0x00061a80
   80a00:	0005dc00 	.word	0x0005dc00
   80a04:	057619f1 	.word	0x057619f1
   80a08:	3ffd1200 	.word	0x3ffd1200

00080a0c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   80a0c:	b480      	push	{r7}
   80a0e:	b085      	sub	sp, #20
   80a10:	af00      	add	r7, sp, #0
   80a12:	6078      	str	r0, [r7, #4]
   80a14:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   80a16:	683b      	ldr	r3, [r7, #0]
   80a18:	2b00      	cmp	r3, #0
   80a1a:	d101      	bne.n	80a20 <twi_mk_addr+0x14>
		return 0;
   80a1c:	2300      	movs	r3, #0
   80a1e:	e01d      	b.n	80a5c <twi_mk_addr+0x50>

	val = addr[0];
   80a20:	687b      	ldr	r3, [r7, #4]
   80a22:	781b      	ldrb	r3, [r3, #0]
   80a24:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   80a26:	683b      	ldr	r3, [r7, #0]
   80a28:	2b01      	cmp	r3, #1
   80a2a:	dd09      	ble.n	80a40 <twi_mk_addr+0x34>
		val <<= 8;
   80a2c:	68fb      	ldr	r3, [r7, #12]
   80a2e:	021b      	lsls	r3, r3, #8
   80a30:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   80a32:	687b      	ldr	r3, [r7, #4]
   80a34:	3301      	adds	r3, #1
   80a36:	781b      	ldrb	r3, [r3, #0]
   80a38:	461a      	mov	r2, r3
   80a3a:	68fb      	ldr	r3, [r7, #12]
   80a3c:	4313      	orrs	r3, r2
   80a3e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   80a40:	683b      	ldr	r3, [r7, #0]
   80a42:	2b02      	cmp	r3, #2
   80a44:	dd09      	ble.n	80a5a <twi_mk_addr+0x4e>
		val <<= 8;
   80a46:	68fb      	ldr	r3, [r7, #12]
   80a48:	021b      	lsls	r3, r3, #8
   80a4a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   80a4c:	687b      	ldr	r3, [r7, #4]
   80a4e:	3302      	adds	r3, #2
   80a50:	781b      	ldrb	r3, [r3, #0]
   80a52:	461a      	mov	r2, r3
   80a54:	68fb      	ldr	r3, [r7, #12]
   80a56:	4313      	orrs	r3, r2
   80a58:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80a5a:	68fb      	ldr	r3, [r7, #12]
}
   80a5c:	4618      	mov	r0, r3
   80a5e:	3714      	adds	r7, #20
   80a60:	46bd      	mov	sp, r7
   80a62:	bc80      	pop	{r7}
   80a64:	4770      	bx	lr
	...

00080a68 <twi_is_busy>:
	}
}
#endif
#if 1
uint8_t twi_is_busy(void)
{
   80a68:	b480      	push	{r7}
   80a6a:	af00      	add	r7, sp, #0
    return twiBusy;
   80a6c:	4b02      	ldr	r3, [pc, #8]	; (80a78 <twi_is_busy+0x10>)
   80a6e:	781b      	ldrb	r3, [r3, #0]
}
   80a70:	4618      	mov	r0, r3
   80a72:	46bd      	mov	sp, r7
   80a74:	bc80      	pop	{r7}
   80a76:	4770      	bx	lr
   80a78:	20070d94 	.word	0x20070d94

00080a7c <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   80a7c:	b480      	push	{r7}
   80a7e:	af00      	add	r7, sp, #0
    return &txPacket;
   80a80:	4b02      	ldr	r3, [pc, #8]	; (80a8c <twi_get_tx_packet+0x10>)
}
   80a82:	4618      	mov	r0, r3
   80a84:	46bd      	mov	sp, r7
   80a86:	bc80      	pop	{r7}
   80a88:	4770      	bx	lr
   80a8a:	bf00      	nop
   80a8c:	20070b74 	.word	0x20070b74

00080a90 <twi_get_rx_packet>:

twi_packet_t *twi_get_rx_packet(void)
{
   80a90:	b480      	push	{r7}
   80a92:	af00      	add	r7, sp, #0
    return &rxPacket;
   80a94:	4b02      	ldr	r3, [pc, #8]	; (80aa0 <twi_get_rx_packet+0x10>)
}
   80a96:	4618      	mov	r0, r3
   80a98:	46bd      	mov	sp, r7
   80a9a:	bc80      	pop	{r7}
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop
   80aa0:	20070c84 	.word	0x20070c84

00080aa4 <twi_pdc_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_pdc_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80aa4:	b580      	push	{r7, lr}
   80aa6:	b084      	sub	sp, #16
   80aa8:	af00      	add	r7, sp, #0
   80aaa:	6078      	str	r0, [r7, #4]
   80aac:	6039      	str	r1, [r7, #0]
    pdc_packet_t rxPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   80aae:	683b      	ldr	r3, [r7, #0]
   80ab0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80ab4:	2b00      	cmp	r3, #0
   80ab6:	d101      	bne.n	80abc <twi_pdc_master_read+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   80ab8:	2301      	movs	r3, #1
   80aba:	e047      	b.n	80b4c <twi_pdc_master_read+0xa8>
    }
    
    twiBusy = true;
   80abc:	4b25      	ldr	r3, [pc, #148]	; (80b54 <twi_pdc_master_read+0xb0>)
   80abe:	2201      	movs	r2, #1
   80ac0:	701a      	strb	r2, [r3, #0]

    // Ensure Rx is already empty
    twi_read_byte(TWI0);
   80ac2:	4825      	ldr	r0, [pc, #148]	; (80b58 <twi_pdc_master_read+0xb4>)
   80ac4:	4b25      	ldr	r3, [pc, #148]	; (80b5c <twi_pdc_master_read+0xb8>)
   80ac6:	4798      	blx	r3

    // Set read mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   80ac8:	687b      	ldr	r3, [r7, #4]
   80aca:	2200      	movs	r2, #0
   80acc:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   80ace:	683b      	ldr	r3, [r7, #0]
   80ad0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   80ad4:	041b      	lsls	r3, r3, #16
   80ad6:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   80ada:	683b      	ldr	r3, [r7, #0]
   80adc:	685b      	ldr	r3, [r3, #4]
   80ade:	021b      	lsls	r3, r3, #8
   80ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
   80ae4:	4313      	orrs	r3, r2
   80ae6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   80aea:	687b      	ldr	r3, [r7, #4]
   80aec:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   80aee:	687b      	ldr	r3, [r7, #4]
   80af0:	2200      	movs	r2, #0
   80af2:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80af4:	683a      	ldr	r2, [r7, #0]
   80af6:	683b      	ldr	r3, [r7, #0]
   80af8:	685b      	ldr	r3, [r3, #4]
   80afa:	4619      	mov	r1, r3
   80afc:	4610      	mov	r0, r2
   80afe:	4b18      	ldr	r3, [pc, #96]	; (80b60 <twi_pdc_master_read+0xbc>)
   80b00:	4798      	blx	r3
   80b02:	4602      	mov	r2, r0
   80b04:	687b      	ldr	r3, [r7, #4]
   80b06:	60da      	str	r2, [r3, #12]
        twi_enable_interrupt(TWI0, IER_ERROR_INTERRUPTS);
    }
    else
    {
#endif
        rxPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   80b08:	683b      	ldr	r3, [r7, #0]
   80b0a:	3308      	adds	r3, #8
   80b0c:	60bb      	str	r3, [r7, #8]
        rxPdcPacket.ul_size = p_packet->length - 1;
   80b0e:	683b      	ldr	r3, [r7, #0]
   80b10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80b14:	3b01      	subs	r3, #1
   80b16:	60fb      	str	r3, [r7, #12]
        pdc_rx_init(PDC_TWI0, &rxPdcPacket, NULL);
   80b18:	f107 0308 	add.w	r3, r7, #8
   80b1c:	2200      	movs	r2, #0
   80b1e:	4619      	mov	r1, r3
   80b20:	4810      	ldr	r0, [pc, #64]	; (80b64 <twi_pdc_master_read+0xc0>)
   80b22:	4b11      	ldr	r3, [pc, #68]	; (80b68 <twi_pdc_master_read+0xc4>)
   80b24:	4798      	blx	r3

        pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_RXTEN);
   80b26:	2101      	movs	r1, #1
   80b28:	480e      	ldr	r0, [pc, #56]	; (80b64 <twi_pdc_master_read+0xc0>)
   80b2a:	4b10      	ldr	r3, [pc, #64]	; (80b6c <twi_pdc_master_read+0xc8>)
   80b2c:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_START;
   80b2e:	4b0a      	ldr	r3, [pc, #40]	; (80b58 <twi_pdc_master_read+0xb4>)
   80b30:	2201      	movs	r2, #1
   80b32:	601a      	str	r2, [r3, #0]

        twi_enable_interrupt(p_twi, TWI_IER_ENDRX);
   80b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80b38:	6878      	ldr	r0, [r7, #4]
   80b3a:	4b0d      	ldr	r3, [pc, #52]	; (80b70 <twi_pdc_master_read+0xcc>)
   80b3c:	4798      	blx	r3
        NVIC_ClearPendingIRQ(TWI0_IRQn);
   80b3e:	2016      	movs	r0, #22
   80b40:	4b0c      	ldr	r3, [pc, #48]	; (80b74 <twi_pdc_master_read+0xd0>)
   80b42:	4798      	blx	r3
        NVIC_EnableIRQ(TWI0_IRQn);
   80b44:	2016      	movs	r0, #22
   80b46:	4b0c      	ldr	r3, [pc, #48]	; (80b78 <twi_pdc_master_read+0xd4>)
   80b48:	4798      	blx	r3
//    }

    return TWI_SUCCESS;
   80b4a:	2300      	movs	r3, #0
}
   80b4c:	4618      	mov	r0, r3
   80b4e:	3710      	adds	r7, #16
   80b50:	46bd      	mov	sp, r7
   80b52:	bd80      	pop	{r7, pc}
   80b54:	20070d94 	.word	0x20070d94
   80b58:	4008c000 	.word	0x4008c000
   80b5c:	00080ea9 	.word	0x00080ea9
   80b60:	00080a0d 	.word	0x00080a0d
   80b64:	4008c100 	.word	0x4008c100
   80b68:	000801eb 	.word	0x000801eb
   80b6c:	0008022d 	.word	0x0008022d
   80b70:	00080e45 	.word	0x00080e45
   80b74:	00080835 	.word	0x00080835
   80b78:	00080805 	.word	0x00080805

00080b7c <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   80b7c:	b580      	push	{r7, lr}
   80b7e:	b084      	sub	sp, #16
   80b80:	af00      	add	r7, sp, #0
   80b82:	6078      	str	r0, [r7, #4]
   80b84:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   80b86:	683b      	ldr	r3, [r7, #0]
   80b88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80b8c:	2b00      	cmp	r3, #0
   80b8e:	d101      	bne.n	80b94 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   80b90:	2301      	movs	r3, #1
   80b92:	e040      	b.n	80c16 <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   80b94:	4b22      	ldr	r3, [pc, #136]	; (80c20 <twi_pdc_master_write+0xa4>)
   80b96:	2201      	movs	r2, #1
   80b98:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   80b9a:	683b      	ldr	r3, [r7, #0]
   80b9c:	3308      	adds	r3, #8
   80b9e:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   80ba0:	683b      	ldr	r3, [r7, #0]
   80ba2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80ba6:	3b01      	subs	r3, #1
   80ba8:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   80baa:	f107 0308 	add.w	r3, r7, #8
   80bae:	2200      	movs	r2, #0
   80bb0:	4619      	mov	r1, r3
   80bb2:	481c      	ldr	r0, [pc, #112]	; (80c24 <twi_pdc_master_write+0xa8>)
   80bb4:	4b1c      	ldr	r3, [pc, #112]	; (80c28 <twi_pdc_master_write+0xac>)
   80bb6:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   80bb8:	687b      	ldr	r3, [r7, #4]
   80bba:	2200      	movs	r2, #0
   80bbc:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   80bbe:	683b      	ldr	r3, [r7, #0]
   80bc0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   80bc4:	041b      	lsls	r3, r3, #16
   80bc6:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   80bca:	683b      	ldr	r3, [r7, #0]
   80bcc:	685b      	ldr	r3, [r3, #4]
   80bce:	021b      	lsls	r3, r3, #8
   80bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
   80bd4:	431a      	orrs	r2, r3
   80bd6:	687b      	ldr	r3, [r7, #4]
   80bd8:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   80bda:	687b      	ldr	r3, [r7, #4]
   80bdc:	2200      	movs	r2, #0
   80bde:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80be0:	683a      	ldr	r2, [r7, #0]
   80be2:	683b      	ldr	r3, [r7, #0]
   80be4:	685b      	ldr	r3, [r3, #4]
   80be6:	4619      	mov	r1, r3
   80be8:	4610      	mov	r0, r2
   80bea:	4b10      	ldr	r3, [pc, #64]	; (80c2c <twi_pdc_master_write+0xb0>)
   80bec:	4798      	blx	r3
   80bee:	4602      	mov	r2, r0
   80bf0:	687b      	ldr	r3, [r7, #4]
   80bf2:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   80bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
   80bf8:	480a      	ldr	r0, [pc, #40]	; (80c24 <twi_pdc_master_write+0xa8>)
   80bfa:	4b0d      	ldr	r3, [pc, #52]	; (80c30 <twi_pdc_master_write+0xb4>)
   80bfc:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   80bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80c02:	6878      	ldr	r0, [r7, #4]
   80c04:	4b0b      	ldr	r3, [pc, #44]	; (80c34 <twi_pdc_master_write+0xb8>)
   80c06:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   80c08:	2016      	movs	r0, #22
   80c0a:	4b0b      	ldr	r3, [pc, #44]	; (80c38 <twi_pdc_master_write+0xbc>)
   80c0c:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   80c0e:	2016      	movs	r0, #22
   80c10:	4b0a      	ldr	r3, [pc, #40]	; (80c3c <twi_pdc_master_write+0xc0>)
   80c12:	4798      	blx	r3

    return TWI_SUCCESS;
   80c14:	2300      	movs	r3, #0
}
   80c16:	4618      	mov	r0, r3
   80c18:	3710      	adds	r7, #16
   80c1a:	46bd      	mov	sp, r7
   80c1c:	bd80      	pop	{r7, pc}
   80c1e:	bf00      	nop
   80c20:	20070d94 	.word	0x20070d94
   80c24:	4008c100 	.word	0x4008c100
   80c28:	000801a9 	.word	0x000801a9
   80c2c:	00080a0d 	.word	0x00080a0d
   80c30:	0008022d 	.word	0x0008022d
   80c34:	00080e45 	.word	0x00080e45
   80c38:	00080835 	.word	0x00080835
   80c3c:	00080805 	.word	0x00080805

00080c40 <twi_set_compass_rx_callback>:
 * \brief Callback function for TWI receive.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_rx_callback(void (*callback)(void))
{
   80c40:	b480      	push	{r7}
   80c42:	b083      	sub	sp, #12
   80c44:	af00      	add	r7, sp, #0
   80c46:	6078      	str	r0, [r7, #4]
    compassRxCallback = callback;
   80c48:	4a03      	ldr	r2, [pc, #12]	; (80c58 <twi_set_compass_rx_callback+0x18>)
   80c4a:	687b      	ldr	r3, [r7, #4]
   80c4c:	6013      	str	r3, [r2, #0]
}
   80c4e:	bf00      	nop
   80c50:	370c      	adds	r7, #12
   80c52:	46bd      	mov	sp, r7
   80c54:	bc80      	pop	{r7}
   80c56:	4770      	bx	lr
   80c58:	20070da0 	.word	0x20070da0

00080c5c <twi_set_compass_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_tx_callback(void (*callback)(void))
{
   80c5c:	b480      	push	{r7}
   80c5e:	b083      	sub	sp, #12
   80c60:	af00      	add	r7, sp, #0
   80c62:	6078      	str	r0, [r7, #4]
    compassTxCallback = callback;
   80c64:	4a03      	ldr	r2, [pc, #12]	; (80c74 <twi_set_compass_tx_callback+0x18>)
   80c66:	687b      	ldr	r3, [r7, #4]
   80c68:	6013      	str	r3, [r2, #0]
}
   80c6a:	bf00      	nop
   80c6c:	370c      	adds	r7, #12
   80c6e:	46bd      	mov	sp, r7
   80c70:	bc80      	pop	{r7}
   80c72:	4770      	bx	lr
   80c74:	20070d9c 	.word	0x20070d9c

00080c78 <twi_set_lcd_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_lcd_tx_callback(void (*callback)(void))
{
   80c78:	b480      	push	{r7}
   80c7a:	b083      	sub	sp, #12
   80c7c:	af00      	add	r7, sp, #0
   80c7e:	6078      	str	r0, [r7, #4]
    lcdTxCallback = callback;
   80c80:	4a03      	ldr	r2, [pc, #12]	; (80c90 <twi_set_lcd_tx_callback+0x18>)
   80c82:	687b      	ldr	r3, [r7, #4]
   80c84:	6013      	str	r3, [r2, #0]
}
   80c86:	bf00      	nop
   80c88:	370c      	adds	r7, #12
   80c8a:	46bd      	mov	sp, r7
   80c8c:	bc80      	pop	{r7}
   80c8e:	4770      	bx	lr
   80c90:	20070d98 	.word	0x20070d98

00080c94 <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   80c94:	b590      	push	{r4, r7, lr}
   80c96:	b083      	sub	sp, #12
   80c98:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   80c9a:	485d      	ldr	r0, [pc, #372]	; (80e10 <TWI0_Handler+0x17c>)
   80c9c:	4b5d      	ldr	r3, [pc, #372]	; (80e14 <TWI0_Handler+0x180>)
   80c9e:	4798      	blx	r3
   80ca0:	4604      	mov	r4, r0
   80ca2:	485b      	ldr	r0, [pc, #364]	; (80e10 <TWI0_Handler+0x17c>)
   80ca4:	4b5c      	ldr	r3, [pc, #368]	; (80e18 <TWI0_Handler+0x184>)
   80ca6:	4798      	blx	r3
   80ca8:	4603      	mov	r3, r0
   80caa:	4023      	ands	r3, r4
   80cac:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   80cae:	687b      	ldr	r3, [r7, #4]
   80cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   80cb4:	2b00      	cmp	r3, #0
   80cb6:	d014      	beq.n	80ce2 <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   80cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
   80cbc:	4857      	ldr	r0, [pc, #348]	; (80e1c <TWI0_Handler+0x188>)
   80cbe:	4b58      	ldr	r3, [pc, #352]	; (80e20 <TWI0_Handler+0x18c>)
   80cc0:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   80cc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80cc6:	4852      	ldr	r0, [pc, #328]	; (80e10 <TWI0_Handler+0x17c>)
   80cc8:	4b56      	ldr	r3, [pc, #344]	; (80e24 <TWI0_Handler+0x190>)
   80cca:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   80ccc:	2104      	movs	r1, #4
   80cce:	4850      	ldr	r0, [pc, #320]	; (80e10 <TWI0_Handler+0x17c>)
   80cd0:	4b55      	ldr	r3, [pc, #340]	; (80e28 <TWI0_Handler+0x194>)
   80cd2:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   80cd4:	484e      	ldr	r0, [pc, #312]	; (80e10 <TWI0_Handler+0x17c>)
   80cd6:	4b4f      	ldr	r3, [pc, #316]	; (80e14 <TWI0_Handler+0x180>)
   80cd8:	4798      	blx	r3
   80cda:	4602      	mov	r2, r0
   80cdc:	687b      	ldr	r3, [r7, #4]
   80cde:	4313      	orrs	r3, r2
   80ce0:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   80ce2:	687b      	ldr	r3, [r7, #4]
   80ce4:	f003 0304 	and.w	r3, r3, #4
   80ce8:	2b00      	cmp	r3, #0
   80cea:	d01a      	beq.n	80d22 <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   80cec:	2104      	movs	r1, #4
   80cee:	4848      	ldr	r0, [pc, #288]	; (80e10 <TWI0_Handler+0x17c>)
   80cf0:	4b4c      	ldr	r3, [pc, #304]	; (80e24 <TWI0_Handler+0x190>)
   80cf2:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   80cf4:	4b46      	ldr	r3, [pc, #280]	; (80e10 <TWI0_Handler+0x17c>)
   80cf6:	2202      	movs	r2, #2
   80cf8:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   80cfa:	4a45      	ldr	r2, [pc, #276]	; (80e10 <TWI0_Handler+0x17c>)
   80cfc:	4b4b      	ldr	r3, [pc, #300]	; (80e2c <TWI0_Handler+0x198>)
   80cfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80d02:	3b01      	subs	r3, #1
   80d04:	4949      	ldr	r1, [pc, #292]	; (80e2c <TWI0_Handler+0x198>)
   80d06:	440b      	add	r3, r1
   80d08:	7a1b      	ldrb	r3, [r3, #8]
   80d0a:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   80d0c:	2101      	movs	r1, #1
   80d0e:	4840      	ldr	r0, [pc, #256]	; (80e10 <TWI0_Handler+0x17c>)
   80d10:	4b45      	ldr	r3, [pc, #276]	; (80e28 <TWI0_Handler+0x194>)
   80d12:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   80d14:	483e      	ldr	r0, [pc, #248]	; (80e10 <TWI0_Handler+0x17c>)
   80d16:	4b3f      	ldr	r3, [pc, #252]	; (80e14 <TWI0_Handler+0x180>)
   80d18:	4798      	blx	r3
   80d1a:	4602      	mov	r2, r0
   80d1c:	687b      	ldr	r3, [r7, #4]
   80d1e:	4313      	orrs	r3, r2
   80d20:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   80d22:	687b      	ldr	r3, [r7, #4]
   80d24:	f003 0301 	and.w	r3, r3, #1
   80d28:	2b00      	cmp	r3, #0
   80d2a:	d014      	beq.n	80d56 <TWI0_Handler+0xc2>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   80d2c:	2101      	movs	r1, #1
   80d2e:	4838      	ldr	r0, [pc, #224]	; (80e10 <TWI0_Handler+0x17c>)
   80d30:	4b3c      	ldr	r3, [pc, #240]	; (80e24 <TWI0_Handler+0x190>)
   80d32:	4798      	blx	r3

        // If defined, call the connected function.
        if(compassTxCallback != NULL)
   80d34:	4b3e      	ldr	r3, [pc, #248]	; (80e30 <TWI0_Handler+0x19c>)
   80d36:	681b      	ldr	r3, [r3, #0]
   80d38:	2b00      	cmp	r3, #0
   80d3a:	d002      	beq.n	80d42 <TWI0_Handler+0xae>
        {
            compassTxCallback();
   80d3c:	4b3c      	ldr	r3, [pc, #240]	; (80e30 <TWI0_Handler+0x19c>)
   80d3e:	681b      	ldr	r3, [r3, #0]
   80d40:	4798      	blx	r3
        }

        // If defined, call the connected function.
        if(lcdTxCallback != NULL)
   80d42:	4b3c      	ldr	r3, [pc, #240]	; (80e34 <TWI0_Handler+0x1a0>)
   80d44:	681b      	ldr	r3, [r3, #0]
   80d46:	2b00      	cmp	r3, #0
   80d48:	d002      	beq.n	80d50 <TWI0_Handler+0xbc>
        {
          lcdTxCallback();
   80d4a:	4b3a      	ldr	r3, [pc, #232]	; (80e34 <TWI0_Handler+0x1a0>)
   80d4c:	681b      	ldr	r3, [r3, #0]
   80d4e:	4798      	blx	r3
        }

        twiBusy = false;
   80d50:	4b39      	ldr	r3, [pc, #228]	; (80e38 <TWI0_Handler+0x1a4>)
   80d52:	2200      	movs	r2, #0
   80d54:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   80d56:	687b      	ldr	r3, [r7, #4]
   80d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   80d5c:	2b00      	cmp	r3, #0
   80d5e:	d016      	beq.n	80d8e <TWI0_Handler+0xfa>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   80d60:	2102      	movs	r1, #2
   80d62:	482e      	ldr	r0, [pc, #184]	; (80e1c <TWI0_Handler+0x188>)
   80d64:	4b2e      	ldr	r3, [pc, #184]	; (80e20 <TWI0_Handler+0x18c>)
   80d66:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   80d68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80d6c:	4828      	ldr	r0, [pc, #160]	; (80e10 <TWI0_Handler+0x17c>)
   80d6e:	4b2d      	ldr	r3, [pc, #180]	; (80e24 <TWI0_Handler+0x190>)
   80d70:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   80d72:	2102      	movs	r1, #2
   80d74:	4826      	ldr	r0, [pc, #152]	; (80e10 <TWI0_Handler+0x17c>)
   80d76:	4b2c      	ldr	r3, [pc, #176]	; (80e28 <TWI0_Handler+0x194>)
   80d78:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   80d7a:	4b25      	ldr	r3, [pc, #148]	; (80e10 <TWI0_Handler+0x17c>)
   80d7c:	2202      	movs	r2, #2
   80d7e:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   80d80:	4823      	ldr	r0, [pc, #140]	; (80e10 <TWI0_Handler+0x17c>)
   80d82:	4b24      	ldr	r3, [pc, #144]	; (80e14 <TWI0_Handler+0x180>)
   80d84:	4798      	blx	r3
   80d86:	4602      	mov	r2, r0
   80d88:	687b      	ldr	r3, [r7, #4]
   80d8a:	4313      	orrs	r3, r2
   80d8c:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   80d8e:	687b      	ldr	r3, [r7, #4]
   80d90:	f003 0302 	and.w	r3, r3, #2
   80d94:	2b00      	cmp	r3, #0
   80d96:	d018      	beq.n	80dca <TWI0_Handler+0x136>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   80d98:	2102      	movs	r1, #2
   80d9a:	481d      	ldr	r0, [pc, #116]	; (80e10 <TWI0_Handler+0x17c>)
   80d9c:	4b21      	ldr	r3, [pc, #132]	; (80e24 <TWI0_Handler+0x190>)
   80d9e:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   80da0:	4b26      	ldr	r3, [pc, #152]	; (80e3c <TWI0_Handler+0x1a8>)
   80da2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80da6:	3b01      	subs	r3, #1
   80da8:	4a19      	ldr	r2, [pc, #100]	; (80e10 <TWI0_Handler+0x17c>)
   80daa:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80dac:	b2d1      	uxtb	r1, r2
   80dae:	4a23      	ldr	r2, [pc, #140]	; (80e3c <TWI0_Handler+0x1a8>)
   80db0:	4413      	add	r3, r2
   80db2:	460a      	mov	r2, r1
   80db4:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(compassRxCallback != NULL)
   80db6:	4b22      	ldr	r3, [pc, #136]	; (80e40 <TWI0_Handler+0x1ac>)
   80db8:	681b      	ldr	r3, [r3, #0]
   80dba:	2b00      	cmp	r3, #0
   80dbc:	d002      	beq.n	80dc4 <TWI0_Handler+0x130>
        {
            compassRxCallback();
   80dbe:	4b20      	ldr	r3, [pc, #128]	; (80e40 <TWI0_Handler+0x1ac>)
   80dc0:	681b      	ldr	r3, [r3, #0]
   80dc2:	4798      	blx	r3
        }

        twiBusy = false;
   80dc4:	4b1c      	ldr	r3, [pc, #112]	; (80e38 <TWI0_Handler+0x1a4>)
   80dc6:	2200      	movs	r2, #0
   80dc8:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   80dca:	687b      	ldr	r3, [r7, #4]
   80dcc:	f403 7350 	and.w	r3, r3, #832	; 0x340
   80dd0:	2b00      	cmp	r3, #0
   80dd2:	d019      	beq.n	80e08 <TWI0_Handler+0x174>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   80dd4:	f240 2102 	movw	r1, #514	; 0x202
   80dd8:	4810      	ldr	r0, [pc, #64]	; (80e1c <TWI0_Handler+0x188>)
   80dda:	4b11      	ldr	r3, [pc, #68]	; (80e20 <TWI0_Handler+0x18c>)
   80ddc:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   80dde:	687b      	ldr	r3, [r7, #4]
   80de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
   80de4:	2b00      	cmp	r3, #0
   80de6:	d102      	bne.n	80dee <TWI0_Handler+0x15a>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   80de8:	4b09      	ldr	r3, [pc, #36]	; (80e10 <TWI0_Handler+0x17c>)
   80dea:	2202      	movs	r2, #2
   80dec:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   80dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80df2:	4807      	ldr	r0, [pc, #28]	; (80e10 <TWI0_Handler+0x17c>)
   80df4:	4b0b      	ldr	r3, [pc, #44]	; (80e24 <TWI0_Handler+0x190>)
   80df6:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   80df8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80dfc:	4804      	ldr	r0, [pc, #16]	; (80e10 <TWI0_Handler+0x17c>)
   80dfe:	4b09      	ldr	r3, [pc, #36]	; (80e24 <TWI0_Handler+0x190>)
   80e00:	4798      	blx	r3

        twiBusy = false;
   80e02:	4b0d      	ldr	r3, [pc, #52]	; (80e38 <TWI0_Handler+0x1a4>)
   80e04:	2200      	movs	r2, #0
   80e06:	701a      	strb	r2, [r3, #0]
	}
}
   80e08:	bf00      	nop
   80e0a:	370c      	adds	r7, #12
   80e0c:	46bd      	mov	sp, r7
   80e0e:	bd90      	pop	{r4, r7, pc}
   80e10:	4008c000 	.word	0x4008c000
   80e14:	00080e7d 	.word	0x00080e7d
   80e18:	00080e93 	.word	0x00080e93
   80e1c:	4008c100 	.word	0x4008c100
   80e20:	0008024d 	.word	0x0008024d
   80e24:	00080e5f 	.word	0x00080e5f
   80e28:	00080e45 	.word	0x00080e45
   80e2c:	20070b74 	.word	0x20070b74
   80e30:	20070d9c 	.word	0x20070d9c
   80e34:	20070d98 	.word	0x20070d98
   80e38:	20070d94 	.word	0x20070d94
   80e3c:	20070c84 	.word	0x20070c84
   80e40:	20070da0 	.word	0x20070da0

00080e44 <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   80e44:	b480      	push	{r7}
   80e46:	b083      	sub	sp, #12
   80e48:	af00      	add	r7, sp, #0
   80e4a:	6078      	str	r0, [r7, #4]
   80e4c:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   80e4e:	687b      	ldr	r3, [r7, #4]
   80e50:	683a      	ldr	r2, [r7, #0]
   80e52:	625a      	str	r2, [r3, #36]	; 0x24
}
   80e54:	bf00      	nop
   80e56:	370c      	adds	r7, #12
   80e58:	46bd      	mov	sp, r7
   80e5a:	bc80      	pop	{r7}
   80e5c:	4770      	bx	lr

00080e5e <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   80e5e:	b480      	push	{r7}
   80e60:	b083      	sub	sp, #12
   80e62:	af00      	add	r7, sp, #0
   80e64:	6078      	str	r0, [r7, #4]
   80e66:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   80e68:	687b      	ldr	r3, [r7, #4]
   80e6a:	683a      	ldr	r2, [r7, #0]
   80e6c:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   80e6e:	687b      	ldr	r3, [r7, #4]
   80e70:	6a1b      	ldr	r3, [r3, #32]
}
   80e72:	bf00      	nop
   80e74:	370c      	adds	r7, #12
   80e76:	46bd      	mov	sp, r7
   80e78:	bc80      	pop	{r7}
   80e7a:	4770      	bx	lr

00080e7c <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   80e7c:	b480      	push	{r7}
   80e7e:	b083      	sub	sp, #12
   80e80:	af00      	add	r7, sp, #0
   80e82:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   80e84:	687b      	ldr	r3, [r7, #4]
   80e86:	6a1b      	ldr	r3, [r3, #32]
}
   80e88:	4618      	mov	r0, r3
   80e8a:	370c      	adds	r7, #12
   80e8c:	46bd      	mov	sp, r7
   80e8e:	bc80      	pop	{r7}
   80e90:	4770      	bx	lr

00080e92 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   80e92:	b480      	push	{r7}
   80e94:	b083      	sub	sp, #12
   80e96:	af00      	add	r7, sp, #0
   80e98:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   80e9a:	687b      	ldr	r3, [r7, #4]
   80e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   80e9e:	4618      	mov	r0, r3
   80ea0:	370c      	adds	r7, #12
   80ea2:	46bd      	mov	sp, r7
   80ea4:	bc80      	pop	{r7}
   80ea6:	4770      	bx	lr

00080ea8 <twi_read_byte>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The byte read.
 */
uint8_t twi_read_byte(Twi *p_twi)
{
   80ea8:	b480      	push	{r7}
   80eaa:	b083      	sub	sp, #12
   80eac:	af00      	add	r7, sp, #0
   80eae:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_RHR;
   80eb0:	687b      	ldr	r3, [r7, #4]
   80eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80eb4:	b2db      	uxtb	r3, r3
}
   80eb6:	4618      	mov	r0, r3
   80eb8:	370c      	adds	r7, #12
   80eba:	46bd      	mov	sp, r7
   80ebc:	bc80      	pop	{r7}
   80ebe:	4770      	bx	lr

00080ec0 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   80ec0:	b480      	push	{r7}
   80ec2:	b083      	sub	sp, #12
   80ec4:	af00      	add	r7, sp, #0
   80ec6:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80ec8:	687b      	ldr	r3, [r7, #4]
   80eca:	2280      	movs	r2, #128	; 0x80
   80ecc:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   80ece:	687b      	ldr	r3, [r7, #4]
   80ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   80ed2:	bf00      	nop
   80ed4:	370c      	adds	r7, #12
   80ed6:	46bd      	mov	sp, r7
   80ed8:	bc80      	pop	{r7}
   80eda:	4770      	bx	lr

00080edc <compass_init>:

//local function
static void compass_callback(void);

void compass_init(void)
{
   80edc:	b580      	push	{r7, lr}
   80ede:	b082      	sub	sp, #8
   80ee0:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   80ee2:	4b0d      	ldr	r3, [pc, #52]	; (80f18 <compass_init+0x3c>)
   80ee4:	4798      	blx	r3
   80ee6:	6078      	str	r0, [r7, #4]

    rx_packet->chip = 0x60;
   80ee8:	687b      	ldr	r3, [r7, #4]
   80eea:	2260      	movs	r2, #96	; 0x60
   80eec:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    rx_packet->addr[0] = 0x02;
   80ef0:	687b      	ldr	r3, [r7, #4]
   80ef2:	2202      	movs	r2, #2
   80ef4:	701a      	strb	r2, [r3, #0]
    rx_packet->addr_length = 1;
   80ef6:	687b      	ldr	r3, [r7, #4]
   80ef8:	2201      	movs	r2, #1
   80efa:	605a      	str	r2, [r3, #4]
    rx_packet->length = sizeof(direction);
   80efc:	687b      	ldr	r3, [r7, #4]
   80efe:	2202      	movs	r2, #2
   80f00:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    twi_set_compass_tx_callback(compass_callback);
   80f04:	4805      	ldr	r0, [pc, #20]	; (80f1c <compass_init+0x40>)
   80f06:	4b06      	ldr	r3, [pc, #24]	; (80f20 <compass_init+0x44>)
   80f08:	4798      	blx	r3
    twi_set_compass_rx_callback(compass_callback);
   80f0a:	4804      	ldr	r0, [pc, #16]	; (80f1c <compass_init+0x40>)
   80f0c:	4b05      	ldr	r3, [pc, #20]	; (80f24 <compass_init+0x48>)
   80f0e:	4798      	blx	r3
}
   80f10:	bf00      	nop
   80f12:	3708      	adds	r7, #8
   80f14:	46bd      	mov	sp, r7
   80f16:	bd80      	pop	{r7, pc}
   80f18:	00080a91 	.word	0x00080a91
   80f1c:	00080fe5 	.word	0x00080fe5
   80f20:	00080c5d 	.word	0x00080c5d
   80f24:	00080c41 	.word	0x00080c41

00080f28 <update_compass>:

void update_compass(void)
{
   80f28:	b580      	push	{r7, lr}
   80f2a:	b082      	sub	sp, #8
   80f2c:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   80f2e:	4b1a      	ldr	r3, [pc, #104]	; (80f98 <update_compass+0x70>)
   80f30:	4798      	blx	r3
   80f32:	6078      	str	r0, [r7, #4]

    if ((getTicks() - ul_ticks_compass) > 100)
   80f34:	4b19      	ldr	r3, [pc, #100]	; (80f9c <update_compass+0x74>)
   80f36:	4798      	blx	r3
   80f38:	4602      	mov	r2, r0
   80f3a:	4b19      	ldr	r3, [pc, #100]	; (80fa0 <update_compass+0x78>)
   80f3c:	681b      	ldr	r3, [r3, #0]
   80f3e:	1ad3      	subs	r3, r2, r3
   80f40:	2b64      	cmp	r3, #100	; 0x64
   80f42:	d926      	bls.n	80f92 <update_compass+0x6a>
    {
        if(lcd_is_busy())
   80f44:	4b17      	ldr	r3, [pc, #92]	; (80fa4 <update_compass+0x7c>)
   80f46:	4798      	blx	r3
   80f48:	4603      	mov	r3, r0
   80f4a:	2b00      	cmp	r3, #0
   80f4c:	d120      	bne.n	80f90 <update_compass+0x68>
        {
            return;
        }

        ul_ticks_compass = getTicks();
   80f4e:	4b13      	ldr	r3, [pc, #76]	; (80f9c <update_compass+0x74>)
   80f50:	4798      	blx	r3
   80f52:	4602      	mov	r2, r0
   80f54:	4b12      	ldr	r3, [pc, #72]	; (80fa0 <update_compass+0x78>)
   80f56:	601a      	str	r2, [r3, #0]
        
        compassIsBusy = true;
   80f58:	4b13      	ldr	r3, [pc, #76]	; (80fa8 <update_compass+0x80>)
   80f5a:	2201      	movs	r2, #1
   80f5c:	701a      	strb	r2, [r3, #0]
        if(twi_pdc_master_read(TWI0, rx_packet) == TWI_SUCCESS)
   80f5e:	6879      	ldr	r1, [r7, #4]
   80f60:	4812      	ldr	r0, [pc, #72]	; (80fac <update_compass+0x84>)
   80f62:	4b13      	ldr	r3, [pc, #76]	; (80fb0 <update_compass+0x88>)
   80f64:	4798      	blx	r3
   80f66:	4603      	mov	r3, r0
   80f68:	2b00      	cmp	r3, #0
   80f6a:	d104      	bne.n	80f76 <update_compass+0x4e>
        {
            while(compassIsBusy);
   80f6c:	bf00      	nop
   80f6e:	4b0e      	ldr	r3, [pc, #56]	; (80fa8 <update_compass+0x80>)
   80f70:	781b      	ldrb	r3, [r3, #0]
   80f72:	2b00      	cmp	r3, #0
   80f74:	d1fb      	bne.n	80f6e <update_compass+0x46>
        }
        direction = (rx_packet->buffer[0] << 8) | rx_packet->buffer[1];
   80f76:	687b      	ldr	r3, [r7, #4]
   80f78:	7a1b      	ldrb	r3, [r3, #8]
   80f7a:	021b      	lsls	r3, r3, #8
   80f7c:	b21a      	sxth	r2, r3
   80f7e:	687b      	ldr	r3, [r7, #4]
   80f80:	7a5b      	ldrb	r3, [r3, #9]
   80f82:	b21b      	sxth	r3, r3
   80f84:	4313      	orrs	r3, r2
   80f86:	b21b      	sxth	r3, r3
   80f88:	b29a      	uxth	r2, r3
   80f8a:	4b0a      	ldr	r3, [pc, #40]	; (80fb4 <update_compass+0x8c>)
   80f8c:	801a      	strh	r2, [r3, #0]
   80f8e:	e000      	b.n	80f92 <update_compass+0x6a>
            return;
   80f90:	bf00      	nop
    }
}
   80f92:	3708      	adds	r7, #8
   80f94:	46bd      	mov	sp, r7
   80f96:	bd80      	pop	{r7, pc}
   80f98:	00080a91 	.word	0x00080a91
   80f9c:	00082395 	.word	0x00082395
   80fa0:	20070e68 	.word	0x20070e68
   80fa4:	0008142d 	.word	0x0008142d
   80fa8:	20070da4 	.word	0x20070da4
   80fac:	4008c000 	.word	0x4008c000
   80fb0:	00080aa5 	.word	0x00080aa5
   80fb4:	20070e1c 	.word	0x20070e1c

00080fb8 <set_compass_is_busy>:

void set_compass_is_busy(void)
{
   80fb8:	b480      	push	{r7}
   80fba:	af00      	add	r7, sp, #0
    compassIsBusy = true;
   80fbc:	4b03      	ldr	r3, [pc, #12]	; (80fcc <set_compass_is_busy+0x14>)
   80fbe:	2201      	movs	r2, #1
   80fc0:	701a      	strb	r2, [r3, #0]
}
   80fc2:	bf00      	nop
   80fc4:	46bd      	mov	sp, r7
   80fc6:	bc80      	pop	{r7}
   80fc8:	4770      	bx	lr
   80fca:	bf00      	nop
   80fcc:	20070da4 	.word	0x20070da4

00080fd0 <compass_is_busy>:

uint8_t compass_is_busy(void)
{
   80fd0:	b480      	push	{r7}
   80fd2:	af00      	add	r7, sp, #0
    return compassIsBusy;
   80fd4:	4b02      	ldr	r3, [pc, #8]	; (80fe0 <compass_is_busy+0x10>)
   80fd6:	781b      	ldrb	r3, [r3, #0]
}
   80fd8:	4618      	mov	r0, r3
   80fda:	46bd      	mov	sp, r7
   80fdc:	bc80      	pop	{r7}
   80fde:	4770      	bx	lr
   80fe0:	20070da4 	.word	0x20070da4

00080fe4 <compass_callback>:
    return tmp_corr;
}*/

//local function
static void compass_callback(void)
{
   80fe4:	b480      	push	{r7}
   80fe6:	af00      	add	r7, sp, #0
    compassIsBusy = false;
   80fe8:	4b03      	ldr	r3, [pc, #12]	; (80ff8 <compass_callback+0x14>)
   80fea:	2200      	movs	r2, #0
   80fec:	701a      	strb	r2, [r3, #0]
}
   80fee:	bf00      	nop
   80ff0:	46bd      	mov	sp, r7
   80ff2:	bc80      	pop	{r7}
   80ff4:	4770      	bx	lr
   80ff6:	bf00      	nop
   80ff8:	20070da4 	.word	0x20070da4

00080ffc <osc_get_rate>:
{
   80ffc:	b480      	push	{r7}
   80ffe:	b083      	sub	sp, #12
   81000:	af00      	add	r7, sp, #0
   81002:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81004:	687b      	ldr	r3, [r7, #4]
   81006:	2b07      	cmp	r3, #7
   81008:	d825      	bhi.n	81056 <osc_get_rate+0x5a>
   8100a:	a201      	add	r2, pc, #4	; (adr r2, 81010 <osc_get_rate+0x14>)
   8100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81010:	00081031 	.word	0x00081031
   81014:	00081037 	.word	0x00081037
   81018:	0008103d 	.word	0x0008103d
   8101c:	00081043 	.word	0x00081043
   81020:	00081047 	.word	0x00081047
   81024:	0008104b 	.word	0x0008104b
   81028:	0008104f 	.word	0x0008104f
   8102c:	00081053 	.word	0x00081053
		return OSC_SLCK_32K_RC_HZ;
   81030:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81034:	e010      	b.n	81058 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   81036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8103a:	e00d      	b.n	81058 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   8103c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81040:	e00a      	b.n	81058 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   81042:	4b08      	ldr	r3, [pc, #32]	; (81064 <osc_get_rate+0x68>)
   81044:	e008      	b.n	81058 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   81046:	4b08      	ldr	r3, [pc, #32]	; (81068 <osc_get_rate+0x6c>)
   81048:	e006      	b.n	81058 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8104a:	4b08      	ldr	r3, [pc, #32]	; (8106c <osc_get_rate+0x70>)
   8104c:	e004      	b.n	81058 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8104e:	4b07      	ldr	r3, [pc, #28]	; (8106c <osc_get_rate+0x70>)
   81050:	e002      	b.n	81058 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   81052:	4b06      	ldr	r3, [pc, #24]	; (8106c <osc_get_rate+0x70>)
   81054:	e000      	b.n	81058 <osc_get_rate+0x5c>
	return 0;
   81056:	2300      	movs	r3, #0
}
   81058:	4618      	mov	r0, r3
   8105a:	370c      	adds	r7, #12
   8105c:	46bd      	mov	sp, r7
   8105e:	bc80      	pop	{r7}
   81060:	4770      	bx	lr
   81062:	bf00      	nop
   81064:	003d0900 	.word	0x003d0900
   81068:	007a1200 	.word	0x007a1200
   8106c:	00b71b00 	.word	0x00b71b00

00081070 <sysclk_get_main_hz>:
{
   81070:	b580      	push	{r7, lr}
   81072:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   81074:	2006      	movs	r0, #6
   81076:	4b04      	ldr	r3, [pc, #16]	; (81088 <sysclk_get_main_hz+0x18>)
   81078:	4798      	blx	r3
   8107a:	4602      	mov	r2, r0
   8107c:	4613      	mov	r3, r2
   8107e:	00db      	lsls	r3, r3, #3
   81080:	1a9b      	subs	r3, r3, r2
   81082:	005b      	lsls	r3, r3, #1
}
   81084:	4618      	mov	r0, r3
   81086:	bd80      	pop	{r7, pc}
   81088:	00080ffd 	.word	0x00080ffd

0008108c <sysclk_get_peripheral_hz>:
{
   8108c:	b580      	push	{r7, lr}
   8108e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   81090:	4b02      	ldr	r3, [pc, #8]	; (8109c <sysclk_get_peripheral_hz+0x10>)
   81092:	4798      	blx	r3
   81094:	4603      	mov	r3, r0
   81096:	085b      	lsrs	r3, r3, #1
}
   81098:	4618      	mov	r0, r3
   8109a:	bd80      	pop	{r7, pc}
   8109c:	00081071 	.word	0x00081071

000810a0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   810a0:	b580      	push	{r7, lr}
   810a2:	b082      	sub	sp, #8
   810a4:	af00      	add	r7, sp, #0
   810a6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   810a8:	6878      	ldr	r0, [r7, #4]
   810aa:	4b03      	ldr	r3, [pc, #12]	; (810b8 <sysclk_enable_peripheral_clock+0x18>)
   810ac:	4798      	blx	r3
}
   810ae:	bf00      	nop
   810b0:	3708      	adds	r7, #8
   810b2:	46bd      	mov	sp, r7
   810b4:	bd80      	pop	{r7, pc}
   810b6:	bf00      	nop
   810b8:	00082d55 	.word	0x00082d55

000810bc <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   810bc:	b580      	push	{r7, lr}
   810be:	b082      	sub	sp, #8
   810c0:	af00      	add	r7, sp, #0
   810c2:	6078      	str	r0, [r7, #4]
   810c4:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   810c6:	4b10      	ldr	r3, [pc, #64]	; (81108 <twi_master_setup+0x4c>)
   810c8:	4798      	blx	r3
   810ca:	4602      	mov	r2, r0
   810cc:	683b      	ldr	r3, [r7, #0]
   810ce:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   810d0:	683b      	ldr	r3, [r7, #0]
   810d2:	2200      	movs	r2, #0
   810d4:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   810d6:	687b      	ldr	r3, [r7, #4]
   810d8:	4a0c      	ldr	r2, [pc, #48]	; (8110c <twi_master_setup+0x50>)
   810da:	4293      	cmp	r3, r2
   810dc:	d103      	bne.n	810e6 <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   810de:	2016      	movs	r0, #22
   810e0:	4b0b      	ldr	r3, [pc, #44]	; (81110 <twi_master_setup+0x54>)
   810e2:	4798      	blx	r3
   810e4:	e006      	b.n	810f4 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   810e6:	687b      	ldr	r3, [r7, #4]
   810e8:	4a0a      	ldr	r2, [pc, #40]	; (81114 <twi_master_setup+0x58>)
   810ea:	4293      	cmp	r3, r2
   810ec:	d102      	bne.n	810f4 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   810ee:	2017      	movs	r0, #23
   810f0:	4b07      	ldr	r3, [pc, #28]	; (81110 <twi_master_setup+0x54>)
   810f2:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   810f4:	6839      	ldr	r1, [r7, #0]
   810f6:	6878      	ldr	r0, [r7, #4]
   810f8:	4b07      	ldr	r3, [pc, #28]	; (81118 <twi_master_setup+0x5c>)
   810fa:	4798      	blx	r3
   810fc:	4603      	mov	r3, r0
}
   810fe:	4618      	mov	r0, r3
   81100:	3708      	adds	r7, #8
   81102:	46bd      	mov	sp, r7
   81104:	bd80      	pop	{r7, pc}
   81106:	bf00      	nop
   81108:	0008108d 	.word	0x0008108d
   8110c:	4008c000 	.word	0x4008c000
   81110:	000810a1 	.word	0x000810a1
   81114:	40090000 	.word	0x40090000
   81118:	0008088d 	.word	0x0008088d

0008111c <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   8111c:	b580      	push	{r7, lr}
   8111e:	af00      	add	r7, sp, #0
    twi_set_lcd_tx_callback(lcd_callback);
   81120:	4821      	ldr	r0, [pc, #132]	; (811a8 <lcd_init+0x8c>)
   81122:	4b22      	ldr	r3, [pc, #136]	; (811ac <lcd_init+0x90>)
   81124:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   81126:	220c      	movs	r2, #12
   81128:	2100      	movs	r1, #0
   8112a:	4821      	ldr	r0, [pc, #132]	; (811b0 <lcd_init+0x94>)
   8112c:	4b21      	ldr	r3, [pc, #132]	; (811b4 <lcd_init+0x98>)
   8112e:	4798      	blx	r3
    twiConfig.speed = 100000;
   81130:	4b1f      	ldr	r3, [pc, #124]	; (811b0 <lcd_init+0x94>)
   81132:	4a21      	ldr	r2, [pc, #132]	; (811b8 <lcd_init+0x9c>)
   81134:	605a      	str	r2, [r3, #4]

    backlight = LCD_LIGHT_OFF;
   81136:	4b21      	ldr	r3, [pc, #132]	; (811bc <lcd_init+0xa0>)
   81138:	2200      	movs	r2, #0
   8113a:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   8113c:	2103      	movs	r1, #3
   8113e:	2000      	movs	r0, #0
   81140:	4b1f      	ldr	r3, [pc, #124]	; (811c0 <lcd_init+0xa4>)
   81142:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81144:	2006      	movs	r0, #6
   81146:	4b1f      	ldr	r3, [pc, #124]	; (811c4 <lcd_init+0xa8>)
   81148:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   8114a:	2103      	movs	r1, #3
   8114c:	2000      	movs	r0, #0
   8114e:	4b1c      	ldr	r3, [pc, #112]	; (811c0 <lcd_init+0xa4>)
   81150:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81152:	2006      	movs	r0, #6
   81154:	4b1b      	ldr	r3, [pc, #108]	; (811c4 <lcd_init+0xa8>)
   81156:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   81158:	2103      	movs	r1, #3
   8115a:	2000      	movs	r0, #0
   8115c:	4b18      	ldr	r3, [pc, #96]	; (811c0 <lcd_init+0xa4>)
   8115e:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   81160:	2006      	movs	r0, #6
   81162:	4b18      	ldr	r3, [pc, #96]	; (811c4 <lcd_init+0xa8>)
   81164:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   81166:	2102      	movs	r1, #2
   81168:	2000      	movs	r0, #0
   8116a:	4b15      	ldr	r3, [pc, #84]	; (811c0 <lcd_init+0xa4>)
   8116c:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   8116e:	2128      	movs	r1, #40	; 0x28
   81170:	2000      	movs	r0, #0
   81172:	4b15      	ldr	r3, [pc, #84]	; (811c8 <lcd_init+0xac>)
   81174:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   81176:	2108      	movs	r1, #8
   81178:	2000      	movs	r0, #0
   8117a:	4b13      	ldr	r3, [pc, #76]	; (811c8 <lcd_init+0xac>)
   8117c:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   8117e:	2101      	movs	r1, #1
   81180:	2000      	movs	r0, #0
   81182:	4b11      	ldr	r3, [pc, #68]	; (811c8 <lcd_init+0xac>)
   81184:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   81186:	2003      	movs	r0, #3
   81188:	4b0e      	ldr	r3, [pc, #56]	; (811c4 <lcd_init+0xa8>)
   8118a:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   8118c:	2106      	movs	r1, #6
   8118e:	2000      	movs	r0, #0
   81190:	4b0d      	ldr	r3, [pc, #52]	; (811c8 <lcd_init+0xac>)
   81192:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   81194:	210c      	movs	r1, #12
   81196:	2000      	movs	r0, #0
   81198:	4b0b      	ldr	r3, [pc, #44]	; (811c8 <lcd_init+0xac>)
   8119a:	4798      	blx	r3

    backlight = LCD_LIGHT_ON;
   8119c:	4b07      	ldr	r3, [pc, #28]	; (811bc <lcd_init+0xa0>)
   8119e:	2208      	movs	r2, #8
   811a0:	701a      	strb	r2, [r3, #0]
}
   811a2:	bf00      	nop
   811a4:	bd80      	pop	{r7, pc}
   811a6:	bf00      	nop
   811a8:	00081691 	.word	0x00081691
   811ac:	00080c79 	.word	0x00080c79
   811b0:	20070db0 	.word	0x20070db0
   811b4:	00084425 	.word	0x00084425
   811b8:	000186a0 	.word	0x000186a0
   811bc:	20070da5 	.word	0x20070da5
   811c0:	00081441 	.word	0x00081441
   811c4:	000823a9 	.word	0x000823a9
   811c8:	00081551 	.word	0x00081551

000811cc <lcd_set_backlight>:

void lcd_set_backlight(backlight_t state)
{
   811cc:	b480      	push	{r7}
   811ce:	b083      	sub	sp, #12
   811d0:	af00      	add	r7, sp, #0
   811d2:	4603      	mov	r3, r0
   811d4:	71fb      	strb	r3, [r7, #7]
    backlight = state;
   811d6:	4a04      	ldr	r2, [pc, #16]	; (811e8 <lcd_set_backlight+0x1c>)
   811d8:	79fb      	ldrb	r3, [r7, #7]
   811da:	7013      	strb	r3, [r2, #0]
//    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
//    mdelay(LCD_CLEAR_WAIT_TIME);
}
   811dc:	bf00      	nop
   811de:	370c      	adds	r7, #12
   811e0:	46bd      	mov	sp, r7
   811e2:	bc80      	pop	{r7}
   811e4:	4770      	bx	lr
   811e6:	bf00      	nop
   811e8:	20070da5 	.word	0x20070da5

000811ec <lcd_clear>:

void lcd_clear(void)
{
   811ec:	b580      	push	{r7, lr}
   811ee:	af00      	add	r7, sp, #0
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   811f0:	2101      	movs	r1, #1
   811f2:	2000      	movs	r0, #0
   811f4:	4b03      	ldr	r3, [pc, #12]	; (81204 <lcd_clear+0x18>)
   811f6:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   811f8:	2003      	movs	r0, #3
   811fa:	4b03      	ldr	r3, [pc, #12]	; (81208 <lcd_clear+0x1c>)
   811fc:	4798      	blx	r3
}
   811fe:	bf00      	nop
   81200:	bd80      	pop	{r7, pc}
   81202:	bf00      	nop
   81204:	00081551 	.word	0x00081551
   81208:	000823a9 	.word	0x000823a9

0008120c <lcd_print_s>:
    sprintf(str, "%10lu", data);
    lcd_print_s(line, col, str);
}

void lcd_print_s(uint8_t line, uint8_t col, const char* str)
{
   8120c:	b590      	push	{r4, r7, lr}
   8120e:	b087      	sub	sp, #28
   81210:	af00      	add	r7, sp, #0
   81212:	4603      	mov	r3, r0
   81214:	603a      	str	r2, [r7, #0]
   81216:	71fb      	strb	r3, [r7, #7]
   81218:	460b      	mov	r3, r1
   8121a:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   8121c:	4b75      	ldr	r3, [pc, #468]	; (813f4 <lcd_print_s+0x1e8>)
   8121e:	4798      	blx	r3
   81220:	6138      	str	r0, [r7, #16]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    
    while(lcdIsBusy | twi_is_busy())
   81222:	e019      	b.n	81258 <lcd_print_s+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81224:	4b74      	ldr	r3, [pc, #464]	; (813f8 <lcd_print_s+0x1ec>)
   81226:	4798      	blx	r3
   81228:	4602      	mov	r2, r0
   8122a:	4b74      	ldr	r3, [pc, #464]	; (813fc <lcd_print_s+0x1f0>)
   8122c:	681b      	ldr	r3, [r3, #0]
   8122e:	1ad3      	subs	r3, r2, r3
   81230:	2b0a      	cmp	r3, #10
   81232:	d911      	bls.n	81258 <lcd_print_s+0x4c>
        {
            lcdIsBusy = false;
   81234:	4b72      	ldr	r3, [pc, #456]	; (81400 <lcd_print_s+0x1f4>)
   81236:	2200      	movs	r2, #0
   81238:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   8123a:	4b72      	ldr	r3, [pc, #456]	; (81404 <lcd_print_s+0x1f8>)
   8123c:	681b      	ldr	r3, [r3, #0]
   8123e:	3301      	adds	r3, #1
   81240:	4a70      	ldr	r2, [pc, #448]	; (81404 <lcd_print_s+0x1f8>)
   81242:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81244:	f240 2102 	movw	r1, #514	; 0x202
   81248:	486f      	ldr	r0, [pc, #444]	; (81408 <lcd_print_s+0x1fc>)
   8124a:	4b70      	ldr	r3, [pc, #448]	; (8140c <lcd_print_s+0x200>)
   8124c:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   8124e:	4970      	ldr	r1, [pc, #448]	; (81410 <lcd_print_s+0x204>)
   81250:	4870      	ldr	r0, [pc, #448]	; (81414 <lcd_print_s+0x208>)
   81252:	4b71      	ldr	r3, [pc, #452]	; (81418 <lcd_print_s+0x20c>)
   81254:	4798      	blx	r3
            break;
   81256:	e009      	b.n	8126c <lcd_print_s+0x60>
    while(lcdIsBusy | twi_is_busy())
   81258:	4b70      	ldr	r3, [pc, #448]	; (8141c <lcd_print_s+0x210>)
   8125a:	4798      	blx	r3
   8125c:	4603      	mov	r3, r0
   8125e:	461a      	mov	r2, r3
   81260:	4b67      	ldr	r3, [pc, #412]	; (81400 <lcd_print_s+0x1f4>)
   81262:	781b      	ldrb	r3, [r3, #0]
   81264:	4313      	orrs	r3, r2
   81266:	b2db      	uxtb	r3, r3
   81268:	2b00      	cmp	r3, #0
   8126a:	d1db      	bne.n	81224 <lcd_print_s+0x18>
        }
    }

    tx_packet->chip = 0x27;
   8126c:	693b      	ldr	r3, [r7, #16]
   8126e:	2227      	movs	r2, #39	; 0x27
   81270:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81274:	693b      	ldr	r3, [r7, #16]
   81276:	2200      	movs	r2, #0
   81278:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   8127a:	693b      	ldr	r3, [r7, #16]
   8127c:	2200      	movs	r2, #0
   8127e:	605a      	str	r2, [r3, #4]
    
    // Calculate display address
    switch(line)
   81280:	79fb      	ldrb	r3, [r7, #7]
   81282:	2b03      	cmp	r3, #3
   81284:	d006      	beq.n	81294 <lcd_print_s+0x88>
   81286:	2b04      	cmp	r3, #4
   81288:	d007      	beq.n	8129a <lcd_print_s+0x8e>
   8128a:	2b02      	cmp	r3, #2
   8128c:	d108      	bne.n	812a0 <lcd_print_s+0x94>
    {
        case 2:
        addr = 0x80 | 0x40;   // set address to start of line 2
   8128e:	23c0      	movs	r3, #192	; 0xc0
   81290:	75fb      	strb	r3, [r7, #23]
        break;
   81292:	e008      	b.n	812a6 <lcd_print_s+0x9a>
        case 3:
        addr = 0x80 | 0x14;   // set address to start of line 3
   81294:	2394      	movs	r3, #148	; 0x94
   81296:	75fb      	strb	r3, [r7, #23]
        break;
   81298:	e005      	b.n	812a6 <lcd_print_s+0x9a>
        case 4:
        addr = 0x80 | 0x54;   // set address to start of line 4
   8129a:	23d4      	movs	r3, #212	; 0xd4
   8129c:	75fb      	strb	r3, [r7, #23]
        break;
   8129e:	e002      	b.n	812a6 <lcd_print_s+0x9a>
        case 1:
        default:
        addr = 0x80;          // set address to start of line 1
   812a0:	2380      	movs	r3, #128	; 0x80
   812a2:	75fb      	strb	r3, [r7, #23]
        break;
   812a4:	bf00      	nop
    }
    addr += col;  // set column in the selected line
   812a6:	7dfa      	ldrb	r2, [r7, #23]
   812a8:	79bb      	ldrb	r3, [r7, #6]
   812aa:	4413      	add	r3, r2
   812ac:	75fb      	strb	r3, [r7, #23]

    // Set cursor
    cmd = LCD_FUNTION_WRITE | backlight;
   812ae:	4b5c      	ldr	r3, [pc, #368]	; (81420 <lcd_print_s+0x214>)
   812b0:	781b      	ldrb	r3, [r3, #0]
   812b2:	73fb      	strb	r3, [r7, #15]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   812b4:	7dfb      	ldrb	r3, [r7, #23]
   812b6:	f023 030f 	bic.w	r3, r3, #15
   812ba:	b2da      	uxtb	r2, r3
   812bc:	7bfb      	ldrb	r3, [r7, #15]
   812be:	4313      	orrs	r3, r2
   812c0:	b2db      	uxtb	r3, r3
   812c2:	f043 0304 	orr.w	r3, r3, #4
   812c6:	b2da      	uxtb	r2, r3
   812c8:	693b      	ldr	r3, [r7, #16]
   812ca:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   812cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
   812d0:	f023 030f 	bic.w	r3, r3, #15
   812d4:	b25a      	sxtb	r2, r3
   812d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
   812da:	4313      	orrs	r3, r2
   812dc:	b25b      	sxtb	r3, r3
   812de:	b2da      	uxtb	r2, r3
   812e0:	693b      	ldr	r3, [r7, #16]
   812e2:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   812e4:	7dfb      	ldrb	r3, [r7, #23]
   812e6:	011b      	lsls	r3, r3, #4
   812e8:	b2da      	uxtb	r2, r3
   812ea:	7bfb      	ldrb	r3, [r7, #15]
   812ec:	4313      	orrs	r3, r2
   812ee:	b2db      	uxtb	r3, r3
   812f0:	f043 0304 	orr.w	r3, r3, #4
   812f4:	b2da      	uxtb	r2, r3
   812f6:	693b      	ldr	r3, [r7, #16]
   812f8:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   812fa:	7dfb      	ldrb	r3, [r7, #23]
   812fc:	011b      	lsls	r3, r3, #4
   812fe:	b25a      	sxtb	r2, r3
   81300:	f997 300f 	ldrsb.w	r3, [r7, #15]
   81304:	4313      	orrs	r3, r2
   81306:	b25b      	sxtb	r3, r3
   81308:	b2da      	uxtb	r2, r3
   8130a:	693b      	ldr	r3, [r7, #16]
   8130c:	72da      	strb	r2, [r3, #11]
    
    // write string ...
    cmd = LCD_WRITE_DDR | backlight;
   8130e:	4b44      	ldr	r3, [pc, #272]	; (81420 <lcd_print_s+0x214>)
   81310:	781b      	ldrb	r3, [r3, #0]
   81312:	f043 0301 	orr.w	r3, r3, #1
   81316:	73fb      	strb	r3, [r7, #15]
    for(count = 0; count < strlen(str); count++)
   81318:	2300      	movs	r3, #0
   8131a:	75bb      	strb	r3, [r7, #22]
   8131c:	e04b      	b.n	813b6 <lcd_print_s+0x1aa>
    {
        byte = str[count];
   8131e:	7dbb      	ldrb	r3, [r7, #22]
   81320:	683a      	ldr	r2, [r7, #0]
   81322:	4413      	add	r3, r2
   81324:	781b      	ldrb	r3, [r3, #0]
   81326:	73bb      	strb	r3, [r7, #14]
        tx_packet->buffer[4 + count * 4 + 0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   81328:	7dbb      	ldrb	r3, [r7, #22]
   8132a:	3301      	adds	r3, #1
   8132c:	009b      	lsls	r3, r3, #2
   8132e:	7bba      	ldrb	r2, [r7, #14]
   81330:	f022 020f 	bic.w	r2, r2, #15
   81334:	b2d1      	uxtb	r1, r2
   81336:	7bfa      	ldrb	r2, [r7, #15]
   81338:	430a      	orrs	r2, r1
   8133a:	b2d2      	uxtb	r2, r2
   8133c:	f042 0204 	orr.w	r2, r2, #4
   81340:	b2d1      	uxtb	r1, r2
   81342:	693a      	ldr	r2, [r7, #16]
   81344:	4413      	add	r3, r2
   81346:	460a      	mov	r2, r1
   81348:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   8134a:	7dbb      	ldrb	r3, [r7, #22]
   8134c:	3301      	adds	r3, #1
   8134e:	009b      	lsls	r3, r3, #2
   81350:	3301      	adds	r3, #1
   81352:	f997 200e 	ldrsb.w	r2, [r7, #14]
   81356:	f022 020f 	bic.w	r2, r2, #15
   8135a:	b251      	sxtb	r1, r2
   8135c:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81360:	430a      	orrs	r2, r1
   81362:	b252      	sxtb	r2, r2
   81364:	b2d1      	uxtb	r1, r2
   81366:	693a      	ldr	r2, [r7, #16]
   81368:	4413      	add	r3, r2
   8136a:	460a      	mov	r2, r1
   8136c:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   8136e:	7dbb      	ldrb	r3, [r7, #22]
   81370:	3301      	adds	r3, #1
   81372:	009b      	lsls	r3, r3, #2
   81374:	3302      	adds	r3, #2
   81376:	7bba      	ldrb	r2, [r7, #14]
   81378:	0112      	lsls	r2, r2, #4
   8137a:	b2d1      	uxtb	r1, r2
   8137c:	7bfa      	ldrb	r2, [r7, #15]
   8137e:	430a      	orrs	r2, r1
   81380:	b2d2      	uxtb	r2, r2
   81382:	f042 0204 	orr.w	r2, r2, #4
   81386:	b2d1      	uxtb	r1, r2
   81388:	693a      	ldr	r2, [r7, #16]
   8138a:	4413      	add	r3, r2
   8138c:	460a      	mov	r2, r1
   8138e:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81390:	7dbb      	ldrb	r3, [r7, #22]
   81392:	3301      	adds	r3, #1
   81394:	009b      	lsls	r3, r3, #2
   81396:	3303      	adds	r3, #3
   81398:	7bba      	ldrb	r2, [r7, #14]
   8139a:	0112      	lsls	r2, r2, #4
   8139c:	b251      	sxtb	r1, r2
   8139e:	f997 200f 	ldrsb.w	r2, [r7, #15]
   813a2:	430a      	orrs	r2, r1
   813a4:	b252      	sxtb	r2, r2
   813a6:	b2d1      	uxtb	r1, r2
   813a8:	693a      	ldr	r2, [r7, #16]
   813aa:	4413      	add	r3, r2
   813ac:	460a      	mov	r2, r1
   813ae:	721a      	strb	r2, [r3, #8]
    for(count = 0; count < strlen(str); count++)
   813b0:	7dbb      	ldrb	r3, [r7, #22]
   813b2:	3301      	adds	r3, #1
   813b4:	75bb      	strb	r3, [r7, #22]
   813b6:	7dbc      	ldrb	r4, [r7, #22]
   813b8:	6838      	ldr	r0, [r7, #0]
   813ba:	4b1a      	ldr	r3, [pc, #104]	; (81424 <lcd_print_s+0x218>)
   813bc:	4798      	blx	r3
   813be:	4603      	mov	r3, r0
   813c0:	429c      	cmp	r4, r3
   813c2:	d3ac      	bcc.n	8131e <lcd_print_s+0x112>
    }
    tx_packet->length = 4 + count * 4;
   813c4:	7dbb      	ldrb	r3, [r7, #22]
   813c6:	3301      	adds	r3, #1
   813c8:	009b      	lsls	r3, r3, #2
   813ca:	461a      	mov	r2, r3
   813cc:	693b      	ldr	r3, [r7, #16]
   813ce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    lcdIsBusy = true;
   813d2:	4b0b      	ldr	r3, [pc, #44]	; (81400 <lcd_print_s+0x1f4>)
   813d4:	2201      	movs	r2, #1
   813d6:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   813d8:	6939      	ldr	r1, [r7, #16]
   813da:	480e      	ldr	r0, [pc, #56]	; (81414 <lcd_print_s+0x208>)
   813dc:	4b12      	ldr	r3, [pc, #72]	; (81428 <lcd_print_s+0x21c>)
   813de:	4798      	blx	r3
    lcdStartTicks = getTicks();
   813e0:	4b05      	ldr	r3, [pc, #20]	; (813f8 <lcd_print_s+0x1ec>)
   813e2:	4798      	blx	r3
   813e4:	4602      	mov	r2, r0
   813e6:	4b05      	ldr	r3, [pc, #20]	; (813fc <lcd_print_s+0x1f0>)
   813e8:	601a      	str	r2, [r3, #0]
}
   813ea:	bf00      	nop
   813ec:	371c      	adds	r7, #28
   813ee:	46bd      	mov	sp, r7
   813f0:	bd90      	pop	{r4, r7, pc}
   813f2:	bf00      	nop
   813f4:	00080a7d 	.word	0x00080a7d
   813f8:	00082395 	.word	0x00082395
   813fc:	20070da8 	.word	0x20070da8
   81400:	20070da6 	.word	0x20070da6
   81404:	20070dac 	.word	0x20070dac
   81408:	4008c100 	.word	0x4008c100
   8140c:	0008024d 	.word	0x0008024d
   81410:	20070db0 	.word	0x20070db0
   81414:	4008c000 	.word	0x4008c000
   81418:	000810bd 	.word	0x000810bd
   8141c:	00080a69 	.word	0x00080a69
   81420:	20070da5 	.word	0x20070da5
   81424:	0008450d 	.word	0x0008450d
   81428:	00080b7d 	.word	0x00080b7d

0008142c <lcd_is_busy>:
    twi_pdc_master_write(TWI0, tx_packet);
    lcdStartTicks = getTicks();
}

uint8_t lcd_is_busy(void)
{
   8142c:	b480      	push	{r7}
   8142e:	af00      	add	r7, sp, #0
    return lcdIsBusy;
   81430:	4b02      	ldr	r3, [pc, #8]	; (8143c <lcd_is_busy+0x10>)
   81432:	781b      	ldrb	r3, [r3, #0]
}
   81434:	4618      	mov	r0, r3
   81436:	46bd      	mov	sp, r7
   81438:	bc80      	pop	{r7}
   8143a:	4770      	bx	lr
   8143c:	20070da6 	.word	0x20070da6

00081440 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   81440:	b580      	push	{r7, lr}
   81442:	b084      	sub	sp, #16
   81444:	af00      	add	r7, sp, #0
   81446:	4603      	mov	r3, r0
   81448:	460a      	mov	r2, r1
   8144a:	71fb      	strb	r3, [r7, #7]
   8144c:	4613      	mov	r3, r2
   8144e:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81450:	4b32      	ldr	r3, [pc, #200]	; (8151c <send_nibble+0xdc>)
   81452:	4798      	blx	r3
   81454:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   81456:	e019      	b.n	8148c <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81458:	4b31      	ldr	r3, [pc, #196]	; (81520 <send_nibble+0xe0>)
   8145a:	4798      	blx	r3
   8145c:	4602      	mov	r2, r0
   8145e:	4b31      	ldr	r3, [pc, #196]	; (81524 <send_nibble+0xe4>)
   81460:	681b      	ldr	r3, [r3, #0]
   81462:	1ad3      	subs	r3, r2, r3
   81464:	2b0a      	cmp	r3, #10
   81466:	d911      	bls.n	8148c <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   81468:	4b2f      	ldr	r3, [pc, #188]	; (81528 <send_nibble+0xe8>)
   8146a:	2200      	movs	r2, #0
   8146c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   8146e:	4b2f      	ldr	r3, [pc, #188]	; (8152c <send_nibble+0xec>)
   81470:	681b      	ldr	r3, [r3, #0]
   81472:	3301      	adds	r3, #1
   81474:	4a2d      	ldr	r2, [pc, #180]	; (8152c <send_nibble+0xec>)
   81476:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81478:	f240 2102 	movw	r1, #514	; 0x202
   8147c:	482c      	ldr	r0, [pc, #176]	; (81530 <send_nibble+0xf0>)
   8147e:	4b2d      	ldr	r3, [pc, #180]	; (81534 <send_nibble+0xf4>)
   81480:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81482:	492d      	ldr	r1, [pc, #180]	; (81538 <send_nibble+0xf8>)
   81484:	482d      	ldr	r0, [pc, #180]	; (8153c <send_nibble+0xfc>)
   81486:	4b2e      	ldr	r3, [pc, #184]	; (81540 <send_nibble+0x100>)
   81488:	4798      	blx	r3
            break;
   8148a:	e009      	b.n	814a0 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   8148c:	4b2d      	ldr	r3, [pc, #180]	; (81544 <send_nibble+0x104>)
   8148e:	4798      	blx	r3
   81490:	4603      	mov	r3, r0
   81492:	461a      	mov	r2, r3
   81494:	4b24      	ldr	r3, [pc, #144]	; (81528 <send_nibble+0xe8>)
   81496:	781b      	ldrb	r3, [r3, #0]
   81498:	4313      	orrs	r3, r2
   8149a:	b2db      	uxtb	r3, r3
   8149c:	2b00      	cmp	r3, #0
   8149e:	d1db      	bne.n	81458 <send_nibble+0x18>
        }
    }

    tx_packet->chip = 0x27;
   814a0:	68fb      	ldr	r3, [r7, #12]
   814a2:	2227      	movs	r2, #39	; 0x27
   814a4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   814a8:	68fb      	ldr	r3, [r7, #12]
   814aa:	2200      	movs	r2, #0
   814ac:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   814ae:	68fb      	ldr	r3, [r7, #12]
   814b0:	2200      	movs	r2, #0
   814b2:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   814b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   814b8:	f003 030f 	and.w	r3, r3, #15
   814bc:	b25a      	sxtb	r2, r3
   814be:	4b22      	ldr	r3, [pc, #136]	; (81548 <send_nibble+0x108>)
   814c0:	781b      	ldrb	r3, [r3, #0]
   814c2:	b25b      	sxtb	r3, r3
   814c4:	4313      	orrs	r3, r2
   814c6:	b25b      	sxtb	r3, r3
   814c8:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   814ca:	79bb      	ldrb	r3, [r7, #6]
   814cc:	011b      	lsls	r3, r3, #4
   814ce:	b2da      	uxtb	r2, r3
   814d0:	79fb      	ldrb	r3, [r7, #7]
   814d2:	4313      	orrs	r3, r2
   814d4:	b2db      	uxtb	r3, r3
   814d6:	f043 0304 	orr.w	r3, r3, #4
   814da:	b2da      	uxtb	r2, r3
   814dc:	68fb      	ldr	r3, [r7, #12]
   814de:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   814e0:	79bb      	ldrb	r3, [r7, #6]
   814e2:	011b      	lsls	r3, r3, #4
   814e4:	b25a      	sxtb	r2, r3
   814e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   814ea:	4313      	orrs	r3, r2
   814ec:	b25b      	sxtb	r3, r3
   814ee:	b2da      	uxtb	r2, r3
   814f0:	68fb      	ldr	r3, [r7, #12]
   814f2:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   814f4:	68fb      	ldr	r3, [r7, #12]
   814f6:	2202      	movs	r2, #2
   814f8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   814fc:	4b0a      	ldr	r3, [pc, #40]	; (81528 <send_nibble+0xe8>)
   814fe:	2201      	movs	r2, #1
   81500:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81502:	68f9      	ldr	r1, [r7, #12]
   81504:	480d      	ldr	r0, [pc, #52]	; (8153c <send_nibble+0xfc>)
   81506:	4b11      	ldr	r3, [pc, #68]	; (8154c <send_nibble+0x10c>)
   81508:	4798      	blx	r3
    lcdStartTicks = getTicks();
   8150a:	4b05      	ldr	r3, [pc, #20]	; (81520 <send_nibble+0xe0>)
   8150c:	4798      	blx	r3
   8150e:	4602      	mov	r2, r0
   81510:	4b04      	ldr	r3, [pc, #16]	; (81524 <send_nibble+0xe4>)
   81512:	601a      	str	r2, [r3, #0]
}
   81514:	bf00      	nop
   81516:	3710      	adds	r7, #16
   81518:	46bd      	mov	sp, r7
   8151a:	bd80      	pop	{r7, pc}
   8151c:	00080a7d 	.word	0x00080a7d
   81520:	00082395 	.word	0x00082395
   81524:	20070da8 	.word	0x20070da8
   81528:	20070da6 	.word	0x20070da6
   8152c:	20070dac 	.word	0x20070dac
   81530:	4008c100 	.word	0x4008c100
   81534:	0008024d 	.word	0x0008024d
   81538:	20070db0 	.word	0x20070db0
   8153c:	4008c000 	.word	0x4008c000
   81540:	000810bd 	.word	0x000810bd
   81544:	00080a69 	.word	0x00080a69
   81548:	20070da5 	.word	0x20070da5
   8154c:	00080b7d 	.word	0x00080b7d

00081550 <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   81550:	b580      	push	{r7, lr}
   81552:	b084      	sub	sp, #16
   81554:	af00      	add	r7, sp, #0
   81556:	4603      	mov	r3, r0
   81558:	460a      	mov	r2, r1
   8155a:	71fb      	strb	r3, [r7, #7]
   8155c:	4613      	mov	r3, r2
   8155e:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81560:	4b3e      	ldr	r3, [pc, #248]	; (8165c <send_byte+0x10c>)
   81562:	4798      	blx	r3
   81564:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   81566:	e019      	b.n	8159c <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81568:	4b3d      	ldr	r3, [pc, #244]	; (81660 <send_byte+0x110>)
   8156a:	4798      	blx	r3
   8156c:	4602      	mov	r2, r0
   8156e:	4b3d      	ldr	r3, [pc, #244]	; (81664 <send_byte+0x114>)
   81570:	681b      	ldr	r3, [r3, #0]
   81572:	1ad3      	subs	r3, r2, r3
   81574:	2b0a      	cmp	r3, #10
   81576:	d911      	bls.n	8159c <send_byte+0x4c>
        {
            lcdIsBusy = false;
   81578:	4b3b      	ldr	r3, [pc, #236]	; (81668 <send_byte+0x118>)
   8157a:	2200      	movs	r2, #0
   8157c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   8157e:	4b3b      	ldr	r3, [pc, #236]	; (8166c <send_byte+0x11c>)
   81580:	681b      	ldr	r3, [r3, #0]
   81582:	3301      	adds	r3, #1
   81584:	4a39      	ldr	r2, [pc, #228]	; (8166c <send_byte+0x11c>)
   81586:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81588:	f240 2102 	movw	r1, #514	; 0x202
   8158c:	4838      	ldr	r0, [pc, #224]	; (81670 <send_byte+0x120>)
   8158e:	4b39      	ldr	r3, [pc, #228]	; (81674 <send_byte+0x124>)
   81590:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81592:	4939      	ldr	r1, [pc, #228]	; (81678 <send_byte+0x128>)
   81594:	4839      	ldr	r0, [pc, #228]	; (8167c <send_byte+0x12c>)
   81596:	4b3a      	ldr	r3, [pc, #232]	; (81680 <send_byte+0x130>)
   81598:	4798      	blx	r3
            break;
   8159a:	e009      	b.n	815b0 <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   8159c:	4b39      	ldr	r3, [pc, #228]	; (81684 <send_byte+0x134>)
   8159e:	4798      	blx	r3
   815a0:	4603      	mov	r3, r0
   815a2:	461a      	mov	r2, r3
   815a4:	4b30      	ldr	r3, [pc, #192]	; (81668 <send_byte+0x118>)
   815a6:	781b      	ldrb	r3, [r3, #0]
   815a8:	4313      	orrs	r3, r2
   815aa:	b2db      	uxtb	r3, r3
   815ac:	2b00      	cmp	r3, #0
   815ae:	d1db      	bne.n	81568 <send_byte+0x18>
        }
    }

    tx_packet->chip = 0x27;
   815b0:	68fb      	ldr	r3, [r7, #12]
   815b2:	2227      	movs	r2, #39	; 0x27
   815b4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   815b8:	68fb      	ldr	r3, [r7, #12]
   815ba:	2200      	movs	r2, #0
   815bc:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   815be:	68fb      	ldr	r3, [r7, #12]
   815c0:	2200      	movs	r2, #0
   815c2:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   815c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   815c8:	f003 030f 	and.w	r3, r3, #15
   815cc:	b25a      	sxtb	r2, r3
   815ce:	4b2e      	ldr	r3, [pc, #184]	; (81688 <send_byte+0x138>)
   815d0:	781b      	ldrb	r3, [r3, #0]
   815d2:	b25b      	sxtb	r3, r3
   815d4:	4313      	orrs	r3, r2
   815d6:	b25b      	sxtb	r3, r3
   815d8:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   815da:	79bb      	ldrb	r3, [r7, #6]
   815dc:	f023 030f 	bic.w	r3, r3, #15
   815e0:	b2da      	uxtb	r2, r3
   815e2:	79fb      	ldrb	r3, [r7, #7]
   815e4:	4313      	orrs	r3, r2
   815e6:	b2db      	uxtb	r3, r3
   815e8:	f043 0304 	orr.w	r3, r3, #4
   815ec:	b2da      	uxtb	r2, r3
   815ee:	68fb      	ldr	r3, [r7, #12]
   815f0:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   815f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
   815f6:	f023 030f 	bic.w	r3, r3, #15
   815fa:	b25a      	sxtb	r2, r3
   815fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81600:	4313      	orrs	r3, r2
   81602:	b25b      	sxtb	r3, r3
   81604:	b2da      	uxtb	r2, r3
   81606:	68fb      	ldr	r3, [r7, #12]
   81608:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   8160a:	79bb      	ldrb	r3, [r7, #6]
   8160c:	011b      	lsls	r3, r3, #4
   8160e:	b2da      	uxtb	r2, r3
   81610:	79fb      	ldrb	r3, [r7, #7]
   81612:	4313      	orrs	r3, r2
   81614:	b2db      	uxtb	r3, r3
   81616:	f043 0304 	orr.w	r3, r3, #4
   8161a:	b2da      	uxtb	r2, r3
   8161c:	68fb      	ldr	r3, [r7, #12]
   8161e:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81620:	79bb      	ldrb	r3, [r7, #6]
   81622:	011b      	lsls	r3, r3, #4
   81624:	b25a      	sxtb	r2, r3
   81626:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8162a:	4313      	orrs	r3, r2
   8162c:	b25b      	sxtb	r3, r3
   8162e:	b2da      	uxtb	r2, r3
   81630:	68fb      	ldr	r3, [r7, #12]
   81632:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   81634:	68fb      	ldr	r3, [r7, #12]
   81636:	2204      	movs	r2, #4
   81638:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   8163c:	4b0a      	ldr	r3, [pc, #40]	; (81668 <send_byte+0x118>)
   8163e:	2201      	movs	r2, #1
   81640:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81642:	68f9      	ldr	r1, [r7, #12]
   81644:	480d      	ldr	r0, [pc, #52]	; (8167c <send_byte+0x12c>)
   81646:	4b11      	ldr	r3, [pc, #68]	; (8168c <send_byte+0x13c>)
   81648:	4798      	blx	r3
    lcdStartTicks = getTicks();
   8164a:	4b05      	ldr	r3, [pc, #20]	; (81660 <send_byte+0x110>)
   8164c:	4798      	blx	r3
   8164e:	4602      	mov	r2, r0
   81650:	4b04      	ldr	r3, [pc, #16]	; (81664 <send_byte+0x114>)
   81652:	601a      	str	r2, [r3, #0]
}
   81654:	bf00      	nop
   81656:	3710      	adds	r7, #16
   81658:	46bd      	mov	sp, r7
   8165a:	bd80      	pop	{r7, pc}
   8165c:	00080a7d 	.word	0x00080a7d
   81660:	00082395 	.word	0x00082395
   81664:	20070da8 	.word	0x20070da8
   81668:	20070da6 	.word	0x20070da6
   8166c:	20070dac 	.word	0x20070dac
   81670:	4008c100 	.word	0x4008c100
   81674:	0008024d 	.word	0x0008024d
   81678:	20070db0 	.word	0x20070db0
   8167c:	4008c000 	.word	0x4008c000
   81680:	000810bd 	.word	0x000810bd
   81684:	00080a69 	.word	0x00080a69
   81688:	20070da5 	.word	0x20070da5
   8168c:	00080b7d 	.word	0x00080b7d

00081690 <lcd_callback>:

static void lcd_callback(void)
{
   81690:	b480      	push	{r7}
   81692:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   81694:	4b03      	ldr	r3, [pc, #12]	; (816a4 <lcd_callback+0x14>)
   81696:	2200      	movs	r2, #0
   81698:	701a      	strb	r2, [r3, #0]
}
   8169a:	bf00      	nop
   8169c:	46bd      	mov	sp, r7
   8169e:	bc80      	pop	{r7}
   816a0:	4770      	bx	lr
   816a2:	bf00      	nop
   816a4:	20070da6 	.word	0x20070da6

000816a8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   816a8:	b480      	push	{r7}
   816aa:	b08b      	sub	sp, #44	; 0x2c
   816ac:	af00      	add	r7, sp, #0
   816ae:	6078      	str	r0, [r7, #4]
   816b0:	460b      	mov	r3, r1
   816b2:	70fb      	strb	r3, [r7, #3]
   816b4:	687b      	ldr	r3, [r7, #4]
   816b6:	627b      	str	r3, [r7, #36]	; 0x24
   816b8:	78fb      	ldrb	r3, [r7, #3]
   816ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   816be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   816c0:	61fb      	str	r3, [r7, #28]
   816c2:	69fb      	ldr	r3, [r7, #28]
   816c4:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   816c6:	69bb      	ldr	r3, [r7, #24]
   816c8:	095b      	lsrs	r3, r3, #5
   816ca:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   816cc:	697b      	ldr	r3, [r7, #20]
   816ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   816d2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   816d6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   816d8:	613b      	str	r3, [r7, #16]

	if (level) {
   816da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   816de:	2b00      	cmp	r3, #0
   816e0:	d009      	beq.n	816f6 <ioport_set_pin_level+0x4e>
   816e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   816e4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   816e6:	68fb      	ldr	r3, [r7, #12]
   816e8:	f003 031f 	and.w	r3, r3, #31
   816ec:	2201      	movs	r2, #1
   816ee:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   816f0:	693b      	ldr	r3, [r7, #16]
   816f2:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   816f4:	e008      	b.n	81708 <ioport_set_pin_level+0x60>
   816f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   816f8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   816fa:	68bb      	ldr	r3, [r7, #8]
   816fc:	f003 031f 	and.w	r3, r3, #31
   81700:	2201      	movs	r2, #1
   81702:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81704:	693b      	ldr	r3, [r7, #16]
   81706:	635a      	str	r2, [r3, #52]	; 0x34
   81708:	bf00      	nop
   8170a:	372c      	adds	r7, #44	; 0x2c
   8170c:	46bd      	mov	sp, r7
   8170e:	bc80      	pop	{r7}
   81710:	4770      	bx	lr

00081712 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   81712:	b480      	push	{r7}
   81714:	b089      	sub	sp, #36	; 0x24
   81716:	af00      	add	r7, sp, #0
   81718:	6078      	str	r0, [r7, #4]
   8171a:	687b      	ldr	r3, [r7, #4]
   8171c:	61fb      	str	r3, [r7, #28]
   8171e:	69fb      	ldr	r3, [r7, #28]
   81720:	61bb      	str	r3, [r7, #24]
   81722:	69bb      	ldr	r3, [r7, #24]
   81724:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   81726:	697b      	ldr	r3, [r7, #20]
   81728:	095b      	lsrs	r3, r3, #5
   8172a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8172c:	693b      	ldr	r3, [r7, #16]
   8172e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81732:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81736:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   8173a:	69fb      	ldr	r3, [r7, #28]
   8173c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8173e:	68fb      	ldr	r3, [r7, #12]
   81740:	f003 031f 	and.w	r3, r3, #31
   81744:	2101      	movs	r1, #1
   81746:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8174a:	4013      	ands	r3, r2
   8174c:	2b00      	cmp	r3, #0
   8174e:	bf14      	ite	ne
   81750:	2301      	movne	r3, #1
   81752:	2300      	moveq	r3, #0
   81754:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   81756:	4618      	mov	r0, r3
   81758:	3724      	adds	r7, #36	; 0x24
   8175a:	46bd      	mov	sp, r7
   8175c:	bc80      	pop	{r7}
   8175e:	4770      	bx	lr

00081760 <menu>:
static void print_menu_sensors(void);
static void print_menu_settings(void);
static void print_cursor(menu_info_t *info);

void menu(event_t event1)
{
   81760:	b580      	push	{r7, lr}
   81762:	b082      	sub	sp, #8
   81764:	af00      	add	r7, sp, #0
   81766:	4603      	mov	r3, r0
   81768:	71fb      	strb	r3, [r7, #7]
    switch (act_menu)
   8176a:	4b28      	ldr	r3, [pc, #160]	; (8180c <menu+0xac>)
   8176c:	781b      	ldrb	r3, [r3, #0]
   8176e:	2b09      	cmp	r3, #9
   81770:	d847      	bhi.n	81802 <menu+0xa2>
   81772:	a201      	add	r2, pc, #4	; (adr r2, 81778 <menu+0x18>)
   81774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81778:	000817a1 	.word	0x000817a1
   8177c:	000817ab 	.word	0x000817ab
   81780:	000817b5 	.word	0x000817b5
   81784:	000817bf 	.word	0x000817bf
   81788:	000817c9 	.word	0x000817c9
   8178c:	000817e7 	.word	0x000817e7
   81790:	000817f1 	.word	0x000817f1
   81794:	000817d3 	.word	0x000817d3
   81798:	000817dd 	.word	0x000817dd
   8179c:	000817fb 	.word	0x000817fb
    {
        case MENU_MAIN:
            menu_main(event1);
   817a0:	79fb      	ldrb	r3, [r7, #7]
   817a2:	4618      	mov	r0, r3
   817a4:	4b1a      	ldr	r3, [pc, #104]	; (81810 <menu+0xb0>)
   817a6:	4798      	blx	r3
            break;
   817a8:	e02c      	b.n	81804 <menu+0xa4>
        case MENU_MATCH:
            menu_match(event1);
   817aa:	79fb      	ldrb	r3, [r7, #7]
   817ac:	4618      	mov	r0, r3
   817ae:	4b19      	ldr	r3, [pc, #100]	; (81814 <menu+0xb4>)
   817b0:	4798      	blx	r3
            break;
   817b2:	e027      	b.n	81804 <menu+0xa4>
        case MENU_SENSORS:
            menu_sensors(event1);
   817b4:	79fb      	ldrb	r3, [r7, #7]
   817b6:	4618      	mov	r0, r3
   817b8:	4b17      	ldr	r3, [pc, #92]	; (81818 <menu+0xb8>)
   817ba:	4798      	blx	r3
            break;
   817bc:	e022      	b.n	81804 <menu+0xa4>
        case MENU_SETTINGS:
            menu_settings(event1);
   817be:	79fb      	ldrb	r3, [r7, #7]
   817c0:	4618      	mov	r0, r3
   817c2:	4b16      	ldr	r3, [pc, #88]	; (8181c <menu+0xbc>)
   817c4:	4798      	blx	r3
            break;
   817c6:	e01d      	b.n	81804 <menu+0xa4>
        case MENU_BALL:
            menu_ball(event1);
   817c8:	79fb      	ldrb	r3, [r7, #7]
   817ca:	4618      	mov	r0, r3
   817cc:	4b14      	ldr	r3, [pc, #80]	; (81820 <menu+0xc0>)
   817ce:	4798      	blx	r3
            break;
   817d0:	e018      	b.n	81804 <menu+0xa4>
        case MENU_COMPASS:
            menu_compass(event1);
   817d2:	79fb      	ldrb	r3, [r7, #7]
   817d4:	4618      	mov	r0, r3
   817d6:	4b13      	ldr	r3, [pc, #76]	; (81824 <menu+0xc4>)
   817d8:	4798      	blx	r3
            break;
   817da:	e013      	b.n	81804 <menu+0xa4>
        case MENU_COMPASS_CALIBRATION:
            menu_compass_calibration(event1);
   817dc:	79fb      	ldrb	r3, [r7, #7]
   817de:	4618      	mov	r0, r3
   817e0:	4b11      	ldr	r3, [pc, #68]	; (81828 <menu+0xc8>)
   817e2:	4798      	blx	r3
            break;
   817e4:	e00e      	b.n	81804 <menu+0xa4>
        case MENU_LINE:
            menu_line(event1);
   817e6:	79fb      	ldrb	r3, [r7, #7]
   817e8:	4618      	mov	r0, r3
   817ea:	4b10      	ldr	r3, [pc, #64]	; (8182c <menu+0xcc>)
   817ec:	4798      	blx	r3
            break;
   817ee:	e009      	b.n	81804 <menu+0xa4>
        case MENU_LINE_CALIBRATION:
            menu_line_calibration(event1);
   817f0:	79fb      	ldrb	r3, [r7, #7]
   817f2:	4618      	mov	r0, r3
   817f4:	4b0e      	ldr	r3, [pc, #56]	; (81830 <menu+0xd0>)
   817f6:	4798      	blx	r3
            break;
   817f8:	e004      	b.n	81804 <menu+0xa4>
        case MENU_SHUTDOWN:
            menu_shutdown(event1);
   817fa:	79fb      	ldrb	r3, [r7, #7]
   817fc:	4618      	mov	r0, r3
   817fe:	4b0d      	ldr	r3, [pc, #52]	; (81834 <menu+0xd4>)
   81800:	4798      	blx	r3
        default:
            break;
   81802:	bf00      	nop
    }
}
   81804:	bf00      	nop
   81806:	3708      	adds	r7, #8
   81808:	46bd      	mov	sp, r7
   8180a:	bd80      	pop	{r7, pc}
   8180c:	20070dbc 	.word	0x20070dbc
   81810:	00081839 	.word	0x00081839
   81814:	00081961 	.word	0x00081961
   81818:	00081991 	.word	0x00081991
   8181c:	00081d3d 	.word	0x00081d3d
   81820:	00081ab5 	.word	0x00081ab5
   81824:	00081b09 	.word	0x00081b09
   81828:	00081bdd 	.word	0x00081bdd
   8182c:	00081cdd 	.word	0x00081cdd
   81830:	00081d0d 	.word	0x00081d0d
   81834:	00081e61 	.word	0x00081e61

00081838 <menu_main>:

static void menu_main(event_t event1)
{
   81838:	b580      	push	{r7, lr}
   8183a:	b082      	sub	sp, #8
   8183c:	af00      	add	r7, sp, #0
   8183e:	4603      	mov	r3, r0
   81840:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   81842:	4b41      	ldr	r3, [pc, #260]	; (81948 <menu_main+0x110>)
   81844:	781b      	ldrb	r3, [r3, #0]
   81846:	2b00      	cmp	r3, #0
   81848:	d004      	beq.n	81854 <menu_main+0x1c>
    {
        print_menu = 0;
   8184a:	4b3f      	ldr	r3, [pc, #252]	; (81948 <menu_main+0x110>)
   8184c:	2200      	movs	r2, #0
   8184e:	701a      	strb	r2, [r3, #0]
        print_menu_main();
   81850:	4b3e      	ldr	r3, [pc, #248]	; (8194c <menu_main+0x114>)
   81852:	4798      	blx	r3
    }
    
    update_battery(0);
   81854:	2000      	movs	r0, #0
   81856:	4b3e      	ldr	r3, [pc, #248]	; (81950 <menu_main+0x118>)
   81858:	4798      	blx	r3
    
    switch (event1)
   8185a:	79fb      	ldrb	r3, [r7, #7]
   8185c:	3b01      	subs	r3, #1
   8185e:	2b0f      	cmp	r3, #15
   81860:	d868      	bhi.n	81934 <menu_main+0xfc>
   81862:	a201      	add	r2, pc, #4	; (adr r2, 81868 <menu_main+0x30>)
   81864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81868:	000818a9 	.word	0x000818a9
   8186c:	00081935 	.word	0x00081935
   81870:	00081935 	.word	0x00081935
   81874:	00081935 	.word	0x00081935
   81878:	00081935 	.word	0x00081935
   8187c:	00081935 	.word	0x00081935
   81880:	000818e9 	.word	0x000818e9
   81884:	00081935 	.word	0x00081935
   81888:	00081935 	.word	0x00081935
   8188c:	00081935 	.word	0x00081935
   81890:	00081935 	.word	0x00081935
   81894:	00081935 	.word	0x00081935
   81898:	000818c9 	.word	0x000818c9
   8189c:	00081935 	.word	0x00081935
   818a0:	00081935 	.word	0x00081935
   818a4:	00081927 	.word	0x00081927
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.main.act_cursor_line > menu_info.main.min_cursor_line)
   818a8:	4b2a      	ldr	r3, [pc, #168]	; (81954 <menu_main+0x11c>)
   818aa:	781a      	ldrb	r2, [r3, #0]
   818ac:	4b29      	ldr	r3, [pc, #164]	; (81954 <menu_main+0x11c>)
   818ae:	789b      	ldrb	r3, [r3, #2]
   818b0:	429a      	cmp	r2, r3
   818b2:	d941      	bls.n	81938 <menu_main+0x100>
            {
                menu_info.main.act_cursor_line--;
   818b4:	4b27      	ldr	r3, [pc, #156]	; (81954 <menu_main+0x11c>)
   818b6:	781b      	ldrb	r3, [r3, #0]
   818b8:	3b01      	subs	r3, #1
   818ba:	b2da      	uxtb	r2, r3
   818bc:	4b25      	ldr	r3, [pc, #148]	; (81954 <menu_main+0x11c>)
   818be:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   818c0:	4824      	ldr	r0, [pc, #144]	; (81954 <menu_main+0x11c>)
   818c2:	4b25      	ldr	r3, [pc, #148]	; (81958 <menu_main+0x120>)
   818c4:	4798      	blx	r3
            }
            break;
   818c6:	e037      	b.n	81938 <menu_main+0x100>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.main.act_cursor_line < menu_info.main.max_cursor_line)
   818c8:	4b22      	ldr	r3, [pc, #136]	; (81954 <menu_main+0x11c>)
   818ca:	781a      	ldrb	r2, [r3, #0]
   818cc:	4b21      	ldr	r3, [pc, #132]	; (81954 <menu_main+0x11c>)
   818ce:	78db      	ldrb	r3, [r3, #3]
   818d0:	429a      	cmp	r2, r3
   818d2:	d233      	bcs.n	8193c <menu_main+0x104>
            {
                menu_info.main.act_cursor_line++;
   818d4:	4b1f      	ldr	r3, [pc, #124]	; (81954 <menu_main+0x11c>)
   818d6:	781b      	ldrb	r3, [r3, #0]
   818d8:	3301      	adds	r3, #1
   818da:	b2da      	uxtb	r2, r3
   818dc:	4b1d      	ldr	r3, [pc, #116]	; (81954 <menu_main+0x11c>)
   818de:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   818e0:	481c      	ldr	r0, [pc, #112]	; (81954 <menu_main+0x11c>)
   818e2:	4b1d      	ldr	r3, [pc, #116]	; (81958 <menu_main+0x120>)
   818e4:	4798      	blx	r3
            }
            break;
   818e6:	e029      	b.n	8193c <menu_main+0x104>
        case EVENT_BUTTON_MID_P:
            {
                switch (menu_info.main.act_cursor_line)
   818e8:	4b1a      	ldr	r3, [pc, #104]	; (81954 <menu_main+0x11c>)
   818ea:	781b      	ldrb	r3, [r3, #0]
   818ec:	2b03      	cmp	r3, #3
   818ee:	d00b      	beq.n	81908 <menu_main+0xd0>
   818f0:	2b04      	cmp	r3, #4
   818f2:	d010      	beq.n	81916 <menu_main+0xde>
   818f4:	2b02      	cmp	r3, #2
   818f6:	d000      	beq.n	818fa <menu_main+0xc2>
                    case 4:
                        act_menu = MENU_SETTINGS;
                        print_menu = 1;
                        break;
                    default:
                        break;
   818f8:	e014      	b.n	81924 <menu_main+0xec>
                        act_menu = MENU_MATCH;
   818fa:	4b18      	ldr	r3, [pc, #96]	; (8195c <menu_main+0x124>)
   818fc:	2201      	movs	r2, #1
   818fe:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81900:	4b11      	ldr	r3, [pc, #68]	; (81948 <menu_main+0x110>)
   81902:	2201      	movs	r2, #1
   81904:	701a      	strb	r2, [r3, #0]
                        break;
   81906:	e00d      	b.n	81924 <menu_main+0xec>
                        act_menu = MENU_SENSORS;
   81908:	4b14      	ldr	r3, [pc, #80]	; (8195c <menu_main+0x124>)
   8190a:	2202      	movs	r2, #2
   8190c:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   8190e:	4b0e      	ldr	r3, [pc, #56]	; (81948 <menu_main+0x110>)
   81910:	2201      	movs	r2, #1
   81912:	701a      	strb	r2, [r3, #0]
                        break;
   81914:	e006      	b.n	81924 <menu_main+0xec>
                        act_menu = MENU_SETTINGS;
   81916:	4b11      	ldr	r3, [pc, #68]	; (8195c <menu_main+0x124>)
   81918:	2203      	movs	r2, #3
   8191a:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   8191c:	4b0a      	ldr	r3, [pc, #40]	; (81948 <menu_main+0x110>)
   8191e:	2201      	movs	r2, #1
   81920:	701a      	strb	r2, [r3, #0]
                        break;
   81922:	bf00      	nop
                }
            }
            break;
   81924:	e00b      	b.n	8193e <menu_main+0x106>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SHUTDOWN;
   81926:	4b0d      	ldr	r3, [pc, #52]	; (8195c <menu_main+0x124>)
   81928:	2209      	movs	r2, #9
   8192a:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   8192c:	4b06      	ldr	r3, [pc, #24]	; (81948 <menu_main+0x110>)
   8192e:	2201      	movs	r2, #1
   81930:	701a      	strb	r2, [r3, #0]
            break;
   81932:	e004      	b.n	8193e <menu_main+0x106>
        default:
            break;
   81934:	bf00      	nop
   81936:	e002      	b.n	8193e <menu_main+0x106>
            break;
   81938:	bf00      	nop
   8193a:	e000      	b.n	8193e <menu_main+0x106>
            break;
   8193c:	bf00      	nop
    }
}
   8193e:	bf00      	nop
   81940:	3708      	adds	r7, #8
   81942:	46bd      	mov	sp, r7
   81944:	bd80      	pop	{r7, pc}
   81946:	bf00      	nop
   81948:	2007018c 	.word	0x2007018c
   8194c:	00081f71 	.word	0x00081f71
   81950:	0008241d 	.word	0x0008241d
   81954:	20070190 	.word	0x20070190
   81958:	000820b1 	.word	0x000820b1
   8195c:	20070dbc 	.word	0x20070dbc

00081960 <menu_match>:

static void menu_match(event_t event1)
{
   81960:	b480      	push	{r7}
   81962:	b083      	sub	sp, #12
   81964:	af00      	add	r7, sp, #0
   81966:	4603      	mov	r3, r0
   81968:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   8196a:	79fb      	ldrb	r3, [r7, #7]
   8196c:	2b10      	cmp	r3, #16
   8196e:	d105      	bne.n	8197c <menu_match+0x1c>
    {
        act_menu = MENU_MAIN;
   81970:	4b05      	ldr	r3, [pc, #20]	; (81988 <menu_match+0x28>)
   81972:	2200      	movs	r2, #0
   81974:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81976:	4b05      	ldr	r3, [pc, #20]	; (8198c <menu_match+0x2c>)
   81978:	2201      	movs	r2, #1
   8197a:	701a      	strb	r2, [r3, #0]
    }
}
   8197c:	bf00      	nop
   8197e:	370c      	adds	r7, #12
   81980:	46bd      	mov	sp, r7
   81982:	bc80      	pop	{r7}
   81984:	4770      	bx	lr
   81986:	bf00      	nop
   81988:	20070dbc 	.word	0x20070dbc
   8198c:	2007018c 	.word	0x2007018c

00081990 <menu_sensors>:

static void menu_sensors(event_t event1)
{
   81990:	b580      	push	{r7, lr}
   81992:	b082      	sub	sp, #8
   81994:	af00      	add	r7, sp, #0
   81996:	4603      	mov	r3, r0
   81998:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   8199a:	4b40      	ldr	r3, [pc, #256]	; (81a9c <menu_sensors+0x10c>)
   8199c:	781b      	ldrb	r3, [r3, #0]
   8199e:	2b00      	cmp	r3, #0
   819a0:	d004      	beq.n	819ac <menu_sensors+0x1c>
    {
        print_menu = 0;
   819a2:	4b3e      	ldr	r3, [pc, #248]	; (81a9c <menu_sensors+0x10c>)
   819a4:	2200      	movs	r2, #0
   819a6:	701a      	strb	r2, [r3, #0]
        print_menu_sensors();
   819a8:	4b3d      	ldr	r3, [pc, #244]	; (81aa0 <menu_sensors+0x110>)
   819aa:	4798      	blx	r3
    }
    
    switch(event1)
   819ac:	79fb      	ldrb	r3, [r7, #7]
   819ae:	3b01      	subs	r3, #1
   819b0:	2b0f      	cmp	r3, #15
   819b2:	d869      	bhi.n	81a88 <menu_sensors+0xf8>
   819b4:	a201      	add	r2, pc, #4	; (adr r2, 819bc <menu_sensors+0x2c>)
   819b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   819ba:	bf00      	nop
   819bc:	000819fd 	.word	0x000819fd
   819c0:	00081a89 	.word	0x00081a89
   819c4:	00081a89 	.word	0x00081a89
   819c8:	00081a89 	.word	0x00081a89
   819cc:	00081a89 	.word	0x00081a89
   819d0:	00081a89 	.word	0x00081a89
   819d4:	00081a3d 	.word	0x00081a3d
   819d8:	00081a89 	.word	0x00081a89
   819dc:	00081a89 	.word	0x00081a89
   819e0:	00081a89 	.word	0x00081a89
   819e4:	00081a89 	.word	0x00081a89
   819e8:	00081a89 	.word	0x00081a89
   819ec:	00081a1d 	.word	0x00081a1d
   819f0:	00081a89 	.word	0x00081a89
   819f4:	00081a89 	.word	0x00081a89
   819f8:	00081a7b 	.word	0x00081a7b
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.sensors.act_cursor_line > menu_info.sensors.min_cursor_line)
   819fc:	4b29      	ldr	r3, [pc, #164]	; (81aa4 <menu_sensors+0x114>)
   819fe:	791a      	ldrb	r2, [r3, #4]
   81a00:	4b28      	ldr	r3, [pc, #160]	; (81aa4 <menu_sensors+0x114>)
   81a02:	799b      	ldrb	r3, [r3, #6]
   81a04:	429a      	cmp	r2, r3
   81a06:	d941      	bls.n	81a8c <menu_sensors+0xfc>
            {
                menu_info.sensors.act_cursor_line--;
   81a08:	4b26      	ldr	r3, [pc, #152]	; (81aa4 <menu_sensors+0x114>)
   81a0a:	791b      	ldrb	r3, [r3, #4]
   81a0c:	3b01      	subs	r3, #1
   81a0e:	b2da      	uxtb	r2, r3
   81a10:	4b24      	ldr	r3, [pc, #144]	; (81aa4 <menu_sensors+0x114>)
   81a12:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   81a14:	4824      	ldr	r0, [pc, #144]	; (81aa8 <menu_sensors+0x118>)
   81a16:	4b25      	ldr	r3, [pc, #148]	; (81aac <menu_sensors+0x11c>)
   81a18:	4798      	blx	r3
            }
            break;
   81a1a:	e037      	b.n	81a8c <menu_sensors+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.sensors.act_cursor_line < menu_info.sensors.max_cursor_line)
   81a1c:	4b21      	ldr	r3, [pc, #132]	; (81aa4 <menu_sensors+0x114>)
   81a1e:	791a      	ldrb	r2, [r3, #4]
   81a20:	4b20      	ldr	r3, [pc, #128]	; (81aa4 <menu_sensors+0x114>)
   81a22:	79db      	ldrb	r3, [r3, #7]
   81a24:	429a      	cmp	r2, r3
   81a26:	d233      	bcs.n	81a90 <menu_sensors+0x100>
            {
                menu_info.sensors.act_cursor_line++;
   81a28:	4b1e      	ldr	r3, [pc, #120]	; (81aa4 <menu_sensors+0x114>)
   81a2a:	791b      	ldrb	r3, [r3, #4]
   81a2c:	3301      	adds	r3, #1
   81a2e:	b2da      	uxtb	r2, r3
   81a30:	4b1c      	ldr	r3, [pc, #112]	; (81aa4 <menu_sensors+0x114>)
   81a32:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   81a34:	481c      	ldr	r0, [pc, #112]	; (81aa8 <menu_sensors+0x118>)
   81a36:	4b1d      	ldr	r3, [pc, #116]	; (81aac <menu_sensors+0x11c>)
   81a38:	4798      	blx	r3
            }
            break;
   81a3a:	e029      	b.n	81a90 <menu_sensors+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.sensors.act_cursor_line)
   81a3c:	4b19      	ldr	r3, [pc, #100]	; (81aa4 <menu_sensors+0x114>)
   81a3e:	791b      	ldrb	r3, [r3, #4]
   81a40:	2b02      	cmp	r3, #2
   81a42:	d00b      	beq.n	81a5c <menu_sensors+0xcc>
   81a44:	2b03      	cmp	r3, #3
   81a46:	d010      	beq.n	81a6a <menu_sensors+0xda>
   81a48:	2b01      	cmp	r3, #1
   81a4a:	d000      	beq.n	81a4e <menu_sensors+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   81a4c:	e014      	b.n	81a78 <menu_sensors+0xe8>
                    act_menu = MENU_BALL;
   81a4e:	4b18      	ldr	r3, [pc, #96]	; (81ab0 <menu_sensors+0x120>)
   81a50:	2204      	movs	r2, #4
   81a52:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81a54:	4b11      	ldr	r3, [pc, #68]	; (81a9c <menu_sensors+0x10c>)
   81a56:	2201      	movs	r2, #1
   81a58:	701a      	strb	r2, [r3, #0]
                    break;
   81a5a:	e00d      	b.n	81a78 <menu_sensors+0xe8>
                    act_menu = MENU_COMPASS;
   81a5c:	4b14      	ldr	r3, [pc, #80]	; (81ab0 <menu_sensors+0x120>)
   81a5e:	2207      	movs	r2, #7
   81a60:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81a62:	4b0e      	ldr	r3, [pc, #56]	; (81a9c <menu_sensors+0x10c>)
   81a64:	2201      	movs	r2, #1
   81a66:	701a      	strb	r2, [r3, #0]
                    break;
   81a68:	e006      	b.n	81a78 <menu_sensors+0xe8>
                    act_menu = MENU_LINE;
   81a6a:	4b11      	ldr	r3, [pc, #68]	; (81ab0 <menu_sensors+0x120>)
   81a6c:	2205      	movs	r2, #5
   81a6e:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81a70:	4b0a      	ldr	r3, [pc, #40]	; (81a9c <menu_sensors+0x10c>)
   81a72:	2201      	movs	r2, #1
   81a74:	701a      	strb	r2, [r3, #0]
                    break;
   81a76:	bf00      	nop
            }
            break;
   81a78:	e00b      	b.n	81a92 <menu_sensors+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   81a7a:	4b0d      	ldr	r3, [pc, #52]	; (81ab0 <menu_sensors+0x120>)
   81a7c:	2200      	movs	r2, #0
   81a7e:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81a80:	4b06      	ldr	r3, [pc, #24]	; (81a9c <menu_sensors+0x10c>)
   81a82:	2201      	movs	r2, #1
   81a84:	701a      	strb	r2, [r3, #0]
            break;
   81a86:	e004      	b.n	81a92 <menu_sensors+0x102>
        default:
            break;
   81a88:	bf00      	nop
   81a8a:	e002      	b.n	81a92 <menu_sensors+0x102>
            break;
   81a8c:	bf00      	nop
   81a8e:	e000      	b.n	81a92 <menu_sensors+0x102>
            break;
   81a90:	bf00      	nop
    }
}
   81a92:	bf00      	nop
   81a94:	3708      	adds	r7, #8
   81a96:	46bd      	mov	sp, r7
   81a98:	bd80      	pop	{r7, pc}
   81a9a:	bf00      	nop
   81a9c:	2007018c 	.word	0x2007018c
   81aa0:	00081fe1 	.word	0x00081fe1
   81aa4:	20070190 	.word	0x20070190
   81aa8:	20070194 	.word	0x20070194
   81aac:	000820b1 	.word	0x000820b1
   81ab0:	20070dbc 	.word	0x20070dbc

00081ab4 <menu_ball>:

static void menu_ball(event_t event1)
{
   81ab4:	b580      	push	{r7, lr}
   81ab6:	b082      	sub	sp, #8
   81ab8:	af00      	add	r7, sp, #0
   81aba:	4603      	mov	r3, r0
   81abc:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   81abe:	4b0d      	ldr	r3, [pc, #52]	; (81af4 <menu_ball+0x40>)
   81ac0:	781b      	ldrb	r3, [r3, #0]
   81ac2:	2b00      	cmp	r3, #0
   81ac4:	d004      	beq.n	81ad0 <menu_ball+0x1c>
    {
        print_menu = 0;
   81ac6:	4b0b      	ldr	r3, [pc, #44]	; (81af4 <menu_ball+0x40>)
   81ac8:	2200      	movs	r2, #0
   81aca:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81acc:	4b0a      	ldr	r3, [pc, #40]	; (81af8 <menu_ball+0x44>)
   81ace:	4798      	blx	r3
    {
        lcd_print_s(2, 0, "Direction: no ball");
    }
    
    sprintf(sprintf_buf, "Having ball: %1d", rpi_rx.ibit.have_ball);*/
    lcd_print_s(3, 0, sprintf_buf);
   81ad0:	4a0a      	ldr	r2, [pc, #40]	; (81afc <menu_ball+0x48>)
   81ad2:	2100      	movs	r1, #0
   81ad4:	2003      	movs	r0, #3
   81ad6:	4b0a      	ldr	r3, [pc, #40]	; (81b00 <menu_ball+0x4c>)
   81ad8:	4798      	blx	r3
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81ada:	79fb      	ldrb	r3, [r7, #7]
   81adc:	2b10      	cmp	r3, #16
   81ade:	d105      	bne.n	81aec <menu_ball+0x38>
    {
        act_menu = MENU_SENSORS;
   81ae0:	4b08      	ldr	r3, [pc, #32]	; (81b04 <menu_ball+0x50>)
   81ae2:	2202      	movs	r2, #2
   81ae4:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81ae6:	4b03      	ldr	r3, [pc, #12]	; (81af4 <menu_ball+0x40>)
   81ae8:	2201      	movs	r2, #1
   81aea:	701a      	strb	r2, [r3, #0]
    }
}
   81aec:	bf00      	nop
   81aee:	3708      	adds	r7, #8
   81af0:	46bd      	mov	sp, r7
   81af2:	bd80      	pop	{r7, pc}
   81af4:	2007018c 	.word	0x2007018c
   81af8:	000811ed 	.word	0x000811ed
   81afc:	20070e4c 	.word	0x20070e4c
   81b00:	0008120d 	.word	0x0008120d
   81b04:	20070dbc 	.word	0x20070dbc

00081b08 <menu_compass>:

static void menu_compass(event_t event1)
{
   81b08:	b590      	push	{r4, r7, lr}
   81b0a:	b083      	sub	sp, #12
   81b0c:	af00      	add	r7, sp, #0
   81b0e:	4603      	mov	r3, r0
   81b10:	71fb      	strb	r3, [r7, #7]
    static uint16_t prev_direction = 0;
    
    if(print_menu)
   81b12:	4b24      	ldr	r3, [pc, #144]	; (81ba4 <menu_compass+0x9c>)
   81b14:	781b      	ldrb	r3, [r3, #0]
   81b16:	2b00      	cmp	r3, #0
   81b18:	d004      	beq.n	81b24 <menu_compass+0x1c>
    {
        print_menu = 0;
   81b1a:	4b22      	ldr	r3, [pc, #136]	; (81ba4 <menu_compass+0x9c>)
   81b1c:	2200      	movs	r2, #0
   81b1e:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81b20:	4b21      	ldr	r3, [pc, #132]	; (81ba8 <menu_compass+0xa0>)
   81b22:	4798      	blx	r3
    }
    
    update_compass();
   81b24:	4b21      	ldr	r3, [pc, #132]	; (81bac <menu_compass+0xa4>)
   81b26:	4798      	blx	r3
    if(direction != prev_direction)
   81b28:	4b21      	ldr	r3, [pc, #132]	; (81bb0 <menu_compass+0xa8>)
   81b2a:	881a      	ldrh	r2, [r3, #0]
   81b2c:	4b21      	ldr	r3, [pc, #132]	; (81bb4 <menu_compass+0xac>)
   81b2e:	881b      	ldrh	r3, [r3, #0]
   81b30:	429a      	cmp	r2, r3
   81b32:	d01e      	beq.n	81b72 <menu_compass+0x6a>
    {
        prev_direction = direction;
   81b34:	4b1e      	ldr	r3, [pc, #120]	; (81bb0 <menu_compass+0xa8>)
   81b36:	881a      	ldrh	r2, [r3, #0]
   81b38:	4b1e      	ldr	r3, [pc, #120]	; (81bb4 <menu_compass+0xac>)
   81b3a:	801a      	strh	r2, [r3, #0]
        sprintf(sprintf_buf, "  Direction: %3.1f  ", (float)direction / 10.0);
   81b3c:	4b1c      	ldr	r3, [pc, #112]	; (81bb0 <menu_compass+0xa8>)
   81b3e:	881a      	ldrh	r2, [r3, #0]
   81b40:	4b1d      	ldr	r3, [pc, #116]	; (81bb8 <menu_compass+0xb0>)
   81b42:	4610      	mov	r0, r2
   81b44:	4798      	blx	r3
   81b46:	4602      	mov	r2, r0
   81b48:	4b1c      	ldr	r3, [pc, #112]	; (81bbc <menu_compass+0xb4>)
   81b4a:	4610      	mov	r0, r2
   81b4c:	4798      	blx	r3
   81b4e:	4c1c      	ldr	r4, [pc, #112]	; (81bc0 <menu_compass+0xb8>)
   81b50:	f04f 0200 	mov.w	r2, #0
   81b54:	4b1b      	ldr	r3, [pc, #108]	; (81bc4 <menu_compass+0xbc>)
   81b56:	47a0      	blx	r4
   81b58:	4603      	mov	r3, r0
   81b5a:	460c      	mov	r4, r1
   81b5c:	461a      	mov	r2, r3
   81b5e:	4623      	mov	r3, r4
   81b60:	4919      	ldr	r1, [pc, #100]	; (81bc8 <menu_compass+0xc0>)
   81b62:	481a      	ldr	r0, [pc, #104]	; (81bcc <menu_compass+0xc4>)
   81b64:	4c1a      	ldr	r4, [pc, #104]	; (81bd0 <menu_compass+0xc8>)
   81b66:	47a0      	blx	r4
        lcd_print_s(2, 0, sprintf_buf);
   81b68:	4a18      	ldr	r2, [pc, #96]	; (81bcc <menu_compass+0xc4>)
   81b6a:	2100      	movs	r1, #0
   81b6c:	2002      	movs	r0, #2
   81b6e:	4b19      	ldr	r3, [pc, #100]	; (81bd4 <menu_compass+0xcc>)
   81b70:	4798      	blx	r3
    }
    
    switch(event1)
   81b72:	79fb      	ldrb	r3, [r7, #7]
   81b74:	2b07      	cmp	r3, #7
   81b76:	d002      	beq.n	81b7e <menu_compass+0x76>
   81b78:	2b10      	cmp	r3, #16
   81b7a:	d007      	beq.n	81b8c <menu_compass+0x84>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SENSORS;
            print_menu = 1;
            break;
        default:
            break;
   81b7c:	e00d      	b.n	81b9a <menu_compass+0x92>
            act_menu = MENU_COMPASS_CALIBRATION;
   81b7e:	4b16      	ldr	r3, [pc, #88]	; (81bd8 <menu_compass+0xd0>)
   81b80:	2208      	movs	r2, #8
   81b82:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81b84:	4b07      	ldr	r3, [pc, #28]	; (81ba4 <menu_compass+0x9c>)
   81b86:	2201      	movs	r2, #1
   81b88:	701a      	strb	r2, [r3, #0]
            break;
   81b8a:	e006      	b.n	81b9a <menu_compass+0x92>
            act_menu = MENU_SENSORS;
   81b8c:	4b12      	ldr	r3, [pc, #72]	; (81bd8 <menu_compass+0xd0>)
   81b8e:	2202      	movs	r2, #2
   81b90:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81b92:	4b04      	ldr	r3, [pc, #16]	; (81ba4 <menu_compass+0x9c>)
   81b94:	2201      	movs	r2, #1
   81b96:	701a      	strb	r2, [r3, #0]
            break;
   81b98:	bf00      	nop
    }
}
   81b9a:	bf00      	nop
   81b9c:	370c      	adds	r7, #12
   81b9e:	46bd      	mov	sp, r7
   81ba0:	bd90      	pop	{r4, r7, pc}
   81ba2:	bf00      	nop
   81ba4:	2007018c 	.word	0x2007018c
   81ba8:	000811ed 	.word	0x000811ed
   81bac:	00080f29 	.word	0x00080f29
   81bb0:	20070e1c 	.word	0x20070e1c
   81bb4:	20070dc0 	.word	0x20070dc0
   81bb8:	00084325 	.word	0x00084325
   81bbc:	00083ced 	.word	0x00083ced
   81bc0:	00083fe9 	.word	0x00083fe9
   81bc4:	40240000 	.word	0x40240000
   81bc8:	000884ec 	.word	0x000884ec
   81bcc:	20070e4c 	.word	0x20070e4c
   81bd0:	000844c1 	.word	0x000844c1
   81bd4:	0008120d 	.word	0x0008120d
   81bd8:	20070dbc 	.word	0x20070dbc

00081bdc <menu_compass_calibration>:

static void menu_compass_calibration(event_t event1)
{
   81bdc:	b580      	push	{r7, lr}
   81bde:	b084      	sub	sp, #16
   81be0:	af00      	add	r7, sp, #0
   81be2:	4603      	mov	r3, r0
   81be4:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   81be6:	4b2e      	ldr	r3, [pc, #184]	; (81ca0 <menu_compass_calibration+0xc4>)
   81be8:	781b      	ldrb	r3, [r3, #0]
   81bea:	2b00      	cmp	r3, #0
   81bec:	d016      	beq.n	81c1c <menu_compass_calibration+0x40>
    {
        print_menu = 0;
   81bee:	4b2c      	ldr	r3, [pc, #176]	; (81ca0 <menu_compass_calibration+0xc4>)
   81bf0:	2200      	movs	r2, #0
   81bf2:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81bf4:	4b2b      	ldr	r3, [pc, #172]	; (81ca4 <menu_compass_calibration+0xc8>)
   81bf6:	4798      	blx	r3
        lcd_print_s(2, 1, "calibrate compass");
   81bf8:	4a2b      	ldr	r2, [pc, #172]	; (81ca8 <menu_compass_calibration+0xcc>)
   81bfa:	2101      	movs	r1, #1
   81bfc:	2002      	movs	r0, #2
   81bfe:	4b2b      	ldr	r3, [pc, #172]	; (81cac <menu_compass_calibration+0xd0>)
   81c00:	4798      	blx	r3
        sprintf(sprintf_buf, "  Direction: %1d  ", compass_cal_step + 1);
   81c02:	4b2b      	ldr	r3, [pc, #172]	; (81cb0 <menu_compass_calibration+0xd4>)
   81c04:	781b      	ldrb	r3, [r3, #0]
   81c06:	3301      	adds	r3, #1
   81c08:	461a      	mov	r2, r3
   81c0a:	492a      	ldr	r1, [pc, #168]	; (81cb4 <menu_compass_calibration+0xd8>)
   81c0c:	482a      	ldr	r0, [pc, #168]	; (81cb8 <menu_compass_calibration+0xdc>)
   81c0e:	4b2b      	ldr	r3, [pc, #172]	; (81cbc <menu_compass_calibration+0xe0>)
   81c10:	4798      	blx	r3
        lcd_print_s(3, 1, sprintf_buf);
   81c12:	4a29      	ldr	r2, [pc, #164]	; (81cb8 <menu_compass_calibration+0xdc>)
   81c14:	2101      	movs	r1, #1
   81c16:	2003      	movs	r0, #3
   81c18:	4b24      	ldr	r3, [pc, #144]	; (81cac <menu_compass_calibration+0xd0>)
   81c1a:	4798      	blx	r3
    }
    
    if(event1 == EVENT_BUTTON_MID_P)
   81c1c:	79fb      	ldrb	r3, [r7, #7]
   81c1e:	2b07      	cmp	r3, #7
   81c20:	d139      	bne.n	81c96 <menu_compass_calibration+0xba>
    {
        twi_packet_t *tx_packet = twi_get_tx_packet();
   81c22:	4b27      	ldr	r3, [pc, #156]	; (81cc0 <menu_compass_calibration+0xe4>)
   81c24:	4798      	blx	r3
   81c26:	60f8      	str	r0, [r7, #12]
        
        tx_packet->chip = 0x60;
   81c28:	68fb      	ldr	r3, [r7, #12]
   81c2a:	2260      	movs	r2, #96	; 0x60
   81c2c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        tx_packet->addr[0] = 0x0f;
   81c30:	68fb      	ldr	r3, [r7, #12]
   81c32:	220f      	movs	r2, #15
   81c34:	701a      	strb	r2, [r3, #0]
        tx_packet->addr_length = 1;
   81c36:	68fb      	ldr	r3, [r7, #12]
   81c38:	2201      	movs	r2, #1
   81c3a:	605a      	str	r2, [r3, #4]
        
        tx_packet->buffer[0] = 0xff;
   81c3c:	68fb      	ldr	r3, [r7, #12]
   81c3e:	22ff      	movs	r2, #255	; 0xff
   81c40:	721a      	strb	r2, [r3, #8]
        tx_packet->length = 1;
   81c42:	68fb      	ldr	r3, [r7, #12]
   81c44:	2201      	movs	r2, #1
   81c46:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        
        set_compass_is_busy();
   81c4a:	4b1e      	ldr	r3, [pc, #120]	; (81cc4 <menu_compass_calibration+0xe8>)
   81c4c:	4798      	blx	r3
        twi_pdc_master_write(TWI0, tx_packet);
   81c4e:	68f9      	ldr	r1, [r7, #12]
   81c50:	481d      	ldr	r0, [pc, #116]	; (81cc8 <menu_compass_calibration+0xec>)
   81c52:	4b1e      	ldr	r3, [pc, #120]	; (81ccc <menu_compass_calibration+0xf0>)
   81c54:	4798      	blx	r3
        while(compass_is_busy());
   81c56:	bf00      	nop
   81c58:	4b1d      	ldr	r3, [pc, #116]	; (81cd0 <menu_compass_calibration+0xf4>)
   81c5a:	4798      	blx	r3
   81c5c:	4603      	mov	r3, r0
   81c5e:	2b00      	cmp	r3, #0
   81c60:	d1fa      	bne.n	81c58 <menu_compass_calibration+0x7c>
        mdelay(500);
   81c62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   81c66:	4b1b      	ldr	r3, [pc, #108]	; (81cd4 <menu_compass_calibration+0xf8>)
   81c68:	4798      	blx	r3
        
        compass_cal_step++;
   81c6a:	4b11      	ldr	r3, [pc, #68]	; (81cb0 <menu_compass_calibration+0xd4>)
   81c6c:	781b      	ldrb	r3, [r3, #0]
   81c6e:	3301      	adds	r3, #1
   81c70:	b2da      	uxtb	r2, r3
   81c72:	4b0f      	ldr	r3, [pc, #60]	; (81cb0 <menu_compass_calibration+0xd4>)
   81c74:	701a      	strb	r2, [r3, #0]
        
        if(compass_cal_step == 4)
   81c76:	4b0e      	ldr	r3, [pc, #56]	; (81cb0 <menu_compass_calibration+0xd4>)
   81c78:	781b      	ldrb	r3, [r3, #0]
   81c7a:	2b04      	cmp	r3, #4
   81c7c:	d108      	bne.n	81c90 <menu_compass_calibration+0xb4>
        {
            compass_cal_step = 0;
   81c7e:	4b0c      	ldr	r3, [pc, #48]	; (81cb0 <menu_compass_calibration+0xd4>)
   81c80:	2200      	movs	r2, #0
   81c82:	701a      	strb	r2, [r3, #0]
            act_menu = MENU_COMPASS;
   81c84:	4b14      	ldr	r3, [pc, #80]	; (81cd8 <menu_compass_calibration+0xfc>)
   81c86:	2207      	movs	r2, #7
   81c88:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81c8a:	4b05      	ldr	r3, [pc, #20]	; (81ca0 <menu_compass_calibration+0xc4>)
   81c8c:	2201      	movs	r2, #1
   81c8e:	701a      	strb	r2, [r3, #0]
        }
        print_menu = 1;
   81c90:	4b03      	ldr	r3, [pc, #12]	; (81ca0 <menu_compass_calibration+0xc4>)
   81c92:	2201      	movs	r2, #1
   81c94:	701a      	strb	r2, [r3, #0]
    }
}
   81c96:	bf00      	nop
   81c98:	3710      	adds	r7, #16
   81c9a:	46bd      	mov	sp, r7
   81c9c:	bd80      	pop	{r7, pc}
   81c9e:	bf00      	nop
   81ca0:	2007018c 	.word	0x2007018c
   81ca4:	000811ed 	.word	0x000811ed
   81ca8:	00088504 	.word	0x00088504
   81cac:	0008120d 	.word	0x0008120d
   81cb0:	20070dbd 	.word	0x20070dbd
   81cb4:	00088518 	.word	0x00088518
   81cb8:	20070e4c 	.word	0x20070e4c
   81cbc:	000844c1 	.word	0x000844c1
   81cc0:	00080a7d 	.word	0x00080a7d
   81cc4:	00080fb9 	.word	0x00080fb9
   81cc8:	4008c000 	.word	0x4008c000
   81ccc:	00080b7d 	.word	0x00080b7d
   81cd0:	00080fd1 	.word	0x00080fd1
   81cd4:	000823a9 	.word	0x000823a9
   81cd8:	20070dbc 	.word	0x20070dbc

00081cdc <menu_line>:

static void menu_line(event_t event1)
{
   81cdc:	b480      	push	{r7}
   81cde:	b083      	sub	sp, #12
   81ce0:	af00      	add	r7, sp, #0
   81ce2:	4603      	mov	r3, r0
   81ce4:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81ce6:	79fb      	ldrb	r3, [r7, #7]
   81ce8:	2b10      	cmp	r3, #16
   81cea:	d105      	bne.n	81cf8 <menu_line+0x1c>
    {
        act_menu = MENU_SENSORS;
   81cec:	4b05      	ldr	r3, [pc, #20]	; (81d04 <menu_line+0x28>)
   81cee:	2202      	movs	r2, #2
   81cf0:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81cf2:	4b05      	ldr	r3, [pc, #20]	; (81d08 <menu_line+0x2c>)
   81cf4:	2201      	movs	r2, #1
   81cf6:	701a      	strb	r2, [r3, #0]
    }
}
   81cf8:	bf00      	nop
   81cfa:	370c      	adds	r7, #12
   81cfc:	46bd      	mov	sp, r7
   81cfe:	bc80      	pop	{r7}
   81d00:	4770      	bx	lr
   81d02:	bf00      	nop
   81d04:	20070dbc 	.word	0x20070dbc
   81d08:	2007018c 	.word	0x2007018c

00081d0c <menu_line_calibration>:

static void menu_line_calibration(event_t event1)
{
   81d0c:	b480      	push	{r7}
   81d0e:	b083      	sub	sp, #12
   81d10:	af00      	add	r7, sp, #0
   81d12:	4603      	mov	r3, r0
   81d14:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81d16:	79fb      	ldrb	r3, [r7, #7]
   81d18:	2b10      	cmp	r3, #16
   81d1a:	d105      	bne.n	81d28 <menu_line_calibration+0x1c>
    {
        act_menu = MENU_LINE;
   81d1c:	4b05      	ldr	r3, [pc, #20]	; (81d34 <menu_line_calibration+0x28>)
   81d1e:	2205      	movs	r2, #5
   81d20:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81d22:	4b05      	ldr	r3, [pc, #20]	; (81d38 <menu_line_calibration+0x2c>)
   81d24:	2201      	movs	r2, #1
   81d26:	701a      	strb	r2, [r3, #0]
    }
}
   81d28:	bf00      	nop
   81d2a:	370c      	adds	r7, #12
   81d2c:	46bd      	mov	sp, r7
   81d2e:	bc80      	pop	{r7}
   81d30:	4770      	bx	lr
   81d32:	bf00      	nop
   81d34:	20070dbc 	.word	0x20070dbc
   81d38:	2007018c 	.word	0x2007018c

00081d3c <menu_settings>:

static void menu_settings(event_t event1)
{
   81d3c:	b580      	push	{r7, lr}
   81d3e:	b082      	sub	sp, #8
   81d40:	af00      	add	r7, sp, #0
   81d42:	4603      	mov	r3, r0
   81d44:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   81d46:	4b40      	ldr	r3, [pc, #256]	; (81e48 <menu_settings+0x10c>)
   81d48:	781b      	ldrb	r3, [r3, #0]
   81d4a:	2b00      	cmp	r3, #0
   81d4c:	d004      	beq.n	81d58 <menu_settings+0x1c>
    {
        print_menu = 0;
   81d4e:	4b3e      	ldr	r3, [pc, #248]	; (81e48 <menu_settings+0x10c>)
   81d50:	2200      	movs	r2, #0
   81d52:	701a      	strb	r2, [r3, #0]
        print_menu_settings();
   81d54:	4b3d      	ldr	r3, [pc, #244]	; (81e4c <menu_settings+0x110>)
   81d56:	4798      	blx	r3
    }
    
    switch(event1)
   81d58:	79fb      	ldrb	r3, [r7, #7]
   81d5a:	3b01      	subs	r3, #1
   81d5c:	2b0f      	cmp	r3, #15
   81d5e:	d869      	bhi.n	81e34 <menu_settings+0xf8>
   81d60:	a201      	add	r2, pc, #4	; (adr r2, 81d68 <menu_settings+0x2c>)
   81d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81d66:	bf00      	nop
   81d68:	00081da9 	.word	0x00081da9
   81d6c:	00081e35 	.word	0x00081e35
   81d70:	00081e35 	.word	0x00081e35
   81d74:	00081e35 	.word	0x00081e35
   81d78:	00081e35 	.word	0x00081e35
   81d7c:	00081e35 	.word	0x00081e35
   81d80:	00081de9 	.word	0x00081de9
   81d84:	00081e35 	.word	0x00081e35
   81d88:	00081e35 	.word	0x00081e35
   81d8c:	00081e35 	.word	0x00081e35
   81d90:	00081e35 	.word	0x00081e35
   81d94:	00081e35 	.word	0x00081e35
   81d98:	00081dc9 	.word	0x00081dc9
   81d9c:	00081e35 	.word	0x00081e35
   81da0:	00081e35 	.word	0x00081e35
   81da4:	00081e27 	.word	0x00081e27
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.settings.act_cursor_line > menu_info.settings.min_cursor_line)
   81da8:	4b29      	ldr	r3, [pc, #164]	; (81e50 <menu_settings+0x114>)
   81daa:	7a1a      	ldrb	r2, [r3, #8]
   81dac:	4b28      	ldr	r3, [pc, #160]	; (81e50 <menu_settings+0x114>)
   81dae:	7a9b      	ldrb	r3, [r3, #10]
   81db0:	429a      	cmp	r2, r3
   81db2:	d941      	bls.n	81e38 <menu_settings+0xfc>
            {
                menu_info.settings.act_cursor_line--;
   81db4:	4b26      	ldr	r3, [pc, #152]	; (81e50 <menu_settings+0x114>)
   81db6:	7a1b      	ldrb	r3, [r3, #8]
   81db8:	3b01      	subs	r3, #1
   81dba:	b2da      	uxtb	r2, r3
   81dbc:	4b24      	ldr	r3, [pc, #144]	; (81e50 <menu_settings+0x114>)
   81dbe:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   81dc0:	4824      	ldr	r0, [pc, #144]	; (81e54 <menu_settings+0x118>)
   81dc2:	4b25      	ldr	r3, [pc, #148]	; (81e58 <menu_settings+0x11c>)
   81dc4:	4798      	blx	r3
            }
            break;
   81dc6:	e037      	b.n	81e38 <menu_settings+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.settings.act_cursor_line < menu_info.settings.max_cursor_line)
   81dc8:	4b21      	ldr	r3, [pc, #132]	; (81e50 <menu_settings+0x114>)
   81dca:	7a1a      	ldrb	r2, [r3, #8]
   81dcc:	4b20      	ldr	r3, [pc, #128]	; (81e50 <menu_settings+0x114>)
   81dce:	7adb      	ldrb	r3, [r3, #11]
   81dd0:	429a      	cmp	r2, r3
   81dd2:	d233      	bcs.n	81e3c <menu_settings+0x100>
            {
                menu_info.settings.act_cursor_line++;
   81dd4:	4b1e      	ldr	r3, [pc, #120]	; (81e50 <menu_settings+0x114>)
   81dd6:	7a1b      	ldrb	r3, [r3, #8]
   81dd8:	3301      	adds	r3, #1
   81dda:	b2da      	uxtb	r2, r3
   81ddc:	4b1c      	ldr	r3, [pc, #112]	; (81e50 <menu_settings+0x114>)
   81dde:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   81de0:	481c      	ldr	r0, [pc, #112]	; (81e54 <menu_settings+0x118>)
   81de2:	4b1d      	ldr	r3, [pc, #116]	; (81e58 <menu_settings+0x11c>)
   81de4:	4798      	blx	r3
            }
            break;
   81de6:	e029      	b.n	81e3c <menu_settings+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.settings.act_cursor_line)
   81de8:	4b19      	ldr	r3, [pc, #100]	; (81e50 <menu_settings+0x114>)
   81dea:	7a1b      	ldrb	r3, [r3, #8]
   81dec:	2b02      	cmp	r3, #2
   81dee:	d00b      	beq.n	81e08 <menu_settings+0xcc>
   81df0:	2b03      	cmp	r3, #3
   81df2:	d010      	beq.n	81e16 <menu_settings+0xda>
   81df4:	2b01      	cmp	r3, #1
   81df6:	d000      	beq.n	81dfa <menu_settings+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   81df8:	e014      	b.n	81e24 <menu_settings+0xe8>
                    act_menu = MENU_BALL;
   81dfa:	4b18      	ldr	r3, [pc, #96]	; (81e5c <menu_settings+0x120>)
   81dfc:	2204      	movs	r2, #4
   81dfe:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81e00:	4b11      	ldr	r3, [pc, #68]	; (81e48 <menu_settings+0x10c>)
   81e02:	2201      	movs	r2, #1
   81e04:	701a      	strb	r2, [r3, #0]
                    break;
   81e06:	e00d      	b.n	81e24 <menu_settings+0xe8>
                    act_menu = MENU_COMPASS;
   81e08:	4b14      	ldr	r3, [pc, #80]	; (81e5c <menu_settings+0x120>)
   81e0a:	2207      	movs	r2, #7
   81e0c:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81e0e:	4b0e      	ldr	r3, [pc, #56]	; (81e48 <menu_settings+0x10c>)
   81e10:	2201      	movs	r2, #1
   81e12:	701a      	strb	r2, [r3, #0]
                    break;
   81e14:	e006      	b.n	81e24 <menu_settings+0xe8>
                    act_menu = MENU_LINE;
   81e16:	4b11      	ldr	r3, [pc, #68]	; (81e5c <menu_settings+0x120>)
   81e18:	2205      	movs	r2, #5
   81e1a:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81e1c:	4b0a      	ldr	r3, [pc, #40]	; (81e48 <menu_settings+0x10c>)
   81e1e:	2201      	movs	r2, #1
   81e20:	701a      	strb	r2, [r3, #0]
                    break;
   81e22:	bf00      	nop
            }
            break;
   81e24:	e00b      	b.n	81e3e <menu_settings+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   81e26:	4b0d      	ldr	r3, [pc, #52]	; (81e5c <menu_settings+0x120>)
   81e28:	2200      	movs	r2, #0
   81e2a:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81e2c:	4b06      	ldr	r3, [pc, #24]	; (81e48 <menu_settings+0x10c>)
   81e2e:	2201      	movs	r2, #1
   81e30:	701a      	strb	r2, [r3, #0]
            break;
   81e32:	e004      	b.n	81e3e <menu_settings+0x102>
        default:
            break;
   81e34:	bf00      	nop
   81e36:	e002      	b.n	81e3e <menu_settings+0x102>
            break;
   81e38:	bf00      	nop
   81e3a:	e000      	b.n	81e3e <menu_settings+0x102>
            break;
   81e3c:	bf00      	nop
    }
}
   81e3e:	bf00      	nop
   81e40:	3708      	adds	r7, #8
   81e42:	46bd      	mov	sp, r7
   81e44:	bd80      	pop	{r7, pc}
   81e46:	bf00      	nop
   81e48:	2007018c 	.word	0x2007018c
   81e4c:	00082049 	.word	0x00082049
   81e50:	20070190 	.word	0x20070190
   81e54:	20070198 	.word	0x20070198
   81e58:	000820b1 	.word	0x000820b1
   81e5c:	20070dbc 	.word	0x20070dbc

00081e60 <menu_shutdown>:

static void menu_shutdown(event_t event1)
{
   81e60:	b580      	push	{r7, lr}
   81e62:	b082      	sub	sp, #8
   81e64:	af00      	add	r7, sp, #0
   81e66:	4603      	mov	r3, r0
   81e68:	71fb      	strb	r3, [r7, #7]
    if(shutdown_confirmed)
   81e6a:	4b35      	ldr	r3, [pc, #212]	; (81f40 <menu_shutdown+0xe0>)
   81e6c:	781b      	ldrb	r3, [r3, #0]
   81e6e:	2b00      	cmp	r3, #0
   81e70:	d043      	beq.n	81efa <menu_shutdown+0x9a>
    {
        lcd_clear();
   81e72:	4b34      	ldr	r3, [pc, #208]	; (81f44 <menu_shutdown+0xe4>)
   81e74:	4798      	blx	r3
        lcd_print_s(2, 2, "shutting down...");
   81e76:	4a34      	ldr	r2, [pc, #208]	; (81f48 <menu_shutdown+0xe8>)
   81e78:	2102      	movs	r1, #2
   81e7a:	2002      	movs	r0, #2
   81e7c:	4b33      	ldr	r3, [pc, #204]	; (81f4c <menu_shutdown+0xec>)
   81e7e:	4798      	blx	r3
        
        ioport_set_pin_level(LED_ONBOARD, 0);
   81e80:	2100      	movs	r1, #0
   81e82:	206a      	movs	r0, #106	; 0x6a
   81e84:	4b32      	ldr	r3, [pc, #200]	; (81f50 <menu_shutdown+0xf0>)
   81e86:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   81e88:	2100      	movs	r1, #0
   81e8a:	2066      	movs	r0, #102	; 0x66
   81e8c:	4b30      	ldr	r3, [pc, #192]	; (81f50 <menu_shutdown+0xf0>)
   81e8e:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   81e90:	2100      	movs	r1, #0
   81e92:	2067      	movs	r0, #103	; 0x67
   81e94:	4b2e      	ldr	r3, [pc, #184]	; (81f50 <menu_shutdown+0xf0>)
   81e96:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   81e98:	2100      	movs	r1, #0
   81e9a:	2068      	movs	r0, #104	; 0x68
   81e9c:	4b2c      	ldr	r3, [pc, #176]	; (81f50 <menu_shutdown+0xf0>)
   81e9e:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   81ea0:	2100      	movs	r1, #0
   81ea2:	2069      	movs	r0, #105	; 0x69
   81ea4:	4b2a      	ldr	r3, [pc, #168]	; (81f50 <menu_shutdown+0xf0>)
   81ea6:	4798      	blx	r3
        pwm_channel_disable(PWM, MREAR);
        
        pwm_channel_disable(PWM, ENC_CLK);
        
        sensor_parameters.ibit.sleep_mode = 1;*/
        update_comm();
   81ea8:	4b2a      	ldr	r3, [pc, #168]	; (81f54 <menu_shutdown+0xf4>)
   81eaa:	4798      	blx	r3
        
        ioport_set_pin_level(RPI1, 0);
   81eac:	2100      	movs	r1, #0
   81eae:	2001      	movs	r0, #1
   81eb0:	4b27      	ldr	r3, [pc, #156]	; (81f50 <menu_shutdown+0xf0>)
   81eb2:	4798      	blx	r3
        while (ioport_get_pin_level(RPI2) == 1);
   81eb4:	bf00      	nop
   81eb6:	2008      	movs	r0, #8
   81eb8:	4b27      	ldr	r3, [pc, #156]	; (81f58 <menu_shutdown+0xf8>)
   81eba:	4798      	blx	r3
   81ebc:	4603      	mov	r3, r0
   81ebe:	2b00      	cmp	r3, #0
   81ec0:	d1f9      	bne.n	81eb6 <menu_shutdown+0x56>
        mdelay(7500);
   81ec2:	f641 504c 	movw	r0, #7500	; 0x1d4c
   81ec6:	4b25      	ldr	r3, [pc, #148]	; (81f5c <menu_shutdown+0xfc>)
   81ec8:	4798      	blx	r3
        
        lcd_set_backlight(LCD_LIGHT_OFF);
   81eca:	2000      	movs	r0, #0
   81ecc:	4b24      	ldr	r3, [pc, #144]	; (81f60 <menu_shutdown+0x100>)
   81ece:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   81ed0:	4b1c      	ldr	r3, [pc, #112]	; (81f44 <menu_shutdown+0xe4>)
   81ed2:	4798      	blx	r3
        mdelay(100);
   81ed4:	2064      	movs	r0, #100	; 0x64
   81ed6:	4b21      	ldr	r3, [pc, #132]	; (81f5c <menu_shutdown+0xfc>)
   81ed8:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_ON);
   81eda:	2008      	movs	r0, #8
   81edc:	4b20      	ldr	r3, [pc, #128]	; (81f60 <menu_shutdown+0x100>)
   81ede:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   81ee0:	4b18      	ldr	r3, [pc, #96]	; (81f44 <menu_shutdown+0xe4>)
   81ee2:	4798      	blx	r3
        mdelay(100);
   81ee4:	2064      	movs	r0, #100	; 0x64
   81ee6:	4b1d      	ldr	r3, [pc, #116]	; (81f5c <menu_shutdown+0xfc>)
   81ee8:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_OFF);
   81eea:	2000      	movs	r0, #0
   81eec:	4b1c      	ldr	r3, [pc, #112]	; (81f60 <menu_shutdown+0x100>)
   81eee:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   81ef0:	4b14      	ldr	r3, [pc, #80]	; (81f44 <menu_shutdown+0xe4>)
   81ef2:	4798      	blx	r3
        
        while(1)
        {
            update_comm();
   81ef4:	4b17      	ldr	r3, [pc, #92]	; (81f54 <menu_shutdown+0xf4>)
   81ef6:	4798      	blx	r3
   81ef8:	e7fc      	b.n	81ef4 <menu_shutdown+0x94>
            //check_bat();
        }
    }
    else
    {
        if(print_menu)
   81efa:	4b1a      	ldr	r3, [pc, #104]	; (81f64 <menu_shutdown+0x104>)
   81efc:	781b      	ldrb	r3, [r3, #0]
   81efe:	2b00      	cmp	r3, #0
   81f00:	d009      	beq.n	81f16 <menu_shutdown+0xb6>
        {
            print_menu = 0;
   81f02:	4b18      	ldr	r3, [pc, #96]	; (81f64 <menu_shutdown+0x104>)
   81f04:	2200      	movs	r2, #0
   81f06:	701a      	strb	r2, [r3, #0]
            lcd_clear();
   81f08:	4b0e      	ldr	r3, [pc, #56]	; (81f44 <menu_shutdown+0xe4>)
   81f0a:	4798      	blx	r3
            lcd_print_s(2, 1, "confirm shutdown?");
   81f0c:	4a16      	ldr	r2, [pc, #88]	; (81f68 <menu_shutdown+0x108>)
   81f0e:	2101      	movs	r1, #1
   81f10:	2002      	movs	r0, #2
   81f12:	4b0e      	ldr	r3, [pc, #56]	; (81f4c <menu_shutdown+0xec>)
   81f14:	4798      	blx	r3
        }
    }
    
    switch (event1)
   81f16:	79fb      	ldrb	r3, [r7, #7]
   81f18:	2b07      	cmp	r3, #7
   81f1a:	d002      	beq.n	81f22 <menu_shutdown+0xc2>
   81f1c:	2b10      	cmp	r3, #16
   81f1e:	d004      	beq.n	81f2a <menu_shutdown+0xca>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
            print_menu = 1;
            break;
        default:
            break;
   81f20:	e00a      	b.n	81f38 <menu_shutdown+0xd8>
            shutdown_confirmed = 1;
   81f22:	4b07      	ldr	r3, [pc, #28]	; (81f40 <menu_shutdown+0xe0>)
   81f24:	2201      	movs	r2, #1
   81f26:	701a      	strb	r2, [r3, #0]
            break;
   81f28:	e006      	b.n	81f38 <menu_shutdown+0xd8>
            act_menu = MENU_MAIN;
   81f2a:	4b10      	ldr	r3, [pc, #64]	; (81f6c <menu_shutdown+0x10c>)
   81f2c:	2200      	movs	r2, #0
   81f2e:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81f30:	4b0c      	ldr	r3, [pc, #48]	; (81f64 <menu_shutdown+0x104>)
   81f32:	2201      	movs	r2, #1
   81f34:	701a      	strb	r2, [r3, #0]
            break;
   81f36:	bf00      	nop
    }
}
   81f38:	bf00      	nop
   81f3a:	3708      	adds	r7, #8
   81f3c:	46bd      	mov	sp, r7
   81f3e:	bd80      	pop	{r7, pc}
   81f40:	20070dbe 	.word	0x20070dbe
   81f44:	000811ed 	.word	0x000811ed
   81f48:	0008852c 	.word	0x0008852c
   81f4c:	0008120d 	.word	0x0008120d
   81f50:	000816a9 	.word	0x000816a9
   81f54:	000823d5 	.word	0x000823d5
   81f58:	00081713 	.word	0x00081713
   81f5c:	000823a9 	.word	0x000823a9
   81f60:	000811cd 	.word	0x000811cd
   81f64:	2007018c 	.word	0x2007018c
   81f68:	00088540 	.word	0x00088540
   81f6c:	20070dbc 	.word	0x20070dbc

00081f70 <print_menu_main>:

static void print_menu_main(void)
{
   81f70:	b590      	push	{r4, r7, lr}
   81f72:	b085      	sub	sp, #20
   81f74:	af00      	add	r7, sp, #0
    const char *text[4] = {"    noOS ONE", " Match", " Sensors", " Settings"};
   81f76:	4b14      	ldr	r3, [pc, #80]	; (81fc8 <print_menu_main+0x58>)
   81f78:	463c      	mov	r4, r7
   81f7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   81f7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   81f80:	4b12      	ldr	r3, [pc, #72]	; (81fcc <print_menu_main+0x5c>)
   81f82:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   81f84:	683b      	ldr	r3, [r7, #0]
   81f86:	461a      	mov	r2, r3
   81f88:	2100      	movs	r1, #0
   81f8a:	2001      	movs	r0, #1
   81f8c:	4b10      	ldr	r3, [pc, #64]	; (81fd0 <print_menu_main+0x60>)
   81f8e:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   81f90:	687b      	ldr	r3, [r7, #4]
   81f92:	461a      	mov	r2, r3
   81f94:	2100      	movs	r1, #0
   81f96:	2002      	movs	r0, #2
   81f98:	4b0d      	ldr	r3, [pc, #52]	; (81fd0 <print_menu_main+0x60>)
   81f9a:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   81f9c:	68bb      	ldr	r3, [r7, #8]
   81f9e:	461a      	mov	r2, r3
   81fa0:	2100      	movs	r1, #0
   81fa2:	2003      	movs	r0, #3
   81fa4:	4b0a      	ldr	r3, [pc, #40]	; (81fd0 <print_menu_main+0x60>)
   81fa6:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   81fa8:	68fb      	ldr	r3, [r7, #12]
   81faa:	461a      	mov	r2, r3
   81fac:	2100      	movs	r1, #0
   81fae:	2004      	movs	r0, #4
   81fb0:	4b07      	ldr	r3, [pc, #28]	; (81fd0 <print_menu_main+0x60>)
   81fb2:	4798      	blx	r3
    print_cursor(&menu_info.main);
   81fb4:	4807      	ldr	r0, [pc, #28]	; (81fd4 <print_menu_main+0x64>)
   81fb6:	4b08      	ldr	r3, [pc, #32]	; (81fd8 <print_menu_main+0x68>)
   81fb8:	4798      	blx	r3
    update_battery(1);
   81fba:	2001      	movs	r0, #1
   81fbc:	4b07      	ldr	r3, [pc, #28]	; (81fdc <print_menu_main+0x6c>)
   81fbe:	4798      	blx	r3
}
   81fc0:	bf00      	nop
   81fc2:	3714      	adds	r7, #20
   81fc4:	46bd      	mov	sp, r7
   81fc6:	bd90      	pop	{r4, r7, pc}
   81fc8:	00088584 	.word	0x00088584
   81fcc:	000811ed 	.word	0x000811ed
   81fd0:	0008120d 	.word	0x0008120d
   81fd4:	20070190 	.word	0x20070190
   81fd8:	000820b1 	.word	0x000820b1
   81fdc:	0008241d 	.word	0x0008241d

00081fe0 <print_menu_sensors>:

static void print_menu_sensors(void)
{
   81fe0:	b590      	push	{r4, r7, lr}
   81fe2:	b085      	sub	sp, #20
   81fe4:	af00      	add	r7, sp, #0
    const char *text[4] = {" Ball", " Compass", " Line", " "};
   81fe6:	4b13      	ldr	r3, [pc, #76]	; (82034 <print_menu_sensors+0x54>)
   81fe8:	463c      	mov	r4, r7
   81fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   81fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   81ff0:	4b11      	ldr	r3, [pc, #68]	; (82038 <print_menu_sensors+0x58>)
   81ff2:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   81ff4:	683b      	ldr	r3, [r7, #0]
   81ff6:	461a      	mov	r2, r3
   81ff8:	2100      	movs	r1, #0
   81ffa:	2001      	movs	r0, #1
   81ffc:	4b0f      	ldr	r3, [pc, #60]	; (8203c <print_menu_sensors+0x5c>)
   81ffe:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   82000:	687b      	ldr	r3, [r7, #4]
   82002:	461a      	mov	r2, r3
   82004:	2100      	movs	r1, #0
   82006:	2002      	movs	r0, #2
   82008:	4b0c      	ldr	r3, [pc, #48]	; (8203c <print_menu_sensors+0x5c>)
   8200a:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   8200c:	68bb      	ldr	r3, [r7, #8]
   8200e:	461a      	mov	r2, r3
   82010:	2100      	movs	r1, #0
   82012:	2003      	movs	r0, #3
   82014:	4b09      	ldr	r3, [pc, #36]	; (8203c <print_menu_sensors+0x5c>)
   82016:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   82018:	68fb      	ldr	r3, [r7, #12]
   8201a:	461a      	mov	r2, r3
   8201c:	2100      	movs	r1, #0
   8201e:	2004      	movs	r0, #4
   82020:	4b06      	ldr	r3, [pc, #24]	; (8203c <print_menu_sensors+0x5c>)
   82022:	4798      	blx	r3
    print_cursor(&menu_info.sensors);
   82024:	4806      	ldr	r0, [pc, #24]	; (82040 <print_menu_sensors+0x60>)
   82026:	4b07      	ldr	r3, [pc, #28]	; (82044 <print_menu_sensors+0x64>)
   82028:	4798      	blx	r3
}
   8202a:	bf00      	nop
   8202c:	3714      	adds	r7, #20
   8202e:	46bd      	mov	sp, r7
   82030:	bd90      	pop	{r4, r7, pc}
   82032:	bf00      	nop
   82034:	000885b4 	.word	0x000885b4
   82038:	000811ed 	.word	0x000811ed
   8203c:	0008120d 	.word	0x0008120d
   82040:	20070194 	.word	0x20070194
   82044:	000820b1 	.word	0x000820b1

00082048 <print_menu_settings>:

static void print_menu_settings(void)
{
   82048:	b590      	push	{r4, r7, lr}
   8204a:	b085      	sub	sp, #20
   8204c:	af00      	add	r7, sp, #0
    const char *text[4] = {" ", " ", " ", " "};
   8204e:	4b13      	ldr	r3, [pc, #76]	; (8209c <print_menu_settings+0x54>)
   82050:	463c      	mov	r4, r7
   82052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   82054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   82058:	4b11      	ldr	r3, [pc, #68]	; (820a0 <print_menu_settings+0x58>)
   8205a:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   8205c:	683b      	ldr	r3, [r7, #0]
   8205e:	461a      	mov	r2, r3
   82060:	2100      	movs	r1, #0
   82062:	2001      	movs	r0, #1
   82064:	4b0f      	ldr	r3, [pc, #60]	; (820a4 <print_menu_settings+0x5c>)
   82066:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   82068:	687b      	ldr	r3, [r7, #4]
   8206a:	461a      	mov	r2, r3
   8206c:	2100      	movs	r1, #0
   8206e:	2002      	movs	r0, #2
   82070:	4b0c      	ldr	r3, [pc, #48]	; (820a4 <print_menu_settings+0x5c>)
   82072:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82074:	68bb      	ldr	r3, [r7, #8]
   82076:	461a      	mov	r2, r3
   82078:	2100      	movs	r1, #0
   8207a:	2003      	movs	r0, #3
   8207c:	4b09      	ldr	r3, [pc, #36]	; (820a4 <print_menu_settings+0x5c>)
   8207e:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   82080:	68fb      	ldr	r3, [r7, #12]
   82082:	461a      	mov	r2, r3
   82084:	2100      	movs	r1, #0
   82086:	2004      	movs	r0, #4
   82088:	4b06      	ldr	r3, [pc, #24]	; (820a4 <print_menu_settings+0x5c>)
   8208a:	4798      	blx	r3
    print_cursor(&menu_info.settings);
   8208c:	4806      	ldr	r0, [pc, #24]	; (820a8 <print_menu_settings+0x60>)
   8208e:	4b07      	ldr	r3, [pc, #28]	; (820ac <print_menu_settings+0x64>)
   82090:	4798      	blx	r3
}
   82092:	bf00      	nop
   82094:	3714      	adds	r7, #20
   82096:	46bd      	mov	sp, r7
   82098:	bd90      	pop	{r4, r7, pc}
   8209a:	bf00      	nop
   8209c:	000885c4 	.word	0x000885c4
   820a0:	000811ed 	.word	0x000811ed
   820a4:	0008120d 	.word	0x0008120d
   820a8:	20070198 	.word	0x20070198
   820ac:	000820b1 	.word	0x000820b1

000820b0 <print_cursor>:

static void print_cursor(menu_info_t *info)
{
   820b0:	b580      	push	{r7, lr}
   820b2:	b082      	sub	sp, #8
   820b4:	af00      	add	r7, sp, #0
   820b6:	6078      	str	r0, [r7, #4]
    lcd_print_s(info->prev_cursor_line, 0, " ");
   820b8:	687b      	ldr	r3, [r7, #4]
   820ba:	785b      	ldrb	r3, [r3, #1]
   820bc:	4a09      	ldr	r2, [pc, #36]	; (820e4 <print_cursor+0x34>)
   820be:	2100      	movs	r1, #0
   820c0:	4618      	mov	r0, r3
   820c2:	4b09      	ldr	r3, [pc, #36]	; (820e8 <print_cursor+0x38>)
   820c4:	4798      	blx	r3
    lcd_print_s(info->act_cursor_line, 0, ">");
   820c6:	687b      	ldr	r3, [r7, #4]
   820c8:	781b      	ldrb	r3, [r3, #0]
   820ca:	4a08      	ldr	r2, [pc, #32]	; (820ec <print_cursor+0x3c>)
   820cc:	2100      	movs	r1, #0
   820ce:	4618      	mov	r0, r3
   820d0:	4b05      	ldr	r3, [pc, #20]	; (820e8 <print_cursor+0x38>)
   820d2:	4798      	blx	r3
    
    info->prev_cursor_line = info->act_cursor_line;
   820d4:	687b      	ldr	r3, [r7, #4]
   820d6:	781a      	ldrb	r2, [r3, #0]
   820d8:	687b      	ldr	r3, [r7, #4]
   820da:	705a      	strb	r2, [r3, #1]
}
   820dc:	bf00      	nop
   820de:	3708      	adds	r7, #8
   820e0:	46bd      	mov	sp, r7
   820e2:	bd80      	pop	{r7, pc}
   820e4:	000885b0 	.word	0x000885b0
   820e8:	0008120d 	.word	0x0008120d
   820ec:	000885d4 	.word	0x000885d4

000820f0 <button_events>:

event_t button_events(void)
{
   820f0:	b580      	push	{r7, lr}
   820f2:	b082      	sub	sp, #8
   820f4:	af00      	add	r7, sp, #0
    event_t nextEvent = EVENT_NO_EVENT;
   820f6:	2300      	movs	r3, #0
   820f8:	71fb      	strb	r3, [r7, #7]

    if (getTicks() >= (ticks_button_update + 30))
   820fa:	4b75      	ldr	r3, [pc, #468]	; (822d0 <button_events+0x1e0>)
   820fc:	4798      	blx	r3
   820fe:	4602      	mov	r2, r0
   82100:	4b74      	ldr	r3, [pc, #464]	; (822d4 <button_events+0x1e4>)
   82102:	681b      	ldr	r3, [r3, #0]
   82104:	331e      	adds	r3, #30
   82106:	429a      	cmp	r2, r3
   82108:	f0c0 80dd 	bcc.w	822c6 <button_events+0x1d6>
    {
        ticks_button_update = getTicks();
   8210c:	4b70      	ldr	r3, [pc, #448]	; (822d0 <button_events+0x1e0>)
   8210e:	4798      	blx	r3
   82110:	4602      	mov	r2, r0
   82112:	4b70      	ldr	r3, [pc, #448]	; (822d4 <button_events+0x1e4>)
   82114:	601a      	str	r2, [r3, #0]
        
        pb_up_act = ioport_get_pin_level(PB_UP);
   82116:	2060      	movs	r0, #96	; 0x60
   82118:	4b6f      	ldr	r3, [pc, #444]	; (822d8 <button_events+0x1e8>)
   8211a:	4798      	blx	r3
   8211c:	4603      	mov	r3, r0
   8211e:	461a      	mov	r2, r3
   82120:	4b6e      	ldr	r3, [pc, #440]	; (822dc <button_events+0x1ec>)
   82122:	701a      	strb	r2, [r3, #0]
        pb_left_act = ioport_get_pin_level(PB_LEFT);
   82124:	2061      	movs	r0, #97	; 0x61
   82126:	4b6c      	ldr	r3, [pc, #432]	; (822d8 <button_events+0x1e8>)
   82128:	4798      	blx	r3
   8212a:	4603      	mov	r3, r0
   8212c:	461a      	mov	r2, r3
   8212e:	4b6c      	ldr	r3, [pc, #432]	; (822e0 <button_events+0x1f0>)
   82130:	701a      	strb	r2, [r3, #0]
        pb_mid_act = ioport_get_pin_level(PB_MID);
   82132:	2062      	movs	r0, #98	; 0x62
   82134:	4b68      	ldr	r3, [pc, #416]	; (822d8 <button_events+0x1e8>)
   82136:	4798      	blx	r3
   82138:	4603      	mov	r3, r0
   8213a:	461a      	mov	r2, r3
   8213c:	4b69      	ldr	r3, [pc, #420]	; (822e4 <button_events+0x1f4>)
   8213e:	701a      	strb	r2, [r3, #0]
        pb_right_act = ioport_get_pin_level(PB_RIGHT);
   82140:	2063      	movs	r0, #99	; 0x63
   82142:	4b65      	ldr	r3, [pc, #404]	; (822d8 <button_events+0x1e8>)
   82144:	4798      	blx	r3
   82146:	4603      	mov	r3, r0
   82148:	461a      	mov	r2, r3
   8214a:	4b67      	ldr	r3, [pc, #412]	; (822e8 <button_events+0x1f8>)
   8214c:	701a      	strb	r2, [r3, #0]
        pb_down_act = ioport_get_pin_level(PB_DOWN);
   8214e:	2064      	movs	r0, #100	; 0x64
   82150:	4b61      	ldr	r3, [pc, #388]	; (822d8 <button_events+0x1e8>)
   82152:	4798      	blx	r3
   82154:	4603      	mov	r3, r0
   82156:	461a      	mov	r2, r3
   82158:	4b64      	ldr	r3, [pc, #400]	; (822ec <button_events+0x1fc>)
   8215a:	701a      	strb	r2, [r3, #0]
        pb_return_act = ioport_get_pin_level(PB_RETURN);
   8215c:	2065      	movs	r0, #101	; 0x65
   8215e:	4b5e      	ldr	r3, [pc, #376]	; (822d8 <button_events+0x1e8>)
   82160:	4798      	blx	r3
   82162:	4603      	mov	r3, r0
   82164:	461a      	mov	r2, r3
   82166:	4b62      	ldr	r3, [pc, #392]	; (822f0 <button_events+0x200>)
   82168:	701a      	strb	r2, [r3, #0]
        
        if (pb_up_act != pb_up_prev && pb_up_act == 0)
   8216a:	4b5c      	ldr	r3, [pc, #368]	; (822dc <button_events+0x1ec>)
   8216c:	781a      	ldrb	r2, [r3, #0]
   8216e:	4b61      	ldr	r3, [pc, #388]	; (822f4 <button_events+0x204>)
   82170:	781b      	ldrb	r3, [r3, #0]
   82172:	429a      	cmp	r2, r3
   82174:	d006      	beq.n	82184 <button_events+0x94>
   82176:	4b59      	ldr	r3, [pc, #356]	; (822dc <button_events+0x1ec>)
   82178:	781b      	ldrb	r3, [r3, #0]
   8217a:	2b00      	cmp	r3, #0
   8217c:	d102      	bne.n	82184 <button_events+0x94>
        {
            nextEvent = EVENT_BUTTON_UP_P;
   8217e:	2301      	movs	r3, #1
   82180:	71fb      	strb	r3, [r7, #7]
   82182:	e00b      	b.n	8219c <button_events+0xac>
        }
        else if (pb_up_act != pb_up_prev && pb_up_act == 1)
   82184:	4b55      	ldr	r3, [pc, #340]	; (822dc <button_events+0x1ec>)
   82186:	781a      	ldrb	r2, [r3, #0]
   82188:	4b5a      	ldr	r3, [pc, #360]	; (822f4 <button_events+0x204>)
   8218a:	781b      	ldrb	r3, [r3, #0]
   8218c:	429a      	cmp	r2, r3
   8218e:	d005      	beq.n	8219c <button_events+0xac>
   82190:	4b52      	ldr	r3, [pc, #328]	; (822dc <button_events+0x1ec>)
   82192:	781b      	ldrb	r3, [r3, #0]
   82194:	2b01      	cmp	r3, #1
   82196:	d101      	bne.n	8219c <button_events+0xac>
        {
            nextEvent = EVENT_BUTTON_UP_R;
   82198:	2303      	movs	r3, #3
   8219a:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_up_act == pb_up_prev && pb_up_act == 0)
        {
            nextEvent = EVENT_BUTTON_UP_H;
        }*/
        
        if (pb_left_act != pb_left_prev && pb_left_act == 0)
   8219c:	4b50      	ldr	r3, [pc, #320]	; (822e0 <button_events+0x1f0>)
   8219e:	781a      	ldrb	r2, [r3, #0]
   821a0:	4b55      	ldr	r3, [pc, #340]	; (822f8 <button_events+0x208>)
   821a2:	781b      	ldrb	r3, [r3, #0]
   821a4:	429a      	cmp	r2, r3
   821a6:	d006      	beq.n	821b6 <button_events+0xc6>
   821a8:	4b4d      	ldr	r3, [pc, #308]	; (822e0 <button_events+0x1f0>)
   821aa:	781b      	ldrb	r3, [r3, #0]
   821ac:	2b00      	cmp	r3, #0
   821ae:	d102      	bne.n	821b6 <button_events+0xc6>
        {
            nextEvent = EVENT_BUTTON_LEFT_P;
   821b0:	2304      	movs	r3, #4
   821b2:	71fb      	strb	r3, [r7, #7]
   821b4:	e00b      	b.n	821ce <button_events+0xde>
        }
        else if (pb_left_act != pb_left_prev && pb_left_act == 1)
   821b6:	4b4a      	ldr	r3, [pc, #296]	; (822e0 <button_events+0x1f0>)
   821b8:	781a      	ldrb	r2, [r3, #0]
   821ba:	4b4f      	ldr	r3, [pc, #316]	; (822f8 <button_events+0x208>)
   821bc:	781b      	ldrb	r3, [r3, #0]
   821be:	429a      	cmp	r2, r3
   821c0:	d005      	beq.n	821ce <button_events+0xde>
   821c2:	4b47      	ldr	r3, [pc, #284]	; (822e0 <button_events+0x1f0>)
   821c4:	781b      	ldrb	r3, [r3, #0]
   821c6:	2b01      	cmp	r3, #1
   821c8:	d101      	bne.n	821ce <button_events+0xde>
        {
            nextEvent = EVENT_BUTTON_LEFT_R;
   821ca:	2306      	movs	r3, #6
   821cc:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_left_act == pb_left_prev && pb_left_act == 0)
        {
            nextEvent = EVENT_BUTTON_LEFT_H;
        }*/
        
        if (pb_mid_act != pb_mid_prev && pb_mid_act == 0)
   821ce:	4b45      	ldr	r3, [pc, #276]	; (822e4 <button_events+0x1f4>)
   821d0:	781a      	ldrb	r2, [r3, #0]
   821d2:	4b4a      	ldr	r3, [pc, #296]	; (822fc <button_events+0x20c>)
   821d4:	781b      	ldrb	r3, [r3, #0]
   821d6:	429a      	cmp	r2, r3
   821d8:	d006      	beq.n	821e8 <button_events+0xf8>
   821da:	4b42      	ldr	r3, [pc, #264]	; (822e4 <button_events+0x1f4>)
   821dc:	781b      	ldrb	r3, [r3, #0]
   821de:	2b00      	cmp	r3, #0
   821e0:	d102      	bne.n	821e8 <button_events+0xf8>
        {
            nextEvent = EVENT_BUTTON_MID_P;
   821e2:	2307      	movs	r3, #7
   821e4:	71fb      	strb	r3, [r7, #7]
   821e6:	e00b      	b.n	82200 <button_events+0x110>
        }
        else if (pb_mid_act != pb_mid_prev && pb_mid_act == 1)
   821e8:	4b3e      	ldr	r3, [pc, #248]	; (822e4 <button_events+0x1f4>)
   821ea:	781a      	ldrb	r2, [r3, #0]
   821ec:	4b43      	ldr	r3, [pc, #268]	; (822fc <button_events+0x20c>)
   821ee:	781b      	ldrb	r3, [r3, #0]
   821f0:	429a      	cmp	r2, r3
   821f2:	d005      	beq.n	82200 <button_events+0x110>
   821f4:	4b3b      	ldr	r3, [pc, #236]	; (822e4 <button_events+0x1f4>)
   821f6:	781b      	ldrb	r3, [r3, #0]
   821f8:	2b01      	cmp	r3, #1
   821fa:	d101      	bne.n	82200 <button_events+0x110>
        {
            nextEvent = EVENT_BUTTON_MID_R;
   821fc:	2309      	movs	r3, #9
   821fe:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_mid_act == pb_mid_prev && pb_mid_act == 0)
        {
            nextEvent = EVENT_BUTTON_MID_H;
        }*/
        
        if (pb_right_act != pb_right_prev && pb_right_act == 0)
   82200:	4b39      	ldr	r3, [pc, #228]	; (822e8 <button_events+0x1f8>)
   82202:	781a      	ldrb	r2, [r3, #0]
   82204:	4b3e      	ldr	r3, [pc, #248]	; (82300 <button_events+0x210>)
   82206:	781b      	ldrb	r3, [r3, #0]
   82208:	429a      	cmp	r2, r3
   8220a:	d006      	beq.n	8221a <button_events+0x12a>
   8220c:	4b36      	ldr	r3, [pc, #216]	; (822e8 <button_events+0x1f8>)
   8220e:	781b      	ldrb	r3, [r3, #0]
   82210:	2b00      	cmp	r3, #0
   82212:	d102      	bne.n	8221a <button_events+0x12a>
        {
            nextEvent = EVENT_BUTTON_RIGHT_P;
   82214:	230a      	movs	r3, #10
   82216:	71fb      	strb	r3, [r7, #7]
   82218:	e00b      	b.n	82232 <button_events+0x142>
        }
        else if (pb_right_act != pb_right_prev && pb_right_act == 1)
   8221a:	4b33      	ldr	r3, [pc, #204]	; (822e8 <button_events+0x1f8>)
   8221c:	781a      	ldrb	r2, [r3, #0]
   8221e:	4b38      	ldr	r3, [pc, #224]	; (82300 <button_events+0x210>)
   82220:	781b      	ldrb	r3, [r3, #0]
   82222:	429a      	cmp	r2, r3
   82224:	d005      	beq.n	82232 <button_events+0x142>
   82226:	4b30      	ldr	r3, [pc, #192]	; (822e8 <button_events+0x1f8>)
   82228:	781b      	ldrb	r3, [r3, #0]
   8222a:	2b01      	cmp	r3, #1
   8222c:	d101      	bne.n	82232 <button_events+0x142>
        {
            nextEvent = EVENT_BUTTON_RIGHT_R;
   8222e:	230c      	movs	r3, #12
   82230:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_right_act == pb_right_prev && pb_right_act == 0)
        {
            nextEvent = EVENT_BUTTON_RIGHT_H;
        }*/
        
        if (pb_down_act != pb_down_prev && pb_down_act == 0)
   82232:	4b2e      	ldr	r3, [pc, #184]	; (822ec <button_events+0x1fc>)
   82234:	781a      	ldrb	r2, [r3, #0]
   82236:	4b33      	ldr	r3, [pc, #204]	; (82304 <button_events+0x214>)
   82238:	781b      	ldrb	r3, [r3, #0]
   8223a:	429a      	cmp	r2, r3
   8223c:	d006      	beq.n	8224c <button_events+0x15c>
   8223e:	4b2b      	ldr	r3, [pc, #172]	; (822ec <button_events+0x1fc>)
   82240:	781b      	ldrb	r3, [r3, #0]
   82242:	2b00      	cmp	r3, #0
   82244:	d102      	bne.n	8224c <button_events+0x15c>
        {
            nextEvent = EVENT_BUTTON_DOWN_P;
   82246:	230d      	movs	r3, #13
   82248:	71fb      	strb	r3, [r7, #7]
   8224a:	e00b      	b.n	82264 <button_events+0x174>
        }
        else if (pb_down_act != pb_down_prev && pb_down_act == 1)
   8224c:	4b27      	ldr	r3, [pc, #156]	; (822ec <button_events+0x1fc>)
   8224e:	781a      	ldrb	r2, [r3, #0]
   82250:	4b2c      	ldr	r3, [pc, #176]	; (82304 <button_events+0x214>)
   82252:	781b      	ldrb	r3, [r3, #0]
   82254:	429a      	cmp	r2, r3
   82256:	d005      	beq.n	82264 <button_events+0x174>
   82258:	4b24      	ldr	r3, [pc, #144]	; (822ec <button_events+0x1fc>)
   8225a:	781b      	ldrb	r3, [r3, #0]
   8225c:	2b01      	cmp	r3, #1
   8225e:	d101      	bne.n	82264 <button_events+0x174>
        {
            nextEvent = EVENT_BUTTON_DOWN_R;
   82260:	230f      	movs	r3, #15
   82262:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_down_act == pb_down_prev && pb_down_act == 0)
        {
            nextEvent = EVENT_BUTTON_DOWN_H;
        }*/
        
        if (pb_return_act != pb_return_prev && pb_return_act == 0)
   82264:	4b22      	ldr	r3, [pc, #136]	; (822f0 <button_events+0x200>)
   82266:	781a      	ldrb	r2, [r3, #0]
   82268:	4b27      	ldr	r3, [pc, #156]	; (82308 <button_events+0x218>)
   8226a:	781b      	ldrb	r3, [r3, #0]
   8226c:	429a      	cmp	r2, r3
   8226e:	d006      	beq.n	8227e <button_events+0x18e>
   82270:	4b1f      	ldr	r3, [pc, #124]	; (822f0 <button_events+0x200>)
   82272:	781b      	ldrb	r3, [r3, #0]
   82274:	2b00      	cmp	r3, #0
   82276:	d102      	bne.n	8227e <button_events+0x18e>
        {
            nextEvent = EVENT_BUTTON_RETURN_P;
   82278:	2310      	movs	r3, #16
   8227a:	71fb      	strb	r3, [r7, #7]
   8227c:	e00b      	b.n	82296 <button_events+0x1a6>
        }
        else if (pb_return_act != pb_return_prev && pb_return_act == 1)
   8227e:	4b1c      	ldr	r3, [pc, #112]	; (822f0 <button_events+0x200>)
   82280:	781a      	ldrb	r2, [r3, #0]
   82282:	4b21      	ldr	r3, [pc, #132]	; (82308 <button_events+0x218>)
   82284:	781b      	ldrb	r3, [r3, #0]
   82286:	429a      	cmp	r2, r3
   82288:	d005      	beq.n	82296 <button_events+0x1a6>
   8228a:	4b19      	ldr	r3, [pc, #100]	; (822f0 <button_events+0x200>)
   8228c:	781b      	ldrb	r3, [r3, #0]
   8228e:	2b01      	cmp	r3, #1
   82290:	d101      	bne.n	82296 <button_events+0x1a6>
        {
            nextEvent = EVENT_BUTTON_RETURN_R;
   82292:	2312      	movs	r3, #18
   82294:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_return_act == pb_up_prev && pb_return_act == 0)
        {
            nextEvent = EVENT_BUTTON_RETURN_H;
        }*/
        
        pb_up_prev = pb_up_act;
   82296:	4b11      	ldr	r3, [pc, #68]	; (822dc <button_events+0x1ec>)
   82298:	781a      	ldrb	r2, [r3, #0]
   8229a:	4b16      	ldr	r3, [pc, #88]	; (822f4 <button_events+0x204>)
   8229c:	701a      	strb	r2, [r3, #0]
        pb_left_prev = pb_left_act;
   8229e:	4b10      	ldr	r3, [pc, #64]	; (822e0 <button_events+0x1f0>)
   822a0:	781a      	ldrb	r2, [r3, #0]
   822a2:	4b15      	ldr	r3, [pc, #84]	; (822f8 <button_events+0x208>)
   822a4:	701a      	strb	r2, [r3, #0]
        pb_mid_prev = pb_mid_act;
   822a6:	4b0f      	ldr	r3, [pc, #60]	; (822e4 <button_events+0x1f4>)
   822a8:	781a      	ldrb	r2, [r3, #0]
   822aa:	4b14      	ldr	r3, [pc, #80]	; (822fc <button_events+0x20c>)
   822ac:	701a      	strb	r2, [r3, #0]
        pb_right_prev = pb_right_act;
   822ae:	4b0e      	ldr	r3, [pc, #56]	; (822e8 <button_events+0x1f8>)
   822b0:	781a      	ldrb	r2, [r3, #0]
   822b2:	4b13      	ldr	r3, [pc, #76]	; (82300 <button_events+0x210>)
   822b4:	701a      	strb	r2, [r3, #0]
        pb_down_prev = pb_down_act;
   822b6:	4b0d      	ldr	r3, [pc, #52]	; (822ec <button_events+0x1fc>)
   822b8:	781a      	ldrb	r2, [r3, #0]
   822ba:	4b12      	ldr	r3, [pc, #72]	; (82304 <button_events+0x214>)
   822bc:	701a      	strb	r2, [r3, #0]
        pb_return_prev = pb_return_act;
   822be:	4b0c      	ldr	r3, [pc, #48]	; (822f0 <button_events+0x200>)
   822c0:	781a      	ldrb	r2, [r3, #0]
   822c2:	4b11      	ldr	r3, [pc, #68]	; (82308 <button_events+0x218>)
   822c4:	701a      	strb	r2, [r3, #0]
    }

    return nextEvent;
   822c6:	79fb      	ldrb	r3, [r7, #7]
}
   822c8:	4618      	mov	r0, r3
   822ca:	3708      	adds	r7, #8
   822cc:	46bd      	mov	sp, r7
   822ce:	bd80      	pop	{r7, pc}
   822d0:	00082395 	.word	0x00082395
   822d4:	20070e20 	.word	0x20070e20
   822d8:	00081713 	.word	0x00081713
   822dc:	20070e49 	.word	0x20070e49
   822e0:	20070e30 	.word	0x20070e30
   822e4:	20070e48 	.word	0x20070e48
   822e8:	20070e4a 	.word	0x20070e4a
   822ec:	20070e2c 	.word	0x20070e2c
   822f0:	20070e28 	.word	0x20070e28
   822f4:	20070e2d 	.word	0x20070e2d
   822f8:	20070e2b 	.word	0x20070e2b
   822fc:	20070e29 	.word	0x20070e29
   82300:	20070e2e 	.word	0x20070e2e
   82304:	20070e2a 	.word	0x20070e2a
   82308:	20070e2f 	.word	0x20070e2f

0008230c <ioport_set_pin_level>:
{
   8230c:	b480      	push	{r7}
   8230e:	b08b      	sub	sp, #44	; 0x2c
   82310:	af00      	add	r7, sp, #0
   82312:	6078      	str	r0, [r7, #4]
   82314:	460b      	mov	r3, r1
   82316:	70fb      	strb	r3, [r7, #3]
   82318:	687b      	ldr	r3, [r7, #4]
   8231a:	627b      	str	r3, [r7, #36]	; 0x24
   8231c:	78fb      	ldrb	r3, [r7, #3]
   8231e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82324:	61fb      	str	r3, [r7, #28]
   82326:	69fb      	ldr	r3, [r7, #28]
   82328:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   8232a:	69bb      	ldr	r3, [r7, #24]
   8232c:	095b      	lsrs	r3, r3, #5
   8232e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82330:	697b      	ldr	r3, [r7, #20]
   82332:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82336:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8233a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   8233c:	613b      	str	r3, [r7, #16]
	if (level) {
   8233e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82342:	2b00      	cmp	r3, #0
   82344:	d009      	beq.n	8235a <ioport_set_pin_level+0x4e>
   82346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82348:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8234a:	68fb      	ldr	r3, [r7, #12]
   8234c:	f003 031f 	and.w	r3, r3, #31
   82350:	2201      	movs	r2, #1
   82352:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82354:	693b      	ldr	r3, [r7, #16]
   82356:	631a      	str	r2, [r3, #48]	; 0x30
}
   82358:	e008      	b.n	8236c <ioport_set_pin_level+0x60>
   8235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8235c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   8235e:	68bb      	ldr	r3, [r7, #8]
   82360:	f003 031f 	and.w	r3, r3, #31
   82364:	2201      	movs	r2, #1
   82366:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82368:	693b      	ldr	r3, [r7, #16]
   8236a:	635a      	str	r2, [r3, #52]	; 0x34
   8236c:	bf00      	nop
   8236e:	372c      	adds	r7, #44	; 0x2c
   82370:	46bd      	mov	sp, r7
   82372:	bc80      	pop	{r7}
   82374:	4770      	bx	lr
	...

00082378 <SysTick_Handler>:
//float battery_voltage = 0;
uint8_t battery_percentage;
uint8_t prev_battery_percentage = 0;

void SysTick_Handler(void)
{
   82378:	b480      	push	{r7}
   8237a:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   8237c:	4b04      	ldr	r3, [pc, #16]	; (82390 <SysTick_Handler+0x18>)
   8237e:	681b      	ldr	r3, [r3, #0]
   82380:	3301      	adds	r3, #1
   82382:	4a03      	ldr	r2, [pc, #12]	; (82390 <SysTick_Handler+0x18>)
   82384:	6013      	str	r3, [r2, #0]
}
   82386:	bf00      	nop
   82388:	46bd      	mov	sp, r7
   8238a:	bc80      	pop	{r7}
   8238c:	4770      	bx	lr
   8238e:	bf00      	nop
   82390:	20070dc4 	.word	0x20070dc4

00082394 <getTicks>:

uint32_t getTicks(void)
{
   82394:	b480      	push	{r7}
   82396:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   82398:	4b02      	ldr	r3, [pc, #8]	; (823a4 <getTicks+0x10>)
   8239a:	681b      	ldr	r3, [r3, #0]
}
   8239c:	4618      	mov	r0, r3
   8239e:	46bd      	mov	sp, r7
   823a0:	bc80      	pop	{r7}
   823a2:	4770      	bx	lr
   823a4:	20070dc4 	.word	0x20070dc4

000823a8 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   823a8:	b480      	push	{r7}
   823aa:	b085      	sub	sp, #20
   823ac:	af00      	add	r7, sp, #0
   823ae:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   823b0:	4b07      	ldr	r3, [pc, #28]	; (823d0 <mdelay+0x28>)
   823b2:	681b      	ldr	r3, [r3, #0]
   823b4:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   823b6:	bf00      	nop
   823b8:	4b05      	ldr	r3, [pc, #20]	; (823d0 <mdelay+0x28>)
   823ba:	681a      	ldr	r2, [r3, #0]
   823bc:	68fb      	ldr	r3, [r7, #12]
   823be:	1ad2      	subs	r2, r2, r3
   823c0:	687b      	ldr	r3, [r7, #4]
   823c2:	429a      	cmp	r2, r3
   823c4:	d3f8      	bcc.n	823b8 <mdelay+0x10>
}
   823c6:	bf00      	nop
   823c8:	3714      	adds	r7, #20
   823ca:	46bd      	mov	sp, r7
   823cc:	bc80      	pop	{r7}
   823ce:	4770      	bx	lr
   823d0:	20070dc4 	.word	0x20070dc4

000823d4 <update_comm>:

void update_comm(void)
{
   823d4:	b580      	push	{r7, lr}
   823d6:	af00      	add	r7, sp, #0
    if ((getTicks() - ticks_comm) > 5)
   823d8:	4b0b      	ldr	r3, [pc, #44]	; (82408 <update_comm+0x34>)
   823da:	4798      	blx	r3
   823dc:	4602      	mov	r2, r0
   823de:	4b0b      	ldr	r3, [pc, #44]	; (8240c <update_comm+0x38>)
   823e0:	681b      	ldr	r3, [r3, #0]
   823e2:	1ad3      	subs	r3, r2, r3
   823e4:	2b05      	cmp	r3, #5
   823e6:	d90d      	bls.n	82404 <update_comm+0x30>
    {
        ticks_comm = getTicks();
   823e8:	4b07      	ldr	r3, [pc, #28]	; (82408 <update_comm+0x34>)
   823ea:	4798      	blx	r3
   823ec:	4602      	mov	r2, r0
   823ee:	4b07      	ldr	r3, [pc, #28]	; (8240c <update_comm+0x38>)
   823f0:	601a      	str	r2, [r3, #0]
        
        memcpy(&sens_buf, &mts, sizeof(mts));
   823f2:	4b07      	ldr	r3, [pc, #28]	; (82410 <update_comm+0x3c>)
   823f4:	681b      	ldr	r3, [r3, #0]
   823f6:	461a      	mov	r2, r3
   823f8:	4b06      	ldr	r3, [pc, #24]	; (82414 <update_comm+0x40>)
   823fa:	601a      	str	r2, [r3, #0]
        spi_master_transfer(&sens_buf, sizeof(sens_buf));
   823fc:	2103      	movs	r1, #3
   823fe:	4805      	ldr	r0, [pc, #20]	; (82414 <update_comm+0x40>)
   82400:	4b05      	ldr	r3, [pc, #20]	; (82418 <update_comm+0x44>)
   82402:	4798      	blx	r3
    }
}
   82404:	bf00      	nop
   82406:	bd80      	pop	{r7, pc}
   82408:	00082395 	.word	0x00082395
   8240c:	20070e18 	.word	0x20070e18
   82410:	20070e0c 	.word	0x20070e0c
   82414:	20070e08 	.word	0x20070e08
   82418:	00080685 	.word	0x00080685

0008241c <update_battery>:

void update_battery(Bool update_forced)
{
   8241c:	b580      	push	{r7, lr}
   8241e:	b084      	sub	sp, #16
   82420:	af00      	add	r7, sp, #0
   82422:	4603      	mov	r3, r0
   82424:	71fb      	strb	r3, [r7, #7]
    char tmp[6];
    battery_percentage = stm.bat_percentage;
   82426:	4b20      	ldr	r3, [pc, #128]	; (824a8 <update_battery+0x8c>)
   82428:	789a      	ldrb	r2, [r3, #2]
   8242a:	4b20      	ldr	r3, [pc, #128]	; (824ac <update_battery+0x90>)
   8242c:	701a      	strb	r2, [r3, #0]
    
    if (update_forced || prev_battery_percentage != battery_percentage)
   8242e:	79fb      	ldrb	r3, [r7, #7]
   82430:	2b00      	cmp	r3, #0
   82432:	d105      	bne.n	82440 <update_battery+0x24>
   82434:	4b1e      	ldr	r3, [pc, #120]	; (824b0 <update_battery+0x94>)
   82436:	781a      	ldrb	r2, [r3, #0]
   82438:	4b1c      	ldr	r3, [pc, #112]	; (824ac <update_battery+0x90>)
   8243a:	781b      	ldrb	r3, [r3, #0]
   8243c:	429a      	cmp	r2, r3
   8243e:	d02f      	beq.n	824a0 <update_battery+0x84>
    {
        if (battery_percentage >= 100)
   82440:	4b1a      	ldr	r3, [pc, #104]	; (824ac <update_battery+0x90>)
   82442:	781b      	ldrb	r3, [r3, #0]
   82444:	2b63      	cmp	r3, #99	; 0x63
   82446:	d909      	bls.n	8245c <update_battery+0x40>
        {
            sprintf(tmp, "%3u%%", battery_percentage);
   82448:	4b18      	ldr	r3, [pc, #96]	; (824ac <update_battery+0x90>)
   8244a:	781b      	ldrb	r3, [r3, #0]
   8244c:	461a      	mov	r2, r3
   8244e:	f107 0308 	add.w	r3, r7, #8
   82452:	4918      	ldr	r1, [pc, #96]	; (824b4 <update_battery+0x98>)
   82454:	4618      	mov	r0, r3
   82456:	4b18      	ldr	r3, [pc, #96]	; (824b8 <update_battery+0x9c>)
   82458:	4798      	blx	r3
   8245a:	e016      	b.n	8248a <update_battery+0x6e>
        }
        else if (battery_percentage >= 10)
   8245c:	4b13      	ldr	r3, [pc, #76]	; (824ac <update_battery+0x90>)
   8245e:	781b      	ldrb	r3, [r3, #0]
   82460:	2b09      	cmp	r3, #9
   82462:	d909      	bls.n	82478 <update_battery+0x5c>
        {
            sprintf(tmp, " %2u%%", battery_percentage);
   82464:	4b11      	ldr	r3, [pc, #68]	; (824ac <update_battery+0x90>)
   82466:	781b      	ldrb	r3, [r3, #0]
   82468:	461a      	mov	r2, r3
   8246a:	f107 0308 	add.w	r3, r7, #8
   8246e:	4913      	ldr	r1, [pc, #76]	; (824bc <update_battery+0xa0>)
   82470:	4618      	mov	r0, r3
   82472:	4b11      	ldr	r3, [pc, #68]	; (824b8 <update_battery+0x9c>)
   82474:	4798      	blx	r3
   82476:	e008      	b.n	8248a <update_battery+0x6e>
        }
        else
        {
            sprintf(tmp, "  %1u%%", battery_percentage);
   82478:	4b0c      	ldr	r3, [pc, #48]	; (824ac <update_battery+0x90>)
   8247a:	781b      	ldrb	r3, [r3, #0]
   8247c:	461a      	mov	r2, r3
   8247e:	f107 0308 	add.w	r3, r7, #8
   82482:	490f      	ldr	r1, [pc, #60]	; (824c0 <update_battery+0xa4>)
   82484:	4618      	mov	r0, r3
   82486:	4b0c      	ldr	r3, [pc, #48]	; (824b8 <update_battery+0x9c>)
   82488:	4798      	blx	r3
        }
            
        lcd_print_s(1, 16, tmp);
   8248a:	f107 0308 	add.w	r3, r7, #8
   8248e:	461a      	mov	r2, r3
   82490:	2110      	movs	r1, #16
   82492:	2001      	movs	r0, #1
   82494:	4b0b      	ldr	r3, [pc, #44]	; (824c4 <update_battery+0xa8>)
   82496:	4798      	blx	r3
        prev_battery_percentage = battery_percentage;
   82498:	4b04      	ldr	r3, [pc, #16]	; (824ac <update_battery+0x90>)
   8249a:	781a      	ldrb	r2, [r3, #0]
   8249c:	4b04      	ldr	r3, [pc, #16]	; (824b0 <update_battery+0x94>)
   8249e:	701a      	strb	r2, [r3, #0]
    }
}
   824a0:	bf00      	nop
   824a2:	3710      	adds	r7, #16
   824a4:	46bd      	mov	sp, r7
   824a6:	bd80      	pop	{r7, pc}
   824a8:	20070e10 	.word	0x20070e10
   824ac:	20070e64 	.word	0x20070e64
   824b0:	20070dc8 	.word	0x20070dc8
   824b4:	000885d8 	.word	0x000885d8
   824b8:	000844c1 	.word	0x000844c1
   824bc:	000885e0 	.word	0x000885e0
   824c0:	000885e8 	.word	0x000885e8
   824c4:	0008120d 	.word	0x0008120d

000824c8 <update_heartbeat>:

void update_heartbeat(void)
{
   824c8:	b580      	push	{r7, lr}
   824ca:	af00      	add	r7, sp, #0
    if (heart_state)
   824cc:	4b20      	ldr	r3, [pc, #128]	; (82550 <update_heartbeat+0x88>)
   824ce:	781b      	ldrb	r3, [r3, #0]
   824d0:	2b00      	cmp	r3, #0
   824d2:	d01d      	beq.n	82510 <update_heartbeat+0x48>
    {
        if (getTicks() >= (ticks_heartbeat + 100))
   824d4:	4b1f      	ldr	r3, [pc, #124]	; (82554 <update_heartbeat+0x8c>)
   824d6:	4798      	blx	r3
   824d8:	4602      	mov	r2, r0
   824da:	4b1f      	ldr	r3, [pc, #124]	; (82558 <update_heartbeat+0x90>)
   824dc:	681b      	ldr	r3, [r3, #0]
   824de:	3364      	adds	r3, #100	; 0x64
   824e0:	429a      	cmp	r2, r3
   824e2:	d333      	bcc.n	8254c <update_heartbeat+0x84>
        {
            ticks_heartbeat = getTicks();
   824e4:	4b1b      	ldr	r3, [pc, #108]	; (82554 <update_heartbeat+0x8c>)
   824e6:	4798      	blx	r3
   824e8:	4602      	mov	r2, r0
   824ea:	4b1b      	ldr	r3, [pc, #108]	; (82558 <update_heartbeat+0x90>)
   824ec:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 0);
   824ee:	2100      	movs	r1, #0
   824f0:	206a      	movs	r0, #106	; 0x6a
   824f2:	4b1a      	ldr	r3, [pc, #104]	; (8255c <update_heartbeat+0x94>)
   824f4:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 0);
   824f6:	2100      	movs	r1, #0
   824f8:	2067      	movs	r0, #103	; 0x67
   824fa:	4b18      	ldr	r3, [pc, #96]	; (8255c <update_heartbeat+0x94>)
   824fc:	4798      	blx	r3
            mts.ibit.heartbeat = 0;
   824fe:	4a18      	ldr	r2, [pc, #96]	; (82560 <update_heartbeat+0x98>)
   82500:	7813      	ldrb	r3, [r2, #0]
   82502:	f36f 0300 	bfc	r3, #0, #1
   82506:	7013      	strb	r3, [r2, #0]
            heart_state = 0;
   82508:	4b11      	ldr	r3, [pc, #68]	; (82550 <update_heartbeat+0x88>)
   8250a:	2200      	movs	r2, #0
   8250c:	701a      	strb	r2, [r3, #0]
            ioport_set_pin_level(LED_M1, 1);
            mts.ibit.heartbeat = 1;
            heart_state = 1;
        }
    }
}
   8250e:	e01d      	b.n	8254c <update_heartbeat+0x84>
        if (getTicks() >= (ticks_heartbeat + 900))
   82510:	4b10      	ldr	r3, [pc, #64]	; (82554 <update_heartbeat+0x8c>)
   82512:	4798      	blx	r3
   82514:	4602      	mov	r2, r0
   82516:	4b10      	ldr	r3, [pc, #64]	; (82558 <update_heartbeat+0x90>)
   82518:	681b      	ldr	r3, [r3, #0]
   8251a:	f503 7361 	add.w	r3, r3, #900	; 0x384
   8251e:	429a      	cmp	r2, r3
   82520:	d314      	bcc.n	8254c <update_heartbeat+0x84>
            ticks_heartbeat = getTicks();
   82522:	4b0c      	ldr	r3, [pc, #48]	; (82554 <update_heartbeat+0x8c>)
   82524:	4798      	blx	r3
   82526:	4602      	mov	r2, r0
   82528:	4b0b      	ldr	r3, [pc, #44]	; (82558 <update_heartbeat+0x90>)
   8252a:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 1);
   8252c:	2101      	movs	r1, #1
   8252e:	206a      	movs	r0, #106	; 0x6a
   82530:	4b0a      	ldr	r3, [pc, #40]	; (8255c <update_heartbeat+0x94>)
   82532:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 1);
   82534:	2101      	movs	r1, #1
   82536:	2067      	movs	r0, #103	; 0x67
   82538:	4b08      	ldr	r3, [pc, #32]	; (8255c <update_heartbeat+0x94>)
   8253a:	4798      	blx	r3
            mts.ibit.heartbeat = 1;
   8253c:	4a08      	ldr	r2, [pc, #32]	; (82560 <update_heartbeat+0x98>)
   8253e:	7813      	ldrb	r3, [r2, #0]
   82540:	f043 0301 	orr.w	r3, r3, #1
   82544:	7013      	strb	r3, [r2, #0]
            heart_state = 1;
   82546:	4b02      	ldr	r3, [pc, #8]	; (82550 <update_heartbeat+0x88>)
   82548:	2201      	movs	r2, #1
   8254a:	701a      	strb	r2, [r3, #0]
}
   8254c:	bf00      	nop
   8254e:	bd80      	pop	{r7, pc}
   82550:	20070e14 	.word	0x20070e14
   82554:	00082395 	.word	0x00082395
   82558:	20070e24 	.word	0x20070e24
   8255c:	0008230d 	.word	0x0008230d
   82560:	20070e0c 	.word	0x20070e0c

00082564 <osc_enable>:
{
   82564:	b580      	push	{r7, lr}
   82566:	b082      	sub	sp, #8
   82568:	af00      	add	r7, sp, #0
   8256a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8256c:	687b      	ldr	r3, [r7, #4]
   8256e:	2b07      	cmp	r3, #7
   82570:	d831      	bhi.n	825d6 <osc_enable+0x72>
   82572:	a201      	add	r2, pc, #4	; (adr r2, 82578 <osc_enable+0x14>)
   82574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82578:	000825d5 	.word	0x000825d5
   8257c:	00082599 	.word	0x00082599
   82580:	000825a1 	.word	0x000825a1
   82584:	000825a9 	.word	0x000825a9
   82588:	000825b1 	.word	0x000825b1
   8258c:	000825b9 	.word	0x000825b9
   82590:	000825c1 	.word	0x000825c1
   82594:	000825cb 	.word	0x000825cb
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82598:	2000      	movs	r0, #0
   8259a:	4b11      	ldr	r3, [pc, #68]	; (825e0 <osc_enable+0x7c>)
   8259c:	4798      	blx	r3
		break;
   8259e:	e01a      	b.n	825d6 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   825a0:	2001      	movs	r0, #1
   825a2:	4b0f      	ldr	r3, [pc, #60]	; (825e0 <osc_enable+0x7c>)
   825a4:	4798      	blx	r3
		break;
   825a6:	e016      	b.n	825d6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   825a8:	2000      	movs	r0, #0
   825aa:	4b0e      	ldr	r3, [pc, #56]	; (825e4 <osc_enable+0x80>)
   825ac:	4798      	blx	r3
		break;
   825ae:	e012      	b.n	825d6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   825b0:	2010      	movs	r0, #16
   825b2:	4b0c      	ldr	r3, [pc, #48]	; (825e4 <osc_enable+0x80>)
   825b4:	4798      	blx	r3
		break;
   825b6:	e00e      	b.n	825d6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   825b8:	2020      	movs	r0, #32
   825ba:	4b0a      	ldr	r3, [pc, #40]	; (825e4 <osc_enable+0x80>)
   825bc:	4798      	blx	r3
		break;
   825be:	e00a      	b.n	825d6 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   825c0:	213e      	movs	r1, #62	; 0x3e
   825c2:	2000      	movs	r0, #0
   825c4:	4b08      	ldr	r3, [pc, #32]	; (825e8 <osc_enable+0x84>)
   825c6:	4798      	blx	r3
		break;
   825c8:	e005      	b.n	825d6 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   825ca:	213e      	movs	r1, #62	; 0x3e
   825cc:	2001      	movs	r0, #1
   825ce:	4b06      	ldr	r3, [pc, #24]	; (825e8 <osc_enable+0x84>)
   825d0:	4798      	blx	r3
		break;
   825d2:	e000      	b.n	825d6 <osc_enable+0x72>
		break;
   825d4:	bf00      	nop
}
   825d6:	bf00      	nop
   825d8:	3708      	adds	r7, #8
   825da:	46bd      	mov	sp, r7
   825dc:	bd80      	pop	{r7, pc}
   825de:	bf00      	nop
   825e0:	00082ba1 	.word	0x00082ba1
   825e4:	00082c0d 	.word	0x00082c0d
   825e8:	00082c7d 	.word	0x00082c7d

000825ec <osc_is_ready>:
{
   825ec:	b580      	push	{r7, lr}
   825ee:	b082      	sub	sp, #8
   825f0:	af00      	add	r7, sp, #0
   825f2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   825f4:	687b      	ldr	r3, [r7, #4]
   825f6:	2b07      	cmp	r3, #7
   825f8:	d826      	bhi.n	82648 <osc_is_ready+0x5c>
   825fa:	a201      	add	r2, pc, #4	; (adr r2, 82600 <osc_is_ready+0x14>)
   825fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82600:	00082621 	.word	0x00082621
   82604:	00082625 	.word	0x00082625
   82608:	00082625 	.word	0x00082625
   8260c:	00082637 	.word	0x00082637
   82610:	00082637 	.word	0x00082637
   82614:	00082637 	.word	0x00082637
   82618:	00082637 	.word	0x00082637
   8261c:	00082637 	.word	0x00082637
		return 1;
   82620:	2301      	movs	r3, #1
   82622:	e012      	b.n	8264a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   82624:	4b0b      	ldr	r3, [pc, #44]	; (82654 <osc_is_ready+0x68>)
   82626:	4798      	blx	r3
   82628:	4603      	mov	r3, r0
   8262a:	2b00      	cmp	r3, #0
   8262c:	bf14      	ite	ne
   8262e:	2301      	movne	r3, #1
   82630:	2300      	moveq	r3, #0
   82632:	b2db      	uxtb	r3, r3
   82634:	e009      	b.n	8264a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   82636:	4b08      	ldr	r3, [pc, #32]	; (82658 <osc_is_ready+0x6c>)
   82638:	4798      	blx	r3
   8263a:	4603      	mov	r3, r0
   8263c:	2b00      	cmp	r3, #0
   8263e:	bf14      	ite	ne
   82640:	2301      	movne	r3, #1
   82642:	2300      	moveq	r3, #0
   82644:	b2db      	uxtb	r3, r3
   82646:	e000      	b.n	8264a <osc_is_ready+0x5e>
	return 0;
   82648:	2300      	movs	r3, #0
}
   8264a:	4618      	mov	r0, r3
   8264c:	3708      	adds	r7, #8
   8264e:	46bd      	mov	sp, r7
   82650:	bd80      	pop	{r7, pc}
   82652:	bf00      	nop
   82654:	00082bd9 	.word	0x00082bd9
   82658:	00082cf5 	.word	0x00082cf5

0008265c <osc_get_rate>:
{
   8265c:	b480      	push	{r7}
   8265e:	b083      	sub	sp, #12
   82660:	af00      	add	r7, sp, #0
   82662:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82664:	687b      	ldr	r3, [r7, #4]
   82666:	2b07      	cmp	r3, #7
   82668:	d825      	bhi.n	826b6 <osc_get_rate+0x5a>
   8266a:	a201      	add	r2, pc, #4	; (adr r2, 82670 <osc_get_rate+0x14>)
   8266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82670:	00082691 	.word	0x00082691
   82674:	00082697 	.word	0x00082697
   82678:	0008269d 	.word	0x0008269d
   8267c:	000826a3 	.word	0x000826a3
   82680:	000826a7 	.word	0x000826a7
   82684:	000826ab 	.word	0x000826ab
   82688:	000826af 	.word	0x000826af
   8268c:	000826b3 	.word	0x000826b3
		return OSC_SLCK_32K_RC_HZ;
   82690:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82694:	e010      	b.n	826b8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   82696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8269a:	e00d      	b.n	826b8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   8269c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   826a0:	e00a      	b.n	826b8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   826a2:	4b08      	ldr	r3, [pc, #32]	; (826c4 <osc_get_rate+0x68>)
   826a4:	e008      	b.n	826b8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   826a6:	4b08      	ldr	r3, [pc, #32]	; (826c8 <osc_get_rate+0x6c>)
   826a8:	e006      	b.n	826b8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   826aa:	4b08      	ldr	r3, [pc, #32]	; (826cc <osc_get_rate+0x70>)
   826ac:	e004      	b.n	826b8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   826ae:	4b07      	ldr	r3, [pc, #28]	; (826cc <osc_get_rate+0x70>)
   826b0:	e002      	b.n	826b8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   826b2:	4b06      	ldr	r3, [pc, #24]	; (826cc <osc_get_rate+0x70>)
   826b4:	e000      	b.n	826b8 <osc_get_rate+0x5c>
	return 0;
   826b6:	2300      	movs	r3, #0
}
   826b8:	4618      	mov	r0, r3
   826ba:	370c      	adds	r7, #12
   826bc:	46bd      	mov	sp, r7
   826be:	bc80      	pop	{r7}
   826c0:	4770      	bx	lr
   826c2:	bf00      	nop
   826c4:	003d0900 	.word	0x003d0900
   826c8:	007a1200 	.word	0x007a1200
   826cc:	00b71b00 	.word	0x00b71b00

000826d0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   826d0:	b580      	push	{r7, lr}
   826d2:	b082      	sub	sp, #8
   826d4:	af00      	add	r7, sp, #0
   826d6:	4603      	mov	r3, r0
   826d8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   826da:	bf00      	nop
   826dc:	79fb      	ldrb	r3, [r7, #7]
   826de:	4618      	mov	r0, r3
   826e0:	4b05      	ldr	r3, [pc, #20]	; (826f8 <osc_wait_ready+0x28>)
   826e2:	4798      	blx	r3
   826e4:	4603      	mov	r3, r0
   826e6:	f083 0301 	eor.w	r3, r3, #1
   826ea:	b2db      	uxtb	r3, r3
   826ec:	2b00      	cmp	r3, #0
   826ee:	d1f5      	bne.n	826dc <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   826f0:	bf00      	nop
   826f2:	3708      	adds	r7, #8
   826f4:	46bd      	mov	sp, r7
   826f6:	bd80      	pop	{r7, pc}
   826f8:	000825ed 	.word	0x000825ed

000826fc <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   826fc:	b580      	push	{r7, lr}
   826fe:	b086      	sub	sp, #24
   82700:	af00      	add	r7, sp, #0
   82702:	60f8      	str	r0, [r7, #12]
   82704:	607a      	str	r2, [r7, #4]
   82706:	603b      	str	r3, [r7, #0]
   82708:	460b      	mov	r3, r1
   8270a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8270c:	687b      	ldr	r3, [r7, #4]
   8270e:	2b00      	cmp	r3, #0
   82710:	d107      	bne.n	82722 <pll_config_init+0x26>
   82712:	683b      	ldr	r3, [r7, #0]
   82714:	2b00      	cmp	r3, #0
   82716:	d104      	bne.n	82722 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   82718:	68fb      	ldr	r3, [r7, #12]
   8271a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8271e:	601a      	str	r2, [r3, #0]
   82720:	e019      	b.n	82756 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   82722:	7afb      	ldrb	r3, [r7, #11]
   82724:	4618      	mov	r0, r3
   82726:	4b0e      	ldr	r3, [pc, #56]	; (82760 <pll_config_init+0x64>)
   82728:	4798      	blx	r3
   8272a:	4602      	mov	r2, r0
   8272c:	687b      	ldr	r3, [r7, #4]
   8272e:	fbb2 f3f3 	udiv	r3, r2, r3
   82732:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   82734:	697b      	ldr	r3, [r7, #20]
   82736:	683a      	ldr	r2, [r7, #0]
   82738:	fb02 f303 	mul.w	r3, r2, r3
   8273c:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8273e:	683b      	ldr	r3, [r7, #0]
   82740:	3b01      	subs	r3, #1
   82742:	041a      	lsls	r2, r3, #16
   82744:	4b07      	ldr	r3, [pc, #28]	; (82764 <pll_config_init+0x68>)
   82746:	4013      	ands	r3, r2
   82748:	687a      	ldr	r2, [r7, #4]
   8274a:	b2d2      	uxtb	r2, r2
   8274c:	4313      	orrs	r3, r2
   8274e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   82752:	68fb      	ldr	r3, [r7, #12]
   82754:	601a      	str	r2, [r3, #0]
	}
}
   82756:	bf00      	nop
   82758:	3718      	adds	r7, #24
   8275a:	46bd      	mov	sp, r7
   8275c:	bd80      	pop	{r7, pc}
   8275e:	bf00      	nop
   82760:	0008265d 	.word	0x0008265d
   82764:	07ff0000 	.word	0x07ff0000

00082768 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   82768:	b580      	push	{r7, lr}
   8276a:	b082      	sub	sp, #8
   8276c:	af00      	add	r7, sp, #0
   8276e:	6078      	str	r0, [r7, #4]
   82770:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82772:	683b      	ldr	r3, [r7, #0]
   82774:	2b00      	cmp	r3, #0
   82776:	d108      	bne.n	8278a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82778:	4b09      	ldr	r3, [pc, #36]	; (827a0 <pll_enable+0x38>)
   8277a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8277c:	4a09      	ldr	r2, [pc, #36]	; (827a4 <pll_enable+0x3c>)
   8277e:	687b      	ldr	r3, [r7, #4]
   82780:	681b      	ldr	r3, [r3, #0]
   82782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82786:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   82788:	e005      	b.n	82796 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8278a:	4a06      	ldr	r2, [pc, #24]	; (827a4 <pll_enable+0x3c>)
   8278c:	687b      	ldr	r3, [r7, #4]
   8278e:	681b      	ldr	r3, [r3, #0]
   82790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82794:	61d3      	str	r3, [r2, #28]
}
   82796:	bf00      	nop
   82798:	3708      	adds	r7, #8
   8279a:	46bd      	mov	sp, r7
   8279c:	bd80      	pop	{r7, pc}
   8279e:	bf00      	nop
   827a0:	00082d0d 	.word	0x00082d0d
   827a4:	400e0600 	.word	0x400e0600

000827a8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   827a8:	b580      	push	{r7, lr}
   827aa:	b082      	sub	sp, #8
   827ac:	af00      	add	r7, sp, #0
   827ae:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   827b0:	687b      	ldr	r3, [r7, #4]
   827b2:	2b00      	cmp	r3, #0
   827b4:	d103      	bne.n	827be <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   827b6:	4b05      	ldr	r3, [pc, #20]	; (827cc <pll_is_locked+0x24>)
   827b8:	4798      	blx	r3
   827ba:	4603      	mov	r3, r0
   827bc:	e002      	b.n	827c4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   827be:	4b04      	ldr	r3, [pc, #16]	; (827d0 <pll_is_locked+0x28>)
   827c0:	4798      	blx	r3
   827c2:	4603      	mov	r3, r0
	}
}
   827c4:	4618      	mov	r0, r3
   827c6:	3708      	adds	r7, #8
   827c8:	46bd      	mov	sp, r7
   827ca:	bd80      	pop	{r7, pc}
   827cc:	00082d25 	.word	0x00082d25
   827d0:	00082d3d 	.word	0x00082d3d

000827d4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   827d4:	b580      	push	{r7, lr}
   827d6:	b082      	sub	sp, #8
   827d8:	af00      	add	r7, sp, #0
   827da:	4603      	mov	r3, r0
   827dc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   827de:	79fb      	ldrb	r3, [r7, #7]
   827e0:	3b03      	subs	r3, #3
   827e2:	2b04      	cmp	r3, #4
   827e4:	d808      	bhi.n	827f8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   827e6:	79fb      	ldrb	r3, [r7, #7]
   827e8:	4618      	mov	r0, r3
   827ea:	4b06      	ldr	r3, [pc, #24]	; (82804 <pll_enable_source+0x30>)
   827ec:	4798      	blx	r3
		osc_wait_ready(e_src);
   827ee:	79fb      	ldrb	r3, [r7, #7]
   827f0:	4618      	mov	r0, r3
   827f2:	4b05      	ldr	r3, [pc, #20]	; (82808 <pll_enable_source+0x34>)
   827f4:	4798      	blx	r3
		break;
   827f6:	e000      	b.n	827fa <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   827f8:	bf00      	nop
	}
}
   827fa:	bf00      	nop
   827fc:	3708      	adds	r7, #8
   827fe:	46bd      	mov	sp, r7
   82800:	bd80      	pop	{r7, pc}
   82802:	bf00      	nop
   82804:	00082565 	.word	0x00082565
   82808:	000826d1 	.word	0x000826d1

0008280c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   8280c:	b580      	push	{r7, lr}
   8280e:	b082      	sub	sp, #8
   82810:	af00      	add	r7, sp, #0
   82812:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82814:	bf00      	nop
   82816:	6878      	ldr	r0, [r7, #4]
   82818:	4b04      	ldr	r3, [pc, #16]	; (8282c <pll_wait_for_lock+0x20>)
   8281a:	4798      	blx	r3
   8281c:	4603      	mov	r3, r0
   8281e:	2b00      	cmp	r3, #0
   82820:	d0f9      	beq.n	82816 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   82822:	2300      	movs	r3, #0
}
   82824:	4618      	mov	r0, r3
   82826:	3708      	adds	r7, #8
   82828:	46bd      	mov	sp, r7
   8282a:	bd80      	pop	{r7, pc}
   8282c:	000827a9 	.word	0x000827a9

00082830 <sysclk_get_main_hz>:
{
   82830:	b580      	push	{r7, lr}
   82832:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   82834:	2006      	movs	r0, #6
   82836:	4b04      	ldr	r3, [pc, #16]	; (82848 <sysclk_get_main_hz+0x18>)
   82838:	4798      	blx	r3
   8283a:	4602      	mov	r2, r0
   8283c:	4613      	mov	r3, r2
   8283e:	00db      	lsls	r3, r3, #3
   82840:	1a9b      	subs	r3, r3, r2
   82842:	005b      	lsls	r3, r3, #1
}
   82844:	4618      	mov	r0, r3
   82846:	bd80      	pop	{r7, pc}
   82848:	0008265d 	.word	0x0008265d

0008284c <sysclk_get_cpu_hz>:
{
   8284c:	b580      	push	{r7, lr}
   8284e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   82850:	4b02      	ldr	r3, [pc, #8]	; (8285c <sysclk_get_cpu_hz+0x10>)
   82852:	4798      	blx	r3
   82854:	4603      	mov	r3, r0
   82856:	085b      	lsrs	r3, r3, #1
}
   82858:	4618      	mov	r0, r3
   8285a:	bd80      	pop	{r7, pc}
   8285c:	00082831 	.word	0x00082831

00082860 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82860:	b590      	push	{r4, r7, lr}
   82862:	b083      	sub	sp, #12
   82864:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82866:	4811      	ldr	r0, [pc, #68]	; (828ac <sysclk_init+0x4c>)
   82868:	4b11      	ldr	r3, [pc, #68]	; (828b0 <sysclk_init+0x50>)
   8286a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8286c:	2006      	movs	r0, #6
   8286e:	4b11      	ldr	r3, [pc, #68]	; (828b4 <sysclk_init+0x54>)
   82870:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   82872:	1d38      	adds	r0, r7, #4
   82874:	230e      	movs	r3, #14
   82876:	2201      	movs	r2, #1
   82878:	2106      	movs	r1, #6
   8287a:	4c0f      	ldr	r4, [pc, #60]	; (828b8 <sysclk_init+0x58>)
   8287c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8287e:	1d3b      	adds	r3, r7, #4
   82880:	2100      	movs	r1, #0
   82882:	4618      	mov	r0, r3
   82884:	4b0d      	ldr	r3, [pc, #52]	; (828bc <sysclk_init+0x5c>)
   82886:	4798      	blx	r3
		pll_wait_for_lock(0);
   82888:	2000      	movs	r0, #0
   8288a:	4b0d      	ldr	r3, [pc, #52]	; (828c0 <sysclk_init+0x60>)
   8288c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8288e:	2010      	movs	r0, #16
   82890:	4b0c      	ldr	r3, [pc, #48]	; (828c4 <sysclk_init+0x64>)
   82892:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82894:	4b0c      	ldr	r3, [pc, #48]	; (828c8 <sysclk_init+0x68>)
   82896:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82898:	4b0c      	ldr	r3, [pc, #48]	; (828cc <sysclk_init+0x6c>)
   8289a:	4798      	blx	r3
   8289c:	4603      	mov	r3, r0
   8289e:	4618      	mov	r0, r3
   828a0:	4b03      	ldr	r3, [pc, #12]	; (828b0 <sysclk_init+0x50>)
   828a2:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   828a4:	bf00      	nop
   828a6:	370c      	adds	r7, #12
   828a8:	46bd      	mov	sp, r7
   828aa:	bd90      	pop	{r4, r7, pc}
   828ac:	0501bd00 	.word	0x0501bd00
   828b0:	200700d1 	.word	0x200700d1
   828b4:	000827d5 	.word	0x000827d5
   828b8:	000826fd 	.word	0x000826fd
   828bc:	00082769 	.word	0x00082769
   828c0:	0008280d 	.word	0x0008280d
   828c4:	00082b21 	.word	0x00082b21
   828c8:	000833b5 	.word	0x000833b5
   828cc:	0008284d 	.word	0x0008284d

000828d0 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   828d0:	b580      	push	{r7, lr}
   828d2:	b082      	sub	sp, #8
   828d4:	af00      	add	r7, sp, #0
   828d6:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   828d8:	6878      	ldr	r0, [r7, #4]
   828da:	4b03      	ldr	r3, [pc, #12]	; (828e8 <dmac_init+0x18>)
   828dc:	4798      	blx	r3
}
   828de:	bf00      	nop
   828e0:	3708      	adds	r7, #8
   828e2:	46bd      	mov	sp, r7
   828e4:	bd80      	pop	{r7, pc}
   828e6:	bf00      	nop
   828e8:	0008292b 	.word	0x0008292b

000828ec <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   828ec:	b480      	push	{r7}
   828ee:	b083      	sub	sp, #12
   828f0:	af00      	add	r7, sp, #0
   828f2:	6078      	str	r0, [r7, #4]
   828f4:	460b      	mov	r3, r1
   828f6:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   828f8:	687b      	ldr	r3, [r7, #4]
   828fa:	681b      	ldr	r3, [r3, #0]
   828fc:	f023 0210 	bic.w	r2, r3, #16
   82900:	78fb      	ldrb	r3, [r7, #3]
   82902:	431a      	orrs	r2, r3
   82904:	687b      	ldr	r3, [r7, #4]
   82906:	601a      	str	r2, [r3, #0]
}
   82908:	bf00      	nop
   8290a:	370c      	adds	r7, #12
   8290c:	46bd      	mov	sp, r7
   8290e:	bc80      	pop	{r7}
   82910:	4770      	bx	lr

00082912 <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   82912:	b480      	push	{r7}
   82914:	b083      	sub	sp, #12
   82916:	af00      	add	r7, sp, #0
   82918:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   8291a:	687b      	ldr	r3, [r7, #4]
   8291c:	2201      	movs	r2, #1
   8291e:	605a      	str	r2, [r3, #4]
}
   82920:	bf00      	nop
   82922:	370c      	adds	r7, #12
   82924:	46bd      	mov	sp, r7
   82926:	bc80      	pop	{r7}
   82928:	4770      	bx	lr

0008292a <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   8292a:	b480      	push	{r7}
   8292c:	b083      	sub	sp, #12
   8292e:	af00      	add	r7, sp, #0
   82930:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   82932:	687b      	ldr	r3, [r7, #4]
   82934:	685b      	ldr	r3, [r3, #4]
   82936:	f023 0201 	bic.w	r2, r3, #1
   8293a:	687b      	ldr	r3, [r7, #4]
   8293c:	605a      	str	r2, [r3, #4]
}
   8293e:	bf00      	nop
   82940:	370c      	adds	r7, #12
   82942:	46bd      	mov	sp, r7
   82944:	bc80      	pop	{r7}
   82946:	4770      	bx	lr

00082948 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   82948:	b480      	push	{r7}
   8294a:	b083      	sub	sp, #12
   8294c:	af00      	add	r7, sp, #0
   8294e:	6078      	str	r0, [r7, #4]
   82950:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   82952:	687b      	ldr	r3, [r7, #4]
   82954:	683a      	ldr	r2, [r7, #0]
   82956:	619a      	str	r2, [r3, #24]
}
   82958:	bf00      	nop
   8295a:	370c      	adds	r7, #12
   8295c:	46bd      	mov	sp, r7
   8295e:	bc80      	pop	{r7}
   82960:	4770      	bx	lr

00082962 <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   82962:	b480      	push	{r7}
   82964:	b083      	sub	sp, #12
   82966:	af00      	add	r7, sp, #0
   82968:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   8296a:	687b      	ldr	r3, [r7, #4]
   8296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   8296e:	4618      	mov	r0, r3
   82970:	370c      	adds	r7, #12
   82972:	46bd      	mov	sp, r7
   82974:	bc80      	pop	{r7}
   82976:	4770      	bx	lr

00082978 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   82978:	b480      	push	{r7}
   8297a:	b083      	sub	sp, #12
   8297c:	af00      	add	r7, sp, #0
   8297e:	6078      	str	r0, [r7, #4]
   82980:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   82982:	2201      	movs	r2, #1
   82984:	683b      	ldr	r3, [r7, #0]
   82986:	409a      	lsls	r2, r3
   82988:	687b      	ldr	r3, [r7, #4]
   8298a:	629a      	str	r2, [r3, #40]	; 0x28
}
   8298c:	bf00      	nop
   8298e:	370c      	adds	r7, #12
   82990:	46bd      	mov	sp, r7
   82992:	bc80      	pop	{r7}
   82994:	4770      	bx	lr

00082996 <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   82996:	b480      	push	{r7}
   82998:	b083      	sub	sp, #12
   8299a:	af00      	add	r7, sp, #0
   8299c:	6078      	str	r0, [r7, #4]
   8299e:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   829a0:	2201      	movs	r2, #1
   829a2:	683b      	ldr	r3, [r7, #0]
   829a4:	409a      	lsls	r2, r3
   829a6:	687b      	ldr	r3, [r7, #4]
   829a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
   829aa:	bf00      	nop
   829ac:	370c      	adds	r7, #12
   829ae:	46bd      	mov	sp, r7
   829b0:	bc80      	pop	{r7}
   829b2:	4770      	bx	lr

000829b4 <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   829b4:	b480      	push	{r7}
   829b6:	b085      	sub	sp, #20
   829b8:	af00      	add	r7, sp, #0
   829ba:	60f8      	str	r0, [r7, #12]
   829bc:	60b9      	str	r1, [r7, #8]
   829be:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   829c0:	68f9      	ldr	r1, [r7, #12]
   829c2:	68ba      	ldr	r2, [r7, #8]
   829c4:	4613      	mov	r3, r2
   829c6:	009b      	lsls	r3, r3, #2
   829c8:	4413      	add	r3, r2
   829ca:	00db      	lsls	r3, r3, #3
   829cc:	440b      	add	r3, r1
   829ce:	333c      	adds	r3, #60	; 0x3c
   829d0:	687a      	ldr	r2, [r7, #4]
   829d2:	601a      	str	r2, [r3, #0]
}
   829d4:	bf00      	nop
   829d6:	3714      	adds	r7, #20
   829d8:	46bd      	mov	sp, r7
   829da:	bc80      	pop	{r7}
   829dc:	4770      	bx	lr

000829de <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   829de:	b480      	push	{r7}
   829e0:	b085      	sub	sp, #20
   829e2:	af00      	add	r7, sp, #0
   829e4:	60f8      	str	r0, [r7, #12]
   829e6:	60b9      	str	r1, [r7, #8]
   829e8:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   829ea:	68f9      	ldr	r1, [r7, #12]
   829ec:	68ba      	ldr	r2, [r7, #8]
   829ee:	4613      	mov	r3, r2
   829f0:	009b      	lsls	r3, r3, #2
   829f2:	4413      	add	r3, r2
   829f4:	00db      	lsls	r3, r3, #3
   829f6:	440b      	add	r3, r1
   829f8:	3340      	adds	r3, #64	; 0x40
   829fa:	687a      	ldr	r2, [r7, #4]
   829fc:	601a      	str	r2, [r3, #0]
}
   829fe:	bf00      	nop
   82a00:	3714      	adds	r7, #20
   82a02:	46bd      	mov	sp, r7
   82a04:	bc80      	pop	{r7}
   82a06:	4770      	bx	lr

00082a08 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   82a08:	b480      	push	{r7}
   82a0a:	b085      	sub	sp, #20
   82a0c:	af00      	add	r7, sp, #0
   82a0e:	60f8      	str	r0, [r7, #12]
   82a10:	60b9      	str	r1, [r7, #8]
   82a12:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   82a14:	68f9      	ldr	r1, [r7, #12]
   82a16:	68ba      	ldr	r2, [r7, #8]
   82a18:	4613      	mov	r3, r2
   82a1a:	009b      	lsls	r3, r3, #2
   82a1c:	4413      	add	r3, r2
   82a1e:	00db      	lsls	r3, r3, #3
   82a20:	440b      	add	r3, r1
   82a22:	3344      	adds	r3, #68	; 0x44
   82a24:	687a      	ldr	r2, [r7, #4]
   82a26:	601a      	str	r2, [r3, #0]
}
   82a28:	bf00      	nop
   82a2a:	3714      	adds	r7, #20
   82a2c:	46bd      	mov	sp, r7
   82a2e:	bc80      	pop	{r7}
   82a30:	4770      	bx	lr

00082a32 <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   82a32:	b480      	push	{r7}
   82a34:	b085      	sub	sp, #20
   82a36:	af00      	add	r7, sp, #0
   82a38:	60f8      	str	r0, [r7, #12]
   82a3a:	60b9      	str	r1, [r7, #8]
   82a3c:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   82a3e:	68f9      	ldr	r1, [r7, #12]
   82a40:	68ba      	ldr	r2, [r7, #8]
   82a42:	4613      	mov	r3, r2
   82a44:	009b      	lsls	r3, r3, #2
   82a46:	4413      	add	r3, r2
   82a48:	00db      	lsls	r3, r3, #3
   82a4a:	440b      	add	r3, r1
   82a4c:	3348      	adds	r3, #72	; 0x48
   82a4e:	687a      	ldr	r2, [r7, #4]
   82a50:	601a      	str	r2, [r3, #0]
}
   82a52:	bf00      	nop
   82a54:	3714      	adds	r7, #20
   82a56:	46bd      	mov	sp, r7
   82a58:	bc80      	pop	{r7}
   82a5a:	4770      	bx	lr

00082a5c <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   82a5c:	b480      	push	{r7}
   82a5e:	b085      	sub	sp, #20
   82a60:	af00      	add	r7, sp, #0
   82a62:	60f8      	str	r0, [r7, #12]
   82a64:	60b9      	str	r1, [r7, #8]
   82a66:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   82a68:	68f9      	ldr	r1, [r7, #12]
   82a6a:	68ba      	ldr	r2, [r7, #8]
   82a6c:	4613      	mov	r3, r2
   82a6e:	009b      	lsls	r3, r3, #2
   82a70:	4413      	add	r3, r2
   82a72:	00db      	lsls	r3, r3, #3
   82a74:	440b      	add	r3, r1
   82a76:	334c      	adds	r3, #76	; 0x4c
   82a78:	687a      	ldr	r2, [r7, #4]
   82a7a:	601a      	str	r2, [r3, #0]
}
   82a7c:	bf00      	nop
   82a7e:	3714      	adds	r7, #20
   82a80:	46bd      	mov	sp, r7
   82a82:	bc80      	pop	{r7}
   82a84:	4770      	bx	lr

00082a86 <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   82a86:	b480      	push	{r7}
   82a88:	b085      	sub	sp, #20
   82a8a:	af00      	add	r7, sp, #0
   82a8c:	60f8      	str	r0, [r7, #12]
   82a8e:	60b9      	str	r1, [r7, #8]
   82a90:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   82a92:	68f9      	ldr	r1, [r7, #12]
   82a94:	68ba      	ldr	r2, [r7, #8]
   82a96:	4613      	mov	r3, r2
   82a98:	009b      	lsls	r3, r3, #2
   82a9a:	4413      	add	r3, r2
   82a9c:	00db      	lsls	r3, r3, #3
   82a9e:	440b      	add	r3, r1
   82aa0:	3350      	adds	r3, #80	; 0x50
   82aa2:	687a      	ldr	r2, [r7, #4]
   82aa4:	601a      	str	r2, [r3, #0]
}
   82aa6:	bf00      	nop
   82aa8:	3714      	adds	r7, #20
   82aaa:	46bd      	mov	sp, r7
   82aac:	bc80      	pop	{r7}
   82aae:	4770      	bx	lr

00082ab0 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   82ab0:	b580      	push	{r7, lr}
   82ab2:	b084      	sub	sp, #16
   82ab4:	af00      	add	r7, sp, #0
   82ab6:	60f8      	str	r0, [r7, #12]
   82ab8:	60b9      	str	r1, [r7, #8]
   82aba:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   82abc:	68fb      	ldr	r3, [r7, #12]
   82abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   82ac0:	687b      	ldr	r3, [r7, #4]
   82ac2:	681b      	ldr	r3, [r3, #0]
   82ac4:	461a      	mov	r2, r3
   82ac6:	68b9      	ldr	r1, [r7, #8]
   82ac8:	68f8      	ldr	r0, [r7, #12]
   82aca:	4b10      	ldr	r3, [pc, #64]	; (82b0c <dmac_channel_single_buf_transfer_init+0x5c>)
   82acc:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   82ace:	687b      	ldr	r3, [r7, #4]
   82ad0:	685b      	ldr	r3, [r3, #4]
   82ad2:	461a      	mov	r2, r3
   82ad4:	68b9      	ldr	r1, [r7, #8]
   82ad6:	68f8      	ldr	r0, [r7, #12]
   82ad8:	4b0d      	ldr	r3, [pc, #52]	; (82b10 <dmac_channel_single_buf_transfer_init+0x60>)
   82ada:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   82adc:	2200      	movs	r2, #0
   82ade:	68b9      	ldr	r1, [r7, #8]
   82ae0:	68f8      	ldr	r0, [r7, #12]
   82ae2:	4b0c      	ldr	r3, [pc, #48]	; (82b14 <dmac_channel_single_buf_transfer_init+0x64>)
   82ae4:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   82ae6:	687b      	ldr	r3, [r7, #4]
   82ae8:	689b      	ldr	r3, [r3, #8]
   82aea:	461a      	mov	r2, r3
   82aec:	68b9      	ldr	r1, [r7, #8]
   82aee:	68f8      	ldr	r0, [r7, #12]
   82af0:	4b09      	ldr	r3, [pc, #36]	; (82b18 <dmac_channel_single_buf_transfer_init+0x68>)
   82af2:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   82af4:	687b      	ldr	r3, [r7, #4]
   82af6:	68db      	ldr	r3, [r3, #12]
   82af8:	461a      	mov	r2, r3
   82afa:	68b9      	ldr	r1, [r7, #8]
   82afc:	68f8      	ldr	r0, [r7, #12]
   82afe:	4b07      	ldr	r3, [pc, #28]	; (82b1c <dmac_channel_single_buf_transfer_init+0x6c>)
   82b00:	4798      	blx	r3
}
   82b02:	bf00      	nop
   82b04:	3710      	adds	r7, #16
   82b06:	46bd      	mov	sp, r7
   82b08:	bd80      	pop	{r7, pc}
   82b0a:	bf00      	nop
   82b0c:	000829b5 	.word	0x000829b5
   82b10:	000829df 	.word	0x000829df
   82b14:	00082a09 	.word	0x00082a09
   82b18:	00082a33 	.word	0x00082a33
   82b1c:	00082a5d 	.word	0x00082a5d

00082b20 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82b20:	b480      	push	{r7}
   82b22:	b085      	sub	sp, #20
   82b24:	af00      	add	r7, sp, #0
   82b26:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82b28:	491c      	ldr	r1, [pc, #112]	; (82b9c <pmc_switch_mck_to_pllack+0x7c>)
   82b2a:	4b1c      	ldr	r3, [pc, #112]	; (82b9c <pmc_switch_mck_to_pllack+0x7c>)
   82b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82b32:	687b      	ldr	r3, [r7, #4]
   82b34:	4313      	orrs	r3, r2
   82b36:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82b38:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82b3c:	60fb      	str	r3, [r7, #12]
   82b3e:	e007      	b.n	82b50 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82b40:	68fb      	ldr	r3, [r7, #12]
   82b42:	2b00      	cmp	r3, #0
   82b44:	d101      	bne.n	82b4a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   82b46:	2301      	movs	r3, #1
   82b48:	e023      	b.n	82b92 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   82b4a:	68fb      	ldr	r3, [r7, #12]
   82b4c:	3b01      	subs	r3, #1
   82b4e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82b50:	4b12      	ldr	r3, [pc, #72]	; (82b9c <pmc_switch_mck_to_pllack+0x7c>)
   82b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b54:	f003 0308 	and.w	r3, r3, #8
   82b58:	2b00      	cmp	r3, #0
   82b5a:	d0f1      	beq.n	82b40 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82b5c:	4a0f      	ldr	r2, [pc, #60]	; (82b9c <pmc_switch_mck_to_pllack+0x7c>)
   82b5e:	4b0f      	ldr	r3, [pc, #60]	; (82b9c <pmc_switch_mck_to_pllack+0x7c>)
   82b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82b62:	f023 0303 	bic.w	r3, r3, #3
   82b66:	f043 0302 	orr.w	r3, r3, #2
   82b6a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82b6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82b70:	60fb      	str	r3, [r7, #12]
   82b72:	e007      	b.n	82b84 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82b74:	68fb      	ldr	r3, [r7, #12]
   82b76:	2b00      	cmp	r3, #0
   82b78:	d101      	bne.n	82b7e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   82b7a:	2301      	movs	r3, #1
   82b7c:	e009      	b.n	82b92 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   82b7e:	68fb      	ldr	r3, [r7, #12]
   82b80:	3b01      	subs	r3, #1
   82b82:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82b84:	4b05      	ldr	r3, [pc, #20]	; (82b9c <pmc_switch_mck_to_pllack+0x7c>)
   82b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b88:	f003 0308 	and.w	r3, r3, #8
   82b8c:	2b00      	cmp	r3, #0
   82b8e:	d0f1      	beq.n	82b74 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   82b90:	2300      	movs	r3, #0
}
   82b92:	4618      	mov	r0, r3
   82b94:	3714      	adds	r7, #20
   82b96:	46bd      	mov	sp, r7
   82b98:	bc80      	pop	{r7}
   82b9a:	4770      	bx	lr
   82b9c:	400e0600 	.word	0x400e0600

00082ba0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   82ba0:	b480      	push	{r7}
   82ba2:	b083      	sub	sp, #12
   82ba4:	af00      	add	r7, sp, #0
   82ba6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82ba8:	687b      	ldr	r3, [r7, #4]
   82baa:	2b01      	cmp	r3, #1
   82bac:	d107      	bne.n	82bbe <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   82bae:	4a08      	ldr	r2, [pc, #32]	; (82bd0 <pmc_switch_sclk_to_32kxtal+0x30>)
   82bb0:	4b07      	ldr	r3, [pc, #28]	; (82bd0 <pmc_switch_sclk_to_32kxtal+0x30>)
   82bb2:	689b      	ldr	r3, [r3, #8]
   82bb4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82bb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82bbc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   82bbe:	4b04      	ldr	r3, [pc, #16]	; (82bd0 <pmc_switch_sclk_to_32kxtal+0x30>)
   82bc0:	4a04      	ldr	r2, [pc, #16]	; (82bd4 <pmc_switch_sclk_to_32kxtal+0x34>)
   82bc2:	601a      	str	r2, [r3, #0]
}
   82bc4:	bf00      	nop
   82bc6:	370c      	adds	r7, #12
   82bc8:	46bd      	mov	sp, r7
   82bca:	bc80      	pop	{r7}
   82bcc:	4770      	bx	lr
   82bce:	bf00      	nop
   82bd0:	400e1a10 	.word	0x400e1a10
   82bd4:	a5000008 	.word	0xa5000008

00082bd8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   82bd8:	b480      	push	{r7}
   82bda:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82bdc:	4b09      	ldr	r3, [pc, #36]	; (82c04 <pmc_osc_is_ready_32kxtal+0x2c>)
   82bde:	695b      	ldr	r3, [r3, #20]
   82be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   82be4:	2b00      	cmp	r3, #0
   82be6:	d007      	beq.n	82bf8 <pmc_osc_is_ready_32kxtal+0x20>
   82be8:	4b07      	ldr	r3, [pc, #28]	; (82c08 <pmc_osc_is_ready_32kxtal+0x30>)
   82bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82bf0:	2b00      	cmp	r3, #0
   82bf2:	d001      	beq.n	82bf8 <pmc_osc_is_ready_32kxtal+0x20>
   82bf4:	2301      	movs	r3, #1
   82bf6:	e000      	b.n	82bfa <pmc_osc_is_ready_32kxtal+0x22>
   82bf8:	2300      	movs	r3, #0
}
   82bfa:	4618      	mov	r0, r3
   82bfc:	46bd      	mov	sp, r7
   82bfe:	bc80      	pop	{r7}
   82c00:	4770      	bx	lr
   82c02:	bf00      	nop
   82c04:	400e1a10 	.word	0x400e1a10
   82c08:	400e0600 	.word	0x400e0600

00082c0c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   82c0c:	b480      	push	{r7}
   82c0e:	b083      	sub	sp, #12
   82c10:	af00      	add	r7, sp, #0
   82c12:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   82c14:	4a18      	ldr	r2, [pc, #96]	; (82c78 <pmc_switch_mainck_to_fastrc+0x6c>)
   82c16:	4b18      	ldr	r3, [pc, #96]	; (82c78 <pmc_switch_mainck_to_fastrc+0x6c>)
   82c18:	6a1b      	ldr	r3, [r3, #32]
   82c1a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82c1e:	f043 0308 	orr.w	r3, r3, #8
   82c22:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82c24:	bf00      	nop
   82c26:	4b14      	ldr	r3, [pc, #80]	; (82c78 <pmc_switch_mainck_to_fastrc+0x6c>)
   82c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82c2e:	2b00      	cmp	r3, #0
   82c30:	d0f9      	beq.n	82c26 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82c32:	4911      	ldr	r1, [pc, #68]	; (82c78 <pmc_switch_mainck_to_fastrc+0x6c>)
   82c34:	4b10      	ldr	r3, [pc, #64]	; (82c78 <pmc_switch_mainck_to_fastrc+0x6c>)
   82c36:	6a1b      	ldr	r3, [r3, #32]
   82c38:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   82c40:	687a      	ldr	r2, [r7, #4]
   82c42:	4313      	orrs	r3, r2
   82c44:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82c48:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82c4a:	bf00      	nop
   82c4c:	4b0a      	ldr	r3, [pc, #40]	; (82c78 <pmc_switch_mainck_to_fastrc+0x6c>)
   82c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82c54:	2b00      	cmp	r3, #0
   82c56:	d0f9      	beq.n	82c4c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   82c58:	4a07      	ldr	r2, [pc, #28]	; (82c78 <pmc_switch_mainck_to_fastrc+0x6c>)
   82c5a:	4b07      	ldr	r3, [pc, #28]	; (82c78 <pmc_switch_mainck_to_fastrc+0x6c>)
   82c5c:	6a1b      	ldr	r3, [r3, #32]
   82c5e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   82c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82c66:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82c6a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   82c6c:	bf00      	nop
   82c6e:	370c      	adds	r7, #12
   82c70:	46bd      	mov	sp, r7
   82c72:	bc80      	pop	{r7}
   82c74:	4770      	bx	lr
   82c76:	bf00      	nop
   82c78:	400e0600 	.word	0x400e0600

00082c7c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   82c7c:	b480      	push	{r7}
   82c7e:	b083      	sub	sp, #12
   82c80:	af00      	add	r7, sp, #0
   82c82:	6078      	str	r0, [r7, #4]
   82c84:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82c86:	687b      	ldr	r3, [r7, #4]
   82c88:	2b00      	cmp	r3, #0
   82c8a:	d008      	beq.n	82c9e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82c8c:	4916      	ldr	r1, [pc, #88]	; (82ce8 <pmc_switch_mainck_to_xtal+0x6c>)
   82c8e:	4b16      	ldr	r3, [pc, #88]	; (82ce8 <pmc_switch_mainck_to_xtal+0x6c>)
   82c90:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82c92:	4a16      	ldr	r2, [pc, #88]	; (82cec <pmc_switch_mainck_to_xtal+0x70>)
   82c94:	401a      	ands	r2, r3
   82c96:	4b16      	ldr	r3, [pc, #88]	; (82cf0 <pmc_switch_mainck_to_xtal+0x74>)
   82c98:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82c9a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   82c9c:	e01e      	b.n	82cdc <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82c9e:	4912      	ldr	r1, [pc, #72]	; (82ce8 <pmc_switch_mainck_to_xtal+0x6c>)
   82ca0:	4b11      	ldr	r3, [pc, #68]	; (82ce8 <pmc_switch_mainck_to_xtal+0x6c>)
   82ca2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82ca4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82ca8:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82cac:	683a      	ldr	r2, [r7, #0]
   82cae:	0212      	lsls	r2, r2, #8
   82cb0:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82cb2:	4313      	orrs	r3, r2
   82cb4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82cb8:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82cbc:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82cbe:	bf00      	nop
   82cc0:	4b09      	ldr	r3, [pc, #36]	; (82ce8 <pmc_switch_mainck_to_xtal+0x6c>)
   82cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82cc4:	f003 0301 	and.w	r3, r3, #1
   82cc8:	2b00      	cmp	r3, #0
   82cca:	d0f9      	beq.n	82cc0 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82ccc:	4a06      	ldr	r2, [pc, #24]	; (82ce8 <pmc_switch_mainck_to_xtal+0x6c>)
   82cce:	4b06      	ldr	r3, [pc, #24]	; (82ce8 <pmc_switch_mainck_to_xtal+0x6c>)
   82cd0:	6a1b      	ldr	r3, [r3, #32]
   82cd2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82cda:	6213      	str	r3, [r2, #32]
}
   82cdc:	bf00      	nop
   82cde:	370c      	adds	r7, #12
   82ce0:	46bd      	mov	sp, r7
   82ce2:	bc80      	pop	{r7}
   82ce4:	4770      	bx	lr
   82ce6:	bf00      	nop
   82ce8:	400e0600 	.word	0x400e0600
   82cec:	fec8fffc 	.word	0xfec8fffc
   82cf0:	01370002 	.word	0x01370002

00082cf4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82cf4:	b480      	push	{r7}
   82cf6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82cf8:	4b03      	ldr	r3, [pc, #12]	; (82d08 <pmc_osc_is_ready_mainck+0x14>)
   82cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82d00:	4618      	mov	r0, r3
   82d02:	46bd      	mov	sp, r7
   82d04:	bc80      	pop	{r7}
   82d06:	4770      	bx	lr
   82d08:	400e0600 	.word	0x400e0600

00082d0c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82d0c:	b480      	push	{r7}
   82d0e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82d10:	4b03      	ldr	r3, [pc, #12]	; (82d20 <pmc_disable_pllack+0x14>)
   82d12:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82d16:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   82d18:	bf00      	nop
   82d1a:	46bd      	mov	sp, r7
   82d1c:	bc80      	pop	{r7}
   82d1e:	4770      	bx	lr
   82d20:	400e0600 	.word	0x400e0600

00082d24 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82d24:	b480      	push	{r7}
   82d26:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82d28:	4b03      	ldr	r3, [pc, #12]	; (82d38 <pmc_is_locked_pllack+0x14>)
   82d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82d2c:	f003 0302 	and.w	r3, r3, #2
}
   82d30:	4618      	mov	r0, r3
   82d32:	46bd      	mov	sp, r7
   82d34:	bc80      	pop	{r7}
   82d36:	4770      	bx	lr
   82d38:	400e0600 	.word	0x400e0600

00082d3c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   82d3c:	b480      	push	{r7}
   82d3e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82d40:	4b03      	ldr	r3, [pc, #12]	; (82d50 <pmc_is_locked_upll+0x14>)
   82d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82d48:	4618      	mov	r0, r3
   82d4a:	46bd      	mov	sp, r7
   82d4c:	bc80      	pop	{r7}
   82d4e:	4770      	bx	lr
   82d50:	400e0600 	.word	0x400e0600

00082d54 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82d54:	b480      	push	{r7}
   82d56:	b083      	sub	sp, #12
   82d58:	af00      	add	r7, sp, #0
   82d5a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82d5c:	687b      	ldr	r3, [r7, #4]
   82d5e:	2b2c      	cmp	r3, #44	; 0x2c
   82d60:	d901      	bls.n	82d66 <pmc_enable_periph_clk+0x12>
		return 1;
   82d62:	2301      	movs	r3, #1
   82d64:	e02f      	b.n	82dc6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   82d66:	687b      	ldr	r3, [r7, #4]
   82d68:	2b1f      	cmp	r3, #31
   82d6a:	d813      	bhi.n	82d94 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82d6c:	4b18      	ldr	r3, [pc, #96]	; (82dd0 <pmc_enable_periph_clk+0x7c>)
   82d6e:	699a      	ldr	r2, [r3, #24]
   82d70:	2101      	movs	r1, #1
   82d72:	687b      	ldr	r3, [r7, #4]
   82d74:	fa01 f303 	lsl.w	r3, r1, r3
   82d78:	401a      	ands	r2, r3
   82d7a:	2101      	movs	r1, #1
   82d7c:	687b      	ldr	r3, [r7, #4]
   82d7e:	fa01 f303 	lsl.w	r3, r1, r3
   82d82:	429a      	cmp	r2, r3
   82d84:	d01e      	beq.n	82dc4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   82d86:	4a12      	ldr	r2, [pc, #72]	; (82dd0 <pmc_enable_periph_clk+0x7c>)
   82d88:	2101      	movs	r1, #1
   82d8a:	687b      	ldr	r3, [r7, #4]
   82d8c:	fa01 f303 	lsl.w	r3, r1, r3
   82d90:	6113      	str	r3, [r2, #16]
   82d92:	e017      	b.n	82dc4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   82d94:	687b      	ldr	r3, [r7, #4]
   82d96:	3b20      	subs	r3, #32
   82d98:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82d9a:	4b0d      	ldr	r3, [pc, #52]	; (82dd0 <pmc_enable_periph_clk+0x7c>)
   82d9c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82da0:	2101      	movs	r1, #1
   82da2:	687b      	ldr	r3, [r7, #4]
   82da4:	fa01 f303 	lsl.w	r3, r1, r3
   82da8:	401a      	ands	r2, r3
   82daa:	2101      	movs	r1, #1
   82dac:	687b      	ldr	r3, [r7, #4]
   82dae:	fa01 f303 	lsl.w	r3, r1, r3
   82db2:	429a      	cmp	r2, r3
   82db4:	d006      	beq.n	82dc4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   82db6:	4a06      	ldr	r2, [pc, #24]	; (82dd0 <pmc_enable_periph_clk+0x7c>)
   82db8:	2101      	movs	r1, #1
   82dba:	687b      	ldr	r3, [r7, #4]
   82dbc:	fa01 f303 	lsl.w	r3, r1, r3
   82dc0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   82dc4:	2300      	movs	r3, #0
}
   82dc6:	4618      	mov	r0, r3
   82dc8:	370c      	adds	r7, #12
   82dca:	46bd      	mov	sp, r7
   82dcc:	bc80      	pop	{r7}
   82dce:	4770      	bx	lr
   82dd0:	400e0600 	.word	0x400e0600

00082dd4 <sysclk_enable_peripheral_clock>:
{
   82dd4:	b580      	push	{r7, lr}
   82dd6:	b082      	sub	sp, #8
   82dd8:	af00      	add	r7, sp, #0
   82dda:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82ddc:	6878      	ldr	r0, [r7, #4]
   82dde:	4b03      	ldr	r3, [pc, #12]	; (82dec <sysclk_enable_peripheral_clock+0x18>)
   82de0:	4798      	blx	r3
}
   82de2:	bf00      	nop
   82de4:	3708      	adds	r7, #8
   82de6:	46bd      	mov	sp, r7
   82de8:	bd80      	pop	{r7, pc}
   82dea:	bf00      	nop
   82dec:	00082d55 	.word	0x00082d55

00082df0 <ioport_init>:
{
   82df0:	b580      	push	{r7, lr}
   82df2:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   82df4:	200b      	movs	r0, #11
   82df6:	4b06      	ldr	r3, [pc, #24]	; (82e10 <ioport_init+0x20>)
   82df8:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   82dfa:	200c      	movs	r0, #12
   82dfc:	4b04      	ldr	r3, [pc, #16]	; (82e10 <ioport_init+0x20>)
   82dfe:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   82e00:	200d      	movs	r0, #13
   82e02:	4b03      	ldr	r3, [pc, #12]	; (82e10 <ioport_init+0x20>)
   82e04:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   82e06:	200e      	movs	r0, #14
   82e08:	4b01      	ldr	r3, [pc, #4]	; (82e10 <ioport_init+0x20>)
   82e0a:	4798      	blx	r3
}
   82e0c:	bf00      	nop
   82e0e:	bd80      	pop	{r7, pc}
   82e10:	00082dd5 	.word	0x00082dd5

00082e14 <ioport_disable_pin>:
{
   82e14:	b480      	push	{r7}
   82e16:	b089      	sub	sp, #36	; 0x24
   82e18:	af00      	add	r7, sp, #0
   82e1a:	6078      	str	r0, [r7, #4]
   82e1c:	687b      	ldr	r3, [r7, #4]
   82e1e:	61fb      	str	r3, [r7, #28]
   82e20:	69fb      	ldr	r3, [r7, #28]
   82e22:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82e24:	69bb      	ldr	r3, [r7, #24]
   82e26:	095a      	lsrs	r2, r3, #5
   82e28:	69fb      	ldr	r3, [r7, #28]
   82e2a:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   82e2c:	697b      	ldr	r3, [r7, #20]
   82e2e:	f003 031f 	and.w	r3, r3, #31
   82e32:	2101      	movs	r1, #1
   82e34:	fa01 f303 	lsl.w	r3, r1, r3
   82e38:	613a      	str	r2, [r7, #16]
   82e3a:	60fb      	str	r3, [r7, #12]
   82e3c:	693b      	ldr	r3, [r7, #16]
   82e3e:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82e40:	68bb      	ldr	r3, [r7, #8]
   82e42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82e46:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82e4a:	025b      	lsls	r3, r3, #9
   82e4c:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   82e4e:	68fb      	ldr	r3, [r7, #12]
   82e50:	6053      	str	r3, [r2, #4]
}
   82e52:	bf00      	nop
   82e54:	3724      	adds	r7, #36	; 0x24
   82e56:	46bd      	mov	sp, r7
   82e58:	bc80      	pop	{r7}
   82e5a:	4770      	bx	lr

00082e5c <ioport_set_pin_mode>:
{
   82e5c:	b480      	push	{r7}
   82e5e:	b08d      	sub	sp, #52	; 0x34
   82e60:	af00      	add	r7, sp, #0
   82e62:	6078      	str	r0, [r7, #4]
   82e64:	6039      	str	r1, [r7, #0]
   82e66:	687b      	ldr	r3, [r7, #4]
   82e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   82e6a:	683b      	ldr	r3, [r7, #0]
   82e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   82e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82e70:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   82e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82e74:	095a      	lsrs	r2, r3, #5
   82e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82e78:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   82e7a:	6a3b      	ldr	r3, [r7, #32]
   82e7c:	f003 031f 	and.w	r3, r3, #31
   82e80:	2101      	movs	r1, #1
   82e82:	fa01 f303 	lsl.w	r3, r1, r3
   82e86:	61fa      	str	r2, [r7, #28]
   82e88:	61bb      	str	r3, [r7, #24]
   82e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   82e8c:	617b      	str	r3, [r7, #20]
   82e8e:	69fb      	ldr	r3, [r7, #28]
   82e90:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82e92:	693b      	ldr	r3, [r7, #16]
   82e94:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82e98:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82e9c:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   82e9e:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   82ea0:	697b      	ldr	r3, [r7, #20]
   82ea2:	f003 0308 	and.w	r3, r3, #8
   82ea6:	2b00      	cmp	r3, #0
   82ea8:	d003      	beq.n	82eb2 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   82eaa:	68fb      	ldr	r3, [r7, #12]
   82eac:	69ba      	ldr	r2, [r7, #24]
   82eae:	665a      	str	r2, [r3, #100]	; 0x64
   82eb0:	e002      	b.n	82eb8 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   82eb2:	68fb      	ldr	r3, [r7, #12]
   82eb4:	69ba      	ldr	r2, [r7, #24]
   82eb6:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   82eb8:	697b      	ldr	r3, [r7, #20]
   82eba:	f003 0320 	and.w	r3, r3, #32
   82ebe:	2b00      	cmp	r3, #0
   82ec0:	d003      	beq.n	82eca <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   82ec2:	68fb      	ldr	r3, [r7, #12]
   82ec4:	69ba      	ldr	r2, [r7, #24]
   82ec6:	651a      	str	r2, [r3, #80]	; 0x50
   82ec8:	e002      	b.n	82ed0 <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   82eca:	68fb      	ldr	r3, [r7, #12]
   82ecc:	69ba      	ldr	r2, [r7, #24]
   82ece:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   82ed0:	697b      	ldr	r3, [r7, #20]
   82ed2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   82ed6:	2b00      	cmp	r3, #0
   82ed8:	d003      	beq.n	82ee2 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   82eda:	68fb      	ldr	r3, [r7, #12]
   82edc:	69ba      	ldr	r2, [r7, #24]
   82ede:	621a      	str	r2, [r3, #32]
   82ee0:	e002      	b.n	82ee8 <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   82ee2:	68fb      	ldr	r3, [r7, #12]
   82ee4:	69ba      	ldr	r2, [r7, #24]
   82ee6:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   82ee8:	697b      	ldr	r3, [r7, #20]
   82eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82eee:	2b00      	cmp	r3, #0
   82ef0:	d004      	beq.n	82efc <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   82ef2:	68fb      	ldr	r3, [r7, #12]
   82ef4:	69ba      	ldr	r2, [r7, #24]
   82ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   82efa:	e003      	b.n	82f04 <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   82efc:	68fb      	ldr	r3, [r7, #12]
   82efe:	69ba      	ldr	r2, [r7, #24]
   82f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   82f04:	697b      	ldr	r3, [r7, #20]
   82f06:	f003 0301 	and.w	r3, r3, #1
   82f0a:	2b00      	cmp	r3, #0
   82f0c:	d006      	beq.n	82f1c <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   82f0e:	68fb      	ldr	r3, [r7, #12]
   82f10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82f12:	69bb      	ldr	r3, [r7, #24]
   82f14:	431a      	orrs	r2, r3
   82f16:	68fb      	ldr	r3, [r7, #12]
   82f18:	671a      	str	r2, [r3, #112]	; 0x70
}
   82f1a:	e006      	b.n	82f2a <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   82f1c:	68fb      	ldr	r3, [r7, #12]
   82f1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82f20:	69bb      	ldr	r3, [r7, #24]
   82f22:	43db      	mvns	r3, r3
   82f24:	401a      	ands	r2, r3
   82f26:	68fb      	ldr	r3, [r7, #12]
   82f28:	671a      	str	r2, [r3, #112]	; 0x70
   82f2a:	bf00      	nop
   82f2c:	3734      	adds	r7, #52	; 0x34
   82f2e:	46bd      	mov	sp, r7
   82f30:	bc80      	pop	{r7}
   82f32:	4770      	bx	lr

00082f34 <ioport_set_pin_dir>:
{
   82f34:	b480      	push	{r7}
   82f36:	b08d      	sub	sp, #52	; 0x34
   82f38:	af00      	add	r7, sp, #0
   82f3a:	6078      	str	r0, [r7, #4]
   82f3c:	460b      	mov	r3, r1
   82f3e:	70fb      	strb	r3, [r7, #3]
   82f40:	687b      	ldr	r3, [r7, #4]
   82f42:	62fb      	str	r3, [r7, #44]	; 0x2c
   82f44:	78fb      	ldrb	r3, [r7, #3]
   82f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   82f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82f4c:	627b      	str	r3, [r7, #36]	; 0x24
   82f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82f50:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   82f52:	6a3b      	ldr	r3, [r7, #32]
   82f54:	095b      	lsrs	r3, r3, #5
   82f56:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82f58:	69fb      	ldr	r3, [r7, #28]
   82f5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82f5e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82f62:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82f64:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   82f66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   82f6a:	2b01      	cmp	r3, #1
   82f6c:	d109      	bne.n	82f82 <ioport_set_pin_dir+0x4e>
   82f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82f70:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   82f72:	697b      	ldr	r3, [r7, #20]
   82f74:	f003 031f 	and.w	r3, r3, #31
   82f78:	2201      	movs	r2, #1
   82f7a:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82f7c:	69bb      	ldr	r3, [r7, #24]
   82f7e:	611a      	str	r2, [r3, #16]
   82f80:	e00c      	b.n	82f9c <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   82f82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   82f86:	2b00      	cmp	r3, #0
   82f88:	d108      	bne.n	82f9c <ioport_set_pin_dir+0x68>
   82f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82f8c:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   82f8e:	693b      	ldr	r3, [r7, #16]
   82f90:	f003 031f 	and.w	r3, r3, #31
   82f94:	2201      	movs	r2, #1
   82f96:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   82f98:	69bb      	ldr	r3, [r7, #24]
   82f9a:	615a      	str	r2, [r3, #20]
   82f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82f9e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82fa0:	68fb      	ldr	r3, [r7, #12]
   82fa2:	f003 031f 	and.w	r3, r3, #31
   82fa6:	2201      	movs	r2, #1
   82fa8:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82faa:	69bb      	ldr	r3, [r7, #24]
   82fac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   82fb0:	bf00      	nop
   82fb2:	3734      	adds	r7, #52	; 0x34
   82fb4:	46bd      	mov	sp, r7
   82fb6:	bc80      	pop	{r7}
   82fb8:	4770      	bx	lr

00082fba <ioport_set_pin_level>:
{
   82fba:	b480      	push	{r7}
   82fbc:	b08b      	sub	sp, #44	; 0x2c
   82fbe:	af00      	add	r7, sp, #0
   82fc0:	6078      	str	r0, [r7, #4]
   82fc2:	460b      	mov	r3, r1
   82fc4:	70fb      	strb	r3, [r7, #3]
   82fc6:	687b      	ldr	r3, [r7, #4]
   82fc8:	627b      	str	r3, [r7, #36]	; 0x24
   82fca:	78fb      	ldrb	r3, [r7, #3]
   82fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82fd2:	61fb      	str	r3, [r7, #28]
   82fd4:	69fb      	ldr	r3, [r7, #28]
   82fd6:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82fd8:	69bb      	ldr	r3, [r7, #24]
   82fda:	095b      	lsrs	r3, r3, #5
   82fdc:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82fde:	697b      	ldr	r3, [r7, #20]
   82fe0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82fe4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82fe8:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82fea:	613b      	str	r3, [r7, #16]
	if (level) {
   82fec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82ff0:	2b00      	cmp	r3, #0
   82ff2:	d009      	beq.n	83008 <ioport_set_pin_level+0x4e>
   82ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82ff6:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82ff8:	68fb      	ldr	r3, [r7, #12]
   82ffa:	f003 031f 	and.w	r3, r3, #31
   82ffe:	2201      	movs	r2, #1
   83000:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   83002:	693b      	ldr	r3, [r7, #16]
   83004:	631a      	str	r2, [r3, #48]	; 0x30
}
   83006:	e008      	b.n	8301a <ioport_set_pin_level+0x60>
   83008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8300a:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   8300c:	68bb      	ldr	r3, [r7, #8]
   8300e:	f003 031f 	and.w	r3, r3, #31
   83012:	2201      	movs	r2, #1
   83014:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83016:	693b      	ldr	r3, [r7, #16]
   83018:	635a      	str	r2, [r3, #52]	; 0x34
   8301a:	bf00      	nop
   8301c:	372c      	adds	r7, #44	; 0x2c
   8301e:	46bd      	mov	sp, r7
   83020:	bc80      	pop	{r7}
   83022:	4770      	bx	lr

00083024 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   83024:	b580      	push	{r7, lr}
   83026:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83028:	4ba5      	ldr	r3, [pc, #660]	; (832c0 <board_init+0x29c>)
   8302a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8302e:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   83030:	4ba4      	ldr	r3, [pc, #656]	; (832c4 <board_init+0x2a0>)
   83032:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   83034:	2101      	movs	r1, #1
   83036:	206a      	movs	r0, #106	; 0x6a
   83038:	4ba3      	ldr	r3, [pc, #652]	; (832c8 <board_init+0x2a4>)
   8303a:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   8303c:	2100      	movs	r1, #0
   8303e:	206a      	movs	r0, #106	; 0x6a
   83040:	4ba2      	ldr	r3, [pc, #648]	; (832cc <board_init+0x2a8>)
   83042:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   83044:	2101      	movs	r1, #1
   83046:	2067      	movs	r0, #103	; 0x67
   83048:	4b9f      	ldr	r3, [pc, #636]	; (832c8 <board_init+0x2a4>)
   8304a:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   8304c:	2100      	movs	r1, #0
   8304e:	2067      	movs	r0, #103	; 0x67
   83050:	4b9e      	ldr	r3, [pc, #632]	; (832cc <board_init+0x2a8>)
   83052:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   83054:	2101      	movs	r1, #1
   83056:	2068      	movs	r0, #104	; 0x68
   83058:	4b9b      	ldr	r3, [pc, #620]	; (832c8 <board_init+0x2a4>)
   8305a:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   8305c:	2100      	movs	r1, #0
   8305e:	2068      	movs	r0, #104	; 0x68
   83060:	4b9a      	ldr	r3, [pc, #616]	; (832cc <board_init+0x2a8>)
   83062:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   83064:	2101      	movs	r1, #1
   83066:	2069      	movs	r0, #105	; 0x69
   83068:	4b97      	ldr	r3, [pc, #604]	; (832c8 <board_init+0x2a4>)
   8306a:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   8306c:	2100      	movs	r1, #0
   8306e:	2069      	movs	r0, #105	; 0x69
   83070:	4b96      	ldr	r3, [pc, #600]	; (832cc <board_init+0x2a8>)
   83072:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   83074:	2101      	movs	r1, #1
   83076:	2066      	movs	r0, #102	; 0x66
   83078:	4b93      	ldr	r3, [pc, #588]	; (832c8 <board_init+0x2a4>)
   8307a:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   8307c:	2100      	movs	r1, #0
   8307e:	2066      	movs	r0, #102	; 0x66
   83080:	4b92      	ldr	r3, [pc, #584]	; (832cc <board_init+0x2a8>)
   83082:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   83084:	2100      	movs	r1, #0
   83086:	2060      	movs	r0, #96	; 0x60
   83088:	4b8f      	ldr	r3, [pc, #572]	; (832c8 <board_init+0x2a4>)
   8308a:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   8308c:	2188      	movs	r1, #136	; 0x88
   8308e:	2060      	movs	r0, #96	; 0x60
   83090:	4b8f      	ldr	r3, [pc, #572]	; (832d0 <board_init+0x2ac>)
   83092:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   83094:	2100      	movs	r1, #0
   83096:	2061      	movs	r0, #97	; 0x61
   83098:	4b8b      	ldr	r3, [pc, #556]	; (832c8 <board_init+0x2a4>)
   8309a:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   8309c:	2188      	movs	r1, #136	; 0x88
   8309e:	2061      	movs	r0, #97	; 0x61
   830a0:	4b8b      	ldr	r3, [pc, #556]	; (832d0 <board_init+0x2ac>)
   830a2:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   830a4:	2100      	movs	r1, #0
   830a6:	2062      	movs	r0, #98	; 0x62
   830a8:	4b87      	ldr	r3, [pc, #540]	; (832c8 <board_init+0x2a4>)
   830aa:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   830ac:	2188      	movs	r1, #136	; 0x88
   830ae:	2062      	movs	r0, #98	; 0x62
   830b0:	4b87      	ldr	r3, [pc, #540]	; (832d0 <board_init+0x2ac>)
   830b2:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   830b4:	2100      	movs	r1, #0
   830b6:	2063      	movs	r0, #99	; 0x63
   830b8:	4b83      	ldr	r3, [pc, #524]	; (832c8 <board_init+0x2a4>)
   830ba:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   830bc:	2188      	movs	r1, #136	; 0x88
   830be:	2063      	movs	r0, #99	; 0x63
   830c0:	4b83      	ldr	r3, [pc, #524]	; (832d0 <board_init+0x2ac>)
   830c2:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   830c4:	2100      	movs	r1, #0
   830c6:	2064      	movs	r0, #100	; 0x64
   830c8:	4b7f      	ldr	r3, [pc, #508]	; (832c8 <board_init+0x2a4>)
   830ca:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   830cc:	2188      	movs	r1, #136	; 0x88
   830ce:	2064      	movs	r0, #100	; 0x64
   830d0:	4b7f      	ldr	r3, [pc, #508]	; (832d0 <board_init+0x2ac>)
   830d2:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   830d4:	2100      	movs	r1, #0
   830d6:	2065      	movs	r0, #101	; 0x65
   830d8:	4b7b      	ldr	r3, [pc, #492]	; (832c8 <board_init+0x2a4>)
   830da:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   830dc:	2188      	movs	r1, #136	; 0x88
   830de:	2065      	movs	r0, #101	; 0x65
   830e0:	4b7b      	ldr	r3, [pc, #492]	; (832d0 <board_init+0x2ac>)
   830e2:	4798      	blx	r3
  
    /* Configure Motor pins */
    ioport_set_pin_mode(MOTOR_LEFT_L, IOPORT_MODE_MUX_B);
   830e4:	2101      	movs	r1, #1
   830e6:	2042      	movs	r0, #66	; 0x42
   830e8:	4b79      	ldr	r3, [pc, #484]	; (832d0 <board_init+0x2ac>)
   830ea:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_L);
   830ec:	2042      	movs	r0, #66	; 0x42
   830ee:	4b79      	ldr	r3, [pc, #484]	; (832d4 <board_init+0x2b0>)
   830f0:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_LEFT_H, IOPORT_MODE_MUX_B);
   830f2:	2101      	movs	r1, #1
   830f4:	2043      	movs	r0, #67	; 0x43
   830f6:	4b76      	ldr	r3, [pc, #472]	; (832d0 <board_init+0x2ac>)
   830f8:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_H);
   830fa:	2043      	movs	r0, #67	; 0x43
   830fc:	4b75      	ldr	r3, [pc, #468]	; (832d4 <board_init+0x2b0>)
   830fe:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_L, IOPORT_MODE_MUX_B);
   83100:	2101      	movs	r1, #1
   83102:	2044      	movs	r0, #68	; 0x44
   83104:	4b72      	ldr	r3, [pc, #456]	; (832d0 <board_init+0x2ac>)
   83106:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_L);
   83108:	2044      	movs	r0, #68	; 0x44
   8310a:	4b72      	ldr	r3, [pc, #456]	; (832d4 <board_init+0x2b0>)
   8310c:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_H, IOPORT_MODE_MUX_B);
   8310e:	2101      	movs	r1, #1
   83110:	2045      	movs	r0, #69	; 0x45
   83112:	4b6f      	ldr	r3, [pc, #444]	; (832d0 <board_init+0x2ac>)
   83114:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_H);
   83116:	2045      	movs	r0, #69	; 0x45
   83118:	4b6e      	ldr	r3, [pc, #440]	; (832d4 <board_init+0x2b0>)
   8311a:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_L, IOPORT_MODE_MUX_B);
   8311c:	2101      	movs	r1, #1
   8311e:	2046      	movs	r0, #70	; 0x46
   83120:	4b6b      	ldr	r3, [pc, #428]	; (832d0 <board_init+0x2ac>)
   83122:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_L);
   83124:	2046      	movs	r0, #70	; 0x46
   83126:	4b6b      	ldr	r3, [pc, #428]	; (832d4 <board_init+0x2b0>)
   83128:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_H, IOPORT_MODE_MUX_B);
   8312a:	2101      	movs	r1, #1
   8312c:	2047      	movs	r0, #71	; 0x47
   8312e:	4b68      	ldr	r3, [pc, #416]	; (832d0 <board_init+0x2ac>)
   83130:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_H);
   83132:	2047      	movs	r0, #71	; 0x47
   83134:	4b67      	ldr	r3, [pc, #412]	; (832d4 <board_init+0x2b0>)
   83136:	4798      	blx	r3

    /* Configure Encoder pins */
    ioport_set_pin_mode(ENC_CLK, IOPORT_MODE_MUX_B);
   83138:	2101      	movs	r1, #1
   8313a:	2055      	movs	r0, #85	; 0x55
   8313c:	4b64      	ldr	r3, [pc, #400]	; (832d0 <board_init+0x2ac>)
   8313e:	4798      	blx	r3
    ioport_disable_pin(ENC_CLK);
   83140:	2055      	movs	r0, #85	; 0x55
   83142:	4b64      	ldr	r3, [pc, #400]	; (832d4 <board_init+0x2b0>)
   83144:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LOAD, IOPORT_DIR_OUTPUT);
   83146:	2101      	movs	r1, #1
   83148:	2020      	movs	r0, #32
   8314a:	4b61      	ldr	r3, [pc, #388]	; (832d0 <board_init+0x2ac>)
   8314c:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   8314e:	2101      	movs	r1, #1
   83150:	2020      	movs	r0, #32
   83152:	4b5e      	ldr	r3, [pc, #376]	; (832cc <board_init+0x2a8>)
   83154:	4798      	blx	r3

    ioport_set_pin_mode(ENC_LEFT_A, ENC_LEFT_A_FLAGS);
   83156:	2100      	movs	r1, #0
   83158:	2058      	movs	r0, #88	; 0x58
   8315a:	4b5d      	ldr	r3, [pc, #372]	; (832d0 <board_init+0x2ac>)
   8315c:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LEFT_B, ENC_LEFT_B_FLAGS);
   8315e:	2100      	movs	r1, #0
   83160:	2059      	movs	r0, #89	; 0x59
   83162:	4b5b      	ldr	r3, [pc, #364]	; (832d0 <board_init+0x2ac>)
   83164:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LEFT_C, ENC_LEFT_C_FLAGS);
   83166:	2100      	movs	r1, #0
   83168:	205a      	movs	r0, #90	; 0x5a
   8316a:	4b59      	ldr	r3, [pc, #356]	; (832d0 <board_init+0x2ac>)
   8316c:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LEFT_D, ENC_LEFT_D_FLAGS);
   8316e:	2100      	movs	r1, #0
   83170:	205b      	movs	r0, #91	; 0x5b
   83172:	4b57      	ldr	r3, [pc, #348]	; (832d0 <board_init+0x2ac>)
   83174:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LEFT_E, ENC_LEFT_E_FLAGS);
   83176:	2100      	movs	r1, #0
   83178:	205c      	movs	r0, #92	; 0x5c
   8317a:	4b55      	ldr	r3, [pc, #340]	; (832d0 <board_init+0x2ac>)
   8317c:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LEFT_F, ENC_LEFT_F_FLAGS);
   8317e:	2100      	movs	r1, #0
   83180:	205d      	movs	r0, #93	; 0x5d
   83182:	4b53      	ldr	r3, [pc, #332]	; (832d0 <board_init+0x2ac>)
   83184:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LEFT_G, ENC_LEFT_G_FLAGS);
   83186:	2100      	movs	r1, #0
   83188:	205e      	movs	r0, #94	; 0x5e
   8318a:	4b51      	ldr	r3, [pc, #324]	; (832d0 <board_init+0x2ac>)
   8318c:	4798      	blx	r3
    
    ioport_set_pin_mode(ENC_RIGHT_A, ENC_RIGHT_A_FLAGS);
   8318e:	2100      	movs	r1, #0
   83190:	2050      	movs	r0, #80	; 0x50
   83192:	4b4f      	ldr	r3, [pc, #316]	; (832d0 <board_init+0x2ac>)
   83194:	4798      	blx	r3
    ioport_set_pin_mode(ENC_RIGHT_B, ENC_RIGHT_B_FLAGS);
   83196:	2100      	movs	r1, #0
   83198:	2051      	movs	r0, #81	; 0x51
   8319a:	4b4d      	ldr	r3, [pc, #308]	; (832d0 <board_init+0x2ac>)
   8319c:	4798      	blx	r3
    ioport_set_pin_mode(ENC_RIGHT_C, ENC_RIGHT_C_FLAGS);
   8319e:	2100      	movs	r1, #0
   831a0:	2052      	movs	r0, #82	; 0x52
   831a2:	4b4b      	ldr	r3, [pc, #300]	; (832d0 <board_init+0x2ac>)
   831a4:	4798      	blx	r3
    ioport_set_pin_mode(ENC_RIGHT_D, ENC_RIGHT_D_FLAGS);
   831a6:	2100      	movs	r1, #0
   831a8:	2053      	movs	r0, #83	; 0x53
   831aa:	4b49      	ldr	r3, [pc, #292]	; (832d0 <board_init+0x2ac>)
   831ac:	4798      	blx	r3
    ioport_set_pin_mode(ENC_RIGHT_E, ENC_RIGHT_E_FLAGS);
   831ae:	2100      	movs	r1, #0
   831b0:	2054      	movs	r0, #84	; 0x54
   831b2:	4b47      	ldr	r3, [pc, #284]	; (832d0 <board_init+0x2ac>)
   831b4:	4798      	blx	r3
    ioport_set_pin_mode(ENC_RIGHT_F, ENC_RIGHT_F_FLAGS);
   831b6:	2100      	movs	r1, #0
   831b8:	2056      	movs	r0, #86	; 0x56
   831ba:	4b45      	ldr	r3, [pc, #276]	; (832d0 <board_init+0x2ac>)
   831bc:	4798      	blx	r3
    ioport_set_pin_mode(ENC_RIGHT_G, ENC_RIGHT_G_FLAGS);
   831be:	2100      	movs	r1, #0
   831c0:	2057      	movs	r0, #87	; 0x57
   831c2:	4b43      	ldr	r3, [pc, #268]	; (832d0 <board_init+0x2ac>)
   831c4:	4798      	blx	r3
    
    ioport_set_pin_mode(ENC_REAR_A, ENC_REAR_A_FLAGS);
   831c6:	2100      	movs	r1, #0
   831c8:	2041      	movs	r0, #65	; 0x41
   831ca:	4b41      	ldr	r3, [pc, #260]	; (832d0 <board_init+0x2ac>)
   831cc:	4798      	blx	r3
    ioport_set_pin_mode(ENC_REAR_B, ENC_REAR_B_FLAGS);
   831ce:	2100      	movs	r1, #0
   831d0:	204a      	movs	r0, #74	; 0x4a
   831d2:	4b3f      	ldr	r3, [pc, #252]	; (832d0 <board_init+0x2ac>)
   831d4:	4798      	blx	r3
    ioport_set_pin_mode(ENC_REAR_C, ENC_REAR_C_FLAGS);
   831d6:	2100      	movs	r1, #0
   831d8:	204b      	movs	r0, #75	; 0x4b
   831da:	4b3d      	ldr	r3, [pc, #244]	; (832d0 <board_init+0x2ac>)
   831dc:	4798      	blx	r3
    ioport_set_pin_mode(ENC_REAR_D, ENC_REAR_D_FLAGS);
   831de:	2100      	movs	r1, #0
   831e0:	204c      	movs	r0, #76	; 0x4c
   831e2:	4b3b      	ldr	r3, [pc, #236]	; (832d0 <board_init+0x2ac>)
   831e4:	4798      	blx	r3
    ioport_set_pin_mode(ENC_REAR_E, ENC_REAR_E_FLAGS);
   831e6:	2100      	movs	r1, #0
   831e8:	204d      	movs	r0, #77	; 0x4d
   831ea:	4b39      	ldr	r3, [pc, #228]	; (832d0 <board_init+0x2ac>)
   831ec:	4798      	blx	r3
    ioport_set_pin_mode(ENC_REAR_F, ENC_REAR_F_FLAGS);
   831ee:	2100      	movs	r1, #0
   831f0:	204e      	movs	r0, #78	; 0x4e
   831f2:	4b37      	ldr	r3, [pc, #220]	; (832d0 <board_init+0x2ac>)
   831f4:	4798      	blx	r3
    ioport_set_pin_mode(ENC_REAR_G, ENC_REAR_G_FLAGS);
   831f6:	2100      	movs	r1, #0
   831f8:	204f      	movs	r0, #79	; 0x4f
   831fa:	4b35      	ldr	r3, [pc, #212]	; (832d0 <board_init+0x2ac>)
   831fc:	4798      	blx	r3
  
    /* Configure Raspberry Pi GPIO pins */
    ioport_set_pin_dir(RPI1, IOPORT_DIR_OUTPUT);
   831fe:	2101      	movs	r1, #1
   83200:	2001      	movs	r0, #1
   83202:	4b31      	ldr	r3, [pc, #196]	; (832c8 <board_init+0x2a4>)
   83204:	4798      	blx	r3
    ioport_set_pin_level(RPI1, 1);
   83206:	2101      	movs	r1, #1
   83208:	2001      	movs	r0, #1
   8320a:	4b30      	ldr	r3, [pc, #192]	; (832cc <board_init+0x2a8>)
   8320c:	4798      	blx	r3
    ioport_set_pin_dir(RPI2, IOPORT_DIR_INPUT);
   8320e:	2100      	movs	r1, #0
   83210:	2008      	movs	r0, #8
   83212:	4b2d      	ldr	r3, [pc, #180]	; (832c8 <board_init+0x2a4>)
   83214:	4798      	blx	r3
    ioport_set_pin_dir(RPI3, IOPORT_DIR_INPUT);
   83216:	2100      	movs	r1, #0
   83218:	2009      	movs	r0, #9
   8321a:	4b2b      	ldr	r3, [pc, #172]	; (832c8 <board_init+0x2a4>)
   8321c:	4798      	blx	r3
    ioport_set_pin_dir(RPI4, IOPORT_DIR_INPUT);
   8321e:	2100      	movs	r1, #0
   83220:	2007      	movs	r0, #7
   83222:	4b29      	ldr	r3, [pc, #164]	; (832c8 <board_init+0x2a4>)
   83224:	4798      	blx	r3
    ioport_set_pin_dir(RPI5, IOPORT_DIR_INPUT);
   83226:	2100      	movs	r1, #0
   83228:	2005      	movs	r0, #5
   8322a:	4b27      	ldr	r3, [pc, #156]	; (832c8 <board_init+0x2a4>)
   8322c:	4798      	blx	r3
    ioport_set_pin_dir(RPI6, IOPORT_DIR_INPUT);
   8322e:	2100      	movs	r1, #0
   83230:	2000      	movs	r0, #0
   83232:	4b25      	ldr	r3, [pc, #148]	; (832c8 <board_init+0x2a4>)
   83234:	4798      	blx	r3
  
    /* Configure I2C pins */
    ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   83236:	2100      	movs	r1, #0
   83238:	2011      	movs	r0, #17
   8323a:	4b25      	ldr	r3, [pc, #148]	; (832d0 <board_init+0x2ac>)
   8323c:	4798      	blx	r3
    ioport_disable_pin(I2C0_DATA);
   8323e:	2011      	movs	r0, #17
   83240:	4b24      	ldr	r3, [pc, #144]	; (832d4 <board_init+0x2b0>)
   83242:	4798      	blx	r3
    ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   83244:	2100      	movs	r1, #0
   83246:	2012      	movs	r0, #18
   83248:	4b21      	ldr	r3, [pc, #132]	; (832d0 <board_init+0x2ac>)
   8324a:	4798      	blx	r3
    ioport_disable_pin(I2C0_CLK);
   8324c:	2012      	movs	r0, #18
   8324e:	4b21      	ldr	r3, [pc, #132]	; (832d4 <board_init+0x2b0>)
   83250:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   83252:	2100      	movs	r1, #0
   83254:	200c      	movs	r0, #12
   83256:	4b1e      	ldr	r3, [pc, #120]	; (832d0 <board_init+0x2ac>)
   83258:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   8325a:	200c      	movs	r0, #12
   8325c:	4b1d      	ldr	r3, [pc, #116]	; (832d4 <board_init+0x2b0>)
   8325e:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   83260:	2100      	movs	r1, #0
   83262:	200d      	movs	r0, #13
   83264:	4b1a      	ldr	r3, [pc, #104]	; (832d0 <board_init+0x2ac>)
   83266:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   83268:	200d      	movs	r0, #13
   8326a:	4b1a      	ldr	r3, [pc, #104]	; (832d4 <board_init+0x2b0>)
   8326c:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   8326e:	2100      	movs	r1, #0
   83270:	2010      	movs	r0, #16
   83272:	4b17      	ldr	r3, [pc, #92]	; (832d0 <board_init+0x2ac>)
   83274:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   83276:	2010      	movs	r0, #16
   83278:	4b16      	ldr	r3, [pc, #88]	; (832d4 <board_init+0x2b0>)
   8327a:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   8327c:	2100      	movs	r1, #0
   8327e:	200e      	movs	r0, #14
   83280:	4b13      	ldr	r3, [pc, #76]	; (832d0 <board_init+0x2ac>)
   83282:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   83284:	200e      	movs	r0, #14
   83286:	4b13      	ldr	r3, [pc, #76]	; (832d4 <board_init+0x2b0>)
   83288:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   8328a:	2100      	movs	r1, #0
   8328c:	2014      	movs	r0, #20
   8328e:	4b10      	ldr	r3, [pc, #64]	; (832d0 <board_init+0x2ac>)
   83290:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   83292:	2014      	movs	r0, #20
   83294:	4b0f      	ldr	r3, [pc, #60]	; (832d4 <board_init+0x2b0>)
   83296:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   83298:	2100      	movs	r1, #0
   8329a:	2013      	movs	r0, #19
   8329c:	4b0c      	ldr	r3, [pc, #48]	; (832d0 <board_init+0x2ac>)
   8329e:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   832a0:	2013      	movs	r0, #19
   832a2:	4b0c      	ldr	r3, [pc, #48]	; (832d4 <board_init+0x2b0>)
   832a4:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   832a6:	2100      	movs	r1, #0
   832a8:	2015      	movs	r0, #21
   832aa:	4b09      	ldr	r3, [pc, #36]	; (832d0 <board_init+0x2ac>)
   832ac:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   832ae:	2015      	movs	r0, #21
   832b0:	4b08      	ldr	r3, [pc, #32]	; (832d4 <board_init+0x2b0>)
   832b2:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   832b4:	2100      	movs	r1, #0
   832b6:	2016      	movs	r0, #22
   832b8:	4b05      	ldr	r3, [pc, #20]	; (832d0 <board_init+0x2ac>)
   832ba:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   832bc:	2016      	movs	r0, #22
   832be:	e00b      	b.n	832d8 <board_init+0x2b4>
   832c0:	400e1a50 	.word	0x400e1a50
   832c4:	00082df1 	.word	0x00082df1
   832c8:	00082f35 	.word	0x00082f35
   832cc:	00082fbb 	.word	0x00082fbb
   832d0:	00082e5d 	.word	0x00082e5d
   832d4:	00082e15 	.word	0x00082e15
   832d8:	4b08      	ldr	r3, [pc, #32]	; (832fc <board_init+0x2d8>)
   832da:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   832dc:	2100      	movs	r1, #0
   832de:	2017      	movs	r0, #23
   832e0:	4b07      	ldr	r3, [pc, #28]	; (83300 <board_init+0x2dc>)
   832e2:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   832e4:	2017      	movs	r0, #23
   832e6:	4b05      	ldr	r3, [pc, #20]	; (832fc <board_init+0x2d8>)
   832e8:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   832ea:	2100      	movs	r1, #0
   832ec:	2018      	movs	r0, #24
   832ee:	4b04      	ldr	r3, [pc, #16]	; (83300 <board_init+0x2dc>)
   832f0:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   832f2:	2018      	movs	r0, #24
   832f4:	4b01      	ldr	r3, [pc, #4]	; (832fc <board_init+0x2d8>)
   832f6:	4798      	blx	r3
        .ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
        .ul_clkb = 0,
        .ul_mck = sysclk_get_cpu_hz()
    };
    pwm_init(PWM, &clock_setting);*/
}
   832f8:	bf00      	nop
   832fa:	bd80      	pop	{r7, pc}
   832fc:	00082e15 	.word	0x00082e15
   83300:	00082e5d 	.word	0x00082e5d

00083304 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83304:	b480      	push	{r7}
   83306:	af00      	add	r7, sp, #0
	while (1) {
   83308:	e7fe      	b.n	83308 <Dummy_Handler+0x4>
	...

0008330c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8330c:	b580      	push	{r7, lr}
   8330e:	b082      	sub	sp, #8
   83310:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83312:	4b1e      	ldr	r3, [pc, #120]	; (8338c <Reset_Handler+0x80>)
   83314:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83316:	4b1e      	ldr	r3, [pc, #120]	; (83390 <Reset_Handler+0x84>)
   83318:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8331a:	687a      	ldr	r2, [r7, #4]
   8331c:	683b      	ldr	r3, [r7, #0]
   8331e:	429a      	cmp	r2, r3
   83320:	d00c      	beq.n	8333c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83322:	e007      	b.n	83334 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83324:	683b      	ldr	r3, [r7, #0]
   83326:	1d1a      	adds	r2, r3, #4
   83328:	603a      	str	r2, [r7, #0]
   8332a:	687a      	ldr	r2, [r7, #4]
   8332c:	1d11      	adds	r1, r2, #4
   8332e:	6079      	str	r1, [r7, #4]
   83330:	6812      	ldr	r2, [r2, #0]
   83332:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   83334:	683b      	ldr	r3, [r7, #0]
   83336:	4a17      	ldr	r2, [pc, #92]	; (83394 <Reset_Handler+0x88>)
   83338:	4293      	cmp	r3, r2
   8333a:	d3f3      	bcc.n	83324 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8333c:	4b16      	ldr	r3, [pc, #88]	; (83398 <Reset_Handler+0x8c>)
   8333e:	603b      	str	r3, [r7, #0]
   83340:	e004      	b.n	8334c <Reset_Handler+0x40>
		*pDest++ = 0;
   83342:	683b      	ldr	r3, [r7, #0]
   83344:	1d1a      	adds	r2, r3, #4
   83346:	603a      	str	r2, [r7, #0]
   83348:	2200      	movs	r2, #0
   8334a:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   8334c:	683b      	ldr	r3, [r7, #0]
   8334e:	4a13      	ldr	r2, [pc, #76]	; (8339c <Reset_Handler+0x90>)
   83350:	4293      	cmp	r3, r2
   83352:	d3f6      	bcc.n	83342 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83354:	4b12      	ldr	r3, [pc, #72]	; (833a0 <Reset_Handler+0x94>)
   83356:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83358:	4a12      	ldr	r2, [pc, #72]	; (833a4 <Reset_Handler+0x98>)
   8335a:	687b      	ldr	r3, [r7, #4]
   8335c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83360:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83364:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   83366:	687b      	ldr	r3, [r7, #4]
   83368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8336c:	d309      	bcc.n	83382 <Reset_Handler+0x76>
   8336e:	687b      	ldr	r3, [r7, #4]
   83370:	4a0d      	ldr	r2, [pc, #52]	; (833a8 <Reset_Handler+0x9c>)
   83372:	4293      	cmp	r3, r2
   83374:	d805      	bhi.n	83382 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83376:	4a0b      	ldr	r2, [pc, #44]	; (833a4 <Reset_Handler+0x98>)
   83378:	4b0a      	ldr	r3, [pc, #40]	; (833a4 <Reset_Handler+0x98>)
   8337a:	689b      	ldr	r3, [r3, #8]
   8337c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83380:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83382:	4b0a      	ldr	r3, [pc, #40]	; (833ac <Reset_Handler+0xa0>)
   83384:	4798      	blx	r3

	/* Branch to main function */
	main();
   83386:	4b0a      	ldr	r3, [pc, #40]	; (833b0 <Reset_Handler+0xa4>)
   83388:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8338a:	e7fe      	b.n	8338a <Reset_Handler+0x7e>
   8338c:	000888bc 	.word	0x000888bc
   83390:	20070000 	.word	0x20070000
   83394:	20070b50 	.word	0x20070b50
   83398:	20070b50 	.word	0x20070b50
   8339c:	20070ea0 	.word	0x20070ea0
   833a0:	00080000 	.word	0x00080000
   833a4:	e000ed00 	.word	0xe000ed00
   833a8:	200fffff 	.word	0x200fffff
   833ac:	000843d5 	.word	0x000843d5
   833b0:	00083785 	.word	0x00083785

000833b4 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   833b4:	b480      	push	{r7}
   833b6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   833b8:	4b57      	ldr	r3, [pc, #348]	; (83518 <SystemCoreClockUpdate+0x164>)
   833ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   833bc:	f003 0303 	and.w	r3, r3, #3
   833c0:	2b03      	cmp	r3, #3
   833c2:	f200 808a 	bhi.w	834da <SystemCoreClockUpdate+0x126>
   833c6:	a201      	add	r2, pc, #4	; (adr r2, 833cc <SystemCoreClockUpdate+0x18>)
   833c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   833cc:	000833dd 	.word	0x000833dd
   833d0:	000833fd 	.word	0x000833fd
   833d4:	0008344d 	.word	0x0008344d
   833d8:	0008344d 	.word	0x0008344d
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   833dc:	4b4f      	ldr	r3, [pc, #316]	; (8351c <SystemCoreClockUpdate+0x168>)
   833de:	695b      	ldr	r3, [r3, #20]
   833e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   833e4:	2b00      	cmp	r3, #0
   833e6:	d004      	beq.n	833f2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   833e8:	4b4d      	ldr	r3, [pc, #308]	; (83520 <SystemCoreClockUpdate+0x16c>)
   833ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   833ee:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   833f0:	e073      	b.n	834da <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   833f2:	4b4b      	ldr	r3, [pc, #300]	; (83520 <SystemCoreClockUpdate+0x16c>)
   833f4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   833f8:	601a      	str	r2, [r3, #0]
		break;
   833fa:	e06e      	b.n	834da <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   833fc:	4b46      	ldr	r3, [pc, #280]	; (83518 <SystemCoreClockUpdate+0x164>)
   833fe:	6a1b      	ldr	r3, [r3, #32]
   83400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83404:	2b00      	cmp	r3, #0
   83406:	d003      	beq.n	83410 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83408:	4b45      	ldr	r3, [pc, #276]	; (83520 <SystemCoreClockUpdate+0x16c>)
   8340a:	4a46      	ldr	r2, [pc, #280]	; (83524 <SystemCoreClockUpdate+0x170>)
   8340c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   8340e:	e064      	b.n	834da <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83410:	4b43      	ldr	r3, [pc, #268]	; (83520 <SystemCoreClockUpdate+0x16c>)
   83412:	4a45      	ldr	r2, [pc, #276]	; (83528 <SystemCoreClockUpdate+0x174>)
   83414:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83416:	4b40      	ldr	r3, [pc, #256]	; (83518 <SystemCoreClockUpdate+0x164>)
   83418:	6a1b      	ldr	r3, [r3, #32]
   8341a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8341e:	2b10      	cmp	r3, #16
   83420:	d004      	beq.n	8342c <SystemCoreClockUpdate+0x78>
   83422:	2b20      	cmp	r3, #32
   83424:	d008      	beq.n	83438 <SystemCoreClockUpdate+0x84>
   83426:	2b00      	cmp	r3, #0
   83428:	d00e      	beq.n	83448 <SystemCoreClockUpdate+0x94>
				break;
   8342a:	e00e      	b.n	8344a <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   8342c:	4b3c      	ldr	r3, [pc, #240]	; (83520 <SystemCoreClockUpdate+0x16c>)
   8342e:	681b      	ldr	r3, [r3, #0]
   83430:	005b      	lsls	r3, r3, #1
   83432:	4a3b      	ldr	r2, [pc, #236]	; (83520 <SystemCoreClockUpdate+0x16c>)
   83434:	6013      	str	r3, [r2, #0]
				break;
   83436:	e008      	b.n	8344a <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   83438:	4b39      	ldr	r3, [pc, #228]	; (83520 <SystemCoreClockUpdate+0x16c>)
   8343a:	681a      	ldr	r2, [r3, #0]
   8343c:	4613      	mov	r3, r2
   8343e:	005b      	lsls	r3, r3, #1
   83440:	4413      	add	r3, r2
   83442:	4a37      	ldr	r2, [pc, #220]	; (83520 <SystemCoreClockUpdate+0x16c>)
   83444:	6013      	str	r3, [r2, #0]
				break;
   83446:	e000      	b.n	8344a <SystemCoreClockUpdate+0x96>
				break;
   83448:	bf00      	nop
		break;
   8344a:	e046      	b.n	834da <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8344c:	4b32      	ldr	r3, [pc, #200]	; (83518 <SystemCoreClockUpdate+0x164>)
   8344e:	6a1b      	ldr	r3, [r3, #32]
   83450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83454:	2b00      	cmp	r3, #0
   83456:	d003      	beq.n	83460 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83458:	4b31      	ldr	r3, [pc, #196]	; (83520 <SystemCoreClockUpdate+0x16c>)
   8345a:	4a32      	ldr	r2, [pc, #200]	; (83524 <SystemCoreClockUpdate+0x170>)
   8345c:	601a      	str	r2, [r3, #0]
   8345e:	e01c      	b.n	8349a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83460:	4b2f      	ldr	r3, [pc, #188]	; (83520 <SystemCoreClockUpdate+0x16c>)
   83462:	4a31      	ldr	r2, [pc, #196]	; (83528 <SystemCoreClockUpdate+0x174>)
   83464:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83466:	4b2c      	ldr	r3, [pc, #176]	; (83518 <SystemCoreClockUpdate+0x164>)
   83468:	6a1b      	ldr	r3, [r3, #32]
   8346a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8346e:	2b10      	cmp	r3, #16
   83470:	d004      	beq.n	8347c <SystemCoreClockUpdate+0xc8>
   83472:	2b20      	cmp	r3, #32
   83474:	d008      	beq.n	83488 <SystemCoreClockUpdate+0xd4>
   83476:	2b00      	cmp	r3, #0
   83478:	d00e      	beq.n	83498 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8347a:	e00e      	b.n	8349a <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   8347c:	4b28      	ldr	r3, [pc, #160]	; (83520 <SystemCoreClockUpdate+0x16c>)
   8347e:	681b      	ldr	r3, [r3, #0]
   83480:	005b      	lsls	r3, r3, #1
   83482:	4a27      	ldr	r2, [pc, #156]	; (83520 <SystemCoreClockUpdate+0x16c>)
   83484:	6013      	str	r3, [r2, #0]
				break;
   83486:	e008      	b.n	8349a <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   83488:	4b25      	ldr	r3, [pc, #148]	; (83520 <SystemCoreClockUpdate+0x16c>)
   8348a:	681a      	ldr	r2, [r3, #0]
   8348c:	4613      	mov	r3, r2
   8348e:	005b      	lsls	r3, r3, #1
   83490:	4413      	add	r3, r2
   83492:	4a23      	ldr	r2, [pc, #140]	; (83520 <SystemCoreClockUpdate+0x16c>)
   83494:	6013      	str	r3, [r2, #0]
				break;
   83496:	e000      	b.n	8349a <SystemCoreClockUpdate+0xe6>
				break;
   83498:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8349a:	4b1f      	ldr	r3, [pc, #124]	; (83518 <SystemCoreClockUpdate+0x164>)
   8349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8349e:	f003 0303 	and.w	r3, r3, #3
   834a2:	2b02      	cmp	r3, #2
   834a4:	d115      	bne.n	834d2 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   834a6:	4b1c      	ldr	r3, [pc, #112]	; (83518 <SystemCoreClockUpdate+0x164>)
   834a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   834aa:	0c1b      	lsrs	r3, r3, #16
   834ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   834b0:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   834b2:	4a1b      	ldr	r2, [pc, #108]	; (83520 <SystemCoreClockUpdate+0x16c>)
   834b4:	6812      	ldr	r2, [r2, #0]
   834b6:	fb02 f303 	mul.w	r3, r2, r3
   834ba:	4a19      	ldr	r2, [pc, #100]	; (83520 <SystemCoreClockUpdate+0x16c>)
   834bc:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   834be:	4b16      	ldr	r3, [pc, #88]	; (83518 <SystemCoreClockUpdate+0x164>)
   834c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   834c2:	b2db      	uxtb	r3, r3
   834c4:	4a16      	ldr	r2, [pc, #88]	; (83520 <SystemCoreClockUpdate+0x16c>)
   834c6:	6812      	ldr	r2, [r2, #0]
   834c8:	fbb2 f3f3 	udiv	r3, r2, r3
   834cc:	4a14      	ldr	r2, [pc, #80]	; (83520 <SystemCoreClockUpdate+0x16c>)
   834ce:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   834d0:	e002      	b.n	834d8 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   834d2:	4b13      	ldr	r3, [pc, #76]	; (83520 <SystemCoreClockUpdate+0x16c>)
   834d4:	4a15      	ldr	r2, [pc, #84]	; (8352c <SystemCoreClockUpdate+0x178>)
   834d6:	601a      	str	r2, [r3, #0]
		break;
   834d8:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   834da:	4b0f      	ldr	r3, [pc, #60]	; (83518 <SystemCoreClockUpdate+0x164>)
   834dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   834de:	f003 0370 	and.w	r3, r3, #112	; 0x70
   834e2:	2b70      	cmp	r3, #112	; 0x70
   834e4:	d108      	bne.n	834f8 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   834e6:	4b0e      	ldr	r3, [pc, #56]	; (83520 <SystemCoreClockUpdate+0x16c>)
   834e8:	681b      	ldr	r3, [r3, #0]
   834ea:	4a11      	ldr	r2, [pc, #68]	; (83530 <SystemCoreClockUpdate+0x17c>)
   834ec:	fba2 2303 	umull	r2, r3, r2, r3
   834f0:	085b      	lsrs	r3, r3, #1
   834f2:	4a0b      	ldr	r2, [pc, #44]	; (83520 <SystemCoreClockUpdate+0x16c>)
   834f4:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   834f6:	e00a      	b.n	8350e <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   834f8:	4b07      	ldr	r3, [pc, #28]	; (83518 <SystemCoreClockUpdate+0x164>)
   834fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   834fc:	091b      	lsrs	r3, r3, #4
   834fe:	f003 0307 	and.w	r3, r3, #7
   83502:	4a07      	ldr	r2, [pc, #28]	; (83520 <SystemCoreClockUpdate+0x16c>)
   83504:	6812      	ldr	r2, [r2, #0]
   83506:	fa22 f303 	lsr.w	r3, r2, r3
   8350a:	4a05      	ldr	r2, [pc, #20]	; (83520 <SystemCoreClockUpdate+0x16c>)
   8350c:	6013      	str	r3, [r2, #0]
}
   8350e:	bf00      	nop
   83510:	46bd      	mov	sp, r7
   83512:	bc80      	pop	{r7}
   83514:	4770      	bx	lr
   83516:	bf00      	nop
   83518:	400e0600 	.word	0x400e0600
   8351c:	400e1a10 	.word	0x400e1a10
   83520:	2007019c 	.word	0x2007019c
   83524:	00b71b00 	.word	0x00b71b00
   83528:	003d0900 	.word	0x003d0900
   8352c:	0e4e1c00 	.word	0x0e4e1c00
   83530:	aaaaaaab 	.word	0xaaaaaaab

00083534 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   83534:	b480      	push	{r7}
   83536:	b085      	sub	sp, #20
   83538:	af00      	add	r7, sp, #0
   8353a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   8353c:	4b10      	ldr	r3, [pc, #64]	; (83580 <_sbrk+0x4c>)
   8353e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   83540:	4b10      	ldr	r3, [pc, #64]	; (83584 <_sbrk+0x50>)
   83542:	681b      	ldr	r3, [r3, #0]
   83544:	2b00      	cmp	r3, #0
   83546:	d102      	bne.n	8354e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   83548:	4b0e      	ldr	r3, [pc, #56]	; (83584 <_sbrk+0x50>)
   8354a:	4a0f      	ldr	r2, [pc, #60]	; (83588 <_sbrk+0x54>)
   8354c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8354e:	4b0d      	ldr	r3, [pc, #52]	; (83584 <_sbrk+0x50>)
   83550:	681b      	ldr	r3, [r3, #0]
   83552:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   83554:	68ba      	ldr	r2, [r7, #8]
   83556:	687b      	ldr	r3, [r7, #4]
   83558:	441a      	add	r2, r3
   8355a:	68fb      	ldr	r3, [r7, #12]
   8355c:	429a      	cmp	r2, r3
   8355e:	dd02      	ble.n	83566 <_sbrk+0x32>
		return (caddr_t) -1;	
   83560:	f04f 33ff 	mov.w	r3, #4294967295
   83564:	e006      	b.n	83574 <_sbrk+0x40>
	}

	heap += incr;
   83566:	4b07      	ldr	r3, [pc, #28]	; (83584 <_sbrk+0x50>)
   83568:	681a      	ldr	r2, [r3, #0]
   8356a:	687b      	ldr	r3, [r7, #4]
   8356c:	4413      	add	r3, r2
   8356e:	4a05      	ldr	r2, [pc, #20]	; (83584 <_sbrk+0x50>)
   83570:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   83572:	68bb      	ldr	r3, [r7, #8]
}
   83574:	4618      	mov	r0, r3
   83576:	3714      	adds	r7, #20
   83578:	46bd      	mov	sp, r7
   8357a:	bc80      	pop	{r7}
   8357c:	4770      	bx	lr
   8357e:	bf00      	nop
   83580:	20087ffc 	.word	0x20087ffc
   83584:	20070dcc 	.word	0x20070dcc
   83588:	20072ea0 	.word	0x20072ea0

0008358c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   8358c:	b480      	push	{r7}
   8358e:	b083      	sub	sp, #12
   83590:	af00      	add	r7, sp, #0
   83592:	4603      	mov	r3, r0
   83594:	6039      	str	r1, [r7, #0]
   83596:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   83598:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8359c:	2b00      	cmp	r3, #0
   8359e:	da0b      	bge.n	835b8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   835a0:	490d      	ldr	r1, [pc, #52]	; (835d8 <NVIC_SetPriority+0x4c>)
   835a2:	79fb      	ldrb	r3, [r7, #7]
   835a4:	f003 030f 	and.w	r3, r3, #15
   835a8:	3b04      	subs	r3, #4
   835aa:	683a      	ldr	r2, [r7, #0]
   835ac:	b2d2      	uxtb	r2, r2
   835ae:	0112      	lsls	r2, r2, #4
   835b0:	b2d2      	uxtb	r2, r2
   835b2:	440b      	add	r3, r1
   835b4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   835b6:	e009      	b.n	835cc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   835b8:	4908      	ldr	r1, [pc, #32]	; (835dc <NVIC_SetPriority+0x50>)
   835ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
   835be:	683a      	ldr	r2, [r7, #0]
   835c0:	b2d2      	uxtb	r2, r2
   835c2:	0112      	lsls	r2, r2, #4
   835c4:	b2d2      	uxtb	r2, r2
   835c6:	440b      	add	r3, r1
   835c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   835cc:	bf00      	nop
   835ce:	370c      	adds	r7, #12
   835d0:	46bd      	mov	sp, r7
   835d2:	bc80      	pop	{r7}
   835d4:	4770      	bx	lr
   835d6:	bf00      	nop
   835d8:	e000ed00 	.word	0xe000ed00
   835dc:	e000e100 	.word	0xe000e100

000835e0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   835e0:	b580      	push	{r7, lr}
   835e2:	b082      	sub	sp, #8
   835e4:	af00      	add	r7, sp, #0
   835e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   835e8:	687b      	ldr	r3, [r7, #4]
   835ea:	3b01      	subs	r3, #1
   835ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   835f0:	d301      	bcc.n	835f6 <SysTick_Config+0x16>
   835f2:	2301      	movs	r3, #1
   835f4:	e00f      	b.n	83616 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   835f6:	4a0a      	ldr	r2, [pc, #40]	; (83620 <SysTick_Config+0x40>)
   835f8:	687b      	ldr	r3, [r7, #4]
   835fa:	3b01      	subs	r3, #1
   835fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   835fe:	210f      	movs	r1, #15
   83600:	f04f 30ff 	mov.w	r0, #4294967295
   83604:	4b07      	ldr	r3, [pc, #28]	; (83624 <SysTick_Config+0x44>)
   83606:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   83608:	4b05      	ldr	r3, [pc, #20]	; (83620 <SysTick_Config+0x40>)
   8360a:	2200      	movs	r2, #0
   8360c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   8360e:	4b04      	ldr	r3, [pc, #16]	; (83620 <SysTick_Config+0x40>)
   83610:	2207      	movs	r2, #7
   83612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   83614:	2300      	movs	r3, #0
}
   83616:	4618      	mov	r0, r3
   83618:	3708      	adds	r7, #8
   8361a:	46bd      	mov	sp, r7
   8361c:	bd80      	pop	{r7, pc}
   8361e:	bf00      	nop
   83620:	e000e010 	.word	0xe000e010
   83624:	0008358d 	.word	0x0008358d

00083628 <osc_get_rate>:
{
   83628:	b480      	push	{r7}
   8362a:	b083      	sub	sp, #12
   8362c:	af00      	add	r7, sp, #0
   8362e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83630:	687b      	ldr	r3, [r7, #4]
   83632:	2b07      	cmp	r3, #7
   83634:	d825      	bhi.n	83682 <osc_get_rate+0x5a>
   83636:	a201      	add	r2, pc, #4	; (adr r2, 8363c <osc_get_rate+0x14>)
   83638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8363c:	0008365d 	.word	0x0008365d
   83640:	00083663 	.word	0x00083663
   83644:	00083669 	.word	0x00083669
   83648:	0008366f 	.word	0x0008366f
   8364c:	00083673 	.word	0x00083673
   83650:	00083677 	.word	0x00083677
   83654:	0008367b 	.word	0x0008367b
   83658:	0008367f 	.word	0x0008367f
		return OSC_SLCK_32K_RC_HZ;
   8365c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83660:	e010      	b.n	83684 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   83662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83666:	e00d      	b.n	83684 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   83668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8366c:	e00a      	b.n	83684 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   8366e:	4b08      	ldr	r3, [pc, #32]	; (83690 <osc_get_rate+0x68>)
   83670:	e008      	b.n	83684 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   83672:	4b08      	ldr	r3, [pc, #32]	; (83694 <osc_get_rate+0x6c>)
   83674:	e006      	b.n	83684 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   83676:	4b08      	ldr	r3, [pc, #32]	; (83698 <osc_get_rate+0x70>)
   83678:	e004      	b.n	83684 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8367a:	4b07      	ldr	r3, [pc, #28]	; (83698 <osc_get_rate+0x70>)
   8367c:	e002      	b.n	83684 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   8367e:	4b06      	ldr	r3, [pc, #24]	; (83698 <osc_get_rate+0x70>)
   83680:	e000      	b.n	83684 <osc_get_rate+0x5c>
	return 0;
   83682:	2300      	movs	r3, #0
}
   83684:	4618      	mov	r0, r3
   83686:	370c      	adds	r7, #12
   83688:	46bd      	mov	sp, r7
   8368a:	bc80      	pop	{r7}
   8368c:	4770      	bx	lr
   8368e:	bf00      	nop
   83690:	003d0900 	.word	0x003d0900
   83694:	007a1200 	.word	0x007a1200
   83698:	00b71b00 	.word	0x00b71b00

0008369c <sysclk_get_main_hz>:
{
   8369c:	b580      	push	{r7, lr}
   8369e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   836a0:	2006      	movs	r0, #6
   836a2:	4b04      	ldr	r3, [pc, #16]	; (836b4 <sysclk_get_main_hz+0x18>)
   836a4:	4798      	blx	r3
   836a6:	4602      	mov	r2, r0
   836a8:	4613      	mov	r3, r2
   836aa:	00db      	lsls	r3, r3, #3
   836ac:	1a9b      	subs	r3, r3, r2
   836ae:	005b      	lsls	r3, r3, #1
}
   836b0:	4618      	mov	r0, r3
   836b2:	bd80      	pop	{r7, pc}
   836b4:	00083629 	.word	0x00083629

000836b8 <sysclk_get_cpu_hz>:
{
   836b8:	b580      	push	{r7, lr}
   836ba:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   836bc:	4b02      	ldr	r3, [pc, #8]	; (836c8 <sysclk_get_cpu_hz+0x10>)
   836be:	4798      	blx	r3
   836c0:	4603      	mov	r3, r0
   836c2:	085b      	lsrs	r3, r3, #1
}
   836c4:	4618      	mov	r0, r3
   836c6:	bd80      	pop	{r7, pc}
   836c8:	0008369d 	.word	0x0008369d

000836cc <ioport_set_pin_level>:
{
   836cc:	b480      	push	{r7}
   836ce:	b08b      	sub	sp, #44	; 0x2c
   836d0:	af00      	add	r7, sp, #0
   836d2:	6078      	str	r0, [r7, #4]
   836d4:	460b      	mov	r3, r1
   836d6:	70fb      	strb	r3, [r7, #3]
   836d8:	687b      	ldr	r3, [r7, #4]
   836da:	627b      	str	r3, [r7, #36]	; 0x24
   836dc:	78fb      	ldrb	r3, [r7, #3]
   836de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   836e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   836e4:	61fb      	str	r3, [r7, #28]
   836e6:	69fb      	ldr	r3, [r7, #28]
   836e8:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   836ea:	69bb      	ldr	r3, [r7, #24]
   836ec:	095b      	lsrs	r3, r3, #5
   836ee:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   836f0:	697b      	ldr	r3, [r7, #20]
   836f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   836f6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   836fa:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   836fc:	613b      	str	r3, [r7, #16]
	if (level) {
   836fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83702:	2b00      	cmp	r3, #0
   83704:	d009      	beq.n	8371a <ioport_set_pin_level+0x4e>
   83706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83708:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8370a:	68fb      	ldr	r3, [r7, #12]
   8370c:	f003 031f 	and.w	r3, r3, #31
   83710:	2201      	movs	r2, #1
   83712:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   83714:	693b      	ldr	r3, [r7, #16]
   83716:	631a      	str	r2, [r3, #48]	; 0x30
}
   83718:	e008      	b.n	8372c <ioport_set_pin_level+0x60>
   8371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8371c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   8371e:	68bb      	ldr	r3, [r7, #8]
   83720:	f003 031f 	and.w	r3, r3, #31
   83724:	2201      	movs	r2, #1
   83726:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83728:	693b      	ldr	r3, [r7, #16]
   8372a:	635a      	str	r2, [r3, #52]	; 0x34
   8372c:	bf00      	nop
   8372e:	372c      	adds	r7, #44	; 0x2c
   83730:	46bd      	mov	sp, r7
   83732:	bc80      	pop	{r7}
   83734:	4770      	bx	lr

00083736 <ioport_get_pin_level>:
{
   83736:	b480      	push	{r7}
   83738:	b089      	sub	sp, #36	; 0x24
   8373a:	af00      	add	r7, sp, #0
   8373c:	6078      	str	r0, [r7, #4]
   8373e:	687b      	ldr	r3, [r7, #4]
   83740:	61fb      	str	r3, [r7, #28]
   83742:	69fb      	ldr	r3, [r7, #28]
   83744:	61bb      	str	r3, [r7, #24]
   83746:	69bb      	ldr	r3, [r7, #24]
   83748:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   8374a:	697b      	ldr	r3, [r7, #20]
   8374c:	095b      	lsrs	r3, r3, #5
   8374e:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83750:	693b      	ldr	r3, [r7, #16]
   83752:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83756:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8375a:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8375c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   8375e:	69fb      	ldr	r3, [r7, #28]
   83760:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83762:	68fb      	ldr	r3, [r7, #12]
   83764:	f003 031f 	and.w	r3, r3, #31
   83768:	2101      	movs	r1, #1
   8376a:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8376e:	4013      	ands	r3, r2
   83770:	2b00      	cmp	r3, #0
   83772:	bf14      	ite	ne
   83774:	2301      	movne	r3, #1
   83776:	2300      	moveq	r3, #0
   83778:	b2db      	uxtb	r3, r3
}
   8377a:	4618      	mov	r0, r3
   8377c:	3724      	adds	r7, #36	; 0x24
   8377e:	46bd      	mov	sp, r7
   83780:	bc80      	pop	{r7}
   83782:	4770      	bx	lr

00083784 <main>:

void noOS_bootup_sequence(void);
void set_led(ioport_pin_t pin, Bool level);

int main(void)
{
   83784:	b580      	push	{r7, lr}
   83786:	b082      	sub	sp, #8
   83788:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   8378a:	4b19      	ldr	r3, [pc, #100]	; (837f0 <main+0x6c>)
   8378c:	4798      	blx	r3
    board_init();
   8378e:	4b19      	ldr	r3, [pc, #100]	; (837f4 <main+0x70>)
   83790:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   83792:	4b19      	ldr	r3, [pc, #100]	; (837f8 <main+0x74>)
   83794:	4798      	blx	r3
   83796:	4602      	mov	r2, r0
   83798:	4b18      	ldr	r3, [pc, #96]	; (837fc <main+0x78>)
   8379a:	fba3 2302 	umull	r2, r3, r3, r2
   8379e:	099b      	lsrs	r3, r3, #6
   837a0:	4618      	mov	r0, r3
   837a2:	4b17      	ldr	r3, [pc, #92]	; (83800 <main+0x7c>)
   837a4:	4798      	blx	r3
    
    spi_init();
   837a6:	4b17      	ldr	r3, [pc, #92]	; (83804 <main+0x80>)
   837a8:	4798      	blx	r3
    
    compass_init();
   837aa:	4b17      	ldr	r3, [pc, #92]	; (83808 <main+0x84>)
   837ac:	4798      	blx	r3
    lcd_init();
   837ae:	4b17      	ldr	r3, [pc, #92]	; (8380c <main+0x88>)
   837b0:	4798      	blx	r3
    
    noOS_bootup_sequence();
   837b2:	4b17      	ldr	r3, [pc, #92]	; (83810 <main+0x8c>)
   837b4:	4798      	blx	r3

    while (1)
    {
        update_comm();
   837b6:	4b17      	ldr	r3, [pc, #92]	; (83814 <main+0x90>)
   837b8:	4798      	blx	r3
        update_heartbeat();
   837ba:	4b17      	ldr	r3, [pc, #92]	; (83818 <main+0x94>)
   837bc:	4798      	blx	r3
        //check_battery();
        
        if (stm.ibit.heartbeat)
   837be:	4b17      	ldr	r3, [pc, #92]	; (8381c <main+0x98>)
   837c0:	781b      	ldrb	r3, [r3, #0]
   837c2:	f003 0301 	and.w	r3, r3, #1
   837c6:	b2db      	uxtb	r3, r3
   837c8:	2b00      	cmp	r3, #0
   837ca:	d004      	beq.n	837d6 <main+0x52>
        {
            set_led(LED_M2, 1);
   837cc:	2101      	movs	r1, #1
   837ce:	2068      	movs	r0, #104	; 0x68
   837d0:	4b13      	ldr	r3, [pc, #76]	; (83820 <main+0x9c>)
   837d2:	4798      	blx	r3
   837d4:	e003      	b.n	837de <main+0x5a>
        }
        else
        {
            set_led(LED_M2, 0);
   837d6:	2100      	movs	r1, #0
   837d8:	2068      	movs	r0, #104	; 0x68
   837da:	4b11      	ldr	r3, [pc, #68]	; (83820 <main+0x9c>)
   837dc:	4798      	blx	r3
        }
        
        act_event = button_events();
   837de:	4b11      	ldr	r3, [pc, #68]	; (83824 <main+0xa0>)
   837e0:	4798      	blx	r3
   837e2:	4603      	mov	r3, r0
   837e4:	71fb      	strb	r3, [r7, #7]
        
        menu(act_event);
   837e6:	79fb      	ldrb	r3, [r7, #7]
   837e8:	4618      	mov	r0, r3
   837ea:	4b0f      	ldr	r3, [pc, #60]	; (83828 <main+0xa4>)
   837ec:	4798      	blx	r3
        update_comm();
   837ee:	e7e2      	b.n	837b6 <main+0x32>
   837f0:	00082861 	.word	0x00082861
   837f4:	00083025 	.word	0x00083025
   837f8:	000836b9 	.word	0x000836b9
   837fc:	10624dd3 	.word	0x10624dd3
   83800:	000835e1 	.word	0x000835e1
   83804:	000805fd 	.word	0x000805fd
   83808:	00080edd 	.word	0x00080edd
   8380c:	0008111d 	.word	0x0008111d
   83810:	0008382d 	.word	0x0008382d
   83814:	000823d5 	.word	0x000823d5
   83818:	000824c9 	.word	0x000824c9
   8381c:	20070e10 	.word	0x20070e10
   83820:	000839e1 	.word	0x000839e1
   83824:	000820f1 	.word	0x000820f1
   83828:	00081761 	.word	0x00081761

0008382c <noOS_bootup_sequence>:
    }
}

void noOS_bootup_sequence(void)
{
   8382c:	b580      	push	{r7, lr}
   8382e:	b082      	sub	sp, #8
   83830:	af00      	add	r7, sp, #0
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   83832:	e072      	b.n	8391a <noOS_bootup_sequence+0xee>
    {
        if (getTicks() >= (ticks_blink_update + 800))
   83834:	4b5e      	ldr	r3, [pc, #376]	; (839b0 <noOS_bootup_sequence+0x184>)
   83836:	4798      	blx	r3
   83838:	4602      	mov	r2, r0
   8383a:	4b5e      	ldr	r3, [pc, #376]	; (839b4 <noOS_bootup_sequence+0x188>)
   8383c:	681b      	ldr	r3, [r3, #0]
   8383e:	f503 7348 	add.w	r3, r3, #800	; 0x320
   83842:	429a      	cmp	r2, r3
   83844:	d31a      	bcc.n	8387c <noOS_bootup_sequence+0x50>
        {
            ticks_blink_update = getTicks();
   83846:	4b5a      	ldr	r3, [pc, #360]	; (839b0 <noOS_bootup_sequence+0x184>)
   83848:	4798      	blx	r3
   8384a:	4602      	mov	r2, r0
   8384c:	4b59      	ldr	r3, [pc, #356]	; (839b4 <noOS_bootup_sequence+0x188>)
   8384e:	601a      	str	r2, [r3, #0]
            
            if (blink_level)
   83850:	4b59      	ldr	r3, [pc, #356]	; (839b8 <noOS_bootup_sequence+0x18c>)
   83852:	781b      	ldrb	r3, [r3, #0]
   83854:	2b00      	cmp	r3, #0
   83856:	d003      	beq.n	83860 <noOS_bootup_sequence+0x34>
            {
                blink_level = 0;
   83858:	4b57      	ldr	r3, [pc, #348]	; (839b8 <noOS_bootup_sequence+0x18c>)
   8385a:	2200      	movs	r2, #0
   8385c:	701a      	strb	r2, [r3, #0]
   8385e:	e002      	b.n	83866 <noOS_bootup_sequence+0x3a>
            }
            else
            {
                blink_level = 1;
   83860:	4b55      	ldr	r3, [pc, #340]	; (839b8 <noOS_bootup_sequence+0x18c>)
   83862:	2201      	movs	r2, #1
   83864:	701a      	strb	r2, [r3, #0]
            }
            
            ioport_set_pin_level(LED_BAT, blink_level);
   83866:	4b54      	ldr	r3, [pc, #336]	; (839b8 <noOS_bootup_sequence+0x18c>)
   83868:	781b      	ldrb	r3, [r3, #0]
   8386a:	2b00      	cmp	r3, #0
   8386c:	bf14      	ite	ne
   8386e:	2301      	movne	r3, #1
   83870:	2300      	moveq	r3, #0
   83872:	b2db      	uxtb	r3, r3
   83874:	4619      	mov	r1, r3
   83876:	2066      	movs	r0, #102	; 0x66
   83878:	4b50      	ldr	r3, [pc, #320]	; (839bc <noOS_bootup_sequence+0x190>)
   8387a:	4798      	blx	r3
        }
        
        if (getTicks() >= (ticks_dot_update + 500))
   8387c:	4b4c      	ldr	r3, [pc, #304]	; (839b0 <noOS_bootup_sequence+0x184>)
   8387e:	4798      	blx	r3
   83880:	4602      	mov	r2, r0
   83882:	4b4f      	ldr	r3, [pc, #316]	; (839c0 <noOS_bootup_sequence+0x194>)
   83884:	681b      	ldr	r3, [r3, #0]
   83886:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   8388a:	429a      	cmp	r2, r3
   8388c:	d315      	bcc.n	838ba <noOS_bootup_sequence+0x8e>
        {
            ticks_dot_update = getTicks();
   8388e:	4b48      	ldr	r3, [pc, #288]	; (839b0 <noOS_bootup_sequence+0x184>)
   83890:	4798      	blx	r3
   83892:	4602      	mov	r2, r0
   83894:	4b4a      	ldr	r3, [pc, #296]	; (839c0 <noOS_bootup_sequence+0x194>)
   83896:	601a      	str	r2, [r3, #0]
            
            if (dots < 3)
   83898:	4b4a      	ldr	r3, [pc, #296]	; (839c4 <noOS_bootup_sequence+0x198>)
   8389a:	781b      	ldrb	r3, [r3, #0]
   8389c:	2b02      	cmp	r3, #2
   8389e:	d806      	bhi.n	838ae <noOS_bootup_sequence+0x82>
            {
                dots++;
   838a0:	4b48      	ldr	r3, [pc, #288]	; (839c4 <noOS_bootup_sequence+0x198>)
   838a2:	781b      	ldrb	r3, [r3, #0]
   838a4:	3301      	adds	r3, #1
   838a6:	b2da      	uxtb	r2, r3
   838a8:	4b46      	ldr	r3, [pc, #280]	; (839c4 <noOS_bootup_sequence+0x198>)
   838aa:	701a      	strb	r2, [r3, #0]
   838ac:	e002      	b.n	838b4 <noOS_bootup_sequence+0x88>
            }
            else
            {
                dots = 0;
   838ae:	4b45      	ldr	r3, [pc, #276]	; (839c4 <noOS_bootup_sequence+0x198>)
   838b0:	2200      	movs	r2, #0
   838b2:	701a      	strb	r2, [r3, #0]
            }
            
            update_dots = 1;
   838b4:	4b44      	ldr	r3, [pc, #272]	; (839c8 <noOS_bootup_sequence+0x19c>)
   838b6:	2201      	movs	r2, #1
   838b8:	701a      	strb	r2, [r3, #0]
        }
        
        if (update_dots)
   838ba:	4b43      	ldr	r3, [pc, #268]	; (839c8 <noOS_bootup_sequence+0x19c>)
   838bc:	781b      	ldrb	r3, [r3, #0]
   838be:	2b00      	cmp	r3, #0
   838c0:	d02b      	beq.n	8391a <noOS_bootup_sequence+0xee>
        {
            update_dots = 0;
   838c2:	4b41      	ldr	r3, [pc, #260]	; (839c8 <noOS_bootup_sequence+0x19c>)
   838c4:	2200      	movs	r2, #0
   838c6:	701a      	strb	r2, [r3, #0]
            
            switch (dots)
   838c8:	4b3e      	ldr	r3, [pc, #248]	; (839c4 <noOS_bootup_sequence+0x198>)
   838ca:	781b      	ldrb	r3, [r3, #0]
   838cc:	2b03      	cmp	r3, #3
   838ce:	d823      	bhi.n	83918 <noOS_bootup_sequence+0xec>
   838d0:	a201      	add	r2, pc, #4	; (adr r2, 838d8 <noOS_bootup_sequence+0xac>)
   838d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   838d6:	bf00      	nop
   838d8:	000838e9 	.word	0x000838e9
   838dc:	000838f5 	.word	0x000838f5
   838e0:	00083901 	.word	0x00083901
   838e4:	0008390d 	.word	0x0008390d
            {
                case 0:
                lcd_print_s(2, 2, "booting noOS   ");
   838e8:	4a38      	ldr	r2, [pc, #224]	; (839cc <noOS_bootup_sequence+0x1a0>)
   838ea:	2102      	movs	r1, #2
   838ec:	2002      	movs	r0, #2
   838ee:	4b38      	ldr	r3, [pc, #224]	; (839d0 <noOS_bootup_sequence+0x1a4>)
   838f0:	4798      	blx	r3
                break;
   838f2:	e012      	b.n	8391a <noOS_bootup_sequence+0xee>
                case 1:
                lcd_print_s(2, 14, ".");
   838f4:	4a37      	ldr	r2, [pc, #220]	; (839d4 <noOS_bootup_sequence+0x1a8>)
   838f6:	210e      	movs	r1, #14
   838f8:	2002      	movs	r0, #2
   838fa:	4b35      	ldr	r3, [pc, #212]	; (839d0 <noOS_bootup_sequence+0x1a4>)
   838fc:	4798      	blx	r3
                break;
   838fe:	e00c      	b.n	8391a <noOS_bootup_sequence+0xee>
                case 2:
                lcd_print_s(2, 15, ".");
   83900:	4a34      	ldr	r2, [pc, #208]	; (839d4 <noOS_bootup_sequence+0x1a8>)
   83902:	210f      	movs	r1, #15
   83904:	2002      	movs	r0, #2
   83906:	4b32      	ldr	r3, [pc, #200]	; (839d0 <noOS_bootup_sequence+0x1a4>)
   83908:	4798      	blx	r3
                break;
   8390a:	e006      	b.n	8391a <noOS_bootup_sequence+0xee>
                case 3:
                lcd_print_s(2, 16, ".");
   8390c:	4a31      	ldr	r2, [pc, #196]	; (839d4 <noOS_bootup_sequence+0x1a8>)
   8390e:	2110      	movs	r1, #16
   83910:	2002      	movs	r0, #2
   83912:	4b2f      	ldr	r3, [pc, #188]	; (839d0 <noOS_bootup_sequence+0x1a4>)
   83914:	4798      	blx	r3
                break;
   83916:	e000      	b.n	8391a <noOS_bootup_sequence+0xee>
                default:
                break;
   83918:	bf00      	nop
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   8391a:	2008      	movs	r0, #8
   8391c:	4b2e      	ldr	r3, [pc, #184]	; (839d8 <noOS_bootup_sequence+0x1ac>)
   8391e:	4798      	blx	r3
   83920:	4603      	mov	r3, r0
   83922:	f083 0301 	eor.w	r3, r3, #1
   83926:	b2db      	uxtb	r3, r3
   83928:	2b00      	cmp	r3, #0
   8392a:	d006      	beq.n	8393a <noOS_bootup_sequence+0x10e>
   8392c:	2062      	movs	r0, #98	; 0x62
   8392e:	4b2a      	ldr	r3, [pc, #168]	; (839d8 <noOS_bootup_sequence+0x1ac>)
   83930:	4798      	blx	r3
   83932:	4603      	mov	r3, r0
   83934:	2b00      	cmp	r3, #0
   83936:	f47f af7d 	bne.w	83834 <noOS_bootup_sequence+0x8>
            }
        }
    }
    
    for(int i = 0; i< 3; i++)
   8393a:	2300      	movs	r3, #0
   8393c:	607b      	str	r3, [r7, #4]
   8393e:	e030      	b.n	839a2 <noOS_bootup_sequence+0x176>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   83940:	2101      	movs	r1, #1
   83942:	206a      	movs	r0, #106	; 0x6a
   83944:	4b1d      	ldr	r3, [pc, #116]	; (839bc <noOS_bootup_sequence+0x190>)
   83946:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 1);
   83948:	2101      	movs	r1, #1
   8394a:	2066      	movs	r0, #102	; 0x66
   8394c:	4b1b      	ldr	r3, [pc, #108]	; (839bc <noOS_bootup_sequence+0x190>)
   8394e:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 1);
   83950:	2101      	movs	r1, #1
   83952:	2067      	movs	r0, #103	; 0x67
   83954:	4b19      	ldr	r3, [pc, #100]	; (839bc <noOS_bootup_sequence+0x190>)
   83956:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 1);
   83958:	2101      	movs	r1, #1
   8395a:	2068      	movs	r0, #104	; 0x68
   8395c:	4b17      	ldr	r3, [pc, #92]	; (839bc <noOS_bootup_sequence+0x190>)
   8395e:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 1);
   83960:	2101      	movs	r1, #1
   83962:	2069      	movs	r0, #105	; 0x69
   83964:	4b15      	ldr	r3, [pc, #84]	; (839bc <noOS_bootup_sequence+0x190>)
   83966:	4798      	blx	r3
        mdelay(100);
   83968:	2064      	movs	r0, #100	; 0x64
   8396a:	4b1c      	ldr	r3, [pc, #112]	; (839dc <noOS_bootup_sequence+0x1b0>)
   8396c:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   8396e:	2100      	movs	r1, #0
   83970:	206a      	movs	r0, #106	; 0x6a
   83972:	4b12      	ldr	r3, [pc, #72]	; (839bc <noOS_bootup_sequence+0x190>)
   83974:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   83976:	2100      	movs	r1, #0
   83978:	2066      	movs	r0, #102	; 0x66
   8397a:	4b10      	ldr	r3, [pc, #64]	; (839bc <noOS_bootup_sequence+0x190>)
   8397c:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   8397e:	2100      	movs	r1, #0
   83980:	2067      	movs	r0, #103	; 0x67
   83982:	4b0e      	ldr	r3, [pc, #56]	; (839bc <noOS_bootup_sequence+0x190>)
   83984:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   83986:	2100      	movs	r1, #0
   83988:	2068      	movs	r0, #104	; 0x68
   8398a:	4b0c      	ldr	r3, [pc, #48]	; (839bc <noOS_bootup_sequence+0x190>)
   8398c:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   8398e:	2100      	movs	r1, #0
   83990:	2069      	movs	r0, #105	; 0x69
   83992:	4b0a      	ldr	r3, [pc, #40]	; (839bc <noOS_bootup_sequence+0x190>)
   83994:	4798      	blx	r3
        mdelay(100);
   83996:	2064      	movs	r0, #100	; 0x64
   83998:	4b10      	ldr	r3, [pc, #64]	; (839dc <noOS_bootup_sequence+0x1b0>)
   8399a:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   8399c:	687b      	ldr	r3, [r7, #4]
   8399e:	3301      	adds	r3, #1
   839a0:	607b      	str	r3, [r7, #4]
   839a2:	687b      	ldr	r3, [r7, #4]
   839a4:	2b02      	cmp	r3, #2
   839a6:	ddcb      	ble.n	83940 <noOS_bootup_sequence+0x114>
    }
}
   839a8:	bf00      	nop
   839aa:	3708      	adds	r7, #8
   839ac:	46bd      	mov	sp, r7
   839ae:	bd80      	pop	{r7, pc}
   839b0:	00082395 	.word	0x00082395
   839b4:	20070e70 	.word	0x20070e70
   839b8:	20070e6c 	.word	0x20070e6c
   839bc:	000836cd 	.word	0x000836cd
   839c0:	20070e74 	.word	0x20070e74
   839c4:	20070dd0 	.word	0x20070dd0
   839c8:	200701a0 	.word	0x200701a0
   839cc:	000885f0 	.word	0x000885f0
   839d0:	0008120d 	.word	0x0008120d
   839d4:	00088600 	.word	0x00088600
   839d8:	00083737 	.word	0x00083737
   839dc:	000823a9 	.word	0x000823a9

000839e0 <set_led>:

void set_led(ioport_pin_t pin, Bool level)
{
   839e0:	b580      	push	{r7, lr}
   839e2:	b082      	sub	sp, #8
   839e4:	af00      	add	r7, sp, #0
   839e6:	6078      	str	r0, [r7, #4]
   839e8:	460b      	mov	r3, r1
   839ea:	70fb      	strb	r3, [r7, #3]
    if (allow_leds)
   839ec:	4b0b      	ldr	r3, [pc, #44]	; (83a1c <set_led+0x3c>)
   839ee:	781b      	ldrb	r3, [r3, #0]
   839f0:	2b00      	cmp	r3, #0
   839f2:	d00a      	beq.n	83a0a <set_led+0x2a>
    {
        ioport_set_pin_level(pin, level);
   839f4:	78fb      	ldrb	r3, [r7, #3]
   839f6:	2b00      	cmp	r3, #0
   839f8:	bf14      	ite	ne
   839fa:	2301      	movne	r3, #1
   839fc:	2300      	moveq	r3, #0
   839fe:	b2db      	uxtb	r3, r3
   83a00:	4619      	mov	r1, r3
   83a02:	6878      	ldr	r0, [r7, #4]
   83a04:	4b06      	ldr	r3, [pc, #24]	; (83a20 <set_led+0x40>)
   83a06:	4798      	blx	r3
    }
    else
    {
        ioport_set_pin_level(pin, 0);
    }
}
   83a08:	e003      	b.n	83a12 <set_led+0x32>
        ioport_set_pin_level(pin, 0);
   83a0a:	2100      	movs	r1, #0
   83a0c:	6878      	ldr	r0, [r7, #4]
   83a0e:	4b04      	ldr	r3, [pc, #16]	; (83a20 <set_led+0x40>)
   83a10:	4798      	blx	r3
}
   83a12:	bf00      	nop
   83a14:	3708      	adds	r7, #8
   83a16:	46bd      	mov	sp, r7
   83a18:	bd80      	pop	{r7, pc}
   83a1a:	bf00      	nop
   83a1c:	2007018d 	.word	0x2007018d
   83a20:	000836cd 	.word	0x000836cd

00083a24 <__aeabi_drsub>:
   83a24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83a28:	e002      	b.n	83a30 <__adddf3>
   83a2a:	bf00      	nop

00083a2c <__aeabi_dsub>:
   83a2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083a30 <__adddf3>:
   83a30:	b530      	push	{r4, r5, lr}
   83a32:	ea4f 0441 	mov.w	r4, r1, lsl #1
   83a36:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83a3a:	ea94 0f05 	teq	r4, r5
   83a3e:	bf08      	it	eq
   83a40:	ea90 0f02 	teqeq	r0, r2
   83a44:	bf1f      	itttt	ne
   83a46:	ea54 0c00 	orrsne.w	ip, r4, r0
   83a4a:	ea55 0c02 	orrsne.w	ip, r5, r2
   83a4e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83a52:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83a56:	f000 80e2 	beq.w	83c1e <__adddf3+0x1ee>
   83a5a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83a5e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83a62:	bfb8      	it	lt
   83a64:	426d      	neglt	r5, r5
   83a66:	dd0c      	ble.n	83a82 <__adddf3+0x52>
   83a68:	442c      	add	r4, r5
   83a6a:	ea80 0202 	eor.w	r2, r0, r2
   83a6e:	ea81 0303 	eor.w	r3, r1, r3
   83a72:	ea82 0000 	eor.w	r0, r2, r0
   83a76:	ea83 0101 	eor.w	r1, r3, r1
   83a7a:	ea80 0202 	eor.w	r2, r0, r2
   83a7e:	ea81 0303 	eor.w	r3, r1, r3
   83a82:	2d36      	cmp	r5, #54	; 0x36
   83a84:	bf88      	it	hi
   83a86:	bd30      	pophi	{r4, r5, pc}
   83a88:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83a8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83a90:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83a94:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83a98:	d002      	beq.n	83aa0 <__adddf3+0x70>
   83a9a:	4240      	negs	r0, r0
   83a9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83aa0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83aa4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83aa8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83aac:	d002      	beq.n	83ab4 <__adddf3+0x84>
   83aae:	4252      	negs	r2, r2
   83ab0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83ab4:	ea94 0f05 	teq	r4, r5
   83ab8:	f000 80a7 	beq.w	83c0a <__adddf3+0x1da>
   83abc:	f1a4 0401 	sub.w	r4, r4, #1
   83ac0:	f1d5 0e20 	rsbs	lr, r5, #32
   83ac4:	db0d      	blt.n	83ae2 <__adddf3+0xb2>
   83ac6:	fa02 fc0e 	lsl.w	ip, r2, lr
   83aca:	fa22 f205 	lsr.w	r2, r2, r5
   83ace:	1880      	adds	r0, r0, r2
   83ad0:	f141 0100 	adc.w	r1, r1, #0
   83ad4:	fa03 f20e 	lsl.w	r2, r3, lr
   83ad8:	1880      	adds	r0, r0, r2
   83ada:	fa43 f305 	asr.w	r3, r3, r5
   83ade:	4159      	adcs	r1, r3
   83ae0:	e00e      	b.n	83b00 <__adddf3+0xd0>
   83ae2:	f1a5 0520 	sub.w	r5, r5, #32
   83ae6:	f10e 0e20 	add.w	lr, lr, #32
   83aea:	2a01      	cmp	r2, #1
   83aec:	fa03 fc0e 	lsl.w	ip, r3, lr
   83af0:	bf28      	it	cs
   83af2:	f04c 0c02 	orrcs.w	ip, ip, #2
   83af6:	fa43 f305 	asr.w	r3, r3, r5
   83afa:	18c0      	adds	r0, r0, r3
   83afc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83b00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83b04:	d507      	bpl.n	83b16 <__adddf3+0xe6>
   83b06:	f04f 0e00 	mov.w	lr, #0
   83b0a:	f1dc 0c00 	rsbs	ip, ip, #0
   83b0e:	eb7e 0000 	sbcs.w	r0, lr, r0
   83b12:	eb6e 0101 	sbc.w	r1, lr, r1
   83b16:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83b1a:	d31b      	bcc.n	83b54 <__adddf3+0x124>
   83b1c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83b20:	d30c      	bcc.n	83b3c <__adddf3+0x10c>
   83b22:	0849      	lsrs	r1, r1, #1
   83b24:	ea5f 0030 	movs.w	r0, r0, rrx
   83b28:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83b2c:	f104 0401 	add.w	r4, r4, #1
   83b30:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83b34:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83b38:	f080 809a 	bcs.w	83c70 <__adddf3+0x240>
   83b3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83b40:	bf08      	it	eq
   83b42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83b46:	f150 0000 	adcs.w	r0, r0, #0
   83b4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83b4e:	ea41 0105 	orr.w	r1, r1, r5
   83b52:	bd30      	pop	{r4, r5, pc}
   83b54:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83b58:	4140      	adcs	r0, r0
   83b5a:	eb41 0101 	adc.w	r1, r1, r1
   83b5e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83b62:	f1a4 0401 	sub.w	r4, r4, #1
   83b66:	d1e9      	bne.n	83b3c <__adddf3+0x10c>
   83b68:	f091 0f00 	teq	r1, #0
   83b6c:	bf04      	itt	eq
   83b6e:	4601      	moveq	r1, r0
   83b70:	2000      	moveq	r0, #0
   83b72:	fab1 f381 	clz	r3, r1
   83b76:	bf08      	it	eq
   83b78:	3320      	addeq	r3, #32
   83b7a:	f1a3 030b 	sub.w	r3, r3, #11
   83b7e:	f1b3 0220 	subs.w	r2, r3, #32
   83b82:	da0c      	bge.n	83b9e <__adddf3+0x16e>
   83b84:	320c      	adds	r2, #12
   83b86:	dd08      	ble.n	83b9a <__adddf3+0x16a>
   83b88:	f102 0c14 	add.w	ip, r2, #20
   83b8c:	f1c2 020c 	rsb	r2, r2, #12
   83b90:	fa01 f00c 	lsl.w	r0, r1, ip
   83b94:	fa21 f102 	lsr.w	r1, r1, r2
   83b98:	e00c      	b.n	83bb4 <__adddf3+0x184>
   83b9a:	f102 0214 	add.w	r2, r2, #20
   83b9e:	bfd8      	it	le
   83ba0:	f1c2 0c20 	rsble	ip, r2, #32
   83ba4:	fa01 f102 	lsl.w	r1, r1, r2
   83ba8:	fa20 fc0c 	lsr.w	ip, r0, ip
   83bac:	bfdc      	itt	le
   83bae:	ea41 010c 	orrle.w	r1, r1, ip
   83bb2:	4090      	lslle	r0, r2
   83bb4:	1ae4      	subs	r4, r4, r3
   83bb6:	bfa2      	ittt	ge
   83bb8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83bbc:	4329      	orrge	r1, r5
   83bbe:	bd30      	popge	{r4, r5, pc}
   83bc0:	ea6f 0404 	mvn.w	r4, r4
   83bc4:	3c1f      	subs	r4, #31
   83bc6:	da1c      	bge.n	83c02 <__adddf3+0x1d2>
   83bc8:	340c      	adds	r4, #12
   83bca:	dc0e      	bgt.n	83bea <__adddf3+0x1ba>
   83bcc:	f104 0414 	add.w	r4, r4, #20
   83bd0:	f1c4 0220 	rsb	r2, r4, #32
   83bd4:	fa20 f004 	lsr.w	r0, r0, r4
   83bd8:	fa01 f302 	lsl.w	r3, r1, r2
   83bdc:	ea40 0003 	orr.w	r0, r0, r3
   83be0:	fa21 f304 	lsr.w	r3, r1, r4
   83be4:	ea45 0103 	orr.w	r1, r5, r3
   83be8:	bd30      	pop	{r4, r5, pc}
   83bea:	f1c4 040c 	rsb	r4, r4, #12
   83bee:	f1c4 0220 	rsb	r2, r4, #32
   83bf2:	fa20 f002 	lsr.w	r0, r0, r2
   83bf6:	fa01 f304 	lsl.w	r3, r1, r4
   83bfa:	ea40 0003 	orr.w	r0, r0, r3
   83bfe:	4629      	mov	r1, r5
   83c00:	bd30      	pop	{r4, r5, pc}
   83c02:	fa21 f004 	lsr.w	r0, r1, r4
   83c06:	4629      	mov	r1, r5
   83c08:	bd30      	pop	{r4, r5, pc}
   83c0a:	f094 0f00 	teq	r4, #0
   83c0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   83c12:	bf06      	itte	eq
   83c14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83c18:	3401      	addeq	r4, #1
   83c1a:	3d01      	subne	r5, #1
   83c1c:	e74e      	b.n	83abc <__adddf3+0x8c>
   83c1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83c22:	bf18      	it	ne
   83c24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83c28:	d029      	beq.n	83c7e <__adddf3+0x24e>
   83c2a:	ea94 0f05 	teq	r4, r5
   83c2e:	bf08      	it	eq
   83c30:	ea90 0f02 	teqeq	r0, r2
   83c34:	d005      	beq.n	83c42 <__adddf3+0x212>
   83c36:	ea54 0c00 	orrs.w	ip, r4, r0
   83c3a:	bf04      	itt	eq
   83c3c:	4619      	moveq	r1, r3
   83c3e:	4610      	moveq	r0, r2
   83c40:	bd30      	pop	{r4, r5, pc}
   83c42:	ea91 0f03 	teq	r1, r3
   83c46:	bf1e      	ittt	ne
   83c48:	2100      	movne	r1, #0
   83c4a:	2000      	movne	r0, #0
   83c4c:	bd30      	popne	{r4, r5, pc}
   83c4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83c52:	d105      	bne.n	83c60 <__adddf3+0x230>
   83c54:	0040      	lsls	r0, r0, #1
   83c56:	4149      	adcs	r1, r1
   83c58:	bf28      	it	cs
   83c5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83c5e:	bd30      	pop	{r4, r5, pc}
   83c60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83c64:	bf3c      	itt	cc
   83c66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   83c6a:	bd30      	popcc	{r4, r5, pc}
   83c6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83c70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83c74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83c78:	f04f 0000 	mov.w	r0, #0
   83c7c:	bd30      	pop	{r4, r5, pc}
   83c7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83c82:	bf1a      	itte	ne
   83c84:	4619      	movne	r1, r3
   83c86:	4610      	movne	r0, r2
   83c88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83c8c:	bf1c      	itt	ne
   83c8e:	460b      	movne	r3, r1
   83c90:	4602      	movne	r2, r0
   83c92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83c96:	bf06      	itte	eq
   83c98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83c9c:	ea91 0f03 	teqeq	r1, r3
   83ca0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83ca4:	bd30      	pop	{r4, r5, pc}
   83ca6:	bf00      	nop

00083ca8 <__aeabi_ui2d>:
   83ca8:	f090 0f00 	teq	r0, #0
   83cac:	bf04      	itt	eq
   83cae:	2100      	moveq	r1, #0
   83cb0:	4770      	bxeq	lr
   83cb2:	b530      	push	{r4, r5, lr}
   83cb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83cb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83cbc:	f04f 0500 	mov.w	r5, #0
   83cc0:	f04f 0100 	mov.w	r1, #0
   83cc4:	e750      	b.n	83b68 <__adddf3+0x138>
   83cc6:	bf00      	nop

00083cc8 <__aeabi_i2d>:
   83cc8:	f090 0f00 	teq	r0, #0
   83ccc:	bf04      	itt	eq
   83cce:	2100      	moveq	r1, #0
   83cd0:	4770      	bxeq	lr
   83cd2:	b530      	push	{r4, r5, lr}
   83cd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83cd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83cdc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83ce0:	bf48      	it	mi
   83ce2:	4240      	negmi	r0, r0
   83ce4:	f04f 0100 	mov.w	r1, #0
   83ce8:	e73e      	b.n	83b68 <__adddf3+0x138>
   83cea:	bf00      	nop

00083cec <__aeabi_f2d>:
   83cec:	0042      	lsls	r2, r0, #1
   83cee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   83cf2:	ea4f 0131 	mov.w	r1, r1, rrx
   83cf6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   83cfa:	bf1f      	itttt	ne
   83cfc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83d00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83d04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83d08:	4770      	bxne	lr
   83d0a:	f092 0f00 	teq	r2, #0
   83d0e:	bf14      	ite	ne
   83d10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83d14:	4770      	bxeq	lr
   83d16:	b530      	push	{r4, r5, lr}
   83d18:	f44f 7460 	mov.w	r4, #896	; 0x380
   83d1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83d20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83d24:	e720      	b.n	83b68 <__adddf3+0x138>
   83d26:	bf00      	nop

00083d28 <__aeabi_ul2d>:
   83d28:	ea50 0201 	orrs.w	r2, r0, r1
   83d2c:	bf08      	it	eq
   83d2e:	4770      	bxeq	lr
   83d30:	b530      	push	{r4, r5, lr}
   83d32:	f04f 0500 	mov.w	r5, #0
   83d36:	e00a      	b.n	83d4e <__aeabi_l2d+0x16>

00083d38 <__aeabi_l2d>:
   83d38:	ea50 0201 	orrs.w	r2, r0, r1
   83d3c:	bf08      	it	eq
   83d3e:	4770      	bxeq	lr
   83d40:	b530      	push	{r4, r5, lr}
   83d42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   83d46:	d502      	bpl.n	83d4e <__aeabi_l2d+0x16>
   83d48:	4240      	negs	r0, r0
   83d4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83d4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83d52:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83d56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83d5a:	f43f aedc 	beq.w	83b16 <__adddf3+0xe6>
   83d5e:	f04f 0203 	mov.w	r2, #3
   83d62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83d66:	bf18      	it	ne
   83d68:	3203      	addne	r2, #3
   83d6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83d6e:	bf18      	it	ne
   83d70:	3203      	addne	r2, #3
   83d72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83d76:	f1c2 0320 	rsb	r3, r2, #32
   83d7a:	fa00 fc03 	lsl.w	ip, r0, r3
   83d7e:	fa20 f002 	lsr.w	r0, r0, r2
   83d82:	fa01 fe03 	lsl.w	lr, r1, r3
   83d86:	ea40 000e 	orr.w	r0, r0, lr
   83d8a:	fa21 f102 	lsr.w	r1, r1, r2
   83d8e:	4414      	add	r4, r2
   83d90:	e6c1      	b.n	83b16 <__adddf3+0xe6>
   83d92:	bf00      	nop

00083d94 <__aeabi_dmul>:
   83d94:	b570      	push	{r4, r5, r6, lr}
   83d96:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83d9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83d9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83da2:	bf1d      	ittte	ne
   83da4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83da8:	ea94 0f0c 	teqne	r4, ip
   83dac:	ea95 0f0c 	teqne	r5, ip
   83db0:	f000 f8de 	bleq	83f70 <__aeabi_dmul+0x1dc>
   83db4:	442c      	add	r4, r5
   83db6:	ea81 0603 	eor.w	r6, r1, r3
   83dba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   83dbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   83dc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   83dc6:	bf18      	it	ne
   83dc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83dcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83dd4:	d038      	beq.n	83e48 <__aeabi_dmul+0xb4>
   83dd6:	fba0 ce02 	umull	ip, lr, r0, r2
   83dda:	f04f 0500 	mov.w	r5, #0
   83dde:	fbe1 e502 	umlal	lr, r5, r1, r2
   83de2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   83de6:	fbe0 e503 	umlal	lr, r5, r0, r3
   83dea:	f04f 0600 	mov.w	r6, #0
   83dee:	fbe1 5603 	umlal	r5, r6, r1, r3
   83df2:	f09c 0f00 	teq	ip, #0
   83df6:	bf18      	it	ne
   83df8:	f04e 0e01 	orrne.w	lr, lr, #1
   83dfc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   83e00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   83e04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   83e08:	d204      	bcs.n	83e14 <__aeabi_dmul+0x80>
   83e0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83e0e:	416d      	adcs	r5, r5
   83e10:	eb46 0606 	adc.w	r6, r6, r6
   83e14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83e18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83e1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83e20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   83e24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83e28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83e2c:	bf88      	it	hi
   83e2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83e32:	d81e      	bhi.n	83e72 <__aeabi_dmul+0xde>
   83e34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   83e38:	bf08      	it	eq
   83e3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   83e3e:	f150 0000 	adcs.w	r0, r0, #0
   83e42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83e46:	bd70      	pop	{r4, r5, r6, pc}
   83e48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83e4c:	ea46 0101 	orr.w	r1, r6, r1
   83e50:	ea40 0002 	orr.w	r0, r0, r2
   83e54:	ea81 0103 	eor.w	r1, r1, r3
   83e58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83e5c:	bfc2      	ittt	gt
   83e5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   83e62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83e66:	bd70      	popgt	{r4, r5, r6, pc}
   83e68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83e6c:	f04f 0e00 	mov.w	lr, #0
   83e70:	3c01      	subs	r4, #1
   83e72:	f300 80ab 	bgt.w	83fcc <__aeabi_dmul+0x238>
   83e76:	f114 0f36 	cmn.w	r4, #54	; 0x36
   83e7a:	bfde      	ittt	le
   83e7c:	2000      	movle	r0, #0
   83e7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   83e82:	bd70      	pople	{r4, r5, r6, pc}
   83e84:	f1c4 0400 	rsb	r4, r4, #0
   83e88:	3c20      	subs	r4, #32
   83e8a:	da35      	bge.n	83ef8 <__aeabi_dmul+0x164>
   83e8c:	340c      	adds	r4, #12
   83e8e:	dc1b      	bgt.n	83ec8 <__aeabi_dmul+0x134>
   83e90:	f104 0414 	add.w	r4, r4, #20
   83e94:	f1c4 0520 	rsb	r5, r4, #32
   83e98:	fa00 f305 	lsl.w	r3, r0, r5
   83e9c:	fa20 f004 	lsr.w	r0, r0, r4
   83ea0:	fa01 f205 	lsl.w	r2, r1, r5
   83ea4:	ea40 0002 	orr.w	r0, r0, r2
   83ea8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83eac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83eb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83eb4:	fa21 f604 	lsr.w	r6, r1, r4
   83eb8:	eb42 0106 	adc.w	r1, r2, r6
   83ebc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83ec0:	bf08      	it	eq
   83ec2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83ec6:	bd70      	pop	{r4, r5, r6, pc}
   83ec8:	f1c4 040c 	rsb	r4, r4, #12
   83ecc:	f1c4 0520 	rsb	r5, r4, #32
   83ed0:	fa00 f304 	lsl.w	r3, r0, r4
   83ed4:	fa20 f005 	lsr.w	r0, r0, r5
   83ed8:	fa01 f204 	lsl.w	r2, r1, r4
   83edc:	ea40 0002 	orr.w	r0, r0, r2
   83ee0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83ee4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83ee8:	f141 0100 	adc.w	r1, r1, #0
   83eec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83ef0:	bf08      	it	eq
   83ef2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83ef6:	bd70      	pop	{r4, r5, r6, pc}
   83ef8:	f1c4 0520 	rsb	r5, r4, #32
   83efc:	fa00 f205 	lsl.w	r2, r0, r5
   83f00:	ea4e 0e02 	orr.w	lr, lr, r2
   83f04:	fa20 f304 	lsr.w	r3, r0, r4
   83f08:	fa01 f205 	lsl.w	r2, r1, r5
   83f0c:	ea43 0302 	orr.w	r3, r3, r2
   83f10:	fa21 f004 	lsr.w	r0, r1, r4
   83f14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83f18:	fa21 f204 	lsr.w	r2, r1, r4
   83f1c:	ea20 0002 	bic.w	r0, r0, r2
   83f20:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   83f24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83f28:	bf08      	it	eq
   83f2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83f2e:	bd70      	pop	{r4, r5, r6, pc}
   83f30:	f094 0f00 	teq	r4, #0
   83f34:	d10f      	bne.n	83f56 <__aeabi_dmul+0x1c2>
   83f36:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   83f3a:	0040      	lsls	r0, r0, #1
   83f3c:	eb41 0101 	adc.w	r1, r1, r1
   83f40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83f44:	bf08      	it	eq
   83f46:	3c01      	subeq	r4, #1
   83f48:	d0f7      	beq.n	83f3a <__aeabi_dmul+0x1a6>
   83f4a:	ea41 0106 	orr.w	r1, r1, r6
   83f4e:	f095 0f00 	teq	r5, #0
   83f52:	bf18      	it	ne
   83f54:	4770      	bxne	lr
   83f56:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   83f5a:	0052      	lsls	r2, r2, #1
   83f5c:	eb43 0303 	adc.w	r3, r3, r3
   83f60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   83f64:	bf08      	it	eq
   83f66:	3d01      	subeq	r5, #1
   83f68:	d0f7      	beq.n	83f5a <__aeabi_dmul+0x1c6>
   83f6a:	ea43 0306 	orr.w	r3, r3, r6
   83f6e:	4770      	bx	lr
   83f70:	ea94 0f0c 	teq	r4, ip
   83f74:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83f78:	bf18      	it	ne
   83f7a:	ea95 0f0c 	teqne	r5, ip
   83f7e:	d00c      	beq.n	83f9a <__aeabi_dmul+0x206>
   83f80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83f84:	bf18      	it	ne
   83f86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83f8a:	d1d1      	bne.n	83f30 <__aeabi_dmul+0x19c>
   83f8c:	ea81 0103 	eor.w	r1, r1, r3
   83f90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83f94:	f04f 0000 	mov.w	r0, #0
   83f98:	bd70      	pop	{r4, r5, r6, pc}
   83f9a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83f9e:	bf06      	itte	eq
   83fa0:	4610      	moveq	r0, r2
   83fa2:	4619      	moveq	r1, r3
   83fa4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83fa8:	d019      	beq.n	83fde <__aeabi_dmul+0x24a>
   83faa:	ea94 0f0c 	teq	r4, ip
   83fae:	d102      	bne.n	83fb6 <__aeabi_dmul+0x222>
   83fb0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   83fb4:	d113      	bne.n	83fde <__aeabi_dmul+0x24a>
   83fb6:	ea95 0f0c 	teq	r5, ip
   83fba:	d105      	bne.n	83fc8 <__aeabi_dmul+0x234>
   83fbc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   83fc0:	bf1c      	itt	ne
   83fc2:	4610      	movne	r0, r2
   83fc4:	4619      	movne	r1, r3
   83fc6:	d10a      	bne.n	83fde <__aeabi_dmul+0x24a>
   83fc8:	ea81 0103 	eor.w	r1, r1, r3
   83fcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83fd0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83fd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83fd8:	f04f 0000 	mov.w	r0, #0
   83fdc:	bd70      	pop	{r4, r5, r6, pc}
   83fde:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83fe2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   83fe6:	bd70      	pop	{r4, r5, r6, pc}

00083fe8 <__aeabi_ddiv>:
   83fe8:	b570      	push	{r4, r5, r6, lr}
   83fea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83fee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83ff2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83ff6:	bf1d      	ittte	ne
   83ff8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83ffc:	ea94 0f0c 	teqne	r4, ip
   84000:	ea95 0f0c 	teqne	r5, ip
   84004:	f000 f8a7 	bleq	84156 <__aeabi_ddiv+0x16e>
   84008:	eba4 0405 	sub.w	r4, r4, r5
   8400c:	ea81 0e03 	eor.w	lr, r1, r3
   84010:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84014:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84018:	f000 8088 	beq.w	8412c <__aeabi_ddiv+0x144>
   8401c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   84020:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   84024:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   84028:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8402c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   84030:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   84034:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   84038:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8403c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   84040:	429d      	cmp	r5, r3
   84042:	bf08      	it	eq
   84044:	4296      	cmpeq	r6, r2
   84046:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8404a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8404e:	d202      	bcs.n	84056 <__aeabi_ddiv+0x6e>
   84050:	085b      	lsrs	r3, r3, #1
   84052:	ea4f 0232 	mov.w	r2, r2, rrx
   84056:	1ab6      	subs	r6, r6, r2
   84058:	eb65 0503 	sbc.w	r5, r5, r3
   8405c:	085b      	lsrs	r3, r3, #1
   8405e:	ea4f 0232 	mov.w	r2, r2, rrx
   84062:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   84066:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8406a:	ebb6 0e02 	subs.w	lr, r6, r2
   8406e:	eb75 0e03 	sbcs.w	lr, r5, r3
   84072:	bf22      	ittt	cs
   84074:	1ab6      	subcs	r6, r6, r2
   84076:	4675      	movcs	r5, lr
   84078:	ea40 000c 	orrcs.w	r0, r0, ip
   8407c:	085b      	lsrs	r3, r3, #1
   8407e:	ea4f 0232 	mov.w	r2, r2, rrx
   84082:	ebb6 0e02 	subs.w	lr, r6, r2
   84086:	eb75 0e03 	sbcs.w	lr, r5, r3
   8408a:	bf22      	ittt	cs
   8408c:	1ab6      	subcs	r6, r6, r2
   8408e:	4675      	movcs	r5, lr
   84090:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   84094:	085b      	lsrs	r3, r3, #1
   84096:	ea4f 0232 	mov.w	r2, r2, rrx
   8409a:	ebb6 0e02 	subs.w	lr, r6, r2
   8409e:	eb75 0e03 	sbcs.w	lr, r5, r3
   840a2:	bf22      	ittt	cs
   840a4:	1ab6      	subcs	r6, r6, r2
   840a6:	4675      	movcs	r5, lr
   840a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   840ac:	085b      	lsrs	r3, r3, #1
   840ae:	ea4f 0232 	mov.w	r2, r2, rrx
   840b2:	ebb6 0e02 	subs.w	lr, r6, r2
   840b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   840ba:	bf22      	ittt	cs
   840bc:	1ab6      	subcs	r6, r6, r2
   840be:	4675      	movcs	r5, lr
   840c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   840c4:	ea55 0e06 	orrs.w	lr, r5, r6
   840c8:	d018      	beq.n	840fc <__aeabi_ddiv+0x114>
   840ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   840ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   840d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   840d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   840da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   840de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   840e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   840e6:	d1c0      	bne.n	8406a <__aeabi_ddiv+0x82>
   840e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   840ec:	d10b      	bne.n	84106 <__aeabi_ddiv+0x11e>
   840ee:	ea41 0100 	orr.w	r1, r1, r0
   840f2:	f04f 0000 	mov.w	r0, #0
   840f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   840fa:	e7b6      	b.n	8406a <__aeabi_ddiv+0x82>
   840fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84100:	bf04      	itt	eq
   84102:	4301      	orreq	r1, r0
   84104:	2000      	moveq	r0, #0
   84106:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8410a:	bf88      	it	hi
   8410c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   84110:	f63f aeaf 	bhi.w	83e72 <__aeabi_dmul+0xde>
   84114:	ebb5 0c03 	subs.w	ip, r5, r3
   84118:	bf04      	itt	eq
   8411a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8411e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   84122:	f150 0000 	adcs.w	r0, r0, #0
   84126:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8412a:	bd70      	pop	{r4, r5, r6, pc}
   8412c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   84130:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   84134:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   84138:	bfc2      	ittt	gt
   8413a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8413e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84142:	bd70      	popgt	{r4, r5, r6, pc}
   84144:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84148:	f04f 0e00 	mov.w	lr, #0
   8414c:	3c01      	subs	r4, #1
   8414e:	e690      	b.n	83e72 <__aeabi_dmul+0xde>
   84150:	ea45 0e06 	orr.w	lr, r5, r6
   84154:	e68d      	b.n	83e72 <__aeabi_dmul+0xde>
   84156:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8415a:	ea94 0f0c 	teq	r4, ip
   8415e:	bf08      	it	eq
   84160:	ea95 0f0c 	teqeq	r5, ip
   84164:	f43f af3b 	beq.w	83fde <__aeabi_dmul+0x24a>
   84168:	ea94 0f0c 	teq	r4, ip
   8416c:	d10a      	bne.n	84184 <__aeabi_ddiv+0x19c>
   8416e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   84172:	f47f af34 	bne.w	83fde <__aeabi_dmul+0x24a>
   84176:	ea95 0f0c 	teq	r5, ip
   8417a:	f47f af25 	bne.w	83fc8 <__aeabi_dmul+0x234>
   8417e:	4610      	mov	r0, r2
   84180:	4619      	mov	r1, r3
   84182:	e72c      	b.n	83fde <__aeabi_dmul+0x24a>
   84184:	ea95 0f0c 	teq	r5, ip
   84188:	d106      	bne.n	84198 <__aeabi_ddiv+0x1b0>
   8418a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8418e:	f43f aefd 	beq.w	83f8c <__aeabi_dmul+0x1f8>
   84192:	4610      	mov	r0, r2
   84194:	4619      	mov	r1, r3
   84196:	e722      	b.n	83fde <__aeabi_dmul+0x24a>
   84198:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8419c:	bf18      	it	ne
   8419e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   841a2:	f47f aec5 	bne.w	83f30 <__aeabi_dmul+0x19c>
   841a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   841aa:	f47f af0d 	bne.w	83fc8 <__aeabi_dmul+0x234>
   841ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   841b2:	f47f aeeb 	bne.w	83f8c <__aeabi_dmul+0x1f8>
   841b6:	e712      	b.n	83fde <__aeabi_dmul+0x24a>

000841b8 <__aeabi_frsub>:
   841b8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   841bc:	e002      	b.n	841c4 <__addsf3>
   841be:	bf00      	nop

000841c0 <__aeabi_fsub>:
   841c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000841c4 <__addsf3>:
   841c4:	0042      	lsls	r2, r0, #1
   841c6:	bf1f      	itttt	ne
   841c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   841cc:	ea92 0f03 	teqne	r2, r3
   841d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   841d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   841d8:	d06a      	beq.n	842b0 <__addsf3+0xec>
   841da:	ea4f 6212 	mov.w	r2, r2, lsr #24
   841de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   841e2:	bfc1      	itttt	gt
   841e4:	18d2      	addgt	r2, r2, r3
   841e6:	4041      	eorgt	r1, r0
   841e8:	4048      	eorgt	r0, r1
   841ea:	4041      	eorgt	r1, r0
   841ec:	bfb8      	it	lt
   841ee:	425b      	neglt	r3, r3
   841f0:	2b19      	cmp	r3, #25
   841f2:	bf88      	it	hi
   841f4:	4770      	bxhi	lr
   841f6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   841fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   841fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   84202:	bf18      	it	ne
   84204:	4240      	negne	r0, r0
   84206:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8420a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8420e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   84212:	bf18      	it	ne
   84214:	4249      	negne	r1, r1
   84216:	ea92 0f03 	teq	r2, r3
   8421a:	d03f      	beq.n	8429c <__addsf3+0xd8>
   8421c:	f1a2 0201 	sub.w	r2, r2, #1
   84220:	fa41 fc03 	asr.w	ip, r1, r3
   84224:	eb10 000c 	adds.w	r0, r0, ip
   84228:	f1c3 0320 	rsb	r3, r3, #32
   8422c:	fa01 f103 	lsl.w	r1, r1, r3
   84230:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84234:	d502      	bpl.n	8423c <__addsf3+0x78>
   84236:	4249      	negs	r1, r1
   84238:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   8423c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   84240:	d313      	bcc.n	8426a <__addsf3+0xa6>
   84242:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   84246:	d306      	bcc.n	84256 <__addsf3+0x92>
   84248:	0840      	lsrs	r0, r0, #1
   8424a:	ea4f 0131 	mov.w	r1, r1, rrx
   8424e:	f102 0201 	add.w	r2, r2, #1
   84252:	2afe      	cmp	r2, #254	; 0xfe
   84254:	d251      	bcs.n	842fa <__addsf3+0x136>
   84256:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8425a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8425e:	bf08      	it	eq
   84260:	f020 0001 	biceq.w	r0, r0, #1
   84264:	ea40 0003 	orr.w	r0, r0, r3
   84268:	4770      	bx	lr
   8426a:	0049      	lsls	r1, r1, #1
   8426c:	eb40 0000 	adc.w	r0, r0, r0
   84270:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   84274:	f1a2 0201 	sub.w	r2, r2, #1
   84278:	d1ed      	bne.n	84256 <__addsf3+0x92>
   8427a:	fab0 fc80 	clz	ip, r0
   8427e:	f1ac 0c08 	sub.w	ip, ip, #8
   84282:	ebb2 020c 	subs.w	r2, r2, ip
   84286:	fa00 f00c 	lsl.w	r0, r0, ip
   8428a:	bfaa      	itet	ge
   8428c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   84290:	4252      	neglt	r2, r2
   84292:	4318      	orrge	r0, r3
   84294:	bfbc      	itt	lt
   84296:	40d0      	lsrlt	r0, r2
   84298:	4318      	orrlt	r0, r3
   8429a:	4770      	bx	lr
   8429c:	f092 0f00 	teq	r2, #0
   842a0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   842a4:	bf06      	itte	eq
   842a6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   842aa:	3201      	addeq	r2, #1
   842ac:	3b01      	subne	r3, #1
   842ae:	e7b5      	b.n	8421c <__addsf3+0x58>
   842b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   842b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   842b8:	bf18      	it	ne
   842ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   842be:	d021      	beq.n	84304 <__addsf3+0x140>
   842c0:	ea92 0f03 	teq	r2, r3
   842c4:	d004      	beq.n	842d0 <__addsf3+0x10c>
   842c6:	f092 0f00 	teq	r2, #0
   842ca:	bf08      	it	eq
   842cc:	4608      	moveq	r0, r1
   842ce:	4770      	bx	lr
   842d0:	ea90 0f01 	teq	r0, r1
   842d4:	bf1c      	itt	ne
   842d6:	2000      	movne	r0, #0
   842d8:	4770      	bxne	lr
   842da:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   842de:	d104      	bne.n	842ea <__addsf3+0x126>
   842e0:	0040      	lsls	r0, r0, #1
   842e2:	bf28      	it	cs
   842e4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   842e8:	4770      	bx	lr
   842ea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   842ee:	bf3c      	itt	cc
   842f0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   842f4:	4770      	bxcc	lr
   842f6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   842fa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   842fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84302:	4770      	bx	lr
   84304:	ea7f 6222 	mvns.w	r2, r2, asr #24
   84308:	bf16      	itet	ne
   8430a:	4608      	movne	r0, r1
   8430c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   84310:	4601      	movne	r1, r0
   84312:	0242      	lsls	r2, r0, #9
   84314:	bf06      	itte	eq
   84316:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   8431a:	ea90 0f01 	teqeq	r0, r1
   8431e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   84322:	4770      	bx	lr

00084324 <__aeabi_ui2f>:
   84324:	f04f 0300 	mov.w	r3, #0
   84328:	e004      	b.n	84334 <__aeabi_i2f+0x8>
   8432a:	bf00      	nop

0008432c <__aeabi_i2f>:
   8432c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   84330:	bf48      	it	mi
   84332:	4240      	negmi	r0, r0
   84334:	ea5f 0c00 	movs.w	ip, r0
   84338:	bf08      	it	eq
   8433a:	4770      	bxeq	lr
   8433c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   84340:	4601      	mov	r1, r0
   84342:	f04f 0000 	mov.w	r0, #0
   84346:	e01c      	b.n	84382 <__aeabi_l2f+0x2a>

00084348 <__aeabi_ul2f>:
   84348:	ea50 0201 	orrs.w	r2, r0, r1
   8434c:	bf08      	it	eq
   8434e:	4770      	bxeq	lr
   84350:	f04f 0300 	mov.w	r3, #0
   84354:	e00a      	b.n	8436c <__aeabi_l2f+0x14>
   84356:	bf00      	nop

00084358 <__aeabi_l2f>:
   84358:	ea50 0201 	orrs.w	r2, r0, r1
   8435c:	bf08      	it	eq
   8435e:	4770      	bxeq	lr
   84360:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   84364:	d502      	bpl.n	8436c <__aeabi_l2f+0x14>
   84366:	4240      	negs	r0, r0
   84368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8436c:	ea5f 0c01 	movs.w	ip, r1
   84370:	bf02      	ittt	eq
   84372:	4684      	moveq	ip, r0
   84374:	4601      	moveq	r1, r0
   84376:	2000      	moveq	r0, #0
   84378:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   8437c:	bf08      	it	eq
   8437e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   84382:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   84386:	fabc f28c 	clz	r2, ip
   8438a:	3a08      	subs	r2, #8
   8438c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   84390:	db10      	blt.n	843b4 <__aeabi_l2f+0x5c>
   84392:	fa01 fc02 	lsl.w	ip, r1, r2
   84396:	4463      	add	r3, ip
   84398:	fa00 fc02 	lsl.w	ip, r0, r2
   8439c:	f1c2 0220 	rsb	r2, r2, #32
   843a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   843a4:	fa20 f202 	lsr.w	r2, r0, r2
   843a8:	eb43 0002 	adc.w	r0, r3, r2
   843ac:	bf08      	it	eq
   843ae:	f020 0001 	biceq.w	r0, r0, #1
   843b2:	4770      	bx	lr
   843b4:	f102 0220 	add.w	r2, r2, #32
   843b8:	fa01 fc02 	lsl.w	ip, r1, r2
   843bc:	f1c2 0220 	rsb	r2, r2, #32
   843c0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   843c4:	fa21 f202 	lsr.w	r2, r1, r2
   843c8:	eb43 0002 	adc.w	r0, r3, r2
   843cc:	bf08      	it	eq
   843ce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   843d2:	4770      	bx	lr

000843d4 <__libc_init_array>:
   843d4:	b570      	push	{r4, r5, r6, lr}
   843d6:	4e0f      	ldr	r6, [pc, #60]	; (84414 <__libc_init_array+0x40>)
   843d8:	4d0f      	ldr	r5, [pc, #60]	; (84418 <__libc_init_array+0x44>)
   843da:	1b76      	subs	r6, r6, r5
   843dc:	10b6      	asrs	r6, r6, #2
   843de:	bf18      	it	ne
   843e0:	2400      	movne	r4, #0
   843e2:	d005      	beq.n	843f0 <__libc_init_array+0x1c>
   843e4:	3401      	adds	r4, #1
   843e6:	f855 3b04 	ldr.w	r3, [r5], #4
   843ea:	4798      	blx	r3
   843ec:	42a6      	cmp	r6, r4
   843ee:	d1f9      	bne.n	843e4 <__libc_init_array+0x10>
   843f0:	4e0a      	ldr	r6, [pc, #40]	; (8441c <__libc_init_array+0x48>)
   843f2:	4d0b      	ldr	r5, [pc, #44]	; (84420 <__libc_init_array+0x4c>)
   843f4:	f004 fa4c 	bl	88890 <_init>
   843f8:	1b76      	subs	r6, r6, r5
   843fa:	10b6      	asrs	r6, r6, #2
   843fc:	bf18      	it	ne
   843fe:	2400      	movne	r4, #0
   84400:	d006      	beq.n	84410 <__libc_init_array+0x3c>
   84402:	3401      	adds	r4, #1
   84404:	f855 3b04 	ldr.w	r3, [r5], #4
   84408:	4798      	blx	r3
   8440a:	42a6      	cmp	r6, r4
   8440c:	d1f9      	bne.n	84402 <__libc_init_array+0x2e>
   8440e:	bd70      	pop	{r4, r5, r6, pc}
   84410:	bd70      	pop	{r4, r5, r6, pc}
   84412:	bf00      	nop
   84414:	0008889c 	.word	0x0008889c
   84418:	0008889c 	.word	0x0008889c
   8441c:	000888a4 	.word	0x000888a4
   84420:	0008889c 	.word	0x0008889c

00084424 <memset>:
   84424:	b470      	push	{r4, r5, r6}
   84426:	0786      	lsls	r6, r0, #30
   84428:	d046      	beq.n	844b8 <memset+0x94>
   8442a:	1e54      	subs	r4, r2, #1
   8442c:	2a00      	cmp	r2, #0
   8442e:	d041      	beq.n	844b4 <memset+0x90>
   84430:	b2ca      	uxtb	r2, r1
   84432:	4603      	mov	r3, r0
   84434:	e002      	b.n	8443c <memset+0x18>
   84436:	f114 34ff 	adds.w	r4, r4, #4294967295
   8443a:	d33b      	bcc.n	844b4 <memset+0x90>
   8443c:	f803 2b01 	strb.w	r2, [r3], #1
   84440:	079d      	lsls	r5, r3, #30
   84442:	d1f8      	bne.n	84436 <memset+0x12>
   84444:	2c03      	cmp	r4, #3
   84446:	d92e      	bls.n	844a6 <memset+0x82>
   84448:	b2cd      	uxtb	r5, r1
   8444a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8444e:	2c0f      	cmp	r4, #15
   84450:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   84454:	d919      	bls.n	8448a <memset+0x66>
   84456:	4626      	mov	r6, r4
   84458:	f103 0210 	add.w	r2, r3, #16
   8445c:	3e10      	subs	r6, #16
   8445e:	2e0f      	cmp	r6, #15
   84460:	f842 5c10 	str.w	r5, [r2, #-16]
   84464:	f842 5c0c 	str.w	r5, [r2, #-12]
   84468:	f842 5c08 	str.w	r5, [r2, #-8]
   8446c:	f842 5c04 	str.w	r5, [r2, #-4]
   84470:	f102 0210 	add.w	r2, r2, #16
   84474:	d8f2      	bhi.n	8445c <memset+0x38>
   84476:	f1a4 0210 	sub.w	r2, r4, #16
   8447a:	f022 020f 	bic.w	r2, r2, #15
   8447e:	f004 040f 	and.w	r4, r4, #15
   84482:	3210      	adds	r2, #16
   84484:	2c03      	cmp	r4, #3
   84486:	4413      	add	r3, r2
   84488:	d90d      	bls.n	844a6 <memset+0x82>
   8448a:	461e      	mov	r6, r3
   8448c:	4622      	mov	r2, r4
   8448e:	3a04      	subs	r2, #4
   84490:	2a03      	cmp	r2, #3
   84492:	f846 5b04 	str.w	r5, [r6], #4
   84496:	d8fa      	bhi.n	8448e <memset+0x6a>
   84498:	1f22      	subs	r2, r4, #4
   8449a:	f022 0203 	bic.w	r2, r2, #3
   8449e:	3204      	adds	r2, #4
   844a0:	4413      	add	r3, r2
   844a2:	f004 0403 	and.w	r4, r4, #3
   844a6:	b12c      	cbz	r4, 844b4 <memset+0x90>
   844a8:	b2c9      	uxtb	r1, r1
   844aa:	441c      	add	r4, r3
   844ac:	f803 1b01 	strb.w	r1, [r3], #1
   844b0:	429c      	cmp	r4, r3
   844b2:	d1fb      	bne.n	844ac <memset+0x88>
   844b4:	bc70      	pop	{r4, r5, r6}
   844b6:	4770      	bx	lr
   844b8:	4614      	mov	r4, r2
   844ba:	4603      	mov	r3, r0
   844bc:	e7c2      	b.n	84444 <memset+0x20>
   844be:	bf00      	nop

000844c0 <sprintf>:
   844c0:	b40e      	push	{r1, r2, r3}
   844c2:	4601      	mov	r1, r0
   844c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   844c6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   844ca:	f44f 7702 	mov.w	r7, #520	; 0x208
   844ce:	f64f 76ff 	movw	r6, #65535	; 0xffff
   844d2:	b09c      	sub	sp, #112	; 0x70
   844d4:	ac21      	add	r4, sp, #132	; 0x84
   844d6:	f854 2b04 	ldr.w	r2, [r4], #4
   844da:	4b0b      	ldr	r3, [pc, #44]	; (84508 <sprintf+0x48>)
   844dc:	9102      	str	r1, [sp, #8]
   844de:	9106      	str	r1, [sp, #24]
   844e0:	6818      	ldr	r0, [r3, #0]
   844e2:	a902      	add	r1, sp, #8
   844e4:	4623      	mov	r3, r4
   844e6:	9401      	str	r4, [sp, #4]
   844e8:	f8ad 7014 	strh.w	r7, [sp, #20]
   844ec:	9504      	str	r5, [sp, #16]
   844ee:	9507      	str	r5, [sp, #28]
   844f0:	f8ad 6016 	strh.w	r6, [sp, #22]
   844f4:	f000 f838 	bl	84568 <_svfprintf_r>
   844f8:	2200      	movs	r2, #0
   844fa:	9b02      	ldr	r3, [sp, #8]
   844fc:	701a      	strb	r2, [r3, #0]
   844fe:	b01c      	add	sp, #112	; 0x70
   84500:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   84504:	b003      	add	sp, #12
   84506:	4770      	bx	lr
   84508:	200701a4 	.word	0x200701a4

0008450c <strlen>:
   8450c:	f020 0103 	bic.w	r1, r0, #3
   84510:	f010 0003 	ands.w	r0, r0, #3
   84514:	f1c0 0000 	rsb	r0, r0, #0
   84518:	f851 3b04 	ldr.w	r3, [r1], #4
   8451c:	f100 0c04 	add.w	ip, r0, #4
   84520:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84524:	f06f 0200 	mvn.w	r2, #0
   84528:	bf1c      	itt	ne
   8452a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8452e:	4313      	orrne	r3, r2
   84530:	f04f 0c01 	mov.w	ip, #1
   84534:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84538:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8453c:	eba3 020c 	sub.w	r2, r3, ip
   84540:	ea22 0203 	bic.w	r2, r2, r3
   84544:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84548:	bf04      	itt	eq
   8454a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8454e:	3004      	addeq	r0, #4
   84550:	d0f4      	beq.n	8453c <strlen+0x30>
   84552:	f1c2 0100 	rsb	r1, r2, #0
   84556:	ea02 0201 	and.w	r2, r2, r1
   8455a:	fab2 f282 	clz	r2, r2
   8455e:	f1c2 021f 	rsb	r2, r2, #31
   84562:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   84566:	4770      	bx	lr

00084568 <_svfprintf_r>:
   84568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8456c:	b0c3      	sub	sp, #268	; 0x10c
   8456e:	460c      	mov	r4, r1
   84570:	910b      	str	r1, [sp, #44]	; 0x2c
   84572:	4692      	mov	sl, r2
   84574:	930f      	str	r3, [sp, #60]	; 0x3c
   84576:	900c      	str	r0, [sp, #48]	; 0x30
   84578:	f002 fa56 	bl	86a28 <_localeconv_r>
   8457c:	6803      	ldr	r3, [r0, #0]
   8457e:	4618      	mov	r0, r3
   84580:	931a      	str	r3, [sp, #104]	; 0x68
   84582:	f7ff ffc3 	bl	8450c <strlen>
   84586:	89a3      	ldrh	r3, [r4, #12]
   84588:	9019      	str	r0, [sp, #100]	; 0x64
   8458a:	0619      	lsls	r1, r3, #24
   8458c:	d503      	bpl.n	84596 <_svfprintf_r+0x2e>
   8458e:	6923      	ldr	r3, [r4, #16]
   84590:	2b00      	cmp	r3, #0
   84592:	f001 8035 	beq.w	85600 <_svfprintf_r+0x1098>
   84596:	2300      	movs	r3, #0
   84598:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   8459c:	46c8      	mov	r8, r9
   8459e:	9315      	str	r3, [sp, #84]	; 0x54
   845a0:	9313      	str	r3, [sp, #76]	; 0x4c
   845a2:	9314      	str	r3, [sp, #80]	; 0x50
   845a4:	9318      	str	r3, [sp, #96]	; 0x60
   845a6:	931b      	str	r3, [sp, #108]	; 0x6c
   845a8:	9309      	str	r3, [sp, #36]	; 0x24
   845aa:	9316      	str	r3, [sp, #88]	; 0x58
   845ac:	9317      	str	r3, [sp, #92]	; 0x5c
   845ae:	9327      	str	r3, [sp, #156]	; 0x9c
   845b0:	9326      	str	r3, [sp, #152]	; 0x98
   845b2:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   845b6:	f89a 3000 	ldrb.w	r3, [sl]
   845ba:	4654      	mov	r4, sl
   845bc:	b1eb      	cbz	r3, 845fa <_svfprintf_r+0x92>
   845be:	2b25      	cmp	r3, #37	; 0x25
   845c0:	d102      	bne.n	845c8 <_svfprintf_r+0x60>
   845c2:	e01a      	b.n	845fa <_svfprintf_r+0x92>
   845c4:	2b25      	cmp	r3, #37	; 0x25
   845c6:	d003      	beq.n	845d0 <_svfprintf_r+0x68>
   845c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   845cc:	2b00      	cmp	r3, #0
   845ce:	d1f9      	bne.n	845c4 <_svfprintf_r+0x5c>
   845d0:	eba4 050a 	sub.w	r5, r4, sl
   845d4:	b18d      	cbz	r5, 845fa <_svfprintf_r+0x92>
   845d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   845d8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   845da:	3301      	adds	r3, #1
   845dc:	442a      	add	r2, r5
   845de:	2b07      	cmp	r3, #7
   845e0:	f8c8 a000 	str.w	sl, [r8]
   845e4:	f8c8 5004 	str.w	r5, [r8, #4]
   845e8:	9227      	str	r2, [sp, #156]	; 0x9c
   845ea:	9326      	str	r3, [sp, #152]	; 0x98
   845ec:	f300 808a 	bgt.w	84704 <_svfprintf_r+0x19c>
   845f0:	f108 0808 	add.w	r8, r8, #8
   845f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   845f6:	442b      	add	r3, r5
   845f8:	9309      	str	r3, [sp, #36]	; 0x24
   845fa:	7823      	ldrb	r3, [r4, #0]
   845fc:	2b00      	cmp	r3, #0
   845fe:	f000 8089 	beq.w	84714 <_svfprintf_r+0x1ac>
   84602:	2300      	movs	r3, #0
   84604:	f04f 30ff 	mov.w	r0, #4294967295
   84608:	461a      	mov	r2, r3
   8460a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8460e:	4619      	mov	r1, r3
   84610:	930d      	str	r3, [sp, #52]	; 0x34
   84612:	469b      	mov	fp, r3
   84614:	7863      	ldrb	r3, [r4, #1]
   84616:	f104 0a01 	add.w	sl, r4, #1
   8461a:	900a      	str	r0, [sp, #40]	; 0x28
   8461c:	f10a 0a01 	add.w	sl, sl, #1
   84620:	f1a3 0020 	sub.w	r0, r3, #32
   84624:	2858      	cmp	r0, #88	; 0x58
   84626:	f200 83b7 	bhi.w	84d98 <_svfprintf_r+0x830>
   8462a:	e8df f010 	tbh	[pc, r0, lsl #1]
   8462e:	034c      	.short	0x034c
   84630:	03b503b5 	.word	0x03b503b5
   84634:	03b50354 	.word	0x03b50354
   84638:	03b503b5 	.word	0x03b503b5
   8463c:	03b503b5 	.word	0x03b503b5
   84640:	005903b5 	.word	0x005903b5
   84644:	03b50359 	.word	0x03b50359
   84648:	02140066 	.word	0x02140066
   8464c:	022f03b5 	.word	0x022f03b5
   84650:	03a503a5 	.word	0x03a503a5
   84654:	03a503a5 	.word	0x03a503a5
   84658:	03a503a5 	.word	0x03a503a5
   8465c:	03a503a5 	.word	0x03a503a5
   84660:	03b503a5 	.word	0x03b503a5
   84664:	03b503b5 	.word	0x03b503b5
   84668:	03b503b5 	.word	0x03b503b5
   8466c:	03b503b5 	.word	0x03b503b5
   84670:	03b503b5 	.word	0x03b503b5
   84674:	028b03b5 	.word	0x028b03b5
   84678:	03b502d3 	.word	0x03b502d3
   8467c:	03b502d3 	.word	0x03b502d3
   84680:	03b503b5 	.word	0x03b503b5
   84684:	031b03b5 	.word	0x031b03b5
   84688:	03b503b5 	.word	0x03b503b5
   8468c:	03b50320 	.word	0x03b50320
   84690:	03b503b5 	.word	0x03b503b5
   84694:	03b503b5 	.word	0x03b503b5
   84698:	03b50234 	.word	0x03b50234
   8469c:	024b03b5 	.word	0x024b03b5
   846a0:	03b503b5 	.word	0x03b503b5
   846a4:	03b503b5 	.word	0x03b503b5
   846a8:	03b503b5 	.word	0x03b503b5
   846ac:	03b503b5 	.word	0x03b503b5
   846b0:	03b503b5 	.word	0x03b503b5
   846b4:	039e0276 	.word	0x039e0276
   846b8:	02d302d3 	.word	0x02d302d3
   846bc:	036302d3 	.word	0x036302d3
   846c0:	03b5039e 	.word	0x03b5039e
   846c4:	036803b5 	.word	0x036803b5
   846c8:	037503b5 	.word	0x037503b5
   846cc:	038c01dd 	.word	0x038c01dd
   846d0:	03b5035e 	.word	0x03b5035e
   846d4:	03b501f2 	.word	0x03b501f2
   846d8:	03b50087 	.word	0x03b50087
   846dc:	033203b5 	.word	0x033203b5
   846e0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   846e2:	6823      	ldr	r3, [r4, #0]
   846e4:	4618      	mov	r0, r3
   846e6:	930d      	str	r3, [sp, #52]	; 0x34
   846e8:	4623      	mov	r3, r4
   846ea:	2800      	cmp	r0, #0
   846ec:	f103 0304 	add.w	r3, r3, #4
   846f0:	930f      	str	r3, [sp, #60]	; 0x3c
   846f2:	da04      	bge.n	846fe <_svfprintf_r+0x196>
   846f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   846f6:	425b      	negs	r3, r3
   846f8:	930d      	str	r3, [sp, #52]	; 0x34
   846fa:	f04b 0b04 	orr.w	fp, fp, #4
   846fe:	f89a 3000 	ldrb.w	r3, [sl]
   84702:	e78b      	b.n	8461c <_svfprintf_r+0xb4>
   84704:	aa25      	add	r2, sp, #148	; 0x94
   84706:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84708:	980c      	ldr	r0, [sp, #48]	; 0x30
   8470a:	f003 f817 	bl	8773c <__ssprint_r>
   8470e:	b940      	cbnz	r0, 84722 <_svfprintf_r+0x1ba>
   84710:	46c8      	mov	r8, r9
   84712:	e76f      	b.n	845f4 <_svfprintf_r+0x8c>
   84714:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   84716:	b123      	cbz	r3, 84722 <_svfprintf_r+0x1ba>
   84718:	980c      	ldr	r0, [sp, #48]	; 0x30
   8471a:	aa25      	add	r2, sp, #148	; 0x94
   8471c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8471e:	f003 f80d 	bl	8773c <__ssprint_r>
   84722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84724:	899b      	ldrh	r3, [r3, #12]
   84726:	f013 0f40 	tst.w	r3, #64	; 0x40
   8472a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8472c:	bf18      	it	ne
   8472e:	f04f 33ff 	movne.w	r3, #4294967295
   84732:	9309      	str	r3, [sp, #36]	; 0x24
   84734:	9809      	ldr	r0, [sp, #36]	; 0x24
   84736:	b043      	add	sp, #268	; 0x10c
   84738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8473c:	f01b 0f20 	tst.w	fp, #32
   84740:	9311      	str	r3, [sp, #68]	; 0x44
   84742:	f040 81af 	bne.w	84aa4 <_svfprintf_r+0x53c>
   84746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84748:	f01b 0f10 	tst.w	fp, #16
   8474c:	4613      	mov	r3, r2
   8474e:	f040 859a 	bne.w	85286 <_svfprintf_r+0xd1e>
   84752:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84756:	f000 8596 	beq.w	85286 <_svfprintf_r+0xd1e>
   8475a:	2500      	movs	r5, #0
   8475c:	2301      	movs	r3, #1
   8475e:	8814      	ldrh	r4, [r2, #0]
   84760:	3204      	adds	r2, #4
   84762:	920f      	str	r2, [sp, #60]	; 0x3c
   84764:	2200      	movs	r2, #0
   84766:	4617      	mov	r7, r2
   84768:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   8476c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8476e:	1c4a      	adds	r2, r1, #1
   84770:	f000 8210 	beq.w	84b94 <_svfprintf_r+0x62c>
   84774:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   84778:	9207      	str	r2, [sp, #28]
   8477a:	ea54 0205 	orrs.w	r2, r4, r5
   8477e:	f040 820f 	bne.w	84ba0 <_svfprintf_r+0x638>
   84782:	2900      	cmp	r1, #0
   84784:	f040 8431 	bne.w	84fea <_svfprintf_r+0xa82>
   84788:	2b00      	cmp	r3, #0
   8478a:	f040 8539 	bne.w	85200 <_svfprintf_r+0xc98>
   8478e:	f01b 0301 	ands.w	r3, fp, #1
   84792:	930e      	str	r3, [sp, #56]	; 0x38
   84794:	f000 8662 	beq.w	8545c <_svfprintf_r+0xef4>
   84798:	2330      	movs	r3, #48	; 0x30
   8479a:	ae42      	add	r6, sp, #264	; 0x108
   8479c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   847a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   847a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   847a4:	4293      	cmp	r3, r2
   847a6:	bfb8      	it	lt
   847a8:	4613      	movlt	r3, r2
   847aa:	9308      	str	r3, [sp, #32]
   847ac:	2300      	movs	r3, #0
   847ae:	9312      	str	r3, [sp, #72]	; 0x48
   847b0:	b117      	cbz	r7, 847b8 <_svfprintf_r+0x250>
   847b2:	9b08      	ldr	r3, [sp, #32]
   847b4:	3301      	adds	r3, #1
   847b6:	9308      	str	r3, [sp, #32]
   847b8:	9b07      	ldr	r3, [sp, #28]
   847ba:	f013 0302 	ands.w	r3, r3, #2
   847be:	9310      	str	r3, [sp, #64]	; 0x40
   847c0:	d002      	beq.n	847c8 <_svfprintf_r+0x260>
   847c2:	9b08      	ldr	r3, [sp, #32]
   847c4:	3302      	adds	r3, #2
   847c6:	9308      	str	r3, [sp, #32]
   847c8:	9b07      	ldr	r3, [sp, #28]
   847ca:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   847ce:	f040 8310 	bne.w	84df2 <_svfprintf_r+0x88a>
   847d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   847d4:	9a08      	ldr	r2, [sp, #32]
   847d6:	eba3 0b02 	sub.w	fp, r3, r2
   847da:	f1bb 0f00 	cmp.w	fp, #0
   847de:	f340 8308 	ble.w	84df2 <_svfprintf_r+0x88a>
   847e2:	f1bb 0f10 	cmp.w	fp, #16
   847e6:	f340 87b2 	ble.w	8574e <_svfprintf_r+0x11e6>
   847ea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   847ec:	4643      	mov	r3, r8
   847ee:	4621      	mov	r1, r4
   847f0:	46a8      	mov	r8, r5
   847f2:	2710      	movs	r7, #16
   847f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   847f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   847f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   847fa:	e006      	b.n	8480a <_svfprintf_r+0x2a2>
   847fc:	f1ab 0b10 	sub.w	fp, fp, #16
   84800:	f1bb 0f10 	cmp.w	fp, #16
   84804:	f103 0308 	add.w	r3, r3, #8
   84808:	dd18      	ble.n	8483c <_svfprintf_r+0x2d4>
   8480a:	3201      	adds	r2, #1
   8480c:	48ab      	ldr	r0, [pc, #684]	; (84abc <_svfprintf_r+0x554>)
   8480e:	3110      	adds	r1, #16
   84810:	2a07      	cmp	r2, #7
   84812:	9127      	str	r1, [sp, #156]	; 0x9c
   84814:	9226      	str	r2, [sp, #152]	; 0x98
   84816:	e883 0081 	stmia.w	r3, {r0, r7}
   8481a:	ddef      	ble.n	847fc <_svfprintf_r+0x294>
   8481c:	aa25      	add	r2, sp, #148	; 0x94
   8481e:	4629      	mov	r1, r5
   84820:	4620      	mov	r0, r4
   84822:	f002 ff8b 	bl	8773c <__ssprint_r>
   84826:	2800      	cmp	r0, #0
   84828:	f47f af7b 	bne.w	84722 <_svfprintf_r+0x1ba>
   8482c:	f1ab 0b10 	sub.w	fp, fp, #16
   84830:	f1bb 0f10 	cmp.w	fp, #16
   84834:	464b      	mov	r3, r9
   84836:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84838:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8483a:	dce6      	bgt.n	8480a <_svfprintf_r+0x2a2>
   8483c:	4645      	mov	r5, r8
   8483e:	460c      	mov	r4, r1
   84840:	4698      	mov	r8, r3
   84842:	3201      	adds	r2, #1
   84844:	4b9d      	ldr	r3, [pc, #628]	; (84abc <_svfprintf_r+0x554>)
   84846:	445c      	add	r4, fp
   84848:	2a07      	cmp	r2, #7
   8484a:	9427      	str	r4, [sp, #156]	; 0x9c
   8484c:	9226      	str	r2, [sp, #152]	; 0x98
   8484e:	e888 0808 	stmia.w	r8, {r3, fp}
   84852:	f300 82c3 	bgt.w	84ddc <_svfprintf_r+0x874>
   84856:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8485a:	f108 0808 	add.w	r8, r8, #8
   8485e:	b187      	cbz	r7, 84882 <_svfprintf_r+0x31a>
   84860:	2101      	movs	r1, #1
   84862:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84864:	440c      	add	r4, r1
   84866:	440b      	add	r3, r1
   84868:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   8486c:	2b07      	cmp	r3, #7
   8486e:	9427      	str	r4, [sp, #156]	; 0x9c
   84870:	9326      	str	r3, [sp, #152]	; 0x98
   84872:	f8c8 1004 	str.w	r1, [r8, #4]
   84876:	f8c8 2000 	str.w	r2, [r8]
   8487a:	f300 83cd 	bgt.w	85018 <_svfprintf_r+0xab0>
   8487e:	f108 0808 	add.w	r8, r8, #8
   84882:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84884:	b17b      	cbz	r3, 848a6 <_svfprintf_r+0x33e>
   84886:	2102      	movs	r1, #2
   84888:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8488a:	440c      	add	r4, r1
   8488c:	3301      	adds	r3, #1
   8488e:	aa1e      	add	r2, sp, #120	; 0x78
   84890:	2b07      	cmp	r3, #7
   84892:	9427      	str	r4, [sp, #156]	; 0x9c
   84894:	9326      	str	r3, [sp, #152]	; 0x98
   84896:	f8c8 1004 	str.w	r1, [r8, #4]
   8489a:	f8c8 2000 	str.w	r2, [r8]
   8489e:	f300 8411 	bgt.w	850c4 <_svfprintf_r+0xb5c>
   848a2:	f108 0808 	add.w	r8, r8, #8
   848a6:	2d80      	cmp	r5, #128	; 0x80
   848a8:	f000 8304 	beq.w	84eb4 <_svfprintf_r+0x94c>
   848ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   848ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   848b0:	1a9f      	subs	r7, r3, r2
   848b2:	2f00      	cmp	r7, #0
   848b4:	dd37      	ble.n	84926 <_svfprintf_r+0x3be>
   848b6:	2f10      	cmp	r7, #16
   848b8:	f340 8679 	ble.w	855ae <_svfprintf_r+0x1046>
   848bc:	4d80      	ldr	r5, [pc, #512]	; (84ac0 <_svfprintf_r+0x558>)
   848be:	4642      	mov	r2, r8
   848c0:	4621      	mov	r1, r4
   848c2:	46b0      	mov	r8, r6
   848c4:	f04f 0b10 	mov.w	fp, #16
   848c8:	462e      	mov	r6, r5
   848ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   848cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   848ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   848d0:	e004      	b.n	848dc <_svfprintf_r+0x374>
   848d2:	3f10      	subs	r7, #16
   848d4:	2f10      	cmp	r7, #16
   848d6:	f102 0208 	add.w	r2, r2, #8
   848da:	dd15      	ble.n	84908 <_svfprintf_r+0x3a0>
   848dc:	3301      	adds	r3, #1
   848de:	3110      	adds	r1, #16
   848e0:	2b07      	cmp	r3, #7
   848e2:	9127      	str	r1, [sp, #156]	; 0x9c
   848e4:	9326      	str	r3, [sp, #152]	; 0x98
   848e6:	e882 0840 	stmia.w	r2, {r6, fp}
   848ea:	ddf2      	ble.n	848d2 <_svfprintf_r+0x36a>
   848ec:	aa25      	add	r2, sp, #148	; 0x94
   848ee:	4629      	mov	r1, r5
   848f0:	4620      	mov	r0, r4
   848f2:	f002 ff23 	bl	8773c <__ssprint_r>
   848f6:	2800      	cmp	r0, #0
   848f8:	f47f af13 	bne.w	84722 <_svfprintf_r+0x1ba>
   848fc:	3f10      	subs	r7, #16
   848fe:	2f10      	cmp	r7, #16
   84900:	464a      	mov	r2, r9
   84902:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84904:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84906:	dce9      	bgt.n	848dc <_svfprintf_r+0x374>
   84908:	4635      	mov	r5, r6
   8490a:	460c      	mov	r4, r1
   8490c:	4646      	mov	r6, r8
   8490e:	4690      	mov	r8, r2
   84910:	3301      	adds	r3, #1
   84912:	443c      	add	r4, r7
   84914:	2b07      	cmp	r3, #7
   84916:	9427      	str	r4, [sp, #156]	; 0x9c
   84918:	9326      	str	r3, [sp, #152]	; 0x98
   8491a:	e888 00a0 	stmia.w	r8, {r5, r7}
   8491e:	f300 8370 	bgt.w	85002 <_svfprintf_r+0xa9a>
   84922:	f108 0808 	add.w	r8, r8, #8
   84926:	9b07      	ldr	r3, [sp, #28]
   84928:	05df      	lsls	r7, r3, #23
   8492a:	f100 8264 	bmi.w	84df6 <_svfprintf_r+0x88e>
   8492e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84930:	990e      	ldr	r1, [sp, #56]	; 0x38
   84932:	3301      	adds	r3, #1
   84934:	440c      	add	r4, r1
   84936:	2b07      	cmp	r3, #7
   84938:	9427      	str	r4, [sp, #156]	; 0x9c
   8493a:	f8c8 6000 	str.w	r6, [r8]
   8493e:	f8c8 1004 	str.w	r1, [r8, #4]
   84942:	9326      	str	r3, [sp, #152]	; 0x98
   84944:	f300 83b3 	bgt.w	850ae <_svfprintf_r+0xb46>
   84948:	f108 0808 	add.w	r8, r8, #8
   8494c:	9b07      	ldr	r3, [sp, #28]
   8494e:	075b      	lsls	r3, r3, #29
   84950:	d53b      	bpl.n	849ca <_svfprintf_r+0x462>
   84952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84954:	9a08      	ldr	r2, [sp, #32]
   84956:	1a9d      	subs	r5, r3, r2
   84958:	2d00      	cmp	r5, #0
   8495a:	dd36      	ble.n	849ca <_svfprintf_r+0x462>
   8495c:	2d10      	cmp	r5, #16
   8495e:	f340 8721 	ble.w	857a4 <_svfprintf_r+0x123c>
   84962:	2610      	movs	r6, #16
   84964:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84966:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   84968:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   8496c:	e004      	b.n	84978 <_svfprintf_r+0x410>
   8496e:	3d10      	subs	r5, #16
   84970:	2d10      	cmp	r5, #16
   84972:	f108 0808 	add.w	r8, r8, #8
   84976:	dd16      	ble.n	849a6 <_svfprintf_r+0x43e>
   84978:	3301      	adds	r3, #1
   8497a:	4a50      	ldr	r2, [pc, #320]	; (84abc <_svfprintf_r+0x554>)
   8497c:	3410      	adds	r4, #16
   8497e:	2b07      	cmp	r3, #7
   84980:	9427      	str	r4, [sp, #156]	; 0x9c
   84982:	9326      	str	r3, [sp, #152]	; 0x98
   84984:	e888 0044 	stmia.w	r8, {r2, r6}
   84988:	ddf1      	ble.n	8496e <_svfprintf_r+0x406>
   8498a:	aa25      	add	r2, sp, #148	; 0x94
   8498c:	4659      	mov	r1, fp
   8498e:	4638      	mov	r0, r7
   84990:	f002 fed4 	bl	8773c <__ssprint_r>
   84994:	2800      	cmp	r0, #0
   84996:	f47f aec4 	bne.w	84722 <_svfprintf_r+0x1ba>
   8499a:	3d10      	subs	r5, #16
   8499c:	2d10      	cmp	r5, #16
   8499e:	46c8      	mov	r8, r9
   849a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   849a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   849a4:	dce8      	bgt.n	84978 <_svfprintf_r+0x410>
   849a6:	3301      	adds	r3, #1
   849a8:	4a44      	ldr	r2, [pc, #272]	; (84abc <_svfprintf_r+0x554>)
   849aa:	442c      	add	r4, r5
   849ac:	2b07      	cmp	r3, #7
   849ae:	9427      	str	r4, [sp, #156]	; 0x9c
   849b0:	9326      	str	r3, [sp, #152]	; 0x98
   849b2:	e888 0024 	stmia.w	r8, {r2, r5}
   849b6:	dd08      	ble.n	849ca <_svfprintf_r+0x462>
   849b8:	aa25      	add	r2, sp, #148	; 0x94
   849ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   849bc:	980c      	ldr	r0, [sp, #48]	; 0x30
   849be:	f002 febd 	bl	8773c <__ssprint_r>
   849c2:	2800      	cmp	r0, #0
   849c4:	f47f aead 	bne.w	84722 <_svfprintf_r+0x1ba>
   849c8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   849ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   849cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   849ce:	9908      	ldr	r1, [sp, #32]
   849d0:	428a      	cmp	r2, r1
   849d2:	bfac      	ite	ge
   849d4:	189b      	addge	r3, r3, r2
   849d6:	185b      	addlt	r3, r3, r1
   849d8:	9309      	str	r3, [sp, #36]	; 0x24
   849da:	2c00      	cmp	r4, #0
   849dc:	f040 82fb 	bne.w	84fd6 <_svfprintf_r+0xa6e>
   849e0:	2300      	movs	r3, #0
   849e2:	46c8      	mov	r8, r9
   849e4:	9326      	str	r3, [sp, #152]	; 0x98
   849e6:	e5e6      	b.n	845b6 <_svfprintf_r+0x4e>
   849e8:	9311      	str	r3, [sp, #68]	; 0x44
   849ea:	f01b 0320 	ands.w	r3, fp, #32
   849ee:	f040 8145 	bne.w	84c7c <_svfprintf_r+0x714>
   849f2:	f01b 0210 	ands.w	r2, fp, #16
   849f6:	f040 8466 	bne.w	852c6 <_svfprintf_r+0xd5e>
   849fa:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   849fe:	f000 8462 	beq.w	852c6 <_svfprintf_r+0xd5e>
   84a02:	990f      	ldr	r1, [sp, #60]	; 0x3c
   84a04:	4613      	mov	r3, r2
   84a06:	460a      	mov	r2, r1
   84a08:	3204      	adds	r2, #4
   84a0a:	880c      	ldrh	r4, [r1, #0]
   84a0c:	2500      	movs	r5, #0
   84a0e:	920f      	str	r2, [sp, #60]	; 0x3c
   84a10:	e6a8      	b.n	84764 <_svfprintf_r+0x1fc>
   84a12:	2500      	movs	r5, #0
   84a14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84a16:	9311      	str	r3, [sp, #68]	; 0x44
   84a18:	6816      	ldr	r6, [r2, #0]
   84a1a:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   84a1e:	1d14      	adds	r4, r2, #4
   84a20:	2e00      	cmp	r6, #0
   84a22:	f000 86cd 	beq.w	857c0 <_svfprintf_r+0x1258>
   84a26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84a28:	1c53      	adds	r3, r2, #1
   84a2a:	f000 861b 	beq.w	85664 <_svfprintf_r+0x10fc>
   84a2e:	4629      	mov	r1, r5
   84a30:	4630      	mov	r0, r6
   84a32:	f002 faad 	bl	86f90 <memchr>
   84a36:	2800      	cmp	r0, #0
   84a38:	f000 870d 	beq.w	85856 <_svfprintf_r+0x12ee>
   84a3c:	1b83      	subs	r3, r0, r6
   84a3e:	950a      	str	r5, [sp, #40]	; 0x28
   84a40:	930e      	str	r3, [sp, #56]	; 0x38
   84a42:	940f      	str	r4, [sp, #60]	; 0x3c
   84a44:	f8cd b01c 	str.w	fp, [sp, #28]
   84a48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   84a4c:	9308      	str	r3, [sp, #32]
   84a4e:	9512      	str	r5, [sp, #72]	; 0x48
   84a50:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84a54:	e6ac      	b.n	847b0 <_svfprintf_r+0x248>
   84a56:	f89a 3000 	ldrb.w	r3, [sl]
   84a5a:	f10a 0401 	add.w	r4, sl, #1
   84a5e:	2b2a      	cmp	r3, #42	; 0x2a
   84a60:	f000 87c2 	beq.w	859e8 <_svfprintf_r+0x1480>
   84a64:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84a68:	2809      	cmp	r0, #9
   84a6a:	46a2      	mov	sl, r4
   84a6c:	f200 8718 	bhi.w	858a0 <_svfprintf_r+0x1338>
   84a70:	2300      	movs	r3, #0
   84a72:	461c      	mov	r4, r3
   84a74:	f81a 3b01 	ldrb.w	r3, [sl], #1
   84a78:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84a7c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   84a80:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84a84:	2809      	cmp	r0, #9
   84a86:	d9f5      	bls.n	84a74 <_svfprintf_r+0x50c>
   84a88:	940a      	str	r4, [sp, #40]	; 0x28
   84a8a:	e5c9      	b.n	84620 <_svfprintf_r+0xb8>
   84a8c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   84a90:	f89a 3000 	ldrb.w	r3, [sl]
   84a94:	e5c2      	b.n	8461c <_svfprintf_r+0xb4>
   84a96:	f04b 0b10 	orr.w	fp, fp, #16
   84a9a:	f01b 0f20 	tst.w	fp, #32
   84a9e:	9311      	str	r3, [sp, #68]	; 0x44
   84aa0:	f43f ae51 	beq.w	84746 <_svfprintf_r+0x1de>
   84aa4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84aa6:	3407      	adds	r4, #7
   84aa8:	f024 0307 	bic.w	r3, r4, #7
   84aac:	f103 0208 	add.w	r2, r3, #8
   84ab0:	e9d3 4500 	ldrd	r4, r5, [r3]
   84ab4:	920f      	str	r2, [sp, #60]	; 0x3c
   84ab6:	2301      	movs	r3, #1
   84ab8:	e654      	b.n	84764 <_svfprintf_r+0x1fc>
   84aba:	bf00      	nop
   84abc:	0008864c 	.word	0x0008864c
   84ac0:	0008865c 	.word	0x0008865c
   84ac4:	9311      	str	r3, [sp, #68]	; 0x44
   84ac6:	2a00      	cmp	r2, #0
   84ac8:	f040 87ad 	bne.w	85a26 <_svfprintf_r+0x14be>
   84acc:	4bbe      	ldr	r3, [pc, #760]	; (84dc8 <_svfprintf_r+0x860>)
   84ace:	f01b 0f20 	tst.w	fp, #32
   84ad2:	9318      	str	r3, [sp, #96]	; 0x60
   84ad4:	f040 80e7 	bne.w	84ca6 <_svfprintf_r+0x73e>
   84ad8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84ada:	f01b 0f10 	tst.w	fp, #16
   84ade:	4613      	mov	r3, r2
   84ae0:	f040 83d8 	bne.w	85294 <_svfprintf_r+0xd2c>
   84ae4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84ae8:	f000 83d4 	beq.w	85294 <_svfprintf_r+0xd2c>
   84aec:	2500      	movs	r5, #0
   84aee:	3304      	adds	r3, #4
   84af0:	8814      	ldrh	r4, [r2, #0]
   84af2:	930f      	str	r3, [sp, #60]	; 0x3c
   84af4:	f01b 0f01 	tst.w	fp, #1
   84af8:	f000 80e3 	beq.w	84cc2 <_svfprintf_r+0x75a>
   84afc:	ea54 0305 	orrs.w	r3, r4, r5
   84b00:	f000 80df 	beq.w	84cc2 <_svfprintf_r+0x75a>
   84b04:	2330      	movs	r3, #48	; 0x30
   84b06:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   84b0a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   84b0e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   84b12:	f04b 0b02 	orr.w	fp, fp, #2
   84b16:	2302      	movs	r3, #2
   84b18:	e624      	b.n	84764 <_svfprintf_r+0x1fc>
   84b1a:	2201      	movs	r2, #1
   84b1c:	9311      	str	r3, [sp, #68]	; 0x44
   84b1e:	2300      	movs	r3, #0
   84b20:	4611      	mov	r1, r2
   84b22:	980f      	ldr	r0, [sp, #60]	; 0x3c
   84b24:	9208      	str	r2, [sp, #32]
   84b26:	6802      	ldr	r2, [r0, #0]
   84b28:	461f      	mov	r7, r3
   84b2a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84b2e:	930a      	str	r3, [sp, #40]	; 0x28
   84b30:	9312      	str	r3, [sp, #72]	; 0x48
   84b32:	1d03      	adds	r3, r0, #4
   84b34:	f8cd b01c 	str.w	fp, [sp, #28]
   84b38:	910e      	str	r1, [sp, #56]	; 0x38
   84b3a:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   84b3e:	930f      	str	r3, [sp, #60]	; 0x3c
   84b40:	ae28      	add	r6, sp, #160	; 0xa0
   84b42:	e639      	b.n	847b8 <_svfprintf_r+0x250>
   84b44:	9311      	str	r3, [sp, #68]	; 0x44
   84b46:	2a00      	cmp	r2, #0
   84b48:	f040 8784 	bne.w	85a54 <_svfprintf_r+0x14ec>
   84b4c:	f04b 0b10 	orr.w	fp, fp, #16
   84b50:	f01b 0f20 	tst.w	fp, #32
   84b54:	f040 8475 	bne.w	85442 <_svfprintf_r+0xeda>
   84b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84b5a:	f01b 0f10 	tst.w	fp, #16
   84b5e:	4613      	mov	r3, r2
   84b60:	f040 839d 	bne.w	8529e <_svfprintf_r+0xd36>
   84b64:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84b68:	f000 8399 	beq.w	8529e <_svfprintf_r+0xd36>
   84b6c:	f9b2 4000 	ldrsh.w	r4, [r2]
   84b70:	3304      	adds	r3, #4
   84b72:	17e5      	asrs	r5, r4, #31
   84b74:	930f      	str	r3, [sp, #60]	; 0x3c
   84b76:	4622      	mov	r2, r4
   84b78:	462b      	mov	r3, r5
   84b7a:	2a00      	cmp	r2, #0
   84b7c:	f173 0300 	sbcs.w	r3, r3, #0
   84b80:	f2c0 8398 	blt.w	852b4 <_svfprintf_r+0xd4c>
   84b84:	990a      	ldr	r1, [sp, #40]	; 0x28
   84b86:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84b8a:	1c4a      	adds	r2, r1, #1
   84b8c:	f04f 0301 	mov.w	r3, #1
   84b90:	f47f adf0 	bne.w	84774 <_svfprintf_r+0x20c>
   84b94:	ea54 0205 	orrs.w	r2, r4, r5
   84b98:	f000 8229 	beq.w	84fee <_svfprintf_r+0xa86>
   84b9c:	f8cd b01c 	str.w	fp, [sp, #28]
   84ba0:	2b01      	cmp	r3, #1
   84ba2:	f000 830e 	beq.w	851c2 <_svfprintf_r+0xc5a>
   84ba6:	2b02      	cmp	r3, #2
   84ba8:	f040 829c 	bne.w	850e4 <_svfprintf_r+0xb7c>
   84bac:	464e      	mov	r6, r9
   84bae:	9818      	ldr	r0, [sp, #96]	; 0x60
   84bb0:	0923      	lsrs	r3, r4, #4
   84bb2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   84bb6:	0929      	lsrs	r1, r5, #4
   84bb8:	f004 020f 	and.w	r2, r4, #15
   84bbc:	460d      	mov	r5, r1
   84bbe:	461c      	mov	r4, r3
   84bc0:	5c83      	ldrb	r3, [r0, r2]
   84bc2:	f806 3d01 	strb.w	r3, [r6, #-1]!
   84bc6:	ea54 0305 	orrs.w	r3, r4, r5
   84bca:	d1f1      	bne.n	84bb0 <_svfprintf_r+0x648>
   84bcc:	eba9 0306 	sub.w	r3, r9, r6
   84bd0:	930e      	str	r3, [sp, #56]	; 0x38
   84bd2:	e5e5      	b.n	847a0 <_svfprintf_r+0x238>
   84bd4:	9311      	str	r3, [sp, #68]	; 0x44
   84bd6:	2a00      	cmp	r2, #0
   84bd8:	f040 8738 	bne.w	85a4c <_svfprintf_r+0x14e4>
   84bdc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84bde:	f01b 0f08 	tst.w	fp, #8
   84be2:	f104 0407 	add.w	r4, r4, #7
   84be6:	f000 84cf 	beq.w	85588 <_svfprintf_r+0x1020>
   84bea:	f024 0307 	bic.w	r3, r4, #7
   84bee:	f103 0208 	add.w	r2, r3, #8
   84bf2:	920f      	str	r2, [sp, #60]	; 0x3c
   84bf4:	681a      	ldr	r2, [r3, #0]
   84bf6:	685b      	ldr	r3, [r3, #4]
   84bf8:	9215      	str	r2, [sp, #84]	; 0x54
   84bfa:	9314      	str	r3, [sp, #80]	; 0x50
   84bfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84bfe:	9d15      	ldr	r5, [sp, #84]	; 0x54
   84c00:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   84c04:	4628      	mov	r0, r5
   84c06:	4621      	mov	r1, r4
   84c08:	f04f 32ff 	mov.w	r2, #4294967295
   84c0c:	4b6f      	ldr	r3, [pc, #444]	; (84dcc <_svfprintf_r+0x864>)
   84c0e:	f003 fa9f 	bl	88150 <__aeabi_dcmpun>
   84c12:	2800      	cmp	r0, #0
   84c14:	f040 8434 	bne.w	85480 <_svfprintf_r+0xf18>
   84c18:	4628      	mov	r0, r5
   84c1a:	4621      	mov	r1, r4
   84c1c:	f04f 32ff 	mov.w	r2, #4294967295
   84c20:	4b6a      	ldr	r3, [pc, #424]	; (84dcc <_svfprintf_r+0x864>)
   84c22:	f003 fa77 	bl	88114 <__aeabi_dcmple>
   84c26:	2800      	cmp	r0, #0
   84c28:	f040 842a 	bne.w	85480 <_svfprintf_r+0xf18>
   84c2c:	a815      	add	r0, sp, #84	; 0x54
   84c2e:	c80d      	ldmia	r0, {r0, r2, r3}
   84c30:	9914      	ldr	r1, [sp, #80]	; 0x50
   84c32:	f003 fa65 	bl	88100 <__aeabi_dcmplt>
   84c36:	2800      	cmp	r0, #0
   84c38:	f040 85d4 	bne.w	857e4 <_svfprintf_r+0x127c>
   84c3c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84c40:	2303      	movs	r3, #3
   84c42:	461a      	mov	r2, r3
   84c44:	9308      	str	r3, [sp, #32]
   84c46:	2300      	movs	r3, #0
   84c48:	4e61      	ldr	r6, [pc, #388]	; (84dd0 <_svfprintf_r+0x868>)
   84c4a:	4619      	mov	r1, r3
   84c4c:	930a      	str	r3, [sp, #40]	; 0x28
   84c4e:	4b61      	ldr	r3, [pc, #388]	; (84dd4 <_svfprintf_r+0x86c>)
   84c50:	920e      	str	r2, [sp, #56]	; 0x38
   84c52:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84c54:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   84c58:	9007      	str	r0, [sp, #28]
   84c5a:	9112      	str	r1, [sp, #72]	; 0x48
   84c5c:	2a47      	cmp	r2, #71	; 0x47
   84c5e:	bfd8      	it	le
   84c60:	461e      	movle	r6, r3
   84c62:	e5a5      	b.n	847b0 <_svfprintf_r+0x248>
   84c64:	f04b 0b08 	orr.w	fp, fp, #8
   84c68:	f89a 3000 	ldrb.w	r3, [sl]
   84c6c:	e4d6      	b.n	8461c <_svfprintf_r+0xb4>
   84c6e:	f04b 0b10 	orr.w	fp, fp, #16
   84c72:	9311      	str	r3, [sp, #68]	; 0x44
   84c74:	f01b 0320 	ands.w	r3, fp, #32
   84c78:	f43f aebb 	beq.w	849f2 <_svfprintf_r+0x48a>
   84c7c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84c7e:	3407      	adds	r4, #7
   84c80:	f024 0307 	bic.w	r3, r4, #7
   84c84:	f103 0208 	add.w	r2, r3, #8
   84c88:	e9d3 4500 	ldrd	r4, r5, [r3]
   84c8c:	920f      	str	r2, [sp, #60]	; 0x3c
   84c8e:	2300      	movs	r3, #0
   84c90:	e568      	b.n	84764 <_svfprintf_r+0x1fc>
   84c92:	9311      	str	r3, [sp, #68]	; 0x44
   84c94:	2a00      	cmp	r2, #0
   84c96:	f040 86c2 	bne.w	85a1e <_svfprintf_r+0x14b6>
   84c9a:	4b4f      	ldr	r3, [pc, #316]	; (84dd8 <_svfprintf_r+0x870>)
   84c9c:	f01b 0f20 	tst.w	fp, #32
   84ca0:	9318      	str	r3, [sp, #96]	; 0x60
   84ca2:	f43f af19 	beq.w	84ad8 <_svfprintf_r+0x570>
   84ca6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84ca8:	f01b 0f01 	tst.w	fp, #1
   84cac:	f104 0407 	add.w	r4, r4, #7
   84cb0:	f024 0307 	bic.w	r3, r4, #7
   84cb4:	f103 0208 	add.w	r2, r3, #8
   84cb8:	920f      	str	r2, [sp, #60]	; 0x3c
   84cba:	e9d3 4500 	ldrd	r4, r5, [r3]
   84cbe:	f47f af1d 	bne.w	84afc <_svfprintf_r+0x594>
   84cc2:	2302      	movs	r3, #2
   84cc4:	e54e      	b.n	84764 <_svfprintf_r+0x1fc>
   84cc6:	f89a 3000 	ldrb.w	r3, [sl]
   84cca:	2900      	cmp	r1, #0
   84ccc:	f47f aca6 	bne.w	8461c <_svfprintf_r+0xb4>
   84cd0:	2201      	movs	r2, #1
   84cd2:	2120      	movs	r1, #32
   84cd4:	e4a2      	b.n	8461c <_svfprintf_r+0xb4>
   84cd6:	f04b 0b01 	orr.w	fp, fp, #1
   84cda:	f89a 3000 	ldrb.w	r3, [sl]
   84cde:	e49d      	b.n	8461c <_svfprintf_r+0xb4>
   84ce0:	f89a 3000 	ldrb.w	r3, [sl]
   84ce4:	2201      	movs	r2, #1
   84ce6:	212b      	movs	r1, #43	; 0x2b
   84ce8:	e498      	b.n	8461c <_svfprintf_r+0xb4>
   84cea:	f04b 0b20 	orr.w	fp, fp, #32
   84cee:	f89a 3000 	ldrb.w	r3, [sl]
   84cf2:	e493      	b.n	8461c <_svfprintf_r+0xb4>
   84cf4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   84cf8:	f89a 3000 	ldrb.w	r3, [sl]
   84cfc:	e48e      	b.n	8461c <_svfprintf_r+0xb4>
   84cfe:	f89a 3000 	ldrb.w	r3, [sl]
   84d02:	2b6c      	cmp	r3, #108	; 0x6c
   84d04:	bf03      	ittte	eq
   84d06:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   84d0a:	f04b 0b20 	orreq.w	fp, fp, #32
   84d0e:	f10a 0a01 	addeq.w	sl, sl, #1
   84d12:	f04b 0b10 	orrne.w	fp, fp, #16
   84d16:	e481      	b.n	8461c <_svfprintf_r+0xb4>
   84d18:	2a00      	cmp	r2, #0
   84d1a:	f040 867c 	bne.w	85a16 <_svfprintf_r+0x14ae>
   84d1e:	f01b 0f20 	tst.w	fp, #32
   84d22:	f040 8452 	bne.w	855ca <_svfprintf_r+0x1062>
   84d26:	f01b 0f10 	tst.w	fp, #16
   84d2a:	f040 8438 	bne.w	8559e <_svfprintf_r+0x1036>
   84d2e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84d32:	f000 8434 	beq.w	8559e <_svfprintf_r+0x1036>
   84d36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84d38:	6813      	ldr	r3, [r2, #0]
   84d3a:	3204      	adds	r2, #4
   84d3c:	920f      	str	r2, [sp, #60]	; 0x3c
   84d3e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   84d42:	801a      	strh	r2, [r3, #0]
   84d44:	e437      	b.n	845b6 <_svfprintf_r+0x4e>
   84d46:	2378      	movs	r3, #120	; 0x78
   84d48:	2230      	movs	r2, #48	; 0x30
   84d4a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   84d4c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   84d50:	9311      	str	r3, [sp, #68]	; 0x44
   84d52:	1d03      	adds	r3, r0, #4
   84d54:	930f      	str	r3, [sp, #60]	; 0x3c
   84d56:	4b20      	ldr	r3, [pc, #128]	; (84dd8 <_svfprintf_r+0x870>)
   84d58:	6804      	ldr	r4, [r0, #0]
   84d5a:	9318      	str	r3, [sp, #96]	; 0x60
   84d5c:	f04b 0b02 	orr.w	fp, fp, #2
   84d60:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   84d64:	2500      	movs	r5, #0
   84d66:	2302      	movs	r3, #2
   84d68:	e4fc      	b.n	84764 <_svfprintf_r+0x1fc>
   84d6a:	9311      	str	r3, [sp, #68]	; 0x44
   84d6c:	2a00      	cmp	r2, #0
   84d6e:	f43f aeef 	beq.w	84b50 <_svfprintf_r+0x5e8>
   84d72:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84d76:	e6eb      	b.n	84b50 <_svfprintf_r+0x5e8>
   84d78:	2000      	movs	r0, #0
   84d7a:	4604      	mov	r4, r0
   84d7c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84d80:	f81a 3b01 	ldrb.w	r3, [sl], #1
   84d84:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84d88:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   84d8c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84d90:	2809      	cmp	r0, #9
   84d92:	d9f5      	bls.n	84d80 <_svfprintf_r+0x818>
   84d94:	940d      	str	r4, [sp, #52]	; 0x34
   84d96:	e443      	b.n	84620 <_svfprintf_r+0xb8>
   84d98:	9311      	str	r3, [sp, #68]	; 0x44
   84d9a:	2a00      	cmp	r2, #0
   84d9c:	f040 864a 	bne.w	85a34 <_svfprintf_r+0x14cc>
   84da0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84da2:	2a00      	cmp	r2, #0
   84da4:	f43f acb6 	beq.w	84714 <_svfprintf_r+0x1ac>
   84da8:	2300      	movs	r3, #0
   84daa:	2101      	movs	r1, #1
   84dac:	461f      	mov	r7, r3
   84dae:	9108      	str	r1, [sp, #32]
   84db0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   84db4:	f8cd b01c 	str.w	fp, [sp, #28]
   84db8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84dbc:	930a      	str	r3, [sp, #40]	; 0x28
   84dbe:	9312      	str	r3, [sp, #72]	; 0x48
   84dc0:	910e      	str	r1, [sp, #56]	; 0x38
   84dc2:	ae28      	add	r6, sp, #160	; 0xa0
   84dc4:	e4f8      	b.n	847b8 <_svfprintf_r+0x250>
   84dc6:	bf00      	nop
   84dc8:	00088618 	.word	0x00088618
   84dcc:	7fefffff 	.word	0x7fefffff
   84dd0:	0008860c 	.word	0x0008860c
   84dd4:	00088608 	.word	0x00088608
   84dd8:	0008862c 	.word	0x0008862c
   84ddc:	aa25      	add	r2, sp, #148	; 0x94
   84dde:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84de0:	980c      	ldr	r0, [sp, #48]	; 0x30
   84de2:	f002 fcab 	bl	8773c <__ssprint_r>
   84de6:	2800      	cmp	r0, #0
   84de8:	f47f ac9b 	bne.w	84722 <_svfprintf_r+0x1ba>
   84dec:	46c8      	mov	r8, r9
   84dee:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84df2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84df4:	e533      	b.n	8485e <_svfprintf_r+0x2f6>
   84df6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84df8:	2b65      	cmp	r3, #101	; 0x65
   84dfa:	f340 809a 	ble.w	84f32 <_svfprintf_r+0x9ca>
   84dfe:	a815      	add	r0, sp, #84	; 0x54
   84e00:	c80d      	ldmia	r0, {r0, r2, r3}
   84e02:	9914      	ldr	r1, [sp, #80]	; 0x50
   84e04:	f003 f972 	bl	880ec <__aeabi_dcmpeq>
   84e08:	2800      	cmp	r0, #0
   84e0a:	f000 8193 	beq.w	85134 <_svfprintf_r+0xbcc>
   84e0e:	2101      	movs	r1, #1
   84e10:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84e12:	4ab5      	ldr	r2, [pc, #724]	; (850e8 <_svfprintf_r+0xb80>)
   84e14:	440b      	add	r3, r1
   84e16:	440c      	add	r4, r1
   84e18:	2b07      	cmp	r3, #7
   84e1a:	9427      	str	r4, [sp, #156]	; 0x9c
   84e1c:	9326      	str	r3, [sp, #152]	; 0x98
   84e1e:	f8c8 1004 	str.w	r1, [r8, #4]
   84e22:	f8c8 2000 	str.w	r2, [r8]
   84e26:	f300 83c6 	bgt.w	855b6 <_svfprintf_r+0x104e>
   84e2a:	f108 0808 	add.w	r8, r8, #8
   84e2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   84e30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   84e32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84e34:	4293      	cmp	r3, r2
   84e36:	db03      	blt.n	84e40 <_svfprintf_r+0x8d8>
   84e38:	9b07      	ldr	r3, [sp, #28]
   84e3a:	07dd      	lsls	r5, r3, #31
   84e3c:	f57f ad86 	bpl.w	8494c <_svfprintf_r+0x3e4>
   84e40:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84e42:	9919      	ldr	r1, [sp, #100]	; 0x64
   84e44:	3301      	adds	r3, #1
   84e46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   84e48:	440c      	add	r4, r1
   84e4a:	2b07      	cmp	r3, #7
   84e4c:	f8c8 2000 	str.w	r2, [r8]
   84e50:	f8c8 1004 	str.w	r1, [r8, #4]
   84e54:	9427      	str	r4, [sp, #156]	; 0x9c
   84e56:	9326      	str	r3, [sp, #152]	; 0x98
   84e58:	f300 83c4 	bgt.w	855e4 <_svfprintf_r+0x107c>
   84e5c:	f108 0808 	add.w	r8, r8, #8
   84e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84e62:	1e5e      	subs	r6, r3, #1
   84e64:	2e00      	cmp	r6, #0
   84e66:	f77f ad71 	ble.w	8494c <_svfprintf_r+0x3e4>
   84e6a:	2e10      	cmp	r6, #16
   84e6c:	f340 8575 	ble.w	8595a <_svfprintf_r+0x13f2>
   84e70:	4622      	mov	r2, r4
   84e72:	2710      	movs	r7, #16
   84e74:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84e76:	4d9d      	ldr	r5, [pc, #628]	; (850ec <_svfprintf_r+0xb84>)
   84e78:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   84e7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84e7e:	e005      	b.n	84e8c <_svfprintf_r+0x924>
   84e80:	f108 0808 	add.w	r8, r8, #8
   84e84:	3e10      	subs	r6, #16
   84e86:	2e10      	cmp	r6, #16
   84e88:	f340 8225 	ble.w	852d6 <_svfprintf_r+0xd6e>
   84e8c:	3301      	adds	r3, #1
   84e8e:	3210      	adds	r2, #16
   84e90:	2b07      	cmp	r3, #7
   84e92:	9227      	str	r2, [sp, #156]	; 0x9c
   84e94:	9326      	str	r3, [sp, #152]	; 0x98
   84e96:	e888 00a0 	stmia.w	r8, {r5, r7}
   84e9a:	ddf1      	ble.n	84e80 <_svfprintf_r+0x918>
   84e9c:	aa25      	add	r2, sp, #148	; 0x94
   84e9e:	4621      	mov	r1, r4
   84ea0:	4658      	mov	r0, fp
   84ea2:	f002 fc4b 	bl	8773c <__ssprint_r>
   84ea6:	2800      	cmp	r0, #0
   84ea8:	f47f ac3b 	bne.w	84722 <_svfprintf_r+0x1ba>
   84eac:	46c8      	mov	r8, r9
   84eae:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84eb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84eb2:	e7e7      	b.n	84e84 <_svfprintf_r+0x91c>
   84eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84eb6:	9a08      	ldr	r2, [sp, #32]
   84eb8:	1a9f      	subs	r7, r3, r2
   84eba:	2f00      	cmp	r7, #0
   84ebc:	f77f acf6 	ble.w	848ac <_svfprintf_r+0x344>
   84ec0:	2f10      	cmp	r7, #16
   84ec2:	f340 84a8 	ble.w	85816 <_svfprintf_r+0x12ae>
   84ec6:	4d89      	ldr	r5, [pc, #548]	; (850ec <_svfprintf_r+0xb84>)
   84ec8:	4642      	mov	r2, r8
   84eca:	4621      	mov	r1, r4
   84ecc:	46b0      	mov	r8, r6
   84ece:	f04f 0b10 	mov.w	fp, #16
   84ed2:	462e      	mov	r6, r5
   84ed4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84ed6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84ed8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84eda:	e004      	b.n	84ee6 <_svfprintf_r+0x97e>
   84edc:	3f10      	subs	r7, #16
   84ede:	2f10      	cmp	r7, #16
   84ee0:	f102 0208 	add.w	r2, r2, #8
   84ee4:	dd15      	ble.n	84f12 <_svfprintf_r+0x9aa>
   84ee6:	3301      	adds	r3, #1
   84ee8:	3110      	adds	r1, #16
   84eea:	2b07      	cmp	r3, #7
   84eec:	9127      	str	r1, [sp, #156]	; 0x9c
   84eee:	9326      	str	r3, [sp, #152]	; 0x98
   84ef0:	e882 0840 	stmia.w	r2, {r6, fp}
   84ef4:	ddf2      	ble.n	84edc <_svfprintf_r+0x974>
   84ef6:	aa25      	add	r2, sp, #148	; 0x94
   84ef8:	4629      	mov	r1, r5
   84efa:	4620      	mov	r0, r4
   84efc:	f002 fc1e 	bl	8773c <__ssprint_r>
   84f00:	2800      	cmp	r0, #0
   84f02:	f47f ac0e 	bne.w	84722 <_svfprintf_r+0x1ba>
   84f06:	3f10      	subs	r7, #16
   84f08:	2f10      	cmp	r7, #16
   84f0a:	464a      	mov	r2, r9
   84f0c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84f0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84f10:	dce9      	bgt.n	84ee6 <_svfprintf_r+0x97e>
   84f12:	4635      	mov	r5, r6
   84f14:	460c      	mov	r4, r1
   84f16:	4646      	mov	r6, r8
   84f18:	4690      	mov	r8, r2
   84f1a:	3301      	adds	r3, #1
   84f1c:	443c      	add	r4, r7
   84f1e:	2b07      	cmp	r3, #7
   84f20:	9427      	str	r4, [sp, #156]	; 0x9c
   84f22:	9326      	str	r3, [sp, #152]	; 0x98
   84f24:	e888 00a0 	stmia.w	r8, {r5, r7}
   84f28:	f300 829e 	bgt.w	85468 <_svfprintf_r+0xf00>
   84f2c:	f108 0808 	add.w	r8, r8, #8
   84f30:	e4bc      	b.n	848ac <_svfprintf_r+0x344>
   84f32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84f34:	2b01      	cmp	r3, #1
   84f36:	f340 824f 	ble.w	853d8 <_svfprintf_r+0xe70>
   84f3a:	2301      	movs	r3, #1
   84f3c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84f3e:	441c      	add	r4, r3
   84f40:	441f      	add	r7, r3
   84f42:	2f07      	cmp	r7, #7
   84f44:	9427      	str	r4, [sp, #156]	; 0x9c
   84f46:	f8c8 6000 	str.w	r6, [r8]
   84f4a:	9726      	str	r7, [sp, #152]	; 0x98
   84f4c:	f8c8 3004 	str.w	r3, [r8, #4]
   84f50:	f300 825f 	bgt.w	85412 <_svfprintf_r+0xeaa>
   84f54:	f108 0808 	add.w	r8, r8, #8
   84f58:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84f5a:	3701      	adds	r7, #1
   84f5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   84f5e:	4414      	add	r4, r2
   84f60:	2f07      	cmp	r7, #7
   84f62:	9427      	str	r4, [sp, #156]	; 0x9c
   84f64:	9726      	str	r7, [sp, #152]	; 0x98
   84f66:	f8c8 3000 	str.w	r3, [r8]
   84f6a:	f8c8 2004 	str.w	r2, [r8, #4]
   84f6e:	f300 825c 	bgt.w	8542a <_svfprintf_r+0xec2>
   84f72:	f108 0808 	add.w	r8, r8, #8
   84f76:	a815      	add	r0, sp, #84	; 0x54
   84f78:	c80d      	ldmia	r0, {r0, r2, r3}
   84f7a:	9914      	ldr	r1, [sp, #80]	; 0x50
   84f7c:	f003 f8b6 	bl	880ec <__aeabi_dcmpeq>
   84f80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84f82:	2800      	cmp	r0, #0
   84f84:	f040 8141 	bne.w	8520a <_svfprintf_r+0xca2>
   84f88:	3b01      	subs	r3, #1
   84f8a:	3701      	adds	r7, #1
   84f8c:	3601      	adds	r6, #1
   84f8e:	441c      	add	r4, r3
   84f90:	2f07      	cmp	r7, #7
   84f92:	f8c8 6000 	str.w	r6, [r8]
   84f96:	9726      	str	r7, [sp, #152]	; 0x98
   84f98:	9427      	str	r4, [sp, #156]	; 0x9c
   84f9a:	f8c8 3004 	str.w	r3, [r8, #4]
   84f9e:	f300 8166 	bgt.w	8526e <_svfprintf_r+0xd06>
   84fa2:	f108 0808 	add.w	r8, r8, #8
   84fa6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   84fa8:	3701      	adds	r7, #1
   84faa:	4414      	add	r4, r2
   84fac:	ab21      	add	r3, sp, #132	; 0x84
   84fae:	2f07      	cmp	r7, #7
   84fb0:	9427      	str	r4, [sp, #156]	; 0x9c
   84fb2:	9726      	str	r7, [sp, #152]	; 0x98
   84fb4:	f8c8 2004 	str.w	r2, [r8, #4]
   84fb8:	f8c8 3000 	str.w	r3, [r8]
   84fbc:	f77f acc4 	ble.w	84948 <_svfprintf_r+0x3e0>
   84fc0:	aa25      	add	r2, sp, #148	; 0x94
   84fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84fc4:	980c      	ldr	r0, [sp, #48]	; 0x30
   84fc6:	f002 fbb9 	bl	8773c <__ssprint_r>
   84fca:	2800      	cmp	r0, #0
   84fcc:	f47f aba9 	bne.w	84722 <_svfprintf_r+0x1ba>
   84fd0:	46c8      	mov	r8, r9
   84fd2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84fd4:	e4ba      	b.n	8494c <_svfprintf_r+0x3e4>
   84fd6:	aa25      	add	r2, sp, #148	; 0x94
   84fd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84fda:	980c      	ldr	r0, [sp, #48]	; 0x30
   84fdc:	f002 fbae 	bl	8773c <__ssprint_r>
   84fe0:	2800      	cmp	r0, #0
   84fe2:	f43f acfd 	beq.w	849e0 <_svfprintf_r+0x478>
   84fe6:	f7ff bb9c 	b.w	84722 <_svfprintf_r+0x1ba>
   84fea:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84fee:	2b01      	cmp	r3, #1
   84ff0:	f000 817e 	beq.w	852f0 <_svfprintf_r+0xd88>
   84ff4:	2b02      	cmp	r3, #2
   84ff6:	d171      	bne.n	850dc <_svfprintf_r+0xb74>
   84ff8:	f8cd b01c 	str.w	fp, [sp, #28]
   84ffc:	2400      	movs	r4, #0
   84ffe:	2500      	movs	r5, #0
   85000:	e5d4      	b.n	84bac <_svfprintf_r+0x644>
   85002:	aa25      	add	r2, sp, #148	; 0x94
   85004:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85006:	980c      	ldr	r0, [sp, #48]	; 0x30
   85008:	f002 fb98 	bl	8773c <__ssprint_r>
   8500c:	2800      	cmp	r0, #0
   8500e:	f47f ab88 	bne.w	84722 <_svfprintf_r+0x1ba>
   85012:	46c8      	mov	r8, r9
   85014:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85016:	e486      	b.n	84926 <_svfprintf_r+0x3be>
   85018:	aa25      	add	r2, sp, #148	; 0x94
   8501a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8501c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8501e:	f002 fb8d 	bl	8773c <__ssprint_r>
   85022:	2800      	cmp	r0, #0
   85024:	f47f ab7d 	bne.w	84722 <_svfprintf_r+0x1ba>
   85028:	46c8      	mov	r8, r9
   8502a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8502c:	e429      	b.n	84882 <_svfprintf_r+0x31a>
   8502e:	2001      	movs	r0, #1
   85030:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85032:	4a2d      	ldr	r2, [pc, #180]	; (850e8 <_svfprintf_r+0xb80>)
   85034:	4403      	add	r3, r0
   85036:	4404      	add	r4, r0
   85038:	2b07      	cmp	r3, #7
   8503a:	9427      	str	r4, [sp, #156]	; 0x9c
   8503c:	9326      	str	r3, [sp, #152]	; 0x98
   8503e:	f8c8 0004 	str.w	r0, [r8, #4]
   85042:	f8c8 2000 	str.w	r2, [r8]
   85046:	f340 82d8 	ble.w	855fa <_svfprintf_r+0x1092>
   8504a:	aa25      	add	r2, sp, #148	; 0x94
   8504c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8504e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85050:	f002 fb74 	bl	8773c <__ssprint_r>
   85054:	2800      	cmp	r0, #0
   85056:	f47f ab64 	bne.w	84722 <_svfprintf_r+0x1ba>
   8505a:	46c8      	mov	r8, r9
   8505c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8505e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85060:	b929      	cbnz	r1, 8506e <_svfprintf_r+0xb06>
   85062:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85064:	b91b      	cbnz	r3, 8506e <_svfprintf_r+0xb06>
   85066:	9b07      	ldr	r3, [sp, #28]
   85068:	07d8      	lsls	r0, r3, #31
   8506a:	f57f ac6f 	bpl.w	8494c <_svfprintf_r+0x3e4>
   8506e:	9819      	ldr	r0, [sp, #100]	; 0x64
   85070:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85072:	4602      	mov	r2, r0
   85074:	3301      	adds	r3, #1
   85076:	4422      	add	r2, r4
   85078:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   8507a:	2b07      	cmp	r3, #7
   8507c:	9227      	str	r2, [sp, #156]	; 0x9c
   8507e:	f8c8 4000 	str.w	r4, [r8]
   85082:	f8c8 0004 	str.w	r0, [r8, #4]
   85086:	9326      	str	r3, [sp, #152]	; 0x98
   85088:	f300 8431 	bgt.w	858ee <_svfprintf_r+0x1386>
   8508c:	f108 0808 	add.w	r8, r8, #8
   85090:	2900      	cmp	r1, #0
   85092:	f2c0 8409 	blt.w	858a8 <_svfprintf_r+0x1340>
   85096:	9913      	ldr	r1, [sp, #76]	; 0x4c
   85098:	3301      	adds	r3, #1
   8509a:	188c      	adds	r4, r1, r2
   8509c:	2b07      	cmp	r3, #7
   8509e:	9427      	str	r4, [sp, #156]	; 0x9c
   850a0:	9326      	str	r3, [sp, #152]	; 0x98
   850a2:	f8c8 6000 	str.w	r6, [r8]
   850a6:	f8c8 1004 	str.w	r1, [r8, #4]
   850aa:	f77f ac4d 	ble.w	84948 <_svfprintf_r+0x3e0>
   850ae:	aa25      	add	r2, sp, #148	; 0x94
   850b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   850b2:	980c      	ldr	r0, [sp, #48]	; 0x30
   850b4:	f002 fb42 	bl	8773c <__ssprint_r>
   850b8:	2800      	cmp	r0, #0
   850ba:	f47f ab32 	bne.w	84722 <_svfprintf_r+0x1ba>
   850be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   850c0:	46c8      	mov	r8, r9
   850c2:	e443      	b.n	8494c <_svfprintf_r+0x3e4>
   850c4:	aa25      	add	r2, sp, #148	; 0x94
   850c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   850c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   850ca:	f002 fb37 	bl	8773c <__ssprint_r>
   850ce:	2800      	cmp	r0, #0
   850d0:	f47f ab27 	bne.w	84722 <_svfprintf_r+0x1ba>
   850d4:	46c8      	mov	r8, r9
   850d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   850d8:	f7ff bbe5 	b.w	848a6 <_svfprintf_r+0x33e>
   850dc:	2400      	movs	r4, #0
   850de:	2500      	movs	r5, #0
   850e0:	f8cd b01c 	str.w	fp, [sp, #28]
   850e4:	4649      	mov	r1, r9
   850e6:	e004      	b.n	850f2 <_svfprintf_r+0xb8a>
   850e8:	00088648 	.word	0x00088648
   850ec:	0008865c 	.word	0x0008865c
   850f0:	4631      	mov	r1, r6
   850f2:	08e2      	lsrs	r2, r4, #3
   850f4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   850f8:	08e8      	lsrs	r0, r5, #3
   850fa:	f004 0307 	and.w	r3, r4, #7
   850fe:	4605      	mov	r5, r0
   85100:	4614      	mov	r4, r2
   85102:	3330      	adds	r3, #48	; 0x30
   85104:	ea54 0205 	orrs.w	r2, r4, r5
   85108:	f801 3c01 	strb.w	r3, [r1, #-1]
   8510c:	f101 36ff 	add.w	r6, r1, #4294967295
   85110:	d1ee      	bne.n	850f0 <_svfprintf_r+0xb88>
   85112:	9a07      	ldr	r2, [sp, #28]
   85114:	07d2      	lsls	r2, r2, #31
   85116:	f57f ad59 	bpl.w	84bcc <_svfprintf_r+0x664>
   8511a:	2b30      	cmp	r3, #48	; 0x30
   8511c:	f43f ad56 	beq.w	84bcc <_svfprintf_r+0x664>
   85120:	2330      	movs	r3, #48	; 0x30
   85122:	3902      	subs	r1, #2
   85124:	f806 3c01 	strb.w	r3, [r6, #-1]
   85128:	eba9 0301 	sub.w	r3, r9, r1
   8512c:	930e      	str	r3, [sp, #56]	; 0x38
   8512e:	460e      	mov	r6, r1
   85130:	f7ff bb36 	b.w	847a0 <_svfprintf_r+0x238>
   85134:	991f      	ldr	r1, [sp, #124]	; 0x7c
   85136:	2900      	cmp	r1, #0
   85138:	f77f af79 	ble.w	8502e <_svfprintf_r+0xac6>
   8513c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8513e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85140:	4293      	cmp	r3, r2
   85142:	bfa8      	it	ge
   85144:	4613      	movge	r3, r2
   85146:	2b00      	cmp	r3, #0
   85148:	461f      	mov	r7, r3
   8514a:	dd0b      	ble.n	85164 <_svfprintf_r+0xbfc>
   8514c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8514e:	443c      	add	r4, r7
   85150:	3301      	adds	r3, #1
   85152:	2b07      	cmp	r3, #7
   85154:	9427      	str	r4, [sp, #156]	; 0x9c
   85156:	e888 00c0 	stmia.w	r8, {r6, r7}
   8515a:	9326      	str	r3, [sp, #152]	; 0x98
   8515c:	f300 82fb 	bgt.w	85756 <_svfprintf_r+0x11ee>
   85160:	f108 0808 	add.w	r8, r8, #8
   85164:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85166:	2f00      	cmp	r7, #0
   85168:	bfa8      	it	ge
   8516a:	1bdb      	subge	r3, r3, r7
   8516c:	2b00      	cmp	r3, #0
   8516e:	461f      	mov	r7, r3
   85170:	f340 80d7 	ble.w	85322 <_svfprintf_r+0xdba>
   85174:	2b10      	cmp	r3, #16
   85176:	f340 8434 	ble.w	859e2 <_svfprintf_r+0x147a>
   8517a:	4dba      	ldr	r5, [pc, #744]	; (85464 <_svfprintf_r+0xefc>)
   8517c:	4642      	mov	r2, r8
   8517e:	4621      	mov	r1, r4
   85180:	46b0      	mov	r8, r6
   85182:	f04f 0b10 	mov.w	fp, #16
   85186:	462e      	mov	r6, r5
   85188:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8518a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8518c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8518e:	e004      	b.n	8519a <_svfprintf_r+0xc32>
   85190:	3208      	adds	r2, #8
   85192:	3f10      	subs	r7, #16
   85194:	2f10      	cmp	r7, #16
   85196:	f340 80b5 	ble.w	85304 <_svfprintf_r+0xd9c>
   8519a:	3301      	adds	r3, #1
   8519c:	3110      	adds	r1, #16
   8519e:	2b07      	cmp	r3, #7
   851a0:	9127      	str	r1, [sp, #156]	; 0x9c
   851a2:	9326      	str	r3, [sp, #152]	; 0x98
   851a4:	e882 0840 	stmia.w	r2, {r6, fp}
   851a8:	ddf2      	ble.n	85190 <_svfprintf_r+0xc28>
   851aa:	aa25      	add	r2, sp, #148	; 0x94
   851ac:	4629      	mov	r1, r5
   851ae:	4620      	mov	r0, r4
   851b0:	f002 fac4 	bl	8773c <__ssprint_r>
   851b4:	2800      	cmp	r0, #0
   851b6:	f47f aab4 	bne.w	84722 <_svfprintf_r+0x1ba>
   851ba:	464a      	mov	r2, r9
   851bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
   851be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   851c0:	e7e7      	b.n	85192 <_svfprintf_r+0xc2a>
   851c2:	2d00      	cmp	r5, #0
   851c4:	bf08      	it	eq
   851c6:	2c0a      	cmpeq	r4, #10
   851c8:	f0c0 8090 	bcc.w	852ec <_svfprintf_r+0xd84>
   851cc:	464e      	mov	r6, r9
   851ce:	4620      	mov	r0, r4
   851d0:	4629      	mov	r1, r5
   851d2:	220a      	movs	r2, #10
   851d4:	2300      	movs	r3, #0
   851d6:	f002 fff9 	bl	881cc <__aeabi_uldivmod>
   851da:	3230      	adds	r2, #48	; 0x30
   851dc:	f806 2d01 	strb.w	r2, [r6, #-1]!
   851e0:	4620      	mov	r0, r4
   851e2:	4629      	mov	r1, r5
   851e4:	2300      	movs	r3, #0
   851e6:	220a      	movs	r2, #10
   851e8:	f002 fff0 	bl	881cc <__aeabi_uldivmod>
   851ec:	4604      	mov	r4, r0
   851ee:	460d      	mov	r5, r1
   851f0:	ea54 0305 	orrs.w	r3, r4, r5
   851f4:	d1eb      	bne.n	851ce <_svfprintf_r+0xc66>
   851f6:	eba9 0306 	sub.w	r3, r9, r6
   851fa:	930e      	str	r3, [sp, #56]	; 0x38
   851fc:	f7ff bad0 	b.w	847a0 <_svfprintf_r+0x238>
   85200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85202:	464e      	mov	r6, r9
   85204:	930e      	str	r3, [sp, #56]	; 0x38
   85206:	f7ff bacb 	b.w	847a0 <_svfprintf_r+0x238>
   8520a:	1e5e      	subs	r6, r3, #1
   8520c:	2e00      	cmp	r6, #0
   8520e:	f77f aeca 	ble.w	84fa6 <_svfprintf_r+0xa3e>
   85212:	2e10      	cmp	r6, #16
   85214:	f340 83e3 	ble.w	859de <_svfprintf_r+0x1476>
   85218:	4622      	mov	r2, r4
   8521a:	f04f 0b10 	mov.w	fp, #16
   8521e:	4d91      	ldr	r5, [pc, #580]	; (85464 <_svfprintf_r+0xefc>)
   85220:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85222:	e004      	b.n	8522e <_svfprintf_r+0xcc6>
   85224:	3e10      	subs	r6, #16
   85226:	2e10      	cmp	r6, #16
   85228:	f108 0808 	add.w	r8, r8, #8
   8522c:	dd15      	ble.n	8525a <_svfprintf_r+0xcf2>
   8522e:	3701      	adds	r7, #1
   85230:	3210      	adds	r2, #16
   85232:	2f07      	cmp	r7, #7
   85234:	9227      	str	r2, [sp, #156]	; 0x9c
   85236:	9726      	str	r7, [sp, #152]	; 0x98
   85238:	e888 0820 	stmia.w	r8, {r5, fp}
   8523c:	ddf2      	ble.n	85224 <_svfprintf_r+0xcbc>
   8523e:	aa25      	add	r2, sp, #148	; 0x94
   85240:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85242:	4620      	mov	r0, r4
   85244:	f002 fa7a 	bl	8773c <__ssprint_r>
   85248:	2800      	cmp	r0, #0
   8524a:	f47f aa6a 	bne.w	84722 <_svfprintf_r+0x1ba>
   8524e:	3e10      	subs	r6, #16
   85250:	2e10      	cmp	r6, #16
   85252:	46c8      	mov	r8, r9
   85254:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85256:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85258:	dce9      	bgt.n	8522e <_svfprintf_r+0xcc6>
   8525a:	4614      	mov	r4, r2
   8525c:	3701      	adds	r7, #1
   8525e:	4434      	add	r4, r6
   85260:	2f07      	cmp	r7, #7
   85262:	9427      	str	r4, [sp, #156]	; 0x9c
   85264:	9726      	str	r7, [sp, #152]	; 0x98
   85266:	e888 0060 	stmia.w	r8, {r5, r6}
   8526a:	f77f ae9a 	ble.w	84fa2 <_svfprintf_r+0xa3a>
   8526e:	aa25      	add	r2, sp, #148	; 0x94
   85270:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85272:	980c      	ldr	r0, [sp, #48]	; 0x30
   85274:	f002 fa62 	bl	8773c <__ssprint_r>
   85278:	2800      	cmp	r0, #0
   8527a:	f47f aa52 	bne.w	84722 <_svfprintf_r+0x1ba>
   8527e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85280:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85282:	46c8      	mov	r8, r9
   85284:	e68f      	b.n	84fa6 <_svfprintf_r+0xa3e>
   85286:	3204      	adds	r2, #4
   85288:	681c      	ldr	r4, [r3, #0]
   8528a:	2500      	movs	r5, #0
   8528c:	2301      	movs	r3, #1
   8528e:	920f      	str	r2, [sp, #60]	; 0x3c
   85290:	f7ff ba68 	b.w	84764 <_svfprintf_r+0x1fc>
   85294:	681c      	ldr	r4, [r3, #0]
   85296:	3304      	adds	r3, #4
   85298:	930f      	str	r3, [sp, #60]	; 0x3c
   8529a:	2500      	movs	r5, #0
   8529c:	e42a      	b.n	84af4 <_svfprintf_r+0x58c>
   8529e:	681c      	ldr	r4, [r3, #0]
   852a0:	3304      	adds	r3, #4
   852a2:	17e5      	asrs	r5, r4, #31
   852a4:	4622      	mov	r2, r4
   852a6:	930f      	str	r3, [sp, #60]	; 0x3c
   852a8:	462b      	mov	r3, r5
   852aa:	2a00      	cmp	r2, #0
   852ac:	f173 0300 	sbcs.w	r3, r3, #0
   852b0:	f6bf ac68 	bge.w	84b84 <_svfprintf_r+0x61c>
   852b4:	272d      	movs	r7, #45	; 0x2d
   852b6:	4264      	negs	r4, r4
   852b8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   852bc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   852c0:	2301      	movs	r3, #1
   852c2:	f7ff ba53 	b.w	8476c <_svfprintf_r+0x204>
   852c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   852c8:	2500      	movs	r5, #0
   852ca:	460a      	mov	r2, r1
   852cc:	3204      	adds	r2, #4
   852ce:	680c      	ldr	r4, [r1, #0]
   852d0:	920f      	str	r2, [sp, #60]	; 0x3c
   852d2:	f7ff ba47 	b.w	84764 <_svfprintf_r+0x1fc>
   852d6:	4614      	mov	r4, r2
   852d8:	3301      	adds	r3, #1
   852da:	4434      	add	r4, r6
   852dc:	2b07      	cmp	r3, #7
   852de:	9427      	str	r4, [sp, #156]	; 0x9c
   852e0:	9326      	str	r3, [sp, #152]	; 0x98
   852e2:	e888 0060 	stmia.w	r8, {r5, r6}
   852e6:	f77f ab2f 	ble.w	84948 <_svfprintf_r+0x3e0>
   852ea:	e6e0      	b.n	850ae <_svfprintf_r+0xb46>
   852ec:	f8dd b01c 	ldr.w	fp, [sp, #28]
   852f0:	2301      	movs	r3, #1
   852f2:	ae42      	add	r6, sp, #264	; 0x108
   852f4:	3430      	adds	r4, #48	; 0x30
   852f6:	f8cd b01c 	str.w	fp, [sp, #28]
   852fa:	f806 4d41 	strb.w	r4, [r6, #-65]!
   852fe:	930e      	str	r3, [sp, #56]	; 0x38
   85300:	f7ff ba4e 	b.w	847a0 <_svfprintf_r+0x238>
   85304:	4635      	mov	r5, r6
   85306:	460c      	mov	r4, r1
   85308:	4646      	mov	r6, r8
   8530a:	4690      	mov	r8, r2
   8530c:	3301      	adds	r3, #1
   8530e:	443c      	add	r4, r7
   85310:	2b07      	cmp	r3, #7
   85312:	9427      	str	r4, [sp, #156]	; 0x9c
   85314:	9326      	str	r3, [sp, #152]	; 0x98
   85316:	e888 00a0 	stmia.w	r8, {r5, r7}
   8531a:	f300 8246 	bgt.w	857aa <_svfprintf_r+0x1242>
   8531e:	f108 0808 	add.w	r8, r8, #8
   85322:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   85324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85326:	429a      	cmp	r2, r3
   85328:	db45      	blt.n	853b6 <_svfprintf_r+0xe4e>
   8532a:	9b07      	ldr	r3, [sp, #28]
   8532c:	07d9      	lsls	r1, r3, #31
   8532e:	d442      	bmi.n	853b6 <_svfprintf_r+0xe4e>
   85330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85332:	9812      	ldr	r0, [sp, #72]	; 0x48
   85334:	1a9a      	subs	r2, r3, r2
   85336:	1a1d      	subs	r5, r3, r0
   85338:	4295      	cmp	r5, r2
   8533a:	bfa8      	it	ge
   8533c:	4615      	movge	r5, r2
   8533e:	2d00      	cmp	r5, #0
   85340:	dd0e      	ble.n	85360 <_svfprintf_r+0xdf8>
   85342:	9926      	ldr	r1, [sp, #152]	; 0x98
   85344:	4406      	add	r6, r0
   85346:	3101      	adds	r1, #1
   85348:	442c      	add	r4, r5
   8534a:	2907      	cmp	r1, #7
   8534c:	f8c8 6000 	str.w	r6, [r8]
   85350:	9427      	str	r4, [sp, #156]	; 0x9c
   85352:	f8c8 5004 	str.w	r5, [r8, #4]
   85356:	9126      	str	r1, [sp, #152]	; 0x98
   85358:	f300 8216 	bgt.w	85788 <_svfprintf_r+0x1220>
   8535c:	f108 0808 	add.w	r8, r8, #8
   85360:	2d00      	cmp	r5, #0
   85362:	bfb4      	ite	lt
   85364:	4616      	movlt	r6, r2
   85366:	1b56      	subge	r6, r2, r5
   85368:	2e00      	cmp	r6, #0
   8536a:	f77f aaef 	ble.w	8494c <_svfprintf_r+0x3e4>
   8536e:	2e10      	cmp	r6, #16
   85370:	f340 82f3 	ble.w	8595a <_svfprintf_r+0x13f2>
   85374:	4622      	mov	r2, r4
   85376:	2710      	movs	r7, #16
   85378:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8537a:	4d3a      	ldr	r5, [pc, #232]	; (85464 <_svfprintf_r+0xefc>)
   8537c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   85380:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85382:	e004      	b.n	8538e <_svfprintf_r+0xe26>
   85384:	f108 0808 	add.w	r8, r8, #8
   85388:	3e10      	subs	r6, #16
   8538a:	2e10      	cmp	r6, #16
   8538c:	dda3      	ble.n	852d6 <_svfprintf_r+0xd6e>
   8538e:	3301      	adds	r3, #1
   85390:	3210      	adds	r2, #16
   85392:	2b07      	cmp	r3, #7
   85394:	9227      	str	r2, [sp, #156]	; 0x9c
   85396:	9326      	str	r3, [sp, #152]	; 0x98
   85398:	e888 00a0 	stmia.w	r8, {r5, r7}
   8539c:	ddf2      	ble.n	85384 <_svfprintf_r+0xe1c>
   8539e:	aa25      	add	r2, sp, #148	; 0x94
   853a0:	4621      	mov	r1, r4
   853a2:	4658      	mov	r0, fp
   853a4:	f002 f9ca 	bl	8773c <__ssprint_r>
   853a8:	2800      	cmp	r0, #0
   853aa:	f47f a9ba 	bne.w	84722 <_svfprintf_r+0x1ba>
   853ae:	46c8      	mov	r8, r9
   853b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   853b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   853b4:	e7e8      	b.n	85388 <_svfprintf_r+0xe20>
   853b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   853b8:	9819      	ldr	r0, [sp, #100]	; 0x64
   853ba:	3301      	adds	r3, #1
   853bc:	991a      	ldr	r1, [sp, #104]	; 0x68
   853be:	4404      	add	r4, r0
   853c0:	2b07      	cmp	r3, #7
   853c2:	9427      	str	r4, [sp, #156]	; 0x9c
   853c4:	f8c8 1000 	str.w	r1, [r8]
   853c8:	f8c8 0004 	str.w	r0, [r8, #4]
   853cc:	9326      	str	r3, [sp, #152]	; 0x98
   853ce:	f300 81cf 	bgt.w	85770 <_svfprintf_r+0x1208>
   853d2:	f108 0808 	add.w	r8, r8, #8
   853d6:	e7ab      	b.n	85330 <_svfprintf_r+0xdc8>
   853d8:	9b07      	ldr	r3, [sp, #28]
   853da:	07da      	lsls	r2, r3, #31
   853dc:	f53f adad 	bmi.w	84f3a <_svfprintf_r+0x9d2>
   853e0:	2301      	movs	r3, #1
   853e2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   853e4:	441c      	add	r4, r3
   853e6:	441f      	add	r7, r3
   853e8:	2f07      	cmp	r7, #7
   853ea:	9427      	str	r4, [sp, #156]	; 0x9c
   853ec:	f8c8 6000 	str.w	r6, [r8]
   853f0:	9726      	str	r7, [sp, #152]	; 0x98
   853f2:	f8c8 3004 	str.w	r3, [r8, #4]
   853f6:	f77f add4 	ble.w	84fa2 <_svfprintf_r+0xa3a>
   853fa:	aa25      	add	r2, sp, #148	; 0x94
   853fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   853fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   85400:	f002 f99c 	bl	8773c <__ssprint_r>
   85404:	2800      	cmp	r0, #0
   85406:	f47f a98c 	bne.w	84722 <_svfprintf_r+0x1ba>
   8540a:	46c8      	mov	r8, r9
   8540c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8540e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85410:	e5c9      	b.n	84fa6 <_svfprintf_r+0xa3e>
   85412:	aa25      	add	r2, sp, #148	; 0x94
   85414:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85416:	980c      	ldr	r0, [sp, #48]	; 0x30
   85418:	f002 f990 	bl	8773c <__ssprint_r>
   8541c:	2800      	cmp	r0, #0
   8541e:	f47f a980 	bne.w	84722 <_svfprintf_r+0x1ba>
   85422:	46c8      	mov	r8, r9
   85424:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85426:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85428:	e596      	b.n	84f58 <_svfprintf_r+0x9f0>
   8542a:	aa25      	add	r2, sp, #148	; 0x94
   8542c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8542e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85430:	f002 f984 	bl	8773c <__ssprint_r>
   85434:	2800      	cmp	r0, #0
   85436:	f47f a974 	bne.w	84722 <_svfprintf_r+0x1ba>
   8543a:	46c8      	mov	r8, r9
   8543c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8543e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85440:	e599      	b.n	84f76 <_svfprintf_r+0xa0e>
   85442:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85444:	3407      	adds	r4, #7
   85446:	f024 0407 	bic.w	r4, r4, #7
   8544a:	f104 0108 	add.w	r1, r4, #8
   8544e:	e9d4 2300 	ldrd	r2, r3, [r4]
   85452:	910f      	str	r1, [sp, #60]	; 0x3c
   85454:	4614      	mov	r4, r2
   85456:	461d      	mov	r5, r3
   85458:	f7ff bb8f 	b.w	84b7a <_svfprintf_r+0x612>
   8545c:	464e      	mov	r6, r9
   8545e:	f7ff b99f 	b.w	847a0 <_svfprintf_r+0x238>
   85462:	bf00      	nop
   85464:	0008865c 	.word	0x0008865c
   85468:	aa25      	add	r2, sp, #148	; 0x94
   8546a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8546c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8546e:	f002 f965 	bl	8773c <__ssprint_r>
   85472:	2800      	cmp	r0, #0
   85474:	f47f a955 	bne.w	84722 <_svfprintf_r+0x1ba>
   85478:	46c8      	mov	r8, r9
   8547a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8547c:	f7ff ba16 	b.w	848ac <_svfprintf_r+0x344>
   85480:	9c15      	ldr	r4, [sp, #84]	; 0x54
   85482:	4622      	mov	r2, r4
   85484:	4620      	mov	r0, r4
   85486:	9c14      	ldr	r4, [sp, #80]	; 0x50
   85488:	4623      	mov	r3, r4
   8548a:	4621      	mov	r1, r4
   8548c:	f002 fe60 	bl	88150 <__aeabi_dcmpun>
   85490:	2800      	cmp	r0, #0
   85492:	f040 8273 	bne.w	8597c <_svfprintf_r+0x1414>
   85496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85498:	3301      	adds	r3, #1
   8549a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8549c:	f023 0320 	bic.w	r3, r3, #32
   854a0:	930e      	str	r3, [sp, #56]	; 0x38
   854a2:	f000 819c 	beq.w	857de <_svfprintf_r+0x1276>
   854a6:	2b47      	cmp	r3, #71	; 0x47
   854a8:	f000 80d6 	beq.w	85658 <_svfprintf_r+0x10f0>
   854ac:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   854b0:	9307      	str	r3, [sp, #28]
   854b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   854b4:	1e1f      	subs	r7, r3, #0
   854b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   854b8:	9308      	str	r3, [sp, #32]
   854ba:	bfb7      	itett	lt
   854bc:	463b      	movlt	r3, r7
   854be:	2300      	movge	r3, #0
   854c0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   854c4:	232d      	movlt	r3, #45	; 0x2d
   854c6:	9310      	str	r3, [sp, #64]	; 0x40
   854c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   854ca:	2b66      	cmp	r3, #102	; 0x66
   854cc:	f000 8190 	beq.w	857f0 <_svfprintf_r+0x1288>
   854d0:	2b46      	cmp	r3, #70	; 0x46
   854d2:	f000 80a4 	beq.w	8561e <_svfprintf_r+0x10b6>
   854d6:	2002      	movs	r0, #2
   854d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   854da:	a923      	add	r1, sp, #140	; 0x8c
   854dc:	2b45      	cmp	r3, #69	; 0x45
   854de:	bf0a      	itet	eq
   854e0:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   854e2:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   854e4:	1c5d      	addeq	r5, r3, #1
   854e6:	e88d 0021 	stmia.w	sp, {r0, r5}
   854ea:	9104      	str	r1, [sp, #16]
   854ec:	a820      	add	r0, sp, #128	; 0x80
   854ee:	a91f      	add	r1, sp, #124	; 0x7c
   854f0:	463b      	mov	r3, r7
   854f2:	9003      	str	r0, [sp, #12]
   854f4:	9a08      	ldr	r2, [sp, #32]
   854f6:	9102      	str	r1, [sp, #8]
   854f8:	980c      	ldr	r0, [sp, #48]	; 0x30
   854fa:	f000 fb59 	bl	85bb0 <_dtoa_r>
   854fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85500:	4606      	mov	r6, r0
   85502:	2b67      	cmp	r3, #103	; 0x67
   85504:	f040 81ba 	bne.w	8587c <_svfprintf_r+0x1314>
   85508:	f01b 0f01 	tst.w	fp, #1
   8550c:	f000 8223 	beq.w	85956 <_svfprintf_r+0x13ee>
   85510:	1974      	adds	r4, r6, r5
   85512:	9a16      	ldr	r2, [sp, #88]	; 0x58
   85514:	9808      	ldr	r0, [sp, #32]
   85516:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   85518:	4639      	mov	r1, r7
   8551a:	f002 fde7 	bl	880ec <__aeabi_dcmpeq>
   8551e:	2800      	cmp	r0, #0
   85520:	f040 8124 	bne.w	8576c <_svfprintf_r+0x1204>
   85524:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   85526:	42a3      	cmp	r3, r4
   85528:	d206      	bcs.n	85538 <_svfprintf_r+0xfd0>
   8552a:	2130      	movs	r1, #48	; 0x30
   8552c:	1c5a      	adds	r2, r3, #1
   8552e:	9223      	str	r2, [sp, #140]	; 0x8c
   85530:	7019      	strb	r1, [r3, #0]
   85532:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   85534:	429c      	cmp	r4, r3
   85536:	d8f9      	bhi.n	8552c <_svfprintf_r+0xfc4>
   85538:	1b9b      	subs	r3, r3, r6
   8553a:	9313      	str	r3, [sp, #76]	; 0x4c
   8553c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8553e:	2b47      	cmp	r3, #71	; 0x47
   85540:	f000 80a2 	beq.w	85688 <_svfprintf_r+0x1120>
   85544:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85546:	2b65      	cmp	r3, #101	; 0x65
   85548:	f340 81a7 	ble.w	8589a <_svfprintf_r+0x1332>
   8554c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8554e:	2b66      	cmp	r3, #102	; 0x66
   85550:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85552:	9312      	str	r3, [sp, #72]	; 0x48
   85554:	f000 8171 	beq.w	8583a <_svfprintf_r+0x12d2>
   85558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8555a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8555c:	4619      	mov	r1, r3
   8555e:	4291      	cmp	r1, r2
   85560:	f300 815d 	bgt.w	8581e <_svfprintf_r+0x12b6>
   85564:	f01b 0f01 	tst.w	fp, #1
   85568:	f040 81f0 	bne.w	8594c <_svfprintf_r+0x13e4>
   8556c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   85570:	9308      	str	r3, [sp, #32]
   85572:	2367      	movs	r3, #103	; 0x67
   85574:	920e      	str	r2, [sp, #56]	; 0x38
   85576:	9311      	str	r3, [sp, #68]	; 0x44
   85578:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8557a:	2b00      	cmp	r3, #0
   8557c:	d17d      	bne.n	8567a <_svfprintf_r+0x1112>
   8557e:	930a      	str	r3, [sp, #40]	; 0x28
   85580:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85584:	f7ff b914 	b.w	847b0 <_svfprintf_r+0x248>
   85588:	f024 0407 	bic.w	r4, r4, #7
   8558c:	6823      	ldr	r3, [r4, #0]
   8558e:	9315      	str	r3, [sp, #84]	; 0x54
   85590:	6863      	ldr	r3, [r4, #4]
   85592:	9314      	str	r3, [sp, #80]	; 0x50
   85594:	f104 0308 	add.w	r3, r4, #8
   85598:	930f      	str	r3, [sp, #60]	; 0x3c
   8559a:	f7ff bb2f 	b.w	84bfc <_svfprintf_r+0x694>
   8559e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   855a0:	6813      	ldr	r3, [r2, #0]
   855a2:	3204      	adds	r2, #4
   855a4:	920f      	str	r2, [sp, #60]	; 0x3c
   855a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   855a8:	601a      	str	r2, [r3, #0]
   855aa:	f7ff b804 	b.w	845b6 <_svfprintf_r+0x4e>
   855ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   855b0:	4daf      	ldr	r5, [pc, #700]	; (85870 <_svfprintf_r+0x1308>)
   855b2:	f7ff b9ad 	b.w	84910 <_svfprintf_r+0x3a8>
   855b6:	aa25      	add	r2, sp, #148	; 0x94
   855b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   855ba:	980c      	ldr	r0, [sp, #48]	; 0x30
   855bc:	f002 f8be 	bl	8773c <__ssprint_r>
   855c0:	2800      	cmp	r0, #0
   855c2:	f47f a8ae 	bne.w	84722 <_svfprintf_r+0x1ba>
   855c6:	46c8      	mov	r8, r9
   855c8:	e431      	b.n	84e2e <_svfprintf_r+0x8c6>
   855ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   855cc:	4613      	mov	r3, r2
   855ce:	3304      	adds	r3, #4
   855d0:	930f      	str	r3, [sp, #60]	; 0x3c
   855d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   855d4:	6811      	ldr	r1, [r2, #0]
   855d6:	17dd      	asrs	r5, r3, #31
   855d8:	461a      	mov	r2, r3
   855da:	462b      	mov	r3, r5
   855dc:	e9c1 2300 	strd	r2, r3, [r1]
   855e0:	f7fe bfe9 	b.w	845b6 <_svfprintf_r+0x4e>
   855e4:	aa25      	add	r2, sp, #148	; 0x94
   855e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   855e8:	980c      	ldr	r0, [sp, #48]	; 0x30
   855ea:	f002 f8a7 	bl	8773c <__ssprint_r>
   855ee:	2800      	cmp	r0, #0
   855f0:	f47f a897 	bne.w	84722 <_svfprintf_r+0x1ba>
   855f4:	46c8      	mov	r8, r9
   855f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   855f8:	e432      	b.n	84e60 <_svfprintf_r+0x8f8>
   855fa:	f108 0808 	add.w	r8, r8, #8
   855fe:	e52f      	b.n	85060 <_svfprintf_r+0xaf8>
   85600:	2140      	movs	r1, #64	; 0x40
   85602:	980c      	ldr	r0, [sp, #48]	; 0x30
   85604:	f001 fa22 	bl	86a4c <_malloc_r>
   85608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8560a:	6010      	str	r0, [r2, #0]
   8560c:	6110      	str	r0, [r2, #16]
   8560e:	2800      	cmp	r0, #0
   85610:	f000 8214 	beq.w	85a3c <_svfprintf_r+0x14d4>
   85614:	2340      	movs	r3, #64	; 0x40
   85616:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85618:	6153      	str	r3, [r2, #20]
   8561a:	f7fe bfbc 	b.w	84596 <_svfprintf_r+0x2e>
   8561e:	2003      	movs	r0, #3
   85620:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85622:	a923      	add	r1, sp, #140	; 0x8c
   85624:	e88d 0011 	stmia.w	sp, {r0, r4}
   85628:	9104      	str	r1, [sp, #16]
   8562a:	a820      	add	r0, sp, #128	; 0x80
   8562c:	a91f      	add	r1, sp, #124	; 0x7c
   8562e:	9003      	str	r0, [sp, #12]
   85630:	9a08      	ldr	r2, [sp, #32]
   85632:	463b      	mov	r3, r7
   85634:	9102      	str	r1, [sp, #8]
   85636:	980c      	ldr	r0, [sp, #48]	; 0x30
   85638:	f000 faba 	bl	85bb0 <_dtoa_r>
   8563c:	4625      	mov	r5, r4
   8563e:	4606      	mov	r6, r0
   85640:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85642:	1974      	adds	r4, r6, r5
   85644:	2b46      	cmp	r3, #70	; 0x46
   85646:	f47f af64 	bne.w	85512 <_svfprintf_r+0xfaa>
   8564a:	7833      	ldrb	r3, [r6, #0]
   8564c:	2b30      	cmp	r3, #48	; 0x30
   8564e:	f000 8187 	beq.w	85960 <_svfprintf_r+0x13f8>
   85652:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   85654:	442c      	add	r4, r5
   85656:	e75c      	b.n	85512 <_svfprintf_r+0xfaa>
   85658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8565a:	2b00      	cmp	r3, #0
   8565c:	bf08      	it	eq
   8565e:	2301      	moveq	r3, #1
   85660:	930a      	str	r3, [sp, #40]	; 0x28
   85662:	e723      	b.n	854ac <_svfprintf_r+0xf44>
   85664:	4630      	mov	r0, r6
   85666:	950a      	str	r5, [sp, #40]	; 0x28
   85668:	f7fe ff50 	bl	8450c <strlen>
   8566c:	940f      	str	r4, [sp, #60]	; 0x3c
   8566e:	900e      	str	r0, [sp, #56]	; 0x38
   85670:	f8cd b01c 	str.w	fp, [sp, #28]
   85674:	4603      	mov	r3, r0
   85676:	f7ff b9e7 	b.w	84a48 <_svfprintf_r+0x4e0>
   8567a:	272d      	movs	r7, #45	; 0x2d
   8567c:	2300      	movs	r3, #0
   8567e:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   85682:	930a      	str	r3, [sp, #40]	; 0x28
   85684:	f7ff b895 	b.w	847b2 <_svfprintf_r+0x24a>
   85688:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8568a:	461a      	mov	r2, r3
   8568c:	9312      	str	r3, [sp, #72]	; 0x48
   8568e:	3303      	adds	r3, #3
   85690:	db04      	blt.n	8569c <_svfprintf_r+0x1134>
   85692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85694:	4619      	mov	r1, r3
   85696:	4291      	cmp	r1, r2
   85698:	f6bf af5e 	bge.w	85558 <_svfprintf_r+0xff0>
   8569c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8569e:	3b02      	subs	r3, #2
   856a0:	9311      	str	r3, [sp, #68]	; 0x44
   856a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   856a4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   856a8:	3b01      	subs	r3, #1
   856aa:	2b00      	cmp	r3, #0
   856ac:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   856b0:	bfb4      	ite	lt
   856b2:	222d      	movlt	r2, #45	; 0x2d
   856b4:	222b      	movge	r2, #43	; 0x2b
   856b6:	931f      	str	r3, [sp, #124]	; 0x7c
   856b8:	bfb8      	it	lt
   856ba:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   856bc:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   856c0:	bfb8      	it	lt
   856c2:	f1c3 0301 	rsblt	r3, r3, #1
   856c6:	2b09      	cmp	r3, #9
   856c8:	f340 811f 	ble.w	8590a <_svfprintf_r+0x13a2>
   856cc:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   856d0:	4601      	mov	r1, r0
   856d2:	4c68      	ldr	r4, [pc, #416]	; (85874 <_svfprintf_r+0x130c>)
   856d4:	e000      	b.n	856d8 <_svfprintf_r+0x1170>
   856d6:	4611      	mov	r1, r2
   856d8:	fb84 5203 	smull	r5, r2, r4, r3
   856dc:	17dd      	asrs	r5, r3, #31
   856de:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   856e2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   856e6:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   856ea:	3230      	adds	r2, #48	; 0x30
   856ec:	2d09      	cmp	r5, #9
   856ee:	f801 2c01 	strb.w	r2, [r1, #-1]
   856f2:	462b      	mov	r3, r5
   856f4:	f101 32ff 	add.w	r2, r1, #4294967295
   856f8:	dced      	bgt.n	856d6 <_svfprintf_r+0x116e>
   856fa:	3330      	adds	r3, #48	; 0x30
   856fc:	3902      	subs	r1, #2
   856fe:	b2dc      	uxtb	r4, r3
   85700:	4288      	cmp	r0, r1
   85702:	f802 4c01 	strb.w	r4, [r2, #-1]
   85706:	f240 8192 	bls.w	85a2e <_svfprintf_r+0x14c6>
   8570a:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   8570e:	4613      	mov	r3, r2
   85710:	e001      	b.n	85716 <_svfprintf_r+0x11ae>
   85712:	f813 4b01 	ldrb.w	r4, [r3], #1
   85716:	4283      	cmp	r3, r0
   85718:	f801 4b01 	strb.w	r4, [r1], #1
   8571c:	d1f9      	bne.n	85712 <_svfprintf_r+0x11aa>
   8571e:	3301      	adds	r3, #1
   85720:	1a9b      	subs	r3, r3, r2
   85722:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   85726:	4413      	add	r3, r2
   85728:	aa21      	add	r2, sp, #132	; 0x84
   8572a:	1a9b      	subs	r3, r3, r2
   8572c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8572e:	931b      	str	r3, [sp, #108]	; 0x6c
   85730:	2a01      	cmp	r2, #1
   85732:	4413      	add	r3, r2
   85734:	930e      	str	r3, [sp, #56]	; 0x38
   85736:	f340 8148 	ble.w	859ca <_svfprintf_r+0x1462>
   8573a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8573c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8573e:	4413      	add	r3, r2
   85740:	930e      	str	r3, [sp, #56]	; 0x38
   85742:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85746:	9308      	str	r3, [sp, #32]
   85748:	2300      	movs	r3, #0
   8574a:	9312      	str	r3, [sp, #72]	; 0x48
   8574c:	e714      	b.n	85578 <_svfprintf_r+0x1010>
   8574e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85750:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85752:	f7ff b876 	b.w	84842 <_svfprintf_r+0x2da>
   85756:	aa25      	add	r2, sp, #148	; 0x94
   85758:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8575a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8575c:	f001 ffee 	bl	8773c <__ssprint_r>
   85760:	2800      	cmp	r0, #0
   85762:	f47e afde 	bne.w	84722 <_svfprintf_r+0x1ba>
   85766:	46c8      	mov	r8, r9
   85768:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8576a:	e4fb      	b.n	85164 <_svfprintf_r+0xbfc>
   8576c:	4623      	mov	r3, r4
   8576e:	e6e3      	b.n	85538 <_svfprintf_r+0xfd0>
   85770:	aa25      	add	r2, sp, #148	; 0x94
   85772:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85774:	980c      	ldr	r0, [sp, #48]	; 0x30
   85776:	f001 ffe1 	bl	8773c <__ssprint_r>
   8577a:	2800      	cmp	r0, #0
   8577c:	f47e afd1 	bne.w	84722 <_svfprintf_r+0x1ba>
   85780:	46c8      	mov	r8, r9
   85782:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   85784:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85786:	e5d3      	b.n	85330 <_svfprintf_r+0xdc8>
   85788:	aa25      	add	r2, sp, #148	; 0x94
   8578a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8578c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8578e:	f001 ffd5 	bl	8773c <__ssprint_r>
   85792:	2800      	cmp	r0, #0
   85794:	f47e afc5 	bne.w	84722 <_svfprintf_r+0x1ba>
   85798:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8579a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8579c:	46c8      	mov	r8, r9
   8579e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   857a0:	1a9a      	subs	r2, r3, r2
   857a2:	e5dd      	b.n	85360 <_svfprintf_r+0xdf8>
   857a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   857a6:	f7ff b8fe 	b.w	849a6 <_svfprintf_r+0x43e>
   857aa:	aa25      	add	r2, sp, #148	; 0x94
   857ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   857ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   857b0:	f001 ffc4 	bl	8773c <__ssprint_r>
   857b4:	2800      	cmp	r0, #0
   857b6:	f47e afb4 	bne.w	84722 <_svfprintf_r+0x1ba>
   857ba:	46c8      	mov	r8, r9
   857bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   857be:	e5b0      	b.n	85322 <_svfprintf_r+0xdba>
   857c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   857c2:	4637      	mov	r7, r6
   857c4:	2b06      	cmp	r3, #6
   857c6:	bf28      	it	cs
   857c8:	2306      	movcs	r3, #6
   857ca:	960a      	str	r6, [sp, #40]	; 0x28
   857cc:	9612      	str	r6, [sp, #72]	; 0x48
   857ce:	9308      	str	r3, [sp, #32]
   857d0:	940f      	str	r4, [sp, #60]	; 0x3c
   857d2:	f8cd b01c 	str.w	fp, [sp, #28]
   857d6:	930e      	str	r3, [sp, #56]	; 0x38
   857d8:	4e27      	ldr	r6, [pc, #156]	; (85878 <_svfprintf_r+0x1310>)
   857da:	f7fe bfe9 	b.w	847b0 <_svfprintf_r+0x248>
   857de:	2306      	movs	r3, #6
   857e0:	930a      	str	r3, [sp, #40]	; 0x28
   857e2:	e663      	b.n	854ac <_svfprintf_r+0xf44>
   857e4:	232d      	movs	r3, #45	; 0x2d
   857e6:	461f      	mov	r7, r3
   857e8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   857ec:	f7ff ba28 	b.w	84c40 <_svfprintf_r+0x6d8>
   857f0:	2003      	movs	r0, #3
   857f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   857f4:	a923      	add	r1, sp, #140	; 0x8c
   857f6:	e88d 0011 	stmia.w	sp, {r0, r4}
   857fa:	9104      	str	r1, [sp, #16]
   857fc:	a820      	add	r0, sp, #128	; 0x80
   857fe:	a91f      	add	r1, sp, #124	; 0x7c
   85800:	9003      	str	r0, [sp, #12]
   85802:	9a08      	ldr	r2, [sp, #32]
   85804:	463b      	mov	r3, r7
   85806:	9102      	str	r1, [sp, #8]
   85808:	980c      	ldr	r0, [sp, #48]	; 0x30
   8580a:	f000 f9d1 	bl	85bb0 <_dtoa_r>
   8580e:	4625      	mov	r5, r4
   85810:	4606      	mov	r6, r0
   85812:	1904      	adds	r4, r0, r4
   85814:	e719      	b.n	8564a <_svfprintf_r+0x10e2>
   85816:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85818:	4d15      	ldr	r5, [pc, #84]	; (85870 <_svfprintf_r+0x1308>)
   8581a:	f7ff bb7e 	b.w	84f1a <_svfprintf_r+0x9b2>
   8581e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85820:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85822:	4413      	add	r3, r2
   85824:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85826:	930e      	str	r3, [sp, #56]	; 0x38
   85828:	2a00      	cmp	r2, #0
   8582a:	f340 80c7 	ble.w	859bc <_svfprintf_r+0x1454>
   8582e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85832:	9308      	str	r3, [sp, #32]
   85834:	2367      	movs	r3, #103	; 0x67
   85836:	9311      	str	r3, [sp, #68]	; 0x44
   85838:	e69e      	b.n	85578 <_svfprintf_r+0x1010>
   8583a:	2b00      	cmp	r3, #0
   8583c:	f340 80e1 	ble.w	85a02 <_svfprintf_r+0x149a>
   85840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85842:	2a00      	cmp	r2, #0
   85844:	f040 80b0 	bne.w	859a8 <_svfprintf_r+0x1440>
   85848:	f01b 0f01 	tst.w	fp, #1
   8584c:	f040 80ac 	bne.w	859a8 <_svfprintf_r+0x1440>
   85850:	9308      	str	r3, [sp, #32]
   85852:	930e      	str	r3, [sp, #56]	; 0x38
   85854:	e690      	b.n	85578 <_svfprintf_r+0x1010>
   85856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85858:	940f      	str	r4, [sp, #60]	; 0x3c
   8585a:	9308      	str	r3, [sp, #32]
   8585c:	930e      	str	r3, [sp, #56]	; 0x38
   8585e:	900a      	str	r0, [sp, #40]	; 0x28
   85860:	f8cd b01c 	str.w	fp, [sp, #28]
   85864:	9012      	str	r0, [sp, #72]	; 0x48
   85866:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8586a:	f7fe bfa1 	b.w	847b0 <_svfprintf_r+0x248>
   8586e:	bf00      	nop
   85870:	0008865c 	.word	0x0008865c
   85874:	66666667 	.word	0x66666667
   85878:	00088640 	.word	0x00088640
   8587c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8587e:	2b47      	cmp	r3, #71	; 0x47
   85880:	f47f ae46 	bne.w	85510 <_svfprintf_r+0xfa8>
   85884:	f01b 0f01 	tst.w	fp, #1
   85888:	f47f aeda 	bne.w	85640 <_svfprintf_r+0x10d8>
   8588c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8588e:	1b9b      	subs	r3, r3, r6
   85890:	9313      	str	r3, [sp, #76]	; 0x4c
   85892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85894:	2b47      	cmp	r3, #71	; 0x47
   85896:	f43f aef7 	beq.w	85688 <_svfprintf_r+0x1120>
   8589a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8589c:	9312      	str	r3, [sp, #72]	; 0x48
   8589e:	e700      	b.n	856a2 <_svfprintf_r+0x113a>
   858a0:	2000      	movs	r0, #0
   858a2:	900a      	str	r0, [sp, #40]	; 0x28
   858a4:	f7fe bebc 	b.w	84620 <_svfprintf_r+0xb8>
   858a8:	424f      	negs	r7, r1
   858aa:	3110      	adds	r1, #16
   858ac:	da35      	bge.n	8591a <_svfprintf_r+0x13b2>
   858ae:	2410      	movs	r4, #16
   858b0:	4d6a      	ldr	r5, [pc, #424]	; (85a5c <_svfprintf_r+0x14f4>)
   858b2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   858b6:	e004      	b.n	858c2 <_svfprintf_r+0x135a>
   858b8:	f108 0808 	add.w	r8, r8, #8
   858bc:	3f10      	subs	r7, #16
   858be:	2f10      	cmp	r7, #16
   858c0:	dd2c      	ble.n	8591c <_svfprintf_r+0x13b4>
   858c2:	3301      	adds	r3, #1
   858c4:	3210      	adds	r2, #16
   858c6:	2b07      	cmp	r3, #7
   858c8:	9227      	str	r2, [sp, #156]	; 0x9c
   858ca:	9326      	str	r3, [sp, #152]	; 0x98
   858cc:	f8c8 5000 	str.w	r5, [r8]
   858d0:	f8c8 4004 	str.w	r4, [r8, #4]
   858d4:	ddf0      	ble.n	858b8 <_svfprintf_r+0x1350>
   858d6:	aa25      	add	r2, sp, #148	; 0x94
   858d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   858da:	4658      	mov	r0, fp
   858dc:	f001 ff2e 	bl	8773c <__ssprint_r>
   858e0:	2800      	cmp	r0, #0
   858e2:	f47e af1e 	bne.w	84722 <_svfprintf_r+0x1ba>
   858e6:	46c8      	mov	r8, r9
   858e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   858ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
   858ec:	e7e6      	b.n	858bc <_svfprintf_r+0x1354>
   858ee:	aa25      	add	r2, sp, #148	; 0x94
   858f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   858f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   858f4:	f001 ff22 	bl	8773c <__ssprint_r>
   858f8:	2800      	cmp	r0, #0
   858fa:	f47e af12 	bne.w	84722 <_svfprintf_r+0x1ba>
   858fe:	46c8      	mov	r8, r9
   85900:	991f      	ldr	r1, [sp, #124]	; 0x7c
   85902:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85904:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85906:	f7ff bbc3 	b.w	85090 <_svfprintf_r+0xb28>
   8590a:	2230      	movs	r2, #48	; 0x30
   8590c:	4413      	add	r3, r2
   8590e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   85912:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   85916:	ab22      	add	r3, sp, #136	; 0x88
   85918:	e706      	b.n	85728 <_svfprintf_r+0x11c0>
   8591a:	4d50      	ldr	r5, [pc, #320]	; (85a5c <_svfprintf_r+0x14f4>)
   8591c:	3301      	adds	r3, #1
   8591e:	443a      	add	r2, r7
   85920:	2b07      	cmp	r3, #7
   85922:	e888 00a0 	stmia.w	r8, {r5, r7}
   85926:	9227      	str	r2, [sp, #156]	; 0x9c
   85928:	9326      	str	r3, [sp, #152]	; 0x98
   8592a:	f108 0808 	add.w	r8, r8, #8
   8592e:	f77f abb2 	ble.w	85096 <_svfprintf_r+0xb2e>
   85932:	aa25      	add	r2, sp, #148	; 0x94
   85934:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85936:	980c      	ldr	r0, [sp, #48]	; 0x30
   85938:	f001 ff00 	bl	8773c <__ssprint_r>
   8593c:	2800      	cmp	r0, #0
   8593e:	f47e aef0 	bne.w	84722 <_svfprintf_r+0x1ba>
   85942:	46c8      	mov	r8, r9
   85944:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85946:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85948:	f7ff bba5 	b.w	85096 <_svfprintf_r+0xb2e>
   8594c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8594e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85950:	4413      	add	r3, r2
   85952:	930e      	str	r3, [sp, #56]	; 0x38
   85954:	e76b      	b.n	8582e <_svfprintf_r+0x12c6>
   85956:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   85958:	e5ee      	b.n	85538 <_svfprintf_r+0xfd0>
   8595a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8595c:	4d3f      	ldr	r5, [pc, #252]	; (85a5c <_svfprintf_r+0x14f4>)
   8595e:	e4bb      	b.n	852d8 <_svfprintf_r+0xd70>
   85960:	9a16      	ldr	r2, [sp, #88]	; 0x58
   85962:	9808      	ldr	r0, [sp, #32]
   85964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   85966:	4639      	mov	r1, r7
   85968:	f002 fbc0 	bl	880ec <__aeabi_dcmpeq>
   8596c:	2800      	cmp	r0, #0
   8596e:	f47f ae70 	bne.w	85652 <_svfprintf_r+0x10ea>
   85972:	f1c5 0501 	rsb	r5, r5, #1
   85976:	951f      	str	r5, [sp, #124]	; 0x7c
   85978:	442c      	add	r4, r5
   8597a:	e5ca      	b.n	85512 <_svfprintf_r+0xfaa>
   8597c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8597e:	4e38      	ldr	r6, [pc, #224]	; (85a60 <_svfprintf_r+0x14f8>)
   85980:	2b00      	cmp	r3, #0
   85982:	bfbe      	ittt	lt
   85984:	232d      	movlt	r3, #45	; 0x2d
   85986:	461f      	movlt	r7, r3
   85988:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   8598c:	f04f 0303 	mov.w	r3, #3
   85990:	461a      	mov	r2, r3
   85992:	9308      	str	r3, [sp, #32]
   85994:	f04f 0300 	mov.w	r3, #0
   85998:	bfa8      	it	ge
   8599a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   8599e:	4619      	mov	r1, r3
   859a0:	930a      	str	r3, [sp, #40]	; 0x28
   859a2:	4b30      	ldr	r3, [pc, #192]	; (85a64 <_svfprintf_r+0x14fc>)
   859a4:	f7ff b954 	b.w	84c50 <_svfprintf_r+0x6e8>
   859a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   859aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
   859ac:	4413      	add	r3, r2
   859ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   859b0:	441a      	add	r2, r3
   859b2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   859b6:	920e      	str	r2, [sp, #56]	; 0x38
   859b8:	9308      	str	r3, [sp, #32]
   859ba:	e5dd      	b.n	85578 <_svfprintf_r+0x1010>
   859bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   859be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   859c0:	f1c3 0301 	rsb	r3, r3, #1
   859c4:	441a      	add	r2, r3
   859c6:	4613      	mov	r3, r2
   859c8:	e7c3      	b.n	85952 <_svfprintf_r+0x13ea>
   859ca:	f01b 0301 	ands.w	r3, fp, #1
   859ce:	9312      	str	r3, [sp, #72]	; 0x48
   859d0:	f47f aeb3 	bne.w	8573a <_svfprintf_r+0x11d2>
   859d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   859d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   859da:	9308      	str	r3, [sp, #32]
   859dc:	e5cc      	b.n	85578 <_svfprintf_r+0x1010>
   859de:	4d1f      	ldr	r5, [pc, #124]	; (85a5c <_svfprintf_r+0x14f4>)
   859e0:	e43c      	b.n	8525c <_svfprintf_r+0xcf4>
   859e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   859e4:	4d1d      	ldr	r5, [pc, #116]	; (85a5c <_svfprintf_r+0x14f4>)
   859e6:	e491      	b.n	8530c <_svfprintf_r+0xda4>
   859e8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   859ea:	f89a 3001 	ldrb.w	r3, [sl, #1]
   859ee:	6828      	ldr	r0, [r5, #0]
   859f0:	46a2      	mov	sl, r4
   859f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   859f6:	900a      	str	r0, [sp, #40]	; 0x28
   859f8:	4628      	mov	r0, r5
   859fa:	3004      	adds	r0, #4
   859fc:	900f      	str	r0, [sp, #60]	; 0x3c
   859fe:	f7fe be0d 	b.w	8461c <_svfprintf_r+0xb4>
   85a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85a04:	b913      	cbnz	r3, 85a0c <_svfprintf_r+0x14a4>
   85a06:	f01b 0f01 	tst.w	fp, #1
   85a0a:	d002      	beq.n	85a12 <_svfprintf_r+0x14aa>
   85a0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85a0e:	3301      	adds	r3, #1
   85a10:	e7cd      	b.n	859ae <_svfprintf_r+0x1446>
   85a12:	2301      	movs	r3, #1
   85a14:	e71c      	b.n	85850 <_svfprintf_r+0x12e8>
   85a16:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85a1a:	f7ff b980 	b.w	84d1e <_svfprintf_r+0x7b6>
   85a1e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85a22:	f7ff b93a 	b.w	84c9a <_svfprintf_r+0x732>
   85a26:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85a2a:	f7ff b84f 	b.w	84acc <_svfprintf_r+0x564>
   85a2e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   85a32:	e679      	b.n	85728 <_svfprintf_r+0x11c0>
   85a34:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85a38:	f7ff b9b2 	b.w	84da0 <_svfprintf_r+0x838>
   85a3c:	f04f 32ff 	mov.w	r2, #4294967295
   85a40:	230c      	movs	r3, #12
   85a42:	9209      	str	r2, [sp, #36]	; 0x24
   85a44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85a46:	6013      	str	r3, [r2, #0]
   85a48:	f7fe be74 	b.w	84734 <_svfprintf_r+0x1cc>
   85a4c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85a50:	f7ff b8c4 	b.w	84bdc <_svfprintf_r+0x674>
   85a54:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85a58:	f7ff b878 	b.w	84b4c <_svfprintf_r+0x5e4>
   85a5c:	0008865c 	.word	0x0008865c
   85a60:	00088614 	.word	0x00088614
   85a64:	00088610 	.word	0x00088610

00085a68 <register_fini>:
   85a68:	4b02      	ldr	r3, [pc, #8]	; (85a74 <register_fini+0xc>)
   85a6a:	b113      	cbz	r3, 85a72 <register_fini+0xa>
   85a6c:	4802      	ldr	r0, [pc, #8]	; (85a78 <register_fini+0x10>)
   85a6e:	f000 b805 	b.w	85a7c <atexit>
   85a72:	4770      	bx	lr
   85a74:	00000000 	.word	0x00000000
   85a78:	000869f5 	.word	0x000869f5

00085a7c <atexit>:
   85a7c:	2300      	movs	r3, #0
   85a7e:	4601      	mov	r1, r0
   85a80:	461a      	mov	r2, r3
   85a82:	4618      	mov	r0, r3
   85a84:	f001 bed8 	b.w	87838 <__register_exitproc>

00085a88 <quorem>:
   85a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85a8c:	6903      	ldr	r3, [r0, #16]
   85a8e:	690f      	ldr	r7, [r1, #16]
   85a90:	b083      	sub	sp, #12
   85a92:	429f      	cmp	r7, r3
   85a94:	f300 8088 	bgt.w	85ba8 <quorem+0x120>
   85a98:	3f01      	subs	r7, #1
   85a9a:	f101 0614 	add.w	r6, r1, #20
   85a9e:	f100 0a14 	add.w	sl, r0, #20
   85aa2:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   85aa6:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   85aaa:	3301      	adds	r3, #1
   85aac:	fbb2 f8f3 	udiv	r8, r2, r3
   85ab0:	00bb      	lsls	r3, r7, #2
   85ab2:	9300      	str	r3, [sp, #0]
   85ab4:	eb06 0903 	add.w	r9, r6, r3
   85ab8:	4453      	add	r3, sl
   85aba:	9301      	str	r3, [sp, #4]
   85abc:	f1b8 0f00 	cmp.w	r8, #0
   85ac0:	d03b      	beq.n	85b3a <quorem+0xb2>
   85ac2:	2300      	movs	r3, #0
   85ac4:	46b4      	mov	ip, r6
   85ac6:	461c      	mov	r4, r3
   85ac8:	46d6      	mov	lr, sl
   85aca:	f85c 2b04 	ldr.w	r2, [ip], #4
   85ace:	f8de 5000 	ldr.w	r5, [lr]
   85ad2:	fa1f fb82 	uxth.w	fp, r2
   85ad6:	fb08 330b 	mla	r3, r8, fp, r3
   85ada:	0c12      	lsrs	r2, r2, #16
   85adc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   85ae0:	fb08 bb02 	mla	fp, r8, r2, fp
   85ae4:	b29a      	uxth	r2, r3
   85ae6:	1aa2      	subs	r2, r4, r2
   85ae8:	b2ab      	uxth	r3, r5
   85aea:	fa1f f48b 	uxth.w	r4, fp
   85aee:	441a      	add	r2, r3
   85af0:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   85af4:	eb04 4422 	add.w	r4, r4, r2, asr #16
   85af8:	b292      	uxth	r2, r2
   85afa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   85afe:	45e1      	cmp	r9, ip
   85b00:	f84e 2b04 	str.w	r2, [lr], #4
   85b04:	ea4f 4424 	mov.w	r4, r4, asr #16
   85b08:	ea4f 431b 	mov.w	r3, fp, lsr #16
   85b0c:	d2dd      	bcs.n	85aca <quorem+0x42>
   85b0e:	9b00      	ldr	r3, [sp, #0]
   85b10:	f85a 3003 	ldr.w	r3, [sl, r3]
   85b14:	b98b      	cbnz	r3, 85b3a <quorem+0xb2>
   85b16:	9c01      	ldr	r4, [sp, #4]
   85b18:	1f23      	subs	r3, r4, #4
   85b1a:	459a      	cmp	sl, r3
   85b1c:	d20c      	bcs.n	85b38 <quorem+0xb0>
   85b1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85b22:	b94b      	cbnz	r3, 85b38 <quorem+0xb0>
   85b24:	f1a4 0308 	sub.w	r3, r4, #8
   85b28:	e002      	b.n	85b30 <quorem+0xa8>
   85b2a:	681a      	ldr	r2, [r3, #0]
   85b2c:	3b04      	subs	r3, #4
   85b2e:	b91a      	cbnz	r2, 85b38 <quorem+0xb0>
   85b30:	459a      	cmp	sl, r3
   85b32:	f107 37ff 	add.w	r7, r7, #4294967295
   85b36:	d3f8      	bcc.n	85b2a <quorem+0xa2>
   85b38:	6107      	str	r7, [r0, #16]
   85b3a:	4604      	mov	r4, r0
   85b3c:	f001 fcee 	bl	8751c <__mcmp>
   85b40:	2800      	cmp	r0, #0
   85b42:	db2d      	blt.n	85ba0 <quorem+0x118>
   85b44:	4655      	mov	r5, sl
   85b46:	2300      	movs	r3, #0
   85b48:	f108 0801 	add.w	r8, r8, #1
   85b4c:	f856 1b04 	ldr.w	r1, [r6], #4
   85b50:	6828      	ldr	r0, [r5, #0]
   85b52:	b28a      	uxth	r2, r1
   85b54:	1a9a      	subs	r2, r3, r2
   85b56:	0c0b      	lsrs	r3, r1, #16
   85b58:	b281      	uxth	r1, r0
   85b5a:	440a      	add	r2, r1
   85b5c:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   85b60:	eb03 4322 	add.w	r3, r3, r2, asr #16
   85b64:	b292      	uxth	r2, r2
   85b66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   85b6a:	45b1      	cmp	r9, r6
   85b6c:	f845 2b04 	str.w	r2, [r5], #4
   85b70:	ea4f 4323 	mov.w	r3, r3, asr #16
   85b74:	d2ea      	bcs.n	85b4c <quorem+0xc4>
   85b76:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   85b7a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   85b7e:	b97a      	cbnz	r2, 85ba0 <quorem+0x118>
   85b80:	1f1a      	subs	r2, r3, #4
   85b82:	4592      	cmp	sl, r2
   85b84:	d20b      	bcs.n	85b9e <quorem+0x116>
   85b86:	f853 2c04 	ldr.w	r2, [r3, #-4]
   85b8a:	b942      	cbnz	r2, 85b9e <quorem+0x116>
   85b8c:	3b08      	subs	r3, #8
   85b8e:	e002      	b.n	85b96 <quorem+0x10e>
   85b90:	681a      	ldr	r2, [r3, #0]
   85b92:	3b04      	subs	r3, #4
   85b94:	b91a      	cbnz	r2, 85b9e <quorem+0x116>
   85b96:	459a      	cmp	sl, r3
   85b98:	f107 37ff 	add.w	r7, r7, #4294967295
   85b9c:	d3f8      	bcc.n	85b90 <quorem+0x108>
   85b9e:	6127      	str	r7, [r4, #16]
   85ba0:	4640      	mov	r0, r8
   85ba2:	b003      	add	sp, #12
   85ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ba8:	2000      	movs	r0, #0
   85baa:	b003      	add	sp, #12
   85bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085bb0 <_dtoa_r>:
   85bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85bb4:	6c05      	ldr	r5, [r0, #64]	; 0x40
   85bb6:	b09b      	sub	sp, #108	; 0x6c
   85bb8:	4604      	mov	r4, r0
   85bba:	4692      	mov	sl, r2
   85bbc:	469b      	mov	fp, r3
   85bbe:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   85bc0:	b14d      	cbz	r5, 85bd6 <_dtoa_r+0x26>
   85bc2:	2301      	movs	r3, #1
   85bc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   85bc6:	4629      	mov	r1, r5
   85bc8:	4093      	lsls	r3, r2
   85bca:	60ab      	str	r3, [r5, #8]
   85bcc:	606a      	str	r2, [r5, #4]
   85bce:	f001 facd 	bl	8716c <_Bfree>
   85bd2:	2300      	movs	r3, #0
   85bd4:	6423      	str	r3, [r4, #64]	; 0x40
   85bd6:	f1bb 0f00 	cmp.w	fp, #0
   85bda:	465d      	mov	r5, fp
   85bdc:	db35      	blt.n	85c4a <_dtoa_r+0x9a>
   85bde:	2300      	movs	r3, #0
   85be0:	6033      	str	r3, [r6, #0]
   85be2:	4b9d      	ldr	r3, [pc, #628]	; (85e58 <_dtoa_r+0x2a8>)
   85be4:	43ab      	bics	r3, r5
   85be6:	d015      	beq.n	85c14 <_dtoa_r+0x64>
   85be8:	2200      	movs	r2, #0
   85bea:	2300      	movs	r3, #0
   85bec:	4650      	mov	r0, sl
   85bee:	4659      	mov	r1, fp
   85bf0:	f002 fa7c 	bl	880ec <__aeabi_dcmpeq>
   85bf4:	4680      	mov	r8, r0
   85bf6:	2800      	cmp	r0, #0
   85bf8:	d02d      	beq.n	85c56 <_dtoa_r+0xa6>
   85bfa:	2301      	movs	r3, #1
   85bfc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85bfe:	6013      	str	r3, [r2, #0]
   85c00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85c02:	2b00      	cmp	r3, #0
   85c04:	f000 80bd 	beq.w	85d82 <_dtoa_r+0x1d2>
   85c08:	4894      	ldr	r0, [pc, #592]	; (85e5c <_dtoa_r+0x2ac>)
   85c0a:	6018      	str	r0, [r3, #0]
   85c0c:	3801      	subs	r0, #1
   85c0e:	b01b      	add	sp, #108	; 0x6c
   85c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c14:	f242 730f 	movw	r3, #9999	; 0x270f
   85c18:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85c1a:	6013      	str	r3, [r2, #0]
   85c1c:	f1ba 0f00 	cmp.w	sl, #0
   85c20:	d10d      	bne.n	85c3e <_dtoa_r+0x8e>
   85c22:	f3c5 0513 	ubfx	r5, r5, #0, #20
   85c26:	b955      	cbnz	r5, 85c3e <_dtoa_r+0x8e>
   85c28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85c2a:	488d      	ldr	r0, [pc, #564]	; (85e60 <_dtoa_r+0x2b0>)
   85c2c:	2b00      	cmp	r3, #0
   85c2e:	d0ee      	beq.n	85c0e <_dtoa_r+0x5e>
   85c30:	f100 0308 	add.w	r3, r0, #8
   85c34:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   85c36:	6013      	str	r3, [r2, #0]
   85c38:	b01b      	add	sp, #108	; 0x6c
   85c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85c40:	4888      	ldr	r0, [pc, #544]	; (85e64 <_dtoa_r+0x2b4>)
   85c42:	2b00      	cmp	r3, #0
   85c44:	d0e3      	beq.n	85c0e <_dtoa_r+0x5e>
   85c46:	1cc3      	adds	r3, r0, #3
   85c48:	e7f4      	b.n	85c34 <_dtoa_r+0x84>
   85c4a:	2301      	movs	r3, #1
   85c4c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   85c50:	6033      	str	r3, [r6, #0]
   85c52:	46ab      	mov	fp, r5
   85c54:	e7c5      	b.n	85be2 <_dtoa_r+0x32>
   85c56:	aa18      	add	r2, sp, #96	; 0x60
   85c58:	ab19      	add	r3, sp, #100	; 0x64
   85c5a:	9201      	str	r2, [sp, #4]
   85c5c:	9300      	str	r3, [sp, #0]
   85c5e:	4652      	mov	r2, sl
   85c60:	465b      	mov	r3, fp
   85c62:	4620      	mov	r0, r4
   85c64:	f001 fd04 	bl	87670 <__d2b>
   85c68:	0d2b      	lsrs	r3, r5, #20
   85c6a:	4681      	mov	r9, r0
   85c6c:	d071      	beq.n	85d52 <_dtoa_r+0x1a2>
   85c6e:	4650      	mov	r0, sl
   85c70:	f3cb 0213 	ubfx	r2, fp, #0, #20
   85c74:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   85c78:	9f18      	ldr	r7, [sp, #96]	; 0x60
   85c7a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   85c7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   85c82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   85c86:	2200      	movs	r2, #0
   85c88:	4b77      	ldr	r3, [pc, #476]	; (85e68 <_dtoa_r+0x2b8>)
   85c8a:	f7fd fecf 	bl	83a2c <__aeabi_dsub>
   85c8e:	a36c      	add	r3, pc, #432	; (adr r3, 85e40 <_dtoa_r+0x290>)
   85c90:	e9d3 2300 	ldrd	r2, r3, [r3]
   85c94:	f7fe f87e 	bl	83d94 <__aeabi_dmul>
   85c98:	a36b      	add	r3, pc, #428	; (adr r3, 85e48 <_dtoa_r+0x298>)
   85c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   85c9e:	f7fd fec7 	bl	83a30 <__adddf3>
   85ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   85ca6:	4630      	mov	r0, r6
   85ca8:	f7fe f80e 	bl	83cc8 <__aeabi_i2d>
   85cac:	a368      	add	r3, pc, #416	; (adr r3, 85e50 <_dtoa_r+0x2a0>)
   85cae:	e9d3 2300 	ldrd	r2, r3, [r3]
   85cb2:	f7fe f86f 	bl	83d94 <__aeabi_dmul>
   85cb6:	4602      	mov	r2, r0
   85cb8:	460b      	mov	r3, r1
   85cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   85cbe:	f7fd feb7 	bl	83a30 <__adddf3>
   85cc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   85cc6:	f002 fa59 	bl	8817c <__aeabi_d2iz>
   85cca:	2200      	movs	r2, #0
   85ccc:	9002      	str	r0, [sp, #8]
   85cce:	2300      	movs	r3, #0
   85cd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   85cd4:	f002 fa14 	bl	88100 <__aeabi_dcmplt>
   85cd8:	2800      	cmp	r0, #0
   85cda:	f040 816d 	bne.w	85fb8 <_dtoa_r+0x408>
   85cde:	9d02      	ldr	r5, [sp, #8]
   85ce0:	2d16      	cmp	r5, #22
   85ce2:	f200 8157 	bhi.w	85f94 <_dtoa_r+0x3e4>
   85ce6:	4961      	ldr	r1, [pc, #388]	; (85e6c <_dtoa_r+0x2bc>)
   85ce8:	4652      	mov	r2, sl
   85cea:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   85cee:	465b      	mov	r3, fp
   85cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
   85cf4:	f002 fa22 	bl	8813c <__aeabi_dcmpgt>
   85cf8:	2800      	cmp	r0, #0
   85cfa:	f000 81be 	beq.w	8607a <_dtoa_r+0x4ca>
   85cfe:	1e6b      	subs	r3, r5, #1
   85d00:	9302      	str	r3, [sp, #8]
   85d02:	2300      	movs	r3, #0
   85d04:	930e      	str	r3, [sp, #56]	; 0x38
   85d06:	1bbf      	subs	r7, r7, r6
   85d08:	1e7b      	subs	r3, r7, #1
   85d0a:	9308      	str	r3, [sp, #32]
   85d0c:	f100 814e 	bmi.w	85fac <_dtoa_r+0x3fc>
   85d10:	2300      	movs	r3, #0
   85d12:	930a      	str	r3, [sp, #40]	; 0x28
   85d14:	9b02      	ldr	r3, [sp, #8]
   85d16:	2b00      	cmp	r3, #0
   85d18:	f2c0 813f 	blt.w	85f9a <_dtoa_r+0x3ea>
   85d1c:	9a08      	ldr	r2, [sp, #32]
   85d1e:	930d      	str	r3, [sp, #52]	; 0x34
   85d20:	4611      	mov	r1, r2
   85d22:	4419      	add	r1, r3
   85d24:	2300      	movs	r3, #0
   85d26:	9108      	str	r1, [sp, #32]
   85d28:	930c      	str	r3, [sp, #48]	; 0x30
   85d2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85d2c:	2b09      	cmp	r3, #9
   85d2e:	d82a      	bhi.n	85d86 <_dtoa_r+0x1d6>
   85d30:	2b05      	cmp	r3, #5
   85d32:	f340 8658 	ble.w	869e6 <_dtoa_r+0xe36>
   85d36:	2500      	movs	r5, #0
   85d38:	3b04      	subs	r3, #4
   85d3a:	9324      	str	r3, [sp, #144]	; 0x90
   85d3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85d3e:	3b02      	subs	r3, #2
   85d40:	2b03      	cmp	r3, #3
   85d42:	f200 863f 	bhi.w	869c4 <_dtoa_r+0xe14>
   85d46:	e8df f013 	tbh	[pc, r3, lsl #1]
   85d4a:	03ce      	.short	0x03ce
   85d4c:	03d902c3 	.word	0x03d902c3
   85d50:	045b      	.short	0x045b
   85d52:	9f18      	ldr	r7, [sp, #96]	; 0x60
   85d54:	9e19      	ldr	r6, [sp, #100]	; 0x64
   85d56:	443e      	add	r6, r7
   85d58:	f206 4332 	addw	r3, r6, #1074	; 0x432
   85d5c:	2b20      	cmp	r3, #32
   85d5e:	f340 8187 	ble.w	86070 <_dtoa_r+0x4c0>
   85d62:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   85d66:	f206 4012 	addw	r0, r6, #1042	; 0x412
   85d6a:	409d      	lsls	r5, r3
   85d6c:	fa2a f000 	lsr.w	r0, sl, r0
   85d70:	4328      	orrs	r0, r5
   85d72:	f7fd ff99 	bl	83ca8 <__aeabi_ui2d>
   85d76:	2301      	movs	r3, #1
   85d78:	3e01      	subs	r6, #1
   85d7a:	9314      	str	r3, [sp, #80]	; 0x50
   85d7c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   85d80:	e781      	b.n	85c86 <_dtoa_r+0xd6>
   85d82:	483b      	ldr	r0, [pc, #236]	; (85e70 <_dtoa_r+0x2c0>)
   85d84:	e743      	b.n	85c0e <_dtoa_r+0x5e>
   85d86:	2100      	movs	r1, #0
   85d88:	4620      	mov	r0, r4
   85d8a:	6461      	str	r1, [r4, #68]	; 0x44
   85d8c:	9125      	str	r1, [sp, #148]	; 0x94
   85d8e:	f001 f9c7 	bl	87120 <_Balloc>
   85d92:	f04f 33ff 	mov.w	r3, #4294967295
   85d96:	9307      	str	r3, [sp, #28]
   85d98:	930f      	str	r3, [sp, #60]	; 0x3c
   85d9a:	2301      	movs	r3, #1
   85d9c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   85d9e:	9004      	str	r0, [sp, #16]
   85da0:	6420      	str	r0, [r4, #64]	; 0x40
   85da2:	9224      	str	r2, [sp, #144]	; 0x90
   85da4:	930b      	str	r3, [sp, #44]	; 0x2c
   85da6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85da8:	2b00      	cmp	r3, #0
   85daa:	f2c0 80d3 	blt.w	85f54 <_dtoa_r+0x3a4>
   85dae:	9a02      	ldr	r2, [sp, #8]
   85db0:	2a0e      	cmp	r2, #14
   85db2:	f300 80cf 	bgt.w	85f54 <_dtoa_r+0x3a4>
   85db6:	4b2d      	ldr	r3, [pc, #180]	; (85e6c <_dtoa_r+0x2bc>)
   85db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   85dc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   85dc4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85dc6:	2b00      	cmp	r3, #0
   85dc8:	f2c0 83b4 	blt.w	86534 <_dtoa_r+0x984>
   85dcc:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   85dd0:	4650      	mov	r0, sl
   85dd2:	462a      	mov	r2, r5
   85dd4:	4633      	mov	r3, r6
   85dd6:	4659      	mov	r1, fp
   85dd8:	f7fe f906 	bl	83fe8 <__aeabi_ddiv>
   85ddc:	f002 f9ce 	bl	8817c <__aeabi_d2iz>
   85de0:	4680      	mov	r8, r0
   85de2:	f7fd ff71 	bl	83cc8 <__aeabi_i2d>
   85de6:	462a      	mov	r2, r5
   85de8:	4633      	mov	r3, r6
   85dea:	f7fd ffd3 	bl	83d94 <__aeabi_dmul>
   85dee:	4602      	mov	r2, r0
   85df0:	460b      	mov	r3, r1
   85df2:	4650      	mov	r0, sl
   85df4:	4659      	mov	r1, fp
   85df6:	f7fd fe19 	bl	83a2c <__aeabi_dsub>
   85dfa:	9e07      	ldr	r6, [sp, #28]
   85dfc:	9f04      	ldr	r7, [sp, #16]
   85dfe:	f108 0530 	add.w	r5, r8, #48	; 0x30
   85e02:	2e01      	cmp	r6, #1
   85e04:	703d      	strb	r5, [r7, #0]
   85e06:	4602      	mov	r2, r0
   85e08:	460b      	mov	r3, r1
   85e0a:	f107 0501 	add.w	r5, r7, #1
   85e0e:	d064      	beq.n	85eda <_dtoa_r+0x32a>
   85e10:	2200      	movs	r2, #0
   85e12:	4b18      	ldr	r3, [pc, #96]	; (85e74 <_dtoa_r+0x2c4>)
   85e14:	f7fd ffbe 	bl	83d94 <__aeabi_dmul>
   85e18:	2200      	movs	r2, #0
   85e1a:	2300      	movs	r3, #0
   85e1c:	4606      	mov	r6, r0
   85e1e:	460f      	mov	r7, r1
   85e20:	f002 f964 	bl	880ec <__aeabi_dcmpeq>
   85e24:	2800      	cmp	r0, #0
   85e26:	f040 8082 	bne.w	85f2e <_dtoa_r+0x37e>
   85e2a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   85e2e:	f04f 0a00 	mov.w	sl, #0
   85e32:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   85e36:	f04f 0b00 	mov.w	fp, #0
   85e3a:	940b      	str	r4, [sp, #44]	; 0x2c
   85e3c:	e029      	b.n	85e92 <_dtoa_r+0x2e2>
   85e3e:	bf00      	nop
   85e40:	636f4361 	.word	0x636f4361
   85e44:	3fd287a7 	.word	0x3fd287a7
   85e48:	8b60c8b3 	.word	0x8b60c8b3
   85e4c:	3fc68a28 	.word	0x3fc68a28
   85e50:	509f79fb 	.word	0x509f79fb
   85e54:	3fd34413 	.word	0x3fd34413
   85e58:	7ff00000 	.word	0x7ff00000
   85e5c:	00088649 	.word	0x00088649
   85e60:	0008866c 	.word	0x0008866c
   85e64:	00088678 	.word	0x00088678
   85e68:	3ff80000 	.word	0x3ff80000
   85e6c:	000886a8 	.word	0x000886a8
   85e70:	00088648 	.word	0x00088648
   85e74:	40240000 	.word	0x40240000
   85e78:	2200      	movs	r2, #0
   85e7a:	4b81      	ldr	r3, [pc, #516]	; (86080 <_dtoa_r+0x4d0>)
   85e7c:	f7fd ff8a 	bl	83d94 <__aeabi_dmul>
   85e80:	4652      	mov	r2, sl
   85e82:	465b      	mov	r3, fp
   85e84:	4606      	mov	r6, r0
   85e86:	460f      	mov	r7, r1
   85e88:	f002 f930 	bl	880ec <__aeabi_dcmpeq>
   85e8c:	2800      	cmp	r0, #0
   85e8e:	f040 83ba 	bne.w	86606 <_dtoa_r+0xa56>
   85e92:	4642      	mov	r2, r8
   85e94:	464b      	mov	r3, r9
   85e96:	4630      	mov	r0, r6
   85e98:	4639      	mov	r1, r7
   85e9a:	f7fe f8a5 	bl	83fe8 <__aeabi_ddiv>
   85e9e:	f002 f96d 	bl	8817c <__aeabi_d2iz>
   85ea2:	4604      	mov	r4, r0
   85ea4:	f7fd ff10 	bl	83cc8 <__aeabi_i2d>
   85ea8:	4642      	mov	r2, r8
   85eaa:	464b      	mov	r3, r9
   85eac:	f7fd ff72 	bl	83d94 <__aeabi_dmul>
   85eb0:	4602      	mov	r2, r0
   85eb2:	460b      	mov	r3, r1
   85eb4:	4630      	mov	r0, r6
   85eb6:	4639      	mov	r1, r7
   85eb8:	f7fd fdb8 	bl	83a2c <__aeabi_dsub>
   85ebc:	f104 0630 	add.w	r6, r4, #48	; 0x30
   85ec0:	f805 6b01 	strb.w	r6, [r5], #1
   85ec4:	9e04      	ldr	r6, [sp, #16]
   85ec6:	9f07      	ldr	r7, [sp, #28]
   85ec8:	1bae      	subs	r6, r5, r6
   85eca:	42be      	cmp	r6, r7
   85ecc:	4602      	mov	r2, r0
   85ece:	460b      	mov	r3, r1
   85ed0:	d1d2      	bne.n	85e78 <_dtoa_r+0x2c8>
   85ed2:	46a0      	mov	r8, r4
   85ed4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85ed8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85eda:	4610      	mov	r0, r2
   85edc:	4619      	mov	r1, r3
   85ede:	f7fd fda7 	bl	83a30 <__adddf3>
   85ee2:	4606      	mov	r6, r0
   85ee4:	460f      	mov	r7, r1
   85ee6:	4602      	mov	r2, r0
   85ee8:	460b      	mov	r3, r1
   85eea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85eee:	f002 f907 	bl	88100 <__aeabi_dcmplt>
   85ef2:	b948      	cbnz	r0, 85f08 <_dtoa_r+0x358>
   85ef4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85ef8:	4632      	mov	r2, r6
   85efa:	463b      	mov	r3, r7
   85efc:	f002 f8f6 	bl	880ec <__aeabi_dcmpeq>
   85f00:	b1a8      	cbz	r0, 85f2e <_dtoa_r+0x37e>
   85f02:	f018 0f01 	tst.w	r8, #1
   85f06:	d012      	beq.n	85f2e <_dtoa_r+0x37e>
   85f08:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   85f0c:	1e6b      	subs	r3, r5, #1
   85f0e:	9a04      	ldr	r2, [sp, #16]
   85f10:	e004      	b.n	85f1c <_dtoa_r+0x36c>
   85f12:	429a      	cmp	r2, r3
   85f14:	f000 8402 	beq.w	8671c <_dtoa_r+0xb6c>
   85f18:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   85f1c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   85f20:	f103 0501 	add.w	r5, r3, #1
   85f24:	d0f5      	beq.n	85f12 <_dtoa_r+0x362>
   85f26:	f108 0801 	add.w	r8, r8, #1
   85f2a:	f883 8000 	strb.w	r8, [r3]
   85f2e:	4649      	mov	r1, r9
   85f30:	4620      	mov	r0, r4
   85f32:	f001 f91b 	bl	8716c <_Bfree>
   85f36:	2200      	movs	r2, #0
   85f38:	9b02      	ldr	r3, [sp, #8]
   85f3a:	702a      	strb	r2, [r5, #0]
   85f3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85f3e:	3301      	adds	r3, #1
   85f40:	6013      	str	r3, [r2, #0]
   85f42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85f44:	2b00      	cmp	r3, #0
   85f46:	f000 839f 	beq.w	86688 <_dtoa_r+0xad8>
   85f4a:	9804      	ldr	r0, [sp, #16]
   85f4c:	601d      	str	r5, [r3, #0]
   85f4e:	b01b      	add	sp, #108	; 0x6c
   85f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85f54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85f56:	2a00      	cmp	r2, #0
   85f58:	d03e      	beq.n	85fd8 <_dtoa_r+0x428>
   85f5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85f5c:	2a01      	cmp	r2, #1
   85f5e:	f340 8311 	ble.w	86584 <_dtoa_r+0x9d4>
   85f62:	9b07      	ldr	r3, [sp, #28]
   85f64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85f66:	1e5f      	subs	r7, r3, #1
   85f68:	42ba      	cmp	r2, r7
   85f6a:	f2c0 8390 	blt.w	8668e <_dtoa_r+0xade>
   85f6e:	1bd7      	subs	r7, r2, r7
   85f70:	9b07      	ldr	r3, [sp, #28]
   85f72:	2b00      	cmp	r3, #0
   85f74:	f2c0 848c 	blt.w	86890 <_dtoa_r+0xce0>
   85f78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85f7a:	9b07      	ldr	r3, [sp, #28]
   85f7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85f7e:	2101      	movs	r1, #1
   85f80:	441a      	add	r2, r3
   85f82:	920a      	str	r2, [sp, #40]	; 0x28
   85f84:	9a08      	ldr	r2, [sp, #32]
   85f86:	4620      	mov	r0, r4
   85f88:	441a      	add	r2, r3
   85f8a:	9208      	str	r2, [sp, #32]
   85f8c:	f001 f98a 	bl	872a4 <__i2b>
   85f90:	4606      	mov	r6, r0
   85f92:	e023      	b.n	85fdc <_dtoa_r+0x42c>
   85f94:	2301      	movs	r3, #1
   85f96:	930e      	str	r3, [sp, #56]	; 0x38
   85f98:	e6b5      	b.n	85d06 <_dtoa_r+0x156>
   85f9a:	2300      	movs	r3, #0
   85f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85f9e:	930d      	str	r3, [sp, #52]	; 0x34
   85fa0:	9b02      	ldr	r3, [sp, #8]
   85fa2:	1ad2      	subs	r2, r2, r3
   85fa4:	425b      	negs	r3, r3
   85fa6:	920a      	str	r2, [sp, #40]	; 0x28
   85fa8:	930c      	str	r3, [sp, #48]	; 0x30
   85faa:	e6be      	b.n	85d2a <_dtoa_r+0x17a>
   85fac:	f1c7 0301 	rsb	r3, r7, #1
   85fb0:	930a      	str	r3, [sp, #40]	; 0x28
   85fb2:	2300      	movs	r3, #0
   85fb4:	9308      	str	r3, [sp, #32]
   85fb6:	e6ad      	b.n	85d14 <_dtoa_r+0x164>
   85fb8:	9d02      	ldr	r5, [sp, #8]
   85fba:	4628      	mov	r0, r5
   85fbc:	f7fd fe84 	bl	83cc8 <__aeabi_i2d>
   85fc0:	4602      	mov	r2, r0
   85fc2:	460b      	mov	r3, r1
   85fc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   85fc8:	f002 f890 	bl	880ec <__aeabi_dcmpeq>
   85fcc:	2800      	cmp	r0, #0
   85fce:	f47f ae86 	bne.w	85cde <_dtoa_r+0x12e>
   85fd2:	1e6b      	subs	r3, r5, #1
   85fd4:	9302      	str	r3, [sp, #8]
   85fd6:	e682      	b.n	85cde <_dtoa_r+0x12e>
   85fd8:	ad0a      	add	r5, sp, #40	; 0x28
   85fda:	cde0      	ldmia	r5, {r5, r6, r7}
   85fdc:	2d00      	cmp	r5, #0
   85fde:	dd0c      	ble.n	85ffa <_dtoa_r+0x44a>
   85fe0:	9908      	ldr	r1, [sp, #32]
   85fe2:	2900      	cmp	r1, #0
   85fe4:	460b      	mov	r3, r1
   85fe6:	dd08      	ble.n	85ffa <_dtoa_r+0x44a>
   85fe8:	42a9      	cmp	r1, r5
   85fea:	bfa8      	it	ge
   85fec:	462b      	movge	r3, r5
   85fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85ff0:	1aed      	subs	r5, r5, r3
   85ff2:	1ad2      	subs	r2, r2, r3
   85ff4:	1acb      	subs	r3, r1, r3
   85ff6:	920a      	str	r2, [sp, #40]	; 0x28
   85ff8:	9308      	str	r3, [sp, #32]
   85ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85ffc:	b1d3      	cbz	r3, 86034 <_dtoa_r+0x484>
   85ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86000:	2b00      	cmp	r3, #0
   86002:	f000 82b8 	beq.w	86576 <_dtoa_r+0x9c6>
   86006:	2f00      	cmp	r7, #0
   86008:	dd10      	ble.n	8602c <_dtoa_r+0x47c>
   8600a:	4631      	mov	r1, r6
   8600c:	463a      	mov	r2, r7
   8600e:	4620      	mov	r0, r4
   86010:	f001 f9e4 	bl	873dc <__pow5mult>
   86014:	464a      	mov	r2, r9
   86016:	4601      	mov	r1, r0
   86018:	4606      	mov	r6, r0
   8601a:	4620      	mov	r0, r4
   8601c:	f001 f94c 	bl	872b8 <__multiply>
   86020:	4603      	mov	r3, r0
   86022:	4649      	mov	r1, r9
   86024:	4620      	mov	r0, r4
   86026:	4699      	mov	r9, r3
   86028:	f001 f8a0 	bl	8716c <_Bfree>
   8602c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8602e:	1bda      	subs	r2, r3, r7
   86030:	f040 82a2 	bne.w	86578 <_dtoa_r+0x9c8>
   86034:	2101      	movs	r1, #1
   86036:	4620      	mov	r0, r4
   86038:	f001 f934 	bl	872a4 <__i2b>
   8603c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8603e:	4680      	mov	r8, r0
   86040:	2b00      	cmp	r3, #0
   86042:	dd1f      	ble.n	86084 <_dtoa_r+0x4d4>
   86044:	4601      	mov	r1, r0
   86046:	461a      	mov	r2, r3
   86048:	4620      	mov	r0, r4
   8604a:	f001 f9c7 	bl	873dc <__pow5mult>
   8604e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86050:	4680      	mov	r8, r0
   86052:	2b01      	cmp	r3, #1
   86054:	f340 8255 	ble.w	86502 <_dtoa_r+0x952>
   86058:	2300      	movs	r3, #0
   8605a:	930c      	str	r3, [sp, #48]	; 0x30
   8605c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   86060:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   86064:	6918      	ldr	r0, [r3, #16]
   86066:	f001 f8cd 	bl	87204 <__hi0bits>
   8606a:	f1c0 0020 	rsb	r0, r0, #32
   8606e:	e013      	b.n	86098 <_dtoa_r+0x4e8>
   86070:	f1c3 0520 	rsb	r5, r3, #32
   86074:	fa0a f005 	lsl.w	r0, sl, r5
   86078:	e67b      	b.n	85d72 <_dtoa_r+0x1c2>
   8607a:	900e      	str	r0, [sp, #56]	; 0x38
   8607c:	e643      	b.n	85d06 <_dtoa_r+0x156>
   8607e:	bf00      	nop
   86080:	40240000 	.word	0x40240000
   86084:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86086:	2b01      	cmp	r3, #1
   86088:	f340 8285 	ble.w	86596 <_dtoa_r+0x9e6>
   8608c:	2300      	movs	r3, #0
   8608e:	930c      	str	r3, [sp, #48]	; 0x30
   86090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86092:	2001      	movs	r0, #1
   86094:	2b00      	cmp	r3, #0
   86096:	d1e1      	bne.n	8605c <_dtoa_r+0x4ac>
   86098:	9a08      	ldr	r2, [sp, #32]
   8609a:	4410      	add	r0, r2
   8609c:	f010 001f 	ands.w	r0, r0, #31
   860a0:	f000 80a1 	beq.w	861e6 <_dtoa_r+0x636>
   860a4:	f1c0 0320 	rsb	r3, r0, #32
   860a8:	2b04      	cmp	r3, #4
   860aa:	f340 8486 	ble.w	869ba <_dtoa_r+0xe0a>
   860ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   860b0:	f1c0 001c 	rsb	r0, r0, #28
   860b4:	4403      	add	r3, r0
   860b6:	930a      	str	r3, [sp, #40]	; 0x28
   860b8:	4613      	mov	r3, r2
   860ba:	4403      	add	r3, r0
   860bc:	4405      	add	r5, r0
   860be:	9308      	str	r3, [sp, #32]
   860c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   860c2:	2b00      	cmp	r3, #0
   860c4:	dd05      	ble.n	860d2 <_dtoa_r+0x522>
   860c6:	4649      	mov	r1, r9
   860c8:	461a      	mov	r2, r3
   860ca:	4620      	mov	r0, r4
   860cc:	f001 f9d6 	bl	8747c <__lshift>
   860d0:	4681      	mov	r9, r0
   860d2:	9b08      	ldr	r3, [sp, #32]
   860d4:	2b00      	cmp	r3, #0
   860d6:	dd05      	ble.n	860e4 <_dtoa_r+0x534>
   860d8:	4641      	mov	r1, r8
   860da:	461a      	mov	r2, r3
   860dc:	4620      	mov	r0, r4
   860de:	f001 f9cd 	bl	8747c <__lshift>
   860e2:	4680      	mov	r8, r0
   860e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   860e6:	2b00      	cmp	r3, #0
   860e8:	f040 8086 	bne.w	861f8 <_dtoa_r+0x648>
   860ec:	9b07      	ldr	r3, [sp, #28]
   860ee:	2b00      	cmp	r3, #0
   860f0:	f340 8264 	ble.w	865bc <_dtoa_r+0xa0c>
   860f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   860f6:	2b00      	cmp	r3, #0
   860f8:	f000 8098 	beq.w	8622c <_dtoa_r+0x67c>
   860fc:	2d00      	cmp	r5, #0
   860fe:	dd05      	ble.n	8610c <_dtoa_r+0x55c>
   86100:	4631      	mov	r1, r6
   86102:	462a      	mov	r2, r5
   86104:	4620      	mov	r0, r4
   86106:	f001 f9b9 	bl	8747c <__lshift>
   8610a:	4606      	mov	r6, r0
   8610c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8610e:	2b00      	cmp	r3, #0
   86110:	f040 8336 	bne.w	86780 <_dtoa_r+0xbd0>
   86114:	9608      	str	r6, [sp, #32]
   86116:	9b07      	ldr	r3, [sp, #28]
   86118:	9a04      	ldr	r2, [sp, #16]
   8611a:	3b01      	subs	r3, #1
   8611c:	18d3      	adds	r3, r2, r3
   8611e:	930b      	str	r3, [sp, #44]	; 0x2c
   86120:	4617      	mov	r7, r2
   86122:	f00a 0301 	and.w	r3, sl, #1
   86126:	46c2      	mov	sl, r8
   86128:	f8dd b020 	ldr.w	fp, [sp, #32]
   8612c:	930c      	str	r3, [sp, #48]	; 0x30
   8612e:	4651      	mov	r1, sl
   86130:	4648      	mov	r0, r9
   86132:	f7ff fca9 	bl	85a88 <quorem>
   86136:	4631      	mov	r1, r6
   86138:	4605      	mov	r5, r0
   8613a:	4648      	mov	r0, r9
   8613c:	f001 f9ee 	bl	8751c <__mcmp>
   86140:	465a      	mov	r2, fp
   86142:	9007      	str	r0, [sp, #28]
   86144:	4651      	mov	r1, sl
   86146:	4620      	mov	r0, r4
   86148:	f001 fa04 	bl	87554 <__mdiff>
   8614c:	68c2      	ldr	r2, [r0, #12]
   8614e:	4680      	mov	r8, r0
   86150:	f105 0330 	add.w	r3, r5, #48	; 0x30
   86154:	2a00      	cmp	r2, #0
   86156:	f040 8229 	bne.w	865ac <_dtoa_r+0x9fc>
   8615a:	4601      	mov	r1, r0
   8615c:	4648      	mov	r0, r9
   8615e:	930a      	str	r3, [sp, #40]	; 0x28
   86160:	f001 f9dc 	bl	8751c <__mcmp>
   86164:	4641      	mov	r1, r8
   86166:	9008      	str	r0, [sp, #32]
   86168:	4620      	mov	r0, r4
   8616a:	f000 ffff 	bl	8716c <_Bfree>
   8616e:	9a08      	ldr	r2, [sp, #32]
   86170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86172:	b932      	cbnz	r2, 86182 <_dtoa_r+0x5d2>
   86174:	9924      	ldr	r1, [sp, #144]	; 0x90
   86176:	b921      	cbnz	r1, 86182 <_dtoa_r+0x5d2>
   86178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8617a:	2a00      	cmp	r2, #0
   8617c:	f000 83ee 	beq.w	8695c <_dtoa_r+0xdac>
   86180:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86182:	9907      	ldr	r1, [sp, #28]
   86184:	2900      	cmp	r1, #0
   86186:	f2c0 829f 	blt.w	866c8 <_dtoa_r+0xb18>
   8618a:	d105      	bne.n	86198 <_dtoa_r+0x5e8>
   8618c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8618e:	b919      	cbnz	r1, 86198 <_dtoa_r+0x5e8>
   86190:	990c      	ldr	r1, [sp, #48]	; 0x30
   86192:	2900      	cmp	r1, #0
   86194:	f000 8298 	beq.w	866c8 <_dtoa_r+0xb18>
   86198:	2a00      	cmp	r2, #0
   8619a:	f300 8305 	bgt.w	867a8 <_dtoa_r+0xbf8>
   8619e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   861a0:	f107 0801 	add.w	r8, r7, #1
   861a4:	4297      	cmp	r7, r2
   861a6:	703b      	strb	r3, [r7, #0]
   861a8:	4645      	mov	r5, r8
   861aa:	f000 830b 	beq.w	867c4 <_dtoa_r+0xc14>
   861ae:	4649      	mov	r1, r9
   861b0:	2300      	movs	r3, #0
   861b2:	220a      	movs	r2, #10
   861b4:	4620      	mov	r0, r4
   861b6:	f000 ffe3 	bl	87180 <__multadd>
   861ba:	455e      	cmp	r6, fp
   861bc:	4681      	mov	r9, r0
   861be:	4631      	mov	r1, r6
   861c0:	f04f 0300 	mov.w	r3, #0
   861c4:	f04f 020a 	mov.w	r2, #10
   861c8:	4620      	mov	r0, r4
   861ca:	f000 81e9 	beq.w	865a0 <_dtoa_r+0x9f0>
   861ce:	f000 ffd7 	bl	87180 <__multadd>
   861d2:	4659      	mov	r1, fp
   861d4:	4606      	mov	r6, r0
   861d6:	2300      	movs	r3, #0
   861d8:	220a      	movs	r2, #10
   861da:	4620      	mov	r0, r4
   861dc:	f000 ffd0 	bl	87180 <__multadd>
   861e0:	4647      	mov	r7, r8
   861e2:	4683      	mov	fp, r0
   861e4:	e7a3      	b.n	8612e <_dtoa_r+0x57e>
   861e6:	201c      	movs	r0, #28
   861e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   861ea:	4405      	add	r5, r0
   861ec:	4403      	add	r3, r0
   861ee:	930a      	str	r3, [sp, #40]	; 0x28
   861f0:	9b08      	ldr	r3, [sp, #32]
   861f2:	4403      	add	r3, r0
   861f4:	9308      	str	r3, [sp, #32]
   861f6:	e763      	b.n	860c0 <_dtoa_r+0x510>
   861f8:	4641      	mov	r1, r8
   861fa:	4648      	mov	r0, r9
   861fc:	f001 f98e 	bl	8751c <__mcmp>
   86200:	2800      	cmp	r0, #0
   86202:	f6bf af73 	bge.w	860ec <_dtoa_r+0x53c>
   86206:	9f02      	ldr	r7, [sp, #8]
   86208:	4649      	mov	r1, r9
   8620a:	2300      	movs	r3, #0
   8620c:	220a      	movs	r2, #10
   8620e:	4620      	mov	r0, r4
   86210:	3f01      	subs	r7, #1
   86212:	9702      	str	r7, [sp, #8]
   86214:	f000 ffb4 	bl	87180 <__multadd>
   86218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8621a:	4681      	mov	r9, r0
   8621c:	2b00      	cmp	r3, #0
   8621e:	f040 83b5 	bne.w	8698c <_dtoa_r+0xddc>
   86222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86224:	2b00      	cmp	r3, #0
   86226:	f340 83be 	ble.w	869a6 <_dtoa_r+0xdf6>
   8622a:	9307      	str	r3, [sp, #28]
   8622c:	f8dd a010 	ldr.w	sl, [sp, #16]
   86230:	9f07      	ldr	r7, [sp, #28]
   86232:	4655      	mov	r5, sl
   86234:	e006      	b.n	86244 <_dtoa_r+0x694>
   86236:	4649      	mov	r1, r9
   86238:	2300      	movs	r3, #0
   8623a:	220a      	movs	r2, #10
   8623c:	4620      	mov	r0, r4
   8623e:	f000 ff9f 	bl	87180 <__multadd>
   86242:	4681      	mov	r9, r0
   86244:	4641      	mov	r1, r8
   86246:	4648      	mov	r0, r9
   86248:	f7ff fc1e 	bl	85a88 <quorem>
   8624c:	3030      	adds	r0, #48	; 0x30
   8624e:	f805 0b01 	strb.w	r0, [r5], #1
   86252:	eba5 030a 	sub.w	r3, r5, sl
   86256:	42bb      	cmp	r3, r7
   86258:	dbed      	blt.n	86236 <_dtoa_r+0x686>
   8625a:	9b04      	ldr	r3, [sp, #16]
   8625c:	9a07      	ldr	r2, [sp, #28]
   8625e:	4682      	mov	sl, r0
   86260:	2a01      	cmp	r2, #1
   86262:	bfac      	ite	ge
   86264:	189b      	addge	r3, r3, r2
   86266:	3301      	addlt	r3, #1
   86268:	f04f 0b00 	mov.w	fp, #0
   8626c:	461d      	mov	r5, r3
   8626e:	4649      	mov	r1, r9
   86270:	2201      	movs	r2, #1
   86272:	4620      	mov	r0, r4
   86274:	f001 f902 	bl	8747c <__lshift>
   86278:	4641      	mov	r1, r8
   8627a:	4681      	mov	r9, r0
   8627c:	f001 f94e 	bl	8751c <__mcmp>
   86280:	2800      	cmp	r0, #0
   86282:	f340 823f 	ble.w	86704 <_dtoa_r+0xb54>
   86286:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   8628a:	1e6b      	subs	r3, r5, #1
   8628c:	9904      	ldr	r1, [sp, #16]
   8628e:	e004      	b.n	8629a <_dtoa_r+0x6ea>
   86290:	428b      	cmp	r3, r1
   86292:	f000 81ae 	beq.w	865f2 <_dtoa_r+0xa42>
   86296:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   8629a:	2a39      	cmp	r2, #57	; 0x39
   8629c:	f103 0501 	add.w	r5, r3, #1
   862a0:	d0f6      	beq.n	86290 <_dtoa_r+0x6e0>
   862a2:	3201      	adds	r2, #1
   862a4:	701a      	strb	r2, [r3, #0]
   862a6:	4641      	mov	r1, r8
   862a8:	4620      	mov	r0, r4
   862aa:	f000 ff5f 	bl	8716c <_Bfree>
   862ae:	2e00      	cmp	r6, #0
   862b0:	f43f ae3d 	beq.w	85f2e <_dtoa_r+0x37e>
   862b4:	f1bb 0f00 	cmp.w	fp, #0
   862b8:	d005      	beq.n	862c6 <_dtoa_r+0x716>
   862ba:	45b3      	cmp	fp, r6
   862bc:	d003      	beq.n	862c6 <_dtoa_r+0x716>
   862be:	4659      	mov	r1, fp
   862c0:	4620      	mov	r0, r4
   862c2:	f000 ff53 	bl	8716c <_Bfree>
   862c6:	4631      	mov	r1, r6
   862c8:	4620      	mov	r0, r4
   862ca:	f000 ff4f 	bl	8716c <_Bfree>
   862ce:	e62e      	b.n	85f2e <_dtoa_r+0x37e>
   862d0:	2300      	movs	r3, #0
   862d2:	930b      	str	r3, [sp, #44]	; 0x2c
   862d4:	9b02      	ldr	r3, [sp, #8]
   862d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   862d8:	4413      	add	r3, r2
   862da:	930f      	str	r3, [sp, #60]	; 0x3c
   862dc:	3301      	adds	r3, #1
   862de:	2b01      	cmp	r3, #1
   862e0:	461f      	mov	r7, r3
   862e2:	461e      	mov	r6, r3
   862e4:	bfb8      	it	lt
   862e6:	2701      	movlt	r7, #1
   862e8:	9307      	str	r3, [sp, #28]
   862ea:	2100      	movs	r1, #0
   862ec:	2f17      	cmp	r7, #23
   862ee:	6461      	str	r1, [r4, #68]	; 0x44
   862f0:	d90a      	bls.n	86308 <_dtoa_r+0x758>
   862f2:	2201      	movs	r2, #1
   862f4:	2304      	movs	r3, #4
   862f6:	005b      	lsls	r3, r3, #1
   862f8:	f103 0014 	add.w	r0, r3, #20
   862fc:	4287      	cmp	r7, r0
   862fe:	4611      	mov	r1, r2
   86300:	f102 0201 	add.w	r2, r2, #1
   86304:	d2f7      	bcs.n	862f6 <_dtoa_r+0x746>
   86306:	6461      	str	r1, [r4, #68]	; 0x44
   86308:	4620      	mov	r0, r4
   8630a:	f000 ff09 	bl	87120 <_Balloc>
   8630e:	2e0e      	cmp	r6, #14
   86310:	9004      	str	r0, [sp, #16]
   86312:	6420      	str	r0, [r4, #64]	; 0x40
   86314:	f63f ad47 	bhi.w	85da6 <_dtoa_r+0x1f6>
   86318:	2d00      	cmp	r5, #0
   8631a:	f43f ad44 	beq.w	85da6 <_dtoa_r+0x1f6>
   8631e:	9902      	ldr	r1, [sp, #8]
   86320:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   86324:	2900      	cmp	r1, #0
   86326:	f340 8203 	ble.w	86730 <_dtoa_r+0xb80>
   8632a:	4bb9      	ldr	r3, [pc, #740]	; (86610 <_dtoa_r+0xa60>)
   8632c:	f001 020f 	and.w	r2, r1, #15
   86330:	110d      	asrs	r5, r1, #4
   86332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   86336:	06e9      	lsls	r1, r5, #27
   86338:	e9d3 6700 	ldrd	r6, r7, [r3]
   8633c:	f140 81af 	bpl.w	8669e <_dtoa_r+0xaee>
   86340:	4bb4      	ldr	r3, [pc, #720]	; (86614 <_dtoa_r+0xa64>)
   86342:	4650      	mov	r0, sl
   86344:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   86348:	4659      	mov	r1, fp
   8634a:	f7fd fe4d 	bl	83fe8 <__aeabi_ddiv>
   8634e:	f04f 0a03 	mov.w	sl, #3
   86352:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   86356:	f005 050f 	and.w	r5, r5, #15
   8635a:	b18d      	cbz	r5, 86380 <_dtoa_r+0x7d0>
   8635c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 86614 <_dtoa_r+0xa64>
   86360:	07ea      	lsls	r2, r5, #31
   86362:	d509      	bpl.n	86378 <_dtoa_r+0x7c8>
   86364:	e9d8 2300 	ldrd	r2, r3, [r8]
   86368:	4630      	mov	r0, r6
   8636a:	4639      	mov	r1, r7
   8636c:	f7fd fd12 	bl	83d94 <__aeabi_dmul>
   86370:	4606      	mov	r6, r0
   86372:	460f      	mov	r7, r1
   86374:	f10a 0a01 	add.w	sl, sl, #1
   86378:	106d      	asrs	r5, r5, #1
   8637a:	f108 0808 	add.w	r8, r8, #8
   8637e:	d1ef      	bne.n	86360 <_dtoa_r+0x7b0>
   86380:	463b      	mov	r3, r7
   86382:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   86386:	4632      	mov	r2, r6
   86388:	f7fd fe2e 	bl	83fe8 <__aeabi_ddiv>
   8638c:	4607      	mov	r7, r0
   8638e:	4688      	mov	r8, r1
   86390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86392:	b143      	cbz	r3, 863a6 <_dtoa_r+0x7f6>
   86394:	2200      	movs	r2, #0
   86396:	4ba0      	ldr	r3, [pc, #640]	; (86618 <_dtoa_r+0xa68>)
   86398:	4638      	mov	r0, r7
   8639a:	4641      	mov	r1, r8
   8639c:	f001 feb0 	bl	88100 <__aeabi_dcmplt>
   863a0:	2800      	cmp	r0, #0
   863a2:	f040 8287 	bne.w	868b4 <_dtoa_r+0xd04>
   863a6:	4650      	mov	r0, sl
   863a8:	f7fd fc8e 	bl	83cc8 <__aeabi_i2d>
   863ac:	463a      	mov	r2, r7
   863ae:	4643      	mov	r3, r8
   863b0:	f7fd fcf0 	bl	83d94 <__aeabi_dmul>
   863b4:	4b99      	ldr	r3, [pc, #612]	; (8661c <_dtoa_r+0xa6c>)
   863b6:	2200      	movs	r2, #0
   863b8:	f7fd fb3a 	bl	83a30 <__adddf3>
   863bc:	9b07      	ldr	r3, [sp, #28]
   863be:	4605      	mov	r5, r0
   863c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   863c4:	2b00      	cmp	r3, #0
   863c6:	f000 813f 	beq.w	86648 <_dtoa_r+0xa98>
   863ca:	9b02      	ldr	r3, [sp, #8]
   863cc:	9315      	str	r3, [sp, #84]	; 0x54
   863ce:	9b07      	ldr	r3, [sp, #28]
   863d0:	9312      	str	r3, [sp, #72]	; 0x48
   863d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   863d4:	2b00      	cmp	r3, #0
   863d6:	f000 81fb 	beq.w	867d0 <_dtoa_r+0xc20>
   863da:	9a12      	ldr	r2, [sp, #72]	; 0x48
   863dc:	4b8c      	ldr	r3, [pc, #560]	; (86610 <_dtoa_r+0xa60>)
   863de:	2000      	movs	r0, #0
   863e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   863e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   863e8:	498d      	ldr	r1, [pc, #564]	; (86620 <_dtoa_r+0xa70>)
   863ea:	f7fd fdfd 	bl	83fe8 <__aeabi_ddiv>
   863ee:	462a      	mov	r2, r5
   863f0:	4633      	mov	r3, r6
   863f2:	f7fd fb1b 	bl	83a2c <__aeabi_dsub>
   863f6:	4682      	mov	sl, r0
   863f8:	468b      	mov	fp, r1
   863fa:	4638      	mov	r0, r7
   863fc:	4641      	mov	r1, r8
   863fe:	f001 febd 	bl	8817c <__aeabi_d2iz>
   86402:	4605      	mov	r5, r0
   86404:	f7fd fc60 	bl	83cc8 <__aeabi_i2d>
   86408:	4602      	mov	r2, r0
   8640a:	460b      	mov	r3, r1
   8640c:	4638      	mov	r0, r7
   8640e:	4641      	mov	r1, r8
   86410:	f7fd fb0c 	bl	83a2c <__aeabi_dsub>
   86414:	3530      	adds	r5, #48	; 0x30
   86416:	fa5f f885 	uxtb.w	r8, r5
   8641a:	9d04      	ldr	r5, [sp, #16]
   8641c:	4606      	mov	r6, r0
   8641e:	460f      	mov	r7, r1
   86420:	f885 8000 	strb.w	r8, [r5]
   86424:	4602      	mov	r2, r0
   86426:	460b      	mov	r3, r1
   86428:	4650      	mov	r0, sl
   8642a:	4659      	mov	r1, fp
   8642c:	3501      	adds	r5, #1
   8642e:	f001 fe85 	bl	8813c <__aeabi_dcmpgt>
   86432:	2800      	cmp	r0, #0
   86434:	d154      	bne.n	864e0 <_dtoa_r+0x930>
   86436:	4632      	mov	r2, r6
   86438:	463b      	mov	r3, r7
   8643a:	2000      	movs	r0, #0
   8643c:	4976      	ldr	r1, [pc, #472]	; (86618 <_dtoa_r+0xa68>)
   8643e:	f7fd faf5 	bl	83a2c <__aeabi_dsub>
   86442:	4602      	mov	r2, r0
   86444:	460b      	mov	r3, r1
   86446:	4650      	mov	r0, sl
   86448:	4659      	mov	r1, fp
   8644a:	f001 fe77 	bl	8813c <__aeabi_dcmpgt>
   8644e:	2800      	cmp	r0, #0
   86450:	f040 8270 	bne.w	86934 <_dtoa_r+0xd84>
   86454:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86456:	2a01      	cmp	r2, #1
   86458:	f000 8112 	beq.w	86680 <_dtoa_r+0xad0>
   8645c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8645e:	9a04      	ldr	r2, [sp, #16]
   86460:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   86464:	4413      	add	r3, r2
   86466:	4699      	mov	r9, r3
   86468:	e00f      	b.n	8648a <_dtoa_r+0x8da>
   8646a:	4632      	mov	r2, r6
   8646c:	463b      	mov	r3, r7
   8646e:	2000      	movs	r0, #0
   86470:	4969      	ldr	r1, [pc, #420]	; (86618 <_dtoa_r+0xa68>)
   86472:	f7fd fadb 	bl	83a2c <__aeabi_dsub>
   86476:	4652      	mov	r2, sl
   86478:	465b      	mov	r3, fp
   8647a:	f001 fe41 	bl	88100 <__aeabi_dcmplt>
   8647e:	2800      	cmp	r0, #0
   86480:	f040 8256 	bne.w	86930 <_dtoa_r+0xd80>
   86484:	454d      	cmp	r5, r9
   86486:	f000 80f9 	beq.w	8667c <_dtoa_r+0xacc>
   8648a:	4650      	mov	r0, sl
   8648c:	4659      	mov	r1, fp
   8648e:	2200      	movs	r2, #0
   86490:	4b64      	ldr	r3, [pc, #400]	; (86624 <_dtoa_r+0xa74>)
   86492:	f7fd fc7f 	bl	83d94 <__aeabi_dmul>
   86496:	2200      	movs	r2, #0
   86498:	4b62      	ldr	r3, [pc, #392]	; (86624 <_dtoa_r+0xa74>)
   8649a:	4682      	mov	sl, r0
   8649c:	468b      	mov	fp, r1
   8649e:	4630      	mov	r0, r6
   864a0:	4639      	mov	r1, r7
   864a2:	f7fd fc77 	bl	83d94 <__aeabi_dmul>
   864a6:	460f      	mov	r7, r1
   864a8:	4606      	mov	r6, r0
   864aa:	f001 fe67 	bl	8817c <__aeabi_d2iz>
   864ae:	4680      	mov	r8, r0
   864b0:	f7fd fc0a 	bl	83cc8 <__aeabi_i2d>
   864b4:	4602      	mov	r2, r0
   864b6:	460b      	mov	r3, r1
   864b8:	4630      	mov	r0, r6
   864ba:	4639      	mov	r1, r7
   864bc:	f7fd fab6 	bl	83a2c <__aeabi_dsub>
   864c0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   864c4:	fa5f f888 	uxtb.w	r8, r8
   864c8:	f805 8b01 	strb.w	r8, [r5], #1
   864cc:	4652      	mov	r2, sl
   864ce:	465b      	mov	r3, fp
   864d0:	4606      	mov	r6, r0
   864d2:	460f      	mov	r7, r1
   864d4:	f001 fe14 	bl	88100 <__aeabi_dcmplt>
   864d8:	2800      	cmp	r0, #0
   864da:	d0c6      	beq.n	8646a <_dtoa_r+0x8ba>
   864dc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   864e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   864e2:	9302      	str	r3, [sp, #8]
   864e4:	e523      	b.n	85f2e <_dtoa_r+0x37e>
   864e6:	2300      	movs	r3, #0
   864e8:	930b      	str	r3, [sp, #44]	; 0x2c
   864ea:	9b25      	ldr	r3, [sp, #148]	; 0x94
   864ec:	2b00      	cmp	r3, #0
   864ee:	f340 80dd 	ble.w	866ac <_dtoa_r+0xafc>
   864f2:	461f      	mov	r7, r3
   864f4:	461e      	mov	r6, r3
   864f6:	930f      	str	r3, [sp, #60]	; 0x3c
   864f8:	9307      	str	r3, [sp, #28]
   864fa:	e6f6      	b.n	862ea <_dtoa_r+0x73a>
   864fc:	2301      	movs	r3, #1
   864fe:	930b      	str	r3, [sp, #44]	; 0x2c
   86500:	e7f3      	b.n	864ea <_dtoa_r+0x93a>
   86502:	f1ba 0f00 	cmp.w	sl, #0
   86506:	f47f ada7 	bne.w	86058 <_dtoa_r+0x4a8>
   8650a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8650e:	2b00      	cmp	r3, #0
   86510:	f47f adbc 	bne.w	8608c <_dtoa_r+0x4dc>
   86514:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   86518:	0d3f      	lsrs	r7, r7, #20
   8651a:	053f      	lsls	r7, r7, #20
   8651c:	2f00      	cmp	r7, #0
   8651e:	f000 820d 	beq.w	8693c <_dtoa_r+0xd8c>
   86522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86524:	3301      	adds	r3, #1
   86526:	930a      	str	r3, [sp, #40]	; 0x28
   86528:	9b08      	ldr	r3, [sp, #32]
   8652a:	3301      	adds	r3, #1
   8652c:	9308      	str	r3, [sp, #32]
   8652e:	2301      	movs	r3, #1
   86530:	930c      	str	r3, [sp, #48]	; 0x30
   86532:	e5ad      	b.n	86090 <_dtoa_r+0x4e0>
   86534:	9b07      	ldr	r3, [sp, #28]
   86536:	2b00      	cmp	r3, #0
   86538:	f73f ac48 	bgt.w	85dcc <_dtoa_r+0x21c>
   8653c:	f040 8222 	bne.w	86984 <_dtoa_r+0xdd4>
   86540:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86544:	2200      	movs	r2, #0
   86546:	4b38      	ldr	r3, [pc, #224]	; (86628 <_dtoa_r+0xa78>)
   86548:	f7fd fc24 	bl	83d94 <__aeabi_dmul>
   8654c:	4652      	mov	r2, sl
   8654e:	465b      	mov	r3, fp
   86550:	f001 fdea 	bl	88128 <__aeabi_dcmpge>
   86554:	f8dd 801c 	ldr.w	r8, [sp, #28]
   86558:	4646      	mov	r6, r8
   8655a:	2800      	cmp	r0, #0
   8655c:	d041      	beq.n	865e2 <_dtoa_r+0xa32>
   8655e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86560:	9d04      	ldr	r5, [sp, #16]
   86562:	43db      	mvns	r3, r3
   86564:	9302      	str	r3, [sp, #8]
   86566:	4641      	mov	r1, r8
   86568:	4620      	mov	r0, r4
   8656a:	f000 fdff 	bl	8716c <_Bfree>
   8656e:	2e00      	cmp	r6, #0
   86570:	f43f acdd 	beq.w	85f2e <_dtoa_r+0x37e>
   86574:	e6a7      	b.n	862c6 <_dtoa_r+0x716>
   86576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86578:	4649      	mov	r1, r9
   8657a:	4620      	mov	r0, r4
   8657c:	f000 ff2e 	bl	873dc <__pow5mult>
   86580:	4681      	mov	r9, r0
   86582:	e557      	b.n	86034 <_dtoa_r+0x484>
   86584:	9a14      	ldr	r2, [sp, #80]	; 0x50
   86586:	2a00      	cmp	r2, #0
   86588:	f000 8188 	beq.w	8689c <_dtoa_r+0xcec>
   8658c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   86590:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86592:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   86594:	e4f2      	b.n	85f7c <_dtoa_r+0x3cc>
   86596:	f1ba 0f00 	cmp.w	sl, #0
   8659a:	f47f ad77 	bne.w	8608c <_dtoa_r+0x4dc>
   8659e:	e7b4      	b.n	8650a <_dtoa_r+0x95a>
   865a0:	f000 fdee 	bl	87180 <__multadd>
   865a4:	4647      	mov	r7, r8
   865a6:	4606      	mov	r6, r0
   865a8:	4683      	mov	fp, r0
   865aa:	e5c0      	b.n	8612e <_dtoa_r+0x57e>
   865ac:	4601      	mov	r1, r0
   865ae:	4620      	mov	r0, r4
   865b0:	9308      	str	r3, [sp, #32]
   865b2:	f000 fddb 	bl	8716c <_Bfree>
   865b6:	2201      	movs	r2, #1
   865b8:	9b08      	ldr	r3, [sp, #32]
   865ba:	e5e2      	b.n	86182 <_dtoa_r+0x5d2>
   865bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   865be:	2b02      	cmp	r3, #2
   865c0:	f77f ad98 	ble.w	860f4 <_dtoa_r+0x544>
   865c4:	9b07      	ldr	r3, [sp, #28]
   865c6:	2b00      	cmp	r3, #0
   865c8:	d1c9      	bne.n	8655e <_dtoa_r+0x9ae>
   865ca:	4641      	mov	r1, r8
   865cc:	2205      	movs	r2, #5
   865ce:	4620      	mov	r0, r4
   865d0:	f000 fdd6 	bl	87180 <__multadd>
   865d4:	4601      	mov	r1, r0
   865d6:	4680      	mov	r8, r0
   865d8:	4648      	mov	r0, r9
   865da:	f000 ff9f 	bl	8751c <__mcmp>
   865de:	2800      	cmp	r0, #0
   865e0:	ddbd      	ble.n	8655e <_dtoa_r+0x9ae>
   865e2:	2331      	movs	r3, #49	; 0x31
   865e4:	9a02      	ldr	r2, [sp, #8]
   865e6:	9904      	ldr	r1, [sp, #16]
   865e8:	3201      	adds	r2, #1
   865ea:	9202      	str	r2, [sp, #8]
   865ec:	700b      	strb	r3, [r1, #0]
   865ee:	1c4d      	adds	r5, r1, #1
   865f0:	e7b9      	b.n	86566 <_dtoa_r+0x9b6>
   865f2:	2331      	movs	r3, #49	; 0x31
   865f4:	9a02      	ldr	r2, [sp, #8]
   865f6:	3201      	adds	r2, #1
   865f8:	9202      	str	r2, [sp, #8]
   865fa:	9a04      	ldr	r2, [sp, #16]
   865fc:	7013      	strb	r3, [r2, #0]
   865fe:	e652      	b.n	862a6 <_dtoa_r+0x6f6>
   86600:	2301      	movs	r3, #1
   86602:	930b      	str	r3, [sp, #44]	; 0x2c
   86604:	e666      	b.n	862d4 <_dtoa_r+0x724>
   86606:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8660a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8660c:	e48f      	b.n	85f2e <_dtoa_r+0x37e>
   8660e:	bf00      	nop
   86610:	000886a8 	.word	0x000886a8
   86614:	00088680 	.word	0x00088680
   86618:	3ff00000 	.word	0x3ff00000
   8661c:	401c0000 	.word	0x401c0000
   86620:	3fe00000 	.word	0x3fe00000
   86624:	40240000 	.word	0x40240000
   86628:	40140000 	.word	0x40140000
   8662c:	4650      	mov	r0, sl
   8662e:	f7fd fb4b 	bl	83cc8 <__aeabi_i2d>
   86632:	463a      	mov	r2, r7
   86634:	4643      	mov	r3, r8
   86636:	f7fd fbad 	bl	83d94 <__aeabi_dmul>
   8663a:	2200      	movs	r2, #0
   8663c:	4bc1      	ldr	r3, [pc, #772]	; (86944 <_dtoa_r+0xd94>)
   8663e:	f7fd f9f7 	bl	83a30 <__adddf3>
   86642:	4605      	mov	r5, r0
   86644:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   86648:	4641      	mov	r1, r8
   8664a:	2200      	movs	r2, #0
   8664c:	4bbe      	ldr	r3, [pc, #760]	; (86948 <_dtoa_r+0xd98>)
   8664e:	4638      	mov	r0, r7
   86650:	f7fd f9ec 	bl	83a2c <__aeabi_dsub>
   86654:	462a      	mov	r2, r5
   86656:	4633      	mov	r3, r6
   86658:	4682      	mov	sl, r0
   8665a:	468b      	mov	fp, r1
   8665c:	f001 fd6e 	bl	8813c <__aeabi_dcmpgt>
   86660:	4680      	mov	r8, r0
   86662:	2800      	cmp	r0, #0
   86664:	f040 8110 	bne.w	86888 <_dtoa_r+0xcd8>
   86668:	462a      	mov	r2, r5
   8666a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8666e:	4650      	mov	r0, sl
   86670:	4659      	mov	r1, fp
   86672:	f001 fd45 	bl	88100 <__aeabi_dcmplt>
   86676:	b118      	cbz	r0, 86680 <_dtoa_r+0xad0>
   86678:	4646      	mov	r6, r8
   8667a:	e770      	b.n	8655e <_dtoa_r+0x9ae>
   8667c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   86680:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   86684:	f7ff bb8f 	b.w	85da6 <_dtoa_r+0x1f6>
   86688:	9804      	ldr	r0, [sp, #16]
   8668a:	f7ff bac0 	b.w	85c0e <_dtoa_r+0x5e>
   8668e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86692:	1afb      	subs	r3, r7, r3
   86694:	441a      	add	r2, r3
   86696:	970c      	str	r7, [sp, #48]	; 0x30
   86698:	920d      	str	r2, [sp, #52]	; 0x34
   8669a:	2700      	movs	r7, #0
   8669c:	e468      	b.n	85f70 <_dtoa_r+0x3c0>
   8669e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   866a2:	f04f 0a02 	mov.w	sl, #2
   866a6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   866aa:	e656      	b.n	8635a <_dtoa_r+0x7aa>
   866ac:	2100      	movs	r1, #0
   866ae:	2301      	movs	r3, #1
   866b0:	4620      	mov	r0, r4
   866b2:	6461      	str	r1, [r4, #68]	; 0x44
   866b4:	9325      	str	r3, [sp, #148]	; 0x94
   866b6:	f000 fd33 	bl	87120 <_Balloc>
   866ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
   866bc:	9004      	str	r0, [sp, #16]
   866be:	9307      	str	r3, [sp, #28]
   866c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   866c2:	6420      	str	r0, [r4, #64]	; 0x40
   866c4:	930f      	str	r3, [sp, #60]	; 0x3c
   866c6:	e627      	b.n	86318 <_dtoa_r+0x768>
   866c8:	2a00      	cmp	r2, #0
   866ca:	46d0      	mov	r8, sl
   866cc:	f8cd b020 	str.w	fp, [sp, #32]
   866d0:	469a      	mov	sl, r3
   866d2:	dd11      	ble.n	866f8 <_dtoa_r+0xb48>
   866d4:	4649      	mov	r1, r9
   866d6:	2201      	movs	r2, #1
   866d8:	4620      	mov	r0, r4
   866da:	f000 fecf 	bl	8747c <__lshift>
   866de:	4641      	mov	r1, r8
   866e0:	4681      	mov	r9, r0
   866e2:	f000 ff1b 	bl	8751c <__mcmp>
   866e6:	2800      	cmp	r0, #0
   866e8:	f340 8145 	ble.w	86976 <_dtoa_r+0xdc6>
   866ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   866f0:	f000 8105 	beq.w	868fe <_dtoa_r+0xd4e>
   866f4:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   866f8:	46b3      	mov	fp, r6
   866fa:	f887 a000 	strb.w	sl, [r7]
   866fe:	1c7d      	adds	r5, r7, #1
   86700:	9e08      	ldr	r6, [sp, #32]
   86702:	e5d0      	b.n	862a6 <_dtoa_r+0x6f6>
   86704:	d104      	bne.n	86710 <_dtoa_r+0xb60>
   86706:	f01a 0f01 	tst.w	sl, #1
   8670a:	d001      	beq.n	86710 <_dtoa_r+0xb60>
   8670c:	e5bb      	b.n	86286 <_dtoa_r+0x6d6>
   8670e:	4615      	mov	r5, r2
   86710:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   86714:	1e6a      	subs	r2, r5, #1
   86716:	2b30      	cmp	r3, #48	; 0x30
   86718:	d0f9      	beq.n	8670e <_dtoa_r+0xb5e>
   8671a:	e5c4      	b.n	862a6 <_dtoa_r+0x6f6>
   8671c:	2230      	movs	r2, #48	; 0x30
   8671e:	9904      	ldr	r1, [sp, #16]
   86720:	700a      	strb	r2, [r1, #0]
   86722:	9a02      	ldr	r2, [sp, #8]
   86724:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   86728:	3201      	adds	r2, #1
   8672a:	9202      	str	r2, [sp, #8]
   8672c:	f7ff bbfb 	b.w	85f26 <_dtoa_r+0x376>
   86730:	f000 80bb 	beq.w	868aa <_dtoa_r+0xcfa>
   86734:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   86738:	9b02      	ldr	r3, [sp, #8]
   8673a:	f04f 0a02 	mov.w	sl, #2
   8673e:	425d      	negs	r5, r3
   86740:	4b82      	ldr	r3, [pc, #520]	; (8694c <_dtoa_r+0xd9c>)
   86742:	f005 020f 	and.w	r2, r5, #15
   86746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8674a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8674e:	f7fd fb21 	bl	83d94 <__aeabi_dmul>
   86752:	112d      	asrs	r5, r5, #4
   86754:	4607      	mov	r7, r0
   86756:	4688      	mov	r8, r1
   86758:	f43f ae1a 	beq.w	86390 <_dtoa_r+0x7e0>
   8675c:	4e7c      	ldr	r6, [pc, #496]	; (86950 <_dtoa_r+0xda0>)
   8675e:	07eb      	lsls	r3, r5, #31
   86760:	d509      	bpl.n	86776 <_dtoa_r+0xbc6>
   86762:	e9d6 2300 	ldrd	r2, r3, [r6]
   86766:	4638      	mov	r0, r7
   86768:	4641      	mov	r1, r8
   8676a:	f7fd fb13 	bl	83d94 <__aeabi_dmul>
   8676e:	4607      	mov	r7, r0
   86770:	4688      	mov	r8, r1
   86772:	f10a 0a01 	add.w	sl, sl, #1
   86776:	106d      	asrs	r5, r5, #1
   86778:	f106 0608 	add.w	r6, r6, #8
   8677c:	d1ef      	bne.n	8675e <_dtoa_r+0xbae>
   8677e:	e607      	b.n	86390 <_dtoa_r+0x7e0>
   86780:	6871      	ldr	r1, [r6, #4]
   86782:	4620      	mov	r0, r4
   86784:	f000 fccc 	bl	87120 <_Balloc>
   86788:	4605      	mov	r5, r0
   8678a:	6933      	ldr	r3, [r6, #16]
   8678c:	f106 010c 	add.w	r1, r6, #12
   86790:	3302      	adds	r3, #2
   86792:	009a      	lsls	r2, r3, #2
   86794:	300c      	adds	r0, #12
   86796:	f000 fc41 	bl	8701c <memcpy>
   8679a:	4629      	mov	r1, r5
   8679c:	2201      	movs	r2, #1
   8679e:	4620      	mov	r0, r4
   867a0:	f000 fe6c 	bl	8747c <__lshift>
   867a4:	9008      	str	r0, [sp, #32]
   867a6:	e4b6      	b.n	86116 <_dtoa_r+0x566>
   867a8:	2b39      	cmp	r3, #57	; 0x39
   867aa:	f8cd b020 	str.w	fp, [sp, #32]
   867ae:	46d0      	mov	r8, sl
   867b0:	f000 80a5 	beq.w	868fe <_dtoa_r+0xd4e>
   867b4:	f103 0a01 	add.w	sl, r3, #1
   867b8:	46b3      	mov	fp, r6
   867ba:	f887 a000 	strb.w	sl, [r7]
   867be:	1c7d      	adds	r5, r7, #1
   867c0:	9e08      	ldr	r6, [sp, #32]
   867c2:	e570      	b.n	862a6 <_dtoa_r+0x6f6>
   867c4:	465a      	mov	r2, fp
   867c6:	46d0      	mov	r8, sl
   867c8:	46b3      	mov	fp, r6
   867ca:	469a      	mov	sl, r3
   867cc:	4616      	mov	r6, r2
   867ce:	e54e      	b.n	8626e <_dtoa_r+0x6be>
   867d0:	9812      	ldr	r0, [sp, #72]	; 0x48
   867d2:	495e      	ldr	r1, [pc, #376]	; (8694c <_dtoa_r+0xd9c>)
   867d4:	462a      	mov	r2, r5
   867d6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   867da:	4633      	mov	r3, r6
   867dc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   867e0:	f7fd fad8 	bl	83d94 <__aeabi_dmul>
   867e4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   867e8:	4638      	mov	r0, r7
   867ea:	4641      	mov	r1, r8
   867ec:	f001 fcc6 	bl	8817c <__aeabi_d2iz>
   867f0:	4605      	mov	r5, r0
   867f2:	f7fd fa69 	bl	83cc8 <__aeabi_i2d>
   867f6:	4602      	mov	r2, r0
   867f8:	460b      	mov	r3, r1
   867fa:	4638      	mov	r0, r7
   867fc:	4641      	mov	r1, r8
   867fe:	f7fd f915 	bl	83a2c <__aeabi_dsub>
   86802:	4606      	mov	r6, r0
   86804:	9812      	ldr	r0, [sp, #72]	; 0x48
   86806:	9a04      	ldr	r2, [sp, #16]
   86808:	3530      	adds	r5, #48	; 0x30
   8680a:	2801      	cmp	r0, #1
   8680c:	7015      	strb	r5, [r2, #0]
   8680e:	460f      	mov	r7, r1
   86810:	f102 0501 	add.w	r5, r2, #1
   86814:	d026      	beq.n	86864 <_dtoa_r+0xcb4>
   86816:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86818:	9a04      	ldr	r2, [sp, #16]
   8681a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8681e:	4413      	add	r3, r2
   86820:	f04f 0a00 	mov.w	sl, #0
   86824:	4699      	mov	r9, r3
   86826:	f8df b130 	ldr.w	fp, [pc, #304]	; 86958 <_dtoa_r+0xda8>
   8682a:	4652      	mov	r2, sl
   8682c:	465b      	mov	r3, fp
   8682e:	4630      	mov	r0, r6
   86830:	4639      	mov	r1, r7
   86832:	f7fd faaf 	bl	83d94 <__aeabi_dmul>
   86836:	460f      	mov	r7, r1
   86838:	4606      	mov	r6, r0
   8683a:	f001 fc9f 	bl	8817c <__aeabi_d2iz>
   8683e:	4680      	mov	r8, r0
   86840:	f7fd fa42 	bl	83cc8 <__aeabi_i2d>
   86844:	4602      	mov	r2, r0
   86846:	460b      	mov	r3, r1
   86848:	4630      	mov	r0, r6
   8684a:	4639      	mov	r1, r7
   8684c:	f7fd f8ee 	bl	83a2c <__aeabi_dsub>
   86850:	f108 0830 	add.w	r8, r8, #48	; 0x30
   86854:	f805 8b01 	strb.w	r8, [r5], #1
   86858:	454d      	cmp	r5, r9
   8685a:	4606      	mov	r6, r0
   8685c:	460f      	mov	r7, r1
   8685e:	d1e4      	bne.n	8682a <_dtoa_r+0xc7a>
   86860:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   86864:	2200      	movs	r2, #0
   86866:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8686a:	4b3a      	ldr	r3, [pc, #232]	; (86954 <_dtoa_r+0xda4>)
   8686c:	f7fd f8e0 	bl	83a30 <__adddf3>
   86870:	4632      	mov	r2, r6
   86872:	463b      	mov	r3, r7
   86874:	f001 fc44 	bl	88100 <__aeabi_dcmplt>
   86878:	2800      	cmp	r0, #0
   8687a:	d046      	beq.n	8690a <_dtoa_r+0xd5a>
   8687c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8687e:	9302      	str	r3, [sp, #8]
   86880:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   86884:	f7ff bb42 	b.w	85f0c <_dtoa_r+0x35c>
   86888:	f04f 0800 	mov.w	r8, #0
   8688c:	4646      	mov	r6, r8
   8688e:	e6a8      	b.n	865e2 <_dtoa_r+0xa32>
   86890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86892:	9a07      	ldr	r2, [sp, #28]
   86894:	1a9d      	subs	r5, r3, r2
   86896:	2300      	movs	r3, #0
   86898:	f7ff bb70 	b.w	85f7c <_dtoa_r+0x3cc>
   8689c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8689e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   868a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   868a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   868a6:	f7ff bb69 	b.w	85f7c <_dtoa_r+0x3cc>
   868aa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   868ae:	f04f 0a02 	mov.w	sl, #2
   868b2:	e56d      	b.n	86390 <_dtoa_r+0x7e0>
   868b4:	9b07      	ldr	r3, [sp, #28]
   868b6:	2b00      	cmp	r3, #0
   868b8:	f43f aeb8 	beq.w	8662c <_dtoa_r+0xa7c>
   868bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   868be:	2b00      	cmp	r3, #0
   868c0:	f77f aede 	ble.w	86680 <_dtoa_r+0xad0>
   868c4:	2200      	movs	r2, #0
   868c6:	4b24      	ldr	r3, [pc, #144]	; (86958 <_dtoa_r+0xda8>)
   868c8:	4638      	mov	r0, r7
   868ca:	4641      	mov	r1, r8
   868cc:	f7fd fa62 	bl	83d94 <__aeabi_dmul>
   868d0:	4607      	mov	r7, r0
   868d2:	4688      	mov	r8, r1
   868d4:	f10a 0001 	add.w	r0, sl, #1
   868d8:	f7fd f9f6 	bl	83cc8 <__aeabi_i2d>
   868dc:	463a      	mov	r2, r7
   868de:	4643      	mov	r3, r8
   868e0:	f7fd fa58 	bl	83d94 <__aeabi_dmul>
   868e4:	2200      	movs	r2, #0
   868e6:	4b17      	ldr	r3, [pc, #92]	; (86944 <_dtoa_r+0xd94>)
   868e8:	f7fd f8a2 	bl	83a30 <__adddf3>
   868ec:	9a02      	ldr	r2, [sp, #8]
   868ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   868f0:	3a01      	subs	r2, #1
   868f2:	4605      	mov	r5, r0
   868f4:	9215      	str	r2, [sp, #84]	; 0x54
   868f6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   868fa:	9312      	str	r3, [sp, #72]	; 0x48
   868fc:	e569      	b.n	863d2 <_dtoa_r+0x822>
   868fe:	2239      	movs	r2, #57	; 0x39
   86900:	46b3      	mov	fp, r6
   86902:	703a      	strb	r2, [r7, #0]
   86904:	9e08      	ldr	r6, [sp, #32]
   86906:	1c7d      	adds	r5, r7, #1
   86908:	e4bf      	b.n	8628a <_dtoa_r+0x6da>
   8690a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8690e:	2000      	movs	r0, #0
   86910:	4910      	ldr	r1, [pc, #64]	; (86954 <_dtoa_r+0xda4>)
   86912:	f7fd f88b 	bl	83a2c <__aeabi_dsub>
   86916:	4632      	mov	r2, r6
   86918:	463b      	mov	r3, r7
   8691a:	f001 fc0f 	bl	8813c <__aeabi_dcmpgt>
   8691e:	b908      	cbnz	r0, 86924 <_dtoa_r+0xd74>
   86920:	e6ae      	b.n	86680 <_dtoa_r+0xad0>
   86922:	4615      	mov	r5, r2
   86924:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   86928:	1e6a      	subs	r2, r5, #1
   8692a:	2b30      	cmp	r3, #48	; 0x30
   8692c:	d0f9      	beq.n	86922 <_dtoa_r+0xd72>
   8692e:	e5d7      	b.n	864e0 <_dtoa_r+0x930>
   86930:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   86934:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86936:	9302      	str	r3, [sp, #8]
   86938:	f7ff bae8 	b.w	85f0c <_dtoa_r+0x35c>
   8693c:	970c      	str	r7, [sp, #48]	; 0x30
   8693e:	f7ff bba7 	b.w	86090 <_dtoa_r+0x4e0>
   86942:	bf00      	nop
   86944:	401c0000 	.word	0x401c0000
   86948:	40140000 	.word	0x40140000
   8694c:	000886a8 	.word	0x000886a8
   86950:	00088680 	.word	0x00088680
   86954:	3fe00000 	.word	0x3fe00000
   86958:	40240000 	.word	0x40240000
   8695c:	2b39      	cmp	r3, #57	; 0x39
   8695e:	f8cd b020 	str.w	fp, [sp, #32]
   86962:	46d0      	mov	r8, sl
   86964:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86968:	469a      	mov	sl, r3
   8696a:	d0c8      	beq.n	868fe <_dtoa_r+0xd4e>
   8696c:	f1bb 0f00 	cmp.w	fp, #0
   86970:	f73f aec0 	bgt.w	866f4 <_dtoa_r+0xb44>
   86974:	e6c0      	b.n	866f8 <_dtoa_r+0xb48>
   86976:	f47f aebf 	bne.w	866f8 <_dtoa_r+0xb48>
   8697a:	f01a 0f01 	tst.w	sl, #1
   8697e:	f43f aebb 	beq.w	866f8 <_dtoa_r+0xb48>
   86982:	e6b3      	b.n	866ec <_dtoa_r+0xb3c>
   86984:	f04f 0800 	mov.w	r8, #0
   86988:	4646      	mov	r6, r8
   8698a:	e5e8      	b.n	8655e <_dtoa_r+0x9ae>
   8698c:	4631      	mov	r1, r6
   8698e:	2300      	movs	r3, #0
   86990:	220a      	movs	r2, #10
   86992:	4620      	mov	r0, r4
   86994:	f000 fbf4 	bl	87180 <__multadd>
   86998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8699a:	4606      	mov	r6, r0
   8699c:	2b00      	cmp	r3, #0
   8699e:	dd07      	ble.n	869b0 <_dtoa_r+0xe00>
   869a0:	9307      	str	r3, [sp, #28]
   869a2:	f7ff bbab 	b.w	860fc <_dtoa_r+0x54c>
   869a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   869a8:	2b02      	cmp	r3, #2
   869aa:	dc1f      	bgt.n	869ec <_dtoa_r+0xe3c>
   869ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   869ae:	e43c      	b.n	8622a <_dtoa_r+0x67a>
   869b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   869b2:	2b02      	cmp	r3, #2
   869b4:	dc1a      	bgt.n	869ec <_dtoa_r+0xe3c>
   869b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   869b8:	e7f2      	b.n	869a0 <_dtoa_r+0xdf0>
   869ba:	f43f ab81 	beq.w	860c0 <_dtoa_r+0x510>
   869be:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   869c2:	e411      	b.n	861e8 <_dtoa_r+0x638>
   869c4:	2500      	movs	r5, #0
   869c6:	4620      	mov	r0, r4
   869c8:	6465      	str	r5, [r4, #68]	; 0x44
   869ca:	4629      	mov	r1, r5
   869cc:	f000 fba8 	bl	87120 <_Balloc>
   869d0:	f04f 33ff 	mov.w	r3, #4294967295
   869d4:	9307      	str	r3, [sp, #28]
   869d6:	930f      	str	r3, [sp, #60]	; 0x3c
   869d8:	2301      	movs	r3, #1
   869da:	9004      	str	r0, [sp, #16]
   869dc:	9525      	str	r5, [sp, #148]	; 0x94
   869de:	6420      	str	r0, [r4, #64]	; 0x40
   869e0:	930b      	str	r3, [sp, #44]	; 0x2c
   869e2:	f7ff b9e0 	b.w	85da6 <_dtoa_r+0x1f6>
   869e6:	2501      	movs	r5, #1
   869e8:	f7ff b9a8 	b.w	85d3c <_dtoa_r+0x18c>
   869ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   869ee:	9307      	str	r3, [sp, #28]
   869f0:	e5e8      	b.n	865c4 <_dtoa_r+0xa14>
   869f2:	bf00      	nop

000869f4 <__libc_fini_array>:
   869f4:	b538      	push	{r3, r4, r5, lr}
   869f6:	4c0a      	ldr	r4, [pc, #40]	; (86a20 <__libc_fini_array+0x2c>)
   869f8:	4d0a      	ldr	r5, [pc, #40]	; (86a24 <__libc_fini_array+0x30>)
   869fa:	1b64      	subs	r4, r4, r5
   869fc:	10a4      	asrs	r4, r4, #2
   869fe:	d00a      	beq.n	86a16 <__libc_fini_array+0x22>
   86a00:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   86a04:	3b01      	subs	r3, #1
   86a06:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   86a0a:	3c01      	subs	r4, #1
   86a0c:	f855 3904 	ldr.w	r3, [r5], #-4
   86a10:	4798      	blx	r3
   86a12:	2c00      	cmp	r4, #0
   86a14:	d1f9      	bne.n	86a0a <__libc_fini_array+0x16>
   86a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   86a1a:	f001 bf43 	b.w	888a4 <_fini>
   86a1e:	bf00      	nop
   86a20:	000888b4 	.word	0x000888b4
   86a24:	000888b0 	.word	0x000888b0

00086a28 <_localeconv_r>:
   86a28:	4a04      	ldr	r2, [pc, #16]	; (86a3c <_localeconv_r+0x14>)
   86a2a:	4b05      	ldr	r3, [pc, #20]	; (86a40 <_localeconv_r+0x18>)
   86a2c:	6812      	ldr	r2, [r2, #0]
   86a2e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   86a30:	2800      	cmp	r0, #0
   86a32:	bf08      	it	eq
   86a34:	4618      	moveq	r0, r3
   86a36:	30f0      	adds	r0, #240	; 0xf0
   86a38:	4770      	bx	lr
   86a3a:	bf00      	nop
   86a3c:	200701a4 	.word	0x200701a4
   86a40:	200709e4 	.word	0x200709e4

00086a44 <__retarget_lock_acquire_recursive>:
   86a44:	4770      	bx	lr
   86a46:	bf00      	nop

00086a48 <__retarget_lock_release_recursive>:
   86a48:	4770      	bx	lr
   86a4a:	bf00      	nop

00086a4c <_malloc_r>:
   86a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86a50:	f101 060b 	add.w	r6, r1, #11
   86a54:	2e16      	cmp	r6, #22
   86a56:	b083      	sub	sp, #12
   86a58:	4605      	mov	r5, r0
   86a5a:	f240 809e 	bls.w	86b9a <_malloc_r+0x14e>
   86a5e:	f036 0607 	bics.w	r6, r6, #7
   86a62:	f100 80bd 	bmi.w	86be0 <_malloc_r+0x194>
   86a66:	42b1      	cmp	r1, r6
   86a68:	f200 80ba 	bhi.w	86be0 <_malloc_r+0x194>
   86a6c:	f000 fb4c 	bl	87108 <__malloc_lock>
   86a70:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   86a74:	f0c0 8285 	bcc.w	86f82 <_malloc_r+0x536>
   86a78:	0a73      	lsrs	r3, r6, #9
   86a7a:	f000 80b8 	beq.w	86bee <_malloc_r+0x1a2>
   86a7e:	2b04      	cmp	r3, #4
   86a80:	f200 816c 	bhi.w	86d5c <_malloc_r+0x310>
   86a84:	09b3      	lsrs	r3, r6, #6
   86a86:	f103 0039 	add.w	r0, r3, #57	; 0x39
   86a8a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   86a8e:	00c1      	lsls	r1, r0, #3
   86a90:	4fb8      	ldr	r7, [pc, #736]	; (86d74 <_malloc_r+0x328>)
   86a92:	4439      	add	r1, r7
   86a94:	684c      	ldr	r4, [r1, #4]
   86a96:	3908      	subs	r1, #8
   86a98:	42a1      	cmp	r1, r4
   86a9a:	d106      	bne.n	86aaa <_malloc_r+0x5e>
   86a9c:	e00c      	b.n	86ab8 <_malloc_r+0x6c>
   86a9e:	2a00      	cmp	r2, #0
   86aa0:	f280 80ab 	bge.w	86bfa <_malloc_r+0x1ae>
   86aa4:	68e4      	ldr	r4, [r4, #12]
   86aa6:	42a1      	cmp	r1, r4
   86aa8:	d006      	beq.n	86ab8 <_malloc_r+0x6c>
   86aaa:	6863      	ldr	r3, [r4, #4]
   86aac:	f023 0303 	bic.w	r3, r3, #3
   86ab0:	1b9a      	subs	r2, r3, r6
   86ab2:	2a0f      	cmp	r2, #15
   86ab4:	ddf3      	ble.n	86a9e <_malloc_r+0x52>
   86ab6:	4670      	mov	r0, lr
   86ab8:	693c      	ldr	r4, [r7, #16]
   86aba:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 86d88 <_malloc_r+0x33c>
   86abe:	4574      	cmp	r4, lr
   86ac0:	f000 819e 	beq.w	86e00 <_malloc_r+0x3b4>
   86ac4:	6863      	ldr	r3, [r4, #4]
   86ac6:	f023 0303 	bic.w	r3, r3, #3
   86aca:	1b9a      	subs	r2, r3, r6
   86acc:	2a0f      	cmp	r2, #15
   86ace:	f300 8183 	bgt.w	86dd8 <_malloc_r+0x38c>
   86ad2:	2a00      	cmp	r2, #0
   86ad4:	f8c7 e014 	str.w	lr, [r7, #20]
   86ad8:	f8c7 e010 	str.w	lr, [r7, #16]
   86adc:	f280 8091 	bge.w	86c02 <_malloc_r+0x1b6>
   86ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86ae4:	f080 8154 	bcs.w	86d90 <_malloc_r+0x344>
   86ae8:	2201      	movs	r2, #1
   86aea:	08db      	lsrs	r3, r3, #3
   86aec:	6879      	ldr	r1, [r7, #4]
   86aee:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   86af2:	4413      	add	r3, r2
   86af4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   86af8:	fa02 f20c 	lsl.w	r2, r2, ip
   86afc:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   86b00:	430a      	orrs	r2, r1
   86b02:	f1ac 0108 	sub.w	r1, ip, #8
   86b06:	60e1      	str	r1, [r4, #12]
   86b08:	f8c4 8008 	str.w	r8, [r4, #8]
   86b0c:	607a      	str	r2, [r7, #4]
   86b0e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   86b12:	f8c8 400c 	str.w	r4, [r8, #12]
   86b16:	2401      	movs	r4, #1
   86b18:	1083      	asrs	r3, r0, #2
   86b1a:	409c      	lsls	r4, r3
   86b1c:	4294      	cmp	r4, r2
   86b1e:	d87d      	bhi.n	86c1c <_malloc_r+0x1d0>
   86b20:	4214      	tst	r4, r2
   86b22:	d106      	bne.n	86b32 <_malloc_r+0xe6>
   86b24:	f020 0003 	bic.w	r0, r0, #3
   86b28:	0064      	lsls	r4, r4, #1
   86b2a:	4214      	tst	r4, r2
   86b2c:	f100 0004 	add.w	r0, r0, #4
   86b30:	d0fa      	beq.n	86b28 <_malloc_r+0xdc>
   86b32:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   86b36:	46cc      	mov	ip, r9
   86b38:	4680      	mov	r8, r0
   86b3a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   86b3e:	459c      	cmp	ip, r3
   86b40:	d107      	bne.n	86b52 <_malloc_r+0x106>
   86b42:	e15f      	b.n	86e04 <_malloc_r+0x3b8>
   86b44:	2a00      	cmp	r2, #0
   86b46:	f280 816d 	bge.w	86e24 <_malloc_r+0x3d8>
   86b4a:	68db      	ldr	r3, [r3, #12]
   86b4c:	459c      	cmp	ip, r3
   86b4e:	f000 8159 	beq.w	86e04 <_malloc_r+0x3b8>
   86b52:	6859      	ldr	r1, [r3, #4]
   86b54:	f021 0103 	bic.w	r1, r1, #3
   86b58:	1b8a      	subs	r2, r1, r6
   86b5a:	2a0f      	cmp	r2, #15
   86b5c:	ddf2      	ble.n	86b44 <_malloc_r+0xf8>
   86b5e:	68dc      	ldr	r4, [r3, #12]
   86b60:	f8d3 c008 	ldr.w	ip, [r3, #8]
   86b64:	f046 0801 	orr.w	r8, r6, #1
   86b68:	4628      	mov	r0, r5
   86b6a:	441e      	add	r6, r3
   86b6c:	f042 0501 	orr.w	r5, r2, #1
   86b70:	f8c3 8004 	str.w	r8, [r3, #4]
   86b74:	f8cc 400c 	str.w	r4, [ip, #12]
   86b78:	f8c4 c008 	str.w	ip, [r4, #8]
   86b7c:	617e      	str	r6, [r7, #20]
   86b7e:	613e      	str	r6, [r7, #16]
   86b80:	f8c6 e00c 	str.w	lr, [r6, #12]
   86b84:	f8c6 e008 	str.w	lr, [r6, #8]
   86b88:	6075      	str	r5, [r6, #4]
   86b8a:	505a      	str	r2, [r3, r1]
   86b8c:	9300      	str	r3, [sp, #0]
   86b8e:	f000 fac1 	bl	87114 <__malloc_unlock>
   86b92:	9b00      	ldr	r3, [sp, #0]
   86b94:	f103 0408 	add.w	r4, r3, #8
   86b98:	e01e      	b.n	86bd8 <_malloc_r+0x18c>
   86b9a:	2910      	cmp	r1, #16
   86b9c:	d820      	bhi.n	86be0 <_malloc_r+0x194>
   86b9e:	f000 fab3 	bl	87108 <__malloc_lock>
   86ba2:	2610      	movs	r6, #16
   86ba4:	2318      	movs	r3, #24
   86ba6:	2002      	movs	r0, #2
   86ba8:	4f72      	ldr	r7, [pc, #456]	; (86d74 <_malloc_r+0x328>)
   86baa:	443b      	add	r3, r7
   86bac:	685c      	ldr	r4, [r3, #4]
   86bae:	f1a3 0208 	sub.w	r2, r3, #8
   86bb2:	4294      	cmp	r4, r2
   86bb4:	f000 812f 	beq.w	86e16 <_malloc_r+0x3ca>
   86bb8:	6863      	ldr	r3, [r4, #4]
   86bba:	68e1      	ldr	r1, [r4, #12]
   86bbc:	f023 0303 	bic.w	r3, r3, #3
   86bc0:	4423      	add	r3, r4
   86bc2:	685a      	ldr	r2, [r3, #4]
   86bc4:	68a6      	ldr	r6, [r4, #8]
   86bc6:	f042 0201 	orr.w	r2, r2, #1
   86bca:	60f1      	str	r1, [r6, #12]
   86bcc:	4628      	mov	r0, r5
   86bce:	608e      	str	r6, [r1, #8]
   86bd0:	605a      	str	r2, [r3, #4]
   86bd2:	f000 fa9f 	bl	87114 <__malloc_unlock>
   86bd6:	3408      	adds	r4, #8
   86bd8:	4620      	mov	r0, r4
   86bda:	b003      	add	sp, #12
   86bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86be0:	2400      	movs	r4, #0
   86be2:	230c      	movs	r3, #12
   86be4:	4620      	mov	r0, r4
   86be6:	602b      	str	r3, [r5, #0]
   86be8:	b003      	add	sp, #12
   86bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86bee:	2040      	movs	r0, #64	; 0x40
   86bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
   86bf4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   86bf8:	e74a      	b.n	86a90 <_malloc_r+0x44>
   86bfa:	4423      	add	r3, r4
   86bfc:	685a      	ldr	r2, [r3, #4]
   86bfe:	68e1      	ldr	r1, [r4, #12]
   86c00:	e7e0      	b.n	86bc4 <_malloc_r+0x178>
   86c02:	4423      	add	r3, r4
   86c04:	685a      	ldr	r2, [r3, #4]
   86c06:	4628      	mov	r0, r5
   86c08:	f042 0201 	orr.w	r2, r2, #1
   86c0c:	605a      	str	r2, [r3, #4]
   86c0e:	3408      	adds	r4, #8
   86c10:	f000 fa80 	bl	87114 <__malloc_unlock>
   86c14:	4620      	mov	r0, r4
   86c16:	b003      	add	sp, #12
   86c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86c1c:	68bc      	ldr	r4, [r7, #8]
   86c1e:	6863      	ldr	r3, [r4, #4]
   86c20:	f023 0803 	bic.w	r8, r3, #3
   86c24:	45b0      	cmp	r8, r6
   86c26:	d304      	bcc.n	86c32 <_malloc_r+0x1e6>
   86c28:	eba8 0306 	sub.w	r3, r8, r6
   86c2c:	2b0f      	cmp	r3, #15
   86c2e:	f300 8085 	bgt.w	86d3c <_malloc_r+0x2f0>
   86c32:	f8df 9158 	ldr.w	r9, [pc, #344]	; 86d8c <_malloc_r+0x340>
   86c36:	4b50      	ldr	r3, [pc, #320]	; (86d78 <_malloc_r+0x32c>)
   86c38:	f8d9 2000 	ldr.w	r2, [r9]
   86c3c:	681b      	ldr	r3, [r3, #0]
   86c3e:	3201      	adds	r2, #1
   86c40:	4433      	add	r3, r6
   86c42:	eb04 0a08 	add.w	sl, r4, r8
   86c46:	f000 8154 	beq.w	86ef2 <_malloc_r+0x4a6>
   86c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   86c4e:	330f      	adds	r3, #15
   86c50:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   86c54:	f02b 0b0f 	bic.w	fp, fp, #15
   86c58:	4659      	mov	r1, fp
   86c5a:	4628      	mov	r0, r5
   86c5c:	f000 fd5c 	bl	87718 <_sbrk_r>
   86c60:	1c41      	adds	r1, r0, #1
   86c62:	4602      	mov	r2, r0
   86c64:	f000 80fb 	beq.w	86e5e <_malloc_r+0x412>
   86c68:	4582      	cmp	sl, r0
   86c6a:	f200 80f6 	bhi.w	86e5a <_malloc_r+0x40e>
   86c6e:	4b43      	ldr	r3, [pc, #268]	; (86d7c <_malloc_r+0x330>)
   86c70:	6819      	ldr	r1, [r3, #0]
   86c72:	4459      	add	r1, fp
   86c74:	6019      	str	r1, [r3, #0]
   86c76:	f000 814c 	beq.w	86f12 <_malloc_r+0x4c6>
   86c7a:	f8d9 0000 	ldr.w	r0, [r9]
   86c7e:	3001      	adds	r0, #1
   86c80:	bf1b      	ittet	ne
   86c82:	eba2 0a0a 	subne.w	sl, r2, sl
   86c86:	4451      	addne	r1, sl
   86c88:	f8c9 2000 	streq.w	r2, [r9]
   86c8c:	6019      	strne	r1, [r3, #0]
   86c8e:	f012 0107 	ands.w	r1, r2, #7
   86c92:	f000 8114 	beq.w	86ebe <_malloc_r+0x472>
   86c96:	f1c1 0008 	rsb	r0, r1, #8
   86c9a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   86c9e:	4402      	add	r2, r0
   86ca0:	3108      	adds	r1, #8
   86ca2:	eb02 090b 	add.w	r9, r2, fp
   86ca6:	f3c9 090b 	ubfx	r9, r9, #0, #12
   86caa:	eba1 0909 	sub.w	r9, r1, r9
   86cae:	4649      	mov	r1, r9
   86cb0:	4628      	mov	r0, r5
   86cb2:	9301      	str	r3, [sp, #4]
   86cb4:	9200      	str	r2, [sp, #0]
   86cb6:	f000 fd2f 	bl	87718 <_sbrk_r>
   86cba:	1c43      	adds	r3, r0, #1
   86cbc:	e89d 000c 	ldmia.w	sp, {r2, r3}
   86cc0:	f000 8142 	beq.w	86f48 <_malloc_r+0x4fc>
   86cc4:	1a80      	subs	r0, r0, r2
   86cc6:	4448      	add	r0, r9
   86cc8:	f040 0001 	orr.w	r0, r0, #1
   86ccc:	6819      	ldr	r1, [r3, #0]
   86cce:	42bc      	cmp	r4, r7
   86cd0:	4449      	add	r1, r9
   86cd2:	60ba      	str	r2, [r7, #8]
   86cd4:	6019      	str	r1, [r3, #0]
   86cd6:	6050      	str	r0, [r2, #4]
   86cd8:	d017      	beq.n	86d0a <_malloc_r+0x2be>
   86cda:	f1b8 0f0f 	cmp.w	r8, #15
   86cde:	f240 80fa 	bls.w	86ed6 <_malloc_r+0x48a>
   86ce2:	f04f 0c05 	mov.w	ip, #5
   86ce6:	6862      	ldr	r2, [r4, #4]
   86ce8:	f1a8 000c 	sub.w	r0, r8, #12
   86cec:	f020 0007 	bic.w	r0, r0, #7
   86cf0:	f002 0201 	and.w	r2, r2, #1
   86cf4:	eb04 0e00 	add.w	lr, r4, r0
   86cf8:	4302      	orrs	r2, r0
   86cfa:	280f      	cmp	r0, #15
   86cfc:	6062      	str	r2, [r4, #4]
   86cfe:	f8ce c004 	str.w	ip, [lr, #4]
   86d02:	f8ce c008 	str.w	ip, [lr, #8]
   86d06:	f200 8116 	bhi.w	86f36 <_malloc_r+0x4ea>
   86d0a:	4b1d      	ldr	r3, [pc, #116]	; (86d80 <_malloc_r+0x334>)
   86d0c:	68bc      	ldr	r4, [r7, #8]
   86d0e:	681a      	ldr	r2, [r3, #0]
   86d10:	4291      	cmp	r1, r2
   86d12:	bf88      	it	hi
   86d14:	6019      	strhi	r1, [r3, #0]
   86d16:	4b1b      	ldr	r3, [pc, #108]	; (86d84 <_malloc_r+0x338>)
   86d18:	681a      	ldr	r2, [r3, #0]
   86d1a:	4291      	cmp	r1, r2
   86d1c:	6862      	ldr	r2, [r4, #4]
   86d1e:	bf88      	it	hi
   86d20:	6019      	strhi	r1, [r3, #0]
   86d22:	f022 0203 	bic.w	r2, r2, #3
   86d26:	4296      	cmp	r6, r2
   86d28:	eba2 0306 	sub.w	r3, r2, r6
   86d2c:	d801      	bhi.n	86d32 <_malloc_r+0x2e6>
   86d2e:	2b0f      	cmp	r3, #15
   86d30:	dc04      	bgt.n	86d3c <_malloc_r+0x2f0>
   86d32:	4628      	mov	r0, r5
   86d34:	f000 f9ee 	bl	87114 <__malloc_unlock>
   86d38:	2400      	movs	r4, #0
   86d3a:	e74d      	b.n	86bd8 <_malloc_r+0x18c>
   86d3c:	f046 0201 	orr.w	r2, r6, #1
   86d40:	f043 0301 	orr.w	r3, r3, #1
   86d44:	4426      	add	r6, r4
   86d46:	6062      	str	r2, [r4, #4]
   86d48:	4628      	mov	r0, r5
   86d4a:	60be      	str	r6, [r7, #8]
   86d4c:	3408      	adds	r4, #8
   86d4e:	6073      	str	r3, [r6, #4]
   86d50:	f000 f9e0 	bl	87114 <__malloc_unlock>
   86d54:	4620      	mov	r0, r4
   86d56:	b003      	add	sp, #12
   86d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d5c:	2b14      	cmp	r3, #20
   86d5e:	d970      	bls.n	86e42 <_malloc_r+0x3f6>
   86d60:	2b54      	cmp	r3, #84	; 0x54
   86d62:	f200 80a2 	bhi.w	86eaa <_malloc_r+0x45e>
   86d66:	0b33      	lsrs	r3, r6, #12
   86d68:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   86d6c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   86d70:	00c1      	lsls	r1, r0, #3
   86d72:	e68d      	b.n	86a90 <_malloc_r+0x44>
   86d74:	200705d4 	.word	0x200705d4
   86d78:	20070e04 	.word	0x20070e04
   86d7c:	20070dd4 	.word	0x20070dd4
   86d80:	20070dfc 	.word	0x20070dfc
   86d84:	20070e00 	.word	0x20070e00
   86d88:	200705dc 	.word	0x200705dc
   86d8c:	200709dc 	.word	0x200709dc
   86d90:	0a5a      	lsrs	r2, r3, #9
   86d92:	2a04      	cmp	r2, #4
   86d94:	d95b      	bls.n	86e4e <_malloc_r+0x402>
   86d96:	2a14      	cmp	r2, #20
   86d98:	f200 80ae 	bhi.w	86ef8 <_malloc_r+0x4ac>
   86d9c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   86da0:	00c9      	lsls	r1, r1, #3
   86da2:	325b      	adds	r2, #91	; 0x5b
   86da4:	eb07 0c01 	add.w	ip, r7, r1
   86da8:	5879      	ldr	r1, [r7, r1]
   86daa:	f1ac 0c08 	sub.w	ip, ip, #8
   86dae:	458c      	cmp	ip, r1
   86db0:	f000 8088 	beq.w	86ec4 <_malloc_r+0x478>
   86db4:	684a      	ldr	r2, [r1, #4]
   86db6:	f022 0203 	bic.w	r2, r2, #3
   86dba:	4293      	cmp	r3, r2
   86dbc:	d273      	bcs.n	86ea6 <_malloc_r+0x45a>
   86dbe:	6889      	ldr	r1, [r1, #8]
   86dc0:	458c      	cmp	ip, r1
   86dc2:	d1f7      	bne.n	86db4 <_malloc_r+0x368>
   86dc4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   86dc8:	687a      	ldr	r2, [r7, #4]
   86dca:	60e3      	str	r3, [r4, #12]
   86dcc:	f8c4 c008 	str.w	ip, [r4, #8]
   86dd0:	609c      	str	r4, [r3, #8]
   86dd2:	f8cc 400c 	str.w	r4, [ip, #12]
   86dd6:	e69e      	b.n	86b16 <_malloc_r+0xca>
   86dd8:	f046 0c01 	orr.w	ip, r6, #1
   86ddc:	f042 0101 	orr.w	r1, r2, #1
   86de0:	4426      	add	r6, r4
   86de2:	f8c4 c004 	str.w	ip, [r4, #4]
   86de6:	4628      	mov	r0, r5
   86de8:	617e      	str	r6, [r7, #20]
   86dea:	613e      	str	r6, [r7, #16]
   86dec:	f8c6 e00c 	str.w	lr, [r6, #12]
   86df0:	f8c6 e008 	str.w	lr, [r6, #8]
   86df4:	6071      	str	r1, [r6, #4]
   86df6:	50e2      	str	r2, [r4, r3]
   86df8:	f000 f98c 	bl	87114 <__malloc_unlock>
   86dfc:	3408      	adds	r4, #8
   86dfe:	e6eb      	b.n	86bd8 <_malloc_r+0x18c>
   86e00:	687a      	ldr	r2, [r7, #4]
   86e02:	e688      	b.n	86b16 <_malloc_r+0xca>
   86e04:	f108 0801 	add.w	r8, r8, #1
   86e08:	f018 0f03 	tst.w	r8, #3
   86e0c:	f10c 0c08 	add.w	ip, ip, #8
   86e10:	f47f ae93 	bne.w	86b3a <_malloc_r+0xee>
   86e14:	e02d      	b.n	86e72 <_malloc_r+0x426>
   86e16:	68dc      	ldr	r4, [r3, #12]
   86e18:	42a3      	cmp	r3, r4
   86e1a:	bf08      	it	eq
   86e1c:	3002      	addeq	r0, #2
   86e1e:	f43f ae4b 	beq.w	86ab8 <_malloc_r+0x6c>
   86e22:	e6c9      	b.n	86bb8 <_malloc_r+0x16c>
   86e24:	461c      	mov	r4, r3
   86e26:	4419      	add	r1, r3
   86e28:	684a      	ldr	r2, [r1, #4]
   86e2a:	68db      	ldr	r3, [r3, #12]
   86e2c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   86e30:	f042 0201 	orr.w	r2, r2, #1
   86e34:	604a      	str	r2, [r1, #4]
   86e36:	4628      	mov	r0, r5
   86e38:	60f3      	str	r3, [r6, #12]
   86e3a:	609e      	str	r6, [r3, #8]
   86e3c:	f000 f96a 	bl	87114 <__malloc_unlock>
   86e40:	e6ca      	b.n	86bd8 <_malloc_r+0x18c>
   86e42:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   86e46:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   86e4a:	00c1      	lsls	r1, r0, #3
   86e4c:	e620      	b.n	86a90 <_malloc_r+0x44>
   86e4e:	099a      	lsrs	r2, r3, #6
   86e50:	f102 0139 	add.w	r1, r2, #57	; 0x39
   86e54:	00c9      	lsls	r1, r1, #3
   86e56:	3238      	adds	r2, #56	; 0x38
   86e58:	e7a4      	b.n	86da4 <_malloc_r+0x358>
   86e5a:	42bc      	cmp	r4, r7
   86e5c:	d054      	beq.n	86f08 <_malloc_r+0x4bc>
   86e5e:	68bc      	ldr	r4, [r7, #8]
   86e60:	6862      	ldr	r2, [r4, #4]
   86e62:	f022 0203 	bic.w	r2, r2, #3
   86e66:	e75e      	b.n	86d26 <_malloc_r+0x2da>
   86e68:	f859 3908 	ldr.w	r3, [r9], #-8
   86e6c:	4599      	cmp	r9, r3
   86e6e:	f040 8086 	bne.w	86f7e <_malloc_r+0x532>
   86e72:	f010 0f03 	tst.w	r0, #3
   86e76:	f100 30ff 	add.w	r0, r0, #4294967295
   86e7a:	d1f5      	bne.n	86e68 <_malloc_r+0x41c>
   86e7c:	687b      	ldr	r3, [r7, #4]
   86e7e:	ea23 0304 	bic.w	r3, r3, r4
   86e82:	607b      	str	r3, [r7, #4]
   86e84:	0064      	lsls	r4, r4, #1
   86e86:	429c      	cmp	r4, r3
   86e88:	f63f aec8 	bhi.w	86c1c <_malloc_r+0x1d0>
   86e8c:	2c00      	cmp	r4, #0
   86e8e:	f43f aec5 	beq.w	86c1c <_malloc_r+0x1d0>
   86e92:	421c      	tst	r4, r3
   86e94:	4640      	mov	r0, r8
   86e96:	f47f ae4c 	bne.w	86b32 <_malloc_r+0xe6>
   86e9a:	0064      	lsls	r4, r4, #1
   86e9c:	421c      	tst	r4, r3
   86e9e:	f100 0004 	add.w	r0, r0, #4
   86ea2:	d0fa      	beq.n	86e9a <_malloc_r+0x44e>
   86ea4:	e645      	b.n	86b32 <_malloc_r+0xe6>
   86ea6:	468c      	mov	ip, r1
   86ea8:	e78c      	b.n	86dc4 <_malloc_r+0x378>
   86eaa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86eae:	d815      	bhi.n	86edc <_malloc_r+0x490>
   86eb0:	0bf3      	lsrs	r3, r6, #15
   86eb2:	f103 0078 	add.w	r0, r3, #120	; 0x78
   86eb6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   86eba:	00c1      	lsls	r1, r0, #3
   86ebc:	e5e8      	b.n	86a90 <_malloc_r+0x44>
   86ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   86ec2:	e6ee      	b.n	86ca2 <_malloc_r+0x256>
   86ec4:	2101      	movs	r1, #1
   86ec6:	687b      	ldr	r3, [r7, #4]
   86ec8:	1092      	asrs	r2, r2, #2
   86eca:	fa01 f202 	lsl.w	r2, r1, r2
   86ece:	431a      	orrs	r2, r3
   86ed0:	607a      	str	r2, [r7, #4]
   86ed2:	4663      	mov	r3, ip
   86ed4:	e779      	b.n	86dca <_malloc_r+0x37e>
   86ed6:	2301      	movs	r3, #1
   86ed8:	6053      	str	r3, [r2, #4]
   86eda:	e72a      	b.n	86d32 <_malloc_r+0x2e6>
   86edc:	f240 5254 	movw	r2, #1364	; 0x554
   86ee0:	4293      	cmp	r3, r2
   86ee2:	d822      	bhi.n	86f2a <_malloc_r+0x4de>
   86ee4:	0cb3      	lsrs	r3, r6, #18
   86ee6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   86eea:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   86eee:	00c1      	lsls	r1, r0, #3
   86ef0:	e5ce      	b.n	86a90 <_malloc_r+0x44>
   86ef2:	f103 0b10 	add.w	fp, r3, #16
   86ef6:	e6af      	b.n	86c58 <_malloc_r+0x20c>
   86ef8:	2a54      	cmp	r2, #84	; 0x54
   86efa:	d829      	bhi.n	86f50 <_malloc_r+0x504>
   86efc:	0b1a      	lsrs	r2, r3, #12
   86efe:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   86f02:	00c9      	lsls	r1, r1, #3
   86f04:	326e      	adds	r2, #110	; 0x6e
   86f06:	e74d      	b.n	86da4 <_malloc_r+0x358>
   86f08:	4b20      	ldr	r3, [pc, #128]	; (86f8c <_malloc_r+0x540>)
   86f0a:	6819      	ldr	r1, [r3, #0]
   86f0c:	4459      	add	r1, fp
   86f0e:	6019      	str	r1, [r3, #0]
   86f10:	e6b3      	b.n	86c7a <_malloc_r+0x22e>
   86f12:	f3ca 000b 	ubfx	r0, sl, #0, #12
   86f16:	2800      	cmp	r0, #0
   86f18:	f47f aeaf 	bne.w	86c7a <_malloc_r+0x22e>
   86f1c:	eb08 030b 	add.w	r3, r8, fp
   86f20:	68ba      	ldr	r2, [r7, #8]
   86f22:	f043 0301 	orr.w	r3, r3, #1
   86f26:	6053      	str	r3, [r2, #4]
   86f28:	e6ef      	b.n	86d0a <_malloc_r+0x2be>
   86f2a:	207f      	movs	r0, #127	; 0x7f
   86f2c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86f30:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   86f34:	e5ac      	b.n	86a90 <_malloc_r+0x44>
   86f36:	f104 0108 	add.w	r1, r4, #8
   86f3a:	4628      	mov	r0, r5
   86f3c:	9300      	str	r3, [sp, #0]
   86f3e:	f000 fd5d 	bl	879fc <_free_r>
   86f42:	9b00      	ldr	r3, [sp, #0]
   86f44:	6819      	ldr	r1, [r3, #0]
   86f46:	e6e0      	b.n	86d0a <_malloc_r+0x2be>
   86f48:	2001      	movs	r0, #1
   86f4a:	f04f 0900 	mov.w	r9, #0
   86f4e:	e6bd      	b.n	86ccc <_malloc_r+0x280>
   86f50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86f54:	d805      	bhi.n	86f62 <_malloc_r+0x516>
   86f56:	0bda      	lsrs	r2, r3, #15
   86f58:	f102 0178 	add.w	r1, r2, #120	; 0x78
   86f5c:	00c9      	lsls	r1, r1, #3
   86f5e:	3277      	adds	r2, #119	; 0x77
   86f60:	e720      	b.n	86da4 <_malloc_r+0x358>
   86f62:	f240 5154 	movw	r1, #1364	; 0x554
   86f66:	428a      	cmp	r2, r1
   86f68:	d805      	bhi.n	86f76 <_malloc_r+0x52a>
   86f6a:	0c9a      	lsrs	r2, r3, #18
   86f6c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   86f70:	00c9      	lsls	r1, r1, #3
   86f72:	327c      	adds	r2, #124	; 0x7c
   86f74:	e716      	b.n	86da4 <_malloc_r+0x358>
   86f76:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86f7a:	227e      	movs	r2, #126	; 0x7e
   86f7c:	e712      	b.n	86da4 <_malloc_r+0x358>
   86f7e:	687b      	ldr	r3, [r7, #4]
   86f80:	e780      	b.n	86e84 <_malloc_r+0x438>
   86f82:	08f0      	lsrs	r0, r6, #3
   86f84:	f106 0308 	add.w	r3, r6, #8
   86f88:	e60e      	b.n	86ba8 <_malloc_r+0x15c>
   86f8a:	bf00      	nop
   86f8c:	20070dd4 	.word	0x20070dd4

00086f90 <memchr>:
   86f90:	0783      	lsls	r3, r0, #30
   86f92:	b470      	push	{r4, r5, r6}
   86f94:	b2cd      	uxtb	r5, r1
   86f96:	d03d      	beq.n	87014 <memchr+0x84>
   86f98:	1e54      	subs	r4, r2, #1
   86f9a:	b30a      	cbz	r2, 86fe0 <memchr+0x50>
   86f9c:	7803      	ldrb	r3, [r0, #0]
   86f9e:	42ab      	cmp	r3, r5
   86fa0:	d01f      	beq.n	86fe2 <memchr+0x52>
   86fa2:	1c43      	adds	r3, r0, #1
   86fa4:	e005      	b.n	86fb2 <memchr+0x22>
   86fa6:	f114 34ff 	adds.w	r4, r4, #4294967295
   86faa:	d319      	bcc.n	86fe0 <memchr+0x50>
   86fac:	7802      	ldrb	r2, [r0, #0]
   86fae:	42aa      	cmp	r2, r5
   86fb0:	d017      	beq.n	86fe2 <memchr+0x52>
   86fb2:	f013 0f03 	tst.w	r3, #3
   86fb6:	4618      	mov	r0, r3
   86fb8:	f103 0301 	add.w	r3, r3, #1
   86fbc:	d1f3      	bne.n	86fa6 <memchr+0x16>
   86fbe:	2c03      	cmp	r4, #3
   86fc0:	d811      	bhi.n	86fe6 <memchr+0x56>
   86fc2:	b34c      	cbz	r4, 87018 <memchr+0x88>
   86fc4:	7803      	ldrb	r3, [r0, #0]
   86fc6:	42ab      	cmp	r3, r5
   86fc8:	d00b      	beq.n	86fe2 <memchr+0x52>
   86fca:	4404      	add	r4, r0
   86fcc:	1c43      	adds	r3, r0, #1
   86fce:	e002      	b.n	86fd6 <memchr+0x46>
   86fd0:	7802      	ldrb	r2, [r0, #0]
   86fd2:	42aa      	cmp	r2, r5
   86fd4:	d005      	beq.n	86fe2 <memchr+0x52>
   86fd6:	429c      	cmp	r4, r3
   86fd8:	4618      	mov	r0, r3
   86fda:	f103 0301 	add.w	r3, r3, #1
   86fde:	d1f7      	bne.n	86fd0 <memchr+0x40>
   86fe0:	2000      	movs	r0, #0
   86fe2:	bc70      	pop	{r4, r5, r6}
   86fe4:	4770      	bx	lr
   86fe6:	0209      	lsls	r1, r1, #8
   86fe8:	b289      	uxth	r1, r1
   86fea:	4329      	orrs	r1, r5
   86fec:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   86ff0:	6803      	ldr	r3, [r0, #0]
   86ff2:	4606      	mov	r6, r0
   86ff4:	404b      	eors	r3, r1
   86ff6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   86ffa:	ea22 0303 	bic.w	r3, r2, r3
   86ffe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   87002:	f100 0004 	add.w	r0, r0, #4
   87006:	d103      	bne.n	87010 <memchr+0x80>
   87008:	3c04      	subs	r4, #4
   8700a:	2c03      	cmp	r4, #3
   8700c:	d8f0      	bhi.n	86ff0 <memchr+0x60>
   8700e:	e7d8      	b.n	86fc2 <memchr+0x32>
   87010:	4630      	mov	r0, r6
   87012:	e7d7      	b.n	86fc4 <memchr+0x34>
   87014:	4614      	mov	r4, r2
   87016:	e7d2      	b.n	86fbe <memchr+0x2e>
   87018:	4620      	mov	r0, r4
   8701a:	e7e2      	b.n	86fe2 <memchr+0x52>

0008701c <memcpy>:
   8701c:	4684      	mov	ip, r0
   8701e:	ea41 0300 	orr.w	r3, r1, r0
   87022:	f013 0303 	ands.w	r3, r3, #3
   87026:	d149      	bne.n	870bc <memcpy+0xa0>
   87028:	3a40      	subs	r2, #64	; 0x40
   8702a:	d323      	bcc.n	87074 <memcpy+0x58>
   8702c:	680b      	ldr	r3, [r1, #0]
   8702e:	6003      	str	r3, [r0, #0]
   87030:	684b      	ldr	r3, [r1, #4]
   87032:	6043      	str	r3, [r0, #4]
   87034:	688b      	ldr	r3, [r1, #8]
   87036:	6083      	str	r3, [r0, #8]
   87038:	68cb      	ldr	r3, [r1, #12]
   8703a:	60c3      	str	r3, [r0, #12]
   8703c:	690b      	ldr	r3, [r1, #16]
   8703e:	6103      	str	r3, [r0, #16]
   87040:	694b      	ldr	r3, [r1, #20]
   87042:	6143      	str	r3, [r0, #20]
   87044:	698b      	ldr	r3, [r1, #24]
   87046:	6183      	str	r3, [r0, #24]
   87048:	69cb      	ldr	r3, [r1, #28]
   8704a:	61c3      	str	r3, [r0, #28]
   8704c:	6a0b      	ldr	r3, [r1, #32]
   8704e:	6203      	str	r3, [r0, #32]
   87050:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   87052:	6243      	str	r3, [r0, #36]	; 0x24
   87054:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   87056:	6283      	str	r3, [r0, #40]	; 0x28
   87058:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8705a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8705c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8705e:	6303      	str	r3, [r0, #48]	; 0x30
   87060:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   87062:	6343      	str	r3, [r0, #52]	; 0x34
   87064:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   87066:	6383      	str	r3, [r0, #56]	; 0x38
   87068:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8706a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8706c:	3040      	adds	r0, #64	; 0x40
   8706e:	3140      	adds	r1, #64	; 0x40
   87070:	3a40      	subs	r2, #64	; 0x40
   87072:	d2db      	bcs.n	8702c <memcpy+0x10>
   87074:	3230      	adds	r2, #48	; 0x30
   87076:	d30b      	bcc.n	87090 <memcpy+0x74>
   87078:	680b      	ldr	r3, [r1, #0]
   8707a:	6003      	str	r3, [r0, #0]
   8707c:	684b      	ldr	r3, [r1, #4]
   8707e:	6043      	str	r3, [r0, #4]
   87080:	688b      	ldr	r3, [r1, #8]
   87082:	6083      	str	r3, [r0, #8]
   87084:	68cb      	ldr	r3, [r1, #12]
   87086:	60c3      	str	r3, [r0, #12]
   87088:	3010      	adds	r0, #16
   8708a:	3110      	adds	r1, #16
   8708c:	3a10      	subs	r2, #16
   8708e:	d2f3      	bcs.n	87078 <memcpy+0x5c>
   87090:	320c      	adds	r2, #12
   87092:	d305      	bcc.n	870a0 <memcpy+0x84>
   87094:	f851 3b04 	ldr.w	r3, [r1], #4
   87098:	f840 3b04 	str.w	r3, [r0], #4
   8709c:	3a04      	subs	r2, #4
   8709e:	d2f9      	bcs.n	87094 <memcpy+0x78>
   870a0:	3204      	adds	r2, #4
   870a2:	d008      	beq.n	870b6 <memcpy+0x9a>
   870a4:	07d2      	lsls	r2, r2, #31
   870a6:	bf1c      	itt	ne
   870a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   870ac:	f800 3b01 	strbne.w	r3, [r0], #1
   870b0:	d301      	bcc.n	870b6 <memcpy+0x9a>
   870b2:	880b      	ldrh	r3, [r1, #0]
   870b4:	8003      	strh	r3, [r0, #0]
   870b6:	4660      	mov	r0, ip
   870b8:	4770      	bx	lr
   870ba:	bf00      	nop
   870bc:	2a08      	cmp	r2, #8
   870be:	d313      	bcc.n	870e8 <memcpy+0xcc>
   870c0:	078b      	lsls	r3, r1, #30
   870c2:	d0b1      	beq.n	87028 <memcpy+0xc>
   870c4:	f010 0303 	ands.w	r3, r0, #3
   870c8:	d0ae      	beq.n	87028 <memcpy+0xc>
   870ca:	f1c3 0304 	rsb	r3, r3, #4
   870ce:	1ad2      	subs	r2, r2, r3
   870d0:	07db      	lsls	r3, r3, #31
   870d2:	bf1c      	itt	ne
   870d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   870d8:	f800 3b01 	strbne.w	r3, [r0], #1
   870dc:	d3a4      	bcc.n	87028 <memcpy+0xc>
   870de:	f831 3b02 	ldrh.w	r3, [r1], #2
   870e2:	f820 3b02 	strh.w	r3, [r0], #2
   870e6:	e79f      	b.n	87028 <memcpy+0xc>
   870e8:	3a04      	subs	r2, #4
   870ea:	d3d9      	bcc.n	870a0 <memcpy+0x84>
   870ec:	3a01      	subs	r2, #1
   870ee:	f811 3b01 	ldrb.w	r3, [r1], #1
   870f2:	f800 3b01 	strb.w	r3, [r0], #1
   870f6:	d2f9      	bcs.n	870ec <memcpy+0xd0>
   870f8:	780b      	ldrb	r3, [r1, #0]
   870fa:	7003      	strb	r3, [r0, #0]
   870fc:	784b      	ldrb	r3, [r1, #1]
   870fe:	7043      	strb	r3, [r0, #1]
   87100:	788b      	ldrb	r3, [r1, #2]
   87102:	7083      	strb	r3, [r0, #2]
   87104:	4660      	mov	r0, ip
   87106:	4770      	bx	lr

00087108 <__malloc_lock>:
   87108:	4801      	ldr	r0, [pc, #4]	; (87110 <__malloc_lock+0x8>)
   8710a:	f7ff bc9b 	b.w	86a44 <__retarget_lock_acquire_recursive>
   8710e:	bf00      	nop
   87110:	20070e88 	.word	0x20070e88

00087114 <__malloc_unlock>:
   87114:	4801      	ldr	r0, [pc, #4]	; (8711c <__malloc_unlock+0x8>)
   87116:	f7ff bc97 	b.w	86a48 <__retarget_lock_release_recursive>
   8711a:	bf00      	nop
   8711c:	20070e88 	.word	0x20070e88

00087120 <_Balloc>:
   87120:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   87122:	b570      	push	{r4, r5, r6, lr}
   87124:	4605      	mov	r5, r0
   87126:	460c      	mov	r4, r1
   87128:	b14b      	cbz	r3, 8713e <_Balloc+0x1e>
   8712a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8712e:	b180      	cbz	r0, 87152 <_Balloc+0x32>
   87130:	6802      	ldr	r2, [r0, #0]
   87132:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   87136:	2300      	movs	r3, #0
   87138:	6103      	str	r3, [r0, #16]
   8713a:	60c3      	str	r3, [r0, #12]
   8713c:	bd70      	pop	{r4, r5, r6, pc}
   8713e:	2221      	movs	r2, #33	; 0x21
   87140:	2104      	movs	r1, #4
   87142:	f000 fbdb 	bl	878fc <_calloc_r>
   87146:	64e8      	str	r0, [r5, #76]	; 0x4c
   87148:	4603      	mov	r3, r0
   8714a:	2800      	cmp	r0, #0
   8714c:	d1ed      	bne.n	8712a <_Balloc+0xa>
   8714e:	2000      	movs	r0, #0
   87150:	bd70      	pop	{r4, r5, r6, pc}
   87152:	2101      	movs	r1, #1
   87154:	fa01 f604 	lsl.w	r6, r1, r4
   87158:	1d72      	adds	r2, r6, #5
   8715a:	4628      	mov	r0, r5
   8715c:	0092      	lsls	r2, r2, #2
   8715e:	f000 fbcd 	bl	878fc <_calloc_r>
   87162:	2800      	cmp	r0, #0
   87164:	d0f3      	beq.n	8714e <_Balloc+0x2e>
   87166:	6044      	str	r4, [r0, #4]
   87168:	6086      	str	r6, [r0, #8]
   8716a:	e7e4      	b.n	87136 <_Balloc+0x16>

0008716c <_Bfree>:
   8716c:	b131      	cbz	r1, 8717c <_Bfree+0x10>
   8716e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   87170:	684a      	ldr	r2, [r1, #4]
   87172:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   87176:	6008      	str	r0, [r1, #0]
   87178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8717c:	4770      	bx	lr
   8717e:	bf00      	nop

00087180 <__multadd>:
   87180:	b5f0      	push	{r4, r5, r6, r7, lr}
   87182:	460c      	mov	r4, r1
   87184:	4605      	mov	r5, r0
   87186:	f04f 0e00 	mov.w	lr, #0
   8718a:	690e      	ldr	r6, [r1, #16]
   8718c:	b083      	sub	sp, #12
   8718e:	f101 0714 	add.w	r7, r1, #20
   87192:	6838      	ldr	r0, [r7, #0]
   87194:	f10e 0e01 	add.w	lr, lr, #1
   87198:	b281      	uxth	r1, r0
   8719a:	fb02 3301 	mla	r3, r2, r1, r3
   8719e:	0c01      	lsrs	r1, r0, #16
   871a0:	0c18      	lsrs	r0, r3, #16
   871a2:	fb02 0101 	mla	r1, r2, r1, r0
   871a6:	b29b      	uxth	r3, r3
   871a8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   871ac:	4576      	cmp	r6, lr
   871ae:	f847 3b04 	str.w	r3, [r7], #4
   871b2:	ea4f 4311 	mov.w	r3, r1, lsr #16
   871b6:	dcec      	bgt.n	87192 <__multadd+0x12>
   871b8:	b13b      	cbz	r3, 871ca <__multadd+0x4a>
   871ba:	68a2      	ldr	r2, [r4, #8]
   871bc:	4296      	cmp	r6, r2
   871be:	da07      	bge.n	871d0 <__multadd+0x50>
   871c0:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   871c4:	3601      	adds	r6, #1
   871c6:	6153      	str	r3, [r2, #20]
   871c8:	6126      	str	r6, [r4, #16]
   871ca:	4620      	mov	r0, r4
   871cc:	b003      	add	sp, #12
   871ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   871d0:	6861      	ldr	r1, [r4, #4]
   871d2:	4628      	mov	r0, r5
   871d4:	3101      	adds	r1, #1
   871d6:	9301      	str	r3, [sp, #4]
   871d8:	f7ff ffa2 	bl	87120 <_Balloc>
   871dc:	4607      	mov	r7, r0
   871de:	6922      	ldr	r2, [r4, #16]
   871e0:	f104 010c 	add.w	r1, r4, #12
   871e4:	3202      	adds	r2, #2
   871e6:	0092      	lsls	r2, r2, #2
   871e8:	300c      	adds	r0, #12
   871ea:	f7ff ff17 	bl	8701c <memcpy>
   871ee:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   871f0:	6861      	ldr	r1, [r4, #4]
   871f2:	9b01      	ldr	r3, [sp, #4]
   871f4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   871f8:	6020      	str	r0, [r4, #0]
   871fa:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   871fe:	463c      	mov	r4, r7
   87200:	e7de      	b.n	871c0 <__multadd+0x40>
   87202:	bf00      	nop

00087204 <__hi0bits>:
   87204:	0c02      	lsrs	r2, r0, #16
   87206:	0412      	lsls	r2, r2, #16
   87208:	4603      	mov	r3, r0
   8720a:	b9b2      	cbnz	r2, 8723a <__hi0bits+0x36>
   8720c:	0403      	lsls	r3, r0, #16
   8720e:	2010      	movs	r0, #16
   87210:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   87214:	bf04      	itt	eq
   87216:	021b      	lsleq	r3, r3, #8
   87218:	3008      	addeq	r0, #8
   8721a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8721e:	bf04      	itt	eq
   87220:	011b      	lsleq	r3, r3, #4
   87222:	3004      	addeq	r0, #4
   87224:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   87228:	bf04      	itt	eq
   8722a:	009b      	lsleq	r3, r3, #2
   8722c:	3002      	addeq	r0, #2
   8722e:	2b00      	cmp	r3, #0
   87230:	db02      	blt.n	87238 <__hi0bits+0x34>
   87232:	005b      	lsls	r3, r3, #1
   87234:	d403      	bmi.n	8723e <__hi0bits+0x3a>
   87236:	2020      	movs	r0, #32
   87238:	4770      	bx	lr
   8723a:	2000      	movs	r0, #0
   8723c:	e7e8      	b.n	87210 <__hi0bits+0xc>
   8723e:	3001      	adds	r0, #1
   87240:	4770      	bx	lr
   87242:	bf00      	nop

00087244 <__lo0bits>:
   87244:	6803      	ldr	r3, [r0, #0]
   87246:	4601      	mov	r1, r0
   87248:	f013 0207 	ands.w	r2, r3, #7
   8724c:	d007      	beq.n	8725e <__lo0bits+0x1a>
   8724e:	07da      	lsls	r2, r3, #31
   87250:	d421      	bmi.n	87296 <__lo0bits+0x52>
   87252:	0798      	lsls	r0, r3, #30
   87254:	d421      	bmi.n	8729a <__lo0bits+0x56>
   87256:	089b      	lsrs	r3, r3, #2
   87258:	600b      	str	r3, [r1, #0]
   8725a:	2002      	movs	r0, #2
   8725c:	4770      	bx	lr
   8725e:	b298      	uxth	r0, r3
   87260:	b198      	cbz	r0, 8728a <__lo0bits+0x46>
   87262:	4610      	mov	r0, r2
   87264:	f013 0fff 	tst.w	r3, #255	; 0xff
   87268:	bf04      	itt	eq
   8726a:	0a1b      	lsreq	r3, r3, #8
   8726c:	3008      	addeq	r0, #8
   8726e:	071a      	lsls	r2, r3, #28
   87270:	bf04      	itt	eq
   87272:	091b      	lsreq	r3, r3, #4
   87274:	3004      	addeq	r0, #4
   87276:	079a      	lsls	r2, r3, #30
   87278:	bf04      	itt	eq
   8727a:	089b      	lsreq	r3, r3, #2
   8727c:	3002      	addeq	r0, #2
   8727e:	07da      	lsls	r2, r3, #31
   87280:	d407      	bmi.n	87292 <__lo0bits+0x4e>
   87282:	085b      	lsrs	r3, r3, #1
   87284:	d104      	bne.n	87290 <__lo0bits+0x4c>
   87286:	2020      	movs	r0, #32
   87288:	4770      	bx	lr
   8728a:	0c1b      	lsrs	r3, r3, #16
   8728c:	2010      	movs	r0, #16
   8728e:	e7e9      	b.n	87264 <__lo0bits+0x20>
   87290:	3001      	adds	r0, #1
   87292:	600b      	str	r3, [r1, #0]
   87294:	4770      	bx	lr
   87296:	2000      	movs	r0, #0
   87298:	4770      	bx	lr
   8729a:	085b      	lsrs	r3, r3, #1
   8729c:	600b      	str	r3, [r1, #0]
   8729e:	2001      	movs	r0, #1
   872a0:	4770      	bx	lr
   872a2:	bf00      	nop

000872a4 <__i2b>:
   872a4:	b510      	push	{r4, lr}
   872a6:	460c      	mov	r4, r1
   872a8:	2101      	movs	r1, #1
   872aa:	f7ff ff39 	bl	87120 <_Balloc>
   872ae:	2201      	movs	r2, #1
   872b0:	6144      	str	r4, [r0, #20]
   872b2:	6102      	str	r2, [r0, #16]
   872b4:	bd10      	pop	{r4, pc}
   872b6:	bf00      	nop

000872b8 <__multiply>:
   872b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   872bc:	690c      	ldr	r4, [r1, #16]
   872be:	6915      	ldr	r5, [r2, #16]
   872c0:	b083      	sub	sp, #12
   872c2:	42ac      	cmp	r4, r5
   872c4:	468b      	mov	fp, r1
   872c6:	4616      	mov	r6, r2
   872c8:	da04      	bge.n	872d4 <__multiply+0x1c>
   872ca:	4622      	mov	r2, r4
   872cc:	46b3      	mov	fp, r6
   872ce:	462c      	mov	r4, r5
   872d0:	460e      	mov	r6, r1
   872d2:	4615      	mov	r5, r2
   872d4:	f8db 3008 	ldr.w	r3, [fp, #8]
   872d8:	eb04 0805 	add.w	r8, r4, r5
   872dc:	f8db 1004 	ldr.w	r1, [fp, #4]
   872e0:	4598      	cmp	r8, r3
   872e2:	bfc8      	it	gt
   872e4:	3101      	addgt	r1, #1
   872e6:	f7ff ff1b 	bl	87120 <_Balloc>
   872ea:	f100 0914 	add.w	r9, r0, #20
   872ee:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   872f2:	45d1      	cmp	r9, sl
   872f4:	9000      	str	r0, [sp, #0]
   872f6:	d205      	bcs.n	87304 <__multiply+0x4c>
   872f8:	464b      	mov	r3, r9
   872fa:	2100      	movs	r1, #0
   872fc:	f843 1b04 	str.w	r1, [r3], #4
   87300:	459a      	cmp	sl, r3
   87302:	d8fb      	bhi.n	872fc <__multiply+0x44>
   87304:	f106 0c14 	add.w	ip, r6, #20
   87308:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   8730c:	f10b 0b14 	add.w	fp, fp, #20
   87310:	459c      	cmp	ip, r3
   87312:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   87316:	d24b      	bcs.n	873b0 <__multiply+0xf8>
   87318:	f8cd a004 	str.w	sl, [sp, #4]
   8731c:	469a      	mov	sl, r3
   8731e:	f8dc 5000 	ldr.w	r5, [ip]
   87322:	b2af      	uxth	r7, r5
   87324:	b1e7      	cbz	r7, 87360 <__multiply+0xa8>
   87326:	464d      	mov	r5, r9
   87328:	465e      	mov	r6, fp
   8732a:	2100      	movs	r1, #0
   8732c:	f856 2b04 	ldr.w	r2, [r6], #4
   87330:	6828      	ldr	r0, [r5, #0]
   87332:	b293      	uxth	r3, r2
   87334:	b284      	uxth	r4, r0
   87336:	0c12      	lsrs	r2, r2, #16
   87338:	fb07 4303 	mla	r3, r7, r3, r4
   8733c:	0c00      	lsrs	r0, r0, #16
   8733e:	fb07 0202 	mla	r2, r7, r2, r0
   87342:	440b      	add	r3, r1
   87344:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   87348:	b29b      	uxth	r3, r3
   8734a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8734e:	45b6      	cmp	lr, r6
   87350:	f845 3b04 	str.w	r3, [r5], #4
   87354:	ea4f 4111 	mov.w	r1, r1, lsr #16
   87358:	d8e8      	bhi.n	8732c <__multiply+0x74>
   8735a:	6029      	str	r1, [r5, #0]
   8735c:	f8dc 5000 	ldr.w	r5, [ip]
   87360:	0c2d      	lsrs	r5, r5, #16
   87362:	d01d      	beq.n	873a0 <__multiply+0xe8>
   87364:	f8d9 3000 	ldr.w	r3, [r9]
   87368:	4648      	mov	r0, r9
   8736a:	461c      	mov	r4, r3
   8736c:	4659      	mov	r1, fp
   8736e:	2200      	movs	r2, #0
   87370:	880e      	ldrh	r6, [r1, #0]
   87372:	0c24      	lsrs	r4, r4, #16
   87374:	fb05 4406 	mla	r4, r5, r6, r4
   87378:	b29b      	uxth	r3, r3
   8737a:	4422      	add	r2, r4
   8737c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   87380:	f840 3b04 	str.w	r3, [r0], #4
   87384:	f851 3b04 	ldr.w	r3, [r1], #4
   87388:	6804      	ldr	r4, [r0, #0]
   8738a:	0c1b      	lsrs	r3, r3, #16
   8738c:	b2a6      	uxth	r6, r4
   8738e:	fb05 6303 	mla	r3, r5, r3, r6
   87392:	458e      	cmp	lr, r1
   87394:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   87398:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8739c:	d8e8      	bhi.n	87370 <__multiply+0xb8>
   8739e:	6003      	str	r3, [r0, #0]
   873a0:	f10c 0c04 	add.w	ip, ip, #4
   873a4:	45e2      	cmp	sl, ip
   873a6:	f109 0904 	add.w	r9, r9, #4
   873aa:	d8b8      	bhi.n	8731e <__multiply+0x66>
   873ac:	f8dd a004 	ldr.w	sl, [sp, #4]
   873b0:	f1b8 0f00 	cmp.w	r8, #0
   873b4:	dd0b      	ble.n	873ce <__multiply+0x116>
   873b6:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   873ba:	f1aa 0a04 	sub.w	sl, sl, #4
   873be:	b11b      	cbz	r3, 873c8 <__multiply+0x110>
   873c0:	e005      	b.n	873ce <__multiply+0x116>
   873c2:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   873c6:	b913      	cbnz	r3, 873ce <__multiply+0x116>
   873c8:	f1b8 0801 	subs.w	r8, r8, #1
   873cc:	d1f9      	bne.n	873c2 <__multiply+0x10a>
   873ce:	9800      	ldr	r0, [sp, #0]
   873d0:	f8c0 8010 	str.w	r8, [r0, #16]
   873d4:	b003      	add	sp, #12
   873d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   873da:	bf00      	nop

000873dc <__pow5mult>:
   873dc:	f012 0303 	ands.w	r3, r2, #3
   873e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   873e4:	4614      	mov	r4, r2
   873e6:	4607      	mov	r7, r0
   873e8:	d12e      	bne.n	87448 <__pow5mult+0x6c>
   873ea:	460d      	mov	r5, r1
   873ec:	10a4      	asrs	r4, r4, #2
   873ee:	d01c      	beq.n	8742a <__pow5mult+0x4e>
   873f0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   873f2:	b396      	cbz	r6, 8745a <__pow5mult+0x7e>
   873f4:	07e3      	lsls	r3, r4, #31
   873f6:	f04f 0800 	mov.w	r8, #0
   873fa:	d406      	bmi.n	8740a <__pow5mult+0x2e>
   873fc:	1064      	asrs	r4, r4, #1
   873fe:	d014      	beq.n	8742a <__pow5mult+0x4e>
   87400:	6830      	ldr	r0, [r6, #0]
   87402:	b1a8      	cbz	r0, 87430 <__pow5mult+0x54>
   87404:	4606      	mov	r6, r0
   87406:	07e3      	lsls	r3, r4, #31
   87408:	d5f8      	bpl.n	873fc <__pow5mult+0x20>
   8740a:	4632      	mov	r2, r6
   8740c:	4629      	mov	r1, r5
   8740e:	4638      	mov	r0, r7
   87410:	f7ff ff52 	bl	872b8 <__multiply>
   87414:	b1b5      	cbz	r5, 87444 <__pow5mult+0x68>
   87416:	686a      	ldr	r2, [r5, #4]
   87418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8741a:	1064      	asrs	r4, r4, #1
   8741c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   87420:	6029      	str	r1, [r5, #0]
   87422:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   87426:	4605      	mov	r5, r0
   87428:	d1ea      	bne.n	87400 <__pow5mult+0x24>
   8742a:	4628      	mov	r0, r5
   8742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87430:	4632      	mov	r2, r6
   87432:	4631      	mov	r1, r6
   87434:	4638      	mov	r0, r7
   87436:	f7ff ff3f 	bl	872b8 <__multiply>
   8743a:	6030      	str	r0, [r6, #0]
   8743c:	f8c0 8000 	str.w	r8, [r0]
   87440:	4606      	mov	r6, r0
   87442:	e7e0      	b.n	87406 <__pow5mult+0x2a>
   87444:	4605      	mov	r5, r0
   87446:	e7d9      	b.n	873fc <__pow5mult+0x20>
   87448:	4a0b      	ldr	r2, [pc, #44]	; (87478 <__pow5mult+0x9c>)
   8744a:	3b01      	subs	r3, #1
   8744c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   87450:	2300      	movs	r3, #0
   87452:	f7ff fe95 	bl	87180 <__multadd>
   87456:	4605      	mov	r5, r0
   87458:	e7c8      	b.n	873ec <__pow5mult+0x10>
   8745a:	2101      	movs	r1, #1
   8745c:	4638      	mov	r0, r7
   8745e:	f7ff fe5f 	bl	87120 <_Balloc>
   87462:	f240 2171 	movw	r1, #625	; 0x271
   87466:	2201      	movs	r2, #1
   87468:	2300      	movs	r3, #0
   8746a:	6141      	str	r1, [r0, #20]
   8746c:	6102      	str	r2, [r0, #16]
   8746e:	4606      	mov	r6, r0
   87470:	64b8      	str	r0, [r7, #72]	; 0x48
   87472:	6003      	str	r3, [r0, #0]
   87474:	e7be      	b.n	873f4 <__pow5mult+0x18>
   87476:	bf00      	nop
   87478:	00088770 	.word	0x00088770

0008747c <__lshift>:
   8747c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   87480:	690b      	ldr	r3, [r1, #16]
   87482:	1154      	asrs	r4, r2, #5
   87484:	eb04 0803 	add.w	r8, r4, r3
   87488:	688b      	ldr	r3, [r1, #8]
   8748a:	f108 0501 	add.w	r5, r8, #1
   8748e:	429d      	cmp	r5, r3
   87490:	460e      	mov	r6, r1
   87492:	4691      	mov	r9, r2
   87494:	4607      	mov	r7, r0
   87496:	6849      	ldr	r1, [r1, #4]
   87498:	dd04      	ble.n	874a4 <__lshift+0x28>
   8749a:	005b      	lsls	r3, r3, #1
   8749c:	429d      	cmp	r5, r3
   8749e:	f101 0101 	add.w	r1, r1, #1
   874a2:	dcfa      	bgt.n	8749a <__lshift+0x1e>
   874a4:	4638      	mov	r0, r7
   874a6:	f7ff fe3b 	bl	87120 <_Balloc>
   874aa:	2c00      	cmp	r4, #0
   874ac:	f100 0314 	add.w	r3, r0, #20
   874b0:	dd06      	ble.n	874c0 <__lshift+0x44>
   874b2:	2100      	movs	r1, #0
   874b4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   874b8:	f843 1b04 	str.w	r1, [r3], #4
   874bc:	429a      	cmp	r2, r3
   874be:	d1fb      	bne.n	874b8 <__lshift+0x3c>
   874c0:	6934      	ldr	r4, [r6, #16]
   874c2:	f106 0114 	add.w	r1, r6, #20
   874c6:	f019 091f 	ands.w	r9, r9, #31
   874ca:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   874ce:	d01d      	beq.n	8750c <__lshift+0x90>
   874d0:	2200      	movs	r2, #0
   874d2:	f1c9 0c20 	rsb	ip, r9, #32
   874d6:	680c      	ldr	r4, [r1, #0]
   874d8:	fa04 f409 	lsl.w	r4, r4, r9
   874dc:	4314      	orrs	r4, r2
   874de:	f843 4b04 	str.w	r4, [r3], #4
   874e2:	f851 2b04 	ldr.w	r2, [r1], #4
   874e6:	458e      	cmp	lr, r1
   874e8:	fa22 f20c 	lsr.w	r2, r2, ip
   874ec:	d8f3      	bhi.n	874d6 <__lshift+0x5a>
   874ee:	601a      	str	r2, [r3, #0]
   874f0:	b10a      	cbz	r2, 874f6 <__lshift+0x7a>
   874f2:	f108 0502 	add.w	r5, r8, #2
   874f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   874f8:	6872      	ldr	r2, [r6, #4]
   874fa:	3d01      	subs	r5, #1
   874fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   87500:	6105      	str	r5, [r0, #16]
   87502:	6031      	str	r1, [r6, #0]
   87504:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   87508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8750c:	3b04      	subs	r3, #4
   8750e:	f851 2b04 	ldr.w	r2, [r1], #4
   87512:	458e      	cmp	lr, r1
   87514:	f843 2f04 	str.w	r2, [r3, #4]!
   87518:	d8f9      	bhi.n	8750e <__lshift+0x92>
   8751a:	e7ec      	b.n	874f6 <__lshift+0x7a>

0008751c <__mcmp>:
   8751c:	b430      	push	{r4, r5}
   8751e:	690b      	ldr	r3, [r1, #16]
   87520:	4605      	mov	r5, r0
   87522:	6900      	ldr	r0, [r0, #16]
   87524:	1ac0      	subs	r0, r0, r3
   87526:	d10f      	bne.n	87548 <__mcmp+0x2c>
   87528:	009b      	lsls	r3, r3, #2
   8752a:	3514      	adds	r5, #20
   8752c:	3114      	adds	r1, #20
   8752e:	4419      	add	r1, r3
   87530:	442b      	add	r3, r5
   87532:	e001      	b.n	87538 <__mcmp+0x1c>
   87534:	429d      	cmp	r5, r3
   87536:	d207      	bcs.n	87548 <__mcmp+0x2c>
   87538:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8753c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   87540:	4294      	cmp	r4, r2
   87542:	d0f7      	beq.n	87534 <__mcmp+0x18>
   87544:	d302      	bcc.n	8754c <__mcmp+0x30>
   87546:	2001      	movs	r0, #1
   87548:	bc30      	pop	{r4, r5}
   8754a:	4770      	bx	lr
   8754c:	f04f 30ff 	mov.w	r0, #4294967295
   87550:	e7fa      	b.n	87548 <__mcmp+0x2c>
   87552:	bf00      	nop

00087554 <__mdiff>:
   87554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87558:	690c      	ldr	r4, [r1, #16]
   8755a:	4689      	mov	r9, r1
   8755c:	6911      	ldr	r1, [r2, #16]
   8755e:	4692      	mov	sl, r2
   87560:	1a64      	subs	r4, r4, r1
   87562:	2c00      	cmp	r4, #0
   87564:	d117      	bne.n	87596 <__mdiff+0x42>
   87566:	0089      	lsls	r1, r1, #2
   87568:	f109 0714 	add.w	r7, r9, #20
   8756c:	f102 0614 	add.w	r6, r2, #20
   87570:	187b      	adds	r3, r7, r1
   87572:	4431      	add	r1, r6
   87574:	e001      	b.n	8757a <__mdiff+0x26>
   87576:	429f      	cmp	r7, r3
   87578:	d265      	bcs.n	87646 <__mdiff+0xf2>
   8757a:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8757e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   87582:	4295      	cmp	r5, r2
   87584:	d0f7      	beq.n	87576 <__mdiff+0x22>
   87586:	d267      	bcs.n	87658 <__mdiff+0x104>
   87588:	464b      	mov	r3, r9
   8758a:	46bb      	mov	fp, r7
   8758c:	46d1      	mov	r9, sl
   8758e:	4637      	mov	r7, r6
   87590:	469a      	mov	sl, r3
   87592:	2401      	movs	r4, #1
   87594:	e005      	b.n	875a2 <__mdiff+0x4e>
   87596:	db61      	blt.n	8765c <__mdiff+0x108>
   87598:	2400      	movs	r4, #0
   8759a:	f109 0714 	add.w	r7, r9, #20
   8759e:	f10a 0b14 	add.w	fp, sl, #20
   875a2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   875a6:	f7ff fdbb 	bl	87120 <_Balloc>
   875aa:	465d      	mov	r5, fp
   875ac:	f04f 0800 	mov.w	r8, #0
   875b0:	f8d9 e010 	ldr.w	lr, [r9, #16]
   875b4:	f8da 3010 	ldr.w	r3, [sl, #16]
   875b8:	463e      	mov	r6, r7
   875ba:	60c4      	str	r4, [r0, #12]
   875bc:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   875c0:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   875c4:	f100 0414 	add.w	r4, r0, #20
   875c8:	f856 9b04 	ldr.w	r9, [r6], #4
   875cc:	f855 2b04 	ldr.w	r2, [r5], #4
   875d0:	fa1f f389 	uxth.w	r3, r9
   875d4:	4443      	add	r3, r8
   875d6:	fa1f f882 	uxth.w	r8, r2
   875da:	0c12      	lsrs	r2, r2, #16
   875dc:	eba3 0308 	sub.w	r3, r3, r8
   875e0:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   875e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   875e8:	b29b      	uxth	r3, r3
   875ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   875ee:	45ac      	cmp	ip, r5
   875f0:	f844 3b04 	str.w	r3, [r4], #4
   875f4:	ea4f 4822 	mov.w	r8, r2, asr #16
   875f8:	d8e6      	bhi.n	875c8 <__mdiff+0x74>
   875fa:	42b7      	cmp	r7, r6
   875fc:	d917      	bls.n	8762e <__mdiff+0xda>
   875fe:	46a4      	mov	ip, r4
   87600:	4635      	mov	r5, r6
   87602:	f855 3b04 	ldr.w	r3, [r5], #4
   87606:	b299      	uxth	r1, r3
   87608:	4441      	add	r1, r8
   8760a:	140a      	asrs	r2, r1, #16
   8760c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   87610:	b289      	uxth	r1, r1
   87612:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   87616:	42af      	cmp	r7, r5
   87618:	f84c 3b04 	str.w	r3, [ip], #4
   8761c:	ea4f 4822 	mov.w	r8, r2, asr #16
   87620:	d8ef      	bhi.n	87602 <__mdiff+0xae>
   87622:	43f6      	mvns	r6, r6
   87624:	4437      	add	r7, r6
   87626:	f027 0703 	bic.w	r7, r7, #3
   8762a:	3704      	adds	r7, #4
   8762c:	443c      	add	r4, r7
   8762e:	3c04      	subs	r4, #4
   87630:	b92b      	cbnz	r3, 8763e <__mdiff+0xea>
   87632:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   87636:	f10e 3eff 	add.w	lr, lr, #4294967295
   8763a:	2b00      	cmp	r3, #0
   8763c:	d0f9      	beq.n	87632 <__mdiff+0xde>
   8763e:	f8c0 e010 	str.w	lr, [r0, #16]
   87642:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87646:	2100      	movs	r1, #0
   87648:	f7ff fd6a 	bl	87120 <_Balloc>
   8764c:	2201      	movs	r2, #1
   8764e:	2300      	movs	r3, #0
   87650:	6102      	str	r2, [r0, #16]
   87652:	6143      	str	r3, [r0, #20]
   87654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87658:	46b3      	mov	fp, r6
   8765a:	e7a2      	b.n	875a2 <__mdiff+0x4e>
   8765c:	464b      	mov	r3, r9
   8765e:	f109 0b14 	add.w	fp, r9, #20
   87662:	f102 0714 	add.w	r7, r2, #20
   87666:	4691      	mov	r9, r2
   87668:	2401      	movs	r4, #1
   8766a:	469a      	mov	sl, r3
   8766c:	e799      	b.n	875a2 <__mdiff+0x4e>
   8766e:	bf00      	nop

00087670 <__d2b>:
   87670:	b5f0      	push	{r4, r5, r6, r7, lr}
   87672:	2101      	movs	r1, #1
   87674:	b083      	sub	sp, #12
   87676:	461c      	mov	r4, r3
   87678:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8767c:	4616      	mov	r6, r2
   8767e:	f7ff fd4f 	bl	87120 <_Balloc>
   87682:	f3c4 0413 	ubfx	r4, r4, #0, #20
   87686:	4607      	mov	r7, r0
   87688:	b10d      	cbz	r5, 8768e <__d2b+0x1e>
   8768a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8768e:	9401      	str	r4, [sp, #4]
   87690:	b306      	cbz	r6, 876d4 <__d2b+0x64>
   87692:	a802      	add	r0, sp, #8
   87694:	f840 6d08 	str.w	r6, [r0, #-8]!
   87698:	f7ff fdd4 	bl	87244 <__lo0bits>
   8769c:	2800      	cmp	r0, #0
   8769e:	d130      	bne.n	87702 <__d2b+0x92>
   876a0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   876a4:	617a      	str	r2, [r7, #20]
   876a6:	2b00      	cmp	r3, #0
   876a8:	bf0c      	ite	eq
   876aa:	2101      	moveq	r1, #1
   876ac:	2102      	movne	r1, #2
   876ae:	61bb      	str	r3, [r7, #24]
   876b0:	6139      	str	r1, [r7, #16]
   876b2:	b9d5      	cbnz	r5, 876ea <__d2b+0x7a>
   876b4:	9a08      	ldr	r2, [sp, #32]
   876b6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   876ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   876be:	6010      	str	r0, [r2, #0]
   876c0:	6918      	ldr	r0, [r3, #16]
   876c2:	f7ff fd9f 	bl	87204 <__hi0bits>
   876c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   876c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   876cc:	6018      	str	r0, [r3, #0]
   876ce:	4638      	mov	r0, r7
   876d0:	b003      	add	sp, #12
   876d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   876d4:	a801      	add	r0, sp, #4
   876d6:	f7ff fdb5 	bl	87244 <__lo0bits>
   876da:	2201      	movs	r2, #1
   876dc:	9b01      	ldr	r3, [sp, #4]
   876de:	4611      	mov	r1, r2
   876e0:	3020      	adds	r0, #32
   876e2:	613a      	str	r2, [r7, #16]
   876e4:	617b      	str	r3, [r7, #20]
   876e6:	2d00      	cmp	r5, #0
   876e8:	d0e4      	beq.n	876b4 <__d2b+0x44>
   876ea:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   876ee:	9a08      	ldr	r2, [sp, #32]
   876f0:	4403      	add	r3, r0
   876f2:	6013      	str	r3, [r2, #0]
   876f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   876f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   876fa:	6018      	str	r0, [r3, #0]
   876fc:	4638      	mov	r0, r7
   876fe:	b003      	add	sp, #12
   87700:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87702:	9b01      	ldr	r3, [sp, #4]
   87704:	f1c0 0220 	rsb	r2, r0, #32
   87708:	9900      	ldr	r1, [sp, #0]
   8770a:	fa03 f202 	lsl.w	r2, r3, r2
   8770e:	430a      	orrs	r2, r1
   87710:	40c3      	lsrs	r3, r0
   87712:	9301      	str	r3, [sp, #4]
   87714:	617a      	str	r2, [r7, #20]
   87716:	e7c6      	b.n	876a6 <__d2b+0x36>

00087718 <_sbrk_r>:
   87718:	b538      	push	{r3, r4, r5, lr}
   8771a:	2300      	movs	r3, #0
   8771c:	4c06      	ldr	r4, [pc, #24]	; (87738 <_sbrk_r+0x20>)
   8771e:	4605      	mov	r5, r0
   87720:	4608      	mov	r0, r1
   87722:	6023      	str	r3, [r4, #0]
   87724:	f7fb ff06 	bl	83534 <_sbrk>
   87728:	1c43      	adds	r3, r0, #1
   8772a:	d000      	beq.n	8772e <_sbrk_r+0x16>
   8772c:	bd38      	pop	{r3, r4, r5, pc}
   8772e:	6823      	ldr	r3, [r4, #0]
   87730:	2b00      	cmp	r3, #0
   87732:	d0fb      	beq.n	8772c <_sbrk_r+0x14>
   87734:	602b      	str	r3, [r5, #0]
   87736:	bd38      	pop	{r3, r4, r5, pc}
   87738:	20070e9c 	.word	0x20070e9c

0008773c <__ssprint_r>:
   8773c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87740:	6893      	ldr	r3, [r2, #8]
   87742:	b083      	sub	sp, #12
   87744:	4690      	mov	r8, r2
   87746:	2b00      	cmp	r3, #0
   87748:	d070      	beq.n	8782c <__ssprint_r+0xf0>
   8774a:	4682      	mov	sl, r0
   8774c:	460c      	mov	r4, r1
   8774e:	6817      	ldr	r7, [r2, #0]
   87750:	688d      	ldr	r5, [r1, #8]
   87752:	6808      	ldr	r0, [r1, #0]
   87754:	e042      	b.n	877dc <__ssprint_r+0xa0>
   87756:	89a3      	ldrh	r3, [r4, #12]
   87758:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8775c:	d02e      	beq.n	877bc <__ssprint_r+0x80>
   8775e:	6965      	ldr	r5, [r4, #20]
   87760:	6921      	ldr	r1, [r4, #16]
   87762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   87766:	eba0 0b01 	sub.w	fp, r0, r1
   8776a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8776e:	f10b 0001 	add.w	r0, fp, #1
   87772:	106d      	asrs	r5, r5, #1
   87774:	4430      	add	r0, r6
   87776:	42a8      	cmp	r0, r5
   87778:	462a      	mov	r2, r5
   8777a:	bf84      	itt	hi
   8777c:	4605      	movhi	r5, r0
   8777e:	462a      	movhi	r2, r5
   87780:	055b      	lsls	r3, r3, #21
   87782:	d538      	bpl.n	877f6 <__ssprint_r+0xba>
   87784:	4611      	mov	r1, r2
   87786:	4650      	mov	r0, sl
   87788:	f7ff f960 	bl	86a4c <_malloc_r>
   8778c:	2800      	cmp	r0, #0
   8778e:	d03c      	beq.n	8780a <__ssprint_r+0xce>
   87790:	465a      	mov	r2, fp
   87792:	6921      	ldr	r1, [r4, #16]
   87794:	9001      	str	r0, [sp, #4]
   87796:	f7ff fc41 	bl	8701c <memcpy>
   8779a:	89a2      	ldrh	r2, [r4, #12]
   8779c:	9b01      	ldr	r3, [sp, #4]
   8779e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   877a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   877a6:	81a2      	strh	r2, [r4, #12]
   877a8:	eba5 020b 	sub.w	r2, r5, fp
   877ac:	eb03 000b 	add.w	r0, r3, fp
   877b0:	6165      	str	r5, [r4, #20]
   877b2:	46b3      	mov	fp, r6
   877b4:	4635      	mov	r5, r6
   877b6:	6123      	str	r3, [r4, #16]
   877b8:	6020      	str	r0, [r4, #0]
   877ba:	60a2      	str	r2, [r4, #8]
   877bc:	465a      	mov	r2, fp
   877be:	4649      	mov	r1, r9
   877c0:	f000 fa18 	bl	87bf4 <memmove>
   877c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   877c8:	68a2      	ldr	r2, [r4, #8]
   877ca:	6820      	ldr	r0, [r4, #0]
   877cc:	1b55      	subs	r5, r2, r5
   877ce:	4458      	add	r0, fp
   877d0:	1b9e      	subs	r6, r3, r6
   877d2:	60a5      	str	r5, [r4, #8]
   877d4:	6020      	str	r0, [r4, #0]
   877d6:	f8c8 6008 	str.w	r6, [r8, #8]
   877da:	b33e      	cbz	r6, 8782c <__ssprint_r+0xf0>
   877dc:	687e      	ldr	r6, [r7, #4]
   877de:	463b      	mov	r3, r7
   877e0:	3708      	adds	r7, #8
   877e2:	2e00      	cmp	r6, #0
   877e4:	d0fa      	beq.n	877dc <__ssprint_r+0xa0>
   877e6:	42ae      	cmp	r6, r5
   877e8:	f8d3 9000 	ldr.w	r9, [r3]
   877ec:	46ab      	mov	fp, r5
   877ee:	d2b2      	bcs.n	87756 <__ssprint_r+0x1a>
   877f0:	4635      	mov	r5, r6
   877f2:	46b3      	mov	fp, r6
   877f4:	e7e2      	b.n	877bc <__ssprint_r+0x80>
   877f6:	4650      	mov	r0, sl
   877f8:	f000 fa60 	bl	87cbc <_realloc_r>
   877fc:	4603      	mov	r3, r0
   877fe:	2800      	cmp	r0, #0
   87800:	d1d2      	bne.n	877a8 <__ssprint_r+0x6c>
   87802:	6921      	ldr	r1, [r4, #16]
   87804:	4650      	mov	r0, sl
   87806:	f000 f8f9 	bl	879fc <_free_r>
   8780a:	230c      	movs	r3, #12
   8780c:	2200      	movs	r2, #0
   8780e:	f04f 30ff 	mov.w	r0, #4294967295
   87812:	f8ca 3000 	str.w	r3, [sl]
   87816:	89a3      	ldrh	r3, [r4, #12]
   87818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8781c:	81a3      	strh	r3, [r4, #12]
   8781e:	f8c8 2008 	str.w	r2, [r8, #8]
   87822:	f8c8 2004 	str.w	r2, [r8, #4]
   87826:	b003      	add	sp, #12
   87828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8782c:	2000      	movs	r0, #0
   8782e:	f8c8 0004 	str.w	r0, [r8, #4]
   87832:	b003      	add	sp, #12
   87834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00087838 <__register_exitproc>:
   87838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8783c:	4d2c      	ldr	r5, [pc, #176]	; (878f0 <__register_exitproc+0xb8>)
   8783e:	4606      	mov	r6, r0
   87840:	6828      	ldr	r0, [r5, #0]
   87842:	4698      	mov	r8, r3
   87844:	460f      	mov	r7, r1
   87846:	4691      	mov	r9, r2
   87848:	f7ff f8fc 	bl	86a44 <__retarget_lock_acquire_recursive>
   8784c:	4b29      	ldr	r3, [pc, #164]	; (878f4 <__register_exitproc+0xbc>)
   8784e:	681c      	ldr	r4, [r3, #0]
   87850:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   87854:	2b00      	cmp	r3, #0
   87856:	d03e      	beq.n	878d6 <__register_exitproc+0x9e>
   87858:	685a      	ldr	r2, [r3, #4]
   8785a:	2a1f      	cmp	r2, #31
   8785c:	dc1c      	bgt.n	87898 <__register_exitproc+0x60>
   8785e:	f102 0e01 	add.w	lr, r2, #1
   87862:	b176      	cbz	r6, 87882 <__register_exitproc+0x4a>
   87864:	2101      	movs	r1, #1
   87866:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8786a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8786e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   87872:	4091      	lsls	r1, r2
   87874:	4308      	orrs	r0, r1
   87876:	2e02      	cmp	r6, #2
   87878:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8787c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   87880:	d023      	beq.n	878ca <__register_exitproc+0x92>
   87882:	3202      	adds	r2, #2
   87884:	f8c3 e004 	str.w	lr, [r3, #4]
   87888:	6828      	ldr	r0, [r5, #0]
   8788a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8788e:	f7ff f8db 	bl	86a48 <__retarget_lock_release_recursive>
   87892:	2000      	movs	r0, #0
   87894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   87898:	4b17      	ldr	r3, [pc, #92]	; (878f8 <__register_exitproc+0xc0>)
   8789a:	b30b      	cbz	r3, 878e0 <__register_exitproc+0xa8>
   8789c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   878a0:	f3af 8000 	nop.w
   878a4:	4603      	mov	r3, r0
   878a6:	b1d8      	cbz	r0, 878e0 <__register_exitproc+0xa8>
   878a8:	2000      	movs	r0, #0
   878aa:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   878ae:	f04f 0e01 	mov.w	lr, #1
   878b2:	6058      	str	r0, [r3, #4]
   878b4:	6019      	str	r1, [r3, #0]
   878b6:	4602      	mov	r2, r0
   878b8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   878bc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   878c0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   878c4:	2e00      	cmp	r6, #0
   878c6:	d0dc      	beq.n	87882 <__register_exitproc+0x4a>
   878c8:	e7cc      	b.n	87864 <__register_exitproc+0x2c>
   878ca:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   878ce:	4301      	orrs	r1, r0
   878d0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   878d4:	e7d5      	b.n	87882 <__register_exitproc+0x4a>
   878d6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   878da:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   878de:	e7bb      	b.n	87858 <__register_exitproc+0x20>
   878e0:	6828      	ldr	r0, [r5, #0]
   878e2:	f7ff f8b1 	bl	86a48 <__retarget_lock_release_recursive>
   878e6:	f04f 30ff 	mov.w	r0, #4294967295
   878ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   878ee:	bf00      	nop
   878f0:	200705d0 	.word	0x200705d0
   878f4:	00088604 	.word	0x00088604
   878f8:	00000000 	.word	0x00000000

000878fc <_calloc_r>:
   878fc:	b510      	push	{r4, lr}
   878fe:	fb02 f101 	mul.w	r1, r2, r1
   87902:	f7ff f8a3 	bl	86a4c <_malloc_r>
   87906:	4604      	mov	r4, r0
   87908:	b1d8      	cbz	r0, 87942 <_calloc_r+0x46>
   8790a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8790e:	f022 0203 	bic.w	r2, r2, #3
   87912:	3a04      	subs	r2, #4
   87914:	2a24      	cmp	r2, #36	; 0x24
   87916:	d818      	bhi.n	8794a <_calloc_r+0x4e>
   87918:	2a13      	cmp	r2, #19
   8791a:	d914      	bls.n	87946 <_calloc_r+0x4a>
   8791c:	2300      	movs	r3, #0
   8791e:	2a1b      	cmp	r2, #27
   87920:	6003      	str	r3, [r0, #0]
   87922:	6043      	str	r3, [r0, #4]
   87924:	d916      	bls.n	87954 <_calloc_r+0x58>
   87926:	2a24      	cmp	r2, #36	; 0x24
   87928:	6083      	str	r3, [r0, #8]
   8792a:	60c3      	str	r3, [r0, #12]
   8792c:	bf11      	iteee	ne
   8792e:	f100 0210 	addne.w	r2, r0, #16
   87932:	6103      	streq	r3, [r0, #16]
   87934:	6143      	streq	r3, [r0, #20]
   87936:	f100 0218 	addeq.w	r2, r0, #24
   8793a:	2300      	movs	r3, #0
   8793c:	6013      	str	r3, [r2, #0]
   8793e:	6053      	str	r3, [r2, #4]
   87940:	6093      	str	r3, [r2, #8]
   87942:	4620      	mov	r0, r4
   87944:	bd10      	pop	{r4, pc}
   87946:	4602      	mov	r2, r0
   87948:	e7f7      	b.n	8793a <_calloc_r+0x3e>
   8794a:	2100      	movs	r1, #0
   8794c:	f7fc fd6a 	bl	84424 <memset>
   87950:	4620      	mov	r0, r4
   87952:	bd10      	pop	{r4, pc}
   87954:	f100 0208 	add.w	r2, r0, #8
   87958:	e7ef      	b.n	8793a <_calloc_r+0x3e>
   8795a:	bf00      	nop

0008795c <_malloc_trim_r>:
   8795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8795e:	460c      	mov	r4, r1
   87960:	4f23      	ldr	r7, [pc, #140]	; (879f0 <_malloc_trim_r+0x94>)
   87962:	4606      	mov	r6, r0
   87964:	f7ff fbd0 	bl	87108 <__malloc_lock>
   87968:	68bb      	ldr	r3, [r7, #8]
   8796a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8796e:	685d      	ldr	r5, [r3, #4]
   87970:	310f      	adds	r1, #15
   87972:	f025 0503 	bic.w	r5, r5, #3
   87976:	4429      	add	r1, r5
   87978:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8797c:	f021 010f 	bic.w	r1, r1, #15
   87980:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   87984:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   87988:	db07      	blt.n	8799a <_malloc_trim_r+0x3e>
   8798a:	2100      	movs	r1, #0
   8798c:	4630      	mov	r0, r6
   8798e:	f7ff fec3 	bl	87718 <_sbrk_r>
   87992:	68bb      	ldr	r3, [r7, #8]
   87994:	442b      	add	r3, r5
   87996:	4298      	cmp	r0, r3
   87998:	d004      	beq.n	879a4 <_malloc_trim_r+0x48>
   8799a:	4630      	mov	r0, r6
   8799c:	f7ff fbba 	bl	87114 <__malloc_unlock>
   879a0:	2000      	movs	r0, #0
   879a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   879a4:	4261      	negs	r1, r4
   879a6:	4630      	mov	r0, r6
   879a8:	f7ff feb6 	bl	87718 <_sbrk_r>
   879ac:	3001      	adds	r0, #1
   879ae:	d00d      	beq.n	879cc <_malloc_trim_r+0x70>
   879b0:	4b10      	ldr	r3, [pc, #64]	; (879f4 <_malloc_trim_r+0x98>)
   879b2:	68ba      	ldr	r2, [r7, #8]
   879b4:	6819      	ldr	r1, [r3, #0]
   879b6:	1b2d      	subs	r5, r5, r4
   879b8:	f045 0501 	orr.w	r5, r5, #1
   879bc:	4630      	mov	r0, r6
   879be:	1b09      	subs	r1, r1, r4
   879c0:	6055      	str	r5, [r2, #4]
   879c2:	6019      	str	r1, [r3, #0]
   879c4:	f7ff fba6 	bl	87114 <__malloc_unlock>
   879c8:	2001      	movs	r0, #1
   879ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   879cc:	2100      	movs	r1, #0
   879ce:	4630      	mov	r0, r6
   879d0:	f7ff fea2 	bl	87718 <_sbrk_r>
   879d4:	68ba      	ldr	r2, [r7, #8]
   879d6:	1a83      	subs	r3, r0, r2
   879d8:	2b0f      	cmp	r3, #15
   879da:	ddde      	ble.n	8799a <_malloc_trim_r+0x3e>
   879dc:	4c06      	ldr	r4, [pc, #24]	; (879f8 <_malloc_trim_r+0x9c>)
   879de:	4905      	ldr	r1, [pc, #20]	; (879f4 <_malloc_trim_r+0x98>)
   879e0:	6824      	ldr	r4, [r4, #0]
   879e2:	f043 0301 	orr.w	r3, r3, #1
   879e6:	1b00      	subs	r0, r0, r4
   879e8:	6053      	str	r3, [r2, #4]
   879ea:	6008      	str	r0, [r1, #0]
   879ec:	e7d5      	b.n	8799a <_malloc_trim_r+0x3e>
   879ee:	bf00      	nop
   879f0:	200705d4 	.word	0x200705d4
   879f4:	20070dd4 	.word	0x20070dd4
   879f8:	200709dc 	.word	0x200709dc

000879fc <_free_r>:
   879fc:	2900      	cmp	r1, #0
   879fe:	d044      	beq.n	87a8a <_free_r+0x8e>
   87a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87a04:	460d      	mov	r5, r1
   87a06:	4680      	mov	r8, r0
   87a08:	f7ff fb7e 	bl	87108 <__malloc_lock>
   87a0c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   87a10:	4969      	ldr	r1, [pc, #420]	; (87bb8 <_free_r+0x1bc>)
   87a12:	f1a5 0408 	sub.w	r4, r5, #8
   87a16:	f027 0301 	bic.w	r3, r7, #1
   87a1a:	18e2      	adds	r2, r4, r3
   87a1c:	688e      	ldr	r6, [r1, #8]
   87a1e:	6850      	ldr	r0, [r2, #4]
   87a20:	42b2      	cmp	r2, r6
   87a22:	f020 0003 	bic.w	r0, r0, #3
   87a26:	d05e      	beq.n	87ae6 <_free_r+0xea>
   87a28:	07fe      	lsls	r6, r7, #31
   87a2a:	6050      	str	r0, [r2, #4]
   87a2c:	d40b      	bmi.n	87a46 <_free_r+0x4a>
   87a2e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   87a32:	f101 0e08 	add.w	lr, r1, #8
   87a36:	1be4      	subs	r4, r4, r7
   87a38:	68a5      	ldr	r5, [r4, #8]
   87a3a:	443b      	add	r3, r7
   87a3c:	4575      	cmp	r5, lr
   87a3e:	d06d      	beq.n	87b1c <_free_r+0x120>
   87a40:	68e7      	ldr	r7, [r4, #12]
   87a42:	60ef      	str	r7, [r5, #12]
   87a44:	60bd      	str	r5, [r7, #8]
   87a46:	1815      	adds	r5, r2, r0
   87a48:	686d      	ldr	r5, [r5, #4]
   87a4a:	07ed      	lsls	r5, r5, #31
   87a4c:	d53e      	bpl.n	87acc <_free_r+0xd0>
   87a4e:	f043 0201 	orr.w	r2, r3, #1
   87a52:	6062      	str	r2, [r4, #4]
   87a54:	50e3      	str	r3, [r4, r3]
   87a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   87a5a:	d217      	bcs.n	87a8c <_free_r+0x90>
   87a5c:	2201      	movs	r2, #1
   87a5e:	08db      	lsrs	r3, r3, #3
   87a60:	1098      	asrs	r0, r3, #2
   87a62:	684d      	ldr	r5, [r1, #4]
   87a64:	4413      	add	r3, r2
   87a66:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   87a6a:	4082      	lsls	r2, r0
   87a6c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   87a70:	432a      	orrs	r2, r5
   87a72:	3808      	subs	r0, #8
   87a74:	60e0      	str	r0, [r4, #12]
   87a76:	60a7      	str	r7, [r4, #8]
   87a78:	604a      	str	r2, [r1, #4]
   87a7a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   87a7e:	60fc      	str	r4, [r7, #12]
   87a80:	4640      	mov	r0, r8
   87a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   87a86:	f7ff bb45 	b.w	87114 <__malloc_unlock>
   87a8a:	4770      	bx	lr
   87a8c:	0a5a      	lsrs	r2, r3, #9
   87a8e:	2a04      	cmp	r2, #4
   87a90:	d852      	bhi.n	87b38 <_free_r+0x13c>
   87a92:	099a      	lsrs	r2, r3, #6
   87a94:	f102 0739 	add.w	r7, r2, #57	; 0x39
   87a98:	00ff      	lsls	r7, r7, #3
   87a9a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   87a9e:	19c8      	adds	r0, r1, r7
   87aa0:	59ca      	ldr	r2, [r1, r7]
   87aa2:	3808      	subs	r0, #8
   87aa4:	4290      	cmp	r0, r2
   87aa6:	d04f      	beq.n	87b48 <_free_r+0x14c>
   87aa8:	6851      	ldr	r1, [r2, #4]
   87aaa:	f021 0103 	bic.w	r1, r1, #3
   87aae:	428b      	cmp	r3, r1
   87ab0:	d232      	bcs.n	87b18 <_free_r+0x11c>
   87ab2:	6892      	ldr	r2, [r2, #8]
   87ab4:	4290      	cmp	r0, r2
   87ab6:	d1f7      	bne.n	87aa8 <_free_r+0xac>
   87ab8:	68c3      	ldr	r3, [r0, #12]
   87aba:	60a0      	str	r0, [r4, #8]
   87abc:	60e3      	str	r3, [r4, #12]
   87abe:	609c      	str	r4, [r3, #8]
   87ac0:	60c4      	str	r4, [r0, #12]
   87ac2:	4640      	mov	r0, r8
   87ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   87ac8:	f7ff bb24 	b.w	87114 <__malloc_unlock>
   87acc:	6895      	ldr	r5, [r2, #8]
   87ace:	4f3b      	ldr	r7, [pc, #236]	; (87bbc <_free_r+0x1c0>)
   87ad0:	4403      	add	r3, r0
   87ad2:	42bd      	cmp	r5, r7
   87ad4:	d040      	beq.n	87b58 <_free_r+0x15c>
   87ad6:	68d0      	ldr	r0, [r2, #12]
   87ad8:	f043 0201 	orr.w	r2, r3, #1
   87adc:	60e8      	str	r0, [r5, #12]
   87ade:	6085      	str	r5, [r0, #8]
   87ae0:	6062      	str	r2, [r4, #4]
   87ae2:	50e3      	str	r3, [r4, r3]
   87ae4:	e7b7      	b.n	87a56 <_free_r+0x5a>
   87ae6:	07ff      	lsls	r7, r7, #31
   87ae8:	4403      	add	r3, r0
   87aea:	d407      	bmi.n	87afc <_free_r+0x100>
   87aec:	f855 5c08 	ldr.w	r5, [r5, #-8]
   87af0:	1b64      	subs	r4, r4, r5
   87af2:	68e2      	ldr	r2, [r4, #12]
   87af4:	68a0      	ldr	r0, [r4, #8]
   87af6:	442b      	add	r3, r5
   87af8:	60c2      	str	r2, [r0, #12]
   87afa:	6090      	str	r0, [r2, #8]
   87afc:	4a30      	ldr	r2, [pc, #192]	; (87bc0 <_free_r+0x1c4>)
   87afe:	f043 0001 	orr.w	r0, r3, #1
   87b02:	6812      	ldr	r2, [r2, #0]
   87b04:	6060      	str	r0, [r4, #4]
   87b06:	4293      	cmp	r3, r2
   87b08:	608c      	str	r4, [r1, #8]
   87b0a:	d3b9      	bcc.n	87a80 <_free_r+0x84>
   87b0c:	4b2d      	ldr	r3, [pc, #180]	; (87bc4 <_free_r+0x1c8>)
   87b0e:	4640      	mov	r0, r8
   87b10:	6819      	ldr	r1, [r3, #0]
   87b12:	f7ff ff23 	bl	8795c <_malloc_trim_r>
   87b16:	e7b3      	b.n	87a80 <_free_r+0x84>
   87b18:	4610      	mov	r0, r2
   87b1a:	e7cd      	b.n	87ab8 <_free_r+0xbc>
   87b1c:	1811      	adds	r1, r2, r0
   87b1e:	6849      	ldr	r1, [r1, #4]
   87b20:	07c9      	lsls	r1, r1, #31
   87b22:	d444      	bmi.n	87bae <_free_r+0x1b2>
   87b24:	6891      	ldr	r1, [r2, #8]
   87b26:	4403      	add	r3, r0
   87b28:	68d2      	ldr	r2, [r2, #12]
   87b2a:	f043 0001 	orr.w	r0, r3, #1
   87b2e:	60ca      	str	r2, [r1, #12]
   87b30:	6091      	str	r1, [r2, #8]
   87b32:	6060      	str	r0, [r4, #4]
   87b34:	50e3      	str	r3, [r4, r3]
   87b36:	e7a3      	b.n	87a80 <_free_r+0x84>
   87b38:	2a14      	cmp	r2, #20
   87b3a:	d816      	bhi.n	87b6a <_free_r+0x16e>
   87b3c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   87b40:	00ff      	lsls	r7, r7, #3
   87b42:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   87b46:	e7aa      	b.n	87a9e <_free_r+0xa2>
   87b48:	2301      	movs	r3, #1
   87b4a:	10aa      	asrs	r2, r5, #2
   87b4c:	684d      	ldr	r5, [r1, #4]
   87b4e:	4093      	lsls	r3, r2
   87b50:	432b      	orrs	r3, r5
   87b52:	604b      	str	r3, [r1, #4]
   87b54:	4603      	mov	r3, r0
   87b56:	e7b0      	b.n	87aba <_free_r+0xbe>
   87b58:	f043 0201 	orr.w	r2, r3, #1
   87b5c:	614c      	str	r4, [r1, #20]
   87b5e:	610c      	str	r4, [r1, #16]
   87b60:	60e5      	str	r5, [r4, #12]
   87b62:	60a5      	str	r5, [r4, #8]
   87b64:	6062      	str	r2, [r4, #4]
   87b66:	50e3      	str	r3, [r4, r3]
   87b68:	e78a      	b.n	87a80 <_free_r+0x84>
   87b6a:	2a54      	cmp	r2, #84	; 0x54
   87b6c:	d806      	bhi.n	87b7c <_free_r+0x180>
   87b6e:	0b1a      	lsrs	r2, r3, #12
   87b70:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   87b74:	00ff      	lsls	r7, r7, #3
   87b76:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   87b7a:	e790      	b.n	87a9e <_free_r+0xa2>
   87b7c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   87b80:	d806      	bhi.n	87b90 <_free_r+0x194>
   87b82:	0bda      	lsrs	r2, r3, #15
   87b84:	f102 0778 	add.w	r7, r2, #120	; 0x78
   87b88:	00ff      	lsls	r7, r7, #3
   87b8a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   87b8e:	e786      	b.n	87a9e <_free_r+0xa2>
   87b90:	f240 5054 	movw	r0, #1364	; 0x554
   87b94:	4282      	cmp	r2, r0
   87b96:	d806      	bhi.n	87ba6 <_free_r+0x1aa>
   87b98:	0c9a      	lsrs	r2, r3, #18
   87b9a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   87b9e:	00ff      	lsls	r7, r7, #3
   87ba0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   87ba4:	e77b      	b.n	87a9e <_free_r+0xa2>
   87ba6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   87baa:	257e      	movs	r5, #126	; 0x7e
   87bac:	e777      	b.n	87a9e <_free_r+0xa2>
   87bae:	f043 0101 	orr.w	r1, r3, #1
   87bb2:	6061      	str	r1, [r4, #4]
   87bb4:	6013      	str	r3, [r2, #0]
   87bb6:	e763      	b.n	87a80 <_free_r+0x84>
   87bb8:	200705d4 	.word	0x200705d4
   87bbc:	200705dc 	.word	0x200705dc
   87bc0:	200709e0 	.word	0x200709e0
   87bc4:	20070e04 	.word	0x20070e04

00087bc8 <__ascii_mbtowc>:
   87bc8:	b082      	sub	sp, #8
   87bca:	b149      	cbz	r1, 87be0 <__ascii_mbtowc+0x18>
   87bcc:	b15a      	cbz	r2, 87be6 <__ascii_mbtowc+0x1e>
   87bce:	b16b      	cbz	r3, 87bec <__ascii_mbtowc+0x24>
   87bd0:	7813      	ldrb	r3, [r2, #0]
   87bd2:	600b      	str	r3, [r1, #0]
   87bd4:	7812      	ldrb	r2, [r2, #0]
   87bd6:	1c10      	adds	r0, r2, #0
   87bd8:	bf18      	it	ne
   87bda:	2001      	movne	r0, #1
   87bdc:	b002      	add	sp, #8
   87bde:	4770      	bx	lr
   87be0:	a901      	add	r1, sp, #4
   87be2:	2a00      	cmp	r2, #0
   87be4:	d1f3      	bne.n	87bce <__ascii_mbtowc+0x6>
   87be6:	4610      	mov	r0, r2
   87be8:	b002      	add	sp, #8
   87bea:	4770      	bx	lr
   87bec:	f06f 0001 	mvn.w	r0, #1
   87bf0:	e7f4      	b.n	87bdc <__ascii_mbtowc+0x14>
   87bf2:	bf00      	nop

00087bf4 <memmove>:
   87bf4:	4288      	cmp	r0, r1
   87bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
   87bf8:	d90d      	bls.n	87c16 <memmove+0x22>
   87bfa:	188b      	adds	r3, r1, r2
   87bfc:	4298      	cmp	r0, r3
   87bfe:	d20a      	bcs.n	87c16 <memmove+0x22>
   87c00:	1884      	adds	r4, r0, r2
   87c02:	2a00      	cmp	r2, #0
   87c04:	d051      	beq.n	87caa <memmove+0xb6>
   87c06:	4622      	mov	r2, r4
   87c08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   87c0c:	4299      	cmp	r1, r3
   87c0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   87c12:	d1f9      	bne.n	87c08 <memmove+0x14>
   87c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87c16:	2a0f      	cmp	r2, #15
   87c18:	d948      	bls.n	87cac <memmove+0xb8>
   87c1a:	ea41 0300 	orr.w	r3, r1, r0
   87c1e:	079b      	lsls	r3, r3, #30
   87c20:	d146      	bne.n	87cb0 <memmove+0xbc>
   87c22:	4615      	mov	r5, r2
   87c24:	f100 0410 	add.w	r4, r0, #16
   87c28:	f101 0310 	add.w	r3, r1, #16
   87c2c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   87c30:	3d10      	subs	r5, #16
   87c32:	f844 6c10 	str.w	r6, [r4, #-16]
   87c36:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   87c3a:	2d0f      	cmp	r5, #15
   87c3c:	f844 6c0c 	str.w	r6, [r4, #-12]
   87c40:	f853 6c08 	ldr.w	r6, [r3, #-8]
   87c44:	f104 0410 	add.w	r4, r4, #16
   87c48:	f844 6c18 	str.w	r6, [r4, #-24]
   87c4c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   87c50:	f103 0310 	add.w	r3, r3, #16
   87c54:	f844 6c14 	str.w	r6, [r4, #-20]
   87c58:	d8e8      	bhi.n	87c2c <memmove+0x38>
   87c5a:	f1a2 0310 	sub.w	r3, r2, #16
   87c5e:	f023 030f 	bic.w	r3, r3, #15
   87c62:	f002 0e0f 	and.w	lr, r2, #15
   87c66:	3310      	adds	r3, #16
   87c68:	f1be 0f03 	cmp.w	lr, #3
   87c6c:	4419      	add	r1, r3
   87c6e:	4403      	add	r3, r0
   87c70:	d921      	bls.n	87cb6 <memmove+0xc2>
   87c72:	460e      	mov	r6, r1
   87c74:	4674      	mov	r4, lr
   87c76:	1f1d      	subs	r5, r3, #4
   87c78:	f856 7b04 	ldr.w	r7, [r6], #4
   87c7c:	3c04      	subs	r4, #4
   87c7e:	2c03      	cmp	r4, #3
   87c80:	f845 7f04 	str.w	r7, [r5, #4]!
   87c84:	d8f8      	bhi.n	87c78 <memmove+0x84>
   87c86:	f1ae 0404 	sub.w	r4, lr, #4
   87c8a:	f024 0403 	bic.w	r4, r4, #3
   87c8e:	3404      	adds	r4, #4
   87c90:	4421      	add	r1, r4
   87c92:	4423      	add	r3, r4
   87c94:	f002 0203 	and.w	r2, r2, #3
   87c98:	b162      	cbz	r2, 87cb4 <memmove+0xc0>
   87c9a:	3b01      	subs	r3, #1
   87c9c:	440a      	add	r2, r1
   87c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   87ca2:	428a      	cmp	r2, r1
   87ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
   87ca8:	d1f9      	bne.n	87c9e <memmove+0xaa>
   87caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87cac:	4603      	mov	r3, r0
   87cae:	e7f3      	b.n	87c98 <memmove+0xa4>
   87cb0:	4603      	mov	r3, r0
   87cb2:	e7f2      	b.n	87c9a <memmove+0xa6>
   87cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87cb6:	4672      	mov	r2, lr
   87cb8:	e7ee      	b.n	87c98 <memmove+0xa4>
   87cba:	bf00      	nop

00087cbc <_realloc_r>:
   87cbc:	2900      	cmp	r1, #0
   87cbe:	f000 8094 	beq.w	87dea <_realloc_r+0x12e>
   87cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87cc6:	460c      	mov	r4, r1
   87cc8:	4615      	mov	r5, r2
   87cca:	b083      	sub	sp, #12
   87ccc:	4680      	mov	r8, r0
   87cce:	f105 060b 	add.w	r6, r5, #11
   87cd2:	f7ff fa19 	bl	87108 <__malloc_lock>
   87cd6:	f854 ec04 	ldr.w	lr, [r4, #-4]
   87cda:	2e16      	cmp	r6, #22
   87cdc:	f02e 0703 	bic.w	r7, lr, #3
   87ce0:	f1a4 0908 	sub.w	r9, r4, #8
   87ce4:	d83c      	bhi.n	87d60 <_realloc_r+0xa4>
   87ce6:	2210      	movs	r2, #16
   87ce8:	4616      	mov	r6, r2
   87cea:	42b5      	cmp	r5, r6
   87cec:	d83d      	bhi.n	87d6a <_realloc_r+0xae>
   87cee:	4297      	cmp	r7, r2
   87cf0:	da43      	bge.n	87d7a <_realloc_r+0xbe>
   87cf2:	4bc6      	ldr	r3, [pc, #792]	; (8800c <_realloc_r+0x350>)
   87cf4:	eb09 0007 	add.w	r0, r9, r7
   87cf8:	6899      	ldr	r1, [r3, #8]
   87cfa:	4288      	cmp	r0, r1
   87cfc:	f000 80c3 	beq.w	87e86 <_realloc_r+0x1ca>
   87d00:	6843      	ldr	r3, [r0, #4]
   87d02:	f023 0101 	bic.w	r1, r3, #1
   87d06:	4401      	add	r1, r0
   87d08:	6849      	ldr	r1, [r1, #4]
   87d0a:	07c9      	lsls	r1, r1, #31
   87d0c:	d54d      	bpl.n	87daa <_realloc_r+0xee>
   87d0e:	f01e 0f01 	tst.w	lr, #1
   87d12:	f000 809b 	beq.w	87e4c <_realloc_r+0x190>
   87d16:	4629      	mov	r1, r5
   87d18:	4640      	mov	r0, r8
   87d1a:	f7fe fe97 	bl	86a4c <_malloc_r>
   87d1e:	4605      	mov	r5, r0
   87d20:	2800      	cmp	r0, #0
   87d22:	d03b      	beq.n	87d9c <_realloc_r+0xe0>
   87d24:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87d28:	f1a0 0208 	sub.w	r2, r0, #8
   87d2c:	f023 0301 	bic.w	r3, r3, #1
   87d30:	444b      	add	r3, r9
   87d32:	429a      	cmp	r2, r3
   87d34:	f000 812b 	beq.w	87f8e <_realloc_r+0x2d2>
   87d38:	1f3a      	subs	r2, r7, #4
   87d3a:	2a24      	cmp	r2, #36	; 0x24
   87d3c:	f200 8118 	bhi.w	87f70 <_realloc_r+0x2b4>
   87d40:	2a13      	cmp	r2, #19
   87d42:	f200 80eb 	bhi.w	87f1c <_realloc_r+0x260>
   87d46:	4603      	mov	r3, r0
   87d48:	4622      	mov	r2, r4
   87d4a:	6811      	ldr	r1, [r2, #0]
   87d4c:	6019      	str	r1, [r3, #0]
   87d4e:	6851      	ldr	r1, [r2, #4]
   87d50:	6059      	str	r1, [r3, #4]
   87d52:	6892      	ldr	r2, [r2, #8]
   87d54:	609a      	str	r2, [r3, #8]
   87d56:	4621      	mov	r1, r4
   87d58:	4640      	mov	r0, r8
   87d5a:	f7ff fe4f 	bl	879fc <_free_r>
   87d5e:	e01d      	b.n	87d9c <_realloc_r+0xe0>
   87d60:	f026 0607 	bic.w	r6, r6, #7
   87d64:	2e00      	cmp	r6, #0
   87d66:	4632      	mov	r2, r6
   87d68:	dabf      	bge.n	87cea <_realloc_r+0x2e>
   87d6a:	2500      	movs	r5, #0
   87d6c:	230c      	movs	r3, #12
   87d6e:	4628      	mov	r0, r5
   87d70:	f8c8 3000 	str.w	r3, [r8]
   87d74:	b003      	add	sp, #12
   87d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87d7a:	4625      	mov	r5, r4
   87d7c:	1bbb      	subs	r3, r7, r6
   87d7e:	2b0f      	cmp	r3, #15
   87d80:	f8d9 2004 	ldr.w	r2, [r9, #4]
   87d84:	d81d      	bhi.n	87dc2 <_realloc_r+0x106>
   87d86:	f002 0201 	and.w	r2, r2, #1
   87d8a:	433a      	orrs	r2, r7
   87d8c:	eb09 0107 	add.w	r1, r9, r7
   87d90:	f8c9 2004 	str.w	r2, [r9, #4]
   87d94:	684b      	ldr	r3, [r1, #4]
   87d96:	f043 0301 	orr.w	r3, r3, #1
   87d9a:	604b      	str	r3, [r1, #4]
   87d9c:	4640      	mov	r0, r8
   87d9e:	f7ff f9b9 	bl	87114 <__malloc_unlock>
   87da2:	4628      	mov	r0, r5
   87da4:	b003      	add	sp, #12
   87da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87daa:	f023 0303 	bic.w	r3, r3, #3
   87dae:	18f9      	adds	r1, r7, r3
   87db0:	4291      	cmp	r1, r2
   87db2:	db1d      	blt.n	87df0 <_realloc_r+0x134>
   87db4:	68c3      	ldr	r3, [r0, #12]
   87db6:	6882      	ldr	r2, [r0, #8]
   87db8:	4625      	mov	r5, r4
   87dba:	60d3      	str	r3, [r2, #12]
   87dbc:	460f      	mov	r7, r1
   87dbe:	609a      	str	r2, [r3, #8]
   87dc0:	e7dc      	b.n	87d7c <_realloc_r+0xc0>
   87dc2:	f002 0201 	and.w	r2, r2, #1
   87dc6:	eb09 0106 	add.w	r1, r9, r6
   87dca:	f043 0301 	orr.w	r3, r3, #1
   87dce:	4332      	orrs	r2, r6
   87dd0:	f8c9 2004 	str.w	r2, [r9, #4]
   87dd4:	444f      	add	r7, r9
   87dd6:	604b      	str	r3, [r1, #4]
   87dd8:	687b      	ldr	r3, [r7, #4]
   87dda:	3108      	adds	r1, #8
   87ddc:	f043 0301 	orr.w	r3, r3, #1
   87de0:	607b      	str	r3, [r7, #4]
   87de2:	4640      	mov	r0, r8
   87de4:	f7ff fe0a 	bl	879fc <_free_r>
   87de8:	e7d8      	b.n	87d9c <_realloc_r+0xe0>
   87dea:	4611      	mov	r1, r2
   87dec:	f7fe be2e 	b.w	86a4c <_malloc_r>
   87df0:	f01e 0f01 	tst.w	lr, #1
   87df4:	d18f      	bne.n	87d16 <_realloc_r+0x5a>
   87df6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87dfa:	eba9 0a01 	sub.w	sl, r9, r1
   87dfe:	f8da 1004 	ldr.w	r1, [sl, #4]
   87e02:	f021 0103 	bic.w	r1, r1, #3
   87e06:	440b      	add	r3, r1
   87e08:	443b      	add	r3, r7
   87e0a:	4293      	cmp	r3, r2
   87e0c:	db26      	blt.n	87e5c <_realloc_r+0x1a0>
   87e0e:	4655      	mov	r5, sl
   87e10:	68c1      	ldr	r1, [r0, #12]
   87e12:	6880      	ldr	r0, [r0, #8]
   87e14:	1f3a      	subs	r2, r7, #4
   87e16:	60c1      	str	r1, [r0, #12]
   87e18:	6088      	str	r0, [r1, #8]
   87e1a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87e1e:	f8da 100c 	ldr.w	r1, [sl, #12]
   87e22:	2a24      	cmp	r2, #36	; 0x24
   87e24:	60c1      	str	r1, [r0, #12]
   87e26:	6088      	str	r0, [r1, #8]
   87e28:	d826      	bhi.n	87e78 <_realloc_r+0x1bc>
   87e2a:	2a13      	cmp	r2, #19
   87e2c:	f240 8081 	bls.w	87f32 <_realloc_r+0x276>
   87e30:	6821      	ldr	r1, [r4, #0]
   87e32:	2a1b      	cmp	r2, #27
   87e34:	f8ca 1008 	str.w	r1, [sl, #8]
   87e38:	6861      	ldr	r1, [r4, #4]
   87e3a:	f8ca 100c 	str.w	r1, [sl, #12]
   87e3e:	f200 80ad 	bhi.w	87f9c <_realloc_r+0x2e0>
   87e42:	f104 0008 	add.w	r0, r4, #8
   87e46:	f10a 0210 	add.w	r2, sl, #16
   87e4a:	e074      	b.n	87f36 <_realloc_r+0x27a>
   87e4c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   87e50:	eba9 0a03 	sub.w	sl, r9, r3
   87e54:	f8da 1004 	ldr.w	r1, [sl, #4]
   87e58:	f021 0103 	bic.w	r1, r1, #3
   87e5c:	187b      	adds	r3, r7, r1
   87e5e:	4293      	cmp	r3, r2
   87e60:	f6ff af59 	blt.w	87d16 <_realloc_r+0x5a>
   87e64:	4655      	mov	r5, sl
   87e66:	f8da 100c 	ldr.w	r1, [sl, #12]
   87e6a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87e6e:	1f3a      	subs	r2, r7, #4
   87e70:	2a24      	cmp	r2, #36	; 0x24
   87e72:	60c1      	str	r1, [r0, #12]
   87e74:	6088      	str	r0, [r1, #8]
   87e76:	d9d8      	bls.n	87e2a <_realloc_r+0x16e>
   87e78:	4621      	mov	r1, r4
   87e7a:	4628      	mov	r0, r5
   87e7c:	461f      	mov	r7, r3
   87e7e:	46d1      	mov	r9, sl
   87e80:	f7ff feb8 	bl	87bf4 <memmove>
   87e84:	e77a      	b.n	87d7c <_realloc_r+0xc0>
   87e86:	6841      	ldr	r1, [r0, #4]
   87e88:	f106 0010 	add.w	r0, r6, #16
   87e8c:	f021 0b03 	bic.w	fp, r1, #3
   87e90:	44bb      	add	fp, r7
   87e92:	4583      	cmp	fp, r0
   87e94:	da58      	bge.n	87f48 <_realloc_r+0x28c>
   87e96:	f01e 0f01 	tst.w	lr, #1
   87e9a:	f47f af3c 	bne.w	87d16 <_realloc_r+0x5a>
   87e9e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87ea2:	eba9 0a01 	sub.w	sl, r9, r1
   87ea6:	f8da 1004 	ldr.w	r1, [sl, #4]
   87eaa:	f021 0103 	bic.w	r1, r1, #3
   87eae:	448b      	add	fp, r1
   87eb0:	4558      	cmp	r0, fp
   87eb2:	dcd3      	bgt.n	87e5c <_realloc_r+0x1a0>
   87eb4:	4655      	mov	r5, sl
   87eb6:	f8da 100c 	ldr.w	r1, [sl, #12]
   87eba:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87ebe:	1f3a      	subs	r2, r7, #4
   87ec0:	2a24      	cmp	r2, #36	; 0x24
   87ec2:	60c1      	str	r1, [r0, #12]
   87ec4:	6088      	str	r0, [r1, #8]
   87ec6:	f200 808d 	bhi.w	87fe4 <_realloc_r+0x328>
   87eca:	2a13      	cmp	r2, #19
   87ecc:	f240 8087 	bls.w	87fde <_realloc_r+0x322>
   87ed0:	6821      	ldr	r1, [r4, #0]
   87ed2:	2a1b      	cmp	r2, #27
   87ed4:	f8ca 1008 	str.w	r1, [sl, #8]
   87ed8:	6861      	ldr	r1, [r4, #4]
   87eda:	f8ca 100c 	str.w	r1, [sl, #12]
   87ede:	f200 8088 	bhi.w	87ff2 <_realloc_r+0x336>
   87ee2:	f104 0108 	add.w	r1, r4, #8
   87ee6:	f10a 0210 	add.w	r2, sl, #16
   87eea:	6808      	ldr	r0, [r1, #0]
   87eec:	6010      	str	r0, [r2, #0]
   87eee:	6848      	ldr	r0, [r1, #4]
   87ef0:	6050      	str	r0, [r2, #4]
   87ef2:	6889      	ldr	r1, [r1, #8]
   87ef4:	6091      	str	r1, [r2, #8]
   87ef6:	ebab 0206 	sub.w	r2, fp, r6
   87efa:	eb0a 0106 	add.w	r1, sl, r6
   87efe:	f042 0201 	orr.w	r2, r2, #1
   87f02:	6099      	str	r1, [r3, #8]
   87f04:	604a      	str	r2, [r1, #4]
   87f06:	f8da 3004 	ldr.w	r3, [sl, #4]
   87f0a:	4640      	mov	r0, r8
   87f0c:	f003 0301 	and.w	r3, r3, #1
   87f10:	431e      	orrs	r6, r3
   87f12:	f8ca 6004 	str.w	r6, [sl, #4]
   87f16:	f7ff f8fd 	bl	87114 <__malloc_unlock>
   87f1a:	e742      	b.n	87da2 <_realloc_r+0xe6>
   87f1c:	6823      	ldr	r3, [r4, #0]
   87f1e:	2a1b      	cmp	r2, #27
   87f20:	6003      	str	r3, [r0, #0]
   87f22:	6863      	ldr	r3, [r4, #4]
   87f24:	6043      	str	r3, [r0, #4]
   87f26:	d827      	bhi.n	87f78 <_realloc_r+0x2bc>
   87f28:	f100 0308 	add.w	r3, r0, #8
   87f2c:	f104 0208 	add.w	r2, r4, #8
   87f30:	e70b      	b.n	87d4a <_realloc_r+0x8e>
   87f32:	4620      	mov	r0, r4
   87f34:	462a      	mov	r2, r5
   87f36:	6801      	ldr	r1, [r0, #0]
   87f38:	461f      	mov	r7, r3
   87f3a:	6011      	str	r1, [r2, #0]
   87f3c:	6841      	ldr	r1, [r0, #4]
   87f3e:	46d1      	mov	r9, sl
   87f40:	6051      	str	r1, [r2, #4]
   87f42:	6883      	ldr	r3, [r0, #8]
   87f44:	6093      	str	r3, [r2, #8]
   87f46:	e719      	b.n	87d7c <_realloc_r+0xc0>
   87f48:	ebab 0b06 	sub.w	fp, fp, r6
   87f4c:	eb09 0106 	add.w	r1, r9, r6
   87f50:	f04b 0201 	orr.w	r2, fp, #1
   87f54:	6099      	str	r1, [r3, #8]
   87f56:	604a      	str	r2, [r1, #4]
   87f58:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87f5c:	4640      	mov	r0, r8
   87f5e:	f003 0301 	and.w	r3, r3, #1
   87f62:	431e      	orrs	r6, r3
   87f64:	f844 6c04 	str.w	r6, [r4, #-4]
   87f68:	f7ff f8d4 	bl	87114 <__malloc_unlock>
   87f6c:	4625      	mov	r5, r4
   87f6e:	e718      	b.n	87da2 <_realloc_r+0xe6>
   87f70:	4621      	mov	r1, r4
   87f72:	f7ff fe3f 	bl	87bf4 <memmove>
   87f76:	e6ee      	b.n	87d56 <_realloc_r+0x9a>
   87f78:	68a3      	ldr	r3, [r4, #8]
   87f7a:	2a24      	cmp	r2, #36	; 0x24
   87f7c:	6083      	str	r3, [r0, #8]
   87f7e:	68e3      	ldr	r3, [r4, #12]
   87f80:	60c3      	str	r3, [r0, #12]
   87f82:	d018      	beq.n	87fb6 <_realloc_r+0x2fa>
   87f84:	f100 0310 	add.w	r3, r0, #16
   87f88:	f104 0210 	add.w	r2, r4, #16
   87f8c:	e6dd      	b.n	87d4a <_realloc_r+0x8e>
   87f8e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   87f92:	4625      	mov	r5, r4
   87f94:	f023 0303 	bic.w	r3, r3, #3
   87f98:	441f      	add	r7, r3
   87f9a:	e6ef      	b.n	87d7c <_realloc_r+0xc0>
   87f9c:	68a1      	ldr	r1, [r4, #8]
   87f9e:	2a24      	cmp	r2, #36	; 0x24
   87fa0:	f8ca 1010 	str.w	r1, [sl, #16]
   87fa4:	68e1      	ldr	r1, [r4, #12]
   87fa6:	f8ca 1014 	str.w	r1, [sl, #20]
   87faa:	d00d      	beq.n	87fc8 <_realloc_r+0x30c>
   87fac:	f104 0010 	add.w	r0, r4, #16
   87fb0:	f10a 0218 	add.w	r2, sl, #24
   87fb4:	e7bf      	b.n	87f36 <_realloc_r+0x27a>
   87fb6:	6922      	ldr	r2, [r4, #16]
   87fb8:	f100 0318 	add.w	r3, r0, #24
   87fbc:	6102      	str	r2, [r0, #16]
   87fbe:	6961      	ldr	r1, [r4, #20]
   87fc0:	f104 0218 	add.w	r2, r4, #24
   87fc4:	6141      	str	r1, [r0, #20]
   87fc6:	e6c0      	b.n	87d4a <_realloc_r+0x8e>
   87fc8:	6922      	ldr	r2, [r4, #16]
   87fca:	f104 0018 	add.w	r0, r4, #24
   87fce:	f8ca 2018 	str.w	r2, [sl, #24]
   87fd2:	6961      	ldr	r1, [r4, #20]
   87fd4:	f10a 0220 	add.w	r2, sl, #32
   87fd8:	f8ca 101c 	str.w	r1, [sl, #28]
   87fdc:	e7ab      	b.n	87f36 <_realloc_r+0x27a>
   87fde:	4621      	mov	r1, r4
   87fe0:	462a      	mov	r2, r5
   87fe2:	e782      	b.n	87eea <_realloc_r+0x22e>
   87fe4:	4621      	mov	r1, r4
   87fe6:	4628      	mov	r0, r5
   87fe8:	9301      	str	r3, [sp, #4]
   87fea:	f7ff fe03 	bl	87bf4 <memmove>
   87fee:	9b01      	ldr	r3, [sp, #4]
   87ff0:	e781      	b.n	87ef6 <_realloc_r+0x23a>
   87ff2:	68a1      	ldr	r1, [r4, #8]
   87ff4:	2a24      	cmp	r2, #36	; 0x24
   87ff6:	f8ca 1010 	str.w	r1, [sl, #16]
   87ffa:	68e1      	ldr	r1, [r4, #12]
   87ffc:	f8ca 1014 	str.w	r1, [sl, #20]
   88000:	d006      	beq.n	88010 <_realloc_r+0x354>
   88002:	f104 0110 	add.w	r1, r4, #16
   88006:	f10a 0218 	add.w	r2, sl, #24
   8800a:	e76e      	b.n	87eea <_realloc_r+0x22e>
   8800c:	200705d4 	.word	0x200705d4
   88010:	6922      	ldr	r2, [r4, #16]
   88012:	f104 0118 	add.w	r1, r4, #24
   88016:	f8ca 2018 	str.w	r2, [sl, #24]
   8801a:	6960      	ldr	r0, [r4, #20]
   8801c:	f10a 0220 	add.w	r2, sl, #32
   88020:	f8ca 001c 	str.w	r0, [sl, #28]
   88024:	e761      	b.n	87eea <_realloc_r+0x22e>
   88026:	bf00      	nop

00088028 <__ascii_wctomb>:
   88028:	b119      	cbz	r1, 88032 <__ascii_wctomb+0xa>
   8802a:	2aff      	cmp	r2, #255	; 0xff
   8802c:	d803      	bhi.n	88036 <__ascii_wctomb+0xe>
   8802e:	700a      	strb	r2, [r1, #0]
   88030:	2101      	movs	r1, #1
   88032:	4608      	mov	r0, r1
   88034:	4770      	bx	lr
   88036:	238a      	movs	r3, #138	; 0x8a
   88038:	f04f 31ff 	mov.w	r1, #4294967295
   8803c:	6003      	str	r3, [r0, #0]
   8803e:	e7f8      	b.n	88032 <__ascii_wctomb+0xa>

00088040 <__gedf2>:
   88040:	f04f 3cff 	mov.w	ip, #4294967295
   88044:	e006      	b.n	88054 <__cmpdf2+0x4>
   88046:	bf00      	nop

00088048 <__ledf2>:
   88048:	f04f 0c01 	mov.w	ip, #1
   8804c:	e002      	b.n	88054 <__cmpdf2+0x4>
   8804e:	bf00      	nop

00088050 <__cmpdf2>:
   88050:	f04f 0c01 	mov.w	ip, #1
   88054:	f84d cd04 	str.w	ip, [sp, #-4]!
   88058:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8805c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88060:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88064:	bf18      	it	ne
   88066:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8806a:	d01b      	beq.n	880a4 <__cmpdf2+0x54>
   8806c:	b001      	add	sp, #4
   8806e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   88072:	bf0c      	ite	eq
   88074:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   88078:	ea91 0f03 	teqne	r1, r3
   8807c:	bf02      	ittt	eq
   8807e:	ea90 0f02 	teqeq	r0, r2
   88082:	2000      	moveq	r0, #0
   88084:	4770      	bxeq	lr
   88086:	f110 0f00 	cmn.w	r0, #0
   8808a:	ea91 0f03 	teq	r1, r3
   8808e:	bf58      	it	pl
   88090:	4299      	cmppl	r1, r3
   88092:	bf08      	it	eq
   88094:	4290      	cmpeq	r0, r2
   88096:	bf2c      	ite	cs
   88098:	17d8      	asrcs	r0, r3, #31
   8809a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8809e:	f040 0001 	orr.w	r0, r0, #1
   880a2:	4770      	bx	lr
   880a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   880a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   880ac:	d102      	bne.n	880b4 <__cmpdf2+0x64>
   880ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   880b2:	d107      	bne.n	880c4 <__cmpdf2+0x74>
   880b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   880b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   880bc:	d1d6      	bne.n	8806c <__cmpdf2+0x1c>
   880be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   880c2:	d0d3      	beq.n	8806c <__cmpdf2+0x1c>
   880c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   880c8:	4770      	bx	lr
   880ca:	bf00      	nop

000880cc <__aeabi_cdrcmple>:
   880cc:	4684      	mov	ip, r0
   880ce:	4610      	mov	r0, r2
   880d0:	4662      	mov	r2, ip
   880d2:	468c      	mov	ip, r1
   880d4:	4619      	mov	r1, r3
   880d6:	4663      	mov	r3, ip
   880d8:	e000      	b.n	880dc <__aeabi_cdcmpeq>
   880da:	bf00      	nop

000880dc <__aeabi_cdcmpeq>:
   880dc:	b501      	push	{r0, lr}
   880de:	f7ff ffb7 	bl	88050 <__cmpdf2>
   880e2:	2800      	cmp	r0, #0
   880e4:	bf48      	it	mi
   880e6:	f110 0f00 	cmnmi.w	r0, #0
   880ea:	bd01      	pop	{r0, pc}

000880ec <__aeabi_dcmpeq>:
   880ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   880f0:	f7ff fff4 	bl	880dc <__aeabi_cdcmpeq>
   880f4:	bf0c      	ite	eq
   880f6:	2001      	moveq	r0, #1
   880f8:	2000      	movne	r0, #0
   880fa:	f85d fb08 	ldr.w	pc, [sp], #8
   880fe:	bf00      	nop

00088100 <__aeabi_dcmplt>:
   88100:	f84d ed08 	str.w	lr, [sp, #-8]!
   88104:	f7ff ffea 	bl	880dc <__aeabi_cdcmpeq>
   88108:	bf34      	ite	cc
   8810a:	2001      	movcc	r0, #1
   8810c:	2000      	movcs	r0, #0
   8810e:	f85d fb08 	ldr.w	pc, [sp], #8
   88112:	bf00      	nop

00088114 <__aeabi_dcmple>:
   88114:	f84d ed08 	str.w	lr, [sp, #-8]!
   88118:	f7ff ffe0 	bl	880dc <__aeabi_cdcmpeq>
   8811c:	bf94      	ite	ls
   8811e:	2001      	movls	r0, #1
   88120:	2000      	movhi	r0, #0
   88122:	f85d fb08 	ldr.w	pc, [sp], #8
   88126:	bf00      	nop

00088128 <__aeabi_dcmpge>:
   88128:	f84d ed08 	str.w	lr, [sp, #-8]!
   8812c:	f7ff ffce 	bl	880cc <__aeabi_cdrcmple>
   88130:	bf94      	ite	ls
   88132:	2001      	movls	r0, #1
   88134:	2000      	movhi	r0, #0
   88136:	f85d fb08 	ldr.w	pc, [sp], #8
   8813a:	bf00      	nop

0008813c <__aeabi_dcmpgt>:
   8813c:	f84d ed08 	str.w	lr, [sp, #-8]!
   88140:	f7ff ffc4 	bl	880cc <__aeabi_cdrcmple>
   88144:	bf34      	ite	cc
   88146:	2001      	movcc	r0, #1
   88148:	2000      	movcs	r0, #0
   8814a:	f85d fb08 	ldr.w	pc, [sp], #8
   8814e:	bf00      	nop

00088150 <__aeabi_dcmpun>:
   88150:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88154:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88158:	d102      	bne.n	88160 <__aeabi_dcmpun+0x10>
   8815a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8815e:	d10a      	bne.n	88176 <__aeabi_dcmpun+0x26>
   88160:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88164:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88168:	d102      	bne.n	88170 <__aeabi_dcmpun+0x20>
   8816a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8816e:	d102      	bne.n	88176 <__aeabi_dcmpun+0x26>
   88170:	f04f 0000 	mov.w	r0, #0
   88174:	4770      	bx	lr
   88176:	f04f 0001 	mov.w	r0, #1
   8817a:	4770      	bx	lr

0008817c <__aeabi_d2iz>:
   8817c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   88180:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   88184:	d215      	bcs.n	881b2 <__aeabi_d2iz+0x36>
   88186:	d511      	bpl.n	881ac <__aeabi_d2iz+0x30>
   88188:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8818c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   88190:	d912      	bls.n	881b8 <__aeabi_d2iz+0x3c>
   88192:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   88196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8819a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8819e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   881a2:	fa23 f002 	lsr.w	r0, r3, r2
   881a6:	bf18      	it	ne
   881a8:	4240      	negne	r0, r0
   881aa:	4770      	bx	lr
   881ac:	f04f 0000 	mov.w	r0, #0
   881b0:	4770      	bx	lr
   881b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   881b6:	d105      	bne.n	881c4 <__aeabi_d2iz+0x48>
   881b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   881bc:	bf08      	it	eq
   881be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   881c2:	4770      	bx	lr
   881c4:	f04f 0000 	mov.w	r0, #0
   881c8:	4770      	bx	lr
   881ca:	bf00      	nop

000881cc <__aeabi_uldivmod>:
   881cc:	b953      	cbnz	r3, 881e4 <__aeabi_uldivmod+0x18>
   881ce:	b94a      	cbnz	r2, 881e4 <__aeabi_uldivmod+0x18>
   881d0:	2900      	cmp	r1, #0
   881d2:	bf08      	it	eq
   881d4:	2800      	cmpeq	r0, #0
   881d6:	bf1c      	itt	ne
   881d8:	f04f 31ff 	movne.w	r1, #4294967295
   881dc:	f04f 30ff 	movne.w	r0, #4294967295
   881e0:	f000 b97a 	b.w	884d8 <__aeabi_idiv0>
   881e4:	f1ad 0c08 	sub.w	ip, sp, #8
   881e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   881ec:	f000 f806 	bl	881fc <__udivmoddi4>
   881f0:	f8dd e004 	ldr.w	lr, [sp, #4]
   881f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   881f8:	b004      	add	sp, #16
   881fa:	4770      	bx	lr

000881fc <__udivmoddi4>:
   881fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   88200:	468c      	mov	ip, r1
   88202:	460e      	mov	r6, r1
   88204:	4604      	mov	r4, r0
   88206:	9d08      	ldr	r5, [sp, #32]
   88208:	2b00      	cmp	r3, #0
   8820a:	d150      	bne.n	882ae <__udivmoddi4+0xb2>
   8820c:	428a      	cmp	r2, r1
   8820e:	4617      	mov	r7, r2
   88210:	d96c      	bls.n	882ec <__udivmoddi4+0xf0>
   88212:	fab2 fe82 	clz	lr, r2
   88216:	f1be 0f00 	cmp.w	lr, #0
   8821a:	d00b      	beq.n	88234 <__udivmoddi4+0x38>
   8821c:	f1ce 0c20 	rsb	ip, lr, #32
   88220:	fa01 f60e 	lsl.w	r6, r1, lr
   88224:	fa20 fc0c 	lsr.w	ip, r0, ip
   88228:	fa02 f70e 	lsl.w	r7, r2, lr
   8822c:	ea4c 0c06 	orr.w	ip, ip, r6
   88230:	fa00 f40e 	lsl.w	r4, r0, lr
   88234:	0c3a      	lsrs	r2, r7, #16
   88236:	fbbc f9f2 	udiv	r9, ip, r2
   8823a:	b2bb      	uxth	r3, r7
   8823c:	fb02 cc19 	mls	ip, r2, r9, ip
   88240:	fb09 fa03 	mul.w	sl, r9, r3
   88244:	ea4f 4814 	mov.w	r8, r4, lsr #16
   88248:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   8824c:	45b2      	cmp	sl, r6
   8824e:	d90a      	bls.n	88266 <__udivmoddi4+0x6a>
   88250:	19f6      	adds	r6, r6, r7
   88252:	f109 31ff 	add.w	r1, r9, #4294967295
   88256:	f080 8125 	bcs.w	884a4 <__udivmoddi4+0x2a8>
   8825a:	45b2      	cmp	sl, r6
   8825c:	f240 8122 	bls.w	884a4 <__udivmoddi4+0x2a8>
   88260:	f1a9 0902 	sub.w	r9, r9, #2
   88264:	443e      	add	r6, r7
   88266:	eba6 060a 	sub.w	r6, r6, sl
   8826a:	fbb6 f0f2 	udiv	r0, r6, r2
   8826e:	fb02 6610 	mls	r6, r2, r0, r6
   88272:	fb00 f303 	mul.w	r3, r0, r3
   88276:	b2a4      	uxth	r4, r4
   88278:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8827c:	42a3      	cmp	r3, r4
   8827e:	d909      	bls.n	88294 <__udivmoddi4+0x98>
   88280:	19e4      	adds	r4, r4, r7
   88282:	f100 32ff 	add.w	r2, r0, #4294967295
   88286:	f080 810b 	bcs.w	884a0 <__udivmoddi4+0x2a4>
   8828a:	42a3      	cmp	r3, r4
   8828c:	f240 8108 	bls.w	884a0 <__udivmoddi4+0x2a4>
   88290:	3802      	subs	r0, #2
   88292:	443c      	add	r4, r7
   88294:	2100      	movs	r1, #0
   88296:	1ae4      	subs	r4, r4, r3
   88298:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8829c:	2d00      	cmp	r5, #0
   8829e:	d062      	beq.n	88366 <__udivmoddi4+0x16a>
   882a0:	2300      	movs	r3, #0
   882a2:	fa24 f40e 	lsr.w	r4, r4, lr
   882a6:	602c      	str	r4, [r5, #0]
   882a8:	606b      	str	r3, [r5, #4]
   882aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   882ae:	428b      	cmp	r3, r1
   882b0:	d907      	bls.n	882c2 <__udivmoddi4+0xc6>
   882b2:	2d00      	cmp	r5, #0
   882b4:	d055      	beq.n	88362 <__udivmoddi4+0x166>
   882b6:	2100      	movs	r1, #0
   882b8:	e885 0041 	stmia.w	r5, {r0, r6}
   882bc:	4608      	mov	r0, r1
   882be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   882c2:	fab3 f183 	clz	r1, r3
   882c6:	2900      	cmp	r1, #0
   882c8:	f040 808f 	bne.w	883ea <__udivmoddi4+0x1ee>
   882cc:	42b3      	cmp	r3, r6
   882ce:	d302      	bcc.n	882d6 <__udivmoddi4+0xda>
   882d0:	4282      	cmp	r2, r0
   882d2:	f200 80fc 	bhi.w	884ce <__udivmoddi4+0x2d2>
   882d6:	1a84      	subs	r4, r0, r2
   882d8:	eb66 0603 	sbc.w	r6, r6, r3
   882dc:	2001      	movs	r0, #1
   882de:	46b4      	mov	ip, r6
   882e0:	2d00      	cmp	r5, #0
   882e2:	d040      	beq.n	88366 <__udivmoddi4+0x16a>
   882e4:	e885 1010 	stmia.w	r5, {r4, ip}
   882e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   882ec:	b912      	cbnz	r2, 882f4 <__udivmoddi4+0xf8>
   882ee:	2701      	movs	r7, #1
   882f0:	fbb7 f7f2 	udiv	r7, r7, r2
   882f4:	fab7 fe87 	clz	lr, r7
   882f8:	f1be 0f00 	cmp.w	lr, #0
   882fc:	d135      	bne.n	8836a <__udivmoddi4+0x16e>
   882fe:	2101      	movs	r1, #1
   88300:	1bf6      	subs	r6, r6, r7
   88302:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   88306:	fa1f f887 	uxth.w	r8, r7
   8830a:	fbb6 f2fc 	udiv	r2, r6, ip
   8830e:	fb0c 6612 	mls	r6, ip, r2, r6
   88312:	fb08 f002 	mul.w	r0, r8, r2
   88316:	0c23      	lsrs	r3, r4, #16
   88318:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   8831c:	42b0      	cmp	r0, r6
   8831e:	d907      	bls.n	88330 <__udivmoddi4+0x134>
   88320:	19f6      	adds	r6, r6, r7
   88322:	f102 33ff 	add.w	r3, r2, #4294967295
   88326:	d202      	bcs.n	8832e <__udivmoddi4+0x132>
   88328:	42b0      	cmp	r0, r6
   8832a:	f200 80d2 	bhi.w	884d2 <__udivmoddi4+0x2d6>
   8832e:	461a      	mov	r2, r3
   88330:	1a36      	subs	r6, r6, r0
   88332:	fbb6 f0fc 	udiv	r0, r6, ip
   88336:	fb0c 6610 	mls	r6, ip, r0, r6
   8833a:	fb08 f800 	mul.w	r8, r8, r0
   8833e:	b2a3      	uxth	r3, r4
   88340:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   88344:	45a0      	cmp	r8, r4
   88346:	d907      	bls.n	88358 <__udivmoddi4+0x15c>
   88348:	19e4      	adds	r4, r4, r7
   8834a:	f100 33ff 	add.w	r3, r0, #4294967295
   8834e:	d202      	bcs.n	88356 <__udivmoddi4+0x15a>
   88350:	45a0      	cmp	r8, r4
   88352:	f200 80b9 	bhi.w	884c8 <__udivmoddi4+0x2cc>
   88356:	4618      	mov	r0, r3
   88358:	eba4 0408 	sub.w	r4, r4, r8
   8835c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   88360:	e79c      	b.n	8829c <__udivmoddi4+0xa0>
   88362:	4629      	mov	r1, r5
   88364:	4628      	mov	r0, r5
   88366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8836a:	fa07 f70e 	lsl.w	r7, r7, lr
   8836e:	f1ce 0320 	rsb	r3, lr, #32
   88372:	fa26 f203 	lsr.w	r2, r6, r3
   88376:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8837a:	fbb2 f1fc 	udiv	r1, r2, ip
   8837e:	fa1f f887 	uxth.w	r8, r7
   88382:	fb0c 2211 	mls	r2, ip, r1, r2
   88386:	fa06 f60e 	lsl.w	r6, r6, lr
   8838a:	fa20 f303 	lsr.w	r3, r0, r3
   8838e:	fb01 f908 	mul.w	r9, r1, r8
   88392:	4333      	orrs	r3, r6
   88394:	0c1e      	lsrs	r6, r3, #16
   88396:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8839a:	45b1      	cmp	r9, r6
   8839c:	fa00 f40e 	lsl.w	r4, r0, lr
   883a0:	d909      	bls.n	883b6 <__udivmoddi4+0x1ba>
   883a2:	19f6      	adds	r6, r6, r7
   883a4:	f101 32ff 	add.w	r2, r1, #4294967295
   883a8:	f080 808c 	bcs.w	884c4 <__udivmoddi4+0x2c8>
   883ac:	45b1      	cmp	r9, r6
   883ae:	f240 8089 	bls.w	884c4 <__udivmoddi4+0x2c8>
   883b2:	3902      	subs	r1, #2
   883b4:	443e      	add	r6, r7
   883b6:	eba6 0609 	sub.w	r6, r6, r9
   883ba:	fbb6 f0fc 	udiv	r0, r6, ip
   883be:	fb0c 6210 	mls	r2, ip, r0, r6
   883c2:	fb00 f908 	mul.w	r9, r0, r8
   883c6:	b29e      	uxth	r6, r3
   883c8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   883cc:	45b1      	cmp	r9, r6
   883ce:	d907      	bls.n	883e0 <__udivmoddi4+0x1e4>
   883d0:	19f6      	adds	r6, r6, r7
   883d2:	f100 33ff 	add.w	r3, r0, #4294967295
   883d6:	d271      	bcs.n	884bc <__udivmoddi4+0x2c0>
   883d8:	45b1      	cmp	r9, r6
   883da:	d96f      	bls.n	884bc <__udivmoddi4+0x2c0>
   883dc:	3802      	subs	r0, #2
   883de:	443e      	add	r6, r7
   883e0:	eba6 0609 	sub.w	r6, r6, r9
   883e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   883e8:	e78f      	b.n	8830a <__udivmoddi4+0x10e>
   883ea:	f1c1 0720 	rsb	r7, r1, #32
   883ee:	fa22 f807 	lsr.w	r8, r2, r7
   883f2:	408b      	lsls	r3, r1
   883f4:	ea48 0303 	orr.w	r3, r8, r3
   883f8:	fa26 f407 	lsr.w	r4, r6, r7
   883fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   88400:	fbb4 f9fe 	udiv	r9, r4, lr
   88404:	fa1f fc83 	uxth.w	ip, r3
   88408:	fb0e 4419 	mls	r4, lr, r9, r4
   8840c:	408e      	lsls	r6, r1
   8840e:	fa20 f807 	lsr.w	r8, r0, r7
   88412:	fb09 fa0c 	mul.w	sl, r9, ip
   88416:	ea48 0806 	orr.w	r8, r8, r6
   8841a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8841e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   88422:	45a2      	cmp	sl, r4
   88424:	fa02 f201 	lsl.w	r2, r2, r1
   88428:	fa00 f601 	lsl.w	r6, r0, r1
   8842c:	d908      	bls.n	88440 <__udivmoddi4+0x244>
   8842e:	18e4      	adds	r4, r4, r3
   88430:	f109 30ff 	add.w	r0, r9, #4294967295
   88434:	d244      	bcs.n	884c0 <__udivmoddi4+0x2c4>
   88436:	45a2      	cmp	sl, r4
   88438:	d942      	bls.n	884c0 <__udivmoddi4+0x2c4>
   8843a:	f1a9 0902 	sub.w	r9, r9, #2
   8843e:	441c      	add	r4, r3
   88440:	eba4 040a 	sub.w	r4, r4, sl
   88444:	fbb4 f0fe 	udiv	r0, r4, lr
   88448:	fb0e 4410 	mls	r4, lr, r0, r4
   8844c:	fb00 fc0c 	mul.w	ip, r0, ip
   88450:	fa1f f888 	uxth.w	r8, r8
   88454:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   88458:	45a4      	cmp	ip, r4
   8845a:	d907      	bls.n	8846c <__udivmoddi4+0x270>
   8845c:	18e4      	adds	r4, r4, r3
   8845e:	f100 3eff 	add.w	lr, r0, #4294967295
   88462:	d229      	bcs.n	884b8 <__udivmoddi4+0x2bc>
   88464:	45a4      	cmp	ip, r4
   88466:	d927      	bls.n	884b8 <__udivmoddi4+0x2bc>
   88468:	3802      	subs	r0, #2
   8846a:	441c      	add	r4, r3
   8846c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   88470:	fba0 8902 	umull	r8, r9, r0, r2
   88474:	eba4 0c0c 	sub.w	ip, r4, ip
   88478:	45cc      	cmp	ip, r9
   8847a:	46c2      	mov	sl, r8
   8847c:	46ce      	mov	lr, r9
   8847e:	d315      	bcc.n	884ac <__udivmoddi4+0x2b0>
   88480:	d012      	beq.n	884a8 <__udivmoddi4+0x2ac>
   88482:	b155      	cbz	r5, 8849a <__udivmoddi4+0x29e>
   88484:	ebb6 030a 	subs.w	r3, r6, sl
   88488:	eb6c 060e 	sbc.w	r6, ip, lr
   8848c:	fa06 f707 	lsl.w	r7, r6, r7
   88490:	40cb      	lsrs	r3, r1
   88492:	431f      	orrs	r7, r3
   88494:	40ce      	lsrs	r6, r1
   88496:	602f      	str	r7, [r5, #0]
   88498:	606e      	str	r6, [r5, #4]
   8849a:	2100      	movs	r1, #0
   8849c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   884a0:	4610      	mov	r0, r2
   884a2:	e6f7      	b.n	88294 <__udivmoddi4+0x98>
   884a4:	4689      	mov	r9, r1
   884a6:	e6de      	b.n	88266 <__udivmoddi4+0x6a>
   884a8:	4546      	cmp	r6, r8
   884aa:	d2ea      	bcs.n	88482 <__udivmoddi4+0x286>
   884ac:	ebb8 0a02 	subs.w	sl, r8, r2
   884b0:	eb69 0e03 	sbc.w	lr, r9, r3
   884b4:	3801      	subs	r0, #1
   884b6:	e7e4      	b.n	88482 <__udivmoddi4+0x286>
   884b8:	4670      	mov	r0, lr
   884ba:	e7d7      	b.n	8846c <__udivmoddi4+0x270>
   884bc:	4618      	mov	r0, r3
   884be:	e78f      	b.n	883e0 <__udivmoddi4+0x1e4>
   884c0:	4681      	mov	r9, r0
   884c2:	e7bd      	b.n	88440 <__udivmoddi4+0x244>
   884c4:	4611      	mov	r1, r2
   884c6:	e776      	b.n	883b6 <__udivmoddi4+0x1ba>
   884c8:	3802      	subs	r0, #2
   884ca:	443c      	add	r4, r7
   884cc:	e744      	b.n	88358 <__udivmoddi4+0x15c>
   884ce:	4608      	mov	r0, r1
   884d0:	e706      	b.n	882e0 <__udivmoddi4+0xe4>
   884d2:	3a02      	subs	r2, #2
   884d4:	443e      	add	r6, r7
   884d6:	e72b      	b.n	88330 <__udivmoddi4+0x134>

000884d8 <__aeabi_idiv0>:
   884d8:	4770      	bx	lr
   884da:	bf00      	nop
   884dc:	000f4240 	.word	0x000f4240
   884e0:	000000c0 	.word	0x000000c0
	...
   884ec:	69442020 	.word	0x69442020
   884f0:	74636572 	.word	0x74636572
   884f4:	3a6e6f69 	.word	0x3a6e6f69
   884f8:	2e332520 	.word	0x2e332520
   884fc:	20206631 	.word	0x20206631
   88500:	00000000 	.word	0x00000000
   88504:	696c6163 	.word	0x696c6163
   88508:	74617262 	.word	0x74617262
   8850c:	6f632065 	.word	0x6f632065
   88510:	7361706d 	.word	0x7361706d
   88514:	00000073 	.word	0x00000073
   88518:	69442020 	.word	0x69442020
   8851c:	74636572 	.word	0x74636572
   88520:	3a6e6f69 	.word	0x3a6e6f69
   88524:	64312520 	.word	0x64312520
   88528:	00002020 	.word	0x00002020
   8852c:	74756873 	.word	0x74756873
   88530:	676e6974 	.word	0x676e6974
   88534:	776f6420 	.word	0x776f6420
   88538:	2e2e2e6e 	.word	0x2e2e2e6e
   8853c:	00000000 	.word	0x00000000
   88540:	666e6f63 	.word	0x666e6f63
   88544:	206d7269 	.word	0x206d7269
   88548:	74756873 	.word	0x74756873
   8854c:	6e776f64 	.word	0x6e776f64
   88550:	0000003f 	.word	0x0000003f
   88554:	20202020 	.word	0x20202020
   88558:	534f6f6e 	.word	0x534f6f6e
   8855c:	454e4f20 	.word	0x454e4f20
   88560:	00000000 	.word	0x00000000
   88564:	74614d20 	.word	0x74614d20
   88568:	00006863 	.word	0x00006863
   8856c:	6e655320 	.word	0x6e655320
   88570:	73726f73 	.word	0x73726f73
   88574:	00000000 	.word	0x00000000
   88578:	74655320 	.word	0x74655320
   8857c:	676e6974 	.word	0x676e6974
   88580:	00000073 	.word	0x00000073
   88584:	00088554 	.word	0x00088554
   88588:	00088564 	.word	0x00088564
   8858c:	0008856c 	.word	0x0008856c
   88590:	00088578 	.word	0x00088578
   88594:	6c614220 	.word	0x6c614220
   88598:	0000006c 	.word	0x0000006c
   8859c:	6d6f4320 	.word	0x6d6f4320
   885a0:	73736170 	.word	0x73736170
   885a4:	00000000 	.word	0x00000000
   885a8:	6e694c20 	.word	0x6e694c20
   885ac:	00000065 	.word	0x00000065
   885b0:	00000020 	.word	0x00000020
   885b4:	00088594 	.word	0x00088594
   885b8:	0008859c 	.word	0x0008859c
   885bc:	000885a8 	.word	0x000885a8
   885c0:	000885b0 	.word	0x000885b0
   885c4:	000885b0 	.word	0x000885b0
   885c8:	000885b0 	.word	0x000885b0
   885cc:	000885b0 	.word	0x000885b0
   885d0:	000885b0 	.word	0x000885b0
   885d4:	0000003e 	.word	0x0000003e
   885d8:	25753325 	.word	0x25753325
   885dc:	00000025 	.word	0x00000025
   885e0:	75322520 	.word	0x75322520
   885e4:	00002525 	.word	0x00002525
   885e8:	31252020 	.word	0x31252020
   885ec:	00252575 	.word	0x00252575
   885f0:	746f6f62 	.word	0x746f6f62
   885f4:	20676e69 	.word	0x20676e69
   885f8:	534f6f6e 	.word	0x534f6f6e
   885fc:	00202020 	.word	0x00202020
   88600:	0000002e 	.word	0x0000002e

00088604 <_global_impure_ptr>:
   88604:	200701a8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   88614:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   88624:	46454443 00000000 33323130 37363534     CDEF....01234567
   88634:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   88644:	0000296c 00000030                       l)..0...

0008864c <blanks.7223>:
   8864c:	20202020 20202020 20202020 20202020                     

0008865c <zeroes.7224>:
   8865c:	30303030 30303030 30303030 30303030     0000000000000000
   8866c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8867c:	00000000                                ....

00088680 <__mprec_bigtens>:
   88680:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   88690:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   886a0:	7f73bf3c 75154fdd                       <.s..O.u

000886a8 <__mprec_tens>:
   886a8:	00000000 3ff00000 00000000 40240000     .......?......$@
   886b8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   886c8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   886d8:	00000000 412e8480 00000000 416312d0     .......A......cA
   886e8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   886f8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   88708:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   88718:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   88728:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   88738:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   88748:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   88758:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   88768:	79d99db4 44ea7843                       ...yCx.D

00088770 <p05.6055>:
   88770:	00000005 00000019 0000007d 00000043     ........}...C...
   88780:	49534f50 00000058 0000002e              POSIX.......

0008878c <_ctype_>:
   8878c:	20202000 20202020 28282020 20282828     .         ((((( 
   8879c:	20202020 20202020 20202020 20202020                     
   887ac:	10108820 10101010 10101010 10101010      ...............
   887bc:	04040410 04040404 10040404 10101010     ................
   887cc:	41411010 41414141 01010101 01010101     ..AAAAAA........
   887dc:	01010101 01010101 01010101 10101010     ................
   887ec:	42421010 42424242 02020202 02020202     ..BBBBBB........
   887fc:	02020202 02020202 02020202 10101010     ................
   8880c:	00000020 00000000 00000000 00000000      ...............
	...

00088890 <_init>:
   88890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88892:	bf00      	nop
   88894:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88896:	bc08      	pop	{r3}
   88898:	469e      	mov	lr, r3
   8889a:	4770      	bx	lr

0008889c <__init_array_start>:
   8889c:	00085a69 	.word	0x00085a69

000888a0 <__frame_dummy_init_array_entry>:
   888a0:	00080119                                ....

000888a4 <_fini>:
   888a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   888a6:	bf00      	nop
   888a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   888aa:	bc08      	pop	{r3}
   888ac:	469e      	mov	lr, r3
   888ae:	4770      	bx	lr

000888b0 <__fini_array_start>:
   888b0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007019c 	.word	0x2007019c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <print_menu>:
2007018c:	00000101                                         .

2007018d <allow_leds>:
2007018d:	02000001                                         ...

20070190 <menu_info>:
20070190:	04020202 03010101 01010101              ............

2007019c <SystemCoreClock>:
2007019c:	003d0900                                ..=.

200701a0 <update_dots>:
200701a0:	00000001                                ....

200701a4 <_impure_ptr>:
200701a4:	200701a8                                ... 

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	20070e78                                x.. 

200705d4 <__malloc_av_>:
	...
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 

200709dc <__malloc_sbrk_base>:
200709dc:	ffffffff                                ....

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__global_locale>:
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00000043 00000000 00000000 00000000     C...............
	...
20070ac4:	00088029 00087bc9 00000000 0008878c     )....{..........
20070ad4:	00088788 00088628 00088628 00088628     ....(...(...(...
20070ae4:	00088628 00088628 00088628 00088628     (...(...(...(...
20070af4:	00088628 00088628 ffffffff ffffffff     (...(...........
20070b04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
