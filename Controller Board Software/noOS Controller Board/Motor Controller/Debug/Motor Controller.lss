
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000080bc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000880bc  000880bc  000180bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b50  20070000  000880c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000050c  20070b50  00088c14  00020b50  2**2
                  ALLOC
  4 .stack        00002004  2007105c  00089120  00020b50  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b79  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015aaf  00000000  00000000  00020bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e41  00000000  00000000  00036681  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006ad8  00000000  00000000  000394c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000bd0  00000000  00000000  0003ff9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b38  00000000  00000000  00040b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006c01  00000000  00000000  000416a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fd7e  00000000  00000000  000482a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00067ece  00000000  00000000  00058021  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003d40  00000000  00000000  000bfef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	60 30 07 20 d1 2c 08 00 c9 2c 08 00 c9 2c 08 00     `0. .,...,...,..
   80010:	c9 2c 08 00 c9 2c 08 00 c9 2c 08 00 00 00 00 00     .,...,...,......
	...
   8002c:	c9 2c 08 00 c9 2c 08 00 00 00 00 00 c9 2c 08 00     .,...,.......,..
   8003c:	ed 1e 08 00 c9 2c 08 00 c9 2c 08 00 c9 2c 08 00     .....,...,...,..
   8004c:	c9 2c 08 00 c9 2c 08 00 c9 2c 08 00 c9 2c 08 00     .,...,...,...,..
   8005c:	c9 2c 08 00 c9 2c 08 00 c9 2c 08 00 00 00 00 00     .,...,...,......
   8006c:	c9 2c 08 00 c9 2c 08 00 c9 2c 08 00 c9 2c 08 00     .,...,...,...,..
	...
   80084:	c9 2c 08 00 c9 2c 08 00 c9 2c 08 00 c9 2c 08 00     .,...,...,...,..
   80094:	c9 2c 08 00 1d 0b 08 00 c9 2c 08 00 c9 2c 08 00     .,.......,...,..
   800a4:	00 00 00 00 c9 2c 08 00 c9 2c 08 00 c9 2c 08 00     .....,...,...,..
   800b4:	c9 2c 08 00 c9 2c 08 00 c9 2c 08 00 c9 2c 08 00     .,...,...,...,..
   800c4:	c9 2c 08 00 c9 2c 08 00 c9 2c 08 00 c9 2c 08 00     .,...,...,...,..
   800d4:	c9 2c 08 00 c9 2c 08 00 75 07 08 00 c9 2c 08 00     .,...,..u....,..
   800e4:	c9 2c 08 00 c9 2c 08 00 c9 2c 08 00 c9 2c 08 00     .,...,...,...,..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b50 	.word	0x20070b50
   80110:	00000000 	.word	0x00000000
   80114:	000880c4 	.word	0x000880c4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000880c4 	.word	0x000880c4
   80154:	20070b54 	.word	0x20070b54
   80158:	000880c4 	.word	0x000880c4
   8015c:	00000000 	.word	0x00000000

00080160 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   80160:	b580      	push	{r7, lr}
   80162:	b082      	sub	sp, #8
   80164:	af00      	add	r7, sp, #0
   80166:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   80168:	6878      	ldr	r0, [r7, #4]
   8016a:	4b04      	ldr	r3, [pc, #16]	; (8017c <usart_spi_enable+0x1c>)
   8016c:	4798      	blx	r3
	usart_enable_rx(p_usart);
   8016e:	6878      	ldr	r0, [r7, #4]
   80170:	4b03      	ldr	r3, [pc, #12]	; (80180 <usart_spi_enable+0x20>)
   80172:	4798      	blx	r3
}
   80174:	bf00      	nop
   80176:	3708      	adds	r7, #8
   80178:	46bd      	mov	sp, r7
   8017a:	bd80      	pop	{r7, pc}
   8017c:	000803d1 	.word	0x000803d1
   80180:	00080419 	.word	0x00080419

00080184 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   80184:	b580      	push	{r7, lr}
   80186:	b082      	sub	sp, #8
   80188:	af00      	add	r7, sp, #0
   8018a:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   8018c:	6878      	ldr	r0, [r7, #4]
   8018e:	4b04      	ldr	r3, [pc, #16]	; (801a0 <usart_spi_disable+0x1c>)
   80190:	4798      	blx	r3
	usart_disable_rx(p_usart);
   80192:	6878      	ldr	r0, [r7, #4]
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <usart_spi_disable+0x20>)
   80196:	4798      	blx	r3
}
   80198:	bf00      	nop
   8019a:	3708      	adds	r7, #8
   8019c:	46bd      	mov	sp, r7
   8019e:	bd80      	pop	{r7, pc}
   801a0:	000803e9 	.word	0x000803e9
   801a4:	00080431 	.word	0x00080431

000801a8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801a8:	b480      	push	{r7}
   801aa:	b085      	sub	sp, #20
   801ac:	af00      	add	r7, sp, #0
   801ae:	60f8      	str	r0, [r7, #12]
   801b0:	60b9      	str	r1, [r7, #8]
   801b2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801b4:	68bb      	ldr	r3, [r7, #8]
   801b6:	2b00      	cmp	r3, #0
   801b8:	d007      	beq.n	801ca <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   801ba:	68bb      	ldr	r3, [r7, #8]
   801bc:	681a      	ldr	r2, [r3, #0]
   801be:	68fb      	ldr	r3, [r7, #12]
   801c0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   801c2:	68bb      	ldr	r3, [r7, #8]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	68fb      	ldr	r3, [r7, #12]
   801c8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   801ca:	687b      	ldr	r3, [r7, #4]
   801cc:	2b00      	cmp	r3, #0
   801ce:	d007      	beq.n	801e0 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	681a      	ldr	r2, [r3, #0]
   801d4:	68fb      	ldr	r3, [r7, #12]
   801d6:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   801d8:	687b      	ldr	r3, [r7, #4]
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	68fb      	ldr	r3, [r7, #12]
   801de:	61da      	str	r2, [r3, #28]
	}
}
   801e0:	bf00      	nop
   801e2:	3714      	adds	r7, #20
   801e4:	46bd      	mov	sp, r7
   801e6:	bc80      	pop	{r7}
   801e8:	4770      	bx	lr

000801ea <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   801ea:	b480      	push	{r7}
   801ec:	b083      	sub	sp, #12
   801ee:	af00      	add	r7, sp, #0
   801f0:	6078      	str	r0, [r7, #4]
   801f2:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   801f4:	683a      	ldr	r2, [r7, #0]
   801f6:	f240 1301 	movw	r3, #257	; 0x101
   801fa:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   801fc:	687a      	ldr	r2, [r7, #4]
   801fe:	6213      	str	r3, [r2, #32]
}
   80200:	bf00      	nop
   80202:	370c      	adds	r7, #12
   80204:	46bd      	mov	sp, r7
   80206:	bc80      	pop	{r7}
   80208:	4770      	bx	lr

0008020a <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8020a:	b480      	push	{r7}
   8020c:	b083      	sub	sp, #12
   8020e:	af00      	add	r7, sp, #0
   80210:	6078      	str	r0, [r7, #4]
   80212:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   80214:	683a      	ldr	r2, [r7, #0]
   80216:	f240 2302 	movw	r3, #514	; 0x202
   8021a:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8021c:	687a      	ldr	r2, [r7, #4]
   8021e:	6213      	str	r3, [r2, #32]
}
   80220:	bf00      	nop
   80222:	370c      	adds	r7, #12
   80224:	46bd      	mov	sp, r7
   80226:	bc80      	pop	{r7}
   80228:	4770      	bx	lr

0008022a <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8022a:	b480      	push	{r7}
   8022c:	b087      	sub	sp, #28
   8022e:	af00      	add	r7, sp, #0
   80230:	60f8      	str	r0, [r7, #12]
   80232:	60b9      	str	r1, [r7, #8]
   80234:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   80236:	68bb      	ldr	r3, [r7, #8]
   80238:	085a      	lsrs	r2, r3, #1
   8023a:	687b      	ldr	r3, [r7, #4]
   8023c:	441a      	add	r2, r3
   8023e:	68bb      	ldr	r3, [r7, #8]
   80240:	fbb2 f3f3 	udiv	r3, r2, r3
   80244:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   80246:	697b      	ldr	r3, [r7, #20]
   80248:	2b03      	cmp	r3, #3
   8024a:	d903      	bls.n	80254 <usart_set_spi_master_baudrate+0x2a>
   8024c:	697b      	ldr	r3, [r7, #20]
   8024e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   80252:	d301      	bcc.n	80258 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   80254:	2301      	movs	r3, #1
   80256:	e003      	b.n	80260 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   80258:	68fb      	ldr	r3, [r7, #12]
   8025a:	697a      	ldr	r2, [r7, #20]
   8025c:	621a      	str	r2, [r3, #32]

	return 0;
   8025e:	2300      	movs	r3, #0
}
   80260:	4618      	mov	r0, r3
   80262:	371c      	adds	r7, #28
   80264:	46bd      	mov	sp, r7
   80266:	bc80      	pop	{r7}
   80268:	4770      	bx	lr
	...

0008026c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8026c:	b580      	push	{r7, lr}
   8026e:	b082      	sub	sp, #8
   80270:	af00      	add	r7, sp, #0
   80272:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   80274:	6878      	ldr	r0, [r7, #4]
   80276:	4b0d      	ldr	r3, [pc, #52]	; (802ac <usart_reset+0x40>)
   80278:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8027a:	687b      	ldr	r3, [r7, #4]
   8027c:	2200      	movs	r2, #0
   8027e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   80280:	687b      	ldr	r3, [r7, #4]
   80282:	2200      	movs	r2, #0
   80284:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80286:	687b      	ldr	r3, [r7, #4]
   80288:	2200      	movs	r2, #0
   8028a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8028c:	6878      	ldr	r0, [r7, #4]
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <usart_reset+0x44>)
   80290:	4798      	blx	r3
	usart_reset_rx(p_usart);
   80292:	6878      	ldr	r0, [r7, #4]
   80294:	4b07      	ldr	r3, [pc, #28]	; (802b4 <usart_reset+0x48>)
   80296:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   80298:	6878      	ldr	r0, [r7, #4]
   8029a:	4b07      	ldr	r3, [pc, #28]	; (802b8 <usart_reset+0x4c>)
   8029c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8029e:	6878      	ldr	r0, [r7, #4]
   802a0:	4b06      	ldr	r3, [pc, #24]	; (802bc <usart_reset+0x50>)
   802a2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   802a4:	bf00      	nop
   802a6:	3708      	adds	r7, #8
   802a8:	46bd      	mov	sp, r7
   802aa:	bd80      	pop	{r7, pc}
   802ac:	000804c9 	.word	0x000804c9
   802b0:	00080401 	.word	0x00080401
   802b4:	00080449 	.word	0x00080449
   802b8:	00080461 	.word	0x00080461
   802bc:	0008047b 	.word	0x0008047b

000802c0 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   802c0:	b580      	push	{r7, lr}
   802c2:	b084      	sub	sp, #16
   802c4:	af00      	add	r7, sp, #0
   802c6:	60f8      	str	r0, [r7, #12]
   802c8:	60b9      	str	r1, [r7, #8]
   802ca:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   802cc:	68f8      	ldr	r0, [r7, #12]
   802ce:	4b3d      	ldr	r3, [pc, #244]	; (803c4 <usart_init_spi_master+0x104>)
   802d0:	4798      	blx	r3

	ul_reg_val = 0;
   802d2:	4b3d      	ldr	r3, [pc, #244]	; (803c8 <usart_init_spi_master+0x108>)
   802d4:	2200      	movs	r2, #0
   802d6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   802d8:	68bb      	ldr	r3, [r7, #8]
   802da:	2b00      	cmp	r3, #0
   802dc:	d00d      	beq.n	802fa <usart_init_spi_master+0x3a>
   802de:	68bb      	ldr	r3, [r7, #8]
   802e0:	689b      	ldr	r3, [r3, #8]
   802e2:	2b03      	cmp	r3, #3
   802e4:	d809      	bhi.n	802fa <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   802e6:	68bb      	ldr	r3, [r7, #8]
   802e8:	681b      	ldr	r3, [r3, #0]
   802ea:	687a      	ldr	r2, [r7, #4]
   802ec:	4619      	mov	r1, r3
   802ee:	68f8      	ldr	r0, [r7, #12]
   802f0:	4b36      	ldr	r3, [pc, #216]	; (803cc <usart_init_spi_master+0x10c>)
   802f2:	4798      	blx	r3
   802f4:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   802f6:	2b00      	cmp	r3, #0
   802f8:	d001      	beq.n	802fe <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   802fa:	2301      	movs	r3, #1
   802fc:	e05d      	b.n	803ba <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   802fe:	68bb      	ldr	r3, [r7, #8]
   80300:	685a      	ldr	r2, [r3, #4]
   80302:	4b31      	ldr	r3, [pc, #196]	; (803c8 <usart_init_spi_master+0x108>)
   80304:	681b      	ldr	r3, [r3, #0]
   80306:	4313      	orrs	r3, r2
   80308:	4a2f      	ldr	r2, [pc, #188]	; (803c8 <usart_init_spi_master+0x108>)
   8030a:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   8030c:	68bb      	ldr	r3, [r7, #8]
   8030e:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   80310:	4b2d      	ldr	r3, [pc, #180]	; (803c8 <usart_init_spi_master+0x108>)
   80312:	681b      	ldr	r3, [r3, #0]
   80314:	4313      	orrs	r3, r2
   80316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   8031a:	f043 030e 	orr.w	r3, r3, #14
   8031e:	4a2a      	ldr	r2, [pc, #168]	; (803c8 <usart_init_spi_master+0x108>)
   80320:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   80322:	68bb      	ldr	r3, [r7, #8]
   80324:	689b      	ldr	r3, [r3, #8]
   80326:	2b03      	cmp	r3, #3
   80328:	d83e      	bhi.n	803a8 <usart_init_spi_master+0xe8>
   8032a:	a201      	add	r2, pc, #4	; (adr r2, 80330 <usart_init_spi_master+0x70>)
   8032c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80330:	00080341 	.word	0x00080341
   80334:	0008035b 	.word	0x0008035b
   80338:	00080375 	.word	0x00080375
   8033c:	0008038f 	.word	0x0008038f
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   80340:	4b21      	ldr	r3, [pc, #132]	; (803c8 <usart_init_spi_master+0x108>)
   80342:	681b      	ldr	r3, [r3, #0]
   80344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80348:	4a1f      	ldr	r2, [pc, #124]	; (803c8 <usart_init_spi_master+0x108>)
   8034a:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8034c:	4b1e      	ldr	r3, [pc, #120]	; (803c8 <usart_init_spi_master+0x108>)
   8034e:	681b      	ldr	r3, [r3, #0]
   80350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80354:	4a1c      	ldr	r2, [pc, #112]	; (803c8 <usart_init_spi_master+0x108>)
   80356:	6013      	str	r3, [r2, #0]
		break;
   80358:	e027      	b.n	803aa <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8035a:	4b1b      	ldr	r3, [pc, #108]	; (803c8 <usart_init_spi_master+0x108>)
   8035c:	681b      	ldr	r3, [r3, #0]
   8035e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80362:	4a19      	ldr	r2, [pc, #100]	; (803c8 <usart_init_spi_master+0x108>)
   80364:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   80366:	4b18      	ldr	r3, [pc, #96]	; (803c8 <usart_init_spi_master+0x108>)
   80368:	681b      	ldr	r3, [r3, #0]
   8036a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8036e:	4a16      	ldr	r2, [pc, #88]	; (803c8 <usart_init_spi_master+0x108>)
   80370:	6013      	str	r3, [r2, #0]
		break;
   80372:	e01a      	b.n	803aa <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   80374:	4b14      	ldr	r3, [pc, #80]	; (803c8 <usart_init_spi_master+0x108>)
   80376:	681b      	ldr	r3, [r3, #0]
   80378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8037c:	4a12      	ldr	r2, [pc, #72]	; (803c8 <usart_init_spi_master+0x108>)
   8037e:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   80380:	4b11      	ldr	r3, [pc, #68]	; (803c8 <usart_init_spi_master+0x108>)
   80382:	681b      	ldr	r3, [r3, #0]
   80384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80388:	4a0f      	ldr	r2, [pc, #60]	; (803c8 <usart_init_spi_master+0x108>)
   8038a:	6013      	str	r3, [r2, #0]
		break;
   8038c:	e00d      	b.n	803aa <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8038e:	4b0e      	ldr	r3, [pc, #56]	; (803c8 <usart_init_spi_master+0x108>)
   80390:	681b      	ldr	r3, [r3, #0]
   80392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80396:	4a0c      	ldr	r2, [pc, #48]	; (803c8 <usart_init_spi_master+0x108>)
   80398:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8039a:	4b0b      	ldr	r3, [pc, #44]	; (803c8 <usart_init_spi_master+0x108>)
   8039c:	681b      	ldr	r3, [r3, #0]
   8039e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   803a2:	4a09      	ldr	r2, [pc, #36]	; (803c8 <usart_init_spi_master+0x108>)
   803a4:	6013      	str	r3, [r2, #0]
		break;
   803a6:	e000      	b.n	803aa <usart_init_spi_master+0xea>

	default:
		break;
   803a8:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   803aa:	68fb      	ldr	r3, [r7, #12]
   803ac:	685a      	ldr	r2, [r3, #4]
   803ae:	4b06      	ldr	r3, [pc, #24]	; (803c8 <usart_init_spi_master+0x108>)
   803b0:	681b      	ldr	r3, [r3, #0]
   803b2:	431a      	orrs	r2, r3
   803b4:	68fb      	ldr	r3, [r7, #12]
   803b6:	605a      	str	r2, [r3, #4]

	return 0;
   803b8:	2300      	movs	r3, #0
}
   803ba:	4618      	mov	r0, r3
   803bc:	3710      	adds	r7, #16
   803be:	46bd      	mov	sp, r7
   803c0:	bd80      	pop	{r7, pc}
   803c2:	bf00      	nop
   803c4:	0008026d 	.word	0x0008026d
   803c8:	20070b6c 	.word	0x20070b6c
   803cc:	0008022b 	.word	0x0008022b

000803d0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   803d0:	b480      	push	{r7}
   803d2:	b083      	sub	sp, #12
   803d4:	af00      	add	r7, sp, #0
   803d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   803d8:	687b      	ldr	r3, [r7, #4]
   803da:	2240      	movs	r2, #64	; 0x40
   803dc:	601a      	str	r2, [r3, #0]
}
   803de:	bf00      	nop
   803e0:	370c      	adds	r7, #12
   803e2:	46bd      	mov	sp, r7
   803e4:	bc80      	pop	{r7}
   803e6:	4770      	bx	lr

000803e8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   803e8:	b480      	push	{r7}
   803ea:	b083      	sub	sp, #12
   803ec:	af00      	add	r7, sp, #0
   803ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   803f0:	687b      	ldr	r3, [r7, #4]
   803f2:	2280      	movs	r2, #128	; 0x80
   803f4:	601a      	str	r2, [r3, #0]
}
   803f6:	bf00      	nop
   803f8:	370c      	adds	r7, #12
   803fa:	46bd      	mov	sp, r7
   803fc:	bc80      	pop	{r7}
   803fe:	4770      	bx	lr

00080400 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   80400:	b480      	push	{r7}
   80402:	b083      	sub	sp, #12
   80404:	af00      	add	r7, sp, #0
   80406:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80408:	687b      	ldr	r3, [r7, #4]
   8040a:	2288      	movs	r2, #136	; 0x88
   8040c:	601a      	str	r2, [r3, #0]
}
   8040e:	bf00      	nop
   80410:	370c      	adds	r7, #12
   80412:	46bd      	mov	sp, r7
   80414:	bc80      	pop	{r7}
   80416:	4770      	bx	lr

00080418 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   80418:	b480      	push	{r7}
   8041a:	b083      	sub	sp, #12
   8041c:	af00      	add	r7, sp, #0
   8041e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   80420:	687b      	ldr	r3, [r7, #4]
   80422:	2210      	movs	r2, #16
   80424:	601a      	str	r2, [r3, #0]
}
   80426:	bf00      	nop
   80428:	370c      	adds	r7, #12
   8042a:	46bd      	mov	sp, r7
   8042c:	bc80      	pop	{r7}
   8042e:	4770      	bx	lr

00080430 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   80430:	b480      	push	{r7}
   80432:	b083      	sub	sp, #12
   80434:	af00      	add	r7, sp, #0
   80436:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   80438:	687b      	ldr	r3, [r7, #4]
   8043a:	2220      	movs	r2, #32
   8043c:	601a      	str	r2, [r3, #0]
}
   8043e:	bf00      	nop
   80440:	370c      	adds	r7, #12
   80442:	46bd      	mov	sp, r7
   80444:	bc80      	pop	{r7}
   80446:	4770      	bx	lr

00080448 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   80448:	b480      	push	{r7}
   8044a:	b083      	sub	sp, #12
   8044c:	af00      	add	r7, sp, #0
   8044e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80450:	687b      	ldr	r3, [r7, #4]
   80452:	2224      	movs	r2, #36	; 0x24
   80454:	601a      	str	r2, [r3, #0]
}
   80456:	bf00      	nop
   80458:	370c      	adds	r7, #12
   8045a:	46bd      	mov	sp, r7
   8045c:	bc80      	pop	{r7}
   8045e:	4770      	bx	lr

00080460 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   80460:	b480      	push	{r7}
   80462:	b083      	sub	sp, #12
   80464:	af00      	add	r7, sp, #0
   80466:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   80468:	687b      	ldr	r3, [r7, #4]
   8046a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8046e:	601a      	str	r2, [r3, #0]
}
   80470:	bf00      	nop
   80472:	370c      	adds	r7, #12
   80474:	46bd      	mov	sp, r7
   80476:	bc80      	pop	{r7}
   80478:	4770      	bx	lr

0008047a <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   8047a:	b480      	push	{r7}
   8047c:	b083      	sub	sp, #12
   8047e:	af00      	add	r7, sp, #0
   80480:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   80482:	687b      	ldr	r3, [r7, #4]
   80484:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80488:	601a      	str	r2, [r3, #0]
}
   8048a:	bf00      	nop
   8048c:	370c      	adds	r7, #12
   8048e:	46bd      	mov	sp, r7
   80490:	bc80      	pop	{r7}
   80492:	4770      	bx	lr

00080494 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
   80494:	b480      	push	{r7}
   80496:	b083      	sub	sp, #12
   80498:	af00      	add	r7, sp, #0
   8049a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
   8049c:	687b      	ldr	r3, [r7, #4]
   8049e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   804a2:	601a      	str	r2, [r3, #0]
}
   804a4:	bf00      	nop
   804a6:	370c      	adds	r7, #12
   804a8:	46bd      	mov	sp, r7
   804aa:	bc80      	pop	{r7}
   804ac:	4770      	bx	lr

000804ae <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   804ae:	b480      	push	{r7}
   804b0:	b083      	sub	sp, #12
   804b2:	af00      	add	r7, sp, #0
   804b4:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   804b6:	687b      	ldr	r3, [r7, #4]
   804b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   804bc:	601a      	str	r2, [r3, #0]
}
   804be:	bf00      	nop
   804c0:	370c      	adds	r7, #12
   804c2:	46bd      	mov	sp, r7
   804c4:	bc80      	pop	{r7}
   804c6:	4770      	bx	lr

000804c8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   804c8:	b480      	push	{r7}
   804ca:	b083      	sub	sp, #12
   804cc:	af00      	add	r7, sp, #0
   804ce:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   804d0:	687b      	ldr	r3, [r7, #4]
   804d2:	4a04      	ldr	r2, [pc, #16]	; (804e4 <usart_disable_writeprotect+0x1c>)
   804d4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   804d8:	bf00      	nop
   804da:	370c      	adds	r7, #12
   804dc:	46bd      	mov	sp, r7
   804de:	bc80      	pop	{r7}
   804e0:	4770      	bx	lr
   804e2:	bf00      	nop
   804e4:	55534100 	.word	0x55534100

000804e8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   804e8:	b480      	push	{r7}
   804ea:	b083      	sub	sp, #12
   804ec:	af00      	add	r7, sp, #0
   804ee:	4603      	mov	r3, r0
   804f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   804f2:	4908      	ldr	r1, [pc, #32]	; (80514 <NVIC_EnableIRQ+0x2c>)
   804f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   804f8:	095b      	lsrs	r3, r3, #5
   804fa:	79fa      	ldrb	r2, [r7, #7]
   804fc:	f002 021f 	and.w	r2, r2, #31
   80500:	2001      	movs	r0, #1
   80502:	fa00 f202 	lsl.w	r2, r0, r2
   80506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8050a:	bf00      	nop
   8050c:	370c      	adds	r7, #12
   8050e:	46bd      	mov	sp, r7
   80510:	bc80      	pop	{r7}
   80512:	4770      	bx	lr
   80514:	e000e100 	.word	0xe000e100

00080518 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80518:	b480      	push	{r7}
   8051a:	b083      	sub	sp, #12
   8051c:	af00      	add	r7, sp, #0
   8051e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80520:	687b      	ldr	r3, [r7, #4]
   80522:	2b07      	cmp	r3, #7
   80524:	d825      	bhi.n	80572 <osc_get_rate+0x5a>
   80526:	a201      	add	r2, pc, #4	; (adr r2, 8052c <osc_get_rate+0x14>)
   80528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8052c:	0008054d 	.word	0x0008054d
   80530:	00080553 	.word	0x00080553
   80534:	00080559 	.word	0x00080559
   80538:	0008055f 	.word	0x0008055f
   8053c:	00080563 	.word	0x00080563
   80540:	00080567 	.word	0x00080567
   80544:	0008056b 	.word	0x0008056b
   80548:	0008056f 	.word	0x0008056f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8054c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80550:	e010      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80556:	e00d      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8055c:	e00a      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8055e:	4b08      	ldr	r3, [pc, #32]	; (80580 <osc_get_rate+0x68>)
   80560:	e008      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80562:	4b08      	ldr	r3, [pc, #32]	; (80584 <osc_get_rate+0x6c>)
   80564:	e006      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80566:	4b08      	ldr	r3, [pc, #32]	; (80588 <osc_get_rate+0x70>)
   80568:	e004      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8056a:	4b07      	ldr	r3, [pc, #28]	; (80588 <osc_get_rate+0x70>)
   8056c:	e002      	b.n	80574 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8056e:	4b06      	ldr	r3, [pc, #24]	; (80588 <osc_get_rate+0x70>)
   80570:	e000      	b.n	80574 <osc_get_rate+0x5c>
	}

	return 0;
   80572:	2300      	movs	r3, #0
}
   80574:	4618      	mov	r0, r3
   80576:	370c      	adds	r7, #12
   80578:	46bd      	mov	sp, r7
   8057a:	bc80      	pop	{r7}
   8057c:	4770      	bx	lr
   8057e:	bf00      	nop
   80580:	003d0900 	.word	0x003d0900
   80584:	007a1200 	.word	0x007a1200
   80588:	00b71b00 	.word	0x00b71b00

0008058c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8058c:	b580      	push	{r7, lr}
   8058e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80590:	2006      	movs	r0, #6
   80592:	4b04      	ldr	r3, [pc, #16]	; (805a4 <sysclk_get_main_hz+0x18>)
   80594:	4798      	blx	r3
   80596:	4602      	mov	r2, r0
   80598:	4613      	mov	r3, r2
   8059a:	00db      	lsls	r3, r3, #3
   8059c:	1a9b      	subs	r3, r3, r2
   8059e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   805a0:	4618      	mov	r0, r3
   805a2:	bd80      	pop	{r7, pc}
   805a4:	00080519 	.word	0x00080519

000805a8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   805a8:	b580      	push	{r7, lr}
   805aa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   805ac:	4b02      	ldr	r3, [pc, #8]	; (805b8 <sysclk_get_peripheral_hz+0x10>)
   805ae:	4798      	blx	r3
   805b0:	4603      	mov	r3, r0
   805b2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   805b4:	4618      	mov	r0, r3
   805b6:	bd80      	pop	{r7, pc}
   805b8:	0008058d 	.word	0x0008058d

000805bc <spi_init>:
sensor_to_motor_t stm;

uint8_t sens_buf[sizeof(mts)];

void spi_init(void)
{
   805bc:	b580      	push	{r7, lr}
   805be:	af00      	add	r7, sp, #0
    configure_dmac();
   805c0:	4b02      	ldr	r3, [pc, #8]	; (805cc <spi_init+0x10>)
   805c2:	4798      	blx	r3
    spi_master_initialize();
   805c4:	4b02      	ldr	r3, [pc, #8]	; (805d0 <spi_init+0x14>)
   805c6:	4798      	blx	r3
}
   805c8:	bf00      	nop
   805ca:	bd80      	pop	{r7, pc}
   805cc:	000806e9 	.word	0x000806e9
   805d0:	000805d5 	.word	0x000805d5

000805d4 <spi_master_initialize>:

void spi_master_initialize(void)
{
   805d4:	b590      	push	{r4, r7, lr}
   805d6:	b085      	sub	sp, #20
   805d8:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   805da:	2101      	movs	r1, #1
   805dc:	4810      	ldr	r0, [pc, #64]	; (80620 <spi_master_initialize+0x4c>)
   805de:	4b11      	ldr	r3, [pc, #68]	; (80624 <spi_master_initialize+0x50>)
   805e0:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   805e2:	2100      	movs	r1, #0
   805e4:	480e      	ldr	r0, [pc, #56]	; (80620 <spi_master_initialize+0x4c>)
   805e6:	4b0f      	ldr	r3, [pc, #60]	; (80624 <spi_master_initialize+0x50>)
   805e8:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   805ea:	2012      	movs	r0, #18
   805ec:	4b0e      	ldr	r3, [pc, #56]	; (80628 <spi_master_initialize+0x54>)
   805ee:	4798      	blx	r3
    usart_spi_disable(USART1);
   805f0:	480e      	ldr	r0, [pc, #56]	; (8062c <spi_master_initialize+0x58>)
   805f2:	4b0f      	ldr	r3, [pc, #60]	; (80630 <spi_master_initialize+0x5c>)
   805f4:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   805f6:	4b0f      	ldr	r3, [pc, #60]	; (80634 <spi_master_initialize+0x60>)
   805f8:	463c      	mov	r4, r7
   805fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   805fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   80600:	4b0d      	ldr	r3, [pc, #52]	; (80638 <spi_master_initialize+0x64>)
   80602:	4798      	blx	r3
   80604:	4602      	mov	r2, r0
   80606:	463b      	mov	r3, r7
   80608:	4619      	mov	r1, r3
   8060a:	4808      	ldr	r0, [pc, #32]	; (8062c <spi_master_initialize+0x58>)
   8060c:	4b0b      	ldr	r3, [pc, #44]	; (8063c <spi_master_initialize+0x68>)
   8060e:	4798      	blx	r3
    usart_spi_enable(USART1);
   80610:	4806      	ldr	r0, [pc, #24]	; (8062c <spi_master_initialize+0x58>)
   80612:	4b0b      	ldr	r3, [pc, #44]	; (80640 <spi_master_initialize+0x6c>)
   80614:	4798      	blx	r3
}
   80616:	bf00      	nop
   80618:	3714      	adds	r7, #20
   8061a:	46bd      	mov	sp, r7
   8061c:	bd90      	pop	{r4, r7, pc}
   8061e:	bf00      	nop
   80620:	400c4000 	.word	0x400c4000
   80624:	000824b7 	.word	0x000824b7
   80628:	00082875 	.word	0x00082875
   8062c:	4009c000 	.word	0x4009c000
   80630:	00080185 	.word	0x00080185
   80634:	00087c74 	.word	0x00087c74
   80638:	000805a9 	.word	0x000805a9
   8063c:	000802c1 	.word	0x000802c1
   80640:	00080161 	.word	0x00080161

00080644 <spi_master_transfer>:

void spi_master_transfer(void *p_buf, uint32_t ul_size)
{
   80644:	b580      	push	{r7, lr}
   80646:	b088      	sub	sp, #32
   80648:	af00      	add	r7, sp, #0
   8064a:	6078      	str	r0, [r7, #4]
   8064c:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    usart_spi_force_chip_select(USART1);
   8064e:	481c      	ldr	r0, [pc, #112]	; (806c0 <spi_master_transfer+0x7c>)
   80650:	4b1c      	ldr	r3, [pc, #112]	; (806c4 <spi_master_transfer+0x80>)
   80652:	4798      	blx	r3

    dmac_channel_disable(DMAC, 1);
   80654:	2101      	movs	r1, #1
   80656:	481c      	ldr	r0, [pc, #112]	; (806c8 <spi_master_transfer+0x84>)
   80658:	4b1c      	ldr	r3, [pc, #112]	; (806cc <spi_master_transfer+0x88>)
   8065a:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   8065c:	687b      	ldr	r3, [r7, #4]
   8065e:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & USART1->US_THR;
   80660:	4b1b      	ldr	r3, [pc, #108]	; (806d0 <spi_master_transfer+0x8c>)
   80662:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80664:	683b      	ldr	r3, [r7, #0]
   80666:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80668:	4b1a      	ldr	r3, [pc, #104]	; (806d4 <spi_master_transfer+0x90>)
   8066a:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   8066c:	2300      	movs	r3, #0
   8066e:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   80670:	f107 030c 	add.w	r3, r7, #12
   80674:	461a      	mov	r2, r3
   80676:	2101      	movs	r1, #1
   80678:	4813      	ldr	r0, [pc, #76]	; (806c8 <spi_master_transfer+0x84>)
   8067a:	4b17      	ldr	r3, [pc, #92]	; (806d8 <spi_master_transfer+0x94>)
   8067c:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   8067e:	2101      	movs	r1, #1
   80680:	4811      	ldr	r0, [pc, #68]	; (806c8 <spi_master_transfer+0x84>)
   80682:	4b16      	ldr	r3, [pc, #88]	; (806dc <spi_master_transfer+0x98>)
   80684:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   80686:	2100      	movs	r1, #0
   80688:	480f      	ldr	r0, [pc, #60]	; (806c8 <spi_master_transfer+0x84>)
   8068a:	4b10      	ldr	r3, [pc, #64]	; (806cc <spi_master_transfer+0x88>)
   8068c:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & USART1->US_RHR;
   8068e:	4b14      	ldr	r3, [pc, #80]	; (806e0 <spi_master_transfer+0x9c>)
   80690:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80692:	687b      	ldr	r3, [r7, #4]
   80694:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80696:	683b      	ldr	r3, [r7, #0]
   80698:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   8069a:	4b12      	ldr	r3, [pc, #72]	; (806e4 <spi_master_transfer+0xa0>)
   8069c:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   8069e:	2300      	movs	r3, #0
   806a0:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   806a2:	f107 030c 	add.w	r3, r7, #12
   806a6:	461a      	mov	r2, r3
   806a8:	2100      	movs	r1, #0
   806aa:	4807      	ldr	r0, [pc, #28]	; (806c8 <spi_master_transfer+0x84>)
   806ac:	4b0a      	ldr	r3, [pc, #40]	; (806d8 <spi_master_transfer+0x94>)
   806ae:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   806b0:	2100      	movs	r1, #0
   806b2:	4805      	ldr	r0, [pc, #20]	; (806c8 <spi_master_transfer+0x84>)
   806b4:	4b09      	ldr	r3, [pc, #36]	; (806dc <spi_master_transfer+0x98>)
   806b6:	4798      	blx	r3
}
   806b8:	bf00      	nop
   806ba:	3720      	adds	r7, #32
   806bc:	46bd      	mov	sp, r7
   806be:	bd80      	pop	{r7, pc}
   806c0:	4009c000 	.word	0x4009c000
   806c4:	00080495 	.word	0x00080495
   806c8:	400c4000 	.word	0x400c4000
   806cc:	000824b7 	.word	0x000824b7
   806d0:	4009c01c 	.word	0x4009c01c
   806d4:	20310000 	.word	0x20310000
   806d8:	000825d1 	.word	0x000825d1
   806dc:	00082499 	.word	0x00082499
   806e0:	4009c018 	.word	0x4009c018
   806e4:	02510000 	.word	0x02510000

000806e8 <configure_dmac>:

void configure_dmac(void)
{
   806e8:	b580      	push	{r7, lr}
   806ea:	b082      	sub	sp, #8
   806ec:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   806ee:	2027      	movs	r0, #39	; 0x27
   806f0:	4b18      	ldr	r3, [pc, #96]	; (80754 <configure_dmac+0x6c>)
   806f2:	4798      	blx	r3
    dmac_init(DMAC);
   806f4:	4818      	ldr	r0, [pc, #96]	; (80758 <configure_dmac+0x70>)
   806f6:	4b19      	ldr	r3, [pc, #100]	; (8075c <configure_dmac+0x74>)
   806f8:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   806fa:	2110      	movs	r1, #16
   806fc:	4816      	ldr	r0, [pc, #88]	; (80758 <configure_dmac+0x70>)
   806fe:	4b18      	ldr	r3, [pc, #96]	; (80760 <configure_dmac+0x78>)
   80700:	4798      	blx	r3
    dmac_enable(DMAC);
   80702:	4815      	ldr	r0, [pc, #84]	; (80758 <configure_dmac+0x70>)
   80704:	4b17      	ldr	r3, [pc, #92]	; (80764 <configure_dmac+0x7c>)
   80706:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80708:	2300      	movs	r3, #0
   8070a:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   8070c:	687b      	ldr	r3, [r7, #4]
   8070e:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80712:	f043 030e 	orr.w	r3, r3, #14
   80716:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   80718:	687a      	ldr	r2, [r7, #4]
   8071a:	2100      	movs	r1, #0
   8071c:	480e      	ldr	r0, [pc, #56]	; (80758 <configure_dmac+0x70>)
   8071e:	4b12      	ldr	r3, [pc, #72]	; (80768 <configure_dmac+0x80>)
   80720:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80722:	2300      	movs	r3, #0
   80724:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80726:	687b      	ldr	r3, [r7, #4]
   80728:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   8072c:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   80730:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   80732:	687a      	ldr	r2, [r7, #4]
   80734:	2101      	movs	r1, #1
   80736:	4808      	ldr	r0, [pc, #32]	; (80758 <configure_dmac+0x70>)
   80738:	4b0b      	ldr	r3, [pc, #44]	; (80768 <configure_dmac+0x80>)
   8073a:	4798      	blx	r3
    ul_cfg = 0;
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
    #endif
    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   8073c:	2027      	movs	r0, #39	; 0x27
   8073e:	4b0b      	ldr	r3, [pc, #44]	; (8076c <configure_dmac+0x84>)
   80740:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   80742:	2101      	movs	r1, #1
   80744:	4804      	ldr	r0, [pc, #16]	; (80758 <configure_dmac+0x70>)
   80746:	4b0a      	ldr	r3, [pc, #40]	; (80770 <configure_dmac+0x88>)
   80748:	4798      	blx	r3
}
   8074a:	bf00      	nop
   8074c:	3708      	adds	r7, #8
   8074e:	46bd      	mov	sp, r7
   80750:	bd80      	pop	{r7, pc}
   80752:	bf00      	nop
   80754:	00082875 	.word	0x00082875
   80758:	400c4000 	.word	0x400c4000
   8075c:	000823f1 	.word	0x000823f1
   80760:	0008240d 	.word	0x0008240d
   80764:	00082433 	.word	0x00082433
   80768:	000825a7 	.word	0x000825a7
   8076c:	000804e9 	.word	0x000804e9
   80770:	00082469 	.word	0x00082469

00080774 <DMAC_Handler>:

void DMAC_Handler(void)
{
   80774:	b580      	push	{r7, lr}
   80776:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   80778:	480a      	ldr	r0, [pc, #40]	; (807a4 <DMAC_Handler+0x30>)
   8077a:	4b0b      	ldr	r3, [pc, #44]	; (807a8 <DMAC_Handler+0x34>)
   8077c:	4798      	blx	r3
   8077e:	4602      	mov	r2, r0
   80780:	4b0a      	ldr	r3, [pc, #40]	; (807ac <DMAC_Handler+0x38>)
   80782:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   80784:	4b09      	ldr	r3, [pc, #36]	; (807ac <DMAC_Handler+0x38>)
   80786:	681b      	ldr	r3, [r3, #0]
   80788:	f003 0301 	and.w	r3, r3, #1
   8078c:	2b00      	cmp	r3, #0
   8078e:	d007      	beq.n	807a0 <DMAC_Handler+0x2c>
    {
        usart_spi_release_chip_select(USART1);
   80790:	4807      	ldr	r0, [pc, #28]	; (807b0 <DMAC_Handler+0x3c>)
   80792:	4b08      	ldr	r3, [pc, #32]	; (807b4 <DMAC_Handler+0x40>)
   80794:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   80796:	4b08      	ldr	r3, [pc, #32]	; (807b8 <DMAC_Handler+0x44>)
   80798:	881b      	ldrh	r3, [r3, #0]
   8079a:	b29b      	uxth	r3, r3
   8079c:	4a07      	ldr	r2, [pc, #28]	; (807bc <DMAC_Handler+0x48>)
   8079e:	8013      	strh	r3, [r2, #0]
    }
}
   807a0:	bf00      	nop
   807a2:	bd80      	pop	{r7, pc}
   807a4:	400c4000 	.word	0x400c4000
   807a8:	00082483 	.word	0x00082483
   807ac:	20070b70 	.word	0x20070b70
   807b0:	4009c000 	.word	0x4009c000
   807b4:	000804af 	.word	0x000804af
   807b8:	20070fe4 	.word	0x20070fe4
   807bc:	20070fec 	.word	0x20070fec

000807c0 <NVIC_EnableIRQ>:
{
   807c0:	b480      	push	{r7}
   807c2:	b083      	sub	sp, #12
   807c4:	af00      	add	r7, sp, #0
   807c6:	4603      	mov	r3, r0
   807c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   807ca:	4908      	ldr	r1, [pc, #32]	; (807ec <NVIC_EnableIRQ+0x2c>)
   807cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   807d0:	095b      	lsrs	r3, r3, #5
   807d2:	79fa      	ldrb	r2, [r7, #7]
   807d4:	f002 021f 	and.w	r2, r2, #31
   807d8:	2001      	movs	r0, #1
   807da:	fa00 f202 	lsl.w	r2, r0, r2
   807de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   807e2:	bf00      	nop
   807e4:	370c      	adds	r7, #12
   807e6:	46bd      	mov	sp, r7
   807e8:	bc80      	pop	{r7}
   807ea:	4770      	bx	lr
   807ec:	e000e100 	.word	0xe000e100

000807f0 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   807f0:	b480      	push	{r7}
   807f2:	b083      	sub	sp, #12
   807f4:	af00      	add	r7, sp, #0
   807f6:	4603      	mov	r3, r0
   807f8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   807fa:	4909      	ldr	r1, [pc, #36]	; (80820 <NVIC_ClearPendingIRQ+0x30>)
   807fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80800:	095b      	lsrs	r3, r3, #5
   80802:	79fa      	ldrb	r2, [r7, #7]
   80804:	f002 021f 	and.w	r2, r2, #31
   80808:	2001      	movs	r0, #1
   8080a:	fa00 f202 	lsl.w	r2, r0, r2
   8080e:	3360      	adds	r3, #96	; 0x60
   80810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80814:	bf00      	nop
   80816:	370c      	adds	r7, #12
   80818:	46bd      	mov	sp, r7
   8081a:	bc80      	pop	{r7}
   8081c:	4770      	bx	lr
   8081e:	bf00      	nop
   80820:	e000e100 	.word	0xe000e100

00080824 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80824:	b480      	push	{r7}
   80826:	b083      	sub	sp, #12
   80828:	af00      	add	r7, sp, #0
   8082a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8082c:	687b      	ldr	r3, [r7, #4]
   8082e:	2208      	movs	r2, #8
   80830:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80832:	687b      	ldr	r3, [r7, #4]
   80834:	2220      	movs	r2, #32
   80836:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80838:	687b      	ldr	r3, [r7, #4]
   8083a:	2204      	movs	r2, #4
   8083c:	601a      	str	r2, [r3, #0]
}
   8083e:	bf00      	nop
   80840:	370c      	adds	r7, #12
   80842:	46bd      	mov	sp, r7
   80844:	bc80      	pop	{r7}
   80846:	4770      	bx	lr

00080848 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80848:	b580      	push	{r7, lr}
   8084a:	b084      	sub	sp, #16
   8084c:	af00      	add	r7, sp, #0
   8084e:	6078      	str	r0, [r7, #4]
   80850:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80852:	2300      	movs	r3, #0
   80854:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80856:	687b      	ldr	r3, [r7, #4]
   80858:	f04f 32ff 	mov.w	r2, #4294967295
   8085c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8085e:	687b      	ldr	r3, [r7, #4]
   80860:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80862:	6878      	ldr	r0, [r7, #4]
   80864:	4b12      	ldr	r3, [pc, #72]	; (808b0 <twi_master_init+0x68>)
   80866:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80868:	6878      	ldr	r0, [r7, #4]
   8086a:	4b12      	ldr	r3, [pc, #72]	; (808b4 <twi_master_init+0x6c>)
   8086c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8086e:	683b      	ldr	r3, [r7, #0]
   80870:	6859      	ldr	r1, [r3, #4]
   80872:	683b      	ldr	r3, [r7, #0]
   80874:	681b      	ldr	r3, [r3, #0]
   80876:	461a      	mov	r2, r3
   80878:	6878      	ldr	r0, [r7, #4]
   8087a:	4b0f      	ldr	r3, [pc, #60]	; (808b8 <twi_master_init+0x70>)
   8087c:	4798      	blx	r3
   8087e:	4603      	mov	r3, r0
   80880:	2b01      	cmp	r3, #1
   80882:	d101      	bne.n	80888 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80884:	2301      	movs	r3, #1
   80886:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80888:	683b      	ldr	r3, [r7, #0]
   8088a:	7a5b      	ldrb	r3, [r3, #9]
   8088c:	2b01      	cmp	r3, #1
   8088e:	d102      	bne.n	80896 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80890:	687b      	ldr	r3, [r7, #4]
   80892:	2240      	movs	r2, #64	; 0x40
   80894:	601a      	str	r2, [r3, #0]
	}

    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   80896:	f44f 7150 	mov.w	r1, #832	; 0x340
   8089a:	6878      	ldr	r0, [r7, #4]
   8089c:	4b07      	ldr	r3, [pc, #28]	; (808bc <twi_master_init+0x74>)
   8089e:	4798      	blx	r3

    twiBusy = false;
   808a0:	4b07      	ldr	r3, [pc, #28]	; (808c0 <twi_master_init+0x78>)
   808a2:	2200      	movs	r2, #0
   808a4:	701a      	strb	r2, [r3, #0]

	return status;
   808a6:	68fb      	ldr	r3, [r7, #12]
}
   808a8:	4618      	mov	r0, r3
   808aa:	3710      	adds	r7, #16
   808ac:	46bd      	mov	sp, r7
   808ae:	bd80      	pop	{r7, pc}
   808b0:	00080d21 	.word	0x00080d21
   808b4:	00080825 	.word	0x00080825
   808b8:	000808c5 	.word	0x000808c5
   808bc:	00080cbd 	.word	0x00080cbd
   808c0:	20070f7c 	.word	0x20070f7c

000808c4 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   808c4:	b480      	push	{r7}
   808c6:	b089      	sub	sp, #36	; 0x24
   808c8:	af00      	add	r7, sp, #0
   808ca:	60f8      	str	r0, [r7, #12]
   808cc:	60b9      	str	r1, [r7, #8]
   808ce:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   808d0:	2300      	movs	r3, #0
   808d2:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   808d4:	68bb      	ldr	r3, [r7, #8]
   808d6:	4a34      	ldr	r2, [pc, #208]	; (809a8 <twi_set_speed+0xe4>)
   808d8:	4293      	cmp	r3, r2
   808da:	d901      	bls.n	808e0 <twi_set_speed+0x1c>
		return FAIL;
   808dc:	2301      	movs	r3, #1
   808de:	e05d      	b.n	8099c <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   808e0:	68bb      	ldr	r3, [r7, #8]
   808e2:	4a32      	ldr	r2, [pc, #200]	; (809ac <twi_set_speed+0xe8>)
   808e4:	4293      	cmp	r3, r2
   808e6:	d937      	bls.n	80958 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   808e8:	687b      	ldr	r3, [r7, #4]
   808ea:	4a31      	ldr	r2, [pc, #196]	; (809b0 <twi_set_speed+0xec>)
   808ec:	fba2 2303 	umull	r2, r3, r2, r3
   808f0:	0b9b      	lsrs	r3, r3, #14
   808f2:	3b04      	subs	r3, #4
   808f4:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   808f6:	68ba      	ldr	r2, [r7, #8]
   808f8:	4b2e      	ldr	r3, [pc, #184]	; (809b4 <twi_set_speed+0xf0>)
   808fa:	4413      	add	r3, r2
   808fc:	009b      	lsls	r3, r3, #2
   808fe:	687a      	ldr	r2, [r7, #4]
   80900:	fbb2 f3f3 	udiv	r3, r2, r3
   80904:	3b04      	subs	r3, #4
   80906:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80908:	e005      	b.n	80916 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   8090a:	69fb      	ldr	r3, [r7, #28]
   8090c:	3301      	adds	r3, #1
   8090e:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   80910:	697b      	ldr	r3, [r7, #20]
   80912:	085b      	lsrs	r3, r3, #1
   80914:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80916:	697b      	ldr	r3, [r7, #20]
   80918:	2bff      	cmp	r3, #255	; 0xff
   8091a:	d909      	bls.n	80930 <twi_set_speed+0x6c>
   8091c:	69fb      	ldr	r3, [r7, #28]
   8091e:	2b06      	cmp	r3, #6
   80920:	d9f3      	bls.n	8090a <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80922:	e005      	b.n	80930 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   80924:	69fb      	ldr	r3, [r7, #28]
   80926:	3301      	adds	r3, #1
   80928:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   8092a:	693b      	ldr	r3, [r7, #16]
   8092c:	085b      	lsrs	r3, r3, #1
   8092e:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80930:	693b      	ldr	r3, [r7, #16]
   80932:	2bff      	cmp	r3, #255	; 0xff
   80934:	d902      	bls.n	8093c <twi_set_speed+0x78>
   80936:	69fb      	ldr	r3, [r7, #28]
   80938:	2b06      	cmp	r3, #6
   8093a:	d9f3      	bls.n	80924 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   8093c:	697b      	ldr	r3, [r7, #20]
   8093e:	b2da      	uxtb	r2, r3
   80940:	693b      	ldr	r3, [r7, #16]
   80942:	021b      	lsls	r3, r3, #8
   80944:	b29b      	uxth	r3, r3
   80946:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   80948:	69fb      	ldr	r3, [r7, #28]
   8094a:	041b      	lsls	r3, r3, #16
   8094c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80950:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80952:	68fb      	ldr	r3, [r7, #12]
   80954:	611a      	str	r2, [r3, #16]
   80956:	e020      	b.n	8099a <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80958:	68bb      	ldr	r3, [r7, #8]
   8095a:	005b      	lsls	r3, r3, #1
   8095c:	687a      	ldr	r2, [r7, #4]
   8095e:	fbb2 f3f3 	udiv	r3, r2, r3
   80962:	3b04      	subs	r3, #4
   80964:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80966:	e005      	b.n	80974 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   80968:	69fb      	ldr	r3, [r7, #28]
   8096a:	3301      	adds	r3, #1
   8096c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   8096e:	69bb      	ldr	r3, [r7, #24]
   80970:	085b      	lsrs	r3, r3, #1
   80972:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80974:	69bb      	ldr	r3, [r7, #24]
   80976:	2bff      	cmp	r3, #255	; 0xff
   80978:	d902      	bls.n	80980 <twi_set_speed+0xbc>
   8097a:	69fb      	ldr	r3, [r7, #28]
   8097c:	2b06      	cmp	r3, #6
   8097e:	d9f3      	bls.n	80968 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80980:	69bb      	ldr	r3, [r7, #24]
   80982:	b2da      	uxtb	r2, r3
   80984:	69bb      	ldr	r3, [r7, #24]
   80986:	021b      	lsls	r3, r3, #8
   80988:	b29b      	uxth	r3, r3
   8098a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   8098c:	69fb      	ldr	r3, [r7, #28]
   8098e:	041b      	lsls	r3, r3, #16
   80990:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80994:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80996:	68fb      	ldr	r3, [r7, #12]
   80998:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   8099a:	2300      	movs	r3, #0
}
   8099c:	4618      	mov	r0, r3
   8099e:	3724      	adds	r7, #36	; 0x24
   809a0:	46bd      	mov	sp, r7
   809a2:	bc80      	pop	{r7}
   809a4:	4770      	bx	lr
   809a6:	bf00      	nop
   809a8:	00061a80 	.word	0x00061a80
   809ac:	0005dc00 	.word	0x0005dc00
   809b0:	057619f1 	.word	0x057619f1
   809b4:	3ffd1200 	.word	0x3ffd1200

000809b8 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   809b8:	b480      	push	{r7}
   809ba:	b085      	sub	sp, #20
   809bc:	af00      	add	r7, sp, #0
   809be:	6078      	str	r0, [r7, #4]
   809c0:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   809c2:	683b      	ldr	r3, [r7, #0]
   809c4:	2b00      	cmp	r3, #0
   809c6:	d101      	bne.n	809cc <twi_mk_addr+0x14>
		return 0;
   809c8:	2300      	movs	r3, #0
   809ca:	e01d      	b.n	80a08 <twi_mk_addr+0x50>

	val = addr[0];
   809cc:	687b      	ldr	r3, [r7, #4]
   809ce:	781b      	ldrb	r3, [r3, #0]
   809d0:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   809d2:	683b      	ldr	r3, [r7, #0]
   809d4:	2b01      	cmp	r3, #1
   809d6:	dd09      	ble.n	809ec <twi_mk_addr+0x34>
		val <<= 8;
   809d8:	68fb      	ldr	r3, [r7, #12]
   809da:	021b      	lsls	r3, r3, #8
   809dc:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   809de:	687b      	ldr	r3, [r7, #4]
   809e0:	3301      	adds	r3, #1
   809e2:	781b      	ldrb	r3, [r3, #0]
   809e4:	461a      	mov	r2, r3
   809e6:	68fb      	ldr	r3, [r7, #12]
   809e8:	4313      	orrs	r3, r2
   809ea:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   809ec:	683b      	ldr	r3, [r7, #0]
   809ee:	2b02      	cmp	r3, #2
   809f0:	dd09      	ble.n	80a06 <twi_mk_addr+0x4e>
		val <<= 8;
   809f2:	68fb      	ldr	r3, [r7, #12]
   809f4:	021b      	lsls	r3, r3, #8
   809f6:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   809f8:	687b      	ldr	r3, [r7, #4]
   809fa:	3302      	adds	r3, #2
   809fc:	781b      	ldrb	r3, [r3, #0]
   809fe:	461a      	mov	r2, r3
   80a00:	68fb      	ldr	r3, [r7, #12]
   80a02:	4313      	orrs	r3, r2
   80a04:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80a06:	68fb      	ldr	r3, [r7, #12]
}
   80a08:	4618      	mov	r0, r3
   80a0a:	3714      	adds	r7, #20
   80a0c:	46bd      	mov	sp, r7
   80a0e:	bc80      	pop	{r7}
   80a10:	4770      	bx	lr
	...

00080a14 <twi_is_busy>:

	return TWI_SUCCESS;
}

uint8_t twi_is_busy(void)
{
   80a14:	b480      	push	{r7}
   80a16:	af00      	add	r7, sp, #0
    return twiBusy;
   80a18:	4b02      	ldr	r3, [pc, #8]	; (80a24 <twi_is_busy+0x10>)
   80a1a:	781b      	ldrb	r3, [r3, #0]
}
   80a1c:	4618      	mov	r0, r3
   80a1e:	46bd      	mov	sp, r7
   80a20:	bc80      	pop	{r7}
   80a22:	4770      	bx	lr
   80a24:	20070f7c 	.word	0x20070f7c

00080a28 <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   80a28:	b480      	push	{r7}
   80a2a:	af00      	add	r7, sp, #0
    return &txPacket;
   80a2c:	4b02      	ldr	r3, [pc, #8]	; (80a38 <twi_get_tx_packet+0x10>)
}
   80a2e:	4618      	mov	r0, r3
   80a30:	46bd      	mov	sp, r7
   80a32:	bc80      	pop	{r7}
   80a34:	4770      	bx	lr
   80a36:	bf00      	nop
   80a38:	20070b74 	.word	0x20070b74

00080a3c <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   80a3c:	b580      	push	{r7, lr}
   80a3e:	b084      	sub	sp, #16
   80a40:	af00      	add	r7, sp, #0
   80a42:	6078      	str	r0, [r7, #4]
   80a44:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   80a46:	683b      	ldr	r3, [r7, #0]
   80a48:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80a4c:	2b00      	cmp	r3, #0
   80a4e:	d101      	bne.n	80a54 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   80a50:	2301      	movs	r3, #1
   80a52:	e040      	b.n	80ad6 <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   80a54:	4b22      	ldr	r3, [pc, #136]	; (80ae0 <twi_pdc_master_write+0xa4>)
   80a56:	2201      	movs	r2, #1
   80a58:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   80a5a:	683b      	ldr	r3, [r7, #0]
   80a5c:	3308      	adds	r3, #8
   80a5e:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   80a60:	683b      	ldr	r3, [r7, #0]
   80a62:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80a66:	3b01      	subs	r3, #1
   80a68:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   80a6a:	f107 0308 	add.w	r3, r7, #8
   80a6e:	2200      	movs	r2, #0
   80a70:	4619      	mov	r1, r3
   80a72:	481c      	ldr	r0, [pc, #112]	; (80ae4 <twi_pdc_master_write+0xa8>)
   80a74:	4b1c      	ldr	r3, [pc, #112]	; (80ae8 <twi_pdc_master_write+0xac>)
   80a76:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   80a78:	687b      	ldr	r3, [r7, #4]
   80a7a:	2200      	movs	r2, #0
   80a7c:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   80a7e:	683b      	ldr	r3, [r7, #0]
   80a80:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
   80a84:	041b      	lsls	r3, r3, #16
   80a86:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   80a8a:	683b      	ldr	r3, [r7, #0]
   80a8c:	685b      	ldr	r3, [r3, #4]
   80a8e:	021b      	lsls	r3, r3, #8
   80a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
   80a94:	431a      	orrs	r2, r3
   80a96:	687b      	ldr	r3, [r7, #4]
   80a98:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   80a9a:	687b      	ldr	r3, [r7, #4]
   80a9c:	2200      	movs	r2, #0
   80a9e:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80aa0:	683a      	ldr	r2, [r7, #0]
   80aa2:	683b      	ldr	r3, [r7, #0]
   80aa4:	685b      	ldr	r3, [r3, #4]
   80aa6:	4619      	mov	r1, r3
   80aa8:	4610      	mov	r0, r2
   80aaa:	4b10      	ldr	r3, [pc, #64]	; (80aec <twi_pdc_master_write+0xb0>)
   80aac:	4798      	blx	r3
   80aae:	4602      	mov	r2, r0
   80ab0:	687b      	ldr	r3, [r7, #4]
   80ab2:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   80ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
   80ab8:	480a      	ldr	r0, [pc, #40]	; (80ae4 <twi_pdc_master_write+0xa8>)
   80aba:	4b0d      	ldr	r3, [pc, #52]	; (80af0 <twi_pdc_master_write+0xb4>)
   80abc:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   80abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80ac2:	6878      	ldr	r0, [r7, #4]
   80ac4:	4b0b      	ldr	r3, [pc, #44]	; (80af4 <twi_pdc_master_write+0xb8>)
   80ac6:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   80ac8:	2016      	movs	r0, #22
   80aca:	4b0b      	ldr	r3, [pc, #44]	; (80af8 <twi_pdc_master_write+0xbc>)
   80acc:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   80ace:	2016      	movs	r0, #22
   80ad0:	4b0a      	ldr	r3, [pc, #40]	; (80afc <twi_pdc_master_write+0xc0>)
   80ad2:	4798      	blx	r3

    return TWI_SUCCESS;
   80ad4:	2300      	movs	r3, #0
}
   80ad6:	4618      	mov	r0, r3
   80ad8:	3710      	adds	r7, #16
   80ada:	46bd      	mov	sp, r7
   80adc:	bd80      	pop	{r7, pc}
   80ade:	bf00      	nop
   80ae0:	20070f7c 	.word	0x20070f7c
   80ae4:	4008c100 	.word	0x4008c100
   80ae8:	000801a9 	.word	0x000801a9
   80aec:	000809b9 	.word	0x000809b9
   80af0:	000801eb 	.word	0x000801eb
   80af4:	00080cbd 	.word	0x00080cbd
   80af8:	000807f1 	.word	0x000807f1
   80afc:	000807c1 	.word	0x000807c1

00080b00 <twi_set_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_tx_callback(void (*callback)(void))
{
   80b00:	b480      	push	{r7}
   80b02:	b083      	sub	sp, #12
   80b04:	af00      	add	r7, sp, #0
   80b06:	6078      	str	r0, [r7, #4]
    txCallback = callback;
   80b08:	4a03      	ldr	r2, [pc, #12]	; (80b18 <twi_set_tx_callback+0x18>)
   80b0a:	687b      	ldr	r3, [r7, #4]
   80b0c:	6013      	str	r3, [r2, #0]
}
   80b0e:	bf00      	nop
   80b10:	370c      	adds	r7, #12
   80b12:	46bd      	mov	sp, r7
   80b14:	bc80      	pop	{r7}
   80b16:	4770      	bx	lr
   80b18:	20070f80 	.word	0x20070f80

00080b1c <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   80b1c:	b590      	push	{r4, r7, lr}
   80b1e:	b083      	sub	sp, #12
   80b20:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   80b22:	485a      	ldr	r0, [pc, #360]	; (80c8c <TWI0_Handler+0x170>)
   80b24:	4b5a      	ldr	r3, [pc, #360]	; (80c90 <TWI0_Handler+0x174>)
   80b26:	4798      	blx	r3
   80b28:	4604      	mov	r4, r0
   80b2a:	4858      	ldr	r0, [pc, #352]	; (80c8c <TWI0_Handler+0x170>)
   80b2c:	4b59      	ldr	r3, [pc, #356]	; (80c94 <TWI0_Handler+0x178>)
   80b2e:	4798      	blx	r3
   80b30:	4603      	mov	r3, r0
   80b32:	4023      	ands	r3, r4
   80b34:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   80b36:	687b      	ldr	r3, [r7, #4]
   80b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   80b3c:	2b00      	cmp	r3, #0
   80b3e:	d014      	beq.n	80b6a <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   80b40:	f44f 7100 	mov.w	r1, #512	; 0x200
   80b44:	4854      	ldr	r0, [pc, #336]	; (80c98 <TWI0_Handler+0x17c>)
   80b46:	4b55      	ldr	r3, [pc, #340]	; (80c9c <TWI0_Handler+0x180>)
   80b48:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   80b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80b4e:	484f      	ldr	r0, [pc, #316]	; (80c8c <TWI0_Handler+0x170>)
   80b50:	4b53      	ldr	r3, [pc, #332]	; (80ca0 <TWI0_Handler+0x184>)
   80b52:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   80b54:	2104      	movs	r1, #4
   80b56:	484d      	ldr	r0, [pc, #308]	; (80c8c <TWI0_Handler+0x170>)
   80b58:	4b52      	ldr	r3, [pc, #328]	; (80ca4 <TWI0_Handler+0x188>)
   80b5a:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   80b5c:	484b      	ldr	r0, [pc, #300]	; (80c8c <TWI0_Handler+0x170>)
   80b5e:	4b4c      	ldr	r3, [pc, #304]	; (80c90 <TWI0_Handler+0x174>)
   80b60:	4798      	blx	r3
   80b62:	4602      	mov	r2, r0
   80b64:	687b      	ldr	r3, [r7, #4]
   80b66:	4313      	orrs	r3, r2
   80b68:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   80b6a:	687b      	ldr	r3, [r7, #4]
   80b6c:	f003 0304 	and.w	r3, r3, #4
   80b70:	2b00      	cmp	r3, #0
   80b72:	d01a      	beq.n	80baa <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   80b74:	2104      	movs	r1, #4
   80b76:	4845      	ldr	r0, [pc, #276]	; (80c8c <TWI0_Handler+0x170>)
   80b78:	4b49      	ldr	r3, [pc, #292]	; (80ca0 <TWI0_Handler+0x184>)
   80b7a:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   80b7c:	4b43      	ldr	r3, [pc, #268]	; (80c8c <TWI0_Handler+0x170>)
   80b7e:	2202      	movs	r2, #2
   80b80:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   80b82:	4a42      	ldr	r2, [pc, #264]	; (80c8c <TWI0_Handler+0x170>)
   80b84:	4b48      	ldr	r3, [pc, #288]	; (80ca8 <TWI0_Handler+0x18c>)
   80b86:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80b8a:	3b01      	subs	r3, #1
   80b8c:	4946      	ldr	r1, [pc, #280]	; (80ca8 <TWI0_Handler+0x18c>)
   80b8e:	440b      	add	r3, r1
   80b90:	7a1b      	ldrb	r3, [r3, #8]
   80b92:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   80b94:	2101      	movs	r1, #1
   80b96:	483d      	ldr	r0, [pc, #244]	; (80c8c <TWI0_Handler+0x170>)
   80b98:	4b42      	ldr	r3, [pc, #264]	; (80ca4 <TWI0_Handler+0x188>)
   80b9a:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   80b9c:	483b      	ldr	r0, [pc, #236]	; (80c8c <TWI0_Handler+0x170>)
   80b9e:	4b3c      	ldr	r3, [pc, #240]	; (80c90 <TWI0_Handler+0x174>)
   80ba0:	4798      	blx	r3
   80ba2:	4602      	mov	r2, r0
   80ba4:	687b      	ldr	r3, [r7, #4]
   80ba6:	4313      	orrs	r3, r2
   80ba8:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   80baa:	687b      	ldr	r3, [r7, #4]
   80bac:	f003 0301 	and.w	r3, r3, #1
   80bb0:	2b00      	cmp	r3, #0
   80bb2:	d00d      	beq.n	80bd0 <TWI0_Handler+0xb4>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   80bb4:	2101      	movs	r1, #1
   80bb6:	4835      	ldr	r0, [pc, #212]	; (80c8c <TWI0_Handler+0x170>)
   80bb8:	4b39      	ldr	r3, [pc, #228]	; (80ca0 <TWI0_Handler+0x184>)
   80bba:	4798      	blx	r3

        // If defined, call the connected function.
        if(txCallback != NULL)
   80bbc:	4b3b      	ldr	r3, [pc, #236]	; (80cac <TWI0_Handler+0x190>)
   80bbe:	681b      	ldr	r3, [r3, #0]
   80bc0:	2b00      	cmp	r3, #0
   80bc2:	d002      	beq.n	80bca <TWI0_Handler+0xae>
        {
            txCallback();
   80bc4:	4b39      	ldr	r3, [pc, #228]	; (80cac <TWI0_Handler+0x190>)
   80bc6:	681b      	ldr	r3, [r3, #0]
   80bc8:	4798      	blx	r3
        }

        twiBusy = false;
   80bca:	4b39      	ldr	r3, [pc, #228]	; (80cb0 <TWI0_Handler+0x194>)
   80bcc:	2200      	movs	r2, #0
   80bce:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   80bd0:	687b      	ldr	r3, [r7, #4]
   80bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   80bd6:	2b00      	cmp	r3, #0
   80bd8:	d016      	beq.n	80c08 <TWI0_Handler+0xec>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   80bda:	2102      	movs	r1, #2
   80bdc:	482e      	ldr	r0, [pc, #184]	; (80c98 <TWI0_Handler+0x17c>)
   80bde:	4b2f      	ldr	r3, [pc, #188]	; (80c9c <TWI0_Handler+0x180>)
   80be0:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   80be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80be6:	4829      	ldr	r0, [pc, #164]	; (80c8c <TWI0_Handler+0x170>)
   80be8:	4b2d      	ldr	r3, [pc, #180]	; (80ca0 <TWI0_Handler+0x184>)
   80bea:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   80bec:	2102      	movs	r1, #2
   80bee:	4827      	ldr	r0, [pc, #156]	; (80c8c <TWI0_Handler+0x170>)
   80bf0:	4b2c      	ldr	r3, [pc, #176]	; (80ca4 <TWI0_Handler+0x188>)
   80bf2:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   80bf4:	4b25      	ldr	r3, [pc, #148]	; (80c8c <TWI0_Handler+0x170>)
   80bf6:	2202      	movs	r2, #2
   80bf8:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   80bfa:	4824      	ldr	r0, [pc, #144]	; (80c8c <TWI0_Handler+0x170>)
   80bfc:	4b24      	ldr	r3, [pc, #144]	; (80c90 <TWI0_Handler+0x174>)
   80bfe:	4798      	blx	r3
   80c00:	4602      	mov	r2, r0
   80c02:	687b      	ldr	r3, [r7, #4]
   80c04:	4313      	orrs	r3, r2
   80c06:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   80c08:	687b      	ldr	r3, [r7, #4]
   80c0a:	f003 0302 	and.w	r3, r3, #2
   80c0e:	2b00      	cmp	r3, #0
   80c10:	d018      	beq.n	80c44 <TWI0_Handler+0x128>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   80c12:	2102      	movs	r1, #2
   80c14:	481d      	ldr	r0, [pc, #116]	; (80c8c <TWI0_Handler+0x170>)
   80c16:	4b22      	ldr	r3, [pc, #136]	; (80ca0 <TWI0_Handler+0x184>)
   80c18:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   80c1a:	4b26      	ldr	r3, [pc, #152]	; (80cb4 <TWI0_Handler+0x198>)
   80c1c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
   80c20:	3b01      	subs	r3, #1
   80c22:	4a1a      	ldr	r2, [pc, #104]	; (80c8c <TWI0_Handler+0x170>)
   80c24:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80c26:	b2d1      	uxtb	r1, r2
   80c28:	4a22      	ldr	r2, [pc, #136]	; (80cb4 <TWI0_Handler+0x198>)
   80c2a:	4413      	add	r3, r2
   80c2c:	460a      	mov	r2, r1
   80c2e:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(rxCallback != NULL)
   80c30:	4b21      	ldr	r3, [pc, #132]	; (80cb8 <TWI0_Handler+0x19c>)
   80c32:	681b      	ldr	r3, [r3, #0]
   80c34:	2b00      	cmp	r3, #0
   80c36:	d002      	beq.n	80c3e <TWI0_Handler+0x122>
        {
            rxCallback();
   80c38:	4b1f      	ldr	r3, [pc, #124]	; (80cb8 <TWI0_Handler+0x19c>)
   80c3a:	681b      	ldr	r3, [r3, #0]
   80c3c:	4798      	blx	r3
        }

        twiBusy = false;
   80c3e:	4b1c      	ldr	r3, [pc, #112]	; (80cb0 <TWI0_Handler+0x194>)
   80c40:	2200      	movs	r2, #0
   80c42:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   80c44:	687b      	ldr	r3, [r7, #4]
   80c46:	f403 7350 	and.w	r3, r3, #832	; 0x340
   80c4a:	2b00      	cmp	r3, #0
   80c4c:	d019      	beq.n	80c82 <TWI0_Handler+0x166>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   80c4e:	f240 2102 	movw	r1, #514	; 0x202
   80c52:	4811      	ldr	r0, [pc, #68]	; (80c98 <TWI0_Handler+0x17c>)
   80c54:	4b11      	ldr	r3, [pc, #68]	; (80c9c <TWI0_Handler+0x180>)
   80c56:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   80c58:	687b      	ldr	r3, [r7, #4]
   80c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
   80c5e:	2b00      	cmp	r3, #0
   80c60:	d102      	bne.n	80c68 <TWI0_Handler+0x14c>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   80c62:	4b0a      	ldr	r3, [pc, #40]	; (80c8c <TWI0_Handler+0x170>)
   80c64:	2202      	movs	r2, #2
   80c66:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   80c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80c6c:	4807      	ldr	r0, [pc, #28]	; (80c8c <TWI0_Handler+0x170>)
   80c6e:	4b0c      	ldr	r3, [pc, #48]	; (80ca0 <TWI0_Handler+0x184>)
   80c70:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   80c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80c76:	4805      	ldr	r0, [pc, #20]	; (80c8c <TWI0_Handler+0x170>)
   80c78:	4b09      	ldr	r3, [pc, #36]	; (80ca0 <TWI0_Handler+0x184>)
   80c7a:	4798      	blx	r3

        twiBusy = false;
   80c7c:	4b0c      	ldr	r3, [pc, #48]	; (80cb0 <TWI0_Handler+0x194>)
   80c7e:	2200      	movs	r2, #0
   80c80:	701a      	strb	r2, [r3, #0]
	}
}
   80c82:	bf00      	nop
   80c84:	370c      	adds	r7, #12
   80c86:	46bd      	mov	sp, r7
   80c88:	bd90      	pop	{r4, r7, pc}
   80c8a:	bf00      	nop
   80c8c:	4008c000 	.word	0x4008c000
   80c90:	00080cf5 	.word	0x00080cf5
   80c94:	00080d0b 	.word	0x00080d0b
   80c98:	4008c100 	.word	0x4008c100
   80c9c:	0008020b 	.word	0x0008020b
   80ca0:	00080cd7 	.word	0x00080cd7
   80ca4:	00080cbd 	.word	0x00080cbd
   80ca8:	20070b74 	.word	0x20070b74
   80cac:	20070f80 	.word	0x20070f80
   80cb0:	20070f7c 	.word	0x20070f7c
   80cb4:	20070d78 	.word	0x20070d78
   80cb8:	20070f84 	.word	0x20070f84

00080cbc <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   80cbc:	b480      	push	{r7}
   80cbe:	b083      	sub	sp, #12
   80cc0:	af00      	add	r7, sp, #0
   80cc2:	6078      	str	r0, [r7, #4]
   80cc4:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   80cc6:	687b      	ldr	r3, [r7, #4]
   80cc8:	683a      	ldr	r2, [r7, #0]
   80cca:	625a      	str	r2, [r3, #36]	; 0x24
}
   80ccc:	bf00      	nop
   80cce:	370c      	adds	r7, #12
   80cd0:	46bd      	mov	sp, r7
   80cd2:	bc80      	pop	{r7}
   80cd4:	4770      	bx	lr

00080cd6 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   80cd6:	b480      	push	{r7}
   80cd8:	b083      	sub	sp, #12
   80cda:	af00      	add	r7, sp, #0
   80cdc:	6078      	str	r0, [r7, #4]
   80cde:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   80ce0:	687b      	ldr	r3, [r7, #4]
   80ce2:	683a      	ldr	r2, [r7, #0]
   80ce4:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   80ce6:	687b      	ldr	r3, [r7, #4]
   80ce8:	6a1b      	ldr	r3, [r3, #32]
}
   80cea:	bf00      	nop
   80cec:	370c      	adds	r7, #12
   80cee:	46bd      	mov	sp, r7
   80cf0:	bc80      	pop	{r7}
   80cf2:	4770      	bx	lr

00080cf4 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   80cf4:	b480      	push	{r7}
   80cf6:	b083      	sub	sp, #12
   80cf8:	af00      	add	r7, sp, #0
   80cfa:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   80cfc:	687b      	ldr	r3, [r7, #4]
   80cfe:	6a1b      	ldr	r3, [r3, #32]
}
   80d00:	4618      	mov	r0, r3
   80d02:	370c      	adds	r7, #12
   80d04:	46bd      	mov	sp, r7
   80d06:	bc80      	pop	{r7}
   80d08:	4770      	bx	lr

00080d0a <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   80d0a:	b480      	push	{r7}
   80d0c:	b083      	sub	sp, #12
   80d0e:	af00      	add	r7, sp, #0
   80d10:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   80d12:	687b      	ldr	r3, [r7, #4]
   80d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   80d16:	4618      	mov	r0, r3
   80d18:	370c      	adds	r7, #12
   80d1a:	46bd      	mov	sp, r7
   80d1c:	bc80      	pop	{r7}
   80d1e:	4770      	bx	lr

00080d20 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   80d20:	b480      	push	{r7}
   80d22:	b083      	sub	sp, #12
   80d24:	af00      	add	r7, sp, #0
   80d26:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80d28:	687b      	ldr	r3, [r7, #4]
   80d2a:	2280      	movs	r2, #128	; 0x80
   80d2c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   80d2e:	687b      	ldr	r3, [r7, #4]
   80d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   80d32:	bf00      	nop
   80d34:	370c      	adds	r7, #12
   80d36:	46bd      	mov	sp, r7
   80d38:	bc80      	pop	{r7}
   80d3a:	4770      	bx	lr

00080d3c <osc_get_rate>:
{
   80d3c:	b480      	push	{r7}
   80d3e:	b083      	sub	sp, #12
   80d40:	af00      	add	r7, sp, #0
   80d42:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80d44:	687b      	ldr	r3, [r7, #4]
   80d46:	2b07      	cmp	r3, #7
   80d48:	d825      	bhi.n	80d96 <osc_get_rate+0x5a>
   80d4a:	a201      	add	r2, pc, #4	; (adr r2, 80d50 <osc_get_rate+0x14>)
   80d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d50:	00080d71 	.word	0x00080d71
   80d54:	00080d77 	.word	0x00080d77
   80d58:	00080d7d 	.word	0x00080d7d
   80d5c:	00080d83 	.word	0x00080d83
   80d60:	00080d87 	.word	0x00080d87
   80d64:	00080d8b 	.word	0x00080d8b
   80d68:	00080d8f 	.word	0x00080d8f
   80d6c:	00080d93 	.word	0x00080d93
		return OSC_SLCK_32K_RC_HZ;
   80d70:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80d74:	e010      	b.n	80d98 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   80d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80d7a:	e00d      	b.n	80d98 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   80d7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80d80:	e00a      	b.n	80d98 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   80d82:	4b08      	ldr	r3, [pc, #32]	; (80da4 <osc_get_rate+0x68>)
   80d84:	e008      	b.n	80d98 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   80d86:	4b08      	ldr	r3, [pc, #32]	; (80da8 <osc_get_rate+0x6c>)
   80d88:	e006      	b.n	80d98 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   80d8a:	4b08      	ldr	r3, [pc, #32]	; (80dac <osc_get_rate+0x70>)
   80d8c:	e004      	b.n	80d98 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   80d8e:	4b07      	ldr	r3, [pc, #28]	; (80dac <osc_get_rate+0x70>)
   80d90:	e002      	b.n	80d98 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   80d92:	4b06      	ldr	r3, [pc, #24]	; (80dac <osc_get_rate+0x70>)
   80d94:	e000      	b.n	80d98 <osc_get_rate+0x5c>
	return 0;
   80d96:	2300      	movs	r3, #0
}
   80d98:	4618      	mov	r0, r3
   80d9a:	370c      	adds	r7, #12
   80d9c:	46bd      	mov	sp, r7
   80d9e:	bc80      	pop	{r7}
   80da0:	4770      	bx	lr
   80da2:	bf00      	nop
   80da4:	003d0900 	.word	0x003d0900
   80da8:	007a1200 	.word	0x007a1200
   80dac:	00b71b00 	.word	0x00b71b00

00080db0 <sysclk_get_main_hz>:
{
   80db0:	b580      	push	{r7, lr}
   80db2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   80db4:	2006      	movs	r0, #6
   80db6:	4b04      	ldr	r3, [pc, #16]	; (80dc8 <sysclk_get_main_hz+0x18>)
   80db8:	4798      	blx	r3
   80dba:	4602      	mov	r2, r0
   80dbc:	4613      	mov	r3, r2
   80dbe:	00db      	lsls	r3, r3, #3
   80dc0:	1a9b      	subs	r3, r3, r2
   80dc2:	005b      	lsls	r3, r3, #1
}
   80dc4:	4618      	mov	r0, r3
   80dc6:	bd80      	pop	{r7, pc}
   80dc8:	00080d3d 	.word	0x00080d3d

00080dcc <sysclk_get_peripheral_hz>:
{
   80dcc:	b580      	push	{r7, lr}
   80dce:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   80dd0:	4b02      	ldr	r3, [pc, #8]	; (80ddc <sysclk_get_peripheral_hz+0x10>)
   80dd2:	4798      	blx	r3
   80dd4:	4603      	mov	r3, r0
   80dd6:	085b      	lsrs	r3, r3, #1
}
   80dd8:	4618      	mov	r0, r3
   80dda:	bd80      	pop	{r7, pc}
   80ddc:	00080db1 	.word	0x00080db1

00080de0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80de0:	b580      	push	{r7, lr}
   80de2:	b082      	sub	sp, #8
   80de4:	af00      	add	r7, sp, #0
   80de6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80de8:	6878      	ldr	r0, [r7, #4]
   80dea:	4b03      	ldr	r3, [pc, #12]	; (80df8 <sysclk_enable_peripheral_clock+0x18>)
   80dec:	4798      	blx	r3
}
   80dee:	bf00      	nop
   80df0:	3708      	adds	r7, #8
   80df2:	46bd      	mov	sp, r7
   80df4:	bd80      	pop	{r7, pc}
   80df6:	bf00      	nop
   80df8:	00082875 	.word	0x00082875

00080dfc <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   80dfc:	b580      	push	{r7, lr}
   80dfe:	b082      	sub	sp, #8
   80e00:	af00      	add	r7, sp, #0
   80e02:	6078      	str	r0, [r7, #4]
   80e04:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   80e06:	4b10      	ldr	r3, [pc, #64]	; (80e48 <twi_master_setup+0x4c>)
   80e08:	4798      	blx	r3
   80e0a:	4602      	mov	r2, r0
   80e0c:	683b      	ldr	r3, [r7, #0]
   80e0e:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   80e10:	683b      	ldr	r3, [r7, #0]
   80e12:	2200      	movs	r2, #0
   80e14:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   80e16:	687b      	ldr	r3, [r7, #4]
   80e18:	4a0c      	ldr	r2, [pc, #48]	; (80e4c <twi_master_setup+0x50>)
   80e1a:	4293      	cmp	r3, r2
   80e1c:	d103      	bne.n	80e26 <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   80e1e:	2016      	movs	r0, #22
   80e20:	4b0b      	ldr	r3, [pc, #44]	; (80e50 <twi_master_setup+0x54>)
   80e22:	4798      	blx	r3
   80e24:	e006      	b.n	80e34 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   80e26:	687b      	ldr	r3, [r7, #4]
   80e28:	4a0a      	ldr	r2, [pc, #40]	; (80e54 <twi_master_setup+0x58>)
   80e2a:	4293      	cmp	r3, r2
   80e2c:	d102      	bne.n	80e34 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   80e2e:	2017      	movs	r0, #23
   80e30:	4b07      	ldr	r3, [pc, #28]	; (80e50 <twi_master_setup+0x54>)
   80e32:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80e34:	6839      	ldr	r1, [r7, #0]
   80e36:	6878      	ldr	r0, [r7, #4]
   80e38:	4b07      	ldr	r3, [pc, #28]	; (80e58 <twi_master_setup+0x5c>)
   80e3a:	4798      	blx	r3
   80e3c:	4603      	mov	r3, r0
}
   80e3e:	4618      	mov	r0, r3
   80e40:	3708      	adds	r7, #8
   80e42:	46bd      	mov	sp, r7
   80e44:	bd80      	pop	{r7, pc}
   80e46:	bf00      	nop
   80e48:	00080dcd 	.word	0x00080dcd
   80e4c:	4008c000 	.word	0x4008c000
   80e50:	00080de1 	.word	0x00080de1
   80e54:	40090000 	.word	0x40090000
   80e58:	00080849 	.word	0x00080849

00080e5c <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   80e5c:	b580      	push	{r7, lr}
   80e5e:	b082      	sub	sp, #8
   80e60:	af00      	add	r7, sp, #0
    twi_package_t *tx_packet = twi_get_tx_packet();
   80e62:	4b29      	ldr	r3, [pc, #164]	; (80f08 <lcd_init+0xac>)
   80e64:	4798      	blx	r3
   80e66:	6078      	str	r0, [r7, #4]

    tx_packet->chip = 0x27;
   80e68:	687b      	ldr	r3, [r7, #4]
   80e6a:	2227      	movs	r2, #39	; 0x27
   80e6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
    tx_packet->addr[0] = 0x00;
   80e70:	687b      	ldr	r3, [r7, #4]
   80e72:	2200      	movs	r2, #0
   80e74:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   80e76:	687b      	ldr	r3, [r7, #4]
   80e78:	2200      	movs	r2, #0
   80e7a:	605a      	str	r2, [r3, #4]
    
    twi_set_tx_callback(lcd_callback);
   80e7c:	4823      	ldr	r0, [pc, #140]	; (80f0c <lcd_init+0xb0>)
   80e7e:	4b24      	ldr	r3, [pc, #144]	; (80f10 <lcd_init+0xb4>)
   80e80:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   80e82:	220c      	movs	r2, #12
   80e84:	2100      	movs	r1, #0
   80e86:	4823      	ldr	r0, [pc, #140]	; (80f14 <lcd_init+0xb8>)
   80e88:	4b23      	ldr	r3, [pc, #140]	; (80f18 <lcd_init+0xbc>)
   80e8a:	4798      	blx	r3
    twiConfig.speed = 100000;
   80e8c:	4b21      	ldr	r3, [pc, #132]	; (80f14 <lcd_init+0xb8>)
   80e8e:	4a23      	ldr	r2, [pc, #140]	; (80f1c <lcd_init+0xc0>)
   80e90:	605a      	str	r2, [r3, #4]
    twi_master_setup(TWI0, &twiConfig);
   80e92:	4920      	ldr	r1, [pc, #128]	; (80f14 <lcd_init+0xb8>)
   80e94:	4822      	ldr	r0, [pc, #136]	; (80f20 <lcd_init+0xc4>)
   80e96:	4b23      	ldr	r3, [pc, #140]	; (80f24 <lcd_init+0xc8>)
   80e98:	4798      	blx	r3

    backlight = LCD_LIGHT_OFF;
   80e9a:	4b23      	ldr	r3, [pc, #140]	; (80f28 <lcd_init+0xcc>)
   80e9c:	2200      	movs	r2, #0
   80e9e:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   80ea0:	2103      	movs	r1, #3
   80ea2:	2000      	movs	r0, #0
   80ea4:	4b21      	ldr	r3, [pc, #132]	; (80f2c <lcd_init+0xd0>)
   80ea6:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   80ea8:	2006      	movs	r0, #6
   80eaa:	4b21      	ldr	r3, [pc, #132]	; (80f30 <lcd_init+0xd4>)
   80eac:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   80eae:	2103      	movs	r1, #3
   80eb0:	2000      	movs	r0, #0
   80eb2:	4b1e      	ldr	r3, [pc, #120]	; (80f2c <lcd_init+0xd0>)
   80eb4:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   80eb6:	2006      	movs	r0, #6
   80eb8:	4b1d      	ldr	r3, [pc, #116]	; (80f30 <lcd_init+0xd4>)
   80eba:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   80ebc:	2103      	movs	r1, #3
   80ebe:	2000      	movs	r0, #0
   80ec0:	4b1a      	ldr	r3, [pc, #104]	; (80f2c <lcd_init+0xd0>)
   80ec2:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   80ec4:	2006      	movs	r0, #6
   80ec6:	4b1a      	ldr	r3, [pc, #104]	; (80f30 <lcd_init+0xd4>)
   80ec8:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   80eca:	2102      	movs	r1, #2
   80ecc:	2000      	movs	r0, #0
   80ece:	4b17      	ldr	r3, [pc, #92]	; (80f2c <lcd_init+0xd0>)
   80ed0:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   80ed2:	2128      	movs	r1, #40	; 0x28
   80ed4:	2000      	movs	r0, #0
   80ed6:	4b17      	ldr	r3, [pc, #92]	; (80f34 <lcd_init+0xd8>)
   80ed8:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   80eda:	2108      	movs	r1, #8
   80edc:	2000      	movs	r0, #0
   80ede:	4b15      	ldr	r3, [pc, #84]	; (80f34 <lcd_init+0xd8>)
   80ee0:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   80ee2:	2101      	movs	r1, #1
   80ee4:	2000      	movs	r0, #0
   80ee6:	4b13      	ldr	r3, [pc, #76]	; (80f34 <lcd_init+0xd8>)
   80ee8:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   80eea:	2003      	movs	r0, #3
   80eec:	4b10      	ldr	r3, [pc, #64]	; (80f30 <lcd_init+0xd4>)
   80eee:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   80ef0:	2106      	movs	r1, #6
   80ef2:	2000      	movs	r0, #0
   80ef4:	4b0f      	ldr	r3, [pc, #60]	; (80f34 <lcd_init+0xd8>)
   80ef6:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   80ef8:	210c      	movs	r1, #12
   80efa:	2000      	movs	r0, #0
   80efc:	4b0d      	ldr	r3, [pc, #52]	; (80f34 <lcd_init+0xd8>)
   80efe:	4798      	blx	r3
}
   80f00:	bf00      	nop
   80f02:	3708      	adds	r7, #8
   80f04:	46bd      	mov	sp, r7
   80f06:	bd80      	pop	{r7, pc}
   80f08:	00080a29 	.word	0x00080a29
   80f0c:	0008165d 	.word	0x0008165d
   80f10:	00080b01 	.word	0x00080b01
   80f14:	20070f94 	.word	0x20070f94
   80f18:	00083511 	.word	0x00083511
   80f1c:	000186a0 	.word	0x000186a0
   80f20:	4008c000 	.word	0x4008c000
   80f24:	00080dfd 	.word	0x00080dfd
   80f28:	20070f88 	.word	0x20070f88
   80f2c:	00081435 	.word	0x00081435
   80f30:	00081f1d 	.word	0x00081f1d
   80f34:	00081531 	.word	0x00081531

00080f38 <lcd_set_backlight>:

void lcd_set_backlight(backlight_t state)
{
   80f38:	b580      	push	{r7, lr}
   80f3a:	b082      	sub	sp, #8
   80f3c:	af00      	add	r7, sp, #0
   80f3e:	4603      	mov	r3, r0
   80f40:	71fb      	strb	r3, [r7, #7]
    backlight = state;
   80f42:	4a07      	ldr	r2, [pc, #28]	; (80f60 <lcd_set_backlight+0x28>)
   80f44:	79fb      	ldrb	r3, [r7, #7]
   80f46:	7013      	strb	r3, [r2, #0]
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   80f48:	2101      	movs	r1, #1
   80f4a:	2000      	movs	r0, #0
   80f4c:	4b05      	ldr	r3, [pc, #20]	; (80f64 <lcd_set_backlight+0x2c>)
   80f4e:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   80f50:	2003      	movs	r0, #3
   80f52:	4b05      	ldr	r3, [pc, #20]	; (80f68 <lcd_set_backlight+0x30>)
   80f54:	4798      	blx	r3
}
   80f56:	bf00      	nop
   80f58:	3708      	adds	r7, #8
   80f5a:	46bd      	mov	sp, r7
   80f5c:	bd80      	pop	{r7, pc}
   80f5e:	bf00      	nop
   80f60:	20070f88 	.word	0x20070f88
   80f64:	00081531 	.word	0x00081531
   80f68:	00081f1d 	.word	0x00081f1d

00080f6c <lcd_clear>:

void lcd_clear(void)
{
   80f6c:	b580      	push	{r7, lr}
   80f6e:	af00      	add	r7, sp, #0
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   80f70:	2101      	movs	r1, #1
   80f72:	2000      	movs	r0, #0
   80f74:	4b03      	ldr	r3, [pc, #12]	; (80f84 <lcd_clear+0x18>)
   80f76:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   80f78:	2003      	movs	r0, #3
   80f7a:	4b03      	ldr	r3, [pc, #12]	; (80f88 <lcd_clear+0x1c>)
   80f7c:	4798      	blx	r3
}
   80f7e:	bf00      	nop
   80f80:	bd80      	pop	{r7, pc}
   80f82:	bf00      	nop
   80f84:	00081531 	.word	0x00081531
   80f88:	00081f1d 	.word	0x00081f1d

00080f8c <lcd_print_i>:

void lcd_print_i(int8_t line, uint8_t col, uint32_t data)
{
   80f8c:	b580      	push	{r7, lr}
   80f8e:	b086      	sub	sp, #24
   80f90:	af00      	add	r7, sp, #0
   80f92:	4603      	mov	r3, r0
   80f94:	603a      	str	r2, [r7, #0]
   80f96:	71fb      	strb	r3, [r7, #7]
   80f98:	460b      	mov	r3, r1
   80f9a:	71bb      	strb	r3, [r7, #6]
    char str[11];

    sprintf(str, "%10lu", data);
   80f9c:	f107 030c 	add.w	r3, r7, #12
   80fa0:	683a      	ldr	r2, [r7, #0]
   80fa2:	4908      	ldr	r1, [pc, #32]	; (80fc4 <lcd_print_i+0x38>)
   80fa4:	4618      	mov	r0, r3
   80fa6:	4b08      	ldr	r3, [pc, #32]	; (80fc8 <lcd_print_i+0x3c>)
   80fa8:	4798      	blx	r3
    lcd_print_s(line, col, str);
   80faa:	f107 020c 	add.w	r2, r7, #12
   80fae:	79b9      	ldrb	r1, [r7, #6]
   80fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80fb4:	4618      	mov	r0, r3
   80fb6:	4b05      	ldr	r3, [pc, #20]	; (80fcc <lcd_print_i+0x40>)
   80fb8:	4798      	blx	r3
}
   80fba:	bf00      	nop
   80fbc:	3718      	adds	r7, #24
   80fbe:	46bd      	mov	sp, r7
   80fc0:	bd80      	pop	{r7, pc}
   80fc2:	bf00      	nop
   80fc4:	00087c84 	.word	0x00087c84
   80fc8:	000835ad 	.word	0x000835ad
   80fcc:	00080fd1 	.word	0x00080fd1

00080fd0 <lcd_print_s>:

void lcd_print_s(int8_t line, uint8_t col, const char* str)
{
   80fd0:	b590      	push	{r4, r7, lr}
   80fd2:	b087      	sub	sp, #28
   80fd4:	af00      	add	r7, sp, #0
   80fd6:	4603      	mov	r3, r0
   80fd8:	603a      	str	r2, [r7, #0]
   80fda:	71fb      	strb	r3, [r7, #7]
   80fdc:	460b      	mov	r3, r1
   80fde:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   80fe0:	4b76      	ldr	r3, [pc, #472]	; (811bc <lcd_print_s+0x1ec>)
   80fe2:	4798      	blx	r3
   80fe4:	6138      	str	r0, [r7, #16]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    
    while(lcdIsBusy | twi_is_busy())
   80fe6:	e019      	b.n	8101c <lcd_print_s+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   80fe8:	4b75      	ldr	r3, [pc, #468]	; (811c0 <lcd_print_s+0x1f0>)
   80fea:	4798      	blx	r3
   80fec:	4602      	mov	r2, r0
   80fee:	4b75      	ldr	r3, [pc, #468]	; (811c4 <lcd_print_s+0x1f4>)
   80ff0:	681b      	ldr	r3, [r3, #0]
   80ff2:	1ad3      	subs	r3, r2, r3
   80ff4:	2b64      	cmp	r3, #100	; 0x64
   80ff6:	d911      	bls.n	8101c <lcd_print_s+0x4c>
        {
            lcdIsBusy = false;
   80ff8:	4b73      	ldr	r3, [pc, #460]	; (811c8 <lcd_print_s+0x1f8>)
   80ffa:	2200      	movs	r2, #0
   80ffc:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   80ffe:	4b73      	ldr	r3, [pc, #460]	; (811cc <lcd_print_s+0x1fc>)
   81000:	681b      	ldr	r3, [r3, #0]
   81002:	3301      	adds	r3, #1
   81004:	4a71      	ldr	r2, [pc, #452]	; (811cc <lcd_print_s+0x1fc>)
   81006:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81008:	f240 2102 	movw	r1, #514	; 0x202
   8100c:	4870      	ldr	r0, [pc, #448]	; (811d0 <lcd_print_s+0x200>)
   8100e:	4b71      	ldr	r3, [pc, #452]	; (811d4 <lcd_print_s+0x204>)
   81010:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81012:	4971      	ldr	r1, [pc, #452]	; (811d8 <lcd_print_s+0x208>)
   81014:	4871      	ldr	r0, [pc, #452]	; (811dc <lcd_print_s+0x20c>)
   81016:	4b72      	ldr	r3, [pc, #456]	; (811e0 <lcd_print_s+0x210>)
   81018:	4798      	blx	r3
            break;
   8101a:	e009      	b.n	81030 <lcd_print_s+0x60>
    while(lcdIsBusy | twi_is_busy())
   8101c:	4b71      	ldr	r3, [pc, #452]	; (811e4 <lcd_print_s+0x214>)
   8101e:	4798      	blx	r3
   81020:	4603      	mov	r3, r0
   81022:	461a      	mov	r2, r3
   81024:	4b68      	ldr	r3, [pc, #416]	; (811c8 <lcd_print_s+0x1f8>)
   81026:	781b      	ldrb	r3, [r3, #0]
   81028:	4313      	orrs	r3, r2
   8102a:	b2db      	uxtb	r3, r3
   8102c:	2b00      	cmp	r3, #0
   8102e:	d1db      	bne.n	80fe8 <lcd_print_s+0x18>
        }
    }
    
    // Calculate display address
    switch(line)
   81030:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81034:	3b01      	subs	r3, #1
   81036:	2b03      	cmp	r3, #3
   81038:	f200 80bb 	bhi.w	811b2 <lcd_print_s+0x1e2>
   8103c:	a201      	add	r2, pc, #4	; (adr r2, 81044 <lcd_print_s+0x74>)
   8103e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81042:	bf00      	nop
   81044:	00081055 	.word	0x00081055
   81048:	0008105b 	.word	0x0008105b
   8104c:	00081061 	.word	0x00081061
   81050:	00081067 	.word	0x00081067
    {
        case 1:
            addr = 0x80;          // set address to start of line 1
   81054:	2380      	movs	r3, #128	; 0x80
   81056:	75fb      	strb	r3, [r7, #23]
            break;
   81058:	e008      	b.n	8106c <lcd_print_s+0x9c>
        case 2:
            addr = 0x80 | 0x40;   // set address to start of line 2
   8105a:	23c0      	movs	r3, #192	; 0xc0
   8105c:	75fb      	strb	r3, [r7, #23]
            break;
   8105e:	e005      	b.n	8106c <lcd_print_s+0x9c>
        case 3:
            addr = 0x80 | 0x14;   // set address to start of line 3
   81060:	2394      	movs	r3, #148	; 0x94
   81062:	75fb      	strb	r3, [r7, #23]
            break;
   81064:	e002      	b.n	8106c <lcd_print_s+0x9c>
        case 4:
            addr = 0x80 | 0x54;   // set address to start of line 4
   81066:	23d4      	movs	r3, #212	; 0xd4
   81068:	75fb      	strb	r3, [r7, #23]
            break;
   8106a:	bf00      	nop
        default:
            return;               // return immediately, if value is out of range
            break;
    }
    addr += col;  // set column in the selected line
   8106c:	7dfa      	ldrb	r2, [r7, #23]
   8106e:	79bb      	ldrb	r3, [r7, #6]
   81070:	4413      	add	r3, r2
   81072:	75fb      	strb	r3, [r7, #23]

    // Set cursor
    cmd = LCD_FUNTION_WRITE | backlight;
   81074:	4b5c      	ldr	r3, [pc, #368]	; (811e8 <lcd_print_s+0x218>)
   81076:	781b      	ldrb	r3, [r3, #0]
   81078:	73fb      	strb	r3, [r7, #15]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   8107a:	7dfb      	ldrb	r3, [r7, #23]
   8107c:	f023 030f 	bic.w	r3, r3, #15
   81080:	b2da      	uxtb	r2, r3
   81082:	7bfb      	ldrb	r3, [r7, #15]
   81084:	4313      	orrs	r3, r2
   81086:	b2db      	uxtb	r3, r3
   81088:	f043 0304 	orr.w	r3, r3, #4
   8108c:	b2da      	uxtb	r2, r3
   8108e:	693b      	ldr	r3, [r7, #16]
   81090:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   81092:	f997 3017 	ldrsb.w	r3, [r7, #23]
   81096:	f023 030f 	bic.w	r3, r3, #15
   8109a:	b25a      	sxtb	r2, r3
   8109c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   810a0:	4313      	orrs	r3, r2
   810a2:	b25b      	sxtb	r3, r3
   810a4:	b2da      	uxtb	r2, r3
   810a6:	693b      	ldr	r3, [r7, #16]
   810a8:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   810aa:	7dfb      	ldrb	r3, [r7, #23]
   810ac:	011b      	lsls	r3, r3, #4
   810ae:	b2da      	uxtb	r2, r3
   810b0:	7bfb      	ldrb	r3, [r7, #15]
   810b2:	4313      	orrs	r3, r2
   810b4:	b2db      	uxtb	r3, r3
   810b6:	f043 0304 	orr.w	r3, r3, #4
   810ba:	b2da      	uxtb	r2, r3
   810bc:	693b      	ldr	r3, [r7, #16]
   810be:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   810c0:	7dfb      	ldrb	r3, [r7, #23]
   810c2:	011b      	lsls	r3, r3, #4
   810c4:	b25a      	sxtb	r2, r3
   810c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
   810ca:	4313      	orrs	r3, r2
   810cc:	b25b      	sxtb	r3, r3
   810ce:	b2da      	uxtb	r2, r3
   810d0:	693b      	ldr	r3, [r7, #16]
   810d2:	72da      	strb	r2, [r3, #11]
    
    // write string ...
    cmd = LCD_WRITE_DDR | backlight;
   810d4:	4b44      	ldr	r3, [pc, #272]	; (811e8 <lcd_print_s+0x218>)
   810d6:	781b      	ldrb	r3, [r3, #0]
   810d8:	f043 0301 	orr.w	r3, r3, #1
   810dc:	73fb      	strb	r3, [r7, #15]
    for(count = 0; count < strlen(str); count++)
   810de:	2300      	movs	r3, #0
   810e0:	75bb      	strb	r3, [r7, #22]
   810e2:	e04b      	b.n	8117c <lcd_print_s+0x1ac>
    {
        byte = str[count];
   810e4:	7dbb      	ldrb	r3, [r7, #22]
   810e6:	683a      	ldr	r2, [r7, #0]
   810e8:	4413      	add	r3, r2
   810ea:	781b      	ldrb	r3, [r3, #0]
   810ec:	73bb      	strb	r3, [r7, #14]
        tx_packet->buffer[4 + count * 4 + 0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   810ee:	7dbb      	ldrb	r3, [r7, #22]
   810f0:	3301      	adds	r3, #1
   810f2:	009b      	lsls	r3, r3, #2
   810f4:	7bba      	ldrb	r2, [r7, #14]
   810f6:	f022 020f 	bic.w	r2, r2, #15
   810fa:	b2d1      	uxtb	r1, r2
   810fc:	7bfa      	ldrb	r2, [r7, #15]
   810fe:	430a      	orrs	r2, r1
   81100:	b2d2      	uxtb	r2, r2
   81102:	f042 0204 	orr.w	r2, r2, #4
   81106:	b2d1      	uxtb	r1, r2
   81108:	693a      	ldr	r2, [r7, #16]
   8110a:	4413      	add	r3, r2
   8110c:	460a      	mov	r2, r1
   8110e:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   81110:	7dbb      	ldrb	r3, [r7, #22]
   81112:	3301      	adds	r3, #1
   81114:	009b      	lsls	r3, r3, #2
   81116:	3301      	adds	r3, #1
   81118:	f997 200e 	ldrsb.w	r2, [r7, #14]
   8111c:	f022 020f 	bic.w	r2, r2, #15
   81120:	b251      	sxtb	r1, r2
   81122:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81126:	430a      	orrs	r2, r1
   81128:	b252      	sxtb	r2, r2
   8112a:	b2d1      	uxtb	r1, r2
   8112c:	693a      	ldr	r2, [r7, #16]
   8112e:	4413      	add	r3, r2
   81130:	460a      	mov	r2, r1
   81132:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81134:	7dbb      	ldrb	r3, [r7, #22]
   81136:	3301      	adds	r3, #1
   81138:	009b      	lsls	r3, r3, #2
   8113a:	3302      	adds	r3, #2
   8113c:	7bba      	ldrb	r2, [r7, #14]
   8113e:	0112      	lsls	r2, r2, #4
   81140:	b2d1      	uxtb	r1, r2
   81142:	7bfa      	ldrb	r2, [r7, #15]
   81144:	430a      	orrs	r2, r1
   81146:	b2d2      	uxtb	r2, r2
   81148:	f042 0204 	orr.w	r2, r2, #4
   8114c:	b2d1      	uxtb	r1, r2
   8114e:	693a      	ldr	r2, [r7, #16]
   81150:	4413      	add	r3, r2
   81152:	460a      	mov	r2, r1
   81154:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81156:	7dbb      	ldrb	r3, [r7, #22]
   81158:	3301      	adds	r3, #1
   8115a:	009b      	lsls	r3, r3, #2
   8115c:	3303      	adds	r3, #3
   8115e:	7bba      	ldrb	r2, [r7, #14]
   81160:	0112      	lsls	r2, r2, #4
   81162:	b251      	sxtb	r1, r2
   81164:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81168:	430a      	orrs	r2, r1
   8116a:	b252      	sxtb	r2, r2
   8116c:	b2d1      	uxtb	r1, r2
   8116e:	693a      	ldr	r2, [r7, #16]
   81170:	4413      	add	r3, r2
   81172:	460a      	mov	r2, r1
   81174:	721a      	strb	r2, [r3, #8]
    for(count = 0; count < strlen(str); count++)
   81176:	7dbb      	ldrb	r3, [r7, #22]
   81178:	3301      	adds	r3, #1
   8117a:	75bb      	strb	r3, [r7, #22]
   8117c:	7dbc      	ldrb	r4, [r7, #22]
   8117e:	6838      	ldr	r0, [r7, #0]
   81180:	4b1a      	ldr	r3, [pc, #104]	; (811ec <lcd_print_s+0x21c>)
   81182:	4798      	blx	r3
   81184:	4603      	mov	r3, r0
   81186:	429c      	cmp	r4, r3
   81188:	d3ac      	bcc.n	810e4 <lcd_print_s+0x114>
    }
    tx_packet->length = 4 + count * 4;
   8118a:	7dbb      	ldrb	r3, [r7, #22]
   8118c:	3301      	adds	r3, #1
   8118e:	009b      	lsls	r3, r3, #2
   81190:	461a      	mov	r2, r3
   81192:	693b      	ldr	r3, [r7, #16]
   81194:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

    lcdIsBusy = true;
   81198:	4b0b      	ldr	r3, [pc, #44]	; (811c8 <lcd_print_s+0x1f8>)
   8119a:	2201      	movs	r2, #1
   8119c:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   8119e:	6939      	ldr	r1, [r7, #16]
   811a0:	480e      	ldr	r0, [pc, #56]	; (811dc <lcd_print_s+0x20c>)
   811a2:	4b13      	ldr	r3, [pc, #76]	; (811f0 <lcd_print_s+0x220>)
   811a4:	4798      	blx	r3
    lcdStartTicks = getTicks();
   811a6:	4b06      	ldr	r3, [pc, #24]	; (811c0 <lcd_print_s+0x1f0>)
   811a8:	4798      	blx	r3
   811aa:	4602      	mov	r2, r0
   811ac:	4b05      	ldr	r3, [pc, #20]	; (811c4 <lcd_print_s+0x1f4>)
   811ae:	601a      	str	r2, [r3, #0]
   811b0:	e000      	b.n	811b4 <lcd_print_s+0x1e4>
            return;               // return immediately, if value is out of range
   811b2:	bf00      	nop
}
   811b4:	371c      	adds	r7, #28
   811b6:	46bd      	mov	sp, r7
   811b8:	bd90      	pop	{r4, r7, pc}
   811ba:	bf00      	nop
   811bc:	00080a29 	.word	0x00080a29
   811c0:	00081f09 	.word	0x00081f09
   811c4:	20070f8c 	.word	0x20070f8c
   811c8:	20070f89 	.word	0x20070f89
   811cc:	20070f90 	.word	0x20070f90
   811d0:	4008c100 	.word	0x4008c100
   811d4:	0008020b 	.word	0x0008020b
   811d8:	20070f94 	.word	0x20070f94
   811dc:	4008c000 	.word	0x4008c000
   811e0:	00080dfd 	.word	0x00080dfd
   811e4:	00080a15 	.word	0x00080a15
   811e8:	20070f88 	.word	0x20070f88
   811ec:	000835f9 	.word	0x000835f9
   811f0:	00080a3d 	.word	0x00080a3d

000811f4 <lcd_print_m>:

void lcd_print_m(char* str[])
{
   811f4:	b590      	push	{r4, r7, lr}
   811f6:	b087      	sub	sp, #28
   811f8:	af00      	add	r7, sp, #0
   811fa:	6078      	str	r0, [r7, #4]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   811fc:	4b7f      	ldr	r3, [pc, #508]	; (813fc <lcd_print_m+0x208>)
   811fe:	4798      	blx	r3
   81200:	60f8      	str	r0, [r7, #12]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    uint8_t line;
    uint16_t index = 0;
   81202:	2300      	movs	r3, #0
   81204:	827b      	strh	r3, [r7, #18]
    
    while(lcdIsBusy | twi_is_busy())
   81206:	e019      	b.n	8123c <lcd_print_m+0x48>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81208:	4b7d      	ldr	r3, [pc, #500]	; (81400 <lcd_print_m+0x20c>)
   8120a:	4798      	blx	r3
   8120c:	4602      	mov	r2, r0
   8120e:	4b7d      	ldr	r3, [pc, #500]	; (81404 <lcd_print_m+0x210>)
   81210:	681b      	ldr	r3, [r3, #0]
   81212:	1ad3      	subs	r3, r2, r3
   81214:	2b64      	cmp	r3, #100	; 0x64
   81216:	d911      	bls.n	8123c <lcd_print_m+0x48>
        {
            lcdIsBusy = false;
   81218:	4b7b      	ldr	r3, [pc, #492]	; (81408 <lcd_print_m+0x214>)
   8121a:	2200      	movs	r2, #0
   8121c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   8121e:	4b7b      	ldr	r3, [pc, #492]	; (8140c <lcd_print_m+0x218>)
   81220:	681b      	ldr	r3, [r3, #0]
   81222:	3301      	adds	r3, #1
   81224:	4a79      	ldr	r2, [pc, #484]	; (8140c <lcd_print_m+0x218>)
   81226:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81228:	f240 2102 	movw	r1, #514	; 0x202
   8122c:	4878      	ldr	r0, [pc, #480]	; (81410 <lcd_print_m+0x21c>)
   8122e:	4b79      	ldr	r3, [pc, #484]	; (81414 <lcd_print_m+0x220>)
   81230:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81232:	4979      	ldr	r1, [pc, #484]	; (81418 <lcd_print_m+0x224>)
   81234:	4879      	ldr	r0, [pc, #484]	; (8141c <lcd_print_m+0x228>)
   81236:	4b7a      	ldr	r3, [pc, #488]	; (81420 <lcd_print_m+0x22c>)
   81238:	4798      	blx	r3
            break;
   8123a:	e009      	b.n	81250 <lcd_print_m+0x5c>
    while(lcdIsBusy | twi_is_busy())
   8123c:	4b79      	ldr	r3, [pc, #484]	; (81424 <lcd_print_m+0x230>)
   8123e:	4798      	blx	r3
   81240:	4603      	mov	r3, r0
   81242:	461a      	mov	r2, r3
   81244:	4b70      	ldr	r3, [pc, #448]	; (81408 <lcd_print_m+0x214>)
   81246:	781b      	ldrb	r3, [r3, #0]
   81248:	4313      	orrs	r3, r2
   8124a:	b2db      	uxtb	r3, r3
   8124c:	2b00      	cmp	r3, #0
   8124e:	d1db      	bne.n	81208 <lcd_print_m+0x14>
        }
    }

    for(line = 0; line < 4; line++)
   81250:	2300      	movs	r3, #0
   81252:	757b      	strb	r3, [r7, #21]
   81254:	e0ba      	b.n	813cc <lcd_print_m+0x1d8>
    {
        // Calculate display address
        switch(line)
   81256:	7d7b      	ldrb	r3, [r7, #21]
   81258:	2b02      	cmp	r3, #2
   8125a:	d006      	beq.n	8126a <lcd_print_m+0x76>
   8125c:	2b03      	cmp	r3, #3
   8125e:	d007      	beq.n	81270 <lcd_print_m+0x7c>
   81260:	2b01      	cmp	r3, #1
   81262:	d108      	bne.n	81276 <lcd_print_m+0x82>
        {
            case 1:
                addr = 0x80 | 0x40;   // set address to start of line 2
   81264:	23c0      	movs	r3, #192	; 0xc0
   81266:	75fb      	strb	r3, [r7, #23]
                break;
   81268:	e008      	b.n	8127c <lcd_print_m+0x88>
            case 2:
                addr = 0x80 | 0x14;   // set address to start of line 3
   8126a:	2394      	movs	r3, #148	; 0x94
   8126c:	75fb      	strb	r3, [r7, #23]
                break;
   8126e:	e005      	b.n	8127c <lcd_print_m+0x88>
            case 3:
                addr = 0x80 | 0x54;   // set address to start of line 4
   81270:	23d4      	movs	r3, #212	; 0xd4
   81272:	75fb      	strb	r3, [r7, #23]
                break;
   81274:	e002      	b.n	8127c <lcd_print_m+0x88>
            case 0:
            default:
                addr = 0x80;          // set address to start of line 1
   81276:	2380      	movs	r3, #128	; 0x80
   81278:	75fb      	strb	r3, [r7, #23]
                break;
   8127a:	bf00      	nop
        }

        // Set cursor
        cmd = LCD_FUNTION_WRITE | backlight;
   8127c:	4b6a      	ldr	r3, [pc, #424]	; (81428 <lcd_print_m+0x234>)
   8127e:	781b      	ldrb	r3, [r3, #0]
   81280:	72fb      	strb	r3, [r7, #11]
        tx_packet->buffer[index++] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   81282:	8a7b      	ldrh	r3, [r7, #18]
   81284:	1c5a      	adds	r2, r3, #1
   81286:	827a      	strh	r2, [r7, #18]
   81288:	4619      	mov	r1, r3
   8128a:	7dfb      	ldrb	r3, [r7, #23]
   8128c:	f023 030f 	bic.w	r3, r3, #15
   81290:	b2da      	uxtb	r2, r3
   81292:	7afb      	ldrb	r3, [r7, #11]
   81294:	4313      	orrs	r3, r2
   81296:	b2db      	uxtb	r3, r3
   81298:	f043 0304 	orr.w	r3, r3, #4
   8129c:	b2da      	uxtb	r2, r3
   8129e:	68fb      	ldr	r3, [r7, #12]
   812a0:	440b      	add	r3, r1
   812a2:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[index++] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   812a4:	8a7b      	ldrh	r3, [r7, #18]
   812a6:	1c5a      	adds	r2, r3, #1
   812a8:	827a      	strh	r2, [r7, #18]
   812aa:	4619      	mov	r1, r3
   812ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
   812b0:	f023 030f 	bic.w	r3, r3, #15
   812b4:	b25a      	sxtb	r2, r3
   812b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
   812ba:	4313      	orrs	r3, r2
   812bc:	b25b      	sxtb	r3, r3
   812be:	b2da      	uxtb	r2, r3
   812c0:	68fb      	ldr	r3, [r7, #12]
   812c2:	440b      	add	r3, r1
   812c4:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[index++] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   812c6:	8a7b      	ldrh	r3, [r7, #18]
   812c8:	1c5a      	adds	r2, r3, #1
   812ca:	827a      	strh	r2, [r7, #18]
   812cc:	4619      	mov	r1, r3
   812ce:	7dfb      	ldrb	r3, [r7, #23]
   812d0:	011b      	lsls	r3, r3, #4
   812d2:	b2da      	uxtb	r2, r3
   812d4:	7afb      	ldrb	r3, [r7, #11]
   812d6:	4313      	orrs	r3, r2
   812d8:	b2db      	uxtb	r3, r3
   812da:	f043 0304 	orr.w	r3, r3, #4
   812de:	b2da      	uxtb	r2, r3
   812e0:	68fb      	ldr	r3, [r7, #12]
   812e2:	440b      	add	r3, r1
   812e4:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[index++] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   812e6:	8a7b      	ldrh	r3, [r7, #18]
   812e8:	1c5a      	adds	r2, r3, #1
   812ea:	827a      	strh	r2, [r7, #18]
   812ec:	4619      	mov	r1, r3
   812ee:	7dfb      	ldrb	r3, [r7, #23]
   812f0:	011b      	lsls	r3, r3, #4
   812f2:	b25a      	sxtb	r2, r3
   812f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
   812f8:	4313      	orrs	r3, r2
   812fa:	b25b      	sxtb	r3, r3
   812fc:	b2da      	uxtb	r2, r3
   812fe:	68fb      	ldr	r3, [r7, #12]
   81300:	440b      	add	r3, r1
   81302:	721a      	strb	r2, [r3, #8]
    
        // write string ...
        cmd = LCD_WRITE_DDR | backlight;
   81304:	4b48      	ldr	r3, [pc, #288]	; (81428 <lcd_print_m+0x234>)
   81306:	781b      	ldrb	r3, [r3, #0]
   81308:	f043 0301 	orr.w	r3, r3, #1
   8130c:	72fb      	strb	r3, [r7, #11]
        for(count = 0; count < strlen(str[line]); count++)
   8130e:	2300      	movs	r3, #0
   81310:	75bb      	strb	r3, [r7, #22]
   81312:	e04c      	b.n	813ae <lcd_print_m+0x1ba>
        {
            byte = str[line][count];
   81314:	7d7b      	ldrb	r3, [r7, #21]
   81316:	009b      	lsls	r3, r3, #2
   81318:	687a      	ldr	r2, [r7, #4]
   8131a:	4413      	add	r3, r2
   8131c:	681a      	ldr	r2, [r3, #0]
   8131e:	7dbb      	ldrb	r3, [r7, #22]
   81320:	4413      	add	r3, r2
   81322:	781b      	ldrb	r3, [r3, #0]
   81324:	72bb      	strb	r3, [r7, #10]
            tx_packet->buffer[index++] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   81326:	8a7b      	ldrh	r3, [r7, #18]
   81328:	1c5a      	adds	r2, r3, #1
   8132a:	827a      	strh	r2, [r7, #18]
   8132c:	4619      	mov	r1, r3
   8132e:	7abb      	ldrb	r3, [r7, #10]
   81330:	f023 030f 	bic.w	r3, r3, #15
   81334:	b2da      	uxtb	r2, r3
   81336:	7afb      	ldrb	r3, [r7, #11]
   81338:	4313      	orrs	r3, r2
   8133a:	b2db      	uxtb	r3, r3
   8133c:	f043 0304 	orr.w	r3, r3, #4
   81340:	b2da      	uxtb	r2, r3
   81342:	68fb      	ldr	r3, [r7, #12]
   81344:	440b      	add	r3, r1
   81346:	721a      	strb	r2, [r3, #8]
            tx_packet->buffer[index++] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   81348:	8a7b      	ldrh	r3, [r7, #18]
   8134a:	1c5a      	adds	r2, r3, #1
   8134c:	827a      	strh	r2, [r7, #18]
   8134e:	4619      	mov	r1, r3
   81350:	f997 300a 	ldrsb.w	r3, [r7, #10]
   81354:	f023 030f 	bic.w	r3, r3, #15
   81358:	b25a      	sxtb	r2, r3
   8135a:	f997 300b 	ldrsb.w	r3, [r7, #11]
   8135e:	4313      	orrs	r3, r2
   81360:	b25b      	sxtb	r3, r3
   81362:	b2da      	uxtb	r2, r3
   81364:	68fb      	ldr	r3, [r7, #12]
   81366:	440b      	add	r3, r1
   81368:	721a      	strb	r2, [r3, #8]
            tx_packet->buffer[index++] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   8136a:	8a7b      	ldrh	r3, [r7, #18]
   8136c:	1c5a      	adds	r2, r3, #1
   8136e:	827a      	strh	r2, [r7, #18]
   81370:	4619      	mov	r1, r3
   81372:	7abb      	ldrb	r3, [r7, #10]
   81374:	011b      	lsls	r3, r3, #4
   81376:	b2da      	uxtb	r2, r3
   81378:	7afb      	ldrb	r3, [r7, #11]
   8137a:	4313      	orrs	r3, r2
   8137c:	b2db      	uxtb	r3, r3
   8137e:	f043 0304 	orr.w	r3, r3, #4
   81382:	b2da      	uxtb	r2, r3
   81384:	68fb      	ldr	r3, [r7, #12]
   81386:	440b      	add	r3, r1
   81388:	721a      	strb	r2, [r3, #8]
            tx_packet->buffer[index++] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   8138a:	8a7b      	ldrh	r3, [r7, #18]
   8138c:	1c5a      	adds	r2, r3, #1
   8138e:	827a      	strh	r2, [r7, #18]
   81390:	4619      	mov	r1, r3
   81392:	7abb      	ldrb	r3, [r7, #10]
   81394:	011b      	lsls	r3, r3, #4
   81396:	b25a      	sxtb	r2, r3
   81398:	f997 300b 	ldrsb.w	r3, [r7, #11]
   8139c:	4313      	orrs	r3, r2
   8139e:	b25b      	sxtb	r3, r3
   813a0:	b2da      	uxtb	r2, r3
   813a2:	68fb      	ldr	r3, [r7, #12]
   813a4:	440b      	add	r3, r1
   813a6:	721a      	strb	r2, [r3, #8]
        for(count = 0; count < strlen(str[line]); count++)
   813a8:	7dbb      	ldrb	r3, [r7, #22]
   813aa:	3301      	adds	r3, #1
   813ac:	75bb      	strb	r3, [r7, #22]
   813ae:	7dbc      	ldrb	r4, [r7, #22]
   813b0:	7d7b      	ldrb	r3, [r7, #21]
   813b2:	009b      	lsls	r3, r3, #2
   813b4:	687a      	ldr	r2, [r7, #4]
   813b6:	4413      	add	r3, r2
   813b8:	681b      	ldr	r3, [r3, #0]
   813ba:	4618      	mov	r0, r3
   813bc:	4b1b      	ldr	r3, [pc, #108]	; (8142c <lcd_print_m+0x238>)
   813be:	4798      	blx	r3
   813c0:	4603      	mov	r3, r0
   813c2:	429c      	cmp	r4, r3
   813c4:	d3a6      	bcc.n	81314 <lcd_print_m+0x120>
    for(line = 0; line < 4; line++)
   813c6:	7d7b      	ldrb	r3, [r7, #21]
   813c8:	3301      	adds	r3, #1
   813ca:	757b      	strb	r3, [r7, #21]
   813cc:	7d7b      	ldrb	r3, [r7, #21]
   813ce:	2b03      	cmp	r3, #3
   813d0:	f67f af41 	bls.w	81256 <lcd_print_m+0x62>
        }
    }
    tx_packet->length = index;
   813d4:	8a7a      	ldrh	r2, [r7, #18]
   813d6:	68fb      	ldr	r3, [r7, #12]
   813d8:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

    lcdIsBusy = true;
   813dc:	4b0a      	ldr	r3, [pc, #40]	; (81408 <lcd_print_m+0x214>)
   813de:	2201      	movs	r2, #1
   813e0:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   813e2:	68f9      	ldr	r1, [r7, #12]
   813e4:	480d      	ldr	r0, [pc, #52]	; (8141c <lcd_print_m+0x228>)
   813e6:	4b12      	ldr	r3, [pc, #72]	; (81430 <lcd_print_m+0x23c>)
   813e8:	4798      	blx	r3
    lcdStartTicks = getTicks();
   813ea:	4b05      	ldr	r3, [pc, #20]	; (81400 <lcd_print_m+0x20c>)
   813ec:	4798      	blx	r3
   813ee:	4602      	mov	r2, r0
   813f0:	4b04      	ldr	r3, [pc, #16]	; (81404 <lcd_print_m+0x210>)
   813f2:	601a      	str	r2, [r3, #0]
}
   813f4:	bf00      	nop
   813f6:	371c      	adds	r7, #28
   813f8:	46bd      	mov	sp, r7
   813fa:	bd90      	pop	{r4, r7, pc}
   813fc:	00080a29 	.word	0x00080a29
   81400:	00081f09 	.word	0x00081f09
   81404:	20070f8c 	.word	0x20070f8c
   81408:	20070f89 	.word	0x20070f89
   8140c:	20070f90 	.word	0x20070f90
   81410:	4008c100 	.word	0x4008c100
   81414:	0008020b 	.word	0x0008020b
   81418:	20070f94 	.word	0x20070f94
   8141c:	4008c000 	.word	0x4008c000
   81420:	00080dfd 	.word	0x00080dfd
   81424:	00080a15 	.word	0x00080a15
   81428:	20070f88 	.word	0x20070f88
   8142c:	000835f9 	.word	0x000835f9
   81430:	00080a3d 	.word	0x00080a3d

00081434 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   81434:	b580      	push	{r7, lr}
   81436:	b084      	sub	sp, #16
   81438:	af00      	add	r7, sp, #0
   8143a:	4603      	mov	r3, r0
   8143c:	460a      	mov	r2, r1
   8143e:	71fb      	strb	r3, [r7, #7]
   81440:	4613      	mov	r3, r2
   81442:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81444:	4b2d      	ldr	r3, [pc, #180]	; (814fc <send_nibble+0xc8>)
   81446:	4798      	blx	r3
   81448:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   8144a:	e019      	b.n	81480 <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   8144c:	4b2c      	ldr	r3, [pc, #176]	; (81500 <send_nibble+0xcc>)
   8144e:	4798      	blx	r3
   81450:	4602      	mov	r2, r0
   81452:	4b2c      	ldr	r3, [pc, #176]	; (81504 <send_nibble+0xd0>)
   81454:	681b      	ldr	r3, [r3, #0]
   81456:	1ad3      	subs	r3, r2, r3
   81458:	2b64      	cmp	r3, #100	; 0x64
   8145a:	d911      	bls.n	81480 <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   8145c:	4b2a      	ldr	r3, [pc, #168]	; (81508 <send_nibble+0xd4>)
   8145e:	2200      	movs	r2, #0
   81460:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81462:	4b2a      	ldr	r3, [pc, #168]	; (8150c <send_nibble+0xd8>)
   81464:	681b      	ldr	r3, [r3, #0]
   81466:	3301      	adds	r3, #1
   81468:	4a28      	ldr	r2, [pc, #160]	; (8150c <send_nibble+0xd8>)
   8146a:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   8146c:	f240 2102 	movw	r1, #514	; 0x202
   81470:	4827      	ldr	r0, [pc, #156]	; (81510 <send_nibble+0xdc>)
   81472:	4b28      	ldr	r3, [pc, #160]	; (81514 <send_nibble+0xe0>)
   81474:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81476:	4928      	ldr	r1, [pc, #160]	; (81518 <send_nibble+0xe4>)
   81478:	4828      	ldr	r0, [pc, #160]	; (8151c <send_nibble+0xe8>)
   8147a:	4b29      	ldr	r3, [pc, #164]	; (81520 <send_nibble+0xec>)
   8147c:	4798      	blx	r3
            break;
   8147e:	e009      	b.n	81494 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   81480:	4b28      	ldr	r3, [pc, #160]	; (81524 <send_nibble+0xf0>)
   81482:	4798      	blx	r3
   81484:	4603      	mov	r3, r0
   81486:	461a      	mov	r2, r3
   81488:	4b1f      	ldr	r3, [pc, #124]	; (81508 <send_nibble+0xd4>)
   8148a:	781b      	ldrb	r3, [r3, #0]
   8148c:	4313      	orrs	r3, r2
   8148e:	b2db      	uxtb	r3, r3
   81490:	2b00      	cmp	r3, #0
   81492:	d1db      	bne.n	8144c <send_nibble+0x18>
        }
    }

    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81494:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81498:	f003 030f 	and.w	r3, r3, #15
   8149c:	b25a      	sxtb	r2, r3
   8149e:	4b22      	ldr	r3, [pc, #136]	; (81528 <send_nibble+0xf4>)
   814a0:	781b      	ldrb	r3, [r3, #0]
   814a2:	b25b      	sxtb	r3, r3
   814a4:	4313      	orrs	r3, r2
   814a6:	b25b      	sxtb	r3, r3
   814a8:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   814aa:	79bb      	ldrb	r3, [r7, #6]
   814ac:	011b      	lsls	r3, r3, #4
   814ae:	b2da      	uxtb	r2, r3
   814b0:	79fb      	ldrb	r3, [r7, #7]
   814b2:	4313      	orrs	r3, r2
   814b4:	b2db      	uxtb	r3, r3
   814b6:	f043 0304 	orr.w	r3, r3, #4
   814ba:	b2da      	uxtb	r2, r3
   814bc:	68fb      	ldr	r3, [r7, #12]
   814be:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   814c0:	79bb      	ldrb	r3, [r7, #6]
   814c2:	011b      	lsls	r3, r3, #4
   814c4:	b25a      	sxtb	r2, r3
   814c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   814ca:	4313      	orrs	r3, r2
   814cc:	b25b      	sxtb	r3, r3
   814ce:	b2da      	uxtb	r2, r3
   814d0:	68fb      	ldr	r3, [r7, #12]
   814d2:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   814d4:	68fb      	ldr	r3, [r7, #12]
   814d6:	2202      	movs	r2, #2
   814d8:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    
    lcdIsBusy = true;
   814dc:	4b0a      	ldr	r3, [pc, #40]	; (81508 <send_nibble+0xd4>)
   814de:	2201      	movs	r2, #1
   814e0:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   814e2:	68f9      	ldr	r1, [r7, #12]
   814e4:	480d      	ldr	r0, [pc, #52]	; (8151c <send_nibble+0xe8>)
   814e6:	4b11      	ldr	r3, [pc, #68]	; (8152c <send_nibble+0xf8>)
   814e8:	4798      	blx	r3
    lcdStartTicks = getTicks();
   814ea:	4b05      	ldr	r3, [pc, #20]	; (81500 <send_nibble+0xcc>)
   814ec:	4798      	blx	r3
   814ee:	4602      	mov	r2, r0
   814f0:	4b04      	ldr	r3, [pc, #16]	; (81504 <send_nibble+0xd0>)
   814f2:	601a      	str	r2, [r3, #0]
}
   814f4:	bf00      	nop
   814f6:	3710      	adds	r7, #16
   814f8:	46bd      	mov	sp, r7
   814fa:	bd80      	pop	{r7, pc}
   814fc:	00080a29 	.word	0x00080a29
   81500:	00081f09 	.word	0x00081f09
   81504:	20070f8c 	.word	0x20070f8c
   81508:	20070f89 	.word	0x20070f89
   8150c:	20070f90 	.word	0x20070f90
   81510:	4008c100 	.word	0x4008c100
   81514:	0008020b 	.word	0x0008020b
   81518:	20070f94 	.word	0x20070f94
   8151c:	4008c000 	.word	0x4008c000
   81520:	00080dfd 	.word	0x00080dfd
   81524:	00080a15 	.word	0x00080a15
   81528:	20070f88 	.word	0x20070f88
   8152c:	00080a3d 	.word	0x00080a3d

00081530 <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   81530:	b580      	push	{r7, lr}
   81532:	b084      	sub	sp, #16
   81534:	af00      	add	r7, sp, #0
   81536:	4603      	mov	r3, r0
   81538:	460a      	mov	r2, r1
   8153a:	71fb      	strb	r3, [r7, #7]
   8153c:	4613      	mov	r3, r2
   8153e:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   81540:	4b39      	ldr	r3, [pc, #228]	; (81628 <send_byte+0xf8>)
   81542:	4798      	blx	r3
   81544:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   81546:	e019      	b.n	8157c <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   81548:	4b38      	ldr	r3, [pc, #224]	; (8162c <send_byte+0xfc>)
   8154a:	4798      	blx	r3
   8154c:	4602      	mov	r2, r0
   8154e:	4b38      	ldr	r3, [pc, #224]	; (81630 <send_byte+0x100>)
   81550:	681b      	ldr	r3, [r3, #0]
   81552:	1ad3      	subs	r3, r2, r3
   81554:	2b64      	cmp	r3, #100	; 0x64
   81556:	d911      	bls.n	8157c <send_byte+0x4c>
        {
            lcdIsBusy = false;
   81558:	4b36      	ldr	r3, [pc, #216]	; (81634 <send_byte+0x104>)
   8155a:	2200      	movs	r2, #0
   8155c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   8155e:	4b36      	ldr	r3, [pc, #216]	; (81638 <send_byte+0x108>)
   81560:	681b      	ldr	r3, [r3, #0]
   81562:	3301      	adds	r3, #1
   81564:	4a34      	ldr	r2, [pc, #208]	; (81638 <send_byte+0x108>)
   81566:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81568:	f240 2102 	movw	r1, #514	; 0x202
   8156c:	4833      	ldr	r0, [pc, #204]	; (8163c <send_byte+0x10c>)
   8156e:	4b34      	ldr	r3, [pc, #208]	; (81640 <send_byte+0x110>)
   81570:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81572:	4934      	ldr	r1, [pc, #208]	; (81644 <send_byte+0x114>)
   81574:	4834      	ldr	r0, [pc, #208]	; (81648 <send_byte+0x118>)
   81576:	4b35      	ldr	r3, [pc, #212]	; (8164c <send_byte+0x11c>)
   81578:	4798      	blx	r3
            break;
   8157a:	e009      	b.n	81590 <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   8157c:	4b34      	ldr	r3, [pc, #208]	; (81650 <send_byte+0x120>)
   8157e:	4798      	blx	r3
   81580:	4603      	mov	r3, r0
   81582:	461a      	mov	r2, r3
   81584:	4b2b      	ldr	r3, [pc, #172]	; (81634 <send_byte+0x104>)
   81586:	781b      	ldrb	r3, [r3, #0]
   81588:	4313      	orrs	r3, r2
   8158a:	b2db      	uxtb	r3, r3
   8158c:	2b00      	cmp	r3, #0
   8158e:	d1db      	bne.n	81548 <send_byte+0x18>
        }
    }

    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81590:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81594:	f003 030f 	and.w	r3, r3, #15
   81598:	b25a      	sxtb	r2, r3
   8159a:	4b2e      	ldr	r3, [pc, #184]	; (81654 <send_byte+0x124>)
   8159c:	781b      	ldrb	r3, [r3, #0]
   8159e:	b25b      	sxtb	r3, r3
   815a0:	4313      	orrs	r3, r2
   815a2:	b25b      	sxtb	r3, r3
   815a4:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   815a6:	79bb      	ldrb	r3, [r7, #6]
   815a8:	f023 030f 	bic.w	r3, r3, #15
   815ac:	b2da      	uxtb	r2, r3
   815ae:	79fb      	ldrb	r3, [r7, #7]
   815b0:	4313      	orrs	r3, r2
   815b2:	b2db      	uxtb	r3, r3
   815b4:	f043 0304 	orr.w	r3, r3, #4
   815b8:	b2da      	uxtb	r2, r3
   815ba:	68fb      	ldr	r3, [r7, #12]
   815bc:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   815be:	f997 3006 	ldrsb.w	r3, [r7, #6]
   815c2:	f023 030f 	bic.w	r3, r3, #15
   815c6:	b25a      	sxtb	r2, r3
   815c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   815cc:	4313      	orrs	r3, r2
   815ce:	b25b      	sxtb	r3, r3
   815d0:	b2da      	uxtb	r2, r3
   815d2:	68fb      	ldr	r3, [r7, #12]
   815d4:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   815d6:	79bb      	ldrb	r3, [r7, #6]
   815d8:	011b      	lsls	r3, r3, #4
   815da:	b2da      	uxtb	r2, r3
   815dc:	79fb      	ldrb	r3, [r7, #7]
   815de:	4313      	orrs	r3, r2
   815e0:	b2db      	uxtb	r3, r3
   815e2:	f043 0304 	orr.w	r3, r3, #4
   815e6:	b2da      	uxtb	r2, r3
   815e8:	68fb      	ldr	r3, [r7, #12]
   815ea:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   815ec:	79bb      	ldrb	r3, [r7, #6]
   815ee:	011b      	lsls	r3, r3, #4
   815f0:	b25a      	sxtb	r2, r3
   815f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   815f6:	4313      	orrs	r3, r2
   815f8:	b25b      	sxtb	r3, r3
   815fa:	b2da      	uxtb	r2, r3
   815fc:	68fb      	ldr	r3, [r7, #12]
   815fe:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   81600:	68fb      	ldr	r3, [r7, #12]
   81602:	2204      	movs	r2, #4
   81604:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    
    lcdIsBusy = true;
   81608:	4b0a      	ldr	r3, [pc, #40]	; (81634 <send_byte+0x104>)
   8160a:	2201      	movs	r2, #1
   8160c:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   8160e:	68f9      	ldr	r1, [r7, #12]
   81610:	480d      	ldr	r0, [pc, #52]	; (81648 <send_byte+0x118>)
   81612:	4b11      	ldr	r3, [pc, #68]	; (81658 <send_byte+0x128>)
   81614:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81616:	4b05      	ldr	r3, [pc, #20]	; (8162c <send_byte+0xfc>)
   81618:	4798      	blx	r3
   8161a:	4602      	mov	r2, r0
   8161c:	4b04      	ldr	r3, [pc, #16]	; (81630 <send_byte+0x100>)
   8161e:	601a      	str	r2, [r3, #0]
}
   81620:	bf00      	nop
   81622:	3710      	adds	r7, #16
   81624:	46bd      	mov	sp, r7
   81626:	bd80      	pop	{r7, pc}
   81628:	00080a29 	.word	0x00080a29
   8162c:	00081f09 	.word	0x00081f09
   81630:	20070f8c 	.word	0x20070f8c
   81634:	20070f89 	.word	0x20070f89
   81638:	20070f90 	.word	0x20070f90
   8163c:	4008c100 	.word	0x4008c100
   81640:	0008020b 	.word	0x0008020b
   81644:	20070f94 	.word	0x20070f94
   81648:	4008c000 	.word	0x4008c000
   8164c:	00080dfd 	.word	0x00080dfd
   81650:	00080a15 	.word	0x00080a15
   81654:	20070f88 	.word	0x20070f88
   81658:	00080a3d 	.word	0x00080a3d

0008165c <lcd_callback>:

static void lcd_callback(void)
{
   8165c:	b480      	push	{r7}
   8165e:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   81660:	4b03      	ldr	r3, [pc, #12]	; (81670 <lcd_callback+0x14>)
   81662:	2200      	movs	r2, #0
   81664:	701a      	strb	r2, [r3, #0]
}
   81666:	bf00      	nop
   81668:	46bd      	mov	sp, r7
   8166a:	bc80      	pop	{r7}
   8166c:	4770      	bx	lr
   8166e:	bf00      	nop
   81670:	20070f89 	.word	0x20070f89

00081674 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   81674:	b480      	push	{r7}
   81676:	b089      	sub	sp, #36	; 0x24
   81678:	af00      	add	r7, sp, #0
   8167a:	6078      	str	r0, [r7, #4]
   8167c:	687b      	ldr	r3, [r7, #4]
   8167e:	61fb      	str	r3, [r7, #28]
   81680:	69fb      	ldr	r3, [r7, #28]
   81682:	61bb      	str	r3, [r7, #24]
   81684:	69bb      	ldr	r3, [r7, #24]
   81686:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81688:	697b      	ldr	r3, [r7, #20]
   8168a:	095b      	lsrs	r3, r3, #5
   8168c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8168e:	693b      	ldr	r3, [r7, #16]
   81690:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81694:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81698:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8169a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   8169c:	69fb      	ldr	r3, [r7, #28]
   8169e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   816a0:	68fb      	ldr	r3, [r7, #12]
   816a2:	f003 031f 	and.w	r3, r3, #31
   816a6:	2101      	movs	r1, #1
   816a8:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   816ac:	4013      	ands	r3, r2
   816ae:	2b00      	cmp	r3, #0
   816b0:	bf14      	ite	ne
   816b2:	2301      	movne	r3, #1
   816b4:	2300      	moveq	r3, #0
   816b6:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   816b8:	4618      	mov	r0, r3
   816ba:	3724      	adds	r7, #36	; 0x24
   816bc:	46bd      	mov	sp, r7
   816be:	bc80      	pop	{r7}
   816c0:	4770      	bx	lr
	...

000816c4 <menu>:

uint32_t cnt = 0;


void menu(event_t event1)
{
   816c4:	b580      	push	{r7, lr}
   816c6:	b082      	sub	sp, #8
   816c8:	af00      	add	r7, sp, #0
   816ca:	4603      	mov	r3, r0
   816cc:	71fb      	strb	r3, [r7, #7]
    switch (event1)
   816ce:	79fb      	ldrb	r3, [r7, #7]
   816d0:	2b01      	cmp	r3, #1
   816d2:	d002      	beq.n	816da <menu+0x16>
   816d4:	2b0d      	cmp	r3, #13
   816d6:	d026      	beq.n	81726 <menu+0x62>
                    print_cursor();
                }
            }
            break;
        default:
            break;
   816d8:	e04e      	b.n	81778 <menu+0xb4>
            if (act_cursor_line > min_cursor_line)
   816da:	4b32      	ldr	r3, [pc, #200]	; (817a4 <menu+0xe0>)
   816dc:	781a      	ldrb	r2, [r3, #0]
   816de:	4b32      	ldr	r3, [pc, #200]	; (817a8 <menu+0xe4>)
   816e0:	781b      	ldrb	r3, [r3, #0]
   816e2:	429a      	cmp	r2, r3
   816e4:	d945      	bls.n	81772 <menu+0xae>
                act_cursor_line--;
   816e6:	4b2f      	ldr	r3, [pc, #188]	; (817a4 <menu+0xe0>)
   816e8:	781b      	ldrb	r3, [r3, #0]
   816ea:	3b01      	subs	r3, #1
   816ec:	b2da      	uxtb	r2, r3
   816ee:	4b2d      	ldr	r3, [pc, #180]	; (817a4 <menu+0xe0>)
   816f0:	701a      	strb	r2, [r3, #0]
                if (act_cursor_line_on_lcd == 1)
   816f2:	4b2e      	ldr	r3, [pc, #184]	; (817ac <menu+0xe8>)
   816f4:	781b      	ldrb	r3, [r3, #0]
   816f6:	2b01      	cmp	r3, #1
   816f8:	d10c      	bne.n	81714 <menu+0x50>
                    if (act_menu == MENU_MAIN)
   816fa:	4b2d      	ldr	r3, [pc, #180]	; (817b0 <menu+0xec>)
   816fc:	781b      	ldrb	r3, [r3, #0]
   816fe:	2b00      	cmp	r3, #0
   81700:	d137      	bne.n	81772 <menu+0xae>
                        menu_main_scroll--;
   81702:	4b2c      	ldr	r3, [pc, #176]	; (817b4 <menu+0xf0>)
   81704:	781b      	ldrb	r3, [r3, #0]
   81706:	3b01      	subs	r3, #1
   81708:	b2da      	uxtb	r2, r3
   8170a:	4b2a      	ldr	r3, [pc, #168]	; (817b4 <menu+0xf0>)
   8170c:	701a      	strb	r2, [r3, #0]
                        print_menu_main();
   8170e:	4b2a      	ldr	r3, [pc, #168]	; (817b8 <menu+0xf4>)
   81710:	4798      	blx	r3
            break;
   81712:	e02e      	b.n	81772 <menu+0xae>
                    act_cursor_line_on_lcd--;
   81714:	4b25      	ldr	r3, [pc, #148]	; (817ac <menu+0xe8>)
   81716:	781b      	ldrb	r3, [r3, #0]
   81718:	3b01      	subs	r3, #1
   8171a:	b2da      	uxtb	r2, r3
   8171c:	4b23      	ldr	r3, [pc, #140]	; (817ac <menu+0xe8>)
   8171e:	701a      	strb	r2, [r3, #0]
                    print_cursor();
   81720:	4b26      	ldr	r3, [pc, #152]	; (817bc <menu+0xf8>)
   81722:	4798      	blx	r3
            break;
   81724:	e025      	b.n	81772 <menu+0xae>
            if (act_cursor_line < max_cursor_line)
   81726:	4b1f      	ldr	r3, [pc, #124]	; (817a4 <menu+0xe0>)
   81728:	781a      	ldrb	r2, [r3, #0]
   8172a:	4b25      	ldr	r3, [pc, #148]	; (817c0 <menu+0xfc>)
   8172c:	781b      	ldrb	r3, [r3, #0]
   8172e:	429a      	cmp	r2, r3
   81730:	d221      	bcs.n	81776 <menu+0xb2>
                act_cursor_line++;
   81732:	4b1c      	ldr	r3, [pc, #112]	; (817a4 <menu+0xe0>)
   81734:	781b      	ldrb	r3, [r3, #0]
   81736:	3301      	adds	r3, #1
   81738:	b2da      	uxtb	r2, r3
   8173a:	4b1a      	ldr	r3, [pc, #104]	; (817a4 <menu+0xe0>)
   8173c:	701a      	strb	r2, [r3, #0]
                if (act_cursor_line_on_lcd == 4)
   8173e:	4b1b      	ldr	r3, [pc, #108]	; (817ac <menu+0xe8>)
   81740:	781b      	ldrb	r3, [r3, #0]
   81742:	2b04      	cmp	r3, #4
   81744:	d10c      	bne.n	81760 <menu+0x9c>
                    if (act_menu == MENU_MAIN)
   81746:	4b1a      	ldr	r3, [pc, #104]	; (817b0 <menu+0xec>)
   81748:	781b      	ldrb	r3, [r3, #0]
   8174a:	2b00      	cmp	r3, #0
   8174c:	d113      	bne.n	81776 <menu+0xb2>
                        menu_main_scroll++;
   8174e:	4b19      	ldr	r3, [pc, #100]	; (817b4 <menu+0xf0>)
   81750:	781b      	ldrb	r3, [r3, #0]
   81752:	3301      	adds	r3, #1
   81754:	b2da      	uxtb	r2, r3
   81756:	4b17      	ldr	r3, [pc, #92]	; (817b4 <menu+0xf0>)
   81758:	701a      	strb	r2, [r3, #0]
                        print_menu_main();
   8175a:	4b17      	ldr	r3, [pc, #92]	; (817b8 <menu+0xf4>)
   8175c:	4798      	blx	r3
            break;
   8175e:	e00a      	b.n	81776 <menu+0xb2>
                    act_cursor_line_on_lcd++;
   81760:	4b12      	ldr	r3, [pc, #72]	; (817ac <menu+0xe8>)
   81762:	781b      	ldrb	r3, [r3, #0]
   81764:	3301      	adds	r3, #1
   81766:	b2da      	uxtb	r2, r3
   81768:	4b10      	ldr	r3, [pc, #64]	; (817ac <menu+0xe8>)
   8176a:	701a      	strb	r2, [r3, #0]
                    print_cursor();
   8176c:	4b13      	ldr	r3, [pc, #76]	; (817bc <menu+0xf8>)
   8176e:	4798      	blx	r3
            break;
   81770:	e001      	b.n	81776 <menu+0xb2>
            break;
   81772:	bf00      	nop
   81774:	e000      	b.n	81778 <menu+0xb4>
            break;
   81776:	bf00      	nop
    }
	
    switch (act_menu)
   81778:	4b0d      	ldr	r3, [pc, #52]	; (817b0 <menu+0xec>)
   8177a:	781b      	ldrb	r3, [r3, #0]
   8177c:	2b00      	cmp	r3, #0
   8177e:	d002      	beq.n	81786 <menu+0xc2>
   81780:	2b01      	cmp	r3, #1
   81782:	d005      	beq.n	81790 <menu+0xcc>
            break;
        case MENU_SETTINGS:
            menu_settings(event1);
            break;
        default:
            break;
   81784:	e009      	b.n	8179a <menu+0xd6>
            menu_main(event1);
   81786:	79fb      	ldrb	r3, [r7, #7]
   81788:	4618      	mov	r0, r3
   8178a:	4b0e      	ldr	r3, [pc, #56]	; (817c4 <menu+0x100>)
   8178c:	4798      	blx	r3
            break;
   8178e:	e004      	b.n	8179a <menu+0xd6>
            menu_settings(event1);
   81790:	79fb      	ldrb	r3, [r7, #7]
   81792:	4618      	mov	r0, r3
   81794:	4b0c      	ldr	r3, [pc, #48]	; (817c8 <menu+0x104>)
   81796:	4798      	blx	r3
            break;
   81798:	bf00      	nop
    }
}
   8179a:	bf00      	nop
   8179c:	3708      	adds	r7, #8
   8179e:	46bd      	mov	sp, r7
   817a0:	bd80      	pop	{r7, pc}
   817a2:	bf00      	nop
   817a4:	20070190 	.word	0x20070190
   817a8:	20070192 	.word	0x20070192
   817ac:	2007018e 	.word	0x2007018e
   817b0:	20070fa0 	.word	0x20070fa0
   817b4:	20070fa1 	.word	0x20070fa1
   817b8:	00081919 	.word	0x00081919
   817bc:	00081a7d 	.word	0x00081a7d
   817c0:	20070193 	.word	0x20070193
   817c4:	000817cd 	.word	0x000817cd
   817c8:	00081905 	.word	0x00081905

000817cc <menu_main>:

void menu_main(event_t event1)
{
   817cc:	b580      	push	{r7, lr}
   817ce:	b082      	sub	sp, #8
   817d0:	af00      	add	r7, sp, #0
   817d2:	4603      	mov	r3, r0
   817d4:	71fb      	strb	r3, [r7, #7]
    switch (event1)
   817d6:	79fb      	ldrb	r3, [r7, #7]
   817d8:	2b07      	cmp	r3, #7
   817da:	d004      	beq.n	817e6 <menu_main+0x1a>
   817dc:	2b0a      	cmp	r3, #10
   817de:	d066      	beq.n	818ae <menu_main+0xe2>
   817e0:	2b04      	cmp	r3, #4
   817e2:	d052      	beq.n	8188a <menu_main+0xbe>
                    print_menu = 1;
                }
            }
            break;
        default:
            break;
   817e4:	e078      	b.n	818d8 <menu_main+0x10c>
            switch (menu_main_column)
   817e6:	4b43      	ldr	r3, [pc, #268]	; (818f4 <menu_main+0x128>)
   817e8:	781b      	ldrb	r3, [r3, #0]
   817ea:	2b01      	cmp	r3, #1
   817ec:	d01c      	beq.n	81828 <menu_main+0x5c>
   817ee:	2b02      	cmp	r3, #2
   817f0:	d032      	beq.n	81858 <menu_main+0x8c>
   817f2:	2b00      	cmp	r3, #0
   817f4:	d000      	beq.n	817f8 <menu_main+0x2c>
            break;
   817f6:	e06f      	b.n	818d8 <menu_main+0x10c>
                    switch (act_cursor_line)
   817f8:	4b3f      	ldr	r3, [pc, #252]	; (818f8 <menu_main+0x12c>)
   817fa:	781b      	ldrb	r3, [r3, #0]
   817fc:	3b02      	subs	r3, #2
   817fe:	2b06      	cmp	r3, #6
   81800:	d810      	bhi.n	81824 <menu_main+0x58>
   81802:	a201      	add	r2, pc, #4	; (adr r2, 81808 <menu_main+0x3c>)
   81804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81808:	00081825 	.word	0x00081825
   8180c:	00081825 	.word	0x00081825
   81810:	00081825 	.word	0x00081825
   81814:	00081825 	.word	0x00081825
   81818:	00081825 	.word	0x00081825
   8181c:	00081825 	.word	0x00081825
   81820:	00081825 	.word	0x00081825
                            break;
   81824:	bf00      	nop
                    break;
   81826:	e02f      	b.n	81888 <menu_main+0xbc>
                    switch (act_cursor_line)
   81828:	4b33      	ldr	r3, [pc, #204]	; (818f8 <menu_main+0x12c>)
   8182a:	781b      	ldrb	r3, [r3, #0]
   8182c:	3b02      	subs	r3, #2
   8182e:	2b06      	cmp	r3, #6
   81830:	d810      	bhi.n	81854 <menu_main+0x88>
   81832:	a201      	add	r2, pc, #4	; (adr r2, 81838 <menu_main+0x6c>)
   81834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81838:	00081855 	.word	0x00081855
   8183c:	00081855 	.word	0x00081855
   81840:	00081855 	.word	0x00081855
   81844:	00081855 	.word	0x00081855
   81848:	00081855 	.word	0x00081855
   8184c:	00081855 	.word	0x00081855
   81850:	00081855 	.word	0x00081855
                            break;
   81854:	bf00      	nop
                    break;
   81856:	e017      	b.n	81888 <menu_main+0xbc>
                    switch (act_cursor_line)
   81858:	4b27      	ldr	r3, [pc, #156]	; (818f8 <menu_main+0x12c>)
   8185a:	781b      	ldrb	r3, [r3, #0]
   8185c:	3b02      	subs	r3, #2
   8185e:	2b06      	cmp	r3, #6
   81860:	d810      	bhi.n	81884 <menu_main+0xb8>
   81862:	a201      	add	r2, pc, #4	; (adr r2, 81868 <menu_main+0x9c>)
   81864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81868:	00081885 	.word	0x00081885
   8186c:	00081885 	.word	0x00081885
   81870:	00081885 	.word	0x00081885
   81874:	00081885 	.word	0x00081885
   81878:	00081885 	.word	0x00081885
   8187c:	00081885 	.word	0x00081885
   81880:	00081885 	.word	0x00081885
                            break;
   81884:	bf00      	nop
                    break;
   81886:	bf00      	nop
            break;
   81888:	e026      	b.n	818d8 <menu_main+0x10c>
            if (act_cursor_line == 1)
   8188a:	4b1b      	ldr	r3, [pc, #108]	; (818f8 <menu_main+0x12c>)
   8188c:	781b      	ldrb	r3, [r3, #0]
   8188e:	2b01      	cmp	r3, #1
   81890:	d11f      	bne.n	818d2 <menu_main+0x106>
                if (menu_main_column >= 1)
   81892:	4b18      	ldr	r3, [pc, #96]	; (818f4 <menu_main+0x128>)
   81894:	781b      	ldrb	r3, [r3, #0]
   81896:	2b00      	cmp	r3, #0
   81898:	d01b      	beq.n	818d2 <menu_main+0x106>
                    menu_main_column--;
   8189a:	4b16      	ldr	r3, [pc, #88]	; (818f4 <menu_main+0x128>)
   8189c:	781b      	ldrb	r3, [r3, #0]
   8189e:	3b01      	subs	r3, #1
   818a0:	b2da      	uxtb	r2, r3
   818a2:	4b14      	ldr	r3, [pc, #80]	; (818f4 <menu_main+0x128>)
   818a4:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   818a6:	4b15      	ldr	r3, [pc, #84]	; (818fc <menu_main+0x130>)
   818a8:	2201      	movs	r2, #1
   818aa:	701a      	strb	r2, [r3, #0]
            break;
   818ac:	e011      	b.n	818d2 <menu_main+0x106>
            if (act_cursor_line == 1)
   818ae:	4b12      	ldr	r3, [pc, #72]	; (818f8 <menu_main+0x12c>)
   818b0:	781b      	ldrb	r3, [r3, #0]
   818b2:	2b01      	cmp	r3, #1
   818b4:	d10f      	bne.n	818d6 <menu_main+0x10a>
                if (menu_main_column <= 1)
   818b6:	4b0f      	ldr	r3, [pc, #60]	; (818f4 <menu_main+0x128>)
   818b8:	781b      	ldrb	r3, [r3, #0]
   818ba:	2b01      	cmp	r3, #1
   818bc:	d80b      	bhi.n	818d6 <menu_main+0x10a>
                    menu_main_column++;
   818be:	4b0d      	ldr	r3, [pc, #52]	; (818f4 <menu_main+0x128>)
   818c0:	781b      	ldrb	r3, [r3, #0]
   818c2:	3301      	adds	r3, #1
   818c4:	b2da      	uxtb	r2, r3
   818c6:	4b0b      	ldr	r3, [pc, #44]	; (818f4 <menu_main+0x128>)
   818c8:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   818ca:	4b0c      	ldr	r3, [pc, #48]	; (818fc <menu_main+0x130>)
   818cc:	2201      	movs	r2, #1
   818ce:	701a      	strb	r2, [r3, #0]
            break;
   818d0:	e001      	b.n	818d6 <menu_main+0x10a>
            break;
   818d2:	bf00      	nop
   818d4:	e000      	b.n	818d8 <menu_main+0x10c>
            break;
   818d6:	bf00      	nop
    }
	
    if (print_menu)
   818d8:	4b08      	ldr	r3, [pc, #32]	; (818fc <menu_main+0x130>)
   818da:	781b      	ldrb	r3, [r3, #0]
   818dc:	2b00      	cmp	r3, #0
   818de:	d004      	beq.n	818ea <menu_main+0x11e>
    {
        print_menu = 0;
   818e0:	4b06      	ldr	r3, [pc, #24]	; (818fc <menu_main+0x130>)
   818e2:	2200      	movs	r2, #0
   818e4:	701a      	strb	r2, [r3, #0]
        print_menu_main();
   818e6:	4b06      	ldr	r3, [pc, #24]	; (81900 <menu_main+0x134>)
   818e8:	4798      	blx	r3
    }
}
   818ea:	bf00      	nop
   818ec:	3708      	adds	r7, #8
   818ee:	46bd      	mov	sp, r7
   818f0:	bd80      	pop	{r7, pc}
   818f2:	bf00      	nop
   818f4:	20070194 	.word	0x20070194
   818f8:	20070190 	.word	0x20070190
   818fc:	2007018c 	.word	0x2007018c
   81900:	00081919 	.word	0x00081919

00081904 <menu_settings>:

void menu_settings(event_t event1)
{
   81904:	b480      	push	{r7}
   81906:	b083      	sub	sp, #12
   81908:	af00      	add	r7, sp, #0
   8190a:	4603      	mov	r3, r0
   8190c:	71fb      	strb	r3, [r7, #7]
	
}
   8190e:	bf00      	nop
   81910:	370c      	adds	r7, #12
   81912:	46bd      	mov	sp, r7
   81914:	bc80      	pop	{r7}
   81916:	4770      	bx	lr

00081918 <print_menu_main>:

void print_menu_main(void)
{
   81918:	b580      	push	{r7, lr}
   8191a:	b09c      	sub	sp, #112	; 0x70
   8191c:	af00      	add	r7, sp, #0
    const char *menu_text[3][8] =
   8191e:	4a49      	ldr	r2, [pc, #292]	; (81a44 <print_menu_main+0x12c>)
   81920:	f107 0310 	add.w	r3, r7, #16
   81924:	4611      	mov	r1, r2
   81926:	2260      	movs	r2, #96	; 0x60
   81928:	4618      	mov	r0, r3
   8192a:	4b47      	ldr	r3, [pc, #284]	; (81a48 <print_menu_main+0x130>)
   8192c:	4798      	blx	r3
        {"     Match  ", " Start match", " Sensor values", " Drive angle pid", "", "", "", ""},
        {"     Tests", " Turn to start", " Move to middle", " Move to ball", " RPI", " Stop on line", " Encoder test", ""}
    };
    char *menu_display[4];

    lcd_clear();
   8192e:	4b47      	ldr	r3, [pc, #284]	; (81a4c <print_menu_main+0x134>)
   81930:	4798      	blx	r3

    menu_display[0] = (char *)menu_text[menu_main_column][menu_main_scroll + 0];
   81932:	4b47      	ldr	r3, [pc, #284]	; (81a50 <print_menu_main+0x138>)
   81934:	781b      	ldrb	r3, [r3, #0]
   81936:	4619      	mov	r1, r3
   81938:	4b46      	ldr	r3, [pc, #280]	; (81a54 <print_menu_main+0x13c>)
   8193a:	781b      	ldrb	r3, [r3, #0]
   8193c:	461a      	mov	r2, r3
   8193e:	00cb      	lsls	r3, r1, #3
   81940:	4413      	add	r3, r2
   81942:	009b      	lsls	r3, r3, #2
   81944:	f107 0270 	add.w	r2, r7, #112	; 0x70
   81948:	4413      	add	r3, r2
   8194a:	f853 3c60 	ldr.w	r3, [r3, #-96]
   8194e:	603b      	str	r3, [r7, #0]
    menu_display[1] = (char *)menu_text[menu_main_column][menu_main_scroll + 1];
   81950:	4b3f      	ldr	r3, [pc, #252]	; (81a50 <print_menu_main+0x138>)
   81952:	781b      	ldrb	r3, [r3, #0]
   81954:	461a      	mov	r2, r3
   81956:	4b3f      	ldr	r3, [pc, #252]	; (81a54 <print_menu_main+0x13c>)
   81958:	781b      	ldrb	r3, [r3, #0]
   8195a:	3301      	adds	r3, #1
   8195c:	00d2      	lsls	r2, r2, #3
   8195e:	4413      	add	r3, r2
   81960:	009b      	lsls	r3, r3, #2
   81962:	f107 0270 	add.w	r2, r7, #112	; 0x70
   81966:	4413      	add	r3, r2
   81968:	f853 3c60 	ldr.w	r3, [r3, #-96]
   8196c:	607b      	str	r3, [r7, #4]
    menu_display[2] = (char *)menu_text[menu_main_column][menu_main_scroll + 2];
   8196e:	4b38      	ldr	r3, [pc, #224]	; (81a50 <print_menu_main+0x138>)
   81970:	781b      	ldrb	r3, [r3, #0]
   81972:	461a      	mov	r2, r3
   81974:	4b37      	ldr	r3, [pc, #220]	; (81a54 <print_menu_main+0x13c>)
   81976:	781b      	ldrb	r3, [r3, #0]
   81978:	3302      	adds	r3, #2
   8197a:	00d2      	lsls	r2, r2, #3
   8197c:	4413      	add	r3, r2
   8197e:	009b      	lsls	r3, r3, #2
   81980:	f107 0270 	add.w	r2, r7, #112	; 0x70
   81984:	4413      	add	r3, r2
   81986:	f853 3c60 	ldr.w	r3, [r3, #-96]
   8198a:	60bb      	str	r3, [r7, #8]
    menu_display[3] = (char *)menu_text[menu_main_column][menu_main_scroll + 3];
   8198c:	4b30      	ldr	r3, [pc, #192]	; (81a50 <print_menu_main+0x138>)
   8198e:	781b      	ldrb	r3, [r3, #0]
   81990:	461a      	mov	r2, r3
   81992:	4b30      	ldr	r3, [pc, #192]	; (81a54 <print_menu_main+0x13c>)
   81994:	781b      	ldrb	r3, [r3, #0]
   81996:	3303      	adds	r3, #3
   81998:	00d2      	lsls	r2, r2, #3
   8199a:	4413      	add	r3, r2
   8199c:	009b      	lsls	r3, r3, #2
   8199e:	f107 0270 	add.w	r2, r7, #112	; 0x70
   819a2:	4413      	add	r3, r2
   819a4:	f853 3c60 	ldr.w	r3, [r3, #-96]
   819a8:	60fb      	str	r3, [r7, #12]
    lcd_print_m(menu_display);
   819aa:	463b      	mov	r3, r7
   819ac:	4618      	mov	r0, r3
   819ae:	4b2a      	ldr	r3, [pc, #168]	; (81a58 <print_menu_main+0x140>)
   819b0:	4798      	blx	r3

    switch(menu_main_column)
   819b2:	4b27      	ldr	r3, [pc, #156]	; (81a50 <print_menu_main+0x138>)
   819b4:	781b      	ldrb	r3, [r3, #0]
   819b6:	2b01      	cmp	r3, #1
   819b8:	d037      	beq.n	81a2a <print_menu_main+0x112>
   819ba:	2b02      	cmp	r3, #2
   819bc:	d037      	beq.n	81a2e <print_menu_main+0x116>
   819be:	2b00      	cmp	r3, #0
   819c0:	d136      	bne.n	81a30 <print_menu_main+0x118>
    {
        case 0:
            sprintf(sprintf_cache, "%1d", rbt_id);
   819c2:	4b26      	ldr	r3, [pc, #152]	; (81a5c <print_menu_main+0x144>)
   819c4:	f993 3000 	ldrsb.w	r3, [r3]
   819c8:	461a      	mov	r2, r3
   819ca:	4925      	ldr	r1, [pc, #148]	; (81a60 <print_menu_main+0x148>)
   819cc:	4825      	ldr	r0, [pc, #148]	; (81a64 <print_menu_main+0x14c>)
   819ce:	4b26      	ldr	r3, [pc, #152]	; (81a68 <print_menu_main+0x150>)
   819d0:	4798      	blx	r3
            lcd_print_s(2 - menu_main_scroll, 11, sprintf_cache);
   819d2:	4b20      	ldr	r3, [pc, #128]	; (81a54 <print_menu_main+0x13c>)
   819d4:	781b      	ldrb	r3, [r3, #0]
   819d6:	f1c3 0302 	rsb	r3, r3, #2
   819da:	b2db      	uxtb	r3, r3
   819dc:	b25b      	sxtb	r3, r3
   819de:	4a21      	ldr	r2, [pc, #132]	; (81a64 <print_menu_main+0x14c>)
   819e0:	210b      	movs	r1, #11
   819e2:	4618      	mov	r0, r3
   819e4:	4b21      	ldr	r3, [pc, #132]	; (81a6c <print_menu_main+0x154>)
   819e6:	4798      	blx	r3
            sprintf(sprintf_cache, "%2d", 15);	//speed_preset
   819e8:	220f      	movs	r2, #15
   819ea:	4921      	ldr	r1, [pc, #132]	; (81a70 <print_menu_main+0x158>)
   819ec:	481d      	ldr	r0, [pc, #116]	; (81a64 <print_menu_main+0x14c>)
   819ee:	4b1e      	ldr	r3, [pc, #120]	; (81a68 <print_menu_main+0x150>)
   819f0:	4798      	blx	r3
            lcd_print_s(3 - menu_main_scroll, 8, sprintf_cache);
   819f2:	4b18      	ldr	r3, [pc, #96]	; (81a54 <print_menu_main+0x13c>)
   819f4:	781b      	ldrb	r3, [r3, #0]
   819f6:	f1c3 0303 	rsb	r3, r3, #3
   819fa:	b2db      	uxtb	r3, r3
   819fc:	b25b      	sxtb	r3, r3
   819fe:	4a19      	ldr	r2, [pc, #100]	; (81a64 <print_menu_main+0x14c>)
   81a00:	2108      	movs	r1, #8
   81a02:	4618      	mov	r0, r3
   81a04:	4b19      	ldr	r3, [pc, #100]	; (81a6c <print_menu_main+0x154>)
   81a06:	4798      	blx	r3
            sprintf(sprintf_cache, "%1d", 1);	//rpi_tx.info.wifi
   81a08:	2201      	movs	r2, #1
   81a0a:	4915      	ldr	r1, [pc, #84]	; (81a60 <print_menu_main+0x148>)
   81a0c:	4815      	ldr	r0, [pc, #84]	; (81a64 <print_menu_main+0x14c>)
   81a0e:	4b16      	ldr	r3, [pc, #88]	; (81a68 <print_menu_main+0x150>)
   81a10:	4798      	blx	r3
            lcd_print_s(4 - menu_main_scroll, 7, sprintf_cache);
   81a12:	4b10      	ldr	r3, [pc, #64]	; (81a54 <print_menu_main+0x13c>)
   81a14:	781b      	ldrb	r3, [r3, #0]
   81a16:	f1c3 0304 	rsb	r3, r3, #4
   81a1a:	b2db      	uxtb	r3, r3
   81a1c:	b25b      	sxtb	r3, r3
   81a1e:	4a11      	ldr	r2, [pc, #68]	; (81a64 <print_menu_main+0x14c>)
   81a20:	2107      	movs	r1, #7
   81a22:	4618      	mov	r0, r3
   81a24:	4b11      	ldr	r3, [pc, #68]	; (81a6c <print_menu_main+0x154>)
   81a26:	4798      	blx	r3
            break;
   81a28:	e002      	b.n	81a30 <print_menu_main+0x118>
        case 1:
            break;
   81a2a:	bf00      	nop
   81a2c:	e000      	b.n	81a30 <print_menu_main+0x118>
        case 2:
            break;
   81a2e:	bf00      	nop
    }
    
    print_cursor();
   81a30:	4b10      	ldr	r3, [pc, #64]	; (81a74 <print_menu_main+0x15c>)
   81a32:	4798      	blx	r3
    update_battery(1);
   81a34:	2001      	movs	r0, #1
   81a36:	4b10      	ldr	r3, [pc, #64]	; (81a78 <print_menu_main+0x160>)
   81a38:	4798      	blx	r3
}
   81a3a:	bf00      	nop
   81a3c:	3770      	adds	r7, #112	; 0x70
   81a3e:	46bd      	mov	sp, r7
   81a40:	bd80      	pop	{r7, pc}
   81a42:	bf00      	nop
   81a44:	00087d8c 	.word	0x00087d8c
   81a48:	00083425 	.word	0x00083425
   81a4c:	00080f6d 	.word	0x00080f6d
   81a50:	20070194 	.word	0x20070194
   81a54:	20070fa1 	.word	0x20070fa1
   81a58:	000811f5 	.word	0x000811f5
   81a5c:	2007018d 	.word	0x2007018d
   81a60:	00087c8c 	.word	0x00087c8c
   81a64:	20071010 	.word	0x20071010
   81a68:	000835ad 	.word	0x000835ad
   81a6c:	00080fd1 	.word	0x00080fd1
   81a70:	00087c90 	.word	0x00087c90
   81a74:	00081a7d 	.word	0x00081a7d
   81a78:	00081f91 	.word	0x00081f91

00081a7c <print_cursor>:

void print_cursor(void)
{
   81a7c:	b580      	push	{r7, lr}
   81a7e:	af00      	add	r7, sp, #0
    if (act_menu == MENU_MAIN && act_cursor_line == 1)
   81a80:	4b3a      	ldr	r3, [pc, #232]	; (81b6c <print_cursor+0xf0>)
   81a82:	781b      	ldrb	r3, [r3, #0]
   81a84:	2b00      	cmp	r3, #0
   81a86:	d133      	bne.n	81af0 <print_cursor+0x74>
   81a88:	4b39      	ldr	r3, [pc, #228]	; (81b70 <print_cursor+0xf4>)
   81a8a:	781b      	ldrb	r3, [r3, #0]
   81a8c:	2b01      	cmp	r3, #1
   81a8e:	d12f      	bne.n	81af0 <print_cursor+0x74>
    {
        switch (menu_main_column)
   81a90:	4b38      	ldr	r3, [pc, #224]	; (81b74 <print_cursor+0xf8>)
   81a92:	781b      	ldrb	r3, [r3, #0]
   81a94:	2b01      	cmp	r3, #1
   81a96:	d00f      	beq.n	81ab8 <print_cursor+0x3c>
   81a98:	2b02      	cmp	r3, #2
   81a9a:	d01d      	beq.n	81ad8 <print_cursor+0x5c>
   81a9c:	2b00      	cmp	r3, #0
   81a9e:	d000      	beq.n	81aa2 <print_cursor+0x26>
            case 2:
                lcd_print_s(1, 3, "<");
                lcd_print_s(2, 0, " ");
                break;
            default:
                break;
   81aa0:	e025      	b.n	81aee <print_cursor+0x72>
                lcd_print_s(1, 12, ">");
   81aa2:	4a35      	ldr	r2, [pc, #212]	; (81b78 <print_cursor+0xfc>)
   81aa4:	210c      	movs	r1, #12
   81aa6:	2001      	movs	r0, #1
   81aa8:	4b34      	ldr	r3, [pc, #208]	; (81b7c <print_cursor+0x100>)
   81aaa:	4798      	blx	r3
                lcd_print_s(2, 0, " ");
   81aac:	4a34      	ldr	r2, [pc, #208]	; (81b80 <print_cursor+0x104>)
   81aae:	2100      	movs	r1, #0
   81ab0:	2002      	movs	r0, #2
   81ab2:	4b32      	ldr	r3, [pc, #200]	; (81b7c <print_cursor+0x100>)
   81ab4:	4798      	blx	r3
                break;
   81ab6:	e01a      	b.n	81aee <print_cursor+0x72>
                lcd_print_s(1, 3, "<");
   81ab8:	4a32      	ldr	r2, [pc, #200]	; (81b84 <print_cursor+0x108>)
   81aba:	2103      	movs	r1, #3
   81abc:	2001      	movs	r0, #1
   81abe:	4b2f      	ldr	r3, [pc, #188]	; (81b7c <print_cursor+0x100>)
   81ac0:	4798      	blx	r3
                lcd_print_s(1, 11, ">");
   81ac2:	4a2d      	ldr	r2, [pc, #180]	; (81b78 <print_cursor+0xfc>)
   81ac4:	210b      	movs	r1, #11
   81ac6:	2001      	movs	r0, #1
   81ac8:	4b2c      	ldr	r3, [pc, #176]	; (81b7c <print_cursor+0x100>)
   81aca:	4798      	blx	r3
                lcd_print_s(2, 0, " ");
   81acc:	4a2c      	ldr	r2, [pc, #176]	; (81b80 <print_cursor+0x104>)
   81ace:	2100      	movs	r1, #0
   81ad0:	2002      	movs	r0, #2
   81ad2:	4b2a      	ldr	r3, [pc, #168]	; (81b7c <print_cursor+0x100>)
   81ad4:	4798      	blx	r3
                break;
   81ad6:	e00a      	b.n	81aee <print_cursor+0x72>
                lcd_print_s(1, 3, "<");
   81ad8:	4a2a      	ldr	r2, [pc, #168]	; (81b84 <print_cursor+0x108>)
   81ada:	2103      	movs	r1, #3
   81adc:	2001      	movs	r0, #1
   81ade:	4b27      	ldr	r3, [pc, #156]	; (81b7c <print_cursor+0x100>)
   81ae0:	4798      	blx	r3
                lcd_print_s(2, 0, " ");
   81ae2:	4a27      	ldr	r2, [pc, #156]	; (81b80 <print_cursor+0x104>)
   81ae4:	2100      	movs	r1, #0
   81ae6:	2002      	movs	r0, #2
   81ae8:	4b24      	ldr	r3, [pc, #144]	; (81b7c <print_cursor+0x100>)
   81aea:	4798      	blx	r3
                break;
   81aec:	bf00      	nop
        }
    }
   81aee:	e033      	b.n	81b58 <print_cursor+0xdc>
    else
    {
        if (prev_cursor_line == 1)
   81af0:	4b25      	ldr	r3, [pc, #148]	; (81b88 <print_cursor+0x10c>)
   81af2:	781b      	ldrb	r3, [r3, #0]
   81af4:	2b01      	cmp	r3, #1
   81af6:	d11f      	bne.n	81b38 <print_cursor+0xbc>
        {
            switch (menu_main_column)
   81af8:	4b1e      	ldr	r3, [pc, #120]	; (81b74 <print_cursor+0xf8>)
   81afa:	781b      	ldrb	r3, [r3, #0]
   81afc:	2b01      	cmp	r3, #1
   81afe:	d00a      	beq.n	81b16 <print_cursor+0x9a>
   81b00:	2b02      	cmp	r3, #2
   81b02:	d013      	beq.n	81b2c <print_cursor+0xb0>
   81b04:	2b00      	cmp	r3, #0
   81b06:	d000      	beq.n	81b0a <print_cursor+0x8e>
                    break;
                case 2:
                    lcd_print_s(1, 3, " ");
                    break;
                default:
                    break;
   81b08:	e016      	b.n	81b38 <print_cursor+0xbc>
                    lcd_print_s(1, 12, " ");
   81b0a:	4a1d      	ldr	r2, [pc, #116]	; (81b80 <print_cursor+0x104>)
   81b0c:	210c      	movs	r1, #12
   81b0e:	2001      	movs	r0, #1
   81b10:	4b1a      	ldr	r3, [pc, #104]	; (81b7c <print_cursor+0x100>)
   81b12:	4798      	blx	r3
                    break;
   81b14:	e010      	b.n	81b38 <print_cursor+0xbc>
                    lcd_print_s(1, 3, " ");
   81b16:	4a1a      	ldr	r2, [pc, #104]	; (81b80 <print_cursor+0x104>)
   81b18:	2103      	movs	r1, #3
   81b1a:	2001      	movs	r0, #1
   81b1c:	4b17      	ldr	r3, [pc, #92]	; (81b7c <print_cursor+0x100>)
   81b1e:	4798      	blx	r3
                    lcd_print_s(1, 11, " ");
   81b20:	4a17      	ldr	r2, [pc, #92]	; (81b80 <print_cursor+0x104>)
   81b22:	210b      	movs	r1, #11
   81b24:	2001      	movs	r0, #1
   81b26:	4b15      	ldr	r3, [pc, #84]	; (81b7c <print_cursor+0x100>)
   81b28:	4798      	blx	r3
                    break;
   81b2a:	e005      	b.n	81b38 <print_cursor+0xbc>
                    lcd_print_s(1, 3, " ");
   81b2c:	4a14      	ldr	r2, [pc, #80]	; (81b80 <print_cursor+0x104>)
   81b2e:	2103      	movs	r1, #3
   81b30:	2001      	movs	r0, #1
   81b32:	4b12      	ldr	r3, [pc, #72]	; (81b7c <print_cursor+0x100>)
   81b34:	4798      	blx	r3
                    break;
   81b36:	bf00      	nop
            }
        }
        
        lcd_print_s(prev_cursor_line_on_lcd, 0, " ");
   81b38:	4b14      	ldr	r3, [pc, #80]	; (81b8c <print_cursor+0x110>)
   81b3a:	781b      	ldrb	r3, [r3, #0]
   81b3c:	b25b      	sxtb	r3, r3
   81b3e:	4a10      	ldr	r2, [pc, #64]	; (81b80 <print_cursor+0x104>)
   81b40:	2100      	movs	r1, #0
   81b42:	4618      	mov	r0, r3
   81b44:	4b0d      	ldr	r3, [pc, #52]	; (81b7c <print_cursor+0x100>)
   81b46:	4798      	blx	r3
        lcd_print_s(act_cursor_line_on_lcd, 0, ">");
   81b48:	4b11      	ldr	r3, [pc, #68]	; (81b90 <print_cursor+0x114>)
   81b4a:	781b      	ldrb	r3, [r3, #0]
   81b4c:	b25b      	sxtb	r3, r3
   81b4e:	4a0a      	ldr	r2, [pc, #40]	; (81b78 <print_cursor+0xfc>)
   81b50:	2100      	movs	r1, #0
   81b52:	4618      	mov	r0, r3
   81b54:	4b09      	ldr	r3, [pc, #36]	; (81b7c <print_cursor+0x100>)
   81b56:	4798      	blx	r3
    }
    
    prev_cursor_line = act_cursor_line;
   81b58:	4b05      	ldr	r3, [pc, #20]	; (81b70 <print_cursor+0xf4>)
   81b5a:	781a      	ldrb	r2, [r3, #0]
   81b5c:	4b0a      	ldr	r3, [pc, #40]	; (81b88 <print_cursor+0x10c>)
   81b5e:	701a      	strb	r2, [r3, #0]
    prev_cursor_line_on_lcd = act_cursor_line_on_lcd;
   81b60:	4b0b      	ldr	r3, [pc, #44]	; (81b90 <print_cursor+0x114>)
   81b62:	781a      	ldrb	r2, [r3, #0]
   81b64:	4b09      	ldr	r3, [pc, #36]	; (81b8c <print_cursor+0x110>)
   81b66:	701a      	strb	r2, [r3, #0]
}
   81b68:	bf00      	nop
   81b6a:	bd80      	pop	{r7, pc}
   81b6c:	20070fa0 	.word	0x20070fa0
   81b70:	20070190 	.word	0x20070190
   81b74:	20070194 	.word	0x20070194
   81b78:	00087dec 	.word	0x00087dec
   81b7c:	00080fd1 	.word	0x00080fd1
   81b80:	00087df0 	.word	0x00087df0
   81b84:	00087df4 	.word	0x00087df4
   81b88:	20070191 	.word	0x20070191
   81b8c:	2007018f 	.word	0x2007018f
   81b90:	2007018e 	.word	0x2007018e

00081b94 <button_events>:

event_t button_events(void)
{
   81b94:	b580      	push	{r7, lr}
   81b96:	b082      	sub	sp, #8
   81b98:	af00      	add	r7, sp, #0
    event_t nextEvent = EVENT_NO_EVENT;
   81b9a:	2300      	movs	r3, #0
   81b9c:	71fb      	strb	r3, [r7, #7]

    if (getTicks() >= (ticks_button_update + 30))
   81b9e:	4b88      	ldr	r3, [pc, #544]	; (81dc0 <button_events+0x22c>)
   81ba0:	4798      	blx	r3
   81ba2:	4602      	mov	r2, r0
   81ba4:	4b87      	ldr	r3, [pc, #540]	; (81dc4 <button_events+0x230>)
   81ba6:	681b      	ldr	r3, [r3, #0]
   81ba8:	331e      	adds	r3, #30
   81baa:	429a      	cmp	r2, r3
   81bac:	f0c0 814a 	bcc.w	81e44 <button_events+0x2b0>
    {
        ticks_button_update = getTicks();
   81bb0:	4b83      	ldr	r3, [pc, #524]	; (81dc0 <button_events+0x22c>)
   81bb2:	4798      	blx	r3
   81bb4:	4602      	mov	r2, r0
   81bb6:	4b83      	ldr	r3, [pc, #524]	; (81dc4 <button_events+0x230>)
   81bb8:	601a      	str	r2, [r3, #0]
        
        pb_up_act = ioport_get_pin_level(PB_UP);
   81bba:	2060      	movs	r0, #96	; 0x60
   81bbc:	4b82      	ldr	r3, [pc, #520]	; (81dc8 <button_events+0x234>)
   81bbe:	4798      	blx	r3
   81bc0:	4603      	mov	r3, r0
   81bc2:	461a      	mov	r2, r3
   81bc4:	4b81      	ldr	r3, [pc, #516]	; (81dcc <button_events+0x238>)
   81bc6:	701a      	strb	r2, [r3, #0]
        pb_left_act = ioport_get_pin_level(PB_LEFT);
   81bc8:	2061      	movs	r0, #97	; 0x61
   81bca:	4b7f      	ldr	r3, [pc, #508]	; (81dc8 <button_events+0x234>)
   81bcc:	4798      	blx	r3
   81bce:	4603      	mov	r3, r0
   81bd0:	461a      	mov	r2, r3
   81bd2:	4b7f      	ldr	r3, [pc, #508]	; (81dd0 <button_events+0x23c>)
   81bd4:	701a      	strb	r2, [r3, #0]
        pb_mid_act = ioport_get_pin_level(PB_MID);
   81bd6:	2062      	movs	r0, #98	; 0x62
   81bd8:	4b7b      	ldr	r3, [pc, #492]	; (81dc8 <button_events+0x234>)
   81bda:	4798      	blx	r3
   81bdc:	4603      	mov	r3, r0
   81bde:	461a      	mov	r2, r3
   81be0:	4b7c      	ldr	r3, [pc, #496]	; (81dd4 <button_events+0x240>)
   81be2:	701a      	strb	r2, [r3, #0]
        pb_right_act = ioport_get_pin_level(PB_RIGHT);
   81be4:	2063      	movs	r0, #99	; 0x63
   81be6:	4b78      	ldr	r3, [pc, #480]	; (81dc8 <button_events+0x234>)
   81be8:	4798      	blx	r3
   81bea:	4603      	mov	r3, r0
   81bec:	461a      	mov	r2, r3
   81bee:	4b7a      	ldr	r3, [pc, #488]	; (81dd8 <button_events+0x244>)
   81bf0:	701a      	strb	r2, [r3, #0]
        pb_down_act = ioport_get_pin_level(PB_DOWN);
   81bf2:	2064      	movs	r0, #100	; 0x64
   81bf4:	4b74      	ldr	r3, [pc, #464]	; (81dc8 <button_events+0x234>)
   81bf6:	4798      	blx	r3
   81bf8:	4603      	mov	r3, r0
   81bfa:	461a      	mov	r2, r3
   81bfc:	4b77      	ldr	r3, [pc, #476]	; (81ddc <button_events+0x248>)
   81bfe:	701a      	strb	r2, [r3, #0]
        pb_return_act = ioport_get_pin_level(PB_RETURN);
   81c00:	2065      	movs	r0, #101	; 0x65
   81c02:	4b71      	ldr	r3, [pc, #452]	; (81dc8 <button_events+0x234>)
   81c04:	4798      	blx	r3
   81c06:	4603      	mov	r3, r0
   81c08:	461a      	mov	r2, r3
   81c0a:	4b75      	ldr	r3, [pc, #468]	; (81de0 <button_events+0x24c>)
   81c0c:	701a      	strb	r2, [r3, #0]
        
        if (pb_up_act != pb_up_prev && pb_up_act == 0)
   81c0e:	4b6f      	ldr	r3, [pc, #444]	; (81dcc <button_events+0x238>)
   81c10:	781a      	ldrb	r2, [r3, #0]
   81c12:	4b74      	ldr	r3, [pc, #464]	; (81de4 <button_events+0x250>)
   81c14:	781b      	ldrb	r3, [r3, #0]
   81c16:	429a      	cmp	r2, r3
   81c18:	d006      	beq.n	81c28 <button_events+0x94>
   81c1a:	4b6c      	ldr	r3, [pc, #432]	; (81dcc <button_events+0x238>)
   81c1c:	781b      	ldrb	r3, [r3, #0]
   81c1e:	2b00      	cmp	r3, #0
   81c20:	d102      	bne.n	81c28 <button_events+0x94>
        {
            nextEvent = EVENT_BUTTON_UP_P;
   81c22:	2301      	movs	r3, #1
   81c24:	71fb      	strb	r3, [r7, #7]
   81c26:	e018      	b.n	81c5a <button_events+0xc6>
        }
        else if (pb_up_act != pb_up_prev && pb_up_act == 1)
   81c28:	4b68      	ldr	r3, [pc, #416]	; (81dcc <button_events+0x238>)
   81c2a:	781a      	ldrb	r2, [r3, #0]
   81c2c:	4b6d      	ldr	r3, [pc, #436]	; (81de4 <button_events+0x250>)
   81c2e:	781b      	ldrb	r3, [r3, #0]
   81c30:	429a      	cmp	r2, r3
   81c32:	d006      	beq.n	81c42 <button_events+0xae>
   81c34:	4b65      	ldr	r3, [pc, #404]	; (81dcc <button_events+0x238>)
   81c36:	781b      	ldrb	r3, [r3, #0]
   81c38:	2b01      	cmp	r3, #1
   81c3a:	d102      	bne.n	81c42 <button_events+0xae>
        {
            nextEvent = EVENT_BUTTON_UP_R;
   81c3c:	2303      	movs	r3, #3
   81c3e:	71fb      	strb	r3, [r7, #7]
   81c40:	e00b      	b.n	81c5a <button_events+0xc6>
        }
        else if (pb_up_act == pb_up_prev && pb_up_act == 0)
   81c42:	4b62      	ldr	r3, [pc, #392]	; (81dcc <button_events+0x238>)
   81c44:	781a      	ldrb	r2, [r3, #0]
   81c46:	4b67      	ldr	r3, [pc, #412]	; (81de4 <button_events+0x250>)
   81c48:	781b      	ldrb	r3, [r3, #0]
   81c4a:	429a      	cmp	r2, r3
   81c4c:	d105      	bne.n	81c5a <button_events+0xc6>
   81c4e:	4b5f      	ldr	r3, [pc, #380]	; (81dcc <button_events+0x238>)
   81c50:	781b      	ldrb	r3, [r3, #0]
   81c52:	2b00      	cmp	r3, #0
   81c54:	d101      	bne.n	81c5a <button_events+0xc6>
        {
            nextEvent = EVENT_BUTTON_UP_H;
   81c56:	2302      	movs	r3, #2
   81c58:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_left_act != pb_left_prev && pb_left_act == 0)
   81c5a:	4b5d      	ldr	r3, [pc, #372]	; (81dd0 <button_events+0x23c>)
   81c5c:	781a      	ldrb	r2, [r3, #0]
   81c5e:	4b62      	ldr	r3, [pc, #392]	; (81de8 <button_events+0x254>)
   81c60:	781b      	ldrb	r3, [r3, #0]
   81c62:	429a      	cmp	r2, r3
   81c64:	d006      	beq.n	81c74 <button_events+0xe0>
   81c66:	4b5a      	ldr	r3, [pc, #360]	; (81dd0 <button_events+0x23c>)
   81c68:	781b      	ldrb	r3, [r3, #0]
   81c6a:	2b00      	cmp	r3, #0
   81c6c:	d102      	bne.n	81c74 <button_events+0xe0>
        {
            nextEvent = EVENT_BUTTON_LEFT_P;
   81c6e:	2304      	movs	r3, #4
   81c70:	71fb      	strb	r3, [r7, #7]
   81c72:	e018      	b.n	81ca6 <button_events+0x112>
        }
        else if (pb_left_act != pb_left_prev && pb_left_act == 1)
   81c74:	4b56      	ldr	r3, [pc, #344]	; (81dd0 <button_events+0x23c>)
   81c76:	781a      	ldrb	r2, [r3, #0]
   81c78:	4b5b      	ldr	r3, [pc, #364]	; (81de8 <button_events+0x254>)
   81c7a:	781b      	ldrb	r3, [r3, #0]
   81c7c:	429a      	cmp	r2, r3
   81c7e:	d006      	beq.n	81c8e <button_events+0xfa>
   81c80:	4b53      	ldr	r3, [pc, #332]	; (81dd0 <button_events+0x23c>)
   81c82:	781b      	ldrb	r3, [r3, #0]
   81c84:	2b01      	cmp	r3, #1
   81c86:	d102      	bne.n	81c8e <button_events+0xfa>
        {
            nextEvent = EVENT_BUTTON_LEFT_R;
   81c88:	2306      	movs	r3, #6
   81c8a:	71fb      	strb	r3, [r7, #7]
   81c8c:	e00b      	b.n	81ca6 <button_events+0x112>
        }
        else if (pb_left_act == pb_left_prev && pb_left_act == 0)
   81c8e:	4b50      	ldr	r3, [pc, #320]	; (81dd0 <button_events+0x23c>)
   81c90:	781a      	ldrb	r2, [r3, #0]
   81c92:	4b55      	ldr	r3, [pc, #340]	; (81de8 <button_events+0x254>)
   81c94:	781b      	ldrb	r3, [r3, #0]
   81c96:	429a      	cmp	r2, r3
   81c98:	d105      	bne.n	81ca6 <button_events+0x112>
   81c9a:	4b4d      	ldr	r3, [pc, #308]	; (81dd0 <button_events+0x23c>)
   81c9c:	781b      	ldrb	r3, [r3, #0]
   81c9e:	2b00      	cmp	r3, #0
   81ca0:	d101      	bne.n	81ca6 <button_events+0x112>
        {
            nextEvent = EVENT_BUTTON_LEFT_H;
   81ca2:	2305      	movs	r3, #5
   81ca4:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_mid_act != pb_mid_prev && pb_mid_act == 0)
   81ca6:	4b4b      	ldr	r3, [pc, #300]	; (81dd4 <button_events+0x240>)
   81ca8:	781a      	ldrb	r2, [r3, #0]
   81caa:	4b50      	ldr	r3, [pc, #320]	; (81dec <button_events+0x258>)
   81cac:	781b      	ldrb	r3, [r3, #0]
   81cae:	429a      	cmp	r2, r3
   81cb0:	d006      	beq.n	81cc0 <button_events+0x12c>
   81cb2:	4b48      	ldr	r3, [pc, #288]	; (81dd4 <button_events+0x240>)
   81cb4:	781b      	ldrb	r3, [r3, #0]
   81cb6:	2b00      	cmp	r3, #0
   81cb8:	d102      	bne.n	81cc0 <button_events+0x12c>
        {
            nextEvent = EVENT_BUTTON_MID_P;
   81cba:	2307      	movs	r3, #7
   81cbc:	71fb      	strb	r3, [r7, #7]
   81cbe:	e018      	b.n	81cf2 <button_events+0x15e>
        }
        else if (pb_mid_act != pb_mid_prev && pb_mid_act == 1)
   81cc0:	4b44      	ldr	r3, [pc, #272]	; (81dd4 <button_events+0x240>)
   81cc2:	781a      	ldrb	r2, [r3, #0]
   81cc4:	4b49      	ldr	r3, [pc, #292]	; (81dec <button_events+0x258>)
   81cc6:	781b      	ldrb	r3, [r3, #0]
   81cc8:	429a      	cmp	r2, r3
   81cca:	d006      	beq.n	81cda <button_events+0x146>
   81ccc:	4b41      	ldr	r3, [pc, #260]	; (81dd4 <button_events+0x240>)
   81cce:	781b      	ldrb	r3, [r3, #0]
   81cd0:	2b01      	cmp	r3, #1
   81cd2:	d102      	bne.n	81cda <button_events+0x146>
        {
            nextEvent = EVENT_BUTTON_MID_R;
   81cd4:	2309      	movs	r3, #9
   81cd6:	71fb      	strb	r3, [r7, #7]
   81cd8:	e00b      	b.n	81cf2 <button_events+0x15e>
        }
        else if (pb_mid_act == pb_mid_prev && pb_mid_act == 0)
   81cda:	4b3e      	ldr	r3, [pc, #248]	; (81dd4 <button_events+0x240>)
   81cdc:	781a      	ldrb	r2, [r3, #0]
   81cde:	4b43      	ldr	r3, [pc, #268]	; (81dec <button_events+0x258>)
   81ce0:	781b      	ldrb	r3, [r3, #0]
   81ce2:	429a      	cmp	r2, r3
   81ce4:	d105      	bne.n	81cf2 <button_events+0x15e>
   81ce6:	4b3b      	ldr	r3, [pc, #236]	; (81dd4 <button_events+0x240>)
   81ce8:	781b      	ldrb	r3, [r3, #0]
   81cea:	2b00      	cmp	r3, #0
   81cec:	d101      	bne.n	81cf2 <button_events+0x15e>
        {
            nextEvent = EVENT_BUTTON_MID_H;
   81cee:	2308      	movs	r3, #8
   81cf0:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_right_act != pb_right_prev && pb_right_act == 0)
   81cf2:	4b39      	ldr	r3, [pc, #228]	; (81dd8 <button_events+0x244>)
   81cf4:	781a      	ldrb	r2, [r3, #0]
   81cf6:	4b3e      	ldr	r3, [pc, #248]	; (81df0 <button_events+0x25c>)
   81cf8:	781b      	ldrb	r3, [r3, #0]
   81cfa:	429a      	cmp	r2, r3
   81cfc:	d006      	beq.n	81d0c <button_events+0x178>
   81cfe:	4b36      	ldr	r3, [pc, #216]	; (81dd8 <button_events+0x244>)
   81d00:	781b      	ldrb	r3, [r3, #0]
   81d02:	2b00      	cmp	r3, #0
   81d04:	d102      	bne.n	81d0c <button_events+0x178>
        {
            nextEvent = EVENT_BUTTON_RIGHT_P;
   81d06:	230a      	movs	r3, #10
   81d08:	71fb      	strb	r3, [r7, #7]
   81d0a:	e018      	b.n	81d3e <button_events+0x1aa>
        }
        else if (pb_right_act != pb_right_prev && pb_right_act == 1)
   81d0c:	4b32      	ldr	r3, [pc, #200]	; (81dd8 <button_events+0x244>)
   81d0e:	781a      	ldrb	r2, [r3, #0]
   81d10:	4b37      	ldr	r3, [pc, #220]	; (81df0 <button_events+0x25c>)
   81d12:	781b      	ldrb	r3, [r3, #0]
   81d14:	429a      	cmp	r2, r3
   81d16:	d006      	beq.n	81d26 <button_events+0x192>
   81d18:	4b2f      	ldr	r3, [pc, #188]	; (81dd8 <button_events+0x244>)
   81d1a:	781b      	ldrb	r3, [r3, #0]
   81d1c:	2b01      	cmp	r3, #1
   81d1e:	d102      	bne.n	81d26 <button_events+0x192>
        {
            nextEvent = EVENT_BUTTON_RIGHT_R;
   81d20:	230c      	movs	r3, #12
   81d22:	71fb      	strb	r3, [r7, #7]
   81d24:	e00b      	b.n	81d3e <button_events+0x1aa>
        }
        else if (pb_right_act == pb_right_prev && pb_right_act == 0)
   81d26:	4b2c      	ldr	r3, [pc, #176]	; (81dd8 <button_events+0x244>)
   81d28:	781a      	ldrb	r2, [r3, #0]
   81d2a:	4b31      	ldr	r3, [pc, #196]	; (81df0 <button_events+0x25c>)
   81d2c:	781b      	ldrb	r3, [r3, #0]
   81d2e:	429a      	cmp	r2, r3
   81d30:	d105      	bne.n	81d3e <button_events+0x1aa>
   81d32:	4b29      	ldr	r3, [pc, #164]	; (81dd8 <button_events+0x244>)
   81d34:	781b      	ldrb	r3, [r3, #0]
   81d36:	2b00      	cmp	r3, #0
   81d38:	d101      	bne.n	81d3e <button_events+0x1aa>
        {
            nextEvent = EVENT_BUTTON_RIGHT_H;
   81d3a:	230b      	movs	r3, #11
   81d3c:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_down_act != pb_down_prev && pb_down_act == 0)
   81d3e:	4b27      	ldr	r3, [pc, #156]	; (81ddc <button_events+0x248>)
   81d40:	781a      	ldrb	r2, [r3, #0]
   81d42:	4b2c      	ldr	r3, [pc, #176]	; (81df4 <button_events+0x260>)
   81d44:	781b      	ldrb	r3, [r3, #0]
   81d46:	429a      	cmp	r2, r3
   81d48:	d006      	beq.n	81d58 <button_events+0x1c4>
   81d4a:	4b24      	ldr	r3, [pc, #144]	; (81ddc <button_events+0x248>)
   81d4c:	781b      	ldrb	r3, [r3, #0]
   81d4e:	2b00      	cmp	r3, #0
   81d50:	d102      	bne.n	81d58 <button_events+0x1c4>
        {
            nextEvent = EVENT_BUTTON_DOWN_P;
   81d52:	230d      	movs	r3, #13
   81d54:	71fb      	strb	r3, [r7, #7]
   81d56:	e018      	b.n	81d8a <button_events+0x1f6>
        }
        else if (pb_down_act != pb_down_prev && pb_down_act == 1)
   81d58:	4b20      	ldr	r3, [pc, #128]	; (81ddc <button_events+0x248>)
   81d5a:	781a      	ldrb	r2, [r3, #0]
   81d5c:	4b25      	ldr	r3, [pc, #148]	; (81df4 <button_events+0x260>)
   81d5e:	781b      	ldrb	r3, [r3, #0]
   81d60:	429a      	cmp	r2, r3
   81d62:	d006      	beq.n	81d72 <button_events+0x1de>
   81d64:	4b1d      	ldr	r3, [pc, #116]	; (81ddc <button_events+0x248>)
   81d66:	781b      	ldrb	r3, [r3, #0]
   81d68:	2b01      	cmp	r3, #1
   81d6a:	d102      	bne.n	81d72 <button_events+0x1de>
        {
            nextEvent = EVENT_BUTTON_DOWN_R;
   81d6c:	230f      	movs	r3, #15
   81d6e:	71fb      	strb	r3, [r7, #7]
   81d70:	e00b      	b.n	81d8a <button_events+0x1f6>
        }
        else if (pb_down_act == pb_down_prev && pb_down_act == 0)
   81d72:	4b1a      	ldr	r3, [pc, #104]	; (81ddc <button_events+0x248>)
   81d74:	781a      	ldrb	r2, [r3, #0]
   81d76:	4b1f      	ldr	r3, [pc, #124]	; (81df4 <button_events+0x260>)
   81d78:	781b      	ldrb	r3, [r3, #0]
   81d7a:	429a      	cmp	r2, r3
   81d7c:	d105      	bne.n	81d8a <button_events+0x1f6>
   81d7e:	4b17      	ldr	r3, [pc, #92]	; (81ddc <button_events+0x248>)
   81d80:	781b      	ldrb	r3, [r3, #0]
   81d82:	2b00      	cmp	r3, #0
   81d84:	d101      	bne.n	81d8a <button_events+0x1f6>
        {
            nextEvent = EVENT_BUTTON_DOWN_H;
   81d86:	230e      	movs	r3, #14
   81d88:	71fb      	strb	r3, [r7, #7]
        }
        
        if (pb_return_act != pb_return_prev && pb_return_act == 0)
   81d8a:	4b15      	ldr	r3, [pc, #84]	; (81de0 <button_events+0x24c>)
   81d8c:	781a      	ldrb	r2, [r3, #0]
   81d8e:	4b1a      	ldr	r3, [pc, #104]	; (81df8 <button_events+0x264>)
   81d90:	781b      	ldrb	r3, [r3, #0]
   81d92:	429a      	cmp	r2, r3
   81d94:	d006      	beq.n	81da4 <button_events+0x210>
   81d96:	4b12      	ldr	r3, [pc, #72]	; (81de0 <button_events+0x24c>)
   81d98:	781b      	ldrb	r3, [r3, #0]
   81d9a:	2b00      	cmp	r3, #0
   81d9c:	d102      	bne.n	81da4 <button_events+0x210>
        {
            nextEvent = EVENT_BUTTON_RETURN_P;
   81d9e:	2310      	movs	r3, #16
   81da0:	71fb      	strb	r3, [r7, #7]
   81da2:	e037      	b.n	81e14 <button_events+0x280>
        }
        else if (pb_return_act != pb_return_prev && pb_return_act == 1)
   81da4:	4b0e      	ldr	r3, [pc, #56]	; (81de0 <button_events+0x24c>)
   81da6:	781a      	ldrb	r2, [r3, #0]
   81da8:	4b13      	ldr	r3, [pc, #76]	; (81df8 <button_events+0x264>)
   81daa:	781b      	ldrb	r3, [r3, #0]
   81dac:	429a      	cmp	r2, r3
   81dae:	d025      	beq.n	81dfc <button_events+0x268>
   81db0:	4b0b      	ldr	r3, [pc, #44]	; (81de0 <button_events+0x24c>)
   81db2:	781b      	ldrb	r3, [r3, #0]
   81db4:	2b01      	cmp	r3, #1
   81db6:	d121      	bne.n	81dfc <button_events+0x268>
        {
            nextEvent = EVENT_BUTTON_RETURN_R;
   81db8:	2312      	movs	r3, #18
   81dba:	71fb      	strb	r3, [r7, #7]
   81dbc:	e02a      	b.n	81e14 <button_events+0x280>
   81dbe:	bf00      	nop
   81dc0:	00081f09 	.word	0x00081f09
   81dc4:	20070ff8 	.word	0x20070ff8
   81dc8:	00081675 	.word	0x00081675
   81dcc:	20071025 	.word	0x20071025
   81dd0:	2007100c 	.word	0x2007100c
   81dd4:	20071024 	.word	0x20071024
   81dd8:	20071026 	.word	0x20071026
   81ddc:	20071008 	.word	0x20071008
   81de0:	20071004 	.word	0x20071004
   81de4:	20071009 	.word	0x20071009
   81de8:	20071007 	.word	0x20071007
   81dec:	20071005 	.word	0x20071005
   81df0:	2007100a 	.word	0x2007100a
   81df4:	20071006 	.word	0x20071006
   81df8:	2007100b 	.word	0x2007100b
        }
        else if (pb_return_act == pb_up_prev && pb_return_act == 0)
   81dfc:	4b14      	ldr	r3, [pc, #80]	; (81e50 <button_events+0x2bc>)
   81dfe:	781a      	ldrb	r2, [r3, #0]
   81e00:	4b14      	ldr	r3, [pc, #80]	; (81e54 <button_events+0x2c0>)
   81e02:	781b      	ldrb	r3, [r3, #0]
   81e04:	429a      	cmp	r2, r3
   81e06:	d105      	bne.n	81e14 <button_events+0x280>
   81e08:	4b11      	ldr	r3, [pc, #68]	; (81e50 <button_events+0x2bc>)
   81e0a:	781b      	ldrb	r3, [r3, #0]
   81e0c:	2b00      	cmp	r3, #0
   81e0e:	d101      	bne.n	81e14 <button_events+0x280>
        {
            nextEvent = EVENT_BUTTON_RETURN_H;
   81e10:	2311      	movs	r3, #17
   81e12:	71fb      	strb	r3, [r7, #7]
        }
        
        pb_up_prev = pb_up_act;
   81e14:	4b10      	ldr	r3, [pc, #64]	; (81e58 <button_events+0x2c4>)
   81e16:	781a      	ldrb	r2, [r3, #0]
   81e18:	4b0e      	ldr	r3, [pc, #56]	; (81e54 <button_events+0x2c0>)
   81e1a:	701a      	strb	r2, [r3, #0]
        pb_left_prev = pb_left_act;
   81e1c:	4b0f      	ldr	r3, [pc, #60]	; (81e5c <button_events+0x2c8>)
   81e1e:	781a      	ldrb	r2, [r3, #0]
   81e20:	4b0f      	ldr	r3, [pc, #60]	; (81e60 <button_events+0x2cc>)
   81e22:	701a      	strb	r2, [r3, #0]
        pb_mid_prev = pb_mid_act;
   81e24:	4b0f      	ldr	r3, [pc, #60]	; (81e64 <button_events+0x2d0>)
   81e26:	781a      	ldrb	r2, [r3, #0]
   81e28:	4b0f      	ldr	r3, [pc, #60]	; (81e68 <button_events+0x2d4>)
   81e2a:	701a      	strb	r2, [r3, #0]
        pb_right_prev = pb_right_act;
   81e2c:	4b0f      	ldr	r3, [pc, #60]	; (81e6c <button_events+0x2d8>)
   81e2e:	781a      	ldrb	r2, [r3, #0]
   81e30:	4b0f      	ldr	r3, [pc, #60]	; (81e70 <button_events+0x2dc>)
   81e32:	701a      	strb	r2, [r3, #0]
        pb_down_prev = pb_down_act;
   81e34:	4b0f      	ldr	r3, [pc, #60]	; (81e74 <button_events+0x2e0>)
   81e36:	781a      	ldrb	r2, [r3, #0]
   81e38:	4b0f      	ldr	r3, [pc, #60]	; (81e78 <button_events+0x2e4>)
   81e3a:	701a      	strb	r2, [r3, #0]
        pb_return_prev = pb_return_act;
   81e3c:	4b04      	ldr	r3, [pc, #16]	; (81e50 <button_events+0x2bc>)
   81e3e:	781a      	ldrb	r2, [r3, #0]
   81e40:	4b0e      	ldr	r3, [pc, #56]	; (81e7c <button_events+0x2e8>)
   81e42:	701a      	strb	r2, [r3, #0]
    }

    return nextEvent;
   81e44:	79fb      	ldrb	r3, [r7, #7]
}
   81e46:	4618      	mov	r0, r3
   81e48:	3708      	adds	r7, #8
   81e4a:	46bd      	mov	sp, r7
   81e4c:	bd80      	pop	{r7, pc}
   81e4e:	bf00      	nop
   81e50:	20071004 	.word	0x20071004
   81e54:	20071009 	.word	0x20071009
   81e58:	20071025 	.word	0x20071025
   81e5c:	2007100c 	.word	0x2007100c
   81e60:	20071007 	.word	0x20071007
   81e64:	20071024 	.word	0x20071024
   81e68:	20071005 	.word	0x20071005
   81e6c:	20071026 	.word	0x20071026
   81e70:	2007100a 	.word	0x2007100a
   81e74:	20071008 	.word	0x20071008
   81e78:	20071006 	.word	0x20071006
   81e7c:	2007100b 	.word	0x2007100b

00081e80 <ioport_set_pin_level>:
{
   81e80:	b480      	push	{r7}
   81e82:	b08b      	sub	sp, #44	; 0x2c
   81e84:	af00      	add	r7, sp, #0
   81e86:	6078      	str	r0, [r7, #4]
   81e88:	460b      	mov	r3, r1
   81e8a:	70fb      	strb	r3, [r7, #3]
   81e8c:	687b      	ldr	r3, [r7, #4]
   81e8e:	627b      	str	r3, [r7, #36]	; 0x24
   81e90:	78fb      	ldrb	r3, [r7, #3]
   81e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81e98:	61fb      	str	r3, [r7, #28]
   81e9a:	69fb      	ldr	r3, [r7, #28]
   81e9c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   81e9e:	69bb      	ldr	r3, [r7, #24]
   81ea0:	095b      	lsrs	r3, r3, #5
   81ea2:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81ea4:	697b      	ldr	r3, [r7, #20]
   81ea6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81eaa:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81eae:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   81eb0:	613b      	str	r3, [r7, #16]
	if (level) {
   81eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81eb6:	2b00      	cmp	r3, #0
   81eb8:	d009      	beq.n	81ece <ioport_set_pin_level+0x4e>
   81eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81ebc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81ebe:	68fb      	ldr	r3, [r7, #12]
   81ec0:	f003 031f 	and.w	r3, r3, #31
   81ec4:	2201      	movs	r2, #1
   81ec6:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81ec8:	693b      	ldr	r3, [r7, #16]
   81eca:	631a      	str	r2, [r3, #48]	; 0x30
}
   81ecc:	e008      	b.n	81ee0 <ioport_set_pin_level+0x60>
   81ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81ed0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   81ed2:	68bb      	ldr	r3, [r7, #8]
   81ed4:	f003 031f 	and.w	r3, r3, #31
   81ed8:	2201      	movs	r2, #1
   81eda:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81edc:	693b      	ldr	r3, [r7, #16]
   81ede:	635a      	str	r2, [r3, #52]	; 0x34
   81ee0:	bf00      	nop
   81ee2:	372c      	adds	r7, #44	; 0x2c
   81ee4:	46bd      	mov	sp, r7
   81ee6:	bc80      	pop	{r7}
   81ee8:	4770      	bx	lr
	...

00081eec <SysTick_Handler>:
float battery_voltage = 0;
uint8_t battery_percentage;
uint8_t prev_battery_percentage = 0;

void SysTick_Handler(void)
{
   81eec:	b480      	push	{r7}
   81eee:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   81ef0:	4b04      	ldr	r3, [pc, #16]	; (81f04 <SysTick_Handler+0x18>)
   81ef2:	681b      	ldr	r3, [r3, #0]
   81ef4:	3301      	adds	r3, #1
   81ef6:	4a03      	ldr	r2, [pc, #12]	; (81f04 <SysTick_Handler+0x18>)
   81ef8:	6013      	str	r3, [r2, #0]
}
   81efa:	bf00      	nop
   81efc:	46bd      	mov	sp, r7
   81efe:	bc80      	pop	{r7}
   81f00:	4770      	bx	lr
   81f02:	bf00      	nop
   81f04:	20070fa4 	.word	0x20070fa4

00081f08 <getTicks>:

uint32_t getTicks(void)
{
   81f08:	b480      	push	{r7}
   81f0a:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   81f0c:	4b02      	ldr	r3, [pc, #8]	; (81f18 <getTicks+0x10>)
   81f0e:	681b      	ldr	r3, [r3, #0]
}
   81f10:	4618      	mov	r0, r3
   81f12:	46bd      	mov	sp, r7
   81f14:	bc80      	pop	{r7}
   81f16:	4770      	bx	lr
   81f18:	20070fa4 	.word	0x20070fa4

00081f1c <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   81f1c:	b480      	push	{r7}
   81f1e:	b085      	sub	sp, #20
   81f20:	af00      	add	r7, sp, #0
   81f22:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   81f24:	4b07      	ldr	r3, [pc, #28]	; (81f44 <mdelay+0x28>)
   81f26:	681b      	ldr	r3, [r3, #0]
   81f28:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   81f2a:	bf00      	nop
   81f2c:	4b05      	ldr	r3, [pc, #20]	; (81f44 <mdelay+0x28>)
   81f2e:	681a      	ldr	r2, [r3, #0]
   81f30:	68fb      	ldr	r3, [r7, #12]
   81f32:	1ad2      	subs	r2, r2, r3
   81f34:	687b      	ldr	r3, [r7, #4]
   81f36:	429a      	cmp	r2, r3
   81f38:	d3f8      	bcc.n	81f2c <mdelay+0x10>
}
   81f3a:	bf00      	nop
   81f3c:	3714      	adds	r7, #20
   81f3e:	46bd      	mov	sp, r7
   81f40:	bc80      	pop	{r7}
   81f42:	4770      	bx	lr
   81f44:	20070fa4 	.word	0x20070fa4

00081f48 <update_comm>:

void update_comm(void)
{
   81f48:	b580      	push	{r7, lr}
   81f4a:	af00      	add	r7, sp, #0
    if ((getTicks() - ticks_comm) > 5)
   81f4c:	4b0b      	ldr	r3, [pc, #44]	; (81f7c <update_comm+0x34>)
   81f4e:	4798      	blx	r3
   81f50:	4602      	mov	r2, r0
   81f52:	4b0b      	ldr	r3, [pc, #44]	; (81f80 <update_comm+0x38>)
   81f54:	681b      	ldr	r3, [r3, #0]
   81f56:	1ad3      	subs	r3, r2, r3
   81f58:	2b05      	cmp	r3, #5
   81f5a:	d90d      	bls.n	81f78 <update_comm+0x30>
    {
        ticks_comm = getTicks();
   81f5c:	4b07      	ldr	r3, [pc, #28]	; (81f7c <update_comm+0x34>)
   81f5e:	4798      	blx	r3
   81f60:	4602      	mov	r2, r0
   81f62:	4b07      	ldr	r3, [pc, #28]	; (81f80 <update_comm+0x38>)
   81f64:	601a      	str	r2, [r3, #0]
        
        memcpy(&sens_buf, &mts, sizeof(mts));
   81f66:	4b07      	ldr	r3, [pc, #28]	; (81f84 <update_comm+0x3c>)
   81f68:	881b      	ldrh	r3, [r3, #0]
   81f6a:	b29b      	uxth	r3, r3
   81f6c:	4a06      	ldr	r2, [pc, #24]	; (81f88 <update_comm+0x40>)
   81f6e:	8013      	strh	r3, [r2, #0]
        spi_master_transfer(&sens_buf, sizeof(sens_buf));
   81f70:	2102      	movs	r1, #2
   81f72:	4805      	ldr	r0, [pc, #20]	; (81f88 <update_comm+0x40>)
   81f74:	4b05      	ldr	r3, [pc, #20]	; (81f8c <update_comm+0x44>)
   81f76:	4798      	blx	r3
    }
}
   81f78:	bf00      	nop
   81f7a:	bd80      	pop	{r7, pc}
   81f7c:	00081f09 	.word	0x00081f09
   81f80:	20070ff4 	.word	0x20070ff4
   81f84:	20070fe8 	.word	0x20070fe8
   81f88:	20070fe4 	.word	0x20070fe4
   81f8c:	00080645 	.word	0x00080645

00081f90 <update_battery>:

void update_battery(Bool update_forced)
{
   81f90:	b580      	push	{r7, lr}
   81f92:	b084      	sub	sp, #16
   81f94:	af00      	add	r7, sp, #0
   81f96:	4603      	mov	r3, r0
   81f98:	71fb      	strb	r3, [r7, #7]
    char tmp[4];
    
    if (menu_main_scroll == 0)
   81f9a:	4b0e      	ldr	r3, [pc, #56]	; (81fd4 <update_battery+0x44>)
   81f9c:	781b      	ldrb	r3, [r3, #0]
   81f9e:	2b00      	cmp	r3, #0
   81fa0:	d113      	bne.n	81fca <update_battery+0x3a>
    {
        if ((getTicks() - ticks_battery) >= 100)
   81fa2:	4b0d      	ldr	r3, [pc, #52]	; (81fd8 <update_battery+0x48>)
   81fa4:	4798      	blx	r3
   81fa6:	4602      	mov	r2, r0
   81fa8:	4b0c      	ldr	r3, [pc, #48]	; (81fdc <update_battery+0x4c>)
   81faa:	681b      	ldr	r3, [r3, #0]
   81fac:	1ad3      	subs	r3, r2, r3
   81fae:	2b63      	cmp	r3, #99	; 0x63
   81fb0:	d90b      	bls.n	81fca <update_battery+0x3a>
        {
            ticks_battery = getTicks();
   81fb2:	4b09      	ldr	r3, [pc, #36]	; (81fd8 <update_battery+0x48>)
   81fb4:	4798      	blx	r3
   81fb6:	4602      	mov	r2, r0
   81fb8:	4b08      	ldr	r3, [pc, #32]	; (81fdc <update_battery+0x4c>)
   81fba:	601a      	str	r2, [r3, #0]
            lcd_print_i(1, 9, stm.bat_percentage);
   81fbc:	4b08      	ldr	r3, [pc, #32]	; (81fe0 <update_battery+0x50>)
   81fbe:	785b      	ldrb	r3, [r3, #1]
   81fc0:	461a      	mov	r2, r3
   81fc2:	2109      	movs	r1, #9
   81fc4:	2001      	movs	r0, #1
   81fc6:	4b07      	ldr	r3, [pc, #28]	; (81fe4 <update_battery+0x54>)
   81fc8:	4798      	blx	r3
                lcd_print_s(1, 17, tmp);
                prev_battery_percentage = stm.bat_percentage;
            }          
        }*/
    }
}
   81fca:	bf00      	nop
   81fcc:	3710      	adds	r7, #16
   81fce:	46bd      	mov	sp, r7
   81fd0:	bd80      	pop	{r7, pc}
   81fd2:	bf00      	nop
   81fd4:	20070fa1 	.word	0x20070fa1
   81fd8:	00081f09 	.word	0x00081f09
   81fdc:	20070ffc 	.word	0x20070ffc
   81fe0:	20070fec 	.word	0x20070fec
   81fe4:	00080f8d 	.word	0x00080f8d

00081fe8 <update_heartbeat>:

void update_heartbeat(void)
{
   81fe8:	b580      	push	{r7, lr}
   81fea:	af00      	add	r7, sp, #0
    if (heart_state)
   81fec:	4b20      	ldr	r3, [pc, #128]	; (82070 <update_heartbeat+0x88>)
   81fee:	781b      	ldrb	r3, [r3, #0]
   81ff0:	2b00      	cmp	r3, #0
   81ff2:	d01d      	beq.n	82030 <update_heartbeat+0x48>
    {
        if (getTicks() >= (ticks_heartbeat + 100))
   81ff4:	4b1f      	ldr	r3, [pc, #124]	; (82074 <update_heartbeat+0x8c>)
   81ff6:	4798      	blx	r3
   81ff8:	4602      	mov	r2, r0
   81ffa:	4b1f      	ldr	r3, [pc, #124]	; (82078 <update_heartbeat+0x90>)
   81ffc:	681b      	ldr	r3, [r3, #0]
   81ffe:	3364      	adds	r3, #100	; 0x64
   82000:	429a      	cmp	r2, r3
   82002:	d333      	bcc.n	8206c <update_heartbeat+0x84>
        {
            ticks_heartbeat = getTicks();
   82004:	4b1b      	ldr	r3, [pc, #108]	; (82074 <update_heartbeat+0x8c>)
   82006:	4798      	blx	r3
   82008:	4602      	mov	r2, r0
   8200a:	4b1b      	ldr	r3, [pc, #108]	; (82078 <update_heartbeat+0x90>)
   8200c:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 0);
   8200e:	2100      	movs	r1, #0
   82010:	206a      	movs	r0, #106	; 0x6a
   82012:	4b1a      	ldr	r3, [pc, #104]	; (8207c <update_heartbeat+0x94>)
   82014:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 0);
   82016:	2100      	movs	r1, #0
   82018:	2067      	movs	r0, #103	; 0x67
   8201a:	4b18      	ldr	r3, [pc, #96]	; (8207c <update_heartbeat+0x94>)
   8201c:	4798      	blx	r3
            mts.ibit.heartbeat = 0;
   8201e:	4a18      	ldr	r2, [pc, #96]	; (82080 <update_heartbeat+0x98>)
   82020:	7813      	ldrb	r3, [r2, #0]
   82022:	f36f 0300 	bfc	r3, #0, #1
   82026:	7013      	strb	r3, [r2, #0]
            heart_state = 0;
   82028:	4b11      	ldr	r3, [pc, #68]	; (82070 <update_heartbeat+0x88>)
   8202a:	2200      	movs	r2, #0
   8202c:	701a      	strb	r2, [r3, #0]
            ioport_set_pin_level(LED_M1, 1);
            mts.ibit.heartbeat = 1;
            heart_state = 1;
        }
    }
}
   8202e:	e01d      	b.n	8206c <update_heartbeat+0x84>
        if (getTicks() >= (ticks_heartbeat + 900))
   82030:	4b10      	ldr	r3, [pc, #64]	; (82074 <update_heartbeat+0x8c>)
   82032:	4798      	blx	r3
   82034:	4602      	mov	r2, r0
   82036:	4b10      	ldr	r3, [pc, #64]	; (82078 <update_heartbeat+0x90>)
   82038:	681b      	ldr	r3, [r3, #0]
   8203a:	f503 7361 	add.w	r3, r3, #900	; 0x384
   8203e:	429a      	cmp	r2, r3
   82040:	d314      	bcc.n	8206c <update_heartbeat+0x84>
            ticks_heartbeat = getTicks();
   82042:	4b0c      	ldr	r3, [pc, #48]	; (82074 <update_heartbeat+0x8c>)
   82044:	4798      	blx	r3
   82046:	4602      	mov	r2, r0
   82048:	4b0b      	ldr	r3, [pc, #44]	; (82078 <update_heartbeat+0x90>)
   8204a:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 1);
   8204c:	2101      	movs	r1, #1
   8204e:	206a      	movs	r0, #106	; 0x6a
   82050:	4b0a      	ldr	r3, [pc, #40]	; (8207c <update_heartbeat+0x94>)
   82052:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 1);
   82054:	2101      	movs	r1, #1
   82056:	2067      	movs	r0, #103	; 0x67
   82058:	4b08      	ldr	r3, [pc, #32]	; (8207c <update_heartbeat+0x94>)
   8205a:	4798      	blx	r3
            mts.ibit.heartbeat = 1;
   8205c:	4a08      	ldr	r2, [pc, #32]	; (82080 <update_heartbeat+0x98>)
   8205e:	7813      	ldrb	r3, [r2, #0]
   82060:	f043 0301 	orr.w	r3, r3, #1
   82064:	7013      	strb	r3, [r2, #0]
            heart_state = 1;
   82066:	4b02      	ldr	r3, [pc, #8]	; (82070 <update_heartbeat+0x88>)
   82068:	2201      	movs	r2, #1
   8206a:	701a      	strb	r2, [r3, #0]
}
   8206c:	bf00      	nop
   8206e:	bd80      	pop	{r7, pc}
   82070:	20070ff0 	.word	0x20070ff0
   82074:	00081f09 	.word	0x00081f09
   82078:	20071000 	.word	0x20071000
   8207c:	00081e81 	.word	0x00081e81
   82080:	20070fe8 	.word	0x20070fe8

00082084 <osc_enable>:
{
   82084:	b580      	push	{r7, lr}
   82086:	b082      	sub	sp, #8
   82088:	af00      	add	r7, sp, #0
   8208a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8208c:	687b      	ldr	r3, [r7, #4]
   8208e:	2b07      	cmp	r3, #7
   82090:	d831      	bhi.n	820f6 <osc_enable+0x72>
   82092:	a201      	add	r2, pc, #4	; (adr r2, 82098 <osc_enable+0x14>)
   82094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82098:	000820f5 	.word	0x000820f5
   8209c:	000820b9 	.word	0x000820b9
   820a0:	000820c1 	.word	0x000820c1
   820a4:	000820c9 	.word	0x000820c9
   820a8:	000820d1 	.word	0x000820d1
   820ac:	000820d9 	.word	0x000820d9
   820b0:	000820e1 	.word	0x000820e1
   820b4:	000820eb 	.word	0x000820eb
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   820b8:	2000      	movs	r0, #0
   820ba:	4b11      	ldr	r3, [pc, #68]	; (82100 <osc_enable+0x7c>)
   820bc:	4798      	blx	r3
		break;
   820be:	e01a      	b.n	820f6 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   820c0:	2001      	movs	r0, #1
   820c2:	4b0f      	ldr	r3, [pc, #60]	; (82100 <osc_enable+0x7c>)
   820c4:	4798      	blx	r3
		break;
   820c6:	e016      	b.n	820f6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   820c8:	2000      	movs	r0, #0
   820ca:	4b0e      	ldr	r3, [pc, #56]	; (82104 <osc_enable+0x80>)
   820cc:	4798      	blx	r3
		break;
   820ce:	e012      	b.n	820f6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   820d0:	2010      	movs	r0, #16
   820d2:	4b0c      	ldr	r3, [pc, #48]	; (82104 <osc_enable+0x80>)
   820d4:	4798      	blx	r3
		break;
   820d6:	e00e      	b.n	820f6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   820d8:	2020      	movs	r0, #32
   820da:	4b0a      	ldr	r3, [pc, #40]	; (82104 <osc_enable+0x80>)
   820dc:	4798      	blx	r3
		break;
   820de:	e00a      	b.n	820f6 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   820e0:	213e      	movs	r1, #62	; 0x3e
   820e2:	2000      	movs	r0, #0
   820e4:	4b08      	ldr	r3, [pc, #32]	; (82108 <osc_enable+0x84>)
   820e6:	4798      	blx	r3
		break;
   820e8:	e005      	b.n	820f6 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   820ea:	213e      	movs	r1, #62	; 0x3e
   820ec:	2001      	movs	r0, #1
   820ee:	4b06      	ldr	r3, [pc, #24]	; (82108 <osc_enable+0x84>)
   820f0:	4798      	blx	r3
		break;
   820f2:	e000      	b.n	820f6 <osc_enable+0x72>
		break;
   820f4:	bf00      	nop
}
   820f6:	bf00      	nop
   820f8:	3708      	adds	r7, #8
   820fa:	46bd      	mov	sp, r7
   820fc:	bd80      	pop	{r7, pc}
   820fe:	bf00      	nop
   82100:	000826c1 	.word	0x000826c1
   82104:	0008272d 	.word	0x0008272d
   82108:	0008279d 	.word	0x0008279d

0008210c <osc_is_ready>:
{
   8210c:	b580      	push	{r7, lr}
   8210e:	b082      	sub	sp, #8
   82110:	af00      	add	r7, sp, #0
   82112:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82114:	687b      	ldr	r3, [r7, #4]
   82116:	2b07      	cmp	r3, #7
   82118:	d826      	bhi.n	82168 <osc_is_ready+0x5c>
   8211a:	a201      	add	r2, pc, #4	; (adr r2, 82120 <osc_is_ready+0x14>)
   8211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82120:	00082141 	.word	0x00082141
   82124:	00082145 	.word	0x00082145
   82128:	00082145 	.word	0x00082145
   8212c:	00082157 	.word	0x00082157
   82130:	00082157 	.word	0x00082157
   82134:	00082157 	.word	0x00082157
   82138:	00082157 	.word	0x00082157
   8213c:	00082157 	.word	0x00082157
		return 1;
   82140:	2301      	movs	r3, #1
   82142:	e012      	b.n	8216a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   82144:	4b0b      	ldr	r3, [pc, #44]	; (82174 <osc_is_ready+0x68>)
   82146:	4798      	blx	r3
   82148:	4603      	mov	r3, r0
   8214a:	2b00      	cmp	r3, #0
   8214c:	bf14      	ite	ne
   8214e:	2301      	movne	r3, #1
   82150:	2300      	moveq	r3, #0
   82152:	b2db      	uxtb	r3, r3
   82154:	e009      	b.n	8216a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   82156:	4b08      	ldr	r3, [pc, #32]	; (82178 <osc_is_ready+0x6c>)
   82158:	4798      	blx	r3
   8215a:	4603      	mov	r3, r0
   8215c:	2b00      	cmp	r3, #0
   8215e:	bf14      	ite	ne
   82160:	2301      	movne	r3, #1
   82162:	2300      	moveq	r3, #0
   82164:	b2db      	uxtb	r3, r3
   82166:	e000      	b.n	8216a <osc_is_ready+0x5e>
	return 0;
   82168:	2300      	movs	r3, #0
}
   8216a:	4618      	mov	r0, r3
   8216c:	3708      	adds	r7, #8
   8216e:	46bd      	mov	sp, r7
   82170:	bd80      	pop	{r7, pc}
   82172:	bf00      	nop
   82174:	000826f9 	.word	0x000826f9
   82178:	00082815 	.word	0x00082815

0008217c <osc_get_rate>:
{
   8217c:	b480      	push	{r7}
   8217e:	b083      	sub	sp, #12
   82180:	af00      	add	r7, sp, #0
   82182:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82184:	687b      	ldr	r3, [r7, #4]
   82186:	2b07      	cmp	r3, #7
   82188:	d825      	bhi.n	821d6 <osc_get_rate+0x5a>
   8218a:	a201      	add	r2, pc, #4	; (adr r2, 82190 <osc_get_rate+0x14>)
   8218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82190:	000821b1 	.word	0x000821b1
   82194:	000821b7 	.word	0x000821b7
   82198:	000821bd 	.word	0x000821bd
   8219c:	000821c3 	.word	0x000821c3
   821a0:	000821c7 	.word	0x000821c7
   821a4:	000821cb 	.word	0x000821cb
   821a8:	000821cf 	.word	0x000821cf
   821ac:	000821d3 	.word	0x000821d3
		return OSC_SLCK_32K_RC_HZ;
   821b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   821b4:	e010      	b.n	821d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   821b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   821ba:	e00d      	b.n	821d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   821bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   821c0:	e00a      	b.n	821d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   821c2:	4b08      	ldr	r3, [pc, #32]	; (821e4 <osc_get_rate+0x68>)
   821c4:	e008      	b.n	821d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   821c6:	4b08      	ldr	r3, [pc, #32]	; (821e8 <osc_get_rate+0x6c>)
   821c8:	e006      	b.n	821d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   821ca:	4b08      	ldr	r3, [pc, #32]	; (821ec <osc_get_rate+0x70>)
   821cc:	e004      	b.n	821d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   821ce:	4b07      	ldr	r3, [pc, #28]	; (821ec <osc_get_rate+0x70>)
   821d0:	e002      	b.n	821d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   821d2:	4b06      	ldr	r3, [pc, #24]	; (821ec <osc_get_rate+0x70>)
   821d4:	e000      	b.n	821d8 <osc_get_rate+0x5c>
	return 0;
   821d6:	2300      	movs	r3, #0
}
   821d8:	4618      	mov	r0, r3
   821da:	370c      	adds	r7, #12
   821dc:	46bd      	mov	sp, r7
   821de:	bc80      	pop	{r7}
   821e0:	4770      	bx	lr
   821e2:	bf00      	nop
   821e4:	003d0900 	.word	0x003d0900
   821e8:	007a1200 	.word	0x007a1200
   821ec:	00b71b00 	.word	0x00b71b00

000821f0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   821f0:	b580      	push	{r7, lr}
   821f2:	b082      	sub	sp, #8
   821f4:	af00      	add	r7, sp, #0
   821f6:	4603      	mov	r3, r0
   821f8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   821fa:	bf00      	nop
   821fc:	79fb      	ldrb	r3, [r7, #7]
   821fe:	4618      	mov	r0, r3
   82200:	4b05      	ldr	r3, [pc, #20]	; (82218 <osc_wait_ready+0x28>)
   82202:	4798      	blx	r3
   82204:	4603      	mov	r3, r0
   82206:	f083 0301 	eor.w	r3, r3, #1
   8220a:	b2db      	uxtb	r3, r3
   8220c:	2b00      	cmp	r3, #0
   8220e:	d1f5      	bne.n	821fc <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   82210:	bf00      	nop
   82212:	3708      	adds	r7, #8
   82214:	46bd      	mov	sp, r7
   82216:	bd80      	pop	{r7, pc}
   82218:	0008210d 	.word	0x0008210d

0008221c <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   8221c:	b580      	push	{r7, lr}
   8221e:	b086      	sub	sp, #24
   82220:	af00      	add	r7, sp, #0
   82222:	60f8      	str	r0, [r7, #12]
   82224:	607a      	str	r2, [r7, #4]
   82226:	603b      	str	r3, [r7, #0]
   82228:	460b      	mov	r3, r1
   8222a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8222c:	687b      	ldr	r3, [r7, #4]
   8222e:	2b00      	cmp	r3, #0
   82230:	d107      	bne.n	82242 <pll_config_init+0x26>
   82232:	683b      	ldr	r3, [r7, #0]
   82234:	2b00      	cmp	r3, #0
   82236:	d104      	bne.n	82242 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   82238:	68fb      	ldr	r3, [r7, #12]
   8223a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8223e:	601a      	str	r2, [r3, #0]
   82240:	e019      	b.n	82276 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   82242:	7afb      	ldrb	r3, [r7, #11]
   82244:	4618      	mov	r0, r3
   82246:	4b0e      	ldr	r3, [pc, #56]	; (82280 <pll_config_init+0x64>)
   82248:	4798      	blx	r3
   8224a:	4602      	mov	r2, r0
   8224c:	687b      	ldr	r3, [r7, #4]
   8224e:	fbb2 f3f3 	udiv	r3, r2, r3
   82252:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   82254:	697b      	ldr	r3, [r7, #20]
   82256:	683a      	ldr	r2, [r7, #0]
   82258:	fb02 f303 	mul.w	r3, r2, r3
   8225c:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8225e:	683b      	ldr	r3, [r7, #0]
   82260:	3b01      	subs	r3, #1
   82262:	041a      	lsls	r2, r3, #16
   82264:	4b07      	ldr	r3, [pc, #28]	; (82284 <pll_config_init+0x68>)
   82266:	4013      	ands	r3, r2
   82268:	687a      	ldr	r2, [r7, #4]
   8226a:	b2d2      	uxtb	r2, r2
   8226c:	4313      	orrs	r3, r2
   8226e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   82272:	68fb      	ldr	r3, [r7, #12]
   82274:	601a      	str	r2, [r3, #0]
	}
}
   82276:	bf00      	nop
   82278:	3718      	adds	r7, #24
   8227a:	46bd      	mov	sp, r7
   8227c:	bd80      	pop	{r7, pc}
   8227e:	bf00      	nop
   82280:	0008217d 	.word	0x0008217d
   82284:	07ff0000 	.word	0x07ff0000

00082288 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   82288:	b580      	push	{r7, lr}
   8228a:	b082      	sub	sp, #8
   8228c:	af00      	add	r7, sp, #0
   8228e:	6078      	str	r0, [r7, #4]
   82290:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82292:	683b      	ldr	r3, [r7, #0]
   82294:	2b00      	cmp	r3, #0
   82296:	d108      	bne.n	822aa <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82298:	4b09      	ldr	r3, [pc, #36]	; (822c0 <pll_enable+0x38>)
   8229a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8229c:	4a09      	ldr	r2, [pc, #36]	; (822c4 <pll_enable+0x3c>)
   8229e:	687b      	ldr	r3, [r7, #4]
   822a0:	681b      	ldr	r3, [r3, #0]
   822a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   822a6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   822a8:	e005      	b.n	822b6 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   822aa:	4a06      	ldr	r2, [pc, #24]	; (822c4 <pll_enable+0x3c>)
   822ac:	687b      	ldr	r3, [r7, #4]
   822ae:	681b      	ldr	r3, [r3, #0]
   822b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   822b4:	61d3      	str	r3, [r2, #28]
}
   822b6:	bf00      	nop
   822b8:	3708      	adds	r7, #8
   822ba:	46bd      	mov	sp, r7
   822bc:	bd80      	pop	{r7, pc}
   822be:	bf00      	nop
   822c0:	0008282d 	.word	0x0008282d
   822c4:	400e0600 	.word	0x400e0600

000822c8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   822c8:	b580      	push	{r7, lr}
   822ca:	b082      	sub	sp, #8
   822cc:	af00      	add	r7, sp, #0
   822ce:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   822d0:	687b      	ldr	r3, [r7, #4]
   822d2:	2b00      	cmp	r3, #0
   822d4:	d103      	bne.n	822de <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   822d6:	4b05      	ldr	r3, [pc, #20]	; (822ec <pll_is_locked+0x24>)
   822d8:	4798      	blx	r3
   822da:	4603      	mov	r3, r0
   822dc:	e002      	b.n	822e4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   822de:	4b04      	ldr	r3, [pc, #16]	; (822f0 <pll_is_locked+0x28>)
   822e0:	4798      	blx	r3
   822e2:	4603      	mov	r3, r0
	}
}
   822e4:	4618      	mov	r0, r3
   822e6:	3708      	adds	r7, #8
   822e8:	46bd      	mov	sp, r7
   822ea:	bd80      	pop	{r7, pc}
   822ec:	00082845 	.word	0x00082845
   822f0:	0008285d 	.word	0x0008285d

000822f4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   822f4:	b580      	push	{r7, lr}
   822f6:	b082      	sub	sp, #8
   822f8:	af00      	add	r7, sp, #0
   822fa:	4603      	mov	r3, r0
   822fc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   822fe:	79fb      	ldrb	r3, [r7, #7]
   82300:	3b03      	subs	r3, #3
   82302:	2b04      	cmp	r3, #4
   82304:	d808      	bhi.n	82318 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   82306:	79fb      	ldrb	r3, [r7, #7]
   82308:	4618      	mov	r0, r3
   8230a:	4b06      	ldr	r3, [pc, #24]	; (82324 <pll_enable_source+0x30>)
   8230c:	4798      	blx	r3
		osc_wait_ready(e_src);
   8230e:	79fb      	ldrb	r3, [r7, #7]
   82310:	4618      	mov	r0, r3
   82312:	4b05      	ldr	r3, [pc, #20]	; (82328 <pll_enable_source+0x34>)
   82314:	4798      	blx	r3
		break;
   82316:	e000      	b.n	8231a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   82318:	bf00      	nop
	}
}
   8231a:	bf00      	nop
   8231c:	3708      	adds	r7, #8
   8231e:	46bd      	mov	sp, r7
   82320:	bd80      	pop	{r7, pc}
   82322:	bf00      	nop
   82324:	00082085 	.word	0x00082085
   82328:	000821f1 	.word	0x000821f1

0008232c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   8232c:	b580      	push	{r7, lr}
   8232e:	b082      	sub	sp, #8
   82330:	af00      	add	r7, sp, #0
   82332:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82334:	bf00      	nop
   82336:	6878      	ldr	r0, [r7, #4]
   82338:	4b04      	ldr	r3, [pc, #16]	; (8234c <pll_wait_for_lock+0x20>)
   8233a:	4798      	blx	r3
   8233c:	4603      	mov	r3, r0
   8233e:	2b00      	cmp	r3, #0
   82340:	d0f9      	beq.n	82336 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   82342:	2300      	movs	r3, #0
}
   82344:	4618      	mov	r0, r3
   82346:	3708      	adds	r7, #8
   82348:	46bd      	mov	sp, r7
   8234a:	bd80      	pop	{r7, pc}
   8234c:	000822c9 	.word	0x000822c9

00082350 <sysclk_get_main_hz>:
{
   82350:	b580      	push	{r7, lr}
   82352:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   82354:	2006      	movs	r0, #6
   82356:	4b04      	ldr	r3, [pc, #16]	; (82368 <sysclk_get_main_hz+0x18>)
   82358:	4798      	blx	r3
   8235a:	4602      	mov	r2, r0
   8235c:	4613      	mov	r3, r2
   8235e:	00db      	lsls	r3, r3, #3
   82360:	1a9b      	subs	r3, r3, r2
   82362:	005b      	lsls	r3, r3, #1
}
   82364:	4618      	mov	r0, r3
   82366:	bd80      	pop	{r7, pc}
   82368:	0008217d 	.word	0x0008217d

0008236c <sysclk_get_cpu_hz>:
{
   8236c:	b580      	push	{r7, lr}
   8236e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   82370:	4b02      	ldr	r3, [pc, #8]	; (8237c <sysclk_get_cpu_hz+0x10>)
   82372:	4798      	blx	r3
   82374:	4603      	mov	r3, r0
   82376:	085b      	lsrs	r3, r3, #1
}
   82378:	4618      	mov	r0, r3
   8237a:	bd80      	pop	{r7, pc}
   8237c:	00082351 	.word	0x00082351

00082380 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82380:	b590      	push	{r4, r7, lr}
   82382:	b083      	sub	sp, #12
   82384:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82386:	4811      	ldr	r0, [pc, #68]	; (823cc <sysclk_init+0x4c>)
   82388:	4b11      	ldr	r3, [pc, #68]	; (823d0 <sysclk_init+0x50>)
   8238a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8238c:	2006      	movs	r0, #6
   8238e:	4b11      	ldr	r3, [pc, #68]	; (823d4 <sysclk_init+0x54>)
   82390:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   82392:	1d38      	adds	r0, r7, #4
   82394:	230e      	movs	r3, #14
   82396:	2201      	movs	r2, #1
   82398:	2106      	movs	r1, #6
   8239a:	4c0f      	ldr	r4, [pc, #60]	; (823d8 <sysclk_init+0x58>)
   8239c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8239e:	1d3b      	adds	r3, r7, #4
   823a0:	2100      	movs	r1, #0
   823a2:	4618      	mov	r0, r3
   823a4:	4b0d      	ldr	r3, [pc, #52]	; (823dc <sysclk_init+0x5c>)
   823a6:	4798      	blx	r3
		pll_wait_for_lock(0);
   823a8:	2000      	movs	r0, #0
   823aa:	4b0d      	ldr	r3, [pc, #52]	; (823e0 <sysclk_init+0x60>)
   823ac:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   823ae:	2010      	movs	r0, #16
   823b0:	4b0c      	ldr	r3, [pc, #48]	; (823e4 <sysclk_init+0x64>)
   823b2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   823b4:	4b0c      	ldr	r3, [pc, #48]	; (823e8 <sysclk_init+0x68>)
   823b6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   823b8:	4b0c      	ldr	r3, [pc, #48]	; (823ec <sysclk_init+0x6c>)
   823ba:	4798      	blx	r3
   823bc:	4603      	mov	r3, r0
   823be:	4618      	mov	r0, r3
   823c0:	4b03      	ldr	r3, [pc, #12]	; (823d0 <sysclk_init+0x50>)
   823c2:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   823c4:	bf00      	nop
   823c6:	370c      	adds	r7, #12
   823c8:	46bd      	mov	sp, r7
   823ca:	bd90      	pop	{r4, r7, pc}
   823cc:	0501bd00 	.word	0x0501bd00
   823d0:	200700d1 	.word	0x200700d1
   823d4:	000822f5 	.word	0x000822f5
   823d8:	0008221d 	.word	0x0008221d
   823dc:	00082289 	.word	0x00082289
   823e0:	0008232d 	.word	0x0008232d
   823e4:	00082641 	.word	0x00082641
   823e8:	00082d79 	.word	0x00082d79
   823ec:	0008236d 	.word	0x0008236d

000823f0 <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   823f0:	b580      	push	{r7, lr}
   823f2:	b082      	sub	sp, #8
   823f4:	af00      	add	r7, sp, #0
   823f6:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   823f8:	6878      	ldr	r0, [r7, #4]
   823fa:	4b03      	ldr	r3, [pc, #12]	; (82408 <dmac_init+0x18>)
   823fc:	4798      	blx	r3
}
   823fe:	bf00      	nop
   82400:	3708      	adds	r7, #8
   82402:	46bd      	mov	sp, r7
   82404:	bd80      	pop	{r7, pc}
   82406:	bf00      	nop
   82408:	0008244b 	.word	0x0008244b

0008240c <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   8240c:	b480      	push	{r7}
   8240e:	b083      	sub	sp, #12
   82410:	af00      	add	r7, sp, #0
   82412:	6078      	str	r0, [r7, #4]
   82414:	460b      	mov	r3, r1
   82416:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   82418:	687b      	ldr	r3, [r7, #4]
   8241a:	681b      	ldr	r3, [r3, #0]
   8241c:	f023 0210 	bic.w	r2, r3, #16
   82420:	78fb      	ldrb	r3, [r7, #3]
   82422:	431a      	orrs	r2, r3
   82424:	687b      	ldr	r3, [r7, #4]
   82426:	601a      	str	r2, [r3, #0]
}
   82428:	bf00      	nop
   8242a:	370c      	adds	r7, #12
   8242c:	46bd      	mov	sp, r7
   8242e:	bc80      	pop	{r7}
   82430:	4770      	bx	lr

00082432 <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   82432:	b480      	push	{r7}
   82434:	b083      	sub	sp, #12
   82436:	af00      	add	r7, sp, #0
   82438:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   8243a:	687b      	ldr	r3, [r7, #4]
   8243c:	2201      	movs	r2, #1
   8243e:	605a      	str	r2, [r3, #4]
}
   82440:	bf00      	nop
   82442:	370c      	adds	r7, #12
   82444:	46bd      	mov	sp, r7
   82446:	bc80      	pop	{r7}
   82448:	4770      	bx	lr

0008244a <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   8244a:	b480      	push	{r7}
   8244c:	b083      	sub	sp, #12
   8244e:	af00      	add	r7, sp, #0
   82450:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   82452:	687b      	ldr	r3, [r7, #4]
   82454:	685b      	ldr	r3, [r3, #4]
   82456:	f023 0201 	bic.w	r2, r3, #1
   8245a:	687b      	ldr	r3, [r7, #4]
   8245c:	605a      	str	r2, [r3, #4]
}
   8245e:	bf00      	nop
   82460:	370c      	adds	r7, #12
   82462:	46bd      	mov	sp, r7
   82464:	bc80      	pop	{r7}
   82466:	4770      	bx	lr

00082468 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   82468:	b480      	push	{r7}
   8246a:	b083      	sub	sp, #12
   8246c:	af00      	add	r7, sp, #0
   8246e:	6078      	str	r0, [r7, #4]
   82470:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   82472:	687b      	ldr	r3, [r7, #4]
   82474:	683a      	ldr	r2, [r7, #0]
   82476:	619a      	str	r2, [r3, #24]
}
   82478:	bf00      	nop
   8247a:	370c      	adds	r7, #12
   8247c:	46bd      	mov	sp, r7
   8247e:	bc80      	pop	{r7}
   82480:	4770      	bx	lr

00082482 <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   82482:	b480      	push	{r7}
   82484:	b083      	sub	sp, #12
   82486:	af00      	add	r7, sp, #0
   82488:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   8248a:	687b      	ldr	r3, [r7, #4]
   8248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   8248e:	4618      	mov	r0, r3
   82490:	370c      	adds	r7, #12
   82492:	46bd      	mov	sp, r7
   82494:	bc80      	pop	{r7}
   82496:	4770      	bx	lr

00082498 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   82498:	b480      	push	{r7}
   8249a:	b083      	sub	sp, #12
   8249c:	af00      	add	r7, sp, #0
   8249e:	6078      	str	r0, [r7, #4]
   824a0:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   824a2:	2201      	movs	r2, #1
   824a4:	683b      	ldr	r3, [r7, #0]
   824a6:	409a      	lsls	r2, r3
   824a8:	687b      	ldr	r3, [r7, #4]
   824aa:	629a      	str	r2, [r3, #40]	; 0x28
}
   824ac:	bf00      	nop
   824ae:	370c      	adds	r7, #12
   824b0:	46bd      	mov	sp, r7
   824b2:	bc80      	pop	{r7}
   824b4:	4770      	bx	lr

000824b6 <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   824b6:	b480      	push	{r7}
   824b8:	b083      	sub	sp, #12
   824ba:	af00      	add	r7, sp, #0
   824bc:	6078      	str	r0, [r7, #4]
   824be:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   824c0:	2201      	movs	r2, #1
   824c2:	683b      	ldr	r3, [r7, #0]
   824c4:	409a      	lsls	r2, r3
   824c6:	687b      	ldr	r3, [r7, #4]
   824c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
   824ca:	bf00      	nop
   824cc:	370c      	adds	r7, #12
   824ce:	46bd      	mov	sp, r7
   824d0:	bc80      	pop	{r7}
   824d2:	4770      	bx	lr

000824d4 <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   824d4:	b480      	push	{r7}
   824d6:	b085      	sub	sp, #20
   824d8:	af00      	add	r7, sp, #0
   824da:	60f8      	str	r0, [r7, #12]
   824dc:	60b9      	str	r1, [r7, #8]
   824de:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   824e0:	68f9      	ldr	r1, [r7, #12]
   824e2:	68ba      	ldr	r2, [r7, #8]
   824e4:	4613      	mov	r3, r2
   824e6:	009b      	lsls	r3, r3, #2
   824e8:	4413      	add	r3, r2
   824ea:	00db      	lsls	r3, r3, #3
   824ec:	440b      	add	r3, r1
   824ee:	333c      	adds	r3, #60	; 0x3c
   824f0:	687a      	ldr	r2, [r7, #4]
   824f2:	601a      	str	r2, [r3, #0]
}
   824f4:	bf00      	nop
   824f6:	3714      	adds	r7, #20
   824f8:	46bd      	mov	sp, r7
   824fa:	bc80      	pop	{r7}
   824fc:	4770      	bx	lr

000824fe <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   824fe:	b480      	push	{r7}
   82500:	b085      	sub	sp, #20
   82502:	af00      	add	r7, sp, #0
   82504:	60f8      	str	r0, [r7, #12]
   82506:	60b9      	str	r1, [r7, #8]
   82508:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   8250a:	68f9      	ldr	r1, [r7, #12]
   8250c:	68ba      	ldr	r2, [r7, #8]
   8250e:	4613      	mov	r3, r2
   82510:	009b      	lsls	r3, r3, #2
   82512:	4413      	add	r3, r2
   82514:	00db      	lsls	r3, r3, #3
   82516:	440b      	add	r3, r1
   82518:	3340      	adds	r3, #64	; 0x40
   8251a:	687a      	ldr	r2, [r7, #4]
   8251c:	601a      	str	r2, [r3, #0]
}
   8251e:	bf00      	nop
   82520:	3714      	adds	r7, #20
   82522:	46bd      	mov	sp, r7
   82524:	bc80      	pop	{r7}
   82526:	4770      	bx	lr

00082528 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   82528:	b480      	push	{r7}
   8252a:	b085      	sub	sp, #20
   8252c:	af00      	add	r7, sp, #0
   8252e:	60f8      	str	r0, [r7, #12]
   82530:	60b9      	str	r1, [r7, #8]
   82532:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   82534:	68f9      	ldr	r1, [r7, #12]
   82536:	68ba      	ldr	r2, [r7, #8]
   82538:	4613      	mov	r3, r2
   8253a:	009b      	lsls	r3, r3, #2
   8253c:	4413      	add	r3, r2
   8253e:	00db      	lsls	r3, r3, #3
   82540:	440b      	add	r3, r1
   82542:	3344      	adds	r3, #68	; 0x44
   82544:	687a      	ldr	r2, [r7, #4]
   82546:	601a      	str	r2, [r3, #0]
}
   82548:	bf00      	nop
   8254a:	3714      	adds	r7, #20
   8254c:	46bd      	mov	sp, r7
   8254e:	bc80      	pop	{r7}
   82550:	4770      	bx	lr

00082552 <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   82552:	b480      	push	{r7}
   82554:	b085      	sub	sp, #20
   82556:	af00      	add	r7, sp, #0
   82558:	60f8      	str	r0, [r7, #12]
   8255a:	60b9      	str	r1, [r7, #8]
   8255c:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   8255e:	68f9      	ldr	r1, [r7, #12]
   82560:	68ba      	ldr	r2, [r7, #8]
   82562:	4613      	mov	r3, r2
   82564:	009b      	lsls	r3, r3, #2
   82566:	4413      	add	r3, r2
   82568:	00db      	lsls	r3, r3, #3
   8256a:	440b      	add	r3, r1
   8256c:	3348      	adds	r3, #72	; 0x48
   8256e:	687a      	ldr	r2, [r7, #4]
   82570:	601a      	str	r2, [r3, #0]
}
   82572:	bf00      	nop
   82574:	3714      	adds	r7, #20
   82576:	46bd      	mov	sp, r7
   82578:	bc80      	pop	{r7}
   8257a:	4770      	bx	lr

0008257c <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   8257c:	b480      	push	{r7}
   8257e:	b085      	sub	sp, #20
   82580:	af00      	add	r7, sp, #0
   82582:	60f8      	str	r0, [r7, #12]
   82584:	60b9      	str	r1, [r7, #8]
   82586:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   82588:	68f9      	ldr	r1, [r7, #12]
   8258a:	68ba      	ldr	r2, [r7, #8]
   8258c:	4613      	mov	r3, r2
   8258e:	009b      	lsls	r3, r3, #2
   82590:	4413      	add	r3, r2
   82592:	00db      	lsls	r3, r3, #3
   82594:	440b      	add	r3, r1
   82596:	334c      	adds	r3, #76	; 0x4c
   82598:	687a      	ldr	r2, [r7, #4]
   8259a:	601a      	str	r2, [r3, #0]
}
   8259c:	bf00      	nop
   8259e:	3714      	adds	r7, #20
   825a0:	46bd      	mov	sp, r7
   825a2:	bc80      	pop	{r7}
   825a4:	4770      	bx	lr

000825a6 <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   825a6:	b480      	push	{r7}
   825a8:	b085      	sub	sp, #20
   825aa:	af00      	add	r7, sp, #0
   825ac:	60f8      	str	r0, [r7, #12]
   825ae:	60b9      	str	r1, [r7, #8]
   825b0:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   825b2:	68f9      	ldr	r1, [r7, #12]
   825b4:	68ba      	ldr	r2, [r7, #8]
   825b6:	4613      	mov	r3, r2
   825b8:	009b      	lsls	r3, r3, #2
   825ba:	4413      	add	r3, r2
   825bc:	00db      	lsls	r3, r3, #3
   825be:	440b      	add	r3, r1
   825c0:	3350      	adds	r3, #80	; 0x50
   825c2:	687a      	ldr	r2, [r7, #4]
   825c4:	601a      	str	r2, [r3, #0]
}
   825c6:	bf00      	nop
   825c8:	3714      	adds	r7, #20
   825ca:	46bd      	mov	sp, r7
   825cc:	bc80      	pop	{r7}
   825ce:	4770      	bx	lr

000825d0 <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   825d0:	b580      	push	{r7, lr}
   825d2:	b084      	sub	sp, #16
   825d4:	af00      	add	r7, sp, #0
   825d6:	60f8      	str	r0, [r7, #12]
   825d8:	60b9      	str	r1, [r7, #8]
   825da:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   825dc:	68fb      	ldr	r3, [r7, #12]
   825de:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   825e0:	687b      	ldr	r3, [r7, #4]
   825e2:	681b      	ldr	r3, [r3, #0]
   825e4:	461a      	mov	r2, r3
   825e6:	68b9      	ldr	r1, [r7, #8]
   825e8:	68f8      	ldr	r0, [r7, #12]
   825ea:	4b10      	ldr	r3, [pc, #64]	; (8262c <dmac_channel_single_buf_transfer_init+0x5c>)
   825ec:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   825ee:	687b      	ldr	r3, [r7, #4]
   825f0:	685b      	ldr	r3, [r3, #4]
   825f2:	461a      	mov	r2, r3
   825f4:	68b9      	ldr	r1, [r7, #8]
   825f6:	68f8      	ldr	r0, [r7, #12]
   825f8:	4b0d      	ldr	r3, [pc, #52]	; (82630 <dmac_channel_single_buf_transfer_init+0x60>)
   825fa:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   825fc:	2200      	movs	r2, #0
   825fe:	68b9      	ldr	r1, [r7, #8]
   82600:	68f8      	ldr	r0, [r7, #12]
   82602:	4b0c      	ldr	r3, [pc, #48]	; (82634 <dmac_channel_single_buf_transfer_init+0x64>)
   82604:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   82606:	687b      	ldr	r3, [r7, #4]
   82608:	689b      	ldr	r3, [r3, #8]
   8260a:	461a      	mov	r2, r3
   8260c:	68b9      	ldr	r1, [r7, #8]
   8260e:	68f8      	ldr	r0, [r7, #12]
   82610:	4b09      	ldr	r3, [pc, #36]	; (82638 <dmac_channel_single_buf_transfer_init+0x68>)
   82612:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   82614:	687b      	ldr	r3, [r7, #4]
   82616:	68db      	ldr	r3, [r3, #12]
   82618:	461a      	mov	r2, r3
   8261a:	68b9      	ldr	r1, [r7, #8]
   8261c:	68f8      	ldr	r0, [r7, #12]
   8261e:	4b07      	ldr	r3, [pc, #28]	; (8263c <dmac_channel_single_buf_transfer_init+0x6c>)
   82620:	4798      	blx	r3
}
   82622:	bf00      	nop
   82624:	3710      	adds	r7, #16
   82626:	46bd      	mov	sp, r7
   82628:	bd80      	pop	{r7, pc}
   8262a:	bf00      	nop
   8262c:	000824d5 	.word	0x000824d5
   82630:	000824ff 	.word	0x000824ff
   82634:	00082529 	.word	0x00082529
   82638:	00082553 	.word	0x00082553
   8263c:	0008257d 	.word	0x0008257d

00082640 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82640:	b480      	push	{r7}
   82642:	b085      	sub	sp, #20
   82644:	af00      	add	r7, sp, #0
   82646:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82648:	491c      	ldr	r1, [pc, #112]	; (826bc <pmc_switch_mck_to_pllack+0x7c>)
   8264a:	4b1c      	ldr	r3, [pc, #112]	; (826bc <pmc_switch_mck_to_pllack+0x7c>)
   8264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8264e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82652:	687b      	ldr	r3, [r7, #4]
   82654:	4313      	orrs	r3, r2
   82656:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82658:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8265c:	60fb      	str	r3, [r7, #12]
   8265e:	e007      	b.n	82670 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82660:	68fb      	ldr	r3, [r7, #12]
   82662:	2b00      	cmp	r3, #0
   82664:	d101      	bne.n	8266a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   82666:	2301      	movs	r3, #1
   82668:	e023      	b.n	826b2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8266a:	68fb      	ldr	r3, [r7, #12]
   8266c:	3b01      	subs	r3, #1
   8266e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82670:	4b12      	ldr	r3, [pc, #72]	; (826bc <pmc_switch_mck_to_pllack+0x7c>)
   82672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82674:	f003 0308 	and.w	r3, r3, #8
   82678:	2b00      	cmp	r3, #0
   8267a:	d0f1      	beq.n	82660 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8267c:	4a0f      	ldr	r2, [pc, #60]	; (826bc <pmc_switch_mck_to_pllack+0x7c>)
   8267e:	4b0f      	ldr	r3, [pc, #60]	; (826bc <pmc_switch_mck_to_pllack+0x7c>)
   82680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82682:	f023 0303 	bic.w	r3, r3, #3
   82686:	f043 0302 	orr.w	r3, r3, #2
   8268a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8268c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82690:	60fb      	str	r3, [r7, #12]
   82692:	e007      	b.n	826a4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82694:	68fb      	ldr	r3, [r7, #12]
   82696:	2b00      	cmp	r3, #0
   82698:	d101      	bne.n	8269e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   8269a:	2301      	movs	r3, #1
   8269c:	e009      	b.n	826b2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8269e:	68fb      	ldr	r3, [r7, #12]
   826a0:	3b01      	subs	r3, #1
   826a2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826a4:	4b05      	ldr	r3, [pc, #20]	; (826bc <pmc_switch_mck_to_pllack+0x7c>)
   826a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   826a8:	f003 0308 	and.w	r3, r3, #8
   826ac:	2b00      	cmp	r3, #0
   826ae:	d0f1      	beq.n	82694 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   826b0:	2300      	movs	r3, #0
}
   826b2:	4618      	mov	r0, r3
   826b4:	3714      	adds	r7, #20
   826b6:	46bd      	mov	sp, r7
   826b8:	bc80      	pop	{r7}
   826ba:	4770      	bx	lr
   826bc:	400e0600 	.word	0x400e0600

000826c0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   826c0:	b480      	push	{r7}
   826c2:	b083      	sub	sp, #12
   826c4:	af00      	add	r7, sp, #0
   826c6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   826c8:	687b      	ldr	r3, [r7, #4]
   826ca:	2b01      	cmp	r3, #1
   826cc:	d107      	bne.n	826de <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   826ce:	4a08      	ldr	r2, [pc, #32]	; (826f0 <pmc_switch_sclk_to_32kxtal+0x30>)
   826d0:	4b07      	ldr	r3, [pc, #28]	; (826f0 <pmc_switch_sclk_to_32kxtal+0x30>)
   826d2:	689b      	ldr	r3, [r3, #8]
   826d4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   826d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   826dc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   826de:	4b04      	ldr	r3, [pc, #16]	; (826f0 <pmc_switch_sclk_to_32kxtal+0x30>)
   826e0:	4a04      	ldr	r2, [pc, #16]	; (826f4 <pmc_switch_sclk_to_32kxtal+0x34>)
   826e2:	601a      	str	r2, [r3, #0]
}
   826e4:	bf00      	nop
   826e6:	370c      	adds	r7, #12
   826e8:	46bd      	mov	sp, r7
   826ea:	bc80      	pop	{r7}
   826ec:	4770      	bx	lr
   826ee:	bf00      	nop
   826f0:	400e1a10 	.word	0x400e1a10
   826f4:	a5000008 	.word	0xa5000008

000826f8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   826f8:	b480      	push	{r7}
   826fa:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   826fc:	4b09      	ldr	r3, [pc, #36]	; (82724 <pmc_osc_is_ready_32kxtal+0x2c>)
   826fe:	695b      	ldr	r3, [r3, #20]
   82700:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   82704:	2b00      	cmp	r3, #0
   82706:	d007      	beq.n	82718 <pmc_osc_is_ready_32kxtal+0x20>
   82708:	4b07      	ldr	r3, [pc, #28]	; (82728 <pmc_osc_is_ready_32kxtal+0x30>)
   8270a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82710:	2b00      	cmp	r3, #0
   82712:	d001      	beq.n	82718 <pmc_osc_is_ready_32kxtal+0x20>
   82714:	2301      	movs	r3, #1
   82716:	e000      	b.n	8271a <pmc_osc_is_ready_32kxtal+0x22>
   82718:	2300      	movs	r3, #0
}
   8271a:	4618      	mov	r0, r3
   8271c:	46bd      	mov	sp, r7
   8271e:	bc80      	pop	{r7}
   82720:	4770      	bx	lr
   82722:	bf00      	nop
   82724:	400e1a10 	.word	0x400e1a10
   82728:	400e0600 	.word	0x400e0600

0008272c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   8272c:	b480      	push	{r7}
   8272e:	b083      	sub	sp, #12
   82730:	af00      	add	r7, sp, #0
   82732:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   82734:	4a18      	ldr	r2, [pc, #96]	; (82798 <pmc_switch_mainck_to_fastrc+0x6c>)
   82736:	4b18      	ldr	r3, [pc, #96]	; (82798 <pmc_switch_mainck_to_fastrc+0x6c>)
   82738:	6a1b      	ldr	r3, [r3, #32]
   8273a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8273e:	f043 0308 	orr.w	r3, r3, #8
   82742:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82744:	bf00      	nop
   82746:	4b14      	ldr	r3, [pc, #80]	; (82798 <pmc_switch_mainck_to_fastrc+0x6c>)
   82748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8274e:	2b00      	cmp	r3, #0
   82750:	d0f9      	beq.n	82746 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82752:	4911      	ldr	r1, [pc, #68]	; (82798 <pmc_switch_mainck_to_fastrc+0x6c>)
   82754:	4b10      	ldr	r3, [pc, #64]	; (82798 <pmc_switch_mainck_to_fastrc+0x6c>)
   82756:	6a1b      	ldr	r3, [r3, #32]
   82758:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   82760:	687a      	ldr	r2, [r7, #4]
   82762:	4313      	orrs	r3, r2
   82764:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82768:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8276a:	bf00      	nop
   8276c:	4b0a      	ldr	r3, [pc, #40]	; (82798 <pmc_switch_mainck_to_fastrc+0x6c>)
   8276e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82774:	2b00      	cmp	r3, #0
   82776:	d0f9      	beq.n	8276c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   82778:	4a07      	ldr	r2, [pc, #28]	; (82798 <pmc_switch_mainck_to_fastrc+0x6c>)
   8277a:	4b07      	ldr	r3, [pc, #28]	; (82798 <pmc_switch_mainck_to_fastrc+0x6c>)
   8277c:	6a1b      	ldr	r3, [r3, #32]
   8277e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   82782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82786:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8278a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   8278c:	bf00      	nop
   8278e:	370c      	adds	r7, #12
   82790:	46bd      	mov	sp, r7
   82792:	bc80      	pop	{r7}
   82794:	4770      	bx	lr
   82796:	bf00      	nop
   82798:	400e0600 	.word	0x400e0600

0008279c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   8279c:	b480      	push	{r7}
   8279e:	b083      	sub	sp, #12
   827a0:	af00      	add	r7, sp, #0
   827a2:	6078      	str	r0, [r7, #4]
   827a4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   827a6:	687b      	ldr	r3, [r7, #4]
   827a8:	2b00      	cmp	r3, #0
   827aa:	d008      	beq.n	827be <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   827ac:	4916      	ldr	r1, [pc, #88]	; (82808 <pmc_switch_mainck_to_xtal+0x6c>)
   827ae:	4b16      	ldr	r3, [pc, #88]	; (82808 <pmc_switch_mainck_to_xtal+0x6c>)
   827b0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   827b2:	4a16      	ldr	r2, [pc, #88]	; (8280c <pmc_switch_mainck_to_xtal+0x70>)
   827b4:	401a      	ands	r2, r3
   827b6:	4b16      	ldr	r3, [pc, #88]	; (82810 <pmc_switch_mainck_to_xtal+0x74>)
   827b8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   827ba:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   827bc:	e01e      	b.n	827fc <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   827be:	4912      	ldr	r1, [pc, #72]	; (82808 <pmc_switch_mainck_to_xtal+0x6c>)
   827c0:	4b11      	ldr	r3, [pc, #68]	; (82808 <pmc_switch_mainck_to_xtal+0x6c>)
   827c2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   827c4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   827c8:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   827cc:	683a      	ldr	r2, [r7, #0]
   827ce:	0212      	lsls	r2, r2, #8
   827d0:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   827d2:	4313      	orrs	r3, r2
   827d4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   827d8:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   827dc:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   827de:	bf00      	nop
   827e0:	4b09      	ldr	r3, [pc, #36]	; (82808 <pmc_switch_mainck_to_xtal+0x6c>)
   827e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   827e4:	f003 0301 	and.w	r3, r3, #1
   827e8:	2b00      	cmp	r3, #0
   827ea:	d0f9      	beq.n	827e0 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   827ec:	4a06      	ldr	r2, [pc, #24]	; (82808 <pmc_switch_mainck_to_xtal+0x6c>)
   827ee:	4b06      	ldr	r3, [pc, #24]	; (82808 <pmc_switch_mainck_to_xtal+0x6c>)
   827f0:	6a1b      	ldr	r3, [r3, #32]
   827f2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   827f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   827fa:	6213      	str	r3, [r2, #32]
}
   827fc:	bf00      	nop
   827fe:	370c      	adds	r7, #12
   82800:	46bd      	mov	sp, r7
   82802:	bc80      	pop	{r7}
   82804:	4770      	bx	lr
   82806:	bf00      	nop
   82808:	400e0600 	.word	0x400e0600
   8280c:	fec8fffc 	.word	0xfec8fffc
   82810:	01370002 	.word	0x01370002

00082814 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82814:	b480      	push	{r7}
   82816:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82818:	4b03      	ldr	r3, [pc, #12]	; (82828 <pmc_osc_is_ready_mainck+0x14>)
   8281a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8281c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82820:	4618      	mov	r0, r3
   82822:	46bd      	mov	sp, r7
   82824:	bc80      	pop	{r7}
   82826:	4770      	bx	lr
   82828:	400e0600 	.word	0x400e0600

0008282c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   8282c:	b480      	push	{r7}
   8282e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82830:	4b03      	ldr	r3, [pc, #12]	; (82840 <pmc_disable_pllack+0x14>)
   82832:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82836:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   82838:	bf00      	nop
   8283a:	46bd      	mov	sp, r7
   8283c:	bc80      	pop	{r7}
   8283e:	4770      	bx	lr
   82840:	400e0600 	.word	0x400e0600

00082844 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82844:	b480      	push	{r7}
   82846:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82848:	4b03      	ldr	r3, [pc, #12]	; (82858 <pmc_is_locked_pllack+0x14>)
   8284a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8284c:	f003 0302 	and.w	r3, r3, #2
}
   82850:	4618      	mov	r0, r3
   82852:	46bd      	mov	sp, r7
   82854:	bc80      	pop	{r7}
   82856:	4770      	bx	lr
   82858:	400e0600 	.word	0x400e0600

0008285c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   8285c:	b480      	push	{r7}
   8285e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82860:	4b03      	ldr	r3, [pc, #12]	; (82870 <pmc_is_locked_upll+0x14>)
   82862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82864:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82868:	4618      	mov	r0, r3
   8286a:	46bd      	mov	sp, r7
   8286c:	bc80      	pop	{r7}
   8286e:	4770      	bx	lr
   82870:	400e0600 	.word	0x400e0600

00082874 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82874:	b480      	push	{r7}
   82876:	b083      	sub	sp, #12
   82878:	af00      	add	r7, sp, #0
   8287a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   8287c:	687b      	ldr	r3, [r7, #4]
   8287e:	2b2c      	cmp	r3, #44	; 0x2c
   82880:	d901      	bls.n	82886 <pmc_enable_periph_clk+0x12>
		return 1;
   82882:	2301      	movs	r3, #1
   82884:	e02f      	b.n	828e6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   82886:	687b      	ldr	r3, [r7, #4]
   82888:	2b1f      	cmp	r3, #31
   8288a:	d813      	bhi.n	828b4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8288c:	4b18      	ldr	r3, [pc, #96]	; (828f0 <pmc_enable_periph_clk+0x7c>)
   8288e:	699a      	ldr	r2, [r3, #24]
   82890:	2101      	movs	r1, #1
   82892:	687b      	ldr	r3, [r7, #4]
   82894:	fa01 f303 	lsl.w	r3, r1, r3
   82898:	401a      	ands	r2, r3
   8289a:	2101      	movs	r1, #1
   8289c:	687b      	ldr	r3, [r7, #4]
   8289e:	fa01 f303 	lsl.w	r3, r1, r3
   828a2:	429a      	cmp	r2, r3
   828a4:	d01e      	beq.n	828e4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   828a6:	4a12      	ldr	r2, [pc, #72]	; (828f0 <pmc_enable_periph_clk+0x7c>)
   828a8:	2101      	movs	r1, #1
   828aa:	687b      	ldr	r3, [r7, #4]
   828ac:	fa01 f303 	lsl.w	r3, r1, r3
   828b0:	6113      	str	r3, [r2, #16]
   828b2:	e017      	b.n	828e4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   828b4:	687b      	ldr	r3, [r7, #4]
   828b6:	3b20      	subs	r3, #32
   828b8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   828ba:	4b0d      	ldr	r3, [pc, #52]	; (828f0 <pmc_enable_periph_clk+0x7c>)
   828bc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   828c0:	2101      	movs	r1, #1
   828c2:	687b      	ldr	r3, [r7, #4]
   828c4:	fa01 f303 	lsl.w	r3, r1, r3
   828c8:	401a      	ands	r2, r3
   828ca:	2101      	movs	r1, #1
   828cc:	687b      	ldr	r3, [r7, #4]
   828ce:	fa01 f303 	lsl.w	r3, r1, r3
   828d2:	429a      	cmp	r2, r3
   828d4:	d006      	beq.n	828e4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   828d6:	4a06      	ldr	r2, [pc, #24]	; (828f0 <pmc_enable_periph_clk+0x7c>)
   828d8:	2101      	movs	r1, #1
   828da:	687b      	ldr	r3, [r7, #4]
   828dc:	fa01 f303 	lsl.w	r3, r1, r3
   828e0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   828e4:	2300      	movs	r3, #0
}
   828e6:	4618      	mov	r0, r3
   828e8:	370c      	adds	r7, #12
   828ea:	46bd      	mov	sp, r7
   828ec:	bc80      	pop	{r7}
   828ee:	4770      	bx	lr
   828f0:	400e0600 	.word	0x400e0600

000828f4 <sysclk_enable_peripheral_clock>:
{
   828f4:	b580      	push	{r7, lr}
   828f6:	b082      	sub	sp, #8
   828f8:	af00      	add	r7, sp, #0
   828fa:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   828fc:	6878      	ldr	r0, [r7, #4]
   828fe:	4b03      	ldr	r3, [pc, #12]	; (8290c <sysclk_enable_peripheral_clock+0x18>)
   82900:	4798      	blx	r3
}
   82902:	bf00      	nop
   82904:	3708      	adds	r7, #8
   82906:	46bd      	mov	sp, r7
   82908:	bd80      	pop	{r7, pc}
   8290a:	bf00      	nop
   8290c:	00082875 	.word	0x00082875

00082910 <ioport_init>:
{
   82910:	b580      	push	{r7, lr}
   82912:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   82914:	200b      	movs	r0, #11
   82916:	4b06      	ldr	r3, [pc, #24]	; (82930 <ioport_init+0x20>)
   82918:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   8291a:	200c      	movs	r0, #12
   8291c:	4b04      	ldr	r3, [pc, #16]	; (82930 <ioport_init+0x20>)
   8291e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   82920:	200d      	movs	r0, #13
   82922:	4b03      	ldr	r3, [pc, #12]	; (82930 <ioport_init+0x20>)
   82924:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   82926:	200e      	movs	r0, #14
   82928:	4b01      	ldr	r3, [pc, #4]	; (82930 <ioport_init+0x20>)
   8292a:	4798      	blx	r3
}
   8292c:	bf00      	nop
   8292e:	bd80      	pop	{r7, pc}
   82930:	000828f5 	.word	0x000828f5

00082934 <ioport_disable_pin>:
{
   82934:	b480      	push	{r7}
   82936:	b089      	sub	sp, #36	; 0x24
   82938:	af00      	add	r7, sp, #0
   8293a:	6078      	str	r0, [r7, #4]
   8293c:	687b      	ldr	r3, [r7, #4]
   8293e:	61fb      	str	r3, [r7, #28]
   82940:	69fb      	ldr	r3, [r7, #28]
   82942:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82944:	69bb      	ldr	r3, [r7, #24]
   82946:	095a      	lsrs	r2, r3, #5
   82948:	69fb      	ldr	r3, [r7, #28]
   8294a:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   8294c:	697b      	ldr	r3, [r7, #20]
   8294e:	f003 031f 	and.w	r3, r3, #31
   82952:	2101      	movs	r1, #1
   82954:	fa01 f303 	lsl.w	r3, r1, r3
   82958:	613a      	str	r2, [r7, #16]
   8295a:	60fb      	str	r3, [r7, #12]
   8295c:	693b      	ldr	r3, [r7, #16]
   8295e:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82960:	68bb      	ldr	r3, [r7, #8]
   82962:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82966:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8296a:	025b      	lsls	r3, r3, #9
   8296c:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   8296e:	68fb      	ldr	r3, [r7, #12]
   82970:	6053      	str	r3, [r2, #4]
}
   82972:	bf00      	nop
   82974:	3724      	adds	r7, #36	; 0x24
   82976:	46bd      	mov	sp, r7
   82978:	bc80      	pop	{r7}
   8297a:	4770      	bx	lr

0008297c <ioport_set_pin_mode>:
{
   8297c:	b480      	push	{r7}
   8297e:	b08d      	sub	sp, #52	; 0x34
   82980:	af00      	add	r7, sp, #0
   82982:	6078      	str	r0, [r7, #4]
   82984:	6039      	str	r1, [r7, #0]
   82986:	687b      	ldr	r3, [r7, #4]
   82988:	62fb      	str	r3, [r7, #44]	; 0x2c
   8298a:	683b      	ldr	r3, [r7, #0]
   8298c:	62bb      	str	r3, [r7, #40]	; 0x28
   8298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82990:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   82992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82994:	095a      	lsrs	r2, r3, #5
   82996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82998:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   8299a:	6a3b      	ldr	r3, [r7, #32]
   8299c:	f003 031f 	and.w	r3, r3, #31
   829a0:	2101      	movs	r1, #1
   829a2:	fa01 f303 	lsl.w	r3, r1, r3
   829a6:	61fa      	str	r2, [r7, #28]
   829a8:	61bb      	str	r3, [r7, #24]
   829aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   829ac:	617b      	str	r3, [r7, #20]
   829ae:	69fb      	ldr	r3, [r7, #28]
   829b0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   829b2:	693b      	ldr	r3, [r7, #16]
   829b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   829b8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   829bc:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   829be:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   829c0:	697b      	ldr	r3, [r7, #20]
   829c2:	f003 0308 	and.w	r3, r3, #8
   829c6:	2b00      	cmp	r3, #0
   829c8:	d003      	beq.n	829d2 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   829ca:	68fb      	ldr	r3, [r7, #12]
   829cc:	69ba      	ldr	r2, [r7, #24]
   829ce:	665a      	str	r2, [r3, #100]	; 0x64
   829d0:	e002      	b.n	829d8 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   829d2:	68fb      	ldr	r3, [r7, #12]
   829d4:	69ba      	ldr	r2, [r7, #24]
   829d6:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   829d8:	697b      	ldr	r3, [r7, #20]
   829da:	f003 0320 	and.w	r3, r3, #32
   829de:	2b00      	cmp	r3, #0
   829e0:	d003      	beq.n	829ea <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   829e2:	68fb      	ldr	r3, [r7, #12]
   829e4:	69ba      	ldr	r2, [r7, #24]
   829e6:	651a      	str	r2, [r3, #80]	; 0x50
   829e8:	e002      	b.n	829f0 <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   829ea:	68fb      	ldr	r3, [r7, #12]
   829ec:	69ba      	ldr	r2, [r7, #24]
   829ee:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   829f0:	697b      	ldr	r3, [r7, #20]
   829f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   829f6:	2b00      	cmp	r3, #0
   829f8:	d003      	beq.n	82a02 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   829fa:	68fb      	ldr	r3, [r7, #12]
   829fc:	69ba      	ldr	r2, [r7, #24]
   829fe:	621a      	str	r2, [r3, #32]
   82a00:	e002      	b.n	82a08 <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   82a02:	68fb      	ldr	r3, [r7, #12]
   82a04:	69ba      	ldr	r2, [r7, #24]
   82a06:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   82a08:	697b      	ldr	r3, [r7, #20]
   82a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82a0e:	2b00      	cmp	r3, #0
   82a10:	d004      	beq.n	82a1c <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   82a12:	68fb      	ldr	r3, [r7, #12]
   82a14:	69ba      	ldr	r2, [r7, #24]
   82a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   82a1a:	e003      	b.n	82a24 <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   82a1c:	68fb      	ldr	r3, [r7, #12]
   82a1e:	69ba      	ldr	r2, [r7, #24]
   82a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   82a24:	697b      	ldr	r3, [r7, #20]
   82a26:	f003 0301 	and.w	r3, r3, #1
   82a2a:	2b00      	cmp	r3, #0
   82a2c:	d006      	beq.n	82a3c <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   82a2e:	68fb      	ldr	r3, [r7, #12]
   82a30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82a32:	69bb      	ldr	r3, [r7, #24]
   82a34:	431a      	orrs	r2, r3
   82a36:	68fb      	ldr	r3, [r7, #12]
   82a38:	671a      	str	r2, [r3, #112]	; 0x70
}
   82a3a:	e006      	b.n	82a4a <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   82a3c:	68fb      	ldr	r3, [r7, #12]
   82a3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82a40:	69bb      	ldr	r3, [r7, #24]
   82a42:	43db      	mvns	r3, r3
   82a44:	401a      	ands	r2, r3
   82a46:	68fb      	ldr	r3, [r7, #12]
   82a48:	671a      	str	r2, [r3, #112]	; 0x70
   82a4a:	bf00      	nop
   82a4c:	3734      	adds	r7, #52	; 0x34
   82a4e:	46bd      	mov	sp, r7
   82a50:	bc80      	pop	{r7}
   82a52:	4770      	bx	lr

00082a54 <ioport_set_pin_dir>:
{
   82a54:	b480      	push	{r7}
   82a56:	b08d      	sub	sp, #52	; 0x34
   82a58:	af00      	add	r7, sp, #0
   82a5a:	6078      	str	r0, [r7, #4]
   82a5c:	460b      	mov	r3, r1
   82a5e:	70fb      	strb	r3, [r7, #3]
   82a60:	687b      	ldr	r3, [r7, #4]
   82a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   82a64:	78fb      	ldrb	r3, [r7, #3]
   82a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   82a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82a6c:	627b      	str	r3, [r7, #36]	; 0x24
   82a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82a70:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   82a72:	6a3b      	ldr	r3, [r7, #32]
   82a74:	095b      	lsrs	r3, r3, #5
   82a76:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82a78:	69fb      	ldr	r3, [r7, #28]
   82a7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82a7e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82a82:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82a84:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   82a86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   82a8a:	2b01      	cmp	r3, #1
   82a8c:	d109      	bne.n	82aa2 <ioport_set_pin_dir+0x4e>
   82a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82a90:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   82a92:	697b      	ldr	r3, [r7, #20]
   82a94:	f003 031f 	and.w	r3, r3, #31
   82a98:	2201      	movs	r2, #1
   82a9a:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82a9c:	69bb      	ldr	r3, [r7, #24]
   82a9e:	611a      	str	r2, [r3, #16]
   82aa0:	e00c      	b.n	82abc <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   82aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   82aa6:	2b00      	cmp	r3, #0
   82aa8:	d108      	bne.n	82abc <ioport_set_pin_dir+0x68>
   82aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82aac:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   82aae:	693b      	ldr	r3, [r7, #16]
   82ab0:	f003 031f 	and.w	r3, r3, #31
   82ab4:	2201      	movs	r2, #1
   82ab6:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   82ab8:	69bb      	ldr	r3, [r7, #24]
   82aba:	615a      	str	r2, [r3, #20]
   82abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82abe:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82ac0:	68fb      	ldr	r3, [r7, #12]
   82ac2:	f003 031f 	and.w	r3, r3, #31
   82ac6:	2201      	movs	r2, #1
   82ac8:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82aca:	69bb      	ldr	r3, [r7, #24]
   82acc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   82ad0:	bf00      	nop
   82ad2:	3734      	adds	r7, #52	; 0x34
   82ad4:	46bd      	mov	sp, r7
   82ad6:	bc80      	pop	{r7}
   82ad8:	4770      	bx	lr

00082ada <ioport_set_pin_level>:
{
   82ada:	b480      	push	{r7}
   82adc:	b08b      	sub	sp, #44	; 0x2c
   82ade:	af00      	add	r7, sp, #0
   82ae0:	6078      	str	r0, [r7, #4]
   82ae2:	460b      	mov	r3, r1
   82ae4:	70fb      	strb	r3, [r7, #3]
   82ae6:	687b      	ldr	r3, [r7, #4]
   82ae8:	627b      	str	r3, [r7, #36]	; 0x24
   82aea:	78fb      	ldrb	r3, [r7, #3]
   82aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82af2:	61fb      	str	r3, [r7, #28]
   82af4:	69fb      	ldr	r3, [r7, #28]
   82af6:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82af8:	69bb      	ldr	r3, [r7, #24]
   82afa:	095b      	lsrs	r3, r3, #5
   82afc:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82afe:	697b      	ldr	r3, [r7, #20]
   82b00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82b04:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82b08:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82b0a:	613b      	str	r3, [r7, #16]
	if (level) {
   82b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82b10:	2b00      	cmp	r3, #0
   82b12:	d009      	beq.n	82b28 <ioport_set_pin_level+0x4e>
   82b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82b16:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82b18:	68fb      	ldr	r3, [r7, #12]
   82b1a:	f003 031f 	and.w	r3, r3, #31
   82b1e:	2201      	movs	r2, #1
   82b20:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82b22:	693b      	ldr	r3, [r7, #16]
   82b24:	631a      	str	r2, [r3, #48]	; 0x30
}
   82b26:	e008      	b.n	82b3a <ioport_set_pin_level+0x60>
   82b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82b2a:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   82b2c:	68bb      	ldr	r3, [r7, #8]
   82b2e:	f003 031f 	and.w	r3, r3, #31
   82b32:	2201      	movs	r2, #1
   82b34:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82b36:	693b      	ldr	r3, [r7, #16]
   82b38:	635a      	str	r2, [r3, #52]	; 0x34
   82b3a:	bf00      	nop
   82b3c:	372c      	adds	r7, #44	; 0x2c
   82b3e:	46bd      	mov	sp, r7
   82b40:	bc80      	pop	{r7}
   82b42:	4770      	bx	lr

00082b44 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   82b44:	b580      	push	{r7, lr}
   82b46:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82b48:	4b59      	ldr	r3, [pc, #356]	; (82cb0 <board_init+0x16c>)
   82b4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82b4e:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   82b50:	4b58      	ldr	r3, [pc, #352]	; (82cb4 <board_init+0x170>)
   82b52:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   82b54:	2101      	movs	r1, #1
   82b56:	206a      	movs	r0, #106	; 0x6a
   82b58:	4b57      	ldr	r3, [pc, #348]	; (82cb8 <board_init+0x174>)
   82b5a:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   82b5c:	2100      	movs	r1, #0
   82b5e:	206a      	movs	r0, #106	; 0x6a
   82b60:	4b56      	ldr	r3, [pc, #344]	; (82cbc <board_init+0x178>)
   82b62:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   82b64:	2101      	movs	r1, #1
   82b66:	2067      	movs	r0, #103	; 0x67
   82b68:	4b53      	ldr	r3, [pc, #332]	; (82cb8 <board_init+0x174>)
   82b6a:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   82b6c:	2100      	movs	r1, #0
   82b6e:	2067      	movs	r0, #103	; 0x67
   82b70:	4b52      	ldr	r3, [pc, #328]	; (82cbc <board_init+0x178>)
   82b72:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   82b74:	2101      	movs	r1, #1
   82b76:	2068      	movs	r0, #104	; 0x68
   82b78:	4b4f      	ldr	r3, [pc, #316]	; (82cb8 <board_init+0x174>)
   82b7a:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   82b7c:	2100      	movs	r1, #0
   82b7e:	2068      	movs	r0, #104	; 0x68
   82b80:	4b4e      	ldr	r3, [pc, #312]	; (82cbc <board_init+0x178>)
   82b82:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   82b84:	2101      	movs	r1, #1
   82b86:	2069      	movs	r0, #105	; 0x69
   82b88:	4b4b      	ldr	r3, [pc, #300]	; (82cb8 <board_init+0x174>)
   82b8a:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   82b8c:	2100      	movs	r1, #0
   82b8e:	2069      	movs	r0, #105	; 0x69
   82b90:	4b4a      	ldr	r3, [pc, #296]	; (82cbc <board_init+0x178>)
   82b92:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   82b94:	2101      	movs	r1, #1
   82b96:	2066      	movs	r0, #102	; 0x66
   82b98:	4b47      	ldr	r3, [pc, #284]	; (82cb8 <board_init+0x174>)
   82b9a:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   82b9c:	2100      	movs	r1, #0
   82b9e:	2066      	movs	r0, #102	; 0x66
   82ba0:	4b46      	ldr	r3, [pc, #280]	; (82cbc <board_init+0x178>)
   82ba2:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   82ba4:	2100      	movs	r1, #0
   82ba6:	2060      	movs	r0, #96	; 0x60
   82ba8:	4b43      	ldr	r3, [pc, #268]	; (82cb8 <board_init+0x174>)
   82baa:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82bac:	2188      	movs	r1, #136	; 0x88
   82bae:	2060      	movs	r0, #96	; 0x60
   82bb0:	4b43      	ldr	r3, [pc, #268]	; (82cc0 <board_init+0x17c>)
   82bb2:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   82bb4:	2100      	movs	r1, #0
   82bb6:	2061      	movs	r0, #97	; 0x61
   82bb8:	4b3f      	ldr	r3, [pc, #252]	; (82cb8 <board_init+0x174>)
   82bba:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82bbc:	2188      	movs	r1, #136	; 0x88
   82bbe:	2061      	movs	r0, #97	; 0x61
   82bc0:	4b3f      	ldr	r3, [pc, #252]	; (82cc0 <board_init+0x17c>)
   82bc2:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   82bc4:	2100      	movs	r1, #0
   82bc6:	2062      	movs	r0, #98	; 0x62
   82bc8:	4b3b      	ldr	r3, [pc, #236]	; (82cb8 <board_init+0x174>)
   82bca:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82bcc:	2188      	movs	r1, #136	; 0x88
   82bce:	2062      	movs	r0, #98	; 0x62
   82bd0:	4b3b      	ldr	r3, [pc, #236]	; (82cc0 <board_init+0x17c>)
   82bd2:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   82bd4:	2100      	movs	r1, #0
   82bd6:	2063      	movs	r0, #99	; 0x63
   82bd8:	4b37      	ldr	r3, [pc, #220]	; (82cb8 <board_init+0x174>)
   82bda:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82bdc:	2188      	movs	r1, #136	; 0x88
   82bde:	2063      	movs	r0, #99	; 0x63
   82be0:	4b37      	ldr	r3, [pc, #220]	; (82cc0 <board_init+0x17c>)
   82be2:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   82be4:	2100      	movs	r1, #0
   82be6:	2064      	movs	r0, #100	; 0x64
   82be8:	4b33      	ldr	r3, [pc, #204]	; (82cb8 <board_init+0x174>)
   82bea:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82bec:	2188      	movs	r1, #136	; 0x88
   82bee:	2064      	movs	r0, #100	; 0x64
   82bf0:	4b33      	ldr	r3, [pc, #204]	; (82cc0 <board_init+0x17c>)
   82bf2:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   82bf4:	2100      	movs	r1, #0
   82bf6:	2065      	movs	r0, #101	; 0x65
   82bf8:	4b2f      	ldr	r3, [pc, #188]	; (82cb8 <board_init+0x174>)
   82bfa:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   82bfc:	2188      	movs	r1, #136	; 0x88
   82bfe:	2065      	movs	r0, #101	; 0x65
   82c00:	4b2f      	ldr	r3, [pc, #188]	; (82cc0 <board_init+0x17c>)
   82c02:	4798      	blx	r3
	
	/* Configure I2C pins */
	ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   82c04:	2100      	movs	r1, #0
   82c06:	2011      	movs	r0, #17
   82c08:	4b2d      	ldr	r3, [pc, #180]	; (82cc0 <board_init+0x17c>)
   82c0a:	4798      	blx	r3
	ioport_disable_pin(I2C0_DATA);
   82c0c:	2011      	movs	r0, #17
   82c0e:	4b2d      	ldr	r3, [pc, #180]	; (82cc4 <board_init+0x180>)
   82c10:	4798      	blx	r3
	ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   82c12:	2100      	movs	r1, #0
   82c14:	2012      	movs	r0, #18
   82c16:	4b2a      	ldr	r3, [pc, #168]	; (82cc0 <board_init+0x17c>)
   82c18:	4798      	blx	r3
	ioport_disable_pin(I2C0_CLK);
   82c1a:	2012      	movs	r0, #18
   82c1c:	4b29      	ldr	r3, [pc, #164]	; (82cc4 <board_init+0x180>)
   82c1e:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   82c20:	2100      	movs	r1, #0
   82c22:	200c      	movs	r0, #12
   82c24:	4b26      	ldr	r3, [pc, #152]	; (82cc0 <board_init+0x17c>)
   82c26:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   82c28:	200c      	movs	r0, #12
   82c2a:	4b26      	ldr	r3, [pc, #152]	; (82cc4 <board_init+0x180>)
   82c2c:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   82c2e:	2100      	movs	r1, #0
   82c30:	200d      	movs	r0, #13
   82c32:	4b23      	ldr	r3, [pc, #140]	; (82cc0 <board_init+0x17c>)
   82c34:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   82c36:	200d      	movs	r0, #13
   82c38:	4b22      	ldr	r3, [pc, #136]	; (82cc4 <board_init+0x180>)
   82c3a:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   82c3c:	2100      	movs	r1, #0
   82c3e:	2010      	movs	r0, #16
   82c40:	4b1f      	ldr	r3, [pc, #124]	; (82cc0 <board_init+0x17c>)
   82c42:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   82c44:	2010      	movs	r0, #16
   82c46:	4b1f      	ldr	r3, [pc, #124]	; (82cc4 <board_init+0x180>)
   82c48:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   82c4a:	2100      	movs	r1, #0
   82c4c:	200e      	movs	r0, #14
   82c4e:	4b1c      	ldr	r3, [pc, #112]	; (82cc0 <board_init+0x17c>)
   82c50:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   82c52:	200e      	movs	r0, #14
   82c54:	4b1b      	ldr	r3, [pc, #108]	; (82cc4 <board_init+0x180>)
   82c56:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   82c58:	2100      	movs	r1, #0
   82c5a:	2014      	movs	r0, #20
   82c5c:	4b18      	ldr	r3, [pc, #96]	; (82cc0 <board_init+0x17c>)
   82c5e:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   82c60:	2014      	movs	r0, #20
   82c62:	4b18      	ldr	r3, [pc, #96]	; (82cc4 <board_init+0x180>)
   82c64:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   82c66:	2100      	movs	r1, #0
   82c68:	2013      	movs	r0, #19
   82c6a:	4b15      	ldr	r3, [pc, #84]	; (82cc0 <board_init+0x17c>)
   82c6c:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   82c6e:	2013      	movs	r0, #19
   82c70:	4b14      	ldr	r3, [pc, #80]	; (82cc4 <board_init+0x180>)
   82c72:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   82c74:	2100      	movs	r1, #0
   82c76:	2015      	movs	r0, #21
   82c78:	4b11      	ldr	r3, [pc, #68]	; (82cc0 <board_init+0x17c>)
   82c7a:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   82c7c:	2015      	movs	r0, #21
   82c7e:	4b11      	ldr	r3, [pc, #68]	; (82cc4 <board_init+0x180>)
   82c80:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   82c82:	2100      	movs	r1, #0
   82c84:	2016      	movs	r0, #22
   82c86:	4b0e      	ldr	r3, [pc, #56]	; (82cc0 <board_init+0x17c>)
   82c88:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   82c8a:	2016      	movs	r0, #22
   82c8c:	4b0d      	ldr	r3, [pc, #52]	; (82cc4 <board_init+0x180>)
   82c8e:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   82c90:	2100      	movs	r1, #0
   82c92:	2017      	movs	r0, #23
   82c94:	4b0a      	ldr	r3, [pc, #40]	; (82cc0 <board_init+0x17c>)
   82c96:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   82c98:	2017      	movs	r0, #23
   82c9a:	4b0a      	ldr	r3, [pc, #40]	; (82cc4 <board_init+0x180>)
   82c9c:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   82c9e:	2100      	movs	r1, #0
   82ca0:	2018      	movs	r0, #24
   82ca2:	4b07      	ldr	r3, [pc, #28]	; (82cc0 <board_init+0x17c>)
   82ca4:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   82ca6:	2018      	movs	r0, #24
   82ca8:	4b06      	ldr	r3, [pc, #24]	; (82cc4 <board_init+0x180>)
   82caa:	4798      	blx	r3
}
   82cac:	bf00      	nop
   82cae:	bd80      	pop	{r7, pc}
   82cb0:	400e1a50 	.word	0x400e1a50
   82cb4:	00082911 	.word	0x00082911
   82cb8:	00082a55 	.word	0x00082a55
   82cbc:	00082adb 	.word	0x00082adb
   82cc0:	0008297d 	.word	0x0008297d
   82cc4:	00082935 	.word	0x00082935

00082cc8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82cc8:	b480      	push	{r7}
   82cca:	af00      	add	r7, sp, #0
	while (1) {
   82ccc:	e7fe      	b.n	82ccc <Dummy_Handler+0x4>
	...

00082cd0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82cd0:	b580      	push	{r7, lr}
   82cd2:	b082      	sub	sp, #8
   82cd4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   82cd6:	4b1e      	ldr	r3, [pc, #120]	; (82d50 <Reset_Handler+0x80>)
   82cd8:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   82cda:	4b1e      	ldr	r3, [pc, #120]	; (82d54 <Reset_Handler+0x84>)
   82cdc:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   82cde:	687a      	ldr	r2, [r7, #4]
   82ce0:	683b      	ldr	r3, [r7, #0]
   82ce2:	429a      	cmp	r2, r3
   82ce4:	d00c      	beq.n	82d00 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   82ce6:	e007      	b.n	82cf8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   82ce8:	683b      	ldr	r3, [r7, #0]
   82cea:	1d1a      	adds	r2, r3, #4
   82cec:	603a      	str	r2, [r7, #0]
   82cee:	687a      	ldr	r2, [r7, #4]
   82cf0:	1d11      	adds	r1, r2, #4
   82cf2:	6079      	str	r1, [r7, #4]
   82cf4:	6812      	ldr	r2, [r2, #0]
   82cf6:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   82cf8:	683b      	ldr	r3, [r7, #0]
   82cfa:	4a17      	ldr	r2, [pc, #92]	; (82d58 <Reset_Handler+0x88>)
   82cfc:	4293      	cmp	r3, r2
   82cfe:	d3f3      	bcc.n	82ce8 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82d00:	4b16      	ldr	r3, [pc, #88]	; (82d5c <Reset_Handler+0x8c>)
   82d02:	603b      	str	r3, [r7, #0]
   82d04:	e004      	b.n	82d10 <Reset_Handler+0x40>
		*pDest++ = 0;
   82d06:	683b      	ldr	r3, [r7, #0]
   82d08:	1d1a      	adds	r2, r3, #4
   82d0a:	603a      	str	r2, [r7, #0]
   82d0c:	2200      	movs	r2, #0
   82d0e:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   82d10:	683b      	ldr	r3, [r7, #0]
   82d12:	4a13      	ldr	r2, [pc, #76]	; (82d60 <Reset_Handler+0x90>)
   82d14:	4293      	cmp	r3, r2
   82d16:	d3f6      	bcc.n	82d06 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   82d18:	4b12      	ldr	r3, [pc, #72]	; (82d64 <Reset_Handler+0x94>)
   82d1a:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82d1c:	4a12      	ldr	r2, [pc, #72]	; (82d68 <Reset_Handler+0x98>)
   82d1e:	687b      	ldr	r3, [r7, #4]
   82d20:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82d24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82d28:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82d2a:	687b      	ldr	r3, [r7, #4]
   82d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82d30:	d309      	bcc.n	82d46 <Reset_Handler+0x76>
   82d32:	687b      	ldr	r3, [r7, #4]
   82d34:	4a0d      	ldr	r2, [pc, #52]	; (82d6c <Reset_Handler+0x9c>)
   82d36:	4293      	cmp	r3, r2
   82d38:	d805      	bhi.n	82d46 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82d3a:	4a0b      	ldr	r2, [pc, #44]	; (82d68 <Reset_Handler+0x98>)
   82d3c:	4b0a      	ldr	r3, [pc, #40]	; (82d68 <Reset_Handler+0x98>)
   82d3e:	689b      	ldr	r3, [r3, #8]
   82d40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82d44:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82d46:	4b0a      	ldr	r3, [pc, #40]	; (82d70 <Reset_Handler+0xa0>)
   82d48:	4798      	blx	r3

	/* Branch to main function */
	main();
   82d4a:	4b0a      	ldr	r3, [pc, #40]	; (82d74 <Reset_Handler+0xa4>)
   82d4c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82d4e:	e7fe      	b.n	82d4e <Reset_Handler+0x7e>
   82d50:	000880c4 	.word	0x000880c4
   82d54:	20070000 	.word	0x20070000
   82d58:	20070b50 	.word	0x20070b50
   82d5c:	20070b50 	.word	0x20070b50
   82d60:	2007105c 	.word	0x2007105c
   82d64:	00080000 	.word	0x00080000
   82d68:	e000ed00 	.word	0xe000ed00
   82d6c:	200fffff 	.word	0x200fffff
   82d70:	000833d5 	.word	0x000833d5
   82d74:	00083149 	.word	0x00083149

00082d78 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   82d78:	b480      	push	{r7}
   82d7a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82d7c:	4b57      	ldr	r3, [pc, #348]	; (82edc <SystemCoreClockUpdate+0x164>)
   82d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82d80:	f003 0303 	and.w	r3, r3, #3
   82d84:	2b03      	cmp	r3, #3
   82d86:	f200 808a 	bhi.w	82e9e <SystemCoreClockUpdate+0x126>
   82d8a:	a201      	add	r2, pc, #4	; (adr r2, 82d90 <SystemCoreClockUpdate+0x18>)
   82d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82d90:	00082da1 	.word	0x00082da1
   82d94:	00082dc1 	.word	0x00082dc1
   82d98:	00082e11 	.word	0x00082e11
   82d9c:	00082e11 	.word	0x00082e11
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82da0:	4b4f      	ldr	r3, [pc, #316]	; (82ee0 <SystemCoreClockUpdate+0x168>)
   82da2:	695b      	ldr	r3, [r3, #20]
   82da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82da8:	2b00      	cmp	r3, #0
   82daa:	d004      	beq.n	82db6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82dac:	4b4d      	ldr	r3, [pc, #308]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82dae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82db2:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   82db4:	e073      	b.n	82e9e <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82db6:	4b4b      	ldr	r3, [pc, #300]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82db8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82dbc:	601a      	str	r2, [r3, #0]
		break;
   82dbe:	e06e      	b.n	82e9e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82dc0:	4b46      	ldr	r3, [pc, #280]	; (82edc <SystemCoreClockUpdate+0x164>)
   82dc2:	6a1b      	ldr	r3, [r3, #32]
   82dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82dc8:	2b00      	cmp	r3, #0
   82dca:	d003      	beq.n	82dd4 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82dcc:	4b45      	ldr	r3, [pc, #276]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82dce:	4a46      	ldr	r2, [pc, #280]	; (82ee8 <SystemCoreClockUpdate+0x170>)
   82dd0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   82dd2:	e064      	b.n	82e9e <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82dd4:	4b43      	ldr	r3, [pc, #268]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82dd6:	4a45      	ldr	r2, [pc, #276]	; (82eec <SystemCoreClockUpdate+0x174>)
   82dd8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82dda:	4b40      	ldr	r3, [pc, #256]	; (82edc <SystemCoreClockUpdate+0x164>)
   82ddc:	6a1b      	ldr	r3, [r3, #32]
   82dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82de2:	2b10      	cmp	r3, #16
   82de4:	d004      	beq.n	82df0 <SystemCoreClockUpdate+0x78>
   82de6:	2b20      	cmp	r3, #32
   82de8:	d008      	beq.n	82dfc <SystemCoreClockUpdate+0x84>
   82dea:	2b00      	cmp	r3, #0
   82dec:	d00e      	beq.n	82e0c <SystemCoreClockUpdate+0x94>
				break;
   82dee:	e00e      	b.n	82e0e <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   82df0:	4b3c      	ldr	r3, [pc, #240]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82df2:	681b      	ldr	r3, [r3, #0]
   82df4:	005b      	lsls	r3, r3, #1
   82df6:	4a3b      	ldr	r2, [pc, #236]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82df8:	6013      	str	r3, [r2, #0]
				break;
   82dfa:	e008      	b.n	82e0e <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   82dfc:	4b39      	ldr	r3, [pc, #228]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82dfe:	681a      	ldr	r2, [r3, #0]
   82e00:	4613      	mov	r3, r2
   82e02:	005b      	lsls	r3, r3, #1
   82e04:	4413      	add	r3, r2
   82e06:	4a37      	ldr	r2, [pc, #220]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82e08:	6013      	str	r3, [r2, #0]
				break;
   82e0a:	e000      	b.n	82e0e <SystemCoreClockUpdate+0x96>
				break;
   82e0c:	bf00      	nop
		break;
   82e0e:	e046      	b.n	82e9e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82e10:	4b32      	ldr	r3, [pc, #200]	; (82edc <SystemCoreClockUpdate+0x164>)
   82e12:	6a1b      	ldr	r3, [r3, #32]
   82e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82e18:	2b00      	cmp	r3, #0
   82e1a:	d003      	beq.n	82e24 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82e1c:	4b31      	ldr	r3, [pc, #196]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82e1e:	4a32      	ldr	r2, [pc, #200]	; (82ee8 <SystemCoreClockUpdate+0x170>)
   82e20:	601a      	str	r2, [r3, #0]
   82e22:	e01c      	b.n	82e5e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82e24:	4b2f      	ldr	r3, [pc, #188]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82e26:	4a31      	ldr	r2, [pc, #196]	; (82eec <SystemCoreClockUpdate+0x174>)
   82e28:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82e2a:	4b2c      	ldr	r3, [pc, #176]	; (82edc <SystemCoreClockUpdate+0x164>)
   82e2c:	6a1b      	ldr	r3, [r3, #32]
   82e2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82e32:	2b10      	cmp	r3, #16
   82e34:	d004      	beq.n	82e40 <SystemCoreClockUpdate+0xc8>
   82e36:	2b20      	cmp	r3, #32
   82e38:	d008      	beq.n	82e4c <SystemCoreClockUpdate+0xd4>
   82e3a:	2b00      	cmp	r3, #0
   82e3c:	d00e      	beq.n	82e5c <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82e3e:	e00e      	b.n	82e5e <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   82e40:	4b28      	ldr	r3, [pc, #160]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82e42:	681b      	ldr	r3, [r3, #0]
   82e44:	005b      	lsls	r3, r3, #1
   82e46:	4a27      	ldr	r2, [pc, #156]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82e48:	6013      	str	r3, [r2, #0]
				break;
   82e4a:	e008      	b.n	82e5e <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   82e4c:	4b25      	ldr	r3, [pc, #148]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82e4e:	681a      	ldr	r2, [r3, #0]
   82e50:	4613      	mov	r3, r2
   82e52:	005b      	lsls	r3, r3, #1
   82e54:	4413      	add	r3, r2
   82e56:	4a23      	ldr	r2, [pc, #140]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82e58:	6013      	str	r3, [r2, #0]
				break;
   82e5a:	e000      	b.n	82e5e <SystemCoreClockUpdate+0xe6>
				break;
   82e5c:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82e5e:	4b1f      	ldr	r3, [pc, #124]	; (82edc <SystemCoreClockUpdate+0x164>)
   82e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e62:	f003 0303 	and.w	r3, r3, #3
   82e66:	2b02      	cmp	r3, #2
   82e68:	d115      	bne.n	82e96 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82e6a:	4b1c      	ldr	r3, [pc, #112]	; (82edc <SystemCoreClockUpdate+0x164>)
   82e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82e6e:	0c1b      	lsrs	r3, r3, #16
   82e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   82e74:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82e76:	4a1b      	ldr	r2, [pc, #108]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82e78:	6812      	ldr	r2, [r2, #0]
   82e7a:	fb02 f303 	mul.w	r3, r2, r3
   82e7e:	4a19      	ldr	r2, [pc, #100]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82e80:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82e82:	4b16      	ldr	r3, [pc, #88]	; (82edc <SystemCoreClockUpdate+0x164>)
   82e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82e86:	b2db      	uxtb	r3, r3
   82e88:	4a16      	ldr	r2, [pc, #88]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82e8a:	6812      	ldr	r2, [r2, #0]
   82e8c:	fbb2 f3f3 	udiv	r3, r2, r3
   82e90:	4a14      	ldr	r2, [pc, #80]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82e92:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82e94:	e002      	b.n	82e9c <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82e96:	4b13      	ldr	r3, [pc, #76]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82e98:	4a15      	ldr	r2, [pc, #84]	; (82ef0 <SystemCoreClockUpdate+0x178>)
   82e9a:	601a      	str	r2, [r3, #0]
		break;
   82e9c:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82e9e:	4b0f      	ldr	r3, [pc, #60]	; (82edc <SystemCoreClockUpdate+0x164>)
   82ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82ea6:	2b70      	cmp	r3, #112	; 0x70
   82ea8:	d108      	bne.n	82ebc <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82eaa:	4b0e      	ldr	r3, [pc, #56]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82eac:	681b      	ldr	r3, [r3, #0]
   82eae:	4a11      	ldr	r2, [pc, #68]	; (82ef4 <SystemCoreClockUpdate+0x17c>)
   82eb0:	fba2 2303 	umull	r2, r3, r2, r3
   82eb4:	085b      	lsrs	r3, r3, #1
   82eb6:	4a0b      	ldr	r2, [pc, #44]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82eb8:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   82eba:	e00a      	b.n	82ed2 <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82ebc:	4b07      	ldr	r3, [pc, #28]	; (82edc <SystemCoreClockUpdate+0x164>)
   82ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ec0:	091b      	lsrs	r3, r3, #4
   82ec2:	f003 0307 	and.w	r3, r3, #7
   82ec6:	4a07      	ldr	r2, [pc, #28]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82ec8:	6812      	ldr	r2, [r2, #0]
   82eca:	fa22 f303 	lsr.w	r3, r2, r3
   82ece:	4a05      	ldr	r2, [pc, #20]	; (82ee4 <SystemCoreClockUpdate+0x16c>)
   82ed0:	6013      	str	r3, [r2, #0]
}
   82ed2:	bf00      	nop
   82ed4:	46bd      	mov	sp, r7
   82ed6:	bc80      	pop	{r7}
   82ed8:	4770      	bx	lr
   82eda:	bf00      	nop
   82edc:	400e0600 	.word	0x400e0600
   82ee0:	400e1a10 	.word	0x400e1a10
   82ee4:	20070198 	.word	0x20070198
   82ee8:	00b71b00 	.word	0x00b71b00
   82eec:	003d0900 	.word	0x003d0900
   82ef0:	0e4e1c00 	.word	0x0e4e1c00
   82ef4:	aaaaaaab 	.word	0xaaaaaaab

00082ef8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   82ef8:	b480      	push	{r7}
   82efa:	b085      	sub	sp, #20
   82efc:	af00      	add	r7, sp, #0
   82efe:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   82f00:	4b10      	ldr	r3, [pc, #64]	; (82f44 <_sbrk+0x4c>)
   82f02:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   82f04:	4b10      	ldr	r3, [pc, #64]	; (82f48 <_sbrk+0x50>)
   82f06:	681b      	ldr	r3, [r3, #0]
   82f08:	2b00      	cmp	r3, #0
   82f0a:	d102      	bne.n	82f12 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   82f0c:	4b0e      	ldr	r3, [pc, #56]	; (82f48 <_sbrk+0x50>)
   82f0e:	4a0f      	ldr	r2, [pc, #60]	; (82f4c <_sbrk+0x54>)
   82f10:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82f12:	4b0d      	ldr	r3, [pc, #52]	; (82f48 <_sbrk+0x50>)
   82f14:	681b      	ldr	r3, [r3, #0]
   82f16:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   82f18:	68ba      	ldr	r2, [r7, #8]
   82f1a:	687b      	ldr	r3, [r7, #4]
   82f1c:	441a      	add	r2, r3
   82f1e:	68fb      	ldr	r3, [r7, #12]
   82f20:	429a      	cmp	r2, r3
   82f22:	dd02      	ble.n	82f2a <_sbrk+0x32>
		return (caddr_t) -1;	
   82f24:	f04f 33ff 	mov.w	r3, #4294967295
   82f28:	e006      	b.n	82f38 <_sbrk+0x40>
	}

	heap += incr;
   82f2a:	4b07      	ldr	r3, [pc, #28]	; (82f48 <_sbrk+0x50>)
   82f2c:	681a      	ldr	r2, [r3, #0]
   82f2e:	687b      	ldr	r3, [r7, #4]
   82f30:	4413      	add	r3, r2
   82f32:	4a05      	ldr	r2, [pc, #20]	; (82f48 <_sbrk+0x50>)
   82f34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   82f36:	68bb      	ldr	r3, [r7, #8]
}
   82f38:	4618      	mov	r0, r3
   82f3a:	3714      	adds	r7, #20
   82f3c:	46bd      	mov	sp, r7
   82f3e:	bc80      	pop	{r7}
   82f40:	4770      	bx	lr
   82f42:	bf00      	nop
   82f44:	20087ffc 	.word	0x20087ffc
   82f48:	20070fa8 	.word	0x20070fa8
   82f4c:	20073060 	.word	0x20073060

00082f50 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   82f50:	b480      	push	{r7}
   82f52:	b083      	sub	sp, #12
   82f54:	af00      	add	r7, sp, #0
   82f56:	4603      	mov	r3, r0
   82f58:	6039      	str	r1, [r7, #0]
   82f5a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   82f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82f60:	2b00      	cmp	r3, #0
   82f62:	da0b      	bge.n	82f7c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   82f64:	490d      	ldr	r1, [pc, #52]	; (82f9c <NVIC_SetPriority+0x4c>)
   82f66:	79fb      	ldrb	r3, [r7, #7]
   82f68:	f003 030f 	and.w	r3, r3, #15
   82f6c:	3b04      	subs	r3, #4
   82f6e:	683a      	ldr	r2, [r7, #0]
   82f70:	b2d2      	uxtb	r2, r2
   82f72:	0112      	lsls	r2, r2, #4
   82f74:	b2d2      	uxtb	r2, r2
   82f76:	440b      	add	r3, r1
   82f78:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   82f7a:	e009      	b.n	82f90 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82f7c:	4908      	ldr	r1, [pc, #32]	; (82fa0 <NVIC_SetPriority+0x50>)
   82f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82f82:	683a      	ldr	r2, [r7, #0]
   82f84:	b2d2      	uxtb	r2, r2
   82f86:	0112      	lsls	r2, r2, #4
   82f88:	b2d2      	uxtb	r2, r2
   82f8a:	440b      	add	r3, r1
   82f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   82f90:	bf00      	nop
   82f92:	370c      	adds	r7, #12
   82f94:	46bd      	mov	sp, r7
   82f96:	bc80      	pop	{r7}
   82f98:	4770      	bx	lr
   82f9a:	bf00      	nop
   82f9c:	e000ed00 	.word	0xe000ed00
   82fa0:	e000e100 	.word	0xe000e100

00082fa4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   82fa4:	b580      	push	{r7, lr}
   82fa6:	b082      	sub	sp, #8
   82fa8:	af00      	add	r7, sp, #0
   82faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   82fac:	687b      	ldr	r3, [r7, #4]
   82fae:	3b01      	subs	r3, #1
   82fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   82fb4:	d301      	bcc.n	82fba <SysTick_Config+0x16>
   82fb6:	2301      	movs	r3, #1
   82fb8:	e00f      	b.n	82fda <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   82fba:	4a0a      	ldr	r2, [pc, #40]	; (82fe4 <SysTick_Config+0x40>)
   82fbc:	687b      	ldr	r3, [r7, #4]
   82fbe:	3b01      	subs	r3, #1
   82fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   82fc2:	210f      	movs	r1, #15
   82fc4:	f04f 30ff 	mov.w	r0, #4294967295
   82fc8:	4b07      	ldr	r3, [pc, #28]	; (82fe8 <SysTick_Config+0x44>)
   82fca:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   82fcc:	4b05      	ldr	r3, [pc, #20]	; (82fe4 <SysTick_Config+0x40>)
   82fce:	2200      	movs	r2, #0
   82fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   82fd2:	4b04      	ldr	r3, [pc, #16]	; (82fe4 <SysTick_Config+0x40>)
   82fd4:	2207      	movs	r2, #7
   82fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   82fd8:	2300      	movs	r3, #0
}
   82fda:	4618      	mov	r0, r3
   82fdc:	3708      	adds	r7, #8
   82fde:	46bd      	mov	sp, r7
   82fe0:	bd80      	pop	{r7, pc}
   82fe2:	bf00      	nop
   82fe4:	e000e010 	.word	0xe000e010
   82fe8:	00082f51 	.word	0x00082f51

00082fec <osc_get_rate>:
{
   82fec:	b480      	push	{r7}
   82fee:	b083      	sub	sp, #12
   82ff0:	af00      	add	r7, sp, #0
   82ff2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82ff4:	687b      	ldr	r3, [r7, #4]
   82ff6:	2b07      	cmp	r3, #7
   82ff8:	d825      	bhi.n	83046 <osc_get_rate+0x5a>
   82ffa:	a201      	add	r2, pc, #4	; (adr r2, 83000 <osc_get_rate+0x14>)
   82ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83000:	00083021 	.word	0x00083021
   83004:	00083027 	.word	0x00083027
   83008:	0008302d 	.word	0x0008302d
   8300c:	00083033 	.word	0x00083033
   83010:	00083037 	.word	0x00083037
   83014:	0008303b 	.word	0x0008303b
   83018:	0008303f 	.word	0x0008303f
   8301c:	00083043 	.word	0x00083043
		return OSC_SLCK_32K_RC_HZ;
   83020:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83024:	e010      	b.n	83048 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   83026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8302a:	e00d      	b.n	83048 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   8302c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83030:	e00a      	b.n	83048 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   83032:	4b08      	ldr	r3, [pc, #32]	; (83054 <osc_get_rate+0x68>)
   83034:	e008      	b.n	83048 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   83036:	4b08      	ldr	r3, [pc, #32]	; (83058 <osc_get_rate+0x6c>)
   83038:	e006      	b.n	83048 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8303a:	4b08      	ldr	r3, [pc, #32]	; (8305c <osc_get_rate+0x70>)
   8303c:	e004      	b.n	83048 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8303e:	4b07      	ldr	r3, [pc, #28]	; (8305c <osc_get_rate+0x70>)
   83040:	e002      	b.n	83048 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   83042:	4b06      	ldr	r3, [pc, #24]	; (8305c <osc_get_rate+0x70>)
   83044:	e000      	b.n	83048 <osc_get_rate+0x5c>
	return 0;
   83046:	2300      	movs	r3, #0
}
   83048:	4618      	mov	r0, r3
   8304a:	370c      	adds	r7, #12
   8304c:	46bd      	mov	sp, r7
   8304e:	bc80      	pop	{r7}
   83050:	4770      	bx	lr
   83052:	bf00      	nop
   83054:	003d0900 	.word	0x003d0900
   83058:	007a1200 	.word	0x007a1200
   8305c:	00b71b00 	.word	0x00b71b00

00083060 <sysclk_get_main_hz>:
{
   83060:	b580      	push	{r7, lr}
   83062:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83064:	2006      	movs	r0, #6
   83066:	4b04      	ldr	r3, [pc, #16]	; (83078 <sysclk_get_main_hz+0x18>)
   83068:	4798      	blx	r3
   8306a:	4602      	mov	r2, r0
   8306c:	4613      	mov	r3, r2
   8306e:	00db      	lsls	r3, r3, #3
   83070:	1a9b      	subs	r3, r3, r2
   83072:	005b      	lsls	r3, r3, #1
}
   83074:	4618      	mov	r0, r3
   83076:	bd80      	pop	{r7, pc}
   83078:	00082fed 	.word	0x00082fed

0008307c <sysclk_get_cpu_hz>:
{
   8307c:	b580      	push	{r7, lr}
   8307e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83080:	4b02      	ldr	r3, [pc, #8]	; (8308c <sysclk_get_cpu_hz+0x10>)
   83082:	4798      	blx	r3
   83084:	4603      	mov	r3, r0
   83086:	085b      	lsrs	r3, r3, #1
}
   83088:	4618      	mov	r0, r3
   8308a:	bd80      	pop	{r7, pc}
   8308c:	00083061 	.word	0x00083061

00083090 <ioport_set_pin_level>:
{
   83090:	b480      	push	{r7}
   83092:	b08b      	sub	sp, #44	; 0x2c
   83094:	af00      	add	r7, sp, #0
   83096:	6078      	str	r0, [r7, #4]
   83098:	460b      	mov	r3, r1
   8309a:	70fb      	strb	r3, [r7, #3]
   8309c:	687b      	ldr	r3, [r7, #4]
   8309e:	627b      	str	r3, [r7, #36]	; 0x24
   830a0:	78fb      	ldrb	r3, [r7, #3]
   830a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   830a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   830a8:	61fb      	str	r3, [r7, #28]
   830aa:	69fb      	ldr	r3, [r7, #28]
   830ac:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   830ae:	69bb      	ldr	r3, [r7, #24]
   830b0:	095b      	lsrs	r3, r3, #5
   830b2:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   830b4:	697b      	ldr	r3, [r7, #20]
   830b6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   830ba:	f203 7307 	addw	r3, r3, #1799	; 0x707
   830be:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   830c0:	613b      	str	r3, [r7, #16]
	if (level) {
   830c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   830c6:	2b00      	cmp	r3, #0
   830c8:	d009      	beq.n	830de <ioport_set_pin_level+0x4e>
   830ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   830cc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   830ce:	68fb      	ldr	r3, [r7, #12]
   830d0:	f003 031f 	and.w	r3, r3, #31
   830d4:	2201      	movs	r2, #1
   830d6:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   830d8:	693b      	ldr	r3, [r7, #16]
   830da:	631a      	str	r2, [r3, #48]	; 0x30
}
   830dc:	e008      	b.n	830f0 <ioport_set_pin_level+0x60>
   830de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   830e0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   830e2:	68bb      	ldr	r3, [r7, #8]
   830e4:	f003 031f 	and.w	r3, r3, #31
   830e8:	2201      	movs	r2, #1
   830ea:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   830ec:	693b      	ldr	r3, [r7, #16]
   830ee:	635a      	str	r2, [r3, #52]	; 0x34
   830f0:	bf00      	nop
   830f2:	372c      	adds	r7, #44	; 0x2c
   830f4:	46bd      	mov	sp, r7
   830f6:	bc80      	pop	{r7}
   830f8:	4770      	bx	lr

000830fa <ioport_get_pin_level>:
{
   830fa:	b480      	push	{r7}
   830fc:	b089      	sub	sp, #36	; 0x24
   830fe:	af00      	add	r7, sp, #0
   83100:	6078      	str	r0, [r7, #4]
   83102:	687b      	ldr	r3, [r7, #4]
   83104:	61fb      	str	r3, [r7, #28]
   83106:	69fb      	ldr	r3, [r7, #28]
   83108:	61bb      	str	r3, [r7, #24]
   8310a:	69bb      	ldr	r3, [r7, #24]
   8310c:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   8310e:	697b      	ldr	r3, [r7, #20]
   83110:	095b      	lsrs	r3, r3, #5
   83112:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83114:	693b      	ldr	r3, [r7, #16]
   83116:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8311a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8311e:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   83120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   83122:	69fb      	ldr	r3, [r7, #28]
   83124:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83126:	68fb      	ldr	r3, [r7, #12]
   83128:	f003 031f 	and.w	r3, r3, #31
   8312c:	2101      	movs	r1, #1
   8312e:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   83132:	4013      	ands	r3, r2
   83134:	2b00      	cmp	r3, #0
   83136:	bf14      	ite	ne
   83138:	2301      	movne	r3, #1
   8313a:	2300      	moveq	r3, #0
   8313c:	b2db      	uxtb	r3, r3
}
   8313e:	4618      	mov	r0, r3
   83140:	3724      	adds	r7, #36	; 0x24
   83142:	46bd      	mov	sp, r7
   83144:	bc80      	pop	{r7}
   83146:	4770      	bx	lr

00083148 <main>:
FIL file_object;*/

void noOS_bootup_sequence(void);

int main(void)
{
   83148:	b580      	push	{r7, lr}
   8314a:	b082      	sub	sp, #8
   8314c:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   8314e:	4b26      	ldr	r3, [pc, #152]	; (831e8 <main+0xa0>)
   83150:	4798      	blx	r3
    board_init();
   83152:	4b26      	ldr	r3, [pc, #152]	; (831ec <main+0xa4>)
   83154:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   83156:	4b26      	ldr	r3, [pc, #152]	; (831f0 <main+0xa8>)
   83158:	4798      	blx	r3
   8315a:	4602      	mov	r2, r0
   8315c:	4b25      	ldr	r3, [pc, #148]	; (831f4 <main+0xac>)
   8315e:	fba3 2302 	umull	r2, r3, r3, r2
   83162:	099b      	lsrs	r3, r3, #6
   83164:	4618      	mov	r0, r3
   83166:	4b24      	ldr	r3, [pc, #144]	; (831f8 <main+0xb0>)
   83168:	4798      	blx	r3
    
    //sd_mmc_init();
    
    spi_init();
   8316a:	4b24      	ldr	r3, [pc, #144]	; (831fc <main+0xb4>)
   8316c:	4798      	blx	r3
    
    lcd_init();
   8316e:	4b24      	ldr	r3, [pc, #144]	; (83200 <main+0xb8>)
   83170:	4798      	blx	r3
    bl_state = LCD_LIGHT_ON;
   83172:	4b24      	ldr	r3, [pc, #144]	; (83204 <main+0xbc>)
   83174:	2208      	movs	r2, #8
   83176:	701a      	strb	r2, [r3, #0]
    lcd_set_backlight(bl_state);
   83178:	4b22      	ldr	r3, [pc, #136]	; (83204 <main+0xbc>)
   8317a:	781b      	ldrb	r3, [r3, #0]
   8317c:	4618      	mov	r0, r3
   8317e:	4b22      	ldr	r3, [pc, #136]	; (83208 <main+0xc0>)
   83180:	4798      	blx	r3
main_end_of_test:
        //printf("Please unplug the card.\n\r");
        //while (CTRL_NO_PRESENT != sd_mmc_check(0));
//    }*/
    
    noOS_bootup_sequence();
   83182:	4b22      	ldr	r3, [pc, #136]	; (8320c <main+0xc4>)
   83184:	4798      	blx	r3
    
    lcd_clear();
   83186:	4b22      	ldr	r3, [pc, #136]	; (83210 <main+0xc8>)
   83188:	4798      	blx	r3
    
    while (1)
    {
        update_comm();
   8318a:	4b22      	ldr	r3, [pc, #136]	; (83214 <main+0xcc>)
   8318c:	4798      	blx	r3
        update_heartbeat();
   8318e:	4b22      	ldr	r3, [pc, #136]	; (83218 <main+0xd0>)
   83190:	4798      	blx	r3
        update_battery(0);
   83192:	2000      	movs	r0, #0
   83194:	4b21      	ldr	r3, [pc, #132]	; (8321c <main+0xd4>)
   83196:	4798      	blx	r3
        
        if (stm.ibit.heartbeat)
   83198:	4b21      	ldr	r3, [pc, #132]	; (83220 <main+0xd8>)
   8319a:	781b      	ldrb	r3, [r3, #0]
   8319c:	f003 0301 	and.w	r3, r3, #1
   831a0:	b2db      	uxtb	r3, r3
   831a2:	2b00      	cmp	r3, #0
   831a4:	d004      	beq.n	831b0 <main+0x68>
        {
            ioport_set_pin_level(LED_M2, 1);
   831a6:	2101      	movs	r1, #1
   831a8:	2068      	movs	r0, #104	; 0x68
   831aa:	4b1e      	ldr	r3, [pc, #120]	; (83224 <main+0xdc>)
   831ac:	4798      	blx	r3
   831ae:	e003      	b.n	831b8 <main+0x70>
        }
        else
        {
            ioport_set_pin_level(LED_M2, 0);
   831b0:	2100      	movs	r1, #0
   831b2:	2068      	movs	r0, #104	; 0x68
   831b4:	4b1b      	ldr	r3, [pc, #108]	; (83224 <main+0xdc>)
   831b6:	4798      	blx	r3
        }
        
        act_event = button_events();
   831b8:	4b1b      	ldr	r3, [pc, #108]	; (83228 <main+0xe0>)
   831ba:	4798      	blx	r3
   831bc:	4603      	mov	r3, r0
   831be:	71fb      	strb	r3, [r7, #7]
        
        menu(act_event);
   831c0:	79fb      	ldrb	r3, [r7, #7]
   831c2:	4618      	mov	r0, r3
   831c4:	4b19      	ldr	r3, [pc, #100]	; (8322c <main+0xe4>)
   831c6:	4798      	blx	r3
        
        if (act_event == EVENT_BUTTON_MID_H)
   831c8:	79fb      	ldrb	r3, [r7, #7]
   831ca:	2b08      	cmp	r3, #8
   831cc:	d105      	bne.n	831da <main+0x92>
        {
            mts.ibit.button = 1;
   831ce:	4a18      	ldr	r2, [pc, #96]	; (83230 <main+0xe8>)
   831d0:	7813      	ldrb	r3, [r2, #0]
   831d2:	f043 0302 	orr.w	r3, r3, #2
   831d6:	7013      	strb	r3, [r2, #0]
   831d8:	e7d7      	b.n	8318a <main+0x42>
        }
        else
        {
            mts.ibit.button = 0;
   831da:	4a15      	ldr	r2, [pc, #84]	; (83230 <main+0xe8>)
   831dc:	7813      	ldrb	r3, [r2, #0]
   831de:	f36f 0341 	bfc	r3, #1, #1
   831e2:	7013      	strb	r3, [r2, #0]
        update_comm();
   831e4:	e7d1      	b.n	8318a <main+0x42>
   831e6:	bf00      	nop
   831e8:	00082381 	.word	0x00082381
   831ec:	00082b45 	.word	0x00082b45
   831f0:	0008307d 	.word	0x0008307d
   831f4:	10624dd3 	.word	0x10624dd3
   831f8:	00082fa5 	.word	0x00082fa5
   831fc:	000805bd 	.word	0x000805bd
   83200:	00080e5d 	.word	0x00080e5d
   83204:	20070fac 	.word	0x20070fac
   83208:	00080f39 	.word	0x00080f39
   8320c:	00083235 	.word	0x00083235
   83210:	00080f6d 	.word	0x00080f6d
   83214:	00081f49 	.word	0x00081f49
   83218:	00081fe9 	.word	0x00081fe9
   8321c:	00081f91 	.word	0x00081f91
   83220:	20070fec 	.word	0x20070fec
   83224:	00083091 	.word	0x00083091
   83228:	00081b95 	.word	0x00081b95
   8322c:	000816c5 	.word	0x000816c5
   83230:	20070fe8 	.word	0x20070fe8

00083234 <noOS_bootup_sequence>:
        }  
    }
}

void noOS_bootup_sequence(void)
{
   83234:	b580      	push	{r7, lr}
   83236:	b082      	sub	sp, #8
   83238:	af00      	add	r7, sp, #0
    while (ioport_get_pin_level(PB_MID))
   8323a:	e072      	b.n	83322 <noOS_bootup_sequence+0xee>
    {
        if (getTicks() >= (ticks_blink_update + 800))
   8323c:	4b59      	ldr	r3, [pc, #356]	; (833a4 <noOS_bootup_sequence+0x170>)
   8323e:	4798      	blx	r3
   83240:	4602      	mov	r2, r0
   83242:	4b59      	ldr	r3, [pc, #356]	; (833a8 <noOS_bootup_sequence+0x174>)
   83244:	681b      	ldr	r3, [r3, #0]
   83246:	f503 7348 	add.w	r3, r3, #800	; 0x320
   8324a:	429a      	cmp	r2, r3
   8324c:	d31a      	bcc.n	83284 <noOS_bootup_sequence+0x50>
        {
            ticks_blink_update = getTicks();
   8324e:	4b55      	ldr	r3, [pc, #340]	; (833a4 <noOS_bootup_sequence+0x170>)
   83250:	4798      	blx	r3
   83252:	4602      	mov	r2, r0
   83254:	4b54      	ldr	r3, [pc, #336]	; (833a8 <noOS_bootup_sequence+0x174>)
   83256:	601a      	str	r2, [r3, #0]
            
            if (blink_level)
   83258:	4b54      	ldr	r3, [pc, #336]	; (833ac <noOS_bootup_sequence+0x178>)
   8325a:	781b      	ldrb	r3, [r3, #0]
   8325c:	2b00      	cmp	r3, #0
   8325e:	d003      	beq.n	83268 <noOS_bootup_sequence+0x34>
            {
                blink_level = 0;
   83260:	4b52      	ldr	r3, [pc, #328]	; (833ac <noOS_bootup_sequence+0x178>)
   83262:	2200      	movs	r2, #0
   83264:	701a      	strb	r2, [r3, #0]
   83266:	e002      	b.n	8326e <noOS_bootup_sequence+0x3a>
            }
            else
            {
                blink_level = 1;
   83268:	4b50      	ldr	r3, [pc, #320]	; (833ac <noOS_bootup_sequence+0x178>)
   8326a:	2201      	movs	r2, #1
   8326c:	701a      	strb	r2, [r3, #0]
            }
            
            ioport_set_pin_level(LED_BAT, blink_level);
   8326e:	4b4f      	ldr	r3, [pc, #316]	; (833ac <noOS_bootup_sequence+0x178>)
   83270:	781b      	ldrb	r3, [r3, #0]
   83272:	2b00      	cmp	r3, #0
   83274:	bf14      	ite	ne
   83276:	2301      	movne	r3, #1
   83278:	2300      	moveq	r3, #0
   8327a:	b2db      	uxtb	r3, r3
   8327c:	4619      	mov	r1, r3
   8327e:	2066      	movs	r0, #102	; 0x66
   83280:	4b4b      	ldr	r3, [pc, #300]	; (833b0 <noOS_bootup_sequence+0x17c>)
   83282:	4798      	blx	r3
        }
        
        if (getTicks() >= (ticks_dot_update + 500))
   83284:	4b47      	ldr	r3, [pc, #284]	; (833a4 <noOS_bootup_sequence+0x170>)
   83286:	4798      	blx	r3
   83288:	4602      	mov	r2, r0
   8328a:	4b4a      	ldr	r3, [pc, #296]	; (833b4 <noOS_bootup_sequence+0x180>)
   8328c:	681b      	ldr	r3, [r3, #0]
   8328e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   83292:	429a      	cmp	r2, r3
   83294:	d315      	bcc.n	832c2 <noOS_bootup_sequence+0x8e>
        {
            ticks_dot_update = getTicks();
   83296:	4b43      	ldr	r3, [pc, #268]	; (833a4 <noOS_bootup_sequence+0x170>)
   83298:	4798      	blx	r3
   8329a:	4602      	mov	r2, r0
   8329c:	4b45      	ldr	r3, [pc, #276]	; (833b4 <noOS_bootup_sequence+0x180>)
   8329e:	601a      	str	r2, [r3, #0]
            
            if (dots < 3)
   832a0:	4b45      	ldr	r3, [pc, #276]	; (833b8 <noOS_bootup_sequence+0x184>)
   832a2:	781b      	ldrb	r3, [r3, #0]
   832a4:	2b02      	cmp	r3, #2
   832a6:	d806      	bhi.n	832b6 <noOS_bootup_sequence+0x82>
            {
                dots++;
   832a8:	4b43      	ldr	r3, [pc, #268]	; (833b8 <noOS_bootup_sequence+0x184>)
   832aa:	781b      	ldrb	r3, [r3, #0]
   832ac:	3301      	adds	r3, #1
   832ae:	b2da      	uxtb	r2, r3
   832b0:	4b41      	ldr	r3, [pc, #260]	; (833b8 <noOS_bootup_sequence+0x184>)
   832b2:	701a      	strb	r2, [r3, #0]
   832b4:	e002      	b.n	832bc <noOS_bootup_sequence+0x88>
            }
            else
            {
                dots = 0;
   832b6:	4b40      	ldr	r3, [pc, #256]	; (833b8 <noOS_bootup_sequence+0x184>)
   832b8:	2200      	movs	r2, #0
   832ba:	701a      	strb	r2, [r3, #0]
            }
            
            update_dots = 1;
   832bc:	4b3f      	ldr	r3, [pc, #252]	; (833bc <noOS_bootup_sequence+0x188>)
   832be:	2201      	movs	r2, #1
   832c0:	701a      	strb	r2, [r3, #0]
        }
        
        if (update_dots)
   832c2:	4b3e      	ldr	r3, [pc, #248]	; (833bc <noOS_bootup_sequence+0x188>)
   832c4:	781b      	ldrb	r3, [r3, #0]
   832c6:	2b00      	cmp	r3, #0
   832c8:	d02b      	beq.n	83322 <noOS_bootup_sequence+0xee>
        {
            update_dots = 0;
   832ca:	4b3c      	ldr	r3, [pc, #240]	; (833bc <noOS_bootup_sequence+0x188>)
   832cc:	2200      	movs	r2, #0
   832ce:	701a      	strb	r2, [r3, #0]
            
            switch (dots)
   832d0:	4b39      	ldr	r3, [pc, #228]	; (833b8 <noOS_bootup_sequence+0x184>)
   832d2:	781b      	ldrb	r3, [r3, #0]
   832d4:	2b03      	cmp	r3, #3
   832d6:	d823      	bhi.n	83320 <noOS_bootup_sequence+0xec>
   832d8:	a201      	add	r2, pc, #4	; (adr r2, 832e0 <noOS_bootup_sequence+0xac>)
   832da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   832de:	bf00      	nop
   832e0:	000832f1 	.word	0x000832f1
   832e4:	000832fd 	.word	0x000832fd
   832e8:	00083309 	.word	0x00083309
   832ec:	00083315 	.word	0x00083315
            {
                case 0:
                lcd_print_s(2, 2, "booting noOS   ");
   832f0:	4a33      	ldr	r2, [pc, #204]	; (833c0 <noOS_bootup_sequence+0x18c>)
   832f2:	2102      	movs	r1, #2
   832f4:	2002      	movs	r0, #2
   832f6:	4b33      	ldr	r3, [pc, #204]	; (833c4 <noOS_bootup_sequence+0x190>)
   832f8:	4798      	blx	r3
                break;
   832fa:	e012      	b.n	83322 <noOS_bootup_sequence+0xee>
                case 1:
                lcd_print_s(2, 14, ".");
   832fc:	4a32      	ldr	r2, [pc, #200]	; (833c8 <noOS_bootup_sequence+0x194>)
   832fe:	210e      	movs	r1, #14
   83300:	2002      	movs	r0, #2
   83302:	4b30      	ldr	r3, [pc, #192]	; (833c4 <noOS_bootup_sequence+0x190>)
   83304:	4798      	blx	r3
                break;
   83306:	e00c      	b.n	83322 <noOS_bootup_sequence+0xee>
                case 2:
                lcd_print_s(2, 15, ".");
   83308:	4a2f      	ldr	r2, [pc, #188]	; (833c8 <noOS_bootup_sequence+0x194>)
   8330a:	210f      	movs	r1, #15
   8330c:	2002      	movs	r0, #2
   8330e:	4b2d      	ldr	r3, [pc, #180]	; (833c4 <noOS_bootup_sequence+0x190>)
   83310:	4798      	blx	r3
                break;
   83312:	e006      	b.n	83322 <noOS_bootup_sequence+0xee>
                case 3:
                lcd_print_s(2, 16, ".");
   83314:	4a2c      	ldr	r2, [pc, #176]	; (833c8 <noOS_bootup_sequence+0x194>)
   83316:	2110      	movs	r1, #16
   83318:	2002      	movs	r0, #2
   8331a:	4b2a      	ldr	r3, [pc, #168]	; (833c4 <noOS_bootup_sequence+0x190>)
   8331c:	4798      	blx	r3
                break;
   8331e:	e000      	b.n	83322 <noOS_bootup_sequence+0xee>
                default:
                break;
   83320:	bf00      	nop
    while (ioport_get_pin_level(PB_MID))
   83322:	2062      	movs	r0, #98	; 0x62
   83324:	4b29      	ldr	r3, [pc, #164]	; (833cc <noOS_bootup_sequence+0x198>)
   83326:	4798      	blx	r3
   83328:	4603      	mov	r3, r0
   8332a:	2b00      	cmp	r3, #0
   8332c:	d186      	bne.n	8323c <noOS_bootup_sequence+0x8>
            }
        }
    }
    
    for(int i = 0; i< 3; i++)
   8332e:	2300      	movs	r3, #0
   83330:	607b      	str	r3, [r7, #4]
   83332:	e030      	b.n	83396 <noOS_bootup_sequence+0x162>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   83334:	2101      	movs	r1, #1
   83336:	206a      	movs	r0, #106	; 0x6a
   83338:	4b1d      	ldr	r3, [pc, #116]	; (833b0 <noOS_bootup_sequence+0x17c>)
   8333a:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 1);
   8333c:	2101      	movs	r1, #1
   8333e:	2066      	movs	r0, #102	; 0x66
   83340:	4b1b      	ldr	r3, [pc, #108]	; (833b0 <noOS_bootup_sequence+0x17c>)
   83342:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 1);
   83344:	2101      	movs	r1, #1
   83346:	2067      	movs	r0, #103	; 0x67
   83348:	4b19      	ldr	r3, [pc, #100]	; (833b0 <noOS_bootup_sequence+0x17c>)
   8334a:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 1);
   8334c:	2101      	movs	r1, #1
   8334e:	2068      	movs	r0, #104	; 0x68
   83350:	4b17      	ldr	r3, [pc, #92]	; (833b0 <noOS_bootup_sequence+0x17c>)
   83352:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 1);
   83354:	2101      	movs	r1, #1
   83356:	2069      	movs	r0, #105	; 0x69
   83358:	4b15      	ldr	r3, [pc, #84]	; (833b0 <noOS_bootup_sequence+0x17c>)
   8335a:	4798      	blx	r3
        mdelay(100);
   8335c:	2064      	movs	r0, #100	; 0x64
   8335e:	4b1c      	ldr	r3, [pc, #112]	; (833d0 <noOS_bootup_sequence+0x19c>)
   83360:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   83362:	2100      	movs	r1, #0
   83364:	206a      	movs	r0, #106	; 0x6a
   83366:	4b12      	ldr	r3, [pc, #72]	; (833b0 <noOS_bootup_sequence+0x17c>)
   83368:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   8336a:	2100      	movs	r1, #0
   8336c:	2066      	movs	r0, #102	; 0x66
   8336e:	4b10      	ldr	r3, [pc, #64]	; (833b0 <noOS_bootup_sequence+0x17c>)
   83370:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   83372:	2100      	movs	r1, #0
   83374:	2067      	movs	r0, #103	; 0x67
   83376:	4b0e      	ldr	r3, [pc, #56]	; (833b0 <noOS_bootup_sequence+0x17c>)
   83378:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   8337a:	2100      	movs	r1, #0
   8337c:	2068      	movs	r0, #104	; 0x68
   8337e:	4b0c      	ldr	r3, [pc, #48]	; (833b0 <noOS_bootup_sequence+0x17c>)
   83380:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   83382:	2100      	movs	r1, #0
   83384:	2069      	movs	r0, #105	; 0x69
   83386:	4b0a      	ldr	r3, [pc, #40]	; (833b0 <noOS_bootup_sequence+0x17c>)
   83388:	4798      	blx	r3
        mdelay(100);
   8338a:	2064      	movs	r0, #100	; 0x64
   8338c:	4b10      	ldr	r3, [pc, #64]	; (833d0 <noOS_bootup_sequence+0x19c>)
   8338e:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   83390:	687b      	ldr	r3, [r7, #4]
   83392:	3301      	adds	r3, #1
   83394:	607b      	str	r3, [r7, #4]
   83396:	687b      	ldr	r3, [r7, #4]
   83398:	2b02      	cmp	r3, #2
   8339a:	ddcb      	ble.n	83334 <noOS_bootup_sequence+0x100>
    }
}
   8339c:	bf00      	nop
   8339e:	3708      	adds	r7, #8
   833a0:	46bd      	mov	sp, r7
   833a2:	bd80      	pop	{r7, pc}
   833a4:	00081f09 	.word	0x00081f09
   833a8:	2007102c 	.word	0x2007102c
   833ac:	20071028 	.word	0x20071028
   833b0:	00083091 	.word	0x00083091
   833b4:	20071030 	.word	0x20071030
   833b8:	20070fad 	.word	0x20070fad
   833bc:	2007019c 	.word	0x2007019c
   833c0:	00087df8 	.word	0x00087df8
   833c4:	00080fd1 	.word	0x00080fd1
   833c8:	00087e08 	.word	0x00087e08
   833cc:	000830fb 	.word	0x000830fb
   833d0:	00081f1d 	.word	0x00081f1d

000833d4 <__libc_init_array>:
   833d4:	b570      	push	{r4, r5, r6, lr}
   833d6:	4e0f      	ldr	r6, [pc, #60]	; (83414 <__libc_init_array+0x40>)
   833d8:	4d0f      	ldr	r5, [pc, #60]	; (83418 <__libc_init_array+0x44>)
   833da:	1b76      	subs	r6, r6, r5
   833dc:	10b6      	asrs	r6, r6, #2
   833de:	bf18      	it	ne
   833e0:	2400      	movne	r4, #0
   833e2:	d005      	beq.n	833f0 <__libc_init_array+0x1c>
   833e4:	3401      	adds	r4, #1
   833e6:	f855 3b04 	ldr.w	r3, [r5], #4
   833ea:	4798      	blx	r3
   833ec:	42a6      	cmp	r6, r4
   833ee:	d1f9      	bne.n	833e4 <__libc_init_array+0x10>
   833f0:	4e0a      	ldr	r6, [pc, #40]	; (8341c <__libc_init_array+0x48>)
   833f2:	4d0b      	ldr	r5, [pc, #44]	; (83420 <__libc_init_array+0x4c>)
   833f4:	f004 fe50 	bl	88098 <_init>
   833f8:	1b76      	subs	r6, r6, r5
   833fa:	10b6      	asrs	r6, r6, #2
   833fc:	bf18      	it	ne
   833fe:	2400      	movne	r4, #0
   83400:	d006      	beq.n	83410 <__libc_init_array+0x3c>
   83402:	3401      	adds	r4, #1
   83404:	f855 3b04 	ldr.w	r3, [r5], #4
   83408:	4798      	blx	r3
   8340a:	42a6      	cmp	r6, r4
   8340c:	d1f9      	bne.n	83402 <__libc_init_array+0x2e>
   8340e:	bd70      	pop	{r4, r5, r6, pc}
   83410:	bd70      	pop	{r4, r5, r6, pc}
   83412:	bf00      	nop
   83414:	000880a4 	.word	0x000880a4
   83418:	000880a4 	.word	0x000880a4
   8341c:	000880ac 	.word	0x000880ac
   83420:	000880a4 	.word	0x000880a4

00083424 <memcpy>:
   83424:	4684      	mov	ip, r0
   83426:	ea41 0300 	orr.w	r3, r1, r0
   8342a:	f013 0303 	ands.w	r3, r3, #3
   8342e:	d149      	bne.n	834c4 <memcpy+0xa0>
   83430:	3a40      	subs	r2, #64	; 0x40
   83432:	d323      	bcc.n	8347c <memcpy+0x58>
   83434:	680b      	ldr	r3, [r1, #0]
   83436:	6003      	str	r3, [r0, #0]
   83438:	684b      	ldr	r3, [r1, #4]
   8343a:	6043      	str	r3, [r0, #4]
   8343c:	688b      	ldr	r3, [r1, #8]
   8343e:	6083      	str	r3, [r0, #8]
   83440:	68cb      	ldr	r3, [r1, #12]
   83442:	60c3      	str	r3, [r0, #12]
   83444:	690b      	ldr	r3, [r1, #16]
   83446:	6103      	str	r3, [r0, #16]
   83448:	694b      	ldr	r3, [r1, #20]
   8344a:	6143      	str	r3, [r0, #20]
   8344c:	698b      	ldr	r3, [r1, #24]
   8344e:	6183      	str	r3, [r0, #24]
   83450:	69cb      	ldr	r3, [r1, #28]
   83452:	61c3      	str	r3, [r0, #28]
   83454:	6a0b      	ldr	r3, [r1, #32]
   83456:	6203      	str	r3, [r0, #32]
   83458:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8345a:	6243      	str	r3, [r0, #36]	; 0x24
   8345c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8345e:	6283      	str	r3, [r0, #40]	; 0x28
   83460:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83462:	62c3      	str	r3, [r0, #44]	; 0x2c
   83464:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83466:	6303      	str	r3, [r0, #48]	; 0x30
   83468:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8346a:	6343      	str	r3, [r0, #52]	; 0x34
   8346c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8346e:	6383      	str	r3, [r0, #56]	; 0x38
   83470:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83472:	63c3      	str	r3, [r0, #60]	; 0x3c
   83474:	3040      	adds	r0, #64	; 0x40
   83476:	3140      	adds	r1, #64	; 0x40
   83478:	3a40      	subs	r2, #64	; 0x40
   8347a:	d2db      	bcs.n	83434 <memcpy+0x10>
   8347c:	3230      	adds	r2, #48	; 0x30
   8347e:	d30b      	bcc.n	83498 <memcpy+0x74>
   83480:	680b      	ldr	r3, [r1, #0]
   83482:	6003      	str	r3, [r0, #0]
   83484:	684b      	ldr	r3, [r1, #4]
   83486:	6043      	str	r3, [r0, #4]
   83488:	688b      	ldr	r3, [r1, #8]
   8348a:	6083      	str	r3, [r0, #8]
   8348c:	68cb      	ldr	r3, [r1, #12]
   8348e:	60c3      	str	r3, [r0, #12]
   83490:	3010      	adds	r0, #16
   83492:	3110      	adds	r1, #16
   83494:	3a10      	subs	r2, #16
   83496:	d2f3      	bcs.n	83480 <memcpy+0x5c>
   83498:	320c      	adds	r2, #12
   8349a:	d305      	bcc.n	834a8 <memcpy+0x84>
   8349c:	f851 3b04 	ldr.w	r3, [r1], #4
   834a0:	f840 3b04 	str.w	r3, [r0], #4
   834a4:	3a04      	subs	r2, #4
   834a6:	d2f9      	bcs.n	8349c <memcpy+0x78>
   834a8:	3204      	adds	r2, #4
   834aa:	d008      	beq.n	834be <memcpy+0x9a>
   834ac:	07d2      	lsls	r2, r2, #31
   834ae:	bf1c      	itt	ne
   834b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   834b4:	f800 3b01 	strbne.w	r3, [r0], #1
   834b8:	d301      	bcc.n	834be <memcpy+0x9a>
   834ba:	880b      	ldrh	r3, [r1, #0]
   834bc:	8003      	strh	r3, [r0, #0]
   834be:	4660      	mov	r0, ip
   834c0:	4770      	bx	lr
   834c2:	bf00      	nop
   834c4:	2a08      	cmp	r2, #8
   834c6:	d313      	bcc.n	834f0 <memcpy+0xcc>
   834c8:	078b      	lsls	r3, r1, #30
   834ca:	d0b1      	beq.n	83430 <memcpy+0xc>
   834cc:	f010 0303 	ands.w	r3, r0, #3
   834d0:	d0ae      	beq.n	83430 <memcpy+0xc>
   834d2:	f1c3 0304 	rsb	r3, r3, #4
   834d6:	1ad2      	subs	r2, r2, r3
   834d8:	07db      	lsls	r3, r3, #31
   834da:	bf1c      	itt	ne
   834dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   834e0:	f800 3b01 	strbne.w	r3, [r0], #1
   834e4:	d3a4      	bcc.n	83430 <memcpy+0xc>
   834e6:	f831 3b02 	ldrh.w	r3, [r1], #2
   834ea:	f820 3b02 	strh.w	r3, [r0], #2
   834ee:	e79f      	b.n	83430 <memcpy+0xc>
   834f0:	3a04      	subs	r2, #4
   834f2:	d3d9      	bcc.n	834a8 <memcpy+0x84>
   834f4:	3a01      	subs	r2, #1
   834f6:	f811 3b01 	ldrb.w	r3, [r1], #1
   834fa:	f800 3b01 	strb.w	r3, [r0], #1
   834fe:	d2f9      	bcs.n	834f4 <memcpy+0xd0>
   83500:	780b      	ldrb	r3, [r1, #0]
   83502:	7003      	strb	r3, [r0, #0]
   83504:	784b      	ldrb	r3, [r1, #1]
   83506:	7043      	strb	r3, [r0, #1]
   83508:	788b      	ldrb	r3, [r1, #2]
   8350a:	7083      	strb	r3, [r0, #2]
   8350c:	4660      	mov	r0, ip
   8350e:	4770      	bx	lr

00083510 <memset>:
   83510:	b470      	push	{r4, r5, r6}
   83512:	0786      	lsls	r6, r0, #30
   83514:	d046      	beq.n	835a4 <memset+0x94>
   83516:	1e54      	subs	r4, r2, #1
   83518:	2a00      	cmp	r2, #0
   8351a:	d041      	beq.n	835a0 <memset+0x90>
   8351c:	b2ca      	uxtb	r2, r1
   8351e:	4603      	mov	r3, r0
   83520:	e002      	b.n	83528 <memset+0x18>
   83522:	f114 34ff 	adds.w	r4, r4, #4294967295
   83526:	d33b      	bcc.n	835a0 <memset+0x90>
   83528:	f803 2b01 	strb.w	r2, [r3], #1
   8352c:	079d      	lsls	r5, r3, #30
   8352e:	d1f8      	bne.n	83522 <memset+0x12>
   83530:	2c03      	cmp	r4, #3
   83532:	d92e      	bls.n	83592 <memset+0x82>
   83534:	b2cd      	uxtb	r5, r1
   83536:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8353a:	2c0f      	cmp	r4, #15
   8353c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83540:	d919      	bls.n	83576 <memset+0x66>
   83542:	4626      	mov	r6, r4
   83544:	f103 0210 	add.w	r2, r3, #16
   83548:	3e10      	subs	r6, #16
   8354a:	2e0f      	cmp	r6, #15
   8354c:	f842 5c10 	str.w	r5, [r2, #-16]
   83550:	f842 5c0c 	str.w	r5, [r2, #-12]
   83554:	f842 5c08 	str.w	r5, [r2, #-8]
   83558:	f842 5c04 	str.w	r5, [r2, #-4]
   8355c:	f102 0210 	add.w	r2, r2, #16
   83560:	d8f2      	bhi.n	83548 <memset+0x38>
   83562:	f1a4 0210 	sub.w	r2, r4, #16
   83566:	f022 020f 	bic.w	r2, r2, #15
   8356a:	f004 040f 	and.w	r4, r4, #15
   8356e:	3210      	adds	r2, #16
   83570:	2c03      	cmp	r4, #3
   83572:	4413      	add	r3, r2
   83574:	d90d      	bls.n	83592 <memset+0x82>
   83576:	461e      	mov	r6, r3
   83578:	4622      	mov	r2, r4
   8357a:	3a04      	subs	r2, #4
   8357c:	2a03      	cmp	r2, #3
   8357e:	f846 5b04 	str.w	r5, [r6], #4
   83582:	d8fa      	bhi.n	8357a <memset+0x6a>
   83584:	1f22      	subs	r2, r4, #4
   83586:	f022 0203 	bic.w	r2, r2, #3
   8358a:	3204      	adds	r2, #4
   8358c:	4413      	add	r3, r2
   8358e:	f004 0403 	and.w	r4, r4, #3
   83592:	b12c      	cbz	r4, 835a0 <memset+0x90>
   83594:	b2c9      	uxtb	r1, r1
   83596:	441c      	add	r4, r3
   83598:	f803 1b01 	strb.w	r1, [r3], #1
   8359c:	429c      	cmp	r4, r3
   8359e:	d1fb      	bne.n	83598 <memset+0x88>
   835a0:	bc70      	pop	{r4, r5, r6}
   835a2:	4770      	bx	lr
   835a4:	4614      	mov	r4, r2
   835a6:	4603      	mov	r3, r0
   835a8:	e7c2      	b.n	83530 <memset+0x20>
   835aa:	bf00      	nop

000835ac <sprintf>:
   835ac:	b40e      	push	{r1, r2, r3}
   835ae:	4601      	mov	r1, r0
   835b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   835b2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   835b6:	f44f 7702 	mov.w	r7, #520	; 0x208
   835ba:	f64f 76ff 	movw	r6, #65535	; 0xffff
   835be:	b09c      	sub	sp, #112	; 0x70
   835c0:	ac21      	add	r4, sp, #132	; 0x84
   835c2:	f854 2b04 	ldr.w	r2, [r4], #4
   835c6:	4b0b      	ldr	r3, [pc, #44]	; (835f4 <sprintf+0x48>)
   835c8:	9102      	str	r1, [sp, #8]
   835ca:	9106      	str	r1, [sp, #24]
   835cc:	6818      	ldr	r0, [r3, #0]
   835ce:	a902      	add	r1, sp, #8
   835d0:	4623      	mov	r3, r4
   835d2:	9401      	str	r4, [sp, #4]
   835d4:	f8ad 7014 	strh.w	r7, [sp, #20]
   835d8:	9504      	str	r5, [sp, #16]
   835da:	9507      	str	r5, [sp, #28]
   835dc:	f8ad 6016 	strh.w	r6, [sp, #22]
   835e0:	f000 f838 	bl	83654 <_svfprintf_r>
   835e4:	2200      	movs	r2, #0
   835e6:	9b02      	ldr	r3, [sp, #8]
   835e8:	701a      	strb	r2, [r3, #0]
   835ea:	b01c      	add	sp, #112	; 0x70
   835ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   835f0:	b003      	add	sp, #12
   835f2:	4770      	bx	lr
   835f4:	200701a0 	.word	0x200701a0

000835f8 <strlen>:
   835f8:	f020 0103 	bic.w	r1, r0, #3
   835fc:	f010 0003 	ands.w	r0, r0, #3
   83600:	f1c0 0000 	rsb	r0, r0, #0
   83604:	f851 3b04 	ldr.w	r3, [r1], #4
   83608:	f100 0c04 	add.w	ip, r0, #4
   8360c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83610:	f06f 0200 	mvn.w	r2, #0
   83614:	bf1c      	itt	ne
   83616:	fa22 f20c 	lsrne.w	r2, r2, ip
   8361a:	4313      	orrne	r3, r2
   8361c:	f04f 0c01 	mov.w	ip, #1
   83620:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83624:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83628:	eba3 020c 	sub.w	r2, r3, ip
   8362c:	ea22 0203 	bic.w	r2, r2, r3
   83630:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83634:	bf04      	itt	eq
   83636:	f851 3b04 	ldreq.w	r3, [r1], #4
   8363a:	3004      	addeq	r0, #4
   8363c:	d0f4      	beq.n	83628 <strlen+0x30>
   8363e:	f1c2 0100 	rsb	r1, r2, #0
   83642:	ea02 0201 	and.w	r2, r2, r1
   83646:	fab2 f282 	clz	r2, r2
   8364a:	f1c2 021f 	rsb	r2, r2, #31
   8364e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83652:	4770      	bx	lr

00083654 <_svfprintf_r>:
   83654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83658:	b0c3      	sub	sp, #268	; 0x10c
   8365a:	460c      	mov	r4, r1
   8365c:	910b      	str	r1, [sp, #44]	; 0x2c
   8365e:	4692      	mov	sl, r2
   83660:	930f      	str	r3, [sp, #60]	; 0x3c
   83662:	900c      	str	r0, [sp, #48]	; 0x30
   83664:	f002 fa58 	bl	85b18 <_localeconv_r>
   83668:	6803      	ldr	r3, [r0, #0]
   8366a:	4618      	mov	r0, r3
   8366c:	931a      	str	r3, [sp, #104]	; 0x68
   8366e:	f7ff ffc3 	bl	835f8 <strlen>
   83672:	89a3      	ldrh	r3, [r4, #12]
   83674:	9019      	str	r0, [sp, #100]	; 0x64
   83676:	0619      	lsls	r1, r3, #24
   83678:	d503      	bpl.n	83682 <_svfprintf_r+0x2e>
   8367a:	6923      	ldr	r3, [r4, #16]
   8367c:	2b00      	cmp	r3, #0
   8367e:	f001 8035 	beq.w	846ec <_svfprintf_r+0x1098>
   83682:	2300      	movs	r3, #0
   83684:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   83688:	46c8      	mov	r8, r9
   8368a:	9315      	str	r3, [sp, #84]	; 0x54
   8368c:	9313      	str	r3, [sp, #76]	; 0x4c
   8368e:	9314      	str	r3, [sp, #80]	; 0x50
   83690:	9318      	str	r3, [sp, #96]	; 0x60
   83692:	931b      	str	r3, [sp, #108]	; 0x6c
   83694:	9309      	str	r3, [sp, #36]	; 0x24
   83696:	9316      	str	r3, [sp, #88]	; 0x58
   83698:	9317      	str	r3, [sp, #92]	; 0x5c
   8369a:	9327      	str	r3, [sp, #156]	; 0x9c
   8369c:	9326      	str	r3, [sp, #152]	; 0x98
   8369e:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   836a2:	f89a 3000 	ldrb.w	r3, [sl]
   836a6:	4654      	mov	r4, sl
   836a8:	b1eb      	cbz	r3, 836e6 <_svfprintf_r+0x92>
   836aa:	2b25      	cmp	r3, #37	; 0x25
   836ac:	d102      	bne.n	836b4 <_svfprintf_r+0x60>
   836ae:	e01a      	b.n	836e6 <_svfprintf_r+0x92>
   836b0:	2b25      	cmp	r3, #37	; 0x25
   836b2:	d003      	beq.n	836bc <_svfprintf_r+0x68>
   836b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   836b8:	2b00      	cmp	r3, #0
   836ba:	d1f9      	bne.n	836b0 <_svfprintf_r+0x5c>
   836bc:	eba4 050a 	sub.w	r5, r4, sl
   836c0:	b18d      	cbz	r5, 836e6 <_svfprintf_r+0x92>
   836c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   836c4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   836c6:	3301      	adds	r3, #1
   836c8:	442a      	add	r2, r5
   836ca:	2b07      	cmp	r3, #7
   836cc:	f8c8 a000 	str.w	sl, [r8]
   836d0:	f8c8 5004 	str.w	r5, [r8, #4]
   836d4:	9227      	str	r2, [sp, #156]	; 0x9c
   836d6:	9326      	str	r3, [sp, #152]	; 0x98
   836d8:	f300 808a 	bgt.w	837f0 <_svfprintf_r+0x19c>
   836dc:	f108 0808 	add.w	r8, r8, #8
   836e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   836e2:	442b      	add	r3, r5
   836e4:	9309      	str	r3, [sp, #36]	; 0x24
   836e6:	7823      	ldrb	r3, [r4, #0]
   836e8:	2b00      	cmp	r3, #0
   836ea:	f000 8089 	beq.w	83800 <_svfprintf_r+0x1ac>
   836ee:	2300      	movs	r3, #0
   836f0:	f04f 30ff 	mov.w	r0, #4294967295
   836f4:	461a      	mov	r2, r3
   836f6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   836fa:	4619      	mov	r1, r3
   836fc:	930d      	str	r3, [sp, #52]	; 0x34
   836fe:	469b      	mov	fp, r3
   83700:	7863      	ldrb	r3, [r4, #1]
   83702:	f104 0a01 	add.w	sl, r4, #1
   83706:	900a      	str	r0, [sp, #40]	; 0x28
   83708:	f10a 0a01 	add.w	sl, sl, #1
   8370c:	f1a3 0020 	sub.w	r0, r3, #32
   83710:	2858      	cmp	r0, #88	; 0x58
   83712:	f200 83b7 	bhi.w	83e84 <_svfprintf_r+0x830>
   83716:	e8df f010 	tbh	[pc, r0, lsl #1]
   8371a:	034c      	.short	0x034c
   8371c:	03b503b5 	.word	0x03b503b5
   83720:	03b50354 	.word	0x03b50354
   83724:	03b503b5 	.word	0x03b503b5
   83728:	03b503b5 	.word	0x03b503b5
   8372c:	005903b5 	.word	0x005903b5
   83730:	03b50359 	.word	0x03b50359
   83734:	02140066 	.word	0x02140066
   83738:	022f03b5 	.word	0x022f03b5
   8373c:	03a503a5 	.word	0x03a503a5
   83740:	03a503a5 	.word	0x03a503a5
   83744:	03a503a5 	.word	0x03a503a5
   83748:	03a503a5 	.word	0x03a503a5
   8374c:	03b503a5 	.word	0x03b503a5
   83750:	03b503b5 	.word	0x03b503b5
   83754:	03b503b5 	.word	0x03b503b5
   83758:	03b503b5 	.word	0x03b503b5
   8375c:	03b503b5 	.word	0x03b503b5
   83760:	028b03b5 	.word	0x028b03b5
   83764:	03b502d3 	.word	0x03b502d3
   83768:	03b502d3 	.word	0x03b502d3
   8376c:	03b503b5 	.word	0x03b503b5
   83770:	031b03b5 	.word	0x031b03b5
   83774:	03b503b5 	.word	0x03b503b5
   83778:	03b50320 	.word	0x03b50320
   8377c:	03b503b5 	.word	0x03b503b5
   83780:	03b503b5 	.word	0x03b503b5
   83784:	03b50234 	.word	0x03b50234
   83788:	024b03b5 	.word	0x024b03b5
   8378c:	03b503b5 	.word	0x03b503b5
   83790:	03b503b5 	.word	0x03b503b5
   83794:	03b503b5 	.word	0x03b503b5
   83798:	03b503b5 	.word	0x03b503b5
   8379c:	03b503b5 	.word	0x03b503b5
   837a0:	039e0276 	.word	0x039e0276
   837a4:	02d302d3 	.word	0x02d302d3
   837a8:	036302d3 	.word	0x036302d3
   837ac:	03b5039e 	.word	0x03b5039e
   837b0:	036803b5 	.word	0x036803b5
   837b4:	037503b5 	.word	0x037503b5
   837b8:	038c01dd 	.word	0x038c01dd
   837bc:	03b5035e 	.word	0x03b5035e
   837c0:	03b501f2 	.word	0x03b501f2
   837c4:	03b50087 	.word	0x03b50087
   837c8:	033203b5 	.word	0x033203b5
   837cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   837ce:	6823      	ldr	r3, [r4, #0]
   837d0:	4618      	mov	r0, r3
   837d2:	930d      	str	r3, [sp, #52]	; 0x34
   837d4:	4623      	mov	r3, r4
   837d6:	2800      	cmp	r0, #0
   837d8:	f103 0304 	add.w	r3, r3, #4
   837dc:	930f      	str	r3, [sp, #60]	; 0x3c
   837de:	da04      	bge.n	837ea <_svfprintf_r+0x196>
   837e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   837e2:	425b      	negs	r3, r3
   837e4:	930d      	str	r3, [sp, #52]	; 0x34
   837e6:	f04b 0b04 	orr.w	fp, fp, #4
   837ea:	f89a 3000 	ldrb.w	r3, [sl]
   837ee:	e78b      	b.n	83708 <_svfprintf_r+0xb4>
   837f0:	aa25      	add	r2, sp, #148	; 0x94
   837f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   837f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   837f6:	f002 ffa3 	bl	86740 <__ssprint_r>
   837fa:	b940      	cbnz	r0, 8380e <_svfprintf_r+0x1ba>
   837fc:	46c8      	mov	r8, r9
   837fe:	e76f      	b.n	836e0 <_svfprintf_r+0x8c>
   83800:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   83802:	b123      	cbz	r3, 8380e <_svfprintf_r+0x1ba>
   83804:	980c      	ldr	r0, [sp, #48]	; 0x30
   83806:	aa25      	add	r2, sp, #148	; 0x94
   83808:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8380a:	f002 ff99 	bl	86740 <__ssprint_r>
   8380e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83810:	899b      	ldrh	r3, [r3, #12]
   83812:	f013 0f40 	tst.w	r3, #64	; 0x40
   83816:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83818:	bf18      	it	ne
   8381a:	f04f 33ff 	movne.w	r3, #4294967295
   8381e:	9309      	str	r3, [sp, #36]	; 0x24
   83820:	9809      	ldr	r0, [sp, #36]	; 0x24
   83822:	b043      	add	sp, #268	; 0x10c
   83824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83828:	f01b 0f20 	tst.w	fp, #32
   8382c:	9311      	str	r3, [sp, #68]	; 0x44
   8382e:	f040 81af 	bne.w	83b90 <_svfprintf_r+0x53c>
   83832:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83834:	f01b 0f10 	tst.w	fp, #16
   83838:	4613      	mov	r3, r2
   8383a:	f040 859a 	bne.w	84372 <_svfprintf_r+0xd1e>
   8383e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   83842:	f000 8596 	beq.w	84372 <_svfprintf_r+0xd1e>
   83846:	2500      	movs	r5, #0
   83848:	2301      	movs	r3, #1
   8384a:	8814      	ldrh	r4, [r2, #0]
   8384c:	3204      	adds	r2, #4
   8384e:	920f      	str	r2, [sp, #60]	; 0x3c
   83850:	2200      	movs	r2, #0
   83852:	4617      	mov	r7, r2
   83854:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   83858:	990a      	ldr	r1, [sp, #40]	; 0x28
   8385a:	1c4a      	adds	r2, r1, #1
   8385c:	f000 8210 	beq.w	83c80 <_svfprintf_r+0x62c>
   83860:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   83864:	9207      	str	r2, [sp, #28]
   83866:	ea54 0205 	orrs.w	r2, r4, r5
   8386a:	f040 820f 	bne.w	83c8c <_svfprintf_r+0x638>
   8386e:	2900      	cmp	r1, #0
   83870:	f040 8431 	bne.w	840d6 <_svfprintf_r+0xa82>
   83874:	2b00      	cmp	r3, #0
   83876:	f040 8539 	bne.w	842ec <_svfprintf_r+0xc98>
   8387a:	f01b 0301 	ands.w	r3, fp, #1
   8387e:	930e      	str	r3, [sp, #56]	; 0x38
   83880:	f000 8662 	beq.w	84548 <_svfprintf_r+0xef4>
   83884:	2330      	movs	r3, #48	; 0x30
   83886:	ae42      	add	r6, sp, #264	; 0x108
   83888:	f806 3d41 	strb.w	r3, [r6, #-65]!
   8388c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8388e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83890:	4293      	cmp	r3, r2
   83892:	bfb8      	it	lt
   83894:	4613      	movlt	r3, r2
   83896:	9308      	str	r3, [sp, #32]
   83898:	2300      	movs	r3, #0
   8389a:	9312      	str	r3, [sp, #72]	; 0x48
   8389c:	b117      	cbz	r7, 838a4 <_svfprintf_r+0x250>
   8389e:	9b08      	ldr	r3, [sp, #32]
   838a0:	3301      	adds	r3, #1
   838a2:	9308      	str	r3, [sp, #32]
   838a4:	9b07      	ldr	r3, [sp, #28]
   838a6:	f013 0302 	ands.w	r3, r3, #2
   838aa:	9310      	str	r3, [sp, #64]	; 0x40
   838ac:	d002      	beq.n	838b4 <_svfprintf_r+0x260>
   838ae:	9b08      	ldr	r3, [sp, #32]
   838b0:	3302      	adds	r3, #2
   838b2:	9308      	str	r3, [sp, #32]
   838b4:	9b07      	ldr	r3, [sp, #28]
   838b6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   838ba:	f040 8310 	bne.w	83ede <_svfprintf_r+0x88a>
   838be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   838c0:	9a08      	ldr	r2, [sp, #32]
   838c2:	eba3 0b02 	sub.w	fp, r3, r2
   838c6:	f1bb 0f00 	cmp.w	fp, #0
   838ca:	f340 8308 	ble.w	83ede <_svfprintf_r+0x88a>
   838ce:	f1bb 0f10 	cmp.w	fp, #16
   838d2:	f340 87b2 	ble.w	8483a <_svfprintf_r+0x11e6>
   838d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   838d8:	4643      	mov	r3, r8
   838da:	4621      	mov	r1, r4
   838dc:	46a8      	mov	r8, r5
   838de:	2710      	movs	r7, #16
   838e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   838e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   838e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   838e6:	e006      	b.n	838f6 <_svfprintf_r+0x2a2>
   838e8:	f1ab 0b10 	sub.w	fp, fp, #16
   838ec:	f1bb 0f10 	cmp.w	fp, #16
   838f0:	f103 0308 	add.w	r3, r3, #8
   838f4:	dd18      	ble.n	83928 <_svfprintf_r+0x2d4>
   838f6:	3201      	adds	r2, #1
   838f8:	48ab      	ldr	r0, [pc, #684]	; (83ba8 <_svfprintf_r+0x554>)
   838fa:	3110      	adds	r1, #16
   838fc:	2a07      	cmp	r2, #7
   838fe:	9127      	str	r1, [sp, #156]	; 0x9c
   83900:	9226      	str	r2, [sp, #152]	; 0x98
   83902:	e883 0081 	stmia.w	r3, {r0, r7}
   83906:	ddef      	ble.n	838e8 <_svfprintf_r+0x294>
   83908:	aa25      	add	r2, sp, #148	; 0x94
   8390a:	4629      	mov	r1, r5
   8390c:	4620      	mov	r0, r4
   8390e:	f002 ff17 	bl	86740 <__ssprint_r>
   83912:	2800      	cmp	r0, #0
   83914:	f47f af7b 	bne.w	8380e <_svfprintf_r+0x1ba>
   83918:	f1ab 0b10 	sub.w	fp, fp, #16
   8391c:	f1bb 0f10 	cmp.w	fp, #16
   83920:	464b      	mov	r3, r9
   83922:	9927      	ldr	r1, [sp, #156]	; 0x9c
   83924:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83926:	dce6      	bgt.n	838f6 <_svfprintf_r+0x2a2>
   83928:	4645      	mov	r5, r8
   8392a:	460c      	mov	r4, r1
   8392c:	4698      	mov	r8, r3
   8392e:	3201      	adds	r2, #1
   83930:	4b9d      	ldr	r3, [pc, #628]	; (83ba8 <_svfprintf_r+0x554>)
   83932:	445c      	add	r4, fp
   83934:	2a07      	cmp	r2, #7
   83936:	9427      	str	r4, [sp, #156]	; 0x9c
   83938:	9226      	str	r2, [sp, #152]	; 0x98
   8393a:	e888 0808 	stmia.w	r8, {r3, fp}
   8393e:	f300 82c3 	bgt.w	83ec8 <_svfprintf_r+0x874>
   83942:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83946:	f108 0808 	add.w	r8, r8, #8
   8394a:	b187      	cbz	r7, 8396e <_svfprintf_r+0x31a>
   8394c:	2101      	movs	r1, #1
   8394e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83950:	440c      	add	r4, r1
   83952:	440b      	add	r3, r1
   83954:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   83958:	2b07      	cmp	r3, #7
   8395a:	9427      	str	r4, [sp, #156]	; 0x9c
   8395c:	9326      	str	r3, [sp, #152]	; 0x98
   8395e:	f8c8 1004 	str.w	r1, [r8, #4]
   83962:	f8c8 2000 	str.w	r2, [r8]
   83966:	f300 83cd 	bgt.w	84104 <_svfprintf_r+0xab0>
   8396a:	f108 0808 	add.w	r8, r8, #8
   8396e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83970:	b17b      	cbz	r3, 83992 <_svfprintf_r+0x33e>
   83972:	2102      	movs	r1, #2
   83974:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83976:	440c      	add	r4, r1
   83978:	3301      	adds	r3, #1
   8397a:	aa1e      	add	r2, sp, #120	; 0x78
   8397c:	2b07      	cmp	r3, #7
   8397e:	9427      	str	r4, [sp, #156]	; 0x9c
   83980:	9326      	str	r3, [sp, #152]	; 0x98
   83982:	f8c8 1004 	str.w	r1, [r8, #4]
   83986:	f8c8 2000 	str.w	r2, [r8]
   8398a:	f300 8411 	bgt.w	841b0 <_svfprintf_r+0xb5c>
   8398e:	f108 0808 	add.w	r8, r8, #8
   83992:	2d80      	cmp	r5, #128	; 0x80
   83994:	f000 8304 	beq.w	83fa0 <_svfprintf_r+0x94c>
   83998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8399a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8399c:	1a9f      	subs	r7, r3, r2
   8399e:	2f00      	cmp	r7, #0
   839a0:	dd37      	ble.n	83a12 <_svfprintf_r+0x3be>
   839a2:	2f10      	cmp	r7, #16
   839a4:	f340 8679 	ble.w	8469a <_svfprintf_r+0x1046>
   839a8:	4d80      	ldr	r5, [pc, #512]	; (83bac <_svfprintf_r+0x558>)
   839aa:	4642      	mov	r2, r8
   839ac:	4621      	mov	r1, r4
   839ae:	46b0      	mov	r8, r6
   839b0:	f04f 0b10 	mov.w	fp, #16
   839b4:	462e      	mov	r6, r5
   839b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   839b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   839ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   839bc:	e004      	b.n	839c8 <_svfprintf_r+0x374>
   839be:	3f10      	subs	r7, #16
   839c0:	2f10      	cmp	r7, #16
   839c2:	f102 0208 	add.w	r2, r2, #8
   839c6:	dd15      	ble.n	839f4 <_svfprintf_r+0x3a0>
   839c8:	3301      	adds	r3, #1
   839ca:	3110      	adds	r1, #16
   839cc:	2b07      	cmp	r3, #7
   839ce:	9127      	str	r1, [sp, #156]	; 0x9c
   839d0:	9326      	str	r3, [sp, #152]	; 0x98
   839d2:	e882 0840 	stmia.w	r2, {r6, fp}
   839d6:	ddf2      	ble.n	839be <_svfprintf_r+0x36a>
   839d8:	aa25      	add	r2, sp, #148	; 0x94
   839da:	4629      	mov	r1, r5
   839dc:	4620      	mov	r0, r4
   839de:	f002 feaf 	bl	86740 <__ssprint_r>
   839e2:	2800      	cmp	r0, #0
   839e4:	f47f af13 	bne.w	8380e <_svfprintf_r+0x1ba>
   839e8:	3f10      	subs	r7, #16
   839ea:	2f10      	cmp	r7, #16
   839ec:	464a      	mov	r2, r9
   839ee:	9927      	ldr	r1, [sp, #156]	; 0x9c
   839f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   839f2:	dce9      	bgt.n	839c8 <_svfprintf_r+0x374>
   839f4:	4635      	mov	r5, r6
   839f6:	460c      	mov	r4, r1
   839f8:	4646      	mov	r6, r8
   839fa:	4690      	mov	r8, r2
   839fc:	3301      	adds	r3, #1
   839fe:	443c      	add	r4, r7
   83a00:	2b07      	cmp	r3, #7
   83a02:	9427      	str	r4, [sp, #156]	; 0x9c
   83a04:	9326      	str	r3, [sp, #152]	; 0x98
   83a06:	e888 00a0 	stmia.w	r8, {r5, r7}
   83a0a:	f300 8370 	bgt.w	840ee <_svfprintf_r+0xa9a>
   83a0e:	f108 0808 	add.w	r8, r8, #8
   83a12:	9b07      	ldr	r3, [sp, #28]
   83a14:	05df      	lsls	r7, r3, #23
   83a16:	f100 8264 	bmi.w	83ee2 <_svfprintf_r+0x88e>
   83a1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83a1c:	990e      	ldr	r1, [sp, #56]	; 0x38
   83a1e:	3301      	adds	r3, #1
   83a20:	440c      	add	r4, r1
   83a22:	2b07      	cmp	r3, #7
   83a24:	9427      	str	r4, [sp, #156]	; 0x9c
   83a26:	f8c8 6000 	str.w	r6, [r8]
   83a2a:	f8c8 1004 	str.w	r1, [r8, #4]
   83a2e:	9326      	str	r3, [sp, #152]	; 0x98
   83a30:	f300 83b3 	bgt.w	8419a <_svfprintf_r+0xb46>
   83a34:	f108 0808 	add.w	r8, r8, #8
   83a38:	9b07      	ldr	r3, [sp, #28]
   83a3a:	075b      	lsls	r3, r3, #29
   83a3c:	d53b      	bpl.n	83ab6 <_svfprintf_r+0x462>
   83a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83a40:	9a08      	ldr	r2, [sp, #32]
   83a42:	1a9d      	subs	r5, r3, r2
   83a44:	2d00      	cmp	r5, #0
   83a46:	dd36      	ble.n	83ab6 <_svfprintf_r+0x462>
   83a48:	2d10      	cmp	r5, #16
   83a4a:	f340 8721 	ble.w	84890 <_svfprintf_r+0x123c>
   83a4e:	2610      	movs	r6, #16
   83a50:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83a52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   83a54:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   83a58:	e004      	b.n	83a64 <_svfprintf_r+0x410>
   83a5a:	3d10      	subs	r5, #16
   83a5c:	2d10      	cmp	r5, #16
   83a5e:	f108 0808 	add.w	r8, r8, #8
   83a62:	dd16      	ble.n	83a92 <_svfprintf_r+0x43e>
   83a64:	3301      	adds	r3, #1
   83a66:	4a50      	ldr	r2, [pc, #320]	; (83ba8 <_svfprintf_r+0x554>)
   83a68:	3410      	adds	r4, #16
   83a6a:	2b07      	cmp	r3, #7
   83a6c:	9427      	str	r4, [sp, #156]	; 0x9c
   83a6e:	9326      	str	r3, [sp, #152]	; 0x98
   83a70:	e888 0044 	stmia.w	r8, {r2, r6}
   83a74:	ddf1      	ble.n	83a5a <_svfprintf_r+0x406>
   83a76:	aa25      	add	r2, sp, #148	; 0x94
   83a78:	4659      	mov	r1, fp
   83a7a:	4638      	mov	r0, r7
   83a7c:	f002 fe60 	bl	86740 <__ssprint_r>
   83a80:	2800      	cmp	r0, #0
   83a82:	f47f aec4 	bne.w	8380e <_svfprintf_r+0x1ba>
   83a86:	3d10      	subs	r5, #16
   83a88:	2d10      	cmp	r5, #16
   83a8a:	46c8      	mov	r8, r9
   83a8c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83a8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83a90:	dce8      	bgt.n	83a64 <_svfprintf_r+0x410>
   83a92:	3301      	adds	r3, #1
   83a94:	4a44      	ldr	r2, [pc, #272]	; (83ba8 <_svfprintf_r+0x554>)
   83a96:	442c      	add	r4, r5
   83a98:	2b07      	cmp	r3, #7
   83a9a:	9427      	str	r4, [sp, #156]	; 0x9c
   83a9c:	9326      	str	r3, [sp, #152]	; 0x98
   83a9e:	e888 0024 	stmia.w	r8, {r2, r5}
   83aa2:	dd08      	ble.n	83ab6 <_svfprintf_r+0x462>
   83aa4:	aa25      	add	r2, sp, #148	; 0x94
   83aa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83aa8:	980c      	ldr	r0, [sp, #48]	; 0x30
   83aaa:	f002 fe49 	bl	86740 <__ssprint_r>
   83aae:	2800      	cmp	r0, #0
   83ab0:	f47f aead 	bne.w	8380e <_svfprintf_r+0x1ba>
   83ab4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83ab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   83aba:	9908      	ldr	r1, [sp, #32]
   83abc:	428a      	cmp	r2, r1
   83abe:	bfac      	ite	ge
   83ac0:	189b      	addge	r3, r3, r2
   83ac2:	185b      	addlt	r3, r3, r1
   83ac4:	9309      	str	r3, [sp, #36]	; 0x24
   83ac6:	2c00      	cmp	r4, #0
   83ac8:	f040 82fb 	bne.w	840c2 <_svfprintf_r+0xa6e>
   83acc:	2300      	movs	r3, #0
   83ace:	46c8      	mov	r8, r9
   83ad0:	9326      	str	r3, [sp, #152]	; 0x98
   83ad2:	e5e6      	b.n	836a2 <_svfprintf_r+0x4e>
   83ad4:	9311      	str	r3, [sp, #68]	; 0x44
   83ad6:	f01b 0320 	ands.w	r3, fp, #32
   83ada:	f040 8145 	bne.w	83d68 <_svfprintf_r+0x714>
   83ade:	f01b 0210 	ands.w	r2, fp, #16
   83ae2:	f040 8466 	bne.w	843b2 <_svfprintf_r+0xd5e>
   83ae6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   83aea:	f000 8462 	beq.w	843b2 <_svfprintf_r+0xd5e>
   83aee:	990f      	ldr	r1, [sp, #60]	; 0x3c
   83af0:	4613      	mov	r3, r2
   83af2:	460a      	mov	r2, r1
   83af4:	3204      	adds	r2, #4
   83af6:	880c      	ldrh	r4, [r1, #0]
   83af8:	2500      	movs	r5, #0
   83afa:	920f      	str	r2, [sp, #60]	; 0x3c
   83afc:	e6a8      	b.n	83850 <_svfprintf_r+0x1fc>
   83afe:	2500      	movs	r5, #0
   83b00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83b02:	9311      	str	r3, [sp, #68]	; 0x44
   83b04:	6816      	ldr	r6, [r2, #0]
   83b06:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   83b0a:	1d14      	adds	r4, r2, #4
   83b0c:	2e00      	cmp	r6, #0
   83b0e:	f000 86cd 	beq.w	848ac <_svfprintf_r+0x1258>
   83b12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83b14:	1c53      	adds	r3, r2, #1
   83b16:	f000 861b 	beq.w	84750 <_svfprintf_r+0x10fc>
   83b1a:	4629      	mov	r1, r5
   83b1c:	4630      	mov	r0, r6
   83b1e:	f002 faaf 	bl	86080 <memchr>
   83b22:	2800      	cmp	r0, #0
   83b24:	f000 870d 	beq.w	84942 <_svfprintf_r+0x12ee>
   83b28:	1b83      	subs	r3, r0, r6
   83b2a:	950a      	str	r5, [sp, #40]	; 0x28
   83b2c:	930e      	str	r3, [sp, #56]	; 0x38
   83b2e:	940f      	str	r4, [sp, #60]	; 0x3c
   83b30:	f8cd b01c 	str.w	fp, [sp, #28]
   83b34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   83b38:	9308      	str	r3, [sp, #32]
   83b3a:	9512      	str	r5, [sp, #72]	; 0x48
   83b3c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83b40:	e6ac      	b.n	8389c <_svfprintf_r+0x248>
   83b42:	f89a 3000 	ldrb.w	r3, [sl]
   83b46:	f10a 0401 	add.w	r4, sl, #1
   83b4a:	2b2a      	cmp	r3, #42	; 0x2a
   83b4c:	f000 87c2 	beq.w	84ad4 <_svfprintf_r+0x1480>
   83b50:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83b54:	2809      	cmp	r0, #9
   83b56:	46a2      	mov	sl, r4
   83b58:	f200 8718 	bhi.w	8498c <_svfprintf_r+0x1338>
   83b5c:	2300      	movs	r3, #0
   83b5e:	461c      	mov	r4, r3
   83b60:	f81a 3b01 	ldrb.w	r3, [sl], #1
   83b64:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   83b68:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   83b6c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83b70:	2809      	cmp	r0, #9
   83b72:	d9f5      	bls.n	83b60 <_svfprintf_r+0x50c>
   83b74:	940a      	str	r4, [sp, #40]	; 0x28
   83b76:	e5c9      	b.n	8370c <_svfprintf_r+0xb8>
   83b78:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   83b7c:	f89a 3000 	ldrb.w	r3, [sl]
   83b80:	e5c2      	b.n	83708 <_svfprintf_r+0xb4>
   83b82:	f04b 0b10 	orr.w	fp, fp, #16
   83b86:	f01b 0f20 	tst.w	fp, #32
   83b8a:	9311      	str	r3, [sp, #68]	; 0x44
   83b8c:	f43f ae51 	beq.w	83832 <_svfprintf_r+0x1de>
   83b90:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83b92:	3407      	adds	r4, #7
   83b94:	f024 0307 	bic.w	r3, r4, #7
   83b98:	f103 0208 	add.w	r2, r3, #8
   83b9c:	e9d3 4500 	ldrd	r4, r5, [r3]
   83ba0:	920f      	str	r2, [sp, #60]	; 0x3c
   83ba2:	2301      	movs	r3, #1
   83ba4:	e654      	b.n	83850 <_svfprintf_r+0x1fc>
   83ba6:	bf00      	nop
   83ba8:	00087e54 	.word	0x00087e54
   83bac:	00087e64 	.word	0x00087e64
   83bb0:	9311      	str	r3, [sp, #68]	; 0x44
   83bb2:	2a00      	cmp	r2, #0
   83bb4:	f040 87ad 	bne.w	84b12 <_svfprintf_r+0x14be>
   83bb8:	4bbe      	ldr	r3, [pc, #760]	; (83eb4 <_svfprintf_r+0x860>)
   83bba:	f01b 0f20 	tst.w	fp, #32
   83bbe:	9318      	str	r3, [sp, #96]	; 0x60
   83bc0:	f040 80e7 	bne.w	83d92 <_svfprintf_r+0x73e>
   83bc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83bc6:	f01b 0f10 	tst.w	fp, #16
   83bca:	4613      	mov	r3, r2
   83bcc:	f040 83d8 	bne.w	84380 <_svfprintf_r+0xd2c>
   83bd0:	f01b 0f40 	tst.w	fp, #64	; 0x40
   83bd4:	f000 83d4 	beq.w	84380 <_svfprintf_r+0xd2c>
   83bd8:	2500      	movs	r5, #0
   83bda:	3304      	adds	r3, #4
   83bdc:	8814      	ldrh	r4, [r2, #0]
   83bde:	930f      	str	r3, [sp, #60]	; 0x3c
   83be0:	f01b 0f01 	tst.w	fp, #1
   83be4:	f000 80e3 	beq.w	83dae <_svfprintf_r+0x75a>
   83be8:	ea54 0305 	orrs.w	r3, r4, r5
   83bec:	f000 80df 	beq.w	83dae <_svfprintf_r+0x75a>
   83bf0:	2330      	movs	r3, #48	; 0x30
   83bf2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   83bf6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   83bfa:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   83bfe:	f04b 0b02 	orr.w	fp, fp, #2
   83c02:	2302      	movs	r3, #2
   83c04:	e624      	b.n	83850 <_svfprintf_r+0x1fc>
   83c06:	2201      	movs	r2, #1
   83c08:	9311      	str	r3, [sp, #68]	; 0x44
   83c0a:	2300      	movs	r3, #0
   83c0c:	4611      	mov	r1, r2
   83c0e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   83c10:	9208      	str	r2, [sp, #32]
   83c12:	6802      	ldr	r2, [r0, #0]
   83c14:	461f      	mov	r7, r3
   83c16:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   83c1a:	930a      	str	r3, [sp, #40]	; 0x28
   83c1c:	9312      	str	r3, [sp, #72]	; 0x48
   83c1e:	1d03      	adds	r3, r0, #4
   83c20:	f8cd b01c 	str.w	fp, [sp, #28]
   83c24:	910e      	str	r1, [sp, #56]	; 0x38
   83c26:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   83c2a:	930f      	str	r3, [sp, #60]	; 0x3c
   83c2c:	ae28      	add	r6, sp, #160	; 0xa0
   83c2e:	e639      	b.n	838a4 <_svfprintf_r+0x250>
   83c30:	9311      	str	r3, [sp, #68]	; 0x44
   83c32:	2a00      	cmp	r2, #0
   83c34:	f040 8784 	bne.w	84b40 <_svfprintf_r+0x14ec>
   83c38:	f04b 0b10 	orr.w	fp, fp, #16
   83c3c:	f01b 0f20 	tst.w	fp, #32
   83c40:	f040 8475 	bne.w	8452e <_svfprintf_r+0xeda>
   83c44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83c46:	f01b 0f10 	tst.w	fp, #16
   83c4a:	4613      	mov	r3, r2
   83c4c:	f040 839d 	bne.w	8438a <_svfprintf_r+0xd36>
   83c50:	f01b 0f40 	tst.w	fp, #64	; 0x40
   83c54:	f000 8399 	beq.w	8438a <_svfprintf_r+0xd36>
   83c58:	f9b2 4000 	ldrsh.w	r4, [r2]
   83c5c:	3304      	adds	r3, #4
   83c5e:	17e5      	asrs	r5, r4, #31
   83c60:	930f      	str	r3, [sp, #60]	; 0x3c
   83c62:	4622      	mov	r2, r4
   83c64:	462b      	mov	r3, r5
   83c66:	2a00      	cmp	r2, #0
   83c68:	f173 0300 	sbcs.w	r3, r3, #0
   83c6c:	f2c0 8398 	blt.w	843a0 <_svfprintf_r+0xd4c>
   83c70:	990a      	ldr	r1, [sp, #40]	; 0x28
   83c72:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83c76:	1c4a      	adds	r2, r1, #1
   83c78:	f04f 0301 	mov.w	r3, #1
   83c7c:	f47f adf0 	bne.w	83860 <_svfprintf_r+0x20c>
   83c80:	ea54 0205 	orrs.w	r2, r4, r5
   83c84:	f000 8229 	beq.w	840da <_svfprintf_r+0xa86>
   83c88:	f8cd b01c 	str.w	fp, [sp, #28]
   83c8c:	2b01      	cmp	r3, #1
   83c8e:	f000 830e 	beq.w	842ae <_svfprintf_r+0xc5a>
   83c92:	2b02      	cmp	r3, #2
   83c94:	f040 829c 	bne.w	841d0 <_svfprintf_r+0xb7c>
   83c98:	464e      	mov	r6, r9
   83c9a:	9818      	ldr	r0, [sp, #96]	; 0x60
   83c9c:	0923      	lsrs	r3, r4, #4
   83c9e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   83ca2:	0929      	lsrs	r1, r5, #4
   83ca4:	f004 020f 	and.w	r2, r4, #15
   83ca8:	460d      	mov	r5, r1
   83caa:	461c      	mov	r4, r3
   83cac:	5c83      	ldrb	r3, [r0, r2]
   83cae:	f806 3d01 	strb.w	r3, [r6, #-1]!
   83cb2:	ea54 0305 	orrs.w	r3, r4, r5
   83cb6:	d1f1      	bne.n	83c9c <_svfprintf_r+0x648>
   83cb8:	eba9 0306 	sub.w	r3, r9, r6
   83cbc:	930e      	str	r3, [sp, #56]	; 0x38
   83cbe:	e5e5      	b.n	8388c <_svfprintf_r+0x238>
   83cc0:	9311      	str	r3, [sp, #68]	; 0x44
   83cc2:	2a00      	cmp	r2, #0
   83cc4:	f040 8738 	bne.w	84b38 <_svfprintf_r+0x14e4>
   83cc8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83cca:	f01b 0f08 	tst.w	fp, #8
   83cce:	f104 0407 	add.w	r4, r4, #7
   83cd2:	f000 84cf 	beq.w	84674 <_svfprintf_r+0x1020>
   83cd6:	f024 0307 	bic.w	r3, r4, #7
   83cda:	f103 0208 	add.w	r2, r3, #8
   83cde:	920f      	str	r2, [sp, #60]	; 0x3c
   83ce0:	681a      	ldr	r2, [r3, #0]
   83ce2:	685b      	ldr	r3, [r3, #4]
   83ce4:	9215      	str	r2, [sp, #84]	; 0x54
   83ce6:	9314      	str	r3, [sp, #80]	; 0x50
   83ce8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83cea:	9d15      	ldr	r5, [sp, #84]	; 0x54
   83cec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   83cf0:	4628      	mov	r0, r5
   83cf2:	4621      	mov	r1, r4
   83cf4:	f04f 32ff 	mov.w	r2, #4294967295
   83cf8:	4b6f      	ldr	r3, [pc, #444]	; (83eb8 <_svfprintf_r+0x864>)
   83cfa:	f003 fdf5 	bl	878e8 <__aeabi_dcmpun>
   83cfe:	2800      	cmp	r0, #0
   83d00:	f040 8434 	bne.w	8456c <_svfprintf_r+0xf18>
   83d04:	4628      	mov	r0, r5
   83d06:	4621      	mov	r1, r4
   83d08:	f04f 32ff 	mov.w	r2, #4294967295
   83d0c:	4b6a      	ldr	r3, [pc, #424]	; (83eb8 <_svfprintf_r+0x864>)
   83d0e:	f003 fdcd 	bl	878ac <__aeabi_dcmple>
   83d12:	2800      	cmp	r0, #0
   83d14:	f040 842a 	bne.w	8456c <_svfprintf_r+0xf18>
   83d18:	a815      	add	r0, sp, #84	; 0x54
   83d1a:	c80d      	ldmia	r0, {r0, r2, r3}
   83d1c:	9914      	ldr	r1, [sp, #80]	; 0x50
   83d1e:	f003 fdbb 	bl	87898 <__aeabi_dcmplt>
   83d22:	2800      	cmp	r0, #0
   83d24:	f040 85d4 	bne.w	848d0 <_svfprintf_r+0x127c>
   83d28:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83d2c:	2303      	movs	r3, #3
   83d2e:	461a      	mov	r2, r3
   83d30:	9308      	str	r3, [sp, #32]
   83d32:	2300      	movs	r3, #0
   83d34:	4e61      	ldr	r6, [pc, #388]	; (83ebc <_svfprintf_r+0x868>)
   83d36:	4619      	mov	r1, r3
   83d38:	930a      	str	r3, [sp, #40]	; 0x28
   83d3a:	4b61      	ldr	r3, [pc, #388]	; (83ec0 <_svfprintf_r+0x86c>)
   83d3c:	920e      	str	r2, [sp, #56]	; 0x38
   83d3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83d40:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   83d44:	9007      	str	r0, [sp, #28]
   83d46:	9112      	str	r1, [sp, #72]	; 0x48
   83d48:	2a47      	cmp	r2, #71	; 0x47
   83d4a:	bfd8      	it	le
   83d4c:	461e      	movle	r6, r3
   83d4e:	e5a5      	b.n	8389c <_svfprintf_r+0x248>
   83d50:	f04b 0b08 	orr.w	fp, fp, #8
   83d54:	f89a 3000 	ldrb.w	r3, [sl]
   83d58:	e4d6      	b.n	83708 <_svfprintf_r+0xb4>
   83d5a:	f04b 0b10 	orr.w	fp, fp, #16
   83d5e:	9311      	str	r3, [sp, #68]	; 0x44
   83d60:	f01b 0320 	ands.w	r3, fp, #32
   83d64:	f43f aebb 	beq.w	83ade <_svfprintf_r+0x48a>
   83d68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83d6a:	3407      	adds	r4, #7
   83d6c:	f024 0307 	bic.w	r3, r4, #7
   83d70:	f103 0208 	add.w	r2, r3, #8
   83d74:	e9d3 4500 	ldrd	r4, r5, [r3]
   83d78:	920f      	str	r2, [sp, #60]	; 0x3c
   83d7a:	2300      	movs	r3, #0
   83d7c:	e568      	b.n	83850 <_svfprintf_r+0x1fc>
   83d7e:	9311      	str	r3, [sp, #68]	; 0x44
   83d80:	2a00      	cmp	r2, #0
   83d82:	f040 86c2 	bne.w	84b0a <_svfprintf_r+0x14b6>
   83d86:	4b4f      	ldr	r3, [pc, #316]	; (83ec4 <_svfprintf_r+0x870>)
   83d88:	f01b 0f20 	tst.w	fp, #32
   83d8c:	9318      	str	r3, [sp, #96]	; 0x60
   83d8e:	f43f af19 	beq.w	83bc4 <_svfprintf_r+0x570>
   83d92:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83d94:	f01b 0f01 	tst.w	fp, #1
   83d98:	f104 0407 	add.w	r4, r4, #7
   83d9c:	f024 0307 	bic.w	r3, r4, #7
   83da0:	f103 0208 	add.w	r2, r3, #8
   83da4:	920f      	str	r2, [sp, #60]	; 0x3c
   83da6:	e9d3 4500 	ldrd	r4, r5, [r3]
   83daa:	f47f af1d 	bne.w	83be8 <_svfprintf_r+0x594>
   83dae:	2302      	movs	r3, #2
   83db0:	e54e      	b.n	83850 <_svfprintf_r+0x1fc>
   83db2:	f89a 3000 	ldrb.w	r3, [sl]
   83db6:	2900      	cmp	r1, #0
   83db8:	f47f aca6 	bne.w	83708 <_svfprintf_r+0xb4>
   83dbc:	2201      	movs	r2, #1
   83dbe:	2120      	movs	r1, #32
   83dc0:	e4a2      	b.n	83708 <_svfprintf_r+0xb4>
   83dc2:	f04b 0b01 	orr.w	fp, fp, #1
   83dc6:	f89a 3000 	ldrb.w	r3, [sl]
   83dca:	e49d      	b.n	83708 <_svfprintf_r+0xb4>
   83dcc:	f89a 3000 	ldrb.w	r3, [sl]
   83dd0:	2201      	movs	r2, #1
   83dd2:	212b      	movs	r1, #43	; 0x2b
   83dd4:	e498      	b.n	83708 <_svfprintf_r+0xb4>
   83dd6:	f04b 0b20 	orr.w	fp, fp, #32
   83dda:	f89a 3000 	ldrb.w	r3, [sl]
   83dde:	e493      	b.n	83708 <_svfprintf_r+0xb4>
   83de0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   83de4:	f89a 3000 	ldrb.w	r3, [sl]
   83de8:	e48e      	b.n	83708 <_svfprintf_r+0xb4>
   83dea:	f89a 3000 	ldrb.w	r3, [sl]
   83dee:	2b6c      	cmp	r3, #108	; 0x6c
   83df0:	bf03      	ittte	eq
   83df2:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   83df6:	f04b 0b20 	orreq.w	fp, fp, #32
   83dfa:	f10a 0a01 	addeq.w	sl, sl, #1
   83dfe:	f04b 0b10 	orrne.w	fp, fp, #16
   83e02:	e481      	b.n	83708 <_svfprintf_r+0xb4>
   83e04:	2a00      	cmp	r2, #0
   83e06:	f040 867c 	bne.w	84b02 <_svfprintf_r+0x14ae>
   83e0a:	f01b 0f20 	tst.w	fp, #32
   83e0e:	f040 8452 	bne.w	846b6 <_svfprintf_r+0x1062>
   83e12:	f01b 0f10 	tst.w	fp, #16
   83e16:	f040 8438 	bne.w	8468a <_svfprintf_r+0x1036>
   83e1a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   83e1e:	f000 8434 	beq.w	8468a <_svfprintf_r+0x1036>
   83e22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83e24:	6813      	ldr	r3, [r2, #0]
   83e26:	3204      	adds	r2, #4
   83e28:	920f      	str	r2, [sp, #60]	; 0x3c
   83e2a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   83e2e:	801a      	strh	r2, [r3, #0]
   83e30:	e437      	b.n	836a2 <_svfprintf_r+0x4e>
   83e32:	2378      	movs	r3, #120	; 0x78
   83e34:	2230      	movs	r2, #48	; 0x30
   83e36:	980f      	ldr	r0, [sp, #60]	; 0x3c
   83e38:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   83e3c:	9311      	str	r3, [sp, #68]	; 0x44
   83e3e:	1d03      	adds	r3, r0, #4
   83e40:	930f      	str	r3, [sp, #60]	; 0x3c
   83e42:	4b20      	ldr	r3, [pc, #128]	; (83ec4 <_svfprintf_r+0x870>)
   83e44:	6804      	ldr	r4, [r0, #0]
   83e46:	9318      	str	r3, [sp, #96]	; 0x60
   83e48:	f04b 0b02 	orr.w	fp, fp, #2
   83e4c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   83e50:	2500      	movs	r5, #0
   83e52:	2302      	movs	r3, #2
   83e54:	e4fc      	b.n	83850 <_svfprintf_r+0x1fc>
   83e56:	9311      	str	r3, [sp, #68]	; 0x44
   83e58:	2a00      	cmp	r2, #0
   83e5a:	f43f aeef 	beq.w	83c3c <_svfprintf_r+0x5e8>
   83e5e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83e62:	e6eb      	b.n	83c3c <_svfprintf_r+0x5e8>
   83e64:	2000      	movs	r0, #0
   83e66:	4604      	mov	r4, r0
   83e68:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83e6c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   83e70:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   83e74:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   83e78:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83e7c:	2809      	cmp	r0, #9
   83e7e:	d9f5      	bls.n	83e6c <_svfprintf_r+0x818>
   83e80:	940d      	str	r4, [sp, #52]	; 0x34
   83e82:	e443      	b.n	8370c <_svfprintf_r+0xb8>
   83e84:	9311      	str	r3, [sp, #68]	; 0x44
   83e86:	2a00      	cmp	r2, #0
   83e88:	f040 864a 	bne.w	84b20 <_svfprintf_r+0x14cc>
   83e8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83e8e:	2a00      	cmp	r2, #0
   83e90:	f43f acb6 	beq.w	83800 <_svfprintf_r+0x1ac>
   83e94:	2300      	movs	r3, #0
   83e96:	2101      	movs	r1, #1
   83e98:	461f      	mov	r7, r3
   83e9a:	9108      	str	r1, [sp, #32]
   83e9c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   83ea0:	f8cd b01c 	str.w	fp, [sp, #28]
   83ea4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   83ea8:	930a      	str	r3, [sp, #40]	; 0x28
   83eaa:	9312      	str	r3, [sp, #72]	; 0x48
   83eac:	910e      	str	r1, [sp, #56]	; 0x38
   83eae:	ae28      	add	r6, sp, #160	; 0xa0
   83eb0:	e4f8      	b.n	838a4 <_svfprintf_r+0x250>
   83eb2:	bf00      	nop
   83eb4:	00087e20 	.word	0x00087e20
   83eb8:	7fefffff 	.word	0x7fefffff
   83ebc:	00087e14 	.word	0x00087e14
   83ec0:	00087e10 	.word	0x00087e10
   83ec4:	00087e34 	.word	0x00087e34
   83ec8:	aa25      	add	r2, sp, #148	; 0x94
   83eca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83ecc:	980c      	ldr	r0, [sp, #48]	; 0x30
   83ece:	f002 fc37 	bl	86740 <__ssprint_r>
   83ed2:	2800      	cmp	r0, #0
   83ed4:	f47f ac9b 	bne.w	8380e <_svfprintf_r+0x1ba>
   83ed8:	46c8      	mov	r8, r9
   83eda:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83ede:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83ee0:	e533      	b.n	8394a <_svfprintf_r+0x2f6>
   83ee2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83ee4:	2b65      	cmp	r3, #101	; 0x65
   83ee6:	f340 809a 	ble.w	8401e <_svfprintf_r+0x9ca>
   83eea:	a815      	add	r0, sp, #84	; 0x54
   83eec:	c80d      	ldmia	r0, {r0, r2, r3}
   83eee:	9914      	ldr	r1, [sp, #80]	; 0x50
   83ef0:	f003 fcc8 	bl	87884 <__aeabi_dcmpeq>
   83ef4:	2800      	cmp	r0, #0
   83ef6:	f000 8193 	beq.w	84220 <_svfprintf_r+0xbcc>
   83efa:	2101      	movs	r1, #1
   83efc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83efe:	4ab5      	ldr	r2, [pc, #724]	; (841d4 <_svfprintf_r+0xb80>)
   83f00:	440b      	add	r3, r1
   83f02:	440c      	add	r4, r1
   83f04:	2b07      	cmp	r3, #7
   83f06:	9427      	str	r4, [sp, #156]	; 0x9c
   83f08:	9326      	str	r3, [sp, #152]	; 0x98
   83f0a:	f8c8 1004 	str.w	r1, [r8, #4]
   83f0e:	f8c8 2000 	str.w	r2, [r8]
   83f12:	f300 83c6 	bgt.w	846a2 <_svfprintf_r+0x104e>
   83f16:	f108 0808 	add.w	r8, r8, #8
   83f1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   83f1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   83f1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83f20:	4293      	cmp	r3, r2
   83f22:	db03      	blt.n	83f2c <_svfprintf_r+0x8d8>
   83f24:	9b07      	ldr	r3, [sp, #28]
   83f26:	07dd      	lsls	r5, r3, #31
   83f28:	f57f ad86 	bpl.w	83a38 <_svfprintf_r+0x3e4>
   83f2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83f2e:	9919      	ldr	r1, [sp, #100]	; 0x64
   83f30:	3301      	adds	r3, #1
   83f32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   83f34:	440c      	add	r4, r1
   83f36:	2b07      	cmp	r3, #7
   83f38:	f8c8 2000 	str.w	r2, [r8]
   83f3c:	f8c8 1004 	str.w	r1, [r8, #4]
   83f40:	9427      	str	r4, [sp, #156]	; 0x9c
   83f42:	9326      	str	r3, [sp, #152]	; 0x98
   83f44:	f300 83c4 	bgt.w	846d0 <_svfprintf_r+0x107c>
   83f48:	f108 0808 	add.w	r8, r8, #8
   83f4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83f4e:	1e5e      	subs	r6, r3, #1
   83f50:	2e00      	cmp	r6, #0
   83f52:	f77f ad71 	ble.w	83a38 <_svfprintf_r+0x3e4>
   83f56:	2e10      	cmp	r6, #16
   83f58:	f340 8575 	ble.w	84a46 <_svfprintf_r+0x13f2>
   83f5c:	4622      	mov	r2, r4
   83f5e:	2710      	movs	r7, #16
   83f60:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83f62:	4d9d      	ldr	r5, [pc, #628]	; (841d8 <_svfprintf_r+0xb84>)
   83f64:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   83f68:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   83f6a:	e005      	b.n	83f78 <_svfprintf_r+0x924>
   83f6c:	f108 0808 	add.w	r8, r8, #8
   83f70:	3e10      	subs	r6, #16
   83f72:	2e10      	cmp	r6, #16
   83f74:	f340 8225 	ble.w	843c2 <_svfprintf_r+0xd6e>
   83f78:	3301      	adds	r3, #1
   83f7a:	3210      	adds	r2, #16
   83f7c:	2b07      	cmp	r3, #7
   83f7e:	9227      	str	r2, [sp, #156]	; 0x9c
   83f80:	9326      	str	r3, [sp, #152]	; 0x98
   83f82:	e888 00a0 	stmia.w	r8, {r5, r7}
   83f86:	ddf1      	ble.n	83f6c <_svfprintf_r+0x918>
   83f88:	aa25      	add	r2, sp, #148	; 0x94
   83f8a:	4621      	mov	r1, r4
   83f8c:	4658      	mov	r0, fp
   83f8e:	f002 fbd7 	bl	86740 <__ssprint_r>
   83f92:	2800      	cmp	r0, #0
   83f94:	f47f ac3b 	bne.w	8380e <_svfprintf_r+0x1ba>
   83f98:	46c8      	mov	r8, r9
   83f9a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83f9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83f9e:	e7e7      	b.n	83f70 <_svfprintf_r+0x91c>
   83fa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83fa2:	9a08      	ldr	r2, [sp, #32]
   83fa4:	1a9f      	subs	r7, r3, r2
   83fa6:	2f00      	cmp	r7, #0
   83fa8:	f77f acf6 	ble.w	83998 <_svfprintf_r+0x344>
   83fac:	2f10      	cmp	r7, #16
   83fae:	f340 84a8 	ble.w	84902 <_svfprintf_r+0x12ae>
   83fb2:	4d89      	ldr	r5, [pc, #548]	; (841d8 <_svfprintf_r+0xb84>)
   83fb4:	4642      	mov	r2, r8
   83fb6:	4621      	mov	r1, r4
   83fb8:	46b0      	mov	r8, r6
   83fba:	f04f 0b10 	mov.w	fp, #16
   83fbe:	462e      	mov	r6, r5
   83fc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83fc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   83fc4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   83fc6:	e004      	b.n	83fd2 <_svfprintf_r+0x97e>
   83fc8:	3f10      	subs	r7, #16
   83fca:	2f10      	cmp	r7, #16
   83fcc:	f102 0208 	add.w	r2, r2, #8
   83fd0:	dd15      	ble.n	83ffe <_svfprintf_r+0x9aa>
   83fd2:	3301      	adds	r3, #1
   83fd4:	3110      	adds	r1, #16
   83fd6:	2b07      	cmp	r3, #7
   83fd8:	9127      	str	r1, [sp, #156]	; 0x9c
   83fda:	9326      	str	r3, [sp, #152]	; 0x98
   83fdc:	e882 0840 	stmia.w	r2, {r6, fp}
   83fe0:	ddf2      	ble.n	83fc8 <_svfprintf_r+0x974>
   83fe2:	aa25      	add	r2, sp, #148	; 0x94
   83fe4:	4629      	mov	r1, r5
   83fe6:	4620      	mov	r0, r4
   83fe8:	f002 fbaa 	bl	86740 <__ssprint_r>
   83fec:	2800      	cmp	r0, #0
   83fee:	f47f ac0e 	bne.w	8380e <_svfprintf_r+0x1ba>
   83ff2:	3f10      	subs	r7, #16
   83ff4:	2f10      	cmp	r7, #16
   83ff6:	464a      	mov	r2, r9
   83ff8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   83ffa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83ffc:	dce9      	bgt.n	83fd2 <_svfprintf_r+0x97e>
   83ffe:	4635      	mov	r5, r6
   84000:	460c      	mov	r4, r1
   84002:	4646      	mov	r6, r8
   84004:	4690      	mov	r8, r2
   84006:	3301      	adds	r3, #1
   84008:	443c      	add	r4, r7
   8400a:	2b07      	cmp	r3, #7
   8400c:	9427      	str	r4, [sp, #156]	; 0x9c
   8400e:	9326      	str	r3, [sp, #152]	; 0x98
   84010:	e888 00a0 	stmia.w	r8, {r5, r7}
   84014:	f300 829e 	bgt.w	84554 <_svfprintf_r+0xf00>
   84018:	f108 0808 	add.w	r8, r8, #8
   8401c:	e4bc      	b.n	83998 <_svfprintf_r+0x344>
   8401e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84020:	2b01      	cmp	r3, #1
   84022:	f340 824f 	ble.w	844c4 <_svfprintf_r+0xe70>
   84026:	2301      	movs	r3, #1
   84028:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8402a:	441c      	add	r4, r3
   8402c:	441f      	add	r7, r3
   8402e:	2f07      	cmp	r7, #7
   84030:	9427      	str	r4, [sp, #156]	; 0x9c
   84032:	f8c8 6000 	str.w	r6, [r8]
   84036:	9726      	str	r7, [sp, #152]	; 0x98
   84038:	f8c8 3004 	str.w	r3, [r8, #4]
   8403c:	f300 825f 	bgt.w	844fe <_svfprintf_r+0xeaa>
   84040:	f108 0808 	add.w	r8, r8, #8
   84044:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84046:	3701      	adds	r7, #1
   84048:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8404a:	4414      	add	r4, r2
   8404c:	2f07      	cmp	r7, #7
   8404e:	9427      	str	r4, [sp, #156]	; 0x9c
   84050:	9726      	str	r7, [sp, #152]	; 0x98
   84052:	f8c8 3000 	str.w	r3, [r8]
   84056:	f8c8 2004 	str.w	r2, [r8, #4]
   8405a:	f300 825c 	bgt.w	84516 <_svfprintf_r+0xec2>
   8405e:	f108 0808 	add.w	r8, r8, #8
   84062:	a815      	add	r0, sp, #84	; 0x54
   84064:	c80d      	ldmia	r0, {r0, r2, r3}
   84066:	9914      	ldr	r1, [sp, #80]	; 0x50
   84068:	f003 fc0c 	bl	87884 <__aeabi_dcmpeq>
   8406c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8406e:	2800      	cmp	r0, #0
   84070:	f040 8141 	bne.w	842f6 <_svfprintf_r+0xca2>
   84074:	3b01      	subs	r3, #1
   84076:	3701      	adds	r7, #1
   84078:	3601      	adds	r6, #1
   8407a:	441c      	add	r4, r3
   8407c:	2f07      	cmp	r7, #7
   8407e:	f8c8 6000 	str.w	r6, [r8]
   84082:	9726      	str	r7, [sp, #152]	; 0x98
   84084:	9427      	str	r4, [sp, #156]	; 0x9c
   84086:	f8c8 3004 	str.w	r3, [r8, #4]
   8408a:	f300 8166 	bgt.w	8435a <_svfprintf_r+0xd06>
   8408e:	f108 0808 	add.w	r8, r8, #8
   84092:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   84094:	3701      	adds	r7, #1
   84096:	4414      	add	r4, r2
   84098:	ab21      	add	r3, sp, #132	; 0x84
   8409a:	2f07      	cmp	r7, #7
   8409c:	9427      	str	r4, [sp, #156]	; 0x9c
   8409e:	9726      	str	r7, [sp, #152]	; 0x98
   840a0:	f8c8 2004 	str.w	r2, [r8, #4]
   840a4:	f8c8 3000 	str.w	r3, [r8]
   840a8:	f77f acc4 	ble.w	83a34 <_svfprintf_r+0x3e0>
   840ac:	aa25      	add	r2, sp, #148	; 0x94
   840ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   840b0:	980c      	ldr	r0, [sp, #48]	; 0x30
   840b2:	f002 fb45 	bl	86740 <__ssprint_r>
   840b6:	2800      	cmp	r0, #0
   840b8:	f47f aba9 	bne.w	8380e <_svfprintf_r+0x1ba>
   840bc:	46c8      	mov	r8, r9
   840be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   840c0:	e4ba      	b.n	83a38 <_svfprintf_r+0x3e4>
   840c2:	aa25      	add	r2, sp, #148	; 0x94
   840c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   840c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   840c8:	f002 fb3a 	bl	86740 <__ssprint_r>
   840cc:	2800      	cmp	r0, #0
   840ce:	f43f acfd 	beq.w	83acc <_svfprintf_r+0x478>
   840d2:	f7ff bb9c 	b.w	8380e <_svfprintf_r+0x1ba>
   840d6:	f8dd b01c 	ldr.w	fp, [sp, #28]
   840da:	2b01      	cmp	r3, #1
   840dc:	f000 817e 	beq.w	843dc <_svfprintf_r+0xd88>
   840e0:	2b02      	cmp	r3, #2
   840e2:	d171      	bne.n	841c8 <_svfprintf_r+0xb74>
   840e4:	f8cd b01c 	str.w	fp, [sp, #28]
   840e8:	2400      	movs	r4, #0
   840ea:	2500      	movs	r5, #0
   840ec:	e5d4      	b.n	83c98 <_svfprintf_r+0x644>
   840ee:	aa25      	add	r2, sp, #148	; 0x94
   840f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   840f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   840f4:	f002 fb24 	bl	86740 <__ssprint_r>
   840f8:	2800      	cmp	r0, #0
   840fa:	f47f ab88 	bne.w	8380e <_svfprintf_r+0x1ba>
   840fe:	46c8      	mov	r8, r9
   84100:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84102:	e486      	b.n	83a12 <_svfprintf_r+0x3be>
   84104:	aa25      	add	r2, sp, #148	; 0x94
   84106:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84108:	980c      	ldr	r0, [sp, #48]	; 0x30
   8410a:	f002 fb19 	bl	86740 <__ssprint_r>
   8410e:	2800      	cmp	r0, #0
   84110:	f47f ab7d 	bne.w	8380e <_svfprintf_r+0x1ba>
   84114:	46c8      	mov	r8, r9
   84116:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84118:	e429      	b.n	8396e <_svfprintf_r+0x31a>
   8411a:	2001      	movs	r0, #1
   8411c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8411e:	4a2d      	ldr	r2, [pc, #180]	; (841d4 <_svfprintf_r+0xb80>)
   84120:	4403      	add	r3, r0
   84122:	4404      	add	r4, r0
   84124:	2b07      	cmp	r3, #7
   84126:	9427      	str	r4, [sp, #156]	; 0x9c
   84128:	9326      	str	r3, [sp, #152]	; 0x98
   8412a:	f8c8 0004 	str.w	r0, [r8, #4]
   8412e:	f8c8 2000 	str.w	r2, [r8]
   84132:	f340 82d8 	ble.w	846e6 <_svfprintf_r+0x1092>
   84136:	aa25      	add	r2, sp, #148	; 0x94
   84138:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8413a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8413c:	f002 fb00 	bl	86740 <__ssprint_r>
   84140:	2800      	cmp	r0, #0
   84142:	f47f ab64 	bne.w	8380e <_svfprintf_r+0x1ba>
   84146:	46c8      	mov	r8, r9
   84148:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8414a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8414c:	b929      	cbnz	r1, 8415a <_svfprintf_r+0xb06>
   8414e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84150:	b91b      	cbnz	r3, 8415a <_svfprintf_r+0xb06>
   84152:	9b07      	ldr	r3, [sp, #28]
   84154:	07d8      	lsls	r0, r3, #31
   84156:	f57f ac6f 	bpl.w	83a38 <_svfprintf_r+0x3e4>
   8415a:	9819      	ldr	r0, [sp, #100]	; 0x64
   8415c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8415e:	4602      	mov	r2, r0
   84160:	3301      	adds	r3, #1
   84162:	4422      	add	r2, r4
   84164:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   84166:	2b07      	cmp	r3, #7
   84168:	9227      	str	r2, [sp, #156]	; 0x9c
   8416a:	f8c8 4000 	str.w	r4, [r8]
   8416e:	f8c8 0004 	str.w	r0, [r8, #4]
   84172:	9326      	str	r3, [sp, #152]	; 0x98
   84174:	f300 8431 	bgt.w	849da <_svfprintf_r+0x1386>
   84178:	f108 0808 	add.w	r8, r8, #8
   8417c:	2900      	cmp	r1, #0
   8417e:	f2c0 8409 	blt.w	84994 <_svfprintf_r+0x1340>
   84182:	9913      	ldr	r1, [sp, #76]	; 0x4c
   84184:	3301      	adds	r3, #1
   84186:	188c      	adds	r4, r1, r2
   84188:	2b07      	cmp	r3, #7
   8418a:	9427      	str	r4, [sp, #156]	; 0x9c
   8418c:	9326      	str	r3, [sp, #152]	; 0x98
   8418e:	f8c8 6000 	str.w	r6, [r8]
   84192:	f8c8 1004 	str.w	r1, [r8, #4]
   84196:	f77f ac4d 	ble.w	83a34 <_svfprintf_r+0x3e0>
   8419a:	aa25      	add	r2, sp, #148	; 0x94
   8419c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8419e:	980c      	ldr	r0, [sp, #48]	; 0x30
   841a0:	f002 face 	bl	86740 <__ssprint_r>
   841a4:	2800      	cmp	r0, #0
   841a6:	f47f ab32 	bne.w	8380e <_svfprintf_r+0x1ba>
   841aa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   841ac:	46c8      	mov	r8, r9
   841ae:	e443      	b.n	83a38 <_svfprintf_r+0x3e4>
   841b0:	aa25      	add	r2, sp, #148	; 0x94
   841b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   841b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   841b6:	f002 fac3 	bl	86740 <__ssprint_r>
   841ba:	2800      	cmp	r0, #0
   841bc:	f47f ab27 	bne.w	8380e <_svfprintf_r+0x1ba>
   841c0:	46c8      	mov	r8, r9
   841c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   841c4:	f7ff bbe5 	b.w	83992 <_svfprintf_r+0x33e>
   841c8:	2400      	movs	r4, #0
   841ca:	2500      	movs	r5, #0
   841cc:	f8cd b01c 	str.w	fp, [sp, #28]
   841d0:	4649      	mov	r1, r9
   841d2:	e004      	b.n	841de <_svfprintf_r+0xb8a>
   841d4:	00087e50 	.word	0x00087e50
   841d8:	00087e64 	.word	0x00087e64
   841dc:	4631      	mov	r1, r6
   841de:	08e2      	lsrs	r2, r4, #3
   841e0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   841e4:	08e8      	lsrs	r0, r5, #3
   841e6:	f004 0307 	and.w	r3, r4, #7
   841ea:	4605      	mov	r5, r0
   841ec:	4614      	mov	r4, r2
   841ee:	3330      	adds	r3, #48	; 0x30
   841f0:	ea54 0205 	orrs.w	r2, r4, r5
   841f4:	f801 3c01 	strb.w	r3, [r1, #-1]
   841f8:	f101 36ff 	add.w	r6, r1, #4294967295
   841fc:	d1ee      	bne.n	841dc <_svfprintf_r+0xb88>
   841fe:	9a07      	ldr	r2, [sp, #28]
   84200:	07d2      	lsls	r2, r2, #31
   84202:	f57f ad59 	bpl.w	83cb8 <_svfprintf_r+0x664>
   84206:	2b30      	cmp	r3, #48	; 0x30
   84208:	f43f ad56 	beq.w	83cb8 <_svfprintf_r+0x664>
   8420c:	2330      	movs	r3, #48	; 0x30
   8420e:	3902      	subs	r1, #2
   84210:	f806 3c01 	strb.w	r3, [r6, #-1]
   84214:	eba9 0301 	sub.w	r3, r9, r1
   84218:	930e      	str	r3, [sp, #56]	; 0x38
   8421a:	460e      	mov	r6, r1
   8421c:	f7ff bb36 	b.w	8388c <_svfprintf_r+0x238>
   84220:	991f      	ldr	r1, [sp, #124]	; 0x7c
   84222:	2900      	cmp	r1, #0
   84224:	f77f af79 	ble.w	8411a <_svfprintf_r+0xac6>
   84228:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8422a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8422c:	4293      	cmp	r3, r2
   8422e:	bfa8      	it	ge
   84230:	4613      	movge	r3, r2
   84232:	2b00      	cmp	r3, #0
   84234:	461f      	mov	r7, r3
   84236:	dd0b      	ble.n	84250 <_svfprintf_r+0xbfc>
   84238:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8423a:	443c      	add	r4, r7
   8423c:	3301      	adds	r3, #1
   8423e:	2b07      	cmp	r3, #7
   84240:	9427      	str	r4, [sp, #156]	; 0x9c
   84242:	e888 00c0 	stmia.w	r8, {r6, r7}
   84246:	9326      	str	r3, [sp, #152]	; 0x98
   84248:	f300 82fb 	bgt.w	84842 <_svfprintf_r+0x11ee>
   8424c:	f108 0808 	add.w	r8, r8, #8
   84250:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84252:	2f00      	cmp	r7, #0
   84254:	bfa8      	it	ge
   84256:	1bdb      	subge	r3, r3, r7
   84258:	2b00      	cmp	r3, #0
   8425a:	461f      	mov	r7, r3
   8425c:	f340 80d7 	ble.w	8440e <_svfprintf_r+0xdba>
   84260:	2b10      	cmp	r3, #16
   84262:	f340 8434 	ble.w	84ace <_svfprintf_r+0x147a>
   84266:	4dba      	ldr	r5, [pc, #744]	; (84550 <_svfprintf_r+0xefc>)
   84268:	4642      	mov	r2, r8
   8426a:	4621      	mov	r1, r4
   8426c:	46b0      	mov	r8, r6
   8426e:	f04f 0b10 	mov.w	fp, #16
   84272:	462e      	mov	r6, r5
   84274:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84276:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84278:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8427a:	e004      	b.n	84286 <_svfprintf_r+0xc32>
   8427c:	3208      	adds	r2, #8
   8427e:	3f10      	subs	r7, #16
   84280:	2f10      	cmp	r7, #16
   84282:	f340 80b5 	ble.w	843f0 <_svfprintf_r+0xd9c>
   84286:	3301      	adds	r3, #1
   84288:	3110      	adds	r1, #16
   8428a:	2b07      	cmp	r3, #7
   8428c:	9127      	str	r1, [sp, #156]	; 0x9c
   8428e:	9326      	str	r3, [sp, #152]	; 0x98
   84290:	e882 0840 	stmia.w	r2, {r6, fp}
   84294:	ddf2      	ble.n	8427c <_svfprintf_r+0xc28>
   84296:	aa25      	add	r2, sp, #148	; 0x94
   84298:	4629      	mov	r1, r5
   8429a:	4620      	mov	r0, r4
   8429c:	f002 fa50 	bl	86740 <__ssprint_r>
   842a0:	2800      	cmp	r0, #0
   842a2:	f47f aab4 	bne.w	8380e <_svfprintf_r+0x1ba>
   842a6:	464a      	mov	r2, r9
   842a8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   842aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   842ac:	e7e7      	b.n	8427e <_svfprintf_r+0xc2a>
   842ae:	2d00      	cmp	r5, #0
   842b0:	bf08      	it	eq
   842b2:	2c0a      	cmpeq	r4, #10
   842b4:	f0c0 8090 	bcc.w	843d8 <_svfprintf_r+0xd84>
   842b8:	464e      	mov	r6, r9
   842ba:	4620      	mov	r0, r4
   842bc:	4629      	mov	r1, r5
   842be:	220a      	movs	r2, #10
   842c0:	2300      	movs	r3, #0
   842c2:	f003 fb4f 	bl	87964 <__aeabi_uldivmod>
   842c6:	3230      	adds	r2, #48	; 0x30
   842c8:	f806 2d01 	strb.w	r2, [r6, #-1]!
   842cc:	4620      	mov	r0, r4
   842ce:	4629      	mov	r1, r5
   842d0:	2300      	movs	r3, #0
   842d2:	220a      	movs	r2, #10
   842d4:	f003 fb46 	bl	87964 <__aeabi_uldivmod>
   842d8:	4604      	mov	r4, r0
   842da:	460d      	mov	r5, r1
   842dc:	ea54 0305 	orrs.w	r3, r4, r5
   842e0:	d1eb      	bne.n	842ba <_svfprintf_r+0xc66>
   842e2:	eba9 0306 	sub.w	r3, r9, r6
   842e6:	930e      	str	r3, [sp, #56]	; 0x38
   842e8:	f7ff bad0 	b.w	8388c <_svfprintf_r+0x238>
   842ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   842ee:	464e      	mov	r6, r9
   842f0:	930e      	str	r3, [sp, #56]	; 0x38
   842f2:	f7ff bacb 	b.w	8388c <_svfprintf_r+0x238>
   842f6:	1e5e      	subs	r6, r3, #1
   842f8:	2e00      	cmp	r6, #0
   842fa:	f77f aeca 	ble.w	84092 <_svfprintf_r+0xa3e>
   842fe:	2e10      	cmp	r6, #16
   84300:	f340 83e3 	ble.w	84aca <_svfprintf_r+0x1476>
   84304:	4622      	mov	r2, r4
   84306:	f04f 0b10 	mov.w	fp, #16
   8430a:	4d91      	ldr	r5, [pc, #580]	; (84550 <_svfprintf_r+0xefc>)
   8430c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8430e:	e004      	b.n	8431a <_svfprintf_r+0xcc6>
   84310:	3e10      	subs	r6, #16
   84312:	2e10      	cmp	r6, #16
   84314:	f108 0808 	add.w	r8, r8, #8
   84318:	dd15      	ble.n	84346 <_svfprintf_r+0xcf2>
   8431a:	3701      	adds	r7, #1
   8431c:	3210      	adds	r2, #16
   8431e:	2f07      	cmp	r7, #7
   84320:	9227      	str	r2, [sp, #156]	; 0x9c
   84322:	9726      	str	r7, [sp, #152]	; 0x98
   84324:	e888 0820 	stmia.w	r8, {r5, fp}
   84328:	ddf2      	ble.n	84310 <_svfprintf_r+0xcbc>
   8432a:	aa25      	add	r2, sp, #148	; 0x94
   8432c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8432e:	4620      	mov	r0, r4
   84330:	f002 fa06 	bl	86740 <__ssprint_r>
   84334:	2800      	cmp	r0, #0
   84336:	f47f aa6a 	bne.w	8380e <_svfprintf_r+0x1ba>
   8433a:	3e10      	subs	r6, #16
   8433c:	2e10      	cmp	r6, #16
   8433e:	46c8      	mov	r8, r9
   84340:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84342:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84344:	dce9      	bgt.n	8431a <_svfprintf_r+0xcc6>
   84346:	4614      	mov	r4, r2
   84348:	3701      	adds	r7, #1
   8434a:	4434      	add	r4, r6
   8434c:	2f07      	cmp	r7, #7
   8434e:	9427      	str	r4, [sp, #156]	; 0x9c
   84350:	9726      	str	r7, [sp, #152]	; 0x98
   84352:	e888 0060 	stmia.w	r8, {r5, r6}
   84356:	f77f ae9a 	ble.w	8408e <_svfprintf_r+0xa3a>
   8435a:	aa25      	add	r2, sp, #148	; 0x94
   8435c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8435e:	980c      	ldr	r0, [sp, #48]	; 0x30
   84360:	f002 f9ee 	bl	86740 <__ssprint_r>
   84364:	2800      	cmp	r0, #0
   84366:	f47f aa52 	bne.w	8380e <_svfprintf_r+0x1ba>
   8436a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8436c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8436e:	46c8      	mov	r8, r9
   84370:	e68f      	b.n	84092 <_svfprintf_r+0xa3e>
   84372:	3204      	adds	r2, #4
   84374:	681c      	ldr	r4, [r3, #0]
   84376:	2500      	movs	r5, #0
   84378:	2301      	movs	r3, #1
   8437a:	920f      	str	r2, [sp, #60]	; 0x3c
   8437c:	f7ff ba68 	b.w	83850 <_svfprintf_r+0x1fc>
   84380:	681c      	ldr	r4, [r3, #0]
   84382:	3304      	adds	r3, #4
   84384:	930f      	str	r3, [sp, #60]	; 0x3c
   84386:	2500      	movs	r5, #0
   84388:	e42a      	b.n	83be0 <_svfprintf_r+0x58c>
   8438a:	681c      	ldr	r4, [r3, #0]
   8438c:	3304      	adds	r3, #4
   8438e:	17e5      	asrs	r5, r4, #31
   84390:	4622      	mov	r2, r4
   84392:	930f      	str	r3, [sp, #60]	; 0x3c
   84394:	462b      	mov	r3, r5
   84396:	2a00      	cmp	r2, #0
   84398:	f173 0300 	sbcs.w	r3, r3, #0
   8439c:	f6bf ac68 	bge.w	83c70 <_svfprintf_r+0x61c>
   843a0:	272d      	movs	r7, #45	; 0x2d
   843a2:	4264      	negs	r4, r4
   843a4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   843a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   843ac:	2301      	movs	r3, #1
   843ae:	f7ff ba53 	b.w	83858 <_svfprintf_r+0x204>
   843b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   843b4:	2500      	movs	r5, #0
   843b6:	460a      	mov	r2, r1
   843b8:	3204      	adds	r2, #4
   843ba:	680c      	ldr	r4, [r1, #0]
   843bc:	920f      	str	r2, [sp, #60]	; 0x3c
   843be:	f7ff ba47 	b.w	83850 <_svfprintf_r+0x1fc>
   843c2:	4614      	mov	r4, r2
   843c4:	3301      	adds	r3, #1
   843c6:	4434      	add	r4, r6
   843c8:	2b07      	cmp	r3, #7
   843ca:	9427      	str	r4, [sp, #156]	; 0x9c
   843cc:	9326      	str	r3, [sp, #152]	; 0x98
   843ce:	e888 0060 	stmia.w	r8, {r5, r6}
   843d2:	f77f ab2f 	ble.w	83a34 <_svfprintf_r+0x3e0>
   843d6:	e6e0      	b.n	8419a <_svfprintf_r+0xb46>
   843d8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   843dc:	2301      	movs	r3, #1
   843de:	ae42      	add	r6, sp, #264	; 0x108
   843e0:	3430      	adds	r4, #48	; 0x30
   843e2:	f8cd b01c 	str.w	fp, [sp, #28]
   843e6:	f806 4d41 	strb.w	r4, [r6, #-65]!
   843ea:	930e      	str	r3, [sp, #56]	; 0x38
   843ec:	f7ff ba4e 	b.w	8388c <_svfprintf_r+0x238>
   843f0:	4635      	mov	r5, r6
   843f2:	460c      	mov	r4, r1
   843f4:	4646      	mov	r6, r8
   843f6:	4690      	mov	r8, r2
   843f8:	3301      	adds	r3, #1
   843fa:	443c      	add	r4, r7
   843fc:	2b07      	cmp	r3, #7
   843fe:	9427      	str	r4, [sp, #156]	; 0x9c
   84400:	9326      	str	r3, [sp, #152]	; 0x98
   84402:	e888 00a0 	stmia.w	r8, {r5, r7}
   84406:	f300 8246 	bgt.w	84896 <_svfprintf_r+0x1242>
   8440a:	f108 0808 	add.w	r8, r8, #8
   8440e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84410:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84412:	429a      	cmp	r2, r3
   84414:	db45      	blt.n	844a2 <_svfprintf_r+0xe4e>
   84416:	9b07      	ldr	r3, [sp, #28]
   84418:	07d9      	lsls	r1, r3, #31
   8441a:	d442      	bmi.n	844a2 <_svfprintf_r+0xe4e>
   8441c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8441e:	9812      	ldr	r0, [sp, #72]	; 0x48
   84420:	1a9a      	subs	r2, r3, r2
   84422:	1a1d      	subs	r5, r3, r0
   84424:	4295      	cmp	r5, r2
   84426:	bfa8      	it	ge
   84428:	4615      	movge	r5, r2
   8442a:	2d00      	cmp	r5, #0
   8442c:	dd0e      	ble.n	8444c <_svfprintf_r+0xdf8>
   8442e:	9926      	ldr	r1, [sp, #152]	; 0x98
   84430:	4406      	add	r6, r0
   84432:	3101      	adds	r1, #1
   84434:	442c      	add	r4, r5
   84436:	2907      	cmp	r1, #7
   84438:	f8c8 6000 	str.w	r6, [r8]
   8443c:	9427      	str	r4, [sp, #156]	; 0x9c
   8443e:	f8c8 5004 	str.w	r5, [r8, #4]
   84442:	9126      	str	r1, [sp, #152]	; 0x98
   84444:	f300 8216 	bgt.w	84874 <_svfprintf_r+0x1220>
   84448:	f108 0808 	add.w	r8, r8, #8
   8444c:	2d00      	cmp	r5, #0
   8444e:	bfb4      	ite	lt
   84450:	4616      	movlt	r6, r2
   84452:	1b56      	subge	r6, r2, r5
   84454:	2e00      	cmp	r6, #0
   84456:	f77f aaef 	ble.w	83a38 <_svfprintf_r+0x3e4>
   8445a:	2e10      	cmp	r6, #16
   8445c:	f340 82f3 	ble.w	84a46 <_svfprintf_r+0x13f2>
   84460:	4622      	mov	r2, r4
   84462:	2710      	movs	r7, #16
   84464:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84466:	4d3a      	ldr	r5, [pc, #232]	; (84550 <_svfprintf_r+0xefc>)
   84468:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8446c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8446e:	e004      	b.n	8447a <_svfprintf_r+0xe26>
   84470:	f108 0808 	add.w	r8, r8, #8
   84474:	3e10      	subs	r6, #16
   84476:	2e10      	cmp	r6, #16
   84478:	dda3      	ble.n	843c2 <_svfprintf_r+0xd6e>
   8447a:	3301      	adds	r3, #1
   8447c:	3210      	adds	r2, #16
   8447e:	2b07      	cmp	r3, #7
   84480:	9227      	str	r2, [sp, #156]	; 0x9c
   84482:	9326      	str	r3, [sp, #152]	; 0x98
   84484:	e888 00a0 	stmia.w	r8, {r5, r7}
   84488:	ddf2      	ble.n	84470 <_svfprintf_r+0xe1c>
   8448a:	aa25      	add	r2, sp, #148	; 0x94
   8448c:	4621      	mov	r1, r4
   8448e:	4658      	mov	r0, fp
   84490:	f002 f956 	bl	86740 <__ssprint_r>
   84494:	2800      	cmp	r0, #0
   84496:	f47f a9ba 	bne.w	8380e <_svfprintf_r+0x1ba>
   8449a:	46c8      	mov	r8, r9
   8449c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8449e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   844a0:	e7e8      	b.n	84474 <_svfprintf_r+0xe20>
   844a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   844a4:	9819      	ldr	r0, [sp, #100]	; 0x64
   844a6:	3301      	adds	r3, #1
   844a8:	991a      	ldr	r1, [sp, #104]	; 0x68
   844aa:	4404      	add	r4, r0
   844ac:	2b07      	cmp	r3, #7
   844ae:	9427      	str	r4, [sp, #156]	; 0x9c
   844b0:	f8c8 1000 	str.w	r1, [r8]
   844b4:	f8c8 0004 	str.w	r0, [r8, #4]
   844b8:	9326      	str	r3, [sp, #152]	; 0x98
   844ba:	f300 81cf 	bgt.w	8485c <_svfprintf_r+0x1208>
   844be:	f108 0808 	add.w	r8, r8, #8
   844c2:	e7ab      	b.n	8441c <_svfprintf_r+0xdc8>
   844c4:	9b07      	ldr	r3, [sp, #28]
   844c6:	07da      	lsls	r2, r3, #31
   844c8:	f53f adad 	bmi.w	84026 <_svfprintf_r+0x9d2>
   844cc:	2301      	movs	r3, #1
   844ce:	9f26      	ldr	r7, [sp, #152]	; 0x98
   844d0:	441c      	add	r4, r3
   844d2:	441f      	add	r7, r3
   844d4:	2f07      	cmp	r7, #7
   844d6:	9427      	str	r4, [sp, #156]	; 0x9c
   844d8:	f8c8 6000 	str.w	r6, [r8]
   844dc:	9726      	str	r7, [sp, #152]	; 0x98
   844de:	f8c8 3004 	str.w	r3, [r8, #4]
   844e2:	f77f add4 	ble.w	8408e <_svfprintf_r+0xa3a>
   844e6:	aa25      	add	r2, sp, #148	; 0x94
   844e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   844ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   844ec:	f002 f928 	bl	86740 <__ssprint_r>
   844f0:	2800      	cmp	r0, #0
   844f2:	f47f a98c 	bne.w	8380e <_svfprintf_r+0x1ba>
   844f6:	46c8      	mov	r8, r9
   844f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   844fa:	9f26      	ldr	r7, [sp, #152]	; 0x98
   844fc:	e5c9      	b.n	84092 <_svfprintf_r+0xa3e>
   844fe:	aa25      	add	r2, sp, #148	; 0x94
   84500:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84502:	980c      	ldr	r0, [sp, #48]	; 0x30
   84504:	f002 f91c 	bl	86740 <__ssprint_r>
   84508:	2800      	cmp	r0, #0
   8450a:	f47f a980 	bne.w	8380e <_svfprintf_r+0x1ba>
   8450e:	46c8      	mov	r8, r9
   84510:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84512:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84514:	e596      	b.n	84044 <_svfprintf_r+0x9f0>
   84516:	aa25      	add	r2, sp, #148	; 0x94
   84518:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8451a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8451c:	f002 f910 	bl	86740 <__ssprint_r>
   84520:	2800      	cmp	r0, #0
   84522:	f47f a974 	bne.w	8380e <_svfprintf_r+0x1ba>
   84526:	46c8      	mov	r8, r9
   84528:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8452a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8452c:	e599      	b.n	84062 <_svfprintf_r+0xa0e>
   8452e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84530:	3407      	adds	r4, #7
   84532:	f024 0407 	bic.w	r4, r4, #7
   84536:	f104 0108 	add.w	r1, r4, #8
   8453a:	e9d4 2300 	ldrd	r2, r3, [r4]
   8453e:	910f      	str	r1, [sp, #60]	; 0x3c
   84540:	4614      	mov	r4, r2
   84542:	461d      	mov	r5, r3
   84544:	f7ff bb8f 	b.w	83c66 <_svfprintf_r+0x612>
   84548:	464e      	mov	r6, r9
   8454a:	f7ff b99f 	b.w	8388c <_svfprintf_r+0x238>
   8454e:	bf00      	nop
   84550:	00087e64 	.word	0x00087e64
   84554:	aa25      	add	r2, sp, #148	; 0x94
   84556:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84558:	980c      	ldr	r0, [sp, #48]	; 0x30
   8455a:	f002 f8f1 	bl	86740 <__ssprint_r>
   8455e:	2800      	cmp	r0, #0
   84560:	f47f a955 	bne.w	8380e <_svfprintf_r+0x1ba>
   84564:	46c8      	mov	r8, r9
   84566:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84568:	f7ff ba16 	b.w	83998 <_svfprintf_r+0x344>
   8456c:	9c15      	ldr	r4, [sp, #84]	; 0x54
   8456e:	4622      	mov	r2, r4
   84570:	4620      	mov	r0, r4
   84572:	9c14      	ldr	r4, [sp, #80]	; 0x50
   84574:	4623      	mov	r3, r4
   84576:	4621      	mov	r1, r4
   84578:	f003 f9b6 	bl	878e8 <__aeabi_dcmpun>
   8457c:	2800      	cmp	r0, #0
   8457e:	f040 8273 	bne.w	84a68 <_svfprintf_r+0x1414>
   84582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84584:	3301      	adds	r3, #1
   84586:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84588:	f023 0320 	bic.w	r3, r3, #32
   8458c:	930e      	str	r3, [sp, #56]	; 0x38
   8458e:	f000 819c 	beq.w	848ca <_svfprintf_r+0x1276>
   84592:	2b47      	cmp	r3, #71	; 0x47
   84594:	f000 80d6 	beq.w	84744 <_svfprintf_r+0x10f0>
   84598:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   8459c:	9307      	str	r3, [sp, #28]
   8459e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   845a0:	1e1f      	subs	r7, r3, #0
   845a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   845a4:	9308      	str	r3, [sp, #32]
   845a6:	bfb7      	itett	lt
   845a8:	463b      	movlt	r3, r7
   845aa:	2300      	movge	r3, #0
   845ac:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   845b0:	232d      	movlt	r3, #45	; 0x2d
   845b2:	9310      	str	r3, [sp, #64]	; 0x40
   845b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   845b6:	2b66      	cmp	r3, #102	; 0x66
   845b8:	f000 8190 	beq.w	848dc <_svfprintf_r+0x1288>
   845bc:	2b46      	cmp	r3, #70	; 0x46
   845be:	f000 80a4 	beq.w	8470a <_svfprintf_r+0x10b6>
   845c2:	2002      	movs	r0, #2
   845c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   845c6:	a923      	add	r1, sp, #140	; 0x8c
   845c8:	2b45      	cmp	r3, #69	; 0x45
   845ca:	bf0a      	itet	eq
   845cc:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   845ce:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   845d0:	1c5d      	addeq	r5, r3, #1
   845d2:	e88d 0021 	stmia.w	sp, {r0, r5}
   845d6:	9104      	str	r1, [sp, #16]
   845d8:	a820      	add	r0, sp, #128	; 0x80
   845da:	a91f      	add	r1, sp, #124	; 0x7c
   845dc:	463b      	mov	r3, r7
   845de:	9003      	str	r0, [sp, #12]
   845e0:	9a08      	ldr	r2, [sp, #32]
   845e2:	9102      	str	r1, [sp, #8]
   845e4:	980c      	ldr	r0, [sp, #48]	; 0x30
   845e6:	f000 fb5b 	bl	84ca0 <_dtoa_r>
   845ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   845ec:	4606      	mov	r6, r0
   845ee:	2b67      	cmp	r3, #103	; 0x67
   845f0:	f040 81ba 	bne.w	84968 <_svfprintf_r+0x1314>
   845f4:	f01b 0f01 	tst.w	fp, #1
   845f8:	f000 8223 	beq.w	84a42 <_svfprintf_r+0x13ee>
   845fc:	1974      	adds	r4, r6, r5
   845fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
   84600:	9808      	ldr	r0, [sp, #32]
   84602:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   84604:	4639      	mov	r1, r7
   84606:	f003 f93d 	bl	87884 <__aeabi_dcmpeq>
   8460a:	2800      	cmp	r0, #0
   8460c:	f040 8124 	bne.w	84858 <_svfprintf_r+0x1204>
   84610:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   84612:	42a3      	cmp	r3, r4
   84614:	d206      	bcs.n	84624 <_svfprintf_r+0xfd0>
   84616:	2130      	movs	r1, #48	; 0x30
   84618:	1c5a      	adds	r2, r3, #1
   8461a:	9223      	str	r2, [sp, #140]	; 0x8c
   8461c:	7019      	strb	r1, [r3, #0]
   8461e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   84620:	429c      	cmp	r4, r3
   84622:	d8f9      	bhi.n	84618 <_svfprintf_r+0xfc4>
   84624:	1b9b      	subs	r3, r3, r6
   84626:	9313      	str	r3, [sp, #76]	; 0x4c
   84628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8462a:	2b47      	cmp	r3, #71	; 0x47
   8462c:	f000 80a2 	beq.w	84774 <_svfprintf_r+0x1120>
   84630:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84632:	2b65      	cmp	r3, #101	; 0x65
   84634:	f340 81a7 	ble.w	84986 <_svfprintf_r+0x1332>
   84638:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8463a:	2b66      	cmp	r3, #102	; 0x66
   8463c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8463e:	9312      	str	r3, [sp, #72]	; 0x48
   84640:	f000 8171 	beq.w	84926 <_svfprintf_r+0x12d2>
   84644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84646:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84648:	4619      	mov	r1, r3
   8464a:	4291      	cmp	r1, r2
   8464c:	f300 815d 	bgt.w	8490a <_svfprintf_r+0x12b6>
   84650:	f01b 0f01 	tst.w	fp, #1
   84654:	f040 81f0 	bne.w	84a38 <_svfprintf_r+0x13e4>
   84658:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8465c:	9308      	str	r3, [sp, #32]
   8465e:	2367      	movs	r3, #103	; 0x67
   84660:	920e      	str	r2, [sp, #56]	; 0x38
   84662:	9311      	str	r3, [sp, #68]	; 0x44
   84664:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84666:	2b00      	cmp	r3, #0
   84668:	d17d      	bne.n	84766 <_svfprintf_r+0x1112>
   8466a:	930a      	str	r3, [sp, #40]	; 0x28
   8466c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84670:	f7ff b914 	b.w	8389c <_svfprintf_r+0x248>
   84674:	f024 0407 	bic.w	r4, r4, #7
   84678:	6823      	ldr	r3, [r4, #0]
   8467a:	9315      	str	r3, [sp, #84]	; 0x54
   8467c:	6863      	ldr	r3, [r4, #4]
   8467e:	9314      	str	r3, [sp, #80]	; 0x50
   84680:	f104 0308 	add.w	r3, r4, #8
   84684:	930f      	str	r3, [sp, #60]	; 0x3c
   84686:	f7ff bb2f 	b.w	83ce8 <_svfprintf_r+0x694>
   8468a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8468c:	6813      	ldr	r3, [r2, #0]
   8468e:	3204      	adds	r2, #4
   84690:	920f      	str	r2, [sp, #60]	; 0x3c
   84692:	9a09      	ldr	r2, [sp, #36]	; 0x24
   84694:	601a      	str	r2, [r3, #0]
   84696:	f7ff b804 	b.w	836a2 <_svfprintf_r+0x4e>
   8469a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8469c:	4daf      	ldr	r5, [pc, #700]	; (8495c <_svfprintf_r+0x1308>)
   8469e:	f7ff b9ad 	b.w	839fc <_svfprintf_r+0x3a8>
   846a2:	aa25      	add	r2, sp, #148	; 0x94
   846a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   846a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   846a8:	f002 f84a 	bl	86740 <__ssprint_r>
   846ac:	2800      	cmp	r0, #0
   846ae:	f47f a8ae 	bne.w	8380e <_svfprintf_r+0x1ba>
   846b2:	46c8      	mov	r8, r9
   846b4:	e431      	b.n	83f1a <_svfprintf_r+0x8c6>
   846b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   846b8:	4613      	mov	r3, r2
   846ba:	3304      	adds	r3, #4
   846bc:	930f      	str	r3, [sp, #60]	; 0x3c
   846be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   846c0:	6811      	ldr	r1, [r2, #0]
   846c2:	17dd      	asrs	r5, r3, #31
   846c4:	461a      	mov	r2, r3
   846c6:	462b      	mov	r3, r5
   846c8:	e9c1 2300 	strd	r2, r3, [r1]
   846cc:	f7fe bfe9 	b.w	836a2 <_svfprintf_r+0x4e>
   846d0:	aa25      	add	r2, sp, #148	; 0x94
   846d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   846d4:	980c      	ldr	r0, [sp, #48]	; 0x30
   846d6:	f002 f833 	bl	86740 <__ssprint_r>
   846da:	2800      	cmp	r0, #0
   846dc:	f47f a897 	bne.w	8380e <_svfprintf_r+0x1ba>
   846e0:	46c8      	mov	r8, r9
   846e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   846e4:	e432      	b.n	83f4c <_svfprintf_r+0x8f8>
   846e6:	f108 0808 	add.w	r8, r8, #8
   846ea:	e52f      	b.n	8414c <_svfprintf_r+0xaf8>
   846ec:	2140      	movs	r1, #64	; 0x40
   846ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   846f0:	f001 fa24 	bl	85b3c <_malloc_r>
   846f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   846f6:	6010      	str	r0, [r2, #0]
   846f8:	6110      	str	r0, [r2, #16]
   846fa:	2800      	cmp	r0, #0
   846fc:	f000 8214 	beq.w	84b28 <_svfprintf_r+0x14d4>
   84700:	2340      	movs	r3, #64	; 0x40
   84702:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   84704:	6153      	str	r3, [r2, #20]
   84706:	f7fe bfbc 	b.w	83682 <_svfprintf_r+0x2e>
   8470a:	2003      	movs	r0, #3
   8470c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8470e:	a923      	add	r1, sp, #140	; 0x8c
   84710:	e88d 0011 	stmia.w	sp, {r0, r4}
   84714:	9104      	str	r1, [sp, #16]
   84716:	a820      	add	r0, sp, #128	; 0x80
   84718:	a91f      	add	r1, sp, #124	; 0x7c
   8471a:	9003      	str	r0, [sp, #12]
   8471c:	9a08      	ldr	r2, [sp, #32]
   8471e:	463b      	mov	r3, r7
   84720:	9102      	str	r1, [sp, #8]
   84722:	980c      	ldr	r0, [sp, #48]	; 0x30
   84724:	f000 fabc 	bl	84ca0 <_dtoa_r>
   84728:	4625      	mov	r5, r4
   8472a:	4606      	mov	r6, r0
   8472c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8472e:	1974      	adds	r4, r6, r5
   84730:	2b46      	cmp	r3, #70	; 0x46
   84732:	f47f af64 	bne.w	845fe <_svfprintf_r+0xfaa>
   84736:	7833      	ldrb	r3, [r6, #0]
   84738:	2b30      	cmp	r3, #48	; 0x30
   8473a:	f000 8187 	beq.w	84a4c <_svfprintf_r+0x13f8>
   8473e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   84740:	442c      	add	r4, r5
   84742:	e75c      	b.n	845fe <_svfprintf_r+0xfaa>
   84744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84746:	2b00      	cmp	r3, #0
   84748:	bf08      	it	eq
   8474a:	2301      	moveq	r3, #1
   8474c:	930a      	str	r3, [sp, #40]	; 0x28
   8474e:	e723      	b.n	84598 <_svfprintf_r+0xf44>
   84750:	4630      	mov	r0, r6
   84752:	950a      	str	r5, [sp, #40]	; 0x28
   84754:	f7fe ff50 	bl	835f8 <strlen>
   84758:	940f      	str	r4, [sp, #60]	; 0x3c
   8475a:	900e      	str	r0, [sp, #56]	; 0x38
   8475c:	f8cd b01c 	str.w	fp, [sp, #28]
   84760:	4603      	mov	r3, r0
   84762:	f7ff b9e7 	b.w	83b34 <_svfprintf_r+0x4e0>
   84766:	272d      	movs	r7, #45	; 0x2d
   84768:	2300      	movs	r3, #0
   8476a:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   8476e:	930a      	str	r3, [sp, #40]	; 0x28
   84770:	f7ff b895 	b.w	8389e <_svfprintf_r+0x24a>
   84774:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   84776:	461a      	mov	r2, r3
   84778:	9312      	str	r3, [sp, #72]	; 0x48
   8477a:	3303      	adds	r3, #3
   8477c:	db04      	blt.n	84788 <_svfprintf_r+0x1134>
   8477e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84780:	4619      	mov	r1, r3
   84782:	4291      	cmp	r1, r2
   84784:	f6bf af5e 	bge.w	84644 <_svfprintf_r+0xff0>
   84788:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8478a:	3b02      	subs	r3, #2
   8478c:	9311      	str	r3, [sp, #68]	; 0x44
   8478e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84790:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   84794:	3b01      	subs	r3, #1
   84796:	2b00      	cmp	r3, #0
   84798:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   8479c:	bfb4      	ite	lt
   8479e:	222d      	movlt	r2, #45	; 0x2d
   847a0:	222b      	movge	r2, #43	; 0x2b
   847a2:	931f      	str	r3, [sp, #124]	; 0x7c
   847a4:	bfb8      	it	lt
   847a6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   847a8:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   847ac:	bfb8      	it	lt
   847ae:	f1c3 0301 	rsblt	r3, r3, #1
   847b2:	2b09      	cmp	r3, #9
   847b4:	f340 811f 	ble.w	849f6 <_svfprintf_r+0x13a2>
   847b8:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   847bc:	4601      	mov	r1, r0
   847be:	4c68      	ldr	r4, [pc, #416]	; (84960 <_svfprintf_r+0x130c>)
   847c0:	e000      	b.n	847c4 <_svfprintf_r+0x1170>
   847c2:	4611      	mov	r1, r2
   847c4:	fb84 5203 	smull	r5, r2, r4, r3
   847c8:	17dd      	asrs	r5, r3, #31
   847ca:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   847ce:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   847d2:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   847d6:	3230      	adds	r2, #48	; 0x30
   847d8:	2d09      	cmp	r5, #9
   847da:	f801 2c01 	strb.w	r2, [r1, #-1]
   847de:	462b      	mov	r3, r5
   847e0:	f101 32ff 	add.w	r2, r1, #4294967295
   847e4:	dced      	bgt.n	847c2 <_svfprintf_r+0x116e>
   847e6:	3330      	adds	r3, #48	; 0x30
   847e8:	3902      	subs	r1, #2
   847ea:	b2dc      	uxtb	r4, r3
   847ec:	4288      	cmp	r0, r1
   847ee:	f802 4c01 	strb.w	r4, [r2, #-1]
   847f2:	f240 8192 	bls.w	84b1a <_svfprintf_r+0x14c6>
   847f6:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   847fa:	4613      	mov	r3, r2
   847fc:	e001      	b.n	84802 <_svfprintf_r+0x11ae>
   847fe:	f813 4b01 	ldrb.w	r4, [r3], #1
   84802:	4283      	cmp	r3, r0
   84804:	f801 4b01 	strb.w	r4, [r1], #1
   84808:	d1f9      	bne.n	847fe <_svfprintf_r+0x11aa>
   8480a:	3301      	adds	r3, #1
   8480c:	1a9b      	subs	r3, r3, r2
   8480e:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   84812:	4413      	add	r3, r2
   84814:	aa21      	add	r2, sp, #132	; 0x84
   84816:	1a9b      	subs	r3, r3, r2
   84818:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8481a:	931b      	str	r3, [sp, #108]	; 0x6c
   8481c:	2a01      	cmp	r2, #1
   8481e:	4413      	add	r3, r2
   84820:	930e      	str	r3, [sp, #56]	; 0x38
   84822:	f340 8148 	ble.w	84ab6 <_svfprintf_r+0x1462>
   84826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84828:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8482a:	4413      	add	r3, r2
   8482c:	930e      	str	r3, [sp, #56]	; 0x38
   8482e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   84832:	9308      	str	r3, [sp, #32]
   84834:	2300      	movs	r3, #0
   84836:	9312      	str	r3, [sp, #72]	; 0x48
   84838:	e714      	b.n	84664 <_svfprintf_r+0x1010>
   8483a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8483c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8483e:	f7ff b876 	b.w	8392e <_svfprintf_r+0x2da>
   84842:	aa25      	add	r2, sp, #148	; 0x94
   84844:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84846:	980c      	ldr	r0, [sp, #48]	; 0x30
   84848:	f001 ff7a 	bl	86740 <__ssprint_r>
   8484c:	2800      	cmp	r0, #0
   8484e:	f47e afde 	bne.w	8380e <_svfprintf_r+0x1ba>
   84852:	46c8      	mov	r8, r9
   84854:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84856:	e4fb      	b.n	84250 <_svfprintf_r+0xbfc>
   84858:	4623      	mov	r3, r4
   8485a:	e6e3      	b.n	84624 <_svfprintf_r+0xfd0>
   8485c:	aa25      	add	r2, sp, #148	; 0x94
   8485e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84860:	980c      	ldr	r0, [sp, #48]	; 0x30
   84862:	f001 ff6d 	bl	86740 <__ssprint_r>
   84866:	2800      	cmp	r0, #0
   84868:	f47e afd1 	bne.w	8380e <_svfprintf_r+0x1ba>
   8486c:	46c8      	mov	r8, r9
   8486e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84870:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84872:	e5d3      	b.n	8441c <_svfprintf_r+0xdc8>
   84874:	aa25      	add	r2, sp, #148	; 0x94
   84876:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84878:	980c      	ldr	r0, [sp, #48]	; 0x30
   8487a:	f001 ff61 	bl	86740 <__ssprint_r>
   8487e:	2800      	cmp	r0, #0
   84880:	f47e afc5 	bne.w	8380e <_svfprintf_r+0x1ba>
   84884:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84886:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84888:	46c8      	mov	r8, r9
   8488a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8488c:	1a9a      	subs	r2, r3, r2
   8488e:	e5dd      	b.n	8444c <_svfprintf_r+0xdf8>
   84890:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84892:	f7ff b8fe 	b.w	83a92 <_svfprintf_r+0x43e>
   84896:	aa25      	add	r2, sp, #148	; 0x94
   84898:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8489a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8489c:	f001 ff50 	bl	86740 <__ssprint_r>
   848a0:	2800      	cmp	r0, #0
   848a2:	f47e afb4 	bne.w	8380e <_svfprintf_r+0x1ba>
   848a6:	46c8      	mov	r8, r9
   848a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   848aa:	e5b0      	b.n	8440e <_svfprintf_r+0xdba>
   848ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   848ae:	4637      	mov	r7, r6
   848b0:	2b06      	cmp	r3, #6
   848b2:	bf28      	it	cs
   848b4:	2306      	movcs	r3, #6
   848b6:	960a      	str	r6, [sp, #40]	; 0x28
   848b8:	9612      	str	r6, [sp, #72]	; 0x48
   848ba:	9308      	str	r3, [sp, #32]
   848bc:	940f      	str	r4, [sp, #60]	; 0x3c
   848be:	f8cd b01c 	str.w	fp, [sp, #28]
   848c2:	930e      	str	r3, [sp, #56]	; 0x38
   848c4:	4e27      	ldr	r6, [pc, #156]	; (84964 <_svfprintf_r+0x1310>)
   848c6:	f7fe bfe9 	b.w	8389c <_svfprintf_r+0x248>
   848ca:	2306      	movs	r3, #6
   848cc:	930a      	str	r3, [sp, #40]	; 0x28
   848ce:	e663      	b.n	84598 <_svfprintf_r+0xf44>
   848d0:	232d      	movs	r3, #45	; 0x2d
   848d2:	461f      	mov	r7, r3
   848d4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   848d8:	f7ff ba28 	b.w	83d2c <_svfprintf_r+0x6d8>
   848dc:	2003      	movs	r0, #3
   848de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   848e0:	a923      	add	r1, sp, #140	; 0x8c
   848e2:	e88d 0011 	stmia.w	sp, {r0, r4}
   848e6:	9104      	str	r1, [sp, #16]
   848e8:	a820      	add	r0, sp, #128	; 0x80
   848ea:	a91f      	add	r1, sp, #124	; 0x7c
   848ec:	9003      	str	r0, [sp, #12]
   848ee:	9a08      	ldr	r2, [sp, #32]
   848f0:	463b      	mov	r3, r7
   848f2:	9102      	str	r1, [sp, #8]
   848f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   848f6:	f000 f9d3 	bl	84ca0 <_dtoa_r>
   848fa:	4625      	mov	r5, r4
   848fc:	4606      	mov	r6, r0
   848fe:	1904      	adds	r4, r0, r4
   84900:	e719      	b.n	84736 <_svfprintf_r+0x10e2>
   84902:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84904:	4d15      	ldr	r5, [pc, #84]	; (8495c <_svfprintf_r+0x1308>)
   84906:	f7ff bb7e 	b.w	84006 <_svfprintf_r+0x9b2>
   8490a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8490c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8490e:	4413      	add	r3, r2
   84910:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84912:	930e      	str	r3, [sp, #56]	; 0x38
   84914:	2a00      	cmp	r2, #0
   84916:	f340 80c7 	ble.w	84aa8 <_svfprintf_r+0x1454>
   8491a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8491e:	9308      	str	r3, [sp, #32]
   84920:	2367      	movs	r3, #103	; 0x67
   84922:	9311      	str	r3, [sp, #68]	; 0x44
   84924:	e69e      	b.n	84664 <_svfprintf_r+0x1010>
   84926:	2b00      	cmp	r3, #0
   84928:	f340 80e1 	ble.w	84aee <_svfprintf_r+0x149a>
   8492c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8492e:	2a00      	cmp	r2, #0
   84930:	f040 80b0 	bne.w	84a94 <_svfprintf_r+0x1440>
   84934:	f01b 0f01 	tst.w	fp, #1
   84938:	f040 80ac 	bne.w	84a94 <_svfprintf_r+0x1440>
   8493c:	9308      	str	r3, [sp, #32]
   8493e:	930e      	str	r3, [sp, #56]	; 0x38
   84940:	e690      	b.n	84664 <_svfprintf_r+0x1010>
   84942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84944:	940f      	str	r4, [sp, #60]	; 0x3c
   84946:	9308      	str	r3, [sp, #32]
   84948:	930e      	str	r3, [sp, #56]	; 0x38
   8494a:	900a      	str	r0, [sp, #40]	; 0x28
   8494c:	f8cd b01c 	str.w	fp, [sp, #28]
   84950:	9012      	str	r0, [sp, #72]	; 0x48
   84952:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84956:	f7fe bfa1 	b.w	8389c <_svfprintf_r+0x248>
   8495a:	bf00      	nop
   8495c:	00087e64 	.word	0x00087e64
   84960:	66666667 	.word	0x66666667
   84964:	00087e48 	.word	0x00087e48
   84968:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8496a:	2b47      	cmp	r3, #71	; 0x47
   8496c:	f47f ae46 	bne.w	845fc <_svfprintf_r+0xfa8>
   84970:	f01b 0f01 	tst.w	fp, #1
   84974:	f47f aeda 	bne.w	8472c <_svfprintf_r+0x10d8>
   84978:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8497a:	1b9b      	subs	r3, r3, r6
   8497c:	9313      	str	r3, [sp, #76]	; 0x4c
   8497e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84980:	2b47      	cmp	r3, #71	; 0x47
   84982:	f43f aef7 	beq.w	84774 <_svfprintf_r+0x1120>
   84986:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   84988:	9312      	str	r3, [sp, #72]	; 0x48
   8498a:	e700      	b.n	8478e <_svfprintf_r+0x113a>
   8498c:	2000      	movs	r0, #0
   8498e:	900a      	str	r0, [sp, #40]	; 0x28
   84990:	f7fe bebc 	b.w	8370c <_svfprintf_r+0xb8>
   84994:	424f      	negs	r7, r1
   84996:	3110      	adds	r1, #16
   84998:	da35      	bge.n	84a06 <_svfprintf_r+0x13b2>
   8499a:	2410      	movs	r4, #16
   8499c:	4d6a      	ldr	r5, [pc, #424]	; (84b48 <_svfprintf_r+0x14f4>)
   8499e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   849a2:	e004      	b.n	849ae <_svfprintf_r+0x135a>
   849a4:	f108 0808 	add.w	r8, r8, #8
   849a8:	3f10      	subs	r7, #16
   849aa:	2f10      	cmp	r7, #16
   849ac:	dd2c      	ble.n	84a08 <_svfprintf_r+0x13b4>
   849ae:	3301      	adds	r3, #1
   849b0:	3210      	adds	r2, #16
   849b2:	2b07      	cmp	r3, #7
   849b4:	9227      	str	r2, [sp, #156]	; 0x9c
   849b6:	9326      	str	r3, [sp, #152]	; 0x98
   849b8:	f8c8 5000 	str.w	r5, [r8]
   849bc:	f8c8 4004 	str.w	r4, [r8, #4]
   849c0:	ddf0      	ble.n	849a4 <_svfprintf_r+0x1350>
   849c2:	aa25      	add	r2, sp, #148	; 0x94
   849c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   849c6:	4658      	mov	r0, fp
   849c8:	f001 feba 	bl	86740 <__ssprint_r>
   849cc:	2800      	cmp	r0, #0
   849ce:	f47e af1e 	bne.w	8380e <_svfprintf_r+0x1ba>
   849d2:	46c8      	mov	r8, r9
   849d4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   849d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   849d8:	e7e6      	b.n	849a8 <_svfprintf_r+0x1354>
   849da:	aa25      	add	r2, sp, #148	; 0x94
   849dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   849de:	980c      	ldr	r0, [sp, #48]	; 0x30
   849e0:	f001 feae 	bl	86740 <__ssprint_r>
   849e4:	2800      	cmp	r0, #0
   849e6:	f47e af12 	bne.w	8380e <_svfprintf_r+0x1ba>
   849ea:	46c8      	mov	r8, r9
   849ec:	991f      	ldr	r1, [sp, #124]	; 0x7c
   849ee:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   849f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   849f2:	f7ff bbc3 	b.w	8417c <_svfprintf_r+0xb28>
   849f6:	2230      	movs	r2, #48	; 0x30
   849f8:	4413      	add	r3, r2
   849fa:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   849fe:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   84a02:	ab22      	add	r3, sp, #136	; 0x88
   84a04:	e706      	b.n	84814 <_svfprintf_r+0x11c0>
   84a06:	4d50      	ldr	r5, [pc, #320]	; (84b48 <_svfprintf_r+0x14f4>)
   84a08:	3301      	adds	r3, #1
   84a0a:	443a      	add	r2, r7
   84a0c:	2b07      	cmp	r3, #7
   84a0e:	e888 00a0 	stmia.w	r8, {r5, r7}
   84a12:	9227      	str	r2, [sp, #156]	; 0x9c
   84a14:	9326      	str	r3, [sp, #152]	; 0x98
   84a16:	f108 0808 	add.w	r8, r8, #8
   84a1a:	f77f abb2 	ble.w	84182 <_svfprintf_r+0xb2e>
   84a1e:	aa25      	add	r2, sp, #148	; 0x94
   84a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84a22:	980c      	ldr	r0, [sp, #48]	; 0x30
   84a24:	f001 fe8c 	bl	86740 <__ssprint_r>
   84a28:	2800      	cmp	r0, #0
   84a2a:	f47e aef0 	bne.w	8380e <_svfprintf_r+0x1ba>
   84a2e:	46c8      	mov	r8, r9
   84a30:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84a32:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a34:	f7ff bba5 	b.w	84182 <_svfprintf_r+0xb2e>
   84a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84a3a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84a3c:	4413      	add	r3, r2
   84a3e:	930e      	str	r3, [sp, #56]	; 0x38
   84a40:	e76b      	b.n	8491a <_svfprintf_r+0x12c6>
   84a42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   84a44:	e5ee      	b.n	84624 <_svfprintf_r+0xfd0>
   84a46:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84a48:	4d3f      	ldr	r5, [pc, #252]	; (84b48 <_svfprintf_r+0x14f4>)
   84a4a:	e4bb      	b.n	843c4 <_svfprintf_r+0xd70>
   84a4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   84a4e:	9808      	ldr	r0, [sp, #32]
   84a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   84a52:	4639      	mov	r1, r7
   84a54:	f002 ff16 	bl	87884 <__aeabi_dcmpeq>
   84a58:	2800      	cmp	r0, #0
   84a5a:	f47f ae70 	bne.w	8473e <_svfprintf_r+0x10ea>
   84a5e:	f1c5 0501 	rsb	r5, r5, #1
   84a62:	951f      	str	r5, [sp, #124]	; 0x7c
   84a64:	442c      	add	r4, r5
   84a66:	e5ca      	b.n	845fe <_svfprintf_r+0xfaa>
   84a68:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84a6a:	4e38      	ldr	r6, [pc, #224]	; (84b4c <_svfprintf_r+0x14f8>)
   84a6c:	2b00      	cmp	r3, #0
   84a6e:	bfbe      	ittt	lt
   84a70:	232d      	movlt	r3, #45	; 0x2d
   84a72:	461f      	movlt	r7, r3
   84a74:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   84a78:	f04f 0303 	mov.w	r3, #3
   84a7c:	461a      	mov	r2, r3
   84a7e:	9308      	str	r3, [sp, #32]
   84a80:	f04f 0300 	mov.w	r3, #0
   84a84:	bfa8      	it	ge
   84a86:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   84a8a:	4619      	mov	r1, r3
   84a8c:	930a      	str	r3, [sp, #40]	; 0x28
   84a8e:	4b30      	ldr	r3, [pc, #192]	; (84b50 <_svfprintf_r+0x14fc>)
   84a90:	f7ff b954 	b.w	83d3c <_svfprintf_r+0x6e8>
   84a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84a96:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84a98:	4413      	add	r3, r2
   84a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84a9c:	441a      	add	r2, r3
   84a9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   84aa2:	920e      	str	r2, [sp, #56]	; 0x38
   84aa4:	9308      	str	r3, [sp, #32]
   84aa6:	e5dd      	b.n	84664 <_svfprintf_r+0x1010>
   84aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   84aac:	f1c3 0301 	rsb	r3, r3, #1
   84ab0:	441a      	add	r2, r3
   84ab2:	4613      	mov	r3, r2
   84ab4:	e7c3      	b.n	84a3e <_svfprintf_r+0x13ea>
   84ab6:	f01b 0301 	ands.w	r3, fp, #1
   84aba:	9312      	str	r3, [sp, #72]	; 0x48
   84abc:	f47f aeb3 	bne.w	84826 <_svfprintf_r+0x11d2>
   84ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84ac2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   84ac6:	9308      	str	r3, [sp, #32]
   84ac8:	e5cc      	b.n	84664 <_svfprintf_r+0x1010>
   84aca:	4d1f      	ldr	r5, [pc, #124]	; (84b48 <_svfprintf_r+0x14f4>)
   84acc:	e43c      	b.n	84348 <_svfprintf_r+0xcf4>
   84ace:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84ad0:	4d1d      	ldr	r5, [pc, #116]	; (84b48 <_svfprintf_r+0x14f4>)
   84ad2:	e491      	b.n	843f8 <_svfprintf_r+0xda4>
   84ad4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   84ad6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   84ada:	6828      	ldr	r0, [r5, #0]
   84adc:	46a2      	mov	sl, r4
   84ade:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   84ae2:	900a      	str	r0, [sp, #40]	; 0x28
   84ae4:	4628      	mov	r0, r5
   84ae6:	3004      	adds	r0, #4
   84ae8:	900f      	str	r0, [sp, #60]	; 0x3c
   84aea:	f7fe be0d 	b.w	83708 <_svfprintf_r+0xb4>
   84aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84af0:	b913      	cbnz	r3, 84af8 <_svfprintf_r+0x14a4>
   84af2:	f01b 0f01 	tst.w	fp, #1
   84af6:	d002      	beq.n	84afe <_svfprintf_r+0x14aa>
   84af8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   84afa:	3301      	adds	r3, #1
   84afc:	e7cd      	b.n	84a9a <_svfprintf_r+0x1446>
   84afe:	2301      	movs	r3, #1
   84b00:	e71c      	b.n	8493c <_svfprintf_r+0x12e8>
   84b02:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84b06:	f7ff b980 	b.w	83e0a <_svfprintf_r+0x7b6>
   84b0a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84b0e:	f7ff b93a 	b.w	83d86 <_svfprintf_r+0x732>
   84b12:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84b16:	f7ff b84f 	b.w	83bb8 <_svfprintf_r+0x564>
   84b1a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   84b1e:	e679      	b.n	84814 <_svfprintf_r+0x11c0>
   84b20:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84b24:	f7ff b9b2 	b.w	83e8c <_svfprintf_r+0x838>
   84b28:	f04f 32ff 	mov.w	r2, #4294967295
   84b2c:	230c      	movs	r3, #12
   84b2e:	9209      	str	r2, [sp, #36]	; 0x24
   84b30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84b32:	6013      	str	r3, [r2, #0]
   84b34:	f7fe be74 	b.w	83820 <_svfprintf_r+0x1cc>
   84b38:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84b3c:	f7ff b8c4 	b.w	83cc8 <_svfprintf_r+0x674>
   84b40:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84b44:	f7ff b878 	b.w	83c38 <_svfprintf_r+0x5e4>
   84b48:	00087e64 	.word	0x00087e64
   84b4c:	00087e1c 	.word	0x00087e1c
   84b50:	00087e18 	.word	0x00087e18

00084b54 <register_fini>:
   84b54:	4b02      	ldr	r3, [pc, #8]	; (84b60 <register_fini+0xc>)
   84b56:	b113      	cbz	r3, 84b5e <register_fini+0xa>
   84b58:	4802      	ldr	r0, [pc, #8]	; (84b64 <register_fini+0x10>)
   84b5a:	f000 b805 	b.w	84b68 <atexit>
   84b5e:	4770      	bx	lr
   84b60:	00000000 	.word	0x00000000
   84b64:	00085ae5 	.word	0x00085ae5

00084b68 <atexit>:
   84b68:	2300      	movs	r3, #0
   84b6a:	4601      	mov	r1, r0
   84b6c:	461a      	mov	r2, r3
   84b6e:	4618      	mov	r0, r3
   84b70:	f001 be64 	b.w	8683c <__register_exitproc>

00084b74 <quorem>:
   84b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84b78:	6903      	ldr	r3, [r0, #16]
   84b7a:	690f      	ldr	r7, [r1, #16]
   84b7c:	b083      	sub	sp, #12
   84b7e:	429f      	cmp	r7, r3
   84b80:	f300 8088 	bgt.w	84c94 <quorem+0x120>
   84b84:	3f01      	subs	r7, #1
   84b86:	f101 0614 	add.w	r6, r1, #20
   84b8a:	f100 0a14 	add.w	sl, r0, #20
   84b8e:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   84b92:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   84b96:	3301      	adds	r3, #1
   84b98:	fbb2 f8f3 	udiv	r8, r2, r3
   84b9c:	00bb      	lsls	r3, r7, #2
   84b9e:	9300      	str	r3, [sp, #0]
   84ba0:	eb06 0903 	add.w	r9, r6, r3
   84ba4:	4453      	add	r3, sl
   84ba6:	9301      	str	r3, [sp, #4]
   84ba8:	f1b8 0f00 	cmp.w	r8, #0
   84bac:	d03b      	beq.n	84c26 <quorem+0xb2>
   84bae:	2300      	movs	r3, #0
   84bb0:	46b4      	mov	ip, r6
   84bb2:	461c      	mov	r4, r3
   84bb4:	46d6      	mov	lr, sl
   84bb6:	f85c 2b04 	ldr.w	r2, [ip], #4
   84bba:	f8de 5000 	ldr.w	r5, [lr]
   84bbe:	fa1f fb82 	uxth.w	fp, r2
   84bc2:	fb08 330b 	mla	r3, r8, fp, r3
   84bc6:	0c12      	lsrs	r2, r2, #16
   84bc8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   84bcc:	fb08 bb02 	mla	fp, r8, r2, fp
   84bd0:	b29a      	uxth	r2, r3
   84bd2:	1aa2      	subs	r2, r4, r2
   84bd4:	b2ab      	uxth	r3, r5
   84bd6:	fa1f f48b 	uxth.w	r4, fp
   84bda:	441a      	add	r2, r3
   84bdc:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   84be0:	eb04 4422 	add.w	r4, r4, r2, asr #16
   84be4:	b292      	uxth	r2, r2
   84be6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   84bea:	45e1      	cmp	r9, ip
   84bec:	f84e 2b04 	str.w	r2, [lr], #4
   84bf0:	ea4f 4424 	mov.w	r4, r4, asr #16
   84bf4:	ea4f 431b 	mov.w	r3, fp, lsr #16
   84bf8:	d2dd      	bcs.n	84bb6 <quorem+0x42>
   84bfa:	9b00      	ldr	r3, [sp, #0]
   84bfc:	f85a 3003 	ldr.w	r3, [sl, r3]
   84c00:	b98b      	cbnz	r3, 84c26 <quorem+0xb2>
   84c02:	9c01      	ldr	r4, [sp, #4]
   84c04:	1f23      	subs	r3, r4, #4
   84c06:	459a      	cmp	sl, r3
   84c08:	d20c      	bcs.n	84c24 <quorem+0xb0>
   84c0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84c0e:	b94b      	cbnz	r3, 84c24 <quorem+0xb0>
   84c10:	f1a4 0308 	sub.w	r3, r4, #8
   84c14:	e002      	b.n	84c1c <quorem+0xa8>
   84c16:	681a      	ldr	r2, [r3, #0]
   84c18:	3b04      	subs	r3, #4
   84c1a:	b91a      	cbnz	r2, 84c24 <quorem+0xb0>
   84c1c:	459a      	cmp	sl, r3
   84c1e:	f107 37ff 	add.w	r7, r7, #4294967295
   84c22:	d3f8      	bcc.n	84c16 <quorem+0xa2>
   84c24:	6107      	str	r7, [r0, #16]
   84c26:	4604      	mov	r4, r0
   84c28:	f001 fc7a 	bl	86520 <__mcmp>
   84c2c:	2800      	cmp	r0, #0
   84c2e:	db2d      	blt.n	84c8c <quorem+0x118>
   84c30:	4655      	mov	r5, sl
   84c32:	2300      	movs	r3, #0
   84c34:	f108 0801 	add.w	r8, r8, #1
   84c38:	f856 1b04 	ldr.w	r1, [r6], #4
   84c3c:	6828      	ldr	r0, [r5, #0]
   84c3e:	b28a      	uxth	r2, r1
   84c40:	1a9a      	subs	r2, r3, r2
   84c42:	0c0b      	lsrs	r3, r1, #16
   84c44:	b281      	uxth	r1, r0
   84c46:	440a      	add	r2, r1
   84c48:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   84c4c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   84c50:	b292      	uxth	r2, r2
   84c52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   84c56:	45b1      	cmp	r9, r6
   84c58:	f845 2b04 	str.w	r2, [r5], #4
   84c5c:	ea4f 4323 	mov.w	r3, r3, asr #16
   84c60:	d2ea      	bcs.n	84c38 <quorem+0xc4>
   84c62:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   84c66:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   84c6a:	b97a      	cbnz	r2, 84c8c <quorem+0x118>
   84c6c:	1f1a      	subs	r2, r3, #4
   84c6e:	4592      	cmp	sl, r2
   84c70:	d20b      	bcs.n	84c8a <quorem+0x116>
   84c72:	f853 2c04 	ldr.w	r2, [r3, #-4]
   84c76:	b942      	cbnz	r2, 84c8a <quorem+0x116>
   84c78:	3b08      	subs	r3, #8
   84c7a:	e002      	b.n	84c82 <quorem+0x10e>
   84c7c:	681a      	ldr	r2, [r3, #0]
   84c7e:	3b04      	subs	r3, #4
   84c80:	b91a      	cbnz	r2, 84c8a <quorem+0x116>
   84c82:	459a      	cmp	sl, r3
   84c84:	f107 37ff 	add.w	r7, r7, #4294967295
   84c88:	d3f8      	bcc.n	84c7c <quorem+0x108>
   84c8a:	6127      	str	r7, [r4, #16]
   84c8c:	4640      	mov	r0, r8
   84c8e:	b003      	add	sp, #12
   84c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84c94:	2000      	movs	r0, #0
   84c96:	b003      	add	sp, #12
   84c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84c9c:	0000      	movs	r0, r0
	...

00084ca0 <_dtoa_r>:
   84ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84ca4:	6c05      	ldr	r5, [r0, #64]	; 0x40
   84ca6:	b09b      	sub	sp, #108	; 0x6c
   84ca8:	4604      	mov	r4, r0
   84caa:	4692      	mov	sl, r2
   84cac:	469b      	mov	fp, r3
   84cae:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   84cb0:	b14d      	cbz	r5, 84cc6 <_dtoa_r+0x26>
   84cb2:	2301      	movs	r3, #1
   84cb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   84cb6:	4629      	mov	r1, r5
   84cb8:	4093      	lsls	r3, r2
   84cba:	60ab      	str	r3, [r5, #8]
   84cbc:	606a      	str	r2, [r5, #4]
   84cbe:	f001 fa57 	bl	86170 <_Bfree>
   84cc2:	2300      	movs	r3, #0
   84cc4:	6423      	str	r3, [r4, #64]	; 0x40
   84cc6:	f1bb 0f00 	cmp.w	fp, #0
   84cca:	465d      	mov	r5, fp
   84ccc:	db35      	blt.n	84d3a <_dtoa_r+0x9a>
   84cce:	2300      	movs	r3, #0
   84cd0:	6033      	str	r3, [r6, #0]
   84cd2:	4b9d      	ldr	r3, [pc, #628]	; (84f48 <_dtoa_r+0x2a8>)
   84cd4:	43ab      	bics	r3, r5
   84cd6:	d015      	beq.n	84d04 <_dtoa_r+0x64>
   84cd8:	2200      	movs	r2, #0
   84cda:	2300      	movs	r3, #0
   84cdc:	4650      	mov	r0, sl
   84cde:	4659      	mov	r1, fp
   84ce0:	f002 fdd0 	bl	87884 <__aeabi_dcmpeq>
   84ce4:	4680      	mov	r8, r0
   84ce6:	2800      	cmp	r0, #0
   84ce8:	d02d      	beq.n	84d46 <_dtoa_r+0xa6>
   84cea:	2301      	movs	r3, #1
   84cec:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84cee:	6013      	str	r3, [r2, #0]
   84cf0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84cf2:	2b00      	cmp	r3, #0
   84cf4:	f000 80bd 	beq.w	84e72 <_dtoa_r+0x1d2>
   84cf8:	4894      	ldr	r0, [pc, #592]	; (84f4c <_dtoa_r+0x2ac>)
   84cfa:	6018      	str	r0, [r3, #0]
   84cfc:	3801      	subs	r0, #1
   84cfe:	b01b      	add	sp, #108	; 0x6c
   84d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d04:	f242 730f 	movw	r3, #9999	; 0x270f
   84d08:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84d0a:	6013      	str	r3, [r2, #0]
   84d0c:	f1ba 0f00 	cmp.w	sl, #0
   84d10:	d10d      	bne.n	84d2e <_dtoa_r+0x8e>
   84d12:	f3c5 0513 	ubfx	r5, r5, #0, #20
   84d16:	b955      	cbnz	r5, 84d2e <_dtoa_r+0x8e>
   84d18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84d1a:	488d      	ldr	r0, [pc, #564]	; (84f50 <_dtoa_r+0x2b0>)
   84d1c:	2b00      	cmp	r3, #0
   84d1e:	d0ee      	beq.n	84cfe <_dtoa_r+0x5e>
   84d20:	f100 0308 	add.w	r3, r0, #8
   84d24:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   84d26:	6013      	str	r3, [r2, #0]
   84d28:	b01b      	add	sp, #108	; 0x6c
   84d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84d30:	4888      	ldr	r0, [pc, #544]	; (84f54 <_dtoa_r+0x2b4>)
   84d32:	2b00      	cmp	r3, #0
   84d34:	d0e3      	beq.n	84cfe <_dtoa_r+0x5e>
   84d36:	1cc3      	adds	r3, r0, #3
   84d38:	e7f4      	b.n	84d24 <_dtoa_r+0x84>
   84d3a:	2301      	movs	r3, #1
   84d3c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   84d40:	6033      	str	r3, [r6, #0]
   84d42:	46ab      	mov	fp, r5
   84d44:	e7c5      	b.n	84cd2 <_dtoa_r+0x32>
   84d46:	aa18      	add	r2, sp, #96	; 0x60
   84d48:	ab19      	add	r3, sp, #100	; 0x64
   84d4a:	9201      	str	r2, [sp, #4]
   84d4c:	9300      	str	r3, [sp, #0]
   84d4e:	4652      	mov	r2, sl
   84d50:	465b      	mov	r3, fp
   84d52:	4620      	mov	r0, r4
   84d54:	f001 fc8e 	bl	86674 <__d2b>
   84d58:	0d2b      	lsrs	r3, r5, #20
   84d5a:	4681      	mov	r9, r0
   84d5c:	d071      	beq.n	84e42 <_dtoa_r+0x1a2>
   84d5e:	4650      	mov	r0, sl
   84d60:	f3cb 0213 	ubfx	r2, fp, #0, #20
   84d64:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   84d68:	9f18      	ldr	r7, [sp, #96]	; 0x60
   84d6a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   84d6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   84d72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   84d76:	2200      	movs	r2, #0
   84d78:	4b77      	ldr	r3, [pc, #476]	; (84f58 <_dtoa_r+0x2b8>)
   84d7a:	f002 f967 	bl	8704c <__aeabi_dsub>
   84d7e:	a36c      	add	r3, pc, #432	; (adr r3, 84f30 <_dtoa_r+0x290>)
   84d80:	e9d3 2300 	ldrd	r2, r3, [r3]
   84d84:	f002 fb16 	bl	873b4 <__aeabi_dmul>
   84d88:	a36b      	add	r3, pc, #428	; (adr r3, 84f38 <_dtoa_r+0x298>)
   84d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   84d8e:	f002 f95f 	bl	87050 <__adddf3>
   84d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
   84d96:	4630      	mov	r0, r6
   84d98:	f002 faa6 	bl	872e8 <__aeabi_i2d>
   84d9c:	a368      	add	r3, pc, #416	; (adr r3, 84f40 <_dtoa_r+0x2a0>)
   84d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   84da2:	f002 fb07 	bl	873b4 <__aeabi_dmul>
   84da6:	4602      	mov	r2, r0
   84da8:	460b      	mov	r3, r1
   84daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   84dae:	f002 f94f 	bl	87050 <__adddf3>
   84db2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   84db6:	f002 fdad 	bl	87914 <__aeabi_d2iz>
   84dba:	2200      	movs	r2, #0
   84dbc:	9002      	str	r0, [sp, #8]
   84dbe:	2300      	movs	r3, #0
   84dc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   84dc4:	f002 fd68 	bl	87898 <__aeabi_dcmplt>
   84dc8:	2800      	cmp	r0, #0
   84dca:	f040 816d 	bne.w	850a8 <_dtoa_r+0x408>
   84dce:	9d02      	ldr	r5, [sp, #8]
   84dd0:	2d16      	cmp	r5, #22
   84dd2:	f200 8157 	bhi.w	85084 <_dtoa_r+0x3e4>
   84dd6:	4961      	ldr	r1, [pc, #388]	; (84f5c <_dtoa_r+0x2bc>)
   84dd8:	4652      	mov	r2, sl
   84dda:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   84dde:	465b      	mov	r3, fp
   84de0:	e9d1 0100 	ldrd	r0, r1, [r1]
   84de4:	f002 fd76 	bl	878d4 <__aeabi_dcmpgt>
   84de8:	2800      	cmp	r0, #0
   84dea:	f000 81be 	beq.w	8516a <_dtoa_r+0x4ca>
   84dee:	1e6b      	subs	r3, r5, #1
   84df0:	9302      	str	r3, [sp, #8]
   84df2:	2300      	movs	r3, #0
   84df4:	930e      	str	r3, [sp, #56]	; 0x38
   84df6:	1bbf      	subs	r7, r7, r6
   84df8:	1e7b      	subs	r3, r7, #1
   84dfa:	9308      	str	r3, [sp, #32]
   84dfc:	f100 814e 	bmi.w	8509c <_dtoa_r+0x3fc>
   84e00:	2300      	movs	r3, #0
   84e02:	930a      	str	r3, [sp, #40]	; 0x28
   84e04:	9b02      	ldr	r3, [sp, #8]
   84e06:	2b00      	cmp	r3, #0
   84e08:	f2c0 813f 	blt.w	8508a <_dtoa_r+0x3ea>
   84e0c:	9a08      	ldr	r2, [sp, #32]
   84e0e:	930d      	str	r3, [sp, #52]	; 0x34
   84e10:	4611      	mov	r1, r2
   84e12:	4419      	add	r1, r3
   84e14:	2300      	movs	r3, #0
   84e16:	9108      	str	r1, [sp, #32]
   84e18:	930c      	str	r3, [sp, #48]	; 0x30
   84e1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84e1c:	2b09      	cmp	r3, #9
   84e1e:	d82a      	bhi.n	84e76 <_dtoa_r+0x1d6>
   84e20:	2b05      	cmp	r3, #5
   84e22:	f340 8658 	ble.w	85ad6 <_dtoa_r+0xe36>
   84e26:	2500      	movs	r5, #0
   84e28:	3b04      	subs	r3, #4
   84e2a:	9324      	str	r3, [sp, #144]	; 0x90
   84e2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84e2e:	3b02      	subs	r3, #2
   84e30:	2b03      	cmp	r3, #3
   84e32:	f200 863f 	bhi.w	85ab4 <_dtoa_r+0xe14>
   84e36:	e8df f013 	tbh	[pc, r3, lsl #1]
   84e3a:	03ce      	.short	0x03ce
   84e3c:	03d902c3 	.word	0x03d902c3
   84e40:	045b      	.short	0x045b
   84e42:	9f18      	ldr	r7, [sp, #96]	; 0x60
   84e44:	9e19      	ldr	r6, [sp, #100]	; 0x64
   84e46:	443e      	add	r6, r7
   84e48:	f206 4332 	addw	r3, r6, #1074	; 0x432
   84e4c:	2b20      	cmp	r3, #32
   84e4e:	f340 8187 	ble.w	85160 <_dtoa_r+0x4c0>
   84e52:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   84e56:	f206 4012 	addw	r0, r6, #1042	; 0x412
   84e5a:	409d      	lsls	r5, r3
   84e5c:	fa2a f000 	lsr.w	r0, sl, r0
   84e60:	4328      	orrs	r0, r5
   84e62:	f002 fa31 	bl	872c8 <__aeabi_ui2d>
   84e66:	2301      	movs	r3, #1
   84e68:	3e01      	subs	r6, #1
   84e6a:	9314      	str	r3, [sp, #80]	; 0x50
   84e6c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   84e70:	e781      	b.n	84d76 <_dtoa_r+0xd6>
   84e72:	483b      	ldr	r0, [pc, #236]	; (84f60 <_dtoa_r+0x2c0>)
   84e74:	e743      	b.n	84cfe <_dtoa_r+0x5e>
   84e76:	2100      	movs	r1, #0
   84e78:	4620      	mov	r0, r4
   84e7a:	6461      	str	r1, [r4, #68]	; 0x44
   84e7c:	9125      	str	r1, [sp, #148]	; 0x94
   84e7e:	f001 f951 	bl	86124 <_Balloc>
   84e82:	f04f 33ff 	mov.w	r3, #4294967295
   84e86:	9307      	str	r3, [sp, #28]
   84e88:	930f      	str	r3, [sp, #60]	; 0x3c
   84e8a:	2301      	movs	r3, #1
   84e8c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   84e8e:	9004      	str	r0, [sp, #16]
   84e90:	6420      	str	r0, [r4, #64]	; 0x40
   84e92:	9224      	str	r2, [sp, #144]	; 0x90
   84e94:	930b      	str	r3, [sp, #44]	; 0x2c
   84e96:	9b19      	ldr	r3, [sp, #100]	; 0x64
   84e98:	2b00      	cmp	r3, #0
   84e9a:	f2c0 80d3 	blt.w	85044 <_dtoa_r+0x3a4>
   84e9e:	9a02      	ldr	r2, [sp, #8]
   84ea0:	2a0e      	cmp	r2, #14
   84ea2:	f300 80cf 	bgt.w	85044 <_dtoa_r+0x3a4>
   84ea6:	4b2d      	ldr	r3, [pc, #180]	; (84f5c <_dtoa_r+0x2bc>)
   84ea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84eac:	e9d3 2300 	ldrd	r2, r3, [r3]
   84eb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   84eb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84eb6:	2b00      	cmp	r3, #0
   84eb8:	f2c0 83b4 	blt.w	85624 <_dtoa_r+0x984>
   84ebc:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   84ec0:	4650      	mov	r0, sl
   84ec2:	462a      	mov	r2, r5
   84ec4:	4633      	mov	r3, r6
   84ec6:	4659      	mov	r1, fp
   84ec8:	f002 fb9e 	bl	87608 <__aeabi_ddiv>
   84ecc:	f002 fd22 	bl	87914 <__aeabi_d2iz>
   84ed0:	4680      	mov	r8, r0
   84ed2:	f002 fa09 	bl	872e8 <__aeabi_i2d>
   84ed6:	462a      	mov	r2, r5
   84ed8:	4633      	mov	r3, r6
   84eda:	f002 fa6b 	bl	873b4 <__aeabi_dmul>
   84ede:	4602      	mov	r2, r0
   84ee0:	460b      	mov	r3, r1
   84ee2:	4650      	mov	r0, sl
   84ee4:	4659      	mov	r1, fp
   84ee6:	f002 f8b1 	bl	8704c <__aeabi_dsub>
   84eea:	9e07      	ldr	r6, [sp, #28]
   84eec:	9f04      	ldr	r7, [sp, #16]
   84eee:	f108 0530 	add.w	r5, r8, #48	; 0x30
   84ef2:	2e01      	cmp	r6, #1
   84ef4:	703d      	strb	r5, [r7, #0]
   84ef6:	4602      	mov	r2, r0
   84ef8:	460b      	mov	r3, r1
   84efa:	f107 0501 	add.w	r5, r7, #1
   84efe:	d064      	beq.n	84fca <_dtoa_r+0x32a>
   84f00:	2200      	movs	r2, #0
   84f02:	4b18      	ldr	r3, [pc, #96]	; (84f64 <_dtoa_r+0x2c4>)
   84f04:	f002 fa56 	bl	873b4 <__aeabi_dmul>
   84f08:	2200      	movs	r2, #0
   84f0a:	2300      	movs	r3, #0
   84f0c:	4606      	mov	r6, r0
   84f0e:	460f      	mov	r7, r1
   84f10:	f002 fcb8 	bl	87884 <__aeabi_dcmpeq>
   84f14:	2800      	cmp	r0, #0
   84f16:	f040 8082 	bne.w	8501e <_dtoa_r+0x37e>
   84f1a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   84f1e:	f04f 0a00 	mov.w	sl, #0
   84f22:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   84f26:	f04f 0b00 	mov.w	fp, #0
   84f2a:	940b      	str	r4, [sp, #44]	; 0x2c
   84f2c:	e029      	b.n	84f82 <_dtoa_r+0x2e2>
   84f2e:	bf00      	nop
   84f30:	636f4361 	.word	0x636f4361
   84f34:	3fd287a7 	.word	0x3fd287a7
   84f38:	8b60c8b3 	.word	0x8b60c8b3
   84f3c:	3fc68a28 	.word	0x3fc68a28
   84f40:	509f79fb 	.word	0x509f79fb
   84f44:	3fd34413 	.word	0x3fd34413
   84f48:	7ff00000 	.word	0x7ff00000
   84f4c:	00087e51 	.word	0x00087e51
   84f50:	00087e74 	.word	0x00087e74
   84f54:	00087e80 	.word	0x00087e80
   84f58:	3ff80000 	.word	0x3ff80000
   84f5c:	00087eb0 	.word	0x00087eb0
   84f60:	00087e50 	.word	0x00087e50
   84f64:	40240000 	.word	0x40240000
   84f68:	2200      	movs	r2, #0
   84f6a:	4b81      	ldr	r3, [pc, #516]	; (85170 <_dtoa_r+0x4d0>)
   84f6c:	f002 fa22 	bl	873b4 <__aeabi_dmul>
   84f70:	4652      	mov	r2, sl
   84f72:	465b      	mov	r3, fp
   84f74:	4606      	mov	r6, r0
   84f76:	460f      	mov	r7, r1
   84f78:	f002 fc84 	bl	87884 <__aeabi_dcmpeq>
   84f7c:	2800      	cmp	r0, #0
   84f7e:	f040 83ba 	bne.w	856f6 <_dtoa_r+0xa56>
   84f82:	4642      	mov	r2, r8
   84f84:	464b      	mov	r3, r9
   84f86:	4630      	mov	r0, r6
   84f88:	4639      	mov	r1, r7
   84f8a:	f002 fb3d 	bl	87608 <__aeabi_ddiv>
   84f8e:	f002 fcc1 	bl	87914 <__aeabi_d2iz>
   84f92:	4604      	mov	r4, r0
   84f94:	f002 f9a8 	bl	872e8 <__aeabi_i2d>
   84f98:	4642      	mov	r2, r8
   84f9a:	464b      	mov	r3, r9
   84f9c:	f002 fa0a 	bl	873b4 <__aeabi_dmul>
   84fa0:	4602      	mov	r2, r0
   84fa2:	460b      	mov	r3, r1
   84fa4:	4630      	mov	r0, r6
   84fa6:	4639      	mov	r1, r7
   84fa8:	f002 f850 	bl	8704c <__aeabi_dsub>
   84fac:	f104 0630 	add.w	r6, r4, #48	; 0x30
   84fb0:	f805 6b01 	strb.w	r6, [r5], #1
   84fb4:	9e04      	ldr	r6, [sp, #16]
   84fb6:	9f07      	ldr	r7, [sp, #28]
   84fb8:	1bae      	subs	r6, r5, r6
   84fba:	42be      	cmp	r6, r7
   84fbc:	4602      	mov	r2, r0
   84fbe:	460b      	mov	r3, r1
   84fc0:	d1d2      	bne.n	84f68 <_dtoa_r+0x2c8>
   84fc2:	46a0      	mov	r8, r4
   84fc4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   84fc8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84fca:	4610      	mov	r0, r2
   84fcc:	4619      	mov	r1, r3
   84fce:	f002 f83f 	bl	87050 <__adddf3>
   84fd2:	4606      	mov	r6, r0
   84fd4:	460f      	mov	r7, r1
   84fd6:	4602      	mov	r2, r0
   84fd8:	460b      	mov	r3, r1
   84fda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84fde:	f002 fc5b 	bl	87898 <__aeabi_dcmplt>
   84fe2:	b948      	cbnz	r0, 84ff8 <_dtoa_r+0x358>
   84fe4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84fe8:	4632      	mov	r2, r6
   84fea:	463b      	mov	r3, r7
   84fec:	f002 fc4a 	bl	87884 <__aeabi_dcmpeq>
   84ff0:	b1a8      	cbz	r0, 8501e <_dtoa_r+0x37e>
   84ff2:	f018 0f01 	tst.w	r8, #1
   84ff6:	d012      	beq.n	8501e <_dtoa_r+0x37e>
   84ff8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   84ffc:	1e6b      	subs	r3, r5, #1
   84ffe:	9a04      	ldr	r2, [sp, #16]
   85000:	e004      	b.n	8500c <_dtoa_r+0x36c>
   85002:	429a      	cmp	r2, r3
   85004:	f000 8402 	beq.w	8580c <_dtoa_r+0xb6c>
   85008:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   8500c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   85010:	f103 0501 	add.w	r5, r3, #1
   85014:	d0f5      	beq.n	85002 <_dtoa_r+0x362>
   85016:	f108 0801 	add.w	r8, r8, #1
   8501a:	f883 8000 	strb.w	r8, [r3]
   8501e:	4649      	mov	r1, r9
   85020:	4620      	mov	r0, r4
   85022:	f001 f8a5 	bl	86170 <_Bfree>
   85026:	2200      	movs	r2, #0
   85028:	9b02      	ldr	r3, [sp, #8]
   8502a:	702a      	strb	r2, [r5, #0]
   8502c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8502e:	3301      	adds	r3, #1
   85030:	6013      	str	r3, [r2, #0]
   85032:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85034:	2b00      	cmp	r3, #0
   85036:	f000 839f 	beq.w	85778 <_dtoa_r+0xad8>
   8503a:	9804      	ldr	r0, [sp, #16]
   8503c:	601d      	str	r5, [r3, #0]
   8503e:	b01b      	add	sp, #108	; 0x6c
   85040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85044:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85046:	2a00      	cmp	r2, #0
   85048:	d03e      	beq.n	850c8 <_dtoa_r+0x428>
   8504a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8504c:	2a01      	cmp	r2, #1
   8504e:	f340 8311 	ble.w	85674 <_dtoa_r+0x9d4>
   85052:	9b07      	ldr	r3, [sp, #28]
   85054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85056:	1e5f      	subs	r7, r3, #1
   85058:	42ba      	cmp	r2, r7
   8505a:	f2c0 8390 	blt.w	8577e <_dtoa_r+0xade>
   8505e:	1bd7      	subs	r7, r2, r7
   85060:	9b07      	ldr	r3, [sp, #28]
   85062:	2b00      	cmp	r3, #0
   85064:	f2c0 848c 	blt.w	85980 <_dtoa_r+0xce0>
   85068:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8506a:	9b07      	ldr	r3, [sp, #28]
   8506c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8506e:	2101      	movs	r1, #1
   85070:	441a      	add	r2, r3
   85072:	920a      	str	r2, [sp, #40]	; 0x28
   85074:	9a08      	ldr	r2, [sp, #32]
   85076:	4620      	mov	r0, r4
   85078:	441a      	add	r2, r3
   8507a:	9208      	str	r2, [sp, #32]
   8507c:	f001 f914 	bl	862a8 <__i2b>
   85080:	4606      	mov	r6, r0
   85082:	e023      	b.n	850cc <_dtoa_r+0x42c>
   85084:	2301      	movs	r3, #1
   85086:	930e      	str	r3, [sp, #56]	; 0x38
   85088:	e6b5      	b.n	84df6 <_dtoa_r+0x156>
   8508a:	2300      	movs	r3, #0
   8508c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8508e:	930d      	str	r3, [sp, #52]	; 0x34
   85090:	9b02      	ldr	r3, [sp, #8]
   85092:	1ad2      	subs	r2, r2, r3
   85094:	425b      	negs	r3, r3
   85096:	920a      	str	r2, [sp, #40]	; 0x28
   85098:	930c      	str	r3, [sp, #48]	; 0x30
   8509a:	e6be      	b.n	84e1a <_dtoa_r+0x17a>
   8509c:	f1c7 0301 	rsb	r3, r7, #1
   850a0:	930a      	str	r3, [sp, #40]	; 0x28
   850a2:	2300      	movs	r3, #0
   850a4:	9308      	str	r3, [sp, #32]
   850a6:	e6ad      	b.n	84e04 <_dtoa_r+0x164>
   850a8:	9d02      	ldr	r5, [sp, #8]
   850aa:	4628      	mov	r0, r5
   850ac:	f002 f91c 	bl	872e8 <__aeabi_i2d>
   850b0:	4602      	mov	r2, r0
   850b2:	460b      	mov	r3, r1
   850b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   850b8:	f002 fbe4 	bl	87884 <__aeabi_dcmpeq>
   850bc:	2800      	cmp	r0, #0
   850be:	f47f ae86 	bne.w	84dce <_dtoa_r+0x12e>
   850c2:	1e6b      	subs	r3, r5, #1
   850c4:	9302      	str	r3, [sp, #8]
   850c6:	e682      	b.n	84dce <_dtoa_r+0x12e>
   850c8:	ad0a      	add	r5, sp, #40	; 0x28
   850ca:	cde0      	ldmia	r5, {r5, r6, r7}
   850cc:	2d00      	cmp	r5, #0
   850ce:	dd0c      	ble.n	850ea <_dtoa_r+0x44a>
   850d0:	9908      	ldr	r1, [sp, #32]
   850d2:	2900      	cmp	r1, #0
   850d4:	460b      	mov	r3, r1
   850d6:	dd08      	ble.n	850ea <_dtoa_r+0x44a>
   850d8:	42a9      	cmp	r1, r5
   850da:	bfa8      	it	ge
   850dc:	462b      	movge	r3, r5
   850de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   850e0:	1aed      	subs	r5, r5, r3
   850e2:	1ad2      	subs	r2, r2, r3
   850e4:	1acb      	subs	r3, r1, r3
   850e6:	920a      	str	r2, [sp, #40]	; 0x28
   850e8:	9308      	str	r3, [sp, #32]
   850ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   850ec:	b1d3      	cbz	r3, 85124 <_dtoa_r+0x484>
   850ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   850f0:	2b00      	cmp	r3, #0
   850f2:	f000 82b8 	beq.w	85666 <_dtoa_r+0x9c6>
   850f6:	2f00      	cmp	r7, #0
   850f8:	dd10      	ble.n	8511c <_dtoa_r+0x47c>
   850fa:	4631      	mov	r1, r6
   850fc:	463a      	mov	r2, r7
   850fe:	4620      	mov	r0, r4
   85100:	f001 f96e 	bl	863e0 <__pow5mult>
   85104:	464a      	mov	r2, r9
   85106:	4601      	mov	r1, r0
   85108:	4606      	mov	r6, r0
   8510a:	4620      	mov	r0, r4
   8510c:	f001 f8d6 	bl	862bc <__multiply>
   85110:	4603      	mov	r3, r0
   85112:	4649      	mov	r1, r9
   85114:	4620      	mov	r0, r4
   85116:	4699      	mov	r9, r3
   85118:	f001 f82a 	bl	86170 <_Bfree>
   8511c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8511e:	1bda      	subs	r2, r3, r7
   85120:	f040 82a2 	bne.w	85668 <_dtoa_r+0x9c8>
   85124:	2101      	movs	r1, #1
   85126:	4620      	mov	r0, r4
   85128:	f001 f8be 	bl	862a8 <__i2b>
   8512c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8512e:	4680      	mov	r8, r0
   85130:	2b00      	cmp	r3, #0
   85132:	dd1f      	ble.n	85174 <_dtoa_r+0x4d4>
   85134:	4601      	mov	r1, r0
   85136:	461a      	mov	r2, r3
   85138:	4620      	mov	r0, r4
   8513a:	f001 f951 	bl	863e0 <__pow5mult>
   8513e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85140:	4680      	mov	r8, r0
   85142:	2b01      	cmp	r3, #1
   85144:	f340 8255 	ble.w	855f2 <_dtoa_r+0x952>
   85148:	2300      	movs	r3, #0
   8514a:	930c      	str	r3, [sp, #48]	; 0x30
   8514c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   85150:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   85154:	6918      	ldr	r0, [r3, #16]
   85156:	f001 f857 	bl	86208 <__hi0bits>
   8515a:	f1c0 0020 	rsb	r0, r0, #32
   8515e:	e013      	b.n	85188 <_dtoa_r+0x4e8>
   85160:	f1c3 0520 	rsb	r5, r3, #32
   85164:	fa0a f005 	lsl.w	r0, sl, r5
   85168:	e67b      	b.n	84e62 <_dtoa_r+0x1c2>
   8516a:	900e      	str	r0, [sp, #56]	; 0x38
   8516c:	e643      	b.n	84df6 <_dtoa_r+0x156>
   8516e:	bf00      	nop
   85170:	40240000 	.word	0x40240000
   85174:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85176:	2b01      	cmp	r3, #1
   85178:	f340 8285 	ble.w	85686 <_dtoa_r+0x9e6>
   8517c:	2300      	movs	r3, #0
   8517e:	930c      	str	r3, [sp, #48]	; 0x30
   85180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85182:	2001      	movs	r0, #1
   85184:	2b00      	cmp	r3, #0
   85186:	d1e1      	bne.n	8514c <_dtoa_r+0x4ac>
   85188:	9a08      	ldr	r2, [sp, #32]
   8518a:	4410      	add	r0, r2
   8518c:	f010 001f 	ands.w	r0, r0, #31
   85190:	f000 80a1 	beq.w	852d6 <_dtoa_r+0x636>
   85194:	f1c0 0320 	rsb	r3, r0, #32
   85198:	2b04      	cmp	r3, #4
   8519a:	f340 8486 	ble.w	85aaa <_dtoa_r+0xe0a>
   8519e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   851a0:	f1c0 001c 	rsb	r0, r0, #28
   851a4:	4403      	add	r3, r0
   851a6:	930a      	str	r3, [sp, #40]	; 0x28
   851a8:	4613      	mov	r3, r2
   851aa:	4403      	add	r3, r0
   851ac:	4405      	add	r5, r0
   851ae:	9308      	str	r3, [sp, #32]
   851b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   851b2:	2b00      	cmp	r3, #0
   851b4:	dd05      	ble.n	851c2 <_dtoa_r+0x522>
   851b6:	4649      	mov	r1, r9
   851b8:	461a      	mov	r2, r3
   851ba:	4620      	mov	r0, r4
   851bc:	f001 f960 	bl	86480 <__lshift>
   851c0:	4681      	mov	r9, r0
   851c2:	9b08      	ldr	r3, [sp, #32]
   851c4:	2b00      	cmp	r3, #0
   851c6:	dd05      	ble.n	851d4 <_dtoa_r+0x534>
   851c8:	4641      	mov	r1, r8
   851ca:	461a      	mov	r2, r3
   851cc:	4620      	mov	r0, r4
   851ce:	f001 f957 	bl	86480 <__lshift>
   851d2:	4680      	mov	r8, r0
   851d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   851d6:	2b00      	cmp	r3, #0
   851d8:	f040 8086 	bne.w	852e8 <_dtoa_r+0x648>
   851dc:	9b07      	ldr	r3, [sp, #28]
   851de:	2b00      	cmp	r3, #0
   851e0:	f340 8264 	ble.w	856ac <_dtoa_r+0xa0c>
   851e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   851e6:	2b00      	cmp	r3, #0
   851e8:	f000 8098 	beq.w	8531c <_dtoa_r+0x67c>
   851ec:	2d00      	cmp	r5, #0
   851ee:	dd05      	ble.n	851fc <_dtoa_r+0x55c>
   851f0:	4631      	mov	r1, r6
   851f2:	462a      	mov	r2, r5
   851f4:	4620      	mov	r0, r4
   851f6:	f001 f943 	bl	86480 <__lshift>
   851fa:	4606      	mov	r6, r0
   851fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   851fe:	2b00      	cmp	r3, #0
   85200:	f040 8336 	bne.w	85870 <_dtoa_r+0xbd0>
   85204:	9608      	str	r6, [sp, #32]
   85206:	9b07      	ldr	r3, [sp, #28]
   85208:	9a04      	ldr	r2, [sp, #16]
   8520a:	3b01      	subs	r3, #1
   8520c:	18d3      	adds	r3, r2, r3
   8520e:	930b      	str	r3, [sp, #44]	; 0x2c
   85210:	4617      	mov	r7, r2
   85212:	f00a 0301 	and.w	r3, sl, #1
   85216:	46c2      	mov	sl, r8
   85218:	f8dd b020 	ldr.w	fp, [sp, #32]
   8521c:	930c      	str	r3, [sp, #48]	; 0x30
   8521e:	4651      	mov	r1, sl
   85220:	4648      	mov	r0, r9
   85222:	f7ff fca7 	bl	84b74 <quorem>
   85226:	4631      	mov	r1, r6
   85228:	4605      	mov	r5, r0
   8522a:	4648      	mov	r0, r9
   8522c:	f001 f978 	bl	86520 <__mcmp>
   85230:	465a      	mov	r2, fp
   85232:	9007      	str	r0, [sp, #28]
   85234:	4651      	mov	r1, sl
   85236:	4620      	mov	r0, r4
   85238:	f001 f98e 	bl	86558 <__mdiff>
   8523c:	68c2      	ldr	r2, [r0, #12]
   8523e:	4680      	mov	r8, r0
   85240:	f105 0330 	add.w	r3, r5, #48	; 0x30
   85244:	2a00      	cmp	r2, #0
   85246:	f040 8229 	bne.w	8569c <_dtoa_r+0x9fc>
   8524a:	4601      	mov	r1, r0
   8524c:	4648      	mov	r0, r9
   8524e:	930a      	str	r3, [sp, #40]	; 0x28
   85250:	f001 f966 	bl	86520 <__mcmp>
   85254:	4641      	mov	r1, r8
   85256:	9008      	str	r0, [sp, #32]
   85258:	4620      	mov	r0, r4
   8525a:	f000 ff89 	bl	86170 <_Bfree>
   8525e:	9a08      	ldr	r2, [sp, #32]
   85260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85262:	b932      	cbnz	r2, 85272 <_dtoa_r+0x5d2>
   85264:	9924      	ldr	r1, [sp, #144]	; 0x90
   85266:	b921      	cbnz	r1, 85272 <_dtoa_r+0x5d2>
   85268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8526a:	2a00      	cmp	r2, #0
   8526c:	f000 83ee 	beq.w	85a4c <_dtoa_r+0xdac>
   85270:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85272:	9907      	ldr	r1, [sp, #28]
   85274:	2900      	cmp	r1, #0
   85276:	f2c0 829f 	blt.w	857b8 <_dtoa_r+0xb18>
   8527a:	d105      	bne.n	85288 <_dtoa_r+0x5e8>
   8527c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8527e:	b919      	cbnz	r1, 85288 <_dtoa_r+0x5e8>
   85280:	990c      	ldr	r1, [sp, #48]	; 0x30
   85282:	2900      	cmp	r1, #0
   85284:	f000 8298 	beq.w	857b8 <_dtoa_r+0xb18>
   85288:	2a00      	cmp	r2, #0
   8528a:	f300 8305 	bgt.w	85898 <_dtoa_r+0xbf8>
   8528e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85290:	f107 0801 	add.w	r8, r7, #1
   85294:	4297      	cmp	r7, r2
   85296:	703b      	strb	r3, [r7, #0]
   85298:	4645      	mov	r5, r8
   8529a:	f000 830b 	beq.w	858b4 <_dtoa_r+0xc14>
   8529e:	4649      	mov	r1, r9
   852a0:	2300      	movs	r3, #0
   852a2:	220a      	movs	r2, #10
   852a4:	4620      	mov	r0, r4
   852a6:	f000 ff6d 	bl	86184 <__multadd>
   852aa:	455e      	cmp	r6, fp
   852ac:	4681      	mov	r9, r0
   852ae:	4631      	mov	r1, r6
   852b0:	f04f 0300 	mov.w	r3, #0
   852b4:	f04f 020a 	mov.w	r2, #10
   852b8:	4620      	mov	r0, r4
   852ba:	f000 81e9 	beq.w	85690 <_dtoa_r+0x9f0>
   852be:	f000 ff61 	bl	86184 <__multadd>
   852c2:	4659      	mov	r1, fp
   852c4:	4606      	mov	r6, r0
   852c6:	2300      	movs	r3, #0
   852c8:	220a      	movs	r2, #10
   852ca:	4620      	mov	r0, r4
   852cc:	f000 ff5a 	bl	86184 <__multadd>
   852d0:	4647      	mov	r7, r8
   852d2:	4683      	mov	fp, r0
   852d4:	e7a3      	b.n	8521e <_dtoa_r+0x57e>
   852d6:	201c      	movs	r0, #28
   852d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   852da:	4405      	add	r5, r0
   852dc:	4403      	add	r3, r0
   852de:	930a      	str	r3, [sp, #40]	; 0x28
   852e0:	9b08      	ldr	r3, [sp, #32]
   852e2:	4403      	add	r3, r0
   852e4:	9308      	str	r3, [sp, #32]
   852e6:	e763      	b.n	851b0 <_dtoa_r+0x510>
   852e8:	4641      	mov	r1, r8
   852ea:	4648      	mov	r0, r9
   852ec:	f001 f918 	bl	86520 <__mcmp>
   852f0:	2800      	cmp	r0, #0
   852f2:	f6bf af73 	bge.w	851dc <_dtoa_r+0x53c>
   852f6:	9f02      	ldr	r7, [sp, #8]
   852f8:	4649      	mov	r1, r9
   852fa:	2300      	movs	r3, #0
   852fc:	220a      	movs	r2, #10
   852fe:	4620      	mov	r0, r4
   85300:	3f01      	subs	r7, #1
   85302:	9702      	str	r7, [sp, #8]
   85304:	f000 ff3e 	bl	86184 <__multadd>
   85308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8530a:	4681      	mov	r9, r0
   8530c:	2b00      	cmp	r3, #0
   8530e:	f040 83b5 	bne.w	85a7c <_dtoa_r+0xddc>
   85312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85314:	2b00      	cmp	r3, #0
   85316:	f340 83be 	ble.w	85a96 <_dtoa_r+0xdf6>
   8531a:	9307      	str	r3, [sp, #28]
   8531c:	f8dd a010 	ldr.w	sl, [sp, #16]
   85320:	9f07      	ldr	r7, [sp, #28]
   85322:	4655      	mov	r5, sl
   85324:	e006      	b.n	85334 <_dtoa_r+0x694>
   85326:	4649      	mov	r1, r9
   85328:	2300      	movs	r3, #0
   8532a:	220a      	movs	r2, #10
   8532c:	4620      	mov	r0, r4
   8532e:	f000 ff29 	bl	86184 <__multadd>
   85332:	4681      	mov	r9, r0
   85334:	4641      	mov	r1, r8
   85336:	4648      	mov	r0, r9
   85338:	f7ff fc1c 	bl	84b74 <quorem>
   8533c:	3030      	adds	r0, #48	; 0x30
   8533e:	f805 0b01 	strb.w	r0, [r5], #1
   85342:	eba5 030a 	sub.w	r3, r5, sl
   85346:	42bb      	cmp	r3, r7
   85348:	dbed      	blt.n	85326 <_dtoa_r+0x686>
   8534a:	9b04      	ldr	r3, [sp, #16]
   8534c:	9a07      	ldr	r2, [sp, #28]
   8534e:	4682      	mov	sl, r0
   85350:	2a01      	cmp	r2, #1
   85352:	bfac      	ite	ge
   85354:	189b      	addge	r3, r3, r2
   85356:	3301      	addlt	r3, #1
   85358:	f04f 0b00 	mov.w	fp, #0
   8535c:	461d      	mov	r5, r3
   8535e:	4649      	mov	r1, r9
   85360:	2201      	movs	r2, #1
   85362:	4620      	mov	r0, r4
   85364:	f001 f88c 	bl	86480 <__lshift>
   85368:	4641      	mov	r1, r8
   8536a:	4681      	mov	r9, r0
   8536c:	f001 f8d8 	bl	86520 <__mcmp>
   85370:	2800      	cmp	r0, #0
   85372:	f340 823f 	ble.w	857f4 <_dtoa_r+0xb54>
   85376:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   8537a:	1e6b      	subs	r3, r5, #1
   8537c:	9904      	ldr	r1, [sp, #16]
   8537e:	e004      	b.n	8538a <_dtoa_r+0x6ea>
   85380:	428b      	cmp	r3, r1
   85382:	f000 81ae 	beq.w	856e2 <_dtoa_r+0xa42>
   85386:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   8538a:	2a39      	cmp	r2, #57	; 0x39
   8538c:	f103 0501 	add.w	r5, r3, #1
   85390:	d0f6      	beq.n	85380 <_dtoa_r+0x6e0>
   85392:	3201      	adds	r2, #1
   85394:	701a      	strb	r2, [r3, #0]
   85396:	4641      	mov	r1, r8
   85398:	4620      	mov	r0, r4
   8539a:	f000 fee9 	bl	86170 <_Bfree>
   8539e:	2e00      	cmp	r6, #0
   853a0:	f43f ae3d 	beq.w	8501e <_dtoa_r+0x37e>
   853a4:	f1bb 0f00 	cmp.w	fp, #0
   853a8:	d005      	beq.n	853b6 <_dtoa_r+0x716>
   853aa:	45b3      	cmp	fp, r6
   853ac:	d003      	beq.n	853b6 <_dtoa_r+0x716>
   853ae:	4659      	mov	r1, fp
   853b0:	4620      	mov	r0, r4
   853b2:	f000 fedd 	bl	86170 <_Bfree>
   853b6:	4631      	mov	r1, r6
   853b8:	4620      	mov	r0, r4
   853ba:	f000 fed9 	bl	86170 <_Bfree>
   853be:	e62e      	b.n	8501e <_dtoa_r+0x37e>
   853c0:	2300      	movs	r3, #0
   853c2:	930b      	str	r3, [sp, #44]	; 0x2c
   853c4:	9b02      	ldr	r3, [sp, #8]
   853c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   853c8:	4413      	add	r3, r2
   853ca:	930f      	str	r3, [sp, #60]	; 0x3c
   853cc:	3301      	adds	r3, #1
   853ce:	2b01      	cmp	r3, #1
   853d0:	461f      	mov	r7, r3
   853d2:	461e      	mov	r6, r3
   853d4:	bfb8      	it	lt
   853d6:	2701      	movlt	r7, #1
   853d8:	9307      	str	r3, [sp, #28]
   853da:	2100      	movs	r1, #0
   853dc:	2f17      	cmp	r7, #23
   853de:	6461      	str	r1, [r4, #68]	; 0x44
   853e0:	d90a      	bls.n	853f8 <_dtoa_r+0x758>
   853e2:	2201      	movs	r2, #1
   853e4:	2304      	movs	r3, #4
   853e6:	005b      	lsls	r3, r3, #1
   853e8:	f103 0014 	add.w	r0, r3, #20
   853ec:	4287      	cmp	r7, r0
   853ee:	4611      	mov	r1, r2
   853f0:	f102 0201 	add.w	r2, r2, #1
   853f4:	d2f7      	bcs.n	853e6 <_dtoa_r+0x746>
   853f6:	6461      	str	r1, [r4, #68]	; 0x44
   853f8:	4620      	mov	r0, r4
   853fa:	f000 fe93 	bl	86124 <_Balloc>
   853fe:	2e0e      	cmp	r6, #14
   85400:	9004      	str	r0, [sp, #16]
   85402:	6420      	str	r0, [r4, #64]	; 0x40
   85404:	f63f ad47 	bhi.w	84e96 <_dtoa_r+0x1f6>
   85408:	2d00      	cmp	r5, #0
   8540a:	f43f ad44 	beq.w	84e96 <_dtoa_r+0x1f6>
   8540e:	9902      	ldr	r1, [sp, #8]
   85410:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   85414:	2900      	cmp	r1, #0
   85416:	f340 8203 	ble.w	85820 <_dtoa_r+0xb80>
   8541a:	4bb9      	ldr	r3, [pc, #740]	; (85700 <_dtoa_r+0xa60>)
   8541c:	f001 020f 	and.w	r2, r1, #15
   85420:	110d      	asrs	r5, r1, #4
   85422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85426:	06e9      	lsls	r1, r5, #27
   85428:	e9d3 6700 	ldrd	r6, r7, [r3]
   8542c:	f140 81af 	bpl.w	8578e <_dtoa_r+0xaee>
   85430:	4bb4      	ldr	r3, [pc, #720]	; (85704 <_dtoa_r+0xa64>)
   85432:	4650      	mov	r0, sl
   85434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   85438:	4659      	mov	r1, fp
   8543a:	f002 f8e5 	bl	87608 <__aeabi_ddiv>
   8543e:	f04f 0a03 	mov.w	sl, #3
   85442:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   85446:	f005 050f 	and.w	r5, r5, #15
   8544a:	b18d      	cbz	r5, 85470 <_dtoa_r+0x7d0>
   8544c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 85704 <_dtoa_r+0xa64>
   85450:	07ea      	lsls	r2, r5, #31
   85452:	d509      	bpl.n	85468 <_dtoa_r+0x7c8>
   85454:	e9d8 2300 	ldrd	r2, r3, [r8]
   85458:	4630      	mov	r0, r6
   8545a:	4639      	mov	r1, r7
   8545c:	f001 ffaa 	bl	873b4 <__aeabi_dmul>
   85460:	4606      	mov	r6, r0
   85462:	460f      	mov	r7, r1
   85464:	f10a 0a01 	add.w	sl, sl, #1
   85468:	106d      	asrs	r5, r5, #1
   8546a:	f108 0808 	add.w	r8, r8, #8
   8546e:	d1ef      	bne.n	85450 <_dtoa_r+0x7b0>
   85470:	463b      	mov	r3, r7
   85472:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   85476:	4632      	mov	r2, r6
   85478:	f002 f8c6 	bl	87608 <__aeabi_ddiv>
   8547c:	4607      	mov	r7, r0
   8547e:	4688      	mov	r8, r1
   85480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85482:	b143      	cbz	r3, 85496 <_dtoa_r+0x7f6>
   85484:	2200      	movs	r2, #0
   85486:	4ba0      	ldr	r3, [pc, #640]	; (85708 <_dtoa_r+0xa68>)
   85488:	4638      	mov	r0, r7
   8548a:	4641      	mov	r1, r8
   8548c:	f002 fa04 	bl	87898 <__aeabi_dcmplt>
   85490:	2800      	cmp	r0, #0
   85492:	f040 8287 	bne.w	859a4 <_dtoa_r+0xd04>
   85496:	4650      	mov	r0, sl
   85498:	f001 ff26 	bl	872e8 <__aeabi_i2d>
   8549c:	463a      	mov	r2, r7
   8549e:	4643      	mov	r3, r8
   854a0:	f001 ff88 	bl	873b4 <__aeabi_dmul>
   854a4:	4b99      	ldr	r3, [pc, #612]	; (8570c <_dtoa_r+0xa6c>)
   854a6:	2200      	movs	r2, #0
   854a8:	f001 fdd2 	bl	87050 <__adddf3>
   854ac:	9b07      	ldr	r3, [sp, #28]
   854ae:	4605      	mov	r5, r0
   854b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   854b4:	2b00      	cmp	r3, #0
   854b6:	f000 813f 	beq.w	85738 <_dtoa_r+0xa98>
   854ba:	9b02      	ldr	r3, [sp, #8]
   854bc:	9315      	str	r3, [sp, #84]	; 0x54
   854be:	9b07      	ldr	r3, [sp, #28]
   854c0:	9312      	str	r3, [sp, #72]	; 0x48
   854c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   854c4:	2b00      	cmp	r3, #0
   854c6:	f000 81fb 	beq.w	858c0 <_dtoa_r+0xc20>
   854ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
   854cc:	4b8c      	ldr	r3, [pc, #560]	; (85700 <_dtoa_r+0xa60>)
   854ce:	2000      	movs	r0, #0
   854d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   854d4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   854d8:	498d      	ldr	r1, [pc, #564]	; (85710 <_dtoa_r+0xa70>)
   854da:	f002 f895 	bl	87608 <__aeabi_ddiv>
   854de:	462a      	mov	r2, r5
   854e0:	4633      	mov	r3, r6
   854e2:	f001 fdb3 	bl	8704c <__aeabi_dsub>
   854e6:	4682      	mov	sl, r0
   854e8:	468b      	mov	fp, r1
   854ea:	4638      	mov	r0, r7
   854ec:	4641      	mov	r1, r8
   854ee:	f002 fa11 	bl	87914 <__aeabi_d2iz>
   854f2:	4605      	mov	r5, r0
   854f4:	f001 fef8 	bl	872e8 <__aeabi_i2d>
   854f8:	4602      	mov	r2, r0
   854fa:	460b      	mov	r3, r1
   854fc:	4638      	mov	r0, r7
   854fe:	4641      	mov	r1, r8
   85500:	f001 fda4 	bl	8704c <__aeabi_dsub>
   85504:	3530      	adds	r5, #48	; 0x30
   85506:	fa5f f885 	uxtb.w	r8, r5
   8550a:	9d04      	ldr	r5, [sp, #16]
   8550c:	4606      	mov	r6, r0
   8550e:	460f      	mov	r7, r1
   85510:	f885 8000 	strb.w	r8, [r5]
   85514:	4602      	mov	r2, r0
   85516:	460b      	mov	r3, r1
   85518:	4650      	mov	r0, sl
   8551a:	4659      	mov	r1, fp
   8551c:	3501      	adds	r5, #1
   8551e:	f002 f9d9 	bl	878d4 <__aeabi_dcmpgt>
   85522:	2800      	cmp	r0, #0
   85524:	d154      	bne.n	855d0 <_dtoa_r+0x930>
   85526:	4632      	mov	r2, r6
   85528:	463b      	mov	r3, r7
   8552a:	2000      	movs	r0, #0
   8552c:	4976      	ldr	r1, [pc, #472]	; (85708 <_dtoa_r+0xa68>)
   8552e:	f001 fd8d 	bl	8704c <__aeabi_dsub>
   85532:	4602      	mov	r2, r0
   85534:	460b      	mov	r3, r1
   85536:	4650      	mov	r0, sl
   85538:	4659      	mov	r1, fp
   8553a:	f002 f9cb 	bl	878d4 <__aeabi_dcmpgt>
   8553e:	2800      	cmp	r0, #0
   85540:	f040 8270 	bne.w	85a24 <_dtoa_r+0xd84>
   85544:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85546:	2a01      	cmp	r2, #1
   85548:	f000 8112 	beq.w	85770 <_dtoa_r+0xad0>
   8554c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8554e:	9a04      	ldr	r2, [sp, #16]
   85550:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   85554:	4413      	add	r3, r2
   85556:	4699      	mov	r9, r3
   85558:	e00f      	b.n	8557a <_dtoa_r+0x8da>
   8555a:	4632      	mov	r2, r6
   8555c:	463b      	mov	r3, r7
   8555e:	2000      	movs	r0, #0
   85560:	4969      	ldr	r1, [pc, #420]	; (85708 <_dtoa_r+0xa68>)
   85562:	f001 fd73 	bl	8704c <__aeabi_dsub>
   85566:	4652      	mov	r2, sl
   85568:	465b      	mov	r3, fp
   8556a:	f002 f995 	bl	87898 <__aeabi_dcmplt>
   8556e:	2800      	cmp	r0, #0
   85570:	f040 8256 	bne.w	85a20 <_dtoa_r+0xd80>
   85574:	454d      	cmp	r5, r9
   85576:	f000 80f9 	beq.w	8576c <_dtoa_r+0xacc>
   8557a:	4650      	mov	r0, sl
   8557c:	4659      	mov	r1, fp
   8557e:	2200      	movs	r2, #0
   85580:	4b64      	ldr	r3, [pc, #400]	; (85714 <_dtoa_r+0xa74>)
   85582:	f001 ff17 	bl	873b4 <__aeabi_dmul>
   85586:	2200      	movs	r2, #0
   85588:	4b62      	ldr	r3, [pc, #392]	; (85714 <_dtoa_r+0xa74>)
   8558a:	4682      	mov	sl, r0
   8558c:	468b      	mov	fp, r1
   8558e:	4630      	mov	r0, r6
   85590:	4639      	mov	r1, r7
   85592:	f001 ff0f 	bl	873b4 <__aeabi_dmul>
   85596:	460f      	mov	r7, r1
   85598:	4606      	mov	r6, r0
   8559a:	f002 f9bb 	bl	87914 <__aeabi_d2iz>
   8559e:	4680      	mov	r8, r0
   855a0:	f001 fea2 	bl	872e8 <__aeabi_i2d>
   855a4:	4602      	mov	r2, r0
   855a6:	460b      	mov	r3, r1
   855a8:	4630      	mov	r0, r6
   855aa:	4639      	mov	r1, r7
   855ac:	f001 fd4e 	bl	8704c <__aeabi_dsub>
   855b0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   855b4:	fa5f f888 	uxtb.w	r8, r8
   855b8:	f805 8b01 	strb.w	r8, [r5], #1
   855bc:	4652      	mov	r2, sl
   855be:	465b      	mov	r3, fp
   855c0:	4606      	mov	r6, r0
   855c2:	460f      	mov	r7, r1
   855c4:	f002 f968 	bl	87898 <__aeabi_dcmplt>
   855c8:	2800      	cmp	r0, #0
   855ca:	d0c6      	beq.n	8555a <_dtoa_r+0x8ba>
   855cc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   855d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   855d2:	9302      	str	r3, [sp, #8]
   855d4:	e523      	b.n	8501e <_dtoa_r+0x37e>
   855d6:	2300      	movs	r3, #0
   855d8:	930b      	str	r3, [sp, #44]	; 0x2c
   855da:	9b25      	ldr	r3, [sp, #148]	; 0x94
   855dc:	2b00      	cmp	r3, #0
   855de:	f340 80dd 	ble.w	8579c <_dtoa_r+0xafc>
   855e2:	461f      	mov	r7, r3
   855e4:	461e      	mov	r6, r3
   855e6:	930f      	str	r3, [sp, #60]	; 0x3c
   855e8:	9307      	str	r3, [sp, #28]
   855ea:	e6f6      	b.n	853da <_dtoa_r+0x73a>
   855ec:	2301      	movs	r3, #1
   855ee:	930b      	str	r3, [sp, #44]	; 0x2c
   855f0:	e7f3      	b.n	855da <_dtoa_r+0x93a>
   855f2:	f1ba 0f00 	cmp.w	sl, #0
   855f6:	f47f ada7 	bne.w	85148 <_dtoa_r+0x4a8>
   855fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   855fe:	2b00      	cmp	r3, #0
   85600:	f47f adbc 	bne.w	8517c <_dtoa_r+0x4dc>
   85604:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   85608:	0d3f      	lsrs	r7, r7, #20
   8560a:	053f      	lsls	r7, r7, #20
   8560c:	2f00      	cmp	r7, #0
   8560e:	f000 820d 	beq.w	85a2c <_dtoa_r+0xd8c>
   85612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85614:	3301      	adds	r3, #1
   85616:	930a      	str	r3, [sp, #40]	; 0x28
   85618:	9b08      	ldr	r3, [sp, #32]
   8561a:	3301      	adds	r3, #1
   8561c:	9308      	str	r3, [sp, #32]
   8561e:	2301      	movs	r3, #1
   85620:	930c      	str	r3, [sp, #48]	; 0x30
   85622:	e5ad      	b.n	85180 <_dtoa_r+0x4e0>
   85624:	9b07      	ldr	r3, [sp, #28]
   85626:	2b00      	cmp	r3, #0
   85628:	f73f ac48 	bgt.w	84ebc <_dtoa_r+0x21c>
   8562c:	f040 8222 	bne.w	85a74 <_dtoa_r+0xdd4>
   85630:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85634:	2200      	movs	r2, #0
   85636:	4b38      	ldr	r3, [pc, #224]	; (85718 <_dtoa_r+0xa78>)
   85638:	f001 febc 	bl	873b4 <__aeabi_dmul>
   8563c:	4652      	mov	r2, sl
   8563e:	465b      	mov	r3, fp
   85640:	f002 f93e 	bl	878c0 <__aeabi_dcmpge>
   85644:	f8dd 801c 	ldr.w	r8, [sp, #28]
   85648:	4646      	mov	r6, r8
   8564a:	2800      	cmp	r0, #0
   8564c:	d041      	beq.n	856d2 <_dtoa_r+0xa32>
   8564e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85650:	9d04      	ldr	r5, [sp, #16]
   85652:	43db      	mvns	r3, r3
   85654:	9302      	str	r3, [sp, #8]
   85656:	4641      	mov	r1, r8
   85658:	4620      	mov	r0, r4
   8565a:	f000 fd89 	bl	86170 <_Bfree>
   8565e:	2e00      	cmp	r6, #0
   85660:	f43f acdd 	beq.w	8501e <_dtoa_r+0x37e>
   85664:	e6a7      	b.n	853b6 <_dtoa_r+0x716>
   85666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85668:	4649      	mov	r1, r9
   8566a:	4620      	mov	r0, r4
   8566c:	f000 feb8 	bl	863e0 <__pow5mult>
   85670:	4681      	mov	r9, r0
   85672:	e557      	b.n	85124 <_dtoa_r+0x484>
   85674:	9a14      	ldr	r2, [sp, #80]	; 0x50
   85676:	2a00      	cmp	r2, #0
   85678:	f000 8188 	beq.w	8598c <_dtoa_r+0xcec>
   8567c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   85680:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85682:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85684:	e4f2      	b.n	8506c <_dtoa_r+0x3cc>
   85686:	f1ba 0f00 	cmp.w	sl, #0
   8568a:	f47f ad77 	bne.w	8517c <_dtoa_r+0x4dc>
   8568e:	e7b4      	b.n	855fa <_dtoa_r+0x95a>
   85690:	f000 fd78 	bl	86184 <__multadd>
   85694:	4647      	mov	r7, r8
   85696:	4606      	mov	r6, r0
   85698:	4683      	mov	fp, r0
   8569a:	e5c0      	b.n	8521e <_dtoa_r+0x57e>
   8569c:	4601      	mov	r1, r0
   8569e:	4620      	mov	r0, r4
   856a0:	9308      	str	r3, [sp, #32]
   856a2:	f000 fd65 	bl	86170 <_Bfree>
   856a6:	2201      	movs	r2, #1
   856a8:	9b08      	ldr	r3, [sp, #32]
   856aa:	e5e2      	b.n	85272 <_dtoa_r+0x5d2>
   856ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   856ae:	2b02      	cmp	r3, #2
   856b0:	f77f ad98 	ble.w	851e4 <_dtoa_r+0x544>
   856b4:	9b07      	ldr	r3, [sp, #28]
   856b6:	2b00      	cmp	r3, #0
   856b8:	d1c9      	bne.n	8564e <_dtoa_r+0x9ae>
   856ba:	4641      	mov	r1, r8
   856bc:	2205      	movs	r2, #5
   856be:	4620      	mov	r0, r4
   856c0:	f000 fd60 	bl	86184 <__multadd>
   856c4:	4601      	mov	r1, r0
   856c6:	4680      	mov	r8, r0
   856c8:	4648      	mov	r0, r9
   856ca:	f000 ff29 	bl	86520 <__mcmp>
   856ce:	2800      	cmp	r0, #0
   856d0:	ddbd      	ble.n	8564e <_dtoa_r+0x9ae>
   856d2:	2331      	movs	r3, #49	; 0x31
   856d4:	9a02      	ldr	r2, [sp, #8]
   856d6:	9904      	ldr	r1, [sp, #16]
   856d8:	3201      	adds	r2, #1
   856da:	9202      	str	r2, [sp, #8]
   856dc:	700b      	strb	r3, [r1, #0]
   856de:	1c4d      	adds	r5, r1, #1
   856e0:	e7b9      	b.n	85656 <_dtoa_r+0x9b6>
   856e2:	2331      	movs	r3, #49	; 0x31
   856e4:	9a02      	ldr	r2, [sp, #8]
   856e6:	3201      	adds	r2, #1
   856e8:	9202      	str	r2, [sp, #8]
   856ea:	9a04      	ldr	r2, [sp, #16]
   856ec:	7013      	strb	r3, [r2, #0]
   856ee:	e652      	b.n	85396 <_dtoa_r+0x6f6>
   856f0:	2301      	movs	r3, #1
   856f2:	930b      	str	r3, [sp, #44]	; 0x2c
   856f4:	e666      	b.n	853c4 <_dtoa_r+0x724>
   856f6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   856fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   856fc:	e48f      	b.n	8501e <_dtoa_r+0x37e>
   856fe:	bf00      	nop
   85700:	00087eb0 	.word	0x00087eb0
   85704:	00087e88 	.word	0x00087e88
   85708:	3ff00000 	.word	0x3ff00000
   8570c:	401c0000 	.word	0x401c0000
   85710:	3fe00000 	.word	0x3fe00000
   85714:	40240000 	.word	0x40240000
   85718:	40140000 	.word	0x40140000
   8571c:	4650      	mov	r0, sl
   8571e:	f001 fde3 	bl	872e8 <__aeabi_i2d>
   85722:	463a      	mov	r2, r7
   85724:	4643      	mov	r3, r8
   85726:	f001 fe45 	bl	873b4 <__aeabi_dmul>
   8572a:	2200      	movs	r2, #0
   8572c:	4bc1      	ldr	r3, [pc, #772]	; (85a34 <_dtoa_r+0xd94>)
   8572e:	f001 fc8f 	bl	87050 <__adddf3>
   85732:	4605      	mov	r5, r0
   85734:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   85738:	4641      	mov	r1, r8
   8573a:	2200      	movs	r2, #0
   8573c:	4bbe      	ldr	r3, [pc, #760]	; (85a38 <_dtoa_r+0xd98>)
   8573e:	4638      	mov	r0, r7
   85740:	f001 fc84 	bl	8704c <__aeabi_dsub>
   85744:	462a      	mov	r2, r5
   85746:	4633      	mov	r3, r6
   85748:	4682      	mov	sl, r0
   8574a:	468b      	mov	fp, r1
   8574c:	f002 f8c2 	bl	878d4 <__aeabi_dcmpgt>
   85750:	4680      	mov	r8, r0
   85752:	2800      	cmp	r0, #0
   85754:	f040 8110 	bne.w	85978 <_dtoa_r+0xcd8>
   85758:	462a      	mov	r2, r5
   8575a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8575e:	4650      	mov	r0, sl
   85760:	4659      	mov	r1, fp
   85762:	f002 f899 	bl	87898 <__aeabi_dcmplt>
   85766:	b118      	cbz	r0, 85770 <_dtoa_r+0xad0>
   85768:	4646      	mov	r6, r8
   8576a:	e770      	b.n	8564e <_dtoa_r+0x9ae>
   8576c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85770:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   85774:	f7ff bb8f 	b.w	84e96 <_dtoa_r+0x1f6>
   85778:	9804      	ldr	r0, [sp, #16]
   8577a:	f7ff bac0 	b.w	84cfe <_dtoa_r+0x5e>
   8577e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85782:	1afb      	subs	r3, r7, r3
   85784:	441a      	add	r2, r3
   85786:	970c      	str	r7, [sp, #48]	; 0x30
   85788:	920d      	str	r2, [sp, #52]	; 0x34
   8578a:	2700      	movs	r7, #0
   8578c:	e468      	b.n	85060 <_dtoa_r+0x3c0>
   8578e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   85792:	f04f 0a02 	mov.w	sl, #2
   85796:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   8579a:	e656      	b.n	8544a <_dtoa_r+0x7aa>
   8579c:	2100      	movs	r1, #0
   8579e:	2301      	movs	r3, #1
   857a0:	4620      	mov	r0, r4
   857a2:	6461      	str	r1, [r4, #68]	; 0x44
   857a4:	9325      	str	r3, [sp, #148]	; 0x94
   857a6:	f000 fcbd 	bl	86124 <_Balloc>
   857aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   857ac:	9004      	str	r0, [sp, #16]
   857ae:	9307      	str	r3, [sp, #28]
   857b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   857b2:	6420      	str	r0, [r4, #64]	; 0x40
   857b4:	930f      	str	r3, [sp, #60]	; 0x3c
   857b6:	e627      	b.n	85408 <_dtoa_r+0x768>
   857b8:	2a00      	cmp	r2, #0
   857ba:	46d0      	mov	r8, sl
   857bc:	f8cd b020 	str.w	fp, [sp, #32]
   857c0:	469a      	mov	sl, r3
   857c2:	dd11      	ble.n	857e8 <_dtoa_r+0xb48>
   857c4:	4649      	mov	r1, r9
   857c6:	2201      	movs	r2, #1
   857c8:	4620      	mov	r0, r4
   857ca:	f000 fe59 	bl	86480 <__lshift>
   857ce:	4641      	mov	r1, r8
   857d0:	4681      	mov	r9, r0
   857d2:	f000 fea5 	bl	86520 <__mcmp>
   857d6:	2800      	cmp	r0, #0
   857d8:	f340 8145 	ble.w	85a66 <_dtoa_r+0xdc6>
   857dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   857e0:	f000 8105 	beq.w	859ee <_dtoa_r+0xd4e>
   857e4:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   857e8:	46b3      	mov	fp, r6
   857ea:	f887 a000 	strb.w	sl, [r7]
   857ee:	1c7d      	adds	r5, r7, #1
   857f0:	9e08      	ldr	r6, [sp, #32]
   857f2:	e5d0      	b.n	85396 <_dtoa_r+0x6f6>
   857f4:	d104      	bne.n	85800 <_dtoa_r+0xb60>
   857f6:	f01a 0f01 	tst.w	sl, #1
   857fa:	d001      	beq.n	85800 <_dtoa_r+0xb60>
   857fc:	e5bb      	b.n	85376 <_dtoa_r+0x6d6>
   857fe:	4615      	mov	r5, r2
   85800:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   85804:	1e6a      	subs	r2, r5, #1
   85806:	2b30      	cmp	r3, #48	; 0x30
   85808:	d0f9      	beq.n	857fe <_dtoa_r+0xb5e>
   8580a:	e5c4      	b.n	85396 <_dtoa_r+0x6f6>
   8580c:	2230      	movs	r2, #48	; 0x30
   8580e:	9904      	ldr	r1, [sp, #16]
   85810:	700a      	strb	r2, [r1, #0]
   85812:	9a02      	ldr	r2, [sp, #8]
   85814:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   85818:	3201      	adds	r2, #1
   8581a:	9202      	str	r2, [sp, #8]
   8581c:	f7ff bbfb 	b.w	85016 <_dtoa_r+0x376>
   85820:	f000 80bb 	beq.w	8599a <_dtoa_r+0xcfa>
   85824:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   85828:	9b02      	ldr	r3, [sp, #8]
   8582a:	f04f 0a02 	mov.w	sl, #2
   8582e:	425d      	negs	r5, r3
   85830:	4b82      	ldr	r3, [pc, #520]	; (85a3c <_dtoa_r+0xd9c>)
   85832:	f005 020f 	and.w	r2, r5, #15
   85836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8583a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8583e:	f001 fdb9 	bl	873b4 <__aeabi_dmul>
   85842:	112d      	asrs	r5, r5, #4
   85844:	4607      	mov	r7, r0
   85846:	4688      	mov	r8, r1
   85848:	f43f ae1a 	beq.w	85480 <_dtoa_r+0x7e0>
   8584c:	4e7c      	ldr	r6, [pc, #496]	; (85a40 <_dtoa_r+0xda0>)
   8584e:	07eb      	lsls	r3, r5, #31
   85850:	d509      	bpl.n	85866 <_dtoa_r+0xbc6>
   85852:	e9d6 2300 	ldrd	r2, r3, [r6]
   85856:	4638      	mov	r0, r7
   85858:	4641      	mov	r1, r8
   8585a:	f001 fdab 	bl	873b4 <__aeabi_dmul>
   8585e:	4607      	mov	r7, r0
   85860:	4688      	mov	r8, r1
   85862:	f10a 0a01 	add.w	sl, sl, #1
   85866:	106d      	asrs	r5, r5, #1
   85868:	f106 0608 	add.w	r6, r6, #8
   8586c:	d1ef      	bne.n	8584e <_dtoa_r+0xbae>
   8586e:	e607      	b.n	85480 <_dtoa_r+0x7e0>
   85870:	6871      	ldr	r1, [r6, #4]
   85872:	4620      	mov	r0, r4
   85874:	f000 fc56 	bl	86124 <_Balloc>
   85878:	4605      	mov	r5, r0
   8587a:	6933      	ldr	r3, [r6, #16]
   8587c:	f106 010c 	add.w	r1, r6, #12
   85880:	3302      	adds	r3, #2
   85882:	009a      	lsls	r2, r3, #2
   85884:	300c      	adds	r0, #12
   85886:	f7fd fdcd 	bl	83424 <memcpy>
   8588a:	4629      	mov	r1, r5
   8588c:	2201      	movs	r2, #1
   8588e:	4620      	mov	r0, r4
   85890:	f000 fdf6 	bl	86480 <__lshift>
   85894:	9008      	str	r0, [sp, #32]
   85896:	e4b6      	b.n	85206 <_dtoa_r+0x566>
   85898:	2b39      	cmp	r3, #57	; 0x39
   8589a:	f8cd b020 	str.w	fp, [sp, #32]
   8589e:	46d0      	mov	r8, sl
   858a0:	f000 80a5 	beq.w	859ee <_dtoa_r+0xd4e>
   858a4:	f103 0a01 	add.w	sl, r3, #1
   858a8:	46b3      	mov	fp, r6
   858aa:	f887 a000 	strb.w	sl, [r7]
   858ae:	1c7d      	adds	r5, r7, #1
   858b0:	9e08      	ldr	r6, [sp, #32]
   858b2:	e570      	b.n	85396 <_dtoa_r+0x6f6>
   858b4:	465a      	mov	r2, fp
   858b6:	46d0      	mov	r8, sl
   858b8:	46b3      	mov	fp, r6
   858ba:	469a      	mov	sl, r3
   858bc:	4616      	mov	r6, r2
   858be:	e54e      	b.n	8535e <_dtoa_r+0x6be>
   858c0:	9812      	ldr	r0, [sp, #72]	; 0x48
   858c2:	495e      	ldr	r1, [pc, #376]	; (85a3c <_dtoa_r+0xd9c>)
   858c4:	462a      	mov	r2, r5
   858c6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   858ca:	4633      	mov	r3, r6
   858cc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   858d0:	f001 fd70 	bl	873b4 <__aeabi_dmul>
   858d4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   858d8:	4638      	mov	r0, r7
   858da:	4641      	mov	r1, r8
   858dc:	f002 f81a 	bl	87914 <__aeabi_d2iz>
   858e0:	4605      	mov	r5, r0
   858e2:	f001 fd01 	bl	872e8 <__aeabi_i2d>
   858e6:	4602      	mov	r2, r0
   858e8:	460b      	mov	r3, r1
   858ea:	4638      	mov	r0, r7
   858ec:	4641      	mov	r1, r8
   858ee:	f001 fbad 	bl	8704c <__aeabi_dsub>
   858f2:	4606      	mov	r6, r0
   858f4:	9812      	ldr	r0, [sp, #72]	; 0x48
   858f6:	9a04      	ldr	r2, [sp, #16]
   858f8:	3530      	adds	r5, #48	; 0x30
   858fa:	2801      	cmp	r0, #1
   858fc:	7015      	strb	r5, [r2, #0]
   858fe:	460f      	mov	r7, r1
   85900:	f102 0501 	add.w	r5, r2, #1
   85904:	d026      	beq.n	85954 <_dtoa_r+0xcb4>
   85906:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85908:	9a04      	ldr	r2, [sp, #16]
   8590a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8590e:	4413      	add	r3, r2
   85910:	f04f 0a00 	mov.w	sl, #0
   85914:	4699      	mov	r9, r3
   85916:	f8df b130 	ldr.w	fp, [pc, #304]	; 85a48 <_dtoa_r+0xda8>
   8591a:	4652      	mov	r2, sl
   8591c:	465b      	mov	r3, fp
   8591e:	4630      	mov	r0, r6
   85920:	4639      	mov	r1, r7
   85922:	f001 fd47 	bl	873b4 <__aeabi_dmul>
   85926:	460f      	mov	r7, r1
   85928:	4606      	mov	r6, r0
   8592a:	f001 fff3 	bl	87914 <__aeabi_d2iz>
   8592e:	4680      	mov	r8, r0
   85930:	f001 fcda 	bl	872e8 <__aeabi_i2d>
   85934:	4602      	mov	r2, r0
   85936:	460b      	mov	r3, r1
   85938:	4630      	mov	r0, r6
   8593a:	4639      	mov	r1, r7
   8593c:	f001 fb86 	bl	8704c <__aeabi_dsub>
   85940:	f108 0830 	add.w	r8, r8, #48	; 0x30
   85944:	f805 8b01 	strb.w	r8, [r5], #1
   85948:	454d      	cmp	r5, r9
   8594a:	4606      	mov	r6, r0
   8594c:	460f      	mov	r7, r1
   8594e:	d1e4      	bne.n	8591a <_dtoa_r+0xc7a>
   85950:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85954:	2200      	movs	r2, #0
   85956:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8595a:	4b3a      	ldr	r3, [pc, #232]	; (85a44 <_dtoa_r+0xda4>)
   8595c:	f001 fb78 	bl	87050 <__adddf3>
   85960:	4632      	mov	r2, r6
   85962:	463b      	mov	r3, r7
   85964:	f001 ff98 	bl	87898 <__aeabi_dcmplt>
   85968:	2800      	cmp	r0, #0
   8596a:	d046      	beq.n	859fa <_dtoa_r+0xd5a>
   8596c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8596e:	9302      	str	r3, [sp, #8]
   85970:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   85974:	f7ff bb42 	b.w	84ffc <_dtoa_r+0x35c>
   85978:	f04f 0800 	mov.w	r8, #0
   8597c:	4646      	mov	r6, r8
   8597e:	e6a8      	b.n	856d2 <_dtoa_r+0xa32>
   85980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85982:	9a07      	ldr	r2, [sp, #28]
   85984:	1a9d      	subs	r5, r3, r2
   85986:	2300      	movs	r3, #0
   85988:	f7ff bb70 	b.w	8506c <_dtoa_r+0x3cc>
   8598c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8598e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85990:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   85994:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85996:	f7ff bb69 	b.w	8506c <_dtoa_r+0x3cc>
   8599a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   8599e:	f04f 0a02 	mov.w	sl, #2
   859a2:	e56d      	b.n	85480 <_dtoa_r+0x7e0>
   859a4:	9b07      	ldr	r3, [sp, #28]
   859a6:	2b00      	cmp	r3, #0
   859a8:	f43f aeb8 	beq.w	8571c <_dtoa_r+0xa7c>
   859ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   859ae:	2b00      	cmp	r3, #0
   859b0:	f77f aede 	ble.w	85770 <_dtoa_r+0xad0>
   859b4:	2200      	movs	r2, #0
   859b6:	4b24      	ldr	r3, [pc, #144]	; (85a48 <_dtoa_r+0xda8>)
   859b8:	4638      	mov	r0, r7
   859ba:	4641      	mov	r1, r8
   859bc:	f001 fcfa 	bl	873b4 <__aeabi_dmul>
   859c0:	4607      	mov	r7, r0
   859c2:	4688      	mov	r8, r1
   859c4:	f10a 0001 	add.w	r0, sl, #1
   859c8:	f001 fc8e 	bl	872e8 <__aeabi_i2d>
   859cc:	463a      	mov	r2, r7
   859ce:	4643      	mov	r3, r8
   859d0:	f001 fcf0 	bl	873b4 <__aeabi_dmul>
   859d4:	2200      	movs	r2, #0
   859d6:	4b17      	ldr	r3, [pc, #92]	; (85a34 <_dtoa_r+0xd94>)
   859d8:	f001 fb3a 	bl	87050 <__adddf3>
   859dc:	9a02      	ldr	r2, [sp, #8]
   859de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   859e0:	3a01      	subs	r2, #1
   859e2:	4605      	mov	r5, r0
   859e4:	9215      	str	r2, [sp, #84]	; 0x54
   859e6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   859ea:	9312      	str	r3, [sp, #72]	; 0x48
   859ec:	e569      	b.n	854c2 <_dtoa_r+0x822>
   859ee:	2239      	movs	r2, #57	; 0x39
   859f0:	46b3      	mov	fp, r6
   859f2:	703a      	strb	r2, [r7, #0]
   859f4:	9e08      	ldr	r6, [sp, #32]
   859f6:	1c7d      	adds	r5, r7, #1
   859f8:	e4bf      	b.n	8537a <_dtoa_r+0x6da>
   859fa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   859fe:	2000      	movs	r0, #0
   85a00:	4910      	ldr	r1, [pc, #64]	; (85a44 <_dtoa_r+0xda4>)
   85a02:	f001 fb23 	bl	8704c <__aeabi_dsub>
   85a06:	4632      	mov	r2, r6
   85a08:	463b      	mov	r3, r7
   85a0a:	f001 ff63 	bl	878d4 <__aeabi_dcmpgt>
   85a0e:	b908      	cbnz	r0, 85a14 <_dtoa_r+0xd74>
   85a10:	e6ae      	b.n	85770 <_dtoa_r+0xad0>
   85a12:	4615      	mov	r5, r2
   85a14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   85a18:	1e6a      	subs	r2, r5, #1
   85a1a:	2b30      	cmp	r3, #48	; 0x30
   85a1c:	d0f9      	beq.n	85a12 <_dtoa_r+0xd72>
   85a1e:	e5d7      	b.n	855d0 <_dtoa_r+0x930>
   85a20:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85a26:	9302      	str	r3, [sp, #8]
   85a28:	f7ff bae8 	b.w	84ffc <_dtoa_r+0x35c>
   85a2c:	970c      	str	r7, [sp, #48]	; 0x30
   85a2e:	f7ff bba7 	b.w	85180 <_dtoa_r+0x4e0>
   85a32:	bf00      	nop
   85a34:	401c0000 	.word	0x401c0000
   85a38:	40140000 	.word	0x40140000
   85a3c:	00087eb0 	.word	0x00087eb0
   85a40:	00087e88 	.word	0x00087e88
   85a44:	3fe00000 	.word	0x3fe00000
   85a48:	40240000 	.word	0x40240000
   85a4c:	2b39      	cmp	r3, #57	; 0x39
   85a4e:	f8cd b020 	str.w	fp, [sp, #32]
   85a52:	46d0      	mov	r8, sl
   85a54:	f8dd b01c 	ldr.w	fp, [sp, #28]
   85a58:	469a      	mov	sl, r3
   85a5a:	d0c8      	beq.n	859ee <_dtoa_r+0xd4e>
   85a5c:	f1bb 0f00 	cmp.w	fp, #0
   85a60:	f73f aec0 	bgt.w	857e4 <_dtoa_r+0xb44>
   85a64:	e6c0      	b.n	857e8 <_dtoa_r+0xb48>
   85a66:	f47f aebf 	bne.w	857e8 <_dtoa_r+0xb48>
   85a6a:	f01a 0f01 	tst.w	sl, #1
   85a6e:	f43f aebb 	beq.w	857e8 <_dtoa_r+0xb48>
   85a72:	e6b3      	b.n	857dc <_dtoa_r+0xb3c>
   85a74:	f04f 0800 	mov.w	r8, #0
   85a78:	4646      	mov	r6, r8
   85a7a:	e5e8      	b.n	8564e <_dtoa_r+0x9ae>
   85a7c:	4631      	mov	r1, r6
   85a7e:	2300      	movs	r3, #0
   85a80:	220a      	movs	r2, #10
   85a82:	4620      	mov	r0, r4
   85a84:	f000 fb7e 	bl	86184 <__multadd>
   85a88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85a8a:	4606      	mov	r6, r0
   85a8c:	2b00      	cmp	r3, #0
   85a8e:	dd07      	ble.n	85aa0 <_dtoa_r+0xe00>
   85a90:	9307      	str	r3, [sp, #28]
   85a92:	f7ff bbab 	b.w	851ec <_dtoa_r+0x54c>
   85a96:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85a98:	2b02      	cmp	r3, #2
   85a9a:	dc1f      	bgt.n	85adc <_dtoa_r+0xe3c>
   85a9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85a9e:	e43c      	b.n	8531a <_dtoa_r+0x67a>
   85aa0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85aa2:	2b02      	cmp	r3, #2
   85aa4:	dc1a      	bgt.n	85adc <_dtoa_r+0xe3c>
   85aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85aa8:	e7f2      	b.n	85a90 <_dtoa_r+0xdf0>
   85aaa:	f43f ab81 	beq.w	851b0 <_dtoa_r+0x510>
   85aae:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   85ab2:	e411      	b.n	852d8 <_dtoa_r+0x638>
   85ab4:	2500      	movs	r5, #0
   85ab6:	4620      	mov	r0, r4
   85ab8:	6465      	str	r5, [r4, #68]	; 0x44
   85aba:	4629      	mov	r1, r5
   85abc:	f000 fb32 	bl	86124 <_Balloc>
   85ac0:	f04f 33ff 	mov.w	r3, #4294967295
   85ac4:	9307      	str	r3, [sp, #28]
   85ac6:	930f      	str	r3, [sp, #60]	; 0x3c
   85ac8:	2301      	movs	r3, #1
   85aca:	9004      	str	r0, [sp, #16]
   85acc:	9525      	str	r5, [sp, #148]	; 0x94
   85ace:	6420      	str	r0, [r4, #64]	; 0x40
   85ad0:	930b      	str	r3, [sp, #44]	; 0x2c
   85ad2:	f7ff b9e0 	b.w	84e96 <_dtoa_r+0x1f6>
   85ad6:	2501      	movs	r5, #1
   85ad8:	f7ff b9a8 	b.w	84e2c <_dtoa_r+0x18c>
   85adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85ade:	9307      	str	r3, [sp, #28]
   85ae0:	e5e8      	b.n	856b4 <_dtoa_r+0xa14>
   85ae2:	bf00      	nop

00085ae4 <__libc_fini_array>:
   85ae4:	b538      	push	{r3, r4, r5, lr}
   85ae6:	4c0a      	ldr	r4, [pc, #40]	; (85b10 <__libc_fini_array+0x2c>)
   85ae8:	4d0a      	ldr	r5, [pc, #40]	; (85b14 <__libc_fini_array+0x30>)
   85aea:	1b64      	subs	r4, r4, r5
   85aec:	10a4      	asrs	r4, r4, #2
   85aee:	d00a      	beq.n	85b06 <__libc_fini_array+0x22>
   85af0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   85af4:	3b01      	subs	r3, #1
   85af6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   85afa:	3c01      	subs	r4, #1
   85afc:	f855 3904 	ldr.w	r3, [r5], #-4
   85b00:	4798      	blx	r3
   85b02:	2c00      	cmp	r4, #0
   85b04:	d1f9      	bne.n	85afa <__libc_fini_array+0x16>
   85b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85b0a:	f002 bacf 	b.w	880ac <_fini>
   85b0e:	bf00      	nop
   85b10:	000880bc 	.word	0x000880bc
   85b14:	000880b8 	.word	0x000880b8

00085b18 <_localeconv_r>:
   85b18:	4a04      	ldr	r2, [pc, #16]	; (85b2c <_localeconv_r+0x14>)
   85b1a:	4b05      	ldr	r3, [pc, #20]	; (85b30 <_localeconv_r+0x18>)
   85b1c:	6812      	ldr	r2, [r2, #0]
   85b1e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   85b20:	2800      	cmp	r0, #0
   85b22:	bf08      	it	eq
   85b24:	4618      	moveq	r0, r3
   85b26:	30f0      	adds	r0, #240	; 0xf0
   85b28:	4770      	bx	lr
   85b2a:	bf00      	nop
   85b2c:	200701a0 	.word	0x200701a0
   85b30:	200709e4 	.word	0x200709e4

00085b34 <__retarget_lock_acquire_recursive>:
   85b34:	4770      	bx	lr
   85b36:	bf00      	nop

00085b38 <__retarget_lock_release_recursive>:
   85b38:	4770      	bx	lr
   85b3a:	bf00      	nop

00085b3c <_malloc_r>:
   85b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85b40:	f101 060b 	add.w	r6, r1, #11
   85b44:	2e16      	cmp	r6, #22
   85b46:	b083      	sub	sp, #12
   85b48:	4605      	mov	r5, r0
   85b4a:	f240 809e 	bls.w	85c8a <_malloc_r+0x14e>
   85b4e:	f036 0607 	bics.w	r6, r6, #7
   85b52:	f100 80bd 	bmi.w	85cd0 <_malloc_r+0x194>
   85b56:	42b1      	cmp	r1, r6
   85b58:	f200 80ba 	bhi.w	85cd0 <_malloc_r+0x194>
   85b5c:	f000 fad6 	bl	8610c <__malloc_lock>
   85b60:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   85b64:	f0c0 8285 	bcc.w	86072 <_malloc_r+0x536>
   85b68:	0a73      	lsrs	r3, r6, #9
   85b6a:	f000 80b8 	beq.w	85cde <_malloc_r+0x1a2>
   85b6e:	2b04      	cmp	r3, #4
   85b70:	f200 816c 	bhi.w	85e4c <_malloc_r+0x310>
   85b74:	09b3      	lsrs	r3, r6, #6
   85b76:	f103 0039 	add.w	r0, r3, #57	; 0x39
   85b7a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   85b7e:	00c1      	lsls	r1, r0, #3
   85b80:	4fb8      	ldr	r7, [pc, #736]	; (85e64 <_malloc_r+0x328>)
   85b82:	4439      	add	r1, r7
   85b84:	684c      	ldr	r4, [r1, #4]
   85b86:	3908      	subs	r1, #8
   85b88:	42a1      	cmp	r1, r4
   85b8a:	d106      	bne.n	85b9a <_malloc_r+0x5e>
   85b8c:	e00c      	b.n	85ba8 <_malloc_r+0x6c>
   85b8e:	2a00      	cmp	r2, #0
   85b90:	f280 80ab 	bge.w	85cea <_malloc_r+0x1ae>
   85b94:	68e4      	ldr	r4, [r4, #12]
   85b96:	42a1      	cmp	r1, r4
   85b98:	d006      	beq.n	85ba8 <_malloc_r+0x6c>
   85b9a:	6863      	ldr	r3, [r4, #4]
   85b9c:	f023 0303 	bic.w	r3, r3, #3
   85ba0:	1b9a      	subs	r2, r3, r6
   85ba2:	2a0f      	cmp	r2, #15
   85ba4:	ddf3      	ble.n	85b8e <_malloc_r+0x52>
   85ba6:	4670      	mov	r0, lr
   85ba8:	693c      	ldr	r4, [r7, #16]
   85baa:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 85e78 <_malloc_r+0x33c>
   85bae:	4574      	cmp	r4, lr
   85bb0:	f000 819e 	beq.w	85ef0 <_malloc_r+0x3b4>
   85bb4:	6863      	ldr	r3, [r4, #4]
   85bb6:	f023 0303 	bic.w	r3, r3, #3
   85bba:	1b9a      	subs	r2, r3, r6
   85bbc:	2a0f      	cmp	r2, #15
   85bbe:	f300 8183 	bgt.w	85ec8 <_malloc_r+0x38c>
   85bc2:	2a00      	cmp	r2, #0
   85bc4:	f8c7 e014 	str.w	lr, [r7, #20]
   85bc8:	f8c7 e010 	str.w	lr, [r7, #16]
   85bcc:	f280 8091 	bge.w	85cf2 <_malloc_r+0x1b6>
   85bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85bd4:	f080 8154 	bcs.w	85e80 <_malloc_r+0x344>
   85bd8:	2201      	movs	r2, #1
   85bda:	08db      	lsrs	r3, r3, #3
   85bdc:	6879      	ldr	r1, [r7, #4]
   85bde:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   85be2:	4413      	add	r3, r2
   85be4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   85be8:	fa02 f20c 	lsl.w	r2, r2, ip
   85bec:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   85bf0:	430a      	orrs	r2, r1
   85bf2:	f1ac 0108 	sub.w	r1, ip, #8
   85bf6:	60e1      	str	r1, [r4, #12]
   85bf8:	f8c4 8008 	str.w	r8, [r4, #8]
   85bfc:	607a      	str	r2, [r7, #4]
   85bfe:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   85c02:	f8c8 400c 	str.w	r4, [r8, #12]
   85c06:	2401      	movs	r4, #1
   85c08:	1083      	asrs	r3, r0, #2
   85c0a:	409c      	lsls	r4, r3
   85c0c:	4294      	cmp	r4, r2
   85c0e:	d87d      	bhi.n	85d0c <_malloc_r+0x1d0>
   85c10:	4214      	tst	r4, r2
   85c12:	d106      	bne.n	85c22 <_malloc_r+0xe6>
   85c14:	f020 0003 	bic.w	r0, r0, #3
   85c18:	0064      	lsls	r4, r4, #1
   85c1a:	4214      	tst	r4, r2
   85c1c:	f100 0004 	add.w	r0, r0, #4
   85c20:	d0fa      	beq.n	85c18 <_malloc_r+0xdc>
   85c22:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   85c26:	46cc      	mov	ip, r9
   85c28:	4680      	mov	r8, r0
   85c2a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   85c2e:	459c      	cmp	ip, r3
   85c30:	d107      	bne.n	85c42 <_malloc_r+0x106>
   85c32:	e15f      	b.n	85ef4 <_malloc_r+0x3b8>
   85c34:	2a00      	cmp	r2, #0
   85c36:	f280 816d 	bge.w	85f14 <_malloc_r+0x3d8>
   85c3a:	68db      	ldr	r3, [r3, #12]
   85c3c:	459c      	cmp	ip, r3
   85c3e:	f000 8159 	beq.w	85ef4 <_malloc_r+0x3b8>
   85c42:	6859      	ldr	r1, [r3, #4]
   85c44:	f021 0103 	bic.w	r1, r1, #3
   85c48:	1b8a      	subs	r2, r1, r6
   85c4a:	2a0f      	cmp	r2, #15
   85c4c:	ddf2      	ble.n	85c34 <_malloc_r+0xf8>
   85c4e:	68dc      	ldr	r4, [r3, #12]
   85c50:	f8d3 c008 	ldr.w	ip, [r3, #8]
   85c54:	f046 0801 	orr.w	r8, r6, #1
   85c58:	4628      	mov	r0, r5
   85c5a:	441e      	add	r6, r3
   85c5c:	f042 0501 	orr.w	r5, r2, #1
   85c60:	f8c3 8004 	str.w	r8, [r3, #4]
   85c64:	f8cc 400c 	str.w	r4, [ip, #12]
   85c68:	f8c4 c008 	str.w	ip, [r4, #8]
   85c6c:	617e      	str	r6, [r7, #20]
   85c6e:	613e      	str	r6, [r7, #16]
   85c70:	f8c6 e00c 	str.w	lr, [r6, #12]
   85c74:	f8c6 e008 	str.w	lr, [r6, #8]
   85c78:	6075      	str	r5, [r6, #4]
   85c7a:	505a      	str	r2, [r3, r1]
   85c7c:	9300      	str	r3, [sp, #0]
   85c7e:	f000 fa4b 	bl	86118 <__malloc_unlock>
   85c82:	9b00      	ldr	r3, [sp, #0]
   85c84:	f103 0408 	add.w	r4, r3, #8
   85c88:	e01e      	b.n	85cc8 <_malloc_r+0x18c>
   85c8a:	2910      	cmp	r1, #16
   85c8c:	d820      	bhi.n	85cd0 <_malloc_r+0x194>
   85c8e:	f000 fa3d 	bl	8610c <__malloc_lock>
   85c92:	2610      	movs	r6, #16
   85c94:	2318      	movs	r3, #24
   85c96:	2002      	movs	r0, #2
   85c98:	4f72      	ldr	r7, [pc, #456]	; (85e64 <_malloc_r+0x328>)
   85c9a:	443b      	add	r3, r7
   85c9c:	685c      	ldr	r4, [r3, #4]
   85c9e:	f1a3 0208 	sub.w	r2, r3, #8
   85ca2:	4294      	cmp	r4, r2
   85ca4:	f000 812f 	beq.w	85f06 <_malloc_r+0x3ca>
   85ca8:	6863      	ldr	r3, [r4, #4]
   85caa:	68e1      	ldr	r1, [r4, #12]
   85cac:	f023 0303 	bic.w	r3, r3, #3
   85cb0:	4423      	add	r3, r4
   85cb2:	685a      	ldr	r2, [r3, #4]
   85cb4:	68a6      	ldr	r6, [r4, #8]
   85cb6:	f042 0201 	orr.w	r2, r2, #1
   85cba:	60f1      	str	r1, [r6, #12]
   85cbc:	4628      	mov	r0, r5
   85cbe:	608e      	str	r6, [r1, #8]
   85cc0:	605a      	str	r2, [r3, #4]
   85cc2:	f000 fa29 	bl	86118 <__malloc_unlock>
   85cc6:	3408      	adds	r4, #8
   85cc8:	4620      	mov	r0, r4
   85cca:	b003      	add	sp, #12
   85ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85cd0:	2400      	movs	r4, #0
   85cd2:	230c      	movs	r3, #12
   85cd4:	4620      	mov	r0, r4
   85cd6:	602b      	str	r3, [r5, #0]
   85cd8:	b003      	add	sp, #12
   85cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85cde:	2040      	movs	r0, #64	; 0x40
   85ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
   85ce4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   85ce8:	e74a      	b.n	85b80 <_malloc_r+0x44>
   85cea:	4423      	add	r3, r4
   85cec:	685a      	ldr	r2, [r3, #4]
   85cee:	68e1      	ldr	r1, [r4, #12]
   85cf0:	e7e0      	b.n	85cb4 <_malloc_r+0x178>
   85cf2:	4423      	add	r3, r4
   85cf4:	685a      	ldr	r2, [r3, #4]
   85cf6:	4628      	mov	r0, r5
   85cf8:	f042 0201 	orr.w	r2, r2, #1
   85cfc:	605a      	str	r2, [r3, #4]
   85cfe:	3408      	adds	r4, #8
   85d00:	f000 fa0a 	bl	86118 <__malloc_unlock>
   85d04:	4620      	mov	r0, r4
   85d06:	b003      	add	sp, #12
   85d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85d0c:	68bc      	ldr	r4, [r7, #8]
   85d0e:	6863      	ldr	r3, [r4, #4]
   85d10:	f023 0803 	bic.w	r8, r3, #3
   85d14:	45b0      	cmp	r8, r6
   85d16:	d304      	bcc.n	85d22 <_malloc_r+0x1e6>
   85d18:	eba8 0306 	sub.w	r3, r8, r6
   85d1c:	2b0f      	cmp	r3, #15
   85d1e:	f300 8085 	bgt.w	85e2c <_malloc_r+0x2f0>
   85d22:	f8df 9158 	ldr.w	r9, [pc, #344]	; 85e7c <_malloc_r+0x340>
   85d26:	4b50      	ldr	r3, [pc, #320]	; (85e68 <_malloc_r+0x32c>)
   85d28:	f8d9 2000 	ldr.w	r2, [r9]
   85d2c:	681b      	ldr	r3, [r3, #0]
   85d2e:	3201      	adds	r2, #1
   85d30:	4433      	add	r3, r6
   85d32:	eb04 0a08 	add.w	sl, r4, r8
   85d36:	f000 8154 	beq.w	85fe2 <_malloc_r+0x4a6>
   85d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   85d3e:	330f      	adds	r3, #15
   85d40:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   85d44:	f02b 0b0f 	bic.w	fp, fp, #15
   85d48:	4659      	mov	r1, fp
   85d4a:	4628      	mov	r0, r5
   85d4c:	f000 fce6 	bl	8671c <_sbrk_r>
   85d50:	1c41      	adds	r1, r0, #1
   85d52:	4602      	mov	r2, r0
   85d54:	f000 80fb 	beq.w	85f4e <_malloc_r+0x412>
   85d58:	4582      	cmp	sl, r0
   85d5a:	f200 80f6 	bhi.w	85f4a <_malloc_r+0x40e>
   85d5e:	4b43      	ldr	r3, [pc, #268]	; (85e6c <_malloc_r+0x330>)
   85d60:	6819      	ldr	r1, [r3, #0]
   85d62:	4459      	add	r1, fp
   85d64:	6019      	str	r1, [r3, #0]
   85d66:	f000 814c 	beq.w	86002 <_malloc_r+0x4c6>
   85d6a:	f8d9 0000 	ldr.w	r0, [r9]
   85d6e:	3001      	adds	r0, #1
   85d70:	bf1b      	ittet	ne
   85d72:	eba2 0a0a 	subne.w	sl, r2, sl
   85d76:	4451      	addne	r1, sl
   85d78:	f8c9 2000 	streq.w	r2, [r9]
   85d7c:	6019      	strne	r1, [r3, #0]
   85d7e:	f012 0107 	ands.w	r1, r2, #7
   85d82:	f000 8114 	beq.w	85fae <_malloc_r+0x472>
   85d86:	f1c1 0008 	rsb	r0, r1, #8
   85d8a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   85d8e:	4402      	add	r2, r0
   85d90:	3108      	adds	r1, #8
   85d92:	eb02 090b 	add.w	r9, r2, fp
   85d96:	f3c9 090b 	ubfx	r9, r9, #0, #12
   85d9a:	eba1 0909 	sub.w	r9, r1, r9
   85d9e:	4649      	mov	r1, r9
   85da0:	4628      	mov	r0, r5
   85da2:	9301      	str	r3, [sp, #4]
   85da4:	9200      	str	r2, [sp, #0]
   85da6:	f000 fcb9 	bl	8671c <_sbrk_r>
   85daa:	1c43      	adds	r3, r0, #1
   85dac:	e89d 000c 	ldmia.w	sp, {r2, r3}
   85db0:	f000 8142 	beq.w	86038 <_malloc_r+0x4fc>
   85db4:	1a80      	subs	r0, r0, r2
   85db6:	4448      	add	r0, r9
   85db8:	f040 0001 	orr.w	r0, r0, #1
   85dbc:	6819      	ldr	r1, [r3, #0]
   85dbe:	42bc      	cmp	r4, r7
   85dc0:	4449      	add	r1, r9
   85dc2:	60ba      	str	r2, [r7, #8]
   85dc4:	6019      	str	r1, [r3, #0]
   85dc6:	6050      	str	r0, [r2, #4]
   85dc8:	d017      	beq.n	85dfa <_malloc_r+0x2be>
   85dca:	f1b8 0f0f 	cmp.w	r8, #15
   85dce:	f240 80fa 	bls.w	85fc6 <_malloc_r+0x48a>
   85dd2:	f04f 0c05 	mov.w	ip, #5
   85dd6:	6862      	ldr	r2, [r4, #4]
   85dd8:	f1a8 000c 	sub.w	r0, r8, #12
   85ddc:	f020 0007 	bic.w	r0, r0, #7
   85de0:	f002 0201 	and.w	r2, r2, #1
   85de4:	eb04 0e00 	add.w	lr, r4, r0
   85de8:	4302      	orrs	r2, r0
   85dea:	280f      	cmp	r0, #15
   85dec:	6062      	str	r2, [r4, #4]
   85dee:	f8ce c004 	str.w	ip, [lr, #4]
   85df2:	f8ce c008 	str.w	ip, [lr, #8]
   85df6:	f200 8116 	bhi.w	86026 <_malloc_r+0x4ea>
   85dfa:	4b1d      	ldr	r3, [pc, #116]	; (85e70 <_malloc_r+0x334>)
   85dfc:	68bc      	ldr	r4, [r7, #8]
   85dfe:	681a      	ldr	r2, [r3, #0]
   85e00:	4291      	cmp	r1, r2
   85e02:	bf88      	it	hi
   85e04:	6019      	strhi	r1, [r3, #0]
   85e06:	4b1b      	ldr	r3, [pc, #108]	; (85e74 <_malloc_r+0x338>)
   85e08:	681a      	ldr	r2, [r3, #0]
   85e0a:	4291      	cmp	r1, r2
   85e0c:	6862      	ldr	r2, [r4, #4]
   85e0e:	bf88      	it	hi
   85e10:	6019      	strhi	r1, [r3, #0]
   85e12:	f022 0203 	bic.w	r2, r2, #3
   85e16:	4296      	cmp	r6, r2
   85e18:	eba2 0306 	sub.w	r3, r2, r6
   85e1c:	d801      	bhi.n	85e22 <_malloc_r+0x2e6>
   85e1e:	2b0f      	cmp	r3, #15
   85e20:	dc04      	bgt.n	85e2c <_malloc_r+0x2f0>
   85e22:	4628      	mov	r0, r5
   85e24:	f000 f978 	bl	86118 <__malloc_unlock>
   85e28:	2400      	movs	r4, #0
   85e2a:	e74d      	b.n	85cc8 <_malloc_r+0x18c>
   85e2c:	f046 0201 	orr.w	r2, r6, #1
   85e30:	f043 0301 	orr.w	r3, r3, #1
   85e34:	4426      	add	r6, r4
   85e36:	6062      	str	r2, [r4, #4]
   85e38:	4628      	mov	r0, r5
   85e3a:	60be      	str	r6, [r7, #8]
   85e3c:	3408      	adds	r4, #8
   85e3e:	6073      	str	r3, [r6, #4]
   85e40:	f000 f96a 	bl	86118 <__malloc_unlock>
   85e44:	4620      	mov	r0, r4
   85e46:	b003      	add	sp, #12
   85e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e4c:	2b14      	cmp	r3, #20
   85e4e:	d970      	bls.n	85f32 <_malloc_r+0x3f6>
   85e50:	2b54      	cmp	r3, #84	; 0x54
   85e52:	f200 80a2 	bhi.w	85f9a <_malloc_r+0x45e>
   85e56:	0b33      	lsrs	r3, r6, #12
   85e58:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   85e5c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   85e60:	00c1      	lsls	r1, r0, #3
   85e62:	e68d      	b.n	85b80 <_malloc_r+0x44>
   85e64:	200705d4 	.word	0x200705d4
   85e68:	20070fe0 	.word	0x20070fe0
   85e6c:	20070fb0 	.word	0x20070fb0
   85e70:	20070fd8 	.word	0x20070fd8
   85e74:	20070fdc 	.word	0x20070fdc
   85e78:	200705dc 	.word	0x200705dc
   85e7c:	200709dc 	.word	0x200709dc
   85e80:	0a5a      	lsrs	r2, r3, #9
   85e82:	2a04      	cmp	r2, #4
   85e84:	d95b      	bls.n	85f3e <_malloc_r+0x402>
   85e86:	2a14      	cmp	r2, #20
   85e88:	f200 80ae 	bhi.w	85fe8 <_malloc_r+0x4ac>
   85e8c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   85e90:	00c9      	lsls	r1, r1, #3
   85e92:	325b      	adds	r2, #91	; 0x5b
   85e94:	eb07 0c01 	add.w	ip, r7, r1
   85e98:	5879      	ldr	r1, [r7, r1]
   85e9a:	f1ac 0c08 	sub.w	ip, ip, #8
   85e9e:	458c      	cmp	ip, r1
   85ea0:	f000 8088 	beq.w	85fb4 <_malloc_r+0x478>
   85ea4:	684a      	ldr	r2, [r1, #4]
   85ea6:	f022 0203 	bic.w	r2, r2, #3
   85eaa:	4293      	cmp	r3, r2
   85eac:	d273      	bcs.n	85f96 <_malloc_r+0x45a>
   85eae:	6889      	ldr	r1, [r1, #8]
   85eb0:	458c      	cmp	ip, r1
   85eb2:	d1f7      	bne.n	85ea4 <_malloc_r+0x368>
   85eb4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   85eb8:	687a      	ldr	r2, [r7, #4]
   85eba:	60e3      	str	r3, [r4, #12]
   85ebc:	f8c4 c008 	str.w	ip, [r4, #8]
   85ec0:	609c      	str	r4, [r3, #8]
   85ec2:	f8cc 400c 	str.w	r4, [ip, #12]
   85ec6:	e69e      	b.n	85c06 <_malloc_r+0xca>
   85ec8:	f046 0c01 	orr.w	ip, r6, #1
   85ecc:	f042 0101 	orr.w	r1, r2, #1
   85ed0:	4426      	add	r6, r4
   85ed2:	f8c4 c004 	str.w	ip, [r4, #4]
   85ed6:	4628      	mov	r0, r5
   85ed8:	617e      	str	r6, [r7, #20]
   85eda:	613e      	str	r6, [r7, #16]
   85edc:	f8c6 e00c 	str.w	lr, [r6, #12]
   85ee0:	f8c6 e008 	str.w	lr, [r6, #8]
   85ee4:	6071      	str	r1, [r6, #4]
   85ee6:	50e2      	str	r2, [r4, r3]
   85ee8:	f000 f916 	bl	86118 <__malloc_unlock>
   85eec:	3408      	adds	r4, #8
   85eee:	e6eb      	b.n	85cc8 <_malloc_r+0x18c>
   85ef0:	687a      	ldr	r2, [r7, #4]
   85ef2:	e688      	b.n	85c06 <_malloc_r+0xca>
   85ef4:	f108 0801 	add.w	r8, r8, #1
   85ef8:	f018 0f03 	tst.w	r8, #3
   85efc:	f10c 0c08 	add.w	ip, ip, #8
   85f00:	f47f ae93 	bne.w	85c2a <_malloc_r+0xee>
   85f04:	e02d      	b.n	85f62 <_malloc_r+0x426>
   85f06:	68dc      	ldr	r4, [r3, #12]
   85f08:	42a3      	cmp	r3, r4
   85f0a:	bf08      	it	eq
   85f0c:	3002      	addeq	r0, #2
   85f0e:	f43f ae4b 	beq.w	85ba8 <_malloc_r+0x6c>
   85f12:	e6c9      	b.n	85ca8 <_malloc_r+0x16c>
   85f14:	461c      	mov	r4, r3
   85f16:	4419      	add	r1, r3
   85f18:	684a      	ldr	r2, [r1, #4]
   85f1a:	68db      	ldr	r3, [r3, #12]
   85f1c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   85f20:	f042 0201 	orr.w	r2, r2, #1
   85f24:	604a      	str	r2, [r1, #4]
   85f26:	4628      	mov	r0, r5
   85f28:	60f3      	str	r3, [r6, #12]
   85f2a:	609e      	str	r6, [r3, #8]
   85f2c:	f000 f8f4 	bl	86118 <__malloc_unlock>
   85f30:	e6ca      	b.n	85cc8 <_malloc_r+0x18c>
   85f32:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   85f36:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   85f3a:	00c1      	lsls	r1, r0, #3
   85f3c:	e620      	b.n	85b80 <_malloc_r+0x44>
   85f3e:	099a      	lsrs	r2, r3, #6
   85f40:	f102 0139 	add.w	r1, r2, #57	; 0x39
   85f44:	00c9      	lsls	r1, r1, #3
   85f46:	3238      	adds	r2, #56	; 0x38
   85f48:	e7a4      	b.n	85e94 <_malloc_r+0x358>
   85f4a:	42bc      	cmp	r4, r7
   85f4c:	d054      	beq.n	85ff8 <_malloc_r+0x4bc>
   85f4e:	68bc      	ldr	r4, [r7, #8]
   85f50:	6862      	ldr	r2, [r4, #4]
   85f52:	f022 0203 	bic.w	r2, r2, #3
   85f56:	e75e      	b.n	85e16 <_malloc_r+0x2da>
   85f58:	f859 3908 	ldr.w	r3, [r9], #-8
   85f5c:	4599      	cmp	r9, r3
   85f5e:	f040 8086 	bne.w	8606e <_malloc_r+0x532>
   85f62:	f010 0f03 	tst.w	r0, #3
   85f66:	f100 30ff 	add.w	r0, r0, #4294967295
   85f6a:	d1f5      	bne.n	85f58 <_malloc_r+0x41c>
   85f6c:	687b      	ldr	r3, [r7, #4]
   85f6e:	ea23 0304 	bic.w	r3, r3, r4
   85f72:	607b      	str	r3, [r7, #4]
   85f74:	0064      	lsls	r4, r4, #1
   85f76:	429c      	cmp	r4, r3
   85f78:	f63f aec8 	bhi.w	85d0c <_malloc_r+0x1d0>
   85f7c:	2c00      	cmp	r4, #0
   85f7e:	f43f aec5 	beq.w	85d0c <_malloc_r+0x1d0>
   85f82:	421c      	tst	r4, r3
   85f84:	4640      	mov	r0, r8
   85f86:	f47f ae4c 	bne.w	85c22 <_malloc_r+0xe6>
   85f8a:	0064      	lsls	r4, r4, #1
   85f8c:	421c      	tst	r4, r3
   85f8e:	f100 0004 	add.w	r0, r0, #4
   85f92:	d0fa      	beq.n	85f8a <_malloc_r+0x44e>
   85f94:	e645      	b.n	85c22 <_malloc_r+0xe6>
   85f96:	468c      	mov	ip, r1
   85f98:	e78c      	b.n	85eb4 <_malloc_r+0x378>
   85f9a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85f9e:	d815      	bhi.n	85fcc <_malloc_r+0x490>
   85fa0:	0bf3      	lsrs	r3, r6, #15
   85fa2:	f103 0078 	add.w	r0, r3, #120	; 0x78
   85fa6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   85faa:	00c1      	lsls	r1, r0, #3
   85fac:	e5e8      	b.n	85b80 <_malloc_r+0x44>
   85fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85fb2:	e6ee      	b.n	85d92 <_malloc_r+0x256>
   85fb4:	2101      	movs	r1, #1
   85fb6:	687b      	ldr	r3, [r7, #4]
   85fb8:	1092      	asrs	r2, r2, #2
   85fba:	fa01 f202 	lsl.w	r2, r1, r2
   85fbe:	431a      	orrs	r2, r3
   85fc0:	607a      	str	r2, [r7, #4]
   85fc2:	4663      	mov	r3, ip
   85fc4:	e779      	b.n	85eba <_malloc_r+0x37e>
   85fc6:	2301      	movs	r3, #1
   85fc8:	6053      	str	r3, [r2, #4]
   85fca:	e72a      	b.n	85e22 <_malloc_r+0x2e6>
   85fcc:	f240 5254 	movw	r2, #1364	; 0x554
   85fd0:	4293      	cmp	r3, r2
   85fd2:	d822      	bhi.n	8601a <_malloc_r+0x4de>
   85fd4:	0cb3      	lsrs	r3, r6, #18
   85fd6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   85fda:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   85fde:	00c1      	lsls	r1, r0, #3
   85fe0:	e5ce      	b.n	85b80 <_malloc_r+0x44>
   85fe2:	f103 0b10 	add.w	fp, r3, #16
   85fe6:	e6af      	b.n	85d48 <_malloc_r+0x20c>
   85fe8:	2a54      	cmp	r2, #84	; 0x54
   85fea:	d829      	bhi.n	86040 <_malloc_r+0x504>
   85fec:	0b1a      	lsrs	r2, r3, #12
   85fee:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   85ff2:	00c9      	lsls	r1, r1, #3
   85ff4:	326e      	adds	r2, #110	; 0x6e
   85ff6:	e74d      	b.n	85e94 <_malloc_r+0x358>
   85ff8:	4b20      	ldr	r3, [pc, #128]	; (8607c <_malloc_r+0x540>)
   85ffa:	6819      	ldr	r1, [r3, #0]
   85ffc:	4459      	add	r1, fp
   85ffe:	6019      	str	r1, [r3, #0]
   86000:	e6b3      	b.n	85d6a <_malloc_r+0x22e>
   86002:	f3ca 000b 	ubfx	r0, sl, #0, #12
   86006:	2800      	cmp	r0, #0
   86008:	f47f aeaf 	bne.w	85d6a <_malloc_r+0x22e>
   8600c:	eb08 030b 	add.w	r3, r8, fp
   86010:	68ba      	ldr	r2, [r7, #8]
   86012:	f043 0301 	orr.w	r3, r3, #1
   86016:	6053      	str	r3, [r2, #4]
   86018:	e6ef      	b.n	85dfa <_malloc_r+0x2be>
   8601a:	207f      	movs	r0, #127	; 0x7f
   8601c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86020:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   86024:	e5ac      	b.n	85b80 <_malloc_r+0x44>
   86026:	f104 0108 	add.w	r1, r4, #8
   8602a:	4628      	mov	r0, r5
   8602c:	9300      	str	r3, [sp, #0]
   8602e:	f000 fce7 	bl	86a00 <_free_r>
   86032:	9b00      	ldr	r3, [sp, #0]
   86034:	6819      	ldr	r1, [r3, #0]
   86036:	e6e0      	b.n	85dfa <_malloc_r+0x2be>
   86038:	2001      	movs	r0, #1
   8603a:	f04f 0900 	mov.w	r9, #0
   8603e:	e6bd      	b.n	85dbc <_malloc_r+0x280>
   86040:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86044:	d805      	bhi.n	86052 <_malloc_r+0x516>
   86046:	0bda      	lsrs	r2, r3, #15
   86048:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8604c:	00c9      	lsls	r1, r1, #3
   8604e:	3277      	adds	r2, #119	; 0x77
   86050:	e720      	b.n	85e94 <_malloc_r+0x358>
   86052:	f240 5154 	movw	r1, #1364	; 0x554
   86056:	428a      	cmp	r2, r1
   86058:	d805      	bhi.n	86066 <_malloc_r+0x52a>
   8605a:	0c9a      	lsrs	r2, r3, #18
   8605c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   86060:	00c9      	lsls	r1, r1, #3
   86062:	327c      	adds	r2, #124	; 0x7c
   86064:	e716      	b.n	85e94 <_malloc_r+0x358>
   86066:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8606a:	227e      	movs	r2, #126	; 0x7e
   8606c:	e712      	b.n	85e94 <_malloc_r+0x358>
   8606e:	687b      	ldr	r3, [r7, #4]
   86070:	e780      	b.n	85f74 <_malloc_r+0x438>
   86072:	08f0      	lsrs	r0, r6, #3
   86074:	f106 0308 	add.w	r3, r6, #8
   86078:	e60e      	b.n	85c98 <_malloc_r+0x15c>
   8607a:	bf00      	nop
   8607c:	20070fb0 	.word	0x20070fb0

00086080 <memchr>:
   86080:	0783      	lsls	r3, r0, #30
   86082:	b470      	push	{r4, r5, r6}
   86084:	b2cd      	uxtb	r5, r1
   86086:	d03d      	beq.n	86104 <memchr+0x84>
   86088:	1e54      	subs	r4, r2, #1
   8608a:	b30a      	cbz	r2, 860d0 <memchr+0x50>
   8608c:	7803      	ldrb	r3, [r0, #0]
   8608e:	42ab      	cmp	r3, r5
   86090:	d01f      	beq.n	860d2 <memchr+0x52>
   86092:	1c43      	adds	r3, r0, #1
   86094:	e005      	b.n	860a2 <memchr+0x22>
   86096:	f114 34ff 	adds.w	r4, r4, #4294967295
   8609a:	d319      	bcc.n	860d0 <memchr+0x50>
   8609c:	7802      	ldrb	r2, [r0, #0]
   8609e:	42aa      	cmp	r2, r5
   860a0:	d017      	beq.n	860d2 <memchr+0x52>
   860a2:	f013 0f03 	tst.w	r3, #3
   860a6:	4618      	mov	r0, r3
   860a8:	f103 0301 	add.w	r3, r3, #1
   860ac:	d1f3      	bne.n	86096 <memchr+0x16>
   860ae:	2c03      	cmp	r4, #3
   860b0:	d811      	bhi.n	860d6 <memchr+0x56>
   860b2:	b34c      	cbz	r4, 86108 <memchr+0x88>
   860b4:	7803      	ldrb	r3, [r0, #0]
   860b6:	42ab      	cmp	r3, r5
   860b8:	d00b      	beq.n	860d2 <memchr+0x52>
   860ba:	4404      	add	r4, r0
   860bc:	1c43      	adds	r3, r0, #1
   860be:	e002      	b.n	860c6 <memchr+0x46>
   860c0:	7802      	ldrb	r2, [r0, #0]
   860c2:	42aa      	cmp	r2, r5
   860c4:	d005      	beq.n	860d2 <memchr+0x52>
   860c6:	429c      	cmp	r4, r3
   860c8:	4618      	mov	r0, r3
   860ca:	f103 0301 	add.w	r3, r3, #1
   860ce:	d1f7      	bne.n	860c0 <memchr+0x40>
   860d0:	2000      	movs	r0, #0
   860d2:	bc70      	pop	{r4, r5, r6}
   860d4:	4770      	bx	lr
   860d6:	0209      	lsls	r1, r1, #8
   860d8:	b289      	uxth	r1, r1
   860da:	4329      	orrs	r1, r5
   860dc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   860e0:	6803      	ldr	r3, [r0, #0]
   860e2:	4606      	mov	r6, r0
   860e4:	404b      	eors	r3, r1
   860e6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   860ea:	ea22 0303 	bic.w	r3, r2, r3
   860ee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   860f2:	f100 0004 	add.w	r0, r0, #4
   860f6:	d103      	bne.n	86100 <memchr+0x80>
   860f8:	3c04      	subs	r4, #4
   860fa:	2c03      	cmp	r4, #3
   860fc:	d8f0      	bhi.n	860e0 <memchr+0x60>
   860fe:	e7d8      	b.n	860b2 <memchr+0x32>
   86100:	4630      	mov	r0, r6
   86102:	e7d7      	b.n	860b4 <memchr+0x34>
   86104:	4614      	mov	r4, r2
   86106:	e7d2      	b.n	860ae <memchr+0x2e>
   86108:	4620      	mov	r0, r4
   8610a:	e7e2      	b.n	860d2 <memchr+0x52>

0008610c <__malloc_lock>:
   8610c:	4801      	ldr	r0, [pc, #4]	; (86114 <__malloc_lock+0x8>)
   8610e:	f7ff bd11 	b.w	85b34 <__retarget_lock_acquire_recursive>
   86112:	bf00      	nop
   86114:	20071044 	.word	0x20071044

00086118 <__malloc_unlock>:
   86118:	4801      	ldr	r0, [pc, #4]	; (86120 <__malloc_unlock+0x8>)
   8611a:	f7ff bd0d 	b.w	85b38 <__retarget_lock_release_recursive>
   8611e:	bf00      	nop
   86120:	20071044 	.word	0x20071044

00086124 <_Balloc>:
   86124:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86126:	b570      	push	{r4, r5, r6, lr}
   86128:	4605      	mov	r5, r0
   8612a:	460c      	mov	r4, r1
   8612c:	b14b      	cbz	r3, 86142 <_Balloc+0x1e>
   8612e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   86132:	b180      	cbz	r0, 86156 <_Balloc+0x32>
   86134:	6802      	ldr	r2, [r0, #0]
   86136:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8613a:	2300      	movs	r3, #0
   8613c:	6103      	str	r3, [r0, #16]
   8613e:	60c3      	str	r3, [r0, #12]
   86140:	bd70      	pop	{r4, r5, r6, pc}
   86142:	2221      	movs	r2, #33	; 0x21
   86144:	2104      	movs	r1, #4
   86146:	f000 fbdb 	bl	86900 <_calloc_r>
   8614a:	64e8      	str	r0, [r5, #76]	; 0x4c
   8614c:	4603      	mov	r3, r0
   8614e:	2800      	cmp	r0, #0
   86150:	d1ed      	bne.n	8612e <_Balloc+0xa>
   86152:	2000      	movs	r0, #0
   86154:	bd70      	pop	{r4, r5, r6, pc}
   86156:	2101      	movs	r1, #1
   86158:	fa01 f604 	lsl.w	r6, r1, r4
   8615c:	1d72      	adds	r2, r6, #5
   8615e:	4628      	mov	r0, r5
   86160:	0092      	lsls	r2, r2, #2
   86162:	f000 fbcd 	bl	86900 <_calloc_r>
   86166:	2800      	cmp	r0, #0
   86168:	d0f3      	beq.n	86152 <_Balloc+0x2e>
   8616a:	6044      	str	r4, [r0, #4]
   8616c:	6086      	str	r6, [r0, #8]
   8616e:	e7e4      	b.n	8613a <_Balloc+0x16>

00086170 <_Bfree>:
   86170:	b131      	cbz	r1, 86180 <_Bfree+0x10>
   86172:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86174:	684a      	ldr	r2, [r1, #4]
   86176:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8617a:	6008      	str	r0, [r1, #0]
   8617c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   86180:	4770      	bx	lr
   86182:	bf00      	nop

00086184 <__multadd>:
   86184:	b5f0      	push	{r4, r5, r6, r7, lr}
   86186:	460c      	mov	r4, r1
   86188:	4605      	mov	r5, r0
   8618a:	f04f 0e00 	mov.w	lr, #0
   8618e:	690e      	ldr	r6, [r1, #16]
   86190:	b083      	sub	sp, #12
   86192:	f101 0714 	add.w	r7, r1, #20
   86196:	6838      	ldr	r0, [r7, #0]
   86198:	f10e 0e01 	add.w	lr, lr, #1
   8619c:	b281      	uxth	r1, r0
   8619e:	fb02 3301 	mla	r3, r2, r1, r3
   861a2:	0c01      	lsrs	r1, r0, #16
   861a4:	0c18      	lsrs	r0, r3, #16
   861a6:	fb02 0101 	mla	r1, r2, r1, r0
   861aa:	b29b      	uxth	r3, r3
   861ac:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   861b0:	4576      	cmp	r6, lr
   861b2:	f847 3b04 	str.w	r3, [r7], #4
   861b6:	ea4f 4311 	mov.w	r3, r1, lsr #16
   861ba:	dcec      	bgt.n	86196 <__multadd+0x12>
   861bc:	b13b      	cbz	r3, 861ce <__multadd+0x4a>
   861be:	68a2      	ldr	r2, [r4, #8]
   861c0:	4296      	cmp	r6, r2
   861c2:	da07      	bge.n	861d4 <__multadd+0x50>
   861c4:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   861c8:	3601      	adds	r6, #1
   861ca:	6153      	str	r3, [r2, #20]
   861cc:	6126      	str	r6, [r4, #16]
   861ce:	4620      	mov	r0, r4
   861d0:	b003      	add	sp, #12
   861d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   861d4:	6861      	ldr	r1, [r4, #4]
   861d6:	4628      	mov	r0, r5
   861d8:	3101      	adds	r1, #1
   861da:	9301      	str	r3, [sp, #4]
   861dc:	f7ff ffa2 	bl	86124 <_Balloc>
   861e0:	4607      	mov	r7, r0
   861e2:	6922      	ldr	r2, [r4, #16]
   861e4:	f104 010c 	add.w	r1, r4, #12
   861e8:	3202      	adds	r2, #2
   861ea:	0092      	lsls	r2, r2, #2
   861ec:	300c      	adds	r0, #12
   861ee:	f7fd f919 	bl	83424 <memcpy>
   861f2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   861f4:	6861      	ldr	r1, [r4, #4]
   861f6:	9b01      	ldr	r3, [sp, #4]
   861f8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   861fc:	6020      	str	r0, [r4, #0]
   861fe:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   86202:	463c      	mov	r4, r7
   86204:	e7de      	b.n	861c4 <__multadd+0x40>
   86206:	bf00      	nop

00086208 <__hi0bits>:
   86208:	0c02      	lsrs	r2, r0, #16
   8620a:	0412      	lsls	r2, r2, #16
   8620c:	4603      	mov	r3, r0
   8620e:	b9b2      	cbnz	r2, 8623e <__hi0bits+0x36>
   86210:	0403      	lsls	r3, r0, #16
   86212:	2010      	movs	r0, #16
   86214:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   86218:	bf04      	itt	eq
   8621a:	021b      	lsleq	r3, r3, #8
   8621c:	3008      	addeq	r0, #8
   8621e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   86222:	bf04      	itt	eq
   86224:	011b      	lsleq	r3, r3, #4
   86226:	3004      	addeq	r0, #4
   86228:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8622c:	bf04      	itt	eq
   8622e:	009b      	lsleq	r3, r3, #2
   86230:	3002      	addeq	r0, #2
   86232:	2b00      	cmp	r3, #0
   86234:	db02      	blt.n	8623c <__hi0bits+0x34>
   86236:	005b      	lsls	r3, r3, #1
   86238:	d403      	bmi.n	86242 <__hi0bits+0x3a>
   8623a:	2020      	movs	r0, #32
   8623c:	4770      	bx	lr
   8623e:	2000      	movs	r0, #0
   86240:	e7e8      	b.n	86214 <__hi0bits+0xc>
   86242:	3001      	adds	r0, #1
   86244:	4770      	bx	lr
   86246:	bf00      	nop

00086248 <__lo0bits>:
   86248:	6803      	ldr	r3, [r0, #0]
   8624a:	4601      	mov	r1, r0
   8624c:	f013 0207 	ands.w	r2, r3, #7
   86250:	d007      	beq.n	86262 <__lo0bits+0x1a>
   86252:	07da      	lsls	r2, r3, #31
   86254:	d421      	bmi.n	8629a <__lo0bits+0x52>
   86256:	0798      	lsls	r0, r3, #30
   86258:	d421      	bmi.n	8629e <__lo0bits+0x56>
   8625a:	089b      	lsrs	r3, r3, #2
   8625c:	600b      	str	r3, [r1, #0]
   8625e:	2002      	movs	r0, #2
   86260:	4770      	bx	lr
   86262:	b298      	uxth	r0, r3
   86264:	b198      	cbz	r0, 8628e <__lo0bits+0x46>
   86266:	4610      	mov	r0, r2
   86268:	f013 0fff 	tst.w	r3, #255	; 0xff
   8626c:	bf04      	itt	eq
   8626e:	0a1b      	lsreq	r3, r3, #8
   86270:	3008      	addeq	r0, #8
   86272:	071a      	lsls	r2, r3, #28
   86274:	bf04      	itt	eq
   86276:	091b      	lsreq	r3, r3, #4
   86278:	3004      	addeq	r0, #4
   8627a:	079a      	lsls	r2, r3, #30
   8627c:	bf04      	itt	eq
   8627e:	089b      	lsreq	r3, r3, #2
   86280:	3002      	addeq	r0, #2
   86282:	07da      	lsls	r2, r3, #31
   86284:	d407      	bmi.n	86296 <__lo0bits+0x4e>
   86286:	085b      	lsrs	r3, r3, #1
   86288:	d104      	bne.n	86294 <__lo0bits+0x4c>
   8628a:	2020      	movs	r0, #32
   8628c:	4770      	bx	lr
   8628e:	0c1b      	lsrs	r3, r3, #16
   86290:	2010      	movs	r0, #16
   86292:	e7e9      	b.n	86268 <__lo0bits+0x20>
   86294:	3001      	adds	r0, #1
   86296:	600b      	str	r3, [r1, #0]
   86298:	4770      	bx	lr
   8629a:	2000      	movs	r0, #0
   8629c:	4770      	bx	lr
   8629e:	085b      	lsrs	r3, r3, #1
   862a0:	600b      	str	r3, [r1, #0]
   862a2:	2001      	movs	r0, #1
   862a4:	4770      	bx	lr
   862a6:	bf00      	nop

000862a8 <__i2b>:
   862a8:	b510      	push	{r4, lr}
   862aa:	460c      	mov	r4, r1
   862ac:	2101      	movs	r1, #1
   862ae:	f7ff ff39 	bl	86124 <_Balloc>
   862b2:	2201      	movs	r2, #1
   862b4:	6144      	str	r4, [r0, #20]
   862b6:	6102      	str	r2, [r0, #16]
   862b8:	bd10      	pop	{r4, pc}
   862ba:	bf00      	nop

000862bc <__multiply>:
   862bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   862c0:	690c      	ldr	r4, [r1, #16]
   862c2:	6915      	ldr	r5, [r2, #16]
   862c4:	b083      	sub	sp, #12
   862c6:	42ac      	cmp	r4, r5
   862c8:	468b      	mov	fp, r1
   862ca:	4616      	mov	r6, r2
   862cc:	da04      	bge.n	862d8 <__multiply+0x1c>
   862ce:	4622      	mov	r2, r4
   862d0:	46b3      	mov	fp, r6
   862d2:	462c      	mov	r4, r5
   862d4:	460e      	mov	r6, r1
   862d6:	4615      	mov	r5, r2
   862d8:	f8db 3008 	ldr.w	r3, [fp, #8]
   862dc:	eb04 0805 	add.w	r8, r4, r5
   862e0:	f8db 1004 	ldr.w	r1, [fp, #4]
   862e4:	4598      	cmp	r8, r3
   862e6:	bfc8      	it	gt
   862e8:	3101      	addgt	r1, #1
   862ea:	f7ff ff1b 	bl	86124 <_Balloc>
   862ee:	f100 0914 	add.w	r9, r0, #20
   862f2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   862f6:	45d1      	cmp	r9, sl
   862f8:	9000      	str	r0, [sp, #0]
   862fa:	d205      	bcs.n	86308 <__multiply+0x4c>
   862fc:	464b      	mov	r3, r9
   862fe:	2100      	movs	r1, #0
   86300:	f843 1b04 	str.w	r1, [r3], #4
   86304:	459a      	cmp	sl, r3
   86306:	d8fb      	bhi.n	86300 <__multiply+0x44>
   86308:	f106 0c14 	add.w	ip, r6, #20
   8630c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   86310:	f10b 0b14 	add.w	fp, fp, #20
   86314:	459c      	cmp	ip, r3
   86316:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   8631a:	d24b      	bcs.n	863b4 <__multiply+0xf8>
   8631c:	f8cd a004 	str.w	sl, [sp, #4]
   86320:	469a      	mov	sl, r3
   86322:	f8dc 5000 	ldr.w	r5, [ip]
   86326:	b2af      	uxth	r7, r5
   86328:	b1e7      	cbz	r7, 86364 <__multiply+0xa8>
   8632a:	464d      	mov	r5, r9
   8632c:	465e      	mov	r6, fp
   8632e:	2100      	movs	r1, #0
   86330:	f856 2b04 	ldr.w	r2, [r6], #4
   86334:	6828      	ldr	r0, [r5, #0]
   86336:	b293      	uxth	r3, r2
   86338:	b284      	uxth	r4, r0
   8633a:	0c12      	lsrs	r2, r2, #16
   8633c:	fb07 4303 	mla	r3, r7, r3, r4
   86340:	0c00      	lsrs	r0, r0, #16
   86342:	fb07 0202 	mla	r2, r7, r2, r0
   86346:	440b      	add	r3, r1
   86348:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   8634c:	b29b      	uxth	r3, r3
   8634e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   86352:	45b6      	cmp	lr, r6
   86354:	f845 3b04 	str.w	r3, [r5], #4
   86358:	ea4f 4111 	mov.w	r1, r1, lsr #16
   8635c:	d8e8      	bhi.n	86330 <__multiply+0x74>
   8635e:	6029      	str	r1, [r5, #0]
   86360:	f8dc 5000 	ldr.w	r5, [ip]
   86364:	0c2d      	lsrs	r5, r5, #16
   86366:	d01d      	beq.n	863a4 <__multiply+0xe8>
   86368:	f8d9 3000 	ldr.w	r3, [r9]
   8636c:	4648      	mov	r0, r9
   8636e:	461c      	mov	r4, r3
   86370:	4659      	mov	r1, fp
   86372:	2200      	movs	r2, #0
   86374:	880e      	ldrh	r6, [r1, #0]
   86376:	0c24      	lsrs	r4, r4, #16
   86378:	fb05 4406 	mla	r4, r5, r6, r4
   8637c:	b29b      	uxth	r3, r3
   8637e:	4422      	add	r2, r4
   86380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   86384:	f840 3b04 	str.w	r3, [r0], #4
   86388:	f851 3b04 	ldr.w	r3, [r1], #4
   8638c:	6804      	ldr	r4, [r0, #0]
   8638e:	0c1b      	lsrs	r3, r3, #16
   86390:	b2a6      	uxth	r6, r4
   86392:	fb05 6303 	mla	r3, r5, r3, r6
   86396:	458e      	cmp	lr, r1
   86398:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8639c:	ea4f 4213 	mov.w	r2, r3, lsr #16
   863a0:	d8e8      	bhi.n	86374 <__multiply+0xb8>
   863a2:	6003      	str	r3, [r0, #0]
   863a4:	f10c 0c04 	add.w	ip, ip, #4
   863a8:	45e2      	cmp	sl, ip
   863aa:	f109 0904 	add.w	r9, r9, #4
   863ae:	d8b8      	bhi.n	86322 <__multiply+0x66>
   863b0:	f8dd a004 	ldr.w	sl, [sp, #4]
   863b4:	f1b8 0f00 	cmp.w	r8, #0
   863b8:	dd0b      	ble.n	863d2 <__multiply+0x116>
   863ba:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   863be:	f1aa 0a04 	sub.w	sl, sl, #4
   863c2:	b11b      	cbz	r3, 863cc <__multiply+0x110>
   863c4:	e005      	b.n	863d2 <__multiply+0x116>
   863c6:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   863ca:	b913      	cbnz	r3, 863d2 <__multiply+0x116>
   863cc:	f1b8 0801 	subs.w	r8, r8, #1
   863d0:	d1f9      	bne.n	863c6 <__multiply+0x10a>
   863d2:	9800      	ldr	r0, [sp, #0]
   863d4:	f8c0 8010 	str.w	r8, [r0, #16]
   863d8:	b003      	add	sp, #12
   863da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   863de:	bf00      	nop

000863e0 <__pow5mult>:
   863e0:	f012 0303 	ands.w	r3, r2, #3
   863e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   863e8:	4614      	mov	r4, r2
   863ea:	4607      	mov	r7, r0
   863ec:	d12e      	bne.n	8644c <__pow5mult+0x6c>
   863ee:	460d      	mov	r5, r1
   863f0:	10a4      	asrs	r4, r4, #2
   863f2:	d01c      	beq.n	8642e <__pow5mult+0x4e>
   863f4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   863f6:	b396      	cbz	r6, 8645e <__pow5mult+0x7e>
   863f8:	07e3      	lsls	r3, r4, #31
   863fa:	f04f 0800 	mov.w	r8, #0
   863fe:	d406      	bmi.n	8640e <__pow5mult+0x2e>
   86400:	1064      	asrs	r4, r4, #1
   86402:	d014      	beq.n	8642e <__pow5mult+0x4e>
   86404:	6830      	ldr	r0, [r6, #0]
   86406:	b1a8      	cbz	r0, 86434 <__pow5mult+0x54>
   86408:	4606      	mov	r6, r0
   8640a:	07e3      	lsls	r3, r4, #31
   8640c:	d5f8      	bpl.n	86400 <__pow5mult+0x20>
   8640e:	4632      	mov	r2, r6
   86410:	4629      	mov	r1, r5
   86412:	4638      	mov	r0, r7
   86414:	f7ff ff52 	bl	862bc <__multiply>
   86418:	b1b5      	cbz	r5, 86448 <__pow5mult+0x68>
   8641a:	686a      	ldr	r2, [r5, #4]
   8641c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8641e:	1064      	asrs	r4, r4, #1
   86420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86424:	6029      	str	r1, [r5, #0]
   86426:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8642a:	4605      	mov	r5, r0
   8642c:	d1ea      	bne.n	86404 <__pow5mult+0x24>
   8642e:	4628      	mov	r0, r5
   86430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86434:	4632      	mov	r2, r6
   86436:	4631      	mov	r1, r6
   86438:	4638      	mov	r0, r7
   8643a:	f7ff ff3f 	bl	862bc <__multiply>
   8643e:	6030      	str	r0, [r6, #0]
   86440:	f8c0 8000 	str.w	r8, [r0]
   86444:	4606      	mov	r6, r0
   86446:	e7e0      	b.n	8640a <__pow5mult+0x2a>
   86448:	4605      	mov	r5, r0
   8644a:	e7d9      	b.n	86400 <__pow5mult+0x20>
   8644c:	4a0b      	ldr	r2, [pc, #44]	; (8647c <__pow5mult+0x9c>)
   8644e:	3b01      	subs	r3, #1
   86450:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   86454:	2300      	movs	r3, #0
   86456:	f7ff fe95 	bl	86184 <__multadd>
   8645a:	4605      	mov	r5, r0
   8645c:	e7c8      	b.n	863f0 <__pow5mult+0x10>
   8645e:	2101      	movs	r1, #1
   86460:	4638      	mov	r0, r7
   86462:	f7ff fe5f 	bl	86124 <_Balloc>
   86466:	f240 2171 	movw	r1, #625	; 0x271
   8646a:	2201      	movs	r2, #1
   8646c:	2300      	movs	r3, #0
   8646e:	6141      	str	r1, [r0, #20]
   86470:	6102      	str	r2, [r0, #16]
   86472:	4606      	mov	r6, r0
   86474:	64b8      	str	r0, [r7, #72]	; 0x48
   86476:	6003      	str	r3, [r0, #0]
   86478:	e7be      	b.n	863f8 <__pow5mult+0x18>
   8647a:	bf00      	nop
   8647c:	00087f78 	.word	0x00087f78

00086480 <__lshift>:
   86480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86484:	690b      	ldr	r3, [r1, #16]
   86486:	1154      	asrs	r4, r2, #5
   86488:	eb04 0803 	add.w	r8, r4, r3
   8648c:	688b      	ldr	r3, [r1, #8]
   8648e:	f108 0501 	add.w	r5, r8, #1
   86492:	429d      	cmp	r5, r3
   86494:	460e      	mov	r6, r1
   86496:	4691      	mov	r9, r2
   86498:	4607      	mov	r7, r0
   8649a:	6849      	ldr	r1, [r1, #4]
   8649c:	dd04      	ble.n	864a8 <__lshift+0x28>
   8649e:	005b      	lsls	r3, r3, #1
   864a0:	429d      	cmp	r5, r3
   864a2:	f101 0101 	add.w	r1, r1, #1
   864a6:	dcfa      	bgt.n	8649e <__lshift+0x1e>
   864a8:	4638      	mov	r0, r7
   864aa:	f7ff fe3b 	bl	86124 <_Balloc>
   864ae:	2c00      	cmp	r4, #0
   864b0:	f100 0314 	add.w	r3, r0, #20
   864b4:	dd06      	ble.n	864c4 <__lshift+0x44>
   864b6:	2100      	movs	r1, #0
   864b8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   864bc:	f843 1b04 	str.w	r1, [r3], #4
   864c0:	429a      	cmp	r2, r3
   864c2:	d1fb      	bne.n	864bc <__lshift+0x3c>
   864c4:	6934      	ldr	r4, [r6, #16]
   864c6:	f106 0114 	add.w	r1, r6, #20
   864ca:	f019 091f 	ands.w	r9, r9, #31
   864ce:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   864d2:	d01d      	beq.n	86510 <__lshift+0x90>
   864d4:	2200      	movs	r2, #0
   864d6:	f1c9 0c20 	rsb	ip, r9, #32
   864da:	680c      	ldr	r4, [r1, #0]
   864dc:	fa04 f409 	lsl.w	r4, r4, r9
   864e0:	4314      	orrs	r4, r2
   864e2:	f843 4b04 	str.w	r4, [r3], #4
   864e6:	f851 2b04 	ldr.w	r2, [r1], #4
   864ea:	458e      	cmp	lr, r1
   864ec:	fa22 f20c 	lsr.w	r2, r2, ip
   864f0:	d8f3      	bhi.n	864da <__lshift+0x5a>
   864f2:	601a      	str	r2, [r3, #0]
   864f4:	b10a      	cbz	r2, 864fa <__lshift+0x7a>
   864f6:	f108 0502 	add.w	r5, r8, #2
   864fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   864fc:	6872      	ldr	r2, [r6, #4]
   864fe:	3d01      	subs	r5, #1
   86500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86504:	6105      	str	r5, [r0, #16]
   86506:	6031      	str	r1, [r6, #0]
   86508:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8650c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86510:	3b04      	subs	r3, #4
   86512:	f851 2b04 	ldr.w	r2, [r1], #4
   86516:	458e      	cmp	lr, r1
   86518:	f843 2f04 	str.w	r2, [r3, #4]!
   8651c:	d8f9      	bhi.n	86512 <__lshift+0x92>
   8651e:	e7ec      	b.n	864fa <__lshift+0x7a>

00086520 <__mcmp>:
   86520:	b430      	push	{r4, r5}
   86522:	690b      	ldr	r3, [r1, #16]
   86524:	4605      	mov	r5, r0
   86526:	6900      	ldr	r0, [r0, #16]
   86528:	1ac0      	subs	r0, r0, r3
   8652a:	d10f      	bne.n	8654c <__mcmp+0x2c>
   8652c:	009b      	lsls	r3, r3, #2
   8652e:	3514      	adds	r5, #20
   86530:	3114      	adds	r1, #20
   86532:	4419      	add	r1, r3
   86534:	442b      	add	r3, r5
   86536:	e001      	b.n	8653c <__mcmp+0x1c>
   86538:	429d      	cmp	r5, r3
   8653a:	d207      	bcs.n	8654c <__mcmp+0x2c>
   8653c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   86540:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   86544:	4294      	cmp	r4, r2
   86546:	d0f7      	beq.n	86538 <__mcmp+0x18>
   86548:	d302      	bcc.n	86550 <__mcmp+0x30>
   8654a:	2001      	movs	r0, #1
   8654c:	bc30      	pop	{r4, r5}
   8654e:	4770      	bx	lr
   86550:	f04f 30ff 	mov.w	r0, #4294967295
   86554:	e7fa      	b.n	8654c <__mcmp+0x2c>
   86556:	bf00      	nop

00086558 <__mdiff>:
   86558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8655c:	690c      	ldr	r4, [r1, #16]
   8655e:	4689      	mov	r9, r1
   86560:	6911      	ldr	r1, [r2, #16]
   86562:	4692      	mov	sl, r2
   86564:	1a64      	subs	r4, r4, r1
   86566:	2c00      	cmp	r4, #0
   86568:	d117      	bne.n	8659a <__mdiff+0x42>
   8656a:	0089      	lsls	r1, r1, #2
   8656c:	f109 0714 	add.w	r7, r9, #20
   86570:	f102 0614 	add.w	r6, r2, #20
   86574:	187b      	adds	r3, r7, r1
   86576:	4431      	add	r1, r6
   86578:	e001      	b.n	8657e <__mdiff+0x26>
   8657a:	429f      	cmp	r7, r3
   8657c:	d265      	bcs.n	8664a <__mdiff+0xf2>
   8657e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   86582:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   86586:	4295      	cmp	r5, r2
   86588:	d0f7      	beq.n	8657a <__mdiff+0x22>
   8658a:	d267      	bcs.n	8665c <__mdiff+0x104>
   8658c:	464b      	mov	r3, r9
   8658e:	46bb      	mov	fp, r7
   86590:	46d1      	mov	r9, sl
   86592:	4637      	mov	r7, r6
   86594:	469a      	mov	sl, r3
   86596:	2401      	movs	r4, #1
   86598:	e005      	b.n	865a6 <__mdiff+0x4e>
   8659a:	db61      	blt.n	86660 <__mdiff+0x108>
   8659c:	2400      	movs	r4, #0
   8659e:	f109 0714 	add.w	r7, r9, #20
   865a2:	f10a 0b14 	add.w	fp, sl, #20
   865a6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   865aa:	f7ff fdbb 	bl	86124 <_Balloc>
   865ae:	465d      	mov	r5, fp
   865b0:	f04f 0800 	mov.w	r8, #0
   865b4:	f8d9 e010 	ldr.w	lr, [r9, #16]
   865b8:	f8da 3010 	ldr.w	r3, [sl, #16]
   865bc:	463e      	mov	r6, r7
   865be:	60c4      	str	r4, [r0, #12]
   865c0:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   865c4:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   865c8:	f100 0414 	add.w	r4, r0, #20
   865cc:	f856 9b04 	ldr.w	r9, [r6], #4
   865d0:	f855 2b04 	ldr.w	r2, [r5], #4
   865d4:	fa1f f389 	uxth.w	r3, r9
   865d8:	4443      	add	r3, r8
   865da:	fa1f f882 	uxth.w	r8, r2
   865de:	0c12      	lsrs	r2, r2, #16
   865e0:	eba3 0308 	sub.w	r3, r3, r8
   865e4:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   865e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
   865ec:	b29b      	uxth	r3, r3
   865ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   865f2:	45ac      	cmp	ip, r5
   865f4:	f844 3b04 	str.w	r3, [r4], #4
   865f8:	ea4f 4822 	mov.w	r8, r2, asr #16
   865fc:	d8e6      	bhi.n	865cc <__mdiff+0x74>
   865fe:	42b7      	cmp	r7, r6
   86600:	d917      	bls.n	86632 <__mdiff+0xda>
   86602:	46a4      	mov	ip, r4
   86604:	4635      	mov	r5, r6
   86606:	f855 3b04 	ldr.w	r3, [r5], #4
   8660a:	b299      	uxth	r1, r3
   8660c:	4441      	add	r1, r8
   8660e:	140a      	asrs	r2, r1, #16
   86610:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   86614:	b289      	uxth	r1, r1
   86616:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8661a:	42af      	cmp	r7, r5
   8661c:	f84c 3b04 	str.w	r3, [ip], #4
   86620:	ea4f 4822 	mov.w	r8, r2, asr #16
   86624:	d8ef      	bhi.n	86606 <__mdiff+0xae>
   86626:	43f6      	mvns	r6, r6
   86628:	4437      	add	r7, r6
   8662a:	f027 0703 	bic.w	r7, r7, #3
   8662e:	3704      	adds	r7, #4
   86630:	443c      	add	r4, r7
   86632:	3c04      	subs	r4, #4
   86634:	b92b      	cbnz	r3, 86642 <__mdiff+0xea>
   86636:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8663a:	f10e 3eff 	add.w	lr, lr, #4294967295
   8663e:	2b00      	cmp	r3, #0
   86640:	d0f9      	beq.n	86636 <__mdiff+0xde>
   86642:	f8c0 e010 	str.w	lr, [r0, #16]
   86646:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8664a:	2100      	movs	r1, #0
   8664c:	f7ff fd6a 	bl	86124 <_Balloc>
   86650:	2201      	movs	r2, #1
   86652:	2300      	movs	r3, #0
   86654:	6102      	str	r2, [r0, #16]
   86656:	6143      	str	r3, [r0, #20]
   86658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8665c:	46b3      	mov	fp, r6
   8665e:	e7a2      	b.n	865a6 <__mdiff+0x4e>
   86660:	464b      	mov	r3, r9
   86662:	f109 0b14 	add.w	fp, r9, #20
   86666:	f102 0714 	add.w	r7, r2, #20
   8666a:	4691      	mov	r9, r2
   8666c:	2401      	movs	r4, #1
   8666e:	469a      	mov	sl, r3
   86670:	e799      	b.n	865a6 <__mdiff+0x4e>
   86672:	bf00      	nop

00086674 <__d2b>:
   86674:	b5f0      	push	{r4, r5, r6, r7, lr}
   86676:	2101      	movs	r1, #1
   86678:	b083      	sub	sp, #12
   8667a:	461c      	mov	r4, r3
   8667c:	f3c3 550a 	ubfx	r5, r3, #20, #11
   86680:	4616      	mov	r6, r2
   86682:	f7ff fd4f 	bl	86124 <_Balloc>
   86686:	f3c4 0413 	ubfx	r4, r4, #0, #20
   8668a:	4607      	mov	r7, r0
   8668c:	b10d      	cbz	r5, 86692 <__d2b+0x1e>
   8668e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   86692:	9401      	str	r4, [sp, #4]
   86694:	b306      	cbz	r6, 866d8 <__d2b+0x64>
   86696:	a802      	add	r0, sp, #8
   86698:	f840 6d08 	str.w	r6, [r0, #-8]!
   8669c:	f7ff fdd4 	bl	86248 <__lo0bits>
   866a0:	2800      	cmp	r0, #0
   866a2:	d130      	bne.n	86706 <__d2b+0x92>
   866a4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   866a8:	617a      	str	r2, [r7, #20]
   866aa:	2b00      	cmp	r3, #0
   866ac:	bf0c      	ite	eq
   866ae:	2101      	moveq	r1, #1
   866b0:	2102      	movne	r1, #2
   866b2:	61bb      	str	r3, [r7, #24]
   866b4:	6139      	str	r1, [r7, #16]
   866b6:	b9d5      	cbnz	r5, 866ee <__d2b+0x7a>
   866b8:	9a08      	ldr	r2, [sp, #32]
   866ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   866be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   866c2:	6010      	str	r0, [r2, #0]
   866c4:	6918      	ldr	r0, [r3, #16]
   866c6:	f7ff fd9f 	bl	86208 <__hi0bits>
   866ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   866cc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   866d0:	6018      	str	r0, [r3, #0]
   866d2:	4638      	mov	r0, r7
   866d4:	b003      	add	sp, #12
   866d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   866d8:	a801      	add	r0, sp, #4
   866da:	f7ff fdb5 	bl	86248 <__lo0bits>
   866de:	2201      	movs	r2, #1
   866e0:	9b01      	ldr	r3, [sp, #4]
   866e2:	4611      	mov	r1, r2
   866e4:	3020      	adds	r0, #32
   866e6:	613a      	str	r2, [r7, #16]
   866e8:	617b      	str	r3, [r7, #20]
   866ea:	2d00      	cmp	r5, #0
   866ec:	d0e4      	beq.n	866b8 <__d2b+0x44>
   866ee:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   866f2:	9a08      	ldr	r2, [sp, #32]
   866f4:	4403      	add	r3, r0
   866f6:	6013      	str	r3, [r2, #0]
   866f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   866fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   866fe:	6018      	str	r0, [r3, #0]
   86700:	4638      	mov	r0, r7
   86702:	b003      	add	sp, #12
   86704:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86706:	9b01      	ldr	r3, [sp, #4]
   86708:	f1c0 0220 	rsb	r2, r0, #32
   8670c:	9900      	ldr	r1, [sp, #0]
   8670e:	fa03 f202 	lsl.w	r2, r3, r2
   86712:	430a      	orrs	r2, r1
   86714:	40c3      	lsrs	r3, r0
   86716:	9301      	str	r3, [sp, #4]
   86718:	617a      	str	r2, [r7, #20]
   8671a:	e7c6      	b.n	866aa <__d2b+0x36>

0008671c <_sbrk_r>:
   8671c:	b538      	push	{r3, r4, r5, lr}
   8671e:	2300      	movs	r3, #0
   86720:	4c06      	ldr	r4, [pc, #24]	; (8673c <_sbrk_r+0x20>)
   86722:	4605      	mov	r5, r0
   86724:	4608      	mov	r0, r1
   86726:	6023      	str	r3, [r4, #0]
   86728:	f7fc fbe6 	bl	82ef8 <_sbrk>
   8672c:	1c43      	adds	r3, r0, #1
   8672e:	d000      	beq.n	86732 <_sbrk_r+0x16>
   86730:	bd38      	pop	{r3, r4, r5, pc}
   86732:	6823      	ldr	r3, [r4, #0]
   86734:	2b00      	cmp	r3, #0
   86736:	d0fb      	beq.n	86730 <_sbrk_r+0x14>
   86738:	602b      	str	r3, [r5, #0]
   8673a:	bd38      	pop	{r3, r4, r5, pc}
   8673c:	20071058 	.word	0x20071058

00086740 <__ssprint_r>:
   86740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86744:	6893      	ldr	r3, [r2, #8]
   86746:	b083      	sub	sp, #12
   86748:	4690      	mov	r8, r2
   8674a:	2b00      	cmp	r3, #0
   8674c:	d070      	beq.n	86830 <__ssprint_r+0xf0>
   8674e:	4682      	mov	sl, r0
   86750:	460c      	mov	r4, r1
   86752:	6817      	ldr	r7, [r2, #0]
   86754:	688d      	ldr	r5, [r1, #8]
   86756:	6808      	ldr	r0, [r1, #0]
   86758:	e042      	b.n	867e0 <__ssprint_r+0xa0>
   8675a:	89a3      	ldrh	r3, [r4, #12]
   8675c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   86760:	d02e      	beq.n	867c0 <__ssprint_r+0x80>
   86762:	6965      	ldr	r5, [r4, #20]
   86764:	6921      	ldr	r1, [r4, #16]
   86766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8676a:	eba0 0b01 	sub.w	fp, r0, r1
   8676e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   86772:	f10b 0001 	add.w	r0, fp, #1
   86776:	106d      	asrs	r5, r5, #1
   86778:	4430      	add	r0, r6
   8677a:	42a8      	cmp	r0, r5
   8677c:	462a      	mov	r2, r5
   8677e:	bf84      	itt	hi
   86780:	4605      	movhi	r5, r0
   86782:	462a      	movhi	r2, r5
   86784:	055b      	lsls	r3, r3, #21
   86786:	d538      	bpl.n	867fa <__ssprint_r+0xba>
   86788:	4611      	mov	r1, r2
   8678a:	4650      	mov	r0, sl
   8678c:	f7ff f9d6 	bl	85b3c <_malloc_r>
   86790:	2800      	cmp	r0, #0
   86792:	d03c      	beq.n	8680e <__ssprint_r+0xce>
   86794:	465a      	mov	r2, fp
   86796:	6921      	ldr	r1, [r4, #16]
   86798:	9001      	str	r0, [sp, #4]
   8679a:	f7fc fe43 	bl	83424 <memcpy>
   8679e:	89a2      	ldrh	r2, [r4, #12]
   867a0:	9b01      	ldr	r3, [sp, #4]
   867a2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   867a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   867aa:	81a2      	strh	r2, [r4, #12]
   867ac:	eba5 020b 	sub.w	r2, r5, fp
   867b0:	eb03 000b 	add.w	r0, r3, fp
   867b4:	6165      	str	r5, [r4, #20]
   867b6:	46b3      	mov	fp, r6
   867b8:	4635      	mov	r5, r6
   867ba:	6123      	str	r3, [r4, #16]
   867bc:	6020      	str	r0, [r4, #0]
   867be:	60a2      	str	r2, [r4, #8]
   867c0:	465a      	mov	r2, fp
   867c2:	4649      	mov	r1, r9
   867c4:	f000 fa18 	bl	86bf8 <memmove>
   867c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   867cc:	68a2      	ldr	r2, [r4, #8]
   867ce:	6820      	ldr	r0, [r4, #0]
   867d0:	1b55      	subs	r5, r2, r5
   867d2:	4458      	add	r0, fp
   867d4:	1b9e      	subs	r6, r3, r6
   867d6:	60a5      	str	r5, [r4, #8]
   867d8:	6020      	str	r0, [r4, #0]
   867da:	f8c8 6008 	str.w	r6, [r8, #8]
   867de:	b33e      	cbz	r6, 86830 <__ssprint_r+0xf0>
   867e0:	687e      	ldr	r6, [r7, #4]
   867e2:	463b      	mov	r3, r7
   867e4:	3708      	adds	r7, #8
   867e6:	2e00      	cmp	r6, #0
   867e8:	d0fa      	beq.n	867e0 <__ssprint_r+0xa0>
   867ea:	42ae      	cmp	r6, r5
   867ec:	f8d3 9000 	ldr.w	r9, [r3]
   867f0:	46ab      	mov	fp, r5
   867f2:	d2b2      	bcs.n	8675a <__ssprint_r+0x1a>
   867f4:	4635      	mov	r5, r6
   867f6:	46b3      	mov	fp, r6
   867f8:	e7e2      	b.n	867c0 <__ssprint_r+0x80>
   867fa:	4650      	mov	r0, sl
   867fc:	f000 fa60 	bl	86cc0 <_realloc_r>
   86800:	4603      	mov	r3, r0
   86802:	2800      	cmp	r0, #0
   86804:	d1d2      	bne.n	867ac <__ssprint_r+0x6c>
   86806:	6921      	ldr	r1, [r4, #16]
   86808:	4650      	mov	r0, sl
   8680a:	f000 f8f9 	bl	86a00 <_free_r>
   8680e:	230c      	movs	r3, #12
   86810:	2200      	movs	r2, #0
   86812:	f04f 30ff 	mov.w	r0, #4294967295
   86816:	f8ca 3000 	str.w	r3, [sl]
   8681a:	89a3      	ldrh	r3, [r4, #12]
   8681c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86820:	81a3      	strh	r3, [r4, #12]
   86822:	f8c8 2008 	str.w	r2, [r8, #8]
   86826:	f8c8 2004 	str.w	r2, [r8, #4]
   8682a:	b003      	add	sp, #12
   8682c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86830:	2000      	movs	r0, #0
   86832:	f8c8 0004 	str.w	r0, [r8, #4]
   86836:	b003      	add	sp, #12
   86838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008683c <__register_exitproc>:
   8683c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86840:	4d2c      	ldr	r5, [pc, #176]	; (868f4 <__register_exitproc+0xb8>)
   86842:	4606      	mov	r6, r0
   86844:	6828      	ldr	r0, [r5, #0]
   86846:	4698      	mov	r8, r3
   86848:	460f      	mov	r7, r1
   8684a:	4691      	mov	r9, r2
   8684c:	f7ff f972 	bl	85b34 <__retarget_lock_acquire_recursive>
   86850:	4b29      	ldr	r3, [pc, #164]	; (868f8 <__register_exitproc+0xbc>)
   86852:	681c      	ldr	r4, [r3, #0]
   86854:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   86858:	2b00      	cmp	r3, #0
   8685a:	d03e      	beq.n	868da <__register_exitproc+0x9e>
   8685c:	685a      	ldr	r2, [r3, #4]
   8685e:	2a1f      	cmp	r2, #31
   86860:	dc1c      	bgt.n	8689c <__register_exitproc+0x60>
   86862:	f102 0e01 	add.w	lr, r2, #1
   86866:	b176      	cbz	r6, 86886 <__register_exitproc+0x4a>
   86868:	2101      	movs	r1, #1
   8686a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8686e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   86872:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   86876:	4091      	lsls	r1, r2
   86878:	4308      	orrs	r0, r1
   8687a:	2e02      	cmp	r6, #2
   8687c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   86880:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   86884:	d023      	beq.n	868ce <__register_exitproc+0x92>
   86886:	3202      	adds	r2, #2
   86888:	f8c3 e004 	str.w	lr, [r3, #4]
   8688c:	6828      	ldr	r0, [r5, #0]
   8688e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   86892:	f7ff f951 	bl	85b38 <__retarget_lock_release_recursive>
   86896:	2000      	movs	r0, #0
   86898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8689c:	4b17      	ldr	r3, [pc, #92]	; (868fc <__register_exitproc+0xc0>)
   8689e:	b30b      	cbz	r3, 868e4 <__register_exitproc+0xa8>
   868a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   868a4:	f3af 8000 	nop.w
   868a8:	4603      	mov	r3, r0
   868aa:	b1d8      	cbz	r0, 868e4 <__register_exitproc+0xa8>
   868ac:	2000      	movs	r0, #0
   868ae:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   868b2:	f04f 0e01 	mov.w	lr, #1
   868b6:	6058      	str	r0, [r3, #4]
   868b8:	6019      	str	r1, [r3, #0]
   868ba:	4602      	mov	r2, r0
   868bc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   868c0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   868c4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   868c8:	2e00      	cmp	r6, #0
   868ca:	d0dc      	beq.n	86886 <__register_exitproc+0x4a>
   868cc:	e7cc      	b.n	86868 <__register_exitproc+0x2c>
   868ce:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   868d2:	4301      	orrs	r1, r0
   868d4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   868d8:	e7d5      	b.n	86886 <__register_exitproc+0x4a>
   868da:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   868de:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   868e2:	e7bb      	b.n	8685c <__register_exitproc+0x20>
   868e4:	6828      	ldr	r0, [r5, #0]
   868e6:	f7ff f927 	bl	85b38 <__retarget_lock_release_recursive>
   868ea:	f04f 30ff 	mov.w	r0, #4294967295
   868ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   868f2:	bf00      	nop
   868f4:	200705d0 	.word	0x200705d0
   868f8:	00087e0c 	.word	0x00087e0c
   868fc:	00000000 	.word	0x00000000

00086900 <_calloc_r>:
   86900:	b510      	push	{r4, lr}
   86902:	fb02 f101 	mul.w	r1, r2, r1
   86906:	f7ff f919 	bl	85b3c <_malloc_r>
   8690a:	4604      	mov	r4, r0
   8690c:	b1d8      	cbz	r0, 86946 <_calloc_r+0x46>
   8690e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   86912:	f022 0203 	bic.w	r2, r2, #3
   86916:	3a04      	subs	r2, #4
   86918:	2a24      	cmp	r2, #36	; 0x24
   8691a:	d818      	bhi.n	8694e <_calloc_r+0x4e>
   8691c:	2a13      	cmp	r2, #19
   8691e:	d914      	bls.n	8694a <_calloc_r+0x4a>
   86920:	2300      	movs	r3, #0
   86922:	2a1b      	cmp	r2, #27
   86924:	6003      	str	r3, [r0, #0]
   86926:	6043      	str	r3, [r0, #4]
   86928:	d916      	bls.n	86958 <_calloc_r+0x58>
   8692a:	2a24      	cmp	r2, #36	; 0x24
   8692c:	6083      	str	r3, [r0, #8]
   8692e:	60c3      	str	r3, [r0, #12]
   86930:	bf11      	iteee	ne
   86932:	f100 0210 	addne.w	r2, r0, #16
   86936:	6103      	streq	r3, [r0, #16]
   86938:	6143      	streq	r3, [r0, #20]
   8693a:	f100 0218 	addeq.w	r2, r0, #24
   8693e:	2300      	movs	r3, #0
   86940:	6013      	str	r3, [r2, #0]
   86942:	6053      	str	r3, [r2, #4]
   86944:	6093      	str	r3, [r2, #8]
   86946:	4620      	mov	r0, r4
   86948:	bd10      	pop	{r4, pc}
   8694a:	4602      	mov	r2, r0
   8694c:	e7f7      	b.n	8693e <_calloc_r+0x3e>
   8694e:	2100      	movs	r1, #0
   86950:	f7fc fdde 	bl	83510 <memset>
   86954:	4620      	mov	r0, r4
   86956:	bd10      	pop	{r4, pc}
   86958:	f100 0208 	add.w	r2, r0, #8
   8695c:	e7ef      	b.n	8693e <_calloc_r+0x3e>
   8695e:	bf00      	nop

00086960 <_malloc_trim_r>:
   86960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86962:	460c      	mov	r4, r1
   86964:	4f23      	ldr	r7, [pc, #140]	; (869f4 <_malloc_trim_r+0x94>)
   86966:	4606      	mov	r6, r0
   86968:	f7ff fbd0 	bl	8610c <__malloc_lock>
   8696c:	68bb      	ldr	r3, [r7, #8]
   8696e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   86972:	685d      	ldr	r5, [r3, #4]
   86974:	310f      	adds	r1, #15
   86976:	f025 0503 	bic.w	r5, r5, #3
   8697a:	4429      	add	r1, r5
   8697c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   86980:	f021 010f 	bic.w	r1, r1, #15
   86984:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   86988:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8698c:	db07      	blt.n	8699e <_malloc_trim_r+0x3e>
   8698e:	2100      	movs	r1, #0
   86990:	4630      	mov	r0, r6
   86992:	f7ff fec3 	bl	8671c <_sbrk_r>
   86996:	68bb      	ldr	r3, [r7, #8]
   86998:	442b      	add	r3, r5
   8699a:	4298      	cmp	r0, r3
   8699c:	d004      	beq.n	869a8 <_malloc_trim_r+0x48>
   8699e:	4630      	mov	r0, r6
   869a0:	f7ff fbba 	bl	86118 <__malloc_unlock>
   869a4:	2000      	movs	r0, #0
   869a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   869a8:	4261      	negs	r1, r4
   869aa:	4630      	mov	r0, r6
   869ac:	f7ff feb6 	bl	8671c <_sbrk_r>
   869b0:	3001      	adds	r0, #1
   869b2:	d00d      	beq.n	869d0 <_malloc_trim_r+0x70>
   869b4:	4b10      	ldr	r3, [pc, #64]	; (869f8 <_malloc_trim_r+0x98>)
   869b6:	68ba      	ldr	r2, [r7, #8]
   869b8:	6819      	ldr	r1, [r3, #0]
   869ba:	1b2d      	subs	r5, r5, r4
   869bc:	f045 0501 	orr.w	r5, r5, #1
   869c0:	4630      	mov	r0, r6
   869c2:	1b09      	subs	r1, r1, r4
   869c4:	6055      	str	r5, [r2, #4]
   869c6:	6019      	str	r1, [r3, #0]
   869c8:	f7ff fba6 	bl	86118 <__malloc_unlock>
   869cc:	2001      	movs	r0, #1
   869ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   869d0:	2100      	movs	r1, #0
   869d2:	4630      	mov	r0, r6
   869d4:	f7ff fea2 	bl	8671c <_sbrk_r>
   869d8:	68ba      	ldr	r2, [r7, #8]
   869da:	1a83      	subs	r3, r0, r2
   869dc:	2b0f      	cmp	r3, #15
   869de:	ddde      	ble.n	8699e <_malloc_trim_r+0x3e>
   869e0:	4c06      	ldr	r4, [pc, #24]	; (869fc <_malloc_trim_r+0x9c>)
   869e2:	4905      	ldr	r1, [pc, #20]	; (869f8 <_malloc_trim_r+0x98>)
   869e4:	6824      	ldr	r4, [r4, #0]
   869e6:	f043 0301 	orr.w	r3, r3, #1
   869ea:	1b00      	subs	r0, r0, r4
   869ec:	6053      	str	r3, [r2, #4]
   869ee:	6008      	str	r0, [r1, #0]
   869f0:	e7d5      	b.n	8699e <_malloc_trim_r+0x3e>
   869f2:	bf00      	nop
   869f4:	200705d4 	.word	0x200705d4
   869f8:	20070fb0 	.word	0x20070fb0
   869fc:	200709dc 	.word	0x200709dc

00086a00 <_free_r>:
   86a00:	2900      	cmp	r1, #0
   86a02:	d044      	beq.n	86a8e <_free_r+0x8e>
   86a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86a08:	460d      	mov	r5, r1
   86a0a:	4680      	mov	r8, r0
   86a0c:	f7ff fb7e 	bl	8610c <__malloc_lock>
   86a10:	f855 7c04 	ldr.w	r7, [r5, #-4]
   86a14:	4969      	ldr	r1, [pc, #420]	; (86bbc <_free_r+0x1bc>)
   86a16:	f1a5 0408 	sub.w	r4, r5, #8
   86a1a:	f027 0301 	bic.w	r3, r7, #1
   86a1e:	18e2      	adds	r2, r4, r3
   86a20:	688e      	ldr	r6, [r1, #8]
   86a22:	6850      	ldr	r0, [r2, #4]
   86a24:	42b2      	cmp	r2, r6
   86a26:	f020 0003 	bic.w	r0, r0, #3
   86a2a:	d05e      	beq.n	86aea <_free_r+0xea>
   86a2c:	07fe      	lsls	r6, r7, #31
   86a2e:	6050      	str	r0, [r2, #4]
   86a30:	d40b      	bmi.n	86a4a <_free_r+0x4a>
   86a32:	f855 7c08 	ldr.w	r7, [r5, #-8]
   86a36:	f101 0e08 	add.w	lr, r1, #8
   86a3a:	1be4      	subs	r4, r4, r7
   86a3c:	68a5      	ldr	r5, [r4, #8]
   86a3e:	443b      	add	r3, r7
   86a40:	4575      	cmp	r5, lr
   86a42:	d06d      	beq.n	86b20 <_free_r+0x120>
   86a44:	68e7      	ldr	r7, [r4, #12]
   86a46:	60ef      	str	r7, [r5, #12]
   86a48:	60bd      	str	r5, [r7, #8]
   86a4a:	1815      	adds	r5, r2, r0
   86a4c:	686d      	ldr	r5, [r5, #4]
   86a4e:	07ed      	lsls	r5, r5, #31
   86a50:	d53e      	bpl.n	86ad0 <_free_r+0xd0>
   86a52:	f043 0201 	orr.w	r2, r3, #1
   86a56:	6062      	str	r2, [r4, #4]
   86a58:	50e3      	str	r3, [r4, r3]
   86a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86a5e:	d217      	bcs.n	86a90 <_free_r+0x90>
   86a60:	2201      	movs	r2, #1
   86a62:	08db      	lsrs	r3, r3, #3
   86a64:	1098      	asrs	r0, r3, #2
   86a66:	684d      	ldr	r5, [r1, #4]
   86a68:	4413      	add	r3, r2
   86a6a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   86a6e:	4082      	lsls	r2, r0
   86a70:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   86a74:	432a      	orrs	r2, r5
   86a76:	3808      	subs	r0, #8
   86a78:	60e0      	str	r0, [r4, #12]
   86a7a:	60a7      	str	r7, [r4, #8]
   86a7c:	604a      	str	r2, [r1, #4]
   86a7e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   86a82:	60fc      	str	r4, [r7, #12]
   86a84:	4640      	mov	r0, r8
   86a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86a8a:	f7ff bb45 	b.w	86118 <__malloc_unlock>
   86a8e:	4770      	bx	lr
   86a90:	0a5a      	lsrs	r2, r3, #9
   86a92:	2a04      	cmp	r2, #4
   86a94:	d852      	bhi.n	86b3c <_free_r+0x13c>
   86a96:	099a      	lsrs	r2, r3, #6
   86a98:	f102 0739 	add.w	r7, r2, #57	; 0x39
   86a9c:	00ff      	lsls	r7, r7, #3
   86a9e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   86aa2:	19c8      	adds	r0, r1, r7
   86aa4:	59ca      	ldr	r2, [r1, r7]
   86aa6:	3808      	subs	r0, #8
   86aa8:	4290      	cmp	r0, r2
   86aaa:	d04f      	beq.n	86b4c <_free_r+0x14c>
   86aac:	6851      	ldr	r1, [r2, #4]
   86aae:	f021 0103 	bic.w	r1, r1, #3
   86ab2:	428b      	cmp	r3, r1
   86ab4:	d232      	bcs.n	86b1c <_free_r+0x11c>
   86ab6:	6892      	ldr	r2, [r2, #8]
   86ab8:	4290      	cmp	r0, r2
   86aba:	d1f7      	bne.n	86aac <_free_r+0xac>
   86abc:	68c3      	ldr	r3, [r0, #12]
   86abe:	60a0      	str	r0, [r4, #8]
   86ac0:	60e3      	str	r3, [r4, #12]
   86ac2:	609c      	str	r4, [r3, #8]
   86ac4:	60c4      	str	r4, [r0, #12]
   86ac6:	4640      	mov	r0, r8
   86ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86acc:	f7ff bb24 	b.w	86118 <__malloc_unlock>
   86ad0:	6895      	ldr	r5, [r2, #8]
   86ad2:	4f3b      	ldr	r7, [pc, #236]	; (86bc0 <_free_r+0x1c0>)
   86ad4:	4403      	add	r3, r0
   86ad6:	42bd      	cmp	r5, r7
   86ad8:	d040      	beq.n	86b5c <_free_r+0x15c>
   86ada:	68d0      	ldr	r0, [r2, #12]
   86adc:	f043 0201 	orr.w	r2, r3, #1
   86ae0:	60e8      	str	r0, [r5, #12]
   86ae2:	6085      	str	r5, [r0, #8]
   86ae4:	6062      	str	r2, [r4, #4]
   86ae6:	50e3      	str	r3, [r4, r3]
   86ae8:	e7b7      	b.n	86a5a <_free_r+0x5a>
   86aea:	07ff      	lsls	r7, r7, #31
   86aec:	4403      	add	r3, r0
   86aee:	d407      	bmi.n	86b00 <_free_r+0x100>
   86af0:	f855 5c08 	ldr.w	r5, [r5, #-8]
   86af4:	1b64      	subs	r4, r4, r5
   86af6:	68e2      	ldr	r2, [r4, #12]
   86af8:	68a0      	ldr	r0, [r4, #8]
   86afa:	442b      	add	r3, r5
   86afc:	60c2      	str	r2, [r0, #12]
   86afe:	6090      	str	r0, [r2, #8]
   86b00:	4a30      	ldr	r2, [pc, #192]	; (86bc4 <_free_r+0x1c4>)
   86b02:	f043 0001 	orr.w	r0, r3, #1
   86b06:	6812      	ldr	r2, [r2, #0]
   86b08:	6060      	str	r0, [r4, #4]
   86b0a:	4293      	cmp	r3, r2
   86b0c:	608c      	str	r4, [r1, #8]
   86b0e:	d3b9      	bcc.n	86a84 <_free_r+0x84>
   86b10:	4b2d      	ldr	r3, [pc, #180]	; (86bc8 <_free_r+0x1c8>)
   86b12:	4640      	mov	r0, r8
   86b14:	6819      	ldr	r1, [r3, #0]
   86b16:	f7ff ff23 	bl	86960 <_malloc_trim_r>
   86b1a:	e7b3      	b.n	86a84 <_free_r+0x84>
   86b1c:	4610      	mov	r0, r2
   86b1e:	e7cd      	b.n	86abc <_free_r+0xbc>
   86b20:	1811      	adds	r1, r2, r0
   86b22:	6849      	ldr	r1, [r1, #4]
   86b24:	07c9      	lsls	r1, r1, #31
   86b26:	d444      	bmi.n	86bb2 <_free_r+0x1b2>
   86b28:	6891      	ldr	r1, [r2, #8]
   86b2a:	4403      	add	r3, r0
   86b2c:	68d2      	ldr	r2, [r2, #12]
   86b2e:	f043 0001 	orr.w	r0, r3, #1
   86b32:	60ca      	str	r2, [r1, #12]
   86b34:	6091      	str	r1, [r2, #8]
   86b36:	6060      	str	r0, [r4, #4]
   86b38:	50e3      	str	r3, [r4, r3]
   86b3a:	e7a3      	b.n	86a84 <_free_r+0x84>
   86b3c:	2a14      	cmp	r2, #20
   86b3e:	d816      	bhi.n	86b6e <_free_r+0x16e>
   86b40:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   86b44:	00ff      	lsls	r7, r7, #3
   86b46:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   86b4a:	e7aa      	b.n	86aa2 <_free_r+0xa2>
   86b4c:	2301      	movs	r3, #1
   86b4e:	10aa      	asrs	r2, r5, #2
   86b50:	684d      	ldr	r5, [r1, #4]
   86b52:	4093      	lsls	r3, r2
   86b54:	432b      	orrs	r3, r5
   86b56:	604b      	str	r3, [r1, #4]
   86b58:	4603      	mov	r3, r0
   86b5a:	e7b0      	b.n	86abe <_free_r+0xbe>
   86b5c:	f043 0201 	orr.w	r2, r3, #1
   86b60:	614c      	str	r4, [r1, #20]
   86b62:	610c      	str	r4, [r1, #16]
   86b64:	60e5      	str	r5, [r4, #12]
   86b66:	60a5      	str	r5, [r4, #8]
   86b68:	6062      	str	r2, [r4, #4]
   86b6a:	50e3      	str	r3, [r4, r3]
   86b6c:	e78a      	b.n	86a84 <_free_r+0x84>
   86b6e:	2a54      	cmp	r2, #84	; 0x54
   86b70:	d806      	bhi.n	86b80 <_free_r+0x180>
   86b72:	0b1a      	lsrs	r2, r3, #12
   86b74:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   86b78:	00ff      	lsls	r7, r7, #3
   86b7a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   86b7e:	e790      	b.n	86aa2 <_free_r+0xa2>
   86b80:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86b84:	d806      	bhi.n	86b94 <_free_r+0x194>
   86b86:	0bda      	lsrs	r2, r3, #15
   86b88:	f102 0778 	add.w	r7, r2, #120	; 0x78
   86b8c:	00ff      	lsls	r7, r7, #3
   86b8e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   86b92:	e786      	b.n	86aa2 <_free_r+0xa2>
   86b94:	f240 5054 	movw	r0, #1364	; 0x554
   86b98:	4282      	cmp	r2, r0
   86b9a:	d806      	bhi.n	86baa <_free_r+0x1aa>
   86b9c:	0c9a      	lsrs	r2, r3, #18
   86b9e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   86ba2:	00ff      	lsls	r7, r7, #3
   86ba4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   86ba8:	e77b      	b.n	86aa2 <_free_r+0xa2>
   86baa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   86bae:	257e      	movs	r5, #126	; 0x7e
   86bb0:	e777      	b.n	86aa2 <_free_r+0xa2>
   86bb2:	f043 0101 	orr.w	r1, r3, #1
   86bb6:	6061      	str	r1, [r4, #4]
   86bb8:	6013      	str	r3, [r2, #0]
   86bba:	e763      	b.n	86a84 <_free_r+0x84>
   86bbc:	200705d4 	.word	0x200705d4
   86bc0:	200705dc 	.word	0x200705dc
   86bc4:	200709e0 	.word	0x200709e0
   86bc8:	20070fe0 	.word	0x20070fe0

00086bcc <__ascii_mbtowc>:
   86bcc:	b082      	sub	sp, #8
   86bce:	b149      	cbz	r1, 86be4 <__ascii_mbtowc+0x18>
   86bd0:	b15a      	cbz	r2, 86bea <__ascii_mbtowc+0x1e>
   86bd2:	b16b      	cbz	r3, 86bf0 <__ascii_mbtowc+0x24>
   86bd4:	7813      	ldrb	r3, [r2, #0]
   86bd6:	600b      	str	r3, [r1, #0]
   86bd8:	7812      	ldrb	r2, [r2, #0]
   86bda:	1c10      	adds	r0, r2, #0
   86bdc:	bf18      	it	ne
   86bde:	2001      	movne	r0, #1
   86be0:	b002      	add	sp, #8
   86be2:	4770      	bx	lr
   86be4:	a901      	add	r1, sp, #4
   86be6:	2a00      	cmp	r2, #0
   86be8:	d1f3      	bne.n	86bd2 <__ascii_mbtowc+0x6>
   86bea:	4610      	mov	r0, r2
   86bec:	b002      	add	sp, #8
   86bee:	4770      	bx	lr
   86bf0:	f06f 0001 	mvn.w	r0, #1
   86bf4:	e7f4      	b.n	86be0 <__ascii_mbtowc+0x14>
   86bf6:	bf00      	nop

00086bf8 <memmove>:
   86bf8:	4288      	cmp	r0, r1
   86bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
   86bfc:	d90d      	bls.n	86c1a <memmove+0x22>
   86bfe:	188b      	adds	r3, r1, r2
   86c00:	4298      	cmp	r0, r3
   86c02:	d20a      	bcs.n	86c1a <memmove+0x22>
   86c04:	1884      	adds	r4, r0, r2
   86c06:	2a00      	cmp	r2, #0
   86c08:	d051      	beq.n	86cae <memmove+0xb6>
   86c0a:	4622      	mov	r2, r4
   86c0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   86c10:	4299      	cmp	r1, r3
   86c12:	f802 4d01 	strb.w	r4, [r2, #-1]!
   86c16:	d1f9      	bne.n	86c0c <memmove+0x14>
   86c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86c1a:	2a0f      	cmp	r2, #15
   86c1c:	d948      	bls.n	86cb0 <memmove+0xb8>
   86c1e:	ea41 0300 	orr.w	r3, r1, r0
   86c22:	079b      	lsls	r3, r3, #30
   86c24:	d146      	bne.n	86cb4 <memmove+0xbc>
   86c26:	4615      	mov	r5, r2
   86c28:	f100 0410 	add.w	r4, r0, #16
   86c2c:	f101 0310 	add.w	r3, r1, #16
   86c30:	f853 6c10 	ldr.w	r6, [r3, #-16]
   86c34:	3d10      	subs	r5, #16
   86c36:	f844 6c10 	str.w	r6, [r4, #-16]
   86c3a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   86c3e:	2d0f      	cmp	r5, #15
   86c40:	f844 6c0c 	str.w	r6, [r4, #-12]
   86c44:	f853 6c08 	ldr.w	r6, [r3, #-8]
   86c48:	f104 0410 	add.w	r4, r4, #16
   86c4c:	f844 6c18 	str.w	r6, [r4, #-24]
   86c50:	f853 6c04 	ldr.w	r6, [r3, #-4]
   86c54:	f103 0310 	add.w	r3, r3, #16
   86c58:	f844 6c14 	str.w	r6, [r4, #-20]
   86c5c:	d8e8      	bhi.n	86c30 <memmove+0x38>
   86c5e:	f1a2 0310 	sub.w	r3, r2, #16
   86c62:	f023 030f 	bic.w	r3, r3, #15
   86c66:	f002 0e0f 	and.w	lr, r2, #15
   86c6a:	3310      	adds	r3, #16
   86c6c:	f1be 0f03 	cmp.w	lr, #3
   86c70:	4419      	add	r1, r3
   86c72:	4403      	add	r3, r0
   86c74:	d921      	bls.n	86cba <memmove+0xc2>
   86c76:	460e      	mov	r6, r1
   86c78:	4674      	mov	r4, lr
   86c7a:	1f1d      	subs	r5, r3, #4
   86c7c:	f856 7b04 	ldr.w	r7, [r6], #4
   86c80:	3c04      	subs	r4, #4
   86c82:	2c03      	cmp	r4, #3
   86c84:	f845 7f04 	str.w	r7, [r5, #4]!
   86c88:	d8f8      	bhi.n	86c7c <memmove+0x84>
   86c8a:	f1ae 0404 	sub.w	r4, lr, #4
   86c8e:	f024 0403 	bic.w	r4, r4, #3
   86c92:	3404      	adds	r4, #4
   86c94:	4421      	add	r1, r4
   86c96:	4423      	add	r3, r4
   86c98:	f002 0203 	and.w	r2, r2, #3
   86c9c:	b162      	cbz	r2, 86cb8 <memmove+0xc0>
   86c9e:	3b01      	subs	r3, #1
   86ca0:	440a      	add	r2, r1
   86ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
   86ca6:	428a      	cmp	r2, r1
   86ca8:	f803 4f01 	strb.w	r4, [r3, #1]!
   86cac:	d1f9      	bne.n	86ca2 <memmove+0xaa>
   86cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86cb0:	4603      	mov	r3, r0
   86cb2:	e7f3      	b.n	86c9c <memmove+0xa4>
   86cb4:	4603      	mov	r3, r0
   86cb6:	e7f2      	b.n	86c9e <memmove+0xa6>
   86cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86cba:	4672      	mov	r2, lr
   86cbc:	e7ee      	b.n	86c9c <memmove+0xa4>
   86cbe:	bf00      	nop

00086cc0 <_realloc_r>:
   86cc0:	2900      	cmp	r1, #0
   86cc2:	f000 8094 	beq.w	86dee <_realloc_r+0x12e>
   86cc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86cca:	460c      	mov	r4, r1
   86ccc:	4615      	mov	r5, r2
   86cce:	b083      	sub	sp, #12
   86cd0:	4680      	mov	r8, r0
   86cd2:	f105 060b 	add.w	r6, r5, #11
   86cd6:	f7ff fa19 	bl	8610c <__malloc_lock>
   86cda:	f854 ec04 	ldr.w	lr, [r4, #-4]
   86cde:	2e16      	cmp	r6, #22
   86ce0:	f02e 0703 	bic.w	r7, lr, #3
   86ce4:	f1a4 0908 	sub.w	r9, r4, #8
   86ce8:	d83c      	bhi.n	86d64 <_realloc_r+0xa4>
   86cea:	2210      	movs	r2, #16
   86cec:	4616      	mov	r6, r2
   86cee:	42b5      	cmp	r5, r6
   86cf0:	d83d      	bhi.n	86d6e <_realloc_r+0xae>
   86cf2:	4297      	cmp	r7, r2
   86cf4:	da43      	bge.n	86d7e <_realloc_r+0xbe>
   86cf6:	4bc6      	ldr	r3, [pc, #792]	; (87010 <_realloc_r+0x350>)
   86cf8:	eb09 0007 	add.w	r0, r9, r7
   86cfc:	6899      	ldr	r1, [r3, #8]
   86cfe:	4288      	cmp	r0, r1
   86d00:	f000 80c3 	beq.w	86e8a <_realloc_r+0x1ca>
   86d04:	6843      	ldr	r3, [r0, #4]
   86d06:	f023 0101 	bic.w	r1, r3, #1
   86d0a:	4401      	add	r1, r0
   86d0c:	6849      	ldr	r1, [r1, #4]
   86d0e:	07c9      	lsls	r1, r1, #31
   86d10:	d54d      	bpl.n	86dae <_realloc_r+0xee>
   86d12:	f01e 0f01 	tst.w	lr, #1
   86d16:	f000 809b 	beq.w	86e50 <_realloc_r+0x190>
   86d1a:	4629      	mov	r1, r5
   86d1c:	4640      	mov	r0, r8
   86d1e:	f7fe ff0d 	bl	85b3c <_malloc_r>
   86d22:	4605      	mov	r5, r0
   86d24:	2800      	cmp	r0, #0
   86d26:	d03b      	beq.n	86da0 <_realloc_r+0xe0>
   86d28:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86d2c:	f1a0 0208 	sub.w	r2, r0, #8
   86d30:	f023 0301 	bic.w	r3, r3, #1
   86d34:	444b      	add	r3, r9
   86d36:	429a      	cmp	r2, r3
   86d38:	f000 812b 	beq.w	86f92 <_realloc_r+0x2d2>
   86d3c:	1f3a      	subs	r2, r7, #4
   86d3e:	2a24      	cmp	r2, #36	; 0x24
   86d40:	f200 8118 	bhi.w	86f74 <_realloc_r+0x2b4>
   86d44:	2a13      	cmp	r2, #19
   86d46:	f200 80eb 	bhi.w	86f20 <_realloc_r+0x260>
   86d4a:	4603      	mov	r3, r0
   86d4c:	4622      	mov	r2, r4
   86d4e:	6811      	ldr	r1, [r2, #0]
   86d50:	6019      	str	r1, [r3, #0]
   86d52:	6851      	ldr	r1, [r2, #4]
   86d54:	6059      	str	r1, [r3, #4]
   86d56:	6892      	ldr	r2, [r2, #8]
   86d58:	609a      	str	r2, [r3, #8]
   86d5a:	4621      	mov	r1, r4
   86d5c:	4640      	mov	r0, r8
   86d5e:	f7ff fe4f 	bl	86a00 <_free_r>
   86d62:	e01d      	b.n	86da0 <_realloc_r+0xe0>
   86d64:	f026 0607 	bic.w	r6, r6, #7
   86d68:	2e00      	cmp	r6, #0
   86d6a:	4632      	mov	r2, r6
   86d6c:	dabf      	bge.n	86cee <_realloc_r+0x2e>
   86d6e:	2500      	movs	r5, #0
   86d70:	230c      	movs	r3, #12
   86d72:	4628      	mov	r0, r5
   86d74:	f8c8 3000 	str.w	r3, [r8]
   86d78:	b003      	add	sp, #12
   86d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d7e:	4625      	mov	r5, r4
   86d80:	1bbb      	subs	r3, r7, r6
   86d82:	2b0f      	cmp	r3, #15
   86d84:	f8d9 2004 	ldr.w	r2, [r9, #4]
   86d88:	d81d      	bhi.n	86dc6 <_realloc_r+0x106>
   86d8a:	f002 0201 	and.w	r2, r2, #1
   86d8e:	433a      	orrs	r2, r7
   86d90:	eb09 0107 	add.w	r1, r9, r7
   86d94:	f8c9 2004 	str.w	r2, [r9, #4]
   86d98:	684b      	ldr	r3, [r1, #4]
   86d9a:	f043 0301 	orr.w	r3, r3, #1
   86d9e:	604b      	str	r3, [r1, #4]
   86da0:	4640      	mov	r0, r8
   86da2:	f7ff f9b9 	bl	86118 <__malloc_unlock>
   86da6:	4628      	mov	r0, r5
   86da8:	b003      	add	sp, #12
   86daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86dae:	f023 0303 	bic.w	r3, r3, #3
   86db2:	18f9      	adds	r1, r7, r3
   86db4:	4291      	cmp	r1, r2
   86db6:	db1d      	blt.n	86df4 <_realloc_r+0x134>
   86db8:	68c3      	ldr	r3, [r0, #12]
   86dba:	6882      	ldr	r2, [r0, #8]
   86dbc:	4625      	mov	r5, r4
   86dbe:	60d3      	str	r3, [r2, #12]
   86dc0:	460f      	mov	r7, r1
   86dc2:	609a      	str	r2, [r3, #8]
   86dc4:	e7dc      	b.n	86d80 <_realloc_r+0xc0>
   86dc6:	f002 0201 	and.w	r2, r2, #1
   86dca:	eb09 0106 	add.w	r1, r9, r6
   86dce:	f043 0301 	orr.w	r3, r3, #1
   86dd2:	4332      	orrs	r2, r6
   86dd4:	f8c9 2004 	str.w	r2, [r9, #4]
   86dd8:	444f      	add	r7, r9
   86dda:	604b      	str	r3, [r1, #4]
   86ddc:	687b      	ldr	r3, [r7, #4]
   86dde:	3108      	adds	r1, #8
   86de0:	f043 0301 	orr.w	r3, r3, #1
   86de4:	607b      	str	r3, [r7, #4]
   86de6:	4640      	mov	r0, r8
   86de8:	f7ff fe0a 	bl	86a00 <_free_r>
   86dec:	e7d8      	b.n	86da0 <_realloc_r+0xe0>
   86dee:	4611      	mov	r1, r2
   86df0:	f7fe bea4 	b.w	85b3c <_malloc_r>
   86df4:	f01e 0f01 	tst.w	lr, #1
   86df8:	d18f      	bne.n	86d1a <_realloc_r+0x5a>
   86dfa:	f854 1c08 	ldr.w	r1, [r4, #-8]
   86dfe:	eba9 0a01 	sub.w	sl, r9, r1
   86e02:	f8da 1004 	ldr.w	r1, [sl, #4]
   86e06:	f021 0103 	bic.w	r1, r1, #3
   86e0a:	440b      	add	r3, r1
   86e0c:	443b      	add	r3, r7
   86e0e:	4293      	cmp	r3, r2
   86e10:	db26      	blt.n	86e60 <_realloc_r+0x1a0>
   86e12:	4655      	mov	r5, sl
   86e14:	68c1      	ldr	r1, [r0, #12]
   86e16:	6880      	ldr	r0, [r0, #8]
   86e18:	1f3a      	subs	r2, r7, #4
   86e1a:	60c1      	str	r1, [r0, #12]
   86e1c:	6088      	str	r0, [r1, #8]
   86e1e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   86e22:	f8da 100c 	ldr.w	r1, [sl, #12]
   86e26:	2a24      	cmp	r2, #36	; 0x24
   86e28:	60c1      	str	r1, [r0, #12]
   86e2a:	6088      	str	r0, [r1, #8]
   86e2c:	d826      	bhi.n	86e7c <_realloc_r+0x1bc>
   86e2e:	2a13      	cmp	r2, #19
   86e30:	f240 8081 	bls.w	86f36 <_realloc_r+0x276>
   86e34:	6821      	ldr	r1, [r4, #0]
   86e36:	2a1b      	cmp	r2, #27
   86e38:	f8ca 1008 	str.w	r1, [sl, #8]
   86e3c:	6861      	ldr	r1, [r4, #4]
   86e3e:	f8ca 100c 	str.w	r1, [sl, #12]
   86e42:	f200 80ad 	bhi.w	86fa0 <_realloc_r+0x2e0>
   86e46:	f104 0008 	add.w	r0, r4, #8
   86e4a:	f10a 0210 	add.w	r2, sl, #16
   86e4e:	e074      	b.n	86f3a <_realloc_r+0x27a>
   86e50:	f854 3c08 	ldr.w	r3, [r4, #-8]
   86e54:	eba9 0a03 	sub.w	sl, r9, r3
   86e58:	f8da 1004 	ldr.w	r1, [sl, #4]
   86e5c:	f021 0103 	bic.w	r1, r1, #3
   86e60:	187b      	adds	r3, r7, r1
   86e62:	4293      	cmp	r3, r2
   86e64:	f6ff af59 	blt.w	86d1a <_realloc_r+0x5a>
   86e68:	4655      	mov	r5, sl
   86e6a:	f8da 100c 	ldr.w	r1, [sl, #12]
   86e6e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   86e72:	1f3a      	subs	r2, r7, #4
   86e74:	2a24      	cmp	r2, #36	; 0x24
   86e76:	60c1      	str	r1, [r0, #12]
   86e78:	6088      	str	r0, [r1, #8]
   86e7a:	d9d8      	bls.n	86e2e <_realloc_r+0x16e>
   86e7c:	4621      	mov	r1, r4
   86e7e:	4628      	mov	r0, r5
   86e80:	461f      	mov	r7, r3
   86e82:	46d1      	mov	r9, sl
   86e84:	f7ff feb8 	bl	86bf8 <memmove>
   86e88:	e77a      	b.n	86d80 <_realloc_r+0xc0>
   86e8a:	6841      	ldr	r1, [r0, #4]
   86e8c:	f106 0010 	add.w	r0, r6, #16
   86e90:	f021 0b03 	bic.w	fp, r1, #3
   86e94:	44bb      	add	fp, r7
   86e96:	4583      	cmp	fp, r0
   86e98:	da58      	bge.n	86f4c <_realloc_r+0x28c>
   86e9a:	f01e 0f01 	tst.w	lr, #1
   86e9e:	f47f af3c 	bne.w	86d1a <_realloc_r+0x5a>
   86ea2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   86ea6:	eba9 0a01 	sub.w	sl, r9, r1
   86eaa:	f8da 1004 	ldr.w	r1, [sl, #4]
   86eae:	f021 0103 	bic.w	r1, r1, #3
   86eb2:	448b      	add	fp, r1
   86eb4:	4558      	cmp	r0, fp
   86eb6:	dcd3      	bgt.n	86e60 <_realloc_r+0x1a0>
   86eb8:	4655      	mov	r5, sl
   86eba:	f8da 100c 	ldr.w	r1, [sl, #12]
   86ebe:	f855 0f08 	ldr.w	r0, [r5, #8]!
   86ec2:	1f3a      	subs	r2, r7, #4
   86ec4:	2a24      	cmp	r2, #36	; 0x24
   86ec6:	60c1      	str	r1, [r0, #12]
   86ec8:	6088      	str	r0, [r1, #8]
   86eca:	f200 808d 	bhi.w	86fe8 <_realloc_r+0x328>
   86ece:	2a13      	cmp	r2, #19
   86ed0:	f240 8087 	bls.w	86fe2 <_realloc_r+0x322>
   86ed4:	6821      	ldr	r1, [r4, #0]
   86ed6:	2a1b      	cmp	r2, #27
   86ed8:	f8ca 1008 	str.w	r1, [sl, #8]
   86edc:	6861      	ldr	r1, [r4, #4]
   86ede:	f8ca 100c 	str.w	r1, [sl, #12]
   86ee2:	f200 8088 	bhi.w	86ff6 <_realloc_r+0x336>
   86ee6:	f104 0108 	add.w	r1, r4, #8
   86eea:	f10a 0210 	add.w	r2, sl, #16
   86eee:	6808      	ldr	r0, [r1, #0]
   86ef0:	6010      	str	r0, [r2, #0]
   86ef2:	6848      	ldr	r0, [r1, #4]
   86ef4:	6050      	str	r0, [r2, #4]
   86ef6:	6889      	ldr	r1, [r1, #8]
   86ef8:	6091      	str	r1, [r2, #8]
   86efa:	ebab 0206 	sub.w	r2, fp, r6
   86efe:	eb0a 0106 	add.w	r1, sl, r6
   86f02:	f042 0201 	orr.w	r2, r2, #1
   86f06:	6099      	str	r1, [r3, #8]
   86f08:	604a      	str	r2, [r1, #4]
   86f0a:	f8da 3004 	ldr.w	r3, [sl, #4]
   86f0e:	4640      	mov	r0, r8
   86f10:	f003 0301 	and.w	r3, r3, #1
   86f14:	431e      	orrs	r6, r3
   86f16:	f8ca 6004 	str.w	r6, [sl, #4]
   86f1a:	f7ff f8fd 	bl	86118 <__malloc_unlock>
   86f1e:	e742      	b.n	86da6 <_realloc_r+0xe6>
   86f20:	6823      	ldr	r3, [r4, #0]
   86f22:	2a1b      	cmp	r2, #27
   86f24:	6003      	str	r3, [r0, #0]
   86f26:	6863      	ldr	r3, [r4, #4]
   86f28:	6043      	str	r3, [r0, #4]
   86f2a:	d827      	bhi.n	86f7c <_realloc_r+0x2bc>
   86f2c:	f100 0308 	add.w	r3, r0, #8
   86f30:	f104 0208 	add.w	r2, r4, #8
   86f34:	e70b      	b.n	86d4e <_realloc_r+0x8e>
   86f36:	4620      	mov	r0, r4
   86f38:	462a      	mov	r2, r5
   86f3a:	6801      	ldr	r1, [r0, #0]
   86f3c:	461f      	mov	r7, r3
   86f3e:	6011      	str	r1, [r2, #0]
   86f40:	6841      	ldr	r1, [r0, #4]
   86f42:	46d1      	mov	r9, sl
   86f44:	6051      	str	r1, [r2, #4]
   86f46:	6883      	ldr	r3, [r0, #8]
   86f48:	6093      	str	r3, [r2, #8]
   86f4a:	e719      	b.n	86d80 <_realloc_r+0xc0>
   86f4c:	ebab 0b06 	sub.w	fp, fp, r6
   86f50:	eb09 0106 	add.w	r1, r9, r6
   86f54:	f04b 0201 	orr.w	r2, fp, #1
   86f58:	6099      	str	r1, [r3, #8]
   86f5a:	604a      	str	r2, [r1, #4]
   86f5c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86f60:	4640      	mov	r0, r8
   86f62:	f003 0301 	and.w	r3, r3, #1
   86f66:	431e      	orrs	r6, r3
   86f68:	f844 6c04 	str.w	r6, [r4, #-4]
   86f6c:	f7ff f8d4 	bl	86118 <__malloc_unlock>
   86f70:	4625      	mov	r5, r4
   86f72:	e718      	b.n	86da6 <_realloc_r+0xe6>
   86f74:	4621      	mov	r1, r4
   86f76:	f7ff fe3f 	bl	86bf8 <memmove>
   86f7a:	e6ee      	b.n	86d5a <_realloc_r+0x9a>
   86f7c:	68a3      	ldr	r3, [r4, #8]
   86f7e:	2a24      	cmp	r2, #36	; 0x24
   86f80:	6083      	str	r3, [r0, #8]
   86f82:	68e3      	ldr	r3, [r4, #12]
   86f84:	60c3      	str	r3, [r0, #12]
   86f86:	d018      	beq.n	86fba <_realloc_r+0x2fa>
   86f88:	f100 0310 	add.w	r3, r0, #16
   86f8c:	f104 0210 	add.w	r2, r4, #16
   86f90:	e6dd      	b.n	86d4e <_realloc_r+0x8e>
   86f92:	f850 3c04 	ldr.w	r3, [r0, #-4]
   86f96:	4625      	mov	r5, r4
   86f98:	f023 0303 	bic.w	r3, r3, #3
   86f9c:	441f      	add	r7, r3
   86f9e:	e6ef      	b.n	86d80 <_realloc_r+0xc0>
   86fa0:	68a1      	ldr	r1, [r4, #8]
   86fa2:	2a24      	cmp	r2, #36	; 0x24
   86fa4:	f8ca 1010 	str.w	r1, [sl, #16]
   86fa8:	68e1      	ldr	r1, [r4, #12]
   86faa:	f8ca 1014 	str.w	r1, [sl, #20]
   86fae:	d00d      	beq.n	86fcc <_realloc_r+0x30c>
   86fb0:	f104 0010 	add.w	r0, r4, #16
   86fb4:	f10a 0218 	add.w	r2, sl, #24
   86fb8:	e7bf      	b.n	86f3a <_realloc_r+0x27a>
   86fba:	6922      	ldr	r2, [r4, #16]
   86fbc:	f100 0318 	add.w	r3, r0, #24
   86fc0:	6102      	str	r2, [r0, #16]
   86fc2:	6961      	ldr	r1, [r4, #20]
   86fc4:	f104 0218 	add.w	r2, r4, #24
   86fc8:	6141      	str	r1, [r0, #20]
   86fca:	e6c0      	b.n	86d4e <_realloc_r+0x8e>
   86fcc:	6922      	ldr	r2, [r4, #16]
   86fce:	f104 0018 	add.w	r0, r4, #24
   86fd2:	f8ca 2018 	str.w	r2, [sl, #24]
   86fd6:	6961      	ldr	r1, [r4, #20]
   86fd8:	f10a 0220 	add.w	r2, sl, #32
   86fdc:	f8ca 101c 	str.w	r1, [sl, #28]
   86fe0:	e7ab      	b.n	86f3a <_realloc_r+0x27a>
   86fe2:	4621      	mov	r1, r4
   86fe4:	462a      	mov	r2, r5
   86fe6:	e782      	b.n	86eee <_realloc_r+0x22e>
   86fe8:	4621      	mov	r1, r4
   86fea:	4628      	mov	r0, r5
   86fec:	9301      	str	r3, [sp, #4]
   86fee:	f7ff fe03 	bl	86bf8 <memmove>
   86ff2:	9b01      	ldr	r3, [sp, #4]
   86ff4:	e781      	b.n	86efa <_realloc_r+0x23a>
   86ff6:	68a1      	ldr	r1, [r4, #8]
   86ff8:	2a24      	cmp	r2, #36	; 0x24
   86ffa:	f8ca 1010 	str.w	r1, [sl, #16]
   86ffe:	68e1      	ldr	r1, [r4, #12]
   87000:	f8ca 1014 	str.w	r1, [sl, #20]
   87004:	d006      	beq.n	87014 <_realloc_r+0x354>
   87006:	f104 0110 	add.w	r1, r4, #16
   8700a:	f10a 0218 	add.w	r2, sl, #24
   8700e:	e76e      	b.n	86eee <_realloc_r+0x22e>
   87010:	200705d4 	.word	0x200705d4
   87014:	6922      	ldr	r2, [r4, #16]
   87016:	f104 0118 	add.w	r1, r4, #24
   8701a:	f8ca 2018 	str.w	r2, [sl, #24]
   8701e:	6960      	ldr	r0, [r4, #20]
   87020:	f10a 0220 	add.w	r2, sl, #32
   87024:	f8ca 001c 	str.w	r0, [sl, #28]
   87028:	e761      	b.n	86eee <_realloc_r+0x22e>
   8702a:	bf00      	nop

0008702c <__ascii_wctomb>:
   8702c:	b119      	cbz	r1, 87036 <__ascii_wctomb+0xa>
   8702e:	2aff      	cmp	r2, #255	; 0xff
   87030:	d803      	bhi.n	8703a <__ascii_wctomb+0xe>
   87032:	700a      	strb	r2, [r1, #0]
   87034:	2101      	movs	r1, #1
   87036:	4608      	mov	r0, r1
   87038:	4770      	bx	lr
   8703a:	238a      	movs	r3, #138	; 0x8a
   8703c:	f04f 31ff 	mov.w	r1, #4294967295
   87040:	6003      	str	r3, [r0, #0]
   87042:	e7f8      	b.n	87036 <__ascii_wctomb+0xa>

00087044 <__aeabi_drsub>:
   87044:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   87048:	e002      	b.n	87050 <__adddf3>
   8704a:	bf00      	nop

0008704c <__aeabi_dsub>:
   8704c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00087050 <__adddf3>:
   87050:	b530      	push	{r4, r5, lr}
   87052:	ea4f 0441 	mov.w	r4, r1, lsl #1
   87056:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8705a:	ea94 0f05 	teq	r4, r5
   8705e:	bf08      	it	eq
   87060:	ea90 0f02 	teqeq	r0, r2
   87064:	bf1f      	itttt	ne
   87066:	ea54 0c00 	orrsne.w	ip, r4, r0
   8706a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8706e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   87072:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87076:	f000 80e2 	beq.w	8723e <__adddf3+0x1ee>
   8707a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8707e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   87082:	bfb8      	it	lt
   87084:	426d      	neglt	r5, r5
   87086:	dd0c      	ble.n	870a2 <__adddf3+0x52>
   87088:	442c      	add	r4, r5
   8708a:	ea80 0202 	eor.w	r2, r0, r2
   8708e:	ea81 0303 	eor.w	r3, r1, r3
   87092:	ea82 0000 	eor.w	r0, r2, r0
   87096:	ea83 0101 	eor.w	r1, r3, r1
   8709a:	ea80 0202 	eor.w	r2, r0, r2
   8709e:	ea81 0303 	eor.w	r3, r1, r3
   870a2:	2d36      	cmp	r5, #54	; 0x36
   870a4:	bf88      	it	hi
   870a6:	bd30      	pophi	{r4, r5, pc}
   870a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   870ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   870b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   870b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   870b8:	d002      	beq.n	870c0 <__adddf3+0x70>
   870ba:	4240      	negs	r0, r0
   870bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   870c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   870c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   870c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   870cc:	d002      	beq.n	870d4 <__adddf3+0x84>
   870ce:	4252      	negs	r2, r2
   870d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   870d4:	ea94 0f05 	teq	r4, r5
   870d8:	f000 80a7 	beq.w	8722a <__adddf3+0x1da>
   870dc:	f1a4 0401 	sub.w	r4, r4, #1
   870e0:	f1d5 0e20 	rsbs	lr, r5, #32
   870e4:	db0d      	blt.n	87102 <__adddf3+0xb2>
   870e6:	fa02 fc0e 	lsl.w	ip, r2, lr
   870ea:	fa22 f205 	lsr.w	r2, r2, r5
   870ee:	1880      	adds	r0, r0, r2
   870f0:	f141 0100 	adc.w	r1, r1, #0
   870f4:	fa03 f20e 	lsl.w	r2, r3, lr
   870f8:	1880      	adds	r0, r0, r2
   870fa:	fa43 f305 	asr.w	r3, r3, r5
   870fe:	4159      	adcs	r1, r3
   87100:	e00e      	b.n	87120 <__adddf3+0xd0>
   87102:	f1a5 0520 	sub.w	r5, r5, #32
   87106:	f10e 0e20 	add.w	lr, lr, #32
   8710a:	2a01      	cmp	r2, #1
   8710c:	fa03 fc0e 	lsl.w	ip, r3, lr
   87110:	bf28      	it	cs
   87112:	f04c 0c02 	orrcs.w	ip, ip, #2
   87116:	fa43 f305 	asr.w	r3, r3, r5
   8711a:	18c0      	adds	r0, r0, r3
   8711c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   87120:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87124:	d507      	bpl.n	87136 <__adddf3+0xe6>
   87126:	f04f 0e00 	mov.w	lr, #0
   8712a:	f1dc 0c00 	rsbs	ip, ip, #0
   8712e:	eb7e 0000 	sbcs.w	r0, lr, r0
   87132:	eb6e 0101 	sbc.w	r1, lr, r1
   87136:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8713a:	d31b      	bcc.n	87174 <__adddf3+0x124>
   8713c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   87140:	d30c      	bcc.n	8715c <__adddf3+0x10c>
   87142:	0849      	lsrs	r1, r1, #1
   87144:	ea5f 0030 	movs.w	r0, r0, rrx
   87148:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8714c:	f104 0401 	add.w	r4, r4, #1
   87150:	ea4f 5244 	mov.w	r2, r4, lsl #21
   87154:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   87158:	f080 809a 	bcs.w	87290 <__adddf3+0x240>
   8715c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   87160:	bf08      	it	eq
   87162:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   87166:	f150 0000 	adcs.w	r0, r0, #0
   8716a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8716e:	ea41 0105 	orr.w	r1, r1, r5
   87172:	bd30      	pop	{r4, r5, pc}
   87174:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   87178:	4140      	adcs	r0, r0
   8717a:	eb41 0101 	adc.w	r1, r1, r1
   8717e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87182:	f1a4 0401 	sub.w	r4, r4, #1
   87186:	d1e9      	bne.n	8715c <__adddf3+0x10c>
   87188:	f091 0f00 	teq	r1, #0
   8718c:	bf04      	itt	eq
   8718e:	4601      	moveq	r1, r0
   87190:	2000      	moveq	r0, #0
   87192:	fab1 f381 	clz	r3, r1
   87196:	bf08      	it	eq
   87198:	3320      	addeq	r3, #32
   8719a:	f1a3 030b 	sub.w	r3, r3, #11
   8719e:	f1b3 0220 	subs.w	r2, r3, #32
   871a2:	da0c      	bge.n	871be <__adddf3+0x16e>
   871a4:	320c      	adds	r2, #12
   871a6:	dd08      	ble.n	871ba <__adddf3+0x16a>
   871a8:	f102 0c14 	add.w	ip, r2, #20
   871ac:	f1c2 020c 	rsb	r2, r2, #12
   871b0:	fa01 f00c 	lsl.w	r0, r1, ip
   871b4:	fa21 f102 	lsr.w	r1, r1, r2
   871b8:	e00c      	b.n	871d4 <__adddf3+0x184>
   871ba:	f102 0214 	add.w	r2, r2, #20
   871be:	bfd8      	it	le
   871c0:	f1c2 0c20 	rsble	ip, r2, #32
   871c4:	fa01 f102 	lsl.w	r1, r1, r2
   871c8:	fa20 fc0c 	lsr.w	ip, r0, ip
   871cc:	bfdc      	itt	le
   871ce:	ea41 010c 	orrle.w	r1, r1, ip
   871d2:	4090      	lslle	r0, r2
   871d4:	1ae4      	subs	r4, r4, r3
   871d6:	bfa2      	ittt	ge
   871d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   871dc:	4329      	orrge	r1, r5
   871de:	bd30      	popge	{r4, r5, pc}
   871e0:	ea6f 0404 	mvn.w	r4, r4
   871e4:	3c1f      	subs	r4, #31
   871e6:	da1c      	bge.n	87222 <__adddf3+0x1d2>
   871e8:	340c      	adds	r4, #12
   871ea:	dc0e      	bgt.n	8720a <__adddf3+0x1ba>
   871ec:	f104 0414 	add.w	r4, r4, #20
   871f0:	f1c4 0220 	rsb	r2, r4, #32
   871f4:	fa20 f004 	lsr.w	r0, r0, r4
   871f8:	fa01 f302 	lsl.w	r3, r1, r2
   871fc:	ea40 0003 	orr.w	r0, r0, r3
   87200:	fa21 f304 	lsr.w	r3, r1, r4
   87204:	ea45 0103 	orr.w	r1, r5, r3
   87208:	bd30      	pop	{r4, r5, pc}
   8720a:	f1c4 040c 	rsb	r4, r4, #12
   8720e:	f1c4 0220 	rsb	r2, r4, #32
   87212:	fa20 f002 	lsr.w	r0, r0, r2
   87216:	fa01 f304 	lsl.w	r3, r1, r4
   8721a:	ea40 0003 	orr.w	r0, r0, r3
   8721e:	4629      	mov	r1, r5
   87220:	bd30      	pop	{r4, r5, pc}
   87222:	fa21 f004 	lsr.w	r0, r1, r4
   87226:	4629      	mov	r1, r5
   87228:	bd30      	pop	{r4, r5, pc}
   8722a:	f094 0f00 	teq	r4, #0
   8722e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   87232:	bf06      	itte	eq
   87234:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   87238:	3401      	addeq	r4, #1
   8723a:	3d01      	subne	r5, #1
   8723c:	e74e      	b.n	870dc <__adddf3+0x8c>
   8723e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87242:	bf18      	it	ne
   87244:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87248:	d029      	beq.n	8729e <__adddf3+0x24e>
   8724a:	ea94 0f05 	teq	r4, r5
   8724e:	bf08      	it	eq
   87250:	ea90 0f02 	teqeq	r0, r2
   87254:	d005      	beq.n	87262 <__adddf3+0x212>
   87256:	ea54 0c00 	orrs.w	ip, r4, r0
   8725a:	bf04      	itt	eq
   8725c:	4619      	moveq	r1, r3
   8725e:	4610      	moveq	r0, r2
   87260:	bd30      	pop	{r4, r5, pc}
   87262:	ea91 0f03 	teq	r1, r3
   87266:	bf1e      	ittt	ne
   87268:	2100      	movne	r1, #0
   8726a:	2000      	movne	r0, #0
   8726c:	bd30      	popne	{r4, r5, pc}
   8726e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   87272:	d105      	bne.n	87280 <__adddf3+0x230>
   87274:	0040      	lsls	r0, r0, #1
   87276:	4149      	adcs	r1, r1
   87278:	bf28      	it	cs
   8727a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8727e:	bd30      	pop	{r4, r5, pc}
   87280:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   87284:	bf3c      	itt	cc
   87286:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8728a:	bd30      	popcc	{r4, r5, pc}
   8728c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87290:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   87294:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87298:	f04f 0000 	mov.w	r0, #0
   8729c:	bd30      	pop	{r4, r5, pc}
   8729e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   872a2:	bf1a      	itte	ne
   872a4:	4619      	movne	r1, r3
   872a6:	4610      	movne	r0, r2
   872a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   872ac:	bf1c      	itt	ne
   872ae:	460b      	movne	r3, r1
   872b0:	4602      	movne	r2, r0
   872b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   872b6:	bf06      	itte	eq
   872b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   872bc:	ea91 0f03 	teqeq	r1, r3
   872c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   872c4:	bd30      	pop	{r4, r5, pc}
   872c6:	bf00      	nop

000872c8 <__aeabi_ui2d>:
   872c8:	f090 0f00 	teq	r0, #0
   872cc:	bf04      	itt	eq
   872ce:	2100      	moveq	r1, #0
   872d0:	4770      	bxeq	lr
   872d2:	b530      	push	{r4, r5, lr}
   872d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   872d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   872dc:	f04f 0500 	mov.w	r5, #0
   872e0:	f04f 0100 	mov.w	r1, #0
   872e4:	e750      	b.n	87188 <__adddf3+0x138>
   872e6:	bf00      	nop

000872e8 <__aeabi_i2d>:
   872e8:	f090 0f00 	teq	r0, #0
   872ec:	bf04      	itt	eq
   872ee:	2100      	moveq	r1, #0
   872f0:	4770      	bxeq	lr
   872f2:	b530      	push	{r4, r5, lr}
   872f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   872f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   872fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   87300:	bf48      	it	mi
   87302:	4240      	negmi	r0, r0
   87304:	f04f 0100 	mov.w	r1, #0
   87308:	e73e      	b.n	87188 <__adddf3+0x138>
   8730a:	bf00      	nop

0008730c <__aeabi_f2d>:
   8730c:	0042      	lsls	r2, r0, #1
   8730e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   87312:	ea4f 0131 	mov.w	r1, r1, rrx
   87316:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8731a:	bf1f      	itttt	ne
   8731c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   87320:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87324:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   87328:	4770      	bxne	lr
   8732a:	f092 0f00 	teq	r2, #0
   8732e:	bf14      	ite	ne
   87330:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87334:	4770      	bxeq	lr
   87336:	b530      	push	{r4, r5, lr}
   87338:	f44f 7460 	mov.w	r4, #896	; 0x380
   8733c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87344:	e720      	b.n	87188 <__adddf3+0x138>
   87346:	bf00      	nop

00087348 <__aeabi_ul2d>:
   87348:	ea50 0201 	orrs.w	r2, r0, r1
   8734c:	bf08      	it	eq
   8734e:	4770      	bxeq	lr
   87350:	b530      	push	{r4, r5, lr}
   87352:	f04f 0500 	mov.w	r5, #0
   87356:	e00a      	b.n	8736e <__aeabi_l2d+0x16>

00087358 <__aeabi_l2d>:
   87358:	ea50 0201 	orrs.w	r2, r0, r1
   8735c:	bf08      	it	eq
   8735e:	4770      	bxeq	lr
   87360:	b530      	push	{r4, r5, lr}
   87362:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   87366:	d502      	bpl.n	8736e <__aeabi_l2d+0x16>
   87368:	4240      	negs	r0, r0
   8736a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8736e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87372:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87376:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8737a:	f43f aedc 	beq.w	87136 <__adddf3+0xe6>
   8737e:	f04f 0203 	mov.w	r2, #3
   87382:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87386:	bf18      	it	ne
   87388:	3203      	addne	r2, #3
   8738a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8738e:	bf18      	it	ne
   87390:	3203      	addne	r2, #3
   87392:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   87396:	f1c2 0320 	rsb	r3, r2, #32
   8739a:	fa00 fc03 	lsl.w	ip, r0, r3
   8739e:	fa20 f002 	lsr.w	r0, r0, r2
   873a2:	fa01 fe03 	lsl.w	lr, r1, r3
   873a6:	ea40 000e 	orr.w	r0, r0, lr
   873aa:	fa21 f102 	lsr.w	r1, r1, r2
   873ae:	4414      	add	r4, r2
   873b0:	e6c1      	b.n	87136 <__adddf3+0xe6>
   873b2:	bf00      	nop

000873b4 <__aeabi_dmul>:
   873b4:	b570      	push	{r4, r5, r6, lr}
   873b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   873ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   873be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   873c2:	bf1d      	ittte	ne
   873c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   873c8:	ea94 0f0c 	teqne	r4, ip
   873cc:	ea95 0f0c 	teqne	r5, ip
   873d0:	f000 f8de 	bleq	87590 <__aeabi_dmul+0x1dc>
   873d4:	442c      	add	r4, r5
   873d6:	ea81 0603 	eor.w	r6, r1, r3
   873da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   873de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   873e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   873e6:	bf18      	it	ne
   873e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   873ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   873f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   873f4:	d038      	beq.n	87468 <__aeabi_dmul+0xb4>
   873f6:	fba0 ce02 	umull	ip, lr, r0, r2
   873fa:	f04f 0500 	mov.w	r5, #0
   873fe:	fbe1 e502 	umlal	lr, r5, r1, r2
   87402:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   87406:	fbe0 e503 	umlal	lr, r5, r0, r3
   8740a:	f04f 0600 	mov.w	r6, #0
   8740e:	fbe1 5603 	umlal	r5, r6, r1, r3
   87412:	f09c 0f00 	teq	ip, #0
   87416:	bf18      	it	ne
   87418:	f04e 0e01 	orrne.w	lr, lr, #1
   8741c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   87420:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   87424:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   87428:	d204      	bcs.n	87434 <__aeabi_dmul+0x80>
   8742a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8742e:	416d      	adcs	r5, r5
   87430:	eb46 0606 	adc.w	r6, r6, r6
   87434:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   87438:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8743c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   87440:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   87444:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   87448:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8744c:	bf88      	it	hi
   8744e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87452:	d81e      	bhi.n	87492 <__aeabi_dmul+0xde>
   87454:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   87458:	bf08      	it	eq
   8745a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8745e:	f150 0000 	adcs.w	r0, r0, #0
   87462:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87466:	bd70      	pop	{r4, r5, r6, pc}
   87468:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8746c:	ea46 0101 	orr.w	r1, r6, r1
   87470:	ea40 0002 	orr.w	r0, r0, r2
   87474:	ea81 0103 	eor.w	r1, r1, r3
   87478:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8747c:	bfc2      	ittt	gt
   8747e:	ebd4 050c 	rsbsgt	r5, r4, ip
   87482:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87486:	bd70      	popgt	{r4, r5, r6, pc}
   87488:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8748c:	f04f 0e00 	mov.w	lr, #0
   87490:	3c01      	subs	r4, #1
   87492:	f300 80ab 	bgt.w	875ec <__aeabi_dmul+0x238>
   87496:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8749a:	bfde      	ittt	le
   8749c:	2000      	movle	r0, #0
   8749e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   874a2:	bd70      	pople	{r4, r5, r6, pc}
   874a4:	f1c4 0400 	rsb	r4, r4, #0
   874a8:	3c20      	subs	r4, #32
   874aa:	da35      	bge.n	87518 <__aeabi_dmul+0x164>
   874ac:	340c      	adds	r4, #12
   874ae:	dc1b      	bgt.n	874e8 <__aeabi_dmul+0x134>
   874b0:	f104 0414 	add.w	r4, r4, #20
   874b4:	f1c4 0520 	rsb	r5, r4, #32
   874b8:	fa00 f305 	lsl.w	r3, r0, r5
   874bc:	fa20 f004 	lsr.w	r0, r0, r4
   874c0:	fa01 f205 	lsl.w	r2, r1, r5
   874c4:	ea40 0002 	orr.w	r0, r0, r2
   874c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   874cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   874d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   874d4:	fa21 f604 	lsr.w	r6, r1, r4
   874d8:	eb42 0106 	adc.w	r1, r2, r6
   874dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   874e0:	bf08      	it	eq
   874e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   874e6:	bd70      	pop	{r4, r5, r6, pc}
   874e8:	f1c4 040c 	rsb	r4, r4, #12
   874ec:	f1c4 0520 	rsb	r5, r4, #32
   874f0:	fa00 f304 	lsl.w	r3, r0, r4
   874f4:	fa20 f005 	lsr.w	r0, r0, r5
   874f8:	fa01 f204 	lsl.w	r2, r1, r4
   874fc:	ea40 0002 	orr.w	r0, r0, r2
   87500:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87504:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   87508:	f141 0100 	adc.w	r1, r1, #0
   8750c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87510:	bf08      	it	eq
   87512:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87516:	bd70      	pop	{r4, r5, r6, pc}
   87518:	f1c4 0520 	rsb	r5, r4, #32
   8751c:	fa00 f205 	lsl.w	r2, r0, r5
   87520:	ea4e 0e02 	orr.w	lr, lr, r2
   87524:	fa20 f304 	lsr.w	r3, r0, r4
   87528:	fa01 f205 	lsl.w	r2, r1, r5
   8752c:	ea43 0302 	orr.w	r3, r3, r2
   87530:	fa21 f004 	lsr.w	r0, r1, r4
   87534:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87538:	fa21 f204 	lsr.w	r2, r1, r4
   8753c:	ea20 0002 	bic.w	r0, r0, r2
   87540:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   87544:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87548:	bf08      	it	eq
   8754a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8754e:	bd70      	pop	{r4, r5, r6, pc}
   87550:	f094 0f00 	teq	r4, #0
   87554:	d10f      	bne.n	87576 <__aeabi_dmul+0x1c2>
   87556:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8755a:	0040      	lsls	r0, r0, #1
   8755c:	eb41 0101 	adc.w	r1, r1, r1
   87560:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87564:	bf08      	it	eq
   87566:	3c01      	subeq	r4, #1
   87568:	d0f7      	beq.n	8755a <__aeabi_dmul+0x1a6>
   8756a:	ea41 0106 	orr.w	r1, r1, r6
   8756e:	f095 0f00 	teq	r5, #0
   87572:	bf18      	it	ne
   87574:	4770      	bxne	lr
   87576:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8757a:	0052      	lsls	r2, r2, #1
   8757c:	eb43 0303 	adc.w	r3, r3, r3
   87580:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   87584:	bf08      	it	eq
   87586:	3d01      	subeq	r5, #1
   87588:	d0f7      	beq.n	8757a <__aeabi_dmul+0x1c6>
   8758a:	ea43 0306 	orr.w	r3, r3, r6
   8758e:	4770      	bx	lr
   87590:	ea94 0f0c 	teq	r4, ip
   87594:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   87598:	bf18      	it	ne
   8759a:	ea95 0f0c 	teqne	r5, ip
   8759e:	d00c      	beq.n	875ba <__aeabi_dmul+0x206>
   875a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   875a4:	bf18      	it	ne
   875a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   875aa:	d1d1      	bne.n	87550 <__aeabi_dmul+0x19c>
   875ac:	ea81 0103 	eor.w	r1, r1, r3
   875b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   875b4:	f04f 0000 	mov.w	r0, #0
   875b8:	bd70      	pop	{r4, r5, r6, pc}
   875ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   875be:	bf06      	itte	eq
   875c0:	4610      	moveq	r0, r2
   875c2:	4619      	moveq	r1, r3
   875c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   875c8:	d019      	beq.n	875fe <__aeabi_dmul+0x24a>
   875ca:	ea94 0f0c 	teq	r4, ip
   875ce:	d102      	bne.n	875d6 <__aeabi_dmul+0x222>
   875d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   875d4:	d113      	bne.n	875fe <__aeabi_dmul+0x24a>
   875d6:	ea95 0f0c 	teq	r5, ip
   875da:	d105      	bne.n	875e8 <__aeabi_dmul+0x234>
   875dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   875e0:	bf1c      	itt	ne
   875e2:	4610      	movne	r0, r2
   875e4:	4619      	movne	r1, r3
   875e6:	d10a      	bne.n	875fe <__aeabi_dmul+0x24a>
   875e8:	ea81 0103 	eor.w	r1, r1, r3
   875ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   875f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   875f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   875f8:	f04f 0000 	mov.w	r0, #0
   875fc:	bd70      	pop	{r4, r5, r6, pc}
   875fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   87602:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   87606:	bd70      	pop	{r4, r5, r6, pc}

00087608 <__aeabi_ddiv>:
   87608:	b570      	push	{r4, r5, r6, lr}
   8760a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8760e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87616:	bf1d      	ittte	ne
   87618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8761c:	ea94 0f0c 	teqne	r4, ip
   87620:	ea95 0f0c 	teqne	r5, ip
   87624:	f000 f8a7 	bleq	87776 <__aeabi_ddiv+0x16e>
   87628:	eba4 0405 	sub.w	r4, r4, r5
   8762c:	ea81 0e03 	eor.w	lr, r1, r3
   87630:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   87634:	ea4f 3101 	mov.w	r1, r1, lsl #12
   87638:	f000 8088 	beq.w	8774c <__aeabi_ddiv+0x144>
   8763c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   87640:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   87644:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   87648:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8764c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   87650:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   87654:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   87658:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8765c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   87660:	429d      	cmp	r5, r3
   87662:	bf08      	it	eq
   87664:	4296      	cmpeq	r6, r2
   87666:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8766a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8766e:	d202      	bcs.n	87676 <__aeabi_ddiv+0x6e>
   87670:	085b      	lsrs	r3, r3, #1
   87672:	ea4f 0232 	mov.w	r2, r2, rrx
   87676:	1ab6      	subs	r6, r6, r2
   87678:	eb65 0503 	sbc.w	r5, r5, r3
   8767c:	085b      	lsrs	r3, r3, #1
   8767e:	ea4f 0232 	mov.w	r2, r2, rrx
   87682:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   87686:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8768a:	ebb6 0e02 	subs.w	lr, r6, r2
   8768e:	eb75 0e03 	sbcs.w	lr, r5, r3
   87692:	bf22      	ittt	cs
   87694:	1ab6      	subcs	r6, r6, r2
   87696:	4675      	movcs	r5, lr
   87698:	ea40 000c 	orrcs.w	r0, r0, ip
   8769c:	085b      	lsrs	r3, r3, #1
   8769e:	ea4f 0232 	mov.w	r2, r2, rrx
   876a2:	ebb6 0e02 	subs.w	lr, r6, r2
   876a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   876aa:	bf22      	ittt	cs
   876ac:	1ab6      	subcs	r6, r6, r2
   876ae:	4675      	movcs	r5, lr
   876b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   876b4:	085b      	lsrs	r3, r3, #1
   876b6:	ea4f 0232 	mov.w	r2, r2, rrx
   876ba:	ebb6 0e02 	subs.w	lr, r6, r2
   876be:	eb75 0e03 	sbcs.w	lr, r5, r3
   876c2:	bf22      	ittt	cs
   876c4:	1ab6      	subcs	r6, r6, r2
   876c6:	4675      	movcs	r5, lr
   876c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   876cc:	085b      	lsrs	r3, r3, #1
   876ce:	ea4f 0232 	mov.w	r2, r2, rrx
   876d2:	ebb6 0e02 	subs.w	lr, r6, r2
   876d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   876da:	bf22      	ittt	cs
   876dc:	1ab6      	subcs	r6, r6, r2
   876de:	4675      	movcs	r5, lr
   876e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   876e4:	ea55 0e06 	orrs.w	lr, r5, r6
   876e8:	d018      	beq.n	8771c <__aeabi_ddiv+0x114>
   876ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   876ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   876f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   876f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   876fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   876fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   87702:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   87706:	d1c0      	bne.n	8768a <__aeabi_ddiv+0x82>
   87708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8770c:	d10b      	bne.n	87726 <__aeabi_ddiv+0x11e>
   8770e:	ea41 0100 	orr.w	r1, r1, r0
   87712:	f04f 0000 	mov.w	r0, #0
   87716:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8771a:	e7b6      	b.n	8768a <__aeabi_ddiv+0x82>
   8771c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87720:	bf04      	itt	eq
   87722:	4301      	orreq	r1, r0
   87724:	2000      	moveq	r0, #0
   87726:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8772a:	bf88      	it	hi
   8772c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87730:	f63f aeaf 	bhi.w	87492 <__aeabi_dmul+0xde>
   87734:	ebb5 0c03 	subs.w	ip, r5, r3
   87738:	bf04      	itt	eq
   8773a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8773e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   87742:	f150 0000 	adcs.w	r0, r0, #0
   87746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8774a:	bd70      	pop	{r4, r5, r6, pc}
   8774c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   87750:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   87754:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   87758:	bfc2      	ittt	gt
   8775a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8775e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87762:	bd70      	popgt	{r4, r5, r6, pc}
   87764:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87768:	f04f 0e00 	mov.w	lr, #0
   8776c:	3c01      	subs	r4, #1
   8776e:	e690      	b.n	87492 <__aeabi_dmul+0xde>
   87770:	ea45 0e06 	orr.w	lr, r5, r6
   87774:	e68d      	b.n	87492 <__aeabi_dmul+0xde>
   87776:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8777a:	ea94 0f0c 	teq	r4, ip
   8777e:	bf08      	it	eq
   87780:	ea95 0f0c 	teqeq	r5, ip
   87784:	f43f af3b 	beq.w	875fe <__aeabi_dmul+0x24a>
   87788:	ea94 0f0c 	teq	r4, ip
   8778c:	d10a      	bne.n	877a4 <__aeabi_ddiv+0x19c>
   8778e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   87792:	f47f af34 	bne.w	875fe <__aeabi_dmul+0x24a>
   87796:	ea95 0f0c 	teq	r5, ip
   8779a:	f47f af25 	bne.w	875e8 <__aeabi_dmul+0x234>
   8779e:	4610      	mov	r0, r2
   877a0:	4619      	mov	r1, r3
   877a2:	e72c      	b.n	875fe <__aeabi_dmul+0x24a>
   877a4:	ea95 0f0c 	teq	r5, ip
   877a8:	d106      	bne.n	877b8 <__aeabi_ddiv+0x1b0>
   877aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   877ae:	f43f aefd 	beq.w	875ac <__aeabi_dmul+0x1f8>
   877b2:	4610      	mov	r0, r2
   877b4:	4619      	mov	r1, r3
   877b6:	e722      	b.n	875fe <__aeabi_dmul+0x24a>
   877b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   877bc:	bf18      	it	ne
   877be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   877c2:	f47f aec5 	bne.w	87550 <__aeabi_dmul+0x19c>
   877c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   877ca:	f47f af0d 	bne.w	875e8 <__aeabi_dmul+0x234>
   877ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   877d2:	f47f aeeb 	bne.w	875ac <__aeabi_dmul+0x1f8>
   877d6:	e712      	b.n	875fe <__aeabi_dmul+0x24a>

000877d8 <__gedf2>:
   877d8:	f04f 3cff 	mov.w	ip, #4294967295
   877dc:	e006      	b.n	877ec <__cmpdf2+0x4>
   877de:	bf00      	nop

000877e0 <__ledf2>:
   877e0:	f04f 0c01 	mov.w	ip, #1
   877e4:	e002      	b.n	877ec <__cmpdf2+0x4>
   877e6:	bf00      	nop

000877e8 <__cmpdf2>:
   877e8:	f04f 0c01 	mov.w	ip, #1
   877ec:	f84d cd04 	str.w	ip, [sp, #-4]!
   877f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   877f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   877f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   877fc:	bf18      	it	ne
   877fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   87802:	d01b      	beq.n	8783c <__cmpdf2+0x54>
   87804:	b001      	add	sp, #4
   87806:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8780a:	bf0c      	ite	eq
   8780c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   87810:	ea91 0f03 	teqne	r1, r3
   87814:	bf02      	ittt	eq
   87816:	ea90 0f02 	teqeq	r0, r2
   8781a:	2000      	moveq	r0, #0
   8781c:	4770      	bxeq	lr
   8781e:	f110 0f00 	cmn.w	r0, #0
   87822:	ea91 0f03 	teq	r1, r3
   87826:	bf58      	it	pl
   87828:	4299      	cmppl	r1, r3
   8782a:	bf08      	it	eq
   8782c:	4290      	cmpeq	r0, r2
   8782e:	bf2c      	ite	cs
   87830:	17d8      	asrcs	r0, r3, #31
   87832:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   87836:	f040 0001 	orr.w	r0, r0, #1
   8783a:	4770      	bx	lr
   8783c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   87840:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87844:	d102      	bne.n	8784c <__cmpdf2+0x64>
   87846:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8784a:	d107      	bne.n	8785c <__cmpdf2+0x74>
   8784c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   87850:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87854:	d1d6      	bne.n	87804 <__cmpdf2+0x1c>
   87856:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8785a:	d0d3      	beq.n	87804 <__cmpdf2+0x1c>
   8785c:	f85d 0b04 	ldr.w	r0, [sp], #4
   87860:	4770      	bx	lr
   87862:	bf00      	nop

00087864 <__aeabi_cdrcmple>:
   87864:	4684      	mov	ip, r0
   87866:	4610      	mov	r0, r2
   87868:	4662      	mov	r2, ip
   8786a:	468c      	mov	ip, r1
   8786c:	4619      	mov	r1, r3
   8786e:	4663      	mov	r3, ip
   87870:	e000      	b.n	87874 <__aeabi_cdcmpeq>
   87872:	bf00      	nop

00087874 <__aeabi_cdcmpeq>:
   87874:	b501      	push	{r0, lr}
   87876:	f7ff ffb7 	bl	877e8 <__cmpdf2>
   8787a:	2800      	cmp	r0, #0
   8787c:	bf48      	it	mi
   8787e:	f110 0f00 	cmnmi.w	r0, #0
   87882:	bd01      	pop	{r0, pc}

00087884 <__aeabi_dcmpeq>:
   87884:	f84d ed08 	str.w	lr, [sp, #-8]!
   87888:	f7ff fff4 	bl	87874 <__aeabi_cdcmpeq>
   8788c:	bf0c      	ite	eq
   8788e:	2001      	moveq	r0, #1
   87890:	2000      	movne	r0, #0
   87892:	f85d fb08 	ldr.w	pc, [sp], #8
   87896:	bf00      	nop

00087898 <__aeabi_dcmplt>:
   87898:	f84d ed08 	str.w	lr, [sp, #-8]!
   8789c:	f7ff ffea 	bl	87874 <__aeabi_cdcmpeq>
   878a0:	bf34      	ite	cc
   878a2:	2001      	movcc	r0, #1
   878a4:	2000      	movcs	r0, #0
   878a6:	f85d fb08 	ldr.w	pc, [sp], #8
   878aa:	bf00      	nop

000878ac <__aeabi_dcmple>:
   878ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   878b0:	f7ff ffe0 	bl	87874 <__aeabi_cdcmpeq>
   878b4:	bf94      	ite	ls
   878b6:	2001      	movls	r0, #1
   878b8:	2000      	movhi	r0, #0
   878ba:	f85d fb08 	ldr.w	pc, [sp], #8
   878be:	bf00      	nop

000878c0 <__aeabi_dcmpge>:
   878c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   878c4:	f7ff ffce 	bl	87864 <__aeabi_cdrcmple>
   878c8:	bf94      	ite	ls
   878ca:	2001      	movls	r0, #1
   878cc:	2000      	movhi	r0, #0
   878ce:	f85d fb08 	ldr.w	pc, [sp], #8
   878d2:	bf00      	nop

000878d4 <__aeabi_dcmpgt>:
   878d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   878d8:	f7ff ffc4 	bl	87864 <__aeabi_cdrcmple>
   878dc:	bf34      	ite	cc
   878de:	2001      	movcc	r0, #1
   878e0:	2000      	movcs	r0, #0
   878e2:	f85d fb08 	ldr.w	pc, [sp], #8
   878e6:	bf00      	nop

000878e8 <__aeabi_dcmpun>:
   878e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   878ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   878f0:	d102      	bne.n	878f8 <__aeabi_dcmpun+0x10>
   878f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   878f6:	d10a      	bne.n	8790e <__aeabi_dcmpun+0x26>
   878f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   878fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87900:	d102      	bne.n	87908 <__aeabi_dcmpun+0x20>
   87902:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   87906:	d102      	bne.n	8790e <__aeabi_dcmpun+0x26>
   87908:	f04f 0000 	mov.w	r0, #0
   8790c:	4770      	bx	lr
   8790e:	f04f 0001 	mov.w	r0, #1
   87912:	4770      	bx	lr

00087914 <__aeabi_d2iz>:
   87914:	ea4f 0241 	mov.w	r2, r1, lsl #1
   87918:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8791c:	d215      	bcs.n	8794a <__aeabi_d2iz+0x36>
   8791e:	d511      	bpl.n	87944 <__aeabi_d2iz+0x30>
   87920:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   87924:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   87928:	d912      	bls.n	87950 <__aeabi_d2iz+0x3c>
   8792a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8792e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   87932:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   87936:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8793a:	fa23 f002 	lsr.w	r0, r3, r2
   8793e:	bf18      	it	ne
   87940:	4240      	negne	r0, r0
   87942:	4770      	bx	lr
   87944:	f04f 0000 	mov.w	r0, #0
   87948:	4770      	bx	lr
   8794a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8794e:	d105      	bne.n	8795c <__aeabi_d2iz+0x48>
   87950:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   87954:	bf08      	it	eq
   87956:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8795a:	4770      	bx	lr
   8795c:	f04f 0000 	mov.w	r0, #0
   87960:	4770      	bx	lr
   87962:	bf00      	nop

00087964 <__aeabi_uldivmod>:
   87964:	b953      	cbnz	r3, 8797c <__aeabi_uldivmod+0x18>
   87966:	b94a      	cbnz	r2, 8797c <__aeabi_uldivmod+0x18>
   87968:	2900      	cmp	r1, #0
   8796a:	bf08      	it	eq
   8796c:	2800      	cmpeq	r0, #0
   8796e:	bf1c      	itt	ne
   87970:	f04f 31ff 	movne.w	r1, #4294967295
   87974:	f04f 30ff 	movne.w	r0, #4294967295
   87978:	f000 b97a 	b.w	87c70 <__aeabi_idiv0>
   8797c:	f1ad 0c08 	sub.w	ip, sp, #8
   87980:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   87984:	f000 f806 	bl	87994 <__udivmoddi4>
   87988:	f8dd e004 	ldr.w	lr, [sp, #4]
   8798c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87990:	b004      	add	sp, #16
   87992:	4770      	bx	lr

00087994 <__udivmoddi4>:
   87994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87998:	468c      	mov	ip, r1
   8799a:	460e      	mov	r6, r1
   8799c:	4604      	mov	r4, r0
   8799e:	9d08      	ldr	r5, [sp, #32]
   879a0:	2b00      	cmp	r3, #0
   879a2:	d150      	bne.n	87a46 <__udivmoddi4+0xb2>
   879a4:	428a      	cmp	r2, r1
   879a6:	4617      	mov	r7, r2
   879a8:	d96c      	bls.n	87a84 <__udivmoddi4+0xf0>
   879aa:	fab2 fe82 	clz	lr, r2
   879ae:	f1be 0f00 	cmp.w	lr, #0
   879b2:	d00b      	beq.n	879cc <__udivmoddi4+0x38>
   879b4:	f1ce 0c20 	rsb	ip, lr, #32
   879b8:	fa01 f60e 	lsl.w	r6, r1, lr
   879bc:	fa20 fc0c 	lsr.w	ip, r0, ip
   879c0:	fa02 f70e 	lsl.w	r7, r2, lr
   879c4:	ea4c 0c06 	orr.w	ip, ip, r6
   879c8:	fa00 f40e 	lsl.w	r4, r0, lr
   879cc:	0c3a      	lsrs	r2, r7, #16
   879ce:	fbbc f9f2 	udiv	r9, ip, r2
   879d2:	b2bb      	uxth	r3, r7
   879d4:	fb02 cc19 	mls	ip, r2, r9, ip
   879d8:	fb09 fa03 	mul.w	sl, r9, r3
   879dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
   879e0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   879e4:	45b2      	cmp	sl, r6
   879e6:	d90a      	bls.n	879fe <__udivmoddi4+0x6a>
   879e8:	19f6      	adds	r6, r6, r7
   879ea:	f109 31ff 	add.w	r1, r9, #4294967295
   879ee:	f080 8125 	bcs.w	87c3c <__udivmoddi4+0x2a8>
   879f2:	45b2      	cmp	sl, r6
   879f4:	f240 8122 	bls.w	87c3c <__udivmoddi4+0x2a8>
   879f8:	f1a9 0902 	sub.w	r9, r9, #2
   879fc:	443e      	add	r6, r7
   879fe:	eba6 060a 	sub.w	r6, r6, sl
   87a02:	fbb6 f0f2 	udiv	r0, r6, r2
   87a06:	fb02 6610 	mls	r6, r2, r0, r6
   87a0a:	fb00 f303 	mul.w	r3, r0, r3
   87a0e:	b2a4      	uxth	r4, r4
   87a10:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   87a14:	42a3      	cmp	r3, r4
   87a16:	d909      	bls.n	87a2c <__udivmoddi4+0x98>
   87a18:	19e4      	adds	r4, r4, r7
   87a1a:	f100 32ff 	add.w	r2, r0, #4294967295
   87a1e:	f080 810b 	bcs.w	87c38 <__udivmoddi4+0x2a4>
   87a22:	42a3      	cmp	r3, r4
   87a24:	f240 8108 	bls.w	87c38 <__udivmoddi4+0x2a4>
   87a28:	3802      	subs	r0, #2
   87a2a:	443c      	add	r4, r7
   87a2c:	2100      	movs	r1, #0
   87a2e:	1ae4      	subs	r4, r4, r3
   87a30:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   87a34:	2d00      	cmp	r5, #0
   87a36:	d062      	beq.n	87afe <__udivmoddi4+0x16a>
   87a38:	2300      	movs	r3, #0
   87a3a:	fa24 f40e 	lsr.w	r4, r4, lr
   87a3e:	602c      	str	r4, [r5, #0]
   87a40:	606b      	str	r3, [r5, #4]
   87a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87a46:	428b      	cmp	r3, r1
   87a48:	d907      	bls.n	87a5a <__udivmoddi4+0xc6>
   87a4a:	2d00      	cmp	r5, #0
   87a4c:	d055      	beq.n	87afa <__udivmoddi4+0x166>
   87a4e:	2100      	movs	r1, #0
   87a50:	e885 0041 	stmia.w	r5, {r0, r6}
   87a54:	4608      	mov	r0, r1
   87a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87a5a:	fab3 f183 	clz	r1, r3
   87a5e:	2900      	cmp	r1, #0
   87a60:	f040 808f 	bne.w	87b82 <__udivmoddi4+0x1ee>
   87a64:	42b3      	cmp	r3, r6
   87a66:	d302      	bcc.n	87a6e <__udivmoddi4+0xda>
   87a68:	4282      	cmp	r2, r0
   87a6a:	f200 80fc 	bhi.w	87c66 <__udivmoddi4+0x2d2>
   87a6e:	1a84      	subs	r4, r0, r2
   87a70:	eb66 0603 	sbc.w	r6, r6, r3
   87a74:	2001      	movs	r0, #1
   87a76:	46b4      	mov	ip, r6
   87a78:	2d00      	cmp	r5, #0
   87a7a:	d040      	beq.n	87afe <__udivmoddi4+0x16a>
   87a7c:	e885 1010 	stmia.w	r5, {r4, ip}
   87a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87a84:	b912      	cbnz	r2, 87a8c <__udivmoddi4+0xf8>
   87a86:	2701      	movs	r7, #1
   87a88:	fbb7 f7f2 	udiv	r7, r7, r2
   87a8c:	fab7 fe87 	clz	lr, r7
   87a90:	f1be 0f00 	cmp.w	lr, #0
   87a94:	d135      	bne.n	87b02 <__udivmoddi4+0x16e>
   87a96:	2101      	movs	r1, #1
   87a98:	1bf6      	subs	r6, r6, r7
   87a9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   87a9e:	fa1f f887 	uxth.w	r8, r7
   87aa2:	fbb6 f2fc 	udiv	r2, r6, ip
   87aa6:	fb0c 6612 	mls	r6, ip, r2, r6
   87aaa:	fb08 f002 	mul.w	r0, r8, r2
   87aae:	0c23      	lsrs	r3, r4, #16
   87ab0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   87ab4:	42b0      	cmp	r0, r6
   87ab6:	d907      	bls.n	87ac8 <__udivmoddi4+0x134>
   87ab8:	19f6      	adds	r6, r6, r7
   87aba:	f102 33ff 	add.w	r3, r2, #4294967295
   87abe:	d202      	bcs.n	87ac6 <__udivmoddi4+0x132>
   87ac0:	42b0      	cmp	r0, r6
   87ac2:	f200 80d2 	bhi.w	87c6a <__udivmoddi4+0x2d6>
   87ac6:	461a      	mov	r2, r3
   87ac8:	1a36      	subs	r6, r6, r0
   87aca:	fbb6 f0fc 	udiv	r0, r6, ip
   87ace:	fb0c 6610 	mls	r6, ip, r0, r6
   87ad2:	fb08 f800 	mul.w	r8, r8, r0
   87ad6:	b2a3      	uxth	r3, r4
   87ad8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   87adc:	45a0      	cmp	r8, r4
   87ade:	d907      	bls.n	87af0 <__udivmoddi4+0x15c>
   87ae0:	19e4      	adds	r4, r4, r7
   87ae2:	f100 33ff 	add.w	r3, r0, #4294967295
   87ae6:	d202      	bcs.n	87aee <__udivmoddi4+0x15a>
   87ae8:	45a0      	cmp	r8, r4
   87aea:	f200 80b9 	bhi.w	87c60 <__udivmoddi4+0x2cc>
   87aee:	4618      	mov	r0, r3
   87af0:	eba4 0408 	sub.w	r4, r4, r8
   87af4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   87af8:	e79c      	b.n	87a34 <__udivmoddi4+0xa0>
   87afa:	4629      	mov	r1, r5
   87afc:	4628      	mov	r0, r5
   87afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87b02:	fa07 f70e 	lsl.w	r7, r7, lr
   87b06:	f1ce 0320 	rsb	r3, lr, #32
   87b0a:	fa26 f203 	lsr.w	r2, r6, r3
   87b0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   87b12:	fbb2 f1fc 	udiv	r1, r2, ip
   87b16:	fa1f f887 	uxth.w	r8, r7
   87b1a:	fb0c 2211 	mls	r2, ip, r1, r2
   87b1e:	fa06 f60e 	lsl.w	r6, r6, lr
   87b22:	fa20 f303 	lsr.w	r3, r0, r3
   87b26:	fb01 f908 	mul.w	r9, r1, r8
   87b2a:	4333      	orrs	r3, r6
   87b2c:	0c1e      	lsrs	r6, r3, #16
   87b2e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   87b32:	45b1      	cmp	r9, r6
   87b34:	fa00 f40e 	lsl.w	r4, r0, lr
   87b38:	d909      	bls.n	87b4e <__udivmoddi4+0x1ba>
   87b3a:	19f6      	adds	r6, r6, r7
   87b3c:	f101 32ff 	add.w	r2, r1, #4294967295
   87b40:	f080 808c 	bcs.w	87c5c <__udivmoddi4+0x2c8>
   87b44:	45b1      	cmp	r9, r6
   87b46:	f240 8089 	bls.w	87c5c <__udivmoddi4+0x2c8>
   87b4a:	3902      	subs	r1, #2
   87b4c:	443e      	add	r6, r7
   87b4e:	eba6 0609 	sub.w	r6, r6, r9
   87b52:	fbb6 f0fc 	udiv	r0, r6, ip
   87b56:	fb0c 6210 	mls	r2, ip, r0, r6
   87b5a:	fb00 f908 	mul.w	r9, r0, r8
   87b5e:	b29e      	uxth	r6, r3
   87b60:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   87b64:	45b1      	cmp	r9, r6
   87b66:	d907      	bls.n	87b78 <__udivmoddi4+0x1e4>
   87b68:	19f6      	adds	r6, r6, r7
   87b6a:	f100 33ff 	add.w	r3, r0, #4294967295
   87b6e:	d271      	bcs.n	87c54 <__udivmoddi4+0x2c0>
   87b70:	45b1      	cmp	r9, r6
   87b72:	d96f      	bls.n	87c54 <__udivmoddi4+0x2c0>
   87b74:	3802      	subs	r0, #2
   87b76:	443e      	add	r6, r7
   87b78:	eba6 0609 	sub.w	r6, r6, r9
   87b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   87b80:	e78f      	b.n	87aa2 <__udivmoddi4+0x10e>
   87b82:	f1c1 0720 	rsb	r7, r1, #32
   87b86:	fa22 f807 	lsr.w	r8, r2, r7
   87b8a:	408b      	lsls	r3, r1
   87b8c:	ea48 0303 	orr.w	r3, r8, r3
   87b90:	fa26 f407 	lsr.w	r4, r6, r7
   87b94:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   87b98:	fbb4 f9fe 	udiv	r9, r4, lr
   87b9c:	fa1f fc83 	uxth.w	ip, r3
   87ba0:	fb0e 4419 	mls	r4, lr, r9, r4
   87ba4:	408e      	lsls	r6, r1
   87ba6:	fa20 f807 	lsr.w	r8, r0, r7
   87baa:	fb09 fa0c 	mul.w	sl, r9, ip
   87bae:	ea48 0806 	orr.w	r8, r8, r6
   87bb2:	ea4f 4618 	mov.w	r6, r8, lsr #16
   87bb6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   87bba:	45a2      	cmp	sl, r4
   87bbc:	fa02 f201 	lsl.w	r2, r2, r1
   87bc0:	fa00 f601 	lsl.w	r6, r0, r1
   87bc4:	d908      	bls.n	87bd8 <__udivmoddi4+0x244>
   87bc6:	18e4      	adds	r4, r4, r3
   87bc8:	f109 30ff 	add.w	r0, r9, #4294967295
   87bcc:	d244      	bcs.n	87c58 <__udivmoddi4+0x2c4>
   87bce:	45a2      	cmp	sl, r4
   87bd0:	d942      	bls.n	87c58 <__udivmoddi4+0x2c4>
   87bd2:	f1a9 0902 	sub.w	r9, r9, #2
   87bd6:	441c      	add	r4, r3
   87bd8:	eba4 040a 	sub.w	r4, r4, sl
   87bdc:	fbb4 f0fe 	udiv	r0, r4, lr
   87be0:	fb0e 4410 	mls	r4, lr, r0, r4
   87be4:	fb00 fc0c 	mul.w	ip, r0, ip
   87be8:	fa1f f888 	uxth.w	r8, r8
   87bec:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   87bf0:	45a4      	cmp	ip, r4
   87bf2:	d907      	bls.n	87c04 <__udivmoddi4+0x270>
   87bf4:	18e4      	adds	r4, r4, r3
   87bf6:	f100 3eff 	add.w	lr, r0, #4294967295
   87bfa:	d229      	bcs.n	87c50 <__udivmoddi4+0x2bc>
   87bfc:	45a4      	cmp	ip, r4
   87bfe:	d927      	bls.n	87c50 <__udivmoddi4+0x2bc>
   87c00:	3802      	subs	r0, #2
   87c02:	441c      	add	r4, r3
   87c04:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   87c08:	fba0 8902 	umull	r8, r9, r0, r2
   87c0c:	eba4 0c0c 	sub.w	ip, r4, ip
   87c10:	45cc      	cmp	ip, r9
   87c12:	46c2      	mov	sl, r8
   87c14:	46ce      	mov	lr, r9
   87c16:	d315      	bcc.n	87c44 <__udivmoddi4+0x2b0>
   87c18:	d012      	beq.n	87c40 <__udivmoddi4+0x2ac>
   87c1a:	b155      	cbz	r5, 87c32 <__udivmoddi4+0x29e>
   87c1c:	ebb6 030a 	subs.w	r3, r6, sl
   87c20:	eb6c 060e 	sbc.w	r6, ip, lr
   87c24:	fa06 f707 	lsl.w	r7, r6, r7
   87c28:	40cb      	lsrs	r3, r1
   87c2a:	431f      	orrs	r7, r3
   87c2c:	40ce      	lsrs	r6, r1
   87c2e:	602f      	str	r7, [r5, #0]
   87c30:	606e      	str	r6, [r5, #4]
   87c32:	2100      	movs	r1, #0
   87c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87c38:	4610      	mov	r0, r2
   87c3a:	e6f7      	b.n	87a2c <__udivmoddi4+0x98>
   87c3c:	4689      	mov	r9, r1
   87c3e:	e6de      	b.n	879fe <__udivmoddi4+0x6a>
   87c40:	4546      	cmp	r6, r8
   87c42:	d2ea      	bcs.n	87c1a <__udivmoddi4+0x286>
   87c44:	ebb8 0a02 	subs.w	sl, r8, r2
   87c48:	eb69 0e03 	sbc.w	lr, r9, r3
   87c4c:	3801      	subs	r0, #1
   87c4e:	e7e4      	b.n	87c1a <__udivmoddi4+0x286>
   87c50:	4670      	mov	r0, lr
   87c52:	e7d7      	b.n	87c04 <__udivmoddi4+0x270>
   87c54:	4618      	mov	r0, r3
   87c56:	e78f      	b.n	87b78 <__udivmoddi4+0x1e4>
   87c58:	4681      	mov	r9, r0
   87c5a:	e7bd      	b.n	87bd8 <__udivmoddi4+0x244>
   87c5c:	4611      	mov	r1, r2
   87c5e:	e776      	b.n	87b4e <__udivmoddi4+0x1ba>
   87c60:	3802      	subs	r0, #2
   87c62:	443c      	add	r4, r7
   87c64:	e744      	b.n	87af0 <__udivmoddi4+0x15c>
   87c66:	4608      	mov	r0, r1
   87c68:	e706      	b.n	87a78 <__udivmoddi4+0xe4>
   87c6a:	3a02      	subs	r2, #2
   87c6c:	443e      	add	r6, r7
   87c6e:	e72b      	b.n	87ac8 <__udivmoddi4+0x134>

00087c70 <__aeabi_idiv0>:
   87c70:	4770      	bx	lr
   87c72:	bf00      	nop
   87c74:	000f4240 	.word	0x000f4240
   87c78:	000000c0 	.word	0x000000c0
	...
   87c84:	6c303125 	.word	0x6c303125
   87c88:	00000075 	.word	0x00000075
   87c8c:	00643125 	.word	0x00643125
   87c90:	00643225 	.word	0x00643225
   87c94:	53202020 	.word	0x53202020
   87c98:	69747465 	.word	0x69747465
   87c9c:	2073676e 	.word	0x2073676e
   87ca0:	00000020 	.word	0x00000020
   87ca4:	626f5220 	.word	0x626f5220
   87ca8:	4920746f 	.word	0x4920746f
   87cac:	00003a44 	.word	0x00003a44
   87cb0:	65705320 	.word	0x65705320
   87cb4:	003a6465 	.word	0x003a6465
   87cb8:	46495720 	.word	0x46495720
   87cbc:	00003a49 	.word	0x00003a49
   87cc0:	6c614320 	.word	0x6c614320
   87cc4:	61726269 	.word	0x61726269
   87cc8:	00006574 	.word	0x00006574
   87ccc:	74655320 	.word	0x74655320
   87cd0:	65696620 	.word	0x65696620
   87cd4:	7320646c 	.word	0x7320646c
   87cd8:	20657a69 	.word	0x20657a69
   87cdc:	00666572 	.word	0x00666572
   87ce0:	00000000 	.word	0x00000000
   87ce4:	20202020 	.word	0x20202020
   87ce8:	74614d20 	.word	0x74614d20
   87cec:	20206863 	.word	0x20206863
   87cf0:	00000000 	.word	0x00000000
   87cf4:	61745320 	.word	0x61745320
   87cf8:	6d207472 	.word	0x6d207472
   87cfc:	68637461 	.word	0x68637461
   87d00:	00000000 	.word	0x00000000
   87d04:	6e655320 	.word	0x6e655320
   87d08:	20726f73 	.word	0x20726f73
   87d0c:	756c6176 	.word	0x756c6176
   87d10:	00007365 	.word	0x00007365
   87d14:	69724420 	.word	0x69724420
   87d18:	61206576 	.word	0x61206576
   87d1c:	656c676e 	.word	0x656c676e
   87d20:	64697020 	.word	0x64697020
   87d24:	00000000 	.word	0x00000000
   87d28:	20202020 	.word	0x20202020
   87d2c:	73655420 	.word	0x73655420
   87d30:	00007374 	.word	0x00007374
   87d34:	72755420 	.word	0x72755420
   87d38:	6f74206e 	.word	0x6f74206e
   87d3c:	61747320 	.word	0x61747320
   87d40:	00007472 	.word	0x00007472
   87d44:	766f4d20 	.word	0x766f4d20
   87d48:	6f742065 	.word	0x6f742065
   87d4c:	64696d20 	.word	0x64696d20
   87d50:	00656c64 	.word	0x00656c64
   87d54:	766f4d20 	.word	0x766f4d20
   87d58:	6f742065 	.word	0x6f742065
   87d5c:	6c616220 	.word	0x6c616220
   87d60:	0000006c 	.word	0x0000006c
   87d64:	49505220 	.word	0x49505220
   87d68:	00000000 	.word	0x00000000
   87d6c:	6f745320 	.word	0x6f745320
   87d70:	6e6f2070 	.word	0x6e6f2070
   87d74:	6e696c20 	.word	0x6e696c20
   87d78:	00000065 	.word	0x00000065
   87d7c:	636e4520 	.word	0x636e4520
   87d80:	7265646f 	.word	0x7265646f
   87d84:	73657420 	.word	0x73657420
   87d88:	00000074 	.word	0x00000074
   87d8c:	00087c94 	.word	0x00087c94
   87d90:	00087ca4 	.word	0x00087ca4
   87d94:	00087cb0 	.word	0x00087cb0
   87d98:	00087cb8 	.word	0x00087cb8
   87d9c:	00087cc0 	.word	0x00087cc0
   87da0:	00087ccc 	.word	0x00087ccc
   87da4:	00087ce0 	.word	0x00087ce0
   87da8:	00087ce0 	.word	0x00087ce0
   87dac:	00087ce4 	.word	0x00087ce4
   87db0:	00087cf4 	.word	0x00087cf4
   87db4:	00087d04 	.word	0x00087d04
   87db8:	00087d14 	.word	0x00087d14
   87dbc:	00087ce0 	.word	0x00087ce0
   87dc0:	00087ce0 	.word	0x00087ce0
   87dc4:	00087ce0 	.word	0x00087ce0
   87dc8:	00087ce0 	.word	0x00087ce0
   87dcc:	00087d28 	.word	0x00087d28
   87dd0:	00087d34 	.word	0x00087d34
   87dd4:	00087d44 	.word	0x00087d44
   87dd8:	00087d54 	.word	0x00087d54
   87ddc:	00087d64 	.word	0x00087d64
   87de0:	00087d6c 	.word	0x00087d6c
   87de4:	00087d7c 	.word	0x00087d7c
   87de8:	00087ce0 	.word	0x00087ce0
   87dec:	0000003e 	.word	0x0000003e
   87df0:	00000020 	.word	0x00000020
   87df4:	0000003c 	.word	0x0000003c
   87df8:	746f6f62 	.word	0x746f6f62
   87dfc:	20676e69 	.word	0x20676e69
   87e00:	534f6f6e 	.word	0x534f6f6e
   87e04:	00202020 	.word	0x00202020
   87e08:	0000002e 	.word	0x0000002e

00087e0c <_global_impure_ptr>:
   87e0c:	200701a8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   87e1c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   87e2c:	46454443 00000000 33323130 37363534     CDEF....01234567
   87e3c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   87e4c:	0000296c 00000030                       l)..0...

00087e54 <blanks.7223>:
   87e54:	20202020 20202020 20202020 20202020                     

00087e64 <zeroes.7224>:
   87e64:	30303030 30303030 30303030 30303030     0000000000000000
   87e74:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   87e84:	00000000                                ....

00087e88 <__mprec_bigtens>:
   87e88:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   87e98:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   87ea8:	7f73bf3c 75154fdd                       <.s..O.u

00087eb0 <__mprec_tens>:
   87eb0:	00000000 3ff00000 00000000 40240000     .......?......$@
   87ec0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   87ed0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   87ee0:	00000000 412e8480 00000000 416312d0     .......A......cA
   87ef0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   87f00:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   87f10:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   87f20:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   87f30:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   87f40:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   87f50:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   87f60:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   87f70:	79d99db4 44ea7843                       ...yCx.D

00087f78 <p05.6055>:
   87f78:	00000005 00000019 0000007d 00000043     ........}...C...
   87f88:	49534f50 00000058 0000002e              POSIX.......

00087f94 <_ctype_>:
   87f94:	20202000 20202020 28282020 20282828     .         ((((( 
   87fa4:	20202020 20202020 20202020 20202020                     
   87fb4:	10108820 10101010 10101010 10101010      ...............
   87fc4:	04040410 04040404 10040404 10101010     ................
   87fd4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   87fe4:	01010101 01010101 01010101 10101010     ................
   87ff4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   88004:	02020202 02020202 02020202 10101010     ................
   88014:	00000020 00000000 00000000 00000000      ...............
	...

00088098 <_init>:
   88098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8809a:	bf00      	nop
   8809c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8809e:	bc08      	pop	{r3}
   880a0:	469e      	mov	lr, r3
   880a2:	4770      	bx	lr

000880a4 <__init_array_start>:
   880a4:	00084b55 	.word	0x00084b55

000880a8 <__frame_dummy_init_array_entry>:
   880a8:	00080119                                ....

000880ac <_fini>:
   880ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   880ae:	bf00      	nop
   880b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   880b2:	bc08      	pop	{r3}
   880b4:	469e      	mov	lr, r3
   880b6:	4770      	bx	lr

000880b8 <__fini_array_start>:
   880b8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	20070198 	.word	0x20070198
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <print_menu>:
2007018c:	01010101                                         .

2007018d <rbt_id>:
2007018d:	01010101                                         .

2007018e <act_cursor_line_on_lcd>:
2007018e:	01010101                                         .

2007018f <prev_cursor_line_on_lcd>:
2007018f:	01010101                                         .

20070190 <act_cursor_line>:
20070190:	08010101                                         .

20070191 <prev_cursor_line>:
20070191:	01080101                                         .

20070192 <min_cursor_line>:
20070192:	00010801                                         .

20070193 <max_cursor_line>:
20070193:	00000108                                         .

20070194 <menu_main_column>:
20070194:	00000001                                ....

20070198 <SystemCoreClock>:
20070198:	003d0900                                ..=.

2007019c <update_dots>:
2007019c:	00000001                                ....

200701a0 <_impure_ptr>:
200701a0:	200701a8 00000000                       ... ....

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	20071034                                4.. 

200705d4 <__malloc_av_>:
	...
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 

200709dc <__malloc_sbrk_base>:
200709dc:	ffffffff                                ....

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__global_locale>:
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00000043 00000000 00000000 00000000     C...............
	...
20070ac4:	0008702d 00086bcd 00000000 00087f94     -p...k..........
20070ad4:	00087f90 00087e30 00087e30 00087e30     ....0~..0~..0~..
20070ae4:	00087e30 00087e30 00087e30 00087e30     0~..0~..0~..0~..
20070af4:	00087e30 00087e30 ffffffff ffffffff     0~..0~..........
20070b04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
